import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as s,c as h,a,e,d as r,f as i}from"./app-d6e676e2.js";const d={},c=i('<p>大家好，这篇文章来一起看下TCP中那些烦人（常考）的面试题，话不多说，发车！</p><p>为了检验对这些知识掌握的深度，先给大家列出目录：</p><p><strong>1.TCP基础</strong></p><ul><li>TCP 头格式有哪些？</li><li>为什么需要 TCP 协议？ TCP 工作在哪一层？</li><li>什么是 TCP ？</li><li>什么是 TCP 连接？</li><li>如何唯一确定一个 TCP 连接呢？</li><li>UDP 和 TCP 有什么区别呢？分别的应用场景是？</li><li>TCP 和 UDP 可以使用同一个端口吗？</li></ul><p><strong>2.TCP三次握手</strong></p><ul><li>TCP 三次握手过程是怎样的？</li><li>如何在 Linux 系统中查看 TCP 状态？</li><li>为什么是三次握手？不是两次、四次？</li><li>为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？</li><li>初始序列号 ISN 是如何随机产生的？</li><li>既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？</li><li>第一次握手丢失了，会发生什么？</li><li>第二次握手丢失了，会发生什么？</li><li>第三次握手丢失了，会发生什么？</li><li>什么是 SYN 攻击？如何避免 SYN 攻击？</li></ul><p><strong>3.TCP四次挥手</strong></p><ul><li>TCP 四次挥手过程是怎样的？</li><li>为什么挥手需要四次？</li><li>第一次挥手丢失了，会发生什么？</li><li>第二次挥手丢失了，会发生什么？</li><li>第三次挥手丢失了，会发生什么？</li><li>第四次挥手丢失了，会发生什么？</li><li>为什么 TIME_WAIT 等待的时间是 2MSL？</li><li>为什么需要 TIME_WAIT 状态？</li><li>TIME_WAIT 过多有什么危害？</li><li>如何优化 TIME_WAIT？</li><li>服务器出现大量 TIME_WAIT 状态的原因有哪些？</li><li>服务器出现大量 CLOSE_WAIT 状态的原因有哪些？</li><li>如果已经建立了连接，但是客户端突然出现故障了怎么办？</li><li>如果已经建立了连接，但是服务端的进程崩溃会发生什么？</li></ul><p><strong>4.Socket 编程</strong></p><ul><li>针对 TCP 应该如何 Socket 编程？</li><li>listen 时候参数 backlog 的意义？</li><li>accept 发生在三次握手的哪一步？</li><li>客户端调用 close 了，连接是断开的流程是什么？</li><li>没有 accept，能建立 TCP 连接吗？</li><li>没有 listen，能建立 TCP 连接吗？</li></ul><h2 id="_1-tcp基础" tabindex="-1"><a class="header-anchor" href="#_1-tcp基础" aria-hidden="true">#</a> 1.TCP基础</h2><h3 id="_1-1tcp-头格式有哪些" tabindex="-1"><a class="header-anchor" href="#_1-1tcp-头格式有哪些" aria-hidden="true">#</a> 1.1TCP 头格式有哪些？</h3><figure><img src="http://www.img.youngxy.top/Java/fig/tcp-format.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',13),o={href:"https://www.xiaolincoding.com/network/3_tcp/tcp_interview.html",target:"_blank",rel:"noopener noreferrer"},p=i('<p><strong>序列号</strong>：在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就「累加」一次该「数据字节数」的大小。<strong>用来解决网络包乱序问题。</strong></p><p><strong>确认应答号</strong>：指下一次「期望」收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。<strong>用来解决丢包的问题。</strong></p><p><strong>控制位：</strong></p><ul><li><em>ACK</em>：该位为 <code>1</code> 时，「确认应答」的字段变为有效，TCP 规定除了最初建立连接时的 <code>SYN</code> 包之外该位必须设置为 <code>1</code> 。</li><li><em>RST</em>：该位为 <code>1</code> 时，表示 TCP 连接中出现异常必须强制断开连接。</li><li><em>SYN</em>：该位为 <code>1</code> 时，表示希望建立连接，并在其「序列号」的字段进行序列号初始值的设定。</li><li><em>FIN</em>：该位为 <code>1</code> 时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 <code>FIN</code> 位为 1 的 TCP 段。</li></ul><h3 id="_1-2为什么需要-tcp-协议-tcp-工作在哪一层" tabindex="-1"><a class="header-anchor" href="#_1-2为什么需要-tcp-协议-tcp-工作在哪一层" aria-hidden="true">#</a> 1.2为什么需要 TCP 协议？ TCP 工作在哪一层？</h3><p><strong>原因：</strong><code>IP</code> 层是「不可靠」的，它不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据的完整性。如果需要保障网络数据包的可靠性，那么就需要由上层（传输层）的 <code>TCP</code> 协议来负责。</p><p>因为 TCP 是一个工作在<strong>传输层</strong>的<strong>可靠</strong>数据传输的服务，它能确保接收端接收的网络包是<strong>无损坏、无间隔、非冗余和按序的。</strong></p><h3 id="_1-3什么是-tcp" tabindex="-1"><a class="header-anchor" href="#_1-3什么是-tcp" aria-hidden="true">#</a> 1.3什么是 TCP ？</h3><p>总结一句话：TCP 是<strong>面向连接的、可靠的、基于字节流</strong>的传输层通信协议。</p><p>具体的给面试官扯一扯：</p><ul><li><strong>面向连接</strong>：一定是「一对一」才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；</li><li><strong>可靠的</strong>：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；</li><li><strong>字节流</strong>：用户消息通过 TCP 协议传输时，消息可能会被操作系统「分组」成多个的 TCP 报文，如果接收方的程序如果不知道「消息的边界」，是无法读出一个有效的用户消息的。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。</li></ul><h3 id="_1-4什么是-tcp-连接" tabindex="-1"><a class="header-anchor" href="#_1-4什么是-tcp-连接" aria-hidden="true">#</a> 1.4什么是 TCP 连接？</h3><p>大白话：<strong>用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括 Socket、序列号和窗口大小称为连接。</strong></p><p>包含三个东西：</p><ul><li><strong>Socket</strong>：由 IP 地址和端口号组成</li><li><strong>序列号</strong>：用来解决乱序问题等</li><li><strong>窗口大小</strong>：用来做流量控制</li></ul><h3 id="_1-5如何唯一确定一个-tcp-连接呢" tabindex="-1"><a class="header-anchor" href="#_1-5如何唯一确定一个-tcp-连接呢" aria-hidden="true">#</a> 1.5如何唯一确定一个 TCP 连接呢？</h3><p>TCP 四元组可以唯一的确定一个连接，四元组包括如下：</p><ul><li>源地址（IP地址，32位，存在IP头部）</li><li>源端口（端口，16位，存在TCP头部）</li><li>目的地址（IP地址，32位，存在IP头部）</li><li>目的端口（端口，16位，存在TCP头部）</li></ul><p>这地方有个常见面试题：</p><p><strong>有一个 IP 的服务端监听了一个端口，它的 TCP 的最大连接数是多少？</strong></p><p>服务端通常固定在某个本地端口上监听，等待客户端的连接请求。</p><p>因此，客户端 IP 和端口是可变的，其理论值计算公式如下:</p>',22),_=a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("mi",null,"T"),a("mi",null,"C"),a("mi",null,"P"),a("mtext",null,"的最大连接数"),a("mo",null,"="),a("mtext",null,"客户端的"),a("mi",null,"I"),a("mi",null,"P"),a("mtext",null,"数"),a("mo",null,"⋅"),a("mtext",null,"客户端的端口数")]),a("annotation",{encoding:"application/x-tex"}," TCP 的最大连接数 = 客户端的IP数 \\cdot 客户端的端口数 ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"TCP"),a("span",{class:"mord cjk_fallback"},"的最大连接数"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"客户端的"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),a("span",{class:"mord cjk_fallback"},"数"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"⋅"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"客户端的端口数")])])])])],-1),P=i('<p>对 IPv4，客户端的 IP 数最多为 <code>2</code> 的 <code>32</code> 次方，客户端的端口数最多为 <code>2</code> 的 <code>16</code> 次方，也就是服务端单机最大 TCP 连接数，约为 <code>2</code> 的 <code>48</code> 次方。</p><p>当然，服务端最大并发 TCP 连接数远不能达到理论上限，还收到物理内存和其他因素影响。</p><h3 id="_1-6udp-和-tcp-有什么区别呢-分别的应用场景是" tabindex="-1"><a class="header-anchor" href="#_1-6udp-和-tcp-有什么区别呢-分别的应用场景是" aria-hidden="true">#</a> 1.6UDP 和 TCP 有什么区别呢？分别的应用场景是？</h3><figure><img src="http://www.img.youngxy.top/Java/fig/udp-format.webp" alt="UDP 头部格式" tabindex="0" loading="lazy"><figcaption>UDP 头部格式</figcaption></figure><h4 id="_1-6-1tcp-和-udp-区别" tabindex="-1"><a class="header-anchor" href="#_1-6-1tcp-和-udp-区别" aria-hidden="true">#</a> 1.6.1TCP 和 UDP 区别：</h4><p><strong>1.连接</strong></p><ul><li>TCP 是面向连接的传输层协议，传输数据前先要建立连接。</li><li>UDP 是不需要连接，即刻传输数据。</li></ul><p><strong>2. 服务对象</strong></p><ul><li>TCP 是一对一的两点服务，即一条连接只有两个端点。</li><li>UDP 支持一对一、一对多、多对多的交互通信</li></ul><p><strong>3. 可靠性</strong></p>',10),u=a("li",null,"TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按序到达。",-1),g={href:"https://xiaolincoding.com/network/3_tcp/quic.html",target:"_blank",rel:"noopener noreferrer"},T=i('<p><strong>4. 拥塞控制、流量控制</strong></p><ul><li>TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。</li><li>UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。</li></ul><p><strong>5. 首部开销</strong></p><ul><li>TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 <code>20</code> 个字节，如果使用了「选项」字段则会变长的。</li><li>UDP 首部只有 8 个字节，并且是固定不变的，开销较小。</li></ul><p><strong>6. 传输方式</strong></p><ul><li>TCP 是流式传输，没有边界，但保证顺序和可靠。</li><li>UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。</li></ul><p><strong>7. 分片不同</strong></p><ul><li>TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。</li><li>UDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层。</li></ul><h4 id="_1-6-2tcp-和-udp-应用场景" tabindex="-1"><a class="header-anchor" href="#_1-6-2tcp-和-udp-应用场景" aria-hidden="true">#</a> 1.6.2TCP 和 UDP 应用场景：</h4><p>由于 TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：</p><ul><li>FTP 文件传输；</li><li>HTTP / HTTPS；</li></ul><p>由于 UDP 面向无连接，它可以随时发送数据，再加上 UDP 本身的处理既简单又高效，因此经常用于：</p><ul><li>包总量较少的通信，如 DNS、SNMP 等；</li><li>视频、音频等多媒体通信；</li><li>广播通信；</li></ul><p>这里有两道常见面试题：</p><p><strong>为什么 UDP 头部没有「首部长度」字段，而 TCP 头部有「首部长度」字段呢？</strong></p><p>原因： TCP 有<strong>可变长</strong>的「选项」字段，而 UDP 头部长度则是<strong>不会变化</strong>的，无需多一个字段去记录 UDP 的首部长度。</p><p><strong>为什么 UDP 头部有「包长度」字段，而 TCP 头部则没有「包长度」字段呢？</strong></p><p>比较靠谱的原因：如今的 UDP 协议是基于 IP 协议发展的，而当年可能并非如此，依赖的可能是别的不提供自身报文长度或首部长度的网络层协议，因此 UDP 报文首部需要有长度字段以供计算。</p><h3 id="_1-7tcp-和-udp-可以使用同一个端口吗" tabindex="-1"><a class="header-anchor" href="#_1-7tcp-和-udp-可以使用同一个端口吗" aria-hidden="true">#</a> 1.7TCP 和 UDP 可以使用同一个端口吗？</h3><p>总结：可以的。</p><p>传输层的<strong>端口号</strong>的作用，是为了区分同一个主机上不同应用程序的数据包。</p><p>传输层有两个传输协议分别是 TCP 和 UDP，在内核中是两个完全独立的软件模块。</p><p>当主机收到数据包后，可以在 IP 包头的「协议号」字段知道该数据包是 TCP/UDP，所以可以根据这个信息确定送给哪个模块（TCP/UDP）处理，送给 TCP/UDP 模块的报文根据「端口号」确定送给哪个应用程序处理。</p><p>因此，TCP/UDP 各自的端口号也相互独立，如 TCP 有一个 80 号端口，UDP 也可以有一个 80 号端口，二者并不冲突。</p>',24),m={href:"https://xiaolincoding.com/network/3_tcp/port.html",target:"_blank",rel:"noopener noreferrer"},C=i('<h2 id="_2-tcp三次握手" tabindex="-1"><a class="header-anchor" href="#_2-tcp三次握手" aria-hidden="true">#</a> <strong>2.TCP三次握手</strong></h2><h3 id="_2-1tcp-三次握手过程是怎样的" tabindex="-1"><a class="header-anchor" href="#_2-1tcp-三次握手过程是怎样的" aria-hidden="true">#</a> 2.1TCP 三次握手过程是怎样的？</h3><h3 id="_2-2如何在-linux-系统中查看-tcp-状态" tabindex="-1"><a class="header-anchor" href="#_2-2如何在-linux-系统中查看-tcp-状态" aria-hidden="true">#</a> 2.2如何在 Linux 系统中查看 TCP 状态？</h3><h3 id="_2-3为什么是三次握手-不是两次、四次" tabindex="-1"><a class="header-anchor" href="#_2-3为什么是三次握手-不是两次、四次" aria-hidden="true">#</a> 2.3为什么是三次握手？不是两次、四次？</h3><h3 id="_2-4为什么每次建立-tcp-连接时-初始化的序列号都要求不一样呢" tabindex="-1"><a class="header-anchor" href="#_2-4为什么每次建立-tcp-连接时-初始化的序列号都要求不一样呢" aria-hidden="true">#</a> 2.4为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？</h3><h3 id="_2-5初始序列号-isn-是如何随机产生的" tabindex="-1"><a class="header-anchor" href="#_2-5初始序列号-isn-是如何随机产生的" aria-hidden="true">#</a> 2.5初始序列号 ISN 是如何随机产生的？</h3><h3 id="_2-6既然-ip-层会分片-为什么-tcp-层还需要-mss-呢" tabindex="-1"><a class="header-anchor" href="#_2-6既然-ip-层会分片-为什么-tcp-层还需要-mss-呢" aria-hidden="true">#</a> 2.6既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？</h3><h3 id="_2-7第一次握手丢失了-会发生什么" tabindex="-1"><a class="header-anchor" href="#_2-7第一次握手丢失了-会发生什么" aria-hidden="true">#</a> 2.7第一次握手丢失了，会发生什么？</h3><h3 id="_2-8第二次握手丢失了-会发生什么" tabindex="-1"><a class="header-anchor" href="#_2-8第二次握手丢失了-会发生什么" aria-hidden="true">#</a> 2.8第二次握手丢失了，会发生什么？</h3><h3 id="_2-9第三次握手丢失了-会发生什么" tabindex="-1"><a class="header-anchor" href="#_2-9第三次握手丢失了-会发生什么" aria-hidden="true">#</a> 2.9第三次握手丢失了，会发生什么？</h3><h3 id="_2-10什么是-syn-攻击-如何避免-syn-攻击" tabindex="-1"><a class="header-anchor" href="#_2-10什么是-syn-攻击-如何避免-syn-攻击" aria-hidden="true">#</a> 2.10什么是 SYN 攻击？如何避免 SYN 攻击？</h3><h2 id="_3-tcp四次挥手" tabindex="-1"><a class="header-anchor" href="#_3-tcp四次挥手" aria-hidden="true">#</a> <strong>3.TCP四次挥手</strong></h2><h3 id="_3-1tcp-四次挥手过程是怎样的" tabindex="-1"><a class="header-anchor" href="#_3-1tcp-四次挥手过程是怎样的" aria-hidden="true">#</a> 3.1TCP 四次挥手过程是怎样的？</h3><h3 id="_3-2为什么挥手需要四次" tabindex="-1"><a class="header-anchor" href="#_3-2为什么挥手需要四次" aria-hidden="true">#</a> 3.2为什么挥手需要四次？</h3><h3 id="_3-3第一次挥手丢失了-会发生什么" tabindex="-1"><a class="header-anchor" href="#_3-3第一次挥手丢失了-会发生什么" aria-hidden="true">#</a> 3.3第一次挥手丢失了，会发生什么？</h3><h3 id="_3-4第二次挥手丢失了-会发生什么" tabindex="-1"><a class="header-anchor" href="#_3-4第二次挥手丢失了-会发生什么" aria-hidden="true">#</a> 3.4第二次挥手丢失了，会发生什么？</h3><h3 id="_3-5第三次挥手丢失了-会发生什么" tabindex="-1"><a class="header-anchor" href="#_3-5第三次挥手丢失了-会发生什么" aria-hidden="true">#</a> 3.5第三次挥手丢失了，会发生什么？</h3><h3 id="_3-6第四次挥手丢失了-会发生什么" tabindex="-1"><a class="header-anchor" href="#_3-6第四次挥手丢失了-会发生什么" aria-hidden="true">#</a> 3.6第四次挥手丢失了，会发生什么？</h3><h3 id="_3-7为什么-time-wait-等待的时间是-2msl" tabindex="-1"><a class="header-anchor" href="#_3-7为什么-time-wait-等待的时间是-2msl" aria-hidden="true">#</a> 3.7为什么 TIME_WAIT 等待的时间是 2MSL？</h3><h3 id="_3-8为什么需要-time-wait-状态" tabindex="-1"><a class="header-anchor" href="#_3-8为什么需要-time-wait-状态" aria-hidden="true">#</a> 3.8为什么需要 TIME_WAIT 状态？</h3><h3 id="_3-9time-wait-过多有什么危害" tabindex="-1"><a class="header-anchor" href="#_3-9time-wait-过多有什么危害" aria-hidden="true">#</a> 3.9TIME_WAIT 过多有什么危害？</h3><h3 id="_3-10如何优化-time-wait" tabindex="-1"><a class="header-anchor" href="#_3-10如何优化-time-wait" aria-hidden="true">#</a> 3.10如何优化 TIME_WAIT？</h3><h3 id="_3-11服务器出现大量-time-wait-状态的原因有哪些" tabindex="-1"><a class="header-anchor" href="#_3-11服务器出现大量-time-wait-状态的原因有哪些" aria-hidden="true">#</a> 3.11服务器出现大量 TIME_WAIT 状态的原因有哪些？</h3><h3 id="_3-12服务器出现大量-close-wait-状态的原因有哪些" tabindex="-1"><a class="header-anchor" href="#_3-12服务器出现大量-close-wait-状态的原因有哪些" aria-hidden="true">#</a> 3.12服务器出现大量 CLOSE_WAIT 状态的原因有哪些？</h3><h3 id="_3-13如果已经建立了连接-但是客户端突然出现故障了怎么办" tabindex="-1"><a class="header-anchor" href="#_3-13如果已经建立了连接-但是客户端突然出现故障了怎么办" aria-hidden="true">#</a> 3.13如果已经建立了连接，但是客户端突然出现故障了怎么办？</h3><h3 id="_3-14如果已经建立了连接-但是服务端的进程崩溃会发生什么" tabindex="-1"><a class="header-anchor" href="#_3-14如果已经建立了连接-但是服务端的进程崩溃会发生什么" aria-hidden="true">#</a> 3.14如果已经建立了连接，但是服务端的进程崩溃会发生什么？</h3><h2 id="_4-socket-编程" tabindex="-1"><a class="header-anchor" href="#_4-socket-编程" aria-hidden="true">#</a> <strong>4.Socket 编程</strong></h2><h3 id="_4-1针对-tcp-应该如何-socket-编程" tabindex="-1"><a class="header-anchor" href="#_4-1针对-tcp-应该如何-socket-编程" aria-hidden="true">#</a> 4.1针对 TCP 应该如何 Socket 编程？</h3><h3 id="_4-2listen-时候参数-backlog-的意义" tabindex="-1"><a class="header-anchor" href="#_4-2listen-时候参数-backlog-的意义" aria-hidden="true">#</a> 4.2listen 时候参数 backlog 的意义？</h3><h3 id="_4-3accept-发生在三次握手的哪一步" tabindex="-1"><a class="header-anchor" href="#_4-3accept-发生在三次握手的哪一步" aria-hidden="true">#</a> 4.3accept 发生在三次握手的哪一步？</h3><h3 id="_4-4客户端调用-close-了-连接是断开的流程是什么" tabindex="-1"><a class="header-anchor" href="#_4-4客户端调用-close-了-连接是断开的流程是什么" aria-hidden="true">#</a> 4.4客户端调用 close 了，连接是断开的流程是什么？</h3><h3 id="_4-5没有-accept-能建立-tcp-连接吗" tabindex="-1"><a class="header-anchor" href="#_4-5没有-accept-能建立-tcp-连接吗" aria-hidden="true">#</a> 4.5没有 accept，能建立 TCP 连接吗？</h3><h3 id="_4-6没有-listen-能建立-tcp-连接吗" tabindex="-1"><a class="header-anchor" href="#_4-6没有-listen-能建立-tcp-连接吗" aria-hidden="true">#</a> 4.6没有 listen，能建立 TCP 连接吗？</h3>',33);function f(x,b){const t=n("ExternalLinkIcon");return s(),h("div",null,[c,a("p",null,[e("看了"),a("a",o,[e("大佬小林coding"),r(t)]),e("的文章，我总结面试常考的也就是：")]),p,_,P,a("ul",null,[u,a("li",null,[e("UDP 是尽最大努力交付，不保证可靠交付数据。但是我们可以基于 UDP 传输协议实现一个可靠的传输协议，比如 QUIC 协议，具体可以参见这篇文章："),a("a",g,[e("如何基于 UDP 协议实现可靠传输？"),r(t)])])]),T,a("p",null,[e("可以看这篇文章："),a("a",m,[e("TCP 和 UDP 可以使用同一个端口吗？"),r(t)])]),C])}const U=l(d,[["render",f],["__file","TCP和UDP.html.vue"]]);export{U as default};
