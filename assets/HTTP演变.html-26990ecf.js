import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as T,c as i,f as r}from"./app-7aab27fa.js";const e={},o=r('<h2 id="_1-1http-1-1-相比-http-1-0-提高了什么性能" tabindex="-1"><a class="header-anchor" href="#_1-1http-1-1-相比-http-1-0-提高了什么性能" aria-hidden="true">#</a> 1.1HTTP/1.1 相比 HTTP/1.0 提高了什么性能？</h2><p>HTTP/1.1 相比 HTTP/1.0 性能上的改进：</p><ul><li>使用长连接的方式改善了 HTTP/1.0 短连接造成的性能开销。</li><li>支持管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。</li></ul><p>但 HTTP/1.1 还是有性能瓶颈：</p><ul><li>请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 <code>Body</code> 的部分；</li><li>发送冗长的首部。每次互相发送相同的首部造成的浪费较多；</li><li>服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞；</li><li>没有请求优先级控制；</li><li>请求只能从客户端开始，服务器只能被动响应。</li></ul><h2 id="_1-2http-2-做了什么优化" tabindex="-1"><a class="header-anchor" href="#_1-2http-2-做了什么优化" aria-hidden="true">#</a> 1.2HTTP/2 做了什么优化？</h2><p>HTTP/2 协议是基于 HTTPS 的，所以 HTTP/2 的安全性也是有保障的。</p><figure><img src="http://www.img.youngxy.top/Java/fig/HTTP2-1.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那 HTTP/2 相比 HTTP/1.1 性能上的改进：</p><ul><li><strong>头部压缩</strong>:如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你<strong>消除重复的部分</strong>。</li><li><strong>二进制格式</strong>:采用了<strong>二进制格式</strong>，头信息和数据体都是二进制。</li><li><strong>并发传输</strong>:引出了 Stream 概念，多个 Stream 复用在一条 TCP 连接。<strong>针对不同的 HTTP 请求用独一无二的 Stream ID 来区分，接收端可以通过 Stream ID 有序组装成 HTTP 消息，不同 Stream 的帧是可以乱序发送的，因此可以并发不同的 Stream ，也就是 HTTP/2 可以并行交错地发送请求和响应</strong>。</li><li><strong>服务器主动推送资源</strong>:客户端和服务器<strong>双方都可以建立 Stream</strong>。</li></ul><figure><img src="http://www.img.youngxy.top/Java/fig/http2-2.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>HTTP/2 有什么缺陷？</strong></p><p>HTTP/2 通过 Stream 的并发能力，解决了 HTTP/1 队头阻塞的问题，看似很完美了，但是 HTTP/2 还是存在“队头阻塞”的问题，只不过问题不是在 HTTP 这一层面，而是在 TCP 这一层。</p><p><strong>HTTP/2 是基于 TCP 协议来传输数据的，TCP 是字节流协议，TCP 层必须保证收到的字节数据是完整且连续的，这样内核才会将缓冲区里的数据返回给 HTTP 应用，那么当「前 1 个字节数据」没有到达时，后收到的字节数据只能存放在内核缓冲区里，只有等到这 1 个字节数据到达时，HTTP/2 应用层才能从内核中拿到数据，这就是 HTTP/2 队头阻塞问题。</strong></p><p><strong>为什么现在广泛使用的还是HTTP1.1？</strong></p><ul><li>HTTP1.1已经足够满足大多数网站和应用的需要。许多网站其实用不上HTTP2带来的全部优势。</li><li>HTTP2相对较新,2015年才正式发布。采用和部署HTTP2需要服务器和客户端同时支持。许多老旧系统需要升级才能使用。</li><li>HTTP2主要优势是在移动互联网和高负载下更好的性能。对于传统的网站改进不明显。采用HTTP2成本和收益不对等。</li></ul><p>所以简单来说,HTTP1.1仍普遍使用是因为其成熟稳定、广泛兼容,且对许多网站来说HTTP2带来的优势还不够明显。但随着时间推移,HTTP2会被越来越多网站采用。</p>',17),l=[o];function a(n,p){return T(),i("div",null,l)}const g=t(e,[["render",a],["__file","HTTP演变.html.vue"]]);export{g as default};
