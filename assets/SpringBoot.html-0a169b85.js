import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as n,e as s,d as e,f as a}from"./app-6de35cd4.js";const l={},r=a('<h2 id="_1-spring-boot自动配置原理" tabindex="-1"><a class="header-anchor" href="#_1-spring-boot自动配置原理" aria-hidden="true">#</a> 1.Spring Boot自动配置原理</h2><p>在Spring程序main方法中，添加**@SpringBootApplication<strong>或者</strong>@EnableAutoConfiguration<strong>会自动去maven中读取每个starter中的</strong>spring.factories<strong>文件，该文件里配置了所有需要被创建的Spring容器中的bean。Spring Boot 通过</strong>@EnableAutoConfiguration<strong>开启自动装配，通过 <strong>SpringFactoriesLoader</strong> 最终加载</strong>META-INF/spring.factories<strong>中的自动配置类实现自动装配，自动配置类其实就是通过</strong>@Conditional<strong>按需加载的配置类，想要其生效必须引入</strong>spring-boot-starter-xxx**包实现起步依赖。</p><p><strong>第 1 步:</strong> 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true，可在 application.properties 或 application.yml 中设置。</p><figure><img src="http://www.img.youngxy.top/Java/fig/springboot1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>第 2 步 ：</strong> 用于获取<strong>EnableAutoConfiguration</strong>注解中的 <strong>exclude</strong> 和 <strong>excludeName</strong>。</p><figure><img src="http://www.img.youngxy.top/Java/fig/springboot2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>第 3 步：</strong> 获取需要自动装配的所有配置类，读取<strong>META-INF/spring.factories</strong>：</p><p>spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories</p><figure><img src="http://www.img.youngxy.top/Java/fig/springboot3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从下图可以看到这个文件的配置内容都被我们读取到了。XXXAutoConfiguration的作用就是按需加载组件。 不光是这个依赖下的META-INF/spring.factories被读取到，所有 Spring Boot Starter 下的META-INF/spring.factories都会被读取到。</p><figure><img src="http://www.img.youngxy.top/Java/fig/springboot4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>自动配置作为Spring Boot的核心功能之一,其原理主要包含以下四点:</strong></p><ul><li>@SpringBootApplication注解</li></ul><p>这个注解包含了@ComponentScan、@Configuration和@EnableAutoConfiguration,其中最关键的就是@EnableAutoConfiguration注解,它会根据classpath中的jar依赖为项目进行自动配置。</p><ul><li>@EnableAutoConfiguration注解</li></ul><p>该注解通过SpringFactoriesLoader会加载classpath下META-INF/spring.factories文件中配置的自动配置类。这些自动配置类可以帮助Spring Boot项目进行自动化设置。</p><ul><li>启动引导程序Bootstrap Application</li></ul><p>Spring Boot在启动时会通过一个引导程序进行项目初始化。该引导程序会先加载自动配置类和其它一些关键类,实现自动配置的预处理工作。</p><ul><li>条件注解@Conditional</li></ul><p>Spring Boot提供了各种条件注解如@ConditionalOnClass、@ConditionalOnMissingBean等,自动配置类可以通过这些注解来对配置进行定制化。只有满足条件的自动配置才会生效。</p><p><strong>总体流程：</strong></p><p>1、引入Starter组件</p><p>2、@EnableAutoConfiguration注解通过@Import注解导入AutoConfigurationImportSelector类（@Import注解可以导入配置类或者Bean到当前类中）。</p><p>3、SpringBoot基于约定去Starter组件的路径下（META-INF/spring.factories）去找配置类</p><p>4、SpringBoot使用AutoConfigurationImportSelector类中getCandidateConfigurations去导入这些配置类，并根据@Conditional动态加载配置类里面的Bean到容器</p>',25),u={href:"https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html#autoconfigurationimportselector-%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="_2-spring-boot-加载配置文件的优先级了解么" tabindex="-1"><a class="header-anchor" href="#_2-spring-boot-加载配置文件的优先级了解么" aria-hidden="true">#</a> 2.Spring Boot 加载配置文件的优先级了解么？</h2><p>项目启动后扫描顺序：</p><p>1）先去项目根目录找config文件夹下找配置文件件 2）再去根目录下找配置文件 3）去resources下找cofnig文件夹下找配置文件 4）去resources下找配置文件</p><figure><img src="http://www.img.youngxy.top/Java/fig/springboot5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-如何使用-spring-boot-实现全局异常处理" tabindex="-1"><a class="header-anchor" href="#_3-如何使用-spring-boot-实现全局异常处理" aria-hidden="true">#</a> 3.如何使用 Spring Boot 实现全局异常处理？</h2><ul><li>创建一个全局异常处理类,实现HandlerExceptionResolver接口。</li><li>@ControllerAdvice注解标注该类是一个全局异常处理类。</li><li>@ExceptionHandler注解用来定义该方法处理的异常类型。</li><li>在处理方法中添加Exception类型的参数,可以获取异常对象信息。</li><li>处理方法中根据异常类型进行相应处理,比如返回指定的错误信息。</li><li>创建ResponseEntity对象封装返回的错误信息,设置状态码等信息。</li><li>在Spring Boot主类中使用@Bean注解注册全局异常处理类。</li><li>当 controller 抛出异常时,会被全局异常处理类自动捕获,并进行相应的处理,返回给用户统一的错误响应。</li></ul><p>例子：</p><p>创建全局异常处理类:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;服务器内部错误&quot;</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span> 
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleBusinessException</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Spring Boot启动类中注册:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token function">getGlobalExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Controller中抛出异常:</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>@RestController
public class TestController {

    @GetMapping(&quot;/test&quot;)
    public String test() {
        throw new BusinessException(&quot;业务异常&quot;);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问/test接口会进入全局异常处理,返回业务异常信息。</p><h2 id="_4-核心配置文件" tabindex="-1"><a class="header-anchor" href="#_4-核心配置文件" aria-hidden="true">#</a> 4.核心配置文件</h2><p>SpringBoot的核心配置文件是<strong>application</strong>和<strong>bootstrap</strong>配置文件。</p><p>application配置文件这个容易理解，主要用于Spring Boot项目的自动化配置。</p><p>bootstrap配置文件，该文件用于关联配置中心的配置,也可以配置一些初始化参数,会更早地加载。使用Spring Cloud Config配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；</p><h2 id="_5-实现热部署的方式" tabindex="-1"><a class="header-anchor" href="#_5-实现热部署的方式" aria-hidden="true">#</a> 5.实现热部署的方式</h2><p>这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-监视器和监听器" tabindex="-1"><a class="header-anchor" href="#_6-监视器和监听器" aria-hidden="true">#</a> 6.监视器和监听器</h2><h3 id="_6-1监听器" tabindex="-1"><a class="header-anchor" href="#_6-1监听器" aria-hidden="true">#</a> 6.1监听器</h3><p>监听器也叫listener，是servlet的监听器，可以用于监听web应用程序中某些对象的创建、销毁、增加、修改、删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化时，服务器自动调用监听器对象中的方法，常用于系统加载时进行信息初始化，统计在线人数和在线用户，统计网站的访问量。 配置监听器的方法：</p><ul><li>通过@Component把监听器加入Spring容器中管理;</li><li>在application.properties中添加context.listener.classes配置;</li><li>在方法上加@EventListener注解;</li></ul><h3 id="_6-2监控器" tabindex="-1"><a class="header-anchor" href="#_6-2监控器" aria-hidden="true">#</a> 6.2监控器</h3>`,26),g=n("strong",null,"actuator",-1),k=n("code",null,"spring-boot-starter-actuator",-1),v={href:"http://localhost:8080/actuator",target:"_blank",rel:"noopener noreferrer"},m=a('<p>Spring Boot自带监控组件—Actuator，它可以帮助实现对程序内部运行情况的监控。Actuator轻松实现应用程序的监控治理，比如健康状况、审计、统计和HTTP追踪、Bean加载情况、环境变量、日志信息、线程信息等。 Actuator的核心是端点（Endpoint），它用来监视、提供应用程序的信息，Spring Boot提供的spring-boot-actuator组件中已经内置了非常多的Endpoint（health、info、beans、metrics、httptrace、shutdown等），每个端点都可以启用和禁用。</p><h2 id="_7-什么是spring-boot-starter-有哪些常用的" tabindex="-1"><a class="header-anchor" href="#_7-什么是spring-boot-starter-有哪些常用的" aria-hidden="true">#</a> 7.什么是Spring Boot Starter？有哪些常用的？</h2><p>和自动配置一样，Spring Boot Starter的目的也是简化配置，而Spring Boot Starter解决的是依赖管理配置复杂的问题，有了它，当我需要构建一个Web应用程序时，不必再遍历所有的依赖包，一个一个地添加到项目的依赖管理中，而是只需要一个配置spring-boot-starter-web。</p><p>常用的：</p><ul><li>spring-boot-starter-web - Web 和 RESTful 应用程序</li><li>spring-boot-starter-test - 单元测试和集成测试</li></ul><p><strong>spring-boot-starter-parent有什么作用？</strong></p><p>我们知道，新建一个SpringBoot项目，默认都是有parent的，这个parent就是spring-boot-starter-parent，spring-boot-starter-parent主要有如下作用：</p><ul><li>定义了Java编译版本</li><li>使用UTF-8格式编码</li><li>继承自spring-boor-dependencies，这里面定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号</li><li>执行打包操作的配置</li><li>自动化的资源过滤</li><li>自动化的插件配置</li></ul><h2 id="_8-spring-boot四大核心组件" tabindex="-1"><a class="header-anchor" href="#_8-spring-boot四大核心组件" aria-hidden="true">#</a> 8.Spring Boot四大核心组件</h2><p>四大组件分别是：starter， autoconfigure, CLI 以及actuator。</p><p>autoconfigure在我们的开发中并不会被感知，因为它是存在于我们的starter中的，所以我们的每个starter都是依赖autoconfigure的。</p><p>Spring Boot CLI是一个命令行使用Spring Boot的客户端工具；主要功能如下：</p><ul><li>运行groovy脚本 =&gt; <code>官网2.1</code></li><li>打包groovy文件到jar =&gt; <code>官网2.3</code></li><li>初始化Spring Boot项目 =&gt; <code>官网2.4</code></li></ul><p>actuator是Spring Boot的监控插件，本身提供了很多接口可以获取当前项目的各项运行状态指标。</p>',14),b={href:"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485568&idx=2&sn=c5ba880fd0c5d82e39531fa42cb036ac&chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&token=1729829670&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},h=a(`<h2 id="_9-常用注解" tabindex="-1"><a class="header-anchor" href="#_9-常用注解" aria-hidden="true">#</a> 9.常用注解</h2><figure><img src="http://www.img.youngxy.top/Java/fig/常用注解.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="async-注解" tabindex="-1"><a class="header-anchor" href="#async-注解" aria-hidden="true">#</a> @Async 注解</h4><p>对于异步方法调用，从Spring3开始提供了@Async注解，该注解可以被标注在方法上，以便异步地调用该方法。调用者将在调用时立即返回，方法的实际执行将提交给Spring TaskExecutor的任务中，由指定的线程池中的线程执行。</p><p><strong>同步</strong>：同步就是整个处理过程顺序执行，当各个过程都执行完毕，并返回结果。</p><p><strong>异步</strong>：异步调用则是只是发送了调用的指令，调用者无需等待被调用的方法完全执行完毕；而是继续执行下面的流程。例如， 在某个调用中，需要顺序调用 A, B, C三个过程方法；如他们都是同步调用，则需要将他们都顺序执行完毕之后，方算作过程执行完毕；如B为一个异步的调用方法，则在执行完A之后，调用B，并不等待B完成，而是执行开始调用C，待C执行完毕之后，就意味着这个过程执行完毕了。在Java中，一般在处理类似的场景之时，都是基于创建独立的线程去完成相应的异步调用逻辑，通过主线程和不同的业务子线程之间的执行流程，从而在启动独立的线程之后，主线程继续执行而不会产生停滞等待的情况。</p><p><strong>异步的方法有：</strong></p><p>1、 最简单的异步调用，返回值为void 2、 带参数的异步调用，异步方法可以传入参数 3、 存在返回值，常调用返回Future</p><h5 id="async应用默认线程池" tabindex="-1"><a class="header-anchor" href="#async应用默认线程池" aria-hidden="true">#</a> @Async应用默认线程池</h5><p>Spring应用默认的线程池，指在@Async注解在使用时，不指定线程池的名称。查看源码，@Async的默认线程池为<strong>SimpleAsyncTaskExecutor</strong>。</p><h5 id="async应用自定义线程池" tabindex="-1"><a class="header-anchor" href="#async应用自定义线程池" aria-hidden="true">#</a> @Async应用自定义线程池</h5><p>自定义线程池，可对系统中线程池更加细粒度的控制，方便调整线程池大小配置，线程执行异常控制和处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;taskExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolTaskExecutor</span> <span class="token function">taskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置核心线程数</span>
        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置最大线程数</span>
        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置队列容量</span>
        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置线程名前缀</span>
        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">&quot;CrawlTaskExecutor-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrawlTaskConsumer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolCrawler</span> threadPoolCrawler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">&quot;taskExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token constant">KAFKA_CONSTANTS</span><span class="token punctuation">.</span><span class="token constant">KAKFA_CONSTANTS_TOPIC</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token constant">KAFKA_CONSTANTS</span><span class="token punctuation">.</span><span class="token constant">KAKFA_CONSTANTS_GROUP</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CrawlTask</span><span class="token punctuation">&gt;</span></span> <span class="token function">consumeCrawlTask</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">,</span> <span class="token class-name">Consumer</span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CrawlTask</span> crawlTask <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">CrawlTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received crawl task: &quot;</span> <span class="token operator">+</span> crawlTask<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolCrawler<span class="token punctuation">.</span><span class="token function">crawl</span><span class="token punctuation">(</span>crawlTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//手动提交偏移量</span>
        consumer<span class="token punctuation">.</span><span class="token function">commitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>crawlTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-springboot的启动流程是怎样的" tabindex="-1"><a class="header-anchor" href="#_10-springboot的启动流程是怎样的" aria-hidden="true">#</a> 10.SpringBoot的启动流程是怎样的？</h2><ol><li>从<code>spring.factories</code>配置文件中<strong>加载</strong><code>**EventPublishingRunListener**</code><strong>对象</strong>，该对象拥有<code>SimpleApplicationEventMulticaster</code>属性，即在SpringBoot启动过程的不同阶段用来发射内置的生命周期事件;</li><li><strong>准备环境变量</strong>，包括系统变量，环境变量，命令行参数，默认变量，<code>servlet</code>相关配置变量，随机值以及配置文件（比如<code>application.properties</code>）等;</li><li>控制台<strong>打印SpringBoot的</strong><code>**bannner**</code><strong>标志</strong>；</li><li><strong>根据不同类型环境创建不同类型的</strong><code>**applicationcontext**</code><strong>容器</strong>，因为这里是<code>servlet</code>环境，所以创建的是<code>AnnotationConfigServletWebServerApplicationContext</code>容器对象；</li><li>从<code>spring.factories</code>配置文件中<strong>加载</strong><code>**FailureAnalyzers**</code><strong>对象</strong>,用来报告SpringBoot启动过程中的异常；</li><li><strong>为刚创建的容器对象做一些初始化工作</strong>，准备一些容器属性值等，对<code>ApplicationContext</code>应用一些相关的后置处理和调用各个<code>ApplicationContextInitializer</code>的初始化方法来执行一些初始化逻辑等；</li><li><strong>刷新容器</strong>，这一步至关重要。比如调用<code>bean factory</code>的后置处理器，注册<code>BeanPostProcessor</code>后置处理器，初始化事件广播器且广播事件，初始化剩下的单例<code>bean</code>和SpringBoot创建内嵌的<code>Tomcat</code>服务器等等重要且复杂的逻辑都在这里实现，主要步骤可见代码的注释，关于这里的逻辑会在以后的spring源码分析专题详细分析；</li><li><strong>执行刷新容器后的后置处理逻辑</strong>，注意这里为空方法；</li><li><strong>调用</strong><code>**ApplicationRunner**</code><strong>和</strong><code>**CommandLineRunner**</code><strong>的run方法</strong>，我们实现这两个接口可以在spring容器启动后需要的一些东西比如加载一些业务数据等;</li><li><strong>报告启动异常</strong>，即若启动过程中抛出异常，此时用<code>FailureAnalyzers</code>来报告异常;</li><li>最终<strong>返回容器对象</strong>，这里调用方法没有声明对象来接收。</li></ol>`,15),f={href:"https://blog.csdn.net/yuechuzhixing/article/details/124775218",target:"_blank",rel:"noopener noreferrer"},x=a(`<h2 id="_11-webmvcconfigurer" tabindex="-1"><a class="header-anchor" href="#_11-webmvcconfigurer" aria-hidden="true">#</a> 11.WebMvcConfigurer</h2><p>WebMvcConfigurer配置类其实是<code>Spring</code>内部的一种配置方式，采用<code>JavaBean</code>的形式来代替传统的<code>xml</code>配置文件形式进行针对框架个性化定制，可以自定义一些Handler，Interceptor，ViewResolver，MessageConverter。基于java-based方式的spring mvc配置，需要创建一个<strong>配置</strong>类并实现**<code>WebMvcConfigurer</code>** 接口；</p><p>在Spring Boot 1.5版本都是靠重写<strong>WebMvcConfigurerAdapter</strong>的方法来添加自定义拦截器，消息转换器等。SpringBoot 2.0 后，该类被标记为@Deprecated（弃用）。官方推荐直接实现WebMvcConfigurer或者直接继承WebMvcConfigurationSupport，方式一实现WebMvcConfigurer接口（推荐），方式二继承WebMvcConfigurationSupport类。</p><h3 id="常用的方法" tabindex="-1"><a class="header-anchor" href="#常用的方法" aria-hidden="true">#</a> <strong>常用的方法：</strong></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">/* 拦截器配置 */</span>
<span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 视图跳转控制器 */</span>
<span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
     *静态资源处理
**/</span>
<span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 默认静态资源处理器 */</span>
<span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span><span class="token class-name">DefaultServletHandlerConfigurer</span> configurer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
     * 这里配置视图解析器
 **/</span>
<span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span><span class="token class-name">ViewResolverRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 配置内容裁决的一些选项*/</span>
<span class="token keyword">void</span> <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token class-name">ContentNegotiationConfigurer</span> configurer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/** 解决跨域问题 **/</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="addinterceptors-拦截器" tabindex="-1"><a class="header-anchor" href="#addinterceptors-拦截器" aria-hidden="true">#</a> addInterceptors：拦截器</h3><ul><li>addInterceptor：需要一个实现HandlerInterceptor接口的拦截器实例</li><li>addPathPatterns：用于设置拦截器的过滤路径规则；<code>addPathPatterns(&quot;/**&quot;)</code>对所有请求都拦截</li><li>excludePathPatterns：用于设置不需要拦截的过滤规则</li><li>拦截器主要用途：进行用户登录状态的拦截，日志的拦截等。</li></ul>`,7);function y(S,w){const t=p("ExternalLinkIcon");return i(),c("div",null,[r,n("p",null,[s("参考："),n("a",u,[s("https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html#autoconfigurationimportselector-加载自动装配类"),e(t)])]),d,n("p",null,[g,s("：这是springboot程序的监控系统，可以实现健康检查，info信息等。在使用之前需要引入"),k,s("，并做简单的配置即可。 引入依赖并编写好配置之后，启动项目，访问"),n("a",v,[s("http://localhost:8080/actuator"),e(t)])]),m,n("p",null,[s("参考："),n("a",b,[s("https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485568&idx=2&sn=c5ba880fd0c5d82e39531fa42cb036ac&chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&token=1729829670&lang=zh_CN#rd"),e(t)])]),h,n("p",null,[s("参考："),n("a",f,[s("https://blog.csdn.net/yuechuzhixing/article/details/124775218"),e(t)])]),x])}const A=o(l,[["render",y],["__file","SpringBoot.html.vue"]]);export{A as default};
