import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as r,a,e as n,d as t,f as e}from"./app-7289febe.js";const p={},d=e(`<h2 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念" aria-hidden="true">#</a> 1.基本概念</h2><h3 id="_1-1说一下-jvm-的主要组成部分-及其作用" tabindex="-1"><a class="header-anchor" href="#_1-1说一下-jvm-的主要组成部分-及其作用" aria-hidden="true">#</a> 1.1说一下 Jvm 的主要组成部分？及其作用？</h3><ol><li>类加载器（ClassLoader）</li><li>运行时数据区（Runtime Data Area）</li><li>执行引擎（Execution Engine）</li><li>本地库接口（Native Interface）</li></ol><p>首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。</p><h2 id="_2-内存结构-运行时数据区" tabindex="-1"><a class="header-anchor" href="#_2-内存结构-运行时数据区" aria-hidden="true">#</a> 2.内存结构（运行时数据区）</h2><p>JVM整体架构：</p><figure><img src="http://www.img.youngxy.top/Java/fig/jvm整体架构.jpg" alt="JVM" tabindex="0" loading="lazy"><figcaption>JVM</figcaption></figure><p>Java 虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程一一对应的数据区域会随着线程开始和结束而创建和销毁。</p><ul><li><strong>线程私有</strong>：程序计数器、虚拟机栈、本地方法区</li><li><strong>线程共享</strong>：堆、方法区, 堆外内存（Java7的永久代或JDK8的元空间、代码缓存）</li></ul><h3 id="_2-1程序计数器" tabindex="-1"><a class="header-anchor" href="#_2-1程序计数器" aria-hidden="true">#</a> 2.1程序计数器</h3><p>PC 寄存器用来存储指向下一条指令的地址，即将要执行的指令代码。由执行引擎读取下一条指令。</p><blockquote><p>通过下面两个问题，理解下PC计数器</p></blockquote><ul><li><strong>使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？</strong></li></ul><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p><ul><li><strong>PC寄存器为什么会被设定为线程私有的？</strong></li></ul><p>多线程在一个特定的时间段内只会执行其中某一个线程方法，CPU会不停的做任务切换，这样必然会导致经常中断或恢复。为了能够准确的记录各个线程正在执行的当前字节码指令地址，所以为每个线程都分配了一个PC寄存器，每个线程都独立计算，不会互相影响。</p><blockquote><p>相关总结如下：</p></blockquote><ul><li>它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域</li><li>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期一致</li><li>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。如果当前线程正在执行的是 Java 方法，程序计数器记录的是 JVM 字节码指令地址，如果是执行 native 方法，则是未指定值（undefined）</li><li>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</li><li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令</li><li><strong>它是唯一一个在 JVM 规范中没有规定任何 <code>OutOfMemoryError</code> 情况的区域</strong></li></ul><h3 id="_2-2虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_2-2虚拟机栈" aria-hidden="true">#</a> 2.2虚拟机栈</h3><p>主管 Java 程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</p><ul><li>JVM 直接对虚拟机栈的操作只有两个：每个方法执行，伴随着<strong>入栈</strong>（进栈/压栈），方法执行结束<strong>出栈</strong></li><li><strong>栈不存在垃圾回收问题</strong></li></ul><p><strong>栈中可能出现的异常</strong>：</p><ul><li>如果采用固定大小的 Java 虚拟机栈，那每个线程的 Java 虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过 Java 虚拟机栈允许的最大容量，Java 虚拟机将会抛出一个 <strong>StackOverflowError</strong> 异常</li><li>如果 Java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚拟机将会抛出一个<strong>OutOfMemoryError</strong>异常</li></ul><p>可以通过参数<code>-Xss</code>来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。</p><p>每个<strong>栈帧</strong>（Stack Frame）中存储着：</p><ul><li>局部变量表（Local Variables）</li><li>操作数栈（Operand Stack）(或称为表达式栈)</li><li>动态链接（Dynamic Linking）：指向运行时常量池的方法引用</li><li>方法返回地址（Return Address）：方法正常退出或异常退出的地址</li><li>一些附加信息</li></ul><figure><img src="http://www.img.youngxy.top/Java/fig/栈帧.jpg" alt="栈帧" tabindex="0" loading="lazy"><figcaption>栈帧</figcaption></figure><h3 id="_2-3本地方法栈" tabindex="-1"><a class="header-anchor" href="#_2-3本地方法栈" aria-hidden="true">#</a> 2.3本地方法栈</h3><ul><li><p>本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区，它甚至可以直接使用本地处理器中的寄存器，直接从本地内存的堆中分配任意数量的内存。</p></li><li><p>Java 虚拟机栈用于管理 Java 方法的调用，而本地方法栈用于管理本地方法的调用</p></li><li><p>本地方法栈也是线程私有的</p></li></ul><h3 id="_2-4堆内存" tabindex="-1"><a class="header-anchor" href="#_2-4堆内存" aria-hidden="true">#</a> 2.4堆内存</h3><p>对于大多数应用，Java 堆是 Java 虚拟机管理的内存中最大的一块，被所有线程共享。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数据都在这里分配内存。</p><p>为了进行高效的垃圾回收，虚拟机把堆内存<strong>逻辑上</strong>划分成三块区域（分代的唯一理由就是优化 GC 性能）：</p><ul><li>新生带（年轻代）：新对象和没达到一定年龄的对象都在新生代</li><li>老年代（养老区）：被长时间使用的对象，老年代的内存空间应该要比年轻代更大</li><li>元空间（JDK1.8 之前叫永久代）：像一些方法中的操作临时对象等，JDK1.8 之前是占用 JVM 内存，JDK1.8 之后直接使用物理内存</li></ul><figure><img src="http://www.img.youngxy.top/Java/fig/堆内存.jpg" alt="堆内存" tabindex="0" loading="lazy"><figcaption>堆内存</figcaption></figure><p>Java 虚拟机规范规定，Java 堆可以是处于物理上不连续的内存空间中，只要逻辑上是连续的即可，像磁盘空间一样。实现时，既可以是固定大小，也可以是可扩展的，主流虚拟机都是可扩展的（通过 <code>-Xmx</code> 和 <code>-Xms</code> 控制），如果堆中没有完成实例分配，并且堆无法再扩展时，就会抛出 <code>OutOfMemoryError</code> 异常。</p><h4 id="_2-4-1年轻代-young-generation" tabindex="-1"><a class="header-anchor" href="#_2-4-1年轻代-young-generation" aria-hidden="true">#</a> 2.4.1年轻代 (Young Generation)</h4><p>年轻代是所有新对象创建的地方。当填充年轻代时，执行垃圾收集。这种垃圾收集称为 <strong>Minor GC</strong>。年轻一代被分为三个部分——伊甸园（<strong>Eden Memory</strong>）和两个幸存区（<strong>Survivor Memory</strong>，被称为from/to或s0/s1），默认比例是<code>8:1:1</code></p><ul><li>大多数新创建的对象都位于 Eden 内存空间中</li><li>当 Eden 空间被对象填充时，执行<strong>Minor GC</strong>，并将所有幸存者对象移动到一个幸存者空间中</li><li>Minor GC 检查幸存者对象，并将它们移动到另一个幸存者空间。所以每次，一个幸存者空间总是空的</li><li>经过多次 GC 循环后存活下来的对象被移动到老年代。通常，这是通过设置年轻一代对象的年龄阈值来实现的，然后他们才有资格提升到老一代</li></ul><h4 id="_2-4-2老年代-old-generation" tabindex="-1"><a class="header-anchor" href="#_2-4-2老年代-old-generation" aria-hidden="true">#</a> 2.4.2老年代(Old Generation)</h4><p>旧的一代内存包含那些经过许多轮小型 GC 后仍然存活的对象。通常，垃圾收集是在老年代内存满时执行的。老年代垃圾收集称为 主GC（Major GC），通常需要更长的时间。</p><p>大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在 Eden 区和两个Survivor 区之间发生大量的内存拷贝。</p><figure><img src="http://www.img.youngxy.top/Java/fig/堆内存1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-4-3元空间" tabindex="-1"><a class="header-anchor" href="#_2-4-3元空间" aria-hidden="true">#</a> 2.4.3元空间</h4><p>不管是 JDK8 之前的永久代，还是 JDK8 及以后的元空间，都可以看作是 Java 虚拟机规范中方法区的实现。</p><p>虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫 Non-Heap（非堆），目的应该是与 Java 堆区分开。</p><h4 id="_2-4-4设置堆内存大小和-oom" tabindex="-1"><a class="header-anchor" href="#_2-4-4设置堆内存大小和-oom" aria-hidden="true">#</a> 2.4.4设置堆内存大小和 OOM</h4><p>Java 堆用于存储 Java 对象实例，那么堆的大小在 JVM 启动的时候就确定了，我们可以通过 <code>-Xmx</code> 和 <code>-Xms</code> 来设定</p><ul><li><code>-Xms</code> 用来表示堆的起始内存，等价于 <code>-XX:InitialHeapSize</code></li><li><code>-Xmx</code> 用来表示堆的最大内存，等价于 <code>-XX:MaxHeapSize</code></li></ul><p>如果堆的内存大小超过 <code>-Xmx</code> 设定的最大内存， 就会抛出 <code>OutOfMemoryError</code> 异常。</p><p>我们通常会将 <code>-Xmx</code> 和 <code>-Xms</code> 两个参数配置为相同的值，其目的是为了能够在垃圾回收机制清理完堆区后不再需要重新分隔计算堆的大小，从而提高性能</p><ul><li>默认情况下，初始堆内存大小为：电脑内存大小/64</li><li>默认情况下，最大堆内存大小为：电脑内存大小/4</li></ul><p>可以通过代码获取到我们的设置值，当然也可以模拟 OOM：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">//返回 JVM 堆大小</span>
  <span class="token keyword">long</span> initalMemory <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">;</span>
  <span class="token comment">//返回 JVM 堆的最大内存</span>
  <span class="token keyword">long</span> maxMemory <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">;</span>

  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-Xms : &quot;</span><span class="token operator">+</span>initalMemory <span class="token operator">+</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-Xmx : &quot;</span><span class="token operator">+</span>maxMemory <span class="token operator">+</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;系统内存大小：&quot;</span> <span class="token operator">+</span> initalMemory <span class="token operator">*</span> <span class="token number">64</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;G&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;系统内存大小：&quot;</span> <span class="token operator">+</span> maxMemory <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;G&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-5对象在堆中的生命周期" tabindex="-1"><a class="header-anchor" href="#_2-4-5对象在堆中的生命周期" aria-hidden="true">#</a> 2.4.5对象在堆中的生命周期</h4><p>在 JVM 内存模型的堆中，堆被划分为新生代和老年代</p><ul><li>新生代又被进一步划分为 <strong>Eden区</strong> 和 <strong>Survivor区</strong>，Survivor 区由 <strong>From Survivor</strong> 和 <strong>To Survivor</strong> 组成</li></ul><p>当创建一个对象时，对象会被优先分配到新生代的 Eden 区</p><ul><li>此时 JVM 会给对象定义一个<strong>对象年轻计数器</strong>（<code>-XX:MaxTenuringThreshold</code>）</li></ul><p>当 Eden 空间不足时，JVM 将执行新生代的垃圾回收（Minor GC）</p><ul><li>JVM 会把存活的对象转移到 Survivor 中，并且对象年龄 +1</li><li>对象在 Survivor 中同样也会经历 Minor GC，每经历一次 Minor GC，对象年龄都会+1</li></ul><p>如果分配的对象超过了<code>-XX:PetenureSizeThreshold</code>，对象会<strong>直接被分配到老年代</strong>。</p><h4 id="_2-4-6对象的分配过程" tabindex="-1"><a class="header-anchor" href="#_2-4-6对象的分配过程" aria-hidden="true">#</a> 2.4.6对象的分配过程</h4><p>为对象分配内存是一件非常严谨和复杂的任务，JVM 的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法和内存回收算法密切相关，所以还需要考虑 GC 执行完内存回收后是否会在内存空间中产生内存碎片。</p><ul><li>new 的对象先放在伊甸园区，此区有大小限制</li><li>当伊甸园的空间填满时，程序又需要创建对象，JVM 的垃圾回收器将对伊甸园区进行垃圾回收（Minor GC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区</li><li>然后将伊甸园中的剩余对象移动到幸存者 0 区</li><li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者 0 区，如果没有回收，就会放到幸存者 1 区</li><li>如果再次经历垃圾回收，此时会重新放回幸存者 0 区，接着再去幸存者 1 区</li><li>什么时候才会去养老区呢？ 默认是 15 次回收标记</li><li>在养老区，相对悠闲。当养老区内存不足时，再次触发 Major GC，进行养老区的内存清理</li><li>若养老区执行了 Major GC 之后发现依然无法进行对象的保存，就会产生 OOM 异常</li></ul><h4 id="_2-4-7什么是-tlab-为什么要有-tlab" tabindex="-1"><a class="header-anchor" href="#_2-4-7什么是-tlab-为什么要有-tlab" aria-hidden="true">#</a> 2.4.7什么是 TLAB?为什么要有 TLAB ?</h4><p>TLAB(Thread Local Allocation Buffer)是Java虚拟机中的一块线程私有的内存空间,用于为线程快速分配对象而不需要加锁。</p><ul><li>从内存模型而不是垃圾回收的角度，对 Eden 区域继续进行划分，JVM 为每个线程分配了一个私有缓存区域，它包含在 Eden 空间内</li><li>加速对象内存分配。如果没有TLAB,所有线程都需要竞争同一块内存资源,这会导致频繁加锁从而降低效率。TLAB为每个线程提供了一个私有的内存缓冲区,线程可以直接在自己的TLAB上分配内存,不需要加锁。</li><li>减少垃圾回收开销。TLAB中的内存只被对应的线程使用,当线程结束时可以整个回收TLAB空间,比回收整个Java堆中的内存更快更高效。</li><li>提高内存分配的局部性。TLAB为每个线程预先分配一块内存,新对象优先分配在TLAB上,使对象内存分配更加接近CPU缓存,提高访问效率。</li></ul><h4 id="_2-4-8堆是分配对象存储的唯一选择吗" tabindex="-1"><a class="header-anchor" href="#_2-4-8堆是分配对象存储的唯一选择吗" aria-hidden="true">#</a> 2.4.8堆是分配对象存储的唯一选择吗</h4><blockquote><p>随着 JIT 编译期的发展和逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。 ——《深入理解 Java 虚拟机》</p></blockquote><h3 id="_2-5方法区" tabindex="-1"><a class="header-anchor" href="#_2-5方法区" aria-hidden="true">#</a> 2.5方法区</h3><p>方法区（Method Area）与 Java 堆一样，是所有线程共享的内存区域。</p><p>虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫 Non-Heap（非堆），目的应该是与 Java 堆区分开。</p><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本/字段/方法/接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将类在加载后进入方法区的运行时常量池中存放。运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的是 <code>String.intern()</code>方法。受方法区内存的限制，当常量池无法再申请到内存时会抛出 <code>OutOfMemoryErro</code>r 异常。</p><p><strong>方法区（method area）只是 JVM 规范中定义的一个概念，用于存储类信息、常量池、静态变量、JIT编译后的代码等数据，并没有规定如何去实现它，不同的厂商有不同的实现。而</strong>永久代（PermGen）是 Hotspot虚拟机特有的概念， Java8 的时候又被元空间取代了，永久代和元空间都可以理解为方法区的落地实现。</p><p>永久代是堆的一部分，和新生代，老年代地址是连续的（受垃圾回收器管理），而元空间存在于本地内存（我们常说的堆外内存，不受垃圾回收器管理），这样就不受 JVM 限制了，也比较难发生OOM（都会有溢出异常）。</p><h4 id="_2-5-1运行时常量池" tabindex="-1"><a class="header-anchor" href="#_2-5-1运行时常量池" aria-hidden="true">#</a> 2.5.1运行时常量池</h4><p>常量池可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。</p><ul><li>在加载类和结构到虚拟机后，就会创建对应的运行时常量池</li><li>常量池表（Constant Pool Table）是 Class 文件的一部分，用于存储编译期生成的各种字面量和符号引用，<strong>这部分内容将在类加载后存放到方法区的运行时常量池中</strong></li><li>JVM 为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的</li><li>运行时常量池中包含各种不同的常量，包括编译器就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或字段引用。此时不再是常量池中的符号地址了，这里换为真实地址 <ul><li>运行时常量池，相对于 Class 文件常量池的另一个重要特征是：<strong>动态性</strong>，Java 语言并不要求常量一定只有编译期间才能产生，运行期间也可以将新的常量放入池中，String 类的 <code>intern()</code> 方法就是这样的</li></ul></li><li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则 JVM 会抛出 OutOfMemoryError 异常。</li></ul><figure><img src="http://www.img.youngxy.top/Java/fig/运行时常量池.PNG" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>字符串常量池放在堆里，静态变量放在堆里。</p>`,80),c={href:"https://javaguide.cn/java/jvm/memory-area.html",target:"_blank",rel:"noopener noreferrer"},u=e(`<figure><img src="http://www.img.youngxy.top/Java/fig/java-runtime-data-areas-jdk1.7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="http://www.img.youngxy.top/Java/fig/java-runtime-data-areas-jdk1.8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_3-垃圾回收机制" aria-hidden="true">#</a> 3.垃圾回收机制</h2><h3 id="_3-1如何判断对象是否可回收" tabindex="-1"><a class="header-anchor" href="#_3-1如何判断对象是否可回收" aria-hidden="true">#</a> 3.1如何判断对象是否可回收？</h3><h4 id="_3-1-1引用计数算法" tabindex="-1"><a class="header-anchor" href="#_3-1-1引用计数算法" aria-hidden="true">#</a> 3.1.1引用计数算法</h4><p>给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</p><p>两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。</p><p>正因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。</p><h4 id="_3-1-2可达性分析算法" tabindex="-1"><a class="header-anchor" href="#_3-1-2可达性分析算法" aria-hidden="true">#</a> 3.1.2可达性分析算法</h4><p>通过 GC Roots 作为起始点进行搜索，能够到达到的对象都是存活的，不可达的对象可被回收。</p><figure><img src="http://www.img.youngxy.top/Java/fig/可达性分析.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Java 虚拟机使用该算法来判断对象是否可被回收，在 Java 中 GC Roots 一般包含以下内容：</p><ul><li>虚拟机栈中引用的对象</li><li>本地方法栈中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中的常量引用的对象</li></ul><h4 id="_3-1-3引用类型" tabindex="-1"><a class="header-anchor" href="#_3-1-3引用类型" aria-hidden="true">#</a> 3.1.3引用类型</h4><p>Java 具有四种强度不同的引用类型。</p><p><strong>强引用</strong></p><p>被强引用关联的对象不会被回收。</p><p>使用 new 一个新对象的方式来创建强引用。</p><p><strong>软引用</strong></p><p>被软引用关联的对象只有在内存不够的情况下才会被回收。</p><p>使用 SoftReference 类来创建软引用。</p><p><strong>弱引用</strong></p><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。</p><p>使用 WeakReference 类来实现弱引用。</p><p><strong>虚引用</strong></p><p>又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象。</p><p>为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知。</p><p>使用 PhantomReference 来实现虚引用。</p><h3 id="_3-2垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#_3-2垃圾回收算法" aria-hidden="true">#</a> 3.2垃圾回收算法</h3><h4 id="_3-2-1标记-清除" tabindex="-1"><a class="header-anchor" href="#_3-2-1标记-清除" aria-hidden="true">#</a> 3.2.1标记 - 清除</h4><p>将存活的对象进行标记，然后清理掉未被标记的对象。</p><p>不足:</p><ul><li>标记和清除过程效率都不高；</li><li>会产生大量不连续的内存碎片，导致无法给大对象分配内存。</li></ul><figure><img src="http://www.img.youngxy.top/Java/fig/标记 - 清除.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-2-2标记-整理" tabindex="-1"><a class="header-anchor" href="#_3-2-2标记-整理" aria-hidden="true">#</a> 3.2.2标记 - 整理</h4><p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><figure><img src="http://www.img.youngxy.top/Java/fig/标记 - 整理.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-2-3复制" tabindex="-1"><a class="header-anchor" href="#_3-2-3复制" aria-hidden="true">#</a> 3.2.3复制</h4><p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p><p>主要不足是只使用了内存的一半。</p><p>现在的商业虚拟机都采用这种收集算法来回收新生代，但是并不是将新生代划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和使用过的那一块 Survivor。</p><p>HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。</p><figure><img src="http://www.img.youngxy.top/Java/fig/复制.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-2-4分代收集" tabindex="-1"><a class="header-anchor" href="#_3-2-4分代收集" aria-hidden="true">#</a> 3.2.4分代收集</h4><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将堆分为新生代和老年代。</p><ul><li>新生代使用: 复制算法</li><li>老年代使用: 标记 - 清除 或者 标记 - 整理 算法</li></ul><h3 id="_3-3垃圾收集器" tabindex="-1"><a class="header-anchor" href="#_3-3垃圾收集器" aria-hidden="true">#</a> 3.3垃圾收集器</h3><figure><img src="http://www.img.youngxy.top/Java/fig/分代收集.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。</p><ul><li>单线程与多线程: 单线程指的是垃圾收集器只使用一个线程进行收集，而多线程使用多个线程；</li><li>串行与并行: 串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并形指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</li></ul><h4 id="_3-3-1serial-收集器" tabindex="-1"><a class="header-anchor" href="#_3-3-1serial-收集器" aria-hidden="true">#</a> 3.3.1Serial 收集器</h4><p>Serial 翻译为串行，也就是说它以串行的方式执行。</p><p>它是单线程的收集器，只会使用一个线程进行垃圾收集工作。</p><p>它的优点是简单高效，对于单个 CPU 环境来说，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p><p>它是 Client 模式下的默认新生代收集器，因为在用户的桌面应用场景下，分配给虚拟机管理的内存一般来说不会很大。Serial 收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。</p><h4 id="_3-3-2parnew-收集器" tabindex="-1"><a class="header-anchor" href="#_3-3-2parnew-收集器" aria-hidden="true">#</a> 3.3.2ParNew 收集器</h4><p>它是 Serial 收集器的多线程版本。</p><p>是 Server 模式下的虚拟机首选新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。</p><p>默认开启的线程数量与 CPU 数量相同，可以使用 -XX:ParallelGCThreads 参数来设置线程数。</p><h4 id="_3-3-3parallel-scavenge-收集器" tabindex="-1"><a class="header-anchor" href="#_3-3-3parallel-scavenge-收集器" aria-hidden="true">#</a> 3.3.3Parallel Scavenge 收集器</h4><p>与 ParNew 一样是多线程收集器。</p><p>其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，它被称为“吞吐量优先”收集器。</p><h4 id="_3-3-4serial-old-收集器" tabindex="-1"><a class="header-anchor" href="#_3-3-4serial-old-收集器" aria-hidden="true">#</a> 3.3.4Serial Old 收集器</h4><p>是 Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。</p><h4 id="_3-3-5parallel-old-收集器" tabindex="-1"><a class="header-anchor" href="#_3-3-5parallel-old-收集器" aria-hidden="true">#</a> 3.3.5Parallel Old 收集器</h4><p>是 Parallel Scavenge 收集器的老年代版本。</p><h4 id="_3-3-6cms-收集器" tabindex="-1"><a class="header-anchor" href="#_3-3-6cms-收集器" aria-hidden="true">#</a> 3.3.6CMS 收集器</h4><p>CMS(Concurrent Mark Sweep)，Mark Sweep 指的是标记 - 清除算法。</p><p>分为以下四个流程:</p><ul><li>初始标记: 仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿 (STW, stop the world)。</li><li>并发标记: 进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。</li><li>重新标记: 为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li><li>并发清除: 不需要停顿。</li></ul><p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p><p>具有以下缺点:</p><ul><li>吞吐量低: 低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li><li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。</li></ul><h4 id="_3-3-7g1-收集器" tabindex="-1"><a class="header-anchor" href="#_3-3-7g1-收集器" aria-hidden="true">#</a> 3.3.7G1 收集器</h4><p>G1(Garbage-First)，它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p><p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。</p><p>G1 把堆划分成多个大小相等的独立区域(Region)，新生代和老年代不再物理隔离。通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间(这两个值是通过过去回收的经验获得)，并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p><p>G1 收集器的运作大致可划分为以下几个步骤:</p><ul><li>初始标记：暂停所有的应用线程,并记录 GC Roots 可达的对象,这些对象被标记为存活对象。</li><li>并发标记：GC 线程遍历对象图,找出存活对象并进行标记。</li><li>最终标记: 为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收: 首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li></ul><p>具备如下特点:</p><ul><li>空间整合: 整体来看是基于“标记 - 整理”算法实现的收集器，从局部(两个 Region 之间)上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li><li>可预测的停顿: 能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li></ul><h3 id="_3-4minorgc和fullgc触发条件" tabindex="-1"><a class="header-anchor" href="#_3-4minorgc和fullgc触发条件" aria-hidden="true">#</a> 3.4MinorGC和FullGC触发条件</h3><p>MinorGC是发生在新生代的，这里主要使用的是<strong>复制算法</strong>。</p><p>MajorGC/FullGC是发生在老年代的，老年代的主要使用<strong>标记清除或者标记整理算法</strong>。</p><h4 id="_3-4-1minorgc触发条件" tabindex="-1"><a class="header-anchor" href="#_3-4-1minorgc触发条件" aria-hidden="true">#</a> 3.4.1MinorGC触发条件</h4><ol><li>Eden区域满</li><li>新创建的对象大小 &gt; Eden所剩空间</li></ol><h4 id="_3-4-2fullgc触发条件" tabindex="-1"><a class="header-anchor" href="#_3-4-2fullgc触发条件" aria-hidden="true">#</a> 3.4.2FullGC触发条件</h4><p><strong>老年代空间不足</strong></p><ul><li><p>存在情况</p><ol><li>每次晋升到老年代的对象平均大小 &gt; 老年代剩余空间</li><li>MinorGC后存活的对象超过了老年代剩余空间</li></ol></li><li><p>优化策略</p><p>调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组</p></li></ul><p><strong>永久代(方法区)空间不足</strong></p><ul><li><strong>简介</strong></li></ul><p>JVM规范中运行时数据区域中的方法区，在HotSpot虚拟机中又被习惯称为永久代，Permanet Generation中存放的为一些class的信息、常量、静态变量等数据，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下也会执行Full GC。</p><ul><li><strong>解决方案</strong></li></ul><p>避免Perm Gen占满造成FullGC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC</p><p><strong>System.gc()</strong></p><p>此方法的调用是建议JVM进行Full GC，虽然只是建议而非一定，但很多情况下它会触发Full GC，从而增加Full GC的频率，即增加了间歇性停顿的次数。强烈建议能不使用此方法就别使用。</p><p><strong>CMS GC异常</strong></p><p>MinorGC时，survivor空间放不下，对象只能放入老年代，而老年代也放不下造成。</p><p><strong>堆内存分配很大的对象</strong></p><p><strong>所谓大对象，是指需要大量连续内存空间的java对象</strong>，例如很长的数组，此种对象会直接进入老年代，而<strong>老年代虽然有很大的剩余空间，但是无法找到足够大的连续空间来分配给当前对象</strong>，此种情况会触发JVM进行FullGC。</p><h2 id="_4-类加载机制" tabindex="-1"><a class="header-anchor" href="#_4-类加载机制" aria-hidden="true">#</a> 4.类加载机制</h2><h3 id="_4-1类的生命周期" tabindex="-1"><a class="header-anchor" href="#_4-1类的生命周期" aria-hidden="true">#</a> 4.1类的生命周期</h3><p>类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，前三个阶段可以统称为连接（Linking）。</p><p>这 7 个阶段的顺序如下图所示：</p><figure><img src="http://www.img.youngxy.top/Java/fig/类的生命周期.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-2类加载过程" tabindex="-1"><a class="header-anchor" href="#_4-2类加载过程" aria-hidden="true">#</a> 4.2类加载过程</h3><p><strong>Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？</strong></p><p>系统加载 Class 类型的文件主要三步：<strong>加载-&gt;连接-&gt;初始化</strong>。连接过程又可分为三步：<strong>验证-&gt;准备-&gt;解析</strong>。</p><figure><img src="http://www.img.youngxy.top/Java/fig/类的加载过程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-3类加载器" tabindex="-1"><a class="header-anchor" href="#_4-3类加载器" aria-hidden="true">#</a> 4.3类加载器</h3><h4 id="_4-3-1介绍" tabindex="-1"><a class="header-anchor" href="#_4-3-1介绍" aria-hidden="true">#</a> 4.3.1介绍：</h4><ul><li>类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。</li><li>每个 Java 类都有一个引用指向加载它的 <code>ClassLoader</code>。</li><li>数组类不是通过 <code>ClassLoader</code> 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。</li></ul><p>简单来说，<strong>类加载器的主要作用就是加载 Java 类的字节码（ <code>.class</code> 文件）到 JVM 中（在内存中生成一个代表该类的 <code>Class</code> 对象）。</strong></p><h4 id="_4-3-2类加载器加载规则" tabindex="-1"><a class="header-anchor" href="#_4-3-2类加载器加载规则" aria-hidden="true">#</a> 4.3.2类加载器加载规则</h4><p>JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。</p><p>对于已经加载的类会被放在 <code>ClassLoader</code> 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。</p><h4 id="_4-3-3类加载器总结" tabindex="-1"><a class="header-anchor" href="#_4-3-3类加载器总结" aria-hidden="true">#</a> 4.3.3类加载器总结</h4><p>JVM 中内置了三个重要的 <code>ClassLoader</code>：</p><ol><li><strong><code>BootstrapClassLoader</code>(启动类加载器)</strong> ：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ <code>%JAVA_HOME%/lib</code>目录下的 <code>rt.jar</code> 、<code>resources.jar</code> 、<code>charsets.jar</code>等 jar 包和类）以及被 <code>-Xbootclasspath</code>参数指定的路径下的所有类。</li><li><strong><code>ExtensionClassLoader</code>(扩展类加载器)</strong> ：主要负责加载 <code>%JRE_HOME%/lib/ext</code> 目录下的 jar 包和类以及被 <code>java.ext.dirs</code> 系统变量所指定的路径下的所有类。</li><li><strong><code>AppClassLoader</code>(应用程序类加载器)</strong> ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。</li></ol><p>除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ <code>.class</code> 文件）进行加密，加载时再利用自定义的类加载器对其解密。</p><p>如果我们要自定义自己的类加载器，很明显需要继承 <code>ClassLoader</code>抽象类。</p><p><code>ClassLoader</code> 类有两个关键的方法：</p><ul><li><code>protected Class loadClass(String name, boolean resolve)</code>：加载指定二进制名称的类，实现了双亲委派机制 。<code>name</code> 为类的二进制名称，<code>resove</code> 如果为 true，在加载时调用 <code>resolveClass(Class&lt;?&gt; c)</code> 方法解析该类。</li><li><code>protected Class findClass(String name)</code>：根据类的二进制名称来查找类，默认实现是空方法。</li></ul><p>官方 API 文档中写到：</p><blockquote><p>Subclasses of <code>ClassLoader</code> are encouraged to override <code>findClass(String name)</code>, rather than this method.</p><p>建议 <code>ClassLoader</code>的子类重写 <code>findClass(String name)</code>方法而不是<code>loadClass(String name, boolean resolve)</code> 方法。</p></blockquote><p>如果我们不想打破双亲委派模型，就重写 <code>ClassLoader</code> 类中的 <code>findClass()</code> 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 <code>loadClass()</code> 方法。</p><figure><img src="http://www.img.youngxy.top/Java/fig/类加载器总结1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-3-4双亲委派模型" tabindex="-1"><a class="header-anchor" href="#_4-3-4双亲委派模型" aria-hidden="true">#</a> 4.3.4双亲委派模型</h4><p>类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载呢？这就需要提到双亲委派模型了。</p><ul><li><code>ClassLoader</code> 类使用委托模型来搜索类和资源。</li><li>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。</li><li><code>ClassLoader</code> 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。</li></ul><p>下图展示的各种类加载器之间的层次关系被称为类加载器的“<strong>双亲委派模型(Parents Delegation Model)</strong>”。</p><figure><img src="http://www.img.youngxy.top/Java/fig/类加载器总结1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在 <code>java.lang.ClassLoader</code> 的 <code>loadClass()</code> 中，相关代码如下所示。</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>protected Class&lt;?&gt; loadClass(String name, boolean resolve)
    throws ClassNotFoundException
{
    synchronized (getClassLoadingLock(name)) {
        //首先，检查该类是否已经加载过
        Class c = findLoadedClass(name);
        if (c == null) {
            //如果 c 为 null，则说明该类没有被加载过
            long t0 = System.nanoTime();
            try {
                if (parent != null) {
                    //当父类的加载器不为空，则通过父类的loadClass来加载该类
                    c = parent.loadClass(name, false);
                } else {
                    //当父类的加载器为空，则调用启动类加载器来加载该类
                    c = findBootstrapClassOrNull(name);
                }
            } catch (ClassNotFoundException e) {
                //非空父类的类加载器无法找到相应的类，则抛出异常
            }

            if (c == null) {
                //当父类加载器无法加载时，则调用findClass方法来加载该类
                //用户可通过覆写该方法，来自定义类加载器
                long t1 = System.nanoTime();
                c = findClass(name);

                //用于统计类加载器相关的信息
                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);
                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
                sun.misc.PerfCounter.getFindClasses().increment();
            }
        }
        if (resolve) {
            //对类进行link操作
            resolveClass(c);
        }
        return c;
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。</p><p>结合上面的源码，简单总结一下双亲委派模型的执行流程：</p><ul><li>在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。</li><li>类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 <code>loadClass()</code>方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 <code>BootstrapClassLoader</code> 中。</li><li>只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 <code>findClass()</code> 方法来加载类）。</li></ul><p><strong>优点：</strong></p><p>双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。</p>`,140);function g(h,v){const i=o("ExternalLinkIcon");return l(),r("div",null,[d,a("p",null,[n("下图来自 JavaGuide："),a("a",c,[n("https://javaguide.cn/java/jvm/memory-area.html"),t(i)])]),u])}const b=s(p,[["render",g],["__file","JVM.html.vue"]]);export{b as default};
