import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as p,a as n,e as a,t,f as s}from"./app-6b5f5223.js";const c={},o=s(`<h2 id="_1-介绍一个实习中项目-有什么收获-主要工作是什么-项目中遇到问题如何解决-如何处理协作问题" tabindex="-1"><a class="header-anchor" href="#_1-介绍一个实习中项目-有什么收获-主要工作是什么-项目中遇到问题如何解决-如何处理协作问题" aria-hidden="true">#</a> 1.介绍一个实习中项目，有什么收获，主要工作是什么，项目中遇到问题如何解决，如何处理协作问题？</h2><h2 id="_2-问了遇到的最大难题-当前offer情况" tabindex="-1"><a class="header-anchor" href="#_2-问了遇到的最大难题-当前offer情况" aria-hidden="true">#</a> 2.问了遇到的最大难题，当前offer情况？</h2><h2 id="_3-java中用了哪些技术" tabindex="-1"><a class="header-anchor" href="#_3-java中用了哪些技术" aria-hidden="true">#</a> 3.java中用了哪些技术？</h2><ul><li>面向对象技术 - java是一门纯面向对象的语言,支持封装、继承和多态等面向对象特性。</li><li>JVM技术 - java代码运行在JVM上,JVM负责内存管理、垃圾回收等,支持跨平台运行。</li><li>多线程技术 - java提供了线程机制,可以通过继承Thread类或实现Runnable接口来创建线程,还提供了线程同步、线程通信等功能。</li><li>集合框架 - java提供了丰富的集合类,如List、Set、Map等,大大简化了集合操作。</li><li>泛型技术 - 泛型提供了编译时的类型安全检测机制,可以在编译时发现问题。</li><li>反射技术 - 反射机制允许程序在运行时动态获取类的信息,创建对象等。</li></ul><h2 id="_4-提高反射的性能-setaccessable" tabindex="-1"><a class="header-anchor" href="#_4-提高反射的性能-setaccessable" aria-hidden="true">#</a> 4.提高反射的性能 setAccessable？</h2><ul><li>使用setAccessible(true)</li></ul><p>通过setAccessible方法可以关闭Java语言访问检查,提高反射的效率。这个方法可以提高直接访问私有属性和方法的效率。</p><ul><li>缓存反射对象</li></ul><p>可以缓存反射调用的Method和Field对象,避免重复获取,因为获取反射对象的过程比较消耗性能。</p><h2 id="_5-静态代理与动态代理的区别" tabindex="-1"><a class="header-anchor" href="#_5-静态代理与动态代理的区别" aria-hidden="true">#</a> 5.静态代理与动态代理的区别？</h2><ul><li>实现时机不同</li></ul><p>静态代理在编译时就已经实现了代理类,而动态代理是在运行时动态生成代理类。</p><ul><li>实现方式不同</li></ul><p>静态代理在编译时生成的代理类需要实现与目标对象相同的接口,然后在代理类中进行功能增强。动态代理是利用JDK的Proxy类或第三方库在运行时动态生成目标类的代理对象。</p><ul><li>灵活性不同</li></ul><p>静态代理的代理类只能为一个目标对象服务,如果要为多个目标对象服务需要定义不同的代理类。动态代理可以通过参数不同,为不同的目标对象生成代理实例,灵活性更高。</p><ul><li>易用性不同</li></ul><p>静态代理需要额外定义许多代理类,工作量大,不易管理。动态代理可以直接使用JDK的Proxy类或第三方框架,使用更加方便。</p><ul><li>接口要求不同</li></ul><p>静态代理要求目标对象必须实现接口,否则无法使用接口进行编程。动态代理的目标对象可以是类或者接口。</p><p><strong>静态代理</strong></p><ol><li>定义接口:</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java

<span class="token class-name">Copy</span> code

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHello</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.实现类:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java

<span class="token class-name">Copy</span> code

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IHello</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.代理类:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java

<span class="token class-name">Copy</span> code

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IHello</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">HelloImpl</span> helloImpl<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">HelloProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        helloImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//额外功能</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始代理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        helloImpl<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//额外功能</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结束代理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.测试:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java

<span class="token class-name">Copy</span> code

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">IHello</span> helloProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helloProxy<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><p>开始代理</p><p>Hello World!</p><p>结束代理</p><p><strong>动态代理</strong></p><ol><li>定义与静态代理相同的接口IHello和实现类HelloImpl</li><li>代理处理器类:</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java

<span class="token class-name">Copy</span> code

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始代理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结束代理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.获取代理对象:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java

<span class="token class-name">Copy</span> code

<span class="token class-name">IHello</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IHello</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
  <span class="token class-name">HelloImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">IHello</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token keyword">new</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.测试:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java

<span class="token class-name">Copy</span> code

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">IHello</span> hello <span class="token operator">=</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">IHello</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 步骤3代码</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出与静态代理相同。</p><h2 id="_6-是否会dubbo" tabindex="-1"><a class="header-anchor" href="#_6-是否会dubbo" aria-hidden="true">#</a> 6.是否会dubbo？</h2><ul><li>Dubbo是什么</li></ul><p>Dubbo是阿里巴巴开源的一个高性能、轻量级的Java RPC框架。其架构图主要包含:服务提供者、服务消费者、注册中心和监控中心四部分。利用Dubbo可以很方便地实现服务化,以及SOA服务治理架构。</p><ul><li>Dubbo的工作原理</li></ul><p>Dubbo的工作原理主要是基于RPC远程调用。服务提供者启动时会将自己提供的服务注册到注册中心,同时开启RPC服务器监听服务请求。服务消费者启动时会向注册中心订阅自己需要的服务,REGISTER中心会返回服务提供者的地址列表。然后服务消费者会基于RPC协议向提供者发送服务调用请求,提供者收到请求后执行服务并返回结果给消费者。</p><ul><li>Dubbo的优点</li></ul><p>Dubbo最大的优点是透明化、易用性强。采用全Spring配置方式,可以和Spring程序无缝集成。另外Dubbo实现了软负载均衡及故障容错机制,服务淘汰及自我保护机制,在大并发下保证系统可用性。</p><ul><li>Dubbo的典型应用</li></ul><p>Dubbo最典型的应用场景是跨系统的分布式服务调用。如电商系统中订单服务要调用用户服务获取用户信息,调用商品服务获取商品信息。Dubbo可以提供透明的跨系统调用,实现SOA服务治理。</p><h2 id="_7-排查full-gc" tabindex="-1"><a class="header-anchor" href="#_7-排查full-gc" aria-hidden="true">#</a> 7.排查full gc？</h2><ul><li>观察GC日志,注意full gc的次数、耗时以及再次full gc的间隔时间,如果过于频繁可能是内存溢出导致。</li><li>使用jstat -gc utilization工具观察老年代占用率,如果接近100%时就会引发full gc。可以适当提高老年代比例避免memory exhaustion。</li><li>生成heap dump进行脱机分析,查看对象存活数量及大小,找出是否存在存活时间过长的对象引发内存泄漏。</li></ul><h2 id="_8-提高数据库查询性能" tabindex="-1"><a class="header-anchor" href="#_8-提高数据库查询性能" aria-hidden="true">#</a> 8.提高数据库查询性能？</h2><ul><li>优化查询语句,使用Explain查看执行计划,避免全表扫描,使用索引进行查询。使用合理的条件过滤,避免返回大量无用数据。</li><li>索引</li><li>redis</li></ul><h2 id="_9-大学中印象最深的课程" tabindex="-1"><a class="header-anchor" href="#_9-大学中印象最深的课程" aria-hidden="true">#</a> 9.大学中印象最深的课程？</h2><p>操作系统</p><h2 id="_10-最熟悉的算法" tabindex="-1"><a class="header-anchor" href="#_10-最熟悉的算法" aria-hidden="true">#</a> 10.最熟悉的算法？</h2><p>二分查找</p><h2 id="_11-平时学习技术的途径和方法" tabindex="-1"><a class="header-anchor" href="#_11-平时学习技术的途径和方法" aria-hidden="true">#</a> 11.平时学习技术的途径和方法？</h2><p>网站、自学</p><h2 id="_12-对哪种数据结构印象深刻-java里怎么用的" tabindex="-1"><a class="header-anchor" href="#_12-对哪种数据结构印象深刻-java里怎么用的" aria-hidden="true">#</a> 12.对哪种数据结构印象深刻？Java里怎么用的？？</h2><p>HashMap</p><h2 id="_13-校园实践的收获-遇到过哪些问题" tabindex="-1"><a class="header-anchor" href="#_13-校园实践的收获-遇到过哪些问题" aria-hidden="true">#</a> 13.校园实践的收获？遇到过哪些问题？</h2><p>大一志愿服务</p><h2 id="_14-密码学-常见的对称加密和非对称加密算法-rsa为什么比des效率高" tabindex="-1"><a class="header-anchor" href="#_14-密码学-常见的对称加密和非对称加密算法-rsa为什么比des效率高" aria-hidden="true">#</a> 14.密码学：常见的对称加密和非对称加密算法？RSA为什么比DES效率高？</h2><ul><li><p>常见的对称加密算法有DES、AES等,特点是加密和解密使用同一密钥。</p></li><li><p>常见的非对称加密算法有RSA、ECC等,特点是加密和解密使用不同的密钥。</p></li><li><p>RSA之所以效率高于DES:</p></li></ul><p>​ RSA可以选择密钥长度,典型取1024或2048位,密钥越大加密强度越高。DES密钥仅56位。</p><h2 id="_15-为什么想来广州" tabindex="-1"><a class="header-anchor" href="#_15-为什么想来广州" aria-hidden="true">#</a> 15.为什么想来广州？</h2><h2 id="_16-项目是基于微服务架构-怎么分割不同的架构的" tabindex="-1"><a class="header-anchor" href="#_16-项目是基于微服务架构-怎么分割不同的架构的" aria-hidden="true">#</a> 16.项目是基于微服务架构，怎么分割不同的架构的？</h2><ul><li>按业务领域来拆分,不同业务领域的服务可以拆分出来,比如用户服务、订单服务、支付服务等。</li><li>按团队结构来拆分,不同的服务可以由不同的团队来负责。</li><li>将对外提供的开放API拆分为独立服务。</li><li>将一些通用能力如日志、配置、监控等拆分出基础服务。</li></ul><h2 id="_17-spring框架-aop" tabindex="-1"><a class="header-anchor" href="#_17-spring框架-aop" aria-hidden="true">#</a> 17.spring框架，AOP</h2><ul><li>AOP的概念 - 在程序运行期间,动态地将代码切入到方法或者函数的调用点上的这种编程方式,可以不修改源代码实现对程序功能的增强。</li><li>AOP的实现原理 - Spring AOP使用了动态代理,在运行时通过生成代理对象,实现对目标对象方法的拦截从而实现增强功能。</li><li>AOP的重要组件 - aspect、pointcut、advice等,分别用于声明切面、确定joinpoint、执行增强代码。</li><li>AOP的主要作用 - 日志记录、性能监控、安全控制、事务处理等方面对程序进行增强。</li><li>AOP和OOP的区别 - OOP是静态的代码封装和重用,而AOP是动态地通过代理方式实现运行期间的代码增强。</li><li>Spring AOP与 AspectJ AOP的区别 - Spring只支持方法级别的切入,而AspectJ通过修改字节码支持类和方法级别的切入。</li><li>AOP的典型应用 - Spring事务管理就是通过AOP实现的,转译了业务方法的调用过程,减少了重复代码。</li><li>如何优化AOP的性能 - 采用AspectJ编译时织入提高性能,只为Really需要的Joinpoint生成代理等。</li></ul><p>1、定义一个接口及其实现类:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java

<span class="token class-name">Copy</span> code

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 方法实现 </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、定义一个切面类:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java

<span class="token class-name">Copy</span> code

<span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.example.UserServiceImpl.addUser(..))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 前置通知实现 </span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.example.UserServiceImpl.addUser(..))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logAfter</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 后置通知实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里通过@Before和@AfterReturning注解定义了前置通知和后置通知。</p><p>3、配置Spring AOP扫描该切面类:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java

<span class="token class-name">Copy</span> code

<span class="token annotation punctuation">@EnableAspectJAutoProxy</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、调用UserService的addUser方法将自动触发前置通知和后置通知的执行。</p><h2 id="_18-拦截器底层协议是什么" tabindex="-1"><a class="header-anchor" href="#_18-拦截器底层协议是什么" aria-hidden="true">#</a> 18.拦截器底层协议是什么？</h2><ul><li>拦截器的实现是基于Java的动态代理机制,Spring AOP与拦截器实现类似。</li><li>Spring MVC中的拦截器通过HandlerInterceptor接口实现请求拦截,底层是基于Servlet过滤器链。</li><li>拦截器链中的拦截器实例是以单例模式管理的,线程不安全需要注意。</li><li>拦截器只能拦截Controller请求,对静态资源没有效果。Filter过滤器可以处理更底层的请求信息。</li></ul><p>拦截器的根本规范就是JSR-250,这可以看作是它的底层协议。</p><h2 id="_19-怎么保证单点登录" tabindex="-1"><a class="header-anchor" href="#_19-怎么保证单点登录" aria-hidden="true">#</a> 19.怎么保证单点登录？</h2><p>单点登录(Single Sign On,SSO)的核心理念是实现一次登录,处处可达。理解SSO的关键是:</p><ul><li>单一认证系统</li></ul><p>这是一个统一的认证系统(可基于服务或OAuth),所有其他应用依赖这个系统进行认证,不再各自实现认证机制。</p><ul><li>认证信息共享</li></ul><p>这个统一认证系统负责对用户进行认证,并提供认证信息(如授权令牌)给其他应用,以实现认证信息的共享。</p><ul><li>认证信息有效性</li></ul><p>认证信息需要在一定时间内保持有效,在有效期内访问其他应用都无需重新认证。</p><ul><li>应用信任联盟</li></ul><p>所有的应用都信任这个统一认证系统,并基于它提供的认证信息认可用户身份。</p><ul><li>无缝切换</li></ul><p>用户可以在一个应用进入另一个应用,没有认证界限,实现了真正的单点体验。</p><p>所以SSO的本质是:依赖统一认证,认证信息共享,实现一次登录多处受信,无需重复登录。</p><p>使用JWT(JSON Web Token)实现单点登录的流程如下:</p><ul><li>用户使用用户名密码首次在认证服务器登录</li><li>认证服务器验证用户信息无误后,生成一个JWT,并将用户信息、权限等数据编码进JWT</li><li>客户端拿到JWT,保存到本地(比如浏览器localStorage)</li><li>访问其他需要权限验证的服务器时,客户端带上这个JWT</li><li>服务器通过校验JWT签名等信息,认证用户身份和权限</li><li>这样客户端在多个服务器之间就可以通过这个JWT实现统一的认证和鉴权</li></ul><p>JWT自包含了用户认证信息,不同服务器可以共享解析,无需每个服务器单独认证,即实现了SSO(Single Sign On)。</p><p>JWT也可以设置过期时间,单点登录后一定时间内访问都无需重新登录,提升了用户体验。</p><p>当JWT过期时,需要重新获取新的JWT才能继续访问,以保证SSO的安全性。</p><p>所以基于JWT的单点登录,主要依赖于JWT作为用户身份令牌在多个系统中共享,省去重复认证的步骤,从而实现单点登录的效果。</p><h2 id="_20-项目用到了spring-boot的什么api" tabindex="-1"><a class="header-anchor" href="#_20-项目用到了spring-boot的什么api" aria-hidden="true">#</a> 20.项目用到了spring boot的什么API？</h2><ul><li>自动配置 - 说明使用了Spring Boot的自动配置功能。</li><li>Starter - 说明使用了哪些Spring Boot Starter模块,如spring-boot-starter-web、spring-boot-starter-jdbc等,快速引入需要的依赖。</li></ul><h2 id="_21-mybatis-一级缓存二级缓存-和-的区别" tabindex="-1"><a class="header-anchor" href="#_21-mybatis-一级缓存二级缓存-和-的区别" aria-hidden="true">#</a> 21.mybatis 一级缓存二级缓存，#和$的区别？</h2>`,105),u=n("li",null,"一级缓存是SqlSession级别的缓存,同一个SqlSession查询过的数据会被缓存,多次查询从缓存中直接获取,默认开启。",-1),d=n("li",null,"二级缓存是SqlSessionFactory级别,多个SqlSession可以共用二级缓存,需要手动配置开启和清空,效果更好。",-1),r=n("li",null,"主要区别是一级缓存仅在一个SqlSession内有效,二级缓存对整个MyBatis系统都有效。",-1),k=n("li",null,"#表示一个占位符,它可以限制变量的类型。#{name} 会限制name必须为字符串类型。",-1),v=n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"表示拼接"),n("mi",null,"S"),n("mi",null,"Q"),n("mi",null,"L"),n("mtext",null,"字符串"),n("mo",{separator:"true"},","),n("mtext",null,"对变量类型不做限制。")]),n("annotation",{encoding:"application/x-tex"},"表示拼接SQL字符串,对变量类型不做限制。")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8778em","vertical-align":"-0.1944em"}}),n("span",{class:"mord cjk_fallback"},"表示拼接"),n("span",{class:"mord mathnormal"},"SQ"),n("span",{class:"mord mathnormal"},"L"),n("span",{class:"mord cjk_fallback"},"字符串"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord cjk_fallback"},"对变量类型不做限制。")])])],-1),m=n("li",null,[a("注意"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"需要转义为")]),n("annotation",{encoding:"application/x-tex"},"需要转义为")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord cjk_fallback"},"需要转义为")])])]),a("{},并且外面要用一个字符串引起来。")],-1),b=n("li",null,"一般来说为了安全性,尽量使用#参数占位符。",-1),h=s(`<h2 id="_22-有没有在linux部署过项目" tabindex="-1"><a class="header-anchor" href="#_22-有没有在linux部署过项目" aria-hidden="true">#</a> 22.有没有在linux部署过项目？</h2><p>什么情况下打包为war包：</p><p>Java Web项目、不包含Tomcat依赖的项目</p><p>什么情况下打包为jar包：</p><p>SpringBoot项目、SpringCloud项目</p><p>打包, 将war包上传到云服务器的webapps目录</p><p>使用IDEA打包jar，直接将JAR 放入服务器 使用命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span>

使用后台运行进程
<span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_23-怎么想到用redis做限流的" tabindex="-1"><a class="header-anchor" href="#_23-怎么想到用redis做限流的" aria-hidden="true">#</a> 23.怎么想到用redis做限流的？</h2><ul><li>内存存储：Redis是一个内存数据库，它能够快速读取和写入数据，这使得它非常适合用于高速的限流决策。在Redis中执行限流操作比在传统数据库中更快速。</li><li>过期时间：Redis支持为存储的数据设置过期时间。这意味着你可以为每个令牌或限流规则设置一个超时时间，一旦时间到期，令牌将自动删除，从而不再占用内存。</li><li>数据结构：Redis提供了多种数据结构，如有序集合（sorted set）和列表，这些数据结构非常适合用于实现不同类型的限流算法，如令牌桶算法或漏桶算法。</li></ul><h2 id="_24-怎么防sql注入" tabindex="-1"><a class="header-anchor" href="#_24-怎么防sql注入" aria-hidden="true">#</a> 24.怎么防sql注入？</h2><p><code>PreparedStatement</code>来执行参数化查询。用户输入通过<code>setString</code>方法绑定到查询的占位符位置，而不是直接将用户输入嵌入到SQL查询中。</p><p><strong>使用ORM框架</strong></p><h2 id="_25-jwt单点登陆-怎么理解单点" tabindex="-1"><a class="header-anchor" href="#_25-jwt单点登陆-怎么理解单点" aria-hidden="true">#</a> 25.JWT单点登陆，怎么理解单点？</h2><ol start="19"><li></li></ol><h2 id="_26-在学校的经历" tabindex="-1"><a class="header-anchor" href="#_26-在学校的经历" aria-hidden="true">#</a> 26.在学校的经历？</h2><h2 id="_27-最近读什么书" tabindex="-1"><a class="header-anchor" href="#_27-最近读什么书" aria-hidden="true">#</a> 27.最近读什么书？</h2><h2 id="_28-了解linux、docker吗" tabindex="-1"><a class="header-anchor" href="#_28-了解linux、docker吗" aria-hidden="true">#</a> 28.了解Linux、Docker吗？</h2><h2 id="_29-平时如何学习新的知识" tabindex="-1"><a class="header-anchor" href="#_29-平时如何学习新的知识" aria-hidden="true">#</a> 29.平时如何学习新的知识？</h2><h2 id="_30-竞赛获奖" tabindex="-1"><a class="header-anchor" href="#_30-竞赛获奖" aria-hidden="true">#</a> 30.竞赛获奖？</h2><h2 id="_31-redis和mysql数据一致性" tabindex="-1"><a class="header-anchor" href="#_31-redis和mysql数据一致性" aria-hidden="true">#</a> 31.Redis和MySQL数据一致性？</h2><p><strong>Cache Aside Pattern 是我们平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景。</strong></p><p><strong>写</strong> ：</p><ul><li>先更新 DB</li><li>然后直接删除 cache 。</li></ul><p><strong>读</strong> :</p><ul><li>从 cache 中读取数据，读取到就直接返回</li><li>cache中读取不到的话，就从 DB 中读取数据返回</li><li>再把数据放到 cache 中。</li></ul><h2 id="_32-职业规划" tabindex="-1"><a class="header-anchor" href="#_32-职业规划" aria-hidden="true">#</a> 32.职业规划？</h2><p>成为一名软件架构师：</p><p>我计划不断深入学习关键技术。密切关注新兴技术趋势，包括人工智能和大数据处理。积累更多的项目经验。提高我的团队协作和领导技能，以便有效地传达架构决策和理念。</p><h2 id="_33-学习方式" tabindex="-1"><a class="header-anchor" href="#_33-学习方式" aria-hidden="true">#</a> 33.学习方式？</h2>`,30);function g(e,y){return i(),p("div",null,[o,n("ul",null,[u,d,r,k,n("li",null,[v,a(t(e.name)+"可以接受任何类型的变量。",1)]),m,b]),h])}const x=l(c,[["render",g],["__file","整理-中邮消费金融面经.html.vue"]]);export{x as default};
