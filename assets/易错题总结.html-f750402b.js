import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as t,f as r}from"./app-a84b8f0c.js";const s={},n=r('<h1 id="软件工程易错题总结" tabindex="-1"><a class="header-anchor" href="#软件工程易错题总结" aria-hidden="true">#</a> 软件工程易错题总结</h1><p>一、单选题</p><p><strong>2.在软件生存周期中，工作量所占比例最大的阶段是（）阶段</strong> A.需求分析 B.设计 C.测试</p><p>D.维护 答案:D</p><p><strong>5.实践表明,确定发生错误的位置和内在原因所需的工作量几乎占整个调试工作量的( )</strong> A.30 B.50 C.70 D.90 答案:D <strong>6.技术可行性是可行性研究的关键,其主要内容一般不包括( ).</strong> A.风险分析 B.资源分析 C.人员分析 D.技术分析 答案:C</p><p><strong>14.可行性研究的步骤中不包括( )的内容.</strong> A.复查初步分析结果. B.研究现有的系统 C.导出新系统高层逻辑模型. D.建立新系统的物理模型解法. 答案:C <strong>15.Jackson 方法在需求分析阶段的主要步骤不包括( ).</strong> A.了解实体行为 B.标识实体与行为 C.生成实体结构图</p><p>D.创建软件系统模型 答案:A</p><p><strong>（3）一个CASE工作台是一组( ),支持设计、实现或测试等特定的软件开发阶段</strong></p><p>A.工具集</p><p>B.软件包</p><p>C.平台集</p><p>D.程序包</p><p>正确答案:A</p><p><strong>（4）下面哪个不是集成测试使用的图模型( )</strong></p><p>A顺序图</p><p>B协作图</p><p>C活动图</p><p>D用例图</p><p>正确答案:D</p><p><strong>（5）软件是一种( )产品</strong></p><p>A有形</p><p>B逻辑</p><p>C物质</p><p>D消耗</p><p>正确答案:B</p><p><strong>（9）白盒测试方法重视( )的度量</strong></p><p>A测试覆盖率</p><p>B测试数据多少</p><p>C测试费用</p><p>D测试周期</p><p>正确答案:A</p><p><strong>（13）软件开发环境支持一定的()或按照一定的软件开发模型组织而成。</strong></p><p>A软件生存周期</p><p>B软件过程</p><p>C软件开发方法</p><p>D软件开发模型</p><p>正确答案:C</p><p><strong>（14）软件开发方法中的原型化方法是一种()型的设计过程。</strong></p><p>A自外向内</p><p>B自顶向下</p><p>C自内向外</p><p>D自底向上</p><p>正确答案:A</p><p><strong>（16）可行性分析中,系统流程图用于描述()。</strong></p><p>A当前运行系统</p><p>B当前逻辑模型</p><p>C目标系统</p><p>D新系统</p><p>正确答案:A</p><p><strong>（17）表示集成是指一个系统中的工具使用共同的风格以及采用共同的用户交互标准集。表示集成有三种不同级别:窗口系统集成、命令集成和()。</strong></p><p>A数据集成</p><p>B平台集成</p><p>C界面集成</p><p>D交互集成</p><p>正确答案:D</p><p><strong>（18）()支持工作台或环境中一个工具对系统中其他工具的访问。</strong></p><p>A过程集成</p><p>B控制集成</p><p>C平台集成</p><p>D界面集成</p><p>正确答案:B</p><p><strong>（19）软件工程学的目的应该是最终解决软件生产的()问题。</strong></p><p>A提高软件的开发效率</p><p>B使软件生产工程化</p><p>C消除软件的生产危机</p><p>D加强软件的质量保证</p><p>正确答案:B</p><p><strong>（20）在计算机软件开发和维护中所产生的一系列严重的问题通常称为软件危机,这些问题中相对次要的因素是()。</strong></p><p>A文档质量</p><p>B开发效率</p><p>C软件功能</p><p>D软件性能</p><p>正确答案:D</p><p><strong>（21）为了进一步改善软件系统的可维护性和可靠性,并为以后的改进奠定基础的软件维护称为( ).</strong></p><p>A纠错性维护</p><p>B适应性维护</p><p>C改善性维护</p><p>D预防性维护</p><p>正确答案:D</p><p><strong>（22）软件工程中的各种方法是完成软件工程项目的技术手段,它们支持软件工程的( )阶段.</strong></p><p>A各个</p><p>B前期</p><p>C中期</p><p>D后期</p><p>正确答案:A</p><p><strong>（23）软件是一种（ ）产品</strong></p><p>A有形</p><p>B逻辑</p><p>C物质</p><p>D消耗</p><p>正确答案:B</p><p><strong>（24）研究软硬件资源的有效性是进行（ ）研究的一方面。</strong></p><p>A技术可行性</p><p>B经济可行性</p><p>C社会可行性</p><p>D操作可行性</p><p>正确答案:A</p><p><strong>（25）指出PDL是下列（）语言</strong></p><p>A高级程序设计语言</p><p>B伪码</p><p>C中级程序设计语言</p><p>D低级程序设计语言</p><p>正确答案:B</p><p><strong>（26）结构化设计是一种面向（ ）的设计方法</strong></p><p>A数据流</p><p>B数据结构</p><p>C数据库</p><p>D程序</p><p>正确答案:A</p><p><strong>（27）从事物的属性侧面来描述事物的方法就是( )的方法.</strong></p><p>A面向对象</p><p>B面向数据</p><p>C面向过程</p><p>D面向属性</p><p>正确答案:B</p><p><strong>（28）一个模块的( )是指能直接控制该模块的模块数.</strong></p><p>A扇出数</p><p>B扇入数</p><p>C宽度</p><p>D深度</p><p>正确答案:B</p><p><strong>（29）通道技术可以在（　　　）之间直接交换数据。</strong></p><p>A内存与CPU</p><p>BCPU与外设</p><p>C内存与外设</p><p>D内存、CPU和外设三者</p><p>正确答案:C</p><p><strong>（30）面向数据的设计方法就是根据问题的数据结构定义一组映射,把问题的数据结构转换为问题解的( )结构</strong></p><p>A程序</p><p>B数据</p><p>C逻辑</p><p>D物理</p><p>正确答案:A</p><p>二、多选题</p><p><strong>（31）需求分析的任务包括( )</strong></p><p>A问题识别</p><p>B编写文档</p><p>C导出软件的物理模型</p><p>D导出软件的逻辑模型</p><p>正确答案:ABD</p><p><strong>（32）模块的基本属性有( )</strong></p><p>A接口</p><p>B参数</p><p>C功能</p><p>D逻辑</p><p>E状态</p><p>正确答案:ACDE</p><p><strong>（33）面向对象的特征有( )</strong></p><p>A对象唯一性</p><p>B分类性</p><p>C继承性</p><p>D抽象性</p><p>E多态性</p><p>正确答案:ABCE</p><p><strong>（34）下列方法属于软件开发方法的是( )</strong></p><p>A结构化方法</p><p>BJackson方法</p><p>C维也纳开发方法</p><p>D面向对象的方法</p><p>正确答案:ABCD</p><p>三、判断题</p><p><strong>（5）软件体系结构的几种模型包括:结构模型、框架模型、动态模型、过程模型( ))</strong></p><p>A对</p><p>B错</p><p>正确答案:A</p><p><strong>（10）类之间的连接关系是聚合关系;类之间整体与部分的关系是关联关系( )</strong></p><p>A对</p><p>B错</p><p>正确答案:B</p><p><strong>（12）风险管理的活动有:(1)风险识别(2)风险分析(3)风险规划(4)风险控制( )</strong></p><p>A对</p><p>B错</p><p>正确答案:A</p><p><strong>（14）对象建模的过程:确定类、准备数据字典、确定关联、确定属性、使用继承来细化类、完善对象模型( )</strong></p><p>A对</p><p>B错</p><p>正确答案:A</p><p><strong>（15）传统的SA方法主要用于数据处理方面的问题,主要工具DFD体现了系统的“做什么”功能,但它仅是一个静态模型,没有处理的顺序,即控制模型( )</strong></p><p>A对</p><p>B错</p><p>正确答案:A</p><p><strong>（18）3种可能的控制流机制分别是:过程驱动控制、事件驱动控制、线程驱动控制( )</strong></p><p>A对</p><p>B错</p><p>正确答案:A</p><p><strong>（19）大多数开发系统都采用基于文件集成的策略。</strong></p><p>A对</p><p>B错</p><p>正确答案:A</p><p><strong>（23）增量模型是一种整体开发模型。()</strong></p><p>A对</p><p>B错</p><p>正确答案:B</p><p><strong>（35）测试模型包括：测试用例、测试数据、测试构件。()</strong></p><p>A错误</p><p>B正确</p><p>正确答案:B</p><p><strong>（42）桩模块用来代替被测模块所调用的模块。它的作用是返回被测模块所需的信息。( )</strong></p><p>A错误</p><p>B正确</p><p>正确答案:B</p><p><strong>（46）任何程序都可以由顺序、选择及重复三种基本控制结构构造（）。</strong></p><p>A错误</p><p>B正确</p><p>正确答案:B</p><p><strong>（71）RUP设计的主要结果是设计模型，用来可视化的描述系统的实现。()</strong></p><p>A错误</p><p>B正确</p><p>正确答案:B</p><p><strong>27.下面关于软件的特征的有（）</strong></p><p>A.软件是逻辑的，而不是产品</p><p>B.软件是被开发和设计出来的，而不是传统意义上被制造的</p><p>C.软件的研制需要投入大量的、复杂的脑力劳动，成本高</p><p>D.软件研制不需要太多人力</p><p>正确答案：ABC</p><p><strong>28.以下是常见的面向对象的方法有（）</strong></p><p>A.Booch方法</p><p>B.Coad／Yourdon方法</p><p>C.OMT方法</p><p>D.Jacobson方法</p><p>正确答案：ABCD，解析：Booch、UML、Coad、OMT、Jacobson，Jackson方法是一种面向数据结构的开发方法。</p><p><strong>29.题目：检查软件产品是否符合需求定义的过程称为( )。</strong></p><p>A. 集成测试</p><p>B. 确认测试</p><p>C. 验证测试</p><p>D. 验收测试</p><p>正确选项：B</p><p><strong>30.题目：面向对象分析阶段建立的三个模型中,核心的模型是( )模型。</strong></p><p>A. 功能</p><p>B. 动态</p><p>C. 对象</p><p>D. 分析</p><p>正确选项：C</p><p><strong>31.题目：下列属于面向对象程序设计语言的是( )</strong></p><p>A. C++</p><p>B. JAVA</p><p>C. BASIC</p><p>D. C#</p><p>E. Smalltalk</p><p>正确选项：ABDE，Smalltalk是一种早期的面向对象编程语言，被认为是面向对象编程的奠基石。</p><p><strong>32.题目：螺旋模型将瀑布模型和增量模型结合起来，加入了两种模型均忽略了的风险分析，弥补了这两种模型的不足。( )</strong></p><p>正确选项：对</p><p>螺旋模型将瀑布模型和增量模型结合起来，加入了两种模型均忽略的风险分析，弥补了这两种模型的不足。</p><p>螺旋模型将开发过程分为几个螺旋周期，每个螺旋周期大致和瀑布模型相符合。</p><p>每个螺旋周期分为4个工作步骤：制定计划、风险分析、实施工程、用户评估。</p><p><strong>33.题目：Wirfs－Brock等人提出了种类－责任－协作者开发类图的卡片技术。该技术使用实际的或虚拟的索引卡片，为定义类提供较多的信息。</strong></p><p>正确选项：对</p><p><strong>34.题目：构造原型的目的、方式及内容的取舍不同,原型特征可分为（）、（）、（）、（）四类。</strong></p><p>正确选项：系统的界面形式</p><p>正确选项：系统的总体结构</p><p>正确选项：系统的主要处理功能和性能</p><p>正确选项：数据库模式</p><p><strong>35.题目：软件开发环境是相关的一组（）的集合,它支持一定的软件开发方法或按照一定的软件开发模型组织而成的。</strong></p><p>正确选项：软件工具</p><p><strong>36.题目：软件工具通常由工具.工具接口和（）三部分构成。</strong></p><p>正确选项：工具用户接口</p><p><strong>37.题目：变换模型是一种适合于（）方法的模型。从（）开始,经过一系列（）,最终得到系统的目标程序。</strong></p><p>正确选项：形式化开发</p><p>正确选项：软件需求形式化说明</p><p>正确选项：变换</p><p><strong>38.题目：什么是实验型原型模型?</strong></p><p>正确选项：这是一种把原型思想用于设计阶段的快速原型模型。若对于一个大型软件系统的设计方案没有把握时，要考核设计方案是否正确、能否实现，可通过原型模型的开发运行来证实。一旦通过原型模型的开发运行，证实设计方案是正确的、能实现的，可废弃这个原型，按照开发过程来开发。</p><p><strong>39.以下不属于软件维护的困难表现的是（）</strong></p><p>A. 读懂别人的程序是困难的</p><p>B. 文档的不一致性</p><p>C. 源程序及相关文档的错误或丢失</p><p>D. 软件开发和软件维护在人员和时间上的差异</p><p>满分：2 分</p><p>正确答案:C</p><p><strong>40.下面错误的说法是（）</strong></p><p>A. 每个数据流必须用名词或名词短语命名</p><p>B. 每个加工必须有名字，通常是动词短语</p><p>C. 每个数据存储必须用名词或名词短语</p><p>D. 每个数据源点或终点必须有名字</p><p>满分：2 分</p><p>正确答案:A</p><p><strong>41.下面错误的说法是（）</strong></p><p>A. 每个数据流必须用名词或名词短语命名</p><p>B. 每个加工必须有名字，通常是动词短语</p><p>C. 每个数据存储必须用名词或名词短语</p><p>D. 每个数据源点或终点必须有名字</p><p>满分：2 分</p><p>正确答案:A</p><p><strong>42.在软件设计中模块数量（） 的时候接口成本（）， 软件总成本（） 。</strong></p><p>A很多、高、低</p><p>B很多、低、低</p><p>C很少、高、高</p><p>D 很少、低、高</p><p>正确答案:D</p><p><strong>43.面向对象的程度设计程序设计思想中， 对象是主动的这体现在（）</strong></p><p>A对象的操作围绕对其数据所需要做的处理来设置</p><p>B外部不能直接加工对象的私有数据， 必须通过其公有接口发送消息</p><p>C不同对象各自独立的处理自身的数据， 彼此通过发消息传递信息完成通信</p><p>D以上都不对。</p><p>正确答案:C</p><p><strong>44.大型软件系统的测试顺序为模块测试（）、系统测试，验收测试（）。</strong> ‌<strong>选项</strong>‌： A. 子系统测试，平行运行 B. Alpha测试，Beta测试 C. 黑盒测试，白盒测试 D. 集成测试，自动化测试</p><p>‌正确答案‌：A</p><p>‌解析‌：</p><p><strong>测试顺序层级</strong>‌：</p><ul><li>大型软件测试通常遵循以下阶段顺序： ‌<strong>模块测试 → 子系统测试 → 系统测试 → 验收测试 → 平行运行</strong>‌ ‌。</li><li>‌<strong>子系统测试</strong>‌：在模块测试后，需验证多个模块组合形成的子系统的协作逻辑，重点检测模块间的接口错误‌。</li><li>‌<strong>平行运行</strong>‌：属于验收测试的一部分，指新旧系统并行运行以验证新系统的稳定性‌。</li></ul><p><strong>45.代码审查比计算机测试的优越性体现在</strong></p><p>A代码审查发现的错误数量往往比计算机测试的更多</p><p>B一次审查会上可以发现许多错误</p><p>C对于某些类型的错误来说， 只能通过代码审查来发现</p><p>D以上都正确</p><p>正确答案‌：D</p><p><strong>46.代码审查小组最合理的组合为</strong></p><p>A组长（参与了需要审查的项目）， 程序设计者， 程序测试者</p><p>B组长（参与了需要审查的项目）， 程序编写者， 程序测试者</p><p>C组长（没有参与需要审查的项目）， 程序设计者， 程序测试者</p><p>D 组长（没有参与需要审查的项目）， 程序设计者， 程序编写者， 程序测试者</p><p>正确答案‌：D</p><p><strong>解析</strong>‌：</p><ol><li>‌<strong>组长中立性</strong>‌：未参与项目的组长可避免主观干扰，确保审查客观性‌。</li><li>‌<strong>角色全面性</strong>‌： <ul><li>‌<strong>设计者</strong>‌：理解架构与需求是否落地；</li><li>‌<strong>编写者</strong>‌：解释代码实现细节；</li><li>‌<strong>测试者</strong>‌：验证代码是否符合测试逻辑‌。</li></ul></li></ol><p><strong>47.根据等价类设计测试方案时， 每个测试方案要（ ）未被覆盖的有效等价类， 或者（）未被覆盖的无效等价类。</strong></p><p>A尽可能多覆盖， 覆盖一个而且只覆盖一个</p><p>B尽可能多覆盖， 尽可能多覆盖</p><p>C覆盖—个而且只覆盖—个， 覆盖—个而且只覆盖—个</p><p>D覆盖—个而且只覆盖—个， 尽可能多覆盖</p><p>正确答案‌：A</p><p>根据等价类划分法的设计原则，每个测试方案应满足以下要求：</p><ul><li>‌<strong>对于有效等价类</strong>‌：应‌<strong>尽可能多地覆盖</strong>‌尚未被覆盖的有效等价类‌。</li><li>‌<strong>对于无效等价类</strong>‌：每个测试用例应‌<strong>覆盖一个且仅覆盖一个</strong>‌无效等价类‌。</li></ul><p><strong>48.以下对软件维护困难原因的描述不正确的是</strong></p><p>A理解别人写的程序通常非常困难</p><p>B需要维护的软件往往没有没有合格的文档</p><p>C大多数软件在设计时没有考虑将来的修改</p><p>D软件往往需要频繁的周期性维护</p><p>正确答案‌：D</p><p>软件维护的困难性主要体现在维护过程中遇到的障碍（如代码理解、文档缺失等），而非维护的频繁性本身。周期性维护是软件生命周期的正常需求，与维护的“困难原因”无直接关联‌。</p><p><strong>49.高质量的软件必须做到与需求—致，（）和（）</strong></p><p>A与开发标准—致， 满足隐含需求</p><p>B与测试用例—致， 符合非功能性需求</p><p>C与开发标准—致符合非功能性需求</p><p>D与测试用例—致， 满足隐含需求</p><p>正确答案‌：A</p><p><strong>50.在软件质量保证中， 审查的正确步骤是</strong></p><p>A综述，准备审查返工跟踪</p><p>B准备，综述， 跟踪审查返工</p><p>C准备，综述， 审查返工跟踪</p><p>D综述，准备跟踪审查返工</p><p>正确答案‌：C</p><p>在软件质量保证中，‌<strong>审查的正确步骤为选项C：准备、综述、审查、返工、跟踪</strong>‌。具体分析如下：</p><ol><li>‌<strong>准备</strong>‌：审查前需明确目标、收集资料并组织团队，确保审查的基础条件完备‌。</li><li>‌<strong>综述</strong>‌：通过预审或计划阶段，初步识别问题并制定审查策略，为后续环节提供方向‌。</li><li>‌<strong>审查</strong>‌：召开正式会议，逐项检查文档或代码，记录缺陷并讨论改进方案‌。</li><li>‌<strong>返工</strong>‌：根据审查结果修改问题，优化软件质量‌。</li><li>‌<strong>跟踪</strong>‌：验证返工后的成果是否符合要求，并总结审查过程以完善后续流程‌。</li></ol><p><strong>51.软件项目管理（）所有技术活动，（）整个生命周期</strong></p><p>A同步于、贯穿于</p><p>B先于、贯穿于</p><p>C同步于、先于</p><p>D先于、先于</p><p>正确答案‌：A</p><p><strong>52.增量模型是与用户交互最频繁的软件生命周期模型</strong>‌</p><ul><li>‌<strong>答案</strong>‌：错误。增量模型强调分阶段交付功能，但用户交互频率低于敏捷开发或原型化模型。敏捷开发的迭代周期更短，用户参与更频繁‌。</li></ul><p>‌<strong>53.可行性研究的目的是用最小的代价在尽可能短的时间内确定问题是否能够解决，为以后的行动方针提出意见</strong>‌</p><ul><li>‌<strong>答案</strong>‌：正确。可行性研究的目标是通过初步分析技术、经济、法律等维度，评估项目可行性，避免资源浪费‌。</li></ul><p>‌<strong>54.设计数据流图的重点是考虑系统的基本逻辑功能及其实现的具体路径</strong>‌</p><ul><li>‌<strong>答案</strong>‌：错误。数据流图（DFD）关注系统逻辑功能（如数据流向和处理），而非具体实现路径。实现路径属于详细设计或编码阶段的任务‌。</li></ul><p>‌<strong>55.内聚标志着模块内各元素结合的紧密程度，顺序内聚属于最强内聚</strong>‌</p><ul><li>‌<strong>答案</strong>‌：错误。功能内聚是最强类型（模块仅完成单一功能），顺序内聚属于中等强度（元素按顺序执行，但功能关联性弱于功能内聚）‌。</li></ul><p>‌<strong>56.UML类图中用一端为空心三角形的虚线连接具有依赖关系的两个类</strong>‌</p><ul><li>‌<strong>答案</strong>‌：错误。依赖关系用‌<strong>虚线箭头</strong>‌表示，空心三角形实线用于泛化（继承）关系，如父类与子类‌。</li></ul><p>‌<strong>57.Alpha测试由用户在开发者的场所并且在开发者对用户的指导下进行</strong>‌</p><ul><li>‌<strong>答案</strong>‌：正确。Alpha测试通常在开发环境中由用户执行，开发者提供支持；Beta测试则由用户独立在真实环境中完成‌。</li></ul><p>‌<strong>58.条件覆盖要求判定表达式中每个条件都取到两个不同的结果，而判定覆盖只关心整个判定表达式的值，因此条件覆盖通常比判定覆盖强</strong>‌</p><ul><li>‌<strong>答案</strong>‌：正确。条件覆盖需覆盖所有条件可能的取值组合（如true/false），而判定覆盖仅需覆盖判定结果（如整体true/false），前者更严格‌。</li></ul><p>‌<strong>59.软件项目成本估算模型COCOMOⅡ中体系结构阶段模型基于代码行数进行估算</strong>‌</p><ul><li>‌<strong>答案</strong>‌：正确。COCOMOⅡ在早期阶段（如体系结构设计）通过代码行数（SLOC）估算成本，后续阶段结合更多参数（如复用率、复杂度）修正‌。</li></ul><p><strong>60.详细设计阶段的结果决定了最终的程序代码质量。因此，该阶段的任务是要在逻辑和代码上正确实现每个模块的功能</strong>‌</p><ul><li>‌<strong>答案</strong>‌：‌<strong>错误</strong>‌。 <ul><li>‌<strong>详细设计阶段的作用</strong>‌：详细设计确实决定了程序代码的质量，因为该阶段需要设计模块的算法逻辑、数据结构和接口细节，为编码提供蓝图‌。</li><li>‌<strong>任务范畴</strong>‌：详细设计的核心是‌<strong>逻辑设计</strong>‌（如模块流程、数据结构），而非直接编写代码。代码实现属于后续的编码阶段‌。题目中“在代码上正确实现功能”的描述混淆了设计与实现的边界。</li></ul></li></ul><p>‌<strong>61. 在集成测试中，自顶向下测试策略不需要测试驱动程序和根程序，能够在测试阶段的早期实现并验证系统的主要功能</strong>‌</p><ul><li>‌<strong>答案</strong>‌：‌<strong>错误</strong>‌。 <ul><li>‌<strong>自顶向下测试的特点</strong>‌： <ul><li>‌**需要桩模块（Stub）**‌：测试高层模块时需用桩模拟未完成的底层模块功能，但不需要驱动程序（Driver）。</li><li>‌<strong>早期验证主要功能</strong>‌：该策略确实能在早期验证系统架构和核心功能。</li></ul></li><li>‌<strong>题目错误点</strong>‌： <ul><li>“不需要根程序”表述不准确。自顶向下需要桩模块（即“根程序”的替代），而驱动程序用于自底向上策略。题目混淆了测试工具的类型。</li></ul></li></ul></li></ul><p><strong>62.下列关于需求的陈述中,属于有效需求的是 ( )</strong> A. 目标软件必须有系统设置模块 B. 软件系统必须在3秒内响应并处理外部事件 C. 目标软件应由Java实现 D. 当软件和用户交互时,必须能使用满足Microsoft风格的界面 正确答案:B</p><p>解析:能为雇主带来最大化利益的需求就是有效需求。</p><p><strong>63.PAD是适用于（）</strong></p><p>A系统分析</p><p>B软件自动化生成</p><p>C自动分析数据</p><p>D软件测试</p><p>正确答案:B</p><p><strong>64.在图像传输系统中，读取模块负责读取图像，图像处理模块负责锐化图像，压缩模块负责压缩图像数据，传输模块负责传输图像数据。这些模块的组合形成的内聚类型为（ ）。</strong></p><p>A通信内聚</p><p>B过程内聚</p><p>C‌顺序内聚</p><p>D功能内聚</p><p>正确答案:C</p><p><strong>解析</strong>‌</p><ol><li>‌<strong>定义匹配</strong>‌ <ul><li>‌<strong>顺序内聚</strong>‌：模块内各处理元素必须按特定顺序执行，且前一元素的输出作为后一元素的输入。</li><li>‌<strong>系统流程</strong>‌： <ul><li>读取模块 → 图像处理模块（输入原始数据）</li><li>图像处理模块 → 压缩模块（输入处理后数据）</li><li>压缩模块 → 传输模块（输入压缩后数据）</li><li>‌<strong>数据流严格按顺序传递，形成依赖链</strong>‌，符合顺序内聚的核心特征‌。</li></ul></li></ul></li><li>‌<strong>排除其他选项</strong>‌ <ul><li>‌<strong>功能内聚</strong>‌：要求模块内所有元素共同完成单一功能（如仅压缩数据），但本系统包含多个独立功能（读取、处理、压缩、传输），不符合‌。</li><li>‌<strong>通信内聚</strong>‌：模块内元素操作同一数据集（如同时读写同一文件），但本系统数据形态随流程变化（原始→处理→压缩→传输），不满足‌。</li><li>‌<strong>过程内聚</strong>‌：强调控制流顺序（如初始化步骤），而非数据流依赖，与本系统数据驱动的流程不符‌。</li></ul></li></ol><p><strong>65.描述静态数据结构的是（）</strong></p><p>A. E-R图</p><p>B.数据流图</p><p>C.状态图</p><p>D.PAD图</p><p>正确答案:A</p><p><strong>解析</strong>‌</p><ol><li>‌<strong>E-R图（实体-关系图）的适用性</strong>‌ <ul><li>‌<strong>功能定义</strong>‌：E-R图（Entity-Relationship Diagram）用于描述系统中‌<strong>静态数据结构</strong>‌，通过实体（Entity）、属性（Attribute）和关系（Relationship）抽象数据模型，不涉及动态行为或流程‌。</li><li>‌<strong>应用场景</strong>‌：常用于数据库设计、数据建模等场景，明确数据间的逻辑结构和关联关系。</li></ul></li><li>‌<strong>排除其他选项</strong>‌ <ul><li>‌<strong>B. 数据流图（DFD）<strong>‌：描述系统中‌</strong>数据流动和处理过程</strong>‌，属于动态分析工具，与静态数据结构无关‌。</li><li>‌<strong>C. 状态图</strong>‌：用于表示对象状态变化（如有限状态机），属于动态行为建模‌。</li><li>‌<strong>D. PAD图</strong>‌：问题分析图（Problem Analysis Diagram），用于描述程序逻辑和控制流程，属于算法设计工具‌。</li></ul></li></ol><p><strong>66.设C(X)表示问题X的复杂度，E(X)表示解决X所需的时间。对于两个问题p1和p2，下列哪项说明 ‌E(p1+p2) &gt; E(p1) + E(p2)‌？</strong> A. 模块化依据 B. 逐步求精依据 C. 抽象依据 D. 信息隐藏和局部化依据</p><p>正确答案:A</p><p><strong>解析</strong>‌</p><ol><li>‌<strong>模块化与复杂度的叠加效应</strong>‌ <ul><li>当两个问题p1和p2组合时，若采用模块化设计，模块间的‌<strong>交互或依赖关系</strong>‌可能引入额外复杂度，导致解决组合问题的总工作量超过单独解决p1和p2的简单相加。</li><li>例如，若p1和p2的模块需要共享数据或协调流程，这种耦合性会增加整体复杂度C(p1+p2)，从而推高E(p1+p2)‌12。</li></ul></li><li>‌<strong>其他选项的排除</strong>‌ <ul><li>‌<strong>B. 逐步求精依据</strong>‌：通过分解问题为更小步骤来降低复杂度，通常减少工作量，与题目现象矛盾‌。</li><li>‌<strong>C. 抽象依据</strong>‌：隐藏细节以简化处理，可能降低复杂度，不符合E(p1+p2) &gt; E(p1)+E(p2)的条件。</li><li>‌<strong>D. 信息隐藏和局部化依据</strong>‌：限制模块间信息暴露，旨在减少耦合性，同样与题目描述的非线性工作量增长无关‌。</li></ul></li></ol><p><strong>67.一个模块内包含的信息对于不需要这些信息的模块来说， 是不可访问的。这属于（）</strong></p><p>A.封装</p><p>B.多态</p><p>C.继承</p><p>D.信息隐藏</p><p>正确答案:D</p><p><strong>解析</strong>‌</p><ol><li>‌<strong>定义匹配</strong>‌ <ul><li>‌<strong>信息隐藏</strong>‌：指在模块设计中，确保一个模块内部的信息（如过程或数据）仅对需要这些信息的其他模块开放，无关模块无法直接访问。</li><li>题目描述“模块内信息对不需要的模块不可访问”完全符合信息隐藏的核心原则‌。</li></ul></li><li>‌<strong>排除其他选项</strong>‌ <ul><li>‌<strong>A. 封装</strong>‌：虽然封装通过限制外部访问实现数据保护，但其更强调将数据与操作绑定（如类的属性和方法），而非直接对应题目中“信息对无关模块不可见”的描述‌。</li><li>‌<strong>B. 多态</strong>‌ / ‌<strong>C. 继承</strong>‌：属于面向对象编程特性，与模块间信息访问控制无关。</li></ul></li></ol><p><strong>68.快速原型模型是研究（ ）时出现的方法</strong></p><p>A.需求分析</p><p>B.详细设计</p><p>C.软件开发全阶段</p><p>D.软件维护</p><p>正确答案:A</p><p>解析</p><ol><li>‌<strong>快速原型模型的核心目标</strong>‌ 快速原型模型的核心是通过快速构建原型来‌<strong>明确用户需求</strong>‌，帮助开发者和用户更直观地沟通需求细节，减少误解‌。其本质是在需求分析阶段验证和迭代需求，而非覆盖整个开发周期。</li><li>‌<strong>与其他阶段的关联性排除</strong>‌ <ul><li>‌<strong>B. 详细设计</strong>‌：详细设计属于开发中期，原型模型并不聚焦于此阶段。</li><li>‌<strong>C. 软件开发全阶段</strong>‌：原型模型主要用于需求阶段，而非贯穿所有阶段。即使某些扩展模型可能涉及迭代，但其核心仍围绕需求展开‌。</li><li>‌<strong>D. 软件维护</strong>‌：维护是后期阶段，与原型模型的产生背景无关‌。</li></ul></li><li>‌<strong>综合验证</strong>‌ 搜索结果中多次强调快速原型模型是在‌<strong>需求阶段/需求分析</strong>‌的方法和技术中产生的‌，与题目选项‌<strong>A. 需求分析</strong>‌完全对应。</li></ol><p><strong>69.UML只能应用于软件系统模型的建立（ ）</strong></p><p>正确答案:错误</p><p>解析</p><ol><li>‌<strong>核心结论</strong>‌ UML（统一建模语言）的应用范围并不仅限于软件系统模型的建立。虽然其主要用途是软件系统建模，但其设计理念和工具特性允许扩展到其他领域，如业务流程建模、硬件系统设计等。</li><li>‌<strong>错误原因</strong>‌ <ul><li>题目表述“只能应用于软件系统模型”属于绝对化描述，与UML的实际通用性不符‌。</li><li>例如，UML中的类图、活动图等可被用于非软件场景（如组织结构分析、工业流程设计）。</li></ul></li></ol><p><strong>70.PDL是总体设计中的描述工具（ ）</strong></p><p>正确答案:错误</p><p>解析</p><ol><li>‌<strong>PDL的核心定位</strong>‌ PDL（Process Design Language，过程设计语言）又称伪码，是一种‌<strong>详细设计阶段</strong>‌的描述工具，主要用于定义模块的算法逻辑和局部数据结构‌。其核心功能是细化模块的实现细节，而非系统级的架构设计。</li><li>‌<strong>总体设计与详细设计的区分</strong>‌ <ul><li>‌**总体设计（概要设计）**‌：关注系统架构、模块划分及模块间关系，使用工具如系统流程图、模块结构图等‌。</li><li>‌**详细设计（过程设计）**‌：聚焦单个模块的内部实现（如算法、数据流程），PDL正是为此阶段设计的工具‌。</li></ul></li></ol><p><strong>71.PAD图不仅定义了五种基本控制结构， 还包括递归调用（ ）</strong></p><p>正确答案:正确</p><p>解析</p><p>‌<strong>PAD图的核心特性</strong>‌ PAD（Problem Analysis Diagram）图在定义‌<strong>五种基本控制结构</strong>‌（如顺序、选择、循环等）的基础上，‌<strong>允许递归调用</strong>‌。这一特性在多个软件工程试题中被明确肯定‌。</p><p><strong>72.Power Designer是一个CASE工具（ ）</strong></p><p>正确答案:正确</p><p>解析</p><ol><li>‌<strong>CASE工具的定义与功能</strong>‌ CASE（Computer-Aided Software Engineering）工具是用于支持软件开发全过程的辅助工具，涵盖需求分析、系统设计、代码生成等环节，通常包含数据建模、流程设计等功能。</li><li>‌<strong>Power Designer的定位</strong>‌ Power Designer作为Sybase公司开发的工具集，提供以下核心功能： <ul><li>‌**数据流程图（DFD）**‌：支持业务流程的图形化建模‌。</li><li>‌**概念数据模型（CDM）与物理数据模型（PDM）**‌：覆盖从逻辑设计到物理数据库实现的完整过程‌。</li><li>‌<strong>数据仓库结构建模</strong>‌：支持复杂数据存储系统的设计与优化‌。</li><li>‌<strong>与其他开发工具的集成</strong>‌：可生成特定DBMS脚本，并与多种开发环境兼容‌。 这些功能完全符合CASE工具的核心特性‌。</li></ul></li></ol><p><strong>73.CMM是用来评定组织的软件开发过程，将组织分为四个等级（）</strong></p><p>正确答案:错误</p><p>解析</p><p><strong>CMM的五个等级划分</strong>‌</p><ol><li>‌**初始级（Level 1 - Initial）**‌ <ul><li>软件开发过程缺乏稳定性，依赖个人能力，项目成功具有偶然性‌。</li></ul></li><li>‌**可重复级（Level 2 - Repeatable）**‌ <ul><li>建立基本项目管理流程（如成本、进度跟踪），能复用过往成功经验‌。</li></ul></li><li>‌**已定义级（Level 3 - Defined）**‌ <ul><li>管理和工程活动标准化、文档化，形成组织级标准软件过程‌。</li></ul></li><li>‌**已管理级（Level 4 - Managed）**‌ <ul><li>通过定量度量（如质量、生产率）对过程和产品进行精细化控制‌。</li></ul></li><li>‌**优化级（Level 5 - Optimizing）**‌ <ul><li>基于数据和新技术持续改进过程，实现缺陷预防和效率提升‌。</li></ul></li></ol><p><strong>74.用例分析方法采用一种‌结构化‌的情景分析方法（）</strong></p><p>正确答案:正确</p><p>解析</p><ol><li><p><strong>答案：正确</strong></p><p><strong>解析：</strong> 用例分析方法（Use Case Analysis）确实属于一种<strong>结构化的情景分析方法</strong>，其正确性可通过以下关键点验证：</p><p>题干“用例分析方法采用一种结构化的情景分析方法”的表述<strong>完全正确</strong>。其“结构化”体现在用例模板的规范性和层次化组织，“情景分析”则聚焦于交互场景的分解与覆盖。这一方法在复杂系统需求工程中具有不可替代的价值。</p></li></ol><p><strong>75.pdl可以被直接编译，它体现了设计的程序的框架或者代表了一个程序流程图（ ）</strong></p><p>正确答案:错误</p><p><strong>76.在验证软件需求的重要性中，完整性，有效性需要在用户的积极参与下进行，为了验证完整性，有效性的正确性，往往需要开发（）</strong></p><p>正确答案:原型系统</p><p><strong>77.软件配置管理是在计算机软件的整个生命周期内管理（）的一组活动</strong></p><p>正确答案:变化</p><p><strong>78.在集成测试中，使用存根程序的是（）</strong></p><p>A. Alpha测试‌</p><p>B. Beta测试‌</p><p>‌C. 自顶向下集成测试</p><p>D. 自底向上集成测试‌</p><p>正确答案:C</p><p>解析：</p><ol><li>‌<strong>自顶向下集成测试</strong>‌的特点： <ul><li>测试从顶层模块开始，逐步向下集成下层模块。</li><li>若下层模块尚未开发完成，需通过‌**存根程序（Stub）**‌模拟其功能，以验证上层模块的接口和逻辑。</li></ul></li><li>‌<strong>其他选项排除</strong>‌： <ul><li>‌<strong>A. Alpha测试</strong>‌ 和 ‌<strong>B. Beta测试</strong>‌：属于确认测试阶段，由用户或客户参与验证需求，与存根程序无关。</li><li>‌<strong>D. 自底向上集成测试</strong>‌：从底层模块开始集成，需使用‌**驱动模块（Driver）**‌调用上层模块，而非存根程序。</li></ul></li></ol><p><strong>79.完整的软件结构通常用（）来表示</strong></p><p>‌‌A. DFD图（数据流图）‌</p><p>B. PAD图（问题分析图）</p><p>‌C. IPO图（输入-处理-输出图）</p><p>D. HIPO图‌（Hierarchy plus Input-Process-Output）</p><p>正确答案:D</p><p>解析：</p><ol><li>‌**HIPO图（Hierarchy plus Input-Process-Output）**‌： <ul><li>是描述软件层次结构和模块间输入/处理/输出关系的专用图表，能够完整呈现软件系统的模块化设计。</li><li>包含层次结构图（描述模块层级）和IPO图（描述模块功能细节），综合体现软件整体架构。</li></ul></li><li>‌<strong>其他选项排除</strong>‌： <ul><li>‌**A. DFD图（数据流图）**‌：用于描述数据在系统中的流动和处理过程，不直接体现模块结构。</li><li>‌**B. PAD图（问题分析图）**‌：主要用于算法逻辑的图形化表达，侧重程序流程而非整体结构‌。</li><li>‌**C. IPO图（输入-处理-输出图）**‌：仅描述单个模块的功能输入/处理/输出，无法完整展示软件层次关系。</li></ul></li></ol><p><strong>80.影响软件维护的决定性因素是（ ）</strong></p><p>A、设计</p><p>B、代码</p><p>C、文档</p><p>D、数据</p><p>正确答案:C</p><p><strong>81.在CMM的5个等级中，描述建立了定量的质量目标，在可度量范围内可运行的是第（ ）级</strong></p><p>A.2</p><p>B.3</p><p>C.4</p><p>D.5</p><p>正确答案:C</p><p><strong>82.结构化分析强调分析对象的（）</strong></p><p>‌A（控制流）</p><p>‌B、数据流</p><p>C、程序</p><p>‌D（指令流）</p><p>正确答案:B</p><p><strong>83.软件项目管理包含成本估算、风险分析、进度管理和（ ）</strong> A、风险评估 B、资金管理 C、人员管理 D、过程管理</p><p>正确答案:C</p><p><strong>84.‌结构化设计中采用模块化方法的主要出发点是（）</strong></p><p>增加内聚性（A）</p><p>减少耦合度（B）</p><p>提高有效性（C）</p><p>D. 降低复杂度</p><p>正确答案:D</p><p><strong>85.测试⽤例的设计需同时明确输入输出数据和 ‌‌（），才能有效验证系统功能的正确性。</strong></p><p>正确答案:预期输出结果</p><p><strong>86.确认测试（验收测试）通常使⽤ （）。</strong></p><p>正确答案:黑盒测试‌</p><p><strong>87.影响编码质量的因素包括编程语言、（）和编程规范</strong>。</p><p>正确答案:编程风格</p><p><strong>88.白盒测试要发现的问题与程序内部结构有关，与程序功能无关（）。</strong></p><p>正确答案:正确</p><p>​</p><p><strong>89.保证软件质量的方法有数学方法、（）（）</strong></p><p>正确答案:‌测试‌、‌代码审查‌</p><p><strong>90.软件生命周期由（ ）软件开发和运行维护三个时期组成</strong></p><p>正确答案：软件定义</p><p><strong>91.( ) 是最准确、 最有效、 最强大的需求分析技术</strong></p><p>正确答案：原型法</p><p><strong>92.当两个模块有—部分程序代码重叠意味着两个模块间发生了（）</strong></p><p>正确答案：内容耦合</p><p><strong>93.影响软件可维护性的决定因素是（）</strong></p><p>正确答案：文档质量</p><p><strong>94.软件质量保证措施主要有技术复审软件测试和（）， 其中技术复审包括走查和（）等具体方法</strong></p><p>正确答案：过程管理、审查</p><p><strong>95.功能点技术使用（ ）为单位度量软件规模</strong></p><p>正确答案：功能点</p><p><strong>96.UML用例之间存在两种形式的关系， 在描述—般行为的变化时通常采用（）关系，在两 个或多个用例中出现重复描述时通常采用（ ）关系。</strong></p><p>正确答案：扩展、包含</p><p><strong>97.在单元测试中， 使用（ ）作为指南。</strong></p><p>正确答案：详细设计说明书</p>',513),g=[n];function l(i,A){return o(),t("div",null,g)}const C=p(s,[["render",l],["__file","易错题总结.html.vue"]]);export{C as default};
