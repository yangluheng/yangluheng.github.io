import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as t}from"./app-b8c6f513.js";const e={},p=t(`<h2 id="_1-虚拟内存管理" tabindex="-1"><a class="header-anchor" href="#_1-虚拟内存管理" aria-hidden="true">#</a> 1.虚拟内存管理</h2><h3 id="_1-1局部性原理" tabindex="-1"><a class="header-anchor" href="#_1-1局部性原理" aria-hidden="true">#</a> 1.1局部性原理</h3><p>在了解这部分知识之前，我要先告诉大家一个常见的<strong>局部性原理</strong>：</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>程序局部性原理表现为：<strong>时间局部性和空间局部性</strong>。时间局部性是指如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某块数据被访问，则不久之后该数据可能再次被访问。空间局部性是指一旦程序访问了某个存储单元，则不久之后，其附近的存储单元也将被访问。</p></div><p>说白了就是<strong>一个变量在程序运行过程中，如果被引用过一次，那后续很有可能会再被引用到；一个变量被访问到过后，这个变量所在的位置附近的位置很有可能在程序后续运行中被访问到</strong>。</p><p>下面我们通过一段代码来看看局部性原理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">=</span> sum <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的这段代码来看，就是一个很简单的数组元素求和，这里我们主要看 sum 和 array 两个变量，我们可以看到 sum 在每次循环中都会用到，另外它只是一个简单变量，所以我们可以看到，sum 是符合我们上面提到的时间局部性，再访问一次后还会被继续访问到，但是它不存在我们所说的空间局部性了。</p><p>相反的，array 数组中的每个元素只访问一次，另外数组底层的存储是连续的，所以 array 变量符合我们上面提到的空间局部性，但是不符合时间局部性。</p><h3 id="_2-2为什么需要虚拟内存" tabindex="-1"><a class="header-anchor" href="#_2-2为什么需要虚拟内存" aria-hidden="true">#</a> 2.2为什么需要虚拟内存？</h3><figure><img src="https://cdn.xiaolincoding.com//mysql/other/769ed056eefb1e3d6419472bff87d036.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>`,11),o=[p];function i(c,r){return a(),s("div",null,o)}const d=n(e,[["render",i],["__file","内存管理.html.vue"]]);export{d as default};
