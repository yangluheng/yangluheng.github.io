const it="ENTRIES",R="KEYS",q="VALUES",_="";class S{constructor(t,s){const n=t._tree,i=Array.from(n.keys());this.set=t,this._type=s,this._path=i.length>0?[{node:n,keys:i}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=x(this._path);if(x(s)===_)return{done:!1,value:this.result()};const n=t.get(x(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=x(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>x(t)).filter(t=>t!==_).join("")}value(){return x(this._path).node.get(_)}result(){switch(this._type){case q:return this.value();case R:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const x=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const i=t.length+1,u=i+s,o=new Uint8Array(u*i).fill(s+1);for(let r=0;r<i;++r)o[r]=r;for(let r=1;r<u;++r)o[r*i]=r;return P(e,t,s,n,o,1,i,""),n},P=(e,t,s,n,i,u,o,r)=>{const a=u*o;t:for(const c of e.keys())if(c===_){const d=i[a-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const m=c[l],F=o*d,f=F-o;let h=i[F];const g=Math.max(0,d-s-1),A=Math.min(o-1,d+s);for(let C=g;C<A;++C){const B=m!==t[C],b=i[f+C]+ +B,z=i[f+C+1]+1,D=i[F+C]+1,W=i[F+C+1]=Math.min(b,z,D);W<h&&(h=W)}if(h>s)continue t}P(e.get(c),t,s,n,i,d,o,r+c)}};let N=class v{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[i,u]=V(n);for(const o of i.keys())if(o!==_&&o.startsWith(u)){const r=new Map;return r.set(o.slice(u.length),i.get(o)),new v(r,t)}}return new v(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new S(this,it)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=j(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=j(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new S(this,R)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,L(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=L(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=L(this._tree,t);let i=n.get(_);return i===void 0&&n.set(_,i=s()),i}values(){return new S(this,q)}[Symbol.iterator](){return this.entries()}static from(t){const s=new v;for(const[n,i]of t)s.set(n,i);return s}static fromObject(t){return v.from(Object.entries(t))}};const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},j=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return j(e.get(s),t.slice(s.length))},L=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const o=Math.min(s-n,u.length);let r=1;for(;r<o&&t[n+r]===u[r];)++r;const a=e.get(u);if(r===u.length)e=a;else{const c=new Map;c.set(u.slice(r),a),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const i=new Map;return e.set(t.slice(n),i),i}return e},ot=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)G(n);else if(s.size===1){const[i,u]=s.entries().next().value;J(n,i,u)}}},G=e=>{if(e.length===0)return;const[t,s]=V(e);if(t.delete(s),t.size===0)G(e.slice(0,-1));else if(t.size===1){const[n,i]=t.entries().next().value;n!==_&&J(e.slice(0,-1),n,i)}},J=(e,t,s)=>{if(e.length===0)return;const[n,i]=V(e);n.set(i+t,s),n.delete(i)},V=e=>e[e.length-1],rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,T="or",U="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},H=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},ht=({score:e},{score:t})=>t-e,dt=()=>new Map,O=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},K=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,at={[T]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:i,terms:u,match:o}=t.get(s);n.score=n.score+i,n.match=Object.assign(n.match,o),H(n.terms,u)}}return e},[U]:(e,t)=>{const s=new Map;for(const n of t.keys()){const i=e.get(n);if(i==null)continue;const{score:u,terms:o,match:r}=t.get(n);H(i.terms,o),s.set(n,{score:i.score+u,terms:i.terms,match:Object.assign(i.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},ft=(e,t,s,n,i,u)=>{const{k:o,b:r,d:a}=u;return Math.log(1+(s-t+.5)/(t+.5))*(a+e*(o+1)/(e+o*(1-r+r*n/i)))},Ft=e=>(t,s,n)=>{const i=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:i,prefix:u}},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},X={combineWith:T,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:U,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={..._t,...Y};class At{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...X,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new N,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const i={};for(const[u,o]of n)i[u]=Object.fromEntries(o);t.push([s,i])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const Q=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},Z=(e,t,s,n)=>{for(const i of Object.keys(e._fieldIds))if(e._fieldIds[i]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${i}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},Ct=(e,t,s,n)=>{if(!e._index.has(n)){Z(e,s,t,n);return}const i=e._index.fetch(n,dt),u=i.get(t);u==null||u.get(s)==null?Z(e,s,t,n):u.get(s)<=1?u.size<=1?i.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},tt=(e,t=T)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(at[s])||new Map},$=(e,t,s,n,i,u,o,r,a=new Map)=>{if(i==null)return a;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],m=i.get(l);if(m==null)continue;let F=m.size;const f=e._avgFieldLength[l];for(const h of m.keys()){if(!e._documentIds.has(h)){Ct(e,l,h,s),F-=1;continue}const g=o?o(e._documentIds.get(h),s,e._storedFields.get(h)):1;if(!g)continue;const A=m.get(h),C=e._fieldLength.get(h)[l],B=ft(A,F,e._documentCount,C,f,r),b=n*d*g*B,z=a.get(h);if(z){z.score+=b,lt(z.terms,t);const D=K(z.match,s);D?D.push(c):z.match[s]=[c]}else a.set(h,{score:b,terms:[t],match:{[s]:[c]}})}}return a},zt=(e,t,s)=>{const n={...e._options.searchOptions,...s},i=(n.fields||e._options.fields).reduce((h,g)=>({...h,[g]:K(n.boost,g)||1}),{}),{boostDocument:u,weights:o,maxFuzzy:r,bm25:a}=n,{fuzzy:c,prefix:d}={...X.weights,...o},l=e._index.get(t.term),m=$(e,t.term,t.term,1,l,i,u,a);let F,f;if(t.prefix&&(F=e._index.atPrefix(t.term)),t.fuzzy){const h=t.fuzzy===!0?.2:t.fuzzy,g=h<1?Math.min(r,Math.round(t.term.length*h)):h;g&&(f=e._index.fuzzyGet(t.term,g))}if(F)for(const[h,g]of F){const A=h.length-t.term.length;if(!A)continue;f==null||f.delete(h);const C=d*h.length/(h.length+.3*A);$(e,t.term,h,C,g,i,u,a,m)}if(f)for(const h of f.keys()){const[g,A]=f.get(h);if(!A)continue;const C=c*h.length/(h.length+A);$(e,t.term,h,C,g,i,u,a,m)}return m},et=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(m=>et(e,m,d));return tt(l,d.combineWith)}const{tokenize:n,processTerm:i,searchOptions:u}=e._options,o={tokenize:n,processTerm:i,...u,...s},{tokenize:r,processTerm:a}=o,c=r(t).flatMap(d=>a(d)).filter(d=>!!d).map(Ft(o)).map(d=>zt(e,d,o));return tt(c,o.combineWith)},xt=(e,t,s={})=>{const n=et(e,t,s),i=[];for(const[u,{score:o,terms:r,match:a}]of n){const c=r.length,d={id:e._documentIds.get(u),score:o*c,terms:Object.keys(a),match:a};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&i.push(d)}return i.sort(ht),i},Et=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:i,fieldLength:u,averageFieldLength:o,storedFields:r,dirtCount:a,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new At(d);l._documentCount=t,l._nextId=s,l._documentIds=O(n),l._idToShortId=new Map,l._fieldIds=i,l._fieldLength=O(u),l._avgFieldLength=o,l._storedFields=O(r),l._dirtCount=a||0,l._index=new N;for(const[m,F]of l._documentIds)l._idToShortId.set(F,m);for(const[m,F]of e){const f=new Map;for(const h of Object.keys(F)){let g=F[h];c===1&&(g=g.ds),f.set(parseInt(h,10),O(g))}l._index.set(m,f)}return l},st=Object.entries,wt=Object.fromEntries,E=100,w=20,M=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),i=[];let u=0,o=0;const r=(c,d=!1)=>{let l="";o===0?l=c.length>w?`… ${c.slice(-w)}`:c:d?l=c.length+o>E?`${c.slice(0,E-o)}… `:c:l=c.length>w?`${c.slice(0,w)} … ${c.slice(-w)}`:c,l&&i.push(l),o+=l.length,d||(i.push(["mark",t]),o+=t.length,o>=E&&i.push(" …"))};let a=s.indexOf(n,u);if(a===-1)return null;for(;a>=0;){const c=a+n.length;if(r(e.slice(u,a)),u=c,o>E)break;a=s.indexOf(n,u)}return o<E&&r(e.slice(u),!0),i};var p=(e=>(e.heading="h",e.anchor="a",e.text="t",e.customFields="c",e))(p||{}),k=(e=>(e.title="t",e.heading="h",e.text="p",e.custom="c",e))(k||{}),y=(e=>(e.type="t",e.key="k",e.anchor="a",e.header="h",e.index="i",e.display="d",e))(y||{});const nt=/[\u4e00-\u9fa5]/g,kt=(e,t,s={})=>{const n={};return xt(t,e,{fuzzy:.2,prefix:!0,boost:{[p.heading]:2,[p.text]:1,[p.customFields]:4},processTerm:i=>{const u=i.match(nt)||[],o=i.replace(nt,"").toLowerCase();return o?[o,...u]:[...u]},...s}).forEach(i=>{const{id:u,terms:o,score:r}=i,a=u.includes("/"),c=!a&&u.includes("#"),d=u.includes("@"),[l,m]=u.split(/[#@]/),{contents:F}=n[l]??={title:"",contents:[]};if(c)F.push([{[y.type]:k.heading,[y.key]:l,[y.anchor]:i[p.anchor],[y.display]:o.map(f=>M(i[p.heading],f)).filter(f=>f!==null)},r]);else if(a){const[f]=m.split("/"),{[p.heading]:h="",[p.anchor]:g=""}=Q(t,`${l}#${f}`)||{};F.push([{[y.type]:k.text,[y.key]:l,[y.header]:h,[y.anchor]:g,[y.display]:o.map(A=>M(i[p.text],A)).filter(A=>A!==null)},r])}else d?F.push([{[y.type]:k.custom,[y.key]:l,[y.index]:m,[y.display]:o.map(f=>i[p.customFields].map(h=>M(h,f))).flat().filter(f=>f!==null)},r]):F.push([{[y.type]:k.title,[y.key]:l,[y.display]:o.map(f=>M(i[p.heading],f)).filter(f=>f!==null)},r])}),st(n).sort(([,i],[,u])=>u.contents.reduce((o,[,r])=>o+r,0)-i.contents.reduce((o,[,r])=>o+r,0)).map(([i,{title:u,contents:o}])=>{if(!u){const r=Q(t,i);r&&(u=r[p.heading])}return{title:u,contents:o.map(([r])=>r)}})},vt=wt(st(JSON.parse("{\"/\":{\"documentCount\":5601,\"nextId\":5601,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#0/0\",\"2\":\"v-2e3eac9e\",\"3\":\"v-1473bf53\",\"4\":\"v-1473bf53#1\",\"5\":\"v-1473bf53#1/0\",\"6\":\"v-1473bf53#1/1\",\"7\":\"v-1473bf53#1/2\",\"8\":\"v-1473bf53#1/3\",\"9\":\"v-4e65ec78\",\"10\":\"v-4e65ec78#0/0\",\"11\":\"v-4e65ec78#0/1\",\"12\":\"v-4e65ec78#0/2\",\"13\":\"v-4e65ec78#0/3\",\"14\":\"v-4e65ec78#0/4\",\"15\":\"v-4e65ec78#0/5\",\"16\":\"v-4e65ec78#0/6\",\"17\":\"v-4e65ec78#0/7\",\"18\":\"v-4e65ec78#0/8\",\"19\":\"v-4e65ec78#0/9\",\"20\":\"v-4e65ec78#0/10\",\"21\":\"v-4e65ec78#0/11\",\"22\":\"v-4e65ec78#0/12\",\"23\":\"v-c151bf32\",\"24\":\"v-c151bf32#0/0\",\"25\":\"v-c151bf32#0/1\",\"26\":\"v-c151bf32#0/2\",\"27\":\"v-438ffe52\",\"28\":\"v-438ffe52#0/0\",\"29\":\"v-438ffe52#0/1\",\"30\":\"v-438ffe52#1\",\"31\":\"v-438ffe52#1/0\",\"32\":\"v-438ffe52#2\",\"33\":\"v-438ffe52#2/0\",\"34\":\"v-438ffe52#2/1\",\"35\":\"v-438ffe52#2/2\",\"36\":\"v-438ffe52#3\",\"37\":\"v-438ffe52#3/0\",\"38\":\"v-438ffe52#4\",\"39\":\"v-438ffe52#4/0\",\"40\":\"v-438ffe52#4/1\",\"41\":\"v-438ffe52#5\",\"42\":\"v-438ffe52#5/0\",\"43\":\"v-438ffe52#6\",\"44\":\"v-438ffe52#6/0\",\"45\":\"v-438ffe52#6/1\",\"46\":\"v-438ffe52#6/2\",\"47\":\"v-438ffe52#6/3\",\"48\":\"v-438ffe52#6/4\",\"49\":\"v-438ffe52#6/5\",\"50\":\"v-438ffe52#6/6\",\"51\":\"v-438ffe52#6/7\",\"52\":\"v-438ffe52#6/8\",\"53\":\"v-438ffe52#6/9\",\"54\":\"v-438ffe52#6/10\",\"55\":\"v-438ffe52#6/11\",\"56\":\"v-438ffe52#6/12\",\"57\":\"v-438ffe52#7\",\"58\":\"v-438ffe52#7/0\",\"59\":\"v-438ffe52#8\",\"60\":\"v-438ffe52#8/0\",\"61\":\"v-438ffe52#8/1\",\"62\":\"v-438ffe52#9\",\"63\":\"v-438ffe52#9/0\",\"64\":\"v-438ffe52#9/1\",\"65\":\"v-438ffe52#9/2\",\"66\":\"v-438ffe52#10\",\"67\":\"v-438ffe52#10/0\",\"68\":\"v-438ffe52#10/1\",\"69\":\"v-438ffe52#11\",\"70\":\"v-438ffe52#11/0\",\"71\":\"v-438ffe52#11/1\",\"72\":\"v-438ffe52#12\",\"73\":\"v-438ffe52#12/0\",\"74\":\"v-438ffe52#12/1\",\"75\":\"v-438ffe52#13\",\"76\":\"v-438ffe52#13/0\",\"77\":\"v-438ffe52#13/1\",\"78\":\"v-438ffe52#13/2\",\"79\":\"v-438ffe52#14\",\"80\":\"v-438ffe52#14/0\",\"81\":\"v-438ffe52#14/1\",\"82\":\"v-438ffe52#15\",\"83\":\"v-438ffe52#15/0\",\"84\":\"v-438ffe52#15/1\",\"85\":\"v-438ffe52#16\",\"86\":\"v-438ffe52#16/0\",\"87\":\"v-438ffe52#17\",\"88\":\"v-438ffe52#17/0\",\"89\":\"v-438ffe52#18\",\"90\":\"v-438ffe52#18/0\",\"91\":\"v-438ffe52#19\",\"92\":\"v-438ffe52#19/0\",\"93\":\"v-438ffe52#20\",\"94\":\"v-438ffe52#20/0\",\"95\":\"v-438ffe52#20/1\",\"96\":\"v-438ffe52#21\",\"97\":\"v-438ffe52#21/0\",\"98\":\"v-438ffe52#21/1\",\"99\":\"v-438ffe52#21/2\",\"100\":\"v-438ffe52#21/3\",\"101\":\"v-438ffe52#21/4\",\"102\":\"v-438ffe52#22\",\"103\":\"v-438ffe52#22/0\",\"104\":\"v-438ffe52#23\",\"105\":\"v-438ffe52#23/0\",\"106\":\"v-438ffe52#23/1\",\"107\":\"v-438ffe52#24\",\"108\":\"v-438ffe52#24/0\",\"109\":\"v-438ffe52#25\",\"110\":\"v-438ffe52#25/0\",\"111\":\"v-438ffe52#26\",\"112\":\"v-438ffe52#26/0\",\"113\":\"v-438ffe52#26/1\",\"114\":\"v-6e19edb7\",\"115\":\"v-6e19edb7#0/0\",\"116\":\"v-6e19edb7#1\",\"117\":\"v-6e19edb7#1/0\",\"118\":\"v-6e19edb7#1/1\",\"119\":\"v-6e19edb7#1/2\",\"120\":\"v-6e19edb7#1/3\",\"121\":\"v-6e19edb7#1/4\",\"122\":\"v-6e19edb7#2\",\"123\":\"v-6e19edb7#2/0\",\"124\":\"v-6e19edb7#2/1\",\"125\":\"v-6e19edb7#2/2\",\"126\":\"v-6e19edb7#2/3\",\"127\":\"v-6e19edb7#2/4\",\"128\":\"v-6e19edb7#2/5\",\"129\":\"v-6e19edb7#3\",\"130\":\"v-6e19edb7#3/0\",\"131\":\"v-6e19edb7#3/1\",\"132\":\"v-6e19edb7#3/2\",\"133\":\"v-6e19edb7#3/3\",\"134\":\"v-6e19edb7#3/4\",\"135\":\"v-6e19edb7#3/5\",\"136\":\"v-6e19edb7#3/6\",\"137\":\"v-6e19edb7#3/7\",\"138\":\"v-6e19edb7#3/8\",\"139\":\"v-6e19edb7#3/9\",\"140\":\"v-6e19edb7#3/10\",\"141\":\"v-fffb8e28\",\"142\":\"v-fffb8e28#1\",\"143\":\"v-fffb8e28#2\",\"144\":\"v-fffb8e28#2/0\",\"145\":\"v-fffb8e28#2/1\",\"146\":\"v-fffb8e28#3\",\"147\":\"v-fffb8e28#3/0\",\"148\":\"v-fffb8e28#3/1\",\"149\":\"v-151af027\",\"150\":\"v-151af027#0/0\",\"151\":\"v-151af027#0/1\",\"152\":\"v-151af027#0/2\",\"153\":\"v-2d0ad528\",\"154\":\"v-2d0ad528#0/0\",\"155\":\"v-2d0ad528#0/1\",\"156\":\"v-2d0ad528#0/2\",\"157\":\"v-269ae70f\",\"158\":\"v-5d5c2d30\",\"159\":\"v-5d5c2d30#1\",\"160\":\"v-5d5c2d30#1/0\",\"161\":\"v-5d5c2d30#2\",\"162\":\"v-5d5c2d30#2/0\",\"163\":\"v-5d5c2d30#2/1\",\"164\":\"v-177e1f06\",\"165\":\"v-177e1f06#0/0\",\"166\":\"v-5d5821d6\",\"167\":\"v-5d5821d6#1\",\"168\":\"v-5d5821d6#1/0\",\"169\":\"v-5d5821d6#2\",\"170\":\"v-5d5821d6#2/0\",\"171\":\"v-5d5821d6#2/1\",\"172\":\"v-0b6fc5f8\",\"173\":\"v-0b6fc5f8#0/0\",\"174\":\"v-a4e90f26\",\"175\":\"v-a4e90f26#1\",\"176\":\"v-a4e90f26#2\",\"177\":\"v-a4e90f26#3\",\"178\":\"v-a4e90f26#3/0\",\"179\":\"v-a4e90f26#3/1\",\"180\":\"v-a4e90f26#3/2\",\"181\":\"v-a4e90f26#3/3\",\"182\":\"v-a4e90f26#3/4\",\"183\":\"v-a4e90f26#4\",\"184\":\"v-a4e90f26#5\",\"185\":\"v-a4e90f26#6\",\"186\":\"v-a4e90f26#7\",\"187\":\"v-a4e90f26#8\",\"188\":\"v-a4e90f26#9\",\"189\":\"v-a4e90f26#10\",\"190\":\"v-a4e90f26#10/0\",\"191\":\"v-a4e90f26#10/1\",\"192\":\"v-a4e90f26#10/2\",\"193\":\"v-a4e90f26#11\",\"194\":\"v-a4e90f26#11/0\",\"195\":\"v-a4e90f26#11/1\",\"196\":\"v-a4e90f26#11/2\",\"197\":\"v-a4e90f26#12\",\"198\":\"v-a4e90f26#13\",\"199\":\"v-a4e90f26#13/0\",\"200\":\"v-a4e90f26#13/1\",\"201\":\"v-a4e90f26#13/2\",\"202\":\"v-a4e90f26#13/3\",\"203\":\"v-a4e90f26#14\",\"204\":\"v-a4e90f26#14/0\",\"205\":\"v-a4e90f26#14/1\",\"206\":\"v-a4e90f26#15\",\"207\":\"v-a4e90f26#15/0\",\"208\":\"v-a4e90f26#15/1\",\"209\":\"v-a4e90f26#15/2\",\"210\":\"v-a4e90f26#15/3\",\"211\":\"v-a4e90f26#15/4\",\"212\":\"v-a4e90f26#15/5\",\"213\":\"v-a4e90f26#15/6\",\"214\":\"v-a4e90f26#15/7\",\"215\":\"v-a4e90f26#15/8\",\"216\":\"v-a4e90f26#15/9\",\"217\":\"v-a4e90f26#15/10\",\"218\":\"v-a4e90f26#15/11\",\"219\":\"v-a4e90f26#15/12\",\"220\":\"v-a4e90f26#15/13\",\"221\":\"v-a4e90f26#16\",\"222\":\"v-a4e90f26#16/0\",\"223\":\"v-a4e90f26#16/1\",\"224\":\"v-a4e90f26#16/2\",\"225\":\"v-a4e90f26#16/3\",\"226\":\"v-a4e90f26#16/4\",\"227\":\"v-a4e90f26#16/5\",\"228\":\"v-a4e90f26#16/6\",\"229\":\"v-a4e90f26#16/7\",\"230\":\"v-a4e90f26#16/8\",\"231\":\"v-a4e90f26#16/9\",\"232\":\"v-a4e90f26#16/10\",\"233\":\"v-a4e90f26#16/11\",\"234\":\"v-a4e90f26#16/12\",\"235\":\"v-a4e90f26#16/13\",\"236\":\"v-a4e90f26#16/14\",\"237\":\"v-ce4d5100\",\"238\":\"v-ce4d5100#1\",\"239\":\"v-ce4d5100#2\",\"240\":\"v-ce4d5100#2/0\",\"241\":\"v-ce4d5100#2/1\",\"242\":\"v-ce4d5100#2/2\",\"243\":\"v-ce4d5100#2/3\",\"244\":\"v-ce4d5100#2/4\",\"245\":\"v-ce4d5100#2/5\",\"246\":\"v-ce4d5100#2/6\",\"247\":\"v-ce4d5100#2/7\",\"248\":\"v-ce4d5100#3\",\"249\":\"v-ce4d5100#3/8\",\"250\":\"v-ce4d5100#3/9\",\"251\":\"v-ce4d5100#3/10\",\"252\":\"v-ce4d5100#3/11\",\"253\":\"v-ce4d5100#3/12\",\"254\":\"v-ce4d5100#4\",\"255\":\"v-ce4d5100#4/0\",\"256\":\"v-ce4d5100#4/1\",\"257\":\"v-ce4d5100#4/2\",\"258\":\"v-ce4d5100#4/3\",\"259\":\"v-ce4d5100#4/4\",\"260\":\"v-ce4d5100#4/5\",\"261\":\"v-ce4d5100#5\",\"262\":\"v-ce4d5100#5/6\",\"263\":\"v-ce4d5100#5/7\",\"264\":\"v-ce4d5100#5/8\",\"265\":\"v-ce4d5100#5/9\",\"266\":\"v-ce4d5100#5/10\",\"267\":\"v-ce4d5100#6\",\"268\":\"v-ce4d5100#6/0\",\"269\":\"v-ce4d5100#6/1\",\"270\":\"v-ce4d5100#6/2\",\"271\":\"v-ce4d5100#6/3\",\"272\":\"v-ce4d5100#7\",\"273\":\"v-ce4d5100#7/4\",\"274\":\"v-ce4d5100#7/5\",\"275\":\"v-ce4d5100#7/6\",\"276\":\"v-ce4d5100#7/7\",\"277\":\"v-ce4d5100#7/8\",\"278\":\"v-ce4d5100#7/9\",\"279\":\"v-ce4d5100#7/10\",\"280\":\"v-ce4d5100#7/11\",\"281\":\"v-ce4d5100#7/12\",\"282\":\"v-ce4d5100#7/13\",\"283\":\"v-ce4d5100#8\",\"284\":\"v-ce4d5100#9\",\"285\":\"v-ce4d5100#9/0\",\"286\":\"v-ce4d5100#9/1\",\"287\":\"v-ce4d5100#9/2\",\"288\":\"v-ce4d5100#9/3\",\"289\":\"v-ce4d5100#9/4\",\"290\":\"v-ce4d5100#9/5\",\"291\":\"v-ce4d5100#9/6\",\"292\":\"v-ce4d5100#9/7\",\"293\":\"v-ce4d5100#9/8\",\"294\":\"v-ce4d5100#9/9\",\"295\":\"v-ce4d5100#9/10\",\"296\":\"v-ce4d5100#9/11\",\"297\":\"v-ce4d5100#9/12\",\"298\":\"v-ce4d5100#9/13\",\"299\":\"v-ce4d5100#9/14\",\"300\":\"v-ce4d5100#9/15\",\"301\":\"v-ce4d5100#9/16\",\"302\":\"v-ce4d5100#9/17\",\"303\":\"v-ce4d5100#10\",\"304\":\"v-ce4d5100#10/0\",\"305\":\"v-ce4d5100#10/1\",\"306\":\"v-ce4d5100#10/2\",\"307\":\"v-ce4d5100#10/3\",\"308\":\"v-ce4d5100#10/4\",\"309\":\"v-ce4d5100#10/5\",\"310\":\"v-ce4d5100#10/6\",\"311\":\"v-ce4d5100#11\",\"312\":\"v-ce4d5100#11/0\",\"313\":\"v-ce4d5100#11/1\",\"314\":\"v-ce4d5100#11/2\",\"315\":\"v-ce4d5100#11/3\",\"316\":\"v-ce4d5100#11/4\",\"317\":\"v-ce4d5100#11/5\",\"318\":\"v-ce4d5100#11/6\",\"319\":\"v-ce4d5100#12\",\"320\":\"v-ce4d5100#12/0\",\"321\":\"v-ce4d5100#12/1\",\"322\":\"v-ce4d5100#12/2\",\"323\":\"v-ce4d5100#12/3\",\"324\":\"v-ce4d5100#12/4\",\"325\":\"v-ce4d5100#12/5\",\"326\":\"v-ce4d5100#12/6\",\"327\":\"v-ce4d5100#12/7\",\"328\":\"v-ce4d5100#12/8\",\"329\":\"v-32ab3f8a\",\"330\":\"v-32ab3f8a#1\",\"331\":\"v-32ab3f8a#2\",\"332\":\"v-32ab3f8a#3\",\"333\":\"v-32ab3f8a#4\",\"334\":\"v-32ab3f8a#4/0\",\"335\":\"v-32ab3f8a#4/1\",\"336\":\"v-32ab3f8a#4/2\",\"337\":\"v-32ab3f8a#5\",\"338\":\"v-32ab3f8a#5/0\",\"339\":\"v-32ab3f8a#5/1\",\"340\":\"v-32ab3f8a#5/2\",\"341\":\"v-32ab3f8a#5/3\",\"342\":\"v-32ab3f8a#5/4\",\"343\":\"v-32ab3f8a#6\",\"344\":\"v-32ab3f8a#6/5\",\"345\":\"v-32ab3f8a#6/6\",\"346\":\"v-32ab3f8a#6/7\",\"347\":\"v-32ab3f8a#6/8\",\"348\":\"v-32ab3f8a#6/9\",\"349\":\"v-32ab3f8a#6/10\",\"350\":\"v-32ab3f8a#7\",\"351\":\"v-32ab3f8a#7/11\",\"352\":\"v-32ab3f8a#7/12\",\"353\":\"v-32ab3f8a#7/13\",\"354\":\"v-32ab3f8a#7/14\",\"355\":\"v-32ab3f8a#7/15\",\"356\":\"v-32ab3f8a#7/16\",\"357\":\"v-32ab3f8a#7/17\",\"358\":\"v-32ab3f8a#7/18\",\"359\":\"v-32ab3f8a#7/19\",\"360\":\"v-32ab3f8a#7/20\",\"361\":\"v-32ab3f8a#7/21\",\"362\":\"v-32ab3f8a#7/22\",\"363\":\"v-32ab3f8a#7/23\",\"364\":\"v-32ab3f8a#7/24\",\"365\":\"v-32ab3f8a#7/25\",\"366\":\"v-32ab3f8a#7/26\",\"367\":\"v-32ab3f8a#8\",\"368\":\"v-32ab3f8a#8/0\",\"369\":\"v-32ab3f8a#8/1\",\"370\":\"v-32ab3f8a#8/2\",\"371\":\"v-32ab3f8a#9\",\"372\":\"v-32ab3f8a#9/0\",\"373\":\"v-32ab3f8a#9/1\",\"374\":\"v-32ab3f8a#9/2\",\"375\":\"v-32ab3f8a#9/3\",\"376\":\"v-32ab3f8a#9/4\",\"377\":\"v-32ab3f8a#9/5\",\"378\":\"v-32ab3f8a#9/6\",\"379\":\"v-32ab3f8a#9/7\",\"380\":\"v-32ab3f8a#9/8\",\"381\":\"v-32ab3f8a#9/9\",\"382\":\"v-32ab3f8a#9/10\",\"383\":\"v-32ab3f8a#9/11\",\"384\":\"v-32ab3f8a#9/12\",\"385\":\"v-32ab3f8a#9/13\",\"386\":\"v-32ab3f8a#10\",\"387\":\"v-32ab3f8a#10/0\",\"388\":\"v-32ab3f8a#10/1\",\"389\":\"v-32ab3f8a#11\",\"390\":\"v-32ab3f8a#11/0\",\"391\":\"v-32ab3f8a#11/1\",\"392\":\"v-32ab3f8a#11/2\",\"393\":\"v-32ab3f8a#11/3\",\"394\":\"v-32ab3f8a#11/4\",\"395\":\"v-32ab3f8a#11/5\",\"396\":\"v-32ab3f8a#11/6\",\"397\":\"v-32ab3f8a#11/7\",\"398\":\"v-32ab3f8a#12\",\"399\":\"v-32ab3f8a#12/8\",\"400\":\"v-32ab3f8a#12/9\",\"401\":\"v-32ab3f8a#12/10\",\"402\":\"v-32ab3f8a#12/11\",\"403\":\"v-32ab3f8a#12/12\",\"404\":\"v-32ab3f8a#12/13\",\"405\":\"v-32ab3f8a#12/14\",\"406\":\"v-32ab3f8a#12/15\",\"407\":\"v-32ab3f8a#12/16\",\"408\":\"v-32ab3f8a#12/17\",\"409\":\"v-32ab3f8a#12/18\",\"410\":\"v-32ab3f8a#12/19\",\"411\":\"v-32ab3f8a#12/20\",\"412\":\"v-32ab3f8a#12/21\",\"413\":\"v-32ab3f8a#13\",\"414\":\"v-32ab3f8a#14\",\"415\":\"v-32ab3f8a#15\",\"416\":\"v-32ab3f8a#16\",\"417\":\"v-32ab3f8a#16/0\",\"418\":\"v-32ab3f8a#17\",\"419\":\"v-32ab3f8a#17/0\",\"420\":\"v-32ab3f8a#18\",\"421\":\"v-32ab3f8a#18/0\",\"422\":\"v-32ab3f8a#18/1\",\"423\":\"v-32ab3f8a#18/2\",\"424\":\"v-32ab3f8a#18/3\",\"425\":\"v-32ab3f8a#18/4\",\"426\":\"v-32ab3f8a#18/5\",\"427\":\"v-32ab3f8a#18/6\",\"428\":\"v-32ab3f8a#18/7\",\"429\":\"v-32ab3f8a#18/8\",\"430\":\"v-32ab3f8a#19\",\"431\":\"v-32ab3f8a#19/0\",\"432\":\"v-32ab3f8a#19/1\",\"433\":\"v-32ab3f8a#19/2\",\"434\":\"v-32ab3f8a#19/3\",\"435\":\"v-32ab3f8a#19/4\",\"436\":\"v-32ab3f8a#19/5\",\"437\":\"v-32ab3f8a#19/6\",\"438\":\"v-32ab3f8a#19/7\",\"439\":\"v-32ab3f8a#20\",\"440\":\"v-1ee00f36\",\"441\":\"v-1ee00f36#1\",\"442\":\"v-1ee00f36#1/0\",\"443\":\"v-1ee00f36#1/1\",\"444\":\"v-1ee00f36#1/2\",\"445\":\"v-1ee00f36#2\",\"446\":\"v-1ee00f36#2/0\",\"447\":\"v-1ee00f36#2/1\",\"448\":\"v-1ee00f36#3\",\"449\":\"v-1ee00f36#3/0\",\"450\":\"v-1ee00f36#4\",\"451\":\"v-1ee00f36#4/0\",\"452\":\"v-1ee00f36#4/1\",\"453\":\"v-1ee00f36#4/2\",\"454\":\"v-1ee00f36#4/3\",\"455\":\"v-1ee00f36#4/4\",\"456\":\"v-1ee00f36#5\",\"457\":\"v-1ee00f36#5/0\",\"458\":\"v-1ee00f36#5/1\",\"459\":\"v-1ee00f36#5/2\",\"460\":\"v-1ee00f36#5/3\",\"461\":\"v-1ee00f36#5/4\",\"462\":\"v-1ee00f36#5/5\",\"463\":\"v-947319a4\",\"464\":\"v-947319a4#0/0\",\"465\":\"v-947319a4#0/1\",\"466\":\"v-947319a4#0/2\",\"467\":\"v-947319a4#0/3\",\"468\":\"v-947319a4#1\",\"469\":\"v-947319a4#1/4\",\"470\":\"v-947319a4#1/5\",\"471\":\"v-947319a4#1/6\",\"472\":\"v-947319a4#1/7\",\"473\":\"v-947319a4#1/8\",\"474\":\"v-947319a4#2\",\"475\":\"v-947319a4#2/0\",\"476\":\"v-947319a4#2/1\",\"477\":\"v-947319a4#2/2\",\"478\":\"v-947319a4#2/3\",\"479\":\"v-947319a4#2/4\",\"480\":\"v-947319a4#2/5\",\"481\":\"v-947319a4#2/6\",\"482\":\"v-947319a4#2/7\",\"483\":\"v-947319a4#3\",\"484\":\"v-947319a4#3/0\",\"485\":\"v-947319a4#3/1\",\"486\":\"v-947319a4#3/2\",\"487\":\"v-947319a4#3/3\",\"488\":\"v-947319a4#3/4\",\"489\":\"v-947319a4#3/5\",\"490\":\"v-947319a4#4\",\"491\":\"v-947319a4#4/0\",\"492\":\"v-947319a4#4/1\",\"493\":\"v-947319a4#4/2\",\"494\":\"v-947319a4#4/3\",\"495\":\"v-947319a4#4/4\",\"496\":\"v-1ef5aaba\",\"497\":\"v-1ef5aaba#1\",\"498\":\"v-1ef5aaba#1/0\",\"499\":\"v-1ef5aaba#1/1\",\"500\":\"v-1ef5aaba#1/2\",\"501\":\"v-1ef5aaba#1/3\",\"502\":\"v-1ef5aaba#1/4\",\"503\":\"v-1ef5aaba#1/5\",\"504\":\"v-1ef5aaba#1/6\",\"505\":\"v-1ef5aaba#1/7\",\"506\":\"v-1ef5aaba#1/8\",\"507\":\"v-1ef5aaba#2\",\"508\":\"v-1ef5aaba#2/0\",\"509\":\"v-1ef5aaba#2/1\",\"510\":\"v-1ef5aaba#2/2\",\"511\":\"v-1ef5aaba#2/3\",\"512\":\"v-1ef5aaba#2/4\",\"513\":\"v-1ef5aaba#2/5\",\"514\":\"v-1ef5aaba#2/6\",\"515\":\"v-1ef5aaba#2/7\",\"516\":\"v-1ef5aaba#2/8\",\"517\":\"v-1ef5aaba#2/9\",\"518\":\"v-1ef5aaba#2/10\",\"519\":\"v-1ef5aaba#2/11\",\"520\":\"v-1ef5aaba#2/12\",\"521\":\"v-1ef5aaba#2/13\",\"522\":\"v-1ef5aaba#2/14\",\"523\":\"v-1ef5aaba#2/15\",\"524\":\"v-1ef5aaba#2/16\",\"525\":\"v-1ef5aaba#2/17\",\"526\":\"v-1ef5aaba#3\",\"527\":\"v-1ef5aaba#3/0\",\"528\":\"v-1ef5aaba#3/1\",\"529\":\"v-1ef5aaba#3/2\",\"530\":\"v-1ef5aaba#3/3\",\"531\":\"v-1ef5aaba#3/4\",\"532\":\"v-1ef5aaba#4\",\"533\":\"v-1ef5aaba#5\",\"534\":\"v-1ef5aaba#5/5\",\"535\":\"v-1ef5aaba#5/6\",\"536\":\"v-1ef5aaba#5/7\",\"537\":\"v-1ef5aaba#5/8\",\"538\":\"v-1ef5aaba#5/9\",\"539\":\"v-1ef5aaba#5/10\",\"540\":\"v-1ef5aaba#5/11\",\"541\":\"v-1ef5aaba#5/12\",\"542\":\"v-1ef5aaba#5/13\",\"543\":\"v-1ef5aaba#6\",\"544\":\"v-1ef5aaba#6/0\",\"545\":\"v-1ef5aaba#6/1\",\"546\":\"v-1ef5aaba#6/2\",\"547\":\"v-1ef5aaba#6/3\",\"548\":\"v-1ef5aaba#6/4\",\"549\":\"v-1ef5aaba#6/5\",\"550\":\"v-1ef5aaba#6/6\",\"551\":\"v-1ef5aaba#6/7\",\"552\":\"v-1ef5aaba#6/8\",\"553\":\"v-1ef5aaba#7\",\"554\":\"v-1ef5aaba#7/0\",\"555\":\"v-1ef5aaba#7/1\",\"556\":\"v-1ef5aaba#7/2\",\"557\":\"v-1ef5aaba#7/3\",\"558\":\"v-1ef5aaba#7/4\",\"559\":\"v-1ef5aaba#7/5\",\"560\":\"v-1ef5aaba#7/6\",\"561\":\"v-1ef5aaba#7/7\",\"562\":\"v-1ef5aaba#7/8\",\"563\":\"v-1ef5aaba#7/9\",\"564\":\"v-1ef5aaba#7/10\",\"565\":\"v-1ef5aaba#7/11\",\"566\":\"v-1ef5aaba#7/12\",\"567\":\"v-1ef5aaba#7/13\",\"568\":\"v-1ef5aaba#7/14\",\"569\":\"v-1ef5aaba#7/15\",\"570\":\"v-1ef5aaba#7/16\",\"571\":\"v-1ef5aaba#7/17\",\"572\":\"v-5cfa3ff0\",\"573\":\"v-5cfa3ff0#1\",\"574\":\"v-5cfa3ff0#2\",\"575\":\"v-5cfa3ff0#2/0\",\"576\":\"v-5cfa3ff0#2/1\",\"577\":\"v-5cfa3ff0#2/2\",\"578\":\"v-5cfa3ff0#3\",\"579\":\"v-5cfa3ff0#3/0\",\"580\":\"v-5cfa3ff0#3/1\",\"581\":\"v-5cfa3ff0#3/2\",\"582\":\"v-5cfa3ff0#3/3\",\"583\":\"v-5cfa3ff0#4\",\"584\":\"v-5cfa3ff0#5\",\"585\":\"v-5cfa3ff0#5/0\",\"586\":\"v-5cfa3ff0#5/1\",\"587\":\"v-5cfa3ff0#5/2\",\"588\":\"v-5cfa3ff0#6\",\"589\":\"v-5cfa3ff0#6/0\",\"590\":\"v-5cfa3ff0#6/1\",\"591\":\"v-5cfa3ff0#7\",\"592\":\"v-5cfa3ff0#7/0\",\"593\":\"v-5cfa3ff0#8\",\"594\":\"v-5cfa3ff0#9\",\"595\":\"v-5cfa3ff0#10\",\"596\":\"v-5cfa3ff0#10/0\",\"597\":\"v-5cfa3ff0#11\",\"598\":\"v-5cfa3ff0#11/0\",\"599\":\"v-5cfa3ff0#11/1\",\"600\":\"v-5cfa3ff0#12\",\"601\":\"v-5cfa3ff0#12/0\",\"602\":\"v-5cfa3ff0#12/1\",\"603\":\"v-5cfa3ff0#13\",\"604\":\"v-5cfa3ff0#13/0\",\"605\":\"v-5cfa3ff0#13/1\",\"606\":\"v-5cfa3ff0#13/2\",\"607\":\"v-5cfa3ff0#13/3\",\"608\":\"v-5cfa3ff0#13/4\",\"609\":\"v-5cfa3ff0#14\",\"610\":\"v-5cfa3ff0#14/0\",\"611\":\"v-5cfa3ff0#14/1\",\"612\":\"v-5cfa3ff0#14/2\",\"613\":\"v-5cfa3ff0#14/3\",\"614\":\"v-5cfa3ff0#14/4\",\"615\":\"v-5cfa3ff0#14/5\",\"616\":\"v-5cfa3ff0#15\",\"617\":\"v-5cfa3ff0#15/0\",\"618\":\"v-5cfa3ff0#15/1\",\"619\":\"v-5cfa3ff0#15/2\",\"620\":\"v-5cfa3ff0#15/3\",\"621\":\"v-5cfa3ff0#15/4\",\"622\":\"v-5cfa3ff0#15/5\",\"623\":\"v-5cfa3ff0#15/6\",\"624\":\"v-5cfa3ff0#16\",\"625\":\"v-5cfa3ff0#16/0\",\"626\":\"v-5cfa3ff0#16/1\",\"627\":\"v-2867de92\",\"628\":\"v-2867de92#1\",\"629\":\"v-2867de92#1/0\",\"630\":\"v-2867de92#1/1\",\"631\":\"v-2867de92#2\",\"632\":\"v-2867de92#2/0\",\"633\":\"v-2867de92#3\",\"634\":\"v-2867de92#3/0\",\"635\":\"v-2867de92#4\",\"636\":\"v-2867de92#4/0\",\"637\":\"v-2867de92#5\",\"638\":\"v-2867de92#5/0\",\"639\":\"v-2867de92#6\",\"640\":\"v-2867de92#6/0\",\"641\":\"v-2867de92#6/1\",\"642\":\"v-2867de92#7\",\"643\":\"v-2867de92#7/0\",\"644\":\"v-2867de92#7/1\",\"645\":\"v-2867de92#7/2\",\"646\":\"v-2867de92#7/3\",\"647\":\"v-2867de92#7/4\",\"648\":\"v-2867de92#7/5\",\"649\":\"v-2867de92#7/6\",\"650\":\"v-2867de92#7/7\",\"651\":\"v-2867de92#7/8\",\"652\":\"v-2867de92#7/9\",\"653\":\"v-2867de92#7/10\",\"654\":\"v-2867de92#7/11\",\"655\":\"v-2867de92#7/12\",\"656\":\"v-2867de92#7/13\",\"657\":\"v-2867de92#7/14\",\"658\":\"v-2867de92#7/15\",\"659\":\"v-2867de92#8\",\"660\":\"v-2867de92#8/0\",\"661\":\"v-2867de92#8/1\",\"662\":\"v-2867de92#8/2\",\"663\":\"v-1cef86d5\",\"664\":\"v-1cef86d5#1\",\"665\":\"v-1cef86d5#1/0\",\"666\":\"v-1cef86d5#1/1\",\"667\":\"v-1cef86d5#1/2\",\"668\":\"v-1cef86d5#1/3\",\"669\":\"v-1cef86d5#1/4\",\"670\":\"v-1cef86d5#2\",\"671\":\"v-1cef86d5#2/0\",\"672\":\"v-1cef86d5#2/1\",\"673\":\"v-1cef86d5#2/2\",\"674\":\"v-1cef86d5#2/3\",\"675\":\"v-1cef86d5#2/4\",\"676\":\"v-1cef86d5#2/5\",\"677\":\"v-1cef86d5#2/6\",\"678\":\"v-1cef86d5#2/7\",\"679\":\"v-1cef86d5#2/8\",\"680\":\"v-1cef86d5#2/9\",\"681\":\"v-1cef86d5#2/10\",\"682\":\"v-1cef86d5#2/11\",\"683\":\"v-1cef86d5#2/12\",\"684\":\"v-1cef86d5#3\",\"685\":\"v-1cef86d5#3/0\",\"686\":\"v-1cef86d5#3/1\",\"687\":\"v-1cef86d5#3/2\",\"688\":\"v-1cef86d5#3/3\",\"689\":\"v-1cef86d5#3/4\",\"690\":\"v-1cef86d5#3/5\",\"691\":\"v-1cef86d5#3/6\",\"692\":\"v-1cef86d5#3/7\",\"693\":\"v-1cef86d5#3/8\",\"694\":\"v-1cef86d5#3/9\",\"695\":\"v-1cef86d5#3/10\",\"696\":\"v-1cef86d5#4\",\"697\":\"v-1cef86d5#4/0\",\"698\":\"v-1cef86d5#4/1\",\"699\":\"v-1cef86d5#4/2\",\"700\":\"v-1cef86d5#4/3\",\"701\":\"v-1cef86d5#4/4\",\"702\":\"v-1cef86d5#4/5\",\"703\":\"v-1cef86d5#4/6\",\"704\":\"v-1cef86d5#4/7\",\"705\":\"v-1cef86d5#4/8\",\"706\":\"v-1cef86d5#4/9\",\"707\":\"v-1cef86d5#4/10\",\"708\":\"v-1cef86d5#4/11\",\"709\":\"v-1cef86d5#4/12\",\"710\":\"v-1cef86d5#5\",\"711\":\"v-1cef86d5#5/0\",\"712\":\"v-1cef86d5#5/1\",\"713\":\"v-1cef86d5#6\",\"714\":\"v-1cef86d5#7\",\"715\":\"v-1cef86d5#7/0\",\"716\":\"v-1cef86d5#7/1\",\"717\":\"v-1cef86d5#7/2\",\"718\":\"v-1cef86d5#8\",\"719\":\"v-1cef86d5#8/0\",\"720\":\"v-1cef86d5#8/1\",\"721\":\"v-1cef86d5#8/2\",\"722\":\"v-1cef86d5#8/3\",\"723\":\"v-1cef86d5#8/4\",\"724\":\"v-1cef86d5#8/5\",\"725\":\"v-1cef86d5#8/6\",\"726\":\"v-1cef86d5#8/7\",\"727\":\"v-1cef86d5#8/8\",\"728\":\"v-1cef86d5#8/9\",\"729\":\"v-1cef86d5#8/10\",\"730\":\"v-1cef86d5#8/11\",\"731\":\"v-1cef86d5#8/12\",\"732\":\"v-1cef86d5#8/13\",\"733\":\"v-1cef86d5#8/14\",\"734\":\"v-1cef86d5#8/15\",\"735\":\"v-1cef86d5#8/16\",\"736\":\"v-1cef86d5#8/17\",\"737\":\"v-1cef86d5#8/18\",\"738\":\"v-1cef86d5#8/19\",\"739\":\"v-1cef86d5#8/20\",\"740\":\"v-1cef86d5#8/21\",\"741\":\"v-1cef86d5#8/22\",\"742\":\"v-1cef86d5#8/23\",\"743\":\"v-1cef86d5#8/24\",\"744\":\"v-1cef86d5#8/25\",\"745\":\"v-1cef86d5#8/26\",\"746\":\"v-1cef86d5#8/27\",\"747\":\"v-1cef86d5#8/28\",\"748\":\"v-1cef86d5#8/29\",\"749\":\"v-1cef86d5#8/30\",\"750\":\"v-1cef86d5#8/31\",\"751\":\"v-1cef86d5#8/32\",\"752\":\"v-1cef86d5#8/33\",\"753\":\"v-1cef86d5#8/34\",\"754\":\"v-1cef86d5#8/35\",\"755\":\"v-1cef86d5#8/36\",\"756\":\"v-1cef86d5#8/37\",\"757\":\"v-1cef86d5#8/38\",\"758\":\"v-1cef86d5#8/39\",\"759\":\"v-1cef86d5#8/40\",\"760\":\"v-1cef86d5#8/41\",\"761\":\"v-1cef86d5#8/42\",\"762\":\"v-1cef86d5#8/43\",\"763\":\"v-1cef86d5#8/44\",\"764\":\"v-1cef86d5#8/45\",\"765\":\"v-1cef86d5#8/46\",\"766\":\"v-1cef86d5#8/47\",\"767\":\"v-1cef86d5#8/48\",\"768\":\"v-1cef86d5#8/49\",\"769\":\"v-1cef86d5#8/50\",\"770\":\"v-1cef86d5#8/51\",\"771\":\"v-1cef86d5#8/52\",\"772\":\"v-1cef86d5#8/53\",\"773\":\"v-1cef86d5#8/54\",\"774\":\"v-1cef86d5#8/55\",\"775\":\"v-1cef86d5#8/56\",\"776\":\"v-1cef86d5#8/57\",\"777\":\"v-1cef86d5#8/58\",\"778\":\"v-1cef86d5#8/59\",\"779\":\"v-1cef86d5#8/60\",\"780\":\"v-1cef86d5#8/61\",\"781\":\"v-1cef86d5#8/62\",\"782\":\"v-1cef86d5#8/63\",\"783\":\"v-1cef86d5#8/64\",\"784\":\"v-1cef86d5#8/65\",\"785\":\"v-1cef86d5#8/66\",\"786\":\"v-1cef86d5#8/67\",\"787\":\"v-1cef86d5#8/68\",\"788\":\"v-1cef86d5#8/69\",\"789\":\"v-1cef86d5#8/70\",\"790\":\"v-1cef86d5#8/71\",\"791\":\"v-1cef86d5#9\",\"792\":\"v-1cef86d5#9/0\",\"793\":\"v-1cef86d5#9/1\",\"794\":\"v-1cef86d5#9/2\",\"795\":\"v-1cef86d5#10\",\"796\":\"v-1cef86d5#10/0\",\"797\":\"v-1cef86d5#10/1\",\"798\":\"v-1cef86d5#10/2\",\"799\":\"v-1cef86d5#10/3\",\"800\":\"v-1cef86d5#10/4\",\"801\":\"v-1cef86d5#11\",\"802\":\"v-1cef86d5#11/0\",\"803\":\"v-fa628ec0\",\"804\":\"v-fa628ec0#1\",\"805\":\"v-fa628ec0#2\",\"806\":\"v-fa628ec0#2/0\",\"807\":\"v-fa628ec0#2/1\",\"808\":\"v-fa628ec0#2/2\",\"809\":\"v-fa628ec0#2/3\",\"810\":\"v-fa628ec0#2/4\",\"811\":\"v-fa628ec0#2/5\",\"812\":\"v-fa628ec0#3\",\"813\":\"v-fa628ec0#4\",\"814\":\"v-fa628ec0#4/0\",\"815\":\"v-fa628ec0#4/1\",\"816\":\"v-fa628ec0#4/2\",\"817\":\"v-fa628ec0#4/3\",\"818\":\"v-fa628ec0#4/4\",\"819\":\"v-fa628ec0#4/5\",\"820\":\"v-fa628ec0#4/6\",\"821\":\"v-fa628ec0#4/7\",\"822\":\"v-fa628ec0#4/8\",\"823\":\"v-fa628ec0#4/9\",\"824\":\"v-fa628ec0#4/10\",\"825\":\"v-fa628ec0#4/11\",\"826\":\"v-fa628ec0#4/12\",\"827\":\"v-fa628ec0#4/13\",\"828\":\"v-fa628ec0#4/14\",\"829\":\"v-fa628ec0#5\",\"830\":\"v-fa628ec0#5/0\",\"831\":\"v-fa628ec0#5/1\",\"832\":\"v-fa628ec0#5/2\",\"833\":\"v-fa628ec0#5/3\",\"834\":\"v-fa628ec0#5/4\",\"835\":\"v-fa628ec0#5/5\",\"836\":\"v-fa628ec0#5/6\",\"837\":\"v-fa628ec0#6\",\"838\":\"v-fa628ec0#7\",\"839\":\"v-fa628ec0#7/0\",\"840\":\"v-fa628ec0#7/1\",\"841\":\"v-fa628ec0#7/2\",\"842\":\"v-fa628ec0#7/3\",\"843\":\"v-fa628ec0#7/4\",\"844\":\"v-fa628ec0#7/5\",\"845\":\"v-fa628ec0#7/6\",\"846\":\"v-fa628ec0#7/7\",\"847\":\"v-fa628ec0#7/8\",\"848\":\"v-fa628ec0#7/9\",\"849\":\"v-fa628ec0#7/10\",\"850\":\"v-fa628ec0#8\",\"851\":\"v-fa628ec0#8/0\",\"852\":\"v-fa628ec0#8/1\",\"853\":\"v-fa628ec0#8/2\",\"854\":\"v-fa628ec0#8/3\",\"855\":\"v-fa628ec0#8/4\",\"856\":\"v-fa628ec0#8/5\",\"857\":\"v-fa628ec0#9\",\"858\":\"v-fa628ec0#9/0\",\"859\":\"v-fa628ec0#9/1\",\"860\":\"v-fa628ec0#9/2\",\"861\":\"v-fa628ec0#9/3\",\"862\":\"v-fa628ec0#9/4\",\"863\":\"v-fa628ec0#9/5\",\"864\":\"v-fa628ec0#9/6\",\"865\":\"v-fa628ec0#9/7\",\"866\":\"v-fa628ec0#9/8\",\"867\":\"v-fa628ec0#9/9\",\"868\":\"v-fa628ec0#9/10\",\"869\":\"v-fa628ec0#10\",\"870\":\"v-fa628ec0#10/0\",\"871\":\"v-fa628ec0#10/1\",\"872\":\"v-fa628ec0#10/2\",\"873\":\"v-fa628ec0#10/3\",\"874\":\"v-fa628ec0#10/4\",\"875\":\"v-fa628ec0#10/5\",\"876\":\"v-fa628ec0#10/6\",\"877\":\"v-fa628ec0#10/7\",\"878\":\"v-fa628ec0#10/8\",\"879\":\"v-fa628ec0#10/9\",\"880\":\"v-fa628ec0#10/10\",\"881\":\"v-fa628ec0#10/11\",\"882\":\"v-fa628ec0#10/12\",\"883\":\"v-fa628ec0#10/13\",\"884\":\"v-fa628ec0#10/14\",\"885\":\"v-fa628ec0#10/15\",\"886\":\"v-fa628ec0#10/16\",\"887\":\"v-fa628ec0#10/17\",\"888\":\"v-fa628ec0#10/18\",\"889\":\"v-fa628ec0#10/19\",\"890\":\"v-fa628ec0#10/20\",\"891\":\"v-fa628ec0#10/21\",\"892\":\"v-fa628ec0#10/22\",\"893\":\"v-fa628ec0#10/23\",\"894\":\"v-fa628ec0#10/24\",\"895\":\"v-fa628ec0#10/25\",\"896\":\"v-fa628ec0#10/26\",\"897\":\"v-fa628ec0#10/27\",\"898\":\"v-fa628ec0#10/28\",\"899\":\"v-fa628ec0#11\",\"900\":\"v-fa628ec0#11/0\",\"901\":\"v-fa628ec0#11/1\",\"902\":\"v-fa628ec0#11/2\",\"903\":\"v-fa628ec0#11/3\",\"904\":\"v-fa628ec0#11/4\",\"905\":\"v-fa628ec0#11/5\",\"906\":\"v-fa628ec0#11/6\",\"907\":\"v-fa628ec0#11/7\",\"908\":\"v-fa628ec0#11/8\",\"909\":\"v-fa628ec0#11/9\",\"910\":\"v-fa628ec0#12\",\"911\":\"v-fa628ec0#12/0\",\"912\":\"v-fa628ec0#12/1\",\"913\":\"v-fa628ec0#12/2\",\"914\":\"v-fa628ec0#13\",\"915\":\"v-fa628ec0#13/0\",\"916\":\"v-fa628ec0#13/1\",\"917\":\"v-fa628ec0#13/2\",\"918\":\"v-fa628ec0#13/3\",\"919\":\"v-fa628ec0#13/4\",\"920\":\"v-fa628ec0#13/5\",\"921\":\"v-fa628ec0#14\",\"922\":\"v-fa628ec0#14/6\",\"923\":\"v-fa628ec0#14/7\",\"924\":\"v-fa628ec0#14/8\",\"925\":\"v-fa628ec0#14/9\",\"926\":\"v-fa628ec0#14/10\",\"927\":\"v-fa628ec0#14/11\",\"928\":\"v-fa628ec0#15\",\"929\":\"v-fa628ec0#15/0\",\"930\":\"v-fa628ec0#15/1\",\"931\":\"v-fa628ec0#16\",\"932\":\"v-fa628ec0#17\",\"933\":\"v-fa628ec0#17/2\",\"934\":\"v-fa628ec0#17/3\",\"935\":\"v-fa628ec0#17/4\",\"936\":\"v-fa628ec0#17/5\",\"937\":\"v-fa628ec0#18\",\"938\":\"v-fa628ec0#18/0\",\"939\":\"v-fa628ec0#18/1\",\"940\":\"v-fa628ec0#18/2\",\"941\":\"v-fa628ec0#19\",\"942\":\"v-fa628ec0#19/0\",\"943\":\"v-fa628ec0#19/1\",\"944\":\"v-fa628ec0#19/2\",\"945\":\"v-fa628ec0#19/3\",\"946\":\"v-fa628ec0#19/4\",\"947\":\"v-fa628ec0#19/5\",\"948\":\"v-fa628ec0#19/6\",\"949\":\"v-fa628ec0#19/7\",\"950\":\"v-fa628ec0#19/8\",\"951\":\"v-fa628ec0#19/9\",\"952\":\"v-fa628ec0#19/10\",\"953\":\"v-fa628ec0#19/11\",\"954\":\"v-fa628ec0#20\",\"955\":\"v-fa628ec0#20/0\",\"956\":\"v-fa628ec0#20/1\",\"957\":\"v-fa628ec0#20/2\",\"958\":\"v-fa628ec0#20/3\",\"959\":\"v-fa628ec0#20/4\",\"960\":\"v-fa628ec0#20/5\",\"961\":\"v-fa628ec0#20/6\",\"962\":\"v-fa628ec0#20/7\",\"963\":\"v-fa628ec0#21\",\"964\":\"v-fa628ec0#22\",\"965\":\"v-fa628ec0#22/0\",\"966\":\"v-fa628ec0#22/1\",\"967\":\"v-fa628ec0#22/2\",\"968\":\"v-fa628ec0#22/3\",\"969\":\"v-fa628ec0#22/4\",\"970\":\"v-fa628ec0#22/5\",\"971\":\"v-fa628ec0#23\",\"972\":\"v-fa628ec0#23/0\",\"973\":\"v-fa628ec0#23/1\",\"974\":\"v-fa628ec0#23/2\",\"975\":\"v-fa628ec0#23/3\",\"976\":\"v-fa628ec0#23/4\",\"977\":\"v-fa628ec0#23/5\",\"978\":\"v-fa628ec0#23/6\",\"979\":\"v-fa628ec0#23/7\",\"980\":\"v-fa628ec0#24\",\"981\":\"v-fa628ec0#25\",\"982\":\"v-fa628ec0#25/0\",\"983\":\"v-fa628ec0#26\",\"984\":\"v-fa628ec0#26/0\",\"985\":\"v-fa628ec0#26/1\",\"986\":\"v-fa628ec0#26/2\",\"987\":\"v-fa628ec0#26/3\",\"988\":\"v-fa628ec0#26/4\",\"989\":\"v-fa628ec0#26/5\",\"990\":\"v-fa628ec0#27\",\"991\":\"v-fa628ec0#27/0\",\"992\":\"v-fa628ec0#27/1\",\"993\":\"v-fa628ec0#28\",\"994\":\"v-fa628ec0#28/0\",\"995\":\"v-fa628ec0#28/1\",\"996\":\"v-fa628ec0#28/2\",\"997\":\"v-fa628ec0#28/3\",\"998\":\"v-fa628ec0#28/4\",\"999\":\"v-fa628ec0#28/5\",\"1000\":\"v-fa628ec0#28/6\",\"1001\":\"v-fa628ec0#28/7\",\"1002\":\"v-fa628ec0#28/8\",\"1003\":\"v-fa628ec0#28/9\",\"1004\":\"v-240dba63\",\"1005\":\"v-240dba63#1\",\"1006\":\"v-240dba63#1/0\",\"1007\":\"v-240dba63#1/1\",\"1008\":\"v-240dba63#1/2\",\"1009\":\"v-240dba63#1/3\",\"1010\":\"v-240dba63#1/4\",\"1011\":\"v-240dba63#1/5\",\"1012\":\"v-240dba63#1/6\",\"1013\":\"v-240dba63#1/7\",\"1014\":\"v-240dba63#2\",\"1015\":\"v-240dba63#3\",\"1016\":\"v-240dba63#3/0\",\"1017\":\"v-240dba63#3/1\",\"1018\":\"v-240dba63#3/2\",\"1019\":\"v-240dba63#3/3\",\"1020\":\"v-240dba63#3/4\",\"1021\":\"v-240dba63#3/5\",\"1022\":\"v-240dba63#3/6\",\"1023\":\"v-240dba63#3/7\",\"1024\":\"v-240dba63#3/8\",\"1025\":\"v-240dba63#4\",\"1026\":\"v-240dba63#4/9\",\"1027\":\"v-240dba63#4/10\",\"1028\":\"v-240dba63#4/11\",\"1029\":\"v-240dba63#4/12\",\"1030\":\"v-240dba63#4/13\",\"1031\":\"v-240dba63#4/14\",\"1032\":\"v-240dba63#4/15\",\"1033\":\"v-240dba63#4/16\",\"1034\":\"v-240dba63#4/17\",\"1035\":\"v-240dba63#4/18\",\"1036\":\"v-240dba63#4/19\",\"1037\":\"v-240dba63#4/20\",\"1038\":\"v-240dba63#4/21\",\"1039\":\"v-240dba63#4/22\",\"1040\":\"v-240dba63#4/23\",\"1041\":\"v-240dba63#4/24\",\"1042\":\"v-240dba63#4/25\",\"1043\":\"v-240dba63#4/26\",\"1044\":\"v-240dba63#4/27\",\"1045\":\"v-240dba63#4/28\",\"1046\":\"v-240dba63#4/29\",\"1047\":\"v-240dba63#4/30\",\"1048\":\"v-240dba63#4/31\",\"1049\":\"v-240dba63#4/32\",\"1050\":\"v-240dba63#4/33\",\"1051\":\"v-240dba63#4/34\",\"1052\":\"v-240dba63#4/35\",\"1053\":\"v-240dba63#4/36\",\"1054\":\"v-240dba63#4/37\",\"1055\":\"v-240dba63#4/38\",\"1056\":\"v-240dba63#4/39\",\"1057\":\"v-240dba63#5\",\"1058\":\"v-240dba63#6\",\"1059\":\"v-240dba63#6/0\",\"1060\":\"v-240dba63#7\",\"1061\":\"v-240dba63#7/0\",\"1062\":\"v-240dba63#7/1\",\"1063\":\"v-240dba63#7/2\",\"1064\":\"v-240dba63#7/3\",\"1065\":\"v-240dba63#7/4\",\"1066\":\"v-240dba63#8\",\"1067\":\"v-240dba63#9\",\"1068\":\"v-240dba63#9/0\",\"1069\":\"v-240dba63#10\",\"1070\":\"v-240dba63#10/0\",\"1071\":\"v-240dba63#10/1\",\"1072\":\"v-240dba63#10/2\",\"1073\":\"v-240dba63#10/3\",\"1074\":\"v-240dba63#11\",\"1075\":\"v-240dba63#11/0\",\"1076\":\"v-240dba63#11/1\",\"1077\":\"v-240dba63#11/2\",\"1078\":\"v-240dba63#11/3\",\"1079\":\"v-240dba63#11/4\",\"1080\":\"v-350830c1\",\"1081\":\"v-350830c1#1\",\"1082\":\"v-350830c1#2\",\"1083\":\"v-350830c1#3\",\"1084\":\"v-350830c1#4\",\"1085\":\"v-350830c1#5\",\"1086\":\"v-350830c1#5/0\",\"1087\":\"v-6a58427d\",\"1088\":\"v-6a58427d#1\",\"1089\":\"v-6a58427d#2\",\"1090\":\"v-6a58427d#2/0\",\"1091\":\"v-6a58427d#2/1\",\"1092\":\"v-6a58427d#2/2\",\"1093\":\"v-6a58427d#2/3\",\"1094\":\"v-6a58427d#2/4\",\"1095\":\"v-6a58427d#2/5\",\"1096\":\"v-6a58427d#2/6\",\"1097\":\"v-6a58427d#2/7\",\"1098\":\"v-6a58427d#3\",\"1099\":\"v-6a58427d#3/0\",\"1100\":\"v-3641dca3\",\"1101\":\"v-3641dca3#1\",\"1102\":\"v-3641dca3#2\",\"1103\":\"v-3641dca3#3\",\"1104\":\"v-3641dca3#3/0\",\"1105\":\"v-3641dca3#3/1\",\"1106\":\"v-3641dca3#3/2\",\"1107\":\"v-3641dca3#3/3\",\"1108\":\"v-3641dca3#3/4\",\"1109\":\"v-3641dca3#3/5\",\"1110\":\"v-3641dca3#4\",\"1111\":\"v-3641dca3#5\",\"1112\":\"v-3641dca3#5/0\",\"1113\":\"v-3641dca3#5/1\",\"1114\":\"v-3641dca3#5/2\",\"1115\":\"v-3641dca3#5/3\",\"1116\":\"v-3641dca3#5/4\",\"1117\":\"v-3641dca3#5/5\",\"1118\":\"v-3641dca3#5/6\",\"1119\":\"v-3641dca3#5/7\",\"1120\":\"v-3641dca3#5/8\",\"1121\":\"v-3641dca3#5/9\",\"1122\":\"v-3641dca3#5/10\",\"1123\":\"v-3641dca3#5/11\",\"1124\":\"v-3641dca3#6\",\"1125\":\"v-3641dca3#6/0\",\"1126\":\"v-3641dca3#6/1\",\"1127\":\"v-3641dca3#6/2\",\"1128\":\"v-3641dca3#6/3\",\"1129\":\"v-3641dca3#6/4\",\"1130\":\"v-3641dca3#6/5\",\"1131\":\"v-3641dca3#6/6\",\"1132\":\"v-3641dca3#7\",\"1133\":\"v-3641dca3#8\",\"1134\":\"v-3641dca3#8/0\",\"1135\":\"v-3641dca3#8/1\",\"1136\":\"v-3641dca3#8/2\",\"1137\":\"v-3641dca3#8/3\",\"1138\":\"v-3641dca3#9\",\"1139\":\"v-3641dca3#9/0\",\"1140\":\"v-3641dca3#9/1\",\"1141\":\"v-3641dca3#9/2\",\"1142\":\"v-3641dca3#9/3\",\"1143\":\"v-3641dca3#9/4\",\"1144\":\"v-3641dca3#9/5\",\"1145\":\"v-3641dca3#9/6\",\"1146\":\"v-3641dca3#9/7\",\"1147\":\"v-3641dca3#9/8\",\"1148\":\"v-3641dca3#9/9\",\"1149\":\"v-3641dca3#9/10\",\"1150\":\"v-3641dca3#9/11\",\"1151\":\"v-3641dca3#9/12\",\"1152\":\"v-3641dca3#9/13\",\"1153\":\"v-3641dca3#9/14\",\"1154\":\"v-3641dca3#9/15\",\"1155\":\"v-3641dca3#9/16\",\"1156\":\"v-3641dca3#9/17\",\"1157\":\"v-3641dca3#9/18\",\"1158\":\"v-3641dca3#9/19\",\"1159\":\"v-3641dca3#10\",\"1160\":\"v-3641dca3#10/0\",\"1161\":\"v-3641dca3#10/1\",\"1162\":\"v-3641dca3#10/2\",\"1163\":\"v-3641dca3#10/3\",\"1164\":\"v-3641dca3#11\",\"1165\":\"v-3641dca3#11/0\",\"1166\":\"v-3641dca3#11/1\",\"1167\":\"v-3641dca3#11/2\",\"1168\":\"v-3641dca3#11/3\",\"1169\":\"v-3641dca3#11/4\",\"1170\":\"v-3641dca3#11/5\",\"1171\":\"v-3641dca3#11/6\",\"1172\":\"v-3641dca3#11/7\",\"1173\":\"v-3641dca3#11/8\",\"1174\":\"v-3641dca3#11/9\",\"1175\":\"v-3641dca3#12\",\"1176\":\"v-3641dca3#12/0\",\"1177\":\"v-3641dca3#12/1\",\"1178\":\"v-3641dca3#12/2\",\"1179\":\"v-3641dca3#12/3\",\"1180\":\"v-3641dca3#12/4\",\"1181\":\"v-3641dca3#12/5\",\"1182\":\"v-3641dca3#12/6\",\"1183\":\"v-3641dca3#12/7\",\"1184\":\"v-3641dca3#12/8\",\"1185\":\"v-3641dca3#12/9\",\"1186\":\"v-3641dca3#12/10\",\"1187\":\"v-3641dca3#12/11\",\"1188\":\"v-3641dca3#12/12\",\"1189\":\"v-3641dca3#12/13\",\"1190\":\"v-3641dca3#12/14\",\"1191\":\"v-3641dca3#13\",\"1192\":\"v-3641dca3#13/0\",\"1193\":\"v-3641dca3#13/1\",\"1194\":\"v-3641dca3#13/2\",\"1195\":\"v-3641dca3#14\",\"1196\":\"v-3641dca3#14/0\",\"1197\":\"v-3641dca3#14/1\",\"1198\":\"v-3641dca3#14/2\",\"1199\":\"v-3641dca3#14/3\",\"1200\":\"v-3641dca3#14/4\",\"1201\":\"v-3641dca3#14/5\",\"1202\":\"v-3641dca3#14/6\",\"1203\":\"v-3641dca3#14/7\",\"1204\":\"v-3641dca3#14/8\",\"1205\":\"v-3641dca3#14/9\",\"1206\":\"v-3641dca3#14/10\",\"1207\":\"v-3641dca3#14/11\",\"1208\":\"v-3641dca3#14/12\",\"1209\":\"v-3641dca3#14/13\",\"1210\":\"v-3641dca3#14/14\",\"1211\":\"v-3641dca3#14/15\",\"1212\":\"v-3641dca3#14/16\",\"1213\":\"v-3641dca3#14/17\",\"1214\":\"v-3641dca3#14/18\",\"1215\":\"v-3641dca3#14/19\",\"1216\":\"v-3641dca3#15\",\"1217\":\"v-3641dca3#15/0\",\"1218\":\"v-3641dca3#15/1\",\"1219\":\"v-3641dca3#15/2\",\"1220\":\"v-3641dca3#15/3\",\"1221\":\"v-3641dca3#15/4\",\"1222\":\"v-3641dca3#15/5\",\"1223\":\"v-3641dca3#15/6\",\"1224\":\"v-3641dca3#15/7\",\"1225\":\"v-3641dca3#15/8\",\"1226\":\"v-3641dca3#15/9\",\"1227\":\"v-3641dca3#15/10\",\"1228\":\"v-3641dca3#15/11\",\"1229\":\"v-3641dca3#15/12\",\"1230\":\"v-3641dca3#15/13\",\"1231\":\"v-3641dca3#15/14\",\"1232\":\"v-3641dca3#15/15\",\"1233\":\"v-3641dca3#15/16\",\"1234\":\"v-3641dca3#15/17\",\"1235\":\"v-3641dca3#15/18\",\"1236\":\"v-3641dca3#15/19\",\"1237\":\"v-3641dca3#16\",\"1238\":\"v-3641dca3#16/0\",\"1239\":\"v-3641dca3#16/1\",\"1240\":\"v-3641dca3#16/2\",\"1241\":\"v-3641dca3#16/3\",\"1242\":\"v-3641dca3#16/4\",\"1243\":\"v-3641dca3#16/5\",\"1244\":\"v-3641dca3#16/6\",\"1245\":\"v-3641dca3#16/7\",\"1246\":\"v-3641dca3#16/8\",\"1247\":\"v-3641dca3#16/9\",\"1248\":\"v-3641dca3#16/10\",\"1249\":\"v-3641dca3#16/11\",\"1250\":\"v-3641dca3#16/12\",\"1251\":\"v-3641dca3#16/13\",\"1252\":\"v-3641dca3#16/14\",\"1253\":\"v-3641dca3#16/15\",\"1254\":\"v-3641dca3#16/16\",\"1255\":\"v-3641dca3#17\",\"1256\":\"v-3641dca3#17/0\",\"1257\":\"v-3641dca3#17/1\",\"1258\":\"v-3641dca3#17/2\",\"1259\":\"v-3641dca3#17/3\",\"1260\":\"v-3641dca3#17/4\",\"1261\":\"v-3641dca3#17/5\",\"1262\":\"v-3641dca3#17/6\",\"1263\":\"v-3641dca3#17/7\",\"1264\":\"v-3641dca3#17/8\",\"1265\":\"v-3641dca3#17/9\",\"1266\":\"v-3641dca3#17/10\",\"1267\":\"v-3641dca3#17/11\",\"1268\":\"v-444699ba\",\"1269\":\"v-444699ba#1\",\"1270\":\"v-444699ba#2\",\"1271\":\"v-444699ba#3\",\"1272\":\"v-444699ba#3/0\",\"1273\":\"v-444699ba#3/1\",\"1274\":\"v-444699ba#3/2\",\"1275\":\"v-444699ba#3/3\",\"1276\":\"v-444699ba#3/4\",\"1277\":\"v-444699ba#3/5\",\"1278\":\"v-444699ba#4\",\"1279\":\"v-444699ba#5\",\"1280\":\"v-444699ba#5/0\",\"1281\":\"v-444699ba#5/1\",\"1282\":\"v-444699ba#5/2\",\"1283\":\"v-444699ba#5/3\",\"1284\":\"v-444699ba#5/4\",\"1285\":\"v-444699ba#5/5\",\"1286\":\"v-444699ba#5/6\",\"1287\":\"v-444699ba#5/7\",\"1288\":\"v-444699ba#5/8\",\"1289\":\"v-444699ba#5/9\",\"1290\":\"v-444699ba#5/10\",\"1291\":\"v-444699ba#5/11\",\"1292\":\"v-444699ba#6\",\"1293\":\"v-444699ba#6/0\",\"1294\":\"v-444699ba#6/1\",\"1295\":\"v-444699ba#6/2\",\"1296\":\"v-444699ba#6/3\",\"1297\":\"v-444699ba#6/4\",\"1298\":\"v-444699ba#6/5\",\"1299\":\"v-444699ba#6/6\",\"1300\":\"v-444699ba#7\",\"1301\":\"v-444699ba#8\",\"1302\":\"v-444699ba#8/0\",\"1303\":\"v-444699ba#8/1\",\"1304\":\"v-444699ba#8/2\",\"1305\":\"v-444699ba#8/3\",\"1306\":\"v-444699ba#9\",\"1307\":\"v-444699ba#9/0\",\"1308\":\"v-444699ba#9/1\",\"1309\":\"v-444699ba#9/2\",\"1310\":\"v-444699ba#9/3\",\"1311\":\"v-444699ba#9/4\",\"1312\":\"v-444699ba#9/5\",\"1313\":\"v-444699ba#9/6\",\"1314\":\"v-444699ba#9/7\",\"1315\":\"v-444699ba#9/8\",\"1316\":\"v-444699ba#9/9\",\"1317\":\"v-444699ba#9/10\",\"1318\":\"v-444699ba#9/11\",\"1319\":\"v-444699ba#9/12\",\"1320\":\"v-444699ba#9/13\",\"1321\":\"v-444699ba#9/14\",\"1322\":\"v-444699ba#9/15\",\"1323\":\"v-444699ba#9/16\",\"1324\":\"v-444699ba#9/17\",\"1325\":\"v-444699ba#9/18\",\"1326\":\"v-444699ba#9/19\",\"1327\":\"v-444699ba#10\",\"1328\":\"v-444699ba#10/0\",\"1329\":\"v-444699ba#10/1\",\"1330\":\"v-444699ba#10/2\",\"1331\":\"v-444699ba#10/3\",\"1332\":\"v-444699ba#11\",\"1333\":\"v-444699ba#11/0\",\"1334\":\"v-444699ba#11/1\",\"1335\":\"v-444699ba#11/2\",\"1336\":\"v-444699ba#11/3\",\"1337\":\"v-444699ba#11/4\",\"1338\":\"v-444699ba#11/5\",\"1339\":\"v-444699ba#11/6\",\"1340\":\"v-444699ba#11/7\",\"1341\":\"v-444699ba#11/8\",\"1342\":\"v-444699ba#11/9\",\"1343\":\"v-444699ba#12\",\"1344\":\"v-444699ba#12/0\",\"1345\":\"v-444699ba#12/1\",\"1346\":\"v-444699ba#12/2\",\"1347\":\"v-444699ba#12/3\",\"1348\":\"v-444699ba#12/4\",\"1349\":\"v-444699ba#12/5\",\"1350\":\"v-444699ba#12/6\",\"1351\":\"v-444699ba#12/7\",\"1352\":\"v-444699ba#12/8\",\"1353\":\"v-444699ba#12/9\",\"1354\":\"v-444699ba#12/10\",\"1355\":\"v-444699ba#12/11\",\"1356\":\"v-444699ba#12/12\",\"1357\":\"v-444699ba#12/13\",\"1358\":\"v-444699ba#12/14\",\"1359\":\"v-444699ba#13\",\"1360\":\"v-444699ba#13/0\",\"1361\":\"v-444699ba#13/1\",\"1362\":\"v-444699ba#13/2\",\"1363\":\"v-444699ba#14\",\"1364\":\"v-444699ba#14/0\",\"1365\":\"v-444699ba#14/1\",\"1366\":\"v-444699ba#14/2\",\"1367\":\"v-444699ba#14/3\",\"1368\":\"v-444699ba#14/4\",\"1369\":\"v-444699ba#14/5\",\"1370\":\"v-444699ba#14/6\",\"1371\":\"v-444699ba#14/7\",\"1372\":\"v-444699ba#14/8\",\"1373\":\"v-444699ba#14/9\",\"1374\":\"v-444699ba#14/10\",\"1375\":\"v-444699ba#14/11\",\"1376\":\"v-444699ba#14/12\",\"1377\":\"v-444699ba#14/13\",\"1378\":\"v-444699ba#14/14\",\"1379\":\"v-444699ba#14/15\",\"1380\":\"v-444699ba#14/16\",\"1381\":\"v-444699ba#14/17\",\"1382\":\"v-444699ba#14/18\",\"1383\":\"v-444699ba#14/19\",\"1384\":\"v-444699ba#15\",\"1385\":\"v-444699ba#15/0\",\"1386\":\"v-444699ba#15/1\",\"1387\":\"v-444699ba#15/2\",\"1388\":\"v-444699ba#15/3\",\"1389\":\"v-444699ba#15/4\",\"1390\":\"v-444699ba#15/5\",\"1391\":\"v-444699ba#15/6\",\"1392\":\"v-444699ba#15/7\",\"1393\":\"v-444699ba#15/8\",\"1394\":\"v-444699ba#15/9\",\"1395\":\"v-444699ba#15/10\",\"1396\":\"v-444699ba#15/11\",\"1397\":\"v-444699ba#15/12\",\"1398\":\"v-444699ba#15/13\",\"1399\":\"v-444699ba#15/14\",\"1400\":\"v-444699ba#15/15\",\"1401\":\"v-444699ba#15/16\",\"1402\":\"v-444699ba#15/17\",\"1403\":\"v-444699ba#15/18\",\"1404\":\"v-444699ba#15/19\",\"1405\":\"v-444699ba#16\",\"1406\":\"v-444699ba#16/0\",\"1407\":\"v-444699ba#16/1\",\"1408\":\"v-444699ba#16/2\",\"1409\":\"v-444699ba#16/3\",\"1410\":\"v-444699ba#16/4\",\"1411\":\"v-444699ba#16/5\",\"1412\":\"v-444699ba#16/6\",\"1413\":\"v-444699ba#16/7\",\"1414\":\"v-444699ba#16/8\",\"1415\":\"v-444699ba#16/9\",\"1416\":\"v-444699ba#16/10\",\"1417\":\"v-444699ba#16/11\",\"1418\":\"v-444699ba#16/12\",\"1419\":\"v-444699ba#16/13\",\"1420\":\"v-444699ba#16/14\",\"1421\":\"v-444699ba#16/15\",\"1422\":\"v-444699ba#16/16\",\"1423\":\"v-444699ba#17\",\"1424\":\"v-444699ba#17/0\",\"1425\":\"v-444699ba#17/1\",\"1426\":\"v-444699ba#17/2\",\"1427\":\"v-444699ba#17/3\",\"1428\":\"v-444699ba#17/4\",\"1429\":\"v-444699ba#17/5\",\"1430\":\"v-444699ba#17/6\",\"1431\":\"v-444699ba#17/7\",\"1432\":\"v-444699ba#17/8\",\"1433\":\"v-444699ba#17/9\",\"1434\":\"v-444699ba#17/10\",\"1435\":\"v-444699ba#17/11\",\"1436\":\"v-5ed95942\",\"1437\":\"v-5ed95942#1\",\"1438\":\"v-5ed95942#2\",\"1439\":\"v-5ed95942#3\",\"1440\":\"v-5ed95942#3/0\",\"1441\":\"v-5ed95942#3/1\",\"1442\":\"v-5ed95942#3/2\",\"1443\":\"v-5ed95942#3/3\",\"1444\":\"v-5ed95942#3/4\",\"1445\":\"v-5ed95942#3/5\",\"1446\":\"v-5ed95942#4\",\"1447\":\"v-5ed95942#5\",\"1448\":\"v-5ed95942#5/0\",\"1449\":\"v-5ed95942#5/1\",\"1450\":\"v-5ed95942#5/2\",\"1451\":\"v-5ed95942#5/3\",\"1452\":\"v-5ed95942#5/4\",\"1453\":\"v-5ed95942#5/5\",\"1454\":\"v-5ed95942#5/6\",\"1455\":\"v-5ed95942#5/7\",\"1456\":\"v-5ed95942#5/8\",\"1457\":\"v-5ed95942#5/9\",\"1458\":\"v-5ed95942#5/10\",\"1459\":\"v-5ed95942#5/11\",\"1460\":\"v-5ed95942#6\",\"1461\":\"v-5ed95942#6/0\",\"1462\":\"v-5ed95942#6/1\",\"1463\":\"v-5ed95942#6/2\",\"1464\":\"v-5ed95942#6/3\",\"1465\":\"v-5ed95942#6/4\",\"1466\":\"v-5ed95942#6/5\",\"1467\":\"v-5ed95942#6/6\",\"1468\":\"v-5ed95942#7\",\"1469\":\"v-5ed95942#8\",\"1470\":\"v-5ed95942#8/0\",\"1471\":\"v-5ed95942#8/1\",\"1472\":\"v-5ed95942#8/2\",\"1473\":\"v-5ed95942#8/3\",\"1474\":\"v-5ed95942#9\",\"1475\":\"v-5ed95942#9/0\",\"1476\":\"v-5ed95942#9/1\",\"1477\":\"v-5ed95942#9/2\",\"1478\":\"v-5ed95942#9/3\",\"1479\":\"v-5ed95942#9/4\",\"1480\":\"v-5ed95942#9/5\",\"1481\":\"v-5ed95942#9/6\",\"1482\":\"v-5ed95942#9/7\",\"1483\":\"v-5ed95942#9/8\",\"1484\":\"v-5ed95942#9/9\",\"1485\":\"v-5ed95942#9/10\",\"1486\":\"v-5ed95942#9/11\",\"1487\":\"v-5ed95942#9/12\",\"1488\":\"v-5ed95942#9/13\",\"1489\":\"v-5ed95942#9/14\",\"1490\":\"v-5ed95942#9/15\",\"1491\":\"v-5ed95942#9/16\",\"1492\":\"v-5ed95942#9/17\",\"1493\":\"v-5ed95942#9/18\",\"1494\":\"v-5ed95942#9/19\",\"1495\":\"v-5ed95942#10\",\"1496\":\"v-5ed95942#10/0\",\"1497\":\"v-5ed95942#10/1\",\"1498\":\"v-5ed95942#10/2\",\"1499\":\"v-5ed95942#10/3\",\"1500\":\"v-5ed95942#11\",\"1501\":\"v-5ed95942#11/0\",\"1502\":\"v-5ed95942#11/1\",\"1503\":\"v-5ed95942#11/2\",\"1504\":\"v-5ed95942#11/3\",\"1505\":\"v-5ed95942#11/4\",\"1506\":\"v-5ed95942#11/5\",\"1507\":\"v-5ed95942#11/6\",\"1508\":\"v-5ed95942#11/7\",\"1509\":\"v-5ed95942#11/8\",\"1510\":\"v-5ed95942#11/9\",\"1511\":\"v-5ed95942#12\",\"1512\":\"v-5ed95942#12/0\",\"1513\":\"v-5ed95942#12/1\",\"1514\":\"v-5ed95942#12/2\",\"1515\":\"v-5ed95942#12/3\",\"1516\":\"v-5ed95942#12/4\",\"1517\":\"v-5ed95942#12/5\",\"1518\":\"v-5ed95942#12/6\",\"1519\":\"v-5ed95942#12/7\",\"1520\":\"v-5ed95942#12/8\",\"1521\":\"v-5ed95942#12/9\",\"1522\":\"v-5ed95942#12/10\",\"1523\":\"v-5ed95942#12/11\",\"1524\":\"v-5ed95942#12/12\",\"1525\":\"v-5ed95942#12/13\",\"1526\":\"v-5ed95942#12/14\",\"1527\":\"v-5ed95942#13\",\"1528\":\"v-5ed95942#13/0\",\"1529\":\"v-5ed95942#13/1\",\"1530\":\"v-5ed95942#13/2\",\"1531\":\"v-5ed95942#14\",\"1532\":\"v-5ed95942#14/0\",\"1533\":\"v-5ed95942#14/1\",\"1534\":\"v-5ed95942#14/2\",\"1535\":\"v-5ed95942#14/3\",\"1536\":\"v-5ed95942#14/4\",\"1537\":\"v-5ed95942#14/5\",\"1538\":\"v-5ed95942#14/6\",\"1539\":\"v-5ed95942#14/7\",\"1540\":\"v-5ed95942#14/8\",\"1541\":\"v-5ed95942#14/9\",\"1542\":\"v-5ed95942#14/10\",\"1543\":\"v-5ed95942#14/11\",\"1544\":\"v-5ed95942#14/12\",\"1545\":\"v-5ed95942#14/13\",\"1546\":\"v-5ed95942#14/14\",\"1547\":\"v-5ed95942#14/15\",\"1548\":\"v-5ed95942#14/16\",\"1549\":\"v-5ed95942#14/17\",\"1550\":\"v-5ed95942#14/18\",\"1551\":\"v-5ed95942#14/19\",\"1552\":\"v-5ed95942#15\",\"1553\":\"v-5ed95942#15/0\",\"1554\":\"v-5ed95942#15/1\",\"1555\":\"v-5ed95942#15/2\",\"1556\":\"v-5ed95942#15/3\",\"1557\":\"v-5ed95942#15/4\",\"1558\":\"v-5ed95942#15/5\",\"1559\":\"v-5ed95942#15/6\",\"1560\":\"v-5ed95942#15/7\",\"1561\":\"v-5ed95942#15/8\",\"1562\":\"v-5ed95942#15/9\",\"1563\":\"v-5ed95942#15/10\",\"1564\":\"v-5ed95942#15/11\",\"1565\":\"v-5ed95942#15/12\",\"1566\":\"v-5ed95942#15/13\",\"1567\":\"v-5ed95942#15/14\",\"1568\":\"v-5ed95942#15/15\",\"1569\":\"v-5ed95942#15/16\",\"1570\":\"v-5ed95942#15/17\",\"1571\":\"v-5ed95942#15/18\",\"1572\":\"v-5ed95942#15/19\",\"1573\":\"v-5ed95942#16\",\"1574\":\"v-5ed95942#16/0\",\"1575\":\"v-5ed95942#16/1\",\"1576\":\"v-5ed95942#16/2\",\"1577\":\"v-5ed95942#16/3\",\"1578\":\"v-5ed95942#16/4\",\"1579\":\"v-5ed95942#16/5\",\"1580\":\"v-5ed95942#16/6\",\"1581\":\"v-5ed95942#16/7\",\"1582\":\"v-5ed95942#16/8\",\"1583\":\"v-5ed95942#16/9\",\"1584\":\"v-5ed95942#16/10\",\"1585\":\"v-5ed95942#16/11\",\"1586\":\"v-5ed95942#16/12\",\"1587\":\"v-5ed95942#16/13\",\"1588\":\"v-5ed95942#16/14\",\"1589\":\"v-5ed95942#16/15\",\"1590\":\"v-5ed95942#16/16\",\"1591\":\"v-5ed95942#17\",\"1592\":\"v-5ed95942#17/0\",\"1593\":\"v-5ed95942#17/1\",\"1594\":\"v-5ed95942#17/2\",\"1595\":\"v-5ed95942#17/3\",\"1596\":\"v-5ed95942#17/4\",\"1597\":\"v-5ed95942#17/5\",\"1598\":\"v-5ed95942#17/6\",\"1599\":\"v-5ed95942#17/7\",\"1600\":\"v-5ed95942#17/8\",\"1601\":\"v-5ed95942#17/9\",\"1602\":\"v-5ed95942#17/10\",\"1603\":\"v-5ed95942#17/11\",\"1604\":\"v-477bbf9a\",\"1605\":\"v-477bbf9a#1\",\"1606\":\"v-477bbf9a#2\",\"1607\":\"v-477bbf9a#3\",\"1608\":\"v-477bbf9a#3/0\",\"1609\":\"v-477bbf9a#3/1\",\"1610\":\"v-477bbf9a#3/2\",\"1611\":\"v-477bbf9a#3/3\",\"1612\":\"v-477bbf9a#3/4\",\"1613\":\"v-477bbf9a#3/5\",\"1614\":\"v-477bbf9a#4\",\"1615\":\"v-477bbf9a#5\",\"1616\":\"v-477bbf9a#5/0\",\"1617\":\"v-477bbf9a#5/1\",\"1618\":\"v-477bbf9a#5/2\",\"1619\":\"v-477bbf9a#5/3\",\"1620\":\"v-477bbf9a#5/4\",\"1621\":\"v-477bbf9a#5/5\",\"1622\":\"v-477bbf9a#5/6\",\"1623\":\"v-477bbf9a#5/7\",\"1624\":\"v-477bbf9a#5/8\",\"1625\":\"v-477bbf9a#5/9\",\"1626\":\"v-477bbf9a#5/10\",\"1627\":\"v-477bbf9a#5/11\",\"1628\":\"v-477bbf9a#6\",\"1629\":\"v-477bbf9a#6/0\",\"1630\":\"v-477bbf9a#6/1\",\"1631\":\"v-477bbf9a#6/2\",\"1632\":\"v-477bbf9a#6/3\",\"1633\":\"v-477bbf9a#6/4\",\"1634\":\"v-477bbf9a#6/5\",\"1635\":\"v-477bbf9a#6/6\",\"1636\":\"v-477bbf9a#7\",\"1637\":\"v-477bbf9a#8\",\"1638\":\"v-477bbf9a#8/0\",\"1639\":\"v-477bbf9a#8/1\",\"1640\":\"v-477bbf9a#8/2\",\"1641\":\"v-477bbf9a#8/3\",\"1642\":\"v-477bbf9a#9\",\"1643\":\"v-477bbf9a#9/0\",\"1644\":\"v-477bbf9a#9/1\",\"1645\":\"v-477bbf9a#9/2\",\"1646\":\"v-477bbf9a#9/3\",\"1647\":\"v-477bbf9a#9/4\",\"1648\":\"v-477bbf9a#9/5\",\"1649\":\"v-477bbf9a#9/6\",\"1650\":\"v-477bbf9a#9/7\",\"1651\":\"v-477bbf9a#9/8\",\"1652\":\"v-477bbf9a#9/9\",\"1653\":\"v-477bbf9a#9/10\",\"1654\":\"v-477bbf9a#9/11\",\"1655\":\"v-477bbf9a#9/12\",\"1656\":\"v-477bbf9a#9/13\",\"1657\":\"v-477bbf9a#9/14\",\"1658\":\"v-477bbf9a#9/15\",\"1659\":\"v-477bbf9a#9/16\",\"1660\":\"v-477bbf9a#9/17\",\"1661\":\"v-477bbf9a#9/18\",\"1662\":\"v-477bbf9a#9/19\",\"1663\":\"v-477bbf9a#10\",\"1664\":\"v-477bbf9a#10/0\",\"1665\":\"v-477bbf9a#10/1\",\"1666\":\"v-477bbf9a#10/2\",\"1667\":\"v-477bbf9a#10/3\",\"1668\":\"v-477bbf9a#11\",\"1669\":\"v-477bbf9a#11/0\",\"1670\":\"v-477bbf9a#11/1\",\"1671\":\"v-477bbf9a#11/2\",\"1672\":\"v-477bbf9a#11/3\",\"1673\":\"v-477bbf9a#11/4\",\"1674\":\"v-477bbf9a#11/5\",\"1675\":\"v-477bbf9a#11/6\",\"1676\":\"v-477bbf9a#11/7\",\"1677\":\"v-477bbf9a#11/8\",\"1678\":\"v-477bbf9a#11/9\",\"1679\":\"v-477bbf9a#12\",\"1680\":\"v-477bbf9a#12/0\",\"1681\":\"v-477bbf9a#12/1\",\"1682\":\"v-477bbf9a#12/2\",\"1683\":\"v-477bbf9a#12/3\",\"1684\":\"v-477bbf9a#12/4\",\"1685\":\"v-477bbf9a#12/5\",\"1686\":\"v-477bbf9a#12/6\",\"1687\":\"v-477bbf9a#12/7\",\"1688\":\"v-477bbf9a#12/8\",\"1689\":\"v-477bbf9a#12/9\",\"1690\":\"v-477bbf9a#12/10\",\"1691\":\"v-477bbf9a#12/11\",\"1692\":\"v-477bbf9a#12/12\",\"1693\":\"v-477bbf9a#12/13\",\"1694\":\"v-477bbf9a#12/14\",\"1695\":\"v-477bbf9a#13\",\"1696\":\"v-477bbf9a#13/0\",\"1697\":\"v-477bbf9a#13/1\",\"1698\":\"v-477bbf9a#13/2\",\"1699\":\"v-477bbf9a#14\",\"1700\":\"v-477bbf9a#14/0\",\"1701\":\"v-477bbf9a#14/1\",\"1702\":\"v-477bbf9a#14/2\",\"1703\":\"v-477bbf9a#14/3\",\"1704\":\"v-477bbf9a#14/4\",\"1705\":\"v-477bbf9a#14/5\",\"1706\":\"v-477bbf9a#14/6\",\"1707\":\"v-477bbf9a#14/7\",\"1708\":\"v-477bbf9a#14/8\",\"1709\":\"v-477bbf9a#14/9\",\"1710\":\"v-477bbf9a#14/10\",\"1711\":\"v-477bbf9a#14/11\",\"1712\":\"v-477bbf9a#14/12\",\"1713\":\"v-477bbf9a#14/13\",\"1714\":\"v-477bbf9a#14/14\",\"1715\":\"v-477bbf9a#14/15\",\"1716\":\"v-477bbf9a#14/16\",\"1717\":\"v-477bbf9a#14/17\",\"1718\":\"v-477bbf9a#14/18\",\"1719\":\"v-477bbf9a#14/19\",\"1720\":\"v-477bbf9a#15\",\"1721\":\"v-477bbf9a#15/0\",\"1722\":\"v-477bbf9a#15/1\",\"1723\":\"v-477bbf9a#15/2\",\"1724\":\"v-477bbf9a#15/3\",\"1725\":\"v-477bbf9a#15/4\",\"1726\":\"v-477bbf9a#15/5\",\"1727\":\"v-477bbf9a#15/6\",\"1728\":\"v-477bbf9a#15/7\",\"1729\":\"v-477bbf9a#15/8\",\"1730\":\"v-477bbf9a#15/9\",\"1731\":\"v-477bbf9a#15/10\",\"1732\":\"v-477bbf9a#15/11\",\"1733\":\"v-477bbf9a#15/12\",\"1734\":\"v-477bbf9a#15/13\",\"1735\":\"v-477bbf9a#15/14\",\"1736\":\"v-477bbf9a#15/15\",\"1737\":\"v-477bbf9a#15/16\",\"1738\":\"v-477bbf9a#15/17\",\"1739\":\"v-477bbf9a#15/18\",\"1740\":\"v-477bbf9a#15/19\",\"1741\":\"v-477bbf9a#16\",\"1742\":\"v-477bbf9a#16/0\",\"1743\":\"v-477bbf9a#16/1\",\"1744\":\"v-477bbf9a#16/2\",\"1745\":\"v-477bbf9a#16/3\",\"1746\":\"v-477bbf9a#16/4\",\"1747\":\"v-477bbf9a#16/5\",\"1748\":\"v-477bbf9a#16/6\",\"1749\":\"v-477bbf9a#16/7\",\"1750\":\"v-477bbf9a#16/8\",\"1751\":\"v-477bbf9a#16/9\",\"1752\":\"v-477bbf9a#16/10\",\"1753\":\"v-477bbf9a#16/11\",\"1754\":\"v-477bbf9a#16/12\",\"1755\":\"v-477bbf9a#16/13\",\"1756\":\"v-477bbf9a#16/14\",\"1757\":\"v-477bbf9a#16/15\",\"1758\":\"v-477bbf9a#16/16\",\"1759\":\"v-477bbf9a#17\",\"1760\":\"v-477bbf9a#17/0\",\"1761\":\"v-477bbf9a#17/1\",\"1762\":\"v-477bbf9a#17/2\",\"1763\":\"v-477bbf9a#17/3\",\"1764\":\"v-477bbf9a#17/4\",\"1765\":\"v-477bbf9a#17/5\",\"1766\":\"v-477bbf9a#17/6\",\"1767\":\"v-477bbf9a#17/7\",\"1768\":\"v-477bbf9a#17/8\",\"1769\":\"v-477bbf9a#17/9\",\"1770\":\"v-477bbf9a#17/10\",\"1771\":\"v-477bbf9a#17/11\",\"1772\":\"v-70612c1f\",\"1773\":\"v-70612c1f#1\",\"1774\":\"v-70612c1f#2\",\"1775\":\"v-70612c1f#2/0\",\"1776\":\"v-70612c1f#2/1\",\"1777\":\"v-70612c1f#2/2\",\"1778\":\"v-70612c1f#2/3\",\"1779\":\"v-70612c1f#3\",\"1780\":\"v-70612c1f#3/0\",\"1781\":\"v-70612c1f#3/1\",\"1782\":\"v-70612c1f#3/2\",\"1783\":\"v-70612c1f#3/3\",\"1784\":\"v-70612c1f#3/4\",\"1785\":\"v-70612c1f#3/5\",\"1786\":\"v-70612c1f#3/6\",\"1787\":\"v-70612c1f#3/7\",\"1788\":\"v-70612c1f#3/8\",\"1789\":\"v-70612c1f#4\",\"1790\":\"v-94b65880\",\"1791\":\"v-94b65880#1\",\"1792\":\"v-94b65880#2\",\"1793\":\"v-94b65880#2/0\",\"1794\":\"v-94b65880#3\",\"1795\":\"v-94b65880#3/0\",\"1796\":\"v-94b65880#3/1\",\"1797\":\"v-94b65880#3/2\",\"1798\":\"v-94b65880#3/3\",\"1799\":\"v-94b65880#3/4\",\"1800\":\"v-94b65880#3/5\",\"1801\":\"v-94b65880#3/6\",\"1802\":\"v-94b65880#3/7\",\"1803\":\"v-94b65880#3/8\",\"1804\":\"v-94b65880#3/9\",\"1805\":\"v-94b65880#3/10\",\"1806\":\"v-94b65880#3/11\",\"1807\":\"v-94b65880#3/12\",\"1808\":\"v-94b65880#3/13\",\"1809\":\"v-94b65880#3/14\",\"1810\":\"v-94b65880#3/15\",\"1811\":\"v-94b65880#3/16\",\"1812\":\"v-94b65880#3/17\",\"1813\":\"v-94b65880#3/18\",\"1814\":\"v-94b65880#3/19\",\"1815\":\"v-94b65880#3/20\",\"1816\":\"v-94b65880#3/21\",\"1817\":\"v-94b65880#4\",\"1818\":\"v-94b65880#4/0\",\"1819\":\"v-94b65880#4/1\",\"1820\":\"v-94b65880#4/2\",\"1821\":\"v-94b65880#4/3\",\"1822\":\"v-94b65880#4/4\",\"1823\":\"v-94b65880#4/5\",\"1824\":\"v-94b65880#4/6\",\"1825\":\"v-94b65880#4/7\",\"1826\":\"v-94b65880#4/8\",\"1827\":\"v-94b65880#4/9\",\"1828\":\"v-94b65880#4/10\",\"1829\":\"v-94b65880#4/11\",\"1830\":\"v-94b65880#4/12\",\"1831\":\"v-94b65880#4/13\",\"1832\":\"v-94b65880#4/14\",\"1833\":\"v-94b65880#4/15\",\"1834\":\"v-94b65880#4/16\",\"1835\":\"v-94b65880#4/17\",\"1836\":\"v-94b65880#4/18\",\"1837\":\"v-94b65880#4/19\",\"1838\":\"v-94b65880#4/20\",\"1839\":\"v-94b65880#4/21\",\"1840\":\"v-94b65880#4/22\",\"1841\":\"v-94b65880#4/23\",\"1842\":\"v-94b65880#4/24\",\"1843\":\"v-94b65880#4/25\",\"1844\":\"v-94b65880#4/26\",\"1845\":\"v-94b65880#4/27\",\"1846\":\"v-94b65880#4/28\",\"1847\":\"v-94b65880#5\",\"1848\":\"v-94b65880#5/0\",\"1849\":\"v-94b65880#5/1\",\"1850\":\"v-94b65880#5/2\",\"1851\":\"v-94b65880#5/3\",\"1852\":\"v-94b65880#5/4\",\"1853\":\"v-7fd9d9c7\",\"1854\":\"v-7fd9d9c7#1\",\"1855\":\"v-7fd9d9c7#2\",\"1856\":\"v-7fd9d9c7#2/0\",\"1857\":\"v-7fd9d9c7#2/1\",\"1858\":\"v-7fd9d9c7#2/2\",\"1859\":\"v-7fd9d9c7#2/3\",\"1860\":\"v-7fd9d9c7#2/4\",\"1861\":\"v-7fd9d9c7#3\",\"1862\":\"v-7fd9d9c7#4\",\"1863\":\"v-7fd9d9c7#4/0\",\"1864\":\"v-7fd9d9c7#5\",\"1865\":\"v-7fd9d9c7#5/0\",\"1866\":\"v-7fd9d9c7#5/1\",\"1867\":\"v-7fd9d9c7#5/2\",\"1868\":\"v-7fd9d9c7#6\",\"1869\":\"v-7fd9d9c7#6/0\",\"1870\":\"v-7fd9d9c7#7\",\"1871\":\"v-7fd9d9c7#7/0\",\"1872\":\"v-7fd9d9c7#7/1\",\"1873\":\"v-7fd9d9c7#7/2\",\"1874\":\"v-7fd9d9c7#7/3\",\"1875\":\"v-7fd9d9c7#7/4\",\"1876\":\"v-7fd9d9c7#8\",\"1877\":\"v-7fd9d9c7#8/0\",\"1878\":\"v-7fd9d9c7#8/1\",\"1879\":\"v-7fd9d9c7#8/2\",\"1880\":\"v-7fd9d9c7#8/3\",\"1881\":\"v-7fd9d9c7#8/4\",\"1882\":\"v-7fd9d9c7#9\",\"1883\":\"v-7fd9d9c7#9/0\",\"1884\":\"v-7fd9d9c7#9/1\",\"1885\":\"v-7fd9d9c7#9/2\",\"1886\":\"v-7fd9d9c7#9/3\",\"1887\":\"v-7fd9d9c7#9/4\",\"1888\":\"v-7fd9d9c7#9/5\",\"1889\":\"v-7fd9d9c7#9/6\",\"1890\":\"v-7fd9d9c7#9/7\",\"1891\":\"v-7fd9d9c7#9/8\",\"1892\":\"v-7fd9d9c7#9/9\",\"1893\":\"v-7fd9d9c7#9/10\",\"1894\":\"v-7fd9d9c7#9/11\",\"1895\":\"v-7fd9d9c7#9/12\",\"1896\":\"v-7fd9d9c7#9/13\",\"1897\":\"v-7fd9d9c7#9/14\",\"1898\":\"v-7fd9d9c7#9/15\",\"1899\":\"v-7fd9d9c7#9/16\",\"1900\":\"v-7fd9d9c7#9/17\",\"1901\":\"v-7fd9d9c7#9/18\",\"1902\":\"v-7fd9d9c7#9/19\",\"1903\":\"v-7fd9d9c7#9/20\",\"1904\":\"v-7fd9d9c7#10\",\"1905\":\"v-7fd9d9c7#11\",\"1906\":\"v-7fd9d9c7#11/0\",\"1907\":\"v-7fd9d9c7#11/1\",\"1908\":\"v-7fd9d9c7#11/2\",\"1909\":\"v-7fd9d9c7#11/3\",\"1910\":\"v-7fd9d9c7#11/4\",\"1911\":\"v-7fd9d9c7#11/5\",\"1912\":\"v-7fd9d9c7#11/6\",\"1913\":\"v-7fd9d9c7#11/7\",\"1914\":\"v-7fd9d9c7#12\",\"1915\":\"v-7fd9d9c7#12/0\",\"1916\":\"v-7fd9d9c7#12/1\",\"1917\":\"v-7fd9d9c7#12/2\",\"1918\":\"v-7fd9d9c7#12/3\",\"1919\":\"v-7fd9d9c7#12/4\",\"1920\":\"v-7fd9d9c7#12/5\",\"1921\":\"v-7fd9d9c7#12/6\",\"1922\":\"v-2d06a607\",\"1923\":\"v-2d06a607#1\",\"1924\":\"v-2d06a607#2\",\"1925\":\"v-2d06a607#3\",\"1926\":\"v-2d06a607#3/0\",\"1927\":\"v-2d06a607#4\",\"1928\":\"v-2d06a607#4/0\",\"1929\":\"v-2d06a607#5\",\"1930\":\"v-2d06a607#5/0\",\"1931\":\"v-2d06a607#6\",\"1932\":\"v-2d06a607#6/0\",\"1933\":\"v-2d06a607#6/1\",\"1934\":\"v-2d06a607#6/2\",\"1935\":\"v-2d06a607#6/3\",\"1936\":\"v-2d06a607#6/4\",\"1937\":\"v-2d06a607#6/5\",\"1938\":\"v-2d06a607#6/6\",\"1939\":\"v-2d06a607#6/7\",\"1940\":\"v-2d06a607#6/8\",\"1941\":\"v-2d06a607#7\",\"1942\":\"v-2d06a607#7/0\",\"1943\":\"v-2d06a607#7/1\",\"1944\":\"v-2d06a607#8\",\"1945\":\"v-2d06a607#8/2\",\"1946\":\"v-2d06a607#9\",\"1947\":\"v-2d06a607#9/0\",\"1948\":\"v-2d06a607#10\",\"1949\":\"v-2d06a607#10/0\",\"1950\":\"v-2d06a607#11\",\"1951\":\"v-2d06a607#11/0\",\"1952\":\"v-2d06a607#12\",\"1953\":\"v-2d06a607#12/0\",\"1954\":\"v-2d06a607#12/1\",\"1955\":\"v-2d06a607#13\",\"1956\":\"v-2d06a607#13/0\",\"1957\":\"v-2d06a607#13/1\",\"1958\":\"v-2d06a607#13/2\",\"1959\":\"v-2d06a607#13/3\",\"1960\":\"v-2d06a607#13/4\",\"1961\":\"v-2d06a607#13/5\",\"1962\":\"v-2d06a607#14\",\"1963\":\"v-2d06a607#14/0\",\"1964\":\"v-2d06a607#15\",\"1965\":\"v-2d06a607#15/0\",\"1966\":\"v-544bf93a\",\"1967\":\"v-544bf93a#0/0\",\"1968\":\"v-544bf93a#0/1\",\"1969\":\"v-544bf93a#0/2\",\"1970\":\"v-544bf93a#1\",\"1971\":\"v-544bf93a#1/0\",\"1972\":\"v-544bf93a#1/1\",\"1973\":\"v-544bf93a#1/2\",\"1974\":\"v-544bf93a#1/3\",\"1975\":\"v-544bf93a#1/4\",\"1976\":\"v-544bf93a#2\",\"1977\":\"v-544bf93a#2/0\",\"1978\":\"v-544bf93a#2/1\",\"1979\":\"v-544bf93a#2/2\",\"1980\":\"v-544bf93a#2/3\",\"1981\":\"v-75b93c32\",\"1982\":\"v-75b93c32#0/0\",\"1983\":\"v-75b93c32#0/1\",\"1984\":\"v-75b93c32#0/2\",\"1985\":\"v-75b93c32#1\",\"1986\":\"v-75b93c32#1/0\",\"1987\":\"v-75b93c32#1/1\",\"1988\":\"v-75b93c32#1/2\",\"1989\":\"v-75b93c32#1/3\",\"1990\":\"v-75b93c32#1/4\",\"1991\":\"v-75b93c32#2\",\"1992\":\"v-75b93c32#2/0\",\"1993\":\"v-75b93c32#2/1\",\"1994\":\"v-75b93c32#2/2\",\"1995\":\"v-75b93c32#2/3\",\"1996\":\"v-38cfe3a6\",\"1997\":\"v-38cfe3a6#0/0\",\"1998\":\"v-38cfe3a6#0/1\",\"1999\":\"v-38cfe3a6#1\",\"2000\":\"v-38cfe3a6#2\",\"2001\":\"v-38cfe3a6#2/0\",\"2002\":\"v-38cfe3a6#2/1\",\"2003\":\"v-38cfe3a6#2/2\",\"2004\":\"v-38cfe3a6#2/3\",\"2005\":\"v-38cfe3a6#2/4\",\"2006\":\"v-38cfe3a6#3\",\"2007\":\"v-38cfe3a6#3/0\",\"2008\":\"v-38cfe3a6#3/1\",\"2009\":\"v-3a84bc45\",\"2010\":\"v-3a84bc45#0/0\",\"2011\":\"v-3a84bc45#0/1\",\"2012\":\"v-3a84bc45#1\",\"2013\":\"v-3a84bc45#2\",\"2014\":\"v-3a84bc45#2/0\",\"2015\":\"v-3a84bc45#2/1\",\"2016\":\"v-3a84bc45#2/2\",\"2017\":\"v-3a84bc45#2/3\",\"2018\":\"v-3a84bc45#2/4\",\"2019\":\"v-3a84bc45#3\",\"2020\":\"v-3a84bc45#3/0\",\"2021\":\"v-3a84bc45#3/1\",\"2022\":\"v-711fd025\",\"2023\":\"v-711fd025#0/0\",\"2024\":\"v-711fd025#0/1\",\"2025\":\"v-711fd025#0/2\",\"2026\":\"v-711fd025#1\",\"2027\":\"v-711fd025#1/0\",\"2028\":\"v-711fd025#1/1\",\"2029\":\"v-711fd025#1/2\",\"2030\":\"v-711fd025#1/3\",\"2031\":\"v-711fd025#1/4\",\"2032\":\"v-711fd025#2\",\"2033\":\"v-711fd025#2/0\",\"2034\":\"v-711fd025#2/1\",\"2035\":\"v-711fd025#2/2\",\"2036\":\"v-711fd025#2/3\",\"2037\":\"v-1dff623b\",\"2038\":\"v-1dff623b#0/0\",\"2039\":\"v-1dff623b#0/1\",\"2040\":\"v-1dff623b#0/2\",\"2041\":\"v-1dff623b#1\",\"2042\":\"v-1dff623b#1/0\",\"2043\":\"v-1dff623b#1/1\",\"2044\":\"v-1dff623b#1/2\",\"2045\":\"v-1dff623b#1/3\",\"2046\":\"v-1dff623b#1/4\",\"2047\":\"v-1dff623b#2\",\"2048\":\"v-1dff623b#2/0\",\"2049\":\"v-1dff623b#2/1\",\"2050\":\"v-1dff623b#2/2\",\"2051\":\"v-1dff623b#2/3\",\"2052\":\"v-0daa9495\",\"2053\":\"v-0daa9495#0/0\",\"2054\":\"v-0daa9495#0/1\",\"2055\":\"v-0daa9495#0/2\",\"2056\":\"v-0daa9495#0/3\",\"2057\":\"v-0daa9495#0/4\",\"2058\":\"v-0daa9495#0/5\",\"2059\":\"v-0daa9495#0/6\",\"2060\":\"v-0daa9495#0/7\",\"2061\":\"v-0daa9495#0/8\",\"2062\":\"v-0daa9495#0/9\",\"2063\":\"v-0daa9495#0/10\",\"2064\":\"v-0daa9495#0/11\",\"2065\":\"v-0daa9495#0/12\",\"2066\":\"v-0daa9495#0/13\",\"2067\":\"v-0daa9495#0/14\",\"2068\":\"v-0daa9495#0/15\",\"2069\":\"v-0daa9495#0/16\",\"2070\":\"v-0daa9495#0/17\",\"2071\":\"v-0daa9495#0/18\",\"2072\":\"v-0daa9495#0/19\",\"2073\":\"v-0daa9495#0/20\",\"2074\":\"v-0daa9495#0/21\",\"2075\":\"v-0daa9495#0/22\",\"2076\":\"v-0daa9495#0/23\",\"2077\":\"v-0daa9495#0/24\",\"2078\":\"v-0daa9495#0/25\",\"2079\":\"v-0daa9495#0/26\",\"2080\":\"v-0daa9495#0/27\",\"2081\":\"v-0daa9495#0/28\",\"2082\":\"v-0daa9495#0/29\",\"2083\":\"v-0daa9495#0/30\",\"2084\":\"v-0daa9495#0/31\",\"2085\":\"v-0daa9495#0/32\",\"2086\":\"v-0daa9495#0/33\",\"2087\":\"v-0daa9495#0/34\",\"2088\":\"v-0daa9495#0/35\",\"2089\":\"v-0daa9495#0/36\",\"2090\":\"v-0daa9495#0/37\",\"2091\":\"v-0daa9495#0/38\",\"2092\":\"v-0daa9495#0/39\",\"2093\":\"v-0daa9495#0/40\",\"2094\":\"v-0daa9495#0/41\",\"2095\":\"v-0daa9495#0/42\",\"2096\":\"v-0daa9495#1\",\"2097\":\"v-0daa9495#2\",\"2098\":\"v-0daa9495#2/0\",\"2099\":\"v-0daa9495#2/1\",\"2100\":\"v-0daa9495#2/2\",\"2101\":\"v-0daa9495#2/3\",\"2102\":\"v-0daa9495#2/4\",\"2103\":\"v-0daa9495#2/5\",\"2104\":\"v-0daa9495#2/6\",\"2105\":\"v-0daa9495#2/7\",\"2106\":\"v-0daa9495#3\",\"2107\":\"v-0daa9495#3/0\",\"2108\":\"v-0daa9495#3/1\",\"2109\":\"v-0daa9495#4\",\"2110\":\"v-0daa9495#4/0\",\"2111\":\"v-0daa9495#4/1\",\"2112\":\"v-0daa9495#4/2\",\"2113\":\"v-0daa9495#4/3\",\"2114\":\"v-0daa9495#4/4\",\"2115\":\"v-0daa9495#5\",\"2116\":\"v-0daa9495#5/0\",\"2117\":\"v-0daa9495#5/1\",\"2118\":\"v-0daa9495#5/2\",\"2119\":\"v-0daa9495#5/3\",\"2120\":\"v-0daa9495#5/4\",\"2121\":\"v-0daa9495#6\",\"2122\":\"v-0daa9495#6/0\",\"2123\":\"v-0daa9495#6/1\",\"2124\":\"v-0daa9495#6/2\",\"2125\":\"v-0daa9495#6/3\",\"2126\":\"v-0daa9495#6/4\",\"2127\":\"v-0daa9495#6/5\",\"2128\":\"v-0daa9495#6/6\",\"2129\":\"v-0daa9495#6/7\",\"2130\":\"v-0daa9495#6/8\",\"2131\":\"v-0daa9495#6/9\",\"2132\":\"v-0daa9495#6/10\",\"2133\":\"v-0daa9495#6/11\",\"2134\":\"v-0daa9495#7\",\"2135\":\"v-0daa9495#7/0\",\"2136\":\"v-0daa9495#8\",\"2137\":\"v-0daa9495#8/0\",\"2138\":\"v-0daa9495#8/1\",\"2139\":\"v-0daa9495#8/2\",\"2140\":\"v-0daa9495#8/3\",\"2141\":\"v-0daa9495#8/4\",\"2142\":\"v-0daa9495#8/5\",\"2143\":\"v-0daa9495#8/6\",\"2144\":\"v-0daa9495#8/7\",\"2145\":\"v-0daa9495#8/8\",\"2146\":\"v-0daa9495#8/9\",\"2147\":\"v-0daa9495#8/10\",\"2148\":\"v-0daa9495#8/11\",\"2149\":\"v-0daa9495#8/12\",\"2150\":\"v-0daa9495#8/13\",\"2151\":\"v-0daa9495#8/14\",\"2152\":\"v-0daa9495#8/15\",\"2153\":\"v-0daa9495#8/16\",\"2154\":\"v-0daa9495#8/17\",\"2155\":\"v-0daa9495#8/18\",\"2156\":\"v-0daa9495#8/19\",\"2157\":\"v-0daa9495#8/20\",\"2158\":\"v-0daa9495#9\",\"2159\":\"v-0daa9495#9/0\",\"2160\":\"v-0daa9495#9/1\",\"2161\":\"v-0daa9495#9/2\",\"2162\":\"v-0daa9495#9/3\",\"2163\":\"v-0daa9495#9/4\",\"2164\":\"v-0daa9495#9/5\",\"2165\":\"v-0daa9495#9/6\",\"2166\":\"v-0daa9495#9/7\",\"2167\":\"v-0daa9495#9/8\",\"2168\":\"v-0daa9495#9/9\",\"2169\":\"v-0daa9495#9/10\",\"2170\":\"v-0daa9495#9/11\",\"2171\":\"v-0daa9495#10\",\"2172\":\"v-0daa9495#10/0\",\"2173\":\"v-0daa9495#10/1\",\"2174\":\"v-0daa9495#10/2\",\"2175\":\"v-0daa9495#10/3\",\"2176\":\"v-0daa9495#10/4\",\"2177\":\"v-0daa9495#10/5\",\"2178\":\"v-0daa9495#11\",\"2179\":\"v-0daa9495#12\",\"2180\":\"v-0daa9495#13\",\"2181\":\"v-0daa9495#14\",\"2182\":\"v-0daa9495#15\",\"2183\":\"v-0daa9495#16\",\"2184\":\"v-0daa9495#17\",\"2185\":\"v-0daa9495#18\",\"2186\":\"v-0daa9495#19\",\"2187\":\"v-0daa9495#20\",\"2188\":\"v-0daa9495#21\",\"2189\":\"v-0daa9495#22\",\"2190\":\"v-0daa9495#23\",\"2191\":\"v-0daa9495#24\",\"2192\":\"v-0daa9495#25\",\"2193\":\"v-0daa9495#26\",\"2194\":\"v-0daa9495#27\",\"2195\":\"v-0daa9495#28\",\"2196\":\"v-0daa9495#29\",\"2197\":\"v-0daa9495#30\",\"2198\":\"v-0daa9495#31\",\"2199\":\"v-0daa9495#32\",\"2200\":\"v-0daa9495#33\",\"2201\":\"v-0daa9495#34\",\"2202\":\"v-0daa9495#35\",\"2203\":\"v-0daa9495#36\",\"2204\":\"v-0daa9495#37\",\"2205\":\"v-0daa9495#38\",\"2206\":\"v-0daa9495#39\",\"2207\":\"v-0daa9495#40\",\"2208\":\"v-0daa9495#41\",\"2209\":\"v-0daa9495#42\",\"2210\":\"v-0daa9495#43\",\"2211\":\"v-77c78bde\",\"2212\":\"v-77c78bde#1\",\"2213\":\"v-77c78bde#1/0\",\"2214\":\"v-77c78bde#1/1\",\"2215\":\"v-77c78bde#1/2\",\"2216\":\"v-77c78bde#1/3\",\"2217\":\"v-77c78bde#1/4\",\"2218\":\"v-77c78bde#1/5\",\"2219\":\"v-77c78bde#1/6\",\"2220\":\"v-77c78bde#1/7\",\"2221\":\"v-77c78bde#1/8\",\"2222\":\"v-77c78bde#2\",\"2223\":\"v-77c78bde#2/0\",\"2224\":\"v-77c78bde#3\",\"2225\":\"v-77c78bde#3/0\",\"2226\":\"v-77c78bde#4\",\"2227\":\"v-77c78bde#5\",\"2228\":\"v-77c78bde#6\",\"2229\":\"v-77c78bde#7\",\"2230\":\"v-77c78bde#7/0\",\"2231\":\"v-77c78bde#7/1\",\"2232\":\"v-77c78bde#7/2\",\"2233\":\"v-77c78bde#7/3\",\"2234\":\"v-77c78bde#7/4\",\"2235\":\"v-77c78bde#7/5\",\"2236\":\"v-77c78bde#8\",\"2237\":\"v-77c78bde#8/0\",\"2238\":\"v-77c78bde#8/1\",\"2239\":\"v-77c78bde#8/2\",\"2240\":\"v-77c78bde#8/3\",\"2241\":\"v-77c78bde#8/4\",\"2242\":\"v-77c78bde#8/5\",\"2243\":\"v-77c78bde#8/6\",\"2244\":\"v-77c78bde#8/7\",\"2245\":\"v-77c78bde#8/8\",\"2246\":\"v-77c78bde#8/9\",\"2247\":\"v-77c78bde#8/10\",\"2248\":\"v-77c78bde#9\",\"2249\":\"v-77c78bde#9/0\",\"2250\":\"v-77c78bde#9/1\",\"2251\":\"v-77c78bde#9/2\",\"2252\":\"v-77c78bde#9/3\",\"2253\":\"v-77c78bde#9/4\",\"2254\":\"v-77c78bde#9/5\",\"2255\":\"v-77c78bde#9/6\",\"2256\":\"v-77c78bde#9/7\",\"2257\":\"v-77c78bde#9/8\",\"2258\":\"v-77c78bde#9/9\",\"2259\":\"v-77c78bde#9/10\",\"2260\":\"v-77c78bde#10\",\"2261\":\"v-77c78bde#11\",\"2262\":\"v-77c78bde#11/0\",\"2263\":\"v-77c78bde#11/1\",\"2264\":\"v-77c78bde#12\",\"2265\":\"v-77c78bde#12/0\",\"2266\":\"v-77c78bde#12/1\",\"2267\":\"v-77c78bde#12/2\",\"2268\":\"v-77c78bde#12/3\",\"2269\":\"v-77c78bde#13\",\"2270\":\"v-77c78bde#13/0\",\"2271\":\"v-77c78bde#13/1\",\"2272\":\"v-77c78bde#13/2\",\"2273\":\"v-77c78bde#13/3\",\"2274\":\"v-77c78bde#14\",\"2275\":\"v-77c78bde#14/0\",\"2276\":\"v-77c78bde#14/1\",\"2277\":\"v-77c78bde#14/2\",\"2278\":\"v-77c78bde#15\",\"2279\":\"v-77c78bde#16\",\"2280\":\"v-77c78bde#16/0\",\"2281\":\"v-77c78bde#16/1\",\"2282\":\"v-77c78bde#16/2\",\"2283\":\"v-77c78bde#16/3\",\"2284\":\"v-77c78bde#17\",\"2285\":\"v-77c78bde#17/0\",\"2286\":\"v-77c78bde#17/1\",\"2287\":\"v-77c78bde#17/2\",\"2288\":\"v-77c78bde#17/3\",\"2289\":\"v-77c78bde#17/4\",\"2290\":\"v-77c78bde#17/5\",\"2291\":\"v-77c78bde#17/6\",\"2292\":\"v-77c78bde#17/7\",\"2293\":\"v-77c78bde#17/8\",\"2294\":\"v-77c78bde#17/9\",\"2295\":\"v-77c78bde#17/10\",\"2296\":\"v-77c78bde#18\",\"2297\":\"v-77c78bde#18/0\",\"2298\":\"v-77c78bde#18/1\",\"2299\":\"v-77c78bde#18/2\",\"2300\":\"v-77c78bde#18/3\",\"2301\":\"v-77c78bde#18/4\",\"2302\":\"v-77c78bde#18/5\",\"2303\":\"v-77c78bde#18/6\",\"2304\":\"v-77c78bde#18/7\",\"2305\":\"v-265d1e46\",\"2306\":\"v-265d1e46#1\",\"2307\":\"v-265d1e46#1/0\",\"2308\":\"v-265d1e46#1/1\",\"2309\":\"v-265d1e46#1/2\",\"2310\":\"v-265d1e46#1/3\",\"2311\":\"v-265d1e46#1/4\",\"2312\":\"v-265d1e46#1/5\",\"2313\":\"v-265d1e46#1/6\",\"2314\":\"v-265d1e46#1/7\",\"2315\":\"v-265d1e46#2\",\"2316\":\"v-265d1e46#3\",\"2317\":\"v-6703a744\",\"2318\":\"v-6703a744#1\",\"2319\":\"v-6703a744#2\",\"2320\":\"v-6703a744#3\",\"2321\":\"v-6703a744#3/0\",\"2322\":\"v-6703a744#3/1\",\"2323\":\"v-6703a744#3/2\",\"2324\":\"v-6703a744#3/3\",\"2325\":\"v-6703a744#3/4\",\"2326\":\"v-6703a744#3/5\",\"2327\":\"v-6703a744#3/6\",\"2328\":\"v-6703a744#3/7\",\"2329\":\"v-6703a744#3/8\",\"2330\":\"v-6703a744#3/9\",\"2331\":\"v-6703a744#3/10\",\"2332\":\"v-6703a744#3/11\",\"2333\":\"v-6703a744#3/12\",\"2334\":\"v-6703a744#3/13\",\"2335\":\"v-6703a744#3/14\",\"2336\":\"v-6703a744#3/15\",\"2337\":\"v-6703a744#3/16\",\"2338\":\"v-6703a744#3/17\",\"2339\":\"v-6703a744#3/18\",\"2340\":\"v-6703a744#3/19\",\"2341\":\"v-6703a744#3/20\",\"2342\":\"v-6703a744#3/21\",\"2343\":\"v-6703a744#3/22\",\"2344\":\"v-6703a744#4\",\"2345\":\"v-6703a744#4/0\",\"2346\":\"v-6703a744#5\",\"2347\":\"v-6703a744#5/0\",\"2348\":\"v-6703a744#5/1\",\"2349\":\"v-6703a744#5/2\",\"2350\":\"v-6703a744#5/3\",\"2351\":\"v-6703a744#5/4\",\"2352\":\"v-6703a744#5/5\",\"2353\":\"v-6703a744#5/6\",\"2354\":\"v-6703a744#5/7\",\"2355\":\"v-6703a744#5/8\",\"2356\":\"v-6703a744#5/9\",\"2357\":\"v-6703a744#5/10\",\"2358\":\"v-6703a744#5/11\",\"2359\":\"v-6703a744#5/12\",\"2360\":\"v-6703a744#5/13\",\"2361\":\"v-6703a744#6\",\"2362\":\"v-6703a744#6/0\",\"2363\":\"v-6703a744#6/1\",\"2364\":\"v-6703a744#6/2\",\"2365\":\"v-6703a744#6/3\",\"2366\":\"v-6703a744#6/4\",\"2367\":\"v-6703a744#6/5\",\"2368\":\"v-6703a744#6/6\",\"2369\":\"v-6703a744#6/7\",\"2370\":\"v-6703a744#6/8\",\"2371\":\"v-6703a744#6/9\",\"2372\":\"v-6703a744#6/10\",\"2373\":\"v-6703a744#6/11\",\"2374\":\"v-6703a744#6/12\",\"2375\":\"v-6703a744#6/13\",\"2376\":\"v-6703a744#6/14\",\"2377\":\"v-6703a744#7\",\"2378\":\"v-6703a744#7/0\",\"2379\":\"v-6703a744#7/1\",\"2380\":\"v-6703a744#7/2\",\"2381\":\"v-6703a744#7/3\",\"2382\":\"v-6703a744#8\",\"2383\":\"v-6703a744#8/0\",\"2384\":\"v-6703a744#8/1\",\"2385\":\"v-6703a744#8/2\",\"2386\":\"v-6703a744#8/3\",\"2387\":\"v-6703a744#8/4\",\"2388\":\"v-6703a744#8/5\",\"2389\":\"v-6703a744#8/6\",\"2390\":\"v-6703a744#8/7\",\"2391\":\"v-6703a744#9\",\"2392\":\"v-6703a744#9/0\",\"2393\":\"v-6703a744#9/1\",\"2394\":\"v-6703a744#9/2\",\"2395\":\"v-6703a744#9/3\",\"2396\":\"v-6703a744#9/4\",\"2397\":\"v-6703a744#9/5\",\"2398\":\"v-6703a744#9/6\",\"2399\":\"v-6703a744#9/7\",\"2400\":\"v-6703a744#10\",\"2401\":\"v-6703a744#10/0\",\"2402\":\"v-6703a744#10/1\",\"2403\":\"v-6703a744#10/2\",\"2404\":\"v-6703a744#10/3\",\"2405\":\"v-6703a744#10/4\",\"2406\":\"v-6703a744#10/5\",\"2407\":\"v-6703a744#10/6\",\"2408\":\"v-6703a744#11\",\"2409\":\"v-6703a744#11/0\",\"2410\":\"v-6703a744#11/1\",\"2411\":\"v-6703a744#11/2\",\"2412\":\"v-6703a744#12\",\"2413\":\"v-6703a744#12/0\",\"2414\":\"v-6703a744#12/1\",\"2415\":\"v-6703a744#12/2\",\"2416\":\"v-6703a744#12/3\",\"2417\":\"v-6703a744#12/4\",\"2418\":\"v-6703a744#13\",\"2419\":\"v-6703a744#13/0\",\"2420\":\"v-6703a744#13/1\",\"2421\":\"v-6703a744#13/2\",\"2422\":\"v-6703a744#13/3\",\"2423\":\"v-6703a744#13/4\",\"2424\":\"v-6703a744#13/5\",\"2425\":\"v-6703a744#13/6\",\"2426\":\"v-6703a744#13/7\",\"2427\":\"v-6703a744#13/8\",\"2428\":\"v-6703a744#13/9\",\"2429\":\"v-6703a744#13/10\",\"2430\":\"v-6703a744#13/11\",\"2431\":\"v-6703a744#13/12\",\"2432\":\"v-6703a744#13/13\",\"2433\":\"v-6703a744#13/14\",\"2434\":\"v-6703a744#13/15\",\"2435\":\"v-6703a744#13/16\",\"2436\":\"v-6703a744#13/17\",\"2437\":\"v-6703a744#13/18\",\"2438\":\"v-6703a744#13/19\",\"2439\":\"v-6703a744#13/20\",\"2440\":\"v-6703a744#13/21\",\"2441\":\"v-6703a744#13/22\",\"2442\":\"v-6703a744#13/23\",\"2443\":\"v-6703a744#13/24\",\"2444\":\"v-6703a744#13/25\",\"2445\":\"v-6703a744#14\",\"2446\":\"v-6703a744#14/0\",\"2447\":\"v-6703a744#14/1\",\"2448\":\"v-6703a744#15\",\"2449\":\"v-6703a744#15/0\",\"2450\":\"v-6703a744#15/1\",\"2451\":\"v-6703a744#15/2\",\"2452\":\"v-6703a744#15/3\",\"2453\":\"v-6703a744#15/4\",\"2454\":\"v-6703a744#15/5\",\"2455\":\"v-6703a744#15/6\",\"2456\":\"v-6703a744#15/7\",\"2457\":\"v-6703a744#15/8\",\"2458\":\"v-6703a744#15/9\",\"2459\":\"v-6703a744#15/10\",\"2460\":\"v-6703a744#15/11\",\"2461\":\"v-6703a744#15/12\",\"2462\":\"v-6703a744#15/13\",\"2463\":\"v-6703a744#15/14\",\"2464\":\"v-6703a744#15/15\",\"2465\":\"v-6703a744#15/16\",\"2466\":\"v-6703a744#15/17\",\"2467\":\"v-6703a744#16\",\"2468\":\"v-6703a744#16/0\",\"2469\":\"v-6703a744#16/1\",\"2470\":\"v-6703a744#16/2\",\"2471\":\"v-6703a744#16/3\",\"2472\":\"v-6703a744#16/4\",\"2473\":\"v-6703a744#17\",\"2474\":\"v-6703a744#17/0\",\"2475\":\"v-6703a744#17/1\",\"2476\":\"v-6703a744#17/2\",\"2477\":\"v-6703a744#17/3\",\"2478\":\"v-6703a744#17/4\",\"2479\":\"v-6703a744#17/5\",\"2480\":\"v-6703a744#17/6\",\"2481\":\"v-6703a744#17/7\",\"2482\":\"v-6703a744#17/8\",\"2483\":\"v-6703a744#18\",\"2484\":\"v-6703a744#18/0\",\"2485\":\"v-6703a744#18/1\",\"2486\":\"v-6703a744#18/2\",\"2487\":\"v-6703a744#18/3\",\"2488\":\"v-6703a744#18/4\",\"2489\":\"v-6703a744#18/5\",\"2490\":\"v-6703a744#18/6\",\"2491\":\"v-6703a744#18/7\",\"2492\":\"v-6703a744#18/8\",\"2493\":\"v-6703a744#18/9\",\"2494\":\"v-6703a744#18/10\",\"2495\":\"v-6703a744#18/11\",\"2496\":\"v-6703a744#18/12\",\"2497\":\"v-6703a744#18/13\",\"2498\":\"v-6703a744#18/14\",\"2499\":\"v-6703a744#18/15\",\"2500\":\"v-6703a744#18/16\",\"2501\":\"v-6703a744#19\",\"2502\":\"v-6703a744#19/0\",\"2503\":\"v-6703a744#19/1\",\"2504\":\"v-6703a744#19/2\",\"2505\":\"v-6703a744#19/3\",\"2506\":\"v-6703a744#19/4\",\"2507\":\"v-6703a744#19/5\",\"2508\":\"v-6703a744#19/6\",\"2509\":\"v-6703a744#19/7\",\"2510\":\"v-6703a744#19/8\",\"2511\":\"v-6703a744#19/9\",\"2512\":\"v-6703a744#19/10\",\"2513\":\"v-6703a744#19/11\",\"2514\":\"v-6703a744#20\",\"2515\":\"v-6703a744#20/0\",\"2516\":\"v-6703a744#20/1\",\"2517\":\"v-6703a744#20/2\",\"2518\":\"v-6703a744#20/3\",\"2519\":\"v-6703a744#20/4\",\"2520\":\"v-6703a744#20/5\",\"2521\":\"v-6703a744#20/6\",\"2522\":\"v-6703a744#20/7\",\"2523\":\"v-6703a744#20/8\",\"2524\":\"v-6703a744#20/9\",\"2525\":\"v-6703a744#20/10\",\"2526\":\"v-6703a744#20/11\",\"2527\":\"v-6703a744#20/12\",\"2528\":\"v-6703a744#20/13\",\"2529\":\"v-6703a744#20/14\",\"2530\":\"v-6703a744#20/15\",\"2531\":\"v-6703a744#20/16\",\"2532\":\"v-6703a744#21\",\"2533\":\"v-6703a744#21/0\",\"2534\":\"v-6703a744#21/1\",\"2535\":\"v-6703a744#21/2\",\"2536\":\"v-6703a744#21/3\",\"2537\":\"v-6703a744#21/4\",\"2538\":\"v-6703a744#21/5\",\"2539\":\"v-6703a744#21/6\",\"2540\":\"v-6703a744#21/7\",\"2541\":\"v-6703a744#21/8\",\"2542\":\"v-6703a744#21/9\",\"2543\":\"v-6703a744#22\",\"2544\":\"v-6703a744#22/0\",\"2545\":\"v-6703a744#22/1\",\"2546\":\"v-6703a744#22/2\",\"2547\":\"v-6703a744#23\",\"2548\":\"v-6703a744#23/0\",\"2549\":\"v-6703a744#23/1\",\"2550\":\"v-6703a744#23/2\",\"2551\":\"v-6703a744#24\",\"2552\":\"v-6703a744#24/0\",\"2553\":\"v-6703a744#24/1\",\"2554\":\"v-6703a744#24/2\",\"2555\":\"v-6703a744#24/3\",\"2556\":\"v-6703a744#24/4\",\"2557\":\"v-6703a744#25\",\"2558\":\"v-6703a744#25/0\",\"2559\":\"v-6703a744#25/1\",\"2560\":\"v-6703a744#25/2\",\"2561\":\"v-6703a744#25/3\",\"2562\":\"v-6703a744#25/4\",\"2563\":\"v-6703a744#26\",\"2564\":\"v-6703a744#26/0\",\"2565\":\"v-6703a744#26/1\",\"2566\":\"v-6703a744#26/2\",\"2567\":\"v-6703a744#26/3\",\"2568\":\"v-6703a744#26/4\",\"2569\":\"v-6703a744#26/5\",\"2570\":\"v-6703a744#26/6\",\"2571\":\"v-6703a744#26/7\",\"2572\":\"v-6703a744#26/8\",\"2573\":\"v-6703a744#26/9\",\"2574\":\"v-6703a744#26/10\",\"2575\":\"v-6703a744#26/11\",\"2576\":\"v-6703a744#27\",\"2577\":\"v-6703a744#27/0\",\"2578\":\"v-6703a744#27/1\",\"2579\":\"v-6703a744#27/2\",\"2580\":\"v-6703a744#27/3\",\"2581\":\"v-6703a744#28\",\"2582\":\"v-6703a744#28/0\",\"2583\":\"v-6703a744#28/1\",\"2584\":\"v-6703a744#28/2\",\"2585\":\"v-6703a744#29\",\"2586\":\"v-6703a744#29/0\",\"2587\":\"v-6703a744#29/1\",\"2588\":\"v-6703a744#29/2\",\"2589\":\"v-6703a744#29/3\",\"2590\":\"v-6703a744#29/4\",\"2591\":\"v-6703a744#30\",\"2592\":\"v-6703a744#30/0\",\"2593\":\"v-6703a744#30/1\",\"2594\":\"v-6703a744#30/2\",\"2595\":\"v-6703a744#30/3\",\"2596\":\"v-6703a744#30/4\",\"2597\":\"v-6703a744#30/5\",\"2598\":\"v-6703a744#30/6\",\"2599\":\"v-6703a744#30/7\",\"2600\":\"v-6703a744#30/8\",\"2601\":\"v-6703a744#30/9\",\"2602\":\"v-6703a744#30/10\",\"2603\":\"v-6703a744#30/11\",\"2604\":\"v-6703a744#30/12\",\"2605\":\"v-6703a744#30/13\",\"2606\":\"v-6703a744#30/14\",\"2607\":\"v-6703a744#30/15\",\"2608\":\"v-6703a744#30/16\",\"2609\":\"v-6703a744#30/17\",\"2610\":\"v-6703a744#30/18\",\"2611\":\"v-6703a744#30/19\",\"2612\":\"v-6703a744#30/20\",\"2613\":\"v-6703a744#30/21\",\"2614\":\"v-6703a744#31\",\"2615\":\"v-6703a744#31/0\",\"2616\":\"v-6703a744#31/1\",\"2617\":\"v-6703a744#31/2\",\"2618\":\"v-6703a744#31/3\",\"2619\":\"v-6703a744#31/4\",\"2620\":\"v-6703a744#31/5\",\"2621\":\"v-6703a744#31/6\",\"2622\":\"v-6703a744#31/7\",\"2623\":\"v-6703a744#31/8\",\"2624\":\"v-6703a744#31/9\",\"2625\":\"v-6703a744#31/10\",\"2626\":\"v-6703a744#31/11\",\"2627\":\"v-6703a744#31/12\",\"2628\":\"v-6703a744#31/13\",\"2629\":\"v-6703a744#32\",\"2630\":\"v-6703a744#32/0\",\"2631\":\"v-6703a744#32/1\",\"2632\":\"v-6703a744#32/2\",\"2633\":\"v-6703a744#32/3\",\"2634\":\"v-6703a744#32/4\",\"2635\":\"v-6703a744#33\",\"2636\":\"v-6703a744#33/0\",\"2637\":\"v-6703a744#33/1\",\"2638\":\"v-6703a744#33/2\",\"2639\":\"v-6703a744#34\",\"2640\":\"v-6703a744#35\",\"2641\":\"v-6703a744#35/0\",\"2642\":\"v-6703a744#36\",\"2643\":\"v-6703a744#36/0\",\"2644\":\"v-6703a744#36/1\",\"2645\":\"v-6703a744#37\",\"2646\":\"v-6703a744#37/0\",\"2647\":\"v-6703a744#38\",\"2648\":\"v-6703a744#38/0\",\"2649\":\"v-6703a744#38/1\",\"2650\":\"v-6703a744#38/2\",\"2651\":\"v-6703a744#38/3\",\"2652\":\"v-6703a744#39\",\"2653\":\"v-6703a744#39/0\",\"2654\":\"v-6703a744#40\",\"2655\":\"v-6703a744#40/0\",\"2656\":\"v-6703a744#41\",\"2657\":\"v-6703a744#41/0\",\"2658\":\"v-6703a744#42\",\"2659\":\"v-6703a744#43\",\"2660\":\"v-6703a744#43/0\",\"2661\":\"v-6703a744#43/1\",\"2662\":\"v-6703a744#43/2\",\"2663\":\"v-6703a744#44\",\"2664\":\"v-6703a744#44/0\",\"2665\":\"v-6703a744#44/1\",\"2666\":\"v-959e8c2a\",\"2667\":\"v-959e8c2a#1\",\"2668\":\"v-959e8c2a#2\",\"2669\":\"v-959e8c2a#2/0\",\"2670\":\"v-959e8c2a#2/1\",\"2671\":\"v-959e8c2a#2/2\",\"2672\":\"v-959e8c2a#2/3\",\"2673\":\"v-959e8c2a#3\",\"2674\":\"v-959e8c2a#3/0\",\"2675\":\"v-959e8c2a#3/1\",\"2676\":\"v-959e8c2a#4\",\"2677\":\"v-959e8c2a#5\",\"2678\":\"v-959e8c2a#6\",\"2679\":\"v-959e8c2a#6/0\",\"2680\":\"v-959e8c2a#6/1\",\"2681\":\"v-959e8c2a#6/2\",\"2682\":\"v-959e8c2a#6/3\",\"2683\":\"v-959e8c2a#6/4\",\"2684\":\"v-959e8c2a#7\",\"2685\":\"v-959e8c2a#7/0\",\"2686\":\"v-959e8c2a#7/1\",\"2687\":\"v-959e8c2a#7/2\",\"2688\":\"v-959e8c2a#8\",\"2689\":\"v-959e8c2a#9\",\"2690\":\"v-959e8c2a#9/0\",\"2691\":\"v-959e8c2a#9/1\",\"2692\":\"v-959e8c2a#9/2\",\"2693\":\"v-959e8c2a#9/3\",\"2694\":\"v-959e8c2a#10\",\"2695\":\"v-959e8c2a#10/0\",\"2696\":\"v-959e8c2a#11\",\"2697\":\"v-959e8c2a#12\",\"2698\":\"v-959e8c2a#12/0\",\"2699\":\"v-959e8c2a#12/1\",\"2700\":\"v-959e8c2a#12/2\",\"2701\":\"v-959e8c2a#13\",\"2702\":\"v-959e8c2a#13/0\",\"2703\":\"v-959e8c2a#14\",\"2704\":\"v-959e8c2a#15\",\"2705\":\"v-959e8c2a#15/0\",\"2706\":\"v-959e8c2a#15/1\",\"2707\":\"v-959e8c2a#15/2\",\"2708\":\"v-959e8c2a#15/3\",\"2709\":\"v-959e8c2a#16\",\"2710\":\"v-959e8c2a#16/0\",\"2711\":\"v-959e8c2a#17\",\"2712\":\"v-959e8c2a#18\",\"2713\":\"v-959e8c2a#18/0\",\"2714\":\"v-959e8c2a#18/1\",\"2715\":\"v-959e8c2a#18/2\",\"2716\":\"v-959e8c2a#18/3\",\"2717\":\"v-959e8c2a#19\",\"2718\":\"v-959e8c2a#19/0\",\"2719\":\"v-959e8c2a#20\",\"2720\":\"v-959e8c2a#20/0\",\"2721\":\"v-959e8c2a#20/1\",\"2722\":\"v-959e8c2a#20/2\",\"2723\":\"v-959e8c2a#20/3\",\"2724\":\"v-959e8c2a#21\",\"2725\":\"v-959e8c2a#21/0\",\"2726\":\"v-959e8c2a#21/1\",\"2727\":\"v-959e8c2a#21/2\",\"2728\":\"v-959e8c2a#22\",\"2729\":\"v-959e8c2a#22/3\",\"2730\":\"v-959e8c2a#22/4\",\"2731\":\"v-959e8c2a#22/5\",\"2732\":\"v-959e8c2a#23\",\"2733\":\"v-959e8c2a#23/0\",\"2734\":\"v-959e8c2a#23/1\",\"2735\":\"v-959e8c2a#23/2\",\"2736\":\"v-959e8c2a#23/3\",\"2737\":\"v-959e8c2a#23/4\",\"2738\":\"v-959e8c2a#24\",\"2739\":\"v-959e8c2a#24/0\",\"2740\":\"v-959e8c2a#24/1\",\"2741\":\"v-959e8c2a#24/2\",\"2742\":\"v-959e8c2a#24/3\",\"2743\":\"v-959e8c2a#24/4\",\"2744\":\"v-959e8c2a#24/5\",\"2745\":\"v-959e8c2a#24/6\",\"2746\":\"v-959e8c2a#24/7\",\"2747\":\"v-959e8c2a#24/8\",\"2748\":\"v-959e8c2a#24/9\",\"2749\":\"v-959e8c2a#24/10\",\"2750\":\"v-959e8c2a#24/11\",\"2751\":\"v-959e8c2a#25\",\"2752\":\"v-959e8c2a#26\",\"2753\":\"v-959e8c2a#26/0\",\"2754\":\"v-959e8c2a#26/1\",\"2755\":\"v-959e8c2a#26/2\",\"2756\":\"v-959e8c2a#26/3\",\"2757\":\"v-959e8c2a#26/4\",\"2758\":\"v-959e8c2a#26/5\",\"2759\":\"v-959e8c2a#26/6\",\"2760\":\"v-959e8c2a#27\",\"2761\":\"v-959e8c2a#27/0\",\"2762\":\"v-959e8c2a#27/1\",\"2763\":\"v-959e8c2a#27/2\",\"2764\":\"v-959e8c2a#27/3\",\"2765\":\"v-959e8c2a#27/4\",\"2766\":\"v-959e8c2a#27/5\",\"2767\":\"v-959e8c2a#27/6\",\"2768\":\"v-959e8c2a#27/7\",\"2769\":\"v-959e8c2a#27/8\",\"2770\":\"v-959e8c2a#27/9\",\"2771\":\"v-959e8c2a#27/10\",\"2772\":\"v-959e8c2a#28\",\"2773\":\"v-959e8c2a#29\",\"2774\":\"v-959e8c2a#30\",\"2775\":\"v-959e8c2a#31\",\"2776\":\"v-959e8c2a#31/0\",\"2777\":\"v-959e8c2a#32\",\"2778\":\"v-959e8c2a#32/0\",\"2779\":\"v-959e8c2a#32/1\",\"2780\":\"v-959e8c2a#32/2\",\"2781\":\"v-959e8c2a#32/3\",\"2782\":\"v-959e8c2a#32/4\",\"2783\":\"v-959e8c2a#32/5\",\"2784\":\"v-959e8c2a#32/6\",\"2785\":\"v-959e8c2a#32/7\",\"2786\":\"v-959e8c2a#32/8\",\"2787\":\"v-959e8c2a#32/9\",\"2788\":\"v-959e8c2a#32/10\",\"2789\":\"v-959e8c2a#32/11\",\"2790\":\"v-959e8c2a#32/12\",\"2791\":\"v-959e8c2a#32/13\",\"2792\":\"v-959e8c2a#32/14\",\"2793\":\"v-959e8c2a#33\",\"2794\":\"v-959e8c2a#33/0\",\"2795\":\"v-959e8c2a#34\",\"2796\":\"v-959e8c2a#34/0\",\"2797\":\"v-959e8c2a#34/1\",\"2798\":\"v-959e8c2a#34/2\",\"2799\":\"v-959e8c2a#35\",\"2800\":\"v-959e8c2a#35/0\",\"2801\":\"v-959e8c2a#35/1\",\"2802\":\"v-959e8c2a#36\",\"2803\":\"v-959e8c2a#36/0\",\"2804\":\"v-959e8c2a#36/1\",\"2805\":\"v-959e8c2a#36/2\",\"2806\":\"v-959e8c2a#37\",\"2807\":\"v-959e8c2a#37/0\",\"2808\":\"v-959e8c2a#37/1\",\"2809\":\"v-959e8c2a#37/2\",\"2810\":\"v-959e8c2a#37/3\",\"2811\":\"v-959e8c2a#37/4\",\"2812\":\"v-959e8c2a#37/5\",\"2813\":\"v-959e8c2a#37/6\",\"2814\":\"v-959e8c2a#38\",\"2815\":\"v-959e8c2a#38/0\",\"2816\":\"v-959e8c2a#39\",\"2817\":\"v-959e8c2a#39/0\",\"2818\":\"v-b44a5be0\",\"2819\":\"v-b44a5be0#1\",\"2820\":\"v-b44a5be0#2\",\"2821\":\"v-b44a5be0#2/0\",\"2822\":\"v-b44a5be0#2/1\",\"2823\":\"v-b44a5be0#2/2\",\"2824\":\"v-b44a5be0#2/3\",\"2825\":\"v-b44a5be0#2/4\",\"2826\":\"v-b44a5be0#2/5\",\"2827\":\"v-b44a5be0#3\",\"2828\":\"v-b44a5be0#3/0\",\"2829\":\"v-b44a5be0#3/1\",\"2830\":\"v-b44a5be0#3/2\",\"2831\":\"v-b44a5be0#3/3\",\"2832\":\"v-b44a5be0#3/4\",\"2833\":\"v-b44a5be0#3/5\",\"2834\":\"v-b44a5be0#4\",\"2835\":\"v-b44a5be0#4/0\",\"2836\":\"v-b44a5be0#5\",\"2837\":\"v-b44a5be0#5/0\",\"2838\":\"v-b44a5be0#6\",\"2839\":\"v-b44a5be0#6/0\",\"2840\":\"v-b44a5be0#6/1\",\"2841\":\"v-b44a5be0#6/2\",\"2842\":\"v-b44a5be0#6/3\",\"2843\":\"v-b44a5be0#6/4\",\"2844\":\"v-b44a5be0#7\",\"2845\":\"v-b44a5be0#7/0\",\"2846\":\"v-b44a5be0#7/1\",\"2847\":\"v-b44a5be0#7/2\",\"2848\":\"v-b44a5be0#7/3\",\"2849\":\"v-b44a5be0#8\",\"2850\":\"v-b44a5be0#8/0\",\"2851\":\"v-b44a5be0#8/1\",\"2852\":\"v-b44a5be0#9\",\"2853\":\"v-b44a5be0#9/0\",\"2854\":\"v-b44a5be0#9/1\",\"2855\":\"v-b44a5be0#10\",\"2856\":\"v-b44a5be0#10/0\",\"2857\":\"v-b44a5be0#10/1\",\"2858\":\"v-b44a5be0#10/2\",\"2859\":\"v-b44a5be0#10/3\",\"2860\":\"v-b44a5be0#10/4\",\"2861\":\"v-b44a5be0#11\",\"2862\":\"v-b44a5be0#11/0\",\"2863\":\"v-b44a5be0#11/1\",\"2864\":\"v-b44a5be0#11/2\",\"2865\":\"v-b44a5be0#11/3\",\"2866\":\"v-b44a5be0#11/4\",\"2867\":\"v-b44a5be0#11/5\",\"2868\":\"v-b44a5be0#11/6\",\"2869\":\"v-b44a5be0#11/7\",\"2870\":\"v-b44a5be0#11/8\",\"2871\":\"v-b44a5be0#11/9\",\"2872\":\"v-b44a5be0#11/10\",\"2873\":\"v-b44a5be0#11/11\",\"2874\":\"v-b44a5be0#11/12\",\"2875\":\"v-b44a5be0#11/13\",\"2876\":\"v-b44a5be0#11/14\",\"2877\":\"v-b44a5be0#12\",\"2878\":\"v-b44a5be0#12/0\",\"2879\":\"v-b44a5be0#12/1\",\"2880\":\"v-b44a5be0#12/2\",\"2881\":\"v-b44a5be0#12/3\",\"2882\":\"v-b44a5be0#13\",\"2883\":\"v-b44a5be0#13/0\",\"2884\":\"v-b44a5be0#13/1\",\"2885\":\"v-b44a5be0#14\",\"2886\":\"v-b44a5be0#14/0\",\"2887\":\"v-b44a5be0#14/1\",\"2888\":\"v-b44a5be0#14/2\",\"2889\":\"v-b44a5be0#14/3\",\"2890\":\"v-b44a5be0#14/4\",\"2891\":\"v-b44a5be0#14/5\",\"2892\":\"v-b44a5be0#15\",\"2893\":\"v-b44a5be0#15/0\",\"2894\":\"v-b44a5be0#15/1\",\"2895\":\"v-b44a5be0#16\",\"2896\":\"v-b44a5be0#16/0\",\"2897\":\"v-b44a5be0#16/1\",\"2898\":\"v-b44a5be0#16/2\",\"2899\":\"v-b44a5be0#17\",\"2900\":\"v-b44a5be0#17/0\",\"2901\":\"v-b44a5be0#17/1\",\"2902\":\"v-b44a5be0#17/2\",\"2903\":\"v-b44a5be0#18\",\"2904\":\"v-b44a5be0#18/0\",\"2905\":\"v-b44a5be0#19\",\"2906\":\"v-b44a5be0#19/0\",\"2907\":\"v-b44a5be0#20\",\"2908\":\"v-b44a5be0#20/0\",\"2909\":\"v-b44a5be0#20/1\",\"2910\":\"v-b44a5be0#20/2\",\"2911\":\"v-b44a5be0#20/3\",\"2912\":\"v-b44a5be0#21\",\"2913\":\"v-b44a5be0#21/0\",\"2914\":\"v-b44a5be0#21/1\",\"2915\":\"v-b44a5be0#21/2\",\"2916\":\"v-b44a5be0#21/3\",\"2917\":\"v-b44a5be0#21/4\",\"2918\":\"v-b44a5be0#21/5\",\"2919\":\"v-b44a5be0#21/6\",\"2920\":\"v-b44a5be0#21/7\",\"2921\":\"v-b44a5be0#22\",\"2922\":\"v-b44a5be0#22/0\",\"2923\":\"v-b44a5be0#22/1\",\"2924\":\"v-b44a5be0#22/2\",\"2925\":\"v-b44a5be0#22/3\",\"2926\":\"v-b44a5be0#23\",\"2927\":\"v-b44a5be0#23/0\",\"2928\":\"v-b44a5be0#23/1\",\"2929\":\"v-b44a5be0#23/2\",\"2930\":\"v-b44a5be0#23/3\",\"2931\":\"v-b44a5be0#23/4\",\"2932\":\"v-b44a5be0#23/5\",\"2933\":\"v-b44a5be0#24\",\"2934\":\"v-b44a5be0#24/0\",\"2935\":\"v-b44a5be0#25\",\"2936\":\"v-b44a5be0#26\",\"2937\":\"v-b44a5be0#26/0\",\"2938\":\"v-b44a5be0#26/1\",\"2939\":\"v-b44a5be0#26/2\",\"2940\":\"v-b44a5be0#26/3\",\"2941\":\"v-b44a5be0#26/4\",\"2942\":\"v-b44a5be0#27\",\"2943\":\"v-b44a5be0#27/0\",\"2944\":\"v-b44a5be0#27/1\",\"2945\":\"v-b44a5be0#28\",\"2946\":\"v-b44a5be0#28/0\",\"2947\":\"v-b44a5be0#28/1\",\"2948\":\"v-b44a5be0#28/2\",\"2949\":\"v-b44a5be0#28/3\",\"2950\":\"v-b44a5be0#28/4\",\"2951\":\"v-b44a5be0#28/5\",\"2952\":\"v-b44a5be0#28/6\",\"2953\":\"v-b44a5be0#28/7\",\"2954\":\"v-b44a5be0#28/8\",\"2955\":\"v-b44a5be0#28/9\",\"2956\":\"v-b44a5be0#28/10\",\"2957\":\"v-b44a5be0#28/11\",\"2958\":\"v-b44a5be0#28/12\",\"2959\":\"v-b44a5be0#29\",\"2960\":\"v-b44a5be0#29/0\",\"2961\":\"v-b44a5be0#29/1\",\"2962\":\"v-b44a5be0#30\",\"2963\":\"v-b44a5be0#31\",\"2964\":\"v-b44a5be0#31/0\",\"2965\":\"v-b44a5be0#32\",\"2966\":\"v-b44a5be0#32/0\",\"2967\":\"v-b44a5be0#33\",\"2968\":\"v-b44a5be0#33/0\",\"2969\":\"v-b44a5be0#33/1\",\"2970\":\"v-b44a5be0#33/2\",\"2971\":\"v-b44a5be0#34\",\"2972\":\"v-b44a5be0#34/0\",\"2973\":\"v-b44a5be0#34/1\",\"2974\":\"v-b44a5be0#34/2\",\"2975\":\"v-b44a5be0#34/3\",\"2976\":\"v-b44a5be0#35\",\"2977\":\"v-b44a5be0#35/0\",\"2978\":\"v-b44a5be0#35/1\",\"2979\":\"v-b44a5be0#35/2\",\"2980\":\"v-b44a5be0#36\",\"2981\":\"v-b44a5be0#36/0\",\"2982\":\"v-b44a5be0#36/1\",\"2983\":\"v-b44a5be0#37\",\"2984\":\"v-b44a5be0#37/0\",\"2985\":\"v-b44a5be0#37/1\",\"2986\":\"v-b44a5be0#38\",\"2987\":\"v-b44a5be0#38/0\",\"2988\":\"v-b44a5be0#38/1\",\"2989\":\"v-b44a5be0#38/2\",\"2990\":\"v-b44a5be0#38/3\",\"2991\":\"v-b44a5be0#38/4\",\"2992\":\"v-b44a5be0#38/5\",\"2993\":\"v-b44a5be0#38/6\",\"2994\":\"v-b44a5be0#38/7\",\"2995\":\"v-b44a5be0#38/8\",\"2996\":\"v-b44a5be0#39\",\"2997\":\"v-b44a5be0#40\",\"2998\":\"v-b44a5be0#40/0\",\"2999\":\"v-b44a5be0#40/1\",\"3000\":\"v-b44a5be0#40/2\",\"3001\":\"v-b44a5be0#40/3\",\"3002\":\"v-b44a5be0#40/4\",\"3003\":\"v-b44a5be0#40/5\",\"3004\":\"v-b44a5be0#40/6\",\"3005\":\"v-b44a5be0#40/7\",\"3006\":\"v-b44a5be0#40/8\",\"3007\":\"v-b44a5be0#40/9\",\"3008\":\"v-b44a5be0#41\",\"3009\":\"v-b44a5be0#41/0\",\"3010\":\"v-b44a5be0#41/1\",\"3011\":\"v-b44a5be0#41/2\",\"3012\":\"v-b44a5be0#41/3\",\"3013\":\"v-b44a5be0#42\",\"3014\":\"v-b44a5be0#42/0\",\"3015\":\"v-b44a5be0#42/1\",\"3016\":\"v-b44a5be0#42/2\",\"3017\":\"v-b44a5be0#42/3\",\"3018\":\"v-b44a5be0#43\",\"3019\":\"v-b44a5be0#44\",\"3020\":\"v-b44a5be0#44/0\",\"3021\":\"v-b44a5be0#44/1\",\"3022\":\"v-b44a5be0#44/2\",\"3023\":\"v-b44a5be0#45\",\"3024\":\"v-b44a5be0#45/0\",\"3025\":\"v-b44a5be0#45/1\",\"3026\":\"v-b44a5be0#45/2\",\"3027\":\"v-b44a5be0#45/3\",\"3028\":\"v-b44a5be0#45/4\",\"3029\":\"v-b44a5be0#45/5\",\"3030\":\"v-b44a5be0#45/6\",\"3031\":\"v-b44a5be0#45/7\",\"3032\":\"v-b44a5be0#45/8\",\"3033\":\"v-b44a5be0#46\",\"3034\":\"v-b44a5be0#47\",\"3035\":\"v-b44a5be0#47/0\",\"3036\":\"v-b44a5be0#47/1\",\"3037\":\"v-b44a5be0#47/2\",\"3038\":\"v-b44a5be0#47/3\",\"3039\":\"v-b44a5be0#48\",\"3040\":\"v-b44a5be0#48/0\",\"3041\":\"v-b44a5be0#48/1\",\"3042\":\"v-b44a5be0#48/2\",\"3043\":\"v-b44a5be0#48/3\",\"3044\":\"v-b44a5be0#48/4\",\"3045\":\"v-b44a5be0#48/5\",\"3046\":\"v-b44a5be0#48/6\",\"3047\":\"v-b44a5be0#48/7\",\"3048\":\"v-b44a5be0#48/8\",\"3049\":\"v-b44a5be0#48/9\",\"3050\":\"v-b44a5be0#48/10\",\"3051\":\"v-b44a5be0#48/11\",\"3052\":\"v-b44a5be0#48/12\",\"3053\":\"v-b44a5be0#48/13\",\"3054\":\"v-b44a5be0#48/14\",\"3055\":\"v-b44a5be0#48/15\",\"3056\":\"v-b44a5be0#48/16\",\"3057\":\"v-b44a5be0#48/17\",\"3058\":\"v-b44a5be0#48/18\",\"3059\":\"v-b44a5be0#48/19\",\"3060\":\"v-b44a5be0#48/20\",\"3061\":\"v-b44a5be0#48/21\",\"3062\":\"v-b44a5be0#48/22\",\"3063\":\"v-b44a5be0#48/23\",\"3064\":\"v-b44a5be0#48/24\",\"3065\":\"v-b44a5be0#48/25\",\"3066\":\"v-b44a5be0#48/26\",\"3067\":\"v-b44a5be0#48/27\",\"3068\":\"v-b44a5be0#48/28\",\"3069\":\"v-b44a5be0#48/29\",\"3070\":\"v-b44a5be0#48/30\",\"3071\":\"v-b44a5be0#48/31\",\"3072\":\"v-b44a5be0#48/32\",\"3073\":\"v-b44a5be0#48/33\",\"3074\":\"v-b44a5be0#48/34\",\"3075\":\"v-b44a5be0#48/35\",\"3076\":\"v-b44a5be0#48/36\",\"3077\":\"v-b44a5be0#48/37\",\"3078\":\"v-b44a5be0#48/38\",\"3079\":\"v-b44a5be0#48/39\",\"3080\":\"v-b44a5be0#48/40\",\"3081\":\"v-b44a5be0#48/41\",\"3082\":\"v-b44a5be0#48/42\",\"3083\":\"v-b44a5be0#48/43\",\"3084\":\"v-b44a5be0#49\",\"3085\":\"v-b44a5be0#49/0\",\"3086\":\"v-b44a5be0#49/1\",\"3087\":\"v-b44a5be0#49/2\",\"3088\":\"v-b44a5be0#49/3\",\"3089\":\"v-b44a5be0#49/4\",\"3090\":\"v-b44a5be0#49/5\",\"3091\":\"v-b44a5be0#49/6\",\"3092\":\"v-b44a5be0#49/7\",\"3093\":\"v-b44a5be0#50\",\"3094\":\"v-b44a5be0#50/0\",\"3095\":\"v-b44a5be0#50/1\",\"3096\":\"v-b44a5be0#50/2\",\"3097\":\"v-b44a5be0#50/3\",\"3098\":\"v-b44a5be0#50/4\",\"3099\":\"v-b44a5be0#50/5\",\"3100\":\"v-b44a5be0#50/6\",\"3101\":\"v-b44a5be0#50/7\",\"3102\":\"v-b44a5be0#50/8\",\"3103\":\"v-b44a5be0#50/9\",\"3104\":\"v-b44a5be0#50/10\",\"3105\":\"v-b44a5be0#50/11\",\"3106\":\"v-b44a5be0#50/12\",\"3107\":\"v-63bba594\",\"3108\":\"v-63bba594#1\",\"3109\":\"v-63bba594#2\",\"3110\":\"v-63bba594#3\",\"3111\":\"v-63bba594#3/0\",\"3112\":\"v-63bba594#3/1\",\"3113\":\"v-63bba594#3/2\",\"3114\":\"v-63bba594#3/3\",\"3115\":\"v-63bba594#3/4\",\"3116\":\"v-63bba594#3/5\",\"3117\":\"v-63bba594#4\",\"3118\":\"v-63bba594#4/0\",\"3119\":\"v-63bba594#4/1\",\"3120\":\"v-63bba594#4/2\",\"3121\":\"v-63bba594#4/3\",\"3122\":\"v-63bba594#4/4\",\"3123\":\"v-63bba594#4/5\",\"3124\":\"v-63bba594#4/6\",\"3125\":\"v-63bba594#4/7\",\"3126\":\"v-63bba594#4/8\",\"3127\":\"v-63bba594#4/9\",\"3128\":\"v-63bba594#4/10\",\"3129\":\"v-63bba594#4/11\",\"3130\":\"v-63bba594#4/12\",\"3131\":\"v-63bba594#4/13\",\"3132\":\"v-63bba594#4/14\",\"3133\":\"v-63bba594#4/15\",\"3134\":\"v-63bba594#4/16\",\"3135\":\"v-63bba594#4/17\",\"3136\":\"v-63bba594#4/18\",\"3137\":\"v-63bba594#4/19\",\"3138\":\"v-63bba594#4/20\",\"3139\":\"v-63bba594#5\",\"3140\":\"v-63bba594#6\",\"3141\":\"v-63bba594#6/0\",\"3142\":\"v-63bba594#6/1\",\"3143\":\"v-63bba594#6/2\",\"3144\":\"v-63bba594#6/3\",\"3145\":\"v-63bba594#6/4\",\"3146\":\"v-63bba594#6/5\",\"3147\":\"v-63bba594#6/6\",\"3148\":\"v-63bba594#6/7\",\"3149\":\"v-63bba594#6/8\",\"3150\":\"v-63bba594#6/9\",\"3151\":\"v-63bba594#6/10\",\"3152\":\"v-63bba594#6/11\",\"3153\":\"v-63bba594#6/12\",\"3154\":\"v-63bba594#7\",\"3155\":\"v-63bba594#8\",\"3156\":\"v-63bba594#8/0\",\"3157\":\"v-63bba594#8/1\",\"3158\":\"v-63bba594#8/2\",\"3159\":\"v-63bba594#8/3\",\"3160\":\"v-63bba594#8/4\",\"3161\":\"v-63bba594#8/5\",\"3162\":\"v-63bba594#8/6\",\"3163\":\"v-63bba594#8/7\",\"3164\":\"v-63bba594#8/8\",\"3165\":\"v-63bba594#8/9\",\"3166\":\"v-63bba594#8/10\",\"3167\":\"v-63bba594#8/11\",\"3168\":\"v-63bba594#8/12\",\"3169\":\"v-63bba594#8/13\",\"3170\":\"v-63bba594#8/14\",\"3171\":\"v-63bba594#8/15\",\"3172\":\"v-63bba594#8/16\",\"3173\":\"v-63bba594#8/17\",\"3174\":\"v-63bba594#8/18\",\"3175\":\"v-63bba594#8/19\",\"3176\":\"v-63bba594#8/20\",\"3177\":\"v-63bba594#9\",\"3178\":\"v-63bba594#10\",\"3179\":\"v-63bba594#10/0\",\"3180\":\"v-63bba594#10/1\",\"3181\":\"v-63bba594#10/2\",\"3182\":\"v-63bba594#10/3\",\"3183\":\"v-63bba594#10/4\",\"3184\":\"v-63bba594#10/5\",\"3185\":\"v-63bba594#10/6\",\"3186\":\"v-63bba594#10/7\",\"3187\":\"v-63bba594#10/8\",\"3188\":\"v-4072253d\",\"3189\":\"v-4072253d#1\",\"3190\":\"v-4072253d#1/0\",\"3191\":\"v-4072253d#1/1\",\"3192\":\"v-4072253d#1/2\",\"3193\":\"v-4072253d#1/3\",\"3194\":\"v-4072253d#1/4\",\"3195\":\"v-4072253d#1/5\",\"3196\":\"v-4072253d#1/6\",\"3197\":\"v-4072253d#1/7\",\"3198\":\"v-4072253d#1/8\",\"3199\":\"v-4072253d#1/9\",\"3200\":\"v-4072253d#1/10\",\"3201\":\"v-4072253d#1/11\",\"3202\":\"v-4072253d#1/12\",\"3203\":\"v-4072253d#2\",\"3204\":\"v-4072253d#3\",\"3205\":\"v-4072253d#3/0\",\"3206\":\"v-4072253d#3/1\",\"3207\":\"v-4072253d#3/2\",\"3208\":\"v-4072253d#4\",\"3209\":\"v-4072253d#4/0\",\"3210\":\"v-4072253d#4/1\",\"3211\":\"v-4072253d#4/2\",\"3212\":\"v-4072253d#4/3\",\"3213\":\"v-4072253d#4/4\",\"3214\":\"v-4072253d#5\",\"3215\":\"v-4072253d#5/0\",\"3216\":\"v-4072253d#5/1\",\"3217\":\"v-4072253d#5/2\",\"3218\":\"v-4072253d#6\",\"3219\":\"v-4072253d#6/0\",\"3220\":\"v-4072253d#6/1\",\"3221\":\"v-4072253d#6/2\",\"3222\":\"v-4072253d#7\",\"3223\":\"v-4072253d#7/0\",\"3224\":\"v-4072253d#7/1\",\"3225\":\"v-4072253d#7/2\",\"3226\":\"v-4072253d#7/3\",\"3227\":\"v-4072253d#7/4\",\"3228\":\"v-4072253d#7/5\",\"3229\":\"v-4072253d#7/6\",\"3230\":\"v-4072253d#7/7\",\"3231\":\"v-4072253d#7/8\",\"3232\":\"v-4072253d#7/9\",\"3233\":\"v-4072253d#8\",\"3234\":\"v-4072253d#8/0\",\"3235\":\"v-4072253d#8/1\",\"3236\":\"v-4072253d#8/2\",\"3237\":\"v-4072253d#8/3\",\"3238\":\"v-4072253d#8/4\",\"3239\":\"v-4072253d#8/5\",\"3240\":\"v-4072253d#8/6\",\"3241\":\"v-4072253d#8/7\",\"3242\":\"v-4072253d#8/8\",\"3243\":\"v-4072253d#8/9\",\"3244\":\"v-4072253d#9\",\"3245\":\"v-4072253d#9/0\",\"3246\":\"v-4072253d#9/1\",\"3247\":\"v-4072253d#9/2\",\"3248\":\"v-4072253d#9/3\",\"3249\":\"v-4072253d#9/4\",\"3250\":\"v-4072253d#10\",\"3251\":\"v-4072253d#10/5\",\"3252\":\"v-4072253d#10/6\",\"3253\":\"v-4072253d#10/7\",\"3254\":\"v-4072253d#10/8\",\"3255\":\"v-4072253d#10/9\",\"3256\":\"v-4072253d#10/10\",\"3257\":\"v-4072253d#10/11\",\"3258\":\"v-4072253d#10/12\",\"3259\":\"v-4072253d#10/13\",\"3260\":\"v-4072253d#10/14\",\"3261\":\"v-4072253d#10/15\",\"3262\":\"v-4072253d#10/16\",\"3263\":\"v-4072253d#10/17\",\"3264\":\"v-4072253d#10/18\",\"3265\":\"v-4072253d#10/19\",\"3266\":\"v-4072253d#10/20\",\"3267\":\"v-4072253d#10/21\",\"3268\":\"v-4072253d#10/22\",\"3269\":\"v-4072253d#10/23\",\"3270\":\"v-4072253d#10/24\",\"3271\":\"v-4072253d#10/25\",\"3272\":\"v-4072253d#10/26\",\"3273\":\"v-4072253d#10/27\",\"3274\":\"v-4072253d#10/28\",\"3275\":\"v-4072253d#10/29\",\"3276\":\"v-4072253d#10/30\",\"3277\":\"v-4072253d#10/31\",\"3278\":\"v-4072253d#10/32\",\"3279\":\"v-4072253d#10/33\",\"3280\":\"v-4072253d#10/34\",\"3281\":\"v-4072253d#10/35\",\"3282\":\"v-4072253d#10/36\",\"3283\":\"v-4072253d#10/37\",\"3284\":\"v-4072253d#11\",\"3285\":\"v-4072253d#11/0\",\"3286\":\"v-4072253d#11/1\",\"3287\":\"v-4072253d#11/2\",\"3288\":\"v-4072253d#11/3\",\"3289\":\"v-4072253d#11/4\",\"3290\":\"v-4072253d#11/5\",\"3291\":\"v-4072253d#11/6\",\"3292\":\"v-4072253d#11/7\",\"3293\":\"v-4072253d#11/8\",\"3294\":\"v-4072253d#11/9\",\"3295\":\"v-4072253d#11/10\",\"3296\":\"v-4072253d#11/11\",\"3297\":\"v-4072253d#12\",\"3298\":\"v-4072253d#12/0\",\"3299\":\"v-4072253d#12/1\",\"3300\":\"v-4072253d#12/2\",\"3301\":\"v-4072253d#12/3\",\"3302\":\"v-4072253d#12/4\",\"3303\":\"v-4072253d#12/5\",\"3304\":\"v-4072253d#13\",\"3305\":\"v-4072253d#13/0\",\"3306\":\"v-4072253d#13/1\",\"3307\":\"v-4072253d#13/2\",\"3308\":\"v-4072253d#13/3\",\"3309\":\"v-4072253d#13/4\",\"3310\":\"v-4072253d#13/5\",\"3311\":\"v-4072253d#13/6\",\"3312\":\"v-4072253d#13/7\",\"3313\":\"v-4072253d#13/8\",\"3314\":\"v-4072253d#13/9\",\"3315\":\"v-4072253d#13/10\",\"3316\":\"v-4072253d#13/11\",\"3317\":\"v-4072253d#13/12\",\"3318\":\"v-4072253d#13/13\",\"3319\":\"v-4072253d#13/14\",\"3320\":\"v-4072253d#13/15\",\"3321\":\"v-4072253d#13/16\",\"3322\":\"v-4072253d#14\",\"3323\":\"v-4072253d#14/17\",\"3324\":\"v-5aff0ece\",\"3325\":\"v-5aff0ece#1\",\"3326\":\"v-5aff0ece#1/0\",\"3327\":\"v-5aff0ece#1/1\",\"3328\":\"v-5aff0ece#2\",\"3329\":\"v-5aff0ece#2/0\",\"3330\":\"v-5aff0ece#2/1\",\"3331\":\"v-5aff0ece#2/2\",\"3332\":\"v-5aff0ece#2/3\",\"3333\":\"v-5aff0ece#3\",\"3334\":\"v-5aff0ece#3/0\",\"3335\":\"v-5aff0ece#4\",\"3336\":\"v-5aff0ece#5\",\"3337\":\"v-5aff0ece#5/0\",\"3338\":\"v-5aff0ece#5/1\",\"3339\":\"v-5aff0ece#5/2\",\"3340\":\"v-5aff0ece#5/3\",\"3341\":\"v-5aff0ece#5/4\",\"3342\":\"v-5aff0ece#5/5\",\"3343\":\"v-5aff0ece#5/6\",\"3344\":\"v-5aff0ece#5/7\",\"3345\":\"v-5aff0ece#5/8\",\"3346\":\"v-5aff0ece#5/9\",\"3347\":\"v-5aff0ece#5/10\",\"3348\":\"v-5aff0ece#5/11\",\"3349\":\"v-5aff0ece#5/12\",\"3350\":\"v-5aff0ece#5/13\",\"3351\":\"v-5aff0ece#5/14\",\"3352\":\"v-5aff0ece#5/15\",\"3353\":\"v-5aff0ece#5/16\",\"3354\":\"v-5aff0ece#5/17\",\"3355\":\"v-5aff0ece#5/18\",\"3356\":\"v-5aff0ece#5/19\",\"3357\":\"v-5aff0ece#5/20\",\"3358\":\"v-5aff0ece#5/21\",\"3359\":\"v-5aff0ece#5/22\",\"3360\":\"v-5aff0ece#5/23\",\"3361\":\"v-5aff0ece#5/24\",\"3362\":\"v-5aff0ece#5/25\",\"3363\":\"v-5aff0ece#5/26\",\"3364\":\"v-5aff0ece#5/27\",\"3365\":\"v-5aff0ece#5/28\",\"3366\":\"v-5aff0ece#5/29\",\"3367\":\"v-5aff0ece#5/30\",\"3368\":\"v-5aff0ece#5/31\",\"3369\":\"v-5aff0ece#5/32\",\"3370\":\"v-5aff0ece#5/33\",\"3371\":\"v-5aff0ece#5/34\",\"3372\":\"v-5aff0ece#5/35\",\"3373\":\"v-5aff0ece#5/36\",\"3374\":\"v-5aff0ece#5/37\",\"3375\":\"v-5aff0ece#5/38\",\"3376\":\"v-5aff0ece#5/39\",\"3377\":\"v-5aff0ece#5/40\",\"3378\":\"v-5aff0ece#5/41\",\"3379\":\"v-5aff0ece#5/42\",\"3380\":\"v-5aff0ece#5/43\",\"3381\":\"v-5aff0ece#5/44\",\"3382\":\"v-5aff0ece#5/45\",\"3383\":\"v-5aff0ece#6\",\"3384\":\"v-5aff0ece#6/0\",\"3385\":\"v-5aff0ece#7\",\"3386\":\"v-5aff0ece#7/1\",\"3387\":\"v-5aff0ece#7/2\",\"3388\":\"v-5aff0ece#7/3\",\"3389\":\"v-5aff0ece#8\",\"3390\":\"v-5aff0ece#8/0\",\"3391\":\"v-5aff0ece#9\",\"3392\":\"v-5aff0ece#9/0\",\"3393\":\"v-5aff0ece#10\",\"3394\":\"v-5aff0ece#10/0\",\"3395\":\"v-5aff0ece#10/1\",\"3396\":\"v-5aff0ece#11\",\"3397\":\"v-5aff0ece#11/0\",\"3398\":\"v-5aff0ece#11/1\",\"3399\":\"v-5aff0ece#11/2\",\"3400\":\"v-5aff0ece#11/3\",\"3401\":\"v-5aff0ece#11/4\",\"3402\":\"v-2b64e284\",\"3403\":\"v-2b64e284#1\",\"3404\":\"v-2b64e284#1/0\",\"3405\":\"v-2b64e284#1/1\",\"3406\":\"v-2b64e284#1/2\",\"3407\":\"v-2b64e284#1/3\",\"3408\":\"v-c1942916\",\"3409\":\"v-c1942916#0/0\",\"3410\":\"v-c1942916#0/1\",\"3411\":\"v-c1942916#0/2\",\"3412\":\"v-c1942916#0/3\",\"3413\":\"v-c1942916#0/4\",\"3414\":\"v-c1942916#0/5\",\"3415\":\"v-c1942916#0/6\",\"3416\":\"v-c1942916#0/7\",\"3417\":\"v-c1942916#0/8\",\"3418\":\"v-c1942916#0/9\",\"3419\":\"v-c1942916#0/10\",\"3420\":\"v-c1942916#0/11\",\"3421\":\"v-c1942916#0/12\",\"3422\":\"v-65c00218\",\"3423\":\"v-65c00218#0/0\",\"3424\":\"v-65c00218#0/1\",\"3425\":\"v-65c00218#0/2\",\"3426\":\"v-36295574\",\"3427\":\"v-36295574#0/0\",\"3428\":\"v-36295574#0/1\",\"3429\":\"v-36295574#1\",\"3430\":\"v-36295574#1/0\",\"3431\":\"v-36295574#2\",\"3432\":\"v-36295574#2/0\",\"3433\":\"v-36295574#2/1\",\"3434\":\"v-36295574#2/2\",\"3435\":\"v-36295574#3\",\"3436\":\"v-36295574#3/0\",\"3437\":\"v-36295574#4\",\"3438\":\"v-36295574#4/0\",\"3439\":\"v-36295574#4/1\",\"3440\":\"v-36295574#5\",\"3441\":\"v-36295574#5/0\",\"3442\":\"v-36295574#6\",\"3443\":\"v-36295574#6/0\",\"3444\":\"v-36295574#6/1\",\"3445\":\"v-36295574#6/2\",\"3446\":\"v-36295574#6/3\",\"3447\":\"v-36295574#6/4\",\"3448\":\"v-36295574#6/5\",\"3449\":\"v-36295574#6/6\",\"3450\":\"v-36295574#6/7\",\"3451\":\"v-36295574#6/8\",\"3452\":\"v-36295574#6/9\",\"3453\":\"v-36295574#6/10\",\"3454\":\"v-36295574#6/11\",\"3455\":\"v-36295574#6/12\",\"3456\":\"v-36295574#7\",\"3457\":\"v-36295574#7/0\",\"3458\":\"v-36295574#8\",\"3459\":\"v-36295574#8/0\",\"3460\":\"v-36295574#8/1\",\"3461\":\"v-36295574#9\",\"3462\":\"v-36295574#9/0\",\"3463\":\"v-36295574#9/1\",\"3464\":\"v-36295574#9/2\",\"3465\":\"v-36295574#10\",\"3466\":\"v-36295574#10/0\",\"3467\":\"v-36295574#10/1\",\"3468\":\"v-36295574#11\",\"3469\":\"v-36295574#11/0\",\"3470\":\"v-36295574#11/1\",\"3471\":\"v-36295574#12\",\"3472\":\"v-36295574#12/0\",\"3473\":\"v-36295574#12/1\",\"3474\":\"v-36295574#13\",\"3475\":\"v-36295574#13/0\",\"3476\":\"v-36295574#13/1\",\"3477\":\"v-36295574#13/2\",\"3478\":\"v-36295574#14\",\"3479\":\"v-36295574#14/0\",\"3480\":\"v-36295574#14/1\",\"3481\":\"v-36295574#15\",\"3482\":\"v-36295574#15/0\",\"3483\":\"v-36295574#15/1\",\"3484\":\"v-36295574#16\",\"3485\":\"v-36295574#16/0\",\"3486\":\"v-36295574#17\",\"3487\":\"v-36295574#17/0\",\"3488\":\"v-36295574#18\",\"3489\":\"v-36295574#18/0\",\"3490\":\"v-36295574#19\",\"3491\":\"v-36295574#19/0\",\"3492\":\"v-36295574#20\",\"3493\":\"v-36295574#20/0\",\"3494\":\"v-36295574#20/1\",\"3495\":\"v-36295574#21\",\"3496\":\"v-36295574#21/0\",\"3497\":\"v-36295574#21/1\",\"3498\":\"v-36295574#21/2\",\"3499\":\"v-36295574#21/3\",\"3500\":\"v-36295574#21/4\",\"3501\":\"v-36295574#22\",\"3502\":\"v-36295574#22/0\",\"3503\":\"v-36295574#23\",\"3504\":\"v-36295574#23/0\",\"3505\":\"v-36295574#23/1\",\"3506\":\"v-36295574#24\",\"3507\":\"v-36295574#24/0\",\"3508\":\"v-36295574#25\",\"3509\":\"v-36295574#25/0\",\"3510\":\"v-36295574#26\",\"3511\":\"v-36295574#26/0\",\"3512\":\"v-36295574#26/1\",\"3513\":\"v-62ced1a6\",\"3514\":\"v-62ced1a6#0/0\",\"3515\":\"v-62ced1a6#1\",\"3516\":\"v-62ced1a6#1/0\",\"3517\":\"v-62ced1a6#1/1\",\"3518\":\"v-62ced1a6#1/2\",\"3519\":\"v-62ced1a6#1/3\",\"3520\":\"v-62ced1a6#1/4\",\"3521\":\"v-62ced1a6#2\",\"3522\":\"v-62ced1a6#2/0\",\"3523\":\"v-62ced1a6#2/1\",\"3524\":\"v-62ced1a6#2/2\",\"3525\":\"v-62ced1a6#2/3\",\"3526\":\"v-62ced1a6#2/4\",\"3527\":\"v-62ced1a6#2/5\",\"3528\":\"v-62ced1a6#3\",\"3529\":\"v-62ced1a6#3/0\",\"3530\":\"v-62ced1a6#3/1\",\"3531\":\"v-62ced1a6#3/2\",\"3532\":\"v-62ced1a6#3/3\",\"3533\":\"v-62ced1a6#3/4\",\"3534\":\"v-62ced1a6#3/5\",\"3535\":\"v-62ced1a6#3/6\",\"3536\":\"v-62ced1a6#3/7\",\"3537\":\"v-62ced1a6#3/8\",\"3538\":\"v-62ced1a6#3/9\",\"3539\":\"v-62ced1a6#3/10\",\"3540\":\"v-47357bdb\",\"3541\":\"v-47357bdb#1\",\"3542\":\"v-47357bdb#2\",\"3543\":\"v-47357bdb#2/0\",\"3544\":\"v-47357bdb#2/1\",\"3545\":\"v-47357bdb#3\",\"3546\":\"v-47357bdb#3/0\",\"3547\":\"v-47357bdb#3/1\",\"3548\":\"v-2c0c1358\",\"3549\":\"v-2c0c1358#0/0\",\"3550\":\"v-2c0c1358#0/1\",\"3551\":\"v-2c0c1358#0/2\",\"3552\":\"v-763c1cd7\",\"3553\":\"v-763c1cd7#1\",\"3554\":\"v-763c1cd7#1/0\",\"3555\":\"v-763c1cd7#2\",\"3556\":\"v-763c1cd7#2/0\",\"3557\":\"v-763c1cd7#2/1\",\"3558\":\"v-1e317375\",\"3559\":\"v-1e317375#0/0\",\"3560\":\"v-763e2284\",\"3561\":\"v-763e2284#1\",\"3562\":\"v-763e2284#1/0\",\"3563\":\"v-763e2284#2\",\"3564\":\"v-763e2284#2/0\",\"3565\":\"v-763e2284#2/1\",\"3566\":\"v-00fb7173\",\"3567\":\"v-00fb7173#0/0\",\"3568\":\"v-73f45a1e\",\"3569\":\"v-73f45a1e#1\",\"3570\":\"v-73f45a1e#2\",\"3571\":\"v-73f45a1e#3\",\"3572\":\"v-73f45a1e#3/0\",\"3573\":\"v-73f45a1e#3/1\",\"3574\":\"v-73f45a1e#3/2\",\"3575\":\"v-73f45a1e#3/3\",\"3576\":\"v-73f45a1e#3/4\",\"3577\":\"v-73f45a1e#4\",\"3578\":\"v-73f45a1e#5\",\"3579\":\"v-73f45a1e#6\",\"3580\":\"v-73f45a1e#7\",\"3581\":\"v-73f45a1e#8\",\"3582\":\"v-73f45a1e#9\",\"3583\":\"v-73f45a1e#10\",\"3584\":\"v-73f45a1e#10/0\",\"3585\":\"v-73f45a1e#10/1\",\"3586\":\"v-73f45a1e#10/2\",\"3587\":\"v-73f45a1e#11\",\"3588\":\"v-73f45a1e#11/0\",\"3589\":\"v-73f45a1e#11/1\",\"3590\":\"v-73f45a1e#11/2\",\"3591\":\"v-73f45a1e#12\",\"3592\":\"v-73f45a1e#13\",\"3593\":\"v-73f45a1e#13/0\",\"3594\":\"v-73f45a1e#13/1\",\"3595\":\"v-73f45a1e#13/2\",\"3596\":\"v-73f45a1e#13/3\",\"3597\":\"v-73f45a1e#14\",\"3598\":\"v-73f45a1e#14/0\",\"3599\":\"v-73f45a1e#14/1\",\"3600\":\"v-73f45a1e#15\",\"3601\":\"v-73f45a1e#15/0\",\"3602\":\"v-73f45a1e#15/1\",\"3603\":\"v-73f45a1e#15/2\",\"3604\":\"v-73f45a1e#15/3\",\"3605\":\"v-73f45a1e#15/4\",\"3606\":\"v-73f45a1e#15/5\",\"3607\":\"v-73f45a1e#15/6\",\"3608\":\"v-73f45a1e#15/7\",\"3609\":\"v-73f45a1e#15/8\",\"3610\":\"v-73f45a1e#15/9\",\"3611\":\"v-73f45a1e#15/10\",\"3612\":\"v-73f45a1e#15/11\",\"3613\":\"v-73f45a1e#15/12\",\"3614\":\"v-73f45a1e#15/13\",\"3615\":\"v-73f45a1e#16\",\"3616\":\"v-73f45a1e#16/0\",\"3617\":\"v-73f45a1e#16/1\",\"3618\":\"v-73f45a1e#16/2\",\"3619\":\"v-73f45a1e#16/3\",\"3620\":\"v-73f45a1e#16/4\",\"3621\":\"v-73f45a1e#16/5\",\"3622\":\"v-73f45a1e#16/6\",\"3623\":\"v-73f45a1e#16/7\",\"3624\":\"v-73f45a1e#16/8\",\"3625\":\"v-73f45a1e#16/9\",\"3626\":\"v-73f45a1e#16/10\",\"3627\":\"v-73f45a1e#16/11\",\"3628\":\"v-73f45a1e#16/12\",\"3629\":\"v-73f45a1e#16/13\",\"3630\":\"v-73f45a1e#16/14\",\"3631\":\"v-86e9843c\",\"3632\":\"v-86e9843c#1\",\"3633\":\"v-86e9843c#1/0\",\"3634\":\"v-86e9843c#2\",\"3635\":\"v-86e9843c#3\",\"3636\":\"v-86e9843c#3/0\",\"3637\":\"v-86e9843c#3/1\",\"3638\":\"v-86e9843c#3/2\",\"3639\":\"v-86e9843c#3/3\",\"3640\":\"v-86e9843c#3/4\",\"3641\":\"v-86e9843c#3/5\",\"3642\":\"v-86e9843c#3/6\",\"3643\":\"v-86e9843c#3/7\",\"3644\":\"v-86e9843c#4\",\"3645\":\"v-86e9843c#4/8\",\"3646\":\"v-86e9843c#4/9\",\"3647\":\"v-86e9843c#4/10\",\"3648\":\"v-86e9843c#4/11\",\"3649\":\"v-86e9843c#4/12\",\"3650\":\"v-86e9843c#5\",\"3651\":\"v-86e9843c#5/0\",\"3652\":\"v-86e9843c#5/1\",\"3653\":\"v-86e9843c#5/2\",\"3654\":\"v-86e9843c#5/3\",\"3655\":\"v-86e9843c#5/4\",\"3656\":\"v-86e9843c#5/5\",\"3657\":\"v-86e9843c#6\",\"3658\":\"v-86e9843c#6/6\",\"3659\":\"v-86e9843c#6/7\",\"3660\":\"v-86e9843c#7\",\"3661\":\"v-86e9843c#7/8\",\"3662\":\"v-86e9843c#7/9\",\"3663\":\"v-86e9843c#7/10\",\"3664\":\"v-86e9843c#7/11\",\"3665\":\"v-86e9843c#7/12\",\"3666\":\"v-86e9843c#7/13\",\"3667\":\"v-86e9843c#7/14\",\"3668\":\"v-86e9843c#7/15\",\"3669\":\"v-86e9843c#7/16\",\"3670\":\"v-86e9843c#7/17\",\"3671\":\"v-86e9843c#8\",\"3672\":\"v-86e9843c#9\",\"3673\":\"v-86e9843c#9/0\",\"3674\":\"v-86e9843c#9/1\",\"3675\":\"v-86e9843c#9/2\",\"3676\":\"v-86e9843c#9/3\",\"3677\":\"v-86e9843c#9/4\",\"3678\":\"v-86e9843c#9/5\",\"3679\":\"v-86e9843c#9/6\",\"3680\":\"v-86e9843c#9/7\",\"3681\":\"v-86e9843c#9/8\",\"3682\":\"v-86e9843c#9/9\",\"3683\":\"v-86e9843c#9/10\",\"3684\":\"v-86e9843c#9/11\",\"3685\":\"v-86e9843c#9/12\",\"3686\":\"v-86e9843c#9/13\",\"3687\":\"v-86e9843c#9/14\",\"3688\":\"v-86e9843c#9/15\",\"3689\":\"v-86e9843c#9/16\",\"3690\":\"v-86e9843c#9/17\",\"3691\":\"v-86e9843c#10\",\"3692\":\"v-86e9843c#10/0\",\"3693\":\"v-86e9843c#10/1\",\"3694\":\"v-86e9843c#10/2\",\"3695\":\"v-86e9843c#10/3\",\"3696\":\"v-86e9843c#10/4\",\"3697\":\"v-86e9843c#10/5\",\"3698\":\"v-86e9843c#10/6\",\"3699\":\"v-86e9843c#11\",\"3700\":\"v-86e9843c#11/0\",\"3701\":\"v-86e9843c#11/1\",\"3702\":\"v-86e9843c#11/2\",\"3703\":\"v-86e9843c#11/3\",\"3704\":\"v-86e9843c#11/4\",\"3705\":\"v-86e9843c#11/5\",\"3706\":\"v-86e9843c#11/6\",\"3707\":\"v-86e9843c#12\",\"3708\":\"v-86e9843c#12/0\",\"3709\":\"v-86e9843c#12/1\",\"3710\":\"v-86e9843c#12/2\",\"3711\":\"v-86e9843c#12/3\",\"3712\":\"v-86e9843c#12/4\",\"3713\":\"v-86e9843c#12/5\",\"3714\":\"v-86e9843c#12/6\",\"3715\":\"v-86e9843c#12/7\",\"3716\":\"v-86e9843c#12/8\",\"3717\":\"v-86e9843c#13\",\"3718\":\"v-86e9843c#14\",\"3719\":\"v-86e9843c#15\",\"3720\":\"v-86e9843c#16\",\"3721\":\"v-86e9843c#16/0\",\"3722\":\"v-86e9843c#16/1\",\"3723\":\"v-86e9843c#17\",\"3724\":\"v-86e9843c#17/0\",\"3725\":\"v-86e9843c#18\",\"3726\":\"v-86e9843c#18/0\",\"3727\":\"v-86e9843c#19\",\"3728\":\"v-86e9843c#19/0\",\"3729\":\"v-86e9843c#20\",\"3730\":\"v-86e9843c#20/0\",\"3731\":\"v-86e9843c#21\",\"3732\":\"v-86e9843c#21/0\",\"3733\":\"v-86e9843c#21/1\",\"3734\":\"v-86e9843c#22\",\"3735\":\"v-86e9843c#23\",\"3736\":\"v-86e9843c#24\",\"3737\":\"v-86e9843c#25\",\"3738\":\"v-86e9843c#26\",\"3739\":\"v-86e9843c#27\",\"3740\":\"v-86e9843c#28\",\"3741\":\"v-86e9843c#29\",\"3742\":\"v-86e9843c#29/0\",\"3743\":\"v-86e9843c#30\",\"3744\":\"v-86e9843c#30/0\",\"3745\":\"v-86e9843c#31\",\"3746\":\"v-86e9843c#31/0\",\"3747\":\"v-86e9843c#31/1\",\"3748\":\"v-86e9843c#31/2\",\"3749\":\"v-86e9843c#31/3\",\"3750\":\"v-86e9843c#31/4\",\"3751\":\"v-86e9843c#31/5\",\"3752\":\"v-86e9843c#31/6\",\"3753\":\"v-86e9843c#31/7\",\"3754\":\"v-86e9843c#31/8\",\"3755\":\"v-86e9843c#32\",\"3756\":\"v-86e9843c#32/0\",\"3757\":\"v-86e9843c#32/1\",\"3758\":\"v-86e9843c#32/2\",\"3759\":\"v-86e9843c#32/3\",\"3760\":\"v-86e9843c#32/4\",\"3761\":\"v-86e9843c#32/5\",\"3762\":\"v-86e9843c#32/6\",\"3763\":\"v-86e9843c#32/7\",\"3764\":\"v-86e9843c#33\",\"3765\":\"v-86e9843c#34\",\"3766\":\"v-86e9843c#35\",\"3767\":\"v-86e9843c#36\",\"3768\":\"v-86e9843c#36/0\",\"3769\":\"v-86e9843c#36/1\",\"3770\":\"v-86e9843c#36/2\",\"3771\":\"v-86e9843c#37\",\"3772\":\"v-86e9843c#37/0\",\"3773\":\"v-86e9843c#37/1\",\"3774\":\"v-86e9843c#37/2\",\"3775\":\"v-86e9843c#37/3\",\"3776\":\"v-86e9843c#38\",\"3777\":\"v-86e9843c#39\",\"3778\":\"v-86e9843c#39/0\",\"3779\":\"v-86e9843c#39/1\",\"3780\":\"v-86e9843c#39/2\",\"3781\":\"v-86e9843c#40\",\"3782\":\"v-86e9843c#40/0\",\"3783\":\"v-86e9843c#40/1\",\"3784\":\"v-86e9843c#41\",\"3785\":\"v-86e9843c#41/0\",\"3786\":\"v-86e9843c#42\",\"3787\":\"v-86e9843c#43\",\"3788\":\"v-86e9843c#44\",\"3789\":\"v-86e9843c#44/0\",\"3790\":\"v-86e9843c#45\",\"3791\":\"v-86e9843c#45/0\",\"3792\":\"v-86e9843c#45/1\",\"3793\":\"v-86e9843c#46\",\"3794\":\"v-86e9843c#46/0\",\"3795\":\"v-86e9843c#46/1\",\"3796\":\"v-86e9843c#47\",\"3797\":\"v-86e9843c#47/0\",\"3798\":\"v-86e9843c#47/1\",\"3799\":\"v-86e9843c#47/2\",\"3800\":\"v-86e9843c#47/3\",\"3801\":\"v-86e9843c#47/4\",\"3802\":\"v-86e9843c#48\",\"3803\":\"v-86e9843c#48/0\",\"3804\":\"v-86e9843c#48/1\",\"3805\":\"v-86e9843c#48/2\",\"3806\":\"v-86e9843c#48/3\",\"3807\":\"v-86e9843c#48/4\",\"3808\":\"v-86e9843c#48/5\",\"3809\":\"v-86e9843c#49\",\"3810\":\"v-86e9843c#49/0\",\"3811\":\"v-86e9843c#49/1\",\"3812\":\"v-86e9843c#49/2\",\"3813\":\"v-86e9843c#49/3\",\"3814\":\"v-86e9843c#49/4\",\"3815\":\"v-86e9843c#49/5\",\"3816\":\"v-86e9843c#49/6\",\"3817\":\"v-86e9843c#50\",\"3818\":\"v-86e9843c#50/0\",\"3819\":\"v-86e9843c#50/1\",\"3820\":\"v-692f37ea\",\"3821\":\"v-692f37ea#1\",\"3822\":\"v-692f37ea#2\",\"3823\":\"v-692f37ea#2/0\",\"3824\":\"v-692f37ea#2/1\",\"3825\":\"v-692f37ea#2/2\",\"3826\":\"v-692f37ea#2/3\",\"3827\":\"v-692f37ea#2/4\",\"3828\":\"v-692f37ea#2/5\",\"3829\":\"v-692f37ea#3\",\"3830\":\"v-692f37ea#4\",\"3831\":\"v-692f37ea#4/0\",\"3832\":\"v-692f37ea#4/1\",\"3833\":\"v-692f37ea#4/2\",\"3834\":\"v-692f37ea#4/3\",\"3835\":\"v-692f37ea#4/4\",\"3836\":\"v-692f37ea#4/5\",\"3837\":\"v-692f37ea#4/6\",\"3838\":\"v-692f37ea#4/7\",\"3839\":\"v-692f37ea#4/8\",\"3840\":\"v-692f37ea#4/9\",\"3841\":\"v-692f37ea#4/10\",\"3842\":\"v-692f37ea#4/11\",\"3843\":\"v-692f37ea#4/12\",\"3844\":\"v-692f37ea#4/13\",\"3845\":\"v-692f37ea#4/14\",\"3846\":\"v-692f37ea#5\",\"3847\":\"v-692f37ea#5/0\",\"3848\":\"v-692f37ea#5/1\",\"3849\":\"v-692f37ea#5/2\",\"3850\":\"v-692f37ea#5/3\",\"3851\":\"v-692f37ea#5/4\",\"3852\":\"v-692f37ea#5/5\",\"3853\":\"v-692f37ea#5/6\",\"3854\":\"v-692f37ea#6\",\"3855\":\"v-692f37ea#7\",\"3856\":\"v-692f37ea#7/0\",\"3857\":\"v-692f37ea#7/1\",\"3858\":\"v-692f37ea#7/2\",\"3859\":\"v-692f37ea#7/3\",\"3860\":\"v-692f37ea#7/4\",\"3861\":\"v-692f37ea#7/5\",\"3862\":\"v-692f37ea#7/6\",\"3863\":\"v-692f37ea#7/7\",\"3864\":\"v-692f37ea#7/8\",\"3865\":\"v-692f37ea#7/9\",\"3866\":\"v-692f37ea#7/10\",\"3867\":\"v-692f37ea#8\",\"3868\":\"v-692f37ea#8/0\",\"3869\":\"v-692f37ea#8/1\",\"3870\":\"v-692f37ea#8/2\",\"3871\":\"v-692f37ea#8/3\",\"3872\":\"v-692f37ea#8/4\",\"3873\":\"v-692f37ea#8/5\",\"3874\":\"v-692f37ea#9\",\"3875\":\"v-692f37ea#9/0\",\"3876\":\"v-692f37ea#9/1\",\"3877\":\"v-692f37ea#9/2\",\"3878\":\"v-692f37ea#9/3\",\"3879\":\"v-692f37ea#9/4\",\"3880\":\"v-692f37ea#9/5\",\"3881\":\"v-692f37ea#9/6\",\"3882\":\"v-692f37ea#9/7\",\"3883\":\"v-692f37ea#9/8\",\"3884\":\"v-692f37ea#9/9\",\"3885\":\"v-692f37ea#9/10\",\"3886\":\"v-692f37ea#10\",\"3887\":\"v-692f37ea#10/0\",\"3888\":\"v-692f37ea#10/1\",\"3889\":\"v-692f37ea#10/2\",\"3890\":\"v-692f37ea#10/3\",\"3891\":\"v-692f37ea#10/4\",\"3892\":\"v-692f37ea#10/5\",\"3893\":\"v-692f37ea#10/6\",\"3894\":\"v-692f37ea#10/7\",\"3895\":\"v-692f37ea#10/8\",\"3896\":\"v-692f37ea#10/9\",\"3897\":\"v-692f37ea#10/10\",\"3898\":\"v-692f37ea#10/11\",\"3899\":\"v-692f37ea#10/12\",\"3900\":\"v-692f37ea#10/13\",\"3901\":\"v-692f37ea#10/14\",\"3902\":\"v-692f37ea#10/15\",\"3903\":\"v-692f37ea#10/16\",\"3904\":\"v-692f37ea#10/17\",\"3905\":\"v-692f37ea#10/18\",\"3906\":\"v-692f37ea#10/19\",\"3907\":\"v-692f37ea#10/20\",\"3908\":\"v-692f37ea#10/21\",\"3909\":\"v-692f37ea#10/22\",\"3910\":\"v-692f37ea#10/23\",\"3911\":\"v-692f37ea#10/24\",\"3912\":\"v-692f37ea#10/25\",\"3913\":\"v-692f37ea#10/26\",\"3914\":\"v-692f37ea#10/27\",\"3915\":\"v-692f37ea#10/28\",\"3916\":\"v-692f37ea#11\",\"3917\":\"v-692f37ea#11/0\",\"3918\":\"v-692f37ea#11/1\",\"3919\":\"v-692f37ea#11/2\",\"3920\":\"v-692f37ea#11/3\",\"3921\":\"v-692f37ea#11/4\",\"3922\":\"v-692f37ea#11/5\",\"3923\":\"v-692f37ea#11/6\",\"3924\":\"v-692f37ea#11/7\",\"3925\":\"v-692f37ea#11/8\",\"3926\":\"v-692f37ea#11/9\",\"3927\":\"v-692f37ea#12\",\"3928\":\"v-692f37ea#12/0\",\"3929\":\"v-692f37ea#12/1\",\"3930\":\"v-692f37ea#12/2\",\"3931\":\"v-692f37ea#13\",\"3932\":\"v-692f37ea#13/0\",\"3933\":\"v-692f37ea#13/1\",\"3934\":\"v-692f37ea#13/2\",\"3935\":\"v-692f37ea#13/3\",\"3936\":\"v-692f37ea#13/4\",\"3937\":\"v-692f37ea#13/5\",\"3938\":\"v-692f37ea#14\",\"3939\":\"v-692f37ea#14/6\",\"3940\":\"v-692f37ea#14/7\",\"3941\":\"v-692f37ea#14/8\",\"3942\":\"v-692f37ea#14/9\",\"3943\":\"v-692f37ea#14/10\",\"3944\":\"v-692f37ea#14/11\",\"3945\":\"v-692f37ea#15\",\"3946\":\"v-692f37ea#15/0\",\"3947\":\"v-692f37ea#15/1\",\"3948\":\"v-692f37ea#16\",\"3949\":\"v-692f37ea#17\",\"3950\":\"v-692f37ea#17/2\",\"3951\":\"v-692f37ea#17/3\",\"3952\":\"v-692f37ea#17/4\",\"3953\":\"v-692f37ea#17/5\",\"3954\":\"v-692f37ea#18\",\"3955\":\"v-692f37ea#18/0\",\"3956\":\"v-692f37ea#18/1\",\"3957\":\"v-692f37ea#18/2\",\"3958\":\"v-692f37ea#19\",\"3959\":\"v-692f37ea#19/0\",\"3960\":\"v-692f37ea#19/1\",\"3961\":\"v-692f37ea#19/2\",\"3962\":\"v-692f37ea#19/3\",\"3963\":\"v-692f37ea#19/4\",\"3964\":\"v-692f37ea#19/5\",\"3965\":\"v-692f37ea#19/6\",\"3966\":\"v-692f37ea#19/7\",\"3967\":\"v-692f37ea#19/8\",\"3968\":\"v-692f37ea#19/9\",\"3969\":\"v-692f37ea#19/10\",\"3970\":\"v-692f37ea#19/11\",\"3971\":\"v-692f37ea#20\",\"3972\":\"v-692f37ea#20/0\",\"3973\":\"v-692f37ea#20/1\",\"3974\":\"v-692f37ea#20/2\",\"3975\":\"v-692f37ea#20/3\",\"3976\":\"v-692f37ea#20/4\",\"3977\":\"v-692f37ea#20/5\",\"3978\":\"v-692f37ea#20/6\",\"3979\":\"v-692f37ea#20/7\",\"3980\":\"v-692f37ea#21\",\"3981\":\"v-692f37ea#22\",\"3982\":\"v-692f37ea#22/0\",\"3983\":\"v-692f37ea#22/1\",\"3984\":\"v-692f37ea#22/2\",\"3985\":\"v-692f37ea#22/3\",\"3986\":\"v-692f37ea#22/4\",\"3987\":\"v-692f37ea#22/5\",\"3988\":\"v-692f37ea#23\",\"3989\":\"v-692f37ea#23/0\",\"3990\":\"v-692f37ea#23/1\",\"3991\":\"v-692f37ea#23/2\",\"3992\":\"v-692f37ea#23/3\",\"3993\":\"v-692f37ea#23/4\",\"3994\":\"v-692f37ea#23/5\",\"3995\":\"v-692f37ea#23/6\",\"3996\":\"v-692f37ea#23/7\",\"3997\":\"v-692f37ea#24\",\"3998\":\"v-692f37ea#25\",\"3999\":\"v-692f37ea#25/0\",\"4000\":\"v-692f37ea#26\",\"4001\":\"v-692f37ea#26/0\",\"4002\":\"v-692f37ea#26/1\",\"4003\":\"v-692f37ea#26/2\",\"4004\":\"v-692f37ea#26/3\",\"4005\":\"v-692f37ea#26/4\",\"4006\":\"v-692f37ea#26/5\",\"4007\":\"v-692f37ea#27\",\"4008\":\"v-692f37ea#27/0\",\"4009\":\"v-692f37ea#27/1\",\"4010\":\"v-692f37ea#28\",\"4011\":\"v-692f37ea#28/0\",\"4012\":\"v-692f37ea#28/1\",\"4013\":\"v-692f37ea#28/2\",\"4014\":\"v-692f37ea#28/3\",\"4015\":\"v-692f37ea#28/4\",\"4016\":\"v-692f37ea#28/5\",\"4017\":\"v-692f37ea#28/6\",\"4018\":\"v-692f37ea#28/7\",\"4019\":\"v-692f37ea#28/8\",\"4020\":\"v-692f37ea#28/9\",\"4021\":\"v-73f9cd72\",\"4022\":\"v-73f9cd72#1\",\"4023\":\"v-73f9cd72#2\",\"4024\":\"v-73f9cd72#3\",\"4025\":\"v-73f9cd72#4\",\"4026\":\"v-73f9cd72#5\",\"4027\":\"v-73f9cd72#5/0\",\"4028\":\"v-63f5528d\",\"4029\":\"v-63f5528d#1\",\"4030\":\"v-63f5528d#2\",\"4031\":\"v-63f5528d#3\",\"4032\":\"v-63f5528d#3/0\",\"4033\":\"v-63f5528d#4\",\"4034\":\"v-63f5528d#4/0\",\"4035\":\"v-63f5528d#5\",\"4036\":\"v-63f5528d#5/0\",\"4037\":\"v-63f5528d#6\",\"4038\":\"v-63f5528d#6/0\",\"4039\":\"v-63f5528d#6/1\",\"4040\":\"v-63f5528d#6/2\",\"4041\":\"v-63f5528d#6/3\",\"4042\":\"v-63f5528d#6/4\",\"4043\":\"v-63f5528d#6/5\",\"4044\":\"v-63f5528d#6/6\",\"4045\":\"v-63f5528d#6/7\",\"4046\":\"v-63f5528d#6/8\",\"4047\":\"v-63f5528d#7\",\"4048\":\"v-63f5528d#7/0\",\"4049\":\"v-63f5528d#7/1\",\"4050\":\"v-63f5528d#8\",\"4051\":\"v-63f5528d#8/2\",\"4052\":\"v-63f5528d#9\",\"4053\":\"v-63f5528d#9/0\",\"4054\":\"v-63f5528d#10\",\"4055\":\"v-63f5528d#10/0\",\"4056\":\"v-63f5528d#11\",\"4057\":\"v-63f5528d#11/0\",\"4058\":\"v-63f5528d#12\",\"4059\":\"v-63f5528d#12/0\",\"4060\":\"v-63f5528d#12/1\",\"4061\":\"v-63f5528d#13\",\"4062\":\"v-63f5528d#13/0\",\"4063\":\"v-63f5528d#13/1\",\"4064\":\"v-63f5528d#13/2\",\"4065\":\"v-63f5528d#13/3\",\"4066\":\"v-63f5528d#13/4\",\"4067\":\"v-63f5528d#13/5\",\"4068\":\"v-63f5528d#14\",\"4069\":\"v-63f5528d#14/0\",\"4070\":\"v-63f5528d#15\",\"4071\":\"v-63f5528d#15/0\",\"4072\":\"v-13d681f6\",\"4073\":\"v-13d681f6#1\",\"4074\":\"v-13d681f6#2\",\"4075\":\"v-13d681f6#2/0\",\"4076\":\"v-13d681f6#2/1\",\"4077\":\"v-13d681f6#2/2\",\"4078\":\"v-13d681f6#2/3\",\"4079\":\"v-13d681f6#2/4\",\"4080\":\"v-13d681f6#2/5\",\"4081\":\"v-13d681f6#3\",\"4082\":\"v-13d681f6#3/0\",\"4083\":\"v-13d681f6#3/1\",\"4084\":\"v-13d681f6#3/2\",\"4085\":\"v-13d681f6#3/3\",\"4086\":\"v-13d681f6#3/4\",\"4087\":\"v-13d681f6#3/5\",\"4088\":\"v-13d681f6#4\",\"4089\":\"v-13d681f6#4/0\",\"4090\":\"v-13d681f6#5\",\"4091\":\"v-13d681f6#5/0\",\"4092\":\"v-13d681f6#6\",\"4093\":\"v-13d681f6#6/0\",\"4094\":\"v-13d681f6#6/1\",\"4095\":\"v-13d681f6#6/2\",\"4096\":\"v-13d681f6#6/3\",\"4097\":\"v-13d681f6#6/4\",\"4098\":\"v-13d681f6#7\",\"4099\":\"v-13d681f6#7/0\",\"4100\":\"v-13d681f6#7/1\",\"4101\":\"v-13d681f6#7/2\",\"4102\":\"v-13d681f6#7/3\",\"4103\":\"v-13d681f6#8\",\"4104\":\"v-13d681f6#8/0\",\"4105\":\"v-13d681f6#8/1\",\"4106\":\"v-13d681f6#9\",\"4107\":\"v-13d681f6#9/0\",\"4108\":\"v-13d681f6#9/1\",\"4109\":\"v-13d681f6#10\",\"4110\":\"v-13d681f6#10/0\",\"4111\":\"v-13d681f6#10/1\",\"4112\":\"v-13d681f6#10/2\",\"4113\":\"v-13d681f6#10/3\",\"4114\":\"v-13d681f6#10/4\",\"4115\":\"v-13d681f6#11\",\"4116\":\"v-13d681f6#11/0\",\"4117\":\"v-13d681f6#11/1\",\"4118\":\"v-13d681f6#11/2\",\"4119\":\"v-13d681f6#11/3\",\"4120\":\"v-13d681f6#11/4\",\"4121\":\"v-13d681f6#11/5\",\"4122\":\"v-13d681f6#11/6\",\"4123\":\"v-13d681f6#11/7\",\"4124\":\"v-13d681f6#11/8\",\"4125\":\"v-13d681f6#11/9\",\"4126\":\"v-13d681f6#11/10\",\"4127\":\"v-13d681f6#11/11\",\"4128\":\"v-13d681f6#11/12\",\"4129\":\"v-13d681f6#11/13\",\"4130\":\"v-13d681f6#11/14\",\"4131\":\"v-13d681f6#12\",\"4132\":\"v-13d681f6#12/0\",\"4133\":\"v-13d681f6#12/1\",\"4134\":\"v-13d681f6#12/2\",\"4135\":\"v-13d681f6#12/3\",\"4136\":\"v-13d681f6#13\",\"4137\":\"v-13d681f6#13/0\",\"4138\":\"v-13d681f6#13/1\",\"4139\":\"v-13d681f6#14\",\"4140\":\"v-13d681f6#14/0\",\"4141\":\"v-13d681f6#14/1\",\"4142\":\"v-13d681f6#14/2\",\"4143\":\"v-13d681f6#14/3\",\"4144\":\"v-13d681f6#14/4\",\"4145\":\"v-13d681f6#14/5\",\"4146\":\"v-13d681f6#15\",\"4147\":\"v-13d681f6#15/0\",\"4148\":\"v-13d681f6#15/1\",\"4149\":\"v-13d681f6#16\",\"4150\":\"v-13d681f6#16/0\",\"4151\":\"v-13d681f6#16/1\",\"4152\":\"v-13d681f6#16/2\",\"4153\":\"v-13d681f6#17\",\"4154\":\"v-13d681f6#17/0\",\"4155\":\"v-13d681f6#17/1\",\"4156\":\"v-13d681f6#17/2\",\"4157\":\"v-13d681f6#18\",\"4158\":\"v-13d681f6#18/0\",\"4159\":\"v-13d681f6#19\",\"4160\":\"v-13d681f6#19/0\",\"4161\":\"v-13d681f6#20\",\"4162\":\"v-13d681f6#20/0\",\"4163\":\"v-13d681f6#20/1\",\"4164\":\"v-13d681f6#20/2\",\"4165\":\"v-13d681f6#20/3\",\"4166\":\"v-13d681f6#21\",\"4167\":\"v-13d681f6#21/0\",\"4168\":\"v-13d681f6#21/1\",\"4169\":\"v-13d681f6#21/2\",\"4170\":\"v-13d681f6#21/3\",\"4171\":\"v-13d681f6#21/4\",\"4172\":\"v-13d681f6#21/5\",\"4173\":\"v-13d681f6#21/6\",\"4174\":\"v-13d681f6#21/7\",\"4175\":\"v-13d681f6#22\",\"4176\":\"v-13d681f6#22/0\",\"4177\":\"v-13d681f6#22/1\",\"4178\":\"v-13d681f6#22/2\",\"4179\":\"v-13d681f6#22/3\",\"4180\":\"v-13d681f6#23\",\"4181\":\"v-13d681f6#23/0\",\"4182\":\"v-13d681f6#23/1\",\"4183\":\"v-13d681f6#23/2\",\"4184\":\"v-13d681f6#23/3\",\"4185\":\"v-13d681f6#23/4\",\"4186\":\"v-13d681f6#23/5\",\"4187\":\"v-13d681f6#24\",\"4188\":\"v-13d681f6#24/0\",\"4189\":\"v-13d681f6#25\",\"4190\":\"v-13d681f6#26\",\"4191\":\"v-13d681f6#26/0\",\"4192\":\"v-13d681f6#26/1\",\"4193\":\"v-13d681f6#26/2\",\"4194\":\"v-13d681f6#26/3\",\"4195\":\"v-13d681f6#26/4\",\"4196\":\"v-13d681f6#27\",\"4197\":\"v-13d681f6#27/0\",\"4198\":\"v-13d681f6#27/1\",\"4199\":\"v-13d681f6#28\",\"4200\":\"v-13d681f6#28/0\",\"4201\":\"v-13d681f6#28/1\",\"4202\":\"v-13d681f6#28/2\",\"4203\":\"v-13d681f6#28/3\",\"4204\":\"v-13d681f6#28/4\",\"4205\":\"v-13d681f6#28/5\",\"4206\":\"v-13d681f6#28/6\",\"4207\":\"v-13d681f6#28/7\",\"4208\":\"v-13d681f6#28/8\",\"4209\":\"v-13d681f6#28/9\",\"4210\":\"v-13d681f6#28/10\",\"4211\":\"v-13d681f6#28/11\",\"4212\":\"v-13d681f6#28/12\",\"4213\":\"v-13d681f6#29\",\"4214\":\"v-13d681f6#29/0\",\"4215\":\"v-13d681f6#29/1\",\"4216\":\"v-13d681f6#30\",\"4217\":\"v-13d681f6#31\",\"4218\":\"v-13d681f6#31/0\",\"4219\":\"v-13d681f6#32\",\"4220\":\"v-13d681f6#32/0\",\"4221\":\"v-13d681f6#33\",\"4222\":\"v-13d681f6#33/0\",\"4223\":\"v-13d681f6#33/1\",\"4224\":\"v-13d681f6#33/2\",\"4225\":\"v-13d681f6#34\",\"4226\":\"v-13d681f6#34/0\",\"4227\":\"v-13d681f6#34/1\",\"4228\":\"v-13d681f6#34/2\",\"4229\":\"v-13d681f6#34/3\",\"4230\":\"v-13d681f6#35\",\"4231\":\"v-13d681f6#35/0\",\"4232\":\"v-13d681f6#35/1\",\"4233\":\"v-13d681f6#35/2\",\"4234\":\"v-13d681f6#36\",\"4235\":\"v-13d681f6#36/0\",\"4236\":\"v-13d681f6#36/1\",\"4237\":\"v-13d681f6#37\",\"4238\":\"v-13d681f6#37/0\",\"4239\":\"v-13d681f6#37/1\",\"4240\":\"v-13d681f6#38\",\"4241\":\"v-13d681f6#38/0\",\"4242\":\"v-13d681f6#38/1\",\"4243\":\"v-13d681f6#38/2\",\"4244\":\"v-13d681f6#38/3\",\"4245\":\"v-13d681f6#38/4\",\"4246\":\"v-13d681f6#38/5\",\"4247\":\"v-13d681f6#38/6\",\"4248\":\"v-13d681f6#38/7\",\"4249\":\"v-13d681f6#38/8\",\"4250\":\"v-13d681f6#39\",\"4251\":\"v-13d681f6#40\",\"4252\":\"v-13d681f6#40/0\",\"4253\":\"v-13d681f6#40/1\",\"4254\":\"v-13d681f6#40/2\",\"4255\":\"v-13d681f6#40/3\",\"4256\":\"v-13d681f6#40/4\",\"4257\":\"v-13d681f6#40/5\",\"4258\":\"v-13d681f6#40/6\",\"4259\":\"v-13d681f6#40/7\",\"4260\":\"v-13d681f6#40/8\",\"4261\":\"v-13d681f6#40/9\",\"4262\":\"v-13d681f6#41\",\"4263\":\"v-13d681f6#41/0\",\"4264\":\"v-13d681f6#41/1\",\"4265\":\"v-13d681f6#41/2\",\"4266\":\"v-13d681f6#41/3\",\"4267\":\"v-13d681f6#42\",\"4268\":\"v-13d681f6#42/0\",\"4269\":\"v-13d681f6#42/1\",\"4270\":\"v-13d681f6#42/2\",\"4271\":\"v-13d681f6#42/3\",\"4272\":\"v-13d681f6#43\",\"4273\":\"v-13d681f6#44\",\"4274\":\"v-13d681f6#44/0\",\"4275\":\"v-13d681f6#44/1\",\"4276\":\"v-13d681f6#44/2\",\"4277\":\"v-13d681f6#45\",\"4278\":\"v-13d681f6#45/0\",\"4279\":\"v-13d681f6#45/1\",\"4280\":\"v-13d681f6#45/2\",\"4281\":\"v-13d681f6#45/3\",\"4282\":\"v-13d681f6#45/4\",\"4283\":\"v-13d681f6#45/5\",\"4284\":\"v-13d681f6#45/6\",\"4285\":\"v-13d681f6#45/7\",\"4286\":\"v-13d681f6#45/8\",\"4287\":\"v-13d681f6#46\",\"4288\":\"v-13d681f6#47\",\"4289\":\"v-13d681f6#47/0\",\"4290\":\"v-13d681f6#47/1\",\"4291\":\"v-13d681f6#47/2\",\"4292\":\"v-13d681f6#47/3\",\"4293\":\"v-13d681f6#48\",\"4294\":\"v-13d681f6#48/0\",\"4295\":\"v-13d681f6#48/1\",\"4296\":\"v-13d681f6#48/2\",\"4297\":\"v-13d681f6#48/3\",\"4298\":\"v-13d681f6#48/4\",\"4299\":\"v-13d681f6#48/5\",\"4300\":\"v-13d681f6#48/6\",\"4301\":\"v-13d681f6#48/7\",\"4302\":\"v-13d681f6#48/8\",\"4303\":\"v-13d681f6#48/9\",\"4304\":\"v-13d681f6#48/10\",\"4305\":\"v-13d681f6#48/11\",\"4306\":\"v-13d681f6#48/12\",\"4307\":\"v-13d681f6#48/13\",\"4308\":\"v-13d681f6#48/14\",\"4309\":\"v-13d681f6#48/15\",\"4310\":\"v-13d681f6#48/16\",\"4311\":\"v-13d681f6#48/17\",\"4312\":\"v-13d681f6#48/18\",\"4313\":\"v-13d681f6#48/19\",\"4314\":\"v-13d681f6#48/20\",\"4315\":\"v-13d681f6#48/21\",\"4316\":\"v-13d681f6#48/22\",\"4317\":\"v-13d681f6#48/23\",\"4318\":\"v-13d681f6#48/24\",\"4319\":\"v-13d681f6#48/25\",\"4320\":\"v-13d681f6#48/26\",\"4321\":\"v-13d681f6#48/27\",\"4322\":\"v-13d681f6#48/28\",\"4323\":\"v-13d681f6#48/29\",\"4324\":\"v-13d681f6#48/30\",\"4325\":\"v-13d681f6#48/31\",\"4326\":\"v-13d681f6#48/32\",\"4327\":\"v-13d681f6#48/33\",\"4328\":\"v-13d681f6#48/34\",\"4329\":\"v-13d681f6#48/35\",\"4330\":\"v-13d681f6#48/36\",\"4331\":\"v-13d681f6#48/37\",\"4332\":\"v-13d681f6#48/38\",\"4333\":\"v-13d681f6#48/39\",\"4334\":\"v-13d681f6#48/40\",\"4335\":\"v-13d681f6#48/41\",\"4336\":\"v-13d681f6#48/42\",\"4337\":\"v-13d681f6#48/43\",\"4338\":\"v-13d681f6#49\",\"4339\":\"v-13d681f6#49/0\",\"4340\":\"v-13d681f6#49/1\",\"4341\":\"v-13d681f6#49/2\",\"4342\":\"v-13d681f6#49/3\",\"4343\":\"v-13d681f6#49/4\",\"4344\":\"v-13d681f6#49/5\",\"4345\":\"v-13d681f6#49/6\",\"4346\":\"v-13d681f6#49/7\",\"4347\":\"v-13d681f6#50\",\"4348\":\"v-13d681f6#50/0\",\"4349\":\"v-13d681f6#50/1\",\"4350\":\"v-13d681f6#50/2\",\"4351\":\"v-13d681f6#50/3\",\"4352\":\"v-13d681f6#50/4\",\"4353\":\"v-13d681f6#50/5\",\"4354\":\"v-13d681f6#50/6\",\"4355\":\"v-13d681f6#50/7\",\"4356\":\"v-13d681f6#50/8\",\"4357\":\"v-13d681f6#50/9\",\"4358\":\"v-13d681f6#50/10\",\"4359\":\"v-13d681f6#50/11\",\"4360\":\"v-13d681f6#50/12\",\"4361\":\"v-709b2df2\",\"4362\":\"v-709b2df2#1\",\"4363\":\"v-709b2df2#2\",\"4364\":\"v-709b2df2#2/0\",\"4365\":\"v-709b2df2#2/1\",\"4366\":\"v-709b2df2#2/2\",\"4367\":\"v-709b2df2#2/3\",\"4368\":\"v-709b2df2#3\",\"4369\":\"v-709b2df2#3/0\",\"4370\":\"v-709b2df2#3/1\",\"4371\":\"v-709b2df2#3/2\",\"4372\":\"v-709b2df2#3/3\",\"4373\":\"v-709b2df2#3/4\",\"4374\":\"v-709b2df2#3/5\",\"4375\":\"v-709b2df2#3/6\",\"4376\":\"v-709b2df2#3/7\",\"4377\":\"v-709b2df2#3/8\",\"4378\":\"v-709b2df2#4\",\"4379\":\"v-54b55293\",\"4380\":\"v-54b55293#1\",\"4381\":\"v-54b55293#2\",\"4382\":\"v-54b55293#2/0\",\"4383\":\"v-54b55293#3\",\"4384\":\"v-54b55293#3/0\",\"4385\":\"v-54b55293#3/1\",\"4386\":\"v-54b55293#3/2\",\"4387\":\"v-54b55293#3/3\",\"4388\":\"v-54b55293#3/4\",\"4389\":\"v-54b55293#3/5\",\"4390\":\"v-54b55293#3/6\",\"4391\":\"v-54b55293#3/7\",\"4392\":\"v-54b55293#3/8\",\"4393\":\"v-54b55293#3/9\",\"4394\":\"v-54b55293#3/10\",\"4395\":\"v-54b55293#3/11\",\"4396\":\"v-54b55293#3/12\",\"4397\":\"v-54b55293#3/13\",\"4398\":\"v-54b55293#3/14\",\"4399\":\"v-54b55293#3/15\",\"4400\":\"v-54b55293#3/16\",\"4401\":\"v-54b55293#3/17\",\"4402\":\"v-54b55293#3/18\",\"4403\":\"v-54b55293#3/19\",\"4404\":\"v-54b55293#3/20\",\"4405\":\"v-54b55293#3/21\",\"4406\":\"v-54b55293#4\",\"4407\":\"v-54b55293#4/0\",\"4408\":\"v-54b55293#4/1\",\"4409\":\"v-54b55293#4/2\",\"4410\":\"v-54b55293#4/3\",\"4411\":\"v-54b55293#4/4\",\"4412\":\"v-54b55293#4/5\",\"4413\":\"v-54b55293#4/6\",\"4414\":\"v-54b55293#4/7\",\"4415\":\"v-54b55293#4/8\",\"4416\":\"v-54b55293#4/9\",\"4417\":\"v-54b55293#4/10\",\"4418\":\"v-54b55293#4/11\",\"4419\":\"v-54b55293#4/12\",\"4420\":\"v-54b55293#4/13\",\"4421\":\"v-54b55293#4/14\",\"4422\":\"v-54b55293#4/15\",\"4423\":\"v-54b55293#4/16\",\"4424\":\"v-54b55293#4/17\",\"4425\":\"v-54b55293#4/18\",\"4426\":\"v-54b55293#4/19\",\"4427\":\"v-54b55293#4/20\",\"4428\":\"v-54b55293#4/21\",\"4429\":\"v-54b55293#4/22\",\"4430\":\"v-54b55293#4/23\",\"4431\":\"v-54b55293#4/24\",\"4432\":\"v-54b55293#4/25\",\"4433\":\"v-54b55293#4/26\",\"4434\":\"v-54b55293#4/27\",\"4435\":\"v-54b55293#4/28\",\"4436\":\"v-54b55293#5\",\"4437\":\"v-54b55293#5/0\",\"4438\":\"v-54b55293#5/1\",\"4439\":\"v-54b55293#5/2\",\"4440\":\"v-54b55293#5/3\",\"4441\":\"v-54b55293#5/4\",\"4442\":\"v-4397b9d8\",\"4443\":\"v-4397b9d8#1\",\"4444\":\"v-4397b9d8#2\",\"4445\":\"v-4397b9d8#2/0\",\"4446\":\"v-4397b9d8#2/1\",\"4447\":\"v-4397b9d8#2/2\",\"4448\":\"v-4397b9d8#2/3\",\"4449\":\"v-4397b9d8#2/4\",\"4450\":\"v-4397b9d8#3\",\"4451\":\"v-4397b9d8#4\",\"4452\":\"v-4397b9d8#4/0\",\"4453\":\"v-4397b9d8#5\",\"4454\":\"v-4397b9d8#5/0\",\"4455\":\"v-4397b9d8#5/1\",\"4456\":\"v-4397b9d8#5/2\",\"4457\":\"v-4397b9d8#6\",\"4458\":\"v-4397b9d8#6/0\",\"4459\":\"v-4397b9d8#7\",\"4460\":\"v-4397b9d8#7/0\",\"4461\":\"v-4397b9d8#7/1\",\"4462\":\"v-4397b9d8#7/2\",\"4463\":\"v-4397b9d8#7/3\",\"4464\":\"v-4397b9d8#7/4\",\"4465\":\"v-4397b9d8#8\",\"4466\":\"v-4397b9d8#8/0\",\"4467\":\"v-4397b9d8#8/1\",\"4468\":\"v-4397b9d8#8/2\",\"4469\":\"v-4397b9d8#8/3\",\"4470\":\"v-4397b9d8#8/4\",\"4471\":\"v-4397b9d8#9\",\"4472\":\"v-4397b9d8#9/0\",\"4473\":\"v-4397b9d8#9/1\",\"4474\":\"v-4397b9d8#9/2\",\"4475\":\"v-4397b9d8#9/3\",\"4476\":\"v-4397b9d8#9/4\",\"4477\":\"v-4397b9d8#9/5\",\"4478\":\"v-4397b9d8#9/6\",\"4479\":\"v-4397b9d8#9/7\",\"4480\":\"v-4397b9d8#9/8\",\"4481\":\"v-4397b9d8#9/9\",\"4482\":\"v-4397b9d8#9/10\",\"4483\":\"v-4397b9d8#9/11\",\"4484\":\"v-4397b9d8#9/12\",\"4485\":\"v-4397b9d8#9/13\",\"4486\":\"v-4397b9d8#9/14\",\"4487\":\"v-4397b9d8#9/15\",\"4488\":\"v-4397b9d8#9/16\",\"4489\":\"v-4397b9d8#9/17\",\"4490\":\"v-4397b9d8#9/18\",\"4491\":\"v-4397b9d8#9/19\",\"4492\":\"v-4397b9d8#9/20\",\"4493\":\"v-4397b9d8#10\",\"4494\":\"v-4397b9d8#11\",\"4495\":\"v-4397b9d8#11/0\",\"4496\":\"v-4397b9d8#11/1\",\"4497\":\"v-4397b9d8#11/2\",\"4498\":\"v-4397b9d8#11/3\",\"4499\":\"v-4397b9d8#11/4\",\"4500\":\"v-4397b9d8#11/5\",\"4501\":\"v-4397b9d8#11/6\",\"4502\":\"v-4397b9d8#11/7\",\"4503\":\"v-4397b9d8#12\",\"4504\":\"v-4397b9d8#12/0\",\"4505\":\"v-4397b9d8#12/1\",\"4506\":\"v-4397b9d8#12/2\",\"4507\":\"v-4397b9d8#12/3\",\"4508\":\"v-4397b9d8#12/4\",\"4509\":\"v-4397b9d8#12/5\",\"4510\":\"v-4397b9d8#12/6\",\"4511\":\"v-6e0208bc\",\"4512\":\"v-6e0208bc#1\",\"4513\":\"v-6e0208bc#2\",\"4514\":\"v-6e0208bc#3\",\"4515\":\"v-6e0208bc#3/0\",\"4516\":\"v-6e0208bc#3/1\",\"4517\":\"v-6e0208bc#3/2\",\"4518\":\"v-6e0208bc#3/3\",\"4519\":\"v-6e0208bc#3/4\",\"4520\":\"v-6e0208bc#3/5\",\"4521\":\"v-6e0208bc#4\",\"4522\":\"v-6e0208bc#5\",\"4523\":\"v-6e0208bc#5/0\",\"4524\":\"v-6e0208bc#5/1\",\"4525\":\"v-6e0208bc#5/2\",\"4526\":\"v-6e0208bc#5/3\",\"4527\":\"v-6e0208bc#5/4\",\"4528\":\"v-6e0208bc#5/5\",\"4529\":\"v-6e0208bc#5/6\",\"4530\":\"v-6e0208bc#5/7\",\"4531\":\"v-6e0208bc#5/8\",\"4532\":\"v-6e0208bc#5/9\",\"4533\":\"v-6e0208bc#5/10\",\"4534\":\"v-6e0208bc#5/11\",\"4535\":\"v-6e0208bc#6\",\"4536\":\"v-6e0208bc#6/0\",\"4537\":\"v-6e0208bc#6/1\",\"4538\":\"v-6e0208bc#6/2\",\"4539\":\"v-6e0208bc#6/3\",\"4540\":\"v-6e0208bc#6/4\",\"4541\":\"v-6e0208bc#6/5\",\"4542\":\"v-6e0208bc#6/6\",\"4543\":\"v-6e0208bc#7\",\"4544\":\"v-6e0208bc#8\",\"4545\":\"v-6e0208bc#8/0\",\"4546\":\"v-6e0208bc#8/1\",\"4547\":\"v-6e0208bc#8/2\",\"4548\":\"v-6e0208bc#8/3\",\"4549\":\"v-6e0208bc#9\",\"4550\":\"v-6e0208bc#9/0\",\"4551\":\"v-6e0208bc#9/1\",\"4552\":\"v-6e0208bc#9/2\",\"4553\":\"v-6e0208bc#9/3\",\"4554\":\"v-6e0208bc#9/4\",\"4555\":\"v-6e0208bc#9/5\",\"4556\":\"v-6e0208bc#9/6\",\"4557\":\"v-6e0208bc#9/7\",\"4558\":\"v-6e0208bc#9/8\",\"4559\":\"v-6e0208bc#9/9\",\"4560\":\"v-6e0208bc#9/10\",\"4561\":\"v-6e0208bc#9/11\",\"4562\":\"v-6e0208bc#9/12\",\"4563\":\"v-6e0208bc#9/13\",\"4564\":\"v-6e0208bc#9/14\",\"4565\":\"v-6e0208bc#9/15\",\"4566\":\"v-6e0208bc#9/16\",\"4567\":\"v-6e0208bc#9/17\",\"4568\":\"v-6e0208bc#9/18\",\"4569\":\"v-6e0208bc#9/19\",\"4570\":\"v-6e0208bc#10\",\"4571\":\"v-6e0208bc#10/0\",\"4572\":\"v-6e0208bc#10/1\",\"4573\":\"v-6e0208bc#10/2\",\"4574\":\"v-6e0208bc#10/3\",\"4575\":\"v-6e0208bc#11\",\"4576\":\"v-6e0208bc#11/0\",\"4577\":\"v-6e0208bc#11/1\",\"4578\":\"v-6e0208bc#11/2\",\"4579\":\"v-6e0208bc#11/3\",\"4580\":\"v-6e0208bc#11/4\",\"4581\":\"v-6e0208bc#11/5\",\"4582\":\"v-6e0208bc#11/6\",\"4583\":\"v-6e0208bc#11/7\",\"4584\":\"v-6e0208bc#11/8\",\"4585\":\"v-6e0208bc#11/9\",\"4586\":\"v-6e0208bc#12\",\"4587\":\"v-6e0208bc#12/0\",\"4588\":\"v-6e0208bc#12/1\",\"4589\":\"v-6e0208bc#12/2\",\"4590\":\"v-6e0208bc#12/3\",\"4591\":\"v-6e0208bc#12/4\",\"4592\":\"v-6e0208bc#12/5\",\"4593\":\"v-6e0208bc#12/6\",\"4594\":\"v-6e0208bc#12/7\",\"4595\":\"v-6e0208bc#12/8\",\"4596\":\"v-6e0208bc#12/9\",\"4597\":\"v-6e0208bc#12/10\",\"4598\":\"v-6e0208bc#12/11\",\"4599\":\"v-6e0208bc#12/12\",\"4600\":\"v-6e0208bc#12/13\",\"4601\":\"v-6e0208bc#12/14\",\"4602\":\"v-6e0208bc#13\",\"4603\":\"v-6e0208bc#13/0\",\"4604\":\"v-6e0208bc#13/1\",\"4605\":\"v-6e0208bc#13/2\",\"4606\":\"v-6e0208bc#14\",\"4607\":\"v-6e0208bc#14/0\",\"4608\":\"v-6e0208bc#14/1\",\"4609\":\"v-6e0208bc#14/2\",\"4610\":\"v-6e0208bc#14/3\",\"4611\":\"v-6e0208bc#14/4\",\"4612\":\"v-6e0208bc#14/5\",\"4613\":\"v-6e0208bc#14/6\",\"4614\":\"v-6e0208bc#14/7\",\"4615\":\"v-6e0208bc#14/8\",\"4616\":\"v-6e0208bc#14/9\",\"4617\":\"v-6e0208bc#14/10\",\"4618\":\"v-6e0208bc#14/11\",\"4619\":\"v-6e0208bc#14/12\",\"4620\":\"v-6e0208bc#14/13\",\"4621\":\"v-6e0208bc#14/14\",\"4622\":\"v-6e0208bc#14/15\",\"4623\":\"v-6e0208bc#14/16\",\"4624\":\"v-6e0208bc#14/17\",\"4625\":\"v-6e0208bc#14/18\",\"4626\":\"v-6e0208bc#14/19\",\"4627\":\"v-6e0208bc#15\",\"4628\":\"v-6e0208bc#15/0\",\"4629\":\"v-6e0208bc#15/1\",\"4630\":\"v-6e0208bc#15/2\",\"4631\":\"v-6e0208bc#15/3\",\"4632\":\"v-6e0208bc#15/4\",\"4633\":\"v-6e0208bc#15/5\",\"4634\":\"v-6e0208bc#15/6\",\"4635\":\"v-6e0208bc#15/7\",\"4636\":\"v-6e0208bc#15/8\",\"4637\":\"v-6e0208bc#15/9\",\"4638\":\"v-6e0208bc#15/10\",\"4639\":\"v-6e0208bc#15/11\",\"4640\":\"v-6e0208bc#15/12\",\"4641\":\"v-6e0208bc#15/13\",\"4642\":\"v-6e0208bc#15/14\",\"4643\":\"v-6e0208bc#15/15\",\"4644\":\"v-6e0208bc#15/16\",\"4645\":\"v-6e0208bc#15/17\",\"4646\":\"v-6e0208bc#15/18\",\"4647\":\"v-6e0208bc#15/19\",\"4648\":\"v-6e0208bc#16\",\"4649\":\"v-6e0208bc#16/0\",\"4650\":\"v-6e0208bc#16/1\",\"4651\":\"v-6e0208bc#16/2\",\"4652\":\"v-6e0208bc#16/3\",\"4653\":\"v-6e0208bc#16/4\",\"4654\":\"v-6e0208bc#16/5\",\"4655\":\"v-6e0208bc#16/6\",\"4656\":\"v-6e0208bc#16/7\",\"4657\":\"v-6e0208bc#16/8\",\"4658\":\"v-6e0208bc#16/9\",\"4659\":\"v-6e0208bc#16/10\",\"4660\":\"v-6e0208bc#16/11\",\"4661\":\"v-6e0208bc#16/12\",\"4662\":\"v-6e0208bc#16/13\",\"4663\":\"v-6e0208bc#16/14\",\"4664\":\"v-6e0208bc#16/15\",\"4665\":\"v-6e0208bc#16/16\",\"4666\":\"v-6e0208bc#17\",\"4667\":\"v-6e0208bc#17/0\",\"4668\":\"v-6e0208bc#17/1\",\"4669\":\"v-6e0208bc#17/2\",\"4670\":\"v-6e0208bc#17/3\",\"4671\":\"v-6e0208bc#17/4\",\"4672\":\"v-6e0208bc#17/5\",\"4673\":\"v-6e0208bc#17/6\",\"4674\":\"v-6e0208bc#17/7\",\"4675\":\"v-6e0208bc#17/8\",\"4676\":\"v-6e0208bc#17/9\",\"4677\":\"v-6e0208bc#17/10\",\"4678\":\"v-6e0208bc#17/11\",\"4679\":\"v-4115de74\",\"4680\":\"v-4115de74#1\",\"4681\":\"v-4115de74#2\",\"4682\":\"v-4115de74#3\",\"4683\":\"v-4115de74#3/0\",\"4684\":\"v-4115de74#3/1\",\"4685\":\"v-4115de74#3/2\",\"4686\":\"v-4115de74#3/3\",\"4687\":\"v-4115de74#3/4\",\"4688\":\"v-4115de74#3/5\",\"4689\":\"v-4115de74#3/6\",\"4690\":\"v-4115de74#3/7\",\"4691\":\"v-4115de74#3/8\",\"4692\":\"v-4115de74#3/9\",\"4693\":\"v-4115de74#3/10\",\"4694\":\"v-4115de74#3/11\",\"4695\":\"v-4115de74#3/12\",\"4696\":\"v-4115de74#3/13\",\"4697\":\"v-4115de74#3/14\",\"4698\":\"v-4115de74#3/15\",\"4699\":\"v-4115de74#3/16\",\"4700\":\"v-4115de74#3/17\",\"4701\":\"v-4115de74#3/18\",\"4702\":\"v-4115de74#3/19\",\"4703\":\"v-4115de74#3/20\",\"4704\":\"v-4115de74#3/21\",\"4705\":\"v-4115de74#3/22\",\"4706\":\"v-4115de74#4\",\"4707\":\"v-4115de74#4/0\",\"4708\":\"v-4115de74#5\",\"4709\":\"v-4115de74#5/0\",\"4710\":\"v-4115de74#5/1\",\"4711\":\"v-4115de74#5/2\",\"4712\":\"v-4115de74#5/3\",\"4713\":\"v-4115de74#5/4\",\"4714\":\"v-4115de74#5/5\",\"4715\":\"v-4115de74#5/6\",\"4716\":\"v-4115de74#5/7\",\"4717\":\"v-4115de74#5/8\",\"4718\":\"v-4115de74#5/9\",\"4719\":\"v-4115de74#5/10\",\"4720\":\"v-4115de74#5/11\",\"4721\":\"v-4115de74#5/12\",\"4722\":\"v-4115de74#5/13\",\"4723\":\"v-4115de74#6\",\"4724\":\"v-4115de74#6/0\",\"4725\":\"v-4115de74#6/1\",\"4726\":\"v-4115de74#6/2\",\"4727\":\"v-4115de74#6/3\",\"4728\":\"v-4115de74#6/4\",\"4729\":\"v-4115de74#6/5\",\"4730\":\"v-4115de74#6/6\",\"4731\":\"v-4115de74#6/7\",\"4732\":\"v-4115de74#6/8\",\"4733\":\"v-4115de74#6/9\",\"4734\":\"v-4115de74#6/10\",\"4735\":\"v-4115de74#6/11\",\"4736\":\"v-4115de74#6/12\",\"4737\":\"v-4115de74#6/13\",\"4738\":\"v-4115de74#6/14\",\"4739\":\"v-4115de74#7\",\"4740\":\"v-4115de74#7/0\",\"4741\":\"v-4115de74#7/1\",\"4742\":\"v-4115de74#7/2\",\"4743\":\"v-4115de74#7/3\",\"4744\":\"v-4115de74#8\",\"4745\":\"v-4115de74#8/0\",\"4746\":\"v-4115de74#8/1\",\"4747\":\"v-4115de74#8/2\",\"4748\":\"v-4115de74#8/3\",\"4749\":\"v-4115de74#8/4\",\"4750\":\"v-4115de74#8/5\",\"4751\":\"v-4115de74#8/6\",\"4752\":\"v-4115de74#8/7\",\"4753\":\"v-4115de74#9\",\"4754\":\"v-4115de74#9/0\",\"4755\":\"v-4115de74#9/1\",\"4756\":\"v-4115de74#9/2\",\"4757\":\"v-4115de74#9/3\",\"4758\":\"v-4115de74#9/4\",\"4759\":\"v-4115de74#9/5\",\"4760\":\"v-4115de74#9/6\",\"4761\":\"v-4115de74#9/7\",\"4762\":\"v-4115de74#10\",\"4763\":\"v-4115de74#10/0\",\"4764\":\"v-4115de74#10/1\",\"4765\":\"v-4115de74#10/2\",\"4766\":\"v-4115de74#10/3\",\"4767\":\"v-4115de74#10/4\",\"4768\":\"v-4115de74#10/5\",\"4769\":\"v-4115de74#10/6\",\"4770\":\"v-4115de74#11\",\"4771\":\"v-4115de74#11/0\",\"4772\":\"v-4115de74#11/1\",\"4773\":\"v-4115de74#11/2\",\"4774\":\"v-4115de74#12\",\"4775\":\"v-4115de74#12/0\",\"4776\":\"v-4115de74#12/1\",\"4777\":\"v-4115de74#12/2\",\"4778\":\"v-4115de74#12/3\",\"4779\":\"v-4115de74#12/4\",\"4780\":\"v-4115de74#13\",\"4781\":\"v-4115de74#13/0\",\"4782\":\"v-4115de74#13/1\",\"4783\":\"v-4115de74#13/2\",\"4784\":\"v-4115de74#13/3\",\"4785\":\"v-4115de74#13/4\",\"4786\":\"v-4115de74#13/5\",\"4787\":\"v-4115de74#13/6\",\"4788\":\"v-4115de74#13/7\",\"4789\":\"v-4115de74#13/8\",\"4790\":\"v-4115de74#13/9\",\"4791\":\"v-4115de74#13/10\",\"4792\":\"v-4115de74#13/11\",\"4793\":\"v-4115de74#13/12\",\"4794\":\"v-4115de74#13/13\",\"4795\":\"v-4115de74#13/14\",\"4796\":\"v-4115de74#13/15\",\"4797\":\"v-4115de74#13/16\",\"4798\":\"v-4115de74#13/17\",\"4799\":\"v-4115de74#13/18\",\"4800\":\"v-4115de74#13/19\",\"4801\":\"v-4115de74#13/20\",\"4802\":\"v-4115de74#13/21\",\"4803\":\"v-4115de74#13/22\",\"4804\":\"v-4115de74#13/23\",\"4805\":\"v-4115de74#13/24\",\"4806\":\"v-4115de74#13/25\",\"4807\":\"v-4115de74#14\",\"4808\":\"v-4115de74#14/0\",\"4809\":\"v-4115de74#14/1\",\"4810\":\"v-4115de74#15\",\"4811\":\"v-4115de74#15/0\",\"4812\":\"v-4115de74#15/1\",\"4813\":\"v-4115de74#15/2\",\"4814\":\"v-4115de74#15/3\",\"4815\":\"v-4115de74#15/4\",\"4816\":\"v-4115de74#15/5\",\"4817\":\"v-4115de74#15/6\",\"4818\":\"v-4115de74#15/7\",\"4819\":\"v-4115de74#15/8\",\"4820\":\"v-4115de74#15/9\",\"4821\":\"v-4115de74#15/10\",\"4822\":\"v-4115de74#15/11\",\"4823\":\"v-4115de74#15/12\",\"4824\":\"v-4115de74#15/13\",\"4825\":\"v-4115de74#15/14\",\"4826\":\"v-4115de74#15/15\",\"4827\":\"v-4115de74#15/16\",\"4828\":\"v-4115de74#15/17\",\"4829\":\"v-4115de74#16\",\"4830\":\"v-4115de74#16/0\",\"4831\":\"v-4115de74#16/1\",\"4832\":\"v-4115de74#16/2\",\"4833\":\"v-4115de74#16/3\",\"4834\":\"v-4115de74#16/4\",\"4835\":\"v-4115de74#17\",\"4836\":\"v-4115de74#17/0\",\"4837\":\"v-4115de74#17/1\",\"4838\":\"v-4115de74#17/2\",\"4839\":\"v-4115de74#17/3\",\"4840\":\"v-4115de74#17/4\",\"4841\":\"v-4115de74#17/5\",\"4842\":\"v-4115de74#17/6\",\"4843\":\"v-4115de74#17/7\",\"4844\":\"v-4115de74#17/8\",\"4845\":\"v-4115de74#18\",\"4846\":\"v-4115de74#18/0\",\"4847\":\"v-4115de74#18/1\",\"4848\":\"v-4115de74#18/2\",\"4849\":\"v-4115de74#18/3\",\"4850\":\"v-4115de74#18/4\",\"4851\":\"v-4115de74#18/5\",\"4852\":\"v-4115de74#18/6\",\"4853\":\"v-4115de74#18/7\",\"4854\":\"v-4115de74#18/8\",\"4855\":\"v-4115de74#18/9\",\"4856\":\"v-4115de74#18/10\",\"4857\":\"v-4115de74#18/11\",\"4858\":\"v-4115de74#18/12\",\"4859\":\"v-4115de74#18/13\",\"4860\":\"v-4115de74#18/14\",\"4861\":\"v-4115de74#18/15\",\"4862\":\"v-4115de74#18/16\",\"4863\":\"v-4115de74#19\",\"4864\":\"v-4115de74#19/0\",\"4865\":\"v-4115de74#19/1\",\"4866\":\"v-4115de74#19/2\",\"4867\":\"v-4115de74#19/3\",\"4868\":\"v-4115de74#19/4\",\"4869\":\"v-4115de74#19/5\",\"4870\":\"v-4115de74#19/6\",\"4871\":\"v-4115de74#19/7\",\"4872\":\"v-4115de74#19/8\",\"4873\":\"v-4115de74#19/9\",\"4874\":\"v-4115de74#19/10\",\"4875\":\"v-4115de74#19/11\",\"4876\":\"v-4115de74#20\",\"4877\":\"v-4115de74#20/0\",\"4878\":\"v-4115de74#20/1\",\"4879\":\"v-4115de74#20/2\",\"4880\":\"v-4115de74#20/3\",\"4881\":\"v-4115de74#20/4\",\"4882\":\"v-4115de74#20/5\",\"4883\":\"v-4115de74#20/6\",\"4884\":\"v-4115de74#20/7\",\"4885\":\"v-4115de74#20/8\",\"4886\":\"v-4115de74#20/9\",\"4887\":\"v-4115de74#20/10\",\"4888\":\"v-4115de74#20/11\",\"4889\":\"v-4115de74#20/12\",\"4890\":\"v-4115de74#20/13\",\"4891\":\"v-4115de74#20/14\",\"4892\":\"v-4115de74#20/15\",\"4893\":\"v-4115de74#20/16\",\"4894\":\"v-4115de74#21\",\"4895\":\"v-4115de74#21/0\",\"4896\":\"v-4115de74#21/1\",\"4897\":\"v-4115de74#21/2\",\"4898\":\"v-4115de74#21/3\",\"4899\":\"v-4115de74#21/4\",\"4900\":\"v-4115de74#21/5\",\"4901\":\"v-4115de74#21/6\",\"4902\":\"v-4115de74#21/7\",\"4903\":\"v-4115de74#21/8\",\"4904\":\"v-4115de74#21/9\",\"4905\":\"v-4115de74#22\",\"4906\":\"v-4115de74#22/0\",\"4907\":\"v-4115de74#22/1\",\"4908\":\"v-4115de74#22/2\",\"4909\":\"v-4115de74#23\",\"4910\":\"v-4115de74#23/0\",\"4911\":\"v-4115de74#23/1\",\"4912\":\"v-4115de74#23/2\",\"4913\":\"v-4115de74#24\",\"4914\":\"v-4115de74#24/0\",\"4915\":\"v-4115de74#24/1\",\"4916\":\"v-4115de74#24/2\",\"4917\":\"v-4115de74#24/3\",\"4918\":\"v-4115de74#24/4\",\"4919\":\"v-4115de74#25\",\"4920\":\"v-4115de74#25/0\",\"4921\":\"v-4115de74#25/1\",\"4922\":\"v-4115de74#25/2\",\"4923\":\"v-4115de74#25/3\",\"4924\":\"v-4115de74#25/4\",\"4925\":\"v-4115de74#26\",\"4926\":\"v-4115de74#26/0\",\"4927\":\"v-4115de74#26/1\",\"4928\":\"v-4115de74#26/2\",\"4929\":\"v-4115de74#26/3\",\"4930\":\"v-4115de74#26/4\",\"4931\":\"v-4115de74#26/5\",\"4932\":\"v-4115de74#26/6\",\"4933\":\"v-4115de74#26/7\",\"4934\":\"v-4115de74#26/8\",\"4935\":\"v-4115de74#26/9\",\"4936\":\"v-4115de74#26/10\",\"4937\":\"v-4115de74#26/11\",\"4938\":\"v-4115de74#27\",\"4939\":\"v-4115de74#27/0\",\"4940\":\"v-4115de74#27/1\",\"4941\":\"v-4115de74#27/2\",\"4942\":\"v-4115de74#27/3\",\"4943\":\"v-4115de74#28\",\"4944\":\"v-4115de74#28/0\",\"4945\":\"v-4115de74#28/1\",\"4946\":\"v-4115de74#28/2\",\"4947\":\"v-4115de74#29\",\"4948\":\"v-4115de74#29/0\",\"4949\":\"v-4115de74#29/1\",\"4950\":\"v-4115de74#29/2\",\"4951\":\"v-4115de74#29/3\",\"4952\":\"v-4115de74#29/4\",\"4953\":\"v-4115de74#30\",\"4954\":\"v-4115de74#30/0\",\"4955\":\"v-4115de74#30/1\",\"4956\":\"v-4115de74#30/2\",\"4957\":\"v-4115de74#30/3\",\"4958\":\"v-4115de74#30/4\",\"4959\":\"v-4115de74#30/5\",\"4960\":\"v-4115de74#30/6\",\"4961\":\"v-4115de74#30/7\",\"4962\":\"v-4115de74#30/8\",\"4963\":\"v-4115de74#30/9\",\"4964\":\"v-4115de74#30/10\",\"4965\":\"v-4115de74#30/11\",\"4966\":\"v-4115de74#30/12\",\"4967\":\"v-4115de74#30/13\",\"4968\":\"v-4115de74#30/14\",\"4969\":\"v-4115de74#30/15\",\"4970\":\"v-4115de74#30/16\",\"4971\":\"v-4115de74#30/17\",\"4972\":\"v-4115de74#30/18\",\"4973\":\"v-4115de74#30/19\",\"4974\":\"v-4115de74#30/20\",\"4975\":\"v-4115de74#30/21\",\"4976\":\"v-4115de74#31\",\"4977\":\"v-4115de74#31/0\",\"4978\":\"v-4115de74#31/1\",\"4979\":\"v-4115de74#31/2\",\"4980\":\"v-4115de74#31/3\",\"4981\":\"v-4115de74#31/4\",\"4982\":\"v-4115de74#31/5\",\"4983\":\"v-4115de74#31/6\",\"4984\":\"v-4115de74#31/7\",\"4985\":\"v-4115de74#31/8\",\"4986\":\"v-4115de74#31/9\",\"4987\":\"v-4115de74#31/10\",\"4988\":\"v-4115de74#31/11\",\"4989\":\"v-4115de74#31/12\",\"4990\":\"v-4115de74#31/13\",\"4991\":\"v-4115de74#32\",\"4992\":\"v-4115de74#32/0\",\"4993\":\"v-4115de74#32/1\",\"4994\":\"v-4115de74#32/2\",\"4995\":\"v-4115de74#32/3\",\"4996\":\"v-4115de74#32/4\",\"4997\":\"v-4115de74#33\",\"4998\":\"v-4115de74#33/0\",\"4999\":\"v-4115de74#33/1\",\"5000\":\"v-4115de74#33/2\",\"5001\":\"v-4115de74#34\",\"5002\":\"v-4115de74#35\",\"5003\":\"v-4115de74#35/0\",\"5004\":\"v-4115de74#36\",\"5005\":\"v-4115de74#36/0\",\"5006\":\"v-4115de74#36/1\",\"5007\":\"v-4115de74#37\",\"5008\":\"v-4115de74#37/0\",\"5009\":\"v-4115de74#38\",\"5010\":\"v-4115de74#38/0\",\"5011\":\"v-4115de74#38/1\",\"5012\":\"v-4115de74#38/2\",\"5013\":\"v-4115de74#38/3\",\"5014\":\"v-4115de74#39\",\"5015\":\"v-4115de74#39/0\",\"5016\":\"v-4115de74#40\",\"5017\":\"v-4115de74#40/0\",\"5018\":\"v-4115de74#41\",\"5019\":\"v-4115de74#41/0\",\"5020\":\"v-4115de74#42\",\"5021\":\"v-4115de74#43\",\"5022\":\"v-4115de74#43/0\",\"5023\":\"v-4115de74#43/1\",\"5024\":\"v-4115de74#43/2\",\"5025\":\"v-4115de74#44\",\"5026\":\"v-4115de74#44/0\",\"5027\":\"v-4115de74#44/1\",\"5028\":\"v-e17a1dca\",\"5029\":\"v-e17a1dca#1\",\"5030\":\"v-e17a1dca#2\",\"5031\":\"v-e17a1dca#2/0\",\"5032\":\"v-e17a1dca#2/1\",\"5033\":\"v-e17a1dca#2/2\",\"5034\":\"v-e17a1dca#2/3\",\"5035\":\"v-e17a1dca#3\",\"5036\":\"v-e17a1dca#3/0\",\"5037\":\"v-e17a1dca#3/1\",\"5038\":\"v-e17a1dca#4\",\"5039\":\"v-e17a1dca#5\",\"5040\":\"v-e17a1dca#6\",\"5041\":\"v-e17a1dca#6/0\",\"5042\":\"v-e17a1dca#6/1\",\"5043\":\"v-e17a1dca#6/2\",\"5044\":\"v-e17a1dca#6/3\",\"5045\":\"v-e17a1dca#6/4\",\"5046\":\"v-e17a1dca#7\",\"5047\":\"v-e17a1dca#7/0\",\"5048\":\"v-e17a1dca#7/1\",\"5049\":\"v-e17a1dca#7/2\",\"5050\":\"v-e17a1dca#8\",\"5051\":\"v-e17a1dca#9\",\"5052\":\"v-e17a1dca#9/0\",\"5053\":\"v-e17a1dca#9/1\",\"5054\":\"v-e17a1dca#9/2\",\"5055\":\"v-e17a1dca#9/3\",\"5056\":\"v-e17a1dca#10\",\"5057\":\"v-e17a1dca#10/0\",\"5058\":\"v-e17a1dca#11\",\"5059\":\"v-e17a1dca#12\",\"5060\":\"v-e17a1dca#12/0\",\"5061\":\"v-e17a1dca#12/1\",\"5062\":\"v-e17a1dca#12/2\",\"5063\":\"v-e17a1dca#13\",\"5064\":\"v-e17a1dca#13/0\",\"5065\":\"v-e17a1dca#14\",\"5066\":\"v-e17a1dca#15\",\"5067\":\"v-e17a1dca#15/0\",\"5068\":\"v-e17a1dca#15/1\",\"5069\":\"v-e17a1dca#15/2\",\"5070\":\"v-e17a1dca#15/3\",\"5071\":\"v-e17a1dca#16\",\"5072\":\"v-e17a1dca#16/0\",\"5073\":\"v-e17a1dca#17\",\"5074\":\"v-e17a1dca#18\",\"5075\":\"v-e17a1dca#18/0\",\"5076\":\"v-e17a1dca#18/1\",\"5077\":\"v-e17a1dca#18/2\",\"5078\":\"v-e17a1dca#18/3\",\"5079\":\"v-e17a1dca#19\",\"5080\":\"v-e17a1dca#19/0\",\"5081\":\"v-e17a1dca#20\",\"5082\":\"v-e17a1dca#20/0\",\"5083\":\"v-e17a1dca#20/1\",\"5084\":\"v-e17a1dca#20/2\",\"5085\":\"v-e17a1dca#20/3\",\"5086\":\"v-e17a1dca#21\",\"5087\":\"v-e17a1dca#21/0\",\"5088\":\"v-e17a1dca#21/1\",\"5089\":\"v-e17a1dca#21/2\",\"5090\":\"v-e17a1dca#22\",\"5091\":\"v-e17a1dca#22/3\",\"5092\":\"v-e17a1dca#22/4\",\"5093\":\"v-e17a1dca#22/5\",\"5094\":\"v-e17a1dca#23\",\"5095\":\"v-e17a1dca#23/0\",\"5096\":\"v-e17a1dca#23/1\",\"5097\":\"v-e17a1dca#23/2\",\"5098\":\"v-e17a1dca#23/3\",\"5099\":\"v-e17a1dca#23/4\",\"5100\":\"v-e17a1dca#24\",\"5101\":\"v-e17a1dca#24/0\",\"5102\":\"v-e17a1dca#24/1\",\"5103\":\"v-e17a1dca#24/2\",\"5104\":\"v-e17a1dca#24/3\",\"5105\":\"v-e17a1dca#24/4\",\"5106\":\"v-e17a1dca#24/5\",\"5107\":\"v-e17a1dca#24/6\",\"5108\":\"v-e17a1dca#24/7\",\"5109\":\"v-e17a1dca#24/8\",\"5110\":\"v-e17a1dca#24/9\",\"5111\":\"v-e17a1dca#24/10\",\"5112\":\"v-e17a1dca#24/11\",\"5113\":\"v-e17a1dca#25\",\"5114\":\"v-e17a1dca#26\",\"5115\":\"v-e17a1dca#26/0\",\"5116\":\"v-e17a1dca#26/1\",\"5117\":\"v-e17a1dca#26/2\",\"5118\":\"v-e17a1dca#26/3\",\"5119\":\"v-e17a1dca#26/4\",\"5120\":\"v-e17a1dca#26/5\",\"5121\":\"v-e17a1dca#26/6\",\"5122\":\"v-e17a1dca#27\",\"5123\":\"v-e17a1dca#27/0\",\"5124\":\"v-e17a1dca#27/1\",\"5125\":\"v-e17a1dca#27/2\",\"5126\":\"v-e17a1dca#27/3\",\"5127\":\"v-e17a1dca#27/4\",\"5128\":\"v-e17a1dca#27/5\",\"5129\":\"v-e17a1dca#27/6\",\"5130\":\"v-e17a1dca#27/7\",\"5131\":\"v-e17a1dca#27/8\",\"5132\":\"v-e17a1dca#27/9\",\"5133\":\"v-e17a1dca#27/10\",\"5134\":\"v-e17a1dca#28\",\"5135\":\"v-e17a1dca#29\",\"5136\":\"v-e17a1dca#30\",\"5137\":\"v-e17a1dca#31\",\"5138\":\"v-e17a1dca#31/0\",\"5139\":\"v-e17a1dca#32\",\"5140\":\"v-e17a1dca#32/0\",\"5141\":\"v-e17a1dca#32/1\",\"5142\":\"v-e17a1dca#32/2\",\"5143\":\"v-e17a1dca#32/3\",\"5144\":\"v-e17a1dca#32/4\",\"5145\":\"v-e17a1dca#32/5\",\"5146\":\"v-e17a1dca#32/6\",\"5147\":\"v-e17a1dca#32/7\",\"5148\":\"v-e17a1dca#32/8\",\"5149\":\"v-e17a1dca#32/9\",\"5150\":\"v-e17a1dca#32/10\",\"5151\":\"v-e17a1dca#32/11\",\"5152\":\"v-e17a1dca#32/12\",\"5153\":\"v-e17a1dca#32/13\",\"5154\":\"v-e17a1dca#32/14\",\"5155\":\"v-e17a1dca#33\",\"5156\":\"v-e17a1dca#33/0\",\"5157\":\"v-e17a1dca#34\",\"5158\":\"v-e17a1dca#34/0\",\"5159\":\"v-e17a1dca#34/1\",\"5160\":\"v-e17a1dca#34/2\",\"5161\":\"v-e17a1dca#35\",\"5162\":\"v-e17a1dca#35/0\",\"5163\":\"v-e17a1dca#35/1\",\"5164\":\"v-e17a1dca#36\",\"5165\":\"v-e17a1dca#36/0\",\"5166\":\"v-e17a1dca#36/1\",\"5167\":\"v-e17a1dca#36/2\",\"5168\":\"v-e17a1dca#37\",\"5169\":\"v-e17a1dca#37/0\",\"5170\":\"v-e17a1dca#37/1\",\"5171\":\"v-e17a1dca#37/2\",\"5172\":\"v-e17a1dca#37/3\",\"5173\":\"v-e17a1dca#37/4\",\"5174\":\"v-e17a1dca#37/5\",\"5175\":\"v-e17a1dca#37/6\",\"5176\":\"v-e17a1dca#38\",\"5177\":\"v-e17a1dca#38/0\",\"5178\":\"v-e17a1dca#39\",\"5179\":\"v-e17a1dca#39/0\",\"5180\":\"v-6c315fa0\",\"5181\":\"v-6c315fa0#1\",\"5182\":\"v-6c315fa0#1/0\",\"5183\":\"v-6c315fa0#1/1\",\"5184\":\"v-6c315fa0#1/2\",\"5185\":\"v-6c315fa0#1/3\",\"5186\":\"v-6c315fa0#1/4\",\"5187\":\"v-6c315fa0#1/5\",\"5188\":\"v-6c315fa0#1/6\",\"5189\":\"v-6c315fa0#1/7\",\"5190\":\"v-6c315fa0#2\",\"5191\":\"v-6c315fa0#3\",\"5192\":\"v-6c315fa0#3/0\",\"5193\":\"v-6c315fa0#3/1\",\"5194\":\"v-6c315fa0#3/2\",\"5195\":\"v-6c315fa0#3/3\",\"5196\":\"v-6c315fa0#3/4\",\"5197\":\"v-6c315fa0#3/5\",\"5198\":\"v-6c315fa0#3/6\",\"5199\":\"v-6c315fa0#3/7\",\"5200\":\"v-6c315fa0#3/8\",\"5201\":\"v-6c315fa0#4\",\"5202\":\"v-6c315fa0#4/9\",\"5203\":\"v-6c315fa0#4/10\",\"5204\":\"v-6c315fa0#4/11\",\"5205\":\"v-6c315fa0#4/12\",\"5206\":\"v-6c315fa0#4/13\",\"5207\":\"v-6c315fa0#4/14\",\"5208\":\"v-6c315fa0#4/15\",\"5209\":\"v-6c315fa0#4/16\",\"5210\":\"v-6c315fa0#4/17\",\"5211\":\"v-6c315fa0#4/18\",\"5212\":\"v-6c315fa0#4/19\",\"5213\":\"v-6c315fa0#4/20\",\"5214\":\"v-6c315fa0#4/21\",\"5215\":\"v-6c315fa0#4/22\",\"5216\":\"v-6c315fa0#4/23\",\"5217\":\"v-6c315fa0#4/24\",\"5218\":\"v-6c315fa0#4/25\",\"5219\":\"v-6c315fa0#4/26\",\"5220\":\"v-6c315fa0#4/27\",\"5221\":\"v-6c315fa0#4/28\",\"5222\":\"v-6c315fa0#4/29\",\"5223\":\"v-6c315fa0#4/30\",\"5224\":\"v-6c315fa0#4/31\",\"5225\":\"v-6c315fa0#4/32\",\"5226\":\"v-6c315fa0#4/33\",\"5227\":\"v-6c315fa0#4/34\",\"5228\":\"v-6c315fa0#4/35\",\"5229\":\"v-6c315fa0#4/36\",\"5230\":\"v-6c315fa0#4/37\",\"5231\":\"v-6c315fa0#4/38\",\"5232\":\"v-6c315fa0#4/39\",\"5233\":\"v-6c315fa0#5\",\"5234\":\"v-6c315fa0#6\",\"5235\":\"v-6c315fa0#6/0\",\"5236\":\"v-6c315fa0#7\",\"5237\":\"v-6c315fa0#7/0\",\"5238\":\"v-6c315fa0#7/1\",\"5239\":\"v-6c315fa0#7/2\",\"5240\":\"v-6c315fa0#7/3\",\"5241\":\"v-6c315fa0#7/4\",\"5242\":\"v-6c315fa0#8\",\"5243\":\"v-6c315fa0#9\",\"5244\":\"v-6c315fa0#9/0\",\"5245\":\"v-6c315fa0#10\",\"5246\":\"v-6c315fa0#10/0\",\"5247\":\"v-6c315fa0#10/1\",\"5248\":\"v-6c315fa0#10/2\",\"5249\":\"v-6c315fa0#10/3\",\"5250\":\"v-6c315fa0#11\",\"5251\":\"v-6c315fa0#11/0\",\"5252\":\"v-6c315fa0#11/1\",\"5253\":\"v-6c315fa0#11/2\",\"5254\":\"v-6c315fa0#11/3\",\"5255\":\"v-6c315fa0#11/4\",\"5256\":\"v-359680c8\",\"5257\":\"v-359680c8#0/0\",\"5258\":\"v-359680c8#0/1\",\"5259\":\"v-359680c8#0/2\",\"5260\":\"v-359680c8#1\",\"5261\":\"v-359680c8#2\",\"5262\":\"v-359680c8#2/0\",\"5263\":\"v-359680c8#2/1\",\"5264\":\"v-359680c8#2/2\",\"5265\":\"v-359680c8#2/3\",\"5266\":\"v-359680c8#2/4\",\"5267\":\"v-359680c8#3\",\"5268\":\"v-359680c8#3/0\",\"5269\":\"v-359680c8#3/1\",\"5270\":\"v-359680c8#3/2\",\"5271\":\"v-359680c8#3/3\",\"5272\":\"v-359680c8#4\",\"5273\":\"v-359680c8#4/0\",\"5274\":\"v-359680c8#5\",\"5275\":\"v-359680c8#5/0\",\"5276\":\"v-359680c8#6\",\"5277\":\"v-359680c8#6/0\",\"5278\":\"v-359680c8#6/1\",\"5279\":\"v-359680c8#6/2\",\"5280\":\"v-359680c8#6/3\",\"5281\":\"v-76002cf8\",\"5282\":\"v-76002cf8#0/0\",\"5283\":\"v-76002cf8#0/1\",\"5284\":\"v-76002cf8#1\",\"5285\":\"v-76002cf8#1/0\",\"5286\":\"v-76002cf8#1/1\",\"5287\":\"v-76002cf8#1/2\",\"5288\":\"v-76002cf8#1/3\",\"5289\":\"v-76002cf8#1/4\",\"5290\":\"v-76002cf8#2\",\"5291\":\"v-76002cf8#2/0\",\"5292\":\"v-76002cf8#2/1\",\"5293\":\"v-27b3dbbc\",\"5294\":\"v-27b3dbbc#1\",\"5295\":\"v-27b3dbbc#1/0\",\"5296\":\"v-27b3dbbc#1/1\",\"5297\":\"v-27b3dbbc#1/2\",\"5298\":\"v-27b3dbbc#1/3\",\"5299\":\"v-27b3dbbc#1/4\",\"5300\":\"v-27b3dbbc#1/5\",\"5301\":\"v-27b3dbbc#1/6\",\"5302\":\"v-27b3dbbc#1/7\",\"5303\":\"v-27b3dbbc#1/8\",\"5304\":\"v-27b3dbbc#2\",\"5305\":\"v-27b3dbbc#2/0\",\"5306\":\"v-27b3dbbc#3\",\"5307\":\"v-27b3dbbc#3/0\",\"5308\":\"v-27b3dbbc#4\",\"5309\":\"v-27b3dbbc#5\",\"5310\":\"v-27b3dbbc#6\",\"5311\":\"v-27b3dbbc#7\",\"5312\":\"v-27b3dbbc#7/0\",\"5313\":\"v-27b3dbbc#7/1\",\"5314\":\"v-27b3dbbc#7/2\",\"5315\":\"v-27b3dbbc#7/3\",\"5316\":\"v-27b3dbbc#7/4\",\"5317\":\"v-27b3dbbc#7/5\",\"5318\":\"v-27b3dbbc#8\",\"5319\":\"v-27b3dbbc#8/0\",\"5320\":\"v-27b3dbbc#8/1\",\"5321\":\"v-27b3dbbc#8/2\",\"5322\":\"v-27b3dbbc#8/3\",\"5323\":\"v-27b3dbbc#8/4\",\"5324\":\"v-27b3dbbc#8/5\",\"5325\":\"v-27b3dbbc#8/6\",\"5326\":\"v-27b3dbbc#8/7\",\"5327\":\"v-27b3dbbc#8/8\",\"5328\":\"v-27b3dbbc#8/9\",\"5329\":\"v-27b3dbbc#8/10\",\"5330\":\"v-27b3dbbc#9\",\"5331\":\"v-27b3dbbc#9/0\",\"5332\":\"v-27b3dbbc#9/1\",\"5333\":\"v-27b3dbbc#9/2\",\"5334\":\"v-27b3dbbc#9/3\",\"5335\":\"v-27b3dbbc#9/4\",\"5336\":\"v-27b3dbbc#9/5\",\"5337\":\"v-27b3dbbc#9/6\",\"5338\":\"v-27b3dbbc#9/7\",\"5339\":\"v-27b3dbbc#9/8\",\"5340\":\"v-27b3dbbc#9/9\",\"5341\":\"v-27b3dbbc#9/10\",\"5342\":\"v-27b3dbbc#10\",\"5343\":\"v-27b3dbbc#11\",\"5344\":\"v-27b3dbbc#11/0\",\"5345\":\"v-27b3dbbc#11/1\",\"5346\":\"v-27b3dbbc#12\",\"5347\":\"v-27b3dbbc#12/0\",\"5348\":\"v-27b3dbbc#12/1\",\"5349\":\"v-27b3dbbc#12/2\",\"5350\":\"v-27b3dbbc#12/3\",\"5351\":\"v-27b3dbbc#13\",\"5352\":\"v-27b3dbbc#13/0\",\"5353\":\"v-27b3dbbc#13/1\",\"5354\":\"v-27b3dbbc#13/2\",\"5355\":\"v-27b3dbbc#13/3\",\"5356\":\"v-27b3dbbc#14\",\"5357\":\"v-27b3dbbc#14/0\",\"5358\":\"v-27b3dbbc#14/1\",\"5359\":\"v-27b3dbbc#14/2\",\"5360\":\"v-27b3dbbc#15\",\"5361\":\"v-27b3dbbc#16\",\"5362\":\"v-27b3dbbc#16/0\",\"5363\":\"v-27b3dbbc#16/1\",\"5364\":\"v-27b3dbbc#16/2\",\"5365\":\"v-27b3dbbc#16/3\",\"5366\":\"v-27b3dbbc#17\",\"5367\":\"v-27b3dbbc#17/0\",\"5368\":\"v-27b3dbbc#17/1\",\"5369\":\"v-27b3dbbc#17/2\",\"5370\":\"v-27b3dbbc#17/3\",\"5371\":\"v-27b3dbbc#17/4\",\"5372\":\"v-27b3dbbc#17/5\",\"5373\":\"v-27b3dbbc#17/6\",\"5374\":\"v-27b3dbbc#17/7\",\"5375\":\"v-27b3dbbc#17/8\",\"5376\":\"v-27b3dbbc#17/9\",\"5377\":\"v-27b3dbbc#17/10\",\"5378\":\"v-27b3dbbc#18\",\"5379\":\"v-27b3dbbc#18/0\",\"5380\":\"v-27b3dbbc#18/1\",\"5381\":\"v-27b3dbbc#18/2\",\"5382\":\"v-27b3dbbc#18/3\",\"5383\":\"v-27b3dbbc#18/4\",\"5384\":\"v-27b3dbbc#18/5\",\"5385\":\"v-27b3dbbc#18/6\",\"5386\":\"v-27b3dbbc#18/7\",\"5387\":\"v-09033722\",\"5388\":\"v-09033722#1\",\"5389\":\"v-09033722#2\",\"5390\":\"v-09033722#3\",\"5391\":\"v-09033722#3/0\",\"5392\":\"v-09033722#3/1\",\"5393\":\"v-09033722#3/2\",\"5394\":\"v-09033722#3/3\",\"5395\":\"v-09033722#3/4\",\"5396\":\"v-09033722#3/5\",\"5397\":\"v-09033722#4\",\"5398\":\"v-09033722#4/0\",\"5399\":\"v-09033722#4/1\",\"5400\":\"v-09033722#4/2\",\"5401\":\"v-09033722#4/3\",\"5402\":\"v-09033722#4/4\",\"5403\":\"v-09033722#4/5\",\"5404\":\"v-09033722#4/6\",\"5405\":\"v-09033722#4/7\",\"5406\":\"v-09033722#4/8\",\"5407\":\"v-09033722#4/9\",\"5408\":\"v-09033722#4/10\",\"5409\":\"v-09033722#4/11\",\"5410\":\"v-09033722#4/12\",\"5411\":\"v-09033722#4/13\",\"5412\":\"v-09033722#4/14\",\"5413\":\"v-09033722#4/15\",\"5414\":\"v-09033722#4/16\",\"5415\":\"v-09033722#4/17\",\"5416\":\"v-09033722#4/18\",\"5417\":\"v-09033722#4/19\",\"5418\":\"v-09033722#4/20\",\"5419\":\"v-09033722#5\",\"5420\":\"v-09033722#6\",\"5421\":\"v-09033722#6/0\",\"5422\":\"v-09033722#6/1\",\"5423\":\"v-09033722#6/2\",\"5424\":\"v-09033722#6/3\",\"5425\":\"v-09033722#6/4\",\"5426\":\"v-09033722#6/5\",\"5427\":\"v-09033722#6/6\",\"5428\":\"v-09033722#6/7\",\"5429\":\"v-09033722#6/8\",\"5430\":\"v-09033722#6/9\",\"5431\":\"v-09033722#6/10\",\"5432\":\"v-09033722#6/11\",\"5433\":\"v-09033722#6/12\",\"5434\":\"v-09033722#7\",\"5435\":\"v-09033722#8\",\"5436\":\"v-09033722#8/0\",\"5437\":\"v-09033722#8/1\",\"5438\":\"v-09033722#8/2\",\"5439\":\"v-09033722#8/3\",\"5440\":\"v-09033722#8/4\",\"5441\":\"v-09033722#8/5\",\"5442\":\"v-09033722#8/6\",\"5443\":\"v-09033722#8/7\",\"5444\":\"v-09033722#8/8\",\"5445\":\"v-09033722#8/9\",\"5446\":\"v-09033722#8/10\",\"5447\":\"v-09033722#8/11\",\"5448\":\"v-09033722#8/12\",\"5449\":\"v-09033722#8/13\",\"5450\":\"v-09033722#8/14\",\"5451\":\"v-09033722#8/15\",\"5452\":\"v-09033722#8/16\",\"5453\":\"v-09033722#8/17\",\"5454\":\"v-09033722#8/18\",\"5455\":\"v-09033722#8/19\",\"5456\":\"v-09033722#8/20\",\"5457\":\"v-f9616996\",\"5458\":\"v-f9616996#1\",\"5459\":\"v-f9616996#1/0\",\"5460\":\"v-f9616996#1/1\",\"5461\":\"v-f9616996#1/2\",\"5462\":\"v-f9616996#1/3\",\"5463\":\"v-f9616996#1/4\",\"5464\":\"v-f9616996#1/5\",\"5465\":\"v-f9616996#1/6\",\"5466\":\"v-f9616996#1/7\",\"5467\":\"v-f9616996#1/8\",\"5468\":\"v-f9616996#1/9\",\"5469\":\"v-f9616996#1/10\",\"5470\":\"v-f9616996#1/11\",\"5471\":\"v-f9616996#1/12\",\"5472\":\"v-f9616996#2\",\"5473\":\"v-f9616996#3\",\"5474\":\"v-f9616996#3/0\",\"5475\":\"v-f9616996#3/1\",\"5476\":\"v-f9616996#3/2\",\"5477\":\"v-f9616996#4\",\"5478\":\"v-f9616996#4/0\",\"5479\":\"v-f9616996#4/1\",\"5480\":\"v-f9616996#4/2\",\"5481\":\"v-f9616996#4/3\",\"5482\":\"v-f9616996#4/4\",\"5483\":\"v-f9616996#5\",\"5484\":\"v-f9616996#5/0\",\"5485\":\"v-f9616996#5/1\",\"5486\":\"v-f9616996#5/2\",\"5487\":\"v-f9616996#6\",\"5488\":\"v-f9616996#6/0\",\"5489\":\"v-f9616996#6/1\",\"5490\":\"v-f9616996#6/2\",\"5491\":\"v-f9616996#7\",\"5492\":\"v-f9616996#7/0\",\"5493\":\"v-f9616996#7/1\",\"5494\":\"v-f9616996#7/2\",\"5495\":\"v-f9616996#7/3\",\"5496\":\"v-f9616996#7/4\",\"5497\":\"v-f9616996#7/5\",\"5498\":\"v-f9616996#7/6\",\"5499\":\"v-f9616996#7/7\",\"5500\":\"v-f9616996#7/8\",\"5501\":\"v-f9616996#7/9\",\"5502\":\"v-f9616996#8\",\"5503\":\"v-f9616996#8/0\",\"5504\":\"v-f9616996#8/1\",\"5505\":\"v-f9616996#8/2\",\"5506\":\"v-f9616996#8/3\",\"5507\":\"v-f9616996#8/4\",\"5508\":\"v-f9616996#8/5\",\"5509\":\"v-f9616996#8/6\",\"5510\":\"v-f9616996#8/7\",\"5511\":\"v-f9616996#8/8\",\"5512\":\"v-f9616996#8/9\",\"5513\":\"v-f9616996#9\",\"5514\":\"v-f9616996#9/0\",\"5515\":\"v-f9616996#9/1\",\"5516\":\"v-f9616996#9/2\",\"5517\":\"v-f9616996#9/3\",\"5518\":\"v-f9616996#9/4\",\"5519\":\"v-f9616996#10\",\"5520\":\"v-f9616996#10/5\",\"5521\":\"v-f9616996#10/6\",\"5522\":\"v-f9616996#10/7\",\"5523\":\"v-f9616996#10/8\",\"5524\":\"v-f9616996#10/9\",\"5525\":\"v-f9616996#10/10\",\"5526\":\"v-f9616996#10/11\",\"5527\":\"v-f9616996#10/12\",\"5528\":\"v-f9616996#10/13\",\"5529\":\"v-f9616996#10/14\",\"5530\":\"v-f9616996#10/15\",\"5531\":\"v-f9616996#10/16\",\"5532\":\"v-f9616996#10/17\",\"5533\":\"v-f9616996#10/18\",\"5534\":\"v-f9616996#10/19\",\"5535\":\"v-f9616996#10/20\",\"5536\":\"v-f9616996#10/21\",\"5537\":\"v-f9616996#10/22\",\"5538\":\"v-f9616996#10/23\",\"5539\":\"v-f9616996#10/24\",\"5540\":\"v-f9616996#10/25\",\"5541\":\"v-f9616996#10/26\",\"5542\":\"v-f9616996#10/27\",\"5543\":\"v-f9616996#10/28\",\"5544\":\"v-f9616996#10/29\",\"5545\":\"v-f9616996#10/30\",\"5546\":\"v-f9616996#10/31\",\"5547\":\"v-f9616996#10/32\",\"5548\":\"v-f9616996#10/33\",\"5549\":\"v-f9616996#10/34\",\"5550\":\"v-f9616996#10/35\",\"5551\":\"v-f9616996#10/36\",\"5552\":\"v-f9616996#10/37\",\"5553\":\"v-f9616996#11\",\"5554\":\"v-f9616996#11/0\",\"5555\":\"v-f9616996#11/1\",\"5556\":\"v-f9616996#11/2\",\"5557\":\"v-f9616996#11/3\",\"5558\":\"v-f9616996#11/4\",\"5559\":\"v-f9616996#11/5\",\"5560\":\"v-f9616996#11/6\",\"5561\":\"v-f9616996#11/7\",\"5562\":\"v-f9616996#11/8\",\"5563\":\"v-f9616996#11/9\",\"5564\":\"v-f9616996#11/10\",\"5565\":\"v-f9616996#11/11\",\"5566\":\"v-f9616996#12\",\"5567\":\"v-f9616996#12/0\",\"5568\":\"v-f9616996#12/1\",\"5569\":\"v-f9616996#12/2\",\"5570\":\"v-f9616996#12/3\",\"5571\":\"v-f9616996#12/4\",\"5572\":\"v-f9616996#12/5\",\"5573\":\"v-f9616996#13\",\"5574\":\"v-f9616996#13/0\",\"5575\":\"v-306b7475\",\"5576\":\"v-0a98898e\",\"5577\":\"v-c6f23874\",\"5578\":\"v-74875e60\",\"5579\":\"v-70349e7c\",\"5580\":\"v-09d1fd44\",\"5581\":\"v-27255a3a\",\"5582\":\"v-e7ae8e10\",\"5583\":\"v-0500bc12\",\"5584\":\"v-03dc69cd\",\"5585\":\"v-5bc5daac\",\"5586\":\"v-96b8eb96\",\"5587\":\"v-43de1d46\",\"5588\":\"v-56c59726\",\"5589\":\"v-79528dfd\",\"5590\":\"v-2b17cb0a\",\"5591\":\"v-7f7c299a\",\"5592\":\"v-1c49167e\",\"5593\":\"v-d388c4dc\",\"5594\":\"v-c48b8372\",\"5595\":\"v-443c1136\",\"5596\":\"v-787e4606\",\"5597\":\"v-4694ee4d\",\"5598\":\"v-78c5c555\",\"5599\":\"v-3e7dbf32\",\"5600\":\"v-df4e5736\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,4],\"2\":[2],\"3\":[1],\"4\":[1],\"5\":[null,2],\"6\":[null,1],\"7\":[null,1],\"8\":[null,1],\"9\":[1],\"10\":[null,4],\"11\":[null,3],\"12\":[null,1],\"13\":[null,1],\"14\":[null,1],\"15\":[null,1],\"16\":[null,1],\"17\":[null,1],\"18\":[null,1],\"19\":[null,3],\"20\":[null,1],\"21\":[null,1],\"22\":[null,1],\"23\":[1],\"24\":[null,2],\"25\":[null,5],\"26\":[null,5],\"27\":[2],\"28\":[null,7],\"29\":[null,7],\"30\":[2],\"31\":[null,8],\"32\":[2],\"33\":[null,7],\"34\":[null,1],\"35\":[null,8],\"36\":[2],\"37\":[null,11],\"38\":[2],\"39\":[null,6],\"40\":[null,7],\"41\":[1],\"42\":[null,10],\"43\":[1],\"44\":[null,5],\"45\":[null,1],\"46\":[null,6],\"47\":[null,5],\"48\":[null,1],\"49\":[null,1],\"50\":[null,1],\"51\":[null,1],\"52\":[null,1],\"53\":[null,1],\"54\":[null,1],\"55\":[null,1],\"56\":[null,1],\"57\":[1],\"58\":[null,1],\"59\":[1],\"60\":[null,2],\"61\":[null,1],\"62\":[1],\"63\":[null,1],\"64\":[null,1],\"65\":[null,1],\"66\":[1],\"67\":[null,5],\"68\":[null,1],\"69\":[1],\"70\":[null,3],\"71\":[null,1],\"72\":[1],\"73\":[null,3],\"74\":[null,1],\"75\":[1],\"76\":[null,3],\"77\":[null,3],\"78\":[null,1],\"79\":[1],\"80\":[null,1],\"81\":[null,1],\"82\":[1],\"83\":[null,23],\"84\":[null,1],\"85\":[1],\"86\":[null,1],\"87\":[1],\"88\":[null,1],\"89\":[1],\"90\":[null,1],\"91\":[1],\"92\":[null,1],\"93\":[2],\"94\":[null,10],\"95\":[null,1],\"96\":[1],\"97\":[null,2],\"98\":[null,1],\"99\":[null,1],\"100\":[null,1],\"101\":[null,1],\"102\":[1],\"103\":[null,1],\"104\":[1],\"105\":[null,5],\"106\":[null,1],\"107\":[1],\"108\":[null,1],\"109\":[2],\"110\":[null,1],\"111\":[1],\"112\":[null,1],\"113\":[null,2],\"114\":[1],\"115\":[null,3],\"116\":[1],\"117\":[null,6],\"118\":[null,4],\"119\":[null,6],\"120\":[null,3],\"121\":[null,5],\"122\":[1],\"123\":[null,3],\"124\":[null,1],\"125\":[null,6],\"126\":[null,7],\"127\":[null,2],\"128\":[null,4],\"129\":[1],\"130\":[null,2],\"131\":[null,1],\"132\":[null,1],\"133\":[null,3],\"134\":[null,2],\"135\":[null,1],\"136\":[null,1],\"137\":[null,1],\"138\":[null,1],\"139\":[null,1],\"140\":[null,4],\"141\":[1],\"142\":[1],\"143\":[1],\"144\":[null,1],\"145\":[null,1],\"146\":[1],\"147\":[null,1],\"148\":[null,1],\"149\":[1],\"150\":[null,3],\"151\":[null,8],\"152\":[null,3],\"153\":[1],\"154\":[null,3],\"155\":[null,8],\"156\":[null,3],\"157\":[1],\"158\":[2],\"159\":[1],\"160\":[null,4],\"161\":[1],\"162\":[null,1],\"163\":[null,1],\"164\":[1],\"165\":[null,2],\"166\":[2],\"167\":[1],\"168\":[null,4],\"169\":[1],\"170\":[null,1],\"171\":[null,1],\"172\":[1],\"173\":[null,2],\"174\":[1],\"175\":[2],\"176\":[1],\"177\":[5],\"178\":[null,3],\"179\":[null,5],\"180\":[null,4],\"181\":[null,4],\"182\":[null,26],\"183\":[3],\"184\":[1],\"185\":[2],\"186\":[1],\"187\":[1],\"188\":[1],\"189\":[1],\"190\":[null,22],\"191\":[null,4],\"192\":[null,1],\"193\":[1],\"194\":[null,5],\"195\":[null,11],\"196\":[null,1],\"197\":[1],\"198\":[2],\"199\":[null,3],\"200\":[null,5],\"201\":[null,8],\"202\":[null,13],\"203\":[1],\"204\":[null,8],\"205\":[null,11],\"206\":[1],\"207\":[null,4],\"208\":[null,23],\"209\":[null,14],\"210\":[null,9],\"211\":[null,12],\"212\":[null,4],\"213\":[null,3],\"214\":[null,20],\"215\":[null,8],\"216\":[null,4],\"217\":[null,15],\"218\":[null,10],\"219\":[null,12],\"220\":[null,1],\"221\":[1],\"222\":[null,5],\"223\":[null,3],\"224\":[null,3],\"225\":[null,4],\"226\":[null,6],\"227\":[null,1],\"228\":[null,11],\"229\":[null,61],\"230\":[null,5],\"231\":[null,3],\"232\":[null,6],\"233\":[null,11],\"234\":[null,8],\"235\":[null,2],\"236\":[null,12],\"237\":[2],\"238\":[2],\"239\":[3],\"240\":[null,4],\"241\":[null,5],\"242\":[null,5],\"243\":[null,1],\"244\":[null,12],\"245\":[null,8],\"246\":[null,3],\"247\":[null,9],\"248\":[8],\"249\":[null,3],\"250\":[null,8],\"251\":[null,10],\"252\":[null,3],\"253\":[null,5],\"254\":[3],\"255\":[null,3],\"256\":[null,15],\"257\":[null,10],\"258\":[null,3],\"259\":[null,5],\"260\":[null,17],\"261\":[8],\"262\":[null,13],\"263\":[null,24],\"264\":[null,2],\"265\":[null,44],\"266\":[null,8],\"267\":[2],\"268\":[null,7],\"269\":[null,6],\"270\":[null,3],\"271\":[null,25],\"272\":[3],\"273\":[null,9],\"274\":[null,11],\"275\":[null,3],\"276\":[null,35],\"277\":[null,6],\"278\":[null,5],\"279\":[null,2],\"280\":[null,2],\"281\":[null,2],\"282\":[null,2],\"283\":[2],\"284\":[4],\"285\":[null,7],\"286\":[null,2],\"287\":[null,2],\"288\":[null,10],\"289\":[null,5],\"290\":[null,4],\"291\":[null,10],\"292\":[null,7],\"293\":[null,19],\"294\":[null,5],\"295\":[null,3],\"296\":[null,3],\"297\":[null,9],\"298\":[null,2],\"299\":[null,16],\"300\":[null,10],\"301\":[null,3],\"302\":[null,13],\"303\":[3],\"304\":[null,7],\"305\":[null,5],\"306\":[null,6],\"307\":[null,12],\"308\":[null,6],\"309\":[null,9],\"310\":[null,9],\"311\":[3],\"312\":[null,5],\"313\":[null,12],\"314\":[null,10],\"315\":[null,4],\"316\":[null,16],\"317\":[null,13],\"318\":[null,8],\"319\":[3],\"320\":[null,4],\"321\":[null,16],\"322\":[null,4],\"323\":[null,18],\"324\":[null,4],\"325\":[null,17],\"326\":[null,1],\"327\":[null,20],\"328\":[null,10],\"329\":[2],\"330\":[1],\"331\":[1],\"332\":[1],\"333\":[2],\"334\":[null,4],\"335\":[null,3],\"336\":[null,3],\"337\":[8],\"338\":[null,7],\"339\":[null,7],\"340\":[null,14],\"341\":[null,7],\"342\":[null,6],\"343\":[6],\"344\":[null,12],\"345\":[null,5],\"346\":[null,3],\"347\":[null,9],\"348\":[null,5],\"349\":[null,11],\"350\":[3],\"351\":[null,14],\"352\":[null,6],\"353\":[null,7],\"354\":[null,3],\"355\":[null,3],\"356\":[null,7],\"357\":[null,6],\"358\":[null,8],\"359\":[null,7],\"360\":[null,10],\"361\":[null,8],\"362\":[null,18],\"363\":[null,7],\"364\":[null,13],\"365\":[null,11],\"366\":[null,15],\"367\":[7],\"368\":[null,16],\"369\":[null,9],\"370\":[null,10],\"371\":[3],\"372\":[null,8],\"373\":[null,6],\"374\":[null,5],\"375\":[null,10],\"376\":[null,8],\"377\":[null,14],\"378\":[null,10],\"379\":[null,9],\"380\":[null,3],\"381\":[null,18],\"382\":[null,14],\"383\":[null,11],\"384\":[null,8],\"385\":[null,7],\"386\":[5],\"387\":[null,6],\"388\":[null,13],\"389\":[4],\"390\":[null,3],\"391\":[null,14],\"392\":[null,17],\"393\":[null,18],\"394\":[null,4],\"395\":[null,7],\"396\":[null,9],\"397\":[null,17],\"398\":[3],\"399\":[null,2],\"400\":[null,12],\"401\":[null,13],\"402\":[null,11],\"403\":[null,5],\"404\":[null,12],\"405\":[null,5],\"406\":[null,29],\"407\":[null,2],\"408\":[null,3],\"409\":[null,8],\"410\":[null,6],\"411\":[null,13],\"412\":[null,9],\"413\":[1],\"414\":[1],\"415\":[1],\"416\":[2],\"417\":[null,10],\"418\":[3],\"419\":[null,34],\"420\":[2],\"421\":[null,14],\"422\":[null,1],\"423\":[null,1],\"424\":[null,8],\"425\":[null,2],\"426\":[null,2],\"427\":[null,3],\"428\":[null,1],\"429\":[null,1],\"430\":[2],\"431\":[null,5],\"432\":[null,5],\"433\":[null,6],\"434\":[null,10],\"435\":[null,2],\"436\":[null,4],\"437\":[null,1],\"438\":[null,3],\"439\":[1],\"440\":[2],\"441\":[2],\"442\":[null,4],\"443\":[null,10],\"444\":[null,7],\"445\":[2],\"446\":[null,8],\"447\":[null,24],\"448\":[2],\"449\":[null,9],\"450\":[3],\"451\":[null,4],\"452\":[null,4],\"453\":[null,3],\"454\":[null,4],\"455\":[null,12],\"456\":[3],\"457\":[null,4],\"458\":[null,6],\"459\":[null,9],\"460\":[null,13],\"461\":[null,5],\"462\":[null,9],\"463\":[2],\"464\":[null,1],\"465\":[null,8],\"466\":[null,1],\"467\":[null,7],\"468\":[2],\"469\":[null,4],\"470\":[null,7],\"471\":[null,8],\"472\":[null,6],\"473\":[null,5],\"474\":[2],\"475\":[null,11],\"476\":[null,3],\"477\":[null,7],\"478\":[null,7],\"479\":[null,5],\"480\":[null,10],\"481\":[null,3],\"482\":[null,7],\"483\":[2],\"484\":[null,4],\"485\":[null,7],\"486\":[null,4],\"487\":[null,4],\"488\":[null,16],\"489\":[null,9],\"490\":[2],\"491\":[null,5],\"492\":[null,4],\"493\":[null,6],\"494\":[null,9],\"495\":[null,4],\"496\":[2],\"497\":[2],\"498\":[null,3],\"499\":[null,6],\"500\":[null,7],\"501\":[null,5],\"502\":[null,5],\"503\":[null,10],\"504\":[null,4],\"505\":[null,12],\"506\":[null,6],\"507\":[5],\"508\":[null,3],\"509\":[null,2],\"510\":[null,65],\"511\":[null,9],\"512\":[null,2],\"513\":[null,46],\"514\":[null,3],\"515\":[null,5],\"516\":[null,5],\"517\":[null,6],\"518\":[null,2],\"519\":[null,11],\"520\":[null,3],\"521\":[null,2],\"522\":[null,1],\"523\":[null,4],\"524\":[null,19],\"525\":[null,13],\"526\":[2],\"527\":[null,6],\"528\":[null,7],\"529\":[null,5],\"530\":[null,5],\"531\":[null,12],\"532\":[3],\"533\":[4],\"534\":[null,2],\"535\":[null,34],\"536\":[null,2],\"537\":[null,11],\"538\":[null,5],\"539\":[null,40],\"540\":[null,2],\"541\":[null,4],\"542\":[null,4],\"543\":[3],\"544\":[null,2],\"545\":[null,10],\"546\":[null,2],\"547\":[null,29],\"548\":[null,2],\"549\":[null,31],\"550\":[null,3],\"551\":[null,1],\"552\":[null,7],\"553\":[2],\"554\":[null,1],\"555\":[null,1],\"556\":[null,11],\"557\":[null,1],\"558\":[null,1],\"559\":[null,3],\"560\":[null,4],\"561\":[null,3],\"562\":[null,4],\"563\":[null,4],\"564\":[null,7],\"565\":[null,12],\"566\":[null,3],\"567\":[null,10],\"568\":[null,4],\"569\":[null,3],\"570\":[null,3],\"571\":[null,2],\"572\":[2],\"573\":[3],\"574\":[3],\"575\":[null,8],\"576\":[null,2],\"577\":[null,35],\"578\":[2],\"579\":[null,6],\"580\":[null,8],\"581\":[null,27],\"582\":[null,37],\"583\":[2],\"584\":[3],\"585\":[null,4],\"586\":[null,6],\"587\":[null,8],\"588\":[3],\"589\":[null,3],\"590\":[null,6],\"591\":[3],\"592\":[null,11],\"593\":[2],\"594\":[2],\"595\":[4],\"596\":[null,6],\"597\":[4],\"598\":[null,11],\"599\":[null,11],\"600\":[4],\"601\":[null,11],\"602\":[null,10],\"603\":[4],\"604\":[null,8],\"605\":[null,7],\"606\":[null,7],\"607\":[null,5],\"608\":[null,10],\"609\":[2],\"610\":[null,8],\"611\":[null,5],\"612\":[null,22],\"613\":[null,9],\"614\":[null,18],\"615\":[null,13],\"616\":[2],\"617\":[null,3],\"618\":[null,5],\"619\":[null,17],\"620\":[null,8],\"621\":[null,7],\"622\":[null,26],\"623\":[null,9],\"624\":[5],\"625\":[null,11],\"626\":[null,8],\"627\":[2],\"628\":[3],\"629\":[null,10],\"630\":[null,17],\"631\":[6],\"632\":[null,9],\"633\":[4],\"634\":[null,5],\"635\":[3],\"636\":[null,10],\"637\":[3],\"638\":[null,13],\"639\":[3],\"640\":[null,13],\"641\":[null,10],\"642\":[2],\"643\":[null,4],\"644\":[null,2],\"645\":[null,4],\"646\":[null,4],\"647\":[null,1],\"648\":[null,1],\"649\":[null,3],\"650\":[null,8],\"651\":[null,4],\"652\":[null,16],\"653\":[null,7],\"654\":[null,16],\"655\":[null,6],\"656\":[null,8],\"657\":[null,7],\"658\":[null,18],\"659\":[3],\"660\":[null,6],\"661\":[null,6],\"662\":[null,4],\"663\":[2],\"664\":[2],\"665\":[null,5],\"666\":[null,6],\"667\":[null,3],\"668\":[null,9],\"669\":[null,8],\"670\":[3],\"671\":[null,3],\"672\":[null,11],\"673\":[null,3],\"674\":[null,2],\"675\":[null,4],\"676\":[null,1],\"677\":[null,2],\"678\":[null,13],\"679\":[null,3],\"680\":[null,5],\"681\":[null,4],\"682\":[null,14],\"683\":[null,5],\"684\":[4],\"685\":[null,10],\"686\":[null,28],\"687\":[null,5],\"688\":[null,4],\"689\":[null,6],\"690\":[null,6],\"691\":[null,24],\"692\":[null,7],\"693\":[null,12],\"694\":[null,1],\"695\":[null,6],\"696\":[4],\"697\":[null,7],\"698\":[null,3],\"699\":[null,7],\"700\":[null,6],\"701\":[null,13],\"702\":[null,8],\"703\":[null,2],\"704\":[null,42],\"705\":[null,2],\"706\":[null,12],\"707\":[null,3],\"708\":[null,1],\"709\":[null,6],\"710\":[2],\"711\":[null,11],\"712\":[null,5],\"713\":[2],\"714\":[4],\"715\":[null,15],\"716\":[null,1],\"717\":[null,15],\"718\":[3],\"719\":[null,11],\"720\":[null,2],\"721\":[null,10],\"722\":[null,14],\"723\":[null,10],\"724\":[null,22],\"725\":[null,1],\"726\":[null,3],\"727\":[null,3],\"728\":[null,5],\"729\":[null,30],\"730\":[null,19],\"731\":[null,6],\"732\":[null,1],\"733\":[null,5],\"734\":[null,9],\"735\":[null,10],\"736\":[null,5],\"737\":[null,14],\"738\":[null,5],\"739\":[null,1],\"740\":[null,4],\"741\":[null,5],\"742\":[null,11],\"743\":[null,6],\"744\":[null,14],\"745\":[null,8],\"746\":[null,6],\"747\":[null,2],\"748\":[null,12],\"749\":[null,8],\"750\":[null,21],\"751\":[null,3],\"752\":[null,6],\"753\":[null,4],\"754\":[null,3],\"755\":[null,6],\"756\":[null,1],\"757\":[null,32],\"758\":[null,5],\"759\":[null,9],\"760\":[null,18],\"761\":[null,19],\"762\":[null,11],\"763\":[null,7],\"764\":[null,1],\"765\":[null,3],\"766\":[null,5],\"767\":[null,17],\"768\":[null,5],\"769\":[null,3],\"770\":[null,3],\"771\":[null,7],\"772\":[null,7],\"773\":[null,7],\"774\":[null,5],\"775\":[null,52],\"776\":[null,14],\"777\":[null,5],\"778\":[null,20],\"779\":[null,8],\"780\":[null,10],\"781\":[null,17],\"782\":[null,22],\"783\":[null,5],\"784\":[null,6],\"785\":[null,10],\"786\":[null,4],\"787\":[null,5],\"788\":[null,5],\"789\":[null,12],\"790\":[null,12],\"791\":[3],\"792\":[null,17],\"793\":[null,5],\"794\":[null,12],\"795\":[2],\"796\":[null,6],\"797\":[null,8],\"798\":[null,4],\"799\":[null,11],\"800\":[null,6],\"801\":[2],\"802\":[null,10],\"803\":[1],\"804\":[6],\"805\":[1],\"806\":[null,15],\"807\":[null,17],\"808\":[null,13],\"809\":[null,2],\"810\":[null,5],\"811\":[null,7],\"812\":[1],\"813\":[1],\"814\":[null,22],\"815\":[null,2],\"816\":[null,7],\"817\":[null,7],\"818\":[null,19],\"819\":[null,12],\"820\":[null,14],\"821\":[null,10],\"822\":[null,10],\"823\":[null,6],\"824\":[null,11],\"825\":[null,9],\"826\":[null,10],\"827\":[null,8],\"828\":[null,3],\"829\":[1],\"830\":[null,9],\"831\":[null,5],\"832\":[null,6],\"833\":[null,10],\"834\":[null,5],\"835\":[null,4],\"836\":[null,10],\"837\":[1],\"838\":[4],\"839\":[null,4],\"840\":[null,1],\"841\":[null,6],\"842\":[null,4],\"843\":[null,5],\"844\":[null,5],\"845\":[null,2],\"846\":[null,4],\"847\":[null,8],\"848\":[null,3],\"849\":[null,4],\"850\":[3],\"851\":[null,3],\"852\":[null,12],\"853\":[null,9],\"854\":[null,8],\"855\":[null,9],\"856\":[null,15],\"857\":[3],\"858\":[null,11],\"859\":[null,2],\"860\":[null,8],\"861\":[null,8],\"862\":[null,8],\"863\":[null,2],\"864\":[null,8],\"865\":[null,8],\"866\":[null,7],\"867\":[null,2],\"868\":[null,9],\"869\":[2],\"870\":[null,7],\"871\":[null,2],\"872\":[null,1],\"873\":[null,5],\"874\":[null,7],\"875\":[null,7],\"876\":[null,2],\"877\":[null,16],\"878\":[null,2],\"879\":[null,15],\"880\":[null,2],\"881\":[null,3],\"882\":[null,1],\"883\":[null,3],\"884\":[null,8],\"885\":[null,16],\"886\":[null,3],\"887\":[null,1],\"888\":[null,4],\"889\":[null,7],\"890\":[null,12],\"891\":[null,3],\"892\":[null,1],\"893\":[null,21],\"894\":[null,13],\"895\":[null,7],\"896\":[null,3],\"897\":[null,7],\"898\":[null,13],\"899\":[2],\"900\":[null,22],\"901\":[null,14],\"902\":[null,1],\"903\":[null,8],\"904\":[null,1],\"905\":[null,16],\"906\":[null,1],\"907\":[null,13],\"908\":[null,1],\"909\":[null,15],\"910\":[4],\"911\":[null,2],\"912\":[null,8],\"913\":[null,1],\"914\":[5],\"915\":[null,15],\"916\":[null,5],\"917\":[null,5],\"918\":[null,2],\"919\":[null,13],\"920\":[null,29],\"921\":[1],\"922\":[null,2],\"923\":[null,4],\"924\":[null,2],\"925\":[null,5],\"926\":[null,2],\"927\":[null,3],\"928\":[1],\"929\":[null,27],\"930\":[null,12],\"931\":[1],\"932\":[1],\"933\":[null,15],\"934\":[null,3],\"935\":[null,5],\"936\":[null,3],\"937\":[1],\"938\":[null,1],\"939\":[null,15],\"940\":[null,27],\"941\":[5],\"942\":[null,15],\"943\":[null,2],\"944\":[null,8],\"945\":[null,5],\"946\":[null,5],\"947\":[null,10],\"948\":[null,1],\"949\":[null,2],\"950\":[null,6],\"951\":[null,1],\"952\":[null,1],\"953\":[null,1],\"954\":[2],\"955\":[null,6],\"956\":[null,4],\"957\":[null,6],\"958\":[null,4],\"959\":[null,4],\"960\":[null,5],\"961\":[null,1],\"962\":[null,4],\"963\":[2],\"964\":[1],\"965\":[null,1],\"966\":[null,2],\"967\":[null,1],\"968\":[null,1],\"969\":[null,1],\"970\":[null,9],\"971\":[4],\"972\":[null,2],\"973\":[null,10],\"974\":[null,5],\"975\":[null,3],\"976\":[null,12],\"977\":[null,12],\"978\":[null,15],\"979\":[null,11],\"980\":[5],\"981\":[2],\"982\":[null,34],\"983\":[2],\"984\":[null,28],\"985\":[null,2],\"986\":[null,1],\"987\":[null,3],\"988\":[null,1],\"989\":[null,20],\"990\":[2],\"991\":[null,10],\"992\":[null,1],\"993\":[2],\"994\":[null,3],\"995\":[null,3],\"996\":[null,13],\"997\":[null,5],\"998\":[null,7],\"999\":[null,8],\"1000\":[null,3],\"1001\":[null,2],\"1002\":[null,1],\"1003\":[null,10],\"1004\":[1],\"1005\":[1],\"1006\":[null,3],\"1007\":[null,2],\"1008\":[null,2],\"1009\":[null,5],\"1010\":[null,6],\"1011\":[null,3],\"1012\":[null,19],\"1013\":[null,13],\"1014\":[1],\"1015\":[2],\"1016\":[null,1],\"1017\":[null,3],\"1018\":[null,3],\"1019\":[null,5],\"1020\":[null,1],\"1021\":[null,3],\"1022\":[null,4],\"1023\":[null,8],\"1024\":[null,77],\"1025\":[2],\"1026\":[null,1],\"1027\":[null,10],\"1028\":[null,6],\"1029\":[null,1],\"1030\":[null,10],\"1031\":[null,2],\"1032\":[null,2],\"1033\":[null,69],\"1034\":[null,13],\"1035\":[null,2],\"1036\":[null,3],\"1037\":[null,6],\"1038\":[null,4],\"1039\":[null,4],\"1040\":[null,1],\"1041\":[null,13],\"1042\":[null,2],\"1043\":[null,19],\"1044\":[null,2],\"1045\":[null,4],\"1046\":[null,1],\"1047\":[null,11],\"1048\":[null,2],\"1049\":[null,2],\"1050\":[null,5],\"1051\":[null,5],\"1052\":[null,7],\"1053\":[null,6],\"1054\":[null,2],\"1055\":[null,5],\"1056\":[null,28],\"1057\":[1],\"1058\":[1],\"1059\":[null,29],\"1060\":[1],\"1061\":[null,2],\"1062\":[null,1],\"1063\":[null,10],\"1064\":[null,4],\"1065\":[null,32],\"1066\":[2],\"1067\":[2],\"1068\":[null,5],\"1069\":[2],\"1070\":[null,10],\"1071\":[null,1],\"1072\":[null,5],\"1073\":[null,1],\"1074\":[2],\"1075\":[null,8],\"1076\":[null,1],\"1077\":[null,5],\"1078\":[null,1],\"1079\":[null,10],\"1080\":[1],\"1081\":[1],\"1082\":[1],\"1083\":[1],\"1084\":[1],\"1085\":[1],\"1086\":[null,10],\"1087\":[1],\"1088\":[2],\"1089\":[2],\"1090\":[null,3],\"1091\":[null,1],\"1092\":[null,10],\"1093\":[null,6],\"1094\":[null,2],\"1095\":[null,14],\"1096\":[null,15],\"1097\":[null,8],\"1098\":[3],\"1099\":[null,2],\"1100\":[1],\"1101\":[2],\"1102\":[1],\"1103\":[2],\"1104\":[null,4],\"1105\":[null,13],\"1106\":[null,5],\"1107\":[null,8],\"1108\":[null,31],\"1109\":[null,6],\"1110\":[1],\"1111\":[1],\"1112\":[null,3],\"1113\":[null,2],\"1114\":[null,14],\"1115\":[null,7],\"1116\":[null,5],\"1117\":[null,14],\"1118\":[null,7],\"1119\":[null,7],\"1120\":[null,5],\"1121\":[null,4],\"1122\":[null,5],\"1123\":[null,6],\"1124\":[1],\"1125\":[null,5],\"1126\":[null,15],\"1127\":[null,5],\"1128\":[null,28],\"1129\":[null,7],\"1130\":[null,9],\"1131\":[null,11],\"1132\":[1],\"1133\":[3],\"1134\":[null,11],\"1135\":[null,15],\"1136\":[null,7],\"1137\":[null,11],\"1138\":[1],\"1139\":[null,7],\"1140\":[null,26],\"1141\":[null,19],\"1142\":[null,4],\"1143\":[null,1],\"1144\":[null,13],\"1145\":[null,10],\"1146\":[null,6],\"1147\":[null,11],\"1148\":[null,3],\"1149\":[null,14],\"1150\":[null,13],\"1151\":[null,12],\"1152\":[null,7],\"1153\":[null,7],\"1154\":[null,29],\"1155\":[null,9],\"1156\":[null,7],\"1157\":[null,13],\"1158\":[null,14],\"1159\":[1],\"1160\":[null,4],\"1161\":[null,3],\"1162\":[null,1],\"1163\":[null,7],\"1164\":[3],\"1165\":[null,9],\"1166\":[null,8],\"1167\":[null,7],\"1168\":[null,1],\"1169\":[null,2],\"1170\":[null,10],\"1171\":[null,10],\"1172\":[null,9],\"1173\":[null,7],\"1174\":[null,13],\"1175\":[1],\"1176\":[null,10],\"1177\":[null,16],\"1178\":[null,4],\"1179\":[null,11],\"1180\":[null,14],\"1181\":[null,1],\"1182\":[null,19],\"1183\":[null,15],\"1184\":[null,5],\"1185\":[null,12],\"1186\":[null,7],\"1187\":[null,1],\"1188\":[null,12],\"1189\":[null,14],\"1190\":[null,4],\"1191\":[1],\"1192\":[null,13],\"1193\":[null,11],\"1194\":[null,10],\"1195\":[1],\"1196\":[null,5],\"1197\":[null,5],\"1198\":[null,7],\"1199\":[null,5],\"1200\":[null,4],\"1201\":[null,4],\"1202\":[null,5],\"1203\":[null,5],\"1204\":[null,5],\"1205\":[null,5],\"1206\":[null,5],\"1207\":[null,11],\"1208\":[null,5],\"1209\":[null,5],\"1210\":[null,5],\"1211\":[null,5],\"1212\":[null,3],\"1213\":[null,5],\"1214\":[null,8],\"1215\":[null,5],\"1216\":[4],\"1217\":[null,12],\"1218\":[null,14],\"1219\":[null,6],\"1220\":[null,1],\"1221\":[null,6],\"1222\":[null,3],\"1223\":[null,3],\"1224\":[null,3],\"1225\":[null,13],\"1226\":[null,7],\"1227\":[null,16],\"1228\":[null,12],\"1229\":[null,5],\"1230\":[null,8],\"1231\":[null,7],\"1232\":[null,5],\"1233\":[null,7],\"1234\":[null,7],\"1235\":[null,6],\"1236\":[null,21],\"1237\":[4],\"1238\":[null,12],\"1239\":[null,7],\"1240\":[null,1],\"1241\":[null,2],\"1242\":[null,16],\"1243\":[null,12],\"1244\":[null,5],\"1245\":[null,5],\"1246\":[null,10],\"1247\":[null,13],\"1248\":[null,8],\"1249\":[null,7],\"1250\":[null,6],\"1251\":[null,6],\"1252\":[null,11],\"1253\":[null,7],\"1254\":[null,10],\"1255\":[4],\"1256\":[null,11],\"1257\":[null,8],\"1258\":[null,1],\"1259\":[null,2],\"1260\":[null,12],\"1261\":[null,11],\"1262\":[null,6],\"1263\":[null,8],\"1264\":[null,7],\"1265\":[null,4],\"1266\":[null,5],\"1267\":[null,12],\"1268\":[1],\"1269\":[2],\"1270\":[1],\"1271\":[2],\"1272\":[null,4],\"1273\":[null,13],\"1274\":[null,5],\"1275\":[null,8],\"1276\":[null,31],\"1277\":[null,6],\"1278\":[1],\"1279\":[1],\"1280\":[null,3],\"1281\":[null,2],\"1282\":[null,14],\"1283\":[null,7],\"1284\":[null,5],\"1285\":[null,14],\"1286\":[null,7],\"1287\":[null,7],\"1288\":[null,5],\"1289\":[null,4],\"1290\":[null,5],\"1291\":[null,6],\"1292\":[1],\"1293\":[null,5],\"1294\":[null,15],\"1295\":[null,5],\"1296\":[null,28],\"1297\":[null,7],\"1298\":[null,9],\"1299\":[null,11],\"1300\":[1],\"1301\":[3],\"1302\":[null,11],\"1303\":[null,15],\"1304\":[null,7],\"1305\":[null,11],\"1306\":[1],\"1307\":[null,7],\"1308\":[null,26],\"1309\":[null,19],\"1310\":[null,4],\"1311\":[null,1],\"1312\":[null,13],\"1313\":[null,10],\"1314\":[null,6],\"1315\":[null,11],\"1316\":[null,3],\"1317\":[null,14],\"1318\":[null,13],\"1319\":[null,12],\"1320\":[null,7],\"1321\":[null,7],\"1322\":[null,29],\"1323\":[null,9],\"1324\":[null,7],\"1325\":[null,13],\"1326\":[null,14],\"1327\":[1],\"1328\":[null,4],\"1329\":[null,3],\"1330\":[null,1],\"1331\":[null,7],\"1332\":[3],\"1333\":[null,9],\"1334\":[null,8],\"1335\":[null,7],\"1336\":[null,1],\"1337\":[null,2],\"1338\":[null,10],\"1339\":[null,10],\"1340\":[null,9],\"1341\":[null,7],\"1342\":[null,13],\"1343\":[1],\"1344\":[null,10],\"1345\":[null,16],\"1346\":[null,4],\"1347\":[null,11],\"1348\":[null,14],\"1349\":[null,1],\"1350\":[null,19],\"1351\":[null,15],\"1352\":[null,5],\"1353\":[null,12],\"1354\":[null,7],\"1355\":[null,1],\"1356\":[null,12],\"1357\":[null,14],\"1358\":[null,4],\"1359\":[1],\"1360\":[null,13],\"1361\":[null,11],\"1362\":[null,10],\"1363\":[1],\"1364\":[null,5],\"1365\":[null,5],\"1366\":[null,7],\"1367\":[null,5],\"1368\":[null,4],\"1369\":[null,4],\"1370\":[null,5],\"1371\":[null,5],\"1372\":[null,5],\"1373\":[null,5],\"1374\":[null,5],\"1375\":[null,11],\"1376\":[null,5],\"1377\":[null,5],\"1378\":[null,5],\"1379\":[null,5],\"1380\":[null,3],\"1381\":[null,5],\"1382\":[null,8],\"1383\":[null,5],\"1384\":[4],\"1385\":[null,12],\"1386\":[null,14],\"1387\":[null,6],\"1388\":[null,1],\"1389\":[null,6],\"1390\":[null,3],\"1391\":[null,3],\"1392\":[null,3],\"1393\":[null,13],\"1394\":[null,7],\"1395\":[null,16],\"1396\":[null,12],\"1397\":[null,5],\"1398\":[null,8],\"1399\":[null,7],\"1400\":[null,5],\"1401\":[null,7],\"1402\":[null,7],\"1403\":[null,6],\"1404\":[null,21],\"1405\":[4],\"1406\":[null,12],\"1407\":[null,7],\"1408\":[null,1],\"1409\":[null,2],\"1410\":[null,16],\"1411\":[null,12],\"1412\":[null,5],\"1413\":[null,5],\"1414\":[null,10],\"1415\":[null,13],\"1416\":[null,8],\"1417\":[null,7],\"1418\":[null,6],\"1419\":[null,6],\"1420\":[null,11],\"1421\":[null,7],\"1422\":[null,10],\"1423\":[4],\"1424\":[null,11],\"1425\":[null,8],\"1426\":[null,1],\"1427\":[null,2],\"1428\":[null,12],\"1429\":[null,11],\"1430\":[null,6],\"1431\":[null,8],\"1432\":[null,7],\"1433\":[null,4],\"1434\":[null,5],\"1435\":[null,12],\"1436\":[1],\"1437\":[2],\"1438\":[1],\"1439\":[2],\"1440\":[null,4],\"1441\":[null,13],\"1442\":[null,5],\"1443\":[null,8],\"1444\":[null,31],\"1445\":[null,6],\"1446\":[1],\"1447\":[1],\"1448\":[null,3],\"1449\":[null,2],\"1450\":[null,14],\"1451\":[null,7],\"1452\":[null,5],\"1453\":[null,14],\"1454\":[null,7],\"1455\":[null,7],\"1456\":[null,5],\"1457\":[null,4],\"1458\":[null,5],\"1459\":[null,6],\"1460\":[1],\"1461\":[null,5],\"1462\":[null,15],\"1463\":[null,5],\"1464\":[null,28],\"1465\":[null,7],\"1466\":[null,9],\"1467\":[null,11],\"1468\":[1],\"1469\":[3],\"1470\":[null,11],\"1471\":[null,15],\"1472\":[null,7],\"1473\":[null,11],\"1474\":[1],\"1475\":[null,7],\"1476\":[null,26],\"1477\":[null,19],\"1478\":[null,4],\"1479\":[null,1],\"1480\":[null,13],\"1481\":[null,10],\"1482\":[null,6],\"1483\":[null,11],\"1484\":[null,3],\"1485\":[null,14],\"1486\":[null,13],\"1487\":[null,12],\"1488\":[null,7],\"1489\":[null,7],\"1490\":[null,29],\"1491\":[null,9],\"1492\":[null,7],\"1493\":[null,13],\"1494\":[null,14],\"1495\":[1],\"1496\":[null,4],\"1497\":[null,3],\"1498\":[null,1],\"1499\":[null,7],\"1500\":[3],\"1501\":[null,9],\"1502\":[null,8],\"1503\":[null,7],\"1504\":[null,1],\"1505\":[null,2],\"1506\":[null,10],\"1507\":[null,10],\"1508\":[null,9],\"1509\":[null,7],\"1510\":[null,13],\"1511\":[1],\"1512\":[null,10],\"1513\":[null,16],\"1514\":[null,4],\"1515\":[null,11],\"1516\":[null,14],\"1517\":[null,1],\"1518\":[null,19],\"1519\":[null,15],\"1520\":[null,5],\"1521\":[null,12],\"1522\":[null,7],\"1523\":[null,1],\"1524\":[null,12],\"1525\":[null,14],\"1526\":[null,4],\"1527\":[1],\"1528\":[null,13],\"1529\":[null,11],\"1530\":[null,10],\"1531\":[1],\"1532\":[null,5],\"1533\":[null,5],\"1534\":[null,7],\"1535\":[null,5],\"1536\":[null,4],\"1537\":[null,4],\"1538\":[null,5],\"1539\":[null,5],\"1540\":[null,5],\"1541\":[null,5],\"1542\":[null,5],\"1543\":[null,11],\"1544\":[null,5],\"1545\":[null,5],\"1546\":[null,5],\"1547\":[null,5],\"1548\":[null,3],\"1549\":[null,5],\"1550\":[null,8],\"1551\":[null,5],\"1552\":[4],\"1553\":[null,12],\"1554\":[null,14],\"1555\":[null,6],\"1556\":[null,1],\"1557\":[null,6],\"1558\":[null,3],\"1559\":[null,3],\"1560\":[null,3],\"1561\":[null,13],\"1562\":[null,7],\"1563\":[null,16],\"1564\":[null,12],\"1565\":[null,5],\"1566\":[null,8],\"1567\":[null,7],\"1568\":[null,5],\"1569\":[null,7],\"1570\":[null,7],\"1571\":[null,6],\"1572\":[null,21],\"1573\":[4],\"1574\":[null,12],\"1575\":[null,7],\"1576\":[null,1],\"1577\":[null,2],\"1578\":[null,16],\"1579\":[null,12],\"1580\":[null,5],\"1581\":[null,5],\"1582\":[null,10],\"1583\":[null,13],\"1584\":[null,8],\"1585\":[null,7],\"1586\":[null,6],\"1587\":[null,6],\"1588\":[null,11],\"1589\":[null,7],\"1590\":[null,10],\"1591\":[4],\"1592\":[null,11],\"1593\":[null,8],\"1594\":[null,1],\"1595\":[null,2],\"1596\":[null,12],\"1597\":[null,11],\"1598\":[null,6],\"1599\":[null,8],\"1600\":[null,7],\"1601\":[null,4],\"1602\":[null,5],\"1603\":[null,12],\"1604\":[1],\"1605\":[2],\"1606\":[1],\"1607\":[2],\"1608\":[null,4],\"1609\":[null,13],\"1610\":[null,5],\"1611\":[null,8],\"1612\":[null,31],\"1613\":[null,6],\"1614\":[1],\"1615\":[1],\"1616\":[null,3],\"1617\":[null,2],\"1618\":[null,14],\"1619\":[null,7],\"1620\":[null,5],\"1621\":[null,14],\"1622\":[null,7],\"1623\":[null,7],\"1624\":[null,5],\"1625\":[null,4],\"1626\":[null,5],\"1627\":[null,6],\"1628\":[1],\"1629\":[null,5],\"1630\":[null,15],\"1631\":[null,5],\"1632\":[null,28],\"1633\":[null,7],\"1634\":[null,9],\"1635\":[null,11],\"1636\":[1],\"1637\":[3],\"1638\":[null,11],\"1639\":[null,15],\"1640\":[null,7],\"1641\":[null,11],\"1642\":[1],\"1643\":[null,7],\"1644\":[null,26],\"1645\":[null,19],\"1646\":[null,4],\"1647\":[null,1],\"1648\":[null,13],\"1649\":[null,10],\"1650\":[null,6],\"1651\":[null,11],\"1652\":[null,3],\"1653\":[null,14],\"1654\":[null,13],\"1655\":[null,12],\"1656\":[null,7],\"1657\":[null,7],\"1658\":[null,29],\"1659\":[null,9],\"1660\":[null,7],\"1661\":[null,13],\"1662\":[null,14],\"1663\":[1],\"1664\":[null,4],\"1665\":[null,3],\"1666\":[null,1],\"1667\":[null,7],\"1668\":[3],\"1669\":[null,9],\"1670\":[null,8],\"1671\":[null,7],\"1672\":[null,1],\"1673\":[null,2],\"1674\":[null,10],\"1675\":[null,10],\"1676\":[null,9],\"1677\":[null,7],\"1678\":[null,13],\"1679\":[1],\"1680\":[null,10],\"1681\":[null,16],\"1682\":[null,4],\"1683\":[null,11],\"1684\":[null,14],\"1685\":[null,1],\"1686\":[null,19],\"1687\":[null,15],\"1688\":[null,5],\"1689\":[null,12],\"1690\":[null,7],\"1691\":[null,1],\"1692\":[null,12],\"1693\":[null,14],\"1694\":[null,4],\"1695\":[1],\"1696\":[null,13],\"1697\":[null,11],\"1698\":[null,10],\"1699\":[1],\"1700\":[null,5],\"1701\":[null,5],\"1702\":[null,7],\"1703\":[null,5],\"1704\":[null,4],\"1705\":[null,4],\"1706\":[null,5],\"1707\":[null,5],\"1708\":[null,5],\"1709\":[null,5],\"1710\":[null,5],\"1711\":[null,11],\"1712\":[null,5],\"1713\":[null,5],\"1714\":[null,5],\"1715\":[null,5],\"1716\":[null,3],\"1717\":[null,5],\"1718\":[null,8],\"1719\":[null,5],\"1720\":[4],\"1721\":[null,12],\"1722\":[null,14],\"1723\":[null,6],\"1724\":[null,1],\"1725\":[null,6],\"1726\":[null,3],\"1727\":[null,3],\"1728\":[null,3],\"1729\":[null,13],\"1730\":[null,7],\"1731\":[null,16],\"1732\":[null,12],\"1733\":[null,5],\"1734\":[null,8],\"1735\":[null,7],\"1736\":[null,5],\"1737\":[null,7],\"1738\":[null,7],\"1739\":[null,6],\"1740\":[null,21],\"1741\":[4],\"1742\":[null,12],\"1743\":[null,7],\"1744\":[null,1],\"1745\":[null,2],\"1746\":[null,16],\"1747\":[null,12],\"1748\":[null,5],\"1749\":[null,5],\"1750\":[null,10],\"1751\":[null,13],\"1752\":[null,8],\"1753\":[null,7],\"1754\":[null,6],\"1755\":[null,6],\"1756\":[null,11],\"1757\":[null,7],\"1758\":[null,10],\"1759\":[4],\"1760\":[null,11],\"1761\":[null,8],\"1762\":[null,1],\"1763\":[null,2],\"1764\":[null,12],\"1765\":[null,11],\"1766\":[null,6],\"1767\":[null,8],\"1768\":[null,7],\"1769\":[null,4],\"1770\":[null,5],\"1771\":[null,12],\"1772\":[1],\"1773\":[1],\"1774\":[3],\"1775\":[null,3],\"1776\":[null,25],\"1777\":[null,6],\"1778\":[null,8],\"1779\":[1],\"1780\":[null,9],\"1781\":[null,1],\"1782\":[null,8],\"1783\":[null,10],\"1784\":[null,8],\"1785\":[null,13],\"1786\":[null,8],\"1787\":[null,7],\"1788\":[null,8],\"1789\":[1],\"1790\":[2],\"1791\":[2],\"1792\":[3],\"1793\":[null,21],\"1794\":[1],\"1795\":[null,4],\"1796\":[null,12],\"1797\":[null,2],\"1798\":[null,2],\"1799\":[null,1],\"1800\":[null,1],\"1801\":[null,1],\"1802\":[null,1],\"1803\":[null,1],\"1804\":[null,1],\"1805\":[null,1],\"1806\":[null,5],\"1807\":[null,4],\"1808\":[null,8],\"1809\":[null,6],\"1810\":[null,4],\"1811\":[null,7],\"1812\":[null,1],\"1813\":[null,6],\"1814\":[null,7],\"1815\":[null,4],\"1816\":[null,2],\"1817\":[2],\"1818\":[null,1],\"1819\":[null,3],\"1820\":[null,1],\"1821\":[null,6],\"1822\":[null,2],\"1823\":[null,33],\"1824\":[null,2],\"1825\":[null,8],\"1826\":[null,2],\"1827\":[null,45],\"1828\":[null,3],\"1829\":[null,1],\"1830\":[null,2],\"1831\":[null,3],\"1832\":[null,1],\"1833\":[null,6],\"1834\":[null,1],\"1835\":[null,6],\"1836\":[null,6],\"1837\":[null,3],\"1838\":[null,3],\"1839\":[null,11],\"1840\":[null,2],\"1841\":[null,2],\"1842\":[null,3],\"1843\":[null,2],\"1844\":[null,5],\"1845\":[null,2],\"1846\":[null,9],\"1847\":[1],\"1848\":[null,11],\"1849\":[null,1],\"1850\":[null,15],\"1851\":[null,2],\"1852\":[null,15],\"1853\":[1],\"1854\":[1],\"1855\":[1],\"1856\":[null,6],\"1857\":[null,19],\"1858\":[null,12],\"1859\":[null,5],\"1860\":[null,25],\"1861\":[1],\"1862\":[2],\"1863\":[null,14],\"1864\":[3],\"1865\":[null,3],\"1866\":[null,18],\"1867\":[null,18],\"1868\":[2],\"1869\":[null,12],\"1870\":[2],\"1871\":[null,13],\"1872\":[null,6],\"1873\":[null,8],\"1874\":[null,4],\"1875\":[null,11],\"1876\":[1],\"1877\":[null,17],\"1878\":[null,17],\"1879\":[null,15],\"1880\":[null,21],\"1881\":[null,11],\"1882\":[1],\"1883\":[null,11],\"1884\":[null,12],\"1885\":[null,25],\"1886\":[null,39],\"1887\":[null,9],\"1888\":[null,11],\"1889\":[null,16],\"1890\":[null,32],\"1891\":[null,19],\"1892\":[null,8],\"1893\":[null,4],\"1894\":[null,9],\"1895\":[null,14],\"1896\":[null,2],\"1897\":[null,23],\"1898\":[null,1],\"1899\":[null,2],\"1900\":[null,17],\"1901\":[null,2],\"1902\":[null,34],\"1903\":[null,1],\"1904\":[1],\"1905\":[1],\"1906\":[null,11],\"1907\":[null,1],\"1908\":[null,8],\"1909\":[null,3],\"1910\":[null,5],\"1911\":[null,6],\"1912\":[null,2],\"1913\":[null,9],\"1914\":[5],\"1915\":[null,16],\"1916\":[null,20],\"1917\":[null,11],\"1918\":[null,17],\"1919\":[null,17],\"1920\":[null,8],\"1921\":[null,12],\"1922\":[1],\"1923\":[1],\"1924\":[3],\"1925\":[10],\"1926\":[null,18],\"1927\":[6],\"1928\":[null,18],\"1929\":[2],\"1930\":[null,11],\"1931\":[3],\"1932\":[null,4],\"1933\":[null,4],\"1934\":[null,2],\"1935\":[null,4],\"1936\":[null,5],\"1937\":[null,5],\"1938\":[null,8],\"1939\":[null,6],\"1940\":[null,10],\"1941\":[5],\"1942\":[null,3],\"1943\":[null,6],\"1944\":[8],\"1945\":[null,16],\"1946\":[6],\"1947\":[null,6],\"1948\":[6],\"1949\":[null,9],\"1950\":[6],\"1951\":[null,2],\"1952\":[6],\"1953\":[null,8],\"1954\":[null,10],\"1955\":[4],\"1956\":[null,10],\"1957\":[null,12],\"1958\":[null,9],\"1959\":[null,5],\"1960\":[null,9],\"1961\":[null,8],\"1962\":[7],\"1963\":[null,7],\"1964\":[5],\"1965\":[null,4],\"1966\":[2],\"1967\":[null,6],\"1968\":[null,11],\"1969\":[null,3],\"1970\":[4],\"1971\":[null,5],\"1972\":[null,9],\"1973\":[null,8],\"1974\":[null,11],\"1975\":[null,5],\"1976\":[3],\"1977\":[null,3],\"1978\":[null,12],\"1979\":[null,4],\"1980\":[null,2],\"1981\":[3],\"1982\":[null,6],\"1983\":[null,11],\"1984\":[null,3],\"1985\":[4],\"1986\":[null,5],\"1987\":[null,9],\"1988\":[null,8],\"1989\":[null,11],\"1990\":[null,5],\"1991\":[3],\"1992\":[null,3],\"1993\":[null,12],\"1994\":[null,4],\"1995\":[null,2],\"1996\":[2],\"1997\":[null,6],\"1998\":[null,11],\"1999\":[2],\"2000\":[4],\"2001\":[null,5],\"2002\":[null,9],\"2003\":[null,8],\"2004\":[null,11],\"2005\":[null,5],\"2006\":[3],\"2007\":[null,3],\"2008\":[null,12],\"2009\":[2],\"2010\":[null,6],\"2011\":[null,11],\"2012\":[2],\"2013\":[4],\"2014\":[null,5],\"2015\":[null,9],\"2016\":[null,8],\"2017\":[null,11],\"2018\":[null,5],\"2019\":[3],\"2020\":[null,3],\"2021\":[null,12],\"2022\":[2],\"2023\":[null,6],\"2024\":[null,11],\"2025\":[null,3],\"2026\":[4],\"2027\":[null,5],\"2028\":[null,9],\"2029\":[null,8],\"2030\":[null,11],\"2031\":[null,5],\"2032\":[3],\"2033\":[null,3],\"2034\":[null,12],\"2035\":[null,4],\"2036\":[null,2],\"2037\":[2],\"2038\":[null,6],\"2039\":[null,11],\"2040\":[null,3],\"2041\":[4],\"2042\":[null,5],\"2043\":[null,9],\"2044\":[null,8],\"2045\":[null,11],\"2046\":[null,5],\"2047\":[3],\"2048\":[null,3],\"2049\":[null,12],\"2050\":[null,4],\"2051\":[null,2],\"2052\":[2],\"2053\":[null,7],\"2054\":[null,3],\"2055\":[null,2],\"2056\":[null,3],\"2057\":[null,5],\"2058\":[null,3],\"2059\":[null,4],\"2060\":[null,4],\"2061\":[null,6],\"2062\":[null,5],\"2063\":[null,2],\"2064\":[null,3],\"2065\":[null,6],\"2066\":[null,4],\"2067\":[null,5],\"2068\":[null,4],\"2069\":[null,9],\"2070\":[null,3],\"2071\":[null,3],\"2072\":[null,3],\"2073\":[null,5],\"2074\":[null,2],\"2075\":[null,3],\"2076\":[null,2],\"2077\":[null,3],\"2078\":[null,3],\"2079\":[null,3],\"2080\":[null,3],\"2081\":[null,6],\"2082\":[null,5],\"2083\":[null,4],\"2084\":[null,4],\"2085\":[null,5],\"2086\":[null,5],\"2087\":[null,3],\"2088\":[null,3],\"2089\":[null,3],\"2090\":[null,6],\"2091\":[null,5],\"2092\":[null,3],\"2093\":[null,5],\"2094\":[null,6],\"2095\":[null,6],\"2096\":[2],\"2097\":[4],\"2098\":[null,3],\"2099\":[null,13],\"2100\":[null,7],\"2101\":[null,2],\"2102\":[null,11],\"2103\":[null,8],\"2104\":[null,9],\"2105\":[null,13],\"2106\":[6],\"2107\":[null,14],\"2108\":[null,7],\"2109\":[4],\"2110\":[null,6],\"2111\":[null,2],\"2112\":[null,9],\"2113\":[null,5],\"2114\":[null,24],\"2115\":[5],\"2116\":[null,7],\"2117\":[null,2],\"2118\":[null,4],\"2119\":[null,2],\"2120\":[null,2],\"2121\":[5],\"2122\":[null,4],\"2123\":[null,5],\"2124\":[null,5],\"2125\":[null,5],\"2126\":[null,5],\"2127\":[null,2],\"2128\":[null,7],\"2129\":[null,3],\"2130\":[null,6],\"2131\":[null,1],\"2132\":[null,17],\"2133\":[null,6],\"2134\":[7],\"2135\":[null,2],\"2136\":[7],\"2137\":[null,2],\"2138\":[null,4],\"2139\":[null,4],\"2140\":[null,2],\"2141\":[null,4],\"2142\":[null,4],\"2143\":[null,2],\"2144\":[null,7],\"2145\":[null,12],\"2146\":[null,3],\"2147\":[null,4],\"2148\":[null,6],\"2149\":[null,2],\"2150\":[null,11],\"2151\":[null,7],\"2152\":[null,2],\"2153\":[null,5],\"2154\":[null,5],\"2155\":[null,2],\"2156\":[null,11],\"2157\":[null,12],\"2158\":[7],\"2159\":[null,6],\"2160\":[null,3],\"2161\":[null,3],\"2162\":[null,8],\"2163\":[null,6],\"2164\":[null,3],\"2165\":[null,2],\"2166\":[null,2],\"2167\":[null,10],\"2168\":[null,11],\"2169\":[null,10],\"2170\":[null,11],\"2171\":[6],\"2172\":[null,3],\"2173\":[null,3],\"2174\":[null,6],\"2175\":[null,15],\"2176\":[null,11],\"2177\":[null,6],\"2178\":[2],\"2179\":[4],\"2180\":[7],\"2181\":[5],\"2182\":[6],\"2183\":[5],\"2184\":[10],\"2185\":[4],\"2186\":[4],\"2187\":[4],\"2188\":[6],\"2189\":[2],\"2190\":[4],\"2191\":[3],\"2192\":[4],\"2193\":[4],\"2194\":[4],\"2195\":[4],\"2196\":[7],\"2197\":[6],\"2198\":[5],\"2199\":[5],\"2200\":[6],\"2201\":[6],\"2202\":[4],\"2203\":[4],\"2204\":[3],\"2205\":[7],\"2206\":[6],\"2207\":[4],\"2208\":[6],\"2209\":[7],\"2210\":[7],\"2211\":[1],\"2212\":[3],\"2213\":[null,1],\"2214\":[null,15],\"2215\":[null,2],\"2216\":[null,2],\"2217\":[null,2],\"2218\":[null,3],\"2219\":[null,3],\"2220\":[null,1],\"2221\":[null,1],\"2222\":[2],\"2223\":[null,2],\"2224\":[3],\"2225\":[null,1],\"2226\":[1],\"2227\":[1],\"2228\":[1],\"2229\":[1],\"2230\":[null,23],\"2231\":[null,5],\"2232\":[null,22],\"2233\":[null,3],\"2234\":[null,4],\"2235\":[null,2],\"2236\":[3],\"2237\":[null,13],\"2238\":[null,13],\"2239\":[null,18],\"2240\":[null,15],\"2241\":[null,7],\"2242\":[null,32],\"2243\":[null,16],\"2244\":[null,21],\"2245\":[null,16],\"2246\":[null,15],\"2247\":[null,5],\"2248\":[3],\"2249\":[null,29],\"2250\":[null,19],\"2251\":[null,9],\"2252\":[null,11],\"2253\":[null,14],\"2254\":[null,20],\"2255\":[null,13],\"2256\":[null,8],\"2257\":[null,9],\"2258\":[null,12],\"2259\":[null,12],\"2260\":[1],\"2261\":[3],\"2262\":[null,7],\"2263\":[null,3],\"2264\":[6],\"2265\":[null,7],\"2266\":[null,23],\"2267\":[null,21],\"2268\":[null,17],\"2269\":[7],\"2270\":[null,16],\"2271\":[null,13],\"2272\":[null,12],\"2273\":[null,14],\"2274\":[7],\"2275\":[null,30],\"2276\":[null,19],\"2277\":[null,28],\"2278\":[1],\"2279\":[5],\"2280\":[null,7],\"2281\":[null,9],\"2282\":[null,24],\"2283\":[null,12],\"2284\":[1],\"2285\":[null,8],\"2286\":[null,3],\"2287\":[null,7],\"2288\":[null,8],\"2289\":[null,2],\"2290\":[null,4],\"2291\":[null,5],\"2292\":[null,6],\"2293\":[null,5],\"2294\":[null,6],\"2295\":[null,7],\"2296\":[2],\"2297\":[null,17],\"2298\":[null,20],\"2299\":[null,15],\"2300\":[null,13],\"2301\":[null,10],\"2302\":[null,14],\"2303\":[null,8],\"2304\":[null,7],\"2305\":[2],\"2306\":[4],\"2307\":[null,15],\"2308\":[null,2],\"2309\":[null,2],\"2310\":[null,2],\"2311\":[null,3],\"2312\":[null,3],\"2313\":[null,1],\"2314\":[null,1],\"2315\":[3],\"2316\":[4],\"2317\":[1],\"2318\":[1],\"2319\":[1],\"2320\":[5],\"2321\":[null,8],\"2322\":[null,11],\"2323\":[null,7],\"2324\":[null,3],\"2325\":[null,2],\"2326\":[null,12],\"2327\":[null,9],\"2328\":[null,2],\"2329\":[null,3],\"2330\":[null,23],\"2331\":[null,2],\"2332\":[null,6],\"2333\":[null,7],\"2334\":[null,5],\"2335\":[null,2],\"2336\":[null,6],\"2337\":[null,8],\"2338\":[null,3],\"2339\":[null,6],\"2340\":[null,10],\"2341\":[null,3],\"2342\":[null,9],\"2343\":[null,13],\"2344\":[1],\"2345\":[null,3],\"2346\":[2],\"2347\":[null,2],\"2348\":[null,10],\"2349\":[null,15],\"2350\":[null,15],\"2351\":[null,3],\"2352\":[null,15],\"2353\":[null,7],\"2354\":[null,4],\"2355\":[null,11],\"2356\":[null,4],\"2357\":[null,9],\"2358\":[null,15],\"2359\":[null,20],\"2360\":[null,37],\"2361\":[1],\"2362\":[null,2],\"2363\":[null,18],\"2364\":[null,4],\"2365\":[null,12],\"2366\":[null,14],\"2367\":[null,2],\"2368\":[null,6],\"2369\":[null,13],\"2370\":[null,2],\"2371\":[null,8],\"2372\":[null,3],\"2373\":[null,7],\"2374\":[null,5],\"2375\":[null,5],\"2376\":[null,14],\"2377\":[2],\"2378\":[null,2],\"2379\":[null,5],\"2380\":[null,16],\"2381\":[null,1],\"2382\":[2],\"2383\":[null,9],\"2384\":[null,4],\"2385\":[null,6],\"2386\":[null,11],\"2387\":[null,7],\"2388\":[null,7],\"2389\":[null,15],\"2390\":[null,1],\"2391\":[2],\"2392\":[null,8],\"2393\":[null,13],\"2394\":[null,2],\"2395\":[null,12],\"2396\":[null,3],\"2397\":[null,2],\"2398\":[null,11],\"2399\":[null,8],\"2400\":[2],\"2401\":[null,16],\"2402\":[null,4],\"2403\":[null,2],\"2404\":[null,3],\"2405\":[null,2],\"2406\":[null,3],\"2407\":[null,6],\"2408\":[2],\"2409\":[null,19],\"2410\":[null,5],\"2411\":[null,12],\"2412\":[2],\"2413\":[null,8],\"2414\":[null,1],\"2415\":[null,25],\"2416\":[null,1],\"2417\":[null,14],\"2418\":[2],\"2419\":[null,2],\"2420\":[null,15],\"2421\":[null,3],\"2422\":[null,6],\"2423\":[null,5],\"2424\":[null,8],\"2425\":[null,2],\"2426\":[null,6],\"2427\":[null,2],\"2428\":[null,6],\"2429\":[null,4],\"2430\":[null,11],\"2431\":[null,2],\"2432\":[null,14],\"2433\":[null,2],\"2434\":[null,16],\"2435\":[null,2],\"2436\":[null,4],\"2437\":[null,2],\"2438\":[null,3],\"2439\":[null,4],\"2440\":[null,3],\"2441\":[null,4],\"2442\":[null,7],\"2443\":[null,6],\"2444\":[null,1],\"2445\":[1],\"2446\":[null,7],\"2447\":[null,1],\"2448\":[2],\"2449\":[null,3],\"2450\":[null,6],\"2451\":[null,5],\"2452\":[null,6],\"2453\":[null,7],\"2454\":[null,3],\"2455\":[null,3],\"2456\":[null,2],\"2457\":[null,5],\"2458\":[null,2],\"2459\":[null,3],\"2460\":[null,7],\"2461\":[null,4],\"2462\":[null,12],\"2463\":[null,8],\"2464\":[null,12],\"2465\":[null,4],\"2466\":[null,6],\"2467\":[2],\"2468\":[null,3],\"2469\":[null,2],\"2470\":[null,3],\"2471\":[null,2],\"2472\":[null,4],\"2473\":[1],\"2474\":[null,2],\"2475\":[null,6],\"2476\":[null,12],\"2477\":[null,4],\"2478\":[null,7],\"2479\":[null,4],\"2480\":[null,3],\"2481\":[null,4],\"2482\":[null,7],\"2483\":[1],\"2484\":[null,3],\"2485\":[null,5],\"2486\":[null,7],\"2487\":[null,5],\"2488\":[null,6],\"2489\":[null,14],\"2490\":[null,15],\"2491\":[null,4],\"2492\":[null,5],\"2493\":[null,8],\"2494\":[null,12],\"2495\":[null,11],\"2496\":[null,15],\"2497\":[null,12],\"2498\":[null,7],\"2499\":[null,10],\"2500\":[null,11],\"2501\":[1],\"2502\":[null,3],\"2503\":[null,8],\"2504\":[null,8],\"2505\":[null,8],\"2506\":[null,9],\"2507\":[null,5],\"2508\":[null,12],\"2509\":[null,11],\"2510\":[null,4],\"2511\":[null,9],\"2512\":[null,11],\"2513\":[null,3],\"2514\":[3],\"2515\":[null,6],\"2516\":[null,8],\"2517\":[null,6],\"2518\":[null,12],\"2519\":[null,11],\"2520\":[null,7],\"2521\":[null,10],\"2522\":[null,9],\"2523\":[null,13],\"2524\":[null,13],\"2525\":[null,11],\"2526\":[null,8],\"2527\":[null,5],\"2528\":[null,6],\"2529\":[null,17],\"2530\":[null,10],\"2531\":[null,16],\"2532\":[2],\"2533\":[null,6],\"2534\":[null,9],\"2535\":[null,10],\"2536\":[null,14],\"2537\":[null,8],\"2538\":[null,1],\"2539\":[null,2],\"2540\":[null,5],\"2541\":[null,6],\"2542\":[null,10],\"2543\":[2],\"2544\":[null,10],\"2545\":[null,11],\"2546\":[null,10],\"2547\":[2],\"2548\":[null,6],\"2549\":[null,13],\"2550\":[null,11],\"2551\":[3],\"2552\":[null,12],\"2553\":[null,7],\"2554\":[null,11],\"2555\":[null,14],\"2556\":[null,10],\"2557\":[1],\"2558\":[null,7],\"2559\":[null,8],\"2560\":[null,5],\"2561\":[null,7],\"2562\":[null,10],\"2563\":[1],\"2564\":[null,7],\"2565\":[null,11],\"2566\":[null,6],\"2567\":[null,17],\"2568\":[null,38],\"2569\":[null,12],\"2570\":[null,6],\"2571\":[null,3],\"2572\":[null,6],\"2573\":[null,6],\"2574\":[null,5],\"2575\":[null,2],\"2576\":[1],\"2577\":[null,8],\"2578\":[null,2],\"2579\":[null,17],\"2580\":[null,11],\"2581\":[1],\"2582\":[null,6],\"2583\":[null,2],\"2584\":[null,16],\"2585\":[1],\"2586\":[null,7],\"2587\":[null,2],\"2588\":[null,16],\"2589\":[null,11],\"2590\":[null,12],\"2591\":[1],\"2592\":[null,6],\"2593\":[null,6],\"2594\":[null,6],\"2595\":[null,9],\"2596\":[null,8],\"2597\":[null,2],\"2598\":[null,1],\"2599\":[null,4],\"2600\":[null,6],\"2601\":[null,6],\"2602\":[null,6],\"2603\":[null,6],\"2604\":[null,11],\"2605\":[null,13],\"2606\":[null,14],\"2607\":[null,7],\"2608\":[null,14],\"2609\":[null,20],\"2610\":[null,2],\"2611\":[null,6],\"2612\":[null,5],\"2613\":[null,24],\"2614\":[1],\"2615\":[null,25],\"2616\":[null,1],\"2617\":[null,5],\"2618\":[null,16],\"2619\":[null,10],\"2620\":[null,9],\"2621\":[null,4],\"2622\":[null,30],\"2623\":[null,2],\"2624\":[null,10],\"2625\":[null,15],\"2626\":[null,16],\"2627\":[null,9],\"2628\":[null,2],\"2629\":[2],\"2630\":[null,4],\"2631\":[null,1],\"2632\":[null,9],\"2633\":[null,10],\"2634\":[null,13],\"2635\":[1],\"2636\":[null,3],\"2637\":[null,4],\"2638\":[null,10],\"2639\":[1],\"2640\":[1],\"2641\":[null,2],\"2642\":[3],\"2643\":[null,3],\"2644\":[null,5],\"2645\":[1],\"2646\":[null,4],\"2647\":[3],\"2648\":[null,3],\"2649\":[null,2],\"2650\":[null,14],\"2651\":[null,6],\"2652\":[1],\"2653\":[null,4],\"2654\":[1],\"2655\":[null,4],\"2656\":[1],\"2657\":[null,10],\"2658\":[3],\"2659\":[5],\"2660\":[null,6],\"2661\":[null,2],\"2662\":[null,3],\"2663\":[4],\"2664\":[null,15],\"2665\":[null,15],\"2666\":[1],\"2667\":[1],\"2668\":[3],\"2669\":[null,6],\"2670\":[null,4],\"2671\":[null,9],\"2672\":[null,4],\"2673\":[1],\"2674\":[null,13],\"2675\":[null,9],\"2676\":[1],\"2677\":[3],\"2678\":[2],\"2679\":[null,7],\"2680\":[null,10],\"2681\":[null,21],\"2682\":[null,15],\"2683\":[null,12],\"2684\":[2],\"2685\":[null,8],\"2686\":[null,4],\"2687\":[null,7],\"2688\":[3],\"2689\":[2],\"2690\":[null,3],\"2691\":[null,19],\"2692\":[null,6],\"2693\":[null,11],\"2694\":[2],\"2695\":[null,10],\"2696\":[3],\"2697\":[2],\"2698\":[null,3],\"2699\":[null,12],\"2700\":[null,7],\"2701\":[2],\"2702\":[null,3],\"2703\":[3],\"2704\":[2],\"2705\":[null,3],\"2706\":[null,20],\"2707\":[null,7],\"2708\":[null,10],\"2709\":[2],\"2710\":[null,12],\"2711\":[3],\"2712\":[2],\"2713\":[null,3],\"2714\":[null,11],\"2715\":[null,6],\"2716\":[null,10],\"2717\":[2],\"2718\":[null,6],\"2719\":[1],\"2720\":[null,9],\"2721\":[null,4],\"2722\":[null,6],\"2723\":[null,9],\"2724\":[4],\"2725\":[null,12],\"2726\":[null,8],\"2727\":[null,19],\"2728\":[3],\"2729\":[null,5],\"2730\":[null,6],\"2731\":[null,9],\"2732\":[4],\"2733\":[null,17],\"2734\":[null,3],\"2735\":[null,18],\"2736\":[null,7],\"2737\":[null,11],\"2738\":[3],\"2739\":[null,5],\"2740\":[null,6],\"2741\":[null,13],\"2742\":[null,14],\"2743\":[null,9],\"2744\":[null,9],\"2745\":[null,6],\"2746\":[null,4],\"2747\":[null,16],\"2748\":[null,5],\"2749\":[null,3],\"2750\":[null,2],\"2751\":[1],\"2752\":[2],\"2753\":[null,11],\"2754\":[null,4],\"2755\":[null,10],\"2756\":[null,11],\"2757\":[null,11],\"2758\":[null,14],\"2759\":[null,5],\"2760\":[3],\"2761\":[null,12],\"2762\":[null,5],\"2763\":[null,12],\"2764\":[null,9],\"2765\":[null,9],\"2766\":[null,11],\"2767\":[null,9],\"2768\":[null,7],\"2769\":[null,4],\"2770\":[null,12],\"2771\":[null,10],\"2772\":[1],\"2773\":[1],\"2774\":[3],\"2775\":[2],\"2776\":[null,10],\"2777\":[2],\"2778\":[null,8],\"2779\":[null,3],\"2780\":[null,24],\"2781\":[null,2],\"2782\":[null,8],\"2783\":[null,8],\"2784\":[null,8],\"2785\":[null,3],\"2786\":[null,4],\"2787\":[null,4],\"2788\":[null,4],\"2789\":[null,4],\"2790\":[null,2],\"2791\":[null,7],\"2792\":[null,5],\"2793\":[2],\"2794\":[null,13],\"2795\":[2],\"2796\":[null,2],\"2797\":[null,3],\"2798\":[null,5],\"2799\":[2],\"2800\":[null,6],\"2801\":[null,10],\"2802\":[2],\"2803\":[null,3],\"2804\":[null,10],\"2805\":[null,4],\"2806\":[2],\"2807\":[null,4],\"2808\":[null,5],\"2809\":[null,3],\"2810\":[null,2],\"2811\":[null,2],\"2812\":[null,4],\"2813\":[null,2],\"2814\":[2],\"2815\":[null,5],\"2816\":[5],\"2817\":[null,8],\"2818\":[1],\"2819\":[2],\"2820\":[3],\"2821\":[null,10],\"2822\":[null,8],\"2823\":[null,10],\"2824\":[null,9],\"2825\":[null,8],\"2826\":[null,6],\"2827\":[2],\"2828\":[null,16],\"2829\":[null,9],\"2830\":[null,14],\"2831\":[null,4],\"2832\":[null,16],\"2833\":[null,15],\"2834\":[1],\"2835\":[null,1],\"2836\":[1],\"2837\":[null,5],\"2838\":[1],\"2839\":[null,7],\"2840\":[null,18],\"2841\":[null,11],\"2842\":[null,17],\"2843\":[null,5],\"2844\":[1],\"2845\":[null,7],\"2846\":[null,2],\"2847\":[null,6],\"2848\":[null,13],\"2849\":[1],\"2850\":[null,15],\"2851\":[null,9],\"2852\":[4],\"2853\":[null,6],\"2854\":[null,6],\"2855\":[1],\"2856\":[null,12],\"2857\":[null,4],\"2858\":[null,5],\"2859\":[null,16],\"2860\":[null,6],\"2861\":[3],\"2862\":[null,13],\"2863\":[null,5],\"2864\":[null,4],\"2865\":[null,1],\"2866\":[null,8],\"2867\":[null,1],\"2868\":[null,5],\"2869\":[null,1],\"2870\":[null,7],\"2871\":[null,1],\"2872\":[null,11],\"2873\":[null,1],\"2874\":[null,19],\"2875\":[null,1],\"2876\":[null,12],\"2877\":[2],\"2878\":[null,7],\"2879\":[null,20],\"2880\":[null,15],\"2881\":[null,11],\"2882\":[2],\"2883\":[null,4],\"2884\":[null,5],\"2885\":[3],\"2886\":[null,13],\"2887\":[null,6],\"2888\":[null,6],\"2889\":[null,1],\"2890\":[null,4],\"2891\":[null,11],\"2892\":[1],\"2893\":[null,7],\"2894\":[null,6],\"2895\":[1],\"2896\":[null,13],\"2897\":[null,3],\"2898\":[null,13],\"2899\":[1],\"2900\":[null,10],\"2901\":[null,13],\"2902\":[null,10],\"2903\":[1],\"2904\":[null,6],\"2905\":[1],\"2906\":[null,21],\"2907\":[1],\"2908\":[null,3],\"2909\":[null,3],\"2910\":[null,4],\"2911\":[null,11],\"2912\":[1],\"2913\":[null,9],\"2914\":[null,6],\"2915\":[null,14],\"2916\":[null,25],\"2917\":[null,3],\"2918\":[null,1],\"2919\":[null,11],\"2920\":[null,1],\"2921\":[1],\"2922\":[null,3],\"2923\":[null,3],\"2924\":[null,11],\"2925\":[null,1],\"2926\":[4],\"2927\":[null,9],\"2928\":[null,6],\"2929\":[null,9],\"2930\":[null,9],\"2931\":[null,11],\"2932\":[null,9],\"2933\":[1],\"2934\":[null,15],\"2935\":[1],\"2936\":[2],\"2937\":[null,2],\"2938\":[null,5],\"2939\":[null,7],\"2940\":[null,1],\"2941\":[null,11],\"2942\":[2],\"2943\":[null,6],\"2944\":[null,6],\"2945\":[2],\"2946\":[null,2],\"2947\":[null,6],\"2948\":[null,7],\"2949\":[null,7],\"2950\":[null,3],\"2951\":[null,1],\"2952\":[null,2],\"2953\":[null,2],\"2954\":[null,2],\"2955\":[null,2],\"2956\":[null,2],\"2957\":[null,1],\"2958\":[null,1],\"2959\":[2],\"2960\":[null,3],\"2961\":[null,13],\"2962\":[1],\"2963\":[2],\"2964\":[null,15],\"2965\":[2],\"2966\":[null,18],\"2967\":[2],\"2968\":[null,5],\"2969\":[null,7],\"2970\":[null,9],\"2971\":[2],\"2972\":[null,13],\"2973\":[null,2],\"2974\":[null,5],\"2975\":[null,17],\"2976\":[2],\"2977\":[null,6],\"2978\":[null,10],\"2979\":[null,7],\"2980\":[2],\"2981\":[null,9],\"2982\":[null,4],\"2983\":[3],\"2984\":[null,14],\"2985\":[null,7],\"2986\":[3],\"2987\":[null,5],\"2988\":[null,4],\"2989\":[null,6],\"2990\":[null,11],\"2991\":[null,6],\"2992\":[null,4],\"2993\":[null,11],\"2994\":[null,7],\"2995\":[null,10],\"2996\":[1],\"2997\":[3],\"2998\":[null,12],\"2999\":[null,19],\"3000\":[null,1],\"3001\":[null,11],\"3002\":[null,7],\"3003\":[null,8],\"3004\":[null,12],\"3005\":[null,9],\"3006\":[null,9],\"3007\":[null,13],\"3008\":[3],\"3009\":[null,11],\"3010\":[null,1],\"3011\":[null,16],\"3012\":[null,8],\"3013\":[2],\"3014\":[null,10],\"3015\":[null,12],\"3016\":[null,4],\"3017\":[null,11],\"3018\":[1],\"3019\":[3],\"3020\":[null,4],\"3021\":[null,6],\"3022\":[null,10],\"3023\":[2],\"3024\":[null,2],\"3025\":[null,16],\"3026\":[null,27],\"3027\":[null,3],\"3028\":[null,26],\"3029\":[null,19],\"3030\":[null,8],\"3031\":[null,7],\"3032\":[null,12],\"3033\":[1],\"3034\":[2],\"3035\":[null,5],\"3036\":[null,3],\"3037\":[null,4],\"3038\":[null,8],\"3039\":[2],\"3040\":[null,4],\"3041\":[null,38],\"3042\":[null,2],\"3043\":[null,104],\"3044\":[null,4],\"3045\":[null,4],\"3046\":[null,4],\"3047\":[null,5],\"3048\":[null,2],\"3049\":[null,10],\"3050\":[null,4],\"3051\":[null,4],\"3052\":[null,4],\"3053\":[null,5],\"3054\":[null,1],\"3055\":[null,2],\"3056\":[null,4],\"3057\":[null,5],\"3058\":[null,13],\"3059\":[null,5],\"3060\":[null,4],\"3061\":[null,26],\"3062\":[null,2],\"3063\":[null,4],\"3064\":[null,3],\"3065\":[null,13],\"3066\":[null,19],\"3067\":[null,21],\"3068\":[null,2],\"3069\":[null,3],\"3070\":[null,4],\"3071\":[null,5],\"3072\":[null,7],\"3073\":[null,1],\"3074\":[null,2],\"3075\":[null,2],\"3076\":[null,17],\"3077\":[null,18],\"3078\":[null,7],\"3079\":[null,3],\"3080\":[null,11],\"3081\":[null,7],\"3082\":[null,11],\"3083\":[null,3],\"3084\":[2],\"3085\":[null,9],\"3086\":[null,2],\"3087\":[null,7],\"3088\":[null,12],\"3089\":[null,4],\"3090\":[null,13],\"3091\":[null,11],\"3092\":[null,12],\"3093\":[2],\"3094\":[null,3],\"3095\":[null,1],\"3096\":[null,4],\"3097\":[null,5],\"3098\":[null,4],\"3099\":[null,2],\"3100\":[null,1],\"3101\":[null,2],\"3102\":[null,1],\"3103\":[null,4],\"3104\":[null,4],\"3105\":[null,1],\"3106\":[null,22],\"3107\":[1],\"3108\":[1],\"3109\":[2],\"3110\":[5],\"3111\":[null,2],\"3112\":[null,2],\"3113\":[null,2],\"3114\":[null,2],\"3115\":[null,2],\"3116\":[null,6],\"3117\":[4],\"3118\":[null,6],\"3119\":[null,4],\"3120\":[null,8],\"3121\":[null,5],\"3122\":[null,5],\"3123\":[null,5],\"3124\":[null,2],\"3125\":[null,7],\"3126\":[null,5],\"3127\":[null,3],\"3128\":[null,5],\"3129\":[null,9],\"3130\":[null,5],\"3131\":[null,5],\"3132\":[null,2],\"3133\":[null,6],\"3134\":[null,2],\"3135\":[null,2],\"3136\":[null,4],\"3137\":[null,6],\"3138\":[null,4],\"3139\":[2],\"3140\":[3],\"3141\":[null,7],\"3142\":[null,5],\"3143\":[null,4],\"3144\":[null,5],\"3145\":[null,10],\"3146\":[null,2],\"3147\":[null,4],\"3148\":[null,4],\"3149\":[null,8],\"3150\":[null,6],\"3151\":[null,2],\"3152\":[null,9],\"3153\":[null,5],\"3154\":[2],\"3155\":[5],\"3156\":[null,5],\"3157\":[null,2],\"3158\":[null,2],\"3159\":[null,2],\"3160\":[null,5],\"3161\":[null,2],\"3162\":[null,3],\"3163\":[null,4],\"3164\":[null,7],\"3165\":[null,3],\"3166\":[null,2],\"3167\":[null,3],\"3168\":[null,3],\"3169\":[null,2],\"3170\":[null,2],\"3171\":[null,3],\"3172\":[null,2],\"3173\":[null,2],\"3174\":[null,2],\"3175\":[null,3],\"3176\":[null,2],\"3177\":[1],\"3178\":[5],\"3179\":[null,2],\"3180\":[null,2],\"3181\":[null,2],\"3182\":[null,10],\"3183\":[null,6],\"3184\":[null,4],\"3185\":[null,5],\"3186\":[null,3],\"3187\":[null,13],\"3188\":[1],\"3189\":[2],\"3190\":[null,15],\"3191\":[null,16],\"3192\":[null,7],\"3193\":[null,2],\"3194\":[null,7],\"3195\":[null,8],\"3196\":[null,4],\"3197\":[null,2],\"3198\":[null,9],\"3199\":[null,5],\"3200\":[null,2],\"3201\":[null,2],\"3202\":[null,4],\"3203\":[2],\"3204\":[3],\"3205\":[null,8],\"3206\":[null,2],\"3207\":[null,8],\"3208\":[3],\"3209\":[null,2],\"3210\":[null,14],\"3211\":[null,11],\"3212\":[null,2],\"3213\":[null,9],\"3214\":[3],\"3215\":[null,2],\"3216\":[null,2],\"3217\":[null,2],\"3218\":[3],\"3219\":[null,2],\"3220\":[null,2],\"3221\":[null,2],\"3222\":[2],\"3223\":[null,4],\"3224\":[null,7],\"3225\":[null,7],\"3226\":[null,7],\"3227\":[null,9],\"3228\":[null,2],\"3229\":[null,11],\"3230\":[null,11],\"3231\":[null,2],\"3232\":[null,2],\"3233\":[2],\"3234\":[null,2],\"3235\":[null,4],\"3236\":[null,3],\"3237\":[null,2],\"3238\":[null,5],\"3239\":[null,2],\"3240\":[null,2],\"3241\":[null,3],\"3242\":[null,2],\"3243\":[null,2],\"3244\":[2],\"3245\":[null,2],\"3246\":[null,14],\"3247\":[null,15],\"3248\":[null,2],\"3249\":[null,4],\"3250\":[2],\"3251\":[null,2],\"3252\":[null,10],\"3253\":[null,4],\"3254\":[null,2],\"3255\":[null,4],\"3256\":[null,8],\"3257\":[null,4],\"3258\":[null,3],\"3259\":[null,4],\"3260\":[null,5],\"3261\":[null,5],\"3262\":[null,2],\"3263\":[null,6],\"3264\":[null,2],\"3265\":[null,2],\"3266\":[null,3],\"3267\":[null,5],\"3268\":[null,4],\"3269\":[null,2],\"3270\":[null,4],\"3271\":[null,8],\"3272\":[null,2],\"3273\":[null,2],\"3274\":[null,1],\"3275\":[null,2],\"3276\":[null,1],\"3277\":[null,3],\"3278\":[null,7],\"3279\":[null,3],\"3280\":[null,3],\"3281\":[null,6],\"3282\":[null,7],\"3283\":[null,5],\"3284\":[2],\"3285\":[null,2],\"3286\":[null,4],\"3287\":[null,2],\"3288\":[null,3],\"3289\":[null,2],\"3290\":[null,11],\"3291\":[null,9],\"3292\":[null,2],\"3293\":[null,3],\"3294\":[null,2],\"3295\":[null,2],\"3296\":[null,2],\"3297\":[2],\"3298\":[null,2],\"3299\":[null,2],\"3300\":[null,5],\"3301\":[null,5],\"3302\":[null,7],\"3303\":[null,11],\"3304\":[3],\"3305\":[null,7],\"3306\":[null,2],\"3307\":[null,2],\"3308\":[null,4],\"3309\":[null,3],\"3310\":[null,14],\"3311\":[null,2],\"3312\":[null,12],\"3313\":[null,11],\"3314\":[null,3],\"3315\":[null,3],\"3316\":[null,12],\"3317\":[null,6],\"3318\":[null,11],\"3319\":[null,2],\"3320\":[null,13],\"3321\":[null,2],\"3322\":[2],\"3323\":[null,24],\"3324\":[2],\"3325\":[3],\"3326\":[null,7],\"3327\":[null,5],\"3328\":[2],\"3329\":[null,3],\"3330\":[null,4],\"3331\":[null,6],\"3332\":[null,3],\"3333\":[2],\"3334\":[null,14],\"3335\":[2],\"3336\":[3],\"3337\":[null,3],\"3338\":[null,1],\"3339\":[null,14],\"3340\":[null,1],\"3341\":[null,1],\"3342\":[null,1],\"3343\":[null,1],\"3344\":[null,3],\"3345\":[null,12],\"3346\":[null,1],\"3347\":[null,1],\"3348\":[null,1],\"3349\":[null,1],\"3350\":[null,3],\"3351\":[null,1],\"3352\":[null,19],\"3353\":[null,7],\"3354\":[null,1],\"3355\":[null,1],\"3356\":[null,1],\"3357\":[null,1],\"3358\":[null,1],\"3359\":[null,1],\"3360\":[null,1],\"3361\":[null,1],\"3362\":[null,1],\"3363\":[null,1],\"3364\":[null,1],\"3365\":[null,1],\"3366\":[null,1],\"3367\":[null,1],\"3368\":[null,1],\"3369\":[null,9],\"3370\":[null,2],\"3371\":[null,1],\"3372\":[null,6],\"3373\":[null,3],\"3374\":[null,6],\"3375\":[null,4],\"3376\":[null,6],\"3377\":[null,1],\"3378\":[null,5],\"3379\":[null,5],\"3380\":[null,6],\"3381\":[null,5],\"3382\":[null,8],\"3383\":[3],\"3384\":[null,3],\"3385\":[3],\"3386\":[null,12],\"3387\":[null,18],\"3388\":[null,2],\"3389\":[3],\"3390\":[null,11],\"3391\":[3],\"3392\":[null,15],\"3393\":[3],\"3394\":[null,10],\"3395\":[null,2],\"3396\":[3],\"3397\":[null,9],\"3398\":[null,10],\"3399\":[null,6],\"3400\":[null,5],\"3401\":[null,18],\"3402\":[1],\"3403\":[1],\"3404\":[null,2],\"3405\":[null,1],\"3406\":[null,1],\"3407\":[null,1],\"3408\":[1],\"3409\":[null,4],\"3410\":[null,3],\"3411\":[null,1],\"3412\":[null,1],\"3413\":[null,1],\"3414\":[null,1],\"3415\":[null,1],\"3416\":[null,1],\"3417\":[null,1],\"3418\":[null,3],\"3419\":[null,1],\"3420\":[null,1],\"3421\":[null,1],\"3422\":[1],\"3423\":[null,2],\"3424\":[null,5],\"3425\":[null,5],\"3426\":[2],\"3427\":[null,7],\"3428\":[null,7],\"3429\":[2],\"3430\":[null,8],\"3431\":[2],\"3432\":[null,7],\"3433\":[null,1],\"3434\":[null,8],\"3435\":[2],\"3436\":[null,11],\"3437\":[2],\"3438\":[null,6],\"3439\":[null,7],\"3440\":[1],\"3441\":[null,10],\"3442\":[1],\"3443\":[null,5],\"3444\":[null,1],\"3445\":[null,6],\"3446\":[null,5],\"3447\":[null,1],\"3448\":[null,1],\"3449\":[null,1],\"3450\":[null,1],\"3451\":[null,1],\"3452\":[null,1],\"3453\":[null,1],\"3454\":[null,1],\"3455\":[null,1],\"3456\":[1],\"3457\":[null,1],\"3458\":[1],\"3459\":[null,2],\"3460\":[null,1],\"3461\":[1],\"3462\":[null,1],\"3463\":[null,1],\"3464\":[null,1],\"3465\":[1],\"3466\":[null,5],\"3467\":[null,1],\"3468\":[1],\"3469\":[null,3],\"3470\":[null,1],\"3471\":[1],\"3472\":[null,3],\"3473\":[null,1],\"3474\":[1],\"3475\":[null,3],\"3476\":[null,3],\"3477\":[null,1],\"3478\":[1],\"3479\":[null,1],\"3480\":[null,1],\"3481\":[1],\"3482\":[null,23],\"3483\":[null,1],\"3484\":[1],\"3485\":[null,1],\"3486\":[1],\"3487\":[null,1],\"3488\":[1],\"3489\":[null,1],\"3490\":[1],\"3491\":[null,1],\"3492\":[2],\"3493\":[null,10],\"3494\":[null,1],\"3495\":[1],\"3496\":[null,2],\"3497\":[null,1],\"3498\":[null,1],\"3499\":[null,1],\"3500\":[null,1],\"3501\":[1],\"3502\":[null,1],\"3503\":[1],\"3504\":[null,5],\"3505\":[null,1],\"3506\":[1],\"3507\":[null,1],\"3508\":[2],\"3509\":[null,1],\"3510\":[1],\"3511\":[null,1],\"3512\":[null,2],\"3513\":[1],\"3514\":[null,3],\"3515\":[1],\"3516\":[null,6],\"3517\":[null,4],\"3518\":[null,6],\"3519\":[null,3],\"3520\":[null,5],\"3521\":[1],\"3522\":[null,3],\"3523\":[null,1],\"3524\":[null,6],\"3525\":[null,7],\"3526\":[null,2],\"3527\":[null,4],\"3528\":[1],\"3529\":[null,2],\"3530\":[null,1],\"3531\":[null,1],\"3532\":[null,3],\"3533\":[null,2],\"3534\":[null,1],\"3535\":[null,1],\"3536\":[null,1],\"3537\":[null,1],\"3538\":[null,1],\"3539\":[null,4],\"3540\":[1],\"3541\":[1],\"3542\":[1],\"3543\":[null,1],\"3544\":[null,1],\"3545\":[1],\"3546\":[null,1],\"3547\":[null,1],\"3548\":[1],\"3549\":[null,3],\"3550\":[null,8],\"3551\":[null,3],\"3552\":[2],\"3553\":[1],\"3554\":[null,4],\"3555\":[1],\"3556\":[null,1],\"3557\":[null,1],\"3558\":[1],\"3559\":[null,2],\"3560\":[2],\"3561\":[1],\"3562\":[null,4],\"3563\":[1],\"3564\":[null,1],\"3565\":[null,1],\"3566\":[1],\"3567\":[null,2],\"3568\":[1],\"3569\":[2],\"3570\":[1],\"3571\":[5],\"3572\":[null,3],\"3573\":[null,5],\"3574\":[null,4],\"3575\":[null,4],\"3576\":[null,26],\"3577\":[3],\"3578\":[1],\"3579\":[2],\"3580\":[1],\"3581\":[1],\"3582\":[1],\"3583\":[1],\"3584\":[null,22],\"3585\":[null,4],\"3586\":[null,1],\"3587\":[1],\"3588\":[null,5],\"3589\":[null,11],\"3590\":[null,1],\"3591\":[1],\"3592\":[2],\"3593\":[null,3],\"3594\":[null,5],\"3595\":[null,8],\"3596\":[null,13],\"3597\":[1],\"3598\":[null,8],\"3599\":[null,11],\"3600\":[1],\"3601\":[null,4],\"3602\":[null,23],\"3603\":[null,14],\"3604\":[null,9],\"3605\":[null,12],\"3606\":[null,4],\"3607\":[null,3],\"3608\":[null,20],\"3609\":[null,8],\"3610\":[null,4],\"3611\":[null,15],\"3612\":[null,10],\"3613\":[null,12],\"3614\":[null,1],\"3615\":[1],\"3616\":[null,5],\"3617\":[null,3],\"3618\":[null,3],\"3619\":[null,4],\"3620\":[null,6],\"3621\":[null,1],\"3622\":[null,11],\"3623\":[null,61],\"3624\":[null,5],\"3625\":[null,3],\"3626\":[null,6],\"3627\":[null,11],\"3628\":[null,8],\"3629\":[null,2],\"3630\":[null,12],\"3631\":[1],\"3632\":[2],\"3633\":[null,14],\"3634\":[1],\"3635\":[2],\"3636\":[null,4],\"3637\":[null,5],\"3638\":[null,5],\"3639\":[null,1],\"3640\":[null,12],\"3641\":[null,8],\"3642\":[null,3],\"3643\":[null,9],\"3644\":[7],\"3645\":[null,3],\"3646\":[null,8],\"3647\":[null,10],\"3648\":[null,3],\"3649\":[null,5],\"3650\":[2],\"3651\":[null,3],\"3652\":[null,15],\"3653\":[null,10],\"3654\":[null,3],\"3655\":[null,5],\"3656\":[null,17],\"3657\":[7],\"3658\":[null,13],\"3659\":[null,24],\"3660\":[2],\"3661\":[null,9],\"3662\":[null,11],\"3663\":[null,3],\"3664\":[null,35],\"3665\":[null,6],\"3666\":[null,5],\"3667\":[null,2],\"3668\":[null,2],\"3669\":[null,2],\"3670\":[null,2],\"3671\":[1],\"3672\":[2],\"3673\":[null,7],\"3674\":[null,2],\"3675\":[null,2],\"3676\":[null,10],\"3677\":[null,5],\"3678\":[null,4],\"3679\":[null,10],\"3680\":[null,7],\"3681\":[null,19],\"3682\":[null,5],\"3683\":[null,3],\"3684\":[null,3],\"3685\":[null,9],\"3686\":[null,2],\"3687\":[null,16],\"3688\":[null,10],\"3689\":[null,3],\"3690\":[null,13],\"3691\":[2],\"3692\":[null,7],\"3693\":[null,5],\"3694\":[null,6],\"3695\":[null,12],\"3696\":[null,6],\"3697\":[null,9],\"3698\":[null,9],\"3699\":[2],\"3700\":[null,5],\"3701\":[null,12],\"3702\":[null,10],\"3703\":[null,4],\"3704\":[null,16],\"3705\":[null,13],\"3706\":[null,8],\"3707\":[2],\"3708\":[null,4],\"3709\":[null,15],\"3710\":[null,4],\"3711\":[null,18],\"3712\":[null,4],\"3713\":[null,17],\"3714\":[null,1],\"3715\":[null,20],\"3716\":[null,10],\"3717\":[1],\"3718\":[1],\"3719\":[1],\"3720\":[2],\"3721\":[null,10],\"3722\":[null,17],\"3723\":[5],\"3724\":[null,9],\"3725\":[3],\"3726\":[null,5],\"3727\":[2],\"3728\":[null,10],\"3729\":[2],\"3730\":[null,13],\"3731\":[2],\"3732\":[null,13],\"3733\":[null,10],\"3734\":[1],\"3735\":[1],\"3736\":[1],\"3737\":[1],\"3738\":[1],\"3739\":[1],\"3740\":[1],\"3741\":[2],\"3742\":[null,10],\"3743\":[3],\"3744\":[null,34],\"3745\":[2],\"3746\":[null,14],\"3747\":[null,1],\"3748\":[null,1],\"3749\":[null,8],\"3750\":[null,2],\"3751\":[null,2],\"3752\":[null,3],\"3753\":[null,1],\"3754\":[null,1],\"3755\":[2],\"3756\":[null,5],\"3757\":[null,5],\"3758\":[null,6],\"3759\":[null,10],\"3760\":[null,2],\"3761\":[null,4],\"3762\":[null,1],\"3763\":[null,3],\"3764\":[1],\"3765\":[1],\"3766\":[2],\"3767\":[2],\"3768\":[null,8],\"3769\":[null,2],\"3770\":[null,35],\"3771\":[1],\"3772\":[null,6],\"3773\":[null,8],\"3774\":[null,27],\"3775\":[null,37],\"3776\":[1],\"3777\":[2],\"3778\":[null,4],\"3779\":[null,6],\"3780\":[null,8],\"3781\":[2],\"3782\":[null,3],\"3783\":[null,6],\"3784\":[2],\"3785\":[null,11],\"3786\":[1],\"3787\":[1],\"3788\":[2],\"3789\":[null,6],\"3790\":[2],\"3791\":[null,11],\"3792\":[null,11],\"3793\":[2],\"3794\":[null,11],\"3795\":[null,10],\"3796\":[2],\"3797\":[null,8],\"3798\":[null,7],\"3799\":[null,7],\"3800\":[null,5],\"3801\":[null,10],\"3802\":[2],\"3803\":[null,8],\"3804\":[null,5],\"3805\":[null,22],\"3806\":[null,9],\"3807\":[null,18],\"3808\":[null,13],\"3809\":[2],\"3810\":[null,3],\"3811\":[null,5],\"3812\":[null,17],\"3813\":[null,8],\"3814\":[null,7],\"3815\":[null,26],\"3816\":[null,9],\"3817\":[5],\"3818\":[null,11],\"3819\":[null,8],\"3820\":[1],\"3821\":[6],\"3822\":[1],\"3823\":[null,15],\"3824\":[null,17],\"3825\":[null,13],\"3826\":[null,2],\"3827\":[null,5],\"3828\":[null,7],\"3829\":[1],\"3830\":[1],\"3831\":[null,22],\"3832\":[null,2],\"3833\":[null,7],\"3834\":[null,7],\"3835\":[null,19],\"3836\":[null,12],\"3837\":[null,14],\"3838\":[null,10],\"3839\":[null,10],\"3840\":[null,6],\"3841\":[null,11],\"3842\":[null,9],\"3843\":[null,10],\"3844\":[null,8],\"3845\":[null,3],\"3846\":[1],\"3847\":[null,9],\"3848\":[null,5],\"3849\":[null,6],\"3850\":[null,10],\"3851\":[null,5],\"3852\":[null,4],\"3853\":[null,10],\"3854\":[1],\"3855\":[4],\"3856\":[null,4],\"3857\":[null,1],\"3858\":[null,6],\"3859\":[null,4],\"3860\":[null,5],\"3861\":[null,5],\"3862\":[null,2],\"3863\":[null,4],\"3864\":[null,8],\"3865\":[null,3],\"3866\":[null,4],\"3867\":[3],\"3868\":[null,3],\"3869\":[null,12],\"3870\":[null,9],\"3871\":[null,8],\"3872\":[null,9],\"3873\":[null,15],\"3874\":[3],\"3875\":[null,11],\"3876\":[null,2],\"3877\":[null,8],\"3878\":[null,8],\"3879\":[null,8],\"3880\":[null,2],\"3881\":[null,8],\"3882\":[null,8],\"3883\":[null,7],\"3884\":[null,2],\"3885\":[null,9],\"3886\":[2],\"3887\":[null,7],\"3888\":[null,2],\"3889\":[null,1],\"3890\":[null,5],\"3891\":[null,7],\"3892\":[null,7],\"3893\":[null,2],\"3894\":[null,16],\"3895\":[null,2],\"3896\":[null,15],\"3897\":[null,2],\"3898\":[null,3],\"3899\":[null,1],\"3900\":[null,3],\"3901\":[null,8],\"3902\":[null,16],\"3903\":[null,3],\"3904\":[null,1],\"3905\":[null,4],\"3906\":[null,7],\"3907\":[null,12],\"3908\":[null,3],\"3909\":[null,1],\"3910\":[null,21],\"3911\":[null,13],\"3912\":[null,7],\"3913\":[null,3],\"3914\":[null,7],\"3915\":[null,13],\"3916\":[2],\"3917\":[null,22],\"3918\":[null,14],\"3919\":[null,1],\"3920\":[null,8],\"3921\":[null,1],\"3922\":[null,16],\"3923\":[null,1],\"3924\":[null,13],\"3925\":[null,1],\"3926\":[null,15],\"3927\":[4],\"3928\":[null,2],\"3929\":[null,8],\"3930\":[null,1],\"3931\":[5],\"3932\":[null,15],\"3933\":[null,5],\"3934\":[null,5],\"3935\":[null,2],\"3936\":[null,13],\"3937\":[null,29],\"3938\":[1],\"3939\":[null,2],\"3940\":[null,4],\"3941\":[null,2],\"3942\":[null,5],\"3943\":[null,2],\"3944\":[null,3],\"3945\":[1],\"3946\":[null,27],\"3947\":[null,12],\"3948\":[1],\"3949\":[1],\"3950\":[null,15],\"3951\":[null,3],\"3952\":[null,5],\"3953\":[null,3],\"3954\":[1],\"3955\":[null,1],\"3956\":[null,15],\"3957\":[null,27],\"3958\":[5],\"3959\":[null,15],\"3960\":[null,2],\"3961\":[null,8],\"3962\":[null,5],\"3963\":[null,5],\"3964\":[null,10],\"3965\":[null,1],\"3966\":[null,2],\"3967\":[null,6],\"3968\":[null,1],\"3969\":[null,1],\"3970\":[null,1],\"3971\":[2],\"3972\":[null,6],\"3973\":[null,4],\"3974\":[null,6],\"3975\":[null,4],\"3976\":[null,4],\"3977\":[null,5],\"3978\":[null,1],\"3979\":[null,4],\"3980\":[2],\"3981\":[1],\"3982\":[null,1],\"3983\":[null,2],\"3984\":[null,1],\"3985\":[null,1],\"3986\":[null,1],\"3987\":[null,9],\"3988\":[4],\"3989\":[null,2],\"3990\":[null,10],\"3991\":[null,5],\"3992\":[null,3],\"3993\":[null,12],\"3994\":[null,12],\"3995\":[null,15],\"3996\":[null,11],\"3997\":[5],\"3998\":[2],\"3999\":[null,34],\"4000\":[2],\"4001\":[null,28],\"4002\":[null,2],\"4003\":[null,1],\"4004\":[null,3],\"4005\":[null,1],\"4006\":[null,20],\"4007\":[2],\"4008\":[null,10],\"4009\":[null,1],\"4010\":[2],\"4011\":[null,3],\"4012\":[null,3],\"4013\":[null,13],\"4014\":[null,5],\"4015\":[null,7],\"4016\":[null,8],\"4017\":[null,3],\"4018\":[null,2],\"4019\":[null,1],\"4020\":[null,10],\"4021\":[1],\"4022\":[1],\"4023\":[1],\"4024\":[1],\"4025\":[1],\"4026\":[1],\"4027\":[null,10],\"4028\":[1],\"4029\":[1],\"4030\":[3],\"4031\":[10],\"4032\":[null,18],\"4033\":[6],\"4034\":[null,18],\"4035\":[2],\"4036\":[null,11],\"4037\":[3],\"4038\":[null,4],\"4039\":[null,4],\"4040\":[null,2],\"4041\":[null,4],\"4042\":[null,5],\"4043\":[null,5],\"4044\":[null,8],\"4045\":[null,6],\"4046\":[null,10],\"4047\":[5],\"4048\":[null,3],\"4049\":[null,6],\"4050\":[8],\"4051\":[null,16],\"4052\":[6],\"4053\":[null,6],\"4054\":[6],\"4055\":[null,9],\"4056\":[6],\"4057\":[null,2],\"4058\":[6],\"4059\":[null,8],\"4060\":[null,10],\"4061\":[4],\"4062\":[null,10],\"4063\":[null,12],\"4064\":[null,9],\"4065\":[null,5],\"4066\":[null,9],\"4067\":[null,8],\"4068\":[7],\"4069\":[null,7],\"4070\":[5],\"4071\":[null,4],\"4072\":[1],\"4073\":[2],\"4074\":[3],\"4075\":[null,10],\"4076\":[null,8],\"4077\":[null,10],\"4078\":[null,9],\"4079\":[null,8],\"4080\":[null,6],\"4081\":[2],\"4082\":[null,16],\"4083\":[null,9],\"4084\":[null,14],\"4085\":[null,4],\"4086\":[null,16],\"4087\":[null,15],\"4088\":[1],\"4089\":[null,1],\"4090\":[1],\"4091\":[null,5],\"4092\":[1],\"4093\":[null,7],\"4094\":[null,18],\"4095\":[null,11],\"4096\":[null,17],\"4097\":[null,5],\"4098\":[1],\"4099\":[null,7],\"4100\":[null,2],\"4101\":[null,6],\"4102\":[null,13],\"4103\":[1],\"4104\":[null,15],\"4105\":[null,9],\"4106\":[4],\"4107\":[null,6],\"4108\":[null,6],\"4109\":[1],\"4110\":[null,12],\"4111\":[null,4],\"4112\":[null,5],\"4113\":[null,16],\"4114\":[null,6],\"4115\":[3],\"4116\":[null,13],\"4117\":[null,5],\"4118\":[null,4],\"4119\":[null,1],\"4120\":[null,8],\"4121\":[null,1],\"4122\":[null,5],\"4123\":[null,1],\"4124\":[null,7],\"4125\":[null,1],\"4126\":[null,11],\"4127\":[null,1],\"4128\":[null,19],\"4129\":[null,1],\"4130\":[null,12],\"4131\":[2],\"4132\":[null,7],\"4133\":[null,20],\"4134\":[null,15],\"4135\":[null,11],\"4136\":[2],\"4137\":[null,4],\"4138\":[null,5],\"4139\":[3],\"4140\":[null,13],\"4141\":[null,6],\"4142\":[null,6],\"4143\":[null,1],\"4144\":[null,4],\"4145\":[null,11],\"4146\":[1],\"4147\":[null,7],\"4148\":[null,6],\"4149\":[1],\"4150\":[null,13],\"4151\":[null,3],\"4152\":[null,13],\"4153\":[1],\"4154\":[null,10],\"4155\":[null,13],\"4156\":[null,10],\"4157\":[1],\"4158\":[null,6],\"4159\":[1],\"4160\":[null,21],\"4161\":[1],\"4162\":[null,3],\"4163\":[null,3],\"4164\":[null,4],\"4165\":[null,11],\"4166\":[1],\"4167\":[null,9],\"4168\":[null,6],\"4169\":[null,14],\"4170\":[null,25],\"4171\":[null,3],\"4172\":[null,1],\"4173\":[null,11],\"4174\":[null,1],\"4175\":[1],\"4176\":[null,3],\"4177\":[null,3],\"4178\":[null,11],\"4179\":[null,1],\"4180\":[4],\"4181\":[null,9],\"4182\":[null,6],\"4183\":[null,9],\"4184\":[null,9],\"4185\":[null,11],\"4186\":[null,9],\"4187\":[1],\"4188\":[null,15],\"4189\":[1],\"4190\":[2],\"4191\":[null,2],\"4192\":[null,5],\"4193\":[null,7],\"4194\":[null,1],\"4195\":[null,11],\"4196\":[2],\"4197\":[null,6],\"4198\":[null,6],\"4199\":[2],\"4200\":[null,2],\"4201\":[null,6],\"4202\":[null,7],\"4203\":[null,7],\"4204\":[null,3],\"4205\":[null,1],\"4206\":[null,2],\"4207\":[null,2],\"4208\":[null,2],\"4209\":[null,2],\"4210\":[null,2],\"4211\":[null,1],\"4212\":[null,1],\"4213\":[2],\"4214\":[null,3],\"4215\":[null,13],\"4216\":[1],\"4217\":[2],\"4218\":[null,15],\"4219\":[2],\"4220\":[null,18],\"4221\":[2],\"4222\":[null,5],\"4223\":[null,7],\"4224\":[null,9],\"4225\":[2],\"4226\":[null,13],\"4227\":[null,2],\"4228\":[null,5],\"4229\":[null,17],\"4230\":[2],\"4231\":[null,6],\"4232\":[null,10],\"4233\":[null,7],\"4234\":[2],\"4235\":[null,9],\"4236\":[null,4],\"4237\":[3],\"4238\":[null,14],\"4239\":[null,7],\"4240\":[3],\"4241\":[null,5],\"4242\":[null,4],\"4243\":[null,6],\"4244\":[null,11],\"4245\":[null,6],\"4246\":[null,4],\"4247\":[null,11],\"4248\":[null,7],\"4249\":[null,10],\"4250\":[1],\"4251\":[3],\"4252\":[null,12],\"4253\":[null,19],\"4254\":[null,1],\"4255\":[null,11],\"4256\":[null,7],\"4257\":[null,8],\"4258\":[null,12],\"4259\":[null,9],\"4260\":[null,9],\"4261\":[null,13],\"4262\":[3],\"4263\":[null,11],\"4264\":[null,1],\"4265\":[null,16],\"4266\":[null,8],\"4267\":[2],\"4268\":[null,10],\"4269\":[null,12],\"4270\":[null,4],\"4271\":[null,11],\"4272\":[1],\"4273\":[3],\"4274\":[null,4],\"4275\":[null,6],\"4276\":[null,10],\"4277\":[2],\"4278\":[null,2],\"4279\":[null,16],\"4280\":[null,27],\"4281\":[null,3],\"4282\":[null,26],\"4283\":[null,19],\"4284\":[null,8],\"4285\":[null,7],\"4286\":[null,12],\"4287\":[1],\"4288\":[2],\"4289\":[null,5],\"4290\":[null,3],\"4291\":[null,4],\"4292\":[null,8],\"4293\":[2],\"4294\":[null,4],\"4295\":[null,38],\"4296\":[null,2],\"4297\":[null,104],\"4298\":[null,4],\"4299\":[null,4],\"4300\":[null,4],\"4301\":[null,5],\"4302\":[null,2],\"4303\":[null,10],\"4304\":[null,4],\"4305\":[null,4],\"4306\":[null,4],\"4307\":[null,5],\"4308\":[null,1],\"4309\":[null,2],\"4310\":[null,4],\"4311\":[null,5],\"4312\":[null,13],\"4313\":[null,5],\"4314\":[null,4],\"4315\":[null,26],\"4316\":[null,2],\"4317\":[null,4],\"4318\":[null,3],\"4319\":[null,13],\"4320\":[null,19],\"4321\":[null,21],\"4322\":[null,2],\"4323\":[null,3],\"4324\":[null,4],\"4325\":[null,5],\"4326\":[null,7],\"4327\":[null,1],\"4328\":[null,2],\"4329\":[null,2],\"4330\":[null,17],\"4331\":[null,18],\"4332\":[null,7],\"4333\":[null,3],\"4334\":[null,11],\"4335\":[null,7],\"4336\":[null,11],\"4337\":[null,3],\"4338\":[2],\"4339\":[null,9],\"4340\":[null,2],\"4341\":[null,7],\"4342\":[null,12],\"4343\":[null,4],\"4344\":[null,13],\"4345\":[null,11],\"4346\":[null,12],\"4347\":[2],\"4348\":[null,3],\"4349\":[null,1],\"4350\":[null,4],\"4351\":[null,5],\"4352\":[null,4],\"4353\":[null,2],\"4354\":[null,1],\"4355\":[null,2],\"4356\":[null,1],\"4357\":[null,4],\"4358\":[null,4],\"4359\":[null,1],\"4360\":[null,22],\"4361\":[1],\"4362\":[1],\"4363\":[3],\"4364\":[null,3],\"4365\":[null,25],\"4366\":[null,6],\"4367\":[null,8],\"4368\":[1],\"4369\":[null,9],\"4370\":[null,1],\"4371\":[null,8],\"4372\":[null,10],\"4373\":[null,8],\"4374\":[null,13],\"4375\":[null,8],\"4376\":[null,7],\"4377\":[null,8],\"4378\":[1],\"4379\":[2],\"4380\":[2],\"4381\":[3],\"4382\":[null,21],\"4383\":[1],\"4384\":[null,4],\"4385\":[null,12],\"4386\":[null,2],\"4387\":[null,2],\"4388\":[null,1],\"4389\":[null,1],\"4390\":[null,1],\"4391\":[null,1],\"4392\":[null,1],\"4393\":[null,1],\"4394\":[null,1],\"4395\":[null,5],\"4396\":[null,4],\"4397\":[null,8],\"4398\":[null,6],\"4399\":[null,4],\"4400\":[null,7],\"4401\":[null,1],\"4402\":[null,6],\"4403\":[null,7],\"4404\":[null,4],\"4405\":[null,2],\"4406\":[2],\"4407\":[null,1],\"4408\":[null,3],\"4409\":[null,1],\"4410\":[null,6],\"4411\":[null,2],\"4412\":[null,33],\"4413\":[null,2],\"4414\":[null,8],\"4415\":[null,2],\"4416\":[null,45],\"4417\":[null,3],\"4418\":[null,1],\"4419\":[null,2],\"4420\":[null,3],\"4421\":[null,1],\"4422\":[null,6],\"4423\":[null,1],\"4424\":[null,6],\"4425\":[null,6],\"4426\":[null,3],\"4427\":[null,3],\"4428\":[null,11],\"4429\":[null,2],\"4430\":[null,2],\"4431\":[null,3],\"4432\":[null,2],\"4433\":[null,5],\"4434\":[null,2],\"4435\":[null,9],\"4436\":[1],\"4437\":[null,11],\"4438\":[null,1],\"4439\":[null,15],\"4440\":[null,2],\"4441\":[null,15],\"4442\":[1],\"4443\":[1],\"4444\":[1],\"4445\":[null,6],\"4446\":[null,19],\"4447\":[null,12],\"4448\":[null,5],\"4449\":[null,25],\"4450\":[1],\"4451\":[2],\"4452\":[null,14],\"4453\":[3],\"4454\":[null,3],\"4455\":[null,18],\"4456\":[null,18],\"4457\":[2],\"4458\":[null,12],\"4459\":[2],\"4460\":[null,13],\"4461\":[null,6],\"4462\":[null,8],\"4463\":[null,4],\"4464\":[null,11],\"4465\":[1],\"4466\":[null,17],\"4467\":[null,17],\"4468\":[null,15],\"4469\":[null,21],\"4470\":[null,11],\"4471\":[1],\"4472\":[null,11],\"4473\":[null,12],\"4474\":[null,25],\"4475\":[null,39],\"4476\":[null,9],\"4477\":[null,11],\"4478\":[null,16],\"4479\":[null,32],\"4480\":[null,19],\"4481\":[null,8],\"4482\":[null,4],\"4483\":[null,9],\"4484\":[null,14],\"4485\":[null,2],\"4486\":[null,23],\"4487\":[null,1],\"4488\":[null,2],\"4489\":[null,17],\"4490\":[null,2],\"4491\":[null,34],\"4492\":[null,1],\"4493\":[1],\"4494\":[1],\"4495\":[null,11],\"4496\":[null,1],\"4497\":[null,8],\"4498\":[null,3],\"4499\":[null,5],\"4500\":[null,6],\"4501\":[null,2],\"4502\":[null,9],\"4503\":[5],\"4504\":[null,16],\"4505\":[null,20],\"4506\":[null,11],\"4507\":[null,17],\"4508\":[null,17],\"4509\":[null,8],\"4510\":[null,12],\"4511\":[1],\"4512\":[2],\"4513\":[1],\"4514\":[2],\"4515\":[null,4],\"4516\":[null,13],\"4517\":[null,5],\"4518\":[null,8],\"4519\":[null,31],\"4520\":[null,6],\"4521\":[1],\"4522\":[1],\"4523\":[null,3],\"4524\":[null,2],\"4525\":[null,14],\"4526\":[null,7],\"4527\":[null,5],\"4528\":[null,14],\"4529\":[null,7],\"4530\":[null,7],\"4531\":[null,5],\"4532\":[null,4],\"4533\":[null,5],\"4534\":[null,6],\"4535\":[1],\"4536\":[null,5],\"4537\":[null,15],\"4538\":[null,5],\"4539\":[null,28],\"4540\":[null,7],\"4541\":[null,9],\"4542\":[null,11],\"4543\":[1],\"4544\":[3],\"4545\":[null,11],\"4546\":[null,15],\"4547\":[null,7],\"4548\":[null,11],\"4549\":[1],\"4550\":[null,7],\"4551\":[null,26],\"4552\":[null,19],\"4553\":[null,4],\"4554\":[null,1],\"4555\":[null,13],\"4556\":[null,10],\"4557\":[null,6],\"4558\":[null,11],\"4559\":[null,3],\"4560\":[null,14],\"4561\":[null,13],\"4562\":[null,12],\"4563\":[null,7],\"4564\":[null,7],\"4565\":[null,29],\"4566\":[null,9],\"4567\":[null,7],\"4568\":[null,13],\"4569\":[null,14],\"4570\":[1],\"4571\":[null,4],\"4572\":[null,3],\"4573\":[null,1],\"4574\":[null,7],\"4575\":[3],\"4576\":[null,9],\"4577\":[null,8],\"4578\":[null,7],\"4579\":[null,1],\"4580\":[null,2],\"4581\":[null,10],\"4582\":[null,10],\"4583\":[null,9],\"4584\":[null,7],\"4585\":[null,13],\"4586\":[1],\"4587\":[null,10],\"4588\":[null,16],\"4589\":[null,4],\"4590\":[null,11],\"4591\":[null,14],\"4592\":[null,1],\"4593\":[null,19],\"4594\":[null,15],\"4595\":[null,5],\"4596\":[null,12],\"4597\":[null,7],\"4598\":[null,1],\"4599\":[null,12],\"4600\":[null,14],\"4601\":[null,4],\"4602\":[1],\"4603\":[null,13],\"4604\":[null,11],\"4605\":[null,10],\"4606\":[1],\"4607\":[null,5],\"4608\":[null,5],\"4609\":[null,7],\"4610\":[null,5],\"4611\":[null,4],\"4612\":[null,4],\"4613\":[null,5],\"4614\":[null,5],\"4615\":[null,5],\"4616\":[null,5],\"4617\":[null,5],\"4618\":[null,11],\"4619\":[null,5],\"4620\":[null,5],\"4621\":[null,5],\"4622\":[null,5],\"4623\":[null,3],\"4624\":[null,5],\"4625\":[null,8],\"4626\":[null,5],\"4627\":[4],\"4628\":[null,12],\"4629\":[null,14],\"4630\":[null,6],\"4631\":[null,1],\"4632\":[null,6],\"4633\":[null,3],\"4634\":[null,3],\"4635\":[null,3],\"4636\":[null,13],\"4637\":[null,7],\"4638\":[null,16],\"4639\":[null,12],\"4640\":[null,5],\"4641\":[null,8],\"4642\":[null,7],\"4643\":[null,5],\"4644\":[null,7],\"4645\":[null,7],\"4646\":[null,6],\"4647\":[null,21],\"4648\":[4],\"4649\":[null,12],\"4650\":[null,7],\"4651\":[null,1],\"4652\":[null,2],\"4653\":[null,16],\"4654\":[null,12],\"4655\":[null,5],\"4656\":[null,5],\"4657\":[null,10],\"4658\":[null,13],\"4659\":[null,8],\"4660\":[null,7],\"4661\":[null,6],\"4662\":[null,6],\"4663\":[null,11],\"4664\":[null,7],\"4665\":[null,10],\"4666\":[4],\"4667\":[null,11],\"4668\":[null,8],\"4669\":[null,1],\"4670\":[null,2],\"4671\":[null,12],\"4672\":[null,11],\"4673\":[null,6],\"4674\":[null,8],\"4675\":[null,7],\"4676\":[null,4],\"4677\":[null,5],\"4678\":[null,12],\"4679\":[1],\"4680\":[1],\"4681\":[1],\"4682\":[5],\"4683\":[null,8],\"4684\":[null,11],\"4685\":[null,7],\"4686\":[null,3],\"4687\":[null,2],\"4688\":[null,12],\"4689\":[null,9],\"4690\":[null,2],\"4691\":[null,3],\"4692\":[null,23],\"4693\":[null,2],\"4694\":[null,6],\"4695\":[null,7],\"4696\":[null,5],\"4697\":[null,2],\"4698\":[null,6],\"4699\":[null,8],\"4700\":[null,3],\"4701\":[null,6],\"4702\":[null,10],\"4703\":[null,3],\"4704\":[null,9],\"4705\":[null,13],\"4706\":[1],\"4707\":[null,3],\"4708\":[2],\"4709\":[null,2],\"4710\":[null,10],\"4711\":[null,15],\"4712\":[null,15],\"4713\":[null,3],\"4714\":[null,15],\"4715\":[null,7],\"4716\":[null,4],\"4717\":[null,11],\"4718\":[null,4],\"4719\":[null,9],\"4720\":[null,15],\"4721\":[null,20],\"4722\":[null,37],\"4723\":[1],\"4724\":[null,2],\"4725\":[null,18],\"4726\":[null,4],\"4727\":[null,12],\"4728\":[null,14],\"4729\":[null,2],\"4730\":[null,6],\"4731\":[null,13],\"4732\":[null,2],\"4733\":[null,8],\"4734\":[null,3],\"4735\":[null,7],\"4736\":[null,5],\"4737\":[null,5],\"4738\":[null,14],\"4739\":[2],\"4740\":[null,2],\"4741\":[null,5],\"4742\":[null,16],\"4743\":[null,1],\"4744\":[2],\"4745\":[null,9],\"4746\":[null,4],\"4747\":[null,6],\"4748\":[null,11],\"4749\":[null,7],\"4750\":[null,7],\"4751\":[null,15],\"4752\":[null,1],\"4753\":[2],\"4754\":[null,8],\"4755\":[null,13],\"4756\":[null,2],\"4757\":[null,12],\"4758\":[null,3],\"4759\":[null,2],\"4760\":[null,11],\"4761\":[null,8],\"4762\":[2],\"4763\":[null,16],\"4764\":[null,4],\"4765\":[null,2],\"4766\":[null,3],\"4767\":[null,2],\"4768\":[null,3],\"4769\":[null,6],\"4770\":[2],\"4771\":[null,19],\"4772\":[null,5],\"4773\":[null,12],\"4774\":[2],\"4775\":[null,8],\"4776\":[null,1],\"4777\":[null,25],\"4778\":[null,1],\"4779\":[null,14],\"4780\":[2],\"4781\":[null,2],\"4782\":[null,15],\"4783\":[null,3],\"4784\":[null,6],\"4785\":[null,5],\"4786\":[null,8],\"4787\":[null,2],\"4788\":[null,6],\"4789\":[null,2],\"4790\":[null,6],\"4791\":[null,4],\"4792\":[null,11],\"4793\":[null,2],\"4794\":[null,14],\"4795\":[null,2],\"4796\":[null,16],\"4797\":[null,2],\"4798\":[null,4],\"4799\":[null,2],\"4800\":[null,3],\"4801\":[null,4],\"4802\":[null,3],\"4803\":[null,4],\"4804\":[null,7],\"4805\":[null,6],\"4806\":[null,1],\"4807\":[1],\"4808\":[null,7],\"4809\":[null,1],\"4810\":[2],\"4811\":[null,3],\"4812\":[null,6],\"4813\":[null,5],\"4814\":[null,6],\"4815\":[null,7],\"4816\":[null,3],\"4817\":[null,3],\"4818\":[null,2],\"4819\":[null,5],\"4820\":[null,2],\"4821\":[null,3],\"4822\":[null,7],\"4823\":[null,4],\"4824\":[null,12],\"4825\":[null,8],\"4826\":[null,12],\"4827\":[null,4],\"4828\":[null,6],\"4829\":[2],\"4830\":[null,3],\"4831\":[null,2],\"4832\":[null,3],\"4833\":[null,2],\"4834\":[null,4],\"4835\":[1],\"4836\":[null,2],\"4837\":[null,6],\"4838\":[null,12],\"4839\":[null,4],\"4840\":[null,7],\"4841\":[null,4],\"4842\":[null,3],\"4843\":[null,4],\"4844\":[null,7],\"4845\":[1],\"4846\":[null,3],\"4847\":[null,5],\"4848\":[null,7],\"4849\":[null,5],\"4850\":[null,6],\"4851\":[null,14],\"4852\":[null,15],\"4853\":[null,4],\"4854\":[null,5],\"4855\":[null,8],\"4856\":[null,12],\"4857\":[null,11],\"4858\":[null,15],\"4859\":[null,12],\"4860\":[null,7],\"4861\":[null,10],\"4862\":[null,11],\"4863\":[1],\"4864\":[null,3],\"4865\":[null,8],\"4866\":[null,8],\"4867\":[null,8],\"4868\":[null,9],\"4869\":[null,5],\"4870\":[null,12],\"4871\":[null,11],\"4872\":[null,4],\"4873\":[null,9],\"4874\":[null,11],\"4875\":[null,3],\"4876\":[3],\"4877\":[null,6],\"4878\":[null,8],\"4879\":[null,6],\"4880\":[null,12],\"4881\":[null,11],\"4882\":[null,7],\"4883\":[null,10],\"4884\":[null,9],\"4885\":[null,13],\"4886\":[null,13],\"4887\":[null,11],\"4888\":[null,8],\"4889\":[null,5],\"4890\":[null,6],\"4891\":[null,17],\"4892\":[null,10],\"4893\":[null,16],\"4894\":[2],\"4895\":[null,6],\"4896\":[null,9],\"4897\":[null,10],\"4898\":[null,14],\"4899\":[null,8],\"4900\":[null,1],\"4901\":[null,2],\"4902\":[null,5],\"4903\":[null,6],\"4904\":[null,10],\"4905\":[2],\"4906\":[null,10],\"4907\":[null,11],\"4908\":[null,10],\"4909\":[2],\"4910\":[null,6],\"4911\":[null,13],\"4912\":[null,11],\"4913\":[3],\"4914\":[null,12],\"4915\":[null,7],\"4916\":[null,11],\"4917\":[null,14],\"4918\":[null,10],\"4919\":[1],\"4920\":[null,7],\"4921\":[null,8],\"4922\":[null,5],\"4923\":[null,7],\"4924\":[null,10],\"4925\":[1],\"4926\":[null,7],\"4927\":[null,11],\"4928\":[null,6],\"4929\":[null,17],\"4930\":[null,38],\"4931\":[null,12],\"4932\":[null,6],\"4933\":[null,3],\"4934\":[null,6],\"4935\":[null,6],\"4936\":[null,5],\"4937\":[null,2],\"4938\":[1],\"4939\":[null,8],\"4940\":[null,2],\"4941\":[null,17],\"4942\":[null,11],\"4943\":[1],\"4944\":[null,6],\"4945\":[null,2],\"4946\":[null,16],\"4947\":[1],\"4948\":[null,7],\"4949\":[null,2],\"4950\":[null,16],\"4951\":[null,11],\"4952\":[null,12],\"4953\":[1],\"4954\":[null,6],\"4955\":[null,6],\"4956\":[null,6],\"4957\":[null,9],\"4958\":[null,8],\"4959\":[null,2],\"4960\":[null,1],\"4961\":[null,4],\"4962\":[null,6],\"4963\":[null,6],\"4964\":[null,6],\"4965\":[null,6],\"4966\":[null,11],\"4967\":[null,13],\"4968\":[null,14],\"4969\":[null,7],\"4970\":[null,14],\"4971\":[null,20],\"4972\":[null,2],\"4973\":[null,6],\"4974\":[null,5],\"4975\":[null,24],\"4976\":[1],\"4977\":[null,25],\"4978\":[null,1],\"4979\":[null,5],\"4980\":[null,16],\"4981\":[null,10],\"4982\":[null,9],\"4983\":[null,4],\"4984\":[null,30],\"4985\":[null,2],\"4986\":[null,10],\"4987\":[null,15],\"4988\":[null,16],\"4989\":[null,9],\"4990\":[null,2],\"4991\":[2],\"4992\":[null,4],\"4993\":[null,1],\"4994\":[null,9],\"4995\":[null,10],\"4996\":[null,13],\"4997\":[1],\"4998\":[null,3],\"4999\":[null,4],\"5000\":[null,10],\"5001\":[1],\"5002\":[1],\"5003\":[null,2],\"5004\":[3],\"5005\":[null,3],\"5006\":[null,5],\"5007\":[1],\"5008\":[null,4],\"5009\":[3],\"5010\":[null,3],\"5011\":[null,2],\"5012\":[null,14],\"5013\":[null,6],\"5014\":[1],\"5015\":[null,4],\"5016\":[1],\"5017\":[null,4],\"5018\":[1],\"5019\":[null,10],\"5020\":[3],\"5021\":[5],\"5022\":[null,6],\"5023\":[null,2],\"5024\":[null,3],\"5025\":[4],\"5026\":[null,15],\"5027\":[null,15],\"5028\":[1],\"5029\":[1],\"5030\":[3],\"5031\":[null,6],\"5032\":[null,4],\"5033\":[null,9],\"5034\":[null,4],\"5035\":[1],\"5036\":[null,13],\"5037\":[null,9],\"5038\":[1],\"5039\":[3],\"5040\":[2],\"5041\":[null,7],\"5042\":[null,10],\"5043\":[null,21],\"5044\":[null,15],\"5045\":[null,12],\"5046\":[2],\"5047\":[null,8],\"5048\":[null,4],\"5049\":[null,7],\"5050\":[3],\"5051\":[2],\"5052\":[null,3],\"5053\":[null,19],\"5054\":[null,6],\"5055\":[null,11],\"5056\":[2],\"5057\":[null,10],\"5058\":[3],\"5059\":[2],\"5060\":[null,3],\"5061\":[null,12],\"5062\":[null,7],\"5063\":[2],\"5064\":[null,3],\"5065\":[3],\"5066\":[2],\"5067\":[null,3],\"5068\":[null,20],\"5069\":[null,7],\"5070\":[null,10],\"5071\":[2],\"5072\":[null,12],\"5073\":[3],\"5074\":[2],\"5075\":[null,3],\"5076\":[null,11],\"5077\":[null,6],\"5078\":[null,10],\"5079\":[2],\"5080\":[null,6],\"5081\":[1],\"5082\":[null,9],\"5083\":[null,4],\"5084\":[null,6],\"5085\":[null,9],\"5086\":[4],\"5087\":[null,12],\"5088\":[null,8],\"5089\":[null,19],\"5090\":[3],\"5091\":[null,5],\"5092\":[null,6],\"5093\":[null,9],\"5094\":[4],\"5095\":[null,17],\"5096\":[null,3],\"5097\":[null,18],\"5098\":[null,7],\"5099\":[null,11],\"5100\":[3],\"5101\":[null,5],\"5102\":[null,6],\"5103\":[null,13],\"5104\":[null,14],\"5105\":[null,9],\"5106\":[null,9],\"5107\":[null,6],\"5108\":[null,4],\"5109\":[null,16],\"5110\":[null,5],\"5111\":[null,3],\"5112\":[null,2],\"5113\":[1],\"5114\":[2],\"5115\":[null,11],\"5116\":[null,4],\"5117\":[null,10],\"5118\":[null,11],\"5119\":[null,11],\"5120\":[null,14],\"5121\":[null,5],\"5122\":[3],\"5123\":[null,12],\"5124\":[null,5],\"5125\":[null,12],\"5126\":[null,9],\"5127\":[null,9],\"5128\":[null,11],\"5129\":[null,9],\"5130\":[null,7],\"5131\":[null,4],\"5132\":[null,12],\"5133\":[null,10],\"5134\":[1],\"5135\":[1],\"5136\":[3],\"5137\":[2],\"5138\":[null,10],\"5139\":[2],\"5140\":[null,8],\"5141\":[null,3],\"5142\":[null,24],\"5143\":[null,2],\"5144\":[null,8],\"5145\":[null,8],\"5146\":[null,8],\"5147\":[null,3],\"5148\":[null,4],\"5149\":[null,4],\"5150\":[null,4],\"5151\":[null,4],\"5152\":[null,2],\"5153\":[null,7],\"5154\":[null,5],\"5155\":[2],\"5156\":[null,13],\"5157\":[2],\"5158\":[null,2],\"5159\":[null,3],\"5160\":[null,5],\"5161\":[2],\"5162\":[null,6],\"5163\":[null,10],\"5164\":[2],\"5165\":[null,3],\"5166\":[null,10],\"5167\":[null,4],\"5168\":[2],\"5169\":[null,4],\"5170\":[null,5],\"5171\":[null,3],\"5172\":[null,2],\"5173\":[null,2],\"5174\":[null,4],\"5175\":[null,2],\"5176\":[2],\"5177\":[null,5],\"5178\":[5],\"5179\":[null,8],\"5180\":[1],\"5181\":[1],\"5182\":[null,3],\"5183\":[null,2],\"5184\":[null,2],\"5185\":[null,5],\"5186\":[null,6],\"5187\":[null,3],\"5188\":[null,19],\"5189\":[null,13],\"5190\":[1],\"5191\":[2],\"5192\":[null,1],\"5193\":[null,3],\"5194\":[null,3],\"5195\":[null,5],\"5196\":[null,1],\"5197\":[null,3],\"5198\":[null,4],\"5199\":[null,8],\"5200\":[null,77],\"5201\":[2],\"5202\":[null,1],\"5203\":[null,10],\"5204\":[null,6],\"5205\":[null,1],\"5206\":[null,10],\"5207\":[null,2],\"5208\":[null,2],\"5209\":[null,69],\"5210\":[null,13],\"5211\":[null,2],\"5212\":[null,3],\"5213\":[null,6],\"5214\":[null,4],\"5215\":[null,4],\"5216\":[null,1],\"5217\":[null,13],\"5218\":[null,2],\"5219\":[null,19],\"5220\":[null,2],\"5221\":[null,4],\"5222\":[null,1],\"5223\":[null,11],\"5224\":[null,2],\"5225\":[null,2],\"5226\":[null,5],\"5227\":[null,5],\"5228\":[null,7],\"5229\":[null,6],\"5230\":[null,2],\"5231\":[null,5],\"5232\":[null,28],\"5233\":[1],\"5234\":[1],\"5235\":[null,29],\"5236\":[1],\"5237\":[null,2],\"5238\":[null,1],\"5239\":[null,10],\"5240\":[null,4],\"5241\":[null,32],\"5242\":[2],\"5243\":[2],\"5244\":[null,5],\"5245\":[2],\"5246\":[null,10],\"5247\":[null,1],\"5248\":[null,5],\"5249\":[null,1],\"5250\":[2],\"5251\":[null,8],\"5252\":[null,1],\"5253\":[null,5],\"5254\":[null,1],\"5255\":[null,10],\"5256\":[3],\"5257\":[null,6],\"5258\":[null,11],\"5259\":[null,3],\"5260\":[2],\"5261\":[4],\"5262\":[null,5],\"5263\":[null,9],\"5264\":[null,8],\"5265\":[null,11],\"5266\":[null,5],\"5267\":[3],\"5268\":[null,3],\"5269\":[null,12],\"5270\":[null,4],\"5271\":[null,2],\"5272\":[2],\"5273\":[null,2],\"5274\":[2],\"5275\":[null,52],\"5276\":[2],\"5277\":[null,3],\"5278\":[null,9],\"5279\":[null,7],\"5280\":[null,11],\"5281\":[1],\"5282\":[null,6],\"5283\":[null,11],\"5284\":[4],\"5285\":[null,5],\"5286\":[null,9],\"5287\":[null,8],\"5288\":[null,11],\"5289\":[null,5],\"5290\":[3],\"5291\":[null,3],\"5292\":[null,12],\"5293\":[1],\"5294\":[3],\"5295\":[null,1],\"5296\":[null,15],\"5297\":[null,2],\"5298\":[null,2],\"5299\":[null,2],\"5300\":[null,3],\"5301\":[null,3],\"5302\":[null,1],\"5303\":[null,1],\"5304\":[2],\"5305\":[null,2],\"5306\":[3],\"5307\":[null,1],\"5308\":[1],\"5309\":[1],\"5310\":[1],\"5311\":[1],\"5312\":[null,23],\"5313\":[null,5],\"5314\":[null,22],\"5315\":[null,3],\"5316\":[null,4],\"5317\":[null,2],\"5318\":[3],\"5319\":[null,13],\"5320\":[null,13],\"5321\":[null,18],\"5322\":[null,15],\"5323\":[null,7],\"5324\":[null,32],\"5325\":[null,16],\"5326\":[null,21],\"5327\":[null,16],\"5328\":[null,15],\"5329\":[null,5],\"5330\":[3],\"5331\":[null,29],\"5332\":[null,19],\"5333\":[null,9],\"5334\":[null,11],\"5335\":[null,14],\"5336\":[null,20],\"5337\":[null,13],\"5338\":[null,8],\"5339\":[null,9],\"5340\":[null,12],\"5341\":[null,12],\"5342\":[1],\"5343\":[3],\"5344\":[null,7],\"5345\":[null,3],\"5346\":[6],\"5347\":[null,7],\"5348\":[null,23],\"5349\":[null,21],\"5350\":[null,17],\"5351\":[7],\"5352\":[null,16],\"5353\":[null,13],\"5354\":[null,12],\"5355\":[null,14],\"5356\":[7],\"5357\":[null,30],\"5358\":[null,19],\"5359\":[null,28],\"5360\":[1],\"5361\":[5],\"5362\":[null,7],\"5363\":[null,9],\"5364\":[null,24],\"5365\":[null,12],\"5366\":[1],\"5367\":[null,8],\"5368\":[null,3],\"5369\":[null,7],\"5370\":[null,8],\"5371\":[null,2],\"5372\":[null,4],\"5373\":[null,5],\"5374\":[null,6],\"5375\":[null,5],\"5376\":[null,6],\"5377\":[null,7],\"5378\":[2],\"5379\":[null,17],\"5380\":[null,20],\"5381\":[null,15],\"5382\":[null,13],\"5383\":[null,10],\"5384\":[null,14],\"5385\":[null,8],\"5386\":[null,7],\"5387\":[1],\"5388\":[2],\"5389\":[2],\"5390\":[5],\"5391\":[null,2],\"5392\":[null,2],\"5393\":[null,2],\"5394\":[null,2],\"5395\":[null,2],\"5396\":[null,6],\"5397\":[4],\"5398\":[null,6],\"5399\":[null,4],\"5400\":[null,8],\"5401\":[null,5],\"5402\":[null,5],\"5403\":[null,5],\"5404\":[null,2],\"5405\":[null,7],\"5406\":[null,5],\"5407\":[null,3],\"5408\":[null,5],\"5409\":[null,9],\"5410\":[null,5],\"5411\":[null,5],\"5412\":[null,2],\"5413\":[null,6],\"5414\":[null,2],\"5415\":[null,2],\"5416\":[null,4],\"5417\":[null,6],\"5418\":[null,4],\"5419\":[2],\"5420\":[3],\"5421\":[null,7],\"5422\":[null,5],\"5423\":[null,4],\"5424\":[null,5],\"5425\":[null,10],\"5426\":[null,2],\"5427\":[null,4],\"5428\":[null,4],\"5429\":[null,8],\"5430\":[null,6],\"5431\":[null,2],\"5432\":[null,9],\"5433\":[null,5],\"5434\":[2],\"5435\":[5],\"5436\":[null,5],\"5437\":[null,2],\"5438\":[null,2],\"5439\":[null,2],\"5440\":[null,5],\"5441\":[null,2],\"5442\":[null,3],\"5443\":[null,4],\"5444\":[null,7],\"5445\":[null,3],\"5446\":[null,2],\"5447\":[null,3],\"5448\":[null,3],\"5449\":[null,2],\"5450\":[null,2],\"5451\":[null,3],\"5452\":[null,2],\"5453\":[null,2],\"5454\":[null,2],\"5455\":[null,3],\"5456\":[null,2],\"5457\":[1],\"5458\":[2],\"5459\":[null,15],\"5460\":[null,16],\"5461\":[null,7],\"5462\":[null,2],\"5463\":[null,7],\"5464\":[null,8],\"5465\":[null,4],\"5466\":[null,2],\"5467\":[null,9],\"5468\":[null,5],\"5469\":[null,2],\"5470\":[null,2],\"5471\":[null,4],\"5472\":[2],\"5473\":[3],\"5474\":[null,8],\"5475\":[null,2],\"5476\":[null,8],\"5477\":[3],\"5478\":[null,2],\"5479\":[null,14],\"5480\":[null,11],\"5481\":[null,2],\"5482\":[null,10],\"5483\":[3],\"5484\":[null,2],\"5485\":[null,2],\"5486\":[null,2],\"5487\":[3],\"5488\":[null,2],\"5489\":[null,2],\"5490\":[null,2],\"5491\":[2],\"5492\":[null,4],\"5493\":[null,7],\"5494\":[null,7],\"5495\":[null,7],\"5496\":[null,9],\"5497\":[null,2],\"5498\":[null,11],\"5499\":[null,11],\"5500\":[null,2],\"5501\":[null,2],\"5502\":[2],\"5503\":[null,2],\"5504\":[null,4],\"5505\":[null,3],\"5506\":[null,2],\"5507\":[null,5],\"5508\":[null,2],\"5509\":[null,2],\"5510\":[null,3],\"5511\":[null,2],\"5512\":[null,2],\"5513\":[2],\"5514\":[null,2],\"5515\":[null,14],\"5516\":[null,15],\"5517\":[null,2],\"5518\":[null,4],\"5519\":[2],\"5520\":[null,2],\"5521\":[null,10],\"5522\":[null,4],\"5523\":[null,2],\"5524\":[null,4],\"5525\":[null,8],\"5526\":[null,4],\"5527\":[null,3],\"5528\":[null,4],\"5529\":[null,5],\"5530\":[null,5],\"5531\":[null,2],\"5532\":[null,6],\"5533\":[null,2],\"5534\":[null,2],\"5535\":[null,3],\"5536\":[null,5],\"5537\":[null,4],\"5538\":[null,2],\"5539\":[null,4],\"5540\":[null,8],\"5541\":[null,2],\"5542\":[null,2],\"5543\":[null,1],\"5544\":[null,2],\"5545\":[null,1],\"5546\":[null,3],\"5547\":[null,7],\"5548\":[null,3],\"5549\":[null,3],\"5550\":[null,6],\"5551\":[null,7],\"5552\":[null,5],\"5553\":[2],\"5554\":[null,2],\"5555\":[null,4],\"5556\":[null,2],\"5557\":[null,3],\"5558\":[null,2],\"5559\":[null,11],\"5560\":[null,9],\"5561\":[null,2],\"5562\":[null,3],\"5563\":[null,2],\"5564\":[null,2],\"5565\":[null,2],\"5566\":[2],\"5567\":[null,2],\"5568\":[null,2],\"5569\":[null,5],\"5570\":[null,5],\"5571\":[null,7],\"5572\":[null,11],\"5573\":[2],\"5574\":[null,24],\"5575\":[3],\"5576\":[3],\"5577\":[2],\"5578\":[1],\"5579\":[1],\"5580\":[2],\"5581\":[3],\"5582\":[2],\"5583\":[2],\"5584\":[1],\"5585\":[6],\"5586\":[1],\"5587\":[1],\"5588\":[3],\"5589\":[1],\"5590\":[1],\"5591\":[1],\"5592\":[1],\"5593\":[1],\"5594\":[4],\"5595\":[1],\"5596\":[1],\"5597\":[2],\"5598\":[1],\"5599\":[1],\"5600\":[1]},\"averageFieldLength\":[1.7578825722167928,7.488319812015855],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"t\":\"OpenAI：mykey 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\"},\"2\":{\"h\":\"Slide page\"},\"3\":{\"h\":\"主要功能与配置演示\"},\"4\":{\"h\":\"目录\",\"a\":\"目录\"},\"5\":{\"t\":\"Markdown 展示\"},\"6\":{\"t\":\"页面展示\"},\"7\":{\"t\":\"禁用展示\"},\"8\":{\"t\":\"加密展示\"},\"9\":{\"h\":\"布局与功能禁用\"},\"10\":{\"t\":\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\"},\"11\":{\"t\":\"本页面就是一个示例，禁用了如下功能:\"},\"12\":{\"t\":\"导航栏\"},\"13\":{\"t\":\"侧边栏\"},\"14\":{\"t\":\"路径导航\"},\"15\":{\"t\":\"页面信息\"},\"16\":{\"t\":\"贡献者\"},\"17\":{\"t\":\"编辑此页链接\"},\"18\":{\"t\":\"更新时间\"},\"19\":{\"t\":\"上一篇/下一篇 链接\"},\"20\":{\"t\":\"评论\"},\"21\":{\"t\":\"页脚\"},\"22\":{\"t\":\"返回顶部按钮\"},\"23\":{\"h\":\"密码加密的文章\"},\"24\":{\"t\":\"实际的文章内容。\"},\"25\":{\"t\":\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\"},\"26\":{\"t\":\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"},\"27\":{\"h\":\"Markdown 展示\"},\"28\":{\"t\":\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\"},\"29\":{\"t\":\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"},\"30\":{\"h\":\"Markdown 介绍\",\"a\":\"markdown-介绍\"},\"31\":{\"t\":\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"},\"32\":{\"h\":\"Markdown 配置\",\"a\":\"markdown-配置\"},\"33\":{\"t\":\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\"},\"34\":{\"t\":\"相关信息\"},\"35\":{\"t\":\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"},\"36\":{\"h\":\"Markdown 扩展\",\"a\":\"markdown-扩展\"},\"37\":{\"t\":\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"},\"38\":{\"h\":\"VuePress 扩展\",\"a\":\"vuepress-扩展\"},\"39\":{\"t\":\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\"},\"40\":{\"t\":\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"},\"41\":{\"h\":\"主题扩展\",\"a\":\"主题扩展\"},\"42\":{\"t\":\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"},\"43\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"44\":{\"t\":\"安全的在 Markdown 中使用 {{ variable }}。\"},\"45\":{\"t\":\"自定义标题\"},\"46\":{\"t\":\"信息容器，包含 代码 与 链接。\"},\"47\":{\"t\":\"const a = 1; \"},\"48\":{\"t\":\"自定义标题\"},\"49\":{\"t\":\"提示容器\"},\"50\":{\"t\":\"自定义标题\"},\"51\":{\"t\":\"警告容器\"},\"52\":{\"t\":\"自定义标题\"},\"53\":{\"t\":\"危险容器\"},\"54\":{\"t\":\"自定义标题\"},\"55\":{\"t\":\"详情容器\"},\"56\":{\"t\":\"查看详情\"},\"57\":{\"h\":\"代码块\",\"a\":\"代码块\"},\"58\":{\"t\":\"查看详情\"},\"59\":{\"h\":\"上下角标\",\"a\":\"上下角标\"},\"60\":{\"t\":\"19th H2O\"},\"61\":{\"t\":\"查看详情\"},\"62\":{\"h\":\"自定义对齐\",\"a\":\"自定义对齐\"},\"63\":{\"t\":\"我是居中的\"},\"64\":{\"t\":\"我在右对齐\"},\"65\":{\"t\":\"查看详情\"},\"66\":{\"h\":\"Attrs\",\"a\":\"attrs\"},\"67\":{\"t\":\"一个拥有 ID 的 单词。\"},\"68\":{\"t\":\"查看详情\"},\"69\":{\"h\":\"脚注\",\"a\":\"脚注\"},\"70\":{\"t\":\"此文字有脚注[1].\"},\"71\":{\"t\":\"查看详情\"},\"72\":{\"h\":\"标记\",\"a\":\"标记\"},\"73\":{\"t\":\"你可以标记 重要的内容 。\"},\"74\":{\"t\":\"查看详情\"},\"75\":{\"h\":\"任务列表\",\"a\":\"任务列表\"},\"76\":{\"t\":\" 计划 1\"},\"77\":{\"t\":\" 计划 2\"},\"78\":{\"t\":\"查看详情\"},\"79\":{\"h\":\"图片增强\",\"a\":\"图片增强\"},\"80\":{\"t\":\"支持为图片设置颜色模式和大小\"},\"81\":{\"t\":\"查看详情\"},\"82\":{\"h\":\"卡片\",\"a\":\"卡片\"},\"83\":{\"t\":\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mrhope.site/logo.svg link: https://mrhope.site color: rgba(253, 230, 138, 0.15) \"},\"84\":{\"t\":\"查看详情\"},\"85\":{\"h\":\"图表\",\"a\":\"图表\"},\"86\":{\"t\":\"查看详情\"},\"87\":{\"h\":\"Echarts\",\"a\":\"echarts\"},\"88\":{\"t\":\"查看详情\"},\"89\":{\"h\":\"流程图\",\"a\":\"流程图\"},\"90\":{\"t\":\"查看详情\"},\"91\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"92\":{\"t\":\"查看详情\"},\"93\":{\"h\":\"Tex 语法\",\"a\":\"tex-语法\"},\"94\":{\"t\":\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\"},\"95\":{\"t\":\"查看详情\"},\"96\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"97\":{\"t\":\"Markdown 展示\"},\"98\":{\"t\":\"页面展示\"},\"99\":{\"t\":\"禁用展示\"},\"100\":{\"t\":\"加密展示\"},\"101\":{\"t\":\"查看详情\"},\"102\":{\"h\":\"代码演示\",\"a\":\"代码演示\"},\"103\":{\"t\":\"查看详情\"},\"104\":{\"h\":\"样式化\",\"a\":\"样式化\"},\"105\":{\"t\":\"向 Mr.Hope 捐赠一杯咖啡。 \"},\"106\":{\"t\":\"查看详情\"},\"107\":{\"h\":\"交互演示\",\"a\":\"交互演示\"},\"108\":{\"t\":\"查看详情\"},\"109\":{\"h\":\"Vue 交互演示\",\"a\":\"vue-交互演示\"},\"110\":{\"t\":\"查看详情\"},\"111\":{\"h\":\"幻灯片\",\"a\":\"幻灯片\"},\"112\":{\"t\":\"查看详情\"},\"113\":{\"t\":\"这是脚注内容 ↩︎\"},\"114\":{\"h\":\"页面配置\"},\"115\":{\"t\":\"more 注释之前的内容被视为文章摘要。\"},\"116\":{\"h\":\"页面信息\",\"a\":\"页面信息\"},\"117\":{\"t\":\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\"},\"118\":{\"t\":\"作者设置为 Ms.Hope。\"},\"119\":{\"t\":\"写作日期为 2020 年 1 月 1 日\"},\"120\":{\"t\":\"分类为 “使用指南”\"},\"121\":{\"t\":\"标签为 “页面配置” 和 “使用指南”\"},\"122\":{\"h\":\"页面内容\",\"a\":\"页面内容\"},\"123\":{\"t\":\"你可以自由在这里书写你的 Markdown。\"},\"124\":{\"t\":\"提示\"},\"125\":{\"t\":\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\"},\"126\":{\"t\":\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"},\"127\":{\"t\":\"主题包含了一个自定义徽章可以使用:\"},\"128\":{\"t\":\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"},\"129\":{\"h\":\"页面结构\",\"a\":\"页面结构\"},\"130\":{\"t\":\"此页面应当包含:\"},\"131\":{\"t\":\"路径导航\"},\"132\":{\"t\":\"标题和页面信息\"},\"133\":{\"t\":\"TOC (文章标题列表)\"},\"134\":{\"t\":\"贡献者、更新时间等页面元信息\"},\"135\":{\"t\":\"评论\"},\"136\":{\"t\":\"导航栏\"},\"137\":{\"t\":\"侧边栏\"},\"138\":{\"t\":\"页脚\"},\"139\":{\"t\":\"返回顶部按钮\"},\"140\":{\"t\":\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"},\"141\":{\"h\":\"指南\"},\"142\":{\"h\":\"功能亮点\",\"a\":\"功能亮点\"},\"143\":{\"h\":\"Bar\",\"a\":\"bar\"},\"144\":{\"t\":\"baz\"},\"145\":{\"t\":\"...\"},\"146\":{\"h\":\"Foo\",\"a\":\"foo\"},\"147\":{\"t\":\"ray\"},\"148\":{\"t\":\"...\"},\"149\":{\"h\":\"写在前面\"},\"150\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"151\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"152\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"153\":{\"h\":\"项目主页\"},\"154\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"155\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"156\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"157\":{\"h\":\"幻灯片页\"},\"158\":{\"h\":\"Bar 功能\"},\"159\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"160\":{\"t\":\"我们支持 bar 功能，...\"},\"161\":{\"h\":\"详情\",\"a\":\"详情\"},\"162\":{\"t\":\"baz\"},\"163\":{\"t\":\"...\"},\"164\":{\"h\":\"Baz\"},\"165\":{\"t\":\"功能详情...\"},\"166\":{\"h\":\"Foo 功能\"},\"167\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"168\":{\"t\":\"我们支持 foo 功能，...\"},\"169\":{\"h\":\"详情\",\"a\":\"详情\"},\"170\":{\"t\":\"ray\"},\"171\":{\"t\":\"...\"},\"172\":{\"h\":\"Ray\"},\"173\":{\"t\":\"功能详情...\"},\"174\":{\"h\":\"JVM\"},\"175\":{\"h\":\"二：JVM\",\"a\":\"二-jvm\"},\"176\":{\"h\":\"基本概念\",\"a\":\"基本概念\"},\"177\":{\"h\":\"说一下 Jvm 的主要组成部分？及其作用？\",\"a\":\"说一下-jvm-的主要组成部分-及其作用\"},\"178\":{\"t\":\"类加载器（ClassLoader）\"},\"179\":{\"t\":\"运行时数据区（Runtime Data Area）\"},\"180\":{\"t\":\"执行引擎（Execution Engine）\"},\"181\":{\"t\":\"本地库接口（Native Interface）\"},\"182\":{\"t\":\"首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\"},\"183\":{\"h\":\"内存结构（运行时数据区）\",\"a\":\"内存结构-运行时数据区\"},\"184\":{\"h\":\"垃圾回收机制\",\"a\":\"垃圾回收机制\"},\"185\":{\"h\":\"如何判断对象是否可回收？\",\"a\":\"如何判断对象是否可回收\"},\"186\":{\"h\":\"垃圾回收算法\",\"a\":\"垃圾回收算法\"},\"187\":{\"h\":\"垃圾收集器\",\"a\":\"垃圾收集器\"},\"188\":{\"h\":\"类加载机制\",\"a\":\"类加载机制\"},\"189\":{\"h\":\"类的生命周期\",\"a\":\"类的生命周期\"},\"190\":{\"t\":\"类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，前三个阶段可以统称为连接（Linking）。\"},\"191\":{\"t\":\"这 7 个阶段的顺序如下图所示：\"},\"192\":{\"t\":\"一个类的完整生命周期\"},\"193\":{\"h\":\"类加载过程\",\"a\":\"类加载过程\"},\"194\":{\"t\":\"Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？\"},\"195\":{\"t\":\"系统加载 Class 类型的文件主要三步：加载->连接->初始化。连接过程又可分为三步：验证->准备->解析。\"},\"196\":{\"t\":\"类加载过程\"},\"197\":{\"h\":\"类加载器\",\"a\":\"类加载器\"},\"198\":{\"h\":\"介绍：\",\"a\":\"介绍\"},\"199\":{\"t\":\"类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。\"},\"200\":{\"t\":\"每个 Java 类都有一个引用指向加载它的 ClassLoader。\"},\"201\":{\"t\":\"数组类不是通过 ClassLoader 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。\"},\"202\":{\"t\":\"简单来说，类加载器的主要作用就是加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。\"},\"203\":{\"h\":\"类加载器加载规则\",\"a\":\"类加载器加载规则\"},\"204\":{\"t\":\"JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。\"},\"205\":{\"t\":\"对于已经加载的类会被放在 ClassLoader 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。\"},\"206\":{\"h\":\"类加载器总结\",\"a\":\"类加载器总结\"},\"207\":{\"t\":\"JVM 中内置了三个重要的 ClassLoader：\"},\"208\":{\"t\":\"BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ %JAVA_HOME%/lib目录下的 rt.jar 、resources.jar 、charsets.jar等 jar 包和类）以及被 -Xbootclasspath参数指定的路径下的所有类。\"},\"209\":{\"t\":\"ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类以及被 java.ext.dirs 系统变量所指定的路径下的所有类。\"},\"210\":{\"t\":\"AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。\"},\"211\":{\"t\":\"除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ .class 文件）进行加密，加载时再利用自定义的类加载器对其解密。\"},\"212\":{\"t\":\"如果我们要自定义自己的类加载器，很明显需要继承 ClassLoader抽象类。\"},\"213\":{\"t\":\"ClassLoader 类有两个关键的方法：\"},\"214\":{\"t\":\"protected Class loadClass(String name, boolean resolve)：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resove 如果为 true，在加载时调用 resolveClass(Class<?> c) 方法解析该类。\"},\"215\":{\"t\":\"protected Class findClass(String name)：根据类的二进制名称来查找类，默认实现是空方法。\"},\"216\":{\"t\":\"官方 API 文档中写到：\"},\"217\":{\"t\":\"Subclasses of ClassLoader are encouraged to override findClass(String name), rather than this method.\"},\"218\":{\"t\":\"建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。\"},\"219\":{\"t\":\"如果我们不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 loadClass() 方法。\"},\"220\":{\"t\":\"类加载器层次关系图\"},\"221\":{\"h\":\"双亲委派模型\",\"a\":\"双亲委派模型\"},\"222\":{\"t\":\"类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载呢？这就需要提到双亲委派模型了。\"},\"223\":{\"t\":\"ClassLoader 类使用委托模型来搜索类和资源。\"},\"224\":{\"t\":\"双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。\"},\"225\":{\"t\":\"ClassLoader 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。\"},\"226\":{\"t\":\"下图展示的各种类加载器之间的层次关系被称为类加载器的“双亲委派模型(Parents Delegation Model)”。\"},\"227\":{\"t\":\"类加载器层次关系图\"},\"228\":{\"t\":\"双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在 java.lang.ClassLoader 的 loadClass() 中，相关代码如下所示。\"},\"229\":{\"t\":\"protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { //首先，检查该类是否已经加载过 Class c = findLoadedClass(name); if (c == null) { //如果 c 为 null，则说明该类没有被加载过 long t0 = System.nanoTime(); try { if (parent != null) { //当父类的加载器不为空，则通过父类的loadClass来加载该类 c = parent.loadClass(name, false); } else { //当父类的加载器为空，则调用启动类加载器来加载该类 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { //非空父类的类加载器无法找到相应的类，则抛出异常 } if (c == null) { //当父类加载器无法加载时，则调用findClass方法来加载该类 //用户可通过覆写该方法，来自定义类加载器 long t1 = System.nanoTime(); c = findClass(name); //用于统计类加载器相关的信息 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { //对类进行link操作 resolveClass(c); } return c; } } \"},\"230\":{\"t\":\"每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。\"},\"231\":{\"t\":\"结合上面的源码，简单总结一下双亲委派模型的执行流程：\"},\"232\":{\"t\":\"在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。\"},\"233\":{\"t\":\"类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 BootstrapClassLoader 中。\"},\"234\":{\"t\":\"只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 findClass() 方法来加载类）。\"},\"235\":{\"t\":\"优点：\"},\"236\":{\"t\":\"双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。\"},\"237\":{\"h\":\"一、异常和反射\"},\"238\":{\"h\":\"1.1异常\",\"a\":\"_1-1异常\"},\"239\":{\"h\":\"1.1.1Java异常类层次结构?\",\"a\":\"_1-1-1java异常类层次结构\"},\"240\":{\"t\":\"Throwable是 Java 语言中所有错误与异常的超类。\"},\"241\":{\"t\":\"Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。\"},\"242\":{\"t\":\"Exception 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。\"},\"243\":{\"t\":\"运行时异常\"},\"244\":{\"t\":\"都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。\"},\"245\":{\"t\":\"运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。\"},\"246\":{\"t\":\"非运行时异常 （编译异常）\"},\"247\":{\"t\":\"是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。\"},\"248\":{\"h\":\"1.1.2可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）区别？\",\"a\":\"_1-1-2可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions-区别\"},\"249\":{\"t\":\"可查异常（编译器要求必须处置的异常）：\"},\"250\":{\"t\":\"正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。\"},\"251\":{\"t\":\"除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。\"},\"252\":{\"t\":\"不可查异常(编译器不要求强制处置的异常)\"},\"253\":{\"t\":\"包括运行时异常（RuntimeException与其子类）和错误（Error）。\"},\"254\":{\"h\":\"1.1.3throw和throws的区别？\",\"a\":\"_1-1-3throw和throws的区别\"},\"255\":{\"t\":\"异常的申明(throws)\"},\"256\":{\"t\":\"在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：\"},\"257\":{\"t\":\"public static void method() throws IOException, FileNotFoundException{ //something statements } \"},\"258\":{\"t\":\"异常的抛出(throw)\"},\"259\":{\"t\":\"如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：\"},\"260\":{\"t\":\"public static double method(int value) { if(value == 0) { throw new ArithmeticException(\\\"参数不能为0\\\"); //抛出一个运行时异常 } return 5.0 / value; } \"},\"261\":{\"h\":\"1.1.4Java 7 的 try-with-resource?\",\"a\":\"_1-1-4java-7-的-try-with-resource\"},\"262\":{\"t\":\"如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。\"},\"263\":{\"t\":\"public void automaticallyCloseResource() { File file = new File(\\\"./tmp.txt\\\"); try (FileInputStream inputStream = new FileInputStream(file);) { // use the inputStream to read a file } catch (FileNotFoundException e) { log.error(e); } catch (IOException e) { log.error(e); } } \"},\"264\":{\"t\":\"看下它的背后：\"},\"265\":{\"t\":\"public static transient void main(String args[]) { BufferedReader br; Throwable throwable; br = new BufferedReader(new FileReader(\\\"d:\\\\\\\\ hollischuang.xml\\\")); throwable = null; String line; try { while((line = br.readLine()) != null) System.out.println(line); } catch(Throwable throwable2) { throwable = throwable2; throw throwable2; } if(br != null) if(throwable != null) try { br.close(); } catch(Throwable throwable1) { throwable.addSuppressed(throwable1); } else br.close(); break MISSING_BLOCK_LABEL_113; Exception exception; exception; if(br != null) if(throwable != null) try { br.close(); } catch(Throwable throwable3) { throwable.addSuppressed(throwable3); } else br.close(); throw exception; IOException ioexception; ioexception; } } \"},\"266\":{\"t\":\"其实背后的原理也很简单，那些我们没有做的关闭资源的操作，编译器都帮我们做了。所以，再次印证了，语法糖的作用就是方便程序员的使用，但最终还是要转成编译器认识的语言。\"},\"267\":{\"h\":\"1.1.5finally和return的执行顺序\",\"a\":\"_1-1-5finally和return的执行顺序\"},\"268\":{\"t\":\"try() ⾥⾯有⼀个return语句， 那么后⾯的finally{}⾥⾯的code会不会被执⾏， 什么时候执⾏， 是在return前还是return后?\"},\"269\":{\"t\":\"如果try中有return语句， 那么finally中的代码还是会执⾏。因为return表⽰的是要整个⽅法体返回， 所以，finally中的语句会在return之前执⾏。\"},\"270\":{\"t\":\"但是return前执行的finally块内，对数据的修改效果对于引用类型和值类型会不同：\"},\"271\":{\"t\":\"// 测试 修改值类型 static int f() { int ret = 0; try { return ret; // 返回 0，finally内的修改效果不起作用 } finally { ret++; System.out.println(\\\"finally执行\\\"); } } // 测试 修改引用类型 static int[] f2(){ int[] ret = new int[]{0}; try { return ret; // 返回 [1]，finally内的修改效果起了作用 } finally { ret[0]++; System.out.println(\\\"finally执行\\\"); } } \"},\"272\":{\"h\":\"1.1.6异常的底层？\",\"a\":\"_1-1-6异常的底层\"},\"273\":{\"t\":\"提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。\"},\"274\":{\"t\":\"public static void simpleTryCatch() { try { testNPE(); } catch (Exception e) { e.printStackTrace(); } } \"},\"275\":{\"t\":\"使用javap来分析这段代码（需要先使用javac编译）：\"},\"276\":{\"t\":\"//javap -c Main public static void simpleTryCatch(); Code: 0: invokestatic #3 // Method testNPE:()V 3: goto 11 6: astore_0 7: aload_0 8: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 11: return Exception table: from to target type 0 3 6 Class java/lang/Exception \"},\"277\":{\"t\":\"看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。\"},\"278\":{\"t\":\"异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下\"},\"279\":{\"t\":\"from 可能发生异常的起始点\"},\"280\":{\"t\":\"to 可能发生异常的结束点\"},\"281\":{\"t\":\"target 上述from和to之前发生异常后的异常处理者的位置\"},\"282\":{\"t\":\"type 异常处理者处理的异常的类信息\"},\"283\":{\"h\":\"1.2反射\",\"a\":\"_1-2反射\"},\"284\":{\"h\":\"1.2.1什么是反射机制?\",\"a\":\"_1-2-1什么是反射机制\"},\"285\":{\"t\":\"JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制。\"},\"286\":{\"t\":\"直接new对象就叫正射。\"},\"287\":{\"t\":\"如下:\"},\"288\":{\"t\":\"Map<String, String> map = new HashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"289\":{\"t\":\"那反射是啥？我先不说反射是啥，概念啥的太虚幻我就不说了，把你绕蒙你这篇文章就白看了，直接举例吧\"},\"290\":{\"t\":\"接着看上面的正射，如果哪天你发现用LinkedHashMap效果更好，然后你修改代码：\"},\"291\":{\"t\":\"Map<String, String> map = new LinkedHashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"292\":{\"t\":\"改完了编译运行没有bug然而过了两天你发现用LinkedHashMap会有隐患，还是得改回去用HashMap，成年人的崩溃如此简单，但是聪明的你想到可以加个判断，根据传入的条件来决定用HashMap还是LinkedHashMap，于是：\"},\"293\":{\"t\":\"public Map<String, String> getMap(String param) { Map<String, String> map = null; if (param.equals(\\\"HashMap\\\")) { map = new HashMap<>(); } else if (param.equals(\\\"LinkedHashMap\\\")) { map = new LinkedHashMap<>(); } return map; } \"},\"294\":{\"t\":\"大功告成，这么难的逻辑都被你实现了，然后你得用TreeMap，你又要改代码。\"},\"295\":{\"t\":\"有没有一种办法可以让你不修改代码呢，这时候反射就派上用场了。\"},\"296\":{\"t\":\"概念：反射是Java的一种机制，让我们可以在运行时获取类的信息\"},\"297\":{\"t\":\"作用：通过反射，我们可以在程序运行时动态创建对象，还能获取到类的所有信息，比如它的属性、构造器、方法、注解等；\"},\"298\":{\"t\":\"直接举例吧：\"},\"299\":{\"t\":\"public Map<String, String> getMap(String className) { Class clazz = Class.forName(className); Constructor constructor = clazz.getConstructor(); return (Map<String, String>) constructor.newInstance(); } \"},\"300\":{\"t\":\"这时候不管你需要什么Map，只要实现了Map接口，你都能通过getMap获得，只需要传入对应Map的全限定名，例如java.util.HashMap / java.util.LinkedHashMap。\"},\"301\":{\"t\":\"java中反射的用法非常非常多，常见的有以下这几个：\"},\"302\":{\"t\":\"一、在运行时获取一个类的 Class 对象 二、在运行时构造一个类的实例化对象 三、在运行时获取一个类的所有信息：变量、方法、构造器、注解 \"},\"303\":{\"h\":\"1.2.2获取class对象\",\"a\":\"_1-2-2获取class对象\"},\"304\":{\"t\":\"三种方法 1、类名.class：这种获取方式只有在编译前已经声明了该类的类型才能获取到 Class 对象\"},\"305\":{\"t\":\"Class<HashMap> hashMap= HashMap.class; \"},\"306\":{\"t\":\"2、实例.getClass()：通过实例化对象获取该实例的 Class 对象\"},\"307\":{\"t\":\"Map<String, String> hashMap = new HashMap<>(); Class<? extends Map> hashMapClass = hashMap.getClass(); \"},\"308\":{\"t\":\"3、Class.forName(“类的全限定名”)：通过类的全限定名获取该类的 Class 对象\"},\"309\":{\"t\":\"Class<?> hashMap= Class.forName(\\\"java.util.HashMap\\\"); \"},\"310\":{\"t\":\"拿到 Class对象就可以对它为所欲为了：调用它的方法、获取属性、获取类信息，总之它在你面前就没有隐私了，好羞羞，嘤~。\"},\"311\":{\"h\":\"1.2.3构造类的实例化对象\",\"a\":\"_1-2-3构造类的实例化对象\"},\"312\":{\"t\":\"通过反射构造一个类的实例方式有2种： 1、Class 对象调用newInstance()方法\"},\"313\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); HashMap hashMapInstance = (HashMap) hashMapClass.newInstance(); \"},\"314\":{\"t\":\"注意：即使 HashMap已经显式定义了构造方法，通过 newInstance() 创建的实例中，所有属性值都是对应类型的初始值，因为 newInstance() 构造实例会调用默认无参构造器。\"},\"315\":{\"t\":\"2、Constructor 构造器调用newInstance()方法\"},\"316\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); Constructor<?> constructor = hashMapClass.getConstructor(); constructor.setAccessible(true); HashMap newInstance = (HashMap) constructor.newInstance(); \"},\"317\":{\"t\":\"通过 getConstructor(Object… paramTypes) 方法指定获取指定参数类型的 Constructor， Constructor 调用 newInstance(Object… paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。\"},\"318\":{\"t\":\"通过Class对象调用 newInstance() 会走默认无参构造方法，如果想通过显式构造方法构造实例，需要提前从Class中调用getConstructor()方法获取对应的构造器，通过构造器去实例化对象。\"},\"319\":{\"h\":\"1.2.4获取类的所有信息\",\"a\":\"_1-2-4获取类的所有信息\"},\"320\":{\"t\":\"1、获取类中的变量（Field）\"},\"321\":{\"t\":\"Field[] getFields()：获取类中所有被public修饰的所有变量 Field getField(Stringname)：根据变量名获取类中的一个变量，该变量必须被public修饰 Field[] getDeclaredFields()：获取类中所有的变量，但无法获取继承下来的变量 Field getDeclaredField(String name)：根据姓名获取类中的某个变量，无法获取继承下来的变量 \"},\"322\":{\"t\":\"2、获取类中的方法（Method）\"},\"323\":{\"t\":\"Method[] getMethods()：获取类中被public修饰的所有方法 Method getMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，该方法必须被public修饰 Method[] getDeclaredMethods()：获取所有方法，但无法获取继承下来的方法 Method getDeclaredMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，无法获取继承下来的方法 \"},\"324\":{\"t\":\"3、获取类的构造器（Constructor）\"},\"325\":{\"t\":\"Constuctor[] getConstructors()：获取类中所有被public修饰的构造器 Constructor getConstructor(Class…<?> paramTypes)：根据参数类型获取类中某个构造器，该构造器必须被public修饰 Constructor[] getDeclaredConstructors()：获取类中所有构造器 Constructor getDeclaredConstructor(class…<?> paramTypes)：根据参数类型获取对应的构造器 \"},\"326\":{\"t\":\"反射的应用场景\"},\"327\":{\"t\":\"1、Spring 实例化对象：当程序启动时，Spring 会读取配置文件applicationContext.xml并解析出里面所有的标签实例化到IOC容器中。 2、反射 + 工厂模式：通过反射消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，反射可以使得程序更加健壮。 3、JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的驱动类时用到反射加载驱动类 \"},\"328\":{\"t\":\"参考：https://blog.csdn.net/qq_33709582/article/details/113550163\"},\"329\":{\"h\":\"七、数据结构\"},\"330\":{\"h\":\"数组\",\"a\":\"数组\"},\"331\":{\"h\":\"链表\",\"a\":\"链表\"},\"332\":{\"h\":\"栈\",\"a\":\"栈\"},\"333\":{\"h\":\"Java官方推荐的实现方式：Deque\",\"a\":\"java官方推荐的实现方式-deque\"},\"334\":{\"t\":\"今日在刷LeetCode hot100的时候，看到K神题解下的一个评论：\"},\"335\":{\"t\":\"所以，我一个小白当然是去百度一下这个Deque为啥Java官方要推荐作为Stack的实现呢？\"},\"336\":{\"t\":\"话不多说，直接上菜！\"},\"337\":{\"h\":\"Q1：在 Java 语言中，不推荐使用 Stack 类？\",\"a\":\"q1-在-java-语言中-不推荐使用-stack-类\"},\"338\":{\"t\":\"是的。实际上，这个不推荐不是某个技术专家或者某个企业的规范标准，而是来自 Java 官方。\"},\"339\":{\"t\":\"如果大家在 Java 中查询 Stack 的文档，就会看到如下标为蓝色的说明：\"},\"340\":{\"t\":\"简单翻译：一个更加完整，一致的，后进先出的栈相关的操作，应该由 Deque 接口提供。并且，也推荐使用 Deque 这种数据结构（比如 ArrayDeque）来实现。\"},\"341\":{\"t\":\"因此，如果你想使用栈这种数据结构，Java 官方推荐的写法是这样的（假设容器中的类型是 Integer）：\"},\"342\":{\"t\":\"Deque<Integer> stack = new ArrayDeque<Integer>(); \"},\"343\":{\"h\":\"Q2：Java 中的 Stack 类到底怎么了？\",\"a\":\"q2-java-中的-stack-类到底怎么了\"},\"344\":{\"t\":\"Java 中的 Stack 类，最大的问题是，继承了 Vector 这个类。根据 Java 官方文档中的类关系，如下所示：\"},\"345\":{\"t\":\"Vector 是什么类？简单来说，Vector 就是一个动态数组。\"},\"346\":{\"t\":\"最大的问题在于，继承使得子类继承了父类的所有公有方法。\"},\"347\":{\"t\":\"而 Vector 作为动态数组，是有能力在数组中的任何位置添加或者删除元素的。因此，Stack 继承了 Vector，Stack 也有这样的能力！\"},\"348\":{\"t\":\"尝试如下的代码片段，在 Java 中是正确的：\"},\"349\":{\"t\":\"Stack<Integer> stack = new Stack<>(); stack.push(1); stack.push(2); stack.add(1, 666); \"},\"350\":{\"h\":\"Q3：问题出在哪里？\",\"a\":\"q3-问题出在哪里\"},\"351\":{\"t\":\"Java 中的 Stack 实现，是被业界一直认为非常糟糕的实现。实际上，它犯了面向对象设计领域的一个基本错误：Stack 和 Vector 之间的关系，不应该是继承关系，而应该是组合关系（composition）。\"},\"352\":{\"t\":\"关于继承关系和组合关系的区别，相信大家在 OOD 学习过程中，听过无数遍。\"},\"353\":{\"t\":\"继承关系描述的是 is-a 的关系，即“是一个”的关系。\"},\"354\":{\"t\":\"猫是一个动物，所以猫这个类可以继承动物类；\"},\"355\":{\"t\":\"程序员是一个雇员，所以程序员这个类可以继承雇员类。\"},\"356\":{\"t\":\"而组合关系描述的是 has-a 的关系，即“有一个”的关系。\"},\"357\":{\"t\":\"车里有一台发动机，所以发动机这个类和车这个类之间，应该是组合关系，即车中包含一个成员变量，是发动机这个类的对象；\"},\"358\":{\"t\":\"电脑里有 CPU，内存，显卡。所以 CPU，内存，显卡，这些类和电脑类之间的关系，都应该是组合关系。\"},\"359\":{\"t\":\"上面这些例子，都是我们在生活中看得到摸得到的实体，我们在做类设计的时候，通常不会犯糊涂。但遇到更抽象的对象的时候，事情可能就不一样了。\"},\"360\":{\"t\":\"比如，栈这种数据结构，和动态数组这种数据结构之间，到底应该是 is-a 的关系？还是 has-a 的关系？\"},\"361\":{\"t\":\"使用自然语言描述，听起来似乎说：栈是一个动态数组，毛病不大。但其实仔细思考，就会发现，栈不是一个动态数组！\"},\"362\":{\"t\":\"因此，很多时候，对于现实中并不存在的设计对象，人类很可能想不清楚 is-a 和 has-a 的关系。在这里，我再提供一个简单的原则：判断一下，如果设计成继承关系的话，我们是否有可能把子类进行向上的父类转型？如果可能，则应该设计成继承关系，否则应该是组合关系。\"},\"363\":{\"t\":\"换句话说，在这个例子中，我们是否可能将栈当做一个动态数组使用？答案是不可能。所以，栈和动态数组之间的关系不应该是继承关系。\"},\"364\":{\"t\":\"实际上，在真实的世界中，真正的继承关系是很少的。真正的继承关系中，父类大多是一个很抽象的概念，比如“人”，比如“动物”。但是我们设计的大多数类，不是这么抽象的概念。整体来说，组成关系更常用。\"},\"365\":{\"t\":\"这个概念不是我说的，而是业界公认的 OOP 设计原则。叫做：Composition over inheritance。如果用中文说，就是应该优先考虑组合关系。\"},\"366\":{\"t\":\"在 OOP 设计中，很多人会更倾向于使用继承关系，毕竟继承关系看起来更“面向对象”一些，也是面向对象讲解的重点。但是，在具体实践中，组合更常见！说得再绝对一些：多用组合，少用继承！\"},\"367\":{\"h\":\"Q4：Java 官方不知道这个 Stack 类的实现不好吗？为什么不改？\",\"a\":\"q4-java-官方不知道这个-stack-类的实现不好吗-为什么不改\"},\"368\":{\"t\":\"Java 官方当然知道这个实现不好。但是，因为要保持兼容性（backward compatibility），对于已经正式发布的代码，Java 官方不能做接口设计层面的修改。否则，使用老版本 Java 的程序，将在新的 Java 环境下无法执行，这是 Java 官方不愿意看到的。\"},\"369\":{\"t\":\"Java 官方可以做到的是，将这个类标志成“弃用”（deprecated），以让新版本的开发者不再允许使用这个类，但老版本的程序，还能继续执行。\"},\"370\":{\"t\":\"但是，这么多年了，Java 官方也并没有将 Stack 标为“弃用”，只是在文档上注明“不建议使用”。\"},\"371\":{\"h\":\"Q5：为什么使用接口？\",\"a\":\"q5-为什么使用接口\"},\"372\":{\"t\":\"下面，我们再来看一下 Java 官方推荐的写法：使用 Deque 接口：\"},\"373\":{\"t\":\"Deque<Integer> stack = new ArrayDeque<Integer>(); \"},\"374\":{\"t\":\"接口最大的意义之一，就是做了更高层次的抽象：只定义了一个类应该满足哪些方法，而对具体的实现方式不做限制。\"},\"375\":{\"t\":\"比如，我们都知道，在 Java 语言中，Queue 就是一个接口。我们想实现一个队列，可以这么写：\"},\"376\":{\"t\":\" Queue<Integer> q1 = new ArrayDeque<>(); Queue<Integer> q2 = new LinkedList<>(); \"},\"377\":{\"t\":\"在上述实现中，q1 和 q2 的底层具体实现不同，一个是 LinkedList，一个是 ArrayDeque。但是，从用户的角度看，q1 和 q2 是一致的：都是一个队列，只能执行队列规定的方法。\"},\"378\":{\"t\":\"这样做，将“队列”这样一个概念，和底层数据结构的具体实现——LinkedList 或者 ArrayDeque 解耦了：\"},\"379\":{\"t\":\"底层开发人员可以随意维护自己的 LinkedList 类或者 ArrayDeque 类，只要他们满足 Queue 接口规定的规范；\"},\"380\":{\"t\":\"开发者可以选择合适的数据结构来定义 Queue；\"},\"381\":{\"t\":\"而 Queue 的更上层使用者，无需知道 q1 或者 q2 的实现细节，从他们的角度看，只要能调用 Queue 的相关方法：peek, poll, offer 等等，来满足上层的业务需求，就好了。\"},\"382\":{\"t\":\"而且这样做，完美解决了之前说的，继承关系把父类的所有方法都拿过来的问题。接口的设计相当于做了访问限制。LinkedList 中有很多方法，但是，当我们使用 LinkedList 实现 Queue 接口的时候，用户只能调用 Queue 中定义的方法。\"},\"383\":{\"t\":\"从这个角度，我们也能看出 Stack 设计的另一个不合理之处：Stack 和 Queue 同样作为一种特殊的线性数据结构，都应该只是规定一系列操作的接口而已，具体的底层实现，由开发者再做选择。\"},\"384\":{\"t\":\"但因为 Stack 做成了一个类，继承了 Vector，也就只能基于 Vector 这一种固定的数据结构了。\"},\"385\":{\"t\":\"为了修正这个问题，Java 官方推出了 Deque 接口，作为实现栈的接口。\"},\"386\":{\"h\":\"Q6：什么是 Deque 接口？\",\"a\":\"q6-什么是-deque-接口\"},\"387\":{\"t\":\"Deque 是双端队列的意思。所谓的双端队列，就是能在线性数据结构的两段，进行插入和删除操作。\"},\"388\":{\"t\":\"大家可以想象，由于 Stack 的定义是在同一端进，同一端出。所以，如果 Deque 可以满足在两段进行插入和删除，自然也能在同一端进行插入和删除，也就是可以以此为基础，做成一个 Stack。\"},\"389\":{\"h\":\"Q7：等等！这里有问题！\",\"a\":\"q7-等等-这里有问题\"},\"390\":{\"t\":\"很多同学应该能马上反应过来了。这里有问题！\"},\"391\":{\"t\":\"因为我们根据 Java 官方推荐的方法声明的这个 Stack，虽然变量名称是Stack，但它实际上是一个 Deque。这就意味着，这个Stack，可以在两段做插入和删除操作！但是，真正的栈，只能在同一端做插入和删除操作！\"},\"392\":{\"t\":\"这难道不是重蹈了 Stack 这个类的覆辙？毕竟，我们最开始分析，就说 Stack 这个类的一大问题，是继承了 Vector 这个类的若干我们不需要的方法，破坏了封装性，比如在任何一个位置插入一个元素。现在这个基于 Deque 接口的Stack，依然有我们不需要的方法啊！\"},\"393\":{\"t\":\"没错！这就是 Java 的历史遗留问题了。这个问题至此已经无解了。因为 Stack 这个关键字被占据了。Java 官方不想推出一个叫做 RealStack 或者 CorrectStack 一类的接口名称。所以，按照 Java 官方的推荐所建立的这个Stack，依然不完美。\"},\"394\":{\"t\":\"但至今为止，Java 暂时只是做到这个份儿上。\"},\"395\":{\"t\":\"或许，Oracle 少打一些官司，多研究一下如何处理这些历史遗留问题，Java 能更好吧。\"},\"396\":{\"t\":\"所以，在实际的工程应用上，有人也并不建议使用 Deque 做为 Stack 的实现，而是自己再做一层封装。\"},\"397\":{\"t\":\"比如，大家可以看一下这篇探讨 Stack 和 Deque 的文章：http://baddotrobot.com/blog/2013/01/10/stack-vs-deque/。\"},\"398\":{\"h\":\"Q8：链表呢？\",\"a\":\"q8-链表呢\"},\"399\":{\"t\":\"再说一个小问题。\"},\"400\":{\"t\":\"大家可以看到，Java 官方推荐的创建栈的方式，使用了 Deque 接口。并且，在底层实现上，使用了 ArrayDeque，也就是基于动态数组的实现。为什么？\"},\"401\":{\"t\":\"大家应该都知道，动态数组是可以进行扩容操作的。在触发扩容的时候，时间复杂度是 O(n) 的，但整体平均时间复杂度（Amortized Time）是 O(1)。\"},\"402\":{\"t\":\"但是，基于链表的实现，不会牵扯到扩容问题，因此，每一次添加操作，从时间复杂度的角度，都是 O(1) 的。\"},\"403\":{\"t\":\"虽然如此，可是实际上，当数据量达到一定程度的时候，链表的性能是远远低于动态数组的。\"},\"404\":{\"t\":\"这是因为，对于链表来说，每添加一个元素，都需要重新创建一个 Node 类的对象，也就是都需要进行一次 new 的内存操作。而对内存的操作，是非常慢的。\"},\"405\":{\"t\":\"举个例子，对于队列，测试它们的性能。代码如下：\"},\"406\":{\"t\":\" Queue<Integer> q1 = new ArrayDeque<>(); Queue<Integer> q2 = new LinkedList<>(); int N = 10000000; long start1 = System.currentTimeMillis(); for (int i = 0; i < N; i++) { q1.offer(1); } long end1 = System.currentTimeMillis(); long start2 = System.currentTimeMillis(); for (int i = 0; i < N; i++) { q2.offer(i); } long end2 = System.currentTimeMillis(); System.out.println(end1 - start1 + \\\"ms\\\"); System.out.println(end2 - start2 + \\\"ms\\\"); \"},\"407\":{\"t\":\"最终的结果：\"},\"408\":{\"t\":\"76ms 4163ms \"},\"409\":{\"t\":\"也就是使用 LinkedList，会比使用 ArrayDeque 慢 5 倍以上！\"},\"410\":{\"t\":\"因此，甚至有人建议：在实践中，尤其是面对大规模数据的时候，不应该使用链表！\"},\"411\":{\"t\":\"最后，关于在面试中，如果有同学需要使用“栈”这种数据结构，选择 Stack 这个类，面试官会怎么看？我参考了网上的其博主的文章写的@lk 同学的看法：\"},\"412\":{\"t\":\"参考：https://blog.csdn.net/Dlgdlgd/article/details/125768706\"},\"413\":{\"h\":\"队列\",\"a\":\"队列\"},\"414\":{\"h\":\"二叉树\",\"a\":\"二叉树\"},\"415\":{\"h\":\"红黑树\",\"a\":\"红黑树\"},\"416\":{\"h\":\"1.简介\",\"a\":\"_1-简介\"},\"417\":{\"t\":\"红黑树是一种自平衡的二叉查找树，是一种高效的查找树。红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作。\"},\"418\":{\"h\":\"2.为什么需要红黑树？\",\"a\":\"_2-为什么需要红黑树\"},\"419\":{\"t\":\"对于二叉搜索树，如果插入的数据是随机的，那么它就是接近平衡的二叉树，平衡的二叉树，它的操作效率（查询，插入，删除）效率较高，时间复杂度是O（logN）。但是可能会出现一种极端的情况，那就是插入的数据是有序的（递增或者递减），那么所有的节点都会在根节点的右侧或左侧，此时，二叉搜索树就变为了一个链表，它的操作效率就降低了，时间复杂度为O(N)，所以可以认为二叉搜索树的时间复杂度介于O（logN）和O(N)之间，视情况而定。那么为了应对这种极端情况，红黑树就出现了，它是具备了某些特性的二叉搜索树，能解决非平衡树问题，红黑树是一种接近平衡的二叉树（说它是接近平衡因为它并没有像AVL树的平衡因子的概念，它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构，进而提升整体的性能，并没有严格的卡定某个平衡因子来维持绝对平衡）。\"},\"420\":{\"h\":\"3.红黑树的特性\",\"a\":\"_3-红黑树的特性\"},\"421\":{\"t\":\"首先，红黑树是一个二叉搜索树，它在每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK；通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡（最短路径就是全黑节点，最长路径就是一个红节点一个黑节点，当从根节点到叶子节点的路径上黑色节点相同时，最长路径刚好是最短路径的两倍）。它同时满足以下特性：\"},\"422\":{\"t\":\"节点是红色或黑色\"},\"423\":{\"t\":\"根是黑色\"},\"424\":{\"t\":\"叶子节点（外部节点，空节点）都是**黑色，**这里的叶子节点指的是最底层的空节点（外部节点），下图中的那些null节点才是叶子节点，null节点的父节点在红黑树里不将其看作叶子节点\"},\"425\":{\"t\":\"红色节点的子节点都是黑色；\"},\"426\":{\"t\":\"红色节点的父节点都是黑色；\"},\"427\":{\"t\":\"从根节点到叶子节点的所有路径上不能有 2 个连续的红色节点\"},\"428\":{\"t\":\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\"},\"429\":{\"t\":\"img\"},\"430\":{\"h\":\"4.红黑树的效率\",\"a\":\"_4-红黑树的效率\"},\"431\":{\"t\":\"红黑树的查找，插入和删除操作，时间复杂度都是O(logN)。\"},\"432\":{\"t\":\"查找操作时，它和普通的相对平衡的二叉搜索树的效率相同，都是通过相同的方式来查找的，没有用到红黑树特有的特性。\"},\"433\":{\"t\":\"但如果插入的时候是有序数据，那么红黑树的查询效率就比二叉搜索树要高了，因为此时二叉搜索树不是平衡树，它的时间复杂度O(N)。\"},\"434\":{\"t\":\"插入和删除操作时，由于红黑树的每次操作平均要旋转一次和变换颜色，所以它比普通的二叉搜索树效率要低一点，不过时间复杂度仍然是O(logN)。总之，红黑树的优点就是对有序数据的查询操作不会慢到O(N)的时间复杂度。\"},\"435\":{\"t\":\"红黑树和AVL树的比较：\"},\"436\":{\"t\":\"AVL树的时间复杂度虽然优于红黑树，但是对于现在的计算机，cpu太快，可以忽略性能差异\"},\"437\":{\"t\":\"红黑树的插入删除比AVL树更便于控制操作\"},\"438\":{\"t\":\"红黑树整体性能略优于AVL树（红黑树旋转情况少于AVL树）\"},\"439\":{\"h\":\"哈希表结构\",\"a\":\"哈希表结构\"},\"440\":{\"h\":\"三、Set\"},\"441\":{\"h\":\"1.HashSet\",\"a\":\"_1-hashset\"},\"442\":{\"t\":\"HashSet实现了Set接口，内部实现利用了HashMap，有如下特点：\"},\"443\":{\"t\":\"1）没有重复元素； 2）可以高效地添加、删除元素、判断元素是否存在，效率都为O(1)； 3）没有顺序。 \"},\"444\":{\"t\":\"HashSet可以方便高效地实现去重、集合运算等功能。如果要保持添加的顺序，可以使用HashSet的一个子类LinkedHashSet。Set还有一个重要的实现类TreeSet，它可以排序。\"},\"445\":{\"h\":\"2.TreeSet\",\"a\":\"_2-treeset\"},\"446\":{\"t\":\"TreeSet实现了Set接口，但有序。在内部实现上，它基于TreeMap实现，而TreeMap基于大致平衡的排序二叉树：红黑树，这决定了它有如下特点。\"},\"447\":{\"t\":\"1）没有重复元素。 2）添加、删除元素、判断元素是否存在，效率比较高，为O(log2(N)), N为元素个数。 3）有序，TreeSet同样实现了SortedSet和NavigatableSet接口，可以方便地根据顺序进行查找和操作，如第一个、最后一个、某一取值范围、某一值的邻近元素等。 4）为了有序，TreeSet要求元素实现Comparable接口或通过构造方法提供一个Com-parator对象。 \"},\"448\":{\"h\":\"3.LinkedHashSet\",\"a\":\"_3-linkedhashset\"},\"449\":{\"t\":\"之前介绍的Map接口的实现类都有一个对应的Set接口的实现类，比如HashMap有HashSet,TreeMap有TreeSet, LinkedHashMap也不例外，它也有一个对应的Set接口的实现类LinkedHashSet。LinkedHashSet是HashSet的子类，它内部的Map的实现类是LinkedHashMap，所以它也可以保持插入顺序。\"},\"450\":{\"h\":\"4.Set和List区别？\",\"a\":\"_4-set和list区别\"},\"451\":{\"t\":\"List,Set都是继承自Collection接口。都是用来存储一组相同类型的元素的。\"},\"452\":{\"t\":\"List特点：元素有放入顺序，元素可重复 。\"},\"453\":{\"t\":\"有顺序，即先放入的元素排在前面。\"},\"454\":{\"t\":\"Set特点：元素无放入顺序，元素不可重复。\"},\"455\":{\"t\":\"无顺序，即先放入的元素不一定排在前面。 不可重复，即相同元素在set中只会保留一份。所以，有些场景下，set可以用来去重。 不过需要注意的是，set在元素插入时是要有一定的方法来判断元素是否重复的。这个方法很重要，决定了set中可以保存哪些元素。\"},\"456\":{\"h\":\"5.Set如何保证元素不重复?\",\"a\":\"_5-set如何保证元素不重复\"},\"457\":{\"t\":\"在Java的Set体系中，根据实现方式不同主要分为两大类。HashSet和TreeSet。\"},\"458\":{\"t\":\"1、TreeSet 是二叉树实现的，TreeSet中的数据是自动排好序的，不允许放入 null值\"},\"459\":{\"t\":\"2、HashSet 是哈希表实现的，HashSet中的数据是无序的，可以放入 null值，但只能放入一个null，两者中的值都不能重复，就如数据库中的唯一约束\"},\"460\":{\"t\":\"在HashSet中，基本的操作都是由HashMap底层实现的，因为HashSet底层是用HashMap存储数据的。当向HashSet中添加元素的时候，首先计算元素的hashCode值，然后通过扰动计算和按位与的方式计算出这个元素的存储位置，如果这个位置为空，就将元素添加进去；如果不为空，则用equals方法比较元素是否相等，相等就不添加，否则找一个空位添加。\"},\"461\":{\"t\":\"TreeSet的底层是TreeMap的keySet()，而TreeMap是基于红黑树实现的，红黑树是一种平衡二叉查找树，它能保证任何一个节点的左右子树的高度差不会超过较矮的那棵的一倍。\"},\"462\":{\"t\":\"TreeMap是按key排序的，元素在插入TreeSet时compareTo()方法要被调用，所以TreeSet中的元素要实现Comparable接口。TreeSet作为一种Set，它不允许出现重复元素。TreeSet是用compareTo()来判断重复元素的。\"},\"463\":{\"h\":\"二、List\"},\"464\":{\"t\":\"相关信息\"},\"465\":{\"t\":\"Collection 是一个集合接口。 它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。是list，set等的父接口。\"},\"466\":{\"t\":\"相关信息\"},\"467\":{\"t\":\"Collections 是一个包装类。 它包含有各种有关集合操作的静态多态方法。此类不能实例化，就像一个工具类，服务于Java的Collection框架。\"},\"468\":{\"h\":\"1.ArrayList\",\"a\":\"_1-arraylist\"},\"469\":{\"t\":\"对于ArrayList，它的特点是内部采用动态数组实现，这决定了以下几点。\"},\"470\":{\"t\":\"可以随机访问，按照索引位置进行访问效率很高，用算法描述中的术语，效率是O(1)，简单说就是可以一步到位。\"},\"471\":{\"t\":\"除非数组已排序，否则按照内容查找元素效率比较低，具体是O(N), N为数组内容长度，也就是说，性能与数组长度成正比。\"},\"472\":{\"t\":\"添加元素的效率还可以，重新分配和复制数组的开销被平摊了，具体来说，添加N个元素的效率为O(N)。\"},\"473\":{\"t\":\"插入和删除元素的效率比较低，因为需要移动元素，具体为O(N)。\"},\"474\":{\"h\":\"2.LinkedList\",\"a\":\"_2-linkedlist\"},\"475\":{\"t\":\"用法上，LinkedList是一个List，但也实现了Deque接口，可以作为队列、栈和双端队列使用。实现原理上，LinkedList内部是一个双向链表，并维护了长度、头节点和尾节点，这决定了它有如下特点。\"},\"476\":{\"t\":\"按需分配空间，不需要预先分配很多空间。\"},\"477\":{\"t\":\"不可以随机访问，按照索引位置访问效率比较低，必须从头或尾顺着链接找，效率为O(N/2)。\"},\"478\":{\"t\":\"不管列表是否已排序，只要是按照内容查找元素，效率都比较低，必须逐个比较，效率为O(N)。\"},\"479\":{\"t\":\"在两端添加、删除元素的效率很高，为O(1)。\"},\"480\":{\"t\":\"在中间插入、删除元素，要先定位，效率比较低，为O(N)，但修改本身的效率很高，效率为O(1)。\"},\"481\":{\"t\":\"理解了LinkedList和ArrayList的特点，就能比较容易地进行选择了：\"},\"482\":{\"t\":\"如果列表长度未知，添加、删除操作比较多，尤其经常从两端进行操作，而按照索引位置访问相对比较少，则LinkedList是比较理想的选择。\"},\"483\":{\"h\":\"3.ArrayDeque\",\"a\":\"_3-arraydeque\"},\"484\":{\"t\":\"ArrayDeque实现了双端队列，内部使用循环数组实现，这决定了它有如下特点。\"},\"485\":{\"t\":\"在两端添加、删除元素的效率很高，动态扩展需要的内存分配以及数组复制开销可以被平摊，具体来说，添加N个元素的效率为O(N)。\"},\"486\":{\"t\":\"根据元素内容查找和删除的效率比较低，为O(N)。\"},\"487\":{\"t\":\"与ArrayList和LinkedList不同，没有索引位置的概念，不能根据索引位置进行操作。\"},\"488\":{\"t\":\"ArrayDeque和LinkedList都实现了Deque接口，应该用哪一个呢？（详见：https://www.youngxy.top/page/Java-SE/3.数据结构.html#java官方推荐的实现方式-deque）\"},\"489\":{\"t\":\"如果只需要Deque接口，从两端进行操作，一般而言，ArrayDeque效率更高一些，应该被优先使用；如果同时需要根据索引位置进行操作，或者经常需要在中间进行插入和删除，则应该选LinkedList。\"},\"490\":{\"h\":\"4.PriorityQueue\",\"a\":\"_4-priorityqueue\"},\"491\":{\"t\":\"PriorityQueue实现了队列接口Queue，但按优先级出队，内部是用堆实现的，有如下特点：\"},\"492\":{\"t\":\"实现了优先级队列，最先出队的总是优先级最高的，即排序中的第一个。\"},\"493\":{\"t\":\"优先级可以有相同的，内部元素不是完全有序的，如果遍历输出，除了第一个，其他没有特定顺序。\"},\"494\":{\"t\":\"查看头部元素的效率很高，为O(1)，入队、出队效率比较高，为O(log2(N))，构建堆heapify的效率为O(N)。\"},\"495\":{\"t\":\"根据值查找和删除元素的效率比较低，为O(N)。\"},\"496\":{\"h\":\"五、List常见面试题\"},\"497\":{\"h\":\"1.ArrayList和LinkedList和Vector的区别\",\"a\":\"_1-arraylist和linkedlist和vector的区别\"},\"498\":{\"t\":\"List主要有ArrayList、LinkedList与Vector几种实现。\"},\"499\":{\"t\":\"这三者都实现了List 接口，使用方式也很相似,主要区别在于因为实现方式的不同,所以对不同的操作具有不同的效率。\"},\"500\":{\"t\":\"ArrayList 是一个可改变大小的数组.当更多的元素加入到ArrayList中时,其大小将会动态地增长.内部的元素可以直接通过get与set方法进行访问,因为ArrayList本质上就是一个数组。\"},\"501\":{\"t\":\"LinkedList 是一个双链表,在添加和删除元素时具有比ArrayList更好的性能.但在get与set方面弱于ArrayList。\"},\"502\":{\"t\":\"当然,这些对比都是指数据量很大或者操作很频繁的情况下的对比,如果数据和运算量很小,那么对比将失去意义。\"},\"503\":{\"t\":\"Vector 和ArrayList类似,但属于强同步类。如果你的程序本身是线程安全的(thread-safe,没有在多个线程之间共享同一个集合/对象),那么使用ArrayList是更好的选择。\"},\"504\":{\"t\":\"Vector和ArrayList在更多元素添加进来时会请求更大的空间。Vector每次请求其大小的双倍空间，而ArrayList每次对size增长50%。\"},\"505\":{\"t\":\"而 LinkedList 还实现了 Queue 接口,该接口比List提供了更多的方法,包括 offer(),peek(),poll()等。\"},\"506\":{\"t\":\"注意: 默认情况下ArrayList的初始容量非常小,所以如果可以预估数据量的话,分配一个较大的初始值属于最佳实践,这样可以减少调整大小的开销。\"},\"507\":{\"h\":\"2.ArrayList使用了transient关键字进行存储优化，而Vector没有，为什么？\",\"a\":\"_2-arraylist使用了transient关键字进行存储优化-而vector没有-为什么\"},\"508\":{\"t\":\"话不多说，上源码：\"},\"509\":{\"t\":\"ArrayList：\"},\"510\":{\"t\":\"/** * Save the state of the <tt>ArrayList</tt> instance to a stream (that * is, serialize it). * * @serialData The length of the array backing the <tt>ArrayList</tt> * instance is emitted (int), followed by all of its elements * (each an <tt>Object</tt>) in the proper order. */ private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException{ // Write out element count, and any hidden stuff int expectedModCount = modCount; s.defaultWriteObject(); // Write out array length s.writeInt(elementData.length); // Write out all elements in the proper order. for (int i=0; i<size; i++) s.writeObject(elementData[i]); if (modCount != expectedModCount) { throw new ConcurrentModificationException(); } } \"},\"511\":{\"t\":\"ArrayList实现了writeObject方法，可以看到只保存了非null的数组位置上的数据。即list的size个数的elementData。需要额外注意的一点是，ArrayList的实现，提供了fast-fail机制，可以提供弱一致性。\"},\"512\":{\"t\":\"Vector：\"},\"513\":{\"t\":\"/** * Save the state of the {@code Vector} instance to a stream (that * is, serialize it). * This method performs synchronization to ensure the consistency * of the serialized data. */ private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException { final java.io.ObjectOutputStream.PutField fields = s.putFields(); final Object[] data; synchronized (this) { fields.put(\\\"capacityIncrement\\\", capacityIncrement); fields.put(\\\"elementCount\\\", elementCount); data = elementData.clone(); } fields.put(\\\"elementData\\\", data); s.writeFields(); } \"},\"514\":{\"t\":\"Vector也实现了writeObject方法，但方法并没有像ArrayList一样进行优化存储，实现语句是\"},\"515\":{\"t\":\"data = elementData.clone(); \"},\"516\":{\"t\":\"clone()的时候会把null值也拷贝。所以保存相同内容的Vector与ArrayList，Vector的占用的字节比ArrayList要多。\"},\"517\":{\"t\":\"可以测试一下，序列化存储相同内容的Vector与ArrayList，分别到一个文本文件中去。 Vector需要243字节， ArrayList需要135字节。\"},\"518\":{\"t\":\"分析：\"},\"519\":{\"t\":\"ArrayList是非同步实现的一个单线程下较为高效的数据结构（相比Vector来说）。 ArrayList只通过一个修改记录字段提供弱一致性，主要用在迭代器里。没有同步方法。 即上面提到的Fast-fail机制.ArrayList的存储结构定义为transient，重写writeObject来实现自定义的序列化，优化了存储。\"},\"520\":{\"t\":\"Vector是多线程环境下更为可靠的数据结构，所有方法都实现了同步。\"},\"521\":{\"t\":\"区别：\"},\"522\":{\"t\":\"相关信息\"},\"523\":{\"t\":\"同步处理：Vector同步，ArrayList非同步 。\"},\"524\":{\"t\":\"Vector缺省情况下增长原来一倍的数组长度，ArrayList是0.5倍。ArrayList: int newCapacity = oldCapacity + (oldCapacity >> 1); ArrayList自动扩大容量为原来的1.5倍（实现的时候，方法会传入一个期望的最小容量，若扩容后容量仍然小于最小容量，那么容量就为传入的最小容量。扩容的时候使用的Arrays.copyOf方法最终调用native方法进行新数组创建和数据拷贝）。\"},\"525\":{\"t\":\"Vector: int newCapacity = oldCapacity + ((capacityIncrement > 0) ? capacityIncrement : oldCapacity);Vector指定了initialCapacity，capacityIncrement来初始化的时候，每次增长capacityIncrement。\"},\"526\":{\"h\":\"3.SynchronizedList和Vector的区别\",\"a\":\"_3-synchronizedlist和vector的区别\"},\"527\":{\"t\":\"Vector是java.util包中的一个类。 SynchronizedList是java.util.Collections中的一个静态内部类。\"},\"528\":{\"t\":\"在多线程的场景中可以直接使用Vector类，也可以使用Collections.synchronizedList(List list)方法来返回一个线程安全的List。\"},\"529\":{\"t\":\"那么，到底SynchronizedList和Vector有没有区别，为什么java api要提供这两种线程安全的List的实现方式呢？\"},\"530\":{\"t\":\"首先，我们知道Vector和Arraylist都是List的子类，他们底层的实现都是一样的。所以这里比较如下两个list1和list2的区别：\"},\"531\":{\"t\":\"List<String> list = new ArrayList<String>(); List list2 = Collections.synchronizedList(list); Vector<String> list1 = new Vector<String>(); \"},\"532\":{\"h\":\"3.1比较几个重要的方法。\",\"a\":\"_3-1比较几个重要的方法。\"},\"533\":{\"h\":\"3.1.1add方法：\",\"a\":\"_3-1-1add方法\"},\"534\":{\"t\":\"Vector的实现：\"},\"535\":{\"t\":\"public void add(int index, E element) { insertElementAt(element, index); } public synchronized void insertElementAt(E obj, int index) { modCount++; if (index > elementCount) { throw new ArrayIndexOutOfBoundsException(index + \\\" > \\\" + elementCount); } ensureCapacityHelper(elementCount + 1); System.arraycopy(elementData, index, elementData, index + 1, elementCount - index); elementData[index] = obj; elementCount++; } private void ensureCapacityHelper(int minCapacity) { // overflow-conscious code if (minCapacity - elementData.length > 0) grow(minCapacity); } \"},\"536\":{\"t\":\"synchronizedList的实现：\"},\"537\":{\"t\":\"public void add(int index, E element) { synchronized (mutex) { list.add(index, element); } } \"},\"538\":{\"t\":\"这里，使用同步代码块的方式调用ArrayList的add()方法。ArrayList的add方法内容如下：\"},\"539\":{\"t\":\"public void add(int index, E element) { rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; } private void rangeCheckForAdd(int index) { if (index > size || index < 0) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } private void ensureCapacityInternal(int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); } ensureExplicitCapacity(minCapacity); } \"},\"540\":{\"t\":\"从上面两段代码中发现有两处不同：\"},\"541\":{\"t\":\"1.Vector使用同步方法实现，synchronizedList使用同步代码块实现。\"},\"542\":{\"t\":\"2.两者的扩充数组容量方式不一样（两者的add方法在扩容方面的差别也就是ArrayList和Vector的差别。）\"},\"543\":{\"h\":\"3.1.2remove方法\",\"a\":\"_3-1-2remove方法\"},\"544\":{\"t\":\"synchronizedList的实现：\"},\"545\":{\"t\":\"public E remove(int index) { synchronized (mutex) {return list.remove(index);} } \"},\"546\":{\"t\":\"ArrayList类的remove方法内容如下：\"},\"547\":{\"t\":\"public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; } \"},\"548\":{\"t\":\"Vector的实现：\"},\"549\":{\"t\":\"public synchronized E remove(int index) { modCount++; if (index >= elementCount) throw new ArrayIndexOutOfBoundsException(index); E oldValue = elementData(index); int numMoved = elementCount - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--elementCount] = null; // Let gc do its work return oldValue; } \"},\"550\":{\"t\":\"从remove方法中我们发现除了一个使用同步方法，一个使用同步代码块之外几乎无任何区别。\"},\"551\":{\"t\":\"相关信息\"},\"552\":{\"t\":\"通过比较其他方法，我们发现，SynchronizedList里面实现的方法几乎都是使用同步代码块包上List的方法。如果该List是ArrayList那么，SynchronizedList和Vector的一个比较明显区别就是一个使用了同步代码块，一个使用了同步方法。\"},\"553\":{\"h\":\"3.2区别分析\",\"a\":\"_3-2区别分析\"},\"554\":{\"t\":\"数据增长区别\"},\"555\":{\"t\":\"相关信息\"},\"556\":{\"t\":\"从内部实现机制来讲ArrayList和Vector都是使用数组(Array)来控制集合中的对象。当你向这两种类型中增加元素的时候，如果元素的数目超出了内部数组目前的长度它们都需要扩展内部数组的长度，Vector缺省情况下自动增长原来一倍的数组长度，ArrayList是原来的50%,所以最后你获得的这个集合所占的空间总是比你实际需要的要大。所以如果你要在集合中保存大量的数据那么使用Vector有一些优势，因为你可以通过设置集合的初始化大小来避免不必要的资源开销。\"},\"557\":{\"t\":\"同步代码块和同步方法的区别\"},\"558\":{\"t\":\"相关信息\"},\"559\":{\"t\":\"同步代码块在锁定的范围上可能比同步方法要小，一般来说锁的范围大小和性能是成反比的。\"},\"560\":{\"t\":\"同步块可以更加精确的控制锁的作用域（锁的作用域就是从锁被获取到其被释放的时间），同步方法的锁的作用域就是整个方法。\"},\"561\":{\"t\":\"同步代码块可以选择对哪个对象加锁，但是静态方法只能给this对象加锁。\"},\"562\":{\"t\":\"因为SynchronizedList只是使用同步代码块包裹了ArrayList的方法，而ArrayList和Vector中同名方法的方法体内容并无太大差异，所以在锁定范围和锁的作用域上两者并无区别。\"},\"563\":{\"t\":\"在锁定的对象区别上，SynchronizedList的同步代码块锁定的是mutex对象，Vector锁定的是this对象。\"},\"564\":{\"t\":\"那么mutex对象又是什么呢？ 其实SynchronizedList有一个构造函数可以传入一个Object,如果在调用的时候显示的传入一个对象，那么锁定的就是用户传入的对象。如果没有指定，那么锁定的也是this对象。\"},\"565\":{\"t\":\"但是，凡事都有但是。 SynchronizedList中实现的类并没有都使用synchronized同步代码块。其中有listIterator和**listIterator(int index)**并没有做同步处理。但是Vector却对该方法加了方法锁。 所以说，在使用SynchronizedList进行遍历的时候要手动加锁。\"},\"566\":{\"t\":\"但是，但是之后还有但是。\"},\"567\":{\"t\":\"之前的比较都是基于我们将ArrayList转成SynchronizedList。那么如果我们想把LinkedList变成线程安全的，或者说我想要方便在中间插入和删除的同步的链表，那么我可以将已有的LinkedList直接转成 SynchronizedList，而不用改变他的底层数据结构。而这一点是Vector无法做到的，因为他的底层结构就是使用数组实现的，这个是无法更改的。\"},\"568\":{\"t\":\"所以，最后，SynchronizedList和Vector最主要的区别：\"},\"569\":{\"t\":\"SynchronizedList有很好的扩展和兼容功能。他可以将所有的List的子类转成线程安全的类。\"},\"570\":{\"t\":\"使用SynchronizedList的时候，进行遍历时要手动进行同步处理。\"},\"571\":{\"t\":\"SynchronizedList可以指定锁定的对象。\"},\"572\":{\"h\":\"八、常见的设计模式\"},\"573\":{\"h\":\"4.1软件设计原则有哪些？\",\"a\":\"_4-1软件设计原则有哪些\"},\"574\":{\"h\":\"4.2什么是设计模式？\",\"a\":\"_4-2什么是设计模式\"},\"575\":{\"t\":\"设计模式（Design pattern）代表了最佳的实践，通常被有经验的⾯向对象的软件开发⼈员所采⽤。设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案。这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的。\"},\"576\":{\"t\":\"分为三大类：\"},\"577\":{\"t\":\"创建型： 在创建对象的同时隐藏创建逻辑，不使⽤ new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括⼯⼚/抽象⼯⼚/单例/建造者/原型模式。 结构型： 通过类和接⼝间的继承和引⽤实现创建复杂结构的对象。包括适配器/桥接模式/过滤器/组合/装饰器/外观/享元/代理模式。 行为型： 通过类之间不同通信⽅式实现不同⾏为。包括责任链/命名/解释器/迭代器/中介者/备忘录/观察者/状态/策略/模板/访问者模式。\"},\"578\":{\"h\":\"4.3单例模式\",\"a\":\"_4-3单例模式\"},\"579\":{\"t\":\"单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，构造⽅法必须是私有的、由自己创建⼀个静态变量存储实例，对外提供⼀个静态公有方法获取实例。\"},\"580\":{\"t\":\"双重检查锁（DCL， 即 double-checked locking） 实现代码如下：\"},\"581\":{\"t\":\"public class Singleton { // 1、私有化构造⽅法 private Singleton() { } // 2、定义⼀个静态变量指向⾃⼰类型 private volatile static Singleton instance; // 3、对外提供⼀个公共的⽅法获取实例 public static Singleton getInstance() { // 第⼀重检查是否为 null if (instance == null) { // 使⽤ synchronized 加锁 synchronized (Singleton.class) { // 第⼆重检查是否为 null if (instance == null) { // new 关键字创建对象不是原⼦操作 instance = new Singleton(); } } } return instance; } } \"},\"582\":{\"t\":\"优点：懒加载，线程安全，效率较⾼缺点：实现较复杂 这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单例。关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返回已创建的单例对象。\"},\"583\":{\"h\":\"4.4工厂模式\",\"a\":\"_4-4工厂模式\"},\"584\":{\"h\":\"4.4.1说⼀说简单⼯⼚模式：\",\"a\":\"_4-4-1说一说简单工厂模式\"},\"585\":{\"t\":\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数。\"},\"586\":{\"t\":\"适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较复杂。\"},\"587\":{\"t\":\"Spring 中的 BeanFactory 使⽤简单⼯⼚模式，根据传⼊⼀个唯⼀的标识来获得 Bean 对象。\"},\"588\":{\"h\":\"4.4.2⼯⼚⽅法模式了解吗：\",\"a\":\"_4-4-2工厂方法模式了解吗\"},\"589\":{\"t\":\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐，⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚。\"},\"590\":{\"t\":\"也就是定义⼀个抽象⼯⼚，其定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。这样不⽤通过指定类型来创建对象了。\"},\"591\":{\"h\":\"4.4.3抽象⼯⼚模式了解吗：\",\"a\":\"_4-4-3抽象工厂模式了解吗\"},\"592\":{\"t\":\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象，都只是针对⼀类产品，如果要⽣成另⼀种产品，就⽐较难办了！抽象⼯⼚模式通过在 AbstarctFactory 中增加创建产品的接⼝，并在具体⼦⼯⼚中实现新加产品的创建，当然前提是⼦⼯⼚⽀持⽣产该产品。否则继承的这个接⼝可以什么也不⼲。\"},\"593\":{\"h\":\"4.5装饰器模式\",\"a\":\"_4-5装饰器模式\"},\"594\":{\"h\":\"4.6代理模式\",\"a\":\"_4-6代理模式\"},\"595\":{\"h\":\"4.6.1什么是代理模式？\",\"a\":\"_4-6-1什么是代理模式\"},\"596\":{\"t\":\"代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制，是⼀种结构性模式。\"},\"597\":{\"h\":\"4.6.2静态代理和动态代理的区别：\",\"a\":\"_4-6-2静态代理和动态代理的区别\"},\"598\":{\"t\":\"灵活性 ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。另外，静态代理中，接⼝⼀旦新增加⽅法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！\"},\"599\":{\"t\":\"JVM 层⾯ ：静态代理在编译时就将接⼝、实现类、代理类这些都变成了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节码，并加载到 JVM 中的。\"},\"600\":{\"h\":\"4.6.3静态代理：\",\"a\":\"_4-6-3静态代理\"},\"601\":{\"t\":\"静态代理中，我们对目标对象的每个方法的增强都是手动完成的（*后面会具体演示代码*），非常不灵活（*比如接口一旦新增加方法，目标对象和代理对象都要进行修改*）且麻烦(*需要对每个目标类都单独写一个代理类*）。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\"},\"602\":{\"t\":\"上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\"},\"603\":{\"h\":\"4.6.4动态代理：\",\"a\":\"_4-6-4动态代理\"},\"604\":{\"t\":\"相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。\"},\"605\":{\"t\":\"从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\"},\"606\":{\"t\":\"说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\"},\"607\":{\"t\":\"动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\"},\"608\":{\"t\":\"就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\"},\"609\":{\"h\":\"JDK 动态代理机制\",\"a\":\"jdk-动态代理机制\"},\"610\":{\"t\":\"在 Java 动态代理机制中 InvocationHandler 接口和 Proxy 类是核心。\"},\"611\":{\"t\":\"Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\"},\"612\":{\"t\":\" public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException { ...... } 这个方法一共有 3 个参数： loader :类加载器，用于加载代理对象。 interfaces : 被代理类实现的一些接口； h : 实现了 InvocationHandler 接口的对象； \"},\"613\":{\"t\":\"要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\"},\"614\":{\"t\":\"public interface InvocationHandler { /** * 当你使用代理对象调用方法的时候实际会调用到这个方法 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; } invoke() 方法有下面三个参数： proxy :动态生成的代理类 method : 与代理类对象调用的方法相对应 args : 当前 method 方法的参数 \"},\"615\":{\"t\":\"也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\"},\"616\":{\"h\":\"CGLIB 动态代理机制\",\"a\":\"cglib-动态代理机制\"},\"617\":{\"t\":\"JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。\"},\"618\":{\"t\":\"为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\"},\"619\":{\"t\":\"CGLIBCode Generation Library)允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\"},\"620\":{\"t\":\"在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\"},\"621\":{\"t\":\"你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\"},\"622\":{\"t\":\"public interface MethodInterceptor extends Callback{ // 拦截被代理类中的方法 public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy) throws Throwable; } obj : 被代理的对象（需要增强的对象） method : 被拦截的方法（需要增强的方法） args : 方法入参 proxy : 用于调用原始方法 \"},\"623\":{\"t\":\"你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\"},\"624\":{\"h\":\"JDK 动态代理和 CGLIB 动态代理对比：\",\"a\":\"jdk-动态代理和-cglib-动态代理对比\"},\"625\":{\"t\":\"JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\"},\"626\":{\"t\":\"就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\"},\"627\":{\"h\":\"六、Map常见面试题\"},\"628\":{\"h\":\"1.为什么JDK1.8中HashMap从头插入改成尾插入\",\"a\":\"_1-为什么jdk1-8中hashmap从头插入改成尾插入\"},\"629\":{\"t\":\"原文链接：https://blog.csdn.net/qq_35590459/article/details/108988011\"},\"630\":{\"t\":\"JDK1.7中扩容时，每个元素的rehash之后，都会插入到新数组对应索引的链表头，所以这就导致原链表顺序为A->B->C，扩容之后，rehash之后的链表可能为C->B->A，元素的顺序发生了变化。在并发场景下，扩容时可能会出现循环链表的情况。而JDK1.8从头插入改成尾插入元素的顺序不变，避免出现循环链表的情况。\"},\"631\":{\"h\":\"2.为什么JDK1.8采用红黑树存储 Hash 冲突的元素？\",\"a\":\"_2-为什么jdk1-8采用红黑树存储hash冲突的元素\"},\"632\":{\"t\":\"红黑树本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为O(log n)。能够加快检索速率。\"},\"633\":{\"h\":\"3.为什么在长度小于8时使用链表，不一直使用红黑树？\",\"a\":\"_3-为什么在长度小于8时使用链表-不一直使用红黑树\"},\"634\":{\"t\":\"桶中元素的插入只会在hash冲突时发生，而hash冲突发生的概率较小，一直维护一个红黑树比链表耗费资源更多，在桶中元素量较小时没有这个必要。\"},\"635\":{\"h\":\"4.为什么要使用红黑树而不使用AVL树？\",\"a\":\"_4-为什么要使用红黑树而不使用avl树\"},\"636\":{\"t\":\"红黑树与AVLl树，在检索的时候效率差不多，都是通过平衡来二分查找。但红黑树不像avl树一样追求绝对的平衡，红黑树允许局部很少的不完全平衡，这样对于效率影响不大，但省去了很多没有必要的调平衡操作，avl树调平衡有时候代价较大，所以效率不如红黑树。\"},\"637\":{\"h\":\"5.为什么数组容量必须是2次幂？\",\"a\":\"_5-为什么数组容量必须是2次幂\"},\"638\":{\"t\":\"索引计算公式为i = (n - 1) & hash，如果n为2次幂，那么n-1的低位就全是1，哈希值进行与操作时可以保证低位的值不变，从而保证分布均匀，效果等同于hash%n，但是位运算比取余运算要高效的多。\"},\"639\":{\"h\":\"6.为什么单链表转为红黑树要求桶内的元素个数大于8？\",\"a\":\"_6-为什么单链表转为红黑树要求桶内的元素个数大于8\"},\"640\":{\"t\":\"当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，而一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件。\"},\"641\":{\"t\":\"同理，少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗，而选择8作为临界值，是因理想情况下一个bin中元素个数达到6的概率是0.00001316，达到7的概率为0.00000094，二者跨度较大，可以减小树和链表之间频繁转化的可能性。\"},\"642\":{\"h\":\"7.HashMap和Hashtable的区别\",\"a\":\"_7-hashmap和hashtable的区别\"},\"643\":{\"t\":\"**共同点:**都是双列集合,底层都是哈希算法\"},\"644\":{\"t\":\"区别:\"},\"645\":{\"t\":\"HashMap是线程不安全的，效率高，JDK1.2版本\"},\"646\":{\"t\":\"Hashtable是线程安全的，效率低，JDK1.0版本\"},\"647\":{\"t\":\"HashMap可以存储null键和null值\"},\"648\":{\"t\":\"Hashtable不可以存储null键和null值\"},\"649\":{\"t\":\"HashTable是基于陈旧的Dictionary类继承来的。 HashMap继承的抽象类AbstractMap实现了Map接口。\"},\"650\":{\"t\":\"默认初始容量和扩容机制： HashTable中的hash数组初始大小是11，增加的方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。\"},\"651\":{\"t\":\"哈希值的使用不同 ： HashTable直接使用对象的hashCode。 HashMap重新计算hash值。\"},\"652\":{\"t\":\"遍历方式的内部实现上不同 ： Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式。HashMap 实现 Iterator，支持fast-fail，Hashtable的 Iterator 遍历支持fast-fail，用 Enumeration 不支持 fast-fail\"},\"653\":{\"t\":\"具体地，Hashtable是线程安全的，它的每个方法中都加入了Synchronize方法。在多线程并发的环境下，可以直接使用Hashtable，不需要自己为它的方法实现同步。\"},\"654\":{\"t\":\"HashMap不是线程安全的，在多线程并发的环境下，可能会产生死锁等问题。使用HashMap时就必须要自己增加同步处理。虽然HashMap不是线程安全的，但是它的效率会比Hashtable要好很多。这样设计是合理的。在我们的日常使用当中，大部分时间是单线程操作的。HashMap把这部分操作解放出来了。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。\"},\"655\":{\"t\":\"Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。\"},\"656\":{\"t\":\"HashMap的Iterator是fail-fast迭代器。当有其它线程改变了HashMap的结构（增加，删除，修改元素），将会抛出ConcurrentModificationException。\"},\"657\":{\"t\":\"JDK8之前的版本中，Hashtable是没有fast-fail机制的。在JDK8及以后的版本中 ，HashTable也是使用fast-fail的。\"},\"658\":{\"t\":\"HashMap与Hashtable的区别是面试中经常遇到的一个问题。这个问题看似简单，但如果深究进去，也能了解到不少知识。（原文链接：https://blog.csdn.net/yang13563758128/article/details/86655574?spm=1001.2014.3001.5502）\"},\"659\":{\"h\":\"8.HashMap、ConcurrentHashMap区别\",\"a\":\"_8-hashmap、concurrenthashmap区别\"},\"660\":{\"t\":\"ConcurrentHashMap和HashMap的实现方式不一样，虽然都是使用桶数组实现的，但是还是有区别，ConcurrentHashMap对桶数组进行了分段，而HashMap并没有。\"},\"661\":{\"t\":\"ConcurrentHashMap在每一个分段上都用锁进行了保护。HashMap没有锁机制。所以，前者线程安全的，后者不是线程安全的。\"},\"662\":{\"t\":\"注意：以上区别基于jdk1.8以前的版本。\"},\"663\":{\"h\":\"四、Map\"},\"664\":{\"h\":\"1.HashMap\",\"a\":\"_1-hashmap\"},\"665\":{\"t\":\"HashMap实现了Map接口，可以方便地按照键存取值，内部使用数组链表和哈希的方式进行实现，这决定了它有如下特点：\"},\"666\":{\"t\":\"根据键保存和获取值的效率都很高，为O(1)，每个单向链表往往只有一个或少数几个节点，根据hash值就可以直接快速定位；\"},\"667\":{\"t\":\"HashMap中的键值对没有顺序，因为hash值是随机的。\"},\"668\":{\"t\":\"需要说明的是，HashMap不是线程安全的，Java中还有一个类Hashtable，它是Java最早实现的容器类之一，实现了Map接口，实现原理与HashMap类似，但没有特别的优化，它内部通过synchronized实现了线程安全。\"},\"669\":{\"t\":\"在HashMap中，键和值都可以为null，而在Hashtable中不可以。在不需要并发安全的场景中，推荐使用HashMap。在高并发的场景中，推荐使用ConcurrentHashMap。\"},\"670\":{\"h\":\"1.1HashMap的容量、扩容\",\"a\":\"_1-1hashmap的容量、扩容\"},\"671\":{\"t\":\"先来看一下，HashMap中都定义了哪些成员变量。\"},\"672\":{\"t\":\"上面是一张HashMap中主要的成员变量的图，其中有一个是我们本文主要关注的： size、loadFactor、threshold、DEFAULT_LOAD_FACTOR和DEFAULT_INITIAL_CAPACITY。\"},\"673\":{\"t\":\"我们先来简单解释一下这些参数的含义，然后再分析他们的作用。\"},\"674\":{\"t\":\"HashMap类中有以下主要成员变量：\"},\"675\":{\"t\":\"transient int size; \"},\"676\":{\"t\":\"记录了Map中KV对的个数\"},\"677\":{\"t\":\"loadFactor \"},\"678\":{\"t\":\"装载因子，用来衡量HashMap满的程度。loadFactor的默认值为0.75f（static final float DEFAULT_LOAD_FACTOR = 0.75f;）。\"},\"679\":{\"t\":\"int threshold; \"},\"680\":{\"t\":\"临界值，当实际KV个数超过threshold时，HashMap会将容量扩容，threshold＝容量*装载因子\"},\"681\":{\"t\":\"除了以上这些重要成员变量外，HashMap中还有一个和他们紧密相关的概念：capacity \"},\"682\":{\"t\":\"容量，如果不指定，默认容量是16(static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;)\"},\"683\":{\"t\":\"可能看完了你还是有点蒙，size和capacity之间有啥关系？为啥要定义这两个变量。loadFactor和threshold又是干啥的？\"},\"684\":{\"h\":\"1.1.1size 和 capacity\",\"a\":\"_1-1-1size-和-capacity\"},\"685\":{\"t\":\"HashMap中的size和capacity之间的区别其实解释起来也挺简单的。我们知道，HashMap就像一个“桶”，那么capacity就是这个桶“当前”最多可以装多少元素，而size表示这个桶已经装了多少元素。来看下以下代码：\"},\"686\":{\"t\":\" Map<String, String> map = new HashMap<String, String>(); map.put(\\\"hollis\\\", \\\"hollischuang\\\"); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); \"},\"687\":{\"t\":\"我们定义了一个新的HashMap，并想其中put了一个元素，然后通过反射的方式打印capacity和size。输出结果为：\"},\"688\":{\"t\":\"capacity : 16、size : 1\"},\"689\":{\"t\":\"默认情况下，一个HashMap的容量（capacity）是16，设计成16的好处主要是可以使用按位与替代取模来提升hash的效率。\"},\"690\":{\"t\":\"我们知道，HashMap的重载的构造函数中，有一个是支持传入initialCapacity的，那么我们尝试着设置一下，看结果如何。\"},\"691\":{\"t\":\" Map<String, String> map = new HashMap<String, String>(1); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Map<String, String> map = new HashMap<String, String>(7); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Map<String, String> map = new HashMap<String, String>(9); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); \"},\"692\":{\"t\":\"分别执行以上3段代码，分别输出：capacity : 1、capacity : 8、capacity : 16。\"},\"693\":{\"t\":\"也就是说，默认情况下HashMap的容量是16，但是，如果用户通过构造函数指定了一个数字作为容量，那么Hash会选择大于该数字的第一个2的幂作为容量。(1->1、7->8、9->16)\"},\"694\":{\"t\":\"相关信息\"},\"695\":{\"t\":\"这里有一个小建议：在初始化HashMap的时候，应该尽量指定其大小。尤其是当你已知map中存放的元素个数时。（《阿里巴巴Java开发规约》）\"},\"696\":{\"h\":\"1.1.2loadFactor 和 threshold\",\"a\":\"_1-1-2loadfactor-和-threshold\"},\"697\":{\"t\":\"前面我们提到过，HashMap有扩容机制，就是当达到扩容条件时会进行扩容，从16扩容到32、64、128...\"},\"698\":{\"t\":\"那么，这个扩容条件指的是什么呢？\"},\"699\":{\"t\":\"其实，HashMap的扩容条件就是当HashMap中的元素个数（size）超过临界值（threshold）时就会自动扩容。\"},\"700\":{\"t\":\"在HashMap中，threshold = loadFactor * capacity。\"},\"701\":{\"t\":\"loadFactor是装载因子，表示HashMap满的程度，默认值为0.75f，设置成0.75有一个好处，那就是0.75正好是3/4，而capacity又是2的幂。所以，两个数的乘积都是整数。\"},\"702\":{\"t\":\"对于一个默认的HashMap来说，默认情况下，当其size大于12(16*0.75)时就会触发扩容。\"},\"703\":{\"t\":\"验证代码如下：\"},\"704\":{\"t\":\" Map<String, String> map = new HashMap<>(); map.put(\\\"hollis1\\\", \\\"hollischuang\\\"); map.put(\\\"hollis2\\\", \\\"hollischuang\\\"); map.put(\\\"hollis3\\\", \\\"hollischuang\\\"); map.put(\\\"hollis4\\\", \\\"hollischuang\\\"); map.put(\\\"hollis5\\\", \\\"hollischuang\\\"); map.put(\\\"hollis6\\\", \\\"hollischuang\\\"); map.put(\\\"hollis7\\\", \\\"hollischuang\\\"); map.put(\\\"hollis8\\\", \\\"hollischuang\\\"); map.put(\\\"hollis9\\\", \\\"hollischuang\\\"); map.put(\\\"hollis10\\\", \\\"hollischuang\\\"); map.put(\\\"hollis11\\\", \\\"hollischuang\\\"); map.put(\\\"hollis12\\\", \\\"hollischuang\\\"); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); Field threshold = mapType.getDeclaredField(\\\"threshold\\\"); threshold.setAccessible(true); System.out.println(\\\"threshold : \\\" + threshold.get(map)); Field loadFactor = mapType.getDeclaredField(\\\"loadFactor\\\"); loadFactor.setAccessible(true); System.out.println(\\\"loadFactor : \\\" + loadFactor.get(map)); map.put(\\\"hollis13\\\", \\\"hollischuang\\\"); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); Field threshold = mapType.getDeclaredField(\\\"threshold\\\"); threshold.setAccessible(true); System.out.println(\\\"threshold : \\\" + threshold.get(map)); Field loadFactor = mapType.getDeclaredField(\\\"loadFactor\\\"); loadFactor.setAccessible(true); System.out.println(\\\"loadFactor : \\\" + loadFactor.get(map)); \"},\"705\":{\"t\":\"输出结果：\"},\"706\":{\"t\":\"capacity : 16 size : 12 threshold : 12 loadFactor : 0.75 capacity : 32 size : 13 threshold : 24 loadFactor : 0.75 \"},\"707\":{\"t\":\"当HashMap中的元素个数达到13的时候，capacity就从16扩容到32了。\"},\"708\":{\"t\":\"相关信息\"},\"709\":{\"t\":\"HashMap中还提供了一个支持传入initialCapacity,loadFactor两个参数的方法，来初始化容量和装载因子。不过，一般不建议修改loadFactor的值。\"},\"710\":{\"h\":\"1.1.3总结\",\"a\":\"_1-1-3总结\"},\"711\":{\"t\":\"HashMap中size表示当前共有多少个KV对，capacity表示当前HashMap的容量是多少，默认值是16，每次扩容都是成倍的。loadFactor是装载因子，当Map中元素个数超过loadFactor* capacity的值时，会触发扩容。loadFactor* capacity可以用threshold表示。\"},\"712\":{\"t\":\"注意：文中分析基于JDK1.8.0_73\"},\"713\":{\"h\":\"1.2HashMap中hash方法的原理\",\"a\":\"_1-2hashmap中hash方法的原理\"},\"714\":{\"h\":\"1.2.1HashMap 的数据结构\",\"a\":\"_1-2-1hashmap-的数据结构\"},\"715\":{\"t\":\"在Java中，保存数据有两种比较简单的数据结构：数组和链表。**数组的特点是：寻址容易，插入和删除困难；而链表的特点是：寻址困难，插入和删除容易。**上面我们提到过，常用的哈希函数的冲突解决办法中有一种方法叫做链地址法，其实就是将数组和链表组合在一起，发挥了两者的优势，我们可以将其理解为链表的数组。\"},\"716\":{\"t\":\"640\"},\"717\":{\"t\":\"我们可以从上图看到，左边很明显是个数组，数组的每个成员是一个链表。该数据结构所容纳的所有元素均包含一个指针，用于元素间的链接。我们根据元素的自身特征把元素分配到不同的链表中去，反过来我们也正是通过这些特征找到正确的链表，再从链表中找出正确的元素。其中，根据元素特征计算元素数组下标的方法就是哈希算法，即本文的主角hash()函数（当然，还包括indexOf()函数）。\"},\"718\":{\"h\":\"1.2.2hash方法\",\"a\":\"_1-2-2hash方法\"},\"719\":{\"t\":\"我们拿JDK 1.7的HashMap为例，其中定义了一个final int hash(Object k) 方法，其主要被以下方法引用。\"},\"720\":{\"t\":\"hash-use\"},\"721\":{\"t\":\"上面的方法主要都是增加和删除方法，这不难理解，当我们要对一个链表数组中的某个元素进行增删的时候，首先要知道他应该保存在这个链表数组中的哪个位置，即他在这个数组中的下标。而hash()方法的功能就是根据Key来定位其在HashMap中的位置。HashTable、ConcurrentHashMap同理。\"},\"722\":{\"t\":\"首先，在同一个版本的Jdk中，HashMap、HashTable以及ConcurrentHashMap里面的hash方法的实现是不同的。在不同的版本的JDK中（Java7 和 Java8）中也是有区别的。我会尽量全部介绍到。相信，看完这篇文章，你会彻底理解hash方法。\"},\"723\":{\"t\":\"在上代码之前，我们先来做个简单分析。我们知道，hash方法的功能是根据Key来定位这个K-V在链表数组中的位置的。也就是hash方法的输入应该是个Object类型的Key，输出应该是个int类型的数组下标。如果让你设计这个方法，你会怎么做？\"},\"724\":{\"t\":\"其实简单，我们只要调用Object对象的hashCode()方法，该方法会返回一个整数，然后用这个数对HashMap或者HashTable的容量进行取模就行了。没错，其实基本原理就是这个，只不过，在具体实现上，由两个方法int hash(Object k)和int indexFor(int h, int length)来实现。但是考虑到效率等问题，HashMap的实现会稍微复杂一点。\"},\"725\":{\"t\":\"相关信息\"},\"726\":{\"t\":\"hash ：该方法主要是将Object转换成一个整型。\"},\"727\":{\"t\":\"indexFor ：该方法主要是将hash生成的整型转换成链表数组中的下标。\"},\"728\":{\"t\":\"HashMap In Java 7：\"},\"729\":{\"t\":\"final int hash(Object k) { int h = hashSeed; if (0 != h && k instanceof String) { return sun.misc.Hashing.stringHash32((String) k); } h ^= k.hashCode(); h ^= (h >>> 20) ^ (h >>> 12); return h ^ (h >>> 7) ^ (h >>> 4); } static int indexFor(int h, int length) { return h & (length-1); } \"},\"730\":{\"t\":\"前面我说过，indexFor方法其实主要是将hash生成的整型转换成链表数组中的下标。那么return h & (length-1);是什么意思呢？其实，他就是取模。Java之所以使用位运算(&)来代替取模运算(%)，最主要的考虑就是效率。位运算(&)效率要比代替取模运算(%)高很多，主要原因是位运算直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快。\"},\"731\":{\"t\":\"那么，为什么可以使用位运算(&)来实现取模运算(%)呢？这实现的原理如下：\"},\"732\":{\"t\":\"相关信息\"},\"733\":{\"t\":\"X % 2^n = X & (2^n - 1)\"},\"734\":{\"t\":\"2n表示2的n次方，也就是说，一个数对2n取模 == 一个数和(2^n - 1)做按位与运算 。\"},\"735\":{\"t\":\"假设n为3，则2^3 = 8，表示成2进制就是1000。2^3 -1 = 7 ，即0111。\"},\"736\":{\"t\":\"此时X & (2^3 - 1) 就相当于取X的2进制的最后三位数。\"},\"737\":{\"t\":\"从2进制角度来看，X / 8相当于 X >> 3，即把X右移3位，此时得到了X / 8的商，而被移掉的部分(后三位)，则是X % 8，也就是余数。\"},\"738\":{\"t\":\"上面的解释不知道你有没有看懂，没看懂的话其实也没关系，你只需要记住这个技巧就可以了。或者你可以找几个例子试一下。\"},\"739\":{\"t\":\"相关信息\"},\"740\":{\"t\":\"6 % 8 = 6 ，6 & 7 = 6\"},\"741\":{\"t\":\"10 & 8 = 2 ，10 & 7 = 2\"},\"742\":{\"t\":\"所以，return h & (length-1);只要保证length的长度是2^n的话，就可以实现取模运算了。而HashMap中的length也确实是2的倍数，初始值是16，之后每次扩充为原来的2倍。\"},\"743\":{\"t\":\"分析完indexFor方法后，我们接下来准备分析hash方法的具体原理和实现。在深入分析之前，至此，先做个总结。\"},\"744\":{\"t\":\"HashMap的数据是存储在链表数组里面的。在对HashMap进行插入/删除等操作时，都需要根据K-V对的键值定位到他应该保存在数组的哪个下标中。而这个通过键值求取下标的操作就叫做哈希。HashMap的数组是有长度的，Java中规定这个长度只能是2的倍数，初始值为16。简单的做法是先求取出键值的hashcode，然后在将hashcode得到的int值对数组长度进行取模。为了考虑性能，Java总采用按位与操作实现取模操作。\"},\"745\":{\"t\":\"接下来我们会发现，无论是用取模运算还是位运算都无法直接解决冲突较大的问题。比如：CA11 0000和0001 0000在对0000 1111进行按位与运算后的值是相等的。\"},\"746\":{\"t\":\"两个不同的键值，在对数组长度进行按位与运算后得到的结果相同，这不就发生了冲突吗。那么如何解决这种冲突呢，来看下Java是如何做的。\"},\"747\":{\"t\":\"其中的主要代码部分如下：\"},\"748\":{\"t\":\"h ^= k.hashCode(); h ^= (h >>> 20) ^ (h >>> 12); return h ^ (h >>> 7) ^ (h >>> 4); \"},\"749\":{\"t\":\"这段代码是为了对key的hashCode进行扰动计算，防止不同hashCode的高位不同但低位相同导致的hash冲突。简单点说，就是为了把高位的特征和低位的特征组合起来，降低哈希冲突的概率，也就是说，尽量做到任何一位的变化都能对最终得到的结果产生影响。\"},\"750\":{\"t\":\"举个例子来说，我们现在想向一个HashMap中put一个K-V对，Key的值为“hollischuang”，经过简单的获取hashcode后，得到的值为“1011000110101110011111010011011”，如果当前HashTable的大小为16，即在不进行扰动计算的情况下，他最终得到的index结果值为11。由于15的二进制扩展到32位为“00000000000000000000000000001111”，所以，一个数字在和他进行按位与操作的时候，前28位无论是什么，计算结果都一样（因为0和任何数做与，结果都为0）。如下图所示。\"},\"751\":{\"t\":\"640 (3)\"},\"752\":{\"t\":\"可以看到，后面的两个hashcode经过位运算之后得到的值也是11 ，虽然我们不知道哪个key的hashcode是上面例子中的那两个，但是肯定存在这样的key，这就产生了冲突。\"},\"753\":{\"t\":\"那么，接下来，我看看一下经过扰动的算法最终的计算结果会如何。\"},\"754\":{\"t\":\"640 (4)\"},\"755\":{\"t\":\"从上面图中可以看到，之前会产生冲突的两个hashcode，经过扰动计算之后，最终得到的index的值不一样了，这就很好的避免了冲突。\"},\"756\":{\"t\":\"相关信息\"},\"757\":{\"t\":\"其实，使用位运算代替取模运算，除了性能之外，还有一个好处就是可以很好的解决负数的问题。因为我们知道，hashcode的结果是int类型，而int的取值范围是-2^31 ~ 2^31 - 1，即[ -2147483648, 2147483647]；这里面是包含负数的，我们知道，对于一个负数取模还是有些麻烦的。如果使用二进制的位运算的话就可以很好的避免这个问题。首先，不管hashcode的值是正数还是负数。length-1这个值一定是个正数。那么，他的二进制的第一位一定是0（有符号数用最高位作为符号位，“0”代表“+”，“1”代表“-”），这样里两个数做按位与运算之后，第一位一定是个0，也就是，得到的结果一定是个正数。\"},\"758\":{\"t\":\"HashTable In Java 7：\"},\"759\":{\"t\":\"上面是Java 7中HashMap的hash方法以及indexOf方法的实现，那么接下来我们要看下，线程安全的HashTable是如何实现的，和HashMap有何不同，并试着分析下不同的原因。以下是Java 7中HashTable的hash方法的实现。\"},\"760\":{\"t\":\"private int hash(Object k) { // hashSeed will be zero if alternative hashing is disabled. return hashSeed ^ k.hashCode(); } \"},\"761\":{\"t\":\"我们可以发现，很简单，相当于只是对k做了个简单的hash，取了一下其hashCode。而HashTable中也没有indexOf方法，取而代之的是这段代码：int index = (hash & 0x7FFFFFFF) % tab.length;。也就是说，HashMap和HashTable对于计算数组下标这件事，采用了两种方法。HashMap采用的是位运算，而HashTable采用的是直接取模。\"},\"762\":{\"t\":\"我们前面说过，HashMap之所以不用取模的原因是为了提高效率。有人认为，因为HashTable是个线程安全的类，本来就慢，所以Java并没有考虑效率问题，就直接使用取模算法了呢？但是其实并不完全是，Java这样设计还是有一定的考虑在的，虽然这样效率确实是会比HashMap慢一些。\"},\"763\":{\"t\":\"其实，HashTable采用简单的取模是有一定的考虑在的。这就要涉及到HashTable的构造函数和扩容函数了。由于篇幅有限，这里就不贴代码了，直接给出结论：\"},\"764\":{\"t\":\"相关信息\"},\"765\":{\"t\":\"HashTable默认的初始大小为11，之后每次扩充为原来的2n+1。\"},\"766\":{\"t\":\"也就是说，HashTable的链表数组的默认大小是一个素数、奇数。之后的每次扩充结果也都是奇数。\"},\"767\":{\"t\":\"由于HashTable会尽量使用素数、奇数作为容量的大小。当哈希表的大小为素数时，简单的取模哈希的结果会更加均匀。（这个是可以证明出来的，由于不是本文重点，暂不详细介绍，可参考：http://zhaox.github.io/algorithm/2015/06/29/hash\"},\"768\":{\"t\":\"至此，我们看完了Java 7中HashMap和HashTable中对于hash的实现，我们来做个简单的总结。\"},\"769\":{\"t\":\"HashMap默认的初始化大小为16，之后每次扩充为原来的2倍。\"},\"770\":{\"t\":\"HashTable默认的初始大小为11，之后每次扩充为原来的2n+1。\"},\"771\":{\"t\":\"当哈希表的大小为素数时，简单的取模哈希的结果会更加均匀，所以单从这一点上看，HashTable的哈希表大小选择，似乎更高明些。因为hash结果越分散效果越好。\"},\"772\":{\"t\":\"在取模计算时，如果模数是2的幂，那么我们可以直接使用位运算来得到结果，效率要大大高于做除法。所以从hash计算的效率上，又是HashMap更胜一筹。\"},\"773\":{\"t\":\"但是，HashMap为了提高效率使用位运算代替哈希，这又引入了哈希分布不均匀的问题，所以HashMap为解决这问题，又对hash算法做了一些改进，进行了扰动计算。\"},\"774\":{\"t\":\"ConcurrentHashMap In Java 7：\"},\"775\":{\"t\":\"private int hash(Object k) { int h = hashSeed; if ((0 != h) && (k instanceof String)) { return sun.misc.Hashing.stringHash32((String) k); } h ^= k.hashCode(); // Spread bits to regularize both segment and index locations, // using variant of single-word Wang/Jenkins hash. h += (h << 15) ^ 0xffffcd7d; h ^= (h >>> 10); h += (h << 3); h ^= (h >>> 6); h += (h << 2) + (h << 14); return h ^ (h >>> 16); } int j = (hash >>> segmentShift) & segmentMask; \"},\"776\":{\"t\":\"上面这段关于ConcurrentHashMap的hash实现其实和HashMap如出一辙。都是通过位运算代替取模，然后再对hashcode进行扰动。区别在于，ConcurrentHashMap 使用了一种变种的Wang/Jenkins 哈希算法，其主要目的也是为了把高位和低位组合在一起，避免发生冲突。至于为啥不和HashMap采用同样的算法进行扰动，我猜这只是程序员自由意志的选择吧。至少我目前没有办法证明哪个更优。\"},\"777\":{\"t\":\"HashMap In Java 8：\"},\"778\":{\"t\":\"在Java 8 之前，HashMap和其他基于map的类都是通过链地址法解决冲突，它们使用单向链表来存储相同索引值的元素。在最坏的情况下，这种方式会将HashMap的get方法的性能从O(1)降低到O(n)。为了解决在频繁冲突时hashmap性能降低的问题，Java 8中使用平衡树来替代链表存储冲突的元素。这意味着我们可以将最坏情况下的性能从O(n)提高到O(logn)。关于HashMap在Java 8中的优化，我后面会有文章继续深入介绍。\"},\"779\":{\"t\":\"如果恶意程序知道我们用的是Hash算法，则在纯链表情况下，它能够发送大量请求导致哈希碰撞，然后不停访问这些key导致HashMap忙于进行线性查找，最终陷入瘫痪，即形成了拒绝服务攻击（DoS）。\"},\"780\":{\"t\":\"关于Java 8中的hash函数，原理和Java 7中基本类似。Java 8中这一步做了优化，只做一次16位右位移异或混合，而不是四次，但原理是不变的。\"},\"781\":{\"t\":\"static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } \"},\"782\":{\"t\":\"在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h >>> 16)，主要是从速度、功效、质量来考虑的。以上方法得到的int的hash值，然后再通过h & (table.length -1)来得到该对象在数据中保存的位置。\"},\"783\":{\"t\":\"HashTable In Java 8：\"},\"784\":{\"t\":\"在Java 8的HashTable中，已经不再有hash方法了。但是哈希的操作还是在的，比如在put方法中就有如下实现：\"},\"785\":{\"t\":\" int hash = key.hashCode(); int index = (hash & 0x7FFFFFFF) % tab.length; \"},\"786\":{\"t\":\"这其实和Java 7中的实现几乎无差别，就不做过多的介绍了。\"},\"787\":{\"t\":\"ConcurrentHashMap In Java 8：\"},\"788\":{\"t\":\"Java 8 里面的求hash的方法从hash改为了spread。实现方式如下：\"},\"789\":{\"t\":\"static final int spread(int h) { return (h ^ (h >>> 16)) & HASH_BITS; } \"},\"790\":{\"t\":\"Java 8的ConcurrentHashMap同样是通过Key的哈希值与数组长度取模确定该Key在数组中的索引。同样为了避免不太好的Key的hashCode设计，它通过如下方法计算得到Key的最终哈希值。不同的是，Java 8的ConcurrentHashMap作者认为引入红黑树后，即使哈希冲突比较严重，寻址效率也足够高，所以作者并未在哈希值的计算上做过多设计，只是将Key的hashCode值与其高16位作异或并保证最高位为0（从而保证最终结果为正整数）。\"},\"791\":{\"h\":\"1.2.3总结\",\"a\":\"_1-2-3总结\"},\"792\":{\"t\":\"至此，我们已经分析完了HashMap、HashTable以及ConcurrentHashMap分别在Jdk 1.7 和 Jdk 1.8中的实现。我们可以发现，为了保证哈希的结果可以分散、为了提高哈希的效率，JDK在一个小小的hash方法上就有很多考虑，做了很多事情。当然，我希望我们不仅可以深入了解背后的原理，还要学会这种对代码精益求精的态度。\"},\"793\":{\"t\":\"Jdk的源代码，每一行都很有意思，都值得花时间去钻研、推敲。\"},\"794\":{\"t\":\"参考：https://hollischuang.gitee.io/tobetopjavaer/#/basics/java-basic/hash-in-hashmap\"},\"795\":{\"h\":\"2.TreeMap\",\"a\":\"_2-treemap\"},\"796\":{\"t\":\"TreeMap与HashMap相比，TreeMap同样实现了Map接口，但内部使用红黑树实现。红黑树是统计效率比较高的大致平衡的排序二叉树，这决定了它有如下特点：\"},\"797\":{\"t\":\"按键有序，TreeMap同样实现了SortedMap和NavigableMap接口，可以方便地根据键的顺序进行查找，如第一个、最后一个、某一范围的键、邻近键等。\"},\"798\":{\"t\":\"为了按键有序，TreeMap要求键实现Comparable接口或通过构造方法提供一个Com-parator对象。\"},\"799\":{\"t\":\"根据键保存、查找、删除的效率比较高，为O(h), h为树的高度，在树平衡的情况下，h为log2(N), N为节点数。\"},\"800\":{\"t\":\"HashMap还是TreeMap呢：不要求排序，优先考虑HashMap，要求排序，考虑TreeMap。\"},\"801\":{\"h\":\"3.LinkedHashMap\",\"a\":\"_3-linkedhashmap\"},\"802\":{\"t\":\"LinkedHashMap可以保持插入顺序或访问顺序。插入顺序经常用于处理键值对的数据，并保持其输入顺序，也经常用于键已经排好序的场景，相比TreeMap效率更高；访问顺序经常用于实现LRU缓存。实现原理上，它是HashMap的子类，但内部有一个双向链表以维护节点的顺序。\"},\"803\":{\"h\":\"框架\"},\"804\":{\"h\":\"四：Java高级：Spring、SpringMVC、Spring Boot、MyBatis\",\"a\":\"四-java高级-spring、springmvc、spring-boot、mybatis\"},\"805\":{\"h\":\"AOP和IOC概念\",\"a\":\"aop和ioc概念\"},\"806\":{\"t\":\"AOP：AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。\"},\"807\":{\"t\":\"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理。\"},\"808\":{\"t\":\"IOC： 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。\"},\"809\":{\"t\":\"为什么叫控制反转？\"},\"810\":{\"t\":\"控制 ：指的是对象创建（实例化、管理）的权力\"},\"811\":{\"t\":\"反转 ：控制权交给外部环境（Spring 框架、IoC 容器）\"},\"812\":{\"h\":\"Bean的生命周期\",\"a\":\"bean的生命周期\"},\"813\":{\"h\":\"MVC的基本流程\",\"a\":\"mvc的基本流程\"},\"814\":{\"t\":\"简单来说：客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler -> HandlerAdapter 会根据 Handler 来调用真正的处理器来处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象 -> 前端控制器 DispatcherServlet 渲染数据（Model）-> 将得到视图对象返回给用户。\"},\"815\":{\"t\":\"image-20210608002334025\"},\"816\":{\"t\":\"上图用于辅助理解，面试时可用下列 8 步描述 SpringMVC 运行流程：\"},\"817\":{\"t\":\"用户向服务器发送请求，请求被 Spring 前端控制Servelt DispatcherServlet 捕获；\"},\"818\":{\"t\":\"DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 对象的形式返回；\"},\"819\":{\"t\":\"DispatcherServlet 根据获得的 Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得 HandlerAdapter 后，此时将开始执行拦截器的 preHandler(…)方法）\"},\"820\":{\"t\":\"提取 Request 中的模型数据，填充 Handler 入参，开始执行Handler（Controller)。在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\"},\"821\":{\"t\":\"（1）HttpMessageConveter：将请求消息（如：Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息；\"},\"822\":{\"t\":\"（2）数据转换：对请求消息进行数据转换。如：String 转换成 Integer、Double 等；\"},\"823\":{\"t\":\"（3）数据格式化：对请求消息进行数据格式化。如：将字符串转换成格式化数字或格式化日期等；\"},\"824\":{\"t\":\"（4）数据验证：验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中;\"},\"825\":{\"t\":\"5.Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象；\"},\"826\":{\"t\":\"6.根据返回的 ModelAndView，选择一个适合的 ViewResolver（必须是已经注册到 Spring 容器中的 ViewResolver)返回给DispatcherServlet；\"},\"827\":{\"t\":\"7.ViewResolver 结合 Model 和 View，来渲染视图；\"},\"828\":{\"t\":\"8.将渲染结果返回给客户端。\"},\"829\":{\"h\":\"Spring的设计模式\",\"a\":\"spring的设计模式\"},\"830\":{\"t\":\"工厂设计模式 : Spring 使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象；\"},\"831\":{\"t\":\"代理设计模式 : Spring AOP 功能的实现；\"},\"832\":{\"t\":\"单例设计模式 : Spring 中的 Bean 默认都是单例的；\"},\"833\":{\"t\":\"模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式；\"},\"834\":{\"t\":\"包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源；\"},\"835\":{\"t\":\"观察者模式：Spring 事件驱动模型就是观察者模式很经典的一个应用；\"},\"836\":{\"t\":\"适配器模式：Spring AOP 的增强或通知(Advice)使用到了适配器模式、SpringMVC 中也是用到了适配器模式适配 Controller。\"},\"837\":{\"h\":\"Spring事务机制\",\"a\":\"spring事务机制\"},\"838\":{\"h\":\"谈谈你对 Spring 中的事务的理解？\",\"a\":\"谈谈你对-spring-中的事务的理解\"},\"839\":{\"t\":\"事务是逻辑上的一组操作，要么都执行，要么都不执行。\"},\"840\":{\"t\":\"事务特性\"},\"841\":{\"t\":\"原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\"},\"842\":{\"t\":\"一致性：执行事务前后，数据保持一致；\"},\"843\":{\"t\":\"隔离性：并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\"},\"844\":{\"t\":\"持久性: 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\"},\"845\":{\"t\":\"Spring 事务管理接口\"},\"846\":{\"t\":\"PlatformTransactionManager：（平台）事务管理器；\"},\"847\":{\"t\":\"TransactionDefinition：事务定义信息（事务隔离级别、传播行为、超时、只读、回滚规则）；\"},\"848\":{\"t\":\"TransactionStatus：事务运行状态；\"},\"849\":{\"t\":\"所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。\"},\"850\":{\"h\":\"Spring 中的事务隔离级别？\",\"a\":\"spring-中的事务隔离级别\"},\"851\":{\"t\":\"TransactionDefinition 接口中定义了五个表示隔离级别的常量：\"},\"852\":{\"t\":\"TransactionDefinition.ISOLATION_DEFAULT：使用后端数据库默认的隔离级别，MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED 隔离级别；\"},\"853\":{\"t\":\"TransactionDefinition.ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读；\"},\"854\":{\"t\":\"TransactionDefinition.ISOLATION_READ_COMMITTED：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生；\"},\"855\":{\"t\":\"TransactionDefinition.ISOLATION_REPEATABLE_READ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生；\"},\"856\":{\"t\":\"TransactionDefinition.ISOLATION_SERIALIZABLE：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\"},\"857\":{\"h\":\"Spring 中的事物传播行为？\",\"a\":\"spring-中的事物传播行为\"},\"858\":{\"t\":\"事务传播行为是为了解决业务层方法之间互相调用的事务问题。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在 TransactionDefinition 定义中包括了如下几个表示传播行为的常量：\"},\"859\":{\"t\":\"支持当前事务的情况：\"},\"860\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务；\"},\"861\":{\"t\":\"TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行；\"},\"862\":{\"t\":\"TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\"},\"863\":{\"t\":\"不支持当前事务的情况：\"},\"864\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起；\"},\"865\":{\"t\":\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\"},\"866\":{\"t\":\"TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\"},\"867\":{\"t\":\"其他情况：\"},\"868\":{\"t\":\"TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 TransactionDefinition.PROPAGATION_REQUIRED。\"},\"869\":{\"h\":\"Spring如何解决循环依赖问题？\",\"a\":\"spring如何解决循环依赖问题\"},\"870\":{\"t\":\"了解问题的本质再分析问题，往往更利于对问题有更深入的了解和研究。所以我们在分析 Spring 关于循环依赖的源码之前，先要了解下什么是循环依赖。\"},\"871\":{\"t\":\"1. 循环依赖的概念\"},\"872\":{\"t\":\"img\"},\"873\":{\"t\":\"循环依赖分为三种，自身依赖于自身、互相循环依赖、多组循环依赖。\"},\"874\":{\"t\":\"但无论循环依赖的数量有多少，循环依赖的本质是一样的。就是你的完整创建依赖于我，而我的完整创建也依赖于你，但我们互相没法解耦，最终导致依赖创建失败。\"},\"875\":{\"t\":\"所以 Spring 提供了除了构造函数注入和原型注入外的，setter循环依赖注入解决方案。那么我们也可以先来尝试下这样的依赖，如果是我们自己处理的话该怎么解决。\"},\"876\":{\"t\":\"2. 问题体现\"},\"877\":{\"t\":\"public class ABTest { public static void main(String[] args) { new ClazzA(); } } class ClazzA { private ClazzB b = new ClazzB(); } class ClazzB { private ClazzA a = new ClazzA(); } \"},\"878\":{\"t\":\"3.解决方案\"},\"879\":{\"t\":\"整个解决循环依赖的核心内容，A 创建后填充属性时依赖 B，那么就去创建 B，在创建 B 开始填充时发现依赖于 A，但此时 A 这个半成品对象已经存放在缓存到singletonObjects 中了，所以 B 可以正常创建，在通过递归把 A 也创建完整了。\"},\"880\":{\"t\":\"4.Spring解决\"},\"881\":{\"t\":\"（1）一级缓存能解决吗？\"},\"882\":{\"t\":\"img\"},\"883\":{\"t\":\"其实只有一级缓存并不是不能解决循环依赖，就像我们自己做的例子一样。\"},\"884\":{\"t\":\"但是在 Spring 中如果像我们例子里那么处理，就会变得非常麻烦，而且也可能会出现 NPE 问题。\"},\"885\":{\"t\":\"所以如图按照 Spring 中代码处理的流程，我们去分析一级缓存这样存放成品 Bean 的流程中，是不能解决循环依赖的问题的。因为 A 的成品创建依赖于 B，B的成品创建又依赖于 A，当需要补全B的属性时 A 还是没有创建完，所以会出现死循环。\"},\"886\":{\"t\":\"（2） 二级缓存能解决吗？\"},\"887\":{\"t\":\"img\"},\"888\":{\"t\":\"有了二级缓存其实这个事处理起来就容易了，一个缓存用于存放成品对象，另外一个缓存用于存放半成品对象。\"},\"889\":{\"t\":\"A 在创建半成品对象后存放到缓存中，接下来补充 A 对象中依赖 B 的属性。\"},\"890\":{\"t\":\"B 继续创建，创建的半成品同样放到缓存中，在补充对象的 A 属性时，可以从半成品缓存中获取，现在 B 就是一个完整对象了，而接下来像是递归操作一样 A 也是一个完整对象了。\"},\"891\":{\"t\":\"（3） 三级缓存解决什么？\"},\"892\":{\"t\":\"img\"},\"893\":{\"t\":\"有了二级缓存都能解决 Spring 依赖了，怎么要有三级缓存呢。其实我们在前面分析源码时也提到过，三级缓存主要是解决 Spring AOP 的特性。AOP 本身就是对方法的增强，是 ObjectFactory<?> 类型的 lambda 表达式，而 Spring 的原则又不希望将此类类型的 Bean 前置创建，所以要存放到三级缓存中处理。\"},\"894\":{\"t\":\"其实整体处理过程类似，唯独是 B 在填充属性 A 时，先查询成品缓存、再查半成品缓存，最后在看看有没有单例工程类在三级缓存中。最终获取到以后调用 getObject 方法返回代理引用或者原始引用。\"},\"895\":{\"t\":\"至此也就解决了 Spring AOP 所带来的三级缓存问题。本章节涉及到的 AOP 依赖有源码例子，可以进行调试\"},\"896\":{\"t\":\"（4）总结\"},\"897\":{\"t\":\"回顾本文基本以实际操作的例子开始，引导大家对循环依赖有一个整体的认识，也对它的解决方案可以上手的例子，这样对后续的关于 Spring 对循环依赖的解决也就不会那么陌生了。\"},\"898\":{\"t\":\"通篇全文下来大家也可以看到，三级缓存并不是非必须不可，只不过在满足 Spring 自身创建的原则下，是必须的。如果你可以下载 Spring 源码对这部分代码进行改动下，提前创建 AOP 对象保存到缓存中，那么二级缓存一样可以解决循环依赖问题。\"},\"899\":{\"h\":\"Spring Boot自动配置原理\",\"a\":\"spring-boot自动配置原理\"},\"900\":{\"t\":\"在Spring程序main方法中，添加@SpringBootApplication或者@EnableAutoConfiguration会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建的Spring容器中的bean。Spring Boot 通过@EnableAutoConfiguration开启自动装配，通过 SpringFactoriesLoader 最终加载META-INF/spring.factories中的自动配置类实现自动装配，自动配置类其实就是通过@Conditional按需加载的配置类，想要其生效必须引入spring-boot-starter-xxx包实现起步依赖。\"},\"901\":{\"t\":\"第 1 步: 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true，可在 application.properties 或 application.yml 中设置 \"},\"902\":{\"t\":\"img\"},\"903\":{\"t\":\"第 2 步 ： 用于获取EnableAutoConfiguration注解中的 exclude 和 excludeName。 \"},\"904\":{\"t\":\"img\"},\"905\":{\"t\":\"第 3 步： 获取需要自动装配的所有配置类，读取META-INF/spring.factories： spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories \"},\"906\":{\"t\":\"img\"},\"907\":{\"t\":\"从下图可以看到这个文件的配置内容都被我们读取到了。XXXAutoConfiguration的作用就是按需加载组件。 不光是这个依赖下的META-INF/spring.factories被读取到，所有 Spring Boot Starter 下的META-INF/spring.factories都会被读取到。 \"},\"908\":{\"t\":\"img\"},\"909\":{\"t\":\"参考：https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html#autoconfigurationimportselector-加载自动装配类\"},\"910\":{\"h\":\"Spring Boot 加载配置文件的优先级了解么？\",\"a\":\"spring-boot-加载配置文件的优先级了解么\"},\"911\":{\"t\":\"项目启动后扫描顺序：\"},\"912\":{\"t\":\"1）先去项目根目录找config文件夹下找配置文件件 2）再去根目录下找配置文件 3）去resources下找cofnig文件夹下找配置文件 4）去resources下找配置文件\"},\"913\":{\"t\":\"在这里插入图片描述\"},\"914\":{\"h\":\"如何使用 Spring Boot 实现全局异常处理？\",\"a\":\"如何使用-spring-boot-实现全局异常处理\"},\"915\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485568&idx=2&sn=c5ba880fd0c5d82e39531fa42cb036ac&chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&token=1729829670&lang=zh_CN#rd\"},\"916\":{\"t\":\"使用 @ControllerAdvice 和 @ExceptionHandler 处理全局异常\"},\"917\":{\"t\":\"@ExceptionHandler 处理 Controller 级别的异常\"},\"918\":{\"t\":\"例子：\"},\"919\":{\"t\":\"CustomException： public class CustomException extends RuntimeException { private AppHttpCodeEnum appHttpCodeEnum; public CustomException(AppHttpCodeEnum appHttpCodeEnum){ this.appHttpCodeEnum = appHttpCodeEnum; } public AppHttpCodeEnum getAppHttpCodeEnum() { return appHttpCodeEnum; } } \"},\"920\":{\"t\":\"ExceptionCatch： @ControllerAdvice //控制器增强类 @Slf4j public class ExceptionCatch { /** * 处理不可控异常 * @param e * @return */ @ExceptionHandler(Exception.class) @ResponseBody public ResponseResult exception(Exception e){ e.printStackTrace(); log.error(\\\"catch exception:{}\\\",e.getMessage()); return ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR); } /** * 处理可控异常 自定义异常 * @param e * @return */ @ExceptionHandler(CustomException.class) @ResponseBody public ResponseResult exception(CustomException e){ log.error(\\\"catch exception:{}\\\",e); return ResponseResult.errorResult(e.getAppHttpCodeEnum()); } } \"},\"921\":{\"h\":\"核心配置文件\",\"a\":\"核心配置文件\"},\"922\":{\"t\":\"SpringBoot的核心配置文件是application和bootstrap配置文件。\"},\"923\":{\"t\":\"application配置文件这个容易理解，主要用于Spring Boot项目的自动化配置。\"},\"924\":{\"t\":\"bootstrap配置文件有以下几个应用场景：\"},\"925\":{\"t\":\"使用Spring Cloud Config配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；\"},\"926\":{\"t\":\"一些固定的不能被覆盖的属性；\"},\"927\":{\"t\":\"一些加密/解密的场景；\"},\"928\":{\"h\":\"实现热部署的方式\",\"a\":\"实现热部署的方式\"},\"929\":{\"t\":\"这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。\"},\"930\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> </dependency> \"},\"931\":{\"h\":\"监视器和监听器\",\"a\":\"监视器和监听器\"},\"932\":{\"h\":\"监听器\",\"a\":\"监听器\"},\"933\":{\"t\":\"监听器也叫listener，是servlet的监听器，可以用于监听web应用程序中某些对象的创建、销毁、增加、修改、删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化时，服务器自动调用监听器对象中的方法，常用于系统加载时进行信息初始化，统计在线人数和在线用户，统计网站的访问量。 配置监听器的方法：\"},\"934\":{\"t\":\"通过@Component把监听器加入Spring容器中管理;\"},\"935\":{\"t\":\"在application.properties中添加context.listener.classes配置;\"},\"936\":{\"t\":\"在方法上加@EventListener注解;\"},\"937\":{\"h\":\"监控器\",\"a\":\"监控器\"},\"938\":{\"t\":\"actuator\"},\"939\":{\"t\":\" 这是springboot程序的监控系统，可以实现健康检查，info信息等。在使用之前需要引入`spring-boot-starter-actuator`，并做简单的配置即可。 引入依赖并编写好配置之后，启动项目，访问http://localhost:8080/actuator \"},\"940\":{\"t\":\"Spring Boot自带监控组件—Actuator，它可以帮助实现对程序内部运行情况的监控。Actuator轻松实现应用程序的监控治理，比如健康状况、审计、统计和HTTP追踪、Bean加载情况、环境变量、日志信息、线程信息等。 Actuator的核心是端点（Endpoint），它用来监视、提供应用程序的信息，Spring Boot提供的spring-boot-actuator组件中已经内置了非常多的Endpoint（health、info、beans、metrics、httptrace、shutdown等），每个端点都可以启用和禁用。\"},\"941\":{\"h\":\"什么是Spring Boot Starter？有哪些常用的？\",\"a\":\"什么是spring-boot-starter-有哪些常用的\"},\"942\":{\"t\":\"和自动配置一样，Spring Boot Starter的目的也是简化配置，而Spring Boot Starter解决的是依赖管理配置复杂的问题，有了它，当我需要构建一个Web应用程序时，不必再遍历所有的依赖包，一个一个地添加到项目的依赖管理中，而是只需要一个配置spring-boot-starter-web。\"},\"943\":{\"t\":\"常用的：\"},\"944\":{\"t\":\"spring-boot-starter-web - Web 和 RESTful 应用程序\"},\"945\":{\"t\":\"spring-boot-starter-test - 单元测试和集成测试\"},\"946\":{\"t\":\"spring-boot-starter-parent有什么作用？\"},\"947\":{\"t\":\"我们知道，新建一个SpringBoot项目，默认都是有parent的，这个parent就是spring-boot-starter-parent，spring-boot-starter-parent主要有如下作用：\"},\"948\":{\"t\":\"定义了Java编译版本\"},\"949\":{\"t\":\"使用UTF-8格式编码\"},\"950\":{\"t\":\"继承自spring-boor-dependencies，这里面定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号\"},\"951\":{\"t\":\"执行打包操作的配置\"},\"952\":{\"t\":\"自动化的资源过滤\"},\"953\":{\"t\":\"自动化的插件配置\"},\"954\":{\"h\":\"Spring Boot四大核心组件\",\"a\":\"spring-boot四大核心组件\"},\"955\":{\"t\":\"四大组件分别是：starter， autoconfigure, CLI 以及actuator。\"},\"956\":{\"t\":\"autoconfigure在我们的开发中并不会被感知，因为它是存在与我们的starter中的。所以我们的每个starter都是依赖autoconfigure的。\"},\"957\":{\"t\":\"Spring Boot CLI是一个命令行使用Spring Boot的客户端工具；主要功能如下：\"},\"958\":{\"t\":\"运行groovy脚本 => 官网2.1\"},\"959\":{\"t\":\"打包groovy文件到jar => 官网2.3\"},\"960\":{\"t\":\"初始化Spring Boot项目 => 官网2.4\"},\"961\":{\"t\":\"其他\"},\"962\":{\"t\":\"actuator是Spring Boot的监控插件，本身提供了很多接口可以获取当前项目的各项运行状态指标。\"},\"963\":{\"h\":\"MyBatis Dao接口原理\",\"a\":\"mybatis-dao接口原理\"},\"964\":{\"h\":\"MyBatis分页原理\",\"a\":\"mybatis分页原理\"},\"965\":{\"t\":\"img\"},\"966\":{\"t\":\"总结一下：\"},\"967\":{\"t\":\"通过page对象作为分页依据\"},\"968\":{\"t\":\"通过count来进行查询总条数的限制\"},\"969\":{\"t\":\"对原sql通过limit来进行分页的效果\"},\"970\":{\"t\":\"参考：https://blog.csdn.net/xiaolegeaizy/article/details/108461284\"},\"971\":{\"h\":\"MyBatis 是如何进行分页的？分页插件的原理是什么？\",\"a\":\"mybatis-是如何进行分页的-分页插件的原理是什么\"},\"972\":{\"t\":\"答：\"},\"973\":{\"t\":\"(1) MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；\"},\"974\":{\"t\":\"(2) 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能；\"},\"975\":{\"t\":\"(3) 也可以使用分页插件来完成物理分页。\"},\"976\":{\"t\":\"分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。\"},\"977\":{\"t\":\"举例： select _ from student ，拦截 sql 后重写为： select t._ from （select \\\\* from student）t limit 0，10 \"},\"978\":{\"t\":\"MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 invoke() 方法，当然，只会拦截那些指定需要拦截的方法。\"},\"979\":{\"t\":\"实现 MyBatis 的 Interceptor 接口并复写 intercept() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，在配置文件中配置编写的插件。\"},\"980\":{\"h\":\"MyBatis缓存机制(一级缓存、二级缓存、三级缓存)\",\"a\":\"mybatis缓存机制-一级缓存、二级缓存、三级缓存\"},\"981\":{\"h\":\"一级缓存：\",\"a\":\"一级缓存\"},\"982\":{\"t\":\"作用域是同一个 SqlSession，在同一个 sqlSession 中两次执行相同的 sql 语句， 第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取,从而提高查询效率。当一个 sqlSession 结束后该 sqlSession 中的 一级缓存也就不存在了。Mybatis 默认开启一级缓存。 一级缓存内部存储使用一个 HashMap，key 为 hashCode+sqlId+Sql 语句。value 为 从查询出来映射生成的 java 对象 sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。\"},\"983\":{\"h\":\"二级缓存：\",\"a\":\"二级缓存\"},\"984\":{\"t\":\"是多个 SqlSession 共享的，其作用域是 mapper 的同一个 namespace，不同 的 sqlSession 两次执行相同 namespace 下的 sql 语句且向 sql 中传递参数也相同即最终执行 相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从 缓存中获取数据将不再从数据库查询，从而提高查询效率。Mybatis 默认没有开启二级缓存 需要在 setting 全局参数中配置开启二级缓存。\"},\"985\":{\"t\":\"在yml中添加以下代码：\"},\"986\":{\"t\":\"在这里插入图片描述\"},\"987\":{\"t\":\"然后在对应的mapper.xml里面加入配置：\"},\"988\":{\"t\":\"在这里插入图片描述\"},\"989\":{\"t\":\"注意：开启二级缓存后，对应的pojo一定要实现Serializable，否则在序列化的时候会报错。 readOnly：是否只读 。 值为true时，mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为了加快获取速度，直接会将数据在缓存中的引用交给用户，不安全，但速度快。 值为false时，mybatis觉得获取的数据可能会被修改，mybatis会利用序列化&反序列化的技术克隆一份新的数据给你，安全，但速度慢。\"},\"990\":{\"h\":\"三级缓存：\",\"a\":\"三级缓存\"},\"991\":{\"t\":\"Mybatis 的一级缓存与二级缓存 只适用于单体项目，在分布式服务或者微服务架构下 都会出现数据不一致问题。所以Mybatis 为我们提供了自定义缓存 我们可以集成很多三方中间件来做缓存 这里就那Redis来说一下。\"},\"992\":{\"t\":\"在这里插入图片描述\"},\"993\":{\"h\":\"总结：\",\"a\":\"总结\"},\"994\":{\"t\":\"一级缓存的作用域是一个sqlsession内；二级缓存作用域是针对mapper进行缓存；\"},\"995\":{\"t\":\"一级缓存是默认开启的；二级缓存需要手动配置；\"},\"996\":{\"t\":\"一级缓存sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。sqlSession.close()后一级缓存也没有了。但是销毁sqlSession后会将里面的缓存存到二级缓存中；\"},\"997\":{\"t\":\"二级缓存cache中readonly属性如果为false 那么相应的pojo类必须实现Serializable接口 并且其缓存查询到的对象都是通过序列化或者反序列化克隆的，所以对象之间两两不相等；\"},\"998\":{\"t\":\"二级缓存的生命周期和应用同步，它是用来解决一级缓存不能跨会话共享数据的问题，范围是namespace级别的，可以被多个会话共享(只要是同一个接口的相同方法，都可以进行共享)。\"},\"999\":{\"t\":\"只要没有显式地设置cacheEnabled为false，都会使用CachingExector装饰基本的执行器(SIMPLE、REUSE、BATCH)。 二级缓存总是默认开启的，但是每个Mapper的二级开关是默认关闭的。\"},\"1000\":{\"t\":\"二级缓存进行增删改操作也会刷新二级缓存，导致二级缓存失效；\"},\"1001\":{\"t\":\"二级缓存的执行流程：\"},\"1002\":{\"t\":\"在这里插入图片描述\"},\"1003\":{\"t\":\"参考：https://blog.csdn.net/weixin_45161172/article/details/129526131\"},\"1004\":{\"h\":\"Kafka\"},\"1005\":{\"h\":\"数据保存的策略\",\"a\":\"数据保存的策略\"},\"1006\":{\"t\":\"kafka 有两种数据保存策略:\"},\"1007\":{\"t\":\"1、按照过期时间保留\"},\"1008\":{\"t\":\"2、按照存储的消息大小保留\"},\"1009\":{\"t\":\"Kafka Broker默认的消息保留策略是：要么保留一定时间，要么保留到消息达到一定大小的字节数。\"},\"1010\":{\"t\":\"当消息达到设置的条件上限时，旧消息就会过期并被删除，所以，在任何时刻，可用消息的总量都不会超过配置参数所指定的大小。\"},\"1011\":{\"t\":\"topic可以配置自己的保留策略，可以将消息保留到不再使用他们为止。\"},\"1012\":{\"t\":\"因为在一个大文件里查找和删除消息是很费时的事，也容易出错，所以，分区被划分为若干个片段。默认情况下，每个片段包含1G或者一周的数据，以较小的那个为准。在broker往leader分区写入消息时，如果达到片段上限，就关闭当前文件，并打开一个新文件。当前正在写入数据的片段叫活跃片段。当所有片段都被写满时，会清除下一个分区片段的数据，如果配置的是7个片段，每天打开一个新片段，就会删除一个最老的片段，循环使用所有片段。\"},\"1013\":{\"t\":\"kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？ 这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。\"},\"1014\":{\"h\":\"分区策略\",\"a\":\"分区策略\"},\"1015\":{\"h\":\"生产者：\",\"a\":\"生产者\"},\"1016\":{\"t\":\"为什么要分区\"},\"1017\":{\"t\":\"多Partition分布式存储，利于集群数据的均衡。\"},\"1018\":{\"t\":\"并发读写，加快读写速度。\"},\"1019\":{\"t\":\"加快数据恢复的速率：当某台机器挂了，每个Topic仅需恢复一部分的数据，多机器并发。\"},\"1020\":{\"t\":\"分区的原则\"},\"1021\":{\"t\":\"指明partition的情况下，使用指定的partition；\"},\"1022\":{\"t\":\"没有指明partition，但是有key的情况下，将key的hash值与topic的partition数进行取余得到partition值；\"},\"1023\":{\"t\":\"既没有指定partition，也没有key的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与topic可用的partition数取余得到partition值，也就是常说的round-robin算法。\"},\"1024\":{\"t\":\"public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) { List<PartitionInfo> partitions = cluster.partitionsForTopic(topic); int numPartitions = partitions.size(); if (keyBytes == null) { //key为空时，获取一个自增的计数，然后对分区做取模得到分区编号 int nextValue = nextValue(topic); List<PartitionInfo> availablePartitions = cluster.availablePartitionsForTopic(topic); if (availablePartitions.size() > 0) { int part = Utils.toPositive(nextValue) % availablePartitions.size(); return availablePartitions.get(part).partition(); } else { // no partitions are available, give a non-available partition return Utils.toPositive(nextValue) % numPartitions; } } else { // hash the keyBytes to choose a partition // key不为空时，通过key的hash对分区取模（疑问：为什么这里不像上面那样，使用availablePartitions呢？） // 根据《Kafka权威指南》Page45理解：为了保证相同的键，总是能路由到固定的分区，如果使用可用分区，那么因为分区数变化，会导致相同的key，路由到不同分区 // 所以如果要使用key来映射分区，最好在创建主题的时候就把分区规划好 return Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions; } } private int nextValue(String topic) { //为每个topic维护了一个AtomicInteger对象，每次获取时+1 AtomicInteger counter = topicCounterMap.get(topic); if (null == counter) { counter = new AtomicInteger(ThreadLocalRandom.current().nextInt()); AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter); if (currentCounter != null) { counter = currentCounter; } } return counter.getAndIncrement(); } \"},\"1025\":{\"h\":\"消费者：\",\"a\":\"消费者\"},\"1026\":{\"t\":\"分区分配策略\"},\"1027\":{\"t\":\"一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及到partition的分配问题，即确定哪个partition由哪个consumer来消费。Kafka提供了3种消费者分区分配策略：RangeAssigor、RoundRobinAssignor、StickyAssignor。\"},\"1028\":{\"t\":\"PartitionAssignor接口用于用户定义实现分区分配算法，以实现Consumer之间的分区分配。消费组的成员订阅它们感兴趣的Topic并将这种订阅关系传递给作为订阅组协调者的Broker。协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者。Kafka默认采用RangeAssignor的分配算法。\"},\"1029\":{\"t\":\"RangeAssignor\"},\"1030\":{\"t\":\"RangeAssignor对每个Topic进行独立的分区分配。对于每一个Topic，首先对分区按照分区ID进行排序，然后订阅这个Topic的消费组的消费者再进行排序，之后尽量均衡的将分区分配给消费者。这里只能是尽量均衡，因为分区数可能无法被消费者数量整除，那么有一些消费者就会多分配到一些分区。分配示意图如下：\"},\"1031\":{\"t\":\"f4108e1816b3087f38b546372e214958.png\"},\"1032\":{\"t\":\"分区分配的算法如下：\"},\"1033\":{\"t\":\"@Override public Map<String, List<TopicPartition>> assign(Map<String, Integer> partitionsPerTopic, Map<String, Subscription> subscriptions) { Map<String, List<String>> consumersPerTopic = consumersPerTopic(subscriptions); Map<String, List<TopicPartition>> assignment = new HashMap<>(); for (String memberId : subscriptions.keySet()) assignment.put(memberId, new ArrayList<TopicPartition>()); //for循环对订阅的多个topic分别进行处理 for (Map.Entry<String, List<String>> topicEntry : consumersPerTopic.entrySet()) { String topic = topicEntry.getKey(); List<String> consumersForTopic = topicEntry.getValue(); Integer numPartitionsForTopic = partitionsPerTopic.get(topic); if (numPartitionsForTopic == null) continue; //对消费者进行排序 Collections.sort(consumersForTopic); //计算平均每个消费者分配的分区数 int numPartitionsPerConsumer = numPartitionsForTopic / consumersForTopic.size(); //计算平均分配后多出的分区数 int consumersWithExtraPartition = numPartitionsForTopic % consumersForTopic.size(); List<TopicPartition> partitions = AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic); for (int i = 0, n = consumersForTopic.size(); i < n; i++) { //计算第i个消费者，分配分区的起始位置 int start = numPartitionsPerConsumer * i + Math.min(i, consumersWithExtraPartition); //计算第i个消费者，分配到的分区数量 int length = numPartitionsPerConsumer + (i + 1 > consumersWithExtraPartition ? 0 : 1); assignment.get(consumersForTopic.get(i)).addAll(partitions.subList(start, start + length)); } } return assignment; } \"},\"1034\":{\"t\":\"这种分配方式明显的一个问题是随着消费者订阅的Topic的数量的增加，不均衡的问题会越来越严重，比如上图中4个分区3个消费者的场景，C0会多分配一个分区。如果此时再订阅一个分区数为4的Topic，那么C0又会比C1、C2多分配一个分区，这样C0总共就比C1、C2多分配两个分区了，而且随着Topic的增加，这个情况会越来越严重。分配结果：\"},\"1035\":{\"t\":\"eff9adb5a086691e56b5d68bec68ffcf.png\"},\"1036\":{\"t\":\"订阅2个Topic，每个Topic4个分区，共3个Consumer\"},\"1037\":{\"t\":\"C0：[T0P0，T0P1，T1P0，T1P1]\"},\"1038\":{\"t\":\"C1：[T0P2，T1P2]\"},\"1039\":{\"t\":\"C2：[T0P3，T1P3]\"},\"1040\":{\"t\":\"RoundRobinAssignor\"},\"1041\":{\"t\":\"RoundRobinAssignor的分配策略是将消费组内订阅的所有Topic的分区及所有消费者进行排序后尽量均衡的分配（RangeAssignor是针对单个Topic的分区进行排序分配的）。如果消费组内，消费者订阅的Topic列表是相同的（每个消费者都订阅了相同的Topic），那么分配结果是尽量均衡的（消费者之间分配到的分区数的差值不会超过1）。如果订阅的Topic列表是不同的，那么分配结果是不保证“尽量均衡”的，因为某些消费者不参与一些Topic的分配。\"},\"1042\":{\"t\":\"51b27d00cf50d9aca86e0934ab42a565.png\"},\"1043\":{\"t\":\"以上两个topic的情况，相比于之前RangeAssignor的分配策略，可以使分区分配的更均衡。不过考虑这种情况，假设有三个消费者分别为C0、C1、C2，有3个Topic T0、T1、T2，分别拥有1、2、3个分区，并且C0订阅T0，C1订阅T0和T1，C2订阅T0、T1、T2，那么RoundRobinAssignor的分配结果如下：\"},\"1044\":{\"t\":\"4e161a06a0afcae8d2c06603d676de4e.png\"},\"1045\":{\"t\":\"看上去分配已经尽量的保证均衡了，不过可以发现C2承担了4个分区的消费而C1订阅了T1，是不是把T1P1交给C1消费能更加的均衡呢？\"},\"1046\":{\"t\":\"StickyAssignor\"},\"1047\":{\"t\":\"StickyAssignor分区分配算法，目的是在执行一次新的分配时，能在上一次分配的结果的基础上，尽量少的调整分区分配的变动，节省因分区分配变化带来的开销。Sticky是“粘性的”，可以理解为分配结果是带“粘性的”——每一次分配变更相对上一次分配做最少的变动。其目标有两点：\"},\"1048\":{\"t\":\"分区的分配尽量的均衡。\"},\"1049\":{\"t\":\"每一次重分配的结果尽量与上一次分配结果保持一致。\"},\"1050\":{\"t\":\"当这两个目标发生冲突时，优先保证第一个目标。第一个目标是每个分配算法都尽量尝试去完成的，而第二个目标才真正体现出StickyAssignor特性的。\"},\"1051\":{\"t\":\"StickyAssignor算法比较复杂，下面举例来说明分配的效果（对比RoundRobinAssignor），前提条件：\"},\"1052\":{\"t\":\"有4个Topic：T0、T1、T2、T3，每个Topic有2个分区。\"},\"1053\":{\"t\":\"有3个Consumer：C0、C1、C2，所有Consumer都订阅了这4个分区。\"},\"1054\":{\"t\":\"eb5597ed0b81b03c762e54ff3f909492.png\"},\"1055\":{\"t\":\"上面红色的箭头代表的是有变动的分区分配，可以看出，StickyAssignor的分配策略，变动较小。\"},\"1056\":{\"t\":\"参考：https://blog.csdn.net/easylife206/article/details/124580641?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-124580641-blog-124349832.235^v28^pc_relevant_t0_download&spm=1001.2101.3001.4242.3&utm_relevant_index=7\"},\"1057\":{\"h\":\"kafka如何保证消息不被重复消费\",\"a\":\"kafka如何保证消息不被重复消费\"},\"1058\":{\"h\":\"原因\",\"a\":\"原因\"},\"1059\":{\"t\":\"（1）kafka有个offset的概念，当每个消息被写进去后，都有一个offset，代表他的序号，然后consumer消费该数据之后，隔一段时间，会把自己消费过的消息的offset提交一下，代表我已经消费过了。下次我要是重启，就会继续从上次消费到的offset来继续消费。但是当我们直接kill进程了，再重启。这会导致consumer有些消息处理了，但是没来得及提交offset。等重启之后，少数消息就会再次消费一次 （2）在Kafka中有一个Partition Balance机制，就是把多个Partition均衡的分配给多个消费者。消费端会从分配到的Partition里面去消费消息，如果消费者在默认的5分钟内没有处理完这一批消息。就会触发Kafka的Rebalance机制，从而导致offset自动提交失败。而Rebalance之后，消费者还是会从之前没提交的offset位置开始消费，从而导致消息重复消费。\"},\"1060\":{\"h\":\"解决方案\",\"a\":\"解决方案\"},\"1061\":{\"t\":\"开启kafka本身存在的幂等性：\"},\"1062\":{\"t\":\"在这里插入图片描述\"},\"1063\":{\"t\":\"注： 添加唯一ID，类似于数据库的主键，用于唯一标记一个消息。 ProducerID：#在每个新的Producer初始化时，会被分配一个唯一的PID SequenceNumber：#对于每个PID发送数据的每个Topic都对应一个从0开始单调递增的SN值。\"},\"1064\":{\"t\":\"将获取的唯一id存表，（利用mySQl的唯一键约束，或者redis天然的set结构）\"},\"1065\":{\"t\":\"参考：https://blog.csdn.net/m0_51167384/article/details/128106266?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&utm_relevant_index=8&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2Mjc4NDAvYXJ0aWNsZS9kZXRhaWxzLzc2NDM1Mzg1P3NwbT0xMDAxLjIxMDEuMzAwMS42NjUwLjEmdXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RVJhdGUtMS03NjQzNTM4NS1ibG9nLTExNzQxOTA1OC4yMzUlNUV2MjglNUVwY19yZWxldmFudF90MF9kb3dubG9hZCZkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VSYXRlLTEtNzY0MzUzODUtYmxvZy0xMTc0MTkwNTguMjM1JTVFdjI4JTVFcGNfcmVsZXZhbnRfdDBfZG93bmxvYWQmdXRtX3JlbGV2YW50X2luZGV4PTI%3D\"},\"1066\":{\"h\":\"如何保证消息的顺序性?\",\"a\":\"如何保证消息的顺序性\"},\"1067\":{\"h\":\"为什么要保证顺序？\",\"a\":\"为什么要保证顺序\"},\"1068\":{\"t\":\"消息队列中的若干消息如果是对同一个数据进行操作, 这些操作具有前后关系, 必须要按前后的顺序执行, 否则就会造成数据异常.\"},\"1069\":{\"h\":\"出现顺序错乱的场景：\",\"a\":\"出现顺序错乱的场景\"},\"1070\":{\"t\":\"第一种情况: 一个queue, 有多个consumer去消费, 这样就会造成顺序的错误, consumer从MQ里面读取数据是有序的, 但是每个consumer的执行时间是不固定的, 无法保证先读到消息的consumer一定先完成操作, 这样就会出现消息并没有按照顺序执行, 造成数据顺序错误。 \"},\"1071\":{\"t\":\"img\"},\"1072\":{\"t\":\"第二种情况: 一个queue对应一个consumer, 但是consumer里面进行了多线程消费, 这样也会造成消息消费顺序错误。 \"},\"1073\":{\"t\":\"img\"},\"1074\":{\"h\":\"如何保证消息的消费顺序？\",\"a\":\"如何保证消息的消费顺序\"},\"1075\":{\"t\":\"第一种方案: 拆分多个queue, 每一个queue一个consumer, 就是多一些queue而已, 确实是麻烦点; 这样也会造成吞吐量下降, 可以在消费者内部采用多线程的方式去消费。 \"},\"1076\":{\"t\":\"img\"},\"1077\":{\"t\":\"第二种方案: 就是一个queue对应一个consumer, 然后这个consumer内部用内存队列做排队, 然后分发给底层不同的worker来处理。 \"},\"1078\":{\"t\":\"img\"},\"1079\":{\"t\":\"参考：https://blog.csdn.net/qq_44901983/article/details/123416498\"},\"1080\":{\"h\":\"Linux常用命令\"},\"1081\":{\"h\":\"常用的命令\",\"a\":\"常用的命令\"},\"1082\":{\"h\":\"内核\",\"a\":\"内核\"},\"1083\":{\"h\":\"基本组件\",\"a\":\"基本组件\"},\"1084\":{\"h\":\"进程间通信方式\",\"a\":\"进程间通信方式\"},\"1085\":{\"h\":\"目录结构\",\"a\":\"目录结构\"},\"1086\":{\"t\":\"Linux 使用一种称为目录树的层次结构来组织文件和目录。目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。每个目录可以包含文件和其他子目录。结构层次鲜明，就像一棵倒立的树。\"},\"1087\":{\"h\":\"内存管理\"},\"1088\":{\"h\":\"1.虚拟内存管理\",\"a\":\"_1-虚拟内存管理\"},\"1089\":{\"h\":\"1.1局部性原理\",\"a\":\"_1-1局部性原理\"},\"1090\":{\"t\":\"在了解这部分知识之前，我要先告诉大家一个常见的局部性原理：\"},\"1091\":{\"t\":\"相关信息\"},\"1092\":{\"t\":\"程序局部性原理表现为：时间局部性和空间局部性。时间局部性是指如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某块数据被访问，则不久之后该数据可能再次被访问。空间局部性是指一旦程序访问了某个存储单元，则不久之后，其附近的存储单元也将被访问。\"},\"1093\":{\"t\":\"说白了就是一个变量在程序运行过程中，如果被引用过一次，那后续很有可能会再被引用到；一个变量被访问到过后，这个变量所在的位置附近的位置很有可能在程序后续运行中被访问到。\"},\"1094\":{\"t\":\"下面我们通过一段代码来看看局部性原理：\"},\"1095\":{\"t\":\"public int sum(int[] array) { int sum = 0; for (int i = 0; i < array.length; i++) { sum = sum + array[i]; } return sum; } \"},\"1096\":{\"t\":\"从上面的这段代码来看，就是一个很简单的数组元素求和，这里我们主要看 sum 和 array 两个变量，我们可以看到 sum 在每次循环中都会用到，另外它只是一个简单变量，所以我们可以看到，sum 是符合我们上面提到的时间局部性，再访问一次后还会被继续访问到，但是它不存在我们所说的空间局部性了。\"},\"1097\":{\"t\":\"相反的，array 数组中的每个元素只访问一次，另外数组底层的存储是连续的，所以 array 变量符合我们上面提到的空间局部性，但是不符合时间局部性。\"},\"1098\":{\"h\":\"2.2为什么需要虚拟内存？\",\"a\":\"_2-2为什么需要虚拟内存\"},\"1099\":{\"t\":\"image.png\"},\"1100\":{\"h\":\"操作系统\"},\"1101\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1102\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1103\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1104\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1105\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1106\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1107\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1108\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1109\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1110\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1111\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1112\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1113\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1114\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1115\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1116\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1117\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1118\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1119\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1120\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1121\":{\"t\":\"锁：加锁、解锁操作；\"},\"1122\":{\"t\":\"信号量：P、V 操作；\"},\"1123\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1124\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1125\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1126\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1127\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1128\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1129\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1130\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1131\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1132\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1133\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1134\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1135\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1136\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1137\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1138\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1139\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1140\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1141\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1142\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1143\":{\"t\":\"img\"},\"1144\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1145\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1146\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1147\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1148\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1149\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1150\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1151\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1152\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1153\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1154\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1155\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1156\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1157\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1158\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1159\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1160\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1161\":{\"t\":\"mmap + write\"},\"1162\":{\"t\":\"sendfile\"},\"1163\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1164\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1165\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1166\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1167\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1168\":{\"t\":\"img\"},\"1169\":{\"t\":\"具体过程如下：\"},\"1170\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1171\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1172\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1173\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1174\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1175\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1176\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1177\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1178\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1179\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1180\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1181\":{\"t\":\"img\"},\"1182\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1183\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1184\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1185\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1186\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1187\":{\"t\":\"img\"},\"1188\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1189\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1190\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1191\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1192\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1193\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1194\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1195\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1196\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1197\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1198\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1199\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1200\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1201\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1202\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1203\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1204\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1205\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1206\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1207\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1208\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1209\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1210\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1211\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1212\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1213\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1214\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1215\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1216\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1217\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1218\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1219\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1220\":{\"t\":\"img\"},\"1221\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1222\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1223\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1224\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1225\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1226\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1227\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1228\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1229\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1230\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1231\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1232\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1233\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1234\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1235\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1236\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1237\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1238\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1239\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1240\":{\"t\":\"img\"},\"1241\":{\"t\":\"详细说一下这个方案：\"},\"1242\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1243\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1244\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1245\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1246\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1247\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1248\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1249\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1250\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1251\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1252\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1253\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1254\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1255\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1256\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1257\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1258\":{\"t\":\"img\"},\"1259\":{\"t\":\"方案详细说明如下：\"},\"1260\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1261\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1262\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1263\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1264\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1265\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1266\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1267\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1268\":{\"h\":\"操作系统\"},\"1269\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1270\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1271\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1272\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1273\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1274\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1275\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1276\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1277\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1278\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1279\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1280\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1281\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1282\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1283\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1284\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1285\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1286\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1287\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1288\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1289\":{\"t\":\"锁：加锁、解锁操作；\"},\"1290\":{\"t\":\"信号量：P、V 操作；\"},\"1291\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1292\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1293\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1294\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1295\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1296\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1297\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1298\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1299\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1300\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1301\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1302\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1303\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1304\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1305\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1306\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1307\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1308\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1309\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1310\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1311\":{\"t\":\"img\"},\"1312\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1313\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1314\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1315\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1316\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1317\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1318\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1319\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1320\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1321\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1322\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1323\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1324\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1325\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1326\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1327\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1328\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1329\":{\"t\":\"mmap + write\"},\"1330\":{\"t\":\"sendfile\"},\"1331\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1332\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1333\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1334\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1335\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1336\":{\"t\":\"img\"},\"1337\":{\"t\":\"具体过程如下：\"},\"1338\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1339\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1340\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1341\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1342\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1343\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1344\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1345\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1346\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1347\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1348\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1349\":{\"t\":\"img\"},\"1350\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1351\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1352\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1353\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1354\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1355\":{\"t\":\"img\"},\"1356\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1357\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1358\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1359\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1360\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1361\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1362\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1363\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1364\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1365\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1366\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1367\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1368\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1369\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1370\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1371\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1372\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1373\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1374\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1375\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1376\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1377\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1378\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1379\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1380\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1381\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1382\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1383\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1384\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1385\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1386\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1387\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1388\":{\"t\":\"img\"},\"1389\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1390\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1391\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1392\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1393\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1394\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1395\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1396\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1397\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1398\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1399\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1400\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1401\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1402\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1403\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1404\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1405\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1406\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1407\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1408\":{\"t\":\"img\"},\"1409\":{\"t\":\"详细说一下这个方案：\"},\"1410\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1411\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1412\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1413\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1414\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1415\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1416\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1417\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1418\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1419\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1420\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1421\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1422\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1423\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1424\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1425\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1426\":{\"t\":\"img\"},\"1427\":{\"t\":\"方案详细说明如下：\"},\"1428\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1429\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1430\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1431\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1432\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1433\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1434\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1435\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1436\":{\"h\":\"操作系统\"},\"1437\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1438\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1439\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1440\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1441\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1442\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1443\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1444\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1445\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1446\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1447\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1448\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1449\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1450\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1451\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1452\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1453\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1454\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1455\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1456\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1457\":{\"t\":\"锁：加锁、解锁操作；\"},\"1458\":{\"t\":\"信号量：P、V 操作；\"},\"1459\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1460\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1461\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1462\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1463\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1464\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1465\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1466\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1467\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1468\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1469\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1470\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1471\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1472\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1473\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1474\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1475\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1476\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1477\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1478\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1479\":{\"t\":\"img\"},\"1480\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1481\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1482\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1483\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1484\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1485\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1486\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1487\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1488\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1489\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1490\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1491\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1492\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1493\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1494\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1495\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1496\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1497\":{\"t\":\"mmap + write\"},\"1498\":{\"t\":\"sendfile\"},\"1499\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1500\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1501\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1502\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1503\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1504\":{\"t\":\"img\"},\"1505\":{\"t\":\"具体过程如下：\"},\"1506\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1507\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1508\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1509\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1510\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1511\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1512\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1513\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1514\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1515\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1516\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1517\":{\"t\":\"img\"},\"1518\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1519\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1520\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1521\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1522\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1523\":{\"t\":\"img\"},\"1524\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1525\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1526\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1527\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1528\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1529\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1530\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1531\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1532\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1533\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1534\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1535\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1536\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1537\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1538\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1539\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1540\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1541\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1542\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1543\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1544\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1545\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1546\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1547\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1548\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1549\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1550\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1551\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1552\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1553\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1554\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1555\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1556\":{\"t\":\"img\"},\"1557\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1558\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1559\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1560\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1561\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1562\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1563\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1564\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1565\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1566\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1567\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1568\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1569\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1570\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1571\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1572\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1573\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1574\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1575\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1576\":{\"t\":\"img\"},\"1577\":{\"t\":\"详细说一下这个方案：\"},\"1578\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1579\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1580\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1581\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1582\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1583\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1584\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1585\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1586\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1587\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1588\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1589\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1590\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1591\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1592\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1593\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1594\":{\"t\":\"img\"},\"1595\":{\"t\":\"方案详细说明如下：\"},\"1596\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1597\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1598\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1599\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1600\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1601\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1602\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1603\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1604\":{\"h\":\"操作系统\"},\"1605\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1606\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1607\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1608\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1609\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1610\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1611\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1612\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1613\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1614\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1615\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1616\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1617\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1618\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1619\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1620\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1621\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1622\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1623\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1624\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1625\":{\"t\":\"锁：加锁、解锁操作；\"},\"1626\":{\"t\":\"信号量：P、V 操作；\"},\"1627\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1628\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1629\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1630\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1631\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1632\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1633\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1634\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1635\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1636\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1637\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1638\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1639\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1640\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1641\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1642\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1643\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1644\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1645\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1646\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1647\":{\"t\":\"img\"},\"1648\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1649\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1650\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1651\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1652\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1653\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1654\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1655\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1656\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1657\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1658\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1659\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1660\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1661\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1662\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1663\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1664\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1665\":{\"t\":\"mmap + write\"},\"1666\":{\"t\":\"sendfile\"},\"1667\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1668\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1669\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1670\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1671\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1672\":{\"t\":\"img\"},\"1673\":{\"t\":\"具体过程如下：\"},\"1674\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1675\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1676\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1677\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1678\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1679\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1680\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1681\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1682\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1683\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1684\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1685\":{\"t\":\"img\"},\"1686\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1687\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1688\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1689\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1690\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1691\":{\"t\":\"img\"},\"1692\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1693\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1694\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1695\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1696\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1697\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1698\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1699\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1700\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1701\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1702\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1703\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1704\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1705\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1706\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1707\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1708\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1709\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1710\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1711\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1712\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1713\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1714\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1715\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1716\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1717\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1718\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1719\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1720\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1721\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1722\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1723\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1724\":{\"t\":\"img\"},\"1725\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1726\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1727\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1728\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1729\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1730\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1731\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1732\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1733\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1734\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1735\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1736\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1737\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1738\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1739\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1740\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1741\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1742\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1743\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1744\":{\"t\":\"img\"},\"1745\":{\"t\":\"详细说一下这个方案：\"},\"1746\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1747\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1748\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1749\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1750\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1751\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1752\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1753\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1754\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1755\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1756\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1757\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1758\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1759\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1760\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1761\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1762\":{\"t\":\"img\"},\"1763\":{\"t\":\"方案详细说明如下：\"},\"1764\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1765\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1766\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1767\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1768\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1769\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1770\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1771\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1772\":{\"h\":\"Docker\"},\"1773\":{\"h\":\"Docker\",\"a\":\"docker\"},\"1774\":{\"h\":\"什么是 Docker?\",\"a\":\"什么是-docker\"},\"1775\":{\"t\":\"Docker 是世界领先的软件容器平台。\"},\"1776\":{\"t\":\"Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 UnionFS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\"},\"1777\":{\"t\":\"Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。\"},\"1778\":{\"t\":\"用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\"},\"1779\":{\"h\":\"Docker的架构\",\"a\":\"docker的架构\"},\"1780\":{\"t\":\"Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，模块各司其职。下图是它的总体架构图：\"},\"1781\":{\"t\":\"img\"},\"1782\":{\"t\":\"用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。\"},\"1783\":{\"t\":\"Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。\"},\"1784\":{\"t\":\"Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。\"},\"1785\":{\"t\":\"Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graphdriver 将下载镜像以 Graph 的形式存储。\"},\"1786\":{\"t\":\"当需要为 Docker 创建网络环境时，通过网络管理驱动 Networkdriver 创建并配置 Docker容器网络环境。\"},\"1787\":{\"t\":\"当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。\"},\"1788\":{\"t\":\"Libcontainer 是一项独立的容器管理包，Networkdriver 以及 Execdriver 都是通过 Libcontainer 来实现具体对容器进行的操作。\"},\"1789\":{\"h\":\"镜像和容器的相关操作\",\"a\":\"镜像和容器的相关操作\"},\"1790\":{\"h\":\"Spring Cloud\"},\"1791\":{\"h\":\"Spring Cloud\",\"a\":\"spring-cloud\"},\"1792\":{\"h\":\"什么是Spring Cloud？\",\"a\":\"什么是spring-cloud\"},\"1793\":{\"t\":\"Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。\"},\"1794\":{\"h\":\"微服务的概念\",\"a\":\"微服务的概念\"},\"1795\":{\"t\":\"分布式，多个模块，每一个模块都是一个单独的系统。\"},\"1796\":{\"t\":\"以前所有的代码都放在同一个工程中、部署在同一个服务器、同一项目的不同模块不同功能互相抢占资源，微服务就是将工程根据不同的业务规则拆分成微服务，部署在不同的服务器上，服务之间相互调用，java中有的微服务有dubbo(只能用来做微服务)、springcloud( 提供了服务的发现、断路器等)。\"},\"1797\":{\"t\":\"微服务的特点：\"},\"1798\":{\"t\":\"按业务划分为一个独立运行的程序，即服务单元\"},\"1799\":{\"t\":\"服务之间通过HTTP协议相互通信\"},\"1800\":{\"t\":\"自动化部署\"},\"1801\":{\"t\":\"可以用不同的编程语言\"},\"1802\":{\"t\":\"可以用不同的存储技术\"},\"1803\":{\"t\":\"服务集中化管理\"},\"1804\":{\"t\":\"微服务是一个分布式系统\"},\"1805\":{\"t\":\"微服务的优势\"},\"1806\":{\"t\":\"将一个复杂的业务拆分为若干小的业务，将复杂的业务简单化，新人只需要了解他所接管的服务的代码，减少了新人的学习成本。\"},\"1807\":{\"t\":\"由于微服务是分布式服务，服务与服务之间没有任何耦合。微服务系统的微服务单元具有很强的横向拓展能力。\"},\"1808\":{\"t\":\"服务与服务之间采用HTTP网络通信协议来通信，单个服务内部高度耦合，服务与服务之间完全独立，无耦合。这使得微服务可以采用任何的开发语言和技术来实现，提高开发效率、降低开发成本。\"},\"1809\":{\"t\":\"微服务是按照业务进行拆分的，并有坚实的服务边界，若要重写某一业务代码，不需了解所有业务，重写简单。\"},\"1810\":{\"t\":\"微服务的每个服务单元是独立部署的，即独立运行在某个进程中，微服务的修改和部署对其他服务没有影响。\"},\"1811\":{\"t\":\"微服务在CAP理论中采用的AP架构，具有高可用分区容错特点。高可用主要体现在系统7x24不间断服务，他要求系统有大量的服务器集群，从而提高系统的负载能力。分区容错也使得系统更加健壮。\"},\"1812\":{\"t\":\"微服务的不足\"},\"1813\":{\"t\":\"微服务的复杂度：构建一个微服务比较复杂，服务与服务之间通过HTTP协议或其他消息传递机制通信，开发者要选出最佳的通信机制，并解决网络服务差时带来的风险。\"},\"1814\":{\"t\":\"分布式事物：将事物分成多阶段提交，如果一阶段某一节点失败仍会导致数据不正确。如果事物涉及的节点很多，某一节点的网络出现异常会导致整个事务处于阻塞状态，大大降低数据库的性能。\"},\"1815\":{\"t\":\"服务划分：将一个完整的系统拆分成很多个服务，是一件非常困难的事，因为这涉及了具体的业务场景\"},\"1816\":{\"t\":\"服务部署：最佳部署容器Docker\"},\"1817\":{\"h\":\"Spring Cloud的优缺点以及组件\",\"a\":\"spring-cloud的优缺点以及组件\"},\"1818\":{\"t\":\"设计目标\"},\"1819\":{\"t\":\"协调各个微服务，简化分布式系统开发。\"},\"1820\":{\"t\":\"优缺点\"},\"1821\":{\"t\":\"微服务的框架那么多比如：dubbo、Kubernetes，为什么就要使用Spring Cloud的呢？\"},\"1822\":{\"t\":\"优点：\"},\"1823\":{\"t\":\"产出于Spring大家族，Spring在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善 组件丰富，功能齐全。Spring Cloud 为微服务架构提供了非常完整的支持。例如、配置管理、服务发现、断路器、微服务网关等； Spring Cloud 社区活跃度很高，教程很丰富，遇到问题很容易找到解决方案 服务拆分粒度更细，耦合度比较低，有利于资源重复利用，有利于提高开发效率 可以更精准的制定优化服务方案，提高系统的可维护性 减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发 微服务可以是跨平台的，可以用任何一种语言开发 适于互联网时代，产品迭代周期更短 \"},\"1824\":{\"t\":\"缺点：\"},\"1825\":{\"t\":\"微服务过多，治理成本高，不利于维护系统 分布式系统开发的成本高（容错，分布式事务等）对团队挑战大 \"},\"1826\":{\"t\":\"springcloud中的组件有那些？\"},\"1827\":{\"t\":\"说出主要的组件： Spring Cloud Eureka,服务注册中心,特性有失效剔除、服务保护 Spring Cloud Zuul,API服务网关,功能有路由分发和过滤 Spring Cloud Config,分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式 Spring Cloud Ribbon,客户端负载均衡,特性有区域亲和,重试机制 Spring Cloud Hystrix,客户端容错保护,特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离 Spring Cloud Feign,声明式服务调用本质上就是Ribbon+Hystrix Spring Cloud Stream,消息驱动,有Sink、Source、Processor三种通道,特性有订阅发布、消费组、消息分区 Spring Cloud Bus,消息总线,配合Config仓库修改的一种Stream实现， Spring Cloud Sleuth,分布式服务追踪,需要搞清楚TraceID和SpanID以及抽样,如何与ELK整合 \"},\"1828\":{\"t\":\"Spring Cloud项目部署架构？\"},\"1829\":{\"t\":\"img\"},\"1830\":{\"t\":\"网关与过滤器有什么区别？\"},\"1831\":{\"t\":\"网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。\"},\"1832\":{\"t\":\"什么是断路器\"},\"1833\":{\"t\":\"当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）\"},\"1834\":{\"t\":\"断路器有三种状态\"},\"1835\":{\"t\":\"打开状态：一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务\"},\"1836\":{\"t\":\"半开状态：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭\"},\"1837\":{\"t\":\"关闭状态：当服务一直处于正常状态 能正常调用\"},\"1838\":{\"t\":\"什么是 Hystrix？\"},\"1839\":{\"t\":\"在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等一些防止雪崩的技术。\"},\"1840\":{\"t\":\"Hystrix有四种防雪崩方式:\"},\"1841\":{\"t\":\"服务降级：接口调用失败就调用本地的方法返回一个空\"},\"1842\":{\"t\":\"服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息\"},\"1843\":{\"t\":\"服务隔离：隔离服务之间相互影响\"},\"1844\":{\"t\":\"服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。\"},\"1845\":{\"t\":\"什么是Feign？\"},\"1846\":{\"t\":\"Feign 是一个声明web服务客户端，这使得编写web服务客户端更容易。它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。\"},\"1847\":{\"h\":\"Feign远程调用的基本流程\",\"a\":\"feign远程调用的基本流程\"},\"1848\":{\"t\":\"Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，放回给调用者。Feign远程调用的基本流程，大致如下图所示。\"},\"1849\":{\"t\":\"在这里插入图片描述\"},\"1850\":{\"t\":\"从上图可以看到，Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的 Request 请求。通过Feign以及JAVA的动态代理机制，使得Java 开发人员，可以不用通过HTTP框架去封装HTTP请求报文的方式，完成远程服务的HTTP调用。\"},\"1851\":{\"t\":\"过程：\"},\"1852\":{\"t\":\"在微服务启动时，Feign会进行包扫描，对加@FeignClient注解的接口，按照注解的规则，创建远程接口的本地JDK Proxy代理实例。然后，将这些本地Proxy代理实例，注入到Spring IOC容器中。当远程接口的方法被调用，由Proxy代理实例去完成真正的远程访问，并且返回结果。\"},\"1853\":{\"h\":\"ZooKeeper\"},\"1854\":{\"h\":\"ZooKeeper\",\"a\":\"zookeeper\"},\"1855\":{\"h\":\"基本功能\",\"a\":\"基本功能\"},\"1856\":{\"t\":\"ZooKeeper 是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\"},\"1857\":{\"t\":\"ZooKeeper 为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。这些功能的实现主要依赖于 ZooKeeper 提供的 数据存储+事件监听 功能。\"},\"1858\":{\"t\":\"ZooKeeper 将数据保存在内存中，性能是不错的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景）。\"},\"1859\":{\"t\":\"另外，很多顶级的开源项目都用到了 ZooKeeper，比如：\"},\"1860\":{\"t\":\"Kafka : ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。不过，在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构。\"},\"1861\":{\"h\":\"ZAB算法\",\"a\":\"zab算法\"},\"1862\":{\"h\":\"ZAB 协议介绍\",\"a\":\"zab-协议介绍\"},\"1863\":{\"t\":\"ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\"},\"1864\":{\"h\":\"ZAB 协议两种基本的模式：崩溃恢复和消息广播\",\"a\":\"zab-协议两种基本的模式-崩溃恢复和消息广播\"},\"1865\":{\"t\":\"ZAB 协议包括两种基本的模式，分别是\"},\"1866\":{\"t\":\"崩溃恢复 ：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致。\"},\"1867\":{\"t\":\"消息广播 ：当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进入消息广播模式了。 当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\"},\"1868\":{\"h\":\"Zookeeper 架构\",\"a\":\"zookeeper-架构\"},\"1869\":{\"t\":\"作为一个优秀高效且可靠的分布式协调框架，ZooKeeper 在解决分布式数据一致性问题时并没有直接使用 Paxos ，而是专门定制了一致性协议叫做 ZAB(ZooKeeper Atomic Broadcast) 原子广播协议，该协议能够很好地支持 崩溃恢复 。\"},\"1870\":{\"h\":\"ZAB 中的三个角色\",\"a\":\"zab-中的三个角色\"},\"1871\":{\"t\":\"和介绍 Paxos 一样，在介绍 ZAB 协议之前，我们首先来了解一下在 ZAB 中三个主要的角色，Leader 领导者、Follower跟随者、Observer观察者 。\"},\"1872\":{\"t\":\"Leader ：集群中 唯一的写请求处理者 ，能够发起投票（投票也是为了进行写请求）。\"},\"1873\":{\"t\":\"Follower：能够接收客户端的请求，如果是读请求则可以自己处理，如果是写请求则要转发给 Leader 。在选举过程中会参与投票，有选举权和被选举权 。\"},\"1874\":{\"t\":\"Observer ：就是没有选举权和被选举权的 Follower 。\"},\"1875\":{\"t\":\"在 ZAB 协议中对 zkServer(即上面我们说的三个角色的总称) 还有两种模式的定义，分别是 消息广播 和 崩溃恢复 。\"},\"1876\":{\"h\":\"消息广播模式\",\"a\":\"消息广播模式\"},\"1877\":{\"t\":\"说白了就是 ZAB 协议是如何处理写请求的，上面我们不是说只有 Leader 能处理写请求嘛？那么我们的 Follower 和 Observer 是不是也需要 同步更新数据 呢？总不能数据只在 Leader 中更新了，其他角色都没有得到更新吧？\"},\"1878\":{\"t\":\"第一步肯定需要 Leader 将写请求 广播 出去呀，让 Leader 问问 Followers 是否同意更新，如果超过半数以上的同意那么就进行 Follower 和 Observer 的更新（和 Paxos 一样）。\"},\"1879\":{\"t\":\"在 Leader 这端，它为每个其他的 zkServer 准备了一个 队列 ，采用先进先出的方式发送消息。由于协议是 通过 TCP 来进行网络通信的，保证了消息的发送顺序性，接受顺序性也得到了保证。\"},\"1880\":{\"t\":\"除此之外，在 ZAB 中还定义了一个 全局单调递增的事务ID ZXID ，它是一个64位long型，其中高32位表示 epoch 年代，低32位表示事务id。epoch 是会根据 Leader 的变化而变化的，当一个 Leader 挂了，新的 Leader 上位的时候，年代（epoch）就变了。而低32位可以简单理解为递增的事务id。\"},\"1881\":{\"t\":\"定义这个的原因也是为了顺序性，每个 proposal 在 Leader 中生成后需要 通过其 ZXID 来进行排序 ，才能得到处理。\"},\"1882\":{\"h\":\"崩溃恢复模式\",\"a\":\"崩溃恢复模式\"},\"1883\":{\"t\":\"说到崩溃恢复我们首先要提到 ZAB 中的 Leader 选举算法，当系统出现崩溃影响最大应该是 Leader 的崩溃，因为我们只有一个 Leader ，所以当 Leader 出现问题的时候我们势必需要重新选举 Leader 。\"},\"1884\":{\"t\":\"Leader 选举可以分为两个不同的阶段，第一个是我们提到的 Leader 宕机需要重新选举，第二则是当 Zookeeper 启动时需要进行系统的 Leader 初始化选举。下面我先来介绍一下 ZAB 是如何进行初始化选举的。\"},\"1885\":{\"t\":\"假设我们集群中有3台机器，那也就意味着我们需要两台以上同意（超过半数）。比如这个时候我们启动了 server1 ，它会首先 投票给自己 ，投票内容为服务器的 myid 和 ZXID ，因为初始化所以 ZXID 都为0，此时 server1 发出的投票为 (1,0)。但此时 server1 的投票仅为1，所以不能作为 Leader ，此时还在选举阶段所以整个集群处于 Looking 状态。\"},\"1886\":{\"t\":\"接着 server2 启动了，它首先也会将投票选给自己(2,0)，并将投票信息广播出去（server1也会，只是它那时没有其他的服务器了），server1 在收到 server2 的投票信息后会将投票信息与自己的作比较。首先它会比较 ZXID ，ZXID 大的优先为 Leader，如果相同则比较 myid，myid 大的优先作为 Leader。所以此时server1 发现 server2 更适合做 Leader，它就会将自己的投票信息更改为(2,0)然后再广播出去，之后server2 收到之后发现和自己的一样无需做更改，并且自己的 投票已经超过半数 ，则 确定 server2 为 Leader，server1 也会将自己服务器设置为 Following 变为 Follower。整个服务器就从 Looking 变为了正常状态。\"},\"1887\":{\"t\":\"当 server3 启动发现集群没有处于 Looking 状态时，它会直接以 Follower 的身份加入集群。\"},\"1888\":{\"t\":\"还是前面三个 server 的例子，如果在整个集群运行的过程中 server2 挂了，那么整个集群会如何重新选举 Leader 呢？其实和初始化选举差不多。\"},\"1889\":{\"t\":\"首先毫无疑问的是剩下的两个 Follower 会将自己的状态 从 Following 变为 Looking 状态 ，然后每个 server 会向初始化投票一样首先给自己投票（这不过这里的 zxid 可能不是0了，这里为了方便随便取个数字）。\"},\"1890\":{\"t\":\"假设 server1 给自己投票为(1,99)，然后广播给其他 server，server3 首先也会给自己投票(3,95)，然后也广播给其他 server。server1 和 server3 此时会收到彼此的投票信息，和一开始选举一样，他们也会比较自己的投票和收到的投票（zxid 大的优先，如果相同那么就 myid 大的优先）。这个时候 server1 收到了 server3 的投票发现没自己的合适故不变，server3 收到 server1 的投票结果后发现比自己的合适于是更改投票为(1,99)然后广播出去，最后 server1 收到了发现自己的投票已经超过半数就把自己设为 Leader，server3 也随之变为 Follower。\"},\"1891\":{\"t\":\"请注意 ZooKeeper 为什么要设置奇数个结点？比如这里我们是三个，挂了一个我们还能正常工作，挂了两个我们就不能正常工作了（已经没有超过半数的节点数了，所以无法进行投票等操作了）。而假设我们现在有四个，挂了一个也能工作，但是挂了两个也不能正常工作了，这是和三个一样的，而三个比四个还少一个，带来的效益是一样的，所以 Zookeeper 推荐奇数个 server 。\"},\"1892\":{\"t\":\"那么说完了 ZAB 中的 Leader 选举方式之后我们再来了解一下 崩溃恢复 是什么玩意？\"},\"1893\":{\"t\":\"其实主要就是 当集群中有机器挂了，我们整个集群如何保证数据一致性？\"},\"1894\":{\"t\":\"如果只是 Follower 挂了，而且挂的没超过半数的时候，因为我们一开始讲了在 Leader 中会维护队列，所以不用担心后面的数据没接收到导致数据不一致性。\"},\"1895\":{\"t\":\"如果 Leader 挂了那就麻烦了，我们肯定需要先暂停服务变为 Looking 状态然后进行 Leader 的重新选举（上面我讲过了），但这个就要分为两种情况了，分别是 确保已经被Leader提交的提案最终能够被所有的Follower提交 和 跳过那些已经被丢弃的提案 。\"},\"1896\":{\"t\":\"确保已经被Leader提交的提案最终能够被所有的Follower提交是什么意思呢？\"},\"1897\":{\"t\":\"假设 Leader (server2) 发送 commit 请求（忘了请看上面的消息广播模式），他发送给了 server3，然后要发给 server1 的时候突然挂了。这个时候重新选举的时候我们如果把 server1 作为 Leader 的话，那么肯定会产生数据不一致性，因为 server3 肯定会提交刚刚 server2 发送的 commit 请求的提案，而 server1 根本没收到所以会丢弃。\"},\"1898\":{\"t\":\"崩溃恢复\"},\"1899\":{\"t\":\"那怎么解决呢？\"},\"1900\":{\"t\":\"聪明的同学肯定会质疑，这个时候 server1 已经不可能成为 Leader 了，因为 server1 和 server3 进行投票选举的时候会比较 ZXID ，而此时 server3 的 ZXID 肯定比 server1 的大了。(不理解可以看前面的选举算法)\"},\"1901\":{\"t\":\"那么跳过那些已经被丢弃的提案又是什么意思呢？\"},\"1902\":{\"t\":\"假设 Leader (server2) 此时同意了提案N1，自身提交了这个事务并且要发送给所有 Follower 要 commit 的请求，却在这个时候挂了，此时肯定要重新进行 Leader 的选举，比如说此时选 server1 为 Leader （这无所谓）。但是过了一会，这个 挂掉的 Leader 又重新恢复了 ，此时它肯定会作为 Follower 的身份进入集群中，需要注意的是刚刚 server2 已经同意提交了提案N1，但其他 server 并没有收到它的 commit 信息，所以其他 server 不可能再提交这个提案N1了，这样就会出现数据不一致性问题了，所以 该提案N1最终需要被抛弃掉 。\"},\"1903\":{\"t\":\"崩溃恢复\"},\"1904\":{\"h\":\"CAP\",\"a\":\"cap\"},\"1905\":{\"h\":\"简介\",\"a\":\"简介\"},\"1906\":{\"t\":\"CAP 也就是 Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性） 这三个单词首字母组合。\"},\"1907\":{\"t\":\"img\"},\"1908\":{\"t\":\"在理论计算机科学中，CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能同时满足以下三点中的两个：\"},\"1909\":{\"t\":\"一致性（Consistency） : 所有节点访问同一份最新的数据副本\"},\"1910\":{\"t\":\"可用性（Availability）: 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\"},\"1911\":{\"t\":\"分区容错性（Partition Tolerance） : 分布式系统出现网络分区的时候，仍然能够对外提供服务。\"},\"1912\":{\"t\":\"什么是网络分区？\"},\"1913\":{\"t\":\"分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫 网络分区。\"},\"1914\":{\"h\":\"不是所谓的“3 选 2”\",\"a\":\"不是所谓的-3-选-2\"},\"1915\":{\"t\":\"大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。\"},\"1916\":{\"t\":\"当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。\"},\"1917\":{\"t\":\"简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。\"},\"1918\":{\"t\":\"因此，分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。 比如 ZooKeeper 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。\"},\"1919\":{\"t\":\"为啥不可能选择 CA 架构呢？ 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。\"},\"1920\":{\"t\":\"选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。\"},\"1921\":{\"t\":\"另外，需要补充说明的一点是： 如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。\"},\"1922\":{\"h\":\"场景问题\"},\"1923\":{\"h\":\"缓存一致性解决\",\"a\":\"缓存一致性解决\"},\"1924\":{\"h\":\"4G数据找系统记录(大数据题)\",\"a\":\"_4g数据找系统记录-大数据题\"},\"1925\":{\"h\":\"很多短任务线程，选择 synchronized 还是 lock（2022-04-11 携程）\",\"a\":\"很多短任务线程-选择-synchronized-还是-lock-2022-04-11-携程\"},\"1926\":{\"t\":\"锁竞争小时，synchronized和lock效率没差，偏向模式下（单线程读写）甚至高于lock，但是并发量上升时锁撤销会大幅影响性能，稳定自适应轻量级锁状态下，线程接近交替运行，或者说短任务线程多，基本一样，因为都是自旋，大量任务并发竞争时，随着任务量的增大，synchronized的效率会远小于lock，因为重量级锁会频繁切换内核态与用户态；大量长任务，只能重量级锁。\"},\"1927\":{\"h\":\"多个人给一个主播打赏怎么设计？（2022-6-3 58同城）\",\"a\":\"多个人给一个主播打赏怎么设计-2022-6-3-58同城\"},\"1928\":{\"t\":\"我说是一个高并发写的操作，对一个记录频繁写，分批操作，比如 10 个记录 操作一次。他说这个方案可以 但是有 100 个记录 怎么去做一个一个操作呢？我说如果在一个进程可以 分多个线程分批。他说还是不够快 我们是用的 MQ 多个消费者 一个打赏就发一个消息\"},\"1929\":{\"h\":\"怎么实现一个点赞功能？\",\"a\":\"怎么实现一个点赞功能\"},\"1930\":{\"t\":\"主要的流程解释下：先查询数据库改用户是否进行点赞，如果已经点赞则抛出异常，如果没有则new一个对象来一个一个Set，然后将已点赞的信息存入redis中，相反，取消点赞的操作就是删除redis中的数据即可，然后通过Dubbo调用API来完成保存操作，因为我这里是还要获取点赞数和评论数啥的，所以会对动态表进行更新操作。\"},\"1931\":{\"h\":\"比如下单清空购物车，你是如何设计的？\",\"a\":\"比如下单清空购物车-你是如何设计的\"},\"1932\":{\"t\":\"生产者（订单系统）产生消息，发送一条半事务消息到MQ服务器\"},\"1933\":{\"t\":\"MQ收到消息后，将消息持久化到存储系统，这条消息的状态是待发送状态。\"},\"1934\":{\"t\":\"MQ服务器返回ACK确认到生产者，此时MQ不会触发消息推送事件\"},\"1935\":{\"t\":\"生产者执行本地事务（订单创建成功，提交事务消息）\"},\"1936\":{\"t\":\"如果本地事务执行成功，即commit执行结果到MQ服务器；如果执行失败，发送rollback。\"},\"1937\":{\"t\":\"如果是commit正常提交，MQ服务器更新消息状态为可发送；如果是rollback，即删除消息。\"},\"1938\":{\"t\":\"如果消息状态更新为可发送，则MQ服务器会push消息给消费者（购物车系统）。消费者消费完（即拿到订单消息，清空购物车成功）就应答ACK。\"},\"1939\":{\"t\":\"如果MQ服务器长时间没有收到生产者的commit或者rollback，它会反查生产者，然后根据查询到的结果（回滚操作或者重新发送消息）执行最终状态。\"},\"1940\":{\"t\":\"有些伙伴可能有疑惑，如果消费者消费失败怎么办呢？那数据是不是不一致啦？所以就需要消费者消费成功，执行业务逻辑成功，再反馈ack嘛。如果消费者消费失败，那就自动重试嘛，接口支持幂等即可。\"},\"1941\":{\"h\":\"排行榜的实现，比如高考成绩排序（2022 虾皮）\",\"a\":\"排行榜的实现-比如高考成绩排序-2022-虾皮\"},\"1942\":{\"t\":\"排行版的实现，一般使用redis的zset数据类型。\"},\"1943\":{\"t\":\"zadd key score member [score member ...]，zrank key member \"},\"1944\":{\"h\":\"有一批帖子，会根据类别搜索，但是现在是单独一个表，现在查询非常慢，如何提高搜索性能？（2022 虾皮）\",\"a\":\"有一批帖子-会根据类别搜索-但是现在是单独一个表-现在查询非常慢-如何提高搜索性能-2022-虾皮\"},\"1945\":{\"t\":\"根据类别分库分表，库可以放到不同的实例上，经常查询的不变的数据]可以放到缓存里。 数据有更新时，需要刷新下缓存 因为分表后，只能是固定类别，所以需要根据类别去分开查找。 如果还有另一个重要的字段也需要查，可以再建一个分表，user-ses/ses-user就是这么做的，但是冗余就比较大。\"},\"1946\":{\"h\":\"如果有多个表，进行聚合查询，如何解决深分页的问题（2022 虾皮）\",\"a\":\"如果有多个表-进行聚合查询-如何解决深分页的问题-2022-虾皮\"},\"1947\":{\"t\":\"就是保存每个节点的表id给前端，前端查询时把id返回过来了，然后加到SQL里，但是不一定准。这里回答的是单个表吧。\"},\"1948\":{\"h\":\"分表的数据，动态增加一张表，不停服如何实现？（2022 虾皮）\",\"a\":\"分表的数据-动态增加一张表-不停服如何实现-2022-虾皮\"},\"1949\":{\"t\":\"分区策略使用一致性哈希 然后新表的数据，查询的时候，先查老的，再插入新的。如果老数据没有动，需要有对应的迁移服务进行定时迁移。插入的时候优先插入到新的表。\"},\"1950\":{\"h\":\"迁移线程和用户线程同时执行，会有数据库不一致的问题，怎么解决？（2022 虾皮）\",\"a\":\"迁移线程和用户线程同时执行-会有数据库不一致的问题-怎么解决-2022-虾皮\"},\"1951\":{\"t\":\"加分布式锁。\"},\"1952\":{\"h\":\"两个机房，某个机房可能断电，如何做多机房容灾（2022 虾皮）\",\"a\":\"两个机房-某个机房可能断电-如何做多机房容灾-2022-虾皮\"},\"1953\":{\"t\":\"负载均衡层，支持切换机房写数据的时候，中间件（db/redis/es）都要进行双写。\"},\"1954\":{\"t\":\"kafka容灾，mirror maker: https://cloud.tencent.com/developer/article/1358933\"},\"1955\":{\"h\":\"主从机房同步有什么问题呢？ （2022 虾皮）\",\"a\":\"主从机房同步有什么问题呢-2022-虾皮\"},\"1956\":{\"t\":\"会有比较大的延迟。 一些分布式的问题，例如分布式事务，可能就执行了几步，然后就挂了，需要有一定的策略，进行回滚或者提交。 切换机房的过程中，可能存在数据丢失，重复数据等\"},\"1957\":{\"t\":\"双向同步，两个机房都能写入，如果操作的是各自的数据的话，问题不大。如果操作的是相同数据，必然会有冲突，需要解决。所以上层保证相同数据到同一个机房即可，然后同步到另外一个机房，保证每个机房都有全量的数据。各种中间件都要做改造。\"},\"1958\":{\"t\":\"总之，分片的核心思路在于，让同一个用户的相关请求，只在一个机房内完成所有业务「闭环」，不再出现「跨机房」访问。\"},\"1959\":{\"t\":\"阿里在实施这种方案时，给它起了个名字，叫做「单元化」。\"},\"1960\":{\"t\":\"这里还有一种情况，是无法做数据分片的：全局数据。例如系统配置、商品库存这类需要强一致的数据，这类服务依旧只能采用写主机房，读从机房的方案，不做双活。\"},\"1961\":{\"t\":\"双活的重点，是要优先保证「核心」业务先实现双活，并不是「全部」业务实现双活。\"},\"1962\":{\"h\":\"冷机房新请求过来，发现缓存没有，会把数据库打挂，这个怎么解决？（2022 虾皮）\",\"a\":\"冷机房新请求过来-发现缓存没有-会把数据库打挂-这个怎么解决-2022-虾皮\"},\"1963\":{\"t\":\"预热，提前加载到缓存。 或者平时保持一定的流量。 用了缓存的，一般需要预热下，防止雪崩。\"},\"1964\":{\"h\":\"定时任务这种，怎么改变执行的机房（2022 虾皮）\",\"a\":\"定时任务这种-怎么改变执行的机房-2022-虾皮\"},\"1965\":{\"t\":\"加开关，任何时候都有一个条件不满足，在空跑。\"},\"1966\":{\"h\":\"4.HTTP常见面试题\"},\"1967\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"1968\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"1969\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"1970\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"1971\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"1972\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"1973\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"1974\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"1975\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"1976\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"1977\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"1978\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"1979\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"1980\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"1981\":{\"h\":\"HTTP协议中为什么广泛使用的还是HTTP1.1？\"},\"1982\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"1983\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"1984\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"1985\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"1986\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"1987\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"1988\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"1989\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"1990\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"1991\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"1992\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"1993\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"1994\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"1995\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"1996\":{\"h\":\"5.HTTP2常见面试题\"},\"1997\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"1998\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"1999\":{\"h\":\"一、关于HTTP2\",\"a\":\"一、关于http2\"},\"2000\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"2001\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"2002\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"2003\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"2004\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"2005\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"2006\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"2007\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"2008\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"2009\":{\"h\":\"6.HTTP3常见面试题\"},\"2010\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"2011\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"2012\":{\"h\":\"一、关于HTTP2\",\"a\":\"一、关于http2\"},\"2013\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"2014\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"2015\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"2016\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"2017\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"2018\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"2019\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"2020\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"2021\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"2022\":{\"h\":\"7.HTTPS常见面试题\"},\"2023\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"2024\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"2025\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"2026\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"2027\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"2028\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"2029\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"2030\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"2031\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"2032\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"2033\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"2034\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"2035\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"2036\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"2037\":{\"h\":\"3.IP常见面试题\"},\"2038\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"2039\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"2040\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"2041\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"2042\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"2043\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"2044\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"2045\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"2046\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"2047\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"2048\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"2049\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"2050\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"2051\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"2052\":{\"h\":\"2.TCP和UDP常见面试题\"},\"2053\":{\"t\":\"大家好，这篇文章来一起看下TCP中那些烦人（常考）的面试题，话不多说，发车！\"},\"2054\":{\"t\":\"为了检验对这些知识掌握的深度，先给大家列出目录：\"},\"2055\":{\"t\":\"1.TCP基础\"},\"2056\":{\"t\":\"TCP 头格式有哪些？\"},\"2057\":{\"t\":\"为什么需要 TCP 协议？ TCP 工作在哪一层？\"},\"2058\":{\"t\":\"什么是 TCP ？\"},\"2059\":{\"t\":\"什么是 TCP 连接？\"},\"2060\":{\"t\":\"如何唯一确定一个 TCP 连接呢？\"},\"2061\":{\"t\":\"UDP 和 TCP 有什么区别呢？分别的应用场景是？\"},\"2062\":{\"t\":\"TCP 和 UDP 可以使用同一个端口吗？\"},\"2063\":{\"t\":\"2.TCP三次握手\"},\"2064\":{\"t\":\"TCP 三次握手过程是怎样的？\"},\"2065\":{\"t\":\"如何在 Linux 系统中查看 TCP 状态？\"},\"2066\":{\"t\":\"为什么是三次握手？不是两次、四次？\"},\"2067\":{\"t\":\"为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？\"},\"2068\":{\"t\":\"初始序列号 ISN 是如何随机产生的？\"},\"2069\":{\"t\":\"既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？\"},\"2070\":{\"t\":\"第一次握手丢失了，会发生什么？\"},\"2071\":{\"t\":\"第二次握手丢失了，会发生什么？\"},\"2072\":{\"t\":\"第三次握手丢失了，会发生什么？\"},\"2073\":{\"t\":\"什么是 SYN 攻击？如何避免 SYN 攻击？\"},\"2074\":{\"t\":\"3.TCP四次挥手\"},\"2075\":{\"t\":\"TCP 四次挥手过程是怎样的？\"},\"2076\":{\"t\":\"为什么挥手需要四次？\"},\"2077\":{\"t\":\"第一次挥手丢失了，会发生什么？\"},\"2078\":{\"t\":\"第二次挥手丢失了，会发生什么？\"},\"2079\":{\"t\":\"第三次挥手丢失了，会发生什么？\"},\"2080\":{\"t\":\"第四次挥手丢失了，会发生什么？\"},\"2081\":{\"t\":\"为什么 TIME_WAIT 等待的时间是 2MSL？\"},\"2082\":{\"t\":\"为什么需要 TIME_WAIT 状态？\"},\"2083\":{\"t\":\"TIME_WAIT 过多有什么危害？\"},\"2084\":{\"t\":\"如何优化 TIME_WAIT？\"},\"2085\":{\"t\":\"服务器出现大量 TIME_WAIT 状态的原因有哪些？\"},\"2086\":{\"t\":\"服务器出现大量 CLOSE_WAIT 状态的原因有哪些？\"},\"2087\":{\"t\":\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"},\"2088\":{\"t\":\"如果已经建立了连接，但是服务端的进程崩溃会发生什么？\"},\"2089\":{\"t\":\"4.Socket 编程\"},\"2090\":{\"t\":\"针对 TCP 应该如何 Socket 编程？\"},\"2091\":{\"t\":\"listen 时候参数 backlog 的意义？\"},\"2092\":{\"t\":\"accept 发生在三次握手的哪一步？\"},\"2093\":{\"t\":\"客户端调用 close 了，连接是断开的流程是什么？\"},\"2094\":{\"t\":\"没有 accept，能建立 TCP 连接吗？\"},\"2095\":{\"t\":\"没有 listen，能建立 TCP 连接吗？\"},\"2096\":{\"h\":\"1.TCP基础\",\"a\":\"_1-tcp基础\"},\"2097\":{\"h\":\"1.1TCP 头格式有哪些？\",\"a\":\"_1-1tcp-头格式有哪些\"},\"2098\":{\"t\":\"看了大佬小林coding的文章，我总结面试常考的也就是：\"},\"2099\":{\"t\":\"序列号：在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就「累加」一次该「数据字节数」的大小。用来解决网络包乱序问题。\"},\"2100\":{\"t\":\"确认应答号：指下一次「期望」收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。用来解决丢包的问题。\"},\"2101\":{\"t\":\"控制位：\"},\"2102\":{\"t\":\"ACK：该位为 1 时，「确认应答」的字段变为有效，TCP 规定除了最初建立连接时的 SYN 包之外该位必须设置为 1 。\"},\"2103\":{\"t\":\"RST：该位为 1 时，表示 TCP 连接中出现异常必须强制断开连接。\"},\"2104\":{\"t\":\"SYN：该位为 1 时，表示希望建立连接，并在其「序列号」的字段进行序列号初始值的设定。\"},\"2105\":{\"t\":\"FIN：该位为 1 时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 FIN 位为 1 的 TCP 段。\"},\"2106\":{\"h\":\"1.2为什么需要 TCP 协议？ TCP 工作在哪一层？\",\"a\":\"_1-2为什么需要-tcp-协议-tcp-工作在哪一层\"},\"2107\":{\"t\":\"原因：IP 层是「不可靠」的，它不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据的完整性。如果需要保障网络数据包的可靠性，那么就需要由上层（传输层）的 TCP 协议来负责。\"},\"2108\":{\"t\":\"因为 TCP 是一个工作在传输层的可靠数据传输的服务，它能确保接收端接收的网络包是无损坏、无间隔、非冗余和按序的。\"},\"2109\":{\"h\":\"1.3什么是 TCP ？\",\"a\":\"_1-3什么是-tcp\"},\"2110\":{\"t\":\"总结一句话：TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。\"},\"2111\":{\"t\":\"具体的给面试官扯一扯：\"},\"2112\":{\"t\":\"面向连接：一定是「一对一」才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；\"},\"2113\":{\"t\":\"可靠的：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；\"},\"2114\":{\"t\":\"字节流：用户消息通过 TCP 协议传输时，消息可能会被操作系统「分组」成多个的 TCP 报文，如果接收方的程序如果不知道「消息的边界」，是无法读出一个有效的用户消息的。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。\"},\"2115\":{\"h\":\"1.4什么是 TCP 连接？\",\"a\":\"_1-4什么是-tcp-连接\"},\"2116\":{\"t\":\"大白话：用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括 Socket、序列号和窗口大小称为连接。\"},\"2117\":{\"t\":\"包含三个东西：\"},\"2118\":{\"t\":\"Socket：由 IP 地址和端口号组成\"},\"2119\":{\"t\":\"序列号：用来解决乱序问题等\"},\"2120\":{\"t\":\"窗口大小：用来做流量控制\"},\"2121\":{\"h\":\"1.5如何唯一确定一个 TCP 连接呢？\",\"a\":\"_1-5如何唯一确定一个-tcp-连接呢\"},\"2122\":{\"t\":\"TCP 四元组可以唯一的确定一个连接，四元组包括如下：\"},\"2123\":{\"t\":\"源地址（IP地址，32位，存在IP头部）\"},\"2124\":{\"t\":\"源端口（端口，16位，存在TCP头部）\"},\"2125\":{\"t\":\"目的地址（IP地址，32位，存在IP头部）\"},\"2126\":{\"t\":\"目的端口（端口，16位，存在TCP头部）\"},\"2127\":{\"t\":\"这地方有个常见面试题：\"},\"2128\":{\"t\":\"有一个 IP 的服务端监听了一个端口，它的 TCP 的最大连接数是多少？\"},\"2129\":{\"t\":\"服务端通常固定在某个本地端口上监听，等待客户端的连接请求。\"},\"2130\":{\"t\":\"因此，客户端 IP 和端口是可变的，其理论值计算公式如下:\"},\"2131\":{\"t\":\"TCP的最大连接数=客户端的IP数⋅客户端的端口数\"},\"2132\":{\"t\":\"对 IPv4，客户端的 IP 数最多为 2 的 32 次方，客户端的端口数最多为 2 的 16 次方，也就是服务端单机最大 TCP 连接数，约为 2 的 48 次方。\"},\"2133\":{\"t\":\"当然，服务端最大并发 TCP 连接数远不能达到理论上限，还收到物理内存和其他因素影响。\"},\"2134\":{\"h\":\"1.6UDP 和 TCP 有什么区别呢？分别的应用场景是？\",\"a\":\"_1-6udp-和-tcp-有什么区别呢-分别的应用场景是\"},\"2135\":{\"t\":\"UDP 头部格式\"},\"2136\":{\"h\":\"1.6.1TCP 和 UDP 区别：\",\"a\":\"_1-6-1tcp-和-udp-区别\"},\"2137\":{\"t\":\"1.连接\"},\"2138\":{\"t\":\"TCP 是面向连接的传输层协议，传输数据前先要建立连接。\"},\"2139\":{\"t\":\"UDP 是不需要连接，即刻传输数据。\"},\"2140\":{\"t\":\"2. 服务对象\"},\"2141\":{\"t\":\"TCP 是一对一的两点服务，即一条连接只有两个端点。\"},\"2142\":{\"t\":\"UDP 支持一对一、一对多、多对多的交互通信\"},\"2143\":{\"t\":\"3. 可靠性\"},\"2144\":{\"t\":\"TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按序到达。\"},\"2145\":{\"t\":\"UDP 是尽最大努力交付，不保证可靠交付数据。但是我们可以基于 UDP 传输协议实现一个可靠的传输协议，比如 QUIC 协议，具体可以参见这篇文章：如何基于 UDP 协议实现可靠传输？\"},\"2146\":{\"t\":\"4. 拥塞控制、流量控制\"},\"2147\":{\"t\":\"TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。\"},\"2148\":{\"t\":\"UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。\"},\"2149\":{\"t\":\"5. 首部开销\"},\"2150\":{\"t\":\"TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。\"},\"2151\":{\"t\":\"UDP 首部只有 8 个字节，并且是固定不变的，开销较小。\"},\"2152\":{\"t\":\"6. 传输方式\"},\"2153\":{\"t\":\"TCP 是流式传输，没有边界，但保证顺序和可靠。\"},\"2154\":{\"t\":\"UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。\"},\"2155\":{\"t\":\"7. 分片不同\"},\"2156\":{\"t\":\"TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。\"},\"2157\":{\"t\":\"UDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层。\"},\"2158\":{\"h\":\"1.6.2TCP 和 UDP 应用场景：\",\"a\":\"_1-6-2tcp-和-udp-应用场景\"},\"2159\":{\"t\":\"由于 TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：\"},\"2160\":{\"t\":\"FTP 文件传输；\"},\"2161\":{\"t\":\"HTTP / HTTPS；\"},\"2162\":{\"t\":\"由于 UDP 面向无连接，它可以随时发送数据，再加上 UDP 本身的处理既简单又高效，因此经常用于：\"},\"2163\":{\"t\":\"包总量较少的通信，如 DNS、SNMP 等；\"},\"2164\":{\"t\":\"视频、音频等多媒体通信；\"},\"2165\":{\"t\":\"广播通信；\"},\"2166\":{\"t\":\"这里有两道常见面试题：\"},\"2167\":{\"t\":\"为什么 UDP 头部没有「首部长度」字段，而 TCP 头部有「首部长度」字段呢？\"},\"2168\":{\"t\":\"原因： TCP 有可变长的「选项」字段，而 UDP 头部长度则是不会变化的，无需多一个字段去记录 UDP 的首部长度。\"},\"2169\":{\"t\":\"为什么 UDP 头部有「包长度」字段，而 TCP 头部则没有「包长度」字段呢？\"},\"2170\":{\"t\":\"比较靠谱的原因：如今的 UDP 协议是基于 IP 协议发展的，而当年可能并非如此，依赖的可能是别的不提供自身报文长度或首部长度的网络层协议，因此 UDP 报文首部需要有长度字段以供计算。\"},\"2171\":{\"h\":\"1.7TCP 和 UDP 可以使用同一个端口吗？\",\"a\":\"_1-7tcp-和-udp-可以使用同一个端口吗\"},\"2172\":{\"t\":\"总结：可以的。\"},\"2173\":{\"t\":\"传输层的端口号的作用，是为了区分同一个主机上不同应用程序的数据包。\"},\"2174\":{\"t\":\"传输层有两个传输协议分别是 TCP 和 UDP，在内核中是两个完全独立的软件模块。\"},\"2175\":{\"t\":\"当主机收到数据包后，可以在 IP 包头的「协议号」字段知道该数据包是 TCP/UDP，所以可以根据这个信息确定送给哪个模块（TCP/UDP）处理，送给 TCP/UDP 模块的报文根据「端口号」确定送给哪个应用程序处理。\"},\"2176\":{\"t\":\"因此，TCP/UDP 各自的端口号也相互独立，如 TCP 有一个 80 号端口，UDP 也可以有一个 80 号端口，二者并不冲突。\"},\"2177\":{\"t\":\"可以看这篇文章：TCP 和 UDP 可以使用同一个端口吗？\"},\"2178\":{\"h\":\"2.TCP三次握手\",\"a\":\"_2-tcp三次握手\"},\"2179\":{\"h\":\"2.1TCP 三次握手过程是怎样的？\",\"a\":\"_2-1tcp-三次握手过程是怎样的\"},\"2180\":{\"h\":\"2.2如何在 Linux 系统中查看 TCP 状态？\",\"a\":\"_2-2如何在-linux-系统中查看-tcp-状态\"},\"2181\":{\"h\":\"2.3为什么是三次握手？不是两次、四次？\",\"a\":\"_2-3为什么是三次握手-不是两次、四次\"},\"2182\":{\"h\":\"2.4为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？\",\"a\":\"_2-4为什么每次建立-tcp-连接时-初始化的序列号都要求不一样呢\"},\"2183\":{\"h\":\"2.5初始序列号 ISN 是如何随机产生的？\",\"a\":\"_2-5初始序列号-isn-是如何随机产生的\"},\"2184\":{\"h\":\"2.6既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？\",\"a\":\"_2-6既然-ip-层会分片-为什么-tcp-层还需要-mss-呢\"},\"2185\":{\"h\":\"2.7第一次握手丢失了，会发生什么？\",\"a\":\"_2-7第一次握手丢失了-会发生什么\"},\"2186\":{\"h\":\"2.8第二次握手丢失了，会发生什么？\",\"a\":\"_2-8第二次握手丢失了-会发生什么\"},\"2187\":{\"h\":\"2.9第三次握手丢失了，会发生什么？\",\"a\":\"_2-9第三次握手丢失了-会发生什么\"},\"2188\":{\"h\":\"2.10什么是 SYN 攻击？如何避免 SYN 攻击？\",\"a\":\"_2-10什么是-syn-攻击-如何避免-syn-攻击\"},\"2189\":{\"h\":\"3.TCP四次挥手\",\"a\":\"_3-tcp四次挥手\"},\"2190\":{\"h\":\"3.1TCP 四次挥手过程是怎样的？\",\"a\":\"_3-1tcp-四次挥手过程是怎样的\"},\"2191\":{\"h\":\"3.2为什么挥手需要四次？\",\"a\":\"_3-2为什么挥手需要四次\"},\"2192\":{\"h\":\"3.3第一次挥手丢失了，会发生什么？\",\"a\":\"_3-3第一次挥手丢失了-会发生什么\"},\"2193\":{\"h\":\"3.4第二次挥手丢失了，会发生什么？\",\"a\":\"_3-4第二次挥手丢失了-会发生什么\"},\"2194\":{\"h\":\"3.5第三次挥手丢失了，会发生什么？\",\"a\":\"_3-5第三次挥手丢失了-会发生什么\"},\"2195\":{\"h\":\"3.6第四次挥手丢失了，会发生什么？\",\"a\":\"_3-6第四次挥手丢失了-会发生什么\"},\"2196\":{\"h\":\"3.7为什么 TIME_WAIT 等待的时间是 2MSL？\",\"a\":\"_3-7为什么-time-wait-等待的时间是-2msl\"},\"2197\":{\"h\":\"3.8为什么需要 TIME_WAIT 状态？\",\"a\":\"_3-8为什么需要-time-wait-状态\"},\"2198\":{\"h\":\"3.9TIME_WAIT 过多有什么危害？\",\"a\":\"_3-9time-wait-过多有什么危害\"},\"2199\":{\"h\":\"3.10如何优化 TIME_WAIT？\",\"a\":\"_3-10如何优化-time-wait\"},\"2200\":{\"h\":\"3.11服务器出现大量 TIME_WAIT 状态的原因有哪些？\",\"a\":\"_3-11服务器出现大量-time-wait-状态的原因有哪些\"},\"2201\":{\"h\":\"3.12服务器出现大量 CLOSE_WAIT 状态的原因有哪些？\",\"a\":\"_3-12服务器出现大量-close-wait-状态的原因有哪些\"},\"2202\":{\"h\":\"3.13如果已经建立了连接，但是客户端突然出现故障了怎么办？\",\"a\":\"_3-13如果已经建立了连接-但是客户端突然出现故障了怎么办\"},\"2203\":{\"h\":\"3.14如果已经建立了连接，但是服务端的进程崩溃会发生什么？\",\"a\":\"_3-14如果已经建立了连接-但是服务端的进程崩溃会发生什么\"},\"2204\":{\"h\":\"4.Socket 编程\",\"a\":\"_4-socket-编程\"},\"2205\":{\"h\":\"4.1针对 TCP 应该如何 Socket 编程？\",\"a\":\"_4-1针对-tcp-应该如何-socket-编程\"},\"2206\":{\"h\":\"4.2listen 时候参数 backlog 的意义？\",\"a\":\"_4-2listen-时候参数-backlog-的意义\"},\"2207\":{\"h\":\"4.3accept 发生在三次握手的哪一步？\",\"a\":\"_4-3accept-发生在三次握手的哪一步\"},\"2208\":{\"h\":\"4.4客户端调用 close 了，连接是断开的流程是什么？\",\"a\":\"_4-4客户端调用-close-了-连接是断开的流程是什么\"},\"2209\":{\"h\":\"4.5没有 accept，能建立 TCP 连接吗？\",\"a\":\"_4-5没有-accept-能建立-tcp-连接吗\"},\"2210\":{\"h\":\"4.6没有 listen，能建立 TCP 连接吗？\",\"a\":\"_4-6没有-listen-能建立-tcp-连接吗\"},\"2211\":{\"h\":\"计算机网络\"},\"2212\":{\"h\":\"键入网址到网页显示，期间发生了什么？\",\"a\":\"键入网址到网页显示-期间发生了什么\"},\"2213\":{\"t\":\"img\"},\"2214\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"2215\":{\"t\":\"总体来说分为以下几个过程:\"},\"2216\":{\"t\":\"DNS 解析\"},\"2217\":{\"t\":\"TCP 连接\"},\"2218\":{\"t\":\"发送 HTTP 请求\"},\"2219\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"2220\":{\"t\":\"浏览器解析渲染页面\"},\"2221\":{\"t\":\"连接结束\"},\"2222\":{\"h\":\"OSI 七层模型\",\"a\":\"osi-七层模型\"},\"2223\":{\"t\":\"OSI 七层模型\"},\"2224\":{\"h\":\"TCP/IP 四层模型\",\"a\":\"tcp-ip-四层模型\"},\"2225\":{\"t\":\"img\"},\"2226\":{\"h\":\"TCP\",\"a\":\"tcp\"},\"2227\":{\"h\":\"IP\",\"a\":\"ip\"},\"2228\":{\"h\":\"UDP\",\"a\":\"udp\"},\"2229\":{\"h\":\"ARP\",\"a\":\"arp\"},\"2230\":{\"t\":\"ARP 协议，全称 地址解析协议（Address Resolution Protocol），它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。\"},\"2231\":{\"t\":\"ARP 协议工作时有一个大前提，那就是 ARP 表。\"},\"2232\":{\"t\":\"在一个局域网内，每个网络设备都自己维护了一个 ARP 表，ARP 表记录了某些其他网络设备的 IP 地址-MAC 地址映射关系，该映射关系以 <IP, MAC, TTL> 三元组的形式存储。其中，TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。\"},\"2233\":{\"t\":\"ARP 的工作原理将分两种场景讨论：\"},\"2234\":{\"t\":\"同一局域网内的 MAC 寻址；\"},\"2235\":{\"t\":\"从一个局域网到另一个局域网中的网络设备的寻址。\"},\"2236\":{\"h\":\"同一局域网内的 MAC 寻址\",\"a\":\"同一局域网内的-mac-寻址\"},\"2237\":{\"t\":\"假设当前有如下场景：IP 地址为137.196.7.23的主机 A，想要给同一局域网内的 IP 地址为137.196.7.14主机 B，发送 IP 数据报文。\"},\"2238\":{\"t\":\"再次强调，当主机发送 IP 数据报文时（网络层），仅知道目的地的 IP 地址，并不清楚目的地的 MAC 地址，而 ARP 协议就是解决这一问题的。\"},\"2239\":{\"t\":\"为了达成这一目标，主机 A 将不得不通过 ARP 协议来获取主机 B 的 MAC 地址，并将 IP 报文封装成链路层帧，发送到下一跳上。在该局域网内，关于此将按照时间顺序，依次发生如下事件：\"},\"2240\":{\"t\":\"主机 A 检索自己的 ARP 表，发现 ARP 表中并无主机 B 的 IP 地址对应的映射条目，也就无从知道主机 B 的 MAC 地址。\"},\"2241\":{\"t\":\"主机 A 将构造一个 ARP 查询分组，并将其广播到所在的局域网中。\"},\"2242\":{\"t\":\"ARP 分组是一种特殊报文，ARP 分组有两类，一种是查询分组，另一种是响应分组，它们具有相同的格式，均包含了发送和接收的 IP 地址、发送和接收的 MAC 地址。当然了，查询分组中，发送的 IP 地址，即为主机 A 的 IP 地址，接收的 IP 地址即为主机 B 的 IP 地址，发送的 MAC 地址也是主机 A 的 MAC 地址，但接收的 MAC 地址绝不会是主机 B 的 MAC 地址（因为这正是我们要问询的！），而是一个特殊值——FF-FF-FF-FF-FF-FF，之前说过，该 MAC 地址是广播地址，也就是说，查询分组将广播给该局域网内的所有设备。\"},\"2243\":{\"t\":\"主机 A 构造的查询分组将在该局域网内广播，理论上，每一个设备都会收到该分组，并检查查询分组的接收 IP 地址是否为自己的 IP 地址，如果是，说明查询分组已经到达了主机 B，否则，该查询分组对当前设备无效，丢弃之。\"},\"2244\":{\"t\":\"主机 B 收到了查询分组之后，验证是对自己的问询，接着构造一个 ARP 响应分组，该分组的目的地只有一个——主机 A，发送给主机 A。同时，主机 B 提取查询分组中的 IP 地址和 MAC 地址信息，在自己的 ARP 表中构造一条主机 A 的 IP-MAC 映射记录。\"},\"2245\":{\"t\":\"ARP 响应分组具有和 ARP 查询分组相同的构造，不同的是，发送和接受的 IP 地址恰恰相反，发送的 MAC 地址为发送者本身，目标 MAC 地址为查询分组的发送者，也就是说，ARP 响应分组只有一个目的地，而非广播。\"},\"2246\":{\"t\":\"主机 A 终将收到主机 B 的响应分组，提取出该分组中的 IP 地址和 MAC 地址后，构造映射信息，加入到自己的 ARP 表中。\"},\"2247\":{\"t\":\"总结来说，ARP 协议是一个广播问询，单播响应协议。\"},\"2248\":{\"h\":\"不同局域网内的 MAC 寻址\",\"a\":\"不同局域网内的-mac-寻址\"},\"2249\":{\"t\":\"更复杂的情况是，发送主机 A 和接收主机 B 不在同一个子网中，假设一个一般场景，两台主机所在的子网由一台路由器联通。这里需要注意的是，一般情况下，我们说网络设备都有一个 IP 地址和一个 MAC 地址，这里说的网络设备，更严谨的说法应该是一个接口。路由器作为互联设备，具有多个接口，每个接口同样也应该具备不重复的 IP 地址和 MAC 地址。因此，在讨论 ARP 表时，路由器的多个接口都各自维护一个 ARP 表，而非一个路由器只维护一个 ARP 表。\"},\"2250\":{\"t\":\"接下来，回顾同一子网内的 MAC 寻址，如果主机 A 发送一个广播问询分组，那么 A 所在子网内的所有设备（接口）都将不会捕获该分组，因为该分组的目的 IP 地址在另一个子网中，本子网内不会有设备成功接收。那么，主机 A 应该发送怎样的查询分组呢？整个过程按照时间顺序发生的事件如下：\"},\"2251\":{\"t\":\"主机 A 查询 ARP 表，期望寻找到目标路由器的本子网接口的 MAC 地址。\"},\"2252\":{\"t\":\"目标路由器指的是，根据目的主机 B 的 IP 地址，分析出 B 所在的子网，能够把报文转发到 B 所在子网的那个路由器。\"},\"2253\":{\"t\":\"主机 A 未能找到目标路由器的本子网接口的 MAC 地址，将采用 ARP 协议，问询到该 MAC 地址，由于目标接口与主机 A 在同一个子网内，该过程与同一局域网内的 MAC 寻址相同。\"},\"2254\":{\"t\":\"主机 A 获取到目标接口的 MAC 地址，先构造 IP 数据报，其中源 IP 是 A 的 IP 地址，目的 IP 地址是 B 的 IP 地址，再构造链路层帧，其中源 MAC 地址是 A 的 MAC 地址，目的 MAC 地址是本子网内与路由器连接的接口的 MAC 地址。主机 A 将把这个链路层帧，以单播的方式，发送给目标接口。\"},\"2255\":{\"t\":\"目标接口接收到了主机 A 发过来的链路层帧，解析，根据目的 IP 地址，查询转发表，将该 IP 数据报转发到与主机 B 所在子网相连的接口上。\"},\"2256\":{\"t\":\"到此，该帧已经从主机 A 所在的子网，转移到了主机 B 所在的子网了。\"},\"2257\":{\"t\":\"路由器接口查询 ARP 表，期望寻找到主机 B 的 MAC 地址。\"},\"2258\":{\"t\":\"路由器接口如未能找到主机 B 的 MAC 地址，将采用 ARP 协议，广播问询，单播响应，获取到主机 B 的 MAC 地址。\"},\"2259\":{\"t\":\"路由器接口将对 IP 数据报重新封装成链路层帧，目标 MAC 地址为主机 B 的 MAC 地址，单播发送，直到目的地。\"},\"2260\":{\"h\":\"HTTP\",\"a\":\"http\"},\"2261\":{\"h\":\"HTTP 状态码有哪些？\",\"a\":\"http-状态码有哪些\"},\"2262\":{\"t\":\"HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。\"},\"2263\":{\"t\":\"常见 HTTP 状态码\"},\"2264\":{\"h\":\"HTTP/1.0 和 HTTP/1.1 有什么区别？\",\"a\":\"http-1-0-和-http-1-1-有什么区别\"},\"2265\":{\"t\":\"连接方式 : HTTP/1.0 为短连接，HTTP/1.1 支持长连接。\"},\"2266\":{\"t\":\"状态响应码 : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，100 (Continue)——在请求大资源前的预热请求，206 (Partial Content)——范围请求的标识码，409 (Conflict)——请求与当前资源的规定冲突，410 (Gone)——资源已被永久转移，而且没有任何已知的转发地址。\"},\"2267\":{\"t\":\"缓存机制 : 在 HTTP/1.0 中主要使用 Header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP/1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。\"},\"2268\":{\"t\":\"Host 头（Host Header）处理 :HTTP/1.1 引入了 Host 头字段，允许在同一 IP 地址上托管多个域名，从而支持虚拟主机的功能。而 HTTP/1.0 没有 Host 头字段，无法实现虚拟主机。\"},\"2269\":{\"h\":\"HTTP/1.1 和 HTTP/2.0 有什么区别？\",\"a\":\"http-1-1-和-http-2-0-有什么区别\"},\"2270\":{\"t\":\"IO 多路复用（Multiplexing） ：HTTP/2.0 在同一连接上可以同时传输多个请求和响应（可以看作是 HTTP/1.1 中长链接的升级版本）。HTTP/1.1 则使用串行方式，每个请求和响应都需要独立的连接。这使得 HTTP/2.0 在处理多个请求时更加高效，减少了网络延迟和提高了性能。\"},\"2271\":{\"t\":\"二进制帧（Binary Frames） ：HTTP/2.0 使用二进制帧进行数据传输，而 HTTP/1.1 则使用文本格式的报文。二进制帧更加紧凑和高效，减少了传输的数据量和带宽消耗。\"},\"2272\":{\"t\":\"头部压缩（Header Compression） ：HTTP/1.1 支持Body压缩，Header不支持压缩。HTTP/2.0 支持对Header压缩，减少了网络开销。\"},\"2273\":{\"t\":\"服务器推送（Server Push）：HTTP/2.0 支持服务器推送，可以在客户端请求一个资源时，将其他相关资源一并推送给客户端，从而减少了客户端的请求次数和延迟。而 HTTP/1.1 需要客户端自己发送请求来获取相关资源。\"},\"2274\":{\"h\":\"HTTP/2.0 和 HTTP/3.0 有什么区别？\",\"a\":\"http-2-0-和-http-3-0-有什么区别\"},\"2275\":{\"t\":\"传输协议 ：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP/3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\"},\"2276\":{\"t\":\"连接建立 ：HTTP/2.0 需要经过经典的 TCP 三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP/3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。\"},\"2277\":{\"t\":\"队头阻塞 ：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。\"},\"2278\":{\"h\":\"HTTPS\",\"a\":\"https\"},\"2279\":{\"h\":\"HTTP 和 HTTPS 有什么区别？\",\"a\":\"http-和-https-有什么区别\"},\"2280\":{\"t\":\"端口号 ：HTTP 默认是 80，HTTPS 默认是 443。\"},\"2281\":{\"t\":\"URL 前缀 ：HTTP 的 URL 前缀是 http://，HTTPS 的 URL 前缀是 https://。\"},\"2282\":{\"t\":\"安全性和资源消耗 ： HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。\"},\"2283\":{\"t\":\"SEO（搜索引擎优化） ：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。\"},\"2284\":{\"h\":\"DNS\",\"a\":\"dns\"},\"2285\":{\"t\":\"DNS 中的域名都是用句点来分隔的，比如 www.server.com，这里的句点代表了不同层次之间的界限。\"},\"2286\":{\"t\":\"在域名中，越靠右的位置表示其层级越高。\"},\"2287\":{\"t\":\"实际上域名最后还有一个点，比如 www.server.com.，这个最后的一个点代表根域名。\"},\"2288\":{\"t\":\"也就是，. 根域是在最顶层，它的下一层就是 .com 顶级域，再下面是 server.com。\"},\"2289\":{\"t\":\"所以域名的层级关系类似一个树状结构：\"},\"2290\":{\"t\":\"根 DNS 服务器（.）\"},\"2291\":{\"t\":\"顶级域 DNS 服务器（.com）\"},\"2292\":{\"t\":\"权威 DNS 服务器（server.com）\"},\"2293\":{\"t\":\"根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。\"},\"2294\":{\"t\":\"这样一来，任何 DNS 服务器就都可以找到并访问根域 DNS 服务器了。\"},\"2295\":{\"t\":\"因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。\"},\"2296\":{\"h\":\"域名解析的工作流程：\",\"a\":\"域名解析的工作流程\"},\"2297\":{\"t\":\"客户端首先会发出一个 DNS 请求，问 www.server.com 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。\"},\"2298\":{\"t\":\"本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 www.server.com，则它直接返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 www.server.com 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。\"},\"2299\":{\"t\":\"根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“www.server.com 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”\"},\"2300\":{\"t\":\"本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 www.server.com 的 IP 地址吗？”\"},\"2301\":{\"t\":\"顶级域名服务器说：“我给你负责 www.server.com 区域的权威 DNS 服务器的地址，你去问它应该能问到”。\"},\"2302\":{\"t\":\"本地 DNS 于是转向问权威 DNS 服务器：“老三，www.server.com对应的IP是啥呀？” server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。\"},\"2303\":{\"t\":\"权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。\"},\"2304\":{\"t\":\"本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。\"},\"2305\":{\"h\":\"1.计算机网络基础\"},\"2306\":{\"h\":\"1.键入网址到网页显示，期间发生了什么？\",\"a\":\"_1-键入网址到网页显示-期间发生了什么\"},\"2307\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"2308\":{\"t\":\"总体来说分为以下几个过程:\"},\"2309\":{\"t\":\"DNS 解析\"},\"2310\":{\"t\":\"TCP 连接\"},\"2311\":{\"t\":\"发送 HTTP 请求\"},\"2312\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"2313\":{\"t\":\"浏览器解析渲染页面\"},\"2314\":{\"t\":\"连接结束\"},\"2315\":{\"h\":\"2.OSI 七层模型\",\"a\":\"_2-osi-七层模型\"},\"2316\":{\"h\":\"3.TCP/IP 四层模型\",\"a\":\"_3-tcp-ip-四层模型\"},\"2317\":{\"h\":\"MySQL\"},\"2318\":{\"h\":\"MySQL\",\"a\":\"mysql\"},\"2319\":{\"h\":\"InnoDB特性\",\"a\":\"innodb特性\"},\"2320\":{\"h\":\"MyISAM 和 InnoDB 有什么区别？\",\"a\":\"myisam-和-innodb-有什么区别\"},\"2321\":{\"t\":\"MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，可谓是风光一时。\"},\"2322\":{\"t\":\"虽然，MyISAM 的性能还行，各种特性也还不错（比如全文索引、压缩、空间函数等）。但是，MyISAM 不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。\"},\"2323\":{\"t\":\"MySQL 5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。\"},\"2324\":{\"t\":\"言归正传！咱们下面还是来简单对比一下两者：\"},\"2325\":{\"t\":\"1.是否支持行级锁\"},\"2326\":{\"t\":\"MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。\"},\"2327\":{\"t\":\"也就说，MyISAM 一锁就是锁住了整张表，这在并发写的情况下是多么滴憨憨啊！这也是为什么 InnoDB 在并发写的时候，性能更牛皮了！\"},\"2328\":{\"t\":\"2.是否支持事务\"},\"2329\":{\"t\":\"MyISAM 不提供事务支持。\"},\"2330\":{\"t\":\"InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别，具有提交(commit)和回滚(rollback)事务的能力。并且，InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）。\"},\"2331\":{\"t\":\"3.是否支持外键\"},\"2332\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2333\":{\"t\":\"外键对于维护数据一致性非常有帮助，但是对性能有一定的损耗。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，在业务代码中进行约束即可！\"},\"2334\":{\"t\":\"阿里的《Java 开发手册》也是明确规定禁止使用外键的。\"},\"2335\":{\"t\":\"4.是否支持数据库异常崩溃后的安全恢复\"},\"2336\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2337\":{\"t\":\"使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 redo log 。\"},\"2338\":{\"t\":\"5.是否支持 MVCC\"},\"2339\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2340\":{\"t\":\"讲真，这个对比有点废话，毕竟 MyISAM 连行级锁都不支持。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能。\"},\"2341\":{\"t\":\"6.索引实现不一样。\"},\"2342\":{\"t\":\"虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。\"},\"2343\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。\"},\"2344\":{\"h\":\"索引\",\"a\":\"索引\"},\"2345\":{\"t\":\"索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。\"},\"2346\":{\"h\":\"底层数据结构：\",\"a\":\"底层数据结构\"},\"2347\":{\"t\":\"Hash 表\"},\"2348\":{\"t\":\"哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。\"},\"2349\":{\"t\":\"为何能够通过 key 快速取出 value 呢？ 原因在于 哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。\"},\"2350\":{\"t\":\"既然哈希表这么快，为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。\"},\"2351\":{\"t\":\"B 树& B+树\"},\"2352\":{\"t\":\"B 树也称 B-树,全称为 多路平衡查找树 ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 Balanced （平衡）的意思。\"},\"2353\":{\"t\":\"目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。\"},\"2354\":{\"t\":\"B 树& B+树两者有何异同呢？\"},\"2355\":{\"t\":\"B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\"},\"2356\":{\"t\":\"B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。\"},\"2357\":{\"t\":\"B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\"},\"2358\":{\"t\":\"在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）\"},\"2359\":{\"t\":\"MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引（非聚集索引）”。\"},\"2360\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“聚簇索引（聚集索引）”，而其余的索引都作为 辅助索引 ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。\"},\"2361\":{\"h\":\"类型总结\",\"a\":\"类型总结\"},\"2362\":{\"t\":\"按照数据结构维度划分：\"},\"2363\":{\"t\":\"BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。\"},\"2364\":{\"t\":\"哈希索引：类似键值对的形式，一次即可定位。\"},\"2365\":{\"t\":\"RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2366\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2367\":{\"t\":\"按照底层存储方式角度划分：\"},\"2368\":{\"t\":\"聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。\"},\"2369\":{\"t\":\"非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"2370\":{\"t\":\"按照应用维度划分：\"},\"2371\":{\"t\":\"主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。\"},\"2372\":{\"t\":\"普通索引：仅加速查询。\"},\"2373\":{\"t\":\"唯一索引：加速查询 + 列值唯一（可以有 NULL）。\"},\"2374\":{\"t\":\"覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。\"},\"2375\":{\"t\":\"联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。\"},\"2376\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2377\":{\"h\":\"主键索引：\",\"a\":\"主键索引\"},\"2378\":{\"t\":\"数据表的主键列使用的就是主键索引。\"},\"2379\":{\"t\":\"一张数据表有只能有一个主键，并且主键不能为 null，不能重复。\"},\"2380\":{\"t\":\"在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。\"},\"2381\":{\"t\":\"img\"},\"2382\":{\"h\":\"二级索引：\",\"a\":\"二级索引\"},\"2383\":{\"t\":\"二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。\"},\"2384\":{\"t\":\"唯一索引，普通索引，前缀索引等索引属于二级索引。\"},\"2385\":{\"t\":\"PS: 不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。\"},\"2386\":{\"t\":\"唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。\"},\"2387\":{\"t\":\"普通索引(Index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。\"},\"2388\":{\"t\":\"前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。\"},\"2389\":{\"t\":\"全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。\"},\"2390\":{\"t\":\"img\"},\"2391\":{\"h\":\"聚簇索引：\",\"a\":\"聚簇索引\"},\"2392\":{\"t\":\"聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。\"},\"2393\":{\"t\":\"在 MySQL 中，InnoDB 引擎的表的 .ibd文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。\"},\"2394\":{\"t\":\"优点 ：\"},\"2395\":{\"t\":\"查询速度非常快 ：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。\"},\"2396\":{\"t\":\"对排序查找和范围查找优化 ：聚簇索引对于主键的排序查找和范围查找速度非常快。\"},\"2397\":{\"t\":\"缺点 ：\"},\"2398\":{\"t\":\"依赖于有序的数据 ：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。\"},\"2399\":{\"t\":\"更新代价大 ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。\"},\"2400\":{\"h\":\"非聚簇索引：\",\"a\":\"非聚簇索引\"},\"2401\":{\"t\":\"非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"2402\":{\"t\":\"非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。\"},\"2403\":{\"t\":\"优点 ：\"},\"2404\":{\"t\":\"更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的\"},\"2405\":{\"t\":\"缺点 ：\"},\"2406\":{\"t\":\"依赖于有序的数据 ：跟聚簇索引一样，非聚簇索引也依赖于有序的数据\"},\"2407\":{\"t\":\"可能会二次查询(回表) ：这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。\"},\"2408\":{\"h\":\"覆盖索引：\",\"a\":\"覆盖索引\"},\"2409\":{\"t\":\"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 覆盖索引（Covering Index） 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！\"},\"2410\":{\"t\":\"覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。\"},\"2411\":{\"t\":\"如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。\"},\"2412\":{\"h\":\"联合索引：\",\"a\":\"联合索引\"},\"2413\":{\"t\":\"使用表中的多个字段创建索引，就是 联合索引，也叫 组合索引 或 复合索引。\"},\"2414\":{\"t\":\"最左前缀匹配原则\"},\"2415\":{\"t\":\"最左前缀匹配原则指的是，在使用联合索引时，MySQL 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 >、<）才会停止匹配。对于 >=、<=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。\"},\"2416\":{\"t\":\"索引下推\"},\"2417\":{\"t\":\"索引下推（Index Condition Pushdown） 是 MySQL 5.6 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。\"},\"2418\":{\"h\":\"正确使用索引的一些建议：\",\"a\":\"正确使用索引的一些建议\"},\"2419\":{\"t\":\"选择合适的字段创建索引：\"},\"2420\":{\"t\":\"不为 NULL 的字段 ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。\"},\"2421\":{\"t\":\"被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。\"},\"2422\":{\"t\":\"被作为条件查询的字段 ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。\"},\"2423\":{\"t\":\"频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。\"},\"2424\":{\"t\":\"被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。\"},\"2425\":{\"t\":\"被频繁更新的字段应该慎重建立索引：\"},\"2426\":{\"t\":\"虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。\"},\"2427\":{\"t\":\"限制每张表上的索引数量：\"},\"2428\":{\"t\":\"索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。\"},\"2429\":{\"t\":\"索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。\"},\"2430\":{\"t\":\"因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。\"},\"2431\":{\"t\":\"尽可能的考虑建立联合索引而不是单列索引：\"},\"2432\":{\"t\":\"因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。\"},\"2433\":{\"t\":\"注意避免冗余索引：\"},\"2434\":{\"t\":\"冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\"},\"2435\":{\"t\":\"字符串类型的字段使用前缀索引代替普通索引：\"},\"2436\":{\"t\":\"前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。\"},\"2437\":{\"t\":\"避免索引失效：\"},\"2438\":{\"t\":\"索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：\"},\"2439\":{\"t\":\"使用 SELECT * 进行查询;\"},\"2440\":{\"t\":\"创建了组合索引，但查询条件未遵守最左匹配原则;\"},\"2441\":{\"t\":\"在索引列上进行计算、函数、类型转换等操作;\"},\"2442\":{\"t\":\"以 % 开头的 LIKE 查询比如 like '%abc';\"},\"2443\":{\"t\":\"查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;\"},\"2444\":{\"t\":\"发生隐式转换\"},\"2445\":{\"h\":\"锁机制\",\"a\":\"锁机制\"},\"2446\":{\"t\":\"在 MySQL 里，根据加锁的范围，可以分为全局锁、表级锁和行锁三类。\"},\"2447\":{\"t\":\"img\"},\"2448\":{\"h\":\"全局锁：\",\"a\":\"全局锁\"},\"2449\":{\"t\":\"要使用全局锁，则要执行这条命令：\"},\"2450\":{\"t\":\"flush tables with read lock \"},\"2451\":{\"t\":\"执行后，整个数据库就处于只读状态了，这时其他线程执行以下操作，都会被阻塞：\"},\"2452\":{\"t\":\"对数据的增删改操作，比如 insert、delete、update等语句；\"},\"2453\":{\"t\":\"对表结构的更改操作，比如 alter table、drop table 等语句。\"},\"2454\":{\"t\":\"如果要释放全局锁，则要执行这条命令：\"},\"2455\":{\"t\":\"unlock tables \"},\"2456\":{\"t\":\"全局锁应用场景是什么？\"},\"2457\":{\"t\":\"全局锁主要应用于做全库逻辑备份，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。\"},\"2458\":{\"t\":\"加全局锁又会带来什么缺点呢？\"},\"2459\":{\"t\":\"加上全局锁，意味着整个数据库都是只读状态。\"},\"2460\":{\"t\":\"那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。\"},\"2461\":{\"t\":\"既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？\"},\"2462\":{\"t\":\"有的，如果数据库的引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。\"},\"2463\":{\"t\":\"因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。\"},\"2464\":{\"t\":\"备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 –single-transaction 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。\"},\"2465\":{\"t\":\"InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。\"},\"2466\":{\"t\":\"但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。\"},\"2467\":{\"h\":\"表级锁：\",\"a\":\"表级锁\"},\"2468\":{\"t\":\"MySQL 里面表级别的锁有这几种：\"},\"2469\":{\"t\":\"表锁；\"},\"2470\":{\"t\":\"元数据锁（MDL）;\"},\"2471\":{\"t\":\"意向锁；\"},\"2472\":{\"t\":\"AUTO-INC 锁；\"},\"2473\":{\"h\":\"表锁\",\"a\":\"表锁\"},\"2474\":{\"t\":\"先来说说表锁。\"},\"2475\":{\"t\":\"如果我们想对学生表（t_student）加表锁，可以使用下面的命令：\"},\"2476\":{\"t\":\"//表级别的共享锁，也就是读锁； lock tables t_student read; //表级别的独占锁，也就是写锁； lock tables t_stuent write; \"},\"2477\":{\"t\":\"需要注意的是，表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。\"},\"2478\":{\"t\":\"也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放。\"},\"2479\":{\"t\":\"要释放表锁，可以使用下面这条命令，会释放当前会话的所有表锁：\"},\"2480\":{\"t\":\"unlock tables \"},\"2481\":{\"t\":\"另外，当会话退出后，也会释放所有表锁。\"},\"2482\":{\"t\":\"不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁。\"},\"2483\":{\"h\":\"元数据锁\",\"a\":\"元数据锁\"},\"2484\":{\"t\":\"再来说说元数据锁（MDL）。\"},\"2485\":{\"t\":\"我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：\"},\"2486\":{\"t\":\"对一张表进行 CRUD 操作时，加的是 MDL 读锁；\"},\"2487\":{\"t\":\"对一张表做结构变更操作的时候，加的是 MDL 写锁；\"},\"2488\":{\"t\":\"MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。\"},\"2489\":{\"t\":\"当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。\"},\"2490\":{\"t\":\"反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。\"},\"2491\":{\"t\":\"MDL 不需要显示调用，那它是在什么时候释放的?\"},\"2492\":{\"t\":\"MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。\"},\"2493\":{\"t\":\"那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），那在对表结构做变更操作的时候，可能会发生意想不到的事情，比如下面这个顺序的场景：\"},\"2494\":{\"t\":\"首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；\"},\"2495\":{\"t\":\"然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；\"},\"2496\":{\"t\":\"接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，\"},\"2497\":{\"t\":\"那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。\"},\"2498\":{\"t\":\"为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？\"},\"2499\":{\"t\":\"这是因为申请 MDL 锁的操作会形成一个队列，队列中写锁获取优先级高于读锁，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。\"},\"2500\":{\"t\":\"所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。\"},\"2501\":{\"h\":\"意向锁\",\"a\":\"意向锁\"},\"2502\":{\"t\":\"接着，说说意向锁。\"},\"2503\":{\"t\":\"在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；\"},\"2504\":{\"t\":\"在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；\"},\"2505\":{\"t\":\"也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。\"},\"2506\":{\"t\":\"而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。\"},\"2507\":{\"t\":\"不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：\"},\"2508\":{\"t\":\"//先在表上加上意向共享锁，然后对读取的记录加共享锁 select ... lock in share mode; //先表上加上意向独占锁，然后对读取的记录加独占锁 select ... for update; \"},\"2509\":{\"t\":\"意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables ... read*）和独占表锁（*lock tables ... write*）发生冲突。\"},\"2510\":{\"t\":\"表锁和行锁是满足读读共享、读写互斥、写写互斥的。\"},\"2511\":{\"t\":\"如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。\"},\"2512\":{\"t\":\"那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。\"},\"2513\":{\"t\":\"所以，意向锁的目的是为了快速判断表里是否有记录被加锁。\"},\"2514\":{\"h\":\"AUTO-INC 锁\",\"a\":\"auto-inc-锁\"},\"2515\":{\"t\":\"表里的主键通常都会设置成自增的，这是通过对主键字段声明 AUTO_INCREMENT 属性实现的。\"},\"2516\":{\"t\":\"之后可以在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 AUTO-INC 锁实现的。\"},\"2517\":{\"t\":\"AUTO-INC 锁是特殊的表锁机制，锁不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放。\"},\"2518\":{\"t\":\"在插入数据时，会加一个表级别的 AUTO-INC 锁，然后为被 AUTO_INCREMENT 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。\"},\"2519\":{\"t\":\"那么，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 AUTO_INCREMENT 修饰的字段的值是连续递增的。\"},\"2520\":{\"t\":\"但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。\"},\"2521\":{\"t\":\"因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种轻量级的锁来实现自增。\"},\"2522\":{\"t\":\"一样也是在插入数据的时候，会为被 AUTO_INCREMENT 修饰的字段加上轻量级锁，然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁。\"},\"2523\":{\"t\":\"InnoDB 存储引擎提供了个 innodb_autoinc_lock_mode 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。\"},\"2524\":{\"t\":\"当 innodb_autoinc_lock_mode = 0，就采用 AUTO-INC 锁，语句执行结束后才释放锁；\"},\"2525\":{\"t\":\"当 innodb_autoinc_lock_mode = 2，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。\"},\"2526\":{\"t\":\"当 innodb_autoinc_lock_mode = 1： \"},\"2527\":{\"t\":\"普通 insert 语句，自增锁在申请之后就马上释放；\"},\"2528\":{\"t\":\"类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；\"},\"2529\":{\"t\":\"当 innodb_autoinc_lock_mode = 2 是性能最高的方式，但是当搭配 binlog 的日志格式是 statement 一起使用的时候，在「主从复制的场景」中会发生数据不一致的问题。\"},\"2530\":{\"t\":\"要解决这问题，binlog 日志格式要设置为 row，这样在 binlog 里面记录的是主库分配的自增值，到备库执行的时候，主库的自增值是什么，从库的自增值就是什么。\"},\"2531\":{\"t\":\"所以，当 innodb_autoinc_lock_mode = 2 时，并且 binlog_format = row，既能提升并发性，又不会出现数据一致性问题。\"},\"2532\":{\"h\":\"行级锁：\",\"a\":\"行级锁\"},\"2533\":{\"t\":\"InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。\"},\"2534\":{\"t\":\"前面也提到，普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为锁定读。\"},\"2535\":{\"t\":\"//对读取的记录加共享锁 select ... lock in share mode; //对读取的记录加独占锁 select ... for update; \"},\"2536\":{\"t\":\"上面这两条语句必须在一个事务中，因为当事务提交了，锁就会被释放，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。\"},\"2537\":{\"t\":\"共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。\"},\"2538\":{\"t\":\"img\"},\"2539\":{\"t\":\"行级锁的类型主要有三类：\"},\"2540\":{\"t\":\"Record Lock，记录锁，也就是仅仅把一条记录锁上；\"},\"2541\":{\"t\":\"Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"},\"2542\":{\"t\":\"Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"2543\":{\"h\":\"Record Lock\",\"a\":\"record-lock\"},\"2544\":{\"t\":\"Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：\"},\"2545\":{\"t\":\"当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;\"},\"2546\":{\"t\":\"当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。\"},\"2547\":{\"h\":\"Gap Lock\",\"a\":\"gap-lock\"},\"2548\":{\"t\":\"Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。\"},\"2549\":{\"t\":\"假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。\"},\"2550\":{\"t\":\"间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。\"},\"2551\":{\"h\":\"Next-Key Lock\",\"a\":\"next-key-lock\"},\"2552\":{\"t\":\"Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"2553\":{\"t\":\"所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。\"},\"2554\":{\"t\":\"next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。\"},\"2555\":{\"t\":\"比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。\"},\"2556\":{\"t\":\"虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。\"},\"2557\":{\"h\":\"插入意向锁\",\"a\":\"插入意向锁\"},\"2558\":{\"t\":\"一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。\"},\"2559\":{\"t\":\"如果有的话，插入操作就会发生阻塞，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个插入意向锁，表明有事务想在某个区间插入新记录，但是现在处于等待状态。\"},\"2560\":{\"t\":\"插入意向锁名字虽然有意向锁，但是它并不是意向锁，它是一种特殊的间隙锁，属于行级别锁。\"},\"2561\":{\"t\":\"如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。\"},\"2562\":{\"t\":\"插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。\"},\"2563\":{\"h\":\"ACID事务\",\"a\":\"acid事务\"},\"2564\":{\"t\":\"事务是由 MySQL 的引擎来实现的，我们常见的 InnoDB 引擎它是支持事务的。\"},\"2565\":{\"t\":\"不过并不是所有的引擎都能支持事务，比如 MySQL 原生的 MyISAM 引擎就不支持事务，也正是这样，所以大多数 MySQL 的引擎都是用 InnoDB。\"},\"2566\":{\"t\":\"事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：\"},\"2567\":{\"t\":\"原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。\"},\"2568\":{\"t\":\"一致性（Consistency）：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。\"},\"2569\":{\"t\":\"隔离性（Isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。\"},\"2570\":{\"t\":\"持久性（Durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\"},\"2571\":{\"t\":\"InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？\"},\"2572\":{\"t\":\"持久性是通过 redo log （重做日志）来保证的；\"},\"2573\":{\"t\":\"原子性是通过 undo log（回滚日志） 来保证的；\"},\"2574\":{\"t\":\"隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；\"},\"2575\":{\"t\":\"一致性则是通过持久性+原子性+隔离性来保证；\"},\"2576\":{\"h\":\"脏读\",\"a\":\"脏读\"},\"2577\":{\"t\":\"如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。\"},\"2578\":{\"t\":\"举个栗子。\"},\"2579\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后再执行更新操作，如果此时事务 A 还没有提交事务，而此时正好事务 B 也从数据库中读取小林的余额数据，那么事务 B 读取到的余额数据是刚才事务 A 更新后的数据，即使没有提交事务。\"},\"2580\":{\"t\":\"因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。\"},\"2581\":{\"h\":\"不可重复读\",\"a\":\"不可重复读\"},\"2582\":{\"t\":\"在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。\"},\"2583\":{\"t\":\"举个栗子。\"},\"2584\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后继续执行代码逻辑处理，在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为不可重复读。\"},\"2585\":{\"h\":\"幻读\",\"a\":\"幻读\"},\"2586\":{\"t\":\"在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。\"},\"2587\":{\"t\":\"举个栗子。\"},\"2588\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库查询账户余额大于 100 万的记录，发现共有 5 条，然后事务 B 也按相同的搜索条件也是查询出了 5 条记录。\"},\"2589\":{\"t\":\"接下来，事务 A 插入了一条余额超过 100 万的账号，并提交了事务，此时数据库超过 100 万余额的账号个数就变为 6。\"},\"2590\":{\"t\":\"然后事务 B 再次查询账户余额大于 100 万的记录，此时查询到的记录数量有 6 条，发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。\"},\"2591\":{\"h\":\"四大隔离级别\",\"a\":\"四大隔离级别\"},\"2592\":{\"t\":\"SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：\"},\"2593\":{\"t\":\"读未提交（*read uncommitted*），指一个事务还没提交时，它做的变更就能被其他事务看到；\"},\"2594\":{\"t\":\"读提交（*read committed*），指一个事务提交之后，它做的变更才能被其他事务看到；\"},\"2595\":{\"t\":\"可重复读（*repeatable read*），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别；\"},\"2596\":{\"t\":\"串行化（*serializable* ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\"},\"2597\":{\"t\":\"按隔离水平高低排序如下：\"},\"2598\":{\"t\":\"图片\"},\"2599\":{\"t\":\"针对不同的隔离级别，并发事务时可能发生的现象也会不同。也就是说：\"},\"2600\":{\"t\":\"在「读未提交」隔离级别下，可能发生脏读、不可重复读和幻读现象；\"},\"2601\":{\"t\":\"在「读提交」隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；\"},\"2602\":{\"t\":\"在「可重复读」隔离级别下，可能发生幻读现象，但是不可能脏读和不可重复读现象；\"},\"2603\":{\"t\":\"在「串行化」隔离级别下，脏读、不可重复读和幻读现象都不可能会发生。\"},\"2604\":{\"t\":\"所以，要解决脏读现象，就要升级到「读提交」以上的隔离级别；要解决不可重复读现象，就要升级到「可重复读」的隔离级别，要解决幻读现象不建议将隔离级别升级到「串行化」。\"},\"2605\":{\"t\":\"不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，我们讨论的 MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入。\"},\"2606\":{\"t\":\"MySQL 在「可重复读」隔离级别下，可以很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能。\"},\"2607\":{\"t\":\"MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象，解决的方案有两种：\"},\"2608\":{\"t\":\"针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\"},\"2609\":{\"t\":\"针对当前读（select ... for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\"},\"2610\":{\"t\":\"这四种隔离级别具体是如何实现的呢？\"},\"2611\":{\"t\":\"对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；\"},\"2612\":{\"t\":\"对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；\"},\"2613\":{\"t\":\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View。\"},\"2614\":{\"h\":\"MVCC\",\"a\":\"mvcc\"},\"2615\":{\"t\":\"MVCC 的实现依赖于：隐藏字段、Read View、undo log。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改\"},\"2616\":{\"t\":\"隐藏字段\"},\"2617\":{\"t\":\"在内部，InnoDB 存储引擎为每行数据添加了三个 隐藏字段：\"},\"2618\":{\"t\":\"DB_TRX_ID（6字节）：表示最后一次插入或更新该行的事务 id。此外，delete 操作在内部被视为更新，只不过会在记录头 Record header 中的 deleted_flag 字段将其标记为已删除\"},\"2619\":{\"t\":\"DB_ROLL_PTR（7字节） 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空\"},\"2620\":{\"t\":\"DB_ROW_ID（6字节）：如果没有设置主键且该表没有唯一非空索引时，InnoDB 会使用该 id 来生成聚簇索引\"},\"2621\":{\"t\":\"ReadView主要是用来做可见性判断，里面保存了 “当前对本事务不可见的其他活跃事务”\"},\"2622\":{\"t\":\" trx_id_t m_low_limit_id; /* 大于等于这个 ID 的事务均不可见 */ trx_id_t m_up_limit_id; /* 小于这个 ID 的事务均可见 */ trx_id_t m_creator_trx_id; /* 创建该 Read View 的事务ID */ trx_id_t m_low_limit_no; /* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */ ids_t m_ids; /* 创建 Read View 时的活跃事务列表 */ \"},\"2623\":{\"t\":\"主要有以下字段：\"},\"2624\":{\"t\":\"m_low_limit_id：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见\"},\"2625\":{\"t\":\"m_up_limit_id：活跃事务列表 m_ids 中最小的事务 ID，如果 m_ids 为空，则 m_up_limit_id 为 m_low_limit_id。小于这个 ID 的数据版本均可见\"},\"2626\":{\"t\":\"m_ids：Read View 创建时其他未提交的活跃事务 ID 列表。创建 Read View时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。m_ids 不包括当前事务自己和已提交的事务（正在内存中）\"},\"2627\":{\"t\":\"m_creator_trx_id：创建该 Read View 的事务 ID\"},\"2628\":{\"t\":\"trans_visible\"},\"2629\":{\"h\":\"undo-log\",\"a\":\"undo-log\"},\"2630\":{\"t\":\"undo log 主要有两个作用：\"},\"2631\":{\"t\":\"当事务回滚时用于将数据恢复到修改前的样子\"},\"2632\":{\"t\":\"另一个作用是 MVCC ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 undo log 读取之前的版本数据，以此实现非锁定读\"},\"2633\":{\"t\":\"在 InnoDB 存储引擎中 undo log 分为两种： insert undo log 和 update undo log：\"},\"2634\":{\"t\":\"insert undo log ：指在 insert 操作中产生的 undo log。因为 insert 操作的记录只对事务本身可见，对其他事务不可见，故该 undo log 可以在事务提交后直接删除。不需要进行 purge 操作\"},\"2635\":{\"h\":\"Jdbc防止sql注入\",\"a\":\"jdbc防止sql注入\"},\"2636\":{\"t\":\"我们只需要使用PreparedStatement解决 将敏感字符进行转义。\"},\"2637\":{\"t\":\"我们可以看到输出的SQL文是把整个参数用引号包起来，并把参数中的引号作为转义字符，从而避免了参数也作为条件的一部分。\"},\"2638\":{\"t\":\"参考：https://blog.csdn.net/weixin_52258054/article/details/124891266\"},\"2639\":{\"h\":\"常见优化手段\",\"a\":\"常见优化手段\"},\"2640\":{\"h\":\"经常一起使用的列放到一个表中\",\"a\":\"经常一起使用的列放到一个表中\"},\"2641\":{\"t\":\"避免更多的关联操作。\"},\"2642\":{\"h\":\"禁止在数据库中存储文件（比如图片）这类大的二进制数据\",\"a\":\"禁止在数据库中存储文件-比如图片-这类大的二进制数据\"},\"2643\":{\"t\":\"在数据库中存储文件会严重影响数据库性能，消耗过多存储空间。\"},\"2644\":{\"t\":\"文件（比如图片）这类大的二进制数据通常存储于文件服务器，数据库只存储文件地址信息。\"},\"2645\":{\"h\":\"优先选择符合存储需要的最小的数据类型\",\"a\":\"优先选择符合存储需要的最小的数据类型\"},\"2646\":{\"t\":\"存储字节越小，占用也就空间越小，性能也越好。\"},\"2647\":{\"h\":\"同财务相关的金额类数据必须使用 decimal 类型\",\"a\":\"同财务相关的金额类数据必须使用-decimal-类型\"},\"2648\":{\"t\":\"非精准浮点 ：float,double\"},\"2649\":{\"t\":\"精准浮点 ：decimal\"},\"2650\":{\"t\":\"decimal 类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节。并且，decimal 可用于存储比 bigint 更大的整型数据\"},\"2651\":{\"t\":\"不过， 由于 decimal 需要额外的空间和计算开销，应该尽量只在需要对数据进行精确计算时才使用 decimal 。\"},\"2652\":{\"h\":\"单表不要包含过多字段\",\"a\":\"单表不要包含过多字段\"},\"2653\":{\"t\":\"如果一个表包含过多字段的话，可以考虑将其分解成多个表，必要时增加中间表进行关联。\"},\"2654\":{\"h\":\"禁止使用全文索引\",\"a\":\"禁止使用全文索引\"},\"2655\":{\"t\":\"全文索引不适用于 OLTP 场景。\"},\"2656\":{\"h\":\"禁止给表中的每一列都建立单独的索引\",\"a\":\"禁止给表中的每一列都建立单独的索引\"},\"2657\":{\"t\":\"5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。\"},\"2658\":{\"h\":\"每个 InnoDB 表必须有个主键\",\"a\":\"每个-innodb-表必须有个主键\"},\"2659\":{\"h\":\"禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询\",\"a\":\"禁止使用-select-必须使用-select-字段列表-查询\"},\"2660\":{\"t\":\"SELECT * 消耗更多的 CPU 和 IO 以网络带宽资源\"},\"2661\":{\"t\":\"SELECT * 无法使用覆盖索引\"},\"2662\":{\"t\":\"SELECT <字段列表> 可减少表结构变更带来的影响\"},\"2663\":{\"h\":\"避免使用子查询，可以把子查询优化为 join 操作\",\"a\":\"避免使用子查询-可以把子查询优化为-join-操作\"},\"2664\":{\"t\":\"通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。\"},\"2665\":{\"t\":\"子查询性能差的原因： 子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。\"},\"2666\":{\"h\":\"Redis\"},\"2667\":{\"h\":\"Redis\",\"a\":\"redis\"},\"2668\":{\"h\":\"Redis 为什么这么快？\",\"a\":\"redis-为什么这么快\"},\"2669\":{\"t\":\"Redis 内部做了非常多的性能优化，比较重要的主要有下面 3 点：\"},\"2670\":{\"t\":\"Redis 基于内存，内存的访问速度是磁盘的上千倍；\"},\"2671\":{\"t\":\"Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；\"},\"2672\":{\"t\":\"Redis 内置了多种优化过后的数据结构实现，性能非常高。\"},\"2673\":{\"h\":\"基本数据类型\",\"a\":\"基本数据类型\"},\"2674\":{\"t\":\"5 种基础数据类型 ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\"},\"2675\":{\"t\":\"3 种特殊数据类型 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。\"},\"2676\":{\"h\":\"数据结构及适用场景\",\"a\":\"数据结构及适用场景\"},\"2677\":{\"h\":\"String（字符串）：\",\"a\":\"string-字符串\"},\"2678\":{\"h\":\"数据结构：\",\"a\":\"数据结构\"},\"2679\":{\"t\":\"String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。\"},\"2680\":{\"t\":\"SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：\"},\"2681\":{\"t\":\"SDS 不仅可以保存文本数据，还可以保存二进制数据。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。\"},\"2682\":{\"t\":\"SDS 获取字符串长度的时间复杂度是 O(1)。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 len 属性记录了字符串长度，所以复杂度为 O(1)。\"},\"2683\":{\"t\":\"Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。\"},\"2684\":{\"h\":\"应用场景：\",\"a\":\"应用场景\"},\"2685\":{\"t\":\"常规数据（比如 session、token、序列化后的对象、图片的路径）的缓存；\"},\"2686\":{\"t\":\"计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；\"},\"2687\":{\"t\":\"分布式锁(利用 SETNX key value 命令可以实现一个最简易的分布式锁)；\"},\"2688\":{\"h\":\"List（列表）：\",\"a\":\"list-列表\"},\"2689\":{\"h\":\"数据结构：\",\"a\":\"数据结构-1\"},\"2690\":{\"t\":\"List 类型的底层数据结构是由双向链表或压缩列表实现的：\"},\"2691\":{\"t\":\"如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用压缩列表作为 List 类型的底层数据结构；\"},\"2692\":{\"t\":\"如果列表的元素不满足上面的条件，Redis 会使用双向链表作为 List 类型的底层数据结构；\"},\"2693\":{\"t\":\"但是在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表。\"},\"2694\":{\"h\":\"应用场景：\",\"a\":\"应用场景-1\"},\"2695\":{\"t\":\"消息队列，List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列；\"},\"2696\":{\"h\":\"Set（集合）：\",\"a\":\"set-集合\"},\"2697\":{\"h\":\"数据结构：\",\"a\":\"数据结构-2\"},\"2698\":{\"t\":\"Set 类型的底层数据结构是由哈希表或整数集合实现的：\"},\"2699\":{\"t\":\"如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用整数集合作为 Set 类型的底层数据结构；\"},\"2700\":{\"t\":\"如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构。\"},\"2701\":{\"h\":\"应用场景：\",\"a\":\"应用场景-2\"},\"2702\":{\"t\":\"点赞、共同关注；\"},\"2703\":{\"h\":\"Hash（散列）：\",\"a\":\"hash-散列\"},\"2704\":{\"h\":\"数据结构：\",\"a\":\"数据结构-3\"},\"2705\":{\"t\":\"Hash 类型的底层数据结构是由压缩列表或哈希表实现的：\"},\"2706\":{\"t\":\"如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用压缩列表作为 Hash 类型的底层数据结构；\"},\"2707\":{\"t\":\"如果哈希类型元素不满足上面条件，Redis 会使用哈希表作为 Hash 类型的 底层数据结构。\"},\"2708\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"2709\":{\"h\":\"应用场景：\",\"a\":\"应用场景-3\"},\"2710\":{\"t\":\"Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象以及购物车；\"},\"2711\":{\"h\":\"Zset（有序集合）：\",\"a\":\"zset-有序集合\"},\"2712\":{\"h\":\"数据结构：\",\"a\":\"数据结构-4\"},\"2713\":{\"t\":\"Zset 类型的底层数据结构是由压缩列表或跳表实现的：\"},\"2714\":{\"t\":\"如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构；\"},\"2715\":{\"t\":\"如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构；\"},\"2716\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"2717\":{\"h\":\"应用场景：\",\"a\":\"应用场景-4\"},\"2718\":{\"t\":\"有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。\"},\"2719\":{\"h\":\"持久化\",\"a\":\"持久化\"},\"2720\":{\"t\":\"Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:\"},\"2721\":{\"t\":\"快照（snapshotting，RDB）\"},\"2722\":{\"t\":\"只追加文件（append-only file, AOF）\"},\"2723\":{\"t\":\"RDB 和 AOF 的混合持久化(Redis 4.0 新增)\"},\"2724\":{\"h\":\"什么是 RDB 持久化？\",\"a\":\"什么是-rdb-持久化\"},\"2725\":{\"t\":\"Redis 可以通过创建快照来获得存储在内存里面的数据在 某个时间点 上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\"},\"2726\":{\"t\":\"快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\"},\"2727\":{\"t\":\"save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。 \"},\"2728\":{\"h\":\"RDB 创建快照时会阻塞主线程吗？\",\"a\":\"rdb-创建快照时会阻塞主线程吗\"},\"2729\":{\"t\":\"Redis 提供了两个命令来生成 RDB 快照文件：\"},\"2730\":{\"t\":\"save : 同步保存操作，会阻塞 Redis 主线程；\"},\"2731\":{\"t\":\"bgsave : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。\"},\"2732\":{\"h\":\"什么是 AOF 持久化？\",\"a\":\"什么是-aof-持久化\"},\"2733\":{\"t\":\"与快照持久化相比，AOF 持久化的实时性更好。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化（Redis 6.0 之后已经默认是开启了），可以通过 appendonly 参数开启：\"},\"2734\":{\"t\":\"appendonly yes \"},\"2735\":{\"t\":\"开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到 AOF 缓冲区 server.aof_buf 中，然后再写入到 AOF 文件中（此时还在系统内核缓存区为同步到磁盘），最后再根据持久化方式（ fsync策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中的。\"},\"2736\":{\"t\":\"只有同步到磁盘中才算持久化保存了，否则依然存在数据丢失的风险，比如说：系统内核缓存区的数据还未同步，磁盘机器就宕机了，那这部分数据就算丢失了。\"},\"2737\":{\"t\":\"AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\"},\"2738\":{\"h\":\"AOF 工作基本流程是怎样的？\",\"a\":\"aof-工作基本流程是怎样的\"},\"2739\":{\"t\":\"AOF 持久化功能的实现可以简单分为 5 步：\"},\"2740\":{\"t\":\"命令追加（append） ：所有的写命令会追加到 AOF 缓冲区中。\"},\"2741\":{\"t\":\"文件写入（write） ：将 AOF 缓冲区的数据写入到 AOF 文件中。这一步需要调用write函数（系统调用），write将数据写入到了系统内核缓冲区之后直接返回了（延迟写）。注意！！！此时并没有同步到磁盘。\"},\"2742\":{\"t\":\"文件同步（fsync） ：AOF 缓冲区根据对应的持久化方式（ fsync 策略）向硬盘做同步操作。这一步需要调用 fsync 函数（系统调用）， fsync 针对单个文件操作，对其进行强制硬盘同步，fsync 将阻塞直到写入磁盘完成后返回，保证了数据持久化。\"},\"2743\":{\"t\":\"文件重写（rewrite） ：随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。\"},\"2744\":{\"t\":\"重启加载（load） ：当 Redis 重启时，可以加载 AOF 文件进行数据恢复。\"},\"2745\":{\"t\":\"Linux 系统直接提供了一些函数用于对文件和设备进行访问和控制，这些函数被称为 系统调用（syscall）。\"},\"2746\":{\"t\":\"这里对上面提到的一些 Linux 系统调用再做一遍解释：\"},\"2747\":{\"t\":\"write ：写入系统内核缓冲区之后直接返回（仅仅是写到缓冲区），不会立即同步到硬盘。虽然提高了效率，但也带来了数据丢失的风险。同步硬盘操作通常依赖于系统调度机制，Linux 内核通常为 30s 同步一次，具体值取决于写出的数据量和 I/O 缓冲区的状态。\"},\"2748\":{\"t\":\"fsync ： fsync用于强制刷新系统内核缓冲区（同步到到磁盘），确保写磁盘操作结束才会返回。\"},\"2749\":{\"t\":\"AOF 工作流程图如下：\"},\"2750\":{\"t\":\"AOF 工作基本流程\"},\"2751\":{\"h\":\"删除与淘汰策略\",\"a\":\"删除与淘汰策略\"},\"2752\":{\"h\":\"过期的数据的删除策略了解么？\",\"a\":\"过期的数据的删除策略了解么\"},\"2753\":{\"t\":\"如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？\"},\"2754\":{\"t\":\"常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：\"},\"2755\":{\"t\":\"惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。\"},\"2756\":{\"t\":\"定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。\"},\"2757\":{\"t\":\"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性/懒汉式删除 。\"},\"2758\":{\"t\":\"但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。\"},\"2759\":{\"t\":\"怎么解决这个问题呢？答案就是：Redis 内存淘汰机制。\"},\"2760\":{\"h\":\"Redis 内存淘汰机制了解么？\",\"a\":\"redis-内存淘汰机制了解么\"},\"2761\":{\"t\":\"相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?\"},\"2762\":{\"t\":\"Redis 提供 6 种数据淘汰策略：\"},\"2763\":{\"t\":\"volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰。\"},\"2764\":{\"t\":\"volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰。\"},\"2765\":{\"t\":\"volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰。\"},\"2766\":{\"t\":\"allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。\"},\"2767\":{\"t\":\"allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰。\"},\"2768\":{\"t\":\"no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\"},\"2769\":{\"t\":\"4.0 版本后增加以下两种：\"},\"2770\":{\"t\":\"volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰。\"},\"2771\":{\"t\":\"allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。\"},\"2772\":{\"h\":\"主从复制\",\"a\":\"主从复制\"},\"2773\":{\"h\":\"哨兵\",\"a\":\"哨兵\"},\"2774\":{\"h\":\"缓存雪崩/击穿/穿透\",\"a\":\"缓存雪崩-击穿-穿透\"},\"2775\":{\"h\":\"什么是缓存穿透？\",\"a\":\"什么是缓存穿透\"},\"2776\":{\"t\":\"缓存穿透说简单点就是大量请求的 key 是不合理的，根本不存在于缓存中，也不存在于数据库中 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"2777\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法\"},\"2778\":{\"t\":\"最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。\"},\"2779\":{\"t\":\"1）缓存无效 key\"},\"2780\":{\"t\":\"如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： SET key value EX 10086 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。\"},\"2781\":{\"t\":\"2）布隆过滤器\"},\"2782\":{\"t\":\"布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。\"},\"2783\":{\"t\":\"具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\"},\"2784\":{\"t\":\"但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。\"},\"2785\":{\"t\":\"为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！\"},\"2786\":{\"t\":\"我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：\"},\"2787\":{\"t\":\"使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。\"},\"2788\":{\"t\":\"根据得到的哈希值，在位数组中把对应下标的值置为 1。\"},\"2789\":{\"t\":\"我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：\"},\"2790\":{\"t\":\"对给定元素再次进行相同的哈希计算；\"},\"2791\":{\"t\":\"得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。\"},\"2792\":{\"t\":\"然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）\"},\"2793\":{\"h\":\"什么是缓存击穿？\",\"a\":\"什么是缓存击穿\"},\"2794\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"2795\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-1\"},\"2796\":{\"t\":\"设置热点数据永不过期或者过期时间比较长。\"},\"2797\":{\"t\":\"针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。\"},\"2798\":{\"t\":\"请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。\"},\"2799\":{\"h\":\"缓存穿透和缓存击穿有什么区别？\",\"a\":\"缓存穿透和缓存击穿有什么区别\"},\"2800\":{\"t\":\"缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。\"},\"2801\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。\"},\"2802\":{\"h\":\"什么是缓存雪崩？\",\"a\":\"什么是缓存雪崩\"},\"2803\":{\"t\":\"我发现缓存雪崩这名字起的有点意思，哈哈。\"},\"2804\":{\"t\":\"实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。\"},\"2805\":{\"t\":\"另外，缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。\"},\"2806\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-2\"},\"2807\":{\"t\":\"针对 Redis 服务不可用的情况：\"},\"2808\":{\"t\":\"采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。\"},\"2809\":{\"t\":\"限流，避免同时处理大量的请求。\"},\"2810\":{\"t\":\"针对热点缓存失效的情况：\"},\"2811\":{\"t\":\"设置不同的失效时间比如随机设置缓存的失效时间。\"},\"2812\":{\"t\":\"缓存永不失效（不太推荐，实用性太差）。\"},\"2813\":{\"t\":\"设置二级缓存。\"},\"2814\":{\"h\":\"缓存雪崩和缓存击穿有什么区别？\",\"a\":\"缓存雪崩和缓存击穿有什么区别\"},\"2815\":{\"t\":\"缓存雪崩和缓存击穿比较像，但缓存雪崩导致的原因是缓存中的大量或者所有数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。\"},\"2816\":{\"h\":\"redis 6.0 多线程的实现机制：\",\"a\":\"redis-6-0-多线程的实现机制\"},\"2817\":{\"t\":\"https://blog.csdn.net/zhizhengguan/article/details/120627481\"},\"2818\":{\"h\":\"多线程和高并发\"},\"2819\":{\"h\":\"三：多线程与高并发\",\"a\":\"三-多线程与高并发\"},\"2820\":{\"h\":\"线程的互斥同步方式有哪些? 如何比较和选择?\",\"a\":\"线程的互斥同步方式有哪些-如何比较和选择\"},\"2821\":{\"t\":\"Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。\"},\"2822\":{\"t\":\"锁的实现synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。\"},\"2823\":{\"t\":\"性能新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。\"},\"2824\":{\"t\":\"等待可中断当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。\"},\"2825\":{\"t\":\"公平锁公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\"},\"2826\":{\"t\":\"锁绑定多个条件一个 ReentrantLock 可以同时绑定多个 Condition 对象。\"},\"2827\":{\"h\":\"ReentrantLock：\",\"a\":\"reentrantlock\"},\"2828\":{\"t\":\"ReentrantLock 实现了 Lock 接口，是一个可重入且独占式的锁，和 synchronized 关键字类似。不过，ReentrantLock 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。\"},\"2829\":{\"t\":\"public class ReentrantLock implements Lock, java.io.Serializable {} \"},\"2830\":{\"t\":\"ReentrantLock 里面有一个内部类 Sync，Sync 继承 AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在 Sync 中实现的。Sync 有公平锁 FairSync 和非公平锁 NonfairSync 两个子类。\"},\"2831\":{\"t\":\"ReentrantLock 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。\"},\"2832\":{\"t\":\"// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁 public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } \"},\"2833\":{\"t\":\"https://blog.csdn.net/zhengzhaoyang122/article/details/110847701；https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html\"},\"2834\":{\"h\":\"锁升级\",\"a\":\"锁升级\"},\"2835\":{\"t\":\"img\"},\"2836\":{\"h\":\"无锁\",\"a\":\"无锁\"},\"2837\":{\"t\":\"无锁并不会对资源锁定，所有的线程都可以访问并修改同一个资源，但同时只有一个线程能修改成功。也就是我们常说的乐观锁。\"},\"2838\":{\"h\":\"偏向锁\",\"a\":\"偏向锁\"},\"2839\":{\"t\":\"偏向于第一个访问锁的线程，初次执行synchronized代码块时，通过 CAS 修改对象头里的锁标志位，锁对象变成偏向锁。\"},\"2840\":{\"t\":\"当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。\"},\"2841\":{\"t\":\"执行完同步代码块后，线程并不会主动释放偏向锁。当线程第二次再执行同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里不需要重新加锁，偏向锁几乎没有额外开销，性能极高。\"},\"2842\":{\"t\":\"偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。\"},\"2843\":{\"t\":\"偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗。 \"},\"2844\":{\"h\":\"轻量级锁\",\"a\":\"轻量级锁\"},\"2845\":{\"t\":\"当前锁是偏向锁，此时有多个线程同时来竞争锁，偏向锁就会升级为轻量级锁。轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式来获取锁。\"},\"2846\":{\"t\":\"轻量级锁的获取有两种情况：\"},\"2847\":{\"t\":\"当关闭偏向锁功能时 多个线程竞争偏向锁导致偏向锁升级为轻量级锁。一旦有第二个线程加入锁竞争，偏向锁就升级为轻量级锁（自旋锁） \"},\"2848\":{\"t\":\"在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先比较当前锁标志位是否为“释放”，如果是则将其设置为“锁定”，此过程是原子性。如果抢到锁，然后线程将当前锁的持有者信息修改为自己。\"},\"2849\":{\"h\":\"重量级锁\",\"a\":\"重量级锁\"},\"2850\":{\"t\":\"如果线程的竞争很激励，线程的自旋超过了一定次数（默认循环10次，可以通过虚拟机参数更改），将轻量级锁升级为重量级锁（依然是 CAS 修改锁标志位，但不修改持有锁的线程ID），当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。\"},\"2851\":{\"t\":\"重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资。\"},\"2852\":{\"h\":\"锁优化技术（锁粗化、锁消除）：\",\"a\":\"锁优化技术-锁粗化、锁消除\"},\"2853\":{\"t\":\"锁粗化就是告诉我们任何事情都有个度，有些情况下我们反而希望把很多次锁的请求合并成一个请求，以降低短时间内大量锁请求、同步、释放带来的性能损耗。\"},\"2854\":{\"t\":\"锁消除指的是在某些情况下，JVM 虚拟机如果检测不到某段代码被共享和竞争的可能性，就会将这段代码所属的同步锁消除掉，从而到底提高程序性能的目的。\"},\"2855\":{\"h\":\"CAS\",\"a\":\"cas\"},\"2856\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&mid=2247510278&idx=3&sn=a58a9ec9f805d0e109c4b09cd497c9ca&chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1&scene=27\"},\"2857\":{\"t\":\"在并发编程中我们都知道i++操作是非线程安全的，这是因为 i++操作不是原子操作。\"},\"2858\":{\"t\":\"如何保证原子性呢？常用的方法就是加锁。在Java语言中可以使用 Synchronized和CAS实现加锁效果。\"},\"2859\":{\"t\":\"Synchronized是悲观锁，线程开始执行第一步就是获取锁，一旦获得锁，其他的线程进入后就会阻塞等待锁。如果不好理解，举个生活中的例子：一个人进入厕所后首先把门锁上（获取锁），然后开始上厕所，这个时候有其他人来了只能在外面等（阻塞），就算再急也没用。上完厕所完事后把门打开（解锁），其他人就可以进入了。\"},\"2860\":{\"t\":\"CAS是乐观锁，线程执行的时候不会加锁，假设没有冲突去完成某项操作，如果因为冲突失败了就重试，最后直到成功为止。\"},\"2861\":{\"h\":\"什么是 CAS？\",\"a\":\"什么是-cas\"},\"2862\":{\"t\":\"CAS（Compare-And-Swap）是比较并交换的意思，它是一条 CPU 并发原语，用于判断内存中某个值是否为预期值，如果是则更改为新的值，这个过程是原子的。下面用一个小示例解释一下。\"},\"2863\":{\"t\":\"CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，计算后要修改后的新值B。\"},\"2864\":{\"t\":\"（1）初始状态：在内存地址V中存储着变量值为 1。\"},\"2865\":{\"t\":\"图片\"},\"2866\":{\"t\":\"（2）线程1想要把内存地址为 V 的变量值增加1。这个时候对线程1来说，旧的预期值A=1，要修改的新值B=2。\"},\"2867\":{\"t\":\"图片\"},\"2868\":{\"t\":\"（3）在线程1要提交更新之前，线程2捷足先登了，已经把内存地址V中的变量值率先更新成了2。\"},\"2869\":{\"t\":\"图片\"},\"2870\":{\"t\":\"（4）线程1开始提交更新，首先将预期值A和内存地址V的实际值比较（Compare），发现A不等于V的实际值，提交失败。\"},\"2871\":{\"t\":\"图片\"},\"2872\":{\"t\":\"（5）线程1重新获取内存地址 V 的当前值，并重新计算想要修改的新值。此时对线程1来说，A=2，B=3。这个重新尝试的过程被称为自旋。如果多次失败会有多次自旋。\"},\"2873\":{\"t\":\"图片\"},\"2874\":{\"t\":\"（6）线程 1 再次提交更新，这一次没有其他线程改变地址 V 的值。线程1进行Compare，发现预期值 A 和内存地址 V的实际值是相等的，进行 Swap 操作，将内存地址 V 的实际值修改为 B。\"},\"2875\":{\"t\":\"图片\"},\"2876\":{\"t\":\"总结：更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 中的实际值相同时，才会将内存地址 V 对应的值修改为 B，这整个操作就是CAS。\"},\"2877\":{\"h\":\"CAS 基本原理\",\"a\":\"cas-基本原理\"},\"2878\":{\"t\":\"CAS 主要包括两个操作：Compare和Swap，有人可能要问了：两个操作能保证是原子性吗？可以的。\"},\"2879\":{\"t\":\"CAS 是一种系统原语，原语属于操作系统用语，原语由若干指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，由操作系统硬件来保证。在 Intel 的 CPU 中，使用 cmpxchg 指令。\"},\"2880\":{\"t\":\"回到 Java 语言，JDK 是在 1.5 版本后才引入 CAS 操作，在sun.misc.Unsafe这个类中定义了 CAS 相关的方法。\"},\"2881\":{\"t\":\"在 Java 编程中我们通常不会直接使用到 CAS，都是通过 JDK 封装好的并发工具类来间接使用的，这些并发工具类都在java.util.concurrent包中。\"},\"2882\":{\"h\":\"CAS 的问题\",\"a\":\"cas-的问题\"},\"2883\":{\"t\":\"CAS 不是万能的，也有很多问题。\"},\"2884\":{\"t\":\"敲黑板：CAS有哪些问题，这是面试高频考点，需要重点掌握。\"},\"2885\":{\"h\":\"典型 ABA 问题\",\"a\":\"典型-aba-问题\"},\"2886\":{\"t\":\"ABA 是 CAS 操作的一个经典问题，假设有一个变量初始值为 A，修改为 B，然后又修改为 A，这个变量实际被修改过了，但是 CAS 操作可能无法感知到。\"},\"2887\":{\"t\":\"如果是整型还好，不会影响最终结果，但如果是对象的引用类型包含了多个变量，引用没有变实际上包含的变量已经被修改，这就会造成大问题。\"},\"2888\":{\"t\":\"如何解决？思路其实很简单，在变量前加版本号，每次变量更新了就把版本号加一，结果如下：\"},\"2889\":{\"t\":\"图片\"},\"2890\":{\"t\":\"最终结果都是 A 但是版本号改变了。\"},\"2891\":{\"t\":\"从 JDK 1.5 开始提供了AtomicStampedReference类，这个类的 compareAndSe方法首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\"},\"2892\":{\"h\":\"自旋开销问题\",\"a\":\"自旋开销问题\"},\"2893\":{\"t\":\"CAS 出现冲突后就会开始自旋操作，如果资源竞争非常激烈，自旋长时间不能成功就会给 CPU 带来非常大的开销。\"},\"2894\":{\"t\":\"解决方案：可以考虑限制自旋的次数，避免过度消耗 CPU；另外还可以考虑延迟执行。\"},\"2895\":{\"h\":\"只能保证单个变量的原子性\",\"a\":\"只能保证单个变量的原子性\"},\"2896\":{\"t\":\"当对一个共享变量执行操作时，可以使用 CAS 来保证原子性，但是如果要对多个共享变量进行操作时，CAS 是无法保证原子性的，比如需要将 i 和 j 同时加 1：\"},\"2897\":{\"t\":\"i++；j++； \"},\"2898\":{\"t\":\"这个时候可以使用 synchronized 进行加锁，有没有其他办法呢？有，将多个变量操作合成一个变量操作。从 JDK1.5 开始提供了AtomicReference 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\"},\"2899\":{\"h\":\"总结\",\"a\":\"总结\"},\"2900\":{\"t\":\"CAS 是 Compare And Swap，是一条 CPU 原语，由操作系统保证原子性。\"},\"2901\":{\"t\":\"Java语言从 JDK1.5 版本开始引入 CAS ， 并且是 Java 并发编程J.U.C 包的基石，应用非常广泛。\"},\"2902\":{\"t\":\"当然 CAS 也不是万能的，也有很多问题：典型 ABA 问题、自旋开销问题、只能保证单个变量的原子性。\"},\"2903\":{\"h\":\"AQS\",\"a\":\"aqs\"},\"2904\":{\"t\":\"https://zhuanlan.zhihu.com/p/543902719\"},\"2905\":{\"h\":\"什么是AQS\",\"a\":\"什么是aqs\"},\"2906\":{\"t\":\"AQS（AbstractQueuedSynchronizer），即队列同步器，它是构建锁或者其他同步组件的基础框架，如ReentrantLock、ReentrantReadWriteLock、Semaphore，CountDownLatch等。 AQS是一个抽象类，主要是通过继承方式使用，本身没有实现任何接口，仅仅是定义了同步状态的获取和释放的方法。AQS解决了了之类实现同步器的大量细节问题，例如获取同步状态，FIFO队列，入队和出队。自定义同步器在实现时候只需要实现共享资源state的获取和释放即可，至于获取资源失败入队/唤醒出队等，AQS在顶层已经定义好了。\"},\"2907\":{\"h\":\"AQS的两种功能\",\"a\":\"aqs的两种功能\"},\"2908\":{\"t\":\"从使用层面来说，AQS功能分为两种：独占和共享\"},\"2909\":{\"t\":\"独占锁，每次只能一个线程持有锁，比如ReentrantLock就是独占锁\"},\"2910\":{\"t\":\"共享锁，允许多个线程持有锁，并发访问共享资源，比如ReentrantReadWriteLock\"},\"2911\":{\"t\":\"共享锁和独占锁的释放有一定区别，前面部分是一致的，先判断头结点是不是signal状态，如果是则唤醒头节点的下一个节点，并将该节点设置为头结点。而共享锁不一样，某个节点被设置为head之后，如果它的后继节点是shared状态，那么会尝试使用doReleaseShared方法尝试唤醒节点，实现共享状态的传播。\"},\"2912\":{\"h\":\"AQS内部实现\",\"a\":\"aqs内部实现\"},\"2913\":{\"t\":\"AQS是依赖内部的同步队列实现，也就是FIFO双向队列，如果当前线程竞争锁失败，那么AQS会把当前线程以及等待状态封装成一个Node节点加入到同步队列中，同时阻塞该线程，当同步状态释放时，会把首节点唤醒，使其再次尝试获取同步状态。\"},\"2914\":{\"t\":\"AQS队列内部维护的是一个双向链表，这种结构每个数据都有两个指针，分别指向直接的的前驱节点和后继节点，当线程抢占锁失败时候，会封装成Node加入到AQS中去。\"},\"2915\":{\"t\":\"AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁 实现的，即将暂时获取不到锁的线程加入到队列中。\"},\"2916\":{\"t\":\"CLH(Craig,Landin,and Hagersten) 队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。在 CLH 同步队列中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。\"},\"2917\":{\"t\":\"CLH 队列结构如下图所示：\"},\"2918\":{\"t\":\"img\"},\"2919\":{\"t\":\"在同步队列中，一个节点表示一个线程，他保存这线程的引用ThreadId，状态（watiStatus）,前驱结点（pre），后继节点（next），其数据结构如下：\"},\"2920\":{\"t\":\"img\"},\"2921\":{\"h\":\"acquire方法流程总结\",\"a\":\"acquire方法流程总结\"},\"2922\":{\"t\":\"首先通过子类判断是否获取了锁，如果获取了就什么也不干。tryAcquire\"},\"2923\":{\"t\":\"如果没有获取锁、通过线程创建节点加入同步队列的队尾。addWaiter\"},\"2924\":{\"t\":\"当线程在同步队列中不断的通过自旋去获取同步状态，如果获取了锁，就把其设为同步队列中的头节点，否则在同步队列中不停的自旋等待获取同步状态 acquireQueued,shouldParkAfterFailedAcquire(Node pre,Node node),parkAndCheckInterrupt()\"},\"2925\":{\"t\":\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\"},\"2926\":{\"h\":\"AQS 底层使用了模板方法模式，你能说出几个需要重写的方法吗？\",\"a\":\"aqs-底层使用了模板方法模式-你能说出几个需要重写的方法吗\"},\"2927\":{\"t\":\"使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。\"},\"2928\":{\"t\":\"isHeldExclusively() ：该线程是否正在独占资源。只有用到 condition 才需要去实现它。\"},\"2929\":{\"t\":\"tryAcquire(int) ：独占方式。尝试获取资源，成功则返回 true，失败则返回 false。\"},\"2930\":{\"t\":\"tryRelease(int) ：独占方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"2931\":{\"t\":\"tryAcquireShared(int) ：共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\"},\"2932\":{\"t\":\"tryReleaseShared(int) ：共享方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"2933\":{\"h\":\"总结\",\"a\":\"总结-1\"},\"2934\":{\"t\":\"总结的来说：线程获取锁，如果获取了锁就 保存当前获得锁的线程，如果没获取就创造一个节点通过compareAndSetTail(CAS操作)操作的方式将创建的节点加入同步队列的尾部，在同步队列中的节点通过自旋的操作不断去获取同步状态【当然由于FIFO先进先出的特性】等待时间越长就越先被唤醒。当头节点释放同步状态的时候，首先查看是否存在后继节点，如果存在就唤醒自己的后继节点，如果不存在就获取等待时间最长的符合条件的线程。\"},\"2935\":{\"h\":\"volitile关键字原理\",\"a\":\"volitile关键字原理\"},\"2936\":{\"h\":\"简述Java内存模型：\",\"a\":\"简述java内存模型\"},\"2937\":{\"t\":\"Java内存模型分为主内存和线程工作内存两大类。\"},\"2938\":{\"t\":\"主内存： **多个线程共享的内存。**如下图所示，方法区和堆属于主内存区域。\"},\"2939\":{\"t\":\"线程工作内存：每个线程独享的内存。如下图所示，虚拟机栈、本地方法栈、程序计数器属于线程独享的工作内存。\"},\"2940\":{\"t\":\"图片\"},\"2941\":{\"t\":\"Java内存模型规定：所有变量都需要存储在主内存中，线程工作内存保存了变量在主内存中的副本，线程对变量的所有操作都在工作内存中进行，执行结束后在同步到主内存中去。这里必然会存在时间差，在这个时间差内，该线程对副本的操作，对于其他线程是不见的，从而造成了可见性问题。\"},\"2942\":{\"h\":\"volatile的作用：\",\"a\":\"volatile的作用\"},\"2943\":{\"t\":\"保证共享变量的可见性： 使用volatile修饰的变量，任何线程对其进行操作都是在主内存中进行的，不会产生副本，从而保证共享变量的可见性。\"},\"2944\":{\"t\":\"防止局部指令重排序： happens-before规则中的volatile变量规则规定了一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。\"},\"2945\":{\"h\":\"volatile如何防止指令重排序：\",\"a\":\"volatile如何防止指令重排序\"},\"2946\":{\"t\":\"volatile是通过内存屏障来防止指令重排序的。\"},\"2947\":{\"t\":\"硬件层面的内存屏障分为Load Barrier 和 Store Barrier即读屏障和写屏障。\"},\"2948\":{\"t\":\"对于Load Barrier来说，在指令前插入Load Barrier，可以让高速缓存中的数据失效，强制从新从主内存加载数据。\"},\"2949\":{\"t\":\"对于Store Barrier来说，在指令后插入Store Barrier，能让写入缓存中的最新数据更新写入主内存，让其他线程可见。\"},\"2950\":{\"t\":\"Java内存屏障类型把上述两种内存屏障两两组合，如下图所示：\"},\"2951\":{\"t\":\"图片\"},\"2952\":{\"t\":\"volatile防止指令重排序具体步骤：\"},\"2953\":{\"t\":\"在每个volatile写操作的前面插入一个StoreStore屏障。\"},\"2954\":{\"t\":\"在每个volatile写操作的后面插入一个StoreLoad屏障。\"},\"2955\":{\"t\":\"在每个volatile读操作的后面插入一个LoadLoad屏障。\"},\"2956\":{\"t\":\"在每个volatile读操作的后面插入一个LoadStore屏障。\"},\"2957\":{\"t\":\"图片\"},\"2958\":{\"t\":\"图片\"},\"2959\":{\"h\":\"volatile总结：\",\"a\":\"volatile总结\"},\"2960\":{\"t\":\"volatile解决的是多线程共享变量可见性问题，但是被volatile修饰的变量操作并非具有原子性。\"},\"2961\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=MzAxNTE2NjEyMw==&mid=2247483734&idx=1&sn=8509d4aa61d08550c2b7668314da3582&chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e&scene=27\"},\"2962\":{\"h\":\"锁的分类实现\",\"a\":\"锁的分类实现\"},\"2963\":{\"h\":\"悲观锁：\",\"a\":\"悲观锁\"},\"2964\":{\"t\":\"正如其名，它是指对数据修改时持保守态度，认为其他人也会修改数据。因此在操作数据时，会把数据锁住，直到操作完成。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是长事务而言，这样的开销往往无法承受。\"},\"2965\":{\"h\":\"乐观锁：\",\"a\":\"乐观锁\"},\"2966\":{\"t\":\"乐观锁，从字面意思也能猜到个大概，在操作数据时非常乐观，认为别人不会同时修改数据，因此乐观锁不会上锁 只是在 提交更新 时，才会正式对数据的冲突与否进行检测。如果发现冲突了，则返回错误信息，让用户决定如何去做，fail-fast 机制 。否则，执行本次操作。\"},\"2967\":{\"h\":\"可重入锁：\",\"a\":\"可重入锁\"},\"2968\":{\"t\":\"可重入锁，也叫做递归锁，是指在同一个线程在调外层方法获取锁的时候，再进入内层方法会自动获取锁。\"},\"2969\":{\"t\":\"对象锁或类锁内部有计数器，一个线程每获得一次锁，计数器 +1；解锁时，计数器 -1。\"},\"2970\":{\"t\":\"JAVA 中的 ReentrantLock 和 synchronized 都是 可重入锁。可重入锁的一个好处是可一定程度避免死锁。\"},\"2971\":{\"h\":\"自旋锁：\",\"a\":\"自旋锁\"},\"2972\":{\"t\":\"自旋锁是采用让当前线程不停地在循环体内执行，当循环的条件被其他线程改变时才能进入临界区。自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不断增加时，性能下降明显，因为每个线程都需要执行，会占用CPU时间片。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\"},\"2973\":{\"t\":\"自旋锁缺点：\"},\"2974\":{\"t\":\"可能引发死锁 可能占用 CPU 的时间过长 \"},\"2975\":{\"t\":\"我们可以设置一个 循环时间 或 循环次数，超出阈值时，让线程进入阻塞状态，防止线程长时间占用 CPU 资源。JUC 并发包中的 CAS 就是采用自旋锁，compareAndSet 是CAS操作的核心，底层利用Unsafe对象实现的。\"},\"2976\":{\"h\":\"独享锁：\",\"a\":\"独享锁\"},\"2977\":{\"t\":\"独享锁，也有人叫它排他锁。无论读操作还是写操作，只能有一个线程获得锁，其他线程处于阻塞状态。\"},\"2978\":{\"t\":\"缺点：读操作并不会修改数据，而且大部分的系统都是 读多写少，如果读读之间互斥，大大降低系统的性能。下面的 共享锁 会解决这个问题。\"},\"2979\":{\"t\":\"像JAVA 中的 ReentrantLock 和 synchronized 都是独享锁。\"},\"2980\":{\"h\":\"共享锁：\",\"a\":\"共享锁\"},\"2981\":{\"t\":\"共享锁是指允许多个线程同时持有锁，一般用在读锁上。读锁的共享锁可保证并发读是非常高效的。读写，写读 ，写写的则是互斥的。独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享\"},\"2982\":{\"t\":\"ReentrantReadWriteLock，其读锁是共享锁，其写锁是独享锁。\"},\"2983\":{\"h\":\"读锁/写锁：\",\"a\":\"读锁-写锁\"},\"2984\":{\"t\":\"如果对某个资源是读操作，那多个线程之间并不会相互影响，可以通过添加读锁实现共享。如果有修改动作，为了保证数据的并发安全，此时只能有一个线程获得锁，我们称之为 写锁。读读是共享的；而 读写、写读 、写写 则是互斥的\"},\"2985\":{\"t\":\"像 JAVA 中的 ReentrantReadWriteLock 就是一种 读写锁 \"},\"2986\":{\"h\":\"公平锁/非公平锁：\",\"a\":\"公平锁-非公平锁\"},\"2987\":{\"t\":\"公平锁：多个线程按照申请锁的顺序去获得锁，所有线程都在队列里排队，先来先获取的公平性原则。\"},\"2988\":{\"t\":\"优点：所有的线程都能得到资源，不会饿死在队列中。\"},\"2989\":{\"t\":\"缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，CPU 唤醒下一个阻塞线程有系统开销\"},\"2990\":{\"t\":\"**非公平锁：**多个线程不按照申请锁的顺序去获得锁，而是同时以插队方式直接尝试获取锁，获取不到（插队失败），会进入队列等待（失败则乖乖排队），如果能获取到（插队成功），就直接获取到锁。\"},\"2991\":{\"t\":\"**优点：**可以减少 CPU 唤醒线程的开销，整体的吞吐效率会高点\"},\"2992\":{\"t\":\"**缺点：**可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁，活活饿死。\"},\"2993\":{\"t\":\"Java 多线程并发操作，我们操作锁大多时候都是基于 Sync 本身去实现的，而 Sync 本身却是 ReentrantLock 的一个内部类，Sync 继承 AbstractQueuedSynchronizer\"},\"2994\":{\"t\":\"像 ReentrantLock 默认是非公平锁，我们可以在构造函数中传入 true，来创建公平锁。\"},\"2995\":{\"t\":\"参考：https://blog.csdn.net/weixin_70730532/article/details/126875303\"},\"2996\":{\"h\":\"synchronized原理\",\"a\":\"synchronized原理\"},\"2997\":{\"h\":\"synchronized 同步语句块的情况:\",\"a\":\"synchronized-同步语句块的情况\"},\"2998\":{\"t\":\"public class SynchronizedDemo { public void method() { synchronized (this) { System.out.println(\\\"synchronized 代码块\\\"); } } } \"},\"2999\":{\"t\":\"通过 JDK 自带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：首先切换到类的对应目录执行 javac SynchronizedDemo.java 命令生成编译后的 .class 文件，然后执行javap -c -s -v -l SynchronizedDemo.class。\"},\"3000\":{\"t\":\"synchronized关键字原理\"},\"3001\":{\"t\":\"从上面我们可以看出：synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"3002\":{\"t\":\"上面的字节码中包含一个 monitorenter 指令以及两个 monitorexit 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。\"},\"3003\":{\"t\":\"当执行 monitorenter 指令时，线程试图获取锁也就是获取 对象监视器 monitor 的持有权。\"},\"3004\":{\"t\":\"在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由ObjectMonitor实现的。每个对象中都内置了一个 ObjectMonitor对象。\"},\"3005\":{\"t\":\"另外，wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。\"},\"3006\":{\"t\":\"在执行monitorenter时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。\"},\"3007\":{\"t\":\"对象锁的的拥有者线程才可以执行 monitorexit 指令来释放锁。在执行 monitorexit 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\"},\"3008\":{\"h\":\"synchronized 修饰方法的的情况:\",\"a\":\"synchronized-修饰方法的的情况\"},\"3009\":{\"t\":\"public class SynchronizedDemo2 { public synchronized void method() { System.out.println(\\\"synchronized 方法\\\"); } } \"},\"3010\":{\"t\":\"synchronized关键字原理\"},\"3011\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\"},\"3012\":{\"t\":\"如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。\"},\"3013\":{\"h\":\"总结:\",\"a\":\"总结-2\"},\"3014\":{\"t\":\"synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"3015\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。\"},\"3016\":{\"t\":\"不过两者的本质都是对对象监视器 monitor 的获取。\"},\"3017\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-底层原理了解吗\"},\"3018\":{\"h\":\"ThreadLocal原理\",\"a\":\"threadlocal原理\"},\"3019\":{\"h\":\"ThreadLocal 有什么用？\",\"a\":\"threadlocal-有什么用\"},\"3020\":{\"t\":\"通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？\"},\"3021\":{\"t\":\"JDK 中自带的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。\"},\"3022\":{\"t\":\"如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get() 和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\"},\"3023\":{\"h\":\"原理：\",\"a\":\"原理\"},\"3024\":{\"t\":\"源码：\"},\"3025\":{\"t\":\"public class Thread implements Runnable { //...... //与此线程有关的ThreadLocal值。由ThreadLocal类维护 ThreadLocal.ThreadLocalMap threadLocals = null; //与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护 ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; //...... } \"},\"3026\":{\"t\":\"从上面Thread类 源代码可以看出Thread 类中有一个 threadLocals 和 一个 inheritableThreadLocals 变量，它们都是 ThreadLocalMap 类型的变量,我们可以把 ThreadLocalMap 理解为ThreadLocal 类实现的定制化的 HashMap。默认情况下这两个变量都是 null，只有当前线程调用 ThreadLocal 类的 set或get方法时才创建它们，实际上调用这两个方法的时候，我们调用的是ThreadLocalMap类对应的 get()、set()方法。\"},\"3027\":{\"t\":\"ThreadLocal类的set()方法：\"},\"3028\":{\"t\":\"public void set(T value) { //获取当前请求的线程 Thread t = Thread.currentThread(); //取出 Thread 类内部的 threadLocals 变量(哈希表结构) ThreadLocalMap map = getMap(t); if (map != null) // 将需要存储的值放入到这个哈希表中 map.set(this, value); else createMap(t, value); } ThreadLocalMap getMap(Thread t) { return t.threadLocals; } \"},\"3029\":{\"t\":\"通过上面这些内容，我们足以通过猜测得出结论：最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。ThrealLocal 类中可以通过Thread.currentThread()获取到当前线程对象后，直接通过getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。\"},\"3030\":{\"t\":\"每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为 key ，Object 对象为 value 的键值对。\"},\"3031\":{\"t\":\"ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) { //...... } \"},\"3032\":{\"t\":\"比如我们在同一个线程中声明了两个 ThreadLocal 对象的话， Thread内部都是使用仅有的那个ThreadLocalMap 存放数据的，ThreadLocalMap的 key 就是 ThreadLocal对象，value 就是 ThreadLocal 对象调用set方法设置的值。\"},\"3033\":{\"h\":\"线程池\",\"a\":\"线程池\"},\"3034\":{\"h\":\"为什么要用线程池？\",\"a\":\"为什么要用线程池\"},\"3035\":{\"t\":\"这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：\"},\"3036\":{\"t\":\"降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\"},\"3037\":{\"t\":\"提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。\"},\"3038\":{\"t\":\"提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\"},\"3039\":{\"h\":\"如何创建线程池？\",\"a\":\"如何创建线程池\"},\"3040\":{\"t\":\"方式一：通过ThreadPoolExecutor构造函数来创建（推荐）。\"},\"3041\":{\"t\":\"package com.young.多线程; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.Executors; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * @author 杨路恒 */ public class ThreadPool { public static void main(String[] args) { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1,2, 2, TimeUnit.MILLISECONDS,new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(), // new ThreadPoolExecutor.AbortPolicy() // new ThreadPoolExecutor.CallerRunsPolicy() // new ThreadPoolExecutor.DiscardOldestPolicy() new ThreadPoolExecutor.DiscardPolicy() ); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.shutdown(); } } \"},\"3042\":{\"t\":\"参数：\"},\"3043\":{\"t\":\"/** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @param threadFactory the factory to use when the executor * creates a new thread * @param handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached * @throws IllegalArgumentException if one of the following holds:<br> * {@code corePoolSize < 0}<br> * {@code keepAliveTime < 0}<br> * {@code maximumPoolSize <= 0}<br> * {@code maximumPoolSize < corePoolSize} * @throws NullPointerException if {@code workQueue} * or {@code threadFactory} or {@code handler} is null */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; } \"},\"3044\":{\"t\":\"ThreadPoolExecutor 3 个最重要的参数：\"},\"3045\":{\"t\":\"corePoolSize : 任务队列未达到队列容量时，最大可以同时运行的线程数量。\"},\"3046\":{\"t\":\"maximumPoolSize : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\"},\"3047\":{\"t\":\"workQueue: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"3048\":{\"t\":\"ThreadPoolExecutor其他常见参数 :\"},\"3049\":{\"t\":\"keepAliveTime:线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；\"},\"3050\":{\"t\":\"unit : keepAliveTime 参数的时间单位。\"},\"3051\":{\"t\":\"threadFactory :executor 创建新线程的时候会用到。\"},\"3052\":{\"t\":\"handler :饱和策略。关于饱和策略下面单独介绍一下。\"},\"3053\":{\"t\":\"下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）：\"},\"3054\":{\"t\":\"线程池各个参数的关系\"},\"3055\":{\"t\":\"线程池的饱和策略有哪些？\"},\"3056\":{\"t\":\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，ThreadPoolTaskExecutor 定义一些策略:\"},\"3057\":{\"t\":\"ThreadPoolExecutor.AbortPolicy： 抛出 RejectedExecutionException来拒绝新任务的处理。\"},\"3058\":{\"t\":\"ThreadPoolExecutor.CallerRunsPolicy： 调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。\"},\"3059\":{\"t\":\"ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。\"},\"3060\":{\"t\":\"ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。\"},\"3061\":{\"t\":\"举个例子：Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略来配置线程池的时候，默认使用的是 AbortPolicy。在这种饱和策略下，如果队列满了，ThreadPoolExecutor 将抛出 RejectedExecutionException 异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。如果不想丢弃任务的话，可以使用CallerRunsPolicy。CallerRunsPolicy 和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务\"},\"3062\":{\"t\":\"线程池常用的阻塞队列有哪些？\"},\"3063\":{\"t\":\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"3064\":{\"t\":\"不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。\"},\"3065\":{\"t\":\"容量为 Integer.MAX_VALUE 的 LinkedBlockingQueue（无界队列）：FixedThreadPool 和 SingleThreadExector 。由于队列永远不会被放满，因此FixedThreadPool最多只能创建核心线程数的线程。\"},\"3066\":{\"t\":\"SynchronousQueue（同步队列） ：CachedThreadPool 。SynchronousQueue 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，CachedThreadPool 的最大线程数是 Integer.MAX_VALUE ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。\"},\"3067\":{\"t\":\"DelayedWorkQueue（延迟阻塞队列）：ScheduledThreadPool 和 SingleThreadScheduledExecutor 。DelayedWorkQueue 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。DelayedWorkQueue 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 Integer.MAX_VALUE，所以最多只能创建核心线程数的线程。\"},\"3068\":{\"t\":\"线程池处理任务的流程了解吗？\"},\"3069\":{\"t\":\"如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。\"},\"3070\":{\"t\":\"如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。\"},\"3071\":{\"t\":\"如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。\"},\"3072\":{\"t\":\"如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用RejectedExecutionHandler.rejectedExecution()方法。\"},\"3073\":{\"t\":\"图解线程池实现原理\"},\"3074\":{\"t\":\"如何设定线程池的大小？\"},\"3075\":{\"t\":\"有一个简单并且适用面比较广的公式：\"},\"3076\":{\"t\":\"CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\"},\"3077\":{\"t\":\"I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\"},\"3078\":{\"t\":\"方式二：通过 Executor 框架的工具类 Executors 来创建。\"},\"3079\":{\"t\":\"我们可以创建多种类型的 ThreadPoolExecutor：\"},\"3080\":{\"t\":\"FixedThreadPool ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\"},\"3081\":{\"t\":\"SingleThreadExecutor： 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\"},\"3082\":{\"t\":\"CachedThreadPool： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。\"},\"3083\":{\"t\":\"ScheduledThreadPool ：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。\"},\"3084\":{\"h\":\"为什么不推荐使用内置线程池？\",\"a\":\"为什么不推荐使用内置线程池\"},\"3085\":{\"t\":\"在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\"},\"3086\":{\"t\":\"为什么呢？\"},\"3087\":{\"t\":\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\"},\"3088\":{\"t\":\"另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险\"},\"3089\":{\"t\":\"Executors 返回线程池对象的弊端如下(后文会详细介绍到)：\"},\"3090\":{\"t\":\"FixedThreadPool 和 SingleThreadExecutor ： 使用的是无界的 LinkedBlockingQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"3091\":{\"t\":\"CachedThreadPool ：使用的是同步队列 SynchronousQueue, 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。\"},\"3092\":{\"t\":\"ScheduledThreadPool 和 SingleThreadScheduledExecutor : 使用的无界的延迟阻塞队列DelayedWorkQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"3093\":{\"h\":\"如何动态修改线程池的参数？\",\"a\":\"如何动态修改线程池的参数\"},\"3094\":{\"t\":\"JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：\"},\"3095\":{\"t\":\"图片\"},\"3096\":{\"t\":\"重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。\"},\"3097\":{\"t\":\"问题一：线程池被创建后里面有线程吗？如果没有的话，你知道有什么方法对线程池进行预热吗？\"},\"3098\":{\"t\":\"线程池被创建后如果没有任务过来，里面是不会有线程的。如果需要预热的话可以调用下面的两个方法：\"},\"3099\":{\"t\":\"全部启动：\"},\"3100\":{\"t\":\"图片\"},\"3101\":{\"t\":\"仅启动一个：\"},\"3102\":{\"t\":\"图片\"},\"3103\":{\"t\":\"问题二：核心线程数会被回收吗？需要什么设置？\"},\"3104\":{\"t\":\"核心线程数默认是不会被回收的，如果需要回收核心线程数，需要调用下面的方法：\"},\"3105\":{\"t\":\"图片\"},\"3106\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html；https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651751537&idx=1&sn=c50a434302cc06797828782970da190e&chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c&scene=21#wechat_redirect\"},\"3107\":{\"h\":\"面试\"},\"3108\":{\"h\":\"实习\",\"a\":\"实习\"},\"3109\":{\"h\":\"一、中科全安\",\"a\":\"一、中科全安\"},\"3110\":{\"h\":\"一面：HR面，态度算好的（5分钟）\",\"a\":\"一面-hr面-态度算好的-5分钟\"},\"3111\":{\"t\":\"1.介绍公司\"},\"3112\":{\"t\":\"2.问啥时候能来实习\"},\"3113\":{\"t\":\"3.问你能接受加班吗\"},\"3114\":{\"t\":\"4.问你的期望薪资多少\"},\"3115\":{\"t\":\"5.问我想听听你对加班什么看法\"},\"3116\":{\"t\":\"6.最后让明天面试，我说不行，能最晚啥时候，她说最晚周五下午，电话面试\"},\"3117\":{\"h\":\"二面：面试官狗叫（15分钟 ）\",\"a\":\"二面-面试官狗叫-15分钟\"},\"3118\":{\"t\":\"面试官的态度极其恶心，什么垃圾玩意，老子是来面试的，不是听狗叫的，就算老子啥都不会也不去你这个垃圾公司。\"},\"3119\":{\"t\":\"1.自我介绍，直接打断说只介绍自己会的，项目中的技术栈\"},\"3120\":{\"t\":\"2.问我熟悉哪些框架，我说Spring、Mysql，其他都是了解，熟悉的是Java基础和Mysql，他就非得问SpringBoot，离谱\"},\"3121\":{\"t\":\"3.问Kafka的分区、主题了解吗，我就是了解，然后他也说了你只是了解\"},\"3122\":{\"t\":\"4.问ES了解吗（我只是了解他是干啥的，其它都是API）\"},\"3123\":{\"t\":\"5.问SpringBoot异常怎么处理（这个紧张忘了，只是说在一个包里要继承一个异常的接口）\"},\"3124\":{\"t\":\"6.问SpringBoot的核心配置文件以及它们的区别\"},\"3125\":{\"t\":\"7.问SpringBoot的起步依赖starter有哪些以及作用（他说你了解的很少，我都说了了解Mysql、Spring，你他妈的非得问）\"},\"3126\":{\"t\":\"8.问SpringBoot 中的监视器是什么（我说不了解）\"},\"3127\":{\"t\":\"9.问Swagger用过么、它用来做什么\"},\"3128\":{\"t\":\"10.问什么是 WebSockets（我说只了解它是用来作为即时通讯的协议）\"},\"3129\":{\"t\":\"11.问什么是 FreeMarker 模板（这个离谱，说完他是干啥的以及插值表达式，他问还有呢？他妈的）\"},\"3130\":{\"t\":\"12.问C/S 、B/S模式\"},\"3131\":{\"t\":\"13.问String、StringBuilder、StringBuffer 的区别\"},\"3132\":{\"t\":\"14.问了MySQL的存储引擎\"},\"3133\":{\"t\":\"15.问了 InnoDB 和 MyISAM 的比较\"},\"3134\":{\"t\":\"16.问了建立索引的原则\"},\"3135\":{\"t\":\"17.问了三大范式\"},\"3136\":{\"t\":\"18.问了Jdbc的防止sql注入（我说不了解）\"},\"3137\":{\"t\":\"19.反问（我说实习生的日常工作安排是什么，他妈的开始狗叫，想打他）\"},\"3138\":{\"t\":\"20.最后问我啥时能来实习（老子不去）\"},\"3139\":{\"h\":\"二、联想\",\"a\":\"二、联想\"},\"3140\":{\"h\":\"一面：（16分钟）\",\"a\":\"一面-16分钟\"},\"3141\":{\"t\":\"1.说一下红黑树（吧啦吧啦，讲了下红黑树的特性、又扯到HashMap底层用到了红黑树、突然说到MySQLB+树用到了红黑树）\"},\"3142\":{\"t\":\"2.讲一下线程池（这个熟，线程池的7大参数以及具体用法）\"},\"3143\":{\"t\":\"3.讲一下为什么用线程池（两点原因）\"},\"3144\":{\"t\":\"4.讲一下线程池参数MaxSize满了你会怎么做（我说实现自定义处理策略，可以选择移除等待队列中的最不常用的线程）\"},\"3145\":{\"t\":\"5.看我熟悉Python（这里没听清发音，重复确认了好几遍哈哈哈哈哈哈哈），问我生成器用过没（我说是生成随机数吗，面试官说不是，是，还耐心给我解答了是用来循环遍历的）\"},\"3146\":{\"t\":\"5.项目拷打环节\"},\"3147\":{\"t\":\"1）讲一下你的项目经验（从项目的整体架构到具体功能实现细节都说了）\"},\"3148\":{\"t\":\"2）我说了做的一些优化（存储到阿里云OSS）\"},\"3149\":{\"t\":\"3）突然电话断了，在那我俩喂喂喂了好几声，面试官又给我打了过来，问我同步和异步怎么实现的（加@Async注解）\"},\"3150\":{\"t\":\"4）问异步调用后，做了些什么（第三方接口审核完后传来一个statusCode200，表示审核成功存储到数据库）\"},\"3151\":{\"t\":\"6.反问环节\"},\"3152\":{\"t\":\"1）实习生的日常工作安排（面试官说了早上9：30上班，下午6：30下班，八小时工作制，中午休息一小时）\"},\"3153\":{\"t\":\"2）技术栈是什么（面试官说这有Java和Python，你来就是Java）\"},\"3154\":{\"h\":\"三、中国邮政储蓄银行\",\"a\":\"三、中国邮政储蓄银行\"},\"3155\":{\"h\":\"一面：结构化面试+技术面（20分钟，五个面试官）\",\"a\":\"一面-结构化面试-技术面-20分钟-五个面试官\"},\"3156\":{\"t\":\"1.先做一个两分钟以内的自我介绍（对邮储的看法，对未来工作的看法）\"},\"3157\":{\"t\":\"2.对工作地点的看法\"},\"3158\":{\"t\":\"3.有没有参加过团体活动\"},\"3159\":{\"t\":\"4.数学建模比赛中遇到的最大困难\"},\"3160\":{\"t\":\"5.开始技术面试了，面试官说看你简历都是Java相关，讲一下Spring Cloud你用过的组件\"},\"3161\":{\"t\":\"6.ConcurrentHashMap为什么用红黑树\"},\"3162\":{\"t\":\"7.看你项目中用到了网关，是怎么实现的\"},\"3163\":{\"t\":\"8.都说CAS要比synchronized好，但是CAS也有自己的问题，你能说一下有哪些问题吗\"},\"3164\":{\"t\":\"9.另一个面试官问看你简历有高并发系统的东西，你有实际的项目经验吗（这个我说就是了解，实际项目是自学的，实际项目经验都是人工智能相关的）\"},\"3165\":{\"t\":\"10.最后女的HR问看你成绩这么好，没有保研吗\"},\"3166\":{\"t\":\"11.讲一下研究生的论文成果\"},\"3167\":{\"t\":\"12.研究生的专业成绩排名，有获得过奖学金吗\"},\"3168\":{\"t\":\"13.最后问有offer吗，方便说一下是哪个公司吗\"},\"3169\":{\"t\":\"另：\"},\"3170\":{\"t\":\"1.对工作地点的看法\"},\"3171\":{\"t\":\"2.CPU达到100%的时候你如何排查问题\"},\"3172\":{\"t\":\"3.新生代和老年代数据是如何流动的\"},\"3173\":{\"t\":\"4.Linux如何给文件权限\"},\"3174\":{\"t\":\"5.想从实习中收获什么\"},\"3175\":{\"t\":\"6.看你是院研副部长，如果负责的活动和实验室科研冲突了怎么平衡\"},\"3176\":{\"t\":\"7.你平常也这样扎头发吗\"},\"3177\":{\"h\":\"秋招\",\"a\":\"秋招\"},\"3178\":{\"h\":\"一、海尔（提前批一面11min：经理技术面+HR面）：挂\",\"a\":\"一、海尔-提前批一面11min-经理技术面-hr面-挂\"},\"3179\":{\"t\":\"1.自我介绍\"},\"3180\":{\"t\":\"2.就关于应聘的软件开发岗位谈一下实际的开发\"},\"3181\":{\"t\":\"3.对于取得的最终效果讲一下\"},\"3182\":{\"t\":\"4.看了你去年做了一个博客社区的项目（？？？去年，博客社区？这个经理不太专业呀），你是用MD5做的，那么MD5它能够被破解吗（我说算力够的话能够被破解，对面不满意？？？）\"},\"3183\":{\"t\":\"5.那你熟悉这个加密算法吗？它属于对称加密还是非对称加密（凉了，直接说不熟悉）\"},\"3184\":{\"t\":\"6.我看到你用到了ThreadLocal，那你能简单说下ThreadLocal的原理吗？\"},\"3185\":{\"t\":\"7.那你什么时间把这个对象删除的呢？我看你为了防止内存泄漏，那你怎么判断它使用完了呢？\"},\"3186\":{\"t\":\"8.Token失效谁判断的？\"},\"3187\":{\"t\":\"9.说我python写得多，而他们用Java比较多，所以问我一个逻辑题：甲乙两个人，有2-6五张牌，甲乙各抽一张，你怎么判断谁大谁小？（离谱，我简历上都是Java，这是不想要我刷KPI呢）\"},\"3188\":{\"h\":\"来看头条\"},\"3189\":{\"h\":\"十二：项目\",\"a\":\"十二-项目\"},\"3190\":{\"t\":\"开发技术：Spring Cloud + Spring Boot + MybatisPlus + Redis + mysql + Mongodb + Zookeeper + kafka + ElasticSearch + Docker + 第三方技术阿里云OSS;\"},\"3191\":{\"t\":\"项目背景：”来看头条“ 项目类似于今日头条，是一个新闻资讯类项目。该项目由用户端和自媒体端组成。在用户端，实现了用户通过app端登录功能、浏览文章功能、搜索文章功能、用户历史记录功能。在自媒体端，实现了自媒体管理员登录功能、发布文章功能、删除文章功能、上传素材功能、文章内容审核功能\"},\"3192\":{\"t\":\"**项目重难点：**网关搭建；文章详情静态化及存储；文章自动审核及延迟发布；分布式锁解决集群下的方法抢占执行；热点文章实时计算\"},\"3193\":{\"t\":\"技术栈的具体应用：\"},\"3194\":{\"t\":\"Spring-Cloud-Gateway : 微服务之前架设的网关服务，实现服务注册中的API请求路由，以及控制流速控制和熔断处理都是常用的架构手段，而这些功能Gateway天然支持\"},\"3195\":{\"t\":\"运用Spring Boot快速开发框架，构建项目工程；并结合Spring Cloud全家桶技术，实现app后端、自媒体等微服务。\"},\"3196\":{\"t\":\"运用Spring Cloud Alibaba Nacos作为项目中的注册中心和配置中心\"},\"3197\":{\"t\":\"运用mybatis-plus作为持久层提升开发效率\"},\"3198\":{\"t\":\"采用kafka作为消息服务中间件，把自媒体文章上下架放进消息队列；通过用户的行为（点赞、评论、喜欢）实时记录用户数据，通过kafkaStream流式计算最新的数据；与客户端系统消息通知\"},\"3199\":{\"t\":\"运用Redis缓存技术，实现热数据的计算，提升系统性能指标，同时作为消息中间件异步消费任务。\"},\"3200\":{\"t\":\"使用Mysql存储用户数据，以保证上层数据查询的高性能\"},\"3201\":{\"t\":\"使用Mongo存储用户历史记录数据，以保证用户热数据高扩展和高性能指标\"},\"3202\":{\"t\":\"运用AI技术，来完成系统自动化功能，以提升效率及节省成本。比如文章审核\"},\"3203\":{\"h\":\"优化：\",\"a\":\"优化\"},\"3204\":{\"h\":\"（1）优化一\",\"a\":\"_1-优化一\"},\"3205\":{\"t\":\"缺陷 ：写操作（定时刷新）比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。\"},\"3206\":{\"t\":\"解决办法：\"},\"3207\":{\"t\":\"数据库和缓存数据强一致场景 ：更新 db 的时候同样更新 cache，不过我们需要加一个分布式锁来保证更新 cache 的时候不存在线程安全问题。\"},\"3208\":{\"h\":\"（2）优化二\",\"a\":\"_2-优化二\"},\"3209\":{\"t\":\"缺陷：消费者丢失消息的情况\"},\"3210\":{\"t\":\"我们知道消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。偏移量（offset)表示 Consumer 当前消费到的 Partition(分区)的所在的位置。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。\"},\"3211\":{\"t\":\"当消费者拉取到了分区的某个消息之后，消费者会自动提交了 offset。自动提交的话会有一个问题，试想一下，当消费者刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。\"},\"3212\":{\"t\":\"解决办法:\"},\"3213\":{\"t\":\"我们手动关闭自动提交 offset，每次在真正消费完消息之后再自己手动提交 offset 。 但是这样会带来消息被重新消费的问题。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。\"},\"3214\":{\"h\":\"（3）优化三\",\"a\":\"_3-优化三\"},\"3215\":{\"t\":\"存储技术选型优化：\"},\"3216\":{\"t\":\"MinIO：\"},\"3217\":{\"t\":\"AliyunOSS：\"},\"3218\":{\"h\":\"（4）优化四\",\"a\":\"_4-优化四\"},\"3219\":{\"t\":\"缺陷：对于变量存在多线程并发竞争\"},\"3220\":{\"t\":\"解决办法：\"},\"3221\":{\"t\":\"为变量设置ThreadLocal。\"},\"3222\":{\"h\":\"身份验证怎么做的？\",\"a\":\"身份验证怎么做的\"},\"3223\":{\"t\":\"AuthorizedFilter + AppJwtUtil \"},\"3224\":{\"t\":\"用户向服务器发送用户名、密码以及验证码用于登陆系统。用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录。\"},\"3225\":{\"t\":\"如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT。\"},\"3226\":{\"t\":\"用户以后每次向后端发请求都在 Header 中带上这个 JWT ，再次进入网关开始访问，网关过滤器接收用户携带的TOKEN。\"},\"3227\":{\"t\":\"服务端检查 JWT 并从中获取用户相关信息。网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误。\"},\"3228\":{\"t\":\"两点建议：\"},\"3229\":{\"t\":\"建议将 JWT 存放在 localStorage 中，放在 Cookie 中会有 CSRF 风险。\"},\"3230\":{\"t\":\"请求服务端并携带 JWT 的常见做法是将其放在 HTTP Header 的 Authorization 字段中（Authorization: Bearer Token）。\"},\"3231\":{\"t\":\"乐观锁：\"},\"3232\":{\"t\":\"使用版本号。\"},\"3233\":{\"h\":\"网关搭建 ：\",\"a\":\"网关搭建\"},\"3234\":{\"t\":\"思路分析：\"},\"3235\":{\"t\":\"用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录\"},\"3236\":{\"t\":\"用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户\"},\"3237\":{\"t\":\"用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN\"},\"3238\":{\"t\":\"网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误\"},\"3239\":{\"t\":\"具体实现：\"},\"3240\":{\"t\":\"第一：\"},\"3241\":{\"t\":\"​ 在认证过滤器中需要用到jwt的解析，所以需要把工具类拷贝一份到网关微服务\"},\"3242\":{\"t\":\"第二：\"},\"3243\":{\"t\":\"​ 在网关微服务中新建全局过滤器\"},\"3244\":{\"h\":\"文章详情静态化及存储：\",\"a\":\"文章详情静态化及存储\"},\"3245\":{\"t\":\"文章详情静态化：\"},\"3246\":{\"t\":\"​ FreeMarker 是一款模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。\"},\"3247\":{\"t\":\"​ 模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。\"},\"3248\":{\"t\":\"存储：AliyunOSS\"},\"3249\":{\"t\":\"对象存储可提供更好的数据保护，加密、保护敏感数据。\"},\"3250\":{\"h\":\"文章自动审核及延迟发布：\",\"a\":\"文章自动审核及延迟发布\"},\"3251\":{\"t\":\"文章自动审核：\"},\"3252\":{\"t\":\"1 自媒体端发布文章后，开始审核文章（异步线程的方式审核文章，在自动审核的方法上加上@Async注解（标明要异步调用），在自媒体引导类中使用@EnableAsync注解开启异步调用）\"},\"3253\":{\"t\":\"2 审核的主要是审核文章的内容（文本内容和图片）\"},\"3254\":{\"t\":\"3 借助第三方提供的接口审核文本\"},\"3255\":{\"t\":\"4 借助第三方提供的接口审核图片，由于图片存储到OSS中，需要先下载才能审核\"},\"3256\":{\"t\":\"5 如果审核失败，则需要修改自媒体文章的状态，status:2 审核失败 status:3 转到人工审核\"},\"3257\":{\"t\":\"6 如果审核成功，则需要在文章微服务中创建app端需要的文章：\"},\"3258\":{\"t\":\"​ 在文章审核成功以后需要在app的article库中新增文章数据：\"},\"3259\":{\"t\":\"​ 保存文章信息 ap_article\"},\"3260\":{\"t\":\"​ 保存文章配置信息 ap_article_config\"},\"3261\":{\"t\":\"​ 保存文章内容 ap_article_content\"},\"3262\":{\"t\":\"延迟发布：\"},\"3263\":{\"t\":\"redis实现：zset数据类型的去重有序（分数排序）特点进行延迟。例如：时间戳作为score进行排序\"},\"3264\":{\"t\":\"实现思路：\"},\"3265\":{\"t\":\"问题思路：\"},\"3266\":{\"t\":\"1.为什么任务需要存储在数据库中？\"},\"3267\":{\"t\":\"延迟任务是一个通用的服务，任何需要延迟得任务都可以调用该服务，需要考虑数据持久化的问题，存储数据库中是一种数据安全的考虑。\"},\"3268\":{\"t\":\"2.为什么redis中使用两种数据类型，list和zset？\"},\"3269\":{\"t\":\"效率问题，算法的时间复杂度\"},\"3270\":{\"t\":\"3.在添加zset数据的时候，为什么不需要预加载？\"},\"3271\":{\"t\":\"任务模块是一个通用的模块，项目中任何需要延迟队列的地方，都可以调用这个接口，要考虑到数据量的问题，如果数据量特别大，为了防止阻塞，只需要把未来几分钟要执行的数据存入缓存即可。\"},\"3272\":{\"t\":\"实现：\"},\"3273\":{\"t\":\"延迟队列服务提供对外接口：提供远程的feign接口\"},\"3274\":{\"t\":\"发布文章集成添加延迟队列接口\"},\"3275\":{\"t\":\"修改发布文章代码：把之前的异步调用修改为调用延迟任务\"},\"3276\":{\"t\":\"消费任务进行审核文章\"},\"3277\":{\"t\":\"4.为什么选用redis作为消息队列？\"},\"3278\":{\"t\":\"把 Redis 当作队列来使用时，会面临的 2 个问题：\"},\"3279\":{\"t\":\"Redis 本身可能会丢数据；\"},\"3280\":{\"t\":\"面对消息挤压，内存资源会紧张；\"},\"3281\":{\"t\":\"所以，能不能将 Redis 作为消息队列来使用，关键看你的业务场景：\"},\"3282\":{\"t\":\"如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。\"},\"3283\":{\"t\":\"如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。\"},\"3284\":{\"h\":\"分布式锁解决集群下的方法抢占执行：\",\"a\":\"分布式锁解决集群下的方法抢占执行\"},\"3285\":{\"t\":\"问题描述：\"},\"3286\":{\"t\":\"启动两台heima-leadnews-schedule服务，每台服务都会去执行refresh定时任务方法\"},\"3287\":{\"t\":\"分布式锁：\"},\"3288\":{\"t\":\"控制分布式系统有序的去对共享资源进行操作，通过互斥来保证数据的一致性。\"},\"3289\":{\"t\":\"解决方案：\"},\"3290\":{\"t\":\"sexnx （SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。\"},\"3291\":{\"t\":\"这种加锁的思路是，如果 key 不存在则为 key 设置 value，如果 key 已存在则 SETNX 命令不做任何操作\"},\"3292\":{\"t\":\"客户端A请求服务器设置key的值，如果设置成功就表示加锁成功\"},\"3293\":{\"t\":\"客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败\"},\"3294\":{\"t\":\"客户端A执行代码完成，删除锁\"},\"3295\":{\"t\":\"客户端B在等待一段时间后再去请求设置key的值，设置成功\"},\"3296\":{\"t\":\"客户端B执行代码完成，删除锁\"},\"3297\":{\"h\":\"热点文章实时计算：\",\"a\":\"热点文章实时计算\"},\"3298\":{\"t\":\"思路说明：\"},\"3299\":{\"t\":\"待优化：\"},\"3300\":{\"t\":\"使用FastDFS作为静态资源存储器，在其上实现热静态资源缓存、淘汰等功能（待优化）\"},\"3301\":{\"t\":\"运用Hbase技术，存储系统中的冷数据，保证系统数据的可靠性（待优化）\"},\"3302\":{\"t\":\"运用ES搜索技术，对冷数据、文章数据建立索引，以保证冷数据、文章查询性能（待优化）\"},\"3303\":{\"t\":\"当用户 Logout 的话，JWT 也还有效。除非，我们在后端增加额外的处理逻辑比如将失效的 JWT 存储起来，后端先验证 JWT 是否有效再进行处理。\"},\"3304\":{\"h\":\"QPS估算方法、性能测试：\",\"a\":\"qps估算方法、性能测试\"},\"3305\":{\"t\":\"QPS（Query Per Second）：每秒请求数，就是说服务器在一秒的时间内处理了多少个请求。\"},\"3306\":{\"t\":\"怎么估出每秒钟能处理多少请求呢？\"},\"3307\":{\"t\":\"方式一:自己在接口里记录\"},\"3308\":{\"t\":\"这种方式指的是在你的接口里，日志记录了能体现该接口特性的，并具有唯一性的字符串！\"},\"3309\":{\"t\":\"例如，下面这一段代码：\"},\"3310\":{\"t\":\"@RestController @RequestMapping(\\\"/home\\\") public class IndexController { //省略 @RequestMapping(\\\"/index\\\") String index() { logger.info(\\\"渣渣烟\\\"); return \\\"index\\\"; } } \"},\"3311\":{\"t\":\"假设现在我要统计index这个接口的QPS！\"},\"3312\":{\"t\":\"OK，什么叫能体现该接口特性的字符串呢！就像上面的\\\"渣渣烟\\\"这个字符串，只在index这个接口里出现过，没在其他其他接口里出现过！因此，只要统计出\\\"渣渣烟\\\"这个字符串在日志里的出现次数，就能知道该接口的请求次数！\"},\"3313\":{\"t\":\"什么叫具有唯一性的字符串呢！所谓唯一性，指的是\\\"渣渣烟\\\"这个字符串，在这个接口的一次调用流程中，只出现一次！如果出现两次，就会导致到时候统计出来的次数会多一倍，所以尽量选择具有唯一性的字段！\"},\"3314\":{\"t\":\"方式二:利用tomcat的access log\"},\"3315\":{\"t\":\"tomcat自带的access log功能：\"},\"3316\":{\"t\":\"server.tomcat.accesslog.directory 设定log的目录，默认: logs server.tomcat.accesslog.enabled 是否开启access log，默认: false \"},\"3317\":{\"t\":\"此时，你访问一次/home/index地址，会有下面这样日志：\"},\"3318\":{\"t\":\"127.0.0.1 - - [xxx] \\\"POST /home/index HTTP/1.1\\\" 200 138 \"},\"3319\":{\"t\":\"执行一串命令：\"},\"3320\":{\"t\":\"cat xx.log |grep 'GET /mvc2'|cut -d ' ' -f4|uniq -c|sort -n -r \"},\"3321\":{\"t\":\"JMeter测试：\"},\"3322\":{\"h\":\"自我介绍：\",\"a\":\"自我介绍\"},\"3323\":{\"t\":\"面试官，您好，首先很感谢您给我的面试机会！我叫杨路恒，今年24岁，山东济宁人，就读于陕西师范大学，今年研二，软件工程专业，研究方向为知识图谱。大学时间我主要利用课外时间学习了 Java 以及 一些框架 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的粉丝数达到了3k+，访问量达到了44W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"3324\":{\"h\":\"项目中常用技术一：MD5\"},\"3325\":{\"h\":\"一、什么是MD5？\",\"a\":\"一、什么是md5\"},\"3326\":{\"t\":\"MD5（Message Digest Algorithm 5），消息摘要算法第五版。\"},\"3327\":{\"t\":\"消息摘要算法又称为哈希算法、散列算法，输出的消息摘要又称为哈希值、散列值。\"},\"3328\":{\"h\":\"二、MD5的特点\",\"a\":\"二、md5的特点\"},\"3329\":{\"t\":\"压缩性：MD5可以将任意长度的输入转化为128位长度的输出；\"},\"3330\":{\"t\":\"不可逆性：MD5是不可逆的，我们无法通过常规方式从MD5值倒推出它的原文；\"},\"3331\":{\"t\":\"抗修改性：对原文做一丁点儿改动，MD5值就会有巨大的变动，也就是说就算两个MD5值非常相似，你也不能想当然地认为它们俩对应的原文也非常相似。\"},\"3332\":{\"t\":\"容易计算：从原数据计算出MD5值很容易。\"},\"3333\":{\"h\":\"三、MD5的问题\",\"a\":\"三、md5的问题\"},\"3334\":{\"t\":\"因为MD5是不可逆的，所以MD5是安全的。但是2004年，山东大学的王小云教授在美国加州举办的密码学会议上宣布破解了MD5，其实并不是真正的破解，而是非常明显地加快了反向查询的速度，在当时计算机的计算能力下，利用她们的技术，可以在几个小时内就找到一个MD5值对应的原文。因为MD5可以被暴力破解，所以MD5不再是安全的了，对安全性要求较高的场合，不建议直接使用MD5。\"},\"3335\":{\"h\":\"四、MD5的应用场景\",\"a\":\"四、md5的应用场景\"},\"3336\":{\"h\":\"4.1 对密码加密\",\"a\":\"_4-1-对密码加密\"},\"3337\":{\"t\":\"MD5可以用来对密码加密，防止密码被窃听。\"},\"3338\":{\"t\":\"为什么要对密码加密\"},\"3339\":{\"t\":\"比如一个用户的用户名为18666666666，密码为123456，那么如果不对密码加密，客户端在注册或登录的时候，就是明文传输密码http://localhost:8080/hw/register|login?username=18666666666&password=123456，传输过程中一旦请求被截获，用户的密码就被泄漏了；再者服务器的数据库中也是明文存储密码\"},\"3340\":{\"t\":\"username\"},\"3341\":{\"t\":\"password\"},\"3342\":{\"t\":\"18666666666\"},\"3343\":{\"t\":\"123456\"},\"3344\":{\"t\":\"一旦数据库泄漏，用户的密码就被泄漏了。\"},\"3345\":{\"t\":\"而如果我们使用了MD5对密码加密，客户端在注册或登录的时候，就是密文传输密码http://localhost:8080/hw/register|login?username=18666666666&password=e10adc3949ba59abbe56e057f20f883e，传输过程中即便请求被截获，用户的密码也不会被泄漏；再者服务器的数据库中也是密文存储密码\"},\"3346\":{\"t\":\"username\"},\"3347\":{\"t\":\"password\"},\"3348\":{\"t\":\"18666666666\"},\"3349\":{\"t\":\"e10adc3949ba59abbe56e057f20f883e\"},\"3350\":{\"t\":\"就算数据库泄漏，用户的密码也不会被泄漏。\"},\"3351\":{\"t\":\"彩虹表\"},\"3352\":{\"t\":\"攻击者创建了一个叫彩虹表的东西，它是一个非常庞大的数据库，里面收集了所有常用的密码，以及这些密码对应的MD5值、SHA-1值等，现在主流的彩虹表记录数据约90万亿条，占用硬盘超过500TB。有了彩虹表，攻击者就可以通过穷举法反向查询出MD5值、SHA-1值等对应的原文，因此如果你的密码很不幸被搜集在彩虹表里，就可能被破解掉，这也是为什么很多场合我们输密码的时候，有字母数字下划线大小写等乱七八糟各种要求，目的就是尽量使得明文密码的复杂度增加一些，尽量使得明文密码及其MD5值、SHA-1值等不被收集在彩虹表里。\"},\"3353\":{\"t\":\"如果有一个预先计算好的常用口令和它们的 MD5的对照表（如下表），那么通过查表方式，时间上将大大减少，而这个表就叫做彩虹表：\"},\"3354\":{\"t\":\"常用口令\"},\"3355\":{\"t\":\"MD5\"},\"3356\":{\"t\":\"hello123\"},\"3357\":{\"t\":\"f30aa7a662c728b7407c54ae6bfd27d1\"},\"3358\":{\"t\":\"12345678\"},\"3359\":{\"t\":\"25d55ad283aa400af464c76d713c07ad\"},\"3360\":{\"t\":\"passw0rd\"},\"3361\":{\"t\":\"bed128365216c019988915ed3add75fb\"},\"3362\":{\"t\":\"19700101\"},\"3363\":{\"t\":\"570da6d5277a646f6552b8832012f5dc\"},\"3364\":{\"t\":\"…\"},\"3365\":{\"t\":\"…\"},\"3366\":{\"t\":\"20201231\"},\"3367\":{\"t\":\"6879c0ae9117b50074ce0a0d4c843060\"},\"3368\":{\"t\":\"加盐Sault\"},\"3369\":{\"t\":\"可见直接使用MD5加密是不安全的，但是我们可以加盐。加盐是指在密码的任意位置插入一些指定的字符串（即盐值salt），加盐的目的也是为了尽量增强明文密码的复杂度，尽量使得明文密码及其MD5值、SHA-1值等不被收集在彩虹表里。\"},\"3370\":{\"t\":\"加盐流程：\"},\"3371\":{\"t\":\"用户注册时\"},\"3372\":{\"t\":\"用户输入【账号】和【密码】（以及其他用户信息）；\"},\"3373\":{\"t\":\"系统为用户生成【Salt值】；\"},\"3374\":{\"t\":\"系统将【Salt值】和【用户密码】连接到一起；\"},\"3375\":{\"t\":\"对连接后的值进行散列，得到【Hash1值】；\"},\"3376\":{\"t\":\"将【Hash1值】和【Salt值】分别放到数据库中。\"},\"3377\":{\"t\":\"用户登录时\"},\"3378\":{\"t\":\"用户输入【账号】和【密码】；\"},\"3379\":{\"t\":\"系统通过用户名找到与之对应的【Hash值】和【Salt值】；\"},\"3380\":{\"t\":\"系统将【Salt值】和【用户输入的密码】连接到一起；\"},\"3381\":{\"t\":\"对连接后的值进行散列，得到【Hash2值】（注意是即时运算出来的值）；\"},\"3382\":{\"t\":\"比较【Hash1值】和【Hash2值】是否相等，相等则表示密码正确，否则表示密码错误。\"},\"3383\":{\"h\":\"4.2 生成数字签名\",\"a\":\"_4-2-生成数字签名\"},\"3384\":{\"t\":\"MD5可以用来生成数字签名，验证数据是否被篡改。\"},\"3385\":{\"h\":\"五、MD5是是对称加密还是非对称加密？\",\"a\":\"五、md5是是对称加密还是非对称加密\"},\"3386\":{\"t\":\"小羊在昨天2023.5.19下午等了将近十多分钟面试官才进面试，结果面试官问我MD5，我当时一脸懵逼，只听他说MD5是一个非对称加密算法，我当时信以为真。我就去总结MD5相关的知识，结果发现面试官说错了。话不多说，直接发车！\"},\"3387\":{\"t\":\"在计算机信息安全领域，经常应用到MD5、对称加密、非对称加密。在密码学的应用和研究中，DES、RSA、SHA等加密算法占据着重要的位置。随着人们对加密强度需求的不断提高，近期出现了很多加密算法，如AES、ECC等。那么，哪些算法是对称加密，哪些是非对称加密；对称加密和非对称加密有哪些优缺点，MD5是对称加密还是非对称加密？\"},\"3388\":{\"t\":\"我们先来了解一下加密算法的基础北背景。\"},\"3389\":{\"h\":\"5.1对称加密算法有哪些？\",\"a\":\"_5-1对称加密算法有哪些\"},\"3390\":{\"t\":\"对称密码算法又叫传统密码算法，也就是加密密钥能够从解密密钥中推算出来，反过来也成立。在大多数对称算法中，加密解密密钥是相同的。常见的对称加密算法有：DES、IDEA、AES、SM1和SM4。\"},\"3391\":{\"h\":\"5.2非对称加密算法有哪些？\",\"a\":\"_5-2非对称加密算法有哪些\"},\"3392\":{\"t\":\"非对称密钥也叫公开密钥加密,它是用两个数学相关的密钥对信息进行编码。在此系统中，其中一个密钥叫公开密钥，可随意发给期望同密钥持有者进行安全通信的人。公开密钥用于对信息加密。第二个密钥是私有密钥，属于密钥持有者，此人要仔细保存私有密钥。密钥持有者用私有密钥对收到的信息进行解密。常见的非对称加密算法有：RSA、ECC、SM2。\"},\"3393\":{\"h\":\"5.3MD5是对称加密还是非对称加密？\",\"a\":\"_5-3md5是对称加密还是非对称加密\"},\"3394\":{\"t\":\"这个问题有人吐槽过，面试官竟然问MD5是对称加密还是非对称加密？其实，MD5不是加密算法，md5实际上既不是对称算法，也不是非对称加密算法。它是消息摘要（安全散列）算法。\"},\"3395\":{\"t\":\"俺也要吐槽一下。\"},\"3396\":{\"h\":\"5.4对称加密和非对称加密有哪些优缺点？\",\"a\":\"_5-4对称加密和非对称加密有哪些优缺点\"},\"3397\":{\"t\":\"对称加密优点：速度快，对称性加密通常在消息发送方需要加密大量数据时使用，具有算法公开、计算量小、加密速度快、加密效率高的特点。对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性。\"},\"3398\":{\"t\":\"对称加密的缺点：密钥的管理和分发非常困难，不够安全。在数据传送前，发送方和接收方必须商定好秘钥，并且双方都要保存好密钥，如果一方的密钥被泄露，那么加密信息也就不安全了，安全性得不到保证。\"},\"3399\":{\"t\":\"非对称加密优点：安全性更高，公钥是公开的，秘钥是自己保存的，不需要将私钥给别人。\"},\"3400\":{\"t\":\"非对称加密缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。\"},\"3401\":{\"t\":\"参考：https://www.jianshu.com/p/38c93c677124、https://blog.csdn.net/m0_69916115/article/details/126145847、https://blog.csdn.net/qq_42992084/article/details/112252684\"},\"3402\":{\"h\":\"主要功能与配置演示\"},\"3403\":{\"h\":\"目录\",\"a\":\"目录\"},\"3404\":{\"t\":\"Markdown 展示\"},\"3405\":{\"t\":\"页面展示\"},\"3406\":{\"t\":\"禁用展示\"},\"3407\":{\"t\":\"加密展示\"},\"3408\":{\"h\":\"布局与功能禁用\"},\"3409\":{\"t\":\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\"},\"3410\":{\"t\":\"本页面就是一个示例，禁用了如下功能:\"},\"3411\":{\"t\":\"导航栏\"},\"3412\":{\"t\":\"侧边栏\"},\"3413\":{\"t\":\"路径导航\"},\"3414\":{\"t\":\"页面信息\"},\"3415\":{\"t\":\"贡献者\"},\"3416\":{\"t\":\"编辑此页链接\"},\"3417\":{\"t\":\"更新时间\"},\"3418\":{\"t\":\"上一篇/下一篇 链接\"},\"3419\":{\"t\":\"评论\"},\"3420\":{\"t\":\"页脚\"},\"3421\":{\"t\":\"返回顶部按钮\"},\"3422\":{\"h\":\"密码加密的文章\"},\"3423\":{\"t\":\"实际的文章内容。\"},\"3424\":{\"t\":\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\"},\"3425\":{\"t\":\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"},\"3426\":{\"h\":\"Markdown 展示\"},\"3427\":{\"t\":\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\"},\"3428\":{\"t\":\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"},\"3429\":{\"h\":\"Markdown 介绍\",\"a\":\"markdown-介绍\"},\"3430\":{\"t\":\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"},\"3431\":{\"h\":\"Markdown 配置\",\"a\":\"markdown-配置\"},\"3432\":{\"t\":\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\"},\"3433\":{\"t\":\"相关信息\"},\"3434\":{\"t\":\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"},\"3435\":{\"h\":\"Markdown 扩展\",\"a\":\"markdown-扩展\"},\"3436\":{\"t\":\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"},\"3437\":{\"h\":\"VuePress 扩展\",\"a\":\"vuepress-扩展\"},\"3438\":{\"t\":\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\"},\"3439\":{\"t\":\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"},\"3440\":{\"h\":\"主题扩展\",\"a\":\"主题扩展\"},\"3441\":{\"t\":\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"},\"3442\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"3443\":{\"t\":\"安全的在 Markdown 中使用 {{ variable }}。\"},\"3444\":{\"t\":\"自定义标题\"},\"3445\":{\"t\":\"信息容器，包含 代码 与 链接。\"},\"3446\":{\"t\":\"const a = 1; \"},\"3447\":{\"t\":\"自定义标题\"},\"3448\":{\"t\":\"提示容器\"},\"3449\":{\"t\":\"自定义标题\"},\"3450\":{\"t\":\"警告容器\"},\"3451\":{\"t\":\"自定义标题\"},\"3452\":{\"t\":\"危险容器\"},\"3453\":{\"t\":\"自定义标题\"},\"3454\":{\"t\":\"详情容器\"},\"3455\":{\"t\":\"查看详情\"},\"3456\":{\"h\":\"代码块\",\"a\":\"代码块\"},\"3457\":{\"t\":\"查看详情\"},\"3458\":{\"h\":\"上下角标\",\"a\":\"上下角标\"},\"3459\":{\"t\":\"19th H2O\"},\"3460\":{\"t\":\"查看详情\"},\"3461\":{\"h\":\"自定义对齐\",\"a\":\"自定义对齐\"},\"3462\":{\"t\":\"我是居中的\"},\"3463\":{\"t\":\"我在右对齐\"},\"3464\":{\"t\":\"查看详情\"},\"3465\":{\"h\":\"Attrs\",\"a\":\"attrs\"},\"3466\":{\"t\":\"一个拥有 ID 的 单词。\"},\"3467\":{\"t\":\"查看详情\"},\"3468\":{\"h\":\"脚注\",\"a\":\"脚注\"},\"3469\":{\"t\":\"此文字有脚注[1].\"},\"3470\":{\"t\":\"查看详情\"},\"3471\":{\"h\":\"标记\",\"a\":\"标记\"},\"3472\":{\"t\":\"你可以标记 重要的内容 。\"},\"3473\":{\"t\":\"查看详情\"},\"3474\":{\"h\":\"任务列表\",\"a\":\"任务列表\"},\"3475\":{\"t\":\" 计划 1\"},\"3476\":{\"t\":\" 计划 2\"},\"3477\":{\"t\":\"查看详情\"},\"3478\":{\"h\":\"图片增强\",\"a\":\"图片增强\"},\"3479\":{\"t\":\"支持为图片设置颜色模式和大小\"},\"3480\":{\"t\":\"查看详情\"},\"3481\":{\"h\":\"卡片\",\"a\":\"卡片\"},\"3482\":{\"t\":\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mrhope.site/logo.svg link: https://mrhope.site color: rgba(253, 230, 138, 0.15) \"},\"3483\":{\"t\":\"查看详情\"},\"3484\":{\"h\":\"图表\",\"a\":\"图表\"},\"3485\":{\"t\":\"查看详情\"},\"3486\":{\"h\":\"Echarts\",\"a\":\"echarts\"},\"3487\":{\"t\":\"查看详情\"},\"3488\":{\"h\":\"流程图\",\"a\":\"流程图\"},\"3489\":{\"t\":\"查看详情\"},\"3490\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"3491\":{\"t\":\"查看详情\"},\"3492\":{\"h\":\"Tex 语法\",\"a\":\"tex-语法\"},\"3493\":{\"t\":\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\"},\"3494\":{\"t\":\"查看详情\"},\"3495\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"3496\":{\"t\":\"Markdown 展示\"},\"3497\":{\"t\":\"页面展示\"},\"3498\":{\"t\":\"禁用展示\"},\"3499\":{\"t\":\"加密展示\"},\"3500\":{\"t\":\"查看详情\"},\"3501\":{\"h\":\"代码演示\",\"a\":\"代码演示\"},\"3502\":{\"t\":\"查看详情\"},\"3503\":{\"h\":\"样式化\",\"a\":\"样式化\"},\"3504\":{\"t\":\"向 Mr.Hope 捐赠一杯咖啡。 \"},\"3505\":{\"t\":\"查看详情\"},\"3506\":{\"h\":\"交互演示\",\"a\":\"交互演示\"},\"3507\":{\"t\":\"查看详情\"},\"3508\":{\"h\":\"Vue 交互演示\",\"a\":\"vue-交互演示\"},\"3509\":{\"t\":\"查看详情\"},\"3510\":{\"h\":\"幻灯片\",\"a\":\"幻灯片\"},\"3511\":{\"t\":\"查看详情\"},\"3512\":{\"t\":\"这是脚注内容 ↩︎\"},\"3513\":{\"h\":\"页面配置\"},\"3514\":{\"t\":\"more 注释之前的内容被视为文章摘要。\"},\"3515\":{\"h\":\"页面信息\",\"a\":\"页面信息\"},\"3516\":{\"t\":\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\"},\"3517\":{\"t\":\"作者设置为 Ms.Hope。\"},\"3518\":{\"t\":\"写作日期为 2020 年 1 月 1 日\"},\"3519\":{\"t\":\"分类为 “使用指南”\"},\"3520\":{\"t\":\"标签为 “页面配置” 和 “使用指南”\"},\"3521\":{\"h\":\"页面内容\",\"a\":\"页面内容\"},\"3522\":{\"t\":\"你可以自由在这里书写你的 Markdown。\"},\"3523\":{\"t\":\"提示\"},\"3524\":{\"t\":\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\"},\"3525\":{\"t\":\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"},\"3526\":{\"t\":\"主题包含了一个自定义徽章可以使用:\"},\"3527\":{\"t\":\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"},\"3528\":{\"h\":\"页面结构\",\"a\":\"页面结构\"},\"3529\":{\"t\":\"此页面应当包含:\"},\"3530\":{\"t\":\"路径导航\"},\"3531\":{\"t\":\"标题和页面信息\"},\"3532\":{\"t\":\"TOC (文章标题列表)\"},\"3533\":{\"t\":\"贡献者、更新时间等页面元信息\"},\"3534\":{\"t\":\"评论\"},\"3535\":{\"t\":\"导航栏\"},\"3536\":{\"t\":\"侧边栏\"},\"3537\":{\"t\":\"页脚\"},\"3538\":{\"t\":\"返回顶部按钮\"},\"3539\":{\"t\":\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"},\"3540\":{\"h\":\"指南\"},\"3541\":{\"h\":\"功能亮点\",\"a\":\"功能亮点\"},\"3542\":{\"h\":\"Bar\",\"a\":\"bar\"},\"3543\":{\"t\":\"baz\"},\"3544\":{\"t\":\"...\"},\"3545\":{\"h\":\"Foo\",\"a\":\"foo\"},\"3546\":{\"t\":\"ray\"},\"3547\":{\"t\":\"...\"},\"3548\":{\"h\":\"写在前面\"},\"3549\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"3550\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"3551\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"3552\":{\"h\":\"Bar 功能\"},\"3553\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"3554\":{\"t\":\"我们支持 bar 功能，...\"},\"3555\":{\"h\":\"详情\",\"a\":\"详情\"},\"3556\":{\"t\":\"baz\"},\"3557\":{\"t\":\"...\"},\"3558\":{\"h\":\"Baz\"},\"3559\":{\"t\":\"功能详情...\"},\"3560\":{\"h\":\"Foo 功能\"},\"3561\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"3562\":{\"t\":\"我们支持 foo 功能，...\"},\"3563\":{\"h\":\"详情\",\"a\":\"详情\"},\"3564\":{\"t\":\"ray\"},\"3565\":{\"t\":\"...\"},\"3566\":{\"h\":\"Ray\"},\"3567\":{\"t\":\"功能详情...\"},\"3568\":{\"h\":\"JVM\"},\"3569\":{\"h\":\"二：JVM\",\"a\":\"二-jvm\"},\"3570\":{\"h\":\"基本概念\",\"a\":\"基本概念\"},\"3571\":{\"h\":\"说一下 Jvm 的主要组成部分？及其作用？\",\"a\":\"说一下-jvm-的主要组成部分-及其作用\"},\"3572\":{\"t\":\"类加载器（ClassLoader）\"},\"3573\":{\"t\":\"运行时数据区（Runtime Data Area）\"},\"3574\":{\"t\":\"执行引擎（Execution Engine）\"},\"3575\":{\"t\":\"本地库接口（Native Interface）\"},\"3576\":{\"t\":\"首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\"},\"3577\":{\"h\":\"内存结构（运行时数据区）\",\"a\":\"内存结构-运行时数据区\"},\"3578\":{\"h\":\"垃圾回收机制\",\"a\":\"垃圾回收机制\"},\"3579\":{\"h\":\"如何判断对象是否可回收？\",\"a\":\"如何判断对象是否可回收\"},\"3580\":{\"h\":\"垃圾回收算法\",\"a\":\"垃圾回收算法\"},\"3581\":{\"h\":\"垃圾收集器\",\"a\":\"垃圾收集器\"},\"3582\":{\"h\":\"类加载机制\",\"a\":\"类加载机制\"},\"3583\":{\"h\":\"类的生命周期\",\"a\":\"类的生命周期\"},\"3584\":{\"t\":\"类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，前三个阶段可以统称为连接（Linking）。\"},\"3585\":{\"t\":\"这 7 个阶段的顺序如下图所示：\"},\"3586\":{\"t\":\"一个类的完整生命周期\"},\"3587\":{\"h\":\"类加载过程\",\"a\":\"类加载过程\"},\"3588\":{\"t\":\"Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？\"},\"3589\":{\"t\":\"系统加载 Class 类型的文件主要三步：加载->连接->初始化。连接过程又可分为三步：验证->准备->解析。\"},\"3590\":{\"t\":\"类加载过程\"},\"3591\":{\"h\":\"类加载器\",\"a\":\"类加载器\"},\"3592\":{\"h\":\"介绍：\",\"a\":\"介绍\"},\"3593\":{\"t\":\"类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。\"},\"3594\":{\"t\":\"每个 Java 类都有一个引用指向加载它的 ClassLoader。\"},\"3595\":{\"t\":\"数组类不是通过 ClassLoader 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。\"},\"3596\":{\"t\":\"简单来说，类加载器的主要作用就是加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。\"},\"3597\":{\"h\":\"类加载器加载规则\",\"a\":\"类加载器加载规则\"},\"3598\":{\"t\":\"JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。\"},\"3599\":{\"t\":\"对于已经加载的类会被放在 ClassLoader 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。\"},\"3600\":{\"h\":\"类加载器总结\",\"a\":\"类加载器总结\"},\"3601\":{\"t\":\"JVM 中内置了三个重要的 ClassLoader：\"},\"3602\":{\"t\":\"BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ %JAVA_HOME%/lib目录下的 rt.jar 、resources.jar 、charsets.jar等 jar 包和类）以及被 -Xbootclasspath参数指定的路径下的所有类。\"},\"3603\":{\"t\":\"ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类以及被 java.ext.dirs 系统变量所指定的路径下的所有类。\"},\"3604\":{\"t\":\"AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。\"},\"3605\":{\"t\":\"除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ .class 文件）进行加密，加载时再利用自定义的类加载器对其解密。\"},\"3606\":{\"t\":\"如果我们要自定义自己的类加载器，很明显需要继承 ClassLoader抽象类。\"},\"3607\":{\"t\":\"ClassLoader 类有两个关键的方法：\"},\"3608\":{\"t\":\"protected Class loadClass(String name, boolean resolve)：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resove 如果为 true，在加载时调用 resolveClass(Class<?> c) 方法解析该类。\"},\"3609\":{\"t\":\"protected Class findClass(String name)：根据类的二进制名称来查找类，默认实现是空方法。\"},\"3610\":{\"t\":\"官方 API 文档中写到：\"},\"3611\":{\"t\":\"Subclasses of ClassLoader are encouraged to override findClass(String name), rather than this method.\"},\"3612\":{\"t\":\"建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。\"},\"3613\":{\"t\":\"如果我们不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 loadClass() 方法。\"},\"3614\":{\"t\":\"类加载器层次关系图\"},\"3615\":{\"h\":\"双亲委派模型\",\"a\":\"双亲委派模型\"},\"3616\":{\"t\":\"类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载呢？这就需要提到双亲委派模型了。\"},\"3617\":{\"t\":\"ClassLoader 类使用委托模型来搜索类和资源。\"},\"3618\":{\"t\":\"双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。\"},\"3619\":{\"t\":\"ClassLoader 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。\"},\"3620\":{\"t\":\"下图展示的各种类加载器之间的层次关系被称为类加载器的“双亲委派模型(Parents Delegation Model)”。\"},\"3621\":{\"t\":\"类加载器层次关系图\"},\"3622\":{\"t\":\"双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在 java.lang.ClassLoader 的 loadClass() 中，相关代码如下所示。\"},\"3623\":{\"t\":\"protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { //首先，检查该类是否已经加载过 Class c = findLoadedClass(name); if (c == null) { //如果 c 为 null，则说明该类没有被加载过 long t0 = System.nanoTime(); try { if (parent != null) { //当父类的加载器不为空，则通过父类的loadClass来加载该类 c = parent.loadClass(name, false); } else { //当父类的加载器为空，则调用启动类加载器来加载该类 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { //非空父类的类加载器无法找到相应的类，则抛出异常 } if (c == null) { //当父类加载器无法加载时，则调用findClass方法来加载该类 //用户可通过覆写该方法，来自定义类加载器 long t1 = System.nanoTime(); c = findClass(name); //用于统计类加载器相关的信息 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { //对类进行link操作 resolveClass(c); } return c; } } \"},\"3624\":{\"t\":\"每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。\"},\"3625\":{\"t\":\"结合上面的源码，简单总结一下双亲委派模型的执行流程：\"},\"3626\":{\"t\":\"在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。\"},\"3627\":{\"t\":\"类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 BootstrapClassLoader 中。\"},\"3628\":{\"t\":\"只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 findClass() 方法来加载类）。\"},\"3629\":{\"t\":\"优点：\"},\"3630\":{\"t\":\"双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。\"},\"3631\":{\"h\":\"Java基础\"},\"3632\":{\"h\":\"一：Java基础\",\"a\":\"一-java基础\"},\"3633\":{\"t\":\"HashMap、HashTable：https://blog.csdn.net/yang13563758128/article/details/86655574?spm=1001.2014.3001.5502\"},\"3634\":{\"h\":\"异常\",\"a\":\"异常\"},\"3635\":{\"h\":\"Java异常类层次结构?\",\"a\":\"java异常类层次结构\"},\"3636\":{\"t\":\"Throwable是 Java 语言中所有错误与异常的超类。 \"},\"3637\":{\"t\":\"Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。\"},\"3638\":{\"t\":\"Exception 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。\"},\"3639\":{\"t\":\"运行时异常\"},\"3640\":{\"t\":\"都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。\"},\"3641\":{\"t\":\"运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。\"},\"3642\":{\"t\":\"非运行时异常 （编译异常）\"},\"3643\":{\"t\":\"是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。\"},\"3644\":{\"h\":\"可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）区别？\",\"a\":\"可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions-区别\"},\"3645\":{\"t\":\"可查异常（编译器要求必须处置的异常）：\"},\"3646\":{\"t\":\"正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。\"},\"3647\":{\"t\":\"除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。\"},\"3648\":{\"t\":\"不可查异常(编译器不要求强制处置的异常)\"},\"3649\":{\"t\":\"包括运行时异常（RuntimeException与其子类）和错误（Error）。\"},\"3650\":{\"h\":\"throw和throws的区别？\",\"a\":\"throw和throws的区别\"},\"3651\":{\"t\":\"异常的申明(throws)\"},\"3652\":{\"t\":\"在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：\"},\"3653\":{\"t\":\"public static void method() throws IOException, FileNotFoundException{ //something statements } \"},\"3654\":{\"t\":\"异常的抛出(throw)\"},\"3655\":{\"t\":\"如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：\"},\"3656\":{\"t\":\"public static double method(int value) { if(value == 0) { throw new ArithmeticException(\\\"参数不能为0\\\"); //抛出一个运行时异常 } return 5.0 / value; } \"},\"3657\":{\"h\":\"Java 7 的 try-with-resource?\",\"a\":\"java-7-的-try-with-resource\"},\"3658\":{\"t\":\"如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。\"},\"3659\":{\"t\":\"public void automaticallyCloseResource() { File file = new File(\\\"./tmp.txt\\\"); try (FileInputStream inputStream = new FileInputStream(file);) { // use the inputStream to read a file } catch (FileNotFoundException e) { log.error(e); } catch (IOException e) { log.error(e); } } \"},\"3660\":{\"h\":\"异常的底层？\",\"a\":\"异常的底层\"},\"3661\":{\"t\":\"提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。\"},\"3662\":{\"t\":\"public static void simpleTryCatch() { try { testNPE(); } catch (Exception e) { e.printStackTrace(); } } \"},\"3663\":{\"t\":\"使用javap来分析这段代码（需要先使用javac编译）：\"},\"3664\":{\"t\":\"//javap -c Main public static void simpleTryCatch(); Code: 0: invokestatic #3 // Method testNPE:()V 3: goto 11 6: astore_0 7: aload_0 8: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 11: return Exception table: from to target type 0 3 6 Class java/lang/Exception \"},\"3665\":{\"t\":\"看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。\"},\"3666\":{\"t\":\"异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下\"},\"3667\":{\"t\":\"from 可能发生异常的起始点\"},\"3668\":{\"t\":\"to 可能发生异常的结束点\"},\"3669\":{\"t\":\"target 上述from和to之前发生异常后的异常处理者的位置\"},\"3670\":{\"t\":\"type 异常处理者处理的异常的类信息\"},\"3671\":{\"h\":\"反射\",\"a\":\"反射\"},\"3672\":{\"h\":\"什么是反射机制?\",\"a\":\"什么是反射机制\"},\"3673\":{\"t\":\"JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制。\"},\"3674\":{\"t\":\"直接new对象就叫正射。\"},\"3675\":{\"t\":\"如下:\"},\"3676\":{\"t\":\"Map<String, String> map = new HashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"3677\":{\"t\":\"那反射是啥？我先不说反射是啥，概念啥的太虚幻我就不说了，把你绕蒙你这篇文章就白看了，直接举例吧\"},\"3678\":{\"t\":\"接着看上面的正射，如果哪天你发现用LinkedHashMap效果更好，然后你修改代码：\"},\"3679\":{\"t\":\"Map<String, String> map = new LinkedHashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"3680\":{\"t\":\"改完了编译运行没有bug然而过了两天你发现用LinkedHashMap会有隐患，还是得改回去用HashMap，成年人的崩溃如此简单，但是聪明的你想到可以加个判断，根据传入的条件来决定用HashMap还是LinkedHashMap，于是：\"},\"3681\":{\"t\":\"public Map<String, String> getMap(String param) { Map<String, String> map = null; if (param.equals(\\\"HashMap\\\")) { map = new HashMap<>(); } else if (param.equals(\\\"LinkedHashMap\\\")) { map = new LinkedHashMap<>(); } return map; } \"},\"3682\":{\"t\":\"大功告成，这么难的逻辑都被你实现了，然后你得用TreeMap，你又要改代码。\"},\"3683\":{\"t\":\"有没有一种办法可以让你不修改代码呢，这时候反射就派上用场了。\"},\"3684\":{\"t\":\"概念：反射是Java的一种机制，让我们可以在运行时获取类的信息\"},\"3685\":{\"t\":\"作用：通过反射，我们可以在程序运行时动态创建对象，还能获取到类的所有信息，比如它的属性、构造器、方法、注解等；\"},\"3686\":{\"t\":\"直接举例吧：\"},\"3687\":{\"t\":\"public Map<String, String> getMap(String className) { Class clazz = Class.forName(className); Constructor constructor = clazz.getConstructor(); return (Map<String, String>) constructor.newInstance(); } \"},\"3688\":{\"t\":\"这时候不管你需要什么Map，只要实现了Map接口，你都能通过getMap获得，只需要传入对应Map的全限定名，例如java.util.HashMap / java.util.LinkedHashMap。\"},\"3689\":{\"t\":\"java中反射的用法非常非常多，常见的有以下这几个：\"},\"3690\":{\"t\":\"一、在运行时获取一个类的 Class 对象 二、在运行时构造一个类的实例化对象 三、在运行时获取一个类的所有信息：变量、方法、构造器、注解 \"},\"3691\":{\"h\":\"一、获取class对象\",\"a\":\"一、获取class对象\"},\"3692\":{\"t\":\"三种方法 1、类名.class：这种获取方式只有在编译前已经声明了该类的类型才能获取到 Class 对象\"},\"3693\":{\"t\":\"Class<HashMap> hashMap= HashMap.class; \"},\"3694\":{\"t\":\"2、实例.getClass()：通过实例化对象获取该实例的 Class 对象\"},\"3695\":{\"t\":\"Map<String, String> hashMap = new HashMap<>(); Class<? extends Map> hashMapClass = hashMap.getClass(); \"},\"3696\":{\"t\":\"3、Class.forName(“类的全限定名”)：通过类的全限定名获取该类的 Class 对象\"},\"3697\":{\"t\":\"Class<?> hashMap= Class.forName(\\\"java.util.HashMap\\\"); \"},\"3698\":{\"t\":\"拿到 Class对象就可以对它为所欲为了：调用它的方法、获取属性、获取类信息，总之它在你面前就没有隐私了，好羞羞，嘤~。\"},\"3699\":{\"h\":\"二、构造类的实例化对象\",\"a\":\"二、构造类的实例化对象\"},\"3700\":{\"t\":\"通过反射构造一个类的实例方式有2种： 1、Class 对象调用newInstance()方法\"},\"3701\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); HashMap hashMapInstance = (HashMap) hashMapClass.newInstance(); \"},\"3702\":{\"t\":\"注意：即使 HashMap已经显式定义了构造方法，通过 newInstance() 创建的实例中，所有属性值都是对应类型的初始值，因为 newInstance() 构造实例会调用默认无参构造器。\"},\"3703\":{\"t\":\"2、Constructor 构造器调用newInstance()方法\"},\"3704\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); Constructor<?> constructor = hashMapClass.getConstructor(); constructor.setAccessible(true); HashMap newInstance = (HashMap) constructor.newInstance(); \"},\"3705\":{\"t\":\"通过 getConstructor(Object… paramTypes) 方法指定获取指定参数类型的 Constructor， Constructor 调用 newInstance(Object… paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。\"},\"3706\":{\"t\":\"通过Class对象调用 newInstance() 会走默认无参构造方法，如果想通过显式构造方法构造实例，需要提前从Class中调用getConstructor()方法获取对应的构造器，通过构造器去实例化对象。\"},\"3707\":{\"h\":\"三、获取类的所有信息\",\"a\":\"三、获取类的所有信息\"},\"3708\":{\"t\":\"1、获取类中的变量（Field）\"},\"3709\":{\"t\":\"Field[] getFields()：获取类中所有被public修饰的所有变量 Field getField(String name)：根据变量名获取类中的一个变量，该变量必须被public修饰 Field[] getDeclaredFields()：获取类中所有的变量，但无法获取继承下来的变量 Field getDeclaredField(String name)：根据姓名获取类中的某个变量，无法获取继承下来的变量 \"},\"3710\":{\"t\":\"2、获取类中的方法（Method）\"},\"3711\":{\"t\":\"Method[] getMethods()：获取类中被public修饰的所有方法 Method getMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，该方法必须被public修饰 Method[] getDeclaredMethods()：获取所有方法，但无法获取继承下来的方法 Method getDeclaredMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，无法获取继承下来的方法 \"},\"3712\":{\"t\":\"3、获取类的构造器（Constructor）\"},\"3713\":{\"t\":\"Constuctor[] getConstructors()：获取类中所有被public修饰的构造器 Constructor getConstructor(Class…<?> paramTypes)：根据参数类型获取类中某个构造器，该构造器必须被public修饰 Constructor[] getDeclaredConstructors()：获取类中所有构造器 Constructor getDeclaredConstructor(class…<?> paramTypes)：根据参数类型获取对应的构造器 \"},\"3714\":{\"t\":\"反射的应用场景\"},\"3715\":{\"t\":\"1、Spring 实例化对象：当程序启动时，Spring 会读取配置文件applicationContext.xml并解析出里面所有的标签实例化到IOC容器中。 2、反射 + 工厂模式：通过反射消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，反射可以使得程序更加健壮。 3、JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的驱动类时用到反射加载驱动类 \"},\"3716\":{\"t\":\"参考：https://blog.csdn.net/qq_33709582/article/details/113550163\"},\"3717\":{\"h\":\"List\",\"a\":\"list\"},\"3718\":{\"h\":\"Set\",\"a\":\"set\"},\"3719\":{\"h\":\"Map\",\"a\":\"map\"},\"3720\":{\"h\":\"为什么JDK1.8中HashMap从头插入改成尾插入\",\"a\":\"为什么jdk1-8中hashmap从头插入改成尾插入\"},\"3721\":{\"t\":\"原文链接：https://blog.csdn.net/qq_35590459/article/details/108988011\"},\"3722\":{\"t\":\"JDK1.7中扩容时，每个元素的rehash之后，都会插入到新数组对应索引的链表头，所以这就导致原链表顺序为A->B->C，扩容之后，rehash之后的链表可能为C->B->A，元素的顺序发生了变化。在并发场景下，扩容时可能会出现循环链表的情况。而JDK1.8从头插入改成尾插入元素的顺序不变，避免出现循环链表的情况。\"},\"3723\":{\"h\":\"为什么JDK1.8采用红黑树存储 Hash 冲突的元素？\",\"a\":\"为什么jdk1-8采用红黑树存储hash冲突的元素\"},\"3724\":{\"t\":\"红黑树本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为O(log n)。能够加快检索速率。\"},\"3725\":{\"h\":\"为什么在长度小于8时使用链表，不一直使用红黑树？\",\"a\":\"为什么在长度小于8时使用链表-不一直使用红黑树\"},\"3726\":{\"t\":\"桶中元素的插入只会在hash冲突时发生，而hash冲突发生的概率较小，一直维护一个红黑树比链表耗费资源更多，在桶中元素量较小时没有这个必要。\"},\"3727\":{\"h\":\"为什么要使用红黑树而不使用AVL树？\",\"a\":\"为什么要使用红黑树而不使用avl树\"},\"3728\":{\"t\":\"红黑树与AVLl树，在检索的时候效率差不多，都是通过平衡来二分查找。但红黑树不像avl树一样追求绝对的平衡，红黑树允许局部很少的不完全平衡，这样对于效率影响不大，但省去了很多没有必要的调平衡操作，avl树调平衡有时候代价较大，所以效率不如红黑树。\"},\"3729\":{\"h\":\"为什么数组容量必须是2次幂？\",\"a\":\"为什么数组容量必须是2次幂\"},\"3730\":{\"t\":\"索引计算公式为i = (n - 1) & hash，如果n为2次幂，那么n-1的低位就全是1，哈希值进行与操作时可以保证低位的值不变，从而保证分布均匀，效果等同于hash%n，但是位运算比取余运算要高效的多。\"},\"3731\":{\"h\":\"为什么单链表转为红黑树要求桶内的元素个数大于8？\",\"a\":\"为什么单链表转为红黑树要求桶内的元素个数大于8\"},\"3732\":{\"t\":\"当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，而一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件。\"},\"3733\":{\"t\":\"同理，少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗，而选择8作为临界值，是因理想情况下一个bin中元素个数达到6的概率是0.00001316，达到7的概率为0.00000094，二者跨度较大，可以减小树和链表之间频繁转化的可能性。\"},\"3734\":{\"h\":\"数据结构\",\"a\":\"数据结构\"},\"3735\":{\"h\":\"数组\",\"a\":\"数组\"},\"3736\":{\"h\":\"链表\",\"a\":\"链表\"},\"3737\":{\"h\":\"栈\",\"a\":\"栈\"},\"3738\":{\"h\":\"队列\",\"a\":\"队列\"},\"3739\":{\"h\":\"二叉树\",\"a\":\"二叉树\"},\"3740\":{\"h\":\"红黑树\",\"a\":\"红黑树\"},\"3741\":{\"h\":\"1.简介\",\"a\":\"_1-简介\"},\"3742\":{\"t\":\"红黑树是一种自平衡的二叉查找树，是一种高效的查找树。红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作。\"},\"3743\":{\"h\":\"2.为什么需要红黑树？\",\"a\":\"_2-为什么需要红黑树\"},\"3744\":{\"t\":\"对于二叉搜索树，如果插入的数据是随机的，那么它就是接近平衡的二叉树，平衡的二叉树，它的操作效率（查询，插入，删除）效率较高，时间复杂度是O（logN）。但是可能会出现一种极端的情况，那就是插入的数据是有序的（递增或者递减），那么所有的节点都会在根节点的右侧或左侧，此时，二叉搜索树就变为了一个链表，它的操作效率就降低了，时间复杂度为O(N)，所以可以认为二叉搜索树的时间复杂度介于O（logN）和O(N)之间，视情况而定。那么为了应对这种极端情况，红黑树就出现了，它是具备了某些特性的二叉搜索树，能解决非平衡树问题，红黑树是一种接近平衡的二叉树（说它是接近平衡因为它并没有像AVL树的平衡因子的概念，它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构，进而提升整体的性能，并没有严格的卡定某个平衡因子来维持绝对平衡）。\"},\"3745\":{\"h\":\"3.红黑树的特性\",\"a\":\"_3-红黑树的特性\"},\"3746\":{\"t\":\"首先，红黑树是一个二叉搜索树，它在每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK；通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡（最短路径就是全黑节点，最长路径就是一个红节点一个黑节点，当从根节点到叶子节点的路径上黑色节点相同时，最长路径刚好是最短路径的两倍）。它同时满足以下特性：\"},\"3747\":{\"t\":\"节点是红色或黑色\"},\"3748\":{\"t\":\"根是黑色\"},\"3749\":{\"t\":\"叶子节点（外部节点，空节点）都是**黑色，**这里的叶子节点指的是最底层的空节点（外部节点），下图中的那些null节点才是叶子节点，null节点的父节点在红黑树里不将其看作叶子节点\"},\"3750\":{\"t\":\"红色节点的子节点都是黑色；\"},\"3751\":{\"t\":\"红色节点的父节点都是黑色；\"},\"3752\":{\"t\":\"从根节点到叶子节点的所有路径上不能有 2 个连续的红色节点\"},\"3753\":{\"t\":\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\"},\"3754\":{\"t\":\"img\"},\"3755\":{\"h\":\"4.红黑树的效率\",\"a\":\"_4-红黑树的效率\"},\"3756\":{\"t\":\"红黑树的查找，插入和删除操作，时间复杂度都是O(logN)。\"},\"3757\":{\"t\":\"查找操作时，它和普通的相对平衡的二叉搜索树的效率相同，都是通过相同的方式来查找的，没有用到红黑树特有的特性。\"},\"3758\":{\"t\":\"但如果插入的时候是有序数据，那么红黑树的查询效率就比二叉搜索树要高了，因为此时二叉搜索树不是平衡树，它的时间复杂度O(N)。\"},\"3759\":{\"t\":\"插入和删除操作时，由于红黑树的每次操作平均要旋转一次和变换颜色，所以它比普通的二叉搜索树效率要低一点，不过时间复杂度仍然是O(logN)。总之，红黑树的优点就是对有序数据的查询操作不会慢到O(N)的时间复杂度。\"},\"3760\":{\"t\":\"红黑树和AVL树的比较：\"},\"3761\":{\"t\":\"AVL树的时间复杂度虽然优于红黑树，但是对于现在的计算机，cpu太快，可以忽略性能差异\"},\"3762\":{\"t\":\"红黑树的插入删除比AVL树更便于控制操作\"},\"3763\":{\"t\":\"红黑树整体性能略优于AVL树（红黑树旋转情况少于AVL树）\"},\"3764\":{\"h\":\"哈希表结构\",\"a\":\"哈希表结构\"},\"3765\":{\"h\":\"常见的设计模式\",\"a\":\"常见的设计模式\"},\"3766\":{\"h\":\"软件设计原则有哪些？\",\"a\":\"软件设计原则有哪些\"},\"3767\":{\"h\":\"什么是设计模式？\",\"a\":\"什么是设计模式\"},\"3768\":{\"t\":\"设计模式（Design pattern）代表了最佳的实践，通常被有经验的⾯向对象的软件开发⼈员所采⽤。设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案。这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的。\"},\"3769\":{\"t\":\"分为三大类：\"},\"3770\":{\"t\":\"创建型： 在创建对象的同时隐藏创建逻辑，不使⽤ new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括⼯⼚/抽象⼯⼚/单例/建造者/原型模式。 结构型： 通过类和接⼝间的继承和引⽤实现创建复杂结构的对象。包括适配器/桥接模式/过滤器/组合/装饰器/外观/享元/代理模式。 行为型： 通过类之间不同通信⽅式实现不同⾏为。包括责任链/命名/解释器/迭代器/中介者/备忘录/观察者/状态/策略/模板/访问者模式。\"},\"3771\":{\"h\":\"单例模式\",\"a\":\"单例模式\"},\"3772\":{\"t\":\"单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，构造⽅法必须是私有的、由自己创建⼀个静态变量存储实例，对外提供⼀个静态公有方法获取实例。\"},\"3773\":{\"t\":\"双重检查锁（DCL， 即 double-checked locking） 实现代码如下：\"},\"3774\":{\"t\":\"public class Singleton { // 1、私有化构造⽅法 private Singleton() { } // 2、定义⼀个静态变量指向⾃⼰类型 private volatile static Singleton instance; // 3、对外提供⼀个公共的⽅法获取实例 public static Singleton getInstance() { // 第⼀重检查是否为 null if (instance == null) { // 使⽤ synchronized 加锁 synchronized (Singleton.class) { // 第⼆重检查是否为 null if (instance == null) { // new 关键字创建对象不是原⼦操作 instance = new Singleton(); } } } return instance; } } \"},\"3775\":{\"t\":\"优点：懒加载，线程安全，效率较⾼缺点：实现较复杂 这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单例。关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返回已创建的单例对象。\"},\"3776\":{\"h\":\"工厂模式\",\"a\":\"工厂模式\"},\"3777\":{\"h\":\"说⼀说简单⼯⼚模式：\",\"a\":\"说一说简单工厂模式\"},\"3778\":{\"t\":\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数。\"},\"3779\":{\"t\":\"适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较复杂。\"},\"3780\":{\"t\":\"Spring 中的 BeanFactory 使⽤简单⼯⼚模式，根据传⼊⼀个唯⼀的标识来获得 Bean 对象。\"},\"3781\":{\"h\":\"⼯⼚⽅法模式了解吗：\",\"a\":\"工厂方法模式了解吗\"},\"3782\":{\"t\":\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐，⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚。\"},\"3783\":{\"t\":\"也就是定义⼀个抽象⼯⼚，其定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。这样不⽤通过指定类型来创建对象了。\"},\"3784\":{\"h\":\"抽象⼯⼚模式了解吗：\",\"a\":\"抽象工厂模式了解吗\"},\"3785\":{\"t\":\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象，都只是针对⼀类产品，如果要⽣成另⼀种产品，就⽐较难办了！抽象⼯⼚模式通过在 AbstarctFactory 中增加创建产品的接⼝，并在具体⼦⼯⼚中实现新加产品的创建，当然前提是⼦⼯⼚⽀持⽣产该产品。否则继承的这个接⼝可以什么也不⼲。\"},\"3786\":{\"h\":\"装饰器模式\",\"a\":\"装饰器模式\"},\"3787\":{\"h\":\"代理模式\",\"a\":\"代理模式\"},\"3788\":{\"h\":\"什么是代理模式？\",\"a\":\"什么是代理模式\"},\"3789\":{\"t\":\"代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制，是⼀种结构性模式。\"},\"3790\":{\"h\":\"静态代理和动态代理的区别：\",\"a\":\"静态代理和动态代理的区别\"},\"3791\":{\"t\":\"灵活性 ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。另外，静态代理中，接⼝⼀旦新增加⽅法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！\"},\"3792\":{\"t\":\"JVM 层⾯ ：静态代理在编译时就将接⼝、实现类、代理类这些都变成了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节码，并加载到 JVM 中的。\"},\"3793\":{\"h\":\"静态代理：\",\"a\":\"静态代理\"},\"3794\":{\"t\":\"静态代理中，我们对目标对象的每个方法的增强都是手动完成的（*后面会具体演示代码*），非常不灵活（*比如接口一旦新增加方法，目标对象和代理对象都要进行修改*）且麻烦(*需要对每个目标类都单独写一个代理类*）。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\"},\"3795\":{\"t\":\"上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\"},\"3796\":{\"h\":\"动态代理：\",\"a\":\"动态代理\"},\"3797\":{\"t\":\"相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。\"},\"3798\":{\"t\":\"从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\"},\"3799\":{\"t\":\"说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\"},\"3800\":{\"t\":\"动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\"},\"3801\":{\"t\":\"就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\"},\"3802\":{\"h\":\"JDK 动态代理机制\",\"a\":\"jdk-动态代理机制\"},\"3803\":{\"t\":\"在 Java 动态代理机制中 InvocationHandler 接口和 Proxy 类是核心。\"},\"3804\":{\"t\":\"Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\"},\"3805\":{\"t\":\" public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException { ...... } 这个方法一共有 3 个参数： loader :类加载器，用于加载代理对象。 interfaces : 被代理类实现的一些接口； h : 实现了 InvocationHandler 接口的对象； \"},\"3806\":{\"t\":\"要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\"},\"3807\":{\"t\":\"public interface InvocationHandler { /** * 当你使用代理对象调用方法的时候实际会调用到这个方法 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; } invoke() 方法有下面三个参数： proxy :动态生成的代理类 method : 与代理类对象调用的方法相对应 args : 当前 method 方法的参数 \"},\"3808\":{\"t\":\"也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\"},\"3809\":{\"h\":\"CGLIB 动态代理机制\",\"a\":\"cglib-动态代理机制\"},\"3810\":{\"t\":\"JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。\"},\"3811\":{\"t\":\"为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\"},\"3812\":{\"t\":\"CGLIBCode Generation Library)允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\"},\"3813\":{\"t\":\"在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\"},\"3814\":{\"t\":\"你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\"},\"3815\":{\"t\":\"public interface MethodInterceptor extends Callback{ // 拦截被代理类中的方法 public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy) throws Throwable; } obj : 被代理的对象（需要增强的对象） method : 被拦截的方法（需要增强的方法） args : 方法入参 proxy : 用于调用原始方法 \"},\"3816\":{\"t\":\"你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\"},\"3817\":{\"h\":\"JDK 动态代理和 CGLIB 动态代理对比：\",\"a\":\"jdk-动态代理和-cglib-动态代理对比\"},\"3818\":{\"t\":\"JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\"},\"3819\":{\"t\":\"就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\"},\"3820\":{\"h\":\"框架\"},\"3821\":{\"h\":\"四：Java高级：Spring、SpringMVC、Spring Boot、MyBatis\",\"a\":\"四-java高级-spring、springmvc、spring-boot、mybatis\"},\"3822\":{\"h\":\"AOP和IOC概念\",\"a\":\"aop和ioc概念\"},\"3823\":{\"t\":\"AOP：AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。\"},\"3824\":{\"t\":\"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理。\"},\"3825\":{\"t\":\"IOC： 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。\"},\"3826\":{\"t\":\"为什么叫控制反转？\"},\"3827\":{\"t\":\"控制 ：指的是对象创建（实例化、管理）的权力\"},\"3828\":{\"t\":\"反转 ：控制权交给外部环境（Spring 框架、IoC 容器）\"},\"3829\":{\"h\":\"Bean的生命周期\",\"a\":\"bean的生命周期\"},\"3830\":{\"h\":\"MVC的基本流程\",\"a\":\"mvc的基本流程\"},\"3831\":{\"t\":\"简单来说：客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler -> HandlerAdapter 会根据 Handler 来调用真正的处理器来处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象 -> 前端控制器 DispatcherServlet 渲染数据（Model）-> 将得到视图对象返回给用户。\"},\"3832\":{\"t\":\"image-20210608002334025\"},\"3833\":{\"t\":\"上图用于辅助理解，面试时可用下列 8 步描述 SpringMVC 运行流程：\"},\"3834\":{\"t\":\"用户向服务器发送请求，请求被 Spring 前端控制Servelt DispatcherServlet 捕获；\"},\"3835\":{\"t\":\"DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 对象的形式返回；\"},\"3836\":{\"t\":\"DispatcherServlet 根据获得的 Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得 HandlerAdapter 后，此时将开始执行拦截器的 preHandler(…)方法）\"},\"3837\":{\"t\":\"提取 Request 中的模型数据，填充 Handler 入参，开始执行Handler（Controller)。在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\"},\"3838\":{\"t\":\"（1）HttpMessageConveter：将请求消息（如：Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息；\"},\"3839\":{\"t\":\"（2）数据转换：对请求消息进行数据转换。如：String 转换成 Integer、Double 等；\"},\"3840\":{\"t\":\"（3）数据格式化：对请求消息进行数据格式化。如：将字符串转换成格式化数字或格式化日期等；\"},\"3841\":{\"t\":\"（4）数据验证：验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中;\"},\"3842\":{\"t\":\"5.Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象；\"},\"3843\":{\"t\":\"6.根据返回的 ModelAndView，选择一个适合的 ViewResolver（必须是已经注册到 Spring 容器中的 ViewResolver)返回给DispatcherServlet；\"},\"3844\":{\"t\":\"7.ViewResolver 结合 Model 和 View，来渲染视图；\"},\"3845\":{\"t\":\"8.将渲染结果返回给客户端。\"},\"3846\":{\"h\":\"Spring的设计模式\",\"a\":\"spring的设计模式\"},\"3847\":{\"t\":\"工厂设计模式 : Spring 使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象；\"},\"3848\":{\"t\":\"代理设计模式 : Spring AOP 功能的实现；\"},\"3849\":{\"t\":\"单例设计模式 : Spring 中的 Bean 默认都是单例的；\"},\"3850\":{\"t\":\"模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式；\"},\"3851\":{\"t\":\"包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源；\"},\"3852\":{\"t\":\"观察者模式：Spring 事件驱动模型就是观察者模式很经典的一个应用；\"},\"3853\":{\"t\":\"适配器模式：Spring AOP 的增强或通知(Advice)使用到了适配器模式、SpringMVC 中也是用到了适配器模式适配 Controller。\"},\"3854\":{\"h\":\"Spring事务机制\",\"a\":\"spring事务机制\"},\"3855\":{\"h\":\"谈谈你对 Spring 中的事务的理解？\",\"a\":\"谈谈你对-spring-中的事务的理解\"},\"3856\":{\"t\":\"事务是逻辑上的一组操作，要么都执行，要么都不执行。\"},\"3857\":{\"t\":\"事务特性\"},\"3858\":{\"t\":\"原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\"},\"3859\":{\"t\":\"一致性：执行事务前后，数据保持一致；\"},\"3860\":{\"t\":\"隔离性：并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\"},\"3861\":{\"t\":\"持久性: 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\"},\"3862\":{\"t\":\"Spring 事务管理接口\"},\"3863\":{\"t\":\"PlatformTransactionManager：（平台）事务管理器；\"},\"3864\":{\"t\":\"TransactionDefinition：事务定义信息（事务隔离级别、传播行为、超时、只读、回滚规则）；\"},\"3865\":{\"t\":\"TransactionStatus：事务运行状态；\"},\"3866\":{\"t\":\"所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。\"},\"3867\":{\"h\":\"Spring 中的事务隔离级别？\",\"a\":\"spring-中的事务隔离级别\"},\"3868\":{\"t\":\"TransactionDefinition 接口中定义了五个表示隔离级别的常量：\"},\"3869\":{\"t\":\"TransactionDefinition.ISOLATION_DEFAULT：使用后端数据库默认的隔离级别，MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED 隔离级别；\"},\"3870\":{\"t\":\"TransactionDefinition.ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读；\"},\"3871\":{\"t\":\"TransactionDefinition.ISOLATION_READ_COMMITTED：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生；\"},\"3872\":{\"t\":\"TransactionDefinition.ISOLATION_REPEATABLE_READ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生；\"},\"3873\":{\"t\":\"TransactionDefinition.ISOLATION_SERIALIZABLE：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\"},\"3874\":{\"h\":\"Spring 中的事物传播行为？\",\"a\":\"spring-中的事物传播行为\"},\"3875\":{\"t\":\"事务传播行为是为了解决业务层方法之间互相调用的事务问题。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在 TransactionDefinition 定义中包括了如下几个表示传播行为的常量：\"},\"3876\":{\"t\":\"支持当前事务的情况：\"},\"3877\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务；\"},\"3878\":{\"t\":\"TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行；\"},\"3879\":{\"t\":\"TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\"},\"3880\":{\"t\":\"不支持当前事务的情况：\"},\"3881\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起；\"},\"3882\":{\"t\":\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\"},\"3883\":{\"t\":\"TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\"},\"3884\":{\"t\":\"其他情况：\"},\"3885\":{\"t\":\"TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 TransactionDefinition.PROPAGATION_REQUIRED。\"},\"3886\":{\"h\":\"Spring如何解决循环依赖问题？\",\"a\":\"spring如何解决循环依赖问题\"},\"3887\":{\"t\":\"了解问题的本质再分析问题，往往更利于对问题有更深入的了解和研究。所以我们在分析 Spring 关于循环依赖的源码之前，先要了解下什么是循环依赖。\"},\"3888\":{\"t\":\"1. 循环依赖的概念\"},\"3889\":{\"t\":\"img\"},\"3890\":{\"t\":\"循环依赖分为三种，自身依赖于自身、互相循环依赖、多组循环依赖。\"},\"3891\":{\"t\":\"但无论循环依赖的数量有多少，循环依赖的本质是一样的。就是你的完整创建依赖于我，而我的完整创建也依赖于你，但我们互相没法解耦，最终导致依赖创建失败。\"},\"3892\":{\"t\":\"所以 Spring 提供了除了构造函数注入和原型注入外的，setter循环依赖注入解决方案。那么我们也可以先来尝试下这样的依赖，如果是我们自己处理的话该怎么解决。\"},\"3893\":{\"t\":\"2. 问题体现\"},\"3894\":{\"t\":\"public class ABTest { public static void main(String[] args) { new ClazzA(); } } class ClazzA { private ClazzB b = new ClazzB(); } class ClazzB { private ClazzA a = new ClazzA(); } \"},\"3895\":{\"t\":\"3.解决方案\"},\"3896\":{\"t\":\"整个解决循环依赖的核心内容，A 创建后填充属性时依赖 B，那么就去创建 B，在创建 B 开始填充时发现依赖于 A，但此时 A 这个半成品对象已经存放在缓存到singletonObjects 中了，所以 B 可以正常创建，在通过递归把 A 也创建完整了。\"},\"3897\":{\"t\":\"4.Spring解决\"},\"3898\":{\"t\":\"（1）一级缓存能解决吗？\"},\"3899\":{\"t\":\"img\"},\"3900\":{\"t\":\"其实只有一级缓存并不是不能解决循环依赖，就像我们自己做的例子一样。\"},\"3901\":{\"t\":\"但是在 Spring 中如果像我们例子里那么处理，就会变得非常麻烦，而且也可能会出现 NPE 问题。\"},\"3902\":{\"t\":\"所以如图按照 Spring 中代码处理的流程，我们去分析一级缓存这样存放成品 Bean 的流程中，是不能解决循环依赖的问题的。因为 A 的成品创建依赖于 B，B的成品创建又依赖于 A，当需要补全B的属性时 A 还是没有创建完，所以会出现死循环。\"},\"3903\":{\"t\":\"（2） 二级缓存能解决吗？\"},\"3904\":{\"t\":\"img\"},\"3905\":{\"t\":\"有了二级缓存其实这个事处理起来就容易了，一个缓存用于存放成品对象，另外一个缓存用于存放半成品对象。\"},\"3906\":{\"t\":\"A 在创建半成品对象后存放到缓存中，接下来补充 A 对象中依赖 B 的属性。\"},\"3907\":{\"t\":\"B 继续创建，创建的半成品同样放到缓存中，在补充对象的 A 属性时，可以从半成品缓存中获取，现在 B 就是一个完整对象了，而接下来像是递归操作一样 A 也是一个完整对象了。\"},\"3908\":{\"t\":\"（3） 三级缓存解决什么？\"},\"3909\":{\"t\":\"img\"},\"3910\":{\"t\":\"有了二级缓存都能解决 Spring 依赖了，怎么要有三级缓存呢。其实我们在前面分析源码时也提到过，三级缓存主要是解决 Spring AOP 的特性。AOP 本身就是对方法的增强，是 ObjectFactory<?> 类型的 lambda 表达式，而 Spring 的原则又不希望将此类类型的 Bean 前置创建，所以要存放到三级缓存中处理。\"},\"3911\":{\"t\":\"其实整体处理过程类似，唯独是 B 在填充属性 A 时，先查询成品缓存、再查半成品缓存，最后在看看有没有单例工程类在三级缓存中。最终获取到以后调用 getObject 方法返回代理引用或者原始引用。\"},\"3912\":{\"t\":\"至此也就解决了 Spring AOP 所带来的三级缓存问题。本章节涉及到的 AOP 依赖有源码例子，可以进行调试\"},\"3913\":{\"t\":\"（4）总结\"},\"3914\":{\"t\":\"回顾本文基本以实际操作的例子开始，引导大家对循环依赖有一个整体的认识，也对它的解决方案可以上手的例子，这样对后续的关于 Spring 对循环依赖的解决也就不会那么陌生了。\"},\"3915\":{\"t\":\"通篇全文下来大家也可以看到，三级缓存并不是非必须不可，只不过在满足 Spring 自身创建的原则下，是必须的。如果你可以下载 Spring 源码对这部分代码进行改动下，提前创建 AOP 对象保存到缓存中，那么二级缓存一样可以解决循环依赖问题。\"},\"3916\":{\"h\":\"Spring Boot自动配置原理\",\"a\":\"spring-boot自动配置原理\"},\"3917\":{\"t\":\"在Spring程序main方法中，添加@SpringBootApplication或者@EnableAutoConfiguration会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建的Spring容器中的bean。Spring Boot 通过@EnableAutoConfiguration开启自动装配，通过 SpringFactoriesLoader 最终加载META-INF/spring.factories中的自动配置类实现自动装配，自动配置类其实就是通过@Conditional按需加载的配置类，想要其生效必须引入spring-boot-starter-xxx包实现起步依赖。\"},\"3918\":{\"t\":\"第 1 步: 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true，可在 application.properties 或 application.yml 中设置 \"},\"3919\":{\"t\":\"img\"},\"3920\":{\"t\":\"第 2 步 ： 用于获取EnableAutoConfiguration注解中的 exclude 和 excludeName。 \"},\"3921\":{\"t\":\"img\"},\"3922\":{\"t\":\"第 3 步： 获取需要自动装配的所有配置类，读取META-INF/spring.factories： spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories \"},\"3923\":{\"t\":\"img\"},\"3924\":{\"t\":\"从下图可以看到这个文件的配置内容都被我们读取到了。XXXAutoConfiguration的作用就是按需加载组件。 不光是这个依赖下的META-INF/spring.factories被读取到，所有 Spring Boot Starter 下的META-INF/spring.factories都会被读取到。 \"},\"3925\":{\"t\":\"img\"},\"3926\":{\"t\":\"参考：https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html#autoconfigurationimportselector-加载自动装配类\"},\"3927\":{\"h\":\"Spring Boot 加载配置文件的优先级了解么？\",\"a\":\"spring-boot-加载配置文件的优先级了解么\"},\"3928\":{\"t\":\"项目启动后扫描顺序：\"},\"3929\":{\"t\":\"1）先去项目根目录找config文件夹下找配置文件件 2）再去根目录下找配置文件 3）去resources下找cofnig文件夹下找配置文件 4）去resources下找配置文件\"},\"3930\":{\"t\":\"在这里插入图片描述\"},\"3931\":{\"h\":\"如何使用 Spring Boot 实现全局异常处理？\",\"a\":\"如何使用-spring-boot-实现全局异常处理\"},\"3932\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485568&idx=2&sn=c5ba880fd0c5d82e39531fa42cb036ac&chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&token=1729829670&lang=zh_CN#rd\"},\"3933\":{\"t\":\"使用 @ControllerAdvice 和 @ExceptionHandler 处理全局异常\"},\"3934\":{\"t\":\"@ExceptionHandler 处理 Controller 级别的异常\"},\"3935\":{\"t\":\"例子：\"},\"3936\":{\"t\":\"CustomException： public class CustomException extends RuntimeException { private AppHttpCodeEnum appHttpCodeEnum; public CustomException(AppHttpCodeEnum appHttpCodeEnum){ this.appHttpCodeEnum = appHttpCodeEnum; } public AppHttpCodeEnum getAppHttpCodeEnum() { return appHttpCodeEnum; } } \"},\"3937\":{\"t\":\"ExceptionCatch： @ControllerAdvice //控制器增强类 @Slf4j public class ExceptionCatch { /** * 处理不可控异常 * @param e * @return */ @ExceptionHandler(Exception.class) @ResponseBody public ResponseResult exception(Exception e){ e.printStackTrace(); log.error(\\\"catch exception:{}\\\",e.getMessage()); return ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR); } /** * 处理可控异常 自定义异常 * @param e * @return */ @ExceptionHandler(CustomException.class) @ResponseBody public ResponseResult exception(CustomException e){ log.error(\\\"catch exception:{}\\\",e); return ResponseResult.errorResult(e.getAppHttpCodeEnum()); } } \"},\"3938\":{\"h\":\"核心配置文件\",\"a\":\"核心配置文件\"},\"3939\":{\"t\":\"SpringBoot的核心配置文件是application和bootstrap配置文件。\"},\"3940\":{\"t\":\"application配置文件这个容易理解，主要用于Spring Boot项目的自动化配置。\"},\"3941\":{\"t\":\"bootstrap配置文件有以下几个应用场景：\"},\"3942\":{\"t\":\"使用Spring Cloud Config配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；\"},\"3943\":{\"t\":\"一些固定的不能被覆盖的属性；\"},\"3944\":{\"t\":\"一些加密/解密的场景；\"},\"3945\":{\"h\":\"实现热部署的方式\",\"a\":\"实现热部署的方式\"},\"3946\":{\"t\":\"这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。\"},\"3947\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> </dependency> \"},\"3948\":{\"h\":\"监视器和监听器\",\"a\":\"监视器和监听器\"},\"3949\":{\"h\":\"监听器\",\"a\":\"监听器\"},\"3950\":{\"t\":\"监听器也叫listener，是servlet的监听器，可以用于监听web应用程序中某些对象的创建、销毁、增加、修改、删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化时，服务器自动调用监听器对象中的方法，常用于系统加载时进行信息初始化，统计在线人数和在线用户，统计网站的访问量。 配置监听器的方法：\"},\"3951\":{\"t\":\"通过@Component把监听器加入Spring容器中管理;\"},\"3952\":{\"t\":\"在application.properties中添加context.listener.classes配置;\"},\"3953\":{\"t\":\"在方法上加@EventListener注解;\"},\"3954\":{\"h\":\"监控器\",\"a\":\"监控器\"},\"3955\":{\"t\":\"actuator\"},\"3956\":{\"t\":\" 这是springboot程序的监控系统，可以实现健康检查，info信息等。在使用之前需要引入`spring-boot-starter-actuator`，并做简单的配置即可。 引入依赖并编写好配置之后，启动项目，访问http://localhost:8080/actuator \"},\"3957\":{\"t\":\"Spring Boot自带监控组件—Actuator，它可以帮助实现对程序内部运行情况的监控。Actuator轻松实现应用程序的监控治理，比如健康状况、审计、统计和HTTP追踪、Bean加载情况、环境变量、日志信息、线程信息等。 Actuator的核心是端点（Endpoint），它用来监视、提供应用程序的信息，Spring Boot提供的spring-boot-actuator组件中已经内置了非常多的Endpoint（health、info、beans、metrics、httptrace、shutdown等），每个端点都可以启用和禁用。\"},\"3958\":{\"h\":\"什么是Spring Boot Starter？有哪些常用的？\",\"a\":\"什么是spring-boot-starter-有哪些常用的\"},\"3959\":{\"t\":\"和自动配置一样，Spring Boot Starter的目的也是简化配置，而Spring Boot Starter解决的是依赖管理配置复杂的问题，有了它，当我需要构建一个Web应用程序时，不必再遍历所有的依赖包，一个一个地添加到项目的依赖管理中，而是只需要一个配置spring-boot-starter-web。\"},\"3960\":{\"t\":\"常用的：\"},\"3961\":{\"t\":\"spring-boot-starter-web - Web 和 RESTful 应用程序\"},\"3962\":{\"t\":\"spring-boot-starter-test - 单元测试和集成测试\"},\"3963\":{\"t\":\"spring-boot-starter-parent有什么作用？\"},\"3964\":{\"t\":\"我们知道，新建一个SpringBoot项目，默认都是有parent的，这个parent就是spring-boot-starter-parent，spring-boot-starter-parent主要有如下作用：\"},\"3965\":{\"t\":\"定义了Java编译版本\"},\"3966\":{\"t\":\"使用UTF-8格式编码\"},\"3967\":{\"t\":\"继承自spring-boor-dependencies，这里面定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号\"},\"3968\":{\"t\":\"执行打包操作的配置\"},\"3969\":{\"t\":\"自动化的资源过滤\"},\"3970\":{\"t\":\"自动化的插件配置\"},\"3971\":{\"h\":\"Spring Boot四大核心组件\",\"a\":\"spring-boot四大核心组件\"},\"3972\":{\"t\":\"四大组件分别是：starter， autoconfigure, CLI 以及actuator。\"},\"3973\":{\"t\":\"autoconfigure在我们的开发中并不会被感知，因为它是存在与我们的starter中的。所以我们的每个starter都是依赖autoconfigure的。\"},\"3974\":{\"t\":\"Spring Boot CLI是一个命令行使用Spring Boot的客户端工具；主要功能如下：\"},\"3975\":{\"t\":\"运行groovy脚本 => 官网2.1\"},\"3976\":{\"t\":\"打包groovy文件到jar => 官网2.3\"},\"3977\":{\"t\":\"初始化Spring Boot项目 => 官网2.4\"},\"3978\":{\"t\":\"其他\"},\"3979\":{\"t\":\"actuator是Spring Boot的监控插件，本身提供了很多接口可以获取当前项目的各项运行状态指标。\"},\"3980\":{\"h\":\"MyBatis Dao接口原理\",\"a\":\"mybatis-dao接口原理\"},\"3981\":{\"h\":\"MyBatis分页原理\",\"a\":\"mybatis分页原理\"},\"3982\":{\"t\":\"img\"},\"3983\":{\"t\":\"总结一下：\"},\"3984\":{\"t\":\"通过page对象作为分页依据\"},\"3985\":{\"t\":\"通过count来进行查询总条数的限制\"},\"3986\":{\"t\":\"对原sql通过limit来进行分页的效果\"},\"3987\":{\"t\":\"参考：https://blog.csdn.net/xiaolegeaizy/article/details/108461284\"},\"3988\":{\"h\":\"MyBatis 是如何进行分页的？分页插件的原理是什么？\",\"a\":\"mybatis-是如何进行分页的-分页插件的原理是什么\"},\"3989\":{\"t\":\"答：\"},\"3990\":{\"t\":\"(1) MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；\"},\"3991\":{\"t\":\"(2) 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能；\"},\"3992\":{\"t\":\"(3) 也可以使用分页插件来完成物理分页。\"},\"3993\":{\"t\":\"分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。\"},\"3994\":{\"t\":\"举例： select _ from student ，拦截 sql 后重写为： select t._ from （select \\\\* from student）t limit 0，10 \"},\"3995\":{\"t\":\"MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 invoke() 方法，当然，只会拦截那些指定需要拦截的方法。\"},\"3996\":{\"t\":\"实现 MyBatis 的 Interceptor 接口并复写 intercept() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，在配置文件中配置编写的插件。\"},\"3997\":{\"h\":\"MyBatis缓存机制(一级缓存、二级缓存、三级缓存)\",\"a\":\"mybatis缓存机制-一级缓存、二级缓存、三级缓存\"},\"3998\":{\"h\":\"一级缓存：\",\"a\":\"一级缓存\"},\"3999\":{\"t\":\"作用域是同一个 SqlSession，在同一个 sqlSession 中两次执行相同的 sql 语句， 第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取,从而提高查询效率。当一个 sqlSession 结束后该 sqlSession 中的 一级缓存也就不存在了。Mybatis 默认开启一级缓存。 一级缓存内部存储使用一个 HashMap，key 为 hashCode+sqlId+Sql 语句。value 为 从查询出来映射生成的 java 对象 sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。\"},\"4000\":{\"h\":\"二级缓存：\",\"a\":\"二级缓存\"},\"4001\":{\"t\":\"是多个 SqlSession 共享的，其作用域是 mapper 的同一个 namespace，不同 的 sqlSession 两次执行相同 namespace 下的 sql 语句且向 sql 中传递参数也相同即最终执行 相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从 缓存中获取数据将不再从数据库查询，从而提高查询效率。Mybatis 默认没有开启二级缓存 需要在 setting 全局参数中配置开启二级缓存。\"},\"4002\":{\"t\":\"在yml中添加以下代码：\"},\"4003\":{\"t\":\"在这里插入图片描述\"},\"4004\":{\"t\":\"然后在对应的mapper.xml里面加入配置：\"},\"4005\":{\"t\":\"在这里插入图片描述\"},\"4006\":{\"t\":\"注意：开启二级缓存后，对应的pojo一定要实现Serializable，否则在序列化的时候会报错。 readOnly：是否只读 。 值为true时，mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为了加快获取速度，直接会将数据在缓存中的引用交给用户，不安全，但速度快。 值为false时，mybatis觉得获取的数据可能会被修改，mybatis会利用序列化&反序列化的技术克隆一份新的数据给你，安全，但速度慢。\"},\"4007\":{\"h\":\"三级缓存：\",\"a\":\"三级缓存\"},\"4008\":{\"t\":\"Mybatis 的一级缓存与二级缓存 只适用于单体项目，在分布式服务或者微服务架构下 都会出现数据不一致问题。所以Mybatis 为我们提供了自定义缓存 我们可以集成很多三方中间件来做缓存 这里就那Redis来说一下。\"},\"4009\":{\"t\":\"在这里插入图片描述\"},\"4010\":{\"h\":\"总结：\",\"a\":\"总结\"},\"4011\":{\"t\":\"一级缓存的作用域是一个sqlsession内；二级缓存作用域是针对mapper进行缓存；\"},\"4012\":{\"t\":\"一级缓存是默认开启的；二级缓存需要手动配置；\"},\"4013\":{\"t\":\"一级缓存sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。sqlSession.close()后一级缓存也没有了。但是销毁sqlSession后会将里面的缓存存到二级缓存中；\"},\"4014\":{\"t\":\"二级缓存cache中readonly属性如果为false 那么相应的pojo类必须实现Serializable接口 并且其缓存查询到的对象都是通过序列化或者反序列化克隆的，所以对象之间两两不相等；\"},\"4015\":{\"t\":\"二级缓存的生命周期和应用同步，它是用来解决一级缓存不能跨会话共享数据的问题，范围是namespace级别的，可以被多个会话共享(只要是同一个接口的相同方法，都可以进行共享)。\"},\"4016\":{\"t\":\"只要没有显式地设置cacheEnabled为false，都会使用CachingExector装饰基本的执行器(SIMPLE、REUSE、BATCH)。 二级缓存总是默认开启的，但是每个Mapper的二级开关是默认关闭的。\"},\"4017\":{\"t\":\"二级缓存进行增删改操作也会刷新二级缓存，导致二级缓存失效；\"},\"4018\":{\"t\":\"二级缓存的执行流程：\"},\"4019\":{\"t\":\"在这里插入图片描述\"},\"4020\":{\"t\":\"参考：https://blog.csdn.net/weixin_45161172/article/details/129526131\"},\"4021\":{\"h\":\"Linux常用命令\"},\"4022\":{\"h\":\"常用的命令\",\"a\":\"常用的命令\"},\"4023\":{\"h\":\"内核\",\"a\":\"内核\"},\"4024\":{\"h\":\"基本组件\",\"a\":\"基本组件\"},\"4025\":{\"h\":\"进程间通信方式\",\"a\":\"进程间通信方式\"},\"4026\":{\"h\":\"目录结构\",\"a\":\"目录结构\"},\"4027\":{\"t\":\"Linux 使用一种称为目录树的层次结构来组织文件和目录。目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。每个目录可以包含文件和其他子目录。结构层次鲜明，就像一棵倒立的树。\"},\"4028\":{\"h\":\"场景问题\"},\"4029\":{\"h\":\"缓存一致性解决\",\"a\":\"缓存一致性解决\"},\"4030\":{\"h\":\"4G数据找系统记录(大数据题)\",\"a\":\"_4g数据找系统记录-大数据题\"},\"4031\":{\"h\":\"很多短任务线程，选择 synchronized 还是 lock（2022-04-11 携程）\",\"a\":\"很多短任务线程-选择-synchronized-还是-lock-2022-04-11-携程\"},\"4032\":{\"t\":\"锁竞争小时，synchronized和lock效率没差，偏向模式下（单线程读写）甚至高于lock，但是并发量上升时锁撤销会大幅影响性能，稳定自适应轻量级锁状态下，线程接近交替运行，或者说短任务线程多，基本一样，因为都是自旋，大量任务并发竞争时，随着任务量的增大，synchronized的效率会远小于lock，因为重量级锁会频繁切换内核态与用户态；大量长任务，只能重量级锁。\"},\"4033\":{\"h\":\"多个人给一个主播打赏怎么设计？（2022-6-3 58同城）\",\"a\":\"多个人给一个主播打赏怎么设计-2022-6-3-58同城\"},\"4034\":{\"t\":\"我说是一个高并发写的操作，对一个记录频繁写，分批操作，比如 10 个记录 操作一次。他说这个方案可以 但是有 100 个记录 怎么去做一个一个操作呢？我说如果在一个进程可以 分多个线程分批。他说还是不够快 我们是用的 MQ 多个消费者 一个打赏就发一个消息\"},\"4035\":{\"h\":\"怎么实现一个点赞功能？\",\"a\":\"怎么实现一个点赞功能\"},\"4036\":{\"t\":\"主要的流程解释下：先查询数据库改用户是否进行点赞，如果已经点赞则抛出异常，如果没有则new一个对象来一个一个Set，然后将已点赞的信息存入redis中，相反，取消点赞的操作就是删除redis中的数据即可，然后通过Dubbo调用API来完成保存操作，因为我这里是还要获取点赞数和评论数啥的，所以会对动态表进行更新操作。\"},\"4037\":{\"h\":\"比如下单清空购物车，你是如何设计的？\",\"a\":\"比如下单清空购物车-你是如何设计的\"},\"4038\":{\"t\":\"生产者（订单系统）产生消息，发送一条半事务消息到MQ服务器\"},\"4039\":{\"t\":\"MQ收到消息后，将消息持久化到存储系统，这条消息的状态是待发送状态。\"},\"4040\":{\"t\":\"MQ服务器返回ACK确认到生产者，此时MQ不会触发消息推送事件\"},\"4041\":{\"t\":\"生产者执行本地事务（订单创建成功，提交事务消息）\"},\"4042\":{\"t\":\"如果本地事务执行成功，即commit执行结果到MQ服务器；如果执行失败，发送rollback。\"},\"4043\":{\"t\":\"如果是commit正常提交，MQ服务器更新消息状态为可发送；如果是rollback，即删除消息。\"},\"4044\":{\"t\":\"如果消息状态更新为可发送，则MQ服务器会push消息给消费者（购物车系统）。消费者消费完（即拿到订单消息，清空购物车成功）就应答ACK。\"},\"4045\":{\"t\":\"如果MQ服务器长时间没有收到生产者的commit或者rollback，它会反查生产者，然后根据查询到的结果（回滚操作或者重新发送消息）执行最终状态。\"},\"4046\":{\"t\":\"有些伙伴可能有疑惑，如果消费者消费失败怎么办呢？那数据是不是不一致啦？所以就需要消费者消费成功，执行业务逻辑成功，再反馈ack嘛。如果消费者消费失败，那就自动重试嘛，接口支持幂等即可。\"},\"4047\":{\"h\":\"排行榜的实现，比如高考成绩排序（2022 虾皮）\",\"a\":\"排行榜的实现-比如高考成绩排序-2022-虾皮\"},\"4048\":{\"t\":\"排行版的实现，一般使用redis的zset数据类型。\"},\"4049\":{\"t\":\"zadd key score member [score member ...]，zrank key member \"},\"4050\":{\"h\":\"有一批帖子，会根据类别搜索，但是现在是单独一个表，现在查询非常慢，如何提高搜索性能？（2022 虾皮）\",\"a\":\"有一批帖子-会根据类别搜索-但是现在是单独一个表-现在查询非常慢-如何提高搜索性能-2022-虾皮\"},\"4051\":{\"t\":\"根据类别分库分表，库可以放到不同的实例上，经常查询的不变的数据]可以放到缓存里。 数据有更新时，需要刷新下缓存 因为分表后，只能是固定类别，所以需要根据类别去分开查找。 如果还有另一个重要的字段也需要查，可以再建一个分表，user-ses/ses-user就是这么做的，但是冗余就比较大。\"},\"4052\":{\"h\":\"如果有多个表，进行聚合查询，如何解决深分页的问题（2022 虾皮）\",\"a\":\"如果有多个表-进行聚合查询-如何解决深分页的问题-2022-虾皮\"},\"4053\":{\"t\":\"就是保存每个节点的表id给前端，前端查询时把id返回过来了，然后加到SQL里，但是不一定准。这里回答的是单个表吧。\"},\"4054\":{\"h\":\"分表的数据，动态增加一张表，不停服如何实现？（2022 虾皮）\",\"a\":\"分表的数据-动态增加一张表-不停服如何实现-2022-虾皮\"},\"4055\":{\"t\":\"分区策略使用一致性哈希 然后新表的数据，查询的时候，先查老的，再插入新的。如果老数据没有动，需要有对应的迁移服务进行定时迁移。插入的时候优先插入到新的表。\"},\"4056\":{\"h\":\"迁移线程和用户线程同时执行，会有数据库不一致的问题，怎么解决？（2022 虾皮）\",\"a\":\"迁移线程和用户线程同时执行-会有数据库不一致的问题-怎么解决-2022-虾皮\"},\"4057\":{\"t\":\"加分布式锁。\"},\"4058\":{\"h\":\"两个机房，某个机房可能断电，如何做多机房容灾（2022 虾皮）\",\"a\":\"两个机房-某个机房可能断电-如何做多机房容灾-2022-虾皮\"},\"4059\":{\"t\":\"负载均衡层，支持切换机房写数据的时候，中间件（db/redis/es）都要进行双写。\"},\"4060\":{\"t\":\"kafka容灾，mirror maker: https://cloud.tencent.com/developer/article/1358933\"},\"4061\":{\"h\":\"主从机房同步有什么问题呢？ （2022 虾皮）\",\"a\":\"主从机房同步有什么问题呢-2022-虾皮\"},\"4062\":{\"t\":\"会有比较大的延迟。 一些分布式的问题，例如分布式事务，可能就执行了几步，然后就挂了，需要有一定的策略，进行回滚或者提交。 切换机房的过程中，可能存在数据丢失，重复数据等\"},\"4063\":{\"t\":\"双向同步，两个机房都能写入，如果操作的是各自的数据的话，问题不大。如果操作的是相同数据，必然会有冲突，需要解决。所以上层保证相同数据到同一个机房即可，然后同步到另外一个机房，保证每个机房都有全量的数据。各种中间件都要做改造。\"},\"4064\":{\"t\":\"总之，分片的核心思路在于，让同一个用户的相关请求，只在一个机房内完成所有业务「闭环」，不再出现「跨机房」访问。\"},\"4065\":{\"t\":\"阿里在实施这种方案时，给它起了个名字，叫做「单元化」。\"},\"4066\":{\"t\":\"这里还有一种情况，是无法做数据分片的：全局数据。例如系统配置、商品库存这类需要强一致的数据，这类服务依旧只能采用写主机房，读从机房的方案，不做双活。\"},\"4067\":{\"t\":\"双活的重点，是要优先保证「核心」业务先实现双活，并不是「全部」业务实现双活。\"},\"4068\":{\"h\":\"冷机房新请求过来，发现缓存没有，会把数据库打挂，这个怎么解决？（2022 虾皮）\",\"a\":\"冷机房新请求过来-发现缓存没有-会把数据库打挂-这个怎么解决-2022-虾皮\"},\"4069\":{\"t\":\"预热，提前加载到缓存。 或者平时保持一定的流量。 用了缓存的，一般需要预热下，防止雪崩。\"},\"4070\":{\"h\":\"定时任务这种，怎么改变执行的机房（2022 虾皮）\",\"a\":\"定时任务这种-怎么改变执行的机房-2022-虾皮\"},\"4071\":{\"t\":\"加开关，任何时候都有一个条件不满足，在空跑。\"},\"4072\":{\"h\":\"多线程和高并发\"},\"4073\":{\"h\":\"三：多线程与高并发\",\"a\":\"三-多线程与高并发\"},\"4074\":{\"h\":\"线程的互斥同步方式有哪些? 如何比较和选择?\",\"a\":\"线程的互斥同步方式有哪些-如何比较和选择\"},\"4075\":{\"t\":\"Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。\"},\"4076\":{\"t\":\"锁的实现synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。\"},\"4077\":{\"t\":\"性能新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。\"},\"4078\":{\"t\":\"等待可中断当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。\"},\"4079\":{\"t\":\"公平锁公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\"},\"4080\":{\"t\":\"锁绑定多个条件一个 ReentrantLock 可以同时绑定多个 Condition 对象。\"},\"4081\":{\"h\":\"ReentrantLock：\",\"a\":\"reentrantlock\"},\"4082\":{\"t\":\"ReentrantLock 实现了 Lock 接口，是一个可重入且独占式的锁，和 synchronized 关键字类似。不过，ReentrantLock 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。\"},\"4083\":{\"t\":\"public class ReentrantLock implements Lock, java.io.Serializable {} \"},\"4084\":{\"t\":\"ReentrantLock 里面有一个内部类 Sync，Sync 继承 AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在 Sync 中实现的。Sync 有公平锁 FairSync 和非公平锁 NonfairSync 两个子类。\"},\"4085\":{\"t\":\"ReentrantLock 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。\"},\"4086\":{\"t\":\"// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁 public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } \"},\"4087\":{\"t\":\"https://blog.csdn.net/zhengzhaoyang122/article/details/110847701；https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html\"},\"4088\":{\"h\":\"锁升级\",\"a\":\"锁升级\"},\"4089\":{\"t\":\"img\"},\"4090\":{\"h\":\"无锁\",\"a\":\"无锁\"},\"4091\":{\"t\":\"无锁并不会对资源锁定，所有的线程都可以访问并修改同一个资源，但同时只有一个线程能修改成功。也就是我们常说的乐观锁。\"},\"4092\":{\"h\":\"偏向锁\",\"a\":\"偏向锁\"},\"4093\":{\"t\":\"偏向于第一个访问锁的线程，初次执行synchronized代码块时，通过 CAS 修改对象头里的锁标志位，锁对象变成偏向锁。\"},\"4094\":{\"t\":\"当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。\"},\"4095\":{\"t\":\"执行完同步代码块后，线程并不会主动释放偏向锁。当线程第二次再执行同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里不需要重新加锁，偏向锁几乎没有额外开销，性能极高。\"},\"4096\":{\"t\":\"偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。\"},\"4097\":{\"t\":\"偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗。 \"},\"4098\":{\"h\":\"轻量级锁\",\"a\":\"轻量级锁\"},\"4099\":{\"t\":\"当前锁是偏向锁，此时有多个线程同时来竞争锁，偏向锁就会升级为轻量级锁。轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式来获取锁。\"},\"4100\":{\"t\":\"轻量级锁的获取有两种情况：\"},\"4101\":{\"t\":\"当关闭偏向锁功能时 多个线程竞争偏向锁导致偏向锁升级为轻量级锁。一旦有第二个线程加入锁竞争，偏向锁就升级为轻量级锁（自旋锁） \"},\"4102\":{\"t\":\"在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先比较当前锁标志位是否为“释放”，如果是则将其设置为“锁定”，此过程是原子性。如果抢到锁，然后线程将当前锁的持有者信息修改为自己。\"},\"4103\":{\"h\":\"重量级锁\",\"a\":\"重量级锁\"},\"4104\":{\"t\":\"如果线程的竞争很激励，线程的自旋超过了一定次数（默认循环10次，可以通过虚拟机参数更改），将轻量级锁升级为重量级锁（依然是 CAS 修改锁标志位，但不修改持有锁的线程ID），当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。\"},\"4105\":{\"t\":\"重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资。\"},\"4106\":{\"h\":\"锁优化技术（锁粗化、锁消除）：\",\"a\":\"锁优化技术-锁粗化、锁消除\"},\"4107\":{\"t\":\"锁粗化就是告诉我们任何事情都有个度，有些情况下我们反而希望把很多次锁的请求合并成一个请求，以降低短时间内大量锁请求、同步、释放带来的性能损耗。\"},\"4108\":{\"t\":\"锁消除指的是在某些情况下，JVM 虚拟机如果检测不到某段代码被共享和竞争的可能性，就会将这段代码所属的同步锁消除掉，从而到底提高程序性能的目的。\"},\"4109\":{\"h\":\"CAS\",\"a\":\"cas\"},\"4110\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&mid=2247510278&idx=3&sn=a58a9ec9f805d0e109c4b09cd497c9ca&chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1&scene=27\"},\"4111\":{\"t\":\"在并发编程中我们都知道i++操作是非线程安全的，这是因为 i++操作不是原子操作。\"},\"4112\":{\"t\":\"如何保证原子性呢？常用的方法就是加锁。在Java语言中可以使用 Synchronized和CAS实现加锁效果。\"},\"4113\":{\"t\":\"Synchronized是悲观锁，线程开始执行第一步就是获取锁，一旦获得锁，其他的线程进入后就会阻塞等待锁。如果不好理解，举个生活中的例子：一个人进入厕所后首先把门锁上（获取锁），然后开始上厕所，这个时候有其他人来了只能在外面等（阻塞），就算再急也没用。上完厕所完事后把门打开（解锁），其他人就可以进入了。\"},\"4114\":{\"t\":\"CAS是乐观锁，线程执行的时候不会加锁，假设没有冲突去完成某项操作，如果因为冲突失败了就重试，最后直到成功为止。\"},\"4115\":{\"h\":\"什么是 CAS？\",\"a\":\"什么是-cas\"},\"4116\":{\"t\":\"CAS（Compare-And-Swap）是比较并交换的意思，它是一条 CPU 并发原语，用于判断内存中某个值是否为预期值，如果是则更改为新的值，这个过程是原子的。下面用一个小示例解释一下。\"},\"4117\":{\"t\":\"CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，计算后要修改后的新值B。\"},\"4118\":{\"t\":\"（1）初始状态：在内存地址V中存储着变量值为 1。\"},\"4119\":{\"t\":\"图片\"},\"4120\":{\"t\":\"（2）线程1想要把内存地址为 V 的变量值增加1。这个时候对线程1来说，旧的预期值A=1，要修改的新值B=2。\"},\"4121\":{\"t\":\"图片\"},\"4122\":{\"t\":\"（3）在线程1要提交更新之前，线程2捷足先登了，已经把内存地址V中的变量值率先更新成了2。\"},\"4123\":{\"t\":\"图片\"},\"4124\":{\"t\":\"（4）线程1开始提交更新，首先将预期值A和内存地址V的实际值比较（Compare），发现A不等于V的实际值，提交失败。\"},\"4125\":{\"t\":\"图片\"},\"4126\":{\"t\":\"（5）线程1重新获取内存地址 V 的当前值，并重新计算想要修改的新值。此时对线程1来说，A=2，B=3。这个重新尝试的过程被称为自旋。如果多次失败会有多次自旋。\"},\"4127\":{\"t\":\"图片\"},\"4128\":{\"t\":\"（6）线程 1 再次提交更新，这一次没有其他线程改变地址 V 的值。线程1进行Compare，发现预期值 A 和内存地址 V的实际值是相等的，进行 Swap 操作，将内存地址 V 的实际值修改为 B。\"},\"4129\":{\"t\":\"图片\"},\"4130\":{\"t\":\"总结：更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 中的实际值相同时，才会将内存地址 V 对应的值修改为 B，这整个操作就是CAS。\"},\"4131\":{\"h\":\"CAS 基本原理\",\"a\":\"cas-基本原理\"},\"4132\":{\"t\":\"CAS 主要包括两个操作：Compare和Swap，有人可能要问了：两个操作能保证是原子性吗？可以的。\"},\"4133\":{\"t\":\"CAS 是一种系统原语，原语属于操作系统用语，原语由若干指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，由操作系统硬件来保证。在 Intel 的 CPU 中，使用 cmpxchg 指令。\"},\"4134\":{\"t\":\"回到 Java 语言，JDK 是在 1.5 版本后才引入 CAS 操作，在sun.misc.Unsafe这个类中定义了 CAS 相关的方法。\"},\"4135\":{\"t\":\"在 Java 编程中我们通常不会直接使用到 CAS，都是通过 JDK 封装好的并发工具类来间接使用的，这些并发工具类都在java.util.concurrent包中。\"},\"4136\":{\"h\":\"CAS 的问题\",\"a\":\"cas-的问题\"},\"4137\":{\"t\":\"CAS 不是万能的，也有很多问题。\"},\"4138\":{\"t\":\"敲黑板：CAS有哪些问题，这是面试高频考点，需要重点掌握。\"},\"4139\":{\"h\":\"典型 ABA 问题\",\"a\":\"典型-aba-问题\"},\"4140\":{\"t\":\"ABA 是 CAS 操作的一个经典问题，假设有一个变量初始值为 A，修改为 B，然后又修改为 A，这个变量实际被修改过了，但是 CAS 操作可能无法感知到。\"},\"4141\":{\"t\":\"如果是整型还好，不会影响最终结果，但如果是对象的引用类型包含了多个变量，引用没有变实际上包含的变量已经被修改，这就会造成大问题。\"},\"4142\":{\"t\":\"如何解决？思路其实很简单，在变量前加版本号，每次变量更新了就把版本号加一，结果如下：\"},\"4143\":{\"t\":\"图片\"},\"4144\":{\"t\":\"最终结果都是 A 但是版本号改变了。\"},\"4145\":{\"t\":\"从 JDK 1.5 开始提供了AtomicStampedReference类，这个类的 compareAndSe方法首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\"},\"4146\":{\"h\":\"自旋开销问题\",\"a\":\"自旋开销问题\"},\"4147\":{\"t\":\"CAS 出现冲突后就会开始自旋操作，如果资源竞争非常激烈，自旋长时间不能成功就会给 CPU 带来非常大的开销。\"},\"4148\":{\"t\":\"解决方案：可以考虑限制自旋的次数，避免过度消耗 CPU；另外还可以考虑延迟执行。\"},\"4149\":{\"h\":\"只能保证单个变量的原子性\",\"a\":\"只能保证单个变量的原子性\"},\"4150\":{\"t\":\"当对一个共享变量执行操作时，可以使用 CAS 来保证原子性，但是如果要对多个共享变量进行操作时，CAS 是无法保证原子性的，比如需要将 i 和 j 同时加 1：\"},\"4151\":{\"t\":\"i++；j++； \"},\"4152\":{\"t\":\"这个时候可以使用 synchronized 进行加锁，有没有其他办法呢？有，将多个变量操作合成一个变量操作。从 JDK1.5 开始提供了AtomicReference 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\"},\"4153\":{\"h\":\"总结\",\"a\":\"总结\"},\"4154\":{\"t\":\"CAS 是 Compare And Swap，是一条 CPU 原语，由操作系统保证原子性。\"},\"4155\":{\"t\":\"Java语言从 JDK1.5 版本开始引入 CAS ， 并且是 Java 并发编程J.U.C 包的基石，应用非常广泛。\"},\"4156\":{\"t\":\"当然 CAS 也不是万能的，也有很多问题：典型 ABA 问题、自旋开销问题、只能保证单个变量的原子性。\"},\"4157\":{\"h\":\"AQS\",\"a\":\"aqs\"},\"4158\":{\"t\":\"https://zhuanlan.zhihu.com/p/543902719\"},\"4159\":{\"h\":\"什么是AQS\",\"a\":\"什么是aqs\"},\"4160\":{\"t\":\"AQS（AbstractQueuedSynchronizer），即队列同步器，它是构建锁或者其他同步组件的基础框架，如ReentrantLock、ReentrantReadWriteLock、Semaphore，CountDownLatch等。 AQS是一个抽象类，主要是通过继承方式使用，本身没有实现任何接口，仅仅是定义了同步状态的获取和释放的方法。AQS解决了了之类实现同步器的大量细节问题，例如获取同步状态，FIFO队列，入队和出队。自定义同步器在实现时候只需要实现共享资源state的获取和释放即可，至于获取资源失败入队/唤醒出队等，AQS在顶层已经定义好了。\"},\"4161\":{\"h\":\"AQS的两种功能\",\"a\":\"aqs的两种功能\"},\"4162\":{\"t\":\"从使用层面来说，AQS功能分为两种：独占和共享\"},\"4163\":{\"t\":\"独占锁，每次只能一个线程持有锁，比如ReentrantLock就是独占锁\"},\"4164\":{\"t\":\"共享锁，允许多个线程持有锁，并发访问共享资源，比如ReentrantReadWriteLock\"},\"4165\":{\"t\":\"共享锁和独占锁的释放有一定区别，前面部分是一致的，先判断头结点是不是signal状态，如果是则唤醒头节点的下一个节点，并将该节点设置为头结点。而共享锁不一样，某个节点被设置为head之后，如果它的后继节点是shared状态，那么会尝试使用doReleaseShared方法尝试唤醒节点，实现共享状态的传播。\"},\"4166\":{\"h\":\"AQS内部实现\",\"a\":\"aqs内部实现\"},\"4167\":{\"t\":\"AQS是依赖内部的同步队列实现，也就是FIFO双向队列，如果当前线程竞争锁失败，那么AQS会把当前线程以及等待状态封装成一个Node节点加入到同步队列中，同时阻塞该线程，当同步状态释放时，会把首节点唤醒，使其再次尝试获取同步状态。\"},\"4168\":{\"t\":\"AQS队列内部维护的是一个双向链表，这种结构每个数据都有两个指针，分别指向直接的的前驱节点和后继节点，当线程抢占锁失败时候，会封装成Node加入到AQS中去。\"},\"4169\":{\"t\":\"AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁 实现的，即将暂时获取不到锁的线程加入到队列中。\"},\"4170\":{\"t\":\"CLH(Craig,Landin,and Hagersten) 队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。在 CLH 同步队列中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。\"},\"4171\":{\"t\":\"CLH 队列结构如下图所示：\"},\"4172\":{\"t\":\"img\"},\"4173\":{\"t\":\"在同步队列中，一个节点表示一个线程，他保存这线程的引用ThreadId，状态（watiStatus）,前驱结点（pre），后继节点（next），其数据结构如下：\"},\"4174\":{\"t\":\"img\"},\"4175\":{\"h\":\"acquire方法流程总结\",\"a\":\"acquire方法流程总结\"},\"4176\":{\"t\":\"首先通过子类判断是否获取了锁，如果获取了就什么也不干。tryAcquire\"},\"4177\":{\"t\":\"如果没有获取锁、通过线程创建节点加入同步队列的队尾。addWaiter\"},\"4178\":{\"t\":\"当线程在同步队列中不断的通过自旋去获取同步状态，如果获取了锁，就把其设为同步队列中的头节点，否则在同步队列中不停的自旋等待获取同步状态 acquireQueued,shouldParkAfterFailedAcquire(Node pre,Node node),parkAndCheckInterrupt()\"},\"4179\":{\"t\":\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\"},\"4180\":{\"h\":\"AQS 底层使用了模板方法模式，你能说出几个需要重写的方法吗？\",\"a\":\"aqs-底层使用了模板方法模式-你能说出几个需要重写的方法吗\"},\"4181\":{\"t\":\"使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。\"},\"4182\":{\"t\":\"isHeldExclusively() ：该线程是否正在独占资源。只有用到 condition 才需要去实现它。\"},\"4183\":{\"t\":\"tryAcquire(int) ：独占方式。尝试获取资源，成功则返回 true，失败则返回 false。\"},\"4184\":{\"t\":\"tryRelease(int) ：独占方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"4185\":{\"t\":\"tryAcquireShared(int) ：共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\"},\"4186\":{\"t\":\"tryReleaseShared(int) ：共享方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"4187\":{\"h\":\"总结\",\"a\":\"总结-1\"},\"4188\":{\"t\":\"总结的来说：线程获取锁，如果获取了锁就 保存当前获得锁的线程，如果没获取就创造一个节点通过compareAndSetTail(CAS操作)操作的方式将创建的节点加入同步队列的尾部，在同步队列中的节点通过自旋的操作不断去获取同步状态【当然由于FIFO先进先出的特性】等待时间越长就越先被唤醒。当头节点释放同步状态的时候，首先查看是否存在后继节点，如果存在就唤醒自己的后继节点，如果不存在就获取等待时间最长的符合条件的线程。\"},\"4189\":{\"h\":\"volitile关键字原理\",\"a\":\"volitile关键字原理\"},\"4190\":{\"h\":\"简述Java内存模型：\",\"a\":\"简述java内存模型\"},\"4191\":{\"t\":\"Java内存模型分为主内存和线程工作内存两大类。\"},\"4192\":{\"t\":\"主内存： **多个线程共享的内存。**如下图所示，方法区和堆属于主内存区域。\"},\"4193\":{\"t\":\"线程工作内存：每个线程独享的内存。如下图所示，虚拟机栈、本地方法栈、程序计数器属于线程独享的工作内存。\"},\"4194\":{\"t\":\"图片\"},\"4195\":{\"t\":\"Java内存模型规定：所有变量都需要存储在主内存中，线程工作内存保存了变量在主内存中的副本，线程对变量的所有操作都在工作内存中进行，执行结束后在同步到主内存中去。这里必然会存在时间差，在这个时间差内，该线程对副本的操作，对于其他线程是不见的，从而造成了可见性问题。\"},\"4196\":{\"h\":\"volatile的作用：\",\"a\":\"volatile的作用\"},\"4197\":{\"t\":\"保证共享变量的可见性： 使用volatile修饰的变量，任何线程对其进行操作都是在主内存中进行的，不会产生副本，从而保证共享变量的可见性。\"},\"4198\":{\"t\":\"防止局部指令重排序： happens-before规则中的volatile变量规则规定了一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。\"},\"4199\":{\"h\":\"volatile如何防止指令重排序：\",\"a\":\"volatile如何防止指令重排序\"},\"4200\":{\"t\":\"volatile是通过内存屏障来防止指令重排序的。\"},\"4201\":{\"t\":\"硬件层面的内存屏障分为Load Barrier 和 Store Barrier即读屏障和写屏障。\"},\"4202\":{\"t\":\"对于Load Barrier来说，在指令前插入Load Barrier，可以让高速缓存中的数据失效，强制从新从主内存加载数据。\"},\"4203\":{\"t\":\"对于Store Barrier来说，在指令后插入Store Barrier，能让写入缓存中的最新数据更新写入主内存，让其他线程可见。\"},\"4204\":{\"t\":\"Java内存屏障类型把上述两种内存屏障两两组合，如下图所示：\"},\"4205\":{\"t\":\"图片\"},\"4206\":{\"t\":\"volatile防止指令重排序具体步骤：\"},\"4207\":{\"t\":\"在每个volatile写操作的前面插入一个StoreStore屏障。\"},\"4208\":{\"t\":\"在每个volatile写操作的后面插入一个StoreLoad屏障。\"},\"4209\":{\"t\":\"在每个volatile读操作的后面插入一个LoadLoad屏障。\"},\"4210\":{\"t\":\"在每个volatile读操作的后面插入一个LoadStore屏障。\"},\"4211\":{\"t\":\"图片\"},\"4212\":{\"t\":\"图片\"},\"4213\":{\"h\":\"volatile总结：\",\"a\":\"volatile总结\"},\"4214\":{\"t\":\"volatile解决的是多线程共享变量可见性问题，但是被volatile修饰的变量操作并非具有原子性。\"},\"4215\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=MzAxNTE2NjEyMw==&mid=2247483734&idx=1&sn=8509d4aa61d08550c2b7668314da3582&chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e&scene=27\"},\"4216\":{\"h\":\"锁的分类实现\",\"a\":\"锁的分类实现\"},\"4217\":{\"h\":\"悲观锁：\",\"a\":\"悲观锁\"},\"4218\":{\"t\":\"正如其名，它是指对数据修改时持保守态度，认为其他人也会修改数据。因此在操作数据时，会把数据锁住，直到操作完成。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是长事务而言，这样的开销往往无法承受。\"},\"4219\":{\"h\":\"乐观锁：\",\"a\":\"乐观锁\"},\"4220\":{\"t\":\"乐观锁，从字面意思也能猜到个大概，在操作数据时非常乐观，认为别人不会同时修改数据，因此乐观锁不会上锁 只是在 提交更新 时，才会正式对数据的冲突与否进行检测。如果发现冲突了，则返回错误信息，让用户决定如何去做，fail-fast 机制 。否则，执行本次操作。\"},\"4221\":{\"h\":\"可重入锁：\",\"a\":\"可重入锁\"},\"4222\":{\"t\":\"可重入锁，也叫做递归锁，是指在同一个线程在调外层方法获取锁的时候，再进入内层方法会自动获取锁。\"},\"4223\":{\"t\":\"对象锁或类锁内部有计数器，一个线程每获得一次锁，计数器 +1；解锁时，计数器 -1。\"},\"4224\":{\"t\":\"JAVA 中的 ReentrantLock 和 synchronized 都是 可重入锁。可重入锁的一个好处是可一定程度避免死锁。\"},\"4225\":{\"h\":\"自旋锁：\",\"a\":\"自旋锁\"},\"4226\":{\"t\":\"自旋锁是采用让当前线程不停地在循环体内执行，当循环的条件被其他线程改变时才能进入临界区。自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不断增加时，性能下降明显，因为每个线程都需要执行，会占用CPU时间片。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\"},\"4227\":{\"t\":\"自旋锁缺点：\"},\"4228\":{\"t\":\"可能引发死锁 可能占用 CPU 的时间过长 \"},\"4229\":{\"t\":\"我们可以设置一个 循环时间 或 循环次数，超出阈值时，让线程进入阻塞状态，防止线程长时间占用 CPU 资源。JUC 并发包中的 CAS 就是采用自旋锁，compareAndSet 是CAS操作的核心，底层利用Unsafe对象实现的。\"},\"4230\":{\"h\":\"独享锁：\",\"a\":\"独享锁\"},\"4231\":{\"t\":\"独享锁，也有人叫它排他锁。无论读操作还是写操作，只能有一个线程获得锁，其他线程处于阻塞状态。\"},\"4232\":{\"t\":\"缺点：读操作并不会修改数据，而且大部分的系统都是 读多写少，如果读读之间互斥，大大降低系统的性能。下面的 共享锁 会解决这个问题。\"},\"4233\":{\"t\":\"像JAVA 中的 ReentrantLock 和 synchronized 都是独享锁。\"},\"4234\":{\"h\":\"共享锁：\",\"a\":\"共享锁\"},\"4235\":{\"t\":\"共享锁是指允许多个线程同时持有锁，一般用在读锁上。读锁的共享锁可保证并发读是非常高效的。读写，写读 ，写写的则是互斥的。独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享\"},\"4236\":{\"t\":\"ReentrantReadWriteLock，其读锁是共享锁，其写锁是独享锁。\"},\"4237\":{\"h\":\"读锁/写锁：\",\"a\":\"读锁-写锁\"},\"4238\":{\"t\":\"如果对某个资源是读操作，那多个线程之间并不会相互影响，可以通过添加读锁实现共享。如果有修改动作，为了保证数据的并发安全，此时只能有一个线程获得锁，我们称之为 写锁。读读是共享的；而 读写、写读 、写写 则是互斥的\"},\"4239\":{\"t\":\"像 JAVA 中的 ReentrantReadWriteLock 就是一种 读写锁 \"},\"4240\":{\"h\":\"公平锁/非公平锁：\",\"a\":\"公平锁-非公平锁\"},\"4241\":{\"t\":\"公平锁：多个线程按照申请锁的顺序去获得锁，所有线程都在队列里排队，先来先获取的公平性原则。\"},\"4242\":{\"t\":\"优点：所有的线程都能得到资源，不会饿死在队列中。\"},\"4243\":{\"t\":\"缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，CPU 唤醒下一个阻塞线程有系统开销\"},\"4244\":{\"t\":\"**非公平锁：**多个线程不按照申请锁的顺序去获得锁，而是同时以插队方式直接尝试获取锁，获取不到（插队失败），会进入队列等待（失败则乖乖排队），如果能获取到（插队成功），就直接获取到锁。\"},\"4245\":{\"t\":\"**优点：**可以减少 CPU 唤醒线程的开销，整体的吞吐效率会高点\"},\"4246\":{\"t\":\"**缺点：**可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁，活活饿死。\"},\"4247\":{\"t\":\"Java 多线程并发操作，我们操作锁大多时候都是基于 Sync 本身去实现的，而 Sync 本身却是 ReentrantLock 的一个内部类，Sync 继承 AbstractQueuedSynchronizer\"},\"4248\":{\"t\":\"像 ReentrantLock 默认是非公平锁，我们可以在构造函数中传入 true，来创建公平锁。\"},\"4249\":{\"t\":\"参考：https://blog.csdn.net/weixin_70730532/article/details/126875303\"},\"4250\":{\"h\":\"synchronized原理\",\"a\":\"synchronized原理\"},\"4251\":{\"h\":\"synchronized 同步语句块的情况:\",\"a\":\"synchronized-同步语句块的情况\"},\"4252\":{\"t\":\"public class SynchronizedDemo { public void method() { synchronized (this) { System.out.println(\\\"synchronized 代码块\\\"); } } } \"},\"4253\":{\"t\":\"通过 JDK 自带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：首先切换到类的对应目录执行 javac SynchronizedDemo.java 命令生成编译后的 .class 文件，然后执行javap -c -s -v -l SynchronizedDemo.class。\"},\"4254\":{\"t\":\"synchronized关键字原理\"},\"4255\":{\"t\":\"从上面我们可以看出：synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"4256\":{\"t\":\"上面的字节码中包含一个 monitorenter 指令以及两个 monitorexit 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。\"},\"4257\":{\"t\":\"当执行 monitorenter 指令时，线程试图获取锁也就是获取 对象监视器 monitor 的持有权。\"},\"4258\":{\"t\":\"在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由ObjectMonitor实现的。每个对象中都内置了一个 ObjectMonitor对象。\"},\"4259\":{\"t\":\"另外，wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。\"},\"4260\":{\"t\":\"在执行monitorenter时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。\"},\"4261\":{\"t\":\"对象锁的的拥有者线程才可以执行 monitorexit 指令来释放锁。在执行 monitorexit 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\"},\"4262\":{\"h\":\"synchronized 修饰方法的的情况:\",\"a\":\"synchronized-修饰方法的的情况\"},\"4263\":{\"t\":\"public class SynchronizedDemo2 { public synchronized void method() { System.out.println(\\\"synchronized 方法\\\"); } } \"},\"4264\":{\"t\":\"synchronized关键字原理\"},\"4265\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\"},\"4266\":{\"t\":\"如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。\"},\"4267\":{\"h\":\"总结:\",\"a\":\"总结-2\"},\"4268\":{\"t\":\"synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"4269\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。\"},\"4270\":{\"t\":\"不过两者的本质都是对对象监视器 monitor 的获取。\"},\"4271\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-底层原理了解吗\"},\"4272\":{\"h\":\"ThreadLocal原理\",\"a\":\"threadlocal原理\"},\"4273\":{\"h\":\"ThreadLocal 有什么用？\",\"a\":\"threadlocal-有什么用\"},\"4274\":{\"t\":\"通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？\"},\"4275\":{\"t\":\"JDK 中自带的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。\"},\"4276\":{\"t\":\"如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get() 和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\"},\"4277\":{\"h\":\"原理：\",\"a\":\"原理\"},\"4278\":{\"t\":\"源码：\"},\"4279\":{\"t\":\"public class Thread implements Runnable { //...... //与此线程有关的ThreadLocal值。由ThreadLocal类维护 ThreadLocal.ThreadLocalMap threadLocals = null; //与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护 ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; //...... } \"},\"4280\":{\"t\":\"从上面Thread类 源代码可以看出Thread 类中有一个 threadLocals 和 一个 inheritableThreadLocals 变量，它们都是 ThreadLocalMap 类型的变量,我们可以把 ThreadLocalMap 理解为ThreadLocal 类实现的定制化的 HashMap。默认情况下这两个变量都是 null，只有当前线程调用 ThreadLocal 类的 set或get方法时才创建它们，实际上调用这两个方法的时候，我们调用的是ThreadLocalMap类对应的 get()、set()方法。\"},\"4281\":{\"t\":\"ThreadLocal类的set()方法：\"},\"4282\":{\"t\":\"public void set(T value) { //获取当前请求的线程 Thread t = Thread.currentThread(); //取出 Thread 类内部的 threadLocals 变量(哈希表结构) ThreadLocalMap map = getMap(t); if (map != null) // 将需要存储的值放入到这个哈希表中 map.set(this, value); else createMap(t, value); } ThreadLocalMap getMap(Thread t) { return t.threadLocals; } \"},\"4283\":{\"t\":\"通过上面这些内容，我们足以通过猜测得出结论：最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。ThrealLocal 类中可以通过Thread.currentThread()获取到当前线程对象后，直接通过getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。\"},\"4284\":{\"t\":\"每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为 key ，Object 对象为 value 的键值对。\"},\"4285\":{\"t\":\"ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) { //...... } \"},\"4286\":{\"t\":\"比如我们在同一个线程中声明了两个 ThreadLocal 对象的话， Thread内部都是使用仅有的那个ThreadLocalMap 存放数据的，ThreadLocalMap的 key 就是 ThreadLocal对象，value 就是 ThreadLocal 对象调用set方法设置的值。\"},\"4287\":{\"h\":\"线程池\",\"a\":\"线程池\"},\"4288\":{\"h\":\"为什么要用线程池？\",\"a\":\"为什么要用线程池\"},\"4289\":{\"t\":\"这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：\"},\"4290\":{\"t\":\"降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\"},\"4291\":{\"t\":\"提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。\"},\"4292\":{\"t\":\"提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\"},\"4293\":{\"h\":\"如何创建线程池？\",\"a\":\"如何创建线程池\"},\"4294\":{\"t\":\"方式一：通过ThreadPoolExecutor构造函数来创建（推荐）。\"},\"4295\":{\"t\":\"package com.young.多线程; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.Executors; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * @author 杨路恒 */ public class ThreadPool { public static void main(String[] args) { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1,2, 2, TimeUnit.MILLISECONDS,new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(), // new ThreadPoolExecutor.AbortPolicy() // new ThreadPoolExecutor.CallerRunsPolicy() // new ThreadPoolExecutor.DiscardOldestPolicy() new ThreadPoolExecutor.DiscardPolicy() ); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.shutdown(); } } \"},\"4296\":{\"t\":\"参数：\"},\"4297\":{\"t\":\"/** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @param threadFactory the factory to use when the executor * creates a new thread * @param handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached * @throws IllegalArgumentException if one of the following holds:<br> * {@code corePoolSize < 0}<br> * {@code keepAliveTime < 0}<br> * {@code maximumPoolSize <= 0}<br> * {@code maximumPoolSize < corePoolSize} * @throws NullPointerException if {@code workQueue} * or {@code threadFactory} or {@code handler} is null */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; } \"},\"4298\":{\"t\":\"ThreadPoolExecutor 3 个最重要的参数：\"},\"4299\":{\"t\":\"corePoolSize : 任务队列未达到队列容量时，最大可以同时运行的线程数量。\"},\"4300\":{\"t\":\"maximumPoolSize : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\"},\"4301\":{\"t\":\"workQueue: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"4302\":{\"t\":\"ThreadPoolExecutor其他常见参数 :\"},\"4303\":{\"t\":\"keepAliveTime:线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；\"},\"4304\":{\"t\":\"unit : keepAliveTime 参数的时间单位。\"},\"4305\":{\"t\":\"threadFactory :executor 创建新线程的时候会用到。\"},\"4306\":{\"t\":\"handler :饱和策略。关于饱和策略下面单独介绍一下。\"},\"4307\":{\"t\":\"下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）：\"},\"4308\":{\"t\":\"线程池各个参数的关系\"},\"4309\":{\"t\":\"线程池的饱和策略有哪些？\"},\"4310\":{\"t\":\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，ThreadPoolTaskExecutor 定义一些策略:\"},\"4311\":{\"t\":\"ThreadPoolExecutor.AbortPolicy： 抛出 RejectedExecutionException来拒绝新任务的处理。\"},\"4312\":{\"t\":\"ThreadPoolExecutor.CallerRunsPolicy： 调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。\"},\"4313\":{\"t\":\"ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。\"},\"4314\":{\"t\":\"ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。\"},\"4315\":{\"t\":\"举个例子：Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略来配置线程池的时候，默认使用的是 AbortPolicy。在这种饱和策略下，如果队列满了，ThreadPoolExecutor 将抛出 RejectedExecutionException 异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。如果不想丢弃任务的话，可以使用CallerRunsPolicy。CallerRunsPolicy 和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务\"},\"4316\":{\"t\":\"线程池常用的阻塞队列有哪些？\"},\"4317\":{\"t\":\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"4318\":{\"t\":\"不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。\"},\"4319\":{\"t\":\"容量为 Integer.MAX_VALUE 的 LinkedBlockingQueue（无界队列）：FixedThreadPool 和 SingleThreadExector 。由于队列永远不会被放满，因此FixedThreadPool最多只能创建核心线程数的线程。\"},\"4320\":{\"t\":\"SynchronousQueue（同步队列） ：CachedThreadPool 。SynchronousQueue 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，CachedThreadPool 的最大线程数是 Integer.MAX_VALUE ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。\"},\"4321\":{\"t\":\"DelayedWorkQueue（延迟阻塞队列）：ScheduledThreadPool 和 SingleThreadScheduledExecutor 。DelayedWorkQueue 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。DelayedWorkQueue 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 Integer.MAX_VALUE，所以最多只能创建核心线程数的线程。\"},\"4322\":{\"t\":\"线程池处理任务的流程了解吗？\"},\"4323\":{\"t\":\"如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。\"},\"4324\":{\"t\":\"如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。\"},\"4325\":{\"t\":\"如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。\"},\"4326\":{\"t\":\"如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用RejectedExecutionHandler.rejectedExecution()方法。\"},\"4327\":{\"t\":\"图解线程池实现原理\"},\"4328\":{\"t\":\"如何设定线程池的大小？\"},\"4329\":{\"t\":\"有一个简单并且适用面比较广的公式：\"},\"4330\":{\"t\":\"CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\"},\"4331\":{\"t\":\"I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\"},\"4332\":{\"t\":\"方式二：通过 Executor 框架的工具类 Executors 来创建。\"},\"4333\":{\"t\":\"我们可以创建多种类型的 ThreadPoolExecutor：\"},\"4334\":{\"t\":\"FixedThreadPool ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\"},\"4335\":{\"t\":\"SingleThreadExecutor： 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\"},\"4336\":{\"t\":\"CachedThreadPool： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。\"},\"4337\":{\"t\":\"ScheduledThreadPool ：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。\"},\"4338\":{\"h\":\"为什么不推荐使用内置线程池？\",\"a\":\"为什么不推荐使用内置线程池\"},\"4339\":{\"t\":\"在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\"},\"4340\":{\"t\":\"为什么呢？\"},\"4341\":{\"t\":\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\"},\"4342\":{\"t\":\"另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险\"},\"4343\":{\"t\":\"Executors 返回线程池对象的弊端如下(后文会详细介绍到)：\"},\"4344\":{\"t\":\"FixedThreadPool 和 SingleThreadExecutor ： 使用的是无界的 LinkedBlockingQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"4345\":{\"t\":\"CachedThreadPool ：使用的是同步队列 SynchronousQueue, 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。\"},\"4346\":{\"t\":\"ScheduledThreadPool 和 SingleThreadScheduledExecutor : 使用的无界的延迟阻塞队列DelayedWorkQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"4347\":{\"h\":\"如何动态修改线程池的参数？\",\"a\":\"如何动态修改线程池的参数\"},\"4348\":{\"t\":\"JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：\"},\"4349\":{\"t\":\"图片\"},\"4350\":{\"t\":\"重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。\"},\"4351\":{\"t\":\"问题一：线程池被创建后里面有线程吗？如果没有的话，你知道有什么方法对线程池进行预热吗？\"},\"4352\":{\"t\":\"线程池被创建后如果没有任务过来，里面是不会有线程的。如果需要预热的话可以调用下面的两个方法：\"},\"4353\":{\"t\":\"全部启动：\"},\"4354\":{\"t\":\"图片\"},\"4355\":{\"t\":\"仅启动一个：\"},\"4356\":{\"t\":\"图片\"},\"4357\":{\"t\":\"问题二：核心线程数会被回收吗？需要什么设置？\"},\"4358\":{\"t\":\"核心线程数默认是不会被回收的，如果需要回收核心线程数，需要调用下面的方法：\"},\"4359\":{\"t\":\"图片\"},\"4360\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html；https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651751537&idx=1&sn=c50a434302cc06797828782970da190e&chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c&scene=21#wechat_redirect\"},\"4361\":{\"h\":\"Docker\"},\"4362\":{\"h\":\"Docker\",\"a\":\"docker\"},\"4363\":{\"h\":\"什么是 Docker?\",\"a\":\"什么是-docker\"},\"4364\":{\"t\":\"Docker 是世界领先的软件容器平台。\"},\"4365\":{\"t\":\"Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 UnionFS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\"},\"4366\":{\"t\":\"Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。\"},\"4367\":{\"t\":\"用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\"},\"4368\":{\"h\":\"Docker的架构\",\"a\":\"docker的架构\"},\"4369\":{\"t\":\"Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，模块各司其职。下图是它的总体架构图：\"},\"4370\":{\"t\":\"img\"},\"4371\":{\"t\":\"用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。\"},\"4372\":{\"t\":\"Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。\"},\"4373\":{\"t\":\"Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。\"},\"4374\":{\"t\":\"Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graphdriver 将下载镜像以 Graph 的形式存储。\"},\"4375\":{\"t\":\"当需要为 Docker 创建网络环境时，通过网络管理驱动 Networkdriver 创建并配置 Docker容器网络环境。\"},\"4376\":{\"t\":\"当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。\"},\"4377\":{\"t\":\"Libcontainer 是一项独立的容器管理包，Networkdriver 以及 Execdriver 都是通过 Libcontainer 来实现具体对容器进行的操作。\"},\"4378\":{\"h\":\"镜像和容器的相关操作\",\"a\":\"镜像和容器的相关操作\"},\"4379\":{\"h\":\"Spring Cloud\"},\"4380\":{\"h\":\"Spring Cloud\",\"a\":\"spring-cloud\"},\"4381\":{\"h\":\"什么是Spring Cloud？\",\"a\":\"什么是spring-cloud\"},\"4382\":{\"t\":\"Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。\"},\"4383\":{\"h\":\"微服务的概念\",\"a\":\"微服务的概念\"},\"4384\":{\"t\":\"分布式，多个模块，每一个模块都是一个单独的系统。\"},\"4385\":{\"t\":\"以前所有的代码都放在同一个工程中、部署在同一个服务器、同一项目的不同模块不同功能互相抢占资源，微服务就是将工程根据不同的业务规则拆分成微服务，部署在不同的服务器上，服务之间相互调用，java中有的微服务有dubbo(只能用来做微服务)、springcloud( 提供了服务的发现、断路器等)。\"},\"4386\":{\"t\":\"微服务的特点：\"},\"4387\":{\"t\":\"按业务划分为一个独立运行的程序，即服务单元\"},\"4388\":{\"t\":\"服务之间通过HTTP协议相互通信\"},\"4389\":{\"t\":\"自动化部署\"},\"4390\":{\"t\":\"可以用不同的编程语言\"},\"4391\":{\"t\":\"可以用不同的存储技术\"},\"4392\":{\"t\":\"服务集中化管理\"},\"4393\":{\"t\":\"微服务是一个分布式系统\"},\"4394\":{\"t\":\"微服务的优势\"},\"4395\":{\"t\":\"将一个复杂的业务拆分为若干小的业务，将复杂的业务简单化，新人只需要了解他所接管的服务的代码，减少了新人的学习成本。\"},\"4396\":{\"t\":\"由于微服务是分布式服务，服务与服务之间没有任何耦合。微服务系统的微服务单元具有很强的横向拓展能力。\"},\"4397\":{\"t\":\"服务与服务之间采用HTTP网络通信协议来通信，单个服务内部高度耦合，服务与服务之间完全独立，无耦合。这使得微服务可以采用任何的开发语言和技术来实现，提高开发效率、降低开发成本。\"},\"4398\":{\"t\":\"微服务是按照业务进行拆分的，并有坚实的服务边界，若要重写某一业务代码，不需了解所有业务，重写简单。\"},\"4399\":{\"t\":\"微服务的每个服务单元是独立部署的，即独立运行在某个进程中，微服务的修改和部署对其他服务没有影响。\"},\"4400\":{\"t\":\"微服务在CAP理论中采用的AP架构，具有高可用分区容错特点。高可用主要体现在系统7x24不间断服务，他要求系统有大量的服务器集群，从而提高系统的负载能力。分区容错也使得系统更加健壮。\"},\"4401\":{\"t\":\"微服务的不足\"},\"4402\":{\"t\":\"微服务的复杂度：构建一个微服务比较复杂，服务与服务之间通过HTTP协议或其他消息传递机制通信，开发者要选出最佳的通信机制，并解决网络服务差时带来的风险。\"},\"4403\":{\"t\":\"分布式事物：将事物分成多阶段提交，如果一阶段某一节点失败仍会导致数据不正确。如果事物涉及的节点很多，某一节点的网络出现异常会导致整个事务处于阻塞状态，大大降低数据库的性能。\"},\"4404\":{\"t\":\"服务划分：将一个完整的系统拆分成很多个服务，是一件非常困难的事，因为这涉及了具体的业务场景\"},\"4405\":{\"t\":\"服务部署：最佳部署容器Docker\"},\"4406\":{\"h\":\"Spring Cloud的优缺点以及组件\",\"a\":\"spring-cloud的优缺点以及组件\"},\"4407\":{\"t\":\"设计目标\"},\"4408\":{\"t\":\"协调各个微服务，简化分布式系统开发。\"},\"4409\":{\"t\":\"优缺点\"},\"4410\":{\"t\":\"微服务的框架那么多比如：dubbo、Kubernetes，为什么就要使用Spring Cloud的呢？\"},\"4411\":{\"t\":\"优点：\"},\"4412\":{\"t\":\"产出于Spring大家族，Spring在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善 组件丰富，功能齐全。Spring Cloud 为微服务架构提供了非常完整的支持。例如、配置管理、服务发现、断路器、微服务网关等； Spring Cloud 社区活跃度很高，教程很丰富，遇到问题很容易找到解决方案 服务拆分粒度更细，耦合度比较低，有利于资源重复利用，有利于提高开发效率 可以更精准的制定优化服务方案，提高系统的可维护性 减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发 微服务可以是跨平台的，可以用任何一种语言开发 适于互联网时代，产品迭代周期更短 \"},\"4413\":{\"t\":\"缺点：\"},\"4414\":{\"t\":\"微服务过多，治理成本高，不利于维护系统 分布式系统开发的成本高（容错，分布式事务等）对团队挑战大 \"},\"4415\":{\"t\":\"springcloud中的组件有那些？\"},\"4416\":{\"t\":\"说出主要的组件： Spring Cloud Eureka,服务注册中心,特性有失效剔除、服务保护 Spring Cloud Zuul,API服务网关,功能有路由分发和过滤 Spring Cloud Config,分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式 Spring Cloud Ribbon,客户端负载均衡,特性有区域亲和,重试机制 Spring Cloud Hystrix,客户端容错保护,特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离 Spring Cloud Feign,声明式服务调用本质上就是Ribbon+Hystrix Spring Cloud Stream,消息驱动,有Sink、Source、Processor三种通道,特性有订阅发布、消费组、消息分区 Spring Cloud Bus,消息总线,配合Config仓库修改的一种Stream实现， Spring Cloud Sleuth,分布式服务追踪,需要搞清楚TraceID和SpanID以及抽样,如何与ELK整合 \"},\"4417\":{\"t\":\"Spring Cloud项目部署架构？\"},\"4418\":{\"t\":\"img\"},\"4419\":{\"t\":\"网关与过滤器有什么区别？\"},\"4420\":{\"t\":\"网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。\"},\"4421\":{\"t\":\"什么是断路器\"},\"4422\":{\"t\":\"当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）\"},\"4423\":{\"t\":\"断路器有三种状态\"},\"4424\":{\"t\":\"打开状态：一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务\"},\"4425\":{\"t\":\"半开状态：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭\"},\"4426\":{\"t\":\"关闭状态：当服务一直处于正常状态 能正常调用\"},\"4427\":{\"t\":\"什么是 Hystrix？\"},\"4428\":{\"t\":\"在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等一些防止雪崩的技术。\"},\"4429\":{\"t\":\"Hystrix有四种防雪崩方式:\"},\"4430\":{\"t\":\"服务降级：接口调用失败就调用本地的方法返回一个空\"},\"4431\":{\"t\":\"服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息\"},\"4432\":{\"t\":\"服务隔离：隔离服务之间相互影响\"},\"4433\":{\"t\":\"服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。\"},\"4434\":{\"t\":\"什么是Feign？\"},\"4435\":{\"t\":\"Feign 是一个声明web服务客户端，这使得编写web服务客户端更容易。它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。\"},\"4436\":{\"h\":\"Feign远程调用的基本流程\",\"a\":\"feign远程调用的基本流程\"},\"4437\":{\"t\":\"Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，放回给调用者。Feign远程调用的基本流程，大致如下图所示。\"},\"4438\":{\"t\":\"在这里插入图片描述\"},\"4439\":{\"t\":\"从上图可以看到，Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的 Request 请求。通过Feign以及JAVA的动态代理机制，使得Java 开发人员，可以不用通过HTTP框架去封装HTTP请求报文的方式，完成远程服务的HTTP调用。\"},\"4440\":{\"t\":\"过程：\"},\"4441\":{\"t\":\"在微服务启动时，Feign会进行包扫描，对加@FeignClient注解的接口，按照注解的规则，创建远程接口的本地JDK Proxy代理实例。然后，将这些本地Proxy代理实例，注入到Spring IOC容器中。当远程接口的方法被调用，由Proxy代理实例去完成真正的远程访问，并且返回结果。\"},\"4442\":{\"h\":\"ZooKeeper\"},\"4443\":{\"h\":\"ZooKeeper\",\"a\":\"zookeeper\"},\"4444\":{\"h\":\"基本功能\",\"a\":\"基本功能\"},\"4445\":{\"t\":\"ZooKeeper 是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\"},\"4446\":{\"t\":\"ZooKeeper 为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。这些功能的实现主要依赖于 ZooKeeper 提供的 数据存储+事件监听 功能。\"},\"4447\":{\"t\":\"ZooKeeper 将数据保存在内存中，性能是不错的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景）。\"},\"4448\":{\"t\":\"另外，很多顶级的开源项目都用到了 ZooKeeper，比如：\"},\"4449\":{\"t\":\"Kafka : ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。不过，在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构。\"},\"4450\":{\"h\":\"ZAB算法\",\"a\":\"zab算法\"},\"4451\":{\"h\":\"ZAB 协议介绍\",\"a\":\"zab-协议介绍\"},\"4452\":{\"t\":\"ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\"},\"4453\":{\"h\":\"ZAB 协议两种基本的模式：崩溃恢复和消息广播\",\"a\":\"zab-协议两种基本的模式-崩溃恢复和消息广播\"},\"4454\":{\"t\":\"ZAB 协议包括两种基本的模式，分别是\"},\"4455\":{\"t\":\"崩溃恢复 ：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致。\"},\"4456\":{\"t\":\"消息广播 ：当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进入消息广播模式了。 当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\"},\"4457\":{\"h\":\"Zookeeper 架构\",\"a\":\"zookeeper-架构\"},\"4458\":{\"t\":\"作为一个优秀高效且可靠的分布式协调框架，ZooKeeper 在解决分布式数据一致性问题时并没有直接使用 Paxos ，而是专门定制了一致性协议叫做 ZAB(ZooKeeper Atomic Broadcast) 原子广播协议，该协议能够很好地支持 崩溃恢复 。\"},\"4459\":{\"h\":\"ZAB 中的三个角色\",\"a\":\"zab-中的三个角色\"},\"4460\":{\"t\":\"和介绍 Paxos 一样，在介绍 ZAB 协议之前，我们首先来了解一下在 ZAB 中三个主要的角色，Leader 领导者、Follower跟随者、Observer观察者 。\"},\"4461\":{\"t\":\"Leader ：集群中 唯一的写请求处理者 ，能够发起投票（投票也是为了进行写请求）。\"},\"4462\":{\"t\":\"Follower：能够接收客户端的请求，如果是读请求则可以自己处理，如果是写请求则要转发给 Leader 。在选举过程中会参与投票，有选举权和被选举权 。\"},\"4463\":{\"t\":\"Observer ：就是没有选举权和被选举权的 Follower 。\"},\"4464\":{\"t\":\"在 ZAB 协议中对 zkServer(即上面我们说的三个角色的总称) 还有两种模式的定义，分别是 消息广播 和 崩溃恢复 。\"},\"4465\":{\"h\":\"消息广播模式\",\"a\":\"消息广播模式\"},\"4466\":{\"t\":\"说白了就是 ZAB 协议是如何处理写请求的，上面我们不是说只有 Leader 能处理写请求嘛？那么我们的 Follower 和 Observer 是不是也需要 同步更新数据 呢？总不能数据只在 Leader 中更新了，其他角色都没有得到更新吧？\"},\"4467\":{\"t\":\"第一步肯定需要 Leader 将写请求 广播 出去呀，让 Leader 问问 Followers 是否同意更新，如果超过半数以上的同意那么就进行 Follower 和 Observer 的更新（和 Paxos 一样）。\"},\"4468\":{\"t\":\"在 Leader 这端，它为每个其他的 zkServer 准备了一个 队列 ，采用先进先出的方式发送消息。由于协议是 通过 TCP 来进行网络通信的，保证了消息的发送顺序性，接受顺序性也得到了保证。\"},\"4469\":{\"t\":\"除此之外，在 ZAB 中还定义了一个 全局单调递增的事务ID ZXID ，它是一个64位long型，其中高32位表示 epoch 年代，低32位表示事务id。epoch 是会根据 Leader 的变化而变化的，当一个 Leader 挂了，新的 Leader 上位的时候，年代（epoch）就变了。而低32位可以简单理解为递增的事务id。\"},\"4470\":{\"t\":\"定义这个的原因也是为了顺序性，每个 proposal 在 Leader 中生成后需要 通过其 ZXID 来进行排序 ，才能得到处理。\"},\"4471\":{\"h\":\"崩溃恢复模式\",\"a\":\"崩溃恢复模式\"},\"4472\":{\"t\":\"说到崩溃恢复我们首先要提到 ZAB 中的 Leader 选举算法，当系统出现崩溃影响最大应该是 Leader 的崩溃，因为我们只有一个 Leader ，所以当 Leader 出现问题的时候我们势必需要重新选举 Leader 。\"},\"4473\":{\"t\":\"Leader 选举可以分为两个不同的阶段，第一个是我们提到的 Leader 宕机需要重新选举，第二则是当 Zookeeper 启动时需要进行系统的 Leader 初始化选举。下面我先来介绍一下 ZAB 是如何进行初始化选举的。\"},\"4474\":{\"t\":\"假设我们集群中有3台机器，那也就意味着我们需要两台以上同意（超过半数）。比如这个时候我们启动了 server1 ，它会首先 投票给自己 ，投票内容为服务器的 myid 和 ZXID ，因为初始化所以 ZXID 都为0，此时 server1 发出的投票为 (1,0)。但此时 server1 的投票仅为1，所以不能作为 Leader ，此时还在选举阶段所以整个集群处于 Looking 状态。\"},\"4475\":{\"t\":\"接着 server2 启动了，它首先也会将投票选给自己(2,0)，并将投票信息广播出去（server1也会，只是它那时没有其他的服务器了），server1 在收到 server2 的投票信息后会将投票信息与自己的作比较。首先它会比较 ZXID ，ZXID 大的优先为 Leader，如果相同则比较 myid，myid 大的优先作为 Leader。所以此时server1 发现 server2 更适合做 Leader，它就会将自己的投票信息更改为(2,0)然后再广播出去，之后server2 收到之后发现和自己的一样无需做更改，并且自己的 投票已经超过半数 ，则 确定 server2 为 Leader，server1 也会将自己服务器设置为 Following 变为 Follower。整个服务器就从 Looking 变为了正常状态。\"},\"4476\":{\"t\":\"当 server3 启动发现集群没有处于 Looking 状态时，它会直接以 Follower 的身份加入集群。\"},\"4477\":{\"t\":\"还是前面三个 server 的例子，如果在整个集群运行的过程中 server2 挂了，那么整个集群会如何重新选举 Leader 呢？其实和初始化选举差不多。\"},\"4478\":{\"t\":\"首先毫无疑问的是剩下的两个 Follower 会将自己的状态 从 Following 变为 Looking 状态 ，然后每个 server 会向初始化投票一样首先给自己投票（这不过这里的 zxid 可能不是0了，这里为了方便随便取个数字）。\"},\"4479\":{\"t\":\"假设 server1 给自己投票为(1,99)，然后广播给其他 server，server3 首先也会给自己投票(3,95)，然后也广播给其他 server。server1 和 server3 此时会收到彼此的投票信息，和一开始选举一样，他们也会比较自己的投票和收到的投票（zxid 大的优先，如果相同那么就 myid 大的优先）。这个时候 server1 收到了 server3 的投票发现没自己的合适故不变，server3 收到 server1 的投票结果后发现比自己的合适于是更改投票为(1,99)然后广播出去，最后 server1 收到了发现自己的投票已经超过半数就把自己设为 Leader，server3 也随之变为 Follower。\"},\"4480\":{\"t\":\"请注意 ZooKeeper 为什么要设置奇数个结点？比如这里我们是三个，挂了一个我们还能正常工作，挂了两个我们就不能正常工作了（已经没有超过半数的节点数了，所以无法进行投票等操作了）。而假设我们现在有四个，挂了一个也能工作，但是挂了两个也不能正常工作了，这是和三个一样的，而三个比四个还少一个，带来的效益是一样的，所以 Zookeeper 推荐奇数个 server 。\"},\"4481\":{\"t\":\"那么说完了 ZAB 中的 Leader 选举方式之后我们再来了解一下 崩溃恢复 是什么玩意？\"},\"4482\":{\"t\":\"其实主要就是 当集群中有机器挂了，我们整个集群如何保证数据一致性？\"},\"4483\":{\"t\":\"如果只是 Follower 挂了，而且挂的没超过半数的时候，因为我们一开始讲了在 Leader 中会维护队列，所以不用担心后面的数据没接收到导致数据不一致性。\"},\"4484\":{\"t\":\"如果 Leader 挂了那就麻烦了，我们肯定需要先暂停服务变为 Looking 状态然后进行 Leader 的重新选举（上面我讲过了），但这个就要分为两种情况了，分别是 确保已经被Leader提交的提案最终能够被所有的Follower提交 和 跳过那些已经被丢弃的提案 。\"},\"4485\":{\"t\":\"确保已经被Leader提交的提案最终能够被所有的Follower提交是什么意思呢？\"},\"4486\":{\"t\":\"假设 Leader (server2) 发送 commit 请求（忘了请看上面的消息广播模式），他发送给了 server3，然后要发给 server1 的时候突然挂了。这个时候重新选举的时候我们如果把 server1 作为 Leader 的话，那么肯定会产生数据不一致性，因为 server3 肯定会提交刚刚 server2 发送的 commit 请求的提案，而 server1 根本没收到所以会丢弃。\"},\"4487\":{\"t\":\"崩溃恢复\"},\"4488\":{\"t\":\"那怎么解决呢？\"},\"4489\":{\"t\":\"聪明的同学肯定会质疑，这个时候 server1 已经不可能成为 Leader 了，因为 server1 和 server3 进行投票选举的时候会比较 ZXID ，而此时 server3 的 ZXID 肯定比 server1 的大了。(不理解可以看前面的选举算法)\"},\"4490\":{\"t\":\"那么跳过那些已经被丢弃的提案又是什么意思呢？\"},\"4491\":{\"t\":\"假设 Leader (server2) 此时同意了提案N1，自身提交了这个事务并且要发送给所有 Follower 要 commit 的请求，却在这个时候挂了，此时肯定要重新进行 Leader 的选举，比如说此时选 server1 为 Leader （这无所谓）。但是过了一会，这个 挂掉的 Leader 又重新恢复了 ，此时它肯定会作为 Follower 的身份进入集群中，需要注意的是刚刚 server2 已经同意提交了提案N1，但其他 server 并没有收到它的 commit 信息，所以其他 server 不可能再提交这个提案N1了，这样就会出现数据不一致性问题了，所以 该提案N1最终需要被抛弃掉 。\"},\"4492\":{\"t\":\"崩溃恢复\"},\"4493\":{\"h\":\"CAP\",\"a\":\"cap\"},\"4494\":{\"h\":\"简介\",\"a\":\"简介\"},\"4495\":{\"t\":\"CAP 也就是 Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性） 这三个单词首字母组合。\"},\"4496\":{\"t\":\"img\"},\"4497\":{\"t\":\"在理论计算机科学中，CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能同时满足以下三点中的两个：\"},\"4498\":{\"t\":\"一致性（Consistency） : 所有节点访问同一份最新的数据副本\"},\"4499\":{\"t\":\"可用性（Availability）: 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\"},\"4500\":{\"t\":\"分区容错性（Partition Tolerance） : 分布式系统出现网络分区的时候，仍然能够对外提供服务。\"},\"4501\":{\"t\":\"什么是网络分区？\"},\"4502\":{\"t\":\"分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫 网络分区。\"},\"4503\":{\"h\":\"不是所谓的“3 选 2”\",\"a\":\"不是所谓的-3-选-2\"},\"4504\":{\"t\":\"大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。\"},\"4505\":{\"t\":\"当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。\"},\"4506\":{\"t\":\"简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。\"},\"4507\":{\"t\":\"因此，分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。 比如 ZooKeeper 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。\"},\"4508\":{\"t\":\"为啥不可能选择 CA 架构呢？ 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。\"},\"4509\":{\"t\":\"选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。\"},\"4510\":{\"t\":\"另外，需要补充说明的一点是： 如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。\"},\"4511\":{\"h\":\"操作系统\"},\"4512\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"4513\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"4514\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"4515\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"4516\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"4517\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"4518\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"4519\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"4520\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"4521\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"4522\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"4523\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"4524\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"4525\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"4526\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"4527\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"4528\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"4529\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"4530\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"4531\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"4532\":{\"t\":\"锁：加锁、解锁操作；\"},\"4533\":{\"t\":\"信号量：P、V 操作；\"},\"4534\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"4535\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"4536\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"4537\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"4538\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"4539\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"4540\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"4541\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"4542\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"4543\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"4544\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"4545\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"4546\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"4547\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"4548\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"4549\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"4550\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"4551\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"4552\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"4553\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"4554\":{\"t\":\"img\"},\"4555\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"4556\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"4557\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"4558\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"4559\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"4560\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"4561\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"4562\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"4563\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"4564\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"4565\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"4566\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"4567\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"4568\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"4569\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"4570\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"4571\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"4572\":{\"t\":\"mmap + write\"},\"4573\":{\"t\":\"sendfile\"},\"4574\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"4575\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"4576\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"4577\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"4578\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"4579\":{\"t\":\"img\"},\"4580\":{\"t\":\"具体过程如下：\"},\"4581\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"4582\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"4583\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"4584\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"4585\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"4586\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"4587\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"4588\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"4589\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"4590\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"4591\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"4592\":{\"t\":\"img\"},\"4593\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"4594\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"4595\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"4596\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"4597\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"4598\":{\"t\":\"img\"},\"4599\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"4600\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"4601\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"4602\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"4603\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"4604\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"4605\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"4606\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"4607\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"4608\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"4609\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"4610\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"4611\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"4612\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"4613\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"4614\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"4615\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"4616\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"4617\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"4618\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"4619\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"4620\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"4621\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"4622\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"4623\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"4624\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"4625\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"4626\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"4627\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"4628\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"4629\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"4630\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"4631\":{\"t\":\"img\"},\"4632\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"4633\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"4634\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"4635\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"4636\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"4637\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"4638\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"4639\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"4640\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"4641\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"4642\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"4643\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"4644\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"4645\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"4646\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"4647\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"4648\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"4649\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"4650\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"4651\":{\"t\":\"img\"},\"4652\":{\"t\":\"详细说一下这个方案：\"},\"4653\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"4654\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"4655\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"4656\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"4657\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"4658\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"4659\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"4660\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"4661\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"4662\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"4663\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"4664\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"4665\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"4666\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"4667\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"4668\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"4669\":{\"t\":\"img\"},\"4670\":{\"t\":\"方案详细说明如下：\"},\"4671\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"4672\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"4673\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"4674\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"4675\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"4676\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"4677\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"4678\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"4679\":{\"h\":\"MySQL\"},\"4680\":{\"h\":\"MySQL\",\"a\":\"mysql\"},\"4681\":{\"h\":\"InnoDB特性\",\"a\":\"innodb特性\"},\"4682\":{\"h\":\"MyISAM 和 InnoDB 有什么区别？\",\"a\":\"myisam-和-innodb-有什么区别\"},\"4683\":{\"t\":\"MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，可谓是风光一时。\"},\"4684\":{\"t\":\"虽然，MyISAM 的性能还行，各种特性也还不错（比如全文索引、压缩、空间函数等）。但是，MyISAM 不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。\"},\"4685\":{\"t\":\"MySQL 5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。\"},\"4686\":{\"t\":\"言归正传！咱们下面还是来简单对比一下两者：\"},\"4687\":{\"t\":\"1.是否支持行级锁\"},\"4688\":{\"t\":\"MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。\"},\"4689\":{\"t\":\"也就说，MyISAM 一锁就是锁住了整张表，这在并发写的情况下是多么滴憨憨啊！这也是为什么 InnoDB 在并发写的时候，性能更牛皮了！\"},\"4690\":{\"t\":\"2.是否支持事务\"},\"4691\":{\"t\":\"MyISAM 不提供事务支持。\"},\"4692\":{\"t\":\"InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别，具有提交(commit)和回滚(rollback)事务的能力。并且，InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）。\"},\"4693\":{\"t\":\"3.是否支持外键\"},\"4694\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"4695\":{\"t\":\"外键对于维护数据一致性非常有帮助，但是对性能有一定的损耗。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，在业务代码中进行约束即可！\"},\"4696\":{\"t\":\"阿里的《Java 开发手册》也是明确规定禁止使用外键的。\"},\"4697\":{\"t\":\"4.是否支持数据库异常崩溃后的安全恢复\"},\"4698\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"4699\":{\"t\":\"使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 redo log 。\"},\"4700\":{\"t\":\"5.是否支持 MVCC\"},\"4701\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"4702\":{\"t\":\"讲真，这个对比有点废话，毕竟 MyISAM 连行级锁都不支持。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能。\"},\"4703\":{\"t\":\"6.索引实现不一样。\"},\"4704\":{\"t\":\"虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。\"},\"4705\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。\"},\"4706\":{\"h\":\"索引\",\"a\":\"索引\"},\"4707\":{\"t\":\"索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。\"},\"4708\":{\"h\":\"底层数据结构：\",\"a\":\"底层数据结构\"},\"4709\":{\"t\":\"Hash 表\"},\"4710\":{\"t\":\"哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。\"},\"4711\":{\"t\":\"为何能够通过 key 快速取出 value 呢？ 原因在于 哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。\"},\"4712\":{\"t\":\"既然哈希表这么快，为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。\"},\"4713\":{\"t\":\"B 树& B+树\"},\"4714\":{\"t\":\"B 树也称 B-树,全称为 多路平衡查找树 ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 Balanced （平衡）的意思。\"},\"4715\":{\"t\":\"目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。\"},\"4716\":{\"t\":\"B 树& B+树两者有何异同呢？\"},\"4717\":{\"t\":\"B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\"},\"4718\":{\"t\":\"B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。\"},\"4719\":{\"t\":\"B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\"},\"4720\":{\"t\":\"在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）\"},\"4721\":{\"t\":\"MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引（非聚集索引）”。\"},\"4722\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“聚簇索引（聚集索引）”，而其余的索引都作为 辅助索引 ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。\"},\"4723\":{\"h\":\"类型总结\",\"a\":\"类型总结\"},\"4724\":{\"t\":\"按照数据结构维度划分：\"},\"4725\":{\"t\":\"BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。\"},\"4726\":{\"t\":\"哈希索引：类似键值对的形式，一次即可定位。\"},\"4727\":{\"t\":\"RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"4728\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"4729\":{\"t\":\"按照底层存储方式角度划分：\"},\"4730\":{\"t\":\"聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。\"},\"4731\":{\"t\":\"非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"4732\":{\"t\":\"按照应用维度划分：\"},\"4733\":{\"t\":\"主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。\"},\"4734\":{\"t\":\"普通索引：仅加速查询。\"},\"4735\":{\"t\":\"唯一索引：加速查询 + 列值唯一（可以有 NULL）。\"},\"4736\":{\"t\":\"覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。\"},\"4737\":{\"t\":\"联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。\"},\"4738\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"4739\":{\"h\":\"主键索引：\",\"a\":\"主键索引\"},\"4740\":{\"t\":\"数据表的主键列使用的就是主键索引。\"},\"4741\":{\"t\":\"一张数据表有只能有一个主键，并且主键不能为 null，不能重复。\"},\"4742\":{\"t\":\"在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。\"},\"4743\":{\"t\":\"img\"},\"4744\":{\"h\":\"二级索引：\",\"a\":\"二级索引\"},\"4745\":{\"t\":\"二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。\"},\"4746\":{\"t\":\"唯一索引，普通索引，前缀索引等索引属于二级索引。\"},\"4747\":{\"t\":\"PS: 不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。\"},\"4748\":{\"t\":\"唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。\"},\"4749\":{\"t\":\"普通索引(Index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。\"},\"4750\":{\"t\":\"前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。\"},\"4751\":{\"t\":\"全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。\"},\"4752\":{\"t\":\"img\"},\"4753\":{\"h\":\"聚簇索引：\",\"a\":\"聚簇索引\"},\"4754\":{\"t\":\"聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。\"},\"4755\":{\"t\":\"在 MySQL 中，InnoDB 引擎的表的 .ibd文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。\"},\"4756\":{\"t\":\"优点 ：\"},\"4757\":{\"t\":\"查询速度非常快 ：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。\"},\"4758\":{\"t\":\"对排序查找和范围查找优化 ：聚簇索引对于主键的排序查找和范围查找速度非常快。\"},\"4759\":{\"t\":\"缺点 ：\"},\"4760\":{\"t\":\"依赖于有序的数据 ：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。\"},\"4761\":{\"t\":\"更新代价大 ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。\"},\"4762\":{\"h\":\"非聚簇索引：\",\"a\":\"非聚簇索引\"},\"4763\":{\"t\":\"非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"4764\":{\"t\":\"非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。\"},\"4765\":{\"t\":\"优点 ：\"},\"4766\":{\"t\":\"更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的\"},\"4767\":{\"t\":\"缺点 ：\"},\"4768\":{\"t\":\"依赖于有序的数据 ：跟聚簇索引一样，非聚簇索引也依赖于有序的数据\"},\"4769\":{\"t\":\"可能会二次查询(回表) ：这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。\"},\"4770\":{\"h\":\"覆盖索引：\",\"a\":\"覆盖索引\"},\"4771\":{\"t\":\"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 覆盖索引（Covering Index） 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！\"},\"4772\":{\"t\":\"覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。\"},\"4773\":{\"t\":\"如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。\"},\"4774\":{\"h\":\"联合索引：\",\"a\":\"联合索引\"},\"4775\":{\"t\":\"使用表中的多个字段创建索引，就是 联合索引，也叫 组合索引 或 复合索引。\"},\"4776\":{\"t\":\"最左前缀匹配原则\"},\"4777\":{\"t\":\"最左前缀匹配原则指的是，在使用联合索引时，MySQL 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 >、<）才会停止匹配。对于 >=、<=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。\"},\"4778\":{\"t\":\"索引下推\"},\"4779\":{\"t\":\"索引下推（Index Condition Pushdown） 是 MySQL 5.6 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。\"},\"4780\":{\"h\":\"正确使用索引的一些建议：\",\"a\":\"正确使用索引的一些建议\"},\"4781\":{\"t\":\"选择合适的字段创建索引：\"},\"4782\":{\"t\":\"不为 NULL 的字段 ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。\"},\"4783\":{\"t\":\"被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。\"},\"4784\":{\"t\":\"被作为条件查询的字段 ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。\"},\"4785\":{\"t\":\"频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。\"},\"4786\":{\"t\":\"被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。\"},\"4787\":{\"t\":\"被频繁更新的字段应该慎重建立索引：\"},\"4788\":{\"t\":\"虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。\"},\"4789\":{\"t\":\"限制每张表上的索引数量：\"},\"4790\":{\"t\":\"索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。\"},\"4791\":{\"t\":\"索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。\"},\"4792\":{\"t\":\"因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。\"},\"4793\":{\"t\":\"尽可能的考虑建立联合索引而不是单列索引：\"},\"4794\":{\"t\":\"因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。\"},\"4795\":{\"t\":\"注意避免冗余索引：\"},\"4796\":{\"t\":\"冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\"},\"4797\":{\"t\":\"字符串类型的字段使用前缀索引代替普通索引：\"},\"4798\":{\"t\":\"前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。\"},\"4799\":{\"t\":\"避免索引失效：\"},\"4800\":{\"t\":\"索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：\"},\"4801\":{\"t\":\"使用 SELECT * 进行查询;\"},\"4802\":{\"t\":\"创建了组合索引，但查询条件未遵守最左匹配原则;\"},\"4803\":{\"t\":\"在索引列上进行计算、函数、类型转换等操作;\"},\"4804\":{\"t\":\"以 % 开头的 LIKE 查询比如 like '%abc';\"},\"4805\":{\"t\":\"查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;\"},\"4806\":{\"t\":\"发生隐式转换\"},\"4807\":{\"h\":\"锁机制\",\"a\":\"锁机制\"},\"4808\":{\"t\":\"在 MySQL 里，根据加锁的范围，可以分为全局锁、表级锁和行锁三类。\"},\"4809\":{\"t\":\"img\"},\"4810\":{\"h\":\"全局锁：\",\"a\":\"全局锁\"},\"4811\":{\"t\":\"要使用全局锁，则要执行这条命令：\"},\"4812\":{\"t\":\"flush tables with read lock \"},\"4813\":{\"t\":\"执行后，整个数据库就处于只读状态了，这时其他线程执行以下操作，都会被阻塞：\"},\"4814\":{\"t\":\"对数据的增删改操作，比如 insert、delete、update等语句；\"},\"4815\":{\"t\":\"对表结构的更改操作，比如 alter table、drop table 等语句。\"},\"4816\":{\"t\":\"如果要释放全局锁，则要执行这条命令：\"},\"4817\":{\"t\":\"unlock tables \"},\"4818\":{\"t\":\"全局锁应用场景是什么？\"},\"4819\":{\"t\":\"全局锁主要应用于做全库逻辑备份，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。\"},\"4820\":{\"t\":\"加全局锁又会带来什么缺点呢？\"},\"4821\":{\"t\":\"加上全局锁，意味着整个数据库都是只读状态。\"},\"4822\":{\"t\":\"那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。\"},\"4823\":{\"t\":\"既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？\"},\"4824\":{\"t\":\"有的，如果数据库的引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。\"},\"4825\":{\"t\":\"因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。\"},\"4826\":{\"t\":\"备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 –single-transaction 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。\"},\"4827\":{\"t\":\"InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。\"},\"4828\":{\"t\":\"但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。\"},\"4829\":{\"h\":\"表级锁：\",\"a\":\"表级锁\"},\"4830\":{\"t\":\"MySQL 里面表级别的锁有这几种：\"},\"4831\":{\"t\":\"表锁；\"},\"4832\":{\"t\":\"元数据锁（MDL）;\"},\"4833\":{\"t\":\"意向锁；\"},\"4834\":{\"t\":\"AUTO-INC 锁；\"},\"4835\":{\"h\":\"表锁\",\"a\":\"表锁\"},\"4836\":{\"t\":\"先来说说表锁。\"},\"4837\":{\"t\":\"如果我们想对学生表（t_student）加表锁，可以使用下面的命令：\"},\"4838\":{\"t\":\"//表级别的共享锁，也就是读锁； lock tables t_student read; //表级别的独占锁，也就是写锁； lock tables t_stuent write; \"},\"4839\":{\"t\":\"需要注意的是，表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。\"},\"4840\":{\"t\":\"也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放。\"},\"4841\":{\"t\":\"要释放表锁，可以使用下面这条命令，会释放当前会话的所有表锁：\"},\"4842\":{\"t\":\"unlock tables \"},\"4843\":{\"t\":\"另外，当会话退出后，也会释放所有表锁。\"},\"4844\":{\"t\":\"不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁。\"},\"4845\":{\"h\":\"元数据锁\",\"a\":\"元数据锁\"},\"4846\":{\"t\":\"再来说说元数据锁（MDL）。\"},\"4847\":{\"t\":\"我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：\"},\"4848\":{\"t\":\"对一张表进行 CRUD 操作时，加的是 MDL 读锁；\"},\"4849\":{\"t\":\"对一张表做结构变更操作的时候，加的是 MDL 写锁；\"},\"4850\":{\"t\":\"MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。\"},\"4851\":{\"t\":\"当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。\"},\"4852\":{\"t\":\"反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。\"},\"4853\":{\"t\":\"MDL 不需要显示调用，那它是在什么时候释放的?\"},\"4854\":{\"t\":\"MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。\"},\"4855\":{\"t\":\"那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），那在对表结构做变更操作的时候，可能会发生意想不到的事情，比如下面这个顺序的场景：\"},\"4856\":{\"t\":\"首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；\"},\"4857\":{\"t\":\"然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；\"},\"4858\":{\"t\":\"接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，\"},\"4859\":{\"t\":\"那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。\"},\"4860\":{\"t\":\"为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？\"},\"4861\":{\"t\":\"这是因为申请 MDL 锁的操作会形成一个队列，队列中写锁获取优先级高于读锁，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。\"},\"4862\":{\"t\":\"所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。\"},\"4863\":{\"h\":\"意向锁\",\"a\":\"意向锁\"},\"4864\":{\"t\":\"接着，说说意向锁。\"},\"4865\":{\"t\":\"在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；\"},\"4866\":{\"t\":\"在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；\"},\"4867\":{\"t\":\"也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。\"},\"4868\":{\"t\":\"而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。\"},\"4869\":{\"t\":\"不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：\"},\"4870\":{\"t\":\"//先在表上加上意向共享锁，然后对读取的记录加共享锁 select ... lock in share mode; //先表上加上意向独占锁，然后对读取的记录加独占锁 select ... for update; \"},\"4871\":{\"t\":\"意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables ... read*）和独占表锁（*lock tables ... write*）发生冲突。\"},\"4872\":{\"t\":\"表锁和行锁是满足读读共享、读写互斥、写写互斥的。\"},\"4873\":{\"t\":\"如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。\"},\"4874\":{\"t\":\"那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。\"},\"4875\":{\"t\":\"所以，意向锁的目的是为了快速判断表里是否有记录被加锁。\"},\"4876\":{\"h\":\"AUTO-INC 锁\",\"a\":\"auto-inc-锁\"},\"4877\":{\"t\":\"表里的主键通常都会设置成自增的，这是通过对主键字段声明 AUTO_INCREMENT 属性实现的。\"},\"4878\":{\"t\":\"之后可以在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 AUTO-INC 锁实现的。\"},\"4879\":{\"t\":\"AUTO-INC 锁是特殊的表锁机制，锁不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放。\"},\"4880\":{\"t\":\"在插入数据时，会加一个表级别的 AUTO-INC 锁，然后为被 AUTO_INCREMENT 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。\"},\"4881\":{\"t\":\"那么，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 AUTO_INCREMENT 修饰的字段的值是连续递增的。\"},\"4882\":{\"t\":\"但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。\"},\"4883\":{\"t\":\"因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种轻量级的锁来实现自增。\"},\"4884\":{\"t\":\"一样也是在插入数据的时候，会为被 AUTO_INCREMENT 修饰的字段加上轻量级锁，然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁。\"},\"4885\":{\"t\":\"InnoDB 存储引擎提供了个 innodb_autoinc_lock_mode 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。\"},\"4886\":{\"t\":\"当 innodb_autoinc_lock_mode = 0，就采用 AUTO-INC 锁，语句执行结束后才释放锁；\"},\"4887\":{\"t\":\"当 innodb_autoinc_lock_mode = 2，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。\"},\"4888\":{\"t\":\"当 innodb_autoinc_lock_mode = 1： \"},\"4889\":{\"t\":\"普通 insert 语句，自增锁在申请之后就马上释放；\"},\"4890\":{\"t\":\"类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；\"},\"4891\":{\"t\":\"当 innodb_autoinc_lock_mode = 2 是性能最高的方式，但是当搭配 binlog 的日志格式是 statement 一起使用的时候，在「主从复制的场景」中会发生数据不一致的问题。\"},\"4892\":{\"t\":\"要解决这问题，binlog 日志格式要设置为 row，这样在 binlog 里面记录的是主库分配的自增值，到备库执行的时候，主库的自增值是什么，从库的自增值就是什么。\"},\"4893\":{\"t\":\"所以，当 innodb_autoinc_lock_mode = 2 时，并且 binlog_format = row，既能提升并发性，又不会出现数据一致性问题。\"},\"4894\":{\"h\":\"行级锁：\",\"a\":\"行级锁\"},\"4895\":{\"t\":\"InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。\"},\"4896\":{\"t\":\"前面也提到，普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为锁定读。\"},\"4897\":{\"t\":\"//对读取的记录加共享锁 select ... lock in share mode; //对读取的记录加独占锁 select ... for update; \"},\"4898\":{\"t\":\"上面这两条语句必须在一个事务中，因为当事务提交了，锁就会被释放，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。\"},\"4899\":{\"t\":\"共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。\"},\"4900\":{\"t\":\"img\"},\"4901\":{\"t\":\"行级锁的类型主要有三类：\"},\"4902\":{\"t\":\"Record Lock，记录锁，也就是仅仅把一条记录锁上；\"},\"4903\":{\"t\":\"Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"},\"4904\":{\"t\":\"Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"4905\":{\"h\":\"Record Lock\",\"a\":\"record-lock\"},\"4906\":{\"t\":\"Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：\"},\"4907\":{\"t\":\"当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;\"},\"4908\":{\"t\":\"当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。\"},\"4909\":{\"h\":\"Gap Lock\",\"a\":\"gap-lock\"},\"4910\":{\"t\":\"Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。\"},\"4911\":{\"t\":\"假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。\"},\"4912\":{\"t\":\"间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。\"},\"4913\":{\"h\":\"Next-Key Lock\",\"a\":\"next-key-lock\"},\"4914\":{\"t\":\"Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"4915\":{\"t\":\"所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。\"},\"4916\":{\"t\":\"next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。\"},\"4917\":{\"t\":\"比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。\"},\"4918\":{\"t\":\"虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。\"},\"4919\":{\"h\":\"插入意向锁\",\"a\":\"插入意向锁\"},\"4920\":{\"t\":\"一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。\"},\"4921\":{\"t\":\"如果有的话，插入操作就会发生阻塞，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个插入意向锁，表明有事务想在某个区间插入新记录，但是现在处于等待状态。\"},\"4922\":{\"t\":\"插入意向锁名字虽然有意向锁，但是它并不是意向锁，它是一种特殊的间隙锁，属于行级别锁。\"},\"4923\":{\"t\":\"如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。\"},\"4924\":{\"t\":\"插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。\"},\"4925\":{\"h\":\"ACID事务\",\"a\":\"acid事务\"},\"4926\":{\"t\":\"事务是由 MySQL 的引擎来实现的，我们常见的 InnoDB 引擎它是支持事务的。\"},\"4927\":{\"t\":\"不过并不是所有的引擎都能支持事务，比如 MySQL 原生的 MyISAM 引擎就不支持事务，也正是这样，所以大多数 MySQL 的引擎都是用 InnoDB。\"},\"4928\":{\"t\":\"事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：\"},\"4929\":{\"t\":\"原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。\"},\"4930\":{\"t\":\"一致性（Consistency）：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。\"},\"4931\":{\"t\":\"隔离性（Isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。\"},\"4932\":{\"t\":\"持久性（Durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\"},\"4933\":{\"t\":\"InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？\"},\"4934\":{\"t\":\"持久性是通过 redo log （重做日志）来保证的；\"},\"4935\":{\"t\":\"原子性是通过 undo log（回滚日志） 来保证的；\"},\"4936\":{\"t\":\"隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；\"},\"4937\":{\"t\":\"一致性则是通过持久性+原子性+隔离性来保证；\"},\"4938\":{\"h\":\"脏读\",\"a\":\"脏读\"},\"4939\":{\"t\":\"如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。\"},\"4940\":{\"t\":\"举个栗子。\"},\"4941\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后再执行更新操作，如果此时事务 A 还没有提交事务，而此时正好事务 B 也从数据库中读取小林的余额数据，那么事务 B 读取到的余额数据是刚才事务 A 更新后的数据，即使没有提交事务。\"},\"4942\":{\"t\":\"因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。\"},\"4943\":{\"h\":\"不可重复读\",\"a\":\"不可重复读\"},\"4944\":{\"t\":\"在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。\"},\"4945\":{\"t\":\"举个栗子。\"},\"4946\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后继续执行代码逻辑处理，在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为不可重复读。\"},\"4947\":{\"h\":\"幻读\",\"a\":\"幻读\"},\"4948\":{\"t\":\"在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。\"},\"4949\":{\"t\":\"举个栗子。\"},\"4950\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库查询账户余额大于 100 万的记录，发现共有 5 条，然后事务 B 也按相同的搜索条件也是查询出了 5 条记录。\"},\"4951\":{\"t\":\"接下来，事务 A 插入了一条余额超过 100 万的账号，并提交了事务，此时数据库超过 100 万余额的账号个数就变为 6。\"},\"4952\":{\"t\":\"然后事务 B 再次查询账户余额大于 100 万的记录，此时查询到的记录数量有 6 条，发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。\"},\"4953\":{\"h\":\"四大隔离级别\",\"a\":\"四大隔离级别\"},\"4954\":{\"t\":\"SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：\"},\"4955\":{\"t\":\"读未提交（*read uncommitted*），指一个事务还没提交时，它做的变更就能被其他事务看到；\"},\"4956\":{\"t\":\"读提交（*read committed*），指一个事务提交之后，它做的变更才能被其他事务看到；\"},\"4957\":{\"t\":\"可重复读（*repeatable read*），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别；\"},\"4958\":{\"t\":\"串行化（*serializable* ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\"},\"4959\":{\"t\":\"按隔离水平高低排序如下：\"},\"4960\":{\"t\":\"图片\"},\"4961\":{\"t\":\"针对不同的隔离级别，并发事务时可能发生的现象也会不同。也就是说：\"},\"4962\":{\"t\":\"在「读未提交」隔离级别下，可能发生脏读、不可重复读和幻读现象；\"},\"4963\":{\"t\":\"在「读提交」隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；\"},\"4964\":{\"t\":\"在「可重复读」隔离级别下，可能发生幻读现象，但是不可能脏读和不可重复读现象；\"},\"4965\":{\"t\":\"在「串行化」隔离级别下，脏读、不可重复读和幻读现象都不可能会发生。\"},\"4966\":{\"t\":\"所以，要解决脏读现象，就要升级到「读提交」以上的隔离级别；要解决不可重复读现象，就要升级到「可重复读」的隔离级别，要解决幻读现象不建议将隔离级别升级到「串行化」。\"},\"4967\":{\"t\":\"不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，我们讨论的 MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入。\"},\"4968\":{\"t\":\"MySQL 在「可重复读」隔离级别下，可以很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能。\"},\"4969\":{\"t\":\"MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象，解决的方案有两种：\"},\"4970\":{\"t\":\"针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\"},\"4971\":{\"t\":\"针对当前读（select ... for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\"},\"4972\":{\"t\":\"这四种隔离级别具体是如何实现的呢？\"},\"4973\":{\"t\":\"对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；\"},\"4974\":{\"t\":\"对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；\"},\"4975\":{\"t\":\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View。\"},\"4976\":{\"h\":\"MVCC\",\"a\":\"mvcc\"},\"4977\":{\"t\":\"MVCC 的实现依赖于：隐藏字段、Read View、undo log。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改\"},\"4978\":{\"t\":\"隐藏字段\"},\"4979\":{\"t\":\"在内部，InnoDB 存储引擎为每行数据添加了三个 隐藏字段：\"},\"4980\":{\"t\":\"DB_TRX_ID（6字节）：表示最后一次插入或更新该行的事务 id。此外，delete 操作在内部被视为更新，只不过会在记录头 Record header 中的 deleted_flag 字段将其标记为已删除\"},\"4981\":{\"t\":\"DB_ROLL_PTR（7字节） 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空\"},\"4982\":{\"t\":\"DB_ROW_ID（6字节）：如果没有设置主键且该表没有唯一非空索引时，InnoDB 会使用该 id 来生成聚簇索引\"},\"4983\":{\"t\":\"ReadView主要是用来做可见性判断，里面保存了 “当前对本事务不可见的其他活跃事务”\"},\"4984\":{\"t\":\" trx_id_t m_low_limit_id; /* 大于等于这个 ID 的事务均不可见 */ trx_id_t m_up_limit_id; /* 小于这个 ID 的事务均可见 */ trx_id_t m_creator_trx_id; /* 创建该 Read View 的事务ID */ trx_id_t m_low_limit_no; /* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */ ids_t m_ids; /* 创建 Read View 时的活跃事务列表 */ \"},\"4985\":{\"t\":\"主要有以下字段：\"},\"4986\":{\"t\":\"m_low_limit_id：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见\"},\"4987\":{\"t\":\"m_up_limit_id：活跃事务列表 m_ids 中最小的事务 ID，如果 m_ids 为空，则 m_up_limit_id 为 m_low_limit_id。小于这个 ID 的数据版本均可见\"},\"4988\":{\"t\":\"m_ids：Read View 创建时其他未提交的活跃事务 ID 列表。创建 Read View时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。m_ids 不包括当前事务自己和已提交的事务（正在内存中）\"},\"4989\":{\"t\":\"m_creator_trx_id：创建该 Read View 的事务 ID\"},\"4990\":{\"t\":\"trans_visible\"},\"4991\":{\"h\":\"undo-log\",\"a\":\"undo-log\"},\"4992\":{\"t\":\"undo log 主要有两个作用：\"},\"4993\":{\"t\":\"当事务回滚时用于将数据恢复到修改前的样子\"},\"4994\":{\"t\":\"另一个作用是 MVCC ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 undo log 读取之前的版本数据，以此实现非锁定读\"},\"4995\":{\"t\":\"在 InnoDB 存储引擎中 undo log 分为两种： insert undo log 和 update undo log：\"},\"4996\":{\"t\":\"insert undo log ：指在 insert 操作中产生的 undo log。因为 insert 操作的记录只对事务本身可见，对其他事务不可见，故该 undo log 可以在事务提交后直接删除。不需要进行 purge 操作\"},\"4997\":{\"h\":\"Jdbc防止sql注入\",\"a\":\"jdbc防止sql注入\"},\"4998\":{\"t\":\"我们只需要使用PreparedStatement解决 将敏感字符进行转义。\"},\"4999\":{\"t\":\"我们可以看到输出的SQL文是把整个参数用引号包起来，并把参数中的引号作为转义字符，从而避免了参数也作为条件的一部分。\"},\"5000\":{\"t\":\"参考：https://blog.csdn.net/weixin_52258054/article/details/124891266\"},\"5001\":{\"h\":\"常见优化手段\",\"a\":\"常见优化手段\"},\"5002\":{\"h\":\"经常一起使用的列放到一个表中\",\"a\":\"经常一起使用的列放到一个表中\"},\"5003\":{\"t\":\"避免更多的关联操作。\"},\"5004\":{\"h\":\"禁止在数据库中存储文件（比如图片）这类大的二进制数据\",\"a\":\"禁止在数据库中存储文件-比如图片-这类大的二进制数据\"},\"5005\":{\"t\":\"在数据库中存储文件会严重影响数据库性能，消耗过多存储空间。\"},\"5006\":{\"t\":\"文件（比如图片）这类大的二进制数据通常存储于文件服务器，数据库只存储文件地址信息。\"},\"5007\":{\"h\":\"优先选择符合存储需要的最小的数据类型\",\"a\":\"优先选择符合存储需要的最小的数据类型\"},\"5008\":{\"t\":\"存储字节越小，占用也就空间越小，性能也越好。\"},\"5009\":{\"h\":\"同财务相关的金额类数据必须使用 decimal 类型\",\"a\":\"同财务相关的金额类数据必须使用-decimal-类型\"},\"5010\":{\"t\":\"非精准浮点 ：float,double\"},\"5011\":{\"t\":\"精准浮点 ：decimal\"},\"5012\":{\"t\":\"decimal 类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节。并且，decimal 可用于存储比 bigint 更大的整型数据\"},\"5013\":{\"t\":\"不过， 由于 decimal 需要额外的空间和计算开销，应该尽量只在需要对数据进行精确计算时才使用 decimal 。\"},\"5014\":{\"h\":\"单表不要包含过多字段\",\"a\":\"单表不要包含过多字段\"},\"5015\":{\"t\":\"如果一个表包含过多字段的话，可以考虑将其分解成多个表，必要时增加中间表进行关联。\"},\"5016\":{\"h\":\"禁止使用全文索引\",\"a\":\"禁止使用全文索引\"},\"5017\":{\"t\":\"全文索引不适用于 OLTP 场景。\"},\"5018\":{\"h\":\"禁止给表中的每一列都建立单独的索引\",\"a\":\"禁止给表中的每一列都建立单独的索引\"},\"5019\":{\"t\":\"5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。\"},\"5020\":{\"h\":\"每个 InnoDB 表必须有个主键\",\"a\":\"每个-innodb-表必须有个主键\"},\"5021\":{\"h\":\"禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询\",\"a\":\"禁止使用-select-必须使用-select-字段列表-查询\"},\"5022\":{\"t\":\"SELECT * 消耗更多的 CPU 和 IO 以网络带宽资源\"},\"5023\":{\"t\":\"SELECT * 无法使用覆盖索引\"},\"5024\":{\"t\":\"SELECT <字段列表> 可减少表结构变更带来的影响\"},\"5025\":{\"h\":\"避免使用子查询，可以把子查询优化为 join 操作\",\"a\":\"避免使用子查询-可以把子查询优化为-join-操作\"},\"5026\":{\"t\":\"通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。\"},\"5027\":{\"t\":\"子查询性能差的原因： 子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。\"},\"5028\":{\"h\":\"Redis\"},\"5029\":{\"h\":\"Redis\",\"a\":\"redis\"},\"5030\":{\"h\":\"Redis 为什么这么快？\",\"a\":\"redis-为什么这么快\"},\"5031\":{\"t\":\"Redis 内部做了非常多的性能优化，比较重要的主要有下面 3 点：\"},\"5032\":{\"t\":\"Redis 基于内存，内存的访问速度是磁盘的上千倍；\"},\"5033\":{\"t\":\"Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；\"},\"5034\":{\"t\":\"Redis 内置了多种优化过后的数据结构实现，性能非常高。\"},\"5035\":{\"h\":\"基本数据类型\",\"a\":\"基本数据类型\"},\"5036\":{\"t\":\"5 种基础数据类型 ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\"},\"5037\":{\"t\":\"3 种特殊数据类型 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。\"},\"5038\":{\"h\":\"数据结构及适用场景\",\"a\":\"数据结构及适用场景\"},\"5039\":{\"h\":\"String（字符串）：\",\"a\":\"string-字符串\"},\"5040\":{\"h\":\"数据结构：\",\"a\":\"数据结构\"},\"5041\":{\"t\":\"String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。\"},\"5042\":{\"t\":\"SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：\"},\"5043\":{\"t\":\"SDS 不仅可以保存文本数据，还可以保存二进制数据。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。\"},\"5044\":{\"t\":\"SDS 获取字符串长度的时间复杂度是 O(1)。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 len 属性记录了字符串长度，所以复杂度为 O(1)。\"},\"5045\":{\"t\":\"Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。\"},\"5046\":{\"h\":\"应用场景：\",\"a\":\"应用场景\"},\"5047\":{\"t\":\"常规数据（比如 session、token、序列化后的对象、图片的路径）的缓存；\"},\"5048\":{\"t\":\"计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；\"},\"5049\":{\"t\":\"分布式锁(利用 SETNX key value 命令可以实现一个最简易的分布式锁)；\"},\"5050\":{\"h\":\"List（列表）：\",\"a\":\"list-列表\"},\"5051\":{\"h\":\"数据结构：\",\"a\":\"数据结构-1\"},\"5052\":{\"t\":\"List 类型的底层数据结构是由双向链表或压缩列表实现的：\"},\"5053\":{\"t\":\"如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用压缩列表作为 List 类型的底层数据结构；\"},\"5054\":{\"t\":\"如果列表的元素不满足上面的条件，Redis 会使用双向链表作为 List 类型的底层数据结构；\"},\"5055\":{\"t\":\"但是在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表。\"},\"5056\":{\"h\":\"应用场景：\",\"a\":\"应用场景-1\"},\"5057\":{\"t\":\"消息队列，List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列；\"},\"5058\":{\"h\":\"Set（集合）：\",\"a\":\"set-集合\"},\"5059\":{\"h\":\"数据结构：\",\"a\":\"数据结构-2\"},\"5060\":{\"t\":\"Set 类型的底层数据结构是由哈希表或整数集合实现的：\"},\"5061\":{\"t\":\"如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用整数集合作为 Set 类型的底层数据结构；\"},\"5062\":{\"t\":\"如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构。\"},\"5063\":{\"h\":\"应用场景：\",\"a\":\"应用场景-2\"},\"5064\":{\"t\":\"点赞、共同关注；\"},\"5065\":{\"h\":\"Hash（散列）：\",\"a\":\"hash-散列\"},\"5066\":{\"h\":\"数据结构：\",\"a\":\"数据结构-3\"},\"5067\":{\"t\":\"Hash 类型的底层数据结构是由压缩列表或哈希表实现的：\"},\"5068\":{\"t\":\"如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用压缩列表作为 Hash 类型的底层数据结构；\"},\"5069\":{\"t\":\"如果哈希类型元素不满足上面条件，Redis 会使用哈希表作为 Hash 类型的 底层数据结构。\"},\"5070\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"5071\":{\"h\":\"应用场景：\",\"a\":\"应用场景-3\"},\"5072\":{\"t\":\"Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象以及购物车；\"},\"5073\":{\"h\":\"Zset（有序集合）：\",\"a\":\"zset-有序集合\"},\"5074\":{\"h\":\"数据结构：\",\"a\":\"数据结构-4\"},\"5075\":{\"t\":\"Zset 类型的底层数据结构是由压缩列表或跳表实现的：\"},\"5076\":{\"t\":\"如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构；\"},\"5077\":{\"t\":\"如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构；\"},\"5078\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"5079\":{\"h\":\"应用场景：\",\"a\":\"应用场景-4\"},\"5080\":{\"t\":\"有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。\"},\"5081\":{\"h\":\"持久化\",\"a\":\"持久化\"},\"5082\":{\"t\":\"Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:\"},\"5083\":{\"t\":\"快照（snapshotting，RDB）\"},\"5084\":{\"t\":\"只追加文件（append-only file, AOF）\"},\"5085\":{\"t\":\"RDB 和 AOF 的混合持久化(Redis 4.0 新增)\"},\"5086\":{\"h\":\"什么是 RDB 持久化？\",\"a\":\"什么是-rdb-持久化\"},\"5087\":{\"t\":\"Redis 可以通过创建快照来获得存储在内存里面的数据在 某个时间点 上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\"},\"5088\":{\"t\":\"快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\"},\"5089\":{\"t\":\"save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。 \"},\"5090\":{\"h\":\"RDB 创建快照时会阻塞主线程吗？\",\"a\":\"rdb-创建快照时会阻塞主线程吗\"},\"5091\":{\"t\":\"Redis 提供了两个命令来生成 RDB 快照文件：\"},\"5092\":{\"t\":\"save : 同步保存操作，会阻塞 Redis 主线程；\"},\"5093\":{\"t\":\"bgsave : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。\"},\"5094\":{\"h\":\"什么是 AOF 持久化？\",\"a\":\"什么是-aof-持久化\"},\"5095\":{\"t\":\"与快照持久化相比，AOF 持久化的实时性更好。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化（Redis 6.0 之后已经默认是开启了），可以通过 appendonly 参数开启：\"},\"5096\":{\"t\":\"appendonly yes \"},\"5097\":{\"t\":\"开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到 AOF 缓冲区 server.aof_buf 中，然后再写入到 AOF 文件中（此时还在系统内核缓存区为同步到磁盘），最后再根据持久化方式（ fsync策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中的。\"},\"5098\":{\"t\":\"只有同步到磁盘中才算持久化保存了，否则依然存在数据丢失的风险，比如说：系统内核缓存区的数据还未同步，磁盘机器就宕机了，那这部分数据就算丢失了。\"},\"5099\":{\"t\":\"AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\"},\"5100\":{\"h\":\"AOF 工作基本流程是怎样的？\",\"a\":\"aof-工作基本流程是怎样的\"},\"5101\":{\"t\":\"AOF 持久化功能的实现可以简单分为 5 步：\"},\"5102\":{\"t\":\"命令追加（append） ：所有的写命令会追加到 AOF 缓冲区中。\"},\"5103\":{\"t\":\"文件写入（write） ：将 AOF 缓冲区的数据写入到 AOF 文件中。这一步需要调用write函数（系统调用），write将数据写入到了系统内核缓冲区之后直接返回了（延迟写）。注意！！！此时并没有同步到磁盘。\"},\"5104\":{\"t\":\"文件同步（fsync） ：AOF 缓冲区根据对应的持久化方式（ fsync 策略）向硬盘做同步操作。这一步需要调用 fsync 函数（系统调用）， fsync 针对单个文件操作，对其进行强制硬盘同步，fsync 将阻塞直到写入磁盘完成后返回，保证了数据持久化。\"},\"5105\":{\"t\":\"文件重写（rewrite） ：随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。\"},\"5106\":{\"t\":\"重启加载（load） ：当 Redis 重启时，可以加载 AOF 文件进行数据恢复。\"},\"5107\":{\"t\":\"Linux 系统直接提供了一些函数用于对文件和设备进行访问和控制，这些函数被称为 系统调用（syscall）。\"},\"5108\":{\"t\":\"这里对上面提到的一些 Linux 系统调用再做一遍解释：\"},\"5109\":{\"t\":\"write ：写入系统内核缓冲区之后直接返回（仅仅是写到缓冲区），不会立即同步到硬盘。虽然提高了效率，但也带来了数据丢失的风险。同步硬盘操作通常依赖于系统调度机制，Linux 内核通常为 30s 同步一次，具体值取决于写出的数据量和 I/O 缓冲区的状态。\"},\"5110\":{\"t\":\"fsync ： fsync用于强制刷新系统内核缓冲区（同步到到磁盘），确保写磁盘操作结束才会返回。\"},\"5111\":{\"t\":\"AOF 工作流程图如下：\"},\"5112\":{\"t\":\"AOF 工作基本流程\"},\"5113\":{\"h\":\"删除与淘汰策略\",\"a\":\"删除与淘汰策略\"},\"5114\":{\"h\":\"过期的数据的删除策略了解么？\",\"a\":\"过期的数据的删除策略了解么\"},\"5115\":{\"t\":\"如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？\"},\"5116\":{\"t\":\"常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：\"},\"5117\":{\"t\":\"惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。\"},\"5118\":{\"t\":\"定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。\"},\"5119\":{\"t\":\"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性/懒汉式删除 。\"},\"5120\":{\"t\":\"但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。\"},\"5121\":{\"t\":\"怎么解决这个问题呢？答案就是：Redis 内存淘汰机制。\"},\"5122\":{\"h\":\"Redis 内存淘汰机制了解么？\",\"a\":\"redis-内存淘汰机制了解么\"},\"5123\":{\"t\":\"相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?\"},\"5124\":{\"t\":\"Redis 提供 6 种数据淘汰策略：\"},\"5125\":{\"t\":\"volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰。\"},\"5126\":{\"t\":\"volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰。\"},\"5127\":{\"t\":\"volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰。\"},\"5128\":{\"t\":\"allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。\"},\"5129\":{\"t\":\"allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰。\"},\"5130\":{\"t\":\"no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\"},\"5131\":{\"t\":\"4.0 版本后增加以下两种：\"},\"5132\":{\"t\":\"volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰。\"},\"5133\":{\"t\":\"allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。\"},\"5134\":{\"h\":\"主从复制\",\"a\":\"主从复制\"},\"5135\":{\"h\":\"哨兵\",\"a\":\"哨兵\"},\"5136\":{\"h\":\"缓存雪崩/击穿/穿透\",\"a\":\"缓存雪崩-击穿-穿透\"},\"5137\":{\"h\":\"什么是缓存穿透？\",\"a\":\"什么是缓存穿透\"},\"5138\":{\"t\":\"缓存穿透说简单点就是大量请求的 key 是不合理的，根本不存在于缓存中，也不存在于数据库中 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"5139\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法\"},\"5140\":{\"t\":\"最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。\"},\"5141\":{\"t\":\"1）缓存无效 key\"},\"5142\":{\"t\":\"如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： SET key value EX 10086 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。\"},\"5143\":{\"t\":\"2）布隆过滤器\"},\"5144\":{\"t\":\"布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。\"},\"5145\":{\"t\":\"具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\"},\"5146\":{\"t\":\"但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。\"},\"5147\":{\"t\":\"为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！\"},\"5148\":{\"t\":\"我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：\"},\"5149\":{\"t\":\"使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。\"},\"5150\":{\"t\":\"根据得到的哈希值，在位数组中把对应下标的值置为 1。\"},\"5151\":{\"t\":\"我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：\"},\"5152\":{\"t\":\"对给定元素再次进行相同的哈希计算；\"},\"5153\":{\"t\":\"得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。\"},\"5154\":{\"t\":\"然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）\"},\"5155\":{\"h\":\"什么是缓存击穿？\",\"a\":\"什么是缓存击穿\"},\"5156\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"5157\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-1\"},\"5158\":{\"t\":\"设置热点数据永不过期或者过期时间比较长。\"},\"5159\":{\"t\":\"针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。\"},\"5160\":{\"t\":\"请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。\"},\"5161\":{\"h\":\"缓存穿透和缓存击穿有什么区别？\",\"a\":\"缓存穿透和缓存击穿有什么区别\"},\"5162\":{\"t\":\"缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。\"},\"5163\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。\"},\"5164\":{\"h\":\"什么是缓存雪崩？\",\"a\":\"什么是缓存雪崩\"},\"5165\":{\"t\":\"我发现缓存雪崩这名字起的有点意思，哈哈。\"},\"5166\":{\"t\":\"实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。\"},\"5167\":{\"t\":\"另外，缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。\"},\"5168\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-2\"},\"5169\":{\"t\":\"针对 Redis 服务不可用的情况：\"},\"5170\":{\"t\":\"采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。\"},\"5171\":{\"t\":\"限流，避免同时处理大量的请求。\"},\"5172\":{\"t\":\"针对热点缓存失效的情况：\"},\"5173\":{\"t\":\"设置不同的失效时间比如随机设置缓存的失效时间。\"},\"5174\":{\"t\":\"缓存永不失效（不太推荐，实用性太差）。\"},\"5175\":{\"t\":\"设置二级缓存。\"},\"5176\":{\"h\":\"缓存雪崩和缓存击穿有什么区别？\",\"a\":\"缓存雪崩和缓存击穿有什么区别\"},\"5177\":{\"t\":\"缓存雪崩和缓存击穿比较像，但缓存雪崩导致的原因是缓存中的大量或者所有数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。\"},\"5178\":{\"h\":\"redis 6.0 多线程的实现机制：\",\"a\":\"redis-6-0-多线程的实现机制\"},\"5179\":{\"t\":\"https://blog.csdn.net/zhizhengguan/article/details/120627481\"},\"5180\":{\"h\":\"Kafka\"},\"5181\":{\"h\":\"数据保存的策略\",\"a\":\"数据保存的策略\"},\"5182\":{\"t\":\"kafka 有两种数据保存策略:\"},\"5183\":{\"t\":\"1、按照过期时间保留\"},\"5184\":{\"t\":\"2、按照存储的消息大小保留\"},\"5185\":{\"t\":\"Kafka Broker默认的消息保留策略是：要么保留一定时间，要么保留到消息达到一定大小的字节数。\"},\"5186\":{\"t\":\"当消息达到设置的条件上限时，旧消息就会过期并被删除，所以，在任何时刻，可用消息的总量都不会超过配置参数所指定的大小。\"},\"5187\":{\"t\":\"topic可以配置自己的保留策略，可以将消息保留到不再使用他们为止。\"},\"5188\":{\"t\":\"因为在一个大文件里查找和删除消息是很费时的事，也容易出错，所以，分区被划分为若干个片段。默认情况下，每个片段包含1G或者一周的数据，以较小的那个为准。在broker往leader分区写入消息时，如果达到片段上限，就关闭当前文件，并打开一个新文件。当前正在写入数据的片段叫活跃片段。当所有片段都被写满时，会清除下一个分区片段的数据，如果配置的是7个片段，每天打开一个新片段，就会删除一个最老的片段，循环使用所有片段。\"},\"5189\":{\"t\":\"kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？ 这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。\"},\"5190\":{\"h\":\"分区策略\",\"a\":\"分区策略\"},\"5191\":{\"h\":\"生产者：\",\"a\":\"生产者\"},\"5192\":{\"t\":\"为什么要分区\"},\"5193\":{\"t\":\"多Partition分布式存储，利于集群数据的均衡。\"},\"5194\":{\"t\":\"并发读写，加快读写速度。\"},\"5195\":{\"t\":\"加快数据恢复的速率：当某台机器挂了，每个Topic仅需恢复一部分的数据，多机器并发。\"},\"5196\":{\"t\":\"分区的原则\"},\"5197\":{\"t\":\"指明partition的情况下，使用指定的partition；\"},\"5198\":{\"t\":\"没有指明partition，但是有key的情况下，将key的hash值与topic的partition数进行取余得到partition值；\"},\"5199\":{\"t\":\"既没有指定partition，也没有key的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与topic可用的partition数取余得到partition值，也就是常说的round-robin算法。\"},\"5200\":{\"t\":\"public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) { List<PartitionInfo> partitions = cluster.partitionsForTopic(topic); int numPartitions = partitions.size(); if (keyBytes == null) { //key为空时，获取一个自增的计数，然后对分区做取模得到分区编号 int nextValue = nextValue(topic); List<PartitionInfo> availablePartitions = cluster.availablePartitionsForTopic(topic); if (availablePartitions.size() > 0) { int part = Utils.toPositive(nextValue) % availablePartitions.size(); return availablePartitions.get(part).partition(); } else { // no partitions are available, give a non-available partition return Utils.toPositive(nextValue) % numPartitions; } } else { // hash the keyBytes to choose a partition // key不为空时，通过key的hash对分区取模（疑问：为什么这里不像上面那样，使用availablePartitions呢？） // 根据《Kafka权威指南》Page45理解：为了保证相同的键，总是能路由到固定的分区，如果使用可用分区，那么因为分区数变化，会导致相同的key，路由到不同分区 // 所以如果要使用key来映射分区，最好在创建主题的时候就把分区规划好 return Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions; } } private int nextValue(String topic) { //为每个topic维护了一个AtomicInteger对象，每次获取时+1 AtomicInteger counter = topicCounterMap.get(topic); if (null == counter) { counter = new AtomicInteger(ThreadLocalRandom.current().nextInt()); AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter); if (currentCounter != null) { counter = currentCounter; } } return counter.getAndIncrement(); } \"},\"5201\":{\"h\":\"消费者：\",\"a\":\"消费者\"},\"5202\":{\"t\":\"分区分配策略\"},\"5203\":{\"t\":\"一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及到partition的分配问题，即确定哪个partition由哪个consumer来消费。Kafka提供了3种消费者分区分配策略：RangeAssigor、RoundRobinAssignor、StickyAssignor。\"},\"5204\":{\"t\":\"PartitionAssignor接口用于用户定义实现分区分配算法，以实现Consumer之间的分区分配。消费组的成员订阅它们感兴趣的Topic并将这种订阅关系传递给作为订阅组协调者的Broker。协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者。Kafka默认采用RangeAssignor的分配算法。\"},\"5205\":{\"t\":\"RangeAssignor\"},\"5206\":{\"t\":\"RangeAssignor对每个Topic进行独立的分区分配。对于每一个Topic，首先对分区按照分区ID进行排序，然后订阅这个Topic的消费组的消费者再进行排序，之后尽量均衡的将分区分配给消费者。这里只能是尽量均衡，因为分区数可能无法被消费者数量整除，那么有一些消费者就会多分配到一些分区。分配示意图如下：\"},\"5207\":{\"t\":\"f4108e1816b3087f38b546372e214958.png\"},\"5208\":{\"t\":\"分区分配的算法如下：\"},\"5209\":{\"t\":\"@Override public Map<String, List<TopicPartition>> assign(Map<String, Integer> partitionsPerTopic, Map<String, Subscription> subscriptions) { Map<String, List<String>> consumersPerTopic = consumersPerTopic(subscriptions); Map<String, List<TopicPartition>> assignment = new HashMap<>(); for (String memberId : subscriptions.keySet()) assignment.put(memberId, new ArrayList<TopicPartition>()); //for循环对订阅的多个topic分别进行处理 for (Map.Entry<String, List<String>> topicEntry : consumersPerTopic.entrySet()) { String topic = topicEntry.getKey(); List<String> consumersForTopic = topicEntry.getValue(); Integer numPartitionsForTopic = partitionsPerTopic.get(topic); if (numPartitionsForTopic == null) continue; //对消费者进行排序 Collections.sort(consumersForTopic); //计算平均每个消费者分配的分区数 int numPartitionsPerConsumer = numPartitionsForTopic / consumersForTopic.size(); //计算平均分配后多出的分区数 int consumersWithExtraPartition = numPartitionsForTopic % consumersForTopic.size(); List<TopicPartition> partitions = AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic); for (int i = 0, n = consumersForTopic.size(); i < n; i++) { //计算第i个消费者，分配分区的起始位置 int start = numPartitionsPerConsumer * i + Math.min(i, consumersWithExtraPartition); //计算第i个消费者，分配到的分区数量 int length = numPartitionsPerConsumer + (i + 1 > consumersWithExtraPartition ? 0 : 1); assignment.get(consumersForTopic.get(i)).addAll(partitions.subList(start, start + length)); } } return assignment; } \"},\"5210\":{\"t\":\"这种分配方式明显的一个问题是随着消费者订阅的Topic的数量的增加，不均衡的问题会越来越严重，比如上图中4个分区3个消费者的场景，C0会多分配一个分区。如果此时再订阅一个分区数为4的Topic，那么C0又会比C1、C2多分配一个分区，这样C0总共就比C1、C2多分配两个分区了，而且随着Topic的增加，这个情况会越来越严重。分配结果：\"},\"5211\":{\"t\":\"eff9adb5a086691e56b5d68bec68ffcf.png\"},\"5212\":{\"t\":\"订阅2个Topic，每个Topic4个分区，共3个Consumer\"},\"5213\":{\"t\":\"C0：[T0P0，T0P1，T1P0，T1P1]\"},\"5214\":{\"t\":\"C1：[T0P2，T1P2]\"},\"5215\":{\"t\":\"C2：[T0P3，T1P3]\"},\"5216\":{\"t\":\"RoundRobinAssignor\"},\"5217\":{\"t\":\"RoundRobinAssignor的分配策略是将消费组内订阅的所有Topic的分区及所有消费者进行排序后尽量均衡的分配（RangeAssignor是针对单个Topic的分区进行排序分配的）。如果消费组内，消费者订阅的Topic列表是相同的（每个消费者都订阅了相同的Topic），那么分配结果是尽量均衡的（消费者之间分配到的分区数的差值不会超过1）。如果订阅的Topic列表是不同的，那么分配结果是不保证“尽量均衡”的，因为某些消费者不参与一些Topic的分配。\"},\"5218\":{\"t\":\"51b27d00cf50d9aca86e0934ab42a565.png\"},\"5219\":{\"t\":\"以上两个topic的情况，相比于之前RangeAssignor的分配策略，可以使分区分配的更均衡。不过考虑这种情况，假设有三个消费者分别为C0、C1、C2，有3个Topic T0、T1、T2，分别拥有1、2、3个分区，并且C0订阅T0，C1订阅T0和T1，C2订阅T0、T1、T2，那么RoundRobinAssignor的分配结果如下：\"},\"5220\":{\"t\":\"4e161a06a0afcae8d2c06603d676de4e.png\"},\"5221\":{\"t\":\"看上去分配已经尽量的保证均衡了，不过可以发现C2承担了4个分区的消费而C1订阅了T1，是不是把T1P1交给C1消费能更加的均衡呢？\"},\"5222\":{\"t\":\"StickyAssignor\"},\"5223\":{\"t\":\"StickyAssignor分区分配算法，目的是在执行一次新的分配时，能在上一次分配的结果的基础上，尽量少的调整分区分配的变动，节省因分区分配变化带来的开销。Sticky是“粘性的”，可以理解为分配结果是带“粘性的”——每一次分配变更相对上一次分配做最少的变动。其目标有两点：\"},\"5224\":{\"t\":\"分区的分配尽量的均衡。\"},\"5225\":{\"t\":\"每一次重分配的结果尽量与上一次分配结果保持一致。\"},\"5226\":{\"t\":\"当这两个目标发生冲突时，优先保证第一个目标。第一个目标是每个分配算法都尽量尝试去完成的，而第二个目标才真正体现出StickyAssignor特性的。\"},\"5227\":{\"t\":\"StickyAssignor算法比较复杂，下面举例来说明分配的效果（对比RoundRobinAssignor），前提条件：\"},\"5228\":{\"t\":\"有4个Topic：T0、T1、T2、T3，每个Topic有2个分区。\"},\"5229\":{\"t\":\"有3个Consumer：C0、C1、C2，所有Consumer都订阅了这4个分区。\"},\"5230\":{\"t\":\"eb5597ed0b81b03c762e54ff3f909492.png\"},\"5231\":{\"t\":\"上面红色的箭头代表的是有变动的分区分配，可以看出，StickyAssignor的分配策略，变动较小。\"},\"5232\":{\"t\":\"参考：https://blog.csdn.net/easylife206/article/details/124580641?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-124580641-blog-124349832.235^v28^pc_relevant_t0_download&spm=1001.2101.3001.4242.3&utm_relevant_index=7\"},\"5233\":{\"h\":\"kafka如何保证消息不被重复消费\",\"a\":\"kafka如何保证消息不被重复消费\"},\"5234\":{\"h\":\"原因\",\"a\":\"原因\"},\"5235\":{\"t\":\"（1）kafka有个offset的概念，当每个消息被写进去后，都有一个offset，代表他的序号，然后consumer消费该数据之后，隔一段时间，会把自己消费过的消息的offset提交一下，代表我已经消费过了。下次我要是重启，就会继续从上次消费到的offset来继续消费。但是当我们直接kill进程了，再重启。这会导致consumer有些消息处理了，但是没来得及提交offset。等重启之后，少数消息就会再次消费一次 （2）在Kafka中有一个Partition Balance机制，就是把多个Partition均衡的分配给多个消费者。消费端会从分配到的Partition里面去消费消息，如果消费者在默认的5分钟内没有处理完这一批消息。就会触发Kafka的Rebalance机制，从而导致offset自动提交失败。而Rebalance之后，消费者还是会从之前没提交的offset位置开始消费，从而导致消息重复消费。\"},\"5236\":{\"h\":\"解决方案\",\"a\":\"解决方案\"},\"5237\":{\"t\":\"开启kafka本身存在的幂等性：\"},\"5238\":{\"t\":\"在这里插入图片描述\"},\"5239\":{\"t\":\"注： 添加唯一ID，类似于数据库的主键，用于唯一标记一个消息。 ProducerID：#在每个新的Producer初始化时，会被分配一个唯一的PID SequenceNumber：#对于每个PID发送数据的每个Topic都对应一个从0开始单调递增的SN值。\"},\"5240\":{\"t\":\"将获取的唯一id存表，（利用mySQl的唯一键约束，或者redis天然的set结构）\"},\"5241\":{\"t\":\"参考：https://blog.csdn.net/m0_51167384/article/details/128106266?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&utm_relevant_index=8&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2Mjc4NDAvYXJ0aWNsZS9kZXRhaWxzLzc2NDM1Mzg1P3NwbT0xMDAxLjIxMDEuMzAwMS42NjUwLjEmdXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RVJhdGUtMS03NjQzNTM4NS1ibG9nLTExNzQxOTA1OC4yMzUlNUV2MjglNUVwY19yZWxldmFudF90MF9kb3dubG9hZCZkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VSYXRlLTEtNzY0MzUzODUtYmxvZy0xMTc0MTkwNTguMjM1JTVFdjI4JTVFcGNfcmVsZXZhbnRfdDBfZG93bmxvYWQmdXRtX3JlbGV2YW50X2luZGV4PTI%3D\"},\"5242\":{\"h\":\"如何保证消息的顺序性?\",\"a\":\"如何保证消息的顺序性\"},\"5243\":{\"h\":\"为什么要保证顺序？\",\"a\":\"为什么要保证顺序\"},\"5244\":{\"t\":\"消息队列中的若干消息如果是对同一个数据进行操作, 这些操作具有前后关系, 必须要按前后的顺序执行, 否则就会造成数据异常.\"},\"5245\":{\"h\":\"出现顺序错乱的场景：\",\"a\":\"出现顺序错乱的场景\"},\"5246\":{\"t\":\"第一种情况: 一个queue, 有多个consumer去消费, 这样就会造成顺序的错误, consumer从MQ里面读取数据是有序的, 但是每个consumer的执行时间是不固定的, 无法保证先读到消息的consumer一定先完成操作, 这样就会出现消息并没有按照顺序执行, 造成数据顺序错误。 \"},\"5247\":{\"t\":\"img\"},\"5248\":{\"t\":\"第二种情况: 一个queue对应一个consumer, 但是consumer里面进行了多线程消费, 这样也会造成消息消费顺序错误。 \"},\"5249\":{\"t\":\"img\"},\"5250\":{\"h\":\"如何保证消息的消费顺序？\",\"a\":\"如何保证消息的消费顺序\"},\"5251\":{\"t\":\"第一种方案: 拆分多个queue, 每一个queue一个consumer, 就是多一些queue而已, 确实是麻烦点; 这样也会造成吞吐量下降, 可以在消费者内部采用多线程的方式去消费。 \"},\"5252\":{\"t\":\"img\"},\"5253\":{\"t\":\"第二种方案: 就是一个queue对应一个consumer, 然后这个consumer内部用内存队列做排队, 然后分发给底层不同的worker来处理。 \"},\"5254\":{\"t\":\"img\"},\"5255\":{\"t\":\"参考：https://blog.csdn.net/qq_44901983/article/details/123416498\"},\"5256\":{\"h\":\"HTTP协议中为什么广泛使用的还是HTTP1.1？\"},\"5257\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"5258\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"5259\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"5260\":{\"h\":\"一、关于HTTP2\",\"a\":\"一、关于http2\"},\"5261\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"5262\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"5263\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"5264\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"5265\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"5266\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"5267\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"5268\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"5269\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"5270\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"5271\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"5272\":{\"h\":\"二、关于HTTP3\",\"a\":\"二、关于http3\"},\"5273\":{\"t\":\"具体的细节请移步：HTTP3协议\"},\"5274\":{\"h\":\"三、HTTP历史\",\"a\":\"三、http历史\"},\"5275\":{\"t\":\"随着网络技术的发展，1999 年设计的 HTTP/1.1 已经不能满足需求，所以 Google 在 2009 年设计了基于 TCP 的 SPDY，后来 SPDY 的开发组推动 SPDY 成为正式标准，不过最终没能通过。不过 SPDY 的开发组全程参与了 HTTP/2 的制定过程，参考了 SPDY 的很多设计，所以我们一般认为 SPDY 就是 HTTP/2 的前身。无论 SPDY 还是 HTTP/2，都是基于 TCP 的，TCP 与 UDP 相比效率上存在天然的劣势，所以 2013 年 Google 开发了基于 UDP 的名为 QUIC 的传输层协议，QUIC 全称 Quick UDP Internet Connections，希望它能替代 TCP，使得网页传输更加高效。后经提议，互联网工程任务组正式将基于 QUIC 协议的 HTTP （HTTP over QUIC）重命名为 HTTP/3。\"},\"5276\":{\"h\":\"三、原因\",\"a\":\"三、原因\"},\"5277\":{\"t\":\"小羊看来网站上大家的讨论，总结了下面的几点。\"},\"5278\":{\"t\":\"1.至少目前来看，要启用http2必须使用OpenSSL/ssl加密协议，而且在对传输速率要求不高的情况下，HTTP1.1完全可以hold住任何场景。所以还是需要等待催生http2不得不出的时机到来。\"},\"5279\":{\"t\":\"2.HTTP 1.1 用着也还行，性能不好，但也不算差。\"},\"5280\":{\"t\":\"3.HTTP 3 出来得太快了，没有给HTTP 2留下发挥时间，HTTP 2还没来得及全面推广，HTTP 3就横空出世了，既然有更好的可以用，有什么理由还升HTTP 2呢？\"},\"5281\":{\"h\":\"HTTP\"},\"5282\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"5283\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"5284\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"5285\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"5286\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"5287\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"5288\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"5289\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"5290\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"5291\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"5292\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"5293\":{\"h\":\"计算机网络\"},\"5294\":{\"h\":\"键入网址到网页显示，期间发生了什么？\",\"a\":\"键入网址到网页显示-期间发生了什么\"},\"5295\":{\"t\":\"img\"},\"5296\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"5297\":{\"t\":\"总体来说分为以下几个过程:\"},\"5298\":{\"t\":\"DNS 解析\"},\"5299\":{\"t\":\"TCP 连接\"},\"5300\":{\"t\":\"发送 HTTP 请求\"},\"5301\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"5302\":{\"t\":\"浏览器解析渲染页面\"},\"5303\":{\"t\":\"连接结束\"},\"5304\":{\"h\":\"OSI 七层模型\",\"a\":\"osi-七层模型\"},\"5305\":{\"t\":\"OSI 七层模型\"},\"5306\":{\"h\":\"TCP/IP 四层模型\",\"a\":\"tcp-ip-四层模型\"},\"5307\":{\"t\":\"img\"},\"5308\":{\"h\":\"TCP\",\"a\":\"tcp\"},\"5309\":{\"h\":\"IP\",\"a\":\"ip\"},\"5310\":{\"h\":\"UDP\",\"a\":\"udp\"},\"5311\":{\"h\":\"ARP\",\"a\":\"arp\"},\"5312\":{\"t\":\"ARP 协议，全称 地址解析协议（Address Resolution Protocol），它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。\"},\"5313\":{\"t\":\"ARP 协议工作时有一个大前提，那就是 ARP 表。\"},\"5314\":{\"t\":\"在一个局域网内，每个网络设备都自己维护了一个 ARP 表，ARP 表记录了某些其他网络设备的 IP 地址-MAC 地址映射关系，该映射关系以 <IP, MAC, TTL> 三元组的形式存储。其中，TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。\"},\"5315\":{\"t\":\"ARP 的工作原理将分两种场景讨论：\"},\"5316\":{\"t\":\"同一局域网内的 MAC 寻址；\"},\"5317\":{\"t\":\"从一个局域网到另一个局域网中的网络设备的寻址。\"},\"5318\":{\"h\":\"同一局域网内的 MAC 寻址\",\"a\":\"同一局域网内的-mac-寻址\"},\"5319\":{\"t\":\"假设当前有如下场景：IP 地址为137.196.7.23的主机 A，想要给同一局域网内的 IP 地址为137.196.7.14主机 B，发送 IP 数据报文。\"},\"5320\":{\"t\":\"再次强调，当主机发送 IP 数据报文时（网络层），仅知道目的地的 IP 地址，并不清楚目的地的 MAC 地址，而 ARP 协议就是解决这一问题的。\"},\"5321\":{\"t\":\"为了达成这一目标，主机 A 将不得不通过 ARP 协议来获取主机 B 的 MAC 地址，并将 IP 报文封装成链路层帧，发送到下一跳上。在该局域网内，关于此将按照时间顺序，依次发生如下事件：\"},\"5322\":{\"t\":\"主机 A 检索自己的 ARP 表，发现 ARP 表中并无主机 B 的 IP 地址对应的映射条目，也就无从知道主机 B 的 MAC 地址。\"},\"5323\":{\"t\":\"主机 A 将构造一个 ARP 查询分组，并将其广播到所在的局域网中。\"},\"5324\":{\"t\":\"ARP 分组是一种特殊报文，ARP 分组有两类，一种是查询分组，另一种是响应分组，它们具有相同的格式，均包含了发送和接收的 IP 地址、发送和接收的 MAC 地址。当然了，查询分组中，发送的 IP 地址，即为主机 A 的 IP 地址，接收的 IP 地址即为主机 B 的 IP 地址，发送的 MAC 地址也是主机 A 的 MAC 地址，但接收的 MAC 地址绝不会是主机 B 的 MAC 地址（因为这正是我们要问询的！），而是一个特殊值——FF-FF-FF-FF-FF-FF，之前说过，该 MAC 地址是广播地址，也就是说，查询分组将广播给该局域网内的所有设备。\"},\"5325\":{\"t\":\"主机 A 构造的查询分组将在该局域网内广播，理论上，每一个设备都会收到该分组，并检查查询分组的接收 IP 地址是否为自己的 IP 地址，如果是，说明查询分组已经到达了主机 B，否则，该查询分组对当前设备无效，丢弃之。\"},\"5326\":{\"t\":\"主机 B 收到了查询分组之后，验证是对自己的问询，接着构造一个 ARP 响应分组，该分组的目的地只有一个——主机 A，发送给主机 A。同时，主机 B 提取查询分组中的 IP 地址和 MAC 地址信息，在自己的 ARP 表中构造一条主机 A 的 IP-MAC 映射记录。\"},\"5327\":{\"t\":\"ARP 响应分组具有和 ARP 查询分组相同的构造，不同的是，发送和接受的 IP 地址恰恰相反，发送的 MAC 地址为发送者本身，目标 MAC 地址为查询分组的发送者，也就是说，ARP 响应分组只有一个目的地，而非广播。\"},\"5328\":{\"t\":\"主机 A 终将收到主机 B 的响应分组，提取出该分组中的 IP 地址和 MAC 地址后，构造映射信息，加入到自己的 ARP 表中。\"},\"5329\":{\"t\":\"总结来说，ARP 协议是一个广播问询，单播响应协议。\"},\"5330\":{\"h\":\"不同局域网内的 MAC 寻址\",\"a\":\"不同局域网内的-mac-寻址\"},\"5331\":{\"t\":\"更复杂的情况是，发送主机 A 和接收主机 B 不在同一个子网中，假设一个一般场景，两台主机所在的子网由一台路由器联通。这里需要注意的是，一般情况下，我们说网络设备都有一个 IP 地址和一个 MAC 地址，这里说的网络设备，更严谨的说法应该是一个接口。路由器作为互联设备，具有多个接口，每个接口同样也应该具备不重复的 IP 地址和 MAC 地址。因此，在讨论 ARP 表时，路由器的多个接口都各自维护一个 ARP 表，而非一个路由器只维护一个 ARP 表。\"},\"5332\":{\"t\":\"接下来，回顾同一子网内的 MAC 寻址，如果主机 A 发送一个广播问询分组，那么 A 所在子网内的所有设备（接口）都将不会捕获该分组，因为该分组的目的 IP 地址在另一个子网中，本子网内不会有设备成功接收。那么，主机 A 应该发送怎样的查询分组呢？整个过程按照时间顺序发生的事件如下：\"},\"5333\":{\"t\":\"主机 A 查询 ARP 表，期望寻找到目标路由器的本子网接口的 MAC 地址。\"},\"5334\":{\"t\":\"目标路由器指的是，根据目的主机 B 的 IP 地址，分析出 B 所在的子网，能够把报文转发到 B 所在子网的那个路由器。\"},\"5335\":{\"t\":\"主机 A 未能找到目标路由器的本子网接口的 MAC 地址，将采用 ARP 协议，问询到该 MAC 地址，由于目标接口与主机 A 在同一个子网内，该过程与同一局域网内的 MAC 寻址相同。\"},\"5336\":{\"t\":\"主机 A 获取到目标接口的 MAC 地址，先构造 IP 数据报，其中源 IP 是 A 的 IP 地址，目的 IP 地址是 B 的 IP 地址，再构造链路层帧，其中源 MAC 地址是 A 的 MAC 地址，目的 MAC 地址是本子网内与路由器连接的接口的 MAC 地址。主机 A 将把这个链路层帧，以单播的方式，发送给目标接口。\"},\"5337\":{\"t\":\"目标接口接收到了主机 A 发过来的链路层帧，解析，根据目的 IP 地址，查询转发表，将该 IP 数据报转发到与主机 B 所在子网相连的接口上。\"},\"5338\":{\"t\":\"到此，该帧已经从主机 A 所在的子网，转移到了主机 B 所在的子网了。\"},\"5339\":{\"t\":\"路由器接口查询 ARP 表，期望寻找到主机 B 的 MAC 地址。\"},\"5340\":{\"t\":\"路由器接口如未能找到主机 B 的 MAC 地址，将采用 ARP 协议，广播问询，单播响应，获取到主机 B 的 MAC 地址。\"},\"5341\":{\"t\":\"路由器接口将对 IP 数据报重新封装成链路层帧，目标 MAC 地址为主机 B 的 MAC 地址，单播发送，直到目的地。\"},\"5342\":{\"h\":\"HTTP\",\"a\":\"http\"},\"5343\":{\"h\":\"HTTP 状态码有哪些？\",\"a\":\"http-状态码有哪些\"},\"5344\":{\"t\":\"HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。\"},\"5345\":{\"t\":\"常见 HTTP 状态码\"},\"5346\":{\"h\":\"HTTP/1.0 和 HTTP/1.1 有什么区别？\",\"a\":\"http-1-0-和-http-1-1-有什么区别\"},\"5347\":{\"t\":\"连接方式 : HTTP/1.0 为短连接，HTTP/1.1 支持长连接。\"},\"5348\":{\"t\":\"状态响应码 : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，100 (Continue)——在请求大资源前的预热请求，206 (Partial Content)——范围请求的标识码，409 (Conflict)——请求与当前资源的规定冲突，410 (Gone)——资源已被永久转移，而且没有任何已知的转发地址。\"},\"5349\":{\"t\":\"缓存机制 : 在 HTTP/1.0 中主要使用 Header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP/1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。\"},\"5350\":{\"t\":\"Host 头（Host Header）处理 :HTTP/1.1 引入了 Host 头字段，允许在同一 IP 地址上托管多个域名，从而支持虚拟主机的功能。而 HTTP/1.0 没有 Host 头字段，无法实现虚拟主机。\"},\"5351\":{\"h\":\"HTTP/1.1 和 HTTP/2.0 有什么区别？\",\"a\":\"http-1-1-和-http-2-0-有什么区别\"},\"5352\":{\"t\":\"IO 多路复用（Multiplexing） ：HTTP/2.0 在同一连接上可以同时传输多个请求和响应（可以看作是 HTTP/1.1 中长链接的升级版本）。HTTP/1.1 则使用串行方式，每个请求和响应都需要独立的连接。这使得 HTTP/2.0 在处理多个请求时更加高效，减少了网络延迟和提高了性能。\"},\"5353\":{\"t\":\"二进制帧（Binary Frames） ：HTTP/2.0 使用二进制帧进行数据传输，而 HTTP/1.1 则使用文本格式的报文。二进制帧更加紧凑和高效，减少了传输的数据量和带宽消耗。\"},\"5354\":{\"t\":\"头部压缩（Header Compression） ：HTTP/1.1 支持Body压缩，Header不支持压缩。HTTP/2.0 支持对Header压缩，减少了网络开销。\"},\"5355\":{\"t\":\"服务器推送（Server Push）：HTTP/2.0 支持服务器推送，可以在客户端请求一个资源时，将其他相关资源一并推送给客户端，从而减少了客户端的请求次数和延迟。而 HTTP/1.1 需要客户端自己发送请求来获取相关资源。\"},\"5356\":{\"h\":\"HTTP/2.0 和 HTTP/3.0 有什么区别？\",\"a\":\"http-2-0-和-http-3-0-有什么区别\"},\"5357\":{\"t\":\"传输协议 ：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP/3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\"},\"5358\":{\"t\":\"连接建立 ：HTTP/2.0 需要经过经典的 TCP 三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP/3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。\"},\"5359\":{\"t\":\"队头阻塞 ：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。\"},\"5360\":{\"h\":\"HTTPS\",\"a\":\"https\"},\"5361\":{\"h\":\"HTTP 和 HTTPS 有什么区别？\",\"a\":\"http-和-https-有什么区别\"},\"5362\":{\"t\":\"端口号 ：HTTP 默认是 80，HTTPS 默认是 443。\"},\"5363\":{\"t\":\"URL 前缀 ：HTTP 的 URL 前缀是 http://，HTTPS 的 URL 前缀是 https://。\"},\"5364\":{\"t\":\"安全性和资源消耗 ： HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。\"},\"5365\":{\"t\":\"SEO（搜索引擎优化） ：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。\"},\"5366\":{\"h\":\"DNS\",\"a\":\"dns\"},\"5367\":{\"t\":\"DNS 中的域名都是用句点来分隔的，比如 www.server.com，这里的句点代表了不同层次之间的界限。\"},\"5368\":{\"t\":\"在域名中，越靠右的位置表示其层级越高。\"},\"5369\":{\"t\":\"实际上域名最后还有一个点，比如 www.server.com.，这个最后的一个点代表根域名。\"},\"5370\":{\"t\":\"也就是，. 根域是在最顶层，它的下一层就是 .com 顶级域，再下面是 server.com。\"},\"5371\":{\"t\":\"所以域名的层级关系类似一个树状结构：\"},\"5372\":{\"t\":\"根 DNS 服务器（.）\"},\"5373\":{\"t\":\"顶级域 DNS 服务器（.com）\"},\"5374\":{\"t\":\"权威 DNS 服务器（server.com）\"},\"5375\":{\"t\":\"根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。\"},\"5376\":{\"t\":\"这样一来，任何 DNS 服务器就都可以找到并访问根域 DNS 服务器了。\"},\"5377\":{\"t\":\"因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。\"},\"5378\":{\"h\":\"域名解析的工作流程：\",\"a\":\"域名解析的工作流程\"},\"5379\":{\"t\":\"客户端首先会发出一个 DNS 请求，问 www.server.com 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。\"},\"5380\":{\"t\":\"本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 www.server.com，则它直接返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 www.server.com 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。\"},\"5381\":{\"t\":\"根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“www.server.com 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”\"},\"5382\":{\"t\":\"本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 www.server.com 的 IP 地址吗？”\"},\"5383\":{\"t\":\"顶级域名服务器说：“我给你负责 www.server.com 区域的权威 DNS 服务器的地址，你去问它应该能问到”。\"},\"5384\":{\"t\":\"本地 DNS 于是转向问权威 DNS 服务器：“老三，www.server.com对应的IP是啥呀？” server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。\"},\"5385\":{\"t\":\"权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。\"},\"5386\":{\"t\":\"本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。\"},\"5387\":{\"h\":\"面试\"},\"5388\":{\"h\":\"面试：\",\"a\":\"面试\"},\"5389\":{\"h\":\"一、中科全安\",\"a\":\"一、中科全安\"},\"5390\":{\"h\":\"一面：HR面，态度算好的（5分钟）\",\"a\":\"一面-hr面-态度算好的-5分钟\"},\"5391\":{\"t\":\"1.介绍公司\"},\"5392\":{\"t\":\"2.问啥时候能来实习\"},\"5393\":{\"t\":\"3.问你能接受加班吗\"},\"5394\":{\"t\":\"4.问你的期望薪资多少\"},\"5395\":{\"t\":\"5.问我想听听你对加班什么看法\"},\"5396\":{\"t\":\"6.最后让明天面试，我说不行，能最晚啥时候，她说最晚周五下午，电话面试\"},\"5397\":{\"h\":\"二面：面试官狗叫（15分钟 ）\",\"a\":\"二面-面试官狗叫-15分钟\"},\"5398\":{\"t\":\"面试官的态度极其恶心，什么垃圾玩意，老子是来面试的，不是听狗叫的，就算老子啥都不会也不去你这个垃圾公司。\"},\"5399\":{\"t\":\"1.自我介绍，直接打断说只介绍自己会的，项目中的技术栈\"},\"5400\":{\"t\":\"2.问我熟悉哪些框架，我说Spring、Mysql，其他都是了解，熟悉的是Java基础和Mysql，他就非得问SpringBoot，离谱\"},\"5401\":{\"t\":\"3.问Kafka的分区、主题了解吗，我就是了解，然后他也说了你只是了解\"},\"5402\":{\"t\":\"4.问ES了解吗（我只是了解他是干啥的，其它都是API）\"},\"5403\":{\"t\":\"5.问SpringBoot异常怎么处理（这个紧张忘了，只是说在一个包里要继承一个异常的接口）\"},\"5404\":{\"t\":\"6.问SpringBoot的核心配置文件以及它们的区别\"},\"5405\":{\"t\":\"7.问SpringBoot的起步依赖starter有哪些以及作用（他说你了解的很少，我都说了了解Mysql、Spring，你他妈的非得问）\"},\"5406\":{\"t\":\"8.问SpringBoot 中的监视器是什么（我说不了解）\"},\"5407\":{\"t\":\"9.问Swagger用过么、它用来做什么\"},\"5408\":{\"t\":\"10.问什么是 WebSockets（我说只了解它是用来作为即时通讯的协议）\"},\"5409\":{\"t\":\"11.问什么是 FreeMarker 模板（这个离谱，说完他是干啥的以及插值表达式，他问还有呢？他妈的）\"},\"5410\":{\"t\":\"12.问C/S 、B/S模式\"},\"5411\":{\"t\":\"13.问String、StringBuilder、StringBuffer 的区别\"},\"5412\":{\"t\":\"14.问了MySQL的存储引擎\"},\"5413\":{\"t\":\"15.问了 InnoDB 和 MyISAM 的比较\"},\"5414\":{\"t\":\"16.问了建立索引的原则\"},\"5415\":{\"t\":\"17.问了三大范式\"},\"5416\":{\"t\":\"18.问了Jdbc的防止sql注入（我说不了解）\"},\"5417\":{\"t\":\"19.反问（我说实习生的日常工作安排是什么，他妈的开始狗叫，想打他）\"},\"5418\":{\"t\":\"20.最后问我啥时能来实习（老子不去）\"},\"5419\":{\"h\":\"二、联想\",\"a\":\"二、联想\"},\"5420\":{\"h\":\"一面：（16分钟）\",\"a\":\"一面-16分钟\"},\"5421\":{\"t\":\"1.说一下红黑树（吧啦吧啦，讲了下红黑树的特性、又扯到HashMap底层用到了红黑树、突然说到MySQLB+树用到了红黑树）\"},\"5422\":{\"t\":\"2.讲一下线程池（这个熟，线程池的7大参数以及具体用法）\"},\"5423\":{\"t\":\"3.讲一下为什么用线程池（两点原因）\"},\"5424\":{\"t\":\"4.讲一下线程池参数MaxSize满了你会怎么做（我说实现自定义处理策略，可以选择移除等待队列中的最不常用的线程）\"},\"5425\":{\"t\":\"5.看我熟悉Python（这里没听清发音，重复确认了好几遍哈哈哈哈哈哈哈），问我生成器用过没（我说是生成随机数吗，面试官说不是，是，还耐心给我解答了是用来循环遍历的）\"},\"5426\":{\"t\":\"5.项目拷打环节\"},\"5427\":{\"t\":\"1）讲一下你的项目经验（从项目的整体架构到具体功能实现细节都说了）\"},\"5428\":{\"t\":\"2）我说了做的一些优化（存储到阿里云OSS）\"},\"5429\":{\"t\":\"3）突然电话断了，在那我俩喂喂喂了好几声，面试官又给我打了过来，问我同步和异步怎么实现的（加@Async注解）\"},\"5430\":{\"t\":\"4）问异步调用后，做了些什么（第三方接口审核完后传来一个statusCode200，表示审核成功存储到数据库）\"},\"5431\":{\"t\":\"6.反问环节\"},\"5432\":{\"t\":\"1）实习生的日常工作安排（面试官说了早上9：30上班，下午6：30下班，八小时工作制，中午休息一小时）\"},\"5433\":{\"t\":\"2）技术栈是什么（面试官说这有Java和Python，你来就是Java）\"},\"5434\":{\"h\":\"三、中国邮政储蓄银行\",\"a\":\"三、中国邮政储蓄银行\"},\"5435\":{\"h\":\"一面：结构化面试+技术面（20分钟，五个面试官）\",\"a\":\"一面-结构化面试-技术面-20分钟-五个面试官\"},\"5436\":{\"t\":\"1.先做一个两分钟以内的自我介绍（对邮储的看法，对未来工作的看法）\"},\"5437\":{\"t\":\"2.对工作地点的看法\"},\"5438\":{\"t\":\"3.有没有参加过团体活动\"},\"5439\":{\"t\":\"4.数学建模比赛中遇到的最大困难\"},\"5440\":{\"t\":\"5.开始技术面试了，面试官说看你简历都是Java相关，讲一下Spring Cloud你用过的组件\"},\"5441\":{\"t\":\"6.ConcurrentHashMap为什么用红黑树\"},\"5442\":{\"t\":\"7.看你项目中用到了网关，是怎么实现的\"},\"5443\":{\"t\":\"8.都说CAS要比synchronized好，但是CAS也有自己的问题，你能说一下有哪些问题吗\"},\"5444\":{\"t\":\"9.另一个面试官问看你简历有高并发系统的东西，你有实际的项目经验吗（这个我说就是了解，实际项目是自学的，实际项目经验都是人工智能相关的）\"},\"5445\":{\"t\":\"10.最后女的HR问看你成绩这么好，没有保研吗\"},\"5446\":{\"t\":\"11.讲一下研究生的论文成果\"},\"5447\":{\"t\":\"12.研究生的专业成绩排名，有获得过奖学金吗\"},\"5448\":{\"t\":\"13.最后问有offer吗，方便说一下是哪个公司吗\"},\"5449\":{\"t\":\"另：\"},\"5450\":{\"t\":\"1.对工作地点的看法\"},\"5451\":{\"t\":\"2.CPU达到100%的时候你如何排查问题\"},\"5452\":{\"t\":\"3.新生代和老年代数据是如何流动的\"},\"5453\":{\"t\":\"4.Linux如何给文件权限\"},\"5454\":{\"t\":\"5.想从实习中收获什么\"},\"5455\":{\"t\":\"6.看你是院研副部长，如果负责的活动和实验室科研冲突了怎么平衡\"},\"5456\":{\"t\":\"7.你平常也这样扎头发吗\"},\"5457\":{\"h\":\"来看头条\"},\"5458\":{\"h\":\"十二：项目\",\"a\":\"十二-项目\"},\"5459\":{\"t\":\"开发技术：Spring Cloud + Spring Boot + MybatisPlus + Redis + mysql + Mongodb + Zookeeper + kafka + ElasticSearch + Docker + 第三方技术阿里云OSS;\"},\"5460\":{\"t\":\"项目背景：”来看头条“ 项目类似于今日头条，是一个新闻资讯类项目。该项目由用户端和自媒体端组成。在用户端，实现了用户通过app端登录功能、浏览文章功能、搜索文章功能、用户历史记录功能。在自媒体端，实现了自媒体管理员登录功能、发布文章功能、删除文章功能、上传素材功能、文章内容审核功能\"},\"5461\":{\"t\":\"**项目重难点：**网关搭建；文章详情静态化及存储；文章自动审核及延迟发布；分布式锁解决集群下的方法抢占执行；热点文章实时计算\"},\"5462\":{\"t\":\"技术栈的具体应用：\"},\"5463\":{\"t\":\"Spring-Cloud-Gateway : 微服务之前架设的网关服务，实现服务注册中的API请求路由，以及控制流速控制和熔断处理都是常用的架构手段，而这些功能Gateway天然支持\"},\"5464\":{\"t\":\"运用Spring Boot快速开发框架，构建项目工程；并结合Spring Cloud全家桶技术，实现app后端、自媒体等微服务。\"},\"5465\":{\"t\":\"运用Spring Cloud Alibaba Nacos作为项目中的注册中心和配置中心\"},\"5466\":{\"t\":\"运用mybatis-plus作为持久层提升开发效率\"},\"5467\":{\"t\":\"采用kafka作为消息服务中间件，把自媒体文章上下架放进消息队列；通过用户的行为（点赞、评论、喜欢）实时记录用户数据，通过kafkaStream流式计算最新的数据；与客户端系统消息通知\"},\"5468\":{\"t\":\"运用Redis缓存技术，实现热数据的计算，提升系统性能指标，同时作为消息中间件异步消费任务。\"},\"5469\":{\"t\":\"使用Mysql存储用户数据，以保证上层数据查询的高性能\"},\"5470\":{\"t\":\"使用Mongo存储用户历史记录数据，以保证用户热数据高扩展和高性能指标\"},\"5471\":{\"t\":\"运用AI技术，来完成系统自动化功能，以提升效率及节省成本。比如文章审核\"},\"5472\":{\"h\":\"优化：\",\"a\":\"优化\"},\"5473\":{\"h\":\"（1）优化一\",\"a\":\"_1-优化一\"},\"5474\":{\"t\":\"缺陷 ：写操作（定时刷新）比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。\"},\"5475\":{\"t\":\"解决办法：\"},\"5476\":{\"t\":\"数据库和缓存数据强一致场景 ：更新 db 的时候同样更新 cache，不过我们需要加一个分布式锁来保证更新 cache 的时候不存在线程安全问题。\"},\"5477\":{\"h\":\"（2）优化二\",\"a\":\"_2-优化二\"},\"5478\":{\"t\":\"缺陷：消费者丢失消息的情况\"},\"5479\":{\"t\":\"我们知道消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。偏移量（offset)表示 Consumer 当前消费到的 Partition(分区)的所在的位置。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。\"},\"5480\":{\"t\":\"当消费者拉取到了分区的某个消息之后，消费者会自动提交了 offset。自动提交的话会有一个问题，试想一下，当消费者刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。\"},\"5481\":{\"t\":\"解决办法:\"},\"5482\":{\"t\":\"我们手动关闭自动提交 offset，每次在真正消费完消息之后再自己手动提交 offset 。 细心的朋友一定会发现，这样会带来消息被重新消费的问题。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。\"},\"5483\":{\"h\":\"（3）优化三\",\"a\":\"_3-优化三\"},\"5484\":{\"t\":\"存储技术选型优化：\"},\"5485\":{\"t\":\"MinIO：\"},\"5486\":{\"t\":\"AliyunOSS：\"},\"5487\":{\"h\":\"（4）优化四\",\"a\":\"_4-优化四\"},\"5488\":{\"t\":\"缺陷：对于变量存在多线程并发竞争\"},\"5489\":{\"t\":\"解决办法：\"},\"5490\":{\"t\":\"为变量设置ThreadLocal。\"},\"5491\":{\"h\":\"身份验证怎么做的？\",\"a\":\"身份验证怎么做的\"},\"5492\":{\"t\":\"AuthorizedFilter + AppJwtUtil \"},\"5493\":{\"t\":\"用户向服务器发送用户名、密码以及验证码用于登陆系统。用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录。\"},\"5494\":{\"t\":\"如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT。\"},\"5495\":{\"t\":\"用户以后每次向后端发请求都在 Header 中带上这个 JWT ，再次进入网关开始访问，网关过滤器接收用户携带的TOKEN。\"},\"5496\":{\"t\":\"服务端检查 JWT 并从中获取用户相关信息。网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误。\"},\"5497\":{\"t\":\"两点建议：\"},\"5498\":{\"t\":\"建议将 JWT 存放在 localStorage 中，放在 Cookie 中会有 CSRF 风险。\"},\"5499\":{\"t\":\"请求服务端并携带 JWT 的常见做法是将其放在 HTTP Header 的 Authorization 字段中（Authorization: Bearer Token）。\"},\"5500\":{\"t\":\"乐观锁：\"},\"5501\":{\"t\":\"使用版本号。\"},\"5502\":{\"h\":\"网关搭建 ：\",\"a\":\"网关搭建\"},\"5503\":{\"t\":\"思路分析：\"},\"5504\":{\"t\":\"用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录\"},\"5505\":{\"t\":\"用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户\"},\"5506\":{\"t\":\"用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN\"},\"5507\":{\"t\":\"网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误\"},\"5508\":{\"t\":\"具体实现：\"},\"5509\":{\"t\":\"第一：\"},\"5510\":{\"t\":\"​ 在认证过滤器中需要用到jwt的解析，所以需要把工具类拷贝一份到网关微服务\"},\"5511\":{\"t\":\"第二：\"},\"5512\":{\"t\":\"​ 在网关微服务中新建全局过滤器\"},\"5513\":{\"h\":\"文章详情静态化及存储：\",\"a\":\"文章详情静态化及存储\"},\"5514\":{\"t\":\"文章详情静态化：\"},\"5515\":{\"t\":\"​ FreeMarker 是一款模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。\"},\"5516\":{\"t\":\"​ 模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。\"},\"5517\":{\"t\":\"存储：AliyunOSS\"},\"5518\":{\"t\":\"对象存储可提供更好的数据保护，加密、保护敏感数据。\"},\"5519\":{\"h\":\"文章自动审核及延迟发布：\",\"a\":\"文章自动审核及延迟发布\"},\"5520\":{\"t\":\"文章自动审核：\"},\"5521\":{\"t\":\"1 自媒体端发布文章后，开始审核文章（异步线程的方式审核文章，在自动审核的方法上加上@Async注解（标明要异步调用），在自媒体引导类中使用@EnableAsync注解开启异步调用）\"},\"5522\":{\"t\":\"2 审核的主要是审核文章的内容（文本内容和图片）\"},\"5523\":{\"t\":\"3 借助第三方提供的接口审核文本\"},\"5524\":{\"t\":\"4 借助第三方提供的接口审核图片，由于图片存储到OSS中，需要先下载才能审核\"},\"5525\":{\"t\":\"5 如果审核失败，则需要修改自媒体文章的状态，status:2 审核失败 status:3 转到人工审核\"},\"5526\":{\"t\":\"6 如果审核成功，则需要在文章微服务中创建app端需要的文章：\"},\"5527\":{\"t\":\"​ 在文章审核成功以后需要在app的article库中新增文章数据：\"},\"5528\":{\"t\":\"​ 保存文章信息 ap_article\"},\"5529\":{\"t\":\"​ 保存文章配置信息 ap_article_config\"},\"5530\":{\"t\":\"​ 保存文章内容 ap_article_content\"},\"5531\":{\"t\":\"延迟发布：\"},\"5532\":{\"t\":\"redis实现：zset数据类型的去重有序（分数排序）特点进行延迟。例如：时间戳作为score进行排序\"},\"5533\":{\"t\":\"实现思路：\"},\"5534\":{\"t\":\"问题思路：\"},\"5535\":{\"t\":\"1.为什么任务需要存储在数据库中？\"},\"5536\":{\"t\":\"延迟任务是一个通用的服务，任何需要延迟得任务都可以调用该服务，需要考虑数据持久化的问题，存储数据库中是一种数据安全的考虑。\"},\"5537\":{\"t\":\"2.为什么redis中使用两种数据类型，list和zset？\"},\"5538\":{\"t\":\"效率问题，算法的时间复杂度\"},\"5539\":{\"t\":\"3.在添加zset数据的时候，为什么不需要预加载？\"},\"5540\":{\"t\":\"任务模块是一个通用的模块，项目中任何需要延迟队列的地方，都可以调用这个接口，要考虑到数据量的问题，如果数据量特别大，为了防止阻塞，只需要把未来几分钟要执行的数据存入缓存即可。\"},\"5541\":{\"t\":\"实现：\"},\"5542\":{\"t\":\"延迟队列服务提供对外接口：提供远程的feign接口\"},\"5543\":{\"t\":\"发布文章集成添加延迟队列接口\"},\"5544\":{\"t\":\"修改发布文章代码：把之前的异步调用修改为调用延迟任务\"},\"5545\":{\"t\":\"消费任务进行审核文章\"},\"5546\":{\"t\":\"4.为什么选用redis作为消息队列？\"},\"5547\":{\"t\":\"把 Redis 当作队列来使用时，会面临的 2 个问题：\"},\"5548\":{\"t\":\"Redis 本身可能会丢数据；\"},\"5549\":{\"t\":\"面对消息挤压，内存资源会紧张；\"},\"5550\":{\"t\":\"所以，能不能将 Redis 作为消息队列来使用，关键看你的业务场景：\"},\"5551\":{\"t\":\"如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。\"},\"5552\":{\"t\":\"如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。\"},\"5553\":{\"h\":\"分布式锁解决集群下的方法抢占执行：\",\"a\":\"分布式锁解决集群下的方法抢占执行\"},\"5554\":{\"t\":\"问题描述：\"},\"5555\":{\"t\":\"启动两台heima-leadnews-schedule服务，每台服务都会去执行refresh定时任务方法\"},\"5556\":{\"t\":\"分布式锁：\"},\"5557\":{\"t\":\"控制分布式系统有序的去对共享资源进行操作，通过互斥来保证数据的一致性。\"},\"5558\":{\"t\":\"解决方案：\"},\"5559\":{\"t\":\"sexnx （SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。\"},\"5560\":{\"t\":\"这种加锁的思路是，如果 key 不存在则为 key 设置 value，如果 key 已存在则 SETNX 命令不做任何操作\"},\"5561\":{\"t\":\"客户端A请求服务器设置key的值，如果设置成功就表示加锁成功\"},\"5562\":{\"t\":\"客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败\"},\"5563\":{\"t\":\"客户端A执行代码完成，删除锁\"},\"5564\":{\"t\":\"客户端B在等待一段时间后再去请求设置key的值，设置成功\"},\"5565\":{\"t\":\"客户端B执行代码完成，删除锁\"},\"5566\":{\"h\":\"热点文章实时计算：\",\"a\":\"热点文章实时计算\"},\"5567\":{\"t\":\"思路说明：\"},\"5568\":{\"t\":\"待优化：\"},\"5569\":{\"t\":\"使用FastDFS作为静态资源存储器，在其上实现热静态资源缓存、淘汰等功能（待优化）\"},\"5570\":{\"t\":\"运用Hbase技术，存储系统中的冷数据，保证系统数据的可靠性（待优化）\"},\"5571\":{\"t\":\"运用ES搜索技术，对冷数据、文章数据建立索引，以保证冷数据、文章查询性能（待优化）\"},\"5572\":{\"t\":\"当用户 Logout 的话，JWT 也还有效。除非，我们在后端增加额外的处理逻辑比如将失效的 JWT 存储起来，后端先验证 JWT 是否有效再进行处理。\"},\"5573\":{\"h\":\"自我介绍：\",\"a\":\"自我介绍\"},\"5574\":{\"t\":\"面试官，您好，首先很感谢您给我的面试机会！我叫杨路恒，今年24岁，山东济宁人，就读于陕西师范大学，今年研二，软件工程专业，研究方向为知识图谱。大学时间我主要利用课外时间学习了 Java 以及 一些框架 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的粉丝数达到了3k+，访问量达到了44W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"5575\":{\"h\":\"J V M\"},\"5576\":{\"h\":\"Java S E\"},\"5577\":{\"h\":\"Java Frame\"},\"5578\":{\"h\":\"Kafka\"},\"5579\":{\"h\":\"Linux\"},\"5580\":{\"h\":\"O S\"},\"5581\":{\"h\":\"Spring Cloud Distribution\"},\"5582\":{\"h\":\"Chang Jing\"},\"5583\":{\"h\":\"Cs Network\"},\"5584\":{\"h\":\"Database\"},\"5585\":{\"h\":\"Duo Xian Cheng Gao Bing Fa\"},\"5586\":{\"h\":\"Interview\"},\"5587\":{\"h\":\"Project\"},\"5588\":{\"h\":\"J V M\"},\"5589\":{\"h\":\"Java基础\"},\"5590\":{\"h\":\"Java框架\"},\"5591\":{\"h\":\"Linux\"},\"5592\":{\"h\":\"场景问题\"},\"5593\":{\"h\":\"多线程和高并发\"},\"5594\":{\"h\":\"微服务 Spring Cloud、分布式\"},\"5595\":{\"h\":\"操作系统\"},\"5596\":{\"h\":\"数据库\"},\"5597\":{\"h\":\"消息中间件 Kafka\"},\"5598\":{\"h\":\"计算机网络\"},\"5599\":{\"h\":\"面试\"},\"5600\":{\"h\":\"项目\"}},\"dirtCount\":0,\"index\":[[\"细心的朋友一定会发现\",{\"1\":{\"5482\":1}}],[\"希望它能替代\",{\"1\":{\"5275\":1}}],[\"希望断开连接\",{\"1\":{\"2105\":1}}],[\"⼯⼚⽅法模式了解吗\",{\"0\":{\"3781\":1}}],[\"⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚\",{\"1\":{\"589\":1,\"3782\":1}}],[\"软件设计原则有哪些\",{\"0\":{\"3766\":1}}],[\"软件工程专业\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"速度慢\",{\"1\":{\"3400\":1}}],[\"速度快\",{\"1\":{\"3397\":1}}],[\"秘钥是自己保存的\",{\"1\":{\"3399\":1}}],[\"俺也要吐槽一下\",{\"1\":{\"3395\":1}}],[\"算法\",{\"1\":{\"3394\":1}}],[\"算法的时间复杂度\",{\"1\":{\"3269\":1,\"5538\":1}}],[\"哪些是非对称加密\",{\"1\":{\"3387\":1}}],[\"哪些算法是对称加密\",{\"1\":{\"3387\":1}}],[\"近期出现了很多加密算法\",{\"1\":{\"3387\":1}}],[\"账号\",{\"1\":{\"3372\":1,\"3378\":1}}],[\"彩虹表\",{\"1\":{\"3351\":1}}],[\"山东大学的王小云教授在美国加州举办的密码学会议上宣布破解了md5\",{\"1\":{\"3334\":1}}],[\"山东济宁人\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"抗修改性\",{\"1\":{\"3331\":1}}],[\"感谢\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"研究方向为知识图谱\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"研究生的专业成绩排名\",{\"1\":{\"3167\":1,\"5447\":1}}],[\"今年研二\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"今年24岁\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"今日在刷leetcode\",{\"1\":{\"334\":1}}],[\"您好\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"您可以节省任何更改\",{\"1\":{\"929\":1,\"3946\":1}}],[\"|cut\",{\"1\":{\"3320\":1}}],[\"|grep\",{\"1\":{\"3320\":1}}],[\"||\",{\"1\":{\"539\":1,\"3043\":5,\"4297\":5}}],[\"渣渣烟\",{\"1\":{\"3310\":1,\"3312\":2,\"3313\":1}}],[\"省略\",{\"1\":{\"3310\":1}}],[\"淘汰等功能\",{\"1\":{\"3300\":1,\"5569\":1}}],[\"已存在则\",{\"1\":{\"3291\":1,\"5560\":1}}],[\"已经把内存地址v中的变量值率先更新成了2\",{\"1\":{\"2868\":1,\"4122\":1}}],[\"已经同意提交了提案n1\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"已经不能满足需求\",{\"1\":{\"5275\":1}}],[\"已经不可能成为\",{\"1\":{\"1900\":1,\"4489\":1}}],[\"已经不再有hash方法了\",{\"1\":{\"784\":1}}],[\"已经没有超过半数的节点数了\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"已经被加载的类会直接返回\",{\"1\":{\"205\":1,\"232\":1,\"3599\":1,\"3626\":1}}],[\"借助第三方提供的接口审核图片\",{\"1\":{\"3255\":1,\"5524\":1}}],[\"借助第三方提供的接口审核文本\",{\"1\":{\"3254\":1,\"5523\":1}}],[\"审核失败\",{\"1\":{\"3256\":1,\"5525\":1}}],[\"审核的主要是审核文章的内容\",{\"1\":{\"3253\":1,\"5522\":1}}],[\"审计\",{\"1\":{\"940\":1,\"3957\":1}}],[\"异步线程的方式审核文章\",{\"1\":{\"3252\":1,\"5521\":1}}],[\"异常\",{\"0\":{\"3634\":1}}],[\"异常来拒绝新来的任务\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"异常处理者处理的异常的类信息\",{\"1\":{\"282\":1,\"3670\":1}}],[\"异常表中包含了一个或多个异常处理者\",{\"1\":{\"278\":1,\"3666\":1}}],[\"异常的底层\",{\"0\":{\"3660\":1}}],[\"异常的抛出\",{\"1\":{\"258\":1,\"3654\":1}}],[\"异常的申明\",{\"1\":{\"255\":1,\"3651\":1}}],[\"异常和反射\",{\"0\":{\"237\":1}}],[\"专用的语言\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"专门用于组合搜索\",{\"1\":{\"2375\":1,\"4737\":1}}],[\"专门设计的一种支持崩溃恢复的原子广播协议\",{\"1\":{\"1863\":1,\"4452\":1}}],[\"​\",{\"1\":{\"3241\":1,\"3243\":1,\"3246\":1,\"3247\":1,\"3258\":1,\"3259\":1,\"3260\":1,\"3261\":1,\"5510\":1,\"5512\":1,\"5515\":1,\"5516\":1,\"5527\":1,\"5528\":1,\"5529\":1,\"5530\":1}}],[\"思路说明\",{\"1\":{\"3298\":1,\"5567\":1}}],[\"思路分析\",{\"1\":{\"3234\":1,\"5503\":1}}],[\"思路其实很简单\",{\"1\":{\"2888\":1,\"4142\":1}}],[\"风险\",{\"1\":{\"3229\":1,\"5498\":1}}],[\"放在\",{\"1\":{\"3229\":1,\"5498\":1}}],[\"放回给调用者\",{\"1\":{\"1848\":1,\"4437\":1}}],[\"身份验证怎么做的\",{\"0\":{\"3222\":1,\"5491\":1}}],[\"试想一下\",{\"1\":{\"3211\":1,\"5480\":1}}],[\"偏移量\",{\"1\":{\"3210\":1,\"5479\":1}}],[\"偏向于第一个访问锁的线程\",{\"1\":{\"2839\":1,\"4093\":1}}],[\"偏向锁就升级为轻量级锁\",{\"1\":{\"2847\":1,\"4101\":1}}],[\"偏向锁就会升级为轻量级锁\",{\"1\":{\"2845\":1,\"4099\":1}}],[\"偏向锁是指当一段同步代码一直被同一个线程所访问时\",{\"1\":{\"2843\":1,\"4097\":1}}],[\"偏向锁只有遇到其他线程尝试竞争偏向锁时\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"偏向锁几乎没有额外开销\",{\"1\":{\"2841\":1,\"4095\":1}}],[\"偏向锁\",{\"0\":{\"2838\":1,\"4092\":1}}],[\"偏向模式下\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"缺陷\",{\"1\":{\"3205\":1,\"3209\":1,\"3219\":1,\"5474\":1,\"5478\":1,\"5488\":1}}],[\"缺点\",{\"1\":{\"1824\":1,\"2397\":1,\"2405\":1,\"2978\":1,\"2989\":1,\"2992\":1,\"4232\":1,\"4243\":1,\"4246\":1,\"4413\":1,\"4759\":1,\"4767\":1}}],[\"缺点是如果要增加新产品\",{\"1\":{\"586\":1,\"3779\":1}}],[\"喜欢\",{\"1\":{\"3198\":1,\"5467\":1}}],[\"运用es搜索技术\",{\"1\":{\"3302\":1,\"5571\":1}}],[\"运用hbase技术\",{\"1\":{\"3301\":1,\"5570\":1}}],[\"运用ai技术\",{\"1\":{\"3202\":1,\"5471\":1}}],[\"运用redis缓存技术\",{\"1\":{\"3199\":1,\"5468\":1}}],[\"运用mybatis\",{\"1\":{\"3197\":1,\"5466\":1}}],[\"运用spring\",{\"1\":{\"3195\":1,\"3196\":1,\"5464\":1,\"5465\":1}}],[\"运行在\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"运行后就是一个独立的进程\",{\"1\":{\"1217\":1,\"1385\":1,\"1553\":1,\"1721\":1,\"4628\":1}}],[\"运行的线程执行sleep\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"运行的线程执行wait\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"运行的线程在获取对象的同步锁时\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"运行状态\",{\"1\":{\"1106\":1,\"1274\":1,\"1442\":1,\"1610\":1,\"4517\":1}}],[\"运行groovy脚本\",{\"1\":{\"958\":1,\"3975\":1}}],[\"运行流程\",{\"1\":{\"816\":1,\"3833\":1}}],[\"运行时异常的特点是java编译器不会检查它\",{\"1\":{\"245\":1,\"3641\":1}}],[\"运行时异常\",{\"1\":{\"243\":1,\"3639\":1}}],[\"运行时异常和编译时异常\",{\"1\":{\"242\":1,\"3638\":1}}],[\"运行时数据区\",{\"0\":{\"183\":1,\"3577\":1},\"1\":{\"179\":1,\"182\":1,\"3573\":1,\"3576\":1}}],[\"热点文章实时计算\",{\"0\":{\"3297\":1,\"5566\":1},\"1\":{\"3192\":1,\"5461\":1}}],[\"热点数据\",{\"1\":{\"2794\":1,\"2801\":1,\"5156\":1,\"5163\":1}}],[\"浏览文章功能\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"浏览器解析渲染页面\",{\"1\":{\"2220\":1,\"2313\":1,\"5302\":1}}],[\"十二\",{\"0\":{\"3189\":1,\"5458\":1}}],[\"甲乙各抽一张\",{\"1\":{\"3187\":1}}],[\"甲乙两个人\",{\"1\":{\"3187\":1}}],[\"凉了\",{\"1\":{\"3183\":1}}],[\"博客社区\",{\"1\":{\"3182\":1}}],[\"海尔\",{\"0\":{\"3178\":1}}],[\"秋招\",{\"0\":{\"3177\":1}}],[\"突然挂掉了\",{\"1\":{\"3211\":1,\"5480\":1}}],[\"突然电话断了\",{\"1\":{\"3149\":1,\"5429\":1}}],[\"突然说到mysqlb+树用到了红黑树\",{\"1\":{\"3141\":1,\"5421\":1}}],[\"讲一下研究生的论文成果\",{\"1\":{\"3166\":1,\"5446\":1}}],[\"讲一下spring\",{\"1\":{\"3160\":1,\"5440\":1}}],[\"讲一下你的项目经验\",{\"1\":{\"3147\":1,\"5427\":1}}],[\"讲一下为什么用线程池\",{\"1\":{\"3143\":1,\"5423\":1}}],[\"讲一下线程池参数maxsize满了你会怎么做\",{\"1\":{\"3144\":1,\"5424\":1}}],[\"讲一下线程池\",{\"1\":{\"3142\":1,\"5422\":1}}],[\"讲了下红黑树的特性\",{\"1\":{\"3141\":1,\"5421\":1}}],[\"讲真\",{\"1\":{\"2340\":1,\"4702\":1}}],[\"吧啦吧啦\",{\"1\":{\"3141\":1,\"5421\":1}}],[\"联想\",{\"0\":{\"3139\":1,\"5419\":1}}],[\"联合索引\",{\"0\":{\"2412\":1,\"4774\":1},\"1\":{\"2375\":1,\"2413\":1,\"4737\":1,\"4775\":1}}],[\"想从实习中收获什么\",{\"1\":{\"3174\":1,\"5454\":1}}],[\"想打他\",{\"1\":{\"3137\":1,\"5417\":1}}],[\"想要给同一局域网内的\",{\"1\":{\"2237\":1,\"5319\":1}}],[\"想要其生效必须引入spring\",{\"1\":{\"900\":1,\"3917\":1}}],[\"想要使用此布局\",{\"1\":{\"151\":1,\"155\":1,\"3550\":1}}],[\"离谱\",{\"1\":{\"3120\":1,\"3187\":1,\"5400\":1}}],[\"离散性可能会变差\",{\"1\":{\"640\":1,\"3732\":1}}],[\"熟悉的是java基础和mysql\",{\"1\":{\"3120\":1,\"5400\":1}}],[\"她说最晚周五下午\",{\"1\":{\"3116\":1,\"5396\":1}}],[\"态度算好的\",{\"0\":{\"3110\":1,\"5390\":1}}],[\"规避资源耗尽的风险\",{\"1\":{\"3088\":1,\"4342\":1}}],[\"规定除了最初建立连接时的\",{\"1\":{\"2102\":1}}],[\"明确指出线程资源必须通过线程池提供\",{\"1\":{\"3085\":1,\"4339\":1}}],[\"便处理在任务队列中的任务\",{\"1\":{\"3080\":1,\"4334\":1}}],[\"便于减少系统的重复代码\",{\"1\":{\"806\":1,\"3823\":1}}],[\"便于后者的封装和控制\",{\"1\":{\"596\":1,\"3789\":1}}],[\"待优化\",{\"1\":{\"3299\":1,\"3300\":1,\"3301\":1,\"3302\":1,\"5568\":1,\"5569\":1,\"5570\":1,\"5571\":1}}],[\"待线程空闲\",{\"1\":{\"3081\":1,\"4335\":1}}],[\"待有线程空闲时\",{\"1\":{\"3080\":1,\"4334\":1}}],[\"待该线程操作完释放互斥锁后\",{\"1\":{\"1250\":1,\"1418\":1,\"1586\":1,\"1754\":1,\"4661\":1}}],[\"密钥的管理和分发非常困难\",{\"1\":{\"3398\":1}}],[\"密钥持有者用私有密钥对收到的信息进行解密\",{\"1\":{\"3392\":1}}],[\"密码\",{\"1\":{\"3372\":1,\"3378\":1}}],[\"密码为123456\",{\"1\":{\"3339\":1}}],[\"密码以及验证码校验正确的话\",{\"1\":{\"3225\":1,\"5494\":1}}],[\"密码以及验证码用于登陆系统\",{\"1\":{\"3224\":1,\"5493\":1}}],[\"密码加密的文章\",{\"0\":{\"23\":1,\"3422\":1}}],[\"密集型任务的应用中\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"密集型任务\",{\"1\":{\"3076\":1,\"3077\":1,\"4330\":1,\"4331\":1}}],[\"堆\",{\"1\":{\"3067\":1,\"4321\":1}}],[\"堆积在内存里\",{\"1\":{\"2758\":1,\"5120\":1}}],[\"延迟队列服务提供对外接口\",{\"1\":{\"3273\":1,\"5542\":1}}],[\"延迟任务是一个通用的服务\",{\"1\":{\"3267\":1,\"5536\":1}}],[\"延迟发布\",{\"1\":{\"3262\":1,\"5531\":1}}],[\"延迟阻塞队列\",{\"1\":{\"3067\":1,\"4321\":1}}],[\"延迟写\",{\"1\":{\"2741\":1,\"5103\":1}}],[\"影响程序的整体性能\",{\"1\":{\"3058\":1,\"4312\":1}}],[\"影响程序的并发访问性\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"抛出\",{\"1\":{\"3057\":1,\"4311\":1}}],[\"抛出一个运行时异常\",{\"1\":{\"260\":1,\"3656\":1}}],[\"饱和策略会调用rejectedexecutionhandler\",{\"1\":{\"3072\":1,\"4326\":1}}],[\"饱和策略来配置线程池的时候\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"饱和策略\",{\"1\":{\"3052\":1,\"4306\":1}}],[\"杨路恒\",{\"1\":{\"3041\":1,\"4295\":1}}],[\"调优和监控\",{\"1\":{\"3038\":1,\"4292\":1}}],[\"调用执行自己的线程运行任务\",{\"1\":{\"3058\":1,\"4312\":1}}],[\"调用方法要和本地抽象方法的签名完全一致\",{\"1\":{\"1846\":1,\"4435\":1}}],[\"调用者就会等待被调用者的响应\",{\"1\":{\"1833\":1,\"4422\":1}}],[\"调用\",{\"1\":{\"317\":1,\"818\":1,\"3705\":1,\"3835\":1}}],[\"调用它的方法\",{\"1\":{\"310\":1,\"3698\":1}}],[\"调用自己的\",{\"1\":{\"234\":1,\"3628\":1}}],[\"调用父加载器\",{\"1\":{\"233\":1,\"3627\":1}}],[\"盒子中可以存储每个线程的私有数据\",{\"1\":{\"3021\":1,\"4275\":1}}],[\"活活饿死\",{\"1\":{\"2992\":1,\"4246\":1}}],[\"活跃事务列表\",{\"1\":{\"2625\":1,\"4987\":1}}],[\"失败则乖乖排队\",{\"1\":{\"2990\":1,\"4244\":1}}],[\"失败则返回\",{\"1\":{\"2929\":1,\"2930\":1,\"2932\":1,\"4183\":1,\"4184\":1,\"4186\":1}}],[\"唤醒线程的开销\",{\"1\":{\"2991\":1,\"4245\":1}}],[\"唤醒下一个阻塞线程有系统开销\",{\"1\":{\"2989\":1,\"4243\":1}}],[\"唤醒出队等\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"吞吐量会下降很多\",{\"1\":{\"2989\":1,\"4243\":1}}],[\"像\",{\"1\":{\"2985\":1,\"2994\":1,\"4239\":1,\"4248\":1}}],[\"像java\",{\"1\":{\"2979\":1,\"4233\":1}}],[\"独享锁与共享锁也是通过aqs来实现的\",{\"1\":{\"2981\":1,\"4235\":1}}],[\"独享锁\",{\"0\":{\"2976\":1,\"4230\":1},\"1\":{\"2977\":1,\"4231\":1}}],[\"独占方式\",{\"1\":{\"2929\":1,\"2930\":1,\"4183\":1,\"4184\":1}}],[\"独占和共享\",{\"1\":{\"2908\":1,\"4162\":1}}],[\"独占表锁\",{\"1\":{\"2511\":1,\"2512\":1,\"4873\":1,\"4874\":1}}],[\"独占锁\",{\"1\":{\"2504\":1,\"2537\":1,\"2909\":1,\"4163\":1,\"4866\":1,\"4899\":1}}],[\"机制\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"乐观锁\",{\"0\":{\"2965\":1,\"4219\":1},\"1\":{\"2966\":1,\"3231\":1,\"4220\":1,\"5500\":1}}],[\"认为别人不会同时修改数据\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"认为其他人也会修改数据\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"认可http\",{\"1\":{\"1972\":1,\"1987\":1,\"2002\":1,\"2015\":1,\"2028\":1,\"2043\":1,\"5263\":1,\"5286\":1}}],[\"悲观锁大多数情况下依靠数据库的锁机制实现\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"悲观锁\",{\"0\":{\"2963\":1,\"4217\":1}}],[\"强制从新从主内存加载数据\",{\"1\":{\"2948\":1,\"4202\":1}}],[\"硬件层面的内存屏障分为load\",{\"1\":{\"2947\":1,\"4201\":1}}],[\"尝试释放资源\",{\"1\":{\"2930\":1,\"2932\":1,\"4184\":1,\"4186\":1}}],[\"尝试获取资源\",{\"1\":{\"2929\":1,\"2931\":1,\"4183\":1,\"4185\":1}}],[\"尝试如下的代码片段\",{\"1\":{\"348\":1}}],[\"带来非常大的开销\",{\"1\":{\"2893\":1,\"4147\":1}}],[\"带来的效益是一样的\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"典型\",{\"0\":{\"2885\":1,\"4139\":1},\"1\":{\"2902\":1,\"4156\":1}}],[\"典型值为\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"敲黑板\",{\"1\":{\"2884\":1,\"4138\":1}}],[\"封装好的并发工具类来间接使用的\",{\"1\":{\"2881\":1,\"4135\":1}}],[\"封装起来\",{\"1\":{\"806\":1,\"3823\":1}}],[\"旧的预期值a=1\",{\"1\":{\"2866\":1,\"4120\":1}}],[\"旧的预期值a\",{\"1\":{\"2863\":1,\"4117\":1}}],[\"旧消息就会过期并被删除\",{\"1\":{\"1010\":1,\"5186\":1}}],[\"轻量级锁的获取有两种情况\",{\"1\":{\"2846\":1,\"4100\":1}}],[\"轻量级锁的获取及释放依赖多次\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"轻量级锁认为虽然竞争是存在的\",{\"1\":{\"2845\":1,\"4099\":1}}],[\"轻量级锁\",{\"0\":{\"2844\":1,\"4098\":1}}],[\"恢复到无锁\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"持有偏向锁的线程才会释放锁\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"持有锁的线程id也在对象头里\",{\"1\":{\"2841\":1,\"4095\":1}}],[\"持久化功能的实现可以简单分为\",{\"1\":{\"2739\":1,\"5101\":1}}],[\"持久化后每执行一条会更改\",{\"1\":{\"2735\":1,\"5097\":1}}],[\"持久化的实时性更好\",{\"1\":{\"2733\":1,\"5095\":1}}],[\"持久化\",{\"0\":{\"2719\":1,\"2724\":1,\"2732\":1,\"5081\":1,\"5086\":1,\"5094\":1}}],[\"持久性是通过\",{\"1\":{\"2572\":1,\"4934\":1}}],[\"持久性\",{\"1\":{\"844\":1,\"2570\":1,\"3861\":1,\"4932\":1}}],[\"初次执行synchronized代码块时\",{\"1\":{\"2839\":1,\"4093\":1}}],[\"初始状态\",{\"1\":{\"2864\":1,\"4118\":1}}],[\"初始序列号\",{\"1\":{\"2068\":1}}],[\"初始值为16\",{\"1\":{\"744\":1}}],[\"初始值是16\",{\"1\":{\"742\":1}}],[\"初始化的序列号都要求不一样呢\",{\"0\":{\"2182\":1},\"1\":{\"2067\":1}}],[\"初始化选举\",{\"1\":{\"1884\":1,\"4473\":1}}],[\"初始化spring\",{\"1\":{\"960\":1,\"3977\":1}}],[\"初始化\",{\"1\":{\"190\":1,\"3584\":1}}],[\"公钥是公开的\",{\"1\":{\"3399\":1}}],[\"公开密钥用于对信息加密\",{\"1\":{\"3392\":1}}],[\"公平锁\",{\"0\":{\"2986\":1,\"4240\":1},\"1\":{\"2987\":1,\"4241\":1}}],[\"公平锁和非公平锁等高级功能\",{\"1\":{\"2828\":1,\"4082\":1}}],[\"公平锁公平锁是指多个线程在等待同一个锁时\",{\"1\":{\"2825\":1,\"4079\":1}}],[\"公司推出的\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"改为处理其他事情\",{\"1\":{\"2824\":1,\"4078\":1}}],[\"改完了编译运行没有bug然而过了两天你发现用linkedhashmap会有隐患\",{\"1\":{\"292\":1,\"3680\":1}}],[\"限流\",{\"1\":{\"2809\":1,\"5171\":1}}],[\"限制每张表上的索引数量\",{\"1\":{\"2427\":1,\"4789\":1}}],[\"摧枯拉朽之势\",{\"1\":{\"2804\":1,\"5166\":1}}],[\"哈哈\",{\"1\":{\"2803\":1,\"5165\":1}}],[\"哈希索引\",{\"1\":{\"2364\":1,\"4726\":1}}],[\"哈希表是键值对的集合\",{\"1\":{\"2348\":1,\"4710\":1}}],[\"哈希表结构\",{\"0\":{\"439\":1,\"3764\":1},\"1\":{\"3028\":1,\"4282\":1}}],[\"哈希算法\",{\"1\":{\"776\":1,\"2349\":1,\"4711\":1}}],[\"哈希值的使用不同\",{\"1\":{\"651\":1}}],[\"哈希值进行与操作时可以保证低位的值不变\",{\"1\":{\"638\":1,\"3730\":1}}],[\"小羊看来网站上大家的讨论\",{\"1\":{\"5277\":1}}],[\"小羊在昨天2023\",{\"1\":{\"3386\":1}}],[\"小概率会误判\",{\"1\":{\"2784\":1,\"5146\":1}}],[\"小于该\",{\"1\":{\"2622\":1,\"4984\":1}}],[\"小于这个\",{\"1\":{\"2622\":1,\"2625\":1,\"4984\":1,\"4987\":1}}],[\"布隆过滤器说某个元素不在\",{\"1\":{\"2784\":1,\"5146\":1}}],[\"布隆过滤器说某个元素存在\",{\"1\":{\"2784\":1,\"5146\":1}}],[\"布隆过滤器是一个非常神奇的数据结构\",{\"1\":{\"2782\":1,\"5144\":1}}],[\"布隆过滤器\",{\"1\":{\"2781\":1,\"5143\":1}}],[\"布局与功能禁用\",{\"0\":{\"9\":1,\"3408\":1}}],[\"穿透\",{\"0\":{\"2774\":1,\"5136\":1}}],[\"击穿\",{\"0\":{\"2774\":1,\"5136\":1}}],[\"哨兵\",{\"0\":{\"2773\":1,\"5135\":1}}],[\"移除最不经常使用的\",{\"1\":{\"2771\":1,\"5133\":1}}],[\"移除最近最少使用的\",{\"1\":{\"2766\":1,\"5128\":1}}],[\"懒汉式删除\",{\"1\":{\"2757\":1,\"5119\":1}}],[\"懒加载\",{\"1\":{\"582\":1,\"3775\":1}}],[\"惰性删除对\",{\"1\":{\"2757\":1,\"5119\":1}}],[\"惰性删除\",{\"1\":{\"2755\":1,\"5117\":1}}],[\"磁盘机器就宕机了\",{\"1\":{\"2736\":1,\"5098\":1}}],[\"快照文件\",{\"1\":{\"2729\":1,\"5091\":1}}],[\"快照持久化是\",{\"1\":{\"2726\":1,\"5088\":1}}],[\"快照\",{\"1\":{\"2721\":1,\"5083\":1}}],[\"快速取出\",{\"1\":{\"2349\":1,\"4711\":1}}],[\"电子邮件\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"电话面试\",{\"1\":{\"3116\":1,\"5396\":1}}],[\"电商系统中商品的销量排名等\",{\"1\":{\"2718\":1,\"5080\":1}}],[\"电脑里有\",{\"1\":{\"358\":1}}],[\"游戏积分排行榜\",{\"1\":{\"2718\":1,\"5080\":1}}],[\"替代了双向链表和压缩列表\",{\"1\":{\"2693\":1,\"5055\":1}}],[\"替换\",{\"1\":{\"1165\":1,\"1333\":1,\"1501\":1,\"1669\":1,\"4576\":1}}],[\"命令不做任何操作\",{\"1\":{\"3291\":1,\"5560\":1}}],[\"命令在指定的\",{\"1\":{\"3290\":1,\"5559\":1}}],[\"命令生成编译后的\",{\"1\":{\"2999\":1,\"4253\":1}}],[\"命令查看\",{\"1\":{\"2999\":1,\"4253\":1}}],[\"命令追加\",{\"1\":{\"2740\":1,\"5102\":1}}],[\"命令实现消息队列\",{\"1\":{\"2695\":1,\"5057\":1}}],[\"命令可以实现一个最简易的分布式锁\",{\"1\":{\"2687\":1,\"5049\":1}}],[\"命名服务\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"命名管道\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"命名\",{\"1\":{\"577\":1,\"3770\":1}}],[\"拼接字符串不会造成缓冲区溢出\",{\"1\":{\"2683\":1,\"5045\":1}}],[\"音频\",{\"1\":{\"2681\":1,\"5043\":1}}],[\"音频等多媒体通信\",{\"1\":{\"2164\":1}}],[\"地理位置\",{\"1\":{\"2675\":1,\"5037\":1}}],[\"地址返回客户端\",{\"1\":{\"2304\":1,\"5386\":1}}],[\"地址吗\",{\"1\":{\"2298\":1,\"2300\":1,\"5380\":1,\"5382\":1}}],[\"地址上托管多个域名\",{\"1\":{\"2268\":1,\"5350\":1}}],[\"地址在另一个子网中\",{\"1\":{\"2250\":1,\"5332\":1}}],[\"地址后\",{\"1\":{\"2246\":1,\"5328\":1}}],[\"地址为主机\",{\"1\":{\"2259\":1,\"5341\":1}}],[\"地址为查询分组的发送者\",{\"1\":{\"2245\":1,\"5327\":1}}],[\"地址为发送者本身\",{\"1\":{\"2245\":1,\"5327\":1}}],[\"地址为137\",{\"1\":{\"2237\":2,\"5319\":2}}],[\"地址恰恰相反\",{\"1\":{\"2245\":1,\"5327\":1}}],[\"地址信息\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"地址和一个\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"地址和\",{\"1\":{\"2244\":1,\"2246\":1,\"2249\":1,\"5326\":1,\"5328\":1,\"5331\":1}}],[\"地址和端口号组成\",{\"1\":{\"2118\":1}}],[\"地址是本子网内与路由器连接的接口的\",{\"1\":{\"2254\":1,\"5336\":1}}],[\"地址是\",{\"1\":{\"2254\":2,\"5336\":2}}],[\"地址是否为自己的\",{\"1\":{\"2243\":1,\"5325\":1}}],[\"地址是广播地址\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"地址绝不会是主机\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"地址也是主机\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"地址即为主机\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"地址对应的映射条目\",{\"1\":{\"2240\":1,\"5322\":1}}],[\"地址映射关系\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"地址\",{\"1\":{\"2232\":1,\"2238\":2,\"2239\":1,\"2240\":1,\"2242\":7,\"2243\":1,\"2249\":2,\"2251\":1,\"2252\":1,\"2253\":2,\"2254\":5,\"2255\":1,\"2257\":1,\"2258\":2,\"2259\":1,\"2298\":1,\"2303\":1,\"5314\":1,\"5320\":2,\"5321\":1,\"5322\":1,\"5324\":7,\"5325\":1,\"5331\":2,\"5333\":1,\"5334\":1,\"5335\":2,\"5336\":5,\"5337\":1,\"5339\":1,\"5340\":2,\"5341\":1,\"5380\":1,\"5385\":1}}],[\"地址的一些问题\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"地址转\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"地址才是物理地址\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"地址属于逻辑地址\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"地址解析协议\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"散列值\",{\"1\":{\"3327\":1}}],[\"散列算法\",{\"1\":{\"3327\":1}}],[\"散列\",{\"0\":{\"2703\":1,\"5065\":1},\"1\":{\"2674\":1,\"5036\":1}}],[\"点赞\",{\"1\":{\"2702\":1,\"3198\":1,\"5064\":1,\"5467\":1}}],[\"点\",{\"1\":{\"2669\":1,\"5031\":1}}],[\"场景\",{\"1\":{\"2655\":1,\"5017\":1}}],[\"场景问题\",{\"0\":{\"1922\":1,\"4028\":1,\"5592\":1}}],[\"占用硬盘超过500tb\",{\"1\":{\"3352\":1}}],[\"占用空间由定义的宽度决定\",{\"1\":{\"2650\":1,\"5012\":1}}],[\"占用也就空间越小\",{\"1\":{\"2646\":1,\"5008\":1}}],[\"精准浮点\",{\"1\":{\"2649\":1,\"5011\":1}}],[\"禁止驱逐数据\",{\"1\":{\"2768\":1,\"5130\":1}}],[\"禁止使用\",{\"0\":{\"2659\":1,\"5021\":1}}],[\"禁止使用全文索引\",{\"0\":{\"2654\":1,\"5016\":1}}],[\"禁止给表中的每一列都建立单独的索引\",{\"0\":{\"2656\":1,\"5018\":1}}],[\"禁止在数据库中存储文件\",{\"0\":{\"2642\":1,\"5004\":1}}],[\"禁用了如下功能\",{\"1\":{\"11\":1,\"3410\":1}}],[\"禁用展示\",{\"1\":{\"7\":1,\"99\":1,\"3406\":1,\"3498\":1}}],[\"故该\",{\"1\":{\"2634\":1,\"4996\":1}}],[\"隐藏字段\",{\"1\":{\"2615\":1,\"2616\":1,\"2617\":1,\"4977\":1,\"4978\":1,\"4979\":1}}],[\"串行化\",{\"1\":{\"2596\":1,\"2603\":1,\"2604\":1,\"2606\":2,\"2612\":1,\"4958\":1,\"4965\":1,\"4966\":1,\"4968\":2,\"4974\":1}}],[\"条记录\",{\"1\":{\"2588\":1,\"4950\":1}}],[\"条\",{\"1\":{\"2588\":1,\"2590\":1,\"4950\":1,\"4952\":1}}],[\"条件查询的字段\",{\"1\":{\"2422\":1,\"4784\":1}}],[\"刚才得到的数据就是过期的数据\",{\"1\":{\"2580\":1,\"4942\":1}}],[\"刚刚开始有软件支持\",{\"1\":{\"1973\":1,\"1988\":1,\"2003\":1,\"2016\":1,\"2029\":1,\"2044\":1,\"5264\":1,\"5287\":1}}],[\"现象\",{\"1\":{\"2577\":1,\"2582\":1,\"2586\":1,\"4939\":1,\"4944\":1,\"4948\":1}}],[\"现在主流的彩虹表记录数据约90万亿条\",{\"1\":{\"3352\":1}}],[\"现在在csdn上的粉丝数达到了3k+\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"现在http\",{\"1\":{\"1973\":1,\"1988\":1,\"2003\":1,\"2016\":1,\"2029\":1,\"2044\":1,\"5264\":1,\"5287\":1}}],[\"现在查询非常慢\",{\"0\":{\"1944\":1,\"4050\":1}}],[\"现在\",{\"1\":{\"890\":1,\"3907\":1}}],[\"现在这个基于\",{\"1\":{\"392\":1}}],[\"脏读\",{\"0\":{\"2576\":1,\"4938\":1},\"1\":{\"2577\":1,\"2603\":1,\"4939\":1,\"4965\":1}}],[\"均可以被\",{\"1\":{\"2622\":1,\"4984\":1}}],[\"均为\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"均包含了发送和接收的\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"未提交事务修改过的数据\",{\"1\":{\"2577\":1,\"4939\":1}}],[\"未增加的情况\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"未能找到目标路由器的本子网接口的\",{\"1\":{\"2253\":1,\"5335\":1}}],[\"扣除了\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"商品到手\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"商品库存这类需要强一致的数据\",{\"1\":{\"1960\":1,\"4066\":1}}],[\"购买失败时\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"购买成功时\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"购物车系统\",{\"1\":{\"1938\":1,\"4044\":1}}],[\"称为临键锁\",{\"1\":{\"2552\":1,\"4914\":1}}],[\"称为间隙锁\",{\"1\":{\"2548\":1,\"4910\":1}}],[\"称为记录锁\",{\"1\":{\"2544\":1,\"4906\":1}}],[\"型关系\",{\"1\":{\"2556\":1,\"4918\":1}}],[\"型的记录锁是冲突的\",{\"1\":{\"2556\":1,\"4918\":1}}],[\"型的记录锁与\",{\"1\":{\"2556\":1,\"4918\":1}}],[\"型的\",{\"1\":{\"2554\":2,\"2555\":2,\"4916\":2,\"4917\":2}}],[\"型间隙锁\",{\"1\":{\"2550\":1,\"4912\":1}}],[\"型间隙锁和\",{\"1\":{\"2550\":1,\"4912\":1}}],[\"型与\",{\"1\":{\"2545\":2,\"2546\":2,\"2556\":1,\"4907\":2,\"4908\":2,\"4918\":1}}],[\"型记录锁\",{\"1\":{\"2545\":2,\"2546\":2,\"4907\":2,\"4908\":2}}],[\"型记录锁后\",{\"1\":{\"2545\":1,\"2546\":1,\"4907\":1,\"4908\":1}}],[\"间隙锁之间是兼容的\",{\"1\":{\"2550\":1,\"4912\":1}}],[\"间隙锁虽然存在\",{\"1\":{\"2550\":1,\"4912\":1}}],[\"间隙锁\",{\"1\":{\"2541\":1,\"2549\":1,\"4903\":1,\"4911\":1}}],[\"记录下来\",{\"1\":{\"2626\":1,\"4988\":1}}],[\"记录数量\",{\"1\":{\"2586\":1,\"4948\":1}}],[\"记录锁+间隙锁\",{\"1\":{\"2609\":1,\"4971\":1}}],[\"记录锁\",{\"1\":{\"2540\":1,\"4902\":1}}],[\"记录了map中kv对的个数\",{\"1\":{\"676\":1}}],[\"满足写写互斥\",{\"1\":{\"2537\":1,\"4899\":1}}],[\"满足读读共享\",{\"1\":{\"2537\":1,\"4899\":1}}],[\"行级锁的类型主要有三类\",{\"1\":{\"2539\":1,\"4901\":1}}],[\"行级锁\",{\"0\":{\"2532\":1,\"4894\":1}}],[\"行为型\",{\"1\":{\"577\":1,\"3770\":1}}],[\"修饰的方法并没有\",{\"1\":{\"3011\":1,\"3015\":1,\"4265\":1,\"4269\":1}}],[\"修饰的字段加上轻量级锁\",{\"1\":{\"2522\":1,\"4884\":1}}],[\"修饰的字段的值是连续递增的\",{\"1\":{\"2519\":1,\"4881\":1}}],[\"修饰的字段赋值递增的值\",{\"1\":{\"2518\":1,\"4880\":1}}],[\"修饰方法的的情况\",{\"0\":{\"3008\":1,\"4262\":1}}],[\"修改发布文章代码\",{\"1\":{\"3275\":1,\"5544\":1}}],[\"修改为\",{\"1\":{\"2886\":1,\"4140\":1}}],[\"修改锁标志位\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"修改对象头里的锁标志位\",{\"1\":{\"2839\":1,\"4093\":1}}],[\"修改了表字段\",{\"1\":{\"2496\":1,\"4858\":1}}],[\"修改代价肯定是较大的\",{\"1\":{\"2399\":1,\"4761\":1}}],[\"修改\",{\"1\":{\"933\":1,\"1778\":1,\"3950\":1,\"4367\":1}}],[\"修改元素\",{\"1\":{\"656\":1}}],[\"修改引用类型\",{\"1\":{\"271\":1}}],[\"修改值类型\",{\"1\":{\"271\":1}}],[\"普通\",{\"1\":{\"2527\":1,\"2608\":1,\"4889\":1,\"4970\":1}}],[\"普通的\",{\"1\":{\"2506\":1,\"2534\":1,\"4868\":1,\"4896\":1}}],[\"普通索引的唯一作用就是为了快速查询数据\",{\"1\":{\"2387\":1,\"4749\":1}}],[\"普通索引\",{\"1\":{\"2372\":1,\"2384\":1,\"2387\":1,\"4734\":1,\"4746\":1,\"4749\":1}}],[\"掉这个长事务\",{\"1\":{\"2500\":1,\"4862\":1}}],[\"释放带来的性能损耗\",{\"1\":{\"2853\":1,\"4107\":1}}],[\"释放间隙锁的时刻\",{\"1\":{\"2559\":1,\"4921\":1}}],[\"释放\",{\"1\":{\"2489\":1,\"2490\":1,\"2848\":1,\"4102\":1,\"4851\":1,\"4852\":1}}],[\"申请自增主键后就释放锁\",{\"1\":{\"2525\":1,\"4887\":1}}],[\"申请\",{\"1\":{\"2489\":1,\"2490\":1,\"4851\":1,\"4852\":1}}],[\"牛逼的地方在于实现了颗粒度更细的行级锁\",{\"1\":{\"2482\":1,\"4844\":1}}],[\"意向独占锁\",{\"1\":{\"2504\":1,\"2505\":1,\"4866\":1,\"4867\":1}}],[\"意向共享锁和意向独占锁是表级锁\",{\"1\":{\"2509\":1,\"4871\":1}}],[\"意向共享锁\",{\"1\":{\"2503\":1,\"4865\":1}}],[\"意向锁的目的是为了快速判断表里是否有记录被加锁\",{\"1\":{\"2513\":1,\"4875\":1}}],[\"意向锁\",{\"0\":{\"2501\":1,\"4863\":1},\"1\":{\"2471\":1,\"2511\":1,\"2512\":1,\"4833\":1,\"4873\":1,\"4874\":1}}],[\"意味着整个数据库都是只读状态\",{\"1\":{\"2459\":1,\"4821\":1}}],[\"元\",{\"1\":{\"2568\":10,\"4930\":10}}],[\"元和对\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"元和\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"元数据锁\",{\"0\":{\"2483\":1,\"4845\":1},\"1\":{\"2470\":1,\"4832\":1}}],[\"元素的顺序发生了变化\",{\"1\":{\"630\":1,\"3722\":1}}],[\"元素在插入treeset时compareto\",{\"1\":{\"462\":1}}],[\"元素不可重复\",{\"1\":{\"454\":1}}],[\"元素无放入顺序\",{\"1\":{\"454\":1}}],[\"元素可重复\",{\"1\":{\"452\":1}}],[\"元素有放入顺序\",{\"1\":{\"452\":1}}],[\"备份数据库的工具是\",{\"1\":{\"2464\":1,\"4826\":1}}],[\"备份期间业务依然可以对数据进行更新操作\",{\"1\":{\"2462\":1,\"4824\":1}}],[\"备份就会花费很多的时间\",{\"1\":{\"2460\":1,\"4822\":1}}],[\"备忘录\",{\"1\":{\"577\":1,\"3770\":1}}],[\"涉及的索引都不会被使用到\",{\"1\":{\"2443\":1,\"4805\":1}}],[\"较普通索引会占用更小的空间\",{\"1\":{\"2436\":1,\"4798\":1}}],[\"冗余索引指的是索引的功能相同\",{\"1\":{\"2434\":1,\"4796\":1}}],[\"尽管\",{\"1\":{\"2562\":1,\"4924\":1}}],[\"尽可能的考虑建立联合索引而不是单列索引\",{\"1\":{\"2431\":1,\"4793\":1}}],[\"尽量使得明文密码及其md5值\",{\"1\":{\"3352\":1,\"3369\":1}}],[\"尽量将无效的\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"尽量少的调整分区分配的变动\",{\"1\":{\"1047\":1,\"5223\":1}}],[\"尽量均衡\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"尽量做到任何一位的变化都能对最终得到的结果产生影响\",{\"1\":{\"749\":1}}],[\"频繁需要排序的字段\",{\"1\":{\"2423\":1,\"4785\":1}}],[\"复合索引\",{\"1\":{\"2413\":1,\"4775\":1}}],[\"复制\",{\"1\":{\"1778\":1,\"4367\":1}}],[\"跟聚簇索引一样\",{\"1\":{\"2406\":1,\"4768\":1}}],[\"值\",{\"1\":{\"2710\":1,\"2832\":1,\"4086\":1,\"5072\":1}}],[\"值的字段\",{\"1\":{\"2380\":1,\"4742\":1}}],[\"值为false时\",{\"1\":{\"989\":1,\"4006\":1}}],[\"值为true时\",{\"1\":{\"989\":1,\"4006\":1}}],[\"覆盖索引即需要查询的字段正好是索引的字段\",{\"1\":{\"2410\":1,\"4772\":1}}],[\"覆盖索引\",{\"0\":{\"2408\":1,\"4770\":1},\"1\":{\"2374\":1,\"2409\":1,\"4736\":1,\"4771\":1}}],[\"列表每个元素的值都小于\",{\"1\":{\"2691\":1,\"5053\":1}}],[\"列表\",{\"0\":{\"2688\":1,\"5050\":1},\"1\":{\"2626\":1,\"2674\":1,\"4988\":1,\"5036\":1}}],[\"列值唯一\",{\"1\":{\"2371\":1,\"2373\":1,\"4733\":1,\"4735\":1}}],[\"列上可以创建全文索引\",{\"1\":{\"2366\":1,\"2376\":1,\"4728\":1,\"4738\":1}}],[\"仅启动一个\",{\"1\":{\"3101\":1,\"4355\":1}}],[\"仅存在结点之间的关联关系\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"仅仅是定义了同步状态的获取和释放的方法\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"仅仅是写到缓冲区\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"仅仅通过给\",{\"1\":{\"2758\":1,\"5120\":1}}],[\"仅加速查询\",{\"1\":{\"2372\":1,\"4734\":1}}],[\"仅支持\",{\"1\":{\"2365\":1,\"4727\":1}}],[\"仅知道目的地的\",{\"1\":{\"2238\":1,\"5320\":1}}],[\"辅助索引的\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"辅助索引\",{\"1\":{\"2360\":1,\"2369\":1,\"2401\":1,\"4722\":1,\"4731\":1,\"4763\":1}}],[\"聚集索引\",{\"1\":{\"2360\":1,\"2368\":1,\"4722\":1,\"4730\":1}}],[\"聚簇索引对于主键的排序查找和范围查找速度非常快\",{\"1\":{\"2396\":1,\"4758\":1}}],[\"聚簇索引少了一次读取数据的\",{\"1\":{\"2395\":1,\"4757\":1}}],[\"聚簇索引的查询速度非常的快\",{\"1\":{\"2395\":1,\"4757\":1}}],[\"聚簇索引\",{\"0\":{\"2391\":1,\"4753\":1},\"1\":{\"2360\":1,\"2368\":1,\"2392\":1,\"4722\":1,\"4730\":1,\"4754\":1}}],[\"搜索文章功能\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"搜索算法搜索索引\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"搜索引擎通常会更青睐使用\",{\"1\":{\"2283\":1,\"5365\":1}}],[\"搜索引擎优化\",{\"1\":{\"2283\":1,\"5365\":1}}],[\"叶节点的\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"叶子节点存储的是主键+列值\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"叶子节点存储索引和索引对应的数据\",{\"1\":{\"2393\":1,\"4755\":1}}],[\"叶子节点也都是有序的\",{\"1\":{\"2395\":1,\"4757\":1}}],[\"叶子节点的顺序检索很明显\",{\"1\":{\"2357\":1,\"4719\":1}}],[\"叶子节点\",{\"1\":{\"424\":1,\"3749\":1}}],[\"假如我们要对表中的数据进行排序或者进行范围查询\",{\"1\":{\"2350\":1,\"4712\":1}}],[\"假设现在我要统计index这个接口的qps\",{\"1\":{\"3311\":1}}],[\"假设没有冲突去完成某项操作\",{\"1\":{\"2860\":1,\"4114\":1}}],[\"假设有一个变量初始值为\",{\"1\":{\"2886\":1,\"4140\":1}}],[\"假设有\",{\"1\":{\"2579\":1,\"2584\":1,\"2588\":1,\"4941\":1,\"4946\":1,\"4950\":1}}],[\"假设有三个消费者分别为c0\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"假设一个一般场景\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"假设当前有如下场景\",{\"1\":{\"2237\":1,\"5319\":1}}],[\"假设\",{\"1\":{\"1890\":1,\"1897\":1,\"1902\":1,\"2549\":1,\"4479\":1,\"4486\":1,\"4491\":1,\"4911\":1}}],[\"假设我们集群中有3台机器\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"假设n为3\",{\"1\":{\"735\":1}}],[\"假设容器中的类型是\",{\"1\":{\"341\":1}}],[\"域存储相应记录主键的值而不是地址\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"域存放的是数据记录的地址\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"域的值为地址读取相应的数据记录\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"域的值\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"域保存了完整的数据记录\",{\"1\":{\"2343\":1,\"2360\":1,\"4705\":1,\"4722\":1}}],[\"域名解析的工作流程\",{\"0\":{\"2296\":1,\"5378\":1}}],[\"树和\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"树的检索的过程相当于对范围内的每个节点的关键字做二分查找\",{\"1\":{\"2357\":1,\"4719\":1}}],[\"树的叶子节点都是独立的\",{\"1\":{\"2356\":1,\"4718\":1}}],[\"树的叶节点\",{\"1\":{\"2343\":1,\"2360\":1,\"4705\":1,\"4722\":1}}],[\"树的所有节点既存放键\",{\"1\":{\"2355\":1,\"4717\":1}}],[\"树的一种变体\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"树是\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"树也称\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"树\",{\"1\":{\"2351\":1,\"2352\":1,\"2354\":1,\"4713\":1,\"4714\":1,\"4716\":1}}],[\"树型bin用到的概率非常小\",{\"1\":{\"640\":1,\"3732\":1}}],[\"索引失效也是慢查询的主要原因之一\",{\"1\":{\"2438\":1,\"4800\":1}}],[\"索引占用的空间也是很多的\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"索引过多\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"索引可以增加查询效率\",{\"1\":{\"2429\":1,\"4791\":1}}],[\"索引可以提高效率同样可以降低效率\",{\"1\":{\"2428\":1,\"4790\":1}}],[\"索引可就不行了\",{\"1\":{\"2350\":1,\"4712\":1}}],[\"索引并不是越多越好\",{\"1\":{\"2428\":1,\"4790\":1}}],[\"索引已经排序\",{\"1\":{\"2423\":1,\"4785\":1}}],[\"索引字段的数据应该尽量不为\",{\"1\":{\"2420\":1,\"4782\":1}}],[\"索引下推\",{\"1\":{\"2416\":1,\"2417\":1,\"4778\":1,\"4779\":1}}],[\"索引结构和数据分开存放的索引\",{\"1\":{\"2369\":1,\"4731\":1}}],[\"索引结构和数据一起存放的索引\",{\"1\":{\"2368\":1,\"4730\":1}}],[\"索引都是使用\",{\"1\":{\"2363\":1,\"4725\":1}}],[\"索引不支持顺序和范围查询\",{\"1\":{\"2350\":1,\"4712\":1}}],[\"索引是一种用于快速查询和检索数据的数据结构\",{\"1\":{\"2345\":1,\"4707\":1}}],[\"索引\",{\"0\":{\"2344\":1,\"4706\":1},\"1\":{\"2363\":1,\"2365\":1,\"4725\":1,\"4727\":1}}],[\"索引文件和数据文件是分离的\",{\"1\":{\"2343\":1,\"2360\":1,\"4705\":1,\"4722\":1}}],[\"索引实现不一样\",{\"1\":{\"2341\":1,\"4703\":1}}],[\"索引计算公式为i\",{\"1\":{\"638\":1,\"3730\":1}}],[\"连行级锁都不支持\",{\"1\":{\"2340\":1,\"4702\":1}}],[\"连接到一起\",{\"1\":{\"3374\":1,\"3380\":1}}],[\"连接建立\",{\"1\":{\"2276\":1,\"5358\":1}}],[\"连接方式\",{\"1\":{\"2265\":1,\"5347\":1}}],[\"连接结束\",{\"1\":{\"2221\":1,\"2314\":1,\"5303\":1}}],[\"连接数远不能达到理论上限\",{\"1\":{\"2133\":1}}],[\"连接数\",{\"1\":{\"2132\":1}}],[\"连接中出现异常必须强制断开连接\",{\"1\":{\"2103\":1}}],[\"连接吗\",{\"0\":{\"2209\":1,\"2210\":1},\"1\":{\"2094\":1,\"2095\":1}}],[\"连接是断开的流程是什么\",{\"0\":{\"2208\":1},\"1\":{\"2093\":1}}],[\"连接时\",{\"0\":{\"2182\":1},\"1\":{\"2067\":1}}],[\"连接呢\",{\"0\":{\"2121\":1},\"1\":{\"2060\":1}}],[\"连接\",{\"0\":{\"2115\":1},\"1\":{\"2059\":1,\"2137\":1,\"2217\":1,\"2277\":1,\"2310\":1,\"5299\":1,\"5359\":1}}],[\"连接过程又可分为三步\",{\"1\":{\"195\":1,\"3589\":1}}],[\"咱们下面还是来简单对比一下两者\",{\"1\":{\"2324\":1,\"4686\":1}}],[\"言归正传\",{\"1\":{\"2324\":1,\"4686\":1}}],[\"压缩性\",{\"1\":{\"3329\":1}}],[\"压缩列表数据结构已经废弃了\",{\"1\":{\"2708\":1,\"2716\":1,\"5070\":1,\"5078\":1}}],[\"压缩文件这样的二进制数据\",{\"1\":{\"2681\":1,\"5043\":1}}],[\"压缩\",{\"1\":{\"2322\":1,\"4684\":1}}],[\"压根就没有使用共享内存这个玩意\",{\"1\":{\"1146\":1,\"1314\":1,\"1482\":1,\"1650\":1,\"4557\":1}}],[\"告诉本地\",{\"1\":{\"2303\":1,\"5385\":1}}],[\"老子不去\",{\"1\":{\"3138\":1,\"5418\":1}}],[\"老子是来面试的\",{\"1\":{\"3118\":1,\"5398\":1}}],[\"老三\",{\"1\":{\"2302\":1,\"5384\":1}}],[\"老二\",{\"1\":{\"2300\":1,\"5382\":1}}],[\"老大\",{\"1\":{\"2298\":1,\"5380\":1}}],[\"老规矩\",{\"1\":{\"1257\":1,\"1425\":1,\"1593\":1,\"1761\":1,\"4668\":1}}],[\"权威\",{\"1\":{\"2292\":1,\"2303\":1,\"5374\":1,\"5385\":1}}],[\"权限控制等\",{\"1\":{\"806\":1,\"3823\":1}}],[\"顶级域名服务器说\",{\"1\":{\"2301\":1,\"5383\":1}}],[\"顶级域名服务器地址给你\",{\"1\":{\"2299\":1,\"5381\":1}}],[\"顶级域\",{\"1\":{\"2288\":1,\"2291\":1,\"5370\":1,\"5373\":1}}],[\"越靠右的位置表示其层级越高\",{\"1\":{\"2286\":1,\"5368\":1}}],[\"越来越多的国际大公司已经开始使用http\",{\"1\":{\"1967\":1,\"1982\":1,\"1997\":1,\"2010\":1,\"2023\":1,\"2038\":1,\"5257\":1,\"5282\":1}}],[\"耗费的时间也是较多的\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"耗费更多服务器资源\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"耗时控制在\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"队头阻塞\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"队列里面除了第一个线程\",{\"1\":{\"2989\":1,\"4243\":1}}],[\"队列结构如下图所示\",{\"1\":{\"2917\":1,\"4171\":1}}],[\"队列是一个虚拟的双向队列\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"队列锁\",{\"1\":{\"2915\":1,\"4169\":1}}],[\"队列中写锁获取优先级高于读锁\",{\"1\":{\"2499\":1,\"4861\":1}}],[\"队列\",{\"0\":{\"413\":1,\"3738\":1},\"1\":{\"378\":1,\"1879\":1,\"4468\":1}}],[\"零往返时间\",{\"1\":{\"2276\":1,\"5358\":1}}],[\"零拷贝技术可以把文件传输的性能提高至少一倍以上\",{\"1\":{\"1190\":1,\"1358\":1,\"1526\":1,\"1694\":1,\"4601\":1}}],[\"零拷贝技术的文件传输方式相比传统文件传输的方式\",{\"1\":{\"1189\":1,\"1357\":1,\"1525\":1,\"1693\":1,\"4600\":1}}],[\"零拷贝技术实现的方式通常有\",{\"1\":{\"1160\":1,\"1328\":1,\"1496\":1,\"1664\":1,\"4571\":1}}],[\"零拷贝\",{\"0\":{\"1159\":1,\"1327\":1,\"1495\":1,\"1663\":1,\"4570\":1},\"1\":{\"1192\":1,\"1360\":1,\"1528\":1,\"1696\":1,\"4603\":1}}],[\"里是否存储着指向当前线程的偏向锁\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"里存储锁偏向的线程\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"里有\",{\"1\":{\"2761\":1,\"5123\":1}}],[\"里面收集了所有常用的密码\",{\"1\":{\"3352\":1}}],[\"里面是不会有线程的\",{\"1\":{\"3098\":1,\"4352\":1}}],[\"里面有一个内部类\",{\"1\":{\"2830\":1,\"4084\":1}}],[\"里面保存了\",{\"1\":{\"2621\":1,\"4983\":1}}],[\"里面记录的是主库分配的自增值\",{\"1\":{\"2530\":1,\"4892\":1}}],[\"里面表级别的锁有这几种\",{\"1\":{\"2468\":1,\"4830\":1}}],[\"里面的求hash的方法从hash改为了spread\",{\"1\":{\"788\":1}}],[\"里\",{\"1\":{\"2446\":1,\"4808\":1}}],[\"里默认和最常用的索引类型\",{\"1\":{\"2363\":1,\"4725\":1}}],[\"里的\",{\"1\":{\"2267\":1,\"5349\":1}}],[\"资源\",{\"1\":{\"2665\":1,\"2975\":1,\"3076\":1,\"4229\":1,\"4330\":1,\"5027\":1}}],[\"资源已被永久转移\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"资源会在\",{\"1\":{\"262\":1,\"3658\":1}}],[\"范围请求的标识码\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"范围是namespace级别的\",{\"1\":{\"998\":1,\"4015\":1}}],[\"光是错误响应状态码就新增了\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"转到人工审核\",{\"1\":{\"3256\":1,\"5525\":1}}],[\"转账\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"转移到了主机\",{\"1\":{\"2256\":1,\"5338\":1}}],[\"转换成\",{\"1\":{\"822\":1,\"3839\":1}}],[\"转换成一个对象\",{\"1\":{\"821\":1,\"3838\":1}}],[\"终将收到主机\",{\"1\":{\"2246\":1,\"5328\":1}}],[\"终止状态\",{\"1\":{\"1109\":1,\"1277\":1,\"1445\":1,\"1613\":1,\"4520\":1}}],[\"响应分组只有一个目的地\",{\"1\":{\"2245\":1,\"5327\":1}}],[\"响应分组具有和\",{\"1\":{\"2245\":1,\"5327\":1}}],[\"响应分组\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"响应消息\",{\"1\":{\"1978\":1,\"1993\":1,\"2008\":1,\"2021\":1,\"2034\":1,\"2049\":1,\"5269\":1,\"5292\":1}}],[\"丢弃之\",{\"1\":{\"2243\":1,\"5325\":1}}],[\"另\",{\"1\":{\"3169\":1,\"5449\":1}}],[\"另一个是喜欢旅游和骑行的方式来放松\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"另一个面试官问看你简历有高并发系统的东西\",{\"1\":{\"3164\":1,\"5444\":1}}],[\"另一个作用是\",{\"1\":{\"2632\":1,\"4994\":1}}],[\"另一个拥有该间隙区间内的插入意向锁\",{\"1\":{\"2562\":1,\"4924\":1}}],[\"另一种是响应分组\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"另外还可以考虑延迟执行\",{\"1\":{\"2894\":1,\"4148\":1}}],[\"另外数组底层的存储是连续的\",{\"1\":{\"1097\":1}}],[\"另外它只是一个简单变量\",{\"1\":{\"1096\":1}}],[\"另外一个缓存用于存放半成品对象\",{\"1\":{\"888\":1,\"3905\":1}}],[\"另外\",{\"1\":{\"598\":1,\"625\":1,\"1254\":1,\"1422\":1,\"1590\":1,\"1758\":1,\"1859\":1,\"1921\":1,\"2481\":1,\"2805\":1,\"3005\":1,\"3088\":1,\"3791\":1,\"3818\":1,\"4259\":1,\"4342\":1,\"4448\":1,\"4510\":1,\"4665\":1,\"4843\":1,\"5167\":1}}],[\"检索就结束了\",{\"1\":{\"2357\":1,\"4719\":1}}],[\"检索自己的\",{\"1\":{\"2240\":1,\"5322\":1}}],[\"检查该类是否已经加载过\",{\"1\":{\"229\":1,\"3623\":1}}],[\"物理上的下一个目的地\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"期间发生了什么\",{\"0\":{\"2212\":1,\"2306\":1,\"5294\":1}}],[\"期望寻找到主机\",{\"1\":{\"2257\":1,\"5339\":1}}],[\"期望寻找到目标路由器的本子网接口的\",{\"1\":{\"2251\":1,\"5333\":1}}],[\"期望\",{\"1\":{\"2100\":1}}],[\"键入网址到网页显示\",{\"0\":{\"2212\":1,\"2306\":1,\"5294\":1}}],[\"键和值都可以为null\",{\"1\":{\"669\":1}}],[\"号端口\",{\"1\":{\"2176\":2}}],[\"送给\",{\"1\":{\"2175\":1}}],[\"字节时\",{\"1\":{\"2714\":1,\"5076\":1}}],[\"字节\",{\"1\":{\"2691\":1,\"2706\":1,\"5053\":1,\"5068\":1}}],[\"字节流\",{\"1\":{\"2114\":1}}],[\"字符串不太一样\",{\"1\":{\"2680\":1,\"5042\":1}}],[\"字符串\",{\"0\":{\"2677\":1,\"5039\":1},\"1\":{\"2674\":1,\"5036\":1}}],[\"字符串类型的字段使用前缀索引代替普通索引\",{\"1\":{\"2435\":1,\"4797\":1}}],[\"字段中\",{\"1\":{\"3230\":1,\"5499\":1}}],[\"字段将其标记为已删除\",{\"1\":{\"2618\":1,\"4980\":1}}],[\"字段正好有索引\",{\"1\":{\"2411\":1,\"4773\":1}}],[\"字段知道该数据包是\",{\"1\":{\"2175\":1}}],[\"字段呢\",{\"1\":{\"2167\":1,\"2169\":1}}],[\"字段\",{\"1\":{\"2167\":1,\"2168\":1,\"2169\":1}}],[\"字段则会变长的\",{\"1\":{\"2150\":1}}],[\"字段时是\",{\"1\":{\"2150\":1}}],[\"首部长度\",{\"1\":{\"2167\":2}}],[\"首部长度较长\",{\"1\":{\"2150\":1}}],[\"首部只有\",{\"1\":{\"2151\":1}}],[\"首部在没有使用\",{\"1\":{\"2150\":1}}],[\"首部开销\",{\"1\":{\"2149\":1}}],[\"首先很感谢您给我的面试机会\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"首先切换到类的对应目录执行\",{\"1\":{\"2999\":1,\"4253\":1}}],[\"首先查看是否存在后继节点\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"首先通过子类判断是否获取了锁\",{\"1\":{\"2922\":1,\"4176\":1}}],[\"首先通过类加载器\",{\"1\":{\"182\":1,\"3576\":1}}],[\"首先将预期值a和内存地址v的实际值比较\",{\"1\":{\"2870\":1,\"4124\":1}}],[\"首先按照\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"首先也会给自己投票\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"首先毫无疑问的是剩下的两个\",{\"1\":{\"1889\":1,\"4478\":1}}],[\"首先它会比较\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"首先提供\",{\"1\":{\"1783\":1,\"4372\":1}}],[\"首先对分区按照分区id进行排序\",{\"1\":{\"1030\":1,\"5206\":1}}],[\"首先要知道他应该保存在这个链表数组中的哪个位置\",{\"1\":{\"721\":1}}],[\"首先计算元素的hashcode值\",{\"1\":{\"460\":1}}],[\"首先\",{\"1\":{\"229\":1,\"421\":1,\"530\":1,\"722\":1,\"757\":1,\"1179\":1,\"1347\":1,\"1515\":1,\"1683\":1,\"2494\":1,\"3623\":1,\"3746\":1,\"4590\":1,\"4856\":1}}],[\"流量控制\",{\"1\":{\"2146\":1}}],[\"流程图\",{\"0\":{\"89\":1,\"3488\":1}}],[\"拥塞控制\",{\"1\":{\"2146\":1}}],[\"约为\",{\"1\":{\"2132\":1}}],[\"端口号\",{\"1\":{\"2175\":1,\"2280\":1,\"5362\":1}}],[\"端口\",{\"1\":{\"2124\":1,\"2126\":1}}],[\"源代码等\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"源代码可以看出thread\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"源码\",{\"1\":{\"3024\":1,\"4278\":1}}],[\"源码对这部分代码进行改动下\",{\"1\":{\"898\":1,\"3915\":1}}],[\"源端口\",{\"1\":{\"2124\":1}}],[\"源地址\",{\"1\":{\"2123\":1}}],[\"窗口大小\",{\"1\":{\"2120\":1}}],[\"报文封装成链路层帧\",{\"1\":{\"2239\":1,\"5321\":1}}],[\"报文首部需要有长度字段以供计算\",{\"1\":{\"2170\":1}}],[\"报文会自动丢弃\",{\"1\":{\"2114\":1}}],[\"报文没有收到的时候\",{\"1\":{\"2114\":1}}],[\"报文是\",{\"1\":{\"2114\":1}}],[\"报文\",{\"1\":{\"2114\":2,\"2219\":1,\"2312\":1,\"5301\":1}}],[\"段\",{\"1\":{\"2105\":1}}],[\"段落\",{\"1\":{\"25\":1,\"26\":1,\"3424\":1,\"3425\":1}}],[\"位存储\",{\"1\":{\"2675\":1,\"5037\":1}}],[\"位数字\",{\"1\":{\"2650\":1,\"5012\":1}}],[\"位为\",{\"1\":{\"2105\":1}}],[\"位运算\",{\"1\":{\"730\":1}}],[\"累加\",{\"1\":{\"2099\":1}}],[\"序列化后的对象\",{\"1\":{\"2685\":1,\"5047\":1}}],[\"序列化存储相同内容的vector与arraylist\",{\"1\":{\"517\":1}}],[\"序列号和窗口大小称为连接\",{\"1\":{\"2116\":1}}],[\"序列号\",{\"1\":{\"2099\":1,\"2104\":1,\"2119\":1}}],[\"针对热点缓存失效的情况\",{\"1\":{\"2810\":1,\"5172\":1}}],[\"针对热点数据提前预热\",{\"1\":{\"2797\":1,\"5159\":1}}],[\"针对单个文件操作\",{\"1\":{\"2742\":1,\"5104\":1}}],[\"针对当前读\",{\"1\":{\"2609\":1,\"4971\":1}}],[\"针对快照读\",{\"1\":{\"2608\":1,\"4970\":1}}],[\"针对不同的隔离级别\",{\"1\":{\"2599\":1,\"4961\":1}}],[\"针对\",{\"1\":{\"2090\":1,\"2807\":1,\"5169\":1}}],[\"攻击者就可以通过穷举法反向查询出md5值\",{\"1\":{\"3352\":1}}],[\"攻击者创建了一个叫彩虹表的东西\",{\"1\":{\"3352\":1}}],[\"攻击\",{\"0\":{\"2188\":2},\"1\":{\"2073\":2}}],[\"头字段\",{\"1\":{\"2268\":2,\"5350\":2}}],[\"头\",{\"1\":{\"2268\":1,\"5350\":1}}],[\"头部压缩\",{\"1\":{\"2272\":1,\"5354\":1}}],[\"头部则没有\",{\"1\":{\"2169\":1}}],[\"头部长度则是不会变化的\",{\"1\":{\"2168\":1}}],[\"头部有\",{\"1\":{\"2167\":1,\"2169\":1}}],[\"头部没有\",{\"1\":{\"2167\":1}}],[\"头部格式\",{\"1\":{\"2135\":1}}],[\"头格式有哪些\",{\"0\":{\"2097\":1},\"1\":{\"2056\":1}}],[\"头节点和尾节点\",{\"1\":{\"475\":1}}],[\"截至2019年6月\",{\"1\":{\"1974\":1,\"1989\":1,\"2004\":1,\"2017\":1,\"2030\":1,\"2045\":1,\"5265\":1,\"5288\":1}}],[\"短短两年过去了\",{\"1\":{\"1973\":1,\"1988\":1,\"2003\":1,\"2016\":1,\"2029\":1,\"2044\":1,\"5264\":1,\"5287\":1}}],[\"短时间内\",{\"1\":{\"1836\":1,\"4425\":1}}],[\"真正被广泛使用起来要到2018年左右\",{\"1\":{\"1972\":1,\"1987\":1,\"2002\":1,\"2015\":1,\"2028\":1,\"2043\":1,\"5263\":1,\"5286\":1}}],[\"真正的栈\",{\"1\":{\"391\":1}}],[\"真正的继承关系中\",{\"1\":{\"364\":1}}],[\"真正的继承关系是很少的\",{\"1\":{\"364\":1}}],[\"辉煌不在\",{\"0\":{\"1970\":1,\"1985\":1,\"2000\":1,\"2013\":1,\"2026\":1,\"2041\":1,\"5261\":1,\"5284\":1}}],[\"任务模块是一个通用的模块\",{\"1\":{\"3271\":1,\"5540\":1}}],[\"任务会被保存在一个任务队列中\",{\"1\":{\"3081\":1,\"4335\":1}}],[\"任务队列最大长度为\",{\"1\":{\"3090\":1,\"3092\":1,\"4344\":1,\"4346\":1}}],[\"任务队列已经满了\",{\"1\":{\"3071\":1,\"4325\":1}}],[\"任务队列中存放的任务达到队列容量的时候\",{\"1\":{\"3046\":1,\"4300\":1}}],[\"任务队列未达到队列容量时\",{\"1\":{\"3045\":1,\"4299\":1}}],[\"任务可以不需要等到线程创建就能立即执行\",{\"1\":{\"3037\":1,\"4291\":1}}],[\"任务列表\",{\"0\":{\"75\":1,\"3474\":1}}],[\"任何需要延迟得任务都可以调用该服务\",{\"1\":{\"3267\":1,\"5536\":1}}],[\"任何线程对其进行操作都是在主内存中进行的\",{\"1\":{\"2943\":1,\"4197\":1}}],[\"任何查找都是从根节点到叶子节点的过程\",{\"1\":{\"2357\":1,\"4719\":1}}],[\"任何\",{\"1\":{\"2294\":1,\"5376\":1}}],[\"任何时候都有一个条件不满足\",{\"1\":{\"1965\":1,\"4071\":1}}],[\"预热\",{\"1\":{\"1963\":1,\"4069\":1}}],[\"冷机房新请求过来\",{\"0\":{\"1962\":1,\"4068\":1}}],[\"全文索引不适用于\",{\"1\":{\"2655\":1,\"5017\":1}}],[\"全文索引主要是为了检索大文本数据中的关键字的信息\",{\"1\":{\"2389\":1,\"4751\":1}}],[\"全文索引\",{\"1\":{\"2366\":1,\"2376\":1,\"2389\":1,\"4728\":1,\"4738\":1,\"4751\":1}}],[\"全称为\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"全称\",{\"1\":{\"2230\":1,\"5275\":1,\"5312\":1}}],[\"全球也仅有36\",{\"1\":{\"1974\":1,\"1989\":1,\"2004\":1,\"2017\":1,\"2030\":1,\"2045\":1,\"5265\":1,\"5288\":1}}],[\"全面使用只是个时间问题\",{\"1\":{\"1968\":1,\"1983\":1,\"1998\":1,\"2011\":1,\"2024\":1,\"2039\":1,\"5258\":1,\"5283\":1}}],[\"全部启动\",{\"1\":{\"3099\":1,\"4353\":1}}],[\"全部\",{\"1\":{\"1961\":1,\"4067\":1}}],[\"全局锁主要应用于做全库逻辑备份\",{\"1\":{\"2457\":1,\"4819\":1}}],[\"全局锁应用场景是什么\",{\"1\":{\"2456\":1,\"4818\":1}}],[\"全局锁\",{\"0\":{\"2448\":1,\"4810\":1}}],[\"全局数据\",{\"1\":{\"1960\":1,\"4066\":1}}],[\"全局单调递增的事务id\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"全局参数中配置开启二级缓存\",{\"1\":{\"984\":1,\"4001\":1}}],[\"给用户\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"给它起了个名字\",{\"1\":{\"1959\":1,\"4065\":1}}],[\"给自己投票为\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"阿里巴巴\",{\"1\":{\"3085\":1,\"3088\":1,\"4339\":1,\"4342\":1}}],[\"阿里巴巴java开发规约\",{\"1\":{\"695\":1}}],[\"阿里的\",{\"1\":{\"2334\":1,\"4696\":1}}],[\"阿里在实施这种方案时\",{\"1\":{\"1959\":1,\"4065\":1}}],[\"跨机房\",{\"1\":{\"1958\":1,\"4064\":1}}],[\"闭环\",{\"1\":{\"1958\":1,\"4064\":1}}],[\"各种特性也还不错\",{\"1\":{\"2322\":1,\"4684\":1}}],[\"各种中间件都要做改造\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"各自的端口号也相互独立\",{\"1\":{\"2176\":1}}],[\"各并发事务之间数据库是独立的\",{\"1\":{\"843\":1,\"3860\":1}}],[\"必要时增加中间表进行关联\",{\"1\":{\"2653\":1,\"5015\":1}}],[\"必然会有冲突\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"必须按照申请锁的时间顺序来依次获得锁\",{\"1\":{\"2825\":1,\"4079\":1}}],[\"必须使用\",{\"0\":{\"2659\":1,\"5021\":1}}],[\"必须要禁止其他节点的读写操作\",{\"1\":{\"1919\":1,\"4508\":1}}],[\"必须要按前后的顺序执行\",{\"1\":{\"1068\":1,\"5244\":1}}],[\"必须依靠其他线程调用notify\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"必须指定事务应该如何传播\",{\"1\":{\"858\":1,\"3875\":1}}],[\"必须是已经注册到\",{\"1\":{\"826\":1,\"3843\":1}}],[\"必须逐个比较\",{\"1\":{\"478\":1}}],[\"必须从头或尾顺着链接找\",{\"1\":{\"477\":1}}],[\"切换机房的过程中\",{\"1\":{\"1956\":1,\"4062\":1}}],[\"迁移线程和用户线程同时执行\",{\"0\":{\"1950\":1,\"4056\":1}}],[\"库可以放到不同的实例上\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"库里的\",{\"1\":{\"1193\":1,\"1361\":1,\"1529\":1,\"1697\":1,\"4604\":1}}],[\"排行版的实现\",{\"1\":{\"1942\":1,\"4048\":1}}],[\"排行榜的实现\",{\"0\":{\"1941\":1,\"4047\":1}}],[\"虾皮\",{\"0\":{\"1941\":1,\"1944\":1,\"1946\":1,\"1948\":1,\"1950\":1,\"1952\":1,\"1955\":1,\"1962\":1,\"1964\":1,\"4047\":1,\"4050\":1,\"4052\":1,\"4054\":1,\"4056\":1,\"4058\":1,\"4061\":1,\"4068\":1,\"4070\":1}}],[\"清空购物车成功\",{\"1\":{\"1938\":1,\"4044\":1}}],[\"清除数据\",{\"1\":{\"1013\":1,\"5189\":1}}],[\"订单创建成功\",{\"1\":{\"1935\":1,\"4041\":1}}],[\"订单系统\",{\"1\":{\"1932\":1,\"4038\":1}}],[\"订阅\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"订阅2个topic\",{\"1\":{\"1036\":1,\"5212\":1}}],[\"怎么估出每秒钟能处理多少请求呢\",{\"1\":{\"3306\":1}}],[\"怎么改变执行的机房\",{\"0\":{\"1964\":1,\"4070\":1}}],[\"怎么解决这个问题呢\",{\"1\":{\"2759\":1,\"5121\":1}}],[\"怎么解决\",{\"0\":{\"1950\":1,\"4056\":1}}],[\"怎么实现一个点赞功能\",{\"0\":{\"1929\":1,\"4035\":1}}],[\"怎么去做一个一个操作呢\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"怎么要有三级缓存呢\",{\"1\":{\"893\":1,\"3910\":1}}],[\"稳定自适应轻量级锁状态下\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"稳定的分布式数据一致性解决方案\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"甚至有些情况下会降低查询效率\",{\"1\":{\"2429\":1,\"4791\":1}}],[\"甚至有人建议\",{\"1\":{\"410\":1}}],[\"甚至高于lock\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"携程\",{\"0\":{\"1925\":1,\"4031\":1}}],[\"决定了\",{\"1\":{\"1916\":1,\"4505\":1}}],[\"决定了set中可以保存哪些元素\",{\"1\":{\"455\":1}}],[\"某个节点被设置为head之后\",{\"1\":{\"2911\":1,\"4165\":1}}],[\"某个时间点\",{\"1\":{\"2725\":1,\"5087\":1}}],[\"某个数据流发生丢包了\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"某个机房可能断电\",{\"0\":{\"1952\":1,\"4058\":1}}],[\"某些节点之间不连通了\",{\"1\":{\"1913\":1,\"4502\":1}}],[\"某一节点的网络出现异常会导致整个事务处于阻塞状态\",{\"1\":{\"1814\":1,\"4403\":1}}],[\"某一范围的键\",{\"1\":{\"797\":1}}],[\"某一值的邻近元素等\",{\"1\":{\"447\":1}}],[\"某一取值范围\",{\"1\":{\"447\":1}}],[\"仍然能够对外提供服务\",{\"1\":{\"1911\":1,\"4500\":1}}],[\"定时刷新\",{\"1\":{\"3205\":1,\"5474\":1}}],[\"定时任务这种\",{\"0\":{\"1964\":1,\"4070\":1}}],[\"定期删除+惰性\",{\"1\":{\"2757\":1,\"5119\":1}}],[\"定期删除对内存更加友好\",{\"1\":{\"2757\":1,\"5119\":1}}],[\"定期删除\",{\"1\":{\"2756\":1,\"5118\":1}}],[\"定格某一时刻的风景\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"定位到索引的节点\",{\"1\":{\"2395\":1,\"4757\":1}}],[\"定理\",{\"1\":{\"1908\":1,\"4497\":1}}],[\"定义一些策略\",{\"1\":{\"3056\":1,\"4310\":1}}],[\"定义这个的原因也是为了顺序性\",{\"1\":{\"1881\":1,\"4470\":1}}],[\"定义了java编译版本\",{\"1\":{\"948\":1,\"3965\":1}}],[\"定义中包括了如下几个表示传播行为的常量\",{\"1\":{\"858\":1,\"3875\":1}}],[\"定义⼀个静态变量指向⾃⼰类型\",{\"1\":{\"581\":1,\"3774\":1}}],[\"挂\",{\"0\":{\"3178\":1}}],[\"挂掉的\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"挂了那就麻烦了\",{\"1\":{\"1895\":1,\"4484\":1}}],[\"挂了一个也能工作\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"挂了一个我们还能正常工作\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"挂了两个我们就不能正常工作了\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"挂了\",{\"1\":{\"1880\":1,\"1888\":1,\"1894\":1,\"4469\":1,\"4477\":1,\"4483\":1}}],[\"却被自动提交了\",{\"1\":{\"3211\":1,\"5480\":1}}],[\"却在这个时候挂了\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"却为业务模块所共同调用的逻辑或责任\",{\"1\":{\"806\":1,\"3823\":1}}],[\"肯定比\",{\"1\":{\"1900\":1,\"4489\":1}}],[\"肯定会提交刚刚\",{\"1\":{\"1897\":1,\"4486\":1}}],[\"了另一个\",{\"1\":{\"2577\":1,\"4939\":1}}],[\"了\",{\"0\":{\"2208\":1},\"1\":{\"1900\":1,\"2093\":1,\"2758\":1,\"4489\":1,\"5120\":1}}],[\"了解问题的本质再分析问题\",{\"1\":{\"870\":1,\"3887\":1}}],[\"聪明的同学肯定会质疑\",{\"1\":{\"1900\":1,\"4489\":1}}],[\"忘了请看上面的消息广播模式\",{\"1\":{\"1897\":1,\"4486\":1}}],[\"跳过那些已经被丢弃的提案\",{\"1\":{\"1895\":1,\"4484\":1}}],[\"确保写磁盘操作结束才会返回\",{\"1\":{\"2748\":1,\"5110\":1}}],[\"确保已经被leader提交的提案最终能够被所有的follower提交是什么意思呢\",{\"1\":{\"1896\":1,\"4485\":1}}],[\"确保已经被leader提交的提案最终能够被所有的follower提交\",{\"1\":{\"1895\":1,\"4484\":1}}],[\"确认应答\",{\"1\":{\"2102\":1}}],[\"确认应答号\",{\"1\":{\"2100\":1}}],[\"确定送给哪个应用程序处理\",{\"1\":{\"2175\":1}}],[\"确定\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"确实是麻烦点\",{\"1\":{\"1075\":1,\"5251\":1}}],[\"收到顶级域名服务器的地址后\",{\"1\":{\"2300\":1,\"5382\":1}}],[\"收到来自本地\",{\"1\":{\"2299\":1,\"5381\":1}}],[\"收到的数据的序列号\",{\"1\":{\"2100\":1}}],[\"收到\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"收到了查询分组之后\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"收到了发现自己的投票已经超过半数就把自己设为\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"收到了\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"收到之后发现和自己的一样无需做更改\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"收到事件后通过\",{\"1\":{\"1227\":1,\"1242\":1,\"1260\":1,\"1395\":1,\"1410\":1,\"1428\":1,\"1563\":1,\"1578\":1,\"1596\":1,\"1731\":1,\"1746\":1,\"1764\":1,\"4638\":1,\"4653\":1,\"4671\":1}}],[\"投票已经超过半数\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"投票内容为服务器的\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"投票给自己\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"投票也是为了进行写请求\",{\"1\":{\"1872\":1,\"4461\":1}}],[\"宕机需要重新选举\",{\"1\":{\"1884\":1,\"4473\":1}}],[\"低32位表示事务id\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"保护敏感数据\",{\"1\":{\"3249\":1,\"5518\":1}}],[\"保存文章内容\",{\"1\":{\"3261\":1,\"5530\":1}}],[\"保存文章配置信息\",{\"1\":{\"3260\":1,\"5529\":1}}],[\"保存文章信息\",{\"1\":{\"3259\":1,\"5528\":1}}],[\"保存当前获得锁的线程\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"保存数据有两种比较简单的数据结构\",{\"1\":{\"715\":1}}],[\"保证系统数据的可靠性\",{\"1\":{\"3301\":1,\"5570\":1}}],[\"保证共享变量的可见性\",{\"1\":{\"2943\":1,\"4197\":1}}],[\"保证只有一个请求会落到数据库上\",{\"1\":{\"2798\":1,\"5160\":1}}],[\"保证了数据持久化\",{\"1\":{\"2742\":1,\"5104\":1}}],[\"保证了消息的发送顺序性\",{\"1\":{\"1879\":1,\"4468\":1}}],[\"保证数据传输的安全性\",{\"1\":{\"2147\":1}}],[\"保证每个机房都有全量的数据\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"问异步调用后\",{\"1\":{\"3150\":1,\"5430\":1}}],[\"问了jdbc的防止sql注入\",{\"1\":{\"3136\":1,\"5416\":1}}],[\"问了三大范式\",{\"1\":{\"3135\":1,\"5415\":1}}],[\"问了建立索引的原则\",{\"1\":{\"3134\":1,\"5414\":1}}],[\"问了\",{\"1\":{\"3133\":1,\"5413\":1}}],[\"问了mysql的存储引擎\",{\"1\":{\"3132\":1,\"5412\":1}}],[\"问c\",{\"1\":{\"3130\":1,\"5410\":1}}],[\"问什么是\",{\"1\":{\"3128\":1,\"3129\":1,\"5408\":1,\"5409\":1}}],[\"问string\",{\"1\":{\"3131\":1,\"5411\":1}}],[\"问swagger用过么\",{\"1\":{\"3127\":1,\"5407\":1}}],[\"问springboot\",{\"1\":{\"3126\":1,\"5406\":1}}],[\"问springboot的起步依赖starter有哪些以及作用\",{\"1\":{\"3125\":1,\"5405\":1}}],[\"问springboot的核心配置文件以及它们的区别\",{\"1\":{\"3124\":1,\"5404\":1}}],[\"问springboot异常怎么处理\",{\"1\":{\"3123\":1,\"5403\":1}}],[\"问es了解吗\",{\"1\":{\"3122\":1,\"5402\":1}}],[\"问kafka的分区\",{\"1\":{\"3121\":1,\"5401\":1}}],[\"问我同步和异步怎么实现的\",{\"1\":{\"3149\":1,\"5429\":1}}],[\"问我生成器用过没\",{\"1\":{\"3145\":1,\"5425\":1}}],[\"问我熟悉哪些框架\",{\"1\":{\"3120\":1,\"5400\":1}}],[\"问我想听听你对加班什么看法\",{\"1\":{\"3115\":1,\"5395\":1}}],[\"问你的期望薪资多少\",{\"1\":{\"3114\":1,\"5394\":1}}],[\"问你能接受加班吗\",{\"1\":{\"3113\":1,\"5393\":1}}],[\"问啥时候能来实习\",{\"1\":{\"3112\":1,\"5392\":1}}],[\"问\",{\"1\":{\"2297\":1,\"5379\":1}}],[\"问询到该\",{\"1\":{\"2253\":1,\"5335\":1}}],[\"问问\",{\"1\":{\"1878\":1,\"4467\":1}}],[\"问题描述\",{\"1\":{\"3285\":1,\"5554\":1}}],[\"问题思路\",{\"1\":{\"3265\":1,\"5534\":1}}],[\"问题二\",{\"1\":{\"3103\":1,\"4357\":1}}],[\"问题一\",{\"1\":{\"3097\":1,\"4351\":1}}],[\"问题不大\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"问题的利器\",{\"1\":{\"1144\":1,\"1312\":1,\"1480\":1,\"1648\":1,\"4555\":1}}],[\"问题\",{\"0\":{\"2885\":1,\"4139\":1},\"1\":{\"884\":1,\"1157\":1,\"1325\":1,\"1493\":1,\"1661\":1,\"2277\":1,\"2902\":1,\"3901\":1,\"4156\":1,\"4568\":1,\"5359\":1}}],[\"问题体现\",{\"1\":{\"876\":1,\"3893\":1}}],[\"问题出在哪里\",{\"0\":{\"350\":1}}],[\"让线程进入阻塞状态\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"让用户决定如何去做\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"让其他线程可见\",{\"1\":{\"2949\":1,\"4203\":1}}],[\"让同一个用户的相关请求\",{\"1\":{\"1958\":1,\"4064\":1}}],[\"让\",{\"1\":{\"1878\":1,\"4467\":1}}],[\"让我们可以在运行时获取类的信息\",{\"1\":{\"296\":1,\"3684\":1}}],[\"广播问询\",{\"1\":{\"2258\":1,\"5340\":1}}],[\"广播通信\",{\"1\":{\"2165\":1}}],[\"广播\",{\"1\":{\"1878\":1,\"4467\":1}}],[\"唯一索引的属性列不能出现重复的数据\",{\"1\":{\"2386\":1,\"4748\":1}}],[\"唯一索引也是一种约束\",{\"1\":{\"2386\":1,\"4748\":1}}],[\"唯一索引\",{\"1\":{\"2373\":1,\"2384\":1,\"2386\":1,\"4735\":1,\"4746\":1,\"4748\":1}}],[\"唯一的写请求处理者\",{\"1\":{\"1872\":1,\"4461\":1}}],[\"唯独是\",{\"1\":{\"894\":1,\"3911\":1}}],[\"领导者\",{\"1\":{\"1871\":1,\"4460\":1}}],[\"架构呢\",{\"1\":{\"1919\":1,\"4508\":1}}],[\"架构也支持\",{\"1\":{\"1918\":1,\"4507\":1}}],[\"架构\",{\"0\":{\"1868\":1,\"4457\":1},\"1\":{\"1918\":5,\"4507\":5}}],[\"架构中的主体部分\",{\"1\":{\"1783\":1,\"4372\":1}}],[\"找到了\",{\"1\":{\"2349\":1,\"4711\":1}}],[\"找到\",{\"1\":{\"1867\":1,\"2615\":1,\"4456\":1,\"4977\":1}}],[\"找到处理器映射\",{\"1\":{\"814\":1,\"3831\":1}}],[\"崩溃退出与重启等异常情况时\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"崩溃恢复模式\",{\"0\":{\"1882\":1,\"4471\":1}}],[\"崩溃恢复\",{\"1\":{\"1866\":1,\"1869\":1,\"1875\":1,\"1892\":1,\"1898\":1,\"1903\":1,\"4455\":1,\"4458\":1,\"4464\":1,\"4481\":1,\"4487\":1,\"4492\":1}}],[\"崩溃恢复和消息广播\",{\"0\":{\"1864\":1,\"4453\":1}}],[\"协议运行在\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"协议实现的\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"协议实现可靠传输\",{\"1\":{\"2145\":1}}],[\"协议就是解决这一问题的\",{\"1\":{\"2238\":1,\"5320\":1}}],[\"协议就会退出恢复模式\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"协议就会进入恢复模式并选举产生新的\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"协议工作时有一个大前提\",{\"1\":{\"2231\":1,\"5313\":1}}],[\"协议解决了\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"协议号\",{\"1\":{\"2175\":1}}],[\"协议发展的\",{\"1\":{\"2170\":1}}],[\"协议传输时\",{\"1\":{\"2114\":1}}],[\"协议可以一个主机同时向多个主机发送消息\",{\"1\":{\"2112\":1}}],[\"协议来实现可靠的传输\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"协议来实现分布式数据一致性\",{\"1\":{\"1863\":1,\"4452\":1}}],[\"协议来获取主机\",{\"1\":{\"2239\":1,\"5321\":1}}],[\"协议来负责\",{\"1\":{\"2107\":1}}],[\"协议\",{\"0\":{\"2106\":1},\"1\":{\"2057\":1,\"2145\":1,\"2230\":1,\"2253\":1,\"2258\":1,\"2282\":1,\"5312\":1,\"5335\":1,\"5340\":1,\"5364\":1}}],[\"协议是一个广播问询\",{\"1\":{\"2247\":1,\"5329\":1}}],[\"协议是基于\",{\"1\":{\"2170\":1}}],[\"协议是如何处理写请求的\",{\"1\":{\"1877\":1,\"4466\":1}}],[\"协议是为分布式协调服务\",{\"1\":{\"1863\":1,\"4452\":1}}],[\"协议中对\",{\"1\":{\"1875\":1,\"4464\":1}}],[\"协议之前\",{\"1\":{\"1871\":1,\"4460\":1}}],[\"协议包括两种基本的模式\",{\"1\":{\"1865\":1,\"4454\":1}}],[\"协议两种基本的模式\",{\"0\":{\"1864\":1,\"4453\":1}}],[\"协议介绍\",{\"0\":{\"1862\":1,\"4451\":1}}],[\"协议的网站在搜索结果中可能会被优先显示\",{\"1\":{\"2283\":1,\"5365\":1}}],[\"协议的网站\",{\"1\":{\"2283\":1,\"5365\":1}}],[\"协议的特性\",{\"1\":{\"2276\":1,\"2277\":1,\"5358\":1,\"5359\":1}}],[\"协议的服务器启动后加入到集群中时\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"协议的\",{\"1\":{\"1860\":1,\"4449\":1,\"5275\":1}}],[\"协调各个微服务\",{\"1\":{\"1819\":1,\"4408\":1}}],[\"协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者\",{\"1\":{\"1028\":1,\"5204\":1}}],[\"选项\",{\"1\":{\"2150\":2,\"2168\":1}}],[\"选\",{\"0\":{\"1914\":1,\"4503\":1},\"1\":{\"1916\":1,\"4505\":1}}],[\"选举方式之后我们再来了解一下\",{\"1\":{\"1892\":1,\"4481\":1}}],[\"选举可以分为两个不同的阶段\",{\"1\":{\"1884\":1,\"4473\":1}}],[\"选举算法\",{\"1\":{\"1883\":1,\"4472\":1}}],[\"选举\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"选择合适的字段创建索引\",{\"1\":{\"2419\":1,\"4781\":1}}],[\"选择一个适合的\",{\"1\":{\"826\":1,\"3843\":1}}],[\"选择一个合适的handleradapter\",{\"1\":{\"819\":1,\"3836\":1}}],[\"选择\",{\"0\":{\"1925\":1,\"4031\":1},\"1\":{\"411\":1,\"1920\":1,\"4509\":1}}],[\"集群\",{\"1\":{\"2808\":1,\"5170\":1}}],[\"集群中\",{\"1\":{\"1872\":1,\"4461\":1}}],[\"集群管理\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"集合\",{\"0\":{\"2696\":1,\"5058\":1},\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"2674\":1,\"4552\":1,\"5036\":1}}],[\"集合给内核\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"集合运算等功能\",{\"1\":{\"444\":1}}],[\"过度切换\",{\"1\":{\"3087\":1,\"4341\":1}}],[\"过期的数据的删除策略了解么\",{\"0\":{\"2752\":1,\"5114\":1}}],[\"过滤掉不符合条件的记录\",{\"1\":{\"2417\":1,\"4779\":1}}],[\"过滤器是对单个服务而言\",{\"1\":{\"1831\":1,\"4420\":1}}],[\"过滤器\",{\"1\":{\"577\":1,\"3770\":1}}],[\"过多有什么危害\",{\"0\":{\"2198\":1},\"1\":{\"2083\":1}}],[\"过程\",{\"1\":{\"1851\":1,\"4440\":1}}],[\"核心线程数默认是不会被回收的\",{\"1\":{\"3104\":1,\"4358\":1}}],[\"核心线程数会被回收吗\",{\"1\":{\"3103\":1,\"4357\":1}}],[\"核心线程外的线程不会立即销毁\",{\"1\":{\"3049\":1,\"4303\":1}}],[\"核心数多出来的一个线程是为了防止线程偶发的缺页中断\",{\"1\":{\"3076\":1,\"4330\":1}}],[\"核心数\",{\"1\":{\"3076\":1,\"4330\":1}}],[\"核心思想是\",{\"1\":{\"2915\":1,\"4169\":1}}],[\"核心\",{\"1\":{\"1961\":1,\"4067\":1}}],[\"核心就是通过一系列的封装和处理\",{\"1\":{\"1848\":1,\"4437\":1}}],[\"核心配置文件\",{\"0\":{\"921\":1,\"3938\":1}}],[\"成为正式标准\",{\"1\":{\"5275\":1}}],[\"成功则返回\",{\"1\":{\"2929\":1,\"2930\":1,\"2932\":1,\"4183\":1,\"4184\":1,\"4186\":1}}],[\"成功请求数等运行指标记录下来\",{\"1\":{\"1844\":1,\"4433\":1}}],[\"成多个的\",{\"1\":{\"2114\":1}}],[\"成年人的崩溃如此简单\",{\"1\":{\"292\":1,\"3680\":1}}],[\"防止密码被窃听\",{\"1\":{\"3337\":1}}],[\"防止线程长时间占用\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"防止局部指令重排序\",{\"1\":{\"2944\":1,\"4198\":1}}],[\"防止其他线程对这个表结构做了变更\",{\"1\":{\"2488\":1,\"4850\":1}}],[\"防止雪崩\",{\"1\":{\"1963\":1,\"4069\":1}}],[\"防止不同hashcode的高位不同但低位相同导致的hash冲突\",{\"1\":{\"749\":1}}],[\"防雪崩利器\",{\"1\":{\"1839\":1,\"4428\":1}}],[\"正如其名\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"正数表示成功\",{\"1\":{\"2931\":1,\"4185\":1}}],[\"正在等待的线程可以选择放弃等待\",{\"1\":{\"2824\":1,\"4078\":1}}],[\"正在内存中\",{\"1\":{\"2626\":1,\"4988\":1}}],[\"正确使用索引的一些建议\",{\"0\":{\"2418\":1,\"4780\":1}}],[\"正确的程序在运行中\",{\"1\":{\"250\":1,\"3646\":1}}],[\"正常调用时\",{\"1\":{\"1836\":1,\"4425\":1}}],[\"半开状态\",{\"1\":{\"1836\":1,\"4425\":1}}],[\"达到压缩的目的\",{\"1\":{\"2743\":1,\"5105\":1}}],[\"达到一定的次数无法调用\",{\"1\":{\"1835\":1,\"4424\":1}}],[\"达到7的概率为0\",{\"1\":{\"641\":1,\"3733\":1}}],[\"打开状态\",{\"1\":{\"1835\":1,\"4424\":1}}],[\"打包groovy文件到jar\",{\"1\":{\"959\":1,\"3976\":1}}],[\"雪崩效应\",{\"1\":{\"1833\":1,\"4422\":1}}],[\"发布文章集成添加延迟队列接口\",{\"1\":{\"3274\":1,\"5543\":1}}],[\"发布文章功能\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"发起请求问\",{\"1\":{\"2300\":1,\"5382\":1}}],[\"发过来的链路层帧\",{\"1\":{\"2255\":1,\"5337\":1}}],[\"发车\",{\"1\":{\"2053\":1}}],[\"发生了回滚\",{\"1\":{\"2580\":1,\"4942\":1}}],[\"发生冲突\",{\"1\":{\"2509\":1,\"4871\":1}}],[\"发生冲突了\",{\"1\":{\"1919\":2,\"4508\":2}}],[\"发生隐式转换\",{\"1\":{\"2444\":1,\"4806\":1}}],[\"发生在三次握手的哪一步\",{\"0\":{\"2207\":1},\"1\":{\"2092\":1}}],[\"发生连锁效应\",{\"1\":{\"1833\":1,\"4422\":1}}],[\"发送方和接收方必须商定好秘钥\",{\"1\":{\"3398\":1}}],[\"发送给目标接口\",{\"1\":{\"2254\":1,\"5336\":1}}],[\"发送给主机\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"发送一个广播问询分组\",{\"1\":{\"2250\":1,\"5332\":1}}],[\"发送一条半事务消息到mq服务器\",{\"1\":{\"1932\":1,\"4038\":1}}],[\"发送主机\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"发送和接受的\",{\"1\":{\"2245\":1,\"5327\":1}}],[\"发送和接收的\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"发送到下一跳上\",{\"1\":{\"2239\":1,\"5321\":1}}],[\"发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收\",{\"1\":{\"2100\":1}}],[\"发送rollback\",{\"1\":{\"1936\":1,\"4042\":1}}],[\"发送的\",{\"1\":{\"1897\":1,\"2242\":2,\"2245\":1,\"4486\":1,\"5324\":2,\"5327\":1}}],[\"发送\",{\"1\":{\"1897\":1,\"2218\":1,\"2237\":1,\"2311\":1,\"4486\":1,\"5300\":1,\"5319\":1}}],[\"发现预期值\",{\"1\":{\"2874\":1,\"4128\":1}}],[\"发现a不等于v的实际值\",{\"1\":{\"2870\":1,\"4124\":1}}],[\"发现被占用的锁是重量级锁\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"发现和前一次读到的记录数量不一样了\",{\"1\":{\"2590\":1,\"4952\":1}}],[\"发现共有\",{\"1\":{\"2588\":1,\"4950\":1}}],[\"发现后置是\",{\"1\":{\"2299\":1,\"5381\":1}}],[\"发现缓存没有\",{\"0\":{\"1962\":1,\"4068\":1}}],[\"发现\",{\"1\":{\"1886\":1,\"2240\":1,\"4475\":1,\"5322\":1}}],[\"发出的投票为\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"发挥了两者的优势\",{\"1\":{\"715\":1}}],[\"网络层\",{\"1\":{\"2238\":1,\"5320\":1}}],[\"网络分区\",{\"1\":{\"1913\":1,\"4502\":1}}],[\"网关过滤器解析token\",{\"1\":{\"3227\":1,\"3238\":1,\"5496\":1,\"5507\":1}}],[\"网关过滤器接收用户携带的token\",{\"1\":{\"3226\":1,\"3237\":1,\"5495\":1,\"5506\":1}}],[\"网关过滤器进行判断\",{\"1\":{\"3224\":1,\"3235\":1,\"5493\":1,\"5504\":1}}],[\"网关搭建\",{\"0\":{\"3233\":1,\"5502\":1},\"1\":{\"3192\":1,\"5461\":1}}],[\"网关是对所有服务的请求进行分析过滤\",{\"1\":{\"1831\":1,\"4420\":1}}],[\"网关与过滤器有什么区别\",{\"1\":{\"1830\":1,\"4419\":1}}],[\"网上文章不少说\",{\"1\":{\"1145\":1,\"1313\":1,\"1481\":1,\"1649\":1,\"4556\":1}}],[\"配合config仓库修改的一种stream实现\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"配置文件\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"配置文件中默认有此下配置\",{\"1\":{\"2726\":1,\"5088\":1}}],[\"配置管理\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"配置中心\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"配置监听器的方法\",{\"1\":{\"933\":1,\"3950\":1}}],[\"配置的所有相关的对象\",{\"1\":{\"818\":1,\"3835\":1}}],[\"配置项的相关说明详见\",{\"1\":{\"152\":1,\"156\":1,\"3551\":1}}],[\"配置\",{\"0\":{\"32\":1,\"3431\":1},\"1\":{\"2691\":2,\"2706\":2,\"5053\":2,\"5068\":2}}],[\"声明式服务调用本质上就是ribbon+hystrix\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"特点进行延迟\",{\"1\":{\"3263\":1,\"5532\":1}}],[\"特别是长事务而言\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"特别是对于返回结果集比较大的子查询\",{\"1\":{\"2665\":1,\"5027\":1}}],[\"特性有订阅发布\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"特性有服务降级\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"特性有区域亲和\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"特性有失效剔除\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"特有\",{\"1\":{\"808\":1,\"3825\":1}}],[\"治理成本高\",{\"1\":{\"1825\":1,\"4414\":1}}],[\"产生大量的慢查询\",{\"1\":{\"2665\":1,\"5027\":1}}],[\"产生影响\",{\"1\":{\"2283\":1,\"5365\":1}}],[\"产生消息\",{\"1\":{\"1932\":1,\"4038\":1}}],[\"产品迭代周期更短\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"产出于spring大家族\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"减少数据库的压力\",{\"1\":{\"2798\":1,\"5160\":1}}],[\"减少回表次数\",{\"1\":{\"2417\":1,\"4779\":1}}],[\"减少了网络开销\",{\"1\":{\"2272\":1,\"5354\":1}}],[\"减少了网络延迟和提高了性能\",{\"1\":{\"2270\":1,\"5352\":1}}],[\"减少了传输的数据量和带宽消耗\",{\"1\":{\"2271\":1,\"5353\":1}}],[\"减少了新人的学习成本\",{\"1\":{\"1806\":1,\"4395\":1}}],[\"减少了\",{\"1\":{\"1189\":1,\"1357\":1,\"1525\":1,\"1693\":1,\"4600\":1}}],[\"减少了内核和用户空间大量的数据拷贝和内存分配\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"减轻团队的成本\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"耦合度比较低\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"遇到问题很容易找到解决方案\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"教程很丰富\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"社区活跃度很高\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"高\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"高性能\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"高可用主要体现在系统7x24不间断服务\",{\"1\":{\"1811\":1,\"4400\":1}}],[\"高很多\",{\"1\":{\"730\":1}}],[\"部署在不同的服务器上\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"部署在同一个服务器\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"微服务\",{\"0\":{\"5594\":1}}],[\"微服务之前架设的网关服务\",{\"1\":{\"3194\":1,\"5463\":1}}],[\"微服务过多\",{\"1\":{\"1825\":1,\"4414\":1}}],[\"微服务可以是跨平台的\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"微服务网关等\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"微服务在cap理论中采用的ap架构\",{\"1\":{\"1811\":1,\"4400\":1}}],[\"微服务是按照业务进行拆分的\",{\"1\":{\"1809\":1,\"4398\":1}}],[\"微服务是一个分布式系统\",{\"1\":{\"1804\":1,\"4393\":1}}],[\"微服务系统的微服务单元具有很强的横向拓展能力\",{\"1\":{\"1807\":1,\"4396\":1}}],[\"微服务的框架那么多比如\",{\"1\":{\"1821\":1,\"4410\":1}}],[\"微服务的复杂度\",{\"1\":{\"1813\":1,\"4402\":1}}],[\"微服务的不足\",{\"1\":{\"1812\":1,\"4401\":1}}],[\"微服务的修改和部署对其他服务没有影响\",{\"1\":{\"1810\":1,\"4399\":1}}],[\"微服务的每个服务单元是独立部署的\",{\"1\":{\"1810\":1,\"4399\":1}}],[\"微服务的优势\",{\"1\":{\"1805\":1,\"4394\":1}}],[\"微服务的特点\",{\"1\":{\"1797\":1,\"4386\":1}}],[\"微服务的概念\",{\"0\":{\"1794\":1,\"4383\":1}}],[\"微服务就是将工程根据不同的业务规则拆分成微服务\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"易部署和易维护的分布式系统开发工具包\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"经理技术面+hr面\",{\"0\":{\"3178\":1}}],[\"经常应用到md5\",{\"1\":{\"3387\":1}}],[\"经常一起使用的列放到一个表中\",{\"0\":{\"2640\":1,\"5002\":1}}],[\"经常用于连接的字段可能是一些外键列\",{\"1\":{\"2424\":1,\"4786\":1}}],[\"经常查询的不变的数据\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"经得起实际考验的服务框架组合起来\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"经过扰动计算之后\",{\"1\":{\"755\":1}}],[\"经过简单的获取hashcode后\",{\"1\":{\"750\":1}}],[\"断路器关闭\",{\"1\":{\"1836\":1,\"4425\":1}}],[\"断路器会将部分请求发给该服务\",{\"1\":{\"1836\":1,\"4425\":1}}],[\"断路器完全打开\",{\"1\":{\"1835\":1,\"4424\":1}}],[\"断路器有三种状态\",{\"1\":{\"1834\":1,\"4423\":1}}],[\"断路器等\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"断路器\",{\"1\":{\"1793\":1,\"1823\":1,\"4382\":1,\"4412\":1}}],[\"负数表示失败\",{\"1\":{\"2931\":1,\"4185\":1}}],[\"负载均衡层\",{\"1\":{\"1953\":1,\"4059\":1}}],[\"负载均衡\",{\"1\":{\"1793\":1,\"1857\":1,\"4382\":1,\"4446\":1}}],[\"负责监听和分发事件\",{\"1\":{\"1197\":1,\"1365\":1,\"1533\":1,\"1701\":1,\"4608\":1}}],[\"负责加载当前应用\",{\"1\":{\"210\":1,\"3604\":1}}],[\"智能路由\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"镜像和容器的相关操作\",{\"0\":{\"1789\":1,\"4378\":1}}],[\"属于密钥持有者\",{\"1\":{\"3392\":1}}],[\"属于行级别锁\",{\"1\":{\"2560\":1,\"4922\":1}}],[\"属于操作系统层面的虚拟化技术\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"属性\",{\"1\":{\"2710\":1,\"5072\":1}}],[\"属性记录了字符串长度\",{\"1\":{\"2682\":1,\"5044\":1}}],[\"属性的值而不是空字符来判断字符串是否结束\",{\"1\":{\"2681\":1,\"5043\":1}}],[\"属性实现的\",{\"1\":{\"2515\":1,\"4877\":1}}],[\"属性时\",{\"1\":{\"890\":1,\"3907\":1}}],[\"演进\",{\"1\":{\"1267\":1,\"1435\":1,\"1603\":1,\"1771\":1,\"4678\":1}}],[\"演示\",{\"1\":{\"31\":1,\"3430\":1}}],[\"父进程的双向通信\",{\"1\":{\"1252\":1,\"1420\":1,\"1588\":1,\"1756\":1,\"4663\":1}}],[\"父类大多是一个很抽象的概念\",{\"1\":{\"364\":1}}],[\"聊完单\",{\"1\":{\"1251\":1,\"1419\":1,\"1587\":1,\"1755\":1,\"4662\":1}}],[\"闻其名不如看其图\",{\"1\":{\"1239\":1,\"1257\":1,\"1407\":1,\"1425\":1,\"1575\":1,\"1593\":1,\"1743\":1,\"1761\":1,\"4650\":1,\"4668\":1}}],[\"性能不好\",{\"1\":{\"5279\":1}}],[\"性能测试\",{\"0\":{\"3304\":1}}],[\"性能调优实战\",{\"1\":{\"3053\":1,\"4307\":1}}],[\"性能下降明显\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"性能极高\",{\"1\":{\"2841\":1,\"4095\":1}}],[\"性能新版本\",{\"1\":{\"2823\":1,\"4077\":1}}],[\"性能\",{\"1\":{\"2725\":1,\"5087\":1}}],[\"性能非常高\",{\"1\":{\"2672\":1,\"5034\":1}}],[\"性能也越好\",{\"1\":{\"2646\":1,\"5008\":1}}],[\"性能效率就越低\",{\"1\":{\"2592\":1,\"4954\":1}}],[\"性能更牛皮了\",{\"1\":{\"2327\":1,\"4689\":1}}],[\"性能是不错的\",{\"1\":{\"1858\":1,\"4447\":1}}],[\"性能瓶颈不在\",{\"1\":{\"1236\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"4647\":1}}],[\"性能与数组长度成正比\",{\"1\":{\"471\":1}}],[\"业务只能读数据\",{\"1\":{\"2460\":1,\"4822\":1}}],[\"业务实现双活\",{\"1\":{\"1961\":1,\"4067\":1}}],[\"业务先实现双活\",{\"1\":{\"1961\":1,\"4067\":1}}],[\"业务处理主要是在内存中完成\",{\"1\":{\"1236\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"4647\":1}}],[\"业务处理\",{\"1\":{\"1225\":1,\"1230\":1,\"1263\":1,\"1393\":1,\"1398\":1,\"1431\":1,\"1561\":1,\"1566\":1,\"1599\":1,\"1729\":1,\"1734\":1,\"1767\":1,\"4636\":1,\"4641\":1,\"4674\":1}}],[\"业务逻辑\",{\"1\":{\"1198\":1,\"1366\":1,\"1534\":1,\"1702\":1,\"4609\":1}}],[\"虚拟的双向队列即不存在队列实例\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"虚拟机\",{\"1\":{\"3004\":1,\"4258\":1}}],[\"虚拟机栈\",{\"1\":{\"2939\":1,\"4193\":1}}],[\"虚拟机如果检测不到某段代码被共享和竞争的可能性\",{\"1\":{\"2854\":1,\"4108\":1}}],[\"虚拟机中有很多线程\",{\"1\":{\"1218\":1,\"1386\":1,\"1554\":1,\"1722\":1,\"4629\":1}}],[\"虚拟机这个进程上面的\",{\"1\":{\"1218\":1,\"1386\":1,\"1554\":1,\"1722\":1,\"4629\":1}}],[\"虚拟内存管理\",{\"0\":{\"1088\":1,\"1132\":1,\"1300\":1,\"1468\":1,\"1636\":1,\"4543\":1}}],[\"剩下的\",{\"1\":{\"1208\":1,\"1376\":1,\"1544\":1,\"1712\":1,\"4619\":1}}],[\"理解为threadlocal\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"理解成一个数据快照\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"理解了linkedlist和arraylist的特点\",{\"1\":{\"481\":1}}],[\"理论上\",{\"1\":{\"2243\":1,\"5325\":1}}],[\"理论上就可以有\",{\"1\":{\"1202\":1,\"1370\":1,\"1538\":1,\"1706\":1,\"4613\":1}}],[\"理论中分区容错性\",{\"1\":{\"1917\":1,\"4506\":1}}],[\"理论诞生\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"灵活在于\",{\"1\":{\"1199\":1,\"1367\":1,\"1535\":1,\"1703\":1,\"4610\":1}}],[\"灵活性\",{\"1\":{\"598\":1,\"3791\":1}}],[\"版本后才引入\",{\"1\":{\"2880\":1,\"4134\":1}}],[\"版本后增加以下两种\",{\"1\":{\"2769\":1,\"5131\":1}}],[\"版本开始引入\",{\"1\":{\"2901\":1,\"4155\":1}}],[\"版本开始\",{\"1\":{\"2521\":1,\"4883\":1}}],[\"版本开始起\",{\"1\":{\"1183\":1,\"1351\":1,\"1519\":1,\"1687\":1,\"4594\":1}}],[\"版本中提供的一项索引优化功能\",{\"1\":{\"2417\":1,\"4779\":1}}],[\"版本之前\",{\"1\":{\"2657\":1,\"5019\":1}}],[\"版本之前采用的正是\",{\"1\":{\"1236\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"4647\":1}}],[\"版本之后\",{\"1\":{\"2323\":1,\"2693\":1,\"4685\":1,\"5055\":1}}],[\"版本的升级\",{\"1\":{\"626\":1,\"3819\":1}}],[\"技术栈的具体应用\",{\"1\":{\"3193\":1,\"5462\":1}}],[\"技术栈是什么\",{\"1\":{\"3153\":1,\"5433\":1}}],[\"技术的情况下\",{\"1\":{\"1183\":1,\"1351\":1,\"1519\":1,\"1687\":1,\"4594\":1}}],[\"技术\",{\"1\":{\"1182\":1,\"1188\":1,\"1192\":1,\"1350\":1,\"1356\":1,\"1360\":1,\"1518\":1,\"1524\":1,\"1528\":1,\"1686\":1,\"1692\":1,\"1696\":1,\"4593\":1,\"4599\":1,\"4603\":1}}],[\"次方\",{\"1\":{\"2132\":3}}],[\"次都是由\",{\"1\":{\"1189\":1,\"1357\":1,\"1525\":1,\"1693\":1,\"4600\":1}}],[\"次的数据拷贝过程\",{\"1\":{\"1189\":1,\"1357\":1,\"1525\":1,\"1693\":1,\"4600\":1}}],[\"次数据拷贝\",{\"1\":{\"1180\":1,\"1186\":1,\"1348\":1,\"1354\":1,\"1516\":1,\"1522\":1,\"1684\":1,\"1690\":1,\"4591\":1,\"4597\":1}}],[\"次\",{\"1\":{\"1174\":1,\"1342\":1,\"1510\":1,\"1678\":1,\"4585\":1}}],[\"次上下文切换和数据拷贝次数\",{\"1\":{\"1189\":2,\"1357\":2,\"1525\":2,\"1693\":2,\"4600\":2}}],[\"次上下文切换的开销\",{\"1\":{\"1179\":1,\"1347\":1,\"1515\":1,\"1683\":1,\"4590\":1}}],[\"次上下文切换\",{\"1\":{\"1174\":1,\"1180\":1,\"1342\":1,\"1348\":1,\"1510\":1,\"1516\":1,\"1678\":1,\"1684\":1,\"4585\":1,\"4591\":1}}],[\"搬运的\",{\"1\":{\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"4583\":1}}],[\"拷贝到网卡的缓冲区里\",{\"1\":{\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"4583\":1}}],[\"缓存击穿导致的原因主要是某个热点数据不存在与缓存中\",{\"1\":{\"2815\":1,\"5177\":1}}],[\"缓存击穿中\",{\"1\":{\"2794\":1,\"2801\":1,\"5156\":1,\"5163\":1}}],[\"缓存永不失效\",{\"1\":{\"2812\":1,\"5174\":1}}],[\"缓存服务宕机也会导致缓存雪崩现象\",{\"1\":{\"2805\":1,\"5167\":1}}],[\"缓存在同一时间大面积的失效\",{\"1\":{\"2804\":1,\"5166\":1}}],[\"缓存穿透中\",{\"1\":{\"2800\":1,\"5162\":1}}],[\"缓存穿透和缓存击穿有什么区别\",{\"0\":{\"2799\":1,\"5161\":1}}],[\"缓存穿透说简单点就是大量请求的\",{\"1\":{\"2776\":1,\"5138\":1}}],[\"缓存无效\",{\"1\":{\"2779\":1,\"5141\":1}}],[\"缓存雪崩和缓存击穿比较像\",{\"1\":{\"2815\":1,\"5177\":1}}],[\"缓存雪崩和缓存击穿有什么区别\",{\"0\":{\"2814\":1,\"5176\":1}}],[\"缓存雪崩描述的就是这样一个简单的场景\",{\"1\":{\"2804\":1,\"5166\":1}}],[\"缓存雪崩\",{\"0\":{\"2774\":1,\"5136\":1}}],[\"缓存机制\",{\"1\":{\"2267\":1,\"5349\":1}}],[\"缓存一致性解决\",{\"0\":{\"1923\":1,\"4029\":1}}],[\"缓存中获取数据将不再从数据库查询\",{\"1\":{\"984\":1,\"4001\":1}}],[\"缓冲区根据对应的持久化方式\",{\"1\":{\"2742\":1,\"5104\":1}}],[\"缓冲区的状态\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"缓冲区的数据写入到\",{\"1\":{\"2741\":1,\"5103\":1}}],[\"缓冲区的过程\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"缓冲区\",{\"1\":{\"1185\":1,\"1353\":1,\"1521\":1,\"1689\":1,\"2735\":1,\"4596\":1,\"5097\":1}}],[\"缓冲区描述符和数据长度传到\",{\"1\":{\"1185\":1,\"1353\":1,\"1521\":1,\"1689\":1,\"4596\":1}}],[\"缓冲区里\",{\"1\":{\"1174\":1,\"1180\":1,\"1342\":1,\"1348\":1,\"1510\":1,\"1516\":1,\"1678\":1,\"1684\":1,\"4585\":1,\"4591\":1}}],[\"缓冲区里的数据\",{\"1\":{\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"4583\":1}}],[\"缓冲区中\",{\"1\":{\"1171\":1,\"1185\":1,\"1339\":1,\"1353\":1,\"1507\":1,\"1521\":1,\"1675\":1,\"1689\":1,\"2740\":1,\"4582\":1,\"4596\":1,\"5102\":1}}],[\"映射记录\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"映射\",{\"1\":{\"1167\":1,\"1335\":1,\"1503\":1,\"1671\":1,\"4578\":1}}],[\"种数据淘汰策略\",{\"1\":{\"2762\":1,\"5124\":1}}],[\"种持久化方式\",{\"1\":{\"2720\":1,\"5082\":1}}],[\"种特殊数据类型\",{\"1\":{\"2675\":1,\"5037\":1}}],[\"种基础数据类型\",{\"1\":{\"2674\":1,\"5036\":1}}],[\"种隔离级别\",{\"1\":{\"2605\":1,\"4967\":1}}],[\"种隔离级别的支持不一样\",{\"1\":{\"2605\":1,\"4967\":1}}],[\"种方案选择\",{\"1\":{\"1202\":1,\"1370\":1,\"1538\":1,\"1706\":1,\"4613\":1}}],[\"种\",{\"1\":{\"1160\":1,\"1328\":1,\"1496\":1,\"1664\":1,\"2266\":1,\"4571\":1,\"5348\":1}}],[\"万余额的账号个数就变为\",{\"1\":{\"2589\":1,\"4951\":1}}],[\"万的账号\",{\"1\":{\"2589\":1,\"4951\":1}}],[\"万的记录\",{\"1\":{\"2588\":1,\"2590\":1,\"4950\":1,\"4952\":1}}],[\"万个请求的问题\",{\"1\":{\"1157\":1,\"1325\":1,\"1493\":1,\"1661\":1,\"4568\":1}}],[\"万请求\",{\"1\":{\"1157\":1,\"1325\":1,\"1493\":1,\"1661\":1,\"4568\":1}}],[\"边缘触发的效率比水平触发的效率要高\",{\"1\":{\"1155\":1,\"1323\":1,\"1491\":1,\"1659\":1,\"4566\":1}}],[\"边缘触发模式一般和非阻塞\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"错误类型为\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"搭配使用\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"描述符上有可读事件发生时\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4560\":1}}],[\"水平触发的意思是只要满足事件的条件\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4563\":1}}],[\"水平触发\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"4558\":1}}],[\"增删改一般时间复杂度是\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"增加了轮询\",{\"1\":{\"2828\":1,\"4082\":1}}],[\"增加的方式是\",{\"1\":{\"650\":1}}],[\"增加\",{\"1\":{\"417\":1,\"656\":1,\"933\":1,\"3742\":1,\"3950\":1}}],[\"传递了变量值\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"传入一个\",{\"1\":{\"2832\":1,\"4086\":1}}],[\"传入的邮箱格式不对的时候直接返回错误消息给客户端等等\",{\"1\":{\"2778\":1,\"5140\":1}}],[\"传入参数\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"传输过程中即便请求被截获\",{\"1\":{\"3345\":1}}],[\"传输过程中一旦请求被截获\",{\"1\":{\"3339\":1}}],[\"传输协议\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"传输协议实现一个可靠的传输协议\",{\"1\":{\"2145\":1}}],[\"传输方式\",{\"1\":{\"2152\":1}}],[\"传输数据前先要建立连接\",{\"1\":{\"2138\":1}}],[\"传输层有两个传输协议分别是\",{\"1\":{\"2174\":1}}],[\"传输层的端口号的作用\",{\"1\":{\"2173\":1}}],[\"传输层\",{\"1\":{\"2107\":1}}],[\"传给内核\",{\"1\":{\"1137\":1,\"1305\":1,\"1473\":1,\"1641\":1,\"4548\":1}}],[\"传播行为\",{\"1\":{\"847\":1,\"3864\":1}}],[\"把\",{\"1\":{\"3278\":1,\"3282\":1,\"5547\":1,\"5551\":1}}],[\"把之前的异步调用修改为调用延迟任务\",{\"1\":{\"3275\":1,\"5544\":1}}],[\"把自媒体文章上下架放进消息队列\",{\"1\":{\"3198\":1,\"5467\":1}}],[\"把自己的应用放入容器\",{\"1\":{\"1778\":1,\"4367\":1}}],[\"把所有可能存在的请求的值都存放在布隆过滤器中\",{\"1\":{\"2783\":1,\"5145\":1}}],[\"把内核缓冲区里的数据拷贝到\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"把内核缓冲区的数据拷贝到\",{\"1\":{\"1174\":1,\"1342\":1,\"1510\":1,\"1678\":1,\"4585\":1}}],[\"把内核的\",{\"1\":{\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"4583\":1}}],[\"把需要监控的\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"把时间拉长来看\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"把你绕蒙你这篇文章就白看了\",{\"1\":{\"289\":1,\"3677\":1}}],[\"秒内就可以处理上千个请求\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"毫秒以内\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"既不存在于缓存中\",{\"1\":{\"2800\":1,\"5162\":1}}],[\"既能提升并发性\",{\"1\":{\"2531\":1,\"4893\":1}}],[\"既然有更好的可以用\",{\"1\":{\"5280\":1}}],[\"既然备份数据库数据的时候\",{\"1\":{\"2461\":1,\"4823\":1}}],[\"既然哈希表这么快\",{\"1\":{\"2350\":1,\"4712\":1}}],[\"既然\",{\"1\":{\"2069\":1}}],[\"既然为每个请求分配一个进程\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"4545\":1}}],[\"既没有指定partition\",{\"1\":{\"1023\":1,\"5199\":1}}],[\"套接字是支持\",{\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"4542\":1}}],[\"套接字\",{\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"4542\":1}}],[\"更强大\",{\"1\":{\"2828\":1,\"4082\":1}}],[\"更灵活\",{\"1\":{\"2828\":1,\"4082\":1}}],[\"更加友好\",{\"1\":{\"2757\":1,\"5119\":1}}],[\"更大的整型数据\",{\"1\":{\"2650\":1,\"5012\":1}}],[\"更新一个变量的时候\",{\"1\":{\"2876\":1,\"4130\":1}}],[\"更新了这条数据\",{\"1\":{\"2584\":1,\"4946\":1}}],[\"更新后的数据\",{\"1\":{\"2579\":1,\"4941\":1}}],[\"更新\",{\"1\":{\"2505\":1,\"3207\":1,\"4867\":1,\"5476\":1}}],[\"更新代价比聚簇索引要小\",{\"1\":{\"2404\":1,\"4766\":1}}],[\"更新代价大\",{\"1\":{\"2399\":1,\"4761\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"134\":1,\"3533\":1}}],[\"更新时间\",{\"1\":{\"18\":1,\"3417\":1}}],[\"更严谨的说法应该是一个接口\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"更复杂的情况是\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"更适合做\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"更有优势\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"比较\",{\"1\":{\"3382\":1}}],[\"比较频繁的话导致\",{\"1\":{\"3205\":1,\"5474\":1}}],[\"比较重要的主要有下面\",{\"1\":{\"2669\":1,\"5031\":1}}],[\"比较靠谱的原因\",{\"1\":{\"2170\":1}}],[\"比\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"2282\":1,\"3076\":1,\"4330\":1,\"4539\":1,\"5364\":1}}],[\"比如一个用户的用户名为18666666666\",{\"1\":{\"3339\":1}}],[\"比如数据库查询和业务运算\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"比如你刚刚消费完消息之后\",{\"1\":{\"3213\":1,\"5482\":1}}],[\"比如文章审核\",{\"1\":{\"3202\":1,\"5471\":1}}],[\"比如我们在同一个线程中声明了两个\",{\"1\":{\"3032\":1,\"4286\":1}}],[\"比如reentrantreadwritelock\",{\"1\":{\"2910\":1,\"4164\":1}}],[\"比如reentrantlock就是独占锁\",{\"1\":{\"2909\":1,\"4163\":1}}],[\"比如需要将\",{\"1\":{\"2896\":1,\"4150\":1}}],[\"比如查询的数据库\",{\"1\":{\"2778\":1,\"5140\":1}}],[\"比如图片\",{\"0\":{\"2642\":1,\"5004\":1},\"1\":{\"2644\":1,\"5006\":1}}],[\"比如下面这个顺序的场景\",{\"1\":{\"2493\":1,\"4855\":1}}],[\"比如下单清空购物车\",{\"0\":{\"1931\":1,\"4037\":1}}],[\"比如全文索引\",{\"1\":{\"2322\":1,\"4684\":1}}],[\"比如说\",{\"1\":{\"2266\":1,\"2736\":1,\"5098\":1,\"5348\":1}}],[\"比如说此时选\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"比如高考成绩排序\",{\"0\":{\"1941\":1,\"4047\":1}}],[\"比如对于需要确保强一致性的场景如银行一般会选择保证\",{\"1\":{\"1920\":1,\"4509\":1}}],[\"比如部分节点网络出了问题\",{\"1\":{\"1913\":1,\"4502\":1}}],[\"比如这里我们是三个\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"比如这个时候我们启动了\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"比如内核中有数据需要读\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4563\":1}}],[\"比如上图中4个分区3个消费者的场景\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"比如健康状况\",{\"1\":{\"940\":1,\"3957\":1}}],[\"比如在put方法中就有如下实现\",{\"1\":{\"784\":1}}],[\"比如在方法执行前后做什么事情\",{\"1\":{\"615\":1,\"3808\":1}}],[\"比如在任何一个位置插入一个元素\",{\"1\":{\"392\":1}}],[\"比如接口一旦新增加方法\",{\"1\":{\"601\":1,\"3794\":1}}],[\"比如hashmap有hashset\",{\"1\":{\"449\":1}}],[\"比如\",{\"1\":{\"340\":1,\"360\":1,\"364\":2,\"375\":1,\"397\":1,\"608\":1,\"745\":1,\"1114\":1,\"1117\":1,\"1213\":1,\"1282\":1,\"1285\":1,\"1381\":1,\"1450\":1,\"1453\":1,\"1549\":1,\"1618\":1,\"1621\":1,\"1717\":1,\"1859\":1,\"1918\":1,\"1928\":1,\"2145\":1,\"2262\":1,\"2285\":1,\"2287\":1,\"2452\":1,\"2453\":1,\"2555\":1,\"2565\":1,\"2568\":1,\"2685\":1,\"3801\":1,\"4034\":1,\"4448\":1,\"4507\":1,\"4525\":1,\"4528\":1,\"4624\":1,\"4814\":1,\"4815\":1,\"4917\":1,\"4927\":1,\"4930\":1,\"5047\":1,\"5344\":1,\"5367\":1,\"5369\":1}}],[\"比如它的属性\",{\"1\":{\"297\":1,\"3685\":1}}],[\"存放数据的\",{\"1\":{\"3032\":1,\"4286\":1}}],[\"存放在\",{\"1\":{\"2681\":1,\"3229\":1,\"5043\":1,\"5498\":1}}],[\"存放在内存中并由消息队列标识符标识\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"存储起来\",{\"1\":{\"3303\":1,\"5572\":1}}],[\"存储系统中的冷数据\",{\"1\":{\"3301\":1,\"5570\":1}}],[\"存储数据库中是一种数据安全的考虑\",{\"1\":{\"3267\":1,\"5536\":1}}],[\"存储\",{\"1\":{\"3248\":1,\"5517\":1}}],[\"存储技术选型优化\",{\"1\":{\"3215\":1,\"5484\":1}}],[\"存储到阿里云oss\",{\"1\":{\"3148\":1,\"5428\":1}}],[\"存储字节越小\",{\"1\":{\"2646\":1,\"5008\":1}}],[\"存储引擎为每行数据添加了三个\",{\"1\":{\"2617\":1,\"4979\":1}}],[\"存储引擎提供了个\",{\"1\":{\"2523\":1,\"4885\":1}}],[\"存储引擎提供了一种轻量级的锁来实现自增\",{\"1\":{\"2521\":1,\"4883\":1}}],[\"存储引擎默认的事务隔离级别正是可重复读\",{\"1\":{\"2465\":1,\"4827\":1}}],[\"存储引擎中\",{\"1\":{\"2409\":1,\"2633\":1,\"4771\":1,\"4995\":1}}],[\"存储引擎\",{\"1\":{\"2363\":1,\"4725\":1}}],[\"存在于数据库中\",{\"1\":{\"2794\":1,\"2801\":1,\"5156\":1,\"5163\":1}}],[\"存在于实际的磁盘介质或者文件系统\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"存在的话才会走下面的流程\",{\"1\":{\"2783\":1,\"5145\":1}}],[\"存在\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"存在tcp头部\",{\"1\":{\"2124\":1,\"2126\":1}}],[\"存在ip头部\",{\"1\":{\"2123\":1,\"2125\":1}}],[\"具有算法公开\",{\"1\":{\"3397\":1}}],[\"具有提交\",{\"1\":{\"2330\":1,\"4692\":1}}],[\"具有较低的连接和传输延迟\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"具有多个接口\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"具有高可用分区容错特点\",{\"1\":{\"1811\":1,\"4400\":1}}],[\"具有特定的格式\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"具体实现\",{\"1\":{\"3239\":1,\"5508\":1}}],[\"具体命令如下\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"具体值取决于写出的数据量和\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"具体方式如下\",{\"1\":{\"2507\":1,\"4869\":1}}],[\"具体可以参见这篇文章\",{\"1\":{\"2145\":1}}],[\"具体的计算方法是\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"具体的给面试官扯一扯\",{\"1\":{\"2111\":1}}],[\"具体的细节请移步\",{\"1\":{\"1980\":1,\"1995\":1,\"2036\":1,\"2051\":1,\"5271\":1,\"5273\":1}}],[\"具体的底层实现\",{\"1\":{\"383\":1}}],[\"具体分发给\",{\"1\":{\"1227\":1,\"1242\":1,\"1395\":1,\"1410\":1,\"1563\":1,\"1578\":1,\"1731\":1,\"1746\":1,\"4638\":1,\"4653\":1}}],[\"具体过程如下\",{\"1\":{\"1169\":1,\"1183\":1,\"1337\":1,\"1351\":1,\"1505\":1,\"1519\":1,\"1673\":1,\"1687\":1,\"4580\":1,\"4594\":1}}],[\"具体就是\",{\"1\":{\"978\":1,\"3995\":1}}],[\"具体地\",{\"1\":{\"653\":1}}],[\"具体为o\",{\"1\":{\"473\":1}}],[\"具体来说\",{\"1\":{\"472\":1,\"485\":1}}],[\"具体是这样做的\",{\"1\":{\"2783\":1,\"5145\":1}}],[\"具体是o\",{\"1\":{\"471\":1}}],[\"具体是哪个类加载器加载呢\",{\"1\":{\"222\":1,\"3616\":1}}],[\"匿名管道由于没有名字\",{\"1\":{\"1126\":1,\"1294\":1,\"1462\":1,\"1630\":1,\"4537\":1}}],[\"匿名管道\",{\"1\":{\"1125\":1,\"1293\":1,\"1461\":1,\"1629\":1,\"4536\":1}}],[\"管道只能承载无格式字\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"管道和消息队列的通信数据都是先进先出的原则\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"管道\",{\"1\":{\"1125\":1,\"1293\":1,\"1461\":1,\"1629\":1,\"4536\":1}}],[\"管理\",{\"1\":{\"810\":1,\"3827\":1}}],[\"操作可能无法感知到\",{\"1\":{\"2886\":1,\"4140\":1}}],[\"操作来加锁和解锁\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"操作的方式将创建的节点加入同步队列的尾部\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"操作的一个经典问题\",{\"1\":{\"2886\":1,\"4140\":1}}],[\"操作的记录只对事务本身可见\",{\"1\":{\"2634\":1,\"4996\":1}}],[\"操作的速度是很快的\",{\"1\":{\"1236\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"4647\":1}}],[\"操作中产生的\",{\"1\":{\"2634\":1,\"4996\":1}}],[\"操作在内部被视为更新\",{\"1\":{\"2618\":1,\"4980\":1}}],[\"操作时\",{\"1\":{\"2486\":1,\"2488\":1,\"4848\":1,\"4850\":1}}],[\"操作一次\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"操作\",{\"0\":{\"2663\":1,\"5025\":1},\"1\":{\"1122\":1,\"1154\":1,\"1290\":1,\"1322\":1,\"1458\":1,\"1490\":1,\"1626\":1,\"1658\":1,\"2395\":1,\"2490\":1,\"2499\":1,\"2634\":1,\"2756\":1,\"2874\":1,\"2880\":1,\"4128\":1,\"4134\":1,\"4533\":1,\"4565\":1,\"4757\":1,\"4852\":1,\"4861\":1,\"4996\":1,\"5118\":1}}],[\"操作系统直接将内核缓冲区的数据拷贝到\",{\"1\":{\"1171\":1,\"1339\":1,\"1507\":1,\"1675\":1,\"4582\":1}}],[\"操作系统内核与用户空间就不需要再进行任何的数据拷贝操作\",{\"1\":{\"1167\":1,\"1335\":1,\"1503\":1,\"1671\":1,\"4578\":1}}],[\"操作系统重启\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"操作系统必须提供实现进程协作的措施和方法\",{\"1\":{\"1120\":1,\"1288\":1,\"1456\":1,\"1624\":1,\"4531\":1}}],[\"操作系统\",{\"0\":{\"1100\":1,\"1101\":1,\"1268\":1,\"1269\":1,\"1436\":1,\"1437\":1,\"1604\":1,\"1605\":1,\"4511\":1,\"4512\":1,\"5595\":1}}],[\"屏障是一种同步原语\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4528\":1}}],[\"屏障\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4528\":1}}],[\"信息\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"信息容器\",{\"1\":{\"46\":1,\"3445\":1}}],[\"信号是一种比较复杂的通信方式\",{\"1\":{\"1127\":1,\"1295\":1,\"1463\":1,\"1631\":1,\"4538\":1}}],[\"信号\",{\"1\":{\"1127\":1,\"1295\":1,\"1463\":1,\"1631\":1,\"4538\":1}}],[\"信号量的意图在于进程间同步\",{\"1\":{\"1129\":1,\"1297\":1,\"1465\":1,\"1633\":1,\"4540\":1}}],[\"信号量是一个计数器\",{\"1\":{\"1129\":1,\"1297\":1,\"1465\":1,\"1633\":1,\"4540\":1}}],[\"信号量\",{\"1\":{\"1116\":1,\"1122\":1,\"1129\":1,\"1284\":1,\"1290\":1,\"1297\":1,\"1452\":1,\"1458\":1,\"1465\":1,\"1620\":1,\"1626\":1,\"1633\":1,\"4527\":1,\"4533\":1,\"4540\":1}}],[\"读多写少\",{\"1\":{\"2978\":1,\"4232\":1}}],[\"读操作并不会修改数据\",{\"1\":{\"2978\":1,\"4232\":1}}],[\"读提交\",{\"1\":{\"2594\":1,\"2601\":1,\"2604\":1,\"2613\":2,\"4956\":1,\"4963\":1,\"4966\":1,\"4975\":2}}],[\"读未提交\",{\"1\":{\"2593\":1,\"2600\":1,\"2611\":1,\"4955\":1,\"4962\":1,\"4973\":1}}],[\"读到\",{\"1\":{\"2577\":1,\"4939\":1}}],[\"读读是共享的\",{\"1\":{\"2984\":1,\"4238\":1}}],[\"读读\",{\"1\":{\"2495\":1,\"4857\":1}}],[\"读锁的共享锁可保证并发读是非常高效的\",{\"1\":{\"2981\":1,\"4235\":1}}],[\"读锁还在占用着\",{\"1\":{\"2496\":1,\"4858\":1}}],[\"读锁\",{\"0\":{\"2983\":1,\"4237\":1},\"1\":{\"2486\":1,\"2489\":2,\"2490\":1,\"2494\":1,\"2500\":1,\"4848\":1,\"4851\":2,\"4852\":1,\"4856\":1,\"4862\":1}}],[\"读从机房的方案\",{\"1\":{\"1960\":1,\"4066\":1}}],[\"读\",{\"1\":{\"1858\":2,\"4447\":2}}],[\"读取之前的版本数据\",{\"1\":{\"2632\":1,\"4994\":1}}],[\"读取到的余额数据是刚才事务\",{\"1\":{\"2579\":1,\"4941\":1}}],[\"读取到数据后\",{\"1\":{\"1246\":1,\"1414\":1,\"1582\":1,\"1750\":1,\"4657\":1}}],[\"读取meta\",{\"1\":{\"905\":1,\"3922\":1}}],[\"读写\",{\"1\":{\"2981\":1,\"2984\":1,\"4235\":1,\"4238\":1}}],[\"读写互斥\",{\"1\":{\"2510\":1,\"2537\":2,\"4872\":1,\"4899\":2}}],[\"读写事件\",{\"1\":{\"1197\":1,\"1365\":1,\"1533\":1,\"1701\":1,\"4608\":1}}],[\"读写锁\",{\"1\":{\"1115\":1,\"1283\":1,\"1451\":1,\"1619\":1,\"2985\":1,\"4239\":1,\"4526\":1}}],[\"采用kafka作为消息服务中间件\",{\"1\":{\"3198\":1,\"5467\":1}}],[\"采用\",{\"1\":{\"2808\":1,\"5170\":1}}],[\"采用的是\",{\"1\":{\"2757\":1,\"5119\":1}}],[\"采用先进先出的方式发送消息\",{\"1\":{\"1879\":1,\"4468\":1}}],[\"采用互斥对象机制\",{\"1\":{\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"4525\":1}}],[\"采用了两种方法\",{\"1\":{\"761\":1}}],[\"互联网工程任务组正式将基于\",{\"1\":{\"5275\":1}}],[\"互斥锁\",{\"1\":{\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"4525\":1}}],[\"互斥同步\",{\"0\":{\"1111\":1,\"1279\":1,\"1447\":1,\"1615\":1,\"4522\":1}}],[\"互相循环依赖\",{\"1\":{\"873\":1,\"3890\":1}}],[\"阻塞\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"阻塞后\",{\"1\":{\"2497\":1,\"4859\":1}}],[\"阻塞的情况分三种\",{\"1\":{\"1107\":1,\"1275\":1,\"1443\":1,\"1611\":1,\"4518\":1}}],[\"阻塞状态是线程因为某种原因放弃cpu使用权\",{\"1\":{\"1107\":1,\"1275\":1,\"1443\":1,\"1611\":1,\"4518\":1}}],[\"阻塞状态\",{\"1\":{\"1107\":1,\"1275\":1,\"1443\":1,\"1611\":1,\"4518\":1}}],[\"才需要去实现它\",{\"1\":{\"2928\":1,\"4182\":1}}],[\"才可以把子查询转化为关联查询进行优化\",{\"1\":{\"2664\":1,\"5026\":1}}],[\"才会正式对数据的冲突与否进行检测\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"才会将内存地址\",{\"1\":{\"2876\":1,\"4130\":1}}],[\"才会把\",{\"1\":{\"2518\":1,\"4880\":1}}],[\"才会停止匹配\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"才会进⼊同步块\",{\"1\":{\"582\":1,\"3775\":1}}],[\"才能继续执行\",{\"1\":{\"2596\":1,\"4958\":1}}],[\"才能连接\",{\"1\":{\"2112\":1}}],[\"才能得到处理\",{\"1\":{\"1881\":1,\"4470\":1}}],[\"才有机会转到运行状态\",{\"1\":{\"1107\":1,\"1275\":1,\"1443\":1,\"1611\":1,\"4518\":1}}],[\"直至联合索引中全部字段匹配完成\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"直到等待的时间超过了\",{\"1\":{\"3049\":1,\"4303\":1}}],[\"直到锁被另外一个线程释放为止\",{\"1\":{\"3007\":1,\"4261\":1}}],[\"直到锁被释放\",{\"1\":{\"2478\":1,\"4840\":1}}],[\"直到操作完成\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"直到拥有间隙锁的那个事务提交为止\",{\"1\":{\"2559\":1,\"4921\":1}}],[\"直到表结构变更完成\",{\"1\":{\"2490\":1,\"4852\":1}}],[\"直到执行完\",{\"1\":{\"2489\":1,\"4851\":1}}],[\"直到目的地\",{\"1\":{\"2259\":1,\"5341\":1}}],[\"直到系统调用\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"直到你取出了快递\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4562\":1}}],[\"直到内核缓冲区数据被\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4561\":1}}],[\"直到所有线程都到达屏障后\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4528\":1}}],[\"直到线程进入就绪状态\",{\"1\":{\"1107\":1,\"1275\":1,\"1443\":1,\"1611\":1,\"4518\":1}}],[\"直接发车\",{\"1\":{\"3386\":1}}],[\"直接说不熟悉\",{\"1\":{\"3183\":1}}],[\"直接打断说只介绍自己会的\",{\"1\":{\"3119\":1,\"5399\":1}}],[\"直接丢弃掉\",{\"1\":{\"3059\":1,\"4313\":1}}],[\"直接通过getmap\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"直接返回请求参数错误信息给客户端\",{\"1\":{\"2783\":1,\"5145\":1}}],[\"直接返回已创建的单例对象\",{\"1\":{\"582\":1,\"3775\":1}}],[\"直接查该表是否有意向独占锁\",{\"1\":{\"2512\":1,\"4874\":1}}],[\"直接找到\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"直接调用接口就行了\",{\"1\":{\"1846\":1,\"4435\":1}}],[\"直接就可以在子线程将处理结果发送给客户端\",{\"1\":{\"1266\":1,\"1434\":1,\"1602\":1,\"1770\":1,\"4677\":1}}],[\"直接会将数据在缓存中的引用交给用户\",{\"1\":{\"989\":1,\"4006\":1}}],[\"直接给出结论\",{\"1\":{\"763\":1}}],[\"直接在第⼀重判断就返回了单例\",{\"1\":{\"582\":1,\"3775\":1}}],[\"直接实例化对象\",{\"1\":{\"577\":1,\"3770\":1}}],[\"直接上菜\",{\"1\":{\"336\":1}}],[\"直接举例吧\",{\"1\":{\"289\":1,\"298\":1,\"3677\":1,\"3686\":1}}],[\"直接new对象就叫正射\",{\"1\":{\"286\":1,\"3674\":1}}],[\"直接生成的\",{\"1\":{\"201\":1,\"3595\":1}}],[\"新生代和老年代数据是如何流动的\",{\"1\":{\"3172\":1,\"5452\":1}}],[\"新任务就会被存放在队列中\",{\"1\":{\"3047\":1,\"3063\":1,\"4301\":1,\"4317\":1}}],[\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数\",{\"1\":{\"3047\":1,\"3063\":1,\"4301\":1,\"4317\":1}}],[\"新写入操作会报错\",{\"1\":{\"2768\":1,\"5130\":1}}],[\"新增\",{\"1\":{\"2723\":1,\"5085\":1}}],[\"新增了\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"新的\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"新人只需要了解他所接管的服务的代码\",{\"1\":{\"1806\":1,\"4395\":1}}],[\"新创建了一个线程对象\",{\"1\":{\"1104\":1,\"1272\":1,\"1440\":1,\"1608\":1,\"4515\":1}}],[\"新建线程将会使当前运行的线程超出最大线程数\",{\"1\":{\"3072\":1,\"4326\":1}}],[\"新建状态\",{\"1\":{\"1104\":1,\"1272\":1,\"1440\":1,\"1608\":1,\"4515\":1}}],[\"新建一个springboot项目\",{\"1\":{\"947\":1,\"3964\":1}}],[\"形成一系列的目录和子目录\",{\"1\":{\"1086\":1,\"4027\":1}}],[\"拆分多个queue\",{\"1\":{\"1075\":1,\"5251\":1}}],[\"造成数据顺序错误\",{\"1\":{\"1070\":1,\"5246\":1}}],[\"出来得太快了\",{\"1\":{\"5280\":1}}],[\"出一个子进程\",{\"1\":{\"2731\":1,\"5093\":1}}],[\"出现冲突后就会开始自旋操作\",{\"1\":{\"2893\":1,\"4147\":1}}],[\"出现问题的时候我们势必需要重新选举\",{\"1\":{\"1883\":1,\"4472\":1}}],[\"出现顺序错乱的场景\",{\"0\":{\"1069\":1,\"5245\":1}}],[\"出去呀\",{\"1\":{\"1878\":1,\"4467\":1}}],[\"出队效率比较高\",{\"1\":{\"494\":1}}],[\"消耗更多的\",{\"1\":{\"2660\":1,\"5022\":1}}],[\"消耗过多存储空间\",{\"1\":{\"2643\":1,\"5005\":1}}],[\"消息中间件\",{\"0\":{\"5597\":1}}],[\"消息摘要算法又称为哈希算法\",{\"1\":{\"3327\":1}}],[\"消息摘要算法第五版\",{\"1\":{\"3326\":1}}],[\"消息积压的概率比较大\",{\"1\":{\"3283\":1,\"5552\":1}}],[\"消息实际上并没有被消费\",{\"1\":{\"3211\":1,\"5480\":1}}],[\"消息的边界\",{\"1\":{\"2114\":1}}],[\"消息可能会被操作系统\",{\"1\":{\"2114\":1}}],[\"消息广播模式\",{\"0\":{\"1876\":1,\"4465\":1}}],[\"消息广播\",{\"1\":{\"1867\":1,\"1875\":1,\"4456\":1,\"4464\":1}}],[\"消息分区\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"消息驱动\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"消息总线\",{\"1\":{\"1793\":1,\"1827\":1,\"4382\":1,\"4416\":1}}],[\"消息不一定要以先进先出的次序读取\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"消息队列克服了信号承载信息量少\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"消息队列可以实现消息的随机查询\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"消息队列是消息的链表\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"消息队列\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"2695\":1,\"4539\":1,\"5057\":1}}],[\"消息队列中的若干消息如果是对同一个数据进行操作\",{\"1\":{\"1068\":1,\"5244\":1}}],[\"消费任务进行审核文章\",{\"1\":{\"3276\":1,\"5545\":1}}],[\"消费组\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"消费组的成员订阅它们感兴趣的topic并将这种订阅关系传递给作为订阅组协调者的broker\",{\"1\":{\"1028\":1,\"5204\":1}}],[\"消费端会从分配到的partition里面去消费消息\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"消费者会自动提交了\",{\"1\":{\"3211\":1,\"5480\":1}}],[\"消费者丢失消息的情况\",{\"1\":{\"3209\":1,\"5478\":1}}],[\"消费者购买商品这个事务\",{\"1\":{\"2569\":1,\"4931\":1}}],[\"消费者的钱也没花出去\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"消费者消费完\",{\"1\":{\"1938\":1,\"4044\":1}}],[\"消费者还是会从之前没提交的offset位置开始消费\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"消费者之间分配到的分区数的差值不会超过1\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"消费者订阅的topic列表是相同的\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"消费者\",{\"0\":{\"1025\":1,\"5201\":1}}],[\"利用她们的技术\",{\"1\":{\"3334\":1}}],[\"利用tomcat的access\",{\"1\":{\"3314\":1}}],[\"利用\",{\"1\":{\"2687\":1,\"5049\":1}}],[\"利用mysql的唯一键约束\",{\"1\":{\"1064\":1,\"5240\":1}}],[\"利于集群数据的均衡\",{\"1\":{\"1017\":1,\"5193\":1}}],[\"隔一段时间\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"隔离服务之间相互影响\",{\"1\":{\"1843\":1,\"4432\":1}}],[\"隔离级别是\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"隔离级别是在\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"隔离级别是可以解决幻读问题发生的\",{\"1\":{\"2330\":1,\"4692\":1}}],[\"隔离级别的事务来说\",{\"1\":{\"2611\":1,\"2612\":1,\"2613\":1,\"4973\":1,\"4974\":1,\"4975\":1}}],[\"隔离级别会影响性能\",{\"1\":{\"2606\":1,\"4968\":1}}],[\"隔离级别来避免幻读现象的发生\",{\"1\":{\"2606\":1,\"4968\":1}}],[\"隔离级别下\",{\"1\":{\"2600\":1,\"2601\":1,\"2602\":1,\"2603\":1,\"2606\":1,\"4962\":1,\"4963\":1,\"4964\":1,\"4965\":1,\"4968\":1}}],[\"隔离级别越高\",{\"1\":{\"2592\":1,\"4954\":1}}],[\"隔离级别\",{\"1\":{\"852\":2,\"3869\":2}}],[\"隔离性是通过\",{\"1\":{\"2574\":1,\"4936\":1}}],[\"隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致\",{\"1\":{\"2569\":1,\"4931\":1}}],[\"隔离性\",{\"1\":{\"843\":1,\"2569\":1,\"3860\":1,\"4931\":1}}],[\"变化不频繁的情况\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"变为了正常状态\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"变为\",{\"1\":{\"1886\":1,\"1889\":1,\"4475\":1,\"4478\":1}}],[\"变得可运行\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4516\":1}}],[\"变动较小\",{\"1\":{\"1055\":1,\"5231\":1}}],[\"变量符合我们上面提到的空间局部性\",{\"1\":{\"1097\":1}}],[\"变量\",{\"1\":{\"302\":1,\"3026\":1,\"3028\":1,\"3690\":1,\"4280\":1,\"4282\":1}}],[\"粘性的\",{\"1\":{\"1047\":2,\"5223\":2}}],[\"节流以及缓冲区大小受限等缺点\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"节省因分区分配变化带来的开销\",{\"1\":{\"1047\":1,\"5223\":1}}],[\"节点是红色或黑色\",{\"1\":{\"422\":1,\"3747\":1}}],[\"路由器接口将对\",{\"1\":{\"2259\":1,\"5341\":1}}],[\"路由器接口如未能找到主机\",{\"1\":{\"2258\":1,\"5340\":1}}],[\"路由器接口查询\",{\"1\":{\"2257\":1,\"5339\":1}}],[\"路由器的多个接口都各自维护一个\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"路由器作为互联设备\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"路由到不同分区\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"路径导航\",{\"1\":{\"14\":1,\"131\":1,\"3413\":1,\"3530\":1}}],[\"疑问\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"生成数字签名\",{\"0\":{\"3383\":1}}],[\"生成一个\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"生成一个被代理对象的子类来作为代理\",{\"1\":{\"807\":1,\"3824\":1}}],[\"生产者执行本地事务\",{\"1\":{\"1935\":1,\"4041\":1}}],[\"生产者\",{\"0\":{\"1015\":1,\"5191\":1},\"1\":{\"1932\":1,\"4038\":1}}],[\"天和\",{\"1\":{\"1013\":1,\"5189\":1}}],[\"循环次数\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"循环时间\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"循环使用所有片段\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"循环依赖的本质是一样的\",{\"1\":{\"874\":1,\"3891\":1}}],[\"循环依赖的概念\",{\"1\":{\"871\":1,\"3888\":1}}],[\"循环依赖分为三种\",{\"1\":{\"873\":1,\"3890\":1}}],[\"安全散列\",{\"1\":{\"3394\":1}}],[\"安全性更高\",{\"1\":{\"3399\":1}}],[\"安全性得不到保证\",{\"1\":{\"3398\":1}}],[\"安全性没有\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"安全性和资源消耗\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"安全\",{\"1\":{\"989\":1,\"4006\":1}}],[\"安全的在\",{\"1\":{\"44\":1,\"3443\":1}}],[\"共同关注\",{\"1\":{\"2702\":1,\"5064\":1}}],[\"共同点\",{\"1\":{\"643\":1}}],[\"共享方式\",{\"1\":{\"2931\":1,\"2932\":1,\"4185\":1,\"4186\":1}}],[\"共享锁是指允许多个线程同时持有锁\",{\"1\":{\"2981\":1,\"4235\":1}}],[\"共享锁和独占锁的释放有一定区别\",{\"1\":{\"2911\":1,\"4165\":1}}],[\"共享锁\",{\"0\":{\"2980\":1,\"4234\":1},\"1\":{\"2503\":1,\"2537\":1,\"2910\":1,\"2978\":1,\"4164\":1,\"4232\":1,\"4865\":1,\"4899\":1}}],[\"共享表锁\",{\"1\":{\"2478\":1,\"4840\":1}}],[\"共享\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"4581\":1}}],[\"共享内存\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4541\":1}}],[\"共享的\",{\"1\":{\"984\":1,\"4001\":1}}],[\"共3个consumer\",{\"1\":{\"1036\":1,\"5212\":1}}],[\"拦截\",{\"1\":{\"977\":1,\"3994\":1}}],[\"拦截被代理类中的方法\",{\"1\":{\"622\":1,\"3815\":1}}],[\"举个生活中的例子\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"举个栗子\",{\"1\":{\"2578\":1,\"2583\":1,\"2587\":1,\"4940\":1,\"4945\":1,\"4949\":1}}],[\"举个例子来说\",{\"1\":{\"750\":1}}],[\"举个例子\",{\"1\":{\"405\":1,\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"1919\":1,\"3061\":1,\"4315\":1,\"4508\":1,\"4562\":1}}],[\"举例\",{\"1\":{\"977\":1,\"3994\":1}}],[\"方便说一下是哪个公司吗\",{\"1\":{\"3168\":1,\"5448\":1}}],[\"方式二\",{\"1\":{\"3078\":1,\"3314\":1,\"4332\":1}}],[\"方式一\",{\"1\":{\"3040\":1,\"3307\":1,\"4294\":1}}],[\"方式的持久化\",{\"1\":{\"2733\":1,\"5095\":1}}],[\"方式解决了幻读\",{\"1\":{\"2608\":1,\"2609\":1,\"4970\":1,\"4971\":1}}],[\"方案详细说明如下\",{\"1\":{\"1259\":1,\"1427\":1,\"1595\":1,\"1763\":1,\"4670\":1}}],[\"方案的示意图如下\",{\"1\":{\"1239\":1,\"1407\":1,\"1575\":1,\"1743\":1,\"4650\":1}}],[\"方案的缺点\",{\"1\":{\"1238\":1,\"1406\":1,\"1574\":1,\"1742\":1,\"4649\":1}}],[\"方案具体使用进程还是线程\",{\"1\":{\"1212\":1,\"1380\":1,\"1548\":1,\"1716\":1,\"4623\":1}}],[\"方案\",{\"1\":{\"1207\":1,\"1215\":1,\"1375\":1,\"1383\":1,\"1543\":1,\"1551\":1,\"1711\":1,\"1719\":1,\"4618\":1,\"4626\":1}}],[\"方言\",{\"1\":{\"976\":1,\"3993\":1}}],[\"方法区和堆属于主内存区域\",{\"1\":{\"2938\":1,\"4192\":1}}],[\"方法将响应结果发送给\",{\"1\":{\"1247\":1,\"1415\":1,\"1583\":1,\"1751\":1,\"4658\":1}}],[\"方法才能被唤醒\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"方法返回代理引用或者原始引用\",{\"1\":{\"894\":1,\"3911\":1}}],[\"方法可能继续在现有事务中运行\",{\"1\":{\"858\":1,\"3875\":1}}],[\"方法的功能就是根据key来定位其在hashmap中的位置\",{\"1\":{\"721\":1}}],[\"方法的参数\",{\"1\":{\"614\":1,\"3807\":1}}],[\"方法入参\",{\"1\":{\"622\":1,\"3815\":1}}],[\"方法中自定义处理逻辑\",{\"1\":{\"615\":1,\"3808\":1}}],[\"方法有下面三个参数\",{\"1\":{\"614\":1,\"3807\":1}}],[\"方法来获取默认值或将其值更改为当前线程所存的副本的值\",{\"1\":{\"3022\":1,\"4276\":1}}],[\"方法来调用\",{\"1\":{\"613\":1,\"3806\":1}}],[\"方法来返回一个线程安全的list\",{\"1\":{\"528\":1}}],[\"方法来加载类\",{\"1\":{\"233\":1,\"234\":1,\"3627\":1,\"3628\":1}}],[\"方法会传入一个期望的最小容量\",{\"1\":{\"524\":1}}],[\"方法要被调用\",{\"1\":{\"462\":1}}],[\"方法获取对应的构造器\",{\"1\":{\"318\":1,\"3706\":1}}],[\"方法指定获取指定参数类型的\",{\"1\":{\"317\":1,\"3705\":1}}],[\"方法头中使用关键字throws\",{\"1\":{\"256\":1,\"3652\":1}}],[\"方法即可\",{\"1\":{\"219\":1,\"3613\":1}}],[\"方法\",{\"1\":{\"218\":1,\"219\":1,\"297\":1,\"302\":1,\"312\":1,\"315\":1,\"538\":1,\"615\":1,\"621\":1,\"623\":1,\"719\":1,\"724\":1,\"819\":1,\"978\":1,\"979\":1,\"1105\":1,\"1108\":2,\"1109\":1,\"1193\":1,\"1228\":1,\"1243\":1,\"1273\":1,\"1276\":2,\"1277\":1,\"1361\":1,\"1396\":1,\"1411\":1,\"1441\":1,\"1444\":2,\"1445\":1,\"1529\":1,\"1564\":1,\"1579\":1,\"1609\":1,\"1612\":2,\"1613\":1,\"1697\":1,\"1732\":1,\"1747\":1,\"3009\":1,\"3026\":1,\"3027\":1,\"3072\":1,\"3612\":1,\"3613\":1,\"3685\":1,\"3690\":1,\"3700\":1,\"3703\":1,\"3808\":1,\"3814\":1,\"3816\":1,\"3836\":1,\"3995\":1,\"3996\":1,\"4263\":1,\"4280\":1,\"4281\":1,\"4326\":1,\"4516\":1,\"4519\":2,\"4520\":1,\"4604\":1,\"4639\":1,\"4654\":1}}],[\"方法而不是loadclass\",{\"1\":{\"218\":1,\"3612\":1}}],[\"方法解析该类\",{\"1\":{\"214\":1,\"3608\":1}}],[\"答案就是\",{\"1\":{\"2759\":1,\"5121\":1}}],[\"答案是有的\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"4545\":1}}],[\"答案是不可能\",{\"1\":{\"363\":1}}],[\"答\",{\"1\":{\"972\":1,\"3989\":1}}],[\"官网2\",{\"1\":{\"958\":1,\"959\":1,\"960\":1,\"3975\":1,\"3976\":1,\"3977\":1}}],[\"官方的推荐所建立的这个stack\",{\"1\":{\"393\":1}}],[\"官方推荐的创建栈的方式\",{\"1\":{\"400\":1}}],[\"官方推荐的方法声明的这个\",{\"1\":{\"391\":1}}],[\"官方推荐的写法\",{\"1\":{\"372\":1}}],[\"官方推荐的写法是这样的\",{\"1\":{\"341\":1}}],[\"官方推出了\",{\"1\":{\"385\":1}}],[\"官方也并没有将\",{\"1\":{\"370\":1}}],[\"官方可以做到的是\",{\"1\":{\"369\":1}}],[\"官方不想推出一个叫做\",{\"1\":{\"393\":1}}],[\"官方不愿意看到的\",{\"1\":{\"368\":1}}],[\"官方不能做接口设计层面的修改\",{\"1\":{\"368\":1}}],[\"官方不知道这个\",{\"0\":{\"367\":1}}],[\"官方当然知道这个实现不好\",{\"1\":{\"368\":1}}],[\"官方文档中的类关系\",{\"1\":{\"344\":1}}],[\"官方\",{\"1\":{\"216\":1,\"338\":1,\"3610\":1}}],[\"线程是稀缺资源\",{\"1\":{\"3038\":1,\"4292\":1}}],[\"线程是不会主动释放偏向锁的\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"线程池被创建后如果没有任务过来\",{\"1\":{\"3098\":1,\"4352\":1}}],[\"线程池被创建后里面有线程吗\",{\"1\":{\"3097\":1,\"4351\":1}}],[\"线程池的7大参数以及具体用法\",{\"1\":{\"3142\":1,\"5422\":1}}],[\"线程池的线程数量不确定\",{\"1\":{\"3082\":1,\"4336\":1}}],[\"线程池的饱和策略有哪些\",{\"1\":{\"3055\":1,\"4309\":1}}],[\"线程池中若有空闲线程\",{\"1\":{\"3080\":1,\"4334\":1}}],[\"线程池中的线程数量大于\",{\"1\":{\"3049\":1,\"4303\":1}}],[\"线程池处理任务的流程了解吗\",{\"1\":{\"3068\":1,\"4322\":1}}],[\"线程池常用的阻塞队列有哪些\",{\"1\":{\"3062\":1,\"4316\":1}}],[\"线程池各个参数的关系\",{\"1\":{\"3054\":1,\"4308\":1}}],[\"线程池\",{\"0\":{\"3033\":1,\"4287\":1}}],[\"线程试图获取锁也就是获取\",{\"1\":{\"3003\":1,\"4257\":1}}],[\"线程对变量的所有操作都在工作内存中进行\",{\"1\":{\"2941\":1,\"4195\":1}}],[\"线程对象创建后\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4516\":1}}],[\"线程工作内存保存了变量在主内存中的副本\",{\"1\":{\"2941\":1,\"4195\":1}}],[\"线程工作内存\",{\"1\":{\"2939\":1,\"4193\":1}}],[\"线程获取锁\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"线程1进行compare\",{\"1\":{\"2874\":1,\"4128\":1}}],[\"线程1重新获取内存地址\",{\"1\":{\"2872\":1,\"4126\":1}}],[\"线程1开始提交更新\",{\"1\":{\"2870\":1,\"4124\":1}}],[\"线程1想要把内存地址为\",{\"1\":{\"2866\":1,\"4120\":1}}],[\"线程2捷足先登了\",{\"1\":{\"2868\":1,\"4122\":1}}],[\"线程执行的时候不会加锁\",{\"1\":{\"2860\":1,\"4114\":1}}],[\"线程执行完了或者因异常退出了run\",{\"1\":{\"1109\":1,\"1277\":1,\"1445\":1,\"1613\":1,\"4520\":1}}],[\"线程开始执行第一步就是获取锁\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"线程会判断此时持有锁的线程是否就是自己\",{\"1\":{\"2841\":1,\"4095\":1}}],[\"线程并不会主动释放偏向锁\",{\"1\":{\"2841\":1,\"4095\":1}}],[\"线程并发执行的过程中\",{\"1\":{\"1119\":1,\"1287\":1,\"1455\":1,\"1623\":1,\"4530\":1}}],[\"线程的挂起和唤醒\",{\"1\":{\"2851\":1,\"4105\":1}}],[\"线程的自旋超过了一定次数\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"线程的互斥同步方式有哪些\",{\"0\":{\"2820\":1,\"4074\":1}}],[\"线程的方案\",{\"1\":{\"1256\":1,\"1424\":1,\"1592\":1,\"1760\":1,\"4667\":1}}],[\"线程的方式不合适\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"4545\":1}}],[\"线程模式后面会详细介绍到\",{\"1\":{\"2671\":1,\"5033\":1}}],[\"线程接近交替运行\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"线程方案的示意图如下\",{\"1\":{\"1257\":1,\"1425\":1,\"1593\":1,\"1761\":1,\"4668\":1}}],[\"线程\",{\"0\":{\"1216\":1,\"1255\":1,\"1384\":1,\"1423\":1,\"1552\":1,\"1591\":1,\"1720\":1,\"1759\":1,\"4627\":1,\"4666\":1},\"1\":{\"1201\":2,\"1203\":1,\"1204\":1,\"1205\":1,\"1206\":1,\"1207\":2,\"1209\":1,\"1211\":1,\"1369\":2,\"1371\":1,\"1372\":1,\"1373\":1,\"1374\":1,\"1375\":2,\"1377\":1,\"1379\":1,\"1537\":2,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":2,\"1545\":1,\"1547\":1,\"1705\":2,\"1707\":1,\"1708\":1,\"1709\":1,\"1710\":1,\"1711\":2,\"1713\":1,\"1715\":1,\"2494\":1,\"2495\":1,\"2496\":1,\"2874\":1,\"4128\":1,\"4612\":2,\"4614\":1,\"4615\":1,\"4616\":1,\"4617\":1,\"4618\":2,\"4620\":1,\"4622\":1,\"4856\":1,\"4857\":1,\"4858\":1}}],[\"线程同步\",{\"1\":{\"1123\":1,\"1291\":1,\"1459\":1,\"1627\":1,\"4534\":1}}],[\"线程同步是两个或多个共享关键资源的线程的并发执行\",{\"1\":{\"1112\":1,\"1280\":1,\"1448\":1,\"1616\":1,\"4523\":1}}],[\"线程互斥\",{\"1\":{\"1123\":1,\"1291\":1,\"1459\":1,\"1627\":1,\"4534\":1}}],[\"线程间正确的协作\",{\"1\":{\"1120\":1,\"1288\":1,\"1456\":1,\"1624\":1,\"4531\":1}}],[\"线程之间存在协作的关系\",{\"1\":{\"1119\":1,\"1287\":1,\"1455\":1,\"1623\":1,\"4530\":1}}],[\"线程重新转入就绪状态\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"线程信息等\",{\"1\":{\"940\":1,\"3957\":1}}],[\"线程安全的hashtable是如何实现的\",{\"1\":{\"759\":1}}],[\"线程安全\",{\"1\":{\"582\":1,\"3775\":1}}],[\"环境变量\",{\"1\":{\"940\":1,\"3957\":1}}],[\"环境下无法执行\",{\"1\":{\"368\":1}}],[\"引用没有变实际上包含的变量已经被修改\",{\"1\":{\"2887\":1,\"4141\":1}}],[\"引擎的默认隔离级别虽然是\",{\"1\":{\"2607\":1,\"4969\":1}}],[\"引擎的默认隔离级别\",{\"1\":{\"2595\":1,\"4957\":1}}],[\"引擎的表里对某些纪录加上\",{\"1\":{\"2504\":1,\"4866\":1}}],[\"引擎的表里对某些记录加上\",{\"1\":{\"2503\":1,\"4865\":1}}],[\"引擎的表使用表锁\",{\"1\":{\"2482\":1,\"4844\":1}}],[\"引擎的表的\",{\"1\":{\"2393\":1,\"4755\":1}}],[\"引擎通过什么技术来保证事务的这四个特性的呢\",{\"1\":{\"2571\":1,\"4933\":1}}],[\"引擎就不支持事务\",{\"1\":{\"2565\":1,\"4927\":1}}],[\"引擎它是支持事务的\",{\"1\":{\"2564\":1,\"4926\":1}}],[\"引擎并不支持行级锁\",{\"1\":{\"2533\":1,\"4895\":1}}],[\"引擎表来说\",{\"1\":{\"2393\":1,\"4755\":1}}],[\"引擎支持全文索引\",{\"1\":{\"2389\":1,\"4751\":1}}],[\"引擎\",{\"1\":{\"2369\":1,\"2401\":1,\"4731\":1,\"4763\":1}}],[\"引擎中\",{\"1\":{\"2343\":1,\"2359\":1,\"2360\":1,\"4705\":1,\"4721\":1,\"4722\":1}}],[\"引擎都是使用\",{\"1\":{\"2342\":1,\"2358\":1,\"4704\":1,\"4720\":1}}],[\"引擎和\",{\"1\":{\"2342\":1,\"2358\":1,\"4704\":1,\"4720\":1}}],[\"引擎是支持行级锁的\",{\"1\":{\"2533\":1,\"4895\":1}}],[\"引擎是\",{\"1\":{\"2321\":1,\"4683\":1}}],[\"引入了\",{\"1\":{\"2268\":1,\"5350\":1}}],[\"引入了基于\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"引入依赖并编写好配置之后\",{\"1\":{\"939\":1,\"3956\":1}}],[\"引导大家对循环依赖有一个整体的认识\",{\"1\":{\"897\":1,\"3914\":1}}],[\"统计和http追踪\",{\"1\":{\"940\":1,\"3957\":1}}],[\"统计网站的访问量\",{\"1\":{\"933\":1,\"3950\":1}}],[\"统计在线人数和在线用户\",{\"1\":{\"933\":1,\"3950\":1}}],[\"服务不可用的情况\",{\"1\":{\"2807\":1,\"5169\":1}}],[\"服务对象\",{\"1\":{\"2140\":1}}],[\"服务端检查\",{\"1\":{\"3227\":1,\"5496\":1}}],[\"服务端会返回已经签名的\",{\"1\":{\"3225\":1,\"5494\":1}}],[\"服务端最大并发\",{\"1\":{\"2133\":1}}],[\"服务端通常固定在某个本地端口上监听\",{\"1\":{\"2129\":1}}],[\"服务端推送等技术\",{\"1\":{\"1979\":1,\"1994\":1,\"2035\":1,\"2050\":1,\"5270\":1}}],[\"服务监控\",{\"1\":{\"1844\":1,\"4433\":1}}],[\"服务降级\",{\"1\":{\"1841\":1,\"4430\":1}}],[\"服务隔离\",{\"1\":{\"1839\":1,\"1843\":1,\"4428\":1,\"4432\":1}}],[\"服务熔断\",{\"1\":{\"1827\":1,\"1839\":1,\"1842\":1,\"4416\":1,\"4428\":1,\"4431\":1}}],[\"服务保护\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"服务注册中心\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"服务拆分粒度更细\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"服务发现\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"服务部署\",{\"1\":{\"1816\":1,\"4405\":1}}],[\"服务划分\",{\"1\":{\"1815\":1,\"4404\":1}}],[\"服务与服务之间通过http协议或其他消息传递机制通信\",{\"1\":{\"1813\":1,\"4402\":1}}],[\"服务与服务之间完全独立\",{\"1\":{\"1808\":1,\"4397\":1}}],[\"服务与服务之间采用http网络通信协议来通信\",{\"1\":{\"1808\":1,\"4397\":1}}],[\"服务与服务之间没有任何耦合\",{\"1\":{\"1807\":1,\"4396\":1}}],[\"服务集中化管理\",{\"1\":{\"1803\":1,\"4392\":1}}],[\"服务之间通过http协议相互通信\",{\"1\":{\"1799\":1,\"4388\":1}}],[\"服务之间相互调用\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"服务器查询后将对应的\",{\"1\":{\"2303\":1,\"5385\":1}}],[\"服务器地址\",{\"1\":{\"2297\":1,\"5379\":1}}],[\"服务器了\",{\"1\":{\"2294\":1,\"5376\":1}}],[\"服务器就都可以找到并访问根域\",{\"1\":{\"2294\":1,\"5376\":1}}],[\"服务器中\",{\"1\":{\"2293\":1,\"5375\":1}}],[\"服务器信息保存在互联网中所有的\",{\"1\":{\"2293\":1,\"5375\":1}}],[\"服务器推送\",{\"1\":{\"2273\":1,\"5355\":1}}],[\"服务器处理请求并返回\",{\"1\":{\"2219\":1,\"2312\":1,\"5301\":1}}],[\"服务器出现大量\",{\"1\":{\"2085\":1,\"2086\":1}}],[\"服务器出现网络中断\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"服务器在负责进行消息广播\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"服务器的地址\",{\"1\":{\"2301\":1,\"5383\":1}}],[\"服务器的状态同步\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"服务器的数据状态保持一致\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"服务器完成了和\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"服务器完成了状态同步之后\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"服务器\",{\"1\":{\"1866\":2,\"2290\":1,\"2291\":1,\"2292\":1,\"2295\":3,\"2297\":1,\"2302\":2,\"4455\":2,\"5372\":1,\"5373\":1,\"5374\":1,\"5377\":3,\"5379\":1,\"5384\":2}}],[\"服务器端不断地从\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4561\":1}}],[\"服务器端只会从\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4560\":1}}],[\"服务器自动调用监听器对象中的方法\",{\"1\":{\"933\":1,\"3950\":1}}],[\"服务于java的collection框架\",{\"1\":{\"467\":1}}],[\"销毁\",{\"1\":{\"933\":1,\"3950\":1}}],[\"监控等一些防止雪崩的技术\",{\"1\":{\"1839\":1,\"4428\":1}}],[\"监控连接建立事件\",{\"1\":{\"1260\":1,\"1428\":1,\"1596\":1,\"1764\":1,\"4671\":1}}],[\"监控器\",{\"0\":{\"937\":1,\"3954\":1}}],[\"监听事件\",{\"1\":{\"1227\":1,\"1242\":1,\"1395\":1,\"1410\":1,\"1563\":1,\"1578\":1,\"1731\":1,\"1746\":1,\"4638\":1,\"4653\":1}}],[\"监听器也叫listener\",{\"1\":{\"933\":1,\"3950\":1}}],[\"监听器\",{\"0\":{\"932\":1,\"3949\":1}}],[\"监视器和监听器\",{\"0\":{\"931\":1,\"3948\":1}}],[\"嵌入式tomcat\",{\"1\":{\"929\":1,\"3946\":1}}],[\"工作基本流程\",{\"1\":{\"2750\":1,\"5112\":1}}],[\"工作基本流程是怎样的\",{\"0\":{\"2738\":1,\"5100\":1}}],[\"工作流程图如下\",{\"1\":{\"2749\":1,\"5111\":1}}],[\"工作在哪一层\",{\"0\":{\"2106\":1},\"1\":{\"2057\":1}}],[\"工程师修炼之道\",{\"1\":{\"2358\":1,\"4720\":1}}],[\"工程任务组开发的路由选择协议\",{\"1\":{\"2214\":1,\"2307\":1,\"5296\":1}}],[\"工具来实现\",{\"1\":{\"929\":1,\"3946\":1}}],[\"工厂设计模式\",{\"1\":{\"830\":1,\"3847\":1}}],[\"工厂类可以应对各种新增的类\",{\"1\":{\"327\":1,\"3715\":1}}],[\"工厂模式\",{\"0\":{\"3776\":1},\"1\":{\"327\":1,\"3715\":1}}],[\"例子\",{\"1\":{\"918\":1,\"3935\":1}}],[\"例如获取同步状态\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"例如自旋锁等\",{\"1\":{\"2823\":1,\"4077\":1}}],[\"例如学生成绩的排名榜\",{\"1\":{\"2718\":1,\"5080\":1}}],[\"例如系统配置\",{\"1\":{\"1960\":1,\"4066\":1}}],[\"例如分布式事务\",{\"1\":{\"1956\":1,\"4062\":1}}],[\"例如搭建和配置开发环境\",{\"1\":{\"1777\":1,\"4366\":1}}],[\"例如有互斥\",{\"1\":{\"1119\":1,\"1287\":1,\"1455\":1,\"1623\":1,\"4530\":1}}],[\"例如事务处理\",{\"1\":{\"806\":1,\"3823\":1}}],[\"例如\",{\"1\":{\"619\":1,\"858\":1,\"1214\":1,\"1249\":1,\"1382\":1,\"1417\":1,\"1550\":1,\"1585\":1,\"1718\":1,\"1753\":1,\"1823\":1,\"3263\":1,\"3309\":1,\"3812\":1,\"3875\":1,\"4412\":1,\"4625\":1,\"4660\":1,\"5532\":1}}],[\"例如java\",{\"1\":{\"300\":1,\"3688\":1}}],[\"级别的异常\",{\"1\":{\"917\":1,\"3934\":1}}],[\"项目中常用技术一\",{\"0\":{\"3324\":1}}],[\"项目中任何需要延迟队列的地方\",{\"1\":{\"3271\":1,\"5540\":1}}],[\"项目中的技术栈\",{\"1\":{\"3119\":1,\"5399\":1}}],[\"项目重难点\",{\"1\":{\"3192\":1,\"5461\":1}}],[\"项目类似于今日头条\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"项目背景\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"项目\",{\"0\":{\"3189\":1,\"5458\":1,\"5600\":1}}],[\"项目拷打环节\",{\"1\":{\"3146\":1,\"5426\":1}}],[\"项目启动后扫描顺序\",{\"1\":{\"911\":1,\"3928\":1}}],[\"项目主页\",{\"0\":{\"153\":1}}],[\"项目主页配置\",{\"1\":{\"152\":1,\"156\":1,\"3551\":1}}],[\"步\",{\"1\":{\"901\":1,\"903\":1,\"905\":1,\"2739\":1,\"3918\":1,\"3920\":1,\"3922\":1,\"5101\":1}}],[\"步描述\",{\"1\":{\"816\":1,\"3833\":1}}],[\"回到\",{\"1\":{\"2880\":1,\"4134\":1}}],[\"回表\",{\"1\":{\"2407\":1,\"2409\":1,\"4769\":1,\"4771\":1}}],[\"回顾同一子网内的\",{\"1\":{\"2250\":1,\"5332\":1}}],[\"回顾\",{\"0\":{\"1976\":1,\"1991\":1,\"2006\":1,\"2019\":1,\"2032\":1,\"2047\":1,\"5267\":1,\"5290\":1}}],[\"回顾本文基本以实际操作的例子开始\",{\"1\":{\"897\":1,\"3914\":1}}],[\"回滚指针\",{\"1\":{\"2619\":1,\"4981\":1}}],[\"回滚日志\",{\"1\":{\"2573\":1,\"4935\":1}}],[\"回滚操作或者重新发送消息\",{\"1\":{\"1939\":1,\"4045\":1}}],[\"回滚规则\",{\"1\":{\"847\":1,\"3864\":1}}],[\"总共\",{\"1\":{\"2568\":3,\"4930\":3}}],[\"总是需要知道下一跳\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"总是能路由到固定的分区\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"总体来说分为以下几个过程\",{\"1\":{\"2215\":1,\"2308\":1,\"5297\":1}}],[\"总体来看\",{\"1\":{\"1190\":1,\"1358\":1,\"1526\":1,\"1694\":1,\"4601\":1}}],[\"总不能数据只在\",{\"1\":{\"1877\":1,\"4466\":1}}],[\"总结了下面的几点\",{\"1\":{\"5277\":1}}],[\"总结的来说\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"总结来说就是\",{\"1\":{\"2784\":1,\"5146\":1}}],[\"总结来说\",{\"1\":{\"2247\":1,\"5329\":1}}],[\"总结一句话\",{\"1\":{\"2110\":1}}],[\"总结一下\",{\"1\":{\"966\":1,\"3983\":1}}],[\"总结\",{\"0\":{\"993\":1,\"2899\":1,\"2933\":1,\"3013\":1,\"4010\":1,\"4153\":1,\"4187\":1,\"4267\":1},\"1\":{\"896\":1,\"2172\":1,\"2876\":1,\"3913\":1,\"4130\":1}}],[\"总之\",{\"1\":{\"434\":1,\"1958\":1,\"3759\":1,\"4064\":1}}],[\"总之它在你面前就没有隐私了\",{\"1\":{\"310\":1,\"3698\":1}}],[\"表明锁被释放\",{\"1\":{\"3007\":1,\"4261\":1}}],[\"表明有事务想在某个区间插入新记录\",{\"1\":{\"2559\":1,\"4921\":1}}],[\"表必须有个主键\",{\"0\":{\"2658\":1,\"5020\":1}}],[\"表里的主键通常都会设置成自增的\",{\"1\":{\"2515\":1,\"4877\":1}}],[\"表级别的独占锁\",{\"1\":{\"2476\":1,\"4838\":1}}],[\"表级别的共享锁\",{\"1\":{\"2476\":1,\"4838\":1}}],[\"表级锁\",{\"0\":{\"2467\":1,\"4829\":1}}],[\"表级锁和行锁三类\",{\"1\":{\"2446\":1,\"4808\":1}}],[\"表锁和行锁是满足读读共享\",{\"1\":{\"2510\":1,\"4872\":1}}],[\"表锁除了会限制别的线程的读写外\",{\"1\":{\"2477\":1,\"4839\":1}}],[\"表锁\",{\"0\":{\"2473\":1,\"4835\":1},\"1\":{\"2469\":1,\"4831\":1}}],[\"表数据文件本身就是主索引\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"表时\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"表中有一个范围\",{\"1\":{\"2549\":1,\"4911\":1}}],[\"表中只有一个\",{\"1\":{\"2371\":1,\"4733\":1}}],[\"表中\",{\"1\":{\"2246\":1,\"5328\":1}}],[\"表中构造一条主机\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"表中并无主机\",{\"1\":{\"2240\":1,\"5322\":1}}],[\"表记录了某些其他网络设备的\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"表\",{\"1\":{\"2231\":1,\"2232\":1,\"2240\":1,\"2249\":2,\"2251\":1,\"2257\":1,\"2347\":1,\"4709\":1,\"5313\":1,\"5314\":1,\"5322\":1,\"5331\":2,\"5333\":1,\"5339\":1}}],[\"表达式\",{\"1\":{\"893\":1,\"3910\":1}}],[\"表示审核成功存储到数据库\",{\"1\":{\"3150\":1,\"5430\":1}}],[\"表示成功\",{\"1\":{\"2931\":1,\"4185\":1}}],[\"表示成2进制就是1000\",{\"1\":{\"735\":1}}],[\"表示最后一次插入或更新该行的事务\",{\"1\":{\"2618\":1,\"4980\":1}}],[\"表示今后不会再有数据发送\",{\"1\":{\"2105\":1}}],[\"表示希望建立连接\",{\"1\":{\"2104\":1}}],[\"表示\",{\"1\":{\"2103\":1,\"3210\":1,\"5479\":1}}],[\"表示hashmap满的程度\",{\"1\":{\"701\":1}}],[\"表示运行应用程序中出现了严重的错误\",{\"1\":{\"241\":1,\"3637\":1}}],[\"依次发生如下事件\",{\"1\":{\"2239\":1,\"5321\":1}}],[\"依赖于有序的数据\",{\"1\":{\"2398\":1,\"2406\":1,\"4760\":1,\"4768\":1}}],[\"依赖的可能是别的不提供自身报文长度或首部长度的网络层协议\",{\"1\":{\"2170\":1}}],[\"依赖隔离\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"依赖有源码例子\",{\"1\":{\"895\":1,\"3912\":1}}],[\"依赖了\",{\"1\":{\"893\":1,\"3910\":1}}],[\"依然是\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"依然不完美\",{\"1\":{\"393\":1}}],[\"依然有我们不需要的方法啊\",{\"1\":{\"392\":1}}],[\"继续进行监听\",{\"1\":{\"1261\":1,\"1429\":1,\"1597\":1,\"1765\":1,\"4672\":1}}],[\"继续创建\",{\"1\":{\"890\":1,\"3907\":1}}],[\"继承\",{\"1\":{\"2830\":1,\"2993\":1,\"4084\":1,\"4247\":1}}],[\"继承自spring\",{\"1\":{\"950\":1,\"3967\":1}}],[\"继承关系把父类的所有方法都拿过来的问题\",{\"1\":{\"382\":1}}],[\"继承关系描述的是\",{\"1\":{\"353\":1}}],[\"继承使得子类继承了父类的所有公有方法\",{\"1\":{\"346\":1}}],[\"继承了\",{\"1\":{\"344\":1,\"347\":1,\"384\":1}}],[\"整体的吞吐效率会高点\",{\"1\":{\"2991\":1,\"4245\":1}}],[\"整体来说\",{\"1\":{\"364\":1}}],[\"整个数据库就处于只读状态了\",{\"1\":{\"2451\":1,\"4813\":1}}],[\"整个过程按照时间顺序发生的事件如下\",{\"1\":{\"2250\":1,\"5332\":1}}],[\"整个网络就分成了几块区域\",{\"1\":{\"1913\":1,\"4502\":1}}],[\"整个服务器就从\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"整个进程是无法处理其他连接的事件的\",{\"1\":{\"1234\":1,\"1402\":1,\"1570\":1,\"1738\":1,\"4645\":1}}],[\"整个解决循环依赖的核心内容\",{\"1\":{\"879\":1,\"3896\":1}}],[\"往往更利于对问题有更深入的了解和研究\",{\"1\":{\"870\":1,\"3887\":1}}],[\"幻读\",{\"0\":{\"2585\":1,\"4947\":1},\"1\":{\"2586\":1,\"4948\":1}}],[\"幻读或不可重复读\",{\"1\":{\"853\":1,\"3870\":1}}],[\"幻灯片页\",{\"0\":{\"157\":1}}],[\"幻灯片\",{\"0\":{\"111\":1,\"3510\":1}}],[\"允许创建的线程数量为\",{\"1\":{\"3091\":1,\"4345\":1}}],[\"允许多个线程持有锁\",{\"1\":{\"2910\":1,\"4164\":1}}],[\"允许多个线程同时读取共享资源\",{\"1\":{\"1115\":1,\"1283\":1,\"1451\":1,\"1619\":1,\"4526\":1}}],[\"允许在第一次连接时发送数据\",{\"1\":{\"2276\":1,\"5358\":1}}],[\"允许在同一\",{\"1\":{\"2268\":1,\"5350\":1}}],[\"允许读取并发事务已经提交的数据\",{\"1\":{\"854\":1,\"3871\":1}}],[\"允许读取尚未提交的数据变更\",{\"1\":{\"853\":1,\"3870\":1}}],[\"允许我们在运行时对字节码进行修改和动态生成\",{\"1\":{\"619\":1,\"3812\":1}}],[\"超出阈值时\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"超过该时间\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"超过半数\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"超过临界值\",{\"1\":{\"699\":1}}],[\"超时\",{\"1\":{\"847\":1,\"2828\":1,\"3864\":1,\"4082\":1}}],[\"平衡\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"平衡的二叉树\",{\"1\":{\"419\":1,\"3744\":1}}],[\"平台\",{\"1\":{\"846\":1,\"3863\":1}}],[\"谈谈你对\",{\"0\":{\"838\":1,\"3855\":1}}],[\"适合使用自旋锁\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"适于互联网时代\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"适配器模式\",{\"1\":{\"836\":1,\"3853\":1}}],[\"适⽤于⼯⼚类负责创建对象较少的情况\",{\"1\":{\"586\":1,\"3779\":1}}],[\"事实上\",{\"1\":{\"1192\":1,\"1252\":1,\"1360\":1,\"1420\":1,\"1528\":1,\"1588\":1,\"1696\":1,\"1756\":1,\"4603\":1,\"4663\":1}}],[\"事件类型包含连接事件\",{\"1\":{\"1197\":1,\"1365\":1,\"1533\":1,\"1701\":1,\"4608\":1}}],[\"事件发生时只会通知一次\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"事件\",{\"1\":{\"1118\":1,\"1286\":1,\"1454\":1,\"1622\":1,\"4529\":1}}],[\"事件驱动模型就是观察者模式很经典的一个应用\",{\"1\":{\"835\":1,\"3852\":1}}],[\"事务执行过程中看到的数据\",{\"1\":{\"2608\":1,\"4970\":1}}],[\"事务\",{\"1\":{\"2579\":1,\"2584\":1,\"2588\":1,\"2589\":1,\"2622\":1,\"4941\":1,\"4946\":1,\"4950\":1,\"4951\":1,\"4984\":1}}],[\"事务处理结束后\",{\"1\":{\"2570\":1,\"4932\":1}}],[\"事务看起来感觉简单\",{\"1\":{\"2566\":1,\"4928\":1}}],[\"事务的能力\",{\"1\":{\"2330\":1,\"4692\":1}}],[\"事务的原子性确保动作要么全部完成\",{\"1\":{\"841\":1,\"3858\":1}}],[\"事务传播行为是为了解决业务层方法之间互相调用的事务问题\",{\"1\":{\"858\":1,\"3875\":1}}],[\"事务运行状态\",{\"1\":{\"848\":1,\"3865\":1}}],[\"事务隔离级别\",{\"1\":{\"847\":1,\"3864\":1}}],[\"事务定义信息\",{\"1\":{\"847\":1,\"3864\":1}}],[\"事务管理器\",{\"1\":{\"846\":1,\"3863\":1}}],[\"事务管理接口\",{\"1\":{\"845\":1,\"3862\":1}}],[\"事务是由\",{\"1\":{\"2564\":1,\"4926\":1}}],[\"事务是最小的执行单位\",{\"1\":{\"841\":1,\"3858\":1}}],[\"事务是逻辑上的一组操作\",{\"1\":{\"839\":1,\"3856\":1}}],[\"事务特性\",{\"1\":{\"840\":1,\"3857\":1}}],[\"事情可能就不一样了\",{\"1\":{\"359\":1}}],[\"执行一串命令\",{\"1\":{\"3319\":1}}],[\"执行本次操作\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"执行结束后在同步到主内存中去\",{\"1\":{\"2941\":1,\"4195\":1}}],[\"执行完同步代码块后\",{\"1\":{\"2841\":1,\"4095\":1}}],[\"执行完成后\",{\"1\":{\"825\":1,\"3842\":1}}],[\"执行删除过期\",{\"1\":{\"2756\":1,\"5118\":1}}],[\"执行后\",{\"1\":{\"2451\":1,\"4813\":1}}],[\"执行业务逻辑成功\",{\"1\":{\"1940\":1,\"4046\":1}}],[\"执行最终状态\",{\"1\":{\"1939\":1,\"4045\":1}}],[\"执行程序代码\",{\"1\":{\"1106\":1,\"1274\":1,\"1442\":1,\"1610\":1,\"4517\":1}}],[\"执行\",{\"1\":{\"982\":1,\"996\":1,\"1784\":1,\"3999\":1,\"4013\":1,\"4373\":1}}],[\"执行打包操作的配置\",{\"1\":{\"951\":1,\"3968\":1}}],[\"执行事务前后\",{\"1\":{\"842\":1,\"3859\":1}}],[\"执行引擎\",{\"1\":{\"180\":1,\"3574\":1}}],[\"格式等\",{\"1\":{\"824\":1,\"3841\":1}}],[\"长度\",{\"1\":{\"824\":1,\"3841\":1}}],[\"开头的\",{\"1\":{\"2442\":1,\"4804\":1}}],[\"开放最短路径优先协议\",{\"1\":{\"2214\":1,\"2307\":1,\"5296\":1}}],[\"开销较小\",{\"1\":{\"2151\":1}}],[\"开启\",{\"1\":{\"2735\":1,\"5097\":1}}],[\"开启kafka本身存在的幂等性\",{\"1\":{\"1061\":1,\"5237\":1}}],[\"开启二级缓存后\",{\"1\":{\"989\":1,\"4006\":1}}],[\"开发了基于\",{\"1\":{\"5275\":1}}],[\"开发技术\",{\"1\":{\"3190\":1,\"5459\":1}}],[\"开发手册\",{\"1\":{\"2334\":1,\"3085\":1,\"3088\":1,\"4339\":1,\"4342\":1,\"4696\":1}}],[\"开发者要选出最佳的通信机制\",{\"1\":{\"1813\":1,\"4402\":1}}],[\"开发者可以选择合适的数据结构来定义\",{\"1\":{\"380\":1}}],[\"开发人员\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"开发人员可以重新加载\",{\"1\":{\"929\":1,\"3946\":1}}],[\"开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器\",{\"1\":{\"929\":1,\"3946\":1}}],[\"开始审核文章\",{\"1\":{\"3252\":1,\"5521\":1}}],[\"开始技术面试了\",{\"1\":{\"3160\":1,\"5440\":1}}],[\"开始提供了atomicreference\",{\"1\":{\"2898\":1,\"4152\":1}}],[\"开始提供了atomicstampedreference类\",{\"1\":{\"2891\":1,\"4145\":1}}],[\"开始填充时发现依赖于\",{\"1\":{\"879\":1,\"3896\":1}}],[\"开始执行handler\",{\"1\":{\"820\":1,\"3837\":1}}],[\"入参\",{\"1\":{\"820\":1,\"3837\":1}}],[\"入队和出队\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"入队\",{\"1\":{\"494\":1}}],[\"填充\",{\"1\":{\"820\":1,\"3837\":1}}],[\"附注\",{\"1\":{\"819\":1,\"3836\":1}}],[\"获得该\",{\"1\":{\"818\":1,\"3835\":1}}],[\"获取class对象\",{\"0\":{\"3691\":1}}],[\"获取当前请求的线程\",{\"1\":{\"3028\":1,\"4282\":1}}],[\"获取后将锁计数器设为\",{\"1\":{\"3006\":1,\"4260\":1}}],[\"获取不到\",{\"1\":{\"2990\":1,\"4244\":1}}],[\"获取锁\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"获取锁的操作\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"获取字符串长度的时间复杂度是\",{\"1\":{\"2682\":1,\"5044\":1}}],[\"获取到当前线程对象后\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"获取到主机\",{\"1\":{\"2258\":1,\"5340\":1}}],[\"获取到目标接口的\",{\"1\":{\"2254\":1,\"5336\":1}}],[\"获取连接\",{\"1\":{\"1228\":1,\"1243\":1,\"1260\":1,\"1396\":1,\"1411\":1,\"1428\":1,\"1564\":1,\"1579\":1,\"1596\":1,\"1732\":1,\"1747\":1,\"1764\":1,\"4639\":1,\"4654\":1,\"4671\":1}}],[\"获取一个自增的计数\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"获取需要自动装配的所有配置类\",{\"1\":{\"905\":1,\"3922\":1}}],[\"获取所有方法\",{\"1\":{\"323\":1,\"3711\":1}}],[\"获取类的所有信息\",{\"0\":{\"3707\":1}}],[\"获取类的构造器\",{\"1\":{\"324\":1,\"3712\":1}}],[\"获取类中被public修饰的所有方法\",{\"1\":{\"323\":1,\"3711\":1}}],[\"获取类中的方法\",{\"1\":{\"322\":1,\"3710\":1}}],[\"获取类中的变量\",{\"1\":{\"320\":1,\"3708\":1}}],[\"获取类中所有构造器\",{\"1\":{\"325\":1,\"3713\":1}}],[\"获取类中所有被public修饰的构造器\",{\"1\":{\"325\":1,\"3713\":1}}],[\"获取类中所有被public修饰的所有变量\",{\"1\":{\"321\":1,\"3709\":1}}],[\"获取类中所有的变量\",{\"1\":{\"321\":1,\"3709\":1}}],[\"获取类信息\",{\"1\":{\"310\":1,\"3698\":1}}],[\"获取属性\",{\"1\":{\"310\":1,\"3698\":1}}],[\"得到\",{\"1\":{\"3375\":1,\"3381\":1}}],[\"得到值之后判断位数组中的每个元素是否都为\",{\"1\":{\"2791\":1,\"5153\":1}}],[\"得到哈希值\",{\"1\":{\"2787\":1,\"5149\":1}}],[\"得到请求资源标识符\",{\"1\":{\"818\":1,\"3835\":1}}],[\"得到的结果一定是个正数\",{\"1\":{\"757\":1}}],[\"得到的值为\",{\"1\":{\"750\":1}}],[\"捕获\",{\"1\":{\"817\":1,\"3834\":1}}],[\"渲染数据\",{\"1\":{\"814\":1,\"3831\":1}}],[\"视频播放排名\",{\"1\":{\"2718\":1,\"5080\":1}}],[\"视频\",{\"1\":{\"2164\":1,\"2681\":1,\"5043\":1}}],[\"视图解析器进行解析\",{\"1\":{\"814\":1,\"3831\":1}}],[\"视情况而定\",{\"1\":{\"419\":1,\"3744\":1}}],[\"处理完后\",{\"1\":{\"1247\":1,\"1415\":1,\"1583\":1,\"1751\":1,\"4658\":1}}],[\"处理资源池可以是单个进程\",{\"1\":{\"1201\":1,\"1369\":1,\"1537\":1,\"1705\":1,\"4612\":1}}],[\"处理资源池负责处理事件\",{\"1\":{\"1198\":1,\"1366\":1,\"1534\":1,\"1702\":1,\"4609\":1}}],[\"处理可控异常\",{\"1\":{\"920\":1,\"3937\":1}}],[\"处理不可控异常\",{\"1\":{\"920\":1,\"3937\":1}}],[\"处理\",{\"1\":{\"917\":1,\"2175\":1,\"2268\":1,\"3934\":1,\"5350\":1}}],[\"处理全局异常\",{\"1\":{\"916\":1,\"3933\":1}}],[\"处理器返回一个模型视图\",{\"1\":{\"814\":1,\"3831\":1}}],[\"处理异常的小例子\",{\"1\":{\"273\":1,\"3661\":1}}],[\"客户端在注册或登录的时候\",{\"1\":{\"3339\":1,\"3345\":1}}],[\"客户端b执行代码完成\",{\"1\":{\"3296\":1,\"5565\":1}}],[\"客户端b在等待一段时间后再去请求设置key的值\",{\"1\":{\"3295\":1,\"5564\":1}}],[\"客户端b也去请求服务器设置key的值\",{\"1\":{\"3293\":1,\"5562\":1}}],[\"客户端a执行代码完成\",{\"1\":{\"3294\":1,\"5563\":1}}],[\"客户端a请求服务器设置key的值\",{\"1\":{\"3292\":1,\"5561\":1}}],[\"客户端和目标建立连接\",{\"1\":{\"2304\":1,\"5386\":1}}],[\"客户端和服务器端都无法验证对方的身份\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"客户端首先会发出一个\",{\"1\":{\"2297\":1,\"5379\":1}}],[\"客户端只要能够找到任意一台\",{\"1\":{\"2295\":1,\"5377\":1}}],[\"客户端的端口数最多为\",{\"1\":{\"2132\":1}}],[\"客户端的\",{\"1\":{\"2132\":1}}],[\"客户端\",{\"1\":{\"2130\":1}}],[\"客户端调用\",{\"1\":{\"2093\":1}}],[\"客户端容错保护\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"客户端负载均衡\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"客户端发送请求\",{\"1\":{\"814\":1,\"3831\":1}}],[\"客户端不需要关注创建逻辑\",{\"1\":{\"585\":1,\"3778\":1}}],[\"容易计算\",{\"1\":{\"3332\":1}}],[\"容易成为性能的瓶颈的地方\",{\"1\":{\"1254\":1,\"1422\":1,\"1590\":1,\"1758\":1,\"4665\":1}}],[\"容错\",{\"1\":{\"1825\":1,\"4414\":1}}],[\"容器运行资源或执行用户指令等操作时\",{\"1\":{\"1787\":1,\"4376\":1}}],[\"容器还可以进行版本管理\",{\"1\":{\"1778\":1,\"4367\":1}}],[\"容器中的\",{\"1\":{\"826\":1,\"3843\":1}}],[\"容器\",{\"1\":{\"811\":1,\"3828\":1}}],[\"容量为\",{\"1\":{\"3065\":1,\"4319\":1}}],[\"容量\",{\"1\":{\"682\":1}}],[\"控制分布式系统有序的去对共享资源进行操作\",{\"1\":{\"3288\":1,\"5557\":1}}],[\"控制位\",{\"1\":{\"2101\":1}}],[\"控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里\",{\"1\":{\"1185\":1,\"1353\":1,\"1521\":1,\"1689\":1,\"4596\":1}}],[\"控制器增强类\",{\"1\":{\"920\":1,\"3937\":1}}],[\"控制权交给外部环境\",{\"1\":{\"811\":1,\"3828\":1}}],[\"控制\",{\"1\":{\"810\":1,\"3827\":1}}],[\"交出给其它线程使用\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"交互\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"交互演示\",{\"0\":{\"107\":1,\"109\":1,\"3506\":1,\"3508\":1}}],[\"交由\",{\"1\":{\"808\":1,\"2708\":1,\"2716\":1,\"3825\":1,\"5070\":1,\"5078\":1}}],[\"去年\",{\"1\":{\"3182\":1}}],[\"去创建\",{\"1\":{\"3088\":1,\"4342\":1}}],[\"去创建代理对象\",{\"1\":{\"807\":1,\"3824\":1}}],[\"去resources下找配置文件\",{\"1\":{\"912\":1,\"3929\":1}}],[\"去resources下找cofnig文件夹下找配置文件\",{\"1\":{\"912\":1,\"3929\":1}}],[\"去进行代理了\",{\"1\":{\"807\":1,\"3824\":1}}],[\"去执行\",{\"1\":{\"182\":1,\"3576\":1}}],[\"框架的工具类\",{\"1\":{\"3078\":1,\"4332\":1}}],[\"框架来管理\",{\"1\":{\"808\":1,\"3825\":1}}],[\"框架\",{\"0\":{\"803\":1,\"3820\":1},\"1\":{\"811\":1,\"3828\":1}}],[\"框架应该是两个不得不提的\",{\"1\":{\"606\":1,\"3799\":1}}],[\"访问量达到了44w+\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"访问标志来辨别一个方法是否声明为同步方法\",{\"1\":{\"3011\":1,\"4265\":1}}],[\"访问\",{\"1\":{\"1958\":1,\"4064\":1}}],[\"访问http\",{\"1\":{\"939\":1,\"3956\":1}}],[\"访问顺序经常用于实现lru缓存\",{\"1\":{\"802\":1}}],[\"访问者模式\",{\"1\":{\"577\":1,\"3770\":1}}],[\"考虑treemap\",{\"1\":{\"800\":1}}],[\"邻近键等\",{\"1\":{\"797\":1}}],[\"推荐\",{\"1\":{\"3040\":1,\"4294\":1}}],[\"推荐奇数个\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"推荐使用concurrenthashmap\",{\"1\":{\"669\":1}}],[\"推荐使用hashmap\",{\"1\":{\"669\":1}}],[\"推敲\",{\"1\":{\"793\":1}}],[\"质量来考虑的\",{\"1\":{\"782\":1}}],[\"功效\",{\"1\":{\"782\":1}}],[\"功能有路由分发和过滤\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"功能齐全\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"功能和\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"功能的实现\",{\"1\":{\"831\":1,\"3848\":1}}],[\"功能详情\",{\"1\":{\"165\":1,\"173\":1,\"3559\":1,\"3567\":1}}],[\"功能\",{\"0\":{\"158\":1,\"166\":1,\"3552\":1,\"3560\":1},\"1\":{\"160\":1,\"168\":1,\"1857\":1,\"3554\":1,\"3562\":1,\"4446\":1}}],[\"功能亮点\",{\"0\":{\"142\":1,\"3541\":1}}],[\"降低资源消耗\",{\"1\":{\"3036\":1,\"4290\":1}}],[\"降低开发成本\",{\"1\":{\"1808\":1,\"4397\":1}}],[\"降低模块间的耦合度\",{\"1\":{\"806\":1,\"3823\":1}}],[\"降低到o\",{\"1\":{\"778\":1}}],[\"降低哈希冲突的概率\",{\"1\":{\"749\":1}}],[\"至少目前来看\",{\"1\":{\"5278\":1}}],[\"至少我目前没有办法证明哪个更优\",{\"1\":{\"776\":1}}],[\"至于获取资源失败入队\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"至于为啥不和hashmap采用同样的算法进行扰动\",{\"1\":{\"776\":1}}],[\"至此也就解决了\",{\"1\":{\"895\":1,\"3912\":1}}],[\"至此\",{\"1\":{\"743\":1,\"768\":1,\"792\":1}}],[\"避免过度消耗\",{\"1\":{\"2894\":1,\"4148\":1}}],[\"避免同时处理大量的请求\",{\"1\":{\"2809\":1,\"5171\":1}}],[\"避免单机出现问题整个缓存服务都没办法使用\",{\"1\":{\"2808\":1,\"5170\":1}}],[\"避免使用子查询\",{\"0\":{\"2663\":1,\"5025\":1}}],[\"避免更多的关联操作\",{\"1\":{\"2641\":1,\"5003\":1}}],[\"避免索引失效\",{\"1\":{\"2437\":1,\"4799\":1}}],[\"避免发生冲突\",{\"1\":{\"776\":1}}],[\"避免出现循环链表的情况\",{\"1\":{\"630\":1,\"3722\":1}}],[\"又扯到hashmap底层用到了红黑树\",{\"1\":{\"3141\":1,\"5421\":1}}],[\"又有新的任务提交\",{\"1\":{\"3082\":1,\"4336\":1}}],[\"又能阻止其他事务将新纪录插入到被保护记录前面的间隙中\",{\"1\":{\"2553\":1,\"4915\":1}}],[\"又不会出现数据一致性问题\",{\"1\":{\"2531\":1,\"4893\":1}}],[\"又称为辅助索引\",{\"1\":{\"2383\":1,\"4745\":1}}],[\"又重新恢复了\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"又对hash算法做了一些改进\",{\"1\":{\"773\":1}}],[\"又是hashmap更胜一筹\",{\"1\":{\"772\":1}}],[\"似乎更高明些\",{\"1\":{\"771\":1}}],[\"zhihu\",{\"1\":{\"2904\":1,\"4158\":1}}],[\"zhizhengguan\",{\"1\":{\"2817\":1,\"5179\":1}}],[\"zhuanlan\",{\"1\":{\"2904\":1,\"4158\":1}}],[\"zhengzhaoyang122\",{\"1\":{\"2833\":1,\"4087\":1}}],[\"zhaox\",{\"1\":{\"767\":1}}],[\"ziplist\",{\"1\":{\"2691\":2,\"2706\":2,\"5053\":2,\"5068\":2}}],[\"zset数据类型的去重有序\",{\"1\":{\"3263\":1,\"5532\":1}}],[\"zset\",{\"0\":{\"2711\":1,\"5073\":1},\"1\":{\"2674\":1,\"2713\":1,\"2714\":1,\"2715\":1,\"5036\":1,\"5075\":1,\"5076\":1,\"5077\":1}}],[\"zrank\",{\"1\":{\"1943\":1,\"4049\":1}}],[\"zadd\",{\"1\":{\"1943\":1,\"4049\":1}}],[\"zab\",{\"0\":{\"1862\":1,\"1864\":1,\"1870\":1,\"4451\":1,\"4453\":1,\"4459\":1},\"1\":{\"1863\":2,\"1865\":1,\"1866\":2,\"1867\":1,\"1869\":1,\"1871\":2,\"1875\":1,\"1877\":1,\"1880\":1,\"1883\":1,\"1884\":1,\"1892\":1,\"4452\":2,\"4454\":1,\"4455\":2,\"4456\":1,\"4458\":1,\"4460\":2,\"4464\":1,\"4466\":1,\"4469\":1,\"4472\":1,\"4473\":1,\"4481\":1}}],[\"zab算法\",{\"0\":{\"1861\":1,\"4450\":1}}],[\"zxid\",{\"1\":{\"1880\":1,\"1881\":1,\"1885\":2,\"1886\":2,\"1889\":1,\"1890\":1,\"1900\":2,\"4469\":1,\"4470\":1,\"4474\":2,\"4475\":2,\"4478\":1,\"4479\":1,\"4489\":2}}],[\"zkserver\",{\"1\":{\"1875\":1,\"1879\":1,\"4464\":1,\"4468\":1}}],[\"zookeeper\",{\"0\":{\"1853\":1,\"1854\":1,\"1868\":1,\"4442\":1,\"4443\":1,\"4457\":1},\"1\":{\"1856\":1,\"1857\":2,\"1858\":1,\"1859\":1,\"1860\":2,\"1863\":4,\"1869\":2,\"1884\":1,\"1891\":2,\"1918\":1,\"3190\":1,\"4445\":1,\"4446\":2,\"4447\":1,\"4448\":1,\"4449\":2,\"4452\":4,\"4458\":2,\"4473\":1,\"4480\":2,\"4507\":1,\"5459\":1}}],[\"zuul\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"zero\",{\"1\":{\"760\":1,\"1188\":1,\"1356\":1,\"1524\":1,\"1692\":1,\"4599\":1}}],[\"暂时停止运行\",{\"1\":{\"1107\":1,\"1275\":1,\"1443\":1,\"1611\":1,\"4518\":1}}],[\"暂时只是做到这个份儿上\",{\"1\":{\"394\":1}}],[\"暂不详细介绍\",{\"1\":{\"767\":1}}],[\"奇数作为容量的大小\",{\"1\":{\"767\":1}}],[\"奇数\",{\"1\":{\"766\":1}}],[\"取出\",{\"1\":{\"3028\":1,\"4282\":1}}],[\"取得代之的确实是\",{\"1\":{\"3011\":1,\"3015\":1,\"4265\":1,\"4269\":1}}],[\"取消点赞的操作就是删除redis中的数据即可\",{\"1\":{\"1930\":1,\"4036\":1}}],[\"取而代之的是这段代码\",{\"1\":{\"761\":1}}],[\"取了一下其hashcode\",{\"1\":{\"761\":1}}],[\"~\",{\"1\":{\"757\":1}}],[\"计数器\",{\"1\":{\"2969\":2,\"4223\":2}}],[\"计数比如用户单位时间的请求数\",{\"1\":{\"2686\":1,\"5048\":1}}],[\"计算量小\",{\"1\":{\"3397\":1}}],[\"计算后要修改后的新值b\",{\"1\":{\"2863\":1,\"4117\":1}}],[\"计算机网络基础\",{\"0\":{\"2305\":1}}],[\"计算机网络\",{\"0\":{\"2211\":1,\"5293\":1,\"5598\":1}}],[\"计算第i个消费者\",{\"1\":{\"1033\":2,\"5209\":2}}],[\"计算平均分配后多出的分区数\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"计算平均每个消费者分配的分区数\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"计算结果都一样\",{\"1\":{\"750\":1}}],[\"计划\",{\"1\":{\"76\":1,\"77\":1,\"3475\":1,\"3476\":1}}],[\"呢\",{\"0\":{\"2184\":1},\"1\":{\"731\":1,\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"1877\":1,\"1888\":1,\"2069\":1,\"2349\":1,\"4466\":1,\"4477\":1,\"4545\":1,\"4711\":1}}],[\"^\",{\"1\":{\"729\":3,\"748\":3,\"760\":1,\"775\":2,\"781\":1,\"782\":1,\"789\":1}}],[\"^=\",{\"1\":{\"729\":2,\"748\":2,\"775\":3}}],[\"输出的消息摘要又称为哈希值\",{\"1\":{\"3327\":1}}],[\"输出应该是个int类型的数组下标\",{\"1\":{\"723\":1}}],[\"输出结果\",{\"1\":{\"705\":1}}],[\"输出结果为\",{\"1\":{\"687\":1}}],[\"keepalivetime才会被回收销毁\",{\"1\":{\"3049\":1,\"4303\":1}}],[\"keepalivetime\",{\"1\":{\"3043\":7,\"3049\":1,\"3050\":1,\"4297\":7,\"4303\":1,\"4304\":1}}],[\"keep\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"keyset\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"key不为空时\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"key为空时\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"keybytes\",{\"1\":{\"1024\":4,\"5200\":4}}],[\"key\",{\"0\":{\"2551\":1,\"4913\":1},\"1\":{\"781\":3,\"785\":1,\"982\":1,\"1024\":1,\"1943\":2,\"2330\":1,\"2348\":1,\"2349\":2,\"2355\":3,\"2359\":1,\"2360\":2,\"2363\":1,\"2386\":1,\"2542\":1,\"2552\":1,\"2553\":1,\"2554\":3,\"2555\":2,\"2558\":1,\"2609\":3,\"2687\":1,\"2710\":1,\"2753\":2,\"2755\":2,\"2756\":2,\"2758\":3,\"2766\":1,\"2771\":1,\"2776\":1,\"2779\":1,\"2780\":6,\"2782\":1,\"2794\":1,\"2800\":1,\"2801\":1,\"3030\":1,\"3032\":1,\"3290\":2,\"3291\":3,\"3999\":1,\"4049\":2,\"4284\":1,\"4286\":1,\"4692\":1,\"4710\":1,\"4711\":2,\"4717\":3,\"4721\":1,\"4722\":2,\"4725\":1,\"4748\":1,\"4904\":1,\"4914\":1,\"4915\":1,\"4916\":3,\"4917\":2,\"4920\":1,\"4971\":3,\"5049\":1,\"5072\":1,\"5115\":2,\"5117\":2,\"5118\":2,\"5120\":3,\"5128\":1,\"5133\":1,\"5138\":1,\"5141\":1,\"5142\":6,\"5144\":1,\"5156\":1,\"5162\":1,\"5163\":1,\"5200\":1,\"5559\":2,\"5560\":3}}],[\"key的值为\",{\"1\":{\"750\":1}}],[\"kill\",{\"1\":{\"2500\":1,\"4862\":1}}],[\"kraft\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"kubernetes\",{\"1\":{\"1821\":1,\"4410\":1}}],[\"kafka容灾\",{\"1\":{\"1954\":1,\"4060\":1}}],[\"kafka有个offset的概念\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"kafka如何保证消息不被重复消费\",{\"0\":{\"1057\":1,\"5233\":1}}],[\"kafka默认采用rangeassignor的分配算法\",{\"1\":{\"1028\":1,\"5204\":1}}],[\"kafka提供了3种消费者分区分配策略\",{\"1\":{\"1027\":1,\"5203\":1}}],[\"kafka权威指南\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"kafka\",{\"0\":{\"1004\":1,\"5180\":1,\"5578\":1,\"5597\":1},\"1\":{\"1006\":1,\"1009\":1,\"1013\":3,\"1192\":2,\"1193\":1,\"1360\":2,\"1361\":1,\"1528\":2,\"1529\":1,\"1696\":2,\"1697\":1,\"1860\":4,\"3190\":1,\"3210\":1,\"4449\":4,\"4603\":2,\"4604\":1,\"5182\":1,\"5185\":1,\"5189\":3,\"5459\":1,\"5479\":1}}],[\"k\",{\"1\":{\"719\":1,\"724\":1,\"729\":4,\"748\":1,\"760\":2,\"775\":4,\"782\":1}}],[\"函数形式如下\",{\"1\":{\"1176\":1,\"1344\":1,\"1512\":1,\"1680\":1,\"4587\":1}}],[\"函数读完才结束\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4561\":1}}],[\"函数从内核读取数据\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4560\":1}}],[\"函数时\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"函数加入内核中的红黑树里\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"函数\",{\"1\":{\"717\":2,\"2441\":1,\"2742\":1,\"4803\":1,\"5104\":1}}],[\"反过来也成立\",{\"1\":{\"3390\":1}}],[\"反过来我们也正是通过这些特征找到正确的链表\",{\"1\":{\"717\":1}}],[\"反问环节\",{\"1\":{\"3151\":1,\"5431\":1}}],[\"反问\",{\"1\":{\"3137\":1,\"5417\":1}}],[\"反之\",{\"1\":{\"2490\":1,\"4852\":1}}],[\"反而被经常修改\",{\"1\":{\"2426\":1,\"4788\":1}}],[\"反序列化的技术克隆一份新的数据给你\",{\"1\":{\"989\":1,\"4006\":1}}],[\"反转\",{\"1\":{\"811\":1,\"3828\":1}}],[\"反射可以使得程序更加健壮\",{\"1\":{\"327\":1,\"3715\":1}}],[\"反射\",{\"0\":{\"3671\":1},\"1\":{\"327\":1,\"3715\":1}}],[\"反射的应用场景\",{\"1\":{\"326\":1,\"3714\":1}}],[\"反射是java的一种机制\",{\"1\":{\"296\":1,\"3684\":1}}],[\"左边很明显是个数组\",{\"1\":{\"717\":1}}],[\"常规数据\",{\"1\":{\"2685\":1,\"5047\":1}}],[\"常见优化手段\",{\"0\":{\"2639\":1,\"5001\":1}}],[\"常见\",{\"1\":{\"2263\":1,\"5345\":1}}],[\"常见的非对称加密算法有\",{\"1\":{\"3392\":1}}],[\"常见的对称加密算法有\",{\"1\":{\"3390\":1}}],[\"常见的导致索引失效的情况有下面这些\",{\"1\":{\"2438\":1,\"4800\":1}}],[\"常见的设计模式\",{\"0\":{\"572\":1,\"3765\":1}}],[\"常见的有以下这几个\",{\"1\":{\"301\":1,\"3689\":1}}],[\"常考\",{\"1\":{\"2053\":1}}],[\"常常简单的表述为\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"常用口令\",{\"1\":{\"3354\":1}}],[\"常用的方法就是加锁\",{\"1\":{\"2858\":1,\"4112\":1}}],[\"常用的过期数据的删除策略就两个\",{\"1\":{\"2754\":1,\"5116\":1}}],[\"常用的命令\",{\"0\":{\"1081\":1,\"4022\":1}}],[\"常用的\",{\"1\":{\"943\":1,\"3960\":1}}],[\"常用的哈希函数的冲突解决办法中有一种方法叫做链地址法\",{\"1\":{\"715\":1}}],[\"常用于系统加载时进行信息初始化\",{\"1\":{\"933\":1,\"3950\":1}}],[\"寻址相同\",{\"1\":{\"2253\":1,\"5335\":1}}],[\"寻址\",{\"0\":{\"2236\":1,\"2248\":1,\"5318\":1,\"5330\":1},\"1\":{\"2234\":1,\"2250\":1,\"5316\":1,\"5332\":1}}],[\"寻址效率也足够高\",{\"1\":{\"790\":1}}],[\"寻址困难\",{\"1\":{\"715\":1}}],[\"寻址容易\",{\"1\":{\"715\":1}}],[\"两点建议\",{\"1\":{\"3228\":1,\"5497\":1}}],[\"两点原因\",{\"1\":{\"3143\":1,\"5423\":1}}],[\"两台主机所在的子网由一台路由器联通\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"两次执行相同\",{\"1\":{\"984\":1,\"4001\":1}}],[\"两个操作能保证是原子性吗\",{\"1\":{\"2878\":1,\"4132\":1}}],[\"两个子类\",{\"1\":{\"2830\":1,\"4084\":1}}],[\"两个机房都能写入\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"两个机房\",{\"0\":{\"1952\":1,\"4058\":1}}],[\"两个变量\",{\"1\":{\"1096\":1}}],[\"两个不同的键值\",{\"1\":{\"746\":1}}],[\"两个数的乘积都是整数\",{\"1\":{\"701\":1}}],[\"两者各有千秋\",{\"1\":{\"2757\":1,\"5119\":1}}],[\"两者的实现方式不太一样\",{\"1\":{\"2358\":1,\"4720\":1}}],[\"两者的add方法在扩容方面的差别也就是arraylist和vector的差别\",{\"1\":{\"542\":1}}],[\"两者的扩充数组容量方式不一样\",{\"1\":{\"542\":1}}],[\"两者中的值都不能重复\",{\"1\":{\"459\":1}}],[\"设定log的目录\",{\"1\":{\"3316\":1}}],[\"设置成功\",{\"1\":{\"3295\":1,\"5564\":1}}],[\"设置成0\",{\"1\":{\"701\":1}}],[\"设置\",{\"1\":{\"3291\":1,\"5560\":1}}],[\"设置指定的值\",{\"1\":{\"3290\":1,\"5559\":1}}],[\"设置二级缓存\",{\"1\":{\"2813\":1,\"5175\":1}}],[\"设置不同的失效时间比如随机设置缓存的失效时间\",{\"1\":{\"2811\":1,\"5173\":1}}],[\"设置热点数据永不过期或者过期时间比较长\",{\"1\":{\"2796\":1,\"5158\":1}}],[\"设置过期时间还是有问题的\",{\"1\":{\"2758\":1,\"5120\":1}}],[\"设置中填写的\",{\"1\":{\"2297\":1,\"5379\":1}}],[\"设计目标\",{\"1\":{\"1818\":1,\"4407\":1}}],[\"设计成16的好处主要是可以使用按位与替代取模来提升hash的效率\",{\"1\":{\"689\":1}}],[\"设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案\",{\"1\":{\"575\":1,\"3768\":1}}],[\"设计模式\",{\"1\":{\"575\":1,\"3768\":1}}],[\"设计的另一个不合理之处\",{\"1\":{\"383\":1}}],[\"设计中\",{\"1\":{\"366\":1}}],[\"设计原则\",{\"1\":{\"365\":1}}],[\"900\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"9time\",{\"0\":{\"2198\":1}}],[\"9第三次握手丢失了\",{\"0\":{\"2187\":1}}],[\"95\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"99\",{\"1\":{\"1890\":2,\"4479\":2}}],[\"9\",{\"1\":{\"691\":1,\"693\":1,\"2650\":1,\"3127\":1,\"3164\":1,\"3187\":1,\"5012\":1,\"5407\":1,\"5444\":1}}],[\"桶\",{\"1\":{\"685\":1}}],[\"桶中元素的插入只会在hash冲突时发生\",{\"1\":{\"634\":1,\"3726\":1}}],[\"临界值\",{\"1\":{\"680\":1}}],[\"装载因子\",{\"1\":{\"678\":1,\"680\":1}}],[\"装饰器模式\",{\"0\":{\"3786\":1}}],[\"装饰器\",{\"1\":{\"577\":1,\"3770\":1}}],[\"先做一个两分钟以内的自我介绍\",{\"1\":{\"3156\":1,\"5436\":1}}],[\"先做个总结\",{\"1\":{\"743\":1}}],[\"先判断头结点是不是signal状态\",{\"1\":{\"2911\":1,\"4165\":1}}],[\"先判断用户发来的请求的值是否存在于布隆过滤器中\",{\"1\":{\"2783\":1,\"5145\":1}}],[\"先比较当前锁标志位是否为\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"先获取互斥锁\",{\"1\":{\"2798\":1,\"5160\":1}}],[\"先开始从数据库查询账户余额大于\",{\"1\":{\"2588\":1,\"4950\":1}}],[\"先开始从数据库中读取小林的余额数据\",{\"1\":{\"2579\":1,\"2584\":1,\"4941\":1,\"4946\":1}}],[\"先会加上表级别的意向独占锁\",{\"1\":{\"2512\":1,\"4874\":1}}],[\"先表上加上意向独占锁\",{\"1\":{\"2508\":1,\"4870\":1}}],[\"先在表上加上意向共享锁\",{\"1\":{\"2508\":1,\"4870\":1}}],[\"先要看看数据库中的长事务\",{\"1\":{\"2500\":1,\"4862\":1}}],[\"先要了解下什么是循环依赖\",{\"1\":{\"870\":1,\"3887\":1}}],[\"先启用了事务\",{\"1\":{\"2494\":1,\"4856\":1}}],[\"先来先获取的公平性原则\",{\"1\":{\"2987\":1,\"4241\":1}}],[\"先来说说表锁\",{\"1\":{\"2474\":1,\"4836\":1}}],[\"先来看看\",{\"1\":{\"1239\":1,\"1407\":1,\"1575\":1,\"1743\":1,\"4650\":1}}],[\"先来看一下\",{\"1\":{\"671\":1}}],[\"先构造\",{\"1\":{\"2254\":1,\"5336\":1}}],[\"先给大家列出目录\",{\"1\":{\"2054\":1}}],[\"先查老的\",{\"1\":{\"1949\":1,\"4055\":1}}],[\"先查询数据库改用户是否进行点赞\",{\"1\":{\"1930\":1,\"4036\":1}}],[\"先查询成品缓存\",{\"1\":{\"894\":1,\"3911\":1}}],[\"先关注自己的开发\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"先把所有连接\",{\"1\":{\"1137\":1,\"1305\":1,\"1473\":1,\"1641\":1,\"4548\":1}}],[\"先进先出\",{\"1\":{\"1126\":1,\"1294\":1,\"1462\":1,\"1630\":1,\"4537\":1}}],[\"先去项目根目录找config文件夹下找配置文件件\",{\"1\":{\"912\":1,\"3929\":1}}],[\"先看一个简单的\",{\"1\":{\"273\":1,\"3661\":1}}],[\"四大隔离级别\",{\"0\":{\"2591\":1,\"4953\":1}}],[\"四大组件分别是\",{\"1\":{\"955\":1,\"3972\":1}}],[\"四层模型\",{\"0\":{\"2224\":1,\"2316\":1,\"5306\":1}}],[\"四元组包括如下\",{\"1\":{\"2122\":1}}],[\"四元组可以唯一的确定一个连接\",{\"1\":{\"2122\":1}}],[\"四次挥手过程是怎样的\",{\"0\":{\"2190\":1},\"1\":{\"2075\":1}}],[\"四次\",{\"0\":{\"2181\":1},\"1\":{\"2066\":1}}],[\"四\",{\"0\":{\"663\":1,\"804\":1,\"3335\":1,\"3821\":1}}],[\"前驱结点\",{\"1\":{\"2919\":1,\"4173\":1}}],[\"前驱节点\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"前面部分是一致的\",{\"1\":{\"2911\":1,\"4165\":1}}],[\"前面也提到\",{\"1\":{\"2534\":1,\"4896\":1}}],[\"前面已经介绍了\",{\"1\":{\"2363\":1,\"4725\":1}}],[\"前面我说过\",{\"1\":{\"730\":1}}],[\"前面我们提到过\",{\"1\":{\"697\":1}}],[\"前缀匹配的范围查询\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"前缀索引仅限于字符串类型\",{\"1\":{\"2436\":1,\"4798\":1}}],[\"前缀索引是对文本的前几个字符创建索引\",{\"1\":{\"2388\":1,\"4750\":1}}],[\"前缀索引只适用于字符串类型的数据\",{\"1\":{\"2388\":1,\"4750\":1}}],[\"前缀索引\",{\"1\":{\"2388\":1,\"4750\":1}}],[\"前缀索引等索引属于二级索引\",{\"1\":{\"2384\":1,\"4746\":1}}],[\"前缀是\",{\"1\":{\"2281\":2,\"5363\":2}}],[\"前缀\",{\"1\":{\"2281\":1,\"5363\":1}}],[\"前一个\",{\"1\":{\"2114\":1}}],[\"前端查询时把id返回过来了\",{\"1\":{\"1947\":1,\"4053\":1}}],[\"前端控制servelt\",{\"1\":{\"817\":1,\"3834\":1}}],[\"前端控制器\",{\"1\":{\"814\":2,\"3831\":2}}],[\"前提条件\",{\"1\":{\"1051\":1,\"5227\":1}}],[\"前置创建\",{\"1\":{\"893\":1,\"3910\":1}}],[\"前28位无论是什么\",{\"1\":{\"750\":1}}],[\"前者线程安全的\",{\"1\":{\"661\":1}}],[\"前三个阶段可以统称为连接\",{\"1\":{\"190\":1,\"3584\":1}}],[\"young\",{\"1\":{\"3041\":1,\"4295\":1}}],[\"youngxy\",{\"1\":{\"488\":1}}],[\"yes\",{\"1\":{\"2734\":1,\"5096\":1}}],[\"ydreferer=ahr0chm6ly9ibg9nlmnzzg4ubmv0l3uwmta2mjc4ndavyxj0awnszs9kzxrhawxzlzc2ndm1mzg1p3nwbt0xmdaxljixmdeumzawms42njuwljemdxrtx21lzgl1bt1kaxn0cmlidxrllnbjx3jlbgv2yw50lm5vbmutdgfzay1ibg9nltiln0vkzwzhdwx0jtdfq1rsteltvcu3rvjhdgutms03njqzntm4ns1ibg9nltexnzqxota1oc4ymzulnuv2mjglnuvwy19yzwxldmfudf90mf9kb3dubg9hzczkzxb0af8xlxv0bv9zb3vyy2u9zglzdhjpynv0zs5wy19yzwxldmfudc5ub25llxrhc2stymxvzy0yjtdfzgvmyxvsdcu3runuukxju1qln0vsyxrlltetnzy0mzuzodutymxvzy0xmtc0mtkwntgumjm1jtvfdji4jtvfcgnfcmvszxzhbnrfddbfzg93bmxvywqmdxrtx3jlbgv2yw50x2luzgv4pti\",{\"1\":{\"1065\":1,\"5241\":1}}],[\"yml\",{\"1\":{\"901\":1,\"3918\":1}}],[\"yang13563758128\",{\"1\":{\"658\":1,\"3633\":1}}],[\"遍历支持fast\",{\"1\":{\"652\":1}}],[\"遍历方式的内部实现上不同\",{\"1\":{\"652\":1}}],[\"支持持久化\",{\"1\":{\"2720\":1,\"5082\":1}}],[\"支持\",{\"1\":{\"2332\":1,\"2336\":1,\"2339\":1,\"4694\":1,\"4698\":1,\"4701\":1}}],[\"支持行级锁\",{\"1\":{\"2326\":1,\"4688\":1}}],[\"支持服务器推送\",{\"1\":{\"2273\":1,\"5355\":1}}],[\"支持对header压缩\",{\"1\":{\"2272\":1,\"5354\":1}}],[\"支持body压缩\",{\"1\":{\"2272\":1,\"5354\":1}}],[\"支持长连接\",{\"1\":{\"2265\":1,\"5347\":1}}],[\"支持一对一\",{\"1\":{\"2142\":1}}],[\"支持切换机房写数据的时候\",{\"1\":{\"1953\":1,\"4059\":1}}],[\"支持本地仓库\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"支持两种事件触发模式\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"4558\":1}}],[\"支持当前事务的情况\",{\"1\":{\"859\":1,\"3876\":1}}],[\"支持fast\",{\"1\":{\"652\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"80\":1,\"3479\":1}}],[\"底层原理了解吗\",{\"1\":{\"3017\":1,\"4271\":1}}],[\"底层利用unsafe对象实现的\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"底层使用了模板方法模式\",{\"0\":{\"2926\":1,\"4180\":1}}],[\"底层会通过限制删除操作执行的时长和频率来减少删除操作对\",{\"1\":{\"2756\":1,\"5118\":1}}],[\"底层数据结构\",{\"0\":{\"2346\":1,\"4708\":1},\"1\":{\"2707\":1,\"5069\":1}}],[\"底层都是哈希算法\",{\"1\":{\"643\":1}}],[\"底层开发人员可以随意维护自己的\",{\"1\":{\"379\":1}}],[\"几乎是不可能事件\",{\"1\":{\"640\":1,\"3732\":1}}],[\"几乎不会有bin中链表长度会达到阈值\",{\"1\":{\"640\":1,\"3732\":1}}],[\"然而jdk又不能阻止用户实现这种不好的hash算法\",{\"1\":{\"640\":1,\"3732\":1}}],[\"然后他也说了你只是了解\",{\"1\":{\"3121\":1,\"5401\":1}}],[\"然后执行javap\",{\"1\":{\"2999\":1,\"4253\":1}}],[\"然后执行一条\",{\"1\":{\"2494\":1,\"4856\":1}}],[\"然后一个线程去读这个变量\",{\"1\":{\"2944\":1,\"4198\":1}}],[\"然后一起参与到消息广播流程中去\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"然后又修改为\",{\"1\":{\"2886\":1,\"4140\":1}}],[\"然后开始上厕所\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"然后线程将当前锁的持有者信息修改为自己\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"然后判断锁对象是否处于被锁定状态\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"然后就\",{\"1\":{\"2758\":1,\"5120\":1}}],[\"然后就挂了\",{\"1\":{\"1956\":1,\"4062\":1}}],[\"然后整个事务期间都在用这个\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"然后整个事务执行期间都在用这个\",{\"1\":{\"2462\":1,\"4824\":1}}],[\"然后事务\",{\"1\":{\"2588\":1,\"2590\":1,\"4950\":1,\"4952\":1}}],[\"然后继续执行代码逻辑处理\",{\"1\":{\"2584\":1,\"4946\":1}}],[\"然后给该字段赋值一个自增的值\",{\"1\":{\"2522\":1,\"4884\":1}}],[\"然后为被\",{\"1\":{\"2518\":1,\"4880\":1}}],[\"然后对读取的记录加独占锁\",{\"1\":{\"2508\":1,\"4870\":1}}],[\"然后对读取的记录加共享锁\",{\"1\":{\"2508\":1,\"4870\":1}}],[\"然后对该记录加独占锁\",{\"1\":{\"2505\":1,\"4867\":1}}],[\"然后对分区做取模得到分区编号\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"然后以\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"然后同步到另外一个机房\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"然后新表的数据\",{\"1\":{\"1949\":1,\"4055\":1}}],[\"然后加到sql里\",{\"1\":{\"1947\":1,\"4053\":1}}],[\"然后根据查询到的结果\",{\"1\":{\"1939\":1,\"4045\":1}}],[\"然后根据该\",{\"1\":{\"818\":1,\"3835\":1}}],[\"然后将已点赞的信息存入redis中\",{\"1\":{\"1930\":1,\"4036\":1}}],[\"然后将http的请求的响应结果\",{\"1\":{\"1848\":1,\"4437\":1}}],[\"然后要发给\",{\"1\":{\"1897\":1,\"4486\":1}}],[\"然后广播出去\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"然后广播给其他\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"然后也广播给其他\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"然后每个\",{\"1\":{\"1889\":1,\"4478\":1}}],[\"然后\",{\"1\":{\"1852\":1,\"2495\":1,\"2792\":1,\"4441\":1,\"4857\":1,\"5154\":1}}],[\"然后分发给底层不同的worker来处理\",{\"1\":{\"1077\":1,\"5253\":1}}],[\"然后这个consumer内部用内存队列做排队\",{\"1\":{\"1077\":1,\"5253\":1}}],[\"然后consumer消费该数据之后\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"然后订阅这个topic的消费组的消费者再进行排序\",{\"1\":{\"1030\":1,\"5206\":1}}],[\"然后在用户态中再处理这些连接对应的请求即可\",{\"1\":{\"1137\":1,\"1305\":1,\"1473\":1,\"1641\":1,\"4548\":1}}],[\"然后在对应的mapper\",{\"1\":{\"987\":1,\"4004\":1}}],[\"然后在给插件编写注解\",{\"1\":{\"979\":1,\"3996\":1}}],[\"然后在将hashcode得到的int值对数组长度进行取模\",{\"1\":{\"744\":1}}],[\"然后重写\",{\"1\":{\"976\":1,\"3993\":1}}],[\"然后做出相应的响应处理\",{\"1\":{\"933\":1,\"3950\":1}}],[\"然后不停访问这些key导致hashmap忙于进行线性查找\",{\"1\":{\"779\":1}}],[\"然后再写入到\",{\"1\":{\"2735\":1,\"5097\":1}}],[\"然后再执行更新操作\",{\"1\":{\"2579\":1,\"4941\":1}}],[\"然后再做表结构的变更\",{\"1\":{\"2500\":1,\"4862\":1}}],[\"然后再一路顺藤摸瓜找到位于下层的某台目标\",{\"1\":{\"2295\":1,\"5377\":1}}],[\"然后再广播出去\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"然后再通过h\",{\"1\":{\"782\":1}}],[\"然后再对hashcode进行扰动\",{\"1\":{\"776\":1}}],[\"然后再分析他们的作用\",{\"1\":{\"673\":1}}],[\"然后用这个数对hashmap或者hashtable的容量进行取模就行了\",{\"1\":{\"724\":1}}],[\"然后通过dubbo调用api来完成保存操作\",{\"1\":{\"1930\":1,\"4036\":1}}],[\"然后通过反射的方式打印capacity和size\",{\"1\":{\"687\":1}}],[\"然后通过扰动计算和按位与的方式计算出这个元素的存储位置\",{\"1\":{\"460\":1}}],[\"然后你得用treemap\",{\"1\":{\"294\":1,\"3682\":1}}],[\"然后你修改代码\",{\"1\":{\"290\":1,\"3678\":1}}],[\"效果等同于hash\",{\"1\":{\"638\":1,\"3730\":1}}],[\"效率问题\",{\"1\":{\"3269\":1,\"5538\":1}}],[\"效率不会大幅度降低\",{\"1\":{\"1144\":1,\"1312\":1,\"1480\":1,\"1648\":1,\"4555\":1}}],[\"效率要大大高于做除法\",{\"1\":{\"772\":1}}],[\"效率要比代替取模运算\",{\"1\":{\"730\":1}}],[\"效率低\",{\"1\":{\"646\":1}}],[\"效率高\",{\"1\":{\"645\":1}}],[\"效率较低\",{\"1\":{\"2365\":1,\"2366\":1,\"2376\":1,\"4727\":1,\"4728\":1,\"4738\":1}}],[\"效率较⾼缺点\",{\"1\":{\"582\":1,\"3775\":1}}],[\"效率较高\",{\"1\":{\"419\":1,\"3744\":1}}],[\"效率比较低\",{\"1\":{\"480\":1}}],[\"效率比较高\",{\"1\":{\"447\":1}}],[\"效率都比较低\",{\"1\":{\"478\":1}}],[\"效率都为o\",{\"1\":{\"443\":1}}],[\"效率为o\",{\"1\":{\"477\":1,\"478\":1,\"480\":1}}],[\"效率是o\",{\"1\":{\"470\":1}}],[\"冲突的元素\",{\"0\":{\"631\":1,\"3723\":1}}],[\"原理\",{\"0\":{\"3023\":1,\"4277\":1}}],[\"原理和java\",{\"1\":{\"780\":1}}],[\"原语\",{\"1\":{\"2900\":1,\"4154\":1}}],[\"原语由若干指令组成\",{\"1\":{\"2879\":1,\"4133\":1}}],[\"原语属于操作系统用语\",{\"1\":{\"2879\":1,\"4133\":1}}],[\"原生的\",{\"1\":{\"2565\":1,\"4927\":1}}],[\"原子指令即可\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"原子指令\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"原子广播协议\",{\"1\":{\"1869\":1,\"4458\":1}}],[\"原子广播\",{\"1\":{\"1863\":1,\"4452\":1}}],[\"原子性是通过\",{\"1\":{\"2573\":1,\"4935\":1}}],[\"原子性\",{\"1\":{\"841\":1,\"2567\":1,\"3858\":1,\"4929\":1}}],[\"原因在于\",{\"1\":{\"2349\":1,\"4711\":1}}],[\"原因如下\",{\"1\":{\"1264\":1,\"1432\":1,\"1600\":1,\"1768\":1,\"4675\":1}}],[\"原因\",{\"0\":{\"1058\":1,\"5234\":1,\"5276\":1},\"1\":{\"2107\":1,\"2168\":1}}],[\"原文链接\",{\"1\":{\"629\":1,\"658\":1,\"3721\":1}}],[\"原型模式\",{\"1\":{\"577\":1,\"3770\":1}}],[\"六\",{\"0\":{\"627\":1}}],[\"随着网络技术的发展\",{\"1\":{\"5275\":1}}],[\"随着人们对加密强度需求的不断提高\",{\"1\":{\"3387\":1}}],[\"随着任务量的增大\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"随着\",{\"1\":{\"626\":1,\"2743\":1,\"3819\":1,\"5105\":1}}],[\"被拒绝的任务\",{\"1\":{\"3058\":1,\"4312\":1}}],[\"被\",{\"1\":{\"2519\":1,\"4881\":1}}],[\"被频繁更新的字段应该慎重建立索引\",{\"1\":{\"2425\":1,\"4787\":1}}],[\"被频繁查询的字段\",{\"1\":{\"2421\":1,\"4783\":1}}],[\"被经常频繁用于连接的字段\",{\"1\":{\"2424\":1,\"4786\":1}}],[\"被作为\",{\"1\":{\"2422\":1,\"4784\":1}}],[\"被作为条件查询的字段\",{\"1\":{\"2422\":1,\"4784\":1}}],[\"被称为解决\",{\"1\":{\"1144\":1,\"1312\":1,\"1480\":1,\"1648\":1,\"4555\":1}}],[\"被拦截的方法\",{\"1\":{\"622\":1,\"3815\":1}}],[\"被代理的对象\",{\"1\":{\"622\":1,\"3815\":1}}],[\"被代理类实现的一些接口\",{\"1\":{\"612\":1,\"3805\":1}}],[\"模式设计开发了一套高效的事件处理模型\",{\"1\":{\"2671\":1,\"5033\":1}}],[\"模式\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"模式的架构\",{\"1\":{\"1780\":1,\"4369\":1}}],[\"模式是灵活多变的\",{\"1\":{\"1199\":1,\"1367\":1,\"1535\":1,\"1703\":1,\"4610\":1}}],[\"模式主要由\",{\"1\":{\"1196\":1,\"1364\":1,\"1532\":1,\"1700\":1,\"4607\":1}}],[\"模块的报文根据\",{\"1\":{\"2175\":1}}],[\"模块各司其职\",{\"1\":{\"1780\":1,\"4369\":1}}],[\"模块完全满足开发人员的需求\",{\"1\":{\"929\":1,\"3946\":1}}],[\"模块\",{\"1\":{\"929\":1,\"3946\":1}}],[\"模块中\",{\"1\":{\"619\":1,\"3812\":1}}],[\"模板编写为freemarker\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"模板方法模式\",{\"1\":{\"833\":1,\"3850\":1}}],[\"模板\",{\"1\":{\"577\":1,\"3129\":1,\"3770\":1,\"5409\":1}}],[\"学会了动态代理之后\",{\"1\":{\"607\":1,\"3800\":1}}],[\"学习过程中\",{\"1\":{\"352\":1}}],[\"角度来说\",{\"1\":{\"605\":1,\"3798\":1}}],[\"层组装完数据\",{\"1\":{\"2157\":1}}],[\"层进行分片\",{\"1\":{\"2157\":1}}],[\"层是\",{\"1\":{\"2107\":1}}],[\"层还需要\",{\"0\":{\"2184\":1},\"1\":{\"2069\":1}}],[\"层会分片\",{\"0\":{\"2184\":1},\"1\":{\"2069\":1}}],[\"层面来说\",{\"1\":{\"602\":1,\"3795\":1}}],[\"层⾯\",{\"1\":{\"599\":1,\"3792\":1}}],[\"目前出现过的最大的事务\",{\"1\":{\"2624\":1,\"4986\":1}}],[\"目前只有\",{\"1\":{\"2366\":1,\"2376\":1,\"4728\":1,\"4738\":1}}],[\"目前大部分数据库系统及文件系统都采用\",{\"1\":{\"2353\":1,\"4715\":1}}],[\"目标接口接收到了主机\",{\"1\":{\"2255\":1,\"5337\":1}}],[\"目标路由器指的是\",{\"1\":{\"2252\":1,\"5334\":1}}],[\"目标\",{\"1\":{\"2245\":1,\"2259\":1,\"5327\":1,\"5341\":1}}],[\"目标主机收到后\",{\"1\":{\"2156\":1,\"2157\":1}}],[\"目标对象和代理对象都要进行修改\",{\"1\":{\"601\":1,\"3794\":1}}],[\"目的就是尽量使得明文密码的复杂度增加一些\",{\"1\":{\"3352\":1}}],[\"目的\",{\"1\":{\"2254\":2,\"5336\":2}}],[\"目的端口\",{\"1\":{\"2126\":1}}],[\"目的地址\",{\"1\":{\"2125\":1}}],[\"目的是保证对于提交的任务\",{\"1\":{\"3066\":1,\"4320\":1}}],[\"目的是为了解决可重复读隔离级别下幻读的现象\",{\"1\":{\"2548\":1,\"4910\":1}}],[\"目的是告诉我们有数据需要读取\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4561\":1}}],[\"目的是在执行一次新的分配时\",{\"1\":{\"1047\":1,\"5223\":1}}],[\"目录树由根目录\",{\"1\":{\"1086\":1,\"4027\":1}}],[\"目录结构\",{\"0\":{\"1085\":1,\"4026\":1}}],[\"目录下的\",{\"1\":{\"209\":1,\"3603\":1}}],[\"目录\",{\"0\":{\"4\":1,\"3403\":1}}],[\"⽽动态代理是在运⾏时动态⽣成类字节码\",{\"1\":{\"599\":1,\"3792\":1}}],[\"⽽是直接返回这个实例\",{\"1\":{\"582\":1,\"3775\":1}}],[\"⽂件\",{\"1\":{\"599\":1,\"3792\":1}}],[\"静态代理\",{\"0\":{\"3793\":1}}],[\"静态代理和动态代理的区别\",{\"0\":{\"3790\":1}}],[\"静态代理在编译时就将接口\",{\"1\":{\"602\":1,\"3795\":1}}],[\"静态代理在编译时就将接⼝\",{\"1\":{\"599\":1,\"3792\":1}}],[\"静态代理中\",{\"1\":{\"598\":1,\"601\":1,\"3791\":1,\"3794\":1}}],[\"⽬标对象和代理对象都要进⾏修改\",{\"1\":{\"598\":1,\"3791\":1}}],[\"⽬的是为了防⽌有多个线程同时调⽤时\",{\"1\":{\"582\":1,\"3775\":1}}],[\"且有剩余资源\",{\"1\":{\"2931\":1,\"4185\":1}}],[\"且子查询中为简单\",{\"1\":{\"2664\":1,\"5026\":1}}],[\"且\",{\"1\":{\"2443\":1,\"4805\":1}}],[\"且修改数据的操作效率也会提升\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"且修改索引时\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"且都有应用在实际的项目中\",{\"1\":{\"1208\":1,\"1376\":1,\"1544\":1,\"1712\":1,\"4619\":1}}],[\"且麻烦\",{\"1\":{\"601\":1,\"3794\":1}}],[\"且产品多的话会使⼯⼚类⽐较复杂\",{\"1\":{\"586\":1,\"3779\":1}}],[\"且内部属性已经被赋值\",{\"1\":{\"317\":1,\"3705\":1}}],[\"违背开闭原则\",{\"1\":{\"586\":1,\"3779\":1}}],[\"完成远程服务的http调用\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"完成后释放锁\",{\"1\":{\"582\":1,\"3775\":1}}],[\"完善\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"完全服从\",{\"1\":{\"856\":1,\"3873\":1}}],[\"完美解决了之前说的\",{\"1\":{\"382\":1}}],[\"锁队列的一个结点\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"锁消除指的是在某些情况下\",{\"1\":{\"2854\":1,\"4108\":1}}],[\"锁消除\",{\"0\":{\"2852\":1,\"4106\":1}}],[\"锁粗化就是告诉我们任何事情都有个度\",{\"1\":{\"2853\":1,\"4107\":1}}],[\"锁粗化\",{\"0\":{\"2852\":1,\"4106\":1}}],[\"锁优化技术\",{\"0\":{\"2852\":1,\"4106\":1}}],[\"锁定\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"锁定一个范围\",{\"1\":{\"2541\":1,\"2542\":1,\"2552\":1,\"4903\":1,\"4904\":1,\"4914\":1}}],[\"锁对象变成偏向锁\",{\"1\":{\"2839\":1,\"4093\":1}}],[\"锁升级\",{\"0\":{\"2834\":1,\"4088\":1}}],[\"锁绑定多个条件一个\",{\"1\":{\"2826\":1,\"4080\":1}}],[\"锁范围内插入了一条记录\",{\"1\":{\"2609\":1,\"4971\":1}}],[\"锁住的就是一个点\",{\"1\":{\"2561\":1,\"4923\":1}}],[\"锁住的是一条记录\",{\"1\":{\"2544\":1,\"4906\":1}}],[\"锁不兼容\",{\"1\":{\"2545\":1,\"2546\":2,\"4907\":1,\"4908\":2}}],[\"锁不是再一个事务提交后才释放\",{\"1\":{\"2517\":1,\"4879\":1}}],[\"锁兼容\",{\"1\":{\"2545\":1,\"4907\":1}}],[\"锁之分的\",{\"1\":{\"2544\":1,\"4906\":1}}],[\"锁和\",{\"1\":{\"2544\":1,\"4906\":1}}],[\"锁就会被释放\",{\"1\":{\"2536\":1,\"4898\":1}}],[\"锁再对大量数据进行插入的时候\",{\"1\":{\"2520\":1,\"4882\":1}}],[\"锁释放掉\",{\"1\":{\"2518\":1,\"4880\":1}}],[\"锁是特殊的表锁机制\",{\"1\":{\"2517\":1,\"4879\":1}}],[\"锁实现的\",{\"1\":{\"2516\":1,\"4878\":1}}],[\"锁的分类实现\",{\"0\":{\"2962\":1,\"4216\":1}}],[\"锁的实现synchronized\",{\"1\":{\"2822\":1,\"4076\":1}}],[\"锁的过程中\",{\"1\":{\"2519\":1,\"4881\":1}}],[\"锁的操作会形成一个队列\",{\"1\":{\"2499\":1,\"4861\":1}}],[\"锁的作用域就是从锁被获取到其被释放的时间\",{\"1\":{\"560\":1}}],[\"锁机制\",{\"0\":{\"2445\":1,\"4807\":1}}],[\"锁竞争小时\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"锁\",{\"0\":{\"2514\":1,\"4876\":1},\"1\":{\"1121\":1,\"1289\":1,\"1457\":1,\"1625\":1,\"2472\":1,\"2518\":1,\"2523\":1,\"2524\":1,\"4532\":1,\"4834\":1,\"4880\":1,\"4885\":1,\"4886\":1}}],[\"锁池\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"锁指的是\",{\"1\":{\"582\":1,\"3775\":1}}],[\"关闭状态\",{\"1\":{\"1837\":1,\"4426\":1}}],[\"关键看你的业务场景\",{\"1\":{\"3281\":1,\"5550\":1}}],[\"关键字类似\",{\"1\":{\"2828\":1,\"4082\":1}}],[\"关键字创建对象不是原⼦操作\",{\"1\":{\"581\":1,\"3774\":1}}],[\"关键是备份期间\",{\"1\":{\"2460\":1,\"4822\":1}}],[\"关键词和各种\",{\"1\":{\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"4525\":1}}],[\"关于饱和策略下面单独介绍一下\",{\"1\":{\"3052\":1,\"4306\":1}}],[\"关于偏向锁的撤销\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"关于此将按照时间顺序\",{\"1\":{\"2239\":1,\"5321\":1}}],[\"关于http3\",{\"0\":{\"5272\":1}}],[\"关于http2\",{\"0\":{\"1999\":1,\"2012\":1,\"5260\":1}}],[\"关于http\",{\"1\":{\"1967\":1,\"1982\":1,\"1997\":1,\"2010\":1,\"2023\":1,\"2038\":1,\"5257\":1,\"5282\":1}}],[\"关于hashmap在java\",{\"1\":{\"778\":1}}],[\"关于循环依赖的源码之前\",{\"1\":{\"870\":1,\"3887\":1}}],[\"关于java\",{\"1\":{\"780\":1}}],[\"关于内部的第⼆重空判断的作⽤\",{\"1\":{\"582\":1,\"3775\":1}}],[\"关于在面试中\",{\"1\":{\"411\":1}}],[\"关于继承关系和组合关系的区别\",{\"1\":{\"352\":1}}],[\"关于这些扩展\",{\"1\":{\"40\":1,\"3439\":1}}],[\"第三方技术阿里云oss\",{\"1\":{\"3190\":1,\"5459\":1}}],[\"第三方接口审核完后传来一个statuscode200\",{\"1\":{\"3150\":1,\"5430\":1}}],[\"第三次挥手丢失了\",{\"1\":{\"2079\":1}}],[\"第三次握手丢失了\",{\"1\":{\"2072\":1}}],[\"第四次挥手丢失了\",{\"1\":{\"2080\":1}}],[\"第二个密钥是私有密钥\",{\"1\":{\"3392\":1}}],[\"第二个缺点\",{\"1\":{\"1234\":1,\"1402\":1,\"1570\":1,\"1738\":1,\"4645\":1}}],[\"第二\",{\"1\":{\"3242\":1,\"5511\":1}}],[\"第二次挥手丢失了\",{\"1\":{\"2078\":1}}],[\"第二次握手丢失了\",{\"1\":{\"2071\":1}}],[\"第二次会从\",{\"1\":{\"984\":1,\"4001\":1}}],[\"第二次会从缓存中获取\",{\"1\":{\"982\":1,\"3999\":1}}],[\"第二则是当\",{\"1\":{\"1884\":1,\"4473\":1}}],[\"第二步\",{\"1\":{\"1185\":1,\"1353\":1,\"1521\":1,\"1689\":1,\"4596\":1}}],[\"第二点\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"第二种方案\",{\"1\":{\"1077\":1,\"5253\":1}}],[\"第二种情况\",{\"1\":{\"1072\":1,\"5248\":1}}],[\"第一\",{\"1\":{\"3240\":1,\"5509\":1}}],[\"第一个是\",{\"1\":{\"2821\":1,\"4075\":1}}],[\"第一个是我们提到的\",{\"1\":{\"1884\":1,\"4473\":1}}],[\"第一个缺点\",{\"1\":{\"1233\":1,\"1401\":1,\"1569\":1,\"1737\":1,\"4644\":1}}],[\"第一个目标是每个分配算法都尽量尝试去完成的\",{\"1\":{\"1050\":1,\"5226\":1}}],[\"第一步肯定需要\",{\"1\":{\"1878\":1,\"4467\":1}}],[\"第一步\",{\"1\":{\"1184\":1,\"1352\":1,\"1520\":1,\"1688\":1,\"4595\":1}}],[\"第一点\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"第一种方案\",{\"1\":{\"1075\":1,\"5251\":1}}],[\"第一种情况\",{\"1\":{\"1070\":1,\"5246\":1}}],[\"第一次挥手丢失了\",{\"1\":{\"2077\":1}}],[\"第一次握手丢失了\",{\"1\":{\"2070\":1}}],[\"第一次调用时随机生成一个整数\",{\"1\":{\"1023\":1,\"5199\":1}}],[\"第一次执行完毕会将数据库中查询的数据写到缓存\",{\"1\":{\"982\":1,\"984\":1,\"3999\":1,\"4001\":1}}],[\"第一位一定是个0\",{\"1\":{\"757\":1}}],[\"第\",{\"1\":{\"901\":1,\"903\":1,\"905\":1,\"3918\":1,\"3920\":1,\"3922\":1}}],[\"第⼀重判断\",{\"1\":{\"582\":1,\"3775\":1}}],[\"第⼀重检查是否为\",{\"1\":{\"581\":1,\"3774\":1}}],[\"第⼆重检查是否为\",{\"1\":{\"581\":1,\"3774\":1}}],[\"使其再次尝试获取同步状态\",{\"1\":{\"2913\":1,\"4167\":1}}],[\"使得网页传输更加高效\",{\"1\":{\"5275\":1}}],[\"使得java\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"使得多个进程可以访问同一块内存空间\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4541\":1}}],[\"使⽤者通过代理间接的访问服务提供者\",{\"1\":{\"596\":1,\"3789\":1}}],[\"使⽤简单⼯⼚模式\",{\"1\":{\"587\":1,\"3780\":1}}],[\"使⽤\",{\"1\":{\"581\":1,\"3774\":1}}],[\"使用fastdfs作为静态资源存储器\",{\"1\":{\"3300\":1,\"5569\":1}}],[\"使用版本号\",{\"1\":{\"3232\":1,\"5501\":1}}],[\"使用mongo存储用户历史记录数据\",{\"1\":{\"3201\":1,\"5470\":1}}],[\"使用mysql存储用户数据\",{\"1\":{\"3200\":1,\"5469\":1}}],[\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销\",{\"1\":{\"3087\":1,\"4341\":1}}],[\"使用线程池可以进行统一的分配\",{\"1\":{\"3038\":1,\"4292\":1}}],[\"使用调用者的线程来执行任务\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"使用volatile修饰的变量\",{\"1\":{\"2943\":1,\"4197\":1}}],[\"使用者继承\",{\"1\":{\"2927\":1,\"4181\":1}}],[\"使用布隆过滤器中的哈希函数对元素值进行计算\",{\"1\":{\"2787\":1,\"5149\":1}}],[\"使用哈希表作为\",{\"1\":{\"2700\":1,\"5062\":1}}],[\"使用全局锁会影响业务\",{\"1\":{\"2461\":1,\"4823\":1}}],[\"使用表中的多个字段创建索引\",{\"1\":{\"2413\":1,\"4775\":1}}],[\"使用的无界的延迟阻塞队列delayedworkqueue\",{\"1\":{\"3092\":1,\"4346\":1}}],[\"使用的都是非聚簇索引\",{\"1\":{\"2369\":1,\"2401\":1,\"4731\":1,\"4763\":1}}],[\"使用的是同步队列\",{\"1\":{\"3091\":1,\"4345\":1}}],[\"使用的是无界的\",{\"1\":{\"3090\":1,\"4344\":1}}],[\"使用的是线程\",{\"1\":{\"1214\":1,\"1382\":1,\"1550\":1,\"1718\":1,\"4625\":1}}],[\"使用的是进程\",{\"1\":{\"1214\":1,\"1382\":1,\"1550\":1,\"1718\":1,\"4625\":1}}],[\"使用的是共享内存的方式\",{\"1\":{\"1145\":1,\"1313\":1,\"1481\":1,\"1649\":1,\"4556\":1}}],[\"使用二进制帧进行数据传输\",{\"1\":{\"2271\":1,\"5353\":1}}],[\"使用零拷贝技术的项目\",{\"0\":{\"1191\":1,\"1359\":1,\"1527\":1,\"1695\":1,\"4602\":1}}],[\"使用水平触发模式时\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4561\":1}}],[\"使用边缘触发模式时\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4560\":1}}],[\"使用事件驱动的机制\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"使用一种称为目录树的层次结构来组织文件和目录\",{\"1\":{\"1086\":1,\"4027\":1}}],[\"使用availablepartitions呢\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"使用指定的partition\",{\"1\":{\"1021\":1,\"5197\":1}}],[\"使用指南\",{\"1\":{\"120\":1,\"121\":1,\"3519\":1,\"3520\":1}}],[\"使用utf\",{\"1\":{\"949\":1,\"3966\":1}}],[\"使用spring\",{\"1\":{\"925\":1,\"3942\":1}}],[\"使用synchronizedlist的时候\",{\"1\":{\"570\":1}}],[\"使用后端数据库默认的隔离级别\",{\"1\":{\"852\":1,\"3869\":1}}],[\"使用到了适配器模式\",{\"1\":{\"836\":1,\"3853\":1}}],[\"使用工厂模式通过\",{\"1\":{\"830\":1,\"3847\":1}}],[\"使用位运算代替取模运算\",{\"1\":{\"757\":1}}],[\"使用hashmap时就必须要自己增加同步处理\",{\"1\":{\"654\":1}}],[\"使用同步代码块的方式调用arraylist的add\",{\"1\":{\"538\":1}}],[\"使用方式也很相似\",{\"1\":{\"499\":1}}],[\"使用了一种变种的wang\",{\"1\":{\"776\":1}}],[\"使用了\",{\"1\":{\"400\":2}}],[\"使用老版本\",{\"1\":{\"368\":1}}],[\"使用自然语言描述\",{\"1\":{\"361\":1}}],[\"使用jdbc连接数据库时\",{\"1\":{\"327\":1,\"3715\":1}}],[\"使用javap来分析这段代码\",{\"1\":{\"275\":1,\"3663\":1}}],[\"使用\",{\"1\":{\"190\":1,\"372\":1,\"916\":1,\"973\":1,\"978\":1,\"1776\":1,\"2283\":1,\"2337\":1,\"2439\":1,\"2681\":1,\"2879\":1,\"3584\":1,\"3933\":1,\"3990\":1,\"3995\":1,\"4133\":1,\"4365\":1,\"4699\":1,\"4801\":1,\"5043\":1,\"5365\":1}}],[\"私有化构造⽅法\",{\"1\":{\"581\":1,\"3774\":1}}],[\"双活的重点\",{\"1\":{\"1961\":1,\"4067\":1}}],[\"双向同步\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"双重检查锁\",{\"1\":{\"580\":1,\"3773\":1}}],[\"双亲委派模型保证了\",{\"1\":{\"236\":1,\"3630\":1}}],[\"双亲委派模型的实现代码非常简单\",{\"1\":{\"228\":1,\"3622\":1}}],[\"双亲委派模型要求除了顶层的启动类加载器外\",{\"1\":{\"224\":1,\"3618\":1}}],[\"双亲委派模型\",{\"0\":{\"221\":1,\"3615\":1},\"1\":{\"226\":1,\"3620\":1}}],[\"⼀个单例类在任何情况下都只存在⼀个实例\",{\"1\":{\"579\":1,\"3772\":1}}],[\"策略\",{\"1\":{\"577\":1,\"2742\":1,\"3770\":1,\"5104\":1}}],[\"状态响应码\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"状态码\",{\"1\":{\"2263\":1,\"5345\":1}}],[\"状态码用于描述\",{\"1\":{\"2262\":1,\"5344\":1}}],[\"状态码有哪些\",{\"0\":{\"2261\":1,\"5343\":1}}],[\"状态的原因有哪些\",{\"0\":{\"2200\":1,\"2201\":1},\"1\":{\"2085\":1,\"2086\":1}}],[\"状态然后进行\",{\"1\":{\"1895\":1,\"4484\":1}}],[\"状态时\",{\"1\":{\"1887\":1,\"4476\":1}}],[\"状态超时\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"状态\",{\"0\":{\"2180\":1,\"2197\":1},\"1\":{\"577\":1,\"1885\":1,\"1889\":1,\"2065\":1,\"2082\":1,\"2919\":1,\"3770\":1,\"4173\":1,\"4474\":1,\"4478\":1}}],[\"观察者模式\",{\"1\":{\"835\":1,\"3852\":1}}],[\"观察者\",{\"1\":{\"577\":1,\"3770\":1}}],[\"迭代器\",{\"1\":{\"577\":1,\"3770\":1}}],[\"享元\",{\"1\":{\"577\":1,\"3770\":1}}],[\"外键对于维护数据一致性非常有帮助\",{\"1\":{\"2333\":1,\"4695\":1}}],[\"外观\",{\"1\":{\"577\":1,\"3770\":1}}],[\"外部节点\",{\"1\":{\"424\":2,\"3749\":2}}],[\"桥接模式\",{\"1\":{\"577\":1,\"3770\":1}}],[\"结构化面试+技术面\",{\"0\":{\"3155\":1,\"5435\":1}}],[\"结构里用\",{\"1\":{\"2682\":1,\"5044\":1}}],[\"结构层次鲜明\",{\"1\":{\"1086\":1,\"4027\":1}}],[\"结构型\",{\"1\":{\"577\":1,\"3770\":1}}],[\"结束后该\",{\"1\":{\"982\":1,\"3999\":1}}],[\"结果发现面试官说错了\",{\"1\":{\"3386\":1}}],[\"结果面试官问我md5\",{\"1\":{\"3386\":1}}],[\"结果自己挂掉了\",{\"1\":{\"3213\":1,\"5482\":1}}],[\"结果如下\",{\"1\":{\"2888\":1,\"4142\":1}}],[\"结果集执行的内存分页\",{\"1\":{\"973\":1,\"3990\":1}}],[\"结果都为0\",{\"1\":{\"750\":1}}],[\"结尾的对数据库操作的类\",{\"1\":{\"833\":1,\"3850\":1}}],[\"结合\",{\"1\":{\"827\":1,\"3844\":1}}],[\"结合上面的源码\",{\"1\":{\"231\":1,\"3625\":1}}],[\"建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性\",{\"1\":{\"2386\":1,\"4748\":1}}],[\"建立通信\",{\"1\":{\"1782\":1,\"4371\":1}}],[\"建造者\",{\"1\":{\"577\":1,\"3770\":1}}],[\"建议将\",{\"1\":{\"3229\":1,\"5498\":1}}],[\"建议单张表索引不超过\",{\"1\":{\"2428\":1,\"4790\":1}}],[\"建议使用\",{\"1\":{\"2420\":1,\"4782\":1}}],[\"建议\",{\"1\":{\"218\":1,\"3612\":1}}],[\"单表不要包含过多字段\",{\"0\":{\"2652\":1,\"5014\":1}}],[\"单播发送\",{\"1\":{\"2259\":1,\"5341\":1}}],[\"单播响应\",{\"1\":{\"2258\":1,\"5340\":1}}],[\"单播响应协议\",{\"1\":{\"2247\":1,\"5329\":1}}],[\"单元化\",{\"1\":{\"1959\":1,\"4065\":1}}],[\"单元测试和集成测试\",{\"1\":{\"945\":1,\"3962\":1}}],[\"单个服务内部高度耦合\",{\"1\":{\"1808\":1,\"4397\":1}}],[\"单线程读写\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"单线程方案是一样的\",{\"1\":{\"1245\":1,\"1413\":1,\"1581\":1,\"1749\":1,\"4656\":1}}],[\"单线程\",{\"1\":{\"1218\":1,\"1238\":1,\"1386\":1,\"1406\":1,\"1554\":1,\"1574\":1,\"1722\":1,\"1742\":1,\"4629\":1,\"4649\":1}}],[\"单进程的方案不适用计算机密集型的场景\",{\"1\":{\"1235\":1,\"1403\":1,\"1571\":1,\"1739\":1,\"4646\":1}}],[\"单进程的方案因为全部工作都在同一个进程内完成\",{\"1\":{\"1231\":1,\"1399\":1,\"1567\":1,\"1735\":1,\"4642\":1}}],[\"单进程\",{\"0\":{\"1216\":1,\"1384\":1,\"1552\":1,\"1720\":1,\"4627\":1},\"1\":{\"1203\":1,\"1205\":1,\"1207\":2,\"1209\":1,\"1217\":1,\"1219\":1,\"1226\":1,\"1236\":1,\"1371\":1,\"1373\":1,\"1375\":2,\"1377\":1,\"1385\":1,\"1387\":1,\"1394\":1,\"1404\":1,\"1539\":1,\"1541\":1,\"1543\":2,\"1545\":1,\"1553\":1,\"1555\":1,\"1562\":1,\"1572\":1,\"1707\":1,\"1709\":1,\"1711\":2,\"1713\":1,\"1721\":1,\"1723\":1,\"1730\":1,\"1740\":1,\"4614\":1,\"4616\":1,\"4618\":2,\"4620\":1,\"4628\":1,\"4630\":1,\"4637\":1,\"4647\":1}}],[\"单\",{\"0\":{\"1216\":1,\"1237\":1,\"1384\":1,\"1405\":1,\"1552\":1,\"1573\":1,\"1720\":1,\"1741\":1,\"4627\":1,\"4648\":1},\"1\":{\"1203\":1,\"1204\":1,\"1207\":1,\"1209\":1,\"1210\":1,\"1217\":1,\"1218\":1,\"1219\":1,\"1226\":1,\"1231\":1,\"1235\":1,\"1236\":1,\"1238\":1,\"1239\":1,\"1248\":1,\"1252\":1,\"1254\":1,\"1256\":2,\"1371\":1,\"1372\":1,\"1375\":1,\"1377\":1,\"1378\":1,\"1385\":1,\"1386\":1,\"1387\":1,\"1394\":1,\"1399\":1,\"1403\":1,\"1404\":1,\"1406\":1,\"1407\":1,\"1416\":1,\"1420\":1,\"1422\":1,\"1424\":2,\"1539\":1,\"1540\":1,\"1543\":1,\"1545\":1,\"1546\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1562\":1,\"1567\":1,\"1571\":1,\"1572\":1,\"1574\":1,\"1575\":1,\"1584\":1,\"1588\":1,\"1590\":1,\"1592\":2,\"1707\":1,\"1708\":1,\"1711\":1,\"1713\":1,\"1714\":1,\"1721\":1,\"1722\":1,\"1723\":1,\"1730\":1,\"1735\":1,\"1739\":1,\"1740\":1,\"1742\":1,\"1743\":1,\"1752\":1,\"1756\":1,\"1758\":1,\"1760\":2,\"4614\":1,\"4615\":1,\"4618\":1,\"4620\":1,\"4621\":1,\"4628\":1,\"4629\":1,\"4630\":1,\"4637\":1,\"4642\":1,\"4646\":1,\"4647\":1,\"4649\":1,\"4650\":1,\"4659\":1,\"4663\":1,\"4665\":1,\"4667\":2}}],[\"单例模式\",{\"0\":{\"3771\":1}}],[\"单例模式属于创建型模式\",{\"1\":{\"579\":1,\"3772\":1}}],[\"单例设计模式\",{\"1\":{\"832\":1,\"3849\":1}}],[\"单例\",{\"1\":{\"577\":1,\"3770\":1}}],[\"单词首字母缩写\",{\"1\":{\"1157\":1,\"1325\":1,\"1493\":1,\"1661\":1,\"4568\":1}}],[\"单词\",{\"1\":{\"67\":1,\"3466\":1}}],[\"抽象⼯⼚模式了解吗\",{\"0\":{\"3784\":1}}],[\"抽象⼯⼚模式通过在\",{\"1\":{\"592\":1,\"3785\":1}}],[\"抽象⼯⼚\",{\"1\":{\"577\":1,\"3770\":1}}],[\"创建新线程的时候会用到\",{\"1\":{\"3051\":1,\"4305\":1}}],[\"创建快照时会阻塞主线程吗\",{\"0\":{\"2728\":1,\"5090\":1}}],[\"创建快照之后\",{\"1\":{\"2725\":1,\"5087\":1}}],[\"创建时其他未提交的活跃事务\",{\"1\":{\"2626\":1,\"4988\":1}}],[\"创建该\",{\"1\":{\"2622\":1,\"2627\":1,\"4984\":1,\"4989\":1}}],[\"创建了组合索引\",{\"1\":{\"2440\":1,\"4802\":1}}],[\"创建远程接口的本地jdk\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"创建并配置\",{\"1\":{\"1786\":1,\"4375\":1}}],[\"创建网络环境时\",{\"1\":{\"1786\":1,\"4375\":1}}],[\"创建后填充属性时依赖\",{\"1\":{\"879\":1,\"3896\":1}}],[\"创建一个新的事务\",{\"1\":{\"864\":1,\"3881\":1}}],[\"创建\",{\"1\":{\"830\":1,\"2622\":1,\"2626\":1,\"3847\":1,\"4984\":1,\"4988\":1}}],[\"创建型\",{\"1\":{\"577\":1,\"3770\":1}}],[\"创建的半成品同样放到缓存中\",{\"1\":{\"890\":1,\"3907\":1}}],[\"创建的代理对象在调用方法的时候\",{\"1\":{\"615\":1,\"3808\":1}}],[\"创建的实例中\",{\"1\":{\"314\":1,\"3702\":1}}],[\"创建的\",{\"1\":{\"201\":1,\"3595\":1}}],[\"代替\",{\"1\":{\"2365\":1,\"2366\":1,\"2376\":1,\"4727\":1,\"4728\":1,\"4738\":1}}],[\"代表我已经消费过了\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"代表他的序号\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"代表\",{\"1\":{\"757\":2}}],[\"代表了最佳的实践\",{\"1\":{\"575\":1,\"3768\":1}}],[\"代理设计模式\",{\"1\":{\"831\":1,\"3848\":1}}],[\"代理类这些都变成了一个个实际的\",{\"1\":{\"602\":1,\"3795\":1}}],[\"代理类这些都变成了⼀个个实际的\",{\"1\":{\"599\":1,\"3792\":1}}],[\"代理模式的本质是⼀个中间件\",{\"1\":{\"596\":1,\"3789\":1}}],[\"代理模式\",{\"0\":{\"3787\":1},\"1\":{\"577\":1,\"3770\":1}}],[\"代码如下\",{\"1\":{\"405\":1}}],[\"代码转换成字节码\",{\"1\":{\"182\":1,\"3576\":1}}],[\"代码演示\",{\"0\":{\"102\":1,\"3501\":1}}],[\"代码块执行后或异常处理后自动关闭\",{\"1\":{\"262\":1,\"3658\":1}}],[\"代码块\",{\"0\":{\"57\":1,\"3456\":1},\"1\":{\"2998\":1,\"4252\":1}}],[\"代码\",{\"1\":{\"46\":1,\"3445\":1}}],[\"八小时工作制\",{\"1\":{\"3152\":1,\"5432\":1}}],[\"八\",{\"0\":{\"572\":1}}],[\"他妈的开始狗叫\",{\"1\":{\"3137\":1,\"5417\":1}}],[\"他妈的\",{\"1\":{\"3129\":1,\"5409\":1}}],[\"他问还有呢\",{\"1\":{\"3129\":1,\"5409\":1}}],[\"他就非得问springboot\",{\"1\":{\"3120\":1,\"5400\":1}}],[\"他就是取模\",{\"1\":{\"730\":1}}],[\"他保存这线程的引用threadid\",{\"1\":{\"2919\":1,\"4173\":1}}],[\"他说你了解的很少\",{\"1\":{\"3125\":1,\"5405\":1}}],[\"他说还是不够快\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"他说这个方案可以\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"他发送给了\",{\"1\":{\"1897\":1,\"4486\":1}}],[\"他们可以使用\",{\"1\":{\"3022\":1,\"4276\":1}}],[\"他们也会比较自己的投票和收到的投票\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"他们底层的实现都是一样的\",{\"1\":{\"530\":1}}],[\"他要求系统有大量的服务器集群\",{\"1\":{\"1811\":1,\"4400\":1}}],[\"他的二进制的第一位一定是0\",{\"1\":{\"757\":1}}],[\"他最终得到的index结果值为11\",{\"1\":{\"750\":1}}],[\"他可以将所有的list的子类转成线程安全的类\",{\"1\":{\"569\":1}}],[\"凡事都有但是\",{\"1\":{\"565\":1}}],[\"扩容\",{\"0\":{\"670\":1}}],[\"扩容时可能会出现循环链表的情况\",{\"1\":{\"630\":1,\"3722\":1}}],[\"扩容之后\",{\"1\":{\"630\":1,\"3722\":1}}],[\"扩容的时候使用的arrays\",{\"1\":{\"524\":1}}],[\"扩展类加载器\",{\"1\":{\"209\":1,\"3603\":1}}],[\"扩展\",{\"0\":{\"36\":1,\"38\":1,\"3435\":1,\"3437\":1},\"1\":{\"40\":1,\"3439\":1}}],[\"分数排序\",{\"1\":{\"3263\":1,\"5532\":1}}],[\"分为两种\",{\"1\":{\"2633\":1,\"4995\":1}}],[\"分为两个步骤\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"分为三大类\",{\"1\":{\"576\":1,\"3769\":1}}],[\"分钟后\",{\"1\":{\"2753\":1,\"5115\":1}}],[\"分钟\",{\"1\":{\"2232\":1,\"2753\":1,\"2780\":1,\"5115\":1,\"5142\":1,\"5314\":1}}],[\"分片不同\",{\"1\":{\"2155\":1}}],[\"分片的核心思路在于\",{\"1\":{\"1958\":1,\"4064\":1}}],[\"分组有两类\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"分组是一种特殊报文\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"分组\",{\"1\":{\"2114\":1}}],[\"分表的数据\",{\"0\":{\"1948\":1,\"4054\":1}}],[\"分多个线程分批\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"分批操作\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"分布式锁解决集群下的方法抢占执行\",{\"0\":{\"3284\":1,\"5553\":1},\"1\":{\"3192\":1,\"5461\":1}}],[\"分布式锁\",{\"1\":{\"2687\":1,\"3287\":1,\"5049\":1,\"5556\":1}}],[\"分布式锁和分布式队列等功能\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"分布式系统理论上不可能选择\",{\"1\":{\"1918\":1,\"4507\":1}}],[\"分布式系统中\",{\"1\":{\"1913\":1,\"4502\":1}}],[\"分布式系统出现网络分区的时候\",{\"1\":{\"1911\":1,\"4500\":1}}],[\"分布式系统开发的成本高\",{\"1\":{\"1825\":1,\"4414\":1}}],[\"分布式协调\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"分布式服务追踪\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"分布式配置中心\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"分布式事务等\",{\"1\":{\"1825\":1,\"4414\":1}}],[\"分布式事物\",{\"1\":{\"1814\":1,\"4403\":1}}],[\"分布式\",{\"0\":{\"5594\":1},\"1\":{\"1795\":1,\"4384\":1}}],[\"分享\",{\"1\":{\"1778\":1,\"4367\":1}}],[\"分配结果\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"分配到的分区数量\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"分配分区的起始位置\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"分配示意图如下\",{\"1\":{\"1030\":1,\"5206\":1}}],[\"分配一个较大的初始值属于最佳实践\",{\"1\":{\"506\":1}}],[\"分区\",{\"1\":{\"1919\":1,\"3210\":2,\"4508\":1,\"5479\":2}}],[\"分区容忍性三者你只能同时达到其中两个\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"分区容错性\",{\"1\":{\"1906\":1,\"1911\":1,\"4495\":1,\"4500\":1}}],[\"分区容错也使得系统更加健壮\",{\"1\":{\"1811\":1,\"4400\":1}}],[\"分区的分配尽量的均衡\",{\"1\":{\"1048\":1,\"5224\":1}}],[\"分区的原则\",{\"1\":{\"1020\":1,\"5196\":1}}],[\"分区分配的算法如下\",{\"1\":{\"1032\":1,\"5208\":1}}],[\"分区分配策略\",{\"1\":{\"1026\":1,\"5202\":1}}],[\"分区策略使用一致性哈希\",{\"1\":{\"1949\":1,\"4055\":1}}],[\"分区策略\",{\"0\":{\"1014\":1,\"5190\":1}}],[\"分区被划分为若干个片段\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"分页插件的基本原理是使用\",{\"1\":{\"976\":1,\"3993\":1}}],[\"分页插件的原理是什么\",{\"0\":{\"971\":1,\"3988\":1}}],[\"分别放到数据库中\",{\"1\":{\"3376\":1}}],[\"分别指向直接的的前驱节点和后继节点\",{\"1\":{\"2914\":1,\"4168\":1}}],[\"分别如下\",{\"1\":{\"2566\":1,\"4928\":1}}],[\"分别的应用场景是\",{\"0\":{\"2134\":1},\"1\":{\"2061\":1}}],[\"分别是\",{\"1\":{\"1865\":1,\"1875\":1,\"1895\":1,\"4454\":1,\"4464\":1,\"4484\":1}}],[\"分别是边缘触发\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"4558\":1}}],[\"分别介绍这三个经典的\",{\"1\":{\"1215\":1,\"1383\":1,\"1551\":1,\"1719\":1,\"4626\":1}}],[\"分别拥有1\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"分别输出\",{\"1\":{\"692\":1}}],[\"分别执行以上3段代码\",{\"1\":{\"692\":1}}],[\"分别到一个文本文件中去\",{\"1\":{\"517\":1}}],[\"分析出\",{\"1\":{\"2252\":1,\"5334\":1}}],[\"分析完indexfor方法后\",{\"1\":{\"743\":1}}],[\"分析\",{\"1\":{\"518\":1}}],[\"分类为\",{\"1\":{\"120\":1,\"3519\":1}}],[\"默认\",{\"1\":{\"3316\":2}}],[\"默认循环10次\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"默认使用非公平锁\",{\"1\":{\"2831\":1,\"4085\":1}}],[\"默认使用的是\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"默认使用的\",{\"1\":{\"2330\":1,\"4692\":1}}],[\"默认的文件名是\",{\"1\":{\"2737\":1,\"5099\":1}}],[\"默认的触发模式是水平触发\",{\"1\":{\"1156\":1,\"1324\":1,\"1492\":1,\"1660\":1,\"4567\":1}}],[\"默认选项\",{\"1\":{\"2731\":1,\"5093\":1}}],[\"默认为行级锁\",{\"1\":{\"2326\":1,\"4688\":1}}],[\"默认是非公平锁\",{\"1\":{\"2994\":1,\"4248\":1}}],[\"默认是\",{\"1\":{\"2280\":2,\"5362\":2}}],[\"默认没有开启二级缓存\",{\"1\":{\"984\":1,\"4001\":1}}],[\"默认开启一级缓存\",{\"1\":{\"982\":1,\"3999\":1}}],[\"默认都是有parent的\",{\"1\":{\"947\":1,\"3964\":1}}],[\"默认都是单例的\",{\"1\":{\"832\":1,\"3849\":1}}],[\"默认spring\",{\"1\":{\"901\":1,\"3918\":1}}],[\"默认采用的持久化方式\",{\"1\":{\"2726\":1,\"5088\":1}}],[\"默认采用的\",{\"1\":{\"852\":2,\"3869\":2}}],[\"默认值\",{\"1\":{\"2691\":2,\"2699\":1,\"2706\":2,\"5053\":2,\"5061\":1,\"5068\":2}}],[\"默认值是16\",{\"1\":{\"711\":1}}],[\"默认值为0\",{\"1\":{\"701\":1}}],[\"默认情况下这两个变量都是\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"默认情况下也是非公平的\",{\"1\":{\"2825\":1,\"4079\":1}}],[\"默认情况下hashmap的容量是16\",{\"1\":{\"693\":1}}],[\"默认情况下\",{\"1\":{\"689\":1,\"702\":1,\"1012\":1,\"2733\":1,\"5095\":1,\"5188\":1}}],[\"默认情况下arraylist的初始容量非常小\",{\"1\":{\"506\":1}}],[\"默认容量是16\",{\"1\":{\"682\":1}}],[\"默认初始容量和扩容机制\",{\"1\":{\"650\":1}}],[\"默认实现是空方法\",{\"1\":{\"215\":1,\"3609\":1}}],[\"五个面试官\",{\"0\":{\"3155\":1,\"5435\":1}}],[\"五\",{\"0\":{\"496\":1,\"3385\":1}}],[\"构成一个高效可靠的原语集\",{\"1\":{\"1856\":1,\"4445\":1}}],[\"构建项目工程\",{\"1\":{\"3195\":1,\"5464\":1}}],[\"构建一个微服务比较复杂\",{\"1\":{\"1813\":1,\"4402\":1}}],[\"构建杰出的软件\",{\"1\":{\"1777\":1,\"4366\":1}}],[\"构建堆heapify的效率为o\",{\"1\":{\"494\":1}}],[\"构造类的实例化对象\",{\"0\":{\"3699\":1}}],[\"构造函数的方式\",{\"1\":{\"3088\":1,\"4342\":1}}],[\"构造映射信息\",{\"1\":{\"2246\":1,\"5328\":1}}],[\"构造的查询分组将在该局域网内广播\",{\"1\":{\"2243\":1,\"5325\":1}}],[\"构造⽅法必须是私有的\",{\"1\":{\"579\":1,\"3772\":1}}],[\"构造实例会调用默认无参构造器\",{\"1\":{\"314\":1,\"3702\":1}}],[\"构造器调用newinstance\",{\"1\":{\"315\":1,\"3703\":1}}],[\"构造器\",{\"1\":{\"297\":1,\"302\":1,\"3685\":1,\"3690\":1}}],[\"优化四\",{\"0\":{\"3218\":1,\"5487\":1}}],[\"优化三\",{\"0\":{\"3214\":1,\"5483\":1}}],[\"优化二\",{\"0\":{\"3208\":1,\"5477\":1}}],[\"优化一\",{\"0\":{\"3204\":1,\"5473\":1}}],[\"优化\",{\"0\":{\"3203\":1,\"5472\":1}}],[\"优化器生成执行计划的时间\",{\"1\":{\"2430\":1,\"4792\":1}}],[\"优化器在选择如何优化查询时\",{\"1\":{\"2430\":1,\"4792\":1}}],[\"优化了高位运算的算法\",{\"1\":{\"782\":1}}],[\"优化了存储\",{\"1\":{\"519\":1}}],[\"优势在于范围查找\",{\"1\":{\"2365\":1,\"4727\":1}}],[\"优缺点\",{\"1\":{\"1820\":1,\"4409\":1}}],[\"优先选择符合存储需要的最小的数据类型\",{\"0\":{\"2645\":1,\"5007\":1}}],[\"优先保证第一个目标\",{\"1\":{\"1050\":1,\"5226\":1}}],[\"优先考虑hashmap\",{\"1\":{\"800\":1}}],[\"优先级可以有相同的\",{\"1\":{\"493\":1}}],[\"优点\",{\"1\":{\"235\":1,\"582\":1,\"1822\":1,\"2394\":1,\"2403\":1,\"2988\":1,\"2991\":1,\"3629\":1,\"3775\":1,\"4242\":1,\"4245\":1,\"4411\":1,\"4756\":1,\"4765\":1}}],[\"详细说一下这个方案\",{\"1\":{\"1241\":1,\"1409\":1,\"1577\":1,\"1745\":1,\"4652\":1}}],[\"详见\",{\"1\":{\"488\":1}}],[\"详情\",{\"0\":{\"161\":1,\"169\":1,\"3555\":1,\"3563\":1}}],[\"详情容器\",{\"1\":{\"55\":1,\"3454\":1}}],[\"尤其是当你已知map中存放的元素个数时\",{\"1\":{\"695\":1}}],[\"尤其是面对大规模数据的时候\",{\"1\":{\"410\":1}}],[\"尤其经常从两端进行操作\",{\"1\":{\"482\":1}}],[\"要启用http2必须使用openssl\",{\"1\":{\"5278\":1}}],[\"要考虑到数据量的问题\",{\"1\":{\"3271\":1,\"5540\":1}}],[\"要修改的新值b=2\",{\"1\":{\"2866\":1,\"4120\":1}}],[\"要加上\",{\"1\":{\"2536\":1,\"4898\":1}}],[\"要释放表锁\",{\"1\":{\"2479\":1,\"4841\":1}}],[\"要使用全局锁\",{\"1\":{\"2449\":1,\"4811\":1}}],[\"要\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"要解决幻读现象不建议将隔离级别升级到\",{\"1\":{\"2604\":1,\"4966\":1}}],[\"要解决不可重复读现象\",{\"1\":{\"2604\":1,\"4966\":1}}],[\"要解决脏读现象\",{\"1\":{\"2604\":1,\"4966\":1}}],[\"要解决这问题\",{\"1\":{\"2530\":1,\"4892\":1}}],[\"要解决\",{\"1\":{\"1256\":1,\"1424\":1,\"1592\":1,\"1760\":1,\"4667\":1}}],[\"要避免多线程由于竞争共享资源而导致数据错乱的问题\",{\"1\":{\"1250\":1,\"1418\":1,\"1586\":1,\"1754\":1,\"4661\":1}}],[\"要把结果传递给主线程的\",{\"1\":{\"1249\":1,\"1417\":1,\"1585\":1,\"1753\":1,\"4660\":1}}],[\"要看使用的编程语言以及平台有关\",{\"1\":{\"1212\":1,\"1380\":1,\"1548\":1,\"1716\":1,\"4623\":1}}],[\"要么全部不完成\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"要么全部完成\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"要么保留到消息达到一定大小的字节数\",{\"1\":{\"1009\":1,\"5185\":1}}],[\"要么保留一定时间\",{\"1\":{\"1009\":1,\"5185\":1}}],[\"要么完全不起作用\",{\"1\":{\"841\":1,\"3858\":1}}],[\"要么都不执行\",{\"1\":{\"839\":1,\"3856\":1}}],[\"要么都执行\",{\"1\":{\"839\":1,\"3856\":1}}],[\"要么用throws子句声明抛出它\",{\"1\":{\"251\":1,\"3647\":1}}],[\"要么用try\",{\"1\":{\"251\":1,\"3647\":1}}],[\"要求排序\",{\"1\":{\"800\":1}}],[\"要实现动态代理的话\",{\"1\":{\"613\":1,\"3806\":1}}],[\"要先定位\",{\"1\":{\"480\":1}}],[\"按先入先出的顺序执行队列中的任务\",{\"1\":{\"3081\":1,\"4335\":1}}],[\"按隔离水平高低排序如下\",{\"1\":{\"2597\":1,\"4959\":1}}],[\"按序到达\",{\"1\":{\"2144\":1}}],[\"按业务划分为一个独立运行的程序\",{\"1\":{\"1798\":1,\"4387\":1}}],[\"按键有序\",{\"1\":{\"797\":1}}],[\"按需分配空间\",{\"1\":{\"476\":1}}],[\"按照应用维度划分\",{\"1\":{\"2370\":1,\"4732\":1}}],[\"按照底层存储方式角度划分\",{\"1\":{\"2367\":1,\"4729\":1}}],[\"按照数据结构维度划分\",{\"1\":{\"2362\":1,\"4724\":1}}],[\"按照注解的规则\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"按照存储的消息大小保留\",{\"1\":{\"1008\":1,\"5184\":1}}],[\"按照过期时间保留\",{\"1\":{\"1007\":1,\"5183\":1}}],[\"按照给定的事务规则来执行提交或者回滚操作\",{\"1\":{\"849\":1,\"3866\":1}}],[\"按照索引位置访问效率比较低\",{\"1\":{\"477\":1}}],[\"按照索引位置进行访问效率很高\",{\"1\":{\"470\":1}}],[\"按照\",{\"1\":{\"393\":1}}],[\"重命名为\",{\"1\":{\"5275\":1}}],[\"重点是基于这几个public方法\",{\"1\":{\"3096\":1,\"4350\":1}}],[\"重量级锁是指当有一个线程获取锁之后\",{\"1\":{\"2851\":1,\"4105\":1}}],[\"重量级锁\",{\"0\":{\"2849\":1,\"4103\":1}}],[\"重要\",{\"1\":{\"2754\":1,\"5116\":1}}],[\"重要的内容\",{\"1\":{\"73\":1,\"3472\":1}}],[\"重启时\",{\"1\":{\"2744\":1,\"5106\":1}}],[\"重启加载\",{\"1\":{\"2744\":1,\"5106\":1}}],[\"重做日志\",{\"1\":{\"2572\":1,\"4934\":1}}],[\"重传等等\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"重复确认了好几遍哈哈哈哈哈哈哈\",{\"1\":{\"3145\":1,\"5425\":1}}],[\"重复\",{\"1\":{\"2114\":1}}],[\"重复数据等\",{\"1\":{\"1956\":1,\"4062\":1}}],[\"重试机制\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"重写简单\",{\"1\":{\"1809\":1,\"4398\":1}}],[\"重写writeobject来实现自定义的序列化\",{\"1\":{\"519\":1}}],[\"重新分配和复制数组的开销被平摊了\",{\"1\":{\"472\":1}}],[\"除非\",{\"1\":{\"3303\":1,\"5572\":1}}],[\"除非数据是被本身事务自己所修改\",{\"1\":{\"855\":1,\"3872\":1}}],[\"除非数组已排序\",{\"1\":{\"471\":1}}],[\"除此之外\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"除了性能之外\",{\"1\":{\"757\":1}}],[\"除了以上这些重要成员变量外\",{\"1\":{\"681\":1}}],[\"除了第一个\",{\"1\":{\"493\":1}}],[\"除了runtimeexception及其子类以外\",{\"1\":{\"251\":1,\"3647\":1}}],[\"除了这三种类加载器之外\",{\"1\":{\"211\":1,\"3605\":1}}],[\"之所以没有使用\",{\"1\":{\"2680\":1,\"5042\":1}}],[\"之上的\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"之上\",{\"1\":{\"2282\":2,\"5364\":2}}],[\"之父也在\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"之后模板显示已经准备好的数据\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"之后已经默认是开启了\",{\"1\":{\"2733\":1,\"5095\":1}}],[\"之后可以在插入数据时\",{\"1\":{\"2516\":1,\"4878\":1}}],[\"之后才有\",{\"1\":{\"1916\":1,\"4505\":1}}],[\"之后server2\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"之后\",{\"1\":{\"1860\":1,\"2389\":1,\"2727\":3,\"4449\":1,\"4751\":1,\"5089\":3}}],[\"之后就不会再传递同样的事件了\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4563\":1}}],[\"之后尽量均衡的将分区分配给消费者\",{\"1\":{\"1030\":1,\"5206\":1}}],[\"之后的每次扩充结果也都是奇数\",{\"1\":{\"766\":1}}],[\"之后的所有调⽤都不会进⼊同步块\",{\"1\":{\"582\":1,\"3775\":1}}],[\"之后每次扩充为原来的2n+1\",{\"1\":{\"765\":1,\"770\":1}}],[\"之后每次扩充为原来的2倍\",{\"1\":{\"742\":1,\"769\":1}}],[\"之前已经提交的修改和该事务本身做的修改\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"之前只有\",{\"1\":{\"2389\":1,\"4751\":1}}],[\"之前名为\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"之前说过\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"之前\",{\"1\":{\"778\":1,\"2321\":1,\"2503\":1,\"2504\":1,\"4683\":1,\"4865\":1,\"4866\":1}}],[\"之前会产生冲突的两个hashcode\",{\"1\":{\"755\":1}}],[\"之前的比较都是基于我们将arraylist转成synchronizedlist\",{\"1\":{\"567\":1}}],[\"之前介绍的map接口的实现类都有一个对应的set接口的实现类\",{\"1\":{\"449\":1}}],[\"之间\",{\"1\":{\"419\":1,\"3744\":1}}],[\"之间的关系\",{\"1\":{\"351\":1}}],[\"添加元素满了之后会自动扩容原来容量的\",{\"1\":{\"3067\":1,\"4321\":1}}],[\"添加元素的效率还可以\",{\"1\":{\"472\":1}}],[\"添加锁和释放锁的大部分操作实际上都是在\",{\"1\":{\"2830\":1,\"4084\":1}}],[\"添加唯一id\",{\"1\":{\"1063\":1,\"5239\":1}}],[\"添加对应的物理分页语句和物理分页参数\",{\"1\":{\"976\":1,\"3993\":1}}],[\"添加n个元素的效率为o\",{\"1\":{\"472\":1,\"485\":1}}],[\"添加\",{\"1\":{\"447\":1,\"482\":1,\"900\":1,\"3917\":1}}],[\"判断是否有权限\",{\"1\":{\"3227\":1,\"3238\":1,\"5496\":1,\"5507\":1}}],[\"判断自动装配开关是否打开\",{\"1\":{\"901\":1,\"3918\":1}}],[\"判断元素是否存在\",{\"1\":{\"443\":1,\"447\":1}}],[\"判断一下\",{\"1\":{\"362\":1}}],[\"没在其他其他接口里出现过\",{\"1\":{\"3312\":1}}],[\"没必要一次执行尽可能多的读写操作\",{\"1\":{\"1153\":1,\"1321\":1,\"1489\":1,\"1657\":1,\"4564\":1}}],[\"没看懂的话其实也没关系\",{\"1\":{\"738\":1}}],[\"没有给http\",{\"1\":{\"5280\":1}}],[\"没有保研吗\",{\"1\":{\"3165\":1,\"5445\":1}}],[\"没有容量\",{\"1\":{\"3066\":1,\"4320\":1}}],[\"没有抢到锁的线程将自旋\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"没有被删除\",{\"1\":{\"2755\":1,\"5117\":1}}],[\"没有开启\",{\"1\":{\"2733\":1,\"5095\":1}}],[\"没有使用其作为索引的数据结构呢\",{\"1\":{\"2350\":1,\"4712\":1}}],[\"没有边界\",{\"1\":{\"2153\":1}}],[\"没有\",{\"1\":{\"2094\":1,\"2095\":1,\"2268\":1,\"5350\":1}}],[\"没有定论\",{\"1\":{\"1920\":1,\"4509\":1}}],[\"没有数据可读写时\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"没有指明partition\",{\"1\":{\"1022\":1,\"5198\":1}}],[\"没有同步方法\",{\"1\":{\"519\":1}}],[\"没有在多个线程之间共享同一个集合\",{\"1\":{\"503\":1}}],[\"没有索引位置的概念\",{\"1\":{\"487\":1}}],[\"没有顺序\",{\"1\":{\"443\":1}}],[\"没有重复元素\",{\"1\":{\"443\":1,\"447\":1}}],[\"没有用到红黑树特有的特性\",{\"1\":{\"432\":1,\"3757\":1}}],[\"没错\",{\"1\":{\"393\":1,\"724\":1}}],[\"个问题\",{\"1\":{\"3278\":1,\"5547\":1}}],[\"个最重要的参数\",{\"1\":{\"3044\":1,\"4298\":1}}],[\"个特性\",{\"1\":{\"2566\":1,\"4928\":1}}],[\"个\",{\"1\":{\"2276\":2,\"2428\":1,\"2691\":1,\"2699\":1,\"2706\":1,\"2714\":1,\"4790\":1,\"5053\":1,\"5061\":1,\"5068\":1,\"5076\":1,\"5358\":2}}],[\"个字节可以存储\",{\"1\":{\"2650\":1,\"5012\":1}}],[\"个字节\",{\"1\":{\"2150\":1,\"2151\":1}}],[\"个记录\",{\"1\":{\"1928\":2,\"4034\":2}}],[\"个缺点\",{\"1\":{\"1232\":1,\"1400\":1,\"1568\":1,\"1736\":1,\"4643\":1}}],[\"个方案都是比较经典的\",{\"1\":{\"1208\":1,\"1376\":1,\"1544\":1,\"1712\":1,\"4619\":1}}],[\"个参数\",{\"1\":{\"612\":1,\"3805\":1}}],[\"个连续的红色节点\",{\"1\":{\"427\":1,\"3752\":1}}],[\"个阶段的顺序如下图所示\",{\"1\":{\"191\":1,\"3585\":1}}],[\"个阶段\",{\"1\":{\"190\":1,\"3584\":1}}],[\"红色节点的父节点都是黑色\",{\"1\":{\"426\":1,\"3751\":1}}],[\"红色节点的子节点都是黑色\",{\"1\":{\"425\":1,\"3750\":1}}],[\"红黑树这种保存所有待检测的\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"红黑树是个高效的数据结构\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"红黑树是统计效率比较高的大致平衡的排序二叉树\",{\"1\":{\"796\":1}}],[\"红黑树是一个二叉搜索树\",{\"1\":{\"421\":1,\"3746\":1}}],[\"红黑树是一种平衡二叉查找树\",{\"1\":{\"461\":1}}],[\"红黑树是一种接近平衡的二叉树\",{\"1\":{\"419\":1,\"3744\":1}}],[\"红黑树是一种自平衡的二叉查找树\",{\"1\":{\"417\":1,\"3742\":1}}],[\"红黑树允许局部很少的不完全平衡\",{\"1\":{\"636\":1,\"3728\":1}}],[\"红黑树与avll树\",{\"1\":{\"636\":1,\"3728\":1}}],[\"红黑树本质上是一棵二叉查找树\",{\"1\":{\"632\":1,\"3724\":1}}],[\"红黑树旋转情况少于avl树\",{\"1\":{\"438\":1,\"3763\":1}}],[\"红黑树整体性能略优于avl树\",{\"1\":{\"438\":1,\"3763\":1}}],[\"红黑树和avl树的比较\",{\"1\":{\"435\":1,\"3760\":1}}],[\"红黑树的插入删除比avl树更便于控制操作\",{\"1\":{\"437\":1,\"3762\":1}}],[\"红黑树的优点就是对有序数据的查询操作不会慢到o\",{\"1\":{\"434\":1,\"3759\":1}}],[\"红黑树的查找\",{\"1\":{\"431\":1,\"3756\":1}}],[\"红黑树的效率\",{\"0\":{\"430\":1,\"3755\":1}}],[\"红黑树的特性\",{\"0\":{\"420\":1,\"3745\":1}}],[\"红黑树保证最长路径不超过最短路径的二倍\",{\"1\":{\"421\":1,\"3746\":1}}],[\"红黑树就出现了\",{\"1\":{\"419\":1,\"3744\":1}}],[\"红黑树具有良好的效率\",{\"1\":{\"417\":1,\"3742\":1}}],[\"红黑树\",{\"0\":{\"415\":1,\"3740\":1},\"1\":{\"446\":1}}],[\"黑色\",{\"1\":{\"424\":1,\"3749\":1}}],[\"空间是否满足要求\",{\"1\":{\"2683\":1,\"5045\":1}}],[\"空间函数等\",{\"1\":{\"2322\":1,\"4684\":1}}],[\"空间局部性是指一旦程序访问了某个存储单元\",{\"1\":{\"1092\":1}}],[\"空节点\",{\"1\":{\"424\":1,\"3749\":1}}],[\"空指针异常\",{\"1\":{\"244\":1,\"3640\":1}}],[\"根本没有经过缓存这一层\",{\"1\":{\"2776\":1,\"5138\":1}}],[\"根本没收到所以会丢弃\",{\"1\":{\"1897\":1,\"4486\":1}}],[\"根本不存在于缓存中\",{\"1\":{\"2776\":1,\"5138\":1}}],[\"根域名服务器是最高层次的\",{\"1\":{\"2298\":1,\"5380\":1}}],[\"根域的\",{\"1\":{\"2293\":1,\"5375\":1}}],[\"根域是在最顶层\",{\"1\":{\"2288\":1,\"5370\":1}}],[\"根\",{\"1\":{\"2290\":1,\"2299\":1,\"5372\":1,\"5381\":1}}],[\"根是黑色\",{\"1\":{\"423\":1,\"3748\":1}}],[\"根据得到的哈希值\",{\"1\":{\"2788\":1,\"5150\":1}}],[\"根据加锁的范围\",{\"1\":{\"2446\":1,\"4808\":1}}],[\"根据主键再回表查数据\",{\"1\":{\"2402\":1,\"4764\":1}}],[\"根据目的\",{\"1\":{\"2255\":1,\"5337\":1}}],[\"根据目的主机\",{\"1\":{\"2252\":1,\"5334\":1}}],[\"根据w3techs的数据\",{\"1\":{\"1974\":1,\"1989\":1,\"2004\":1,\"2017\":1,\"2030\":1,\"2045\":1,\"5265\":1,\"5288\":1}}],[\"根据类别分库分表\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"根据类的二进制名称来查找类\",{\"1\":{\"215\":1,\"3609\":1}}],[\"根据参数再应用到请求上\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"根据参数类型获取对应的构造器\",{\"1\":{\"325\":1,\"3713\":1}}],[\"根据参数类型获取类中某个构造器\",{\"1\":{\"325\":1,\"3713\":1}}],[\"根据返回的\",{\"1\":{\"826\":1,\"3843\":1}}],[\"根据你的配置\",{\"1\":{\"820\":1,\"3837\":1}}],[\"根据获得的\",{\"1\":{\"819\":1,\"3836\":1}}],[\"根据键保存\",{\"1\":{\"799\":1}}],[\"根据键保存和获取值的效率都很高\",{\"1\":{\"666\":1}}],[\"根据元素特征计算元素数组下标的方法就是哈希算法\",{\"1\":{\"717\":1}}],[\"根据元素内容查找和删除的效率比较低\",{\"1\":{\"486\":1}}],[\"根据hash值就可以直接快速定位\",{\"1\":{\"666\":1}}],[\"根据传⼊⼀个唯⼀的标识来获得\",{\"1\":{\"587\":1,\"3780\":1}}],[\"根据传入的条件来决定用hashmap还是linkedhashmap\",{\"1\":{\"292\":1,\"3680\":1}}],[\"根据值查找和删除元素的效率比较低\",{\"1\":{\"495\":1}}],[\"根据实现方式不同主要分为两大类\",{\"1\":{\"457\":1}}],[\"根据\",{\"1\":{\"344\":1,\"976\":1,\"1024\":1,\"3993\":1,\"5200\":1}}],[\"根据名字和参数类型获取对应方法\",{\"1\":{\"323\":2,\"3711\":2}}],[\"根据姓名获取类中的某个变量\",{\"1\":{\"321\":1,\"3709\":1}}],[\"根据变量名获取类中的一个变量\",{\"1\":{\"321\":1,\"3709\":1}}],[\"进而转化成真正的\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"进而提升整体的性能\",{\"1\":{\"419\":1,\"3744\":1}}],[\"进入这个状态后\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"进程会阻塞在读写函数那里\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"进程可以通过一个系统调用函数从内核中获取多个事件\",{\"1\":{\"1136\":1,\"1304\":1,\"1472\":1,\"1640\":1,\"4547\":1}}],[\"进程\",{\"1\":{\"1119\":1,\"1210\":1,\"1238\":1,\"1287\":1,\"1378\":1,\"1406\":1,\"1455\":1,\"1546\":1,\"1574\":1,\"1623\":1,\"1714\":1,\"1742\":1,\"4530\":1,\"4621\":1,\"4649\":1}}],[\"进程间通信\",{\"0\":{\"1110\":1,\"1124\":1,\"1278\":1,\"1292\":1,\"1446\":1,\"1460\":1,\"1614\":1,\"1628\":1,\"4521\":1,\"4535\":1}}],[\"进程间通信方式\",{\"0\":{\"1084\":1,\"4025\":1}}],[\"进程和线程管理\",{\"0\":{\"1102\":1,\"1270\":1,\"1438\":1,\"1606\":1,\"4513\":1}}],[\"进⾏锁竞争\",{\"1\":{\"582\":1,\"3775\":1}}],[\"进行加锁\",{\"1\":{\"2898\":1,\"4152\":1}}],[\"进行加密\",{\"1\":{\"211\":1,\"3605\":1}}],[\"进行\",{\"1\":{\"2874\":1,\"4128\":1}}],[\"进行了很多优化\",{\"1\":{\"2823\":1,\"4077\":1}}],[\"进行了扰动计算\",{\"1\":{\"773\":1}}],[\"进行删除的呢\",{\"1\":{\"2753\":1,\"5115\":1}}],[\"进行查询\",{\"1\":{\"2439\":1,\"4801\":1}}],[\"进行搜索\",{\"1\":{\"2366\":1,\"2376\":1,\"4728\":1,\"4738\":1}}],[\"进行回滚或者提交\",{\"1\":{\"1956\":1,\"4062\":1}}],[\"进行聚合查询\",{\"0\":{\"1946\":1,\"4052\":1}}],[\"进行投票选举的时候会比较\",{\"1\":{\"1900\":1,\"4489\":1}}],[\"进行开发实现\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"进行发送\",{\"1\":{\"1249\":1,\"1417\":1,\"1585\":1,\"1753\":1,\"4660\":1}}],[\"进行分发\",{\"1\":{\"1227\":1,\"1242\":1,\"1395\":1,\"1410\":1,\"1563\":1,\"1578\":1,\"1731\":1,\"1746\":1,\"4638\":1,\"4653\":1}}],[\"进行解析\",{\"1\":{\"818\":1,\"3835\":1}}],[\"进行遍历时要手动进行同步处理\",{\"1\":{\"570\":1}}],[\"进行插入和删除操作\",{\"1\":{\"387\":1}}],[\"进行引用\",{\"1\":{\"125\":1,\"126\":1,\"3524\":1,\"3525\":1}}],[\"能不能将\",{\"1\":{\"3281\":1,\"5550\":1}}],[\"能最晚啥时候\",{\"1\":{\"3116\":1,\"5396\":1}}],[\"能让写入缓存中的最新数据更新写入主内存\",{\"1\":{\"2949\":1,\"4203\":1}}],[\"能告诉我\",{\"1\":{\"2298\":1,\"5380\":1}}],[\"能保证数据的可靠性交付\",{\"1\":{\"2159\":1}}],[\"能建立\",{\"0\":{\"2209\":1,\"2210\":1},\"1\":{\"2094\":1,\"2095\":1}}],[\"能处理写请求嘛\",{\"1\":{\"1877\":1,\"4466\":1}}],[\"能正常调用\",{\"1\":{\"1837\":1,\"4426\":1}}],[\"能在上一次分配的结果的基础上\",{\"1\":{\"1047\":1,\"5223\":1}}],[\"能够命中前者的查询肯定是能够命中后者的\",{\"1\":{\"2434\":1,\"4796\":1}}],[\"能够命中索引\",{\"1\":{\"2434\":1,\"4796\":1}}],[\"能够提供更高的安全性和用户隐私保护\",{\"1\":{\"2283\":1,\"5365\":1}}],[\"能够把报文转发到\",{\"1\":{\"2252\":1,\"5334\":1}}],[\"能够同时保证\",{\"1\":{\"1921\":1,\"4510\":1}}],[\"能够同时监听的\",{\"1\":{\"1144\":1,\"1312\":1,\"1480\":1,\"1648\":1,\"4555\":1}}],[\"能够接收客户端的请求\",{\"1\":{\"1873\":1,\"4462\":1}}],[\"能够发起投票\",{\"1\":{\"1872\":1,\"4461\":1}}],[\"能够自动执行重复性任务\",{\"1\":{\"1777\":1,\"4366\":1}}],[\"能够将那些与业务无关\",{\"1\":{\"806\":1,\"3823\":1}}],[\"能够加快检索速率\",{\"1\":{\"632\":1,\"3724\":1}}],[\"能解决非平衡树问题\",{\"1\":{\"419\":1,\"3744\":1}}],[\"能更好吧\",{\"1\":{\"395\":1}}],[\"递增或者递减\",{\"1\":{\"419\":1,\"3744\":1}}],[\"删除锁\",{\"1\":{\"3294\":1,\"3296\":1,\"5563\":1,\"5565\":1}}],[\"删除文章功能\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"删除与淘汰策略\",{\"0\":{\"2751\":1,\"5113\":1}}],[\"删除操作\",{\"1\":{\"2505\":1,\"4867\":1}}],[\"删除操作比较多\",{\"1\":{\"482\":1}}],[\"删除等动作的发生\",{\"1\":{\"933\":1,\"3950\":1}}],[\"删除等操作时\",{\"1\":{\"744\":1}}],[\"删除等操作\",{\"1\":{\"417\":1,\"3742\":1}}],[\"删除的效率比较高\",{\"1\":{\"799\":1}}],[\"删除的时间复杂度最坏为o\",{\"1\":{\"632\":1,\"3724\":1}}],[\"删除元素的效率很高\",{\"1\":{\"479\":1,\"485\":1}}],[\"删除元素\",{\"1\":{\"443\":1,\"447\":1,\"480\":1}}],[\"删除\",{\"1\":{\"419\":1,\"656\":1,\"3744\":1}}],[\"插队成功\",{\"1\":{\"2990\":1,\"4244\":1}}],[\"插队失败\",{\"1\":{\"2990\":1,\"4244\":1}}],[\"插个题外话\",{\"1\":{\"1145\":1,\"1313\":1,\"1481\":1,\"1649\":1,\"4556\":1}}],[\"插入了一条余额超过\",{\"1\":{\"2589\":1,\"4951\":1}}],[\"插入操作就会发生阻塞\",{\"1\":{\"2559\":1,\"4921\":1}}],[\"插入意向锁如果不在间隙锁区间内则是可以的\",{\"1\":{\"2562\":1,\"4924\":1}}],[\"插入意向锁与间隙锁的另一个非常重要的差别是\",{\"1\":{\"2562\":1,\"4924\":1}}],[\"插入意向锁确实是一种特殊的间隙锁\",{\"1\":{\"2561\":1,\"4923\":1}}],[\"插入意向锁名字虽然有意向锁\",{\"1\":{\"2560\":1,\"4922\":1}}],[\"插入意向锁\",{\"0\":{\"2557\":1,\"4919\":1},\"1\":{\"2561\":1,\"2562\":1,\"4923\":1,\"4924\":1}}],[\"插入或查找的速度肯定比较慢\",{\"1\":{\"2398\":1,\"4760\":1}}],[\"插入的时候优先插入到新的表\",{\"1\":{\"1949\":1,\"4055\":1}}],[\"插入顺序经常用于处理键值对的数据\",{\"1\":{\"802\":1}}],[\"插入和删除容易\",{\"1\":{\"715\":1}}],[\"插入和删除困难\",{\"1\":{\"715\":1}}],[\"插入和删除元素的效率比较低\",{\"1\":{\"473\":1}}],[\"插入和删除操作时\",{\"1\":{\"434\":1,\"3759\":1}}],[\"插入和删除操作\",{\"1\":{\"431\":1,\"3756\":1}}],[\"插入\",{\"1\":{\"419\":1,\"632\":1,\"3724\":1,\"3744\":1}}],[\"插件来实现\",{\"1\":{\"37\":1,\"3436\":1}}],[\"查找\",{\"1\":{\"799\":1}}],[\"查找操作时\",{\"1\":{\"432\":1,\"3757\":1}}],[\"查看是否有记录存在独占锁\",{\"1\":{\"2511\":1,\"4873\":1}}],[\"查看头部元素的效率很高\",{\"1\":{\"494\":1}}],[\"查看详情\",{\"1\":{\"56\":1,\"58\":1,\"61\":1,\"65\":1,\"68\":1,\"71\":1,\"74\":1,\"78\":1,\"81\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"95\":1,\"101\":1,\"103\":1,\"106\":1,\"108\":1,\"110\":1,\"112\":1,\"3455\":1,\"3457\":1,\"3460\":1,\"3464\":1,\"3467\":1,\"3470\":1,\"3473\":1,\"3477\":1,\"3480\":1,\"3483\":1,\"3485\":1,\"3487\":1,\"3489\":1,\"3491\":1,\"3494\":1,\"3500\":1,\"3502\":1,\"3505\":1,\"3507\":1,\"3509\":1,\"3511\":1}}],[\"查询条件中使用\",{\"1\":{\"2443\":1,\"4805\":1}}],[\"查询比如\",{\"1\":{\"2442\":1,\"4804\":1}}],[\"查询速度非常快\",{\"1\":{\"2395\":1,\"4757\":1}}],[\"查询转发表\",{\"1\":{\"2255\":1,\"5337\":1}}],[\"查询分组相同的构造\",{\"1\":{\"2245\":1,\"5327\":1}}],[\"查询分组将广播给该局域网内的所有设备\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"查询分组中\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"查询分组\",{\"1\":{\"2241\":1,\"5323\":1}}],[\"查询的时候\",{\"1\":{\"1949\":1,\"4055\":1}}],[\"查询\",{\"0\":{\"2659\":1,\"5021\":1},\"1\":{\"419\":1,\"2251\":1,\"3744\":1,\"5333\":1}}],[\"简述java内存模型\",{\"0\":{\"2936\":1,\"4190\":1}}],[\"简言之\",{\"1\":{\"2851\":1,\"4105\":1}}],[\"简写\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"简而言之就是\",{\"1\":{\"1917\":1,\"4506\":1}}],[\"简化分布式系统开发\",{\"1\":{\"1819\":1,\"4408\":1}}],[\"简介\",{\"0\":{\"416\":1,\"1905\":1,\"3741\":1,\"4494\":1}}],[\"简单限流可以用到\",{\"1\":{\"2686\":1,\"5048\":1}}],[\"简单动态字符串\",{\"1\":{\"2679\":1,\"5041\":1}}],[\"简单的说就是通信的两方的一种约定\",{\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"4542\":1}}],[\"简单的取模哈希的结果会更加均匀\",{\"1\":{\"767\":1,\"771\":1}}],[\"简单的做法是先求取出键值的hashcode\",{\"1\":{\"744\":1}}],[\"简单点说\",{\"1\":{\"749\":1}}],[\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象\",{\"1\":{\"592\":1,\"3785\":1}}],[\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例\",{\"1\":{\"585\":1,\"3778\":1}}],[\"简单说就是可以一步到位\",{\"1\":{\"470\":1}}],[\"简单翻译\",{\"1\":{\"340\":1}}],[\"简单总结一下双亲委派模型的执行流程\",{\"1\":{\"231\":1,\"3625\":1}}],[\"简单来说\",{\"1\":{\"202\":1,\"345\":1,\"814\":1,\"3596\":1,\"3831\":1}}],[\"面对消息挤压\",{\"1\":{\"3280\":1,\"5549\":1}}],[\"面试官竟然问md5是对称加密还是非对称加密\",{\"1\":{\"3394\":1}}],[\"面试官\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"面试官说看你简历都是java相关\",{\"1\":{\"3160\":1,\"5440\":1}}],[\"面试官说这有java和python\",{\"1\":{\"3153\":1,\"5433\":1}}],[\"面试官说了早上9\",{\"1\":{\"3152\":1,\"5432\":1}}],[\"面试官说不是\",{\"1\":{\"3145\":1,\"5425\":1}}],[\"面试官又给我打了过来\",{\"1\":{\"3149\":1,\"5429\":1}}],[\"面试官的态度极其恶心\",{\"1\":{\"3118\":1,\"5398\":1}}],[\"面试官狗叫\",{\"0\":{\"3117\":1,\"5397\":1}}],[\"面试官会怎么看\",{\"1\":{\"411\":1}}],[\"面试\",{\"0\":{\"3107\":1,\"5387\":1,\"5388\":1,\"5599\":1}}],[\"面试时可用下列\",{\"1\":{\"816\":1,\"3833\":1}}],[\"面向无连接\",{\"1\":{\"2162\":1}}],[\"面向连接\",{\"1\":{\"2112\":1}}],[\"面向切面编程\",{\"1\":{\"806\":1,\"3823\":1}}],[\"面向对象\",{\"1\":{\"366\":1}}],[\"面向我们用户的加载器\",{\"1\":{\"210\":1,\"3604\":1}}],[\"倍以上\",{\"1\":{\"409\":1}}],[\"慢慢往下看\",{\"1\":{\"2385\":1,\"4747\":1}}],[\"慢\",{\"1\":{\"409\":1}}],[\"虽然提高了效率\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"虽然有了合并索引的优化方式\",{\"1\":{\"2657\":1,\"5019\":1}}],[\"虽然支持\",{\"1\":{\"2605\":1,\"4967\":1}}],[\"虽然相同范围的间隙锁是多个事务相互兼容的\",{\"1\":{\"2556\":1,\"4918\":1}}],[\"虽然索引能带来查询上的效率\",{\"1\":{\"2426\":1,\"4788\":1}}],[\"虽然\",{\"1\":{\"2322\":1,\"2342\":1,\"4684\":1,\"4704\":1}}],[\"虽然http\",{\"1\":{\"1971\":1,\"1986\":1,\"2001\":1,\"2014\":1,\"2027\":1,\"2042\":1,\"5262\":1,\"5285\":1}}],[\"虽然hashmap不是线程安全的\",{\"1\":{\"654\":1}}],[\"虽然要额外考虑并发问题\",{\"1\":{\"1253\":1,\"1421\":1,\"1589\":1,\"1757\":1,\"4664\":1}}],[\"虽然这样效率确实是会比hashmap慢一些\",{\"1\":{\"762\":1}}],[\"虽然我们不知道哪个key的hashcode是上面例子中的那两个\",{\"1\":{\"752\":1}}],[\"虽然都是使用桶数组实现的\",{\"1\":{\"660\":1}}],[\"虽然如此\",{\"1\":{\"403\":1}}],[\"虽然变量名称是stack\",{\"1\":{\"391\":1}}],[\"基数统计\",{\"1\":{\"2675\":1,\"5037\":1}}],[\"基于内存\",{\"1\":{\"2670\":1,\"5032\":1}}],[\"基于字节流的传输层通信协议\",{\"1\":{\"2110\":1}}],[\"基于该协议\",{\"1\":{\"1863\":1,\"4452\":1}}],[\"基于\",{\"1\":{\"1776\":1,\"2330\":1,\"2671\":1,\"4365\":1,\"4692\":1,\"5033\":1}}],[\"基于链表的实现\",{\"1\":{\"402\":1}}],[\"基本原理\",{\"0\":{\"2877\":1,\"4131\":1}}],[\"基本数据类型\",{\"0\":{\"2673\":1,\"5035\":1}}],[\"基本一样\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"基本功能\",{\"0\":{\"1855\":1,\"4444\":1}}],[\"基本组件\",{\"0\":{\"1083\":1,\"4024\":1}}],[\"基本的操作都是由hashmap底层实现的\",{\"1\":{\"460\":1}}],[\"基本概念\",{\"0\":{\"176\":1,\"3570\":1}}],[\"动态增加一张表\",{\"0\":{\"1948\":1,\"4054\":1}}],[\"动态生成的代理类\",{\"1\":{\"614\":1,\"3807\":1}}],[\"动态代理更优秀\",{\"1\":{\"626\":1,\"3819\":1}}],[\"动态代理更加灵活\",{\"1\":{\"598\":1,\"604\":1,\"3791\":1,\"3797\":1}}],[\"动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用\",{\"1\":{\"625\":1,\"3818\":1}}],[\"动态代理是在运行时动态生成类字节码\",{\"1\":{\"605\":1,\"3798\":1}}],[\"动态代理只能代理实现了接口的类或者直接代理接口\",{\"1\":{\"625\":1,\"3818\":1}}],[\"动态代理对比\",{\"0\":{\"624\":1,\"3817\":1}}],[\"动态代理和\",{\"0\":{\"624\":1,\"3817\":1}}],[\"动态代理有一个最致命的问题是其只能代理实现了接口的类\",{\"1\":{\"617\":1,\"3810\":1}}],[\"动态代理等等\",{\"1\":{\"608\":1,\"3801\":1}}],[\"动态代理\",{\"0\":{\"3796\":1},\"1\":{\"608\":1,\"619\":2,\"3801\":1,\"3812\":2}}],[\"动态代理的实现方式有很多种\",{\"1\":{\"608\":1,\"3801\":1}}],[\"动态代理在我们日常开发中使用的相对较少\",{\"1\":{\"607\":1,\"3800\":1}}],[\"动态代理机制来避免\",{\"1\":{\"618\":1,\"3811\":1}}],[\"动态代理机制中\",{\"1\":{\"610\":1,\"620\":1,\"3803\":1,\"3813\":1}}],[\"动态代理机制\",{\"0\":{\"609\":1,\"616\":1,\"3802\":1,\"3809\":1},\"1\":{\"604\":1,\"3797\":1}}],[\"动态扩展需要的内存分配以及数组复制开销可以被平摊\",{\"1\":{\"485\":1}}],[\"动态数组是可以进行扩容操作的\",{\"1\":{\"401\":1}}],[\"动物\",{\"1\":{\"364\":1}}],[\"做了些什么\",{\"1\":{\"3150\":1,\"5430\":1}}],[\"做了很多事情\",{\"1\":{\"792\":1}}],[\"做按位与运算\",{\"1\":{\"734\":1}}],[\"做为\",{\"1\":{\"396\":1}}],[\"做成一个\",{\"1\":{\"388\":1}}],[\"做成了一个类\",{\"1\":{\"384\":1}}],[\"多版本并发控制\",{\"1\":{\"2574\":1,\"4936\":1}}],[\"多列值组成一个索引\",{\"1\":{\"2375\":1,\"4737\":1}}],[\"多路平衡查找树\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"多路复用接口\",{\"1\":{\"1227\":1,\"1242\":1,\"1395\":1,\"1410\":1,\"1563\":1,\"1578\":1,\"1731\":1,\"1746\":1,\"4638\":1,\"4653\":1}}],[\"多路复用技术\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"4545\":1}}],[\"多路复用\",{\"0\":{\"1133\":1,\"1301\":1,\"1469\":1,\"1637\":1,\"4544\":1},\"1\":{\"2270\":1,\"2671\":1,\"5033\":1,\"5352\":1}}],[\"多请求复用一个\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"多对多的交互通信\",{\"1\":{\"2142\":1}}],[\"多于\",{\"1\":{\"1858\":2,\"4447\":2}}],[\"多个线程不按照申请锁的顺序去获得锁\",{\"1\":{\"2990\":1,\"4244\":1}}],[\"多个线程按照申请锁的顺序去获得锁\",{\"1\":{\"2987\":1,\"4241\":1}}],[\"多个线程共享的内存\",{\"1\":{\"2938\":1,\"4192\":1}}],[\"多个线程竞争偏向锁导致偏向锁升级为轻量级锁\",{\"1\":{\"2847\":1,\"4101\":1}}],[\"多个字段在一个索引上\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"多个消费者\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"多个人给一个主播打赏怎么设计\",{\"0\":{\"1927\":1,\"4033\":1}}],[\"多个节点之前的网络本来是连通的\",{\"1\":{\"1913\":1,\"4502\":1}}],[\"多个模块\",{\"1\":{\"1795\":1,\"4384\":1}}],[\"多个请求复用了一个进程\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"多核\",{\"1\":{\"1233\":1,\"1401\":1,\"1569\":1,\"1737\":1,\"4644\":1}}],[\"多线程并发操作\",{\"1\":{\"2993\":1,\"4247\":1}}],[\"多线程与高并发\",{\"0\":{\"2819\":1,\"4073\":1}}],[\"多线程和高并发\",{\"0\":{\"2818\":1,\"4072\":1,\"5593\":1}}],[\"多线程的实现机制\",{\"0\":{\"2816\":1,\"5178\":1}}],[\"多线程的方案要简单的多\",{\"1\":{\"1264\":1,\"1432\":1,\"1600\":1,\"1768\":1,\"4675\":1}}],[\"多线程的方案虽然看起来复杂的\",{\"1\":{\"1264\":1,\"1432\":1,\"1600\":1,\"1768\":1,\"4675\":1}}],[\"多线程的方案\",{\"1\":{\"1251\":1,\"1419\":1,\"1587\":1,\"1755\":1,\"4662\":1}}],[\"多线程的方案优势在于能够充分利用多核\",{\"1\":{\"1248\":1,\"1416\":1,\"1584\":1,\"1752\":1,\"4659\":1}}],[\"多线程实现起来很麻烦\",{\"1\":{\"1252\":1,\"1420\":1,\"1588\":1,\"1756\":1,\"4663\":1}}],[\"多线程\",{\"0\":{\"1237\":1,\"1405\":1,\"1573\":1,\"1741\":1,\"4648\":1},\"1\":{\"1210\":1,\"1238\":1,\"1239\":1,\"1378\":1,\"1406\":1,\"1407\":1,\"1546\":1,\"1574\":1,\"1575\":1,\"1714\":1,\"1742\":1,\"1743\":1,\"3041\":1,\"4295\":1,\"4621\":1,\"4649\":1,\"4650\":1}}],[\"多\",{\"0\":{\"1255\":1,\"1423\":1,\"1591\":1,\"1759\":1,\"4666\":1},\"1\":{\"1205\":1,\"1206\":1,\"1207\":1,\"1211\":1,\"1256\":2,\"1257\":1,\"1264\":1,\"1373\":1,\"1374\":1,\"1375\":1,\"1379\":1,\"1424\":2,\"1425\":1,\"1432\":1,\"1541\":1,\"1542\":1,\"1543\":1,\"1547\":1,\"1592\":2,\"1593\":1,\"1600\":1,\"1709\":1,\"1710\":1,\"1711\":1,\"1715\":1,\"1760\":2,\"1761\":1,\"1768\":1,\"4616\":1,\"4617\":1,\"4618\":1,\"4622\":1,\"4667\":2,\"4668\":1,\"4675\":1}}],[\"多进程的模式\",{\"1\":{\"1253\":1,\"1421\":1,\"1589\":1,\"1757\":1,\"4664\":1}}],[\"多进程的方案\",{\"1\":{\"1238\":1,\"1251\":1,\"1406\":1,\"1419\":1,\"1574\":1,\"1587\":1,\"1742\":1,\"1755\":1,\"4649\":1,\"4662\":1}}],[\"多进程相比单\",{\"1\":{\"1252\":1,\"1420\":1,\"1588\":1,\"1756\":1,\"4663\":1}}],[\"多进程\",{\"0\":{\"1237\":1,\"1255\":1,\"1405\":1,\"1423\":1,\"1573\":1,\"1591\":1,\"1741\":1,\"1759\":1,\"4648\":1,\"4666\":1},\"1\":{\"1204\":1,\"1206\":1,\"1211\":1,\"1238\":1,\"1256\":1,\"1257\":1,\"1372\":1,\"1374\":1,\"1379\":1,\"1406\":1,\"1424\":1,\"1425\":1,\"1540\":1,\"1542\":1,\"1547\":1,\"1574\":1,\"1592\":1,\"1593\":1,\"1708\":1,\"1710\":1,\"1715\":1,\"1742\":1,\"1760\":1,\"1761\":1,\"4615\":1,\"4617\":1,\"4622\":1,\"4649\":1,\"4667\":1,\"4668\":1}}],[\"多机器并发\",{\"1\":{\"1019\":1,\"5195\":1}}],[\"多partition分布式存储\",{\"1\":{\"1017\":1,\"5193\":1}}],[\"多组循环依赖\",{\"1\":{\"873\":1,\"3890\":1}}],[\"多研究一下如何处理这些历史遗留问题\",{\"1\":{\"395\":1}}],[\"多用组合\",{\"1\":{\"366\":1}}],[\"少数消息就会再次消费一次\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗\",{\"1\":{\"641\":1,\"3733\":1}}],[\"少打一些官司\",{\"1\":{\"395\":1}}],[\"少用继承\",{\"1\":{\"366\":1}}],[\"或轻量级锁\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"或锁机制来保证的\",{\"1\":{\"2574\":1,\"4936\":1}}],[\"或其变种\",{\"1\":{\"2353\":1,\"4715\":1}}],[\"或是当\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"或join\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"或notifyall\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"或\",{\"1\":{\"824\":1,\"901\":1,\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"2413\":1,\"2975\":1,\"3841\":1,\"3918\":1,\"4229\":1,\"4565\":1,\"4775\":1}}],[\"或许直接升级http\",{\"1\":{\"1975\":1,\"1990\":1,\"2005\":1,\"2018\":1,\"2031\":1,\"2046\":1,\"5266\":1,\"5289\":1}}],[\"或许\",{\"1\":{\"395\":1}}],[\"或者其它原因导致的任务暂停而带来的影响\",{\"1\":{\"3076\":1,\"4330\":1}}],[\"或者我们直接通过\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"或者反过来\",{\"1\":{\"2695\":1,\"5057\":1}}],[\"或者在执行过程中遇到范围查询\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"或者平时保持一定的流量\",{\"1\":{\"1963\":1,\"4069\":1}}],[\"或者说覆盖\",{\"1\":{\"2374\":1,\"2409\":1,\"4736\":1,\"4771\":1}}],[\"或者说短任务线程多\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"或者说我想要方便在中间插入和删除的同步的链表\",{\"1\":{\"567\":1}}],[\"或者一致性\",{\"1\":{\"1917\":1,\"4506\":1}}],[\"或者显式地删除一个消息队列时\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"或者i\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"或者发出了i\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"或者redis天然的set结构\",{\"1\":{\"1064\":1,\"5240\":1}}],[\"或者你可以找几个例子试一下\",{\"1\":{\"738\":1}}],[\"或者经常需要在中间进行插入和删除\",{\"1\":{\"489\":1}}],[\"或者\",{\"1\":{\"378\":1,\"381\":1,\"393\":1,\"1918\":1,\"2536\":1,\"4507\":1,\"4898\":1}}],[\"破坏了封装性\",{\"1\":{\"392\":1}}],[\"毕竟也存在上下文的切换\",{\"1\":{\"1155\":1,\"1323\":1,\"1491\":1,\"1659\":1,\"4566\":1}}],[\"毕竟\",{\"1\":{\"392\":1,\"2340\":1,\"4702\":1}}],[\"毕竟继承关系看起来更\",{\"1\":{\"366\":1}}],[\"自己在接口里记录\",{\"1\":{\"3307\":1}}],[\"自己造缓存轮子的时候需要格外考虑的东西\",{\"1\":{\"2754\":1,\"5116\":1}}],[\"自媒体端发布文章后\",{\"1\":{\"3252\":1,\"5521\":1}}],[\"自媒体等微服务\",{\"1\":{\"3195\":1,\"5464\":1}}],[\"自我介绍\",{\"0\":{\"3322\":1,\"5573\":1},\"1\":{\"3119\":1,\"3179\":1,\"5399\":1}}],[\"自带的\",{\"1\":{\"2999\":1,\"4253\":1}}],[\"自旋长时间不能成功就会给\",{\"1\":{\"2893\":1,\"4147\":1}}],[\"自旋开销问题\",{\"0\":{\"2892\":1,\"4146\":1},\"1\":{\"2902\":1,\"4156\":1}}],[\"自旋锁缺点\",{\"1\":{\"2973\":1,\"4227\":1}}],[\"自旋锁只是将当前线程不停地执行循环体\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"自旋锁是采用让当前线程不停地在循环体内执行\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"自旋锁\",{\"0\":{\"2971\":1,\"4225\":1},\"1\":{\"2847\":1,\"4101\":1}}],[\"自增锁还是要等语句结束后才被释放\",{\"1\":{\"2528\":1,\"4890\":1}}],[\"自增锁在申请之后就马上释放\",{\"1\":{\"2527\":1,\"4889\":1}}],[\"自动提交的话会有一个问题\",{\"1\":{\"3211\":1,\"5480\":1}}],[\"自动化部署\",{\"1\":{\"1800\":1,\"4389\":1}}],[\"自动化的插件配置\",{\"1\":{\"953\":1,\"3970\":1}}],[\"自动化的资源过滤\",{\"1\":{\"952\":1,\"3969\":1}}],[\"自动配置类其实就是通过\",{\"1\":{\"900\":1,\"3917\":1}}],[\"自身提交了这个事务并且要发送给所有\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"自身创建的原则下\",{\"1\":{\"898\":1,\"3915\":1}}],[\"自身依赖于自身\",{\"1\":{\"873\":1,\"3890\":1}}],[\"自然也能在同一端进行插入和删除\",{\"1\":{\"388\":1}}],[\"自定义同步器在实现时候只需要实现共享资源state的获取和释放即可\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"自定义异常\",{\"1\":{\"920\":1,\"3937\":1}}],[\"自定义它们\",{\"1\":{\"140\":1,\"3539\":1}}],[\"自定义对齐\",{\"0\":{\"62\":1,\"3461\":1}}],[\"自定义标题\",{\"1\":{\"45\":1,\"48\":1,\"50\":1,\"52\":1,\"54\":1,\"3444\":1,\"3447\":1,\"3449\":1,\"3451\":1,\"3453\":1}}],[\"自定义容器\",{\"0\":{\"43\":1,\"3442\":1}}],[\"同财务相关的金额类数据必须使用\",{\"0\":{\"2647\":1,\"5009\":1}}],[\"同时作为消息中间件异步消费任务\",{\"1\":{\"3199\":1,\"5468\":1}}],[\"同时这样对数据库性能开销影响也很大\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"同时阻塞该线程\",{\"1\":{\"2913\":1,\"4167\":1}}],[\"同时加\",{\"1\":{\"2896\":1,\"4150\":1}}],[\"同时\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"同时对\",{\"1\":{\"2114\":1}}],[\"同时还实现了二进制分帧\",{\"1\":{\"1979\":1,\"1994\":1,\"2035\":1,\"2050\":1,\"5270\":1}}],[\"同时集群中已经有过半的机器与该\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"同时设置了\",{\"1\":{\"1013\":1,\"5189\":1}}],[\"同一局域网内的\",{\"0\":{\"2236\":1,\"5318\":1},\"1\":{\"2234\":1,\"5316\":1}}],[\"同一项目的不同模块不同功能互相抢占资源\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"同一端出\",{\"1\":{\"388\":1}}],[\"同理\",{\"1\":{\"641\":1,\"3733\":1}}],[\"同步队列\",{\"1\":{\"3066\":1,\"4320\":1}}],[\"同步队列中\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"同步语句块的实现使用的是\",{\"1\":{\"3001\":1,\"3014\":1,\"4255\":1,\"4268\":1}}],[\"同步语句块的情况\",{\"0\":{\"2997\":1,\"4251\":1}}],[\"同步\",{\"1\":{\"2853\":1,\"4107\":1}}],[\"同步到到磁盘\",{\"1\":{\"2748\":1,\"5110\":1}}],[\"同步一次\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"同步硬盘操作通常依赖于系统调度机制\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"同步保存操作\",{\"1\":{\"2730\":1,\"5092\":1}}],[\"同步更新数据\",{\"1\":{\"1877\":1,\"4466\":1}}],[\"同步的关系\",{\"1\":{\"1119\":1,\"1287\":1,\"1455\":1,\"1623\":1,\"4530\":1}}],[\"同步阻塞\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"同步块的⽬的与之前相同\",{\"1\":{\"582\":1,\"3775\":1}}],[\"同步块可以更加精确的控制锁的作用域\",{\"1\":{\"560\":1}}],[\"同步方法的锁的作用域就是整个方法\",{\"1\":{\"560\":1}}],[\"同步代码块可以选择对哪个对象加锁\",{\"1\":{\"561\":1}}],[\"同步代码块在锁定的范围上可能比同步方法要小\",{\"1\":{\"559\":1}}],[\"同步代码块和同步方法的区别\",{\"1\":{\"557\":1}}],[\"同步处理\",{\"1\":{\"523\":1}}],[\"同学的看法\",{\"1\":{\"411\":1}}],[\"同样会降低查询性能\",{\"1\":{\"2430\":1,\"4792\":1}}],[\"同样为了避免不太好的key的hashcode设计\",{\"1\":{\"790\":1}}],[\"同样作为一种特殊的线性数据结构\",{\"1\":{\"383\":1}}],[\"同样可以构造一个实例\",{\"1\":{\"317\":1,\"3705\":1}}],[\"什么叫具有唯一性的字符串呢\",{\"1\":{\"3313\":1}}],[\"什么叫能体现该接口特性的字符串呢\",{\"1\":{\"3312\":1}}],[\"什么垃圾玩意\",{\"1\":{\"3118\":1,\"5398\":1}}],[\"什么是代理模式\",{\"0\":{\"3788\":1}}],[\"什么是设计模式\",{\"0\":{\"3767\":1}}],[\"什么是反射机制\",{\"0\":{\"3672\":1}}],[\"什么是md5\",{\"0\":{\"3325\":1}}],[\"什么是aqs\",{\"0\":{\"2905\":1,\"4159\":1}}],[\"什么是缓存雪崩\",{\"0\":{\"2802\":1,\"5164\":1}}],[\"什么是缓存击穿\",{\"0\":{\"2793\":1,\"5155\":1}}],[\"什么是缓存穿透\",{\"0\":{\"2775\":1,\"5137\":1}}],[\"什么是网络分区\",{\"1\":{\"1912\":1,\"4501\":1}}],[\"什么是feign\",{\"1\":{\"1845\":1,\"4434\":1}}],[\"什么是断路器\",{\"1\":{\"1832\":1,\"4421\":1}}],[\"什么是spring\",{\"0\":{\"941\":1,\"1792\":1,\"3958\":1,\"4381\":1}}],[\"什么是\",{\"0\":{\"386\":1,\"1774\":1,\"2724\":1,\"2732\":1,\"2861\":1,\"4115\":1,\"4363\":1,\"5086\":1,\"5094\":1},\"1\":{\"1838\":1,\"2058\":1,\"2059\":1,\"2073\":1,\"4427\":1}}],[\"什么时候执⾏\",{\"1\":{\"268\":1}}],[\"解锁时\",{\"1\":{\"2969\":1,\"4223\":1}}],[\"解锁\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"解锁操作\",{\"1\":{\"1121\":1,\"1289\":1,\"1457\":1,\"1625\":1,\"4532\":1}}],[\"解决办法\",{\"1\":{\"3206\":1,\"3212\":1,\"3220\":1,\"5475\":1,\"5481\":1,\"5489\":1}}],[\"解决资源不足的问题\",{\"1\":{\"3087\":1,\"4341\":1}}],[\"解决的方案有两种\",{\"1\":{\"2607\":1,\"4969\":1}}],[\"解决方案\",{\"0\":{\"1060\":1,\"5236\":1},\"1\":{\"878\":1,\"2894\":1,\"3289\":1,\"3895\":1,\"4148\":1,\"5558\":1}}],[\"解码成java\",{\"1\":{\"1848\":1,\"4437\":1}}],[\"解密的场景\",{\"1\":{\"927\":1,\"3944\":1}}],[\"解释器\",{\"1\":{\"577\":1,\"3770\":1}}],[\"解耦了\",{\"1\":{\"378\":1}}],[\"解析请求对应的\",{\"1\":{\"814\":1,\"3831\":1}}],[\"解析\",{\"1\":{\"190\":1,\"2216\":1,\"2255\":1,\"2309\":1,\"3584\":1,\"5298\":1,\"5337\":1}}],[\"从原数据计算出md5值很容易\",{\"1\":{\"3332\":1}}],[\"从项目的整体架构到具体功能实现细节都说了\",{\"1\":{\"3147\":1,\"5427\":1}}],[\"从字面意思也能猜到个大概\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"从使用层面来说\",{\"1\":{\"2908\":1,\"4162\":1}}],[\"从数据集\",{\"1\":{\"2767\":1,\"5129\":1}}],[\"从已设置过期时间的数据集\",{\"1\":{\"2763\":1,\"2764\":1,\"2765\":1,\"2770\":1,\"5125\":1,\"5126\":1,\"5127\":1,\"5132\":1}}],[\"从句\",{\"1\":{\"2664\":1,\"5026\":1}}],[\"从库的自增值就是什么\",{\"1\":{\"2530\":1,\"4892\":1}}],[\"从左到右依次到查询条件中去匹配\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"从这个名字中我们也可以发现\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"从这个角度\",{\"1\":{\"383\":1}}],[\"从一个局域网到另一个局域网中的网络设备的寻址\",{\"1\":{\"2235\":1,\"5317\":1}}],[\"从上图可以看到\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"从上面thread类\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"从上面我们可以看出\",{\"1\":{\"3001\":1,\"4255\":1}}],[\"从上面的这段代码来看\",{\"1\":{\"1096\":1}}],[\"从上面图中可以看到\",{\"1\":{\"755\":1}}],[\"从上面两段代码中发现有两处不同\",{\"1\":{\"540\":1}}],[\"从下图你可以看到\",{\"1\":{\"1142\":1,\"1310\":1,\"1478\":1,\"1646\":1,\"4553\":1}}],[\"从下图可以看到这个文件的配置内容都被我们读取到了\",{\"1\":{\"907\":1,\"3924\":1}}],[\"从查询出来映射生成的\",{\"1\":{\"982\":1,\"3999\":1}}],[\"从而避免了线程安全问题\",{\"1\":{\"3022\":1,\"4276\":1}}],[\"从而避免了参数也作为条件的一部分\",{\"1\":{\"2637\":1,\"4999\":1}}],[\"从而执行相应的同步调用\",{\"1\":{\"3011\":1,\"4265\":1}}],[\"从而造成了可见性问题\",{\"1\":{\"2941\":1,\"4195\":1}}],[\"从而到底提高程序性能的目的\",{\"1\":{\"2854\":1,\"4108\":1}}],[\"从而消耗大量的系统资\",{\"1\":{\"2851\":1,\"4105\":1}}],[\"从而降低获取锁带来的消耗\",{\"1\":{\"2843\":1,\"4097\":1}}],[\"从而对\",{\"1\":{\"2283\":1,\"5365\":1}}],[\"从而减少了客户端的请求次数和延迟\",{\"1\":{\"2273\":1,\"5355\":1}}],[\"从而支持虚拟主机的功能\",{\"1\":{\"2268\":1,\"5350\":1}}],[\"从而提高系统的负载能力\",{\"1\":{\"1811\":1,\"4400\":1}}],[\"从而提高查询效率\",{\"1\":{\"982\":1,\"984\":1,\"3999\":1,\"4001\":1}}],[\"从而解放了开发人员以便他们专注在真正重要的事情上\",{\"1\":{\"1777\":1,\"4366\":1}}],[\"从而大幅提升了\",{\"1\":{\"1192\":1,\"1360\":1,\"1528\":1,\"1696\":1,\"4603\":1}}],[\"从而导致\",{\"1\":{\"3066\":1,\"3090\":1,\"3091\":1,\"3092\":1,\"4320\":1,\"4344\":1,\"4345\":1,\"4346\":1}}],[\"从而导致消息重复消费\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"从而导致offset自动提交失败\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"从而保证共享变量的可见性\",{\"1\":{\"2943\":1,\"4197\":1}}],[\"从而保证插入数据时\",{\"1\":{\"2519\":1,\"4881\":1}}],[\"从而保证最终结果为正整数\",{\"1\":{\"790\":1}}],[\"从而保证分布均匀\",{\"1\":{\"638\":1,\"3730\":1}}],[\"从而保证了红黑树的查找\",{\"1\":{\"632\":1,\"3724\":1}}],[\"从2进制角度来看\",{\"1\":{\"737\":1}}],[\"从16扩容到32\",{\"1\":{\"697\":1}}],[\"从\",{\"1\":{\"602\":1,\"605\":1,\"1183\":1,\"1351\":1,\"1519\":1,\"1687\":1,\"1889\":1,\"2568\":1,\"2891\":1,\"2898\":1,\"3795\":1,\"3798\":1,\"4145\":1,\"4152\":1,\"4478\":1,\"4594\":1,\"4930\":1}}],[\"从内部实现机制来讲arraylist和vector都是使用数组\",{\"1\":{\"556\":1}}],[\"从remove方法中我们发现除了一个使用同步方法\",{\"1\":{\"550\":1}}],[\"从两端进行操作\",{\"1\":{\"489\":1}}],[\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\",{\"1\":{\"428\":1,\"3753\":1}}],[\"从根节点到叶子节点的所有路径上不能有\",{\"1\":{\"427\":1,\"3752\":1}}],[\"从时间复杂度的角度\",{\"1\":{\"402\":1}}],[\"从他们的角度看\",{\"1\":{\"381\":1}}],[\"从用户的角度看\",{\"1\":{\"377\":1}}],[\"从程序语法角度讲是必须进行处理的异常\",{\"1\":{\"247\":1,\"3643\":1}}],[\"弃用\",{\"1\":{\"369\":1,\"370\":1}}],[\"说⼀说简单⼯⼚模式\",{\"0\":{\"3777\":1}}],[\"说我python写得多\",{\"1\":{\"3187\":1}}],[\"说完他是干啥的以及插值表达式\",{\"1\":{\"3129\":1,\"5409\":1}}],[\"说明该元素不在布隆过滤器中\",{\"1\":{\"2791\":1,\"5153\":1}}],[\"说明查询分组已经到达了主机\",{\"1\":{\"2243\":1,\"5325\":1}}],[\"说说意向锁\",{\"1\":{\"2502\":1,\"4864\":1}}],[\"说\",{\"1\":{\"2299\":1,\"5381\":1}}],[\"说到业余爱好的话\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"说到崩溃恢复我们首先要提到\",{\"1\":{\"1883\":1,\"4472\":1}}],[\"说到动态代理\",{\"1\":{\"606\":1,\"3799\":1}}],[\"说白了就是\",{\"1\":{\"1877\":1,\"4466\":1}}],[\"说白了就是一个变量在程序运行过程中\",{\"1\":{\"1093\":1}}],[\"说出主要的组件\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"说它是接近平衡因为它并没有像avl树的平衡因子的概念\",{\"1\":{\"419\":1,\"3744\":1}}],[\"说得再绝对一些\",{\"1\":{\"366\":1}}],[\"说一下红黑树\",{\"1\":{\"3141\":1,\"5421\":1}}],[\"说一下\",{\"0\":{\"177\":1,\"3571\":1}}],[\"组织的一个索引结构\",{\"1\":{\"2343\":1,\"2360\":1,\"4705\":1,\"4722\":1}}],[\"组件丰富\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"组合在自定义同步组件的实现中\",{\"1\":{\"2927\":1,\"4181\":1}}],[\"组合索引\",{\"1\":{\"2413\":1,\"4775\":1}}],[\"组合\",{\"1\":{\"577\":1,\"3770\":1}}],[\"组合更常见\",{\"1\":{\"366\":1}}],[\"组成关系更常用\",{\"1\":{\"364\":1}}],[\"叫做\",{\"1\":{\"365\":1,\"1959\":1,\"4065\":1}}],[\"人\",{\"1\":{\"364\":1,\"2782\":1,\"5144\":1}}],[\"人类很可能想不清楚\",{\"1\":{\"362\":1}}],[\"换句话说\",{\"1\":{\"363\":1}}],[\"毛病不大\",{\"1\":{\"361\":1}}],[\"听起来似乎说\",{\"1\":{\"361\":1}}],[\"听过无数遍\",{\"1\":{\"352\":1}}],[\"显卡\",{\"1\":{\"358\":2}}],[\"车里有一台发动机\",{\"1\":{\"357\":1}}],[\"有字母数字下划线大小写等乱七八糟各种要求\",{\"1\":{\"3352\":1}}],[\"有2\",{\"1\":{\"3187\":1}}],[\"有获得过奖学金吗\",{\"1\":{\"3167\":1,\"5447\":1}}],[\"有可能会造成系统创建大量同类线程而导致消耗完内存或者\",{\"1\":{\"3087\":1,\"4341\":1}}],[\"有可变长的\",{\"1\":{\"2168\":1}}],[\"有什么理由还升http\",{\"1\":{\"5280\":1}}],[\"有什么用\",{\"0\":{\"3019\":1,\"4273\":1}}],[\"有什么区别\",{\"0\":{\"2264\":1,\"2269\":1,\"2274\":1,\"2279\":1,\"2320\":1,\"4682\":1,\"5346\":1,\"5351\":1,\"5356\":1,\"5361\":1}}],[\"有什么区别呢\",{\"0\":{\"2134\":1},\"1\":{\"2061\":1}}],[\"有公平锁\",{\"1\":{\"2830\":1,\"4084\":1}}],[\"有几个哈希函数得到几个哈希值\",{\"1\":{\"2787\":1,\"5149\":1}}],[\"有没有参加过团体活动\",{\"1\":{\"3158\":1,\"5438\":1}}],[\"有没有其他办法呢\",{\"1\":{\"2898\":1,\"4152\":1}}],[\"有没有感觉布隆过滤器就是我们想要找的那个\",{\"1\":{\"2782\":1,\"5144\":1}}],[\"有没有一种办法可以让你不修改代码呢\",{\"1\":{\"295\":1,\"3683\":1}}],[\"有哪些解决办法\",{\"0\":{\"2777\":1,\"2795\":1,\"2806\":1,\"5139\":1,\"5157\":1,\"5168\":1}}],[\"有哪些常用的\",{\"0\":{\"941\":1,\"3958\":1}}],[\"有\",{\"1\":{\"2568\":1,\"2898\":1,\"4152\":1,\"4930\":1}}],[\"有的数据库只实现了其中几种隔离级别\",{\"1\":{\"2605\":1,\"4967\":1}}],[\"有的\",{\"1\":{\"2462\":1,\"4824\":1}}],[\"有拥塞控制和流量控制机制\",{\"1\":{\"2147\":1}}],[\"有一批帖子\",{\"0\":{\"1944\":1,\"4050\":1}}],[\"有一个简单并且适用面比较广的公式\",{\"1\":{\"3075\":1,\"4329\":1}}],[\"有一个开发工具\",{\"1\":{\"929\":1,\"3946\":1}}],[\"有一个是支持传入initialcapacity的\",{\"1\":{\"690\":1}}],[\"有一个\",{\"1\":{\"356\":1,\"2128\":1,\"2176\":1}}],[\"有些情况下我们反而希望把很多次锁的请求合并成一个请求\",{\"1\":{\"2853\":1,\"4107\":1}}],[\"有些伙伴可能有疑惑\",{\"1\":{\"1940\":1,\"4046\":1}}],[\"有些场景下\",{\"1\":{\"455\":1}}],[\"有选举权和被选举权\",{\"1\":{\"1873\":1,\"4462\":1}}],[\"有恢复迹象\",{\"1\":{\"1836\":1,\"4425\":1}}],[\"有sink\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"有利于提高开发效率\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"有利于资源重复利用\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"有所不同\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"有事件发生时\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"有名管道以磁盘文件的方式存在\",{\"1\":{\"1126\":1,\"1294\":1,\"1462\":1,\"1630\":1,\"4537\":1}}],[\"有名管道严格遵循\",{\"1\":{\"1126\":1,\"1294\":1,\"1462\":1,\"1630\":1,\"4537\":1}}],[\"有名管道\",{\"1\":{\"1126\":1,\"1294\":1,\"1462\":1,\"1630\":1,\"4537\":1}}],[\"有多个consumer去消费\",{\"1\":{\"1070\":1,\"5246\":1}}],[\"有3个consumer\",{\"1\":{\"1053\":1,\"5229\":1}}],[\"有3个topic\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"有4个topic\",{\"1\":{\"1052\":1,\"5228\":1}}],[\"有两种数据保存策略\",{\"1\":{\"1006\":1,\"5182\":1}}],[\"有了彩虹表\",{\"1\":{\"3352\":1}}],[\"有了它\",{\"1\":{\"942\":1,\"3959\":1}}],[\"有了二级缓存都能解决\",{\"1\":{\"893\":1,\"3910\":1}}],[\"有了二级缓存其实这个事处理起来就容易了\",{\"1\":{\"888\":1,\"3905\":1}}],[\"有了同步块\",{\"1\":{\"582\":1,\"3775\":1}}],[\"有人可能要问了\",{\"1\":{\"2878\":1,\"4132\":1}}],[\"有人认为\",{\"1\":{\"762\":1}}],[\"有人也并不建议使用\",{\"1\":{\"396\":1}}],[\"有符号数用最高位作为符号位\",{\"1\":{\"757\":1}}],[\"有顺序\",{\"1\":{\"453\":1}}],[\"有序集合比较典型的使用场景就是排行榜\",{\"1\":{\"2718\":1,\"5080\":1}}],[\"有序集合\",{\"0\":{\"2711\":1,\"5073\":1},\"1\":{\"2674\":1,\"5036\":1}}],[\"有序的\",{\"1\":{\"2114\":1}}],[\"有序\",{\"1\":{\"447\":1}}],[\"有如下特点\",{\"1\":{\"442\":1,\"491\":1}}],[\"猫是一个动物\",{\"1\":{\"354\":1}}],[\"即盐值salt\",{\"1\":{\"3369\":1}}],[\"即一种基于模板和要改变的数据\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"即一条连接只有两个端点\",{\"1\":{\"2141\":1}}],[\"即永远不会阻塞\",{\"1\":{\"3067\":1,\"4321\":1}}],[\"即将暂时获取不到锁的线程加入到队列中\",{\"1\":{\"2915\":1,\"4169\":1}}],[\"即队列同步器\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"即不存在多个线程的竞争时\",{\"1\":{\"2843\":1,\"4097\":1}}],[\"即下一个将被分配的事务\",{\"1\":{\"2624\":1,\"4986\":1}}],[\"即便系统故障也不会丢失\",{\"1\":{\"2570\":1,\"4932\":1}}],[\"即能保护该记录\",{\"1\":{\"2553\":1,\"4915\":1}}],[\"即两个事务可以同时持有包含共同间隙范围的间隙锁\",{\"1\":{\"2550\":1,\"4912\":1}}],[\"即索引结构和数据分开存放的索引\",{\"1\":{\"2401\":1,\"4763\":1}}],[\"即索引结构和数据一起存放的索引\",{\"1\":{\"2392\":1,\"4754\":1}}],[\"即可快速取出对应的值\",{\"1\":{\"2348\":1,\"4710\":1}}],[\"即为主机\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"即刻传输数据\",{\"1\":{\"2139\":1}}],[\"即允许同时通过单一的http\",{\"1\":{\"1978\":1,\"1993\":1,\"2008\":1,\"2021\":1,\"2034\":1,\"2049\":1,\"5269\":1,\"5292\":1}}],[\"即拿到订单消息\",{\"1\":{\"1938\":1,\"4044\":1}}],[\"即删除消息\",{\"1\":{\"1937\":1,\"4043\":1}}],[\"即commit执行结果到mq服务器\",{\"1\":{\"1936\":1,\"4042\":1}}],[\"即上面我们说的三个角色的总称\",{\"1\":{\"1875\":1,\"4464\":1}}],[\"即上面提到的fast\",{\"1\":{\"519\":1}}],[\"即独立运行在某个进程中\",{\"1\":{\"1810\":1,\"4399\":1}}],[\"即服务单元\",{\"1\":{\"1798\":1,\"4387\":1}}],[\"即用户态和内核态都指向了就绪链表\",{\"1\":{\"1145\":1,\"1313\":1,\"1481\":1,\"1649\":1,\"4556\":1}}],[\"即在某个时间点上没有字节码正在执行时\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"即在就绪状态的进程除cpu之外\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4516\":1}}],[\"即在不进行扰动计算的情况下\",{\"1\":{\"750\":1}}],[\"即确定哪个partition由哪个consumer来消费\",{\"1\":{\"1027\":1,\"5203\":1}}],[\"即形成了拒绝服务攻击\",{\"1\":{\"779\":1}}],[\"即把x右移3位\",{\"1\":{\"737\":1}}],[\"即0111\",{\"1\":{\"735\":1}}],[\"即他在这个数组中的下标\",{\"1\":{\"721\":1}}],[\"即本文的主角hash\",{\"1\":{\"717\":1}}],[\"即list的size个数的elementdata\",{\"1\":{\"511\":1}}],[\"即排序中的第一个\",{\"1\":{\"492\":1}}],[\"即相同元素在set中只会保留一份\",{\"1\":{\"455\":1}}],[\"即先放入的元素不一定排在前面\",{\"1\":{\"455\":1}}],[\"即先放入的元素排在前面\",{\"1\":{\"453\":1}}],[\"即车中包含一个成员变量\",{\"1\":{\"357\":1}}],[\"即\",{\"1\":{\"353\":1,\"356\":1,\"580\":1,\"757\":1,\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"3773\":1,\"4539\":1}}],[\"即使中途有其他事务插入了一条数据\",{\"1\":{\"2608\":1,\"4970\":1}}],[\"即使没有提交事务\",{\"1\":{\"2579\":1,\"4941\":1}}],[\"即使没有用try\",{\"1\":{\"245\":1,\"3641\":1}}],[\"即使其他事务更新了表的数据\",{\"1\":{\"2463\":1,\"4825\":1}}],[\"即使网络非常拥堵了\",{\"1\":{\"2148\":1}}],[\"即使它先收到了后面的\",{\"1\":{\"2114\":1}}],[\"即使你一直没有去取\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4562\":1}}],[\"即使进程没有调用\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4560\":1}}],[\"即使数据库发生故障也不应该对其有任何影响\",{\"1\":{\"844\":1,\"3861\":1}}],[\"即使哈希冲突比较严重\",{\"1\":{\"790\":1}}],[\"即使\",{\"1\":{\"314\":1,\"3702\":1}}],[\"最大扩容可达\",{\"1\":{\"3067\":1,\"4321\":1}}],[\"最大可以同时运行的线程数量\",{\"1\":{\"3045\":1,\"4299\":1}}],[\"最大的改造就是使用了\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"最大的问题在于\",{\"1\":{\"346\":1}}],[\"最大的问题是\",{\"1\":{\"344\":1}}],[\"最基本的就是首先做好参数校验\",{\"1\":{\"2778\":1,\"5140\":1}}],[\"最友好\",{\"1\":{\"2755\":1,\"5117\":1}}],[\"最左前缀匹配原则指的是\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"最左前缀匹配原则\",{\"1\":{\"2414\":1,\"4776\":1}}],[\"最近一段时间以来\",{\"1\":{\"1967\":1,\"1982\":1,\"1997\":1,\"2010\":1,\"2023\":1,\"2038\":1,\"5257\":1,\"5282\":1}}],[\"最佳部署容器docker\",{\"1\":{\"1816\":1,\"4405\":1}}],[\"最好在创建主题的时候就把分区规划好\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"最高的隔离级别\",{\"1\":{\"856\":1,\"3873\":1}}],[\"最低的隔离级别\",{\"1\":{\"853\":1,\"3870\":1}}],[\"最终的变量是放在了当前线程的\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"最终的结果\",{\"1\":{\"407\":1}}],[\"最终结果都是\",{\"1\":{\"2890\":1,\"4144\":1}}],[\"最终还是要\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"最终转换成http的请求形式\",{\"1\":{\"1848\":1,\"4437\":1}}],[\"最终给开发者留出了一套简单易懂\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"最终它调用了\",{\"1\":{\"1193\":1,\"1361\":1,\"1529\":1,\"1697\":1,\"4604\":1}}],[\"最终加载meta\",{\"1\":{\"900\":1,\"3917\":1}}],[\"最终获取到以后调用\",{\"1\":{\"894\":1,\"3911\":1}}],[\"最终导致依赖创建失败\",{\"1\":{\"874\":1,\"3891\":1}}],[\"最终陷入瘫痪\",{\"1\":{\"779\":1}}],[\"最终得到的index的值不一样了\",{\"1\":{\"755\":1}}],[\"最主要的考虑就是效率\",{\"1\":{\"730\":1}}],[\"最多可以装多少元素\",{\"1\":{\"685\":1}}],[\"最先出队的总是优先级最高的\",{\"1\":{\"492\":1}}],[\"最长路径刚好是最短路径的两倍\",{\"1\":{\"421\":1,\"3746\":1}}],[\"最长路径就是一个红节点一个黑节点\",{\"1\":{\"421\":1,\"3746\":1}}],[\"最短路径就是全黑节点\",{\"1\":{\"421\":1,\"3746\":1}}],[\"最后问有offer吗\",{\"1\":{\"3168\":1,\"5448\":1}}],[\"最后问我啥时能来实习\",{\"1\":{\"3138\":1,\"5418\":1}}],[\"最后女的hr问看你成绩这么好\",{\"1\":{\"3165\":1,\"5445\":1}}],[\"最后让明天面试\",{\"1\":{\"3116\":1,\"5396\":1}}],[\"最后直到成功为止\",{\"1\":{\"2860\":1,\"4114\":1}}],[\"最后再根据持久化方式\",{\"1\":{\"2735\":1,\"5097\":1}}],[\"最后的结果是用户\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"最后在看看有没有单例工程类在三级缓存中\",{\"1\":{\"894\":1,\"3911\":1}}],[\"最后以\",{\"1\":{\"818\":1,\"3835\":1}}],[\"最后一个\",{\"1\":{\"447\":1,\"797\":1}}],[\"最后\",{\"1\":{\"411\":1,\"568\":1,\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"1890\":1,\"4479\":1,\"4583\":1}}],[\"最顶层的加载类\",{\"1\":{\"208\":1,\"3602\":1}}],[\"后经提议\",{\"1\":{\"5275\":1}}],[\"后来\",{\"1\":{\"5275\":1}}],[\"后端先验证\",{\"1\":{\"3303\":1,\"5572\":1}}],[\"后端是一个松耦合架构\",{\"1\":{\"1780\":1,\"4369\":1}}],[\"后台管理微服务签发jwt\",{\"1\":{\"3236\":1,\"5505\":1}}],[\"后文会详细介绍到\",{\"1\":{\"3089\":1,\"4343\":1}}],[\"后继节点\",{\"1\":{\"2916\":1,\"2919\":1,\"4170\":1,\"4173\":1}}],[\"后续即使它们修改了记录行的值\",{\"1\":{\"2626\":1,\"4988\":1}}],[\"后续有对该表的\",{\"1\":{\"2497\":1,\"4859\":1}}],[\"后访问的事务必须等前一个事务执行完成\",{\"1\":{\"2596\":1,\"4958\":1}}],[\"后一级缓存也没有了\",{\"1\":{\"996\":1,\"4013\":1}}],[\"后重写为\",{\"1\":{\"977\":1,\"3994\":1}}],[\"后\",{\"1\":{\"819\":1,\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"3836\":1,\"4581\":1}}],[\"后三位\",{\"1\":{\"737\":1}}],[\"后者不是线程安全的\",{\"1\":{\"661\":1}}],[\"后面会有答案的\",{\"1\":{\"2385\":1,\"4747\":1}}],[\"后面会具体演示代码\",{\"1\":{\"601\":1,\"3794\":1}}],[\"后面两个参数是源端的偏移量和复制数据的长度\",{\"1\":{\"1178\":1,\"1346\":1,\"1514\":1,\"1682\":1,\"4589\":1}}],[\"后面每次调用在这个整数上自增\",{\"1\":{\"1023\":1,\"5199\":1}}],[\"后面的两个hashcode经过位运算之后得到的值也是11\",{\"1\":{\"752\":1}}],[\"后面接上要声明的异常\",{\"1\":{\"256\":1,\"3652\":1}}],[\"后进先出的栈相关的操作\",{\"1\":{\"340\":1}}],[\"qps\",{\"1\":{\"3305\":1}}],[\"qps估算方法\",{\"0\":{\"3304\":1}}],[\"query\",{\"1\":{\"3305\":1}}],[\"questions\",{\"1\":{\"2833\":1,\"3017\":1,\"3106\":1,\"4087\":1,\"4271\":1,\"4360\":1}}],[\"queuing\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"queue<integer>\",{\"1\":{\"376\":2,\"406\":2}}],[\"queue\",{\"1\":{\"375\":1,\"379\":1,\"380\":1,\"381\":2,\"382\":2,\"383\":1,\"505\":1,\"3043\":3,\"4297\":3}}],[\"quicklist\",{\"1\":{\"2693\":1,\"5055\":1}}],[\"quick\",{\"1\":{\"2275\":1,\"5275\":1,\"5357\":1}}],[\"quic\",{\"1\":{\"2145\":1,\"2275\":4,\"2276\":1,\"2277\":1,\"5275\":4,\"5357\":4,\"5358\":1,\"5359\":1}}],[\"quic成为http\",{\"1\":{\"1972\":1,\"1987\":1,\"2002\":1,\"2015\":1,\"2028\":1,\"2043\":1,\"5263\":1,\"5286\":1}}],[\"q8\",{\"0\":{\"398\":1}}],[\"q7\",{\"0\":{\"389\":1}}],[\"q6\",{\"0\":{\"386\":1}}],[\"q5\",{\"0\":{\"371\":1}}],[\"q4\",{\"0\":{\"367\":1}}],[\"q3\",{\"0\":{\"350\":1}}],[\"q2\",{\"0\":{\"343\":1},\"1\":{\"376\":1,\"377\":2,\"381\":1,\"406\":2}}],[\"q1\",{\"0\":{\"337\":1},\"1\":{\"376\":1,\"377\":2,\"381\":1,\"406\":2}}],[\"qq\",{\"1\":{\"328\":1,\"629\":1,\"915\":1,\"1079\":1,\"2856\":1,\"2961\":1,\"3106\":1,\"3401\":1,\"3716\":1,\"3721\":1,\"3932\":1,\"4110\":1,\"4215\":1,\"4360\":1,\"5255\":1}}],[\"话不多说\",{\"1\":{\"336\":1,\"508\":1,\"2053\":1,\"3386\":1}}],[\"栈和双端队列使用\",{\"1\":{\"475\":1}}],[\"栈和动态数组之间的关系不应该是继承关系\",{\"1\":{\"363\":1}}],[\"栈不是一个动态数组\",{\"1\":{\"361\":1}}],[\"栈是一个动态数组\",{\"1\":{\"361\":1}}],[\"栈这种数据结构\",{\"1\":{\"360\":1}}],[\"栈\",{\"0\":{\"332\":1,\"3737\":1},\"1\":{\"411\":1}}],[\"链表的性能是远远低于动态数组的\",{\"1\":{\"403\":1}}],[\"链表呢\",{\"0\":{\"398\":1}}],[\"链表\",{\"0\":{\"331\":1,\"3736\":1}}],[\"链接\",{\"1\":{\"19\":1,\"46\":1,\"3418\":1,\"3445\":1}}],[\"数学建模比赛中遇到的最大困难\",{\"1\":{\"3159\":1,\"5439\":1}}],[\"数最多为\",{\"1\":{\"2132\":1}}],[\"数量越多的时候\",{\"1\":{\"1144\":1,\"1312\":1,\"1480\":1,\"1648\":1,\"4555\":1}}],[\"数据满足完整性约束\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"数据表的主键列使用的就是主键索引\",{\"1\":{\"2378\":1,\"4740\":1}}],[\"数据类型底层数据结构就只由\",{\"1\":{\"2693\":1,\"5055\":1}}],[\"数据类型\",{\"1\":{\"2365\":1,\"4727\":1}}],[\"数据\",{\"1\":{\"2355\":1,\"2761\":1,\"4717\":1,\"5123\":1}}],[\"数据库\",{\"0\":{\"5596\":1}}],[\"数据库和缓存数据强一致场景\",{\"1\":{\"3207\":1,\"5476\":1}}],[\"数据库的压力可想而知\",{\"1\":{\"2804\":1,\"5166\":1}}],[\"数据库只存储文件地址信息\",{\"1\":{\"2644\":1,\"5006\":1}}],[\"数据库允许多个并发事务同时对其数据进行读写和修改的能力\",{\"1\":{\"2569\":1,\"4931\":1}}],[\"数据库保持一致性状态\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"数据库会自动给主键赋值递增的值\",{\"1\":{\"2516\":1,\"4878\":1}}],[\"数据库较难优化\",{\"1\":{\"2420\":1,\"4782\":1}}],[\"数据库重新启动的时候会保证数据库恢复到崩溃前的状态\",{\"1\":{\"2337\":1,\"4699\":1}}],[\"数据库控制台以更好地测试应用程序\",{\"1\":{\"929\":1,\"3946\":1}}],[\"数据报重新封装成链路层帧\",{\"1\":{\"2259\":1,\"5341\":1}}],[\"数据报转发到与主机\",{\"1\":{\"2255\":1,\"5337\":1}}],[\"数据报\",{\"1\":{\"2254\":1,\"5336\":1}}],[\"数据报文时\",{\"1\":{\"2238\":1,\"5320\":1}}],[\"数据报文\",{\"1\":{\"2237\":1,\"5319\":1}}],[\"数据报在物理上传输的过程中\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"数据包\",{\"1\":{\"2156\":1}}],[\"数据可以无差错\",{\"1\":{\"2144\":1}}],[\"数据字节数\",{\"1\":{\"2099\":1}}],[\"数据有更新时\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"数据存储+事件监听\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"数据监控等\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"数据拷贝\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4574\":1}}],[\"数据保存的策略\",{\"0\":{\"1005\":1,\"5181\":1}}],[\"数据保持一致\",{\"1\":{\"842\":1,\"3859\":1}}],[\"数据验证\",{\"1\":{\"824\":1,\"3841\":1}}],[\"数据格式化\",{\"1\":{\"823\":1,\"3840\":1}}],[\"数据转换\",{\"1\":{\"822\":1,\"3839\":1}}],[\"数据增长区别\",{\"1\":{\"554\":1}}],[\"数据结构来实现了\",{\"1\":{\"2708\":1,\"2716\":1,\"5070\":1,\"5078\":1}}],[\"数据结构及适用场景\",{\"0\":{\"2676\":1,\"5038\":1}}],[\"数据结构\",{\"0\":{\"329\":1,\"2678\":1,\"2689\":1,\"2697\":1,\"2704\":1,\"2712\":1,\"3734\":1,\"5040\":1,\"5051\":1,\"5059\":1,\"5066\":1,\"5074\":1},\"1\":{\"488\":1}}],[\"数组里的数据\",{\"1\":{\"2681\":1,\"5043\":1}}],[\"数组中的每个元素只访问一次\",{\"1\":{\"1097\":1}}],[\"数组的每个成员是一个链表\",{\"1\":{\"717\":1}}],[\"数组的特点是\",{\"1\":{\"715\":1}}],[\"数组和链表\",{\"1\":{\"715\":1}}],[\"数组\",{\"0\":{\"330\":1,\"3735\":1}}],[\"数组类没有对应的二进制字节流\",{\"1\":{\"201\":1,\"3595\":1}}],[\"数组类不是通过\",{\"1\":{\"201\":1,\"3595\":1}}],[\"七层模型\",{\"0\":{\"2222\":1,\"2315\":1,\"5304\":1},\"1\":{\"2223\":1,\"5305\":1}}],[\"七\",{\"0\":{\"329\":1,\"1101\":1,\"1269\":1,\"1437\":1,\"1605\":1,\"4512\":1}}],[\"参数的时间单位\",{\"1\":{\"3050\":1,\"4304\":1}}],[\"参数的时候\",{\"1\":{\"2464\":1,\"4826\":1}}],[\"参数\",{\"1\":{\"3042\":1,\"4296\":1}}],[\"参数设置的\",{\"1\":{\"2737\":1,\"5099\":1}}],[\"参数开启\",{\"1\":{\"2733\":1,\"5095\":1}}],[\"参数不能为0\",{\"1\":{\"260\":1,\"3656\":1}}],[\"参考了\",{\"1\":{\"5275\":1}}],[\"参考\",{\"1\":{\"328\":1,\"412\":1,\"794\":1,\"909\":1,\"970\":1,\"1003\":1,\"1056\":1,\"1065\":1,\"1079\":1,\"1158\":1,\"1267\":1,\"1326\":1,\"1435\":1,\"1494\":1,\"1603\":1,\"1662\":1,\"1771\":1,\"2638\":1,\"2961\":1,\"2995\":1,\"3017\":1,\"3106\":1,\"3401\":1,\"3716\":1,\"3926\":1,\"3987\":1,\"4020\":1,\"4215\":1,\"4249\":1,\"4271\":1,\"4360\":1,\"4569\":1,\"4678\":1,\"5000\":1,\"5232\":1,\"5241\":1,\"5255\":1}}],[\"指的是\",{\"1\":{\"3313\":1}}],[\"指的是对象创建\",{\"1\":{\"810\":1,\"3827\":1}}],[\"指令和\",{\"1\":{\"3011\":1,\"3015\":1,\"4265\":1,\"4269\":1}}],[\"指令后\",{\"1\":{\"3007\":1,\"4261\":1}}],[\"指令来释放锁\",{\"1\":{\"3007\":1,\"4261\":1}}],[\"指令时\",{\"1\":{\"3003\":1,\"4257\":1}}],[\"指令以及两个\",{\"1\":{\"3002\":1,\"4256\":1}}],[\"指令则指明同步代码块的结束位置\",{\"1\":{\"3001\":1,\"3014\":1,\"4255\":1,\"4268\":1}}],[\"指令指向同步代码块的开始位置\",{\"1\":{\"3001\":1,\"3014\":1,\"4255\":1,\"4268\":1}}],[\"指令\",{\"1\":{\"2879\":1,\"3001\":1,\"3002\":1,\"3011\":1,\"3014\":1,\"3015\":1,\"4133\":1,\"4255\":1,\"4256\":1,\"4265\":1,\"4268\":1,\"4269\":1}}],[\"指在\",{\"1\":{\"2634\":1,\"4996\":1}}],[\"指向该行的\",{\"1\":{\"2619\":1,\"4981\":1}}],[\"指一个事务执行过程中看到的数据\",{\"1\":{\"2595\":1,\"4957\":1}}],[\"指一个事务提交之后\",{\"1\":{\"2594\":1,\"4956\":1}}],[\"指一个事务还没提交时\",{\"1\":{\"2593\":1,\"4955\":1}}],[\"指下一次\",{\"1\":{\"2100\":1}}],[\"指出对于一个分布式系统来说\",{\"1\":{\"1908\":1,\"4497\":1}}],[\"指明partition的情况下\",{\"1\":{\"1021\":1,\"5197\":1}}],[\"指定要拦截哪一个接口的哪些方法即可\",{\"1\":{\"979\":1,\"3996\":1}}],[\"指定连接数据库的驱动类时用到反射加载驱动类\",{\"1\":{\"327\":1,\"3715\":1}}],[\"指南\",{\"0\":{\"141\":1,\"3540\":1}}],[\"无界队列\",{\"1\":{\"3065\":1,\"4319\":1}}],[\"无锁并不会对资源锁定\",{\"1\":{\"2837\":1,\"4091\":1}}],[\"无锁\",{\"0\":{\"2836\":1,\"4090\":1}}],[\"无论\",{\"1\":{\"5275\":1}}],[\"无论读操作还是写操作\",{\"1\":{\"2977\":1,\"4231\":1}}],[\"无论的网络链路中出现了怎样的链路变化\",{\"1\":{\"2113\":1}}],[\"无论是用取模运算还是位运算都无法直接解决冲突较大的问题\",{\"1\":{\"745\":1}}],[\"无间隔\",{\"1\":{\"2108\":1}}],[\"无耦合\",{\"1\":{\"1808\":1,\"4397\":1}}],[\"无名管道\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"无顺序\",{\"1\":{\"455\":1}}],[\"无需多一个字段去记录\",{\"1\":{\"2168\":1}}],[\"无需知道\",{\"1\":{\"381\":1}}],[\"无需关注工厂类\",{\"1\":{\"327\":1,\"3715\":1}}],[\"无法使用覆盖索引\",{\"1\":{\"2661\":1,\"5023\":1}}],[\"无法成功插入\",{\"1\":{\"2609\":1,\"4971\":1}}],[\"无法实现虚拟主机\",{\"1\":{\"2268\":1,\"5350\":1}}],[\"无法充分利用\",{\"1\":{\"1233\":1,\"1401\":1,\"1569\":1,\"1737\":1,\"4644\":1}}],[\"无法保证先读到消息的consumer一定先完成操作\",{\"1\":{\"1070\":1,\"5246\":1}}],[\"无法获取继承下来的方法\",{\"1\":{\"323\":1,\"3711\":1}}],[\"无法获取继承下来的变量\",{\"1\":{\"321\":1,\"3709\":1}}],[\"无法被父类加载器加载的类最终会通过这个方法被加载\",{\"1\":{\"219\":1,\"3613\":1}}],[\"+1\",{\"1\":{\"2969\":1,\"3076\":1,\"4223\":1,\"4330\":1}}],[\"+=\",{\"1\":{\"775\":3}}],[\"+\",{\"0\":{\"1164\":1,\"1332\":1,\"1500\":1,\"1668\":1,\"4575\":1},\"1\":{\"327\":1,\"406\":2,\"524\":1,\"525\":1,\"535\":4,\"539\":2,\"686\":2,\"691\":3,\"704\":8,\"757\":1,\"775\":1,\"1033\":4,\"1095\":1,\"1161\":1,\"1329\":1,\"1497\":1,\"1665\":1,\"2371\":2,\"2373\":1,\"2542\":1,\"2552\":1,\"2695\":1,\"3190\":10,\"3223\":1,\"3715\":1,\"4572\":1,\"4733\":2,\"4735\":1,\"4904\":1,\"4914\":1,\"5057\":1,\"5209\":4,\"5459\":10,\"5492\":1}}],[\"++\",{\"1\":{\"271\":1}}],[\"<br>\",{\"1\":{\"3043\":4,\"4297\":4}}],[\"<字段列表>\",{\"0\":{\"2659\":1,\"5021\":1},\"1\":{\"2662\":1,\"5024\":1}}],[\"<=\",{\"1\":{\"2415\":1,\"3043\":2,\"4297\":2,\"4777\":1}}],[\"<ip\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"<sys\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4588\":1}}],[\"<artifactid>spring\",{\"1\":{\"930\":1,\"3947\":1}}],[\"<groupid>org\",{\"1\":{\"930\":1,\"3947\":1}}],[\"<dependency>\",{\"1\":{\"930\":1,\"3947\":1}}],[\"<<\",{\"1\":{\"682\":1,\"775\":4}}],[\"<tt>object<\",{\"1\":{\"510\":1}}],[\"<tt>arraylist<\",{\"1\":{\"510\":2}}],[\"<\",{\"1\":{\"323\":2,\"325\":2,\"406\":2,\"539\":1,\"930\":1,\"1033\":1,\"1095\":1,\"1252\":1,\"1420\":1,\"1588\":1,\"1756\":1,\"2415\":1,\"3043\":6,\"3711\":2,\"3713\":2,\"3947\":1,\"4297\":6,\"4663\":1,\"4777\":1,\"5209\":1}}],[\"该项目由用户端和自媒体端组成\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池\",{\"1\":{\"3083\":1,\"4337\":1}}],[\"该标识指明了该方法是一个同步方法\",{\"1\":{\"3011\":1,\"3015\":1,\"4265\":1,\"4269\":1}}],[\"该数据\",{\"1\":{\"2794\":1,\"2801\":1,\"5156\":1,\"5163\":1}}],[\"该数据结构所容纳的所有元素均包含一个指针\",{\"1\":{\"717\":1}}],[\"该情况\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"该表的索引\",{\"1\":{\"2393\":1,\"4755\":1}}],[\"该帧已经从主机\",{\"1\":{\"2256\":1,\"5338\":1}}],[\"该过程与同一局域网内的\",{\"1\":{\"2253\":1,\"5335\":1}}],[\"该分组的目的地只有一个\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"该查询分组对当前设备无效\",{\"1\":{\"2243\":1,\"5325\":1}}],[\"该\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"该条目将被丢弃\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"该映射关系以\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"该去往何处\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"该位为\",{\"1\":{\"2102\":1,\"2103\":1,\"2104\":1,\"2105\":1}}],[\"该提案n1最终需要被抛弃掉\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"该协议能够很好地支持\",{\"1\":{\"1869\":1,\"4458\":1}}],[\"该系统调用\",{\"1\":{\"1180\":1,\"1348\":1,\"1516\":1,\"1684\":1,\"4591\":1}}],[\"该消息队列才会被真正的删除\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"该线程池中的线程数量始终不变\",{\"1\":{\"3080\":1,\"4334\":1}}],[\"该线程对副本的操作\",{\"1\":{\"2941\":1,\"4195\":1}}],[\"该线程是否正在独占资源\",{\"1\":{\"2928\":1,\"4182\":1}}],[\"该线程结束生命周期\",{\"1\":{\"1109\":1,\"1277\":1,\"1445\":1,\"1613\":1,\"4520\":1}}],[\"该线程会释放占用的所有资源\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"该状态的线程位于\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4516\":1}}],[\"该模块将在生产环境中被禁用\",{\"1\":{\"929\":1,\"3946\":1}}],[\"该文件里配置了所有需要被创建的spring容器中的bean\",{\"1\":{\"900\":1,\"3917\":1}}],[\"该级别可以防止脏读\",{\"1\":{\"856\":1,\"3873\":1}}],[\"该方法返回一个可根据实际情况调整线程数量的线程池\",{\"1\":{\"3082\":1,\"4336\":1}}],[\"该方法返回一个只有一个线程的线程池\",{\"1\":{\"3081\":1,\"4335\":1}}],[\"该方法返回一个固定线程数量的线程池\",{\"1\":{\"3080\":1,\"4334\":1}}],[\"该方法主要是将hash生成的整型转换成链表数组中的下标\",{\"1\":{\"727\":1}}],[\"该方法主要是将object转换成一个整型\",{\"1\":{\"726\":1}}],[\"该方法会返回一个整数\",{\"1\":{\"724\":1}}],[\"该方法必须被public修饰\",{\"1\":{\"323\":1,\"3711\":1}}],[\"该接口比list提供了更多的方法\",{\"1\":{\"505\":1}}],[\"该构造器必须被public修饰\",{\"1\":{\"325\":1,\"3713\":1}}],[\"该变量必须被public修饰\",{\"1\":{\"321\":1,\"3709\":1}}],[\"该类加载器才会尝试去加载\",{\"1\":{\"230\":1,\"3624\":1}}],[\"42992084\",{\"1\":{\"3401\":1}}],[\"4242\",{\"1\":{\"1056\":1,\"5232\":1}}],[\"4对称加密和非对称加密有哪些优缺点\",{\"0\":{\"3396\":1}}],[\"443\",{\"1\":{\"2280\":1,\"5362\":1}}],[\"44901983\",{\"1\":{\"1079\":1,\"5255\":1}}],[\"410\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"4163ms\",{\"1\":{\"408\":1}}],[\"409\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"4客户端调用\",{\"0\":{\"2208\":1}}],[\"4第二次挥手丢失了\",{\"0\":{\"2193\":1}}],[\"4为什么每次建立\",{\"0\":{\"2182\":1}}],[\"48\",{\"1\":{\"2132\":1}}],[\"4什么是\",{\"0\":{\"2115\":1}}],[\"4g数据找系统记录\",{\"0\":{\"1924\":1,\"4030\":1}}],[\"4e161a06a0afcae8d2c06603d676de4e\",{\"1\":{\"1044\":1,\"5220\":1}}],[\"45161172\",{\"1\":{\"1003\":1,\"4020\":1}}],[\"4动态代理\",{\"0\":{\"603\":1}}],[\"4工厂模式\",{\"0\":{\"583\":1}}],[\"4\",{\"0\":{\"430\":1,\"450\":1,\"490\":1,\"573\":1,\"574\":1,\"578\":1,\"583\":1,\"584\":2,\"588\":2,\"591\":2,\"593\":1,\"594\":1,\"595\":1,\"597\":1,\"600\":1,\"603\":1,\"635\":1,\"1966\":1,\"2204\":1,\"2205\":1,\"2206\":1,\"2207\":1,\"2208\":1,\"2209\":1,\"2210\":1,\"3218\":1,\"3336\":1,\"3383\":1,\"3755\":1,\"5487\":1},\"1\":{\"447\":1,\"682\":1,\"701\":1,\"729\":1,\"748\":1,\"754\":1,\"824\":1,\"880\":1,\"896\":1,\"912\":1,\"960\":1,\"1056\":1,\"1174\":1,\"1183\":1,\"1202\":1,\"1342\":1,\"1351\":1,\"1370\":1,\"1510\":1,\"1519\":1,\"1538\":1,\"1678\":1,\"1687\":1,\"1706\":1,\"2089\":1,\"2146\":1,\"2335\":1,\"2549\":1,\"2566\":1,\"2605\":2,\"2650\":1,\"2723\":1,\"2769\":1,\"2870\":1,\"3114\":1,\"3122\":1,\"3144\":1,\"3150\":1,\"3159\":1,\"3173\":1,\"3182\":1,\"3255\":1,\"3277\":1,\"3841\":1,\"3897\":1,\"3913\":1,\"3929\":1,\"3977\":1,\"4124\":1,\"4585\":1,\"4594\":1,\"4613\":1,\"4697\":1,\"4911\":1,\"4928\":1,\"4967\":2,\"5012\":1,\"5085\":1,\"5131\":1,\"5232\":1,\"5394\":1,\"5402\":1,\"5424\":1,\"5430\":1,\"5439\":1,\"5453\":1,\"5524\":1,\"5546\":1}}],[\"4获取类的所有信息\",{\"0\":{\"319\":1}}],[\"4java\",{\"0\":{\"261\":1}}],[\"嘤~\",{\"1\":{\"310\":1,\"3698\":1}}],[\"好羞羞\",{\"1\":{\"310\":1,\"3698\":1}}],[\"拿到\",{\"1\":{\"310\":1,\"3698\":1}}],[\"三次握手的延迟\",{\"1\":{\"2276\":1,\"5358\":1}}],[\"三次握手过程\",{\"1\":{\"2276\":1,\"5358\":1}}],[\"三次握手过程是怎样的\",{\"0\":{\"2179\":1},\"1\":{\"2064\":1}}],[\"三元组的形式存储\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"三级缓存\",{\"0\":{\"980\":1,\"990\":1,\"3997\":1,\"4007\":1}}],[\"三级缓存并不是非必须不可\",{\"1\":{\"898\":1,\"3915\":1}}],[\"三级缓存主要是解决\",{\"1\":{\"893\":1,\"3910\":1}}],[\"三级缓存解决什么\",{\"1\":{\"891\":1,\"3908\":1}}],[\"三种方法\",{\"1\":{\"304\":1,\"3692\":1}}],[\"三\",{\"0\":{\"440\":1,\"2819\":1,\"3154\":1,\"3333\":1,\"3707\":1,\"4073\":1,\"5274\":1,\"5276\":1,\"5434\":1},\"1\":{\"302\":1,\"3690\":1}}],[\"只适合对少量数据进行加密\",{\"1\":{\"3400\":1}}],[\"只适用于业务处理非常快速的场景\",{\"1\":{\"1235\":1,\"1403\":1,\"1571\":1,\"1739\":1,\"4646\":1}}],[\"只适用于单体项目\",{\"1\":{\"991\":1,\"4008\":1}}],[\"只听他说md5是一个非对称加密算法\",{\"1\":{\"3386\":1}}],[\"只出现一次\",{\"1\":{\"3313\":1}}],[\"只在index这个接口里出现过\",{\"1\":{\"3312\":1}}],[\"只在一个机房内完成所有业务\",{\"1\":{\"1958\":1,\"4064\":1}}],[\"只追加文件\",{\"1\":{\"2722\":1,\"5084\":1}}],[\"只存在于可重复读隔离级别\",{\"1\":{\"2548\":1,\"4910\":1}}],[\"只存在于内存中的文件\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"只负责数据的接收和发送\",{\"1\":{\"1246\":1,\"1414\":1,\"1582\":1,\"1750\":1,\"4657\":1}}],[\"只进行了\",{\"1\":{\"1186\":1,\"1354\":1,\"1522\":1,\"1690\":1,\"4597\":1}}],[\"只会在取出\",{\"1\":{\"2755\":1,\"5117\":1}}],[\"只会和共享表锁\",{\"1\":{\"2509\":1,\"4871\":1}}],[\"只会返回有事件发生的文件描述符的个数\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"只会拦截那些指定需要拦截的方法\",{\"1\":{\"978\":1,\"3995\":1}}],[\"只有用到\",{\"1\":{\"2928\":1,\"4182\":1}}],[\"只有当前线程调用\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"只有当变量的预期值\",{\"1\":{\"2876\":1,\"4130\":1}}],[\"只有当父加载器反馈自己无法完成这个加载请求\",{\"1\":{\"234\":1,\"3628\":1}}],[\"只有同步到磁盘中才算持久化保存了\",{\"1\":{\"2736\":1,\"5098\":1}}],[\"只有叶子节点存储\",{\"1\":{\"2363\":1,\"4725\":1}}],[\"只有表级锁\",{\"1\":{\"2326\":1,\"4688\":1}}],[\"只有水平触发模式\",{\"1\":{\"1156\":1,\"1324\":1,\"1492\":1,\"1660\":1,\"4567\":1}}],[\"只有在内核重启\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"只有拥有互斥对象的线程才有访问公共资源的权限\",{\"1\":{\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"4525\":1}}],[\"只等待获取cpu的使用权\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4516\":1}}],[\"只读\",{\"1\":{\"847\":1,\"3864\":1}}],[\"只是说在一个包里要继承一个异常的接口\",{\"1\":{\"3123\":1,\"5403\":1}}],[\"只是说该列涉及到表与表的关系\",{\"1\":{\"2424\":1,\"4786\":1}}],[\"只是在\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"只是在文档上注明\",{\"1\":{\"370\":1}}],[\"只是它那时没有其他的服务器了\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"只是将key的hashcode值与其高16位作异或并保证最高位为0\",{\"1\":{\"790\":1}}],[\"只做一次16位右位移异或混合\",{\"1\":{\"780\":1}}],[\"只不过会在记录头\",{\"1\":{\"2618\":1,\"4980\":1}}],[\"只不过在满足\",{\"1\":{\"898\":1,\"3915\":1}}],[\"只不过\",{\"1\":{\"724\":1}}],[\"只需要把未来几分钟要执行的数据存入缓存即可\",{\"1\":{\"3271\":1,\"5540\":1}}],[\"只需要传输丢失的这个分片\",{\"1\":{\"2156\":1}}],[\"只需要传入对应map的全限定名\",{\"1\":{\"300\":1,\"3688\":1}}],[\"只需要\",{\"1\":{\"1189\":1,\"1357\":1,\"1525\":1,\"1693\":1,\"4600\":1}}],[\"只需提供传⼊⼯⼚的参数\",{\"1\":{\"585\":1,\"3778\":1}}],[\"只能有一个线程获得锁\",{\"1\":{\"2977\":1,\"4231\":1}}],[\"只能保证单个变量的原子性\",{\"0\":{\"2895\":1,\"4149\":1},\"1\":{\"2902\":1,\"4156\":1}}],[\"只能存活\",{\"1\":{\"2753\":1,\"5115\":1}}],[\"只能使用到一个表中的一个索引\",{\"1\":{\"2657\":1,\"5019\":1}}],[\"只能取一个\",{\"1\":{\"2350\":1,\"4712\":1}}],[\"只能是固定类别\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"只能重量级锁\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"只能选择\",{\"1\":{\"1918\":1,\"4507\":1}}],[\"只能满足可用性\",{\"1\":{\"1917\":1,\"4506\":1}}],[\"只能同时满足以下三点中的两个\",{\"1\":{\"1908\":1,\"4497\":1}}],[\"只能用来做微服务\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"只能用于亲缘关系的进程间通信\",{\"1\":{\"1126\":1,\"1294\":1,\"1462\":1,\"1630\":1,\"4537\":1}}],[\"只能在同一端做插入和删除操作\",{\"1\":{\"391\":1}}],[\"只能执行队列规定的方法\",{\"1\":{\"377\":1}}],[\"只要统计出\",{\"1\":{\"3312\":1}}],[\"只要没有显式地设置cacheenabled为false\",{\"1\":{\"999\":1,\"4016\":1}}],[\"只要是同一个接口的相同方法\",{\"1\":{\"998\":1,\"4015\":1}}],[\"只要是按照内容查找元素\",{\"1\":{\"478\":1}}],[\"只要保证length的长度是2^n的话\",{\"1\":{\"742\":1}}],[\"只要能调用\",{\"1\":{\"381\":1}}],[\"只要他们满足\",{\"1\":{\"379\":1}}],[\"只要实现了map接口\",{\"1\":{\"300\":1,\"3688\":1}}],[\"只定义了一个类应该满足哪些方法\",{\"1\":{\"374\":1}}],[\"注入到spring\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"注\",{\"1\":{\"1063\":1,\"5239\":1}}],[\"注意是即时运算出来的值\",{\"1\":{\"3381\":1}}],[\"注意是很大程度避免\",{\"1\":{\"2606\":1,\"4968\":1}}],[\"注意避免冗余索引\",{\"1\":{\"2433\":1,\"4795\":1}}],[\"注意\",{\"1\":{\"314\":1,\"506\":1,\"662\":1,\"712\":1,\"989\":1,\"2741\":1,\"3702\":1,\"4006\":1,\"5103\":1}}],[\"注解\",{\"1\":{\"302\":1,\"3690\":1}}],[\"注解等\",{\"1\":{\"297\":1,\"3685\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"115\":1,\"3514\":1}}],[\"作为消息队列来使用\",{\"1\":{\"3281\":1,\"5550\":1}}],[\"作为索引结构\",{\"1\":{\"2342\":1,\"2353\":1,\"2358\":1,\"4704\":1,\"4715\":1,\"4720\":1}}],[\"作为一线开发者\",{\"1\":{\"1968\":1,\"1983\":1,\"1998\":1,\"2011\":1,\"2024\":1,\"2039\":1,\"5258\":1,\"5283\":1}}],[\"作为一个优秀高效且可靠的分布式协调框架\",{\"1\":{\"1869\":1,\"4458\":1}}],[\"作为\",{\"1\":{\"1783\":1,\"1897\":1,\"4372\":1,\"4486\":1}}],[\"作为起始点\",{\"1\":{\"1086\":1,\"4027\":1}}],[\"作为实现栈的接口\",{\"1\":{\"385\":1}}],[\"作为动态数组\",{\"1\":{\"347\":1}}],[\"作用域是同一个\",{\"1\":{\"982\":1,\"3999\":1}}],[\"作用\",{\"1\":{\"297\":1,\"3685\":1}}],[\"作者设置为\",{\"1\":{\"118\":1,\"3517\":1}}],[\"概念\",{\"1\":{\"296\":1,\"3684\":1}}],[\"概念啥的太虚幻我就不说了\",{\"1\":{\"289\":1,\"3677\":1}}],[\"于是转向问权威\",{\"1\":{\"2302\":1,\"5384\":1}}],[\"于是为了减少这一步开销\",{\"1\":{\"1165\":1,\"1333\":1,\"1501\":1,\"1669\":1,\"4576\":1}}],[\"于是\",{\"1\":{\"292\":1,\"1183\":1,\"1351\":1,\"1519\":1,\"1687\":1,\"3680\":1,\"4594\":1}}],[\"还没提交\",{\"1\":{\"3213\":1,\"5482\":1}}],[\"还没有提交事务\",{\"1\":{\"2579\":1,\"4941\":1}}],[\"还耐心给我解答了是用来循环遍历的\",{\"1\":{\"3145\":1,\"5425\":1}}],[\"还会降低系统的稳定性\",{\"1\":{\"3038\":1,\"4292\":1}}],[\"还可以将快照留在原地以便重启服务器的时候使用\",{\"1\":{\"2725\":1,\"5087\":1}}],[\"还可以保存二进制数据\",{\"1\":{\"2681\":1,\"5043\":1}}],[\"还可以方便的实现多线程优先级的比较操作\",{\"1\":{\"1118\":1,\"1286\":1,\"1454\":1,\"1622\":1,\"4529\":1}}],[\"还收到物理内存和其他因素影响\",{\"1\":{\"2133\":1}}],[\"还有\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"还有两种模式的定义\",{\"1\":{\"1875\":1,\"4464\":1}}],[\"还有一个好处就是可以很好的解决负数的问题\",{\"1\":{\"757\":1}}],[\"还要看收到的事件类型\",{\"1\":{\"1227\":1,\"1242\":1,\"1395\":1,\"1410\":1,\"1563\":1,\"1578\":1,\"1731\":1,\"1746\":1,\"4638\":1,\"4653\":1}}],[\"还要学会这种对代码精益求精的态度\",{\"1\":{\"792\":1}}],[\"还包括indexof\",{\"1\":{\"717\":1}}],[\"还必须需要实现invocationhandler\",{\"1\":{\"613\":1,\"3806\":1}}],[\"还实现了\",{\"1\":{\"505\":1}}],[\"还能继续执行\",{\"1\":{\"369\":1}}],[\"还能获取到类的所有信息\",{\"1\":{\"297\":1,\"3685\":1}}],[\"还是轻量级的锁\",{\"1\":{\"2523\":1,\"4885\":1}}],[\"还是前面三个\",{\"1\":{\"1888\":1,\"4477\":1}}],[\"还是没有创建完\",{\"1\":{\"885\":1,\"3902\":1}}],[\"还是\",{\"0\":{\"1925\":1,\"4031\":1},\"1\":{\"360\":1,\"1920\":1,\"4509\":1,\"5275\":1}}],[\"还是得改回去用hashmap\",{\"1\":{\"292\":1,\"3680\":1}}],[\"还不会编写\",{\"1\":{\"31\":1,\"3430\":1}}],[\"接近\",{\"1\":{\"2348\":1,\"4710\":1}}],[\"接收的\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"接受顺序性也得到了保证\",{\"1\":{\"1879\":1,\"4468\":1}}],[\"接受客户端请求\",{\"1\":{\"814\":1,\"3831\":1}}],[\"接着构造一个\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"接着再传给传输层\",{\"1\":{\"2157\":1}}],[\"接着来看看单\",{\"1\":{\"1251\":1,\"1419\":1,\"1587\":1,\"1755\":1,\"4662\":1}}],[\"接着由\",{\"1\":{\"1247\":1,\"1415\":1,\"1583\":1,\"1751\":1,\"4658\":1}}],[\"接着\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"1886\":1,\"2496\":1,\"2502\":1,\"4475\":1,\"4581\":1,\"4858\":1,\"4864\":1}}],[\"接着看上面的正射\",{\"1\":{\"290\":1,\"3678\":1}}],[\"接下来的步骤就开始不一样了\",{\"1\":{\"1245\":1,\"1413\":1,\"1581\":1,\"1749\":1,\"4656\":1}}],[\"接下来还可以继续去检测它的状态\",{\"1\":{\"1153\":1,\"1321\":1,\"1489\":1,\"1657\":1,\"4564\":1}}],[\"接下来补充\",{\"1\":{\"889\":1,\"3906\":1}}],[\"接下来\",{\"1\":{\"753\":1,\"1215\":1,\"1226\":1,\"1383\":1,\"1394\":1,\"1551\":1,\"1562\":1,\"1719\":1,\"1730\":1,\"2250\":1,\"2589\":1,\"4626\":1,\"4637\":1,\"4951\":1,\"5332\":1}}],[\"接下来我们会发现\",{\"1\":{\"745\":1}}],[\"接⼝⼀旦新增加⽅法\",{\"1\":{\"598\":1,\"3791\":1}}],[\"接口支持幂等即可\",{\"1\":{\"1940\":1,\"4046\":1}}],[\"接口调用失败就会进入调用接口提前定义好的一个熔断的方法\",{\"1\":{\"1842\":1,\"4431\":1}}],[\"接口调用失败就调用本地的方法返回一个空\",{\"1\":{\"1841\":1,\"4430\":1}}],[\"接口并复写\",{\"1\":{\"979\":1,\"3996\":1}}],[\"接口中定义了五个表示隔离级别的常量\",{\"1\":{\"851\":1,\"3868\":1}}],[\"接口类的\",{\"1\":{\"613\":1,\"3806\":1}}],[\"接口和\",{\"1\":{\"610\":1,\"620\":1,\"3803\":1,\"3813\":1}}],[\"接口的类的\",{\"1\":{\"615\":1,\"3808\":1}}],[\"接口的对象\",{\"1\":{\"612\":1,\"3805\":1}}],[\"接口的stack\",{\"1\":{\"392\":1}}],[\"接口的时候\",{\"1\":{\"382\":1}}],[\"接口的设计相当于做了访问限制\",{\"1\":{\"382\":1}}],[\"接口规定的规范\",{\"1\":{\"379\":1}}],[\"接口最大的意义之一\",{\"1\":{\"374\":1}}],[\"接口提供\",{\"1\":{\"340\":1}}],[\"接口\",{\"0\":{\"386\":1},\"1\":{\"262\":1,\"372\":1,\"385\":1,\"400\":1,\"499\":1,\"505\":1,\"2250\":1,\"2828\":1,\"3658\":1,\"4082\":1,\"5332\":1}}],[\"唱跳rap篮球\",{\"1\":{\"288\":1,\"291\":1,\"3676\":1,\"3679\":1}}],[\"蔡徐鸡\",{\"1\":{\"288\":1,\"291\":1,\"3676\":1,\"3679\":1}}],[\"应用非常广泛\",{\"1\":{\"2901\":1,\"4155\":1}}],[\"应用场景\",{\"0\":{\"2158\":1,\"2684\":1,\"2694\":1,\"2701\":1,\"2709\":1,\"2717\":1,\"5046\":1,\"5056\":1,\"5063\":1,\"5071\":1,\"5079\":1}}],[\"应用进程再调用\",{\"1\":{\"1171\":1,\"1339\":1,\"1507\":1,\"1675\":1,\"4582\":1}}],[\"应用进程跟操作系统内核\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"4581\":1}}],[\"应用进程调用了\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"4581\":1}}],[\"应用程序\",{\"1\":{\"944\":1,\"3961\":1}}],[\"应用程序类加载器\",{\"1\":{\"210\":1,\"3604\":1}}],[\"应该尽量只在需要对数据进行精确计算时才使用\",{\"1\":{\"2651\":1,\"5013\":1}}],[\"应该尽量指定其大小\",{\"1\":{\"695\":1}}],[\"应该被考虑建立索引\",{\"1\":{\"2422\":1,\"4784\":1}}],[\"应该被优先使用\",{\"1\":{\"489\":1}}],[\"应该发送怎样的查询分组呢\",{\"1\":{\"2250\":1,\"5332\":1}}],[\"应该如何\",{\"0\":{\"2205\":1},\"1\":{\"2090\":1}}],[\"应该同步线程以避免关键的资源使用冲突\",{\"1\":{\"1112\":1,\"1280\":1,\"1448\":1,\"1616\":1,\"4523\":1}}],[\"应该用哪一个呢\",{\"1\":{\"488\":1}}],[\"应该是组合关系\",{\"1\":{\"357\":1}}],[\"应该由\",{\"1\":{\"340\":1}}],[\"应该会有会心一笑\",{\"1\":{\"277\":1,\"3665\":1}}],[\"看了你去年做了一个博客社区的项目\",{\"1\":{\"3182\":1}}],[\"看了大佬小林coding的文章\",{\"1\":{\"2098\":1}}],[\"看你是院研副部长\",{\"1\":{\"3175\":1,\"5455\":1}}],[\"看你项目中用到了网关\",{\"1\":{\"3162\":1,\"5442\":1}}],[\"看我熟悉python\",{\"1\":{\"3145\":1,\"5425\":1}}],[\"看作是\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"看它是否依然可读或可写\",{\"1\":{\"1153\":1,\"1321\":1,\"1489\":1,\"1657\":1,\"4564\":1}}],[\"看过\",{\"1\":{\"1146\":1,\"1314\":1,\"1482\":1,\"1650\":1,\"4557\":1}}],[\"看上去分配已经尽量的保证均衡了\",{\"1\":{\"1045\":1,\"5221\":1}}],[\"看完这篇文章\",{\"1\":{\"722\":1}}],[\"看结果如何\",{\"1\":{\"690\":1}}],[\"看到k神题解下的一个评论\",{\"1\":{\"334\":1}}],[\"看到上面的代码\",{\"1\":{\"277\":1,\"3665\":1}}],[\"看下它的背后\",{\"1\":{\"264\":1}}],[\"8为什么需要\",{\"0\":{\"2197\":1}}],[\"8第二次握手丢失了\",{\"0\":{\"2186\":1}}],[\"800\",{\"1\":{\"2568\":2,\"4930\":2}}],[\"80\",{\"1\":{\"2176\":2,\"2280\":1,\"5362\":1}}],[\"8080\",{\"1\":{\"939\":1,\"3339\":1,\"3345\":1,\"3956\":1}}],[\"8格式编码\",{\"1\":{\"949\":1,\"3966\":1}}],[\"8的concurrenthashmap作者认为引入红黑树后\",{\"1\":{\"790\":1}}],[\"8的concurrenthashmap同样是通过key的哈希值与数组长度取模确定该key在数组中的索引\",{\"1\":{\"790\":1}}],[\"8的hashtable中\",{\"1\":{\"784\":1}}],[\"8的实现中\",{\"1\":{\"782\":1}}],[\"8的商\",{\"1\":{\"737\":1}}],[\"8中这一步做了优化\",{\"1\":{\"780\":1}}],[\"8中的实现\",{\"1\":{\"792\":1}}],[\"8中的hash函数\",{\"1\":{\"780\":1}}],[\"8中的优化\",{\"1\":{\"778\":1}}],[\"8中使用平衡树来替代链表存储冲突的元素\",{\"1\":{\"778\":1}}],[\"8中hashmap从头插入改成尾插入\",{\"0\":{\"628\":1,\"3720\":1}}],[\"8相当于\",{\"1\":{\"737\":1}}],[\"8以前的版本\",{\"1\":{\"662\":1}}],[\"86655574\",{\"1\":{\"658\":1,\"3633\":1}}],[\"8采用红黑树存储\",{\"0\":{\"631\":1,\"3723\":1}}],[\"8从头插入改成尾插入元素的顺序不变\",{\"1\":{\"630\":1,\"3722\":1}}],[\"8\",{\"0\":{\"659\":1},\"1\":{\"276\":1,\"692\":1,\"712\":1,\"735\":1,\"737\":1,\"740\":1,\"741\":1,\"777\":1,\"778\":1,\"783\":1,\"787\":1,\"788\":1,\"816\":1,\"828\":1,\"1158\":1,\"1267\":1,\"1326\":1,\"1435\":1,\"1494\":1,\"1603\":1,\"1662\":1,\"1771\":1,\"1860\":1,\"2151\":1,\"3126\":1,\"3163\":1,\"3186\":1,\"3664\":1,\"3833\":1,\"3845\":1,\"4449\":1,\"4569\":1,\"4678\":1,\"5406\":1,\"5443\":1}}],[\"69916115\",{\"1\":{\"3401\":1}}],[\"6879c0ae9117b50074ce0a0d4c843060\",{\"1\":{\"3367\":1}}],[\"6五张牌\",{\"1\":{\"3187\":1}}],[\"60\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"600\",{\"1\":{\"2568\":3,\"4930\":3}}],[\"6字节\",{\"1\":{\"2618\":1,\"2620\":1,\"4980\":1,\"4982\":1}}],[\"6byte\",{\"1\":{\"2380\":1,\"4742\":1}}],[\"6没有\",{\"0\":{\"2210\":1}}],[\"6第四次挥手丢失了\",{\"0\":{\"2195\":1}}],[\"6既然\",{\"0\":{\"2184\":1}}],[\"6udp\",{\"0\":{\"2134\":1}}],[\"6650\",{\"1\":{\"1065\":1,\"5241\":1}}],[\"666\",{\"1\":{\"349\":1}}],[\"640\",{\"1\":{\"716\":1,\"751\":1,\"754\":1}}],[\"64\",{\"1\":{\"697\":1,\"2691\":1,\"2706\":1,\"2714\":1,\"5053\":1,\"5068\":1,\"5076\":1}}],[\"6代理模式\",{\"0\":{\"594\":1}}],[\"6\",{\"0\":{\"595\":1,\"597\":1,\"600\":1,\"603\":1,\"639\":1,\"1927\":1,\"2009\":1,\"2136\":1,\"2158\":1,\"2816\":1,\"4033\":1,\"5178\":1},\"1\":{\"276\":2,\"740\":4,\"775\":1,\"826\":1,\"1236\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"2152\":1,\"2341\":1,\"2389\":2,\"2417\":1,\"2589\":1,\"2590\":1,\"2657\":2,\"2733\":1,\"2762\":1,\"2874\":1,\"3116\":1,\"3124\":1,\"3151\":1,\"3161\":1,\"3175\":1,\"3184\":1,\"3257\":1,\"3664\":2,\"3843\":1,\"4128\":1,\"4647\":1,\"4703\":1,\"4751\":2,\"4779\":1,\"4951\":1,\"4952\":1,\"5019\":2,\"5095\":1,\"5124\":1,\"5396\":1,\"5404\":1,\"5431\":1,\"5441\":1,\"5455\":1,\"5526\":1}}],[\"6异常的底层\",{\"0\":{\"272\":1}}],[\"gao\",{\"0\":{\"5585\":1}}],[\"gateway\",{\"1\":{\"3194\":1,\"5463\":1}}],[\"gather\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"gap\",{\"0\":{\"2547\":1,\"4909\":1},\"1\":{\"2541\":1,\"2542\":1,\"2548\":1,\"2552\":1,\"4903\":1,\"4904\":1,\"4910\":1,\"4914\":1}}],[\"greater\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"graph\",{\"1\":{\"1785\":1,\"4374\":1}}],[\"graphdriver\",{\"1\":{\"1785\":1,\"4374\":1}}],[\"group\",{\"1\":{\"2664\":1,\"5026\":1}}],[\"group中有多个consumer\",{\"1\":{\"1027\":1,\"5203\":1}}],[\"groupid>\",{\"1\":{\"930\":1,\"3947\":1}}],[\"grow\",{\"1\":{\"535\":1}}],[\"gone\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"go\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"google\",{\"1\":{\"1776\":1,\"4365\":1,\"5275\":2}}],[\"goto\",{\"1\":{\"276\":1,\"3664\":1}}],[\"given\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"give\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"git\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"gitee\",{\"1\":{\"794\":1}}],[\"github\",{\"1\":{\"767\":1}}],[\"geospatial\",{\"1\":{\"2675\":1,\"5037\":1}}],[\"geometry\",{\"1\":{\"2365\":1,\"4727\":1}}],[\"generation\",{\"1\":{\"619\":1,\"3812\":1}}],[\"getsecuritymanager\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"getvalue\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"getkey\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"getandincrement\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"getapphttpcodeenum\",{\"1\":{\"919\":1,\"920\":1,\"3936\":1,\"3937\":1}}],[\"getobject\",{\"1\":{\"894\":1,\"3911\":1}}],[\"get\",{\"1\":{\"686\":1,\"704\":6,\"1024\":2,\"1033\":3,\"3022\":1,\"3026\":1,\"3320\":1,\"4276\":1,\"4280\":1,\"5200\":2,\"5209\":3}}],[\"getinstance\",{\"1\":{\"581\":1,\"3774\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"325\":1,\"3713\":1}}],[\"getdeclaredconstructors\",{\"1\":{\"325\":1,\"3713\":1}}],[\"getdeclaredmethod\",{\"1\":{\"323\":1,\"686\":1,\"691\":3,\"704\":2,\"3711\":1}}],[\"getdeclaredmethods\",{\"1\":{\"323\":1,\"3711\":1}}],[\"getdeclaredfield\",{\"1\":{\"321\":1,\"686\":1,\"704\":6,\"3709\":1}}],[\"getdeclaredfields\",{\"1\":{\"321\":1,\"3709\":1}}],[\"getmessage\",{\"1\":{\"920\":1,\"3937\":1}}],[\"getmethod\",{\"1\":{\"323\":1,\"3711\":1}}],[\"getmethods\",{\"1\":{\"323\":1,\"3711\":1}}],[\"getmap\",{\"1\":{\"293\":1,\"299\":1,\"3028\":2,\"3681\":1,\"3687\":1,\"4282\":2}}],[\"getfield\",{\"1\":{\"321\":1,\"3709\":1}}],[\"getfields\",{\"1\":{\"321\":1,\"3709\":1}}],[\"getfindclasses\",{\"1\":{\"229\":1,\"3623\":1}}],[\"getfindclasstime\",{\"1\":{\"229\":1,\"3623\":1}}],[\"getcontext\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"getconstructors\",{\"1\":{\"325\":1,\"3713\":1}}],[\"getconstructor\",{\"1\":{\"299\":1,\"316\":1,\"317\":1,\"325\":1,\"3687\":1,\"3704\":1,\"3705\":1,\"3713\":1}}],[\"getclass\",{\"1\":{\"306\":1,\"307\":1,\"686\":1,\"691\":3,\"704\":1,\"3694\":1,\"3695\":1}}],[\"getclassloadinglock\",{\"1\":{\"229\":1,\"3623\":1}}],[\"getparentdelegationtime\",{\"1\":{\"229\":1,\"3623\":1}}],[\"gc\",{\"1\":{\"547\":1,\"549\":1}}],[\"3就横空出世了\",{\"1\":{\"5280\":1}}],[\"3就已经来了\",{\"1\":{\"1974\":1,\"1989\":1,\"2004\":1,\"2017\":1,\"2030\":1,\"2045\":1,\"5265\":1,\"5288\":1}}],[\"38c93c677124\",{\"1\":{\"3401\":1}}],[\"3md5是对称加密还是非对称加密\",{\"0\":{\"3393\":1}}],[\"30下班\",{\"1\":{\"3152\":1,\"5432\":1}}],[\"30上班\",{\"1\":{\"3152\":1,\"5432\":1}}],[\"30s\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"300\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"3001\",{\"1\":{\"658\":1,\"1056\":1,\"1065\":1,\"3633\":1,\"5232\":1,\"5241\":1}}],[\"3accept\",{\"0\":{\"2207\":1}}],[\"3第一次挥手丢失了\",{\"0\":{\"2192\":1}}],[\"3为什么是三次握手\",{\"0\":{\"2181\":1}}],[\"3什么是\",{\"0\":{\"2109\":1}}],[\"3是一个更加正确的选择\",{\"1\":{\"1975\":1,\"1990\":1,\"2005\":1,\"2018\":1,\"2031\":1,\"2046\":1,\"5266\":1,\"5289\":1}}],[\"3已经悄然而至了\",{\"1\":{\"1973\":1,\"1988\":1,\"2003\":1,\"2016\":1,\"2029\":1,\"2044\":1,\"5264\":1,\"5287\":1}}],[\"3已经是箭在弦上了\",{\"1\":{\"1968\":1,\"1983\":1,\"1998\":1,\"2011\":1,\"2024\":1,\"2039\":1,\"5258\":1,\"5283\":1}}],[\"3了\",{\"1\":{\"1967\":1,\"1968\":1,\"1982\":1,\"1983\":1,\"1997\":1,\"1998\":1,\"2010\":1,\"2011\":1,\"2023\":1,\"2024\":1,\"2038\":1,\"2039\":1,\"5257\":1,\"5258\":1,\"5282\":1,\"5283\":1}}],[\"3的新闻有很多\",{\"1\":{\"1967\":1,\"1982\":1,\"1997\":1,\"2010\":1,\"2023\":1,\"2038\":1,\"5257\":1,\"5282\":1}}],[\"3d\",{\"1\":{\"1065\":1,\"5241\":1}}],[\"3个分区\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"3总结\",{\"0\":{\"710\":1,\"791\":1}}],[\"32位\",{\"1\":{\"2123\":1,\"2125\":1}}],[\"32\",{\"1\":{\"706\":1,\"2132\":1}}],[\"35590459\",{\"1\":{\"629\":1,\"3721\":1}}],[\"3静态代理\",{\"0\":{\"600\":1}}],[\"3抽象⼯⼚模式了解吗\",{\"0\":{\"591\":1}}],[\"3单例模式\",{\"0\":{\"578\":1}}],[\"33709582\",{\"1\":{\"328\":1,\"3716\":1}}],[\"3构造类的实例化对象\",{\"0\":{\"311\":1}}],[\"3\",{\"0\":{\"420\":1,\"448\":1,\"483\":1,\"526\":1,\"532\":1,\"533\":1,\"543\":1,\"553\":1,\"633\":1,\"801\":1,\"1914\":1,\"1927\":1,\"2037\":1,\"2189\":1,\"2190\":1,\"2191\":1,\"2192\":1,\"2193\":1,\"2194\":1,\"2195\":1,\"2196\":1,\"2197\":1,\"2198\":1,\"2199\":1,\"2200\":1,\"2201\":1,\"2202\":1,\"2203\":1,\"2274\":1,\"2316\":1,\"3214\":1,\"3745\":1,\"4033\":1,\"4503\":1,\"5356\":1,\"5483\":1},\"1\":{\"276\":3,\"308\":1,\"324\":1,\"327\":1,\"443\":1,\"447\":1,\"488\":1,\"581\":1,\"612\":1,\"737\":1,\"751\":1,\"775\":1,\"823\":1,\"878\":1,\"891\":1,\"905\":1,\"912\":1,\"959\":1,\"975\":1,\"1056\":1,\"1180\":1,\"1208\":1,\"1348\":1,\"1376\":1,\"1516\":1,\"1544\":1,\"1684\":1,\"1712\":1,\"1890\":1,\"1968\":1,\"1972\":1,\"1983\":1,\"1987\":1,\"1998\":1,\"2002\":1,\"2011\":1,\"2015\":1,\"2024\":1,\"2028\":1,\"2039\":1,\"2043\":1,\"2074\":1,\"2143\":1,\"2275\":3,\"2276\":2,\"2277\":1,\"2331\":1,\"2549\":1,\"2669\":1,\"2675\":1,\"2693\":1,\"2720\":1,\"2868\":1,\"3044\":1,\"3113\":1,\"3121\":1,\"3143\":1,\"3149\":1,\"3158\":1,\"3172\":1,\"3181\":1,\"3254\":1,\"3256\":1,\"3270\":1,\"3664\":3,\"3696\":1,\"3712\":1,\"3715\":1,\"3774\":1,\"3805\":1,\"3840\":1,\"3895\":1,\"3908\":1,\"3922\":1,\"3929\":1,\"3976\":1,\"3992\":1,\"4122\":1,\"4298\":1,\"4479\":1,\"4591\":1,\"4619\":1,\"4693\":1,\"4911\":1,\"5031\":1,\"5037\":1,\"5055\":1,\"5082\":1,\"5232\":1,\"5258\":1,\"5263\":1,\"5275\":1,\"5280\":2,\"5283\":1,\"5286\":1,\"5357\":3,\"5358\":2,\"5359\":1,\"5393\":1,\"5401\":1,\"5423\":1,\"5429\":1,\"5438\":1,\"5452\":1,\"5523\":1,\"5525\":1,\"5539\":1}}],[\"3throw和throws的区别\",{\"0\":{\"254\":1}}],[\"需要考虑数据持久化的问题\",{\"1\":{\"3267\":1,\"5536\":1}}],[\"需要调用下面的方法\",{\"1\":{\"3104\":1,\"4358\":1}}],[\"需要什么设置\",{\"1\":{\"3103\":1,\"4357\":1}}],[\"需要重点掌握\",{\"1\":{\"2884\":1,\"4138\":1}}],[\"需要等待全局安全点\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"需要定期对\",{\"1\":{\"2743\":1,\"5105\":1}}],[\"需要额外的空间和计算开销\",{\"1\":{\"2651\":1,\"5013\":1}}],[\"需要额外注意的一点是\",{\"1\":{\"511\":1}}],[\"需要判断插入位置是否已被其他事务加了间隙锁\",{\"1\":{\"2558\":1,\"4920\":1}}],[\"需要先下载才能审核\",{\"1\":{\"3255\":1,\"5524\":1}}],[\"需要先对表加上\",{\"1\":{\"2505\":1,\"4867\":1}}],[\"需要先在表级别加上一个\",{\"1\":{\"2503\":1,\"2504\":1,\"4865\":1,\"4866\":1}}],[\"需要先使用javac编译\",{\"1\":{\"275\":1,\"3663\":1}}],[\"需要注意的是布隆过滤器可能会存在误判的情况\",{\"1\":{\"2784\":1,\"5146\":1}}],[\"需要注意的是\",{\"1\":{\"2477\":1,\"4839\":1}}],[\"需要注意的是刚刚\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"需要查询\",{\"1\":{\"2411\":1,\"4773\":1}}],[\"需要查询主键\",{\"1\":{\"2411\":1,\"4773\":1}}],[\"需要经过经典的\",{\"1\":{\"2276\":1,\"5358\":1}}],[\"需要客户端自己发送请求来获取相关资源\",{\"1\":{\"2273\":1,\"5355\":1}}],[\"需要解决\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"需要有一定的策略\",{\"1\":{\"1956\":1,\"4062\":1}}],[\"需要有对应的迁移服务进行定时迁移\",{\"1\":{\"1949\":1,\"4055\":1}}],[\"需要刷新下缓存\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"需要补充说明的一点是\",{\"1\":{\"1921\":1,\"4510\":1}}],[\"需要搞清楚traceid和spanid以及抽样\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"需要在\",{\"1\":{\"984\":1,\"4001\":1}}],[\"需要说明的是\",{\"1\":{\"668\":1}}],[\"需要增强的方法\",{\"1\":{\"622\":1,\"3815\":1}}],[\"需要增强的对象\",{\"1\":{\"622\":1,\"3815\":1}}],[\"需要对每个目标类都单独写一个代理类\",{\"1\":{\"601\":1,\"3794\":1}}],[\"需要提前从class中调用getconstructor\",{\"1\":{\"318\":1,\"3706\":1}}],[\"需要进行处理\",{\"1\":{\"256\":1,\"3652\":1}}],[\"返回线程池对象的弊端如下\",{\"1\":{\"3089\":1,\"4343\":1}}],[\"返回值是实际复制数据的长度\",{\"1\":{\"1178\":1,\"1346\":1,\"1514\":1,\"1682\":1,\"4589\":1}}],[\"返回错误信息\",{\"1\":{\"1842\":1,\"4431\":1}}],[\"返回错误\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"返回时\",{\"1\":{\"1145\":1,\"1313\":1,\"1481\":1,\"1649\":1,\"4556\":1}}],[\"返回给dispatcherservlet\",{\"1\":{\"826\":1,\"3843\":1}}],[\"返回一个\",{\"1\":{\"825\":1,\"3842\":1}}],[\"返回一个视图对象\",{\"1\":{\"814\":1,\"3831\":1}}],[\"返回\",{\"1\":{\"271\":2}}],[\"返回顶部按钮\",{\"1\":{\"22\":1,\"139\":1,\"3421\":1,\"3538\":1}}],[\"测试它们的性能\",{\"1\":{\"405\":1}}],[\"测试\",{\"1\":{\"271\":2}}],[\"因而从这个角度来说\",{\"1\":{\"2561\":1,\"4923\":1}}],[\"因而\",{\"1\":{\"1144\":1,\"1312\":1,\"1480\":1,\"1648\":1,\"4555\":1}}],[\"因而近似平衡\",{\"1\":{\"421\":1,\"3746\":1}}],[\"因为md5可以被暴力破解\",{\"1\":{\"3334\":1}}],[\"因为md5是不可逆的\",{\"1\":{\"3334\":1}}],[\"因为每个线程都需要执行\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"因为还是可能存在定期删除和惰性删除漏掉了很多过期\",{\"1\":{\"2758\":1,\"5120\":1}}],[\"因为可以读到未提交事务修改的数据\",{\"1\":{\"2611\":1,\"4973\":1}}],[\"因为可重复读隔离级别下\",{\"1\":{\"2608\":1,\"4970\":1}}],[\"因为使用\",{\"1\":{\"2606\":1,\"4968\":1}}],[\"因为事务\",{\"1\":{\"2580\":1,\"4942\":1}}],[\"因为多个事务同时使用相同的数据时\",{\"1\":{\"2569\":1,\"4931\":1}}],[\"因为间隙锁的目的是防止插入幻影记录而提出的\",{\"1\":{\"2550\":1,\"4912\":1}}],[\"因为当执行\",{\"1\":{\"2609\":1,\"4971\":1}}],[\"因为当事务提交了\",{\"1\":{\"2536\":1,\"4898\":1}}],[\"因为当我们对数据库表进行操作时\",{\"1\":{\"2485\":1,\"4847\":1}}],[\"因为它属于快照读\",{\"1\":{\"2534\":1,\"4896\":1}}],[\"因为它是存在与我们的starter中的\",{\"1\":{\"956\":1,\"3973\":1}}],[\"因为另一个事务中的插入会被阻塞\",{\"1\":{\"2520\":1,\"4882\":1}}],[\"因为申请不到\",{\"1\":{\"2498\":1,\"4860\":1}}],[\"因为表锁的颗粒度太大\",{\"1\":{\"2482\":1,\"4844\":1}}],[\"因为索引是需要占用磁盘空间的\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"因为对于数据为\",{\"1\":{\"2420\":1,\"4782\":1}}],[\"因为二级索引的叶子节点就存放的是主键\",{\"1\":{\"2402\":1,\"4764\":1}}],[\"因为整个\",{\"1\":{\"2395\":1,\"4757\":1}}],[\"因为只取前几个字符\",{\"1\":{\"2388\":1,\"4750\":1}}],[\"因为只有一个进程\",{\"1\":{\"1233\":1,\"1401\":1,\"1569\":1,\"1737\":1,\"4644\":1}}],[\"因为该分组的目的\",{\"1\":{\"2250\":1,\"5332\":1}}],[\"因为这正是我们要问询的\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"因为这涉及了具体的业务场景\",{\"1\":{\"1815\":1,\"4404\":1}}],[\"因为分表后\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"因为分区数可能无法被消费者数量整除\",{\"1\":{\"1030\":1,\"5206\":1}}],[\"因为我这里是还要获取点赞数和评论数啥的\",{\"1\":{\"1930\":1,\"4036\":1}}],[\"因为我们一开始讲了在\",{\"1\":{\"1894\":1,\"4483\":1}}],[\"因为我们只有一个\",{\"1\":{\"1883\":1,\"4472\":1}}],[\"因为我们没有在内存层面去拷贝数据\",{\"1\":{\"1188\":1,\"1356\":1,\"1524\":1,\"1692\":1,\"4599\":1}}],[\"因为我们知道\",{\"1\":{\"757\":1}}],[\"因为我们根据\",{\"1\":{\"391\":1}}],[\"因为重量级锁会频繁切换内核态与用户态\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"因为都是自旋\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"因为初始化所以\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"因为一个\",{\"1\":{\"1254\":1,\"1422\":1,\"1590\":1,\"1758\":1,\"2230\":1,\"4665\":1,\"5312\":1}}],[\"因为系统调用还是\",{\"1\":{\"1174\":1,\"1342\":1,\"1510\":1,\"1678\":1,\"4585\":1}}],[\"因为仍然需要通过\",{\"1\":{\"1174\":1,\"1342\":1,\"1510\":1,\"1678\":1,\"4585\":1}}],[\"因为边缘触发可以减少\",{\"1\":{\"1155\":1,\"1323\":1,\"1491\":1,\"1659\":1,\"4566\":1}}],[\"因为在可重复读的隔离级别下\",{\"1\":{\"2463\":1,\"4825\":1}}],[\"因为在内核维护了红黑树\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"因为在一个大文件里查找和删除消息是很费时的事\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"因为互斥对象只有一个\",{\"1\":{\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"4525\":1}}],[\"因为某些消费者不参与一些topic的分配\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"因为0和任何数做与\",{\"1\":{\"750\":1}}],[\"因为hash结果越分散效果越好\",{\"1\":{\"771\":1}}],[\"因为hashtable是个线程安全的类\",{\"1\":{\"762\":1}}],[\"因为hash值是随机的\",{\"1\":{\"667\":1}}],[\"因为hashset底层是用hashmap存储数据的\",{\"1\":{\"460\":1}}],[\"因为concurrenthashmap使用了分段锁\",{\"1\":{\"654\":1}}],[\"因为数据均匀分布在每个bin中\",{\"1\":{\"640\":1,\"3732\":1}}],[\"因为他的底层结构就是使用数组实现的\",{\"1\":{\"567\":1}}],[\"因为synchronizedlist只是使用同步代码块包裹了arraylist的方法\",{\"1\":{\"562\":1}}],[\"因为你可以通过设置集合的初始化大小来避免不必要的资源开销\",{\"1\":{\"556\":1}}],[\"因为arraylist本质上就是一个数组\",{\"1\":{\"500\":1}}],[\"因为需要移动元素\",{\"1\":{\"473\":1}}],[\"因为此时二叉搜索树不是平衡树\",{\"1\":{\"433\":1,\"3758\":1}}],[\"因为要保持兼容性\",{\"1\":{\"368\":1}}],[\"因为\",{\"1\":{\"314\":1,\"393\":1,\"885\":1,\"1217\":1,\"1218\":1,\"1236\":1,\"1385\":1,\"1386\":1,\"1404\":1,\"1553\":1,\"1554\":1,\"1572\":1,\"1721\":1,\"1722\":1,\"1740\":1,\"1858\":1,\"1897\":1,\"1900\":1,\"2108\":1,\"2283\":1,\"2398\":1,\"2430\":1,\"2495\":1,\"2634\":1,\"2680\":1,\"2681\":1,\"2682\":1,\"2683\":1,\"3702\":1,\"3902\":1,\"4447\":1,\"4486\":1,\"4489\":1,\"4628\":1,\"4629\":1,\"4647\":1,\"4760\":1,\"4792\":1,\"4857\":1,\"4996\":1,\"5042\":1,\"5043\":1,\"5044\":1,\"5045\":1,\"5365\":1}}],[\"因为终于看到了exception\",{\"1\":{\"277\":1,\"3665\":1}}],[\"因为return表⽰的是要整个⽅法体返回\",{\"1\":{\"269\":1}}],[\"因此如果你的密码很不幸被搜集在彩虹表里\",{\"1\":{\"3352\":1}}],[\"因此在\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"因此在操作数据时\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"因此fixedthreadpool最多只能创建核心线程数的线程\",{\"1\":{\"3065\":1,\"4319\":1}}],[\"因此这种策略会降低对于新任务提交速度\",{\"1\":{\"3058\":1,\"4312\":1}}],[\"因此乐观锁不会上锁\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"因此可以采用这种方式来备份数据库\",{\"1\":{\"2465\":1,\"4827\":1}}],[\"因此可以借助于\",{\"1\":{\"37\":1,\"3436\":1}}],[\"因此哈希表可以快速检索数据\",{\"1\":{\"2348\":1,\"4710\":1}}],[\"因此经常用于\",{\"1\":{\"2159\":1,\"2162\":1}}],[\"因此也称其为容器\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"因此实际应用中也看不到单\",{\"1\":{\"1253\":1,\"1421\":1,\"1589\":1,\"1757\":1,\"4664\":1}}],[\"因此实际中并没有应用\",{\"1\":{\"1207\":1,\"1375\":1,\"1543\":1,\"1711\":1,\"4618\":1}}],[\"因此我们程序要保证一次性将内核缓冲区的数据读取完\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4560\":1}}],[\"因此处理速度非常快\",{\"1\":{\"730\":1}}],[\"因此就可能导致不均匀的数据分布\",{\"1\":{\"640\":1,\"3732\":1}}],[\"因此不能代理声明为\",{\"1\":{\"625\":1,\"3818\":1}}],[\"因此需要特定的命令解析器执行引擎\",{\"1\":{\"182\":1,\"3576\":1}}],[\"因此\",{\"1\":{\"28\":1,\"341\":1,\"347\":1,\"362\":1,\"402\":1,\"410\":1,\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"1918\":1,\"2130\":1,\"2170\":1,\"2176\":1,\"2249\":1,\"2295\":1,\"2333\":1,\"2360\":2,\"2521\":1,\"3312\":1,\"3427\":1,\"4507\":1,\"4565\":1,\"4695\":1,\"4722\":2,\"4883\":1,\"5331\":1,\"5377\":1}}],[\"⾥⾯的code会不会被执⾏\",{\"1\":{\"268\":1}}],[\"⾥⾯有⼀个return语句\",{\"1\":{\"268\":1}}],[\"所在子网相连的接口上\",{\"1\":{\"2255\":1,\"5337\":1}}],[\"所在子网的那个路由器\",{\"1\":{\"2252\":1,\"5334\":1}}],[\"所在子网内的所有设备\",{\"1\":{\"2250\":1,\"5332\":1}}],[\"所在的节点即可取出数据\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"所在的子网了\",{\"1\":{\"2256\":1,\"5338\":1}}],[\"所在的子网\",{\"1\":{\"2252\":1,\"2256\":1,\"5334\":1,\"5338\":1}}],[\"所在的服务器\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"所带来的三级缓存问题\",{\"1\":{\"895\":1,\"3912\":1}}],[\"所谓唯一性\",{\"1\":{\"3313\":1}}],[\"所谓的长事务\",{\"1\":{\"2493\":1,\"4855\":1}}],[\"所谓的状态同步是指数据同步\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"所谓的双端队列\",{\"1\":{\"387\":1}}],[\"所谓事务管理\",{\"1\":{\"849\":1,\"3866\":1}}],[\"所有线程在当前任务执行完毕后\",{\"1\":{\"3082\":1,\"4336\":1}}],[\"所有线程都在队列里排队\",{\"1\":{\"2987\":1,\"4241\":1}}],[\"所有变量都需要存储在主内存中\",{\"1\":{\"2941\":1,\"4195\":1}}],[\"所有值小于\",{\"1\":{\"2706\":1,\"5068\":1}}],[\"所有需要查询的字段的值\",{\"1\":{\"2374\":1,\"2409\":1,\"4736\":1,\"4771\":1}}],[\"所有传输的内容都经过加密\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"所有传输的内容都是明文\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"所有节点访问同一份最新的数据副本\",{\"1\":{\"1909\":1,\"4498\":1}}],[\"所有consumer都订阅了这4个分区\",{\"1\":{\"1053\":1,\"5229\":1}}],[\"所有\",{\"1\":{\"907\":1,\"3924\":1}}],[\"所有的线程都能得到资源\",{\"1\":{\"2988\":1,\"4242\":1}}],[\"所有的线程都可以访问并修改同一个资源\",{\"1\":{\"2837\":1,\"4091\":1}}],[\"所有的写命令会追加到\",{\"1\":{\"2740\":1,\"5102\":1}}],[\"所有的数据都是通过\",{\"1\":{\"1188\":1,\"1356\":1,\"1524\":1,\"1692\":1,\"4599\":1}}],[\"所有的事务依次逐个执行\",{\"1\":{\"856\":1,\"3873\":1}}],[\"所有的请求最终都会传送到顶层的启动类加载器\",{\"1\":{\"233\":1,\"3627\":1}}],[\"所有方法都实现了同步\",{\"1\":{\"520\":1}}],[\"所有属性值都是对应类型的初始值\",{\"1\":{\"314\":1,\"3702\":1}}],[\"所以还是需要等待催生http2不得不出的时机到来\",{\"1\":{\"5278\":1}}],[\"所以md5不再是安全的了\",{\"1\":{\"3334\":1}}],[\"所以md5是安全的\",{\"1\":{\"3334\":1}}],[\"所以mybatis\",{\"1\":{\"991\":1,\"4008\":1}}],[\"所以尽量选择具有唯一性的字段\",{\"1\":{\"3313\":1}}],[\"所以需要把工具类拷贝一份到网关微服务\",{\"1\":{\"3241\":1,\"5510\":1}}],[\"所以需要根据类别去分开查找\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"所以问我一个逻辑题\",{\"1\":{\"3187\":1}}],[\"所以最多只能创建核心线程数的线程\",{\"1\":{\"3067\":1,\"4321\":1}}],[\"所以最后你获得的这个集合所占的空间总是比你实际需要的要大\",{\"1\":{\"556\":1}}],[\"所以响应速度更快\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"所以复杂度为\",{\"1\":{\"2682\":1,\"5044\":1}}],[\"所以获取长度的复杂度为\",{\"1\":{\"2682\":1,\"5044\":1}}],[\"所以查询性能会受到一定的影响\",{\"1\":{\"2665\":1,\"5027\":1}}],[\"所以直接读取最新的数据就好了\",{\"1\":{\"2611\":1,\"4973\":1}}],[\"所以大多数\",{\"1\":{\"2565\":1,\"4927\":1}}],[\"所以为了能安全的对表结构进行变更\",{\"1\":{\"2500\":1,\"4862\":1}}],[\"所以域名的层级关系类似一个树状结构\",{\"1\":{\"2289\":1,\"5371\":1}}],[\"所以上层保证相同数据到同一个机房即可\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"所以就很好了避免幻读问题\",{\"1\":{\"2608\":1,\"2609\":1,\"4970\":1,\"4971\":1}}],[\"所以就需要消费者消费成功\",{\"1\":{\"1940\":1,\"4046\":1}}],[\"所以就避免了内存拷贝消耗\",{\"1\":{\"1145\":1,\"1313\":1,\"1481\":1,\"1649\":1,\"4556\":1}}],[\"所以会消耗过多的\",{\"1\":{\"2665\":1,\"5027\":1}}],[\"所以会对动态表进行更新操作\",{\"1\":{\"1930\":1,\"4036\":1}}],[\"所以会出现死循环\",{\"1\":{\"885\":1,\"3902\":1}}],[\"所以其他\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"所以不会导致缓冲区溢出的问题\",{\"1\":{\"2683\":1,\"5045\":1}}],[\"所以不用担心后面的数据没接收到导致数据不一致性\",{\"1\":{\"1894\":1,\"4483\":1}}],[\"所以不能作为\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"所以无法进行投票等操作了\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"所以此时server1\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"所以当\",{\"1\":{\"1883\":1,\"4472\":1}}],[\"所以实现起来比较简单\",{\"1\":{\"1231\":1,\"1399\":1,\"1567\":1,\"1735\":1,\"4642\":1}}],[\"所以在使用这两条语句的时候\",{\"1\":{\"2536\":1,\"4898\":1}}],[\"所以在收到通知后应尽可能地读写数据\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"所以在收到通知后\",{\"1\":{\"1153\":1,\"1321\":1,\"1489\":1,\"1657\":1,\"4564\":1}}],[\"所以在锁定范围和锁的作用域上两者并无区别\",{\"1\":{\"562\":1}}],[\"所以只需要传入一个待检测的\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"所以也叫做时分多路复用\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"所以可以考虑使用前缀索引带替普通索引\",{\"1\":{\"2436\":1,\"4798\":1}}],[\"所以可以根据这个信息确定送给哪个模块\",{\"1\":{\"2175\":1}}],[\"所以可以保证公共资源不会被多个线程同时访问\",{\"1\":{\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"4525\":1}}],[\"所以可以认为二叉搜索树的时间复杂度介于o\",{\"1\":{\"419\":1,\"3744\":1}}],[\"所以必然会涉及到partition的分配问题\",{\"1\":{\"1027\":1,\"5203\":1}}],[\"所以对于主键索引来说\",{\"1\":{\"2399\":1,\"4761\":1}}],[\"所以对象之间两两不相等\",{\"1\":{\"997\":1,\"4014\":1}}],[\"所以对不同的操作具有不同的效率\",{\"1\":{\"499\":1}}],[\"所以我们一般认为\",{\"1\":{\"5275\":1}}],[\"所以我们可以看到\",{\"1\":{\"1096\":1}}],[\"所以我们的每个starter都是依赖autoconfigure的\",{\"1\":{\"956\":1,\"3973\":1}}],[\"所以我们在写依赖时才不需要写版本号\",{\"1\":{\"950\":1,\"3967\":1}}],[\"所以我们在分析\",{\"1\":{\"870\":1,\"3887\":1}}],[\"所以要存放到三级缓存中处理\",{\"1\":{\"893\":1,\"3910\":1}}],[\"所以如图按照\",{\"1\":{\"885\":1,\"3902\":1}}],[\"所以如果要使用key来映射分区\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"所以如果你要在集合中保存大量的数据那么使用vector有一些优势\",{\"1\":{\"556\":1}}],[\"所以如果可以预估数据量的话\",{\"1\":{\"506\":1}}],[\"所以作者并未在哈希值的计算上做过多设计\",{\"1\":{\"790\":1}}],[\"所以hashmap为解决这问题\",{\"1\":{\"773\":1}}],[\"所以从hash计算的效率上\",{\"1\":{\"772\":1}}],[\"所以单从这一点上看\",{\"1\":{\"771\":1}}],[\"所以java并没有考虑效率问题\",{\"1\":{\"762\":1}}],[\"所以效率不如红黑树\",{\"1\":{\"636\":1,\"3728\":1}}],[\"所以这就导致原链表顺序为a\",{\"1\":{\"630\":1,\"3722\":1}}],[\"所以这里比较如下两个list1和list2的区别\",{\"1\":{\"530\":1}}],[\"所以说\",{\"1\":{\"565\":1,\"2282\":1,\"5364\":1}}],[\"所以保存相同内容的vector与arraylist\",{\"1\":{\"516\":1}}],[\"所以treeset中的元素要实现comparable接口\",{\"1\":{\"462\":1}}],[\"所以它也可以保持插入顺序\",{\"1\":{\"449\":1}}],[\"所以它比普通的二叉搜索树效率要低一点\",{\"1\":{\"434\":1,\"3759\":1}}],[\"所以发动机这个类和车这个类之间\",{\"1\":{\"357\":1}}],[\"所以程序员这个类可以继承雇员类\",{\"1\":{\"355\":1}}],[\"所以猫这个类可以继承动物类\",{\"1\":{\"354\":1}}],[\"所以\",{\"1\":{\"266\":1,\"269\":1,\"335\":1,\"358\":1,\"363\":1,\"388\":1,\"393\":1,\"396\":1,\"455\":1,\"568\":1,\"661\":1,\"701\":1,\"742\":1,\"750\":1,\"875\":1,\"879\":1,\"1010\":1,\"1012\":1,\"1097\":1,\"1140\":1,\"1154\":1,\"1186\":1,\"1190\":1,\"1235\":1,\"1236\":1,\"1308\":1,\"1322\":1,\"1354\":1,\"1358\":1,\"1403\":1,\"1404\":1,\"1476\":1,\"1490\":1,\"1522\":1,\"1526\":1,\"1571\":1,\"1572\":1,\"1644\":1,\"1658\":1,\"1690\":1,\"1694\":1,\"1739\":1,\"1740\":1,\"1891\":1,\"1902\":1,\"1968\":1,\"1974\":1,\"1975\":1,\"1983\":1,\"1989\":1,\"1990\":1,\"1998\":1,\"2004\":1,\"2005\":1,\"2011\":1,\"2017\":1,\"2018\":1,\"2024\":1,\"2030\":1,\"2031\":1,\"2039\":1,\"2045\":1,\"2046\":1,\"2415\":1,\"2513\":1,\"2531\":1,\"2553\":1,\"2604\":1,\"2606\":1,\"2681\":1,\"2757\":1,\"3281\":1,\"3892\":1,\"3896\":1,\"4480\":1,\"4491\":1,\"4551\":1,\"4565\":1,\"4597\":1,\"4601\":1,\"4646\":1,\"4647\":1,\"4777\":1,\"4875\":1,\"4893\":1,\"4915\":1,\"4966\":1,\"4968\":1,\"5043\":1,\"5119\":1,\"5186\":1,\"5188\":1,\"5258\":1,\"5265\":1,\"5266\":1,\"5275\":2,\"5283\":1,\"5288\":1,\"5289\":1,\"5550\":1}}],[\"xian\",{\"0\":{\"5585\":1}}],[\"xiaolincoding\",{\"1\":{\"1158\":1,\"1267\":1,\"1326\":1,\"1435\":1,\"1494\":1,\"1603\":1,\"1662\":1,\"1771\":1,\"4569\":1,\"4678\":1}}],[\"xiaolegeaizy\",{\"1\":{\"970\":1,\"3987\":1}}],[\"xx\",{\"1\":{\"3320\":1}}],[\"xxx\",{\"1\":{\"3318\":1}}],[\"xxxautoconfiguration的作用就是按需加载组件\",{\"1\":{\"907\":1,\"3924\":1}}],[\"xxx包实现起步依赖\",{\"1\":{\"900\":1,\"3917\":1}}],[\"x锁\",{\"1\":{\"2537\":1,\"4899\":1}}],[\"x\",{\"1\":{\"733\":2,\"737\":2,\"2303\":4,\"2544\":1,\"2545\":2,\"2546\":5,\"2550\":1,\"2554\":2,\"2555\":2,\"2556\":3,\"4906\":1,\"4907\":2,\"4908\":5,\"4912\":1,\"4916\":2,\"4917\":2,\"4918\":3,\"5385\":4}}],[\"xml里面加入配置\",{\"1\":{\"987\":1,\"4004\":1}}],[\"xml并解析出里面所有的标签实例化到ioc容器中\",{\"1\":{\"327\":1,\"3715\":1}}],[\"xml\",{\"1\":{\"265\":1,\"821\":1,\"3838\":1}}],[\"xbootclasspath参数指定的路径下的所有类\",{\"1\":{\"208\":1,\"3602\":1}}],[\"子进程执行\",{\"1\":{\"2731\":1,\"5093\":1}}],[\"子查询的结果集无法使用索引\",{\"1\":{\"2665\":1,\"5027\":1}}],[\"子查询性能差的原因\",{\"1\":{\"2665\":1,\"5027\":1}}],[\"子句中\",{\"1\":{\"2664\":1,\"5026\":1}}],[\"子句中打开资源\",{\"1\":{\"262\":1,\"3658\":1}}],[\"子线程无须返回数据\",{\"1\":{\"1266\":1,\"1434\":1,\"1602\":1,\"1770\":1,\"4677\":1}}],[\"子线程负责完成后续的业务处理\",{\"1\":{\"1265\":1,\"1433\":1,\"1601\":1,\"1769\":1,\"4676\":1}}],[\"子线程中的\",{\"1\":{\"1261\":1,\"1429\":1,\"1597\":1,\"1765\":1,\"4672\":1}}],[\"子线程完成业务处理后\",{\"1\":{\"1249\":1,\"1417\":1,\"1585\":1,\"1753\":1,\"4660\":1}}],[\"子线程里的\",{\"1\":{\"1247\":1,\"1415\":1,\"1583\":1,\"1751\":1,\"4658\":1}}],[\"子加载器才会尝试自己去加载\",{\"1\":{\"234\":1,\"3628\":1}}],[\"大学时间我主要利用课外时间学习了\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"大致相同\",{\"1\":{\"2823\":1,\"4077\":1}}],[\"大致如下图所示\",{\"1\":{\"1848\":1,\"4437\":1}}],[\"大于等于这个\",{\"1\":{\"2622\":1,\"2624\":1,\"4984\":1,\"4986\":1}}],[\"大小\",{\"1\":{\"2156\":1,\"2157\":1}}],[\"大白话\",{\"1\":{\"2116\":1}}],[\"大量长任务\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"大量任务并发竞争时\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"大数据题\",{\"0\":{\"1924\":1,\"4030\":1}}],[\"大的优先\",{\"1\":{\"1890\":2,\"4479\":2}}],[\"大的优先作为\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"大的优先为\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"大大降低系统的性能\",{\"1\":{\"2978\":1,\"4232\":1}}],[\"大大降低数据库的性能\",{\"1\":{\"1814\":1,\"4403\":1}}],[\"大大简化了\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"大大提高了检测的效率\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"大部分人解释这一定律时\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"大部分时间是单线程操作的\",{\"1\":{\"654\":1}}],[\"大部分情况都是\",{\"1\":{\"626\":1,\"3819\":1}}],[\"大部分类在具体用到的时候才会去加载\",{\"1\":{\"204\":1,\"3598\":1}}],[\"大家好\",{\"1\":{\"2053\":1}}],[\"大家应该都知道\",{\"1\":{\"401\":1}}],[\"大家可以把\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"大家可以看到\",{\"1\":{\"400\":1}}],[\"大家可以看一下这篇探讨\",{\"1\":{\"397\":1}}],[\"大家可以想象\",{\"1\":{\"388\":1}}],[\"大功告成\",{\"1\":{\"294\":1,\"3682\":1}}],[\"大多数的\",{\"1\":{\"262\":1,\"3658\":1}}],[\"watistatus\",{\"1\":{\"2919\":1,\"4173\":1}}],[\"waitstatus\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"wait\",{\"0\":{\"2196\":1,\"2197\":1,\"2198\":1,\"2199\":1,\"2200\":1,\"2201\":1},\"1\":{\"1118\":1,\"1141\":1,\"1145\":1,\"1149\":1,\"1150\":1,\"1155\":1,\"1286\":1,\"1309\":1,\"1313\":1,\"1317\":1,\"1318\":1,\"1323\":1,\"1454\":1,\"1477\":1,\"1481\":1,\"1485\":1,\"1486\":1,\"1491\":1,\"1622\":1,\"1645\":1,\"1649\":1,\"1653\":1,\"1654\":1,\"1659\":1,\"2081\":1,\"2082\":1,\"2083\":1,\"2084\":1,\"2085\":1,\"2086\":1,\"3005\":1,\"3043\":1,\"4259\":1,\"4297\":1,\"4529\":1,\"4552\":1,\"4556\":1,\"4560\":1,\"4561\":1,\"4566\":1}}],[\"wang\",{\"1\":{\"775\":1}}],[\"wechat\",{\"1\":{\"3106\":1,\"4360\":1}}],[\"websockets\",{\"1\":{\"3128\":1,\"5408\":1}}],[\"web\",{\"1\":{\"942\":1,\"944\":2,\"3959\":1,\"3961\":2}}],[\"weixin\",{\"1\":{\"915\":1,\"1003\":1,\"2638\":1,\"2856\":1,\"2961\":1,\"2995\":1,\"3106\":1,\"3932\":1,\"4020\":1,\"4110\":1,\"4215\":1,\"4249\":1,\"4360\":1,\"5000\":1}}],[\"word\",{\"1\":{\"775\":1,\"2840\":2,\"4094\":2}}],[\"workqueue\",{\"1\":{\"3043\":6,\"3047\":1,\"4297\":6,\"4301\":1}}],[\"work\",{\"1\":{\"547\":1,\"549\":1}}],[\"will\",{\"1\":{\"760\":1,\"3043\":2,\"4297\":2}}],[\"with\",{\"0\":{\"261\":1,\"3657\":1},\"1\":{\"2450\":1,\"3043\":1,\"4297\":1,\"4812\":1}}],[\"write将数据写入到了系统内核缓冲区之后直接返回了\",{\"1\":{\"2741\":1,\"5103\":1}}],[\"writefields\",{\"1\":{\"513\":1}}],[\"writeint\",{\"1\":{\"510\":1}}],[\"write\",{\"0\":{\"1164\":1,\"1332\":1,\"1500\":1,\"1668\":1,\"4575\":1},\"1\":{\"510\":3,\"1115\":1,\"1154\":1,\"1161\":1,\"1166\":1,\"1171\":1,\"1179\":1,\"1283\":1,\"1322\":1,\"1329\":1,\"1334\":1,\"1339\":1,\"1347\":1,\"1451\":1,\"1490\":1,\"1497\":1,\"1502\":1,\"1507\":1,\"1515\":1,\"1619\":1,\"1658\":1,\"1665\":1,\"1670\":1,\"1675\":1,\"1683\":1,\"2476\":1,\"2509\":1,\"2741\":1,\"2747\":1,\"4526\":1,\"4565\":1,\"4572\":1,\"4577\":1,\"4582\":1,\"4590\":1,\"4838\":1,\"4871\":1,\"5103\":1,\"5109\":1}}],[\"writeobject\",{\"1\":{\"510\":2,\"513\":1}}],[\"www\",{\"1\":{\"488\":1,\"1158\":1,\"1267\":1,\"1326\":1,\"1435\":1,\"1494\":1,\"1603\":1,\"1662\":1,\"1771\":1,\"2285\":1,\"2287\":1,\"2297\":1,\"2298\":2,\"2299\":1,\"2300\":1,\"2301\":1,\"2302\":1,\"3401\":1,\"4569\":1,\"4678\":1,\"5367\":1,\"5369\":1,\"5379\":1,\"5380\":2,\"5381\":1,\"5382\":1,\"5383\":1,\"5384\":1}}],[\"when\",{\"1\":{\"3043\":3,\"4297\":3}}],[\"where\",{\"1\":{\"83\":1,\"2422\":1,\"3482\":1,\"4784\":1}}],[\"while\",{\"1\":{\"265\":1}}],[\"570da6d5277a646f6552b8832012f5dc\",{\"1\":{\"3363\":1}}],[\"543902719\",{\"1\":{\"2904\":1,\"4158\":1}}],[\"5分钟\",{\"0\":{\"3110\":1,\"5390\":1},\"1\":{\"2727\":1,\"5089\":1}}],[\"52258054\",{\"1\":{\"2638\":1,\"5000\":1}}],[\"5没有\",{\"0\":{\"2209\":1}}],[\"5第三次挥手丢失了\",{\"0\":{\"2194\":1}}],[\"5初始序列号\",{\"0\":{\"2183\":1}}],[\"5如何唯一确定一个\",{\"0\":{\"2121\":1}}],[\"58同城\",{\"0\":{\"1927\":1,\"4033\":1}}],[\"512\",{\"1\":{\"2691\":1,\"2699\":1,\"2706\":1,\"5053\":1,\"5061\":1,\"5068\":1}}],[\"51167384\",{\"1\":{\"1065\":1,\"5241\":1}}],[\"51b27d00cf50d9aca86e0934ab42a565\",{\"1\":{\"1042\":1,\"5218\":1}}],[\"5502\",{\"1\":{\"658\":1,\"3633\":1}}],[\"5装饰器模式\",{\"0\":{\"593\":1}}],[\"5倍\",{\"1\":{\"524\":2}}],[\"5finally和return的执行顺序\",{\"0\":{\"267\":1}}],[\"5\",{\"0\":{\"456\":1,\"637\":1,\"1996\":1,\"3389\":1,\"3391\":1,\"3393\":1,\"3396\":1},\"1\":{\"260\":1,\"276\":1,\"409\":1,\"825\":1,\"1974\":1,\"1989\":1,\"2004\":1,\"2017\":1,\"2030\":1,\"2045\":1,\"2149\":1,\"2321\":2,\"2323\":2,\"2338\":1,\"2389\":1,\"2417\":1,\"2428\":1,\"2521\":1,\"2549\":1,\"2588\":2,\"2657\":2,\"2674\":1,\"2739\":1,\"2872\":1,\"2880\":1,\"2891\":1,\"2898\":1,\"2901\":1,\"3115\":1,\"3123\":1,\"3145\":1,\"3146\":1,\"3160\":1,\"3174\":1,\"3183\":1,\"3256\":1,\"3326\":1,\"3386\":1,\"3656\":1,\"3664\":1,\"3842\":1,\"4126\":1,\"4134\":1,\"4145\":1,\"4152\":1,\"4155\":1,\"4683\":2,\"4685\":2,\"4700\":1,\"4751\":1,\"4779\":1,\"4790\":1,\"4883\":1,\"4911\":1,\"4950\":2,\"5019\":2,\"5036\":1,\"5101\":1,\"5265\":1,\"5288\":1,\"5395\":1,\"5403\":1,\"5425\":1,\"5426\":1,\"5440\":1,\"5454\":1,\"5525\":1}}],[\"若所有线程均在工作\",{\"1\":{\"3082\":1,\"4336\":1}}],[\"若多余一个任务被提交到该线程池\",{\"1\":{\"3081\":1,\"4335\":1}}],[\"若没有\",{\"1\":{\"3080\":1,\"4334\":1}}],[\"若该记录被其他事务占用或当前版本对该事务不可见\",{\"1\":{\"2632\":1,\"4994\":1}}],[\"若该同步锁被别的线程占用\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"若系统出现\",{\"1\":{\"1919\":1,\"4508\":1}}],[\"若要重写某一业务代码\",{\"1\":{\"1809\":1,\"4398\":1}}],[\"若扩容后容量仍然小于最小容量\",{\"1\":{\"524\":1}}],[\"若声明多个异常\",{\"1\":{\"256\":1,\"3652\":1}}],[\"若方法中存在检查异常\",{\"1\":{\"256\":1,\"3652\":1}}],[\"那你怎么判断它使用完了呢\",{\"1\":{\"3185\":1}}],[\"那你什么时间把这个对象删除的呢\",{\"1\":{\"3185\":1}}],[\"那你能简单说下threadlocal的原理吗\",{\"1\":{\"3184\":1}}],[\"那你熟悉这个加密算法吗\",{\"1\":{\"3183\":1}}],[\"那当前线程就要阻塞等待\",{\"1\":{\"3007\":1,\"4261\":1}}],[\"那多个线程之间并不会相互影响\",{\"1\":{\"2984\":1,\"4238\":1}}],[\"那这部分数据就算丢失了\",{\"1\":{\"2736\":1,\"5098\":1}}],[\"那在对表结构做变更操作的时候\",{\"1\":{\"2493\":1,\"4855\":1}}],[\"那如果数据库有一个长事务\",{\"1\":{\"2493\":1,\"4855\":1}}],[\"那它是在什么时候释放的\",{\"1\":{\"2491\":1,\"4853\":1}}],[\"那有什么其他方式可以避免\",{\"1\":{\"2461\":1,\"4823\":1}}],[\"那有没有可能只使用一个进程来维护多个\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"4545\":1}}],[\"那\",{\"1\":{\"2350\":1,\"4712\":1}}],[\"那时候http\",{\"1\":{\"1973\":1,\"1988\":1,\"2003\":1,\"2016\":1,\"2029\":1,\"2044\":1,\"5264\":1,\"5287\":1}}],[\"那数据是不是不一致啦\",{\"1\":{\"1940\":1,\"4046\":1}}],[\"那就意味着要准备数据在真实编程语言中来显示\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"那就自动重试嘛\",{\"1\":{\"1940\":1,\"4046\":1}}],[\"那就和\",{\"1\":{\"1919\":1,\"4508\":1}}],[\"那就是\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"2231\":1,\"4545\":1,\"5313\":1}}],[\"那就是0\",{\"1\":{\"701\":1}}],[\"那就是插入的数据是有序的\",{\"1\":{\"419\":1,\"3744\":1}}],[\"那怎么解决呢\",{\"1\":{\"1899\":1,\"4488\":1}}],[\"那也就意味着我们需要两台以上同意\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"那既然引入多线程\",{\"1\":{\"1248\":1,\"1416\":1,\"1584\":1,\"1752\":1,\"4659\":1}}],[\"那样轮询扫描整个\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"那后续很有可能会再被引用到\",{\"1\":{\"1093\":1}}],[\"那反射是啥\",{\"1\":{\"289\":1,\"3677\":1}}],[\"那么通过查表方式\",{\"1\":{\"3353\":1}}],[\"那么还是用专业的消息队列中间件吧\",{\"1\":{\"3283\":1,\"5552\":1}}],[\"那么md5它能够被破解吗\",{\"1\":{\"3182\":1}}],[\"那么mutex对象又是什么呢\",{\"1\":{\"564\":1}}],[\"那么访问这个变量的每个线程都会有这个变量的本地副本\",{\"1\":{\"3022\":1,\"4276\":1}}],[\"那么aqs会把当前线程以及等待状态封装成一个node节点加入到同步队列中\",{\"1\":{\"2913\":1,\"4167\":1}}],[\"那么会尝试使用doreleaseshared方法尝试唤醒节点\",{\"1\":{\"2911\":1,\"4165\":1}}],[\"那么该线程在后续访问时便会自动获得锁\",{\"1\":{\"2843\":1,\"4097\":1}}],[\"那么说明这个值在布隆过滤器中\",{\"1\":{\"2791\":1,\"5153\":1}}],[\"那么说完了\",{\"1\":{\"1892\":1,\"4481\":1}}],[\"那么这个消息理论上就会被消费两次\",{\"1\":{\"3213\":1,\"5482\":1}}],[\"那么这个写操作的结果一定对读的这个线程可见\",{\"1\":{\"2944\":1,\"4198\":1}}],[\"那么这个元素一定不在\",{\"1\":{\"2784\":1,\"5146\":1}}],[\"那么这个插入语句就会被阻塞\",{\"1\":{\"2609\":1,\"4971\":1}}],[\"那么这些个服务一定会出现失败的情况\",{\"1\":{\"1839\":1,\"4428\":1}}],[\"那么当前任务会被拒绝\",{\"1\":{\"3072\":1,\"4326\":1}}],[\"那么当事务\",{\"1\":{\"2584\":1,\"4946\":1}}],[\"那么当这个表的数据达到一个体量后\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"那么事务\",{\"1\":{\"2579\":1,\"2580\":1,\"4941\":1,\"4942\":1}}],[\"那么另外一个事务在获取相同范围的\",{\"1\":{\"2554\":1,\"2555\":1,\"4916\":1,\"4917\":1}}],[\"那么其他事务就无法插入\",{\"1\":{\"2549\":1,\"4911\":1}}],[\"那么有了\",{\"1\":{\"2512\":1,\"4874\":1}}],[\"那么有一些消费者就会多分配到一些分区\",{\"1\":{\"1030\":1,\"5206\":1}}],[\"那么加密信息也就不安全了\",{\"1\":{\"3398\":1}}],[\"那么加\",{\"1\":{\"2511\":1,\"4873\":1}}],[\"那么在加\",{\"1\":{\"2512\":1,\"4874\":1}}],[\"那么在线程\",{\"1\":{\"2497\":1,\"4859\":1}}],[\"那么在备份数据库之前先开启事务\",{\"1\":{\"2462\":1,\"4824\":1}}],[\"那么将会被阻塞\",{\"1\":{\"2489\":1,\"4851\":1}}],[\"那么将会节约很大磁盘空间\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"那么本线程接下来如果要对学生表执行写操作的语句\",{\"1\":{\"2478\":1,\"4840\":1}}],[\"那么索引\",{\"1\":{\"2434\":1,\"4796\":1}}],[\"那么直接根据这个索引就可以查到数据\",{\"1\":{\"2411\":1,\"4773\":1}}],[\"那么直接根据该索引\",{\"1\":{\"2410\":1,\"4772\":1}}],[\"那么正好根据主键索引就可以查到主键\",{\"1\":{\"2411\":1,\"4773\":1}}],[\"那么对应的索引也将会被修改\",{\"1\":{\"2399\":1,\"4761\":1}}],[\"那么对比将失去意义\",{\"1\":{\"502\":1}}],[\"那么也不能扔给应用层去处理\",{\"1\":{\"2114\":1}}],[\"那么强一致性和可用性只能\",{\"1\":{\"1916\":1,\"4505\":1}}],[\"那么跳过那些已经被丢弃的提案又是什么意思呢\",{\"1\":{\"1901\":1,\"4490\":1}}],[\"那么肯定会产生数据不一致性\",{\"1\":{\"1897\":1,\"4486\":1}}],[\"那么整个集群会如何重新选举\",{\"1\":{\"1888\":1,\"4477\":1}}],[\"那么整个服务框架就可以进入消息广播模式了\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"那么新加入的服务器就会自觉地进入数据恢复模式\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"那么下次请求就不会请求到该服务\",{\"1\":{\"1835\":1,\"4424\":1}}],[\"那么自然就带来了多线程竞争资源的问题\",{\"1\":{\"1248\":1,\"1416\":1,\"1584\":1,\"1752\":1,\"4659\":1}}],[\"那么roundrobinassignor的分配结果如下\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"那么return\",{\"1\":{\"730\":1}}],[\"那么分配结果是不保证\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"那么分配结果是尽量均衡的\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"那么c0又会比c1\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"那么capacity就是这个桶\",{\"1\":{\"685\":1}}],[\"那么因为分区数变化\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"那么相应的pojo类必须实现serializable接口\",{\"1\":{\"997\":1,\"4014\":1}}],[\"那么二级缓存一样可以解决循环依赖问题\",{\"1\":{\"898\":1,\"3915\":1}}],[\"那么就代表加锁失败\",{\"1\":{\"3293\":1,\"5562\":1}}],[\"那么就把该任务放入到任务队列里等待执行\",{\"1\":{\"3070\":1,\"4324\":1}}],[\"那么就会新建一个线程来执行任务\",{\"1\":{\"3069\":1,\"4323\":1}}],[\"那么就会被阻塞\",{\"1\":{\"2490\":1,\"4852\":1}}],[\"那么就更不应该在这种字段上建立索引了\",{\"1\":{\"2426\":1,\"4788\":1}}],[\"那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制\",{\"1\":{\"2915\":1,\"4169\":1}}],[\"那么就需要在插入时排序\",{\"1\":{\"2398\":1,\"4760\":1}}],[\"那么就需要由上层\",{\"1\":{\"2107\":1}}],[\"那么就需要引入多线程\",{\"1\":{\"1238\":1,\"1406\":1,\"1574\":1,\"1742\":1,\"4649\":1}}],[\"那么就造成响应的延迟\",{\"1\":{\"1234\":1,\"1402\":1,\"1570\":1,\"1738\":1,\"4645\":1}}],[\"那么就去创建\",{\"1\":{\"879\":1,\"3896\":1}}],[\"那么就不再需要进⾏同步操作\",{\"1\":{\"582\":1,\"3775\":1}}],[\"那么接下来我们要看下\",{\"1\":{\"759\":1}}],[\"那么如果不对密码加密\",{\"1\":{\"3339\":1}}],[\"那么如果数据库里有很多数据\",{\"1\":{\"2460\":1,\"4822\":1}}],[\"那么如果文件描述符是阻塞的\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"那么如果我们想把linkedlist变成线程安全的\",{\"1\":{\"567\":1}}],[\"那么如何解决这种冲突呢\",{\"1\":{\"746\":1}}],[\"那么hash会选择大于该数字的第一个2的幂作为容量\",{\"1\":{\"693\":1}}],[\"那么我们的\",{\"1\":{\"1877\":1,\"4466\":1}}],[\"那么我们也可以先来尝试下这样的依赖\",{\"1\":{\"875\":1,\"3892\":1}}],[\"那么我们可以直接使用位运算来得到结果\",{\"1\":{\"772\":1}}],[\"那么我们尝试着设置一下\",{\"1\":{\"690\":1}}],[\"那么我可以将已有的linkedlist直接转成\",{\"1\":{\"567\":1}}],[\"那么n\",{\"1\":{\"638\":1,\"3730\":1}}],[\"那么锁定的也是this对象\",{\"1\":{\"564\":1}}],[\"那么锁定的就是用户传入的对象\",{\"1\":{\"564\":1}}],[\"那么\",{\"1\":{\"529\":1,\"698\":1,\"731\":1,\"753\":1,\"757\":1,\"807\":1,\"1194\":1,\"1362\":1,\"1530\":1,\"1698\":1,\"1968\":1,\"1983\":1,\"1998\":1,\"2011\":1,\"2024\":1,\"2039\":1,\"2250\":2,\"2519\":1,\"2561\":1,\"2753\":1,\"3387\":1,\"3824\":1,\"4605\":1,\"4881\":1,\"4923\":1,\"5115\":1,\"5258\":1,\"5283\":1,\"5332\":2}}],[\"那么容量就为传入的最小容量\",{\"1\":{\"524\":1}}],[\"那么使用arraylist是更好的选择\",{\"1\":{\"503\":1}}],[\"那么红黑树的查询效率就比二叉搜索树要高了\",{\"1\":{\"433\":1,\"3758\":1}}],[\"那么为了应对这种极端情况\",{\"1\":{\"419\":1,\"3744\":1}}],[\"那么所有的节点都会在根节点的右侧或左侧\",{\"1\":{\"419\":1,\"3744\":1}}],[\"那么它就是接近平衡的二叉树\",{\"1\":{\"419\":1,\"3744\":1}}],[\"那么finally中的代码还是会执⾏\",{\"1\":{\"269\":1}}],[\"那么后⾯的finally\",{\"1\":{\"268\":1}}],[\"那么虚拟机是如何加载这些\",{\"1\":{\"194\":1,\"3588\":1}}],[\"那些我们没有做的关闭资源的操作\",{\"1\":{\"266\":1}}],[\"那必须在方法头中显式声明该异常\",{\"1\":{\"256\":1,\"3652\":1}}],[\"不够安全\",{\"1\":{\"3398\":1}}],[\"不建议直接使用md5\",{\"1\":{\"3334\":1}}],[\"不建议使用过长的字段作为主键\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"不建议使用\",{\"1\":{\"370\":1}}],[\"不存在则为\",{\"1\":{\"3291\":1,\"5560\":1}}],[\"不存在时\",{\"1\":{\"3290\":1,\"5559\":1}}],[\"不存在的话\",{\"1\":{\"2783\":1,\"5145\":1}}],[\"不存储元素\",{\"1\":{\"3066\":1,\"4320\":1}}],[\"不处理新任务\",{\"1\":{\"3059\":1,\"4313\":1}}],[\"不进行线程状态的改变\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"不停地循环判断锁是否能够被成功获取\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"不停服如何实现\",{\"0\":{\"1948\":1,\"4054\":1}}],[\"不行\",{\"1\":{\"2824\":1,\"4078\":1}}],[\"不太推荐\",{\"1\":{\"2812\":1,\"5174\":1}}],[\"不光能存放文本数据\",{\"1\":{\"2681\":1,\"5043\":1}}],[\"不光是这个依赖下的meta\",{\"1\":{\"907\":1,\"3924\":1}}],[\"不论是内存临时表还是磁盘临时表都不会存在索引\",{\"1\":{\"2665\":1,\"5027\":1}}],[\"不包含\",{\"1\":{\"2664\":1,\"5026\":1}}],[\"不包括当前事务自己和已提交的事务\",{\"1\":{\"2626\":1,\"4988\":1}}],[\"不为\",{\"1\":{\"2420\":1,\"4782\":1}}],[\"不做回表操作\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"不做双活\",{\"1\":{\"1960\":1,\"4066\":1}}],[\"不懂的同学可以暂存疑\",{\"1\":{\"2385\":1,\"4747\":1}}],[\"不提供事务支持\",{\"1\":{\"2329\":1,\"4691\":1}}],[\"不在同一个子网中\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"不保证可靠交付数据\",{\"1\":{\"2145\":1}}],[\"不保证网络包的按序交付\",{\"1\":{\"2107\":1}}],[\"不重复\",{\"1\":{\"2144\":1}}],[\"不丢失\",{\"1\":{\"2144\":1}}],[\"不能小于\",{\"1\":{\"2778\":1,\"5140\":1}}],[\"不能重复\",{\"1\":{\"2379\":1,\"4741\":1}}],[\"不能像\",{\"1\":{\"2112\":1}}],[\"不能根据索引位置进行操作\",{\"1\":{\"487\":1}}],[\"不仅会消耗系统资源\",{\"1\":{\"3038\":1,\"4292\":1}}],[\"不仅可以保存文本数据\",{\"1\":{\"2681\":1,\"5043\":1}}],[\"不仅支持\",{\"1\":{\"1918\":1,\"4507\":1}}],[\"不仅复杂而且也没有性能优势\",{\"1\":{\"1207\":1,\"1375\":1,\"1543\":1,\"1711\":1,\"4618\":1}}],[\"不是像php那样成熟的编程语言\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"不是听狗叫的\",{\"1\":{\"3118\":1,\"5398\":1}}],[\"不是万能的\",{\"1\":{\"2883\":1,\"4137\":1}}],[\"不是\",{\"1\":{\"2214\":1,\"2307\":1,\"5296\":1}}],[\"不是两次\",{\"0\":{\"2181\":1},\"1\":{\"2066\":1}}],[\"不是所谓的\",{\"0\":{\"1914\":1,\"4503\":1}}],[\"不是错误或者超时的响应\",{\"1\":{\"1910\":1,\"4499\":1}}],[\"不是这么抽象的概念\",{\"1\":{\"364\":1}}],[\"不理解可以看前面的选举算法\",{\"1\":{\"1900\":1,\"4489\":1}}],[\"不再出现\",{\"1\":{\"1958\":1,\"4064\":1}}],[\"不再依赖\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"不再拷贝到用户态\",{\"1\":{\"1180\":1,\"1348\":1,\"1516\":1,\"1684\":1,\"4591\":1}}],[\"不利于维护系统\",{\"1\":{\"1825\":1,\"4414\":1}}],[\"不用关注其他人怎么开发\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"不需了解所有业务\",{\"1\":{\"1809\":1,\"4398\":1}}],[\"不需要将私钥给别人\",{\"1\":{\"3399\":1}}],[\"不需要进行\",{\"1\":{\"2634\":1,\"4996\":1}}],[\"不需要显示调用\",{\"1\":{\"2491\":1,\"4853\":1}}],[\"不需要自己构建http请求了\",{\"1\":{\"1846\":1,\"4435\":1}}],[\"不需要自己为它的方法实现同步\",{\"1\":{\"653\":1}}],[\"不需要考虑进程间通信\",{\"1\":{\"1231\":1,\"1399\":1,\"1567\":1,\"1735\":1,\"4642\":1}}],[\"不需要在进程中再创建线程\",{\"1\":{\"1217\":1,\"1385\":1,\"1553\":1,\"1721\":1,\"4628\":1}}],[\"不需要像\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"不需要转成十进制\",{\"1\":{\"730\":1}}],[\"不需要必须实现接⼝\",{\"1\":{\"598\":1,\"3791\":1}}],[\"不需要预先分配很多空间\",{\"1\":{\"476\":1}}],[\"不均衡的问题会越来越严重\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"不安全\",{\"1\":{\"989\":1,\"4006\":1}}],[\"不会饿死在队列中\",{\"1\":{\"2988\":1,\"4242\":1}}],[\"不会产生副本\",{\"1\":{\"2943\":1,\"4197\":1}}],[\"不会影响最终结果\",{\"1\":{\"2887\":1,\"4141\":1}}],[\"不会立即同步到硬盘\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"不会阻塞\",{\"1\":{\"2731\":1,\"5093\":1}}],[\"不会相互干扰\",{\"1\":{\"2569\":1,\"4931\":1}}],[\"不会结束在中间某个环节\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"不会和行级的共享锁和独占锁发生冲突\",{\"1\":{\"2509\":1,\"4871\":1}}],[\"不会因为数据或表结构的更新\",{\"1\":{\"2457\":1,\"4819\":1}}],[\"不会修改数据\",{\"1\":{\"989\":1,\"4006\":1}}],[\"不会牵扯到扩容问题\",{\"1\":{\"402\":1}}],[\"不同于\",{\"1\":{\"2720\":1,\"5082\":1}}],[\"不同的线程池会选用不同的阻塞队列\",{\"1\":{\"3064\":1,\"4318\":1}}],[\"不同的字符串可能哈希出来的位置相同\",{\"1\":{\"2792\":1,\"5154\":1}}],[\"不同的数据库厂商对\",{\"1\":{\"2605\":1,\"4967\":1}}],[\"不同的地方\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"不同的是消息队列存放在内核中\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"不同的是\",{\"1\":{\"790\":1,\"2245\":1,\"5327\":1}}],[\"不同局域网内的\",{\"0\":{\"2248\":1,\"5330\":1}}],[\"不同进程可以及时看到对方进程中对共享内存中数据的更新\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4541\":1}}],[\"不同\",{\"1\":{\"984\":1,\"4001\":1}}],[\"不必再遍历所有的依赖包\",{\"1\":{\"942\":1,\"3959\":1}}],[\"不允许在应用中自行显式创建线程\",{\"1\":{\"3085\":1,\"4339\":1}}],[\"不允许分割\",{\"1\":{\"841\":1,\"3858\":1}}],[\"不允许放入\",{\"1\":{\"458\":1}}],[\"不要求排序\",{\"1\":{\"800\":1}}],[\"不管主键还是非主键\",{\"1\":{\"2369\":1,\"2401\":1,\"4731\":1,\"4763\":1}}],[\"不管hashcode的值是正数还是负数\",{\"1\":{\"757\":1}}],[\"不管列表是否已排序\",{\"1\":{\"478\":1}}],[\"不支持事务和行级锁\",{\"1\":{\"2322\":1,\"4684\":1}}],[\"不支持当前事务的情况\",{\"1\":{\"863\":1,\"3880\":1}}],[\"不支持\",{\"1\":{\"652\":1,\"2332\":1,\"2336\":1,\"2339\":1,\"4694\":1,\"4698\":1,\"4701\":1}}],[\"不一直使用红黑树\",{\"0\":{\"633\":1,\"3725\":1}}],[\"不使⽤\",{\"1\":{\"577\":1,\"3770\":1}}],[\"不过最终没能通过\",{\"1\":{\"5275\":1}}],[\"不过我们需要加一个分布式锁来保证更新\",{\"1\":{\"3207\":1,\"5476\":1}}],[\"不过两者的本质都是对对象监视器\",{\"1\":{\"3016\":1,\"4270\":1}}],[\"不过并不是所有的引擎都能支持事务\",{\"1\":{\"2565\":1,\"4927\":1}}],[\"不过尽量避免在使用\",{\"1\":{\"2482\":1,\"4844\":1}}],[\"不过要注意\",{\"1\":{\"1846\":1,\"4435\":1}}],[\"不过可以发现c2承担了4个分区的消费而c1订阅了t1\",{\"1\":{\"1045\":1,\"5221\":1}}],[\"不过考虑这种情况\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"不过\",{\"1\":{\"709\":1,\"808\":1,\"1860\":1,\"2507\":1,\"2651\":1,\"2828\":1,\"3825\":1,\"4082\":1,\"4449\":1,\"4869\":1,\"5013\":1,\"5275\":1}}],[\"不过理想情况下随机hashcode算法下所有bin中节点的分布频率会遵循泊松分布\",{\"1\":{\"640\":1,\"3732\":1}}],[\"不过需要注意的是\",{\"1\":{\"455\":1}}],[\"不过时间复杂度仍然是o\",{\"1\":{\"434\":1,\"3759\":1}}],[\"不可逆性\",{\"1\":{\"3330\":1}}],[\"不可以有\",{\"1\":{\"2371\":1,\"4733\":1}}],[\"不可以随机访问\",{\"1\":{\"477\":1}}],[\"不可靠\",{\"1\":{\"2107\":1}}],[\"不可能同时达到\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"不可能再提交这个提案n1了\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"不可重复读和幻读现象都不可能会发生\",{\"1\":{\"2603\":1,\"4965\":1}}],[\"不可重复读和幻读现象\",{\"1\":{\"2600\":1,\"4962\":1}}],[\"不可重复读\",{\"0\":{\"2581\":1,\"4943\":1},\"1\":{\"2582\":1,\"4944\":1}}],[\"不可重复读以及幻读\",{\"1\":{\"856\":1,\"3873\":1}}],[\"不可重复\",{\"1\":{\"455\":1}}],[\"不可查异常\",{\"1\":{\"252\":1,\"3648\":1}}],[\"不应该使用链表\",{\"1\":{\"410\":1}}],[\"不应该是继承关系\",{\"1\":{\"351\":1}}],[\"不推荐使用\",{\"0\":{\"337\":1}}],[\"不被篡改\",{\"1\":{\"236\":1,\"3630\":1}}],[\"否则表示密码错误\",{\"1\":{\"3382\":1}}],[\"否则新建一个线程来处理任务\",{\"1\":{\"3066\":1,\"4320\":1}}],[\"否则会抛出java\",{\"1\":{\"3005\":1,\"4259\":1}}],[\"否则在同步队列中不停的自旋等待获取同步状态\",{\"1\":{\"2924\":1,\"4178\":1}}],[\"否则在序列化的时候会报错\",{\"1\":{\"989\":1,\"4006\":1}}],[\"否则依然存在数据丢失的风险\",{\"1\":{\"2736\":1,\"5098\":1}}],[\"否则类似于字符串或\",{\"1\":{\"2398\":1,\"4760\":1}}],[\"否则就会造成数据异常\",{\"1\":{\"1068\":1,\"5244\":1}}],[\"否则采用\",{\"1\":{\"619\":1,\"3812\":1}}],[\"否则继承的这个接⼝可以什么也不⼲\",{\"1\":{\"592\":1,\"3785\":1}}],[\"否则按照内容查找元素效率比较低\",{\"1\":{\"471\":1}}],[\"否则找一个空位添加\",{\"1\":{\"460\":1}}],[\"否则\",{\"1\":{\"368\":1,\"2243\":1,\"2380\":1,\"2966\":1,\"4220\":1,\"4742\":1,\"5325\":1}}],[\"否则应该是组合关系\",{\"1\":{\"362\":1}}],[\"否则编译不会通过\",{\"1\":{\"251\":1,\"3647\":1}}],[\"否则才会尝试加载\",{\"1\":{\"205\":1,\"232\":1,\"3599\":1,\"3626\":1}}],[\"但若有空闲线程可以复用\",{\"1\":{\"3082\":1,\"4336\":1}}],[\"但当线程数不断增加时\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"但没有剩余可用资源\",{\"1\":{\"2931\":1,\"4185\":1}}],[\"但没有特别的优化\",{\"1\":{\"668\":1}}],[\"但同时只有一个线程能修改成功\",{\"1\":{\"2837\":1,\"4091\":1}}],[\"但同样也会降低插入和更新的效率\",{\"1\":{\"2429\":1,\"4791\":1}}],[\"但缓存雪崩导致的原因是缓存中的大量或者所有数据失效\",{\"1\":{\"2815\":1,\"5177\":1}}],[\"但不修改持有锁的线程id\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"但不存在于缓存中\",{\"1\":{\"2794\":1,\"2801\":1,\"5156\":1,\"5163\":1}}],[\"但不负责具体的产品\",{\"1\":{\"590\":1,\"3783\":1}}],[\"但也不算差\",{\"1\":{\"5279\":1}}],[\"但也带来了数据丢失的风险\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"但也实现了deque接口\",{\"1\":{\"475\":1}}],[\"但用户\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"但两个事务却不能在同一时间内\",{\"1\":{\"2562\":1,\"4924\":1}}],[\"但对于记录锁\",{\"1\":{\"2556\":1,\"4918\":1}}],[\"但对称加密的密钥用服务器方的证书进行了非对称加密\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"但查询条件未遵守最左匹配原则\",{\"1\":{\"2440\":1,\"4802\":1}}],[\"但又避免不了为\",{\"1\":{\"2420\":1,\"4782\":1}}],[\"但二者实现方式不一样\",{\"1\":{\"2363\":1,\"4725\":1}}],[\"但能指明一条道路\",{\"1\":{\"2298\":1,\"5380\":1}}],[\"但接收的\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"但\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"但可能会丢包和乱序\",{\"1\":{\"2154\":1}}],[\"但保证顺序和可靠\",{\"1\":{\"2153\":1}}],[\"但其他\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"但其实仔细思考\",{\"1\":{\"361\":1}}],[\"但这个就要分为两种情况了\",{\"1\":{\"1895\":1,\"4484\":1}}],[\"但这还不是最理想的零拷贝\",{\"1\":{\"1174\":1,\"1342\":1,\"1510\":1,\"1678\":1,\"4585\":1}}],[\"但只有一个线程可以对共享资源进行写操作\",{\"1\":{\"1115\":1,\"1283\":1,\"1451\":1,\"1619\":1,\"4526\":1}}],[\"但只能放入一个null\",{\"1\":{\"459\":1}}],[\"但速度慢\",{\"1\":{\"989\":1,\"4006\":1}}],[\"但速度快\",{\"1\":{\"989\":1,\"4006\":1}}],[\"但此时\",{\"1\":{\"879\":1,\"1885\":1,\"3896\":1,\"4474\":1}}],[\"但我们互相没法解耦\",{\"1\":{\"874\":1,\"3891\":1}}],[\"但无论循环依赖的数量有多少\",{\"1\":{\"874\":1,\"3891\":1}}],[\"但无法获取继承下来的方法\",{\"1\":{\"323\":1,\"3711\":1}}],[\"但无法获取继承下来的变量\",{\"1\":{\"321\":1,\"3709\":1}}],[\"但幻读仍有可能发生\",{\"1\":{\"855\":1,\"3872\":1}}],[\"但内部有一个双向链表以维护节点的顺序\",{\"1\":{\"802\":1}}],[\"但内部使用红黑树实现\",{\"1\":{\"796\":1}}],[\"但原理是不变的\",{\"1\":{\"780\":1}}],[\"但如果是对象的引用类型包含了多个变量\",{\"1\":{\"2887\":1,\"4141\":1}}],[\"但如果深究进去\",{\"1\":{\"658\":1}}],[\"但如果插入的时候是有序数据\",{\"1\":{\"433\":1,\"3758\":1}}],[\"但省去了很多没有必要的调平衡操作\",{\"1\":{\"636\":1,\"3728\":1}}],[\"但红黑树不像avl树一样追求绝对的平衡\",{\"1\":{\"636\":1,\"3728\":1}}],[\"但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡\",{\"1\":{\"632\":1,\"3724\":1}}],[\"但它实际上是一个\",{\"1\":{\"391\":1}}],[\"但方法并没有像arraylist一样进行优化存储\",{\"1\":{\"514\":1}}],[\"但属于强同步类\",{\"1\":{\"503\":1}}],[\"但在get与set方面弱于arraylist\",{\"1\":{\"501\":1}}],[\"但在一定程度上它的发生是可以预计的\",{\"1\":{\"250\":1,\"3646\":1}}],[\"但按优先级出队\",{\"1\":{\"491\":1}}],[\"但修改本身的效率很高\",{\"1\":{\"480\":1}}],[\"但有序\",{\"1\":{\"446\":1}}],[\"但整体平均时间复杂度\",{\"1\":{\"401\":1}}],[\"但至今为止\",{\"1\":{\"394\":1}}],[\"但因为\",{\"1\":{\"384\":1}}],[\"但老版本的程序\",{\"1\":{\"369\":1}}],[\"但遇到更抽象的对象的时候\",{\"1\":{\"359\":1}}],[\"但最终还是要转成编译器认识的语言\",{\"1\":{\"266\":1}}],[\"但是2004年\",{\"1\":{\"3334\":1}}],[\"但是cas也有自己的问题\",{\"1\":{\"3163\":1,\"5443\":1}}],[\"但是consumer里面进行了多线程消费\",{\"1\":{\"1072\":1,\"5248\":1}}],[\"但是小于最大线程数\",{\"1\":{\"3070\":1,\"4324\":1}}],[\"但是被volatile修饰的变量操作并非具有原子性\",{\"1\":{\"2960\":1,\"4214\":1}}],[\"但是如果要对多个共享变量进行操作时\",{\"1\":{\"2896\":1,\"4150\":1}}],[\"但是版本号改变了\",{\"1\":{\"2890\":1,\"4144\":1}}],[\"但是理想情况下竞争的程度很低\",{\"1\":{\"2845\":1,\"4099\":1}}],[\"但是也可以是公平的\",{\"1\":{\"2825\":1,\"4079\":1}}],[\"但是也是在2018年\",{\"1\":{\"1972\":1,\"1987\":1,\"2002\":1,\"2015\":1,\"2028\":1,\"2043\":1,\"5263\":1,\"5286\":1}}],[\"但是还是远远没有使用一个联合索引的查询方式好\",{\"1\":{\"2657\":1,\"5019\":1}}],[\"但是还是有区别\",{\"1\":{\"660\":1}}],[\"但是与sql\",{\"1\":{\"2605\":1,\"4967\":1}}],[\"但是要实现事务必须要遵守\",{\"1\":{\"2566\":1,\"4928\":1}}],[\"但是现在处于等待状态\",{\"1\":{\"2559\":1,\"4921\":1}}],[\"但是现在是单独一个表\",{\"0\":{\"1944\":1,\"4050\":1}}],[\"但是并没有什么区别\",{\"1\":{\"2550\":1,\"4912\":1}}],[\"但是并发量上升时锁撤销会大幅影响性能\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"但是当前运行的线程数是小于最大线程数的\",{\"1\":{\"3071\":1,\"4325\":1}}],[\"但是当搭配\",{\"1\":{\"2529\":1,\"4891\":1}}],[\"但是当我们直接kill进程了\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"但是一直不提交\",{\"1\":{\"2494\":1,\"4856\":1}}],[\"但是一直还没提交\",{\"1\":{\"2493\":1,\"4855\":1}}],[\"但是维护索引的成本也是不小的\",{\"1\":{\"2426\":1,\"4788\":1}}],[\"但是允许数据为\",{\"1\":{\"2386\":1,\"4748\":1}}],[\"但是两者的实现方式不太一样\",{\"1\":{\"2342\":1,\"4704\":1}}],[\"但是对性能有一定的损耗\",{\"1\":{\"2333\":1,\"4695\":1}}],[\"但是对于现在的计算机\",{\"1\":{\"436\":1,\"3761\":1}}],[\"但是我们可以加盐\",{\"1\":{\"3369\":1}}],[\"但是我们可以基于\",{\"1\":{\"2145\":1}}],[\"但是我们设计的大多数类\",{\"1\":{\"364\":1}}],[\"但是服务端的进程崩溃会发生什么\",{\"0\":{\"2203\":1},\"1\":{\"2088\":1}}],[\"但是客户端突然出现故障了怎么办\",{\"0\":{\"2202\":1},\"1\":{\"2087\":1}}],[\"但是为什么现在广泛使用的还是http1\",{\"1\":{\"1969\":1,\"1984\":1,\"2025\":1,\"2040\":1,\"5259\":1}}],[\"但是不可能脏读和不可重复读现象\",{\"1\":{\"2602\":1,\"4964\":1}}],[\"但是不可能发生脏读现象\",{\"1\":{\"2601\":1,\"4963\":1}}],[\"但是不可以对该记录加\",{\"1\":{\"2545\":1,\"4907\":1}}],[\"但是不包含记录本身\",{\"1\":{\"2541\":1,\"4903\":1}}],[\"但是不一定准\",{\"1\":{\"1947\":1,\"4053\":1}}],[\"但是不符合时间局部性\",{\"1\":{\"1097\":1}}],[\"但是冗余就比较大\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"但是有\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"但是有key的情况下\",{\"1\":{\"1022\":1,\"5198\":1}}],[\"但是因为某些故障\",{\"1\":{\"1913\":1,\"4502\":1}}],[\"但是过了一会\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"但是挂了两个也不能正常工作了\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"但是实际实现时比单\",{\"1\":{\"1264\":1,\"1432\":1,\"1600\":1,\"1768\":1,\"4675\":1}}],[\"但是这样会带来消息被重新消费的问题\",{\"1\":{\"3213\":1}}],[\"但是这远比进程间通信的复杂度低得多\",{\"1\":{\"1253\":1,\"1421\":1,\"1589\":1,\"1757\":1,\"4664\":1}}],[\"但是这还不是真正的零拷贝技术\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"但是这将严重影响程序的性能\",{\"1\":{\"856\":1,\"3873\":1}}],[\"但是可能会造成太多过期\",{\"1\":{\"2755\":1,\"5117\":1}}],[\"但是可能会出现一种极端的情况\",{\"1\":{\"419\":1,\"3744\":1}}],[\"但是可以根据应用场景设置为边缘触发模式\",{\"1\":{\"1156\":1,\"1324\":1,\"1492\":1,\"1660\":1,\"4567\":1}}],[\"但是处理每个请求的事件时\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"但是需要控制同一时刻访问此资源的最大线程数量\",{\"1\":{\"1116\":1,\"1284\":1,\"1452\":1,\"1620\":1,\"4527\":1}}],[\"但是它很大程度上避免幻读现象\",{\"1\":{\"2607\":1,\"4969\":1}}],[\"但是它并不是意向锁\",{\"1\":{\"2560\":1,\"4922\":1}}],[\"但是它不存在我们所说的空间局部性了\",{\"1\":{\"1096\":1}}],[\"但是它的效率比hashtable要高好多倍\",{\"1\":{\"654\":1}}],[\"但是它的效率会比hashtable要好很多\",{\"1\":{\"654\":1}}],[\"但是每个consumer的执行时间是不固定的\",{\"1\":{\"1070\":1,\"5246\":1}}],[\"但是每个mapper的二级开关是默认关闭的\",{\"1\":{\"999\":1,\"4016\":1}}],[\"但是没来得及提交offset\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"但是销毁sqlsession后会将里面的缓存存到二级缓存中\",{\"1\":{\"996\":1,\"4013\":1}}],[\"但是幻读或不可重复读仍有可能发生\",{\"1\":{\"854\":1,\"3871\":1}}],[\"但是哈希的操作还是在的\",{\"1\":{\"784\":1}}],[\"但是其实并不完全是\",{\"1\":{\"762\":1}}],[\"但是肯定存在这样的key\",{\"1\":{\"752\":1}}],[\"但是考虑到效率等问题\",{\"1\":{\"724\":1}}],[\"但是在\",{\"1\":{\"884\":1,\"2693\":1,\"3901\":1,\"5055\":1}}],[\"但是在随机hashcode下\",{\"1\":{\"640\":1,\"3732\":1}}],[\"但是在框架中的几乎是必用的一门技术\",{\"1\":{\"607\":1,\"3800\":1}}],[\"但是位运算比取余运算要高效的多\",{\"1\":{\"638\":1,\"3730\":1}}],[\"但是之后还有但是\",{\"1\":{\"566\":1}}],[\"但是vector却对该方法加了方法锁\",{\"1\":{\"565\":1}}],[\"但是静态方法只能给this对象加锁\",{\"1\":{\"561\":1}}],[\"但是聪明的你想到可以加个判断\",{\"1\":{\"292\":1,\"3680\":1}}],[\"但是return前执行的finally块内\",{\"1\":{\"270\":1}}],[\"但是\",{\"1\":{\"219\":1,\"366\":1,\"368\":1,\"370\":1,\"377\":1,\"382\":1,\"391\":1,\"402\":1,\"565\":1,\"566\":1,\"693\":1,\"773\":1,\"1232\":1,\"1400\":1,\"1568\":1,\"1736\":1,\"1972\":1,\"1987\":1,\"2002\":1,\"2015\":1,\"2028\":1,\"2043\":1,\"2282\":1,\"2322\":1,\"2358\":1,\"2466\":1,\"2520\":1,\"2758\":1,\"2784\":1,\"2886\":1,\"3211\":1,\"3613\":1,\"4140\":1,\"4643\":1,\"4684\":1,\"4720\":1,\"4828\":1,\"4882\":1,\"5120\":1,\"5146\":1,\"5263\":1,\"5286\":1,\"5364\":1,\"5480\":1}}],[\"但是你需要使用相对链接\",{\"1\":{\"125\":1,\"3524\":1}}],[\"情理可容的异常状况\",{\"1\":{\"250\":1,\"3646\":1}}],[\"很明显\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"很明显需要继承\",{\"1\":{\"212\":1,\"3606\":1}}],[\"很好解决了\",{\"1\":{\"1139\":1,\"1307\":1,\"1475\":1,\"1643\":1,\"4550\":1}}],[\"很简单\",{\"1\":{\"761\":1}}],[\"很多短任务线程\",{\"0\":{\"1925\":1,\"4031\":1}}],[\"很多顶级的开源项目都用到了\",{\"1\":{\"1859\":1,\"4448\":1}}],[\"很多同学应该能马上反应过来了\",{\"1\":{\"390\":1}}],[\"很多人会更倾向于使用继承关系\",{\"1\":{\"366\":1}}],[\"很多时候\",{\"1\":{\"362\":1}}],[\"很容易出现的\",{\"1\":{\"250\":1,\"3646\":1}}],[\"可查的异常\",{\"0\":{\"3644\":1}}],[\"可查异常虽然是异常状况\",{\"1\":{\"250\":1,\"3646\":1}}],[\"可查异常\",{\"1\":{\"249\":1,\"3645\":1}}],[\"可随意发给期望同密钥持有者进行安全通信的人\",{\"1\":{\"3392\":1}}],[\"可见直接使用md5加密是不安全的\",{\"1\":{\"3369\":1}}],[\"可中断\",{\"1\":{\"2824\":1,\"4078\":1}}],[\"可由\",{\"1\":{\"2691\":2,\"2706\":2,\"5053\":2,\"5068\":2}}],[\"可减少表结构变更带来的影响\",{\"1\":{\"2662\":1,\"5024\":1}}],[\"可重入锁的一个好处是可一定程度避免死锁\",{\"1\":{\"2970\":1,\"4224\":1}}],[\"可重入锁\",{\"0\":{\"2967\":1,\"4221\":1},\"1\":{\"2968\":1,\"2970\":1,\"4222\":1,\"4224\":1}}],[\"可重复读\",{\"1\":{\"2595\":1,\"2602\":1,\"2604\":1,\"2606\":1,\"2607\":1,\"2613\":2,\"4957\":1,\"4964\":1,\"4966\":1,\"4968\":1,\"4969\":1,\"4975\":2}}],[\"可重复读隔离级别的事务\",{\"1\":{\"2464\":1,\"4826\":1}}],[\"可重读\",{\"1\":{\"2330\":1,\"4692\":1}}],[\"可谓是风光一时\",{\"1\":{\"2321\":1,\"4683\":1}}],[\"可靠性\",{\"1\":{\"2143\":1}}],[\"可靠的\",{\"1\":{\"2110\":1,\"2113\":1}}],[\"可用于存储比\",{\"1\":{\"2650\":1,\"5012\":1}}],[\"可用性\",{\"1\":{\"1906\":1,\"1910\":1,\"1915\":1,\"4495\":1,\"4499\":1,\"4504\":1}}],[\"可用消息的总量都不会超过配置参数所指定的大小\",{\"1\":{\"1010\":1,\"5186\":1}}],[\"可运行线程池\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4516\":1}}],[\"可在\",{\"1\":{\"901\":1,\"3918\":1}}],[\"可参考\",{\"1\":{\"767\":1}}],[\"可能堆积大量的请求\",{\"1\":{\"3090\":1,\"3092\":1,\"4344\":1,\"4346\":1}}],[\"可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁\",{\"1\":{\"2992\":1,\"4246\":1}}],[\"可能占用\",{\"1\":{\"2974\":1,\"4228\":1}}],[\"可能引发死锁\",{\"1\":{\"2974\":1,\"4228\":1}}],[\"可能直接就被这么多请求弄宕机了\",{\"1\":{\"2776\":1,\"2794\":1,\"2804\":1,\"5138\":1,\"5156\":1,\"5166\":1}}],[\"可能发生幻读现象\",{\"1\":{\"2602\":1,\"4964\":1}}],[\"可能发生不可重复读和幻读现象\",{\"1\":{\"2601\":1,\"4963\":1}}],[\"可能发生脏读\",{\"1\":{\"2600\":1,\"4962\":1}}],[\"可能发生异常的结束点\",{\"1\":{\"280\":1,\"3668\":1}}],[\"可能发生异常的起始点\",{\"1\":{\"279\":1,\"3667\":1}}],[\"可能还需要根据指针或主键再到数据文件或表中查询\",{\"1\":{\"2407\":1,\"4769\":1}}],[\"可能还没有到达叶子节点\",{\"1\":{\"2357\":1,\"4719\":1}}],[\"可能很多网站还没开始支持http\",{\"1\":{\"1974\":1,\"1989\":1,\"2004\":1,\"2017\":1,\"2030\":1,\"2045\":1,\"5265\":1,\"5288\":1}}],[\"可能存在数据丢失\",{\"1\":{\"1956\":1,\"4062\":1}}],[\"可能就执行了几步\",{\"1\":{\"1956\":1,\"4062\":1}}],[\"可能不是0了\",{\"1\":{\"1889\":1,\"4478\":1}}],[\"可能会创建大量线程\",{\"1\":{\"3066\":1,\"3091\":1,\"4320\":1,\"4345\":1}}],[\"可能会发生意想不到的事情\",{\"1\":{\"2493\":1,\"4855\":1}}],[\"可能会二次查询\",{\"1\":{\"2407\":1,\"4769\":1}}],[\"可能会导致脏读\",{\"1\":{\"853\":1,\"3870\":1}}],[\"可能会产生死锁等问题\",{\"1\":{\"654\":1}}],[\"可能看完了你还是有点蒙\",{\"1\":{\"683\":1}}],[\"可是实际上\",{\"1\":{\"403\":1}}],[\"可以选择移除等待队列中的最不常用的线程\",{\"1\":{\"3144\":1,\"5424\":1}}],[\"可以访问到该线程的threadlocalmap对象\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"可以理解为线程数是可以无限扩展的\",{\"1\":{\"3066\":1,\"4320\":1}}],[\"可以理解为只是threadlocalmap的封装\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"可以理解为分配结果是带\",{\"1\":{\"1047\":1,\"5223\":1}}],[\"可以让高速缓存中的数据失效\",{\"1\":{\"2948\":1,\"4202\":1}}],[\"可以同时绑定多个\",{\"1\":{\"2826\":1,\"4080\":1}}],[\"可以适当增加位数组大小或者调整我们的哈希函数来降低概率\",{\"1\":{\"2792\":1,\"5154\":1}}],[\"可以加载\",{\"1\":{\"2744\":1,\"5106\":1}}],[\"可以通过添加读锁实现共享\",{\"1\":{\"2984\":1,\"4238\":1}}],[\"可以通过虚拟机参数更改\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"可以通过\",{\"1\":{\"2733\":1,\"5095\":1}}],[\"可以通过创建快照来获得存储在内存里面的数据在\",{\"1\":{\"2725\":1,\"5087\":1}}],[\"可以对快照进行备份\",{\"1\":{\"2725\":1,\"5087\":1}}],[\"可以把子查询优化为\",{\"0\":{\"2663\":1,\"5025\":1}}],[\"可以考虑限制自旋的次数\",{\"1\":{\"2894\":1,\"4148\":1}}],[\"可以考虑将其分解成多个表\",{\"1\":{\"2653\":1,\"5015\":1}}],[\"可以考虑建立索引\",{\"1\":{\"2424\":1,\"4786\":1}}],[\"可以很大程度上避免幻读现象的发生\",{\"1\":{\"2606\":1,\"4968\":1}}],[\"可以不指定主键的值\",{\"1\":{\"2516\":1,\"4878\":1}}],[\"可以不用通过http框架去封装http请求报文的方式\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"可以分为全局锁\",{\"1\":{\"2446\":1,\"4808\":1}}],[\"可以简单理解为每个索引都对应着一颗\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"可以将线程数设置为\",{\"1\":{\"3076\":1,\"4330\":1}}],[\"可以将threadlocal类形象的比喻成存放数据的盒子\",{\"1\":{\"3021\":1,\"4275\":1}}],[\"可以将快照复制到其他服务器从而创建具有相同数据的服务器副本\",{\"1\":{\"2725\":1,\"5087\":1}}],[\"可以将区分度高的字段放在最左边\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"可以将消息保留到不再使用他们为止\",{\"1\":{\"1011\":1,\"5187\":1}}],[\"可以定位主键的位置\",{\"1\":{\"2383\":1,\"4745\":1}}],[\"可以有\",{\"1\":{\"2373\":1,\"4735\":1}}],[\"可以有效减少加锁操作\",{\"1\":{\"2340\":1,\"4702\":1}}],[\"可以避免\",{\"1\":{\"2276\":1,\"5358\":1}}],[\"可以避免类的重复加载\",{\"1\":{\"236\":1,\"3630\":1}}],[\"可以的\",{\"1\":{\"2172\":1,\"2878\":1,\"4132\":1}}],[\"可以再建一个分表\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"可以放到缓存里\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"可以放入\",{\"1\":{\"459\":1}}],[\"可以并行开发\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"可以更精准的制定优化服务方案\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"可以保证消息在分区内的顺序性\",{\"1\":{\"3210\":1,\"5479\":1}}],[\"可以保证每次出队的任务都是当前队列中执行时间最靠前的\",{\"1\":{\"3067\":1,\"4321\":1}}],[\"可以保证后续的更新\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"可以保存所有待检测的\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"可以用任何一种语言开发\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"可以用不同的存储技术\",{\"1\":{\"1802\":1,\"4391\":1}}],[\"可以用不同的编程语言\",{\"1\":{\"1801\":1,\"4390\":1}}],[\"可以用于监听web应用程序中某些对象的创建\",{\"1\":{\"933\":1,\"3950\":1}}],[\"可以应对不同的业务场景\",{\"1\":{\"1199\":1,\"1367\":1,\"1535\":1,\"1703\":1,\"4610\":1}}],[\"可以减少\",{\"1\":{\"2991\":1,\"4245\":1}}],[\"可以减少一次数据拷贝的过程\",{\"1\":{\"1173\":1,\"1341\":1,\"1509\":1,\"1677\":1,\"4584\":1}}],[\"可以减小树和链表之间频繁转化的可能性\",{\"1\":{\"641\":1,\"3733\":1}}],[\"可以说这是最有用的进程间通信方式\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4541\":1}}],[\"可以实现本机任意两个进程通信\",{\"1\":{\"1126\":1,\"1294\":1,\"1462\":1,\"1630\":1,\"4537\":1}}],[\"可以实现健康检查\",{\"1\":{\"939\":1,\"3956\":1}}],[\"可以看作是行级锁的一个升级\",{\"1\":{\"2340\":1,\"4702\":1}}],[\"可以看作是\",{\"1\":{\"2270\":1,\"5352\":1}}],[\"可以看这篇文章\",{\"1\":{\"2177\":1}}],[\"可以看做是不同主机之间的进程进行双向通信的端点\",{\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"4542\":1}}],[\"可以看出\",{\"1\":{\"1055\":1,\"5231\":1}}],[\"可以看到进程里有\",{\"1\":{\"1221\":1,\"1389\":1,\"1557\":1,\"1725\":1,\"4632\":1}}],[\"可以看到\",{\"1\":{\"752\":1}}],[\"可以看到只保存了非null的数组位置上的数据\",{\"1\":{\"511\":1}}],[\"可以使用callerrunspolicy\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"可以使用\",{\"1\":{\"2695\":1,\"2896\":1,\"4150\":1,\"5057\":1}}],[\"可以使用下面这两个方式\",{\"1\":{\"2534\":1,\"4896\":1}}],[\"可以使用下面这条命令\",{\"1\":{\"2479\":1,\"4841\":1}}],[\"可以使用下面的命令\",{\"1\":{\"2475\":1,\"4837\":1}}],[\"可以使用同一个端口吗\",{\"0\":{\"2171\":1},\"1\":{\"2062\":1,\"2177\":1}}],[\"可以使用hashset的一个子类linkedhashset\",{\"1\":{\"444\":1}}],[\"可以使分区分配的更均衡\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"可以被多个会话共享\",{\"1\":{\"998\":1,\"4015\":1}}],[\"可以在几个小时内就找到一个md5值对应的原文\",{\"1\":{\"3334\":1}}],[\"可以在事务提交后直接删除\",{\"1\":{\"2634\":1,\"4996\":1}}],[\"可以在非聚簇索引遍历过程中\",{\"1\":{\"2417\":1,\"4779\":1}}],[\"可以在客户端请求一个资源时\",{\"1\":{\"2273\":1,\"5355\":1}}],[\"可以在消费者内部采用多线程的方式去消费\",{\"1\":{\"1075\":1,\"5251\":1}}],[\"可以在\",{\"1\":{\"974\":1,\"2175\":1,\"3991\":1}}],[\"可以在两段做插入和删除操作\",{\"1\":{\"391\":1}}],[\"可以进行调试\",{\"1\":{\"895\":1,\"3912\":1}}],[\"可以从半成品缓存中获取\",{\"1\":{\"890\":1,\"3907\":1}}],[\"可以正常创建\",{\"1\":{\"879\":1,\"3896\":1}}],[\"可以阻止脏读和不可重复读\",{\"1\":{\"855\":1,\"3872\":1}}],[\"可以阻止脏读\",{\"1\":{\"854\":1,\"3871\":1}}],[\"可以方便地根据键的顺序进行查找\",{\"1\":{\"797\":1}}],[\"可以方便地根据顺序进行查找和操作\",{\"1\":{\"447\":1}}],[\"可以方便地按照键存取值\",{\"1\":{\"665\":1}}],[\"可以直接把内核缓冲区里的数据拷贝到\",{\"1\":{\"1180\":1,\"1348\":1,\"1516\":1,\"1684\":1,\"4591\":1}}],[\"可以直接使用hashtable\",{\"1\":{\"653\":1}}],[\"可以直接代理实现类\",{\"1\":{\"598\":1,\"3791\":1}}],[\"可以代理未实现任何接口的类\",{\"1\":{\"625\":1,\"3818\":1}}],[\"可以测试一下\",{\"1\":{\"517\":1}}],[\"可以提供弱一致性\",{\"1\":{\"511\":1}}],[\"可以作为队列\",{\"1\":{\"475\":1}}],[\"可以随机访问\",{\"1\":{\"470\":1}}],[\"可以高效地添加\",{\"1\":{\"443\":1}}],[\"可以忽略性能差异\",{\"1\":{\"436\":1,\"3761\":1}}],[\"可以是red\",{\"1\":{\"421\":1,\"3746\":1}}],[\"可以满足在两段进行插入和删除\",{\"1\":{\"388\":1}}],[\"可以这么写\",{\"1\":{\"375\":1}}],[\"可以创建一个合适的异常类实例并抛出它\",{\"1\":{\"259\":1,\"3655\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"29\":1,\"3428\":1}}],[\"区域的权威\",{\"1\":{\"2301\":1,\"5383\":1}}],[\"区域管理\",{\"1\":{\"2299\":1,\"5381\":1}}],[\"区别在于\",{\"1\":{\"776\":1}}],[\"区别\",{\"0\":{\"248\":1,\"2136\":1,\"3644\":1},\"1\":{\"521\":1,\"644\":1}}],[\"区分不同类的方式不仅仅根据类名\",{\"1\":{\"236\":1,\"3630\":1}}],[\"编程中我们通常不会直接使用到\",{\"1\":{\"2881\":1,\"4135\":1}}],[\"编程\",{\"0\":{\"2204\":1,\"2205\":1},\"1\":{\"2089\":1,\"2090\":1}}],[\"编译器都帮我们做了\",{\"1\":{\"266\":1}}],[\"编译器不要求强制处置的异常\",{\"1\":{\"252\":1,\"3648\":1}}],[\"编译器要求必须处置的异常\",{\"1\":{\"249\":1,\"3645\":1}}],[\"编译异常\",{\"1\":{\"246\":1,\"3642\":1}}],[\"编辑此页链接\",{\"1\":{\"17\":1,\"3416\":1}}],[\"非对称密钥也叫公开密钥加密\",{\"1\":{\"3392\":1}}],[\"非对称加密缺点\",{\"1\":{\"3400\":1}}],[\"非对称加密优点\",{\"1\":{\"3399\":1}}],[\"非对称加密\",{\"1\":{\"3387\":1}}],[\"非公平锁\",{\"0\":{\"2986\":1,\"4240\":1},\"1\":{\"2990\":1,\"4244\":1}}],[\"非精准浮点\",{\"1\":{\"2648\":1,\"5010\":1}}],[\"非叶子节点只有指针和\",{\"1\":{\"2363\":1,\"4725\":1}}],[\"非聚集索引\",{\"1\":{\"2359\":1,\"2369\":1,\"4721\":1,\"4731\":1}}],[\"非聚簇索引也依赖于有序的数据\",{\"1\":{\"2406\":1,\"4768\":1}}],[\"非聚簇索引的叶子节点是不存放数据的\",{\"1\":{\"2404\":1,\"4766\":1}}],[\"非聚簇索引的叶子节点并不一定存放数据的指针\",{\"1\":{\"2402\":1,\"4764\":1}}],[\"非聚簇索引的更新代价就没有聚簇索引那么大了\",{\"1\":{\"2404\":1,\"4766\":1}}],[\"非聚簇索引\",{\"0\":{\"2400\":1,\"4762\":1},\"1\":{\"2359\":1,\"2369\":1,\"2401\":1,\"4721\":1,\"4731\":1,\"4763\":1}}],[\"非冗余和按序的\",{\"1\":{\"2108\":1}}],[\"非故障的节点在合理的时间内返回合理的响应\",{\"1\":{\"1910\":1,\"4499\":1}}],[\"非常不灵活\",{\"1\":{\"601\":1,\"3794\":1}}],[\"非运行时异常\",{\"1\":{\"246\":1,\"3642\":1}}],[\"非空父类的类加载器无法找到相应的类\",{\"1\":{\"229\":1,\"3623\":1}}],[\"等插入语句执行完成后\",{\"1\":{\"2518\":1,\"4880\":1}}],[\"等语句\",{\"1\":{\"2453\":1,\"2609\":1,\"4815\":1,\"4971\":1}}],[\"等更多可供选择的缓存头来控制缓存策略\",{\"1\":{\"2267\":1,\"5349\":1}}],[\"等技术\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"等待时间越长就越先被唤醒\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"等待将来被唤醒\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"等待可中断当持有锁的线程长期不释放锁的时候\",{\"1\":{\"2824\":1,\"4078\":1}}],[\"等待客户端的连接请求\",{\"1\":{\"2129\":1}}],[\"等待的时间是\",{\"0\":{\"2196\":1},\"1\":{\"2081\":1}}],[\"等待线程终止或者超时\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"等待池\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"等待阻塞\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"等重启之后\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"等操作\",{\"1\":{\"982\":1,\"996\":1,\"3999\":1,\"4013\":1}}],[\"等以\",{\"1\":{\"833\":1,\"3850\":1}}],[\"等数据\",{\"1\":{\"821\":1,\"3838\":1}}],[\"等等\",{\"0\":{\"389\":1},\"1\":{\"381\":1}}],[\"等\",{\"1\":{\"244\":1,\"505\":1,\"822\":1,\"2163\":1,\"3640\":1,\"3839\":1}}],[\"都说cas要比synchronized好\",{\"1\":{\"3163\":1,\"5443\":1}}],[\"都将不会捕获该分组\",{\"1\":{\"2250\":1,\"5332\":1}}],[\"都要进行双写\",{\"1\":{\"1953\":1,\"4059\":1}}],[\"都为0\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"都可以调用这个接口\",{\"1\":{\"3271\":1,\"5540\":1}}],[\"都可以保证一个报文一定能够到达接收端\",{\"1\":{\"2113\":1}}],[\"都可以用spring\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"都可以进行共享\",{\"1\":{\"998\":1,\"4015\":1}}],[\"都不需要通过\",{\"1\":{\"1189\":1,\"1357\":1,\"1525\":1,\"1693\":1,\"4600\":1}}],[\"都有一个offset\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"都会以处理二进制的方式来处理\",{\"1\":{\"2681\":1,\"5043\":1}}],[\"都会重新生成一个\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"都会被阻塞\",{\"1\":{\"2451\":1,\"4813\":1}}],[\"都会清空数据\",{\"1\":{\"1013\":1,\"5189\":1}}],[\"都会使用cachingexector装饰基本的执行器\",{\"1\":{\"999\":1,\"4016\":1}}],[\"都会出现数据不一致问题\",{\"1\":{\"991\":1,\"4008\":1}}],[\"都会插入到新数组对应索引的链表头\",{\"1\":{\"630\":1,\"3722\":1}}],[\"都值得花时间去钻研\",{\"1\":{\"793\":1}}],[\"都需要根据k\",{\"1\":{\"744\":1}}],[\"都需要重新创建一个\",{\"1\":{\"404\":1}}],[\"都只是针对⼀类产品\",{\"1\":{\"592\":1,\"3785\":1}}],[\"都应该尽量扩展已有的索引而不是创建新索引\",{\"1\":{\"2434\":1,\"4796\":1}}],[\"都应该只是规定一系列操作的接口而已\",{\"1\":{\"383\":1}}],[\"都应该是组合关系\",{\"1\":{\"358\":1}}],[\"都是基于\",{\"1\":{\"5275\":1}}],[\"都是独享锁\",{\"1\":{\"2979\":1,\"4233\":1}}],[\"都是这种机制\",{\"1\":{\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"4525\":1}}],[\"都是双列集合\",{\"1\":{\"643\":1}}],[\"都是通过\",{\"1\":{\"1788\":1,\"2737\":1,\"2881\":1,\"4135\":1,\"4377\":1,\"5099\":1}}],[\"都是通过位运算代替取模\",{\"1\":{\"776\":1}}],[\"都是通过平衡来二分查找\",{\"1\":{\"636\":1,\"3728\":1}}],[\"都是通过相同的方式来查找的\",{\"1\":{\"432\":1,\"3757\":1}}],[\"都是用来存储一组相同类型的元素的\",{\"1\":{\"451\":1}}],[\"都是\",{\"1\":{\"402\":1,\"424\":1,\"2970\":1,\"3749\":1,\"4224\":1}}],[\"都是一个队列\",{\"1\":{\"377\":1}}],[\"都是我们在生活中看得到摸得到的实体\",{\"1\":{\"359\":1}}],[\"都是runtimeexception类及其子类异常\",{\"1\":{\"244\":1,\"3640\":1}}],[\"都能够调用它的任意一个方法和属性\",{\"1\":{\"285\":1,\"3673\":1}}],[\"都能够知道这个类的所有属性和方法\",{\"1\":{\"285\":1,\"3673\":1}}],[\"都集中在\",{\"1\":{\"228\":1,\"3622\":1}}],[\"程序计数器属于线程独享的工作内存\",{\"1\":{\"2939\":1,\"4193\":1}}],[\"程序只是其中的一个线程而已\",{\"1\":{\"1218\":1,\"1386\":1,\"1554\":1,\"1722\":1,\"4629\":1}}],[\"程序是跑在\",{\"1\":{\"1218\":1,\"1386\":1,\"1554\":1,\"1722\":1,\"4629\":1}}],[\"程序会一直执行\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"程序就没办法继续往下执行\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"程序就不能编译通过\",{\"1\":{\"247\":1,\"3643\":1}}],[\"程序局部性原理表现为\",{\"1\":{\"1092\":1}}],[\"程序在判断需要创建哪些对象时更灵活\",{\"1\":{\"577\":1,\"3770\":1}}],[\"程序员是一个雇员\",{\"1\":{\"355\":1}}],[\"程序应该从逻辑角度尽可能避免这类异常的发生\",{\"1\":{\"244\":1,\"3640\":1}}],[\"程序中可以选择捕获处理\",{\"1\":{\"244\":1,\"3640\":1}}],[\"程序中无法处理的错误\",{\"1\":{\"241\":1,\"3637\":1}}],[\"程序本身可以捕获并且可以处理的异常\",{\"1\":{\"242\":1,\"3638\":1}}],[\"程序的稳定运行\",{\"1\":{\"236\":1,\"3630\":1}}],[\"语编写完的程序\",{\"1\":{\"1217\":1,\"1385\":1,\"1553\":1,\"1721\":1,\"4628\":1}}],[\"语言的字符串并不记录自身长度\",{\"1\":{\"2682\":1,\"5044\":1}}],[\"语言的字符串表示\",{\"1\":{\"2680\":1,\"5042\":1}}],[\"语言\",{\"1\":{\"1776\":1,\"2880\":1,\"4134\":1,\"4365\":1}}],[\"语言实现的\",{\"1\":{\"1236\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"4647\":1}}],[\"语言实现的是\",{\"1\":{\"1217\":1,\"1218\":1,\"1385\":1,\"1386\":1,\"1553\":1,\"1554\":1,\"1721\":1,\"1722\":1,\"4628\":1,\"4629\":1}}],[\"语言使用进程和线程都可以\",{\"1\":{\"1214\":1,\"1382\":1,\"1550\":1,\"1718\":1,\"4625\":1}}],[\"语言一般使用线程\",{\"1\":{\"1213\":1,\"1381\":1,\"1549\":1,\"1717\":1,\"4624\":1}}],[\"语言中\",{\"0\":{\"337\":1},\"1\":{\"375\":1}}],[\"语言中所有错误与异常的超类\",{\"1\":{\"240\":1,\"3636\":1}}],[\"语句的时候\",{\"1\":{\"2609\":1,\"4971\":1}}],[\"语句的请求到来\",{\"1\":{\"2497\":1,\"4859\":1}}],[\"语句是不会对记录加锁的\",{\"1\":{\"2534\":1,\"4896\":1}}],[\"语句是利用\",{\"1\":{\"2506\":1,\"4868\":1}}],[\"语句执行结束后才释放锁\",{\"1\":{\"2524\":1,\"4886\":1}}],[\"语句且向\",{\"1\":{\"984\":1,\"4001\":1}}],[\"语句\",{\"1\":{\"982\":2,\"984\":1,\"2489\":2,\"2494\":1,\"2495\":1,\"2497\":1,\"2527\":1,\"2608\":1,\"3999\":2,\"4001\":1,\"4851\":2,\"4856\":1,\"4857\":1,\"4859\":1,\"4889\":1,\"4970\":1}}],[\"语法糖的作用就是方便程序员的使用\",{\"1\":{\"266\":1}}],[\"语法\",{\"0\":{\"93\":1,\"3492\":1},\"1\":{\"42\":1,\"3441\":1}}],[\"语法进行了扩展\",{\"1\":{\"39\":1,\"3438\":1}}],[\"语法扩展\",{\"1\":{\"37\":1,\"3436\":1}}],[\"一面\",{\"0\":{\"3110\":1,\"3140\":1,\"3155\":1,\"5390\":1,\"5420\":1,\"5435\":1}}],[\"一定会出现这样一种情况\",{\"1\":{\"2792\":1,\"5154\":1}}],[\"一定是\",{\"1\":{\"2112\":1}}],[\"一直跟这个事务启动时看到的数据是一致的\",{\"1\":{\"2595\":1,\"2608\":1,\"4957\":1,\"4970\":1}}],[\"一直维护一个红黑树比链表耗费资源更多\",{\"1\":{\"634\":1,\"3726\":1}}],[\"一起使用的时候\",{\"1\":{\"2529\":1,\"4891\":1}}],[\"一旦数据库泄漏\",{\"1\":{\"3344\":1}}],[\"一旦任务暂停\",{\"1\":{\"3076\":1,\"4330\":1}}],[\"一旦获得锁\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"一旦有第二个线程加入锁竞争\",{\"1\":{\"2847\":1,\"4101\":1}}],[\"一旦出现\",{\"1\":{\"2499\":1,\"4861\":1}}],[\"一旦发生丢包\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"一张表允许创建多个普通索引\",{\"1\":{\"2387\":1,\"4749\":1}}],[\"一张表允许创建多个唯一索引\",{\"1\":{\"2386\":1,\"4748\":1}}],[\"一张数据表有只能有一个主键\",{\"1\":{\"2379\":1,\"4741\":1}}],[\"一次即可定位\",{\"1\":{\"2364\":1,\"4726\":1}}],[\"一次该\",{\"1\":{\"2099\":1}}],[\"一锁就是锁住了整张表\",{\"1\":{\"2327\":1,\"4689\":1}}],[\"一种是查询分组\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"一对多\",{\"1\":{\"2142\":1}}],[\"一对一\",{\"1\":{\"2112\":1}}],[\"一样也是在插入数据的时候\",{\"1\":{\"2522\":1,\"4884\":1}}],[\"一样\",{\"1\":{\"1871\":1,\"1878\":1,\"4460\":1,\"4467\":1}}],[\"一段时间内\",{\"1\":{\"1835\":1,\"4424\":1}}],[\"一级缓存sqlsession\",{\"1\":{\"996\":1,\"4013\":1}}],[\"一级缓存是默认开启的\",{\"1\":{\"995\":1,\"4012\":1}}],[\"一级缓存的作用域是一个sqlsession内\",{\"1\":{\"994\":1,\"4011\":1}}],[\"一级缓存内部存储使用一个\",{\"1\":{\"982\":1,\"3999\":1}}],[\"一级缓存也就不存在了\",{\"1\":{\"982\":1,\"3999\":1}}],[\"一级缓存\",{\"0\":{\"980\":1,\"981\":1,\"3997\":1,\"3998\":1}}],[\"一级缓存能解决吗\",{\"1\":{\"881\":1,\"3898\":1}}],[\"一致性则是通过持久性+原子性+隔离性来保证\",{\"1\":{\"2575\":1,\"4937\":1}}],[\"一致性就是要求上述步骤操作后\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"一致性\",{\"1\":{\"842\":1,\"1906\":1,\"1909\":1,\"1915\":1,\"2568\":1,\"3859\":1,\"4495\":1,\"4498\":1,\"4504\":1,\"4930\":1}}],[\"一致的\",{\"1\":{\"340\":1}}],[\"一般用在读锁上\",{\"1\":{\"2981\":1,\"4235\":1}}],[\"一般不会使用\",{\"1\":{\"2365\":1,\"2366\":1,\"2376\":1,\"4727\":1,\"4728\":1,\"4738\":1}}],[\"一般不建议修改loadfactor的值\",{\"1\":{\"709\":1}}],[\"一般是\",{\"1\":{\"2276\":1,\"5358\":1}}],[\"一般情况下\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"一般情况下不自定义检查异常\",{\"1\":{\"247\":1,\"3643\":1}}],[\"一般需要预热下\",{\"1\":{\"1963\":1,\"4069\":1}}],[\"一般使用redis的zset数据类型\",{\"1\":{\"1942\":1,\"4048\":1}}],[\"一般来说\",{\"1\":{\"1155\":1,\"1217\":1,\"1323\":1,\"1385\":1,\"1491\":1,\"1553\":1,\"1659\":1,\"1721\":1,\"4566\":1,\"4628\":1}}],[\"一般来说锁的范围大小和性能是成反比的\",{\"1\":{\"559\":1}}],[\"一般而言\",{\"1\":{\"489\":1}}],[\"一类的接口名称\",{\"1\":{\"393\":1}}],[\"一些框架\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"一些不合法的参数请求直接抛出异常信息返回给客户端\",{\"1\":{\"2778\":1,\"5140\":1}}],[\"一些分布式的问题\",{\"1\":{\"1956\":1,\"4062\":1}}],[\"一些加密\",{\"1\":{\"927\":1,\"3944\":1}}],[\"一些固定的不能被覆盖的属性\",{\"1\":{\"926\":1,\"3943\":1}}],[\"一些\",{\"1\":{\"366\":1}}],[\"一\",{\"0\":{\"237\":1,\"1999\":1,\"2012\":1,\"3109\":1,\"3178\":1,\"3325\":1,\"3632\":1,\"3691\":1,\"5260\":1,\"5389\":1},\"1\":{\"302\":1,\"3690\":1}}],[\"一个线程每获得一次锁\",{\"1\":{\"2969\":1,\"4223\":1}}],[\"一个节点表示一个线程\",{\"1\":{\"2916\":1,\"2919\":1,\"4170\":1,\"4173\":1}}],[\"一个人进入厕所后首先把门锁上\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"一个\",{\"1\":{\"2657\":1,\"3026\":1,\"4280\":1,\"5019\":1}}],[\"一个事务中的所有操作\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"一个事务在插入一条记录的时候\",{\"1\":{\"2558\":1,\"4920\":1}}],[\"一个事务在持有\",{\"1\":{\"2519\":1,\"4881\":1}}],[\"一个事务持有了范围为\",{\"1\":{\"2555\":1,\"4917\":1}}],[\"一个事务被提交之后\",{\"1\":{\"844\":1,\"3861\":1}}],[\"一个索引包含\",{\"1\":{\"2374\":1,\"4736\":1}}],[\"一个连接建立多个不同的数据流\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"一个打赏就发一个消息\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"一个进程虽然任一时刻只能处理一个请求\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"一个变量被访问到过后\",{\"1\":{\"1093\":1}}],[\"一个queue对应一个consumer\",{\"1\":{\"1072\":1,\"5248\":1}}],[\"一个queue\",{\"1\":{\"1070\":1,\"5246\":1}}],[\"一个topic有多个partition\",{\"1\":{\"1027\":1,\"5203\":1}}],[\"一个consumer\",{\"1\":{\"1027\":1,\"5203\":1}}],[\"一个一个地添加到项目的依赖管理中\",{\"1\":{\"942\":1,\"3959\":1}}],[\"一个缓存用于存放成品对象\",{\"1\":{\"888\":1,\"3905\":1}}],[\"一个用户的事物不被其他事物所干扰\",{\"1\":{\"843\":1,\"3860\":1}}],[\"一个数字在和他进行按位与操作的时候\",{\"1\":{\"750\":1}}],[\"一个数和\",{\"1\":{\"734\":1}}],[\"一个数对2n取模\",{\"1\":{\"734\":1}}],[\"一个hashmap的容量\",{\"1\":{\"689\":1}}],[\"一个使用了同步方法\",{\"1\":{\"552\":1}}],[\"一个使用同步代码块之外几乎无任何区别\",{\"1\":{\"550\":1}}],[\"一个是比较喜欢通过博客整理分享自己所学知识\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"一个是\",{\"1\":{\"377\":2}}],[\"一个更加完整\",{\"1\":{\"340\":1}}],[\"一个类的完整生命周期\",{\"1\":{\"192\":1,\"3586\":1}}],[\"一个拥有间隙锁\",{\"1\":{\"2562\":1,\"4924\":1}}],[\"一个拥有\",{\"1\":{\"67\":1,\"3466\":1}}],[\"也还有效\",{\"1\":{\"3303\":1,\"5572\":1}}],[\"也有人叫它排他锁\",{\"1\":{\"2977\":1,\"4231\":1}}],[\"也有很多问题\",{\"1\":{\"2883\":1,\"2902\":1,\"4137\":1,\"4156\":1}}],[\"也有这样的能力\",{\"1\":{\"347\":1}}],[\"也按相同的搜索条件也是查询出了\",{\"1\":{\"2588\":1,\"4950\":1}}],[\"也从数据库中读取小林的余额数据\",{\"1\":{\"2579\":1,\"4941\":1}}],[\"也正是这样\",{\"1\":{\"2565\":1,\"4927\":1}}],[\"也正是因为继承了这个依赖\",{\"1\":{\"950\":1,\"3967\":1}}],[\"也属于间隙锁\",{\"1\":{\"2562\":1,\"4924\":1}}],[\"也包含间隙锁\",{\"1\":{\"2558\":1,\"4920\":1}}],[\"也执行了同样的\",{\"1\":{\"2495\":1,\"4857\":1}}],[\"也叫做递归锁\",{\"1\":{\"2968\":1,\"4222\":1}}],[\"也叫\",{\"1\":{\"2413\":1,\"4775\":1}}],[\"也叫散列算法\",{\"1\":{\"2349\":1,\"4711\":1}}],[\"也无需回表\",{\"1\":{\"2411\":1,\"4773\":1}}],[\"也支持了全文索引\",{\"1\":{\"2389\":1,\"4751\":1}}],[\"也存放\",{\"1\":{\"2355\":1,\"4717\":1}}],[\"也同样在传输层组装\",{\"1\":{\"2156\":1}}],[\"也不是非对称加密算法\",{\"1\":{\"3394\":1}}],[\"也不是万能的\",{\"1\":{\"2902\":1,\"4156\":1}}],[\"也不会抛出异常\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"也不会影响备份数据库时的\",{\"1\":{\"2463\":1,\"4825\":1}}],[\"也不会影响\",{\"1\":{\"2148\":1}}],[\"也不存在于数据库中\",{\"1\":{\"2776\":1,\"2800\":1,\"5138\":1,\"5162\":1}}],[\"也不可以对该记录加\",{\"1\":{\"2546\":1,\"4908\":1}}],[\"也不建议使用非单调的字段作为主键\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"也不保证网络包中的数据的完整性\",{\"1\":{\"2107\":1}}],[\"也不用担心多进程竞争\",{\"1\":{\"1231\":1,\"1399\":1,\"1567\":1,\"1735\":1,\"4642\":1}}],[\"也随之变为\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"也会释放所有表锁\",{\"1\":{\"2481\":1,\"4843\":1}}],[\"也会限制本线程接下来的读写操作\",{\"1\":{\"2477\":1,\"4839\":1}}],[\"也会将自己服务器设置为\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"也会编译通过\",{\"1\":{\"245\":1,\"3641\":1}}],[\"也依然只苏醒一次\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4560\":1}}],[\"也没有key的情况下\",{\"1\":{\"1023\":1,\"5199\":1}}],[\"也没有用throws子句声明抛出它\",{\"1\":{\"245\":1,\"3641\":1}}],[\"也容易出错\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"也对它的解决方案可以上手的例子\",{\"1\":{\"897\":1,\"3914\":1}}],[\"也是可以对记录加共享锁和独占锁的\",{\"1\":{\"2507\":1,\"4869\":1}}],[\"也是明确规定禁止使用外键的\",{\"1\":{\"2334\":1,\"4696\":1}}],[\"也是一个完整对象了\",{\"1\":{\"890\":1,\"3907\":1}}],[\"也是面向对象讲解的重点\",{\"1\":{\"366\":1}}],[\"也创建完整了\",{\"1\":{\"879\":1,\"3896\":1}}],[\"也可能开启一个新事务\",{\"1\":{\"858\":1,\"3875\":1}}],[\"也可以通过构造器来显式的指定使用公平锁\",{\"1\":{\"2831\":1,\"4085\":1}}],[\"也可以用来存储对象以及购物车\",{\"1\":{\"2710\":1,\"5072\":1}}],[\"也可以自行搜索\",{\"1\":{\"2385\":1,\"4747\":1}}],[\"也可以有一个\",{\"1\":{\"2176\":1}}],[\"也可以有多个\",{\"1\":{\"1200\":1,\"1368\":1,\"1536\":1,\"1704\":1,\"4611\":1}}],[\"也可以是多个进程\",{\"1\":{\"1201\":1,\"1369\":1,\"1537\":1,\"1705\":1,\"4612\":1}}],[\"也可以是black\",{\"1\":{\"421\":1,\"3746\":1}}],[\"也可以按消息的类型读取\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"也可以使用分页插件来完成物理分页\",{\"1\":{\"975\":1,\"3992\":1}}],[\"也可以使用collections\",{\"1\":{\"528\":1}}],[\"也可以不处理\",{\"1\":{\"244\":1,\"3640\":1}}],[\"也经常用于键已经排好序的场景\",{\"1\":{\"802\":1}}],[\"也能了解到不少知识\",{\"1\":{\"658\":1}}],[\"也就找到了对应的\",{\"1\":{\"2349\":1,\"4711\":1}}],[\"也就说\",{\"1\":{\"2327\":1,\"4689\":1}}],[\"也就说不需要保证\",{\"1\":{\"1921\":1,\"4510\":1}}],[\"也就无从知道主机\",{\"1\":{\"2240\":1,\"5322\":1}}],[\"也就减少了\",{\"1\":{\"1179\":1,\"1347\":1,\"1515\":1,\"1683\":1,\"4590\":1}}],[\"也就只能基于\",{\"1\":{\"384\":1}}],[\"也就是直接在调用execute方法的线程中运行\",{\"1\":{\"3058\":1,\"4312\":1}}],[\"也就是加密密钥能够从解密密钥中推算出来\",{\"1\":{\"3390\":1}}],[\"也就是加\",{\"1\":{\"3006\":1,\"4260\":1}}],[\"也就是fifo双向队列\",{\"1\":{\"2913\":1,\"4167\":1}}],[\"也就是我们常说的乐观锁\",{\"1\":{\"2837\":1,\"4091\":1}}],[\"也就是我们要研究的异常表\",{\"1\":{\"277\":1,\"3665\":1}}],[\"也就是它随时可能发生回滚操作\",{\"1\":{\"2580\":1,\"4942\":1}}],[\"也就是仅仅把一条记录锁上\",{\"1\":{\"2540\":1,\"4902\":1}}],[\"也就是写锁\",{\"1\":{\"2476\":1,\"4838\":1}}],[\"也就是读锁\",{\"1\":{\"2476\":1,\"4838\":1}}],[\"也就是要通过主键再查找一次\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"也就是客户端的\",{\"1\":{\"2297\":1,\"5379\":1}}],[\"也就是服务端单机最大\",{\"1\":{\"2132\":1}}],[\"也就是一对多是无法做到的\",{\"1\":{\"2112\":1}}],[\"也就是经典的\",{\"1\":{\"1157\":1,\"1325\":1,\"1493\":1,\"1661\":1,\"4568\":1}}],[\"也就是常说的round\",{\"1\":{\"1023\":1,\"5199\":1}}],[\"也就是\",{\"1\":{\"757\":1,\"1906\":1,\"2288\":1,\"2496\":1,\"2505\":1,\"3225\":1,\"4495\":1,\"4858\":1,\"4867\":1,\"5370\":1,\"5494\":1}}],[\"也就是余数\",{\"1\":{\"737\":1}}],[\"也就是hash方法的输入应该是个object类型的key\",{\"1\":{\"723\":1}}],[\"也就是定义⼀个抽象⼯⼚\",{\"1\":{\"590\":1,\"3783\":1}}],[\"也就是使用\",{\"1\":{\"409\":1}}],[\"也就是都需要进行一次\",{\"1\":{\"404\":1}}],[\"也就是基于动态数组的实现\",{\"1\":{\"400\":1}}],[\"也就是可以以此为基础\",{\"1\":{\"388\":1}}],[\"也就是说就算两个md5值非常相似\",{\"1\":{\"3331\":1}}],[\"也就是说当内存不足以容纳新写入数据时\",{\"1\":{\"2768\":1,\"5130\":1}}],[\"也就是说当网络分区之后\",{\"1\":{\"1916\":1,\"4505\":1}}],[\"也就是说如果本线程对学生表加了\",{\"1\":{\"2478\":1,\"4840\":1}}],[\"也就是说分区容错性\",{\"1\":{\"1916\":1,\"4505\":1}}],[\"也就是说全程没有通过\",{\"1\":{\"1188\":1,\"1356\":1,\"1524\":1,\"1692\":1,\"4599\":1}}],[\"也就是说\",{\"1\":{\"204\":1,\"205\":1,\"245\":1,\"251\":1,\"471\":1,\"615\":1,\"693\":1,\"734\":1,\"749\":1,\"761\":1,\"766\":1,\"856\":1,\"2242\":1,\"2245\":1,\"2383\":1,\"2569\":1,\"2599\":1,\"2879\":1,\"3066\":1,\"3598\":1,\"3599\":1,\"3641\":1,\"3647\":1,\"3808\":1,\"3873\":1,\"4133\":1,\"4320\":1,\"4745\":1,\"4931\":1,\"4961\":1,\"5324\":1,\"5327\":1}}],[\"也推荐使用\",{\"1\":{\"340\":1}}],[\"也保证了\",{\"1\":{\"236\":1,\"3630\":1}}],[\"时为非公平锁\",{\"1\":{\"2832\":1,\"4086\":1}}],[\"时为公平锁\",{\"1\":{\"2832\":1,\"4086\":1}}],[\"时的活跃事务列表\",{\"1\":{\"2622\":1,\"4984\":1}}],[\"时加上\",{\"1\":{\"2464\":1,\"4826\":1}}],[\"时候参数\",{\"0\":{\"2206\":1},\"1\":{\"2091\":1}}],[\"时就会触发扩容\",{\"1\":{\"702\":1}}],[\"时就会自动扩容\",{\"1\":{\"699\":1}}],[\"时间上将大大减少\",{\"1\":{\"3353\":1}}],[\"时间戳作为score进行排序\",{\"1\":{\"3263\":1,\"5532\":1}}],[\"时间的影响\",{\"1\":{\"2756\":1,\"5118\":1}}],[\"时间局部性是指如果程序中的某条指令一旦执行\",{\"1\":{\"1092\":1}}],[\"时间局部性和空间局部性\",{\"1\":{\"1092\":1}}],[\"时间和大小不论那个满足条件\",{\"1\":{\"1013\":1,\"5189\":1}}],[\"时间复杂度都是o\",{\"1\":{\"431\":1,\"3756\":1}}],[\"时间复杂度为o\",{\"1\":{\"419\":1,\"3744\":1}}],[\"时间复杂度是o\",{\"1\":{\"419\":1,\"3744\":1}}],[\"时间复杂度是\",{\"1\":{\"401\":1}}],[\"时间内完成查找\",{\"1\":{\"417\":1,\"3742\":1}}],[\"时传入构造方法参数的值\",{\"1\":{\"317\":1,\"3705\":1}}],[\"时\",{\"1\":{\"234\":1,\"894\":1,\"2102\":1,\"2103\":1,\"2104\":1,\"2105\":1,\"2511\":1,\"2512\":1,\"2531\":1,\"2554\":1,\"2555\":1,\"2664\":1,\"2966\":1,\"3628\":1,\"3911\":1,\"4220\":1,\"4873\":1,\"4874\":1,\"4893\":1,\"4916\":1,\"4917\":1,\"5026\":1}}],[\"它属于对称加密还是非对称加密\",{\"1\":{\"3183\":1}}],[\"它用来做什么\",{\"1\":{\"3127\":1,\"5407\":1}}],[\"它用来监视\",{\"1\":{\"940\":1,\"3957\":1}}],[\"它既不会抛弃任务\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"它保存着线程的引用\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"它做的变更才能被其他事务看到\",{\"1\":{\"2594\":1,\"4956\":1}}],[\"它做的变更就能被其他事务看到\",{\"1\":{\"2593\":1,\"4955\":1}}],[\"它解决的是网络层地址和链路层地址之间的转换问题\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"它不是面向最终用户的\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"它不直接用于域名解析\",{\"1\":{\"2298\":1,\"5380\":1}}],[\"它不保证网络包的交付\",{\"1\":{\"2107\":1}}],[\"它不允许出现重复元素\",{\"1\":{\"462\":1}}],[\"它就会将自己的投票信息更改为\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"它就会不停地发短信通知你\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4562\":1}}],[\"它首先也会将投票选给自己\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"它首先不会自己去尝试加载这个类\",{\"1\":{\"233\":1,\"3627\":1}}],[\"它为每个其他的\",{\"1\":{\"1879\":1,\"4468\":1}}],[\"它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了\",{\"1\":{\"1846\":1,\"4435\":1}}],[\"它具有服务降级\",{\"1\":{\"1839\":1,\"4428\":1}}],[\"它只是将各家公司开发的比较成熟\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构\",{\"1\":{\"419\":1,\"3744\":1}}],[\"它利用spring\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"它俩负责的事情如下\",{\"1\":{\"1196\":1,\"1364\":1,\"1532\":1,\"1700\":1,\"4607\":1}}],[\"它才消停\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4562\":1}}],[\"它也不会再发送第二条短信提醒你\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4562\":1}}],[\"它也有一个对应的set接口的实现类linkedhashset\",{\"1\":{\"449\":1}}],[\"它还可以方便地实现进程\",{\"1\":{\"1123\":1,\"1291\":1,\"1459\":1,\"1627\":1,\"4534\":1}}],[\"它还提供\",{\"1\":{\"929\":1,\"3946\":1}}],[\"它会先暂停拥有偏向锁的线程\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"它会先将请求转发给父类加载器\",{\"1\":{\"230\":1,\"3624\":1}}],[\"它会反查生产者\",{\"1\":{\"1939\":1,\"4045\":1}}],[\"它会直接以\",{\"1\":{\"1887\":1,\"4476\":1}}],[\"它会首先\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"它会停止执行并等待其他线程到达屏障\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4528\":1}}],[\"它允许同一时刻多个线程访问同一资源\",{\"1\":{\"1116\":1,\"1284\":1,\"1452\":1,\"1620\":1,\"4527\":1}}],[\"它有助于提高开发人员的生产力\",{\"1\":{\"929\":1,\"3946\":1}}],[\"它对数据库中数据的改变是持久的\",{\"1\":{\"844\":1,\"3861\":1}}],[\"它通过如下方法计算得到key的最终哈希值\",{\"1\":{\"790\":1}}],[\"它能确保接收端接收的网络包是无损坏\",{\"1\":{\"2108\":1}}],[\"它能够发送大量请求导致哈希碰撞\",{\"1\":{\"779\":1}}],[\"它能保证任何一个节点的左右子树的高度差不会超过较矮的那棵的一倍\",{\"1\":{\"461\":1}}],[\"它们都是\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"它们的区别在于创建\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"它们的实现都依赖了动态代理\",{\"1\":{\"606\":1,\"3799\":1}}],[\"它们是通过\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"它们是如何减少\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4574\":1}}],[\"它们具有相同的格式\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"它们才会一起继续执行\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4528\":1}}],[\"它们就使用到了模板模式\",{\"1\":{\"833\":1,\"3850\":1}}],[\"它们使用单向链表来存储相同索引值的元素\",{\"1\":{\"778\":1}}],[\"它内部通过synchronized实现了线程安全\",{\"1\":{\"668\":1}}],[\"它内部的map的实现类是linkedhashmap\",{\"1\":{\"449\":1}}],[\"它是消息摘要\",{\"1\":{\"3394\":1}}],[\"它是用两个数学相关的密钥对信息进行编码\",{\"1\":{\"3392\":1}}],[\"它是用来解决一级缓存不能跨会话共享数据的问题\",{\"1\":{\"998\":1,\"4015\":1}}],[\"它是简单的\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"它是指对数据修改时持保守态度\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"它是构建锁或者其他同步组件的基础框架\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"它是一个非常庞大的数据库\",{\"1\":{\"3352\":1}}],[\"它是一个64位long型\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"它是一条\",{\"1\":{\"2862\":1,\"4116\":1}}],[\"它是一种特殊的间隙锁\",{\"1\":{\"2560\":1,\"4922\":1}}],[\"它是域名解析结果的原出处\",{\"1\":{\"2302\":1,\"5384\":1}}],[\"它是针对\",{\"1\":{\"973\":1,\"3990\":1}}],[\"它是hashmap的子类\",{\"1\":{\"802\":1}}],[\"它是java最早实现的容器类之一\",{\"1\":{\"668\":1}}],[\"它是具备了某些特性的二叉搜索树\",{\"1\":{\"419\":1,\"3744\":1}}],[\"它包含有各种有关集合操作的静态多态方法\",{\"1\":{\"467\":1}}],[\"它提供了对集合对象进行基本操作的通用接口方法\",{\"1\":{\"465\":1}}],[\"它基于treemap实现\",{\"1\":{\"446\":1}}],[\"它可以随时发送数据\",{\"1\":{\"2162\":1}}],[\"它可以替代前面的\",{\"1\":{\"1179\":1,\"1347\":1,\"1515\":1,\"1683\":1,\"4590\":1}}],[\"它可以帮助实现对程序内部运行情况的监控\",{\"1\":{\"940\":1,\"3957\":1}}],[\"它可以排序\",{\"1\":{\"444\":1}}],[\"它可在\",{\"1\":{\"417\":1,\"3742\":1}}],[\"它和普通的相对平衡的二叉搜索树的效率相同\",{\"1\":{\"432\":1,\"3757\":1}}],[\"它同时满足以下特性\",{\"1\":{\"421\":1,\"3746\":1}}],[\"它在每个节点增加了一个存储位记录节点的颜色\",{\"1\":{\"421\":1,\"3746\":1}}],[\"它犯了面向对象设计领域的一个基本错误\",{\"1\":{\"351\":1}}],[\"它的下一层就是\",{\"1\":{\"2288\":1,\"5370\":1}}],[\"它的\",{\"1\":{\"2128\":1}}],[\"它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来\",{\"1\":{\"1856\":1,\"4445\":1}}],[\"它的前两个参数分别是目的端和源端的文件描述符\",{\"1\":{\"1178\":1,\"1346\":1,\"1514\":1,\"1682\":1,\"4589\":1}}],[\"它的每个方法中都加入了synchronize方法\",{\"1\":{\"653\":1}}],[\"它的特点是内部采用动态数组实现\",{\"1\":{\"469\":1}}],[\"它的时间复杂度o\",{\"1\":{\"433\":1,\"3758\":1}}],[\"它的操作效率就降低了\",{\"1\":{\"419\":1,\"3744\":1}}],[\"它的操作效率\",{\"1\":{\"419\":1,\"3744\":1}}],[\"它的搜索范围中没有找到所需的类\",{\"1\":{\"234\":1,\"3628\":1}}],[\"它的整个生命周期可以简单概括为\",{\"1\":{\"190\":1,\"3584\":1}}],[\"每秒请求数\",{\"1\":{\"3305\":1}}],[\"每台服务都会去执行refresh定时任务方法\",{\"1\":{\"3286\":1,\"5555\":1}}],[\"每隔一段时间抽取一批\",{\"1\":{\"2756\":1,\"5118\":1}}],[\"每\",{\"1\":{\"2650\":1,\"5012\":1}}],[\"每发送一次数据\",{\"1\":{\"2099\":1}}],[\"每天打开一个新片段\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"每当执行接口对象的方法时\",{\"1\":{\"978\":1,\"3995\":1}}],[\"每当一个类加载器接收到加载请求时\",{\"1\":{\"230\":1,\"3624\":1}}],[\"每一个设备都会收到该分组\",{\"1\":{\"2243\":1,\"5325\":1}}],[\"每一个模块都是一个单独的系统\",{\"1\":{\"1795\":1,\"4384\":1}}],[\"每一个queue一个consumer\",{\"1\":{\"1075\":1,\"5251\":1}}],[\"每一项工作都是以一个\",{\"1\":{\"1784\":1,\"4373\":1}}],[\"每一次重分配的结果尽量与上一次分配结果保持一致\",{\"1\":{\"1049\":1,\"5225\":1}}],[\"每一次分配变更相对上一次分配做最少的变动\",{\"1\":{\"1047\":1,\"5223\":1}}],[\"每一次添加操作\",{\"1\":{\"402\":1}}],[\"每一行都很有意思\",{\"1\":{\"793\":1}}],[\"每次在真正消费完消息之后再自己手动提交\",{\"1\":{\"3213\":1,\"5482\":1}}],[\"每次只能一个线程持有锁\",{\"1\":{\"2909\":1,\"4163\":1}}],[\"每次只能有⼀个线程调⽤访问同步块内容\",{\"1\":{\"582\":1,\"3775\":1}}],[\"每次变量更新了就把版本号加一\",{\"1\":{\"2888\":1,\"4142\":1}}],[\"每次构建不同的请求\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"每次\",{\"1\":{\"2350\":1,\"4712\":1}}],[\"每次操作时都传入整个\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"每次获取时+1\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"每次扩容都是成倍的\",{\"1\":{\"711\":1}}],[\"每次增长capacityincrement\",{\"1\":{\"525\":1}}],[\"每添加一个元素\",{\"1\":{\"404\":1}}],[\"每个thread中都具备一个threadlocalmap\",{\"1\":{\"3030\":1,\"4284\":1}}],[\"每个topic有2个分区\",{\"1\":{\"1052\":1,\"5228\":1}}],[\"每个topic4个分区\",{\"1\":{\"1036\":1,\"5212\":1}}],[\"每个topic仅需恢复一部分的数据\",{\"1\":{\"1019\":1,\"5195\":1}}],[\"每个对象中都内置了一个\",{\"1\":{\"3004\":1,\"4258\":1}}],[\"每个线程独享的内存\",{\"1\":{\"2939\":1,\"4193\":1}}],[\"每个事务读到的数据版本可能是不一样的\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"每个事务都有一个完整的数据空间\",{\"1\":{\"2569\":1,\"4931\":1}}],[\"每个语句执行前\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"每个请求和响应都需要独立的连接\",{\"1\":{\"2270\":1,\"5352\":1}}],[\"每个接口同样也应该具备不重复的\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"每个网络设备都自己维护了一个\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"每个目录可以包含文件和其他子目录\",{\"1\":{\"1086\":1,\"4027\":1}}],[\"每个消费者都订阅了相同的topic\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"每个片段包含1g或者一周的数据\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"每个端点都可以启用和禁用\",{\"1\":{\"940\":1,\"3957\":1}}],[\"每个单向链表往往只有一个或少数几个节点\",{\"1\":{\"666\":1}}],[\"每个元素的rehash之后\",{\"1\":{\"630\":1,\"3722\":1}}],[\"每个父类加载器都会走一遍这个流程\",{\"1\":{\"232\":1,\"3626\":1}}],[\"每个\",{\"0\":{\"2658\":1,\"5020\":1},\"1\":{\"200\":1,\"1881\":1,\"3594\":1,\"4470\":1}}],[\"则需要在文章微服务中创建app端需要的文章\",{\"1\":{\"3257\":1,\"5526\":1}}],[\"则需要修改自媒体文章的状态\",{\"1\":{\"3256\":1,\"5525\":1}}],[\"则需要先取出主键的值\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"则放行\",{\"1\":{\"3227\":1,\"3238\":1,\"5496\":1,\"5507\":1}}],[\"则路由到后台管理微服务进行登录\",{\"1\":{\"3224\":1,\"3235\":1,\"5493\":1,\"5504\":1}}],[\"则新的任务会被暂存在一个任务队列中\",{\"1\":{\"3080\":1,\"4334\":1}}],[\"则立即执行\",{\"1\":{\"3080\":1,\"4334\":1}}],[\"则会创建新的线程处理任务\",{\"1\":{\"3082\":1,\"4336\":1}}],[\"则会优先使用可复用的线程\",{\"1\":{\"3082\":1,\"4336\":1}}],[\"则会丢弃该任务\",{\"1\":{\"3058\":1,\"4312\":1}}],[\"则会在\",{\"1\":{\"2157\":1}}],[\"则会在传输层进行分片\",{\"1\":{\"2156\":1}}],[\"则表示锁可以被获取\",{\"1\":{\"3006\":1,\"4260\":1}}],[\"则是互斥的\",{\"1\":{\"2984\":1,\"4238\":1}}],[\"则是x\",{\"1\":{\"737\":1}}],[\"则返回错误信息\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"则将当前请求资源的线程设置为有效的工作线程\",{\"1\":{\"2915\":1,\"4169\":1}}],[\"则将对象头设置成无锁状态\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"则以原子方式将该引用和该标志的值设置为给定的更新值\",{\"1\":{\"2891\":1,\"4145\":1}}],[\"则以非事务的方式继续运行\",{\"1\":{\"861\":1,\"3878\":1}}],[\"则直接将自己挂起\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"则可以通过\",{\"1\":{\"2632\":1,\"4994\":1}}],[\"则为空\",{\"1\":{\"2619\":1,\"4981\":1}}],[\"则商品在商家手中\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"则给商家付了钱\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"则要执行这条命令\",{\"1\":{\"2449\":1,\"2454\":1,\"4811\":1,\"4816\":1}}],[\"则就会使用该字段过滤一批数据\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"则选择该字段为默认的主键\",{\"1\":{\"2380\":1,\"4742\":1}}],[\"则取出其\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"则它直接返回\",{\"1\":{\"2298\":1,\"5380\":1}}],[\"则使用空闲线程来处理\",{\"1\":{\"3066\":1,\"4320\":1}}],[\"则使用文本格式的报文\",{\"1\":{\"2271\":1,\"5353\":1}}],[\"则使用串行方式\",{\"1\":{\"2270\":1,\"5352\":1}}],[\"则使用逗号分割\",{\"1\":{\"256\":1,\"3652\":1}}],[\"则引入了更多的缓存控制策略例如\",{\"1\":{\"2267\":1,\"5349\":1}}],[\"则没有\",{\"1\":{\"2148\":1}}],[\"则mq服务器会push消息给消费者\",{\"1\":{\"1938\":1,\"4044\":1}}],[\"则\",{\"1\":{\"1886\":1,\"2625\":1,\"2700\":1,\"4475\":1,\"4987\":1,\"5062\":1}}],[\"则通过数据行的\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"则通过\",{\"1\":{\"1787\":1,\"4376\":1}}],[\"则通过父类的loadclass来加载该类\",{\"1\":{\"229\":1,\"3623\":1}}],[\"则从\",{\"1\":{\"1785\":1,\"4374\":1}}],[\"则交由当前连接对应的\",{\"1\":{\"1229\":1,\"1244\":1,\"1397\":1,\"1412\":1,\"1565\":1,\"1580\":1,\"1733\":1,\"1748\":1,\"4640\":1,\"4655\":1}}],[\"则交由\",{\"1\":{\"1228\":1,\"1243\":1,\"1396\":1,\"1411\":1,\"1564\":1,\"1579\":1,\"1732\":1,\"1747\":1,\"4639\":1,\"4654\":1}}],[\"则jvm会把该线程放入\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"则不久之后\",{\"1\":{\"1092\":1}}],[\"则不久之后该数据可能再次被访问\",{\"1\":{\"1092\":1}}],[\"则不久之后该指令可能再次被执行\",{\"1\":{\"1092\":1}}],[\"则该取值等价于\",{\"1\":{\"868\":1,\"3885\":1}}],[\"则创建一个事务作为当前事务的嵌套事务来运行\",{\"1\":{\"868\":1,\"3885\":1}}],[\"则创建一个新的事务\",{\"1\":{\"860\":1,\"3877\":1}}],[\"则把当前事务挂起\",{\"1\":{\"864\":1,\"865\":1,\"3881\":1,\"3882\":1}}],[\"则加入该事务\",{\"1\":{\"860\":1,\"861\":1,\"862\":1,\"3877\":1,\"3878\":1,\"3879\":1}}],[\"则在纯链表情况下\",{\"1\":{\"779\":1}}],[\"则2^3\",{\"1\":{\"735\":1}}],[\"则默认采用\",{\"1\":{\"619\":1,\"3812\":1}}],[\"则应该选linkedlist\",{\"1\":{\"489\":1}}],[\"则应该设计成继承关系\",{\"1\":{\"362\":1}}],[\"则linkedlist是比较理想的选择\",{\"1\":{\"482\":1}}],[\"则用equals方法比较元素是否相等\",{\"1\":{\"460\":1}}],[\"则调用findclass方法来加载该类\",{\"1\":{\"229\":1,\"3623\":1}}],[\"则调用启动类加载器来加载该类\",{\"1\":{\"229\":1,\"3623\":1}}],[\"则抛出异常\",{\"1\":{\"229\":1,\"862\":1,\"866\":1,\"3623\":1,\"3879\":1,\"3883\":1}}],[\"则说明该类没有被加载过\",{\"1\":{\"229\":1,\"3623\":1}}],[\"当作队列是完全可以的\",{\"1\":{\"3282\":1,\"5551\":1}}],[\"当作队列来使用时\",{\"1\":{\"3278\":1,\"5547\":1}}],[\"当消费者刚拿到这个消息准备进行真正消费的时候\",{\"1\":{\"3211\":1,\"5480\":1}}],[\"当消费者拉取到了分区的某个消息之后\",{\"1\":{\"3211\":1,\"5480\":1}}],[\"当消息达到设置的条件上限时\",{\"1\":{\"1010\":1,\"5186\":1}}],[\"当任务到达时\",{\"1\":{\"3037\":1,\"4291\":1}}],[\"当执行\",{\"1\":{\"3003\":1,\"4257\":1}}],[\"当执行插入\",{\"1\":{\"2505\":1,\"4867\":1}}],[\"当循环的条件被其他线程改变时才能进入临界区\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"当头节点释放同步状态的时候\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"当线程在同步队列中不断的通过自旋去获取同步状态\",{\"1\":{\"2924\":1,\"4178\":1}}],[\"当线程抢占锁失败时候\",{\"1\":{\"2914\":1,\"4168\":1}}],[\"当线程第二次再执行同步代码块时\",{\"1\":{\"2841\":1,\"4095\":1}}],[\"当同步状态释放时\",{\"1\":{\"2913\":1,\"4167\":1}}],[\"当对一个共享变量执行操作时\",{\"1\":{\"2896\":1,\"4150\":1}}],[\"当后续线程尝试获取锁时\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"当关闭偏向锁功能时\",{\"1\":{\"2847\":1,\"4101\":1}}],[\"当用户\",{\"1\":{\"3303\":1,\"5572\":1}}],[\"当用户请求过来\",{\"1\":{\"2783\":1,\"5145\":1}}],[\"当用户调用\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"当内存不足以容纳新写入数据时\",{\"1\":{\"2766\":1,\"2771\":1,\"5128\":1,\"5133\":1}}],[\"当内核通知文件描述符可读写时\",{\"1\":{\"1153\":1,\"1321\":1,\"1489\":1,\"1657\":1,\"4564\":1}}],[\"当读取记录时\",{\"1\":{\"2632\":1,\"4994\":1}}],[\"当事务回滚时用于将数据恢复到修改前的样子\",{\"1\":{\"2631\":1,\"4993\":1}}],[\"当事务方法被另一个事务方法调用时\",{\"1\":{\"858\":1,\"3875\":1}}],[\"当有一个新的任务提交时\",{\"1\":{\"3080\":1,\"4334\":1}}],[\"当有线程对表结构进行变更\",{\"1\":{\"2490\":1,\"4852\":1}}],[\"当有线程在执行\",{\"1\":{\"2489\":1,\"4851\":1}}],[\"当有其它线程改变了hashmap的结构\",{\"1\":{\"656\":1}}],[\"当会话退出后\",{\"1\":{\"2481\":1,\"4843\":1}}],[\"当查到索引对应的指针或主键后\",{\"1\":{\"2407\":1,\"4769\":1}}],[\"当没有显示的指定表的主键时\",{\"1\":{\"2380\":1,\"4742\":1}}],[\"当主机发送\",{\"1\":{\"2238\":1,\"5320\":1}}],[\"当主机收到数据包后\",{\"1\":{\"2175\":1}}],[\"当通信结束希望断开连接时\",{\"1\":{\"2105\":1}}],[\"当发生网络分区的时候\",{\"1\":{\"1916\":1,\"4505\":1}}],[\"当设计读写操作时\",{\"1\":{\"1908\":1,\"4497\":1}}],[\"当集群中有机器挂了\",{\"1\":{\"1893\":1,\"4482\":1}}],[\"当集群中已经有过半的\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"当\",{\"1\":{\"1887\":1,\"2114\":1,\"2524\":1,\"2525\":1,\"2526\":1,\"2529\":1,\"2531\":1,\"2744\":1,\"4476\":1,\"4886\":1,\"4887\":1,\"4888\":1,\"4891\":1,\"4893\":1,\"5106\":1}}],[\"当系统出现崩溃影响最大应该是\",{\"1\":{\"1883\":1,\"4472\":1}}],[\"当一台同样遵守\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"当一个线程访问同步代码块并获取锁时\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"当一个线程到达屏障时\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4528\":1}}],[\"当一个元素加入布隆过滤器中的时候\",{\"1\":{\"2786\":1,\"5148\":1}}],[\"当一个事务对一条记录加了\",{\"1\":{\"2545\":1,\"2546\":1,\"4907\":1,\"4908\":1}}],[\"当一个服务调用另一个服务由于网络原因或自身原因出现问题\",{\"1\":{\"1833\":1,\"4422\":1}}],[\"当一个\",{\"1\":{\"982\":1,\"1880\":1,\"3999\":1,\"4469\":1}}],[\"当选举产生了新的\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"当整个服务框架在启动过程中\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"当远程接口的方法被调用\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"当实际调用的时候\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"当实际kv个数超过threshold时\",{\"1\":{\"680\":1}}],[\"当服务一直处于正常状态\",{\"1\":{\"1837\":1,\"4426\":1}}],[\"当更多的服务请求到这些资源导致更多的请求等待\",{\"1\":{\"1833\":1,\"4422\":1}}],[\"当更多的元素加入到arraylist中时\",{\"1\":{\"500\":1}}],[\"当被监控的\",{\"1\":{\"1149\":1,\"1150\":1,\"1317\":1,\"1318\":1,\"1485\":1,\"1486\":1,\"1653\":1,\"1654\":1,\"4560\":1,\"4561\":1}}],[\"当某个\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"当某台机器挂了\",{\"1\":{\"1019\":1,\"5195\":1}}],[\"当sleep\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"当每个消息被写进去后\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"当这两个目标发生冲突时\",{\"1\":{\"1050\":1,\"5226\":1}}],[\"当所有片段都被写满时\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"当我需要构建一个web应用程序时\",{\"1\":{\"942\":1,\"3959\":1}}],[\"当我们不指定\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"当我们需要判断一个元素是否存在于布隆过滤器的时候\",{\"1\":{\"2789\":1,\"5151\":1}}],[\"当我们要对一个链表数组中的某个元素进行增删的时候\",{\"1\":{\"721\":1}}],[\"当我们的动态代理对象调用一个方法时\",{\"1\":{\"613\":1,\"3806\":1}}],[\"当我们使用\",{\"1\":{\"382\":1}}],[\"当我们想要加载一个类的时候\",{\"1\":{\"222\":1,\"3616\":1}}],[\"当范围对象的状态发生变化时\",{\"1\":{\"933\":1,\"3950\":1}}],[\"当需要限制\",{\"1\":{\"1787\":1,\"4376\":1}}],[\"当需要为\",{\"1\":{\"1786\":1,\"4375\":1}}],[\"当需要容器镜像时\",{\"1\":{\"1785\":1,\"4374\":1}}],[\"当需要补全b的属性时\",{\"1\":{\"885\":1,\"3902\":1}}],[\"当需要多线程操作的时候可以使用线程安全的concurrenthashmap\",{\"1\":{\"654\":1}}],[\"当哈希表的大小为素数时\",{\"1\":{\"767\":1,\"771\":1}}],[\"当map中元素个数超过loadfactor\",{\"1\":{\"711\":1}}],[\"当hashmap中的元素个数达到13的时候\",{\"1\":{\"707\":1}}],[\"当hashcode离散性很好的时候\",{\"1\":{\"640\":1,\"3732\":1}}],[\"当其size大于12\",{\"1\":{\"702\":1}}],[\"当代理类调用方法的时候\",{\"1\":{\"623\":1,\"3816\":1}}],[\"当前消费到的\",{\"1\":{\"3210\":1,\"5479\":1}}],[\"当前可以同时运行的线程数量变为最大线程数\",{\"1\":{\"3046\":1,\"4300\":1}}],[\"当前节点在队列中的状态\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"当前锁是偏向锁\",{\"1\":{\"2845\":1,\"4099\":1}}],[\"当前对本事务不可见的其他活跃事务\",{\"1\":{\"2621\":1,\"4983\":1}}],[\"当前正在写入数据的片段叫活跃片段\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"当前\",{\"1\":{\"614\":1,\"685\":1,\"3807\":1}}],[\"当前执行的语句必属于某个方法\",{\"1\":{\"256\":1,\"3652\":1}}],[\"当多个线程⼀起到达锁位置时\",{\"1\":{\"582\":1,\"3775\":1}}],[\"当第⼀个抢到锁的调⽤获取了实例之后\",{\"1\":{\"582\":1,\"3775\":1}}],[\"当你使用代理对象调用方法的时候实际会调用到这个方法\",{\"1\":{\"614\":1,\"3807\":1}}],[\"当你向这两种类型中增加元素的时候\",{\"1\":{\"556\":1}}],[\"当你在\",{\"1\":{\"262\":1,\"3658\":1}}],[\"当然由于fifo先进先出的特性\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"当然其他线程对学生表进行写操作时也会被阻塞\",{\"1\":{\"2478\":1,\"4840\":1}}],[\"当然了\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"当然前提是⼦⼯⼚⽀持⽣产该产品\",{\"1\":{\"592\":1,\"3785\":1}}],[\"当然\",{\"1\":{\"502\":1,\"717\":1,\"792\":1,\"978\":1,\"2133\":1,\"2562\":1,\"2902\":1,\"3995\":1,\"4156\":1,\"4924\":1}}],[\"当向hashset中添加元素的时候\",{\"1\":{\"460\":1}}],[\"当从根节点到叶子节点的路径上黑色节点相同时\",{\"1\":{\"421\":1,\"3746\":1}}],[\"当数据量达到一定程度的时候\",{\"1\":{\"403\":1}}],[\"当程序启动时\",{\"1\":{\"327\":1,\"3715\":1}}],[\"当程序中可能出现这类异常\",{\"1\":{\"245\":1,\"251\":1,\"3641\":1,\"3647\":1}}],[\"当父类加载器无法加载时\",{\"1\":{\"229\":1,\"3623\":1}}],[\"当父类的加载器为空\",{\"1\":{\"229\":1,\"3623\":1}}],[\"当父类的加载器不为空\",{\"1\":{\"229\":1,\"3623\":1}}],[\"逻辑非常清晰\",{\"1\":{\"228\":1,\"3622\":1}}],[\"将返回线程池进行复用\",{\"1\":{\"3082\":1,\"4336\":1}}],[\"将抛出\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"将需要存储的值放入到这个哈希表中\",{\"1\":{\"3028\":1,\"4282\":1}}],[\"将锁计数器设为\",{\"1\":{\"3007\":1,\"4261\":1}}],[\"将多个变量操作合成一个变量操作\",{\"1\":{\"2898\":1,\"4152\":1}}],[\"将内存地址\",{\"1\":{\"2874\":1,\"4128\":1}}],[\"将轻量级锁升级为重量级锁\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期\",{\"1\":{\"2797\":1,\"5159\":1}}],[\"将其他相关资源一并推送给客户端\",{\"1\":{\"2273\":1,\"5355\":1}}],[\"将阻塞直到写入磁盘完成后返回\",{\"1\":{\"2742\":1,\"5104\":1}}],[\"将敏感字符进行转义\",{\"1\":{\"2636\":1,\"4998\":1}}],[\"将当前未提交事务\",{\"1\":{\"2626\":1,\"4988\":1}}],[\"将会自动创建一个\",{\"1\":{\"2380\":1,\"4742\":1}}],[\"将会抛出concurrentmodificationexception\",{\"1\":{\"656\":1}}],[\"将该\",{\"1\":{\"2255\":1,\"5337\":1}}],[\"将把这个链路层帧\",{\"1\":{\"2254\":1,\"5336\":1}}],[\"将采用\",{\"1\":{\"2253\":1,\"2258\":1,\"5335\":1,\"5340\":1}}],[\"将构造一个\",{\"1\":{\"2241\":1,\"5323\":1}}],[\"将不得不通过\",{\"1\":{\"2239\":1,\"5321\":1}}],[\"将消息持久化到存储系统\",{\"1\":{\"1933\":1,\"4039\":1}}],[\"将写请求\",{\"1\":{\"1878\":1,\"4467\":1}}],[\"将数据保存在内存中\",{\"1\":{\"1858\":1,\"4447\":1}}],[\"将这些本地proxy代理实例\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"将这个值与topic可用的partition数取余得到partition值\",{\"1\":{\"1023\":1,\"5199\":1}}],[\"将这个类标志成\",{\"1\":{\"369\":1}}],[\"将请求模板化\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"将请求消息\",{\"1\":{\"821\":1,\"3838\":1}}],[\"将以java注解的方式定义的远程调用api接口\",{\"1\":{\"1848\":1,\"4437\":1}}],[\"将一个完整的系统拆分成很多个服务\",{\"1\":{\"1815\":1,\"4404\":1}}],[\"将一个复杂的业务拆分为若干小的业务\",{\"1\":{\"1806\":1,\"4395\":1}}],[\"将事物分成多阶段提交\",{\"1\":{\"1814\":1,\"4403\":1}}],[\"将复杂的业务简单化\",{\"1\":{\"1806\":1,\"4395\":1}}],[\"将下载镜像以\",{\"1\":{\"1785\":1,\"4374\":1}}],[\"将新的连接分配给某个子线程\",{\"1\":{\"1260\":1,\"1428\":1,\"1596\":1,\"1764\":1,\"4671\":1}}],[\"将结果发给主线程中的\",{\"1\":{\"1247\":1,\"1415\":1,\"1583\":1,\"1751\":1,\"4658\":1}}],[\"将上面的两个因素排列组设一下\",{\"1\":{\"1202\":1,\"1370\":1,\"1538\":1,\"1706\":1,\"4613\":1}}],[\"将磁盘上的数据拷贝到内核缓冲区里\",{\"1\":{\"1184\":1,\"1352\":1,\"1520\":1,\"1688\":1,\"4595\":1}}],[\"将获取的唯一id存表\",{\"1\":{\"1064\":1,\"5240\":1}}],[\"将key的hash值与topic的partition数进行取余得到partition值\",{\"1\":{\"1022\":1,\"5198\":1}}],[\"将如何处理\",{\"1\":{\"1013\":1,\"5189\":1}}],[\"将重新启动\",{\"1\":{\"929\":1,\"3946\":1}}],[\"将渲染结果返回给客户端\",{\"1\":{\"828\":1,\"3845\":1}}],[\"将字符串转换成格式化数字或格式化日期等\",{\"1\":{\"823\":1,\"3840\":1}}],[\"将字节码翻译成底层系统指令\",{\"1\":{\"182\":1,\"3576\":1}}],[\"将对象转换为指定的响应信息\",{\"1\":{\"821\":1,\"3838\":1}}],[\"将帮你做一些额外的工作\",{\"1\":{\"820\":1,\"3837\":1}}],[\"将得到视图对象返回给用户\",{\"1\":{\"814\":1,\"3831\":1}}],[\"将⽣产任务交给不同的派⽣类⼯⼚\",{\"1\":{\"590\":1,\"3783\":1}}],[\"将\",{\"1\":{\"378\":1,\"2741\":1,\"2927\":1,\"3376\":1,\"4181\":1,\"5103\":1}}],[\"将在新的\",{\"1\":{\"368\":1}}],[\"将搜索类或资源的任务委托给其父类加载器\",{\"1\":{\"225\":1,\"3619\":1}}],[\"其它都是api\",{\"1\":{\"3122\":1,\"5402\":1}}],[\"其它的运行所需资源都已全部获得\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4516\":1}}],[\"其写锁是独享锁\",{\"1\":{\"2982\":1,\"4236\":1}}],[\"其读锁是共享锁\",{\"1\":{\"2982\":1,\"4236\":1}}],[\"其余所有等待获取该锁的线程都会处于阻塞状态\",{\"1\":{\"2851\":1,\"4105\":1}}],[\"其余的类加载器都应有自己的父类加载器\",{\"1\":{\"224\":1,\"3618\":1}}],[\"其对查询性能的影响也就越大\",{\"1\":{\"2665\":1,\"5027\":1}}],[\"其效率大于索引合并\",{\"1\":{\"2375\":1,\"4737\":1}}],[\"其本质可以看成是一种排序好的数据结构\",{\"1\":{\"2345\":1,\"4707\":1}}],[\"其表数据文件本身就是按\",{\"1\":{\"2343\":1,\"2360\":1,\"4705\":1,\"4722\":1}}],[\"其数据结构如下\",{\"1\":{\"2919\":1,\"4173\":1}}],[\"其数据文件本身就是索引文件\",{\"1\":{\"2343\":1,\"2360\":1,\"4705\":1,\"4722\":1}}],[\"其数据流不受影响\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"其理论值计算公式如下\",{\"1\":{\"2130\":1}}],[\"其次\",{\"1\":{\"1180\":1,\"1348\":1,\"1516\":1,\"1684\":1,\"4591\":1}}],[\"其附近的存储单元也将被访问\",{\"1\":{\"1092\":1}}],[\"其目标有两点\",{\"1\":{\"1047\":1,\"5223\":1}}],[\"其作用域是\",{\"1\":{\"984\":1,\"4001\":1}}],[\"其主要目的也是为了把高位和低位组合在一起\",{\"1\":{\"776\":1}}],[\"其主要被以下方法引用\",{\"1\":{\"719\":1}}],[\"其定义了产品的⽣产接⼝\",{\"1\":{\"590\":1,\"3783\":1}}],[\"其实并不是真正的破解\",{\"1\":{\"3334\":1}}],[\"其实主要就是\",{\"1\":{\"1893\":1,\"4482\":1}}],[\"其实和初始化选举差不多\",{\"1\":{\"1888\":1,\"4477\":1}}],[\"其实它们的区别还是很好理解的\",{\"1\":{\"1148\":1,\"1316\":1,\"1484\":1,\"1652\":1,\"4559\":1}}],[\"其实整体处理过程类似\",{\"1\":{\"894\":1,\"3911\":1}}],[\"其实我们在前面分析源码时也提到过\",{\"1\":{\"893\":1,\"3910\":1}}],[\"其实只有一级缓存并不是不能解决循环依赖\",{\"1\":{\"883\":1,\"3900\":1}}],[\"其实就是通过cas修改对象头里的锁标志位\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"其实就是\",{\"1\":{\"849\":1,\"3866\":1}}],[\"其实就是将数组和链表组合在一起\",{\"1\":{\"715\":1}}],[\"其实基本原理就是这个\",{\"1\":{\"724\":1}}],[\"其实简单\",{\"1\":{\"724\":1}}],[\"其实\",{\"1\":{\"699\":1,\"730\":1,\"757\":1,\"763\":1,\"3394\":1}}],[\"其实很简单\",{\"1\":{\"582\":1,\"3775\":1}}],[\"其实synchronizedlist有一个构造函数可以传入一个object\",{\"1\":{\"564\":1}}],[\"其实背后的原理也很简单\",{\"1\":{\"266\":1}}],[\"其大小将会动态地增长\",{\"1\":{\"500\":1}}],[\"其他都是了解\",{\"1\":{\"3120\":1,\"5400\":1}}],[\"其他用户长时间无法访问\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"其他人就可以进入了\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"其他的线程都会阻塞\",{\"1\":{\"2989\":1,\"4243\":1}}],[\"其他的线程进入后就会阻塞等待锁\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"其他的exception类及其子类都属于可查异常\",{\"1\":{\"251\":1,\"3647\":1}}],[\"其他事务既不可以对该记录加\",{\"1\":{\"2546\":1,\"4908\":1}}],[\"其他事务也可以继续对该记录加\",{\"1\":{\"2545\":1,\"4907\":1}}],[\"其他事务的如果要向该表插入语句都会被阻塞\",{\"1\":{\"2519\":1,\"4881\":1}}],[\"其他内节点只存放\",{\"1\":{\"2355\":1,\"4717\":1}}],[\"其他节点的读写操作正常的话\",{\"1\":{\"1919\":1,\"4508\":1}}],[\"其他角色都没有得到更新吧\",{\"1\":{\"1877\":1,\"4466\":1}}],[\"其他阻塞\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"其他线程可以尝试获取锁\",{\"1\":{\"3007\":1,\"4261\":1}}],[\"其他线程处于阻塞状态\",{\"1\":{\"2977\":1,\"4231\":1}}],[\"其他线程才有机会操作共享数据\",{\"1\":{\"1250\":1,\"1418\":1,\"1586\":1,\"1754\":1,\"4661\":1}}],[\"其他线程调用了该对象的start\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4516\":1}}],[\"其他线程获取锁后就会被空判断拦截\",{\"1\":{\"582\":1,\"3775\":1}}],[\"其他\",{\"1\":{\"961\":1,\"3978\":1}}],[\"其他情况\",{\"1\":{\"867\":1,\"3884\":1}}],[\"其他没有特定顺序\",{\"1\":{\"493\":1}}],[\"其中一个密钥叫公开密钥\",{\"1\":{\"3392\":1}}],[\"其中源\",{\"1\":{\"2254\":2,\"5336\":2}}],[\"其中高32位表示\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"其中的主要代码部分如下\",{\"1\":{\"747\":1}}],[\"其中定义了一个final\",{\"1\":{\"719\":1}}],[\"其中有一个是我们本文主要关注的\",{\"1\":{\"672\":1}}],[\"其中有listiterator和\",{\"1\":{\"565\":1}}],[\"其中⼀个线程获取锁\",{\"1\":{\"582\":1,\"3775\":1}}],[\"其中\",{\"1\":{\"190\":1,\"717\":1,\"1207\":1,\"1225\":1,\"1375\":1,\"1393\":1,\"1543\":1,\"1561\":1,\"1711\":1,\"1729\":1,\"1866\":1,\"2232\":1,\"3001\":1,\"3014\":1,\"3584\":1,\"4255\":1,\"4268\":1,\"4455\":1,\"4618\":1,\"4636\":1,\"5314\":1}}],[\"就可能被破解掉\",{\"1\":{\"3352\":1}}],[\"就可以查到数据了\",{\"1\":{\"2410\":1,\"4772\":1}}],[\"就可以通过它找到根域\",{\"1\":{\"2295\":1,\"5377\":1}}],[\"就可以完成文件的传输\",{\"1\":{\"1189\":1,\"1357\":1,\"1525\":1,\"1693\":1,\"4600\":1}}],[\"就可以实现取模运算了\",{\"1\":{\"742\":1}}],[\"就读于陕西师范大学\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"就能知道该接口的请求次数\",{\"1\":{\"3312\":1}}],[\"就能比较容易地进行选择了\",{\"1\":{\"481\":1}}],[\"就关于应聘的软件开发岗位谈一下实际的开发\",{\"1\":{\"3180\":1}}],[\"就关闭当前文件\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"就算数据库泄漏\",{\"1\":{\"3350\":1}}],[\"就算老子啥都不会也不去你这个垃圾公司\",{\"1\":{\"3118\":1,\"5398\":1}}],[\"就算再急也没用\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"就新建一个线程来执行任务\",{\"1\":{\"3071\":1,\"4325\":1}}],[\"就直接获取到锁\",{\"1\":{\"2990\":1,\"4244\":1}}],[\"就直接使用取模算法了呢\",{\"1\":{\"762\":1}}],[\"就把其设为同步队列中的头节点\",{\"1\":{\"2924\":1,\"4178\":1}}],[\"就把这个轻量级锁释放了\",{\"1\":{\"2522\":1,\"4884\":1}}],[\"就要升级到\",{\"1\":{\"2604\":2,\"4966\":2}}],[\"就感觉发生了幻觉一样\",{\"1\":{\"2590\":1,\"4952\":1}}],[\"就意味着发生了\",{\"1\":{\"2577\":1,\"2582\":1,\"2586\":1,\"4939\":1,\"4944\":1,\"4948\":1}}],[\"就好比买一件商品\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"就好了\",{\"1\":{\"381\":1}}],[\"就采用轻量级锁\",{\"1\":{\"2525\":1,\"4887\":1}}],[\"就采用\",{\"1\":{\"2524\":1,\"4886\":1}}],[\"就都会被阻塞\",{\"1\":{\"2497\":1,\"4859\":1}}],[\"就无法申请到\",{\"1\":{\"2496\":1,\"4858\":1}}],[\"就无法使用\",{\"1\":{\"807\":1,\"3824\":1}}],[\"就肯定能命中索引\",{\"1\":{\"2434\":1,\"4796\":1}}],[\"就相当于定位到了数据\",{\"1\":{\"2395\":1,\"4757\":1}}],[\"就相当于取x的2进制的最后三位数\",{\"1\":{\"736\":1}}],[\"就属于非聚簇索引\",{\"1\":{\"2369\":1,\"2401\":1,\"4731\":1,\"4763\":1}}],[\"就代表请求被成功处理\",{\"1\":{\"2262\":1,\"5344\":1}}],[\"就应答ack\",{\"1\":{\"1938\":1,\"4044\":1}}],[\"就变了\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"就利用了\",{\"1\":{\"1192\":1,\"1360\":1,\"1528\":1,\"1696\":1,\"4603\":1}}],[\"就一直不断地把这个事件传递给用户\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4563\":1}}],[\"就绪状态的线程获取了cpu\",{\"1\":{\"1106\":1,\"1274\":1,\"1442\":1,\"1610\":1,\"4517\":1}}],[\"就绪状态\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4516\":1}}],[\"就像上面的\",{\"1\":{\"3312\":1}}],[\"就像相机拍照那样\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"就像这个事务从来没有执行过一样\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"就像管理普通的代码一样\",{\"1\":{\"1778\":1,\"4367\":1}}],[\"就像一棵倒立的树\",{\"1\":{\"1086\":1,\"4027\":1}}],[\"就像一个工具类\",{\"1\":{\"467\":1}}],[\"就像我们自己做的例子一样\",{\"1\":{\"883\":1,\"3900\":1}}],[\"就不做过多的介绍了\",{\"1\":{\"786\":1}}],[\"就二者的效率来说\",{\"1\":{\"626\":1,\"3819\":1}}],[\"就\",{\"1\":{\"608\":1,\"2099\":1,\"3801\":1}}],[\"就⽐较难办了\",{\"1\":{\"592\":1,\"3785\":1}}],[\"就需要遍历表里所有记录\",{\"1\":{\"2511\":1,\"4873\":1}}],[\"就需要在操作共享资源前加上互斥锁\",{\"1\":{\"1250\":1,\"1418\":1,\"1586\":1,\"1754\":1,\"4661\":1}}],[\"就需要修改⼯⼚类的判断逻辑\",{\"1\":{\"586\":1,\"3779\":1}}],[\"就需要提及exception\",{\"1\":{\"273\":1,\"3661\":1}}],[\"就将元素添加进去\",{\"1\":{\"460\":1}}],[\"就如数据库中的唯一约束\",{\"1\":{\"459\":1}}],[\"就说\",{\"1\":{\"392\":1}}],[\"就是密文传输密码http\",{\"1\":{\"3345\":1}}],[\"就是明文传输密码http\",{\"1\":{\"3339\":1}}],[\"就是说服务器在一秒的时间内处理了多少个请求\",{\"1\":{\"3305\":1}}],[\"就是一种\",{\"1\":{\"2985\":1,\"4239\":1}}],[\"就是一个很简单的数组元素求和\",{\"1\":{\"1096\":1}}],[\"就是一个queue对应一个consumer\",{\"1\":{\"1077\":1,\"5253\":1}}],[\"就是一个完整对象了\",{\"1\":{\"890\":1,\"3907\":1}}],[\"就是一个接口\",{\"1\":{\"375\":1}}],[\"就是一个动态数组\",{\"1\":{\"345\":1}}],[\"就是采用自旋锁\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"就是所有的控制权都交给了操作系统\",{\"1\":{\"2851\":1,\"4105\":1}}],[\"就是开启了事务\",{\"1\":{\"2493\":1,\"4855\":1}}],[\"就是冗余索引\",{\"1\":{\"2434\":1,\"4796\":1}}],[\"就是我的域名我做主\",{\"1\":{\"2302\":1,\"5384\":1}}],[\"就是保存每个节点的表id给前端\",{\"1\":{\"1947\":1,\"4053\":1}}],[\"就是\",{\"1\":{\"1918\":2,\"2413\":1,\"3032\":2,\"4286\":2,\"4507\":2,\"4775\":1,\"5275\":1}}],[\"就是没有选举权和被选举权的\",{\"1\":{\"1874\":1,\"4463\":1}}],[\"就是将\",{\"1\":{\"1256\":1,\"1424\":1,\"1592\":1,\"1760\":1,\"4667\":1}}],[\"就是单机同时处理\",{\"1\":{\"1157\":1,\"1325\":1,\"1493\":1,\"1661\":1,\"4568\":1}}],[\"就是多一些queue而已\",{\"1\":{\"1075\":1,\"5251\":1}}],[\"就是把多个partition均衡的分配给多个消费者\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"就是你的完整创建依赖于我\",{\"1\":{\"874\":1,\"3891\":1}}],[\"就是基于动态代理的\",{\"1\":{\"807\":1,\"3824\":1}}],[\"就是为了把高位的特征和低位的特征组合起来\",{\"1\":{\"749\":1}}],[\"就是当达到扩容条件时会进行扩容\",{\"1\":{\"697\":1}}],[\"就是能在线性数据结构的两段\",{\"1\":{\"387\":1}}],[\"就是做了更高层次的抽象\",{\"1\":{\"374\":1}}],[\"就是应该优先考虑组合关系\",{\"1\":{\"365\":1}}],[\"就会导致到时候统计出来的次数会多一倍\",{\"1\":{\"3313\":1}}],[\"就会导致雪崩\",{\"1\":{\"1839\":1,\"4428\":1}}],[\"就会处于空闲状态\",{\"1\":{\"3076\":1,\"4330\":1}}],[\"就会将这段代码所属的同步锁消除掉\",{\"1\":{\"2854\":1,\"4108\":1}}],[\"就会将该命令写入到\",{\"1\":{\"2735\":1,\"5097\":1}}],[\"就会有大量的线程被阻塞住\",{\"1\":{\"2497\":1,\"4859\":1}}],[\"就会被阻塞\",{\"1\":{\"2496\":1,\"2555\":1,\"4858\":1,\"4917\":1}}],[\"就会在备份数据库之前先开启事务\",{\"1\":{\"2464\":1,\"4826\":1}}],[\"就会增加\",{\"1\":{\"2430\":1,\"4792\":1}}],[\"就会阻塞住所有的\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"就会触发kafka的rebalance机制\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"就会继续从上次消费到的offset来继续消费\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"就会删除一个最老的片段\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"就会进入拦截方法\",{\"1\":{\"978\":1,\"3995\":1}}],[\"就会变得非常麻烦\",{\"1\":{\"884\":1,\"3901\":1}}],[\"就会发现前后两次读到的数据是不一致的\",{\"1\":{\"2584\":1,\"4946\":1}}],[\"就会发现\",{\"1\":{\"361\":1}}],[\"就会看到如下标为蓝色的说明\",{\"1\":{\"339\":1}}],[\"就必须采取某种方式进行处理\",{\"1\":{\"250\":1,\"3646\":1}}],[\"就重写\",{\"1\":{\"219\":1,\"3613\":1}}],[\"就比如说\",{\"1\":{\"211\":1,\"3605\":1}}],[\"ok\",{\"1\":{\"3312\":1}}],[\"one\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"only\",{\"1\":{\"2722\":1,\"2733\":1,\"3043\":1,\"4297\":1,\"5084\":1,\"5095\":1}}],[\"oltp\",{\"1\":{\"2655\":1,\"5017\":1}}],[\"old\",{\"1\":{\"650\":1}}],[\"oldvalue\",{\"1\":{\"547\":2,\"549\":2}}],[\"oldcapacity\",{\"1\":{\"524\":2,\"525\":2}}],[\"open\",{\"1\":{\"2214\":1,\"2307\":1,\"5296\":1}}],[\"openai\",{\"1\":{\"1\":1}}],[\"opsf\",{\"1\":{\"2214\":1,\"2307\":1,\"5296\":1}}],[\"observer\",{\"1\":{\"1874\":1,\"1877\":1,\"1878\":1,\"4463\":1,\"4466\":1,\"4467\":1}}],[\"observer观察者\",{\"1\":{\"1871\":1,\"4460\":1}}],[\"obj\",{\"1\":{\"535\":2,\"622\":2,\"3815\":2}}],[\"objectmonitor对象\",{\"1\":{\"3004\":1,\"4258\":1}}],[\"objectfactory<\",{\"1\":{\"893\":1,\"3910\":1}}],[\"objectoutputstream\",{\"1\":{\"510\":1,\"513\":2}}],[\"object\",{\"1\":{\"317\":2,\"513\":1,\"612\":1,\"614\":3,\"622\":3,\"719\":1,\"724\":1,\"729\":1,\"760\":1,\"775\":1,\"781\":1,\"1024\":2,\"3030\":1,\"3031\":1,\"3705\":2,\"3805\":1,\"3807\":3,\"3815\":3,\"4284\":1,\"4285\":1,\"5200\":2}}],[\"osi\",{\"0\":{\"2222\":1,\"2315\":1,\"5304\":1},\"1\":{\"2223\":1,\"5305\":1}}],[\"ospf\",{\"1\":{\"2214\":3,\"2307\":3,\"5296\":3}}],[\"os\",{\"1\":{\"1158\":1,\"1267\":1,\"1326\":1,\"1435\":1,\"1494\":1,\"1603\":1,\"1662\":1,\"1771\":1,\"4569\":1,\"4678\":1}}],[\"o处理完毕时\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"o请求时\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"or\",{\"1\":{\"2443\":2,\"3043\":2,\"4297\":2,\"4805\":2}}],[\"oriented\",{\"1\":{\"806\":1,\"3823\":1}}],[\"order\",{\"1\":{\"510\":2,\"2664\":1,\"5026\":1}}],[\"oracle\",{\"1\":{\"395\":1,\"852\":1,\"3869\":1}}],[\"o\",{\"0\":{\"1133\":1,\"1301\":1,\"1469\":1,\"1637\":1,\"4544\":1,\"5580\":1},\"1\":{\"401\":2,\"402\":1,\"417\":1,\"1134\":1,\"1140\":1,\"1154\":3,\"1192\":1,\"1302\":1,\"1308\":1,\"1322\":3,\"1360\":1,\"1470\":1,\"1476\":1,\"1490\":3,\"1528\":1,\"1638\":1,\"1644\":1,\"1658\":3,\"1696\":1,\"2348\":1,\"2682\":3,\"2747\":1,\"3077\":4,\"3742\":1,\"4331\":4,\"4545\":1,\"4551\":1,\"4565\":3,\"4603\":1,\"4710\":1,\"5044\":3,\"5109\":1}}],[\"overflow\",{\"1\":{\"535\":1}}],[\"over\",{\"1\":{\"365\":1,\"1972\":1,\"1987\":1,\"2002\":1,\"2015\":1,\"2028\":1,\"2043\":1,\"2275\":1,\"5263\":1,\"5275\":1,\"5286\":1,\"5357\":1}}],[\"override\",{\"1\":{\"217\":1,\"1033\":1,\"3611\":1,\"5209\":1}}],[\"oom\",{\"1\":{\"3066\":1,\"3090\":1,\"3091\":1,\"3092\":1,\"4320\":1,\"4344\":1,\"4345\":1,\"4346\":1}}],[\"oop\",{\"1\":{\"365\":1,\"366\":1}}],[\"ood\",{\"1\":{\"352\":1}}],[\"outofboundsmsg\",{\"1\":{\"539\":1}}],[\"out\",{\"1\":{\"265\":1,\"271\":2,\"406\":2,\"510\":3,\"686\":2,\"691\":3,\"704\":8,\"1126\":1,\"1177\":1,\"1294\":1,\"1345\":1,\"1462\":1,\"1513\":1,\"1630\":1,\"1681\":1,\"2758\":1,\"2998\":1,\"3009\":1,\"4252\":1,\"4263\":1,\"4537\":1,\"4588\":1,\"5120\":1}}],[\"offset\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"3210\":3,\"3211\":2,\"3213\":3,\"4588\":1,\"5479\":3,\"5480\":2,\"5482\":3}}],[\"off\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4588\":1}}],[\"offer\",{\"1\":{\"381\":1,\"406\":2,\"505\":1}}],[\"of\",{\"1\":{\"217\":1,\"510\":3,\"513\":2,\"775\":1,\"2277\":1,\"2758\":1,\"3043\":4,\"3611\":1,\"4297\":4,\"5120\":1,\"5359\":1}}],[\"实时记录用户数据\",{\"1\":{\"3198\":1,\"5467\":1}}],[\"实习生的日常工作安排\",{\"1\":{\"3152\":1,\"5432\":1}}],[\"实习\",{\"0\":{\"3108\":1}}],[\"实用性太差\",{\"1\":{\"2812\":1,\"5174\":1}}],[\"实现思路\",{\"1\":{\"3264\":1,\"5533\":1}}],[\"实现热数据的计算\",{\"1\":{\"3199\":1,\"5468\":1}}],[\"实现热部署的方式\",{\"0\":{\"928\":1,\"3945\":1}}],[\"实现app后端\",{\"1\":{\"3195\":1,\"5464\":1}}],[\"实现服务注册中的api请求路由\",{\"1\":{\"3194\":1,\"5463\":1}}],[\"实现共享状态的传播\",{\"1\":{\"2911\":1,\"4165\":1}}],[\"实现的\",{\"1\":{\"2821\":2,\"2822\":2,\"2915\":1,\"4075\":2,\"4076\":2,\"4169\":1}}],[\"实现的时候\",{\"1\":{\"524\":1}}],[\"实现一致性读\",{\"1\":{\"2506\":1,\"4868\":1}}],[\"实现成\",{\"1\":{\"1256\":1,\"1424\":1,\"1592\":1,\"1760\":1,\"4667\":1}}],[\"实现方案相比\",{\"1\":{\"1207\":1,\"1375\":1,\"1543\":1,\"1711\":1,\"4618\":1}}],[\"实现方式如下\",{\"1\":{\"788\":1}}],[\"实现自定义插件\",{\"1\":{\"976\":1,\"3993\":1}}],[\"实现全局异常处理\",{\"0\":{\"914\":1,\"3931\":1}}],[\"实现原理与hashmap类似\",{\"1\":{\"668\":1}}],[\"实现原理上\",{\"1\":{\"475\":1,\"802\":1}}],[\"实现类\",{\"1\":{\"599\":1,\"602\":1,\"3792\":1,\"3795\":1}}],[\"实现较复杂\",{\"1\":{\"582\":1,\"3775\":1}}],[\"实现代码如下\",{\"1\":{\"580\":1,\"3773\":1}}],[\"实现语句是\",{\"1\":{\"514\":1}}],[\"实现了自媒体管理员登录功能\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"实现了用户通过app端登录功能\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性\",{\"1\":{\"1863\":1,\"4452\":1}}],[\"实现了某个接口\",{\"1\":{\"807\":1,\"3824\":1}}],[\"实现了map接口\",{\"1\":{\"668\":1}}],[\"实现了\",{\"1\":{\"612\":1,\"2330\":1,\"2693\":1,\"2828\":1,\"3805\":1,\"4082\":1,\"4692\":1,\"5055\":1}}],[\"实现了优先级队列\",{\"1\":{\"492\":1}}],[\"实现了双亲委派机制\",{\"1\":{\"214\":1,\"3608\":1}}],[\"实现\",{\"1\":{\"351\":1,\"382\":1,\"652\":1,\"979\":1,\"2363\":1,\"3272\":1,\"3996\":1,\"4725\":1,\"5541\":1}}],[\"实际项目经验都是人工智能相关的\",{\"1\":{\"3164\":1,\"5444\":1}}],[\"实际项目是自学的\",{\"1\":{\"3164\":1,\"5444\":1}}],[\"实际调用的是\",{\"1\":{\"623\":1,\"3816\":1}}],[\"实际会调用到实现invocationhandler\",{\"1\":{\"615\":1,\"3808\":1}}],[\"实际应用场景非常非常少\",{\"1\":{\"601\":1,\"3794\":1}}],[\"实际上调用这两个方法的时候\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"实际上域名最后还有一个点\",{\"1\":{\"2287\":1,\"5369\":1}}],[\"实际上这是一个非常具有误导性质的说法\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"实际上最后就会使用到\",{\"1\":{\"1194\":1,\"1362\":1,\"1530\":1,\"1698\":1,\"4605\":1}}],[\"实际上\",{\"1\":{\"338\":1,\"351\":1,\"364\":1,\"2804\":1,\"5166\":1}}],[\"实际的文章内容\",{\"1\":{\"24\":1,\"3423\":1}}],[\"实例化\",{\"1\":{\"810\":1,\"3827\":1}}],[\"实例化对象\",{\"1\":{\"327\":1,\"3715\":1}}],[\"实例\",{\"1\":{\"306\":1,\"3694\":1}}],[\"实例会在试图亲自查找类或资源之前\",{\"1\":{\"225\":1,\"3619\":1}}],[\"用着也还行\",{\"1\":{\"5279\":1}}],[\"用了缓存的\",{\"1\":{\"1963\":1,\"4069\":1}}],[\"用来做流量控制\",{\"1\":{\"2120\":1}}],[\"用来解决乱序问题等\",{\"1\":{\"2119\":1}}],[\"用来解决丢包的问题\",{\"1\":{\"2100\":1}}],[\"用来解决网络包乱序问题\",{\"1\":{\"2099\":1}}],[\"用来保证集群中存在过半的机器能够和\",{\"1\":{\"1866\":1,\"4455\":1}}],[\"用来衡量hashmap满的程度\",{\"1\":{\"678\":1}}],[\"用套接字中的相关函数来完成通信过程\",{\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"4542\":1}}],[\"用\",{\"1\":{\"652\":1}}],[\"用法上\",{\"1\":{\"475\":1}}],[\"用算法描述中的术语\",{\"1\":{\"470\":1}}],[\"用于完成某个功能的一个过程\",{\"1\":{\"2879\":1,\"4133\":1}}],[\"用于判断内存中某个值是否为预期值\",{\"1\":{\"2862\":1,\"4116\":1}}],[\"用于保证可靠性和流量控制维护的某些状态信息\",{\"1\":{\"2116\":1}}],[\"用于处理连接的响应事件\",{\"1\":{\"1261\":1,\"1429\":1,\"1597\":1,\"1765\":1,\"4672\":1}}],[\"用于多进程对共享数据的访问\",{\"1\":{\"1129\":1,\"1297\":1,\"1465\":1,\"1633\":1,\"4540\":1}}],[\"用于通知接收进程某个事件已经发生\",{\"1\":{\"1127\":1,\"1295\":1,\"1463\":1,\"1631\":1,\"4538\":1}}],[\"用于具有亲缘关系的父子进程间或者兄弟进程之间的通信\",{\"1\":{\"1125\":1,\"1293\":1,\"1461\":1,\"1629\":1,\"4536\":1}}],[\"用于等待多个线程到达某个点再一起继续执行\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4528\":1}}],[\"用于唯一标记一个消息\",{\"1\":{\"1063\":1,\"5239\":1}}],[\"用于获取enableautoconfiguration注解中的\",{\"1\":{\"903\":1,\"3920\":1}}],[\"用于元素间的链接\",{\"1\":{\"717\":1}}],[\"用于调用原始方法\",{\"1\":{\"622\":1,\"3815\":1}}],[\"用于拦截增强被代理类的方法\",{\"1\":{\"621\":1,\"3814\":1}}],[\"用于加载代理对象\",{\"1\":{\"612\":1,\"3805\":1}}],[\"用于统计类加载器相关的信息\",{\"1\":{\"229\":1,\"3623\":1}}],[\"用于实现类加载过程中的加载这一步\",{\"1\":{\"199\":1,\"3593\":1}}],[\"用户登录时\",{\"1\":{\"3377\":1}}],[\"用户登录成功\",{\"1\":{\"3236\":1,\"5505\":1}}],[\"用户密码\",{\"1\":{\"3374\":1}}],[\"用户输入的密码\",{\"1\":{\"3380\":1}}],[\"用户输入\",{\"1\":{\"3372\":1,\"3378\":1}}],[\"用户注册时\",{\"1\":{\"3371\":1}}],[\"用户的密码也不会被泄漏\",{\"1\":{\"3345\":1,\"3350\":1}}],[\"用户的密码就被泄漏了\",{\"1\":{\"3339\":1,\"3344\":1}}],[\"用户再次进入网关开始访问\",{\"1\":{\"3237\":1,\"5506\":1}}],[\"用户以后每次向后端发请求都在\",{\"1\":{\"3226\":1,\"5495\":1}}],[\"用户进入网关开始登陆\",{\"1\":{\"3224\":1,\"3235\":1,\"5493\":1,\"5504\":1}}],[\"用户向服务器发送用户名\",{\"1\":{\"3224\":1,\"5493\":1}}],[\"用户向服务器发送请求\",{\"1\":{\"817\":1,\"3834\":1}}],[\"用户历史记录功能\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"用户只能看到该事务创建\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"用户只能调用\",{\"1\":{\"382\":1}}],[\"用户\",{\"1\":{\"2568\":4,\"4930\":4}}],[\"用户消息通过\",{\"1\":{\"2114\":1}}],[\"用户是使用\",{\"1\":{\"1782\":1,\"4371\":1}}],[\"用户可以方便地创建和使用容器\",{\"1\":{\"1778\":1,\"4367\":1}}],[\"用户可通过覆写该方法\",{\"1\":{\"229\":1,\"3623\":1}}],[\"用户还可以加入自定义的类加载器来进行拓展\",{\"1\":{\"211\":1,\"3605\":1}}],[\"下午6\",{\"1\":{\"3152\":1,\"5432\":1}}],[\"下次我要是重启\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"下的\",{\"1\":{\"984\":1,\"4001\":1}}],[\"下的meta\",{\"1\":{\"907\":1,\"3924\":1}}],[\"下的所有\",{\"1\":{\"210\":1,\"3604\":1}}],[\"下图是它的总体架构图\",{\"1\":{\"1780\":1,\"4369\":1}}],[\"下图中的那些null节点才是叶子节点\",{\"1\":{\"424\":1,\"3749\":1}}],[\"下图展示的各种类加载器之间的层次关系被称为类加载器的\",{\"1\":{\"226\":1,\"3620\":1}}],[\"下面这一段代码\",{\"1\":{\"3309\":1}}],[\"下面这张图可以加深你对线程池中各个参数的相互关系的理解\",{\"1\":{\"3053\":1,\"4307\":1}}],[\"下面的\",{\"1\":{\"2978\":1,\"4232\":1}}],[\"下面的内容整理自\",{\"1\":{\"2358\":1,\"4720\":1}}],[\"下面用一个小示例解释一下\",{\"1\":{\"2862\":1,\"4116\":1}}],[\"下面我先来介绍一下\",{\"1\":{\"1884\":1,\"4473\":1}}],[\"下面我们通过一段代码来看看局部性原理\",{\"1\":{\"1094\":1}}],[\"下面就谈一谈\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4574\":1}}],[\"下面是几种常见的线程同步的方式\",{\"1\":{\"1113\":1,\"1281\":1,\"1449\":1,\"1617\":1,\"4524\":1}}],[\"下面举例来说明分配的效果\",{\"1\":{\"1051\":1,\"5227\":1}}],[\"下面\",{\"1\":{\"372\":1}}],[\"下标越界异常\",{\"1\":{\"244\":1,\"3640\":1}}],[\"下一篇\",{\"1\":{\"19\":1,\"3418\":1}}],[\"以提升效率及节省成本\",{\"1\":{\"3202\":1,\"5471\":1}}],[\"以保证冷数据\",{\"1\":{\"3302\":1,\"5571\":1}}],[\"以保证用户热数据高扩展和高性能指标\",{\"1\":{\"3201\":1,\"5470\":1}}],[\"以保证上层数据查询的高性能\",{\"1\":{\"3200\":1,\"5469\":1}}],[\"以保证操作最大程度的独占性\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"以保证任意时间里只有一个线程在操作共享资源\",{\"1\":{\"1250\":1,\"1418\":1,\"1586\":1,\"1754\":1,\"4661\":1}}],[\"以降低短时间内大量锁请求\",{\"1\":{\"2853\":1,\"4107\":1}}],[\"以网络带宽资源\",{\"1\":{\"2660\":1,\"5022\":1}}],[\"以后\",{\"1\":{\"2657\":1,\"5019\":1}}],[\"以此实现非锁定读\",{\"1\":{\"2632\":1,\"4994\":1}}],[\"以\",{\"1\":{\"2442\":1,\"4804\":1}}],[\"以生成出一个最好的执行计划\",{\"1\":{\"2430\":1,\"4792\":1}}],[\"以单播的方式\",{\"1\":{\"2254\":1,\"5336\":1}}],[\"以前所有的代码都放在同一个工程中\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"以线程为例\",{\"1\":{\"1257\":1,\"1425\":1,\"1593\":1,\"1761\":1,\"4668\":1}}],[\"以免错失读写的机会\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"以实现consumer之间的分区分配\",{\"1\":{\"1028\":1,\"5204\":1}}],[\"以较小的那个为准\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"以及其他用户信息\",{\"1\":{\"3372\":1}}],[\"以及这些密码对应的md5值\",{\"1\":{\"3352\":1}}],[\"以及控制流速控制和熔断处理都是常用的架构手段\",{\"1\":{\"3194\":1,\"5463\":1}}],[\"以及\",{\"1\":{\"1776\":1,\"1788\":1,\"3323\":1,\"4365\":1,\"4377\":1,\"5574\":1}}],[\"以及actuator\",{\"1\":{\"955\":1,\"3972\":1}}],[\"以及被\",{\"1\":{\"208\":1,\"3602\":1}}],[\"以非事务方式运行\",{\"1\":{\"865\":1,\"866\":1,\"3882\":1,\"3883\":1}}],[\"以上的隔离级别\",{\"1\":{\"2604\":1,\"4966\":1}}],[\"以上两个topic的情况\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"以上方法得到的int的hash值\",{\"1\":{\"782\":1}}],[\"以上区别基于jdk1\",{\"1\":{\"662\":1}}],[\"以下是java\",{\"1\":{\"759\":1}}],[\"以下称为异常表\",{\"1\":{\"273\":1,\"3661\":1}}],[\"以让新版本的开发者不再允许使用这个类\",{\"1\":{\"369\":1}}],[\"以满足自己的特殊需求\",{\"1\":{\"211\":1,\"3605\":1}}],[\"以便于告知方法调用者此方法有异常\",{\"1\":{\"256\":1,\"3652\":1}}],[\"以便\",{\"1\":{\"29\":1,\"3428\":1}}],[\"包的基石\",{\"1\":{\"2901\":1,\"4155\":1}}],[\"包头的\",{\"1\":{\"2175\":1}}],[\"包长度\",{\"1\":{\"2169\":2}}],[\"包总量较少的通信\",{\"1\":{\"2163\":1}}],[\"包之外该位必须设置为\",{\"1\":{\"2102\":1}}],[\"包传给接收端主机\",{\"1\":{\"2099\":1}}],[\"包装器设计模式\",{\"1\":{\"834\":1,\"3851\":1}}],[\"包括责任链\",{\"1\":{\"577\":1,\"3770\":1}}],[\"包括适配器\",{\"1\":{\"577\":1,\"3770\":1}}],[\"包括⼯⼚\",{\"1\":{\"577\":1,\"3770\":1}}],[\"包括\",{\"1\":{\"505\":1,\"818\":1,\"2116\":1,\"3835\":1}}],[\"包括运行时异常\",{\"1\":{\"253\":1,\"3649\":1}}],[\"包和类以及被\",{\"1\":{\"209\":1,\"3603\":1}}],[\"包和类\",{\"1\":{\"208\":1,\"210\":1,\"3602\":1,\"3604\":1}}],[\"包含三个东西\",{\"1\":{\"2117\":1}}],[\"包含\",{\"1\":{\"46\":1,\"3445\":1}}],[\"并具有唯一性的字符串\",{\"1\":{\"3308\":1}}],[\"并用来生成输出文本\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"并从中获取用户相关信息\",{\"1\":{\"3227\":1,\"5496\":1}}],[\"并结合spring\",{\"1\":{\"3195\":1,\"5464\":1}}],[\"并调用其模板方法\",{\"1\":{\"2927\":1,\"4181\":1}}],[\"并重新计算想要修改的新值\",{\"1\":{\"2872\":1,\"4126\":1}}],[\"并重写指定的方法\",{\"1\":{\"2927\":1,\"4181\":1}}],[\"并重写\",{\"1\":{\"621\":1,\"3814\":1}}],[\"并撤销偏向锁\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"并把参数中的引号作为转义字符\",{\"1\":{\"2637\":1,\"4999\":1}}],[\"并提交了事务\",{\"1\":{\"2584\":1,\"2589\":1,\"4946\":1,\"4951\":1}}],[\"并允许数据重复和\",{\"1\":{\"2387\":1,\"4749\":1}}],[\"并检查查询分组的接收\",{\"1\":{\"2243\":1,\"5325\":1}}],[\"并将该节点设置为头结点\",{\"1\":{\"2911\":1,\"4165\":1}}],[\"并将其广播到所在的局域网中\",{\"1\":{\"2241\":1,\"5323\":1}}],[\"并将\",{\"1\":{\"2239\":1,\"5321\":1}}],[\"并将投票信息广播出去\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"并与其进行数据同步\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"并以一系列简单易用的接口提供给用户使用\",{\"1\":{\"1856\":1,\"4445\":1}}],[\"并解决网络服务差时带来的风险\",{\"1\":{\"1813\":1,\"4402\":1}}],[\"并有坚实的服务边界\",{\"1\":{\"1809\":1,\"4398\":1}}],[\"并有利于未来的可拓展性和可维护性\",{\"1\":{\"806\":1,\"3823\":1}}],[\"并通过镜像管理驱动\",{\"1\":{\"1785\":1,\"4374\":1}}],[\"并创建一个\",{\"1\":{\"1228\":1,\"1243\":1,\"1261\":1,\"1396\":1,\"1411\":1,\"1429\":1,\"1564\":1,\"1579\":1,\"1597\":1,\"1732\":1,\"1747\":1,\"1765\":1,\"4639\":1,\"4654\":1,\"4672\":1}}],[\"并发处理\",{\"1\":{\"3085\":1,\"4339\":1}}],[\"并发编程的艺术\",{\"1\":{\"3035\":1,\"4289\":1}}],[\"并发编程j\",{\"1\":{\"2901\":1,\"4155\":1}}],[\"并发包中的\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"并发访问共享资源\",{\"1\":{\"2910\":1,\"4164\":1}}],[\"并发访问数据库时\",{\"1\":{\"843\":1,\"3860\":1}}],[\"并发原语\",{\"1\":{\"2862\":1,\"4116\":1}}],[\"并发事务时可能发生的现象也会不同\",{\"1\":{\"2599\":1,\"4961\":1}}],[\"并发给本地\",{\"1\":{\"2297\":1,\"5379\":1}}],[\"并发送请求给后者\",{\"1\":{\"1782\":1,\"4371\":1}}],[\"并发\",{\"1\":{\"1157\":1,\"1325\":1,\"1493\":1,\"1661\":1,\"4568\":1}}],[\"并发多个进程\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"并发读写\",{\"1\":{\"1018\":1,\"5194\":1}}],[\"并打开一个新文件\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"并做简单的配置即可\",{\"1\":{\"939\":1,\"3956\":1}}],[\"并在其\",{\"1\":{\"2104\":1}}],[\"并在自己的事务中运行\",{\"1\":{\"858\":1,\"3875\":1}}],[\"并在具体⼦⼯⼚中实现新加产品的创建\",{\"1\":{\"592\":1,\"3785\":1}}],[\"并处理相应的业务逻辑\",{\"1\":{\"814\":1,\"3831\":1}}],[\"并非\",{\"1\":{\"808\":1,\"3825\":1}}],[\"并保持其输入顺序\",{\"1\":{\"802\":1}}],[\"并试着分析下不同的原因\",{\"1\":{\"759\":1}}],[\"并想其中put了一个元素\",{\"1\":{\"687\":1}}],[\"并加载到\",{\"1\":{\"599\":1,\"605\":1,\"3792\":1,\"3798\":1}}],[\"并没有收到它的\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"并没有做同步处理\",{\"1\":{\"565\":1}}],[\"并没有严格的卡定某个平衡因子来维持绝对平衡\",{\"1\":{\"419\":1,\"3744\":1}}],[\"并维护了长度\",{\"1\":{\"475\":1}}],[\"并且双方都要保存好密钥\",{\"1\":{\"3398\":1}}],[\"并且在数学建模比赛中担任队长并获得了陕西省一等奖\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"并且在需要修改的时候拿到实例修改其参数即可\",{\"1\":{\"3096\":1,\"4350\":1}}],[\"并且不能接受数据丢失\",{\"1\":{\"3283\":1,\"5552\":1}}],[\"并且保持锁的时间段\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"并且将共享资源设置为锁定状态\",{\"1\":{\"2915\":1,\"4169\":1}}],[\"并且是\",{\"1\":{\"2901\":1,\"4155\":1}}],[\"并且是固定不变的\",{\"1\":{\"2151\":1}}],[\"并且当前标志是否等于预期标志\",{\"1\":{\"2891\":1,\"4145\":1}}],[\"并且原语的执行必须是连续的\",{\"1\":{\"2879\":1,\"4133\":1}}],[\"并且每个元素的值小于\",{\"1\":{\"2714\":1,\"5076\":1}}],[\"并且小数点要占用一个字节\",{\"1\":{\"2650\":1,\"5012\":1}}],[\"并且锁定记录本身\",{\"1\":{\"2542\":1,\"2552\":1,\"4904\":1,\"4914\":1}}],[\"并且主键不能为\",{\"1\":{\"2379\":1,\"4741\":1}}],[\"并且多数浏览器在2015年底就支持了\",{\"1\":{\"1971\":1,\"1986\":1,\"2001\":1,\"2014\":1,\"2027\":1,\"2042\":1,\"5262\":1,\"5285\":1}}],[\"并且多次监测没有恢复的迹象\",{\"1\":{\"1835\":1,\"4424\":1}}],[\"并且自己的\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"并且返回结果\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"并且父进程还得知道子进程要将数据发送给哪个客户端\",{\"1\":{\"1252\":1,\"1420\":1,\"1588\":1,\"1756\":1,\"4663\":1}}],[\"并且c0订阅t0\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"并且其缓存查询到的对象都是通过序列化或者反序列化克隆的\",{\"1\":{\"997\":1,\"4014\":1}}],[\"并且也不需要我们必须实现接口\",{\"1\":{\"604\":1,\"3797\":1}}],[\"并且可以不需要针对每个⽬标类都创建⼀个代理类\",{\"1\":{\"598\":1,\"3791\":1}}],[\"并且\",{\"1\":{\"340\":1,\"400\":1,\"2114\":1,\"2330\":1,\"2350\":1,\"2531\":1,\"2650\":1,\"2681\":1,\"2756\":1,\"4692\":1,\"4712\":1,\"4893\":1,\"5012\":1,\"5043\":1,\"5118\":1}}],[\"并且没有父级\",{\"1\":{\"208\":1,\"3602\":1}}],[\"并不存在互斥关系\",{\"1\":{\"2550\":1,\"4912\":1}}],[\"并不需要等语句执行后才释放\",{\"1\":{\"2525\":1,\"4887\":1}}],[\"并不冲突\",{\"1\":{\"2495\":1,\"4857\":1}}],[\"并不会使用\",{\"1\":{\"2606\":1,\"4968\":1}}],[\"并不会停止匹配\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"并不会一次性加载所有的类\",{\"1\":{\"204\":1,\"3598\":1}}],[\"并不清楚目的地的\",{\"1\":{\"2238\":1,\"5320\":1}}],[\"并不是存在\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"并不是彻底避免\",{\"1\":{\"2606\":1,\"4968\":1}}],[\"并不是一种单独的索引类型\",{\"1\":{\"2392\":1,\"2401\":1,\"4754\":1,\"4763\":1}}],[\"并不是\",{\"1\":{\"1961\":1,\"4067\":1}}],[\"并不对整个数据进行锁定\",{\"1\":{\"654\":1}}],[\"并不能直接交给底层操作系统去执行\",{\"1\":{\"182\":1,\"3576\":1}}],[\"n+1\",{\"1\":{\"3076\":1,\"4330\":1}}],[\"nginx\",{\"1\":{\"1214\":1,\"1382\":1,\"1550\":1,\"1718\":1,\"4625\":1}}],[\"nio\",{\"1\":{\"1193\":1,\"1361\":1,\"1529\":1,\"1697\":1,\"4604\":1}}],[\"npe\",{\"1\":{\"884\":1,\"3901\":1}}],[\"nonfairsync\",{\"1\":{\"2830\":1,\"2832\":1,\"4084\":1,\"4086\":1}}],[\"none\",{\"1\":{\"1056\":1,\"1065\":2,\"2267\":1,\"5232\":1,\"5241\":2,\"5349\":1}}],[\"non\",{\"1\":{\"1024\":1,\"2401\":1,\"4763\":1,\"5200\":1}}],[\"no\",{\"1\":{\"1024\":1,\"2622\":1,\"2768\":1,\"4984\":1,\"5130\":1,\"5200\":1}}],[\"notify等方法\",{\"1\":{\"3005\":1,\"4259\":1}}],[\"notify等方法也依赖于monitor对象\",{\"1\":{\"3005\":1,\"4259\":1}}],[\"notify\",{\"1\":{\"1118\":1,\"1286\":1,\"1454\":1,\"1622\":1,\"4529\":1}}],[\"not\",{\"1\":{\"865\":1,\"3290\":1,\"3882\":1,\"5559\":1}}],[\"node\",{\"1\":{\"404\":1,\"2916\":1,\"2924\":3,\"4170\":1,\"4178\":3}}],[\"number\",{\"1\":{\"2622\":2,\"3043\":3,\"4297\":3,\"4984\":2}}],[\"numpartitionsperconsumer\",{\"1\":{\"1033\":3,\"5209\":3}}],[\"numpartitionsfortopic\",{\"1\":{\"1033\":5,\"5209\":5}}],[\"numpartitions\",{\"1\":{\"1024\":3,\"5200\":3}}],[\"nummoved\",{\"1\":{\"547\":3,\"549\":3}}],[\"nullpointerexception\",{\"1\":{\"3043\":2,\"4297\":2}}],[\"null值\",{\"1\":{\"458\":1,\"459\":1}}],[\"null节点的父节点在红黑树里不将其看作叶子节点\",{\"1\":{\"424\":1,\"3749\":1}}],[\"null\",{\"1\":{\"208\":1,\"229\":4,\"265\":6,\"293\":1,\"547\":1,\"549\":1,\"581\":4,\"582\":1,\"781\":1,\"1024\":3,\"1033\":1,\"2371\":1,\"2373\":1,\"2379\":1,\"2380\":1,\"2386\":1,\"2387\":1,\"2420\":4,\"3025\":2,\"3026\":1,\"3028\":1,\"3043\":6,\"3602\":1,\"3623\":4,\"3681\":1,\"3774\":4,\"3775\":1,\"4279\":2,\"4280\":1,\"4282\":1,\"4297\":6,\"4733\":1,\"4735\":1,\"4741\":1,\"4742\":1,\"4748\":1,\"4749\":1,\"4782\":4,\"5200\":3,\"5209\":1}}],[\"n为节点数\",{\"1\":{\"799\":1}}],[\"n为数组内容长度\",{\"1\":{\"471\":1}}],[\"n为元素个数\",{\"1\":{\"447\":1}}],[\"n\",{\"1\":{\"401\":1,\"406\":3,\"419\":2,\"433\":1,\"434\":1,\"447\":1,\"471\":1,\"472\":1,\"473\":1,\"477\":1,\"478\":1,\"480\":1,\"485\":1,\"486\":1,\"494\":2,\"495\":1,\"632\":1,\"638\":2,\"778\":2,\"799\":1,\"1033\":2,\"2682\":1,\"3076\":1,\"3320\":1,\"3724\":1,\"3730\":2,\"3744\":2,\"3758\":1,\"3759\":1,\"4330\":1,\"5044\":1,\"5209\":2}}],[\"next\",{\"0\":{\"2551\":1,\"4913\":1},\"1\":{\"2330\":1,\"2542\":1,\"2552\":1,\"2553\":1,\"2554\":3,\"2555\":2,\"2558\":1,\"2609\":3,\"2916\":1,\"2919\":1,\"4170\":1,\"4173\":1,\"4692\":1,\"4904\":1,\"4914\":1,\"4915\":1,\"4916\":3,\"4917\":2,\"4920\":1,\"4971\":3}}],[\"nextint\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"nextvalue\",{\"1\":{\"1024\":5,\"5200\":5}}],[\"nested\",{\"1\":{\"868\":1,\"3885\":1}}],[\"never\",{\"1\":{\"866\":1,\"3883\":1}}],[\"netty\",{\"1\":{\"1213\":1,\"1381\":1,\"1549\":1,\"1717\":1,\"4624\":1}}],[\"networkdriver\",{\"1\":{\"1786\":1,\"1788\":1,\"4375\":1,\"4377\":1}}],[\"network\",{\"0\":{\"5583\":1},\"1\":{\"1158\":1,\"1267\":1,\"1326\":1,\"1435\":1,\"1494\":1,\"1603\":1,\"1662\":1,\"1771\":1,\"4569\":1,\"4678\":1}}],[\"net\",{\"1\":{\"328\":1,\"412\":1,\"629\":1,\"658\":1,\"970\":1,\"1003\":1,\"1056\":1,\"1065\":1,\"1079\":1,\"2638\":1,\"2817\":1,\"2833\":1,\"2995\":1,\"3401\":2,\"3633\":1,\"3716\":1,\"3721\":1,\"3987\":1,\"4020\":1,\"4087\":1,\"4249\":1,\"5000\":1,\"5179\":1,\"5232\":1,\"5241\":1,\"5255\":1}}],[\"newproxyinstance\",{\"1\":{\"611\":1,\"612\":1,\"615\":1,\"3804\":1,\"3805\":1,\"3808\":1}}],[\"newcapacity\",{\"1\":{\"524\":1,\"525\":1}}],[\"newinstance\",{\"1\":{\"299\":1,\"313\":1,\"314\":2,\"316\":2,\"317\":1,\"318\":1,\"3687\":1,\"3701\":1,\"3702\":2,\"3704\":2,\"3705\":1,\"3706\":1}}],[\"new\",{\"1\":{\"260\":1,\"263\":2,\"265\":2,\"271\":1,\"288\":1,\"291\":1,\"293\":2,\"307\":1,\"342\":1,\"349\":1,\"373\":1,\"376\":2,\"404\":1,\"406\":2,\"510\":1,\"531\":2,\"535\":1,\"539\":1,\"549\":1,\"577\":1,\"581\":2,\"686\":1,\"691\":3,\"704\":1,\"864\":1,\"877\":3,\"1024\":1,\"1033\":2,\"1104\":1,\"1272\":1,\"1440\":1,\"1608\":1,\"2832\":2,\"3041\":14,\"3043\":5,\"3656\":1,\"3659\":2,\"3676\":1,\"3679\":1,\"3681\":2,\"3695\":1,\"3770\":1,\"3774\":2,\"3881\":1,\"3894\":3,\"4086\":2,\"4295\":14,\"4297\":5,\"4515\":1,\"5200\":1,\"5209\":2}}],[\"nacos作为项目中的注册中心和配置中心\",{\"1\":{\"3196\":1,\"5465\":1}}],[\"nacos\",{\"1\":{\"1918\":1,\"4507\":1}}],[\"nanotime\",{\"1\":{\"229\":2,\"3623\":2}}],[\"named\",{\"1\":{\"1126\":1,\"1294\":1,\"1462\":1,\"1630\":1,\"4537\":1}}],[\"namespace\",{\"1\":{\"984\":2,\"1776\":1,\"4001\":2,\"4365\":1}}],[\"name\",{\"1\":{\"214\":2,\"215\":1,\"217\":1,\"218\":2,\"229\":6,\"321\":1,\"323\":2,\"2411\":2,\"2434\":2,\"3608\":2,\"3609\":1,\"3611\":1,\"3612\":2,\"3623\":6,\"3709\":2,\"3711\":2,\"4773\":2,\"4796\":2}}],[\"native\",{\"1\":{\"181\":1,\"182\":1,\"3575\":1,\"3576\":1}}],[\"通信双方的主机之间就可以相互交换\",{\"1\":{\"2105\":1}}],[\"通知\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"通篇全文下来大家也可以看到\",{\"1\":{\"898\":1,\"3915\":1}}],[\"通常是因为缓存中的那份数据已经过期\",{\"1\":{\"2794\":1,\"2801\":1,\"2815\":1,\"5156\":1,\"5163\":1,\"5177\":1}}],[\"通常子查询的结果集会被存储到临时表中\",{\"1\":{\"2665\":1,\"5027\":1}}],[\"通常子查询在\",{\"1\":{\"2664\":1,\"5026\":1}}],[\"通常使用搜索引擎如\",{\"1\":{\"2365\":1,\"2366\":1,\"2376\":1,\"4727\":1,\"4728\":1,\"4738\":1}}],[\"通常情况下\",{\"1\":{\"2333\":1,\"3020\":1,\"4274\":1,\"4695\":1}}],[\"通常情况下也不会用到该级别\",{\"1\":{\"856\":1,\"3873\":1}}],[\"通常被用于实现诸如数据发布\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"通常被有经验的⾯向对象的软件开发⼈员所采⽤\",{\"1\":{\"575\":1,\"3768\":1}}],[\"通常不会犯糊涂\",{\"1\":{\"359\":1}}],[\"通常表示为\",{\"1\":{\"208\":1,\"3602\":1}}],[\"通过互斥来保证数据的一致性\",{\"1\":{\"3288\":1,\"5557\":1}}],[\"通过偏移量\",{\"1\":{\"3210\":1,\"5479\":1}}],[\"通过kafkastream流式计算最新的数据\",{\"1\":{\"3198\":1,\"5467\":1}}],[\"通过key的hash对分区取模\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"通过用户的行为\",{\"1\":{\"3198\":1,\"5467\":1}}],[\"通过threadpoolexecutor构造函数来创建\",{\"1\":{\"3040\":1,\"4294\":1}}],[\"通过重复利用已创建的线程降低线程创建和销毁造成的消耗\",{\"1\":{\"3036\":1,\"4290\":1}}],[\"通过上面这些内容\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"通过该\",{\"1\":{\"3011\":1,\"4265\":1}}],[\"通过实现不同的方法\",{\"1\":{\"2981\":1,\"4235\":1}}],[\"通过实例化对象获取该实例的\",{\"1\":{\"306\":1,\"3694\":1}}],[\"通过线程创建节点加入同步队列的队尾\",{\"1\":{\"2923\":1,\"4177\":1}}],[\"通过自旋方式来获取锁\",{\"1\":{\"2845\":1,\"4099\":1}}],[\"通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中\",{\"1\":{\"2782\":1,\"5144\":1}}],[\"通过数据行的\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"通过加读写锁的方式来避免并行访问\",{\"1\":{\"2612\":1,\"4974\":1}}],[\"通过二级索引\",{\"1\":{\"2383\":1,\"4745\":1}}],[\"通过哈希算法\",{\"1\":{\"2349\":1,\"4711\":1}}],[\"通过键\",{\"1\":{\"2348\":1,\"4710\":1}}],[\"通过其\",{\"1\":{\"1881\":1,\"4470\":1}}],[\"通过feign以及java的动态代理机制\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"通过spring\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"通过网络管理驱动\",{\"1\":{\"1786\":1,\"4375\":1}}],[\"通过使用\",{\"1\":{\"1173\":1,\"1341\":1,\"1509\":1,\"1677\":1,\"4584\":1}}],[\"通过回调函数内核会将其加入到这个就绪事件列表中\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"通过两个方面\",{\"1\":{\"1139\":1,\"1307\":1,\"1475\":1,\"1643\":1,\"4550\":1}}],[\"通过通知操作的方式来保持多线程同步\",{\"1\":{\"1118\":1,\"1286\":1,\"1454\":1,\"1622\":1,\"4529\":1}}],[\"通过count来进行查询总条数的限制\",{\"1\":{\"968\":1,\"3985\":1}}],[\"通过class对象调用\",{\"1\":{\"318\":1,\"3706\":1}}],[\"通过page对象作为分页依据\",{\"1\":{\"967\":1,\"3984\":1}}],[\"通过这种依赖关系\",{\"1\":{\"929\":1,\"3946\":1}}],[\"通过hashcode\",{\"1\":{\"782\":1}}],[\"通过继承方式实现代理\",{\"1\":{\"619\":1,\"3812\":1}}],[\"通过类之间不同通信⽅式实现不同⾏为\",{\"1\":{\"577\":1,\"3770\":1}}],[\"通过类和接⼝间的继承和引⽤实现创建复杂结构的对象\",{\"1\":{\"577\":1,\"3770\":1}}],[\"通过类的全限定名获取该类的\",{\"1\":{\"308\":1,\"3696\":1}}],[\"通过比较其他方法\",{\"1\":{\"552\":1}}],[\"通过任意一条从根到叶子简单路径上颜色的约束\",{\"1\":{\"421\":1,\"3746\":1}}],[\"通过构造器去实例化对象\",{\"1\":{\"318\":1,\"3706\":1}}],[\"通过反射消除工厂中的多个分支\",{\"1\":{\"327\":1,\"3715\":1}}],[\"通过反射构造一个类的实例方式有2种\",{\"1\":{\"312\":1,\"3700\":1}}],[\"通过反射\",{\"1\":{\"297\":1,\"3685\":1}}],[\"通过\",{\"1\":{\"33\":1,\"42\":1,\"314\":1,\"317\":1,\"900\":2,\"934\":1,\"1140\":1,\"1184\":1,\"1247\":1,\"1308\":1,\"1352\":1,\"1415\":1,\"1476\":1,\"1520\":1,\"1583\":1,\"1644\":1,\"1688\":1,\"1751\":1,\"1879\":1,\"2099\":1,\"2839\":1,\"2999\":1,\"3061\":1,\"3078\":1,\"3432\":1,\"3441\":1,\"3702\":1,\"3705\":1,\"3917\":2,\"3951\":1,\"4093\":1,\"4253\":1,\"4315\":1,\"4332\":1,\"4468\":1,\"4551\":1,\"4595\":1,\"4658\":1}}],[\"由inheritablethreadlocal类维护\",{\"1\":{\"3025\":1,\"4279\":1}}],[\"由threadlocal类维护\",{\"1\":{\"3025\":1,\"4279\":1}}],[\"由objectmonitor实现的\",{\"1\":{\"3004\":1,\"4258\":1}}],[\"由操作系统保证原子性\",{\"1\":{\"2900\":1,\"4154\":1}}],[\"由操作系统硬件来保证\",{\"1\":{\"2879\":1,\"4133\":1}}],[\"由操作系统来负责线程间的调度和线程的状态变更\",{\"1\":{\"2851\":1,\"4105\":1}}],[\"由proxy代理实例去完成真正的远程访问\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"由两个方法int\",{\"1\":{\"724\":1}}],[\"由自己创建⼀个静态变量存储实例\",{\"1\":{\"579\":1,\"3772\":1}}],[\"由于图片存储到oss中\",{\"1\":{\"3255\":1,\"5524\":1}}],[\"由于队列永远不会被放满\",{\"1\":{\"3065\":1,\"4319\":1}}],[\"由于之前没有释放锁\",{\"1\":{\"2841\":1,\"4095\":1}}],[\"由于子查询会产生大量的临时表也没有索引\",{\"1\":{\"2665\":1,\"5027\":1}}],[\"由于在对记录加独占锁前\",{\"1\":{\"2512\":1,\"4874\":1}}],[\"由于目标接口与主机\",{\"1\":{\"2253\":1,\"5335\":1}}],[\"由于协议是\",{\"1\":{\"1879\":1,\"4468\":1}}],[\"由于微服务是分布式服务\",{\"1\":{\"1807\":1,\"4396\":1}}],[\"由于隔离的进程独立于宿主和其它的隔离的进程\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"由于不是本文重点\",{\"1\":{\"767\":1}}],[\"由于hashtable会尽量使用素数\",{\"1\":{\"767\":1}}],[\"由于篇幅有限\",{\"1\":{\"763\":1}}],[\"由于15的二进制扩展到32位为\",{\"1\":{\"750\":1}}],[\"由于红黑树的每次操作平均要旋转一次和变换颜色\",{\"1\":{\"434\":1,\"3759\":1}}],[\"由于\",{\"1\":{\"388\":1,\"2159\":1,\"2162\":1,\"2276\":1,\"2277\":1,\"2651\":1,\"5013\":1,\"5358\":1,\"5359\":1}}],[\"由开发者再做选择\",{\"1\":{\"383\":1}}],[\"由\",{\"1\":{\"208\":1,\"1171\":1,\"1339\":1,\"1507\":1,\"1675\":1,\"2118\":1,\"3602\":1,\"4582\":1}}],[\"启动两台heima\",{\"1\":{\"3286\":1,\"5555\":1}}],[\"启动事务时\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"启动发现集群没有处于\",{\"1\":{\"1887\":1,\"4476\":1}}],[\"启动了\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"启动时需要进行系统的\",{\"1\":{\"1884\":1,\"4473\":1}}],[\"启动项目\",{\"1\":{\"939\":1,\"3956\":1}}],[\"启动类加载器\",{\"1\":{\"208\":1,\"3602\":1}}],[\"启动的时候\",{\"1\":{\"204\":1,\"3598\":1}}],[\"b=3\",{\"1\":{\"2872\":1,\"4126\":1}}],[\"bgsave\",{\"1\":{\"2731\":1,\"5093\":1}}],[\"btree\",{\"1\":{\"2363\":2,\"4725\":2}}],[\"b+\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"b+树是多路平衡树\",{\"1\":{\"2398\":1,\"4760\":1}}],[\"b+树本身就是一颗多叉平衡树\",{\"1\":{\"2395\":1,\"4757\":1}}],[\"b+树的检索效率就很稳定了\",{\"1\":{\"2357\":1,\"4719\":1}}],[\"b+树的叶子节点有一条引用链指向与它相邻的叶子节点\",{\"1\":{\"2356\":1,\"4718\":1}}],[\"b+树只有叶子节点存放\",{\"1\":{\"2355\":1,\"4717\":1}}],[\"b+树两者有何异同呢\",{\"1\":{\"2354\":1,\"4716\":1}}],[\"b+树中的\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"b+树\",{\"1\":{\"2351\":1,\"2393\":1,\"2432\":1,\"4713\":1,\"4755\":1,\"4794\":1}}],[\"b+tree\",{\"1\":{\"2342\":1,\"2343\":1,\"2353\":1,\"2358\":1,\"2359\":2,\"2360\":1,\"2363\":1,\"4704\":1,\"4705\":1,\"4715\":1,\"4720\":1,\"4721\":2,\"4722\":1,\"4725\":1}}],[\"bus\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"buf\",{\"1\":{\"1166\":2,\"1334\":2,\"1502\":2,\"1670\":2,\"2681\":1,\"2735\":1,\"4577\":2,\"5043\":1,\"5097\":1}}],[\"bufferedreader\",{\"1\":{\"265\":2}}],[\"b的成品创建又依赖于\",{\"1\":{\"885\":1,\"3902\":1}}],[\"b\",{\"1\":{\"877\":1,\"879\":4,\"885\":1,\"889\":1,\"890\":2,\"894\":1,\"2237\":1,\"2239\":1,\"2240\":2,\"2242\":2,\"2243\":1,\"2244\":2,\"2246\":1,\"2249\":1,\"2252\":3,\"2254\":1,\"2255\":1,\"2256\":1,\"2257\":1,\"2258\":2,\"2259\":1,\"2351\":1,\"2352\":5,\"2353\":1,\"2354\":1,\"2355\":1,\"2356\":1,\"2357\":1,\"2434\":1,\"2495\":1,\"2568\":6,\"2579\":3,\"2580\":1,\"2584\":2,\"2588\":2,\"2590\":1,\"2874\":1,\"2876\":1,\"2886\":1,\"3130\":1,\"3894\":1,\"3896\":4,\"3902\":1,\"3906\":1,\"3907\":2,\"3911\":1,\"4128\":1,\"4130\":1,\"4140\":1,\"4713\":1,\"4714\":5,\"4715\":1,\"4716\":1,\"4717\":1,\"4718\":1,\"4719\":1,\"4796\":1,\"4857\":1,\"4930\":6,\"4941\":3,\"4942\":1,\"4946\":2,\"4950\":2,\"4952\":1,\"5319\":1,\"5321\":1,\"5322\":2,\"5324\":2,\"5325\":1,\"5326\":2,\"5328\":1,\"5331\":1,\"5334\":3,\"5336\":1,\"5337\":1,\"5338\":1,\"5339\":1,\"5340\":2,\"5341\":1,\"5410\":1}}],[\"biz=mjm5njq5mti5oa==\",{\"1\":{\"3106\":1,\"4360\":1}}],[\"biz=mzaxnte2njeymw==\",{\"1\":{\"2961\":1,\"4215\":1}}],[\"biz=mzu0ote4mzyzmw==\",{\"1\":{\"2856\":1,\"4110\":1}}],[\"biz=mzg2ota0njk0oa==\",{\"1\":{\"915\":1,\"3932\":1}}],[\"bitmap\",{\"1\":{\"2675\":1,\"5037\":1}}],[\"bits\",{\"1\":{\"775\":1,\"789\":1}}],[\"bigint\",{\"1\":{\"2650\":1,\"5012\":1}}],[\"bing\",{\"0\":{\"5585\":1}}],[\"binlog\",{\"1\":{\"2529\":1,\"2530\":2,\"2531\":1,\"4891\":1,\"4892\":2,\"4893\":1}}],[\"binary\",{\"1\":{\"2271\":1,\"5353\":1}}],[\"bindingresult\",{\"1\":{\"824\":1,\"3841\":1}}],[\"bounds\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"both\",{\"1\":{\"775\":1}}],[\"boor\",{\"1\":{\"950\":1,\"3967\":1}}],[\"boot快速开发框架\",{\"1\":{\"3195\":1,\"5464\":1}}],[\"boot风格进行再封装屏蔽掉了复杂的配置和实现原理\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"boot的开发风格做到一键启动和部署\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"boot的开发便利性巧妙地简化了分布式系统基础设施的开发\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"boot的监控插件\",{\"1\":{\"962\":1,\"3979\":1}}],[\"boot的客户端工具\",{\"1\":{\"957\":1,\"3974\":1}}],[\"boot项目\",{\"1\":{\"960\":1,\"3977\":1}}],[\"boot项目的自动化配置\",{\"1\":{\"923\":1,\"3940\":1}}],[\"boot四大核心组件\",{\"0\":{\"954\":1,\"3971\":1}}],[\"boot提供的spring\",{\"1\":{\"940\":1,\"3957\":1}}],[\"boot自带监控组件\",{\"1\":{\"940\":1,\"3957\":1}}],[\"boot自动配置原理\",{\"0\":{\"899\":1,\"3916\":1}}],[\"boot<\",{\"1\":{\"930\":1,\"3947\":1}}],[\"bootstrap配置文件有以下几个应用场景\",{\"1\":{\"924\":1,\"3941\":1}}],[\"bootstrapclassloader\",{\"1\":{\"208\":1,\"233\":1,\"3602\":1,\"3627\":1}}],[\"boot\",{\"0\":{\"804\":1,\"910\":1,\"914\":1,\"941\":1,\"3821\":1,\"3927\":1,\"3931\":1,\"3958\":1},\"1\":{\"900\":2,\"901\":1,\"905\":3,\"907\":1,\"909\":1,\"929\":3,\"930\":1,\"939\":1,\"940\":1,\"942\":3,\"944\":1,\"945\":1,\"946\":1,\"947\":2,\"957\":1,\"3190\":1,\"3917\":2,\"3918\":1,\"3922\":3,\"3924\":1,\"3926\":1,\"3946\":3,\"3947\":1,\"3956\":1,\"3957\":1,\"3959\":3,\"3961\":1,\"3962\":1,\"3963\":1,\"3964\":2,\"3974\":1,\"5459\":1}}],[\"boolean\",{\"1\":{\"214\":1,\"218\":1,\"229\":1,\"2832\":2,\"3608\":1,\"3612\":1,\"3623\":1,\"4086\":2}}],[\"bed128365216c019988915ed3add75fb\",{\"1\":{\"3361\":1}}],[\"bearer\",{\"1\":{\"3230\":1,\"5499\":1}}],[\"beans\",{\"1\":{\"940\":1,\"3957\":1}}],[\"bean加载情况\",{\"1\":{\"940\":1,\"3957\":1}}],[\"bean的生命周期\",{\"0\":{\"812\":1,\"3829\":1}}],[\"bean\",{\"1\":{\"587\":1,\"830\":1,\"832\":1,\"885\":1,\"893\":1,\"1848\":1,\"3780\":1,\"3847\":1,\"3849\":1,\"3902\":1,\"3910\":1,\"4437\":1}}],[\"beanfactory\",{\"1\":{\"587\":1,\"830\":1,\"3780\":1,\"3847\":1}}],[\"because\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"before\",{\"1\":{\"3043\":2,\"4297\":2}}],[\"before规则中的volatile变量规则规定了一个线程先去写一个volatile变量\",{\"1\":{\"2944\":1,\"4198\":1}}],[\"begin\",{\"1\":{\"2536\":1,\"4898\":1}}],[\"between\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"be\",{\"1\":{\"760\":1}}],[\"byte\",{\"1\":{\"1024\":2,\"5200\":2}}],[\"by\",{\"1\":{\"510\":1,\"2664\":2,\"3043\":1,\"4297\":1,\"5026\":2}}],[\"blog\",{\"1\":{\"328\":1,\"397\":1,\"412\":1,\"629\":1,\"658\":1,\"970\":1,\"1003\":1,\"1056\":3,\"1065\":5,\"1079\":1,\"2638\":1,\"2817\":1,\"2833\":1,\"2995\":1,\"3401\":2,\"3633\":1,\"3716\":1,\"3721\":1,\"3987\":1,\"4020\":1,\"4087\":1,\"4249\":1,\"5000\":1,\"5179\":1,\"5232\":3,\"5241\":5,\"5255\":1}}],[\"blockingqueue<runnable>\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"blocking\",{\"1\":{\"2277\":2,\"5359\":2}}],[\"blocked\",{\"1\":{\"1107\":1,\"1275\":1,\"1443\":1,\"1611\":1,\"3043\":1,\"4297\":1,\"4518\":1}}],[\"block\",{\"1\":{\"265\":1}}],[\"broadcast\",{\"1\":{\"1863\":1,\"1869\":1,\"4452\":1,\"4458\":1}}],[\"broker\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"broker默认的消息保留策略是\",{\"1\":{\"1009\":1,\"5185\":1}}],[\"break\",{\"1\":{\"265\":1}}],[\"br\",{\"1\":{\"265\":9}}],[\"balanced\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"balance机制\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"baidulandingword~default\",{\"1\":{\"1056\":1,\"5232\":1}}],[\"batch\",{\"1\":{\"999\":1,\"4016\":1}}],[\"basic\",{\"1\":{\"794\":1}}],[\"basics\",{\"1\":{\"794\":1}}],[\"backlog\",{\"0\":{\"2206\":1},\"1\":{\"2091\":1}}],[\"backing\",{\"1\":{\"510\":1}}],[\"backward\",{\"1\":{\"368\":1}}],[\"baddotrobot\",{\"1\":{\"397\":1}}],[\"baz\",{\"0\":{\"164\":1,\"3558\":1},\"1\":{\"144\":1,\"162\":1,\"3543\":1,\"3556\":1}}],[\"barrier来说\",{\"1\":{\"2948\":1,\"2949\":1,\"4202\":1,\"4203\":1}}],[\"barrier即读屏障和写屏障\",{\"1\":{\"2947\":1,\"4201\":1}}],[\"barrier\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"2947\":1,\"2948\":1,\"2949\":1,\"4201\":1,\"4202\":1,\"4203\":1,\"4528\":1}}],[\"bar\",{\"0\":{\"143\":1,\"158\":1,\"3542\":1,\"3552\":1},\"1\":{\"160\":1,\"3554\":1}}],[\"相等则表示密码正确\",{\"1\":{\"3382\":1}}],[\"相等就不添加\",{\"1\":{\"460\":1}}],[\"相当的安全性\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"相当于只是对k做了个简单的hash\",{\"1\":{\"761\":1}}],[\"相反\",{\"1\":{\"1930\":1,\"4036\":1}}],[\"相反的\",{\"1\":{\"1097\":1}}],[\"相信\",{\"1\":{\"722\":1}}],[\"相信大家在\",{\"1\":{\"352\":1}}],[\"相比效率上存在天然的劣势\",{\"1\":{\"5275\":1}}],[\"相比普通索引建立的数据更小\",{\"1\":{\"2388\":1,\"4750\":1}}],[\"相比\",{\"1\":{\"2343\":1,\"2360\":1,\"4705\":1,\"4722\":1}}],[\"相比于\",{\"1\":{\"2680\":1,\"5042\":1}}],[\"相比于非聚簇索引\",{\"1\":{\"2395\":1,\"4757\":1}}],[\"相比于之前rangeassignor的分配策略\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"相比于静态代理来说\",{\"1\":{\"604\":1,\"3797\":1}}],[\"相比treemap效率更高\",{\"1\":{\"802\":1}}],[\"相比vector来说\",{\"1\":{\"519\":1}}],[\"相同的\",{\"1\":{\"984\":1,\"4001\":1}}],[\"相同的类文件被不同的类加载器加载产生的是两个不同的类\",{\"1\":{\"236\":1,\"3630\":1}}],[\"相同二进制名称的类只会被加载一次\",{\"1\":{\"205\":1,\"3599\":1}}],[\"相关的方法\",{\"1\":{\"2880\":1,\"4134\":1}}],[\"相关的接口作用\",{\"1\":{\"1142\":1,\"1310\":1,\"1478\":1,\"1646\":1,\"4553\":1}}],[\"相关问题\",{\"1\":{\"2761\":1,\"5123\":1}}],[\"相关代码如下所示\",{\"1\":{\"228\":1,\"3622\":1}}],[\"相关信息\",{\"1\":{\"34\":1,\"464\":1,\"466\":1,\"522\":1,\"551\":1,\"555\":1,\"558\":1,\"694\":1,\"708\":1,\"725\":1,\"732\":1,\"739\":1,\"756\":1,\"764\":1,\"1091\":1,\"3433\":1}}],[\"系统通过用户名找到与之对应的\",{\"1\":{\"3379\":1}}],[\"系统将\",{\"1\":{\"3374\":1,\"3380\":1}}],[\"系统为用户生成\",{\"1\":{\"3373\":1}}],[\"系统会用大部分的时间来处理\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"系统会首先判断当前类是否被加载过\",{\"1\":{\"205\":1,\"232\":1,\"3599\":1,\"3626\":1}}],[\"系统直接提供了一些函数用于对文件和设备进行访问和控制\",{\"1\":{\"2745\":1,\"5107\":1}}],[\"系统内核缓存区的数据还未同步\",{\"1\":{\"2736\":1,\"5098\":1}}],[\"系统中查看\",{\"0\":{\"2180\":1},\"1\":{\"2065\":1}}],[\"系统中的某个节点在进行写操作\",{\"1\":{\"1919\":1,\"4508\":1}}],[\"系统在绝大部分时候所处的状态\",{\"1\":{\"1921\":1,\"4510\":1}}],[\"系统支持\",{\"1\":{\"1194\":1,\"1362\":1,\"1530\":1,\"1698\":1,\"4605\":1}}],[\"系统调用再做一遍解释\",{\"1\":{\"2746\":1,\"5108\":1}}],[\"系统调用\",{\"1\":{\"1194\":1,\"1362\":1,\"1530\":1,\"1698\":1,\"2741\":1,\"2742\":1,\"2745\":1,\"4605\":1,\"5103\":1,\"5104\":1,\"5107\":1}}],[\"系统调用的过程发生了点变化\",{\"1\":{\"1183\":1,\"1351\":1,\"1519\":1,\"1687\":1,\"4594\":1}}],[\"系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里\",{\"1\":{\"1165\":1,\"1333\":1,\"1501\":1,\"1669\":1,\"4576\":1}}],[\"系统调用函数会直接把内核缓冲区里的数据\",{\"1\":{\"1167\":1,\"1335\":1,\"1503\":1,\"1671\":1,\"4578\":1}}],[\"系统调用函数\",{\"1\":{\"1165\":1,\"1194\":1,\"1333\":1,\"1362\":1,\"1501\":1,\"1530\":1,\"1669\":1,\"1698\":1,\"4576\":1,\"4605\":1}}],[\"系统调用也是有一定的开销的的\",{\"1\":{\"1155\":1,\"1323\":1,\"1491\":1,\"1659\":1,\"4566\":1}}],[\"系统变量所指定的路径下的所有类\",{\"1\":{\"209\":1,\"3603\":1}}],[\"系统加载\",{\"1\":{\"195\":1,\"3589\":1}}],[\"在数据传送前\",{\"1\":{\"3398\":1}}],[\"在数据库中存储文件会严重影响数据库性能\",{\"1\":{\"2643\":1,\"5005\":1}}],[\"在大多数对称算法中\",{\"1\":{\"3390\":1}}],[\"在大多数情况下\",{\"1\":{\"2434\":1,\"4796\":1}}],[\"在密码学的应用和研究中\",{\"1\":{\"3387\":1}}],[\"在计算机信息安全领域\",{\"1\":{\"3387\":1}}],[\"在计算时不会丢失精度\",{\"1\":{\"2650\":1,\"5012\":1}}],[\"在当时计算机的计算能力下\",{\"1\":{\"3334\":1}}],[\"在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"在添加zset数据的时候\",{\"1\":{\"3270\":1,\"5539\":1}}],[\"在添加和删除元素时具有比arraylist更好的性能\",{\"1\":{\"501\":1}}],[\"在文章审核成功以后需要在app的article库中新增文章数据\",{\"1\":{\"3258\":1,\"5527\":1}}],[\"在模板中\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"在网关微服务中新建全局过滤器\",{\"1\":{\"3243\":1,\"5512\":1}}],[\"在认证过滤器中需要用到jwt的解析\",{\"1\":{\"3241\":1,\"5510\":1}}],[\"在自媒体引导类中使用\",{\"1\":{\"3252\":1,\"5521\":1}}],[\"在自媒体端\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"在自动审核的方法上加上\",{\"1\":{\"3252\":1,\"5521\":1}}],[\"在自己的\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"在用户端\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"在那我俩喂喂喂了好几声\",{\"1\":{\"3149\":1,\"5429\":1}}],[\"在执行\",{\"1\":{\"3007\":1,\"4261\":1}}],[\"在执行monitorenter时\",{\"1\":{\"3006\":1,\"4260\":1}}],[\"在执行过程中不允许被中断\",{\"1\":{\"2879\":1,\"4133\":1}}],[\"在操作数据时非常乐观\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"在指令后插入store\",{\"1\":{\"2949\":1,\"4203\":1}}],[\"在指令前插入load\",{\"1\":{\"2948\":1,\"4202\":1}}],[\"在同步队列中的节点通过自旋的操作不断去获取同步状态\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"在同步队列中\",{\"1\":{\"2919\":1,\"4173\":1}}],[\"在同一连接上可以同时传输多个请求和响应\",{\"1\":{\"2270\":1,\"5352\":1}}],[\"在同一个事务中\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"在同一个子网内\",{\"1\":{\"2253\":1,\"5335\":1}}],[\"在同一个\",{\"1\":{\"982\":1,\"3999\":1}}],[\"在同一个版本的jdk中\",{\"1\":{\"722\":1}}],[\"在变量前加版本号\",{\"1\":{\"2888\":1,\"4142\":1}}],[\"在sun\",{\"1\":{\"2880\":1,\"4134\":1}}],[\"在spring程序main方法中\",{\"1\":{\"900\":1,\"3917\":1}}],[\"在线程1要提交更新之前\",{\"1\":{\"2868\":1,\"4122\":1}}],[\"在线程进入和退出同步块时不再通过\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"在轻量级锁状态下继续锁竞争\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"在位数组中把对应下标的值置为\",{\"1\":{\"2788\":1,\"5150\":1}}],[\"在键空间中\",{\"1\":{\"2766\":1,\"2771\":1,\"5128\":1,\"5133\":1}}],[\"在60秒\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"在300秒\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"在900秒\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"在拼接字符串之前会检查\",{\"1\":{\"2683\":1,\"5045\":1}}],[\"在多个事务对这条记录进行读写操作时\",{\"1\":{\"2596\":1,\"4958\":1}}],[\"在多线程并发的环境下\",{\"1\":{\"653\":1,\"654\":1}}],[\"在多线程的场景中可以直接使用vector类\",{\"1\":{\"528\":1}}],[\"在银行分别有\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"在此系统中\",{\"1\":{\"3392\":1}}],[\"在此期间会生成一个插入意向锁\",{\"1\":{\"2559\":1,\"4921\":1}}],[\"在此基础上\",{\"1\":{\"1917\":1,\"4506\":1}}],[\"在插入数据时\",{\"1\":{\"2518\":1,\"4880\":1}}],[\"在插件的拦截方法内拦截待执行的\",{\"1\":{\"976\":1,\"3993\":1}}],[\"在备份数据库时就要使用全局锁的方法\",{\"1\":{\"2466\":1,\"4828\":1}}],[\"在索引列上进行计算\",{\"1\":{\"2441\":1,\"4803\":1}}],[\"在索引检索的时候\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"在设计表的时候\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"在根据辅助索引查找时\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"在根据主索引搜索时\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"在业务代码中进行约束即可\",{\"1\":{\"2333\":1,\"4695\":1}}],[\"在并发编程中我们都知道i++操作是非线程安全的\",{\"1\":{\"2857\":1,\"4111\":1}}],[\"在并发写的时候\",{\"1\":{\"2327\":1,\"4689\":1}}],[\"在并发场景下\",{\"1\":{\"630\":1,\"3722\":1}}],[\"在域名中\",{\"1\":{\"2286\":1,\"5368\":1}}],[\"在一个事务内多次查询某个符合查询条件的\",{\"1\":{\"2586\":1,\"4948\":1}}],[\"在一个事务内多次读取同一个数据\",{\"1\":{\"2582\":1,\"4944\":1}}],[\"在一个局域网内\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"在一定程度上解决了队头阻塞\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"在其上实现热静态资源缓存\",{\"1\":{\"3300\":1,\"5569\":1}}],[\"在其基础上新增了很多功能比如加密\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"在其他语言中也有应用\",{\"1\":{\"808\":1,\"3825\":1}}],[\"在处理多个请求时更加高效\",{\"1\":{\"2270\":1,\"5352\":1}}],[\"在处理海量数据为什么这么快的原因之一\",{\"1\":{\"1192\":1,\"1360\":1,\"1528\":1,\"1696\":1,\"4603\":1}}],[\"在请求大资源前的预热请求\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"在讨论\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"在该局域网内\",{\"1\":{\"2239\":1,\"5321\":1}}],[\"在建立连接时由计算机生成的随机数作为其初始值\",{\"1\":{\"2099\":1}}],[\"在空跑\",{\"1\":{\"1965\":1,\"4071\":1}}],[\"在理论计算机科学中\",{\"1\":{\"1908\":1,\"4497\":1}}],[\"在收到\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"在选举过程中会参与投票\",{\"1\":{\"1873\":1,\"4462\":1}}],[\"在介绍\",{\"1\":{\"1871\":1,\"4460\":1}}],[\"在解决分布式数据一致性问题时并没有直接使用\",{\"1\":{\"1869\":1,\"4458\":1}}],[\"在微服务启动时\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"在服务发生调用时\",{\"1\":{\"1844\":1,\"4433\":1}}],[\"在分布式系统\",{\"1\":{\"1839\":1,\"4428\":1}}],[\"在分布式服务或者微服务架构下\",{\"1\":{\"991\":1,\"4008\":1}}],[\"在面对瞬间高并发的场景时\",{\"1\":{\"1254\":1,\"1422\":1,\"1590\":1,\"1758\":1,\"4665\":1}}],[\"在前面我们知道\",{\"1\":{\"1165\":1,\"1333\":1,\"1501\":1,\"1669\":1,\"4576\":1}}],[\"在获取事件时\",{\"1\":{\"1137\":1,\"1305\":1,\"1473\":1,\"1641\":1,\"4548\":1}}],[\"在进程\",{\"1\":{\"1119\":1,\"1287\":1,\"1455\":1,\"1623\":1,\"4530\":1}}],[\"在每个volatile读操作的后面插入一个loadstore屏障\",{\"1\":{\"2956\":1,\"4210\":1}}],[\"在每个volatile读操作的后面插入一个loadload屏障\",{\"1\":{\"2955\":1,\"4209\":1}}],[\"在每个volatile写操作的后面插入一个storeload屏障\",{\"1\":{\"2954\":1,\"4208\":1}}],[\"在每个volatile写操作的前面插入一个storestore屏障\",{\"1\":{\"2953\":1,\"4207\":1}}],[\"在每个新的producer初始化时\",{\"1\":{\"1063\":1,\"5239\":1}}],[\"在每次循环中都会用到\",{\"1\":{\"1096\":1}}],[\"在了解这部分知识之前\",{\"1\":{\"1090\":1}}],[\"在kafka中有一个partition\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"在broker往leader分区写入消息时\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"在任何时刻\",{\"1\":{\"1010\":1,\"5186\":1}}],[\"在yml中添加以下代码\",{\"1\":{\"985\":1,\"4002\":1}}],[\"在配置文件中配置编写的插件\",{\"1\":{\"979\":1,\"3996\":1}}],[\"在使用\",{\"1\":{\"2464\":1,\"2503\":1,\"2504\":1,\"4826\":1,\"4865\":1,\"4866\":1}}],[\"在使用联合索引时\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"在使用之前需要引入`spring\",{\"1\":{\"939\":1,\"3956\":1}}],[\"在使用synchronizedlist进行遍历的时候要手动加锁\",{\"1\":{\"565\":1}}],[\"在方法上加\",{\"1\":{\"936\":1,\"3953\":1}}],[\"在方法中声明一个异常\",{\"1\":{\"256\":1,\"3652\":1}}],[\"在application\",{\"1\":{\"935\":1,\"3952\":1}}],[\"在发布它的第一个版本时没有这个功能\",{\"1\":{\"929\":1,\"3946\":1}}],[\"在补充对象的\",{\"1\":{\"890\":1,\"3907\":1}}],[\"在通过递归把\",{\"1\":{\"879\":1,\"3896\":1}}],[\"在创建半成品对象后存放到缓存中\",{\"1\":{\"889\":1,\"3906\":1}}],[\"在创建\",{\"1\":{\"879\":1,\"3896\":1}}],[\"在创建对象的同时隐藏创建逻辑\",{\"1\":{\"577\":1,\"3770\":1}}],[\"在填充属性\",{\"1\":{\"894\":1,\"3911\":1}}],[\"在填充\",{\"1\":{\"820\":1,\"3837\":1}}],[\"在树平衡的情况下\",{\"1\":{\"799\":1}}],[\"在最坏的情况下\",{\"1\":{\"778\":1}}],[\"在取模计算时\",{\"1\":{\"772\":1}}],[\"在对表结构变更前\",{\"1\":{\"2500\":1,\"4862\":1}}],[\"在对数组长度进行按位与运算后得到的结果相同\",{\"1\":{\"746\":1}}],[\"在对hashmap进行插入\",{\"1\":{\"744\":1}}],[\"在深入分析之前\",{\"1\":{\"743\":1}}],[\"在具体实现上\",{\"1\":{\"724\":1}}],[\"在具体实践中\",{\"1\":{\"366\":1}}],[\"在上代码之前\",{\"1\":{\"723\":1}}],[\"在上述实现中\",{\"1\":{\"377\":1}}],[\"在不同的版本的jdk中\",{\"1\":{\"722\":1}}],[\"在不需要并发安全的场景中\",{\"1\":{\"669\":1}}],[\"在初始化hashmap的时候\",{\"1\":{\"695\":1}}],[\"在高并发的场景中\",{\"1\":{\"669\":1}}],[\"在hashmap中\",{\"1\":{\"669\":1,\"700\":1}}],[\"在hashset中\",{\"1\":{\"460\":1}}],[\"在jdk1\",{\"1\":{\"782\":1}}],[\"在jdk8及以后的版本中\",{\"1\":{\"657\":1}}],[\"在java语言中可以使用\",{\"1\":{\"2858\":1,\"4112\":1}}],[\"在java\",{\"1\":{\"778\":1,\"784\":1}}],[\"在java的set体系中\",{\"1\":{\"457\":1}}],[\"在java中\",{\"1\":{\"256\":1,\"715\":1,\"3652\":1}}],[\"在我们的日常使用当中\",{\"1\":{\"654\":1}}],[\"在检索的时候效率差不多\",{\"1\":{\"636\":1,\"3728\":1}}],[\"在桶中元素量较小时没有这个必要\",{\"1\":{\"634\":1,\"3726\":1}}],[\"在锁定的对象区别上\",{\"1\":{\"563\":1}}],[\"在中间插入\",{\"1\":{\"480\":1}}],[\"在两端添加\",{\"1\":{\"479\":1,\"485\":1}}],[\"在内存地址v中存储着变量值为\",{\"1\":{\"2864\":1,\"4118\":1}}],[\"在内存中生成一个代表该类的\",{\"1\":{\"202\":1,\"3596\":1}}],[\"在内部\",{\"1\":{\"2617\":1,\"4979\":1}}],[\"在内部实现中\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"在内部实现上\",{\"1\":{\"446\":1}}],[\"在内核中是两个完全独立的软件模块\",{\"1\":{\"2174\":1}}],[\"在内核里使用红黑树来跟踪进程所有待检测的文件描述字\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"在实践中\",{\"1\":{\"410\":1}}],[\"在实际的工程应用上\",{\"1\":{\"396\":1}}],[\"在触发扩容的时候\",{\"1\":{\"401\":1}}],[\"在底层实现上\",{\"1\":{\"400\":1}}],[\"在真实的世界中\",{\"1\":{\"364\":1}}],[\"在这种饱和策略下\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"在这个接口的一次调用流程中\",{\"1\":{\"3313\":1}}],[\"在这个时间差内\",{\"1\":{\"2941\":1,\"4195\":1}}],[\"在这个例子中\",{\"1\":{\"363\":1}}],[\"在这过程中如果事务\",{\"1\":{\"2584\":1,\"4946\":1}}],[\"在这里插入图片描述\",{\"1\":{\"913\":1,\"986\":1,\"988\":1,\"992\":1,\"1002\":1,\"1062\":1,\"1849\":1,\"3930\":1,\"4003\":1,\"4005\":1,\"4009\":1,\"4019\":1,\"4438\":1,\"5238\":1}}],[\"在这里\",{\"1\":{\"362\":1}}],[\"在\",{\"0\":{\"337\":1},\"1\":{\"348\":1,\"366\":1,\"375\":1,\"610\":1,\"620\":1,\"858\":1,\"1176\":1,\"1236\":1,\"1344\":1,\"1404\":1,\"1512\":1,\"1572\":1,\"1680\":1,\"1740\":1,\"1858\":1,\"1860\":1,\"1863\":1,\"1875\":1,\"1879\":1,\"1880\":1,\"1881\":1,\"2157\":1,\"2267\":1,\"2358\":1,\"2380\":1,\"2393\":1,\"2446\":1,\"2521\":1,\"2529\":1,\"2600\":1,\"2601\":1,\"2602\":1,\"2603\":1,\"2606\":1,\"2633\":1,\"2708\":1,\"2716\":1,\"2726\":1,\"2879\":1,\"2881\":1,\"2916\":1,\"3004\":1,\"3085\":1,\"3803\":1,\"3813\":1,\"3875\":1,\"4133\":1,\"4135\":1,\"4170\":1,\"4258\":1,\"4339\":1,\"4447\":1,\"4449\":1,\"4452\":1,\"4464\":1,\"4468\":1,\"4469\":1,\"4470\":1,\"4587\":1,\"4647\":1,\"4720\":1,\"4742\":1,\"4755\":1,\"4808\":1,\"4883\":1,\"4891\":1,\"4962\":1,\"4963\":1,\"4964\":1,\"4965\":1,\"4968\":1,\"4995\":1,\"5070\":1,\"5078\":1,\"5088\":1,\"5275\":1,\"5349\":1}}],[\"在运行时构造一个类的实例化对象\",{\"1\":{\"302\":1,\"3690\":1}}],[\"在运行时获取一个类的所有信息\",{\"1\":{\"302\":1,\"3690\":1}}],[\"在运行时获取一个类的\",{\"1\":{\"302\":1,\"3690\":1}}],[\"在父类加载器没有找到所请求的类的情况下\",{\"1\":{\"230\":1,\"3624\":1}}],[\"在加载时调用\",{\"1\":{\"214\":1,\"3608\":1}}],[\"在类加载的时候\",{\"1\":{\"205\":1,\"232\":1,\"3599\":1,\"3626\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"10\":1,\"3409\":1}}],[\"到备库执行的时候\",{\"1\":{\"2530\":1,\"4892\":1}}],[\"到此\",{\"1\":{\"2256\":1,\"5338\":1}}],[\"到用户空间\",{\"1\":{\"1167\":1,\"1335\":1,\"1503\":1,\"1671\":1,\"4578\":1}}],[\"到第五天的时候消息达到了\",{\"1\":{\"1013\":1,\"5189\":1}}],[\"到底synchronizedlist和vector有没有区别\",{\"1\":{\"529\":1}}],[\"到底应该是\",{\"1\":{\"360\":1}}],[\"到\",{\"1\":{\"202\":1,\"3596\":1}}],[\">8\",{\"1\":{\"693\":1}}],[\">16\",{\"1\":{\"693\":1}}],[\">1\",{\"1\":{\"693\":1}}],[\">a\",{\"1\":{\"630\":1,\"3722\":1}}],[\">c\",{\"1\":{\"630\":1,\"3722\":1}}],[\">b\",{\"1\":{\"630\":2,\"3722\":2}}],[\">=\",{\"1\":{\"549\":1,\"2415\":1,\"4777\":1}}],[\">>>\",{\"1\":{\"729\":4,\"748\":4,\"775\":4,\"781\":1,\"782\":1,\"789\":1}}],[\">>\",{\"1\":{\"524\":1,\"737\":1}}],[\">\",{\"1\":{\"214\":1,\"229\":1,\"309\":1,\"313\":1,\"316\":2,\"323\":2,\"325\":2,\"525\":1,\"535\":3,\"539\":1,\"547\":1,\"549\":1,\"612\":1,\"686\":1,\"691\":3,\"704\":1,\"814\":8,\"893\":1,\"1024\":1,\"1033\":1,\"1198\":2,\"1230\":2,\"1252\":1,\"1263\":2,\"1366\":2,\"1398\":2,\"1420\":1,\"1431\":2,\"1534\":2,\"1566\":2,\"1588\":1,\"1599\":2,\"1702\":2,\"1734\":2,\"1756\":1,\"1767\":2,\"2415\":1,\"3031\":1,\"3608\":1,\"3623\":1,\"3697\":1,\"3701\":1,\"3704\":2,\"3711\":2,\"3713\":2,\"3805\":1,\"3831\":8,\"3910\":1,\"4285\":1,\"4609\":2,\"4641\":2,\"4663\":1,\"4674\":2,\"4777\":1,\"5200\":1,\"5209\":1}}],[\">解析\",{\"1\":{\"195\":1,\"3589\":1}}],[\">准备\",{\"1\":{\"195\":1,\"3589\":1}}],[\">初始化\",{\"1\":{\"195\":1,\"3589\":1}}],[\">连接\",{\"1\":{\"195\":1,\"3589\":1}}],[\"这代表你将丢失对这个任务的处理\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"这整个操作就是cas\",{\"1\":{\"2876\":1,\"4130\":1}}],[\"这类大的二进制数据通常存储于文件服务器\",{\"1\":{\"2644\":1,\"5006\":1}}],[\"这类大的二进制数据\",{\"0\":{\"2642\":1,\"5004\":1}}],[\"这类服务依旧只能采用写主机房\",{\"1\":{\"1960\":1,\"4066\":1}}],[\"这四种隔离级别具体是如何实现的呢\",{\"1\":{\"2610\":1,\"4972\":1}}],[\"这四个隔离级别如下\",{\"1\":{\"2592\":1,\"4954\":1}}],[\"这条记录了\",{\"1\":{\"2549\":1,\"4911\":1}}],[\"这条消息的状态是待发送状态\",{\"1\":{\"1933\":1,\"4039\":1}}],[\"这主要是通过\",{\"1\":{\"2516\":1,\"4878\":1}}],[\"这意味着事务执行期间\",{\"1\":{\"2492\":1,\"4854\":1}}],[\"这意味着我们可以将最坏情况下的性能从o\",{\"1\":{\"778\":1}}],[\"这也可以过滤更多数据\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"这也是threadlocal变量名的由来\",{\"1\":{\"3022\":1,\"4276\":1}}],[\"这也是和\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"这也是为什么很多场合我们输密码的时候\",{\"1\":{\"3352\":1}}],[\"这也是为什么\",{\"1\":{\"2327\":1,\"4689\":1}}],[\"这也是\",{\"1\":{\"1192\":1,\"1360\":1,\"1528\":1,\"1696\":1,\"4603\":1}}],[\"这应该是非聚簇索引最大的缺点了\",{\"1\":{\"2407\":1,\"4769\":1}}],[\"这被称为\",{\"1\":{\"2359\":1,\"2360\":1,\"4721\":1,\"4722\":1}}],[\"这在并发写的情况下是多么滴憨憨啊\",{\"1\":{\"2327\":1,\"4689\":1}}],[\"这地方有个常见面试题\",{\"1\":{\"2127\":1}}],[\"这篇文章来一起看下tcp中那些烦人\",{\"1\":{\"2053\":1}}],[\"这无所谓\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"这端\",{\"1\":{\"1879\":1,\"4468\":1}}],[\"这使得\",{\"1\":{\"2270\":1,\"5352\":1}}],[\"这使得编写web服务客户端更容易\",{\"1\":{\"1846\":1,\"4435\":1}}],[\"这使得微服务可以采用任何的开发语言和技术来实现\",{\"1\":{\"1808\":1,\"4397\":1}}],[\"这三个单词首字母组合\",{\"1\":{\"1906\":1,\"4495\":1}}],[\"这三个对象\",{\"1\":{\"1221\":1,\"1389\":1,\"1557\":1,\"1725\":1,\"4632\":1}}],[\"这三者都实现了list\",{\"1\":{\"499\":1}}],[\"这一章节\",{\"1\":{\"3085\":1,\"4339\":1}}],[\"这一次没有其他线程改变地址\",{\"1\":{\"2874\":1,\"4128\":1}}],[\"这一步需要调用\",{\"1\":{\"2742\":1,\"5104\":1}}],[\"这一步需要调用write函数\",{\"1\":{\"2741\":1,\"5103\":1}}],[\"这一切都发生在内核态\",{\"1\":{\"1171\":1,\"1339\":1,\"1507\":1,\"1675\":1,\"4582\":1}}],[\"这一种固定的数据结构了\",{\"1\":{\"384\":1}}],[\"这两个事务同时在处理\",{\"1\":{\"2579\":1,\"2584\":1,\"2588\":1,\"4941\":1,\"4946\":1,\"4950\":1}}],[\"这两个索引就是冗余索引\",{\"1\":{\"2434\":1,\"4796\":1}}],[\"这两个系统调用\",{\"1\":{\"1179\":1,\"1347\":1,\"1515\":1,\"1683\":1,\"4590\":1}}],[\"这两个术语还挺抽象的\",{\"1\":{\"1148\":1,\"1316\":1,\"1484\":1,\"1652\":1,\"4559\":1}}],[\"这两个都可以方便地实现进程\",{\"1\":{\"1123\":1,\"1291\":1,\"1459\":1,\"1627\":1,\"4534\":1}}],[\"这会导致consumer有些消息处理了\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"这将消除每次手动部署更改的需要\",{\"1\":{\"929\":1,\"3946\":1}}],[\"这可以使用\",{\"1\":{\"929\":1,\"3946\":1}}],[\"这时就可以将\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"这时数据库的线程很快就会爆满了\",{\"1\":{\"2497\":1,\"4859\":1}}],[\"这时线程\",{\"1\":{\"2496\":1,\"4858\":1}}],[\"这时其他线程执行以下操作\",{\"1\":{\"2451\":1,\"4813\":1}}],[\"这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息\",{\"1\":{\"925\":1,\"3942\":1}}],[\"这时候\",{\"1\":{\"807\":1,\"3824\":1}}],[\"这时候不管你需要什么map\",{\"1\":{\"300\":1,\"3688\":1}}],[\"这时候反射就派上用场了\",{\"1\":{\"295\":1,\"3683\":1}}],[\"这其实和java\",{\"1\":{\"786\":1}}],[\"这又引入了哈希分布不均匀的问题\",{\"1\":{\"773\":1}}],[\"这段代码是为了对key的hashcode进行扰动计算\",{\"1\":{\"749\":1}}],[\"这不过这里的\",{\"1\":{\"1889\":1,\"4478\":1}}],[\"这不就发生了冲突吗\",{\"1\":{\"746\":1}}],[\"这不难理解\",{\"1\":{\"721\":1}}],[\"这实现的原理如下\",{\"1\":{\"731\":1}}],[\"这⾥的双重检查是指两次⾮空判断\",{\"1\":{\"582\":1,\"3775\":1}}],[\"这决定了以下几点\",{\"1\":{\"469\":1}}],[\"这决定了它有如下特点\",{\"1\":{\"446\":1,\"475\":1,\"484\":1,\"665\":1,\"796\":1}}],[\"这里没听清发音\",{\"1\":{\"3145\":1,\"5425\":1}}],[\"这里借用\",{\"1\":{\"3035\":1,\"4289\":1}}],[\"这里必然会存在时间差\",{\"1\":{\"2941\":1,\"4195\":1}}],[\"这里不需要重新加锁\",{\"1\":{\"2841\":1,\"4095\":1}}],[\"这里对上面提到的一些\",{\"1\":{\"2746\":1,\"5108\":1}}],[\"这里的句点代表了不同层次之间的界限\",{\"1\":{\"2285\":1,\"5367\":1}}],[\"这里的叶子节点指的是最底层的空节点\",{\"1\":{\"424\":1,\"3749\":1}}],[\"这里说的网络设备\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"这里需要注意的是\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"这里还有一种情况\",{\"1\":{\"1960\":1,\"4066\":1}}],[\"这里回答的是单个表吧\",{\"1\":{\"1947\":1,\"4053\":1}}],[\"这里为了方便随便取个数字\",{\"1\":{\"1889\":1,\"4478\":1}}],[\"这里涉及共享数据的竞争\",{\"1\":{\"1249\":1,\"1417\":1,\"1585\":1,\"1753\":1,\"4660\":1}}],[\"这里我们主要看\",{\"1\":{\"1096\":1}}],[\"这里只能是尽量均衡\",{\"1\":{\"1030\":1,\"5206\":1}}],[\"这里就那redis来说一下\",{\"1\":{\"991\":1,\"4008\":1}}],[\"这里就不贴代码了\",{\"1\":{\"763\":1}}],[\"这里面定义了依赖的版本\",{\"1\":{\"950\":1,\"3967\":1}}],[\"这里面是包含负数的\",{\"1\":{\"757\":1}}],[\"这里有两道常见面试题\",{\"1\":{\"2166\":1}}],[\"这里有一个小建议\",{\"1\":{\"695\":1}}],[\"这里有问题\",{\"0\":{\"389\":1},\"1\":{\"390\":1}}],[\"这里\",{\"1\":{\"538\":1}}],[\"这难道不是重蹈了\",{\"1\":{\"392\":1}}],[\"这么多年了\",{\"1\":{\"370\":1}}],[\"这么难的逻辑都被你实现了\",{\"1\":{\"294\":1,\"3682\":1}}],[\"这个字符串在日志里的出现次数\",{\"1\":{\"3312\":1}}],[\"这个字符串\",{\"1\":{\"3312\":1,\"3313\":1}}],[\"这个经理不太专业呀\",{\"1\":{\"3182\":1}}],[\"这个我说就是了解\",{\"1\":{\"3164\":1,\"5444\":1}}],[\"这个熟\",{\"1\":{\"3142\":1,\"5422\":1}}],[\"这个离谱\",{\"1\":{\"3129\":1,\"5409\":1}}],[\"这个紧张忘了\",{\"1\":{\"3123\":1,\"5403\":1}}],[\"这个机制\",{\"1\":{\"2915\":1,\"4169\":1}}],[\"这个变量实际被修改过了\",{\"1\":{\"2886\":1,\"4140\":1}}],[\"这个变量所在的位置附近的位置很有可能在程序后续运行中被访问到\",{\"1\":{\"1093\":1}}],[\"这个重新尝试的过程被称为自旋\",{\"1\":{\"2872\":1,\"4126\":1}}],[\"这个应该没人使用吧\",{\"1\":{\"2768\":1,\"5130\":1}}],[\"这个索引的\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"这个对比有点废话\",{\"1\":{\"2340\":1,\"4702\":1}}],[\"这个恢复的过程依赖于\",{\"1\":{\"2337\":1,\"4699\":1}}],[\"这个域名归\",{\"1\":{\"2299\":1,\"5381\":1}}],[\"这个最后的一个点代表根域名\",{\"1\":{\"2287\":1,\"5369\":1}}],[\"这个怎么解决\",{\"0\":{\"1962\":1,\"4068\":1}}],[\"这个\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"这个开源项目\",{\"1\":{\"1192\":1,\"1360\":1,\"1528\":1,\"1696\":1,\"4603\":1}}],[\"这个过程是原子的\",{\"1\":{\"2862\":1,\"4116\":1}}],[\"这个过程是由\",{\"1\":{\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"4583\":1}}],[\"这个过程之中\",{\"1\":{\"1186\":1,\"1354\":1,\"1522\":1,\"1690\":1,\"4597\":1}}],[\"这个缓冲区\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"4581\":1}}],[\"这个就是水平触发的方式\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4562\":1}}],[\"这个方案\",{\"1\":{\"1226\":1,\"1394\":1,\"1562\":1,\"1730\":1,\"4637\":1}}],[\"这个方式就是边缘触发\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4562\":1}}],[\"这个方法的调用就会被转发到实现invocationhandler\",{\"1\":{\"613\":1,\"3806\":1}}],[\"这个方法一共有\",{\"1\":{\"612\":1,\"3805\":1}}],[\"这个方法主要用来生成一个代理对象\",{\"1\":{\"611\":1,\"3804\":1}}],[\"这个方法很重要\",{\"1\":{\"455\":1}}],[\"这个情况会越来越严重\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"这个时候可以使用\",{\"1\":{\"2898\":1,\"4152\":1}}],[\"这个时候对线程1来说\",{\"1\":{\"2866\":1,\"4120\":1}}],[\"这个时候有其他人来了只能在外面等\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"这个时候重新选举的时候我们如果把\",{\"1\":{\"1897\":1,\"4486\":1}}],[\"这个时候\",{\"1\":{\"1013\":2,\"1890\":1,\"1900\":1,\"4479\":1,\"4489\":1,\"5189\":2}}],[\"这个parent就是spring\",{\"1\":{\"947\":1,\"3964\":1}}],[\"这个半成品对象已经存放在缓存到singletonobjects\",{\"1\":{\"879\":1,\"3896\":1}}],[\"这个是最常用的\",{\"1\":{\"2766\":1,\"5128\":1}}],[\"这个是可以证明出来的\",{\"1\":{\"767\":1}}],[\"这个是无法更改的\",{\"1\":{\"567\":1}}],[\"这个扩容条件指的是什么呢\",{\"1\":{\"698\":1}}],[\"这个问题有人吐槽过\",{\"1\":{\"3394\":1}}],[\"这个问题看似简单\",{\"1\":{\"658\":1}}],[\"这个问题至此已经无解了\",{\"1\":{\"393\":1}}],[\"这个优势更加明显\",{\"1\":{\"626\":1,\"3819\":1}}],[\"这个实例就会被创建\",{\"1\":{\"582\":1,\"3775\":1}}],[\"这个关键字被占据了\",{\"1\":{\"393\":1}}],[\"这个stack\",{\"1\":{\"391\":1}}],[\"这个概念不是我说的\",{\"1\":{\"365\":1}}],[\"这个类的\",{\"1\":{\"2891\":1,\"4145\":1}}],[\"这个类的若干我们不需要的方法\",{\"1\":{\"392\":1}}],[\"这个类的一大问题\",{\"1\":{\"392\":1}}],[\"这个类的覆辙\",{\"1\":{\"392\":1}}],[\"这个类\",{\"1\":{\"344\":1,\"411\":1}}],[\"这个不推荐不是某个技术专家或者某个企业的规范标准\",{\"1\":{\"338\":1}}],[\"这种加锁的思路是\",{\"1\":{\"3291\":1,\"5560\":1}}],[\"这种任务应用起来\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"这种任务消耗的主要是\",{\"1\":{\"3076\":1,\"4330\":1}}],[\"这种结构每个数据都有两个指针\",{\"1\":{\"2914\":1,\"4168\":1}}],[\"这种现象就被称为幻读\",{\"1\":{\"2590\":1,\"4952\":1}}],[\"这种现象就被称为不可重复读\",{\"1\":{\"2584\":1,\"4946\":1}}],[\"这种现象就被称为脏读\",{\"1\":{\"2580\":1,\"4942\":1}}],[\"这种查询会加锁的语句称为锁定读\",{\"1\":{\"2534\":1,\"4896\":1}}],[\"这种不支持事务的引擎\",{\"1\":{\"2466\":1,\"4828\":1}}],[\"这种又长又难比较的数据\",{\"1\":{\"2398\":1,\"4760\":1}}],[\"这种方案并不能从根本上解决此问题\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"这种方案存在\",{\"1\":{\"1232\":1,\"1400\":1,\"1568\":1,\"1736\":1,\"4643\":1}}],[\"这种方法只适用于支持\",{\"1\":{\"2464\":1,\"4826\":1}}],[\"这种方式指的是在你的接口里\",{\"1\":{\"3308\":1}}],[\"这种方式可以解决请求的\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"这种方式需要依靠某种同步操作\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4541\":1}}],[\"这种方式会将hashmap的get方法的性能从o\",{\"1\":{\"778\":1}}],[\"这种思想很类似一个\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"这种通信方式主要用于解决与同步相关的问题并避免竞争条件\",{\"1\":{\"1129\":1,\"1297\":1,\"1465\":1,\"1633\":1,\"4540\":1}}],[\"这种分配方式明显的一个问题是随着消费者订阅的topic的数量的增加\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"这种模式让我们可以根据客户的需求能够动态切换不同的数据源\",{\"1\":{\"834\":1,\"3851\":1}}],[\"这种数据结构\",{\"1\":{\"340\":1,\"411\":1}}],[\"这种获取方式只有在编译前已经声明了该类的类型才能获取到\",{\"1\":{\"304\":1,\"3692\":1}}],[\"这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制\",{\"1\":{\"285\":1,\"3673\":1}}],[\"这种异常的特点是java编译器会检查它\",{\"1\":{\"251\":1,\"3647\":1}}],[\"这种异常又分为两类\",{\"1\":{\"242\":1,\"3638\":1}}],[\"这些并发工具类都在java\",{\"1\":{\"2881\":1,\"4135\":1}}],[\"这些函数被称为\",{\"1\":{\"2745\":1,\"5107\":1}}],[\"这些数据流之间独立互不影响\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"这些信息的组合\",{\"1\":{\"2116\":1}}],[\"这些信息包含如下\",{\"1\":{\"278\":1,\"3666\":1}}],[\"这些功能的实现主要依赖于\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"这些操作具有前后关系\",{\"1\":{\"1068\":1,\"5244\":1}}],[\"这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的\",{\"1\":{\"575\":1,\"3768\":1}}],[\"这些对比都是指数据量很大或者操作很频繁的情况下的对比\",{\"1\":{\"502\":1}}],[\"这些类和电脑类之间的关系\",{\"1\":{\"358\":1}}],[\"这些异常一般是由程序逻辑错误引起的\",{\"1\":{\"244\":1,\"3640\":1}}],[\"这些异常是不检查异常\",{\"1\":{\"244\":1,\"3640\":1}}],[\"这就会造成大问题\",{\"1\":{\"2887\":1,\"4141\":1}}],[\"这就好比雪崩一样\",{\"1\":{\"2804\":1,\"5166\":1}}],[\"这就可能会导致瞬时大量的请求直接打到了数据库上\",{\"1\":{\"2794\":1,\"5156\":1}}],[\"这就导致这些请求直接到了数据库上\",{\"1\":{\"2776\":1,\"5138\":1}}],[\"这就和\",{\"1\":{\"1919\":1,\"4508\":1}}],[\"这就叫\",{\"1\":{\"1913\":1,\"4502\":1}}],[\"这就要涉及到hashtable的构造函数和扩容函数了\",{\"1\":{\"763\":1}}],[\"这就很好的避免了冲突\",{\"1\":{\"755\":1}}],[\"这就产生了冲突\",{\"1\":{\"752\":1}}],[\"这就是我的自我介绍\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"这就是为什么只有在同步的块或者方法中才能调用wait\",{\"1\":{\"3005\":1,\"4259\":1}}],[\"这就是事务四大特性中的隔离性\",{\"1\":{\"2463\":1,\"4825\":1}}],[\"这就是所谓的零拷贝\",{\"1\":{\"1188\":1,\"1356\":1,\"1524\":1,\"1692\":1,\"4599\":1}}],[\"这就是两者的区别\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4563\":1}}],[\"这就是多路复用\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4546\":1}}],[\"这就是\",{\"1\":{\"393\":1}}],[\"这就是抛出异常\",{\"1\":{\"259\":1,\"3655\":1}}],[\"这就意味着\",{\"1\":{\"391\":1}}],[\"这就需要提到双亲委派模型了\",{\"1\":{\"222\":1,\"3616\":1}}],[\"这样会带来消息被重新消费的问题\",{\"1\":{\"5482\":1}}],[\"这样会影响缓存命中率\",{\"1\":{\"3205\":1,\"5474\":1}}],[\"这样会造成业务停滞\",{\"1\":{\"2460\":1,\"4822\":1}}],[\"这样会造成主索引频繁分裂\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"这样在\",{\"1\":{\"2530\":1,\"4892\":1}}],[\"这样在备份数据库期间\",{\"1\":{\"2457\":1,\"4819\":1}}],[\"这样的处理方式让写的同学更加明确线程池的运行规则\",{\"1\":{\"3088\":1,\"4342\":1}}],[\"这样的开销往往无法承受\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"这样的批量插入数据的语句\",{\"1\":{\"2528\":1,\"4890\":1}}],[\"这样的话\",{\"1\":{\"233\":1,\"3627\":1}}],[\"这样效率会很慢\",{\"1\":{\"2511\":1,\"4873\":1}}],[\"这样备份期间备份的数据一直是在开启事务时的数据\",{\"1\":{\"2463\":1,\"4825\":1}}],[\"这样查询可以利用索引的排序\",{\"1\":{\"2423\":1,\"4785\":1}}],[\"这样语义较为清晰的短值或短字符作为替代\",{\"1\":{\"2420\":1,\"4782\":1}}],[\"这样一来\",{\"1\":{\"2294\":1,\"5376\":1}}],[\"这样一个概念\",{\"1\":{\"378\":1}}],[\"这样网卡的\",{\"1\":{\"1185\":1,\"1353\":1,\"1521\":1,\"1689\":1,\"4596\":1}}],[\"这样就导致大量过期\",{\"1\":{\"2758\":1,\"5120\":1}}],[\"这样就有效的防止幻读现象的发生\",{\"1\":{\"2549\":1,\"4911\":1}}],[\"这样就不用去遍历表里的记录\",{\"1\":{\"2512\":1,\"4874\":1}}],[\"这样就产生了第\",{\"1\":{\"1256\":1,\"1424\":1,\"1592\":1,\"1760\":1,\"4667\":1}}],[\"这样就产生了单\",{\"1\":{\"1238\":1,\"1406\":1,\"1574\":1,\"1742\":1,\"4649\":1}}],[\"这样就减少了一次数据拷贝\",{\"1\":{\"1185\":1,\"1353\":1,\"1521\":1,\"1689\":1,\"4596\":1}}],[\"这样就只有\",{\"1\":{\"1180\":1,\"1348\":1,\"1516\":1,\"1684\":1,\"4591\":1}}],[\"这样就可以减少一次系统调用\",{\"1\":{\"1179\":1,\"1347\":1,\"1515\":1,\"1683\":1,\"4590\":1}}],[\"这样就会比较慢\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"这样就会出现数据不一致性问题了\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"这样就会出现消息并没有按照顺序执行\",{\"1\":{\"1070\":1,\"5246\":1}}],[\"这样就会造成顺序的错误\",{\"1\":{\"1070\":1,\"5246\":1}}],[\"这样\",{\"1\":{\"1135\":1,\"1167\":1,\"1303\":1,\"1335\":1,\"1471\":1,\"1503\":1,\"1639\":1,\"1671\":1,\"4546\":1,\"4578\":1}}],[\"这样也会造成吞吐量下降\",{\"1\":{\"1075\":1,\"5251\":1}}],[\"这样也会造成消息消费顺序错误\",{\"1\":{\"1072\":1,\"5248\":1}}],[\"这样c0总共就比c1\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"这样事务之间就完全不可能产生干扰\",{\"1\":{\"856\":1,\"3873\":1}}],[\"这样里两个数做按位与运算之后\",{\"1\":{\"757\":1}}],[\"这样设计是合理的\",{\"1\":{\"654\":1}}],[\"这样对\",{\"1\":{\"2755\":1,\"5117\":1}}],[\"这样对后续的关于\",{\"1\":{\"897\":1,\"3914\":1}}],[\"这样对于效率影响不大\",{\"1\":{\"636\":1,\"3728\":1}}],[\"这样对内存更加友好\",{\"1\":{\"204\":1,\"3598\":1}}],[\"这样不⽤通过指定类型来创建对象了\",{\"1\":{\"590\":1,\"3783\":1}}],[\"这样可以减少调整大小的开销\",{\"1\":{\"506\":1}}],[\"这样做\",{\"1\":{\"378\":1}}],[\"这\",{\"1\":{\"191\":1,\"3585\":1}}],[\"这是不想要我刷kpi呢\",{\"1\":{\"3187\":1}}],[\"这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放\",{\"1\":{\"3002\":1,\"4256\":1}}],[\"这是面试高频考点\",{\"1\":{\"2884\":1,\"4138\":1}}],[\"这是通过对主键字段声明\",{\"1\":{\"2515\":1,\"4877\":1}}],[\"这是和三个一样的\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"这是错的\",{\"1\":{\"1146\":1,\"1314\":1,\"1482\":1,\"1650\":1,\"4557\":1}}],[\"这是springboot程序的监控系统\",{\"1\":{\"939\":1,\"3956\":1}}],[\"这是开发人员最需要的功能\",{\"1\":{\"929\":1,\"3946\":1}}],[\"这是⾮常麻烦的\",{\"1\":{\"598\":1,\"3791\":1}}],[\"这是因为申请\",{\"1\":{\"2499\":1,\"4861\":1}}],[\"这是因为\",{\"1\":{\"404\":1,\"2857\":1,\"4111\":1}}],[\"这是\",{\"1\":{\"368\":1}}],[\"这是项目主页的案例\",{\"1\":{\"150\":1,\"154\":1,\"3549\":1}}],[\"这是脚注内容\",{\"1\":{\"113\":1,\"3512\":1}}],[\"u\",{\"1\":{\"2901\":1,\"4155\":1}}],[\"up\",{\"1\":{\"2622\":1,\"2625\":2,\"4984\":1,\"4987\":2}}],[\"update等语句\",{\"1\":{\"2452\":1,\"4814\":1}}],[\"update\",{\"1\":{\"982\":1,\"996\":1,\"2508\":1,\"2535\":1,\"2609\":2,\"2633\":1,\"3999\":1,\"4013\":1,\"4870\":1,\"4897\":1,\"4971\":2,\"4995\":1}}],[\"uuid\",{\"1\":{\"2398\":1,\"4760\":1}}],[\"udp\",{\"0\":{\"2136\":1,\"2158\":1,\"2171\":1,\"2228\":1,\"5310\":1},\"1\":{\"2061\":1,\"2062\":1,\"2112\":1,\"2135\":1,\"2139\":1,\"2142\":1,\"2145\":3,\"2148\":2,\"2151\":1,\"2154\":1,\"2157\":1,\"2162\":2,\"2167\":1,\"2168\":2,\"2169\":1,\"2170\":2,\"2174\":1,\"2175\":3,\"2176\":2,\"2177\":1,\"2275\":2,\"5275\":3,\"5357\":2}}],[\"utm\",{\"1\":{\"1056\":2,\"1065\":3,\"5232\":2,\"5241\":3}}],[\"utils\",{\"1\":{\"1024\":4,\"5200\":4}}],[\"util包中的一个类\",{\"1\":{\"527\":1}}],[\"util\",{\"1\":{\"300\":2,\"309\":1,\"313\":1,\"316\":1,\"527\":1,\"2881\":1,\"3041\":4,\"3688\":2,\"3697\":1,\"3701\":1,\"3704\":1,\"4135\":1,\"4295\":4}}],[\"uri\",{\"1\":{\"818\":2,\"3835\":2}}],[\"url\",{\"1\":{\"818\":1,\"2281\":3,\"3835\":1,\"5363\":3}}],[\"used\",{\"1\":{\"2763\":1,\"2766\":1,\"2770\":1,\"2771\":1,\"5125\":1,\"5128\":1,\"5132\":1,\"5133\":1}}],[\"username\",{\"1\":{\"3340\":1,\"3346\":1}}],[\"username=18666666666\",{\"1\":{\"3339\":1,\"3345\":1}}],[\"user就是这么做的\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"user\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"use\",{\"1\":{\"263\":1,\"720\":1,\"3043\":3,\"3659\":1,\"4297\":3}}],[\"using\",{\"1\":{\"190\":1,\"775\":1,\"3584\":1}}],[\"unless\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"unlock\",{\"1\":{\"2455\":1,\"2480\":1,\"4817\":1,\"4842\":1}}],[\"unloading\",{\"1\":{\"190\":1,\"3584\":1}}],[\"unsafe这个类中定义了\",{\"1\":{\"2880\":1,\"4134\":1}}],[\"undo\",{\"0\":{\"2629\":1,\"4991\":1},\"1\":{\"2573\":1,\"2615\":2,\"2619\":1,\"2622\":1,\"2630\":1,\"2632\":1,\"2633\":3,\"2634\":3,\"4935\":1,\"4977\":2,\"4981\":1,\"4984\":1,\"4992\":1,\"4994\":1,\"4995\":3,\"4996\":3}}],[\"unit\",{\"1\":{\"3043\":4,\"3050\":1,\"4297\":4,\"4304\":1}}],[\"union\",{\"1\":{\"2664\":1,\"5026\":1}}],[\"unionfs\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"unique\",{\"1\":{\"2386\":1,\"4748\":1}}],[\"unmodified\",{\"1\":{\"2267\":1,\"5349\":1}}],[\"uncommitted\",{\"1\":{\"853\":1,\"2593\":1,\"3870\":1,\"4955\":1}}],[\"unchecked\",{\"0\":{\"248\":1,\"3644\":1}}],[\"准备了一个\",{\"1\":{\"1879\":1,\"4468\":1}}],[\"准备\",{\"1\":{\"190\":1,\"3584\":1}}],[\"验证数据是否被篡改\",{\"1\":{\"3384\":1}}],[\"验证数据的有效性\",{\"1\":{\"824\":1,\"3841\":1}}],[\"验证是对自己的问询\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"验证结果存储到\",{\"1\":{\"824\":1,\"3841\":1}}],[\"验证代码如下\",{\"1\":{\"703\":1}}],[\"验证\",{\"1\":{\"190\":1,\"195\":1,\"3584\":1,\"3589\":1}}],[\"加盐流程\",{\"1\":{\"3370\":1}}],[\"加盐的目的也是为了尽量增强明文密码的复杂度\",{\"1\":{\"3369\":1}}],[\"加盐是指在密码的任意位置插入一些指定的字符串\",{\"1\":{\"3369\":1}}],[\"加盐sault\",{\"1\":{\"3368\":1}}],[\"加\",{\"1\":{\"2489\":1,\"2490\":1,\"3149\":1,\"4851\":1,\"4852\":1,\"5429\":1}}],[\"加的是\",{\"1\":{\"2486\":1,\"2487\":1,\"4848\":1,\"4849\":1}}],[\"加表锁\",{\"1\":{\"2475\":1,\"4837\":1}}],[\"加上全局锁\",{\"1\":{\"2459\":1,\"4821\":1}}],[\"加全局锁又会带来什么缺点呢\",{\"1\":{\"2458\":1,\"4820\":1}}],[\"加速查询\",{\"1\":{\"2371\":1,\"2373\":1,\"4733\":1,\"4735\":1}}],[\"加密和解密花费时间长\",{\"1\":{\"3400\":1}}],[\"加密效率高的特点\",{\"1\":{\"3397\":1}}],[\"加密速度快\",{\"1\":{\"3397\":1}}],[\"加密解密密钥是相同的\",{\"1\":{\"3390\":1}}],[\"加密\",{\"1\":{\"3249\":1,\"5518\":1}}],[\"加密采用对称加密\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"加密展示\",{\"1\":{\"8\":1,\"100\":1,\"3407\":1,\"3499\":1}}],[\"加入到自己的\",{\"1\":{\"2246\":1,\"5328\":1}}],[\"加开关\",{\"1\":{\"1965\":1,\"4071\":1}}],[\"加分布式锁\",{\"1\":{\"1951\":1,\"4057\":1}}],[\"加快排序查询时间\",{\"1\":{\"2423\":1,\"4785\":1}}],[\"加快数据恢复的速率\",{\"1\":{\"1019\":1,\"5195\":1}}],[\"加快读写速度\",{\"1\":{\"1018\":1,\"5194\":1}}],[\"加锁\",{\"1\":{\"581\":1,\"582\":1,\"1121\":1,\"1289\":1,\"1457\":1,\"1625\":1,\"3774\":1,\"3775\":1,\"4532\":1}}],[\"加载配置文件的优先级了解么\",{\"0\":{\"910\":1,\"3927\":1}}],[\"加载自动装配类\",{\"1\":{\"909\":1,\"3926\":1}}],[\"加载指定二进制名称的类\",{\"1\":{\"214\":1,\"3608\":1}}],[\"加载时再利用自定义的类加载器对其解密\",{\"1\":{\"211\":1,\"3605\":1}}],[\"加载\",{\"1\":{\"190\":1,\"195\":1,\"3584\":1,\"3589\":1}}],[\"70730532\",{\"1\":{\"2995\":1,\"4249\":1}}],[\"7字节\",{\"1\":{\"2619\":1,\"4981\":1}}],[\"7为什么\",{\"0\":{\"2196\":1}}],[\"7第一次握手丢失了\",{\"0\":{\"2185\":1}}],[\"7tcp\",{\"0\":{\"2171\":1}}],[\"76435385\",{\"1\":{\"1065\":2,\"5241\":2}}],[\"76ms\",{\"1\":{\"408\":1}}],[\"7中的实现几乎无差别\",{\"1\":{\"786\":1}}],[\"7中基本类似\",{\"1\":{\"780\":1}}],[\"7中hashmap和hashtable中对于hash的实现\",{\"1\":{\"768\":1}}],[\"7中hashmap的hash方法以及indexof方法的实现\",{\"1\":{\"759\":1}}],[\"7中hashtable的hash方法的实现\",{\"1\":{\"759\":1}}],[\"7中扩容时\",{\"1\":{\"630\":1,\"3722\":1}}],[\"7的hashmap为例\",{\"1\":{\"719\":1}}],[\"73\",{\"1\":{\"712\":1}}],[\"7540正式发表了\",{\"1\":{\"1971\":1,\"1986\":1,\"2001\":1,\"2014\":1,\"2027\":1,\"2042\":1,\"5262\":1,\"5285\":1}}],[\"75\",{\"1\":{\"702\":1,\"706\":2}}],[\"75正好是3\",{\"1\":{\"701\":1}}],[\"75有一个好处\",{\"1\":{\"701\":1}}],[\"75f\",{\"1\":{\"678\":2,\"701\":1}}],[\"7\",{\"0\":{\"261\":1,\"642\":1,\"2022\":1,\"3657\":1},\"1\":{\"190\":1,\"191\":1,\"276\":1,\"691\":1,\"693\":1,\"728\":1,\"729\":1,\"735\":1,\"740\":1,\"741\":1,\"748\":1,\"758\":1,\"774\":1,\"792\":1,\"827\":1,\"1013\":1,\"1065\":3,\"2155\":1,\"2237\":2,\"2708\":1,\"2716\":1,\"3125\":1,\"3162\":1,\"3176\":1,\"3185\":1,\"3584\":1,\"3585\":1,\"3664\":1,\"3844\":1,\"5070\":1,\"5078\":1,\"5189\":1,\"5241\":3,\"5319\":2,\"5405\":1,\"5442\":1,\"5456\":1}}],[\"类内部的\",{\"1\":{\"3028\":1,\"4282\":1}}],[\"类实现的定制化的\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"类来保证引用对象之间的原子性\",{\"1\":{\"2898\":1,\"4152\":1}}],[\"类似\",{\"1\":{\"2528\":1,\"4890\":1}}],[\"类似键值对的形式\",{\"1\":{\"2364\":1,\"4726\":1}}],[\"类似于数据库的主键\",{\"1\":{\"1063\":1,\"5239\":1}}],[\"类中可以通过thread\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"类中有一个\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"类中使用频率最高的方法是\",{\"1\":{\"611\":1,\"3804\":1}}],[\"类中的\",{\"1\":{\"219\":1,\"3613\":1}}],[\"类是核心\",{\"1\":{\"610\":1,\"620\":1,\"3803\":1,\"3813\":1}}],[\"类库中有很多具体的实现\",{\"1\":{\"465\":1}}],[\"类或者\",{\"1\":{\"379\":1}}],[\"类到底怎么了\",{\"0\":{\"343\":1}}],[\"类\",{\"0\":{\"337\":1},\"1\":{\"344\":1,\"379\":1}}],[\"类名\",{\"1\":{\"304\":1,\"3692\":1}}],[\"类型为精准浮点数\",{\"1\":{\"2650\":1,\"5012\":1}}],[\"类型\",{\"0\":{\"2647\":1,\"5009\":1}}],[\"类型转换等操作\",{\"1\":{\"2441\":1,\"4803\":1}}],[\"类型总结\",{\"0\":{\"2361\":1,\"4723\":1}}],[\"类型的变量\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"类型的底层数据结构是由压缩列表或跳表实现的\",{\"1\":{\"2713\":1,\"5075\":1}}],[\"类型的底层数据结构是由压缩列表或哈希表实现的\",{\"1\":{\"2705\":1,\"5067\":1}}],[\"类型的底层数据结构是由哈希表或整数集合实现的\",{\"1\":{\"2698\":1,\"5060\":1}}],[\"类型的底层数据结构是由双向链表或压缩列表实现的\",{\"1\":{\"2690\":1,\"5052\":1}}],[\"类型的底层数据结构\",{\"1\":{\"2691\":1,\"2692\":1,\"2699\":1,\"2700\":1,\"2706\":1,\"2714\":1,\"2715\":1,\"5053\":1,\"5054\":1,\"5061\":1,\"5062\":1,\"5068\":1,\"5076\":1,\"5077\":1}}],[\"类型的底层的数据结构实现主要是\",{\"1\":{\"2679\":1,\"5041\":1}}],[\"类型的\",{\"1\":{\"893\":1,\"2707\":1,\"2710\":1,\"3910\":1,\"5069\":1,\"5072\":1}}],[\"类型的类和方法\",{\"1\":{\"625\":1,\"3818\":1}}],[\"类型的文件主要三步\",{\"1\":{\"195\":1,\"3589\":1}}],[\"类型上都属于exception类及其子类\",{\"1\":{\"247\":1,\"3643\":1}}],[\"类及其子类\",{\"1\":{\"241\":1,\"3637\":1}}],[\"类使用委托模型来搜索类和资源\",{\"1\":{\"223\":1,\"3617\":1}}],[\"类有两个关键的方法\",{\"1\":{\"213\":1,\"3607\":1}}],[\"类的相关字节码信息\",{\"1\":{\"2999\":1,\"4253\":1}}],[\"类的\",{\"1\":{\"615\":1,\"1776\":1,\"3026\":1,\"3808\":1,\"4280\":1,\"4365\":1}}],[\"类的对象\",{\"1\":{\"404\":1}}],[\"类的实现不好吗\",{\"0\":{\"367\":1}}],[\"类的全限定名\",{\"1\":{\"308\":1,\"3696\":1}}],[\"类的字节码\",{\"1\":{\"202\":1,\"211\":1,\"3596\":1,\"3605\":1}}],[\"类的生命周期\",{\"0\":{\"189\":1,\"3583\":1}}],[\"类都有一个引用指向加载它的\",{\"1\":{\"200\":1,\"3594\":1}}],[\"类从被加载到虚拟机内存中开始到卸载出内存为止\",{\"1\":{\"190\":1,\"3584\":1}}],[\"类加载过程\",{\"0\":{\"193\":1,\"3587\":1},\"1\":{\"196\":1,\"3590\":1}}],[\"类加载机制\",{\"0\":{\"188\":1,\"3582\":1}}],[\"类加载器在进行类加载的时候\",{\"1\":{\"233\":1,\"3627\":1}}],[\"类加载器有很多种\",{\"1\":{\"222\":1,\"3616\":1}}],[\"类加载器层次关系图\",{\"1\":{\"220\":1,\"227\":1,\"3614\":1,\"3621\":1}}],[\"类加载器总结\",{\"0\":{\"206\":1,\"3600\":1}}],[\"类加载器加载规则\",{\"0\":{\"203\":1,\"3597\":1}}],[\"类加载器的主要作用就是加载\",{\"1\":{\"202\":1,\"3596\":1}}],[\"类加载器是一个负责加载类的对象\",{\"1\":{\"199\":1,\"3593\":1}}],[\"类加载器\",{\"0\":{\"197\":1,\"3591\":1},\"1\":{\"178\":1,\"612\":1,\"3572\":1,\"3805\":1}}],[\"垃圾收集器\",{\"0\":{\"187\":1,\"3581\":1}}],[\"垃圾回收算法\",{\"0\":{\"186\":1,\"3580\":1}}],[\"垃圾回收机制\",{\"0\":{\"184\":1,\"3578\":1}}],[\"如aes\",{\"1\":{\"3387\":1}}],[\"如reentrantlock\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"如不可见\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"如主键索引\",{\"1\":{\"2411\":1,\"4773\":1}}],[\"如今的\",{\"1\":{\"2170\":1}}],[\"如服务发现注册\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"如互斥锁和信号量等\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4541\":1}}],[\"如何动态修改线程池的参数\",{\"0\":{\"3093\":1,\"4347\":1}}],[\"如何设定线程池的大小\",{\"1\":{\"3074\":1,\"4328\":1}}],[\"如何创建线程池\",{\"0\":{\"3039\":1,\"4293\":1}}],[\"如何解决\",{\"1\":{\"2888\":1,\"4142\":1}}],[\"如何解决深分页的问题\",{\"0\":{\"1946\":1,\"4052\":1}}],[\"如何比较和选择\",{\"0\":{\"2820\":1,\"4074\":1}}],[\"如何保证原子性呢\",{\"1\":{\"2858\":1,\"4112\":1}}],[\"如何保证\",{\"1\":{\"2761\":1,\"5123\":1}}],[\"如何保证消息的消费顺序\",{\"0\":{\"1074\":1,\"5250\":1}}],[\"如何保证消息的顺序性\",{\"0\":{\"1066\":1,\"5242\":1}}],[\"如何基于\",{\"1\":{\"2145\":1}}],[\"如何优化\",{\"1\":{\"2084\":1}}],[\"如何避免\",{\"0\":{\"2188\":1},\"1\":{\"2073\":1}}],[\"如何在\",{\"1\":{\"2065\":1}}],[\"如何唯一确定一个\",{\"1\":{\"2060\":1}}],[\"如何做多机房容灾\",{\"0\":{\"1952\":1,\"4058\":1}}],[\"如何提高搜索性能\",{\"0\":{\"1944\":1,\"4050\":1}}],[\"如何与elk整合\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"如何服务更多的用户\",{\"1\":{\"1158\":1,\"1326\":1,\"1494\":1,\"1662\":1,\"4569\":1}}],[\"如何使用\",{\"0\":{\"914\":1,\"3931\":1}}],[\"如何判断对象是否可回收\",{\"0\":{\"185\":1,\"3579\":1}}],[\"如\",{\"1\":{\"821\":1,\"822\":1,\"823\":1,\"1154\":1,\"1198\":1,\"1322\":1,\"1366\":1,\"1490\":1,\"1534\":1,\"1658\":1,\"1702\":1,\"2163\":1,\"2176\":1,\"2415\":1,\"2434\":1,\"3838\":1,\"3839\":1,\"3840\":1,\"4565\":1,\"4609\":1,\"4777\":1,\"4796\":1}}],[\"如第一个\",{\"1\":{\"447\":1,\"797\":1}}],[\"如下表\",{\"1\":{\"3353\":1}}],[\"如下图\",{\"1\":{\"1180\":1,\"1186\":1,\"1348\":1,\"1354\":1,\"1516\":1,\"1522\":1,\"1684\":1,\"1690\":1,\"4591\":1,\"4597\":1}}],[\"如下图所示\",{\"1\":{\"750\":1,\"2938\":1,\"2939\":1,\"2950\":1,\"3094\":1,\"4192\":1,\"4193\":1,\"4204\":1,\"4348\":1}}],[\"如下\",{\"1\":{\"287\":1,\"3675\":1}}],[\"如下所示\",{\"1\":{\"256\":1,\"259\":1,\"344\":1,\"3652\":1,\"3655\":1}}],[\"如ioexception\",{\"1\":{\"247\":1,\"3643\":1}}],[\"如nullpointerexception\",{\"1\":{\"244\":1,\"3640\":1}}],[\"如果出现两次\",{\"1\":{\"3313\":1}}],[\"如果出现前后两次查询到的记录数量不一样的情况\",{\"1\":{\"2586\":1,\"4948\":1}}],[\"如果出现前后两次读到的数据不一样的情况\",{\"1\":{\"2582\":1,\"4944\":1}}],[\"如果返回失败\",{\"1\":{\"3293\":1,\"5562\":1}}],[\"如果设置成功就表示加锁成功\",{\"1\":{\"3292\":1,\"5561\":1}}],[\"如果设计成继承关系的话\",{\"1\":{\"362\":1}}],[\"如果审核成功\",{\"1\":{\"3257\":1,\"5526\":1}}],[\"如果审核失败\",{\"1\":{\"3256\":1,\"5525\":1}}],[\"如果负责的活动和实验室科研冲突了怎么平衡\",{\"1\":{\"3175\":1,\"5455\":1}}],[\"如果向任务队列投放任务失败\",{\"1\":{\"3071\":1,\"4325\":1}}],[\"如果队列满了\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话\",{\"1\":{\"3058\":1,\"4312\":1}}],[\"如果执行程序已关闭\",{\"1\":{\"3058\":1,\"4312\":1}}],[\"如果执行失败\",{\"1\":{\"1936\":1,\"4042\":1}}],[\"如果这时没有新的任务提交\",{\"1\":{\"3049\":1,\"4303\":1}}],[\"如果这个位置为空\",{\"1\":{\"460\":1}}],[\"如果达到的话\",{\"1\":{\"3047\":1,\"3063\":1,\"4301\":1,\"4317\":1}}],[\"如果达到片段上限\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"如果无限制的创建\",{\"1\":{\"3038\":1,\"4292\":1}}],[\"如果获取对象锁失败\",{\"1\":{\"3007\":1,\"4261\":1}}],[\"如果获取了锁就\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"如果获取了锁\",{\"1\":{\"2924\":1,\"4178\":1}}],[\"如果获取了就什么也不干\",{\"1\":{\"2922\":1,\"4176\":1}}],[\"如果锁的计数器为\",{\"1\":{\"3006\":1,\"4260\":1}}],[\"如果能获取到\",{\"1\":{\"2990\":1,\"4244\":1}}],[\"如果对某个资源是读操作\",{\"1\":{\"2984\":1,\"4238\":1}}],[\"如果对索引列的数据被修改时\",{\"1\":{\"2399\":1,\"4761\":1}}],[\"如果读读之间互斥\",{\"1\":{\"2978\":1,\"4232\":1}}],[\"如果发现冲突了\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"如果发生了读写冲突的时候\",{\"1\":{\"2596\":1,\"4958\":1}}],[\"如果加锁的时间过长\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"如果存在就唤醒自己的后继节点\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"如果存在一个值不为\",{\"1\":{\"2791\":1,\"5153\":1}}],[\"如果没获取就创造一个节点通过compareandsettail\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"如果没有则返回未认证错误\",{\"1\":{\"3227\":1,\"3238\":1,\"5496\":1,\"5507\":1}}],[\"如果没有则new一个对象来一个一个set\",{\"1\":{\"1930\":1,\"4036\":1}}],[\"如果没有的话\",{\"1\":{\"3097\":1,\"4351\":1}}],[\"如果没有获取锁\",{\"1\":{\"2923\":1,\"4177\":1}}],[\"如果没有设置主键且该表没有唯一非空索引时\",{\"1\":{\"2620\":1,\"4982\":1}}],[\"如果没有\",{\"1\":{\"2298\":1,\"2511\":1,\"4873\":1,\"5380\":1}}],[\"如果没有创建\",{\"1\":{\"582\":1,\"3775\":1}}],[\"如果没有指定\",{\"1\":{\"564\":1}}],[\"如果被请求的共享资源被占用\",{\"1\":{\"2915\":1,\"4169\":1}}],[\"如果被请求的共享资源空闲\",{\"1\":{\"2915\":1,\"4169\":1}}],[\"如果被引用过一次\",{\"1\":{\"1093\":1}}],[\"如果它的后继节点是shared状态\",{\"1\":{\"2911\":1,\"4165\":1}}],[\"如果资源竞争非常激烈\",{\"1\":{\"2893\":1,\"4147\":1}}],[\"如果全部相等\",{\"1\":{\"2891\":1,\"4145\":1}}],[\"如果多次失败会有多次自旋\",{\"1\":{\"2872\":1,\"4126\":1}}],[\"如果因为冲突失败了就重试\",{\"1\":{\"2860\":1,\"4114\":1}}],[\"如果线程竞争不激烈\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"如果线程的竞争很激励\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"如果线程不处于活动状态\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"如果抢到锁\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"如果值都为\",{\"1\":{\"2791\":1,\"5153\":1}}],[\"如果非要用这种方式来解决穿透问题的话\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"如果黑客恶意攻击\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"如果缓存和数据库都查不到某个\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"如果缓存里的表格能找到\",{\"1\":{\"2298\":1,\"5380\":1}}],[\"如果假设你设置了一批\",{\"1\":{\"2753\":1,\"5115\":1}}],[\"如果至少有10000个key发生变化\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"如果至少有10个key发生变化\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"如果至少有1个key发生变化\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"如果哈希类型元素不满足上面条件\",{\"1\":{\"2707\":1,\"5069\":1}}],[\"如果哈希类型元素个数小于\",{\"1\":{\"2706\":1,\"5068\":1}}],[\"如果集合中的元素不满足上面条件\",{\"1\":{\"2700\":1,\"5062\":1}}],[\"如果集合中的元素都是整数且元素个数小于\",{\"1\":{\"2699\":1,\"5061\":1}}],[\"如果列表的元素不满足上面的条件\",{\"1\":{\"2692\":1,\"5054\":1}}],[\"如果列表的元素个数小于\",{\"1\":{\"2691\":1,\"5053\":1}}],[\"如果列表长度未知\",{\"1\":{\"482\":1}}],[\"如果空间不够会自动扩容\",{\"1\":{\"2683\":1,\"5045\":1}}],[\"如果该行未被更新\",{\"1\":{\"2619\":1,\"4981\":1}}],[\"如果该list是arraylist那么\",{\"1\":{\"552\":1}}],[\"如果说间隙锁锁住的是一个区间\",{\"1\":{\"2561\":1,\"4923\":1}}],[\"如果可以考虑\",{\"1\":{\"2500\":1,\"4862\":1}}],[\"如果可能\",{\"1\":{\"362\":1}}],[\"如果同时有很多个索引都可以用于查询\",{\"1\":{\"2430\":1,\"4792\":1}}],[\"如果同时需要根据索引位置进行操作\",{\"1\":{\"489\":1}}],[\"如果字段频繁被查询\",{\"1\":{\"2420\":1,\"4782\":1}}],[\"如果查询条件中存在与联合索引中最左侧字段相匹配的字段\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"如果一方的密钥被泄露\",{\"1\":{\"3398\":1}}],[\"如果一个表包含过多字段的话\",{\"1\":{\"2653\":1,\"5015\":1}}],[\"如果一个表的字段过多\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"如果一个事务\",{\"1\":{\"2577\":1,\"4939\":1}}],[\"如果一个事务获取了\",{\"1\":{\"2554\":1,\"4916\":1}}],[\"如果一个字段不被经常查询\",{\"1\":{\"2426\":1,\"4788\":1}}],[\"如果一个索引包含\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"如果一条\",{\"1\":{\"2411\":2,\"4773\":2}}],[\"如果一阶段某一节点失败仍会导致数据不正确\",{\"1\":{\"1814\":1,\"4403\":1}}],[\"如果数据量特别大\",{\"1\":{\"3271\":1,\"5540\":1}}],[\"如果数据库的引擎支持的事务支持可重复读的隔离级别\",{\"1\":{\"2462\":1,\"4824\":1}}],[\"如果数据是整型还好\",{\"1\":{\"2398\":1,\"4760\":1}}],[\"如果数据和运算量很小\",{\"1\":{\"502\":1}}],[\"如果索引的数据不是有序的\",{\"1\":{\"2398\":1,\"4760\":1}}],[\"如果指定的\",{\"1\":{\"2359\":1,\"4721\":1}}],[\"如果主机\",{\"1\":{\"2250\":1,\"5332\":1}}],[\"如果中途丢失了一个分片\",{\"1\":{\"2156\":1}}],[\"如果接收方的程序如果不知道\",{\"1\":{\"2114\":1}}],[\"如果需要回收核心线程数\",{\"1\":{\"3104\":1,\"4358\":1}}],[\"如果需要预热的话可以调用下面的两个方法\",{\"1\":{\"3098\":1,\"4352\":1}}],[\"如果需要保障网络数据包的可靠性\",{\"1\":{\"2107\":1}}],[\"如果需要生产新的类\",{\"1\":{\"327\":1,\"3715\":1}}],[\"如果已经建立了连接\",{\"1\":{\"2087\":1,\"2088\":1}}],[\"如果已经点赞则抛出异常\",{\"1\":{\"1930\":1,\"4036\":1}}],[\"如果操作的是相同数据\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"如果操作的是各自的数据的话\",{\"1\":{\"1957\":1,\"4063\":1}}],[\"如果老数据没有动\",{\"1\":{\"1949\":1,\"4055\":1}}],[\"如果还有另一个重要的字段也需要查\",{\"1\":{\"1945\":1,\"4051\":1}}],[\"如果mq服务器长时间没有收到生产者的commit或者rollback\",{\"1\":{\"1939\":1,\"4045\":1}}],[\"如果消息状态更新为可发送\",{\"1\":{\"1938\":1,\"4044\":1}}],[\"如果消费者消费失败\",{\"1\":{\"1940\":1,\"4046\":1}}],[\"如果消费者消费失败怎么办呢\",{\"1\":{\"1940\":1,\"4046\":1}}],[\"如果消费者在默认的5分钟内没有处理完这一批消息\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"如果消费组内\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"如果本地事务执行成功\",{\"1\":{\"1936\":1,\"4042\":1}}],[\"如果网络分区正常的话\",{\"1\":{\"1921\":1,\"4510\":1}}],[\"如果网卡支持\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"如果只是\",{\"1\":{\"1894\":1,\"4483\":1}}],[\"如果只需要deque接口\",{\"1\":{\"489\":1}}],[\"如果相同那么就\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"如果相同则比较\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\",{\"1\":{\"2925\":1,\"4179\":1}}],[\"如果在上面这种情况事务\",{\"1\":{\"2580\":1,\"4942\":1}}],[\"如果在整个集群运行的过程中\",{\"1\":{\"1888\":1,\"4477\":1}}],[\"如果在调用的时候显示的传入一个对象\",{\"1\":{\"564\":1}}],[\"如果超过半数以上的同意那么就进行\",{\"1\":{\"1878\":1,\"4467\":1}}],[\"如果此时事务\",{\"1\":{\"2579\":1,\"4941\":1}}],[\"如果此时有大量该表的\",{\"1\":{\"2497\":1,\"4859\":1}}],[\"如果此时集群中已经存在一个\",{\"1\":{\"1867\":1,\"4456\":1}}],[\"如果此时再订阅一个分区数为4的topic\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"如果事物涉及的节点很多\",{\"1\":{\"1814\":1,\"4403\":1}}],[\"如果有一个预先计算好的常用口令和它们的\",{\"1\":{\"3353\":1}}],[\"如果有空闲线程\",{\"1\":{\"3066\":1,\"4320\":1}}],[\"如果有修改动作\",{\"1\":{\"2984\":1,\"4238\":1}}],[\"如果有序集合的元素不满足上面的条件\",{\"1\":{\"2715\":1,\"5077\":1}}],[\"如果有序集合的元素个数小于\",{\"1\":{\"2714\":1,\"5076\":1}}],[\"如果有其他事务在\",{\"1\":{\"2609\":1,\"4971\":1}}],[\"如果有其他线程执行了\",{\"1\":{\"2490\":1,\"4852\":1}}],[\"如果有其他线程要更改该表的结构\",{\"1\":{\"2489\":1,\"4851\":1}}],[\"如果有的话\",{\"1\":{\"2559\":1,\"4921\":1}}],[\"如果有就意味着表里已经有记录被加了独占锁\",{\"1\":{\"2512\":1,\"4874\":1}}],[\"如果有\",{\"1\":{\"2380\":1,\"3227\":1,\"3238\":1,\"4742\":1,\"5496\":1,\"5507\":1}}],[\"如果有多个表\",{\"0\":{\"1946\":1,\"4052\":1}}],[\"如果有新的事件发生时\",{\"1\":{\"1262\":1,\"1430\":1,\"1598\":1,\"1766\":1,\"4673\":1}}],[\"如果有同学需要使用\",{\"1\":{\"411\":1}}],[\"如果业务处理耗时比较长\",{\"1\":{\"1234\":1,\"1402\":1,\"1570\":1,\"1738\":1,\"4645\":1}}],[\"如果快递箱发现你的快递没有被取出\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4562\":1}}],[\"如果快递箱只会通过短信通知你一次\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4562\":1}}],[\"如果某块数据被访问\",{\"1\":{\"1092\":1}}],[\"如果订阅的topic列表是不同的\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"如果使用了\",{\"1\":{\"2150\":1}}],[\"如果使用边缘触发模式\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"如果使用水平触发模式\",{\"1\":{\"1153\":1,\"1321\":1,\"1489\":1,\"1657\":1,\"4564\":1}}],[\"如果使用可用分区\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"如果使用二进制的位运算的话就可以很好的避免这个问题\",{\"1\":{\"757\":1}}],[\"如果配置的是7个片段\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"如果是登录\",{\"1\":{\"3224\":1,\"3235\":1,\"5493\":1,\"5504\":1}}],[\"如果是静态方法\",{\"1\":{\"3012\":1,\"4266\":1}}],[\"如果是实例方法\",{\"1\":{\"3012\":1,\"4266\":1}}],[\"如果是整型还好\",{\"1\":{\"2887\":1,\"4141\":1}}],[\"如果是则唤醒头节点的下一个节点\",{\"1\":{\"2911\":1,\"4165\":1}}],[\"如果是则更改为新的值\",{\"1\":{\"2862\":1,\"4116\":1}}],[\"如果是则将其设置为\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"如果是则正常往下执行\",{\"1\":{\"2841\":1,\"4095\":1}}],[\"如果是联合索引\",{\"1\":{\"2432\":1,\"4794\":1}}],[\"如果是\",{\"1\":{\"2243\":1,\"5325\":1}}],[\"如果是rollback\",{\"1\":{\"1937\":1,\"4043\":1}}],[\"如果是commit正常提交\",{\"1\":{\"1937\":1,\"4043\":1}}],[\"如果是写请求则要转发给\",{\"1\":{\"1873\":1,\"4462\":1}}],[\"如果是读请求则可以自己处理\",{\"1\":{\"1873\":1,\"4462\":1}}],[\"如果是连接建立的事件\",{\"1\":{\"1228\":1,\"1243\":1,\"1396\":1,\"1411\":1,\"1564\":1,\"1579\":1,\"1732\":1,\"1747\":1,\"4639\":1,\"4654\":1}}],[\"如果是我们自己处理的话该怎么解决\",{\"1\":{\"875\":1,\"3892\":1}}],[\"如果是第⼀次进⼊则为\",{\"1\":{\"582\":1,\"3775\":1}}],[\"如果当前运行的线程数已经等同于最大线程数了\",{\"1\":{\"3072\":1,\"4326\":1}}],[\"如果当前运行的线程数等于或大于核心线程数\",{\"1\":{\"3070\":1,\"4324\":1}}],[\"如果当前运行的线程数小于核心线程数\",{\"1\":{\"3069\":1,\"4323\":1}}],[\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时\",{\"1\":{\"3056\":1,\"4310\":1}}],[\"如果当前线程竞争锁失败\",{\"1\":{\"2913\":1,\"4167\":1}}],[\"如果当前没有事务\",{\"1\":{\"860\":1,\"861\":1,\"862\":1,\"868\":1,\"3877\":1,\"3878\":1,\"3879\":1,\"3885\":1}}],[\"如果当前存在事务\",{\"1\":{\"860\":1,\"861\":1,\"862\":1,\"864\":1,\"865\":1,\"866\":1,\"868\":1,\"3877\":1,\"3878\":1,\"3879\":1,\"3881\":1,\"3882\":1,\"3883\":1,\"3885\":1}}],[\"如果当前hashtable的大小为16\",{\"1\":{\"750\":1}}],[\"如果成功获得\",{\"1\":{\"819\":1,\"3836\":1}}],[\"如果恶意程序知道我们用的是hash算法\",{\"1\":{\"779\":1}}],[\"如果模数是2的幂\",{\"1\":{\"772\":1}}],[\"如果让你设计这个方法\",{\"1\":{\"723\":1}}],[\"如果用户用户名\",{\"1\":{\"3225\":1,\"5494\":1}}],[\"如果用户通过构造函数指定了一个数字作为容量\",{\"1\":{\"693\":1}}],[\"如果用中文说\",{\"1\":{\"365\":1}}],[\"如果n为2次幂\",{\"1\":{\"638\":1,\"3730\":1}}],[\"如果目标对象实现了接口\",{\"1\":{\"619\":1,\"3812\":1}}],[\"如果要在查询时对记录加行锁\",{\"1\":{\"2534\":1,\"4896\":1}}],[\"如果要释放全局锁\",{\"1\":{\"2454\":1,\"4816\":1}}],[\"如果要克服\",{\"1\":{\"1238\":1,\"1406\":1,\"1574\":1,\"1742\":1,\"4649\":1}}],[\"如果要代理的对象\",{\"1\":{\"807\":1,\"3824\":1}}],[\"如果要⽣成另⼀种产品\",{\"1\":{\"592\":1,\"3785\":1}}],[\"如果要保持添加的顺序\",{\"1\":{\"444\":1}}],[\"如果实例已经存在\",{\"1\":{\"582\":1,\"3775\":1}}],[\"如果元素的数目超出了内部数组目前的长度它们都需要扩展内部数组的长度\",{\"1\":{\"556\":1}}],[\"如果遍历输出\",{\"1\":{\"493\":1}}],[\"如果插入的数据是随机的\",{\"1\":{\"419\":1,\"3744\":1}}],[\"如果大家在\",{\"1\":{\"339\":1}}],[\"如果想实现每一个线程都有自己的专属本地变量该如何解决呢\",{\"1\":{\"3020\":1,\"4274\":1}}],[\"如果想通过显式构造方法构造实例\",{\"1\":{\"318\":1,\"3706\":1}}],[\"如果想打破双亲委派模型则需要重写\",{\"1\":{\"219\":1,\"3613\":1}}],[\"如果哪天你发现用linkedhashmap效果更好\",{\"1\":{\"290\":1,\"3678\":1}}],[\"如果try中有return语句\",{\"1\":{\"269\":1}}],[\"如果代码可能会引发某种错误\",{\"1\":{\"259\":1,\"3655\":1}}],[\"如果不使用线程池\",{\"1\":{\"3087\":1,\"4341\":1}}],[\"如果不想丢弃任务的话\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"如果不存在就获取等待时间最长的符合条件的线程\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"如果不好理解\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"如果不是主键索引\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"如果不是连接建立事件\",{\"1\":{\"1229\":1,\"1244\":1,\"1397\":1,\"1412\":1,\"1565\":1,\"1580\":1,\"1733\":1,\"1748\":1,\"4640\":1,\"4655\":1}}],[\"如果不指定\",{\"1\":{\"682\":1}}],[\"如果不为空\",{\"1\":{\"460\":1}}],[\"如果不对其捕获\",{\"1\":{\"256\":1,\"3652\":1}}],[\"如果不处理\",{\"1\":{\"247\":1,\"3643\":1}}],[\"如果\",{\"1\":{\"229\":1,\"388\":1,\"1194\":1,\"1362\":1,\"1530\":1,\"1698\":1,\"1895\":1,\"2625\":1,\"3291\":2,\"3623\":1,\"4484\":1,\"4605\":1,\"4987\":1,\"5560\":2}}],[\"如果我们想对学生表\",{\"1\":{\"2475\":1,\"4837\":1}}],[\"如果我们要继续服务\",{\"1\":{\"1916\":1,\"4505\":1}}],[\"如果我们要自定义自己的类加载器\",{\"1\":{\"212\":1,\"3606\":1}}],[\"如果我们不想打破双亲委派模型\",{\"1\":{\"219\":1,\"3613\":1}}],[\"如果为了保证\",{\"1\":{\"1919\":1,\"4508\":1}}],[\"如果为\",{\"1\":{\"214\":1,\"3608\":1}}],[\"如果你创建了一个threadlocal变量\",{\"1\":{\"3022\":1,\"4276\":1}}],[\"如果你追溯\",{\"1\":{\"1193\":1,\"1361\":1,\"1529\":1,\"1697\":1,\"4604\":1}}],[\"如果你可以下载\",{\"1\":{\"898\":1,\"3915\":1}}],[\"如果你的业务有海量消息\",{\"1\":{\"3283\":1,\"5552\":1}}],[\"如果你的业务场景足够简单\",{\"1\":{\"3282\":1,\"5551\":1}}],[\"如果你的程序本身是线程安全的\",{\"1\":{\"503\":1}}],[\"如果你的资源实现了\",{\"1\":{\"262\":1,\"3658\":1}}],[\"如果你想使用栈这种数据结构\",{\"1\":{\"341\":1}}],[\"如果你不了解它\",{\"1\":{\"35\":1,\"3434\":1}}],[\"如果你是一个新手\",{\"1\":{\"31\":1,\"3430\":1}}],[\"内置了多种优化过后的数据结构实现\",{\"1\":{\"2672\":1,\"5034\":1}}],[\"内核通常为\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"内核版本\",{\"1\":{\"1176\":1,\"1344\":1,\"1512\":1,\"1680\":1,\"4587\":1}}],[\"内核源码的都知道\",{\"1\":{\"1146\":1,\"1314\":1,\"1482\":1,\"1650\":1,\"4557\":1}}],[\"内核里维护了一个链表来记录就绪事件\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4552\":1}}],[\"内核里没有类似\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"内核提供给用户态的多路复用系统调用\",{\"1\":{\"1136\":1,\"1304\":1,\"1472\":1,\"1640\":1,\"4547\":1}}],[\"内核\",{\"0\":{\"1082\":1,\"4023\":1},\"1\":{\"1183\":1,\"1351\":1,\"1519\":1,\"1687\":1,\"1776\":1,\"4365\":1,\"4594\":1}}],[\"内直接书写带有物理分页的参数来完成物理分页功能\",{\"1\":{\"974\":1,\"3991\":1}}],[\"内部采用的是\",{\"1\":{\"3067\":1,\"4321\":1}}],[\"内部做了非常多的性能优化\",{\"1\":{\"2669\":1,\"5031\":1}}],[\"内部使用数组链表和哈希的方式进行实现\",{\"1\":{\"665\":1}}],[\"内部使用循环数组实现\",{\"1\":{\"484\":1}}],[\"内部的一系列工作\",{\"1\":{\"1784\":1,\"4373\":1}}],[\"内部的元素可以直接通过get与set方法进行访问\",{\"1\":{\"500\":1}}],[\"内部的核心类库\",{\"1\":{\"208\":1,\"3602\":1}}],[\"内部元素不是完全有序的\",{\"1\":{\"493\":1}}],[\"内部是用堆实现的\",{\"1\":{\"491\":1}}],[\"内部实现利用了hashmap\",{\"1\":{\"442\":1}}],[\"内存资源会紧张\",{\"1\":{\"3280\":1,\"5549\":1}}],[\"内存地址v\",{\"1\":{\"2863\":1,\"4117\":1}}],[\"内存淘汰机制了解么\",{\"0\":{\"2760\":1,\"5122\":1}}],[\"内存淘汰机制\",{\"1\":{\"2759\":1,\"5121\":1}}],[\"内存的访问速度是磁盘的上千倍\",{\"1\":{\"2670\":1,\"5032\":1}}],[\"内存管理\",{\"0\":{\"1087\":1}}],[\"内存\",{\"1\":{\"358\":2,\"982\":1,\"984\":1,\"3999\":1,\"4001\":1}}],[\"内存结构\",{\"0\":{\"183\":1,\"3577\":1}}],[\"内容\",{\"1\":{\"37\":1,\"3436\":1}}],[\"来看头条\",{\"0\":{\"3188\":1,\"5457\":1},\"1\":{\"3191\":1,\"5460\":1}}],[\"来看下java是如何做的\",{\"1\":{\"746\":1}}],[\"来看下以下代码\",{\"1\":{\"685\":1}}],[\"来创建\",{\"1\":{\"3078\":1,\"4332\":1}}],[\"来创建公平锁\",{\"1\":{\"2994\":1,\"4248\":1}}],[\"来处理\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"来保证原子性\",{\"1\":{\"2896\":1,\"4150\":1}}],[\"来保证的\",{\"1\":{\"2572\":1,\"2573\":1,\"4934\":1,\"4935\":1}}],[\"来生成聚簇索引\",{\"1\":{\"2620\":1,\"4982\":1}}],[\"来判断数据的可见性\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"来判断重复元素的\",{\"1\":{\"462\":1}}],[\"来做为缓存判断的标准\",{\"1\":{\"2267\":1,\"5349\":1}}],[\"来进行排序\",{\"1\":{\"1881\":1,\"4470\":1}}],[\"来进行网络通信的\",{\"1\":{\"1879\":1,\"4468\":1}}],[\"来进行传输的\",{\"1\":{\"1188\":1,\"1356\":1,\"1524\":1,\"1692\":1,\"4599\":1}}],[\"来头很大\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"来完成系统自动化功能\",{\"1\":{\"3202\":1,\"5471\":1}}],[\"来完成\",{\"1\":{\"1787\":1,\"4376\":1}}],[\"来搬运\",{\"1\":{\"1189\":1,\"1357\":1,\"1525\":1,\"1693\":1,\"4600\":1}}],[\"来搬运数据\",{\"1\":{\"1171\":1,\"1188\":1,\"1339\":1,\"1356\":1,\"1507\":1,\"1524\":1,\"1675\":1,\"1692\":1,\"4582\":1,\"4599\":1}}],[\"来代替\",{\"1\":{\"1173\":1,\"1341\":1,\"1509\":1,\"1677\":1,\"4584\":1}}],[\"来代替取模运算\",{\"1\":{\"730\":1}}],[\"来渲染视图\",{\"1\":{\"827\":1,\"3844\":1}}],[\"来调用真正的处理器来处理请求\",{\"1\":{\"814\":1,\"3831\":1}}],[\"来得到该对象在数据中保存的位置\",{\"1\":{\"782\":1}}],[\"来初始化容量和装载因子\",{\"1\":{\"709\":1}}],[\"来自定义处理逻辑\",{\"1\":{\"613\":1,\"3806\":1}}],[\"来自定义类加载器\",{\"1\":{\"229\":1,\"3623\":1}}],[\"来说\",{\"1\":{\"608\":1,\"3801\":1}}],[\"来控制集合中的对象\",{\"1\":{\"556\":1}}],[\"来满足上层的业务需求\",{\"1\":{\"381\":1}}],[\"来实现独享或者共享\",{\"1\":{\"2981\":1,\"4235\":1}}],[\"来实现锁的分配\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"来实现具体对容器进行的操作\",{\"1\":{\"1788\":1,\"4377\":1}}],[\"来实现的\",{\"1\":{\"1776\":1,\"2613\":1,\"4365\":1,\"4975\":1}}],[\"来实现取模运算\",{\"1\":{\"731\":1}}],[\"来实现\",{\"1\":{\"340\":1,\"724\":1}}],[\"来实现整个程序的功能\",{\"1\":{\"182\":1,\"3576\":1}}],[\"来解析\",{\"1\":{\"37\":1,\"3436\":1}}],[\"而如果我们使用了md5对密码加密\",{\"1\":{\"3345\":1}}],[\"而他们用java比较多\",{\"1\":{\"3187\":1}}],[\"而线程在处理\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"而在模板之外可以专注于要展示什么数据\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"而在这种情况下多出来的一个线程就可以充分利用\",{\"1\":{\"3076\":1,\"4330\":1}}],[\"而在hashtable中不可以\",{\"1\":{\"669\":1}}],[\"而threadlocalmap可以存储以threadlocal为\",{\"1\":{\"3030\":1,\"4284\":1}}],[\"而treemap是基于红黑树实现的\",{\"1\":{\"461\":1}}],[\"而treemap基于大致平衡的排序二叉树\",{\"1\":{\"446\":1}}],[\"而共享锁不一样\",{\"1\":{\"2911\":1,\"4165\":1}}],[\"而偏向锁只需要在置换\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"而另一个是\",{\"1\":{\"2821\":1,\"4075\":1}}],[\"而普通的\",{\"1\":{\"2506\":1,\"4868\":1}}],[\"而导致后续的申请读锁的查询操作也会被阻塞\",{\"1\":{\"2498\":1,\"4860\":1}}],[\"而出现备份文件的数据与预期的不一样\",{\"1\":{\"2457\":1,\"4819\":1}}],[\"而无需回表查询\",{\"1\":{\"2410\":1,\"4772\":1}}],[\"而无需重新启动服务器\",{\"1\":{\"929\":1,\"3946\":1}}],[\"而覆盖索引就是把要查询出的列和索引是对应的\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"而其余的索引都作为\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"而非一个路由器只维护一个\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"而非广播\",{\"1\":{\"2245\":1,\"5327\":1}}],[\"而非物理分页\",{\"1\":{\"973\":1,\"3990\":1}}],[\"而当年可能并非如此\",{\"1\":{\"2170\":1}}],[\"而此时正好事务\",{\"1\":{\"2579\":1,\"4941\":1}}],[\"而此时\",{\"1\":{\"1900\":1,\"4489\":1}}],[\"而三个比四个还少一个\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"而假设我们现在有四个\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"而低32位可以简单理解为递增的事务id\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"而多线程间可以共享数据\",{\"1\":{\"1253\":1,\"1421\":1,\"1589\":1,\"1757\":1,\"4664\":1}}],[\"而边缘触发的意思是只有第一次满足条件的时候才触发\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4563\":1}}],[\"而信号量比锁的功能更强一些\",{\"1\":{\"1123\":1,\"1291\":1,\"1459\":1,\"1627\":1,\"4534\":1}}],[\"而rebalance之后\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"而第二个目标才真正体现出stickyassignor特性的\",{\"1\":{\"1050\":1,\"5226\":1}}],[\"而spring\",{\"1\":{\"942\":1,\"3959\":1}}],[\"而size表示这个桶已经装了多少元素\",{\"1\":{\"685\":1}}],[\"而接下来像是递归操作一样\",{\"1\":{\"890\":1,\"3907\":1}}],[\"而我的完整创建也依赖于你\",{\"1\":{\"874\":1,\"3891\":1}}],[\"而不会出现用户\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"而不需要等待整个插入语句执行完后才释放锁\",{\"1\":{\"2522\":1,\"4884\":1}}],[\"而不能更新数据\",{\"1\":{\"2460\":1,\"4822\":1}}],[\"而不是忙等\",{\"1\":{\"2850\":1,\"4104\":1}}],[\"而不是为了查询效率\",{\"1\":{\"2386\":1,\"4748\":1}}],[\"而不是一个具体的技术实现\",{\"1\":{\"808\":1,\"3825\":1}}],[\"而不是四次\",{\"1\":{\"780\":1}}],[\"而不用改变他的底层数据结构\",{\"1\":{\"567\":1}}],[\"而int的取值范围是\",{\"1\":{\"757\":1}}],[\"而被移掉的部分\",{\"1\":{\"737\":1}}],[\"而链表的特点是\",{\"1\":{\"715\":1}}],[\"而capacity又是2的幂\",{\"1\":{\"701\":1}}],[\"而hashtable采用的是直接取模\",{\"1\":{\"761\":1}}],[\"而hashtable中也没有indexof方法\",{\"1\":{\"761\":1}}],[\"而hashmap中的length也确实是2的倍数\",{\"1\":{\"742\":1}}],[\"而hashmap并没有\",{\"1\":{\"660\":1}}],[\"而hash\",{\"1\":{\"721\":1}}],[\"而hash冲突发生的概率较小\",{\"1\":{\"634\":1,\"3726\":1}}],[\"而由于历史原因\",{\"1\":{\"652\":1,\"655\":1}}],[\"而选择8作为临界值\",{\"1\":{\"641\":1,\"3733\":1}}],[\"而一个bin中链表长度达到8个元素的概率为0\",{\"1\":{\"640\":1,\"3732\":1}}],[\"而jdk1\",{\"1\":{\"630\":1,\"3722\":1}}],[\"而这些功能gateway天然支持\",{\"1\":{\"3194\":1,\"5463\":1}}],[\"而这些模板方法会调用使用者重写的方法\",{\"1\":{\"2927\":1,\"4181\":1}}],[\"而这样会出现频繁地对线程运行状态的切换\",{\"1\":{\"2851\":1,\"4105\":1}}],[\"而这个表就叫做彩虹表\",{\"1\":{\"3353\":1}}],[\"而这个通过键值求取下标的操作就叫做哈希\",{\"1\":{\"744\":1}}],[\"而这个过程中需要调用其他语言的本地库接口\",{\"1\":{\"182\":1,\"3576\":1}}],[\"而这一点是vector无法做到的\",{\"1\":{\"567\":1}}],[\"而arraylist和vector中同名方法的方法体内容并无太大差异\",{\"1\":{\"562\":1}}],[\"而arraylist每次对size增长50\",{\"1\":{\"504\":1}}],[\"而vector没有\",{\"0\":{\"507\":1}}],[\"而按照索引位置访问相对比较少\",{\"1\":{\"482\":1}}],[\"而对于没有实现接口的对象\",{\"1\":{\"807\":1,\"3824\":1}}],[\"而对内存的操作\",{\"1\":{\"404\":1}}],[\"而对具体的实现方式不做限制\",{\"1\":{\"374\":1}}],[\"而且消息积压概率比较小的情况下\",{\"1\":{\"3282\":1,\"5551\":1}}],[\"而且大部分的系统都是\",{\"1\":{\"2978\":1,\"4232\":1}}],[\"而且支持\",{\"1\":{\"2720\":1,\"5082\":1}}],[\"而且能保存图片\",{\"1\":{\"2681\":1,\"5043\":1}}],[\"而且事务在执行过程中发生错误\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"而且记录锁是有\",{\"1\":{\"2544\":1,\"4906\":1}}],[\"而且意向锁之间也不会发生冲突\",{\"1\":{\"2509\":1,\"4871\":1}}],[\"而且由于\",{\"1\":{\"2462\":1,\"4824\":1}}],[\"而且聚簇索引的叶子节点还存放着数据\",{\"1\":{\"2399\":1,\"4761\":1}}],[\"而且最大的缺陷就是崩溃后无法安全恢复\",{\"1\":{\"2322\":1,\"4684\":1}}],[\"而且没有任何已知的转发地址\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"而且在对传输速率要求不高的情况下\",{\"1\":{\"5278\":1}}],[\"而且在\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"而且挂的没超过半数的时候\",{\"1\":{\"1894\":1,\"4483\":1}}],[\"而且只在主线程中运行\",{\"1\":{\"1254\":1,\"1422\":1,\"1590\":1,\"1758\":1,\"4665\":1}}],[\"而且\",{\"1\":{\"1189\":1,\"1357\":1,\"1525\":1,\"1693\":1,\"4600\":1}}],[\"而且仍然需要\",{\"1\":{\"1174\":1,\"1342\":1,\"1510\":1,\"1678\":1,\"4585\":1}}],[\"而且我们不知道到底能读写多少数据\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"而且随着topic的增加\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"而且也可能会出现\",{\"1\":{\"884\":1,\"3901\":1}}],[\"而且不同的客户在每次访问中根据需要会去访问不同的数据库\",{\"1\":{\"834\":1,\"3851\":1}}],[\"而且一定是2的指数\",{\"1\":{\"650\":1}}],[\"而且一旦发生这种异常状况\",{\"1\":{\"250\":1,\"3646\":1}}],[\"而且这样做\",{\"1\":{\"382\":1}}],[\"而组合关系描述的是\",{\"1\":{\"356\":1}}],[\"而应该是组合关系\",{\"1\":{\"351\":1}}],[\"而\",{\"1\":{\"347\":1,\"381\":1,\"505\":1,\"625\":1,\"893\":1,\"1140\":2,\"1218\":1,\"1308\":2,\"1386\":1,\"1476\":2,\"1554\":1,\"1644\":2,\"1722\":1,\"1897\":1,\"2167\":1,\"2168\":1,\"2169\":1,\"2230\":1,\"2238\":1,\"2268\":1,\"2271\":1,\"2273\":1,\"2326\":1,\"2332\":1,\"2336\":1,\"2339\":1,\"2355\":1,\"2357\":1,\"2533\":1,\"2613\":1,\"2682\":1,\"2822\":1,\"2824\":1,\"2984\":1,\"2993\":1,\"3818\":1,\"3910\":1,\"4076\":1,\"4078\":1,\"4238\":1,\"4247\":1,\"4486\":1,\"4551\":2,\"4629\":1,\"4688\":1,\"4694\":1,\"4698\":1,\"4701\":1,\"4717\":1,\"4719\":1,\"4895\":1,\"4975\":1,\"5044\":1,\"5312\":1,\"5320\":1,\"5350\":1,\"5353\":1,\"5355\":1}}],[\"而是非常明显地加快了反向查询的速度\",{\"1\":{\"3334\":1}}],[\"而是一个java类库\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"而是一个特殊值\",{\"1\":{\"2242\":1,\"5324\":1}}],[\"而是通过\",{\"1\":{\"3088\":1,\"4342\":1}}],[\"而是会按照延迟的时间长短对任务进行排序\",{\"1\":{\"3067\":1,\"4321\":1}}],[\"而是会等待\",{\"1\":{\"3049\":1,\"4303\":1}}],[\"而是将任务回退给调用者\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"而是同时以插队方式直接尝试获取锁\",{\"1\":{\"2990\":1,\"4244\":1}}],[\"而是检测\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"而是再执行完插入语句后就会立即释放\",{\"1\":{\"2517\":1,\"4879\":1}}],[\"而是专门定制了一致性协议叫做\",{\"1\":{\"1869\":1,\"4458\":1}}],[\"而是只需要一个配置spring\",{\"1\":{\"942\":1,\"3959\":1}}],[\"而是自己再做一层封装\",{\"1\":{\"396\":1}}],[\"而是业界公认的\",{\"1\":{\"365\":1}}],[\"而是来自\",{\"1\":{\"338\":1}}],[\"而是把这个请求委派给父类加载器去完成\",{\"1\":{\"233\":1,\"3627\":1}}],[\"而是根据需要去动态加载\",{\"1\":{\"204\":1,\"3598\":1}}],[\"而字节码文件只是\",{\"1\":{\"182\":1,\"3576\":1}}],[\"再者服务器的数据库中也是密文存储密码\",{\"1\":{\"3345\":1}}],[\"再者服务器的数据库中也是明文存储密码\",{\"1\":{\"3339\":1}}],[\"再进入内层方法会自动获取锁\",{\"1\":{\"2968\":1,\"4222\":1}}],[\"再来说说元数据锁\",{\"1\":{\"2484\":1,\"4846\":1}}],[\"再如普通索引\",{\"1\":{\"2411\":1,\"4773\":1}}],[\"再走一遍主索引\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"再将\",{\"1\":{\"2304\":1,\"5386\":1}}],[\"再下面是\",{\"1\":{\"2288\":1,\"5370\":1}}],[\"再构造链路层帧\",{\"1\":{\"2254\":1,\"5336\":1}}],[\"再次进入网关开始访问\",{\"1\":{\"3226\":1,\"5495\":1}}],[\"再次提交更新\",{\"1\":{\"2874\":1,\"4128\":1}}],[\"再次查询账户余额大于\",{\"1\":{\"2590\":1,\"4952\":1}}],[\"再次读取该数据时\",{\"1\":{\"2584\":1,\"4946\":1}}],[\"再次强调\",{\"1\":{\"2238\":1,\"5320\":1}}],[\"再次印证了\",{\"1\":{\"266\":1}}],[\"再加上\",{\"1\":{\"2162\":1}}],[\"再插入新的\",{\"1\":{\"1949\":1,\"4055\":1}}],[\"再反馈ack嘛\",{\"1\":{\"1940\":1,\"4046\":1}}],[\"再由内核返回产生了事件的连接\",{\"1\":{\"1137\":1,\"1305\":1,\"1473\":1,\"1641\":1,\"4548\":1}}],[\"再访问一次后还会被继续访问到\",{\"1\":{\"1096\":1}}],[\"再重启\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"再去根目录下找配置文件\",{\"1\":{\"912\":1,\"3929\":1}}],[\"再查半成品缓存\",{\"1\":{\"894\":1,\"3911\":1}}],[\"再从链表中找出正确的元素\",{\"1\":{\"717\":1}}],[\"再说一个小问题\",{\"1\":{\"399\":1}}],[\"再交由\",{\"1\":{\"182\":1,\"3576\":1}}],[\"再把字节码加载到内存中\",{\"1\":{\"182\":1,\"3576\":1}}],[\"jing\",{\"0\":{\"5582\":1}}],[\"jianshu\",{\"1\":{\"3401\":1}}],[\"jmeter测试\",{\"1\":{\"3321\":1}}],[\"jwt\",{\"1\":{\"3225\":1,\"3226\":1,\"3227\":1,\"3229\":1,\"3230\":1,\"3303\":3,\"5494\":1,\"5495\":1,\"5496\":1,\"5498\":1,\"5499\":1,\"5572\":3}}],[\"juc\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"j++\",{\"1\":{\"2897\":1,\"4151\":1}}],[\"job\",{\"1\":{\"1784\":1,\"1785\":1,\"4373\":1,\"4374\":1}}],[\"join\",{\"0\":{\"2663\":1,\"5025\":1},\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"json\",{\"1\":{\"821\":1,\"3838\":1}}],[\"j\",{\"0\":{\"5575\":1,\"5588\":1},\"1\":{\"775\":1,\"2896\":1,\"4150\":1}}],[\"jenkins\",{\"1\":{\"775\":1,\"776\":1}}],[\"jdbc防止sql注入\",{\"0\":{\"2635\":1,\"4997\":1}}],[\"jdbctemplate\",{\"1\":{\"833\":1,\"3850\":1}}],[\"jdbc连接数据库\",{\"1\":{\"327\":1,\"3715\":1}}],[\"jdk原生线程池threadpoolexecutor提供了如下几个public的setter方法\",{\"1\":{\"3094\":1,\"4348\":1}}],[\"jdk的源代码\",{\"1\":{\"793\":1}}],[\"jdk在一个小小的hash方法上就有很多考虑\",{\"1\":{\"792\":1}}],[\"jdk8之前的版本中\",{\"1\":{\"657\":1}}],[\"jdk1\",{\"1\":{\"630\":1,\"645\":1,\"646\":1,\"2898\":1,\"2901\":1,\"3722\":1,\"4152\":1,\"4155\":1}}],[\"jdk\",{\"0\":{\"609\":1,\"624\":1,\"3802\":1,\"3817\":1},\"1\":{\"208\":1,\"608\":1,\"617\":1,\"619\":1,\"625\":1,\"626\":2,\"792\":1,\"807\":2,\"978\":1,\"2821\":1,\"2822\":1,\"2880\":1,\"2881\":1,\"2891\":1,\"2999\":1,\"3021\":1,\"3602\":1,\"3801\":1,\"3810\":1,\"3812\":1,\"3818\":1,\"3819\":2,\"3824\":2,\"3995\":1,\"4075\":1,\"4076\":1,\"4134\":1,\"4135\":1,\"4145\":1,\"4253\":1,\"4275\":1}}],[\"jre\",{\"1\":{\"209\":1,\"3603\":1}}],[\"jar包内配置等模式\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"jar等\",{\"1\":{\"208\":1,\"3602\":1}}],[\"jar\",{\"1\":{\"208\":3,\"209\":1,\"210\":1,\"3602\":3,\"3603\":1,\"3604\":1}}],[\"java框架\",{\"0\":{\"5590\":1}}],[\"java异常类层次结构\",{\"0\":{\"3635\":1}}],[\"java基础\",{\"0\":{\"3631\":1,\"3632\":1,\"5589\":1}}],[\"javac\",{\"1\":{\"2999\":1,\"4253\":1}}],[\"java内存屏障类型把上述两种内存屏障两两组合\",{\"1\":{\"2950\":1,\"4204\":1}}],[\"java内存模型规定\",{\"1\":{\"2941\":1,\"4195\":1}}],[\"java内存模型分为主内存和线程工作内存两大类\",{\"1\":{\"2937\":1,\"4191\":1}}],[\"java语言从\",{\"1\":{\"2901\":1,\"4155\":1}}],[\"java里的进程有哪些状态\",{\"0\":{\"1103\":1,\"1271\":1,\"1439\":1,\"1607\":1,\"4514\":1}}],[\"javaguide\",{\"1\":{\"909\":1,\"2833\":1,\"3017\":1,\"3106\":1,\"3926\":1,\"4087\":1,\"4271\":1,\"4360\":1}}],[\"java高级\",{\"0\":{\"804\":1,\"3821\":1}}],[\"java这样设计还是有一定的考虑在的\",{\"1\":{\"762\":1}}],[\"java总采用按位与操作实现取模操作\",{\"1\":{\"744\":1}}],[\"java之所以使用位运算\",{\"1\":{\"730\":1}}],[\"java8\",{\"1\":{\"722\":1}}],[\"java7\",{\"1\":{\"722\":1}}],[\"java中有的微服务有dubbo\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"java中规定这个长度只能是2的倍数\",{\"1\":{\"744\":1}}],[\"java中还有一个类hashtable\",{\"1\":{\"668\":1}}],[\"java中反射的用法非常非常多\",{\"1\":{\"301\":1,\"3689\":1}}],[\"java官方推荐的实现方式\",{\"0\":{\"333\":1},\"1\":{\"488\":1}}],[\"java反射机制是在运行状态中\",{\"1\":{\"285\":1,\"3673\":1}}],[\"javap\",{\"1\":{\"276\":1,\"2999\":1,\"3664\":1,\"4253\":1}}],[\"java解释器调用main方法执行开始执行程序\",{\"1\":{\"256\":1,\"3652\":1}}],[\"java\",{\"0\":{\"337\":1,\"343\":1,\"367\":1,\"3657\":1,\"5576\":1,\"5577\":1},\"1\":{\"182\":1,\"200\":1,\"202\":1,\"208\":1,\"209\":1,\"211\":1,\"228\":1,\"236\":2,\"240\":1,\"262\":1,\"273\":1,\"276\":2,\"300\":1,\"309\":1,\"313\":1,\"316\":1,\"338\":1,\"339\":1,\"341\":1,\"344\":2,\"348\":1,\"351\":1,\"368\":5,\"369\":1,\"370\":1,\"372\":1,\"375\":1,\"385\":1,\"391\":1,\"393\":3,\"394\":1,\"395\":1,\"400\":1,\"488\":1,\"510\":2,\"513\":3,\"608\":1,\"610\":1,\"622\":1,\"728\":1,\"758\":1,\"774\":1,\"777\":1,\"778\":1,\"780\":1,\"783\":1,\"787\":1,\"788\":1,\"790\":2,\"794\":1,\"929\":1,\"982\":1,\"1114\":1,\"1117\":1,\"1193\":1,\"1213\":1,\"1218\":4,\"1282\":1,\"1285\":1,\"1361\":1,\"1381\":1,\"1386\":4,\"1450\":1,\"1453\":1,\"1529\":1,\"1549\":1,\"1554\":4,\"1618\":1,\"1621\":1,\"1697\":1,\"1717\":1,\"1722\":4,\"2334\":1,\"2358\":1,\"2821\":1,\"2823\":1,\"2829\":1,\"2833\":2,\"2880\":1,\"2881\":1,\"2901\":1,\"2970\":1,\"2985\":1,\"2993\":1,\"2999\":1,\"3004\":1,\"3017\":2,\"3035\":1,\"3041\":4,\"3053\":1,\"3085\":1,\"3088\":1,\"3106\":2,\"3323\":1,\"3576\":1,\"3594\":1,\"3596\":1,\"3602\":1,\"3603\":1,\"3605\":1,\"3622\":1,\"3630\":2,\"3636\":1,\"3658\":1,\"3661\":1,\"3664\":2,\"3688\":1,\"3697\":1,\"3701\":1,\"3704\":1,\"3801\":1,\"3803\":1,\"3815\":1,\"3946\":1,\"3999\":1,\"4075\":1,\"4077\":1,\"4083\":1,\"4087\":2,\"4134\":1,\"4135\":1,\"4155\":1,\"4224\":1,\"4239\":1,\"4247\":1,\"4253\":1,\"4258\":1,\"4271\":2,\"4289\":1,\"4295\":4,\"4307\":1,\"4339\":1,\"4342\":1,\"4360\":2,\"4525\":1,\"4528\":1,\"4604\":1,\"4624\":1,\"4629\":4,\"4696\":1,\"4720\":1,\"5574\":1}}],[\"jvm会把该线程置为阻塞状态\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"jvm会把该线程放入\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"jvm\",{\"0\":{\"174\":1,\"175\":1,\"177\":1,\"3568\":1,\"3569\":1,\"3571\":1},\"1\":{\"182\":1,\"201\":1,\"202\":1,\"204\":1,\"207\":1,\"236\":1,\"599\":2,\"602\":1,\"605\":2,\"2821\":1,\"2822\":1,\"2854\":1,\"3011\":1,\"3012\":2,\"3576\":1,\"3595\":1,\"3596\":1,\"3598\":1,\"3601\":1,\"3630\":1,\"3792\":2,\"3795\":1,\"3798\":2,\"4075\":1,\"4076\":1,\"4108\":1,\"4265\":1,\"4266\":2}}],[\"会面临的\",{\"1\":{\"3278\":1,\"5547\":1}}],[\"会尝试获取当前\",{\"1\":{\"3012\":1,\"4266\":1}}],[\"会尝试获取实例对象的锁\",{\"1\":{\"3012\":1,\"4266\":1}}],[\"会尝试获取对象的锁\",{\"1\":{\"3006\":1,\"4260\":1}}],[\"会解决这个问题\",{\"1\":{\"2978\":1,\"4232\":1}}],[\"会占用cpu时间片\",{\"1\":{\"2972\":1,\"4226\":1}}],[\"会封装成node加入到aqs中去\",{\"1\":{\"2914\":1,\"4168\":1}}],[\"会在\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"会进入队列等待\",{\"1\":{\"2990\":1,\"4244\":1}}],[\"会进行哪些操作\",{\"1\":{\"2786\":1,\"2789\":1,\"5148\":1,\"5151\":1}}],[\"会进⾏单例对象的创建\",{\"1\":{\"582\":1,\"3775\":1}}],[\"会阻塞\",{\"1\":{\"2730\":1,\"5092\":1}}],[\"会阻塞后续该表的所有\",{\"1\":{\"2499\":1,\"4861\":1}}],[\"会加上\",{\"1\":{\"2609\":1,\"4971\":1}}],[\"会加一个表级别的\",{\"1\":{\"2518\":1,\"4880\":1}}],[\"会对记录加上读写锁\",{\"1\":{\"2596\":1,\"4958\":1}}],[\"会被回滚到事务开始前的状态\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"会被分配一个唯一的pid\",{\"1\":{\"1063\":1,\"5239\":1}}],[\"会为被\",{\"1\":{\"2522\":1,\"4884\":1}}],[\"会影响插入性能\",{\"1\":{\"2520\":1,\"4882\":1}}],[\"会影响并发性能\",{\"1\":{\"2482\":1,\"4844\":1}}],[\"会自动给这个表加上\",{\"1\":{\"2485\":1,\"4847\":1}}],[\"会自动先检查表中是否有唯一索引且不允许存在\",{\"1\":{\"2380\":1,\"4742\":1}}],[\"会释放当前会话的所有表锁\",{\"1\":{\"2479\":1,\"4841\":1}}],[\"会先创建\",{\"1\":{\"2462\":1,\"4824\":1}}],[\"会去问它的根域名服务器\",{\"1\":{\"2298\":1,\"5380\":1}}],[\"会发生什么\",{\"0\":{\"2185\":1,\"2186\":1,\"2187\":1,\"2192\":1,\"2193\":1,\"2194\":1,\"2195\":1},\"1\":{\"2070\":1,\"2071\":1,\"2072\":1,\"2077\":1,\"2078\":1,\"2079\":1,\"2080\":1}}],[\"会有下面这样日志\",{\"1\":{\"3317\":1}}],[\"会有一定的开销\",{\"1\":{\"2150\":1}}],[\"会有比较大的延迟\",{\"1\":{\"1956\":1,\"4062\":1}}],[\"会有数据库不一致的问题\",{\"0\":{\"1950\":1,\"4056\":1}}],[\"会向初始化投票一样首先给自己投票\",{\"1\":{\"1889\":1,\"4478\":1}}],[\"会导致\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"会导致所有的服务器间同步状态\",{\"1\":{\"1858\":1,\"4447\":1}}],[\"会导致相同的key\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"会将自己的状态\",{\"1\":{\"1889\":1,\"4478\":1}}],[\"会将每秒请求数\",{\"1\":{\"1844\":1,\"4433\":1}}],[\"会将数据发给子线程里的\",{\"1\":{\"1246\":1,\"1414\":1,\"1582\":1,\"1750\":1,\"4657\":1}}],[\"会执行数据清除工作\",{\"1\":{\"1013\":1,\"5189\":1}}],[\"会清除下一个分区片段的数据\",{\"1\":{\"1012\":1,\"5188\":1}}],[\"会根据统一信息\",{\"1\":{\"2430\":1,\"4792\":1}}],[\"会根据联合索引中的字段顺序\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"会根据类别搜索\",{\"0\":{\"1944\":1,\"4050\":1}}],[\"会根据\",{\"1\":{\"814\":1,\"3831\":1}}],[\"会触发扩容\",{\"1\":{\"711\":1}}],[\"会比使用\",{\"1\":{\"409\":1}}],[\"会读取配置文件applicationcontext\",{\"1\":{\"327\":1,\"3715\":1}}],[\"会走默认无参构造方法\",{\"1\":{\"318\":1,\"3706\":1}}],[\"会把数据锁住\",{\"1\":{\"2964\":1,\"4218\":1}}],[\"会把数据库打挂\",{\"0\":{\"1962\":1,\"4068\":1}}],[\"会把首节点唤醒\",{\"1\":{\"2913\":1,\"4167\":1}}],[\"会把磁盘的数据拷贝到内核的缓冲区里\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"4581\":1}}],[\"会把自己消费过的消息的offset提交一下\",{\"1\":{\"1059\":1,\"5235\":1}}],[\"会把\",{\"1\":{\"182\":1,\"3576\":1}}],[\"会使用跳表作为\",{\"1\":{\"2715\":1,\"5077\":1}}],[\"会使用哈希表作为\",{\"1\":{\"2707\":1,\"5069\":1}}],[\"会使用整数集合作为\",{\"1\":{\"2699\":1,\"5061\":1}}],[\"会使用双向链表作为\",{\"1\":{\"2692\":1,\"5054\":1}}],[\"会使用压缩列表作为\",{\"1\":{\"2691\":1,\"2706\":1,\"2714\":1,\"5053\":1,\"5068\":1,\"5076\":1}}],[\"会使用该\",{\"1\":{\"2620\":1,\"4982\":1}}],[\"会使用\",{\"1\":{\"37\":1,\"807\":2,\"3436\":1,\"3824\":2}}],[\"本地方法栈\",{\"1\":{\"2939\":1,\"4193\":1}}],[\"本地\",{\"1\":{\"2298\":1,\"2300\":1,\"2302\":1,\"2304\":1,\"5380\":1,\"5382\":1,\"5384\":1,\"5386\":1}}],[\"本地域名服务器收到客户端的请求后\",{\"1\":{\"2298\":1,\"5380\":1}}],[\"本地库接口\",{\"1\":{\"181\":1,\"3575\":1}}],[\"本质上是多路复用+轮询\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"本子网内不会有设备成功接收\",{\"1\":{\"2250\":1,\"5332\":1}}],[\"本身可能会丢数据\",{\"1\":{\"3279\":1,\"5548\":1}}],[\"本身却是\",{\"1\":{\"2993\":1,\"4247\":1}}],[\"本身去实现的\",{\"1\":{\"2993\":1,\"4247\":1}}],[\"本身没有实现任何接口\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"本身的处理既简单又高效\",{\"1\":{\"2162\":1}}],[\"本身提供了很多接口可以获取当前项目的各项运行状态指标\",{\"1\":{\"962\":1,\"3979\":1}}],[\"本身就是对方法的增强\",{\"1\":{\"893\":1,\"3910\":1}}],[\"本章节涉及到的\",{\"1\":{\"895\":1,\"3912\":1}}],[\"本来就慢\",{\"1\":{\"762\":1}}],[\"本页面就是一个示例\",{\"1\":{\"11\":1,\"3410\":1}}],[\"duo\",{\"0\":{\"5585\":1}}],[\"durability\",{\"1\":{\"2570\":1,\"4932\":1}}],[\"dubbo\",{\"1\":{\"1821\":1,\"4410\":1}}],[\"drop\",{\"1\":{\"2453\":1,\"4815\":1}}],[\"dns\",{\"0\":{\"2284\":1,\"5366\":1},\"1\":{\"2163\":1,\"2216\":1,\"2285\":1,\"2290\":1,\"2291\":1,\"2292\":1,\"2293\":2,\"2294\":2,\"2295\":3,\"2297\":3,\"2298\":1,\"2299\":2,\"2300\":1,\"2301\":1,\"2302\":3,\"2303\":2,\"2304\":1,\"2309\":1,\"5298\":1,\"5367\":1,\"5372\":1,\"5373\":1,\"5374\":1,\"5375\":2,\"5376\":2,\"5377\":3,\"5379\":3,\"5380\":1,\"5381\":2,\"5382\":1,\"5383\":1,\"5384\":3,\"5385\":2,\"5386\":1}}],[\"db\",{\"1\":{\"1953\":1,\"2615\":2,\"2618\":1,\"2619\":1,\"2620\":1,\"2763\":1,\"2764\":1,\"2765\":1,\"2767\":1,\"2770\":1,\"3207\":1,\"4059\":1,\"4977\":2,\"4980\":1,\"4981\":1,\"4982\":1,\"5125\":1,\"5126\":1,\"5127\":1,\"5129\":1,\"5132\":1,\"5476\":1}}],[\"dma\",{\"1\":{\"1170\":1,\"1172\":1,\"1182\":2,\"1183\":1,\"1184\":1,\"1185\":1,\"1188\":1,\"1189\":1,\"1338\":1,\"1340\":1,\"1350\":2,\"1351\":1,\"1352\":1,\"1353\":1,\"1356\":1,\"1357\":1,\"1506\":1,\"1508\":1,\"1518\":2,\"1519\":1,\"1520\":1,\"1521\":1,\"1524\":1,\"1525\":1,\"1674\":1,\"1676\":1,\"1686\":2,\"1687\":1,\"1688\":1,\"1689\":1,\"1692\":1,\"1693\":1,\"4581\":1,\"4583\":1,\"4593\":2,\"4594\":1,\"4595\":1,\"4596\":1,\"4599\":1,\"4600\":1}}],[\"daemon\",{\"1\":{\"1782\":1,\"1783\":1,\"4371\":1,\"4372\":1}}],[\"dao接口原理\",{\"0\":{\"963\":1,\"3980\":1}}],[\"database\",{\"0\":{\"5584\":1}}],[\"data\",{\"1\":{\"179\":1,\"182\":1,\"513\":4,\"515\":1,\"2343\":1,\"2355\":2,\"2359\":3,\"2360\":2,\"3573\":1,\"3576\":1,\"4705\":1,\"4717\":2,\"4721\":3,\"4722\":2}}],[\"digest\",{\"1\":{\"3326\":1}}],[\"dict\",{\"1\":{\"2767\":1,\"5129\":1}}],[\"dir\",{\"1\":{\"2737\":1,\"5099\":1}}],[\"directory\",{\"1\":{\"3316\":1}}],[\"direct\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"dirs\",{\"1\":{\"209\":1,\"3603\":1}}],[\"dialect\",{\"1\":{\"976\":1,\"3993\":1}}],[\"distribution\",{\"0\":{\"5581\":1}}],[\"discardpolicy\",{\"1\":{\"3041\":1,\"3059\":1,\"4295\":1,\"4313\":1}}],[\"discardoldestpolicy\",{\"1\":{\"3041\":1,\"3060\":1,\"4295\":1,\"4314\":1}}],[\"dispatch\",{\"1\":{\"1225\":2,\"1227\":1,\"1242\":1,\"1393\":2,\"1395\":1,\"1410\":1,\"1561\":2,\"1563\":1,\"1578\":1,\"1729\":2,\"1731\":1,\"1746\":1,\"4636\":2,\"4638\":1,\"4653\":1}}],[\"dispatcherservlet\",{\"1\":{\"814\":2,\"817\":1,\"818\":1,\"819\":1,\"825\":1,\"3831\":2,\"3834\":1,\"3835\":1,\"3836\":1,\"3842\":1}}],[\"disabled\",{\"1\":{\"760\":1}}],[\"dcl\",{\"1\":{\"580\":1,\"3773\":1}}],[\"docker容器网络环境\",{\"1\":{\"1786\":1,\"4375\":1}}],[\"docker的架构\",{\"0\":{\"1779\":1,\"4368\":1}}],[\"docker\",{\"0\":{\"1772\":1,\"1773\":1,\"1774\":1,\"4361\":1,\"4362\":1,\"4363\":1},\"1\":{\"1775\":1,\"1776\":1,\"1777\":1,\"1780\":1,\"1782\":2,\"1783\":4,\"1784\":2,\"1785\":1,\"1786\":1,\"1787\":1,\"3190\":1,\"4364\":1,\"4365\":1,\"4366\":1,\"4369\":1,\"4371\":2,\"4372\":4,\"4373\":2,\"4374\":1,\"4375\":1,\"4376\":1,\"5459\":1}}],[\"download\",{\"1\":{\"1056\":1,\"1065\":2,\"5232\":1,\"5241\":2}}],[\"dos\",{\"1\":{\"779\":1}}],[\"do\",{\"1\":{\"547\":1,\"549\":1}}],[\"double\",{\"1\":{\"260\":1,\"580\":1,\"822\":1,\"2648\":1,\"3656\":1,\"3773\":1,\"3839\":1,\"5010\":1}}],[\"dlgdlgd\",{\"1\":{\"412\":1}}],[\"d\",{\"1\":{\"265\":1,\"3320\":1}}],[\"delayedworkqueue\",{\"1\":{\"3067\":3,\"4321\":3}}],[\"deleted\",{\"1\":{\"2618\":1,\"4980\":1}}],[\"delete\",{\"1\":{\"982\":1,\"996\":1,\"2452\":1,\"2618\":1,\"3999\":1,\"4013\":1,\"4814\":1,\"4980\":1}}],[\"delegation\",{\"1\":{\"226\":1,\"3620\":1}}],[\"decimal\",{\"0\":{\"2647\":1,\"5009\":1},\"1\":{\"2649\":1,\"2650\":2,\"2651\":2,\"5011\":1,\"5012\":2,\"5013\":2}}],[\"dead\",{\"1\":{\"1109\":1,\"1277\":1,\"1445\":1,\"1613\":1,\"4520\":1}}],[\"depth\",{\"1\":{\"1065\":1,\"5241\":1}}],[\"dependencies\",{\"1\":{\"950\":1,\"3967\":1}}],[\"dependency>\",{\"1\":{\"930\":1,\"3947\":1}}],[\"deprecated\",{\"1\":{\"369\":1}}],[\"developer\",{\"1\":{\"1954\":1,\"4060\":1}}],[\"devtools<\",{\"1\":{\"930\":1,\"3947\":1}}],[\"devtools\",{\"1\":{\"929\":2,\"3946\":2}}],[\"dev\",{\"1\":{\"929\":1,\"3946\":1}}],[\"des\",{\"1\":{\"3387\":1,\"3390\":1}}],[\"design\",{\"1\":{\"575\":1,\"909\":1,\"3768\":1,\"3926\":1}}],[\"desc\",{\"1\":{\"83\":1,\"3482\":1}}],[\"defaultthreadfactory\",{\"1\":{\"3041\":1,\"4295\":1}}],[\"default\",{\"1\":{\"539\":1,\"672\":1,\"678\":1,\"682\":1,\"852\":1,\"3869\":1}}],[\"defaultcapacity\",{\"1\":{\"539\":1}}],[\"defaultwriteobject\",{\"1\":{\"510\":1}}],[\"deque<integer>\",{\"1\":{\"342\":1,\"373\":1}}],[\"deque\",{\"0\":{\"333\":1,\"386\":1},\"1\":{\"340\":2,\"372\":1,\"385\":1,\"387\":1,\"388\":1,\"391\":1,\"392\":1,\"396\":1,\"397\":2,\"400\":1,\"488\":1}}],[\"details\",{\"1\":{\"328\":1,\"412\":1,\"629\":1,\"658\":1,\"970\":1,\"1003\":1,\"1056\":1,\"1065\":1,\"1079\":1,\"2638\":1,\"2817\":1,\"2833\":1,\"2995\":1,\"3401\":2,\"3633\":1,\"3716\":1,\"3721\":1,\"3987\":1,\"4020\":1,\"4087\":1,\"4249\":1,\"5000\":1,\"5179\":1,\"5232\":1,\"5241\":1,\"5255\":1}}],[\"c|sort\",{\"1\":{\"3320\":1}}],[\"cs\",{\"0\":{\"5583\":1}}],[\"csrf\",{\"1\":{\"3229\":1,\"5498\":1}}],[\"csdn\",{\"1\":{\"328\":1,\"412\":1,\"629\":1,\"658\":1,\"970\":1,\"1003\":1,\"1056\":1,\"1065\":1,\"1079\":1,\"2638\":1,\"2817\":1,\"2833\":1,\"2995\":1,\"3401\":2,\"3633\":1,\"3716\":1,\"3721\":1,\"3987\":1,\"4020\":1,\"4087\":1,\"4249\":1,\"5000\":1,\"5179\":1,\"5232\":1,\"5241\":1,\"5255\":1}}],[\"cmpxchg\",{\"1\":{\"2879\":1,\"4133\":1}}],[\"creates\",{\"1\":{\"3043\":2,\"4297\":2}}],[\"createmap\",{\"1\":{\"3028\":1,\"4282\":1}}],[\"creator\",{\"1\":{\"2622\":1,\"2627\":1,\"4984\":1,\"4989\":1}}],[\"craig\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"crud\",{\"1\":{\"2486\":1,\"2488\":1,\"2490\":1,\"2499\":1,\"4848\":1,\"4850\":1,\"4852\":1,\"4861\":1}}],[\"city\",{\"1\":{\"2434\":1,\"4796\":1}}],[\"cp\",{\"1\":{\"1918\":3,\"1920\":2,\"4507\":3,\"4509\":2}}],[\"cpu达到100\",{\"1\":{\"3171\":1,\"5451\":1}}],[\"cpu太快\",{\"1\":{\"436\":1,\"3761\":1}}],[\"cpu\",{\"1\":{\"182\":1,\"358\":2,\"1135\":1,\"1171\":1,\"1174\":1,\"1182\":1,\"1188\":1,\"1189\":1,\"1233\":1,\"1236\":1,\"1248\":1,\"1303\":1,\"1339\":1,\"1342\":1,\"1350\":1,\"1356\":1,\"1357\":1,\"1401\":1,\"1404\":1,\"1416\":1,\"1471\":1,\"1507\":1,\"1510\":1,\"1518\":1,\"1524\":1,\"1525\":1,\"1569\":1,\"1572\":1,\"1584\":1,\"1639\":1,\"1675\":1,\"1678\":1,\"1686\":1,\"1692\":1,\"1693\":1,\"1737\":1,\"1740\":1,\"1752\":1,\"2660\":1,\"2665\":1,\"2755\":1,\"2756\":1,\"2757\":1,\"2862\":1,\"2879\":2,\"2893\":1,\"2894\":1,\"2900\":1,\"2974\":1,\"2975\":1,\"2989\":1,\"2991\":1,\"3076\":6,\"3077\":2,\"3576\":1,\"4116\":1,\"4133\":2,\"4147\":1,\"4148\":1,\"4154\":1,\"4228\":1,\"4229\":1,\"4243\":1,\"4245\":1,\"4330\":6,\"4331\":2,\"4546\":1,\"4582\":1,\"4585\":1,\"4593\":1,\"4599\":1,\"4600\":1,\"4644\":1,\"4647\":1,\"4659\":1,\"5022\":1,\"5027\":1,\"5117\":1,\"5118\":1,\"5119\":1}}],[\"cgroup\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"cglibcode\",{\"1\":{\"619\":1,\"3812\":1}}],[\"cglib\",{\"0\":{\"616\":1,\"624\":1,\"3809\":1,\"3817\":1},\"1\":{\"604\":1,\"608\":1,\"618\":1,\"619\":2,\"620\":1,\"625\":2,\"807\":1,\"3797\":1,\"3801\":1,\"3811\":1,\"3812\":2,\"3813\":1,\"3818\":2,\"3824\":1}}],[\"ctl\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4551\":1}}],[\"cyclicbarrier\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4528\":1}}],[\"c2订阅t0\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"c2\",{\"1\":{\"1039\":1,\"1043\":1,\"1053\":1,\"5215\":1,\"5219\":1,\"5229\":1}}],[\"c2多分配两个分区了\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"c2多分配一个分区\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"c10k\",{\"1\":{\"1144\":1,\"1157\":3,\"1312\":1,\"1325\":3,\"1480\":1,\"1493\":3,\"1648\":1,\"1661\":3,\"4555\":1,\"4568\":3}}],[\"c1订阅t0和t1\",{\"1\":{\"1043\":1,\"5219\":1}}],[\"c1\",{\"1\":{\"1038\":1,\"1043\":1,\"1053\":1,\"5214\":1,\"5219\":1,\"5229\":1}}],[\"c0\",{\"1\":{\"1037\":1,\"1053\":1,\"5213\":1,\"5229\":1}}],[\"c0会多分配一个分区\",{\"1\":{\"1034\":1,\"5210\":1}}],[\"currentthread\",{\"1\":{\"3028\":1,\"3029\":1,\"4282\":1,\"4283\":1}}],[\"currenttimemillis\",{\"1\":{\"406\":4}}],[\"currentcounter\",{\"1\":{\"1024\":3,\"5200\":3}}],[\"current\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"customexception\",{\"1\":{\"919\":3,\"920\":2,\"3936\":3,\"3937\":2}}],[\"cn\",{\"1\":{\"909\":1,\"915\":1,\"2833\":1,\"3017\":1,\"3106\":1,\"3926\":1,\"3932\":1,\"4087\":1,\"4271\":1,\"4360\":1}}],[\"cat\",{\"1\":{\"3320\":1}}],[\"catch语句捕获它\",{\"1\":{\"245\":1,\"251\":1,\"3641\":1,\"3647\":1}}],[\"catch\",{\"1\":{\"229\":1,\"263\":2,\"265\":3,\"274\":1,\"920\":2,\"3623\":1,\"3659\":2,\"3662\":1,\"3937\":2}}],[\"cache\",{\"1\":{\"3205\":1,\"3207\":2,\"5474\":1,\"5476\":2}}],[\"cachedthreadpool\",{\"1\":{\"3066\":2,\"3082\":1,\"3091\":1,\"4320\":2,\"4336\":1,\"4345\":1}}],[\"callerrunspolicy\",{\"1\":{\"3041\":1,\"3058\":1,\"3061\":1,\"4295\":1,\"4312\":1,\"4315\":1}}],[\"callback\",{\"1\":{\"622\":1,\"3815\":1}}],[\"cas操作\",{\"1\":{\"2934\":1,\"4188\":1}}],[\"cas有哪些问题\",{\"1\":{\"2884\":1,\"4138\":1}}],[\"cas机制当中使用了3个基本操作数\",{\"1\":{\"2863\":1,\"4117\":1}}],[\"cas是乐观锁\",{\"1\":{\"2860\":1,\"4114\":1}}],[\"cas\",{\"0\":{\"2855\":1,\"2861\":1,\"2877\":1,\"2882\":1,\"4109\":1,\"4115\":1,\"4131\":1,\"4136\":1},\"1\":{\"2839\":1,\"2840\":3,\"2850\":1,\"2862\":1,\"2878\":1,\"2879\":2,\"2880\":2,\"2881\":1,\"2883\":1,\"2886\":2,\"2893\":1,\"2896\":2,\"2900\":1,\"2901\":1,\"2902\":1,\"2975\":1,\"4093\":1,\"4094\":3,\"4104\":1,\"4116\":1,\"4132\":1,\"4133\":2,\"4134\":2,\"4135\":1,\"4137\":1,\"4140\":2,\"4147\":1,\"4150\":2,\"4154\":1,\"4155\":1,\"4156\":1,\"4229\":1}}],[\"cassandra\",{\"1\":{\"1918\":1,\"4507\":1}}],[\"ca\",{\"1\":{\"1918\":1,\"1919\":1,\"4507\":1,\"4508\":1}}],[\"capacities\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"capacity可以用threshold表示\",{\"1\":{\"711\":1}}],[\"capacity的值时\",{\"1\":{\"711\":1}}],[\"capacity表示当前hashmap的容量是多少\",{\"1\":{\"711\":1}}],[\"capacity就从16扩容到32了\",{\"1\":{\"707\":1}}],[\"capacity\",{\"0\":{\"684\":1},\"1\":{\"539\":1,\"672\":1,\"681\":1,\"682\":1,\"686\":5,\"688\":1,\"689\":1,\"691\":15,\"692\":3,\"700\":1,\"704\":10,\"706\":2}}],[\"capacityincrement来初始化的时候\",{\"1\":{\"525\":1}}],[\"capacityincrement\",{\"1\":{\"513\":2,\"525\":2}}],[\"cap\",{\"0\":{\"1904\":1,\"4493\":1},\"1\":{\"1906\":1,\"1908\":2,\"1915\":2,\"1917\":1,\"4495\":1,\"4497\":2,\"4504\":2,\"4506\":1}}],[\"ca11\",{\"1\":{\"745\":1}}],[\"clh\",{\"1\":{\"2915\":1,\"2916\":3,\"2917\":1,\"4169\":1,\"4170\":3,\"4171\":1}}],[\"clustered\",{\"1\":{\"2392\":1,\"2401\":1,\"4754\":1,\"4763\":1}}],[\"cluster\",{\"1\":{\"1024\":4,\"5200\":4}}],[\"client\",{\"1\":{\"1157\":1,\"1247\":1,\"1325\":1,\"1415\":1,\"1493\":1,\"1583\":1,\"1661\":1,\"1751\":1,\"1782\":1,\"1783\":1,\"4371\":1,\"4372\":1,\"4568\":1,\"4658\":1}}],[\"cli是一个命令行使用spring\",{\"1\":{\"957\":1,\"3974\":1}}],[\"cli\",{\"1\":{\"955\":1,\"3972\":1}}],[\"clear\",{\"1\":{\"547\":1}}],[\"cloud全家桶技术\",{\"1\":{\"3195\":1,\"5464\":1}}],[\"cloud你用过的组件\",{\"1\":{\"3160\":1,\"5440\":1}}],[\"cloud项目部署架构\",{\"1\":{\"1828\":1,\"4417\":1}}],[\"cloud的呢\",{\"1\":{\"1821\":1,\"4410\":1}}],[\"cloud的优缺点以及组件\",{\"0\":{\"1817\":1,\"4406\":1}}],[\"cloud并没有重复制造轮子\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"cloud是一系列框架的有序集合\",{\"1\":{\"1793\":1,\"4382\":1}}],[\"cloud\",{\"0\":{\"1790\":1,\"1791\":1,\"1792\":1,\"4379\":1,\"4380\":1,\"4381\":1,\"5581\":1,\"5594\":1},\"1\":{\"925\":1,\"1823\":2,\"1827\":9,\"1954\":1,\"3190\":1,\"3194\":1,\"3196\":1,\"3942\":1,\"4060\":1,\"4412\":2,\"4416\":9,\"5459\":1,\"5463\":1,\"5465\":1}}],[\"clone\",{\"1\":{\"513\":1,\"515\":1,\"516\":1}}],[\"close\",{\"0\":{\"2201\":1,\"2208\":1},\"1\":{\"265\":4,\"996\":1,\"2086\":1,\"2093\":1,\"4013\":1}}],[\"clazzb\",{\"1\":{\"877\":3,\"3894\":3}}],[\"clazza\",{\"1\":{\"877\":4,\"3894\":4}}],[\"clazz\",{\"1\":{\"299\":2,\"3687\":2}}],[\"classes配置\",{\"1\":{\"935\":1,\"3952\":1}}],[\"class对象就可以对它为所欲为了\",{\"1\":{\"310\":1,\"3698\":1}}],[\"classname\",{\"1\":{\"299\":2,\"3687\":2}}],[\"classnotfoundexception\",{\"1\":{\"229\":2,\"3623\":2}}],[\"class<hashmap>\",{\"1\":{\"305\":1,\"3693\":1}}],[\"class<\",{\"1\":{\"214\":1,\"229\":1,\"307\":1,\"309\":1,\"313\":1,\"316\":1,\"612\":1,\"686\":1,\"691\":3,\"704\":1,\"3608\":1,\"3623\":1,\"3695\":1,\"3697\":1,\"3701\":1,\"3704\":1,\"3805\":1}}],[\"classpath\",{\"1\":{\"210\":1,\"3604\":1}}],[\"class\",{\"1\":{\"194\":2,\"195\":1,\"202\":2,\"211\":1,\"214\":1,\"215\":1,\"229\":1,\"276\":1,\"299\":2,\"302\":1,\"304\":2,\"305\":1,\"306\":1,\"308\":2,\"309\":1,\"312\":1,\"313\":1,\"316\":1,\"323\":2,\"325\":2,\"581\":2,\"599\":1,\"602\":1,\"877\":3,\"919\":1,\"920\":3,\"2829\":1,\"2998\":1,\"2999\":2,\"3009\":1,\"3012\":1,\"3025\":1,\"3041\":1,\"3310\":1,\"3588\":2,\"3589\":1,\"3596\":2,\"3605\":1,\"3608\":1,\"3609\":1,\"3623\":1,\"3664\":1,\"3687\":2,\"3690\":1,\"3692\":2,\"3693\":1,\"3694\":1,\"3696\":2,\"3697\":1,\"3700\":1,\"3701\":1,\"3704\":1,\"3711\":2,\"3713\":2,\"3774\":2,\"3792\":1,\"3795\":1,\"3894\":3,\"3936\":1,\"3937\":3,\"4083\":1,\"4252\":1,\"4253\":2,\"4263\":1,\"4266\":1,\"4279\":1,\"4295\":1}}],[\"classloader的子类重写\",{\"1\":{\"218\":1,\"3612\":1}}],[\"classloader抽象类\",{\"1\":{\"212\":1,\"3606\":1}}],[\"classloader\",{\"1\":{\"178\":1,\"182\":1,\"200\":1,\"201\":1,\"205\":1,\"207\":1,\"213\":1,\"217\":1,\"219\":1,\"223\":1,\"225\":1,\"228\":1,\"612\":1,\"3572\":1,\"3576\":1,\"3594\":1,\"3595\":1,\"3599\":1,\"3601\":1,\"3607\":1,\"3611\":1,\"3613\":1,\"3617\":1,\"3619\":1,\"3622\":1,\"3805\":1}}],[\"cheng\",{\"0\":{\"5585\":1}}],[\"checked\",{\"0\":{\"248\":1,\"3644\":1},\"1\":{\"580\":1,\"3773\":1}}],[\"chang\",{\"0\":{\"5582\":1}}],[\"char\",{\"1\":{\"2366\":1,\"2376\":1,\"4728\":1,\"4738\":1}}],[\"charsets\",{\"1\":{\"208\":1,\"3602\":1}}],[\"chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c\",{\"1\":{\"3106\":1,\"4360\":1}}],[\"chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e\",{\"1\":{\"2961\":1,\"4215\":1}}],[\"chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1\",{\"1\":{\"2856\":1,\"4110\":1}}],[\"chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34\",{\"1\":{\"915\":1,\"3932\":1}}],[\"choose\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"c\",{\"1\":{\"214\":1,\"229\":9,\"276\":1,\"1157\":1,\"1214\":1,\"1217\":2,\"1236\":1,\"1325\":1,\"1382\":1,\"1385\":2,\"1404\":1,\"1493\":1,\"1550\":1,\"1553\":2,\"1572\":1,\"1661\":1,\"1718\":1,\"1721\":2,\"1740\":1,\"1780\":1,\"1916\":1,\"1917\":1,\"1919\":2,\"1921\":1,\"2496\":2,\"2497\":1,\"2498\":1,\"2680\":3,\"2682\":1,\"2901\":1,\"2999\":1,\"3608\":1,\"3623\":9,\"3664\":1,\"4155\":1,\"4253\":1,\"4369\":1,\"4505\":1,\"4506\":1,\"4508\":2,\"4510\":1,\"4568\":1,\"4625\":1,\"4628\":2,\"4647\":1,\"4858\":2,\"4859\":1,\"4860\":1,\"5042\":3,\"5044\":1}}],[\"c++实现的\",{\"1\":{\"3004\":1,\"4258\":1}}],[\"c++实现\",{\"1\":{\"208\":1,\"3602\":1}}],[\"cookie\",{\"1\":{\"3229\":1,\"5498\":1}}],[\"core\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"corepoolsize\",{\"1\":{\"3043\":8,\"3045\":1,\"3049\":1,\"4297\":8,\"4299\":1,\"4303\":1}}],[\"correctstack\",{\"1\":{\"393\":1}}],[\"covering\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"copy\",{\"1\":{\"1188\":1,\"1356\":1,\"1524\":1,\"1692\":1,\"4599\":1}}],[\"copyof方法最终调用native方法进行新数组创建和数据拷贝\",{\"1\":{\"524\":1}}],[\"condition\",{\"1\":{\"2417\":1,\"2826\":1,\"2928\":1,\"4080\":1,\"4182\":1,\"4779\":1}}],[\"conditional按需加载的配置类\",{\"1\":{\"900\":1,\"3917\":1}}],[\"connections\",{\"1\":{\"2275\":1,\"5275\":1,\"5357\":1}}],[\"conf\",{\"1\":{\"2726\":1,\"5088\":1}}],[\"conflict\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"config\",{\"1\":{\"1827\":1,\"3260\":1,\"4416\":1,\"5529\":1}}],[\"config配置中心时\",{\"1\":{\"925\":1,\"3942\":1}}],[\"content\",{\"1\":{\"2266\":1,\"3261\":1,\"5348\":1,\"5530\":1}}],[\"continue\",{\"1\":{\"1033\":1,\"2266\":1,\"5209\":1,\"5348\":1}}],[\"controlleradvice\",{\"1\":{\"916\":1,\"920\":1,\"3933\":1,\"3937\":1}}],[\"controller\",{\"1\":{\"820\":1,\"836\":1,\"917\":1,\"3837\":1,\"3853\":1,\"3934\":1}}],[\"concurrent包中\",{\"1\":{\"2881\":1,\"4135\":1}}],[\"concurrent\",{\"1\":{\"2833\":2,\"3017\":2,\"3041\":4,\"3106\":2,\"4087\":2,\"4271\":2,\"4295\":4,\"4360\":2}}],[\"concurrenthashmap为什么用红黑树\",{\"1\":{\"3161\":1,\"5441\":1}}],[\"concurrenthashmap\",{\"1\":{\"774\":1,\"776\":1,\"787\":1}}],[\"concurrenthashmap同理\",{\"1\":{\"721\":1}}],[\"concurrenthashmap在每一个分段上都用锁进行了保护\",{\"1\":{\"661\":1}}],[\"concurrenthashmap对桶数组进行了分段\",{\"1\":{\"660\":1}}],[\"concurrenthashmap和hashmap的实现方式不一样\",{\"1\":{\"660\":1}}],[\"concurrenthashmap区别\",{\"0\":{\"659\":1}}],[\"concurrenthashmap虽然也是线程安全的\",{\"1\":{\"654\":1}}],[\"concurrentmodificationexception\",{\"1\":{\"510\":1}}],[\"consumer\",{\"1\":{\"3210\":1,\"5479\":1}}],[\"consumer从mq里面读取数据是有序的\",{\"1\":{\"1070\":1,\"5246\":1}}],[\"consumerswithextrapartition\",{\"1\":{\"1033\":3,\"5209\":3}}],[\"consumersfortopic\",{\"1\":{\"1033\":6,\"5209\":6}}],[\"consumerspertopic\",{\"1\":{\"1033\":3,\"5209\":3}}],[\"conscious\",{\"1\":{\"535\":1}}],[\"consistency\",{\"1\":{\"513\":1,\"1906\":1,\"1909\":1,\"2568\":1,\"4495\":1,\"4498\":1,\"4930\":1}}],[\"constuctor\",{\"1\":{\"325\":1,\"3713\":1}}],[\"constructor<\",{\"1\":{\"316\":1,\"3704\":1}}],[\"constructor\",{\"1\":{\"299\":3,\"315\":1,\"316\":3,\"317\":2,\"324\":1,\"325\":3,\"3687\":3,\"3703\":1,\"3704\":3,\"3705\":2,\"3712\":1,\"3713\":3}}],[\"const\",{\"1\":{\"47\":1,\"3446\":1}}],[\"countdownlatch等\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"counter\",{\"1\":{\"1024\":6,\"5200\":6}}],[\"count\",{\"1\":{\"510\":1,\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4588\":1}}],[\"collections中的一个静态内部类\",{\"1\":{\"527\":1}}],[\"collections\",{\"1\":{\"467\":1,\"531\":1,\"1033\":1,\"5209\":1}}],[\"collection接口在java\",{\"1\":{\"465\":1}}],[\"collection\",{\"1\":{\"465\":1}}],[\"color\",{\"1\":{\"83\":1,\"3482\":1}}],[\"com对应的ip是啥呀\",{\"1\":{\"2302\":1,\"5384\":1}}],[\"commit\",{\"1\":{\"982\":1,\"996\":1,\"1897\":2,\"1902\":2,\"2330\":1,\"3999\":1,\"4013\":1,\"4486\":2,\"4491\":2,\"4692\":1}}],[\"committed\",{\"1\":{\"852\":1,\"854\":1,\"2594\":1,\"3869\":1,\"3871\":1,\"4956\":1}}],[\"com\",{\"1\":{\"397\":1,\"915\":1,\"1158\":1,\"1267\":1,\"1326\":1,\"1435\":1,\"1494\":1,\"1603\":1,\"1662\":1,\"1771\":1,\"1954\":1,\"2285\":1,\"2287\":1,\"2288\":2,\"2291\":1,\"2292\":1,\"2297\":1,\"2298\":2,\"2299\":4,\"2300\":1,\"2301\":1,\"2302\":1,\"2856\":1,\"2904\":1,\"2961\":1,\"3041\":1,\"3106\":1,\"3401\":1,\"3932\":1,\"4060\":1,\"4110\":1,\"4158\":1,\"4215\":1,\"4295\":1,\"4360\":1,\"4569\":1,\"4678\":1,\"5367\":1,\"5369\":1,\"5370\":2,\"5373\":1,\"5374\":1,\"5379\":1,\"5380\":2,\"5381\":4,\"5382\":1,\"5383\":1,\"5384\":1}}],[\"compareandset\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"compareandse方法首先检查当前引用是否等于预期引用\",{\"1\":{\"2891\":1,\"4145\":1}}],[\"compare和swap\",{\"1\":{\"2878\":1,\"4132\":1}}],[\"compare\",{\"1\":{\"2862\":1,\"2870\":1,\"2900\":1,\"4116\":1,\"4124\":1,\"4154\":1}}],[\"compatibility\",{\"1\":{\"368\":1}}],[\"compression\",{\"1\":{\"2272\":1,\"5354\":1}}],[\"component把监听器加入spring容器中管理\",{\"1\":{\"934\":1,\"3951\":1}}],[\"composition\",{\"1\":{\"351\":1,\"365\":1}}],[\"code\",{\"1\":{\"276\":1,\"513\":1,\"535\":1,\"3043\":12,\"3664\":1,\"4297\":12}}],[\"及其作用\",{\"0\":{\"177\":1,\"3571\":1}}],[\"二面\",{\"0\":{\"3117\":1,\"5397\":1}}],[\"二级索引\",{\"0\":{\"2382\":1,\"4744\":1},\"1\":{\"2369\":1,\"2383\":1,\"2401\":1,\"4731\":1,\"4745\":1,\"4763\":1}}],[\"二级缓存的执行流程\",{\"1\":{\"1001\":1,\"4018\":1}}],[\"二级缓存的生命周期和应用同步\",{\"1\":{\"998\":1,\"4015\":1}}],[\"二级缓存进行增删改操作也会刷新二级缓存\",{\"1\":{\"1000\":1,\"4017\":1}}],[\"二级缓存总是默认开启的\",{\"1\":{\"999\":1,\"4016\":1}}],[\"二级缓存cache中readonly属性如果为false\",{\"1\":{\"997\":1,\"4014\":1}}],[\"二级缓存需要手动配置\",{\"1\":{\"995\":1,\"4012\":1}}],[\"二级缓存作用域是针对mapper进行缓存\",{\"1\":{\"994\":1,\"4011\":1}}],[\"二级缓存\",{\"0\":{\"980\":1,\"983\":1,\"3997\":1,\"4000\":1}}],[\"二级缓存能解决吗\",{\"1\":{\"886\":1,\"3903\":1}}],[\"二进制帧更加紧凑和高效\",{\"1\":{\"2271\":1,\"5353\":1}}],[\"二进制帧\",{\"1\":{\"2271\":1,\"5353\":1}}],[\"二者并不冲突\",{\"1\":{\"2176\":1}}],[\"二者跨度较大\",{\"1\":{\"641\":1,\"3733\":1}}],[\"二叉搜索树就变为了一个链表\",{\"1\":{\"419\":1,\"3744\":1}}],[\"二叉树\",{\"0\":{\"414\":1,\"3739\":1}}],[\"二\",{\"0\":{\"175\":1,\"463\":1,\"3139\":1,\"3328\":1,\"3569\":1,\"3699\":1,\"5272\":1,\"5419\":1},\"1\":{\"302\":1,\"3690\":1}}],[\"写操作\",{\"1\":{\"3205\":1,\"5474\":1}}],[\"写写\",{\"1\":{\"2984\":1,\"4238\":1}}],[\"写写的则是互斥的\",{\"1\":{\"2981\":1,\"4235\":1}}],[\"写写互斥的\",{\"1\":{\"2510\":1,\"4872\":1}}],[\"写读\",{\"1\":{\"2981\":1,\"2984\":1,\"4235\":1,\"4238\":1}}],[\"写入系统内核缓冲区之后直接返回\",{\"1\":{\"2747\":1,\"5109\":1}}],[\"写锁等待\",{\"1\":{\"2499\":1,\"4861\":1}}],[\"写锁\",{\"0\":{\"2983\":1,\"4237\":1},\"1\":{\"2487\":1,\"2489\":1,\"2490\":2,\"2496\":1,\"2498\":1,\"2984\":1,\"4238\":1,\"4849\":1,\"4851\":1,\"4852\":2,\"4858\":1,\"4860\":1}}],[\"写\",{\"1\":{\"1858\":3,\"4447\":3}}],[\"写在前面\",{\"0\":{\"149\":1,\"3548\":1}}],[\"写作日期为\",{\"1\":{\"119\":1,\"3518\":1}}],[\"f30aa7a662c728b7407c54ae6bfd27d1\",{\"1\":{\"3357\":1}}],[\"f4|uniq\",{\"1\":{\"3320\":1}}],[\"f4108e1816b3087f38b546372e214958\",{\"1\":{\"1031\":1,\"5207\":1}}],[\"ftl\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"ftp\",{\"1\":{\"2160\":1}}],[\"fsync用于强制刷新系统内核缓冲区\",{\"1\":{\"2748\":1,\"5110\":1}}],[\"fsync\",{\"1\":{\"2742\":5,\"2748\":1,\"5104\":5,\"5110\":1}}],[\"fsync策略\",{\"1\":{\"2735\":1,\"5097\":1}}],[\"flag\",{\"1\":{\"2618\":1,\"4980\":1}}],[\"flush\",{\"1\":{\"2450\":1,\"4812\":1}}],[\"float\",{\"1\":{\"678\":1,\"2648\":1,\"5010\":1}}],[\"full\",{\"1\":{\"2389\":1,\"4751\":1}}],[\"ff\",{\"1\":{\"2242\":6,\"5324\":6}}],[\"feignclient注解的接口\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"feign会进行包扫描\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"feign通过处理注解\",{\"1\":{\"1850\":1,\"4439\":1}}],[\"feign远程调用\",{\"1\":{\"1848\":1,\"4437\":1}}],[\"feign远程调用的基本流程\",{\"0\":{\"1847\":1,\"4436\":1},\"1\":{\"1848\":1,\"4437\":1}}],[\"feign\",{\"1\":{\"1827\":1,\"1846\":1,\"4416\":1,\"4435\":1}}],[\"fd\",{\"1\":{\"1177\":2,\"1345\":2,\"1513\":2,\"1681\":2,\"4588\":2}}],[\"freemarker\",{\"1\":{\"3129\":1,\"3246\":1,\"5409\":1,\"5515\":1}}],[\"frequently\",{\"1\":{\"2770\":1,\"2771\":1,\"5132\":1,\"5133\":1}}],[\"frame\",{\"0\":{\"5577\":1}}],[\"frames\",{\"1\":{\"2271\":1,\"5353\":1}}],[\"framework\",{\"1\":{\"909\":1,\"3926\":1}}],[\"from\",{\"1\":{\"276\":1,\"279\":1,\"977\":3,\"3664\":1,\"3667\":1,\"3994\":3}}],[\"front\",{\"1\":{\"151\":1,\"155\":1,\"3550\":1}}],[\"frontmatter\",{\"1\":{\"10\":1,\"33\":1,\"35\":2,\"117\":1,\"140\":1,\"3409\":1,\"3432\":1,\"3434\":2,\"3516\":1,\"3539\":1}}],[\"fa\",{\"0\":{\"5585\":1}}],[\"fair\",{\"1\":{\"2832\":2,\"4086\":2}}],[\"fairsync\",{\"1\":{\"2830\":1,\"2832\":1,\"4084\":1,\"4086\":1}}],[\"fail的\",{\"1\":{\"657\":1}}],[\"fail\",{\"1\":{\"652\":3,\"2966\":1,\"4220\":1}}],[\"fail机制的\",{\"1\":{\"657\":1}}],[\"fail机制\",{\"1\":{\"511\":1,\"519\":1}}],[\"factory\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"factories都会被读取到\",{\"1\":{\"907\":1,\"3924\":1}}],[\"factories被读取到\",{\"1\":{\"907\":1,\"3924\":1}}],[\"factories\",{\"1\":{\"905\":2,\"3922\":2}}],[\"factories中的自动配置类实现自动装配\",{\"1\":{\"900\":1,\"3917\":1}}],[\"factories文件\",{\"1\":{\"900\":1,\"3917\":1}}],[\"factor\",{\"1\":{\"678\":1}}],[\"factor和default\",{\"1\":{\"672\":1}}],[\"fast迭代器\",{\"1\":{\"656\":1}}],[\"fast\",{\"1\":{\"652\":1,\"2966\":1,\"4220\":1}}],[\"false\",{\"1\":{\"229\":1,\"2420\":1,\"2832\":1,\"2929\":1,\"2930\":1,\"2932\":1,\"3316\":1,\"3623\":1,\"4086\":1,\"4183\":1,\"4184\":1,\"4186\":1,\"4782\":1}}],[\"following\",{\"1\":{\"1886\":1,\"1889\":1,\"3043\":1,\"4297\":1,\"4475\":1,\"4478\":1}}],[\"followers\",{\"1\":{\"1878\":1,\"4467\":1}}],[\"follower跟随者\",{\"1\":{\"1871\":1,\"4460\":1}}],[\"follower\",{\"1\":{\"1867\":1,\"1873\":1,\"1874\":1,\"1877\":1,\"1878\":1,\"1886\":1,\"1887\":1,\"1889\":1,\"1890\":1,\"1894\":1,\"1902\":2,\"4456\":1,\"4462\":1,\"4463\":1,\"4466\":1,\"4467\":1,\"4475\":1,\"4476\":1,\"4478\":1,\"4479\":1,\"4483\":1,\"4491\":2}}],[\"followed\",{\"1\":{\"510\":1}}],[\"fork\",{\"1\":{\"2731\":1,\"5093\":1}}],[\"format\",{\"1\":{\"2531\":1,\"4893\":1}}],[\"for循环对订阅的多个topic分别进行处理\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"for\",{\"1\":{\"406\":2,\"510\":1,\"1033\":3,\"1095\":1,\"2508\":1,\"2535\":1,\"2609\":2,\"3043\":3,\"4297\":3,\"4870\":1,\"4897\":1,\"4971\":2,\"5209\":3}}],[\"forname\",{\"1\":{\"299\":1,\"308\":1,\"309\":1,\"313\":1,\"316\":1,\"3687\":1,\"3696\":1,\"3697\":1,\"3701\":1,\"3704\":1}}],[\"foo\",{\"0\":{\"146\":1,\"166\":1,\"3545\":1,\"3560\":1},\"1\":{\"168\":1,\"3562\":1}}],[\"f2\",{\"1\":{\"271\":1}}],[\"f\",{\"1\":{\"271\":1}}],[\"fixedthreadpool\",{\"1\":{\"3065\":1,\"3080\":1,\"3090\":1,\"4319\":1,\"4334\":1,\"4344\":1}}],[\"fifo队列\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"fifo\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"firstvalue\",{\"1\":{\"3031\":1,\"4285\":1}}],[\"firstkey\",{\"1\":{\"3031\":1,\"4285\":1}}],[\"first\",{\"1\":{\"1126\":2,\"1294\":2,\"1462\":2,\"1630\":2,\"2214\":1,\"2307\":1,\"4537\":2,\"5296\":1}}],[\"fields\",{\"1\":{\"513\":4}}],[\"field\",{\"1\":{\"320\":1,\"321\":4,\"686\":1,\"704\":6,\"2710\":1,\"3708\":1,\"3709\":4,\"5072\":1}}],[\"fin\",{\"1\":{\"2105\":2}}],[\"final\",{\"1\":{\"513\":2,\"625\":1,\"678\":1,\"682\":1,\"729\":1,\"781\":1,\"789\":1,\"3818\":1}}],[\"finally内的修改效果起了作用\",{\"1\":{\"271\":1}}],[\"finally内的修改效果不起作用\",{\"1\":{\"271\":1}}],[\"finally执行\",{\"1\":{\"271\":2}}],[\"finally\",{\"1\":{\"271\":2}}],[\"finally中的语句会在return之前执⾏\",{\"1\":{\"269\":1}}],[\"findbootstrapclassornull\",{\"1\":{\"229\":1,\"3623\":1}}],[\"findloadedclass\",{\"1\":{\"229\":1,\"3623\":1}}],[\"findclass\",{\"1\":{\"215\":1,\"217\":1,\"218\":1,\"219\":1,\"229\":1,\"234\":1,\"3609\":1,\"3611\":1,\"3612\":1,\"3613\":1,\"3623\":1,\"3628\":1}}],[\"filereader\",{\"1\":{\"265\":1}}],[\"fileinputstream\",{\"1\":{\"263\":2,\"3659\":2}}],[\"file\",{\"1\":{\"263\":5,\"1166\":1,\"1334\":1,\"1502\":1,\"1670\":1,\"2722\":1,\"2733\":1,\"3659\":5,\"4577\":1,\"5084\":1,\"5095\":1}}],[\"filenotfoundexception\",{\"1\":{\"257\":1,\"263\":1,\"3653\":1,\"3659\":1}}],[\"此人要仔细保存私有密钥\",{\"1\":{\"3392\":1}}],[\"此策略将丢弃最早的未处理的任务请求\",{\"1\":{\"3060\":1,\"4314\":1}}],[\"此过程是原子性\",{\"1\":{\"2848\":1,\"4102\":1}}],[\"此过程不需要将数据从操作系统内核缓冲区拷贝到\",{\"1\":{\"1185\":1,\"1353\":1,\"1521\":1,\"1689\":1,\"4596\":1}}],[\"此外\",{\"1\":{\"2618\":1,\"4980\":1}}],[\"此方法主要用于在客户端和服务器之间通过网络进行通信\",{\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"4542\":1}}],[\"此类不能实例化\",{\"1\":{\"467\":1}}],[\"此时只能有一个线程获得锁\",{\"1\":{\"2984\":1,\"4238\":1}}],[\"此时对线程1来说\",{\"1\":{\"2872\":1,\"4126\":1}}],[\"此时有多个线程同时来竞争锁\",{\"1\":{\"2845\":1,\"4099\":1}}],[\"此时并没有同步到磁盘\",{\"1\":{\"2741\":1,\"5103\":1}}],[\"此时并不会阻塞\",{\"1\":{\"2495\":1,\"4857\":1}}],[\"此时还在系统内核缓存区为同步到磁盘\",{\"1\":{\"2735\":1,\"5097\":1}}],[\"此时还在选举阶段所以整个集群处于\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"此时查询到的记录数量有\",{\"1\":{\"2590\":1,\"4952\":1}}],[\"此时数据库超过\",{\"1\":{\"2589\":1,\"4951\":1}}],[\"此时由于线程\",{\"1\":{\"2496\":1,\"4858\":1}}],[\"此时就先对该表加上\",{\"1\":{\"2494\":1,\"4856\":1}}],[\"此时mq不会触发消息推送事件\",{\"1\":{\"1934\":1,\"4040\":1}}],[\"此时它肯定会作为\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"此时肯定要重新进行\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"此时同意了提案n1\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"此时会收到彼此的投票信息\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"此时将开始执行拦截器的\",{\"1\":{\"819\":1,\"3836\":1}}],[\"此时得到了x\",{\"1\":{\"737\":1}}],[\"此时x\",{\"1\":{\"736\":1}}],[\"此时\",{\"1\":{\"419\":1,\"1885\":1,\"3317\":1,\"3744\":1,\"4474\":1}}],[\"此页面应当包含\",{\"1\":{\"130\":1,\"3529\":1}}],[\"此文字有脚注\",{\"1\":{\"70\":1,\"3469\":1}}],[\"徽章\",{\"1\":{\"128\":1,\"3527\":1}}],[\"徽章文字\",{\"1\":{\"128\":1,\"3527\":1}}],[\"标明要异步调用\",{\"1\":{\"3252\":1,\"5521\":1}}],[\"标识\",{\"1\":{\"3011\":1,\"3015\":1,\"4265\":1,\"4269\":1}}],[\"标志位为00\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"标志位为01\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"标准中规定的各级隔离级别允许发生的现象却有些出入\",{\"1\":{\"2605\":1,\"4967\":1}}],[\"标准中规定的\",{\"1\":{\"2605\":1,\"4967\":1}}],[\"标准提出了四种隔离级别来规避这些现象\",{\"1\":{\"2592\":1,\"4954\":1}}],[\"标准定义了四个隔离级别\",{\"1\":{\"2330\":1,\"4692\":1}}],[\"标准资源都继承了这个接口\",{\"1\":{\"262\":1,\"3658\":1}}],[\"标为\",{\"1\":{\"370\":1}}],[\"标题和页面信息\",{\"1\":{\"132\":1,\"3531\":1}}],[\"标签为\",{\"1\":{\"121\":1,\"3520\":1}}],[\"标记\",{\"0\":{\"72\":1,\"3471\":1}}],[\"日志记录了能体现该接口特性的\",{\"1\":{\"3308\":1}}],[\"日志格式要设置为\",{\"1\":{\"2530\":1,\"4892\":1}}],[\"日志信息\",{\"1\":{\"940\":1,\"3957\":1}}],[\"日志管理\",{\"1\":{\"806\":1,\"3823\":1}}],[\"日常开发几乎看不到使用静态代理的场景\",{\"1\":{\"601\":1,\"3794\":1}}],[\"日\",{\"1\":{\"119\":1,\"3518\":1}}],[\"月\",{\"1\":{\"119\":1,\"3518\":1}}],[\"年设计了基于\",{\"1\":{\"5275\":1}}],[\"年设计的\",{\"1\":{\"5275\":1}}],[\"年重写了之前的论文\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"年之后\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"年代\",{\"1\":{\"1880\":2,\"4469\":2}}],[\"年\",{\"1\":{\"119\":1,\"3518\":1,\"5275\":1}}],[\"↩︎\",{\"1\":{\"113\":1,\"3512\":1}}],[\"捐赠一杯咖啡\",{\"1\":{\"105\":1,\"3504\":1}}],[\"向硬盘做同步操作\",{\"1\":{\"2742\":1,\"5104\":1}}],[\"向下延伸\",{\"1\":{\"1086\":1,\"4027\":1}}],[\"向\",{\"1\":{\"105\":1,\"825\":1,\"3504\":1,\"3842\":1}}],[\"样式化\",{\"0\":{\"104\":1,\"3503\":1}}],[\"导致所有的请求都落到了数据库上\",{\"1\":{\"2805\":1,\"5167\":1}}],[\"导致大量的请求都直接落到了数据库上\",{\"1\":{\"2804\":1,\"5166\":1}}],[\"导致二级缓存失效\",{\"1\":{\"1000\":1,\"4017\":1}}],[\"导致⽣成多个实例\",{\"1\":{\"582\":1,\"3775\":1}}],[\"导入文件\",{\"0\":{\"96\":1,\"3495\":1}}],[\"导航栏\",{\"1\":{\"12\":1,\"136\":1,\"3411\":1,\"3535\":1}}],[\"−1\",{\"1\":{\"94\":1,\"3493\":1}}],[\"ωyω​\",{\"1\":{\"94\":2,\"3493\":2}}],[\"∂ωr∂r​\",{\"1\":{\"94\":1,\"3493\":1}}],[\"ecc\",{\"1\":{\"3392\":1}}],[\"ecc等\",{\"1\":{\"3387\":1}}],[\"echarts\",{\"0\":{\"87\":1,\"3486\":1}}],[\"e10adc3949ba59abbe56e057f20f883e\",{\"1\":{\"3349\":1}}],[\"even\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"event\",{\"1\":{\"1118\":1,\"1286\":1,\"1454\":1,\"1622\":1,\"4529\":1}}],[\"eventlistener注解\",{\"1\":{\"936\":1,\"3953\":1}}],[\"eviction\",{\"1\":{\"2768\":1,\"5130\":1}}],[\"es\",{\"1\":{\"1953\":1,\"4059\":1}}],[\"epoch\",{\"1\":{\"1880\":3,\"4469\":3}}],[\"epoll\",{\"0\":{\"1138\":1,\"1306\":1,\"1474\":1,\"1642\":1,\"4549\":1},\"1\":{\"1136\":1,\"1137\":1,\"1139\":1,\"1140\":4,\"1141\":2,\"1142\":1,\"1144\":2,\"1145\":2,\"1146\":1,\"1147\":1,\"1149\":1,\"1150\":1,\"1155\":1,\"1156\":1,\"1158\":1,\"1304\":1,\"1305\":1,\"1307\":1,\"1308\":4,\"1309\":2,\"1310\":1,\"1312\":2,\"1313\":2,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1323\":1,\"1324\":1,\"1326\":1,\"1472\":1,\"1473\":1,\"1475\":1,\"1476\":4,\"1477\":2,\"1478\":1,\"1480\":2,\"1481\":2,\"1482\":1,\"1483\":1,\"1485\":1,\"1486\":1,\"1491\":1,\"1492\":1,\"1494\":1,\"1640\":1,\"1641\":1,\"1643\":1,\"1644\":4,\"1645\":2,\"1646\":1,\"1648\":2,\"1649\":2,\"1650\":1,\"1651\":1,\"1653\":1,\"1654\":1,\"1659\":1,\"1660\":1,\"1662\":1,\"4547\":1,\"4548\":1,\"4550\":1,\"4551\":4,\"4552\":2,\"4553\":1,\"4555\":2,\"4556\":2,\"4557\":1,\"4558\":1,\"4560\":1,\"4561\":1,\"4566\":1,\"4567\":1,\"4569\":1}}],[\"eureka\",{\"1\":{\"1827\":1,\"1918\":1,\"4416\":1,\"4507\":1}}],[\"ewouldblock\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"et\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"4558\":1}}],[\"edge\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"4558\":1}}],[\"eagain\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"easylife206\",{\"1\":{\"1056\":1,\"5232\":1}}],[\"each\",{\"1\":{\"510\":1}}],[\"eb5597ed0b81b03c762e54ff3f909492\",{\"1\":{\"1054\":1,\"5230\":1}}],[\"eff9adb5a086691e56b5d68bec68ffcf\",{\"1\":{\"1035\":1,\"5211\":1}}],[\"empty\",{\"1\":{\"539\":1}}],[\"emitted\",{\"1\":{\"510\":1}}],[\"elasticsearch\",{\"1\":{\"2365\":1,\"2366\":1,\"2376\":1,\"3190\":1,\"4727\":1,\"4728\":1,\"4738\":1,\"5459\":1}}],[\"elementcount++\",{\"1\":{\"535\":1}}],[\"elementcount\",{\"1\":{\"513\":2,\"535\":4,\"549\":3}}],[\"elementdata\",{\"1\":{\"510\":2,\"513\":2,\"515\":1,\"535\":4,\"539\":5,\"547\":4,\"549\":4}}],[\"element\",{\"1\":{\"510\":1,\"535\":2,\"537\":2,\"539\":2}}],[\"elements\",{\"1\":{\"510\":2}}],[\"else\",{\"1\":{\"229\":1,\"265\":2,\"293\":1,\"1024\":2,\"3028\":1,\"3623\":1,\"3681\":1,\"4282\":1,\"5200\":2}}],[\"equals\",{\"1\":{\"293\":2,\"3681\":2}}],[\"errorresult\",{\"1\":{\"920\":2,\"3937\":2}}],[\"error\",{\"1\":{\"241\":1,\"253\":1,\"263\":2,\"824\":1,\"920\":3,\"3637\":1,\"3649\":1,\"3659\":2,\"3841\":1,\"3937\":3}}],[\"e\",{\"0\":{\"5576\":1},\"1\":{\"229\":1,\"263\":4,\"274\":2,\"535\":2,\"537\":1,\"539\":1,\"545\":1,\"547\":2,\"549\":2,\"920\":8,\"3623\":1,\"3659\":4,\"3662\":2,\"3937\":8}}],[\"exists\",{\"1\":{\"3290\":1,\"5559\":1}}],[\"ex\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"expires\",{\"1\":{\"2267\":1,\"2763\":1,\"2764\":1,\"2765\":1,\"2770\":1,\"5125\":1,\"5126\":1,\"5127\":1,\"5132\":1,\"5349\":1}}],[\"expectedmodcount\",{\"1\":{\"510\":2}}],[\"executor\",{\"1\":{\"3043\":1,\"3051\":1,\"3078\":1,\"4297\":1,\"4305\":1,\"4332\":1}}],[\"executors\",{\"1\":{\"3041\":2,\"3078\":1,\"3088\":1,\"3089\":1,\"4295\":2,\"4332\":1,\"4342\":1,\"4343\":1}}],[\"execute\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"executed\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"execution\",{\"1\":{\"180\":1,\"182\":1,\"3043\":1,\"3574\":1,\"3576\":1,\"4297\":1}}],[\"execdriver\",{\"1\":{\"1787\":1,\"1788\":1,\"4376\":1,\"4377\":1}}],[\"excess\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"exceptioncatch\",{\"1\":{\"920\":2,\"3937\":2}}],[\"exceptionhandler\",{\"1\":{\"916\":1,\"917\":1,\"920\":2,\"3933\":1,\"3934\":1,\"3937\":2}}],[\"exceptions\",{\"0\":{\"248\":2,\"3644\":2}}],[\"exception\",{\"1\":{\"242\":2,\"265\":4,\"274\":1,\"276\":3,\"278\":1,\"920\":6,\"3638\":2,\"3662\":1,\"3664\":3,\"3666\":1,\"3937\":6}}],[\"excludename\",{\"1\":{\"903\":1,\"3920\":1}}],[\"exclude\",{\"1\":{\"903\":1,\"3920\":1}}],[\"extends\",{\"1\":{\"307\":1,\"622\":1,\"919\":1,\"3695\":1,\"3815\":1,\"3936\":1}}],[\"extensionclassloader\",{\"1\":{\"209\":1,\"3603\":1}}],[\"ext\",{\"1\":{\"209\":2,\"3603\":2}}],[\"enabled\",{\"1\":{\"3316\":1}}],[\"enableasync注解开启异步调用\",{\"1\":{\"3252\":1,\"5521\":1}}],[\"enableautoconfiguration=true\",{\"1\":{\"901\":1,\"3918\":1}}],[\"enableautoconfiguration开启自动装配\",{\"1\":{\"900\":1,\"3917\":1}}],[\"enableautoconfiguration会自动去maven中读取每个starter中的spring\",{\"1\":{\"900\":1,\"3917\":1}}],[\"entries配置\",{\"1\":{\"2699\":1,\"5061\":1}}],[\"entries\",{\"1\":{\"2691\":1,\"2706\":1,\"5053\":1,\"5068\":1}}],[\"entryset\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"entry<string\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"entity\",{\"1\":{\"2267\":1,\"5349\":1}}],[\"enumeration\",{\"1\":{\"652\":1}}],[\"ensureexplicitcapacity\",{\"1\":{\"539\":1}}],[\"ensurecapacityinternal\",{\"1\":{\"539\":2}}],[\"ensurecapacityhelper\",{\"1\":{\"535\":2}}],[\"ensure\",{\"1\":{\"513\":1}}],[\"endpoint\",{\"1\":{\"940\":1,\"3957\":1}}],[\"end2\",{\"1\":{\"406\":2}}],[\"end1\",{\"1\":{\"406\":2}}],[\"encouraged\",{\"1\":{\"217\":1,\"3611\":1}}],[\"engine\",{\"1\":{\"180\":1,\"182\":1,\"1784\":1,\"3574\":1,\"3576\":1,\"4373\":1}}],[\"enhancer类来动态获取被代理类\",{\"1\":{\"623\":1,\"3816\":1}}],[\"enhancer\",{\"1\":{\"620\":1,\"3813\":1}}],[\"enhance\",{\"1\":{\"42\":1,\"3441\":1}}],[\"图解线程池实现原理\",{\"1\":{\"3073\":1,\"4327\":1}}],[\"图片来源\",{\"1\":{\"3053\":1,\"4307\":1}}],[\"图片的路径\",{\"1\":{\"2685\":1,\"5047\":1}}],[\"图片\",{\"1\":{\"2598\":1,\"2865\":1,\"2867\":1,\"2869\":1,\"2871\":1,\"2873\":1,\"2875\":1,\"2889\":1,\"2940\":1,\"2951\":1,\"2957\":1,\"2958\":1,\"3095\":1,\"3100\":1,\"3102\":1,\"3105\":1,\"4119\":1,\"4121\":1,\"4123\":1,\"4125\":1,\"4127\":1,\"4129\":1,\"4143\":1,\"4194\":1,\"4205\":1,\"4211\":1,\"4212\":1,\"4349\":1,\"4354\":1,\"4356\":1,\"4359\":1,\"4960\":1}}],[\"图片增强\",{\"0\":{\"79\":1,\"3478\":1}}],[\"图表\",{\"0\":{\"85\":1,\"3484\":1}}],[\"03\",{\"1\":{\"3106\":1,\"4360\":1}}],[\"02\",{\"1\":{\"2833\":1,\"3017\":1,\"4087\":1,\"4271\":1}}],[\"0连接发起多重的请求\",{\"1\":{\"1978\":1,\"1993\":1,\"2008\":1,\"2021\":1,\"2034\":1,\"2049\":1,\"5269\":1,\"5292\":1}}],[\"04\",{\"0\":{\"1925\":1,\"4031\":1}}],[\"0xffffcd7d\",{\"1\":{\"775\":1}}],[\"0x7fffffff\",{\"1\":{\"761\":1,\"785\":1}}],[\"06\",{\"1\":{\"767\":1}}],[\"0版本\",{\"1\":{\"646\":1}}],[\"0000在对0000\",{\"1\":{\"745\":1}}],[\"0000和0001\",{\"1\":{\"745\":1}}],[\"00000000000000000000000000001111\",{\"1\":{\"750\":1}}],[\"00000006\",{\"1\":{\"640\":1,\"3732\":1}}],[\"00000094\",{\"1\":{\"641\":1,\"3733\":1}}],[\"00001316\",{\"1\":{\"641\":1,\"3733\":1}}],[\"01\",{\"1\":{\"397\":1}}],[\"0\",{\"0\":{\"2264\":1,\"2269\":1,\"2274\":2,\"2816\":1,\"5178\":1,\"5346\":1,\"5351\":1,\"5356\":2},\"1\":{\"83\":1,\"260\":2,\"271\":4,\"276\":4,\"406\":2,\"525\":1,\"535\":1,\"539\":1,\"547\":1,\"549\":1,\"678\":1,\"702\":1,\"706\":2,\"712\":1,\"729\":1,\"757\":1,\"775\":1,\"781\":1,\"977\":1,\"1024\":1,\"1033\":2,\"1095\":2,\"1236\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"1885\":1,\"1886\":2,\"2265\":1,\"2267\":1,\"2268\":1,\"2270\":2,\"2271\":1,\"2272\":1,\"2273\":1,\"2275\":3,\"2276\":3,\"2277\":2,\"2420\":1,\"2524\":1,\"2536\":1,\"2708\":1,\"2716\":1,\"2723\":1,\"2733\":1,\"2769\":1,\"2778\":1,\"2931\":1,\"3006\":1,\"3007\":1,\"3043\":6,\"3318\":2,\"3482\":1,\"3656\":2,\"3664\":4,\"3994\":1,\"4185\":1,\"4260\":1,\"4261\":1,\"4297\":6,\"4474\":1,\"4475\":2,\"4647\":1,\"4782\":1,\"4886\":1,\"4898\":1,\"5070\":1,\"5078\":1,\"5085\":1,\"5095\":1,\"5131\":1,\"5140\":1,\"5200\":1,\"5209\":2,\"5347\":1,\"5349\":1,\"5350\":1,\"5352\":2,\"5353\":1,\"5354\":1,\"5355\":1,\"5357\":3,\"5358\":3,\"5359\":2}}],[\"rsa\",{\"1\":{\"3387\":1,\"3392\":1}}],[\"rst\",{\"1\":{\"2103\":1}}],[\"r\",{\"1\":{\"3320\":1}}],[\"rpush+lpop\",{\"1\":{\"2695\":1,\"5057\":1}}],[\"rpop\",{\"1\":{\"2695\":1,\"5057\":1}}],[\"rpc\",{\"1\":{\"606\":1,\"3799\":1}}],[\"ribbon\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"run\",{\"1\":{\"3058\":1,\"4312\":1}}],[\"running\",{\"1\":{\"1106\":1,\"1274\":1,\"1442\":1,\"1610\":1,\"4517\":1}}],[\"runnable\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"3025\":1,\"3043\":1,\"4279\":1,\"4297\":1,\"4516\":1}}],[\"runtimeexception\",{\"1\":{\"919\":1,\"3936\":1}}],[\"runtimeexception与其子类\",{\"1\":{\"253\":1,\"3649\":1}}],[\"runtime\",{\"1\":{\"179\":1,\"182\":1,\"3573\":1,\"3576\":1}}],[\"roll\",{\"1\":{\"2615\":1,\"2619\":1,\"4977\":1,\"4981\":1}}],[\"rollback\",{\"1\":{\"2330\":1,\"4692\":1}}],[\"row\",{\"1\":{\"2326\":1,\"2530\":1,\"2531\":1,\"2620\":1,\"4688\":1,\"4892\":1,\"4893\":1,\"4982\":1}}],[\"rowbounds\",{\"1\":{\"973\":1,\"3990\":1}}],[\"roundrobinassignor的分配策略是将消费组内订阅的所有topic的分区及所有消费者进行排序后尽量均衡的分配\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"roundrobinassignor\",{\"1\":{\"1027\":1,\"1040\":1,\"5203\":1,\"5216\":1}}],[\"robin算法\",{\"1\":{\"1023\":1,\"5199\":1}}],[\"rdb\",{\"0\":{\"2724\":1,\"2728\":1,\"5086\":1,\"5090\":1},\"1\":{\"2721\":1,\"2723\":1,\"2729\":1,\"2737\":1,\"5083\":1,\"5085\":1,\"5091\":1,\"5099\":1}}],[\"rd\",{\"1\":{\"915\":1,\"3932\":1}}],[\"rejectedexecution\",{\"1\":{\"3072\":1,\"4326\":1}}],[\"rejectedexecutionexception\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"rejectedexecutionexception来拒绝新任务的处理\",{\"1\":{\"3057\":1,\"4311\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"3043\":1,\"3061\":1,\"4297\":1,\"4315\":1}}],[\"reentrantreadwritelock\",{\"1\":{\"2906\":1,\"2982\":1,\"2985\":1,\"4160\":1,\"4236\":1,\"4239\":1}}],[\"reentrantlock\",{\"0\":{\"2827\":1,\"4081\":1},\"1\":{\"2821\":1,\"2822\":1,\"2823\":1,\"2824\":1,\"2825\":1,\"2826\":1,\"2828\":2,\"2829\":1,\"2830\":1,\"2831\":1,\"2832\":1,\"2970\":1,\"2979\":1,\"2993\":1,\"2994\":1,\"4075\":1,\"4076\":1,\"4077\":1,\"4078\":1,\"4079\":1,\"4080\":1,\"4082\":2,\"4083\":1,\"4084\":1,\"4085\":1,\"4086\":1,\"4224\":1,\"4233\":1,\"4247\":1,\"4248\":1}}],[\"recently\",{\"1\":{\"2763\":1,\"2766\":1,\"5125\":1,\"5128\":1}}],[\"record\",{\"0\":{\"2543\":1,\"4905\":1},\"1\":{\"2540\":1,\"2542\":1,\"2544\":1,\"2552\":1,\"2618\":1,\"4902\":1,\"4904\":1,\"4906\":1,\"4914\":1,\"4980\":1}}],[\"rewrite\",{\"1\":{\"2743\":1,\"5105\":1}}],[\"redirect\",{\"1\":{\"3106\":1,\"4360\":1}}],[\"redis实现\",{\"1\":{\"3263\":1,\"5532\":1}}],[\"redis就会自动触发bgsave命令创建快照\",{\"1\":{\"2727\":3,\"5089\":3}}],[\"redis\",{\"0\":{\"2666\":1,\"2667\":1,\"2668\":1,\"2760\":1,\"2816\":1,\"5028\":1,\"5029\":1,\"5030\":1,\"5122\":1,\"5178\":1},\"1\":{\"1236\":4,\"1404\":4,\"1572\":4,\"1740\":4,\"1953\":1,\"2669\":1,\"2670\":1,\"2671\":2,\"2672\":1,\"2683\":1,\"2691\":1,\"2692\":1,\"2693\":1,\"2699\":1,\"2700\":1,\"2706\":1,\"2707\":1,\"2708\":1,\"2714\":1,\"2715\":1,\"2716\":1,\"2720\":2,\"2723\":1,\"2725\":4,\"2726\":2,\"2729\":1,\"2730\":1,\"2731\":1,\"2733\":2,\"2735\":2,\"2744\":1,\"2753\":1,\"2756\":1,\"2757\":1,\"2759\":1,\"2761\":2,\"2762\":1,\"2780\":2,\"2807\":1,\"2808\":1,\"3190\":1,\"3278\":1,\"3279\":1,\"3281\":1,\"3282\":1,\"4059\":1,\"4647\":4,\"5031\":1,\"5032\":1,\"5033\":2,\"5034\":1,\"5045\":1,\"5053\":1,\"5054\":1,\"5055\":1,\"5061\":1,\"5062\":1,\"5068\":1,\"5069\":1,\"5070\":1,\"5076\":1,\"5077\":1,\"5078\":1,\"5082\":2,\"5085\":1,\"5087\":4,\"5088\":2,\"5091\":1,\"5092\":1,\"5093\":1,\"5095\":2,\"5097\":2,\"5106\":1,\"5115\":1,\"5118\":1,\"5119\":1,\"5121\":1,\"5123\":2,\"5124\":1,\"5142\":2,\"5169\":1,\"5170\":1,\"5459\":1,\"5547\":1,\"5548\":1,\"5550\":1,\"5551\":1}}],[\"redo\",{\"1\":{\"2337\":1,\"2572\":1,\"4699\":1,\"4934\":1}}],[\"register|login\",{\"1\":{\"3339\":1,\"3345\":1}}],[\"registry\",{\"1\":{\"1785\":1,\"4374\":1}}],[\"regularize\",{\"1\":{\"775\":1}}],[\"relevant\",{\"1\":{\"1056\":3,\"1065\":5,\"5232\":3,\"5241\":5}}],[\"reuse\",{\"1\":{\"999\":1,\"4016\":1}}],[\"restcontroller\",{\"1\":{\"3310\":1}}],[\"restful\",{\"1\":{\"944\":1,\"3961\":1}}],[\"resultset\",{\"1\":{\"973\":1,\"3990\":1}}],[\"responseresult\",{\"1\":{\"920\":4,\"3937\":4}}],[\"responsebody\",{\"1\":{\"920\":2,\"3937\":2}}],[\"resource\",{\"0\":{\"261\":1,\"3657\":1}}],[\"resources\",{\"1\":{\"208\":1,\"905\":1,\"3602\":1,\"3922\":1}}],[\"resove\",{\"1\":{\"214\":1,\"3608\":1}}],[\"resolveclass\",{\"1\":{\"214\":1,\"229\":1,\"3608\":1,\"3623\":1}}],[\"resolve\",{\"1\":{\"214\":1,\"218\":1,\"229\":2,\"3608\":1,\"3612\":1,\"3623\":2}}],[\"resolution\",{\"1\":{\"190\":1,\"2230\":1,\"3584\":1,\"5312\":1}}],[\"requires\",{\"1\":{\"864\":1,\"3881\":1}}],[\"required\",{\"1\":{\"860\":1,\"868\":1,\"3877\":1,\"3885\":1}}],[\"requestmapping\",{\"1\":{\"3310\":2}}],[\"request\",{\"1\":{\"820\":1,\"1850\":1,\"3837\":1,\"4439\":1}}],[\"repeatable\",{\"1\":{\"852\":1,\"855\":1,\"2330\":1,\"2595\":1,\"3869\":1,\"3872\":1,\"4692\":1,\"4957\":1}}],[\"rehash之后的链表可能为c\",{\"1\":{\"630\":1,\"3722\":1}}],[\"reflect\",{\"1\":{\"622\":1,\"3815\":1}}],[\"remove\",{\"1\":{\"545\":2,\"547\":1,\"549\":1}}],[\"reached\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"reactor\",{\"0\":{\"1195\":1,\"1216\":1,\"1237\":1,\"1255\":1,\"1363\":1,\"1384\":1,\"1405\":1,\"1423\":1,\"1531\":1,\"1552\":1,\"1573\":1,\"1591\":1,\"1699\":1,\"1720\":1,\"1741\":1,\"1759\":1,\"4606\":1,\"4627\":1,\"4648\":1,\"4666\":1},\"1\":{\"1196\":2,\"1197\":1,\"1199\":1,\"1200\":1,\"1203\":1,\"1204\":1,\"1205\":1,\"1206\":1,\"1207\":2,\"1209\":1,\"1210\":1,\"1211\":1,\"1215\":1,\"1217\":1,\"1218\":1,\"1219\":1,\"1221\":1,\"1222\":1,\"1226\":1,\"1227\":1,\"1231\":1,\"1235\":1,\"1236\":1,\"1238\":2,\"1239\":1,\"1242\":1,\"1245\":1,\"1251\":2,\"1252\":2,\"1253\":1,\"1254\":2,\"1256\":4,\"1257\":1,\"1264\":2,\"1267\":1,\"1364\":2,\"1365\":1,\"1367\":1,\"1368\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1374\":1,\"1375\":2,\"1377\":1,\"1378\":1,\"1379\":1,\"1383\":1,\"1385\":1,\"1386\":1,\"1387\":1,\"1389\":1,\"1390\":1,\"1394\":1,\"1395\":1,\"1399\":1,\"1403\":1,\"1404\":1,\"1406\":2,\"1407\":1,\"1410\":1,\"1413\":1,\"1419\":2,\"1420\":2,\"1421\":1,\"1422\":2,\"1424\":4,\"1425\":1,\"1432\":2,\"1435\":1,\"1532\":2,\"1533\":1,\"1535\":1,\"1536\":1,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":2,\"1545\":1,\"1546\":1,\"1547\":1,\"1551\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1557\":1,\"1558\":1,\"1562\":1,\"1563\":1,\"1567\":1,\"1571\":1,\"1572\":1,\"1574\":2,\"1575\":1,\"1578\":1,\"1581\":1,\"1587\":2,\"1588\":2,\"1589\":1,\"1590\":2,\"1592\":4,\"1593\":1,\"1600\":2,\"1603\":1,\"1700\":2,\"1701\":1,\"1703\":1,\"1704\":1,\"1707\":1,\"1708\":1,\"1709\":1,\"1710\":1,\"1711\":2,\"1713\":1,\"1714\":1,\"1715\":1,\"1719\":1,\"1721\":1,\"1722\":1,\"1723\":1,\"1725\":1,\"1726\":1,\"1730\":1,\"1731\":1,\"1735\":1,\"1739\":1,\"1740\":1,\"1742\":2,\"1743\":1,\"1746\":1,\"1749\":1,\"1755\":2,\"1756\":2,\"1757\":1,\"1758\":2,\"1760\":4,\"1761\":1,\"1768\":2,\"1771\":1,\"2671\":1,\"4607\":2,\"4608\":1,\"4610\":1,\"4611\":1,\"4614\":1,\"4615\":1,\"4616\":1,\"4617\":1,\"4618\":2,\"4620\":1,\"4621\":1,\"4622\":1,\"4626\":1,\"4628\":1,\"4629\":1,\"4630\":1,\"4632\":1,\"4633\":1,\"4637\":1,\"4638\":1,\"4642\":1,\"4646\":1,\"4647\":1,\"4649\":2,\"4650\":1,\"4653\":1,\"4656\":1,\"4662\":2,\"4663\":2,\"4664\":1,\"4665\":2,\"4667\":4,\"4668\":1,\"4675\":2,\"4678\":1,\"5033\":1}}],[\"reator\",{\"1\":{\"1248\":1,\"1416\":1,\"1584\":1,\"1752\":1,\"4659\":1}}],[\"realstack\",{\"1\":{\"393\":1}}],[\"readview主要是用来做可见性判断\",{\"1\":{\"2621\":1,\"4983\":1}}],[\"readonly\",{\"1\":{\"989\":1,\"4006\":1}}],[\"readline\",{\"1\":{\"265\":1}}],[\"read\",{\"1\":{\"263\":1,\"852\":2,\"853\":1,\"854\":1,\"855\":1,\"1115\":1,\"1149\":1,\"1150\":1,\"1154\":1,\"1165\":2,\"1173\":1,\"1179\":1,\"1198\":1,\"1225\":1,\"1230\":1,\"1246\":1,\"1263\":1,\"1283\":1,\"1317\":1,\"1318\":1,\"1322\":1,\"1333\":2,\"1341\":1,\"1347\":1,\"1366\":1,\"1393\":1,\"1398\":1,\"1414\":1,\"1431\":1,\"1451\":1,\"1485\":1,\"1486\":1,\"1490\":1,\"1501\":2,\"1509\":1,\"1515\":1,\"1534\":1,\"1561\":1,\"1566\":1,\"1582\":1,\"1599\":1,\"1619\":1,\"1653\":1,\"1654\":1,\"1658\":1,\"1669\":2,\"1677\":1,\"1683\":1,\"1702\":1,\"1729\":1,\"1734\":1,\"1750\":1,\"1767\":1,\"2330\":1,\"2450\":1,\"2462\":2,\"2463\":1,\"2476\":1,\"2509\":1,\"2593\":1,\"2594\":1,\"2595\":1,\"2613\":6,\"2615\":3,\"2622\":2,\"2626\":2,\"2627\":1,\"3659\":1,\"3869\":2,\"3870\":1,\"3871\":1,\"3872\":1,\"4526\":1,\"4560\":1,\"4561\":1,\"4565\":1,\"4576\":2,\"4584\":1,\"4590\":1,\"4609\":1,\"4636\":1,\"4641\":1,\"4657\":1,\"4674\":1,\"4692\":1,\"4812\":1,\"4824\":2,\"4825\":1,\"4838\":1,\"4871\":1,\"4955\":1,\"4956\":1,\"4957\":1,\"4975\":6,\"4977\":3,\"4984\":2,\"4988\":2,\"4989\":1}}],[\"ret++\",{\"1\":{\"271\":1}}],[\"ret\",{\"1\":{\"271\":5}}],[\"return\",{\"1\":{\"229\":1,\"260\":1,\"271\":2,\"276\":1,\"293\":1,\"299\":1,\"545\":1,\"547\":1,\"549\":1,\"581\":1,\"729\":3,\"742\":1,\"748\":1,\"760\":1,\"775\":2,\"781\":1,\"789\":1,\"919\":1,\"920\":4,\"1024\":4,\"1033\":1,\"1095\":1,\"3028\":1,\"3310\":1,\"3623\":1,\"3656\":1,\"3664\":1,\"3681\":1,\"3687\":1,\"3774\":1,\"3936\":1,\"3937\":4,\"4282\":1,\"5200\":4,\"5209\":1}}],[\"random\",{\"1\":{\"2765\":1,\"2767\":1,\"5127\":1,\"5129\":1}}],[\"rangeassignor是针对单个topic的分区进行排序分配的\",{\"1\":{\"1041\":1,\"5217\":1}}],[\"rangeassignor对每个topic进行独立的分区分配\",{\"1\":{\"1030\":1,\"5206\":1}}],[\"rangeassignor\",{\"1\":{\"1029\":1,\"5205\":1}}],[\"rangeassigor\",{\"1\":{\"1027\":1,\"5203\":1}}],[\"rangecheck\",{\"1\":{\"547\":1}}],[\"rangecheckforadd\",{\"1\":{\"539\":2}}],[\"raft\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"rather\",{\"1\":{\"217\":1,\"3611\":1}}],[\"ray\",{\"0\":{\"172\":1,\"3566\":1},\"1\":{\"147\":1,\"170\":1,\"3546\":1,\"3564\":1}}],[\"rtree\",{\"1\":{\"2365\":1,\"4727\":1}}],[\"rtt\",{\"1\":{\"2276\":2,\"5358\":2}}],[\"rt\",{\"1\":{\"208\":1,\"3602\":1}}],[\"r−i​\",{\"1\":{\"94\":1,\"3493\":1}}],[\"r−i+1\",{\"1\":{\"94\":1,\"3493\":1}}],[\"r+i=1∑r​ωi\",{\"1\":{\"94\":1,\"3493\":1}}],[\"rgba\",{\"1\":{\"83\":1,\"3482\":1}}],[\"rbnaakhnddhoaohlkdmtt3blbkfjeefvpcmjhg4usggd8bhk\",{\"1\":{\"1\":1}}],[\"l\",{\"1\":{\"2999\":1,\"4253\":1}}],[\"lfu\",{\"1\":{\"2770\":1,\"2771\":1,\"5132\":1,\"5133\":1}}],[\"lru\",{\"1\":{\"2763\":1,\"2766\":1,\"5125\":1,\"5128\":1}}],[\"lpush\",{\"1\":{\"2695\":1,\"5057\":1}}],[\"lt\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"4558\":1}}],[\"leadnews\",{\"1\":{\"3286\":1,\"5555\":1}}],[\"leader\",{\"1\":{\"1866\":5,\"1867\":3,\"1871\":1,\"1872\":1,\"1873\":1,\"1877\":2,\"1878\":2,\"1879\":1,\"1880\":3,\"1881\":1,\"1883\":5,\"1884\":3,\"1885\":1,\"1886\":4,\"1888\":1,\"1890\":1,\"1892\":1,\"1894\":1,\"1895\":2,\"1897\":2,\"1900\":1,\"1902\":4,\"4455\":5,\"4456\":3,\"4460\":1,\"4461\":1,\"4462\":1,\"4466\":2,\"4467\":2,\"4468\":1,\"4469\":3,\"4470\":1,\"4472\":5,\"4473\":3,\"4474\":1,\"4475\":4,\"4477\":1,\"4479\":1,\"4481\":1,\"4483\":1,\"4484\":2,\"4486\":2,\"4489\":1,\"4491\":4}}],[\"least\",{\"1\":{\"2763\":1,\"2766\":1,\"2770\":1,\"2771\":1,\"5125\":1,\"5128\":1,\"5132\":1,\"5133\":1}}],[\"len\",{\"1\":{\"1166\":2,\"1334\":2,\"1502\":2,\"1670\":2,\"2681\":1,\"2682\":1,\"4577\":2,\"5043\":1,\"5044\":1}}],[\"length\",{\"1\":{\"510\":3,\"535\":1,\"724\":1,\"729\":2,\"730\":1,\"742\":1,\"757\":1,\"761\":1,\"782\":1,\"785\":1,\"1033\":2,\"1095\":1,\"5209\":2}}],[\"level\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"2326\":2,\"4558\":1,\"4688\":2}}],[\"let\",{\"1\":{\"547\":1,\"549\":1}}],[\"lk\",{\"1\":{\"411\":1}}],[\"landin\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"language\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"lang=zh\",{\"1\":{\"915\":1,\"3932\":1}}],[\"lang\",{\"1\":{\"228\":1,\"276\":2,\"622\":1,\"3005\":1,\"3622\":1,\"3664\":2,\"3815\":1,\"4259\":1}}],[\"lambda\",{\"1\":{\"893\":1,\"3910\":1}}],[\"label\",{\"1\":{\"265\":1}}],[\"low\",{\"1\":{\"2622\":2,\"2624\":1,\"2625\":1,\"4984\":2,\"4986\":1,\"4987\":1}}],[\"looking\",{\"1\":{\"1885\":1,\"1886\":1,\"1887\":1,\"1889\":1,\"1895\":1,\"4474\":1,\"4475\":1,\"4476\":1,\"4478\":1,\"4484\":1}}],[\"lock\",{\"0\":{\"1925\":1,\"2543\":1,\"2547\":1,\"2551\":1,\"4031\":1,\"4905\":1,\"4909\":1,\"4913\":1},\"1\":{\"1114\":1,\"1115\":1,\"1282\":1,\"1283\":1,\"1450\":1,\"1451\":1,\"1618\":1,\"1619\":1,\"2330\":1,\"2450\":1,\"2476\":2,\"2508\":1,\"2509\":2,\"2523\":1,\"2524\":1,\"2525\":1,\"2526\":1,\"2529\":1,\"2531\":1,\"2535\":1,\"2540\":1,\"2541\":1,\"2542\":3,\"2544\":1,\"2548\":1,\"2552\":3,\"2553\":1,\"2554\":3,\"2555\":2,\"2558\":1,\"2609\":3,\"2828\":1,\"2829\":1,\"4082\":1,\"4083\":1,\"4525\":1,\"4526\":1,\"4692\":1,\"4812\":1,\"4838\":2,\"4870\":1,\"4871\":2,\"4885\":1,\"4886\":1,\"4887\":1,\"4888\":1,\"4891\":1,\"4893\":1,\"4897\":1,\"4902\":1,\"4903\":1,\"4904\":3,\"4906\":1,\"4910\":1,\"4914\":3,\"4915\":1,\"4916\":3,\"4917\":2,\"4920\":1,\"4971\":3}}],[\"locking\",{\"1\":{\"580\":1,\"2326\":2,\"3773\":1,\"4688\":2}}],[\"localstorage\",{\"1\":{\"3229\":1,\"5498\":1}}],[\"localhost\",{\"1\":{\"939\":1,\"3339\":1,\"3345\":1,\"3956\":1}}],[\"locations\",{\"1\":{\"775\":1}}],[\"long\",{\"1\":{\"229\":2,\"406\":4,\"3043\":1,\"3623\":2,\"4297\":1}}],[\"load\",{\"1\":{\"672\":1,\"678\":1,\"2744\":1,\"5106\":1}}],[\"loadfactor两个参数的方法\",{\"1\":{\"709\":1}}],[\"loadfactor是装载因子\",{\"1\":{\"701\":1,\"711\":1}}],[\"loadfactor和threshold又是干啥的\",{\"1\":{\"683\":1}}],[\"loadfactor的默认值为0\",{\"1\":{\"678\":1}}],[\"loadfactor\",{\"1\":{\"672\":1,\"677\":1,\"700\":1,\"704\":10,\"706\":2,\"711\":1}}],[\"loader\",{\"1\":{\"612\":2,\"3805\":2}}],[\"loadclass\",{\"1\":{\"214\":1,\"219\":1,\"228\":1,\"229\":2,\"233\":1,\"3608\":1,\"3613\":1,\"3622\":1,\"3623\":2,\"3627\":1}}],[\"loading\",{\"1\":{\"190\":1,\"3584\":1}}],[\"log功能\",{\"1\":{\"3315\":1}}],[\"logger\",{\"1\":{\"3310\":1}}],[\"logs\",{\"1\":{\"2622\":1,\"3316\":1,\"4984\":1}}],[\"log2\",{\"1\":{\"447\":1,\"494\":1}}],[\"logn\",{\"1\":{\"417\":1,\"419\":2,\"431\":1,\"434\":1,\"778\":1,\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"3742\":1,\"3744\":2,\"3756\":1,\"3759\":1,\"4551\":1}}],[\"log\",{\"0\":{\"2629\":1,\"4991\":1},\"1\":{\"263\":2,\"632\":1,\"920\":2,\"2337\":1,\"2572\":1,\"2573\":1,\"2615\":2,\"2619\":1,\"2630\":1,\"2632\":1,\"2633\":3,\"2634\":3,\"3314\":1,\"3316\":1,\"3320\":1,\"3659\":2,\"3724\":1,\"3937\":2,\"4699\":1,\"4934\":1,\"4935\":1,\"4977\":2,\"4981\":1,\"4992\":1,\"4994\":1,\"4995\":3,\"4996\":3}}],[\"logy\",{\"1\":{\"94\":2,\"3493\":2}}],[\"logout\",{\"1\":{\"3303\":1,\"5572\":1}}],[\"logo\",{\"1\":{\"83\":2,\"3482\":2}}],[\"like\",{\"1\":{\"2415\":1,\"2442\":2,\"4777\":1,\"4804\":2}}],[\"limit\",{\"1\":{\"977\":1,\"2622\":3,\"2624\":1,\"2625\":3,\"2664\":1,\"3994\":1,\"4984\":3,\"4986\":1,\"4987\":3,\"5026\":1}}],[\"list和zset\",{\"1\":{\"3268\":1,\"5537\":1}}],[\"listpack\",{\"1\":{\"2708\":1,\"2716\":1,\"5070\":1,\"5078\":1}}],[\"listen\",{\"0\":{\"2210\":1},\"1\":{\"2091\":1,\"2095\":1}}],[\"listener\",{\"1\":{\"935\":1,\"3952\":1}}],[\"list<topicpartition>\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"list<topicpartition>>\",{\"1\":{\"1033\":2,\"5209\":2}}],[\"list<partitioninfo>\",{\"1\":{\"1024\":2,\"5200\":2}}],[\"list<string>>\",{\"1\":{\"1033\":2,\"5209\":2}}],[\"list<string>\",{\"1\":{\"531\":1,\"1033\":1,\"5209\":1}}],[\"listiterator\",{\"1\":{\"565\":1}}],[\"list1\",{\"1\":{\"531\":1}}],[\"list2\",{\"1\":{\"531\":1}}],[\"list主要有arraylist\",{\"1\":{\"498\":1}}],[\"list常见面试题\",{\"0\":{\"496\":1}}],[\"list特点\",{\"1\":{\"452\":1}}],[\"list\",{\"0\":{\"463\":1,\"2688\":1,\"3717\":1,\"5050\":1},\"1\":{\"451\":1,\"528\":2,\"531\":3,\"537\":1,\"545\":1,\"2674\":1,\"2690\":1,\"2691\":3,\"2692\":1,\"2693\":1,\"2695\":1,\"5036\":1,\"5052\":1,\"5053\":3,\"5054\":1,\"5055\":1,\"5057\":1}}],[\"linux如何给文件权限\",{\"1\":{\"3173\":1,\"5453\":1}}],[\"linux\",{\"0\":{\"2180\":1,\"5579\":1,\"5591\":1},\"1\":{\"1086\":1,\"1176\":1,\"1183\":1,\"1194\":1,\"1344\":1,\"1351\":1,\"1362\":1,\"1512\":1,\"1519\":1,\"1530\":1,\"1680\":1,\"1687\":1,\"1698\":1,\"1776\":1,\"2065\":1,\"2745\":1,\"2746\":1,\"2747\":1,\"4027\":1,\"4365\":1,\"4587\":1,\"4594\":1,\"4605\":1,\"5107\":1,\"5108\":1,\"5109\":1}}],[\"linux常用命令\",{\"0\":{\"1080\":1,\"4021\":1}}],[\"line\",{\"1\":{\"265\":3,\"2277\":1,\"5359\":1}}],[\"linkedblockingqueue\",{\"1\":{\"3065\":1,\"3090\":1,\"4319\":1,\"4344\":1}}],[\"linkedhashset是hashset的子类\",{\"1\":{\"449\":1}}],[\"linkedhashset\",{\"0\":{\"448\":1}}],[\"linkedhashmap可以保持插入顺序或访问顺序\",{\"1\":{\"802\":1}}],[\"linkedhashmap也不例外\",{\"1\":{\"449\":1}}],[\"linkedhashmap\",{\"0\":{\"801\":1},\"1\":{\"293\":1,\"300\":1,\"3681\":1,\"3688\":1}}],[\"linkedhashmap<>\",{\"1\":{\"291\":1,\"293\":1,\"3679\":1,\"3681\":1}}],[\"linkedlist与vector几种实现\",{\"1\":{\"498\":1}}],[\"linkedlist内部是一个双向链表\",{\"1\":{\"475\":1}}],[\"linkedlist是一个list\",{\"1\":{\"475\":1}}],[\"linkedlist\",{\"0\":{\"474\":1},\"1\":{\"377\":1,\"378\":1,\"379\":1,\"382\":2,\"409\":1,\"501\":1,\"505\":1}}],[\"linkedlist<>\",{\"1\":{\"376\":1,\"406\":1}}],[\"linking\",{\"1\":{\"190\":1,\"3584\":1}}],[\"link\",{\"1\":{\"83\":1,\"3482\":1}}],[\"libcontainer\",{\"1\":{\"1788\":2,\"4377\":2}}],[\"library\",{\"1\":{\"619\":1,\"3812\":1}}],[\"lib\",{\"1\":{\"209\":1,\"3603\":1}}],[\"lib目录下的\",{\"1\":{\"208\":1,\"3602\":1}}],[\"light\",{\"1\":{\"83\":1,\"3482\":1}}],[\"tls\",{\"1\":{\"2275\":1,\"2282\":2,\"5357\":1,\"5364\":2}}],[\"ttl\",{\"1\":{\"2232\":1,\"2764\":1,\"5126\":1,\"5314\":1}}],[\"ttl>\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"tt>\",{\"1\":{\"510\":3}}],[\"tcp的最大连接数=客户端的ip数⋅客户端的端口数\",{\"1\":{\"2131\":1}}],[\"tcp四次挥手\",{\"0\":{\"2189\":1},\"1\":{\"2074\":1}}],[\"tcp三次握手\",{\"0\":{\"2178\":1},\"1\":{\"2063\":1}}],[\"tcp基础\",{\"0\":{\"2096\":1},\"1\":{\"2055\":1}}],[\"tcp和udp常见面试题\",{\"0\":{\"2052\":1}}],[\"tcp\",{\"0\":{\"2106\":2,\"2109\":1,\"2115\":1,\"2121\":1,\"2134\":1,\"2180\":1,\"2182\":1,\"2184\":1,\"2205\":1,\"2209\":1,\"2210\":1,\"2224\":1,\"2226\":1,\"2316\":1,\"5306\":1,\"5308\":1},\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"1879\":1,\"2056\":1,\"2057\":2,\"2058\":1,\"2059\":1,\"2060\":1,\"2061\":1,\"2062\":1,\"2064\":1,\"2065\":1,\"2067\":1,\"2069\":1,\"2075\":1,\"2090\":1,\"2094\":1,\"2095\":1,\"2102\":1,\"2103\":1,\"2105\":1,\"2107\":1,\"2108\":1,\"2110\":1,\"2113\":1,\"2114\":6,\"2122\":1,\"2128\":1,\"2132\":1,\"2133\":1,\"2138\":1,\"2141\":1,\"2144\":1,\"2147\":1,\"2150\":1,\"2153\":1,\"2156\":2,\"2159\":1,\"2167\":1,\"2168\":1,\"2169\":1,\"2174\":1,\"2175\":3,\"2176\":2,\"2177\":1,\"2217\":1,\"2275\":1,\"2276\":2,\"2277\":1,\"2282\":2,\"2297\":1,\"2310\":1,\"4468\":1,\"4542\":1,\"5275\":4,\"5299\":1,\"5357\":1,\"5358\":2,\"5359\":1,\"5364\":2,\"5379\":1}}],[\"t3\",{\"1\":{\"1052\":1,\"5228\":1}}],[\"t2\",{\"1\":{\"1043\":2,\"1052\":1,\"5219\":2,\"5228\":1}}],[\"t\",{\"1\":{\"977\":2,\"1177\":3,\"1345\":3,\"1513\":3,\"1681\":3,\"2475\":1,\"2476\":2,\"2622\":5,\"3028\":6,\"3029\":1,\"3994\":2,\"4282\":6,\"4283\":1,\"4588\":3,\"4837\":1,\"4838\":2,\"4984\":5}}],[\"timeunit\",{\"1\":{\"3041\":2,\"3043\":1,\"4295\":2,\"4297\":1}}],[\"time\",{\"0\":{\"2196\":1,\"2197\":1,\"2199\":1,\"2200\":1},\"1\":{\"401\":1,\"2081\":1,\"2082\":1,\"2083\":1,\"2084\":1,\"2085\":1,\"3043\":2,\"4297\":2}}],[\"title\",{\"1\":{\"83\":1,\"3482\":1}}],[\"type\",{\"1\":{\"276\":1,\"282\":1,\"3664\":1,\"3670\":1}}],[\"tag\",{\"1\":{\"2267\":1,\"5349\":1}}],[\"tasks\",{\"1\":{\"3043\":3,\"4297\":3}}],[\"task\",{\"1\":{\"1056\":1,\"1065\":2,\"5232\":1,\"5241\":2}}],[\"tab\",{\"1\":{\"761\":1,\"785\":1}}],[\"tables\",{\"1\":{\"2450\":1,\"2455\":1,\"2476\":2,\"2480\":1,\"2509\":2,\"4812\":1,\"4817\":1,\"4838\":2,\"4842\":1,\"4871\":2}}],[\"table\",{\"1\":{\"273\":1,\"276\":1,\"277\":1,\"782\":1,\"2326\":1,\"2453\":2,\"3661\":1,\"3664\":1,\"3665\":1,\"4688\":1,\"4815\":2}}],[\"target\",{\"1\":{\"276\":1,\"281\":1,\"3664\":1,\"3669\":1}}],[\"terminating\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"tencent\",{\"1\":{\"1954\":1,\"4060\":1}}],[\"test\",{\"1\":{\"945\":1,\"3962\":1}}],[\"testnpe\",{\"1\":{\"274\":1,\"276\":1,\"3662\":1,\"3664\":1}}],[\"template\",{\"1\":{\"833\":1,\"3247\":1,\"3850\":1,\"5516\":1}}],[\"text\",{\"1\":{\"2366\":1,\"2376\":1,\"2389\":1,\"4728\":1,\"4738\":1,\"4751\":1}}],[\"tex\",{\"0\":{\"93\":1,\"3492\":1}}],[\"txt\",{\"1\":{\"263\":1,\"3659\":1}}],[\"tmp\",{\"1\":{\"263\":1,\"3659\":1}}],[\"t1p3\",{\"1\":{\"1039\":1,\"5215\":1}}],[\"t1p2\",{\"1\":{\"1038\":1,\"5214\":1}}],[\"t1p1\",{\"1\":{\"1037\":1,\"5213\":1}}],[\"t1p0\",{\"1\":{\"1037\":1,\"5213\":1}}],[\"t1\",{\"1\":{\"229\":3,\"1043\":2,\"1052\":1,\"3623\":3,\"5219\":2,\"5228\":1}}],[\"trx\",{\"1\":{\"2615\":1,\"2618\":1,\"2622\":5,\"2627\":1,\"4977\":1,\"4980\":1,\"4984\":5,\"4989\":1}}],[\"triggered\",{\"1\":{\"1147\":2,\"1315\":2,\"1483\":2,\"1651\":2,\"4558\":2}}],[\"trans\",{\"1\":{\"2628\":1,\"4990\":1}}],[\"transferto\",{\"1\":{\"1193\":1,\"1194\":1,\"1361\":1,\"1362\":1,\"1529\":1,\"1530\":1,\"1697\":1,\"1698\":1,\"4604\":1,\"4605\":1}}],[\"transaction\",{\"1\":{\"2464\":1,\"2536\":1,\"4826\":1,\"4898\":1}}],[\"transactionstatus\",{\"1\":{\"848\":1,\"3865\":1}}],[\"transactiondefinition\",{\"1\":{\"847\":1,\"851\":1,\"852\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"858\":1,\"860\":1,\"861\":1,\"862\":1,\"864\":1,\"865\":1,\"866\":1,\"868\":2,\"3864\":1,\"3868\":1,\"3869\":1,\"3870\":1,\"3871\":1,\"3872\":1,\"3873\":1,\"3875\":1,\"3877\":1,\"3878\":1,\"3879\":1,\"3881\":1,\"3882\":1,\"3883\":1,\"3885\":2}}],[\"transient\",{\"1\":{\"265\":1,\"675\":1}}],[\"tree\",{\"1\":{\"2353\":1,\"4715\":1}}],[\"treemap要求键实现comparable接口或通过构造方法提供一个com\",{\"1\":{\"798\":1}}],[\"treemap同样实现了sortedmap和navigablemap接口\",{\"1\":{\"797\":1}}],[\"treemap同样实现了map接口\",{\"1\":{\"796\":1}}],[\"treemap与hashmap相比\",{\"1\":{\"796\":1}}],[\"treemap\",{\"0\":{\"795\":1}}],[\"treemap是按key排序的\",{\"1\":{\"462\":1}}],[\"treemap有treeset\",{\"1\":{\"449\":1}}],[\"treeset是用compareto\",{\"1\":{\"462\":1}}],[\"treeset作为一种set\",{\"1\":{\"462\":1}}],[\"treeset的底层是treemap的keyset\",{\"1\":{\"461\":1}}],[\"treeset中的数据是自动排好序的\",{\"1\":{\"458\":1}}],[\"treeset要求元素实现comparable接口或通过构造方法提供一个com\",{\"1\":{\"447\":1}}],[\"treeset同样实现了sortedset和navigatableset接口\",{\"1\":{\"447\":1}}],[\"treeset实现了set接口\",{\"1\":{\"446\":1}}],[\"treeset\",{\"0\":{\"445\":1},\"1\":{\"458\":1}}],[\"tryreleaseshared\",{\"1\":{\"2932\":1,\"4186\":1}}],[\"tryrelease\",{\"1\":{\"2930\":1,\"4184\":1}}],[\"tryacquireshared\",{\"1\":{\"2931\":1,\"4185\":1}}],[\"tryacquire\",{\"1\":{\"2922\":1,\"2929\":1,\"4176\":1,\"4183\":1}}],[\"try\",{\"0\":{\"261\":1,\"3657\":1},\"1\":{\"229\":1,\"262\":2,\"263\":1,\"265\":3,\"268\":1,\"271\":2,\"274\":1,\"3623\":1,\"3658\":2,\"3659\":1,\"3662\":1}}],[\"true\",{\"1\":{\"151\":1,\"155\":1,\"214\":1,\"316\":1,\"686\":2,\"691\":3,\"704\":8,\"2420\":1,\"2832\":1,\"2929\":1,\"2930\":1,\"2932\":1,\"2994\":1,\"3550\":1,\"3608\":1,\"3704\":1,\"4086\":1,\"4183\":1,\"4184\":1,\"4186\":1,\"4248\":1,\"4782\":1}}],[\"t0p3\",{\"1\":{\"1039\":1,\"5215\":1}}],[\"t0p2\",{\"1\":{\"1038\":1,\"5214\":1}}],[\"t0p1\",{\"1\":{\"1037\":1,\"5213\":1}}],[\"t0p0\",{\"1\":{\"1037\":1,\"5213\":1}}],[\"t0\",{\"1\":{\"229\":2,\"1043\":1,\"1052\":1,\"1056\":1,\"1065\":2,\"3623\":2,\"5219\":1,\"5228\":1,\"5232\":1,\"5241\":2}}],[\"that\",{\"1\":{\"510\":1,\"513\":1,\"3043\":1,\"4297\":1}}],[\"than\",{\"1\":{\"217\":1,\"3043\":1,\"3611\":1,\"4297\":1}}],[\"threallocal\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"threadfactory\",{\"1\":{\"3043\":7,\"3051\":1,\"4297\":7,\"4305\":1}}],[\"threads\",{\"1\":{\"3043\":4,\"4297\":4}}],[\"thread2\",{\"1\":{\"3041\":8,\"4295\":8}}],[\"threadpooltaskexecutor\",{\"1\":{\"3056\":1,\"3061\":1,\"4310\":1,\"4315\":1}}],[\"threadpool\",{\"1\":{\"3041\":1,\"4295\":1}}],[\"threadpoolexecutor其他常见参数\",{\"1\":{\"3048\":1,\"4302\":1}}],[\"threadpoolexecutor\",{\"1\":{\"3041\":17,\"3043\":2,\"3044\":1,\"3057\":1,\"3058\":1,\"3059\":1,\"3060\":1,\"3061\":2,\"3079\":1,\"3088\":1,\"4295\":17,\"4297\":2,\"4298\":1,\"4311\":1,\"4312\":1,\"4313\":1,\"4314\":1,\"4315\":2,\"4333\":1,\"4342\":1}}],[\"thread内部都是使用仅有的那个threadlocalmap\",{\"1\":{\"3032\":1,\"4286\":1}}],[\"threadlocal对象\",{\"1\":{\"3032\":1,\"4286\":1}}],[\"threadlocal<\",{\"1\":{\"3031\":1,\"4285\":1}}],[\"threadlocal类的set\",{\"1\":{\"3027\":1,\"4281\":1}}],[\"threadlocal类主要解决的就是让每个线程绑定自己的值\",{\"1\":{\"3021\":1,\"4275\":1}}],[\"threadlocals\",{\"1\":{\"3025\":1,\"3026\":1,\"3028\":2,\"4279\":1,\"4280\":1,\"4282\":2}}],[\"threadlocalmap的\",{\"1\":{\"3032\":1,\"4286\":1}}],[\"threadlocalmap\",{\"1\":{\"3025\":2,\"3026\":2,\"3028\":2,\"3029\":1,\"3031\":1,\"4279\":2,\"4280\":2,\"4282\":2,\"4283\":1,\"4285\":1}}],[\"threadlocal\",{\"0\":{\"3019\":1,\"4273\":1},\"1\":{\"3025\":2,\"3026\":1,\"3029\":2,\"3032\":2,\"4279\":2,\"4280\":1,\"4283\":2,\"4286\":2}}],[\"threadlocal原理\",{\"0\":{\"3018\":1,\"4272\":1}}],[\"threadlocalrandom\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"threadid\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"thread\",{\"1\":{\"503\":1,\"2916\":1,\"3025\":1,\"3028\":4,\"3029\":1,\"3043\":2,\"4170\":1,\"4279\":1,\"4282\":4,\"4283\":1,\"4297\":2}}],[\"threshold＝容量\",{\"1\":{\"680\":1}}],[\"threshold\",{\"0\":{\"696\":1},\"1\":{\"672\":1,\"679\":1,\"699\":1,\"700\":1,\"704\":10,\"706\":2}}],[\"throw和throws的区别\",{\"0\":{\"3650\":1}}],[\"throwable3\",{\"1\":{\"265\":2}}],[\"throwable1\",{\"1\":{\"265\":2}}],[\"throwable2\",{\"1\":{\"265\":3}}],[\"throwable\",{\"1\":{\"265\":11,\"614\":1,\"622\":1,\"3807\":1,\"3815\":1}}],[\"throwable是\",{\"1\":{\"240\":1,\"3636\":1}}],[\"throw\",{\"1\":{\"258\":1,\"260\":1,\"265\":2,\"510\":1,\"535\":1,\"539\":1,\"549\":1,\"3043\":2,\"3654\":1,\"3656\":1,\"4297\":2}}],[\"throws\",{\"1\":{\"229\":1,\"255\":1,\"257\":1,\"510\":1,\"513\":1,\"612\":1,\"614\":1,\"622\":1,\"3043\":2,\"3623\":1,\"3651\":1,\"3653\":1,\"3805\":1,\"3807\":1,\"3815\":1,\"4297\":2}}],[\"they\",{\"1\":{\"3043\":2,\"4297\":2}}],[\"theorem\",{\"1\":{\"1908\":1,\"4497\":1}}],[\"the\",{\"1\":{\"263\":1,\"510\":7,\"513\":4,\"1024\":1,\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"3043\":18,\"3659\":1,\"4297\":18,\"4593\":1,\"5200\":1}}],[\"there\",{\"1\":{\"83\":2,\"3482\":2}}],[\"this\",{\"1\":{\"217\":1,\"513\":2,\"919\":1,\"2998\":1,\"3028\":1,\"3043\":9,\"3611\":1,\"3936\":1,\"4252\":1,\"4282\":1,\"4297\":9}}],[\"tomcat\",{\"1\":{\"3316\":2}}],[\"tomcat自带的access\",{\"1\":{\"3315\":1}}],[\"tonanos\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"token信息返回给用户\",{\"1\":{\"3236\":1,\"5505\":1}}],[\"token失效谁判断的\",{\"1\":{\"3186\":1}}],[\"token\",{\"1\":{\"2685\":1,\"3225\":1,\"3230\":1,\"5047\":1,\"5494\":1,\"5499\":1}}],[\"token=1729829670\",{\"1\":{\"915\":1,\"3932\":1}}],[\"tolerance\",{\"1\":{\"1906\":1,\"1911\":1,\"1916\":1,\"4495\":1,\"4500\":1,\"4505\":1}}],[\"tobetopjavaer\",{\"1\":{\"794\":1}}],[\"topositive\",{\"1\":{\"1024\":3,\"5200\":3}}],[\"topicentry\",{\"1\":{\"1033\":3,\"5209\":3}}],[\"topiccountermap\",{\"1\":{\"1024\":2,\"5200\":2}}],[\"topic\",{\"1\":{\"1024\":7,\"1033\":3,\"1860\":1,\"4449\":1,\"5200\":7,\"5209\":3}}],[\"topic可以配置自己的保留策略\",{\"1\":{\"1011\":1,\"5187\":1}}],[\"top\",{\"1\":{\"488\":1}}],[\"to\",{\"1\":{\"217\":1,\"263\":1,\"276\":1,\"280\":1,\"510\":1,\"513\":2,\"547\":1,\"775\":1,\"1024\":1,\"3043\":5,\"3611\":1,\"3659\":1,\"3664\":1,\"3668\":1,\"4297\":5,\"5200\":1}}],[\"toc\",{\"1\":{\"133\":1,\"3532\":1}}],[\"hello123\",{\"1\":{\"3356\":1}}],[\"head\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"header不支持压缩\",{\"1\":{\"2272\":1,\"5354\":1}}],[\"header\",{\"1\":{\"2267\":1,\"2268\":1,\"2272\":1,\"2618\":1,\"3226\":1,\"3230\":1,\"4980\":1,\"5349\":1,\"5350\":1,\"5354\":1,\"5495\":1,\"5499\":1}}],[\"header压缩\",{\"1\":{\"1979\":1,\"1994\":1,\"2035\":1,\"2050\":1,\"5270\":1}}],[\"health\",{\"1\":{\"940\":1,\"3957\":1}}],[\"hw\",{\"1\":{\"3339\":1,\"3345\":1}}],[\"hr面\",{\"0\":{\"3110\":1,\"5390\":1}}],[\"hyperloglogs\",{\"1\":{\"2675\":1,\"5037\":1}}],[\"hystrix有四种防雪崩方式\",{\"1\":{\"1840\":1,\"4429\":1}}],[\"hystrix就是这样的一个工具\",{\"1\":{\"1839\":1,\"4428\":1}}],[\"hystrix\",{\"1\":{\"1827\":1,\"1838\":1,\"4416\":1,\"4427\":1}}],[\"h>\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4588\":1}}],[\"h2\",{\"1\":{\"929\":1,\"3946\":1}}],[\"h2o\",{\"1\":{\"60\":1,\"3459\":1}}],[\"hibernatetemplate\",{\"1\":{\"833\":1,\"3850\":1}}],[\"hidden\",{\"1\":{\"510\":1}}],[\"h为log2\",{\"1\":{\"799\":1}}],[\"h为树的高度\",{\"1\":{\"799\":1}}],[\"h\",{\"1\":{\"612\":2,\"724\":1,\"729\":11,\"730\":1,\"742\":1,\"748\":7,\"775\":16,\"781\":3,\"782\":2,\"789\":3,\"799\":1,\"3805\":2}}],[\"html网页\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"html\",{\"1\":{\"488\":1,\"909\":1,\"1158\":1,\"1267\":1,\"1326\":1,\"1435\":1,\"1494\":1,\"1603\":1,\"1662\":1,\"1771\":1,\"2833\":1,\"3017\":1,\"3106\":1,\"3926\":1,\"4087\":1,\"4271\":1,\"4360\":1,\"4569\":1,\"4678\":1}}],[\"http1\",{\"1\":{\"5278\":1}}],[\"http历史\",{\"0\":{\"5274\":1}}],[\"http3协议\",{\"1\":{\"5273\":1}}],[\"http3常见面试题\",{\"0\":{\"2009\":1}}],[\"http2常见面试题\",{\"0\":{\"1996\":1}}],[\"http2协议\",{\"1\":{\"1980\":1,\"1995\":1,\"2036\":1,\"2051\":1,\"5271\":1}}],[\"http协议中为什么广泛使用的还是http1\",{\"0\":{\"1981\":1,\"5256\":1}}],[\"http常见面试题\",{\"0\":{\"1966\":1}}],[\"httptrace\",{\"1\":{\"940\":1,\"3957\":1}}],[\"httpmessageconveter\",{\"1\":{\"821\":1,\"3838\":1}}],[\"http\",{\"0\":{\"1970\":1,\"1976\":1,\"1985\":1,\"1991\":1,\"2000\":1,\"2006\":1,\"2013\":1,\"2019\":1,\"2026\":1,\"2032\":1,\"2041\":1,\"2047\":1,\"2260\":1,\"2261\":1,\"2264\":2,\"2269\":2,\"2274\":2,\"2279\":1,\"5261\":1,\"5267\":1,\"5281\":1,\"5284\":1,\"5290\":1,\"5342\":1,\"5343\":1,\"5346\":2,\"5351\":2,\"5356\":2,\"5361\":1},\"1\":{\"397\":1,\"767\":1,\"1968\":1,\"1974\":1,\"1978\":2,\"1983\":1,\"1989\":1,\"1993\":2,\"1998\":1,\"2004\":1,\"2008\":2,\"2011\":1,\"2017\":1,\"2021\":2,\"2024\":1,\"2030\":1,\"2034\":2,\"2039\":1,\"2045\":1,\"2049\":2,\"2161\":1,\"2218\":1,\"2219\":1,\"2262\":2,\"2263\":1,\"2265\":2,\"2266\":1,\"2267\":2,\"2268\":2,\"2270\":4,\"2271\":2,\"2272\":2,\"2273\":2,\"2275\":5,\"2276\":2,\"2277\":3,\"2280\":1,\"2281\":2,\"2282\":4,\"2311\":1,\"2312\":1,\"3230\":1,\"3318\":1,\"5258\":1,\"5265\":1,\"5269\":2,\"5275\":7,\"5279\":1,\"5280\":3,\"5283\":1,\"5288\":1,\"5292\":2,\"5300\":1,\"5301\":1,\"5344\":2,\"5345\":1,\"5347\":2,\"5348\":1,\"5349\":2,\"5350\":2,\"5352\":4,\"5353\":2,\"5354\":2,\"5355\":2,\"5357\":5,\"5358\":2,\"5359\":3,\"5362\":1,\"5363\":2,\"5364\":4,\"5499\":1}}],[\"https常见面试题\",{\"0\":{\"2022\":1}}],[\"https\",{\"0\":{\"2278\":1,\"2279\":1,\"5360\":1,\"5361\":1},\"1\":{\"83\":2,\"328\":1,\"412\":1,\"488\":1,\"629\":1,\"658\":1,\"794\":1,\"909\":1,\"915\":1,\"970\":1,\"1003\":1,\"1056\":1,\"1065\":1,\"1079\":1,\"1158\":1,\"1267\":1,\"1326\":1,\"1435\":1,\"1494\":1,\"1603\":1,\"1662\":1,\"1771\":1,\"1954\":1,\"2161\":1,\"2280\":1,\"2281\":2,\"2282\":3,\"2283\":3,\"2638\":1,\"2817\":1,\"2833\":2,\"2856\":1,\"2904\":1,\"2961\":1,\"2995\":1,\"3017\":1,\"3106\":2,\"3401\":3,\"3482\":2,\"3633\":1,\"3716\":1,\"3721\":1,\"3926\":1,\"3932\":1,\"3987\":1,\"4020\":1,\"4060\":1,\"4087\":2,\"4110\":1,\"4158\":1,\"4215\":1,\"4249\":1,\"4271\":1,\"4360\":2,\"4569\":1,\"4678\":1,\"5000\":1,\"5179\":1,\"5232\":1,\"5241\":1,\"5255\":1,\"5362\":1,\"5363\":2,\"5364\":3,\"5365\":3}}],[\"happens\",{\"1\":{\"2944\":1,\"4198\":1}}],[\"hagersten\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"hash2值\",{\"1\":{\"3381\":1,\"3382\":1}}],[\"hash值\",{\"1\":{\"3379\":1}}],[\"hash1值\",{\"1\":{\"3375\":1,\"3376\":1,\"3382\":1}}],[\"hashcode+sqlid+sql\",{\"1\":{\"982\":1,\"3999\":1}}],[\"hashcode的结果是int类型\",{\"1\":{\"757\":1}}],[\"hashcode\",{\"1\":{\"729\":1,\"748\":1,\"760\":1,\"775\":1,\"781\":1,\"782\":1,\"785\":1}}],[\"hashing\",{\"1\":{\"729\":1,\"760\":1,\"775\":1}}],[\"hashseed\",{\"1\":{\"729\":1,\"760\":2,\"775\":1}}],[\"hashset中的数据是无序的\",{\"1\":{\"459\":1}}],[\"hashset和treeset\",{\"1\":{\"457\":1}}],[\"hashset可以方便高效地实现去重\",{\"1\":{\"444\":1}}],[\"hashset实现了set接口\",{\"1\":{\"442\":1}}],[\"hashset\",{\"0\":{\"441\":1},\"1\":{\"459\":1}}],[\"hash方法的功能是根据key来定位这个k\",{\"1\":{\"723\":1}}],[\"hashtable以及concurrenthashmap分别在jdk\",{\"1\":{\"792\":1}}],[\"hashtable以及concurrenthashmap里面的hash方法的实现是不同的\",{\"1\":{\"722\":1}}],[\"hashtable默认的初始大小为11\",{\"1\":{\"765\":1,\"770\":1}}],[\"hashtable采用简单的取模是有一定的考虑在的\",{\"1\":{\"763\":1}}],[\"hashtable也是使用fast\",{\"1\":{\"657\":1}}],[\"hashtable的哈希表大小选择\",{\"1\":{\"771\":1}}],[\"hashtable的链表数组的默认大小是一个素数\",{\"1\":{\"766\":1}}],[\"hashtable的\",{\"1\":{\"652\":1}}],[\"hashtable还使用了enumeration的方式\",{\"1\":{\"652\":1,\"655\":1}}],[\"hashtable\",{\"1\":{\"652\":1,\"655\":1,\"721\":1,\"758\":1,\"783\":1,\"3633\":1}}],[\"hashtable直接使用对象的hashcode\",{\"1\":{\"651\":1}}],[\"hashtable中的hash数组初始大小是11\",{\"1\":{\"650\":1}}],[\"hashtable是没有fast\",{\"1\":{\"657\":1}}],[\"hashtable是基于陈旧的dictionary类继承来的\",{\"1\":{\"649\":1}}],[\"hashtable是线程安全的\",{\"1\":{\"646\":1,\"653\":1}}],[\"hashtable不可以存储null键和null值\",{\"1\":{\"648\":1}}],[\"hash\",{\"0\":{\"631\":1,\"2703\":1,\"3723\":1,\"5065\":1},\"1\":{\"638\":1,\"719\":1,\"720\":1,\"724\":1,\"726\":1,\"729\":1,\"760\":1,\"761\":1,\"767\":1,\"775\":3,\"781\":1,\"785\":2,\"789\":1,\"794\":1,\"1024\":1,\"2347\":1,\"2350\":2,\"2674\":1,\"2705\":1,\"2706\":3,\"2707\":1,\"2710\":1,\"3730\":1,\"4709\":1,\"4712\":2,\"5036\":1,\"5067\":1,\"5068\":3,\"5069\":1,\"5072\":1,\"5200\":1}}],[\"hashmap还是treemap呢\",{\"1\":{\"800\":1}}],[\"hashmap和其他基于map的类都是通过链地址法解决冲突\",{\"1\":{\"778\":1}}],[\"hashmap和hashtable对于计算数组下标这件事\",{\"1\":{\"761\":1}}],[\"hashmap和hashtable的区别\",{\"0\":{\"642\":1}}],[\"hashmap为了提高效率使用位运算代替哈希\",{\"1\":{\"773\":1}}],[\"hashmap默认的初始化大小为16\",{\"1\":{\"769\":1}}],[\"hashmap之所以不用取模的原因是为了提高效率\",{\"1\":{\"762\":1}}],[\"hashmap采用的是位运算\",{\"1\":{\"761\":1}}],[\"hashmap有扩容机制\",{\"1\":{\"697\":1}}],[\"hashmap的数组是有长度的\",{\"1\":{\"744\":1}}],[\"hashmap的数据是存储在链表数组里面的\",{\"1\":{\"744\":1}}],[\"hashmap的实现会稍微复杂一点\",{\"1\":{\"724\":1}}],[\"hashmap的扩容条件就是当hashmap中的元素个数\",{\"1\":{\"699\":1}}],[\"hashmap的重载的构造函数中\",{\"1\":{\"690\":1}}],[\"hashmap的iterator是fail\",{\"1\":{\"656\":1}}],[\"hashmap<string\",{\"1\":{\"686\":1,\"691\":3}}],[\"hashmap<>\",{\"1\":{\"288\":1,\"293\":1,\"307\":1,\"704\":1,\"1033\":1,\"3676\":1,\"3681\":1,\"3695\":1,\"5209\":1}}],[\"hashmap就像一个\",{\"1\":{\"685\":1}}],[\"hashmap会将容量扩容\",{\"1\":{\"680\":1}}],[\"hashmap类中有以下主要成员变量\",{\"1\":{\"674\":1}}],[\"hashmap中size表示当前共有多少个kv对\",{\"1\":{\"711\":1}}],[\"hashmap中还提供了一个支持传入initialcapacity\",{\"1\":{\"709\":1}}],[\"hashmap中还有一个和他们紧密相关的概念\",{\"1\":{\"681\":1}}],[\"hashmap中的size和capacity之间的区别其实解释起来也挺简单的\",{\"1\":{\"685\":1}}],[\"hashmap中的键值对没有顺序\",{\"1\":{\"667\":1}}],[\"hashmap中都定义了哪些成员变量\",{\"1\":{\"671\":1}}],[\"hashmap中hash数组的默认大小是16\",{\"1\":{\"650\":1}}],[\"hashmap实现了map接口\",{\"1\":{\"665\":1}}],[\"hashmap没有锁机制\",{\"1\":{\"661\":1}}],[\"hashmap与hashtable的区别是面试中经常遇到的一个问题\",{\"1\":{\"658\":1}}],[\"hashmap把这部分操作解放出来了\",{\"1\":{\"654\":1}}],[\"hashmap不是线程安全的\",{\"1\":{\"654\":1,\"668\":1}}],[\"hashmap都使用了\",{\"1\":{\"652\":1,\"655\":1}}],[\"hashmap重新计算hash值\",{\"1\":{\"651\":1}}],[\"hashmap继承的抽象类abstractmap实现了map接口\",{\"1\":{\"649\":1}}],[\"hashmap可以存储null键和null值\",{\"1\":{\"647\":1}}],[\"hashmap是线程不安全的\",{\"1\":{\"645\":1}}],[\"hashmap已经显式定义了构造方法\",{\"1\":{\"314\":1,\"3702\":1}}],[\"hashmapinstance\",{\"1\":{\"313\":1,\"3701\":1}}],[\"hashmapclass\",{\"1\":{\"307\":1,\"313\":2,\"316\":2,\"3695\":1,\"3701\":2,\"3704\":2}}],[\"hashmap=\",{\"1\":{\"305\":1,\"309\":1,\"3693\":1,\"3697\":1}}],[\"hashmap\",{\"0\":{\"659\":1,\"664\":1},\"1\":{\"293\":1,\"300\":1,\"305\":1,\"307\":2,\"309\":1,\"313\":3,\"316\":3,\"652\":1,\"722\":1,\"728\":1,\"777\":1,\"794\":1,\"982\":1,\"3026\":1,\"3633\":1,\"3681\":1,\"3688\":1,\"3693\":1,\"3695\":2,\"3697\":1,\"3701\":3,\"3704\":3,\"3999\":1,\"4280\":1}}],[\"has\",{\"1\":{\"356\":1,\"360\":1,\"362\":1}}],[\"handlerexecutionchain\",{\"1\":{\"818\":1,\"3835\":1}}],[\"handleradapter\",{\"1\":{\"814\":1,\"819\":1,\"3831\":1,\"3836\":1}}],[\"handlermapping\",{\"1\":{\"814\":1,\"818\":1,\"3831\":1,\"3835\":1}}],[\"handler\",{\"1\":{\"278\":1,\"814\":2,\"818\":3,\"819\":1,\"820\":2,\"825\":1,\"1221\":1,\"1224\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1230\":1,\"1234\":1,\"1242\":1,\"1243\":1,\"1244\":1,\"1246\":2,\"1247\":2,\"1249\":1,\"1261\":1,\"1262\":1,\"1263\":1,\"1389\":1,\"1392\":1,\"1395\":1,\"1396\":1,\"1397\":1,\"1398\":1,\"1402\":1,\"1410\":1,\"1411\":1,\"1412\":1,\"1414\":2,\"1415\":2,\"1417\":1,\"1429\":1,\"1430\":1,\"1431\":1,\"1557\":1,\"1560\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1578\":1,\"1579\":1,\"1580\":1,\"1582\":2,\"1583\":2,\"1585\":1,\"1597\":1,\"1598\":1,\"1599\":1,\"1725\":1,\"1728\":1,\"1731\":1,\"1732\":1,\"1733\":1,\"1734\":1,\"1738\":1,\"1746\":1,\"1747\":1,\"1748\":1,\"1750\":2,\"1751\":2,\"1753\":1,\"1765\":1,\"1766\":1,\"1767\":1,\"3043\":7,\"3052\":1,\"3666\":1,\"3831\":2,\"3835\":3,\"3836\":1,\"3837\":2,\"3842\":1,\"4297\":7,\"4306\":1,\"4632\":1,\"4635\":1,\"4638\":1,\"4639\":1,\"4640\":1,\"4641\":1,\"4645\":1,\"4653\":1,\"4654\":1,\"4655\":1,\"4657\":2,\"4658\":2,\"4660\":1,\"4672\":1,\"4673\":1,\"4674\":1}}],[\"hotspot\",{\"1\":{\"3004\":1,\"4258\":1}}],[\"hot100的时候\",{\"1\":{\"334\":1}}],[\"holds\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"hold\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"holding\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"hol\",{\"1\":{\"2277\":1,\"5359\":1}}],[\"hollis9\",{\"1\":{\"704\":1}}],[\"hollis8\",{\"1\":{\"704\":1}}],[\"hollis7\",{\"1\":{\"704\":1}}],[\"hollis6\",{\"1\":{\"704\":1}}],[\"hollis5\",{\"1\":{\"704\":1}}],[\"hollis4\",{\"1\":{\"704\":1}}],[\"hollis3\",{\"1\":{\"704\":1}}],[\"hollis2\",{\"1\":{\"704\":1}}],[\"hollis13\",{\"1\":{\"704\":1}}],[\"hollis12\",{\"1\":{\"704\":1}}],[\"hollis11\",{\"1\":{\"704\":1}}],[\"hollis10\",{\"1\":{\"704\":1}}],[\"hollis1\",{\"1\":{\"704\":1}}],[\"hollis\",{\"1\":{\"686\":1}}],[\"hollischuang\",{\"1\":{\"265\":1,\"686\":1,\"704\":13,\"750\":1,\"794\":1}}],[\"host\",{\"1\":{\"2268\":4,\"5350\":4}}],[\"home\",{\"1\":{\"151\":1,\"155\":1,\"208\":1,\"209\":1,\"3310\":1,\"3317\":1,\"3318\":1,\"3550\":1,\"3602\":1,\"3603\":1}}],[\"hope\",{\"1\":{\"83\":2,\"105\":1,\"118\":1,\"3482\":2,\"3504\":1,\"3517\":1}}],[\"卡片\",{\"0\":{\"82\":1,\"3481\":1}}],[\"脚注\",{\"0\":{\"69\":1,\"3468\":1}}],[\"的传输层协议\",{\"1\":{\"5275\":1}}],[\"的名为\",{\"1\":{\"5275\":1}}],[\"的前身\",{\"1\":{\"5275\":1}}],[\"的前后条件中有一个列没有索引\",{\"1\":{\"2443\":1,\"4805\":1}}],[\"的很多设计\",{\"1\":{\"5275\":1}}],[\"的很重要一点就是\",{\"1\":{\"2720\":1,\"5082\":1}}],[\"的制定过程\",{\"1\":{\"5275\":1}}],[\"的开发组全程参与了\",{\"1\":{\"5275\":1}}],[\"的开发组推动\",{\"1\":{\"5275\":1}}],[\"的通用工具\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"的常见做法是将其放在\",{\"1\":{\"3230\":1,\"5499\":1}}],[\"的所在的位置\",{\"1\":{\"3210\":1,\"5479\":1}}],[\"的所有\",{\"1\":{\"2681\":1,\"5043\":1}}],[\"的比较\",{\"1\":{\"3133\":1,\"5413\":1}}],[\"的区别\",{\"1\":{\"3131\":1,\"5411\":1}}],[\"的空闲时间\",{\"1\":{\"3076\":1,\"4330\":1}}],[\"的内部元素并不是按照放入的时间排序\",{\"1\":{\"3067\":1,\"4321\":1}}],[\"的内存操作\",{\"1\":{\"404\":1}}],[\"的最大线程数是\",{\"1\":{\"3066\":1,\"4320\":1}}],[\"的最大连接数是多少\",{\"1\":{\"2128\":1}}],[\"的构造函数创建线程池的时候\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"的键值对\",{\"1\":{\"3030\":1,\"4284\":1}}],[\"的获取\",{\"1\":{\"3016\":1,\"4270\":1}}],[\"的锁\",{\"1\":{\"3012\":1,\"4266\":1}}],[\"的持有权\",{\"1\":{\"3003\":1,\"4257\":1}}],[\"的实际值修改为\",{\"1\":{\"2874\":1,\"4128\":1}}],[\"的实现依赖于\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"的实现\",{\"1\":{\"396\":1}}],[\"的实现细节\",{\"1\":{\"381\":1}}],[\"的值\",{\"1\":{\"2874\":1,\"4128\":1}}],[\"的当前值\",{\"1\":{\"2872\":1,\"4126\":1}}],[\"的变量值增加1\",{\"1\":{\"2866\":1,\"4120\":1}}],[\"的变化而变化的\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"的状态\",{\"1\":{\"2842\":1,\"4096\":1}}],[\"的过期时间设置短一点比如\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"的情况\",{\"1\":{\"2758\":1,\"5120\":1}}],[\"的配置来决定何时将系统内核缓存区的数据同步到硬盘中的\",{\"1\":{\"2735\":1,\"5097\":1}}],[\"的混合持久化\",{\"1\":{\"2723\":1,\"5085\":1}}],[\"的结构相似\",{\"1\":{\"2710\":1,\"5072\":1}}],[\"的结构与对象的\",{\"1\":{\"2710\":1,\"5072\":1}}],[\"的缓存\",{\"1\":{\"2685\":1,\"5047\":1}}],[\"的原子指令\",{\"1\":{\"2879\":1,\"4133\":1}}],[\"的原生字符串\",{\"1\":{\"2680\":1,\"5042\":1}}],[\"的原则又不希望将此类类型的\",{\"1\":{\"893\":1,\"3910\":1}}],[\"的事务\",{\"1\":{\"2627\":1,\"4989\":1}}],[\"的事务id\",{\"1\":{\"2622\":1,\"4984\":1}}],[\"的事务均可见\",{\"1\":{\"2622\":1,\"4984\":1}}],[\"的事务均不可见\",{\"1\":{\"2622\":1,\"4984\":1}}],[\"的事务并没有提交\",{\"1\":{\"2496\":1,\"4858\":1}}],[\"的账户增加\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"的账户扣除\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"的引擎都是用\",{\"1\":{\"2565\":1,\"4927\":1}}],[\"的引擎来实现的\",{\"1\":{\"2564\":1,\"4926\":1}}],[\"的组合\",{\"1\":{\"2542\":1,\"2552\":1,\"4904\":1,\"4914\":1}}],[\"的日志格式是\",{\"1\":{\"2529\":1,\"4891\":1}}],[\"的系统变量\",{\"1\":{\"2523\":1,\"4885\":1}}],[\"的系统调用次数\",{\"1\":{\"1155\":1,\"1323\":1,\"1491\":1,\"1659\":1,\"4566\":1}}],[\"的期间\",{\"1\":{\"2489\":1,\"2490\":1,\"4851\":1,\"4852\":1}}],[\"的存储引擎\",{\"1\":{\"2464\":1,\"4826\":1}}],[\"的支持\",{\"1\":{\"2462\":1,\"4824\":1}}],[\"的每个非叶子节点存储索引\",{\"1\":{\"2393\":1,\"4755\":1}}],[\"的自增主键\",{\"1\":{\"2380\":1,\"4742\":1}}],[\"的表中\",{\"1\":{\"2380\":1,\"4742\":1}}],[\"的意思\",{\"1\":{\"2352\":1,\"4714\":1}}],[\"的意义\",{\"0\":{\"2206\":1},\"1\":{\"2091\":1}}],[\"的默认存储引擎\",{\"1\":{\"2321\":1,\"2323\":1,\"4683\":1,\"4685\":1}}],[\"的权威\",{\"1\":{\"2302\":1,\"5384\":1}}],[\"的权力\",{\"1\":{\"810\":1,\"3827\":1}}],[\"的升级版本\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"的响应分组\",{\"1\":{\"2246\":1,\"5328\":1}}],[\"的工作原理将分两种场景讨论\",{\"1\":{\"2233\":1,\"5315\":1}}],[\"的首部长度\",{\"1\":{\"2168\":1}}],[\"的发送速率\",{\"1\":{\"2148\":1}}],[\"的服务端监听了一个端口\",{\"1\":{\"2128\":1}}],[\"的字段\",{\"1\":{\"2420\":2,\"4782\":2}}],[\"的字段进行序列号初始值的设定\",{\"1\":{\"2104\":1}}],[\"的字段变为有效\",{\"1\":{\"2102\":1}}],[\"的大小\",{\"1\":{\"2099\":1}}],[\"的大了\",{\"1\":{\"1900\":1,\"4489\":1}}],[\"的面试题\",{\"1\":{\"2053\":1}}],[\"的网站支持了http\",{\"1\":{\"1974\":1,\"1989\":1,\"2004\":1,\"2017\":1,\"2030\":1,\"2045\":1,\"5265\":1,\"5288\":1}}],[\"的网络通信的基本操作单元\",{\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"4542\":1}}],[\"的关键在于当前的业务场景\",{\"1\":{\"1920\":1,\"4509\":1}}],[\"的关系\",{\"1\":{\"353\":2,\"356\":2,\"360\":2,\"362\":1}}],[\"的选择\",{\"1\":{\"1916\":1,\"4505\":1}}],[\"的选举\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"的身份进入集群中\",{\"1\":{\"1902\":1,\"4491\":1}}],[\"的身份加入集群\",{\"1\":{\"1887\":1,\"4476\":1}}],[\"的话\",{\"1\":{\"1897\":1,\"2706\":1,\"3303\":1,\"4486\":1,\"5068\":1,\"5572\":1}}],[\"的重新选举\",{\"1\":{\"1895\":1,\"4484\":1}}],[\"的例子\",{\"1\":{\"1888\":1,\"4477\":1}}],[\"的投票结果后发现比自己的合适于是更改投票为\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"的投票发现没自己的合适故不变\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"的投票信息后会将投票信息与自己的作比较\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"的投票仅为1\",{\"1\":{\"1885\":1,\"4474\":1}}],[\"的崩溃\",{\"1\":{\"1883\":1,\"4472\":1}}],[\"的更新\",{\"1\":{\"1878\":1,\"4467\":1}}],[\"的更上层使用者\",{\"1\":{\"381\":1}}],[\"的架构\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"的负载均衡等功能\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"的注册以及多个\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"的应用程序中尤其地高性能\",{\"1\":{\"1858\":1,\"4447\":1}}],[\"的形式存储\",{\"1\":{\"1785\":1,\"4374\":1}}],[\"的形式的存在\",{\"1\":{\"1784\":1,\"4373\":1}}],[\"的运行过程中\",{\"1\":{\"1785\":1,\"4374\":1}}],[\"的请求后\",{\"1\":{\"2299\":1,\"5381\":1}}],[\"的请求\",{\"1\":{\"1783\":1,\"1902\":1,\"4372\":1,\"4491\":1}}],[\"的功能使其可以接受\",{\"1\":{\"1783\":1,\"4372\":1}}],[\"的模式还有个问题\",{\"1\":{\"1254\":1,\"1422\":1,\"1590\":1,\"1758\":1,\"4665\":1}}],[\"的能力\",{\"1\":{\"1248\":1,\"1416\":1,\"1584\":1,\"1752\":1,\"4659\":1}}],[\"的性能还行\",{\"1\":{\"2322\":1,\"4684\":1}}],[\"的性能\",{\"1\":{\"1233\":1,\"1401\":1,\"1569\":1,\"1737\":1,\"4644\":1}}],[\"的流程来完成完整的业务流程\",{\"1\":{\"1230\":1,\"1263\":1,\"1398\":1,\"1431\":1,\"1566\":1,\"1599\":1,\"1734\":1,\"1767\":1,\"4641\":1,\"4674\":1}}],[\"的流程中\",{\"1\":{\"885\":1,\"3902\":1}}],[\"的方案示意图\",{\"1\":{\"1219\":1,\"1387\":1,\"1555\":1,\"1723\":1,\"4630\":1}}],[\"的方案\",{\"1\":{\"1217\":1,\"1218\":1,\"1236\":1,\"1385\":1,\"1386\":1,\"1404\":1,\"1553\":1,\"1554\":1,\"1572\":1,\"1721\":1,\"1722\":1,\"1740\":1,\"4628\":1,\"4629\":1,\"4647\":1}}],[\"的方式即使监听的\",{\"1\":{\"1144\":1,\"1312\":1,\"1480\":1,\"1648\":1,\"4555\":1}}],[\"的吞吐率\",{\"1\":{\"1192\":1,\"1360\":1,\"1528\":1,\"1696\":1,\"4603\":1}}],[\"的次数\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4574\":1}}],[\"的数据就写一个到\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"的数据\",{\"1\":{\"2761\":1,\"5123\":1}}],[\"的数据版本均可见\",{\"1\":{\"2625\":1,\"4987\":1}}],[\"的数据版本均不可见\",{\"1\":{\"2624\":1,\"4986\":1}}],[\"的数据库在异常崩溃后\",{\"1\":{\"2337\":1,\"4699\":1}}],[\"的数据大小如果大于\",{\"1\":{\"2156\":1,\"2157\":1}}],[\"的数据结构\",{\"0\":{\"714\":1},\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"3067\":1,\"4321\":1,\"4551\":1}}],[\"的数量可以只有一个\",{\"1\":{\"1200\":1,\"1368\":1,\"1536\":1,\"1704\":1,\"4611\":1}}],[\"的数目也非常的多了\",{\"1\":{\"1144\":1,\"1312\":1,\"1480\":1,\"1648\":1,\"4555\":1}}],[\"的问题\",{\"0\":{\"2882\":1,\"4136\":1},\"1\":{\"1139\":1,\"1256\":1,\"1307\":1,\"1424\":1,\"1475\":1,\"1592\":1,\"1643\":1,\"1760\":1,\"3087\":1,\"4341\":1,\"4550\":1,\"4667\":1}}],[\"的一个内部类\",{\"1\":{\"2993\":1,\"4247\":1}}],[\"的一级缓存与二级缓存\",{\"1\":{\"991\":1,\"4008\":1}}],[\"的一套指令集规范\",{\"1\":{\"182\":1,\"3576\":1}}],[\"的同一个\",{\"1\":{\"984\":1,\"4001\":1}}],[\"的动态代理\",{\"1\":{\"978\":1,\"3995\":1}}],[\"的特性\",{\"1\":{\"893\":1,\"3910\":1}}],[\"的属性\",{\"1\":{\"889\":1,\"3906\":1}}],[\"的成品创建依赖于\",{\"1\":{\"885\":1,\"3902\":1}}],[\"的隔离级别\",{\"1\":{\"856\":1,\"2604\":1,\"3873\":1,\"4966\":1}}],[\"的增强或通知\",{\"1\":{\"836\":1,\"3853\":1}}],[\"的入参过程中\",{\"1\":{\"820\":1,\"3837\":1}}],[\"的思想就是将原本在程序中手动创建对象的控制权\",{\"1\":{\"808\":1,\"3825\":1}}],[\"的高16位异或低16位实现的\",{\"1\":{\"782\":1}}],[\"的时间段内不会占用\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"的时间过长\",{\"1\":{\"2974\":1,\"4228\":1}}],[\"的时间复杂度\",{\"1\":{\"434\":1,\"3759\":1}}],[\"的时机不同\",{\"1\":{\"2613\":1,\"4975\":1}}],[\"的时候都会分配一个特定的偏移量\",{\"1\":{\"3210\":1,\"5479\":1}}],[\"的时候不存在线程安全问题\",{\"1\":{\"3207\":1,\"5476\":1}}],[\"的时候同样更新\",{\"1\":{\"3207\":1,\"5476\":1}}],[\"的时候你如何排查问题\",{\"1\":{\"3171\":1,\"5451\":1}}],[\"的时候依赖一次\",{\"1\":{\"2840\":1,\"4094\":1}}],[\"的时候才对数据进行过期检查\",{\"1\":{\"2755\":1,\"5117\":1}}],[\"的时候\",{\"1\":{\"1921\":1,\"3049\":1,\"4303\":1,\"4510\":1}}],[\"的时候突然挂了\",{\"1\":{\"1897\":1,\"4486\":1}}],[\"的时候会把null值也拷贝\",{\"1\":{\"516\":1}}],[\"的文章\",{\"1\":{\"397\":1}}],[\"的文档\",{\"1\":{\"339\":1}}],[\"的历史遗留问题了\",{\"1\":{\"393\":1}}],[\"的定义是在同一端进\",{\"1\":{\"388\":1}}],[\"的相关方法\",{\"1\":{\"381\":1}}],[\"的底层具体实现不同\",{\"1\":{\"377\":1}}],[\"的程序\",{\"1\":{\"368\":1}}],[\"的信息\",{\"1\":{\"278\":1,\"3666\":1}}],[\"的核心\",{\"1\":{\"236\":1,\"3630\":1}}],[\"的主要组成部分\",{\"0\":{\"177\":1,\"3571\":1}}],[\"的\",{\"0\":{\"261\":1,\"3657\":1},\"1\":{\"67\":1,\"117\":1,\"228\":1,\"401\":1,\"402\":1,\"978\":1,\"979\":1,\"984\":1,\"1041\":1,\"1900\":1,\"2105\":1,\"2107\":2,\"2114\":1,\"2132\":3,\"2239\":1,\"2240\":2,\"2242\":4,\"2244\":1,\"2252\":1,\"2254\":3,\"2257\":1,\"2258\":2,\"2259\":1,\"2281\":2,\"2297\":1,\"2298\":1,\"2300\":1,\"2369\":1,\"2380\":1,\"2401\":1,\"2555\":1,\"2622\":1,\"2683\":1,\"2879\":1,\"3065\":1,\"3230\":1,\"3466\":1,\"3516\":1,\"3622\":1,\"3995\":1,\"3996\":1,\"4001\":1,\"4133\":1,\"4319\":1,\"4489\":1,\"4731\":1,\"4742\":1,\"4763\":1,\"4917\":1,\"4984\":1,\"5045\":1,\"5217\":1,\"5275\":2,\"5321\":1,\"5322\":2,\"5324\":4,\"5326\":1,\"5334\":1,\"5336\":3,\"5339\":1,\"5340\":2,\"5341\":1,\"5363\":2,\"5379\":1,\"5380\":1,\"5382\":1,\"5499\":1}}],[\"illegalmonitorstateexception的异常的原因\",{\"1\":{\"3005\":1,\"4259\":1}}],[\"illegalargumentexception\",{\"1\":{\"612\":1,\"3043\":2,\"3805\":1,\"4297\":2}}],[\"ibd文件就包含了该表的索引和数据\",{\"1\":{\"2393\":1,\"4755\":1}}],[\"ipv4\",{\"1\":{\"2132\":1}}],[\"ip地址\",{\"1\":{\"2123\":1,\"2125\":1}}],[\"ip常见面试题\",{\"0\":{\"2037\":1}}],[\"ip\",{\"0\":{\"2184\":1,\"2224\":1,\"2227\":1,\"2316\":1,\"5306\":1,\"5309\":1},\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"2069\":1,\"2107\":1,\"2118\":1,\"2128\":1,\"2130\":1,\"2132\":1,\"2157\":2,\"2170\":1,\"2175\":1,\"2230\":3,\"2232\":1,\"2237\":3,\"2238\":2,\"2239\":1,\"2240\":1,\"2242\":5,\"2243\":2,\"2244\":2,\"2245\":1,\"2246\":1,\"2249\":2,\"2250\":1,\"2252\":1,\"2254\":5,\"2255\":2,\"2259\":1,\"2268\":1,\"2297\":2,\"2298\":2,\"2300\":1,\"2303\":1,\"2304\":1,\"4542\":1,\"5312\":3,\"5314\":1,\"5319\":3,\"5320\":2,\"5321\":1,\"5322\":1,\"5324\":5,\"5325\":2,\"5326\":2,\"5327\":1,\"5328\":1,\"5331\":2,\"5332\":1,\"5334\":1,\"5336\":5,\"5337\":2,\"5341\":1,\"5350\":1,\"5379\":2,\"5380\":2,\"5382\":1,\"5385\":1,\"5386\":1}}],[\"import\",{\"1\":{\"3041\":4,\"4295\":4}}],[\"implements\",{\"1\":{\"2829\":1,\"3025\":1,\"4083\":1,\"4279\":1}}],[\"image\",{\"1\":{\"815\":1,\"1099\":1,\"3832\":1}}],[\"img\",{\"1\":{\"429\":1,\"872\":1,\"882\":1,\"887\":1,\"892\":1,\"902\":1,\"904\":1,\"906\":1,\"908\":1,\"965\":1,\"1071\":1,\"1073\":1,\"1076\":1,\"1078\":1,\"1143\":1,\"1168\":1,\"1181\":1,\"1187\":1,\"1220\":1,\"1240\":1,\"1258\":1,\"1311\":1,\"1336\":1,\"1349\":1,\"1355\":1,\"1388\":1,\"1408\":1,\"1426\":1,\"1479\":1,\"1504\":1,\"1517\":1,\"1523\":1,\"1556\":1,\"1576\":1,\"1594\":1,\"1647\":1,\"1672\":1,\"1685\":1,\"1691\":1,\"1724\":1,\"1744\":1,\"1762\":1,\"1781\":1,\"1829\":1,\"1907\":1,\"2213\":1,\"2225\":1,\"2381\":1,\"2390\":1,\"2447\":1,\"2538\":1,\"2835\":1,\"2918\":1,\"2920\":1,\"3754\":1,\"3889\":1,\"3899\":1,\"3904\":1,\"3909\":1,\"3919\":1,\"3921\":1,\"3923\":1,\"3925\":1,\"3982\":1,\"4089\":1,\"4172\":1,\"4174\":1,\"4370\":1,\"4418\":1,\"4496\":1,\"4554\":1,\"4579\":1,\"4592\":1,\"4598\":1,\"4631\":1,\"4651\":1,\"4669\":1,\"4743\":1,\"4752\":1,\"4809\":1,\"4900\":1,\"5247\":1,\"5249\":1,\"5252\":1,\"5254\":1,\"5295\":1,\"5307\":1}}],[\"i<size\",{\"1\":{\"510\":1}}],[\"i=0\",{\"1\":{\"510\":1}}],[\"ioc容器中\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"ioc\",{\"1\":{\"808\":3,\"811\":1,\"3825\":3,\"3828\":1}}],[\"io\",{\"1\":{\"510\":2,\"513\":3,\"767\":1,\"794\":1,\"1227\":1,\"1242\":1,\"1395\":1,\"1410\":1,\"1563\":1,\"1578\":1,\"1731\":1,\"1746\":1,\"2270\":1,\"2350\":1,\"2395\":1,\"2660\":1,\"2665\":1,\"2671\":1,\"2829\":1,\"4083\":1,\"4638\":1,\"4653\":1,\"4712\":1,\"4757\":1,\"5022\":1,\"5027\":1,\"5033\":1,\"5352\":1}}],[\"ioexception\",{\"1\":{\"257\":1,\"263\":1,\"265\":3,\"510\":1,\"513\":1,\"3653\":1,\"3659\":1}}],[\"i++操作不是原子操作\",{\"1\":{\"2857\":1,\"4111\":1}}],[\"i++\",{\"1\":{\"406\":2,\"510\":1,\"1033\":1,\"1095\":1,\"2897\":1,\"4151\":1,\"5209\":1}}],[\"i\",{\"0\":{\"1133\":1,\"1301\":1,\"1469\":1,\"1637\":1,\"4544\":1},\"1\":{\"406\":5,\"510\":1,\"1033\":6,\"1095\":3,\"1134\":1,\"1154\":3,\"1192\":1,\"1302\":1,\"1322\":3,\"1360\":1,\"1470\":1,\"1490\":3,\"1528\":1,\"1638\":1,\"1658\":3,\"1696\":1,\"2747\":1,\"2763\":1,\"2764\":1,\"2765\":1,\"2767\":1,\"2770\":1,\"2896\":1,\"3077\":4,\"4150\":1,\"4331\":4,\"4545\":1,\"4565\":3,\"4603\":1,\"5109\":1,\"5125\":1,\"5126\":1,\"5127\":1,\"5129\":1,\"5132\":1,\"5209\":6}}],[\"if\",{\"1\":{\"229\":4,\"260\":1,\"265\":4,\"293\":2,\"510\":1,\"535\":2,\"539\":2,\"547\":1,\"549\":2,\"581\":2,\"729\":1,\"760\":1,\"775\":1,\"1024\":4,\"1033\":1,\"2267\":4,\"3028\":1,\"3043\":5,\"3290\":1,\"3623\":4,\"3656\":1,\"3681\":2,\"3774\":2,\"4282\":1,\"4297\":5,\"5200\":4,\"5209\":1,\"5349\":4,\"5559\":1}}],[\"inheritablethreadlocals\",{\"1\":{\"3025\":1,\"3026\":1,\"4279\":1,\"4280\":1}}],[\"inheritance\",{\"1\":{\"365\":1}}],[\"innodb\",{\"0\":{\"2320\":1,\"2658\":1,\"4682\":1,\"5020\":1},\"1\":{\"2323\":1,\"2326\":1,\"2327\":1,\"2330\":2,\"2332\":1,\"2336\":1,\"2337\":1,\"2339\":1,\"2342\":1,\"2343\":1,\"2358\":1,\"2360\":2,\"2363\":1,\"2368\":1,\"2380\":3,\"2389\":1,\"2392\":1,\"2393\":2,\"2409\":1,\"2465\":1,\"2482\":2,\"2503\":1,\"2504\":1,\"2521\":1,\"2523\":2,\"2524\":1,\"2525\":1,\"2526\":1,\"2529\":1,\"2531\":1,\"2533\":1,\"2564\":1,\"2565\":1,\"2571\":1,\"2595\":1,\"2607\":1,\"2615\":1,\"2617\":1,\"2620\":1,\"2633\":1,\"3133\":1,\"4685\":1,\"4688\":1,\"4689\":1,\"4692\":2,\"4694\":1,\"4698\":1,\"4699\":1,\"4701\":1,\"4704\":1,\"4705\":1,\"4720\":1,\"4722\":2,\"4725\":1,\"4730\":1,\"4742\":3,\"4751\":1,\"4754\":1,\"4755\":2,\"4771\":1,\"4827\":1,\"4844\":2,\"4865\":1,\"4866\":1,\"4883\":1,\"4885\":2,\"4886\":1,\"4887\":1,\"4888\":1,\"4891\":1,\"4893\":1,\"4895\":1,\"4926\":1,\"4927\":1,\"4933\":1,\"4957\":1,\"4969\":1,\"4977\":1,\"4979\":1,\"4982\":1,\"4995\":1,\"5413\":1}}],[\"innodb特性\",{\"0\":{\"2319\":1,\"4681\":1}}],[\"inc\",{\"0\":{\"2514\":1,\"4876\":1},\"1\":{\"2472\":1,\"2516\":1,\"2517\":1,\"2518\":2,\"2519\":1,\"2520\":1,\"2523\":1,\"2524\":1,\"4834\":1,\"4878\":1,\"4879\":1,\"4880\":2,\"4881\":1,\"4882\":1,\"4885\":1,\"4886\":1}}],[\"include\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4588\":1}}],[\"increments\",{\"1\":{\"539\":1}}],[\"increment\",{\"1\":{\"229\":1,\"2515\":1,\"2518\":1,\"2519\":1,\"2522\":1,\"3623\":1,\"4877\":1,\"4880\":1,\"4881\":1,\"4884\":1}}],[\"info\",{\"1\":{\"940\":1,\"3310\":1,\"3957\":1}}],[\"info信息等\",{\"1\":{\"939\":1,\"3956\":1}}],[\"inf\",{\"1\":{\"900\":1,\"905\":2,\"907\":2,\"3917\":1,\"3922\":2,\"3924\":2}}],[\"initial\",{\"1\":{\"672\":1,\"682\":1,\"3043\":1,\"4297\":1}}],[\"initialization\",{\"1\":{\"190\":1,\"3584\":1}}],[\"invocationhandler\",{\"1\":{\"610\":1,\"612\":2,\"614\":1,\"978\":1,\"3803\":1,\"3805\":2,\"3807\":1,\"3995\":1}}],[\"invoke\",{\"1\":{\"613\":1,\"614\":2,\"615\":2,\"686\":1,\"691\":3,\"704\":2,\"978\":1,\"3806\":1,\"3807\":2,\"3808\":2,\"3995\":1}}],[\"invokevirtual\",{\"1\":{\"276\":1,\"3664\":1}}],[\"invokestatic\",{\"1\":{\"276\":1,\"3664\":1}}],[\"insert\",{\"1\":{\"982\":1,\"996\":1,\"2452\":1,\"2527\":1,\"2528\":1,\"2633\":1,\"2634\":3,\"3999\":1,\"4013\":1,\"4814\":1,\"4889\":1,\"4890\":1,\"4995\":1,\"4996\":3}}],[\"insertelementat\",{\"1\":{\"535\":2}}],[\"instanceof\",{\"1\":{\"729\":1,\"775\":1}}],[\"instance\",{\"1\":{\"510\":2,\"513\":1,\"581\":5,\"3774\":5}}],[\"index地址\",{\"1\":{\"3317\":1}}],[\"indexcontroller\",{\"1\":{\"3310\":1}}],[\"index=8\",{\"1\":{\"1065\":1,\"5241\":1}}],[\"index=7\",{\"1\":{\"1056\":1,\"5232\":1}}],[\"indexfor方法其实主要是将hash生成的整型转换成链表数组中的下标\",{\"1\":{\"730\":1}}],[\"indexfor\",{\"1\":{\"724\":1,\"727\":1,\"729\":1}}],[\"index+1\",{\"1\":{\"547\":1,\"549\":1}}],[\"index\",{\"1\":{\"535\":9,\"537\":2,\"539\":10,\"545\":2,\"547\":5,\"549\":6,\"565\":1,\"761\":1,\"775\":1,\"785\":1,\"2349\":2,\"2383\":1,\"2387\":1,\"2392\":1,\"2401\":1,\"2409\":1,\"2417\":1,\"3310\":3,\"3318\":1,\"4711\":2,\"4745\":1,\"4749\":1,\"4754\":1,\"4763\":1,\"4771\":1,\"4779\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"244\":1,\"539\":1,\"3640\":1}}],[\"in\",{\"1\":{\"510\":2,\"728\":1,\"758\":1,\"774\":1,\"777\":1,\"783\":1,\"787\":1,\"794\":1,\"1126\":1,\"1177\":1,\"1294\":1,\"1345\":1,\"1462\":1,\"1513\":1,\"1630\":1,\"1681\":1,\"2508\":1,\"2535\":1,\"2664\":1,\"3043\":2,\"4297\":2,\"4537\":1,\"4588\":1,\"4870\":1,\"4897\":1,\"5026\":1}}],[\"inputstream\",{\"1\":{\"263\":2,\"3659\":2}}],[\"intel\",{\"1\":{\"2879\":1,\"4133\":1}}],[\"interview\",{\"0\":{\"5586\":1}}],[\"internet\",{\"1\":{\"2214\":1,\"2275\":1,\"2307\":1,\"5275\":1,\"5296\":1,\"5357\":1}}],[\"interceptor\",{\"1\":{\"979\":1,\"3996\":1}}],[\"intercept\",{\"1\":{\"621\":2,\"622\":1,\"623\":1,\"979\":1,\"3814\":2,\"3815\":1,\"3816\":1,\"3996\":1}}],[\"interfaces\",{\"1\":{\"612\":2,\"3805\":2}}],[\"interface\",{\"1\":{\"181\":1,\"182\":1,\"614\":1,\"622\":1,\"3575\":1,\"3576\":1,\"3807\":1,\"3815\":1}}],[\"integer>\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"integer\",{\"1\":{\"341\":1,\"822\":1,\"1033\":1,\"3065\":1,\"3066\":1,\"3067\":1,\"3090\":1,\"3091\":1,\"3092\":1,\"3839\":1,\"4319\":1,\"4320\":1,\"4321\":1,\"4344\":1,\"4345\":1,\"4346\":1,\"5209\":1}}],[\"int\",{\"1\":{\"260\":1,\"271\":5,\"406\":3,\"510\":3,\"524\":1,\"525\":1,\"535\":3,\"537\":1,\"539\":3,\"545\":1,\"547\":2,\"549\":2,\"565\":1,\"675\":1,\"679\":1,\"682\":1,\"719\":1,\"724\":2,\"729\":5,\"760\":1,\"761\":1,\"775\":3,\"781\":2,\"785\":2,\"789\":2,\"1024\":5,\"1033\":5,\"1095\":4,\"1177\":2,\"1345\":2,\"1513\":2,\"1681\":2,\"2679\":1,\"2929\":1,\"2930\":1,\"2931\":1,\"2932\":1,\"3043\":2,\"3656\":1,\"4183\":1,\"4184\":1,\"4185\":1,\"4186\":1,\"4297\":2,\"4588\":2,\"5041\":1,\"5200\":5,\"5209\":5}}],[\"ir⋯\",{\"1\":{\"94\":1,\"3493\":1}}],[\"isheldexclusively\",{\"1\":{\"2928\":1,\"4182\":1}}],[\"isn\",{\"0\":{\"2183\":1},\"1\":{\"2068\":1}}],[\"isolation\",{\"1\":{\"852\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"2569\":1,\"3869\":1,\"3870\":1,\"3871\":1,\"3872\":1,\"3873\":1,\"4931\":1}}],[\"is\",{\"1\":{\"83\":2,\"353\":1,\"360\":1,\"362\":1,\"510\":2,\"513\":1,\"760\":1,\"3043\":5,\"3482\":2,\"4297\":5}}],[\"idea\",{\"1\":{\"3390\":1}}],[\"idle\",{\"1\":{\"3043\":2,\"4297\":2}}],[\"idx=1\",{\"1\":{\"2961\":1,\"3106\":1,\"4215\":1,\"4360\":1}}],[\"idx=3\",{\"1\":{\"2856\":1,\"4110\":1}}],[\"idx=2\",{\"1\":{\"915\":1,\"3932\":1}}],[\"id+1\",{\"1\":{\"2624\":1,\"4986\":1}}],[\"ids\",{\"1\":{\"2622\":2,\"2625\":2,\"2626\":2,\"4984\":2,\"4987\":2,\"4988\":2}}],[\"id\",{\"1\":{\"67\":1,\"2549\":2,\"2615\":1,\"2618\":2,\"2620\":2,\"2622\":9,\"2624\":3,\"2625\":5,\"2626\":2,\"2627\":2,\"2778\":1,\"2840\":1,\"3466\":1,\"4094\":1,\"4911\":2,\"4977\":1,\"4980\":2,\"4982\":2,\"4984\":9,\"4986\":3,\"4987\":5,\"4988\":2,\"4989\":2,\"5140\":1}}],[\"iterator\",{\"1\":{\"652\":3,\"655\":1}}],[\"its\",{\"1\":{\"510\":1,\"547\":1,\"549\":1}}],[\"it\",{\"1\":{\"37\":2,\"510\":1,\"513\":1,\"3436\":2}}],[\"我就去总结md5相关的知识\",{\"1\":{\"3386\":1}}],[\"我就是了解\",{\"1\":{\"3121\":1,\"5401\":1}}],[\"我当时信以为真\",{\"1\":{\"3386\":1}}],[\"我当时一脸懵逼\",{\"1\":{\"3386\":1}}],[\"我叫杨路恒\",{\"1\":{\"3323\":1,\"5574\":1}}],[\"我简历上都是java\",{\"1\":{\"3187\":1}}],[\"我看你为了防止内存泄漏\",{\"1\":{\"3185\":1}}],[\"我看到你用到了threadlocal\",{\"1\":{\"3184\":1}}],[\"我看看一下经过扰动的算法最终的计算结果会如何\",{\"1\":{\"753\":1}}],[\"我都说了了解mysql\",{\"1\":{\"3125\":1,\"5405\":1}}],[\"我只是了解他是干啥的\",{\"1\":{\"3122\":1,\"5402\":1}}],[\"我发现缓存雪崩这名字起的有点意思\",{\"1\":{\"2803\":1,\"5165\":1}}],[\"我给你负责\",{\"1\":{\"2301\":1,\"5383\":1}}],[\"我给你\",{\"1\":{\"2299\":1,\"5381\":1}}],[\"我总结面试常考的也就是\",{\"1\":{\"2098\":1}}],[\"我默认大家对http\",{\"1\":{\"1977\":1,\"1992\":1,\"2007\":1,\"2020\":1,\"2033\":1,\"2048\":1,\"5268\":1,\"5291\":1}}],[\"我说算力够的话能够被破解\",{\"1\":{\"3182\":1}}],[\"我说了做的一些优化\",{\"1\":{\"3148\":1,\"5428\":1}}],[\"我说是生成随机数吗\",{\"1\":{\"3145\":1,\"5425\":1}}],[\"我说是一个高并发写的操作\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"我说实现自定义处理策略\",{\"1\":{\"3144\":1,\"5424\":1}}],[\"我说实习生的日常工作安排是什么\",{\"1\":{\"3137\":1,\"5417\":1}}],[\"我说只了解它是用来作为即时通讯的协议\",{\"1\":{\"3128\":1,\"5408\":1}}],[\"我说不了解\",{\"1\":{\"3126\":1,\"3136\":1,\"5406\":1,\"5416\":1}}],[\"我说不行\",{\"1\":{\"3116\":1,\"5396\":1}}],[\"我说spring\",{\"1\":{\"3120\":1,\"5400\":1}}],[\"我说如果在一个进程可以\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"我要先告诉大家一个常见的局部性原理\",{\"1\":{\"1090\":1}}],[\"我希望我们不仅可以深入了解背后的原理\",{\"1\":{\"792\":1}}],[\"我后面会有文章继续深入介绍\",{\"1\":{\"778\":1}}],[\"我猜这只是程序员自由意志的选择吧\",{\"1\":{\"776\":1}}],[\"我会尽量全部介绍到\",{\"1\":{\"722\":1}}],[\"我参考了网上的其博主的文章写的\",{\"1\":{\"411\":1}}],[\"我再提供一个简单的原则\",{\"1\":{\"362\":1}}],[\"我一个小白当然是去百度一下这个deque为啥java官方要推荐作为stack的实现呢\",{\"1\":{\"335\":1}}],[\"我先不说反射是啥\",{\"1\":{\"289\":1,\"3677\":1}}],[\"我们无法通过常规方式从md5值倒推出它的原文\",{\"1\":{\"3330\":1}}],[\"我们手动关闭自动提交\",{\"1\":{\"3213\":1,\"5482\":1}}],[\"我们足以通过猜测得出结论\",{\"1\":{\"3029\":1,\"4283\":1}}],[\"我们调用的是threadlocalmap类对应的\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"我们创建的变量是可以被任何一个线程访问并修改的\",{\"1\":{\"3020\":1,\"4274\":1}}],[\"我们创建索引的字段应该是查询操作非常频繁的字段\",{\"1\":{\"2421\":1,\"4783\":1}}],[\"我们操作锁大多时候都是基于\",{\"1\":{\"2993\":1,\"4247\":1}}],[\"我们称之为\",{\"1\":{\"2984\":1,\"4238\":1}}],[\"我们还要从布隆过滤器的原理来说\",{\"1\":{\"2785\":1,\"5147\":1}}],[\"我们需要的就是判断\",{\"1\":{\"2782\":1,\"5144\":1}}],[\"我们只需要维护threadpoolexecutor的实例\",{\"1\":{\"3096\":1,\"4350\":1}}],[\"我们只需要使用preparedstatement解决\",{\"1\":{\"2636\":1,\"4998\":1}}],[\"我们只要调用object对象的hashcode\",{\"1\":{\"724\":1}}],[\"我们讨论的\",{\"1\":{\"2605\":1,\"4967\":1}}],[\"我们常见的\",{\"1\":{\"2564\":1,\"4926\":1}}],[\"我们不需要显示的使用\",{\"1\":{\"2485\":1,\"4847\":1}}],[\"我们不需要针对每个目标类都单独创建一个代理类\",{\"1\":{\"604\":1,\"3797\":1}}],[\"我们在后端增加额外的处理逻辑比如将失效的\",{\"1\":{\"3303\":1,\"5572\":1}}],[\"我们在使用联合索引时\",{\"1\":{\"2415\":1,\"4777\":1}}],[\"我们在做类设计的时候\",{\"1\":{\"359\":1}}],[\"我们就称之为\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"我们说网络设备都有一个\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"我们也是时候了解下到底什么是http\",{\"1\":{\"1968\":1,\"1983\":1,\"1998\":1,\"2011\":1,\"2024\":1,\"2039\":1,\"5258\":1,\"5283\":1}}],[\"我们也能看出\",{\"1\":{\"383\":1}}],[\"我们是要考虑\",{\"1\":{\"2556\":1,\"4918\":1}}],[\"我们是不建议在实际生产项目中使用外键的\",{\"1\":{\"2333\":1,\"4695\":1}}],[\"我们是用的\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"我们是必须要实现的\",{\"1\":{\"1916\":1,\"4505\":1}}],[\"我们是否可能将栈当做一个动态数组使用\",{\"1\":{\"363\":1}}],[\"我们是否有可能把子类进行向上的父类转型\",{\"1\":{\"362\":1}}],[\"我们肯定需要先暂停服务变为\",{\"1\":{\"1895\":1,\"4484\":1}}],[\"我们整个集群如何保证数据一致性\",{\"1\":{\"1893\":1,\"4482\":1}}],[\"我们首先来了解一下在\",{\"1\":{\"1871\":1,\"4460\":1}}],[\"我们一定会依赖各种服务\",{\"1\":{\"1839\":1,\"4428\":1}}],[\"我们来看看\",{\"1\":{\"1219\":1,\"1387\":1,\"1555\":1,\"1723\":1,\"4630\":1}}],[\"我们来做个简单的总结\",{\"1\":{\"768\":1}}],[\"我们写的\",{\"1\":{\"1218\":1,\"1386\":1,\"1554\":1,\"1722\":1,\"4629\":1}}],[\"我们会循环从文件描述符读写数据\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4565\":1}}],[\"我们熟悉的\",{\"1\":{\"1136\":1,\"1304\":1,\"1472\":1,\"1640\":1,\"4547\":1}}],[\"我们去分析一级缓存这样存放成品\",{\"1\":{\"885\":1,\"3902\":1}}],[\"我们的项目需要连接多个数据库\",{\"1\":{\"834\":1,\"3851\":1}}],[\"我们已经分析完了hashmap\",{\"1\":{\"792\":1}}],[\"我们看完了java\",{\"1\":{\"768\":1}}],[\"我们前面说过\",{\"1\":{\"762\":1}}],[\"我们现在想向一个hashmap中put一个k\",{\"1\":{\"750\":1}}],[\"我们接下来准备分析hash方法的具体原理和实现\",{\"1\":{\"743\":1}}],[\"我们先来了解一下加密算法的基础北背景\",{\"1\":{\"3388\":1}}],[\"我们先来看一下\",{\"1\":{\"2786\":1,\"5148\":1}}],[\"我们先来做个简单分析\",{\"1\":{\"723\":1}}],[\"我们先来简单解释一下这些参数的含义\",{\"1\":{\"673\":1}}],[\"我们拿jdk\",{\"1\":{\"719\":1}}],[\"我们根据元素的自身特征把元素分配到不同的链表中去\",{\"1\":{\"717\":1}}],[\"我们定义了一个新的hashmap\",{\"1\":{\"687\":1}}],[\"我们知道消息在被追加到\",{\"1\":{\"3210\":1,\"5479\":1}}],[\"我们知道在\",{\"1\":{\"2409\":1,\"4771\":1}}],[\"我们知道\",{\"1\":{\"685\":1,\"690\":1,\"723\":1,\"757\":1,\"947\":1,\"1978\":1,\"1993\":1,\"2008\":1,\"2021\":1,\"2034\":1,\"2049\":1,\"3964\":1,\"5269\":1,\"5292\":1}}],[\"我们知道vector和arraylist都是list的子类\",{\"1\":{\"530\":1}}],[\"我们对目标对象的每个方法的增强都是手动完成的\",{\"1\":{\"601\":1,\"3794\":1}}],[\"我们发现\",{\"1\":{\"552\":1}}],[\"我们最开始分析\",{\"1\":{\"392\":1}}],[\"我们想实现一个队列\",{\"1\":{\"375\":1}}],[\"我们都知道\",{\"1\":{\"375\":1}}],[\"我们再来看一下\",{\"1\":{\"372\":1,\"2789\":1,\"5151\":1}}],[\"我们可以创建多种类型的\",{\"1\":{\"3079\":1,\"4333\":1}}],[\"我们可以多配置一些线程\",{\"1\":{\"3077\":1,\"4331\":1}}],[\"我们可以结合内置线程池来分析\",{\"1\":{\"3064\":1,\"4318\":1}}],[\"我们可以把\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"我们可以在构造函数中传入\",{\"1\":{\"2994\":1,\"4248\":1}}],[\"我们可以在程序运行时动态创建对象\",{\"1\":{\"297\":1,\"3685\":1}}],[\"我们可以设置一个\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"我们可以快速找到\",{\"1\":{\"2349\":1,\"4711\":1}}],[\"我们可以进一步减少通过\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"我们可以得知\",{\"1\":{\"1173\":1,\"1341\":1,\"1509\":1,\"1677\":1,\"4584\":1}}],[\"我们可以看到输出的sql文是把整个参数用引号包起来\",{\"1\":{\"2637\":1,\"4999\":1}}],[\"我们可以看到\",{\"1\":{\"1096\":1}}],[\"我们可以集成很多三方中间件来做缓存\",{\"1\":{\"991\":1,\"4008\":1}}],[\"我们可以发现\",{\"1\":{\"761\":1,\"792\":1}}],[\"我们可以从上图看到\",{\"1\":{\"717\":1}}],[\"我们可以将其理解为链表的数组\",{\"1\":{\"715\":1}}],[\"我们可以用\",{\"1\":{\"618\":1,\"1165\":1,\"1333\":1,\"1501\":1,\"1669\":1,\"3811\":1,\"4576\":1}}],[\"我们可以直接代理实现类\",{\"1\":{\"604\":1,\"3797\":1}}],[\"我们可以对\",{\"1\":{\"211\":1,\"3605\":1}}],[\"我们暂且不急于介绍异常表\",{\"1\":{\"273\":1,\"3661\":1}}],[\"我们支持\",{\"1\":{\"160\":1,\"168\":1,\"3554\":1,\"3562\":1}}],[\"我在右对齐\",{\"1\":{\"64\":1,\"3463\":1}}],[\"我是居中的\",{\"1\":{\"63\":1,\"3462\":1}}],[\"上传素材功能\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"上完厕所完事后把门打开\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"上的副本\",{\"1\":{\"2725\":1,\"5087\":1}}],[\"上的更改\",{\"1\":{\"929\":1,\"3946\":1}}],[\"上图有一个错误\",{\"1\":{\"2214\":1,\"2307\":1,\"5296\":1}}],[\"上图用于辅助理解\",{\"1\":{\"816\":1,\"3833\":1}}],[\"上位的时候\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"上\",{\"1\":{\"1236\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"3029\":1,\"4283\":1,\"4647\":1}}],[\"上下文切换\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4574\":1}}],[\"上下角标\",{\"0\":{\"59\":1,\"3458\":1}}],[\"上有可读事件发生时\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4561\":1}}],[\"上限就为系统定义的进程打开的最大文件描述符个数\",{\"1\":{\"1144\":1,\"1312\":1,\"1480\":1,\"1648\":1,\"4555\":1}}],[\"上面我讲过了\",{\"1\":{\"1895\":1,\"4484\":1}}],[\"上面我们不是说只有\",{\"1\":{\"1877\":1,\"4466\":1}}],[\"上面我们提到过\",{\"1\":{\"715\":1}}],[\"上面我们是从实现和应用角度来说的静态代理\",{\"1\":{\"602\":1,\"3795\":1}}],[\"上面红色的箭头代表的是有变动的分区分配\",{\"1\":{\"1055\":1,\"5231\":1}}],[\"上面这两条语句必须在一个事务中\",{\"1\":{\"2536\":1,\"4898\":1}}],[\"上面这段关于concurrenthashmap的hash实现其实和hashmap如出一辙\",{\"1\":{\"776\":1}}],[\"上面这些例子\",{\"1\":{\"359\":1}}],[\"上面是java\",{\"1\":{\"759\":1}}],[\"上面是一张hashmap中主要的成员变量的图\",{\"1\":{\"672\":1}}],[\"上面的字节码中包含一个\",{\"1\":{\"3002\":1,\"4256\":1}}],[\"上面的三个步骤和单\",{\"1\":{\"1245\":1,\"1413\":1,\"1581\":1,\"1749\":1,\"4656\":1}}],[\"上面的解释不知道你有没有看懂\",{\"1\":{\"738\":1}}],[\"上面的方法主要都是增加和删除方法\",{\"1\":{\"721\":1}}],[\"上源码\",{\"1\":{\"508\":1}}],[\"上述from和to之前发生异常后的异常处理者的位置\",{\"1\":{\"281\":1,\"3669\":1}}],[\"上一篇\",{\"1\":{\"19\":1,\"3418\":1}}],[\"危险容器\",{\"1\":{\"53\":1,\"3452\":1}}],[\"警告容器\",{\"1\":{\"51\":1,\"3450\":1}}],[\"提升系统性能指标\",{\"1\":{\"3199\":1,\"5468\":1}}],[\"提到的来说一下使用线程池的好处\",{\"1\":{\"3035\":1,\"4289\":1}}],[\"提到jvm处理异常的机制\",{\"1\":{\"273\":1,\"3661\":1}}],[\"提前批一面11min\",{\"0\":{\"3178\":1}}],[\"提前加载到缓存\",{\"1\":{\"1963\":1,\"4069\":1}}],[\"提前创建\",{\"1\":{\"898\":1,\"3915\":1}}],[\"提交更新\",{\"1\":{\"2966\":1,\"4220\":1}}],[\"提交失败\",{\"1\":{\"2870\":1,\"4124\":1}}],[\"提交事务消息\",{\"1\":{\"1935\":1,\"4041\":1}}],[\"提交后会清空缓存区域\",{\"1\":{\"982\":1,\"996\":1,\"3999\":1,\"4013\":1}}],[\"提高线程的可管理性\",{\"1\":{\"3038\":1,\"4292\":1}}],[\"提高响应速度\",{\"1\":{\"3037\":1,\"4291\":1}}],[\"提高多表连接查询的效率\",{\"1\":{\"2424\":1,\"4786\":1}}],[\"提高性能\",{\"1\":{\"2340\":1,\"4702\":1}}],[\"提高系统的可维护性\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"提高开发效率\",{\"1\":{\"1808\":1,\"4397\":1}}],[\"提高到o\",{\"1\":{\"778\":1}}],[\"提出了有名管道\",{\"1\":{\"1126\":1,\"1294\":1,\"1462\":1,\"1630\":1,\"4537\":1}}],[\"提取出该分组中的\",{\"1\":{\"2246\":1,\"5328\":1}}],[\"提取查询分组中的\",{\"1\":{\"2244\":1,\"5326\":1}}],[\"提取\",{\"1\":{\"820\":1,\"3837\":1}}],[\"提供远程的feign接口\",{\"1\":{\"3273\":1,\"5542\":1}}],[\"提供事务支持\",{\"1\":{\"2330\":1,\"4692\":1}}],[\"提供与\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"提供\",{\"1\":{\"1860\":1,\"2762\":1,\"4449\":1,\"5124\":1}}],[\"提供的\",{\"1\":{\"1776\":1,\"1857\":1,\"4365\":1,\"4446\":1}}],[\"提供的插件接口\",{\"1\":{\"976\":1,\"3993\":1}}],[\"提供应用程序的信息\",{\"1\":{\"940\":1,\"3957\":1}}],[\"提供了两种锁机制来控制多个线程对共享资源的互斥访问\",{\"1\":{\"2821\":1,\"4075\":1}}],[\"提供了两个命令来生成\",{\"1\":{\"2729\":1,\"5091\":1}}],[\"提供了服务的发现\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"提供了一个专门发送文件的系统调用函数\",{\"1\":{\"1176\":1,\"1344\":1,\"1512\":1,\"1680\":1,\"4587\":1}}],[\"提供了除了构造函数注入和原型注入外的\",{\"1\":{\"875\":1,\"3892\":1}}],[\"提供了fast\",{\"1\":{\"511\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"42\":1,\"3441\":1}}],[\"提示\",{\"1\":{\"124\":1,\"3523\":1}}],[\"提示容器\",{\"1\":{\"49\":1,\"3448\":1}}],[\"=>\",{\"1\":{\"958\":1,\"959\":1,\"960\":1,\"3975\":1,\"3976\":1,\"3977\":1}}],[\"==\",{\"1\":{\"229\":2,\"260\":1,\"539\":1,\"581\":2,\"734\":1,\"781\":1,\"1024\":2,\"1033\":1,\"3043\":4,\"3623\":2,\"3656\":1,\"3774\":2,\"4297\":4,\"5200\":2,\"5209\":1}}],[\"=\",{\"1\":{\"47\":1,\"94\":1,\"229\":7,\"263\":2,\"265\":9,\"271\":2,\"288\":1,\"291\":1,\"293\":3,\"299\":2,\"307\":2,\"313\":2,\"316\":3,\"342\":1,\"349\":1,\"373\":1,\"376\":2,\"406\":9,\"510\":2,\"513\":2,\"515\":1,\"524\":1,\"525\":1,\"531\":3,\"535\":1,\"539\":2,\"547\":3,\"549\":3,\"581\":1,\"638\":1,\"678\":1,\"682\":1,\"686\":4,\"691\":9,\"700\":1,\"704\":10,\"729\":2,\"733\":1,\"735\":2,\"740\":2,\"741\":2,\"761\":1,\"775\":3,\"781\":1,\"782\":1,\"785\":2,\"877\":2,\"919\":1,\"1024\":10,\"1033\":12,\"1095\":3,\"1166\":1,\"1334\":1,\"1502\":1,\"1670\":1,\"2524\":1,\"2525\":1,\"2526\":1,\"2529\":1,\"2531\":2,\"2536\":1,\"2549\":1,\"2832\":1,\"3025\":2,\"3028\":3,\"3041\":1,\"3043\":7,\"3446\":1,\"3493\":1,\"3623\":7,\"3659\":2,\"3676\":1,\"3679\":1,\"3681\":3,\"3687\":2,\"3695\":2,\"3701\":2,\"3704\":3,\"3730\":1,\"3774\":1,\"3894\":2,\"3936\":1,\"4086\":1,\"4279\":2,\"4282\":3,\"4295\":1,\"4297\":7,\"4577\":1,\"4886\":1,\"4887\":1,\"4888\":1,\"4891\":1,\"4893\":2,\"4898\":1,\"4911\":1,\"5200\":10,\"5209\":12}}],[\"aes\",{\"1\":{\"3390\":1}}],[\"a=2\",{\"1\":{\"2872\":1,\"4126\":1}}],[\"aqs队列内部维护的是一个双向链表\",{\"1\":{\"2914\":1,\"4168\":1}}],[\"aqs是依赖内部的同步队列实现\",{\"1\":{\"2913\":1,\"4167\":1}}],[\"aqs是一个抽象类\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"aqs内部实现\",{\"0\":{\"2912\":1,\"4166\":1}}],[\"aqs功能分为两种\",{\"1\":{\"2908\":1,\"4162\":1}}],[\"aqs的两种功能\",{\"0\":{\"2907\":1,\"4161\":1}}],[\"aqs在顶层已经定义好了\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"aqs解决了了之类实现同步器的大量细节问题\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"aqs\",{\"0\":{\"2903\":1,\"2926\":1,\"4157\":1,\"4180\":1},\"1\":{\"2830\":1,\"2906\":1,\"2915\":2,\"2916\":1,\"2927\":1,\"4084\":1,\"4160\":1,\"4169\":2,\"4170\":1,\"4181\":1}}],[\"aof\",{\"0\":{\"2732\":1,\"2738\":1,\"5094\":1,\"5100\":1},\"1\":{\"2722\":1,\"2723\":1,\"2733\":2,\"2735\":4,\"2737\":2,\"2739\":1,\"2740\":1,\"2741\":2,\"2742\":1,\"2743\":2,\"2744\":1,\"2749\":1,\"2750\":1,\"5084\":1,\"5085\":1,\"5095\":2,\"5097\":4,\"5099\":2,\"5101\":1,\"5102\":1,\"5103\":2,\"5104\":1,\"5105\":2,\"5106\":1,\"5111\":1,\"5112\":1}}],[\"aop和ioc概念\",{\"0\":{\"805\":1,\"3822\":1}}],[\"aop\",{\"1\":{\"606\":1,\"619\":1,\"806\":2,\"807\":3,\"831\":1,\"836\":1,\"893\":2,\"895\":2,\"898\":1,\"3799\":1,\"3812\":1,\"3823\":2,\"3824\":3,\"3848\":1,\"3853\":1,\"3910\":2,\"3912\":2,\"3915\":1}}],[\"authorization\",{\"1\":{\"3230\":2,\"5499\":2}}],[\"authorizedfilter\",{\"1\":{\"3223\":1,\"5492\":1}}],[\"author\",{\"1\":{\"3041\":1,\"4295\":1}}],[\"autoinc\",{\"1\":{\"2523\":1,\"2524\":1,\"2525\":1,\"2526\":1,\"2529\":1,\"2531\":1,\"4885\":1,\"4886\":1,\"4887\":1,\"4888\":1,\"4891\":1,\"4893\":1}}],[\"auto\",{\"0\":{\"2514\":1,\"4876\":1},\"1\":{\"909\":1,\"2472\":1,\"2515\":1,\"2516\":1,\"2517\":1,\"2518\":3,\"2519\":2,\"2520\":1,\"2522\":1,\"2523\":1,\"2524\":1,\"3926\":1,\"4834\":1,\"4877\":1,\"4878\":1,\"4879\":1,\"4880\":3,\"4881\":2,\"4882\":1,\"4884\":1,\"4885\":1,\"4886\":1}}],[\"autocommit\",{\"1\":{\"2536\":1,\"4898\":1}}],[\"autoconfigurationimportselector\",{\"1\":{\"909\":1,\"3926\":1}}],[\"autoconfigure在我们的开发中并不会被感知\",{\"1\":{\"956\":1,\"3973\":1}}],[\"autoconfigure\",{\"1\":{\"905\":1,\"955\":1,\"3922\":1,\"3972\":1}}],[\"autocloseable\",{\"1\":{\"262\":1,\"3658\":1}}],[\"automaticallycloseresource\",{\"1\":{\"263\":1,\"3659\":1}}],[\"aufs\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"atomicity\",{\"1\":{\"2567\":1,\"4929\":1}}],[\"atomicinteger\",{\"1\":{\"1024\":3,\"5200\":3}}],[\"atomic\",{\"1\":{\"1863\":1,\"1869\":1,\"4452\":1,\"4458\":1}}],[\"attrs\",{\"0\":{\"66\":1,\"3465\":1}}],[\"availability\",{\"1\":{\"1906\":1,\"1910\":1,\"4495\":1,\"4499\":1}}],[\"available\",{\"1\":{\"1024\":2,\"5200\":2}}],[\"availablepartitionsfortopic\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"availablepartitions\",{\"1\":{\"1024\":4,\"5200\":4}}],[\"avl树调平衡有时候代价较大\",{\"1\":{\"636\":1,\"3728\":1}}],[\"avl树的时间复杂度虽然优于红黑树\",{\"1\":{\"436\":1,\"3761\":1}}],[\"acc\",{\"1\":{\"3011\":2,\"3015\":1,\"3043\":1,\"4265\":2,\"4269\":1,\"4297\":1}}],[\"accept\",{\"0\":{\"2209\":1},\"1\":{\"1225\":1,\"1228\":1,\"1243\":1,\"1260\":1,\"1393\":1,\"1396\":1,\"1411\":1,\"1428\":1,\"1561\":1,\"1564\":1,\"1579\":1,\"1596\":1,\"1729\":1,\"1732\":1,\"1747\":1,\"1764\":1,\"2092\":1,\"2094\":1,\"4636\":1,\"4639\":1,\"4654\":1,\"4671\":1}}],[\"acceptor\",{\"1\":{\"1221\":1,\"1223\":1,\"1227\":1,\"1228\":2,\"1242\":1,\"1243\":2,\"1260\":1,\"1389\":1,\"1391\":1,\"1395\":1,\"1396\":2,\"1410\":1,\"1411\":2,\"1428\":1,\"1557\":1,\"1559\":1,\"1563\":1,\"1564\":2,\"1578\":1,\"1579\":2,\"1596\":1,\"1725\":1,\"1727\":1,\"1731\":1,\"1732\":2,\"1746\":1,\"1747\":2,\"1764\":1,\"4632\":1,\"4634\":1,\"4638\":1,\"4639\":2,\"4653\":1,\"4654\":2,\"4671\":1}}],[\"accesslog\",{\"1\":{\"3316\":2}}],[\"accesscontroller\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"access\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"acquirequeued\",{\"1\":{\"2924\":1,\"4178\":1}}],[\"acquire方法流程总结\",{\"0\":{\"2921\":1,\"4175\":1}}],[\"ack\",{\"1\":{\"2102\":1}}],[\"actuator是spring\",{\"1\":{\"962\":1,\"3979\":1}}],[\"actuator组件中已经内置了非常多的endpoint\",{\"1\":{\"940\":1,\"3957\":1}}],[\"actuator的核心是端点\",{\"1\":{\"940\":1,\"3957\":1}}],[\"actuator轻松实现应用程序的监控治理\",{\"1\":{\"940\":1,\"3957\":1}}],[\"actuator`\",{\"1\":{\"939\":1,\"3956\":1}}],[\"actuator\",{\"1\":{\"938\":1,\"939\":1,\"940\":1,\"3955\":1,\"3956\":1,\"3957\":1}}],[\"acid事务\",{\"0\":{\"2563\":1,\"4925\":1}}],[\"acid\",{\"1\":{\"856\":1,\"3873\":1}}],[\"abortpolicy\",{\"1\":{\"3041\":1,\"3057\":1,\"3061\":1,\"4295\":1,\"4311\":1,\"4315\":1}}],[\"aba\",{\"0\":{\"2885\":1,\"4139\":1},\"1\":{\"2886\":1,\"2902\":1,\"4140\":1,\"4156\":1}}],[\"abc\",{\"1\":{\"2442\":1,\"4804\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"2830\":1,\"2906\":1,\"2927\":1,\"2993\":1,\"4084\":1,\"4160\":1,\"4181\":1,\"4247\":1}}],[\"abstractpartitionassignor\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"abstarctfactory\",{\"1\":{\"592\":1,\"3785\":1}}],[\"abtest\",{\"1\":{\"877\":1,\"3894\":1}}],[\"advice\",{\"1\":{\"836\":1,\"3853\":1}}],[\"addwaiter\",{\"1\":{\"2923\":1,\"4177\":1}}],[\"address\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"addall\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"add\",{\"1\":{\"349\":1,\"535\":1,\"537\":2,\"539\":1}}],[\"addsuppressed\",{\"1\":{\"265\":2}}],[\"addelapsedtimefrom\",{\"1\":{\"229\":1,\"3623\":1}}],[\"addtime\",{\"1\":{\"229\":1,\"3623\":1}}],[\"async注解\",{\"1\":{\"3149\":1,\"3252\":1,\"5429\":1,\"5521\":1}}],[\"assignment\",{\"1\":{\"1033\":4,\"5209\":4}}],[\"assign\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"assembly\",{\"1\":{\"909\":1,\"3926\":1}}],[\"aspect\",{\"1\":{\"806\":1,\"3823\":1}}],[\"astore\",{\"1\":{\"276\":1,\"3664\":1}}],[\"any\",{\"1\":{\"510\":1}}],[\"and\",{\"1\":{\"510\":1,\"775\":1,\"2862\":1,\"2900\":1,\"2916\":1,\"3043\":1,\"4116\":1,\"4154\":1,\"4170\":1,\"4297\":1}}],[\"an\",{\"1\":{\"510\":1}}],[\"aliyunoss\",{\"1\":{\"3217\":1,\"3248\":1,\"5486\":1,\"5517\":1}}],[\"alibaba\",{\"1\":{\"3196\":1,\"5465\":1}}],[\"alter\",{\"1\":{\"2453\":1,\"4815\":1}}],[\"alternative\",{\"1\":{\"760\":1}}],[\"algorithm\",{\"1\":{\"767\":1,\"3326\":1}}],[\"allow\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"allowcorethreadtimeout\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"allkeys\",{\"1\":{\"2766\":1,\"2767\":1,\"2771\":1,\"5128\":1,\"5129\":1,\"5133\":1}}],[\"all\",{\"1\":{\"510\":2}}],[\"aload\",{\"1\":{\"276\":1,\"3664\":1}}],[\"amortized\",{\"1\":{\"401\":1}}],[\"argument\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"args\",{\"1\":{\"265\":1,\"614\":2,\"622\":2,\"877\":1,\"3041\":1,\"3807\":2,\"3815\":2,\"3894\":1,\"4295\":1}}],[\"arp\",{\"0\":{\"2229\":1,\"5311\":1},\"1\":{\"2230\":2,\"2231\":2,\"2232\":2,\"2233\":1,\"2238\":1,\"2239\":1,\"2240\":2,\"2241\":1,\"2242\":2,\"2244\":2,\"2245\":3,\"2246\":1,\"2247\":1,\"2249\":3,\"2251\":1,\"2253\":1,\"2257\":1,\"2258\":1,\"5312\":2,\"5313\":2,\"5314\":2,\"5315\":1,\"5320\":1,\"5321\":1,\"5322\":2,\"5323\":1,\"5324\":2,\"5326\":2,\"5327\":3,\"5328\":1,\"5329\":1,\"5331\":3,\"5333\":1,\"5335\":1,\"5339\":1,\"5340\":1}}],[\"artifactid>\",{\"1\":{\"930\":1,\"3947\":1}}],[\"article\",{\"1\":{\"328\":1,\"412\":1,\"629\":1,\"658\":1,\"970\":1,\"1003\":1,\"1056\":1,\"1065\":1,\"1079\":1,\"1954\":1,\"2638\":1,\"2817\":1,\"2833\":1,\"2995\":1,\"3259\":1,\"3260\":1,\"3261\":1,\"3401\":2,\"3633\":1,\"3716\":1,\"3721\":1,\"3987\":1,\"4020\":1,\"4060\":1,\"4087\":1,\"4249\":1,\"5000\":1,\"5179\":1,\"5232\":1,\"5241\":1,\"5255\":1,\"5528\":1,\"5529\":1,\"5530\":1}}],[\"arrayblockingqueue<>\",{\"1\":{\"3041\":1,\"4295\":1}}],[\"arrayblockingqueue\",{\"1\":{\"3041\":1,\"4295\":1}}],[\"arraycopy\",{\"1\":{\"535\":1,\"539\":1,\"547\":1,\"549\":1}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"535\":1,\"549\":1}}],[\"array\",{\"1\":{\"510\":2,\"556\":1,\"1095\":3,\"1096\":1,\"1097\":2}}],[\"arraylist<topicpartition>\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"arraylist<string>\",{\"1\":{\"531\":1}}],[\"arraylist类的remove方法内容如下\",{\"1\":{\"546\":1}}],[\"arraylist自动扩大容量为原来的1\",{\"1\":{\"524\":1}}],[\"arraylist是原来的50\",{\"1\":{\"556\":1}}],[\"arraylist是0\",{\"1\":{\"524\":1}}],[\"arraylist是非同步实现的一个单线程下较为高效的数据结构\",{\"1\":{\"519\":1}}],[\"arraylist非同步\",{\"1\":{\"523\":1}}],[\"arraylist的add方法内容如下\",{\"1\":{\"538\":1}}],[\"arraylist的存储结构定义为transient\",{\"1\":{\"519\":1}}],[\"arraylist的实现\",{\"1\":{\"511\":1}}],[\"arraylist只通过一个修改记录字段提供弱一致性\",{\"1\":{\"519\":1}}],[\"arraylist需要135字节\",{\"1\":{\"517\":1}}],[\"arraylist实现了writeobject方法\",{\"1\":{\"511\":1}}],[\"arraylist使用了transient关键字进行存储优化\",{\"0\":{\"507\":1}}],[\"arraylist和linkedlist和vector的区别\",{\"0\":{\"497\":1}}],[\"arraylist\",{\"0\":{\"468\":1},\"1\":{\"500\":1,\"509\":1,\"524\":1}}],[\"arraydeque效率更高一些\",{\"1\":{\"489\":1}}],[\"arraydeque和linkedlist都实现了deque接口\",{\"1\":{\"488\":1}}],[\"arraydeque实现了双端队列\",{\"1\":{\"484\":1}}],[\"arraydeque<>\",{\"1\":{\"376\":1,\"406\":1}}],[\"arraydeque<integer>\",{\"1\":{\"342\":1,\"373\":1}}],[\"arraydeque\",{\"0\":{\"483\":1},\"1\":{\"340\":1,\"377\":1,\"378\":1,\"379\":1,\"400\":1,\"409\":1}}],[\"arithmeticexception\",{\"1\":{\"260\":1,\"3656\":1}}],[\"are\",{\"1\":{\"217\":1,\"1024\":1,\"3043\":3,\"3611\":1,\"4297\":3,\"5200\":1}}],[\"area\",{\"1\":{\"179\":1,\"182\":1,\"3573\":1,\"3576\":1}}],[\"ap\",{\"1\":{\"1918\":3,\"1920\":1,\"3259\":1,\"3260\":1,\"3261\":1,\"4507\":3,\"4509\":1,\"5528\":1,\"5529\":1,\"5530\":1}}],[\"appjwtutil\",{\"1\":{\"3223\":1,\"5492\":1}}],[\"appendonly\",{\"1\":{\"2733\":1,\"2734\":1,\"2737\":1,\"5095\":1,\"5096\":1,\"5099\":1}}],[\"append\",{\"1\":{\"2722\":1,\"2733\":1,\"2740\":1,\"5084\":1,\"5095\":1,\"5102\":1}}],[\"apphttpcodeenum\",{\"1\":{\"919\":8,\"920\":1,\"3936\":8,\"3937\":1}}],[\"application配置文件这个容易理解\",{\"1\":{\"923\":1,\"3940\":1}}],[\"application\",{\"1\":{\"901\":2,\"3918\":2}}],[\"applicationcontext\",{\"1\":{\"830\":1,\"3847\":1}}],[\"appclassloader\",{\"1\":{\"210\":1,\"3604\":1}}],[\"api服务网关\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"api要提供这两种线程安全的list的实现方式呢\",{\"1\":{\"529\":1}}],[\"api\",{\"1\":{\"216\":1,\"236\":1,\"2681\":1,\"2683\":1,\"3610\":1,\"3630\":1,\"5043\":1,\"5045\":1}}],[\"a\",{\"1\":{\"47\":1,\"263\":1,\"353\":1,\"356\":1,\"360\":2,\"362\":2,\"510\":1,\"513\":1,\"877\":1,\"879\":4,\"885\":3,\"889\":2,\"890\":2,\"894\":1,\"1024\":2,\"1916\":1,\"1917\":1,\"1919\":2,\"1921\":1,\"2237\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":2,\"2243\":1,\"2244\":3,\"2246\":1,\"2249\":1,\"2250\":3,\"2251\":1,\"2253\":2,\"2254\":4,\"2255\":1,\"2256\":1,\"2434\":3,\"2494\":1,\"2496\":1,\"2568\":6,\"2579\":4,\"2580\":2,\"2584\":3,\"2588\":2,\"2589\":1,\"2874\":1,\"2876\":1,\"2886\":2,\"2890\":1,\"3043\":2,\"3446\":1,\"3659\":1,\"3894\":1,\"3896\":4,\"3902\":3,\"3906\":2,\"3907\":2,\"3911\":1,\"4128\":1,\"4130\":1,\"4140\":2,\"4144\":1,\"4297\":2,\"4505\":1,\"4506\":1,\"4508\":2,\"4510\":1,\"4796\":3,\"4856\":1,\"4858\":1,\"4930\":6,\"4941\":4,\"4942\":2,\"4946\":3,\"4950\":2,\"4951\":1,\"5200\":2,\"5319\":1,\"5321\":1,\"5322\":1,\"5323\":1,\"5324\":2,\"5325\":1,\"5326\":3,\"5328\":1,\"5331\":1,\"5332\":3,\"5333\":1,\"5335\":2,\"5336\":4,\"5337\":1,\"5338\":1}}],[\"与客户端系统消息通知\",{\"1\":{\"3198\":1,\"5467\":1}}],[\"与此线程有关的inheritablethreadlocal值\",{\"1\":{\"3025\":1,\"4279\":1}}],[\"与此线程有关的threadlocal值\",{\"1\":{\"3025\":1,\"4279\":1}}],[\"与快照持久化相比\",{\"1\":{\"2733\":1,\"5095\":1}}],[\"与管道\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4539\":1}}],[\"与代理类对象调用的方法相对应\",{\"1\":{\"614\":1,\"3807\":1}}],[\"与arraylist和linkedlist不同\",{\"1\":{\"487\":1}}],[\"与\",{\"1\":{\"46\":1,\"1782\":1,\"2823\":1,\"3445\":1,\"4077\":1,\"4371\":1,\"5275\":1}}],[\"v的实际值是相等的\",{\"1\":{\"2874\":1,\"4128\":1}}],[\"visible\",{\"1\":{\"2628\":1,\"4990\":1}}],[\"view时\",{\"1\":{\"2626\":1,\"4988\":1}}],[\"view\",{\"1\":{\"827\":1,\"2462\":2,\"2463\":1,\"2613\":6,\"2615\":3,\"2622\":2,\"2626\":1,\"2627\":1,\"3844\":1,\"4824\":2,\"4825\":1,\"4975\":6,\"4977\":3,\"4984\":2,\"4988\":1,\"4989\":1}}],[\"viewresolver\",{\"1\":{\"826\":2,\"827\":1,\"3843\":2,\"3844\":1}}],[\"v对\",{\"1\":{\"750\":1}}],[\"v对的键值定位到他应该保存在数组的哪个下标中\",{\"1\":{\"744\":1}}],[\"v在链表数组中的位置的\",{\"1\":{\"723\":1}}],[\"volitile关键字原理\",{\"0\":{\"2935\":1,\"4189\":1}}],[\"volatile解决的是多线程共享变量可见性问题\",{\"1\":{\"2960\":1,\"4214\":1}}],[\"volatile总结\",{\"0\":{\"2959\":1,\"4213\":1}}],[\"volatile防止指令重排序具体步骤\",{\"1\":{\"2952\":1,\"4206\":1}}],[\"volatile是通过内存屏障来防止指令重排序的\",{\"1\":{\"2946\":1,\"4200\":1}}],[\"volatile如何防止指令重排序\",{\"0\":{\"2945\":1,\"4199\":1}}],[\"volatile的作用\",{\"0\":{\"2942\":1,\"4196\":1}}],[\"volatile\",{\"1\":{\"581\":1,\"2763\":1,\"2764\":1,\"2765\":1,\"2770\":1,\"3774\":1,\"5125\":1,\"5126\":1,\"5127\":1,\"5132\":1}}],[\"void\",{\"1\":{\"257\":1,\"263\":1,\"265\":1,\"274\":1,\"276\":1,\"510\":1,\"513\":1,\"535\":3,\"537\":1,\"539\":3,\"877\":1,\"2998\":1,\"3009\":1,\"3028\":1,\"3041\":1,\"3653\":1,\"3659\":1,\"3662\":1,\"3664\":1,\"3894\":1,\"4252\":1,\"4263\":1,\"4282\":1,\"4295\":1}}],[\"vs\",{\"1\":{\"397\":1}}],[\"vector锁定的是this对象\",{\"1\":{\"563\":1}}],[\"vector缺省情况下自动增长原来一倍的数组长度\",{\"1\":{\"556\":1}}],[\"vector缺省情况下增长原来一倍的数组长度\",{\"1\":{\"524\":1}}],[\"vector使用同步方法实现\",{\"1\":{\"541\":1}}],[\"vector的实现\",{\"1\":{\"534\":1,\"548\":1}}],[\"vector的占用的字节比arraylist要多\",{\"1\":{\"516\":1}}],[\"vector<string>\",{\"1\":{\"531\":2}}],[\"vector是java\",{\"1\":{\"527\":1}}],[\"vector是多线程环境下更为可靠的数据结构\",{\"1\":{\"520\":1}}],[\"vector指定了initialcapacity\",{\"1\":{\"525\":1}}],[\"vector同步\",{\"1\":{\"523\":1}}],[\"vector需要243字节\",{\"1\":{\"517\":1}}],[\"vector也实现了writeobject方法\",{\"1\":{\"514\":1}}],[\"vector每次请求其大小的双倍空间\",{\"1\":{\"504\":1}}],[\"vector和arraylist在更多元素添加进来时会请求更大的空间\",{\"1\":{\"504\":1}}],[\"vector\",{\"1\":{\"344\":1,\"345\":2,\"347\":2,\"351\":1,\"384\":2,\"392\":1,\"503\":1,\"512\":1,\"513\":1,\"525\":1}}],[\"verification\",{\"1\":{\"190\":1,\"3584\":1}}],[\"v\",{\"0\":{\"5575\":1,\"5588\":1},\"1\":{\"276\":2,\"1122\":1,\"1290\":1,\"1458\":1,\"1626\":1,\"2866\":1,\"2872\":1,\"2874\":2,\"2876\":2,\"2999\":1,\"3664\":2,\"4120\":1,\"4126\":1,\"4128\":2,\"4130\":2,\"4253\":1,\"4533\":1}}],[\"varchar\",{\"1\":{\"2366\":1,\"2376\":1,\"4728\":1,\"4738\":1}}],[\"variant\",{\"1\":{\"775\":1}}],[\"variable\",{\"1\":{\"44\":1,\"3443\":1}}],[\"valuebytes\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"value\",{\"1\":{\"260\":3,\"982\":1,\"1024\":1,\"2348\":1,\"2349\":2,\"2363\":1,\"2687\":1,\"2691\":1,\"2706\":1,\"2710\":1,\"2780\":1,\"3028\":3,\"3030\":1,\"3032\":1,\"3065\":1,\"3066\":1,\"3067\":1,\"3090\":1,\"3091\":1,\"3092\":1,\"3291\":1,\"3656\":3,\"3999\":1,\"4282\":3,\"4284\":1,\"4286\":1,\"4319\":1,\"4320\":1,\"4321\":1,\"4344\":1,\"4345\":1,\"4346\":1,\"4710\":1,\"4711\":2,\"4725\":1,\"5049\":1,\"5053\":1,\"5068\":1,\"5072\":1,\"5142\":1,\"5200\":1,\"5560\":1}}],[\"vue\",{\"0\":{\"109\":1,\"3508\":1}}],[\"vuepress\",{\"0\":{\"38\":1,\"3437\":1},\"1\":{\"28\":1,\"29\":1,\"33\":1,\"35\":1,\"37\":1,\"39\":1,\"40\":1,\"42\":1,\"126\":1,\"3427\":1,\"3428\":1,\"3432\":1,\"3434\":1,\"3436\":1,\"3438\":1,\"3439\":1,\"3441\":1,\"3525\":1}}],[\"post\",{\"1\":{\"3318\":1}}],[\"pool\",{\"1\":{\"3043\":2,\"4297\":2}}],[\"poll\",{\"1\":{\"381\":1,\"505\":1,\"1136\":1,\"1137\":1,\"1139\":1,\"1140\":2,\"1141\":1,\"1156\":1,\"1158\":1,\"1304\":1,\"1305\":1,\"1307\":1,\"1308\":2,\"1309\":1,\"1324\":1,\"1326\":1,\"1472\":1,\"1473\":1,\"1475\":1,\"1476\":2,\"1477\":1,\"1492\":1,\"1494\":1,\"1640\":1,\"1641\":1,\"1643\":1,\"1644\":2,\"1645\":1,\"1660\":1,\"1662\":1,\"4547\":1,\"4548\":1,\"4550\":1,\"4551\":2,\"4552\":1,\"4567\":1,\"4569\":1}}],[\"ptr\",{\"1\":{\"2615\":1,\"2619\":1,\"4977\":1,\"4981\":1}}],[\"ps\",{\"1\":{\"2385\":1,\"4747\":1}}],[\"pipes\",{\"1\":{\"1125\":1,\"1126\":1,\"1293\":1,\"1294\":1,\"1461\":1,\"1462\":1,\"1629\":1,\"1630\":1,\"4536\":1,\"4537\":1}}],[\"p\",{\"1\":{\"1122\":1,\"1290\":1,\"1458\":1,\"1626\":1,\"1916\":2,\"1917\":1,\"1921\":1,\"2904\":1,\"3401\":1,\"4158\":1,\"4505\":2,\"4506\":1,\"4510\":1,\"4533\":1}}],[\"pc\",{\"1\":{\"1056\":1,\"1065\":2,\"5232\":1,\"5241\":2}}],[\"png\",{\"1\":{\"1031\":1,\"1035\":1,\"1042\":1,\"1044\":1,\"1054\":1,\"1099\":1,\"5207\":1,\"5211\":1,\"5218\":1,\"5220\":1,\"5230\":1}}],[\"plus作为持久层提升开发效率\",{\"1\":{\"3197\":1,\"5466\":1}}],[\"plugin\",{\"1\":{\"42\":1,\"3441\":1}}],[\"platformtransactionmanager\",{\"1\":{\"846\":1,\"3863\":1}}],[\"per\",{\"1\":{\"3305\":1}}],[\"performs\",{\"1\":{\"513\":1}}],[\"perfcounter\",{\"1\":{\"229\":3,\"3623\":3}}],[\"peek\",{\"1\":{\"381\":1,\"505\":1}}],[\"purge\",{\"1\":{\"2622\":1,\"2634\":1,\"4984\":1,\"4996\":1}}],[\"pushdown\",{\"1\":{\"2417\":1,\"4779\":1}}],[\"push\",{\"1\":{\"349\":2,\"2273\":1,\"5355\":1}}],[\"putifabsent\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"putfields\",{\"1\":{\"513\":1}}],[\"putfield\",{\"1\":{\"513\":1}}],[\"put\",{\"1\":{\"288\":1,\"291\":1,\"513\":3,\"686\":1,\"704\":13,\"1033\":1,\"3676\":1,\"3679\":1,\"5209\":1}}],[\"public\",{\"1\":{\"126\":1,\"257\":1,\"260\":1,\"263\":1,\"265\":1,\"274\":1,\"276\":1,\"293\":1,\"299\":1,\"535\":2,\"537\":1,\"539\":1,\"545\":1,\"547\":1,\"549\":1,\"581\":2,\"612\":1,\"614\":2,\"622\":2,\"877\":2,\"919\":3,\"920\":3,\"1024\":1,\"1033\":1,\"1095\":1,\"2829\":1,\"2832\":1,\"2998\":2,\"3009\":2,\"3025\":1,\"3028\":1,\"3041\":2,\"3043\":1,\"3310\":1,\"3525\":1,\"3653\":1,\"3656\":1,\"3659\":1,\"3662\":1,\"3664\":1,\"3681\":1,\"3687\":1,\"3774\":2,\"3805\":1,\"3807\":2,\"3815\":2,\"3894\":2,\"3936\":3,\"3937\":3,\"4083\":1,\"4086\":1,\"4252\":2,\"4263\":2,\"4279\":1,\"4282\":1,\"4295\":2,\"4297\":1,\"5200\":1,\"5209\":1}}],[\"passw0rd\",{\"1\":{\"3360\":1}}],[\"password=e10adc3949ba59abbe56e057f20f883e\",{\"1\":{\"3345\":1}}],[\"password=123456\",{\"1\":{\"3339\":1}}],[\"password\",{\"1\":{\"3341\":1,\"3347\":1}}],[\"package\",{\"1\":{\"3041\":1,\"4295\":1}}],[\"path\",{\"1\":{\"2214\":1,\"2307\":1,\"5296\":1}}],[\"pattern\",{\"1\":{\"575\":1,\"3768\":1}}],[\"paxos\",{\"1\":{\"1869\":1,\"1871\":1,\"1878\":1,\"4458\":1,\"4460\":1,\"4467\":1}}],[\"parkandcheckinterrupt\",{\"1\":{\"2924\":1,\"4178\":1}}],[\"partial\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"partitionassignor接口用于用户定义实现分区分配算法\",{\"1\":{\"1028\":1,\"5204\":1}}],[\"partitionspertopic\",{\"1\":{\"1033\":2,\"5209\":2}}],[\"partitionsfortopic\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"partitions\",{\"1\":{\"1024\":3,\"1033\":3,\"5200\":3,\"5209\":3}}],[\"partition\",{\"1\":{\"1024\":4,\"1860\":1,\"1906\":1,\"1911\":1,\"1916\":1,\"3210\":2,\"4449\":1,\"4495\":1,\"4500\":1,\"4505\":1,\"5200\":4,\"5479\":2}}],[\"part\",{\"1\":{\"1024\":2,\"5200\":2}}],[\"parator对象\",{\"1\":{\"447\":1,\"798\":1}}],[\"parameters\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"paramvalues\",{\"1\":{\"317\":1,\"3705\":1}}],[\"paramtypes\",{\"1\":{\"317\":1,\"323\":2,\"325\":2,\"3705\":1,\"3711\":2,\"3713\":2}}],[\"param\",{\"1\":{\"293\":3,\"920\":2,\"3043\":7,\"3681\":3,\"3937\":2,\"4297\":7}}],[\"parent主要有如下作用\",{\"1\":{\"947\":1,\"3964\":1}}],[\"parent有什么作用\",{\"1\":{\"946\":1,\"3963\":1}}],[\"parent\",{\"1\":{\"229\":2,\"947\":1,\"3623\":2,\"3964\":1}}],[\"parents\",{\"1\":{\"226\":1,\"3620\":1}}],[\"page45理解\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"page\",{\"0\":{\"2\":1},\"1\":{\"488\":1}}],[\"pre\",{\"1\":{\"2919\":1,\"2924\":1,\"4173\":1,\"4178\":1}}],[\"prev\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"prefix\",{\"1\":{\"2388\":1,\"4750\":1}}],[\"prehandler\",{\"1\":{\"819\":1,\"3836\":1}}],[\"preparation\",{\"1\":{\"190\":1,\"3584\":1}}],[\"protocol\",{\"1\":{\"2230\":1,\"5312\":1}}],[\"protected\",{\"1\":{\"214\":1,\"215\":1,\"229\":1,\"3608\":1,\"3609\":1,\"3623\":1}}],[\"processor三种通道\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"processor\",{\"1\":{\"1246\":1,\"1247\":1,\"1414\":1,\"1415\":1,\"1582\":1,\"1583\":1,\"1750\":1,\"1751\":1,\"4657\":1,\"4658\":1}}],[\"producerid\",{\"1\":{\"1063\":1,\"5239\":1}}],[\"project\",{\"0\":{\"5587\":1},\"1\":{\"905\":1,\"3922\":1}}],[\"proposal\",{\"1\":{\"1881\":1,\"4470\":1}}],[\"propagation\",{\"1\":{\"860\":1,\"861\":1,\"862\":1,\"864\":1,\"865\":1,\"866\":1,\"868\":2,\"3877\":1,\"3878\":1,\"3879\":1,\"3881\":1,\"3882\":1,\"3883\":1,\"3885\":2}}],[\"properties中添加context\",{\"1\":{\"935\":1,\"3952\":1}}],[\"properties\",{\"1\":{\"901\":1,\"3918\":1}}],[\"proper\",{\"1\":{\"510\":2}}],[\"programming\",{\"1\":{\"806\":1,\"3823\":1}}],[\"proxy代理实例\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"proxy\",{\"1\":{\"610\":1,\"611\":1,\"614\":2,\"622\":2,\"807\":2,\"3803\":1,\"3804\":1,\"3807\":2,\"3815\":2,\"3824\":2}}],[\"principles\",{\"1\":{\"909\":1,\"3926\":1}}],[\"printstacktrace\",{\"1\":{\"274\":1,\"276\":1,\"920\":1,\"3662\":1,\"3664\":1,\"3937\":1}}],[\"println\",{\"1\":{\"265\":1,\"271\":2,\"406\":2,\"686\":2,\"691\":3,\"704\":8,\"2998\":1,\"3009\":1,\"4252\":1,\"4263\":1}}],[\"private\",{\"1\":{\"510\":1,\"513\":1,\"535\":1,\"539\":2,\"581\":2,\"760\":1,\"775\":1,\"877\":2,\"919\":1,\"1024\":1,\"3774\":2,\"3894\":2,\"3936\":1,\"5200\":1}}],[\"priorityqueue实现了队列接口queue\",{\"1\":{\"491\":1}}],[\"priorityqueue\",{\"0\":{\"490\":1}}],[\"中带上这个\",{\"1\":{\"3226\":1,\"5495\":1}}],[\"中国邮政储蓄银行\",{\"0\":{\"3154\":1,\"5434\":1}}],[\"中午休息一小时\",{\"1\":{\"3152\":1,\"5432\":1}}],[\"中科全安\",{\"0\":{\"3109\":1,\"5389\":1}}],[\"中强制线程池不允许使用\",{\"1\":{\"3088\":1,\"4342\":1}}],[\"中自带的threadlocal类正是为了解决这样的问题\",{\"1\":{\"3021\":1,\"4275\":1}}],[\"中实现的\",{\"1\":{\"2830\":1,\"4084\":1}}],[\"中断\",{\"1\":{\"2828\":1,\"4082\":1}}],[\"中缓存大量无效的\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"中去并设置过期时间\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"中任意选择数据淘汰\",{\"1\":{\"2765\":1,\"2767\":1,\"5127\":1,\"5129\":1}}],[\"中挑选最不经常使用的数据淘汰\",{\"1\":{\"2770\":1,\"5132\":1}}],[\"中挑选最近最少使用的数据淘汰\",{\"1\":{\"2763\":1,\"5125\":1}}],[\"中挑选将要过期的数据淘汰\",{\"1\":{\"2764\":1,\"5126\":1}}],[\"中只存\",{\"1\":{\"2761\":1,\"5123\":1}}],[\"中最小的事务\",{\"1\":{\"2625\":1,\"4987\":1}}],[\"中会有\",{\"1\":{\"3229\":1,\"5498\":1}}],[\"中会发生数据不一致的问题\",{\"1\":{\"2529\":1,\"4891\":1}}],[\"中会维护队列\",{\"1\":{\"1894\":1,\"4483\":1}}],[\"中长链接的升级版本\",{\"1\":{\"2270\":1,\"5352\":1}}],[\"中主要使用\",{\"1\":{\"2267\":1,\"5349\":1}}],[\"中新加入了大量的状态码\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"中间件\",{\"1\":{\"1953\":1,\"4059\":1}}],[\"中生成后需要\",{\"1\":{\"1881\":1,\"4470\":1}}],[\"中还定义了一个\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"中更新了\",{\"1\":{\"1877\":1,\"4466\":1}}],[\"中三个主要的角色\",{\"1\":{\"1871\":1,\"4460\":1}}],[\"中下载镜像\",{\"1\":{\"1785\":1,\"4374\":1}}],[\"中苏醒\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4561\":1}}],[\"中苏醒一次\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4560\":1}}],[\"中传递参数也相同即最终执行\",{\"1\":{\"984\":1,\"4001\":1}}],[\"中两次执行相同的\",{\"1\":{\"982\":1,\"3999\":1}}],[\"中代码处理的流程\",{\"1\":{\"885\":1,\"3902\":1}}],[\"中如果像我们例子里那么处理\",{\"1\":{\"884\":1,\"3901\":1}}],[\"中了\",{\"1\":{\"879\":1,\"3896\":1}}],[\"中也是用到了适配器模式适配\",{\"1\":{\"836\":1,\"3853\":1}}],[\"中也是有区别的\",{\"1\":{\"722\":1}}],[\"中增加创建产品的接⼝\",{\"1\":{\"592\":1,\"3785\":1}}],[\"中介者\",{\"1\":{\"577\":1,\"3770\":1}}],[\"中定义的方法\",{\"1\":{\"382\":1}}],[\"中有很多方法\",{\"1\":{\"382\":1}}],[\"中是正确的\",{\"1\":{\"348\":1}}],[\"中查询\",{\"1\":{\"339\":1}}],[\"中内置了三个重要的\",{\"1\":{\"207\":1,\"3601\":1}}],[\"中\",{\"1\":{\"202\":1,\"205\":1,\"228\":1,\"233\":1,\"824\":1,\"833\":1,\"1105\":1,\"1108\":2,\"1176\":1,\"1273\":1,\"1276\":2,\"1344\":1,\"1441\":1,\"1444\":2,\"1512\":1,\"1609\":1,\"1612\":2,\"1680\":1,\"1863\":1,\"2358\":1,\"2393\":1,\"2708\":1,\"2716\":1,\"2735\":1,\"2879\":1,\"3004\":1,\"3029\":1,\"3229\":1,\"3596\":1,\"3599\":1,\"3622\":1,\"3627\":1,\"3841\":1,\"3850\":1,\"4133\":1,\"4258\":1,\"4283\":1,\"4452\":1,\"4516\":1,\"4519\":2,\"4587\":1,\"4720\":1,\"4755\":1,\"5070\":1,\"5078\":1,\"5097\":1,\"5498\":1}}],[\"中设置\",{\"1\":{\"151\":1,\"155\":1,\"901\":1,\"3550\":1,\"3918\":1}}],[\"中设置页面信息\",{\"1\":{\"117\":1,\"3516\":1}}],[\"中使用\",{\"1\":{\"44\":1,\"3443\":1}}],[\"中的监视器是什么\",{\"1\":{\"3126\":1,\"5406\":1}}],[\"中的实际值相同时\",{\"1\":{\"2876\":1,\"4130\":1}}],[\"中的锁是非公平的\",{\"1\":{\"2825\":1,\"4079\":1}}],[\"中的数据会被频繁被删除\",{\"1\":{\"3205\":1,\"5474\":1}}],[\"中的数据都是热点数据\",{\"1\":{\"2761\":1,\"5123\":1}}],[\"中的数据的命令\",{\"1\":{\"2735\":1,\"5097\":1}}],[\"中的历史版本\",{\"1\":{\"2615\":1,\"4977\":1}}],[\"中的主键索引就属于聚簇索引\",{\"1\":{\"2368\":1,\"2392\":1,\"4730\":1,\"4754\":1}}],[\"中的域名都是用句点来分隔的\",{\"1\":{\"2285\":1,\"5367\":1}}],[\"中的三个角色\",{\"0\":{\"1870\":1,\"4459\":1}}],[\"中的事物传播行为\",{\"0\":{\"857\":1,\"3874\":1}}],[\"中的事务隔离级别\",{\"0\":{\"850\":1,\"3867\":1}}],[\"中的事务的理解\",{\"0\":{\"838\":1,\"3855\":1}}],[\"中的模型数据\",{\"1\":{\"820\":1,\"3837\":1}}],[\"中的\",{\"0\":{\"343\":1},\"1\":{\"40\":1,\"344\":1,\"351\":1,\"587\":1,\"599\":1,\"605\":1,\"619\":1,\"623\":1,\"832\":1,\"982\":1,\"1114\":1,\"1117\":1,\"1282\":1,\"1285\":1,\"1450\":1,\"1453\":1,\"1618\":1,\"1621\":1,\"1883\":1,\"1892\":1,\"2618\":1,\"2970\":1,\"2979\":1,\"2985\":1,\"3439\":1,\"3780\":1,\"3792\":1,\"3798\":1,\"3812\":1,\"3816\":1,\"3849\":1,\"3999\":1,\"4224\":1,\"4233\":1,\"4239\":1,\"4472\":1,\"4481\":1,\"4525\":1,\"4528\":1,\"4980\":1}}],[\"中很重要的一个概念\",{\"1\":{\"35\":1,\"3434\":1}}],[\"请注意\",{\"1\":{\"1891\":1,\"2214\":1,\"2307\":1,\"4480\":1,\"5296\":1}}],[\"请求服务端并携带\",{\"1\":{\"3230\":1,\"5499\":1}}],[\"请求数据库写数据到缓存之前\",{\"1\":{\"2798\":1,\"5160\":1}}],[\"请求与当前资源的规定冲突\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"请求的\",{\"1\":{\"2794\":1,\"2800\":1,\"2801\":1,\"5156\":1,\"5162\":1,\"5163\":1}}],[\"请求的结果\",{\"1\":{\"2262\":1,\"5344\":1}}],[\"请求的提案\",{\"1\":{\"1897\":1,\"4486\":1}}],[\"请求\",{\"1\":{\"1850\":1,\"1897\":1,\"2218\":1,\"2277\":1,\"2297\":1,\"2311\":1,\"4439\":1,\"4486\":1,\"5300\":1,\"5359\":1,\"5379\":1}}],[\"请求合并\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"请求缓存\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"请求被\",{\"1\":{\"817\":1,\"3834\":1}}],[\"请使用绝对链接\",{\"1\":{\"126\":1,\"3525\":1}}],[\"请阅读\",{\"1\":{\"40\":1,\"3439\":1}}],[\"请先阅读\",{\"1\":{\"31\":1,\"3430\":1}}],[\"对称性加密通常在消息发送方需要加密大量数据时使用\",{\"1\":{\"3397\":1}}],[\"对称密码算法又叫传统密码算法\",{\"1\":{\"3390\":1}}],[\"对称加密的缺点\",{\"1\":{\"3398\":1}}],[\"对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性\",{\"1\":{\"3397\":1}}],[\"对称加密优点\",{\"1\":{\"3397\":1}}],[\"对称加密和非对称加密有哪些优缺点\",{\"1\":{\"3387\":1}}],[\"对称加密\",{\"1\":{\"3387\":1}}],[\"对连接后的值进行散列\",{\"1\":{\"3375\":1,\"3381\":1}}],[\"对密码加密\",{\"0\":{\"3336\":1}}],[\"对安全性要求较高的场合\",{\"1\":{\"3334\":1}}],[\"对原文做一丁点儿改动\",{\"1\":{\"3331\":1}}],[\"对原sql通过limit来进行分页的效果\",{\"1\":{\"969\":1,\"3986\":1}}],[\"对冷数据\",{\"1\":{\"3302\":1,\"5571\":1}}],[\"对面不满意\",{\"1\":{\"3182\":1}}],[\"对工作地点的看法\",{\"1\":{\"3157\":1,\"3170\":1,\"5437\":1,\"5450\":1}}],[\"对未来工作的看法\",{\"1\":{\"3156\":1,\"5436\":1}}],[\"对邮储的看法\",{\"1\":{\"3156\":1,\"5436\":1}}],[\"对给定元素再次进行相同的哈希计算\",{\"1\":{\"2790\":1,\"5152\":1}}],[\"对数据库造成了巨大的压力\",{\"1\":{\"2776\":1,\"2794\":1,\"2804\":1,\"5138\":1,\"5156\":1,\"5166\":1}}],[\"对数据的修改就是永久的\",{\"1\":{\"2570\":1,\"4932\":1}}],[\"对数据的修改效果对于引用类型和值类型会不同\",{\"1\":{\"270\":1}}],[\"对数据的增删改操作\",{\"1\":{\"2452\":1,\"4814\":1}}],[\"对其进行强制硬盘同步\",{\"1\":{\"2742\":1,\"5104\":1}}],[\"对其他事务不可见\",{\"1\":{\"2634\":1,\"4996\":1}}],[\"对其他并发事务是隔离的\",{\"1\":{\"2569\":1,\"4931\":1}}],[\"对读取的记录加独占锁\",{\"1\":{\"2535\":1,\"4897\":1}}],[\"对读取的记录加共享锁\",{\"1\":{\"2535\":1,\"4897\":1}}],[\"对一张表做结构变更操作的时候\",{\"1\":{\"2487\":1,\"4849\":1}}],[\"对一张表进行\",{\"1\":{\"2486\":1,\"4848\":1}}],[\"对一个记录频繁写\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"对表结构的更改操作\",{\"1\":{\"2453\":1,\"4815\":1}}],[\"对每一个可以用到的索引来进行评估\",{\"1\":{\"2430\":1,\"4792\":1}}],[\"对索引中包含的字段先做判断\",{\"1\":{\"2417\":1,\"4779\":1}}],[\"对排序查找和范围查找优化\",{\"1\":{\"2396\":1,\"4758\":1}}],[\"对文本的内容进行分词\",{\"1\":{\"2366\":1,\"2376\":1,\"4728\":1,\"4738\":1}}],[\"对应的值修改为\",{\"1\":{\"2876\":1,\"4130\":1}}],[\"对应的是\",{\"1\":{\"2794\":1,\"2801\":1,\"5156\":1,\"5163\":1}}],[\"对应的\",{\"1\":{\"2349\":1,\"4711\":1}}],[\"对应的pojo一定要实现serializable\",{\"1\":{\"989\":1,\"4006\":1}}],[\"对加\",{\"1\":{\"1852\":1,\"4441\":1}}],[\"对团队挑战大\",{\"1\":{\"1825\":1,\"4414\":1}}],[\"对进程进行封装隔离\",{\"1\":{\"1776\":1,\"4365\":1}}],[\"对比roundrobinassignor\",{\"1\":{\"1051\":1,\"5227\":1}}],[\"对消费者进行排序\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"对循环依赖的解决也就不会那么陌生了\",{\"1\":{\"897\":1,\"3914\":1}}],[\"对同一字段的多次读取结果都是一致的\",{\"1\":{\"855\":1,\"3872\":1}}],[\"对请求消息进行数据格式化\",{\"1\":{\"823\":1,\"3840\":1}}],[\"对请求消息进行数据转换\",{\"1\":{\"822\":1,\"3839\":1}}],[\"对请求\",{\"1\":{\"818\":1,\"3835\":1}}],[\"对外提供⼀个公共的⽅法获取实例\",{\"1\":{\"581\":1,\"3774\":1}}],[\"对外提供⼀个静态公有方法获取实例\",{\"1\":{\"579\":1,\"3772\":1}}],[\"对类进行link操作\",{\"1\":{\"229\":1,\"3623\":1}}],[\"对象存储可提供更好的数据保护\",{\"1\":{\"3249\":1,\"5518\":1}}],[\"对象调用set方法设置的值\",{\"1\":{\"3032\":1,\"4286\":1}}],[\"对象调用newinstance\",{\"1\":{\"312\":1,\"3700\":1}}],[\"对象为\",{\"1\":{\"3030\":1,\"4284\":1}}],[\"对象锁的的拥有者线程才可以执行\",{\"1\":{\"3007\":1,\"4261\":1}}],[\"对象锁或类锁内部有计数器\",{\"1\":{\"2969\":1,\"4223\":1}}],[\"对象监视器\",{\"1\":{\"3003\":1,\"4257\":1}}],[\"对象id\",{\"1\":{\"2710\":1,\"5072\":1}}],[\"对象会调用当前连接对应的\",{\"1\":{\"1262\":1,\"1430\":1,\"1598\":1,\"1766\":1,\"4673\":1}}],[\"对象会通过\",{\"1\":{\"1228\":1,\"1243\":1,\"1396\":1,\"1411\":1,\"1564\":1,\"1579\":1,\"1732\":1,\"1747\":1,\"4639\":1,\"4654\":1}}],[\"对象分配的连接加入\",{\"1\":{\"1261\":1,\"1429\":1,\"1597\":1,\"1765\":1,\"4672\":1}}],[\"对象将\",{\"1\":{\"1261\":1,\"1429\":1,\"1597\":1,\"1765\":1,\"4672\":1}}],[\"对象中的\",{\"1\":{\"1260\":1,\"1428\":1,\"1596\":1,\"1764\":1,\"4671\":1}}],[\"对象中依赖\",{\"1\":{\"889\":1,\"3906\":1}}],[\"对象承担所有事件的监听和响应\",{\"1\":{\"1254\":1,\"1422\":1,\"1590\":1,\"1758\":1,\"4665\":1}}],[\"对象就进行业务处理\",{\"1\":{\"1247\":1,\"1415\":1,\"1583\":1,\"1751\":1,\"4658\":1}}],[\"对象不再负责业务处理\",{\"1\":{\"1246\":1,\"1414\":1,\"1582\":1,\"1750\":1,\"4657\":1}}],[\"对象在业务处理时\",{\"1\":{\"1234\":1,\"1402\":1,\"1570\":1,\"1738\":1,\"4645\":1}}],[\"对象来进行响应\",{\"1\":{\"1229\":1,\"1244\":1,\"1262\":1,\"1397\":1,\"1412\":1,\"1430\":1,\"1565\":1,\"1580\":1,\"1598\":1,\"1733\":1,\"1748\":1,\"1766\":1,\"4640\":1,\"4655\":1,\"4673\":1}}],[\"对象来处理后续的响应事件\",{\"1\":{\"1228\":1,\"1243\":1,\"1396\":1,\"1411\":1,\"1564\":1,\"1579\":1,\"1732\":1,\"1747\":1,\"4639\":1,\"4654\":1}}],[\"对象进行业务处理\",{\"1\":{\"1246\":1,\"1414\":1,\"1582\":1,\"1750\":1,\"4657\":1}}],[\"对象进行处理\",{\"1\":{\"1228\":1,\"1243\":1,\"1396\":1,\"1411\":1,\"1564\":1,\"1579\":1,\"1732\":1,\"1747\":1,\"4639\":1,\"4654\":1}}],[\"对象进行分页\",{\"1\":{\"973\":1,\"3990\":1}}],[\"对象还是\",{\"1\":{\"1227\":1,\"1242\":1,\"1395\":1,\"1410\":1,\"1563\":1,\"1578\":1,\"1731\":1,\"1746\":1,\"4638\":1,\"4653\":1}}],[\"对象通过\",{\"1\":{\"1227\":1,\"1230\":1,\"1242\":1,\"1246\":1,\"1260\":1,\"1263\":1,\"1395\":1,\"1398\":1,\"1410\":1,\"1414\":1,\"1428\":1,\"1431\":1,\"1563\":1,\"1566\":1,\"1578\":1,\"1582\":1,\"1596\":1,\"1599\":1,\"1731\":1,\"1734\":1,\"1746\":1,\"1750\":1,\"1764\":1,\"1767\":1,\"4638\":1,\"4641\":1,\"4653\":1,\"4657\":1,\"4671\":1,\"4674\":1}}],[\"对象里的\",{\"1\":{\"1225\":1,\"1393\":1,\"1561\":1,\"1729\":1,\"4636\":1}}],[\"对象的话\",{\"1\":{\"3032\":1,\"4286\":1}}],[\"对象的作用是处理业务\",{\"1\":{\"1224\":1,\"1392\":1,\"1560\":1,\"1728\":1,\"4635\":1}}],[\"对象的作用是获取连接\",{\"1\":{\"1223\":1,\"1391\":1,\"1559\":1,\"1727\":1,\"4634\":1}}],[\"对象的作用是监听和分发事件\",{\"1\":{\"1222\":1,\"1390\":1,\"1558\":1,\"1726\":1,\"4633\":1}}],[\"对象的形式返回\",{\"1\":{\"818\":1,\"3835\":1}}],[\"对象保存到缓存中\",{\"1\":{\"898\":1,\"3915\":1}}],[\"对象对应的拦截器\",{\"1\":{\"818\":1,\"3835\":1}}],[\"对象以及\",{\"1\":{\"818\":1,\"3835\":1}}],[\"对象\",{\"1\":{\"202\":1,\"302\":1,\"304\":1,\"306\":1,\"308\":1,\"503\":1,\"587\":1,\"825\":1,\"830\":1,\"982\":1,\"1227\":1,\"1242\":1,\"1247\":1,\"1395\":1,\"1410\":1,\"1415\":1,\"1563\":1,\"1578\":1,\"1583\":1,\"1731\":1,\"1746\":1,\"1751\":1,\"2826\":1,\"3596\":1,\"3690\":1,\"3692\":1,\"3694\":1,\"3696\":1,\"3780\":1,\"3842\":1,\"3847\":1,\"3999\":1,\"4080\":1,\"4638\":1,\"4653\":1,\"4658\":1}}],[\"对于数据丢失不敏感\",{\"1\":{\"3282\":1,\"5551\":1}}],[\"对于变量存在多线程并发竞争\",{\"1\":{\"3219\":1,\"5488\":1}}],[\"对于取得的最终效果讲一下\",{\"1\":{\"3181\":1}}],[\"对于store\",{\"1\":{\"2949\":1,\"4203\":1}}],[\"对于load\",{\"1\":{\"2948\":1,\"4202\":1}}],[\"对于其他线程是不见的\",{\"1\":{\"2941\":1,\"4195\":1}}],[\"对于当前事务也是不可见的\",{\"1\":{\"2626\":1,\"4988\":1}}],[\"对于频繁被连接查询的字段\",{\"1\":{\"2424\":1,\"4786\":1}}],[\"对于外键列并不一定要建立外键\",{\"1\":{\"2424\":1,\"4786\":1}}],[\"对于很多网站来说\",{\"1\":{\"1975\":1,\"1990\":1,\"2005\":1,\"2018\":1,\"2031\":1,\"2046\":1,\"5266\":1,\"5289\":1}}],[\"对于命令的处理是单进程的方案\",{\"1\":{\"1236\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"4647\":1}}],[\"对于支持网卡支持\",{\"1\":{\"1183\":1,\"1351\":1,\"1519\":1,\"1687\":1,\"4594\":1}}],[\"对于就绪的事件\",{\"1\":{\"1145\":1,\"1313\":1,\"1481\":1,\"1649\":1,\"4556\":1}}],[\"对于每个pid发送数据的每个topic都对应一个从0开始单调递增的sn值\",{\"1\":{\"1063\":1,\"5239\":1}}],[\"对于每一个topic\",{\"1\":{\"1030\":1,\"5206\":1}}],[\"对于一个负数取模还是有些麻烦的\",{\"1\":{\"757\":1}}],[\"对于一个默认的hashmap来说\",{\"1\":{\"702\":1}}],[\"对于一个类加载器来说\",{\"1\":{\"205\":1,\"3599\":1}}],[\"对于我们理解和学习各种框架的原理也非常有帮助\",{\"1\":{\"607\":1,\"3800\":1}}],[\"对于arraylist\",{\"1\":{\"469\":1}}],[\"对于二叉搜索树\",{\"1\":{\"419\":1,\"3744\":1}}],[\"对于队列\",{\"1\":{\"405\":1}}],[\"对于链表来说\",{\"1\":{\"404\":1}}],[\"对于已经正式发布的代码\",{\"1\":{\"368\":1}}],[\"对于已经加载的类会被放在\",{\"1\":{\"205\":1,\"3599\":1}}],[\"对于现实中并不存在的设计对象\",{\"1\":{\"362\":1}}],[\"对于任意一个对象\",{\"1\":{\"285\":1,\"3673\":1}}],[\"对于任意一个类\",{\"1\":{\"285\":1,\"3673\":1}}],[\"对于\",{\"1\":{\"126\":1,\"2393\":1,\"2415\":1,\"2466\":1,\"2611\":1,\"2612\":1,\"2613\":1,\"3525\":1,\"4755\":1,\"4777\":1,\"4828\":1,\"4973\":1,\"4974\":1,\"4975\":1}}],[\"对\",{\"1\":{\"39\":1,\"2132\":1,\"2823\":1,\"3438\":1,\"4077\":1}}],[\"为变量设置threadlocal\",{\"1\":{\"3221\":1,\"5490\":1}}],[\"为空\",{\"1\":{\"2625\":1,\"4987\":1}}],[\"为何能够通过\",{\"1\":{\"2349\":1,\"4711\":1}}],[\"为短连接\",{\"1\":{\"2265\":1,\"5347\":1}}],[\"为该映射关系的生存周期\",{\"1\":{\"2232\":1,\"5314\":1}}],[\"为啥叫权威呢\",{\"1\":{\"2302\":1,\"5384\":1}}],[\"为啥不可能选择\",{\"1\":{\"1919\":1,\"4508\":1}}],[\"为啥要定义这两个变量\",{\"1\":{\"683\":1}}],[\"为我们提供了高可用\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"为我们提供了自定义缓存\",{\"1\":{\"991\":1,\"4008\":1}}],[\"为微服务架构提供了非常完整的支持\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"为需要拦截的接口生成代理对象以实现接口方法拦截功能\",{\"1\":{\"978\":1,\"3995\":1}}],[\"为o\",{\"1\":{\"447\":1,\"479\":1,\"480\":1,\"486\":1,\"494\":2,\"495\":1,\"666\":1,\"799\":1}}],[\"为了防止阻塞\",{\"1\":{\"3271\":1,\"5540\":1}}],[\"为了达成这一目标\",{\"1\":{\"2239\":1,\"5321\":1}}],[\"为了检验对这些知识掌握的深度\",{\"1\":{\"2054\":1}}],[\"为了克服这个缺点\",{\"1\":{\"1126\":1,\"1294\":1,\"1462\":1,\"1630\":1,\"4537\":1}}],[\"为了实现进程\",{\"1\":{\"1120\":1,\"1288\":1,\"1456\":1,\"1624\":1,\"4531\":1}}],[\"为了保证数据的并发安全\",{\"1\":{\"2984\":1,\"4238\":1}}],[\"为了保证\",{\"1\":{\"1919\":1,\"4508\":1}}],[\"为了保证相同的键\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"为了保证哈希的结果可以分散\",{\"1\":{\"792\":1}}],[\"为了按键有序\",{\"1\":{\"798\":1}}],[\"为了提高哈希的效率\",{\"1\":{\"792\":1}}],[\"为了解决在频繁冲突时hashmap性能降低的问题\",{\"1\":{\"778\":1}}],[\"为了解决这个问题\",{\"1\":{\"618\":1,\"3811\":1}}],[\"为了考虑性能\",{\"1\":{\"744\":1}}],[\"为了有序\",{\"1\":{\"447\":1}}],[\"为了修正这个问题\",{\"1\":{\"385\":1}}],[\"为了丰富文档写作\",{\"1\":{\"39\":1,\"3438\":1}}],[\"为什么选用redis作为消息队列\",{\"1\":{\"3277\":1,\"5546\":1}}],[\"为什么redis中使用两种数据类型\",{\"1\":{\"3268\":1,\"5537\":1}}],[\"为什么任务需要存储在数据库中\",{\"1\":{\"3266\":1,\"5535\":1}}],[\"为什么呢\",{\"1\":{\"3086\":1,\"4340\":1}}],[\"为什么不需要预加载\",{\"1\":{\"3270\":1,\"5539\":1}}],[\"为什么不推荐使用内置线程池\",{\"0\":{\"3084\":1,\"4338\":1}}],[\"为什么不改\",{\"0\":{\"367\":1}}],[\"为什么会出现误判的情况呢\",{\"1\":{\"2785\":1,\"5147\":1}}],[\"为什么这么快\",{\"0\":{\"2668\":1,\"5030\":1}}],[\"为什么这里不像上面那样\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"为什么线程\",{\"1\":{\"2498\":1,\"4860\":1}}],[\"为什么挥手需要四次\",{\"1\":{\"2076\":1}}],[\"为什么每次建立\",{\"1\":{\"2067\":1}}],[\"为什么是三次握手\",{\"1\":{\"2066\":1}}],[\"为什么需要\",{\"1\":{\"2057\":1,\"2082\":1}}],[\"为什么需要http\",{\"1\":{\"1968\":1,\"1983\":1,\"1998\":1,\"2011\":1,\"2024\":1,\"2039\":1,\"5258\":1,\"5283\":1}}],[\"为什么需要红黑树\",{\"0\":{\"418\":1,\"3743\":1}}],[\"为什么就要使用spring\",{\"1\":{\"1821\":1,\"4410\":1}}],[\"为什么叫控制反转\",{\"1\":{\"809\":1,\"3826\":1}}],[\"为什么可以使用位运算\",{\"1\":{\"731\":1}}],[\"为什么单链表转为红黑树要求桶内的元素个数大于8\",{\"0\":{\"639\":1,\"3731\":1}}],[\"为什么数组容量必须是2次幂\",{\"0\":{\"637\":1,\"3729\":1}}],[\"为什么要对密码加密\",{\"1\":{\"3338\":1}}],[\"为什么要用线程池\",{\"0\":{\"3034\":1,\"4288\":1}}],[\"为什么要设置奇数个结点\",{\"1\":{\"1891\":1,\"4480\":1}}],[\"为什么要保证顺序\",{\"0\":{\"1067\":1,\"5243\":1}}],[\"为什么要分区\",{\"1\":{\"1016\":1,\"5192\":1}}],[\"为什么要使用红黑树而不使用avl树\",{\"0\":{\"635\":1,\"3727\":1}}],[\"为什么要进⾏双重判断\",{\"1\":{\"582\":1,\"3775\":1}}],[\"为什么在长度小于8时使用链表\",{\"0\":{\"633\":1,\"3725\":1}}],[\"为什么jdk1\",{\"0\":{\"628\":1,\"631\":1,\"3720\":1,\"3723\":1}}],[\"为什么java\",{\"1\":{\"529\":1}}],[\"为什么\",{\"0\":{\"507\":1,\"2184\":1},\"1\":{\"400\":1,\"2069\":1,\"2081\":1,\"2167\":1,\"2169\":1,\"2350\":1,\"4712\":1}}],[\"为什么使用接口\",{\"0\":{\"371\":1}}],[\"为\",{\"1\":{\"229\":1,\"982\":2,\"1886\":1,\"1902\":1,\"2549\":1,\"2625\":1,\"3290\":1,\"3623\":1,\"3999\":2,\"4475\":1,\"4491\":1,\"4911\":1,\"4987\":1,\"5559\":1}}],[\"为类的二进制名称\",{\"1\":{\"214\":1,\"3608\":1}}],[\"为每个topic维护了一个atomicinteger对象\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"为每个\",{\"1\":{\"33\":1,\"3432\":1}}],[\"是怎么实现的\",{\"1\":{\"3162\":1,\"5442\":1}}],[\"是怎么对这批\",{\"1\":{\"2753\":1,\"5115\":1}}],[\"是cas操作的核心\",{\"1\":{\"2975\":1,\"4229\":1}}],[\"是指在同一个线程在调外层方法获取锁的时候\",{\"1\":{\"2968\":1,\"4222\":1}}],[\"是指事务操作前和操作后\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"是将每条请求共享资源的线程封装成一个\",{\"1\":{\"2916\":1,\"4170\":1}}],[\"是用\",{\"1\":{\"2915\":1,\"4169\":1}}],[\"是用来控制选择用\",{\"1\":{\"2523\":1,\"4885\":1}}],[\"是比较并交换的意思\",{\"1\":{\"2862\":1,\"4116\":1}}],[\"是安全的\",{\"1\":{\"2683\":1,\"5045\":1}}],[\"是查询不出来这条数据的\",{\"1\":{\"2608\":1,\"4970\":1}}],[\"是通过\",{\"1\":{\"2608\":1,\"2609\":1,\"4970\":1,\"4971\":1}}],[\"是还没提交事务的\",{\"1\":{\"2580\":1,\"4942\":1}}],[\"是包含间隙锁+记录锁的\",{\"1\":{\"2554\":1,\"4916\":1}}],[\"是性能最高的方式\",{\"1\":{\"2529\":1,\"4891\":1}}],[\"是无锁的\",{\"1\":{\"2506\":1,\"4868\":1}}],[\"是无法保证原子性的\",{\"1\":{\"2896\":1,\"4150\":1}}],[\"是无法读出一个有效的用户消息的\",{\"1\":{\"2114\":1}}],[\"是无法做数据分片的\",{\"1\":{\"1960\":1,\"4066\":1}}],[\"是在\",{\"1\":{\"2880\":1,\"4134\":1}}],[\"是在事务提交后才会释放\",{\"1\":{\"2492\":1,\"4854\":1}}],[\"是在return前还是return后\",{\"1\":{\"268\":1}}],[\"是为了保证当用户对表执行\",{\"1\":{\"2488\":1,\"4850\":1}}],[\"是为了区分同一个主机上不同应用程序的数据包\",{\"1\":{\"2173\":1}}],[\"是会被阻塞的\",{\"1\":{\"2478\":1,\"2554\":1,\"4840\":1,\"4916\":1}}],[\"是会根据\",{\"1\":{\"1880\":1,\"4469\":1}}],[\"是目前搜索引擎数据库使用的一种技术\",{\"1\":{\"2389\":1,\"4751\":1}}],[\"是因为二级索引的叶子节点存储的数据是主键\",{\"1\":{\"2383\":1,\"4745\":1}}],[\"是因理想情况下一个bin中元素个数达到6的概率是0\",{\"1\":{\"641\":1,\"3733\":1}}],[\"是数据表的主键\",{\"1\":{\"2360\":1,\"4722\":1}}],[\"是啥\",{\"1\":{\"2297\":1,\"5379\":1}}],[\"是运行在\",{\"1\":{\"2282\":1,\"5364\":1}}],[\"是基于\",{\"1\":{\"2275\":1,\"3004\":1,\"4258\":1,\"5357\":1}}],[\"是面向连接\",{\"1\":{\"2159\":1}}],[\"是面向连接的传输层协议\",{\"1\":{\"2138\":1}}],[\"是面向连接的\",{\"1\":{\"2110\":1}}],[\"是有边界的\",{\"1\":{\"2154\":1}}],[\"是有能力在数组中的任何位置添加或者删除元素的\",{\"1\":{\"347\":1}}],[\"是流式传输\",{\"1\":{\"2153\":1}}],[\"是尽最大努力交付\",{\"1\":{\"2145\":1}}],[\"是可靠交付数据的\",{\"1\":{\"2144\":1}}],[\"是要优先保证\",{\"1\":{\"1961\":1,\"4067\":1}}],[\"是前提\",{\"1\":{\"1916\":1,\"4505\":1}}],[\"是否相等\",{\"1\":{\"3382\":1}}],[\"是否开启access\",{\"1\":{\"3316\":1}}],[\"是否有效再进行处理\",{\"1\":{\"3303\":1,\"5572\":1}}],[\"是否有事务已经对表加上了\",{\"1\":{\"2500\":1,\"4862\":1}}],[\"是否合法\",{\"1\":{\"2782\":1,\"5144\":1}}],[\"是否支持\",{\"1\":{\"2338\":1,\"4700\":1}}],[\"是否支持数据库异常崩溃后的安全恢复\",{\"1\":{\"2335\":1,\"4697\":1}}],[\"是否支持外键\",{\"1\":{\"2331\":1,\"4693\":1}}],[\"是否支持事务\",{\"1\":{\"2328\":1,\"4690\":1}}],[\"是否支持行级锁\",{\"1\":{\"2325\":1,\"4687\":1}}],[\"是否同意更新\",{\"1\":{\"1878\":1,\"4467\":1}}],[\"是否只读\",{\"1\":{\"989\":1,\"4006\":1}}],[\"是协调服务的典型场景\",{\"1\":{\"1858\":1,\"4447\":1}}],[\"是世界领先的软件容器平台\",{\"1\":{\"1775\":1,\"4364\":1}}],[\"是分发事件操作\",{\"1\":{\"1225\":1,\"1393\":1,\"1561\":1,\"1729\":1,\"4636\":1}}],[\"是需要完成的操作\",{\"1\":{\"1225\":1,\"1393\":1,\"1561\":1,\"1729\":1,\"4636\":1}}],[\"是系统调用函数\",{\"1\":{\"1225\":1,\"1393\":1,\"1561\":1,\"1729\":1,\"4636\":1}}],[\"是如何随机产生的\",{\"0\":{\"2183\":1},\"1\":{\"2068\":1}}],[\"是如何进行初始化选举的\",{\"1\":{\"1884\":1,\"4473\":1}}],[\"是如何进行分页的\",{\"0\":{\"971\":1,\"3988\":1}}],[\"是如何获取网络事件的呢\",{\"1\":{\"1137\":1,\"1305\":1,\"1473\":1,\"1641\":1,\"4548\":1}}],[\"是这种机制\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4528\":1}}],[\"是符合我们上面提到的时间局部性\",{\"1\":{\"1096\":1}}],[\"是不合理的\",{\"1\":{\"2776\":1,\"5138\":1}}],[\"是不影响其他消费者购买的\",{\"1\":{\"2569\":1,\"4931\":1}}],[\"是不会加行级锁的\",{\"1\":{\"2506\":1,\"4868\":1}}],[\"是不需要连接\",{\"1\":{\"2139\":1}}],[\"是不是也需要\",{\"1\":{\"1877\":1,\"4466\":1}}],[\"是不是把t1p1交给c1消费能更加的均衡呢\",{\"1\":{\"1045\":1,\"5221\":1}}],[\"是不能自动唤醒的\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4519\":1}}],[\"是不能解决循环依赖的问题的\",{\"1\":{\"885\":1,\"3902\":1}}],[\"是多个\",{\"1\":{\"984\":1,\"4001\":1}}],[\"是servlet的监听器\",{\"1\":{\"933\":1,\"3950\":1}}],[\"是必须的\",{\"1\":{\"898\":1,\"3915\":1}}],[\"是什么玩意\",{\"1\":{\"1892\":1,\"4481\":1}}],[\"是什么意思呢\",{\"1\":{\"730\":1}}],[\"是什么类\",{\"1\":{\"345\":1}}],[\"是16\",{\"1\":{\"689\":1}}],[\"是⼀种结构性模式\",{\"1\":{\"596\":1,\"3789\":1}}],[\"是list\",{\"1\":{\"465\":1}}],[\"是哈希表实现的\",{\"1\":{\"459\":1}}],[\"是二叉树实现的\",{\"1\":{\"458\":1}}],[\"是非常慢的\",{\"1\":{\"404\":1}}],[\"是继承了\",{\"1\":{\"392\":1}}],[\"是双端队列的意思\",{\"1\":{\"387\":1}}],[\"是一款程序员可以嵌入他们所开发产品的组件\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"是一款模板引擎\",{\"1\":{\"3246\":1,\"5515\":1}}],[\"是一条\",{\"1\":{\"2879\":1,\"2900\":1,\"4133\":1,\"4154\":1}}],[\"是一直持有的\",{\"1\":{\"2492\":1,\"4854\":1}}],[\"是一对一的两点服务\",{\"1\":{\"2141\":1}}],[\"是一定要满足的\",{\"1\":{\"1917\":1,\"4506\":1}}],[\"是一件非常困难的事\",{\"1\":{\"1815\":1,\"4404\":1}}],[\"是一项独立的容器管理包\",{\"1\":{\"1788\":1,\"4377\":1}}],[\"是一种系统原语\",{\"1\":{\"2879\":1,\"4133\":1}}],[\"是一种设计思想\",{\"1\":{\"808\":1,\"3825\":1}}],[\"是一种高效的查找树\",{\"1\":{\"417\":1,\"3742\":1}}],[\"是一致的\",{\"1\":{\"377\":1}}],[\"是一个新闻资讯类项目\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"是一个可重入且独占式的锁\",{\"1\":{\"2828\":1,\"4082\":1}}],[\"是一个可改变大小的数组\",{\"1\":{\"500\":1}}],[\"是一个包一个包的发送\",{\"1\":{\"2154\":1}}],[\"是一个包装类\",{\"1\":{\"467\":1}}],[\"是一个工作在传输层的可靠数据传输的服务\",{\"1\":{\"2108\":1}}],[\"是一个开源的分布式协调服务\",{\"1\":{\"1856\":1,\"4445\":1}}],[\"是一个声明web服务客户端\",{\"1\":{\"1846\":1,\"4435\":1}}],[\"是一个双链表\",{\"1\":{\"501\":1}}],[\"是一个集合接口\",{\"1\":{\"465\":1}}],[\"是一个\",{\"1\":{\"353\":1,\"1780\":1,\"4369\":1}}],[\"是发动机这个类的对象\",{\"1\":{\"357\":1}}],[\"是被业界一直认为非常糟糕的实现\",{\"1\":{\"351\":1}}],[\"是的\",{\"1\":{\"338\":1}}],[\"是runtimeexception以外的异常\",{\"1\":{\"247\":1,\"3643\":1}}],[\"是由\",{\"1\":{\"201\":1,\"1236\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"2214\":1,\"2307\":1,\"3595\":1,\"4647\":1,\"5296\":1}}],[\"是\",{\"1\":{\"35\":1,\"401\":1,\"893\":1,\"1157\":1,\"1325\":1,\"1493\":1,\"1661\":1,\"2214\":1,\"2254\":1,\"2307\":1,\"2323\":1,\"2352\":1,\"2417\":1,\"2552\":1,\"2822\":2,\"2886\":1,\"2900\":1,\"3145\":1,\"3434\":1,\"3910\":1,\"4076\":2,\"4140\":1,\"4154\":1,\"4568\":1,\"4685\":1,\"4714\":1,\"4779\":1,\"4914\":1,\"5296\":1,\"5336\":1,\"5425\":1}}],[\"和其他的几个策略不同\",{\"1\":{\"3061\":1,\"4315\":1}}],[\"和内存地址\",{\"1\":{\"2874\":1,\"2876\":1,\"4128\":1,\"4130\":1}}],[\"和非公平锁\",{\"1\":{\"2830\":1,\"4084\":1}}],[\"和我们认识的\",{\"1\":{\"2680\":1,\"5042\":1}}],[\"和用户\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"和独占表锁\",{\"1\":{\"2509\":1,\"4871\":1}}],[\"和回滚\",{\"1\":{\"2330\":1,\"4692\":1}}],[\"和表级锁\",{\"1\":{\"2326\":1,\"4688\":1}}],[\"和接收主机\",{\"1\":{\"2249\":1,\"5331\":1}}],[\"和端口是可变的\",{\"1\":{\"2130\":1}}],[\"和一开始选举一样\",{\"1\":{\"1890\":1,\"4479\":1}}],[\"和介绍\",{\"1\":{\"1871\":1,\"4460\":1}}],[\"和处理资源池这两个核心部分组成\",{\"1\":{\"1196\":1,\"1364\":1,\"1532\":1,\"1700\":1,\"4607\":1}}],[\"和普通的\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"和自动配置一样\",{\"1\":{\"942\":1,\"3959\":1}}],[\"和hashmap有何不同\",{\"1\":{\"759\":1}}],[\"和int\",{\"1\":{\"724\":1}}],[\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐\",{\"1\":{\"589\":1,\"3782\":1}}],[\"和arraylist类似\",{\"1\":{\"503\":1}}],[\"和o\",{\"1\":{\"419\":1,\"3744\":1}}],[\"和底层数据结构的具体实现\",{\"1\":{\"378\":1}}],[\"和动态数组这种数据结构之间\",{\"1\":{\"360\":1}}],[\"和错误\",{\"1\":{\"253\":1,\"3649\":1}}],[\"和不可查的异常\",{\"0\":{\"248\":1,\"3644\":1}}],[\"和卸载\",{\"1\":{\"190\":1,\"3584\":1}}],[\"和\",{\"0\":{\"684\":1,\"696\":1,\"2134\":1,\"2136\":1,\"2158\":1,\"2171\":1,\"2264\":1,\"2269\":1,\"2274\":1,\"2279\":1,\"2320\":1,\"4682\":1,\"5346\":1,\"5351\":1,\"5356\":1,\"5361\":1},\"1\":{\"31\":1,\"121\":1,\"351\":1,\"362\":1,\"377\":2,\"383\":1,\"397\":1,\"722\":1,\"792\":1,\"827\":1,\"903\":1,\"916\":1,\"944\":1,\"1096\":1,\"1147\":1,\"1154\":1,\"1163\":1,\"1179\":1,\"1180\":1,\"1225\":1,\"1315\":1,\"1322\":1,\"1331\":1,\"1347\":1,\"1348\":1,\"1393\":1,\"1483\":1,\"1490\":1,\"1499\":1,\"1515\":1,\"1516\":1,\"1561\":1,\"1651\":1,\"1658\":1,\"1667\":1,\"1683\":1,\"1684\":1,\"1729\":1,\"1860\":1,\"1875\":1,\"1877\":1,\"1878\":2,\"1885\":1,\"1890\":1,\"1895\":1,\"1900\":1,\"1916\":1,\"1921\":1,\"2061\":1,\"2062\":1,\"2174\":1,\"2177\":1,\"2330\":1,\"2355\":1,\"2363\":1,\"2434\":1,\"2568\":1,\"2579\":1,\"2584\":1,\"2588\":1,\"2613\":1,\"2615\":1,\"2633\":1,\"2660\":1,\"2665\":1,\"2679\":1,\"2723\":1,\"2828\":1,\"2896\":1,\"2947\":1,\"2970\":1,\"2979\":1,\"3001\":1,\"3014\":1,\"3022\":1,\"3026\":1,\"3065\":1,\"3067\":1,\"3090\":1,\"3092\":1,\"3133\":1,\"3372\":1,\"3374\":1,\"3376\":1,\"3378\":1,\"3379\":1,\"3380\":1,\"3382\":1,\"3430\":1,\"3520\":1,\"3844\":1,\"3920\":1,\"3933\":1,\"3961\":1,\"4082\":1,\"4150\":1,\"4201\":1,\"4224\":1,\"4233\":1,\"4255\":1,\"4268\":1,\"4276\":1,\"4280\":1,\"4319\":1,\"4321\":1,\"4344\":1,\"4346\":1,\"4449\":1,\"4464\":1,\"4466\":1,\"4467\":2,\"4474\":1,\"4479\":1,\"4484\":1,\"4489\":1,\"4505\":1,\"4510\":1,\"4558\":1,\"4565\":1,\"4574\":1,\"4590\":1,\"4591\":1,\"4636\":1,\"4692\":1,\"4717\":1,\"4725\":1,\"4796\":1,\"4930\":1,\"4941\":1,\"4946\":1,\"4950\":1,\"4975\":1,\"4977\":1,\"4995\":1,\"5022\":1,\"5027\":1,\"5041\":1,\"5085\":1,\"5413\":1}}],[\"介绍公司\",{\"1\":{\"3111\":1,\"5391\":1}}],[\"介绍下\",{\"1\":{\"1226\":1,\"1394\":1,\"1562\":1,\"1730\":1,\"4637\":1}}],[\"介绍\",{\"0\":{\"30\":1,\"159\":1,\"167\":1,\"198\":1,\"3429\":1,\"3553\":1,\"3561\":1,\"3592\":1},\"1\":{\"31\":1,\"35\":1,\"3430\":1,\"3434\":1}}],[\"你也不能想当然地认为它们俩对应的原文也非常相似\",{\"1\":{\"3331\":1}}],[\"你访问一次\",{\"1\":{\"3317\":1}}],[\"你怎么判断谁大谁小\",{\"1\":{\"3187\":1}}],[\"你是用md5做的\",{\"1\":{\"3182\":1}}],[\"你是如何设计的\",{\"0\":{\"1931\":1,\"4037\":1}}],[\"你平常也这样扎头发吗\",{\"1\":{\"3176\":1,\"5456\":1}}],[\"你有实际的项目经验吗\",{\"1\":{\"3164\":1,\"5444\":1}}],[\"你来就是java\",{\"1\":{\"3153\":1,\"5433\":1}}],[\"你他妈的非得问\",{\"1\":{\"3125\":1,\"5405\":1}}],[\"你知道有什么方法对线程池进行预热吗\",{\"1\":{\"3097\":1,\"4351\":1}}],[\"你能说一下有哪些问题吗\",{\"1\":{\"3163\":1,\"5443\":1}}],[\"你能说出几个需要重写的方法吗\",{\"0\":{\"2926\":1,\"4180\":1}}],[\"你能告诉我\",{\"1\":{\"2300\":1,\"5382\":1}}],[\"你去问它应该能问到\",{\"1\":{\"2301\":1,\"5383\":1}}],[\"你去问问它吧\",{\"1\":{\"2299\":1,\"5381\":1}}],[\"你的快递被放到了一个快递箱里\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4562\":1}}],[\"你只需要记住这个技巧就可以了\",{\"1\":{\"738\":1}}],[\"你会发现\",{\"1\":{\"1193\":1,\"1361\":1,\"1529\":1,\"1697\":1,\"4604\":1}}],[\"你会怎么做\",{\"1\":{\"723\":1}}],[\"你会彻底理解hash方法\",{\"1\":{\"722\":1}}],[\"你通过proxy\",{\"1\":{\"615\":1,\"3808\":1}}],[\"你都能通过getmap获得\",{\"1\":{\"300\":1,\"3688\":1}}],[\"你又要改代码\",{\"1\":{\"294\":1,\"3682\":1}}],[\"你需要自定义\",{\"1\":{\"621\":1,\"3814\":1}}],[\"你需要在页面\",{\"1\":{\"151\":1,\"155\":1,\"3550\":1}}],[\"你需要阅读\",{\"1\":{\"35\":1,\"3434\":1}}],[\"你应该创建和编写\",{\"1\":{\"29\":1,\"3428\":1}}],[\"你可以专注于如何展现数据\",{\"1\":{\"3247\":1,\"5516\":1}}],[\"你可以选择这个策略\",{\"1\":{\"3058\":1,\"4312\":1}}],[\"你可以把多个变量放在一个对象里来进行cas操作\",{\"1\":{\"2898\":1,\"4152\":1}}],[\"你可以将\",{\"1\":{\"2275\":1,\"5357\":1}}],[\"你可以将图片和\",{\"1\":{\"125\":1,\"3524\":1}}],[\"你可以使用这个语法\",{\"1\":{\"262\":1,\"3658\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"28\":1,\"3427\":1}}],[\"你可以通过\",{\"1\":{\"623\":1,\"3816\":1}}],[\"你可以通过主题选项和页面\",{\"1\":{\"140\":1,\"3539\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"10\":1,\"3409\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"123\":1,\"3522\":1}}],[\"你可以在这里放置你的主体内容\",{\"1\":{\"150\":1,\"154\":1,\"3549\":1}}],[\"你可以在\",{\"1\":{\"117\":1,\"615\":1,\"3516\":1,\"3808\":1}}],[\"你可以标记\",{\"1\":{\"73\":1,\"3472\":1}}],[\"文本内容和图片\",{\"1\":{\"3253\":1,\"5522\":1}}],[\"文章查询性能\",{\"1\":{\"3302\":1,\"5571\":1}}],[\"文章数据建立索引\",{\"1\":{\"3302\":1,\"5571\":1}}],[\"文章自动审核\",{\"1\":{\"3251\":1,\"5520\":1}}],[\"文章自动审核及延迟发布\",{\"0\":{\"3250\":1,\"5519\":1},\"1\":{\"3192\":1,\"5461\":1}}],[\"文章详情静态化\",{\"1\":{\"3245\":1,\"5514\":1}}],[\"文章详情静态化及存储\",{\"0\":{\"3244\":1,\"5513\":1},\"1\":{\"3192\":1,\"5461\":1}}],[\"文章内容审核功能\",{\"1\":{\"3191\":1,\"5460\":1}}],[\"文章标题列表\",{\"1\":{\"133\":1,\"3532\":1}}],[\"文中分析基于jdk1\",{\"1\":{\"712\":1}}],[\"文档中写到\",{\"1\":{\"216\":1,\"3610\":1}}],[\"文件进行数据恢复\",{\"1\":{\"2744\":1,\"5106\":1}}],[\"文件进行重写\",{\"1\":{\"2743\":1,\"5105\":1}}],[\"文件越来越大\",{\"1\":{\"2743\":1,\"5105\":1}}],[\"文件重写\",{\"1\":{\"2743\":1,\"5105\":1}}],[\"文件同步\",{\"1\":{\"2742\":1,\"5104\":1}}],[\"文件写入\",{\"1\":{\"2741\":1,\"5103\":1}}],[\"文件的位置相同\",{\"1\":{\"2737\":1,\"5099\":1}}],[\"文件的保存位置和\",{\"1\":{\"2737\":1,\"5099\":1}}],[\"文件中\",{\"1\":{\"2735\":1,\"2741\":1,\"5097\":1,\"5103\":1}}],[\"文件传输\",{\"1\":{\"2160\":1}}],[\"文件传输的代码\",{\"1\":{\"1193\":1,\"1361\":1,\"1529\":1,\"1697\":1,\"4604\":1}}],[\"文件描述符\",{\"1\":{\"1137\":1,\"1305\":1,\"1473\":1,\"1641\":1,\"4548\":1}}],[\"文件呢\",{\"1\":{\"194\":1,\"3588\":1}}],[\"文件需要加载到虚拟机中之后才能运行和使用\",{\"1\":{\"194\":1,\"3588\":1}}],[\"文件夹的图片\",{\"1\":{\"126\":1,\"3525\":1}}],[\"文件放置在一起\",{\"1\":{\"125\":1,\"3524\":1}}],[\"文件\",{\"1\":{\"29\":1,\"202\":1,\"211\":1,\"602\":1,\"2644\":1,\"2999\":1,\"3428\":1,\"3596\":1,\"3605\":1,\"3795\":1,\"4253\":1,\"5006\":1}}],[\"文件生成页面\",{\"1\":{\"28\":1,\"3427\":1}}],[\"文字结尾应该有深蓝色的\",{\"1\":{\"128\":1,\"3527\":1}}],[\"文字\",{\"1\":{\"25\":1,\"26\":1,\"3424\":1,\"3425\":1}}],[\"文字段落\",{\"1\":{\"25\":11,\"26\":13,\"3424\":11,\"3425\":13}}],[\"2呢\",{\"1\":{\"5280\":1}}],[\"2还没来得及全面推广\",{\"1\":{\"5280\":1}}],[\"2还是个新技术\",{\"1\":{\"1973\":1,\"1988\":1,\"2003\":1,\"2016\":1,\"2029\":1,\"2044\":1,\"5264\":1,\"5287\":1}}],[\"2留下发挥时间\",{\"1\":{\"5280\":1}}],[\"2非对称加密算法有哪些\",{\"0\":{\"3391\":1}}],[\"25d55ad283aa400af464c76d713c07ad\",{\"1\":{\"3359\":1}}],[\"253\",{\"1\":{\"83\":1,\"3482\":1}}],[\"2n\",{\"1\":{\"3077\":2,\"4331\":2}}],[\"2n表示2的n次方\",{\"1\":{\"734\":1}}],[\"22\",{\"1\":{\"2521\":1,\"4883\":1}}],[\"2xx\",{\"1\":{\"2262\":1,\"5344\":1}}],[\"2listen\",{\"0\":{\"2206\":1}}],[\"2loadfactor\",{\"0\":{\"696\":1}}],[\"2为什么挥手需要四次\",{\"0\":{\"2191\":1}}],[\"2为什么需要\",{\"0\":{\"2106\":1}}],[\"2为什么需要虚拟内存\",{\"0\":{\"1098\":1}}],[\"2如何在\",{\"0\":{\"2180\":1}}],[\"2tcp\",{\"0\":{\"2158\":1}}],[\"2msl\",{\"0\":{\"2196\":1},\"1\":{\"2081\":1}}],[\"2中最核心的技术就是多路复用技术\",{\"1\":{\"1978\":1,\"1993\":1,\"2008\":1,\"2021\":1,\"2034\":1,\"2049\":1,\"5269\":1,\"5292\":1}}],[\"2的诞生\",{\"1\":{\"1978\":1,\"1993\":1,\"2008\":1,\"2021\":1,\"2034\":1,\"2049\":1,\"5269\":1,\"5292\":1}}],[\"2有了一定的基本了解\",{\"1\":{\"1977\":1,\"1992\":1,\"2007\":1,\"2020\":1,\"2033\":1,\"2048\":1,\"5268\":1,\"5291\":1}}],[\"2标准在2015年5月就以rfc\",{\"1\":{\"1971\":1,\"1986\":1,\"2001\":1,\"2014\":1,\"2027\":1,\"2042\":1,\"5262\":1,\"5285\":1}}],[\"2~default~blogcommendfrombaidu~rate\",{\"1\":{\"1065\":2,\"5241\":2}}],[\"2~default~baidujs\",{\"1\":{\"1056\":1,\"5232\":1}}],[\"2101\",{\"1\":{\"1056\":1,\"1065\":1,\"5232\":1,\"5241\":1}}],[\"2147483647\",{\"1\":{\"757\":1}}],[\"2147483648\",{\"1\":{\"757\":1}}],[\"23的主机\",{\"1\":{\"2237\":1,\"5319\":1}}],[\"235^v28^pc\",{\"1\":{\"1056\":1,\"1065\":2,\"5232\":1,\"5241\":2}}],[\"230\",{\"1\":{\"83\":1,\"3482\":1}}],[\"29\",{\"1\":{\"767\":1}}],[\"2^31\",{\"1\":{\"757\":2}}],[\"2^3\",{\"1\":{\"735\":1,\"736\":1}}],[\"2^n\",{\"1\":{\"733\":2,\"734\":1}}],[\"2hash方法\",{\"0\":{\"718\":1}}],[\"2hashmap中hash方法的原理\",{\"0\":{\"713\":1}}],[\"24\",{\"1\":{\"706\":1,\"2266\":1,\"5348\":1}}],[\"2+1\",{\"1\":{\"650\":1}}],[\"2版本\",{\"1\":{\"645\":1}}],[\"2静态代理和动态代理的区别\",{\"0\":{\"597\":1}}],[\"2⼯⼚⽅法模式了解吗\",{\"0\":{\"588\":1}}],[\"2什么是设计模式\",{\"0\":{\"574\":1}}],[\"2区别分析\",{\"0\":{\"553\":1}}],[\"2remove方法\",{\"0\":{\"543\":1}}],[\"20分钟\",{\"0\":{\"3155\":1,\"5435\":1}}],[\"20w\",{\"1\":{\"2761\":1,\"5123\":1}}],[\"2009\",{\"1\":{\"5275\":1}}],[\"2000w\",{\"1\":{\"2761\":1,\"5123\":1}}],[\"200\",{\"1\":{\"2568\":4,\"3318\":1,\"4930\":4}}],[\"206\",{\"1\":{\"2266\":1,\"5348\":1}}],[\"2022\",{\"0\":{\"1925\":1,\"1927\":1,\"1941\":1,\"1944\":1,\"1946\":1,\"1948\":1,\"1950\":1,\"1952\":1,\"1955\":1,\"1962\":1,\"1964\":1,\"4031\":1,\"4033\":1,\"4047\":1,\"4050\":1,\"4052\":1,\"4054\":1,\"4056\":1,\"4058\":1,\"4061\":1,\"4068\":1,\"4070\":1}}],[\"20210608002334025\",{\"1\":{\"815\":1,\"3832\":1}}],[\"20201231\",{\"1\":{\"3366\":1}}],[\"2020\",{\"1\":{\"119\":1,\"3518\":1}}],[\"20\",{\"1\":{\"729\":1,\"748\":1,\"2150\":1,\"2232\":1,\"3138\":1,\"5314\":1,\"5418\":1}}],[\"2018年的时候\",{\"1\":{\"1973\":1,\"1988\":1,\"2003\":1,\"2016\":1,\"2029\":1,\"2044\":1,\"5264\":1,\"5287\":1}}],[\"2012\",{\"1\":{\"1915\":1,\"4504\":1}}],[\"2015\",{\"1\":{\"767\":1}}],[\"2014\",{\"1\":{\"658\":1,\"3633\":1}}],[\"2013\",{\"1\":{\"397\":1,\"5275\":1}}],[\"2获取class对象\",{\"0\":{\"303\":1}}],[\"2反射\",{\"0\":{\"283\":1}}],[\"2可查的异常\",{\"0\":{\"248\":1}}],[\"2\",{\"0\":{\"284\":1,\"303\":1,\"311\":1,\"319\":1,\"418\":1,\"445\":1,\"474\":1,\"507\":1,\"631\":1,\"714\":1,\"718\":1,\"791\":1,\"795\":1,\"1098\":1,\"1914\":1,\"1970\":1,\"1976\":1,\"1985\":1,\"1991\":1,\"2000\":1,\"2006\":1,\"2013\":1,\"2019\":1,\"2026\":1,\"2032\":1,\"2041\":1,\"2047\":1,\"2052\":1,\"2178\":1,\"2179\":1,\"2180\":1,\"2181\":1,\"2182\":1,\"2183\":1,\"2184\":1,\"2185\":1,\"2186\":1,\"2187\":1,\"2188\":1,\"2269\":1,\"2274\":1,\"2315\":1,\"3208\":1,\"3383\":1,\"3743\":1,\"4503\":1,\"5261\":1,\"5267\":1,\"5284\":1,\"5290\":1,\"5351\":1,\"5356\":1,\"5477\":1},\"1\":{\"26\":14,\"77\":1,\"306\":1,\"315\":1,\"322\":1,\"327\":1,\"349\":1,\"427\":1,\"443\":1,\"447\":1,\"459\":1,\"477\":1,\"542\":1,\"581\":1,\"741\":2,\"775\":1,\"822\":1,\"876\":1,\"886\":1,\"903\":1,\"912\":1,\"974\":1,\"1008\":1,\"1043\":1,\"1059\":1,\"1160\":1,\"1174\":1,\"1176\":1,\"1179\":1,\"1180\":1,\"1183\":1,\"1186\":1,\"1189\":4,\"1232\":1,\"1328\":1,\"1342\":1,\"1344\":1,\"1347\":1,\"1348\":1,\"1351\":1,\"1354\":1,\"1357\":4,\"1400\":1,\"1496\":1,\"1510\":1,\"1512\":1,\"1515\":1,\"1516\":1,\"1519\":1,\"1522\":1,\"1525\":4,\"1568\":1,\"1664\":1,\"1678\":1,\"1680\":1,\"1683\":1,\"1684\":1,\"1687\":1,\"1690\":1,\"1693\":4,\"1736\":1,\"1860\":1,\"1886\":2,\"1916\":1,\"1974\":2,\"1978\":1,\"1989\":2,\"1993\":1,\"2004\":2,\"2008\":1,\"2017\":2,\"2021\":1,\"2030\":2,\"2034\":1,\"2045\":2,\"2049\":1,\"2063\":1,\"2132\":3,\"2140\":1,\"2270\":2,\"2271\":1,\"2272\":1,\"2273\":1,\"2275\":1,\"2276\":1,\"2277\":1,\"2328\":1,\"2525\":1,\"2529\":1,\"2531\":1,\"2693\":1,\"2781\":1,\"2866\":1,\"3041\":3,\"3067\":1,\"3112\":1,\"3120\":1,\"3142\":1,\"3148\":1,\"3153\":1,\"3157\":1,\"3171\":1,\"3180\":1,\"3253\":1,\"3256\":1,\"3268\":1,\"3278\":1,\"3425\":14,\"3476\":1,\"3694\":1,\"3703\":1,\"3710\":1,\"3715\":1,\"3752\":1,\"3774\":1,\"3839\":1,\"3893\":1,\"3903\":1,\"3920\":1,\"3929\":1,\"3991\":1,\"4120\":1,\"4295\":3,\"4321\":1,\"4449\":1,\"4475\":2,\"4505\":1,\"4571\":1,\"4585\":1,\"4587\":1,\"4590\":1,\"4591\":1,\"4594\":1,\"4597\":1,\"4600\":4,\"4643\":1,\"4690\":1,\"4887\":1,\"4891\":1,\"4893\":1,\"5055\":1,\"5143\":1,\"5184\":1,\"5219\":1,\"5235\":1,\"5265\":2,\"5269\":1,\"5275\":3,\"5279\":1,\"5288\":2,\"5292\":1,\"5352\":2,\"5353\":1,\"5354\":1,\"5355\":1,\"5357\":1,\"5358\":1,\"5359\":1,\"5392\":1,\"5400\":1,\"5422\":1,\"5428\":1,\"5433\":1,\"5437\":1,\"5451\":1,\"5522\":1,\"5525\":1,\"5537\":1,\"5547\":1}}],[\"1完全可以hold住任何场景\",{\"1\":{\"5278\":1}}],[\"1对称加密算法有哪些\",{\"0\":{\"3389\":1}}],[\"1值等不被收集在彩虹表里\",{\"1\":{\"3352\":1,\"3369\":1}}],[\"1值等对应的原文\",{\"1\":{\"3352\":1}}],[\"1值等\",{\"1\":{\"3352\":1}}],[\"18666666666\",{\"1\":{\"3342\":1,\"3348\":1}}],[\"18\",{\"1\":{\"3136\":1,\"5416\":1}}],[\"17\",{\"1\":{\"3135\":1,\"5415\":1}}],[\"1分钟\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"1999\",{\"1\":{\"5275\":1}}],[\"19下午等了将近十多分钟面试官才进面试\",{\"1\":{\"3386\":1}}],[\"19700101\",{\"1\":{\"3362\":1}}],[\"19\",{\"1\":{\"3137\":1,\"5417\":1}}],[\"196\",{\"1\":{\"2237\":2,\"5319\":2}}],[\"19th\",{\"1\":{\"60\":1,\"3459\":1}}],[\"1针对\",{\"0\":{\"2205\":1}}],[\"1tcp\",{\"0\":{\"2097\":1,\"2136\":1,\"2179\":1,\"2190\":1}}],[\"1中的效率问题\",{\"1\":{\"1978\":1,\"1993\":1,\"2008\":1,\"2021\":1,\"2034\":1,\"2049\":1,\"5269\":1,\"5292\":1}}],[\"1局部性原理\",{\"0\":{\"1089\":1}}],[\"1400\",{\"1\":{\"2568\":2,\"4930\":2}}],[\"14主机\",{\"1\":{\"2237\":1,\"5319\":1}}],[\"14如果已经建立了连接\",{\"0\":{\"2203\":1}}],[\"14\",{\"1\":{\"775\":1,\"3132\":1,\"5412\":1}}],[\"1这个值一定是个正数\",{\"1\":{\"757\":1}}],[\"1hashmap\",{\"0\":{\"714\":1}}],[\"1hashmap的容量\",{\"0\":{\"670\":1}}],[\"13如果已经建立了连接\",{\"0\":{\"2202\":1}}],[\"1358933\",{\"1\":{\"1954\":1,\"4060\":1}}],[\"13\",{\"1\":{\"706\":1,\"3131\":1,\"3168\":1,\"5411\":1,\"5448\":1}}],[\"138\",{\"1\":{\"83\":1,\"3318\":1,\"3482\":1}}],[\"126145847\",{\"1\":{\"3401\":1}}],[\"126875303\",{\"1\":{\"2995\":1,\"4249\":1}}],[\"12345678\",{\"1\":{\"3358\":1}}],[\"123456\",{\"1\":{\"3343\":1}}],[\"123416498\",{\"1\":{\"1079\":1,\"5255\":1}}],[\"127\",{\"1\":{\"3318\":1}}],[\"120627481\",{\"1\":{\"2817\":1,\"5179\":1}}],[\"1200\",{\"1\":{\"2568\":1,\"4930\":1}}],[\"12服务器出现大量\",{\"0\":{\"2201\":1}}],[\"124891266\",{\"1\":{\"2638\":1,\"5000\":1}}],[\"124349832\",{\"1\":{\"1056\":1,\"5232\":1}}],[\"124580641\",{\"1\":{\"1056\":2,\"5232\":2}}],[\"129526131\",{\"1\":{\"1003\":1,\"4020\":1}}],[\"12\",{\"1\":{\"706\":2,\"729\":1,\"748\":1,\"1915\":1,\"3130\":1,\"3167\":1,\"4504\":1,\"5410\":1,\"5447\":1}}],[\"128106266\",{\"1\":{\"1065\":3,\"5241\":3}}],[\"128\",{\"1\":{\"697\":1,\"2714\":1,\"5076\":1}}],[\"125768706\",{\"1\":{\"412\":1}}],[\"16分钟\",{\"0\":{\"3140\":1,\"5420\":1}}],[\"16位\",{\"1\":{\"2124\":1,\"2126\":1}}],[\"16\",{\"1\":{\"688\":1,\"692\":1,\"702\":1,\"706\":1,\"775\":1,\"781\":1,\"782\":1,\"789\":1,\"2132\":1,\"3134\":1,\"5414\":1}}],[\"1size\",{\"0\":{\"684\":1}}],[\"1的低位就全是1\",{\"1\":{\"638\":1,\"3730\":1}}],[\"1什么是代理模式\",{\"0\":{\"595\":1}}],[\"1什么是反射机制\",{\"0\":{\"284\":1}}],[\"1说⼀说简单⼯⼚模式\",{\"0\":{\"584\":1}}],[\"1软件设计原则有哪些\",{\"0\":{\"573\":1}}],[\"1add方法\",{\"0\":{\"533\":1}}],[\"1比较几个重要的方法\",{\"0\":{\"532\":1}}],[\"10如何优化\",{\"0\":{\"2199\":1}}],[\"10什么是\",{\"0\":{\"2188\":1}}],[\"10086\",{\"1\":{\"2780\":1,\"5142\":1}}],[\"10000\",{\"1\":{\"2727\":1,\"5089\":1}}],[\"10000000\",{\"1\":{\"406\":1}}],[\"100\",{\"1\":{\"1928\":1,\"2266\":1,\"2588\":1,\"2589\":2,\"2590\":1,\"4034\":1,\"4950\":1,\"4951\":2,\"4952\":1,\"5348\":1}}],[\"10g\",{\"1\":{\"1013\":2,\"5189\":2}}],[\"108461284\",{\"1\":{\"970\":1,\"3987\":1}}],[\"108988011\",{\"1\":{\"629\":1,\"3721\":1}}],[\"1011000110101110011111010011011\",{\"1\":{\"750\":1}}],[\"10\",{\"1\":{\"397\":1,\"741\":2,\"775\":1,\"977\":1,\"1928\":1,\"2555\":1,\"2727\":1,\"3128\":1,\"3165\":1,\"3994\":1,\"4034\":1,\"4917\":1,\"5089\":1,\"5408\":1,\"5445\":1}}],[\"112252684\",{\"1\":{\"3401\":1}}],[\"110847701\",{\"1\":{\"2833\":1,\"4087\":1}}],[\"11服务器出现大量\",{\"0\":{\"2200\":1}}],[\"11月ietf给出了官方批准\",{\"1\":{\"1972\":1,\"1987\":1,\"2002\":1,\"2015\":1,\"2028\":1,\"2043\":1,\"5263\":1,\"5286\":1}}],[\"1111进行按位与运算后的值是相等的\",{\"1\":{\"745\":1}}],[\"11\",{\"0\":{\"1925\":1,\"4031\":1},\"1\":{\"276\":2,\"3129\":1,\"3166\":1,\"3664\":2,\"5409\":1,\"5446\":1}}],[\"113550163\",{\"1\":{\"328\":1,\"3716\":1}}],[\"113\",{\"1\":{\"265\":1}}],[\"1java异常类层次结构\",{\"0\":{\"239\":1}}],[\"1异常\",{\"0\":{\"238\":1}}],[\"15分钟\",{\"0\":{\"3117\":1,\"5397\":1},\"1\":{\"2727\":1,\"5089\":1}}],[\"15\",{\"1\":{\"83\":1,\"775\":1,\"3133\":1,\"3482\":1,\"5413\":1}}],[\"1\",{\"0\":{\"238\":1,\"239\":2,\"248\":2,\"254\":2,\"261\":2,\"267\":2,\"272\":2,\"283\":1,\"284\":1,\"303\":1,\"311\":1,\"319\":1,\"416\":1,\"441\":1,\"468\":1,\"497\":1,\"533\":1,\"543\":1,\"628\":1,\"664\":1,\"670\":1,\"684\":2,\"696\":2,\"710\":2,\"713\":1,\"714\":1,\"718\":1,\"791\":1,\"1088\":1,\"1089\":1,\"1981\":1,\"2096\":1,\"2097\":1,\"2106\":1,\"2109\":1,\"2115\":1,\"2121\":1,\"2134\":1,\"2136\":1,\"2158\":1,\"2171\":1,\"2264\":3,\"2269\":2,\"2305\":1,\"2306\":1,\"3204\":1,\"3336\":1,\"3741\":1,\"5256\":1,\"5346\":3,\"5351\":2,\"5473\":1},\"1\":{\"25\":12,\"47\":1,\"70\":1,\"76\":1,\"119\":2,\"271\":1,\"304\":1,\"312\":1,\"320\":1,\"327\":1,\"349\":2,\"401\":1,\"402\":1,\"406\":1,\"443\":2,\"447\":1,\"458\":1,\"470\":1,\"479\":1,\"480\":1,\"494\":1,\"524\":1,\"535\":2,\"539\":2,\"541\":1,\"547\":1,\"549\":1,\"581\":1,\"638\":1,\"666\":1,\"682\":1,\"688\":1,\"691\":1,\"692\":1,\"693\":1,\"719\":1,\"729\":1,\"730\":1,\"733\":1,\"734\":1,\"735\":1,\"736\":1,\"742\":1,\"757\":2,\"778\":1,\"782\":1,\"792\":2,\"821\":1,\"871\":1,\"881\":1,\"901\":1,\"912\":1,\"958\":1,\"973\":1,\"1007\":1,\"1033\":2,\"1059\":1,\"1065\":1,\"1135\":2,\"1157\":2,\"1176\":1,\"1303\":2,\"1325\":2,\"1344\":1,\"1471\":2,\"1493\":2,\"1512\":1,\"1639\":2,\"1661\":2,\"1680\":1,\"1885\":1,\"1890\":2,\"1916\":1,\"1969\":1,\"1978\":1,\"1984\":1,\"1993\":1,\"2008\":1,\"2021\":1,\"2025\":1,\"2034\":1,\"2040\":1,\"2049\":1,\"2055\":1,\"2102\":2,\"2103\":1,\"2104\":1,\"2105\":2,\"2137\":1,\"2265\":3,\"2266\":2,\"2267\":3,\"2268\":3,\"2270\":4,\"2271\":2,\"2272\":2,\"2273\":2,\"2325\":1,\"2348\":1,\"2420\":1,\"2521\":1,\"2526\":1,\"2555\":1,\"2682\":2,\"2727\":1,\"2753\":2,\"2779\":1,\"2780\":1,\"2788\":1,\"2791\":3,\"2864\":2,\"2874\":1,\"2880\":1,\"2891\":1,\"2896\":1,\"2969\":1,\"3006\":2,\"3041\":1,\"3067\":1,\"3111\":1,\"3119\":1,\"3141\":1,\"3147\":1,\"3152\":1,\"3156\":1,\"3170\":1,\"3179\":1,\"3252\":1,\"3266\":1,\"3318\":3,\"3424\":12,\"3446\":1,\"3469\":1,\"3475\":1,\"3518\":2,\"3692\":1,\"3700\":1,\"3708\":1,\"3715\":1,\"3730\":1,\"3774\":1,\"3838\":1,\"3888\":1,\"3898\":1,\"3918\":1,\"3929\":1,\"3975\":1,\"3990\":1,\"4118\":2,\"4128\":1,\"4134\":1,\"4145\":1,\"4150\":1,\"4223\":1,\"4260\":2,\"4295\":1,\"4321\":1,\"4474\":1,\"4479\":2,\"4505\":1,\"4546\":2,\"4568\":2,\"4587\":1,\"4687\":1,\"4710\":1,\"4782\":1,\"4883\":1,\"4888\":1,\"4917\":1,\"5044\":2,\"5089\":1,\"5115\":2,\"5141\":1,\"5142\":1,\"5150\":1,\"5153\":3,\"5183\":1,\"5209\":2,\"5235\":1,\"5241\":1,\"5259\":1,\"5269\":1,\"5275\":2,\"5278\":1,\"5279\":2,\"5292\":1,\"5347\":3,\"5348\":2,\"5349\":3,\"5350\":3,\"5352\":4,\"5353\":2,\"5354\":2,\"5355\":2,\"5391\":1,\"5399\":1,\"5421\":1,\"5427\":1,\"5432\":1,\"5436\":1,\"5450\":1,\"5521\":1,\"5535\":1}}],[\"页脚\",{\"1\":{\"21\":1,\"138\":1,\"3420\":1,\"3537\":1}}],[\"页面单位时间的访问数\",{\"1\":{\"2686\":1,\"5048\":1}}],[\"页面结构\",{\"0\":{\"129\":1,\"3528\":1}}],[\"页面内容\",{\"0\":{\"122\":1,\"3521\":1}}],[\"页面配置\",{\"0\":{\"114\":1,\"3513\":1},\"1\":{\"121\":1,\"3520\":1}}],[\"页面引入配置\",{\"1\":{\"33\":1,\"3432\":1}}],[\"页面信息\",{\"0\":{\"116\":1,\"3515\":1},\"1\":{\"15\":1,\"3414\":1}}],[\"页面展示\",{\"1\":{\"6\":1,\"98\":1,\"3405\":1,\"3497\":1}}],[\"评论\",{\"1\":{\"20\":1,\"135\":1,\"3198\":1,\"3419\":1,\"3534\":1,\"5467\":1}}],[\"贡献者\",{\"1\":{\"16\":1,\"134\":1,\"3415\":1,\"3533\":1}}],[\"侧边栏\",{\"1\":{\"13\":1,\"137\":1,\"3412\":1,\"3536\":1}}],[\"展示\",{\"0\":{\"27\":1,\"3426\":1},\"1\":{\"5\":1,\"97\":1,\"3404\":1,\"3496\":1}}],[\"m\",{\"0\":{\"5575\":1,\"5588\":1},\"1\":{\"2622\":5,\"2624\":1,\"2625\":5,\"2626\":2,\"2627\":1,\"4984\":5,\"4986\":1,\"4987\":5,\"4988\":2,\"4989\":1}}],[\"mvc2\",{\"1\":{\"3320\":1}}],[\"mvcc\",{\"0\":{\"2614\":1,\"4976\":1},\"1\":{\"2330\":1,\"2338\":1,\"2340\":1,\"2462\":1,\"2506\":1,\"2574\":1,\"2608\":1,\"2615\":1,\"2632\":1,\"4692\":1,\"4700\":1,\"4702\":1,\"4824\":1,\"4868\":1,\"4936\":1,\"4970\":1,\"4977\":1,\"4994\":1}}],[\"mvc的基本流程\",{\"0\":{\"813\":1,\"3830\":1}}],[\"mtu\",{\"1\":{\"2157\":1}}],[\"mq服务器更新消息状态为可发送\",{\"1\":{\"1937\":1,\"4043\":1}}],[\"mq服务器返回ack确认到生产者\",{\"1\":{\"1934\":1,\"4040\":1}}],[\"mq收到消息后\",{\"1\":{\"1933\":1,\"4039\":1}}],[\"mq\",{\"1\":{\"1928\":1,\"4034\":1}}],[\"mmap\",{\"0\":{\"1164\":1,\"1332\":1,\"1500\":1,\"1668\":1,\"4575\":1},\"1\":{\"1161\":1,\"1165\":1,\"1166\":1,\"1167\":1,\"1170\":1,\"1173\":1,\"1329\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1338\":1,\"1341\":1,\"1497\":1,\"1501\":1,\"1502\":1,\"1503\":1,\"1506\":1,\"1509\":1,\"1665\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1674\":1,\"1677\":1,\"4572\":1,\"4576\":1,\"4577\":1,\"4578\":1,\"4581\":1,\"4584\":1}}],[\"m0\",{\"1\":{\"1065\":1,\"3401\":1,\"5241\":1}}],[\"multiplexing\",{\"1\":{\"2270\":1,\"5352\":1}}],[\"murmur2\",{\"1\":{\"1024\":1,\"5200\":1}}],[\"mutex\",{\"1\":{\"537\":1,\"545\":1,\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"4525\":1}}],[\"mp\",{\"1\":{\"915\":1,\"2856\":1,\"2961\":1,\"3106\":1,\"3932\":1,\"4110\":1,\"4215\":1,\"4360\":1}}],[\"myisam\",{\"0\":{\"2320\":1,\"4682\":1},\"1\":{\"2321\":1,\"2322\":2,\"2326\":1,\"2327\":1,\"2329\":1,\"2332\":1,\"2336\":1,\"2339\":1,\"2340\":1,\"2342\":1,\"2343\":1,\"2358\":1,\"2359\":1,\"2360\":2,\"2363\":1,\"2369\":1,\"2389\":1,\"2401\":1,\"2466\":1,\"2533\":1,\"2565\":1,\"3133\":1,\"4683\":1,\"4684\":2,\"4688\":1,\"4689\":1,\"4691\":1,\"4694\":1,\"4698\":1,\"4701\":1,\"4702\":1,\"4704\":1,\"4705\":1,\"4720\":1,\"4721\":1,\"4722\":2,\"4725\":1,\"4731\":1,\"4751\":1,\"4763\":1,\"4828\":1,\"4895\":1,\"4927\":1,\"5413\":1}}],[\"myid\",{\"1\":{\"1885\":1,\"1886\":2,\"1890\":1,\"4474\":1,\"4475\":2,\"4479\":1}}],[\"mysqldump\",{\"1\":{\"2464\":2,\"4826\":2}}],[\"mysql5\",{\"1\":{\"2389\":1,\"4751\":1}}],[\"mysql\",{\"0\":{\"2317\":1,\"2318\":1,\"4679\":1,\"4680\":1},\"1\":{\"852\":1,\"2321\":2,\"2323\":2,\"2350\":1,\"2358\":1,\"2363\":1,\"2369\":1,\"2380\":1,\"2393\":1,\"2401\":1,\"2415\":1,\"2417\":1,\"2430\":2,\"2446\":1,\"2468\":1,\"2521\":1,\"2564\":1,\"2565\":2,\"2595\":1,\"2605\":1,\"2606\":2,\"2607\":1,\"2761\":1,\"3120\":1,\"3190\":1,\"3869\":1,\"4683\":2,\"4685\":2,\"4712\":1,\"4720\":1,\"4725\":1,\"4731\":1,\"4742\":1,\"4755\":1,\"4763\":1,\"4777\":1,\"4779\":1,\"4792\":2,\"4808\":1,\"4830\":1,\"4883\":1,\"4926\":1,\"4927\":2,\"4957\":1,\"4967\":1,\"4968\":2,\"4969\":1,\"5123\":1,\"5400\":1,\"5459\":1}}],[\"mybatisplus\",{\"1\":{\"3190\":1,\"5459\":1}}],[\"mybatis会利用序列化\",{\"1\":{\"989\":1,\"4006\":1}}],[\"mybatis觉得获取的数据可能会被修改\",{\"1\":{\"989\":1,\"4006\":1}}],[\"mybatis为了加快获取速度\",{\"1\":{\"989\":1,\"4006\":1}}],[\"mybatis认为所有从缓存中获取数据的操作都是只读操作\",{\"1\":{\"989\":1,\"4006\":1}}],[\"mybatis缓存机制\",{\"0\":{\"980\":1,\"3997\":1}}],[\"mybatis分页原理\",{\"0\":{\"964\":1,\"3981\":1}}],[\"mybatis\",{\"0\":{\"804\":1,\"963\":1,\"971\":1,\"3821\":1,\"3980\":1,\"3988\":1},\"1\":{\"973\":1,\"976\":1,\"978\":1,\"979\":1,\"982\":1,\"984\":1,\"991\":1,\"3990\":1,\"3993\":1,\"3995\":1,\"3996\":1,\"3999\":1,\"4001\":1,\"4008\":1}}],[\"mykey\",{\"1\":{\"1\":1}}],[\"mid=2651751537\",{\"1\":{\"3106\":1,\"4360\":1}}],[\"mid=2247483734\",{\"1\":{\"2961\":1,\"4215\":1}}],[\"mid=2247485568\",{\"1\":{\"915\":1,\"3932\":1}}],[\"mid=2247510278\",{\"1\":{\"2856\":1,\"4110\":1}}],[\"milliseconds\",{\"1\":{\"3041\":1,\"4295\":1}}],[\"mirror\",{\"1\":{\"1954\":1,\"4060\":1}}],[\"minio\",{\"1\":{\"3216\":1,\"5485\":1}}],[\"min\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"mincapacity\",{\"1\":{\"535\":3,\"539\":4}}],[\"missing\",{\"1\":{\"265\":1}}],[\"misc\",{\"1\":{\"229\":3,\"729\":1,\"775\":1,\"2880\":1,\"3623\":3,\"4134\":1}}],[\"mongodb\",{\"1\":{\"3190\":1,\"5459\":1}}],[\"monitor\",{\"1\":{\"3003\":1,\"3004\":1,\"3016\":1,\"4257\":1,\"4258\":1,\"4270\":1}}],[\"monitorexit\",{\"1\":{\"3001\":2,\"3002\":1,\"3007\":2,\"3011\":1,\"3014\":2,\"3015\":1,\"4255\":2,\"4256\":1,\"4261\":2,\"4265\":1,\"4268\":2,\"4269\":1}}],[\"monitorenter\",{\"1\":{\"3001\":2,\"3002\":1,\"3003\":1,\"3011\":1,\"3014\":2,\"3015\":1,\"4255\":2,\"4256\":1,\"4257\":1,\"4265\":1,\"4268\":2,\"4269\":1}}],[\"mode\",{\"1\":{\"2508\":1,\"2523\":1,\"2524\":1,\"2525\":1,\"2526\":1,\"2529\":1,\"2531\":1,\"2535\":1,\"4870\":1,\"4885\":1,\"4886\":1,\"4887\":1,\"4888\":1,\"4891\":1,\"4893\":1,\"4897\":1}}],[\"modelandview\",{\"1\":{\"814\":1,\"825\":1,\"826\":1,\"3831\":1,\"3842\":1,\"3843\":1}}],[\"model\",{\"1\":{\"226\":1,\"814\":1,\"827\":1,\"3620\":1,\"3831\":1,\"3844\":1}}],[\"modified\",{\"1\":{\"2267\":1,\"5349\":1}}],[\"modcount++\",{\"1\":{\"535\":1,\"547\":1,\"549\":1}}],[\"modcount\",{\"1\":{\"510\":2,\"539\":1}}],[\"more\",{\"1\":{\"115\":1,\"3514\":1}}],[\"member\",{\"1\":{\"1943\":3,\"4049\":3}}],[\"memberid\",{\"1\":{\"1033\":2,\"5209\":2}}],[\"memcached\",{\"1\":{\"2720\":1,\"5082\":1}}],[\"memcache\",{\"1\":{\"1214\":1,\"1382\":1,\"1550\":1,\"1718\":1,\"4625\":1}}],[\"memory\",{\"1\":{\"1130\":1,\"1182\":1,\"1298\":1,\"1350\":1,\"1466\":1,\"1518\":1,\"1634\":1,\"1686\":1,\"2758\":1,\"4541\":1,\"4593\":1,\"5120\":1}}],[\"message\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"3326\":1,\"4539\":1}}],[\"medium=distribute\",{\"1\":{\"1056\":1,\"1065\":1,\"5232\":1,\"5241\":1}}],[\"metrics\",{\"1\":{\"940\":1,\"3957\":1}}],[\"meta\",{\"1\":{\"905\":1,\"3922\":1}}],[\"methodproxy\",{\"1\":{\"622\":1,\"3815\":1}}],[\"methodinterceptor\",{\"1\":{\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"3813\":1,\"3814\":1,\"3815\":1,\"3816\":1}}],[\"method\",{\"1\":{\"217\":1,\"257\":1,\"260\":1,\"276\":2,\"322\":1,\"323\":4,\"513\":1,\"614\":4,\"622\":3,\"686\":1,\"691\":3,\"704\":2,\"2998\":1,\"3009\":1,\"3043\":1,\"3611\":1,\"3653\":1,\"3656\":1,\"3664\":2,\"3710\":1,\"3711\":4,\"3807\":4,\"3815\":3,\"4252\":1,\"4263\":1,\"4297\":1}}],[\"mermaid\",{\"0\":{\"91\":1,\"3490\":1}}],[\"mark\",{\"1\":{\"2840\":2,\"4094\":2}}],[\"markdown\",{\"0\":{\"27\":1,\"30\":1,\"32\":1,\"36\":1,\"3426\":1,\"3429\":1,\"3431\":1,\"3435\":1},\"1\":{\"5\":1,\"28\":1,\"29\":1,\"31\":3,\"33\":1,\"37\":3,\"39\":1,\"40\":1,\"42\":1,\"44\":1,\"97\":1,\"117\":1,\"123\":1,\"125\":1,\"3404\":1,\"3427\":1,\"3428\":1,\"3430\":3,\"3432\":1,\"3436\":3,\"3438\":1,\"3439\":1,\"3441\":1,\"3443\":1,\"3496\":1,\"3516\":1,\"3522\":1,\"3524\":1}}],[\"mac\",{\"0\":{\"2236\":1,\"2248\":1,\"5318\":1,\"5330\":1},\"1\":{\"2230\":2,\"2232\":2,\"2234\":1,\"2238\":1,\"2239\":1,\"2240\":1,\"2242\":6,\"2244\":2,\"2245\":2,\"2246\":1,\"2249\":2,\"2250\":1,\"2251\":1,\"2253\":3,\"2254\":5,\"2257\":1,\"2258\":2,\"2259\":2,\"5312\":2,\"5314\":2,\"5316\":1,\"5320\":1,\"5321\":1,\"5322\":1,\"5324\":6,\"5326\":2,\"5327\":2,\"5328\":1,\"5331\":2,\"5332\":1,\"5333\":1,\"5335\":3,\"5336\":5,\"5339\":1,\"5340\":2,\"5341\":2}}],[\"maker\",{\"1\":{\"1954\":1,\"4060\":1}}],[\"master\",{\"1\":{\"1857\":1,\"4446\":1}}],[\"mandatory\",{\"1\":{\"862\":1,\"3879\":1}}],[\"maximum\",{\"1\":{\"3043\":2,\"4297\":2}}],[\"maximumpoolsize\",{\"1\":{\"3043\":8,\"3046\":1,\"4297\":8,\"4300\":1}}],[\"maxintset\",{\"1\":{\"2699\":1,\"5061\":1}}],[\"max\",{\"1\":{\"539\":1,\"2691\":2,\"2706\":2,\"3065\":1,\"3066\":1,\"3067\":1,\"3090\":1,\"3091\":1,\"3092\":1,\"4319\":1,\"4320\":1,\"4321\":1,\"4344\":1,\"4345\":1,\"4346\":1,\"5053\":2,\"5068\":2}}],[\"match\",{\"1\":{\"2267\":2,\"5349\":2}}],[\"math\",{\"1\":{\"539\":1,\"1033\":1,\"5209\":1}}],[\"matter\",{\"1\":{\"151\":1,\"155\":1,\"3550\":1}}],[\"mapper\",{\"1\":{\"984\":1,\"4001\":1}}],[\"maptype\",{\"1\":{\"686\":3,\"691\":6,\"704\":9}}],[\"map常见面试题\",{\"0\":{\"627\":1}}],[\"map>\",{\"1\":{\"307\":1,\"3695\":1}}],[\"map\",{\"0\":{\"663\":1,\"3719\":1},\"1\":{\"288\":2,\"291\":2,\"293\":4,\"686\":5,\"691\":9,\"704\":23,\"1033\":1,\"3028\":3,\"3676\":2,\"3679\":2,\"3681\":4,\"4282\":3,\"5209\":1}}],[\"map<string\",{\"1\":{\"288\":1,\"291\":1,\"293\":2,\"299\":2,\"307\":1,\"686\":1,\"691\":3,\"704\":1,\"1033\":5,\"3676\":1,\"3679\":1,\"3681\":2,\"3687\":2,\"3695\":1,\"5209\":5}}],[\"mainreactor\",{\"1\":{\"1260\":1,\"1261\":1,\"1428\":1,\"1429\":1,\"1596\":1,\"1597\":1,\"1764\":1,\"1765\":1,\"4671\":1,\"4672\":1}}],[\"main\",{\"1\":{\"265\":1,\"276\":1,\"877\":1,\"905\":1,\"3041\":1,\"3664\":1,\"3894\":1,\"3922\":1,\"4295\":1}}],[\"mss\",{\"0\":{\"2184\":1},\"1\":{\"2069\":1,\"2156\":1}}],[\"ms\",{\"1\":{\"118\":1,\"406\":2,\"3517\":1}}],[\"mrhope\",{\"1\":{\"83\":2,\"3482\":2}}],[\"mr\",{\"1\":{\"83\":1,\"105\":1,\"3482\":1,\"3504\":1}}],[\"md5实际上既不是对称算法\",{\"1\":{\"3394\":1}}],[\"md5不是加密算法\",{\"1\":{\"3394\":1}}],[\"md5是对称加密还是非对称加密\",{\"1\":{\"3387\":1}}],[\"md5是是对称加密还是非对称加密\",{\"0\":{\"3385\":1}}],[\"md5是不可逆的\",{\"1\":{\"3330\":1}}],[\"md5可以用来生成数字签名\",{\"1\":{\"3384\":1}}],[\"md5可以用来对密码加密\",{\"1\":{\"3337\":1}}],[\"md5可以将任意长度的输入转化为128位长度的输出\",{\"1\":{\"3329\":1}}],[\"md5的对照表\",{\"1\":{\"3353\":1}}],[\"md5的应用场景\",{\"0\":{\"3335\":1}}],[\"md5的问题\",{\"0\":{\"3333\":1}}],[\"md5的特点\",{\"0\":{\"3328\":1}}],[\"md5值就会有巨大的变动\",{\"1\":{\"3331\":1}}],[\"md5\",{\"0\":{\"3324\":1},\"1\":{\"3326\":1,\"3355\":1}}],[\"mdl\",{\"1\":{\"2470\":1,\"2484\":1,\"2485\":2,\"2486\":1,\"2487\":1,\"2488\":1,\"2489\":3,\"2490\":3,\"2491\":1,\"2492\":2,\"2494\":1,\"2496\":2,\"2498\":1,\"2499\":2,\"2500\":1,\"4832\":1,\"4846\":1,\"4847\":2,\"4848\":1,\"4849\":1,\"4850\":1,\"4851\":3,\"4852\":3,\"4853\":1,\"4854\":2,\"4856\":1,\"4858\":2,\"4860\":1,\"4861\":2,\"4862\":1}}],[\"md\",{\"1\":{\"42\":1,\"3441\":1}}],[\"主内存\",{\"1\":{\"2938\":1,\"4192\":1}}],[\"主库的自增值是什么\",{\"1\":{\"2530\":1,\"4892\":1}}],[\"主从复制\",{\"0\":{\"2772\":1,\"5134\":1}}],[\"主从复制的场景\",{\"1\":{\"2529\":1,\"4891\":1}}],[\"主从结构\",{\"1\":{\"2725\":1,\"5087\":1}}],[\"主从机房同步有什么问题呢\",{\"0\":{\"1955\":1,\"4061\":1}}],[\"主键一般都是不可被修改的\",{\"1\":{\"2399\":1,\"4761\":1}}],[\"主键索引\",{\"0\":{\"2377\":1,\"4739\":1},\"1\":{\"2371\":1,\"4733\":1}}],[\"主机\",{\"1\":{\"2239\":1,\"2240\":1,\"2241\":1,\"2243\":1,\"2244\":3,\"2246\":1,\"2250\":1,\"2251\":1,\"2253\":1,\"2254\":2,\"5321\":1,\"5322\":1,\"5323\":1,\"5325\":1,\"5326\":3,\"5328\":1,\"5332\":1,\"5333\":1,\"5335\":1,\"5336\":2}}],[\"主线程\",{\"1\":{\"2730\":1,\"2731\":1,\"5092\":1,\"5093\":1}}],[\"主线程只需要把新连接传给子线程\",{\"1\":{\"1266\":1,\"1434\":1,\"1602\":1,\"1770\":1,\"4677\":1}}],[\"主线程只负责接收新连接\",{\"1\":{\"1265\":1,\"1433\":1,\"1601\":1,\"1769\":1,\"4676\":1}}],[\"主线程和子线程的交互很简单\",{\"1\":{\"1266\":1,\"1434\":1,\"1602\":1,\"1770\":1,\"4677\":1}}],[\"主线程和子线程分工明确\",{\"1\":{\"1265\":1,\"1433\":1,\"1601\":1,\"1769\":1,\"4676\":1}}],[\"主线程中的\",{\"1\":{\"1260\":1,\"1428\":1,\"1596\":1,\"1764\":1,\"4671\":1}}],[\"主题了解吗\",{\"1\":{\"3121\":1,\"5401\":1}}],[\"主题包含了一个自定义徽章可以使用\",{\"1\":{\"127\":1,\"3526\":1}}],[\"主题扩展了更多\",{\"1\":{\"42\":1,\"3441\":1}}],[\"主题扩展\",{\"0\":{\"41\":1,\"3440\":1}}],[\"主要包括两个操作\",{\"1\":{\"2878\":1,\"4132\":1}}],[\"主要有两个作用\",{\"1\":{\"2630\":1,\"4992\":1}}],[\"主要有以下字段\",{\"1\":{\"2623\":1,\"4985\":1}}],[\"主要是通过继承方式使用\",{\"1\":{\"2906\":1,\"4160\":1}}],[\"主要是单线程事件循环和\",{\"1\":{\"2671\":1,\"5033\":1}}],[\"主要是因为\",{\"1\":{\"2350\":1,\"4712\":1}}],[\"主要是为了解决http\",{\"1\":{\"1978\":1,\"1993\":1,\"2008\":1,\"2021\":1,\"2034\":1,\"2049\":1,\"5269\":1,\"5292\":1}}],[\"主要是从速度\",{\"1\":{\"782\":1}}],[\"主要的流程解释下\",{\"1\":{\"1930\":1,\"4036\":1}}],[\"主要的方法有两种\",{\"1\":{\"1120\":1,\"1288\":1,\"1456\":1,\"1624\":1,\"4531\":1}}],[\"主要依赖\",{\"1\":{\"1863\":1,\"4452\":1}}],[\"主要为\",{\"1\":{\"1860\":1,\"4449\":1}}],[\"主要因为要考虑子进程\",{\"1\":{\"1252\":1,\"1420\":1,\"1588\":1,\"1756\":1,\"4663\":1}}],[\"主要功能如下\",{\"1\":{\"957\":1,\"3974\":1}}],[\"主要功能与配置演示\",{\"0\":{\"3\":1,\"3402\":1}}],[\"主要原因是位运算直接对内存数据进行操作\",{\"1\":{\"730\":1}}],[\"主要⽬的是解耦合服务提供者和使⽤者\",{\"1\":{\"596\":1,\"3789\":1}}],[\"主要用来提高\",{\"1\":{\"2725\":1,\"5087\":1}}],[\"主要用来加载\",{\"1\":{\"208\":1,\"3602\":1}}],[\"主要用于spring\",{\"1\":{\"923\":1,\"3940\":1}}],[\"主要用在迭代器里\",{\"1\":{\"519\":1}}],[\"主要区别在于因为实现方式的不同\",{\"1\":{\"499\":1}}],[\"主要负责加载\",{\"1\":{\"209\":1,\"3603\":1}}],[\"主要从\",{\"1\":{\"28\":1,\"3427\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"sm2\",{\"1\":{\"3392\":1}}],[\"sm1和sm4\",{\"1\":{\"3390\":1}}],[\"s模式\",{\"1\":{\"3130\":1,\"5410\":1}}],[\"swap\",{\"1\":{\"2862\":1,\"2874\":1,\"2900\":1,\"4116\":1,\"4128\":1,\"4154\":1}}],[\"sds\",{\"1\":{\"2679\":1,\"2680\":2,\"2681\":5,\"2682\":2,\"2683\":3,\"5041\":1,\"5042\":2,\"5043\":5,\"5044\":2,\"5045\":3}}],[\"s锁\",{\"1\":{\"2537\":1,\"4899\":1}}],[\"ssl加密协议\",{\"1\":{\"5278\":1}}],[\"ssl\",{\"1\":{\"2275\":1,\"2282\":2,\"5357\":1,\"5364\":2}}],[\"ssize\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4588\":1}}],[\"sn=c50a434302cc06797828782970da190e\",{\"1\":{\"3106\":1,\"4360\":1}}],[\"sn=c5ba880fd0c5d82e39531fa42cb036ac\",{\"1\":{\"915\":1,\"3932\":1}}],[\"sn=8509d4aa61d08550c2b7668314da3582\",{\"1\":{\"2961\":1,\"4215\":1}}],[\"sn=a58a9ec9f805d0e109c4b09cd497c9ca\",{\"1\":{\"2856\":1,\"4110\":1}}],[\"snapshotting\",{\"1\":{\"2721\":1,\"5083\":1}}],[\"snmp\",{\"1\":{\"2163\":1}}],[\"schedule服务\",{\"1\":{\"3286\":1,\"5555\":1}}],[\"scheduledthreadpool\",{\"1\":{\"3067\":1,\"3083\":1,\"3092\":1,\"4321\":1,\"4337\":1,\"4346\":1}}],[\"scene=21\",{\"1\":{\"3106\":1,\"4360\":1}}],[\"scene=27\",{\"1\":{\"2856\":1,\"2961\":1,\"4110\":1,\"4215\":1}}],[\"score\",{\"1\":{\"1943\":2,\"4049\":2}}],[\"scatter\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4593\":1}}],[\"svn\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"svg\",{\"1\":{\"83\":1,\"3482\":1}}],[\"sg\",{\"1\":{\"1182\":1,\"1183\":1,\"1185\":1,\"1350\":1,\"1351\":1,\"1353\":1,\"1518\":1,\"1519\":1,\"1521\":1,\"1686\":1,\"1687\":1,\"1689\":1,\"4593\":1,\"4594\":1,\"4596\":1}}],[\"sha等加密算法占据着重要的位置\",{\"1\":{\"3387\":1}}],[\"sha\",{\"1\":{\"3352\":3,\"3369\":1}}],[\"share\",{\"1\":{\"2508\":1,\"2535\":1,\"4870\":1,\"4897\":1}}],[\"shared\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4541\":1}}],[\"shutdown\",{\"1\":{\"3041\":1,\"4295\":1}}],[\"shutdown等\",{\"1\":{\"940\":1,\"3957\":1}}],[\"shouldparkafterfailedacquire\",{\"1\":{\"2924\":1,\"4178\":1}}],[\"shortest\",{\"1\":{\"2214\":1,\"2307\":1,\"5296\":1}}],[\"source\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"source=distribute\",{\"1\":{\"1065\":1,\"5241\":1}}],[\"sockfd\",{\"1\":{\"1166\":1,\"1334\":1,\"1502\":1,\"1670\":1,\"4577\":1}}],[\"socket\",{\"0\":{\"2204\":1,\"2205\":1},\"1\":{\"1134\":1,\"1140\":5,\"1141\":2,\"1144\":2,\"1149\":1,\"1150\":1,\"1171\":1,\"1172\":1,\"1174\":1,\"1177\":1,\"1180\":1,\"1182\":1,\"1185\":2,\"1302\":1,\"1308\":5,\"1309\":2,\"1312\":2,\"1317\":1,\"1318\":1,\"1339\":1,\"1340\":1,\"1342\":1,\"1345\":1,\"1348\":1,\"1350\":1,\"1353\":2,\"1470\":1,\"1476\":5,\"1477\":2,\"1480\":2,\"1485\":1,\"1486\":1,\"1507\":1,\"1508\":1,\"1510\":1,\"1513\":1,\"1516\":1,\"1518\":1,\"1521\":2,\"1638\":1,\"1644\":5,\"1645\":2,\"1648\":2,\"1653\":1,\"1654\":1,\"1675\":1,\"1676\":1,\"1678\":1,\"1681\":1,\"1684\":1,\"1686\":1,\"1689\":2,\"2089\":1,\"2090\":1,\"2116\":1,\"2118\":1,\"4545\":1,\"4551\":5,\"4552\":2,\"4555\":2,\"4560\":1,\"4561\":1,\"4582\":1,\"4583\":1,\"4585\":1,\"4588\":1,\"4591\":1,\"4593\":1,\"4596\":2}}],[\"sockets\",{\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"4542\":1}}],[\"sort\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"something\",{\"1\":{\"257\":1,\"3653\":1}}],[\"sqlsession\",{\"1\":{\"982\":5,\"984\":2,\"996\":1,\"3999\":5,\"4001\":2,\"4013\":1}}],[\"sql\",{\"1\":{\"974\":1,\"976\":2,\"977\":1,\"982\":1,\"984\":3,\"2330\":1,\"2411\":2,\"2592\":1,\"2605\":1,\"2657\":1,\"2664\":1,\"3991\":1,\"3993\":2,\"3994\":1,\"3999\":1,\"4001\":3,\"4692\":1,\"4773\":2,\"4954\":1,\"4967\":1,\"5019\":1,\"5026\":1}}],[\"sqlexception等以及用户自定义的exception异常\",{\"1\":{\"247\":1,\"3643\":1}}],[\"sleuth\",{\"1\":{\"1827\":1,\"4416\":1}}],[\"slf4j\",{\"1\":{\"920\":1,\"3937\":1}}],[\"slide\",{\"0\":{\"2\":1}}],[\"src\",{\"1\":{\"905\":1,\"3922\":1}}],[\"spdy\",{\"1\":{\"5275\":7}}],[\"spread\",{\"1\":{\"775\":1,\"789\":1}}],[\"spring在企业级开发框架中无人能敌\",{\"1\":{\"1823\":1,\"4412\":1}}],[\"springcloud中的组件有那些\",{\"1\":{\"1826\":1,\"4415\":1}}],[\"springcloud\",{\"1\":{\"1796\":1,\"4385\":1}}],[\"springframework\",{\"1\":{\"930\":1,\"3947\":1}}],[\"springfactoriesloader\",{\"1\":{\"900\":1,\"3917\":1}}],[\"springboot的核心配置文件是application和bootstrap配置文件\",{\"1\":{\"922\":1,\"3939\":1}}],[\"springbootapplication或者\",{\"1\":{\"900\":1,\"3917\":1}}],[\"spring解决\",{\"1\":{\"880\":1,\"3897\":1}}],[\"spring如何解决循环依赖问题\",{\"0\":{\"869\":1,\"3886\":1}}],[\"spring事务机制\",{\"0\":{\"837\":1,\"3854\":1}}],[\"spring的设计模式\",{\"0\":{\"829\":1,\"3846\":1}}],[\"springmvc\",{\"0\":{\"804\":1,\"3821\":1},\"1\":{\"816\":1,\"836\":1,\"3833\":1,\"3853\":1}}],[\"spring\",{\"0\":{\"804\":2,\"838\":1,\"850\":1,\"857\":1,\"899\":1,\"910\":1,\"914\":1,\"954\":1,\"1790\":1,\"1791\":1,\"1817\":1,\"3821\":2,\"3855\":1,\"3867\":1,\"3874\":1,\"3916\":1,\"3927\":1,\"3931\":1,\"3971\":1,\"4379\":1,\"4380\":1,\"4406\":1,\"5581\":1,\"5594\":1},\"1\":{\"327\":2,\"587\":1,\"606\":1,\"619\":1,\"807\":3,\"808\":2,\"811\":1,\"817\":1,\"820\":1,\"826\":1,\"830\":1,\"831\":1,\"832\":1,\"833\":1,\"835\":1,\"836\":1,\"845\":1,\"870\":1,\"875\":1,\"884\":1,\"885\":1,\"893\":3,\"895\":1,\"897\":1,\"898\":2,\"900\":2,\"905\":5,\"907\":3,\"909\":2,\"929\":3,\"940\":2,\"942\":1,\"944\":1,\"945\":1,\"946\":1,\"947\":1,\"957\":1,\"1793\":2,\"1823\":2,\"1827\":9,\"1828\":1,\"3061\":1,\"3125\":1,\"3190\":2,\"3194\":1,\"3715\":2,\"3780\":1,\"3799\":1,\"3812\":1,\"3824\":3,\"3825\":2,\"3828\":1,\"3834\":1,\"3837\":1,\"3843\":1,\"3847\":1,\"3848\":1,\"3849\":1,\"3850\":1,\"3852\":1,\"3853\":1,\"3862\":1,\"3887\":1,\"3892\":1,\"3901\":1,\"3902\":1,\"3910\":3,\"3912\":1,\"3914\":1,\"3915\":2,\"3917\":2,\"3922\":5,\"3924\":3,\"3926\":2,\"3946\":3,\"3957\":2,\"3959\":1,\"3961\":1,\"3962\":1,\"3963\":1,\"3964\":1,\"3974\":1,\"4315\":1,\"4382\":2,\"4412\":2,\"4416\":9,\"4417\":1,\"5405\":1,\"5459\":2,\"5463\":1}}],[\"spm=1001\",{\"1\":{\"658\":1,\"1056\":1,\"1065\":1,\"3633\":1,\"5232\":1,\"5241\":1}}],[\"s\",{\"0\":{\"5576\":1,\"5580\":1},\"1\":{\"510\":4,\"513\":3,\"915\":1,\"1780\":1,\"2544\":1,\"2545\":5,\"2546\":2,\"2550\":1,\"2556\":1,\"2856\":1,\"2961\":1,\"2999\":1,\"3106\":1,\"3130\":1,\"3932\":1,\"4110\":1,\"4215\":1,\"4253\":1,\"4360\":1,\"4369\":1,\"4906\":1,\"4907\":5,\"4908\":2,\"4912\":1,\"4918\":1,\"5410\":1}}],[\"salt值\",{\"1\":{\"3373\":1,\"3374\":1,\"3376\":1,\"3379\":1,\"3380\":1}}],[\"save\",{\"1\":{\"510\":1,\"513\":1,\"2727\":3,\"2730\":1,\"5089\":3,\"5092\":1}}],[\"safe\",{\"1\":{\"503\":1}}],[\"second\",{\"1\":{\"3305\":1}}],[\"secondary\",{\"1\":{\"2383\":1,\"4745\":1}}],[\"sexnx\",{\"1\":{\"3290\":1,\"5559\":1}}],[\"seo\",{\"1\":{\"2283\":2,\"5365\":2}}],[\"session\",{\"1\":{\"2685\":1,\"5047\":1}}],[\"ses\",{\"1\":{\"1945\":2,\"4051\":2}}],[\"send\",{\"1\":{\"1198\":1,\"1225\":1,\"1230\":1,\"1247\":1,\"1263\":1,\"1366\":1,\"1393\":1,\"1398\":1,\"1415\":1,\"1431\":1,\"1534\":1,\"1561\":1,\"1566\":1,\"1583\":1,\"1599\":1,\"1702\":1,\"1729\":1,\"1734\":1,\"1751\":1,\"1767\":1,\"4609\":1,\"4636\":1,\"4641\":1,\"4658\":1,\"4674\":1}}],[\"sendfile\",{\"0\":{\"1175\":1,\"1343\":1,\"1511\":1,\"1679\":1,\"4586\":1},\"1\":{\"1162\":1,\"1176\":1,\"1177\":1,\"1183\":1,\"1194\":2,\"1330\":1,\"1344\":1,\"1345\":1,\"1351\":1,\"1362\":2,\"1498\":1,\"1512\":1,\"1513\":1,\"1519\":1,\"1530\":2,\"1666\":1,\"1680\":1,\"1681\":1,\"1687\":1,\"1698\":2,\"4573\":1,\"4587\":1,\"4588\":1,\"4594\":1,\"4605\":2}}],[\"selete\",{\"1\":{\"1158\":1,\"1326\":1,\"1494\":1,\"1662\":1,\"4569\":1}}],[\"select\",{\"0\":{\"2659\":2,\"5021\":2},\"1\":{\"977\":3,\"1136\":1,\"1137\":1,\"1139\":1,\"1140\":2,\"1141\":1,\"1156\":1,\"1225\":1,\"1227\":1,\"1242\":1,\"1260\":1,\"1261\":1,\"1304\":1,\"1305\":1,\"1307\":1,\"1308\":2,\"1309\":1,\"1324\":1,\"1393\":1,\"1395\":1,\"1410\":1,\"1428\":1,\"1429\":1,\"1472\":1,\"1473\":1,\"1475\":1,\"1476\":2,\"1477\":1,\"1492\":1,\"1561\":1,\"1563\":1,\"1578\":1,\"1596\":1,\"1597\":1,\"1640\":1,\"1641\":1,\"1643\":1,\"1644\":2,\"1645\":1,\"1660\":1,\"1729\":1,\"1731\":1,\"1746\":1,\"1764\":1,\"1765\":1,\"2439\":1,\"2489\":2,\"2494\":1,\"2495\":1,\"2497\":2,\"2506\":2,\"2507\":1,\"2508\":2,\"2528\":1,\"2534\":1,\"2535\":2,\"2608\":1,\"2609\":2,\"2660\":1,\"2661\":1,\"2662\":1,\"3994\":3,\"4547\":1,\"4548\":1,\"4550\":1,\"4551\":2,\"4552\":1,\"4567\":1,\"4636\":1,\"4638\":1,\"4653\":1,\"4671\":1,\"4672\":1,\"4801\":1,\"4851\":2,\"4856\":1,\"4857\":1,\"4859\":2,\"4868\":2,\"4869\":1,\"4870\":2,\"4890\":1,\"4896\":1,\"4897\":2,\"4970\":1,\"4971\":2,\"5022\":1,\"5023\":1,\"5024\":1}}],[\"semaphores\",{\"1\":{\"1129\":1,\"1297\":1,\"1465\":1,\"1633\":1,\"4540\":1}}],[\"semaphore\",{\"1\":{\"1116\":1,\"1284\":1,\"1452\":1,\"1620\":1,\"2906\":1,\"4160\":1,\"4527\":1}}],[\"sequencenumber\",{\"1\":{\"1063\":1,\"5239\":1}}],[\"server3\",{\"1\":{\"1887\":1,\"1890\":5,\"1897\":2,\"1900\":2,\"4476\":1,\"4479\":5,\"4486\":2,\"4489\":2}}],[\"server2\",{\"1\":{\"1886\":4,\"1888\":1,\"1897\":2,\"1902\":2,\"4475\":4,\"4477\":1,\"4486\":2,\"4491\":2}}],[\"server1也会\",{\"1\":{\"1886\":1,\"4475\":1}}],[\"server1\",{\"1\":{\"1885\":3,\"1886\":2,\"1890\":5,\"1897\":3,\"1900\":3,\"1902\":1,\"4474\":3,\"4475\":2,\"4479\":5,\"4486\":3,\"4489\":3,\"4491\":1}}],[\"server\",{\"1\":{\"920\":1,\"1783\":1,\"1888\":1,\"1889\":1,\"1890\":2,\"1891\":1,\"1902\":2,\"2273\":1,\"2285\":1,\"2287\":1,\"2288\":1,\"2292\":1,\"2297\":1,\"2298\":2,\"2299\":1,\"2300\":1,\"2301\":1,\"2302\":2,\"2735\":1,\"2763\":1,\"2764\":1,\"2765\":1,\"2767\":1,\"2770\":1,\"3316\":2,\"3937\":1,\"4372\":1,\"4477\":1,\"4478\":1,\"4479\":2,\"4480\":1,\"4491\":2,\"5097\":1,\"5125\":1,\"5126\":1,\"5127\":1,\"5129\":1,\"5132\":1,\"5355\":1,\"5367\":1,\"5369\":1,\"5370\":1,\"5374\":1,\"5379\":1,\"5380\":2,\"5381\":1,\"5382\":1,\"5383\":1,\"5384\":2}}],[\"serializable\",{\"1\":{\"856\":1,\"2596\":1,\"2829\":1,\"3873\":1,\"4083\":1,\"4958\":1}}],[\"serialized\",{\"1\":{\"513\":1}}],[\"serialize\",{\"1\":{\"510\":1,\"513\":1}}],[\"serialdata\",{\"1\":{\"510\":1}}],[\"segmentmask\",{\"1\":{\"775\":1}}],[\"segmentshift\",{\"1\":{\"775\":1}}],[\"segment\",{\"1\":{\"775\":1}}],[\"se\",{\"1\":{\"488\":1}}],[\"set或get方法时才创建它们\",{\"1\":{\"3026\":1,\"4280\":1}}],[\"setnx\",{\"1\":{\"2687\":1,\"3291\":1,\"5049\":1,\"5560\":1}}],[\"setting\",{\"1\":{\"984\":1,\"4001\":1}}],[\"setter循环依赖注入解决方案\",{\"1\":{\"875\":1,\"3892\":1}}],[\"set等的父接口\",{\"1\":{\"465\":1}}],[\"set如何保证元素不重复\",{\"0\":{\"456\":1}}],[\"set在元素插入时是要有一定的方法来判断元素是否重复的\",{\"1\":{\"455\":1}}],[\"set可以用来去重\",{\"1\":{\"455\":1}}],[\"set特点\",{\"1\":{\"454\":1}}],[\"set都是继承自collection接口\",{\"1\":{\"451\":1}}],[\"set和list区别\",{\"0\":{\"450\":1}}],[\"set还有一个重要的实现类treeset\",{\"1\":{\"444\":1}}],[\"set\",{\"0\":{\"440\":1,\"2696\":1,\"3718\":1,\"5058\":1},\"1\":{\"2536\":1,\"2674\":1,\"2698\":1,\"2699\":2,\"2700\":1,\"2780\":1,\"3022\":1,\"3026\":1,\"3028\":2,\"3043\":1,\"3290\":1,\"4276\":1,\"4280\":1,\"4282\":2,\"4297\":1,\"4898\":1,\"5036\":1,\"5060\":1,\"5061\":2,\"5062\":1,\"5142\":1,\"5559\":1}}],[\"setaccessible\",{\"1\":{\"316\":1,\"686\":2,\"691\":3,\"704\":8,\"3704\":1}}],[\"since\",{\"1\":{\"2267\":2,\"5349\":2}}],[\"singlethreadexecutor\",{\"1\":{\"3081\":1,\"3090\":1,\"4335\":1,\"4344\":1}}],[\"singlethreadexector\",{\"1\":{\"3065\":1,\"4319\":1}}],[\"singlethreadscheduledexecutor\",{\"1\":{\"3067\":1,\"3092\":1,\"4321\":1,\"4346\":1}}],[\"singleton\",{\"1\":{\"581\":6,\"3774\":6}}],[\"single\",{\"1\":{\"775\":1,\"2464\":1,\"4826\":1}}],[\"signal\",{\"1\":{\"1127\":1,\"1295\":1,\"1463\":1,\"1631\":1,\"4538\":1}}],[\"simple\",{\"1\":{\"999\":1,\"4016\":1}}],[\"simpletrycatch\",{\"1\":{\"274\":1,\"276\":1,\"3662\":1,\"3664\":1}}],[\"size和capacity之间有啥关系\",{\"1\":{\"683\":1}}],[\"size++\",{\"1\":{\"539\":1}}],[\"size\",{\"1\":{\"539\":3,\"547\":2,\"672\":1,\"675\":1,\"686\":5,\"688\":1,\"699\":1,\"704\":10,\"706\":2,\"1024\":3,\"1033\":3,\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4588\":1,\"5200\":3,\"5209\":3}}],[\"site\",{\"1\":{\"83\":2,\"3482\":2}}],[\"store\",{\"1\":{\"2947\":1,\"4201\":1}}],[\"sticky是\",{\"1\":{\"1047\":1,\"5223\":1}}],[\"stickyassignor的分配策略\",{\"1\":{\"1055\":1,\"5231\":1}}],[\"stickyassignor算法比较复杂\",{\"1\":{\"1051\":1,\"5227\":1}}],[\"stickyassignor分区分配算法\",{\"1\":{\"1047\":1,\"5223\":1}}],[\"stickyassignor\",{\"1\":{\"1027\":1,\"1046\":1,\"5203\":1,\"5222\":1}}],[\"stuent\",{\"1\":{\"2476\":1,\"4838\":1}}],[\"student\",{\"1\":{\"977\":2,\"2475\":1,\"2476\":1,\"3994\":2,\"4837\":1,\"4838\":1}}],[\"stuff\",{\"1\":{\"510\":1}}],[\"stream\",{\"1\":{\"510\":1,\"513\":1,\"1827\":1,\"4416\":1}}],[\"stringbuffer\",{\"1\":{\"3131\":1,\"5411\":1}}],[\"stringbuilder\",{\"1\":{\"3131\":1,\"5411\":1}}],[\"stringhash32\",{\"1\":{\"729\":1,\"775\":1}}],[\"stringname\",{\"1\":{\"321\":1}}],[\"string>\",{\"1\":{\"288\":1,\"291\":1,\"293\":2,\"299\":2,\"307\":1,\"686\":2,\"691\":6,\"704\":1,\"3676\":1,\"3679\":1,\"3681\":2,\"3687\":2,\"3695\":1}}],[\"string\",{\"0\":{\"2677\":1,\"5039\":1},\"1\":{\"214\":1,\"215\":1,\"217\":1,\"218\":2,\"229\":1,\"265\":2,\"293\":1,\"299\":1,\"321\":1,\"323\":2,\"729\":2,\"775\":2,\"822\":1,\"877\":1,\"1024\":2,\"1033\":2,\"2674\":1,\"2679\":1,\"3041\":1,\"3310\":1,\"3608\":1,\"3609\":1,\"3611\":1,\"3612\":2,\"3623\":1,\"3681\":1,\"3687\":1,\"3709\":2,\"3711\":2,\"3839\":1,\"3894\":1,\"4295\":1,\"5036\":1,\"5041\":1,\"5200\":2,\"5209\":2}}],[\"start\",{\"1\":{\"1033\":3,\"2536\":1,\"4898\":1,\"5209\":3}}],[\"starter解决的是依赖管理配置复杂的问题\",{\"1\":{\"942\":1,\"3959\":1}}],[\"starter的目的也是简化配置\",{\"1\":{\"942\":1,\"3959\":1}}],[\"starter\",{\"0\":{\"941\":1,\"3958\":1},\"1\":{\"900\":1,\"907\":1,\"939\":1,\"942\":1,\"944\":1,\"945\":1,\"946\":1,\"947\":2,\"955\":1,\"3917\":1,\"3924\":1,\"3956\":1,\"3959\":1,\"3961\":1,\"3962\":1,\"3963\":1,\"3964\":2,\"3972\":1}}],[\"start2\",{\"1\":{\"406\":2}}],[\"start1\",{\"1\":{\"406\":2}}],[\"stack<>\",{\"1\":{\"349\":1}}],[\"stack<integer>\",{\"1\":{\"349\":1}}],[\"stack\",{\"0\":{\"337\":1,\"343\":1,\"367\":1},\"1\":{\"339\":1,\"342\":1,\"344\":1,\"347\":2,\"349\":4,\"351\":2,\"370\":1,\"373\":1,\"383\":2,\"384\":1,\"388\":2,\"391\":1,\"392\":2,\"393\":1,\"396\":1,\"397\":2,\"411\":1}}],[\"status\",{\"1\":{\"3256\":2,\"5525\":2}}],[\"statement\",{\"1\":{\"2529\":1,\"4891\":1}}],[\"statements\",{\"1\":{\"257\":1,\"3653\":1}}],[\"state\",{\"1\":{\"510\":1,\"513\":1}}],[\"static\",{\"1\":{\"257\":1,\"260\":1,\"265\":1,\"271\":2,\"274\":1,\"276\":1,\"581\":2,\"612\":1,\"678\":1,\"682\":1,\"729\":1,\"781\":1,\"789\":1,\"877\":1,\"3041\":1,\"3653\":1,\"3656\":1,\"3662\":1,\"3664\":1,\"3774\":2,\"3805\":1,\"3894\":1,\"4295\":1}}],[\"sum\",{\"1\":{\"1095\":5,\"1096\":3}}],[\"submitted\",{\"1\":{\"3043\":1,\"4297\":1}}],[\"submit\",{\"1\":{\"3041\":8,\"4295\":8}}],[\"subreactor\",{\"1\":{\"1261\":1,\"1262\":1,\"1429\":1,\"1430\":1,\"1597\":1,\"1598\":1,\"1765\":1,\"1766\":1,\"4672\":1,\"4673\":1}}],[\"sublist\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"subscriptions\",{\"1\":{\"1033\":3,\"5209\":3}}],[\"subscription>\",{\"1\":{\"1033\":1,\"5209\":1}}],[\"subclasses\",{\"1\":{\"217\":1,\"3611\":1}}],[\"supported\",{\"1\":{\"865\":1,\"3882\":1}}],[\"supports\",{\"1\":{\"861\":1,\"3878\":1}}],[\"sun\",{\"1\":{\"229\":3,\"729\":1,\"775\":1,\"3623\":3}}],[\"syscall\",{\"1\":{\"2745\":1,\"5107\":1}}],[\"system\",{\"1\":{\"229\":2,\"265\":1,\"271\":2,\"406\":6,\"535\":1,\"539\":1,\"547\":1,\"549\":1,\"686\":2,\"691\":3,\"704\":8,\"909\":1,\"1158\":1,\"1267\":1,\"1326\":1,\"1435\":1,\"1494\":1,\"1603\":1,\"1662\":1,\"1771\":1,\"2998\":1,\"3009\":1,\"3043\":1,\"3623\":2,\"3926\":1,\"4252\":1,\"4263\":1,\"4297\":1,\"4569\":1,\"4678\":1}}],[\"synchronousqueue\",{\"1\":{\"3066\":2,\"3091\":1,\"4320\":2,\"4345\":1}}],[\"synchronization\",{\"1\":{\"513\":1}}],[\"synchronized关键字原理\",{\"1\":{\"3000\":1,\"3010\":1,\"4254\":1,\"4264\":1}}],[\"synchronizeddemo2\",{\"1\":{\"3009\":1,\"4263\":1}}],[\"synchronizeddemo\",{\"1\":{\"2998\":1,\"2999\":3,\"4252\":1,\"4253\":3}}],[\"synchronized原理\",{\"0\":{\"2996\":1,\"4250\":1}}],[\"synchronized是悲观锁\",{\"1\":{\"2859\":1,\"4113\":1}}],[\"synchronized和cas实现加锁效果\",{\"1\":{\"2858\":1,\"4112\":1}}],[\"synchronized和lock效率没差\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"synchronized的效率会远小于lock\",{\"1\":{\"1926\":1,\"4032\":1}}],[\"synchronizedlist可以指定锁定的对象\",{\"1\":{\"571\":1}}],[\"synchronizedlist有很好的扩展和兼容功能\",{\"1\":{\"569\":1}}],[\"synchronizedlist和vector最主要的区别\",{\"1\":{\"568\":1}}],[\"synchronizedlist和vector的一个比较明显区别就是一个使用了同步代码块\",{\"1\":{\"552\":1}}],[\"synchronizedlist和vector的区别\",{\"0\":{\"526\":1}}],[\"synchronizedlist中实现的类并没有都使用synchronized同步代码块\",{\"1\":{\"565\":1}}],[\"synchronizedlist的同步代码块锁定的是mutex对象\",{\"1\":{\"563\":1}}],[\"synchronizedlist的实现\",{\"1\":{\"536\":1,\"544\":1}}],[\"synchronizedlist里面实现的方法几乎都是使用同步代码块包上list的方法\",{\"1\":{\"552\":1}}],[\"synchronizedlist使用同步代码块实现\",{\"1\":{\"541\":1}}],[\"synchronizedlist\",{\"1\":{\"528\":1,\"531\":1,\"567\":1}}],[\"synchronizedlist是java\",{\"1\":{\"527\":1}}],[\"synchronized\",{\"0\":{\"1925\":1,\"2997\":1,\"3008\":1,\"4031\":1,\"4251\":1,\"4262\":1},\"1\":{\"229\":1,\"513\":1,\"535\":1,\"537\":1,\"545\":1,\"549\":1,\"581\":2,\"582\":1,\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"2821\":1,\"2823\":2,\"2824\":1,\"2825\":1,\"2828\":1,\"2898\":1,\"2970\":1,\"2979\":1,\"2998\":2,\"3001\":1,\"3009\":2,\"3011\":3,\"3014\":1,\"3015\":2,\"3017\":1,\"3623\":1,\"3774\":2,\"3775\":1,\"4075\":1,\"4077\":2,\"4078\":1,\"4079\":1,\"4082\":1,\"4152\":1,\"4224\":1,\"4233\":1,\"4252\":2,\"4255\":1,\"4263\":2,\"4265\":3,\"4268\":1,\"4269\":2,\"4271\":1,\"4525\":1}}],[\"sync\",{\"1\":{\"2830\":4,\"2832\":1,\"2993\":3,\"4084\":4,\"4086\":1,\"4247\":3}}],[\"syn\",{\"0\":{\"2188\":2},\"1\":{\"2073\":2,\"2099\":1,\"2102\":1,\"2104\":1}}],[\"sk\",{\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,Et(t,{fields:[p.heading,p.text,p.customFields],storeFields:[p.heading,p.text,p.customFields]})]));self.onmessage=({data:{query:e,locale:t,options:s}})=>{self.postMessage(kt(e,vt[t],s))};
//# sourceMappingURL=index.js.map
