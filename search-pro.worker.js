const it="ENTRIES",R="KEYS",q="VALUES",_="";class S{constructor(t,s){const n=t._tree,i=Array.from(n.keys());this.set=t,this._type=s,this._path=i.length>0?[{node:n,keys:i}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=x(this._path);if(x(s)===_)return{done:!1,value:this.result()};const n=t.get(x(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=x(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>x(t)).filter(t=>t!==_).join("")}value(){return x(this._path).node.get(_)}result(){switch(this._type){case q:return this.value();case R:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const x=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const i=t.length+1,u=i+s,o=new Uint8Array(u*i).fill(s+1);for(let r=0;r<i;++r)o[r]=r;for(let r=1;r<u;++r)o[r*i]=r;return P(e,t,s,n,o,1,i,""),n},P=(e,t,s,n,i,u,o,r)=>{const a=u*o;t:for(const c of e.keys())if(c===_){const d=i[a-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const m=c[l],F=o*d,f=F-o;let h=i[F];const g=Math.max(0,d-s-1),A=Math.min(o-1,d+s);for(let C=g;C<A;++C){const B=m!==t[C],b=i[f+C]+ +B,z=i[f+C+1]+1,D=i[F+C]+1,W=i[F+C+1]=Math.min(b,z,D);W<h&&(h=W)}if(h>s)continue t}P(e.get(c),t,s,n,i,d,o,r+c)}};let N=class v{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[i,u]=V(n);for(const o of i.keys())if(o!==_&&o.startsWith(u)){const r=new Map;return r.set(o.slice(u.length),i.get(o)),new v(r,t)}}return new v(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new S(this,it)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=j(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=j(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new S(this,R)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,L(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=L(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=L(this._tree,t);let i=n.get(_);return i===void 0&&n.set(_,i=s()),i}values(){return new S(this,q)}[Symbol.iterator](){return this.entries()}static from(t){const s=new v;for(const[n,i]of t)s.set(n,i);return s}static fromObject(t){return v.from(Object.entries(t))}};const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},j=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return j(e.get(s),t.slice(s.length))},L=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const o=Math.min(s-n,u.length);let r=1;for(;r<o&&t[n+r]===u[r];)++r;const a=e.get(u);if(r===u.length)e=a;else{const c=new Map;c.set(u.slice(r),a),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const i=new Map;return e.set(t.slice(n),i),i}return e},ot=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)G(n);else if(s.size===1){const[i,u]=s.entries().next().value;J(n,i,u)}}},G=e=>{if(e.length===0)return;const[t,s]=V(e);if(t.delete(s),t.size===0)G(e.slice(0,-1));else if(t.size===1){const[n,i]=t.entries().next().value;n!==_&&J(e.slice(0,-1),n,i)}},J=(e,t,s)=>{if(e.length===0)return;const[n,i]=V(e);n.set(i+t,s),n.delete(i)},V=e=>e[e.length-1],rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,T="or",U="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},H=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},ht=({score:e},{score:t})=>t-e,dt=()=>new Map,O=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},K=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,at={[T]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:i,terms:u,match:o}=t.get(s);n.score=n.score+i,n.match=Object.assign(n.match,o),H(n.terms,u)}}return e},[U]:(e,t)=>{const s=new Map;for(const n of t.keys()){const i=e.get(n);if(i==null)continue;const{score:u,terms:o,match:r}=t.get(n);H(i.terms,o),s.set(n,{score:i.score+u,terms:i.terms,match:Object.assign(i.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},ft=(e,t,s,n,i,u)=>{const{k:o,b:r,d:a}=u;return Math.log(1+(s-t+.5)/(t+.5))*(a+e*(o+1)/(e+o*(1-r+r*n/i)))},Ft=e=>(t,s,n)=>{const i=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:i,prefix:u}},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},X={combineWith:T,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:U,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={..._t,...Y};class At{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...X,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new N,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const i={};for(const[u,o]of n)i[u]=Object.fromEntries(o);t.push([s,i])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const Q=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},Z=(e,t,s,n)=>{for(const i of Object.keys(e._fieldIds))if(e._fieldIds[i]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${i}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},Ct=(e,t,s,n)=>{if(!e._index.has(n)){Z(e,s,t,n);return}const i=e._index.fetch(n,dt),u=i.get(t);u==null||u.get(s)==null?Z(e,s,t,n):u.get(s)<=1?u.size<=1?i.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},tt=(e,t=T)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(at[s])||new Map},$=(e,t,s,n,i,u,o,r,a=new Map)=>{if(i==null)return a;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],m=i.get(l);if(m==null)continue;let F=m.size;const f=e._avgFieldLength[l];for(const h of m.keys()){if(!e._documentIds.has(h)){Ct(e,l,h,s),F-=1;continue}const g=o?o(e._documentIds.get(h),s,e._storedFields.get(h)):1;if(!g)continue;const A=m.get(h),C=e._fieldLength.get(h)[l],B=ft(A,F,e._documentCount,C,f,r),b=n*d*g*B,z=a.get(h);if(z){z.score+=b,lt(z.terms,t);const D=K(z.match,s);D?D.push(c):z.match[s]=[c]}else a.set(h,{score:b,terms:[t],match:{[s]:[c]}})}}return a},zt=(e,t,s)=>{const n={...e._options.searchOptions,...s},i=(n.fields||e._options.fields).reduce((h,g)=>({...h,[g]:K(n.boost,g)||1}),{}),{boostDocument:u,weights:o,maxFuzzy:r,bm25:a}=n,{fuzzy:c,prefix:d}={...X.weights,...o},l=e._index.get(t.term),m=$(e,t.term,t.term,1,l,i,u,a);let F,f;if(t.prefix&&(F=e._index.atPrefix(t.term)),t.fuzzy){const h=t.fuzzy===!0?.2:t.fuzzy,g=h<1?Math.min(r,Math.round(t.term.length*h)):h;g&&(f=e._index.fuzzyGet(t.term,g))}if(F)for(const[h,g]of F){const A=h.length-t.term.length;if(!A)continue;f==null||f.delete(h);const C=d*h.length/(h.length+.3*A);$(e,t.term,h,C,g,i,u,a,m)}if(f)for(const h of f.keys()){const[g,A]=f.get(h);if(!A)continue;const C=c*h.length/(h.length+A);$(e,t.term,h,C,g,i,u,a,m)}return m},et=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(m=>et(e,m,d));return tt(l,d.combineWith)}const{tokenize:n,processTerm:i,searchOptions:u}=e._options,o={tokenize:n,processTerm:i,...u,...s},{tokenize:r,processTerm:a}=o,c=r(t).flatMap(d=>a(d)).filter(d=>!!d).map(Ft(o)).map(d=>zt(e,d,o));return tt(c,o.combineWith)},xt=(e,t,s={})=>{const n=et(e,t,s),i=[];for(const[u,{score:o,terms:r,match:a}]of n){const c=r.length,d={id:e._documentIds.get(u),score:o*c,terms:Object.keys(a),match:a};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&i.push(d)}return i.sort(ht),i},Et=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:i,fieldLength:u,averageFieldLength:o,storedFields:r,dirtCount:a,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new At(d);l._documentCount=t,l._nextId=s,l._documentIds=O(n),l._idToShortId=new Map,l._fieldIds=i,l._fieldLength=O(u),l._avgFieldLength=o,l._storedFields=O(r),l._dirtCount=a||0,l._index=new N;for(const[m,F]of l._documentIds)l._idToShortId.set(F,m);for(const[m,F]of e){const f=new Map;for(const h of Object.keys(F)){let g=F[h];c===1&&(g=g.ds),f.set(parseInt(h,10),O(g))}l._index.set(m,f)}return l},st=Object.entries,wt=Object.fromEntries,E=100,w=20,M=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),i=[];let u=0,o=0;const r=(c,d=!1)=>{let l="";o===0?l=c.length>w?`… ${c.slice(-w)}`:c:d?l=c.length+o>E?`${c.slice(0,E-o)}… `:c:l=c.length>w?`${c.slice(0,w)} … ${c.slice(-w)}`:c,l&&i.push(l),o+=l.length,d||(i.push(["mark",t]),o+=t.length,o>=E&&i.push(" …"))};let a=s.indexOf(n,u);if(a===-1)return null;for(;a>=0;){const c=a+n.length;if(r(e.slice(u,a)),u=c,o>E)break;a=s.indexOf(n,u)}return o<E&&r(e.slice(u),!0),i};var p=(e=>(e.heading="h",e.anchor="a",e.text="t",e.customFields="c",e))(p||{}),k=(e=>(e.title="t",e.heading="h",e.text="p",e.custom="c",e))(k||{}),y=(e=>(e.type="t",e.key="k",e.anchor="a",e.header="h",e.index="i",e.display="d",e))(y||{});const nt=/[\u4e00-\u9fa5]/g,kt=(e,t,s={})=>{const n={};return xt(t,e,{fuzzy:.2,prefix:!0,boost:{[p.heading]:2,[p.text]:1,[p.customFields]:4},processTerm:i=>{const u=i.match(nt)||[],o=i.replace(nt,"").toLowerCase();return o?[o,...u]:[...u]},...s}).forEach(i=>{const{id:u,terms:o,score:r}=i,a=u.includes("/"),c=!a&&u.includes("#"),d=u.includes("@"),[l,m]=u.split(/[#@]/),{contents:F}=n[l]??={title:"",contents:[]};if(c)F.push([{[y.type]:k.heading,[y.key]:l,[y.anchor]:i[p.anchor],[y.display]:o.map(f=>M(i[p.heading],f)).filter(f=>f!==null)},r]);else if(a){const[f]=m.split("/"),{[p.heading]:h="",[p.anchor]:g=""}=Q(t,`${l}#${f}`)||{};F.push([{[y.type]:k.text,[y.key]:l,[y.header]:h,[y.anchor]:g,[y.display]:o.map(A=>M(i[p.text],A)).filter(A=>A!==null)},r])}else d?F.push([{[y.type]:k.custom,[y.key]:l,[y.index]:m,[y.display]:o.map(f=>i[p.customFields].map(h=>M(h,f))).flat().filter(f=>f!==null)},r]):F.push([{[y.type]:k.title,[y.key]:l,[y.display]:o.map(f=>M(i[p.heading],f)).filter(f=>f!==null)},r])}),st(n).sort(([,i],[,u])=>u.contents.reduce((o,[,r])=>o+r,0)-i.contents.reduce((o,[,r])=>o+r,0)).map(([i,{title:u,contents:o}])=>{if(!u){const r=Q(t,i);r&&(u=r[p.heading])}return{title:u,contents:o.map(([r])=>r)}})},vt=wt(st(JSON.parse("{\"/\":{\"documentCount\":5856,\"nextId\":5856,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#0/0\",\"2\":\"v-2e3eac9e\",\"3\":\"v-1473bf53\",\"4\":\"v-1473bf53#1\",\"5\":\"v-1473bf53#1/0\",\"6\":\"v-1473bf53#1/1\",\"7\":\"v-1473bf53#1/2\",\"8\":\"v-1473bf53#1/3\",\"9\":\"v-4e65ec78\",\"10\":\"v-4e65ec78#0/0\",\"11\":\"v-4e65ec78#0/1\",\"12\":\"v-4e65ec78#0/2\",\"13\":\"v-4e65ec78#0/3\",\"14\":\"v-4e65ec78#0/4\",\"15\":\"v-4e65ec78#0/5\",\"16\":\"v-4e65ec78#0/6\",\"17\":\"v-4e65ec78#0/7\",\"18\":\"v-4e65ec78#0/8\",\"19\":\"v-4e65ec78#0/9\",\"20\":\"v-4e65ec78#0/10\",\"21\":\"v-4e65ec78#0/11\",\"22\":\"v-4e65ec78#0/12\",\"23\":\"v-c151bf32\",\"24\":\"v-c151bf32#0/0\",\"25\":\"v-c151bf32#0/1\",\"26\":\"v-c151bf32#0/2\",\"27\":\"v-438ffe52\",\"28\":\"v-438ffe52#0/0\",\"29\":\"v-438ffe52#0/1\",\"30\":\"v-438ffe52#1\",\"31\":\"v-438ffe52#1/0\",\"32\":\"v-438ffe52#2\",\"33\":\"v-438ffe52#2/0\",\"34\":\"v-438ffe52#2/1\",\"35\":\"v-438ffe52#2/2\",\"36\":\"v-438ffe52#3\",\"37\":\"v-438ffe52#3/0\",\"38\":\"v-438ffe52#4\",\"39\":\"v-438ffe52#4/0\",\"40\":\"v-438ffe52#4/1\",\"41\":\"v-438ffe52#5\",\"42\":\"v-438ffe52#5/0\",\"43\":\"v-438ffe52#6\",\"44\":\"v-438ffe52#6/0\",\"45\":\"v-438ffe52#6/1\",\"46\":\"v-438ffe52#6/2\",\"47\":\"v-438ffe52#6/3\",\"48\":\"v-438ffe52#6/4\",\"49\":\"v-438ffe52#6/5\",\"50\":\"v-438ffe52#6/6\",\"51\":\"v-438ffe52#6/7\",\"52\":\"v-438ffe52#6/8\",\"53\":\"v-438ffe52#6/9\",\"54\":\"v-438ffe52#6/10\",\"55\":\"v-438ffe52#6/11\",\"56\":\"v-438ffe52#6/12\",\"57\":\"v-438ffe52#7\",\"58\":\"v-438ffe52#7/0\",\"59\":\"v-438ffe52#8\",\"60\":\"v-438ffe52#8/0\",\"61\":\"v-438ffe52#8/1\",\"62\":\"v-438ffe52#9\",\"63\":\"v-438ffe52#9/0\",\"64\":\"v-438ffe52#9/1\",\"65\":\"v-438ffe52#9/2\",\"66\":\"v-438ffe52#10\",\"67\":\"v-438ffe52#10/0\",\"68\":\"v-438ffe52#10/1\",\"69\":\"v-438ffe52#11\",\"70\":\"v-438ffe52#11/0\",\"71\":\"v-438ffe52#11/1\",\"72\":\"v-438ffe52#12\",\"73\":\"v-438ffe52#12/0\",\"74\":\"v-438ffe52#12/1\",\"75\":\"v-438ffe52#13\",\"76\":\"v-438ffe52#13/0\",\"77\":\"v-438ffe52#13/1\",\"78\":\"v-438ffe52#13/2\",\"79\":\"v-438ffe52#14\",\"80\":\"v-438ffe52#14/0\",\"81\":\"v-438ffe52#14/1\",\"82\":\"v-438ffe52#15\",\"83\":\"v-438ffe52#15/0\",\"84\":\"v-438ffe52#15/1\",\"85\":\"v-438ffe52#16\",\"86\":\"v-438ffe52#16/0\",\"87\":\"v-438ffe52#17\",\"88\":\"v-438ffe52#17/0\",\"89\":\"v-438ffe52#18\",\"90\":\"v-438ffe52#18/0\",\"91\":\"v-438ffe52#19\",\"92\":\"v-438ffe52#19/0\",\"93\":\"v-438ffe52#20\",\"94\":\"v-438ffe52#20/0\",\"95\":\"v-438ffe52#20/1\",\"96\":\"v-438ffe52#21\",\"97\":\"v-438ffe52#21/0\",\"98\":\"v-438ffe52#21/1\",\"99\":\"v-438ffe52#21/2\",\"100\":\"v-438ffe52#21/3\",\"101\":\"v-438ffe52#21/4\",\"102\":\"v-438ffe52#22\",\"103\":\"v-438ffe52#22/0\",\"104\":\"v-438ffe52#23\",\"105\":\"v-438ffe52#23/0\",\"106\":\"v-438ffe52#23/1\",\"107\":\"v-438ffe52#24\",\"108\":\"v-438ffe52#24/0\",\"109\":\"v-438ffe52#25\",\"110\":\"v-438ffe52#25/0\",\"111\":\"v-438ffe52#26\",\"112\":\"v-438ffe52#26/0\",\"113\":\"v-438ffe52#26/1\",\"114\":\"v-6e19edb7\",\"115\":\"v-6e19edb7#0/0\",\"116\":\"v-6e19edb7#1\",\"117\":\"v-6e19edb7#1/0\",\"118\":\"v-6e19edb7#1/1\",\"119\":\"v-6e19edb7#1/2\",\"120\":\"v-6e19edb7#1/3\",\"121\":\"v-6e19edb7#1/4\",\"122\":\"v-6e19edb7#2\",\"123\":\"v-6e19edb7#2/0\",\"124\":\"v-6e19edb7#2/1\",\"125\":\"v-6e19edb7#2/2\",\"126\":\"v-6e19edb7#2/3\",\"127\":\"v-6e19edb7#2/4\",\"128\":\"v-6e19edb7#2/5\",\"129\":\"v-6e19edb7#3\",\"130\":\"v-6e19edb7#3/0\",\"131\":\"v-6e19edb7#3/1\",\"132\":\"v-6e19edb7#3/2\",\"133\":\"v-6e19edb7#3/3\",\"134\":\"v-6e19edb7#3/4\",\"135\":\"v-6e19edb7#3/5\",\"136\":\"v-6e19edb7#3/6\",\"137\":\"v-6e19edb7#3/7\",\"138\":\"v-6e19edb7#3/8\",\"139\":\"v-6e19edb7#3/9\",\"140\":\"v-6e19edb7#3/10\",\"141\":\"v-fffb8e28\",\"142\":\"v-fffb8e28#1\",\"143\":\"v-fffb8e28#2\",\"144\":\"v-fffb8e28#2/0\",\"145\":\"v-fffb8e28#2/1\",\"146\":\"v-fffb8e28#3\",\"147\":\"v-fffb8e28#3/0\",\"148\":\"v-fffb8e28#3/1\",\"149\":\"v-151af027\",\"150\":\"v-151af027#0/0\",\"151\":\"v-151af027#0/1\",\"152\":\"v-151af027#0/2\",\"153\":\"v-2d0ad528\",\"154\":\"v-2d0ad528#0/0\",\"155\":\"v-2d0ad528#0/1\",\"156\":\"v-2d0ad528#0/2\",\"157\":\"v-269ae70f\",\"158\":\"v-5d5c2d30\",\"159\":\"v-5d5c2d30#1\",\"160\":\"v-5d5c2d30#1/0\",\"161\":\"v-5d5c2d30#2\",\"162\":\"v-5d5c2d30#2/0\",\"163\":\"v-5d5c2d30#2/1\",\"164\":\"v-177e1f06\",\"165\":\"v-177e1f06#0/0\",\"166\":\"v-5d5821d6\",\"167\":\"v-5d5821d6#1\",\"168\":\"v-5d5821d6#1/0\",\"169\":\"v-5d5821d6#2\",\"170\":\"v-5d5821d6#2/0\",\"171\":\"v-5d5821d6#2/1\",\"172\":\"v-0b6fc5f8\",\"173\":\"v-0b6fc5f8#0/0\",\"174\":\"v-a4e90f26\",\"175\":\"v-a4e90f26#1\",\"176\":\"v-a4e90f26#2\",\"177\":\"v-a4e90f26#3\",\"178\":\"v-a4e90f26#3/0\",\"179\":\"v-a4e90f26#3/1\",\"180\":\"v-a4e90f26#3/2\",\"181\":\"v-a4e90f26#3/3\",\"182\":\"v-a4e90f26#3/4\",\"183\":\"v-a4e90f26#4\",\"184\":\"v-a4e90f26#4/0\",\"185\":\"v-a4e90f26#4/1\",\"186\":\"v-a4e90f26#4/2\",\"187\":\"v-a4e90f26#4/3\",\"188\":\"v-a4e90f26#4/4\",\"189\":\"v-a4e90f26#5\",\"190\":\"v-a4e90f26#5/0\",\"191\":\"v-a4e90f26#5/1\",\"192\":\"v-a4e90f26#5/2\",\"193\":\"v-a4e90f26#5/3\",\"194\":\"v-a4e90f26#5/4\",\"195\":\"v-a4e90f26#5/5\",\"196\":\"v-a4e90f26#5/6\",\"197\":\"v-a4e90f26#5/7\",\"198\":\"v-a4e90f26#5/8\",\"199\":\"v-a4e90f26#5/9\",\"200\":\"v-a4e90f26#5/10\",\"201\":\"v-a4e90f26#5/11\",\"202\":\"v-a4e90f26#5/12\",\"203\":\"v-a4e90f26#6\",\"204\":\"v-a4e90f26#6/0\",\"205\":\"v-a4e90f26#6/1\",\"206\":\"v-a4e90f26#6/2\",\"207\":\"v-a4e90f26#6/3\",\"208\":\"v-a4e90f26#6/4\",\"209\":\"v-a4e90f26#6/5\",\"210\":\"v-a4e90f26#6/6\",\"211\":\"v-a4e90f26#6/7\",\"212\":\"v-a4e90f26#6/8\",\"213\":\"v-a4e90f26#6/9\",\"214\":\"v-a4e90f26#6/10\",\"215\":\"v-a4e90f26#6/11\",\"216\":\"v-a4e90f26#6/12\",\"217\":\"v-a4e90f26#6/13\",\"218\":\"v-a4e90f26#7\",\"219\":\"v-a4e90f26#7/0\",\"220\":\"v-a4e90f26#7/1\",\"221\":\"v-a4e90f26#7/2\",\"222\":\"v-a4e90f26#8\",\"223\":\"v-a4e90f26#8/0\",\"224\":\"v-a4e90f26#8/1\",\"225\":\"v-a4e90f26#8/2\",\"226\":\"v-a4e90f26#8/3\",\"227\":\"v-a4e90f26#8/4\",\"228\":\"v-a4e90f26#8/5\",\"229\":\"v-a4e90f26#8/6\",\"230\":\"v-a4e90f26#9\",\"231\":\"v-a4e90f26#9/0\",\"232\":\"v-a4e90f26#9/1\",\"233\":\"v-a4e90f26#9/2\",\"234\":\"v-a4e90f26#9/3\",\"235\":\"v-a4e90f26#9/4\",\"236\":\"v-a4e90f26#10\",\"237\":\"v-a4e90f26#10/0\",\"238\":\"v-a4e90f26#10/1\",\"239\":\"v-a4e90f26#11\",\"240\":\"v-a4e90f26#11/2\",\"241\":\"v-a4e90f26#11/3\",\"242\":\"v-a4e90f26#12\",\"243\":\"v-a4e90f26#12/0\",\"244\":\"v-a4e90f26#12/1\",\"245\":\"v-a4e90f26#12/2\",\"246\":\"v-a4e90f26#12/3\",\"247\":\"v-a4e90f26#12/4\",\"248\":\"v-a4e90f26#12/5\",\"249\":\"v-a4e90f26#12/6\",\"250\":\"v-a4e90f26#12/7\",\"251\":\"v-a4e90f26#12/8\",\"252\":\"v-a4e90f26#13\",\"253\":\"v-a4e90f26#13/9\",\"254\":\"v-a4e90f26#13/10\",\"255\":\"v-a4e90f26#13/11\",\"256\":\"v-a4e90f26#13/12\",\"257\":\"v-a4e90f26#13/13\",\"258\":\"v-a4e90f26#13/14\",\"259\":\"v-a4e90f26#13/15\",\"260\":\"v-a4e90f26#13/16\",\"261\":\"v-a4e90f26#14\",\"262\":\"v-a4e90f26#14/0\",\"263\":\"v-a4e90f26#14/1\",\"264\":\"v-a4e90f26#14/2\",\"265\":\"v-a4e90f26#14/3\",\"266\":\"v-a4e90f26#14/4\",\"267\":\"v-a4e90f26#14/5\",\"268\":\"v-a4e90f26#14/6\",\"269\":\"v-a4e90f26#14/7\",\"270\":\"v-a4e90f26#14/8\",\"271\":\"v-a4e90f26#15\",\"272\":\"v-a4e90f26#15/0\",\"273\":\"v-a4e90f26#15/1\",\"274\":\"v-a4e90f26#15/2\",\"275\":\"v-a4e90f26#15/3\",\"276\":\"v-a4e90f26#16\",\"277\":\"v-a4e90f26#16/0\",\"278\":\"v-a4e90f26#17\",\"279\":\"v-a4e90f26#17/0\",\"280\":\"v-a4e90f26#17/1\",\"281\":\"v-a4e90f26#17/2\",\"282\":\"v-a4e90f26#17/3\",\"283\":\"v-a4e90f26#17/4\",\"284\":\"v-a4e90f26#18\",\"285\":\"v-a4e90f26#18/0\",\"286\":\"v-a4e90f26#18/1\",\"287\":\"v-a4e90f26#18/2\",\"288\":\"v-a4e90f26#18/3\",\"289\":\"v-a4e90f26#18/4\",\"290\":\"v-a4e90f26#18/5\",\"291\":\"v-a4e90f26#18/6\",\"292\":\"v-a4e90f26#18/7\",\"293\":\"v-a4e90f26#18/8\",\"294\":\"v-a4e90f26#18/9\",\"295\":\"v-a4e90f26#19\",\"296\":\"v-a4e90f26#20\",\"297\":\"v-a4e90f26#21\",\"298\":\"v-a4e90f26#21/10\",\"299\":\"v-a4e90f26#21/11\",\"300\":\"v-a4e90f26#21/12\",\"301\":\"v-a4e90f26#22\",\"302\":\"v-a4e90f26#22/0\",\"303\":\"v-a4e90f26#22/1\",\"304\":\"v-a4e90f26#22/2\",\"305\":\"v-a4e90f26#22/3\",\"306\":\"v-a4e90f26#22/4\",\"307\":\"v-a4e90f26#22/5\",\"308\":\"v-a4e90f26#23\",\"309\":\"v-a4e90f26#23/0\",\"310\":\"v-a4e90f26#23/1\",\"311\":\"v-a4e90f26#23/2\",\"312\":\"v-a4e90f26#23/3\",\"313\":\"v-a4e90f26#23/4\",\"314\":\"v-a4e90f26#23/5\",\"315\":\"v-a4e90f26#23/6\",\"316\":\"v-a4e90f26#23/7\",\"317\":\"v-a4e90f26#23/8\",\"318\":\"v-a4e90f26#23/9\",\"319\":\"v-a4e90f26#23/10\",\"320\":\"v-a4e90f26#23/11\",\"321\":\"v-a4e90f26#23/12\",\"322\":\"v-a4e90f26#23/13\",\"323\":\"v-a4e90f26#24\",\"324\":\"v-a4e90f26#25\",\"325\":\"v-a4e90f26#25/0\",\"326\":\"v-a4e90f26#25/1\",\"327\":\"v-a4e90f26#25/2\",\"328\":\"v-a4e90f26#25/3\",\"329\":\"v-a4e90f26#26\",\"330\":\"v-a4e90f26#26/4\",\"331\":\"v-a4e90f26#27\",\"332\":\"v-a4e90f26#27/5\",\"333\":\"v-a4e90f26#27/6\",\"334\":\"v-a4e90f26#27/7\",\"335\":\"v-a4e90f26#27/8\",\"336\":\"v-a4e90f26#28\",\"337\":\"v-a4e90f26#28/9\",\"338\":\"v-a4e90f26#28/10\",\"339\":\"v-a4e90f26#28/11\",\"340\":\"v-a4e90f26#28/12\",\"341\":\"v-a4e90f26#29\",\"342\":\"v-a4e90f26#29/0\",\"343\":\"v-a4e90f26#29/1\",\"344\":\"v-a4e90f26#29/2\",\"345\":\"v-a4e90f26#30\",\"346\":\"v-a4e90f26#30/0\",\"347\":\"v-a4e90f26#30/1\",\"348\":\"v-a4e90f26#30/2\",\"349\":\"v-a4e90f26#30/3\",\"350\":\"v-a4e90f26#31\",\"351\":\"v-a4e90f26#31/0\",\"352\":\"v-a4e90f26#31/1\",\"353\":\"v-a4e90f26#31/2\",\"354\":\"v-a4e90f26#32\",\"355\":\"v-a4e90f26#32/0\",\"356\":\"v-a4e90f26#32/1\",\"357\":\"v-a4e90f26#33\",\"358\":\"v-a4e90f26#33/0\",\"359\":\"v-a4e90f26#34\",\"360\":\"v-a4e90f26#34/0\",\"361\":\"v-a4e90f26#35\",\"362\":\"v-a4e90f26#35/0\",\"363\":\"v-a4e90f26#35/1\",\"364\":\"v-a4e90f26#35/2\",\"365\":\"v-a4e90f26#35/3\",\"366\":\"v-a4e90f26#35/4\",\"367\":\"v-a4e90f26#35/5\",\"368\":\"v-a4e90f26#35/6\",\"369\":\"v-a4e90f26#35/7\",\"370\":\"v-a4e90f26#35/8\",\"371\":\"v-a4e90f26#35/9\",\"372\":\"v-a4e90f26#36\",\"373\":\"v-a4e90f26#36/0\",\"374\":\"v-a4e90f26#36/1\",\"375\":\"v-a4e90f26#36/2\",\"376\":\"v-a4e90f26#36/3\",\"377\":\"v-a4e90f26#36/4\",\"378\":\"v-a4e90f26#36/5\",\"379\":\"v-a4e90f26#36/6\",\"380\":\"v-a4e90f26#36/7\",\"381\":\"v-a4e90f26#36/8\",\"382\":\"v-a4e90f26#36/9\",\"383\":\"v-a4e90f26#36/10\",\"384\":\"v-a4e90f26#37\",\"385\":\"v-a4e90f26#38\",\"386\":\"v-a4e90f26#38/0\",\"387\":\"v-a4e90f26#38/1\",\"388\":\"v-a4e90f26#39\",\"389\":\"v-a4e90f26#39/2\",\"390\":\"v-a4e90f26#39/3\",\"391\":\"v-a4e90f26#40\",\"392\":\"v-a4e90f26#41\",\"393\":\"v-a4e90f26#41/4\",\"394\":\"v-a4e90f26#41/5\",\"395\":\"v-a4e90f26#41/6\",\"396\":\"v-a4e90f26#41/7\",\"397\":\"v-a4e90f26#42\",\"398\":\"v-a4e90f26#42/0\",\"399\":\"v-a4e90f26#42/1\",\"400\":\"v-a4e90f26#43\",\"401\":\"v-a4e90f26#43/0\",\"402\":\"v-a4e90f26#43/1\",\"403\":\"v-a4e90f26#43/2\",\"404\":\"v-a4e90f26#43/3\",\"405\":\"v-a4e90f26#43/4\",\"406\":\"v-a4e90f26#43/5\",\"407\":\"v-a4e90f26#43/6\",\"408\":\"v-a4e90f26#43/7\",\"409\":\"v-a4e90f26#43/8\",\"410\":\"v-a4e90f26#43/9\",\"411\":\"v-a4e90f26#43/10\",\"412\":\"v-a4e90f26#43/11\",\"413\":\"v-a4e90f26#43/12\",\"414\":\"v-a4e90f26#44\",\"415\":\"v-a4e90f26#44/13\",\"416\":\"v-a4e90f26#44/14\",\"417\":\"v-a4e90f26#44/15\",\"418\":\"v-a4e90f26#44/16\",\"419\":\"v-a4e90f26#44/17\",\"420\":\"v-a4e90f26#44/18\",\"421\":\"v-a4e90f26#44/19\",\"422\":\"v-a4e90f26#44/20\",\"423\":\"v-a4e90f26#44/21\",\"424\":\"v-a4e90f26#44/22\",\"425\":\"v-a4e90f26#44/23\",\"426\":\"v-a4e90f26#44/24\",\"427\":\"v-a4e90f26#44/25\",\"428\":\"v-a4e90f26#44/26\",\"429\":\"v-ce4d5100\",\"430\":\"v-ce4d5100#1\",\"431\":\"v-ce4d5100#2\",\"432\":\"v-ce4d5100#2/0\",\"433\":\"v-ce4d5100#2/1\",\"434\":\"v-ce4d5100#2/2\",\"435\":\"v-ce4d5100#2/3\",\"436\":\"v-ce4d5100#2/4\",\"437\":\"v-ce4d5100#2/5\",\"438\":\"v-ce4d5100#2/6\",\"439\":\"v-ce4d5100#2/7\",\"440\":\"v-ce4d5100#3\",\"441\":\"v-ce4d5100#3/8\",\"442\":\"v-ce4d5100#3/9\",\"443\":\"v-ce4d5100#3/10\",\"444\":\"v-ce4d5100#3/11\",\"445\":\"v-ce4d5100#3/12\",\"446\":\"v-ce4d5100#4\",\"447\":\"v-ce4d5100#4/0\",\"448\":\"v-ce4d5100#4/1\",\"449\":\"v-ce4d5100#4/2\",\"450\":\"v-ce4d5100#4/3\",\"451\":\"v-ce4d5100#4/4\",\"452\":\"v-ce4d5100#4/5\",\"453\":\"v-ce4d5100#5\",\"454\":\"v-ce4d5100#5/6\",\"455\":\"v-ce4d5100#5/7\",\"456\":\"v-ce4d5100#5/8\",\"457\":\"v-ce4d5100#5/9\",\"458\":\"v-ce4d5100#5/10\",\"459\":\"v-ce4d5100#6\",\"460\":\"v-ce4d5100#6/0\",\"461\":\"v-ce4d5100#6/1\",\"462\":\"v-ce4d5100#6/2\",\"463\":\"v-ce4d5100#6/3\",\"464\":\"v-ce4d5100#7\",\"465\":\"v-ce4d5100#7/4\",\"466\":\"v-ce4d5100#7/5\",\"467\":\"v-ce4d5100#7/6\",\"468\":\"v-ce4d5100#7/7\",\"469\":\"v-ce4d5100#7/8\",\"470\":\"v-ce4d5100#7/9\",\"471\":\"v-ce4d5100#7/10\",\"472\":\"v-ce4d5100#7/11\",\"473\":\"v-ce4d5100#7/12\",\"474\":\"v-ce4d5100#7/13\",\"475\":\"v-ce4d5100#8\",\"476\":\"v-ce4d5100#9\",\"477\":\"v-ce4d5100#9/0\",\"478\":\"v-ce4d5100#9/1\",\"479\":\"v-ce4d5100#9/2\",\"480\":\"v-ce4d5100#9/3\",\"481\":\"v-ce4d5100#9/4\",\"482\":\"v-ce4d5100#9/5\",\"483\":\"v-ce4d5100#9/6\",\"484\":\"v-ce4d5100#9/7\",\"485\":\"v-ce4d5100#9/8\",\"486\":\"v-ce4d5100#9/9\",\"487\":\"v-ce4d5100#9/10\",\"488\":\"v-ce4d5100#9/11\",\"489\":\"v-ce4d5100#9/12\",\"490\":\"v-ce4d5100#9/13\",\"491\":\"v-ce4d5100#9/14\",\"492\":\"v-ce4d5100#9/15\",\"493\":\"v-ce4d5100#9/16\",\"494\":\"v-ce4d5100#9/17\",\"495\":\"v-ce4d5100#10\",\"496\":\"v-ce4d5100#10/0\",\"497\":\"v-ce4d5100#10/1\",\"498\":\"v-ce4d5100#10/2\",\"499\":\"v-ce4d5100#10/3\",\"500\":\"v-ce4d5100#10/4\",\"501\":\"v-ce4d5100#10/5\",\"502\":\"v-ce4d5100#10/6\",\"503\":\"v-ce4d5100#11\",\"504\":\"v-ce4d5100#11/0\",\"505\":\"v-ce4d5100#11/1\",\"506\":\"v-ce4d5100#11/2\",\"507\":\"v-ce4d5100#11/3\",\"508\":\"v-ce4d5100#11/4\",\"509\":\"v-ce4d5100#11/5\",\"510\":\"v-ce4d5100#11/6\",\"511\":\"v-ce4d5100#12\",\"512\":\"v-ce4d5100#12/0\",\"513\":\"v-ce4d5100#12/1\",\"514\":\"v-ce4d5100#12/2\",\"515\":\"v-ce4d5100#12/3\",\"516\":\"v-ce4d5100#12/4\",\"517\":\"v-ce4d5100#12/5\",\"518\":\"v-ce4d5100#12/6\",\"519\":\"v-ce4d5100#12/7\",\"520\":\"v-ce4d5100#12/8\",\"521\":\"v-32ab3f8a\",\"522\":\"v-32ab3f8a#1\",\"523\":\"v-32ab3f8a#1/0\",\"524\":\"v-32ab3f8a#2\",\"525\":\"v-32ab3f8a#2/0\",\"526\":\"v-32ab3f8a#3\",\"527\":\"v-32ab3f8a#3/0\",\"528\":\"v-32ab3f8a#4\",\"529\":\"v-32ab3f8a#4/0\",\"530\":\"v-32ab3f8a#4/1\",\"531\":\"v-32ab3f8a#4/2\",\"532\":\"v-32ab3f8a#5\",\"533\":\"v-32ab3f8a#5/0\",\"534\":\"v-32ab3f8a#5/1\",\"535\":\"v-32ab3f8a#5/2\",\"536\":\"v-32ab3f8a#5/3\",\"537\":\"v-32ab3f8a#5/4\",\"538\":\"v-32ab3f8a#6\",\"539\":\"v-32ab3f8a#6/5\",\"540\":\"v-32ab3f8a#6/6\",\"541\":\"v-32ab3f8a#6/7\",\"542\":\"v-32ab3f8a#6/8\",\"543\":\"v-32ab3f8a#6/9\",\"544\":\"v-32ab3f8a#6/10\",\"545\":\"v-32ab3f8a#7\",\"546\":\"v-32ab3f8a#7/11\",\"547\":\"v-32ab3f8a#7/12\",\"548\":\"v-32ab3f8a#7/13\",\"549\":\"v-32ab3f8a#7/14\",\"550\":\"v-32ab3f8a#7/15\",\"551\":\"v-32ab3f8a#7/16\",\"552\":\"v-32ab3f8a#7/17\",\"553\":\"v-32ab3f8a#7/18\",\"554\":\"v-32ab3f8a#7/19\",\"555\":\"v-32ab3f8a#7/20\",\"556\":\"v-32ab3f8a#7/21\",\"557\":\"v-32ab3f8a#7/22\",\"558\":\"v-32ab3f8a#7/23\",\"559\":\"v-32ab3f8a#7/24\",\"560\":\"v-32ab3f8a#7/25\",\"561\":\"v-32ab3f8a#7/26\",\"562\":\"v-32ab3f8a#8\",\"563\":\"v-32ab3f8a#8/0\",\"564\":\"v-32ab3f8a#8/1\",\"565\":\"v-32ab3f8a#8/2\",\"566\":\"v-32ab3f8a#9\",\"567\":\"v-32ab3f8a#9/0\",\"568\":\"v-32ab3f8a#9/1\",\"569\":\"v-32ab3f8a#9/2\",\"570\":\"v-32ab3f8a#9/3\",\"571\":\"v-32ab3f8a#9/4\",\"572\":\"v-32ab3f8a#9/5\",\"573\":\"v-32ab3f8a#9/6\",\"574\":\"v-32ab3f8a#9/7\",\"575\":\"v-32ab3f8a#9/8\",\"576\":\"v-32ab3f8a#9/9\",\"577\":\"v-32ab3f8a#9/10\",\"578\":\"v-32ab3f8a#9/11\",\"579\":\"v-32ab3f8a#9/12\",\"580\":\"v-32ab3f8a#9/13\",\"581\":\"v-32ab3f8a#10\",\"582\":\"v-32ab3f8a#10/0\",\"583\":\"v-32ab3f8a#10/1\",\"584\":\"v-32ab3f8a#11\",\"585\":\"v-32ab3f8a#11/0\",\"586\":\"v-32ab3f8a#11/1\",\"587\":\"v-32ab3f8a#11/2\",\"588\":\"v-32ab3f8a#11/3\",\"589\":\"v-32ab3f8a#11/4\",\"590\":\"v-32ab3f8a#11/5\",\"591\":\"v-32ab3f8a#11/6\",\"592\":\"v-32ab3f8a#11/7\",\"593\":\"v-32ab3f8a#12\",\"594\":\"v-32ab3f8a#12/8\",\"595\":\"v-32ab3f8a#12/9\",\"596\":\"v-32ab3f8a#12/10\",\"597\":\"v-32ab3f8a#12/11\",\"598\":\"v-32ab3f8a#12/12\",\"599\":\"v-32ab3f8a#12/13\",\"600\":\"v-32ab3f8a#12/14\",\"601\":\"v-32ab3f8a#12/15\",\"602\":\"v-32ab3f8a#12/16\",\"603\":\"v-32ab3f8a#12/17\",\"604\":\"v-32ab3f8a#12/18\",\"605\":\"v-32ab3f8a#12/19\",\"606\":\"v-32ab3f8a#12/20\",\"607\":\"v-32ab3f8a#12/21\",\"608\":\"v-32ab3f8a#13\",\"609\":\"v-32ab3f8a#13/0\",\"610\":\"v-32ab3f8a#14\",\"611\":\"v-32ab3f8a#15\",\"612\":\"v-32ab3f8a#15/0\",\"613\":\"v-32ab3f8a#15/1\",\"614\":\"v-32ab3f8a#15/2\",\"615\":\"v-32ab3f8a#15/3\",\"616\":\"v-32ab3f8a#15/4\",\"617\":\"v-32ab3f8a#15/5\",\"618\":\"v-32ab3f8a#15/6\",\"619\":\"v-32ab3f8a#15/7\",\"620\":\"v-32ab3f8a#15/8\",\"621\":\"v-32ab3f8a#15/9\",\"622\":\"v-32ab3f8a#16\",\"623\":\"v-32ab3f8a#16/0\",\"624\":\"v-32ab3f8a#16/1\",\"625\":\"v-32ab3f8a#16/2\",\"626\":\"v-32ab3f8a#16/3\",\"627\":\"v-32ab3f8a#16/4\",\"628\":\"v-32ab3f8a#16/5\",\"629\":\"v-32ab3f8a#16/6\",\"630\":\"v-32ab3f8a#16/7\",\"631\":\"v-32ab3f8a#16/8\",\"632\":\"v-32ab3f8a#16/9\",\"633\":\"v-32ab3f8a#16/10\",\"634\":\"v-32ab3f8a#16/11\",\"635\":\"v-32ab3f8a#16/12\",\"636\":\"v-32ab3f8a#16/13\",\"637\":\"v-32ab3f8a#16/14\",\"638\":\"v-32ab3f8a#16/15\",\"639\":\"v-32ab3f8a#16/16\",\"640\":\"v-32ab3f8a#17\",\"641\":\"v-32ab3f8a#17/0\",\"642\":\"v-32ab3f8a#17/1\",\"643\":\"v-32ab3f8a#18\",\"644\":\"v-32ab3f8a#18/0\",\"645\":\"v-32ab3f8a#18/1\",\"646\":\"v-32ab3f8a#18/2\",\"647\":\"v-32ab3f8a#18/3\",\"648\":\"v-32ab3f8a#18/4\",\"649\":\"v-32ab3f8a#18/5\",\"650\":\"v-32ab3f8a#18/6\",\"651\":\"v-32ab3f8a#18/7\",\"652\":\"v-32ab3f8a#19\",\"653\":\"v-32ab3f8a#19/0\",\"654\":\"v-32ab3f8a#20\",\"655\":\"v-32ab3f8a#21\",\"656\":\"v-32ab3f8a#21/0\",\"657\":\"v-32ab3f8a#22\",\"658\":\"v-32ab3f8a#22/0\",\"659\":\"v-32ab3f8a#23\",\"660\":\"v-32ab3f8a#23/0\",\"661\":\"v-32ab3f8a#23/1\",\"662\":\"v-32ab3f8a#23/2\",\"663\":\"v-32ab3f8a#23/3\",\"664\":\"v-32ab3f8a#23/4\",\"665\":\"v-32ab3f8a#23/5\",\"666\":\"v-32ab3f8a#23/6\",\"667\":\"v-32ab3f8a#23/7\",\"668\":\"v-32ab3f8a#24\",\"669\":\"v-32ab3f8a#24/8\",\"670\":\"v-32ab3f8a#24/9\",\"671\":\"v-32ab3f8a#24/10\",\"672\":\"v-32ab3f8a#24/11\",\"673\":\"v-32ab3f8a#24/12\",\"674\":\"v-32ab3f8a#24/13\",\"675\":\"v-32ab3f8a#24/14\",\"676\":\"v-32ab3f8a#24/15\",\"677\":\"v-32ab3f8a#25\",\"678\":\"v-32ab3f8a#25/0\",\"679\":\"v-1ee00f36\",\"680\":\"v-1ee00f36#1\",\"681\":\"v-1ee00f36#1/0\",\"682\":\"v-1ee00f36#1/1\",\"683\":\"v-1ee00f36#1/2\",\"684\":\"v-1ee00f36#2\",\"685\":\"v-1ee00f36#2/0\",\"686\":\"v-1ee00f36#2/1\",\"687\":\"v-1ee00f36#3\",\"688\":\"v-1ee00f36#3/0\",\"689\":\"v-1ee00f36#4\",\"690\":\"v-1ee00f36#4/0\",\"691\":\"v-1ee00f36#4/1\",\"692\":\"v-1ee00f36#4/2\",\"693\":\"v-1ee00f36#4/3\",\"694\":\"v-1ee00f36#4/4\",\"695\":\"v-1ee00f36#5\",\"696\":\"v-1ee00f36#5/0\",\"697\":\"v-1ee00f36#5/1\",\"698\":\"v-1ee00f36#5/2\",\"699\":\"v-1ee00f36#5/3\",\"700\":\"v-1ee00f36#5/4\",\"701\":\"v-1ee00f36#5/5\",\"702\":\"v-947319a4\",\"703\":\"v-947319a4#0/0\",\"704\":\"v-947319a4#0/1\",\"705\":\"v-947319a4#0/2\",\"706\":\"v-947319a4#0/3\",\"707\":\"v-947319a4#1\",\"708\":\"v-947319a4#1/4\",\"709\":\"v-947319a4#1/5\",\"710\":\"v-947319a4#1/6\",\"711\":\"v-947319a4#1/7\",\"712\":\"v-947319a4#1/8\",\"713\":\"v-947319a4#2\",\"714\":\"v-947319a4#2/0\",\"715\":\"v-947319a4#2/1\",\"716\":\"v-947319a4#2/2\",\"717\":\"v-947319a4#2/3\",\"718\":\"v-947319a4#2/4\",\"719\":\"v-947319a4#2/5\",\"720\":\"v-947319a4#2/6\",\"721\":\"v-947319a4#2/7\",\"722\":\"v-947319a4#3\",\"723\":\"v-947319a4#3/0\",\"724\":\"v-947319a4#3/1\",\"725\":\"v-947319a4#3/2\",\"726\":\"v-947319a4#3/3\",\"727\":\"v-947319a4#3/4\",\"728\":\"v-947319a4#3/5\",\"729\":\"v-947319a4#4\",\"730\":\"v-947319a4#4/0\",\"731\":\"v-947319a4#4/1\",\"732\":\"v-947319a4#4/2\",\"733\":\"v-947319a4#4/3\",\"734\":\"v-947319a4#4/4\",\"735\":\"v-1ef5aaba\",\"736\":\"v-1ef5aaba#1\",\"737\":\"v-1ef5aaba#1/0\",\"738\":\"v-1ef5aaba#1/1\",\"739\":\"v-1ef5aaba#1/2\",\"740\":\"v-1ef5aaba#1/3\",\"741\":\"v-1ef5aaba#1/4\",\"742\":\"v-1ef5aaba#1/5\",\"743\":\"v-1ef5aaba#1/6\",\"744\":\"v-1ef5aaba#1/7\",\"745\":\"v-1ef5aaba#1/8\",\"746\":\"v-1ef5aaba#2\",\"747\":\"v-1ef5aaba#2/0\",\"748\":\"v-1ef5aaba#2/1\",\"749\":\"v-1ef5aaba#2/2\",\"750\":\"v-1ef5aaba#2/3\",\"751\":\"v-1ef5aaba#2/4\",\"752\":\"v-1ef5aaba#2/5\",\"753\":\"v-1ef5aaba#2/6\",\"754\":\"v-1ef5aaba#2/7\",\"755\":\"v-1ef5aaba#2/8\",\"756\":\"v-1ef5aaba#2/9\",\"757\":\"v-1ef5aaba#2/10\",\"758\":\"v-1ef5aaba#2/11\",\"759\":\"v-1ef5aaba#2/12\",\"760\":\"v-1ef5aaba#2/13\",\"761\":\"v-1ef5aaba#2/14\",\"762\":\"v-1ef5aaba#2/15\",\"763\":\"v-1ef5aaba#2/16\",\"764\":\"v-1ef5aaba#2/17\",\"765\":\"v-1ef5aaba#3\",\"766\":\"v-1ef5aaba#3/0\",\"767\":\"v-1ef5aaba#3/1\",\"768\":\"v-1ef5aaba#3/2\",\"769\":\"v-1ef5aaba#3/3\",\"770\":\"v-1ef5aaba#3/4\",\"771\":\"v-1ef5aaba#4\",\"772\":\"v-1ef5aaba#5\",\"773\":\"v-1ef5aaba#5/5\",\"774\":\"v-1ef5aaba#5/6\",\"775\":\"v-1ef5aaba#5/7\",\"776\":\"v-1ef5aaba#5/8\",\"777\":\"v-1ef5aaba#5/9\",\"778\":\"v-1ef5aaba#5/10\",\"779\":\"v-1ef5aaba#5/11\",\"780\":\"v-1ef5aaba#5/12\",\"781\":\"v-1ef5aaba#5/13\",\"782\":\"v-1ef5aaba#6\",\"783\":\"v-1ef5aaba#6/0\",\"784\":\"v-1ef5aaba#6/1\",\"785\":\"v-1ef5aaba#6/2\",\"786\":\"v-1ef5aaba#6/3\",\"787\":\"v-1ef5aaba#6/4\",\"788\":\"v-1ef5aaba#6/5\",\"789\":\"v-1ef5aaba#6/6\",\"790\":\"v-1ef5aaba#6/7\",\"791\":\"v-1ef5aaba#6/8\",\"792\":\"v-1ef5aaba#7\",\"793\":\"v-1ef5aaba#7/0\",\"794\":\"v-1ef5aaba#7/1\",\"795\":\"v-1ef5aaba#7/2\",\"796\":\"v-1ef5aaba#7/3\",\"797\":\"v-1ef5aaba#7/4\",\"798\":\"v-1ef5aaba#7/5\",\"799\":\"v-1ef5aaba#7/6\",\"800\":\"v-1ef5aaba#7/7\",\"801\":\"v-1ef5aaba#7/8\",\"802\":\"v-1ef5aaba#7/9\",\"803\":\"v-1ef5aaba#7/10\",\"804\":\"v-1ef5aaba#7/11\",\"805\":\"v-1ef5aaba#7/12\",\"806\":\"v-1ef5aaba#7/13\",\"807\":\"v-1ef5aaba#7/14\",\"808\":\"v-1ef5aaba#7/15\",\"809\":\"v-1ef5aaba#7/16\",\"810\":\"v-1ef5aaba#7/17\",\"811\":\"v-5cfa3ff0\",\"812\":\"v-5cfa3ff0#1\",\"813\":\"v-5cfa3ff0#2\",\"814\":\"v-5cfa3ff0#2/0\",\"815\":\"v-5cfa3ff0#2/1\",\"816\":\"v-5cfa3ff0#2/2\",\"817\":\"v-5cfa3ff0#3\",\"818\":\"v-5cfa3ff0#3/0\",\"819\":\"v-5cfa3ff0#3/1\",\"820\":\"v-5cfa3ff0#3/2\",\"821\":\"v-5cfa3ff0#3/3\",\"822\":\"v-5cfa3ff0#4\",\"823\":\"v-5cfa3ff0#5\",\"824\":\"v-5cfa3ff0#5/0\",\"825\":\"v-5cfa3ff0#5/1\",\"826\":\"v-5cfa3ff0#5/2\",\"827\":\"v-5cfa3ff0#6\",\"828\":\"v-5cfa3ff0#6/0\",\"829\":\"v-5cfa3ff0#6/1\",\"830\":\"v-5cfa3ff0#7\",\"831\":\"v-5cfa3ff0#7/0\",\"832\":\"v-5cfa3ff0#8\",\"833\":\"v-5cfa3ff0#9\",\"834\":\"v-5cfa3ff0#10\",\"835\":\"v-5cfa3ff0#10/0\",\"836\":\"v-5cfa3ff0#11\",\"837\":\"v-5cfa3ff0#11/0\",\"838\":\"v-5cfa3ff0#11/1\",\"839\":\"v-5cfa3ff0#12\",\"840\":\"v-5cfa3ff0#12/0\",\"841\":\"v-5cfa3ff0#12/1\",\"842\":\"v-5cfa3ff0#13\",\"843\":\"v-5cfa3ff0#13/0\",\"844\":\"v-5cfa3ff0#13/1\",\"845\":\"v-5cfa3ff0#13/2\",\"846\":\"v-5cfa3ff0#13/3\",\"847\":\"v-5cfa3ff0#13/4\",\"848\":\"v-5cfa3ff0#14\",\"849\":\"v-5cfa3ff0#14/0\",\"850\":\"v-5cfa3ff0#14/1\",\"851\":\"v-5cfa3ff0#14/2\",\"852\":\"v-5cfa3ff0#14/3\",\"853\":\"v-5cfa3ff0#14/4\",\"854\":\"v-5cfa3ff0#14/5\",\"855\":\"v-5cfa3ff0#15\",\"856\":\"v-5cfa3ff0#15/0\",\"857\":\"v-5cfa3ff0#15/1\",\"858\":\"v-5cfa3ff0#15/2\",\"859\":\"v-5cfa3ff0#15/3\",\"860\":\"v-5cfa3ff0#15/4\",\"861\":\"v-5cfa3ff0#15/5\",\"862\":\"v-5cfa3ff0#15/6\",\"863\":\"v-5cfa3ff0#16\",\"864\":\"v-5cfa3ff0#16/0\",\"865\":\"v-5cfa3ff0#16/1\",\"866\":\"v-2867de92\",\"867\":\"v-2867de92#1\",\"868\":\"v-2867de92#1/0\",\"869\":\"v-2867de92#1/1\",\"870\":\"v-2867de92#2\",\"871\":\"v-2867de92#2/0\",\"872\":\"v-2867de92#3\",\"873\":\"v-2867de92#3/0\",\"874\":\"v-2867de92#4\",\"875\":\"v-2867de92#4/0\",\"876\":\"v-2867de92#5\",\"877\":\"v-2867de92#5/0\",\"878\":\"v-2867de92#6\",\"879\":\"v-2867de92#6/0\",\"880\":\"v-2867de92#6/1\",\"881\":\"v-2867de92#7\",\"882\":\"v-2867de92#7/0\",\"883\":\"v-2867de92#7/1\",\"884\":\"v-2867de92#7/2\",\"885\":\"v-2867de92#7/3\",\"886\":\"v-2867de92#7/4\",\"887\":\"v-2867de92#7/5\",\"888\":\"v-2867de92#7/6\",\"889\":\"v-2867de92#7/7\",\"890\":\"v-2867de92#7/8\",\"891\":\"v-2867de92#7/9\",\"892\":\"v-2867de92#7/10\",\"893\":\"v-2867de92#7/11\",\"894\":\"v-2867de92#7/12\",\"895\":\"v-2867de92#7/13\",\"896\":\"v-2867de92#7/14\",\"897\":\"v-2867de92#7/15\",\"898\":\"v-2867de92#8\",\"899\":\"v-2867de92#8/0\",\"900\":\"v-2867de92#8/1\",\"901\":\"v-2867de92#8/2\",\"902\":\"v-1cef86d5\",\"903\":\"v-1cef86d5#1\",\"904\":\"v-1cef86d5#1/0\",\"905\":\"v-1cef86d5#1/1\",\"906\":\"v-1cef86d5#1/2\",\"907\":\"v-1cef86d5#1/3\",\"908\":\"v-1cef86d5#1/4\",\"909\":\"v-1cef86d5#2\",\"910\":\"v-1cef86d5#2/0\",\"911\":\"v-1cef86d5#2/1\",\"912\":\"v-1cef86d5#2/2\",\"913\":\"v-1cef86d5#2/3\",\"914\":\"v-1cef86d5#2/4\",\"915\":\"v-1cef86d5#2/5\",\"916\":\"v-1cef86d5#2/6\",\"917\":\"v-1cef86d5#2/7\",\"918\":\"v-1cef86d5#2/8\",\"919\":\"v-1cef86d5#2/9\",\"920\":\"v-1cef86d5#2/10\",\"921\":\"v-1cef86d5#2/11\",\"922\":\"v-1cef86d5#2/12\",\"923\":\"v-1cef86d5#3\",\"924\":\"v-1cef86d5#3/0\",\"925\":\"v-1cef86d5#3/1\",\"926\":\"v-1cef86d5#3/2\",\"927\":\"v-1cef86d5#3/3\",\"928\":\"v-1cef86d5#3/4\",\"929\":\"v-1cef86d5#3/5\",\"930\":\"v-1cef86d5#3/6\",\"931\":\"v-1cef86d5#3/7\",\"932\":\"v-1cef86d5#3/8\",\"933\":\"v-1cef86d5#3/9\",\"934\":\"v-1cef86d5#3/10\",\"935\":\"v-1cef86d5#4\",\"936\":\"v-1cef86d5#4/0\",\"937\":\"v-1cef86d5#4/1\",\"938\":\"v-1cef86d5#4/2\",\"939\":\"v-1cef86d5#4/3\",\"940\":\"v-1cef86d5#4/4\",\"941\":\"v-1cef86d5#4/5\",\"942\":\"v-1cef86d5#4/6\",\"943\":\"v-1cef86d5#4/7\",\"944\":\"v-1cef86d5#4/8\",\"945\":\"v-1cef86d5#4/9\",\"946\":\"v-1cef86d5#4/10\",\"947\":\"v-1cef86d5#4/11\",\"948\":\"v-1cef86d5#4/12\",\"949\":\"v-1cef86d5#5\",\"950\":\"v-1cef86d5#5/0\",\"951\":\"v-1cef86d5#5/1\",\"952\":\"v-1cef86d5#6\",\"953\":\"v-1cef86d5#7\",\"954\":\"v-1cef86d5#7/0\",\"955\":\"v-1cef86d5#7/1\",\"956\":\"v-1cef86d5#7/2\",\"957\":\"v-1cef86d5#8\",\"958\":\"v-1cef86d5#8/0\",\"959\":\"v-1cef86d5#8/1\",\"960\":\"v-1cef86d5#8/2\",\"961\":\"v-1cef86d5#8/3\",\"962\":\"v-1cef86d5#8/4\",\"963\":\"v-1cef86d5#8/5\",\"964\":\"v-1cef86d5#8/6\",\"965\":\"v-1cef86d5#8/7\",\"966\":\"v-1cef86d5#8/8\",\"967\":\"v-1cef86d5#8/9\",\"968\":\"v-1cef86d5#8/10\",\"969\":\"v-1cef86d5#8/11\",\"970\":\"v-1cef86d5#8/12\",\"971\":\"v-1cef86d5#8/13\",\"972\":\"v-1cef86d5#8/14\",\"973\":\"v-1cef86d5#8/15\",\"974\":\"v-1cef86d5#8/16\",\"975\":\"v-1cef86d5#8/17\",\"976\":\"v-1cef86d5#8/18\",\"977\":\"v-1cef86d5#8/19\",\"978\":\"v-1cef86d5#8/20\",\"979\":\"v-1cef86d5#8/21\",\"980\":\"v-1cef86d5#8/22\",\"981\":\"v-1cef86d5#8/23\",\"982\":\"v-1cef86d5#8/24\",\"983\":\"v-1cef86d5#8/25\",\"984\":\"v-1cef86d5#8/26\",\"985\":\"v-1cef86d5#8/27\",\"986\":\"v-1cef86d5#8/28\",\"987\":\"v-1cef86d5#8/29\",\"988\":\"v-1cef86d5#8/30\",\"989\":\"v-1cef86d5#8/31\",\"990\":\"v-1cef86d5#8/32\",\"991\":\"v-1cef86d5#8/33\",\"992\":\"v-1cef86d5#8/34\",\"993\":\"v-1cef86d5#8/35\",\"994\":\"v-1cef86d5#8/36\",\"995\":\"v-1cef86d5#8/37\",\"996\":\"v-1cef86d5#8/38\",\"997\":\"v-1cef86d5#8/39\",\"998\":\"v-1cef86d5#8/40\",\"999\":\"v-1cef86d5#8/41\",\"1000\":\"v-1cef86d5#8/42\",\"1001\":\"v-1cef86d5#8/43\",\"1002\":\"v-1cef86d5#8/44\",\"1003\":\"v-1cef86d5#8/45\",\"1004\":\"v-1cef86d5#8/46\",\"1005\":\"v-1cef86d5#8/47\",\"1006\":\"v-1cef86d5#8/48\",\"1007\":\"v-1cef86d5#8/49\",\"1008\":\"v-1cef86d5#8/50\",\"1009\":\"v-1cef86d5#8/51\",\"1010\":\"v-1cef86d5#8/52\",\"1011\":\"v-1cef86d5#8/53\",\"1012\":\"v-1cef86d5#8/54\",\"1013\":\"v-1cef86d5#8/55\",\"1014\":\"v-1cef86d5#8/56\",\"1015\":\"v-1cef86d5#8/57\",\"1016\":\"v-1cef86d5#8/58\",\"1017\":\"v-1cef86d5#8/59\",\"1018\":\"v-1cef86d5#8/60\",\"1019\":\"v-1cef86d5#8/61\",\"1020\":\"v-1cef86d5#8/62\",\"1021\":\"v-1cef86d5#8/63\",\"1022\":\"v-1cef86d5#8/64\",\"1023\":\"v-1cef86d5#8/65\",\"1024\":\"v-1cef86d5#8/66\",\"1025\":\"v-1cef86d5#8/67\",\"1026\":\"v-1cef86d5#8/68\",\"1027\":\"v-1cef86d5#8/69\",\"1028\":\"v-1cef86d5#8/70\",\"1029\":\"v-1cef86d5#8/71\",\"1030\":\"v-1cef86d5#9\",\"1031\":\"v-1cef86d5#9/0\",\"1032\":\"v-1cef86d5#9/1\",\"1033\":\"v-1cef86d5#9/2\",\"1034\":\"v-1cef86d5#10\",\"1035\":\"v-1cef86d5#10/0\",\"1036\":\"v-1cef86d5#10/1\",\"1037\":\"v-1cef86d5#10/2\",\"1038\":\"v-1cef86d5#10/3\",\"1039\":\"v-1cef86d5#10/4\",\"1040\":\"v-1cef86d5#11\",\"1041\":\"v-1cef86d5#11/0\",\"1042\":\"v-4036851e\",\"1043\":\"v-4036851e#1\",\"1044\":\"v-4036851e#2\",\"1045\":\"v-4036851e#2/0\",\"1046\":\"v-4036851e#2/1\",\"1047\":\"v-4036851e#2/2\",\"1048\":\"v-4036851e#2/3\",\"1049\":\"v-4036851e#2/4\",\"1050\":\"v-4036851e#2/5\",\"1051\":\"v-4036851e#3\",\"1052\":\"v-4036851e#4\",\"1053\":\"v-4036851e#4/0\",\"1054\":\"v-4036851e#4/1\",\"1055\":\"v-4036851e#4/2\",\"1056\":\"v-4036851e#4/3\",\"1057\":\"v-4036851e#4/4\",\"1058\":\"v-4036851e#4/5\",\"1059\":\"v-4036851e#4/6\",\"1060\":\"v-4036851e#4/7\",\"1061\":\"v-4036851e#4/8\",\"1062\":\"v-4036851e#4/9\",\"1063\":\"v-4036851e#4/10\",\"1064\":\"v-4036851e#4/11\",\"1065\":\"v-4036851e#4/12\",\"1066\":\"v-4036851e#4/13\",\"1067\":\"v-4036851e#4/14\",\"1068\":\"v-4036851e#5\",\"1069\":\"v-4036851e#5/0\",\"1070\":\"v-4036851e#5/1\",\"1071\":\"v-4036851e#5/2\",\"1072\":\"v-4036851e#5/3\",\"1073\":\"v-4036851e#5/4\",\"1074\":\"v-4036851e#5/5\",\"1075\":\"v-4036851e#5/6\",\"1076\":\"v-4036851e#6\",\"1077\":\"v-4036851e#7\",\"1078\":\"v-4036851e#7/0\",\"1079\":\"v-4036851e#7/1\",\"1080\":\"v-4036851e#7/2\",\"1081\":\"v-4036851e#7/3\",\"1082\":\"v-4036851e#7/4\",\"1083\":\"v-4036851e#7/5\",\"1084\":\"v-4036851e#7/6\",\"1085\":\"v-4036851e#7/7\",\"1086\":\"v-4036851e#7/8\",\"1087\":\"v-4036851e#7/9\",\"1088\":\"v-4036851e#7/10\",\"1089\":\"v-4036851e#8\",\"1090\":\"v-4036851e#8/0\",\"1091\":\"v-4036851e#8/1\",\"1092\":\"v-4036851e#8/2\",\"1093\":\"v-4036851e#8/3\",\"1094\":\"v-4036851e#8/4\",\"1095\":\"v-4036851e#8/5\",\"1096\":\"v-4036851e#9\",\"1097\":\"v-4036851e#9/0\",\"1098\":\"v-4036851e#9/1\",\"1099\":\"v-4036851e#9/2\",\"1100\":\"v-4036851e#9/3\",\"1101\":\"v-4036851e#9/4\",\"1102\":\"v-4036851e#9/5\",\"1103\":\"v-4036851e#9/6\",\"1104\":\"v-4036851e#9/7\",\"1105\":\"v-4036851e#9/8\",\"1106\":\"v-4036851e#9/9\",\"1107\":\"v-4036851e#9/10\",\"1108\":\"v-4036851e#10\",\"1109\":\"v-4036851e#10/0\",\"1110\":\"v-4036851e#10/1\",\"1111\":\"v-4036851e#10/2\",\"1112\":\"v-4036851e#10/3\",\"1113\":\"v-4036851e#10/4\",\"1114\":\"v-4036851e#10/5\",\"1115\":\"v-4036851e#10/6\",\"1116\":\"v-4036851e#10/7\",\"1117\":\"v-4036851e#10/8\",\"1118\":\"v-4036851e#10/9\",\"1119\":\"v-4036851e#10/10\",\"1120\":\"v-4036851e#10/11\",\"1121\":\"v-4036851e#10/12\",\"1122\":\"v-4036851e#10/13\",\"1123\":\"v-4036851e#10/14\",\"1124\":\"v-4036851e#10/15\",\"1125\":\"v-4036851e#10/16\",\"1126\":\"v-4036851e#10/17\",\"1127\":\"v-4036851e#10/18\",\"1128\":\"v-4036851e#10/19\",\"1129\":\"v-4036851e#10/20\",\"1130\":\"v-4036851e#10/21\",\"1131\":\"v-4036851e#10/22\",\"1132\":\"v-4036851e#10/23\",\"1133\":\"v-4036851e#10/24\",\"1134\":\"v-4036851e#10/25\",\"1135\":\"v-4036851e#10/26\",\"1136\":\"v-4036851e#10/27\",\"1137\":\"v-4036851e#10/28\",\"1138\":\"v-4036851e#11\",\"1139\":\"v-4036851e#11/0\",\"1140\":\"v-4036851e#11/1\",\"1141\":\"v-4036851e#11/2\",\"1142\":\"v-4036851e#11/3\",\"1143\":\"v-4036851e#11/4\",\"1144\":\"v-4036851e#11/5\",\"1145\":\"v-4036851e#11/6\",\"1146\":\"v-4036851e#11/7\",\"1147\":\"v-4036851e#11/8\",\"1148\":\"v-4036851e#11/9\",\"1149\":\"v-4036851e#12\",\"1150\":\"v-4036851e#12/0\",\"1151\":\"v-4036851e#12/1\",\"1152\":\"v-4036851e#12/2\",\"1153\":\"v-4036851e#13\",\"1154\":\"v-4036851e#13/0\",\"1155\":\"v-4036851e#13/1\",\"1156\":\"v-4036851e#13/2\",\"1157\":\"v-4036851e#13/3\",\"1158\":\"v-4036851e#13/4\",\"1159\":\"v-4036851e#13/5\",\"1160\":\"v-4036851e#14\",\"1161\":\"v-4036851e#14/6\",\"1162\":\"v-4036851e#14/7\",\"1163\":\"v-4036851e#14/8\",\"1164\":\"v-4036851e#14/9\",\"1165\":\"v-4036851e#14/10\",\"1166\":\"v-4036851e#14/11\",\"1167\":\"v-4036851e#15\",\"1168\":\"v-4036851e#15/0\",\"1169\":\"v-4036851e#15/1\",\"1170\":\"v-4036851e#16\",\"1171\":\"v-4036851e#17\",\"1172\":\"v-4036851e#17/2\",\"1173\":\"v-4036851e#17/3\",\"1174\":\"v-4036851e#17/4\",\"1175\":\"v-4036851e#17/5\",\"1176\":\"v-4036851e#18\",\"1177\":\"v-4036851e#18/0\",\"1178\":\"v-4036851e#18/1\",\"1179\":\"v-4036851e#18/2\",\"1180\":\"v-4036851e#19\",\"1181\":\"v-4036851e#19/0\",\"1182\":\"v-4036851e#19/1\",\"1183\":\"v-4036851e#19/2\",\"1184\":\"v-4036851e#19/3\",\"1185\":\"v-4036851e#19/4\",\"1186\":\"v-4036851e#19/5\",\"1187\":\"v-4036851e#19/6\",\"1188\":\"v-4036851e#19/7\",\"1189\":\"v-4036851e#19/8\",\"1190\":\"v-4036851e#19/9\",\"1191\":\"v-4036851e#19/10\",\"1192\":\"v-4036851e#19/11\",\"1193\":\"v-4036851e#20\",\"1194\":\"v-4036851e#20/0\",\"1195\":\"v-4036851e#20/1\",\"1196\":\"v-4036851e#20/2\",\"1197\":\"v-4036851e#20/3\",\"1198\":\"v-4036851e#20/4\",\"1199\":\"v-4036851e#20/5\",\"1200\":\"v-4036851e#20/6\",\"1201\":\"v-4036851e#20/7\",\"1202\":\"v-4036851e#21\",\"1203\":\"v-4036851e#22\",\"1204\":\"v-4036851e#22/0\",\"1205\":\"v-4036851e#22/1\",\"1206\":\"v-4036851e#22/2\",\"1207\":\"v-4036851e#22/3\",\"1208\":\"v-4036851e#22/4\",\"1209\":\"v-4036851e#22/5\",\"1210\":\"v-4036851e#23\",\"1211\":\"v-4036851e#23/0\",\"1212\":\"v-4036851e#23/1\",\"1213\":\"v-4036851e#23/2\",\"1214\":\"v-4036851e#23/3\",\"1215\":\"v-4036851e#23/4\",\"1216\":\"v-4036851e#23/5\",\"1217\":\"v-4036851e#23/6\",\"1218\":\"v-4036851e#23/7\",\"1219\":\"v-4036851e#24\",\"1220\":\"v-4036851e#25\",\"1221\":\"v-4036851e#25/0\",\"1222\":\"v-4036851e#26\",\"1223\":\"v-4036851e#26/0\",\"1224\":\"v-4036851e#26/1\",\"1225\":\"v-4036851e#26/2\",\"1226\":\"v-4036851e#26/3\",\"1227\":\"v-4036851e#26/4\",\"1228\":\"v-4036851e#26/5\",\"1229\":\"v-4036851e#27\",\"1230\":\"v-4036851e#27/0\",\"1231\":\"v-4036851e#27/1\",\"1232\":\"v-4036851e#28\",\"1233\":\"v-4036851e#28/0\",\"1234\":\"v-4036851e#28/1\",\"1235\":\"v-4036851e#28/2\",\"1236\":\"v-4036851e#28/3\",\"1237\":\"v-4036851e#28/4\",\"1238\":\"v-4036851e#28/5\",\"1239\":\"v-4036851e#28/6\",\"1240\":\"v-4036851e#28/7\",\"1241\":\"v-4036851e#28/8\",\"1242\":\"v-4036851e#28/9\",\"1243\":\"v-240dba63\",\"1244\":\"v-240dba63#1\",\"1245\":\"v-240dba63#1/0\",\"1246\":\"v-240dba63#1/1\",\"1247\":\"v-240dba63#1/2\",\"1248\":\"v-240dba63#1/3\",\"1249\":\"v-240dba63#1/4\",\"1250\":\"v-240dba63#1/5\",\"1251\":\"v-240dba63#1/6\",\"1252\":\"v-240dba63#1/7\",\"1253\":\"v-240dba63#2\",\"1254\":\"v-240dba63#3\",\"1255\":\"v-240dba63#3/0\",\"1256\":\"v-240dba63#3/1\",\"1257\":\"v-240dba63#3/2\",\"1258\":\"v-240dba63#3/3\",\"1259\":\"v-240dba63#3/4\",\"1260\":\"v-240dba63#3/5\",\"1261\":\"v-240dba63#3/6\",\"1262\":\"v-240dba63#3/7\",\"1263\":\"v-240dba63#3/8\",\"1264\":\"v-240dba63#4\",\"1265\":\"v-240dba63#4/9\",\"1266\":\"v-240dba63#4/10\",\"1267\":\"v-240dba63#4/11\",\"1268\":\"v-240dba63#4/12\",\"1269\":\"v-240dba63#4/13\",\"1270\":\"v-240dba63#4/14\",\"1271\":\"v-240dba63#4/15\",\"1272\":\"v-240dba63#4/16\",\"1273\":\"v-240dba63#4/17\",\"1274\":\"v-240dba63#4/18\",\"1275\":\"v-240dba63#4/19\",\"1276\":\"v-240dba63#4/20\",\"1277\":\"v-240dba63#4/21\",\"1278\":\"v-240dba63#4/22\",\"1279\":\"v-240dba63#4/23\",\"1280\":\"v-240dba63#4/24\",\"1281\":\"v-240dba63#4/25\",\"1282\":\"v-240dba63#4/26\",\"1283\":\"v-240dba63#4/27\",\"1284\":\"v-240dba63#4/28\",\"1285\":\"v-240dba63#4/29\",\"1286\":\"v-240dba63#4/30\",\"1287\":\"v-240dba63#4/31\",\"1288\":\"v-240dba63#4/32\",\"1289\":\"v-240dba63#4/33\",\"1290\":\"v-240dba63#4/34\",\"1291\":\"v-240dba63#4/35\",\"1292\":\"v-240dba63#4/36\",\"1293\":\"v-240dba63#4/37\",\"1294\":\"v-240dba63#4/38\",\"1295\":\"v-240dba63#4/39\",\"1296\":\"v-240dba63#5\",\"1297\":\"v-240dba63#6\",\"1298\":\"v-240dba63#6/0\",\"1299\":\"v-240dba63#7\",\"1300\":\"v-240dba63#7/0\",\"1301\":\"v-240dba63#7/1\",\"1302\":\"v-240dba63#7/2\",\"1303\":\"v-240dba63#7/3\",\"1304\":\"v-240dba63#7/4\",\"1305\":\"v-240dba63#8\",\"1306\":\"v-240dba63#9\",\"1307\":\"v-240dba63#9/0\",\"1308\":\"v-240dba63#10\",\"1309\":\"v-240dba63#10/0\",\"1310\":\"v-240dba63#10/1\",\"1311\":\"v-240dba63#10/2\",\"1312\":\"v-240dba63#10/3\",\"1313\":\"v-240dba63#11\",\"1314\":\"v-240dba63#11/0\",\"1315\":\"v-240dba63#11/1\",\"1316\":\"v-240dba63#11/2\",\"1317\":\"v-240dba63#11/3\",\"1318\":\"v-240dba63#11/4\",\"1319\":\"v-350830c1\",\"1320\":\"v-350830c1#1\",\"1321\":\"v-350830c1#2\",\"1322\":\"v-350830c1#3\",\"1323\":\"v-350830c1#4\",\"1324\":\"v-350830c1#5\",\"1325\":\"v-350830c1#5/0\",\"1326\":\"v-6a58427d\",\"1327\":\"v-6a58427d#1\",\"1328\":\"v-6a58427d#2\",\"1329\":\"v-6a58427d#2/0\",\"1330\":\"v-6a58427d#2/1\",\"1331\":\"v-6a58427d#2/2\",\"1332\":\"v-6a58427d#2/3\",\"1333\":\"v-6a58427d#2/4\",\"1334\":\"v-6a58427d#2/5\",\"1335\":\"v-6a58427d#2/6\",\"1336\":\"v-6a58427d#2/7\",\"1337\":\"v-6a58427d#3\",\"1338\":\"v-6a58427d#3/0\",\"1339\":\"v-3641dca3\",\"1340\":\"v-3641dca3#1\",\"1341\":\"v-3641dca3#2\",\"1342\":\"v-3641dca3#3\",\"1343\":\"v-3641dca3#3/0\",\"1344\":\"v-3641dca3#3/1\",\"1345\":\"v-3641dca3#3/2\",\"1346\":\"v-3641dca3#3/3\",\"1347\":\"v-3641dca3#3/4\",\"1348\":\"v-3641dca3#3/5\",\"1349\":\"v-3641dca3#4\",\"1350\":\"v-3641dca3#5\",\"1351\":\"v-3641dca3#5/0\",\"1352\":\"v-3641dca3#5/1\",\"1353\":\"v-3641dca3#5/2\",\"1354\":\"v-3641dca3#5/3\",\"1355\":\"v-3641dca3#5/4\",\"1356\":\"v-3641dca3#5/5\",\"1357\":\"v-3641dca3#5/6\",\"1358\":\"v-3641dca3#5/7\",\"1359\":\"v-3641dca3#5/8\",\"1360\":\"v-3641dca3#5/9\",\"1361\":\"v-3641dca3#5/10\",\"1362\":\"v-3641dca3#5/11\",\"1363\":\"v-3641dca3#6\",\"1364\":\"v-3641dca3#6/0\",\"1365\":\"v-3641dca3#6/1\",\"1366\":\"v-3641dca3#6/2\",\"1367\":\"v-3641dca3#6/3\",\"1368\":\"v-3641dca3#6/4\",\"1369\":\"v-3641dca3#6/5\",\"1370\":\"v-3641dca3#6/6\",\"1371\":\"v-3641dca3#7\",\"1372\":\"v-3641dca3#8\",\"1373\":\"v-3641dca3#8/0\",\"1374\":\"v-3641dca3#8/1\",\"1375\":\"v-3641dca3#8/2\",\"1376\":\"v-3641dca3#8/3\",\"1377\":\"v-3641dca3#9\",\"1378\":\"v-3641dca3#9/0\",\"1379\":\"v-3641dca3#9/1\",\"1380\":\"v-3641dca3#9/2\",\"1381\":\"v-3641dca3#9/3\",\"1382\":\"v-3641dca3#9/4\",\"1383\":\"v-3641dca3#9/5\",\"1384\":\"v-3641dca3#9/6\",\"1385\":\"v-3641dca3#9/7\",\"1386\":\"v-3641dca3#9/8\",\"1387\":\"v-3641dca3#9/9\",\"1388\":\"v-3641dca3#9/10\",\"1389\":\"v-3641dca3#9/11\",\"1390\":\"v-3641dca3#9/12\",\"1391\":\"v-3641dca3#9/13\",\"1392\":\"v-3641dca3#9/14\",\"1393\":\"v-3641dca3#9/15\",\"1394\":\"v-3641dca3#9/16\",\"1395\":\"v-3641dca3#9/17\",\"1396\":\"v-3641dca3#9/18\",\"1397\":\"v-3641dca3#9/19\",\"1398\":\"v-3641dca3#10\",\"1399\":\"v-3641dca3#10/0\",\"1400\":\"v-3641dca3#10/1\",\"1401\":\"v-3641dca3#10/2\",\"1402\":\"v-3641dca3#10/3\",\"1403\":\"v-3641dca3#11\",\"1404\":\"v-3641dca3#11/0\",\"1405\":\"v-3641dca3#11/1\",\"1406\":\"v-3641dca3#11/2\",\"1407\":\"v-3641dca3#11/3\",\"1408\":\"v-3641dca3#11/4\",\"1409\":\"v-3641dca3#11/5\",\"1410\":\"v-3641dca3#11/6\",\"1411\":\"v-3641dca3#11/7\",\"1412\":\"v-3641dca3#11/8\",\"1413\":\"v-3641dca3#11/9\",\"1414\":\"v-3641dca3#12\",\"1415\":\"v-3641dca3#12/0\",\"1416\":\"v-3641dca3#12/1\",\"1417\":\"v-3641dca3#12/2\",\"1418\":\"v-3641dca3#12/3\",\"1419\":\"v-3641dca3#12/4\",\"1420\":\"v-3641dca3#12/5\",\"1421\":\"v-3641dca3#12/6\",\"1422\":\"v-3641dca3#12/7\",\"1423\":\"v-3641dca3#12/8\",\"1424\":\"v-3641dca3#12/9\",\"1425\":\"v-3641dca3#12/10\",\"1426\":\"v-3641dca3#12/11\",\"1427\":\"v-3641dca3#12/12\",\"1428\":\"v-3641dca3#12/13\",\"1429\":\"v-3641dca3#12/14\",\"1430\":\"v-3641dca3#13\",\"1431\":\"v-3641dca3#13/0\",\"1432\":\"v-3641dca3#13/1\",\"1433\":\"v-3641dca3#13/2\",\"1434\":\"v-3641dca3#14\",\"1435\":\"v-3641dca3#14/0\",\"1436\":\"v-3641dca3#14/1\",\"1437\":\"v-3641dca3#14/2\",\"1438\":\"v-3641dca3#14/3\",\"1439\":\"v-3641dca3#14/4\",\"1440\":\"v-3641dca3#14/5\",\"1441\":\"v-3641dca3#14/6\",\"1442\":\"v-3641dca3#14/7\",\"1443\":\"v-3641dca3#14/8\",\"1444\":\"v-3641dca3#14/9\",\"1445\":\"v-3641dca3#14/10\",\"1446\":\"v-3641dca3#14/11\",\"1447\":\"v-3641dca3#14/12\",\"1448\":\"v-3641dca3#14/13\",\"1449\":\"v-3641dca3#14/14\",\"1450\":\"v-3641dca3#14/15\",\"1451\":\"v-3641dca3#14/16\",\"1452\":\"v-3641dca3#14/17\",\"1453\":\"v-3641dca3#14/18\",\"1454\":\"v-3641dca3#14/19\",\"1455\":\"v-3641dca3#15\",\"1456\":\"v-3641dca3#15/0\",\"1457\":\"v-3641dca3#15/1\",\"1458\":\"v-3641dca3#15/2\",\"1459\":\"v-3641dca3#15/3\",\"1460\":\"v-3641dca3#15/4\",\"1461\":\"v-3641dca3#15/5\",\"1462\":\"v-3641dca3#15/6\",\"1463\":\"v-3641dca3#15/7\",\"1464\":\"v-3641dca3#15/8\",\"1465\":\"v-3641dca3#15/9\",\"1466\":\"v-3641dca3#15/10\",\"1467\":\"v-3641dca3#15/11\",\"1468\":\"v-3641dca3#15/12\",\"1469\":\"v-3641dca3#15/13\",\"1470\":\"v-3641dca3#15/14\",\"1471\":\"v-3641dca3#15/15\",\"1472\":\"v-3641dca3#15/16\",\"1473\":\"v-3641dca3#15/17\",\"1474\":\"v-3641dca3#15/18\",\"1475\":\"v-3641dca3#15/19\",\"1476\":\"v-3641dca3#16\",\"1477\":\"v-3641dca3#16/0\",\"1478\":\"v-3641dca3#16/1\",\"1479\":\"v-3641dca3#16/2\",\"1480\":\"v-3641dca3#16/3\",\"1481\":\"v-3641dca3#16/4\",\"1482\":\"v-3641dca3#16/5\",\"1483\":\"v-3641dca3#16/6\",\"1484\":\"v-3641dca3#16/7\",\"1485\":\"v-3641dca3#16/8\",\"1486\":\"v-3641dca3#16/9\",\"1487\":\"v-3641dca3#16/10\",\"1488\":\"v-3641dca3#16/11\",\"1489\":\"v-3641dca3#16/12\",\"1490\":\"v-3641dca3#16/13\",\"1491\":\"v-3641dca3#16/14\",\"1492\":\"v-3641dca3#16/15\",\"1493\":\"v-3641dca3#16/16\",\"1494\":\"v-3641dca3#17\",\"1495\":\"v-3641dca3#17/0\",\"1496\":\"v-3641dca3#17/1\",\"1497\":\"v-3641dca3#17/2\",\"1498\":\"v-3641dca3#17/3\",\"1499\":\"v-3641dca3#17/4\",\"1500\":\"v-3641dca3#17/5\",\"1501\":\"v-3641dca3#17/6\",\"1502\":\"v-3641dca3#17/7\",\"1503\":\"v-3641dca3#17/8\",\"1504\":\"v-3641dca3#17/9\",\"1505\":\"v-3641dca3#17/10\",\"1506\":\"v-3641dca3#17/11\",\"1507\":\"v-444699ba\",\"1508\":\"v-444699ba#1\",\"1509\":\"v-444699ba#2\",\"1510\":\"v-444699ba#3\",\"1511\":\"v-444699ba#3/0\",\"1512\":\"v-444699ba#3/1\",\"1513\":\"v-444699ba#3/2\",\"1514\":\"v-444699ba#3/3\",\"1515\":\"v-444699ba#3/4\",\"1516\":\"v-444699ba#3/5\",\"1517\":\"v-444699ba#4\",\"1518\":\"v-444699ba#5\",\"1519\":\"v-444699ba#5/0\",\"1520\":\"v-444699ba#5/1\",\"1521\":\"v-444699ba#5/2\",\"1522\":\"v-444699ba#5/3\",\"1523\":\"v-444699ba#5/4\",\"1524\":\"v-444699ba#5/5\",\"1525\":\"v-444699ba#5/6\",\"1526\":\"v-444699ba#5/7\",\"1527\":\"v-444699ba#5/8\",\"1528\":\"v-444699ba#5/9\",\"1529\":\"v-444699ba#5/10\",\"1530\":\"v-444699ba#5/11\",\"1531\":\"v-444699ba#6\",\"1532\":\"v-444699ba#6/0\",\"1533\":\"v-444699ba#6/1\",\"1534\":\"v-444699ba#6/2\",\"1535\":\"v-444699ba#6/3\",\"1536\":\"v-444699ba#6/4\",\"1537\":\"v-444699ba#6/5\",\"1538\":\"v-444699ba#6/6\",\"1539\":\"v-444699ba#7\",\"1540\":\"v-444699ba#8\",\"1541\":\"v-444699ba#8/0\",\"1542\":\"v-444699ba#8/1\",\"1543\":\"v-444699ba#8/2\",\"1544\":\"v-444699ba#8/3\",\"1545\":\"v-444699ba#9\",\"1546\":\"v-444699ba#9/0\",\"1547\":\"v-444699ba#9/1\",\"1548\":\"v-444699ba#9/2\",\"1549\":\"v-444699ba#9/3\",\"1550\":\"v-444699ba#9/4\",\"1551\":\"v-444699ba#9/5\",\"1552\":\"v-444699ba#9/6\",\"1553\":\"v-444699ba#9/7\",\"1554\":\"v-444699ba#9/8\",\"1555\":\"v-444699ba#9/9\",\"1556\":\"v-444699ba#9/10\",\"1557\":\"v-444699ba#9/11\",\"1558\":\"v-444699ba#9/12\",\"1559\":\"v-444699ba#9/13\",\"1560\":\"v-444699ba#9/14\",\"1561\":\"v-444699ba#9/15\",\"1562\":\"v-444699ba#9/16\",\"1563\":\"v-444699ba#9/17\",\"1564\":\"v-444699ba#9/18\",\"1565\":\"v-444699ba#9/19\",\"1566\":\"v-444699ba#10\",\"1567\":\"v-444699ba#10/0\",\"1568\":\"v-444699ba#10/1\",\"1569\":\"v-444699ba#10/2\",\"1570\":\"v-444699ba#10/3\",\"1571\":\"v-444699ba#11\",\"1572\":\"v-444699ba#11/0\",\"1573\":\"v-444699ba#11/1\",\"1574\":\"v-444699ba#11/2\",\"1575\":\"v-444699ba#11/3\",\"1576\":\"v-444699ba#11/4\",\"1577\":\"v-444699ba#11/5\",\"1578\":\"v-444699ba#11/6\",\"1579\":\"v-444699ba#11/7\",\"1580\":\"v-444699ba#11/8\",\"1581\":\"v-444699ba#11/9\",\"1582\":\"v-444699ba#12\",\"1583\":\"v-444699ba#12/0\",\"1584\":\"v-444699ba#12/1\",\"1585\":\"v-444699ba#12/2\",\"1586\":\"v-444699ba#12/3\",\"1587\":\"v-444699ba#12/4\",\"1588\":\"v-444699ba#12/5\",\"1589\":\"v-444699ba#12/6\",\"1590\":\"v-444699ba#12/7\",\"1591\":\"v-444699ba#12/8\",\"1592\":\"v-444699ba#12/9\",\"1593\":\"v-444699ba#12/10\",\"1594\":\"v-444699ba#12/11\",\"1595\":\"v-444699ba#12/12\",\"1596\":\"v-444699ba#12/13\",\"1597\":\"v-444699ba#12/14\",\"1598\":\"v-444699ba#13\",\"1599\":\"v-444699ba#13/0\",\"1600\":\"v-444699ba#13/1\",\"1601\":\"v-444699ba#13/2\",\"1602\":\"v-444699ba#14\",\"1603\":\"v-444699ba#14/0\",\"1604\":\"v-444699ba#14/1\",\"1605\":\"v-444699ba#14/2\",\"1606\":\"v-444699ba#14/3\",\"1607\":\"v-444699ba#14/4\",\"1608\":\"v-444699ba#14/5\",\"1609\":\"v-444699ba#14/6\",\"1610\":\"v-444699ba#14/7\",\"1611\":\"v-444699ba#14/8\",\"1612\":\"v-444699ba#14/9\",\"1613\":\"v-444699ba#14/10\",\"1614\":\"v-444699ba#14/11\",\"1615\":\"v-444699ba#14/12\",\"1616\":\"v-444699ba#14/13\",\"1617\":\"v-444699ba#14/14\",\"1618\":\"v-444699ba#14/15\",\"1619\":\"v-444699ba#14/16\",\"1620\":\"v-444699ba#14/17\",\"1621\":\"v-444699ba#14/18\",\"1622\":\"v-444699ba#14/19\",\"1623\":\"v-444699ba#15\",\"1624\":\"v-444699ba#15/0\",\"1625\":\"v-444699ba#15/1\",\"1626\":\"v-444699ba#15/2\",\"1627\":\"v-444699ba#15/3\",\"1628\":\"v-444699ba#15/4\",\"1629\":\"v-444699ba#15/5\",\"1630\":\"v-444699ba#15/6\",\"1631\":\"v-444699ba#15/7\",\"1632\":\"v-444699ba#15/8\",\"1633\":\"v-444699ba#15/9\",\"1634\":\"v-444699ba#15/10\",\"1635\":\"v-444699ba#15/11\",\"1636\":\"v-444699ba#15/12\",\"1637\":\"v-444699ba#15/13\",\"1638\":\"v-444699ba#15/14\",\"1639\":\"v-444699ba#15/15\",\"1640\":\"v-444699ba#15/16\",\"1641\":\"v-444699ba#15/17\",\"1642\":\"v-444699ba#15/18\",\"1643\":\"v-444699ba#15/19\",\"1644\":\"v-444699ba#16\",\"1645\":\"v-444699ba#16/0\",\"1646\":\"v-444699ba#16/1\",\"1647\":\"v-444699ba#16/2\",\"1648\":\"v-444699ba#16/3\",\"1649\":\"v-444699ba#16/4\",\"1650\":\"v-444699ba#16/5\",\"1651\":\"v-444699ba#16/6\",\"1652\":\"v-444699ba#16/7\",\"1653\":\"v-444699ba#16/8\",\"1654\":\"v-444699ba#16/9\",\"1655\":\"v-444699ba#16/10\",\"1656\":\"v-444699ba#16/11\",\"1657\":\"v-444699ba#16/12\",\"1658\":\"v-444699ba#16/13\",\"1659\":\"v-444699ba#16/14\",\"1660\":\"v-444699ba#16/15\",\"1661\":\"v-444699ba#16/16\",\"1662\":\"v-444699ba#17\",\"1663\":\"v-444699ba#17/0\",\"1664\":\"v-444699ba#17/1\",\"1665\":\"v-444699ba#17/2\",\"1666\":\"v-444699ba#17/3\",\"1667\":\"v-444699ba#17/4\",\"1668\":\"v-444699ba#17/5\",\"1669\":\"v-444699ba#17/6\",\"1670\":\"v-444699ba#17/7\",\"1671\":\"v-444699ba#17/8\",\"1672\":\"v-444699ba#17/9\",\"1673\":\"v-444699ba#17/10\",\"1674\":\"v-444699ba#17/11\",\"1675\":\"v-5ed95942\",\"1676\":\"v-5ed95942#1\",\"1677\":\"v-5ed95942#2\",\"1678\":\"v-5ed95942#3\",\"1679\":\"v-5ed95942#3/0\",\"1680\":\"v-5ed95942#3/1\",\"1681\":\"v-5ed95942#3/2\",\"1682\":\"v-5ed95942#3/3\",\"1683\":\"v-5ed95942#3/4\",\"1684\":\"v-5ed95942#3/5\",\"1685\":\"v-5ed95942#4\",\"1686\":\"v-5ed95942#5\",\"1687\":\"v-5ed95942#5/0\",\"1688\":\"v-5ed95942#5/1\",\"1689\":\"v-5ed95942#5/2\",\"1690\":\"v-5ed95942#5/3\",\"1691\":\"v-5ed95942#5/4\",\"1692\":\"v-5ed95942#5/5\",\"1693\":\"v-5ed95942#5/6\",\"1694\":\"v-5ed95942#5/7\",\"1695\":\"v-5ed95942#5/8\",\"1696\":\"v-5ed95942#5/9\",\"1697\":\"v-5ed95942#5/10\",\"1698\":\"v-5ed95942#5/11\",\"1699\":\"v-5ed95942#6\",\"1700\":\"v-5ed95942#6/0\",\"1701\":\"v-5ed95942#6/1\",\"1702\":\"v-5ed95942#6/2\",\"1703\":\"v-5ed95942#6/3\",\"1704\":\"v-5ed95942#6/4\",\"1705\":\"v-5ed95942#6/5\",\"1706\":\"v-5ed95942#6/6\",\"1707\":\"v-5ed95942#7\",\"1708\":\"v-5ed95942#8\",\"1709\":\"v-5ed95942#8/0\",\"1710\":\"v-5ed95942#8/1\",\"1711\":\"v-5ed95942#8/2\",\"1712\":\"v-5ed95942#8/3\",\"1713\":\"v-5ed95942#9\",\"1714\":\"v-5ed95942#9/0\",\"1715\":\"v-5ed95942#9/1\",\"1716\":\"v-5ed95942#9/2\",\"1717\":\"v-5ed95942#9/3\",\"1718\":\"v-5ed95942#9/4\",\"1719\":\"v-5ed95942#9/5\",\"1720\":\"v-5ed95942#9/6\",\"1721\":\"v-5ed95942#9/7\",\"1722\":\"v-5ed95942#9/8\",\"1723\":\"v-5ed95942#9/9\",\"1724\":\"v-5ed95942#9/10\",\"1725\":\"v-5ed95942#9/11\",\"1726\":\"v-5ed95942#9/12\",\"1727\":\"v-5ed95942#9/13\",\"1728\":\"v-5ed95942#9/14\",\"1729\":\"v-5ed95942#9/15\",\"1730\":\"v-5ed95942#9/16\",\"1731\":\"v-5ed95942#9/17\",\"1732\":\"v-5ed95942#9/18\",\"1733\":\"v-5ed95942#9/19\",\"1734\":\"v-5ed95942#10\",\"1735\":\"v-5ed95942#10/0\",\"1736\":\"v-5ed95942#10/1\",\"1737\":\"v-5ed95942#10/2\",\"1738\":\"v-5ed95942#10/3\",\"1739\":\"v-5ed95942#11\",\"1740\":\"v-5ed95942#11/0\",\"1741\":\"v-5ed95942#11/1\",\"1742\":\"v-5ed95942#11/2\",\"1743\":\"v-5ed95942#11/3\",\"1744\":\"v-5ed95942#11/4\",\"1745\":\"v-5ed95942#11/5\",\"1746\":\"v-5ed95942#11/6\",\"1747\":\"v-5ed95942#11/7\",\"1748\":\"v-5ed95942#11/8\",\"1749\":\"v-5ed95942#11/9\",\"1750\":\"v-5ed95942#12\",\"1751\":\"v-5ed95942#12/0\",\"1752\":\"v-5ed95942#12/1\",\"1753\":\"v-5ed95942#12/2\",\"1754\":\"v-5ed95942#12/3\",\"1755\":\"v-5ed95942#12/4\",\"1756\":\"v-5ed95942#12/5\",\"1757\":\"v-5ed95942#12/6\",\"1758\":\"v-5ed95942#12/7\",\"1759\":\"v-5ed95942#12/8\",\"1760\":\"v-5ed95942#12/9\",\"1761\":\"v-5ed95942#12/10\",\"1762\":\"v-5ed95942#12/11\",\"1763\":\"v-5ed95942#12/12\",\"1764\":\"v-5ed95942#12/13\",\"1765\":\"v-5ed95942#12/14\",\"1766\":\"v-5ed95942#13\",\"1767\":\"v-5ed95942#13/0\",\"1768\":\"v-5ed95942#13/1\",\"1769\":\"v-5ed95942#13/2\",\"1770\":\"v-5ed95942#14\",\"1771\":\"v-5ed95942#14/0\",\"1772\":\"v-5ed95942#14/1\",\"1773\":\"v-5ed95942#14/2\",\"1774\":\"v-5ed95942#14/3\",\"1775\":\"v-5ed95942#14/4\",\"1776\":\"v-5ed95942#14/5\",\"1777\":\"v-5ed95942#14/6\",\"1778\":\"v-5ed95942#14/7\",\"1779\":\"v-5ed95942#14/8\",\"1780\":\"v-5ed95942#14/9\",\"1781\":\"v-5ed95942#14/10\",\"1782\":\"v-5ed95942#14/11\",\"1783\":\"v-5ed95942#14/12\",\"1784\":\"v-5ed95942#14/13\",\"1785\":\"v-5ed95942#14/14\",\"1786\":\"v-5ed95942#14/15\",\"1787\":\"v-5ed95942#14/16\",\"1788\":\"v-5ed95942#14/17\",\"1789\":\"v-5ed95942#14/18\",\"1790\":\"v-5ed95942#14/19\",\"1791\":\"v-5ed95942#15\",\"1792\":\"v-5ed95942#15/0\",\"1793\":\"v-5ed95942#15/1\",\"1794\":\"v-5ed95942#15/2\",\"1795\":\"v-5ed95942#15/3\",\"1796\":\"v-5ed95942#15/4\",\"1797\":\"v-5ed95942#15/5\",\"1798\":\"v-5ed95942#15/6\",\"1799\":\"v-5ed95942#15/7\",\"1800\":\"v-5ed95942#15/8\",\"1801\":\"v-5ed95942#15/9\",\"1802\":\"v-5ed95942#15/10\",\"1803\":\"v-5ed95942#15/11\",\"1804\":\"v-5ed95942#15/12\",\"1805\":\"v-5ed95942#15/13\",\"1806\":\"v-5ed95942#15/14\",\"1807\":\"v-5ed95942#15/15\",\"1808\":\"v-5ed95942#15/16\",\"1809\":\"v-5ed95942#15/17\",\"1810\":\"v-5ed95942#15/18\",\"1811\":\"v-5ed95942#15/19\",\"1812\":\"v-5ed95942#16\",\"1813\":\"v-5ed95942#16/0\",\"1814\":\"v-5ed95942#16/1\",\"1815\":\"v-5ed95942#16/2\",\"1816\":\"v-5ed95942#16/3\",\"1817\":\"v-5ed95942#16/4\",\"1818\":\"v-5ed95942#16/5\",\"1819\":\"v-5ed95942#16/6\",\"1820\":\"v-5ed95942#16/7\",\"1821\":\"v-5ed95942#16/8\",\"1822\":\"v-5ed95942#16/9\",\"1823\":\"v-5ed95942#16/10\",\"1824\":\"v-5ed95942#16/11\",\"1825\":\"v-5ed95942#16/12\",\"1826\":\"v-5ed95942#16/13\",\"1827\":\"v-5ed95942#16/14\",\"1828\":\"v-5ed95942#16/15\",\"1829\":\"v-5ed95942#16/16\",\"1830\":\"v-5ed95942#17\",\"1831\":\"v-5ed95942#17/0\",\"1832\":\"v-5ed95942#17/1\",\"1833\":\"v-5ed95942#17/2\",\"1834\":\"v-5ed95942#17/3\",\"1835\":\"v-5ed95942#17/4\",\"1836\":\"v-5ed95942#17/5\",\"1837\":\"v-5ed95942#17/6\",\"1838\":\"v-5ed95942#17/7\",\"1839\":\"v-5ed95942#17/8\",\"1840\":\"v-5ed95942#17/9\",\"1841\":\"v-5ed95942#17/10\",\"1842\":\"v-5ed95942#17/11\",\"1843\":\"v-477bbf9a\",\"1844\":\"v-477bbf9a#1\",\"1845\":\"v-477bbf9a#2\",\"1846\":\"v-477bbf9a#3\",\"1847\":\"v-477bbf9a#3/0\",\"1848\":\"v-477bbf9a#3/1\",\"1849\":\"v-477bbf9a#3/2\",\"1850\":\"v-477bbf9a#3/3\",\"1851\":\"v-477bbf9a#3/4\",\"1852\":\"v-477bbf9a#3/5\",\"1853\":\"v-477bbf9a#4\",\"1854\":\"v-477bbf9a#5\",\"1855\":\"v-477bbf9a#5/0\",\"1856\":\"v-477bbf9a#5/1\",\"1857\":\"v-477bbf9a#5/2\",\"1858\":\"v-477bbf9a#5/3\",\"1859\":\"v-477bbf9a#5/4\",\"1860\":\"v-477bbf9a#5/5\",\"1861\":\"v-477bbf9a#5/6\",\"1862\":\"v-477bbf9a#5/7\",\"1863\":\"v-477bbf9a#5/8\",\"1864\":\"v-477bbf9a#5/9\",\"1865\":\"v-477bbf9a#5/10\",\"1866\":\"v-477bbf9a#5/11\",\"1867\":\"v-477bbf9a#6\",\"1868\":\"v-477bbf9a#6/0\",\"1869\":\"v-477bbf9a#6/1\",\"1870\":\"v-477bbf9a#6/2\",\"1871\":\"v-477bbf9a#6/3\",\"1872\":\"v-477bbf9a#6/4\",\"1873\":\"v-477bbf9a#6/5\",\"1874\":\"v-477bbf9a#6/6\",\"1875\":\"v-477bbf9a#7\",\"1876\":\"v-477bbf9a#8\",\"1877\":\"v-477bbf9a#8/0\",\"1878\":\"v-477bbf9a#8/1\",\"1879\":\"v-477bbf9a#8/2\",\"1880\":\"v-477bbf9a#8/3\",\"1881\":\"v-477bbf9a#9\",\"1882\":\"v-477bbf9a#9/0\",\"1883\":\"v-477bbf9a#9/1\",\"1884\":\"v-477bbf9a#9/2\",\"1885\":\"v-477bbf9a#9/3\",\"1886\":\"v-477bbf9a#9/4\",\"1887\":\"v-477bbf9a#9/5\",\"1888\":\"v-477bbf9a#9/6\",\"1889\":\"v-477bbf9a#9/7\",\"1890\":\"v-477bbf9a#9/8\",\"1891\":\"v-477bbf9a#9/9\",\"1892\":\"v-477bbf9a#9/10\",\"1893\":\"v-477bbf9a#9/11\",\"1894\":\"v-477bbf9a#9/12\",\"1895\":\"v-477bbf9a#9/13\",\"1896\":\"v-477bbf9a#9/14\",\"1897\":\"v-477bbf9a#9/15\",\"1898\":\"v-477bbf9a#9/16\",\"1899\":\"v-477bbf9a#9/17\",\"1900\":\"v-477bbf9a#9/18\",\"1901\":\"v-477bbf9a#9/19\",\"1902\":\"v-477bbf9a#10\",\"1903\":\"v-477bbf9a#10/0\",\"1904\":\"v-477bbf9a#10/1\",\"1905\":\"v-477bbf9a#10/2\",\"1906\":\"v-477bbf9a#10/3\",\"1907\":\"v-477bbf9a#11\",\"1908\":\"v-477bbf9a#11/0\",\"1909\":\"v-477bbf9a#11/1\",\"1910\":\"v-477bbf9a#11/2\",\"1911\":\"v-477bbf9a#11/3\",\"1912\":\"v-477bbf9a#11/4\",\"1913\":\"v-477bbf9a#11/5\",\"1914\":\"v-477bbf9a#11/6\",\"1915\":\"v-477bbf9a#11/7\",\"1916\":\"v-477bbf9a#11/8\",\"1917\":\"v-477bbf9a#11/9\",\"1918\":\"v-477bbf9a#12\",\"1919\":\"v-477bbf9a#12/0\",\"1920\":\"v-477bbf9a#12/1\",\"1921\":\"v-477bbf9a#12/2\",\"1922\":\"v-477bbf9a#12/3\",\"1923\":\"v-477bbf9a#12/4\",\"1924\":\"v-477bbf9a#12/5\",\"1925\":\"v-477bbf9a#12/6\",\"1926\":\"v-477bbf9a#12/7\",\"1927\":\"v-477bbf9a#12/8\",\"1928\":\"v-477bbf9a#12/9\",\"1929\":\"v-477bbf9a#12/10\",\"1930\":\"v-477bbf9a#12/11\",\"1931\":\"v-477bbf9a#12/12\",\"1932\":\"v-477bbf9a#12/13\",\"1933\":\"v-477bbf9a#12/14\",\"1934\":\"v-477bbf9a#13\",\"1935\":\"v-477bbf9a#13/0\",\"1936\":\"v-477bbf9a#13/1\",\"1937\":\"v-477bbf9a#13/2\",\"1938\":\"v-477bbf9a#14\",\"1939\":\"v-477bbf9a#14/0\",\"1940\":\"v-477bbf9a#14/1\",\"1941\":\"v-477bbf9a#14/2\",\"1942\":\"v-477bbf9a#14/3\",\"1943\":\"v-477bbf9a#14/4\",\"1944\":\"v-477bbf9a#14/5\",\"1945\":\"v-477bbf9a#14/6\",\"1946\":\"v-477bbf9a#14/7\",\"1947\":\"v-477bbf9a#14/8\",\"1948\":\"v-477bbf9a#14/9\",\"1949\":\"v-477bbf9a#14/10\",\"1950\":\"v-477bbf9a#14/11\",\"1951\":\"v-477bbf9a#14/12\",\"1952\":\"v-477bbf9a#14/13\",\"1953\":\"v-477bbf9a#14/14\",\"1954\":\"v-477bbf9a#14/15\",\"1955\":\"v-477bbf9a#14/16\",\"1956\":\"v-477bbf9a#14/17\",\"1957\":\"v-477bbf9a#14/18\",\"1958\":\"v-477bbf9a#14/19\",\"1959\":\"v-477bbf9a#15\",\"1960\":\"v-477bbf9a#15/0\",\"1961\":\"v-477bbf9a#15/1\",\"1962\":\"v-477bbf9a#15/2\",\"1963\":\"v-477bbf9a#15/3\",\"1964\":\"v-477bbf9a#15/4\",\"1965\":\"v-477bbf9a#15/5\",\"1966\":\"v-477bbf9a#15/6\",\"1967\":\"v-477bbf9a#15/7\",\"1968\":\"v-477bbf9a#15/8\",\"1969\":\"v-477bbf9a#15/9\",\"1970\":\"v-477bbf9a#15/10\",\"1971\":\"v-477bbf9a#15/11\",\"1972\":\"v-477bbf9a#15/12\",\"1973\":\"v-477bbf9a#15/13\",\"1974\":\"v-477bbf9a#15/14\",\"1975\":\"v-477bbf9a#15/15\",\"1976\":\"v-477bbf9a#15/16\",\"1977\":\"v-477bbf9a#15/17\",\"1978\":\"v-477bbf9a#15/18\",\"1979\":\"v-477bbf9a#15/19\",\"1980\":\"v-477bbf9a#16\",\"1981\":\"v-477bbf9a#16/0\",\"1982\":\"v-477bbf9a#16/1\",\"1983\":\"v-477bbf9a#16/2\",\"1984\":\"v-477bbf9a#16/3\",\"1985\":\"v-477bbf9a#16/4\",\"1986\":\"v-477bbf9a#16/5\",\"1987\":\"v-477bbf9a#16/6\",\"1988\":\"v-477bbf9a#16/7\",\"1989\":\"v-477bbf9a#16/8\",\"1990\":\"v-477bbf9a#16/9\",\"1991\":\"v-477bbf9a#16/10\",\"1992\":\"v-477bbf9a#16/11\",\"1993\":\"v-477bbf9a#16/12\",\"1994\":\"v-477bbf9a#16/13\",\"1995\":\"v-477bbf9a#16/14\",\"1996\":\"v-477bbf9a#16/15\",\"1997\":\"v-477bbf9a#16/16\",\"1998\":\"v-477bbf9a#17\",\"1999\":\"v-477bbf9a#17/0\",\"2000\":\"v-477bbf9a#17/1\",\"2001\":\"v-477bbf9a#17/2\",\"2002\":\"v-477bbf9a#17/3\",\"2003\":\"v-477bbf9a#17/4\",\"2004\":\"v-477bbf9a#17/5\",\"2005\":\"v-477bbf9a#17/6\",\"2006\":\"v-477bbf9a#17/7\",\"2007\":\"v-477bbf9a#17/8\",\"2008\":\"v-477bbf9a#17/9\",\"2009\":\"v-477bbf9a#17/10\",\"2010\":\"v-477bbf9a#17/11\",\"2011\":\"v-70612c1f\",\"2012\":\"v-70612c1f#1\",\"2013\":\"v-70612c1f#2\",\"2014\":\"v-70612c1f#2/0\",\"2015\":\"v-70612c1f#2/1\",\"2016\":\"v-70612c1f#2/2\",\"2017\":\"v-70612c1f#2/3\",\"2018\":\"v-70612c1f#3\",\"2019\":\"v-70612c1f#3/0\",\"2020\":\"v-70612c1f#3/1\",\"2021\":\"v-70612c1f#3/2\",\"2022\":\"v-70612c1f#3/3\",\"2023\":\"v-70612c1f#3/4\",\"2024\":\"v-70612c1f#3/5\",\"2025\":\"v-70612c1f#3/6\",\"2026\":\"v-70612c1f#3/7\",\"2027\":\"v-70612c1f#3/8\",\"2028\":\"v-70612c1f#4\",\"2029\":\"v-94b65880\",\"2030\":\"v-94b65880#1\",\"2031\":\"v-94b65880#2\",\"2032\":\"v-94b65880#2/0\",\"2033\":\"v-94b65880#3\",\"2034\":\"v-94b65880#3/0\",\"2035\":\"v-94b65880#3/1\",\"2036\":\"v-94b65880#3/2\",\"2037\":\"v-94b65880#3/3\",\"2038\":\"v-94b65880#3/4\",\"2039\":\"v-94b65880#3/5\",\"2040\":\"v-94b65880#3/6\",\"2041\":\"v-94b65880#3/7\",\"2042\":\"v-94b65880#3/8\",\"2043\":\"v-94b65880#3/9\",\"2044\":\"v-94b65880#3/10\",\"2045\":\"v-94b65880#3/11\",\"2046\":\"v-94b65880#3/12\",\"2047\":\"v-94b65880#3/13\",\"2048\":\"v-94b65880#3/14\",\"2049\":\"v-94b65880#3/15\",\"2050\":\"v-94b65880#3/16\",\"2051\":\"v-94b65880#3/17\",\"2052\":\"v-94b65880#3/18\",\"2053\":\"v-94b65880#3/19\",\"2054\":\"v-94b65880#3/20\",\"2055\":\"v-94b65880#3/21\",\"2056\":\"v-94b65880#4\",\"2057\":\"v-94b65880#4/0\",\"2058\":\"v-94b65880#4/1\",\"2059\":\"v-94b65880#4/2\",\"2060\":\"v-94b65880#4/3\",\"2061\":\"v-94b65880#4/4\",\"2062\":\"v-94b65880#4/5\",\"2063\":\"v-94b65880#4/6\",\"2064\":\"v-94b65880#4/7\",\"2065\":\"v-94b65880#4/8\",\"2066\":\"v-94b65880#4/9\",\"2067\":\"v-94b65880#4/10\",\"2068\":\"v-94b65880#4/11\",\"2069\":\"v-94b65880#4/12\",\"2070\":\"v-94b65880#4/13\",\"2071\":\"v-94b65880#4/14\",\"2072\":\"v-94b65880#4/15\",\"2073\":\"v-94b65880#4/16\",\"2074\":\"v-94b65880#4/17\",\"2075\":\"v-94b65880#4/18\",\"2076\":\"v-94b65880#4/19\",\"2077\":\"v-94b65880#4/20\",\"2078\":\"v-94b65880#4/21\",\"2079\":\"v-94b65880#4/22\",\"2080\":\"v-94b65880#4/23\",\"2081\":\"v-94b65880#4/24\",\"2082\":\"v-94b65880#4/25\",\"2083\":\"v-94b65880#4/26\",\"2084\":\"v-94b65880#4/27\",\"2085\":\"v-94b65880#4/28\",\"2086\":\"v-94b65880#5\",\"2087\":\"v-94b65880#5/0\",\"2088\":\"v-94b65880#5/1\",\"2089\":\"v-94b65880#5/2\",\"2090\":\"v-94b65880#5/3\",\"2091\":\"v-94b65880#5/4\",\"2092\":\"v-7fd9d9c7\",\"2093\":\"v-7fd9d9c7#1\",\"2094\":\"v-7fd9d9c7#2\",\"2095\":\"v-7fd9d9c7#2/0\",\"2096\":\"v-7fd9d9c7#2/1\",\"2097\":\"v-7fd9d9c7#2/2\",\"2098\":\"v-7fd9d9c7#2/3\",\"2099\":\"v-7fd9d9c7#2/4\",\"2100\":\"v-7fd9d9c7#3\",\"2101\":\"v-7fd9d9c7#4\",\"2102\":\"v-7fd9d9c7#4/0\",\"2103\":\"v-7fd9d9c7#5\",\"2104\":\"v-7fd9d9c7#5/0\",\"2105\":\"v-7fd9d9c7#5/1\",\"2106\":\"v-7fd9d9c7#5/2\",\"2107\":\"v-7fd9d9c7#6\",\"2108\":\"v-7fd9d9c7#6/0\",\"2109\":\"v-7fd9d9c7#7\",\"2110\":\"v-7fd9d9c7#7/0\",\"2111\":\"v-7fd9d9c7#7/1\",\"2112\":\"v-7fd9d9c7#7/2\",\"2113\":\"v-7fd9d9c7#7/3\",\"2114\":\"v-7fd9d9c7#7/4\",\"2115\":\"v-7fd9d9c7#8\",\"2116\":\"v-7fd9d9c7#8/0\",\"2117\":\"v-7fd9d9c7#8/1\",\"2118\":\"v-7fd9d9c7#8/2\",\"2119\":\"v-7fd9d9c7#8/3\",\"2120\":\"v-7fd9d9c7#8/4\",\"2121\":\"v-7fd9d9c7#9\",\"2122\":\"v-7fd9d9c7#9/0\",\"2123\":\"v-7fd9d9c7#9/1\",\"2124\":\"v-7fd9d9c7#9/2\",\"2125\":\"v-7fd9d9c7#9/3\",\"2126\":\"v-7fd9d9c7#9/4\",\"2127\":\"v-7fd9d9c7#9/5\",\"2128\":\"v-7fd9d9c7#9/6\",\"2129\":\"v-7fd9d9c7#9/7\",\"2130\":\"v-7fd9d9c7#9/8\",\"2131\":\"v-7fd9d9c7#9/9\",\"2132\":\"v-7fd9d9c7#9/10\",\"2133\":\"v-7fd9d9c7#9/11\",\"2134\":\"v-7fd9d9c7#9/12\",\"2135\":\"v-7fd9d9c7#9/13\",\"2136\":\"v-7fd9d9c7#9/14\",\"2137\":\"v-7fd9d9c7#9/15\",\"2138\":\"v-7fd9d9c7#9/16\",\"2139\":\"v-7fd9d9c7#9/17\",\"2140\":\"v-7fd9d9c7#9/18\",\"2141\":\"v-7fd9d9c7#9/19\",\"2142\":\"v-7fd9d9c7#9/20\",\"2143\":\"v-7fd9d9c7#10\",\"2144\":\"v-7fd9d9c7#11\",\"2145\":\"v-7fd9d9c7#11/0\",\"2146\":\"v-7fd9d9c7#11/1\",\"2147\":\"v-7fd9d9c7#11/2\",\"2148\":\"v-7fd9d9c7#11/3\",\"2149\":\"v-7fd9d9c7#11/4\",\"2150\":\"v-7fd9d9c7#11/5\",\"2151\":\"v-7fd9d9c7#11/6\",\"2152\":\"v-7fd9d9c7#11/7\",\"2153\":\"v-7fd9d9c7#12\",\"2154\":\"v-7fd9d9c7#12/0\",\"2155\":\"v-7fd9d9c7#12/1\",\"2156\":\"v-7fd9d9c7#12/2\",\"2157\":\"v-7fd9d9c7#12/3\",\"2158\":\"v-7fd9d9c7#12/4\",\"2159\":\"v-7fd9d9c7#12/5\",\"2160\":\"v-7fd9d9c7#12/6\",\"2161\":\"v-2d06a607\",\"2162\":\"v-2d06a607#1\",\"2163\":\"v-2d06a607#2\",\"2164\":\"v-2d06a607#3\",\"2165\":\"v-2d06a607#3/0\",\"2166\":\"v-2d06a607#4\",\"2167\":\"v-2d06a607#4/0\",\"2168\":\"v-2d06a607#5\",\"2169\":\"v-2d06a607#5/0\",\"2170\":\"v-2d06a607#6\",\"2171\":\"v-2d06a607#6/0\",\"2172\":\"v-2d06a607#6/1\",\"2173\":\"v-2d06a607#6/2\",\"2174\":\"v-2d06a607#6/3\",\"2175\":\"v-2d06a607#6/4\",\"2176\":\"v-2d06a607#6/5\",\"2177\":\"v-2d06a607#6/6\",\"2178\":\"v-2d06a607#6/7\",\"2179\":\"v-2d06a607#6/8\",\"2180\":\"v-2d06a607#7\",\"2181\":\"v-2d06a607#7/0\",\"2182\":\"v-2d06a607#7/1\",\"2183\":\"v-2d06a607#8\",\"2184\":\"v-2d06a607#8/2\",\"2185\":\"v-2d06a607#9\",\"2186\":\"v-2d06a607#9/0\",\"2187\":\"v-2d06a607#10\",\"2188\":\"v-2d06a607#10/0\",\"2189\":\"v-2d06a607#11\",\"2190\":\"v-2d06a607#11/0\",\"2191\":\"v-2d06a607#12\",\"2192\":\"v-2d06a607#12/0\",\"2193\":\"v-2d06a607#12/1\",\"2194\":\"v-2d06a607#13\",\"2195\":\"v-2d06a607#13/0\",\"2196\":\"v-2d06a607#13/1\",\"2197\":\"v-2d06a607#13/2\",\"2198\":\"v-2d06a607#13/3\",\"2199\":\"v-2d06a607#13/4\",\"2200\":\"v-2d06a607#13/5\",\"2201\":\"v-2d06a607#14\",\"2202\":\"v-2d06a607#14/0\",\"2203\":\"v-2d06a607#15\",\"2204\":\"v-2d06a607#15/0\",\"2205\":\"v-544bf93a\",\"2206\":\"v-544bf93a#0/0\",\"2207\":\"v-544bf93a#0/1\",\"2208\":\"v-544bf93a#0/2\",\"2209\":\"v-544bf93a#1\",\"2210\":\"v-544bf93a#1/0\",\"2211\":\"v-544bf93a#1/1\",\"2212\":\"v-544bf93a#1/2\",\"2213\":\"v-544bf93a#1/3\",\"2214\":\"v-544bf93a#1/4\",\"2215\":\"v-544bf93a#2\",\"2216\":\"v-544bf93a#2/0\",\"2217\":\"v-544bf93a#2/1\",\"2218\":\"v-544bf93a#2/2\",\"2219\":\"v-544bf93a#2/3\",\"2220\":\"v-75b93c32\",\"2221\":\"v-75b93c32#0/0\",\"2222\":\"v-75b93c32#0/1\",\"2223\":\"v-75b93c32#0/2\",\"2224\":\"v-75b93c32#1\",\"2225\":\"v-75b93c32#1/0\",\"2226\":\"v-75b93c32#1/1\",\"2227\":\"v-75b93c32#1/2\",\"2228\":\"v-75b93c32#1/3\",\"2229\":\"v-75b93c32#1/4\",\"2230\":\"v-75b93c32#2\",\"2231\":\"v-75b93c32#2/0\",\"2232\":\"v-75b93c32#2/1\",\"2233\":\"v-75b93c32#2/2\",\"2234\":\"v-75b93c32#2/3\",\"2235\":\"v-38cfe3a6\",\"2236\":\"v-38cfe3a6#0/0\",\"2237\":\"v-38cfe3a6#0/1\",\"2238\":\"v-38cfe3a6#1\",\"2239\":\"v-38cfe3a6#2\",\"2240\":\"v-38cfe3a6#2/0\",\"2241\":\"v-38cfe3a6#2/1\",\"2242\":\"v-38cfe3a6#2/2\",\"2243\":\"v-38cfe3a6#2/3\",\"2244\":\"v-38cfe3a6#2/4\",\"2245\":\"v-38cfe3a6#3\",\"2246\":\"v-38cfe3a6#3/0\",\"2247\":\"v-38cfe3a6#3/1\",\"2248\":\"v-3a84bc45\",\"2249\":\"v-3a84bc45#0/0\",\"2250\":\"v-3a84bc45#0/1\",\"2251\":\"v-3a84bc45#1\",\"2252\":\"v-3a84bc45#2\",\"2253\":\"v-3a84bc45#2/0\",\"2254\":\"v-3a84bc45#2/1\",\"2255\":\"v-3a84bc45#2/2\",\"2256\":\"v-3a84bc45#2/3\",\"2257\":\"v-3a84bc45#2/4\",\"2258\":\"v-3a84bc45#3\",\"2259\":\"v-3a84bc45#3/0\",\"2260\":\"v-3a84bc45#3/1\",\"2261\":\"v-711fd025\",\"2262\":\"v-711fd025#0/0\",\"2263\":\"v-711fd025#0/1\",\"2264\":\"v-711fd025#0/2\",\"2265\":\"v-711fd025#1\",\"2266\":\"v-711fd025#1/0\",\"2267\":\"v-711fd025#1/1\",\"2268\":\"v-711fd025#1/2\",\"2269\":\"v-711fd025#1/3\",\"2270\":\"v-711fd025#1/4\",\"2271\":\"v-711fd025#2\",\"2272\":\"v-711fd025#2/0\",\"2273\":\"v-711fd025#2/1\",\"2274\":\"v-711fd025#2/2\",\"2275\":\"v-711fd025#2/3\",\"2276\":\"v-1dff623b\",\"2277\":\"v-1dff623b#0/0\",\"2278\":\"v-1dff623b#0/1\",\"2279\":\"v-1dff623b#0/2\",\"2280\":\"v-1dff623b#1\",\"2281\":\"v-1dff623b#1/0\",\"2282\":\"v-1dff623b#1/1\",\"2283\":\"v-1dff623b#1/2\",\"2284\":\"v-1dff623b#1/3\",\"2285\":\"v-1dff623b#1/4\",\"2286\":\"v-1dff623b#2\",\"2287\":\"v-1dff623b#2/0\",\"2288\":\"v-1dff623b#2/1\",\"2289\":\"v-1dff623b#2/2\",\"2290\":\"v-1dff623b#2/3\",\"2291\":\"v-0daa9495\",\"2292\":\"v-0daa9495#0/0\",\"2293\":\"v-0daa9495#0/1\",\"2294\":\"v-0daa9495#0/2\",\"2295\":\"v-0daa9495#0/3\",\"2296\":\"v-0daa9495#0/4\",\"2297\":\"v-0daa9495#0/5\",\"2298\":\"v-0daa9495#0/6\",\"2299\":\"v-0daa9495#0/7\",\"2300\":\"v-0daa9495#0/8\",\"2301\":\"v-0daa9495#0/9\",\"2302\":\"v-0daa9495#0/10\",\"2303\":\"v-0daa9495#0/11\",\"2304\":\"v-0daa9495#0/12\",\"2305\":\"v-0daa9495#0/13\",\"2306\":\"v-0daa9495#0/14\",\"2307\":\"v-0daa9495#0/15\",\"2308\":\"v-0daa9495#0/16\",\"2309\":\"v-0daa9495#0/17\",\"2310\":\"v-0daa9495#0/18\",\"2311\":\"v-0daa9495#0/19\",\"2312\":\"v-0daa9495#0/20\",\"2313\":\"v-0daa9495#0/21\",\"2314\":\"v-0daa9495#0/22\",\"2315\":\"v-0daa9495#0/23\",\"2316\":\"v-0daa9495#0/24\",\"2317\":\"v-0daa9495#0/25\",\"2318\":\"v-0daa9495#0/26\",\"2319\":\"v-0daa9495#0/27\",\"2320\":\"v-0daa9495#0/28\",\"2321\":\"v-0daa9495#0/29\",\"2322\":\"v-0daa9495#0/30\",\"2323\":\"v-0daa9495#0/31\",\"2324\":\"v-0daa9495#0/32\",\"2325\":\"v-0daa9495#0/33\",\"2326\":\"v-0daa9495#0/34\",\"2327\":\"v-0daa9495#0/35\",\"2328\":\"v-0daa9495#0/36\",\"2329\":\"v-0daa9495#0/37\",\"2330\":\"v-0daa9495#0/38\",\"2331\":\"v-0daa9495#0/39\",\"2332\":\"v-0daa9495#0/40\",\"2333\":\"v-0daa9495#0/41\",\"2334\":\"v-0daa9495#0/42\",\"2335\":\"v-0daa9495#1\",\"2336\":\"v-0daa9495#2\",\"2337\":\"v-0daa9495#2/0\",\"2338\":\"v-0daa9495#2/1\",\"2339\":\"v-0daa9495#2/2\",\"2340\":\"v-0daa9495#2/3\",\"2341\":\"v-0daa9495#2/4\",\"2342\":\"v-0daa9495#2/5\",\"2343\":\"v-0daa9495#2/6\",\"2344\":\"v-0daa9495#2/7\",\"2345\":\"v-0daa9495#3\",\"2346\":\"v-0daa9495#3/0\",\"2347\":\"v-0daa9495#3/1\",\"2348\":\"v-0daa9495#4\",\"2349\":\"v-0daa9495#4/0\",\"2350\":\"v-0daa9495#4/1\",\"2351\":\"v-0daa9495#4/2\",\"2352\":\"v-0daa9495#4/3\",\"2353\":\"v-0daa9495#4/4\",\"2354\":\"v-0daa9495#5\",\"2355\":\"v-0daa9495#5/0\",\"2356\":\"v-0daa9495#5/1\",\"2357\":\"v-0daa9495#5/2\",\"2358\":\"v-0daa9495#5/3\",\"2359\":\"v-0daa9495#5/4\",\"2360\":\"v-0daa9495#6\",\"2361\":\"v-0daa9495#6/0\",\"2362\":\"v-0daa9495#6/1\",\"2363\":\"v-0daa9495#6/2\",\"2364\":\"v-0daa9495#6/3\",\"2365\":\"v-0daa9495#6/4\",\"2366\":\"v-0daa9495#6/5\",\"2367\":\"v-0daa9495#6/6\",\"2368\":\"v-0daa9495#6/7\",\"2369\":\"v-0daa9495#6/8\",\"2370\":\"v-0daa9495#6/9\",\"2371\":\"v-0daa9495#6/10\",\"2372\":\"v-0daa9495#6/11\",\"2373\":\"v-0daa9495#7\",\"2374\":\"v-0daa9495#7/0\",\"2375\":\"v-0daa9495#8\",\"2376\":\"v-0daa9495#8/0\",\"2377\":\"v-0daa9495#8/1\",\"2378\":\"v-0daa9495#8/2\",\"2379\":\"v-0daa9495#8/3\",\"2380\":\"v-0daa9495#8/4\",\"2381\":\"v-0daa9495#8/5\",\"2382\":\"v-0daa9495#8/6\",\"2383\":\"v-0daa9495#8/7\",\"2384\":\"v-0daa9495#8/8\",\"2385\":\"v-0daa9495#8/9\",\"2386\":\"v-0daa9495#8/10\",\"2387\":\"v-0daa9495#8/11\",\"2388\":\"v-0daa9495#8/12\",\"2389\":\"v-0daa9495#8/13\",\"2390\":\"v-0daa9495#8/14\",\"2391\":\"v-0daa9495#8/15\",\"2392\":\"v-0daa9495#8/16\",\"2393\":\"v-0daa9495#8/17\",\"2394\":\"v-0daa9495#8/18\",\"2395\":\"v-0daa9495#8/19\",\"2396\":\"v-0daa9495#8/20\",\"2397\":\"v-0daa9495#9\",\"2398\":\"v-0daa9495#9/0\",\"2399\":\"v-0daa9495#9/1\",\"2400\":\"v-0daa9495#9/2\",\"2401\":\"v-0daa9495#9/3\",\"2402\":\"v-0daa9495#9/4\",\"2403\":\"v-0daa9495#9/5\",\"2404\":\"v-0daa9495#9/6\",\"2405\":\"v-0daa9495#9/7\",\"2406\":\"v-0daa9495#9/8\",\"2407\":\"v-0daa9495#9/9\",\"2408\":\"v-0daa9495#9/10\",\"2409\":\"v-0daa9495#9/11\",\"2410\":\"v-0daa9495#10\",\"2411\":\"v-0daa9495#10/0\",\"2412\":\"v-0daa9495#10/1\",\"2413\":\"v-0daa9495#10/2\",\"2414\":\"v-0daa9495#10/3\",\"2415\":\"v-0daa9495#10/4\",\"2416\":\"v-0daa9495#10/5\",\"2417\":\"v-0daa9495#11\",\"2418\":\"v-0daa9495#12\",\"2419\":\"v-0daa9495#13\",\"2420\":\"v-0daa9495#14\",\"2421\":\"v-0daa9495#15\",\"2422\":\"v-0daa9495#16\",\"2423\":\"v-0daa9495#17\",\"2424\":\"v-0daa9495#18\",\"2425\":\"v-0daa9495#19\",\"2426\":\"v-0daa9495#20\",\"2427\":\"v-0daa9495#21\",\"2428\":\"v-0daa9495#22\",\"2429\":\"v-0daa9495#23\",\"2430\":\"v-0daa9495#24\",\"2431\":\"v-0daa9495#25\",\"2432\":\"v-0daa9495#26\",\"2433\":\"v-0daa9495#27\",\"2434\":\"v-0daa9495#28\",\"2435\":\"v-0daa9495#29\",\"2436\":\"v-0daa9495#30\",\"2437\":\"v-0daa9495#31\",\"2438\":\"v-0daa9495#32\",\"2439\":\"v-0daa9495#33\",\"2440\":\"v-0daa9495#34\",\"2441\":\"v-0daa9495#35\",\"2442\":\"v-0daa9495#36\",\"2443\":\"v-0daa9495#37\",\"2444\":\"v-0daa9495#38\",\"2445\":\"v-0daa9495#39\",\"2446\":\"v-0daa9495#40\",\"2447\":\"v-0daa9495#41\",\"2448\":\"v-0daa9495#42\",\"2449\":\"v-0daa9495#43\",\"2450\":\"v-77c78bde\",\"2451\":\"v-77c78bde#1\",\"2452\":\"v-77c78bde#1/0\",\"2453\":\"v-77c78bde#1/1\",\"2454\":\"v-77c78bde#1/2\",\"2455\":\"v-77c78bde#1/3\",\"2456\":\"v-77c78bde#1/4\",\"2457\":\"v-77c78bde#1/5\",\"2458\":\"v-77c78bde#1/6\",\"2459\":\"v-77c78bde#1/7\",\"2460\":\"v-77c78bde#1/8\",\"2461\":\"v-77c78bde#2\",\"2462\":\"v-77c78bde#2/0\",\"2463\":\"v-77c78bde#3\",\"2464\":\"v-77c78bde#3/0\",\"2465\":\"v-77c78bde#4\",\"2466\":\"v-77c78bde#5\",\"2467\":\"v-77c78bde#6\",\"2468\":\"v-77c78bde#7\",\"2469\":\"v-77c78bde#7/0\",\"2470\":\"v-77c78bde#7/1\",\"2471\":\"v-77c78bde#7/2\",\"2472\":\"v-77c78bde#7/3\",\"2473\":\"v-77c78bde#7/4\",\"2474\":\"v-77c78bde#7/5\",\"2475\":\"v-77c78bde#8\",\"2476\":\"v-77c78bde#8/0\",\"2477\":\"v-77c78bde#8/1\",\"2478\":\"v-77c78bde#8/2\",\"2479\":\"v-77c78bde#8/3\",\"2480\":\"v-77c78bde#8/4\",\"2481\":\"v-77c78bde#8/5\",\"2482\":\"v-77c78bde#8/6\",\"2483\":\"v-77c78bde#8/7\",\"2484\":\"v-77c78bde#8/8\",\"2485\":\"v-77c78bde#8/9\",\"2486\":\"v-77c78bde#8/10\",\"2487\":\"v-77c78bde#9\",\"2488\":\"v-77c78bde#9/0\",\"2489\":\"v-77c78bde#9/1\",\"2490\":\"v-77c78bde#9/2\",\"2491\":\"v-77c78bde#9/3\",\"2492\":\"v-77c78bde#9/4\",\"2493\":\"v-77c78bde#9/5\",\"2494\":\"v-77c78bde#9/6\",\"2495\":\"v-77c78bde#9/7\",\"2496\":\"v-77c78bde#9/8\",\"2497\":\"v-77c78bde#9/9\",\"2498\":\"v-77c78bde#9/10\",\"2499\":\"v-77c78bde#10\",\"2500\":\"v-77c78bde#11\",\"2501\":\"v-77c78bde#11/0\",\"2502\":\"v-77c78bde#11/1\",\"2503\":\"v-77c78bde#12\",\"2504\":\"v-77c78bde#12/0\",\"2505\":\"v-77c78bde#12/1\",\"2506\":\"v-77c78bde#12/2\",\"2507\":\"v-77c78bde#12/3\",\"2508\":\"v-77c78bde#13\",\"2509\":\"v-77c78bde#13/0\",\"2510\":\"v-77c78bde#13/1\",\"2511\":\"v-77c78bde#13/2\",\"2512\":\"v-77c78bde#13/3\",\"2513\":\"v-77c78bde#14\",\"2514\":\"v-77c78bde#14/0\",\"2515\":\"v-77c78bde#14/1\",\"2516\":\"v-77c78bde#14/2\",\"2517\":\"v-77c78bde#15\",\"2518\":\"v-77c78bde#16\",\"2519\":\"v-77c78bde#16/0\",\"2520\":\"v-77c78bde#16/1\",\"2521\":\"v-77c78bde#16/2\",\"2522\":\"v-77c78bde#16/3\",\"2523\":\"v-77c78bde#17\",\"2524\":\"v-77c78bde#17/0\",\"2525\":\"v-77c78bde#17/1\",\"2526\":\"v-77c78bde#17/2\",\"2527\":\"v-77c78bde#17/3\",\"2528\":\"v-77c78bde#17/4\",\"2529\":\"v-77c78bde#17/5\",\"2530\":\"v-77c78bde#17/6\",\"2531\":\"v-77c78bde#17/7\",\"2532\":\"v-77c78bde#17/8\",\"2533\":\"v-77c78bde#17/9\",\"2534\":\"v-77c78bde#17/10\",\"2535\":\"v-77c78bde#18\",\"2536\":\"v-77c78bde#18/0\",\"2537\":\"v-77c78bde#18/1\",\"2538\":\"v-77c78bde#18/2\",\"2539\":\"v-77c78bde#18/3\",\"2540\":\"v-77c78bde#18/4\",\"2541\":\"v-77c78bde#18/5\",\"2542\":\"v-77c78bde#18/6\",\"2543\":\"v-77c78bde#18/7\",\"2544\":\"v-265d1e46\",\"2545\":\"v-265d1e46#1\",\"2546\":\"v-265d1e46#1/0\",\"2547\":\"v-265d1e46#1/1\",\"2548\":\"v-265d1e46#1/2\",\"2549\":\"v-265d1e46#1/3\",\"2550\":\"v-265d1e46#1/4\",\"2551\":\"v-265d1e46#1/5\",\"2552\":\"v-265d1e46#1/6\",\"2553\":\"v-265d1e46#1/7\",\"2554\":\"v-265d1e46#2\",\"2555\":\"v-265d1e46#3\",\"2556\":\"v-6703a744\",\"2557\":\"v-6703a744#1\",\"2558\":\"v-6703a744#2\",\"2559\":\"v-6703a744#3\",\"2560\":\"v-6703a744#3/0\",\"2561\":\"v-6703a744#3/1\",\"2562\":\"v-6703a744#3/2\",\"2563\":\"v-6703a744#3/3\",\"2564\":\"v-6703a744#3/4\",\"2565\":\"v-6703a744#3/5\",\"2566\":\"v-6703a744#3/6\",\"2567\":\"v-6703a744#3/7\",\"2568\":\"v-6703a744#3/8\",\"2569\":\"v-6703a744#3/9\",\"2570\":\"v-6703a744#3/10\",\"2571\":\"v-6703a744#3/11\",\"2572\":\"v-6703a744#3/12\",\"2573\":\"v-6703a744#3/13\",\"2574\":\"v-6703a744#3/14\",\"2575\":\"v-6703a744#3/15\",\"2576\":\"v-6703a744#3/16\",\"2577\":\"v-6703a744#3/17\",\"2578\":\"v-6703a744#3/18\",\"2579\":\"v-6703a744#3/19\",\"2580\":\"v-6703a744#3/20\",\"2581\":\"v-6703a744#3/21\",\"2582\":\"v-6703a744#3/22\",\"2583\":\"v-6703a744#4\",\"2584\":\"v-6703a744#4/0\",\"2585\":\"v-6703a744#5\",\"2586\":\"v-6703a744#5/0\",\"2587\":\"v-6703a744#5/1\",\"2588\":\"v-6703a744#5/2\",\"2589\":\"v-6703a744#5/3\",\"2590\":\"v-6703a744#5/4\",\"2591\":\"v-6703a744#5/5\",\"2592\":\"v-6703a744#5/6\",\"2593\":\"v-6703a744#5/7\",\"2594\":\"v-6703a744#5/8\",\"2595\":\"v-6703a744#5/9\",\"2596\":\"v-6703a744#5/10\",\"2597\":\"v-6703a744#5/11\",\"2598\":\"v-6703a744#5/12\",\"2599\":\"v-6703a744#5/13\",\"2600\":\"v-6703a744#6\",\"2601\":\"v-6703a744#6/0\",\"2602\":\"v-6703a744#6/1\",\"2603\":\"v-6703a744#6/2\",\"2604\":\"v-6703a744#6/3\",\"2605\":\"v-6703a744#6/4\",\"2606\":\"v-6703a744#6/5\",\"2607\":\"v-6703a744#6/6\",\"2608\":\"v-6703a744#6/7\",\"2609\":\"v-6703a744#6/8\",\"2610\":\"v-6703a744#6/9\",\"2611\":\"v-6703a744#6/10\",\"2612\":\"v-6703a744#6/11\",\"2613\":\"v-6703a744#6/12\",\"2614\":\"v-6703a744#6/13\",\"2615\":\"v-6703a744#6/14\",\"2616\":\"v-6703a744#7\",\"2617\":\"v-6703a744#7/0\",\"2618\":\"v-6703a744#7/1\",\"2619\":\"v-6703a744#7/2\",\"2620\":\"v-6703a744#7/3\",\"2621\":\"v-6703a744#8\",\"2622\":\"v-6703a744#8/0\",\"2623\":\"v-6703a744#8/1\",\"2624\":\"v-6703a744#8/2\",\"2625\":\"v-6703a744#8/3\",\"2626\":\"v-6703a744#8/4\",\"2627\":\"v-6703a744#8/5\",\"2628\":\"v-6703a744#8/6\",\"2629\":\"v-6703a744#8/7\",\"2630\":\"v-6703a744#9\",\"2631\":\"v-6703a744#9/0\",\"2632\":\"v-6703a744#9/1\",\"2633\":\"v-6703a744#9/2\",\"2634\":\"v-6703a744#9/3\",\"2635\":\"v-6703a744#9/4\",\"2636\":\"v-6703a744#9/5\",\"2637\":\"v-6703a744#9/6\",\"2638\":\"v-6703a744#9/7\",\"2639\":\"v-6703a744#10\",\"2640\":\"v-6703a744#10/0\",\"2641\":\"v-6703a744#10/1\",\"2642\":\"v-6703a744#10/2\",\"2643\":\"v-6703a744#10/3\",\"2644\":\"v-6703a744#10/4\",\"2645\":\"v-6703a744#10/5\",\"2646\":\"v-6703a744#10/6\",\"2647\":\"v-6703a744#11\",\"2648\":\"v-6703a744#11/0\",\"2649\":\"v-6703a744#11/1\",\"2650\":\"v-6703a744#11/2\",\"2651\":\"v-6703a744#12\",\"2652\":\"v-6703a744#12/0\",\"2653\":\"v-6703a744#12/1\",\"2654\":\"v-6703a744#12/2\",\"2655\":\"v-6703a744#12/3\",\"2656\":\"v-6703a744#12/4\",\"2657\":\"v-6703a744#13\",\"2658\":\"v-6703a744#13/0\",\"2659\":\"v-6703a744#13/1\",\"2660\":\"v-6703a744#13/2\",\"2661\":\"v-6703a744#13/3\",\"2662\":\"v-6703a744#13/4\",\"2663\":\"v-6703a744#13/5\",\"2664\":\"v-6703a744#13/6\",\"2665\":\"v-6703a744#13/7\",\"2666\":\"v-6703a744#13/8\",\"2667\":\"v-6703a744#13/9\",\"2668\":\"v-6703a744#13/10\",\"2669\":\"v-6703a744#13/11\",\"2670\":\"v-6703a744#13/12\",\"2671\":\"v-6703a744#13/13\",\"2672\":\"v-6703a744#13/14\",\"2673\":\"v-6703a744#13/15\",\"2674\":\"v-6703a744#13/16\",\"2675\":\"v-6703a744#13/17\",\"2676\":\"v-6703a744#13/18\",\"2677\":\"v-6703a744#13/19\",\"2678\":\"v-6703a744#13/20\",\"2679\":\"v-6703a744#13/21\",\"2680\":\"v-6703a744#13/22\",\"2681\":\"v-6703a744#13/23\",\"2682\":\"v-6703a744#13/24\",\"2683\":\"v-6703a744#13/25\",\"2684\":\"v-6703a744#14\",\"2685\":\"v-6703a744#14/0\",\"2686\":\"v-6703a744#14/1\",\"2687\":\"v-6703a744#15\",\"2688\":\"v-6703a744#15/0\",\"2689\":\"v-6703a744#15/1\",\"2690\":\"v-6703a744#15/2\",\"2691\":\"v-6703a744#15/3\",\"2692\":\"v-6703a744#15/4\",\"2693\":\"v-6703a744#15/5\",\"2694\":\"v-6703a744#15/6\",\"2695\":\"v-6703a744#15/7\",\"2696\":\"v-6703a744#15/8\",\"2697\":\"v-6703a744#15/9\",\"2698\":\"v-6703a744#15/10\",\"2699\":\"v-6703a744#15/11\",\"2700\":\"v-6703a744#15/12\",\"2701\":\"v-6703a744#15/13\",\"2702\":\"v-6703a744#15/14\",\"2703\":\"v-6703a744#15/15\",\"2704\":\"v-6703a744#15/16\",\"2705\":\"v-6703a744#15/17\",\"2706\":\"v-6703a744#16\",\"2707\":\"v-6703a744#16/0\",\"2708\":\"v-6703a744#16/1\",\"2709\":\"v-6703a744#16/2\",\"2710\":\"v-6703a744#16/3\",\"2711\":\"v-6703a744#16/4\",\"2712\":\"v-6703a744#17\",\"2713\":\"v-6703a744#17/0\",\"2714\":\"v-6703a744#17/1\",\"2715\":\"v-6703a744#17/2\",\"2716\":\"v-6703a744#17/3\",\"2717\":\"v-6703a744#17/4\",\"2718\":\"v-6703a744#17/5\",\"2719\":\"v-6703a744#17/6\",\"2720\":\"v-6703a744#17/7\",\"2721\":\"v-6703a744#17/8\",\"2722\":\"v-6703a744#18\",\"2723\":\"v-6703a744#18/0\",\"2724\":\"v-6703a744#18/1\",\"2725\":\"v-6703a744#18/2\",\"2726\":\"v-6703a744#18/3\",\"2727\":\"v-6703a744#18/4\",\"2728\":\"v-6703a744#18/5\",\"2729\":\"v-6703a744#18/6\",\"2730\":\"v-6703a744#18/7\",\"2731\":\"v-6703a744#18/8\",\"2732\":\"v-6703a744#18/9\",\"2733\":\"v-6703a744#18/10\",\"2734\":\"v-6703a744#18/11\",\"2735\":\"v-6703a744#18/12\",\"2736\":\"v-6703a744#18/13\",\"2737\":\"v-6703a744#18/14\",\"2738\":\"v-6703a744#18/15\",\"2739\":\"v-6703a744#18/16\",\"2740\":\"v-6703a744#19\",\"2741\":\"v-6703a744#19/0\",\"2742\":\"v-6703a744#19/1\",\"2743\":\"v-6703a744#19/2\",\"2744\":\"v-6703a744#19/3\",\"2745\":\"v-6703a744#19/4\",\"2746\":\"v-6703a744#19/5\",\"2747\":\"v-6703a744#19/6\",\"2748\":\"v-6703a744#19/7\",\"2749\":\"v-6703a744#19/8\",\"2750\":\"v-6703a744#19/9\",\"2751\":\"v-6703a744#19/10\",\"2752\":\"v-6703a744#19/11\",\"2753\":\"v-6703a744#20\",\"2754\":\"v-6703a744#20/0\",\"2755\":\"v-6703a744#20/1\",\"2756\":\"v-6703a744#20/2\",\"2757\":\"v-6703a744#20/3\",\"2758\":\"v-6703a744#20/4\",\"2759\":\"v-6703a744#20/5\",\"2760\":\"v-6703a744#20/6\",\"2761\":\"v-6703a744#20/7\",\"2762\":\"v-6703a744#20/8\",\"2763\":\"v-6703a744#20/9\",\"2764\":\"v-6703a744#20/10\",\"2765\":\"v-6703a744#20/11\",\"2766\":\"v-6703a744#20/12\",\"2767\":\"v-6703a744#20/13\",\"2768\":\"v-6703a744#20/14\",\"2769\":\"v-6703a744#20/15\",\"2770\":\"v-6703a744#20/16\",\"2771\":\"v-6703a744#21\",\"2772\":\"v-6703a744#21/0\",\"2773\":\"v-6703a744#21/1\",\"2774\":\"v-6703a744#21/2\",\"2775\":\"v-6703a744#21/3\",\"2776\":\"v-6703a744#21/4\",\"2777\":\"v-6703a744#21/5\",\"2778\":\"v-6703a744#21/6\",\"2779\":\"v-6703a744#21/7\",\"2780\":\"v-6703a744#21/8\",\"2781\":\"v-6703a744#21/9\",\"2782\":\"v-6703a744#22\",\"2783\":\"v-6703a744#22/0\",\"2784\":\"v-6703a744#22/1\",\"2785\":\"v-6703a744#22/2\",\"2786\":\"v-6703a744#23\",\"2787\":\"v-6703a744#23/0\",\"2788\":\"v-6703a744#23/1\",\"2789\":\"v-6703a744#23/2\",\"2790\":\"v-6703a744#24\",\"2791\":\"v-6703a744#24/0\",\"2792\":\"v-6703a744#24/1\",\"2793\":\"v-6703a744#24/2\",\"2794\":\"v-6703a744#24/3\",\"2795\":\"v-6703a744#24/4\",\"2796\":\"v-6703a744#25\",\"2797\":\"v-6703a744#25/0\",\"2798\":\"v-6703a744#25/1\",\"2799\":\"v-6703a744#25/2\",\"2800\":\"v-6703a744#25/3\",\"2801\":\"v-6703a744#25/4\",\"2802\":\"v-6703a744#26\",\"2803\":\"v-6703a744#26/0\",\"2804\":\"v-6703a744#26/1\",\"2805\":\"v-6703a744#26/2\",\"2806\":\"v-6703a744#26/3\",\"2807\":\"v-6703a744#26/4\",\"2808\":\"v-6703a744#26/5\",\"2809\":\"v-6703a744#26/6\",\"2810\":\"v-6703a744#26/7\",\"2811\":\"v-6703a744#26/8\",\"2812\":\"v-6703a744#26/9\",\"2813\":\"v-6703a744#26/10\",\"2814\":\"v-6703a744#26/11\",\"2815\":\"v-6703a744#27\",\"2816\":\"v-6703a744#27/0\",\"2817\":\"v-6703a744#27/1\",\"2818\":\"v-6703a744#27/2\",\"2819\":\"v-6703a744#27/3\",\"2820\":\"v-6703a744#28\",\"2821\":\"v-6703a744#28/0\",\"2822\":\"v-6703a744#28/1\",\"2823\":\"v-6703a744#28/2\",\"2824\":\"v-6703a744#29\",\"2825\":\"v-6703a744#29/0\",\"2826\":\"v-6703a744#29/1\",\"2827\":\"v-6703a744#29/2\",\"2828\":\"v-6703a744#29/3\",\"2829\":\"v-6703a744#29/4\",\"2830\":\"v-6703a744#30\",\"2831\":\"v-6703a744#30/0\",\"2832\":\"v-6703a744#30/1\",\"2833\":\"v-6703a744#30/2\",\"2834\":\"v-6703a744#30/3\",\"2835\":\"v-6703a744#30/4\",\"2836\":\"v-6703a744#30/5\",\"2837\":\"v-6703a744#30/6\",\"2838\":\"v-6703a744#30/7\",\"2839\":\"v-6703a744#30/8\",\"2840\":\"v-6703a744#30/9\",\"2841\":\"v-6703a744#30/10\",\"2842\":\"v-6703a744#30/11\",\"2843\":\"v-6703a744#30/12\",\"2844\":\"v-6703a744#30/13\",\"2845\":\"v-6703a744#30/14\",\"2846\":\"v-6703a744#30/15\",\"2847\":\"v-6703a744#30/16\",\"2848\":\"v-6703a744#30/17\",\"2849\":\"v-6703a744#30/18\",\"2850\":\"v-6703a744#30/19\",\"2851\":\"v-6703a744#30/20\",\"2852\":\"v-6703a744#30/21\",\"2853\":\"v-6703a744#31\",\"2854\":\"v-6703a744#31/0\",\"2855\":\"v-6703a744#31/1\",\"2856\":\"v-6703a744#31/2\",\"2857\":\"v-6703a744#31/3\",\"2858\":\"v-6703a744#31/4\",\"2859\":\"v-6703a744#31/5\",\"2860\":\"v-6703a744#31/6\",\"2861\":\"v-6703a744#31/7\",\"2862\":\"v-6703a744#31/8\",\"2863\":\"v-6703a744#31/9\",\"2864\":\"v-6703a744#31/10\",\"2865\":\"v-6703a744#31/11\",\"2866\":\"v-6703a744#31/12\",\"2867\":\"v-6703a744#31/13\",\"2868\":\"v-6703a744#32\",\"2869\":\"v-6703a744#32/0\",\"2870\":\"v-6703a744#32/1\",\"2871\":\"v-6703a744#32/2\",\"2872\":\"v-6703a744#32/3\",\"2873\":\"v-6703a744#32/4\",\"2874\":\"v-6703a744#33\",\"2875\":\"v-6703a744#33/0\",\"2876\":\"v-6703a744#33/1\",\"2877\":\"v-6703a744#33/2\",\"2878\":\"v-6703a744#34\",\"2879\":\"v-6703a744#35\",\"2880\":\"v-6703a744#35/0\",\"2881\":\"v-6703a744#36\",\"2882\":\"v-6703a744#36/0\",\"2883\":\"v-6703a744#36/1\",\"2884\":\"v-6703a744#37\",\"2885\":\"v-6703a744#37/0\",\"2886\":\"v-6703a744#38\",\"2887\":\"v-6703a744#38/0\",\"2888\":\"v-6703a744#38/1\",\"2889\":\"v-6703a744#38/2\",\"2890\":\"v-6703a744#38/3\",\"2891\":\"v-6703a744#39\",\"2892\":\"v-6703a744#39/0\",\"2893\":\"v-6703a744#40\",\"2894\":\"v-6703a744#40/0\",\"2895\":\"v-6703a744#41\",\"2896\":\"v-6703a744#41/0\",\"2897\":\"v-6703a744#42\",\"2898\":\"v-6703a744#43\",\"2899\":\"v-6703a744#43/0\",\"2900\":\"v-6703a744#43/1\",\"2901\":\"v-6703a744#43/2\",\"2902\":\"v-6703a744#44\",\"2903\":\"v-6703a744#44/0\",\"2904\":\"v-6703a744#44/1\",\"2905\":\"v-959e8c2a\",\"2906\":\"v-959e8c2a#1\",\"2907\":\"v-959e8c2a#2\",\"2908\":\"v-959e8c2a#2/0\",\"2909\":\"v-959e8c2a#2/1\",\"2910\":\"v-959e8c2a#2/2\",\"2911\":\"v-959e8c2a#2/3\",\"2912\":\"v-959e8c2a#3\",\"2913\":\"v-959e8c2a#3/0\",\"2914\":\"v-959e8c2a#3/1\",\"2915\":\"v-959e8c2a#4\",\"2916\":\"v-959e8c2a#5\",\"2917\":\"v-959e8c2a#6\",\"2918\":\"v-959e8c2a#6/0\",\"2919\":\"v-959e8c2a#6/1\",\"2920\":\"v-959e8c2a#6/2\",\"2921\":\"v-959e8c2a#6/3\",\"2922\":\"v-959e8c2a#6/4\",\"2923\":\"v-959e8c2a#7\",\"2924\":\"v-959e8c2a#7/0\",\"2925\":\"v-959e8c2a#7/1\",\"2926\":\"v-959e8c2a#7/2\",\"2927\":\"v-959e8c2a#8\",\"2928\":\"v-959e8c2a#9\",\"2929\":\"v-959e8c2a#9/0\",\"2930\":\"v-959e8c2a#9/1\",\"2931\":\"v-959e8c2a#9/2\",\"2932\":\"v-959e8c2a#9/3\",\"2933\":\"v-959e8c2a#10\",\"2934\":\"v-959e8c2a#10/0\",\"2935\":\"v-959e8c2a#11\",\"2936\":\"v-959e8c2a#12\",\"2937\":\"v-959e8c2a#12/0\",\"2938\":\"v-959e8c2a#12/1\",\"2939\":\"v-959e8c2a#12/2\",\"2940\":\"v-959e8c2a#13\",\"2941\":\"v-959e8c2a#13/0\",\"2942\":\"v-959e8c2a#14\",\"2943\":\"v-959e8c2a#15\",\"2944\":\"v-959e8c2a#15/0\",\"2945\":\"v-959e8c2a#15/1\",\"2946\":\"v-959e8c2a#15/2\",\"2947\":\"v-959e8c2a#15/3\",\"2948\":\"v-959e8c2a#16\",\"2949\":\"v-959e8c2a#16/0\",\"2950\":\"v-959e8c2a#17\",\"2951\":\"v-959e8c2a#18\",\"2952\":\"v-959e8c2a#18/0\",\"2953\":\"v-959e8c2a#18/1\",\"2954\":\"v-959e8c2a#18/2\",\"2955\":\"v-959e8c2a#18/3\",\"2956\":\"v-959e8c2a#19\",\"2957\":\"v-959e8c2a#19/0\",\"2958\":\"v-959e8c2a#20\",\"2959\":\"v-959e8c2a#20/0\",\"2960\":\"v-959e8c2a#20/1\",\"2961\":\"v-959e8c2a#20/2\",\"2962\":\"v-959e8c2a#20/3\",\"2963\":\"v-959e8c2a#21\",\"2964\":\"v-959e8c2a#21/0\",\"2965\":\"v-959e8c2a#21/1\",\"2966\":\"v-959e8c2a#21/2\",\"2967\":\"v-959e8c2a#22\",\"2968\":\"v-959e8c2a#22/3\",\"2969\":\"v-959e8c2a#22/4\",\"2970\":\"v-959e8c2a#22/5\",\"2971\":\"v-959e8c2a#23\",\"2972\":\"v-959e8c2a#23/0\",\"2973\":\"v-959e8c2a#23/1\",\"2974\":\"v-959e8c2a#23/2\",\"2975\":\"v-959e8c2a#23/3\",\"2976\":\"v-959e8c2a#23/4\",\"2977\":\"v-959e8c2a#24\",\"2978\":\"v-959e8c2a#24/0\",\"2979\":\"v-959e8c2a#24/1\",\"2980\":\"v-959e8c2a#24/2\",\"2981\":\"v-959e8c2a#24/3\",\"2982\":\"v-959e8c2a#24/4\",\"2983\":\"v-959e8c2a#24/5\",\"2984\":\"v-959e8c2a#24/6\",\"2985\":\"v-959e8c2a#24/7\",\"2986\":\"v-959e8c2a#24/8\",\"2987\":\"v-959e8c2a#24/9\",\"2988\":\"v-959e8c2a#24/10\",\"2989\":\"v-959e8c2a#24/11\",\"2990\":\"v-959e8c2a#25\",\"2991\":\"v-959e8c2a#26\",\"2992\":\"v-959e8c2a#26/0\",\"2993\":\"v-959e8c2a#26/1\",\"2994\":\"v-959e8c2a#26/2\",\"2995\":\"v-959e8c2a#26/3\",\"2996\":\"v-959e8c2a#26/4\",\"2997\":\"v-959e8c2a#26/5\",\"2998\":\"v-959e8c2a#26/6\",\"2999\":\"v-959e8c2a#27\",\"3000\":\"v-959e8c2a#27/0\",\"3001\":\"v-959e8c2a#27/1\",\"3002\":\"v-959e8c2a#27/2\",\"3003\":\"v-959e8c2a#27/3\",\"3004\":\"v-959e8c2a#27/4\",\"3005\":\"v-959e8c2a#27/5\",\"3006\":\"v-959e8c2a#27/6\",\"3007\":\"v-959e8c2a#27/7\",\"3008\":\"v-959e8c2a#27/8\",\"3009\":\"v-959e8c2a#27/9\",\"3010\":\"v-959e8c2a#27/10\",\"3011\":\"v-959e8c2a#28\",\"3012\":\"v-959e8c2a#29\",\"3013\":\"v-959e8c2a#30\",\"3014\":\"v-959e8c2a#31\",\"3015\":\"v-959e8c2a#31/0\",\"3016\":\"v-959e8c2a#32\",\"3017\":\"v-959e8c2a#32/0\",\"3018\":\"v-959e8c2a#32/1\",\"3019\":\"v-959e8c2a#32/2\",\"3020\":\"v-959e8c2a#32/3\",\"3021\":\"v-959e8c2a#32/4\",\"3022\":\"v-959e8c2a#32/5\",\"3023\":\"v-959e8c2a#32/6\",\"3024\":\"v-959e8c2a#32/7\",\"3025\":\"v-959e8c2a#32/8\",\"3026\":\"v-959e8c2a#32/9\",\"3027\":\"v-959e8c2a#32/10\",\"3028\":\"v-959e8c2a#32/11\",\"3029\":\"v-959e8c2a#32/12\",\"3030\":\"v-959e8c2a#32/13\",\"3031\":\"v-959e8c2a#32/14\",\"3032\":\"v-959e8c2a#33\",\"3033\":\"v-959e8c2a#33/0\",\"3034\":\"v-959e8c2a#34\",\"3035\":\"v-959e8c2a#34/0\",\"3036\":\"v-959e8c2a#34/1\",\"3037\":\"v-959e8c2a#34/2\",\"3038\":\"v-959e8c2a#35\",\"3039\":\"v-959e8c2a#35/0\",\"3040\":\"v-959e8c2a#35/1\",\"3041\":\"v-959e8c2a#36\",\"3042\":\"v-959e8c2a#36/0\",\"3043\":\"v-959e8c2a#36/1\",\"3044\":\"v-959e8c2a#36/2\",\"3045\":\"v-959e8c2a#37\",\"3046\":\"v-959e8c2a#37/0\",\"3047\":\"v-959e8c2a#37/1\",\"3048\":\"v-959e8c2a#37/2\",\"3049\":\"v-959e8c2a#37/3\",\"3050\":\"v-959e8c2a#37/4\",\"3051\":\"v-959e8c2a#37/5\",\"3052\":\"v-959e8c2a#37/6\",\"3053\":\"v-959e8c2a#38\",\"3054\":\"v-959e8c2a#38/0\",\"3055\":\"v-959e8c2a#39\",\"3056\":\"v-959e8c2a#39/0\",\"3057\":\"v-0d3f0005\",\"3058\":\"v-0d3f0005#1\",\"3059\":\"v-0d3f0005#1/0\",\"3060\":\"v-0d3f0005#2\",\"3061\":\"v-0d3f0005#2/0\",\"3062\":\"v-0d3f0005#3\",\"3063\":\"v-0d3f0005#3/0\",\"3064\":\"v-0d3f0005#3/1\",\"3065\":\"v-0d3f0005#3/2\",\"3066\":\"v-0d3f0005#3/3\",\"3067\":\"v-0d3f0005#4\",\"3068\":\"v-0d3f0005#4/0\",\"3069\":\"v-0d3f0005#4/1\",\"3070\":\"v-0d3f0005#4/2\",\"3071\":\"v-0d3f0005#4/3\",\"3072\":\"v-0d3f0005#4/4\",\"3073\":\"v-0d3f0005#4/5\",\"3074\":\"v-0d3f0005#5\",\"3075\":\"v-0d3f0005#5/6\",\"3076\":\"v-0d3f0005#5/7\",\"3077\":\"v-0d3f0005#5/8\",\"3078\":\"v-0d3f0005#5/9\",\"3079\":\"v-0d3f0005#6\",\"3080\":\"v-0d3f0005#6/0\",\"3081\":\"v-0d3f0005#6/1\",\"3082\":\"v-0d3f0005#6/2\",\"3083\":\"v-0d3f0005#6/3\",\"3084\":\"v-0d3f0005#6/4\",\"3085\":\"v-0d3f0005#6/5\",\"3086\":\"v-0d3f0005#7\",\"3087\":\"v-0d3f0005#7/0\",\"3088\":\"v-e2c4b49a\",\"3089\":\"v-e2c4b49a#1\",\"3090\":\"v-e2c4b49a#1/0\",\"3091\":\"v-e2c4b49a#1/1\",\"3092\":\"v-e2c4b49a#1/2\",\"3093\":\"v-e2c4b49a#1/3\",\"3094\":\"v-e2c4b49a#2\",\"3095\":\"v-e2c4b49a#2/0\",\"3096\":\"v-e2c4b49a#2/1\",\"3097\":\"v-e2c4b49a#2/2\",\"3098\":\"v-e2c4b49a#2/3\",\"3099\":\"v-e2c4b49a#2/4\",\"3100\":\"v-e2c4b49a#2/5\",\"3101\":\"v-e2c4b49a#2/6\",\"3102\":\"v-e2c4b49a#2/7\",\"3103\":\"v-e2c4b49a#2/8\",\"3104\":\"v-e2c4b49a#3\",\"3105\":\"v-e2c4b49a#3/0\",\"3106\":\"v-e2c4b49a#3/1\",\"3107\":\"v-e2c4b49a#3/2\",\"3108\":\"v-e2c4b49a#3/3\",\"3109\":\"v-e2c4b49a#4\",\"3110\":\"v-e2c4b49a#4/0\",\"3111\":\"v-e2c4b49a#4/1\",\"3112\":\"v-e2c4b49a#5\",\"3113\":\"v-e2c4b49a#5/0\",\"3114\":\"v-e2c4b49a#5/1\",\"3115\":\"v-e2c4b49a#5/2\",\"3116\":\"v-e2c4b49a#5/3\",\"3117\":\"v-e2c4b49a#5/4\",\"3118\":\"v-e2c4b49a#5/5\",\"3119\":\"v-e2c4b49a#6\",\"3120\":\"v-e2c4b49a#6/0\",\"3121\":\"v-e2c4b49a#6/1\",\"3122\":\"v-e2c4b49a#7\",\"3123\":\"v-e2c4b49a#7/0\",\"3124\":\"v-e2c4b49a#7/1\",\"3125\":\"v-e2c4b49a#7/2\",\"3126\":\"v-e2c4b49a#8\",\"3127\":\"v-e2c4b49a#8/0\",\"3128\":\"v-e2c4b49a#8/1\",\"3129\":\"v-e2c4b49a#8/2\",\"3130\":\"v-e2c4b49a#8/3\",\"3131\":\"v-240aac38\",\"3132\":\"v-240aac38#1\",\"3133\":\"v-240aac38#2\",\"3134\":\"v-240aac38#2/0\",\"3135\":\"v-240aac38#2/1\",\"3136\":\"v-240aac38#2/2\",\"3137\":\"v-240aac38#2/3\",\"3138\":\"v-240aac38#3\",\"3139\":\"v-240aac38#3/0\",\"3140\":\"v-240aac38#3/1\",\"3141\":\"v-240aac38#3/2\",\"3142\":\"v-240aac38#4\",\"3143\":\"v-240aac38#4/0\",\"3144\":\"v-240aac38#4/1\",\"3145\":\"v-240aac38#4/2\",\"3146\":\"v-240aac38#4/3\",\"3147\":\"v-240aac38#4/4\",\"3148\":\"v-240aac38#4/5\",\"3149\":\"v-240aac38#4/6\",\"3150\":\"v-240aac38#4/7\",\"3151\":\"v-240aac38#4/8\",\"3152\":\"v-240aac38#4/9\",\"3153\":\"v-240aac38#5\",\"3154\":\"v-240aac38#5/10\",\"3155\":\"v-240aac38#5/11\",\"3156\":\"v-240aac38#6\",\"3157\":\"v-240aac38#6/0\",\"3158\":\"v-240aac38#6/1\",\"3159\":\"v-240aac38#6/2\",\"3160\":\"v-240aac38#6/3\",\"3161\":\"v-240aac38#7\",\"3162\":\"v-240aac38#7/0\",\"3163\":\"v-240aac38#7/1\",\"3164\":\"v-240aac38#7/2\",\"3165\":\"v-240aac38#7/3\",\"3166\":\"v-240aac38#7/4\",\"3167\":\"v-240aac38#7/5\",\"3168\":\"v-240aac38#7/6\",\"3169\":\"v-240aac38#7/7\",\"3170\":\"v-240aac38#7/8\",\"3171\":\"v-240aac38#7/9\",\"3172\":\"v-240aac38#8\",\"3173\":\"v-240aac38#8/0\",\"3174\":\"v-240aac38#8/1\",\"3175\":\"v-240aac38#8/2\",\"3176\":\"v-240aac38#8/3\",\"3177\":\"v-240aac38#9\",\"3178\":\"v-240aac38#9/0\",\"3179\":\"v-240aac38#9/1\",\"3180\":\"v-240aac38#9/2\",\"3181\":\"v-240aac38#9/3\",\"3182\":\"v-240aac38#10\",\"3183\":\"v-240aac38#11\",\"3184\":\"v-240aac38#11/0\",\"3185\":\"v-240aac38#11/1\",\"3186\":\"v-240aac38#11/2\",\"3187\":\"v-240aac38#11/3\",\"3188\":\"v-240aac38#12\",\"3189\":\"v-240aac38#12/0\",\"3190\":\"v-240aac38#12/1\",\"3191\":\"v-240aac38#12/2\",\"3192\":\"v-240aac38#12/3\",\"3193\":\"v-240aac38#12/4\",\"3194\":\"v-240aac38#12/5\",\"3195\":\"v-240aac38#12/6\",\"3196\":\"v-240aac38#12/7\",\"3197\":\"v-240aac38#12/8\",\"3198\":\"v-240aac38#13\",\"3199\":\"v-240aac38#13/0\",\"3200\":\"v-240aac38#13/1\",\"3201\":\"v-240aac38#13/2\",\"3202\":\"v-240aac38#13/3\",\"3203\":\"v-240aac38#13/4\",\"3204\":\"v-6fdd47f3\",\"3205\":\"v-6fdd47f3#1\",\"3206\":\"v-6fdd47f3#1/0\",\"3207\":\"v-6fdd47f3#1/1\",\"3208\":\"v-6fdd47f3#1/2\",\"3209\":\"v-6fdd47f3#1/3\",\"3210\":\"v-6fdd47f3#1/4\",\"3211\":\"v-6fdd47f3#1/5\",\"3212\":\"v-6fdd47f3#1/6\",\"3213\":\"v-6fdd47f3#1/7\",\"3214\":\"v-6fdd47f3#1/8\",\"3215\":\"v-6fdd47f3#1/9\",\"3216\":\"v-6fdd47f3#1/10\",\"3217\":\"v-6fdd47f3#1/11\",\"3218\":\"v-6fdd47f3#1/12\",\"3219\":\"v-6fdd47f3#2\",\"3220\":\"v-6fdd47f3#2/0\",\"3221\":\"v-6fdd47f3#3\",\"3222\":\"v-6fdd47f3#3/0\",\"3223\":\"v-6fdd47f3#4\",\"3224\":\"v-6fdd47f3#4/0\",\"3225\":\"v-6fdd47f3#4/1\",\"3226\":\"v-6fdd47f3#4/2\",\"3227\":\"v-6fdd47f3#4/3\",\"3228\":\"v-6fdd47f3#4/4\",\"3229\":\"v-6fdd47f3#5\",\"3230\":\"v-6fdd47f3#5/0\",\"3231\":\"v-6fdd47f3#5/1\",\"3232\":\"v-6fdd47f3#5/2\",\"3233\":\"v-6fdd47f3#5/3\",\"3234\":\"v-6fdd47f3#5/4\",\"3235\":\"v-6fdd47f3#6\",\"3236\":\"v-6fdd47f3#6/0\",\"3237\":\"v-6fdd47f3#6/1\",\"3238\":\"v-6fdd47f3#7\",\"3239\":\"v-6fdd47f3#7/0\",\"3240\":\"v-6fdd47f3#7/1\",\"3241\":\"v-6fdd47f3#8\",\"3242\":\"v-6fdd47f3#9\",\"3243\":\"v-6fdd47f3#9/0\",\"3244\":\"v-6fdd47f3#10\",\"3245\":\"v-6fdd47f3#10/0\",\"3246\":\"v-6fdd47f3#11\",\"3247\":\"v-6fdd47f3#11/0\",\"3248\":\"v-6fdd47f3#11/1\",\"3249\":\"v-6fdd47f3#11/2\",\"3250\":\"v-6fdd47f3#12\",\"3251\":\"v-6fdd47f3#12/0\",\"3252\":\"v-6fdd47f3#12/1\",\"3253\":\"v-6fdd47f3#12/2\",\"3254\":\"v-6fdd47f3#12/3\",\"3255\":\"v-6fdd47f3#12/4\",\"3256\":\"v-6fdd47f3#12/5\",\"3257\":\"v-6fdd47f3#13\",\"3258\":\"v-6fdd47f3#13/0\",\"3259\":\"v-6fdd47f3#13/1\",\"3260\":\"v-6fdd47f3#13/2\",\"3261\":\"v-6fdd47f3#14\",\"3262\":\"v-6fdd47f3#14/0\",\"3263\":\"v-6fdd47f3#14/1\",\"3264\":\"v-6fdd47f3#15\",\"3265\":\"v-6fdd47f3#15/0\",\"3266\":\"v-6fdd47f3#15/1\",\"3267\":\"v-6fdd47f3#16\",\"3268\":\"v-6fdd47f3#16/0\",\"3269\":\"v-6fdd47f3#16/1\",\"3270\":\"v-6fdd47f3#16/2\",\"3271\":\"v-6fdd47f3#16/3\",\"3272\":\"v-6fdd47f3#16/4\",\"3273\":\"v-6fdd47f3#16/5\",\"3274\":\"v-6fdd47f3#16/6\",\"3275\":\"v-6fdd47f3#16/7\",\"3276\":\"v-6fdd47f3#16/8\",\"3277\":\"v-7abcd9a0\",\"3278\":\"v-7abcd9a0#1\",\"3279\":\"v-7abcd9a0#2\",\"3280\":\"v-7abcd9a0#2/0\",\"3281\":\"v-7abcd9a0#2/1\",\"3282\":\"v-7abcd9a0#2/2\",\"3283\":\"v-7abcd9a0#2/3\",\"3284\":\"v-7abcd9a0#3\",\"3285\":\"v-7abcd9a0#4\",\"3286\":\"v-7abcd9a0#4/0\",\"3287\":\"v-7abcd9a0#4/1\",\"3288\":\"v-7abcd9a0#4/2\",\"3289\":\"v-7abcd9a0#4/3\",\"3290\":\"v-7abcd9a0#4/4\",\"3291\":\"v-7abcd9a0#4/5\",\"3292\":\"v-7abcd9a0#4/6\",\"3293\":\"v-7abcd9a0#4/7\",\"3294\":\"v-7abcd9a0#4/8\",\"3295\":\"v-7abcd9a0#4/9\",\"3296\":\"v-7abcd9a0#4/10\",\"3297\":\"v-7abcd9a0#4/11\",\"3298\":\"v-7abcd9a0#4/12\",\"3299\":\"v-7abcd9a0#4/13\",\"3300\":\"v-7abcd9a0#4/14\",\"3301\":\"v-7abcd9a0#4/15\",\"3302\":\"v-7abcd9a0#4/16\",\"3303\":\"v-7abcd9a0#4/17\",\"3304\":\"v-7abcd9a0#4/18\",\"3305\":\"v-7abcd9a0#4/19\",\"3306\":\"v-7abcd9a0#4/20\",\"3307\":\"v-7abcd9a0#4/21\",\"3308\":\"v-7abcd9a0#4/22\",\"3309\":\"v-7abcd9a0#4/23\",\"3310\":\"v-7abcd9a0#4/24\",\"3311\":\"v-7abcd9a0#4/25\",\"3312\":\"v-7abcd9a0#4/26\",\"3313\":\"v-7abcd9a0#4/27\",\"3314\":\"v-7abcd9a0#4/28\",\"3315\":\"v-7abcd9a0#4/29\",\"3316\":\"v-7abcd9a0#4/30\",\"3317\":\"v-7abcd9a0#4/31\",\"3318\":\"v-7abcd9a0#4/32\",\"3319\":\"v-7abcd9a0#4/33\",\"3320\":\"v-7abcd9a0#4/34\",\"3321\":\"v-7abcd9a0#4/35\",\"3322\":\"v-7abcd9a0#4/36\",\"3323\":\"v-7abcd9a0#4/37\",\"3324\":\"v-7abcd9a0#4/38\",\"3325\":\"v-7abcd9a0#4/39\",\"3326\":\"v-7abcd9a0#4/40\",\"3327\":\"v-7abcd9a0#4/41\",\"3328\":\"v-7abcd9a0#4/42\",\"3329\":\"v-7abcd9a0#4/43\",\"3330\":\"v-7abcd9a0#5\",\"3331\":\"v-7abcd9a0#5/0\",\"3332\":\"v-7abcd9a0#5/1\",\"3333\":\"v-7abcd9a0#5/2\",\"3334\":\"v-7abcd9a0#5/3\",\"3335\":\"v-7abcd9a0#5/4\",\"3336\":\"v-7abcd9a0#6\",\"3337\":\"v-7abcd9a0#6/0\",\"3338\":\"v-7abcd9a0#6/1\",\"3339\":\"v-7abcd9a0#6/2\",\"3340\":\"v-7abcd9a0#6/3\",\"3341\":\"v-7abcd9a0#6/4\",\"3342\":\"v-7abcd9a0#6/5\",\"3343\":\"v-7abcd9a0#6/6\",\"3344\":\"v-7abcd9a0#6/7\",\"3345\":\"v-7abcd9a0#7\",\"3346\":\"v-7abcd9a0#7/0\",\"3347\":\"v-7abcd9a0#7/1\",\"3348\":\"v-7abcd9a0#7/2\",\"3349\":\"v-7abcd9a0#7/3\",\"3350\":\"v-7abcd9a0#7/4\",\"3351\":\"v-7abcd9a0#7/5\",\"3352\":\"v-7abcd9a0#7/6\",\"3353\":\"v-7abcd9a0#7/7\",\"3354\":\"v-7abcd9a0#8\",\"3355\":\"v-7abcd9a0#8/8\",\"3356\":\"v-7abcd9a0#8/9\",\"3357\":\"v-7abcd9a0#8/10\",\"3358\":\"v-7abcd9a0#8/11\",\"3359\":\"v-7abcd9a0#8/12\",\"3360\":\"v-7abcd9a0#8/13\",\"3361\":\"v-7abcd9a0#8/14\",\"3362\":\"v-63bba594\",\"3363\":\"v-63bba594#1\",\"3364\":\"v-63bba594#2\",\"3365\":\"v-63bba594#3\",\"3366\":\"v-63bba594#3/0\",\"3367\":\"v-63bba594#3/1\",\"3368\":\"v-63bba594#3/2\",\"3369\":\"v-63bba594#3/3\",\"3370\":\"v-63bba594#3/4\",\"3371\":\"v-63bba594#3/5\",\"3372\":\"v-63bba594#4\",\"3373\":\"v-63bba594#4/0\",\"3374\":\"v-63bba594#4/1\",\"3375\":\"v-63bba594#4/2\",\"3376\":\"v-63bba594#4/3\",\"3377\":\"v-63bba594#4/4\",\"3378\":\"v-63bba594#4/5\",\"3379\":\"v-63bba594#4/6\",\"3380\":\"v-63bba594#4/7\",\"3381\":\"v-63bba594#4/8\",\"3382\":\"v-63bba594#4/9\",\"3383\":\"v-63bba594#4/10\",\"3384\":\"v-63bba594#4/11\",\"3385\":\"v-63bba594#4/12\",\"3386\":\"v-63bba594#4/13\",\"3387\":\"v-63bba594#4/14\",\"3388\":\"v-63bba594#4/15\",\"3389\":\"v-63bba594#4/16\",\"3390\":\"v-63bba594#4/17\",\"3391\":\"v-63bba594#4/18\",\"3392\":\"v-63bba594#4/19\",\"3393\":\"v-63bba594#4/20\",\"3394\":\"v-63bba594#5\",\"3395\":\"v-63bba594#6\",\"3396\":\"v-63bba594#6/0\",\"3397\":\"v-63bba594#6/1\",\"3398\":\"v-63bba594#6/2\",\"3399\":\"v-63bba594#6/3\",\"3400\":\"v-63bba594#6/4\",\"3401\":\"v-63bba594#6/5\",\"3402\":\"v-63bba594#6/6\",\"3403\":\"v-63bba594#6/7\",\"3404\":\"v-63bba594#6/8\",\"3405\":\"v-63bba594#6/9\",\"3406\":\"v-63bba594#6/10\",\"3407\":\"v-63bba594#6/11\",\"3408\":\"v-63bba594#6/12\",\"3409\":\"v-63bba594#7\",\"3410\":\"v-63bba594#8\",\"3411\":\"v-63bba594#8/0\",\"3412\":\"v-63bba594#8/1\",\"3413\":\"v-63bba594#8/2\",\"3414\":\"v-63bba594#8/3\",\"3415\":\"v-63bba594#8/4\",\"3416\":\"v-63bba594#8/5\",\"3417\":\"v-63bba594#8/6\",\"3418\":\"v-63bba594#8/7\",\"3419\":\"v-63bba594#8/8\",\"3420\":\"v-63bba594#8/9\",\"3421\":\"v-63bba594#8/10\",\"3422\":\"v-63bba594#8/11\",\"3423\":\"v-63bba594#8/12\",\"3424\":\"v-63bba594#8/13\",\"3425\":\"v-63bba594#8/14\",\"3426\":\"v-63bba594#8/15\",\"3427\":\"v-63bba594#8/16\",\"3428\":\"v-63bba594#8/17\",\"3429\":\"v-63bba594#8/18\",\"3430\":\"v-63bba594#8/19\",\"3431\":\"v-63bba594#8/20\",\"3432\":\"v-63bba594#9\",\"3433\":\"v-63bba594#10\",\"3434\":\"v-63bba594#10/0\",\"3435\":\"v-63bba594#10/1\",\"3436\":\"v-63bba594#10/2\",\"3437\":\"v-63bba594#10/3\",\"3438\":\"v-63bba594#10/4\",\"3439\":\"v-63bba594#10/5\",\"3440\":\"v-63bba594#10/6\",\"3441\":\"v-63bba594#10/7\",\"3442\":\"v-63bba594#10/8\",\"3443\":\"v-4072253d\",\"3444\":\"v-4072253d#1\",\"3445\":\"v-4072253d#1/0\",\"3446\":\"v-4072253d#1/1\",\"3447\":\"v-4072253d#1/2\",\"3448\":\"v-4072253d#1/3\",\"3449\":\"v-4072253d#1/4\",\"3450\":\"v-4072253d#1/5\",\"3451\":\"v-4072253d#1/6\",\"3452\":\"v-4072253d#1/7\",\"3453\":\"v-4072253d#1/8\",\"3454\":\"v-4072253d#1/9\",\"3455\":\"v-4072253d#1/10\",\"3456\":\"v-4072253d#1/11\",\"3457\":\"v-4072253d#1/12\",\"3458\":\"v-4072253d#2\",\"3459\":\"v-4072253d#3\",\"3460\":\"v-4072253d#3/0\",\"3461\":\"v-4072253d#3/1\",\"3462\":\"v-4072253d#3/2\",\"3463\":\"v-4072253d#4\",\"3464\":\"v-4072253d#4/0\",\"3465\":\"v-4072253d#4/1\",\"3466\":\"v-4072253d#4/2\",\"3467\":\"v-4072253d#4/3\",\"3468\":\"v-4072253d#4/4\",\"3469\":\"v-4072253d#5\",\"3470\":\"v-4072253d#5/0\",\"3471\":\"v-4072253d#5/1\",\"3472\":\"v-4072253d#5/2\",\"3473\":\"v-4072253d#6\",\"3474\":\"v-4072253d#6/0\",\"3475\":\"v-4072253d#6/1\",\"3476\":\"v-4072253d#6/2\",\"3477\":\"v-4072253d#7\",\"3478\":\"v-4072253d#7/0\",\"3479\":\"v-4072253d#7/1\",\"3480\":\"v-4072253d#7/2\",\"3481\":\"v-4072253d#7/3\",\"3482\":\"v-4072253d#7/4\",\"3483\":\"v-4072253d#7/5\",\"3484\":\"v-4072253d#7/6\",\"3485\":\"v-4072253d#7/7\",\"3486\":\"v-4072253d#7/8\",\"3487\":\"v-4072253d#7/9\",\"3488\":\"v-4072253d#8\",\"3489\":\"v-4072253d#8/0\",\"3490\":\"v-4072253d#8/1\",\"3491\":\"v-4072253d#8/2\",\"3492\":\"v-4072253d#8/3\",\"3493\":\"v-4072253d#8/4\",\"3494\":\"v-4072253d#8/5\",\"3495\":\"v-4072253d#8/6\",\"3496\":\"v-4072253d#8/7\",\"3497\":\"v-4072253d#8/8\",\"3498\":\"v-4072253d#8/9\",\"3499\":\"v-4072253d#9\",\"3500\":\"v-4072253d#9/0\",\"3501\":\"v-4072253d#9/1\",\"3502\":\"v-4072253d#9/2\",\"3503\":\"v-4072253d#9/3\",\"3504\":\"v-4072253d#9/4\",\"3505\":\"v-4072253d#10\",\"3506\":\"v-4072253d#10/5\",\"3507\":\"v-4072253d#10/6\",\"3508\":\"v-4072253d#10/7\",\"3509\":\"v-4072253d#10/8\",\"3510\":\"v-4072253d#10/9\",\"3511\":\"v-4072253d#10/10\",\"3512\":\"v-4072253d#10/11\",\"3513\":\"v-4072253d#10/12\",\"3514\":\"v-4072253d#10/13\",\"3515\":\"v-4072253d#10/14\",\"3516\":\"v-4072253d#10/15\",\"3517\":\"v-4072253d#10/16\",\"3518\":\"v-4072253d#10/17\",\"3519\":\"v-4072253d#10/18\",\"3520\":\"v-4072253d#10/19\",\"3521\":\"v-4072253d#10/20\",\"3522\":\"v-4072253d#10/21\",\"3523\":\"v-4072253d#10/22\",\"3524\":\"v-4072253d#10/23\",\"3525\":\"v-4072253d#10/24\",\"3526\":\"v-4072253d#10/25\",\"3527\":\"v-4072253d#10/26\",\"3528\":\"v-4072253d#10/27\",\"3529\":\"v-4072253d#10/28\",\"3530\":\"v-4072253d#10/29\",\"3531\":\"v-4072253d#10/30\",\"3532\":\"v-4072253d#10/31\",\"3533\":\"v-4072253d#10/32\",\"3534\":\"v-4072253d#10/33\",\"3535\":\"v-4072253d#10/34\",\"3536\":\"v-4072253d#10/35\",\"3537\":\"v-4072253d#10/36\",\"3538\":\"v-4072253d#10/37\",\"3539\":\"v-4072253d#11\",\"3540\":\"v-4072253d#11/0\",\"3541\":\"v-4072253d#11/1\",\"3542\":\"v-4072253d#11/2\",\"3543\":\"v-4072253d#11/3\",\"3544\":\"v-4072253d#11/4\",\"3545\":\"v-4072253d#11/5\",\"3546\":\"v-4072253d#11/6\",\"3547\":\"v-4072253d#11/7\",\"3548\":\"v-4072253d#11/8\",\"3549\":\"v-4072253d#11/9\",\"3550\":\"v-4072253d#11/10\",\"3551\":\"v-4072253d#11/11\",\"3552\":\"v-4072253d#12\",\"3553\":\"v-4072253d#12/0\",\"3554\":\"v-4072253d#12/1\",\"3555\":\"v-4072253d#12/2\",\"3556\":\"v-4072253d#12/3\",\"3557\":\"v-4072253d#12/4\",\"3558\":\"v-4072253d#12/5\",\"3559\":\"v-4072253d#13\",\"3560\":\"v-4072253d#13/0\",\"3561\":\"v-4072253d#13/1\",\"3562\":\"v-4072253d#13/2\",\"3563\":\"v-4072253d#13/3\",\"3564\":\"v-4072253d#13/4\",\"3565\":\"v-4072253d#13/5\",\"3566\":\"v-4072253d#13/6\",\"3567\":\"v-4072253d#13/7\",\"3568\":\"v-4072253d#13/8\",\"3569\":\"v-4072253d#13/9\",\"3570\":\"v-4072253d#13/10\",\"3571\":\"v-4072253d#13/11\",\"3572\":\"v-4072253d#13/12\",\"3573\":\"v-4072253d#13/13\",\"3574\":\"v-4072253d#13/14\",\"3575\":\"v-4072253d#13/15\",\"3576\":\"v-4072253d#13/16\",\"3577\":\"v-4072253d#14\",\"3578\":\"v-4072253d#14/17\",\"3579\":\"v-5aff0ece\",\"3580\":\"v-5aff0ece#1\",\"3581\":\"v-5aff0ece#1/0\",\"3582\":\"v-5aff0ece#1/1\",\"3583\":\"v-5aff0ece#2\",\"3584\":\"v-5aff0ece#2/0\",\"3585\":\"v-5aff0ece#2/1\",\"3586\":\"v-5aff0ece#2/2\",\"3587\":\"v-5aff0ece#2/3\",\"3588\":\"v-5aff0ece#3\",\"3589\":\"v-5aff0ece#3/0\",\"3590\":\"v-5aff0ece#4\",\"3591\":\"v-5aff0ece#5\",\"3592\":\"v-5aff0ece#5/0\",\"3593\":\"v-5aff0ece#5/1\",\"3594\":\"v-5aff0ece#5/2\",\"3595\":\"v-5aff0ece#5/3\",\"3596\":\"v-5aff0ece#5/4\",\"3597\":\"v-5aff0ece#5/5\",\"3598\":\"v-5aff0ece#5/6\",\"3599\":\"v-5aff0ece#5/7\",\"3600\":\"v-5aff0ece#5/8\",\"3601\":\"v-5aff0ece#5/9\",\"3602\":\"v-5aff0ece#5/10\",\"3603\":\"v-5aff0ece#5/11\",\"3604\":\"v-5aff0ece#5/12\",\"3605\":\"v-5aff0ece#5/13\",\"3606\":\"v-5aff0ece#5/14\",\"3607\":\"v-5aff0ece#5/15\",\"3608\":\"v-5aff0ece#5/16\",\"3609\":\"v-5aff0ece#5/17\",\"3610\":\"v-5aff0ece#5/18\",\"3611\":\"v-5aff0ece#5/19\",\"3612\":\"v-5aff0ece#5/20\",\"3613\":\"v-5aff0ece#5/21\",\"3614\":\"v-5aff0ece#5/22\",\"3615\":\"v-5aff0ece#5/23\",\"3616\":\"v-5aff0ece#5/24\",\"3617\":\"v-5aff0ece#5/25\",\"3618\":\"v-5aff0ece#5/26\",\"3619\":\"v-5aff0ece#5/27\",\"3620\":\"v-5aff0ece#5/28\",\"3621\":\"v-5aff0ece#5/29\",\"3622\":\"v-5aff0ece#5/30\",\"3623\":\"v-5aff0ece#5/31\",\"3624\":\"v-5aff0ece#5/32\",\"3625\":\"v-5aff0ece#5/33\",\"3626\":\"v-5aff0ece#5/34\",\"3627\":\"v-5aff0ece#5/35\",\"3628\":\"v-5aff0ece#5/36\",\"3629\":\"v-5aff0ece#5/37\",\"3630\":\"v-5aff0ece#5/38\",\"3631\":\"v-5aff0ece#5/39\",\"3632\":\"v-5aff0ece#5/40\",\"3633\":\"v-5aff0ece#5/41\",\"3634\":\"v-5aff0ece#5/42\",\"3635\":\"v-5aff0ece#5/43\",\"3636\":\"v-5aff0ece#5/44\",\"3637\":\"v-5aff0ece#5/45\",\"3638\":\"v-5aff0ece#6\",\"3639\":\"v-5aff0ece#6/0\",\"3640\":\"v-5aff0ece#7\",\"3641\":\"v-5aff0ece#7/1\",\"3642\":\"v-5aff0ece#7/2\",\"3643\":\"v-5aff0ece#7/3\",\"3644\":\"v-5aff0ece#8\",\"3645\":\"v-5aff0ece#8/0\",\"3646\":\"v-5aff0ece#9\",\"3647\":\"v-5aff0ece#9/0\",\"3648\":\"v-5aff0ece#10\",\"3649\":\"v-5aff0ece#10/0\",\"3650\":\"v-5aff0ece#10/1\",\"3651\":\"v-5aff0ece#11\",\"3652\":\"v-5aff0ece#11/0\",\"3653\":\"v-5aff0ece#11/1\",\"3654\":\"v-5aff0ece#11/2\",\"3655\":\"v-5aff0ece#11/3\",\"3656\":\"v-5aff0ece#11/4\",\"3657\":\"v-2b64e284\",\"3658\":\"v-2b64e284#1\",\"3659\":\"v-2b64e284#1/0\",\"3660\":\"v-2b64e284#1/1\",\"3661\":\"v-2b64e284#1/2\",\"3662\":\"v-2b64e284#1/3\",\"3663\":\"v-c1942916\",\"3664\":\"v-c1942916#0/0\",\"3665\":\"v-c1942916#0/1\",\"3666\":\"v-c1942916#0/2\",\"3667\":\"v-c1942916#0/3\",\"3668\":\"v-c1942916#0/4\",\"3669\":\"v-c1942916#0/5\",\"3670\":\"v-c1942916#0/6\",\"3671\":\"v-c1942916#0/7\",\"3672\":\"v-c1942916#0/8\",\"3673\":\"v-c1942916#0/9\",\"3674\":\"v-c1942916#0/10\",\"3675\":\"v-c1942916#0/11\",\"3676\":\"v-c1942916#0/12\",\"3677\":\"v-65c00218\",\"3678\":\"v-65c00218#0/0\",\"3679\":\"v-65c00218#0/1\",\"3680\":\"v-65c00218#0/2\",\"3681\":\"v-36295574\",\"3682\":\"v-36295574#0/0\",\"3683\":\"v-36295574#0/1\",\"3684\":\"v-36295574#1\",\"3685\":\"v-36295574#1/0\",\"3686\":\"v-36295574#2\",\"3687\":\"v-36295574#2/0\",\"3688\":\"v-36295574#2/1\",\"3689\":\"v-36295574#2/2\",\"3690\":\"v-36295574#3\",\"3691\":\"v-36295574#3/0\",\"3692\":\"v-36295574#4\",\"3693\":\"v-36295574#4/0\",\"3694\":\"v-36295574#4/1\",\"3695\":\"v-36295574#5\",\"3696\":\"v-36295574#5/0\",\"3697\":\"v-36295574#6\",\"3698\":\"v-36295574#6/0\",\"3699\":\"v-36295574#6/1\",\"3700\":\"v-36295574#6/2\",\"3701\":\"v-36295574#6/3\",\"3702\":\"v-36295574#6/4\",\"3703\":\"v-36295574#6/5\",\"3704\":\"v-36295574#6/6\",\"3705\":\"v-36295574#6/7\",\"3706\":\"v-36295574#6/8\",\"3707\":\"v-36295574#6/9\",\"3708\":\"v-36295574#6/10\",\"3709\":\"v-36295574#6/11\",\"3710\":\"v-36295574#6/12\",\"3711\":\"v-36295574#7\",\"3712\":\"v-36295574#7/0\",\"3713\":\"v-36295574#8\",\"3714\":\"v-36295574#8/0\",\"3715\":\"v-36295574#8/1\",\"3716\":\"v-36295574#9\",\"3717\":\"v-36295574#9/0\",\"3718\":\"v-36295574#9/1\",\"3719\":\"v-36295574#9/2\",\"3720\":\"v-36295574#10\",\"3721\":\"v-36295574#10/0\",\"3722\":\"v-36295574#10/1\",\"3723\":\"v-36295574#11\",\"3724\":\"v-36295574#11/0\",\"3725\":\"v-36295574#11/1\",\"3726\":\"v-36295574#12\",\"3727\":\"v-36295574#12/0\",\"3728\":\"v-36295574#12/1\",\"3729\":\"v-36295574#13\",\"3730\":\"v-36295574#13/0\",\"3731\":\"v-36295574#13/1\",\"3732\":\"v-36295574#13/2\",\"3733\":\"v-36295574#14\",\"3734\":\"v-36295574#14/0\",\"3735\":\"v-36295574#14/1\",\"3736\":\"v-36295574#15\",\"3737\":\"v-36295574#15/0\",\"3738\":\"v-36295574#15/1\",\"3739\":\"v-36295574#16\",\"3740\":\"v-36295574#16/0\",\"3741\":\"v-36295574#17\",\"3742\":\"v-36295574#17/0\",\"3743\":\"v-36295574#18\",\"3744\":\"v-36295574#18/0\",\"3745\":\"v-36295574#19\",\"3746\":\"v-36295574#19/0\",\"3747\":\"v-36295574#20\",\"3748\":\"v-36295574#20/0\",\"3749\":\"v-36295574#20/1\",\"3750\":\"v-36295574#21\",\"3751\":\"v-36295574#21/0\",\"3752\":\"v-36295574#21/1\",\"3753\":\"v-36295574#21/2\",\"3754\":\"v-36295574#21/3\",\"3755\":\"v-36295574#21/4\",\"3756\":\"v-36295574#22\",\"3757\":\"v-36295574#22/0\",\"3758\":\"v-36295574#23\",\"3759\":\"v-36295574#23/0\",\"3760\":\"v-36295574#23/1\",\"3761\":\"v-36295574#24\",\"3762\":\"v-36295574#24/0\",\"3763\":\"v-36295574#25\",\"3764\":\"v-36295574#25/0\",\"3765\":\"v-36295574#26\",\"3766\":\"v-36295574#26/0\",\"3767\":\"v-36295574#26/1\",\"3768\":\"v-62ced1a6\",\"3769\":\"v-62ced1a6#0/0\",\"3770\":\"v-62ced1a6#1\",\"3771\":\"v-62ced1a6#1/0\",\"3772\":\"v-62ced1a6#1/1\",\"3773\":\"v-62ced1a6#1/2\",\"3774\":\"v-62ced1a6#1/3\",\"3775\":\"v-62ced1a6#1/4\",\"3776\":\"v-62ced1a6#2\",\"3777\":\"v-62ced1a6#2/0\",\"3778\":\"v-62ced1a6#2/1\",\"3779\":\"v-62ced1a6#2/2\",\"3780\":\"v-62ced1a6#2/3\",\"3781\":\"v-62ced1a6#2/4\",\"3782\":\"v-62ced1a6#2/5\",\"3783\":\"v-62ced1a6#3\",\"3784\":\"v-62ced1a6#3/0\",\"3785\":\"v-62ced1a6#3/1\",\"3786\":\"v-62ced1a6#3/2\",\"3787\":\"v-62ced1a6#3/3\",\"3788\":\"v-62ced1a6#3/4\",\"3789\":\"v-62ced1a6#3/5\",\"3790\":\"v-62ced1a6#3/6\",\"3791\":\"v-62ced1a6#3/7\",\"3792\":\"v-62ced1a6#3/8\",\"3793\":\"v-62ced1a6#3/9\",\"3794\":\"v-62ced1a6#3/10\",\"3795\":\"v-47357bdb\",\"3796\":\"v-47357bdb#1\",\"3797\":\"v-47357bdb#2\",\"3798\":\"v-47357bdb#2/0\",\"3799\":\"v-47357bdb#2/1\",\"3800\":\"v-47357bdb#3\",\"3801\":\"v-47357bdb#3/0\",\"3802\":\"v-47357bdb#3/1\",\"3803\":\"v-2c0c1358\",\"3804\":\"v-2c0c1358#0/0\",\"3805\":\"v-2c0c1358#0/1\",\"3806\":\"v-2c0c1358#0/2\",\"3807\":\"v-763c1cd7\",\"3808\":\"v-763c1cd7#1\",\"3809\":\"v-763c1cd7#1/0\",\"3810\":\"v-763c1cd7#2\",\"3811\":\"v-763c1cd7#2/0\",\"3812\":\"v-763c1cd7#2/1\",\"3813\":\"v-1e317375\",\"3814\":\"v-1e317375#0/0\",\"3815\":\"v-763e2284\",\"3816\":\"v-763e2284#1\",\"3817\":\"v-763e2284#1/0\",\"3818\":\"v-763e2284#2\",\"3819\":\"v-763e2284#2/0\",\"3820\":\"v-763e2284#2/1\",\"3821\":\"v-00fb7173\",\"3822\":\"v-00fb7173#0/0\",\"3823\":\"v-73f45a1e\",\"3824\":\"v-73f45a1e#1\",\"3825\":\"v-73f45a1e#2\",\"3826\":\"v-73f45a1e#3\",\"3827\":\"v-73f45a1e#3/0\",\"3828\":\"v-73f45a1e#3/1\",\"3829\":\"v-73f45a1e#3/2\",\"3830\":\"v-73f45a1e#3/3\",\"3831\":\"v-73f45a1e#3/4\",\"3832\":\"v-73f45a1e#4\",\"3833\":\"v-73f45a1e#5\",\"3834\":\"v-73f45a1e#6\",\"3835\":\"v-73f45a1e#7\",\"3836\":\"v-73f45a1e#8\",\"3837\":\"v-73f45a1e#9\",\"3838\":\"v-73f45a1e#10\",\"3839\":\"v-73f45a1e#10/0\",\"3840\":\"v-73f45a1e#10/1\",\"3841\":\"v-73f45a1e#10/2\",\"3842\":\"v-73f45a1e#11\",\"3843\":\"v-73f45a1e#11/0\",\"3844\":\"v-73f45a1e#11/1\",\"3845\":\"v-73f45a1e#11/2\",\"3846\":\"v-73f45a1e#12\",\"3847\":\"v-73f45a1e#13\",\"3848\":\"v-73f45a1e#13/0\",\"3849\":\"v-73f45a1e#13/1\",\"3850\":\"v-73f45a1e#13/2\",\"3851\":\"v-73f45a1e#13/3\",\"3852\":\"v-73f45a1e#14\",\"3853\":\"v-73f45a1e#14/0\",\"3854\":\"v-73f45a1e#14/1\",\"3855\":\"v-73f45a1e#15\",\"3856\":\"v-73f45a1e#15/0\",\"3857\":\"v-73f45a1e#15/1\",\"3858\":\"v-73f45a1e#15/2\",\"3859\":\"v-73f45a1e#15/3\",\"3860\":\"v-73f45a1e#15/4\",\"3861\":\"v-73f45a1e#15/5\",\"3862\":\"v-73f45a1e#15/6\",\"3863\":\"v-73f45a1e#15/7\",\"3864\":\"v-73f45a1e#15/8\",\"3865\":\"v-73f45a1e#15/9\",\"3866\":\"v-73f45a1e#15/10\",\"3867\":\"v-73f45a1e#15/11\",\"3868\":\"v-73f45a1e#15/12\",\"3869\":\"v-73f45a1e#15/13\",\"3870\":\"v-73f45a1e#16\",\"3871\":\"v-73f45a1e#16/0\",\"3872\":\"v-73f45a1e#16/1\",\"3873\":\"v-73f45a1e#16/2\",\"3874\":\"v-73f45a1e#16/3\",\"3875\":\"v-73f45a1e#16/4\",\"3876\":\"v-73f45a1e#16/5\",\"3877\":\"v-73f45a1e#16/6\",\"3878\":\"v-73f45a1e#16/7\",\"3879\":\"v-73f45a1e#16/8\",\"3880\":\"v-73f45a1e#16/9\",\"3881\":\"v-73f45a1e#16/10\",\"3882\":\"v-73f45a1e#16/11\",\"3883\":\"v-73f45a1e#16/12\",\"3884\":\"v-73f45a1e#16/13\",\"3885\":\"v-73f45a1e#16/14\",\"3886\":\"v-86e9843c\",\"3887\":\"v-86e9843c#1\",\"3888\":\"v-86e9843c#1/0\",\"3889\":\"v-86e9843c#2\",\"3890\":\"v-86e9843c#3\",\"3891\":\"v-86e9843c#3/0\",\"3892\":\"v-86e9843c#3/1\",\"3893\":\"v-86e9843c#3/2\",\"3894\":\"v-86e9843c#3/3\",\"3895\":\"v-86e9843c#3/4\",\"3896\":\"v-86e9843c#3/5\",\"3897\":\"v-86e9843c#3/6\",\"3898\":\"v-86e9843c#3/7\",\"3899\":\"v-86e9843c#4\",\"3900\":\"v-86e9843c#4/8\",\"3901\":\"v-86e9843c#4/9\",\"3902\":\"v-86e9843c#4/10\",\"3903\":\"v-86e9843c#4/11\",\"3904\":\"v-86e9843c#4/12\",\"3905\":\"v-86e9843c#5\",\"3906\":\"v-86e9843c#5/0\",\"3907\":\"v-86e9843c#5/1\",\"3908\":\"v-86e9843c#5/2\",\"3909\":\"v-86e9843c#5/3\",\"3910\":\"v-86e9843c#5/4\",\"3911\":\"v-86e9843c#5/5\",\"3912\":\"v-86e9843c#6\",\"3913\":\"v-86e9843c#6/6\",\"3914\":\"v-86e9843c#6/7\",\"3915\":\"v-86e9843c#7\",\"3916\":\"v-86e9843c#7/8\",\"3917\":\"v-86e9843c#7/9\",\"3918\":\"v-86e9843c#7/10\",\"3919\":\"v-86e9843c#7/11\",\"3920\":\"v-86e9843c#7/12\",\"3921\":\"v-86e9843c#7/13\",\"3922\":\"v-86e9843c#7/14\",\"3923\":\"v-86e9843c#7/15\",\"3924\":\"v-86e9843c#7/16\",\"3925\":\"v-86e9843c#7/17\",\"3926\":\"v-86e9843c#8\",\"3927\":\"v-86e9843c#9\",\"3928\":\"v-86e9843c#9/0\",\"3929\":\"v-86e9843c#9/1\",\"3930\":\"v-86e9843c#9/2\",\"3931\":\"v-86e9843c#9/3\",\"3932\":\"v-86e9843c#9/4\",\"3933\":\"v-86e9843c#9/5\",\"3934\":\"v-86e9843c#9/6\",\"3935\":\"v-86e9843c#9/7\",\"3936\":\"v-86e9843c#9/8\",\"3937\":\"v-86e9843c#9/9\",\"3938\":\"v-86e9843c#9/10\",\"3939\":\"v-86e9843c#9/11\",\"3940\":\"v-86e9843c#9/12\",\"3941\":\"v-86e9843c#9/13\",\"3942\":\"v-86e9843c#9/14\",\"3943\":\"v-86e9843c#9/15\",\"3944\":\"v-86e9843c#9/16\",\"3945\":\"v-86e9843c#9/17\",\"3946\":\"v-86e9843c#10\",\"3947\":\"v-86e9843c#10/0\",\"3948\":\"v-86e9843c#10/1\",\"3949\":\"v-86e9843c#10/2\",\"3950\":\"v-86e9843c#10/3\",\"3951\":\"v-86e9843c#10/4\",\"3952\":\"v-86e9843c#10/5\",\"3953\":\"v-86e9843c#10/6\",\"3954\":\"v-86e9843c#11\",\"3955\":\"v-86e9843c#11/0\",\"3956\":\"v-86e9843c#11/1\",\"3957\":\"v-86e9843c#11/2\",\"3958\":\"v-86e9843c#11/3\",\"3959\":\"v-86e9843c#11/4\",\"3960\":\"v-86e9843c#11/5\",\"3961\":\"v-86e9843c#11/6\",\"3962\":\"v-86e9843c#12\",\"3963\":\"v-86e9843c#12/0\",\"3964\":\"v-86e9843c#12/1\",\"3965\":\"v-86e9843c#12/2\",\"3966\":\"v-86e9843c#12/3\",\"3967\":\"v-86e9843c#12/4\",\"3968\":\"v-86e9843c#12/5\",\"3969\":\"v-86e9843c#12/6\",\"3970\":\"v-86e9843c#12/7\",\"3971\":\"v-86e9843c#12/8\",\"3972\":\"v-86e9843c#13\",\"3973\":\"v-86e9843c#14\",\"3974\":\"v-86e9843c#15\",\"3975\":\"v-86e9843c#16\",\"3976\":\"v-86e9843c#16/0\",\"3977\":\"v-86e9843c#16/1\",\"3978\":\"v-86e9843c#17\",\"3979\":\"v-86e9843c#17/0\",\"3980\":\"v-86e9843c#18\",\"3981\":\"v-86e9843c#18/0\",\"3982\":\"v-86e9843c#19\",\"3983\":\"v-86e9843c#19/0\",\"3984\":\"v-86e9843c#20\",\"3985\":\"v-86e9843c#20/0\",\"3986\":\"v-86e9843c#21\",\"3987\":\"v-86e9843c#21/0\",\"3988\":\"v-86e9843c#21/1\",\"3989\":\"v-86e9843c#22\",\"3990\":\"v-86e9843c#23\",\"3991\":\"v-86e9843c#24\",\"3992\":\"v-86e9843c#25\",\"3993\":\"v-86e9843c#26\",\"3994\":\"v-86e9843c#27\",\"3995\":\"v-86e9843c#28\",\"3996\":\"v-86e9843c#29\",\"3997\":\"v-86e9843c#29/0\",\"3998\":\"v-86e9843c#30\",\"3999\":\"v-86e9843c#30/0\",\"4000\":\"v-86e9843c#31\",\"4001\":\"v-86e9843c#31/0\",\"4002\":\"v-86e9843c#31/1\",\"4003\":\"v-86e9843c#31/2\",\"4004\":\"v-86e9843c#31/3\",\"4005\":\"v-86e9843c#31/4\",\"4006\":\"v-86e9843c#31/5\",\"4007\":\"v-86e9843c#31/6\",\"4008\":\"v-86e9843c#31/7\",\"4009\":\"v-86e9843c#31/8\",\"4010\":\"v-86e9843c#32\",\"4011\":\"v-86e9843c#32/0\",\"4012\":\"v-86e9843c#32/1\",\"4013\":\"v-86e9843c#32/2\",\"4014\":\"v-86e9843c#32/3\",\"4015\":\"v-86e9843c#32/4\",\"4016\":\"v-86e9843c#32/5\",\"4017\":\"v-86e9843c#32/6\",\"4018\":\"v-86e9843c#32/7\",\"4019\":\"v-86e9843c#33\",\"4020\":\"v-86e9843c#34\",\"4021\":\"v-86e9843c#35\",\"4022\":\"v-86e9843c#36\",\"4023\":\"v-86e9843c#36/0\",\"4024\":\"v-86e9843c#36/1\",\"4025\":\"v-86e9843c#36/2\",\"4026\":\"v-86e9843c#37\",\"4027\":\"v-86e9843c#37/0\",\"4028\":\"v-86e9843c#37/1\",\"4029\":\"v-86e9843c#37/2\",\"4030\":\"v-86e9843c#37/3\",\"4031\":\"v-86e9843c#38\",\"4032\":\"v-86e9843c#39\",\"4033\":\"v-86e9843c#39/0\",\"4034\":\"v-86e9843c#39/1\",\"4035\":\"v-86e9843c#39/2\",\"4036\":\"v-86e9843c#40\",\"4037\":\"v-86e9843c#40/0\",\"4038\":\"v-86e9843c#40/1\",\"4039\":\"v-86e9843c#41\",\"4040\":\"v-86e9843c#41/0\",\"4041\":\"v-86e9843c#42\",\"4042\":\"v-86e9843c#43\",\"4043\":\"v-86e9843c#44\",\"4044\":\"v-86e9843c#44/0\",\"4045\":\"v-86e9843c#45\",\"4046\":\"v-86e9843c#45/0\",\"4047\":\"v-86e9843c#45/1\",\"4048\":\"v-86e9843c#46\",\"4049\":\"v-86e9843c#46/0\",\"4050\":\"v-86e9843c#46/1\",\"4051\":\"v-86e9843c#47\",\"4052\":\"v-86e9843c#47/0\",\"4053\":\"v-86e9843c#47/1\",\"4054\":\"v-86e9843c#47/2\",\"4055\":\"v-86e9843c#47/3\",\"4056\":\"v-86e9843c#47/4\",\"4057\":\"v-86e9843c#48\",\"4058\":\"v-86e9843c#48/0\",\"4059\":\"v-86e9843c#48/1\",\"4060\":\"v-86e9843c#48/2\",\"4061\":\"v-86e9843c#48/3\",\"4062\":\"v-86e9843c#48/4\",\"4063\":\"v-86e9843c#48/5\",\"4064\":\"v-86e9843c#49\",\"4065\":\"v-86e9843c#49/0\",\"4066\":\"v-86e9843c#49/1\",\"4067\":\"v-86e9843c#49/2\",\"4068\":\"v-86e9843c#49/3\",\"4069\":\"v-86e9843c#49/4\",\"4070\":\"v-86e9843c#49/5\",\"4071\":\"v-86e9843c#49/6\",\"4072\":\"v-86e9843c#50\",\"4073\":\"v-86e9843c#50/0\",\"4074\":\"v-86e9843c#50/1\",\"4075\":\"v-692f37ea\",\"4076\":\"v-692f37ea#1\",\"4077\":\"v-692f37ea#2\",\"4078\":\"v-692f37ea#2/0\",\"4079\":\"v-692f37ea#2/1\",\"4080\":\"v-692f37ea#2/2\",\"4081\":\"v-692f37ea#2/3\",\"4082\":\"v-692f37ea#2/4\",\"4083\":\"v-692f37ea#2/5\",\"4084\":\"v-692f37ea#3\",\"4085\":\"v-692f37ea#4\",\"4086\":\"v-692f37ea#4/0\",\"4087\":\"v-692f37ea#4/1\",\"4088\":\"v-692f37ea#4/2\",\"4089\":\"v-692f37ea#4/3\",\"4090\":\"v-692f37ea#4/4\",\"4091\":\"v-692f37ea#4/5\",\"4092\":\"v-692f37ea#4/6\",\"4093\":\"v-692f37ea#4/7\",\"4094\":\"v-692f37ea#4/8\",\"4095\":\"v-692f37ea#4/9\",\"4096\":\"v-692f37ea#4/10\",\"4097\":\"v-692f37ea#4/11\",\"4098\":\"v-692f37ea#4/12\",\"4099\":\"v-692f37ea#4/13\",\"4100\":\"v-692f37ea#4/14\",\"4101\":\"v-692f37ea#5\",\"4102\":\"v-692f37ea#5/0\",\"4103\":\"v-692f37ea#5/1\",\"4104\":\"v-692f37ea#5/2\",\"4105\":\"v-692f37ea#5/3\",\"4106\":\"v-692f37ea#5/4\",\"4107\":\"v-692f37ea#5/5\",\"4108\":\"v-692f37ea#5/6\",\"4109\":\"v-692f37ea#6\",\"4110\":\"v-692f37ea#7\",\"4111\":\"v-692f37ea#7/0\",\"4112\":\"v-692f37ea#7/1\",\"4113\":\"v-692f37ea#7/2\",\"4114\":\"v-692f37ea#7/3\",\"4115\":\"v-692f37ea#7/4\",\"4116\":\"v-692f37ea#7/5\",\"4117\":\"v-692f37ea#7/6\",\"4118\":\"v-692f37ea#7/7\",\"4119\":\"v-692f37ea#7/8\",\"4120\":\"v-692f37ea#7/9\",\"4121\":\"v-692f37ea#7/10\",\"4122\":\"v-692f37ea#8\",\"4123\":\"v-692f37ea#8/0\",\"4124\":\"v-692f37ea#8/1\",\"4125\":\"v-692f37ea#8/2\",\"4126\":\"v-692f37ea#8/3\",\"4127\":\"v-692f37ea#8/4\",\"4128\":\"v-692f37ea#8/5\",\"4129\":\"v-692f37ea#9\",\"4130\":\"v-692f37ea#9/0\",\"4131\":\"v-692f37ea#9/1\",\"4132\":\"v-692f37ea#9/2\",\"4133\":\"v-692f37ea#9/3\",\"4134\":\"v-692f37ea#9/4\",\"4135\":\"v-692f37ea#9/5\",\"4136\":\"v-692f37ea#9/6\",\"4137\":\"v-692f37ea#9/7\",\"4138\":\"v-692f37ea#9/8\",\"4139\":\"v-692f37ea#9/9\",\"4140\":\"v-692f37ea#9/10\",\"4141\":\"v-692f37ea#10\",\"4142\":\"v-692f37ea#10/0\",\"4143\":\"v-692f37ea#10/1\",\"4144\":\"v-692f37ea#10/2\",\"4145\":\"v-692f37ea#10/3\",\"4146\":\"v-692f37ea#10/4\",\"4147\":\"v-692f37ea#10/5\",\"4148\":\"v-692f37ea#10/6\",\"4149\":\"v-692f37ea#10/7\",\"4150\":\"v-692f37ea#10/8\",\"4151\":\"v-692f37ea#10/9\",\"4152\":\"v-692f37ea#10/10\",\"4153\":\"v-692f37ea#10/11\",\"4154\":\"v-692f37ea#10/12\",\"4155\":\"v-692f37ea#10/13\",\"4156\":\"v-692f37ea#10/14\",\"4157\":\"v-692f37ea#10/15\",\"4158\":\"v-692f37ea#10/16\",\"4159\":\"v-692f37ea#10/17\",\"4160\":\"v-692f37ea#10/18\",\"4161\":\"v-692f37ea#10/19\",\"4162\":\"v-692f37ea#10/20\",\"4163\":\"v-692f37ea#10/21\",\"4164\":\"v-692f37ea#10/22\",\"4165\":\"v-692f37ea#10/23\",\"4166\":\"v-692f37ea#10/24\",\"4167\":\"v-692f37ea#10/25\",\"4168\":\"v-692f37ea#10/26\",\"4169\":\"v-692f37ea#10/27\",\"4170\":\"v-692f37ea#10/28\",\"4171\":\"v-692f37ea#11\",\"4172\":\"v-692f37ea#11/0\",\"4173\":\"v-692f37ea#11/1\",\"4174\":\"v-692f37ea#11/2\",\"4175\":\"v-692f37ea#11/3\",\"4176\":\"v-692f37ea#11/4\",\"4177\":\"v-692f37ea#11/5\",\"4178\":\"v-692f37ea#11/6\",\"4179\":\"v-692f37ea#11/7\",\"4180\":\"v-692f37ea#11/8\",\"4181\":\"v-692f37ea#11/9\",\"4182\":\"v-692f37ea#12\",\"4183\":\"v-692f37ea#12/0\",\"4184\":\"v-692f37ea#12/1\",\"4185\":\"v-692f37ea#12/2\",\"4186\":\"v-692f37ea#13\",\"4187\":\"v-692f37ea#13/0\",\"4188\":\"v-692f37ea#13/1\",\"4189\":\"v-692f37ea#13/2\",\"4190\":\"v-692f37ea#13/3\",\"4191\":\"v-692f37ea#13/4\",\"4192\":\"v-692f37ea#13/5\",\"4193\":\"v-692f37ea#14\",\"4194\":\"v-692f37ea#14/6\",\"4195\":\"v-692f37ea#14/7\",\"4196\":\"v-692f37ea#14/8\",\"4197\":\"v-692f37ea#14/9\",\"4198\":\"v-692f37ea#14/10\",\"4199\":\"v-692f37ea#14/11\",\"4200\":\"v-692f37ea#15\",\"4201\":\"v-692f37ea#15/0\",\"4202\":\"v-692f37ea#15/1\",\"4203\":\"v-692f37ea#16\",\"4204\":\"v-692f37ea#17\",\"4205\":\"v-692f37ea#17/2\",\"4206\":\"v-692f37ea#17/3\",\"4207\":\"v-692f37ea#17/4\",\"4208\":\"v-692f37ea#17/5\",\"4209\":\"v-692f37ea#18\",\"4210\":\"v-692f37ea#18/0\",\"4211\":\"v-692f37ea#18/1\",\"4212\":\"v-692f37ea#18/2\",\"4213\":\"v-692f37ea#19\",\"4214\":\"v-692f37ea#19/0\",\"4215\":\"v-692f37ea#19/1\",\"4216\":\"v-692f37ea#19/2\",\"4217\":\"v-692f37ea#19/3\",\"4218\":\"v-692f37ea#19/4\",\"4219\":\"v-692f37ea#19/5\",\"4220\":\"v-692f37ea#19/6\",\"4221\":\"v-692f37ea#19/7\",\"4222\":\"v-692f37ea#19/8\",\"4223\":\"v-692f37ea#19/9\",\"4224\":\"v-692f37ea#19/10\",\"4225\":\"v-692f37ea#19/11\",\"4226\":\"v-692f37ea#20\",\"4227\":\"v-692f37ea#20/0\",\"4228\":\"v-692f37ea#20/1\",\"4229\":\"v-692f37ea#20/2\",\"4230\":\"v-692f37ea#20/3\",\"4231\":\"v-692f37ea#20/4\",\"4232\":\"v-692f37ea#20/5\",\"4233\":\"v-692f37ea#20/6\",\"4234\":\"v-692f37ea#20/7\",\"4235\":\"v-692f37ea#21\",\"4236\":\"v-692f37ea#22\",\"4237\":\"v-692f37ea#22/0\",\"4238\":\"v-692f37ea#22/1\",\"4239\":\"v-692f37ea#22/2\",\"4240\":\"v-692f37ea#22/3\",\"4241\":\"v-692f37ea#22/4\",\"4242\":\"v-692f37ea#22/5\",\"4243\":\"v-692f37ea#23\",\"4244\":\"v-692f37ea#23/0\",\"4245\":\"v-692f37ea#23/1\",\"4246\":\"v-692f37ea#23/2\",\"4247\":\"v-692f37ea#23/3\",\"4248\":\"v-692f37ea#23/4\",\"4249\":\"v-692f37ea#23/5\",\"4250\":\"v-692f37ea#23/6\",\"4251\":\"v-692f37ea#23/7\",\"4252\":\"v-692f37ea#24\",\"4253\":\"v-692f37ea#25\",\"4254\":\"v-692f37ea#25/0\",\"4255\":\"v-692f37ea#26\",\"4256\":\"v-692f37ea#26/0\",\"4257\":\"v-692f37ea#26/1\",\"4258\":\"v-692f37ea#26/2\",\"4259\":\"v-692f37ea#26/3\",\"4260\":\"v-692f37ea#26/4\",\"4261\":\"v-692f37ea#26/5\",\"4262\":\"v-692f37ea#27\",\"4263\":\"v-692f37ea#27/0\",\"4264\":\"v-692f37ea#27/1\",\"4265\":\"v-692f37ea#28\",\"4266\":\"v-692f37ea#28/0\",\"4267\":\"v-692f37ea#28/1\",\"4268\":\"v-692f37ea#28/2\",\"4269\":\"v-692f37ea#28/3\",\"4270\":\"v-692f37ea#28/4\",\"4271\":\"v-692f37ea#28/5\",\"4272\":\"v-692f37ea#28/6\",\"4273\":\"v-692f37ea#28/7\",\"4274\":\"v-692f37ea#28/8\",\"4275\":\"v-692f37ea#28/9\",\"4276\":\"v-73f9cd72\",\"4277\":\"v-73f9cd72#1\",\"4278\":\"v-73f9cd72#2\",\"4279\":\"v-73f9cd72#3\",\"4280\":\"v-73f9cd72#4\",\"4281\":\"v-73f9cd72#5\",\"4282\":\"v-73f9cd72#5/0\",\"4283\":\"v-63f5528d\",\"4284\":\"v-63f5528d#1\",\"4285\":\"v-63f5528d#2\",\"4286\":\"v-63f5528d#3\",\"4287\":\"v-63f5528d#3/0\",\"4288\":\"v-63f5528d#4\",\"4289\":\"v-63f5528d#4/0\",\"4290\":\"v-63f5528d#5\",\"4291\":\"v-63f5528d#5/0\",\"4292\":\"v-63f5528d#6\",\"4293\":\"v-63f5528d#6/0\",\"4294\":\"v-63f5528d#6/1\",\"4295\":\"v-63f5528d#6/2\",\"4296\":\"v-63f5528d#6/3\",\"4297\":\"v-63f5528d#6/4\",\"4298\":\"v-63f5528d#6/5\",\"4299\":\"v-63f5528d#6/6\",\"4300\":\"v-63f5528d#6/7\",\"4301\":\"v-63f5528d#6/8\",\"4302\":\"v-63f5528d#7\",\"4303\":\"v-63f5528d#7/0\",\"4304\":\"v-63f5528d#7/1\",\"4305\":\"v-63f5528d#8\",\"4306\":\"v-63f5528d#8/2\",\"4307\":\"v-63f5528d#9\",\"4308\":\"v-63f5528d#9/0\",\"4309\":\"v-63f5528d#10\",\"4310\":\"v-63f5528d#10/0\",\"4311\":\"v-63f5528d#11\",\"4312\":\"v-63f5528d#11/0\",\"4313\":\"v-63f5528d#12\",\"4314\":\"v-63f5528d#12/0\",\"4315\":\"v-63f5528d#12/1\",\"4316\":\"v-63f5528d#13\",\"4317\":\"v-63f5528d#13/0\",\"4318\":\"v-63f5528d#13/1\",\"4319\":\"v-63f5528d#13/2\",\"4320\":\"v-63f5528d#13/3\",\"4321\":\"v-63f5528d#13/4\",\"4322\":\"v-63f5528d#13/5\",\"4323\":\"v-63f5528d#14\",\"4324\":\"v-63f5528d#14/0\",\"4325\":\"v-63f5528d#15\",\"4326\":\"v-63f5528d#15/0\",\"4327\":\"v-13d681f6\",\"4328\":\"v-13d681f6#1\",\"4329\":\"v-13d681f6#2\",\"4330\":\"v-13d681f6#2/0\",\"4331\":\"v-13d681f6#2/1\",\"4332\":\"v-13d681f6#2/2\",\"4333\":\"v-13d681f6#2/3\",\"4334\":\"v-13d681f6#2/4\",\"4335\":\"v-13d681f6#2/5\",\"4336\":\"v-13d681f6#3\",\"4337\":\"v-13d681f6#3/0\",\"4338\":\"v-13d681f6#3/1\",\"4339\":\"v-13d681f6#3/2\",\"4340\":\"v-13d681f6#3/3\",\"4341\":\"v-13d681f6#3/4\",\"4342\":\"v-13d681f6#3/5\",\"4343\":\"v-13d681f6#4\",\"4344\":\"v-13d681f6#4/0\",\"4345\":\"v-13d681f6#5\",\"4346\":\"v-13d681f6#5/0\",\"4347\":\"v-13d681f6#6\",\"4348\":\"v-13d681f6#6/0\",\"4349\":\"v-13d681f6#6/1\",\"4350\":\"v-13d681f6#6/2\",\"4351\":\"v-13d681f6#6/3\",\"4352\":\"v-13d681f6#6/4\",\"4353\":\"v-13d681f6#7\",\"4354\":\"v-13d681f6#7/0\",\"4355\":\"v-13d681f6#7/1\",\"4356\":\"v-13d681f6#7/2\",\"4357\":\"v-13d681f6#7/3\",\"4358\":\"v-13d681f6#8\",\"4359\":\"v-13d681f6#8/0\",\"4360\":\"v-13d681f6#8/1\",\"4361\":\"v-13d681f6#9\",\"4362\":\"v-13d681f6#9/0\",\"4363\":\"v-13d681f6#9/1\",\"4364\":\"v-13d681f6#10\",\"4365\":\"v-13d681f6#10/0\",\"4366\":\"v-13d681f6#10/1\",\"4367\":\"v-13d681f6#10/2\",\"4368\":\"v-13d681f6#10/3\",\"4369\":\"v-13d681f6#10/4\",\"4370\":\"v-13d681f6#11\",\"4371\":\"v-13d681f6#11/0\",\"4372\":\"v-13d681f6#11/1\",\"4373\":\"v-13d681f6#11/2\",\"4374\":\"v-13d681f6#11/3\",\"4375\":\"v-13d681f6#11/4\",\"4376\":\"v-13d681f6#11/5\",\"4377\":\"v-13d681f6#11/6\",\"4378\":\"v-13d681f6#11/7\",\"4379\":\"v-13d681f6#11/8\",\"4380\":\"v-13d681f6#11/9\",\"4381\":\"v-13d681f6#11/10\",\"4382\":\"v-13d681f6#11/11\",\"4383\":\"v-13d681f6#11/12\",\"4384\":\"v-13d681f6#11/13\",\"4385\":\"v-13d681f6#11/14\",\"4386\":\"v-13d681f6#12\",\"4387\":\"v-13d681f6#12/0\",\"4388\":\"v-13d681f6#12/1\",\"4389\":\"v-13d681f6#12/2\",\"4390\":\"v-13d681f6#12/3\",\"4391\":\"v-13d681f6#13\",\"4392\":\"v-13d681f6#13/0\",\"4393\":\"v-13d681f6#13/1\",\"4394\":\"v-13d681f6#14\",\"4395\":\"v-13d681f6#14/0\",\"4396\":\"v-13d681f6#14/1\",\"4397\":\"v-13d681f6#14/2\",\"4398\":\"v-13d681f6#14/3\",\"4399\":\"v-13d681f6#14/4\",\"4400\":\"v-13d681f6#14/5\",\"4401\":\"v-13d681f6#15\",\"4402\":\"v-13d681f6#15/0\",\"4403\":\"v-13d681f6#15/1\",\"4404\":\"v-13d681f6#16\",\"4405\":\"v-13d681f6#16/0\",\"4406\":\"v-13d681f6#16/1\",\"4407\":\"v-13d681f6#16/2\",\"4408\":\"v-13d681f6#17\",\"4409\":\"v-13d681f6#17/0\",\"4410\":\"v-13d681f6#17/1\",\"4411\":\"v-13d681f6#17/2\",\"4412\":\"v-13d681f6#18\",\"4413\":\"v-13d681f6#18/0\",\"4414\":\"v-13d681f6#19\",\"4415\":\"v-13d681f6#19/0\",\"4416\":\"v-13d681f6#20\",\"4417\":\"v-13d681f6#20/0\",\"4418\":\"v-13d681f6#20/1\",\"4419\":\"v-13d681f6#20/2\",\"4420\":\"v-13d681f6#20/3\",\"4421\":\"v-13d681f6#21\",\"4422\":\"v-13d681f6#21/0\",\"4423\":\"v-13d681f6#21/1\",\"4424\":\"v-13d681f6#21/2\",\"4425\":\"v-13d681f6#21/3\",\"4426\":\"v-13d681f6#21/4\",\"4427\":\"v-13d681f6#21/5\",\"4428\":\"v-13d681f6#21/6\",\"4429\":\"v-13d681f6#21/7\",\"4430\":\"v-13d681f6#22\",\"4431\":\"v-13d681f6#22/0\",\"4432\":\"v-13d681f6#22/1\",\"4433\":\"v-13d681f6#22/2\",\"4434\":\"v-13d681f6#22/3\",\"4435\":\"v-13d681f6#23\",\"4436\":\"v-13d681f6#23/0\",\"4437\":\"v-13d681f6#23/1\",\"4438\":\"v-13d681f6#23/2\",\"4439\":\"v-13d681f6#23/3\",\"4440\":\"v-13d681f6#23/4\",\"4441\":\"v-13d681f6#23/5\",\"4442\":\"v-13d681f6#24\",\"4443\":\"v-13d681f6#24/0\",\"4444\":\"v-13d681f6#25\",\"4445\":\"v-13d681f6#26\",\"4446\":\"v-13d681f6#26/0\",\"4447\":\"v-13d681f6#26/1\",\"4448\":\"v-13d681f6#26/2\",\"4449\":\"v-13d681f6#26/3\",\"4450\":\"v-13d681f6#26/4\",\"4451\":\"v-13d681f6#27\",\"4452\":\"v-13d681f6#27/0\",\"4453\":\"v-13d681f6#27/1\",\"4454\":\"v-13d681f6#28\",\"4455\":\"v-13d681f6#28/0\",\"4456\":\"v-13d681f6#28/1\",\"4457\":\"v-13d681f6#28/2\",\"4458\":\"v-13d681f6#28/3\",\"4459\":\"v-13d681f6#28/4\",\"4460\":\"v-13d681f6#28/5\",\"4461\":\"v-13d681f6#28/6\",\"4462\":\"v-13d681f6#28/7\",\"4463\":\"v-13d681f6#28/8\",\"4464\":\"v-13d681f6#28/9\",\"4465\":\"v-13d681f6#28/10\",\"4466\":\"v-13d681f6#28/11\",\"4467\":\"v-13d681f6#28/12\",\"4468\":\"v-13d681f6#29\",\"4469\":\"v-13d681f6#29/0\",\"4470\":\"v-13d681f6#29/1\",\"4471\":\"v-13d681f6#30\",\"4472\":\"v-13d681f6#31\",\"4473\":\"v-13d681f6#31/0\",\"4474\":\"v-13d681f6#32\",\"4475\":\"v-13d681f6#32/0\",\"4476\":\"v-13d681f6#33\",\"4477\":\"v-13d681f6#33/0\",\"4478\":\"v-13d681f6#33/1\",\"4479\":\"v-13d681f6#33/2\",\"4480\":\"v-13d681f6#34\",\"4481\":\"v-13d681f6#34/0\",\"4482\":\"v-13d681f6#34/1\",\"4483\":\"v-13d681f6#34/2\",\"4484\":\"v-13d681f6#34/3\",\"4485\":\"v-13d681f6#35\",\"4486\":\"v-13d681f6#35/0\",\"4487\":\"v-13d681f6#35/1\",\"4488\":\"v-13d681f6#35/2\",\"4489\":\"v-13d681f6#36\",\"4490\":\"v-13d681f6#36/0\",\"4491\":\"v-13d681f6#36/1\",\"4492\":\"v-13d681f6#37\",\"4493\":\"v-13d681f6#37/0\",\"4494\":\"v-13d681f6#37/1\",\"4495\":\"v-13d681f6#38\",\"4496\":\"v-13d681f6#38/0\",\"4497\":\"v-13d681f6#38/1\",\"4498\":\"v-13d681f6#38/2\",\"4499\":\"v-13d681f6#38/3\",\"4500\":\"v-13d681f6#38/4\",\"4501\":\"v-13d681f6#38/5\",\"4502\":\"v-13d681f6#38/6\",\"4503\":\"v-13d681f6#38/7\",\"4504\":\"v-13d681f6#38/8\",\"4505\":\"v-13d681f6#39\",\"4506\":\"v-13d681f6#40\",\"4507\":\"v-13d681f6#40/0\",\"4508\":\"v-13d681f6#40/1\",\"4509\":\"v-13d681f6#40/2\",\"4510\":\"v-13d681f6#40/3\",\"4511\":\"v-13d681f6#40/4\",\"4512\":\"v-13d681f6#40/5\",\"4513\":\"v-13d681f6#40/6\",\"4514\":\"v-13d681f6#40/7\",\"4515\":\"v-13d681f6#40/8\",\"4516\":\"v-13d681f6#40/9\",\"4517\":\"v-13d681f6#41\",\"4518\":\"v-13d681f6#41/0\",\"4519\":\"v-13d681f6#41/1\",\"4520\":\"v-13d681f6#41/2\",\"4521\":\"v-13d681f6#41/3\",\"4522\":\"v-13d681f6#42\",\"4523\":\"v-13d681f6#42/0\",\"4524\":\"v-13d681f6#42/1\",\"4525\":\"v-13d681f6#42/2\",\"4526\":\"v-13d681f6#42/3\",\"4527\":\"v-13d681f6#43\",\"4528\":\"v-13d681f6#44\",\"4529\":\"v-13d681f6#44/0\",\"4530\":\"v-13d681f6#44/1\",\"4531\":\"v-13d681f6#44/2\",\"4532\":\"v-13d681f6#45\",\"4533\":\"v-13d681f6#45/0\",\"4534\":\"v-13d681f6#45/1\",\"4535\":\"v-13d681f6#45/2\",\"4536\":\"v-13d681f6#45/3\",\"4537\":\"v-13d681f6#45/4\",\"4538\":\"v-13d681f6#45/5\",\"4539\":\"v-13d681f6#45/6\",\"4540\":\"v-13d681f6#45/7\",\"4541\":\"v-13d681f6#45/8\",\"4542\":\"v-13d681f6#46\",\"4543\":\"v-13d681f6#47\",\"4544\":\"v-13d681f6#47/0\",\"4545\":\"v-13d681f6#47/1\",\"4546\":\"v-13d681f6#47/2\",\"4547\":\"v-13d681f6#47/3\",\"4548\":\"v-13d681f6#48\",\"4549\":\"v-13d681f6#48/0\",\"4550\":\"v-13d681f6#48/1\",\"4551\":\"v-13d681f6#48/2\",\"4552\":\"v-13d681f6#48/3\",\"4553\":\"v-13d681f6#48/4\",\"4554\":\"v-13d681f6#48/5\",\"4555\":\"v-13d681f6#48/6\",\"4556\":\"v-13d681f6#48/7\",\"4557\":\"v-13d681f6#48/8\",\"4558\":\"v-13d681f6#48/9\",\"4559\":\"v-13d681f6#48/10\",\"4560\":\"v-13d681f6#48/11\",\"4561\":\"v-13d681f6#48/12\",\"4562\":\"v-13d681f6#48/13\",\"4563\":\"v-13d681f6#48/14\",\"4564\":\"v-13d681f6#48/15\",\"4565\":\"v-13d681f6#48/16\",\"4566\":\"v-13d681f6#48/17\",\"4567\":\"v-13d681f6#48/18\",\"4568\":\"v-13d681f6#48/19\",\"4569\":\"v-13d681f6#48/20\",\"4570\":\"v-13d681f6#48/21\",\"4571\":\"v-13d681f6#48/22\",\"4572\":\"v-13d681f6#48/23\",\"4573\":\"v-13d681f6#48/24\",\"4574\":\"v-13d681f6#48/25\",\"4575\":\"v-13d681f6#48/26\",\"4576\":\"v-13d681f6#48/27\",\"4577\":\"v-13d681f6#48/28\",\"4578\":\"v-13d681f6#48/29\",\"4579\":\"v-13d681f6#48/30\",\"4580\":\"v-13d681f6#48/31\",\"4581\":\"v-13d681f6#48/32\",\"4582\":\"v-13d681f6#48/33\",\"4583\":\"v-13d681f6#48/34\",\"4584\":\"v-13d681f6#48/35\",\"4585\":\"v-13d681f6#48/36\",\"4586\":\"v-13d681f6#48/37\",\"4587\":\"v-13d681f6#48/38\",\"4588\":\"v-13d681f6#48/39\",\"4589\":\"v-13d681f6#48/40\",\"4590\":\"v-13d681f6#48/41\",\"4591\":\"v-13d681f6#48/42\",\"4592\":\"v-13d681f6#48/43\",\"4593\":\"v-13d681f6#49\",\"4594\":\"v-13d681f6#49/0\",\"4595\":\"v-13d681f6#49/1\",\"4596\":\"v-13d681f6#49/2\",\"4597\":\"v-13d681f6#49/3\",\"4598\":\"v-13d681f6#49/4\",\"4599\":\"v-13d681f6#49/5\",\"4600\":\"v-13d681f6#49/6\",\"4601\":\"v-13d681f6#49/7\",\"4602\":\"v-13d681f6#50\",\"4603\":\"v-13d681f6#50/0\",\"4604\":\"v-13d681f6#50/1\",\"4605\":\"v-13d681f6#50/2\",\"4606\":\"v-13d681f6#50/3\",\"4607\":\"v-13d681f6#50/4\",\"4608\":\"v-13d681f6#50/5\",\"4609\":\"v-13d681f6#50/6\",\"4610\":\"v-13d681f6#50/7\",\"4611\":\"v-13d681f6#50/8\",\"4612\":\"v-13d681f6#50/9\",\"4613\":\"v-13d681f6#50/10\",\"4614\":\"v-13d681f6#50/11\",\"4615\":\"v-13d681f6#50/12\",\"4616\":\"v-709b2df2\",\"4617\":\"v-709b2df2#1\",\"4618\":\"v-709b2df2#2\",\"4619\":\"v-709b2df2#2/0\",\"4620\":\"v-709b2df2#2/1\",\"4621\":\"v-709b2df2#2/2\",\"4622\":\"v-709b2df2#2/3\",\"4623\":\"v-709b2df2#3\",\"4624\":\"v-709b2df2#3/0\",\"4625\":\"v-709b2df2#3/1\",\"4626\":\"v-709b2df2#3/2\",\"4627\":\"v-709b2df2#3/3\",\"4628\":\"v-709b2df2#3/4\",\"4629\":\"v-709b2df2#3/5\",\"4630\":\"v-709b2df2#3/6\",\"4631\":\"v-709b2df2#3/7\",\"4632\":\"v-709b2df2#3/8\",\"4633\":\"v-709b2df2#4\",\"4634\":\"v-54b55293\",\"4635\":\"v-54b55293#1\",\"4636\":\"v-54b55293#2\",\"4637\":\"v-54b55293#2/0\",\"4638\":\"v-54b55293#3\",\"4639\":\"v-54b55293#3/0\",\"4640\":\"v-54b55293#3/1\",\"4641\":\"v-54b55293#3/2\",\"4642\":\"v-54b55293#3/3\",\"4643\":\"v-54b55293#3/4\",\"4644\":\"v-54b55293#3/5\",\"4645\":\"v-54b55293#3/6\",\"4646\":\"v-54b55293#3/7\",\"4647\":\"v-54b55293#3/8\",\"4648\":\"v-54b55293#3/9\",\"4649\":\"v-54b55293#3/10\",\"4650\":\"v-54b55293#3/11\",\"4651\":\"v-54b55293#3/12\",\"4652\":\"v-54b55293#3/13\",\"4653\":\"v-54b55293#3/14\",\"4654\":\"v-54b55293#3/15\",\"4655\":\"v-54b55293#3/16\",\"4656\":\"v-54b55293#3/17\",\"4657\":\"v-54b55293#3/18\",\"4658\":\"v-54b55293#3/19\",\"4659\":\"v-54b55293#3/20\",\"4660\":\"v-54b55293#3/21\",\"4661\":\"v-54b55293#4\",\"4662\":\"v-54b55293#4/0\",\"4663\":\"v-54b55293#4/1\",\"4664\":\"v-54b55293#4/2\",\"4665\":\"v-54b55293#4/3\",\"4666\":\"v-54b55293#4/4\",\"4667\":\"v-54b55293#4/5\",\"4668\":\"v-54b55293#4/6\",\"4669\":\"v-54b55293#4/7\",\"4670\":\"v-54b55293#4/8\",\"4671\":\"v-54b55293#4/9\",\"4672\":\"v-54b55293#4/10\",\"4673\":\"v-54b55293#4/11\",\"4674\":\"v-54b55293#4/12\",\"4675\":\"v-54b55293#4/13\",\"4676\":\"v-54b55293#4/14\",\"4677\":\"v-54b55293#4/15\",\"4678\":\"v-54b55293#4/16\",\"4679\":\"v-54b55293#4/17\",\"4680\":\"v-54b55293#4/18\",\"4681\":\"v-54b55293#4/19\",\"4682\":\"v-54b55293#4/20\",\"4683\":\"v-54b55293#4/21\",\"4684\":\"v-54b55293#4/22\",\"4685\":\"v-54b55293#4/23\",\"4686\":\"v-54b55293#4/24\",\"4687\":\"v-54b55293#4/25\",\"4688\":\"v-54b55293#4/26\",\"4689\":\"v-54b55293#4/27\",\"4690\":\"v-54b55293#4/28\",\"4691\":\"v-54b55293#5\",\"4692\":\"v-54b55293#5/0\",\"4693\":\"v-54b55293#5/1\",\"4694\":\"v-54b55293#5/2\",\"4695\":\"v-54b55293#5/3\",\"4696\":\"v-54b55293#5/4\",\"4697\":\"v-4397b9d8\",\"4698\":\"v-4397b9d8#1\",\"4699\":\"v-4397b9d8#2\",\"4700\":\"v-4397b9d8#2/0\",\"4701\":\"v-4397b9d8#2/1\",\"4702\":\"v-4397b9d8#2/2\",\"4703\":\"v-4397b9d8#2/3\",\"4704\":\"v-4397b9d8#2/4\",\"4705\":\"v-4397b9d8#3\",\"4706\":\"v-4397b9d8#4\",\"4707\":\"v-4397b9d8#4/0\",\"4708\":\"v-4397b9d8#5\",\"4709\":\"v-4397b9d8#5/0\",\"4710\":\"v-4397b9d8#5/1\",\"4711\":\"v-4397b9d8#5/2\",\"4712\":\"v-4397b9d8#6\",\"4713\":\"v-4397b9d8#6/0\",\"4714\":\"v-4397b9d8#7\",\"4715\":\"v-4397b9d8#7/0\",\"4716\":\"v-4397b9d8#7/1\",\"4717\":\"v-4397b9d8#7/2\",\"4718\":\"v-4397b9d8#7/3\",\"4719\":\"v-4397b9d8#7/4\",\"4720\":\"v-4397b9d8#8\",\"4721\":\"v-4397b9d8#8/0\",\"4722\":\"v-4397b9d8#8/1\",\"4723\":\"v-4397b9d8#8/2\",\"4724\":\"v-4397b9d8#8/3\",\"4725\":\"v-4397b9d8#8/4\",\"4726\":\"v-4397b9d8#9\",\"4727\":\"v-4397b9d8#9/0\",\"4728\":\"v-4397b9d8#9/1\",\"4729\":\"v-4397b9d8#9/2\",\"4730\":\"v-4397b9d8#9/3\",\"4731\":\"v-4397b9d8#9/4\",\"4732\":\"v-4397b9d8#9/5\",\"4733\":\"v-4397b9d8#9/6\",\"4734\":\"v-4397b9d8#9/7\",\"4735\":\"v-4397b9d8#9/8\",\"4736\":\"v-4397b9d8#9/9\",\"4737\":\"v-4397b9d8#9/10\",\"4738\":\"v-4397b9d8#9/11\",\"4739\":\"v-4397b9d8#9/12\",\"4740\":\"v-4397b9d8#9/13\",\"4741\":\"v-4397b9d8#9/14\",\"4742\":\"v-4397b9d8#9/15\",\"4743\":\"v-4397b9d8#9/16\",\"4744\":\"v-4397b9d8#9/17\",\"4745\":\"v-4397b9d8#9/18\",\"4746\":\"v-4397b9d8#9/19\",\"4747\":\"v-4397b9d8#9/20\",\"4748\":\"v-4397b9d8#10\",\"4749\":\"v-4397b9d8#11\",\"4750\":\"v-4397b9d8#11/0\",\"4751\":\"v-4397b9d8#11/1\",\"4752\":\"v-4397b9d8#11/2\",\"4753\":\"v-4397b9d8#11/3\",\"4754\":\"v-4397b9d8#11/4\",\"4755\":\"v-4397b9d8#11/5\",\"4756\":\"v-4397b9d8#11/6\",\"4757\":\"v-4397b9d8#11/7\",\"4758\":\"v-4397b9d8#12\",\"4759\":\"v-4397b9d8#12/0\",\"4760\":\"v-4397b9d8#12/1\",\"4761\":\"v-4397b9d8#12/2\",\"4762\":\"v-4397b9d8#12/3\",\"4763\":\"v-4397b9d8#12/4\",\"4764\":\"v-4397b9d8#12/5\",\"4765\":\"v-4397b9d8#12/6\",\"4766\":\"v-6e0208bc\",\"4767\":\"v-6e0208bc#1\",\"4768\":\"v-6e0208bc#2\",\"4769\":\"v-6e0208bc#3\",\"4770\":\"v-6e0208bc#3/0\",\"4771\":\"v-6e0208bc#3/1\",\"4772\":\"v-6e0208bc#3/2\",\"4773\":\"v-6e0208bc#3/3\",\"4774\":\"v-6e0208bc#3/4\",\"4775\":\"v-6e0208bc#3/5\",\"4776\":\"v-6e0208bc#4\",\"4777\":\"v-6e0208bc#5\",\"4778\":\"v-6e0208bc#5/0\",\"4779\":\"v-6e0208bc#5/1\",\"4780\":\"v-6e0208bc#5/2\",\"4781\":\"v-6e0208bc#5/3\",\"4782\":\"v-6e0208bc#5/4\",\"4783\":\"v-6e0208bc#5/5\",\"4784\":\"v-6e0208bc#5/6\",\"4785\":\"v-6e0208bc#5/7\",\"4786\":\"v-6e0208bc#5/8\",\"4787\":\"v-6e0208bc#5/9\",\"4788\":\"v-6e0208bc#5/10\",\"4789\":\"v-6e0208bc#5/11\",\"4790\":\"v-6e0208bc#6\",\"4791\":\"v-6e0208bc#6/0\",\"4792\":\"v-6e0208bc#6/1\",\"4793\":\"v-6e0208bc#6/2\",\"4794\":\"v-6e0208bc#6/3\",\"4795\":\"v-6e0208bc#6/4\",\"4796\":\"v-6e0208bc#6/5\",\"4797\":\"v-6e0208bc#6/6\",\"4798\":\"v-6e0208bc#7\",\"4799\":\"v-6e0208bc#8\",\"4800\":\"v-6e0208bc#8/0\",\"4801\":\"v-6e0208bc#8/1\",\"4802\":\"v-6e0208bc#8/2\",\"4803\":\"v-6e0208bc#8/3\",\"4804\":\"v-6e0208bc#9\",\"4805\":\"v-6e0208bc#9/0\",\"4806\":\"v-6e0208bc#9/1\",\"4807\":\"v-6e0208bc#9/2\",\"4808\":\"v-6e0208bc#9/3\",\"4809\":\"v-6e0208bc#9/4\",\"4810\":\"v-6e0208bc#9/5\",\"4811\":\"v-6e0208bc#9/6\",\"4812\":\"v-6e0208bc#9/7\",\"4813\":\"v-6e0208bc#9/8\",\"4814\":\"v-6e0208bc#9/9\",\"4815\":\"v-6e0208bc#9/10\",\"4816\":\"v-6e0208bc#9/11\",\"4817\":\"v-6e0208bc#9/12\",\"4818\":\"v-6e0208bc#9/13\",\"4819\":\"v-6e0208bc#9/14\",\"4820\":\"v-6e0208bc#9/15\",\"4821\":\"v-6e0208bc#9/16\",\"4822\":\"v-6e0208bc#9/17\",\"4823\":\"v-6e0208bc#9/18\",\"4824\":\"v-6e0208bc#9/19\",\"4825\":\"v-6e0208bc#10\",\"4826\":\"v-6e0208bc#10/0\",\"4827\":\"v-6e0208bc#10/1\",\"4828\":\"v-6e0208bc#10/2\",\"4829\":\"v-6e0208bc#10/3\",\"4830\":\"v-6e0208bc#11\",\"4831\":\"v-6e0208bc#11/0\",\"4832\":\"v-6e0208bc#11/1\",\"4833\":\"v-6e0208bc#11/2\",\"4834\":\"v-6e0208bc#11/3\",\"4835\":\"v-6e0208bc#11/4\",\"4836\":\"v-6e0208bc#11/5\",\"4837\":\"v-6e0208bc#11/6\",\"4838\":\"v-6e0208bc#11/7\",\"4839\":\"v-6e0208bc#11/8\",\"4840\":\"v-6e0208bc#11/9\",\"4841\":\"v-6e0208bc#12\",\"4842\":\"v-6e0208bc#12/0\",\"4843\":\"v-6e0208bc#12/1\",\"4844\":\"v-6e0208bc#12/2\",\"4845\":\"v-6e0208bc#12/3\",\"4846\":\"v-6e0208bc#12/4\",\"4847\":\"v-6e0208bc#12/5\",\"4848\":\"v-6e0208bc#12/6\",\"4849\":\"v-6e0208bc#12/7\",\"4850\":\"v-6e0208bc#12/8\",\"4851\":\"v-6e0208bc#12/9\",\"4852\":\"v-6e0208bc#12/10\",\"4853\":\"v-6e0208bc#12/11\",\"4854\":\"v-6e0208bc#12/12\",\"4855\":\"v-6e0208bc#12/13\",\"4856\":\"v-6e0208bc#12/14\",\"4857\":\"v-6e0208bc#13\",\"4858\":\"v-6e0208bc#13/0\",\"4859\":\"v-6e0208bc#13/1\",\"4860\":\"v-6e0208bc#13/2\",\"4861\":\"v-6e0208bc#14\",\"4862\":\"v-6e0208bc#14/0\",\"4863\":\"v-6e0208bc#14/1\",\"4864\":\"v-6e0208bc#14/2\",\"4865\":\"v-6e0208bc#14/3\",\"4866\":\"v-6e0208bc#14/4\",\"4867\":\"v-6e0208bc#14/5\",\"4868\":\"v-6e0208bc#14/6\",\"4869\":\"v-6e0208bc#14/7\",\"4870\":\"v-6e0208bc#14/8\",\"4871\":\"v-6e0208bc#14/9\",\"4872\":\"v-6e0208bc#14/10\",\"4873\":\"v-6e0208bc#14/11\",\"4874\":\"v-6e0208bc#14/12\",\"4875\":\"v-6e0208bc#14/13\",\"4876\":\"v-6e0208bc#14/14\",\"4877\":\"v-6e0208bc#14/15\",\"4878\":\"v-6e0208bc#14/16\",\"4879\":\"v-6e0208bc#14/17\",\"4880\":\"v-6e0208bc#14/18\",\"4881\":\"v-6e0208bc#14/19\",\"4882\":\"v-6e0208bc#15\",\"4883\":\"v-6e0208bc#15/0\",\"4884\":\"v-6e0208bc#15/1\",\"4885\":\"v-6e0208bc#15/2\",\"4886\":\"v-6e0208bc#15/3\",\"4887\":\"v-6e0208bc#15/4\",\"4888\":\"v-6e0208bc#15/5\",\"4889\":\"v-6e0208bc#15/6\",\"4890\":\"v-6e0208bc#15/7\",\"4891\":\"v-6e0208bc#15/8\",\"4892\":\"v-6e0208bc#15/9\",\"4893\":\"v-6e0208bc#15/10\",\"4894\":\"v-6e0208bc#15/11\",\"4895\":\"v-6e0208bc#15/12\",\"4896\":\"v-6e0208bc#15/13\",\"4897\":\"v-6e0208bc#15/14\",\"4898\":\"v-6e0208bc#15/15\",\"4899\":\"v-6e0208bc#15/16\",\"4900\":\"v-6e0208bc#15/17\",\"4901\":\"v-6e0208bc#15/18\",\"4902\":\"v-6e0208bc#15/19\",\"4903\":\"v-6e0208bc#16\",\"4904\":\"v-6e0208bc#16/0\",\"4905\":\"v-6e0208bc#16/1\",\"4906\":\"v-6e0208bc#16/2\",\"4907\":\"v-6e0208bc#16/3\",\"4908\":\"v-6e0208bc#16/4\",\"4909\":\"v-6e0208bc#16/5\",\"4910\":\"v-6e0208bc#16/6\",\"4911\":\"v-6e0208bc#16/7\",\"4912\":\"v-6e0208bc#16/8\",\"4913\":\"v-6e0208bc#16/9\",\"4914\":\"v-6e0208bc#16/10\",\"4915\":\"v-6e0208bc#16/11\",\"4916\":\"v-6e0208bc#16/12\",\"4917\":\"v-6e0208bc#16/13\",\"4918\":\"v-6e0208bc#16/14\",\"4919\":\"v-6e0208bc#16/15\",\"4920\":\"v-6e0208bc#16/16\",\"4921\":\"v-6e0208bc#17\",\"4922\":\"v-6e0208bc#17/0\",\"4923\":\"v-6e0208bc#17/1\",\"4924\":\"v-6e0208bc#17/2\",\"4925\":\"v-6e0208bc#17/3\",\"4926\":\"v-6e0208bc#17/4\",\"4927\":\"v-6e0208bc#17/5\",\"4928\":\"v-6e0208bc#17/6\",\"4929\":\"v-6e0208bc#17/7\",\"4930\":\"v-6e0208bc#17/8\",\"4931\":\"v-6e0208bc#17/9\",\"4932\":\"v-6e0208bc#17/10\",\"4933\":\"v-6e0208bc#17/11\",\"4934\":\"v-4115de74\",\"4935\":\"v-4115de74#1\",\"4936\":\"v-4115de74#2\",\"4937\":\"v-4115de74#3\",\"4938\":\"v-4115de74#3/0\",\"4939\":\"v-4115de74#3/1\",\"4940\":\"v-4115de74#3/2\",\"4941\":\"v-4115de74#3/3\",\"4942\":\"v-4115de74#3/4\",\"4943\":\"v-4115de74#3/5\",\"4944\":\"v-4115de74#3/6\",\"4945\":\"v-4115de74#3/7\",\"4946\":\"v-4115de74#3/8\",\"4947\":\"v-4115de74#3/9\",\"4948\":\"v-4115de74#3/10\",\"4949\":\"v-4115de74#3/11\",\"4950\":\"v-4115de74#3/12\",\"4951\":\"v-4115de74#3/13\",\"4952\":\"v-4115de74#3/14\",\"4953\":\"v-4115de74#3/15\",\"4954\":\"v-4115de74#3/16\",\"4955\":\"v-4115de74#3/17\",\"4956\":\"v-4115de74#3/18\",\"4957\":\"v-4115de74#3/19\",\"4958\":\"v-4115de74#3/20\",\"4959\":\"v-4115de74#3/21\",\"4960\":\"v-4115de74#3/22\",\"4961\":\"v-4115de74#4\",\"4962\":\"v-4115de74#4/0\",\"4963\":\"v-4115de74#5\",\"4964\":\"v-4115de74#5/0\",\"4965\":\"v-4115de74#5/1\",\"4966\":\"v-4115de74#5/2\",\"4967\":\"v-4115de74#5/3\",\"4968\":\"v-4115de74#5/4\",\"4969\":\"v-4115de74#5/5\",\"4970\":\"v-4115de74#5/6\",\"4971\":\"v-4115de74#5/7\",\"4972\":\"v-4115de74#5/8\",\"4973\":\"v-4115de74#5/9\",\"4974\":\"v-4115de74#5/10\",\"4975\":\"v-4115de74#5/11\",\"4976\":\"v-4115de74#5/12\",\"4977\":\"v-4115de74#5/13\",\"4978\":\"v-4115de74#6\",\"4979\":\"v-4115de74#6/0\",\"4980\":\"v-4115de74#6/1\",\"4981\":\"v-4115de74#6/2\",\"4982\":\"v-4115de74#6/3\",\"4983\":\"v-4115de74#6/4\",\"4984\":\"v-4115de74#6/5\",\"4985\":\"v-4115de74#6/6\",\"4986\":\"v-4115de74#6/7\",\"4987\":\"v-4115de74#6/8\",\"4988\":\"v-4115de74#6/9\",\"4989\":\"v-4115de74#6/10\",\"4990\":\"v-4115de74#6/11\",\"4991\":\"v-4115de74#6/12\",\"4992\":\"v-4115de74#6/13\",\"4993\":\"v-4115de74#6/14\",\"4994\":\"v-4115de74#7\",\"4995\":\"v-4115de74#7/0\",\"4996\":\"v-4115de74#7/1\",\"4997\":\"v-4115de74#7/2\",\"4998\":\"v-4115de74#7/3\",\"4999\":\"v-4115de74#8\",\"5000\":\"v-4115de74#8/0\",\"5001\":\"v-4115de74#8/1\",\"5002\":\"v-4115de74#8/2\",\"5003\":\"v-4115de74#8/3\",\"5004\":\"v-4115de74#8/4\",\"5005\":\"v-4115de74#8/5\",\"5006\":\"v-4115de74#8/6\",\"5007\":\"v-4115de74#8/7\",\"5008\":\"v-4115de74#9\",\"5009\":\"v-4115de74#9/0\",\"5010\":\"v-4115de74#9/1\",\"5011\":\"v-4115de74#9/2\",\"5012\":\"v-4115de74#9/3\",\"5013\":\"v-4115de74#9/4\",\"5014\":\"v-4115de74#9/5\",\"5015\":\"v-4115de74#9/6\",\"5016\":\"v-4115de74#9/7\",\"5017\":\"v-4115de74#10\",\"5018\":\"v-4115de74#10/0\",\"5019\":\"v-4115de74#10/1\",\"5020\":\"v-4115de74#10/2\",\"5021\":\"v-4115de74#10/3\",\"5022\":\"v-4115de74#10/4\",\"5023\":\"v-4115de74#10/5\",\"5024\":\"v-4115de74#10/6\",\"5025\":\"v-4115de74#11\",\"5026\":\"v-4115de74#11/0\",\"5027\":\"v-4115de74#11/1\",\"5028\":\"v-4115de74#11/2\",\"5029\":\"v-4115de74#12\",\"5030\":\"v-4115de74#12/0\",\"5031\":\"v-4115de74#12/1\",\"5032\":\"v-4115de74#12/2\",\"5033\":\"v-4115de74#12/3\",\"5034\":\"v-4115de74#12/4\",\"5035\":\"v-4115de74#13\",\"5036\":\"v-4115de74#13/0\",\"5037\":\"v-4115de74#13/1\",\"5038\":\"v-4115de74#13/2\",\"5039\":\"v-4115de74#13/3\",\"5040\":\"v-4115de74#13/4\",\"5041\":\"v-4115de74#13/5\",\"5042\":\"v-4115de74#13/6\",\"5043\":\"v-4115de74#13/7\",\"5044\":\"v-4115de74#13/8\",\"5045\":\"v-4115de74#13/9\",\"5046\":\"v-4115de74#13/10\",\"5047\":\"v-4115de74#13/11\",\"5048\":\"v-4115de74#13/12\",\"5049\":\"v-4115de74#13/13\",\"5050\":\"v-4115de74#13/14\",\"5051\":\"v-4115de74#13/15\",\"5052\":\"v-4115de74#13/16\",\"5053\":\"v-4115de74#13/17\",\"5054\":\"v-4115de74#13/18\",\"5055\":\"v-4115de74#13/19\",\"5056\":\"v-4115de74#13/20\",\"5057\":\"v-4115de74#13/21\",\"5058\":\"v-4115de74#13/22\",\"5059\":\"v-4115de74#13/23\",\"5060\":\"v-4115de74#13/24\",\"5061\":\"v-4115de74#13/25\",\"5062\":\"v-4115de74#14\",\"5063\":\"v-4115de74#14/0\",\"5064\":\"v-4115de74#14/1\",\"5065\":\"v-4115de74#15\",\"5066\":\"v-4115de74#15/0\",\"5067\":\"v-4115de74#15/1\",\"5068\":\"v-4115de74#15/2\",\"5069\":\"v-4115de74#15/3\",\"5070\":\"v-4115de74#15/4\",\"5071\":\"v-4115de74#15/5\",\"5072\":\"v-4115de74#15/6\",\"5073\":\"v-4115de74#15/7\",\"5074\":\"v-4115de74#15/8\",\"5075\":\"v-4115de74#15/9\",\"5076\":\"v-4115de74#15/10\",\"5077\":\"v-4115de74#15/11\",\"5078\":\"v-4115de74#15/12\",\"5079\":\"v-4115de74#15/13\",\"5080\":\"v-4115de74#15/14\",\"5081\":\"v-4115de74#15/15\",\"5082\":\"v-4115de74#15/16\",\"5083\":\"v-4115de74#15/17\",\"5084\":\"v-4115de74#16\",\"5085\":\"v-4115de74#16/0\",\"5086\":\"v-4115de74#16/1\",\"5087\":\"v-4115de74#16/2\",\"5088\":\"v-4115de74#16/3\",\"5089\":\"v-4115de74#16/4\",\"5090\":\"v-4115de74#17\",\"5091\":\"v-4115de74#17/0\",\"5092\":\"v-4115de74#17/1\",\"5093\":\"v-4115de74#17/2\",\"5094\":\"v-4115de74#17/3\",\"5095\":\"v-4115de74#17/4\",\"5096\":\"v-4115de74#17/5\",\"5097\":\"v-4115de74#17/6\",\"5098\":\"v-4115de74#17/7\",\"5099\":\"v-4115de74#17/8\",\"5100\":\"v-4115de74#18\",\"5101\":\"v-4115de74#18/0\",\"5102\":\"v-4115de74#18/1\",\"5103\":\"v-4115de74#18/2\",\"5104\":\"v-4115de74#18/3\",\"5105\":\"v-4115de74#18/4\",\"5106\":\"v-4115de74#18/5\",\"5107\":\"v-4115de74#18/6\",\"5108\":\"v-4115de74#18/7\",\"5109\":\"v-4115de74#18/8\",\"5110\":\"v-4115de74#18/9\",\"5111\":\"v-4115de74#18/10\",\"5112\":\"v-4115de74#18/11\",\"5113\":\"v-4115de74#18/12\",\"5114\":\"v-4115de74#18/13\",\"5115\":\"v-4115de74#18/14\",\"5116\":\"v-4115de74#18/15\",\"5117\":\"v-4115de74#18/16\",\"5118\":\"v-4115de74#19\",\"5119\":\"v-4115de74#19/0\",\"5120\":\"v-4115de74#19/1\",\"5121\":\"v-4115de74#19/2\",\"5122\":\"v-4115de74#19/3\",\"5123\":\"v-4115de74#19/4\",\"5124\":\"v-4115de74#19/5\",\"5125\":\"v-4115de74#19/6\",\"5126\":\"v-4115de74#19/7\",\"5127\":\"v-4115de74#19/8\",\"5128\":\"v-4115de74#19/9\",\"5129\":\"v-4115de74#19/10\",\"5130\":\"v-4115de74#19/11\",\"5131\":\"v-4115de74#20\",\"5132\":\"v-4115de74#20/0\",\"5133\":\"v-4115de74#20/1\",\"5134\":\"v-4115de74#20/2\",\"5135\":\"v-4115de74#20/3\",\"5136\":\"v-4115de74#20/4\",\"5137\":\"v-4115de74#20/5\",\"5138\":\"v-4115de74#20/6\",\"5139\":\"v-4115de74#20/7\",\"5140\":\"v-4115de74#20/8\",\"5141\":\"v-4115de74#20/9\",\"5142\":\"v-4115de74#20/10\",\"5143\":\"v-4115de74#20/11\",\"5144\":\"v-4115de74#20/12\",\"5145\":\"v-4115de74#20/13\",\"5146\":\"v-4115de74#20/14\",\"5147\":\"v-4115de74#20/15\",\"5148\":\"v-4115de74#20/16\",\"5149\":\"v-4115de74#21\",\"5150\":\"v-4115de74#21/0\",\"5151\":\"v-4115de74#21/1\",\"5152\":\"v-4115de74#21/2\",\"5153\":\"v-4115de74#21/3\",\"5154\":\"v-4115de74#21/4\",\"5155\":\"v-4115de74#21/5\",\"5156\":\"v-4115de74#21/6\",\"5157\":\"v-4115de74#21/7\",\"5158\":\"v-4115de74#21/8\",\"5159\":\"v-4115de74#21/9\",\"5160\":\"v-4115de74#22\",\"5161\":\"v-4115de74#22/0\",\"5162\":\"v-4115de74#22/1\",\"5163\":\"v-4115de74#22/2\",\"5164\":\"v-4115de74#23\",\"5165\":\"v-4115de74#23/0\",\"5166\":\"v-4115de74#23/1\",\"5167\":\"v-4115de74#23/2\",\"5168\":\"v-4115de74#24\",\"5169\":\"v-4115de74#24/0\",\"5170\":\"v-4115de74#24/1\",\"5171\":\"v-4115de74#24/2\",\"5172\":\"v-4115de74#24/3\",\"5173\":\"v-4115de74#24/4\",\"5174\":\"v-4115de74#25\",\"5175\":\"v-4115de74#25/0\",\"5176\":\"v-4115de74#25/1\",\"5177\":\"v-4115de74#25/2\",\"5178\":\"v-4115de74#25/3\",\"5179\":\"v-4115de74#25/4\",\"5180\":\"v-4115de74#26\",\"5181\":\"v-4115de74#26/0\",\"5182\":\"v-4115de74#26/1\",\"5183\":\"v-4115de74#26/2\",\"5184\":\"v-4115de74#26/3\",\"5185\":\"v-4115de74#26/4\",\"5186\":\"v-4115de74#26/5\",\"5187\":\"v-4115de74#26/6\",\"5188\":\"v-4115de74#26/7\",\"5189\":\"v-4115de74#26/8\",\"5190\":\"v-4115de74#26/9\",\"5191\":\"v-4115de74#26/10\",\"5192\":\"v-4115de74#26/11\",\"5193\":\"v-4115de74#27\",\"5194\":\"v-4115de74#27/0\",\"5195\":\"v-4115de74#27/1\",\"5196\":\"v-4115de74#27/2\",\"5197\":\"v-4115de74#27/3\",\"5198\":\"v-4115de74#28\",\"5199\":\"v-4115de74#28/0\",\"5200\":\"v-4115de74#28/1\",\"5201\":\"v-4115de74#28/2\",\"5202\":\"v-4115de74#29\",\"5203\":\"v-4115de74#29/0\",\"5204\":\"v-4115de74#29/1\",\"5205\":\"v-4115de74#29/2\",\"5206\":\"v-4115de74#29/3\",\"5207\":\"v-4115de74#29/4\",\"5208\":\"v-4115de74#30\",\"5209\":\"v-4115de74#30/0\",\"5210\":\"v-4115de74#30/1\",\"5211\":\"v-4115de74#30/2\",\"5212\":\"v-4115de74#30/3\",\"5213\":\"v-4115de74#30/4\",\"5214\":\"v-4115de74#30/5\",\"5215\":\"v-4115de74#30/6\",\"5216\":\"v-4115de74#30/7\",\"5217\":\"v-4115de74#30/8\",\"5218\":\"v-4115de74#30/9\",\"5219\":\"v-4115de74#30/10\",\"5220\":\"v-4115de74#30/11\",\"5221\":\"v-4115de74#30/12\",\"5222\":\"v-4115de74#30/13\",\"5223\":\"v-4115de74#30/14\",\"5224\":\"v-4115de74#30/15\",\"5225\":\"v-4115de74#30/16\",\"5226\":\"v-4115de74#30/17\",\"5227\":\"v-4115de74#30/18\",\"5228\":\"v-4115de74#30/19\",\"5229\":\"v-4115de74#30/20\",\"5230\":\"v-4115de74#30/21\",\"5231\":\"v-4115de74#31\",\"5232\":\"v-4115de74#31/0\",\"5233\":\"v-4115de74#31/1\",\"5234\":\"v-4115de74#31/2\",\"5235\":\"v-4115de74#31/3\",\"5236\":\"v-4115de74#31/4\",\"5237\":\"v-4115de74#31/5\",\"5238\":\"v-4115de74#31/6\",\"5239\":\"v-4115de74#31/7\",\"5240\":\"v-4115de74#31/8\",\"5241\":\"v-4115de74#31/9\",\"5242\":\"v-4115de74#31/10\",\"5243\":\"v-4115de74#31/11\",\"5244\":\"v-4115de74#31/12\",\"5245\":\"v-4115de74#31/13\",\"5246\":\"v-4115de74#32\",\"5247\":\"v-4115de74#32/0\",\"5248\":\"v-4115de74#32/1\",\"5249\":\"v-4115de74#32/2\",\"5250\":\"v-4115de74#32/3\",\"5251\":\"v-4115de74#32/4\",\"5252\":\"v-4115de74#33\",\"5253\":\"v-4115de74#33/0\",\"5254\":\"v-4115de74#33/1\",\"5255\":\"v-4115de74#33/2\",\"5256\":\"v-4115de74#34\",\"5257\":\"v-4115de74#35\",\"5258\":\"v-4115de74#35/0\",\"5259\":\"v-4115de74#36\",\"5260\":\"v-4115de74#36/0\",\"5261\":\"v-4115de74#36/1\",\"5262\":\"v-4115de74#37\",\"5263\":\"v-4115de74#37/0\",\"5264\":\"v-4115de74#38\",\"5265\":\"v-4115de74#38/0\",\"5266\":\"v-4115de74#38/1\",\"5267\":\"v-4115de74#38/2\",\"5268\":\"v-4115de74#38/3\",\"5269\":\"v-4115de74#39\",\"5270\":\"v-4115de74#39/0\",\"5271\":\"v-4115de74#40\",\"5272\":\"v-4115de74#40/0\",\"5273\":\"v-4115de74#41\",\"5274\":\"v-4115de74#41/0\",\"5275\":\"v-4115de74#42\",\"5276\":\"v-4115de74#43\",\"5277\":\"v-4115de74#43/0\",\"5278\":\"v-4115de74#43/1\",\"5279\":\"v-4115de74#43/2\",\"5280\":\"v-4115de74#44\",\"5281\":\"v-4115de74#44/0\",\"5282\":\"v-4115de74#44/1\",\"5283\":\"v-e17a1dca\",\"5284\":\"v-e17a1dca#1\",\"5285\":\"v-e17a1dca#2\",\"5286\":\"v-e17a1dca#2/0\",\"5287\":\"v-e17a1dca#2/1\",\"5288\":\"v-e17a1dca#2/2\",\"5289\":\"v-e17a1dca#2/3\",\"5290\":\"v-e17a1dca#3\",\"5291\":\"v-e17a1dca#3/0\",\"5292\":\"v-e17a1dca#3/1\",\"5293\":\"v-e17a1dca#4\",\"5294\":\"v-e17a1dca#5\",\"5295\":\"v-e17a1dca#6\",\"5296\":\"v-e17a1dca#6/0\",\"5297\":\"v-e17a1dca#6/1\",\"5298\":\"v-e17a1dca#6/2\",\"5299\":\"v-e17a1dca#6/3\",\"5300\":\"v-e17a1dca#6/4\",\"5301\":\"v-e17a1dca#7\",\"5302\":\"v-e17a1dca#7/0\",\"5303\":\"v-e17a1dca#7/1\",\"5304\":\"v-e17a1dca#7/2\",\"5305\":\"v-e17a1dca#8\",\"5306\":\"v-e17a1dca#9\",\"5307\":\"v-e17a1dca#9/0\",\"5308\":\"v-e17a1dca#9/1\",\"5309\":\"v-e17a1dca#9/2\",\"5310\":\"v-e17a1dca#9/3\",\"5311\":\"v-e17a1dca#10\",\"5312\":\"v-e17a1dca#10/0\",\"5313\":\"v-e17a1dca#11\",\"5314\":\"v-e17a1dca#12\",\"5315\":\"v-e17a1dca#12/0\",\"5316\":\"v-e17a1dca#12/1\",\"5317\":\"v-e17a1dca#12/2\",\"5318\":\"v-e17a1dca#13\",\"5319\":\"v-e17a1dca#13/0\",\"5320\":\"v-e17a1dca#14\",\"5321\":\"v-e17a1dca#15\",\"5322\":\"v-e17a1dca#15/0\",\"5323\":\"v-e17a1dca#15/1\",\"5324\":\"v-e17a1dca#15/2\",\"5325\":\"v-e17a1dca#15/3\",\"5326\":\"v-e17a1dca#16\",\"5327\":\"v-e17a1dca#16/0\",\"5328\":\"v-e17a1dca#17\",\"5329\":\"v-e17a1dca#18\",\"5330\":\"v-e17a1dca#18/0\",\"5331\":\"v-e17a1dca#18/1\",\"5332\":\"v-e17a1dca#18/2\",\"5333\":\"v-e17a1dca#18/3\",\"5334\":\"v-e17a1dca#19\",\"5335\":\"v-e17a1dca#19/0\",\"5336\":\"v-e17a1dca#20\",\"5337\":\"v-e17a1dca#20/0\",\"5338\":\"v-e17a1dca#20/1\",\"5339\":\"v-e17a1dca#20/2\",\"5340\":\"v-e17a1dca#20/3\",\"5341\":\"v-e17a1dca#21\",\"5342\":\"v-e17a1dca#21/0\",\"5343\":\"v-e17a1dca#21/1\",\"5344\":\"v-e17a1dca#21/2\",\"5345\":\"v-e17a1dca#22\",\"5346\":\"v-e17a1dca#22/3\",\"5347\":\"v-e17a1dca#22/4\",\"5348\":\"v-e17a1dca#22/5\",\"5349\":\"v-e17a1dca#23\",\"5350\":\"v-e17a1dca#23/0\",\"5351\":\"v-e17a1dca#23/1\",\"5352\":\"v-e17a1dca#23/2\",\"5353\":\"v-e17a1dca#23/3\",\"5354\":\"v-e17a1dca#23/4\",\"5355\":\"v-e17a1dca#24\",\"5356\":\"v-e17a1dca#24/0\",\"5357\":\"v-e17a1dca#24/1\",\"5358\":\"v-e17a1dca#24/2\",\"5359\":\"v-e17a1dca#24/3\",\"5360\":\"v-e17a1dca#24/4\",\"5361\":\"v-e17a1dca#24/5\",\"5362\":\"v-e17a1dca#24/6\",\"5363\":\"v-e17a1dca#24/7\",\"5364\":\"v-e17a1dca#24/8\",\"5365\":\"v-e17a1dca#24/9\",\"5366\":\"v-e17a1dca#24/10\",\"5367\":\"v-e17a1dca#24/11\",\"5368\":\"v-e17a1dca#25\",\"5369\":\"v-e17a1dca#26\",\"5370\":\"v-e17a1dca#26/0\",\"5371\":\"v-e17a1dca#26/1\",\"5372\":\"v-e17a1dca#26/2\",\"5373\":\"v-e17a1dca#26/3\",\"5374\":\"v-e17a1dca#26/4\",\"5375\":\"v-e17a1dca#26/5\",\"5376\":\"v-e17a1dca#26/6\",\"5377\":\"v-e17a1dca#27\",\"5378\":\"v-e17a1dca#27/0\",\"5379\":\"v-e17a1dca#27/1\",\"5380\":\"v-e17a1dca#27/2\",\"5381\":\"v-e17a1dca#27/3\",\"5382\":\"v-e17a1dca#27/4\",\"5383\":\"v-e17a1dca#27/5\",\"5384\":\"v-e17a1dca#27/6\",\"5385\":\"v-e17a1dca#27/7\",\"5386\":\"v-e17a1dca#27/8\",\"5387\":\"v-e17a1dca#27/9\",\"5388\":\"v-e17a1dca#27/10\",\"5389\":\"v-e17a1dca#28\",\"5390\":\"v-e17a1dca#29\",\"5391\":\"v-e17a1dca#30\",\"5392\":\"v-e17a1dca#31\",\"5393\":\"v-e17a1dca#31/0\",\"5394\":\"v-e17a1dca#32\",\"5395\":\"v-e17a1dca#32/0\",\"5396\":\"v-e17a1dca#32/1\",\"5397\":\"v-e17a1dca#32/2\",\"5398\":\"v-e17a1dca#32/3\",\"5399\":\"v-e17a1dca#32/4\",\"5400\":\"v-e17a1dca#32/5\",\"5401\":\"v-e17a1dca#32/6\",\"5402\":\"v-e17a1dca#32/7\",\"5403\":\"v-e17a1dca#32/8\",\"5404\":\"v-e17a1dca#32/9\",\"5405\":\"v-e17a1dca#32/10\",\"5406\":\"v-e17a1dca#32/11\",\"5407\":\"v-e17a1dca#32/12\",\"5408\":\"v-e17a1dca#32/13\",\"5409\":\"v-e17a1dca#32/14\",\"5410\":\"v-e17a1dca#33\",\"5411\":\"v-e17a1dca#33/0\",\"5412\":\"v-e17a1dca#34\",\"5413\":\"v-e17a1dca#34/0\",\"5414\":\"v-e17a1dca#34/1\",\"5415\":\"v-e17a1dca#34/2\",\"5416\":\"v-e17a1dca#35\",\"5417\":\"v-e17a1dca#35/0\",\"5418\":\"v-e17a1dca#35/1\",\"5419\":\"v-e17a1dca#36\",\"5420\":\"v-e17a1dca#36/0\",\"5421\":\"v-e17a1dca#36/1\",\"5422\":\"v-e17a1dca#36/2\",\"5423\":\"v-e17a1dca#37\",\"5424\":\"v-e17a1dca#37/0\",\"5425\":\"v-e17a1dca#37/1\",\"5426\":\"v-e17a1dca#37/2\",\"5427\":\"v-e17a1dca#37/3\",\"5428\":\"v-e17a1dca#37/4\",\"5429\":\"v-e17a1dca#37/5\",\"5430\":\"v-e17a1dca#37/6\",\"5431\":\"v-e17a1dca#38\",\"5432\":\"v-e17a1dca#38/0\",\"5433\":\"v-e17a1dca#39\",\"5434\":\"v-e17a1dca#39/0\",\"5435\":\"v-6c315fa0\",\"5436\":\"v-6c315fa0#1\",\"5437\":\"v-6c315fa0#1/0\",\"5438\":\"v-6c315fa0#1/1\",\"5439\":\"v-6c315fa0#1/2\",\"5440\":\"v-6c315fa0#1/3\",\"5441\":\"v-6c315fa0#1/4\",\"5442\":\"v-6c315fa0#1/5\",\"5443\":\"v-6c315fa0#1/6\",\"5444\":\"v-6c315fa0#1/7\",\"5445\":\"v-6c315fa0#2\",\"5446\":\"v-6c315fa0#3\",\"5447\":\"v-6c315fa0#3/0\",\"5448\":\"v-6c315fa0#3/1\",\"5449\":\"v-6c315fa0#3/2\",\"5450\":\"v-6c315fa0#3/3\",\"5451\":\"v-6c315fa0#3/4\",\"5452\":\"v-6c315fa0#3/5\",\"5453\":\"v-6c315fa0#3/6\",\"5454\":\"v-6c315fa0#3/7\",\"5455\":\"v-6c315fa0#3/8\",\"5456\":\"v-6c315fa0#4\",\"5457\":\"v-6c315fa0#4/9\",\"5458\":\"v-6c315fa0#4/10\",\"5459\":\"v-6c315fa0#4/11\",\"5460\":\"v-6c315fa0#4/12\",\"5461\":\"v-6c315fa0#4/13\",\"5462\":\"v-6c315fa0#4/14\",\"5463\":\"v-6c315fa0#4/15\",\"5464\":\"v-6c315fa0#4/16\",\"5465\":\"v-6c315fa0#4/17\",\"5466\":\"v-6c315fa0#4/18\",\"5467\":\"v-6c315fa0#4/19\",\"5468\":\"v-6c315fa0#4/20\",\"5469\":\"v-6c315fa0#4/21\",\"5470\":\"v-6c315fa0#4/22\",\"5471\":\"v-6c315fa0#4/23\",\"5472\":\"v-6c315fa0#4/24\",\"5473\":\"v-6c315fa0#4/25\",\"5474\":\"v-6c315fa0#4/26\",\"5475\":\"v-6c315fa0#4/27\",\"5476\":\"v-6c315fa0#4/28\",\"5477\":\"v-6c315fa0#4/29\",\"5478\":\"v-6c315fa0#4/30\",\"5479\":\"v-6c315fa0#4/31\",\"5480\":\"v-6c315fa0#4/32\",\"5481\":\"v-6c315fa0#4/33\",\"5482\":\"v-6c315fa0#4/34\",\"5483\":\"v-6c315fa0#4/35\",\"5484\":\"v-6c315fa0#4/36\",\"5485\":\"v-6c315fa0#4/37\",\"5486\":\"v-6c315fa0#4/38\",\"5487\":\"v-6c315fa0#4/39\",\"5488\":\"v-6c315fa0#5\",\"5489\":\"v-6c315fa0#6\",\"5490\":\"v-6c315fa0#6/0\",\"5491\":\"v-6c315fa0#7\",\"5492\":\"v-6c315fa0#7/0\",\"5493\":\"v-6c315fa0#7/1\",\"5494\":\"v-6c315fa0#7/2\",\"5495\":\"v-6c315fa0#7/3\",\"5496\":\"v-6c315fa0#7/4\",\"5497\":\"v-6c315fa0#8\",\"5498\":\"v-6c315fa0#9\",\"5499\":\"v-6c315fa0#9/0\",\"5500\":\"v-6c315fa0#10\",\"5501\":\"v-6c315fa0#10/0\",\"5502\":\"v-6c315fa0#10/1\",\"5503\":\"v-6c315fa0#10/2\",\"5504\":\"v-6c315fa0#10/3\",\"5505\":\"v-6c315fa0#11\",\"5506\":\"v-6c315fa0#11/0\",\"5507\":\"v-6c315fa0#11/1\",\"5508\":\"v-6c315fa0#11/2\",\"5509\":\"v-6c315fa0#11/3\",\"5510\":\"v-6c315fa0#11/4\",\"5511\":\"v-359680c8\",\"5512\":\"v-359680c8#0/0\",\"5513\":\"v-359680c8#0/1\",\"5514\":\"v-359680c8#0/2\",\"5515\":\"v-359680c8#1\",\"5516\":\"v-359680c8#2\",\"5517\":\"v-359680c8#2/0\",\"5518\":\"v-359680c8#2/1\",\"5519\":\"v-359680c8#2/2\",\"5520\":\"v-359680c8#2/3\",\"5521\":\"v-359680c8#2/4\",\"5522\":\"v-359680c8#3\",\"5523\":\"v-359680c8#3/0\",\"5524\":\"v-359680c8#3/1\",\"5525\":\"v-359680c8#3/2\",\"5526\":\"v-359680c8#3/3\",\"5527\":\"v-359680c8#4\",\"5528\":\"v-359680c8#4/0\",\"5529\":\"v-359680c8#5\",\"5530\":\"v-359680c8#5/0\",\"5531\":\"v-359680c8#6\",\"5532\":\"v-359680c8#6/0\",\"5533\":\"v-359680c8#6/1\",\"5534\":\"v-359680c8#6/2\",\"5535\":\"v-359680c8#6/3\",\"5536\":\"v-76002cf8\",\"5537\":\"v-76002cf8#0/0\",\"5538\":\"v-76002cf8#0/1\",\"5539\":\"v-76002cf8#1\",\"5540\":\"v-76002cf8#1/0\",\"5541\":\"v-76002cf8#1/1\",\"5542\":\"v-76002cf8#1/2\",\"5543\":\"v-76002cf8#1/3\",\"5544\":\"v-76002cf8#1/4\",\"5545\":\"v-76002cf8#2\",\"5546\":\"v-76002cf8#2/0\",\"5547\":\"v-76002cf8#2/1\",\"5548\":\"v-27b3dbbc\",\"5549\":\"v-27b3dbbc#1\",\"5550\":\"v-27b3dbbc#1/0\",\"5551\":\"v-27b3dbbc#1/1\",\"5552\":\"v-27b3dbbc#1/2\",\"5553\":\"v-27b3dbbc#1/3\",\"5554\":\"v-27b3dbbc#1/4\",\"5555\":\"v-27b3dbbc#1/5\",\"5556\":\"v-27b3dbbc#1/6\",\"5557\":\"v-27b3dbbc#1/7\",\"5558\":\"v-27b3dbbc#1/8\",\"5559\":\"v-27b3dbbc#2\",\"5560\":\"v-27b3dbbc#2/0\",\"5561\":\"v-27b3dbbc#3\",\"5562\":\"v-27b3dbbc#3/0\",\"5563\":\"v-27b3dbbc#4\",\"5564\":\"v-27b3dbbc#5\",\"5565\":\"v-27b3dbbc#6\",\"5566\":\"v-27b3dbbc#7\",\"5567\":\"v-27b3dbbc#7/0\",\"5568\":\"v-27b3dbbc#7/1\",\"5569\":\"v-27b3dbbc#7/2\",\"5570\":\"v-27b3dbbc#7/3\",\"5571\":\"v-27b3dbbc#7/4\",\"5572\":\"v-27b3dbbc#7/5\",\"5573\":\"v-27b3dbbc#8\",\"5574\":\"v-27b3dbbc#8/0\",\"5575\":\"v-27b3dbbc#8/1\",\"5576\":\"v-27b3dbbc#8/2\",\"5577\":\"v-27b3dbbc#8/3\",\"5578\":\"v-27b3dbbc#8/4\",\"5579\":\"v-27b3dbbc#8/5\",\"5580\":\"v-27b3dbbc#8/6\",\"5581\":\"v-27b3dbbc#8/7\",\"5582\":\"v-27b3dbbc#8/8\",\"5583\":\"v-27b3dbbc#8/9\",\"5584\":\"v-27b3dbbc#8/10\",\"5585\":\"v-27b3dbbc#9\",\"5586\":\"v-27b3dbbc#9/0\",\"5587\":\"v-27b3dbbc#9/1\",\"5588\":\"v-27b3dbbc#9/2\",\"5589\":\"v-27b3dbbc#9/3\",\"5590\":\"v-27b3dbbc#9/4\",\"5591\":\"v-27b3dbbc#9/5\",\"5592\":\"v-27b3dbbc#9/6\",\"5593\":\"v-27b3dbbc#9/7\",\"5594\":\"v-27b3dbbc#9/8\",\"5595\":\"v-27b3dbbc#9/9\",\"5596\":\"v-27b3dbbc#9/10\",\"5597\":\"v-27b3dbbc#10\",\"5598\":\"v-27b3dbbc#11\",\"5599\":\"v-27b3dbbc#11/0\",\"5600\":\"v-27b3dbbc#11/1\",\"5601\":\"v-27b3dbbc#12\",\"5602\":\"v-27b3dbbc#12/0\",\"5603\":\"v-27b3dbbc#12/1\",\"5604\":\"v-27b3dbbc#12/2\",\"5605\":\"v-27b3dbbc#12/3\",\"5606\":\"v-27b3dbbc#13\",\"5607\":\"v-27b3dbbc#13/0\",\"5608\":\"v-27b3dbbc#13/1\",\"5609\":\"v-27b3dbbc#13/2\",\"5610\":\"v-27b3dbbc#13/3\",\"5611\":\"v-27b3dbbc#14\",\"5612\":\"v-27b3dbbc#14/0\",\"5613\":\"v-27b3dbbc#14/1\",\"5614\":\"v-27b3dbbc#14/2\",\"5615\":\"v-27b3dbbc#15\",\"5616\":\"v-27b3dbbc#16\",\"5617\":\"v-27b3dbbc#16/0\",\"5618\":\"v-27b3dbbc#16/1\",\"5619\":\"v-27b3dbbc#16/2\",\"5620\":\"v-27b3dbbc#16/3\",\"5621\":\"v-27b3dbbc#17\",\"5622\":\"v-27b3dbbc#17/0\",\"5623\":\"v-27b3dbbc#17/1\",\"5624\":\"v-27b3dbbc#17/2\",\"5625\":\"v-27b3dbbc#17/3\",\"5626\":\"v-27b3dbbc#17/4\",\"5627\":\"v-27b3dbbc#17/5\",\"5628\":\"v-27b3dbbc#17/6\",\"5629\":\"v-27b3dbbc#17/7\",\"5630\":\"v-27b3dbbc#17/8\",\"5631\":\"v-27b3dbbc#17/9\",\"5632\":\"v-27b3dbbc#17/10\",\"5633\":\"v-27b3dbbc#18\",\"5634\":\"v-27b3dbbc#18/0\",\"5635\":\"v-27b3dbbc#18/1\",\"5636\":\"v-27b3dbbc#18/2\",\"5637\":\"v-27b3dbbc#18/3\",\"5638\":\"v-27b3dbbc#18/4\",\"5639\":\"v-27b3dbbc#18/5\",\"5640\":\"v-27b3dbbc#18/6\",\"5641\":\"v-27b3dbbc#18/7\",\"5642\":\"v-09033722\",\"5643\":\"v-09033722#1\",\"5644\":\"v-09033722#2\",\"5645\":\"v-09033722#3\",\"5646\":\"v-09033722#3/0\",\"5647\":\"v-09033722#3/1\",\"5648\":\"v-09033722#3/2\",\"5649\":\"v-09033722#3/3\",\"5650\":\"v-09033722#3/4\",\"5651\":\"v-09033722#3/5\",\"5652\":\"v-09033722#4\",\"5653\":\"v-09033722#4/0\",\"5654\":\"v-09033722#4/1\",\"5655\":\"v-09033722#4/2\",\"5656\":\"v-09033722#4/3\",\"5657\":\"v-09033722#4/4\",\"5658\":\"v-09033722#4/5\",\"5659\":\"v-09033722#4/6\",\"5660\":\"v-09033722#4/7\",\"5661\":\"v-09033722#4/8\",\"5662\":\"v-09033722#4/9\",\"5663\":\"v-09033722#4/10\",\"5664\":\"v-09033722#4/11\",\"5665\":\"v-09033722#4/12\",\"5666\":\"v-09033722#4/13\",\"5667\":\"v-09033722#4/14\",\"5668\":\"v-09033722#4/15\",\"5669\":\"v-09033722#4/16\",\"5670\":\"v-09033722#4/17\",\"5671\":\"v-09033722#4/18\",\"5672\":\"v-09033722#4/19\",\"5673\":\"v-09033722#4/20\",\"5674\":\"v-09033722#5\",\"5675\":\"v-09033722#6\",\"5676\":\"v-09033722#6/0\",\"5677\":\"v-09033722#6/1\",\"5678\":\"v-09033722#6/2\",\"5679\":\"v-09033722#6/3\",\"5680\":\"v-09033722#6/4\",\"5681\":\"v-09033722#6/5\",\"5682\":\"v-09033722#6/6\",\"5683\":\"v-09033722#6/7\",\"5684\":\"v-09033722#6/8\",\"5685\":\"v-09033722#6/9\",\"5686\":\"v-09033722#6/10\",\"5687\":\"v-09033722#6/11\",\"5688\":\"v-09033722#6/12\",\"5689\":\"v-09033722#7\",\"5690\":\"v-09033722#8\",\"5691\":\"v-09033722#8/0\",\"5692\":\"v-09033722#8/1\",\"5693\":\"v-09033722#8/2\",\"5694\":\"v-09033722#8/3\",\"5695\":\"v-09033722#8/4\",\"5696\":\"v-09033722#8/5\",\"5697\":\"v-09033722#8/6\",\"5698\":\"v-09033722#8/7\",\"5699\":\"v-09033722#8/8\",\"5700\":\"v-09033722#8/9\",\"5701\":\"v-09033722#8/10\",\"5702\":\"v-09033722#8/11\",\"5703\":\"v-09033722#8/12\",\"5704\":\"v-09033722#8/13\",\"5705\":\"v-09033722#8/14\",\"5706\":\"v-09033722#8/15\",\"5707\":\"v-09033722#8/16\",\"5708\":\"v-09033722#8/17\",\"5709\":\"v-09033722#8/18\",\"5710\":\"v-09033722#8/19\",\"5711\":\"v-09033722#8/20\",\"5712\":\"v-f9616996\",\"5713\":\"v-f9616996#1\",\"5714\":\"v-f9616996#1/0\",\"5715\":\"v-f9616996#1/1\",\"5716\":\"v-f9616996#1/2\",\"5717\":\"v-f9616996#1/3\",\"5718\":\"v-f9616996#1/4\",\"5719\":\"v-f9616996#1/5\",\"5720\":\"v-f9616996#1/6\",\"5721\":\"v-f9616996#1/7\",\"5722\":\"v-f9616996#1/8\",\"5723\":\"v-f9616996#1/9\",\"5724\":\"v-f9616996#1/10\",\"5725\":\"v-f9616996#1/11\",\"5726\":\"v-f9616996#1/12\",\"5727\":\"v-f9616996#2\",\"5728\":\"v-f9616996#3\",\"5729\":\"v-f9616996#3/0\",\"5730\":\"v-f9616996#3/1\",\"5731\":\"v-f9616996#3/2\",\"5732\":\"v-f9616996#4\",\"5733\":\"v-f9616996#4/0\",\"5734\":\"v-f9616996#4/1\",\"5735\":\"v-f9616996#4/2\",\"5736\":\"v-f9616996#4/3\",\"5737\":\"v-f9616996#4/4\",\"5738\":\"v-f9616996#5\",\"5739\":\"v-f9616996#5/0\",\"5740\":\"v-f9616996#5/1\",\"5741\":\"v-f9616996#5/2\",\"5742\":\"v-f9616996#6\",\"5743\":\"v-f9616996#6/0\",\"5744\":\"v-f9616996#6/1\",\"5745\":\"v-f9616996#6/2\",\"5746\":\"v-f9616996#7\",\"5747\":\"v-f9616996#7/0\",\"5748\":\"v-f9616996#7/1\",\"5749\":\"v-f9616996#7/2\",\"5750\":\"v-f9616996#7/3\",\"5751\":\"v-f9616996#7/4\",\"5752\":\"v-f9616996#7/5\",\"5753\":\"v-f9616996#7/6\",\"5754\":\"v-f9616996#7/7\",\"5755\":\"v-f9616996#7/8\",\"5756\":\"v-f9616996#7/9\",\"5757\":\"v-f9616996#8\",\"5758\":\"v-f9616996#8/0\",\"5759\":\"v-f9616996#8/1\",\"5760\":\"v-f9616996#8/2\",\"5761\":\"v-f9616996#8/3\",\"5762\":\"v-f9616996#8/4\",\"5763\":\"v-f9616996#8/5\",\"5764\":\"v-f9616996#8/6\",\"5765\":\"v-f9616996#8/7\",\"5766\":\"v-f9616996#8/8\",\"5767\":\"v-f9616996#8/9\",\"5768\":\"v-f9616996#9\",\"5769\":\"v-f9616996#9/0\",\"5770\":\"v-f9616996#9/1\",\"5771\":\"v-f9616996#9/2\",\"5772\":\"v-f9616996#9/3\",\"5773\":\"v-f9616996#9/4\",\"5774\":\"v-f9616996#10\",\"5775\":\"v-f9616996#10/5\",\"5776\":\"v-f9616996#10/6\",\"5777\":\"v-f9616996#10/7\",\"5778\":\"v-f9616996#10/8\",\"5779\":\"v-f9616996#10/9\",\"5780\":\"v-f9616996#10/10\",\"5781\":\"v-f9616996#10/11\",\"5782\":\"v-f9616996#10/12\",\"5783\":\"v-f9616996#10/13\",\"5784\":\"v-f9616996#10/14\",\"5785\":\"v-f9616996#10/15\",\"5786\":\"v-f9616996#10/16\",\"5787\":\"v-f9616996#10/17\",\"5788\":\"v-f9616996#10/18\",\"5789\":\"v-f9616996#10/19\",\"5790\":\"v-f9616996#10/20\",\"5791\":\"v-f9616996#10/21\",\"5792\":\"v-f9616996#10/22\",\"5793\":\"v-f9616996#10/23\",\"5794\":\"v-f9616996#10/24\",\"5795\":\"v-f9616996#10/25\",\"5796\":\"v-f9616996#10/26\",\"5797\":\"v-f9616996#10/27\",\"5798\":\"v-f9616996#10/28\",\"5799\":\"v-f9616996#10/29\",\"5800\":\"v-f9616996#10/30\",\"5801\":\"v-f9616996#10/31\",\"5802\":\"v-f9616996#10/32\",\"5803\":\"v-f9616996#10/33\",\"5804\":\"v-f9616996#10/34\",\"5805\":\"v-f9616996#10/35\",\"5806\":\"v-f9616996#10/36\",\"5807\":\"v-f9616996#10/37\",\"5808\":\"v-f9616996#11\",\"5809\":\"v-f9616996#11/0\",\"5810\":\"v-f9616996#11/1\",\"5811\":\"v-f9616996#11/2\",\"5812\":\"v-f9616996#11/3\",\"5813\":\"v-f9616996#11/4\",\"5814\":\"v-f9616996#11/5\",\"5815\":\"v-f9616996#11/6\",\"5816\":\"v-f9616996#11/7\",\"5817\":\"v-f9616996#11/8\",\"5818\":\"v-f9616996#11/9\",\"5819\":\"v-f9616996#11/10\",\"5820\":\"v-f9616996#11/11\",\"5821\":\"v-f9616996#12\",\"5822\":\"v-f9616996#12/0\",\"5823\":\"v-f9616996#12/1\",\"5824\":\"v-f9616996#12/2\",\"5825\":\"v-f9616996#12/3\",\"5826\":\"v-f9616996#12/4\",\"5827\":\"v-f9616996#12/5\",\"5828\":\"v-f9616996#13\",\"5829\":\"v-f9616996#13/0\",\"5830\":\"v-306b7475\",\"5831\":\"v-0a98898e\",\"5832\":\"v-776e5b55\",\"5833\":\"v-74875e60\",\"5834\":\"v-70349e7c\",\"5835\":\"v-09d1fd44\",\"5836\":\"v-27255a3a\",\"5837\":\"v-e7ae8e10\",\"5838\":\"v-0500bc12\",\"5839\":\"v-03dc69cd\",\"5840\":\"v-595f8322\",\"5841\":\"v-96b8eb96\",\"5842\":\"v-43de1d46\",\"5843\":\"v-56c59726\",\"5844\":\"v-79528dfd\",\"5845\":\"v-2b17cb0a\",\"5846\":\"v-7f7c299a\",\"5847\":\"v-1c49167e\",\"5848\":\"v-d388c4dc\",\"5849\":\"v-c48b8372\",\"5850\":\"v-443c1136\",\"5851\":\"v-787e4606\",\"5852\":\"v-4694ee4d\",\"5853\":\"v-78c5c555\",\"5854\":\"v-3e7dbf32\",\"5855\":\"v-df4e5736\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,4],\"2\":[2],\"3\":[1],\"4\":[1],\"5\":[null,2],\"6\":[null,1],\"7\":[null,1],\"8\":[null,1],\"9\":[1],\"10\":[null,4],\"11\":[null,3],\"12\":[null,1],\"13\":[null,1],\"14\":[null,1],\"15\":[null,1],\"16\":[null,1],\"17\":[null,1],\"18\":[null,1],\"19\":[null,3],\"20\":[null,1],\"21\":[null,1],\"22\":[null,1],\"23\":[1],\"24\":[null,2],\"25\":[null,5],\"26\":[null,5],\"27\":[2],\"28\":[null,7],\"29\":[null,7],\"30\":[2],\"31\":[null,8],\"32\":[2],\"33\":[null,7],\"34\":[null,1],\"35\":[null,8],\"36\":[2],\"37\":[null,11],\"38\":[2],\"39\":[null,6],\"40\":[null,7],\"41\":[1],\"42\":[null,10],\"43\":[1],\"44\":[null,5],\"45\":[null,1],\"46\":[null,6],\"47\":[null,5],\"48\":[null,1],\"49\":[null,1],\"50\":[null,1],\"51\":[null,1],\"52\":[null,1],\"53\":[null,1],\"54\":[null,1],\"55\":[null,1],\"56\":[null,1],\"57\":[1],\"58\":[null,1],\"59\":[1],\"60\":[null,2],\"61\":[null,1],\"62\":[1],\"63\":[null,1],\"64\":[null,1],\"65\":[null,1],\"66\":[1],\"67\":[null,5],\"68\":[null,1],\"69\":[1],\"70\":[null,3],\"71\":[null,1],\"72\":[1],\"73\":[null,3],\"74\":[null,1],\"75\":[1],\"76\":[null,3],\"77\":[null,3],\"78\":[null,1],\"79\":[1],\"80\":[null,1],\"81\":[null,1],\"82\":[1],\"83\":[null,23],\"84\":[null,1],\"85\":[1],\"86\":[null,1],\"87\":[1],\"88\":[null,1],\"89\":[1],\"90\":[null,1],\"91\":[1],\"92\":[null,1],\"93\":[2],\"94\":[null,10],\"95\":[null,1],\"96\":[1],\"97\":[null,2],\"98\":[null,1],\"99\":[null,1],\"100\":[null,1],\"101\":[null,1],\"102\":[1],\"103\":[null,1],\"104\":[1],\"105\":[null,5],\"106\":[null,1],\"107\":[1],\"108\":[null,1],\"109\":[2],\"110\":[null,1],\"111\":[1],\"112\":[null,1],\"113\":[null,2],\"114\":[1],\"115\":[null,3],\"116\":[1],\"117\":[null,6],\"118\":[null,4],\"119\":[null,6],\"120\":[null,3],\"121\":[null,5],\"122\":[1],\"123\":[null,3],\"124\":[null,1],\"125\":[null,6],\"126\":[null,7],\"127\":[null,2],\"128\":[null,4],\"129\":[1],\"130\":[null,2],\"131\":[null,1],\"132\":[null,1],\"133\":[null,3],\"134\":[null,2],\"135\":[null,1],\"136\":[null,1],\"137\":[null,1],\"138\":[null,1],\"139\":[null,1],\"140\":[null,4],\"141\":[1],\"142\":[1],\"143\":[1],\"144\":[null,1],\"145\":[null,1],\"146\":[1],\"147\":[null,1],\"148\":[null,1],\"149\":[1],\"150\":[null,3],\"151\":[null,8],\"152\":[null,3],\"153\":[1],\"154\":[null,3],\"155\":[null,8],\"156\":[null,3],\"157\":[1],\"158\":[2],\"159\":[1],\"160\":[null,4],\"161\":[1],\"162\":[null,1],\"163\":[null,1],\"164\":[1],\"165\":[null,2],\"166\":[2],\"167\":[1],\"168\":[null,4],\"169\":[1],\"170\":[null,1],\"171\":[null,1],\"172\":[1],\"173\":[null,2],\"174\":[1],\"175\":[2],\"176\":[2],\"177\":[6],\"178\":[null,3],\"179\":[null,5],\"180\":[null,4],\"181\":[null,4],\"182\":[null,26],\"183\":[4],\"184\":[null,2],\"185\":[null,1],\"186\":[null,7],\"187\":[null,4],\"188\":[null,7],\"189\":[2],\"190\":[null,5],\"191\":[null,2],\"192\":[null,3],\"193\":[null,5],\"194\":[null,2],\"195\":[null,8],\"196\":[null,2],\"197\":[null,3],\"198\":[null,6],\"199\":[null,13],\"200\":[null,6],\"201\":[null,1],\"202\":[null,5],\"203\":[2],\"204\":[null,7],\"205\":[null,7],\"206\":[null,1],\"207\":[null,2],\"208\":[null,10],\"209\":[null,7],\"210\":[null,4],\"211\":[null,5],\"212\":[null,4],\"213\":[null,5],\"214\":[null,4],\"215\":[null,4],\"216\":[null,1],\"217\":[null,1],\"218\":[2],\"219\":[null,4],\"220\":[null,4],\"221\":[null,1],\"222\":[2],\"223\":[null,8],\"224\":[null,6],\"225\":[null,3],\"226\":[null,4],\"227\":[null,9],\"228\":[null,1],\"229\":[null,20],\"230\":[4],\"231\":[null,17],\"232\":[null,3],\"233\":[null,6],\"234\":[null,6],\"235\":[null,6],\"236\":[4],\"237\":[null,10],\"238\":[null,7],\"239\":[1],\"240\":[null,9],\"241\":[null,10],\"242\":[2],\"243\":[null,12],\"244\":[null,6],\"245\":[null,6],\"246\":[null,7],\"247\":[null,7],\"248\":[null,4],\"249\":[null,4],\"250\":[null,4],\"251\":[null,32],\"252\":[1],\"253\":[null,4],\"254\":[null,9],\"255\":[null,4],\"256\":[null,6],\"257\":[null,8],\"258\":[null,6],\"259\":[null,7],\"260\":[null,5],\"261\":[1],\"262\":[null,9],\"263\":[null,3],\"264\":[null,8],\"265\":[null,3],\"266\":[null,7],\"267\":[null,6],\"268\":[null,4],\"269\":[null,7],\"270\":[null,7],\"271\":[4],\"272\":[null,8],\"273\":[null,6],\"274\":[null,4],\"275\":[null,3],\"276\":[1],\"277\":[null,12],\"278\":[2],\"279\":[null,8],\"280\":[null,10],\"281\":[null,23],\"282\":[null,25],\"283\":[null,13],\"284\":[1],\"285\":[null,6],\"286\":[null,1],\"287\":[null,2],\"288\":[null,9],\"289\":[null,6],\"290\":[null,6],\"291\":[null,12],\"292\":[null,8],\"293\":[null,3],\"294\":[null,10],\"295\":[2],\"296\":[3],\"297\":[1],\"298\":[null,8],\"299\":[null,5],\"300\":[null,5],\"301\":[1],\"302\":[null,7],\"303\":[null,8],\"304\":[null,1],\"305\":[null,1],\"306\":[null,1],\"307\":[null,1],\"308\":[1],\"309\":[null,3],\"310\":[null,1],\"311\":[null,2],\"312\":[null,4],\"313\":[null,1],\"314\":[null,2],\"315\":[null,4],\"316\":[null,1],\"317\":[null,3],\"318\":[null,4],\"319\":[null,1],\"320\":[null,5],\"321\":[null,2],\"322\":[null,4],\"323\":[2],\"324\":[4],\"325\":[null,3],\"326\":[null,2],\"327\":[null,2],\"328\":[null,3],\"329\":[4],\"330\":[null,3],\"331\":[3],\"332\":[null,5],\"333\":[null,2],\"334\":[null,17],\"335\":[null,18],\"336\":[3],\"337\":[null,4],\"338\":[null,2],\"339\":[null,2],\"340\":[null,6],\"341\":[2],\"342\":[null,7],\"343\":[null,4],\"344\":[null,11],\"345\":[3],\"346\":[null,4],\"347\":[null,3],\"348\":[null,7],\"349\":[null,10],\"350\":[3],\"351\":[null,4],\"352\":[null,11],\"353\":[null,8],\"354\":[4],\"355\":[null,4],\"356\":[null,6],\"357\":[4],\"358\":[null,7],\"359\":[4],\"360\":[null,5],\"361\":[3],\"362\":[null,7],\"363\":[null,2],\"364\":[null,12],\"365\":[null,9],\"366\":[null,4],\"367\":[null,3],\"368\":[null,4],\"369\":[null,2],\"370\":[null,6],\"371\":[null,8],\"372\":[3],\"373\":[null,12],\"374\":[null,6],\"375\":[null,17],\"376\":[null,3],\"377\":[null,1],\"378\":[null,1],\"379\":[null,13],\"380\":[null,12],\"381\":[null,2],\"382\":[null,14],\"383\":[null,10],\"384\":[2],\"385\":[2],\"386\":[null,22],\"387\":[null,4],\"388\":[2],\"389\":[null,5],\"390\":[null,11],\"391\":[2],\"392\":[4],\"393\":[null,3],\"394\":[null,5],\"395\":[null,8],\"396\":[null,13],\"397\":[3],\"398\":[null,8],\"399\":[null,11],\"400\":[3],\"401\":[null,4],\"402\":[null,23],\"403\":[null,14],\"404\":[null,9],\"405\":[null,12],\"406\":[null,4],\"407\":[null,3],\"408\":[null,20],\"409\":[null,8],\"410\":[null,4],\"411\":[null,15],\"412\":[null,10],\"413\":[null,12],\"414\":[3],\"415\":[null,5],\"416\":[null,3],\"417\":[null,3],\"418\":[null,4],\"419\":[null,6],\"420\":[null,11],\"421\":[null,61],\"422\":[null,5],\"423\":[null,3],\"424\":[null,6],\"425\":[null,11],\"426\":[null,8],\"427\":[null,2],\"428\":[null,12],\"429\":[2],\"430\":[2],\"431\":[3],\"432\":[null,4],\"433\":[null,5],\"434\":[null,5],\"435\":[null,1],\"436\":[null,12],\"437\":[null,8],\"438\":[null,3],\"439\":[null,9],\"440\":[8],\"441\":[null,3],\"442\":[null,8],\"443\":[null,10],\"444\":[null,3],\"445\":[null,5],\"446\":[3],\"447\":[null,3],\"448\":[null,15],\"449\":[null,10],\"450\":[null,3],\"451\":[null,5],\"452\":[null,17],\"453\":[8],\"454\":[null,13],\"455\":[null,24],\"456\":[null,2],\"457\":[null,44],\"458\":[null,8],\"459\":[2],\"460\":[null,7],\"461\":[null,6],\"462\":[null,3],\"463\":[null,25],\"464\":[3],\"465\":[null,9],\"466\":[null,11],\"467\":[null,3],\"468\":[null,35],\"469\":[null,6],\"470\":[null,5],\"471\":[null,2],\"472\":[null,2],\"473\":[null,2],\"474\":[null,2],\"475\":[2],\"476\":[4],\"477\":[null,7],\"478\":[null,2],\"479\":[null,2],\"480\":[null,10],\"481\":[null,5],\"482\":[null,4],\"483\":[null,10],\"484\":[null,7],\"485\":[null,19],\"486\":[null,5],\"487\":[null,3],\"488\":[null,3],\"489\":[null,9],\"490\":[null,2],\"491\":[null,16],\"492\":[null,10],\"493\":[null,3],\"494\":[null,13],\"495\":[3],\"496\":[null,7],\"497\":[null,5],\"498\":[null,6],\"499\":[null,12],\"500\":[null,6],\"501\":[null,9],\"502\":[null,9],\"503\":[3],\"504\":[null,5],\"505\":[null,12],\"506\":[null,10],\"507\":[null,4],\"508\":[null,16],\"509\":[null,13],\"510\":[null,8],\"511\":[3],\"512\":[null,4],\"513\":[null,16],\"514\":[null,4],\"515\":[null,18],\"516\":[null,4],\"517\":[null,17],\"518\":[null,1],\"519\":[null,20],\"520\":[null,10],\"521\":[2],\"522\":[1],\"523\":[null,10],\"524\":[1],\"525\":[null,10],\"526\":[1],\"527\":[null,10],\"528\":[2],\"529\":[null,4],\"530\":[null,3],\"531\":[null,3],\"532\":[8],\"533\":[null,7],\"534\":[null,7],\"535\":[null,14],\"536\":[null,7],\"537\":[null,6],\"538\":[6],\"539\":[null,12],\"540\":[null,5],\"541\":[null,3],\"542\":[null,9],\"543\":[null,5],\"544\":[null,11],\"545\":[3],\"546\":[null,14],\"547\":[null,6],\"548\":[null,7],\"549\":[null,3],\"550\":[null,3],\"551\":[null,7],\"552\":[null,6],\"553\":[null,8],\"554\":[null,7],\"555\":[null,10],\"556\":[null,8],\"557\":[null,18],\"558\":[null,7],\"559\":[null,13],\"560\":[null,11],\"561\":[null,15],\"562\":[7],\"563\":[null,16],\"564\":[null,9],\"565\":[null,10],\"566\":[3],\"567\":[null,8],\"568\":[null,6],\"569\":[null,5],\"570\":[null,10],\"571\":[null,8],\"572\":[null,14],\"573\":[null,10],\"574\":[null,9],\"575\":[null,3],\"576\":[null,18],\"577\":[null,14],\"578\":[null,11],\"579\":[null,8],\"580\":[null,7],\"581\":[5],\"582\":[null,6],\"583\":[null,13],\"584\":[4],\"585\":[null,3],\"586\":[null,14],\"587\":[null,17],\"588\":[null,18],\"589\":[null,4],\"590\":[null,7],\"591\":[null,9],\"592\":[null,17],\"593\":[3],\"594\":[null,2],\"595\":[null,12],\"596\":[null,13],\"597\":[null,11],\"598\":[null,5],\"599\":[null,12],\"600\":[null,5],\"601\":[null,29],\"602\":[null,2],\"603\":[null,3],\"604\":[null,8],\"605\":[null,6],\"606\":[null,13],\"607\":[null,9],\"608\":[1],\"609\":[null,10],\"610\":[1],\"611\":[2],\"612\":[null,9],\"613\":[null,5],\"614\":[null,11],\"615\":[null,5],\"616\":[null,2],\"617\":[null,6],\"618\":[null,2],\"619\":[null,1],\"620\":[null,1],\"621\":[null,9],\"622\":[2],\"623\":[null,3],\"624\":[null,1],\"625\":[null,1],\"626\":[null,5],\"627\":[null,2],\"628\":[null,7],\"629\":[null,8],\"630\":[null,4],\"631\":[null,3],\"632\":[null,4],\"633\":[null,3],\"634\":[null,2],\"635\":[null,1],\"636\":[null,2],\"637\":[null,3],\"638\":[null,3],\"639\":[null,3],\"640\":[2],\"641\":[null,7],\"642\":[null,1],\"643\":[2],\"644\":[null,5],\"645\":[null,5],\"646\":[null,6],\"647\":[null,5],\"648\":[null,10],\"649\":[null,9],\"650\":[null,7],\"651\":[null,6],\"652\":[2],\"653\":[null,13],\"654\":[1],\"655\":[2],\"656\":[null,10],\"657\":[3],\"658\":[null,34],\"659\":[2],\"660\":[null,14],\"661\":[null,1],\"662\":[null,1],\"663\":[null,8],\"664\":[null,2],\"665\":[null,2],\"666\":[null,3],\"667\":[null,1],\"668\":[2],\"669\":[null,5],\"670\":[null,5],\"671\":[null,6],\"672\":[null,10],\"673\":[null,2],\"674\":[null,4],\"675\":[null,1],\"676\":[null,3],\"677\":[1],\"678\":[null,10],\"679\":[2],\"680\":[2],\"681\":[null,4],\"682\":[null,10],\"683\":[null,7],\"684\":[2],\"685\":[null,8],\"686\":[null,24],\"687\":[2],\"688\":[null,9],\"689\":[3],\"690\":[null,4],\"691\":[null,4],\"692\":[null,3],\"693\":[null,4],\"694\":[null,12],\"695\":[3],\"696\":[null,4],\"697\":[null,6],\"698\":[null,9],\"699\":[null,13],\"700\":[null,5],\"701\":[null,9],\"702\":[2],\"703\":[null,1],\"704\":[null,8],\"705\":[null,1],\"706\":[null,7],\"707\":[2],\"708\":[null,4],\"709\":[null,7],\"710\":[null,8],\"711\":[null,6],\"712\":[null,5],\"713\":[2],\"714\":[null,11],\"715\":[null,3],\"716\":[null,7],\"717\":[null,7],\"718\":[null,5],\"719\":[null,10],\"720\":[null,3],\"721\":[null,7],\"722\":[2],\"723\":[null,4],\"724\":[null,7],\"725\":[null,4],\"726\":[null,4],\"727\":[null,16],\"728\":[null,9],\"729\":[2],\"730\":[null,5],\"731\":[null,4],\"732\":[null,6],\"733\":[null,9],\"734\":[null,4],\"735\":[2],\"736\":[2],\"737\":[null,3],\"738\":[null,6],\"739\":[null,7],\"740\":[null,5],\"741\":[null,5],\"742\":[null,10],\"743\":[null,4],\"744\":[null,12],\"745\":[null,6],\"746\":[5],\"747\":[null,3],\"748\":[null,2],\"749\":[null,65],\"750\":[null,9],\"751\":[null,2],\"752\":[null,46],\"753\":[null,3],\"754\":[null,5],\"755\":[null,5],\"756\":[null,6],\"757\":[null,2],\"758\":[null,11],\"759\":[null,3],\"760\":[null,2],\"761\":[null,1],\"762\":[null,4],\"763\":[null,19],\"764\":[null,13],\"765\":[2],\"766\":[null,6],\"767\":[null,7],\"768\":[null,5],\"769\":[null,5],\"770\":[null,12],\"771\":[3],\"772\":[4],\"773\":[null,2],\"774\":[null,34],\"775\":[null,2],\"776\":[null,11],\"777\":[null,5],\"778\":[null,40],\"779\":[null,2],\"780\":[null,4],\"781\":[null,4],\"782\":[3],\"783\":[null,2],\"784\":[null,10],\"785\":[null,2],\"786\":[null,29],\"787\":[null,2],\"788\":[null,31],\"789\":[null,3],\"790\":[null,1],\"791\":[null,7],\"792\":[2],\"793\":[null,1],\"794\":[null,1],\"795\":[null,11],\"796\":[null,1],\"797\":[null,1],\"798\":[null,3],\"799\":[null,4],\"800\":[null,3],\"801\":[null,4],\"802\":[null,4],\"803\":[null,7],\"804\":[null,12],\"805\":[null,3],\"806\":[null,10],\"807\":[null,4],\"808\":[null,3],\"809\":[null,3],\"810\":[null,2],\"811\":[2],\"812\":[3],\"813\":[3],\"814\":[null,8],\"815\":[null,2],\"816\":[null,35],\"817\":[2],\"818\":[null,6],\"819\":[null,8],\"820\":[null,27],\"821\":[null,37],\"822\":[2],\"823\":[3],\"824\":[null,4],\"825\":[null,6],\"826\":[null,8],\"827\":[3],\"828\":[null,3],\"829\":[null,6],\"830\":[3],\"831\":[null,11],\"832\":[2],\"833\":[2],\"834\":[4],\"835\":[null,6],\"836\":[4],\"837\":[null,11],\"838\":[null,11],\"839\":[4],\"840\":[null,11],\"841\":[null,10],\"842\":[4],\"843\":[null,8],\"844\":[null,7],\"845\":[null,7],\"846\":[null,5],\"847\":[null,10],\"848\":[2],\"849\":[null,8],\"850\":[null,5],\"851\":[null,22],\"852\":[null,9],\"853\":[null,18],\"854\":[null,13],\"855\":[2],\"856\":[null,3],\"857\":[null,5],\"858\":[null,17],\"859\":[null,8],\"860\":[null,7],\"861\":[null,26],\"862\":[null,9],\"863\":[5],\"864\":[null,11],\"865\":[null,8],\"866\":[2],\"867\":[3],\"868\":[null,10],\"869\":[null,17],\"870\":[6],\"871\":[null,9],\"872\":[4],\"873\":[null,5],\"874\":[3],\"875\":[null,10],\"876\":[3],\"877\":[null,13],\"878\":[3],\"879\":[null,13],\"880\":[null,10],\"881\":[2],\"882\":[null,4],\"883\":[null,2],\"884\":[null,4],\"885\":[null,4],\"886\":[null,1],\"887\":[null,1],\"888\":[null,3],\"889\":[null,8],\"890\":[null,4],\"891\":[null,16],\"892\":[null,7],\"893\":[null,16],\"894\":[null,6],\"895\":[null,8],\"896\":[null,7],\"897\":[null,18],\"898\":[3],\"899\":[null,6],\"900\":[null,6],\"901\":[null,4],\"902\":[2],\"903\":[2],\"904\":[null,5],\"905\":[null,6],\"906\":[null,3],\"907\":[null,9],\"908\":[null,8],\"909\":[3],\"910\":[null,3],\"911\":[null,11],\"912\":[null,3],\"913\":[null,2],\"914\":[null,4],\"915\":[null,1],\"916\":[null,2],\"917\":[null,13],\"918\":[null,3],\"919\":[null,5],\"920\":[null,4],\"921\":[null,14],\"922\":[null,5],\"923\":[4],\"924\":[null,10],\"925\":[null,28],\"926\":[null,5],\"927\":[null,4],\"928\":[null,6],\"929\":[null,6],\"930\":[null,24],\"931\":[null,7],\"932\":[null,12],\"933\":[null,1],\"934\":[null,6],\"935\":[4],\"936\":[null,7],\"937\":[null,3],\"938\":[null,7],\"939\":[null,6],\"940\":[null,13],\"941\":[null,8],\"942\":[null,2],\"943\":[null,42],\"944\":[null,2],\"945\":[null,12],\"946\":[null,3],\"947\":[null,1],\"948\":[null,6],\"949\":[2],\"950\":[null,11],\"951\":[null,5],\"952\":[2],\"953\":[4],\"954\":[null,15],\"955\":[null,1],\"956\":[null,15],\"957\":[3],\"958\":[null,11],\"959\":[null,2],\"960\":[null,10],\"961\":[null,14],\"962\":[null,10],\"963\":[null,22],\"964\":[null,1],\"965\":[null,3],\"966\":[null,3],\"967\":[null,5],\"968\":[null,30],\"969\":[null,19],\"970\":[null,6],\"971\":[null,1],\"972\":[null,5],\"973\":[null,9],\"974\":[null,10],\"975\":[null,5],\"976\":[null,14],\"977\":[null,5],\"978\":[null,1],\"979\":[null,4],\"980\":[null,5],\"981\":[null,11],\"982\":[null,6],\"983\":[null,14],\"984\":[null,8],\"985\":[null,6],\"986\":[null,2],\"987\":[null,12],\"988\":[null,8],\"989\":[null,21],\"990\":[null,3],\"991\":[null,6],\"992\":[null,4],\"993\":[null,3],\"994\":[null,6],\"995\":[null,1],\"996\":[null,32],\"997\":[null,5],\"998\":[null,9],\"999\":[null,18],\"1000\":[null,19],\"1001\":[null,11],\"1002\":[null,7],\"1003\":[null,1],\"1004\":[null,3],\"1005\":[null,5],\"1006\":[null,17],\"1007\":[null,5],\"1008\":[null,3],\"1009\":[null,3],\"1010\":[null,7],\"1011\":[null,7],\"1012\":[null,7],\"1013\":[null,5],\"1014\":[null,52],\"1015\":[null,14],\"1016\":[null,5],\"1017\":[null,20],\"1018\":[null,8],\"1019\":[null,10],\"1020\":[null,17],\"1021\":[null,22],\"1022\":[null,5],\"1023\":[null,6],\"1024\":[null,10],\"1025\":[null,4],\"1026\":[null,5],\"1027\":[null,5],\"1028\":[null,12],\"1029\":[null,12],\"1030\":[3],\"1031\":[null,17],\"1032\":[null,5],\"1033\":[null,12],\"1034\":[2],\"1035\":[null,6],\"1036\":[null,8],\"1037\":[null,4],\"1038\":[null,11],\"1039\":[null,6],\"1040\":[2],\"1041\":[null,10],\"1042\":[1],\"1043\":[6],\"1044\":[1],\"1045\":[null,15],\"1046\":[null,17],\"1047\":[null,13],\"1048\":[null,2],\"1049\":[null,5],\"1050\":[null,7],\"1051\":[1],\"1052\":[1],\"1053\":[null,22],\"1054\":[null,2],\"1055\":[null,7],\"1056\":[null,7],\"1057\":[null,19],\"1058\":[null,12],\"1059\":[null,14],\"1060\":[null,10],\"1061\":[null,10],\"1062\":[null,6],\"1063\":[null,11],\"1064\":[null,9],\"1065\":[null,10],\"1066\":[null,8],\"1067\":[null,3],\"1068\":[1],\"1069\":[null,9],\"1070\":[null,5],\"1071\":[null,6],\"1072\":[null,10],\"1073\":[null,5],\"1074\":[null,4],\"1075\":[null,10],\"1076\":[1],\"1077\":[4],\"1078\":[null,4],\"1079\":[null,1],\"1080\":[null,6],\"1081\":[null,4],\"1082\":[null,5],\"1083\":[null,5],\"1084\":[null,2],\"1085\":[null,4],\"1086\":[null,8],\"1087\":[null,3],\"1088\":[null,4],\"1089\":[3],\"1090\":[null,3],\"1091\":[null,12],\"1092\":[null,9],\"1093\":[null,8],\"1094\":[null,9],\"1095\":[null,15],\"1096\":[3],\"1097\":[null,11],\"1098\":[null,2],\"1099\":[null,8],\"1100\":[null,8],\"1101\":[null,8],\"1102\":[null,2],\"1103\":[null,8],\"1104\":[null,8],\"1105\":[null,7],\"1106\":[null,2],\"1107\":[null,9],\"1108\":[2],\"1109\":[null,7],\"1110\":[null,2],\"1111\":[null,1],\"1112\":[null,5],\"1113\":[null,7],\"1114\":[null,7],\"1115\":[null,2],\"1116\":[null,16],\"1117\":[null,2],\"1118\":[null,15],\"1119\":[null,2],\"1120\":[null,3],\"1121\":[null,1],\"1122\":[null,3],\"1123\":[null,8],\"1124\":[null,16],\"1125\":[null,3],\"1126\":[null,1],\"1127\":[null,4],\"1128\":[null,7],\"1129\":[null,12],\"1130\":[null,3],\"1131\":[null,1],\"1132\":[null,21],\"1133\":[null,13],\"1134\":[null,7],\"1135\":[null,3],\"1136\":[null,7],\"1137\":[null,13],\"1138\":[2],\"1139\":[null,22],\"1140\":[null,14],\"1141\":[null,1],\"1142\":[null,8],\"1143\":[null,1],\"1144\":[null,16],\"1145\":[null,1],\"1146\":[null,13],\"1147\":[null,1],\"1148\":[null,15],\"1149\":[4],\"1150\":[null,2],\"1151\":[null,8],\"1152\":[null,1],\"1153\":[5],\"1154\":[null,15],\"1155\":[null,5],\"1156\":[null,5],\"1157\":[null,2],\"1158\":[null,13],\"1159\":[null,29],\"1160\":[1],\"1161\":[null,2],\"1162\":[null,4],\"1163\":[null,2],\"1164\":[null,5],\"1165\":[null,2],\"1166\":[null,3],\"1167\":[1],\"1168\":[null,27],\"1169\":[null,12],\"1170\":[1],\"1171\":[1],\"1172\":[null,15],\"1173\":[null,3],\"1174\":[null,5],\"1175\":[null,3],\"1176\":[1],\"1177\":[null,1],\"1178\":[null,15],\"1179\":[null,27],\"1180\":[5],\"1181\":[null,15],\"1182\":[null,2],\"1183\":[null,8],\"1184\":[null,5],\"1185\":[null,5],\"1186\":[null,10],\"1187\":[null,1],\"1188\":[null,2],\"1189\":[null,6],\"1190\":[null,1],\"1191\":[null,1],\"1192\":[null,1],\"1193\":[2],\"1194\":[null,6],\"1195\":[null,4],\"1196\":[null,6],\"1197\":[null,4],\"1198\":[null,4],\"1199\":[null,5],\"1200\":[null,1],\"1201\":[null,4],\"1202\":[2],\"1203\":[1],\"1204\":[null,1],\"1205\":[null,2],\"1206\":[null,1],\"1207\":[null,1],\"1208\":[null,1],\"1209\":[null,9],\"1210\":[4],\"1211\":[null,2],\"1212\":[null,10],\"1213\":[null,5],\"1214\":[null,3],\"1215\":[null,12],\"1216\":[null,12],\"1217\":[null,15],\"1218\":[null,11],\"1219\":[5],\"1220\":[2],\"1221\":[null,34],\"1222\":[2],\"1223\":[null,28],\"1224\":[null,2],\"1225\":[null,1],\"1226\":[null,3],\"1227\":[null,1],\"1228\":[null,20],\"1229\":[2],\"1230\":[null,10],\"1231\":[null,1],\"1232\":[2],\"1233\":[null,3],\"1234\":[null,3],\"1235\":[null,13],\"1236\":[null,5],\"1237\":[null,7],\"1238\":[null,8],\"1239\":[null,3],\"1240\":[null,2],\"1241\":[null,1],\"1242\":[null,10],\"1243\":[1],\"1244\":[1],\"1245\":[null,3],\"1246\":[null,2],\"1247\":[null,2],\"1248\":[null,5],\"1249\":[null,6],\"1250\":[null,3],\"1251\":[null,19],\"1252\":[null,13],\"1253\":[1],\"1254\":[2],\"1255\":[null,1],\"1256\":[null,3],\"1257\":[null,3],\"1258\":[null,5],\"1259\":[null,1],\"1260\":[null,3],\"1261\":[null,4],\"1262\":[null,8],\"1263\":[null,77],\"1264\":[2],\"1265\":[null,1],\"1266\":[null,10],\"1267\":[null,6],\"1268\":[null,1],\"1269\":[null,10],\"1270\":[null,2],\"1271\":[null,2],\"1272\":[null,69],\"1273\":[null,13],\"1274\":[null,2],\"1275\":[null,3],\"1276\":[null,6],\"1277\":[null,4],\"1278\":[null,4],\"1279\":[null,1],\"1280\":[null,13],\"1281\":[null,2],\"1282\":[null,19],\"1283\":[null,2],\"1284\":[null,4],\"1285\":[null,1],\"1286\":[null,11],\"1287\":[null,2],\"1288\":[null,2],\"1289\":[null,5],\"1290\":[null,5],\"1291\":[null,7],\"1292\":[null,6],\"1293\":[null,2],\"1294\":[null,5],\"1295\":[null,28],\"1296\":[1],\"1297\":[1],\"1298\":[null,29],\"1299\":[1],\"1300\":[null,2],\"1301\":[null,1],\"1302\":[null,10],\"1303\":[null,4],\"1304\":[null,32],\"1305\":[2],\"1306\":[2],\"1307\":[null,5],\"1308\":[2],\"1309\":[null,10],\"1310\":[null,1],\"1311\":[null,5],\"1312\":[null,1],\"1313\":[2],\"1314\":[null,8],\"1315\":[null,1],\"1316\":[null,5],\"1317\":[null,1],\"1318\":[null,10],\"1319\":[1],\"1320\":[1],\"1321\":[1],\"1322\":[1],\"1323\":[1],\"1324\":[1],\"1325\":[null,10],\"1326\":[1],\"1327\":[2],\"1328\":[2],\"1329\":[null,3],\"1330\":[null,1],\"1331\":[null,10],\"1332\":[null,6],\"1333\":[null,2],\"1334\":[null,14],\"1335\":[null,15],\"1336\":[null,8],\"1337\":[3],\"1338\":[null,2],\"1339\":[1],\"1340\":[2],\"1341\":[1],\"1342\":[2],\"1343\":[null,4],\"1344\":[null,13],\"1345\":[null,5],\"1346\":[null,8],\"1347\":[null,31],\"1348\":[null,6],\"1349\":[1],\"1350\":[1],\"1351\":[null,3],\"1352\":[null,2],\"1353\":[null,14],\"1354\":[null,7],\"1355\":[null,5],\"1356\":[null,14],\"1357\":[null,7],\"1358\":[null,7],\"1359\":[null,5],\"1360\":[null,4],\"1361\":[null,5],\"1362\":[null,6],\"1363\":[1],\"1364\":[null,5],\"1365\":[null,15],\"1366\":[null,5],\"1367\":[null,28],\"1368\":[null,7],\"1369\":[null,9],\"1370\":[null,11],\"1371\":[1],\"1372\":[3],\"1373\":[null,11],\"1374\":[null,15],\"1375\":[null,7],\"1376\":[null,11],\"1377\":[1],\"1378\":[null,7],\"1379\":[null,26],\"1380\":[null,19],\"1381\":[null,4],\"1382\":[null,1],\"1383\":[null,13],\"1384\":[null,10],\"1385\":[null,6],\"1386\":[null,11],\"1387\":[null,3],\"1388\":[null,14],\"1389\":[null,13],\"1390\":[null,12],\"1391\":[null,7],\"1392\":[null,7],\"1393\":[null,29],\"1394\":[null,9],\"1395\":[null,7],\"1396\":[null,13],\"1397\":[null,14],\"1398\":[1],\"1399\":[null,4],\"1400\":[null,3],\"1401\":[null,1],\"1402\":[null,7],\"1403\":[3],\"1404\":[null,9],\"1405\":[null,8],\"1406\":[null,7],\"1407\":[null,1],\"1408\":[null,2],\"1409\":[null,10],\"1410\":[null,10],\"1411\":[null,9],\"1412\":[null,7],\"1413\":[null,13],\"1414\":[1],\"1415\":[null,10],\"1416\":[null,16],\"1417\":[null,4],\"1418\":[null,11],\"1419\":[null,14],\"1420\":[null,1],\"1421\":[null,19],\"1422\":[null,15],\"1423\":[null,5],\"1424\":[null,12],\"1425\":[null,7],\"1426\":[null,1],\"1427\":[null,12],\"1428\":[null,14],\"1429\":[null,4],\"1430\":[1],\"1431\":[null,13],\"1432\":[null,11],\"1433\":[null,10],\"1434\":[1],\"1435\":[null,5],\"1436\":[null,5],\"1437\":[null,7],\"1438\":[null,5],\"1439\":[null,4],\"1440\":[null,4],\"1441\":[null,5],\"1442\":[null,5],\"1443\":[null,5],\"1444\":[null,5],\"1445\":[null,5],\"1446\":[null,11],\"1447\":[null,5],\"1448\":[null,5],\"1449\":[null,5],\"1450\":[null,5],\"1451\":[null,3],\"1452\":[null,5],\"1453\":[null,8],\"1454\":[null,5],\"1455\":[4],\"1456\":[null,12],\"1457\":[null,14],\"1458\":[null,6],\"1459\":[null,1],\"1460\":[null,6],\"1461\":[null,3],\"1462\":[null,3],\"1463\":[null,3],\"1464\":[null,13],\"1465\":[null,7],\"1466\":[null,16],\"1467\":[null,12],\"1468\":[null,5],\"1469\":[null,8],\"1470\":[null,7],\"1471\":[null,5],\"1472\":[null,7],\"1473\":[null,7],\"1474\":[null,6],\"1475\":[null,21],\"1476\":[4],\"1477\":[null,12],\"1478\":[null,7],\"1479\":[null,1],\"1480\":[null,2],\"1481\":[null,16],\"1482\":[null,12],\"1483\":[null,5],\"1484\":[null,5],\"1485\":[null,10],\"1486\":[null,13],\"1487\":[null,8],\"1488\":[null,7],\"1489\":[null,6],\"1490\":[null,6],\"1491\":[null,11],\"1492\":[null,7],\"1493\":[null,10],\"1494\":[4],\"1495\":[null,11],\"1496\":[null,8],\"1497\":[null,1],\"1498\":[null,2],\"1499\":[null,12],\"1500\":[null,11],\"1501\":[null,6],\"1502\":[null,8],\"1503\":[null,7],\"1504\":[null,4],\"1505\":[null,5],\"1506\":[null,12],\"1507\":[1],\"1508\":[2],\"1509\":[1],\"1510\":[2],\"1511\":[null,4],\"1512\":[null,13],\"1513\":[null,5],\"1514\":[null,8],\"1515\":[null,31],\"1516\":[null,6],\"1517\":[1],\"1518\":[1],\"1519\":[null,3],\"1520\":[null,2],\"1521\":[null,14],\"1522\":[null,7],\"1523\":[null,5],\"1524\":[null,14],\"1525\":[null,7],\"1526\":[null,7],\"1527\":[null,5],\"1528\":[null,4],\"1529\":[null,5],\"1530\":[null,6],\"1531\":[1],\"1532\":[null,5],\"1533\":[null,15],\"1534\":[null,5],\"1535\":[null,28],\"1536\":[null,7],\"1537\":[null,9],\"1538\":[null,11],\"1539\":[1],\"1540\":[3],\"1541\":[null,11],\"1542\":[null,15],\"1543\":[null,7],\"1544\":[null,11],\"1545\":[1],\"1546\":[null,7],\"1547\":[null,26],\"1548\":[null,19],\"1549\":[null,4],\"1550\":[null,1],\"1551\":[null,13],\"1552\":[null,10],\"1553\":[null,6],\"1554\":[null,11],\"1555\":[null,3],\"1556\":[null,14],\"1557\":[null,13],\"1558\":[null,12],\"1559\":[null,7],\"1560\":[null,7],\"1561\":[null,29],\"1562\":[null,9],\"1563\":[null,7],\"1564\":[null,13],\"1565\":[null,14],\"1566\":[1],\"1567\":[null,4],\"1568\":[null,3],\"1569\":[null,1],\"1570\":[null,7],\"1571\":[3],\"1572\":[null,9],\"1573\":[null,8],\"1574\":[null,7],\"1575\":[null,1],\"1576\":[null,2],\"1577\":[null,10],\"1578\":[null,10],\"1579\":[null,9],\"1580\":[null,7],\"1581\":[null,13],\"1582\":[1],\"1583\":[null,10],\"1584\":[null,16],\"1585\":[null,4],\"1586\":[null,11],\"1587\":[null,14],\"1588\":[null,1],\"1589\":[null,19],\"1590\":[null,15],\"1591\":[null,5],\"1592\":[null,12],\"1593\":[null,7],\"1594\":[null,1],\"1595\":[null,12],\"1596\":[null,14],\"1597\":[null,4],\"1598\":[1],\"1599\":[null,13],\"1600\":[null,11],\"1601\":[null,10],\"1602\":[1],\"1603\":[null,5],\"1604\":[null,5],\"1605\":[null,7],\"1606\":[null,5],\"1607\":[null,4],\"1608\":[null,4],\"1609\":[null,5],\"1610\":[null,5],\"1611\":[null,5],\"1612\":[null,5],\"1613\":[null,5],\"1614\":[null,11],\"1615\":[null,5],\"1616\":[null,5],\"1617\":[null,5],\"1618\":[null,5],\"1619\":[null,3],\"1620\":[null,5],\"1621\":[null,8],\"1622\":[null,5],\"1623\":[4],\"1624\":[null,12],\"1625\":[null,14],\"1626\":[null,6],\"1627\":[null,1],\"1628\":[null,6],\"1629\":[null,3],\"1630\":[null,3],\"1631\":[null,3],\"1632\":[null,13],\"1633\":[null,7],\"1634\":[null,16],\"1635\":[null,12],\"1636\":[null,5],\"1637\":[null,8],\"1638\":[null,7],\"1639\":[null,5],\"1640\":[null,7],\"1641\":[null,7],\"1642\":[null,6],\"1643\":[null,21],\"1644\":[4],\"1645\":[null,12],\"1646\":[null,7],\"1647\":[null,1],\"1648\":[null,2],\"1649\":[null,16],\"1650\":[null,12],\"1651\":[null,5],\"1652\":[null,5],\"1653\":[null,10],\"1654\":[null,13],\"1655\":[null,8],\"1656\":[null,7],\"1657\":[null,6],\"1658\":[null,6],\"1659\":[null,11],\"1660\":[null,7],\"1661\":[null,10],\"1662\":[4],\"1663\":[null,11],\"1664\":[null,8],\"1665\":[null,1],\"1666\":[null,2],\"1667\":[null,12],\"1668\":[null,11],\"1669\":[null,6],\"1670\":[null,8],\"1671\":[null,7],\"1672\":[null,4],\"1673\":[null,5],\"1674\":[null,12],\"1675\":[1],\"1676\":[2],\"1677\":[1],\"1678\":[2],\"1679\":[null,4],\"1680\":[null,13],\"1681\":[null,5],\"1682\":[null,8],\"1683\":[null,31],\"1684\":[null,6],\"1685\":[1],\"1686\":[1],\"1687\":[null,3],\"1688\":[null,2],\"1689\":[null,14],\"1690\":[null,7],\"1691\":[null,5],\"1692\":[null,14],\"1693\":[null,7],\"1694\":[null,7],\"1695\":[null,5],\"1696\":[null,4],\"1697\":[null,5],\"1698\":[null,6],\"1699\":[1],\"1700\":[null,5],\"1701\":[null,15],\"1702\":[null,5],\"1703\":[null,28],\"1704\":[null,7],\"1705\":[null,9],\"1706\":[null,11],\"1707\":[1],\"1708\":[3],\"1709\":[null,11],\"1710\":[null,15],\"1711\":[null,7],\"1712\":[null,11],\"1713\":[1],\"1714\":[null,7],\"1715\":[null,26],\"1716\":[null,19],\"1717\":[null,4],\"1718\":[null,1],\"1719\":[null,13],\"1720\":[null,10],\"1721\":[null,6],\"1722\":[null,11],\"1723\":[null,3],\"1724\":[null,14],\"1725\":[null,13],\"1726\":[null,12],\"1727\":[null,7],\"1728\":[null,7],\"1729\":[null,29],\"1730\":[null,9],\"1731\":[null,7],\"1732\":[null,13],\"1733\":[null,14],\"1734\":[1],\"1735\":[null,4],\"1736\":[null,3],\"1737\":[null,1],\"1738\":[null,7],\"1739\":[3],\"1740\":[null,9],\"1741\":[null,8],\"1742\":[null,7],\"1743\":[null,1],\"1744\":[null,2],\"1745\":[null,10],\"1746\":[null,10],\"1747\":[null,9],\"1748\":[null,7],\"1749\":[null,13],\"1750\":[1],\"1751\":[null,10],\"1752\":[null,16],\"1753\":[null,4],\"1754\":[null,11],\"1755\":[null,14],\"1756\":[null,1],\"1757\":[null,19],\"1758\":[null,15],\"1759\":[null,5],\"1760\":[null,12],\"1761\":[null,7],\"1762\":[null,1],\"1763\":[null,12],\"1764\":[null,14],\"1765\":[null,4],\"1766\":[1],\"1767\":[null,13],\"1768\":[null,11],\"1769\":[null,10],\"1770\":[1],\"1771\":[null,5],\"1772\":[null,5],\"1773\":[null,7],\"1774\":[null,5],\"1775\":[null,4],\"1776\":[null,4],\"1777\":[null,5],\"1778\":[null,5],\"1779\":[null,5],\"1780\":[null,5],\"1781\":[null,5],\"1782\":[null,11],\"1783\":[null,5],\"1784\":[null,5],\"1785\":[null,5],\"1786\":[null,5],\"1787\":[null,3],\"1788\":[null,5],\"1789\":[null,8],\"1790\":[null,5],\"1791\":[4],\"1792\":[null,12],\"1793\":[null,14],\"1794\":[null,6],\"1795\":[null,1],\"1796\":[null,6],\"1797\":[null,3],\"1798\":[null,3],\"1799\":[null,3],\"1800\":[null,13],\"1801\":[null,7],\"1802\":[null,16],\"1803\":[null,12],\"1804\":[null,5],\"1805\":[null,8],\"1806\":[null,7],\"1807\":[null,5],\"1808\":[null,7],\"1809\":[null,7],\"1810\":[null,6],\"1811\":[null,21],\"1812\":[4],\"1813\":[null,12],\"1814\":[null,7],\"1815\":[null,1],\"1816\":[null,2],\"1817\":[null,16],\"1818\":[null,12],\"1819\":[null,5],\"1820\":[null,5],\"1821\":[null,10],\"1822\":[null,13],\"1823\":[null,8],\"1824\":[null,7],\"1825\":[null,6],\"1826\":[null,6],\"1827\":[null,11],\"1828\":[null,7],\"1829\":[null,10],\"1830\":[4],\"1831\":[null,11],\"1832\":[null,8],\"1833\":[null,1],\"1834\":[null,2],\"1835\":[null,12],\"1836\":[null,11],\"1837\":[null,6],\"1838\":[null,8],\"1839\":[null,7],\"1840\":[null,4],\"1841\":[null,5],\"1842\":[null,12],\"1843\":[1],\"1844\":[2],\"1845\":[1],\"1846\":[2],\"1847\":[null,4],\"1848\":[null,13],\"1849\":[null,5],\"1850\":[null,8],\"1851\":[null,31],\"1852\":[null,6],\"1853\":[1],\"1854\":[1],\"1855\":[null,3],\"1856\":[null,2],\"1857\":[null,14],\"1858\":[null,7],\"1859\":[null,5],\"1860\":[null,14],\"1861\":[null,7],\"1862\":[null,7],\"1863\":[null,5],\"1864\":[null,4],\"1865\":[null,5],\"1866\":[null,6],\"1867\":[1],\"1868\":[null,5],\"1869\":[null,15],\"1870\":[null,5],\"1871\":[null,28],\"1872\":[null,7],\"1873\":[null,9],\"1874\":[null,11],\"1875\":[1],\"1876\":[3],\"1877\":[null,11],\"1878\":[null,15],\"1879\":[null,7],\"1880\":[null,11],\"1881\":[1],\"1882\":[null,7],\"1883\":[null,26],\"1884\":[null,19],\"1885\":[null,4],\"1886\":[null,1],\"1887\":[null,13],\"1888\":[null,10],\"1889\":[null,6],\"1890\":[null,11],\"1891\":[null,3],\"1892\":[null,14],\"1893\":[null,13],\"1894\":[null,12],\"1895\":[null,7],\"1896\":[null,7],\"1897\":[null,29],\"1898\":[null,9],\"1899\":[null,7],\"1900\":[null,13],\"1901\":[null,14],\"1902\":[1],\"1903\":[null,4],\"1904\":[null,3],\"1905\":[null,1],\"1906\":[null,7],\"1907\":[3],\"1908\":[null,9],\"1909\":[null,8],\"1910\":[null,7],\"1911\":[null,1],\"1912\":[null,2],\"1913\":[null,10],\"1914\":[null,10],\"1915\":[null,9],\"1916\":[null,7],\"1917\":[null,13],\"1918\":[1],\"1919\":[null,10],\"1920\":[null,16],\"1921\":[null,4],\"1922\":[null,11],\"1923\":[null,14],\"1924\":[null,1],\"1925\":[null,19],\"1926\":[null,15],\"1927\":[null,5],\"1928\":[null,12],\"1929\":[null,7],\"1930\":[null,1],\"1931\":[null,12],\"1932\":[null,14],\"1933\":[null,4],\"1934\":[1],\"1935\":[null,13],\"1936\":[null,11],\"1937\":[null,10],\"1938\":[1],\"1939\":[null,5],\"1940\":[null,5],\"1941\":[null,7],\"1942\":[null,5],\"1943\":[null,4],\"1944\":[null,4],\"1945\":[null,5],\"1946\":[null,5],\"1947\":[null,5],\"1948\":[null,5],\"1949\":[null,5],\"1950\":[null,11],\"1951\":[null,5],\"1952\":[null,5],\"1953\":[null,5],\"1954\":[null,5],\"1955\":[null,3],\"1956\":[null,5],\"1957\":[null,8],\"1958\":[null,5],\"1959\":[4],\"1960\":[null,12],\"1961\":[null,14],\"1962\":[null,6],\"1963\":[null,1],\"1964\":[null,6],\"1965\":[null,3],\"1966\":[null,3],\"1967\":[null,3],\"1968\":[null,13],\"1969\":[null,7],\"1970\":[null,16],\"1971\":[null,12],\"1972\":[null,5],\"1973\":[null,8],\"1974\":[null,7],\"1975\":[null,5],\"1976\":[null,7],\"1977\":[null,7],\"1978\":[null,6],\"1979\":[null,21],\"1980\":[4],\"1981\":[null,12],\"1982\":[null,7],\"1983\":[null,1],\"1984\":[null,2],\"1985\":[null,16],\"1986\":[null,12],\"1987\":[null,5],\"1988\":[null,5],\"1989\":[null,10],\"1990\":[null,13],\"1991\":[null,8],\"1992\":[null,7],\"1993\":[null,6],\"1994\":[null,6],\"1995\":[null,11],\"1996\":[null,7],\"1997\":[null,10],\"1998\":[4],\"1999\":[null,11],\"2000\":[null,8],\"2001\":[null,1],\"2002\":[null,2],\"2003\":[null,12],\"2004\":[null,11],\"2005\":[null,6],\"2006\":[null,8],\"2007\":[null,7],\"2008\":[null,4],\"2009\":[null,5],\"2010\":[null,12],\"2011\":[1],\"2012\":[1],\"2013\":[3],\"2014\":[null,3],\"2015\":[null,25],\"2016\":[null,6],\"2017\":[null,8],\"2018\":[1],\"2019\":[null,9],\"2020\":[null,1],\"2021\":[null,8],\"2022\":[null,10],\"2023\":[null,8],\"2024\":[null,13],\"2025\":[null,8],\"2026\":[null,7],\"2027\":[null,8],\"2028\":[1],\"2029\":[2],\"2030\":[2],\"2031\":[3],\"2032\":[null,21],\"2033\":[1],\"2034\":[null,4],\"2035\":[null,12],\"2036\":[null,2],\"2037\":[null,2],\"2038\":[null,1],\"2039\":[null,1],\"2040\":[null,1],\"2041\":[null,1],\"2042\":[null,1],\"2043\":[null,1],\"2044\":[null,1],\"2045\":[null,5],\"2046\":[null,4],\"2047\":[null,8],\"2048\":[null,6],\"2049\":[null,4],\"2050\":[null,7],\"2051\":[null,1],\"2052\":[null,6],\"2053\":[null,7],\"2054\":[null,4],\"2055\":[null,2],\"2056\":[2],\"2057\":[null,1],\"2058\":[null,3],\"2059\":[null,1],\"2060\":[null,6],\"2061\":[null,2],\"2062\":[null,33],\"2063\":[null,2],\"2064\":[null,8],\"2065\":[null,2],\"2066\":[null,45],\"2067\":[null,3],\"2068\":[null,1],\"2069\":[null,2],\"2070\":[null,3],\"2071\":[null,1],\"2072\":[null,6],\"2073\":[null,1],\"2074\":[null,6],\"2075\":[null,6],\"2076\":[null,3],\"2077\":[null,3],\"2078\":[null,11],\"2079\":[null,2],\"2080\":[null,2],\"2081\":[null,3],\"2082\":[null,2],\"2083\":[null,5],\"2084\":[null,2],\"2085\":[null,9],\"2086\":[1],\"2087\":[null,11],\"2088\":[null,1],\"2089\":[null,15],\"2090\":[null,2],\"2091\":[null,15],\"2092\":[1],\"2093\":[1],\"2094\":[1],\"2095\":[null,6],\"2096\":[null,19],\"2097\":[null,12],\"2098\":[null,5],\"2099\":[null,25],\"2100\":[1],\"2101\":[2],\"2102\":[null,14],\"2103\":[3],\"2104\":[null,3],\"2105\":[null,18],\"2106\":[null,18],\"2107\":[2],\"2108\":[null,12],\"2109\":[2],\"2110\":[null,13],\"2111\":[null,6],\"2112\":[null,8],\"2113\":[null,4],\"2114\":[null,11],\"2115\":[1],\"2116\":[null,17],\"2117\":[null,17],\"2118\":[null,15],\"2119\":[null,21],\"2120\":[null,11],\"2121\":[1],\"2122\":[null,11],\"2123\":[null,12],\"2124\":[null,25],\"2125\":[null,39],\"2126\":[null,9],\"2127\":[null,11],\"2128\":[null,16],\"2129\":[null,32],\"2130\":[null,19],\"2131\":[null,8],\"2132\":[null,4],\"2133\":[null,9],\"2134\":[null,14],\"2135\":[null,2],\"2136\":[null,23],\"2137\":[null,1],\"2138\":[null,2],\"2139\":[null,17],\"2140\":[null,2],\"2141\":[null,34],\"2142\":[null,1],\"2143\":[1],\"2144\":[1],\"2145\":[null,11],\"2146\":[null,1],\"2147\":[null,8],\"2148\":[null,3],\"2149\":[null,5],\"2150\":[null,6],\"2151\":[null,2],\"2152\":[null,9],\"2153\":[5],\"2154\":[null,16],\"2155\":[null,20],\"2156\":[null,11],\"2157\":[null,17],\"2158\":[null,17],\"2159\":[null,8],\"2160\":[null,12],\"2161\":[1],\"2162\":[1],\"2163\":[3],\"2164\":[10],\"2165\":[null,18],\"2166\":[6],\"2167\":[null,18],\"2168\":[2],\"2169\":[null,11],\"2170\":[3],\"2171\":[null,4],\"2172\":[null,4],\"2173\":[null,2],\"2174\":[null,4],\"2175\":[null,5],\"2176\":[null,5],\"2177\":[null,8],\"2178\":[null,6],\"2179\":[null,10],\"2180\":[5],\"2181\":[null,3],\"2182\":[null,6],\"2183\":[8],\"2184\":[null,16],\"2185\":[6],\"2186\":[null,6],\"2187\":[6],\"2188\":[null,9],\"2189\":[6],\"2190\":[null,2],\"2191\":[6],\"2192\":[null,8],\"2193\":[null,10],\"2194\":[4],\"2195\":[null,10],\"2196\":[null,12],\"2197\":[null,9],\"2198\":[null,5],\"2199\":[null,9],\"2200\":[null,8],\"2201\":[7],\"2202\":[null,7],\"2203\":[5],\"2204\":[null,4],\"2205\":[2],\"2206\":[null,6],\"2207\":[null,11],\"2208\":[null,3],\"2209\":[4],\"2210\":[null,5],\"2211\":[null,9],\"2212\":[null,8],\"2213\":[null,11],\"2214\":[null,5],\"2215\":[3],\"2216\":[null,3],\"2217\":[null,12],\"2218\":[null,4],\"2219\":[null,2],\"2220\":[3],\"2221\":[null,6],\"2222\":[null,11],\"2223\":[null,3],\"2224\":[4],\"2225\":[null,5],\"2226\":[null,9],\"2227\":[null,8],\"2228\":[null,11],\"2229\":[null,5],\"2230\":[3],\"2231\":[null,3],\"2232\":[null,12],\"2233\":[null,4],\"2234\":[null,2],\"2235\":[2],\"2236\":[null,6],\"2237\":[null,11],\"2238\":[2],\"2239\":[4],\"2240\":[null,5],\"2241\":[null,9],\"2242\":[null,8],\"2243\":[null,11],\"2244\":[null,5],\"2245\":[3],\"2246\":[null,3],\"2247\":[null,12],\"2248\":[2],\"2249\":[null,6],\"2250\":[null,11],\"2251\":[2],\"2252\":[4],\"2253\":[null,5],\"2254\":[null,9],\"2255\":[null,8],\"2256\":[null,11],\"2257\":[null,5],\"2258\":[3],\"2259\":[null,3],\"2260\":[null,12],\"2261\":[2],\"2262\":[null,6],\"2263\":[null,11],\"2264\":[null,3],\"2265\":[4],\"2266\":[null,5],\"2267\":[null,9],\"2268\":[null,8],\"2269\":[null,11],\"2270\":[null,5],\"2271\":[3],\"2272\":[null,3],\"2273\":[null,12],\"2274\":[null,4],\"2275\":[null,2],\"2276\":[2],\"2277\":[null,6],\"2278\":[null,11],\"2279\":[null,3],\"2280\":[4],\"2281\":[null,5],\"2282\":[null,9],\"2283\":[null,8],\"2284\":[null,11],\"2285\":[null,5],\"2286\":[3],\"2287\":[null,3],\"2288\":[null,12],\"2289\":[null,4],\"2290\":[null,2],\"2291\":[2],\"2292\":[null,7],\"2293\":[null,3],\"2294\":[null,2],\"2295\":[null,3],\"2296\":[null,5],\"2297\":[null,3],\"2298\":[null,4],\"2299\":[null,4],\"2300\":[null,6],\"2301\":[null,5],\"2302\":[null,2],\"2303\":[null,3],\"2304\":[null,6],\"2305\":[null,4],\"2306\":[null,5],\"2307\":[null,4],\"2308\":[null,9],\"2309\":[null,3],\"2310\":[null,3],\"2311\":[null,3],\"2312\":[null,5],\"2313\":[null,2],\"2314\":[null,3],\"2315\":[null,2],\"2316\":[null,3],\"2317\":[null,3],\"2318\":[null,3],\"2319\":[null,3],\"2320\":[null,6],\"2321\":[null,5],\"2322\":[null,4],\"2323\":[null,4],\"2324\":[null,5],\"2325\":[null,5],\"2326\":[null,3],\"2327\":[null,3],\"2328\":[null,3],\"2329\":[null,6],\"2330\":[null,5],\"2331\":[null,3],\"2332\":[null,5],\"2333\":[null,6],\"2334\":[null,6],\"2335\":[2],\"2336\":[4],\"2337\":[null,3],\"2338\":[null,13],\"2339\":[null,7],\"2340\":[null,2],\"2341\":[null,11],\"2342\":[null,8],\"2343\":[null,9],\"2344\":[null,13],\"2345\":[6],\"2346\":[null,14],\"2347\":[null,7],\"2348\":[4],\"2349\":[null,6],\"2350\":[null,2],\"2351\":[null,9],\"2352\":[null,5],\"2353\":[null,24],\"2354\":[5],\"2355\":[null,7],\"2356\":[null,2],\"2357\":[null,4],\"2358\":[null,2],\"2359\":[null,2],\"2360\":[5],\"2361\":[null,4],\"2362\":[null,5],\"2363\":[null,5],\"2364\":[null,5],\"2365\":[null,5],\"2366\":[null,2],\"2367\":[null,7],\"2368\":[null,3],\"2369\":[null,6],\"2370\":[null,1],\"2371\":[null,17],\"2372\":[null,6],\"2373\":[7],\"2374\":[null,2],\"2375\":[7],\"2376\":[null,2],\"2377\":[null,4],\"2378\":[null,4],\"2379\":[null,2],\"2380\":[null,4],\"2381\":[null,4],\"2382\":[null,2],\"2383\":[null,7],\"2384\":[null,12],\"2385\":[null,3],\"2386\":[null,4],\"2387\":[null,6],\"2388\":[null,2],\"2389\":[null,11],\"2390\":[null,7],\"2391\":[null,2],\"2392\":[null,5],\"2393\":[null,5],\"2394\":[null,2],\"2395\":[null,11],\"2396\":[null,12],\"2397\":[7],\"2398\":[null,6],\"2399\":[null,3],\"2400\":[null,3],\"2401\":[null,8],\"2402\":[null,6],\"2403\":[null,3],\"2404\":[null,2],\"2405\":[null,2],\"2406\":[null,10],\"2407\":[null,11],\"2408\":[null,10],\"2409\":[null,11],\"2410\":[6],\"2411\":[null,3],\"2412\":[null,3],\"2413\":[null,6],\"2414\":[null,15],\"2415\":[null,11],\"2416\":[null,6],\"2417\":[2],\"2418\":[4],\"2419\":[7],\"2420\":[5],\"2421\":[6],\"2422\":[5],\"2423\":[10],\"2424\":[4],\"2425\":[4],\"2426\":[4],\"2427\":[6],\"2428\":[2],\"2429\":[4],\"2430\":[3],\"2431\":[4],\"2432\":[4],\"2433\":[4],\"2434\":[4],\"2435\":[7],\"2436\":[6],\"2437\":[5],\"2438\":[5],\"2439\":[6],\"2440\":[6],\"2441\":[4],\"2442\":[4],\"2443\":[3],\"2444\":[7],\"2445\":[6],\"2446\":[4],\"2447\":[6],\"2448\":[7],\"2449\":[7],\"2450\":[1],\"2451\":[3],\"2452\":[null,1],\"2453\":[null,15],\"2454\":[null,2],\"2455\":[null,2],\"2456\":[null,2],\"2457\":[null,3],\"2458\":[null,3],\"2459\":[null,1],\"2460\":[null,1],\"2461\":[2],\"2462\":[null,2],\"2463\":[3],\"2464\":[null,1],\"2465\":[1],\"2466\":[1],\"2467\":[1],\"2468\":[1],\"2469\":[null,23],\"2470\":[null,5],\"2471\":[null,22],\"2472\":[null,3],\"2473\":[null,4],\"2474\":[null,2],\"2475\":[3],\"2476\":[null,13],\"2477\":[null,13],\"2478\":[null,18],\"2479\":[null,15],\"2480\":[null,7],\"2481\":[null,32],\"2482\":[null,16],\"2483\":[null,21],\"2484\":[null,16],\"2485\":[null,15],\"2486\":[null,5],\"2487\":[3],\"2488\":[null,29],\"2489\":[null,19],\"2490\":[null,9],\"2491\":[null,11],\"2492\":[null,14],\"2493\":[null,20],\"2494\":[null,13],\"2495\":[null,8],\"2496\":[null,9],\"2497\":[null,12],\"2498\":[null,12],\"2499\":[1],\"2500\":[3],\"2501\":[null,7],\"2502\":[null,3],\"2503\":[6],\"2504\":[null,7],\"2505\":[null,23],\"2506\":[null,21],\"2507\":[null,17],\"2508\":[7],\"2509\":[null,16],\"2510\":[null,13],\"2511\":[null,12],\"2512\":[null,14],\"2513\":[7],\"2514\":[null,30],\"2515\":[null,19],\"2516\":[null,28],\"2517\":[1],\"2518\":[5],\"2519\":[null,7],\"2520\":[null,9],\"2521\":[null,24],\"2522\":[null,12],\"2523\":[1],\"2524\":[null,8],\"2525\":[null,3],\"2526\":[null,7],\"2527\":[null,8],\"2528\":[null,2],\"2529\":[null,4],\"2530\":[null,5],\"2531\":[null,6],\"2532\":[null,5],\"2533\":[null,6],\"2534\":[null,7],\"2535\":[2],\"2536\":[null,17],\"2537\":[null,20],\"2538\":[null,15],\"2539\":[null,13],\"2540\":[null,10],\"2541\":[null,14],\"2542\":[null,8],\"2543\":[null,7],\"2544\":[2],\"2545\":[4],\"2546\":[null,15],\"2547\":[null,2],\"2548\":[null,2],\"2549\":[null,2],\"2550\":[null,3],\"2551\":[null,3],\"2552\":[null,1],\"2553\":[null,1],\"2554\":[3],\"2555\":[4],\"2556\":[1],\"2557\":[1],\"2558\":[1],\"2559\":[5],\"2560\":[null,8],\"2561\":[null,11],\"2562\":[null,7],\"2563\":[null,3],\"2564\":[null,2],\"2565\":[null,12],\"2566\":[null,9],\"2567\":[null,2],\"2568\":[null,3],\"2569\":[null,23],\"2570\":[null,2],\"2571\":[null,6],\"2572\":[null,7],\"2573\":[null,5],\"2574\":[null,2],\"2575\":[null,6],\"2576\":[null,8],\"2577\":[null,3],\"2578\":[null,6],\"2579\":[null,10],\"2580\":[null,3],\"2581\":[null,9],\"2582\":[null,13],\"2583\":[1],\"2584\":[null,3],\"2585\":[2],\"2586\":[null,2],\"2587\":[null,10],\"2588\":[null,15],\"2589\":[null,15],\"2590\":[null,3],\"2591\":[null,15],\"2592\":[null,7],\"2593\":[null,4],\"2594\":[null,11],\"2595\":[null,4],\"2596\":[null,9],\"2597\":[null,15],\"2598\":[null,20],\"2599\":[null,37],\"2600\":[1],\"2601\":[null,2],\"2602\":[null,18],\"2603\":[null,4],\"2604\":[null,12],\"2605\":[null,14],\"2606\":[null,2],\"2607\":[null,6],\"2608\":[null,13],\"2609\":[null,2],\"2610\":[null,8],\"2611\":[null,3],\"2612\":[null,7],\"2613\":[null,5],\"2614\":[null,5],\"2615\":[null,14],\"2616\":[2],\"2617\":[null,2],\"2618\":[null,5],\"2619\":[null,16],\"2620\":[null,1],\"2621\":[2],\"2622\":[null,9],\"2623\":[null,4],\"2624\":[null,6],\"2625\":[null,11],\"2626\":[null,7],\"2627\":[null,7],\"2628\":[null,15],\"2629\":[null,1],\"2630\":[2],\"2631\":[null,8],\"2632\":[null,13],\"2633\":[null,2],\"2634\":[null,12],\"2635\":[null,3],\"2636\":[null,2],\"2637\":[null,11],\"2638\":[null,8],\"2639\":[2],\"2640\":[null,16],\"2641\":[null,4],\"2642\":[null,2],\"2643\":[null,3],\"2644\":[null,2],\"2645\":[null,3],\"2646\":[null,6],\"2647\":[2],\"2648\":[null,19],\"2649\":[null,5],\"2650\":[null,12],\"2651\":[2],\"2652\":[null,8],\"2653\":[null,1],\"2654\":[null,25],\"2655\":[null,1],\"2656\":[null,14],\"2657\":[2],\"2658\":[null,2],\"2659\":[null,15],\"2660\":[null,3],\"2661\":[null,6],\"2662\":[null,5],\"2663\":[null,8],\"2664\":[null,2],\"2665\":[null,6],\"2666\":[null,2],\"2667\":[null,6],\"2668\":[null,4],\"2669\":[null,11],\"2670\":[null,2],\"2671\":[null,14],\"2672\":[null,2],\"2673\":[null,16],\"2674\":[null,2],\"2675\":[null,4],\"2676\":[null,2],\"2677\":[null,3],\"2678\":[null,4],\"2679\":[null,3],\"2680\":[null,4],\"2681\":[null,7],\"2682\":[null,6],\"2683\":[null,1],\"2684\":[1],\"2685\":[null,7],\"2686\":[null,1],\"2687\":[2],\"2688\":[null,3],\"2689\":[null,6],\"2690\":[null,5],\"2691\":[null,6],\"2692\":[null,7],\"2693\":[null,3],\"2694\":[null,3],\"2695\":[null,2],\"2696\":[null,5],\"2697\":[null,2],\"2698\":[null,3],\"2699\":[null,7],\"2700\":[null,4],\"2701\":[null,12],\"2702\":[null,8],\"2703\":[null,12],\"2704\":[null,4],\"2705\":[null,6],\"2706\":[2],\"2707\":[null,3],\"2708\":[null,2],\"2709\":[null,3],\"2710\":[null,2],\"2711\":[null,4],\"2712\":[1],\"2713\":[null,2],\"2714\":[null,6],\"2715\":[null,12],\"2716\":[null,4],\"2717\":[null,7],\"2718\":[null,4],\"2719\":[null,3],\"2720\":[null,4],\"2721\":[null,7],\"2722\":[1],\"2723\":[null,3],\"2724\":[null,5],\"2725\":[null,7],\"2726\":[null,5],\"2727\":[null,6],\"2728\":[null,14],\"2729\":[null,15],\"2730\":[null,4],\"2731\":[null,5],\"2732\":[null,8],\"2733\":[null,12],\"2734\":[null,11],\"2735\":[null,15],\"2736\":[null,12],\"2737\":[null,7],\"2738\":[null,10],\"2739\":[null,11],\"2740\":[1],\"2741\":[null,3],\"2742\":[null,8],\"2743\":[null,8],\"2744\":[null,8],\"2745\":[null,9],\"2746\":[null,5],\"2747\":[null,12],\"2748\":[null,11],\"2749\":[null,4],\"2750\":[null,9],\"2751\":[null,11],\"2752\":[null,3],\"2753\":[3],\"2754\":[null,6],\"2755\":[null,8],\"2756\":[null,6],\"2757\":[null,12],\"2758\":[null,11],\"2759\":[null,7],\"2760\":[null,10],\"2761\":[null,9],\"2762\":[null,13],\"2763\":[null,13],\"2764\":[null,11],\"2765\":[null,8],\"2766\":[null,5],\"2767\":[null,6],\"2768\":[null,17],\"2769\":[null,10],\"2770\":[null,16],\"2771\":[2],\"2772\":[null,6],\"2773\":[null,9],\"2774\":[null,10],\"2775\":[null,14],\"2776\":[null,8],\"2777\":[null,1],\"2778\":[null,2],\"2779\":[null,5],\"2780\":[null,6],\"2781\":[null,10],\"2782\":[2],\"2783\":[null,10],\"2784\":[null,11],\"2785\":[null,10],\"2786\":[2],\"2787\":[null,6],\"2788\":[null,13],\"2789\":[null,11],\"2790\":[3],\"2791\":[null,12],\"2792\":[null,7],\"2793\":[null,11],\"2794\":[null,14],\"2795\":[null,10],\"2796\":[1],\"2797\":[null,7],\"2798\":[null,8],\"2799\":[null,5],\"2800\":[null,7],\"2801\":[null,10],\"2802\":[1],\"2803\":[null,7],\"2804\":[null,11],\"2805\":[null,6],\"2806\":[null,17],\"2807\":[null,38],\"2808\":[null,12],\"2809\":[null,6],\"2810\":[null,3],\"2811\":[null,6],\"2812\":[null,6],\"2813\":[null,5],\"2814\":[null,2],\"2815\":[1],\"2816\":[null,8],\"2817\":[null,2],\"2818\":[null,17],\"2819\":[null,11],\"2820\":[1],\"2821\":[null,6],\"2822\":[null,2],\"2823\":[null,16],\"2824\":[1],\"2825\":[null,7],\"2826\":[null,2],\"2827\":[null,16],\"2828\":[null,11],\"2829\":[null,12],\"2830\":[1],\"2831\":[null,6],\"2832\":[null,6],\"2833\":[null,6],\"2834\":[null,9],\"2835\":[null,8],\"2836\":[null,2],\"2837\":[null,1],\"2838\":[null,4],\"2839\":[null,6],\"2840\":[null,6],\"2841\":[null,6],\"2842\":[null,6],\"2843\":[null,11],\"2844\":[null,13],\"2845\":[null,14],\"2846\":[null,7],\"2847\":[null,14],\"2848\":[null,20],\"2849\":[null,2],\"2850\":[null,6],\"2851\":[null,5],\"2852\":[null,24],\"2853\":[1],\"2854\":[null,25],\"2855\":[null,1],\"2856\":[null,5],\"2857\":[null,16],\"2858\":[null,10],\"2859\":[null,9],\"2860\":[null,4],\"2861\":[null,30],\"2862\":[null,2],\"2863\":[null,10],\"2864\":[null,15],\"2865\":[null,16],\"2866\":[null,9],\"2867\":[null,2],\"2868\":[2],\"2869\":[null,4],\"2870\":[null,1],\"2871\":[null,9],\"2872\":[null,10],\"2873\":[null,13],\"2874\":[1],\"2875\":[null,3],\"2876\":[null,4],\"2877\":[null,10],\"2878\":[1],\"2879\":[1],\"2880\":[null,2],\"2881\":[3],\"2882\":[null,3],\"2883\":[null,5],\"2884\":[1],\"2885\":[null,4],\"2886\":[3],\"2887\":[null,3],\"2888\":[null,2],\"2889\":[null,14],\"2890\":[null,6],\"2891\":[1],\"2892\":[null,4],\"2893\":[1],\"2894\":[null,4],\"2895\":[1],\"2896\":[null,10],\"2897\":[3],\"2898\":[5],\"2899\":[null,6],\"2900\":[null,2],\"2901\":[null,3],\"2902\":[4],\"2903\":[null,15],\"2904\":[null,15],\"2905\":[1],\"2906\":[1],\"2907\":[3],\"2908\":[null,6],\"2909\":[null,4],\"2910\":[null,9],\"2911\":[null,4],\"2912\":[1],\"2913\":[null,13],\"2914\":[null,9],\"2915\":[1],\"2916\":[3],\"2917\":[2],\"2918\":[null,7],\"2919\":[null,10],\"2920\":[null,21],\"2921\":[null,15],\"2922\":[null,12],\"2923\":[2],\"2924\":[null,8],\"2925\":[null,4],\"2926\":[null,7],\"2927\":[3],\"2928\":[2],\"2929\":[null,3],\"2930\":[null,19],\"2931\":[null,6],\"2932\":[null,11],\"2933\":[2],\"2934\":[null,10],\"2935\":[3],\"2936\":[2],\"2937\":[null,3],\"2938\":[null,12],\"2939\":[null,7],\"2940\":[2],\"2941\":[null,3],\"2942\":[3],\"2943\":[2],\"2944\":[null,3],\"2945\":[null,20],\"2946\":[null,7],\"2947\":[null,10],\"2948\":[2],\"2949\":[null,12],\"2950\":[3],\"2951\":[2],\"2952\":[null,3],\"2953\":[null,11],\"2954\":[null,6],\"2955\":[null,10],\"2956\":[2],\"2957\":[null,6],\"2958\":[1],\"2959\":[null,9],\"2960\":[null,4],\"2961\":[null,6],\"2962\":[null,9],\"2963\":[4],\"2964\":[null,12],\"2965\":[null,8],\"2966\":[null,19],\"2967\":[3],\"2968\":[null,5],\"2969\":[null,6],\"2970\":[null,9],\"2971\":[4],\"2972\":[null,17],\"2973\":[null,3],\"2974\":[null,18],\"2975\":[null,7],\"2976\":[null,11],\"2977\":[3],\"2978\":[null,5],\"2979\":[null,6],\"2980\":[null,13],\"2981\":[null,14],\"2982\":[null,9],\"2983\":[null,9],\"2984\":[null,6],\"2985\":[null,4],\"2986\":[null,16],\"2987\":[null,5],\"2988\":[null,3],\"2989\":[null,2],\"2990\":[1],\"2991\":[2],\"2992\":[null,11],\"2993\":[null,4],\"2994\":[null,10],\"2995\":[null,11],\"2996\":[null,11],\"2997\":[null,14],\"2998\":[null,5],\"2999\":[3],\"3000\":[null,12],\"3001\":[null,5],\"3002\":[null,12],\"3003\":[null,9],\"3004\":[null,9],\"3005\":[null,11],\"3006\":[null,9],\"3007\":[null,7],\"3008\":[null,4],\"3009\":[null,12],\"3010\":[null,10],\"3011\":[1],\"3012\":[1],\"3013\":[3],\"3014\":[2],\"3015\":[null,10],\"3016\":[2],\"3017\":[null,8],\"3018\":[null,3],\"3019\":[null,24],\"3020\":[null,2],\"3021\":[null,8],\"3022\":[null,8],\"3023\":[null,8],\"3024\":[null,3],\"3025\":[null,4],\"3026\":[null,4],\"3027\":[null,4],\"3028\":[null,4],\"3029\":[null,2],\"3030\":[null,7],\"3031\":[null,5],\"3032\":[2],\"3033\":[null,13],\"3034\":[2],\"3035\":[null,2],\"3036\":[null,3],\"3037\":[null,5],\"3038\":[2],\"3039\":[null,6],\"3040\":[null,10],\"3041\":[2],\"3042\":[null,3],\"3043\":[null,10],\"3044\":[null,4],\"3045\":[2],\"3046\":[null,4],\"3047\":[null,5],\"3048\":[null,3],\"3049\":[null,2],\"3050\":[null,2],\"3051\":[null,4],\"3052\":[null,2],\"3053\":[2],\"3054\":[null,5],\"3055\":[5],\"3056\":[null,8],\"3057\":[1],\"3058\":[1],\"3059\":[null,6],\"3060\":[2],\"3061\":[null,21],\"3062\":[2],\"3063\":[null,3],\"3064\":[null,3],\"3065\":[null,4],\"3066\":[null,11],\"3067\":[2],\"3068\":[null,9],\"3069\":[null,6],\"3070\":[null,14],\"3071\":[null,25],\"3072\":[null,3],\"3073\":[null,11],\"3074\":[2],\"3075\":[null,3],\"3076\":[null,3],\"3077\":[null,11],\"3078\":[null,1],\"3079\":[5],\"3080\":[null,9],\"3081\":[null,6],\"3082\":[null,9],\"3083\":[null,9],\"3084\":[null,11],\"3085\":[null,9],\"3086\":[2],\"3087\":[null,15],\"3088\":[1],\"3089\":[1],\"3090\":[null,4],\"3091\":[null,5],\"3092\":[null,16],\"3093\":[null,6],\"3094\":[4],\"3095\":[null,13],\"3096\":[null,5],\"3097\":[null,4],\"3098\":[null,8],\"3099\":[null,5],\"3100\":[null,7],\"3101\":[null,11],\"3102\":[null,19],\"3103\":[null,12],\"3104\":[3],\"3105\":[null,7],\"3106\":[null,20],\"3107\":[null,15],\"3108\":[null,11],\"3109\":[3],\"3110\":[null,4],\"3111\":[null,5],\"3112\":[4],\"3113\":[null,13],\"3114\":[null,6],\"3115\":[null,6],\"3116\":[null,4],\"3117\":[null,11],\"3118\":[null,1],\"3119\":[2],\"3120\":[null,7],\"3121\":[null,6],\"3122\":[2],\"3123\":[null,13],\"3124\":[null,3],\"3125\":[null,13],\"3126\":[2],\"3127\":[null,10],\"3128\":[null,13],\"3129\":[null,10],\"3130\":[null,13],\"3131\":[3],\"3132\":[2],\"3133\":[3],\"3134\":[null,2],\"3135\":[null,5],\"3136\":[null,7],\"3137\":[null,11],\"3138\":[3],\"3139\":[null,6],\"3140\":[null,6],\"3141\":[null,7],\"3142\":[3],\"3143\":[null,2],\"3144\":[null,6],\"3145\":[null,7],\"3146\":[null,7],\"3147\":[null,3],\"3148\":[null,2],\"3149\":[null,2],\"3150\":[null,2],\"3151\":[null,2],\"3152\":[null,2],\"3153\":[3],\"3154\":[null,3],\"3155\":[null,13],\"3156\":[2],\"3157\":[null,2],\"3158\":[null,3],\"3159\":[null,7],\"3160\":[null,3],\"3161\":[4],\"3162\":[null,5],\"3163\":[null,12],\"3164\":[null,19],\"3165\":[null,11],\"3166\":[null,7],\"3167\":[null,8],\"3168\":[null,12],\"3169\":[null,9],\"3170\":[null,9],\"3171\":[null,13],\"3172\":[4],\"3173\":[null,4],\"3174\":[null,11],\"3175\":[null,16],\"3176\":[null,8],\"3177\":[3],\"3178\":[null,10],\"3179\":[null,12],\"3180\":[null,4],\"3181\":[null,18],\"3182\":[2],\"3183\":[4],\"3184\":[null,4],\"3185\":[null,6],\"3186\":[null,10],\"3187\":[null,6],\"3188\":[3],\"3189\":[null,2],\"3190\":[null,16],\"3191\":[null,27],\"3192\":[null,3],\"3193\":[null,34],\"3194\":[null,19],\"3195\":[null,8],\"3196\":[null,7],\"3197\":[null,12],\"3198\":[2],\"3199\":[null,2],\"3200\":[null,62],\"3201\":[null,25],\"3202\":[null,9],\"3203\":[null,27],\"3204\":[1],\"3205\":[4],\"3206\":[null,10],\"3207\":[null,8],\"3208\":[null,10],\"3209\":[null,9],\"3210\":[null,8],\"3211\":[null,6],\"3212\":[null,2],\"3213\":[null,16],\"3214\":[null,9],\"3215\":[null,14],\"3216\":[null,4],\"3217\":[null,16],\"3218\":[null,15],\"3219\":[2],\"3220\":[null,1],\"3221\":[2],\"3222\":[null,5],\"3223\":[2],\"3224\":[null,7],\"3225\":[null,18],\"3226\":[null,11],\"3227\":[null,17],\"3228\":[null,5],\"3229\":[2],\"3230\":[null,7],\"3231\":[null,2],\"3232\":[null,1],\"3233\":[null,5],\"3234\":[null,13],\"3235\":[2],\"3236\":[null,15],\"3237\":[null,9],\"3238\":[5],\"3239\":[null,6],\"3240\":[null,6],\"3241\":[2],\"3242\":[3],\"3243\":[null,15],\"3244\":[3],\"3245\":[null,15],\"3246\":[3],\"3247\":[null,5],\"3248\":[null,7],\"3249\":[null,9],\"3250\":[3],\"3251\":[null,13],\"3252\":[null,2],\"3253\":[null,1],\"3254\":[null,3],\"3255\":[null,17],\"3256\":[null,22],\"3257\":[3],\"3258\":[null,6],\"3259\":[null,10],\"3260\":[null,7],\"3261\":[3],\"3262\":[null,8],\"3263\":[null,4],\"3264\":[4],\"3265\":[null,14],\"3266\":[null,7],\"3267\":[4],\"3268\":[null,5],\"3269\":[null,4],\"3270\":[null,6],\"3271\":[null,11],\"3272\":[null,6],\"3273\":[null,4],\"3274\":[null,11],\"3275\":[null,7],\"3276\":[null,10],\"3277\":[1],\"3278\":[1],\"3279\":[3],\"3280\":[null,5],\"3281\":[null,3],\"3282\":[null,4],\"3283\":[null,8],\"3284\":[3],\"3285\":[8],\"3286\":[null,38],\"3287\":[null,2],\"3288\":[null,104],\"3289\":[null,4],\"3290\":[null,4],\"3291\":[null,4],\"3292\":[null,5],\"3293\":[null,2],\"3294\":[null,10],\"3295\":[null,4],\"3296\":[null,4],\"3297\":[null,4],\"3298\":[null,5],\"3299\":[null,2],\"3300\":[null,4],\"3301\":[null,5],\"3302\":[null,13],\"3303\":[null,5],\"3304\":[null,4],\"3305\":[null,26],\"3306\":[null,2],\"3307\":[null,4],\"3308\":[null,3],\"3309\":[null,13],\"3310\":[null,19],\"3311\":[null,21],\"3312\":[null,2],\"3313\":[null,3],\"3314\":[null,4],\"3315\":[null,5],\"3316\":[null,7],\"3317\":[null,11],\"3318\":[null,1],\"3319\":[null,6],\"3320\":[null,2],\"3321\":[null,3],\"3322\":[null,2],\"3323\":[null,3],\"3324\":[null,2],\"3325\":[null,8],\"3326\":[null,2],\"3327\":[null,2],\"3328\":[null,17],\"3329\":[null,18],\"3330\":[9],\"3331\":[null,3],\"3332\":[null,11],\"3333\":[null,7],\"3334\":[null,11],\"3335\":[null,3],\"3336\":[3],\"3337\":[null,9],\"3338\":[null,2],\"3339\":[null,7],\"3340\":[null,12],\"3341\":[null,4],\"3342\":[null,13],\"3343\":[null,11],\"3344\":[null,12],\"3345\":[3],\"3346\":[null,3],\"3347\":[null,4],\"3348\":[null,5],\"3349\":[null,4],\"3350\":[null,2],\"3351\":[null,2],\"3352\":[null,4],\"3353\":[null,4],\"3354\":[2],\"3355\":[null,2],\"3356\":[null,16],\"3357\":[null,14],\"3358\":[null,15],\"3359\":[null,10],\"3360\":[null,12],\"3361\":[null,30],\"3362\":[1],\"3363\":[1],\"3364\":[2],\"3365\":[5],\"3366\":[null,2],\"3367\":[null,2],\"3368\":[null,2],\"3369\":[null,2],\"3370\":[null,2],\"3371\":[null,6],\"3372\":[4],\"3373\":[null,6],\"3374\":[null,4],\"3375\":[null,8],\"3376\":[null,5],\"3377\":[null,5],\"3378\":[null,5],\"3379\":[null,2],\"3380\":[null,7],\"3381\":[null,5],\"3382\":[null,3],\"3383\":[null,5],\"3384\":[null,9],\"3385\":[null,5],\"3386\":[null,5],\"3387\":[null,2],\"3388\":[null,6],\"3389\":[null,2],\"3390\":[null,2],\"3391\":[null,4],\"3392\":[null,6],\"3393\":[null,4],\"3394\":[2],\"3395\":[3],\"3396\":[null,7],\"3397\":[null,5],\"3398\":[null,4],\"3399\":[null,5],\"3400\":[null,10],\"3401\":[null,2],\"3402\":[null,4],\"3403\":[null,4],\"3404\":[null,8],\"3405\":[null,6],\"3406\":[null,2],\"3407\":[null,9],\"3408\":[null,5],\"3409\":[2],\"3410\":[5],\"3411\":[null,5],\"3412\":[null,2],\"3413\":[null,2],\"3414\":[null,2],\"3415\":[null,5],\"3416\":[null,2],\"3417\":[null,3],\"3418\":[null,4],\"3419\":[null,7],\"3420\":[null,3],\"3421\":[null,2],\"3422\":[null,3],\"3423\":[null,3],\"3424\":[null,2],\"3425\":[null,2],\"3426\":[null,3],\"3427\":[null,2],\"3428\":[null,2],\"3429\":[null,2],\"3430\":[null,3],\"3431\":[null,2],\"3432\":[1],\"3433\":[5],\"3434\":[null,2],\"3435\":[null,2],\"3436\":[null,2],\"3437\":[null,10],\"3438\":[null,6],\"3439\":[null,4],\"3440\":[null,5],\"3441\":[null,3],\"3442\":[null,13],\"3443\":[1],\"3444\":[2],\"3445\":[null,15],\"3446\":[null,16],\"3447\":[null,7],\"3448\":[null,2],\"3449\":[null,7],\"3450\":[null,8],\"3451\":[null,4],\"3452\":[null,2],\"3453\":[null,9],\"3454\":[null,5],\"3455\":[null,2],\"3456\":[null,2],\"3457\":[null,4],\"3458\":[2],\"3459\":[3],\"3460\":[null,8],\"3461\":[null,2],\"3462\":[null,8],\"3463\":[3],\"3464\":[null,2],\"3465\":[null,14],\"3466\":[null,11],\"3467\":[null,2],\"3468\":[null,9],\"3469\":[3],\"3470\":[null,2],\"3471\":[null,2],\"3472\":[null,2],\"3473\":[3],\"3474\":[null,2],\"3475\":[null,2],\"3476\":[null,2],\"3477\":[2],\"3478\":[null,4],\"3479\":[null,7],\"3480\":[null,7],\"3481\":[null,7],\"3482\":[null,9],\"3483\":[null,2],\"3484\":[null,11],\"3485\":[null,11],\"3486\":[null,2],\"3487\":[null,2],\"3488\":[2],\"3489\":[null,2],\"3490\":[null,4],\"3491\":[null,3],\"3492\":[null,2],\"3493\":[null,5],\"3494\":[null,2],\"3495\":[null,2],\"3496\":[null,3],\"3497\":[null,2],\"3498\":[null,2],\"3499\":[2],\"3500\":[null,2],\"3501\":[null,14],\"3502\":[null,15],\"3503\":[null,2],\"3504\":[null,4],\"3505\":[2],\"3506\":[null,2],\"3507\":[null,10],\"3508\":[null,4],\"3509\":[null,2],\"3510\":[null,4],\"3511\":[null,8],\"3512\":[null,4],\"3513\":[null,3],\"3514\":[null,4],\"3515\":[null,5],\"3516\":[null,5],\"3517\":[null,2],\"3518\":[null,6],\"3519\":[null,2],\"3520\":[null,2],\"3521\":[null,3],\"3522\":[null,5],\"3523\":[null,4],\"3524\":[null,2],\"3525\":[null,4],\"3526\":[null,8],\"3527\":[null,2],\"3528\":[null,2],\"3529\":[null,1],\"3530\":[null,2],\"3531\":[null,1],\"3532\":[null,3],\"3533\":[null,7],\"3534\":[null,3],\"3535\":[null,3],\"3536\":[null,6],\"3537\":[null,7],\"3538\":[null,5],\"3539\":[2],\"3540\":[null,2],\"3541\":[null,4],\"3542\":[null,2],\"3543\":[null,3],\"3544\":[null,2],\"3545\":[null,11],\"3546\":[null,9],\"3547\":[null,2],\"3548\":[null,3],\"3549\":[null,2],\"3550\":[null,2],\"3551\":[null,2],\"3552\":[2],\"3553\":[null,2],\"3554\":[null,2],\"3555\":[null,5],\"3556\":[null,5],\"3557\":[null,7],\"3558\":[null,11],\"3559\":[3],\"3560\":[null,7],\"3561\":[null,2],\"3562\":[null,2],\"3563\":[null,4],\"3564\":[null,3],\"3565\":[null,14],\"3566\":[null,2],\"3567\":[null,12],\"3568\":[null,11],\"3569\":[null,3],\"3570\":[null,3],\"3571\":[null,12],\"3572\":[null,6],\"3573\":[null,11],\"3574\":[null,2],\"3575\":[null,13],\"3576\":[null,2],\"3577\":[2],\"3578\":[null,24],\"3579\":[2],\"3580\":[3],\"3581\":[null,7],\"3582\":[null,5],\"3583\":[2],\"3584\":[null,3],\"3585\":[null,4],\"3586\":[null,6],\"3587\":[null,3],\"3588\":[2],\"3589\":[null,14],\"3590\":[2],\"3591\":[3],\"3592\":[null,3],\"3593\":[null,1],\"3594\":[null,14],\"3595\":[null,1],\"3596\":[null,1],\"3597\":[null,1],\"3598\":[null,1],\"3599\":[null,3],\"3600\":[null,12],\"3601\":[null,1],\"3602\":[null,1],\"3603\":[null,1],\"3604\":[null,1],\"3605\":[null,3],\"3606\":[null,1],\"3607\":[null,19],\"3608\":[null,7],\"3609\":[null,1],\"3610\":[null,1],\"3611\":[null,1],\"3612\":[null,1],\"3613\":[null,1],\"3614\":[null,1],\"3615\":[null,1],\"3616\":[null,1],\"3617\":[null,1],\"3618\":[null,1],\"3619\":[null,1],\"3620\":[null,1],\"3621\":[null,1],\"3622\":[null,1],\"3623\":[null,1],\"3624\":[null,9],\"3625\":[null,2],\"3626\":[null,1],\"3627\":[null,6],\"3628\":[null,3],\"3629\":[null,6],\"3630\":[null,4],\"3631\":[null,6],\"3632\":[null,1],\"3633\":[null,5],\"3634\":[null,5],\"3635\":[null,6],\"3636\":[null,5],\"3637\":[null,8],\"3638\":[3],\"3639\":[null,3],\"3640\":[3],\"3641\":[null,12],\"3642\":[null,18],\"3643\":[null,2],\"3644\":[3],\"3645\":[null,11],\"3646\":[3],\"3647\":[null,15],\"3648\":[3],\"3649\":[null,10],\"3650\":[null,2],\"3651\":[3],\"3652\":[null,9],\"3653\":[null,10],\"3654\":[null,6],\"3655\":[null,5],\"3656\":[null,18],\"3657\":[1],\"3658\":[1],\"3659\":[null,2],\"3660\":[null,1],\"3661\":[null,1],\"3662\":[null,1],\"3663\":[1],\"3664\":[null,4],\"3665\":[null,3],\"3666\":[null,1],\"3667\":[null,1],\"3668\":[null,1],\"3669\":[null,1],\"3670\":[null,1],\"3671\":[null,1],\"3672\":[null,1],\"3673\":[null,3],\"3674\":[null,1],\"3675\":[null,1],\"3676\":[null,1],\"3677\":[1],\"3678\":[null,2],\"3679\":[null,5],\"3680\":[null,5],\"3681\":[2],\"3682\":[null,7],\"3683\":[null,7],\"3684\":[2],\"3685\":[null,8],\"3686\":[2],\"3687\":[null,7],\"3688\":[null,1],\"3689\":[null,8],\"3690\":[2],\"3691\":[null,11],\"3692\":[2],\"3693\":[null,6],\"3694\":[null,7],\"3695\":[1],\"3696\":[null,10],\"3697\":[1],\"3698\":[null,5],\"3699\":[null,1],\"3700\":[null,6],\"3701\":[null,5],\"3702\":[null,1],\"3703\":[null,1],\"3704\":[null,1],\"3705\":[null,1],\"3706\":[null,1],\"3707\":[null,1],\"3708\":[null,1],\"3709\":[null,1],\"3710\":[null,1],\"3711\":[1],\"3712\":[null,1],\"3713\":[1],\"3714\":[null,2],\"3715\":[null,1],\"3716\":[1],\"3717\":[null,1],\"3718\":[null,1],\"3719\":[null,1],\"3720\":[1],\"3721\":[null,5],\"3722\":[null,1],\"3723\":[1],\"3724\":[null,3],\"3725\":[null,1],\"3726\":[1],\"3727\":[null,3],\"3728\":[null,1],\"3729\":[1],\"3730\":[null,3],\"3731\":[null,3],\"3732\":[null,1],\"3733\":[1],\"3734\":[null,1],\"3735\":[null,1],\"3736\":[1],\"3737\":[null,23],\"3738\":[null,1],\"3739\":[1],\"3740\":[null,1],\"3741\":[1],\"3742\":[null,1],\"3743\":[1],\"3744\":[null,1],\"3745\":[1],\"3746\":[null,1],\"3747\":[2],\"3748\":[null,10],\"3749\":[null,1],\"3750\":[1],\"3751\":[null,2],\"3752\":[null,1],\"3753\":[null,1],\"3754\":[null,1],\"3755\":[null,1],\"3756\":[1],\"3757\":[null,1],\"3758\":[1],\"3759\":[null,5],\"3760\":[null,1],\"3761\":[1],\"3762\":[null,1],\"3763\":[2],\"3764\":[null,1],\"3765\":[1],\"3766\":[null,1],\"3767\":[null,2],\"3768\":[1],\"3769\":[null,3],\"3770\":[1],\"3771\":[null,6],\"3772\":[null,4],\"3773\":[null,6],\"3774\":[null,3],\"3775\":[null,5],\"3776\":[1],\"3777\":[null,3],\"3778\":[null,1],\"3779\":[null,6],\"3780\":[null,7],\"3781\":[null,2],\"3782\":[null,4],\"3783\":[1],\"3784\":[null,2],\"3785\":[null,1],\"3786\":[null,1],\"3787\":[null,3],\"3788\":[null,2],\"3789\":[null,1],\"3790\":[null,1],\"3791\":[null,1],\"3792\":[null,1],\"3793\":[null,1],\"3794\":[null,4],\"3795\":[1],\"3796\":[1],\"3797\":[1],\"3798\":[null,1],\"3799\":[null,1],\"3800\":[1],\"3801\":[null,1],\"3802\":[null,1],\"3803\":[1],\"3804\":[null,3],\"3805\":[null,8],\"3806\":[null,3],\"3807\":[2],\"3808\":[1],\"3809\":[null,4],\"3810\":[1],\"3811\":[null,1],\"3812\":[null,1],\"3813\":[1],\"3814\":[null,2],\"3815\":[2],\"3816\":[1],\"3817\":[null,4],\"3818\":[1],\"3819\":[null,1],\"3820\":[null,1],\"3821\":[1],\"3822\":[null,2],\"3823\":[1],\"3824\":[2],\"3825\":[1],\"3826\":[5],\"3827\":[null,3],\"3828\":[null,5],\"3829\":[null,4],\"3830\":[null,4],\"3831\":[null,26],\"3832\":[3],\"3833\":[1],\"3834\":[2],\"3835\":[1],\"3836\":[1],\"3837\":[1],\"3838\":[1],\"3839\":[null,22],\"3840\":[null,4],\"3841\":[null,1],\"3842\":[1],\"3843\":[null,5],\"3844\":[null,11],\"3845\":[null,1],\"3846\":[1],\"3847\":[2],\"3848\":[null,3],\"3849\":[null,5],\"3850\":[null,8],\"3851\":[null,13],\"3852\":[1],\"3853\":[null,8],\"3854\":[null,11],\"3855\":[1],\"3856\":[null,4],\"3857\":[null,23],\"3858\":[null,14],\"3859\":[null,9],\"3860\":[null,12],\"3861\":[null,4],\"3862\":[null,3],\"3863\":[null,20],\"3864\":[null,8],\"3865\":[null,4],\"3866\":[null,15],\"3867\":[null,10],\"3868\":[null,12],\"3869\":[null,1],\"3870\":[1],\"3871\":[null,5],\"3872\":[null,3],\"3873\":[null,3],\"3874\":[null,4],\"3875\":[null,6],\"3876\":[null,1],\"3877\":[null,11],\"3878\":[null,61],\"3879\":[null,5],\"3880\":[null,3],\"3881\":[null,6],\"3882\":[null,11],\"3883\":[null,8],\"3884\":[null,2],\"3885\":[null,12],\"3886\":[1],\"3887\":[2],\"3888\":[null,14],\"3889\":[1],\"3890\":[2],\"3891\":[null,4],\"3892\":[null,5],\"3893\":[null,5],\"3894\":[null,1],\"3895\":[null,12],\"3896\":[null,8],\"3897\":[null,3],\"3898\":[null,9],\"3899\":[7],\"3900\":[null,3],\"3901\":[null,8],\"3902\":[null,10],\"3903\":[null,3],\"3904\":[null,5],\"3905\":[2],\"3906\":[null,3],\"3907\":[null,15],\"3908\":[null,10],\"3909\":[null,3],\"3910\":[null,5],\"3911\":[null,17],\"3912\":[7],\"3913\":[null,13],\"3914\":[null,24],\"3915\":[2],\"3916\":[null,9],\"3917\":[null,11],\"3918\":[null,3],\"3919\":[null,35],\"3920\":[null,6],\"3921\":[null,5],\"3922\":[null,2],\"3923\":[null,2],\"3924\":[null,2],\"3925\":[null,2],\"3926\":[1],\"3927\":[2],\"3928\":[null,7],\"3929\":[null,2],\"3930\":[null,2],\"3931\":[null,10],\"3932\":[null,5],\"3933\":[null,4],\"3934\":[null,10],\"3935\":[null,7],\"3936\":[null,19],\"3937\":[null,5],\"3938\":[null,3],\"3939\":[null,3],\"3940\":[null,9],\"3941\":[null,2],\"3942\":[null,16],\"3943\":[null,10],\"3944\":[null,3],\"3945\":[null,13],\"3946\":[2],\"3947\":[null,7],\"3948\":[null,5],\"3949\":[null,6],\"3950\":[null,12],\"3951\":[null,6],\"3952\":[null,9],\"3953\":[null,9],\"3954\":[2],\"3955\":[null,5],\"3956\":[null,12],\"3957\":[null,10],\"3958\":[null,4],\"3959\":[null,16],\"3960\":[null,13],\"3961\":[null,8],\"3962\":[2],\"3963\":[null,4],\"3964\":[null,15],\"3965\":[null,4],\"3966\":[null,18],\"3967\":[null,4],\"3968\":[null,17],\"3969\":[null,1],\"3970\":[null,20],\"3971\":[null,10],\"3972\":[1],\"3973\":[1],\"3974\":[1],\"3975\":[2],\"3976\":[null,10],\"3977\":[null,17],\"3978\":[5],\"3979\":[null,9],\"3980\":[3],\"3981\":[null,5],\"3982\":[2],\"3983\":[null,10],\"3984\":[2],\"3985\":[null,13],\"3986\":[2],\"3987\":[null,13],\"3988\":[null,10],\"3989\":[1],\"3990\":[1],\"3991\":[1],\"3992\":[1],\"3993\":[1],\"3994\":[1],\"3995\":[1],\"3996\":[2],\"3997\":[null,10],\"3998\":[3],\"3999\":[null,34],\"4000\":[2],\"4001\":[null,14],\"4002\":[null,1],\"4003\":[null,1],\"4004\":[null,8],\"4005\":[null,2],\"4006\":[null,2],\"4007\":[null,3],\"4008\":[null,1],\"4009\":[null,1],\"4010\":[2],\"4011\":[null,5],\"4012\":[null,5],\"4013\":[null,6],\"4014\":[null,10],\"4015\":[null,2],\"4016\":[null,4],\"4017\":[null,1],\"4018\":[null,3],\"4019\":[1],\"4020\":[1],\"4021\":[2],\"4022\":[2],\"4023\":[null,8],\"4024\":[null,2],\"4025\":[null,35],\"4026\":[1],\"4027\":[null,6],\"4028\":[null,8],\"4029\":[null,27],\"4030\":[null,37],\"4031\":[1],\"4032\":[2],\"4033\":[null,4],\"4034\":[null,6],\"4035\":[null,8],\"4036\":[2],\"4037\":[null,3],\"4038\":[null,6],\"4039\":[2],\"4040\":[null,11],\"4041\":[1],\"4042\":[1],\"4043\":[2],\"4044\":[null,6],\"4045\":[2],\"4046\":[null,11],\"4047\":[null,11],\"4048\":[2],\"4049\":[null,11],\"4050\":[null,10],\"4051\":[2],\"4052\":[null,8],\"4053\":[null,7],\"4054\":[null,7],\"4055\":[null,5],\"4056\":[null,10],\"4057\":[2],\"4058\":[null,8],\"4059\":[null,5],\"4060\":[null,22],\"4061\":[null,9],\"4062\":[null,18],\"4063\":[null,13],\"4064\":[2],\"4065\":[null,3],\"4066\":[null,5],\"4067\":[null,17],\"4068\":[null,8],\"4069\":[null,7],\"4070\":[null,26],\"4071\":[null,9],\"4072\":[5],\"4073\":[null,11],\"4074\":[null,8],\"4075\":[1],\"4076\":[6],\"4077\":[1],\"4078\":[null,15],\"4079\":[null,17],\"4080\":[null,13],\"4081\":[null,2],\"4082\":[null,5],\"4083\":[null,7],\"4084\":[1],\"4085\":[1],\"4086\":[null,22],\"4087\":[null,2],\"4088\":[null,7],\"4089\":[null,7],\"4090\":[null,19],\"4091\":[null,12],\"4092\":[null,14],\"4093\":[null,10],\"4094\":[null,10],\"4095\":[null,6],\"4096\":[null,11],\"4097\":[null,9],\"4098\":[null,10],\"4099\":[null,8],\"4100\":[null,3],\"4101\":[1],\"4102\":[null,9],\"4103\":[null,5],\"4104\":[null,6],\"4105\":[null,10],\"4106\":[null,5],\"4107\":[null,4],\"4108\":[null,10],\"4109\":[1],\"4110\":[4],\"4111\":[null,4],\"4112\":[null,1],\"4113\":[null,6],\"4114\":[null,4],\"4115\":[null,5],\"4116\":[null,5],\"4117\":[null,2],\"4118\":[null,4],\"4119\":[null,8],\"4120\":[null,3],\"4121\":[null,4],\"4122\":[3],\"4123\":[null,3],\"4124\":[null,12],\"4125\":[null,9],\"4126\":[null,8],\"4127\":[null,9],\"4128\":[null,15],\"4129\":[3],\"4130\":[null,11],\"4131\":[null,2],\"4132\":[null,8],\"4133\":[null,8],\"4134\":[null,8],\"4135\":[null,2],\"4136\":[null,8],\"4137\":[null,8],\"4138\":[null,7],\"4139\":[null,2],\"4140\":[null,9],\"4141\":[2],\"4142\":[null,7],\"4143\":[null,2],\"4144\":[null,1],\"4145\":[null,5],\"4146\":[null,7],\"4147\":[null,7],\"4148\":[null,2],\"4149\":[null,16],\"4150\":[null,2],\"4151\":[null,15],\"4152\":[null,2],\"4153\":[null,3],\"4154\":[null,1],\"4155\":[null,3],\"4156\":[null,8],\"4157\":[null,16],\"4158\":[null,3],\"4159\":[null,1],\"4160\":[null,4],\"4161\":[null,7],\"4162\":[null,12],\"4163\":[null,3],\"4164\":[null,1],\"4165\":[null,21],\"4166\":[null,13],\"4167\":[null,7],\"4168\":[null,3],\"4169\":[null,7],\"4170\":[null,13],\"4171\":[2],\"4172\":[null,22],\"4173\":[null,14],\"4174\":[null,1],\"4175\":[null,8],\"4176\":[null,1],\"4177\":[null,16],\"4178\":[null,1],\"4179\":[null,13],\"4180\":[null,1],\"4181\":[null,15],\"4182\":[4],\"4183\":[null,2],\"4184\":[null,8],\"4185\":[null,1],\"4186\":[5],\"4187\":[null,15],\"4188\":[null,5],\"4189\":[null,5],\"4190\":[null,2],\"4191\":[null,13],\"4192\":[null,29],\"4193\":[1],\"4194\":[null,2],\"4195\":[null,4],\"4196\":[null,2],\"4197\":[null,5],\"4198\":[null,2],\"4199\":[null,3],\"4200\":[1],\"4201\":[null,27],\"4202\":[null,12],\"4203\":[1],\"4204\":[1],\"4205\":[null,15],\"4206\":[null,3],\"4207\":[null,5],\"4208\":[null,3],\"4209\":[1],\"4210\":[null,1],\"4211\":[null,15],\"4212\":[null,27],\"4213\":[5],\"4214\":[null,15],\"4215\":[null,2],\"4216\":[null,8],\"4217\":[null,5],\"4218\":[null,5],\"4219\":[null,10],\"4220\":[null,1],\"4221\":[null,2],\"4222\":[null,6],\"4223\":[null,1],\"4224\":[null,1],\"4225\":[null,1],\"4226\":[2],\"4227\":[null,6],\"4228\":[null,4],\"4229\":[null,6],\"4230\":[null,4],\"4231\":[null,4],\"4232\":[null,5],\"4233\":[null,1],\"4234\":[null,4],\"4235\":[2],\"4236\":[1],\"4237\":[null,1],\"4238\":[null,2],\"4239\":[null,1],\"4240\":[null,1],\"4241\":[null,1],\"4242\":[null,9],\"4243\":[4],\"4244\":[null,2],\"4245\":[null,10],\"4246\":[null,5],\"4247\":[null,3],\"4248\":[null,12],\"4249\":[null,12],\"4250\":[null,15],\"4251\":[null,11],\"4252\":[5],\"4253\":[2],\"4254\":[null,34],\"4255\":[2],\"4256\":[null,28],\"4257\":[null,2],\"4258\":[null,1],\"4259\":[null,3],\"4260\":[null,1],\"4261\":[null,20],\"4262\":[2],\"4263\":[null,10],\"4264\":[null,1],\"4265\":[2],\"4266\":[null,3],\"4267\":[null,3],\"4268\":[null,13],\"4269\":[null,5],\"4270\":[null,7],\"4271\":[null,8],\"4272\":[null,3],\"4273\":[null,2],\"4274\":[null,1],\"4275\":[null,10],\"4276\":[1],\"4277\":[1],\"4278\":[1],\"4279\":[1],\"4280\":[1],\"4281\":[1],\"4282\":[null,10],\"4283\":[1],\"4284\":[1],\"4285\":[3],\"4286\":[10],\"4287\":[null,18],\"4288\":[6],\"4289\":[null,18],\"4290\":[2],\"4291\":[null,11],\"4292\":[3],\"4293\":[null,4],\"4294\":[null,4],\"4295\":[null,2],\"4296\":[null,4],\"4297\":[null,5],\"4298\":[null,5],\"4299\":[null,8],\"4300\":[null,6],\"4301\":[null,10],\"4302\":[5],\"4303\":[null,3],\"4304\":[null,6],\"4305\":[8],\"4306\":[null,16],\"4307\":[6],\"4308\":[null,6],\"4309\":[6],\"4310\":[null,9],\"4311\":[6],\"4312\":[null,2],\"4313\":[6],\"4314\":[null,8],\"4315\":[null,10],\"4316\":[4],\"4317\":[null,10],\"4318\":[null,12],\"4319\":[null,9],\"4320\":[null,5],\"4321\":[null,9],\"4322\":[null,8],\"4323\":[7],\"4324\":[null,7],\"4325\":[5],\"4326\":[null,4],\"4327\":[1],\"4328\":[2],\"4329\":[3],\"4330\":[null,10],\"4331\":[null,8],\"4332\":[null,10],\"4333\":[null,9],\"4334\":[null,8],\"4335\":[null,6],\"4336\":[2],\"4337\":[null,16],\"4338\":[null,9],\"4339\":[null,14],\"4340\":[null,4],\"4341\":[null,16],\"4342\":[null,15],\"4343\":[1],\"4344\":[null,1],\"4345\":[1],\"4346\":[null,5],\"4347\":[1],\"4348\":[null,7],\"4349\":[null,18],\"4350\":[null,11],\"4351\":[null,17],\"4352\":[null,5],\"4353\":[1],\"4354\":[null,7],\"4355\":[null,2],\"4356\":[null,6],\"4357\":[null,13],\"4358\":[1],\"4359\":[null,15],\"4360\":[null,9],\"4361\":[4],\"4362\":[null,6],\"4363\":[null,6],\"4364\":[1],\"4365\":[null,12],\"4366\":[null,4],\"4367\":[null,5],\"4368\":[null,16],\"4369\":[null,6],\"4370\":[3],\"4371\":[null,13],\"4372\":[null,5],\"4373\":[null,4],\"4374\":[null,1],\"4375\":[null,8],\"4376\":[null,1],\"4377\":[null,5],\"4378\":[null,1],\"4379\":[null,7],\"4380\":[null,1],\"4381\":[null,11],\"4382\":[null,1],\"4383\":[null,19],\"4384\":[null,1],\"4385\":[null,12],\"4386\":[2],\"4387\":[null,7],\"4388\":[null,20],\"4389\":[null,15],\"4390\":[null,11],\"4391\":[2],\"4392\":[null,4],\"4393\":[null,5],\"4394\":[3],\"4395\":[null,13],\"4396\":[null,6],\"4397\":[null,6],\"4398\":[null,1],\"4399\":[null,4],\"4400\":[null,11],\"4401\":[1],\"4402\":[null,7],\"4403\":[null,6],\"4404\":[1],\"4405\":[null,13],\"4406\":[null,3],\"4407\":[null,13],\"4408\":[1],\"4409\":[null,10],\"4410\":[null,13],\"4411\":[null,10],\"4412\":[1],\"4413\":[null,6],\"4414\":[1],\"4415\":[null,21],\"4416\":[1],\"4417\":[null,3],\"4418\":[null,3],\"4419\":[null,4],\"4420\":[null,11],\"4421\":[1],\"4422\":[null,9],\"4423\":[null,6],\"4424\":[null,14],\"4425\":[null,25],\"4426\":[null,3],\"4427\":[null,1],\"4428\":[null,11],\"4429\":[null,1],\"4430\":[1],\"4431\":[null,3],\"4432\":[null,3],\"4433\":[null,11],\"4434\":[null,1],\"4435\":[4],\"4436\":[null,9],\"4437\":[null,6],\"4438\":[null,9],\"4439\":[null,9],\"4440\":[null,11],\"4441\":[null,9],\"4442\":[1],\"4443\":[null,15],\"4444\":[1],\"4445\":[2],\"4446\":[null,2],\"4447\":[null,5],\"4448\":[null,7],\"4449\":[null,1],\"4450\":[null,11],\"4451\":[2],\"4452\":[null,6],\"4453\":[null,6],\"4454\":[2],\"4455\":[null,2],\"4456\":[null,6],\"4457\":[null,7],\"4458\":[null,7],\"4459\":[null,3],\"4460\":[null,1],\"4461\":[null,2],\"4462\":[null,2],\"4463\":[null,2],\"4464\":[null,2],\"4465\":[null,2],\"4466\":[null,1],\"4467\":[null,1],\"4468\":[2],\"4469\":[null,3],\"4470\":[null,13],\"4471\":[1],\"4472\":[2],\"4473\":[null,15],\"4474\":[2],\"4475\":[null,18],\"4476\":[2],\"4477\":[null,5],\"4478\":[null,7],\"4479\":[null,9],\"4480\":[2],\"4481\":[null,13],\"4482\":[null,2],\"4483\":[null,5],\"4484\":[null,17],\"4485\":[2],\"4486\":[null,6],\"4487\":[null,10],\"4488\":[null,7],\"4489\":[2],\"4490\":[null,9],\"4491\":[null,4],\"4492\":[3],\"4493\":[null,14],\"4494\":[null,7],\"4495\":[3],\"4496\":[null,5],\"4497\":[null,4],\"4498\":[null,6],\"4499\":[null,11],\"4500\":[null,6],\"4501\":[null,4],\"4502\":[null,11],\"4503\":[null,7],\"4504\":[null,10],\"4505\":[1],\"4506\":[3],\"4507\":[null,12],\"4508\":[null,19],\"4509\":[null,1],\"4510\":[null,11],\"4511\":[null,7],\"4512\":[null,8],\"4513\":[null,12],\"4514\":[null,9],\"4515\":[null,9],\"4516\":[null,13],\"4517\":[3],\"4518\":[null,11],\"4519\":[null,1],\"4520\":[null,16],\"4521\":[null,8],\"4522\":[2],\"4523\":[null,10],\"4524\":[null,12],\"4525\":[null,4],\"4526\":[null,11],\"4527\":[1],\"4528\":[3],\"4529\":[null,4],\"4530\":[null,6],\"4531\":[null,10],\"4532\":[2],\"4533\":[null,2],\"4534\":[null,16],\"4535\":[null,27],\"4536\":[null,3],\"4537\":[null,26],\"4538\":[null,19],\"4539\":[null,8],\"4540\":[null,7],\"4541\":[null,12],\"4542\":[1],\"4543\":[2],\"4544\":[null,5],\"4545\":[null,3],\"4546\":[null,4],\"4547\":[null,8],\"4548\":[2],\"4549\":[null,4],\"4550\":[null,38],\"4551\":[null,2],\"4552\":[null,104],\"4553\":[null,4],\"4554\":[null,4],\"4555\":[null,4],\"4556\":[null,5],\"4557\":[null,2],\"4558\":[null,10],\"4559\":[null,4],\"4560\":[null,4],\"4561\":[null,4],\"4562\":[null,5],\"4563\":[null,1],\"4564\":[null,2],\"4565\":[null,4],\"4566\":[null,5],\"4567\":[null,13],\"4568\":[null,5],\"4569\":[null,4],\"4570\":[null,26],\"4571\":[null,2],\"4572\":[null,4],\"4573\":[null,3],\"4574\":[null,13],\"4575\":[null,19],\"4576\":[null,21],\"4577\":[null,2],\"4578\":[null,3],\"4579\":[null,4],\"4580\":[null,5],\"4581\":[null,7],\"4582\":[null,1],\"4583\":[null,2],\"4584\":[null,2],\"4585\":[null,17],\"4586\":[null,18],\"4587\":[null,7],\"4588\":[null,3],\"4589\":[null,11],\"4590\":[null,7],\"4591\":[null,11],\"4592\":[null,3],\"4593\":[2],\"4594\":[null,9],\"4595\":[null,2],\"4596\":[null,7],\"4597\":[null,12],\"4598\":[null,4],\"4599\":[null,13],\"4600\":[null,11],\"4601\":[null,12],\"4602\":[2],\"4603\":[null,3],\"4604\":[null,1],\"4605\":[null,4],\"4606\":[null,5],\"4607\":[null,4],\"4608\":[null,2],\"4609\":[null,1],\"4610\":[null,2],\"4611\":[null,1],\"4612\":[null,4],\"4613\":[null,4],\"4614\":[null,1],\"4615\":[null,22],\"4616\":[1],\"4617\":[1],\"4618\":[3],\"4619\":[null,3],\"4620\":[null,25],\"4621\":[null,6],\"4622\":[null,8],\"4623\":[1],\"4624\":[null,9],\"4625\":[null,1],\"4626\":[null,8],\"4627\":[null,10],\"4628\":[null,8],\"4629\":[null,13],\"4630\":[null,8],\"4631\":[null,7],\"4632\":[null,8],\"4633\":[1],\"4634\":[2],\"4635\":[2],\"4636\":[3],\"4637\":[null,21],\"4638\":[1],\"4639\":[null,4],\"4640\":[null,12],\"4641\":[null,2],\"4642\":[null,2],\"4643\":[null,1],\"4644\":[null,1],\"4645\":[null,1],\"4646\":[null,1],\"4647\":[null,1],\"4648\":[null,1],\"4649\":[null,1],\"4650\":[null,5],\"4651\":[null,4],\"4652\":[null,8],\"4653\":[null,6],\"4654\":[null,4],\"4655\":[null,7],\"4656\":[null,1],\"4657\":[null,6],\"4658\":[null,7],\"4659\":[null,4],\"4660\":[null,2],\"4661\":[2],\"4662\":[null,1],\"4663\":[null,3],\"4664\":[null,1],\"4665\":[null,6],\"4666\":[null,2],\"4667\":[null,33],\"4668\":[null,2],\"4669\":[null,8],\"4670\":[null,2],\"4671\":[null,45],\"4672\":[null,3],\"4673\":[null,1],\"4674\":[null,2],\"4675\":[null,3],\"4676\":[null,1],\"4677\":[null,6],\"4678\":[null,1],\"4679\":[null,6],\"4680\":[null,6],\"4681\":[null,3],\"4682\":[null,3],\"4683\":[null,11],\"4684\":[null,2],\"4685\":[null,2],\"4686\":[null,3],\"4687\":[null,2],\"4688\":[null,5],\"4689\":[null,2],\"4690\":[null,9],\"4691\":[1],\"4692\":[null,11],\"4693\":[null,1],\"4694\":[null,15],\"4695\":[null,2],\"4696\":[null,15],\"4697\":[1],\"4698\":[1],\"4699\":[1],\"4700\":[null,6],\"4701\":[null,19],\"4702\":[null,12],\"4703\":[null,5],\"4704\":[null,25],\"4705\":[1],\"4706\":[2],\"4707\":[null,14],\"4708\":[3],\"4709\":[null,3],\"4710\":[null,18],\"4711\":[null,18],\"4712\":[2],\"4713\":[null,12],\"4714\":[2],\"4715\":[null,13],\"4716\":[null,6],\"4717\":[null,8],\"4718\":[null,4],\"4719\":[null,11],\"4720\":[1],\"4721\":[null,17],\"4722\":[null,17],\"4723\":[null,15],\"4724\":[null,21],\"4725\":[null,11],\"4726\":[1],\"4727\":[null,11],\"4728\":[null,12],\"4729\":[null,25],\"4730\":[null,39],\"4731\":[null,9],\"4732\":[null,11],\"4733\":[null,16],\"4734\":[null,32],\"4735\":[null,19],\"4736\":[null,8],\"4737\":[null,4],\"4738\":[null,9],\"4739\":[null,14],\"4740\":[null,2],\"4741\":[null,23],\"4742\":[null,1],\"4743\":[null,2],\"4744\":[null,17],\"4745\":[null,2],\"4746\":[null,34],\"4747\":[null,1],\"4748\":[1],\"4749\":[1],\"4750\":[null,11],\"4751\":[null,1],\"4752\":[null,8],\"4753\":[null,3],\"4754\":[null,5],\"4755\":[null,6],\"4756\":[null,2],\"4757\":[null,9],\"4758\":[5],\"4759\":[null,16],\"4760\":[null,20],\"4761\":[null,11],\"4762\":[null,17],\"4763\":[null,17],\"4764\":[null,8],\"4765\":[null,12],\"4766\":[1],\"4767\":[2],\"4768\":[1],\"4769\":[2],\"4770\":[null,4],\"4771\":[null,13],\"4772\":[null,5],\"4773\":[null,8],\"4774\":[null,31],\"4775\":[null,6],\"4776\":[1],\"4777\":[1],\"4778\":[null,3],\"4779\":[null,2],\"4780\":[null,14],\"4781\":[null,7],\"4782\":[null,5],\"4783\":[null,14],\"4784\":[null,7],\"4785\":[null,7],\"4786\":[null,5],\"4787\":[null,4],\"4788\":[null,5],\"4789\":[null,6],\"4790\":[1],\"4791\":[null,5],\"4792\":[null,15],\"4793\":[null,5],\"4794\":[null,28],\"4795\":[null,7],\"4796\":[null,9],\"4797\":[null,11],\"4798\":[1],\"4799\":[3],\"4800\":[null,11],\"4801\":[null,15],\"4802\":[null,7],\"4803\":[null,11],\"4804\":[1],\"4805\":[null,7],\"4806\":[null,26],\"4807\":[null,19],\"4808\":[null,4],\"4809\":[null,1],\"4810\":[null,13],\"4811\":[null,10],\"4812\":[null,6],\"4813\":[null,11],\"4814\":[null,3],\"4815\":[null,14],\"4816\":[null,13],\"4817\":[null,12],\"4818\":[null,7],\"4819\":[null,7],\"4820\":[null,29],\"4821\":[null,9],\"4822\":[null,7],\"4823\":[null,13],\"4824\":[null,14],\"4825\":[1],\"4826\":[null,4],\"4827\":[null,3],\"4828\":[null,1],\"4829\":[null,7],\"4830\":[3],\"4831\":[null,9],\"4832\":[null,8],\"4833\":[null,7],\"4834\":[null,1],\"4835\":[null,2],\"4836\":[null,10],\"4837\":[null,10],\"4838\":[null,9],\"4839\":[null,7],\"4840\":[null,13],\"4841\":[1],\"4842\":[null,10],\"4843\":[null,16],\"4844\":[null,4],\"4845\":[null,11],\"4846\":[null,14],\"4847\":[null,1],\"4848\":[null,19],\"4849\":[null,15],\"4850\":[null,5],\"4851\":[null,12],\"4852\":[null,7],\"4853\":[null,1],\"4854\":[null,12],\"4855\":[null,14],\"4856\":[null,4],\"4857\":[1],\"4858\":[null,13],\"4859\":[null,11],\"4860\":[null,10],\"4861\":[1],\"4862\":[null,5],\"4863\":[null,5],\"4864\":[null,7],\"4865\":[null,5],\"4866\":[null,4],\"4867\":[null,4],\"4868\":[null,5],\"4869\":[null,5],\"4870\":[null,5],\"4871\":[null,5],\"4872\":[null,5],\"4873\":[null,11],\"4874\":[null,5],\"4875\":[null,5],\"4876\":[null,5],\"4877\":[null,5],\"4878\":[null,3],\"4879\":[null,5],\"4880\":[null,8],\"4881\":[null,5],\"4882\":[4],\"4883\":[null,12],\"4884\":[null,14],\"4885\":[null,6],\"4886\":[null,1],\"4887\":[null,6],\"4888\":[null,3],\"4889\":[null,3],\"4890\":[null,3],\"4891\":[null,13],\"4892\":[null,7],\"4893\":[null,16],\"4894\":[null,12],\"4895\":[null,5],\"4896\":[null,8],\"4897\":[null,7],\"4898\":[null,5],\"4899\":[null,7],\"4900\":[null,7],\"4901\":[null,6],\"4902\":[null,21],\"4903\":[4],\"4904\":[null,12],\"4905\":[null,7],\"4906\":[null,1],\"4907\":[null,2],\"4908\":[null,16],\"4909\":[null,12],\"4910\":[null,5],\"4911\":[null,5],\"4912\":[null,10],\"4913\":[null,13],\"4914\":[null,8],\"4915\":[null,7],\"4916\":[null,6],\"4917\":[null,6],\"4918\":[null,11],\"4919\":[null,7],\"4920\":[null,10],\"4921\":[4],\"4922\":[null,11],\"4923\":[null,8],\"4924\":[null,1],\"4925\":[null,2],\"4926\":[null,12],\"4927\":[null,11],\"4928\":[null,6],\"4929\":[null,8],\"4930\":[null,7],\"4931\":[null,4],\"4932\":[null,5],\"4933\":[null,12],\"4934\":[1],\"4935\":[1],\"4936\":[1],\"4937\":[5],\"4938\":[null,8],\"4939\":[null,11],\"4940\":[null,7],\"4941\":[null,3],\"4942\":[null,2],\"4943\":[null,12],\"4944\":[null,9],\"4945\":[null,2],\"4946\":[null,3],\"4947\":[null,23],\"4948\":[null,2],\"4949\":[null,6],\"4950\":[null,7],\"4951\":[null,5],\"4952\":[null,2],\"4953\":[null,6],\"4954\":[null,8],\"4955\":[null,3],\"4956\":[null,6],\"4957\":[null,10],\"4958\":[null,3],\"4959\":[null,9],\"4960\":[null,13],\"4961\":[1],\"4962\":[null,3],\"4963\":[2],\"4964\":[null,2],\"4965\":[null,10],\"4966\":[null,15],\"4967\":[null,15],\"4968\":[null,3],\"4969\":[null,15],\"4970\":[null,7],\"4971\":[null,4],\"4972\":[null,11],\"4973\":[null,4],\"4974\":[null,9],\"4975\":[null,15],\"4976\":[null,20],\"4977\":[null,37],\"4978\":[1],\"4979\":[null,2],\"4980\":[null,18],\"4981\":[null,4],\"4982\":[null,12],\"4983\":[null,14],\"4984\":[null,2],\"4985\":[null,6],\"4986\":[null,13],\"4987\":[null,2],\"4988\":[null,8],\"4989\":[null,3],\"4990\":[null,7],\"4991\":[null,5],\"4992\":[null,5],\"4993\":[null,14],\"4994\":[2],\"4995\":[null,2],\"4996\":[null,5],\"4997\":[null,16],\"4998\":[null,1],\"4999\":[2],\"5000\":[null,9],\"5001\":[null,4],\"5002\":[null,6],\"5003\":[null,11],\"5004\":[null,7],\"5005\":[null,7],\"5006\":[null,15],\"5007\":[null,1],\"5008\":[2],\"5009\":[null,8],\"5010\":[null,13],\"5011\":[null,2],\"5012\":[null,12],\"5013\":[null,3],\"5014\":[null,2],\"5015\":[null,11],\"5016\":[null,8],\"5017\":[2],\"5018\":[null,16],\"5019\":[null,4],\"5020\":[null,2],\"5021\":[null,3],\"5022\":[null,2],\"5023\":[null,3],\"5024\":[null,6],\"5025\":[2],\"5026\":[null,19],\"5027\":[null,5],\"5028\":[null,12],\"5029\":[2],\"5030\":[null,8],\"5031\":[null,1],\"5032\":[null,25],\"5033\":[null,1],\"5034\":[null,14],\"5035\":[2],\"5036\":[null,2],\"5037\":[null,15],\"5038\":[null,3],\"5039\":[null,6],\"5040\":[null,5],\"5041\":[null,8],\"5042\":[null,2],\"5043\":[null,6],\"5044\":[null,2],\"5045\":[null,6],\"5046\":[null,4],\"5047\":[null,11],\"5048\":[null,2],\"5049\":[null,14],\"5050\":[null,2],\"5051\":[null,16],\"5052\":[null,2],\"5053\":[null,4],\"5054\":[null,2],\"5055\":[null,3],\"5056\":[null,4],\"5057\":[null,3],\"5058\":[null,4],\"5059\":[null,7],\"5060\":[null,6],\"5061\":[null,1],\"5062\":[1],\"5063\":[null,7],\"5064\":[null,1],\"5065\":[2],\"5066\":[null,3],\"5067\":[null,6],\"5068\":[null,5],\"5069\":[null,6],\"5070\":[null,7],\"5071\":[null,3],\"5072\":[null,3],\"5073\":[null,2],\"5074\":[null,5],\"5075\":[null,2],\"5076\":[null,3],\"5077\":[null,7],\"5078\":[null,4],\"5079\":[null,12],\"5080\":[null,8],\"5081\":[null,12],\"5082\":[null,4],\"5083\":[null,6],\"5084\":[2],\"5085\":[null,3],\"5086\":[null,2],\"5087\":[null,3],\"5088\":[null,2],\"5089\":[null,4],\"5090\":[1],\"5091\":[null,2],\"5092\":[null,6],\"5093\":[null,12],\"5094\":[null,4],\"5095\":[null,7],\"5096\":[null,4],\"5097\":[null,3],\"5098\":[null,4],\"5099\":[null,7],\"5100\":[1],\"5101\":[null,3],\"5102\":[null,5],\"5103\":[null,7],\"5104\":[null,5],\"5105\":[null,6],\"5106\":[null,14],\"5107\":[null,15],\"5108\":[null,4],\"5109\":[null,5],\"5110\":[null,8],\"5111\":[null,12],\"5112\":[null,11],\"5113\":[null,15],\"5114\":[null,12],\"5115\":[null,7],\"5116\":[null,10],\"5117\":[null,11],\"5118\":[1],\"5119\":[null,3],\"5120\":[null,8],\"5121\":[null,8],\"5122\":[null,8],\"5123\":[null,9],\"5124\":[null,5],\"5125\":[null,12],\"5126\":[null,11],\"5127\":[null,4],\"5128\":[null,9],\"5129\":[null,11],\"5130\":[null,3],\"5131\":[3],\"5132\":[null,6],\"5133\":[null,8],\"5134\":[null,6],\"5135\":[null,12],\"5136\":[null,11],\"5137\":[null,7],\"5138\":[null,10],\"5139\":[null,9],\"5140\":[null,13],\"5141\":[null,13],\"5142\":[null,11],\"5143\":[null,8],\"5144\":[null,5],\"5145\":[null,6],\"5146\":[null,17],\"5147\":[null,10],\"5148\":[null,16],\"5149\":[2],\"5150\":[null,6],\"5151\":[null,9],\"5152\":[null,10],\"5153\":[null,14],\"5154\":[null,8],\"5155\":[null,1],\"5156\":[null,2],\"5157\":[null,5],\"5158\":[null,6],\"5159\":[null,10],\"5160\":[2],\"5161\":[null,10],\"5162\":[null,11],\"5163\":[null,10],\"5164\":[2],\"5165\":[null,6],\"5166\":[null,13],\"5167\":[null,11],\"5168\":[3],\"5169\":[null,12],\"5170\":[null,7],\"5171\":[null,11],\"5172\":[null,14],\"5173\":[null,10],\"5174\":[1],\"5175\":[null,7],\"5176\":[null,8],\"5177\":[null,5],\"5178\":[null,7],\"5179\":[null,10],\"5180\":[1],\"5181\":[null,7],\"5182\":[null,11],\"5183\":[null,6],\"5184\":[null,17],\"5185\":[null,38],\"5186\":[null,12],\"5187\":[null,6],\"5188\":[null,3],\"5189\":[null,6],\"5190\":[null,6],\"5191\":[null,5],\"5192\":[null,2],\"5193\":[1],\"5194\":[null,8],\"5195\":[null,2],\"5196\":[null,17],\"5197\":[null,11],\"5198\":[1],\"5199\":[null,6],\"5200\":[null,2],\"5201\":[null,16],\"5202\":[1],\"5203\":[null,7],\"5204\":[null,2],\"5205\":[null,16],\"5206\":[null,11],\"5207\":[null,12],\"5208\":[1],\"5209\":[null,6],\"5210\":[null,6],\"5211\":[null,6],\"5212\":[null,9],\"5213\":[null,8],\"5214\":[null,2],\"5215\":[null,1],\"5216\":[null,4],\"5217\":[null,6],\"5218\":[null,6],\"5219\":[null,6],\"5220\":[null,6],\"5221\":[null,11],\"5222\":[null,13],\"5223\":[null,14],\"5224\":[null,7],\"5225\":[null,14],\"5226\":[null,20],\"5227\":[null,2],\"5228\":[null,6],\"5229\":[null,5],\"5230\":[null,24],\"5231\":[1],\"5232\":[null,25],\"5233\":[null,1],\"5234\":[null,5],\"5235\":[null,16],\"5236\":[null,10],\"5237\":[null,9],\"5238\":[null,4],\"5239\":[null,30],\"5240\":[null,2],\"5241\":[null,10],\"5242\":[null,15],\"5243\":[null,16],\"5244\":[null,9],\"5245\":[null,2],\"5246\":[2],\"5247\":[null,4],\"5248\":[null,1],\"5249\":[null,9],\"5250\":[null,10],\"5251\":[null,13],\"5252\":[1],\"5253\":[null,3],\"5254\":[null,4],\"5255\":[null,10],\"5256\":[1],\"5257\":[1],\"5258\":[null,2],\"5259\":[3],\"5260\":[null,3],\"5261\":[null,5],\"5262\":[1],\"5263\":[null,4],\"5264\":[3],\"5265\":[null,3],\"5266\":[null,2],\"5267\":[null,14],\"5268\":[null,6],\"5269\":[1],\"5270\":[null,4],\"5271\":[1],\"5272\":[null,4],\"5273\":[1],\"5274\":[null,10],\"5275\":[3],\"5276\":[5],\"5277\":[null,6],\"5278\":[null,2],\"5279\":[null,3],\"5280\":[4],\"5281\":[null,15],\"5282\":[null,15],\"5283\":[1],\"5284\":[1],\"5285\":[3],\"5286\":[null,6],\"5287\":[null,4],\"5288\":[null,9],\"5289\":[null,4],\"5290\":[1],\"5291\":[null,13],\"5292\":[null,9],\"5293\":[1],\"5294\":[3],\"5295\":[2],\"5296\":[null,7],\"5297\":[null,10],\"5298\":[null,21],\"5299\":[null,15],\"5300\":[null,12],\"5301\":[2],\"5302\":[null,8],\"5303\":[null,4],\"5304\":[null,7],\"5305\":[3],\"5306\":[2],\"5307\":[null,3],\"5308\":[null,19],\"5309\":[null,6],\"5310\":[null,11],\"5311\":[2],\"5312\":[null,10],\"5313\":[3],\"5314\":[2],\"5315\":[null,3],\"5316\":[null,12],\"5317\":[null,7],\"5318\":[2],\"5319\":[null,3],\"5320\":[3],\"5321\":[2],\"5322\":[null,3],\"5323\":[null,20],\"5324\":[null,7],\"5325\":[null,10],\"5326\":[2],\"5327\":[null,12],\"5328\":[3],\"5329\":[2],\"5330\":[null,3],\"5331\":[null,11],\"5332\":[null,6],\"5333\":[null,10],\"5334\":[2],\"5335\":[null,6],\"5336\":[1],\"5337\":[null,9],\"5338\":[null,4],\"5339\":[null,6],\"5340\":[null,9],\"5341\":[4],\"5342\":[null,12],\"5343\":[null,8],\"5344\":[null,19],\"5345\":[3],\"5346\":[null,5],\"5347\":[null,6],\"5348\":[null,9],\"5349\":[4],\"5350\":[null,17],\"5351\":[null,3],\"5352\":[null,18],\"5353\":[null,7],\"5354\":[null,11],\"5355\":[3],\"5356\":[null,5],\"5357\":[null,6],\"5358\":[null,13],\"5359\":[null,14],\"5360\":[null,9],\"5361\":[null,9],\"5362\":[null,6],\"5363\":[null,4],\"5364\":[null,16],\"5365\":[null,5],\"5366\":[null,3],\"5367\":[null,2],\"5368\":[1],\"5369\":[2],\"5370\":[null,11],\"5371\":[null,4],\"5372\":[null,10],\"5373\":[null,11],\"5374\":[null,11],\"5375\":[null,14],\"5376\":[null,5],\"5377\":[3],\"5378\":[null,12],\"5379\":[null,5],\"5380\":[null,12],\"5381\":[null,9],\"5382\":[null,9],\"5383\":[null,11],\"5384\":[null,9],\"5385\":[null,7],\"5386\":[null,4],\"5387\":[null,12],\"5388\":[null,10],\"5389\":[1],\"5390\":[1],\"5391\":[3],\"5392\":[2],\"5393\":[null,10],\"5394\":[2],\"5395\":[null,8],\"5396\":[null,3],\"5397\":[null,24],\"5398\":[null,2],\"5399\":[null,8],\"5400\":[null,8],\"5401\":[null,8],\"5402\":[null,3],\"5403\":[null,4],\"5404\":[null,4],\"5405\":[null,4],\"5406\":[null,4],\"5407\":[null,2],\"5408\":[null,7],\"5409\":[null,5],\"5410\":[2],\"5411\":[null,13],\"5412\":[2],\"5413\":[null,2],\"5414\":[null,3],\"5415\":[null,5],\"5416\":[2],\"5417\":[null,6],\"5418\":[null,10],\"5419\":[2],\"5420\":[null,3],\"5421\":[null,10],\"5422\":[null,4],\"5423\":[2],\"5424\":[null,4],\"5425\":[null,5],\"5426\":[null,3],\"5427\":[null,2],\"5428\":[null,2],\"5429\":[null,4],\"5430\":[null,2],\"5431\":[2],\"5432\":[null,5],\"5433\":[5],\"5434\":[null,8],\"5435\":[1],\"5436\":[1],\"5437\":[null,3],\"5438\":[null,2],\"5439\":[null,2],\"5440\":[null,5],\"5441\":[null,6],\"5442\":[null,3],\"5443\":[null,19],\"5444\":[null,13],\"5445\":[1],\"5446\":[2],\"5447\":[null,1],\"5448\":[null,3],\"5449\":[null,3],\"5450\":[null,5],\"5451\":[null,1],\"5452\":[null,3],\"5453\":[null,4],\"5454\":[null,8],\"5455\":[null,77],\"5456\":[2],\"5457\":[null,1],\"5458\":[null,10],\"5459\":[null,6],\"5460\":[null,1],\"5461\":[null,10],\"5462\":[null,2],\"5463\":[null,2],\"5464\":[null,69],\"5465\":[null,13],\"5466\":[null,2],\"5467\":[null,3],\"5468\":[null,6],\"5469\":[null,4],\"5470\":[null,4],\"5471\":[null,1],\"5472\":[null,13],\"5473\":[null,2],\"5474\":[null,19],\"5475\":[null,2],\"5476\":[null,4],\"5477\":[null,1],\"5478\":[null,11],\"5479\":[null,2],\"5480\":[null,2],\"5481\":[null,5],\"5482\":[null,5],\"5483\":[null,7],\"5484\":[null,6],\"5485\":[null,2],\"5486\":[null,5],\"5487\":[null,28],\"5488\":[1],\"5489\":[1],\"5490\":[null,29],\"5491\":[1],\"5492\":[null,2],\"5493\":[null,1],\"5494\":[null,10],\"5495\":[null,4],\"5496\":[null,32],\"5497\":[2],\"5498\":[2],\"5499\":[null,5],\"5500\":[2],\"5501\":[null,10],\"5502\":[null,1],\"5503\":[null,5],\"5504\":[null,1],\"5505\":[2],\"5506\":[null,8],\"5507\":[null,1],\"5508\":[null,5],\"5509\":[null,1],\"5510\":[null,10],\"5511\":[3],\"5512\":[null,6],\"5513\":[null,11],\"5514\":[null,3],\"5515\":[2],\"5516\":[4],\"5517\":[null,5],\"5518\":[null,9],\"5519\":[null,8],\"5520\":[null,11],\"5521\":[null,5],\"5522\":[3],\"5523\":[null,3],\"5524\":[null,12],\"5525\":[null,4],\"5526\":[null,2],\"5527\":[2],\"5528\":[null,2],\"5529\":[2],\"5530\":[null,52],\"5531\":[2],\"5532\":[null,3],\"5533\":[null,9],\"5534\":[null,7],\"5535\":[null,11],\"5536\":[1],\"5537\":[null,6],\"5538\":[null,11],\"5539\":[4],\"5540\":[null,5],\"5541\":[null,9],\"5542\":[null,8],\"5543\":[null,11],\"5544\":[null,5],\"5545\":[3],\"5546\":[null,3],\"5547\":[null,12],\"5548\":[1],\"5549\":[3],\"5550\":[null,1],\"5551\":[null,15],\"5552\":[null,2],\"5553\":[null,2],\"5554\":[null,2],\"5555\":[null,3],\"5556\":[null,3],\"5557\":[null,1],\"5558\":[null,1],\"5559\":[2],\"5560\":[null,2],\"5561\":[3],\"5562\":[null,1],\"5563\":[1],\"5564\":[1],\"5565\":[1],\"5566\":[1],\"5567\":[null,23],\"5568\":[null,5],\"5569\":[null,22],\"5570\":[null,3],\"5571\":[null,4],\"5572\":[null,2],\"5573\":[3],\"5574\":[null,13],\"5575\":[null,13],\"5576\":[null,18],\"5577\":[null,15],\"5578\":[null,7],\"5579\":[null,32],\"5580\":[null,16],\"5581\":[null,21],\"5582\":[null,16],\"5583\":[null,15],\"5584\":[null,5],\"5585\":[3],\"5586\":[null,29],\"5587\":[null,19],\"5588\":[null,9],\"5589\":[null,11],\"5590\":[null,14],\"5591\":[null,20],\"5592\":[null,13],\"5593\":[null,8],\"5594\":[null,9],\"5595\":[null,12],\"5596\":[null,12],\"5597\":[1],\"5598\":[3],\"5599\":[null,7],\"5600\":[null,3],\"5601\":[6],\"5602\":[null,7],\"5603\":[null,23],\"5604\":[null,21],\"5605\":[null,17],\"5606\":[7],\"5607\":[null,16],\"5608\":[null,13],\"5609\":[null,12],\"5610\":[null,14],\"5611\":[7],\"5612\":[null,30],\"5613\":[null,19],\"5614\":[null,28],\"5615\":[1],\"5616\":[5],\"5617\":[null,7],\"5618\":[null,9],\"5619\":[null,24],\"5620\":[null,12],\"5621\":[1],\"5622\":[null,8],\"5623\":[null,3],\"5624\":[null,7],\"5625\":[null,8],\"5626\":[null,2],\"5627\":[null,4],\"5628\":[null,5],\"5629\":[null,6],\"5630\":[null,5],\"5631\":[null,6],\"5632\":[null,7],\"5633\":[2],\"5634\":[null,17],\"5635\":[null,20],\"5636\":[null,15],\"5637\":[null,13],\"5638\":[null,10],\"5639\":[null,14],\"5640\":[null,8],\"5641\":[null,7],\"5642\":[1],\"5643\":[2],\"5644\":[2],\"5645\":[5],\"5646\":[null,2],\"5647\":[null,2],\"5648\":[null,2],\"5649\":[null,2],\"5650\":[null,2],\"5651\":[null,6],\"5652\":[4],\"5653\":[null,6],\"5654\":[null,4],\"5655\":[null,8],\"5656\":[null,5],\"5657\":[null,5],\"5658\":[null,5],\"5659\":[null,2],\"5660\":[null,7],\"5661\":[null,5],\"5662\":[null,3],\"5663\":[null,5],\"5664\":[null,9],\"5665\":[null,5],\"5666\":[null,5],\"5667\":[null,2],\"5668\":[null,6],\"5669\":[null,2],\"5670\":[null,2],\"5671\":[null,4],\"5672\":[null,6],\"5673\":[null,4],\"5674\":[2],\"5675\":[3],\"5676\":[null,7],\"5677\":[null,5],\"5678\":[null,4],\"5679\":[null,5],\"5680\":[null,10],\"5681\":[null,2],\"5682\":[null,4],\"5683\":[null,4],\"5684\":[null,8],\"5685\":[null,6],\"5686\":[null,2],\"5687\":[null,9],\"5688\":[null,5],\"5689\":[2],\"5690\":[5],\"5691\":[null,5],\"5692\":[null,2],\"5693\":[null,2],\"5694\":[null,2],\"5695\":[null,5],\"5696\":[null,2],\"5697\":[null,3],\"5698\":[null,4],\"5699\":[null,7],\"5700\":[null,3],\"5701\":[null,2],\"5702\":[null,3],\"5703\":[null,3],\"5704\":[null,2],\"5705\":[null,2],\"5706\":[null,3],\"5707\":[null,2],\"5708\":[null,2],\"5709\":[null,2],\"5710\":[null,3],\"5711\":[null,2],\"5712\":[1],\"5713\":[2],\"5714\":[null,15],\"5715\":[null,16],\"5716\":[null,7],\"5717\":[null,2],\"5718\":[null,7],\"5719\":[null,8],\"5720\":[null,4],\"5721\":[null,2],\"5722\":[null,9],\"5723\":[null,5],\"5724\":[null,2],\"5725\":[null,2],\"5726\":[null,4],\"5727\":[2],\"5728\":[3],\"5729\":[null,8],\"5730\":[null,2],\"5731\":[null,8],\"5732\":[3],\"5733\":[null,2],\"5734\":[null,14],\"5735\":[null,11],\"5736\":[null,2],\"5737\":[null,10],\"5738\":[3],\"5739\":[null,2],\"5740\":[null,2],\"5741\":[null,2],\"5742\":[3],\"5743\":[null,2],\"5744\":[null,2],\"5745\":[null,2],\"5746\":[2],\"5747\":[null,4],\"5748\":[null,7],\"5749\":[null,7],\"5750\":[null,7],\"5751\":[null,9],\"5752\":[null,2],\"5753\":[null,11],\"5754\":[null,11],\"5755\":[null,2],\"5756\":[null,2],\"5757\":[2],\"5758\":[null,2],\"5759\":[null,4],\"5760\":[null,3],\"5761\":[null,2],\"5762\":[null,5],\"5763\":[null,2],\"5764\":[null,2],\"5765\":[null,3],\"5766\":[null,2],\"5767\":[null,2],\"5768\":[2],\"5769\":[null,2],\"5770\":[null,14],\"5771\":[null,15],\"5772\":[null,2],\"5773\":[null,4],\"5774\":[2],\"5775\":[null,2],\"5776\":[null,10],\"5777\":[null,4],\"5778\":[null,2],\"5779\":[null,4],\"5780\":[null,8],\"5781\":[null,4],\"5782\":[null,3],\"5783\":[null,4],\"5784\":[null,5],\"5785\":[null,5],\"5786\":[null,2],\"5787\":[null,6],\"5788\":[null,2],\"5789\":[null,2],\"5790\":[null,3],\"5791\":[null,5],\"5792\":[null,4],\"5793\":[null,2],\"5794\":[null,4],\"5795\":[null,8],\"5796\":[null,2],\"5797\":[null,2],\"5798\":[null,1],\"5799\":[null,2],\"5800\":[null,1],\"5801\":[null,3],\"5802\":[null,7],\"5803\":[null,3],\"5804\":[null,3],\"5805\":[null,6],\"5806\":[null,7],\"5807\":[null,5],\"5808\":[2],\"5809\":[null,2],\"5810\":[null,4],\"5811\":[null,2],\"5812\":[null,3],\"5813\":[null,2],\"5814\":[null,11],\"5815\":[null,9],\"5816\":[null,2],\"5817\":[null,3],\"5818\":[null,2],\"5819\":[null,2],\"5820\":[null,2],\"5821\":[2],\"5822\":[null,2],\"5823\":[null,2],\"5824\":[null,5],\"5825\":[null,5],\"5826\":[null,7],\"5827\":[null,11],\"5828\":[2],\"5829\":[null,24],\"5830\":[3],\"5831\":[3],\"5832\":[2],\"5833\":[1],\"5834\":[1],\"5835\":[2],\"5836\":[3],\"5837\":[2],\"5838\":[2],\"5839\":[1],\"5840\":[3],\"5841\":[1],\"5842\":[1],\"5843\":[3],\"5844\":[1],\"5845\":[1],\"5846\":[1],\"5847\":[1],\"5848\":[1],\"5849\":[4],\"5850\":[1],\"5851\":[1],\"5852\":[2],\"5853\":[1],\"5854\":[1],\"5855\":[1]},\"averageFieldLength\":[1.7922004419400677,7.440705376449731],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"t\":\"OpenAI：mykey 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\"},\"2\":{\"h\":\"Slide page\"},\"3\":{\"h\":\"主要功能与配置演示\"},\"4\":{\"h\":\"目录\",\"a\":\"目录\"},\"5\":{\"t\":\"Markdown 展示\"},\"6\":{\"t\":\"页面展示\"},\"7\":{\"t\":\"禁用展示\"},\"8\":{\"t\":\"加密展示\"},\"9\":{\"h\":\"布局与功能禁用\"},\"10\":{\"t\":\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\"},\"11\":{\"t\":\"本页面就是一个示例，禁用了如下功能:\"},\"12\":{\"t\":\"导航栏\"},\"13\":{\"t\":\"侧边栏\"},\"14\":{\"t\":\"路径导航\"},\"15\":{\"t\":\"页面信息\"},\"16\":{\"t\":\"贡献者\"},\"17\":{\"t\":\"编辑此页链接\"},\"18\":{\"t\":\"更新时间\"},\"19\":{\"t\":\"上一篇/下一篇 链接\"},\"20\":{\"t\":\"评论\"},\"21\":{\"t\":\"页脚\"},\"22\":{\"t\":\"返回顶部按钮\"},\"23\":{\"h\":\"密码加密的文章\"},\"24\":{\"t\":\"实际的文章内容。\"},\"25\":{\"t\":\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\"},\"26\":{\"t\":\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"},\"27\":{\"h\":\"Markdown 展示\"},\"28\":{\"t\":\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\"},\"29\":{\"t\":\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"},\"30\":{\"h\":\"Markdown 介绍\",\"a\":\"markdown-介绍\"},\"31\":{\"t\":\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"},\"32\":{\"h\":\"Markdown 配置\",\"a\":\"markdown-配置\"},\"33\":{\"t\":\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\"},\"34\":{\"t\":\"相关信息\"},\"35\":{\"t\":\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"},\"36\":{\"h\":\"Markdown 扩展\",\"a\":\"markdown-扩展\"},\"37\":{\"t\":\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"},\"38\":{\"h\":\"VuePress 扩展\",\"a\":\"vuepress-扩展\"},\"39\":{\"t\":\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\"},\"40\":{\"t\":\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"},\"41\":{\"h\":\"主题扩展\",\"a\":\"主题扩展\"},\"42\":{\"t\":\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"},\"43\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"44\":{\"t\":\"安全的在 Markdown 中使用 {{ variable }}。\"},\"45\":{\"t\":\"自定义标题\"},\"46\":{\"t\":\"信息容器，包含 代码 与 链接。\"},\"47\":{\"t\":\"const a = 1; \"},\"48\":{\"t\":\"自定义标题\"},\"49\":{\"t\":\"提示容器\"},\"50\":{\"t\":\"自定义标题\"},\"51\":{\"t\":\"警告容器\"},\"52\":{\"t\":\"自定义标题\"},\"53\":{\"t\":\"危险容器\"},\"54\":{\"t\":\"自定义标题\"},\"55\":{\"t\":\"详情容器\"},\"56\":{\"t\":\"查看详情\"},\"57\":{\"h\":\"代码块\",\"a\":\"代码块\"},\"58\":{\"t\":\"查看详情\"},\"59\":{\"h\":\"上下角标\",\"a\":\"上下角标\"},\"60\":{\"t\":\"19th H2O\"},\"61\":{\"t\":\"查看详情\"},\"62\":{\"h\":\"自定义对齐\",\"a\":\"自定义对齐\"},\"63\":{\"t\":\"我是居中的\"},\"64\":{\"t\":\"我在右对齐\"},\"65\":{\"t\":\"查看详情\"},\"66\":{\"h\":\"Attrs\",\"a\":\"attrs\"},\"67\":{\"t\":\"一个拥有 ID 的 单词。\"},\"68\":{\"t\":\"查看详情\"},\"69\":{\"h\":\"脚注\",\"a\":\"脚注\"},\"70\":{\"t\":\"此文字有脚注[1].\"},\"71\":{\"t\":\"查看详情\"},\"72\":{\"h\":\"标记\",\"a\":\"标记\"},\"73\":{\"t\":\"你可以标记 重要的内容 。\"},\"74\":{\"t\":\"查看详情\"},\"75\":{\"h\":\"任务列表\",\"a\":\"任务列表\"},\"76\":{\"t\":\" 计划 1\"},\"77\":{\"t\":\" 计划 2\"},\"78\":{\"t\":\"查看详情\"},\"79\":{\"h\":\"图片增强\",\"a\":\"图片增强\"},\"80\":{\"t\":\"支持为图片设置颜色模式和大小\"},\"81\":{\"t\":\"查看详情\"},\"82\":{\"h\":\"卡片\",\"a\":\"卡片\"},\"83\":{\"t\":\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mrhope.site/logo.svg link: https://mrhope.site color: rgba(253, 230, 138, 0.15) \"},\"84\":{\"t\":\"查看详情\"},\"85\":{\"h\":\"图表\",\"a\":\"图表\"},\"86\":{\"t\":\"查看详情\"},\"87\":{\"h\":\"Echarts\",\"a\":\"echarts\"},\"88\":{\"t\":\"查看详情\"},\"89\":{\"h\":\"流程图\",\"a\":\"流程图\"},\"90\":{\"t\":\"查看详情\"},\"91\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"92\":{\"t\":\"查看详情\"},\"93\":{\"h\":\"Tex 语法\",\"a\":\"tex-语法\"},\"94\":{\"t\":\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\"},\"95\":{\"t\":\"查看详情\"},\"96\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"97\":{\"t\":\"Markdown 展示\"},\"98\":{\"t\":\"页面展示\"},\"99\":{\"t\":\"禁用展示\"},\"100\":{\"t\":\"加密展示\"},\"101\":{\"t\":\"查看详情\"},\"102\":{\"h\":\"代码演示\",\"a\":\"代码演示\"},\"103\":{\"t\":\"查看详情\"},\"104\":{\"h\":\"样式化\",\"a\":\"样式化\"},\"105\":{\"t\":\"向 Mr.Hope 捐赠一杯咖啡。 \"},\"106\":{\"t\":\"查看详情\"},\"107\":{\"h\":\"交互演示\",\"a\":\"交互演示\"},\"108\":{\"t\":\"查看详情\"},\"109\":{\"h\":\"Vue 交互演示\",\"a\":\"vue-交互演示\"},\"110\":{\"t\":\"查看详情\"},\"111\":{\"h\":\"幻灯片\",\"a\":\"幻灯片\"},\"112\":{\"t\":\"查看详情\"},\"113\":{\"t\":\"这是脚注内容 ↩︎\"},\"114\":{\"h\":\"页面配置\"},\"115\":{\"t\":\"more 注释之前的内容被视为文章摘要。\"},\"116\":{\"h\":\"页面信息\",\"a\":\"页面信息\"},\"117\":{\"t\":\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\"},\"118\":{\"t\":\"作者设置为 Ms.Hope。\"},\"119\":{\"t\":\"写作日期为 2020 年 1 月 1 日\"},\"120\":{\"t\":\"分类为 “使用指南”\"},\"121\":{\"t\":\"标签为 “页面配置” 和 “使用指南”\"},\"122\":{\"h\":\"页面内容\",\"a\":\"页面内容\"},\"123\":{\"t\":\"你可以自由在这里书写你的 Markdown。\"},\"124\":{\"t\":\"提示\"},\"125\":{\"t\":\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\"},\"126\":{\"t\":\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"},\"127\":{\"t\":\"主题包含了一个自定义徽章可以使用:\"},\"128\":{\"t\":\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"},\"129\":{\"h\":\"页面结构\",\"a\":\"页面结构\"},\"130\":{\"t\":\"此页面应当包含:\"},\"131\":{\"t\":\"路径导航\"},\"132\":{\"t\":\"标题和页面信息\"},\"133\":{\"t\":\"TOC (文章标题列表)\"},\"134\":{\"t\":\"贡献者、更新时间等页面元信息\"},\"135\":{\"t\":\"评论\"},\"136\":{\"t\":\"导航栏\"},\"137\":{\"t\":\"侧边栏\"},\"138\":{\"t\":\"页脚\"},\"139\":{\"t\":\"返回顶部按钮\"},\"140\":{\"t\":\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"},\"141\":{\"h\":\"指南\"},\"142\":{\"h\":\"功能亮点\",\"a\":\"功能亮点\"},\"143\":{\"h\":\"Bar\",\"a\":\"bar\"},\"144\":{\"t\":\"baz\"},\"145\":{\"t\":\"...\"},\"146\":{\"h\":\"Foo\",\"a\":\"foo\"},\"147\":{\"t\":\"ray\"},\"148\":{\"t\":\"...\"},\"149\":{\"h\":\"写在前面\"},\"150\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"151\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"152\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"153\":{\"h\":\"项目主页\"},\"154\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"155\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"156\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"157\":{\"h\":\"幻灯片页\"},\"158\":{\"h\":\"Bar 功能\"},\"159\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"160\":{\"t\":\"我们支持 bar 功能，...\"},\"161\":{\"h\":\"详情\",\"a\":\"详情\"},\"162\":{\"t\":\"baz\"},\"163\":{\"t\":\"...\"},\"164\":{\"h\":\"Baz\"},\"165\":{\"t\":\"功能详情...\"},\"166\":{\"h\":\"Foo 功能\"},\"167\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"168\":{\"t\":\"我们支持 foo 功能，...\"},\"169\":{\"h\":\"详情\",\"a\":\"详情\"},\"170\":{\"t\":\"ray\"},\"171\":{\"t\":\"...\"},\"172\":{\"h\":\"Ray\"},\"173\":{\"t\":\"功能详情...\"},\"174\":{\"h\":\"JVM\"},\"175\":{\"h\":\"一：JVM\",\"a\":\"一-jvm\"},\"176\":{\"h\":\"1.基本概念\",\"a\":\"_1-基本概念\"},\"177\":{\"h\":\"1.1说一下 Jvm 的主要组成部分？及其作用？\",\"a\":\"_1-1说一下-jvm-的主要组成部分-及其作用\"},\"178\":{\"t\":\"类加载器（ClassLoader）\"},\"179\":{\"t\":\"运行时数据区（Runtime Data Area）\"},\"180\":{\"t\":\"执行引擎（Execution Engine）\"},\"181\":{\"t\":\"本地库接口（Native Interface）\"},\"182\":{\"t\":\"首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\"},\"183\":{\"h\":\"2.内存结构（运行时数据区）\",\"a\":\"_2-内存结构-运行时数据区\"},\"184\":{\"t\":\"JVM整体架构：\"},\"185\":{\"t\":\"JVM\"},\"186\":{\"t\":\"Java 虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程一一对应的数据区域会随着线程开始和结束而创建和销毁。\"},\"187\":{\"t\":\"线程私有：程序计数器、虚拟机栈、本地方法区\"},\"188\":{\"t\":\"线程共享：堆、方法区, 堆外内存（Java7的永久代或JDK8的元空间、代码缓存）\"},\"189\":{\"h\":\"2.1程序计数器\",\"a\":\"_2-1程序计数器\"},\"190\":{\"t\":\"PC 寄存器用来存储指向下一条指令的地址，即将要执行的指令代码。由执行引擎读取下一条指令。\"},\"191\":{\"t\":\"通过下面两个问题，理解下PC计数器\"},\"192\":{\"t\":\"使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？\"},\"193\":{\"t\":\"因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。\"},\"194\":{\"t\":\"PC寄存器为什么会被设定为线程私有的？\"},\"195\":{\"t\":\"多线程在一个特定的时间段内只会执行其中某一个线程方法，CPU会不停的做任务切换，这样必然会导致经常中断或恢复。为了能够准确的记录各个线程正在执行的当前字节码指令地址，所以为每个线程都分配了一个PC寄存器，每个线程都独立计算，不会互相影响。\"},\"196\":{\"t\":\"相关总结如下：\"},\"197\":{\"t\":\"它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域\"},\"198\":{\"t\":\"在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期一致\"},\"199\":{\"t\":\"任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。如果当前线程正在执行的是 Java 方法，程序计数器记录的是 JVM 字节码指令地址，如果是执行 native 方法，则是未指定值（undefined）\"},\"200\":{\"t\":\"它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成\"},\"201\":{\"t\":\"字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令\"},\"202\":{\"t\":\"它是唯一一个在 JVM 规范中没有规定任何 OutOfMemoryError 情况的区域\"},\"203\":{\"h\":\"2.2虚拟机栈\",\"a\":\"_2-2虚拟机栈\"},\"204\":{\"t\":\"主管 Java 程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。\"},\"205\":{\"t\":\"JVM 直接对虚拟机栈的操作只有两个：每个方法执行，伴随着入栈（进栈/压栈），方法执行结束出栈\"},\"206\":{\"t\":\"栈不存在垃圾回收问题\"},\"207\":{\"t\":\"栈中可能出现的异常：\"},\"208\":{\"t\":\"如果采用固定大小的 Java 虚拟机栈，那每个线程的 Java 虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过 Java 虚拟机栈允许的最大容量，Java 虚拟机将会抛出一个 StackOverflowError 异常\"},\"209\":{\"t\":\"如果 Java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚拟机将会抛出一个OutOfMemoryError异常\"},\"210\":{\"t\":\"可以通过参数-Xss来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。\"},\"211\":{\"t\":\"每个栈帧（Stack Frame）中存储着：\"},\"212\":{\"t\":\"局部变量表（Local Variables）\"},\"213\":{\"t\":\"操作数栈（Operand Stack）(或称为表达式栈)\"},\"214\":{\"t\":\"动态链接（Dynamic Linking）：指向运行时常量池的方法引用\"},\"215\":{\"t\":\"方法返回地址（Return Address）：方法正常退出或异常退出的地址\"},\"216\":{\"t\":\"一些附加信息\"},\"217\":{\"t\":\"栈帧\"},\"218\":{\"h\":\"2.3本地方法栈\",\"a\":\"_2-3本地方法栈\"},\"219\":{\"t\":\"本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区，它甚至可以直接使用本地处理器中的寄存器，直接从本地内存的堆中分配任意数量的内存。\"},\"220\":{\"t\":\"Java 虚拟机栈用于管理 Java 方法的调用，而本地方法栈用于管理本地方法的调用\"},\"221\":{\"t\":\"本地方法栈也是线程私有的\"},\"222\":{\"h\":\"2.4堆内存\",\"a\":\"_2-4堆内存\"},\"223\":{\"t\":\"对于大多数应用，Java 堆是 Java 虚拟机管理的内存中最大的一块，被所有线程共享。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数据都在这里分配内存。\"},\"224\":{\"t\":\"为了进行高效的垃圾回收，虚拟机把堆内存逻辑上划分成三块区域（分代的唯一理由就是优化 GC 性能）：\"},\"225\":{\"t\":\"新生带（年轻代）：新对象和没达到一定年龄的对象都在新生代\"},\"226\":{\"t\":\"老年代（养老区）：被长时间使用的对象，老年代的内存空间应该要比年轻代更大\"},\"227\":{\"t\":\"元空间（JDK1.8 之前叫永久代）：像一些方法中的操作临时对象等，JDK1.8 之前是占用 JVM 内存，JDK1.8 之后直接使用物理内存\"},\"228\":{\"t\":\"堆内存\"},\"229\":{\"t\":\"Java 虚拟机规范规定，Java 堆可以是处于物理上不连续的内存空间中，只要逻辑上是连续的即可，像磁盘空间一样。实现时，既可以是固定大小，也可以是可扩展的，主流虚拟机都是可扩展的（通过 -Xmx 和 -Xms 控制），如果堆中没有完成实例分配，并且堆无法再扩展时，就会抛出 OutOfMemoryError 异常。\"},\"230\":{\"h\":\"年轻代 (Young Generation)\",\"a\":\"年轻代-young-generation\"},\"231\":{\"t\":\"年轻代是所有新对象创建的地方。当填充年轻代时，执行垃圾收集。这种垃圾收集称为 Minor GC。年轻一代被分为三个部分——伊甸园（Eden Memory）和两个幸存区（Survivor Memory，被称为from/to或s0/s1），默认比例是8:1:1\"},\"232\":{\"t\":\"大多数新创建的对象都位于 Eden 内存空间中\"},\"233\":{\"t\":\"当 Eden 空间被对象填充时，执行Minor GC，并将所有幸存者对象移动到一个幸存者空间中\"},\"234\":{\"t\":\"Minor GC 检查幸存者对象，并将它们移动到另一个幸存者空间。所以每次，一个幸存者空间总是空的\"},\"235\":{\"t\":\"经过多次 GC 循环后存活下来的对象被移动到老年代。通常，这是通过设置年轻一代对象的年龄阈值来实现的，然后他们才有资格提升到老一代\"},\"236\":{\"h\":\"老年代(Old Generation)\",\"a\":\"老年代-old-generation\"},\"237\":{\"t\":\"旧的一代内存包含那些经过许多轮小型 GC 后仍然存活的对象。通常，垃圾收集是在老年代内存满时执行的。老年代垃圾收集称为 主GC（Major GC），通常需要更长的时间。\"},\"238\":{\"t\":\"大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在 Eden 区和两个Survivor 区之间发生大量的内存拷贝。\"},\"239\":{\"h\":\"元空间\",\"a\":\"元空间\"},\"240\":{\"t\":\"不管是 JDK8 之前的永久代，还是 JDK8 及以后的元空间，都可以看作是 Java 虚拟机规范中方法区的实现。\"},\"241\":{\"t\":\"虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫 Non-Heap（非堆），目的应该是与 Java 堆区分开。\"},\"242\":{\"h\":\"设置堆内存大小和 OOM\",\"a\":\"设置堆内存大小和-oom\"},\"243\":{\"t\":\"ava 堆用于存储 Java 对象实例，那么堆的大小在 JVM 启动的时候就确定了，我们可以通过 -Xmx 和 -Xms 来设定\"},\"244\":{\"t\":\"-Xms 用来表示堆的起始内存，等价于 -XX:InitialHeapSize\"},\"245\":{\"t\":\"-Xmx 用来表示堆的最大内存，等价于 -XX:MaxHeapSize\"},\"246\":{\"t\":\"如果堆的内存大小超过 -Xmx 设定的最大内存， 就会抛出 OutOfMemoryError 异常。\"},\"247\":{\"t\":\"我们通常会将 -Xmx 和 -Xms 两个参数配置为相同的值，其目的是为了能够在垃圾回收机制清理完堆区后不再需要重新分隔计算堆的大小，从而提高性能\"},\"248\":{\"t\":\"默认情况下，初始堆内存大小为：电脑内存大小/64\"},\"249\":{\"t\":\"默认情况下，最大堆内存大小为：电脑内存大小/4\"},\"250\":{\"t\":\"可以通过代码获取到我们的设置值，当然也可以模拟 OOM：\"},\"251\":{\"t\":\"public static void main(String[] args) { //返回 JVM 堆大小 long initalMemory = Runtime.getRuntime().totalMemory() / 1024 /1024; //返回 JVM 堆的最大内存 long maxMemory = Runtime.getRuntime().maxMemory() / 1024 /1024; System.out.println(\\\"-Xms : \\\"+initalMemory + \\\"M\\\"); System.out.println(\\\"-Xmx : \\\"+maxMemory + \\\"M\\\"); System.out.println(\\\"系统内存大小：\\\" + initalMemory * 64 / 1024 + \\\"G\\\"); System.out.println(\\\"系统内存大小：\\\" + maxMemory * 4 / 1024 + \\\"G\\\"); } \"},\"252\":{\"h\":\"对象在堆中的生命周期\",\"a\":\"对象在堆中的生命周期\"},\"253\":{\"t\":\"在 JVM 内存模型的堆中，堆被划分为新生代和老年代\"},\"254\":{\"t\":\"新生代又被进一步划分为 Eden区 和 Survivor区，Survivor 区由 From Survivor 和 To Survivor 组成\"},\"255\":{\"t\":\"当创建一个对象时，对象会被优先分配到新生代的 Eden 区\"},\"256\":{\"t\":\"此时 JVM 会给对象定义一个对象年轻计数器（-XX:MaxTenuringThreshold）\"},\"257\":{\"t\":\"当 Eden 空间不足时，JVM 将执行新生代的垃圾回收（Minor GC）\"},\"258\":{\"t\":\"JVM 会把存活的对象转移到 Survivor 中，并且对象年龄 +1\"},\"259\":{\"t\":\"对象在 Survivor 中同样也会经历 Minor GC，每经历一次 Minor GC，对象年龄都会+1\"},\"260\":{\"t\":\"如果分配的对象超过了-XX:PetenureSizeThreshold，对象会直接被分配到老年代。\"},\"261\":{\"h\":\"对象的分配过程\",\"a\":\"对象的分配过程\"},\"262\":{\"t\":\"为对象分配内存是一件非常严谨和复杂的任务，JVM 的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法和内存回收算法密切相关，所以还需要考虑 GC 执行完内存回收后是否会在内存空间中产生内存碎片。\"},\"263\":{\"t\":\"new 的对象先放在伊甸园区，此区有大小限制\"},\"264\":{\"t\":\"当伊甸园的空间填满时，程序又需要创建对象，JVM 的垃圾回收器将对伊甸园区进行垃圾回收（Minor GC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区\"},\"265\":{\"t\":\"然后将伊甸园中的剩余对象移动到幸存者 0 区\"},\"266\":{\"t\":\"如果再次触发垃圾回收，此时上次幸存下来的放到幸存者 0 区，如果没有回收，就会放到幸存者 1 区\"},\"267\":{\"t\":\"如果再次经历垃圾回收，此时会重新放回幸存者 0 区，接着再去幸存者 1 区\"},\"268\":{\"t\":\"什么时候才会去养老区呢？ 默认是 15 次回收标记\"},\"269\":{\"t\":\"在养老区，相对悠闲。当养老区内存不足时，再次触发 Major GC，进行养老区的内存清理\"},\"270\":{\"t\":\"若养老区执行了 Major GC 之后发现依然无法进行对象的保存，就会产生 OOM 异常\"},\"271\":{\"h\":\"什么是 TLAB?为什么要有 TLAB ?\",\"a\":\"什么是-tlab-为什么要有-tlab\"},\"272\":{\"t\":\"从内存模型而不是垃圾回收的角度，对 Eden 区域继续进行划分，JVM 为每个线程分配了一个私有缓存区域，它包含在 Eden 空间内\"},\"273\":{\"t\":\"多线程同时分配内存时，使用 TLAB 可以避免一系列的非线程安全问题，同时还能提升内存分配的吞吐量，因此我们可以将这种内存分配方式称为快速分配策略\"},\"274\":{\"t\":\"由于对象实例的创建在 JVM 中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的\"},\"275\":{\"t\":\"为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度\"},\"276\":{\"h\":\"堆是分配对象存储的唯一选择吗\",\"a\":\"堆是分配对象存储的唯一选择吗\"},\"277\":{\"t\":\"随着 JIT 编译期的发展和逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。 ——《深入理解 Java 虚拟机》\"},\"278\":{\"h\":\"2.5方法区\",\"a\":\"_2-5方法区\"},\"279\":{\"t\":\"方法区（Method Area）与 Java 堆一样，是所有线程共享的内存区域。\"},\"280\":{\"t\":\"虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫 Non-Heap（非堆），目的应该是与 Java 堆区分开。\"},\"281\":{\"t\":\"运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本/字段/方法/接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将类在加载后进入方法区的运行时常量池中存放。运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的是 String.intern()方法。受方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。\"},\"282\":{\"t\":\"方法区（method area）*只是 **JVM 规范**中定义的一个*概念，用于存储类信息、常量池、静态变量、JIT编译后的代码等数据，并没有规定如何去实现它，不同的厂商有不同的实现。而永久代（PermGen）**是 **Hotspot** 虚拟机特有的概念， Java8 的时候又被**元空间**取代了，永久代和元空间都可以理解为方法区的落地实现。\"},\"283\":{\"t\":\"永久代物理是堆的一部分，和新生代，老年代地址是连续的（受垃圾回收器管理），而元空间存在于本地内存（我们常说的堆外内存，不受垃圾回收器管理），这样就不受 JVM 限制了，也比较难发生OOM（都会有溢出异常）。\"},\"284\":{\"h\":\"运行时常量池\",\"a\":\"运行时常量池\"},\"285\":{\"t\":\"常量池可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。\"},\"286\":{\"t\":\"运行时常量池\"},\"287\":{\"t\":\"在加载类和结构到虚拟机后，就会创建对应的运行时常量池\"},\"288\":{\"t\":\"常量池表（Constant Pool Table）是 Class 文件的一部分，用于存储编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中\"},\"289\":{\"t\":\"JVM 为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的\"},\"290\":{\"t\":\"运行时常量池中包含各种不同的常量，包括编译器就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或字段引用。此时不再是常量池中的符号地址了，这里换为真实地址 \"},\"291\":{\"t\":\"运行时常量池，相对于 Class 文件常量池的另一个重要特征是：动态性，Java 语言并不要求常量一定只有编译期间才能产生，运行期间也可以将新的常量放入池中，String 类的 intern() 方法就是这样的\"},\"292\":{\"t\":\"当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则 JVM 会抛出 OutOfMemoryError 异常。\"},\"293\":{\"t\":\"字符串常量池放在堆里，静态变量放在堆里。\"},\"294\":{\"t\":\"下图来自 JavaGuide：https://javaguide.cn/java/jvm/memory-area.html\"},\"295\":{\"h\":\"3.垃圾回收机制\",\"a\":\"_3-垃圾回收机制\"},\"296\":{\"h\":\"3.1如何判断对象是否可回收？\",\"a\":\"_3-1如何判断对象是否可回收\"},\"297\":{\"h\":\"引用计数算法\",\"a\":\"引用计数算法\"},\"298\":{\"t\":\"给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。\"},\"299\":{\"t\":\"两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。\"},\"300\":{\"t\":\"正因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。\"},\"301\":{\"h\":\"可达性分析算法\",\"a\":\"可达性分析算法\"},\"302\":{\"t\":\"通过 GC Roots 作为起始点进行搜索，能够到达到的对象都是存活的，不可达的对象可被回收。\"},\"303\":{\"t\":\"Java 虚拟机使用该算法来判断对象是否可被回收，在 Java 中 GC Roots 一般包含以下内容:\"},\"304\":{\"t\":\"虚拟机栈中引用的对象\"},\"305\":{\"t\":\"本地方法栈中引用的对象\"},\"306\":{\"t\":\"方法区中类静态属性引用的对象\"},\"307\":{\"t\":\"方法区中的常量引用的对象\"},\"308\":{\"h\":\"引用类型\",\"a\":\"引用类型\"},\"309\":{\"t\":\"Java 具有四种强度不同的引用类型。\"},\"310\":{\"t\":\"强引用\"},\"311\":{\"t\":\"被强引用关联的对象不会被回收。\"},\"312\":{\"t\":\"使用 new 一个新对象的方式来创建强引用。\"},\"313\":{\"t\":\"软引用\"},\"314\":{\"t\":\"被软引用关联的对象只有在内存不够的情况下才会被回收。\"},\"315\":{\"t\":\"使用 SoftReference 类来创建软引用。\"},\"316\":{\"t\":\"弱引用\"},\"317\":{\"t\":\"被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。\"},\"318\":{\"t\":\"使用 WeakReference 类来实现弱引用。\"},\"319\":{\"t\":\"虚引用\"},\"320\":{\"t\":\"又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象。\"},\"321\":{\"t\":\"为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知。\"},\"322\":{\"t\":\"使用 PhantomReference 来实现虚引用。\"},\"323\":{\"h\":\"3.2垃圾回收算法\",\"a\":\"_3-2垃圾回收算法\"},\"324\":{\"h\":\"3.2.1标记 - 清除\",\"a\":\"_3-2-1标记-清除\"},\"325\":{\"t\":\"将存活的对象进行标记，然后清理掉未被标记的对象。\"},\"326\":{\"t\":\"不足:\"},\"327\":{\"t\":\"标记和清除过程效率都不高；\"},\"328\":{\"t\":\"会产生大量不连续的内存碎片，导致无法给大对象分配内存。\"},\"329\":{\"h\":\"3.2.2标记 - 整理\",\"a\":\"_3-2-2标记-整理\"},\"330\":{\"t\":\"让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。\"},\"331\":{\"h\":\"3.2.3复制\",\"a\":\"_3-2-3复制\"},\"332\":{\"t\":\"将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。\"},\"333\":{\"t\":\"主要不足是只使用了内存的一半。\"},\"334\":{\"t\":\"现在的商业虚拟机都采用这种收集算法来回收新生代，但是并不是将新生代划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和使用过的那一块 Survivor。\"},\"335\":{\"t\":\"HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。\"},\"336\":{\"h\":\"3.2.4分代收集\",\"a\":\"_3-2-4分代收集\"},\"337\":{\"t\":\"现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。\"},\"338\":{\"t\":\"一般将堆分为新生代和老年代。\"},\"339\":{\"t\":\"新生代使用: 复制算法\"},\"340\":{\"t\":\"老年代使用: 标记 - 清除 或者 标记 - 整理 算法\"},\"341\":{\"h\":\"3.3垃圾收集器\",\"a\":\"_3-3垃圾收集器\"},\"342\":{\"t\":\"以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。\"},\"343\":{\"t\":\"单线程与多线程: 单线程指的是垃圾收集器只使用一个线程进行收集，而多线程使用多个线程；\"},\"344\":{\"t\":\"串行与并行: 串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并形指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。\"},\"345\":{\"h\":\"3.3.1Serial 收集器\",\"a\":\"_3-3-1serial-收集器\"},\"346\":{\"t\":\"Serial 翻译为串行，也就是说它以串行的方式执行。\"},\"347\":{\"t\":\"它是单线程的收集器，只会使用一个线程进行垃圾收集工作。\"},\"348\":{\"t\":\"它的优点是简单高效，对于单个 CPU 环境来说，由于没有线程交互的开销，因此拥有最高的单线程收集效率。\"},\"349\":{\"t\":\"它是 Client 模式下的默认新生代收集器，因为在用户的桌面应用场景下，分配给虚拟机管理的内存一般来说不会很大。Serial 收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。\"},\"350\":{\"h\":\"3.3.2ParNew 收集器\",\"a\":\"_3-3-2parnew-收集器\"},\"351\":{\"t\":\"它是 Serial 收集器的多线程版本。\"},\"352\":{\"t\":\"是 Server 模式下的虚拟机首选新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。\"},\"353\":{\"t\":\"默认开启的线程数量与 CPU 数量相同，可以使用 -XX:ParallelGCThreads 参数来设置线程数。\"},\"354\":{\"h\":\"3.3.3Parallel Scavenge 收集器\",\"a\":\"_3-3-3parallel-scavenge-收集器\"},\"355\":{\"t\":\"与 ParNew 一样是多线程收集器。\"},\"356\":{\"t\":\"其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，它被称为“吞吐量优先”收集器。\"},\"357\":{\"h\":\"3.3.4Serial Old 收集器\",\"a\":\"_3-3-4serial-old-收集器\"},\"358\":{\"t\":\"是 Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。\"},\"359\":{\"h\":\"3.3.5Parallel Old 收集器\",\"a\":\"_3-3-5parallel-old-收集器\"},\"360\":{\"t\":\"是 Parallel Scavenge 收集器的老年代版本。\"},\"361\":{\"h\":\"3.3.6CMS 收集器\",\"a\":\"_3-3-6cms-收集器\"},\"362\":{\"t\":\"CMS(Concurrent Mark Sweep)，Mark Sweep 指的是标记 - 清除算法。\"},\"363\":{\"t\":\"分为以下四个流程:\"},\"364\":{\"t\":\"初始标记: 仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿 (STW, stop the world)。\"},\"365\":{\"t\":\"并发标记: 进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。\"},\"366\":{\"t\":\"重新标记: 为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。\"},\"367\":{\"t\":\"并发清除: 不需要停顿。\"},\"368\":{\"t\":\"在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。\"},\"369\":{\"t\":\"具有以下缺点:\"},\"370\":{\"t\":\"吞吐量低: 低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。\"},\"371\":{\"t\":\"标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。\"},\"372\":{\"h\":\"3.3.7G1 收集器\",\"a\":\"_3-3-7g1-收集器\"},\"373\":{\"t\":\"G1(Garbage-First)，它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。\"},\"374\":{\"t\":\"堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。\"},\"375\":{\"t\":\"G1 把堆划分成多个大小相等的独立区域(Region)，新生代和老年代不再物理隔离。通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间(这两个值是通过过去回收的经验获得)，并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。\"},\"376\":{\"t\":\"G1 收集器的运作大致可划分为以下几个步骤:\"},\"377\":{\"t\":\"初始标记\"},\"378\":{\"t\":\"并发标记\"},\"379\":{\"t\":\"最终标记: 为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。\"},\"380\":{\"t\":\"筛选回收: 首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。\"},\"381\":{\"t\":\"具备如下特点:\"},\"382\":{\"t\":\"空间整合: 整体来看是基于“标记 - 整理”算法实现的收集器，从局部(两个 Region 之间)上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。\"},\"383\":{\"t\":\"可预测的停顿: 能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。\"},\"384\":{\"h\":\"4.类加载机制\",\"a\":\"_4-类加载机制\"},\"385\":{\"h\":\"4.1类的生命周期\",\"a\":\"_4-1类的生命周期\"},\"386\":{\"t\":\"类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，前三个阶段可以统称为连接（Linking）。\"},\"387\":{\"t\":\"这 7 个阶段的顺序如下图所示：\"},\"388\":{\"h\":\"4.2类加载过程\",\"a\":\"_4-2类加载过程\"},\"389\":{\"t\":\"Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？\"},\"390\":{\"t\":\"系统加载 Class 类型的文件主要三步：加载->连接->初始化。连接过程又可分为三步：验证->准备->解析。\"},\"391\":{\"h\":\"4.3类加载器\",\"a\":\"_4-3类加载器\"},\"392\":{\"h\":\"4.3.1介绍：\",\"a\":\"_4-3-1介绍\"},\"393\":{\"t\":\"类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。\"},\"394\":{\"t\":\"每个 Java 类都有一个引用指向加载它的 ClassLoader。\"},\"395\":{\"t\":\"数组类不是通过 ClassLoader 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。\"},\"396\":{\"t\":\"简单来说，类加载器的主要作用就是加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。\"},\"397\":{\"h\":\"4.3.2类加载器加载规则\",\"a\":\"_4-3-2类加载器加载规则\"},\"398\":{\"t\":\"JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。\"},\"399\":{\"t\":\"对于已经加载的类会被放在 ClassLoader 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。\"},\"400\":{\"h\":\"4.3.3类加载器总结\",\"a\":\"_4-3-3类加载器总结\"},\"401\":{\"t\":\"JVM 中内置了三个重要的 ClassLoader：\"},\"402\":{\"t\":\"BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ %JAVA_HOME%/lib目录下的 rt.jar 、resources.jar 、charsets.jar等 jar 包和类）以及被 -Xbootclasspath参数指定的路径下的所有类。\"},\"403\":{\"t\":\"ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类以及被 java.ext.dirs 系统变量所指定的路径下的所有类。\"},\"404\":{\"t\":\"AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。\"},\"405\":{\"t\":\"除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ .class 文件）进行加密，加载时再利用自定义的类加载器对其解密。\"},\"406\":{\"t\":\"如果我们要自定义自己的类加载器，很明显需要继承 ClassLoader抽象类。\"},\"407\":{\"t\":\"ClassLoader 类有两个关键的方法：\"},\"408\":{\"t\":\"protected Class loadClass(String name, boolean resolve)：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resove 如果为 true，在加载时调用 resolveClass(Class<?> c) 方法解析该类。\"},\"409\":{\"t\":\"protected Class findClass(String name)：根据类的二进制名称来查找类，默认实现是空方法。\"},\"410\":{\"t\":\"官方 API 文档中写到：\"},\"411\":{\"t\":\"Subclasses of ClassLoader are encouraged to override findClass(String name), rather than this method.\"},\"412\":{\"t\":\"建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。\"},\"413\":{\"t\":\"如果我们不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 loadClass() 方法。\"},\"414\":{\"h\":\"4.3.4双亲委派模型\",\"a\":\"_4-3-4双亲委派模型\"},\"415\":{\"t\":\"类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载呢？这就需要提到双亲委派模型了。\"},\"416\":{\"t\":\"ClassLoader 类使用委托模型来搜索类和资源。\"},\"417\":{\"t\":\"双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。\"},\"418\":{\"t\":\"ClassLoader 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。\"},\"419\":{\"t\":\"下图展示的各种类加载器之间的层次关系被称为类加载器的“双亲委派模型(Parents Delegation Model)”。\"},\"420\":{\"t\":\"双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在 java.lang.ClassLoader 的 loadClass() 中，相关代码如下所示。\"},\"421\":{\"t\":\"protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { //首先，检查该类是否已经加载过 Class c = findLoadedClass(name); if (c == null) { //如果 c 为 null，则说明该类没有被加载过 long t0 = System.nanoTime(); try { if (parent != null) { //当父类的加载器不为空，则通过父类的loadClass来加载该类 c = parent.loadClass(name, false); } else { //当父类的加载器为空，则调用启动类加载器来加载该类 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { //非空父类的类加载器无法找到相应的类，则抛出异常 } if (c == null) { //当父类加载器无法加载时，则调用findClass方法来加载该类 //用户可通过覆写该方法，来自定义类加载器 long t1 = System.nanoTime(); c = findClass(name); //用于统计类加载器相关的信息 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { //对类进行link操作 resolveClass(c); } return c; } } \"},\"422\":{\"t\":\"每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。\"},\"423\":{\"t\":\"结合上面的源码，简单总结一下双亲委派模型的执行流程：\"},\"424\":{\"t\":\"在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。\"},\"425\":{\"t\":\"类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 BootstrapClassLoader 中。\"},\"426\":{\"t\":\"只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 findClass() 方法来加载类）。\"},\"427\":{\"t\":\"优点：\"},\"428\":{\"t\":\"双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。\"},\"429\":{\"h\":\"一、异常和反射\"},\"430\":{\"h\":\"1.1异常\",\"a\":\"_1-1异常\"},\"431\":{\"h\":\"1.1.1Java异常类层次结构?\",\"a\":\"_1-1-1java异常类层次结构\"},\"432\":{\"t\":\"Throwable是 Java 语言中所有错误与异常的超类。\"},\"433\":{\"t\":\"Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。\"},\"434\":{\"t\":\"Exception 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。\"},\"435\":{\"t\":\"运行时异常\"},\"436\":{\"t\":\"都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。\"},\"437\":{\"t\":\"运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。\"},\"438\":{\"t\":\"非运行时异常 （编译异常）\"},\"439\":{\"t\":\"是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。\"},\"440\":{\"h\":\"1.1.2可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）区别？\",\"a\":\"_1-1-2可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions-区别\"},\"441\":{\"t\":\"可查异常（编译器要求必须处置的异常）：\"},\"442\":{\"t\":\"正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。\"},\"443\":{\"t\":\"除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。\"},\"444\":{\"t\":\"不可查异常(编译器不要求强制处置的异常)\"},\"445\":{\"t\":\"包括运行时异常（RuntimeException与其子类）和错误（Error）。\"},\"446\":{\"h\":\"1.1.3throw和throws的区别？\",\"a\":\"_1-1-3throw和throws的区别\"},\"447\":{\"t\":\"异常的申明(throws)\"},\"448\":{\"t\":\"在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：\"},\"449\":{\"t\":\"public static void method() throws IOException, FileNotFoundException{ //something statements } \"},\"450\":{\"t\":\"异常的抛出(throw)\"},\"451\":{\"t\":\"如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：\"},\"452\":{\"t\":\"public static double method(int value) { if(value == 0) { throw new ArithmeticException(\\\"参数不能为0\\\"); //抛出一个运行时异常 } return 5.0 / value; } \"},\"453\":{\"h\":\"1.1.4Java 7 的 try-with-resource?\",\"a\":\"_1-1-4java-7-的-try-with-resource\"},\"454\":{\"t\":\"如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。\"},\"455\":{\"t\":\"public void automaticallyCloseResource() { File file = new File(\\\"./tmp.txt\\\"); try (FileInputStream inputStream = new FileInputStream(file);) { // use the inputStream to read a file } catch (FileNotFoundException e) { log.error(e); } catch (IOException e) { log.error(e); } } \"},\"456\":{\"t\":\"看下它的背后：\"},\"457\":{\"t\":\"public static transient void main(String args[]) { BufferedReader br; Throwable throwable; br = new BufferedReader(new FileReader(\\\"d:\\\\\\\\ hollischuang.xml\\\")); throwable = null; String line; try { while((line = br.readLine()) != null) System.out.println(line); } catch(Throwable throwable2) { throwable = throwable2; throw throwable2; } if(br != null) if(throwable != null) try { br.close(); } catch(Throwable throwable1) { throwable.addSuppressed(throwable1); } else br.close(); break MISSING_BLOCK_LABEL_113; Exception exception; exception; if(br != null) if(throwable != null) try { br.close(); } catch(Throwable throwable3) { throwable.addSuppressed(throwable3); } else br.close(); throw exception; IOException ioexception; ioexception; } } \"},\"458\":{\"t\":\"其实背后的原理也很简单，那些我们没有做的关闭资源的操作，编译器都帮我们做了。所以，再次印证了，语法糖的作用就是方便程序员的使用，但最终还是要转成编译器认识的语言。\"},\"459\":{\"h\":\"1.1.5finally和return的执行顺序\",\"a\":\"_1-1-5finally和return的执行顺序\"},\"460\":{\"t\":\"try() ⾥⾯有⼀个return语句， 那么后⾯的finally{}⾥⾯的code会不会被执⾏， 什么时候执⾏， 是在return前还是return后?\"},\"461\":{\"t\":\"如果try中有return语句， 那么finally中的代码还是会执⾏。因为return表⽰的是要整个⽅法体返回， 所以，finally中的语句会在return之前执⾏。\"},\"462\":{\"t\":\"但是return前执行的finally块内，对数据的修改效果对于引用类型和值类型会不同：\"},\"463\":{\"t\":\"// 测试 修改值类型 static int f() { int ret = 0; try { return ret; // 返回 0，finally内的修改效果不起作用 } finally { ret++; System.out.println(\\\"finally执行\\\"); } } // 测试 修改引用类型 static int[] f2(){ int[] ret = new int[]{0}; try { return ret; // 返回 [1]，finally内的修改效果起了作用 } finally { ret[0]++; System.out.println(\\\"finally执行\\\"); } } \"},\"464\":{\"h\":\"1.1.6异常的底层？\",\"a\":\"_1-1-6异常的底层\"},\"465\":{\"t\":\"提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。\"},\"466\":{\"t\":\"public static void simpleTryCatch() { try { testNPE(); } catch (Exception e) { e.printStackTrace(); } } \"},\"467\":{\"t\":\"使用javap来分析这段代码（需要先使用javac编译）：\"},\"468\":{\"t\":\"//javap -c Main public static void simpleTryCatch(); Code: 0: invokestatic #3 // Method testNPE:()V 3: goto 11 6: astore_0 7: aload_0 8: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 11: return Exception table: from to target type 0 3 6 Class java/lang/Exception \"},\"469\":{\"t\":\"看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。\"},\"470\":{\"t\":\"异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下\"},\"471\":{\"t\":\"from 可能发生异常的起始点\"},\"472\":{\"t\":\"to 可能发生异常的结束点\"},\"473\":{\"t\":\"target 上述from和to之前发生异常后的异常处理者的位置\"},\"474\":{\"t\":\"type 异常处理者处理的异常的类信息\"},\"475\":{\"h\":\"1.2反射\",\"a\":\"_1-2反射\"},\"476\":{\"h\":\"1.2.1什么是反射机制?\",\"a\":\"_1-2-1什么是反射机制\"},\"477\":{\"t\":\"JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制。\"},\"478\":{\"t\":\"直接new对象就叫正射。\"},\"479\":{\"t\":\"如下:\"},\"480\":{\"t\":\"Map<String, String> map = new HashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"481\":{\"t\":\"那反射是啥？我先不说反射是啥，概念啥的太虚幻我就不说了，把你绕蒙你这篇文章就白看了，直接举例吧\"},\"482\":{\"t\":\"接着看上面的正射，如果哪天你发现用LinkedHashMap效果更好，然后你修改代码：\"},\"483\":{\"t\":\"Map<String, String> map = new LinkedHashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"484\":{\"t\":\"改完了编译运行没有bug然而过了两天你发现用LinkedHashMap会有隐患，还是得改回去用HashMap，成年人的崩溃如此简单，但是聪明的你想到可以加个判断，根据传入的条件来决定用HashMap还是LinkedHashMap，于是：\"},\"485\":{\"t\":\"public Map<String, String> getMap(String param) { Map<String, String> map = null; if (param.equals(\\\"HashMap\\\")) { map = new HashMap<>(); } else if (param.equals(\\\"LinkedHashMap\\\")) { map = new LinkedHashMap<>(); } return map; } \"},\"486\":{\"t\":\"大功告成，这么难的逻辑都被你实现了，然后你得用TreeMap，你又要改代码。\"},\"487\":{\"t\":\"有没有一种办法可以让你不修改代码呢，这时候反射就派上用场了。\"},\"488\":{\"t\":\"概念：反射是Java的一种机制，让我们可以在运行时获取类的信息\"},\"489\":{\"t\":\"作用：通过反射，我们可以在程序运行时动态创建对象，还能获取到类的所有信息，比如它的属性、构造器、方法、注解等；\"},\"490\":{\"t\":\"直接举例吧：\"},\"491\":{\"t\":\"public Map<String, String> getMap(String className) { Class clazz = Class.forName(className); Constructor constructor = clazz.getConstructor(); return (Map<String, String>) constructor.newInstance(); } \"},\"492\":{\"t\":\"这时候不管你需要什么Map，只要实现了Map接口，你都能通过getMap获得，只需要传入对应Map的全限定名，例如java.util.HashMap / java.util.LinkedHashMap。\"},\"493\":{\"t\":\"java中反射的用法非常非常多，常见的有以下这几个：\"},\"494\":{\"t\":\"一、在运行时获取一个类的 Class 对象 二、在运行时构造一个类的实例化对象 三、在运行时获取一个类的所有信息：变量、方法、构造器、注解 \"},\"495\":{\"h\":\"1.2.2获取class对象\",\"a\":\"_1-2-2获取class对象\"},\"496\":{\"t\":\"三种方法 1、类名.class：这种获取方式只有在编译前已经声明了该类的类型才能获取到 Class 对象\"},\"497\":{\"t\":\"Class<HashMap> hashMap= HashMap.class; \"},\"498\":{\"t\":\"2、实例.getClass()：通过实例化对象获取该实例的 Class 对象\"},\"499\":{\"t\":\"Map<String, String> hashMap = new HashMap<>(); Class<? extends Map> hashMapClass = hashMap.getClass(); \"},\"500\":{\"t\":\"3、Class.forName(“类的全限定名”)：通过类的全限定名获取该类的 Class 对象\"},\"501\":{\"t\":\"Class<?> hashMap= Class.forName(\\\"java.util.HashMap\\\"); \"},\"502\":{\"t\":\"拿到 Class对象就可以对它为所欲为了：调用它的方法、获取属性、获取类信息，总之它在你面前就没有隐私了，好羞羞，嘤~。\"},\"503\":{\"h\":\"1.2.3构造类的实例化对象\",\"a\":\"_1-2-3构造类的实例化对象\"},\"504\":{\"t\":\"通过反射构造一个类的实例方式有2种： 1、Class 对象调用newInstance()方法\"},\"505\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); HashMap hashMapInstance = (HashMap) hashMapClass.newInstance(); \"},\"506\":{\"t\":\"注意：即使 HashMap已经显式定义了构造方法，通过 newInstance() 创建的实例中，所有属性值都是对应类型的初始值，因为 newInstance() 构造实例会调用默认无参构造器。\"},\"507\":{\"t\":\"2、Constructor 构造器调用newInstance()方法\"},\"508\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); Constructor<?> constructor = hashMapClass.getConstructor(); constructor.setAccessible(true); HashMap newInstance = (HashMap) constructor.newInstance(); \"},\"509\":{\"t\":\"通过 getConstructor(Object… paramTypes) 方法指定获取指定参数类型的 Constructor， Constructor 调用 newInstance(Object… paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。\"},\"510\":{\"t\":\"通过Class对象调用 newInstance() 会走默认无参构造方法，如果想通过显式构造方法构造实例，需要提前从Class中调用getConstructor()方法获取对应的构造器，通过构造器去实例化对象。\"},\"511\":{\"h\":\"1.2.4获取类的所有信息\",\"a\":\"_1-2-4获取类的所有信息\"},\"512\":{\"t\":\"1、获取类中的变量（Field）\"},\"513\":{\"t\":\"Field[] getFields()：获取类中所有被public修饰的所有变量 Field getField(Stringname)：根据变量名获取类中的一个变量，该变量必须被public修饰 Field[] getDeclaredFields()：获取类中所有的变量，但无法获取继承下来的变量 Field getDeclaredField(String name)：根据姓名获取类中的某个变量，无法获取继承下来的变量 \"},\"514\":{\"t\":\"2、获取类中的方法（Method）\"},\"515\":{\"t\":\"Method[] getMethods()：获取类中被public修饰的所有方法 Method getMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，该方法必须被public修饰 Method[] getDeclaredMethods()：获取所有方法，但无法获取继承下来的方法 Method getDeclaredMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，无法获取继承下来的方法 \"},\"516\":{\"t\":\"3、获取类的构造器（Constructor）\"},\"517\":{\"t\":\"Constuctor[] getConstructors()：获取类中所有被public修饰的构造器 Constructor getConstructor(Class…<?> paramTypes)：根据参数类型获取类中某个构造器，该构造器必须被public修饰 Constructor[] getDeclaredConstructors()：获取类中所有构造器 Constructor getDeclaredConstructor(class…<?> paramTypes)：根据参数类型获取对应的构造器 \"},\"518\":{\"t\":\"反射的应用场景\"},\"519\":{\"t\":\"1、Spring 实例化对象：当程序启动时，Spring 会读取配置文件applicationContext.xml并解析出里面所有的标签实例化到IOC容器中。 2、反射 + 工厂模式：通过反射消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，反射可以使得程序更加健壮。 3、JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的驱动类时用到反射加载驱动类 \"},\"520\":{\"t\":\"参考：https://blog.csdn.net/qq_33709582/article/details/113550163\"},\"521\":{\"h\":\"七、数据结构\"},\"522\":{\"h\":\"数组\",\"a\":\"数组\"},\"523\":{\"t\":\"同https://www.youngxy.top/page/Java-SE/二、List.html\"},\"524\":{\"h\":\"链表\",\"a\":\"链表\"},\"525\":{\"t\":\"同https://www.youngxy.top/page/Java-SE/二、List.html\"},\"526\":{\"h\":\"栈\",\"a\":\"栈\"},\"527\":{\"t\":\"同https://www.youngxy.top/page/Java-SE/二、List.html\"},\"528\":{\"h\":\"Java官方推荐的实现方式：Deque\",\"a\":\"java官方推荐的实现方式-deque\"},\"529\":{\"t\":\"今日在刷LeetCode hot100的时候，看到K神题解下的一个评论：\"},\"530\":{\"t\":\"所以，我一个小白当然是去百度一下这个Deque为啥Java官方要推荐作为Stack的实现呢？\"},\"531\":{\"t\":\"话不多说，直接上菜！\"},\"532\":{\"h\":\"Q1：在 Java 语言中，不推荐使用 Stack 类？\",\"a\":\"q1-在-java-语言中-不推荐使用-stack-类\"},\"533\":{\"t\":\"是的。实际上，这个不推荐不是某个技术专家或者某个企业的规范标准，而是来自 Java 官方。\"},\"534\":{\"t\":\"如果大家在 Java 中查询 Stack 的文档，就会看到如下标为蓝色的说明：\"},\"535\":{\"t\":\"简单翻译：一个更加完整，一致的，后进先出的栈相关的操作，应该由 Deque 接口提供。并且，也推荐使用 Deque 这种数据结构（比如 ArrayDeque）来实现。\"},\"536\":{\"t\":\"因此，如果你想使用栈这种数据结构，Java 官方推荐的写法是这样的（假设容器中的类型是 Integer）：\"},\"537\":{\"t\":\"Deque<Integer> stack = new ArrayDeque<Integer>(); \"},\"538\":{\"h\":\"Q2：Java 中的 Stack 类到底怎么了？\",\"a\":\"q2-java-中的-stack-类到底怎么了\"},\"539\":{\"t\":\"Java 中的 Stack 类，最大的问题是，继承了 Vector 这个类。根据 Java 官方文档中的类关系，如下所示：\"},\"540\":{\"t\":\"Vector 是什么类？简单来说，Vector 就是一个动态数组。\"},\"541\":{\"t\":\"最大的问题在于，继承使得子类继承了父类的所有公有方法。\"},\"542\":{\"t\":\"而 Vector 作为动态数组，是有能力在数组中的任何位置添加或者删除元素的。因此，Stack 继承了 Vector，Stack 也有这样的能力！\"},\"543\":{\"t\":\"尝试如下的代码片段，在 Java 中是正确的：\"},\"544\":{\"t\":\"Stack<Integer> stack = new Stack<>(); stack.push(1); stack.push(2); stack.add(1, 666); \"},\"545\":{\"h\":\"Q3：问题出在哪里？\",\"a\":\"q3-问题出在哪里\"},\"546\":{\"t\":\"Java 中的 Stack 实现，是被业界一直认为非常糟糕的实现。实际上，它犯了面向对象设计领域的一个基本错误：Stack 和 Vector 之间的关系，不应该是继承关系，而应该是组合关系（composition）。\"},\"547\":{\"t\":\"关于继承关系和组合关系的区别，相信大家在 OOD 学习过程中，听过无数遍。\"},\"548\":{\"t\":\"继承关系描述的是 is-a 的关系，即“是一个”的关系。\"},\"549\":{\"t\":\"猫是一个动物，所以猫这个类可以继承动物类；\"},\"550\":{\"t\":\"程序员是一个雇员，所以程序员这个类可以继承雇员类。\"},\"551\":{\"t\":\"而组合关系描述的是 has-a 的关系，即“有一个”的关系。\"},\"552\":{\"t\":\"车里有一台发动机，所以发动机这个类和车这个类之间，应该是组合关系，即车中包含一个成员变量，是发动机这个类的对象；\"},\"553\":{\"t\":\"电脑里有 CPU，内存，显卡。所以 CPU，内存，显卡，这些类和电脑类之间的关系，都应该是组合关系。\"},\"554\":{\"t\":\"上面这些例子，都是我们在生活中看得到摸得到的实体，我们在做类设计的时候，通常不会犯糊涂。但遇到更抽象的对象的时候，事情可能就不一样了。\"},\"555\":{\"t\":\"比如，栈这种数据结构，和动态数组这种数据结构之间，到底应该是 is-a 的关系？还是 has-a 的关系？\"},\"556\":{\"t\":\"使用自然语言描述，听起来似乎说：栈是一个动态数组，毛病不大。但其实仔细思考，就会发现，栈不是一个动态数组！\"},\"557\":{\"t\":\"因此，很多时候，对于现实中并不存在的设计对象，人类很可能想不清楚 is-a 和 has-a 的关系。在这里，我再提供一个简单的原则：判断一下，如果设计成继承关系的话，我们是否有可能把子类进行向上的父类转型？如果可能，则应该设计成继承关系，否则应该是组合关系。\"},\"558\":{\"t\":\"换句话说，在这个例子中，我们是否可能将栈当做一个动态数组使用？答案是不可能。所以，栈和动态数组之间的关系不应该是继承关系。\"},\"559\":{\"t\":\"实际上，在真实的世界中，真正的继承关系是很少的。真正的继承关系中，父类大多是一个很抽象的概念，比如“人”，比如“动物”。但是我们设计的大多数类，不是这么抽象的概念。整体来说，组成关系更常用。\"},\"560\":{\"t\":\"这个概念不是我说的，而是业界公认的 OOP 设计原则。叫做：Composition over inheritance。如果用中文说，就是应该优先考虑组合关系。\"},\"561\":{\"t\":\"在 OOP 设计中，很多人会更倾向于使用继承关系，毕竟继承关系看起来更“面向对象”一些，也是面向对象讲解的重点。但是，在具体实践中，组合更常见！说得再绝对一些：多用组合，少用继承！\"},\"562\":{\"h\":\"Q4：Java 官方不知道这个 Stack 类的实现不好吗？为什么不改？\",\"a\":\"q4-java-官方不知道这个-stack-类的实现不好吗-为什么不改\"},\"563\":{\"t\":\"Java 官方当然知道这个实现不好。但是，因为要保持兼容性（backward compatibility），对于已经正式发布的代码，Java 官方不能做接口设计层面的修改。否则，使用老版本 Java 的程序，将在新的 Java 环境下无法执行，这是 Java 官方不愿意看到的。\"},\"564\":{\"t\":\"Java 官方可以做到的是，将这个类标志成“弃用”（deprecated），以让新版本的开发者不再允许使用这个类，但老版本的程序，还能继续执行。\"},\"565\":{\"t\":\"但是，这么多年了，Java 官方也并没有将 Stack 标为“弃用”，只是在文档上注明“不建议使用”。\"},\"566\":{\"h\":\"Q5：为什么使用接口？\",\"a\":\"q5-为什么使用接口\"},\"567\":{\"t\":\"下面，我们再来看一下 Java 官方推荐的写法：使用 Deque 接口：\"},\"568\":{\"t\":\"Deque<Integer> stack = new ArrayDeque<Integer>(); \"},\"569\":{\"t\":\"接口最大的意义之一，就是做了更高层次的抽象：只定义了一个类应该满足哪些方法，而对具体的实现方式不做限制。\"},\"570\":{\"t\":\"比如，我们都知道，在 Java 语言中，Queue 就是一个接口。我们想实现一个队列，可以这么写：\"},\"571\":{\"t\":\" Queue<Integer> q1 = new ArrayDeque<>(); Queue<Integer> q2 = new LinkedList<>(); \"},\"572\":{\"t\":\"在上述实现中，q1 和 q2 的底层具体实现不同，一个是 LinkedList，一个是 ArrayDeque。但是，从用户的角度看，q1 和 q2 是一致的：都是一个队列，只能执行队列规定的方法。\"},\"573\":{\"t\":\"这样做，将“队列”这样一个概念，和底层数据结构的具体实现——LinkedList 或者 ArrayDeque 解耦了：\"},\"574\":{\"t\":\"底层开发人员可以随意维护自己的 LinkedList 类或者 ArrayDeque 类，只要他们满足 Queue 接口规定的规范；\"},\"575\":{\"t\":\"开发者可以选择合适的数据结构来定义 Queue；\"},\"576\":{\"t\":\"而 Queue 的更上层使用者，无需知道 q1 或者 q2 的实现细节，从他们的角度看，只要能调用 Queue 的相关方法：peek, poll, offer 等等，来满足上层的业务需求，就好了。\"},\"577\":{\"t\":\"而且这样做，完美解决了之前说的，继承关系把父类的所有方法都拿过来的问题。接口的设计相当于做了访问限制。LinkedList 中有很多方法，但是，当我们使用 LinkedList 实现 Queue 接口的时候，用户只能调用 Queue 中定义的方法。\"},\"578\":{\"t\":\"从这个角度，我们也能看出 Stack 设计的另一个不合理之处：Stack 和 Queue 同样作为一种特殊的线性数据结构，都应该只是规定一系列操作的接口而已，具体的底层实现，由开发者再做选择。\"},\"579\":{\"t\":\"但因为 Stack 做成了一个类，继承了 Vector，也就只能基于 Vector 这一种固定的数据结构了。\"},\"580\":{\"t\":\"为了修正这个问题，Java 官方推出了 Deque 接口，作为实现栈的接口。\"},\"581\":{\"h\":\"Q6：什么是 Deque 接口？\",\"a\":\"q6-什么是-deque-接口\"},\"582\":{\"t\":\"Deque 是双端队列的意思。所谓的双端队列，就是能在线性数据结构的两段，进行插入和删除操作。\"},\"583\":{\"t\":\"大家可以想象，由于 Stack 的定义是在同一端进，同一端出。所以，如果 Deque 可以满足在两段进行插入和删除，自然也能在同一端进行插入和删除，也就是可以以此为基础，做成一个 Stack。\"},\"584\":{\"h\":\"Q7：等等！这里有问题！\",\"a\":\"q7-等等-这里有问题\"},\"585\":{\"t\":\"很多同学应该能马上反应过来了。这里有问题！\"},\"586\":{\"t\":\"因为我们根据 Java 官方推荐的方法声明的这个 Stack，虽然变量名称是Stack，但它实际上是一个 Deque。这就意味着，这个Stack，可以在两段做插入和删除操作！但是，真正的栈，只能在同一端做插入和删除操作！\"},\"587\":{\"t\":\"这难道不是重蹈了 Stack 这个类的覆辙？毕竟，我们最开始分析，就说 Stack 这个类的一大问题，是继承了 Vector 这个类的若干我们不需要的方法，破坏了封装性，比如在任何一个位置插入一个元素。现在这个基于 Deque 接口的Stack，依然有我们不需要的方法啊！\"},\"588\":{\"t\":\"没错！这就是 Java 的历史遗留问题了。这个问题至此已经无解了。因为 Stack 这个关键字被占据了。Java 官方不想推出一个叫做 RealStack 或者 CorrectStack 一类的接口名称。所以，按照 Java 官方的推荐所建立的这个Stack，依然不完美。\"},\"589\":{\"t\":\"但至今为止，Java 暂时只是做到这个份儿上。\"},\"590\":{\"t\":\"或许，Oracle 少打一些官司，多研究一下如何处理这些历史遗留问题，Java 能更好吧。\"},\"591\":{\"t\":\"所以，在实际的工程应用上，有人也并不建议使用 Deque 做为 Stack 的实现，而是自己再做一层封装。\"},\"592\":{\"t\":\"比如，大家可以看一下这篇探讨 Stack 和 Deque 的文章：http://baddotrobot.com/blog/2013/01/10/stack-vs-deque/。\"},\"593\":{\"h\":\"Q8：链表呢？\",\"a\":\"q8-链表呢\"},\"594\":{\"t\":\"再说一个小问题。\"},\"595\":{\"t\":\"大家可以看到，Java 官方推荐的创建栈的方式，使用了 Deque 接口。并且，在底层实现上，使用了 ArrayDeque，也就是基于动态数组的实现。为什么？\"},\"596\":{\"t\":\"大家应该都知道，动态数组是可以进行扩容操作的。在触发扩容的时候，时间复杂度是 O(n) 的，但整体平均时间复杂度（Amortized Time）是 O(1)。\"},\"597\":{\"t\":\"但是，基于链表的实现，不会牵扯到扩容问题，因此，每一次添加操作，从时间复杂度的角度，都是 O(1) 的。\"},\"598\":{\"t\":\"虽然如此，可是实际上，当数据量达到一定程度的时候，链表的性能是远远低于动态数组的。\"},\"599\":{\"t\":\"这是因为，对于链表来说，每添加一个元素，都需要重新创建一个 Node 类的对象，也就是都需要进行一次 new 的内存操作。而对内存的操作，是非常慢的。\"},\"600\":{\"t\":\"举个例子，对于队列，测试它们的性能。代码如下：\"},\"601\":{\"t\":\" Queue<Integer> q1 = new ArrayDeque<>(); Queue<Integer> q2 = new LinkedList<>(); int N = 10000000; long start1 = System.currentTimeMillis(); for (int i = 0; i < N; i++) { q1.offer(1); } long end1 = System.currentTimeMillis(); long start2 = System.currentTimeMillis(); for (int i = 0; i < N; i++) { q2.offer(i); } long end2 = System.currentTimeMillis(); System.out.println(end1 - start1 + \\\"ms\\\"); System.out.println(end2 - start2 + \\\"ms\\\"); \"},\"602\":{\"t\":\"最终的结果：\"},\"603\":{\"t\":\"76ms 4163ms \"},\"604\":{\"t\":\"也就是使用 LinkedList，会比使用 ArrayDeque 慢 5 倍以上！\"},\"605\":{\"t\":\"因此，甚至有人建议：在实践中，尤其是面对大规模数据的时候，不应该使用链表！\"},\"606\":{\"t\":\"最后，关于在面试中，如果有同学需要使用“栈”这种数据结构，选择 Stack 这个类，面试官会怎么看？我参考了网上的其博主的文章写的@lk 同学的看法：\"},\"607\":{\"t\":\"参考：https://blog.csdn.net/Dlgdlgd/article/details/125768706\"},\"608\":{\"h\":\"队列\",\"a\":\"队列\"},\"609\":{\"t\":\"同https://www.youngxy.top/page/Java-SE/二、List.html\"},\"610\":{\"h\":\"二叉树\",\"a\":\"二叉树\"},\"611\":{\"h\":\"1.树的定义\",\"a\":\"_1-树的定义\"},\"612\":{\"t\":\"定义：树(Tree)是n(n>=0)个结点的有限集T，T为空时称为空树，否则它满足如下两个条件：\"},\"613\":{\"t\":\"(1)有且仅有一个特定的称为根(Root)的结点；\"},\"614\":{\"t\":\"(2)其余的结点可分为m(m>=0)个互不相交的子集T1,T2,T3…Tm，其中每个子集又是一棵树，并称其为子树(Subtree)。\"},\"615\":{\"t\":\"要求子树都非空，使子树的个数（和树的结构）能有明确定义：\"},\"616\":{\"t\":\"结点个数为0 的树称为空树\"},\"617\":{\"t\":\"一棵树可以只有根但没有子树（m = 0），这是一棵单结点的树， 只包含一个根结点\"},\"618\":{\"t\":\"树是一种层次性结构：\"},\"619\":{\"t\":\"子树的根看作是树根的下一层元素\"},\"620\":{\"t\":\"一棵树里的元素可以根据这种关系分为一层层的元素\"},\"621\":{\"t\":\"一棵树（除树根外）可能有多棵子树，根据是否认为子树的排列顺序有意义，可以把树分为有序树和无序树两种概念。例如，普通的树一般是无序的，二叉搜索树BST是有序的。\"},\"622\":{\"h\":\"2.树的基本术语\",\"a\":\"_2-树的基本术语\"},\"623\":{\"t\":\"父结点和子结点（是相对定义的）：\"},\"624\":{\"t\":\"一棵树的根结点称为该树的子树的根结点的父结点\"},\"625\":{\"t\":\"子树的根是树根的子结点\"},\"626\":{\"t\":\"边：从父结点到子结点的连线（注意，边有方向）\"},\"627\":{\"t\":\"兄弟结点：父结点相同的结点互为兄弟结点\"},\"628\":{\"t\":\"树叶、分支结点：没有子结点的结点称为树叶，树中的其余结点称为分支结点（注意：分支结点可以只有一个分支）\"},\"629\":{\"t\":\"祖先和子孙：基于父结点/子结点关系和传递性，可以确定相应的传递 关系，称为祖先关系或子孙关系。由这两个关系决定了一个结点的祖先结点，或子孙结点\"},\"630\":{\"t\":\"度数：一个结点的子结点个数称为该结点的度数，显然树叶的度数为0 一棵树的度数就是它里面度数最大的结点的度数\"},\"631\":{\"t\":\"路径，路径长度：\"},\"632\":{\"t\":\"从一个祖先结点到其子孙结点的一系列边称为树中一条路径。显然，从一棵树的根到树中任一个结点都有路径，且路径唯一\"},\"633\":{\"t\":\"路径中边的条数称为路径长度，认为每个结点到自身有长0 的路径\"},\"634\":{\"t\":\"结点的层数：\"},\"635\":{\"t\":\"树根到结点的路径长度是该结点的层数\"},\"636\":{\"t\":\"结点都有层数，根所在的层为0\"},\"637\":{\"t\":\"高度（或深度）：\"},\"638\":{\"t\":\"树的高度或深度是树中结点的最大层数（最长路径的长度）加1\"},\"639\":{\"t\":\"是树的整体性质，空树高度为0，只有根结点的树高度为1\"},\"640\":{\"h\":\"3.二叉树的定义\",\"a\":\"_3-二叉树的定义\"},\"641\":{\"t\":\"在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”和“右子树”。\"},\"642\":{\"t\":\"二叉树\"},\"643\":{\"h\":\"4.二叉树的性质\",\"a\":\"_4-二叉树的性质\"},\"644\":{\"t\":\"性质1： 在二叉树的第i层上至多有2i-1个结点(i>=1)。\"},\"645\":{\"t\":\"性质2：深度为k的二叉树至多有2k－1个结点（k>=1)。\"},\"646\":{\"t\":\"性质3： 对任何一棵二叉树，如果其终端结点数为n0，度为2的结点数为n2，则n0＝n2＋1。\"},\"647\":{\"t\":\"性质4：具有n个结点的完全二叉树的深度为[log2n]＋1。\"},\"648\":{\"t\":\"性质5： 如果对一棵有n个结点的完全二叉树的结点按层序编号（从第1层到第【log2n】+1层，每层从左到右),则对任一结点i（1<=i<=n),有：\"},\"649\":{\"t\":\"（1）如果i＝1，则结点i无双亲，是二叉树的根；如果i>1，则其双亲是结点【i/2】。\"},\"650\":{\"t\":\"（2）如果2i>n，则结点i为叶子结点，无左孩子；否则，其左孩子是结点2i。\"},\"651\":{\"t\":\"（3）如果2i＋1>n，则结点i无右孩子；否则，其右孩子是结点2i＋1。\"},\"652\":{\"h\":\"5.二叉树计算\",\"a\":\"_5-二叉树计算\"},\"653\":{\"t\":\"方法：https://blog.csdn.net/yang13563758128/article/details/85109687?spm=1001.2014.3001.5502\"},\"654\":{\"h\":\"红黑树\",\"a\":\"红黑树\"},\"655\":{\"h\":\"1.简介\",\"a\":\"_1-简介\"},\"656\":{\"t\":\"红黑树是一种自平衡的二叉查找树，是一种高效的查找树。红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作。\"},\"657\":{\"h\":\"2.为什么需要红黑树？\",\"a\":\"_2-为什么需要红黑树\"},\"658\":{\"t\":\"对于二叉搜索树，如果插入的数据是随机的，那么它就是接近平衡的二叉树，平衡的二叉树，它的操作效率（查询，插入，删除）效率较高，时间复杂度是O（logN）。但是可能会出现一种极端的情况，那就是插入的数据是有序的（递增或者递减），那么所有的节点都会在根节点的右侧或左侧，此时，二叉搜索树就变为了一个链表，它的操作效率就降低了，时间复杂度为O(N)，所以可以认为二叉搜索树的时间复杂度介于O（logN）和O(N)之间，视情况而定。那么为了应对这种极端情况，红黑树就出现了，它是具备了某些特性的二叉搜索树，能解决非平衡树问题，红黑树是一种接近平衡的二叉树（说它是接近平衡因为它并没有像AVL树的平衡因子的概念，它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构，进而提升整体的性能，并没有严格的卡定某个平衡因子来维持绝对平衡）。\"},\"659\":{\"h\":\"3.红黑树的特性\",\"a\":\"_3-红黑树的特性\"},\"660\":{\"t\":\"首先，红黑树是一个二叉搜索树，它在每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK；通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡（最短路径就是全黑节点，最长路径就是一个红节点一个黑节点，当从根节点到叶子节点的路径上黑色节点相同时，最长路径刚好是最短路径的两倍）。它同时满足以下特性：\"},\"661\":{\"t\":\"节点是红色或黑色\"},\"662\":{\"t\":\"根是黑色\"},\"663\":{\"t\":\"叶子节点（外部节点，空节点）都是**黑色，**这里的叶子节点指的是最底层的空节点（外部节点），下图中的那些null节点才是叶子节点，null节点的父节点在红黑树里不将其看作叶子节点\"},\"664\":{\"t\":\"红色节点的子节点都是黑色；\"},\"665\":{\"t\":\"红色节点的父节点都是黑色；\"},\"666\":{\"t\":\"从根节点到叶子节点的所有路径上不能有 2 个连续的红色节点\"},\"667\":{\"t\":\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\"},\"668\":{\"h\":\"4.红黑树的效率\",\"a\":\"_4-红黑树的效率\"},\"669\":{\"t\":\"红黑树的查找，插入和删除操作，时间复杂度都是O(logN)。\"},\"670\":{\"t\":\"查找操作时，它和普通的相对平衡的二叉搜索树的效率相同，都是通过相同的方式来查找的，没有用到红黑树特有的特性。\"},\"671\":{\"t\":\"但如果插入的时候是有序数据，那么红黑树的查询效率就比二叉搜索树要高了，因为此时二叉搜索树不是平衡树，它的时间复杂度O(N)。\"},\"672\":{\"t\":\"插入和删除操作时，由于红黑树的每次操作平均要旋转一次和变换颜色，所以它比普通的二叉搜索树效率要低一点，不过时间复杂度仍然是O(logN)。总之，红黑树的优点就是对有序数据的查询操作不会慢到O(N)的时间复杂度。\"},\"673\":{\"t\":\"红黑树和AVL树的比较：\"},\"674\":{\"t\":\"AVL树的时间复杂度虽然优于红黑树，但是对于现在的计算机，cpu太快，可以忽略性能差异\"},\"675\":{\"t\":\"红黑树的插入删除比AVL树更便于控制操作\"},\"676\":{\"t\":\"红黑树整体性能略优于AVL树（红黑树旋转情况少于AVL树）\"},\"677\":{\"h\":\"哈希表结构\",\"a\":\"哈希表结构\"},\"678\":{\"t\":\"同https://www.youngxy.top/page/Java-SE/四、Map.html\"},\"679\":{\"h\":\"三、Set\"},\"680\":{\"h\":\"1.HashSet\",\"a\":\"_1-hashset\"},\"681\":{\"t\":\"HashSet实现了Set接口，内部实现利用了HashMap，有如下特点：\"},\"682\":{\"t\":\"1）没有重复元素； 2）可以高效地添加、删除元素、判断元素是否存在，效率都为O(1)； 3）没有顺序。 \"},\"683\":{\"t\":\"HashSet可以方便高效地实现去重、集合运算等功能。如果要保持添加的顺序，可以使用HashSet的一个子类LinkedHashSet。Set还有一个重要的实现类TreeSet，它可以排序。\"},\"684\":{\"h\":\"2.TreeSet\",\"a\":\"_2-treeset\"},\"685\":{\"t\":\"TreeSet实现了Set接口，但有序。在内部实现上，它基于TreeMap实现，而TreeMap基于大致平衡的排序二叉树：红黑树，这决定了它有如下特点。\"},\"686\":{\"t\":\"1）没有重复元素。 2）添加、删除元素、判断元素是否存在，效率比较高，为O(log2(N)), N为元素个数。 3）有序，TreeSet同样实现了SortedSet和NavigatableSet接口，可以方便地根据顺序进行查找和操作，如第一个、最后一个、某一取值范围、某一值的邻近元素等。 4）为了有序，TreeSet要求元素实现Comparable接口或通过构造方法提供一个Com-parator对象。 \"},\"687\":{\"h\":\"3.LinkedHashSet\",\"a\":\"_3-linkedhashset\"},\"688\":{\"t\":\"之前介绍的Map接口的实现类都有一个对应的Set接口的实现类，比如HashMap有HashSet,TreeMap有TreeSet, LinkedHashMap也不例外，它也有一个对应的Set接口的实现类LinkedHashSet。LinkedHashSet是HashSet的子类，它内部的Map的实现类是LinkedHashMap，所以它也可以保持插入顺序。\"},\"689\":{\"h\":\"4.Set和List区别？\",\"a\":\"_4-set和list区别\"},\"690\":{\"t\":\"List,Set都是继承自Collection接口。都是用来存储一组相同类型的元素的。\"},\"691\":{\"t\":\"List特点：元素有放入顺序，元素可重复 。\"},\"692\":{\"t\":\"有顺序，即先放入的元素排在前面。\"},\"693\":{\"t\":\"Set特点：元素无放入顺序，元素不可重复。\"},\"694\":{\"t\":\"无顺序，即先放入的元素不一定排在前面。 不可重复，即相同元素在set中只会保留一份。所以，有些场景下，set可以用来去重。 不过需要注意的是，set在元素插入时是要有一定的方法来判断元素是否重复的。这个方法很重要，决定了set中可以保存哪些元素。\"},\"695\":{\"h\":\"5.Set如何保证元素不重复?\",\"a\":\"_5-set如何保证元素不重复\"},\"696\":{\"t\":\"在Java的Set体系中，根据实现方式不同主要分为两大类。HashSet和TreeSet。\"},\"697\":{\"t\":\"1、TreeSet 是二叉树实现的，TreeSet中的数据是自动排好序的，不允许放入 null值\"},\"698\":{\"t\":\"2、HashSet 是哈希表实现的，HashSet中的数据是无序的，可以放入 null值，但只能放入一个null，两者中的值都不能重复，就如数据库中的唯一约束\"},\"699\":{\"t\":\"在HashSet中，基本的操作都是由HashMap底层实现的，因为HashSet底层是用HashMap存储数据的。当向HashSet中添加元素的时候，首先计算元素的hashCode值，然后通过扰动计算和按位与的方式计算出这个元素的存储位置，如果这个位置为空，就将元素添加进去；如果不为空，则用equals方法比较元素是否相等，相等就不添加，否则找一个空位添加。\"},\"700\":{\"t\":\"TreeSet的底层是TreeMap的keySet()，而TreeMap是基于红黑树实现的，红黑树是一种平衡二叉查找树，它能保证任何一个节点的左右子树的高度差不会超过较矮的那棵的一倍。\"},\"701\":{\"t\":\"TreeMap是按key排序的，元素在插入TreeSet时compareTo()方法要被调用，所以TreeSet中的元素要实现Comparable接口。TreeSet作为一种Set，它不允许出现重复元素。TreeSet是用compareTo()来判断重复元素的。\"},\"702\":{\"h\":\"二、List\"},\"703\":{\"t\":\"相关信息\"},\"704\":{\"t\":\"Collection 是一个集合接口。 它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。是list，set等的父接口。\"},\"705\":{\"t\":\"相关信息\"},\"706\":{\"t\":\"Collections 是一个包装类。 它包含有各种有关集合操作的静态多态方法。此类不能实例化，就像一个工具类，服务于Java的Collection框架。\"},\"707\":{\"h\":\"1.ArrayList\",\"a\":\"_1-arraylist\"},\"708\":{\"t\":\"对于ArrayList，它的特点是内部采用动态数组实现，这决定了以下几点。\"},\"709\":{\"t\":\"可以随机访问，按照索引位置进行访问效率很高，用算法描述中的术语，效率是O(1)，简单说就是可以一步到位。\"},\"710\":{\"t\":\"除非数组已排序，否则按照内容查找元素效率比较低，具体是O(N), N为数组内容长度，也就是说，性能与数组长度成正比。\"},\"711\":{\"t\":\"添加元素的效率还可以，重新分配和复制数组的开销被平摊了，具体来说，添加N个元素的效率为O(N)。\"},\"712\":{\"t\":\"插入和删除元素的效率比较低，因为需要移动元素，具体为O(N)。\"},\"713\":{\"h\":\"2.LinkedList\",\"a\":\"_2-linkedlist\"},\"714\":{\"t\":\"用法上，LinkedList是一个List，但也实现了Deque接口，可以作为队列、栈和双端队列使用。实现原理上，LinkedList内部是一个双向链表，并维护了长度、头节点和尾节点，这决定了它有如下特点。\"},\"715\":{\"t\":\"按需分配空间，不需要预先分配很多空间。\"},\"716\":{\"t\":\"不可以随机访问，按照索引位置访问效率比较低，必须从头或尾顺着链接找，效率为O(N/2)。\"},\"717\":{\"t\":\"不管列表是否已排序，只要是按照内容查找元素，效率都比较低，必须逐个比较，效率为O(N)。\"},\"718\":{\"t\":\"在两端添加、删除元素的效率很高，为O(1)。\"},\"719\":{\"t\":\"在中间插入、删除元素，要先定位，效率比较低，为O(N)，但修改本身的效率很高，效率为O(1)。\"},\"720\":{\"t\":\"理解了LinkedList和ArrayList的特点，就能比较容易地进行选择了：\"},\"721\":{\"t\":\"如果列表长度未知，添加、删除操作比较多，尤其经常从两端进行操作，而按照索引位置访问相对比较少，则LinkedList是比较理想的选择。\"},\"722\":{\"h\":\"3.ArrayDeque\",\"a\":\"_3-arraydeque\"},\"723\":{\"t\":\"ArrayDeque实现了双端队列，内部使用循环数组实现，这决定了它有如下特点。\"},\"724\":{\"t\":\"在两端添加、删除元素的效率很高，动态扩展需要的内存分配以及数组复制开销可以被平摊，具体来说，添加N个元素的效率为O(N)。\"},\"725\":{\"t\":\"根据元素内容查找和删除的效率比较低，为O(N)。\"},\"726\":{\"t\":\"与ArrayList和LinkedList不同，没有索引位置的概念，不能根据索引位置进行操作。\"},\"727\":{\"t\":\"ArrayDeque和LinkedList都实现了Deque接口，应该用哪一个呢？（详见：https://www.youngxy.top/page/Java-SE/3.数据结构.html#java官方推荐的实现方式-deque）\"},\"728\":{\"t\":\"如果只需要Deque接口，从两端进行操作，一般而言，ArrayDeque效率更高一些，应该被优先使用；如果同时需要根据索引位置进行操作，或者经常需要在中间进行插入和删除，则应该选LinkedList。\"},\"729\":{\"h\":\"4.PriorityQueue\",\"a\":\"_4-priorityqueue\"},\"730\":{\"t\":\"PriorityQueue实现了队列接口Queue，但按优先级出队，内部是用堆实现的，有如下特点：\"},\"731\":{\"t\":\"实现了优先级队列，最先出队的总是优先级最高的，即排序中的第一个。\"},\"732\":{\"t\":\"优先级可以有相同的，内部元素不是完全有序的，如果遍历输出，除了第一个，其他没有特定顺序。\"},\"733\":{\"t\":\"查看头部元素的效率很高，为O(1)，入队、出队效率比较高，为O(log2(N))，构建堆heapify的效率为O(N)。\"},\"734\":{\"t\":\"根据值查找和删除元素的效率比较低，为O(N)。\"},\"735\":{\"h\":\"五、List常见面试题\"},\"736\":{\"h\":\"1.ArrayList和LinkedList和Vector的区别\",\"a\":\"_1-arraylist和linkedlist和vector的区别\"},\"737\":{\"t\":\"List主要有ArrayList、LinkedList与Vector几种实现。\"},\"738\":{\"t\":\"这三者都实现了List 接口，使用方式也很相似,主要区别在于因为实现方式的不同,所以对不同的操作具有不同的效率。\"},\"739\":{\"t\":\"ArrayList 是一个可改变大小的数组.当更多的元素加入到ArrayList中时,其大小将会动态地增长.内部的元素可以直接通过get与set方法进行访问,因为ArrayList本质上就是一个数组。\"},\"740\":{\"t\":\"LinkedList 是一个双链表,在添加和删除元素时具有比ArrayList更好的性能.但在get与set方面弱于ArrayList。\"},\"741\":{\"t\":\"当然,这些对比都是指数据量很大或者操作很频繁的情况下的对比,如果数据和运算量很小,那么对比将失去意义。\"},\"742\":{\"t\":\"Vector 和ArrayList类似,但属于强同步类。如果你的程序本身是线程安全的(thread-safe,没有在多个线程之间共享同一个集合/对象),那么使用ArrayList是更好的选择。\"},\"743\":{\"t\":\"Vector和ArrayList在更多元素添加进来时会请求更大的空间。Vector每次请求其大小的双倍空间，而ArrayList每次对size增长50%。\"},\"744\":{\"t\":\"而 LinkedList 还实现了 Queue 接口,该接口比List提供了更多的方法,包括 offer(),peek(),poll()等。\"},\"745\":{\"t\":\"注意: 默认情况下ArrayList的初始容量非常小,所以如果可以预估数据量的话,分配一个较大的初始值属于最佳实践,这样可以减少调整大小的开销。\"},\"746\":{\"h\":\"2.ArrayList使用了transient关键字进行存储优化，而Vector没有，为什么？\",\"a\":\"_2-arraylist使用了transient关键字进行存储优化-而vector没有-为什么\"},\"747\":{\"t\":\"话不多说，上源码：\"},\"748\":{\"t\":\"ArrayList：\"},\"749\":{\"t\":\"/** * Save the state of the <tt>ArrayList</tt> instance to a stream (that * is, serialize it). * * @serialData The length of the array backing the <tt>ArrayList</tt> * instance is emitted (int), followed by all of its elements * (each an <tt>Object</tt>) in the proper order. */ private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException{ // Write out element count, and any hidden stuff int expectedModCount = modCount; s.defaultWriteObject(); // Write out array length s.writeInt(elementData.length); // Write out all elements in the proper order. for (int i=0; i<size; i++) s.writeObject(elementData[i]); if (modCount != expectedModCount) { throw new ConcurrentModificationException(); } } \"},\"750\":{\"t\":\"ArrayList实现了writeObject方法，可以看到只保存了非null的数组位置上的数据。即list的size个数的elementData。需要额外注意的一点是，ArrayList的实现，提供了fast-fail机制，可以提供弱一致性。\"},\"751\":{\"t\":\"Vector：\"},\"752\":{\"t\":\"/** * Save the state of the {@code Vector} instance to a stream (that * is, serialize it). * This method performs synchronization to ensure the consistency * of the serialized data. */ private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException { final java.io.ObjectOutputStream.PutField fields = s.putFields(); final Object[] data; synchronized (this) { fields.put(\\\"capacityIncrement\\\", capacityIncrement); fields.put(\\\"elementCount\\\", elementCount); data = elementData.clone(); } fields.put(\\\"elementData\\\", data); s.writeFields(); } \"},\"753\":{\"t\":\"Vector也实现了writeObject方法，但方法并没有像ArrayList一样进行优化存储，实现语句是\"},\"754\":{\"t\":\"data = elementData.clone(); \"},\"755\":{\"t\":\"clone()的时候会把null值也拷贝。所以保存相同内容的Vector与ArrayList，Vector的占用的字节比ArrayList要多。\"},\"756\":{\"t\":\"可以测试一下，序列化存储相同内容的Vector与ArrayList，分别到一个文本文件中去。 Vector需要243字节， ArrayList需要135字节。\"},\"757\":{\"t\":\"分析：\"},\"758\":{\"t\":\"ArrayList是非同步实现的一个单线程下较为高效的数据结构（相比Vector来说）。 ArrayList只通过一个修改记录字段提供弱一致性，主要用在迭代器里。没有同步方法。 即上面提到的Fast-fail机制.ArrayList的存储结构定义为transient，重写writeObject来实现自定义的序列化，优化了存储。\"},\"759\":{\"t\":\"Vector是多线程环境下更为可靠的数据结构，所有方法都实现了同步。\"},\"760\":{\"t\":\"区别：\"},\"761\":{\"t\":\"相关信息\"},\"762\":{\"t\":\"同步处理：Vector同步，ArrayList非同步 。\"},\"763\":{\"t\":\"Vector缺省情况下增长原来一倍的数组长度，ArrayList是0.5倍。ArrayList: int newCapacity = oldCapacity + (oldCapacity >> 1); ArrayList自动扩大容量为原来的1.5倍（实现的时候，方法会传入一个期望的最小容量，若扩容后容量仍然小于最小容量，那么容量就为传入的最小容量。扩容的时候使用的Arrays.copyOf方法最终调用native方法进行新数组创建和数据拷贝）。\"},\"764\":{\"t\":\"Vector: int newCapacity = oldCapacity + ((capacityIncrement > 0) ? capacityIncrement : oldCapacity);Vector指定了initialCapacity，capacityIncrement来初始化的时候，每次增长capacityIncrement。\"},\"765\":{\"h\":\"3.SynchronizedList和Vector的区别\",\"a\":\"_3-synchronizedlist和vector的区别\"},\"766\":{\"t\":\"Vector是java.util包中的一个类。 SynchronizedList是java.util.Collections中的一个静态内部类。\"},\"767\":{\"t\":\"在多线程的场景中可以直接使用Vector类，也可以使用Collections.synchronizedList(List list)方法来返回一个线程安全的List。\"},\"768\":{\"t\":\"那么，到底SynchronizedList和Vector有没有区别，为什么java api要提供这两种线程安全的List的实现方式呢？\"},\"769\":{\"t\":\"首先，我们知道Vector和Arraylist都是List的子类，他们底层的实现都是一样的。所以这里比较如下两个list1和list2的区别：\"},\"770\":{\"t\":\"List<String> list = new ArrayList<String>(); List list2 = Collections.synchronizedList(list); Vector<String> list1 = new Vector<String>(); \"},\"771\":{\"h\":\"3.1比较几个重要的方法。\",\"a\":\"_3-1比较几个重要的方法。\"},\"772\":{\"h\":\"3.1.1add方法：\",\"a\":\"_3-1-1add方法\"},\"773\":{\"t\":\"Vector的实现：\"},\"774\":{\"t\":\"public void add(int index, E element) { insertElementAt(element, index); } public synchronized void insertElementAt(E obj, int index) { modCount++; if (index > elementCount) { throw new ArrayIndexOutOfBoundsException(index + \\\" > \\\" + elementCount); } ensureCapacityHelper(elementCount + 1); System.arraycopy(elementData, index, elementData, index + 1, elementCount - index); elementData[index] = obj; elementCount++; } private void ensureCapacityHelper(int minCapacity) { // overflow-conscious code if (minCapacity - elementData.length > 0) grow(minCapacity); } \"},\"775\":{\"t\":\"synchronizedList的实现：\"},\"776\":{\"t\":\"public void add(int index, E element) { synchronized (mutex) { list.add(index, element); } } \"},\"777\":{\"t\":\"这里，使用同步代码块的方式调用ArrayList的add()方法。ArrayList的add方法内容如下：\"},\"778\":{\"t\":\"public void add(int index, E element) { rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; } private void rangeCheckForAdd(int index) { if (index > size || index < 0) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } private void ensureCapacityInternal(int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); } ensureExplicitCapacity(minCapacity); } \"},\"779\":{\"t\":\"从上面两段代码中发现有两处不同：\"},\"780\":{\"t\":\"1.Vector使用同步方法实现，synchronizedList使用同步代码块实现。\"},\"781\":{\"t\":\"2.两者的扩充数组容量方式不一样（两者的add方法在扩容方面的差别也就是ArrayList和Vector的差别。）\"},\"782\":{\"h\":\"3.1.2remove方法\",\"a\":\"_3-1-2remove方法\"},\"783\":{\"t\":\"synchronizedList的实现：\"},\"784\":{\"t\":\"public E remove(int index) { synchronized (mutex) {return list.remove(index);} } \"},\"785\":{\"t\":\"ArrayList类的remove方法内容如下：\"},\"786\":{\"t\":\"public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; } \"},\"787\":{\"t\":\"Vector的实现：\"},\"788\":{\"t\":\"public synchronized E remove(int index) { modCount++; if (index >= elementCount) throw new ArrayIndexOutOfBoundsException(index); E oldValue = elementData(index); int numMoved = elementCount - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--elementCount] = null; // Let gc do its work return oldValue; } \"},\"789\":{\"t\":\"从remove方法中我们发现除了一个使用同步方法，一个使用同步代码块之外几乎无任何区别。\"},\"790\":{\"t\":\"相关信息\"},\"791\":{\"t\":\"通过比较其他方法，我们发现，SynchronizedList里面实现的方法几乎都是使用同步代码块包上List的方法。如果该List是ArrayList那么，SynchronizedList和Vector的一个比较明显区别就是一个使用了同步代码块，一个使用了同步方法。\"},\"792\":{\"h\":\"3.2区别分析\",\"a\":\"_3-2区别分析\"},\"793\":{\"t\":\"数据增长区别\"},\"794\":{\"t\":\"相关信息\"},\"795\":{\"t\":\"从内部实现机制来讲ArrayList和Vector都是使用数组(Array)来控制集合中的对象。当你向这两种类型中增加元素的时候，如果元素的数目超出了内部数组目前的长度它们都需要扩展内部数组的长度，Vector缺省情况下自动增长原来一倍的数组长度，ArrayList是原来的50%,所以最后你获得的这个集合所占的空间总是比你实际需要的要大。所以如果你要在集合中保存大量的数据那么使用Vector有一些优势，因为你可以通过设置集合的初始化大小来避免不必要的资源开销。\"},\"796\":{\"t\":\"同步代码块和同步方法的区别\"},\"797\":{\"t\":\"相关信息\"},\"798\":{\"t\":\"同步代码块在锁定的范围上可能比同步方法要小，一般来说锁的范围大小和性能是成反比的。\"},\"799\":{\"t\":\"同步块可以更加精确的控制锁的作用域（锁的作用域就是从锁被获取到其被释放的时间），同步方法的锁的作用域就是整个方法。\"},\"800\":{\"t\":\"同步代码块可以选择对哪个对象加锁，但是静态方法只能给this对象加锁。\"},\"801\":{\"t\":\"因为SynchronizedList只是使用同步代码块包裹了ArrayList的方法，而ArrayList和Vector中同名方法的方法体内容并无太大差异，所以在锁定范围和锁的作用域上两者并无区别。\"},\"802\":{\"t\":\"在锁定的对象区别上，SynchronizedList的同步代码块锁定的是mutex对象，Vector锁定的是this对象。\"},\"803\":{\"t\":\"那么mutex对象又是什么呢？ 其实SynchronizedList有一个构造函数可以传入一个Object,如果在调用的时候显示的传入一个对象，那么锁定的就是用户传入的对象。如果没有指定，那么锁定的也是this对象。\"},\"804\":{\"t\":\"但是，凡事都有但是。 SynchronizedList中实现的类并没有都使用synchronized同步代码块。其中有listIterator和**listIterator(int index)**并没有做同步处理。但是Vector却对该方法加了方法锁。 所以说，在使用SynchronizedList进行遍历的时候要手动加锁。\"},\"805\":{\"t\":\"但是，但是之后还有但是。\"},\"806\":{\"t\":\"之前的比较都是基于我们将ArrayList转成SynchronizedList。那么如果我们想把LinkedList变成线程安全的，或者说我想要方便在中间插入和删除的同步的链表，那么我可以将已有的LinkedList直接转成 SynchronizedList，而不用改变他的底层数据结构。而这一点是Vector无法做到的，因为他的底层结构就是使用数组实现的，这个是无法更改的。\"},\"807\":{\"t\":\"所以，最后，SynchronizedList和Vector最主要的区别：\"},\"808\":{\"t\":\"SynchronizedList有很好的扩展和兼容功能。他可以将所有的List的子类转成线程安全的类。\"},\"809\":{\"t\":\"使用SynchronizedList的时候，进行遍历时要手动进行同步处理。\"},\"810\":{\"t\":\"SynchronizedList可以指定锁定的对象。\"},\"811\":{\"h\":\"八、常见的设计模式\"},\"812\":{\"h\":\"4.1软件设计原则有哪些？\",\"a\":\"_4-1软件设计原则有哪些\"},\"813\":{\"h\":\"4.2什么是设计模式？\",\"a\":\"_4-2什么是设计模式\"},\"814\":{\"t\":\"设计模式（Design pattern）代表了最佳的实践，通常被有经验的⾯向对象的软件开发⼈员所采⽤。设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案。这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的。\"},\"815\":{\"t\":\"分为三大类：\"},\"816\":{\"t\":\"创建型： 在创建对象的同时隐藏创建逻辑，不使⽤ new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括⼯⼚/抽象⼯⼚/单例/建造者/原型模式。 结构型： 通过类和接⼝间的继承和引⽤实现创建复杂结构的对象。包括适配器/桥接模式/过滤器/组合/装饰器/外观/享元/代理模式。 行为型： 通过类之间不同通信⽅式实现不同⾏为。包括责任链/命名/解释器/迭代器/中介者/备忘录/观察者/状态/策略/模板/访问者模式。\"},\"817\":{\"h\":\"4.3单例模式\",\"a\":\"_4-3单例模式\"},\"818\":{\"t\":\"单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，构造⽅法必须是私有的、由自己创建⼀个静态变量存储实例，对外提供⼀个静态公有方法获取实例。\"},\"819\":{\"t\":\"双重检查锁（DCL， 即 double-checked locking） 实现代码如下：\"},\"820\":{\"t\":\"public class Singleton { // 1、私有化构造⽅法 private Singleton() { } // 2、定义⼀个静态变量指向⾃⼰类型 private volatile static Singleton instance; // 3、对外提供⼀个公共的⽅法获取实例 public static Singleton getInstance() { // 第⼀重检查是否为 null if (instance == null) { // 使⽤ synchronized 加锁 synchronized (Singleton.class) { // 第⼆重检查是否为 null if (instance == null) { // new 关键字创建对象不是原⼦操作 instance = new Singleton(); } } } return instance; } } \"},\"821\":{\"t\":\"优点：懒加载，线程安全，效率较⾼缺点：实现较复杂 这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单例。关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返回已创建的单例对象。\"},\"822\":{\"h\":\"4.4工厂模式\",\"a\":\"_4-4工厂模式\"},\"823\":{\"h\":\"4.4.1说⼀说简单⼯⼚模式：\",\"a\":\"_4-4-1说一说简单工厂模式\"},\"824\":{\"t\":\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数。\"},\"825\":{\"t\":\"适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较复杂。\"},\"826\":{\"t\":\"Spring 中的 BeanFactory 使⽤简单⼯⼚模式，根据传⼊⼀个唯⼀的标识来获得 Bean 对象。\"},\"827\":{\"h\":\"4.4.2⼯⼚⽅法模式了解吗：\",\"a\":\"_4-4-2工厂方法模式了解吗\"},\"828\":{\"t\":\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐，⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚。\"},\"829\":{\"t\":\"也就是定义⼀个抽象⼯⼚，其定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。这样不⽤通过指定类型来创建对象了。\"},\"830\":{\"h\":\"4.4.3抽象⼯⼚模式了解吗：\",\"a\":\"_4-4-3抽象工厂模式了解吗\"},\"831\":{\"t\":\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象，都只是针对⼀类产品，如果要⽣成另⼀种产品，就⽐较难办了！抽象⼯⼚模式通过在 AbstarctFactory 中增加创建产品的接⼝，并在具体⼦⼯⼚中实现新加产品的创建，当然前提是⼦⼯⼚⽀持⽣产该产品。否则继承的这个接⼝可以什么也不⼲。\"},\"832\":{\"h\":\"4.5装饰器模式\",\"a\":\"_4-5装饰器模式\"},\"833\":{\"h\":\"4.6代理模式\",\"a\":\"_4-6代理模式\"},\"834\":{\"h\":\"4.6.1什么是代理模式？\",\"a\":\"_4-6-1什么是代理模式\"},\"835\":{\"t\":\"代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制，是⼀种结构性模式。\"},\"836\":{\"h\":\"4.6.2静态代理和动态代理的区别：\",\"a\":\"_4-6-2静态代理和动态代理的区别\"},\"837\":{\"t\":\"灵活性 ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。另外，静态代理中，接⼝⼀旦新增加⽅法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！\"},\"838\":{\"t\":\"JVM 层⾯ ：静态代理在编译时就将接⼝、实现类、代理类这些都变成了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节码，并加载到 JVM 中的。\"},\"839\":{\"h\":\"4.6.3静态代理：\",\"a\":\"_4-6-3静态代理\"},\"840\":{\"t\":\"静态代理中，我们对目标对象的每个方法的增强都是手动完成的（*后面会具体演示代码*），非常不灵活（*比如接口一旦新增加方法，目标对象和代理对象都要进行修改*）且麻烦(*需要对每个目标类都单独写一个代理类*）。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\"},\"841\":{\"t\":\"上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\"},\"842\":{\"h\":\"4.6.4动态代理：\",\"a\":\"_4-6-4动态代理\"},\"843\":{\"t\":\"相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。\"},\"844\":{\"t\":\"从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\"},\"845\":{\"t\":\"说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\"},\"846\":{\"t\":\"动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\"},\"847\":{\"t\":\"就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\"},\"848\":{\"h\":\"JDK 动态代理机制\",\"a\":\"jdk-动态代理机制\"},\"849\":{\"t\":\"在 Java 动态代理机制中 InvocationHandler 接口和 Proxy 类是核心。\"},\"850\":{\"t\":\"Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\"},\"851\":{\"t\":\" public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException { ...... } 这个方法一共有 3 个参数： loader :类加载器，用于加载代理对象。 interfaces : 被代理类实现的一些接口； h : 实现了 InvocationHandler 接口的对象； \"},\"852\":{\"t\":\"要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\"},\"853\":{\"t\":\"public interface InvocationHandler { /** * 当你使用代理对象调用方法的时候实际会调用到这个方法 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; } invoke() 方法有下面三个参数： proxy :动态生成的代理类 method : 与代理类对象调用的方法相对应 args : 当前 method 方法的参数 \"},\"854\":{\"t\":\"也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\"},\"855\":{\"h\":\"CGLIB 动态代理机制\",\"a\":\"cglib-动态代理机制\"},\"856\":{\"t\":\"JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。\"},\"857\":{\"t\":\"为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\"},\"858\":{\"t\":\"CGLIBCode Generation Library)允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\"},\"859\":{\"t\":\"在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\"},\"860\":{\"t\":\"你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\"},\"861\":{\"t\":\"public interface MethodInterceptor extends Callback{ // 拦截被代理类中的方法 public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy) throws Throwable; } obj : 被代理的对象（需要增强的对象） method : 被拦截的方法（需要增强的方法） args : 方法入参 proxy : 用于调用原始方法 \"},\"862\":{\"t\":\"你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\"},\"863\":{\"h\":\"JDK 动态代理和 CGLIB 动态代理对比：\",\"a\":\"jdk-动态代理和-cglib-动态代理对比\"},\"864\":{\"t\":\"JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\"},\"865\":{\"t\":\"就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\"},\"866\":{\"h\":\"六、Map常见面试题\"},\"867\":{\"h\":\"1.为什么JDK1.8中HashMap从头插入改成尾插入\",\"a\":\"_1-为什么jdk1-8中hashmap从头插入改成尾插入\"},\"868\":{\"t\":\"原文链接：https://blog.csdn.net/qq_35590459/article/details/108988011\"},\"869\":{\"t\":\"JDK1.7中扩容时，每个元素的rehash之后，都会插入到新数组对应索引的链表头，所以这就导致原链表顺序为A->B->C，扩容之后，rehash之后的链表可能为C->B->A，元素的顺序发生了变化。在并发场景下，扩容时可能会出现循环链表的情况。而JDK1.8从头插入改成尾插入元素的顺序不变，避免出现循环链表的情况。\"},\"870\":{\"h\":\"2.为什么JDK1.8采用红黑树存储 Hash 冲突的元素？\",\"a\":\"_2-为什么jdk1-8采用红黑树存储hash冲突的元素\"},\"871\":{\"t\":\"红黑树本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为O(log n)。能够加快检索速率。\"},\"872\":{\"h\":\"3.为什么在长度小于8时使用链表，不一直使用红黑树？\",\"a\":\"_3-为什么在长度小于8时使用链表-不一直使用红黑树\"},\"873\":{\"t\":\"桶中元素的插入只会在hash冲突时发生，而hash冲突发生的概率较小，一直维护一个红黑树比链表耗费资源更多，在桶中元素量较小时没有这个必要。\"},\"874\":{\"h\":\"4.为什么要使用红黑树而不使用AVL树？\",\"a\":\"_4-为什么要使用红黑树而不使用avl树\"},\"875\":{\"t\":\"红黑树与AVLl树，在检索的时候效率差不多，都是通过平衡来二分查找。但红黑树不像avl树一样追求绝对的平衡，红黑树允许局部很少的不完全平衡，这样对于效率影响不大，但省去了很多没有必要的调平衡操作，avl树调平衡有时候代价较大，所以效率不如红黑树。\"},\"876\":{\"h\":\"5.为什么数组容量必须是2次幂？\",\"a\":\"_5-为什么数组容量必须是2次幂\"},\"877\":{\"t\":\"索引计算公式为i = (n - 1) & hash，如果n为2次幂，那么n-1的低位就全是1，哈希值进行与操作时可以保证低位的值不变，从而保证分布均匀，效果等同于hash%n，但是位运算比取余运算要高效的多。\"},\"878\":{\"h\":\"6.为什么单链表转为红黑树要求桶内的元素个数大于8？\",\"a\":\"_6-为什么单链表转为红黑树要求桶内的元素个数大于8\"},\"879\":{\"t\":\"当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，而一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件。\"},\"880\":{\"t\":\"同理，少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗，而选择8作为临界值，是因理想情况下一个bin中元素个数达到6的概率是0.00001316，达到7的概率为0.00000094，二者跨度较大，可以减小树和链表之间频繁转化的可能性。\"},\"881\":{\"h\":\"7.HashMap和Hashtable的区别\",\"a\":\"_7-hashmap和hashtable的区别\"},\"882\":{\"t\":\"**共同点:**都是双列集合,底层都是哈希算法\"},\"883\":{\"t\":\"区别:\"},\"884\":{\"t\":\"HashMap是线程不安全的，效率高，JDK1.2版本\"},\"885\":{\"t\":\"Hashtable是线程安全的，效率低，JDK1.0版本\"},\"886\":{\"t\":\"HashMap可以存储null键和null值\"},\"887\":{\"t\":\"Hashtable不可以存储null键和null值\"},\"888\":{\"t\":\"HashTable是基于陈旧的Dictionary类继承来的。 HashMap继承的抽象类AbstractMap实现了Map接口。\"},\"889\":{\"t\":\"默认初始容量和扩容机制： HashTable中的hash数组初始大小是11，增加的方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。\"},\"890\":{\"t\":\"哈希值的使用不同 ： HashTable直接使用对象的hashCode。 HashMap重新计算hash值。\"},\"891\":{\"t\":\"遍历方式的内部实现上不同 ： Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式。HashMap 实现 Iterator，支持fast-fail，Hashtable的 Iterator 遍历支持fast-fail，用 Enumeration 不支持 fast-fail\"},\"892\":{\"t\":\"具体地，Hashtable是线程安全的，它的每个方法中都加入了Synchronize方法。在多线程并发的环境下，可以直接使用Hashtable，不需要自己为它的方法实现同步。\"},\"893\":{\"t\":\"HashMap不是线程安全的，在多线程并发的环境下，可能会产生死锁等问题。使用HashMap时就必须要自己增加同步处理。虽然HashMap不是线程安全的，但是它的效率会比Hashtable要好很多。这样设计是合理的。在我们的日常使用当中，大部分时间是单线程操作的。HashMap把这部分操作解放出来了。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。\"},\"894\":{\"t\":\"Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。\"},\"895\":{\"t\":\"HashMap的Iterator是fail-fast迭代器。当有其它线程改变了HashMap的结构（增加，删除，修改元素），将会抛出ConcurrentModificationException。\"},\"896\":{\"t\":\"JDK8之前的版本中，Hashtable是没有fast-fail机制的。在JDK8及以后的版本中 ，HashTable也是使用fast-fail的。\"},\"897\":{\"t\":\"HashMap与Hashtable的区别是面试中经常遇到的一个问题。这个问题看似简单，但如果深究进去，也能了解到不少知识。（原文链接：https://blog.csdn.net/yang13563758128/article/details/86655574?spm=1001.2014.3001.5502）\"},\"898\":{\"h\":\"8.HashMap、ConcurrentHashMap区别\",\"a\":\"_8-hashmap、concurrenthashmap区别\"},\"899\":{\"t\":\"ConcurrentHashMap和HashMap的实现方式不一样，虽然都是使用桶数组实现的，但是还是有区别，ConcurrentHashMap对桶数组进行了分段，而HashMap并没有。\"},\"900\":{\"t\":\"ConcurrentHashMap在每一个分段上都用锁进行了保护。HashMap没有锁机制。所以，前者线程安全的，后者不是线程安全的。\"},\"901\":{\"t\":\"注意：以上区别基于jdk1.8以前的版本。\"},\"902\":{\"h\":\"四、Map\"},\"903\":{\"h\":\"1.HashMap\",\"a\":\"_1-hashmap\"},\"904\":{\"t\":\"HashMap实现了Map接口，可以方便地按照键存取值，内部使用数组链表和哈希的方式进行实现，这决定了它有如下特点：\"},\"905\":{\"t\":\"根据键保存和获取值的效率都很高，为O(1)，每个单向链表往往只有一个或少数几个节点，根据hash值就可以直接快速定位；\"},\"906\":{\"t\":\"HashMap中的键值对没有顺序，因为hash值是随机的。\"},\"907\":{\"t\":\"需要说明的是，HashMap不是线程安全的，Java中还有一个类Hashtable，它是Java最早实现的容器类之一，实现了Map接口，实现原理与HashMap类似，但没有特别的优化，它内部通过synchronized实现了线程安全。\"},\"908\":{\"t\":\"在HashMap中，键和值都可以为null，而在Hashtable中不可以。在不需要并发安全的场景中，推荐使用HashMap。在高并发的场景中，推荐使用ConcurrentHashMap。\"},\"909\":{\"h\":\"1.1HashMap的容量、扩容\",\"a\":\"_1-1hashmap的容量、扩容\"},\"910\":{\"t\":\"先来看一下，HashMap中都定义了哪些成员变量。\"},\"911\":{\"t\":\"上面是一张HashMap中主要的成员变量的图，其中有一个是我们本文主要关注的： size、loadFactor、threshold、DEFAULT_LOAD_FACTOR和DEFAULT_INITIAL_CAPACITY。\"},\"912\":{\"t\":\"我们先来简单解释一下这些参数的含义，然后再分析他们的作用。\"},\"913\":{\"t\":\"HashMap类中有以下主要成员变量：\"},\"914\":{\"t\":\"transient int size; \"},\"915\":{\"t\":\"记录了Map中KV对的个数\"},\"916\":{\"t\":\"loadFactor \"},\"917\":{\"t\":\"装载因子，用来衡量HashMap满的程度。loadFactor的默认值为0.75f（static final float DEFAULT_LOAD_FACTOR = 0.75f;）。\"},\"918\":{\"t\":\"int threshold; \"},\"919\":{\"t\":\"临界值，当实际KV个数超过threshold时，HashMap会将容量扩容，threshold＝容量*装载因子\"},\"920\":{\"t\":\"除了以上这些重要成员变量外，HashMap中还有一个和他们紧密相关的概念：capacity \"},\"921\":{\"t\":\"容量，如果不指定，默认容量是16(static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;)\"},\"922\":{\"t\":\"可能看完了你还是有点蒙，size和capacity之间有啥关系？为啥要定义这两个变量。loadFactor和threshold又是干啥的？\"},\"923\":{\"h\":\"1.1.1size 和 capacity\",\"a\":\"_1-1-1size-和-capacity\"},\"924\":{\"t\":\"HashMap中的size和capacity之间的区别其实解释起来也挺简单的。我们知道，HashMap就像一个“桶”，那么capacity就是这个桶“当前”最多可以装多少元素，而size表示这个桶已经装了多少元素。来看下以下代码：\"},\"925\":{\"t\":\" Map<String, String> map = new HashMap<String, String>(); map.put(\\\"hollis\\\", \\\"hollischuang\\\"); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); \"},\"926\":{\"t\":\"我们定义了一个新的HashMap，并想其中put了一个元素，然后通过反射的方式打印capacity和size。输出结果为：\"},\"927\":{\"t\":\"capacity : 16、size : 1\"},\"928\":{\"t\":\"默认情况下，一个HashMap的容量（capacity）是16，设计成16的好处主要是可以使用按位与替代取模来提升hash的效率。\"},\"929\":{\"t\":\"我们知道，HashMap的重载的构造函数中，有一个是支持传入initialCapacity的，那么我们尝试着设置一下，看结果如何。\"},\"930\":{\"t\":\" Map<String, String> map = new HashMap<String, String>(1); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Map<String, String> map = new HashMap<String, String>(7); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Map<String, String> map = new HashMap<String, String>(9); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); \"},\"931\":{\"t\":\"分别执行以上3段代码，分别输出：capacity : 1、capacity : 8、capacity : 16。\"},\"932\":{\"t\":\"也就是说，默认情况下HashMap的容量是16，但是，如果用户通过构造函数指定了一个数字作为容量，那么Hash会选择大于该数字的第一个2的幂作为容量。(1->1、7->8、9->16)\"},\"933\":{\"t\":\"相关信息\"},\"934\":{\"t\":\"这里有一个小建议：在初始化HashMap的时候，应该尽量指定其大小。尤其是当你已知map中存放的元素个数时。（《阿里巴巴Java开发规约》）\"},\"935\":{\"h\":\"1.1.2loadFactor 和 threshold\",\"a\":\"_1-1-2loadfactor-和-threshold\"},\"936\":{\"t\":\"前面我们提到过，HashMap有扩容机制，就是当达到扩容条件时会进行扩容，从16扩容到32、64、128...\"},\"937\":{\"t\":\"那么，这个扩容条件指的是什么呢？\"},\"938\":{\"t\":\"其实，HashMap的扩容条件就是当HashMap中的元素个数（size）超过临界值（threshold）时就会自动扩容。\"},\"939\":{\"t\":\"在HashMap中，threshold = loadFactor * capacity。\"},\"940\":{\"t\":\"loadFactor是装载因子，表示HashMap满的程度，默认值为0.75f，设置成0.75有一个好处，那就是0.75正好是3/4，而capacity又是2的幂。所以，两个数的乘积都是整数。\"},\"941\":{\"t\":\"对于一个默认的HashMap来说，默认情况下，当其size大于12(16*0.75)时就会触发扩容。\"},\"942\":{\"t\":\"验证代码如下：\"},\"943\":{\"t\":\" Map<String, String> map = new HashMap<>(); map.put(\\\"hollis1\\\", \\\"hollischuang\\\"); map.put(\\\"hollis2\\\", \\\"hollischuang\\\"); map.put(\\\"hollis3\\\", \\\"hollischuang\\\"); map.put(\\\"hollis4\\\", \\\"hollischuang\\\"); map.put(\\\"hollis5\\\", \\\"hollischuang\\\"); map.put(\\\"hollis6\\\", \\\"hollischuang\\\"); map.put(\\\"hollis7\\\", \\\"hollischuang\\\"); map.put(\\\"hollis8\\\", \\\"hollischuang\\\"); map.put(\\\"hollis9\\\", \\\"hollischuang\\\"); map.put(\\\"hollis10\\\", \\\"hollischuang\\\"); map.put(\\\"hollis11\\\", \\\"hollischuang\\\"); map.put(\\\"hollis12\\\", \\\"hollischuang\\\"); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); Field threshold = mapType.getDeclaredField(\\\"threshold\\\"); threshold.setAccessible(true); System.out.println(\\\"threshold : \\\" + threshold.get(map)); Field loadFactor = mapType.getDeclaredField(\\\"loadFactor\\\"); loadFactor.setAccessible(true); System.out.println(\\\"loadFactor : \\\" + loadFactor.get(map)); map.put(\\\"hollis13\\\", \\\"hollischuang\\\"); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); Field threshold = mapType.getDeclaredField(\\\"threshold\\\"); threshold.setAccessible(true); System.out.println(\\\"threshold : \\\" + threshold.get(map)); Field loadFactor = mapType.getDeclaredField(\\\"loadFactor\\\"); loadFactor.setAccessible(true); System.out.println(\\\"loadFactor : \\\" + loadFactor.get(map)); \"},\"944\":{\"t\":\"输出结果：\"},\"945\":{\"t\":\"capacity : 16 size : 12 threshold : 12 loadFactor : 0.75 capacity : 32 size : 13 threshold : 24 loadFactor : 0.75 \"},\"946\":{\"t\":\"当HashMap中的元素个数达到13的时候，capacity就从16扩容到32了。\"},\"947\":{\"t\":\"相关信息\"},\"948\":{\"t\":\"HashMap中还提供了一个支持传入initialCapacity,loadFactor两个参数的方法，来初始化容量和装载因子。不过，一般不建议修改loadFactor的值。\"},\"949\":{\"h\":\"1.1.3总结\",\"a\":\"_1-1-3总结\"},\"950\":{\"t\":\"HashMap中size表示当前共有多少个KV对，capacity表示当前HashMap的容量是多少，默认值是16，每次扩容都是成倍的。loadFactor是装载因子，当Map中元素个数超过loadFactor* capacity的值时，会触发扩容。loadFactor* capacity可以用threshold表示。\"},\"951\":{\"t\":\"注意：文中分析基于JDK1.8.0_73\"},\"952\":{\"h\":\"1.2HashMap中hash方法的原理\",\"a\":\"_1-2hashmap中hash方法的原理\"},\"953\":{\"h\":\"1.2.1HashMap 的数据结构\",\"a\":\"_1-2-1hashmap-的数据结构\"},\"954\":{\"t\":\"在Java中，保存数据有两种比较简单的数据结构：数组和链表。**数组的特点是：寻址容易，插入和删除困难；而链表的特点是：寻址困难，插入和删除容易。**上面我们提到过，常用的哈希函数的冲突解决办法中有一种方法叫做链地址法，其实就是将数组和链表组合在一起，发挥了两者的优势，我们可以将其理解为链表的数组。\"},\"955\":{\"t\":\"640\"},\"956\":{\"t\":\"我们可以从上图看到，左边很明显是个数组，数组的每个成员是一个链表。该数据结构所容纳的所有元素均包含一个指针，用于元素间的链接。我们根据元素的自身特征把元素分配到不同的链表中去，反过来我们也正是通过这些特征找到正确的链表，再从链表中找出正确的元素。其中，根据元素特征计算元素数组下标的方法就是哈希算法，即本文的主角hash()函数（当然，还包括indexOf()函数）。\"},\"957\":{\"h\":\"1.2.2hash方法\",\"a\":\"_1-2-2hash方法\"},\"958\":{\"t\":\"我们拿JDK 1.7的HashMap为例，其中定义了一个final int hash(Object k) 方法，其主要被以下方法引用。\"},\"959\":{\"t\":\"hash-use\"},\"960\":{\"t\":\"上面的方法主要都是增加和删除方法，这不难理解，当我们要对一个链表数组中的某个元素进行增删的时候，首先要知道他应该保存在这个链表数组中的哪个位置，即他在这个数组中的下标。而hash()方法的功能就是根据Key来定位其在HashMap中的位置。HashTable、ConcurrentHashMap同理。\"},\"961\":{\"t\":\"首先，在同一个版本的Jdk中，HashMap、HashTable以及ConcurrentHashMap里面的hash方法的实现是不同的。在不同的版本的JDK中（Java7 和 Java8）中也是有区别的。我会尽量全部介绍到。相信，看完这篇文章，你会彻底理解hash方法。\"},\"962\":{\"t\":\"在上代码之前，我们先来做个简单分析。我们知道，hash方法的功能是根据Key来定位这个K-V在链表数组中的位置的。也就是hash方法的输入应该是个Object类型的Key，输出应该是个int类型的数组下标。如果让你设计这个方法，你会怎么做？\"},\"963\":{\"t\":\"其实简单，我们只要调用Object对象的hashCode()方法，该方法会返回一个整数，然后用这个数对HashMap或者HashTable的容量进行取模就行了。没错，其实基本原理就是这个，只不过，在具体实现上，由两个方法int hash(Object k)和int indexFor(int h, int length)来实现。但是考虑到效率等问题，HashMap的实现会稍微复杂一点。\"},\"964\":{\"t\":\"相关信息\"},\"965\":{\"t\":\"hash ：该方法主要是将Object转换成一个整型。\"},\"966\":{\"t\":\"indexFor ：该方法主要是将hash生成的整型转换成链表数组中的下标。\"},\"967\":{\"t\":\"HashMap In Java 7：\"},\"968\":{\"t\":\"final int hash(Object k) { int h = hashSeed; if (0 != h && k instanceof String) { return sun.misc.Hashing.stringHash32((String) k); } h ^= k.hashCode(); h ^= (h >>> 20) ^ (h >>> 12); return h ^ (h >>> 7) ^ (h >>> 4); } static int indexFor(int h, int length) { return h & (length-1); } \"},\"969\":{\"t\":\"前面我说过，indexFor方法其实主要是将hash生成的整型转换成链表数组中的下标。那么return h & (length-1);是什么意思呢？其实，他就是取模。Java之所以使用位运算(&)来代替取模运算(%)，最主要的考虑就是效率。位运算(&)效率要比代替取模运算(%)高很多，主要原因是位运算直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快。\"},\"970\":{\"t\":\"那么，为什么可以使用位运算(&)来实现取模运算(%)呢？这实现的原理如下：\"},\"971\":{\"t\":\"相关信息\"},\"972\":{\"t\":\"X % 2^n = X & (2^n - 1)\"},\"973\":{\"t\":\"2n表示2的n次方，也就是说，一个数对2n取模 == 一个数和(2^n - 1)做按位与运算 。\"},\"974\":{\"t\":\"假设n为3，则2^3 = 8，表示成2进制就是1000。2^3 -1 = 7 ，即0111。\"},\"975\":{\"t\":\"此时X & (2^3 - 1) 就相当于取X的2进制的最后三位数。\"},\"976\":{\"t\":\"从2进制角度来看，X / 8相当于 X >> 3，即把X右移3位，此时得到了X / 8的商，而被移掉的部分(后三位)，则是X % 8，也就是余数。\"},\"977\":{\"t\":\"上面的解释不知道你有没有看懂，没看懂的话其实也没关系，你只需要记住这个技巧就可以了。或者你可以找几个例子试一下。\"},\"978\":{\"t\":\"相关信息\"},\"979\":{\"t\":\"6 % 8 = 6 ，6 & 7 = 6\"},\"980\":{\"t\":\"10 & 8 = 2 ，10 & 7 = 2\"},\"981\":{\"t\":\"所以，return h & (length-1);只要保证length的长度是2^n的话，就可以实现取模运算了。而HashMap中的length也确实是2的倍数，初始值是16，之后每次扩充为原来的2倍。\"},\"982\":{\"t\":\"分析完indexFor方法后，我们接下来准备分析hash方法的具体原理和实现。在深入分析之前，至此，先做个总结。\"},\"983\":{\"t\":\"HashMap的数据是存储在链表数组里面的。在对HashMap进行插入/删除等操作时，都需要根据K-V对的键值定位到他应该保存在数组的哪个下标中。而这个通过键值求取下标的操作就叫做哈希。HashMap的数组是有长度的，Java中规定这个长度只能是2的倍数，初始值为16。简单的做法是先求取出键值的hashcode，然后在将hashcode得到的int值对数组长度进行取模。为了考虑性能，Java总采用按位与操作实现取模操作。\"},\"984\":{\"t\":\"接下来我们会发现，无论是用取模运算还是位运算都无法直接解决冲突较大的问题。比如：CA11 0000和0001 0000在对0000 1111进行按位与运算后的值是相等的。\"},\"985\":{\"t\":\"两个不同的键值，在对数组长度进行按位与运算后得到的结果相同，这不就发生了冲突吗。那么如何解决这种冲突呢，来看下Java是如何做的。\"},\"986\":{\"t\":\"其中的主要代码部分如下：\"},\"987\":{\"t\":\"h ^= k.hashCode(); h ^= (h >>> 20) ^ (h >>> 12); return h ^ (h >>> 7) ^ (h >>> 4); \"},\"988\":{\"t\":\"这段代码是为了对key的hashCode进行扰动计算，防止不同hashCode的高位不同但低位相同导致的hash冲突。简单点说，就是为了把高位的特征和低位的特征组合起来，降低哈希冲突的概率，也就是说，尽量做到任何一位的变化都能对最终得到的结果产生影响。\"},\"989\":{\"t\":\"举个例子来说，我们现在想向一个HashMap中put一个K-V对，Key的值为“hollischuang”，经过简单的获取hashcode后，得到的值为“1011000110101110011111010011011”，如果当前HashTable的大小为16，即在不进行扰动计算的情况下，他最终得到的index结果值为11。由于15的二进制扩展到32位为“00000000000000000000000000001111”，所以，一个数字在和他进行按位与操作的时候，前28位无论是什么，计算结果都一样（因为0和任何数做与，结果都为0）。如下图所示。\"},\"990\":{\"t\":\"640 (3)\"},\"991\":{\"t\":\"可以看到，后面的两个hashcode经过位运算之后得到的值也是11 ，虽然我们不知道哪个key的hashcode是上面例子中的那两个，但是肯定存在这样的key，这就产生了冲突。\"},\"992\":{\"t\":\"那么，接下来，我看看一下经过扰动的算法最终的计算结果会如何。\"},\"993\":{\"t\":\"640 (4)\"},\"994\":{\"t\":\"从上面图中可以看到，之前会产生冲突的两个hashcode，经过扰动计算之后，最终得到的index的值不一样了，这就很好的避免了冲突。\"},\"995\":{\"t\":\"相关信息\"},\"996\":{\"t\":\"其实，使用位运算代替取模运算，除了性能之外，还有一个好处就是可以很好的解决负数的问题。因为我们知道，hashcode的结果是int类型，而int的取值范围是-2^31 ~ 2^31 - 1，即[ -2147483648, 2147483647]；这里面是包含负数的，我们知道，对于一个负数取模还是有些麻烦的。如果使用二进制的位运算的话就可以很好的避免这个问题。首先，不管hashcode的值是正数还是负数。length-1这个值一定是个正数。那么，他的二进制的第一位一定是0（有符号数用最高位作为符号位，“0”代表“+”，“1”代表“-”），这样里两个数做按位与运算之后，第一位一定是个0，也就是，得到的结果一定是个正数。\"},\"997\":{\"t\":\"HashTable In Java 7：\"},\"998\":{\"t\":\"上面是Java 7中HashMap的hash方法以及indexOf方法的实现，那么接下来我们要看下，线程安全的HashTable是如何实现的，和HashMap有何不同，并试着分析下不同的原因。以下是Java 7中HashTable的hash方法的实现。\"},\"999\":{\"t\":\"private int hash(Object k) { // hashSeed will be zero if alternative hashing is disabled. return hashSeed ^ k.hashCode(); } \"},\"1000\":{\"t\":\"我们可以发现，很简单，相当于只是对k做了个简单的hash，取了一下其hashCode。而HashTable中也没有indexOf方法，取而代之的是这段代码：int index = (hash & 0x7FFFFFFF) % tab.length;。也就是说，HashMap和HashTable对于计算数组下标这件事，采用了两种方法。HashMap采用的是位运算，而HashTable采用的是直接取模。\"},\"1001\":{\"t\":\"我们前面说过，HashMap之所以不用取模的原因是为了提高效率。有人认为，因为HashTable是个线程安全的类，本来就慢，所以Java并没有考虑效率问题，就直接使用取模算法了呢？但是其实并不完全是，Java这样设计还是有一定的考虑在的，虽然这样效率确实是会比HashMap慢一些。\"},\"1002\":{\"t\":\"其实，HashTable采用简单的取模是有一定的考虑在的。这就要涉及到HashTable的构造函数和扩容函数了。由于篇幅有限，这里就不贴代码了，直接给出结论：\"},\"1003\":{\"t\":\"相关信息\"},\"1004\":{\"t\":\"HashTable默认的初始大小为11，之后每次扩充为原来的2n+1。\"},\"1005\":{\"t\":\"也就是说，HashTable的链表数组的默认大小是一个素数、奇数。之后的每次扩充结果也都是奇数。\"},\"1006\":{\"t\":\"由于HashTable会尽量使用素数、奇数作为容量的大小。当哈希表的大小为素数时，简单的取模哈希的结果会更加均匀。（这个是可以证明出来的，由于不是本文重点，暂不详细介绍，可参考：http://zhaox.github.io/algorithm/2015/06/29/hash\"},\"1007\":{\"t\":\"至此，我们看完了Java 7中HashMap和HashTable中对于hash的实现，我们来做个简单的总结。\"},\"1008\":{\"t\":\"HashMap默认的初始化大小为16，之后每次扩充为原来的2倍。\"},\"1009\":{\"t\":\"HashTable默认的初始大小为11，之后每次扩充为原来的2n+1。\"},\"1010\":{\"t\":\"当哈希表的大小为素数时，简单的取模哈希的结果会更加均匀，所以单从这一点上看，HashTable的哈希表大小选择，似乎更高明些。因为hash结果越分散效果越好。\"},\"1011\":{\"t\":\"在取模计算时，如果模数是2的幂，那么我们可以直接使用位运算来得到结果，效率要大大高于做除法。所以从hash计算的效率上，又是HashMap更胜一筹。\"},\"1012\":{\"t\":\"但是，HashMap为了提高效率使用位运算代替哈希，这又引入了哈希分布不均匀的问题，所以HashMap为解决这问题，又对hash算法做了一些改进，进行了扰动计算。\"},\"1013\":{\"t\":\"ConcurrentHashMap In Java 7：\"},\"1014\":{\"t\":\"private int hash(Object k) { int h = hashSeed; if ((0 != h) && (k instanceof String)) { return sun.misc.Hashing.stringHash32((String) k); } h ^= k.hashCode(); // Spread bits to regularize both segment and index locations, // using variant of single-word Wang/Jenkins hash. h += (h << 15) ^ 0xffffcd7d; h ^= (h >>> 10); h += (h << 3); h ^= (h >>> 6); h += (h << 2) + (h << 14); return h ^ (h >>> 16); } int j = (hash >>> segmentShift) & segmentMask; \"},\"1015\":{\"t\":\"上面这段关于ConcurrentHashMap的hash实现其实和HashMap如出一辙。都是通过位运算代替取模，然后再对hashcode进行扰动。区别在于，ConcurrentHashMap 使用了一种变种的Wang/Jenkins 哈希算法，其主要目的也是为了把高位和低位组合在一起，避免发生冲突。至于为啥不和HashMap采用同样的算法进行扰动，我猜这只是程序员自由意志的选择吧。至少我目前没有办法证明哪个更优。\"},\"1016\":{\"t\":\"HashMap In Java 8：\"},\"1017\":{\"t\":\"在Java 8 之前，HashMap和其他基于map的类都是通过链地址法解决冲突，它们使用单向链表来存储相同索引值的元素。在最坏的情况下，这种方式会将HashMap的get方法的性能从O(1)降低到O(n)。为了解决在频繁冲突时hashmap性能降低的问题，Java 8中使用平衡树来替代链表存储冲突的元素。这意味着我们可以将最坏情况下的性能从O(n)提高到O(logn)。关于HashMap在Java 8中的优化，我后面会有文章继续深入介绍。\"},\"1018\":{\"t\":\"如果恶意程序知道我们用的是Hash算法，则在纯链表情况下，它能够发送大量请求导致哈希碰撞，然后不停访问这些key导致HashMap忙于进行线性查找，最终陷入瘫痪，即形成了拒绝服务攻击（DoS）。\"},\"1019\":{\"t\":\"关于Java 8中的hash函数，原理和Java 7中基本类似。Java 8中这一步做了优化，只做一次16位右位移异或混合，而不是四次，但原理是不变的。\"},\"1020\":{\"t\":\"static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } \"},\"1021\":{\"t\":\"在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h >>> 16)，主要是从速度、功效、质量来考虑的。以上方法得到的int的hash值，然后再通过h & (table.length -1)来得到该对象在数据中保存的位置。\"},\"1022\":{\"t\":\"HashTable In Java 8：\"},\"1023\":{\"t\":\"在Java 8的HashTable中，已经不再有hash方法了。但是哈希的操作还是在的，比如在put方法中就有如下实现：\"},\"1024\":{\"t\":\" int hash = key.hashCode(); int index = (hash & 0x7FFFFFFF) % tab.length; \"},\"1025\":{\"t\":\"这其实和Java 7中的实现几乎无差别，就不做过多的介绍了。\"},\"1026\":{\"t\":\"ConcurrentHashMap In Java 8：\"},\"1027\":{\"t\":\"Java 8 里面的求hash的方法从hash改为了spread。实现方式如下：\"},\"1028\":{\"t\":\"static final int spread(int h) { return (h ^ (h >>> 16)) & HASH_BITS; } \"},\"1029\":{\"t\":\"Java 8的ConcurrentHashMap同样是通过Key的哈希值与数组长度取模确定该Key在数组中的索引。同样为了避免不太好的Key的hashCode设计，它通过如下方法计算得到Key的最终哈希值。不同的是，Java 8的ConcurrentHashMap作者认为引入红黑树后，即使哈希冲突比较严重，寻址效率也足够高，所以作者并未在哈希值的计算上做过多设计，只是将Key的hashCode值与其高16位作异或并保证最高位为0（从而保证最终结果为正整数）。\"},\"1030\":{\"h\":\"1.2.3总结\",\"a\":\"_1-2-3总结\"},\"1031\":{\"t\":\"至此，我们已经分析完了HashMap、HashTable以及ConcurrentHashMap分别在Jdk 1.7 和 Jdk 1.8中的实现。我们可以发现，为了保证哈希的结果可以分散、为了提高哈希的效率，JDK在一个小小的hash方法上就有很多考虑，做了很多事情。当然，我希望我们不仅可以深入了解背后的原理，还要学会这种对代码精益求精的态度。\"},\"1032\":{\"t\":\"Jdk的源代码，每一行都很有意思，都值得花时间去钻研、推敲。\"},\"1033\":{\"t\":\"参考：https://hollischuang.gitee.io/tobetopjavaer/#/basics/java-basic/hash-in-hashmap\"},\"1034\":{\"h\":\"2.TreeMap\",\"a\":\"_2-treemap\"},\"1035\":{\"t\":\"TreeMap与HashMap相比，TreeMap同样实现了Map接口，但内部使用红黑树实现。红黑树是统计效率比较高的大致平衡的排序二叉树，这决定了它有如下特点：\"},\"1036\":{\"t\":\"按键有序，TreeMap同样实现了SortedMap和NavigableMap接口，可以方便地根据键的顺序进行查找，如第一个、最后一个、某一范围的键、邻近键等。\"},\"1037\":{\"t\":\"为了按键有序，TreeMap要求键实现Comparable接口或通过构造方法提供一个Com-parator对象。\"},\"1038\":{\"t\":\"根据键保存、查找、删除的效率比较高，为O(h), h为树的高度，在树平衡的情况下，h为log2(N), N为节点数。\"},\"1039\":{\"t\":\"HashMap还是TreeMap呢：不要求排序，优先考虑HashMap，要求排序，考虑TreeMap。\"},\"1040\":{\"h\":\"3.LinkedHashMap\",\"a\":\"_3-linkedhashmap\"},\"1041\":{\"t\":\"LinkedHashMap可以保持插入顺序或访问顺序。插入顺序经常用于处理键值对的数据，并保持其输入顺序，也经常用于键已经排好序的场景，相比TreeMap效率更高；访问顺序经常用于实现LRU缓存。实现原理上，它是HashMap的子类，但内部有一个双向链表以维护节点的顺序。\"},\"1042\":{\"h\":\"框架\"},\"1043\":{\"h\":\"四：Java高级：Spring、SpringMVC、Spring Boot、MyBatis\",\"a\":\"四-java高级-spring、springmvc、spring-boot、mybatis\"},\"1044\":{\"h\":\"AOP和IOC概念\",\"a\":\"aop和ioc概念\"},\"1045\":{\"t\":\"AOP：AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。\"},\"1046\":{\"t\":\"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理。\"},\"1047\":{\"t\":\"IOC： 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。\"},\"1048\":{\"t\":\"为什么叫控制反转？\"},\"1049\":{\"t\":\"控制 ：指的是对象创建（实例化、管理）的权力\"},\"1050\":{\"t\":\"反转 ：控制权交给外部环境（Spring 框架、IoC 容器）\"},\"1051\":{\"h\":\"Bean的生命周期\",\"a\":\"bean的生命周期\"},\"1052\":{\"h\":\"MVC的基本流程\",\"a\":\"mvc的基本流程\"},\"1053\":{\"t\":\"简单来说：客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler -> HandlerAdapter 会根据 Handler 来调用真正的处理器来处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象 -> 前端控制器 DispatcherServlet 渲染数据（Model）-> 将得到视图对象返回给用户。\"},\"1054\":{\"t\":\"image-20210608002334025\"},\"1055\":{\"t\":\"上图用于辅助理解，面试时可用下列 8 步描述 SpringMVC 运行流程：\"},\"1056\":{\"t\":\"用户向服务器发送请求，请求被 Spring 前端控制Servelt DispatcherServlet 捕获；\"},\"1057\":{\"t\":\"DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 对象的形式返回；\"},\"1058\":{\"t\":\"DispatcherServlet 根据获得的 Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得 HandlerAdapter 后，此时将开始执行拦截器的 preHandler(…)方法）\"},\"1059\":{\"t\":\"提取 Request 中的模型数据，填充 Handler 入参，开始执行Handler（Controller)。在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\"},\"1060\":{\"t\":\"（1）HttpMessageConveter：将请求消息（如：Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息；\"},\"1061\":{\"t\":\"（2）数据转换：对请求消息进行数据转换。如：String 转换成 Integer、Double 等；\"},\"1062\":{\"t\":\"（3）数据格式化：对请求消息进行数据格式化。如：将字符串转换成格式化数字或格式化日期等；\"},\"1063\":{\"t\":\"（4）数据验证：验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中;\"},\"1064\":{\"t\":\"5.Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象；\"},\"1065\":{\"t\":\"6.根据返回的 ModelAndView，选择一个适合的 ViewResolver（必须是已经注册到 Spring 容器中的 ViewResolver)返回给DispatcherServlet；\"},\"1066\":{\"t\":\"7.ViewResolver 结合 Model 和 View，来渲染视图；\"},\"1067\":{\"t\":\"8.将渲染结果返回给客户端。\"},\"1068\":{\"h\":\"Spring的设计模式\",\"a\":\"spring的设计模式\"},\"1069\":{\"t\":\"工厂设计模式 : Spring 使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象；\"},\"1070\":{\"t\":\"代理设计模式 : Spring AOP 功能的实现；\"},\"1071\":{\"t\":\"单例设计模式 : Spring 中的 Bean 默认都是单例的；\"},\"1072\":{\"t\":\"模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式；\"},\"1073\":{\"t\":\"包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源；\"},\"1074\":{\"t\":\"观察者模式：Spring 事件驱动模型就是观察者模式很经典的一个应用；\"},\"1075\":{\"t\":\"适配器模式：Spring AOP 的增强或通知(Advice)使用到了适配器模式、SpringMVC 中也是用到了适配器模式适配 Controller。\"},\"1076\":{\"h\":\"Spring事务机制\",\"a\":\"spring事务机制\"},\"1077\":{\"h\":\"谈谈你对 Spring 中的事务的理解？\",\"a\":\"谈谈你对-spring-中的事务的理解\"},\"1078\":{\"t\":\"事务是逻辑上的一组操作，要么都执行，要么都不执行。\"},\"1079\":{\"t\":\"事务特性\"},\"1080\":{\"t\":\"原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\"},\"1081\":{\"t\":\"一致性：执行事务前后，数据保持一致；\"},\"1082\":{\"t\":\"隔离性：并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\"},\"1083\":{\"t\":\"持久性: 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\"},\"1084\":{\"t\":\"Spring 事务管理接口\"},\"1085\":{\"t\":\"PlatformTransactionManager：（平台）事务管理器；\"},\"1086\":{\"t\":\"TransactionDefinition：事务定义信息（事务隔离级别、传播行为、超时、只读、回滚规则）；\"},\"1087\":{\"t\":\"TransactionStatus：事务运行状态；\"},\"1088\":{\"t\":\"所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。\"},\"1089\":{\"h\":\"Spring 中的事务隔离级别？\",\"a\":\"spring-中的事务隔离级别\"},\"1090\":{\"t\":\"TransactionDefinition 接口中定义了五个表示隔离级别的常量：\"},\"1091\":{\"t\":\"TransactionDefinition.ISOLATION_DEFAULT：使用后端数据库默认的隔离级别，MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED 隔离级别；\"},\"1092\":{\"t\":\"TransactionDefinition.ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读；\"},\"1093\":{\"t\":\"TransactionDefinition.ISOLATION_READ_COMMITTED：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生；\"},\"1094\":{\"t\":\"TransactionDefinition.ISOLATION_REPEATABLE_READ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生；\"},\"1095\":{\"t\":\"TransactionDefinition.ISOLATION_SERIALIZABLE：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\"},\"1096\":{\"h\":\"Spring 中的事物传播行为？\",\"a\":\"spring-中的事物传播行为\"},\"1097\":{\"t\":\"事务传播行为是为了解决业务层方法之间互相调用的事务问题。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在 TransactionDefinition 定义中包括了如下几个表示传播行为的常量：\"},\"1098\":{\"t\":\"支持当前事务的情况：\"},\"1099\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务；\"},\"1100\":{\"t\":\"TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行；\"},\"1101\":{\"t\":\"TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\"},\"1102\":{\"t\":\"不支持当前事务的情况：\"},\"1103\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起；\"},\"1104\":{\"t\":\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\"},\"1105\":{\"t\":\"TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\"},\"1106\":{\"t\":\"其他情况：\"},\"1107\":{\"t\":\"TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 TransactionDefinition.PROPAGATION_REQUIRED。\"},\"1108\":{\"h\":\"Spring如何解决循环依赖问题？\",\"a\":\"spring如何解决循环依赖问题\"},\"1109\":{\"t\":\"了解问题的本质再分析问题，往往更利于对问题有更深入的了解和研究。所以我们在分析 Spring 关于循环依赖的源码之前，先要了解下什么是循环依赖。\"},\"1110\":{\"t\":\"1. 循环依赖的概念\"},\"1111\":{\"t\":\"img\"},\"1112\":{\"t\":\"循环依赖分为三种，自身依赖于自身、互相循环依赖、多组循环依赖。\"},\"1113\":{\"t\":\"但无论循环依赖的数量有多少，循环依赖的本质是一样的。就是你的完整创建依赖于我，而我的完整创建也依赖于你，但我们互相没法解耦，最终导致依赖创建失败。\"},\"1114\":{\"t\":\"所以 Spring 提供了除了构造函数注入和原型注入外的，setter循环依赖注入解决方案。那么我们也可以先来尝试下这样的依赖，如果是我们自己处理的话该怎么解决。\"},\"1115\":{\"t\":\"2. 问题体现\"},\"1116\":{\"t\":\"public class ABTest { public static void main(String[] args) { new ClazzA(); } } class ClazzA { private ClazzB b = new ClazzB(); } class ClazzB { private ClazzA a = new ClazzA(); } \"},\"1117\":{\"t\":\"3.解决方案\"},\"1118\":{\"t\":\"整个解决循环依赖的核心内容，A 创建后填充属性时依赖 B，那么就去创建 B，在创建 B 开始填充时发现依赖于 A，但此时 A 这个半成品对象已经存放在缓存到singletonObjects 中了，所以 B 可以正常创建，在通过递归把 A 也创建完整了。\"},\"1119\":{\"t\":\"4.Spring解决\"},\"1120\":{\"t\":\"（1）一级缓存能解决吗？\"},\"1121\":{\"t\":\"img\"},\"1122\":{\"t\":\"其实只有一级缓存并不是不能解决循环依赖，就像我们自己做的例子一样。\"},\"1123\":{\"t\":\"但是在 Spring 中如果像我们例子里那么处理，就会变得非常麻烦，而且也可能会出现 NPE 问题。\"},\"1124\":{\"t\":\"所以如图按照 Spring 中代码处理的流程，我们去分析一级缓存这样存放成品 Bean 的流程中，是不能解决循环依赖的问题的。因为 A 的成品创建依赖于 B，B的成品创建又依赖于 A，当需要补全B的属性时 A 还是没有创建完，所以会出现死循环。\"},\"1125\":{\"t\":\"（2） 二级缓存能解决吗？\"},\"1126\":{\"t\":\"img\"},\"1127\":{\"t\":\"有了二级缓存其实这个事处理起来就容易了，一个缓存用于存放成品对象，另外一个缓存用于存放半成品对象。\"},\"1128\":{\"t\":\"A 在创建半成品对象后存放到缓存中，接下来补充 A 对象中依赖 B 的属性。\"},\"1129\":{\"t\":\"B 继续创建，创建的半成品同样放到缓存中，在补充对象的 A 属性时，可以从半成品缓存中获取，现在 B 就是一个完整对象了，而接下来像是递归操作一样 A 也是一个完整对象了。\"},\"1130\":{\"t\":\"（3） 三级缓存解决什么？\"},\"1131\":{\"t\":\"img\"},\"1132\":{\"t\":\"有了二级缓存都能解决 Spring 依赖了，怎么要有三级缓存呢。其实我们在前面分析源码时也提到过，三级缓存主要是解决 Spring AOP 的特性。AOP 本身就是对方法的增强，是 ObjectFactory<?> 类型的 lambda 表达式，而 Spring 的原则又不希望将此类类型的 Bean 前置创建，所以要存放到三级缓存中处理。\"},\"1133\":{\"t\":\"其实整体处理过程类似，唯独是 B 在填充属性 A 时，先查询成品缓存、再查半成品缓存，最后在看看有没有单例工程类在三级缓存中。最终获取到以后调用 getObject 方法返回代理引用或者原始引用。\"},\"1134\":{\"t\":\"至此也就解决了 Spring AOP 所带来的三级缓存问题。本章节涉及到的 AOP 依赖有源码例子，可以进行调试\"},\"1135\":{\"t\":\"（4）总结\"},\"1136\":{\"t\":\"回顾本文基本以实际操作的例子开始，引导大家对循环依赖有一个整体的认识，也对它的解决方案可以上手的例子，这样对后续的关于 Spring 对循环依赖的解决也就不会那么陌生了。\"},\"1137\":{\"t\":\"通篇全文下来大家也可以看到，三级缓存并不是非必须不可，只不过在满足 Spring 自身创建的原则下，是必须的。如果你可以下载 Spring 源码对这部分代码进行改动下，提前创建 AOP 对象保存到缓存中，那么二级缓存一样可以解决循环依赖问题。\"},\"1138\":{\"h\":\"Spring Boot自动配置原理\",\"a\":\"spring-boot自动配置原理\"},\"1139\":{\"t\":\"在Spring程序main方法中，添加@SpringBootApplication或者@EnableAutoConfiguration会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建的Spring容器中的bean。Spring Boot 通过@EnableAutoConfiguration开启自动装配，通过 SpringFactoriesLoader 最终加载META-INF/spring.factories中的自动配置类实现自动装配，自动配置类其实就是通过@Conditional按需加载的配置类，想要其生效必须引入spring-boot-starter-xxx包实现起步依赖。\"},\"1140\":{\"t\":\"第 1 步: 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true，可在 application.properties 或 application.yml 中设置 \"},\"1141\":{\"t\":\"img\"},\"1142\":{\"t\":\"第 2 步 ： 用于获取EnableAutoConfiguration注解中的 exclude 和 excludeName。 \"},\"1143\":{\"t\":\"img\"},\"1144\":{\"t\":\"第 3 步： 获取需要自动装配的所有配置类，读取META-INF/spring.factories： spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories \"},\"1145\":{\"t\":\"img\"},\"1146\":{\"t\":\"从下图可以看到这个文件的配置内容都被我们读取到了。XXXAutoConfiguration的作用就是按需加载组件。 不光是这个依赖下的META-INF/spring.factories被读取到，所有 Spring Boot Starter 下的META-INF/spring.factories都会被读取到。 \"},\"1147\":{\"t\":\"img\"},\"1148\":{\"t\":\"参考：https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html#autoconfigurationimportselector-加载自动装配类\"},\"1149\":{\"h\":\"Spring Boot 加载配置文件的优先级了解么？\",\"a\":\"spring-boot-加载配置文件的优先级了解么\"},\"1150\":{\"t\":\"项目启动后扫描顺序：\"},\"1151\":{\"t\":\"1）先去项目根目录找config文件夹下找配置文件件 2）再去根目录下找配置文件 3）去resources下找cofnig文件夹下找配置文件 4）去resources下找配置文件\"},\"1152\":{\"t\":\"在这里插入图片描述\"},\"1153\":{\"h\":\"如何使用 Spring Boot 实现全局异常处理？\",\"a\":\"如何使用-spring-boot-实现全局异常处理\"},\"1154\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485568&idx=2&sn=c5ba880fd0c5d82e39531fa42cb036ac&chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&token=1729829670&lang=zh_CN#rd\"},\"1155\":{\"t\":\"使用 @ControllerAdvice 和 @ExceptionHandler 处理全局异常\"},\"1156\":{\"t\":\"@ExceptionHandler 处理 Controller 级别的异常\"},\"1157\":{\"t\":\"例子：\"},\"1158\":{\"t\":\"CustomException： public class CustomException extends RuntimeException { private AppHttpCodeEnum appHttpCodeEnum; public CustomException(AppHttpCodeEnum appHttpCodeEnum){ this.appHttpCodeEnum = appHttpCodeEnum; } public AppHttpCodeEnum getAppHttpCodeEnum() { return appHttpCodeEnum; } } \"},\"1159\":{\"t\":\"ExceptionCatch： @ControllerAdvice //控制器增强类 @Slf4j public class ExceptionCatch { /** * 处理不可控异常 * @param e * @return */ @ExceptionHandler(Exception.class) @ResponseBody public ResponseResult exception(Exception e){ e.printStackTrace(); log.error(\\\"catch exception:{}\\\",e.getMessage()); return ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR); } /** * 处理可控异常 自定义异常 * @param e * @return */ @ExceptionHandler(CustomException.class) @ResponseBody public ResponseResult exception(CustomException e){ log.error(\\\"catch exception:{}\\\",e); return ResponseResult.errorResult(e.getAppHttpCodeEnum()); } } \"},\"1160\":{\"h\":\"核心配置文件\",\"a\":\"核心配置文件\"},\"1161\":{\"t\":\"SpringBoot的核心配置文件是application和bootstrap配置文件。\"},\"1162\":{\"t\":\"application配置文件这个容易理解，主要用于Spring Boot项目的自动化配置。\"},\"1163\":{\"t\":\"bootstrap配置文件有以下几个应用场景：\"},\"1164\":{\"t\":\"使用Spring Cloud Config配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；\"},\"1165\":{\"t\":\"一些固定的不能被覆盖的属性；\"},\"1166\":{\"t\":\"一些加密/解密的场景；\"},\"1167\":{\"h\":\"实现热部署的方式\",\"a\":\"实现热部署的方式\"},\"1168\":{\"t\":\"这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。\"},\"1169\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> </dependency> \"},\"1170\":{\"h\":\"监视器和监听器\",\"a\":\"监视器和监听器\"},\"1171\":{\"h\":\"监听器\",\"a\":\"监听器\"},\"1172\":{\"t\":\"监听器也叫listener，是servlet的监听器，可以用于监听web应用程序中某些对象的创建、销毁、增加、修改、删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化时，服务器自动调用监听器对象中的方法，常用于系统加载时进行信息初始化，统计在线人数和在线用户，统计网站的访问量。 配置监听器的方法：\"},\"1173\":{\"t\":\"通过@Component把监听器加入Spring容器中管理;\"},\"1174\":{\"t\":\"在application.properties中添加context.listener.classes配置;\"},\"1175\":{\"t\":\"在方法上加@EventListener注解;\"},\"1176\":{\"h\":\"监控器\",\"a\":\"监控器\"},\"1177\":{\"t\":\"actuator\"},\"1178\":{\"t\":\" 这是springboot程序的监控系统，可以实现健康检查，info信息等。在使用之前需要引入`spring-boot-starter-actuator`，并做简单的配置即可。 引入依赖并编写好配置之后，启动项目，访问http://localhost:8080/actuator \"},\"1179\":{\"t\":\"Spring Boot自带监控组件—Actuator，它可以帮助实现对程序内部运行情况的监控。Actuator轻松实现应用程序的监控治理，比如健康状况、审计、统计和HTTP追踪、Bean加载情况、环境变量、日志信息、线程信息等。 Actuator的核心是端点（Endpoint），它用来监视、提供应用程序的信息，Spring Boot提供的spring-boot-actuator组件中已经内置了非常多的Endpoint（health、info、beans、metrics、httptrace、shutdown等），每个端点都可以启用和禁用。\"},\"1180\":{\"h\":\"什么是Spring Boot Starter？有哪些常用的？\",\"a\":\"什么是spring-boot-starter-有哪些常用的\"},\"1181\":{\"t\":\"和自动配置一样，Spring Boot Starter的目的也是简化配置，而Spring Boot Starter解决的是依赖管理配置复杂的问题，有了它，当我需要构建一个Web应用程序时，不必再遍历所有的依赖包，一个一个地添加到项目的依赖管理中，而是只需要一个配置spring-boot-starter-web。\"},\"1182\":{\"t\":\"常用的：\"},\"1183\":{\"t\":\"spring-boot-starter-web - Web 和 RESTful 应用程序\"},\"1184\":{\"t\":\"spring-boot-starter-test - 单元测试和集成测试\"},\"1185\":{\"t\":\"spring-boot-starter-parent有什么作用？\"},\"1186\":{\"t\":\"我们知道，新建一个SpringBoot项目，默认都是有parent的，这个parent就是spring-boot-starter-parent，spring-boot-starter-parent主要有如下作用：\"},\"1187\":{\"t\":\"定义了Java编译版本\"},\"1188\":{\"t\":\"使用UTF-8格式编码\"},\"1189\":{\"t\":\"继承自spring-boor-dependencies，这里面定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号\"},\"1190\":{\"t\":\"执行打包操作的配置\"},\"1191\":{\"t\":\"自动化的资源过滤\"},\"1192\":{\"t\":\"自动化的插件配置\"},\"1193\":{\"h\":\"Spring Boot四大核心组件\",\"a\":\"spring-boot四大核心组件\"},\"1194\":{\"t\":\"四大组件分别是：starter， autoconfigure, CLI 以及actuator。\"},\"1195\":{\"t\":\"autoconfigure在我们的开发中并不会被感知，因为它是存在与我们的starter中的。所以我们的每个starter都是依赖autoconfigure的。\"},\"1196\":{\"t\":\"Spring Boot CLI是一个命令行使用Spring Boot的客户端工具；主要功能如下：\"},\"1197\":{\"t\":\"运行groovy脚本 => 官网2.1\"},\"1198\":{\"t\":\"打包groovy文件到jar => 官网2.3\"},\"1199\":{\"t\":\"初始化Spring Boot项目 => 官网2.4\"},\"1200\":{\"t\":\"其他\"},\"1201\":{\"t\":\"actuator是Spring Boot的监控插件，本身提供了很多接口可以获取当前项目的各项运行状态指标。\"},\"1202\":{\"h\":\"MyBatis Dao接口原理\",\"a\":\"mybatis-dao接口原理\"},\"1203\":{\"h\":\"MyBatis分页原理\",\"a\":\"mybatis分页原理\"},\"1204\":{\"t\":\"img\"},\"1205\":{\"t\":\"总结一下：\"},\"1206\":{\"t\":\"通过page对象作为分页依据\"},\"1207\":{\"t\":\"通过count来进行查询总条数的限制\"},\"1208\":{\"t\":\"对原sql通过limit来进行分页的效果\"},\"1209\":{\"t\":\"参考：https://blog.csdn.net/xiaolegeaizy/article/details/108461284\"},\"1210\":{\"h\":\"MyBatis 是如何进行分页的？分页插件的原理是什么？\",\"a\":\"mybatis-是如何进行分页的-分页插件的原理是什么\"},\"1211\":{\"t\":\"答：\"},\"1212\":{\"t\":\"(1) MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；\"},\"1213\":{\"t\":\"(2) 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能；\"},\"1214\":{\"t\":\"(3) 也可以使用分页插件来完成物理分页。\"},\"1215\":{\"t\":\"分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。\"},\"1216\":{\"t\":\"举例： select _ from student ，拦截 sql 后重写为： select t._ from （select \\\\* from student）t limit 0，10 \"},\"1217\":{\"t\":\"MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 invoke() 方法，当然，只会拦截那些指定需要拦截的方法。\"},\"1218\":{\"t\":\"实现 MyBatis 的 Interceptor 接口并复写 intercept() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，在配置文件中配置编写的插件。\"},\"1219\":{\"h\":\"MyBatis缓存机制(一级缓存、二级缓存、三级缓存)\",\"a\":\"mybatis缓存机制-一级缓存、二级缓存、三级缓存\"},\"1220\":{\"h\":\"一级缓存：\",\"a\":\"一级缓存\"},\"1221\":{\"t\":\"作用域是同一个 SqlSession，在同一个 sqlSession 中两次执行相同的 sql 语句， 第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取,从而提高查询效率。当一个 sqlSession 结束后该 sqlSession 中的 一级缓存也就不存在了。Mybatis 默认开启一级缓存。 一级缓存内部存储使用一个 HashMap，key 为 hashCode+sqlId+Sql 语句。value 为 从查询出来映射生成的 java 对象 sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。\"},\"1222\":{\"h\":\"二级缓存：\",\"a\":\"二级缓存\"},\"1223\":{\"t\":\"是多个 SqlSession 共享的，其作用域是 mapper 的同一个 namespace，不同 的 sqlSession 两次执行相同 namespace 下的 sql 语句且向 sql 中传递参数也相同即最终执行 相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从 缓存中获取数据将不再从数据库查询，从而提高查询效率。Mybatis 默认没有开启二级缓存 需要在 setting 全局参数中配置开启二级缓存。\"},\"1224\":{\"t\":\"在yml中添加以下代码：\"},\"1225\":{\"t\":\"在这里插入图片描述\"},\"1226\":{\"t\":\"然后在对应的mapper.xml里面加入配置：\"},\"1227\":{\"t\":\"在这里插入图片描述\"},\"1228\":{\"t\":\"注意：开启二级缓存后，对应的pojo一定要实现Serializable，否则在序列化的时候会报错。 readOnly：是否只读 。 值为true时，mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为了加快获取速度，直接会将数据在缓存中的引用交给用户，不安全，但速度快。 值为false时，mybatis觉得获取的数据可能会被修改，mybatis会利用序列化&反序列化的技术克隆一份新的数据给你，安全，但速度慢。\"},\"1229\":{\"h\":\"三级缓存：\",\"a\":\"三级缓存\"},\"1230\":{\"t\":\"Mybatis 的一级缓存与二级缓存 只适用于单体项目，在分布式服务或者微服务架构下 都会出现数据不一致问题。所以Mybatis 为我们提供了自定义缓存 我们可以集成很多三方中间件来做缓存 这里就那Redis来说一下。\"},\"1231\":{\"t\":\"在这里插入图片描述\"},\"1232\":{\"h\":\"总结：\",\"a\":\"总结\"},\"1233\":{\"t\":\"一级缓存的作用域是一个sqlsession内；二级缓存作用域是针对mapper进行缓存；\"},\"1234\":{\"t\":\"一级缓存是默认开启的；二级缓存需要手动配置；\"},\"1235\":{\"t\":\"一级缓存sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。sqlSession.close()后一级缓存也没有了。但是销毁sqlSession后会将里面的缓存存到二级缓存中；\"},\"1236\":{\"t\":\"二级缓存cache中readonly属性如果为false 那么相应的pojo类必须实现Serializable接口 并且其缓存查询到的对象都是通过序列化或者反序列化克隆的，所以对象之间两两不相等；\"},\"1237\":{\"t\":\"二级缓存的生命周期和应用同步，它是用来解决一级缓存不能跨会话共享数据的问题，范围是namespace级别的，可以被多个会话共享(只要是同一个接口的相同方法，都可以进行共享)。\"},\"1238\":{\"t\":\"只要没有显式地设置cacheEnabled为false，都会使用CachingExector装饰基本的执行器(SIMPLE、REUSE、BATCH)。 二级缓存总是默认开启的，但是每个Mapper的二级开关是默认关闭的。\"},\"1239\":{\"t\":\"二级缓存进行增删改操作也会刷新二级缓存，导致二级缓存失效；\"},\"1240\":{\"t\":\"二级缓存的执行流程：\"},\"1241\":{\"t\":\"在这里插入图片描述\"},\"1242\":{\"t\":\"参考：https://blog.csdn.net/weixin_45161172/article/details/129526131\"},\"1243\":{\"h\":\"Kafka\"},\"1244\":{\"h\":\"数据保存的策略\",\"a\":\"数据保存的策略\"},\"1245\":{\"t\":\"kafka 有两种数据保存策略:\"},\"1246\":{\"t\":\"1、按照过期时间保留\"},\"1247\":{\"t\":\"2、按照存储的消息大小保留\"},\"1248\":{\"t\":\"Kafka Broker默认的消息保留策略是：要么保留一定时间，要么保留到消息达到一定大小的字节数。\"},\"1249\":{\"t\":\"当消息达到设置的条件上限时，旧消息就会过期并被删除，所以，在任何时刻，可用消息的总量都不会超过配置参数所指定的大小。\"},\"1250\":{\"t\":\"topic可以配置自己的保留策略，可以将消息保留到不再使用他们为止。\"},\"1251\":{\"t\":\"因为在一个大文件里查找和删除消息是很费时的事，也容易出错，所以，分区被划分为若干个片段。默认情况下，每个片段包含1G或者一周的数据，以较小的那个为准。在broker往leader分区写入消息时，如果达到片段上限，就关闭当前文件，并打开一个新文件。当前正在写入数据的片段叫活跃片段。当所有片段都被写满时，会清除下一个分区片段的数据，如果配置的是7个片段，每天打开一个新片段，就会删除一个最老的片段，循环使用所有片段。\"},\"1252\":{\"t\":\"kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？ 这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。\"},\"1253\":{\"h\":\"分区策略\",\"a\":\"分区策略\"},\"1254\":{\"h\":\"生产者：\",\"a\":\"生产者\"},\"1255\":{\"t\":\"为什么要分区\"},\"1256\":{\"t\":\"多Partition分布式存储，利于集群数据的均衡。\"},\"1257\":{\"t\":\"并发读写，加快读写速度。\"},\"1258\":{\"t\":\"加快数据恢复的速率：当某台机器挂了，每个Topic仅需恢复一部分的数据，多机器并发。\"},\"1259\":{\"t\":\"分区的原则\"},\"1260\":{\"t\":\"指明partition的情况下，使用指定的partition；\"},\"1261\":{\"t\":\"没有指明partition，但是有key的情况下，将key的hash值与topic的partition数进行取余得到partition值；\"},\"1262\":{\"t\":\"既没有指定partition，也没有key的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与topic可用的partition数取余得到partition值，也就是常说的round-robin算法。\"},\"1263\":{\"t\":\"public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) { List<PartitionInfo> partitions = cluster.partitionsForTopic(topic); int numPartitions = partitions.size(); if (keyBytes == null) { //key为空时，获取一个自增的计数，然后对分区做取模得到分区编号 int nextValue = nextValue(topic); List<PartitionInfo> availablePartitions = cluster.availablePartitionsForTopic(topic); if (availablePartitions.size() > 0) { int part = Utils.toPositive(nextValue) % availablePartitions.size(); return availablePartitions.get(part).partition(); } else { // no partitions are available, give a non-available partition return Utils.toPositive(nextValue) % numPartitions; } } else { // hash the keyBytes to choose a partition // key不为空时，通过key的hash对分区取模（疑问：为什么这里不像上面那样，使用availablePartitions呢？） // 根据《Kafka权威指南》Page45理解：为了保证相同的键，总是能路由到固定的分区，如果使用可用分区，那么因为分区数变化，会导致相同的key，路由到不同分区 // 所以如果要使用key来映射分区，最好在创建主题的时候就把分区规划好 return Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions; } } private int nextValue(String topic) { //为每个topic维护了一个AtomicInteger对象，每次获取时+1 AtomicInteger counter = topicCounterMap.get(topic); if (null == counter) { counter = new AtomicInteger(ThreadLocalRandom.current().nextInt()); AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter); if (currentCounter != null) { counter = currentCounter; } } return counter.getAndIncrement(); } \"},\"1264\":{\"h\":\"消费者：\",\"a\":\"消费者\"},\"1265\":{\"t\":\"分区分配策略\"},\"1266\":{\"t\":\"一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及到partition的分配问题，即确定哪个partition由哪个consumer来消费。Kafka提供了3种消费者分区分配策略：RangeAssigor、RoundRobinAssignor、StickyAssignor。\"},\"1267\":{\"t\":\"PartitionAssignor接口用于用户定义实现分区分配算法，以实现Consumer之间的分区分配。消费组的成员订阅它们感兴趣的Topic并将这种订阅关系传递给作为订阅组协调者的Broker。协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者。Kafka默认采用RangeAssignor的分配算法。\"},\"1268\":{\"t\":\"RangeAssignor\"},\"1269\":{\"t\":\"RangeAssignor对每个Topic进行独立的分区分配。对于每一个Topic，首先对分区按照分区ID进行排序，然后订阅这个Topic的消费组的消费者再进行排序，之后尽量均衡的将分区分配给消费者。这里只能是尽量均衡，因为分区数可能无法被消费者数量整除，那么有一些消费者就会多分配到一些分区。分配示意图如下：\"},\"1270\":{\"t\":\"f4108e1816b3087f38b546372e214958.png\"},\"1271\":{\"t\":\"分区分配的算法如下：\"},\"1272\":{\"t\":\"@Override public Map<String, List<TopicPartition>> assign(Map<String, Integer> partitionsPerTopic, Map<String, Subscription> subscriptions) { Map<String, List<String>> consumersPerTopic = consumersPerTopic(subscriptions); Map<String, List<TopicPartition>> assignment = new HashMap<>(); for (String memberId : subscriptions.keySet()) assignment.put(memberId, new ArrayList<TopicPartition>()); //for循环对订阅的多个topic分别进行处理 for (Map.Entry<String, List<String>> topicEntry : consumersPerTopic.entrySet()) { String topic = topicEntry.getKey(); List<String> consumersForTopic = topicEntry.getValue(); Integer numPartitionsForTopic = partitionsPerTopic.get(topic); if (numPartitionsForTopic == null) continue; //对消费者进行排序 Collections.sort(consumersForTopic); //计算平均每个消费者分配的分区数 int numPartitionsPerConsumer = numPartitionsForTopic / consumersForTopic.size(); //计算平均分配后多出的分区数 int consumersWithExtraPartition = numPartitionsForTopic % consumersForTopic.size(); List<TopicPartition> partitions = AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic); for (int i = 0, n = consumersForTopic.size(); i < n; i++) { //计算第i个消费者，分配分区的起始位置 int start = numPartitionsPerConsumer * i + Math.min(i, consumersWithExtraPartition); //计算第i个消费者，分配到的分区数量 int length = numPartitionsPerConsumer + (i + 1 > consumersWithExtraPartition ? 0 : 1); assignment.get(consumersForTopic.get(i)).addAll(partitions.subList(start, start + length)); } } return assignment; } \"},\"1273\":{\"t\":\"这种分配方式明显的一个问题是随着消费者订阅的Topic的数量的增加，不均衡的问题会越来越严重，比如上图中4个分区3个消费者的场景，C0会多分配一个分区。如果此时再订阅一个分区数为4的Topic，那么C0又会比C1、C2多分配一个分区，这样C0总共就比C1、C2多分配两个分区了，而且随着Topic的增加，这个情况会越来越严重。分配结果：\"},\"1274\":{\"t\":\"eff9adb5a086691e56b5d68bec68ffcf.png\"},\"1275\":{\"t\":\"订阅2个Topic，每个Topic4个分区，共3个Consumer\"},\"1276\":{\"t\":\"C0：[T0P0，T0P1，T1P0，T1P1]\"},\"1277\":{\"t\":\"C1：[T0P2，T1P2]\"},\"1278\":{\"t\":\"C2：[T0P3，T1P3]\"},\"1279\":{\"t\":\"RoundRobinAssignor\"},\"1280\":{\"t\":\"RoundRobinAssignor的分配策略是将消费组内订阅的所有Topic的分区及所有消费者进行排序后尽量均衡的分配（RangeAssignor是针对单个Topic的分区进行排序分配的）。如果消费组内，消费者订阅的Topic列表是相同的（每个消费者都订阅了相同的Topic），那么分配结果是尽量均衡的（消费者之间分配到的分区数的差值不会超过1）。如果订阅的Topic列表是不同的，那么分配结果是不保证“尽量均衡”的，因为某些消费者不参与一些Topic的分配。\"},\"1281\":{\"t\":\"51b27d00cf50d9aca86e0934ab42a565.png\"},\"1282\":{\"t\":\"以上两个topic的情况，相比于之前RangeAssignor的分配策略，可以使分区分配的更均衡。不过考虑这种情况，假设有三个消费者分别为C0、C1、C2，有3个Topic T0、T1、T2，分别拥有1、2、3个分区，并且C0订阅T0，C1订阅T0和T1，C2订阅T0、T1、T2，那么RoundRobinAssignor的分配结果如下：\"},\"1283\":{\"t\":\"4e161a06a0afcae8d2c06603d676de4e.png\"},\"1284\":{\"t\":\"看上去分配已经尽量的保证均衡了，不过可以发现C2承担了4个分区的消费而C1订阅了T1，是不是把T1P1交给C1消费能更加的均衡呢？\"},\"1285\":{\"t\":\"StickyAssignor\"},\"1286\":{\"t\":\"StickyAssignor分区分配算法，目的是在执行一次新的分配时，能在上一次分配的结果的基础上，尽量少的调整分区分配的变动，节省因分区分配变化带来的开销。Sticky是“粘性的”，可以理解为分配结果是带“粘性的”——每一次分配变更相对上一次分配做最少的变动。其目标有两点：\"},\"1287\":{\"t\":\"分区的分配尽量的均衡。\"},\"1288\":{\"t\":\"每一次重分配的结果尽量与上一次分配结果保持一致。\"},\"1289\":{\"t\":\"当这两个目标发生冲突时，优先保证第一个目标。第一个目标是每个分配算法都尽量尝试去完成的，而第二个目标才真正体现出StickyAssignor特性的。\"},\"1290\":{\"t\":\"StickyAssignor算法比较复杂，下面举例来说明分配的效果（对比RoundRobinAssignor），前提条件：\"},\"1291\":{\"t\":\"有4个Topic：T0、T1、T2、T3，每个Topic有2个分区。\"},\"1292\":{\"t\":\"有3个Consumer：C0、C1、C2，所有Consumer都订阅了这4个分区。\"},\"1293\":{\"t\":\"eb5597ed0b81b03c762e54ff3f909492.png\"},\"1294\":{\"t\":\"上面红色的箭头代表的是有变动的分区分配，可以看出，StickyAssignor的分配策略，变动较小。\"},\"1295\":{\"t\":\"参考：https://blog.csdn.net/easylife206/article/details/124580641?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-124580641-blog-124349832.235^v28^pc_relevant_t0_download&spm=1001.2101.3001.4242.3&utm_relevant_index=7\"},\"1296\":{\"h\":\"kafka如何保证消息不被重复消费\",\"a\":\"kafka如何保证消息不被重复消费\"},\"1297\":{\"h\":\"原因\",\"a\":\"原因\"},\"1298\":{\"t\":\"（1）kafka有个offset的概念，当每个消息被写进去后，都有一个offset，代表他的序号，然后consumer消费该数据之后，隔一段时间，会把自己消费过的消息的offset提交一下，代表我已经消费过了。下次我要是重启，就会继续从上次消费到的offset来继续消费。但是当我们直接kill进程了，再重启。这会导致consumer有些消息处理了，但是没来得及提交offset。等重启之后，少数消息就会再次消费一次 （2）在Kafka中有一个Partition Balance机制，就是把多个Partition均衡的分配给多个消费者。消费端会从分配到的Partition里面去消费消息，如果消费者在默认的5分钟内没有处理完这一批消息。就会触发Kafka的Rebalance机制，从而导致offset自动提交失败。而Rebalance之后，消费者还是会从之前没提交的offset位置开始消费，从而导致消息重复消费。\"},\"1299\":{\"h\":\"解决方案\",\"a\":\"解决方案\"},\"1300\":{\"t\":\"开启kafka本身存在的幂等性：\"},\"1301\":{\"t\":\"在这里插入图片描述\"},\"1302\":{\"t\":\"注： 添加唯一ID，类似于数据库的主键，用于唯一标记一个消息。 ProducerID：#在每个新的Producer初始化时，会被分配一个唯一的PID SequenceNumber：#对于每个PID发送数据的每个Topic都对应一个从0开始单调递增的SN值。\"},\"1303\":{\"t\":\"将获取的唯一id存表，（利用mySQl的唯一键约束，或者redis天然的set结构）\"},\"1304\":{\"t\":\"参考：https://blog.csdn.net/m0_51167384/article/details/128106266?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&utm_relevant_index=8&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2Mjc4NDAvYXJ0aWNsZS9kZXRhaWxzLzc2NDM1Mzg1P3NwbT0xMDAxLjIxMDEuMzAwMS42NjUwLjEmdXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RVJhdGUtMS03NjQzNTM4NS1ibG9nLTExNzQxOTA1OC4yMzUlNUV2MjglNUVwY19yZWxldmFudF90MF9kb3dubG9hZCZkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VSYXRlLTEtNzY0MzUzODUtYmxvZy0xMTc0MTkwNTguMjM1JTVFdjI4JTVFcGNfcmVsZXZhbnRfdDBfZG93bmxvYWQmdXRtX3JlbGV2YW50X2luZGV4PTI%3D\"},\"1305\":{\"h\":\"如何保证消息的顺序性?\",\"a\":\"如何保证消息的顺序性\"},\"1306\":{\"h\":\"为什么要保证顺序？\",\"a\":\"为什么要保证顺序\"},\"1307\":{\"t\":\"消息队列中的若干消息如果是对同一个数据进行操作, 这些操作具有前后关系, 必须要按前后的顺序执行, 否则就会造成数据异常.\"},\"1308\":{\"h\":\"出现顺序错乱的场景：\",\"a\":\"出现顺序错乱的场景\"},\"1309\":{\"t\":\"第一种情况: 一个queue, 有多个consumer去消费, 这样就会造成顺序的错误, consumer从MQ里面读取数据是有序的, 但是每个consumer的执行时间是不固定的, 无法保证先读到消息的consumer一定先完成操作, 这样就会出现消息并没有按照顺序执行, 造成数据顺序错误。 \"},\"1310\":{\"t\":\"img\"},\"1311\":{\"t\":\"第二种情况: 一个queue对应一个consumer, 但是consumer里面进行了多线程消费, 这样也会造成消息消费顺序错误。 \"},\"1312\":{\"t\":\"img\"},\"1313\":{\"h\":\"如何保证消息的消费顺序？\",\"a\":\"如何保证消息的消费顺序\"},\"1314\":{\"t\":\"第一种方案: 拆分多个queue, 每一个queue一个consumer, 就是多一些queue而已, 确实是麻烦点; 这样也会造成吞吐量下降, 可以在消费者内部采用多线程的方式去消费。 \"},\"1315\":{\"t\":\"img\"},\"1316\":{\"t\":\"第二种方案: 就是一个queue对应一个consumer, 然后这个consumer内部用内存队列做排队, 然后分发给底层不同的worker来处理。 \"},\"1317\":{\"t\":\"img\"},\"1318\":{\"t\":\"参考：https://blog.csdn.net/qq_44901983/article/details/123416498\"},\"1319\":{\"h\":\"Linux常用命令\"},\"1320\":{\"h\":\"常用的命令\",\"a\":\"常用的命令\"},\"1321\":{\"h\":\"内核\",\"a\":\"内核\"},\"1322\":{\"h\":\"基本组件\",\"a\":\"基本组件\"},\"1323\":{\"h\":\"进程间通信方式\",\"a\":\"进程间通信方式\"},\"1324\":{\"h\":\"目录结构\",\"a\":\"目录结构\"},\"1325\":{\"t\":\"Linux 使用一种称为目录树的层次结构来组织文件和目录。目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。每个目录可以包含文件和其他子目录。结构层次鲜明，就像一棵倒立的树。\"},\"1326\":{\"h\":\"内存管理\"},\"1327\":{\"h\":\"1.虚拟内存管理\",\"a\":\"_1-虚拟内存管理\"},\"1328\":{\"h\":\"1.1局部性原理\",\"a\":\"_1-1局部性原理\"},\"1329\":{\"t\":\"在了解这部分知识之前，我要先告诉大家一个常见的局部性原理：\"},\"1330\":{\"t\":\"相关信息\"},\"1331\":{\"t\":\"程序局部性原理表现为：时间局部性和空间局部性。时间局部性是指如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某块数据被访问，则不久之后该数据可能再次被访问。空间局部性是指一旦程序访问了某个存储单元，则不久之后，其附近的存储单元也将被访问。\"},\"1332\":{\"t\":\"说白了就是一个变量在程序运行过程中，如果被引用过一次，那后续很有可能会再被引用到；一个变量被访问到过后，这个变量所在的位置附近的位置很有可能在程序后续运行中被访问到。\"},\"1333\":{\"t\":\"下面我们通过一段代码来看看局部性原理：\"},\"1334\":{\"t\":\"public int sum(int[] array) { int sum = 0; for (int i = 0; i < array.length; i++) { sum = sum + array[i]; } return sum; } \"},\"1335\":{\"t\":\"从上面的这段代码来看，就是一个很简单的数组元素求和，这里我们主要看 sum 和 array 两个变量，我们可以看到 sum 在每次循环中都会用到，另外它只是一个简单变量，所以我们可以看到，sum 是符合我们上面提到的时间局部性，再访问一次后还会被继续访问到，但是它不存在我们所说的空间局部性了。\"},\"1336\":{\"t\":\"相反的，array 数组中的每个元素只访问一次，另外数组底层的存储是连续的，所以 array 变量符合我们上面提到的空间局部性，但是不符合时间局部性。\"},\"1337\":{\"h\":\"2.2为什么需要虚拟内存？\",\"a\":\"_2-2为什么需要虚拟内存\"},\"1338\":{\"t\":\"image.png\"},\"1339\":{\"h\":\"操作系统\"},\"1340\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1341\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1342\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1343\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1344\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1345\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1346\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1347\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1348\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1349\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1350\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1351\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1352\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1353\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1354\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1355\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1356\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1357\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1358\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1359\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1360\":{\"t\":\"锁：加锁、解锁操作；\"},\"1361\":{\"t\":\"信号量：P、V 操作；\"},\"1362\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1363\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1364\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1365\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1366\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1367\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1368\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1369\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1370\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1371\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1372\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1373\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1374\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1375\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1376\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1377\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1378\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1379\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1380\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1381\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1382\":{\"t\":\"img\"},\"1383\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1384\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1385\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1386\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1387\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1388\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1389\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1390\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1391\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1392\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1393\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1394\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1395\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1396\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1397\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1398\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1399\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1400\":{\"t\":\"mmap + write\"},\"1401\":{\"t\":\"sendfile\"},\"1402\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1403\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1404\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1405\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1406\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1407\":{\"t\":\"img\"},\"1408\":{\"t\":\"具体过程如下：\"},\"1409\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1410\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1411\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1412\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1413\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1414\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1415\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1416\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1417\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1418\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1419\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1420\":{\"t\":\"img\"},\"1421\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1422\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1423\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1424\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1425\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1426\":{\"t\":\"img\"},\"1427\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1428\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1429\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1430\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1431\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1432\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1433\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1434\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1435\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1436\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1437\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1438\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1439\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1440\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1441\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1442\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1443\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1444\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1445\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1446\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1447\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1448\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1449\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1450\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1451\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1452\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1453\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1454\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1455\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1456\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1457\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1458\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1459\":{\"t\":\"img\"},\"1460\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1461\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1462\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1463\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1464\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1465\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1466\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1467\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1468\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1469\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1470\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1471\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1472\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1473\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1474\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1475\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1476\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1477\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1478\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1479\":{\"t\":\"img\"},\"1480\":{\"t\":\"详细说一下这个方案：\"},\"1481\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1482\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1483\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1484\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1485\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1486\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1487\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1488\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1489\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1490\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1491\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1492\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1493\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1494\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1495\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1496\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1497\":{\"t\":\"img\"},\"1498\":{\"t\":\"方案详细说明如下：\"},\"1499\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1500\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1501\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1502\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1503\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1504\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1505\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1506\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1507\":{\"h\":\"操作系统\"},\"1508\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1509\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1510\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1511\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1512\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1513\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1514\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1515\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1516\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1517\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1518\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1519\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1520\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1521\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1522\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1523\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1524\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1525\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1526\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1527\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1528\":{\"t\":\"锁：加锁、解锁操作；\"},\"1529\":{\"t\":\"信号量：P、V 操作；\"},\"1530\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1531\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1532\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1533\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1534\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1535\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1536\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1537\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1538\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1539\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1540\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1541\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1542\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1543\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1544\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1545\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1546\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1547\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1548\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1549\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1550\":{\"t\":\"img\"},\"1551\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1552\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1553\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1554\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1555\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1556\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1557\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1558\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1559\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1560\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1561\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1562\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1563\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1564\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1565\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1566\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1567\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1568\":{\"t\":\"mmap + write\"},\"1569\":{\"t\":\"sendfile\"},\"1570\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1571\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1572\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1573\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1574\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1575\":{\"t\":\"img\"},\"1576\":{\"t\":\"具体过程如下：\"},\"1577\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1578\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1579\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1580\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1581\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1582\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1583\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1584\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1585\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1586\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1587\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1588\":{\"t\":\"img\"},\"1589\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1590\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1591\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1592\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1593\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1594\":{\"t\":\"img\"},\"1595\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1596\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1597\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1598\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1599\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1600\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1601\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1602\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1603\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1604\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1605\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1606\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1607\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1608\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1609\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1610\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1611\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1612\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1613\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1614\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1615\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1616\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1617\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1618\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1619\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1620\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1621\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1622\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1623\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1624\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1625\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1626\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1627\":{\"t\":\"img\"},\"1628\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1629\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1630\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1631\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1632\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1633\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1634\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1635\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1636\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1637\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1638\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1639\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1640\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1641\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1642\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1643\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1644\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1645\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1646\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1647\":{\"t\":\"img\"},\"1648\":{\"t\":\"详细说一下这个方案：\"},\"1649\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1650\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1651\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1652\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1653\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1654\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1655\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1656\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1657\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1658\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1659\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1660\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1661\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1662\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1663\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1664\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1665\":{\"t\":\"img\"},\"1666\":{\"t\":\"方案详细说明如下：\"},\"1667\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1668\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1669\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1670\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1671\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1672\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1673\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1674\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1675\":{\"h\":\"操作系统\"},\"1676\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1677\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1678\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1679\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1680\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1681\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1682\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1683\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1684\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1685\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1686\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1687\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1688\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1689\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1690\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1691\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1692\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1693\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1694\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1695\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1696\":{\"t\":\"锁：加锁、解锁操作；\"},\"1697\":{\"t\":\"信号量：P、V 操作；\"},\"1698\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1699\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1700\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1701\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1702\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1703\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1704\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1705\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1706\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1707\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1708\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1709\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1710\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1711\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1712\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1713\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1714\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1715\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1716\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1717\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1718\":{\"t\":\"img\"},\"1719\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1720\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1721\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1722\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1723\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1724\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1725\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1726\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1727\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1728\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1729\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1730\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1731\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1732\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1733\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1734\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1735\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1736\":{\"t\":\"mmap + write\"},\"1737\":{\"t\":\"sendfile\"},\"1738\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1739\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1740\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1741\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1742\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1743\":{\"t\":\"img\"},\"1744\":{\"t\":\"具体过程如下：\"},\"1745\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1746\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1747\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1748\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1749\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1750\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1751\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1752\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1753\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1754\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1755\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1756\":{\"t\":\"img\"},\"1757\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1758\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1759\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1760\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1761\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1762\":{\"t\":\"img\"},\"1763\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1764\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1765\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1766\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1767\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1768\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1769\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1770\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1771\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1772\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1773\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1774\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1775\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1776\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1777\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1778\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1779\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1780\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1781\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1782\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1783\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1784\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1785\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1786\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1787\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1788\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1789\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1790\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1791\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1792\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1793\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1794\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1795\":{\"t\":\"img\"},\"1796\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1797\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1798\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1799\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1800\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1801\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1802\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1803\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1804\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1805\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1806\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1807\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1808\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1809\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1810\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1811\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1812\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1813\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1814\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1815\":{\"t\":\"img\"},\"1816\":{\"t\":\"详细说一下这个方案：\"},\"1817\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1818\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1819\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1820\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1821\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1822\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1823\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1824\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1825\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1826\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1827\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1828\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1829\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1830\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1831\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1832\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1833\":{\"t\":\"img\"},\"1834\":{\"t\":\"方案详细说明如下：\"},\"1835\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1836\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1837\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1838\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1839\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1840\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1841\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1842\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1843\":{\"h\":\"操作系统\"},\"1844\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1845\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1846\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1847\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1848\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1849\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1850\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1851\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1852\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1853\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1854\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1855\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1856\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1857\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1858\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1859\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1860\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1861\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1862\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1863\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1864\":{\"t\":\"锁：加锁、解锁操作；\"},\"1865\":{\"t\":\"信号量：P、V 操作；\"},\"1866\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1867\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1868\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1869\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1870\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1871\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1872\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1873\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1874\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1875\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1876\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1877\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1878\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1879\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1880\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1881\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1882\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1883\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1884\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1885\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1886\":{\"t\":\"img\"},\"1887\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1888\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1889\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1890\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1891\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1892\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1893\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1894\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1895\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1896\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1897\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1898\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1899\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1900\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1901\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1902\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1903\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1904\":{\"t\":\"mmap + write\"},\"1905\":{\"t\":\"sendfile\"},\"1906\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1907\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1908\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1909\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1910\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1911\":{\"t\":\"img\"},\"1912\":{\"t\":\"具体过程如下：\"},\"1913\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1914\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1915\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1916\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1917\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1918\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1919\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1920\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1921\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1922\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1923\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1924\":{\"t\":\"img\"},\"1925\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1926\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1927\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1928\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1929\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1930\":{\"t\":\"img\"},\"1931\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1932\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1933\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1934\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1935\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1936\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1937\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1938\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1939\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1940\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1941\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1942\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1943\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1944\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1945\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1946\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1947\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1948\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1949\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1950\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1951\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1952\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1953\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1954\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1955\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1956\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1957\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1958\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1959\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1960\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1961\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1962\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1963\":{\"t\":\"img\"},\"1964\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1965\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1966\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1967\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1968\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1969\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1970\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1971\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1972\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1973\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1974\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1975\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1976\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1977\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1978\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1979\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1980\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1981\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1982\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1983\":{\"t\":\"img\"},\"1984\":{\"t\":\"详细说一下这个方案：\"},\"1985\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1986\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1987\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1988\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1989\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1990\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1991\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1992\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1993\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1994\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1995\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1996\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1997\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1998\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1999\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"2000\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"2001\":{\"t\":\"img\"},\"2002\":{\"t\":\"方案详细说明如下：\"},\"2003\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"2004\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"2005\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"2006\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"2007\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"2008\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"2009\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"2010\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"2011\":{\"h\":\"Docker\"},\"2012\":{\"h\":\"Docker\",\"a\":\"docker\"},\"2013\":{\"h\":\"什么是 Docker?\",\"a\":\"什么是-docker\"},\"2014\":{\"t\":\"Docker 是世界领先的软件容器平台。\"},\"2015\":{\"t\":\"Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 UnionFS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\"},\"2016\":{\"t\":\"Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。\"},\"2017\":{\"t\":\"用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\"},\"2018\":{\"h\":\"Docker的架构\",\"a\":\"docker的架构\"},\"2019\":{\"t\":\"Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，模块各司其职。下图是它的总体架构图：\"},\"2020\":{\"t\":\"img\"},\"2021\":{\"t\":\"用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。\"},\"2022\":{\"t\":\"Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。\"},\"2023\":{\"t\":\"Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。\"},\"2024\":{\"t\":\"Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graphdriver 将下载镜像以 Graph 的形式存储。\"},\"2025\":{\"t\":\"当需要为 Docker 创建网络环境时，通过网络管理驱动 Networkdriver 创建并配置 Docker容器网络环境。\"},\"2026\":{\"t\":\"当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。\"},\"2027\":{\"t\":\"Libcontainer 是一项独立的容器管理包，Networkdriver 以及 Execdriver 都是通过 Libcontainer 来实现具体对容器进行的操作。\"},\"2028\":{\"h\":\"镜像和容器的相关操作\",\"a\":\"镜像和容器的相关操作\"},\"2029\":{\"h\":\"Spring Cloud\"},\"2030\":{\"h\":\"Spring Cloud\",\"a\":\"spring-cloud\"},\"2031\":{\"h\":\"什么是Spring Cloud？\",\"a\":\"什么是spring-cloud\"},\"2032\":{\"t\":\"Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。\"},\"2033\":{\"h\":\"微服务的概念\",\"a\":\"微服务的概念\"},\"2034\":{\"t\":\"分布式，多个模块，每一个模块都是一个单独的系统。\"},\"2035\":{\"t\":\"以前所有的代码都放在同一个工程中、部署在同一个服务器、同一项目的不同模块不同功能互相抢占资源，微服务就是将工程根据不同的业务规则拆分成微服务，部署在不同的服务器上，服务之间相互调用，java中有的微服务有dubbo(只能用来做微服务)、springcloud( 提供了服务的发现、断路器等)。\"},\"2036\":{\"t\":\"微服务的特点：\"},\"2037\":{\"t\":\"按业务划分为一个独立运行的程序，即服务单元\"},\"2038\":{\"t\":\"服务之间通过HTTP协议相互通信\"},\"2039\":{\"t\":\"自动化部署\"},\"2040\":{\"t\":\"可以用不同的编程语言\"},\"2041\":{\"t\":\"可以用不同的存储技术\"},\"2042\":{\"t\":\"服务集中化管理\"},\"2043\":{\"t\":\"微服务是一个分布式系统\"},\"2044\":{\"t\":\"微服务的优势\"},\"2045\":{\"t\":\"将一个复杂的业务拆分为若干小的业务，将复杂的业务简单化，新人只需要了解他所接管的服务的代码，减少了新人的学习成本。\"},\"2046\":{\"t\":\"由于微服务是分布式服务，服务与服务之间没有任何耦合。微服务系统的微服务单元具有很强的横向拓展能力。\"},\"2047\":{\"t\":\"服务与服务之间采用HTTP网络通信协议来通信，单个服务内部高度耦合，服务与服务之间完全独立，无耦合。这使得微服务可以采用任何的开发语言和技术来实现，提高开发效率、降低开发成本。\"},\"2048\":{\"t\":\"微服务是按照业务进行拆分的，并有坚实的服务边界，若要重写某一业务代码，不需了解所有业务，重写简单。\"},\"2049\":{\"t\":\"微服务的每个服务单元是独立部署的，即独立运行在某个进程中，微服务的修改和部署对其他服务没有影响。\"},\"2050\":{\"t\":\"微服务在CAP理论中采用的AP架构，具有高可用分区容错特点。高可用主要体现在系统7x24不间断服务，他要求系统有大量的服务器集群，从而提高系统的负载能力。分区容错也使得系统更加健壮。\"},\"2051\":{\"t\":\"微服务的不足\"},\"2052\":{\"t\":\"微服务的复杂度：构建一个微服务比较复杂，服务与服务之间通过HTTP协议或其他消息传递机制通信，开发者要选出最佳的通信机制，并解决网络服务差时带来的风险。\"},\"2053\":{\"t\":\"分布式事物：将事物分成多阶段提交，如果一阶段某一节点失败仍会导致数据不正确。如果事物涉及的节点很多，某一节点的网络出现异常会导致整个事务处于阻塞状态，大大降低数据库的性能。\"},\"2054\":{\"t\":\"服务划分：将一个完整的系统拆分成很多个服务，是一件非常困难的事，因为这涉及了具体的业务场景\"},\"2055\":{\"t\":\"服务部署：最佳部署容器Docker\"},\"2056\":{\"h\":\"Spring Cloud的优缺点以及组件\",\"a\":\"spring-cloud的优缺点以及组件\"},\"2057\":{\"t\":\"设计目标\"},\"2058\":{\"t\":\"协调各个微服务，简化分布式系统开发。\"},\"2059\":{\"t\":\"优缺点\"},\"2060\":{\"t\":\"微服务的框架那么多比如：dubbo、Kubernetes，为什么就要使用Spring Cloud的呢？\"},\"2061\":{\"t\":\"优点：\"},\"2062\":{\"t\":\"产出于Spring大家族，Spring在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善 组件丰富，功能齐全。Spring Cloud 为微服务架构提供了非常完整的支持。例如、配置管理、服务发现、断路器、微服务网关等； Spring Cloud 社区活跃度很高，教程很丰富，遇到问题很容易找到解决方案 服务拆分粒度更细，耦合度比较低，有利于资源重复利用，有利于提高开发效率 可以更精准的制定优化服务方案，提高系统的可维护性 减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发 微服务可以是跨平台的，可以用任何一种语言开发 适于互联网时代，产品迭代周期更短 \"},\"2063\":{\"t\":\"缺点：\"},\"2064\":{\"t\":\"微服务过多，治理成本高，不利于维护系统 分布式系统开发的成本高（容错，分布式事务等）对团队挑战大 \"},\"2065\":{\"t\":\"springcloud中的组件有那些？\"},\"2066\":{\"t\":\"说出主要的组件： Spring Cloud Eureka,服务注册中心,特性有失效剔除、服务保护 Spring Cloud Zuul,API服务网关,功能有路由分发和过滤 Spring Cloud Config,分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式 Spring Cloud Ribbon,客户端负载均衡,特性有区域亲和,重试机制 Spring Cloud Hystrix,客户端容错保护,特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离 Spring Cloud Feign,声明式服务调用本质上就是Ribbon+Hystrix Spring Cloud Stream,消息驱动,有Sink、Source、Processor三种通道,特性有订阅发布、消费组、消息分区 Spring Cloud Bus,消息总线,配合Config仓库修改的一种Stream实现， Spring Cloud Sleuth,分布式服务追踪,需要搞清楚TraceID和SpanID以及抽样,如何与ELK整合 \"},\"2067\":{\"t\":\"Spring Cloud项目部署架构？\"},\"2068\":{\"t\":\"img\"},\"2069\":{\"t\":\"网关与过滤器有什么区别？\"},\"2070\":{\"t\":\"网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。\"},\"2071\":{\"t\":\"什么是断路器\"},\"2072\":{\"t\":\"当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）\"},\"2073\":{\"t\":\"断路器有三种状态\"},\"2074\":{\"t\":\"打开状态：一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务\"},\"2075\":{\"t\":\"半开状态：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭\"},\"2076\":{\"t\":\"关闭状态：当服务一直处于正常状态 能正常调用\"},\"2077\":{\"t\":\"什么是 Hystrix？\"},\"2078\":{\"t\":\"在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等一些防止雪崩的技术。\"},\"2079\":{\"t\":\"Hystrix有四种防雪崩方式:\"},\"2080\":{\"t\":\"服务降级：接口调用失败就调用本地的方法返回一个空\"},\"2081\":{\"t\":\"服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息\"},\"2082\":{\"t\":\"服务隔离：隔离服务之间相互影响\"},\"2083\":{\"t\":\"服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。\"},\"2084\":{\"t\":\"什么是Feign？\"},\"2085\":{\"t\":\"Feign 是一个声明web服务客户端，这使得编写web服务客户端更容易。它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。\"},\"2086\":{\"h\":\"Feign远程调用的基本流程\",\"a\":\"feign远程调用的基本流程\"},\"2087\":{\"t\":\"Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，放回给调用者。Feign远程调用的基本流程，大致如下图所示。\"},\"2088\":{\"t\":\"在这里插入图片描述\"},\"2089\":{\"t\":\"从上图可以看到，Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的 Request 请求。通过Feign以及JAVA的动态代理机制，使得Java 开发人员，可以不用通过HTTP框架去封装HTTP请求报文的方式，完成远程服务的HTTP调用。\"},\"2090\":{\"t\":\"过程：\"},\"2091\":{\"t\":\"在微服务启动时，Feign会进行包扫描，对加@FeignClient注解的接口，按照注解的规则，创建远程接口的本地JDK Proxy代理实例。然后，将这些本地Proxy代理实例，注入到Spring IOC容器中。当远程接口的方法被调用，由Proxy代理实例去完成真正的远程访问，并且返回结果。\"},\"2092\":{\"h\":\"ZooKeeper\"},\"2093\":{\"h\":\"ZooKeeper\",\"a\":\"zookeeper\"},\"2094\":{\"h\":\"基本功能\",\"a\":\"基本功能\"},\"2095\":{\"t\":\"ZooKeeper 是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\"},\"2096\":{\"t\":\"ZooKeeper 为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。这些功能的实现主要依赖于 ZooKeeper 提供的 数据存储+事件监听 功能。\"},\"2097\":{\"t\":\"ZooKeeper 将数据保存在内存中，性能是不错的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景）。\"},\"2098\":{\"t\":\"另外，很多顶级的开源项目都用到了 ZooKeeper，比如：\"},\"2099\":{\"t\":\"Kafka : ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。不过，在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构。\"},\"2100\":{\"h\":\"ZAB算法\",\"a\":\"zab算法\"},\"2101\":{\"h\":\"ZAB 协议介绍\",\"a\":\"zab-协议介绍\"},\"2102\":{\"t\":\"ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\"},\"2103\":{\"h\":\"ZAB 协议两种基本的模式：崩溃恢复和消息广播\",\"a\":\"zab-协议两种基本的模式-崩溃恢复和消息广播\"},\"2104\":{\"t\":\"ZAB 协议包括两种基本的模式，分别是\"},\"2105\":{\"t\":\"崩溃恢复 ：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致。\"},\"2106\":{\"t\":\"消息广播 ：当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进入消息广播模式了。 当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\"},\"2107\":{\"h\":\"Zookeeper 架构\",\"a\":\"zookeeper-架构\"},\"2108\":{\"t\":\"作为一个优秀高效且可靠的分布式协调框架，ZooKeeper 在解决分布式数据一致性问题时并没有直接使用 Paxos ，而是专门定制了一致性协议叫做 ZAB(ZooKeeper Atomic Broadcast) 原子广播协议，该协议能够很好地支持 崩溃恢复 。\"},\"2109\":{\"h\":\"ZAB 中的三个角色\",\"a\":\"zab-中的三个角色\"},\"2110\":{\"t\":\"和介绍 Paxos 一样，在介绍 ZAB 协议之前，我们首先来了解一下在 ZAB 中三个主要的角色，Leader 领导者、Follower跟随者、Observer观察者 。\"},\"2111\":{\"t\":\"Leader ：集群中 唯一的写请求处理者 ，能够发起投票（投票也是为了进行写请求）。\"},\"2112\":{\"t\":\"Follower：能够接收客户端的请求，如果是读请求则可以自己处理，如果是写请求则要转发给 Leader 。在选举过程中会参与投票，有选举权和被选举权 。\"},\"2113\":{\"t\":\"Observer ：就是没有选举权和被选举权的 Follower 。\"},\"2114\":{\"t\":\"在 ZAB 协议中对 zkServer(即上面我们说的三个角色的总称) 还有两种模式的定义，分别是 消息广播 和 崩溃恢复 。\"},\"2115\":{\"h\":\"消息广播模式\",\"a\":\"消息广播模式\"},\"2116\":{\"t\":\"说白了就是 ZAB 协议是如何处理写请求的，上面我们不是说只有 Leader 能处理写请求嘛？那么我们的 Follower 和 Observer 是不是也需要 同步更新数据 呢？总不能数据只在 Leader 中更新了，其他角色都没有得到更新吧？\"},\"2117\":{\"t\":\"第一步肯定需要 Leader 将写请求 广播 出去呀，让 Leader 问问 Followers 是否同意更新，如果超过半数以上的同意那么就进行 Follower 和 Observer 的更新（和 Paxos 一样）。\"},\"2118\":{\"t\":\"在 Leader 这端，它为每个其他的 zkServer 准备了一个 队列 ，采用先进先出的方式发送消息。由于协议是 通过 TCP 来进行网络通信的，保证了消息的发送顺序性，接受顺序性也得到了保证。\"},\"2119\":{\"t\":\"除此之外，在 ZAB 中还定义了一个 全局单调递增的事务ID ZXID ，它是一个64位long型，其中高32位表示 epoch 年代，低32位表示事务id。epoch 是会根据 Leader 的变化而变化的，当一个 Leader 挂了，新的 Leader 上位的时候，年代（epoch）就变了。而低32位可以简单理解为递增的事务id。\"},\"2120\":{\"t\":\"定义这个的原因也是为了顺序性，每个 proposal 在 Leader 中生成后需要 通过其 ZXID 来进行排序 ，才能得到处理。\"},\"2121\":{\"h\":\"崩溃恢复模式\",\"a\":\"崩溃恢复模式\"},\"2122\":{\"t\":\"说到崩溃恢复我们首先要提到 ZAB 中的 Leader 选举算法，当系统出现崩溃影响最大应该是 Leader 的崩溃，因为我们只有一个 Leader ，所以当 Leader 出现问题的时候我们势必需要重新选举 Leader 。\"},\"2123\":{\"t\":\"Leader 选举可以分为两个不同的阶段，第一个是我们提到的 Leader 宕机需要重新选举，第二则是当 Zookeeper 启动时需要进行系统的 Leader 初始化选举。下面我先来介绍一下 ZAB 是如何进行初始化选举的。\"},\"2124\":{\"t\":\"假设我们集群中有3台机器，那也就意味着我们需要两台以上同意（超过半数）。比如这个时候我们启动了 server1 ，它会首先 投票给自己 ，投票内容为服务器的 myid 和 ZXID ，因为初始化所以 ZXID 都为0，此时 server1 发出的投票为 (1,0)。但此时 server1 的投票仅为1，所以不能作为 Leader ，此时还在选举阶段所以整个集群处于 Looking 状态。\"},\"2125\":{\"t\":\"接着 server2 启动了，它首先也会将投票选给自己(2,0)，并将投票信息广播出去（server1也会，只是它那时没有其他的服务器了），server1 在收到 server2 的投票信息后会将投票信息与自己的作比较。首先它会比较 ZXID ，ZXID 大的优先为 Leader，如果相同则比较 myid，myid 大的优先作为 Leader。所以此时server1 发现 server2 更适合做 Leader，它就会将自己的投票信息更改为(2,0)然后再广播出去，之后server2 收到之后发现和自己的一样无需做更改，并且自己的 投票已经超过半数 ，则 确定 server2 为 Leader，server1 也会将自己服务器设置为 Following 变为 Follower。整个服务器就从 Looking 变为了正常状态。\"},\"2126\":{\"t\":\"当 server3 启动发现集群没有处于 Looking 状态时，它会直接以 Follower 的身份加入集群。\"},\"2127\":{\"t\":\"还是前面三个 server 的例子，如果在整个集群运行的过程中 server2 挂了，那么整个集群会如何重新选举 Leader 呢？其实和初始化选举差不多。\"},\"2128\":{\"t\":\"首先毫无疑问的是剩下的两个 Follower 会将自己的状态 从 Following 变为 Looking 状态 ，然后每个 server 会向初始化投票一样首先给自己投票（这不过这里的 zxid 可能不是0了，这里为了方便随便取个数字）。\"},\"2129\":{\"t\":\"假设 server1 给自己投票为(1,99)，然后广播给其他 server，server3 首先也会给自己投票(3,95)，然后也广播给其他 server。server1 和 server3 此时会收到彼此的投票信息，和一开始选举一样，他们也会比较自己的投票和收到的投票（zxid 大的优先，如果相同那么就 myid 大的优先）。这个时候 server1 收到了 server3 的投票发现没自己的合适故不变，server3 收到 server1 的投票结果后发现比自己的合适于是更改投票为(1,99)然后广播出去，最后 server1 收到了发现自己的投票已经超过半数就把自己设为 Leader，server3 也随之变为 Follower。\"},\"2130\":{\"t\":\"请注意 ZooKeeper 为什么要设置奇数个结点？比如这里我们是三个，挂了一个我们还能正常工作，挂了两个我们就不能正常工作了（已经没有超过半数的节点数了，所以无法进行投票等操作了）。而假设我们现在有四个，挂了一个也能工作，但是挂了两个也不能正常工作了，这是和三个一样的，而三个比四个还少一个，带来的效益是一样的，所以 Zookeeper 推荐奇数个 server 。\"},\"2131\":{\"t\":\"那么说完了 ZAB 中的 Leader 选举方式之后我们再来了解一下 崩溃恢复 是什么玩意？\"},\"2132\":{\"t\":\"其实主要就是 当集群中有机器挂了，我们整个集群如何保证数据一致性？\"},\"2133\":{\"t\":\"如果只是 Follower 挂了，而且挂的没超过半数的时候，因为我们一开始讲了在 Leader 中会维护队列，所以不用担心后面的数据没接收到导致数据不一致性。\"},\"2134\":{\"t\":\"如果 Leader 挂了那就麻烦了，我们肯定需要先暂停服务变为 Looking 状态然后进行 Leader 的重新选举（上面我讲过了），但这个就要分为两种情况了，分别是 确保已经被Leader提交的提案最终能够被所有的Follower提交 和 跳过那些已经被丢弃的提案 。\"},\"2135\":{\"t\":\"确保已经被Leader提交的提案最终能够被所有的Follower提交是什么意思呢？\"},\"2136\":{\"t\":\"假设 Leader (server2) 发送 commit 请求（忘了请看上面的消息广播模式），他发送给了 server3，然后要发给 server1 的时候突然挂了。这个时候重新选举的时候我们如果把 server1 作为 Leader 的话，那么肯定会产生数据不一致性，因为 server3 肯定会提交刚刚 server2 发送的 commit 请求的提案，而 server1 根本没收到所以会丢弃。\"},\"2137\":{\"t\":\"崩溃恢复\"},\"2138\":{\"t\":\"那怎么解决呢？\"},\"2139\":{\"t\":\"聪明的同学肯定会质疑，这个时候 server1 已经不可能成为 Leader 了，因为 server1 和 server3 进行投票选举的时候会比较 ZXID ，而此时 server3 的 ZXID 肯定比 server1 的大了。(不理解可以看前面的选举算法)\"},\"2140\":{\"t\":\"那么跳过那些已经被丢弃的提案又是什么意思呢？\"},\"2141\":{\"t\":\"假设 Leader (server2) 此时同意了提案N1，自身提交了这个事务并且要发送给所有 Follower 要 commit 的请求，却在这个时候挂了，此时肯定要重新进行 Leader 的选举，比如说此时选 server1 为 Leader （这无所谓）。但是过了一会，这个 挂掉的 Leader 又重新恢复了 ，此时它肯定会作为 Follower 的身份进入集群中，需要注意的是刚刚 server2 已经同意提交了提案N1，但其他 server 并没有收到它的 commit 信息，所以其他 server 不可能再提交这个提案N1了，这样就会出现数据不一致性问题了，所以 该提案N1最终需要被抛弃掉 。\"},\"2142\":{\"t\":\"崩溃恢复\"},\"2143\":{\"h\":\"CAP\",\"a\":\"cap\"},\"2144\":{\"h\":\"简介\",\"a\":\"简介\"},\"2145\":{\"t\":\"CAP 也就是 Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性） 这三个单词首字母组合。\"},\"2146\":{\"t\":\"img\"},\"2147\":{\"t\":\"在理论计算机科学中，CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能同时满足以下三点中的两个：\"},\"2148\":{\"t\":\"一致性（Consistency） : 所有节点访问同一份最新的数据副本\"},\"2149\":{\"t\":\"可用性（Availability）: 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\"},\"2150\":{\"t\":\"分区容错性（Partition Tolerance） : 分布式系统出现网络分区的时候，仍然能够对外提供服务。\"},\"2151\":{\"t\":\"什么是网络分区？\"},\"2152\":{\"t\":\"分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫 网络分区。\"},\"2153\":{\"h\":\"不是所谓的“3 选 2”\",\"a\":\"不是所谓的-3-选-2\"},\"2154\":{\"t\":\"大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。\"},\"2155\":{\"t\":\"当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。\"},\"2156\":{\"t\":\"简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。\"},\"2157\":{\"t\":\"因此，分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。 比如 ZooKeeper 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。\"},\"2158\":{\"t\":\"为啥不可能选择 CA 架构呢？ 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。\"},\"2159\":{\"t\":\"选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。\"},\"2160\":{\"t\":\"另外，需要补充说明的一点是： 如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。\"},\"2161\":{\"h\":\"场景问题\"},\"2162\":{\"h\":\"缓存一致性解决\",\"a\":\"缓存一致性解决\"},\"2163\":{\"h\":\"4G数据找系统记录(大数据题)\",\"a\":\"_4g数据找系统记录-大数据题\"},\"2164\":{\"h\":\"很多短任务线程，选择 synchronized 还是 lock（2022-04-11 携程）\",\"a\":\"很多短任务线程-选择-synchronized-还是-lock-2022-04-11-携程\"},\"2165\":{\"t\":\"锁竞争小时，synchronized和lock效率没差，偏向模式下（单线程读写）甚至高于lock，但是并发量上升时锁撤销会大幅影响性能，稳定自适应轻量级锁状态下，线程接近交替运行，或者说短任务线程多，基本一样，因为都是自旋，大量任务并发竞争时，随着任务量的增大，synchronized的效率会远小于lock，因为重量级锁会频繁切换内核态与用户态；大量长任务，只能重量级锁。\"},\"2166\":{\"h\":\"多个人给一个主播打赏怎么设计？（2022-6-3 58同城）\",\"a\":\"多个人给一个主播打赏怎么设计-2022-6-3-58同城\"},\"2167\":{\"t\":\"我说是一个高并发写的操作，对一个记录频繁写，分批操作，比如 10 个记录 操作一次。他说这个方案可以 但是有 100 个记录 怎么去做一个一个操作呢？我说如果在一个进程可以 分多个线程分批。他说还是不够快 我们是用的 MQ 多个消费者 一个打赏就发一个消息\"},\"2168\":{\"h\":\"怎么实现一个点赞功能？\",\"a\":\"怎么实现一个点赞功能\"},\"2169\":{\"t\":\"主要的流程解释下：先查询数据库改用户是否进行点赞，如果已经点赞则抛出异常，如果没有则new一个对象来一个一个Set，然后将已点赞的信息存入redis中，相反，取消点赞的操作就是删除redis中的数据即可，然后通过Dubbo调用API来完成保存操作，因为我这里是还要获取点赞数和评论数啥的，所以会对动态表进行更新操作。\"},\"2170\":{\"h\":\"比如下单清空购物车，你是如何设计的？\",\"a\":\"比如下单清空购物车-你是如何设计的\"},\"2171\":{\"t\":\"生产者（订单系统）产生消息，发送一条半事务消息到MQ服务器\"},\"2172\":{\"t\":\"MQ收到消息后，将消息持久化到存储系统，这条消息的状态是待发送状态。\"},\"2173\":{\"t\":\"MQ服务器返回ACK确认到生产者，此时MQ不会触发消息推送事件\"},\"2174\":{\"t\":\"生产者执行本地事务（订单创建成功，提交事务消息）\"},\"2175\":{\"t\":\"如果本地事务执行成功，即commit执行结果到MQ服务器；如果执行失败，发送rollback。\"},\"2176\":{\"t\":\"如果是commit正常提交，MQ服务器更新消息状态为可发送；如果是rollback，即删除消息。\"},\"2177\":{\"t\":\"如果消息状态更新为可发送，则MQ服务器会push消息给消费者（购物车系统）。消费者消费完（即拿到订单消息，清空购物车成功）就应答ACK。\"},\"2178\":{\"t\":\"如果MQ服务器长时间没有收到生产者的commit或者rollback，它会反查生产者，然后根据查询到的结果（回滚操作或者重新发送消息）执行最终状态。\"},\"2179\":{\"t\":\"有些伙伴可能有疑惑，如果消费者消费失败怎么办呢？那数据是不是不一致啦？所以就需要消费者消费成功，执行业务逻辑成功，再反馈ack嘛。如果消费者消费失败，那就自动重试嘛，接口支持幂等即可。\"},\"2180\":{\"h\":\"排行榜的实现，比如高考成绩排序（2022 虾皮）\",\"a\":\"排行榜的实现-比如高考成绩排序-2022-虾皮\"},\"2181\":{\"t\":\"排行版的实现，一般使用redis的zset数据类型。\"},\"2182\":{\"t\":\"zadd key score member [score member ...]，zrank key member \"},\"2183\":{\"h\":\"有一批帖子，会根据类别搜索，但是现在是单独一个表，现在查询非常慢，如何提高搜索性能？（2022 虾皮）\",\"a\":\"有一批帖子-会根据类别搜索-但是现在是单独一个表-现在查询非常慢-如何提高搜索性能-2022-虾皮\"},\"2184\":{\"t\":\"根据类别分库分表，库可以放到不同的实例上，经常查询的不变的数据]可以放到缓存里。 数据有更新时，需要刷新下缓存 因为分表后，只能是固定类别，所以需要根据类别去分开查找。 如果还有另一个重要的字段也需要查，可以再建一个分表，user-ses/ses-user就是这么做的，但是冗余就比较大。\"},\"2185\":{\"h\":\"如果有多个表，进行聚合查询，如何解决深分页的问题（2022 虾皮）\",\"a\":\"如果有多个表-进行聚合查询-如何解决深分页的问题-2022-虾皮\"},\"2186\":{\"t\":\"就是保存每个节点的表id给前端，前端查询时把id返回过来了，然后加到SQL里，但是不一定准。这里回答的是单个表吧。\"},\"2187\":{\"h\":\"分表的数据，动态增加一张表，不停服如何实现？（2022 虾皮）\",\"a\":\"分表的数据-动态增加一张表-不停服如何实现-2022-虾皮\"},\"2188\":{\"t\":\"分区策略使用一致性哈希 然后新表的数据，查询的时候，先查老的，再插入新的。如果老数据没有动，需要有对应的迁移服务进行定时迁移。插入的时候优先插入到新的表。\"},\"2189\":{\"h\":\"迁移线程和用户线程同时执行，会有数据库不一致的问题，怎么解决？（2022 虾皮）\",\"a\":\"迁移线程和用户线程同时执行-会有数据库不一致的问题-怎么解决-2022-虾皮\"},\"2190\":{\"t\":\"加分布式锁。\"},\"2191\":{\"h\":\"两个机房，某个机房可能断电，如何做多机房容灾（2022 虾皮）\",\"a\":\"两个机房-某个机房可能断电-如何做多机房容灾-2022-虾皮\"},\"2192\":{\"t\":\"负载均衡层，支持切换机房写数据的时候，中间件（db/redis/es）都要进行双写。\"},\"2193\":{\"t\":\"kafka容灾，mirror maker: https://cloud.tencent.com/developer/article/1358933\"},\"2194\":{\"h\":\"主从机房同步有什么问题呢？ （2022 虾皮）\",\"a\":\"主从机房同步有什么问题呢-2022-虾皮\"},\"2195\":{\"t\":\"会有比较大的延迟。 一些分布式的问题，例如分布式事务，可能就执行了几步，然后就挂了，需要有一定的策略，进行回滚或者提交。 切换机房的过程中，可能存在数据丢失，重复数据等\"},\"2196\":{\"t\":\"双向同步，两个机房都能写入，如果操作的是各自的数据的话，问题不大。如果操作的是相同数据，必然会有冲突，需要解决。所以上层保证相同数据到同一个机房即可，然后同步到另外一个机房，保证每个机房都有全量的数据。各种中间件都要做改造。\"},\"2197\":{\"t\":\"总之，分片的核心思路在于，让同一个用户的相关请求，只在一个机房内完成所有业务「闭环」，不再出现「跨机房」访问。\"},\"2198\":{\"t\":\"阿里在实施这种方案时，给它起了个名字，叫做「单元化」。\"},\"2199\":{\"t\":\"这里还有一种情况，是无法做数据分片的：全局数据。例如系统配置、商品库存这类需要强一致的数据，这类服务依旧只能采用写主机房，读从机房的方案，不做双活。\"},\"2200\":{\"t\":\"双活的重点，是要优先保证「核心」业务先实现双活，并不是「全部」业务实现双活。\"},\"2201\":{\"h\":\"冷机房新请求过来，发现缓存没有，会把数据库打挂，这个怎么解决？（2022 虾皮）\",\"a\":\"冷机房新请求过来-发现缓存没有-会把数据库打挂-这个怎么解决-2022-虾皮\"},\"2202\":{\"t\":\"预热，提前加载到缓存。 或者平时保持一定的流量。 用了缓存的，一般需要预热下，防止雪崩。\"},\"2203\":{\"h\":\"定时任务这种，怎么改变执行的机房（2022 虾皮）\",\"a\":\"定时任务这种-怎么改变执行的机房-2022-虾皮\"},\"2204\":{\"t\":\"加开关，任何时候都有一个条件不满足，在空跑。\"},\"2205\":{\"h\":\"4.HTTP常见面试题\"},\"2206\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"2207\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"2208\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"2209\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"2210\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"2211\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"2212\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"2213\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"2214\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"2215\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"2216\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"2217\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"2218\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"2219\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"2220\":{\"h\":\"HTTP协议中为什么广泛使用的还是HTTP1.1？\"},\"2221\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"2222\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"2223\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"2224\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"2225\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"2226\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"2227\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"2228\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"2229\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"2230\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"2231\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"2232\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"2233\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"2234\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"2235\":{\"h\":\"5.HTTP2常见面试题\"},\"2236\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"2237\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"2238\":{\"h\":\"一、关于HTTP2\",\"a\":\"一、关于http2\"},\"2239\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"2240\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"2241\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"2242\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"2243\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"2244\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"2245\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"2246\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"2247\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"2248\":{\"h\":\"6.HTTP3常见面试题\"},\"2249\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"2250\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"2251\":{\"h\":\"一、关于HTTP2\",\"a\":\"一、关于http2\"},\"2252\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"2253\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"2254\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"2255\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"2256\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"2257\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"2258\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"2259\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"2260\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"2261\":{\"h\":\"7.HTTPS常见面试题\"},\"2262\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"2263\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"2264\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"2265\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"2266\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"2267\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"2268\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"2269\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"2270\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"2271\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"2272\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"2273\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"2274\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"2275\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"2276\":{\"h\":\"3.IP常见面试题\"},\"2277\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"2278\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"2279\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"2280\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"2281\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"2282\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"2283\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"2284\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"2285\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"2286\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"2287\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"2288\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"2289\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"2290\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"2291\":{\"h\":\"2.TCP和UDP常见面试题\"},\"2292\":{\"t\":\"大家好，这篇文章来一起看下TCP中那些烦人（常考）的面试题，话不多说，发车！\"},\"2293\":{\"t\":\"为了检验对这些知识掌握的深度，先给大家列出目录：\"},\"2294\":{\"t\":\"1.TCP基础\"},\"2295\":{\"t\":\"TCP 头格式有哪些？\"},\"2296\":{\"t\":\"为什么需要 TCP 协议？ TCP 工作在哪一层？\"},\"2297\":{\"t\":\"什么是 TCP ？\"},\"2298\":{\"t\":\"什么是 TCP 连接？\"},\"2299\":{\"t\":\"如何唯一确定一个 TCP 连接呢？\"},\"2300\":{\"t\":\"UDP 和 TCP 有什么区别呢？分别的应用场景是？\"},\"2301\":{\"t\":\"TCP 和 UDP 可以使用同一个端口吗？\"},\"2302\":{\"t\":\"2.TCP三次握手\"},\"2303\":{\"t\":\"TCP 三次握手过程是怎样的？\"},\"2304\":{\"t\":\"如何在 Linux 系统中查看 TCP 状态？\"},\"2305\":{\"t\":\"为什么是三次握手？不是两次、四次？\"},\"2306\":{\"t\":\"为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？\"},\"2307\":{\"t\":\"初始序列号 ISN 是如何随机产生的？\"},\"2308\":{\"t\":\"既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？\"},\"2309\":{\"t\":\"第一次握手丢失了，会发生什么？\"},\"2310\":{\"t\":\"第二次握手丢失了，会发生什么？\"},\"2311\":{\"t\":\"第三次握手丢失了，会发生什么？\"},\"2312\":{\"t\":\"什么是 SYN 攻击？如何避免 SYN 攻击？\"},\"2313\":{\"t\":\"3.TCP四次挥手\"},\"2314\":{\"t\":\"TCP 四次挥手过程是怎样的？\"},\"2315\":{\"t\":\"为什么挥手需要四次？\"},\"2316\":{\"t\":\"第一次挥手丢失了，会发生什么？\"},\"2317\":{\"t\":\"第二次挥手丢失了，会发生什么？\"},\"2318\":{\"t\":\"第三次挥手丢失了，会发生什么？\"},\"2319\":{\"t\":\"第四次挥手丢失了，会发生什么？\"},\"2320\":{\"t\":\"为什么 TIME_WAIT 等待的时间是 2MSL？\"},\"2321\":{\"t\":\"为什么需要 TIME_WAIT 状态？\"},\"2322\":{\"t\":\"TIME_WAIT 过多有什么危害？\"},\"2323\":{\"t\":\"如何优化 TIME_WAIT？\"},\"2324\":{\"t\":\"服务器出现大量 TIME_WAIT 状态的原因有哪些？\"},\"2325\":{\"t\":\"服务器出现大量 CLOSE_WAIT 状态的原因有哪些？\"},\"2326\":{\"t\":\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"},\"2327\":{\"t\":\"如果已经建立了连接，但是服务端的进程崩溃会发生什么？\"},\"2328\":{\"t\":\"4.Socket 编程\"},\"2329\":{\"t\":\"针对 TCP 应该如何 Socket 编程？\"},\"2330\":{\"t\":\"listen 时候参数 backlog 的意义？\"},\"2331\":{\"t\":\"accept 发生在三次握手的哪一步？\"},\"2332\":{\"t\":\"客户端调用 close 了，连接是断开的流程是什么？\"},\"2333\":{\"t\":\"没有 accept，能建立 TCP 连接吗？\"},\"2334\":{\"t\":\"没有 listen，能建立 TCP 连接吗？\"},\"2335\":{\"h\":\"1.TCP基础\",\"a\":\"_1-tcp基础\"},\"2336\":{\"h\":\"1.1TCP 头格式有哪些？\",\"a\":\"_1-1tcp-头格式有哪些\"},\"2337\":{\"t\":\"看了大佬小林coding的文章，我总结面试常考的也就是：\"},\"2338\":{\"t\":\"序列号：在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就「累加」一次该「数据字节数」的大小。用来解决网络包乱序问题。\"},\"2339\":{\"t\":\"确认应答号：指下一次「期望」收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。用来解决丢包的问题。\"},\"2340\":{\"t\":\"控制位：\"},\"2341\":{\"t\":\"ACK：该位为 1 时，「确认应答」的字段变为有效，TCP 规定除了最初建立连接时的 SYN 包之外该位必须设置为 1 。\"},\"2342\":{\"t\":\"RST：该位为 1 时，表示 TCP 连接中出现异常必须强制断开连接。\"},\"2343\":{\"t\":\"SYN：该位为 1 时，表示希望建立连接，并在其「序列号」的字段进行序列号初始值的设定。\"},\"2344\":{\"t\":\"FIN：该位为 1 时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 FIN 位为 1 的 TCP 段。\"},\"2345\":{\"h\":\"1.2为什么需要 TCP 协议？ TCP 工作在哪一层？\",\"a\":\"_1-2为什么需要-tcp-协议-tcp-工作在哪一层\"},\"2346\":{\"t\":\"原因：IP 层是「不可靠」的，它不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据的完整性。如果需要保障网络数据包的可靠性，那么就需要由上层（传输层）的 TCP 协议来负责。\"},\"2347\":{\"t\":\"因为 TCP 是一个工作在传输层的可靠数据传输的服务，它能确保接收端接收的网络包是无损坏、无间隔、非冗余和按序的。\"},\"2348\":{\"h\":\"1.3什么是 TCP ？\",\"a\":\"_1-3什么是-tcp\"},\"2349\":{\"t\":\"总结一句话：TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。\"},\"2350\":{\"t\":\"具体的给面试官扯一扯：\"},\"2351\":{\"t\":\"面向连接：一定是「一对一」才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；\"},\"2352\":{\"t\":\"可靠的：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；\"},\"2353\":{\"t\":\"字节流：用户消息通过 TCP 协议传输时，消息可能会被操作系统「分组」成多个的 TCP 报文，如果接收方的程序如果不知道「消息的边界」，是无法读出一个有效的用户消息的。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。\"},\"2354\":{\"h\":\"1.4什么是 TCP 连接？\",\"a\":\"_1-4什么是-tcp-连接\"},\"2355\":{\"t\":\"大白话：用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括 Socket、序列号和窗口大小称为连接。\"},\"2356\":{\"t\":\"包含三个东西：\"},\"2357\":{\"t\":\"Socket：由 IP 地址和端口号组成\"},\"2358\":{\"t\":\"序列号：用来解决乱序问题等\"},\"2359\":{\"t\":\"窗口大小：用来做流量控制\"},\"2360\":{\"h\":\"1.5如何唯一确定一个 TCP 连接呢？\",\"a\":\"_1-5如何唯一确定一个-tcp-连接呢\"},\"2361\":{\"t\":\"TCP 四元组可以唯一的确定一个连接，四元组包括如下：\"},\"2362\":{\"t\":\"源地址（IP地址，32位，存在IP头部）\"},\"2363\":{\"t\":\"源端口（端口，16位，存在TCP头部）\"},\"2364\":{\"t\":\"目的地址（IP地址，32位，存在IP头部）\"},\"2365\":{\"t\":\"目的端口（端口，16位，存在TCP头部）\"},\"2366\":{\"t\":\"这地方有个常见面试题：\"},\"2367\":{\"t\":\"有一个 IP 的服务端监听了一个端口，它的 TCP 的最大连接数是多少？\"},\"2368\":{\"t\":\"服务端通常固定在某个本地端口上监听，等待客户端的连接请求。\"},\"2369\":{\"t\":\"因此，客户端 IP 和端口是可变的，其理论值计算公式如下:\"},\"2370\":{\"t\":\"TCP的最大连接数=客户端的IP数⋅客户端的端口数\"},\"2371\":{\"t\":\"对 IPv4，客户端的 IP 数最多为 2 的 32 次方，客户端的端口数最多为 2 的 16 次方，也就是服务端单机最大 TCP 连接数，约为 2 的 48 次方。\"},\"2372\":{\"t\":\"当然，服务端最大并发 TCP 连接数远不能达到理论上限，还收到物理内存和其他因素影响。\"},\"2373\":{\"h\":\"1.6UDP 和 TCP 有什么区别呢？分别的应用场景是？\",\"a\":\"_1-6udp-和-tcp-有什么区别呢-分别的应用场景是\"},\"2374\":{\"t\":\"UDP 头部格式\"},\"2375\":{\"h\":\"1.6.1TCP 和 UDP 区别：\",\"a\":\"_1-6-1tcp-和-udp-区别\"},\"2376\":{\"t\":\"1.连接\"},\"2377\":{\"t\":\"TCP 是面向连接的传输层协议，传输数据前先要建立连接。\"},\"2378\":{\"t\":\"UDP 是不需要连接，即刻传输数据。\"},\"2379\":{\"t\":\"2. 服务对象\"},\"2380\":{\"t\":\"TCP 是一对一的两点服务，即一条连接只有两个端点。\"},\"2381\":{\"t\":\"UDP 支持一对一、一对多、多对多的交互通信\"},\"2382\":{\"t\":\"3. 可靠性\"},\"2383\":{\"t\":\"TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按序到达。\"},\"2384\":{\"t\":\"UDP 是尽最大努力交付，不保证可靠交付数据。但是我们可以基于 UDP 传输协议实现一个可靠的传输协议，比如 QUIC 协议，具体可以参见这篇文章：如何基于 UDP 协议实现可靠传输？\"},\"2385\":{\"t\":\"4. 拥塞控制、流量控制\"},\"2386\":{\"t\":\"TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。\"},\"2387\":{\"t\":\"UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。\"},\"2388\":{\"t\":\"5. 首部开销\"},\"2389\":{\"t\":\"TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。\"},\"2390\":{\"t\":\"UDP 首部只有 8 个字节，并且是固定不变的，开销较小。\"},\"2391\":{\"t\":\"6. 传输方式\"},\"2392\":{\"t\":\"TCP 是流式传输，没有边界，但保证顺序和可靠。\"},\"2393\":{\"t\":\"UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。\"},\"2394\":{\"t\":\"7. 分片不同\"},\"2395\":{\"t\":\"TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。\"},\"2396\":{\"t\":\"UDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层。\"},\"2397\":{\"h\":\"1.6.2TCP 和 UDP 应用场景：\",\"a\":\"_1-6-2tcp-和-udp-应用场景\"},\"2398\":{\"t\":\"由于 TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：\"},\"2399\":{\"t\":\"FTP 文件传输；\"},\"2400\":{\"t\":\"HTTP / HTTPS；\"},\"2401\":{\"t\":\"由于 UDP 面向无连接，它可以随时发送数据，再加上 UDP 本身的处理既简单又高效，因此经常用于：\"},\"2402\":{\"t\":\"包总量较少的通信，如 DNS、SNMP 等；\"},\"2403\":{\"t\":\"视频、音频等多媒体通信；\"},\"2404\":{\"t\":\"广播通信；\"},\"2405\":{\"t\":\"这里有两道常见面试题：\"},\"2406\":{\"t\":\"为什么 UDP 头部没有「首部长度」字段，而 TCP 头部有「首部长度」字段呢？\"},\"2407\":{\"t\":\"原因： TCP 有可变长的「选项」字段，而 UDP 头部长度则是不会变化的，无需多一个字段去记录 UDP 的首部长度。\"},\"2408\":{\"t\":\"为什么 UDP 头部有「包长度」字段，而 TCP 头部则没有「包长度」字段呢？\"},\"2409\":{\"t\":\"比较靠谱的原因：如今的 UDP 协议是基于 IP 协议发展的，而当年可能并非如此，依赖的可能是别的不提供自身报文长度或首部长度的网络层协议，因此 UDP 报文首部需要有长度字段以供计算。\"},\"2410\":{\"h\":\"1.7TCP 和 UDP 可以使用同一个端口吗？\",\"a\":\"_1-7tcp-和-udp-可以使用同一个端口吗\"},\"2411\":{\"t\":\"总结：可以的。\"},\"2412\":{\"t\":\"传输层的端口号的作用，是为了区分同一个主机上不同应用程序的数据包。\"},\"2413\":{\"t\":\"传输层有两个传输协议分别是 TCP 和 UDP，在内核中是两个完全独立的软件模块。\"},\"2414\":{\"t\":\"当主机收到数据包后，可以在 IP 包头的「协议号」字段知道该数据包是 TCP/UDP，所以可以根据这个信息确定送给哪个模块（TCP/UDP）处理，送给 TCP/UDP 模块的报文根据「端口号」确定送给哪个应用程序处理。\"},\"2415\":{\"t\":\"因此，TCP/UDP 各自的端口号也相互独立，如 TCP 有一个 80 号端口，UDP 也可以有一个 80 号端口，二者并不冲突。\"},\"2416\":{\"t\":\"可以看这篇文章：TCP 和 UDP 可以使用同一个端口吗？\"},\"2417\":{\"h\":\"2.TCP三次握手\",\"a\":\"_2-tcp三次握手\"},\"2418\":{\"h\":\"2.1TCP 三次握手过程是怎样的？\",\"a\":\"_2-1tcp-三次握手过程是怎样的\"},\"2419\":{\"h\":\"2.2如何在 Linux 系统中查看 TCP 状态？\",\"a\":\"_2-2如何在-linux-系统中查看-tcp-状态\"},\"2420\":{\"h\":\"2.3为什么是三次握手？不是两次、四次？\",\"a\":\"_2-3为什么是三次握手-不是两次、四次\"},\"2421\":{\"h\":\"2.4为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？\",\"a\":\"_2-4为什么每次建立-tcp-连接时-初始化的序列号都要求不一样呢\"},\"2422\":{\"h\":\"2.5初始序列号 ISN 是如何随机产生的？\",\"a\":\"_2-5初始序列号-isn-是如何随机产生的\"},\"2423\":{\"h\":\"2.6既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？\",\"a\":\"_2-6既然-ip-层会分片-为什么-tcp-层还需要-mss-呢\"},\"2424\":{\"h\":\"2.7第一次握手丢失了，会发生什么？\",\"a\":\"_2-7第一次握手丢失了-会发生什么\"},\"2425\":{\"h\":\"2.8第二次握手丢失了，会发生什么？\",\"a\":\"_2-8第二次握手丢失了-会发生什么\"},\"2426\":{\"h\":\"2.9第三次握手丢失了，会发生什么？\",\"a\":\"_2-9第三次握手丢失了-会发生什么\"},\"2427\":{\"h\":\"2.10什么是 SYN 攻击？如何避免 SYN 攻击？\",\"a\":\"_2-10什么是-syn-攻击-如何避免-syn-攻击\"},\"2428\":{\"h\":\"3.TCP四次挥手\",\"a\":\"_3-tcp四次挥手\"},\"2429\":{\"h\":\"3.1TCP 四次挥手过程是怎样的？\",\"a\":\"_3-1tcp-四次挥手过程是怎样的\"},\"2430\":{\"h\":\"3.2为什么挥手需要四次？\",\"a\":\"_3-2为什么挥手需要四次\"},\"2431\":{\"h\":\"3.3第一次挥手丢失了，会发生什么？\",\"a\":\"_3-3第一次挥手丢失了-会发生什么\"},\"2432\":{\"h\":\"3.4第二次挥手丢失了，会发生什么？\",\"a\":\"_3-4第二次挥手丢失了-会发生什么\"},\"2433\":{\"h\":\"3.5第三次挥手丢失了，会发生什么？\",\"a\":\"_3-5第三次挥手丢失了-会发生什么\"},\"2434\":{\"h\":\"3.6第四次挥手丢失了，会发生什么？\",\"a\":\"_3-6第四次挥手丢失了-会发生什么\"},\"2435\":{\"h\":\"3.7为什么 TIME_WAIT 等待的时间是 2MSL？\",\"a\":\"_3-7为什么-time-wait-等待的时间是-2msl\"},\"2436\":{\"h\":\"3.8为什么需要 TIME_WAIT 状态？\",\"a\":\"_3-8为什么需要-time-wait-状态\"},\"2437\":{\"h\":\"3.9TIME_WAIT 过多有什么危害？\",\"a\":\"_3-9time-wait-过多有什么危害\"},\"2438\":{\"h\":\"3.10如何优化 TIME_WAIT？\",\"a\":\"_3-10如何优化-time-wait\"},\"2439\":{\"h\":\"3.11服务器出现大量 TIME_WAIT 状态的原因有哪些？\",\"a\":\"_3-11服务器出现大量-time-wait-状态的原因有哪些\"},\"2440\":{\"h\":\"3.12服务器出现大量 CLOSE_WAIT 状态的原因有哪些？\",\"a\":\"_3-12服务器出现大量-close-wait-状态的原因有哪些\"},\"2441\":{\"h\":\"3.13如果已经建立了连接，但是客户端突然出现故障了怎么办？\",\"a\":\"_3-13如果已经建立了连接-但是客户端突然出现故障了怎么办\"},\"2442\":{\"h\":\"3.14如果已经建立了连接，但是服务端的进程崩溃会发生什么？\",\"a\":\"_3-14如果已经建立了连接-但是服务端的进程崩溃会发生什么\"},\"2443\":{\"h\":\"4.Socket 编程\",\"a\":\"_4-socket-编程\"},\"2444\":{\"h\":\"4.1针对 TCP 应该如何 Socket 编程？\",\"a\":\"_4-1针对-tcp-应该如何-socket-编程\"},\"2445\":{\"h\":\"4.2listen 时候参数 backlog 的意义？\",\"a\":\"_4-2listen-时候参数-backlog-的意义\"},\"2446\":{\"h\":\"4.3accept 发生在三次握手的哪一步？\",\"a\":\"_4-3accept-发生在三次握手的哪一步\"},\"2447\":{\"h\":\"4.4客户端调用 close 了，连接是断开的流程是什么？\",\"a\":\"_4-4客户端调用-close-了-连接是断开的流程是什么\"},\"2448\":{\"h\":\"4.5没有 accept，能建立 TCP 连接吗？\",\"a\":\"_4-5没有-accept-能建立-tcp-连接吗\"},\"2449\":{\"h\":\"4.6没有 listen，能建立 TCP 连接吗？\",\"a\":\"_4-6没有-listen-能建立-tcp-连接吗\"},\"2450\":{\"h\":\"计算机网络\"},\"2451\":{\"h\":\"键入网址到网页显示，期间发生了什么？\",\"a\":\"键入网址到网页显示-期间发生了什么\"},\"2452\":{\"t\":\"img\"},\"2453\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"2454\":{\"t\":\"总体来说分为以下几个过程:\"},\"2455\":{\"t\":\"DNS 解析\"},\"2456\":{\"t\":\"TCP 连接\"},\"2457\":{\"t\":\"发送 HTTP 请求\"},\"2458\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"2459\":{\"t\":\"浏览器解析渲染页面\"},\"2460\":{\"t\":\"连接结束\"},\"2461\":{\"h\":\"OSI 七层模型\",\"a\":\"osi-七层模型\"},\"2462\":{\"t\":\"OSI 七层模型\"},\"2463\":{\"h\":\"TCP/IP 四层模型\",\"a\":\"tcp-ip-四层模型\"},\"2464\":{\"t\":\"img\"},\"2465\":{\"h\":\"TCP\",\"a\":\"tcp\"},\"2466\":{\"h\":\"IP\",\"a\":\"ip\"},\"2467\":{\"h\":\"UDP\",\"a\":\"udp\"},\"2468\":{\"h\":\"ARP\",\"a\":\"arp\"},\"2469\":{\"t\":\"ARP 协议，全称 地址解析协议（Address Resolution Protocol），它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。\"},\"2470\":{\"t\":\"ARP 协议工作时有一个大前提，那就是 ARP 表。\"},\"2471\":{\"t\":\"在一个局域网内，每个网络设备都自己维护了一个 ARP 表，ARP 表记录了某些其他网络设备的 IP 地址-MAC 地址映射关系，该映射关系以 <IP, MAC, TTL> 三元组的形式存储。其中，TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。\"},\"2472\":{\"t\":\"ARP 的工作原理将分两种场景讨论：\"},\"2473\":{\"t\":\"同一局域网内的 MAC 寻址；\"},\"2474\":{\"t\":\"从一个局域网到另一个局域网中的网络设备的寻址。\"},\"2475\":{\"h\":\"同一局域网内的 MAC 寻址\",\"a\":\"同一局域网内的-mac-寻址\"},\"2476\":{\"t\":\"假设当前有如下场景：IP 地址为137.196.7.23的主机 A，想要给同一局域网内的 IP 地址为137.196.7.14主机 B，发送 IP 数据报文。\"},\"2477\":{\"t\":\"再次强调，当主机发送 IP 数据报文时（网络层），仅知道目的地的 IP 地址，并不清楚目的地的 MAC 地址，而 ARP 协议就是解决这一问题的。\"},\"2478\":{\"t\":\"为了达成这一目标，主机 A 将不得不通过 ARP 协议来获取主机 B 的 MAC 地址，并将 IP 报文封装成链路层帧，发送到下一跳上。在该局域网内，关于此将按照时间顺序，依次发生如下事件：\"},\"2479\":{\"t\":\"主机 A 检索自己的 ARP 表，发现 ARP 表中并无主机 B 的 IP 地址对应的映射条目，也就无从知道主机 B 的 MAC 地址。\"},\"2480\":{\"t\":\"主机 A 将构造一个 ARP 查询分组，并将其广播到所在的局域网中。\"},\"2481\":{\"t\":\"ARP 分组是一种特殊报文，ARP 分组有两类，一种是查询分组，另一种是响应分组，它们具有相同的格式，均包含了发送和接收的 IP 地址、发送和接收的 MAC 地址。当然了，查询分组中，发送的 IP 地址，即为主机 A 的 IP 地址，接收的 IP 地址即为主机 B 的 IP 地址，发送的 MAC 地址也是主机 A 的 MAC 地址，但接收的 MAC 地址绝不会是主机 B 的 MAC 地址（因为这正是我们要问询的！），而是一个特殊值——FF-FF-FF-FF-FF-FF，之前说过，该 MAC 地址是广播地址，也就是说，查询分组将广播给该局域网内的所有设备。\"},\"2482\":{\"t\":\"主机 A 构造的查询分组将在该局域网内广播，理论上，每一个设备都会收到该分组，并检查查询分组的接收 IP 地址是否为自己的 IP 地址，如果是，说明查询分组已经到达了主机 B，否则，该查询分组对当前设备无效，丢弃之。\"},\"2483\":{\"t\":\"主机 B 收到了查询分组之后，验证是对自己的问询，接着构造一个 ARP 响应分组，该分组的目的地只有一个——主机 A，发送给主机 A。同时，主机 B 提取查询分组中的 IP 地址和 MAC 地址信息，在自己的 ARP 表中构造一条主机 A 的 IP-MAC 映射记录。\"},\"2484\":{\"t\":\"ARP 响应分组具有和 ARP 查询分组相同的构造，不同的是，发送和接受的 IP 地址恰恰相反，发送的 MAC 地址为发送者本身，目标 MAC 地址为查询分组的发送者，也就是说，ARP 响应分组只有一个目的地，而非广播。\"},\"2485\":{\"t\":\"主机 A 终将收到主机 B 的响应分组，提取出该分组中的 IP 地址和 MAC 地址后，构造映射信息，加入到自己的 ARP 表中。\"},\"2486\":{\"t\":\"总结来说，ARP 协议是一个广播问询，单播响应协议。\"},\"2487\":{\"h\":\"不同局域网内的 MAC 寻址\",\"a\":\"不同局域网内的-mac-寻址\"},\"2488\":{\"t\":\"更复杂的情况是，发送主机 A 和接收主机 B 不在同一个子网中，假设一个一般场景，两台主机所在的子网由一台路由器联通。这里需要注意的是，一般情况下，我们说网络设备都有一个 IP 地址和一个 MAC 地址，这里说的网络设备，更严谨的说法应该是一个接口。路由器作为互联设备，具有多个接口，每个接口同样也应该具备不重复的 IP 地址和 MAC 地址。因此，在讨论 ARP 表时，路由器的多个接口都各自维护一个 ARP 表，而非一个路由器只维护一个 ARP 表。\"},\"2489\":{\"t\":\"接下来，回顾同一子网内的 MAC 寻址，如果主机 A 发送一个广播问询分组，那么 A 所在子网内的所有设备（接口）都将不会捕获该分组，因为该分组的目的 IP 地址在另一个子网中，本子网内不会有设备成功接收。那么，主机 A 应该发送怎样的查询分组呢？整个过程按照时间顺序发生的事件如下：\"},\"2490\":{\"t\":\"主机 A 查询 ARP 表，期望寻找到目标路由器的本子网接口的 MAC 地址。\"},\"2491\":{\"t\":\"目标路由器指的是，根据目的主机 B 的 IP 地址，分析出 B 所在的子网，能够把报文转发到 B 所在子网的那个路由器。\"},\"2492\":{\"t\":\"主机 A 未能找到目标路由器的本子网接口的 MAC 地址，将采用 ARP 协议，问询到该 MAC 地址，由于目标接口与主机 A 在同一个子网内，该过程与同一局域网内的 MAC 寻址相同。\"},\"2493\":{\"t\":\"主机 A 获取到目标接口的 MAC 地址，先构造 IP 数据报，其中源 IP 是 A 的 IP 地址，目的 IP 地址是 B 的 IP 地址，再构造链路层帧，其中源 MAC 地址是 A 的 MAC 地址，目的 MAC 地址是本子网内与路由器连接的接口的 MAC 地址。主机 A 将把这个链路层帧，以单播的方式，发送给目标接口。\"},\"2494\":{\"t\":\"目标接口接收到了主机 A 发过来的链路层帧，解析，根据目的 IP 地址，查询转发表，将该 IP 数据报转发到与主机 B 所在子网相连的接口上。\"},\"2495\":{\"t\":\"到此，该帧已经从主机 A 所在的子网，转移到了主机 B 所在的子网了。\"},\"2496\":{\"t\":\"路由器接口查询 ARP 表，期望寻找到主机 B 的 MAC 地址。\"},\"2497\":{\"t\":\"路由器接口如未能找到主机 B 的 MAC 地址，将采用 ARP 协议，广播问询，单播响应，获取到主机 B 的 MAC 地址。\"},\"2498\":{\"t\":\"路由器接口将对 IP 数据报重新封装成链路层帧，目标 MAC 地址为主机 B 的 MAC 地址，单播发送，直到目的地。\"},\"2499\":{\"h\":\"HTTP\",\"a\":\"http\"},\"2500\":{\"h\":\"HTTP 状态码有哪些？\",\"a\":\"http-状态码有哪些\"},\"2501\":{\"t\":\"HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。\"},\"2502\":{\"t\":\"常见 HTTP 状态码\"},\"2503\":{\"h\":\"HTTP/1.0 和 HTTP/1.1 有什么区别？\",\"a\":\"http-1-0-和-http-1-1-有什么区别\"},\"2504\":{\"t\":\"连接方式 : HTTP/1.0 为短连接，HTTP/1.1 支持长连接。\"},\"2505\":{\"t\":\"状态响应码 : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，100 (Continue)——在请求大资源前的预热请求，206 (Partial Content)——范围请求的标识码，409 (Conflict)——请求与当前资源的规定冲突，410 (Gone)——资源已被永久转移，而且没有任何已知的转发地址。\"},\"2506\":{\"t\":\"缓存机制 : 在 HTTP/1.0 中主要使用 Header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP/1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。\"},\"2507\":{\"t\":\"Host 头（Host Header）处理 :HTTP/1.1 引入了 Host 头字段，允许在同一 IP 地址上托管多个域名，从而支持虚拟主机的功能。而 HTTP/1.0 没有 Host 头字段，无法实现虚拟主机。\"},\"2508\":{\"h\":\"HTTP/1.1 和 HTTP/2.0 有什么区别？\",\"a\":\"http-1-1-和-http-2-0-有什么区别\"},\"2509\":{\"t\":\"IO 多路复用（Multiplexing） ：HTTP/2.0 在同一连接上可以同时传输多个请求和响应（可以看作是 HTTP/1.1 中长链接的升级版本）。HTTP/1.1 则使用串行方式，每个请求和响应都需要独立的连接。这使得 HTTP/2.0 在处理多个请求时更加高效，减少了网络延迟和提高了性能。\"},\"2510\":{\"t\":\"二进制帧（Binary Frames） ：HTTP/2.0 使用二进制帧进行数据传输，而 HTTP/1.1 则使用文本格式的报文。二进制帧更加紧凑和高效，减少了传输的数据量和带宽消耗。\"},\"2511\":{\"t\":\"头部压缩（Header Compression） ：HTTP/1.1 支持Body压缩，Header不支持压缩。HTTP/2.0 支持对Header压缩，减少了网络开销。\"},\"2512\":{\"t\":\"服务器推送（Server Push）：HTTP/2.0 支持服务器推送，可以在客户端请求一个资源时，将其他相关资源一并推送给客户端，从而减少了客户端的请求次数和延迟。而 HTTP/1.1 需要客户端自己发送请求来获取相关资源。\"},\"2513\":{\"h\":\"HTTP/2.0 和 HTTP/3.0 有什么区别？\",\"a\":\"http-2-0-和-http-3-0-有什么区别\"},\"2514\":{\"t\":\"传输协议 ：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP/3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\"},\"2515\":{\"t\":\"连接建立 ：HTTP/2.0 需要经过经典的 TCP 三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP/3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。\"},\"2516\":{\"t\":\"队头阻塞 ：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。\"},\"2517\":{\"h\":\"HTTPS\",\"a\":\"https\"},\"2518\":{\"h\":\"HTTP 和 HTTPS 有什么区别？\",\"a\":\"http-和-https-有什么区别\"},\"2519\":{\"t\":\"端口号 ：HTTP 默认是 80，HTTPS 默认是 443。\"},\"2520\":{\"t\":\"URL 前缀 ：HTTP 的 URL 前缀是 http://，HTTPS 的 URL 前缀是 https://。\"},\"2521\":{\"t\":\"安全性和资源消耗 ： HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。\"},\"2522\":{\"t\":\"SEO（搜索引擎优化） ：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。\"},\"2523\":{\"h\":\"DNS\",\"a\":\"dns\"},\"2524\":{\"t\":\"DNS 中的域名都是用句点来分隔的，比如 www.server.com，这里的句点代表了不同层次之间的界限。\"},\"2525\":{\"t\":\"在域名中，越靠右的位置表示其层级越高。\"},\"2526\":{\"t\":\"实际上域名最后还有一个点，比如 www.server.com.，这个最后的一个点代表根域名。\"},\"2527\":{\"t\":\"也就是，. 根域是在最顶层，它的下一层就是 .com 顶级域，再下面是 server.com。\"},\"2528\":{\"t\":\"所以域名的层级关系类似一个树状结构：\"},\"2529\":{\"t\":\"根 DNS 服务器（.）\"},\"2530\":{\"t\":\"顶级域 DNS 服务器（.com）\"},\"2531\":{\"t\":\"权威 DNS 服务器（server.com）\"},\"2532\":{\"t\":\"根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。\"},\"2533\":{\"t\":\"这样一来，任何 DNS 服务器就都可以找到并访问根域 DNS 服务器了。\"},\"2534\":{\"t\":\"因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。\"},\"2535\":{\"h\":\"域名解析的工作流程：\",\"a\":\"域名解析的工作流程\"},\"2536\":{\"t\":\"客户端首先会发出一个 DNS 请求，问 www.server.com 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。\"},\"2537\":{\"t\":\"本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 www.server.com，则它直接返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 www.server.com 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。\"},\"2538\":{\"t\":\"根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“www.server.com 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”\"},\"2539\":{\"t\":\"本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 www.server.com 的 IP 地址吗？”\"},\"2540\":{\"t\":\"顶级域名服务器说：“我给你负责 www.server.com 区域的权威 DNS 服务器的地址，你去问它应该能问到”。\"},\"2541\":{\"t\":\"本地 DNS 于是转向问权威 DNS 服务器：“老三，www.server.com对应的IP是啥呀？” server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。\"},\"2542\":{\"t\":\"权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。\"},\"2543\":{\"t\":\"本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。\"},\"2544\":{\"h\":\"1.计算机网络基础\"},\"2545\":{\"h\":\"1.键入网址到网页显示，期间发生了什么？\",\"a\":\"_1-键入网址到网页显示-期间发生了什么\"},\"2546\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"2547\":{\"t\":\"总体来说分为以下几个过程:\"},\"2548\":{\"t\":\"DNS 解析\"},\"2549\":{\"t\":\"TCP 连接\"},\"2550\":{\"t\":\"发送 HTTP 请求\"},\"2551\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"2552\":{\"t\":\"浏览器解析渲染页面\"},\"2553\":{\"t\":\"连接结束\"},\"2554\":{\"h\":\"2.OSI 七层模型\",\"a\":\"_2-osi-七层模型\"},\"2555\":{\"h\":\"3.TCP/IP 四层模型\",\"a\":\"_3-tcp-ip-四层模型\"},\"2556\":{\"h\":\"MySQL\"},\"2557\":{\"h\":\"MySQL\",\"a\":\"mysql\"},\"2558\":{\"h\":\"InnoDB特性\",\"a\":\"innodb特性\"},\"2559\":{\"h\":\"MyISAM 和 InnoDB 有什么区别？\",\"a\":\"myisam-和-innodb-有什么区别\"},\"2560\":{\"t\":\"MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，可谓是风光一时。\"},\"2561\":{\"t\":\"虽然，MyISAM 的性能还行，各种特性也还不错（比如全文索引、压缩、空间函数等）。但是，MyISAM 不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。\"},\"2562\":{\"t\":\"MySQL 5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。\"},\"2563\":{\"t\":\"言归正传！咱们下面还是来简单对比一下两者：\"},\"2564\":{\"t\":\"1.是否支持行级锁\"},\"2565\":{\"t\":\"MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。\"},\"2566\":{\"t\":\"也就说，MyISAM 一锁就是锁住了整张表，这在并发写的情况下是多么滴憨憨啊！这也是为什么 InnoDB 在并发写的时候，性能更牛皮了！\"},\"2567\":{\"t\":\"2.是否支持事务\"},\"2568\":{\"t\":\"MyISAM 不提供事务支持。\"},\"2569\":{\"t\":\"InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别，具有提交(commit)和回滚(rollback)事务的能力。并且，InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）。\"},\"2570\":{\"t\":\"3.是否支持外键\"},\"2571\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2572\":{\"t\":\"外键对于维护数据一致性非常有帮助，但是对性能有一定的损耗。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，在业务代码中进行约束即可！\"},\"2573\":{\"t\":\"阿里的《Java 开发手册》也是明确规定禁止使用外键的。\"},\"2574\":{\"t\":\"4.是否支持数据库异常崩溃后的安全恢复\"},\"2575\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2576\":{\"t\":\"使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 redo log 。\"},\"2577\":{\"t\":\"5.是否支持 MVCC\"},\"2578\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2579\":{\"t\":\"讲真，这个对比有点废话，毕竟 MyISAM 连行级锁都不支持。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能。\"},\"2580\":{\"t\":\"6.索引实现不一样。\"},\"2581\":{\"t\":\"虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。\"},\"2582\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。\"},\"2583\":{\"h\":\"索引\",\"a\":\"索引\"},\"2584\":{\"t\":\"索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。\"},\"2585\":{\"h\":\"底层数据结构：\",\"a\":\"底层数据结构\"},\"2586\":{\"t\":\"Hash 表\"},\"2587\":{\"t\":\"哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。\"},\"2588\":{\"t\":\"为何能够通过 key 快速取出 value 呢？ 原因在于 哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。\"},\"2589\":{\"t\":\"既然哈希表这么快，为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。\"},\"2590\":{\"t\":\"B 树& B+树\"},\"2591\":{\"t\":\"B 树也称 B-树,全称为 多路平衡查找树 ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 Balanced （平衡）的意思。\"},\"2592\":{\"t\":\"目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。\"},\"2593\":{\"t\":\"B 树& B+树两者有何异同呢？\"},\"2594\":{\"t\":\"B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\"},\"2595\":{\"t\":\"B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。\"},\"2596\":{\"t\":\"B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\"},\"2597\":{\"t\":\"在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）\"},\"2598\":{\"t\":\"MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引（非聚集索引）”。\"},\"2599\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“聚簇索引（聚集索引）”，而其余的索引都作为 辅助索引 ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。\"},\"2600\":{\"h\":\"类型总结\",\"a\":\"类型总结\"},\"2601\":{\"t\":\"按照数据结构维度划分：\"},\"2602\":{\"t\":\"BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。\"},\"2603\":{\"t\":\"哈希索引：类似键值对的形式，一次即可定位。\"},\"2604\":{\"t\":\"RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2605\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2606\":{\"t\":\"按照底层存储方式角度划分：\"},\"2607\":{\"t\":\"聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。\"},\"2608\":{\"t\":\"非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"2609\":{\"t\":\"按照应用维度划分：\"},\"2610\":{\"t\":\"主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。\"},\"2611\":{\"t\":\"普通索引：仅加速查询。\"},\"2612\":{\"t\":\"唯一索引：加速查询 + 列值唯一（可以有 NULL）。\"},\"2613\":{\"t\":\"覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。\"},\"2614\":{\"t\":\"联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。\"},\"2615\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2616\":{\"h\":\"主键索引：\",\"a\":\"主键索引\"},\"2617\":{\"t\":\"数据表的主键列使用的就是主键索引。\"},\"2618\":{\"t\":\"一张数据表有只能有一个主键，并且主键不能为 null，不能重复。\"},\"2619\":{\"t\":\"在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。\"},\"2620\":{\"t\":\"img\"},\"2621\":{\"h\":\"二级索引：\",\"a\":\"二级索引\"},\"2622\":{\"t\":\"二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。\"},\"2623\":{\"t\":\"唯一索引，普通索引，前缀索引等索引属于二级索引。\"},\"2624\":{\"t\":\"PS: 不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。\"},\"2625\":{\"t\":\"唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。\"},\"2626\":{\"t\":\"普通索引(Index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。\"},\"2627\":{\"t\":\"前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。\"},\"2628\":{\"t\":\"全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。\"},\"2629\":{\"t\":\"img\"},\"2630\":{\"h\":\"聚簇索引：\",\"a\":\"聚簇索引\"},\"2631\":{\"t\":\"聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。\"},\"2632\":{\"t\":\"在 MySQL 中，InnoDB 引擎的表的 .ibd文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。\"},\"2633\":{\"t\":\"优点 ：\"},\"2634\":{\"t\":\"查询速度非常快 ：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。\"},\"2635\":{\"t\":\"对排序查找和范围查找优化 ：聚簇索引对于主键的排序查找和范围查找速度非常快。\"},\"2636\":{\"t\":\"缺点 ：\"},\"2637\":{\"t\":\"依赖于有序的数据 ：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。\"},\"2638\":{\"t\":\"更新代价大 ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。\"},\"2639\":{\"h\":\"非聚簇索引：\",\"a\":\"非聚簇索引\"},\"2640\":{\"t\":\"非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"2641\":{\"t\":\"非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。\"},\"2642\":{\"t\":\"优点 ：\"},\"2643\":{\"t\":\"更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的\"},\"2644\":{\"t\":\"缺点 ：\"},\"2645\":{\"t\":\"依赖于有序的数据 ：跟聚簇索引一样，非聚簇索引也依赖于有序的数据\"},\"2646\":{\"t\":\"可能会二次查询(回表) ：这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。\"},\"2647\":{\"h\":\"覆盖索引：\",\"a\":\"覆盖索引\"},\"2648\":{\"t\":\"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 覆盖索引（Covering Index） 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！\"},\"2649\":{\"t\":\"覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。\"},\"2650\":{\"t\":\"如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。\"},\"2651\":{\"h\":\"联合索引：\",\"a\":\"联合索引\"},\"2652\":{\"t\":\"使用表中的多个字段创建索引，就是 联合索引，也叫 组合索引 或 复合索引。\"},\"2653\":{\"t\":\"最左前缀匹配原则\"},\"2654\":{\"t\":\"最左前缀匹配原则指的是，在使用联合索引时，MySQL 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 >、<）才会停止匹配。对于 >=、<=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。\"},\"2655\":{\"t\":\"索引下推\"},\"2656\":{\"t\":\"索引下推（Index Condition Pushdown） 是 MySQL 5.6 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。\"},\"2657\":{\"h\":\"正确使用索引的一些建议：\",\"a\":\"正确使用索引的一些建议\"},\"2658\":{\"t\":\"选择合适的字段创建索引：\"},\"2659\":{\"t\":\"不为 NULL 的字段 ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。\"},\"2660\":{\"t\":\"被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。\"},\"2661\":{\"t\":\"被作为条件查询的字段 ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。\"},\"2662\":{\"t\":\"频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。\"},\"2663\":{\"t\":\"被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。\"},\"2664\":{\"t\":\"被频繁更新的字段应该慎重建立索引：\"},\"2665\":{\"t\":\"虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。\"},\"2666\":{\"t\":\"限制每张表上的索引数量：\"},\"2667\":{\"t\":\"索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。\"},\"2668\":{\"t\":\"索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。\"},\"2669\":{\"t\":\"因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。\"},\"2670\":{\"t\":\"尽可能的考虑建立联合索引而不是单列索引：\"},\"2671\":{\"t\":\"因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。\"},\"2672\":{\"t\":\"注意避免冗余索引：\"},\"2673\":{\"t\":\"冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\"},\"2674\":{\"t\":\"字符串类型的字段使用前缀索引代替普通索引：\"},\"2675\":{\"t\":\"前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。\"},\"2676\":{\"t\":\"避免索引失效：\"},\"2677\":{\"t\":\"索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：\"},\"2678\":{\"t\":\"使用 SELECT * 进行查询;\"},\"2679\":{\"t\":\"创建了组合索引，但查询条件未遵守最左匹配原则;\"},\"2680\":{\"t\":\"在索引列上进行计算、函数、类型转换等操作;\"},\"2681\":{\"t\":\"以 % 开头的 LIKE 查询比如 like '%abc';\"},\"2682\":{\"t\":\"查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;\"},\"2683\":{\"t\":\"发生隐式转换\"},\"2684\":{\"h\":\"锁机制\",\"a\":\"锁机制\"},\"2685\":{\"t\":\"在 MySQL 里，根据加锁的范围，可以分为全局锁、表级锁和行锁三类。\"},\"2686\":{\"t\":\"img\"},\"2687\":{\"h\":\"全局锁：\",\"a\":\"全局锁\"},\"2688\":{\"t\":\"要使用全局锁，则要执行这条命令：\"},\"2689\":{\"t\":\"flush tables with read lock \"},\"2690\":{\"t\":\"执行后，整个数据库就处于只读状态了，这时其他线程执行以下操作，都会被阻塞：\"},\"2691\":{\"t\":\"对数据的增删改操作，比如 insert、delete、update等语句；\"},\"2692\":{\"t\":\"对表结构的更改操作，比如 alter table、drop table 等语句。\"},\"2693\":{\"t\":\"如果要释放全局锁，则要执行这条命令：\"},\"2694\":{\"t\":\"unlock tables \"},\"2695\":{\"t\":\"全局锁应用场景是什么？\"},\"2696\":{\"t\":\"全局锁主要应用于做全库逻辑备份，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。\"},\"2697\":{\"t\":\"加全局锁又会带来什么缺点呢？\"},\"2698\":{\"t\":\"加上全局锁，意味着整个数据库都是只读状态。\"},\"2699\":{\"t\":\"那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。\"},\"2700\":{\"t\":\"既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？\"},\"2701\":{\"t\":\"有的，如果数据库的引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。\"},\"2702\":{\"t\":\"因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。\"},\"2703\":{\"t\":\"备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 –single-transaction 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。\"},\"2704\":{\"t\":\"InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。\"},\"2705\":{\"t\":\"但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。\"},\"2706\":{\"h\":\"表级锁：\",\"a\":\"表级锁\"},\"2707\":{\"t\":\"MySQL 里面表级别的锁有这几种：\"},\"2708\":{\"t\":\"表锁；\"},\"2709\":{\"t\":\"元数据锁（MDL）;\"},\"2710\":{\"t\":\"意向锁；\"},\"2711\":{\"t\":\"AUTO-INC 锁；\"},\"2712\":{\"h\":\"表锁\",\"a\":\"表锁\"},\"2713\":{\"t\":\"先来说说表锁。\"},\"2714\":{\"t\":\"如果我们想对学生表（t_student）加表锁，可以使用下面的命令：\"},\"2715\":{\"t\":\"//表级别的共享锁，也就是读锁； lock tables t_student read; //表级别的独占锁，也就是写锁； lock tables t_stuent write; \"},\"2716\":{\"t\":\"需要注意的是，表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。\"},\"2717\":{\"t\":\"也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放。\"},\"2718\":{\"t\":\"要释放表锁，可以使用下面这条命令，会释放当前会话的所有表锁：\"},\"2719\":{\"t\":\"unlock tables \"},\"2720\":{\"t\":\"另外，当会话退出后，也会释放所有表锁。\"},\"2721\":{\"t\":\"不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁。\"},\"2722\":{\"h\":\"元数据锁\",\"a\":\"元数据锁\"},\"2723\":{\"t\":\"再来说说元数据锁（MDL）。\"},\"2724\":{\"t\":\"我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：\"},\"2725\":{\"t\":\"对一张表进行 CRUD 操作时，加的是 MDL 读锁；\"},\"2726\":{\"t\":\"对一张表做结构变更操作的时候，加的是 MDL 写锁；\"},\"2727\":{\"t\":\"MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。\"},\"2728\":{\"t\":\"当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。\"},\"2729\":{\"t\":\"反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。\"},\"2730\":{\"t\":\"MDL 不需要显示调用，那它是在什么时候释放的?\"},\"2731\":{\"t\":\"MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。\"},\"2732\":{\"t\":\"那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），那在对表结构做变更操作的时候，可能会发生意想不到的事情，比如下面这个顺序的场景：\"},\"2733\":{\"t\":\"首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；\"},\"2734\":{\"t\":\"然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；\"},\"2735\":{\"t\":\"接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，\"},\"2736\":{\"t\":\"那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。\"},\"2737\":{\"t\":\"为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？\"},\"2738\":{\"t\":\"这是因为申请 MDL 锁的操作会形成一个队列，队列中写锁获取优先级高于读锁，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。\"},\"2739\":{\"t\":\"所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。\"},\"2740\":{\"h\":\"意向锁\",\"a\":\"意向锁\"},\"2741\":{\"t\":\"接着，说说意向锁。\"},\"2742\":{\"t\":\"在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；\"},\"2743\":{\"t\":\"在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；\"},\"2744\":{\"t\":\"也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。\"},\"2745\":{\"t\":\"而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。\"},\"2746\":{\"t\":\"不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：\"},\"2747\":{\"t\":\"//先在表上加上意向共享锁，然后对读取的记录加共享锁 select ... lock in share mode; //先表上加上意向独占锁，然后对读取的记录加独占锁 select ... for update; \"},\"2748\":{\"t\":\"意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables ... read*）和独占表锁（*lock tables ... write*）发生冲突。\"},\"2749\":{\"t\":\"表锁和行锁是满足读读共享、读写互斥、写写互斥的。\"},\"2750\":{\"t\":\"如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。\"},\"2751\":{\"t\":\"那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。\"},\"2752\":{\"t\":\"所以，意向锁的目的是为了快速判断表里是否有记录被加锁。\"},\"2753\":{\"h\":\"AUTO-INC 锁\",\"a\":\"auto-inc-锁\"},\"2754\":{\"t\":\"表里的主键通常都会设置成自增的，这是通过对主键字段声明 AUTO_INCREMENT 属性实现的。\"},\"2755\":{\"t\":\"之后可以在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 AUTO-INC 锁实现的。\"},\"2756\":{\"t\":\"AUTO-INC 锁是特殊的表锁机制，锁不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放。\"},\"2757\":{\"t\":\"在插入数据时，会加一个表级别的 AUTO-INC 锁，然后为被 AUTO_INCREMENT 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。\"},\"2758\":{\"t\":\"那么，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 AUTO_INCREMENT 修饰的字段的值是连续递增的。\"},\"2759\":{\"t\":\"但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。\"},\"2760\":{\"t\":\"因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种轻量级的锁来实现自增。\"},\"2761\":{\"t\":\"一样也是在插入数据的时候，会为被 AUTO_INCREMENT 修饰的字段加上轻量级锁，然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁。\"},\"2762\":{\"t\":\"InnoDB 存储引擎提供了个 innodb_autoinc_lock_mode 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。\"},\"2763\":{\"t\":\"当 innodb_autoinc_lock_mode = 0，就采用 AUTO-INC 锁，语句执行结束后才释放锁；\"},\"2764\":{\"t\":\"当 innodb_autoinc_lock_mode = 2，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。\"},\"2765\":{\"t\":\"当 innodb_autoinc_lock_mode = 1： \"},\"2766\":{\"t\":\"普通 insert 语句，自增锁在申请之后就马上释放；\"},\"2767\":{\"t\":\"类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；\"},\"2768\":{\"t\":\"当 innodb_autoinc_lock_mode = 2 是性能最高的方式，但是当搭配 binlog 的日志格式是 statement 一起使用的时候，在「主从复制的场景」中会发生数据不一致的问题。\"},\"2769\":{\"t\":\"要解决这问题，binlog 日志格式要设置为 row，这样在 binlog 里面记录的是主库分配的自增值，到备库执行的时候，主库的自增值是什么，从库的自增值就是什么。\"},\"2770\":{\"t\":\"所以，当 innodb_autoinc_lock_mode = 2 时，并且 binlog_format = row，既能提升并发性，又不会出现数据一致性问题。\"},\"2771\":{\"h\":\"行级锁：\",\"a\":\"行级锁\"},\"2772\":{\"t\":\"InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。\"},\"2773\":{\"t\":\"前面也提到，普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为锁定读。\"},\"2774\":{\"t\":\"//对读取的记录加共享锁 select ... lock in share mode; //对读取的记录加独占锁 select ... for update; \"},\"2775\":{\"t\":\"上面这两条语句必须在一个事务中，因为当事务提交了，锁就会被释放，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。\"},\"2776\":{\"t\":\"共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。\"},\"2777\":{\"t\":\"img\"},\"2778\":{\"t\":\"行级锁的类型主要有三类：\"},\"2779\":{\"t\":\"Record Lock，记录锁，也就是仅仅把一条记录锁上；\"},\"2780\":{\"t\":\"Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"},\"2781\":{\"t\":\"Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"2782\":{\"h\":\"Record Lock\",\"a\":\"record-lock\"},\"2783\":{\"t\":\"Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：\"},\"2784\":{\"t\":\"当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;\"},\"2785\":{\"t\":\"当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。\"},\"2786\":{\"h\":\"Gap Lock\",\"a\":\"gap-lock\"},\"2787\":{\"t\":\"Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。\"},\"2788\":{\"t\":\"假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。\"},\"2789\":{\"t\":\"间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。\"},\"2790\":{\"h\":\"Next-Key Lock\",\"a\":\"next-key-lock\"},\"2791\":{\"t\":\"Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"2792\":{\"t\":\"所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。\"},\"2793\":{\"t\":\"next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。\"},\"2794\":{\"t\":\"比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。\"},\"2795\":{\"t\":\"虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。\"},\"2796\":{\"h\":\"插入意向锁\",\"a\":\"插入意向锁\"},\"2797\":{\"t\":\"一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。\"},\"2798\":{\"t\":\"如果有的话，插入操作就会发生阻塞，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个插入意向锁，表明有事务想在某个区间插入新记录，但是现在处于等待状态。\"},\"2799\":{\"t\":\"插入意向锁名字虽然有意向锁，但是它并不是意向锁，它是一种特殊的间隙锁，属于行级别锁。\"},\"2800\":{\"t\":\"如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。\"},\"2801\":{\"t\":\"插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。\"},\"2802\":{\"h\":\"ACID事务\",\"a\":\"acid事务\"},\"2803\":{\"t\":\"事务是由 MySQL 的引擎来实现的，我们常见的 InnoDB 引擎它是支持事务的。\"},\"2804\":{\"t\":\"不过并不是所有的引擎都能支持事务，比如 MySQL 原生的 MyISAM 引擎就不支持事务，也正是这样，所以大多数 MySQL 的引擎都是用 InnoDB。\"},\"2805\":{\"t\":\"事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：\"},\"2806\":{\"t\":\"原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。\"},\"2807\":{\"t\":\"一致性（Consistency）：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。\"},\"2808\":{\"t\":\"隔离性（Isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。\"},\"2809\":{\"t\":\"持久性（Durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\"},\"2810\":{\"t\":\"InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？\"},\"2811\":{\"t\":\"持久性是通过 redo log （重做日志）来保证的；\"},\"2812\":{\"t\":\"原子性是通过 undo log（回滚日志） 来保证的；\"},\"2813\":{\"t\":\"隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；\"},\"2814\":{\"t\":\"一致性则是通过持久性+原子性+隔离性来保证；\"},\"2815\":{\"h\":\"脏读\",\"a\":\"脏读\"},\"2816\":{\"t\":\"如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。\"},\"2817\":{\"t\":\"举个栗子。\"},\"2818\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后再执行更新操作，如果此时事务 A 还没有提交事务，而此时正好事务 B 也从数据库中读取小林的余额数据，那么事务 B 读取到的余额数据是刚才事务 A 更新后的数据，即使没有提交事务。\"},\"2819\":{\"t\":\"因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。\"},\"2820\":{\"h\":\"不可重复读\",\"a\":\"不可重复读\"},\"2821\":{\"t\":\"在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。\"},\"2822\":{\"t\":\"举个栗子。\"},\"2823\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后继续执行代码逻辑处理，在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为不可重复读。\"},\"2824\":{\"h\":\"幻读\",\"a\":\"幻读\"},\"2825\":{\"t\":\"在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。\"},\"2826\":{\"t\":\"举个栗子。\"},\"2827\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库查询账户余额大于 100 万的记录，发现共有 5 条，然后事务 B 也按相同的搜索条件也是查询出了 5 条记录。\"},\"2828\":{\"t\":\"接下来，事务 A 插入了一条余额超过 100 万的账号，并提交了事务，此时数据库超过 100 万余额的账号个数就变为 6。\"},\"2829\":{\"t\":\"然后事务 B 再次查询账户余额大于 100 万的记录，此时查询到的记录数量有 6 条，发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。\"},\"2830\":{\"h\":\"四大隔离级别\",\"a\":\"四大隔离级别\"},\"2831\":{\"t\":\"SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：\"},\"2832\":{\"t\":\"读未提交（*read uncommitted*），指一个事务还没提交时，它做的变更就能被其他事务看到；\"},\"2833\":{\"t\":\"读提交（*read committed*），指一个事务提交之后，它做的变更才能被其他事务看到；\"},\"2834\":{\"t\":\"可重复读（*repeatable read*），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别；\"},\"2835\":{\"t\":\"串行化（*serializable* ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\"},\"2836\":{\"t\":\"按隔离水平高低排序如下：\"},\"2837\":{\"t\":\"图片\"},\"2838\":{\"t\":\"针对不同的隔离级别，并发事务时可能发生的现象也会不同。也就是说：\"},\"2839\":{\"t\":\"在「读未提交」隔离级别下，可能发生脏读、不可重复读和幻读现象；\"},\"2840\":{\"t\":\"在「读提交」隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；\"},\"2841\":{\"t\":\"在「可重复读」隔离级别下，可能发生幻读现象，但是不可能脏读和不可重复读现象；\"},\"2842\":{\"t\":\"在「串行化」隔离级别下，脏读、不可重复读和幻读现象都不可能会发生。\"},\"2843\":{\"t\":\"所以，要解决脏读现象，就要升级到「读提交」以上的隔离级别；要解决不可重复读现象，就要升级到「可重复读」的隔离级别，要解决幻读现象不建议将隔离级别升级到「串行化」。\"},\"2844\":{\"t\":\"不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，我们讨论的 MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入。\"},\"2845\":{\"t\":\"MySQL 在「可重复读」隔离级别下，可以很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能。\"},\"2846\":{\"t\":\"MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象，解决的方案有两种：\"},\"2847\":{\"t\":\"针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\"},\"2848\":{\"t\":\"针对当前读（select ... for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\"},\"2849\":{\"t\":\"这四种隔离级别具体是如何实现的呢？\"},\"2850\":{\"t\":\"对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；\"},\"2851\":{\"t\":\"对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；\"},\"2852\":{\"t\":\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View。\"},\"2853\":{\"h\":\"MVCC\",\"a\":\"mvcc\"},\"2854\":{\"t\":\"MVCC 的实现依赖于：隐藏字段、Read View、undo log。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改\"},\"2855\":{\"t\":\"隐藏字段\"},\"2856\":{\"t\":\"在内部，InnoDB 存储引擎为每行数据添加了三个 隐藏字段：\"},\"2857\":{\"t\":\"DB_TRX_ID（6字节）：表示最后一次插入或更新该行的事务 id。此外，delete 操作在内部被视为更新，只不过会在记录头 Record header 中的 deleted_flag 字段将其标记为已删除\"},\"2858\":{\"t\":\"DB_ROLL_PTR（7字节） 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空\"},\"2859\":{\"t\":\"DB_ROW_ID（6字节）：如果没有设置主键且该表没有唯一非空索引时，InnoDB 会使用该 id 来生成聚簇索引\"},\"2860\":{\"t\":\"ReadView主要是用来做可见性判断，里面保存了 “当前对本事务不可见的其他活跃事务”\"},\"2861\":{\"t\":\" trx_id_t m_low_limit_id; /* 大于等于这个 ID 的事务均不可见 */ trx_id_t m_up_limit_id; /* 小于这个 ID 的事务均可见 */ trx_id_t m_creator_trx_id; /* 创建该 Read View 的事务ID */ trx_id_t m_low_limit_no; /* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */ ids_t m_ids; /* 创建 Read View 时的活跃事务列表 */ \"},\"2862\":{\"t\":\"主要有以下字段：\"},\"2863\":{\"t\":\"m_low_limit_id：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见\"},\"2864\":{\"t\":\"m_up_limit_id：活跃事务列表 m_ids 中最小的事务 ID，如果 m_ids 为空，则 m_up_limit_id 为 m_low_limit_id。小于这个 ID 的数据版本均可见\"},\"2865\":{\"t\":\"m_ids：Read View 创建时其他未提交的活跃事务 ID 列表。创建 Read View时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。m_ids 不包括当前事务自己和已提交的事务（正在内存中）\"},\"2866\":{\"t\":\"m_creator_trx_id：创建该 Read View 的事务 ID\"},\"2867\":{\"t\":\"trans_visible\"},\"2868\":{\"h\":\"undo-log\",\"a\":\"undo-log\"},\"2869\":{\"t\":\"undo log 主要有两个作用：\"},\"2870\":{\"t\":\"当事务回滚时用于将数据恢复到修改前的样子\"},\"2871\":{\"t\":\"另一个作用是 MVCC ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 undo log 读取之前的版本数据，以此实现非锁定读\"},\"2872\":{\"t\":\"在 InnoDB 存储引擎中 undo log 分为两种： insert undo log 和 update undo log：\"},\"2873\":{\"t\":\"insert undo log ：指在 insert 操作中产生的 undo log。因为 insert 操作的记录只对事务本身可见，对其他事务不可见，故该 undo log 可以在事务提交后直接删除。不需要进行 purge 操作\"},\"2874\":{\"h\":\"Jdbc防止sql注入\",\"a\":\"jdbc防止sql注入\"},\"2875\":{\"t\":\"我们只需要使用PreparedStatement解决 将敏感字符进行转义。\"},\"2876\":{\"t\":\"我们可以看到输出的SQL文是把整个参数用引号包起来，并把参数中的引号作为转义字符，从而避免了参数也作为条件的一部分。\"},\"2877\":{\"t\":\"参考：https://blog.csdn.net/weixin_52258054/article/details/124891266\"},\"2878\":{\"h\":\"常见优化手段\",\"a\":\"常见优化手段\"},\"2879\":{\"h\":\"经常一起使用的列放到一个表中\",\"a\":\"经常一起使用的列放到一个表中\"},\"2880\":{\"t\":\"避免更多的关联操作。\"},\"2881\":{\"h\":\"禁止在数据库中存储文件（比如图片）这类大的二进制数据\",\"a\":\"禁止在数据库中存储文件-比如图片-这类大的二进制数据\"},\"2882\":{\"t\":\"在数据库中存储文件会严重影响数据库性能，消耗过多存储空间。\"},\"2883\":{\"t\":\"文件（比如图片）这类大的二进制数据通常存储于文件服务器，数据库只存储文件地址信息。\"},\"2884\":{\"h\":\"优先选择符合存储需要的最小的数据类型\",\"a\":\"优先选择符合存储需要的最小的数据类型\"},\"2885\":{\"t\":\"存储字节越小，占用也就空间越小，性能也越好。\"},\"2886\":{\"h\":\"同财务相关的金额类数据必须使用 decimal 类型\",\"a\":\"同财务相关的金额类数据必须使用-decimal-类型\"},\"2887\":{\"t\":\"非精准浮点 ：float,double\"},\"2888\":{\"t\":\"精准浮点 ：decimal\"},\"2889\":{\"t\":\"decimal 类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节。并且，decimal 可用于存储比 bigint 更大的整型数据\"},\"2890\":{\"t\":\"不过， 由于 decimal 需要额外的空间和计算开销，应该尽量只在需要对数据进行精确计算时才使用 decimal 。\"},\"2891\":{\"h\":\"单表不要包含过多字段\",\"a\":\"单表不要包含过多字段\"},\"2892\":{\"t\":\"如果一个表包含过多字段的话，可以考虑将其分解成多个表，必要时增加中间表进行关联。\"},\"2893\":{\"h\":\"禁止使用全文索引\",\"a\":\"禁止使用全文索引\"},\"2894\":{\"t\":\"全文索引不适用于 OLTP 场景。\"},\"2895\":{\"h\":\"禁止给表中的每一列都建立单独的索引\",\"a\":\"禁止给表中的每一列都建立单独的索引\"},\"2896\":{\"t\":\"5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。\"},\"2897\":{\"h\":\"每个 InnoDB 表必须有个主键\",\"a\":\"每个-innodb-表必须有个主键\"},\"2898\":{\"h\":\"禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询\",\"a\":\"禁止使用-select-必须使用-select-字段列表-查询\"},\"2899\":{\"t\":\"SELECT * 消耗更多的 CPU 和 IO 以网络带宽资源\"},\"2900\":{\"t\":\"SELECT * 无法使用覆盖索引\"},\"2901\":{\"t\":\"SELECT <字段列表> 可减少表结构变更带来的影响\"},\"2902\":{\"h\":\"避免使用子查询，可以把子查询优化为 join 操作\",\"a\":\"避免使用子查询-可以把子查询优化为-join-操作\"},\"2903\":{\"t\":\"通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。\"},\"2904\":{\"t\":\"子查询性能差的原因： 子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。\"},\"2905\":{\"h\":\"Redis\"},\"2906\":{\"h\":\"Redis\",\"a\":\"redis\"},\"2907\":{\"h\":\"Redis 为什么这么快？\",\"a\":\"redis-为什么这么快\"},\"2908\":{\"t\":\"Redis 内部做了非常多的性能优化，比较重要的主要有下面 3 点：\"},\"2909\":{\"t\":\"Redis 基于内存，内存的访问速度是磁盘的上千倍；\"},\"2910\":{\"t\":\"Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；\"},\"2911\":{\"t\":\"Redis 内置了多种优化过后的数据结构实现，性能非常高。\"},\"2912\":{\"h\":\"基本数据类型\",\"a\":\"基本数据类型\"},\"2913\":{\"t\":\"5 种基础数据类型 ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\"},\"2914\":{\"t\":\"3 种特殊数据类型 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。\"},\"2915\":{\"h\":\"数据结构及适用场景\",\"a\":\"数据结构及适用场景\"},\"2916\":{\"h\":\"String（字符串）：\",\"a\":\"string-字符串\"},\"2917\":{\"h\":\"数据结构：\",\"a\":\"数据结构\"},\"2918\":{\"t\":\"String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。\"},\"2919\":{\"t\":\"SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：\"},\"2920\":{\"t\":\"SDS 不仅可以保存文本数据，还可以保存二进制数据。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。\"},\"2921\":{\"t\":\"SDS 获取字符串长度的时间复杂度是 O(1)。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 len 属性记录了字符串长度，所以复杂度为 O(1)。\"},\"2922\":{\"t\":\"Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。\"},\"2923\":{\"h\":\"应用场景：\",\"a\":\"应用场景\"},\"2924\":{\"t\":\"常规数据（比如 session、token、序列化后的对象、图片的路径）的缓存；\"},\"2925\":{\"t\":\"计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；\"},\"2926\":{\"t\":\"分布式锁(利用 SETNX key value 命令可以实现一个最简易的分布式锁)；\"},\"2927\":{\"h\":\"List（列表）：\",\"a\":\"list-列表\"},\"2928\":{\"h\":\"数据结构：\",\"a\":\"数据结构-1\"},\"2929\":{\"t\":\"List 类型的底层数据结构是由双向链表或压缩列表实现的：\"},\"2930\":{\"t\":\"如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用压缩列表作为 List 类型的底层数据结构；\"},\"2931\":{\"t\":\"如果列表的元素不满足上面的条件，Redis 会使用双向链表作为 List 类型的底层数据结构；\"},\"2932\":{\"t\":\"但是在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表。\"},\"2933\":{\"h\":\"应用场景：\",\"a\":\"应用场景-1\"},\"2934\":{\"t\":\"消息队列，List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列；\"},\"2935\":{\"h\":\"Set（集合）：\",\"a\":\"set-集合\"},\"2936\":{\"h\":\"数据结构：\",\"a\":\"数据结构-2\"},\"2937\":{\"t\":\"Set 类型的底层数据结构是由哈希表或整数集合实现的：\"},\"2938\":{\"t\":\"如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用整数集合作为 Set 类型的底层数据结构；\"},\"2939\":{\"t\":\"如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构。\"},\"2940\":{\"h\":\"应用场景：\",\"a\":\"应用场景-2\"},\"2941\":{\"t\":\"点赞、共同关注；\"},\"2942\":{\"h\":\"Hash（散列）：\",\"a\":\"hash-散列\"},\"2943\":{\"h\":\"数据结构：\",\"a\":\"数据结构-3\"},\"2944\":{\"t\":\"Hash 类型的底层数据结构是由压缩列表或哈希表实现的：\"},\"2945\":{\"t\":\"如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用压缩列表作为 Hash 类型的底层数据结构；\"},\"2946\":{\"t\":\"如果哈希类型元素不满足上面条件，Redis 会使用哈希表作为 Hash 类型的 底层数据结构。\"},\"2947\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"2948\":{\"h\":\"应用场景：\",\"a\":\"应用场景-3\"},\"2949\":{\"t\":\"Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象以及购物车；\"},\"2950\":{\"h\":\"Zset（有序集合）：\",\"a\":\"zset-有序集合\"},\"2951\":{\"h\":\"数据结构：\",\"a\":\"数据结构-4\"},\"2952\":{\"t\":\"Zset 类型的底层数据结构是由压缩列表或跳表实现的：\"},\"2953\":{\"t\":\"如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构；\"},\"2954\":{\"t\":\"如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构；\"},\"2955\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"2956\":{\"h\":\"应用场景：\",\"a\":\"应用场景-4\"},\"2957\":{\"t\":\"有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。\"},\"2958\":{\"h\":\"持久化\",\"a\":\"持久化\"},\"2959\":{\"t\":\"Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:\"},\"2960\":{\"t\":\"快照（snapshotting，RDB）\"},\"2961\":{\"t\":\"只追加文件（append-only file, AOF）\"},\"2962\":{\"t\":\"RDB 和 AOF 的混合持久化(Redis 4.0 新增)\"},\"2963\":{\"h\":\"什么是 RDB 持久化？\",\"a\":\"什么是-rdb-持久化\"},\"2964\":{\"t\":\"Redis 可以通过创建快照来获得存储在内存里面的数据在 某个时间点 上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\"},\"2965\":{\"t\":\"快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\"},\"2966\":{\"t\":\"save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。 \"},\"2967\":{\"h\":\"RDB 创建快照时会阻塞主线程吗？\",\"a\":\"rdb-创建快照时会阻塞主线程吗\"},\"2968\":{\"t\":\"Redis 提供了两个命令来生成 RDB 快照文件：\"},\"2969\":{\"t\":\"save : 同步保存操作，会阻塞 Redis 主线程；\"},\"2970\":{\"t\":\"bgsave : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。\"},\"2971\":{\"h\":\"什么是 AOF 持久化？\",\"a\":\"什么是-aof-持久化\"},\"2972\":{\"t\":\"与快照持久化相比，AOF 持久化的实时性更好。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化（Redis 6.0 之后已经默认是开启了），可以通过 appendonly 参数开启：\"},\"2973\":{\"t\":\"appendonly yes \"},\"2974\":{\"t\":\"开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到 AOF 缓冲区 server.aof_buf 中，然后再写入到 AOF 文件中（此时还在系统内核缓存区为同步到磁盘），最后再根据持久化方式（ fsync策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中的。\"},\"2975\":{\"t\":\"只有同步到磁盘中才算持久化保存了，否则依然存在数据丢失的风险，比如说：系统内核缓存区的数据还未同步，磁盘机器就宕机了，那这部分数据就算丢失了。\"},\"2976\":{\"t\":\"AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\"},\"2977\":{\"h\":\"AOF 工作基本流程是怎样的？\",\"a\":\"aof-工作基本流程是怎样的\"},\"2978\":{\"t\":\"AOF 持久化功能的实现可以简单分为 5 步：\"},\"2979\":{\"t\":\"命令追加（append） ：所有的写命令会追加到 AOF 缓冲区中。\"},\"2980\":{\"t\":\"文件写入（write） ：将 AOF 缓冲区的数据写入到 AOF 文件中。这一步需要调用write函数（系统调用），write将数据写入到了系统内核缓冲区之后直接返回了（延迟写）。注意！！！此时并没有同步到磁盘。\"},\"2981\":{\"t\":\"文件同步（fsync） ：AOF 缓冲区根据对应的持久化方式（ fsync 策略）向硬盘做同步操作。这一步需要调用 fsync 函数（系统调用）， fsync 针对单个文件操作，对其进行强制硬盘同步，fsync 将阻塞直到写入磁盘完成后返回，保证了数据持久化。\"},\"2982\":{\"t\":\"文件重写（rewrite） ：随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。\"},\"2983\":{\"t\":\"重启加载（load） ：当 Redis 重启时，可以加载 AOF 文件进行数据恢复。\"},\"2984\":{\"t\":\"Linux 系统直接提供了一些函数用于对文件和设备进行访问和控制，这些函数被称为 系统调用（syscall）。\"},\"2985\":{\"t\":\"这里对上面提到的一些 Linux 系统调用再做一遍解释：\"},\"2986\":{\"t\":\"write ：写入系统内核缓冲区之后直接返回（仅仅是写到缓冲区），不会立即同步到硬盘。虽然提高了效率，但也带来了数据丢失的风险。同步硬盘操作通常依赖于系统调度机制，Linux 内核通常为 30s 同步一次，具体值取决于写出的数据量和 I/O 缓冲区的状态。\"},\"2987\":{\"t\":\"fsync ： fsync用于强制刷新系统内核缓冲区（同步到到磁盘），确保写磁盘操作结束才会返回。\"},\"2988\":{\"t\":\"AOF 工作流程图如下：\"},\"2989\":{\"t\":\"AOF 工作基本流程\"},\"2990\":{\"h\":\"删除与淘汰策略\",\"a\":\"删除与淘汰策略\"},\"2991\":{\"h\":\"过期的数据的删除策略了解么？\",\"a\":\"过期的数据的删除策略了解么\"},\"2992\":{\"t\":\"如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？\"},\"2993\":{\"t\":\"常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：\"},\"2994\":{\"t\":\"惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。\"},\"2995\":{\"t\":\"定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。\"},\"2996\":{\"t\":\"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性/懒汉式删除 。\"},\"2997\":{\"t\":\"但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。\"},\"2998\":{\"t\":\"怎么解决这个问题呢？答案就是：Redis 内存淘汰机制。\"},\"2999\":{\"h\":\"Redis 内存淘汰机制了解么？\",\"a\":\"redis-内存淘汰机制了解么\"},\"3000\":{\"t\":\"相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?\"},\"3001\":{\"t\":\"Redis 提供 6 种数据淘汰策略：\"},\"3002\":{\"t\":\"volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰。\"},\"3003\":{\"t\":\"volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰。\"},\"3004\":{\"t\":\"volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰。\"},\"3005\":{\"t\":\"allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。\"},\"3006\":{\"t\":\"allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰。\"},\"3007\":{\"t\":\"no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\"},\"3008\":{\"t\":\"4.0 版本后增加以下两种：\"},\"3009\":{\"t\":\"volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰。\"},\"3010\":{\"t\":\"allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。\"},\"3011\":{\"h\":\"主从复制\",\"a\":\"主从复制\"},\"3012\":{\"h\":\"哨兵\",\"a\":\"哨兵\"},\"3013\":{\"h\":\"缓存雪崩/击穿/穿透\",\"a\":\"缓存雪崩-击穿-穿透\"},\"3014\":{\"h\":\"什么是缓存穿透？\",\"a\":\"什么是缓存穿透\"},\"3015\":{\"t\":\"缓存穿透说简单点就是大量请求的 key 是不合理的，根本不存在于缓存中，也不存在于数据库中 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"3016\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法\"},\"3017\":{\"t\":\"最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。\"},\"3018\":{\"t\":\"1）缓存无效 key\"},\"3019\":{\"t\":\"如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： SET key value EX 10086 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。\"},\"3020\":{\"t\":\"2）布隆过滤器\"},\"3021\":{\"t\":\"布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。\"},\"3022\":{\"t\":\"具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\"},\"3023\":{\"t\":\"但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。\"},\"3024\":{\"t\":\"为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！\"},\"3025\":{\"t\":\"我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：\"},\"3026\":{\"t\":\"使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。\"},\"3027\":{\"t\":\"根据得到的哈希值，在位数组中把对应下标的值置为 1。\"},\"3028\":{\"t\":\"我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：\"},\"3029\":{\"t\":\"对给定元素再次进行相同的哈希计算；\"},\"3030\":{\"t\":\"得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。\"},\"3031\":{\"t\":\"然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）\"},\"3032\":{\"h\":\"什么是缓存击穿？\",\"a\":\"什么是缓存击穿\"},\"3033\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"3034\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-1\"},\"3035\":{\"t\":\"设置热点数据永不过期或者过期时间比较长。\"},\"3036\":{\"t\":\"针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。\"},\"3037\":{\"t\":\"请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。\"},\"3038\":{\"h\":\"缓存穿透和缓存击穿有什么区别？\",\"a\":\"缓存穿透和缓存击穿有什么区别\"},\"3039\":{\"t\":\"缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。\"},\"3040\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。\"},\"3041\":{\"h\":\"什么是缓存雪崩？\",\"a\":\"什么是缓存雪崩\"},\"3042\":{\"t\":\"我发现缓存雪崩这名字起的有点意思，哈哈。\"},\"3043\":{\"t\":\"实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。\"},\"3044\":{\"t\":\"另外，缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。\"},\"3045\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-2\"},\"3046\":{\"t\":\"针对 Redis 服务不可用的情况：\"},\"3047\":{\"t\":\"采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。\"},\"3048\":{\"t\":\"限流，避免同时处理大量的请求。\"},\"3049\":{\"t\":\"针对热点缓存失效的情况：\"},\"3050\":{\"t\":\"设置不同的失效时间比如随机设置缓存的失效时间。\"},\"3051\":{\"t\":\"缓存永不失效（不太推荐，实用性太差）。\"},\"3052\":{\"t\":\"设置二级缓存。\"},\"3053\":{\"h\":\"缓存雪崩和缓存击穿有什么区别？\",\"a\":\"缓存雪崩和缓存击穿有什么区别\"},\"3054\":{\"t\":\"缓存雪崩和缓存击穿比较像，但缓存雪崩导致的原因是缓存中的大量或者所有数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。\"},\"3055\":{\"h\":\"redis 6.0 多线程的实现机制：\",\"a\":\"redis-6-0-多线程的实现机制\"},\"3056\":{\"t\":\"https://blog.csdn.net/zhizhengguan/article/details/120627481\"},\"3057\":{\"h\":\"AQS\"},\"3058\":{\"h\":\"AQS\",\"a\":\"aqs\"},\"3059\":{\"t\":\"https://zhuanlan.zhihu.com/p/543902719\"},\"3060\":{\"h\":\"1.什么是AQS\",\"a\":\"_1-什么是aqs\"},\"3061\":{\"t\":\"AQS（AbstractQueuedSynchronizer），即队列同步器，它是构建锁或者其他同步组件的基础框架，如ReentrantLock、ReentrantReadWriteLock、Semaphore，CountDownLatch等。 AQS是一个抽象类，主要是通过继承方式使用，本身没有实现任何接口，仅仅是定义了同步状态的获取和释放的方法。AQS解决了了之类实现同步器的大量细节问题，例如获取同步状态，FIFO队列，入队和出队。自定义同步器在实现时候只需要实现共享资源state的获取和释放即可，至于获取资源失败入队/唤醒出队等，AQS在顶层已经定义好了。\"},\"3062\":{\"h\":\"2.AQS的两种功能\",\"a\":\"_2-aqs的两种功能\"},\"3063\":{\"t\":\"从使用层面来说，AQS功能分为两种：独占和共享\"},\"3064\":{\"t\":\"独占锁，每次只能一个线程持有锁，比如ReentrantLock就是独占锁\"},\"3065\":{\"t\":\"共享锁，允许多个线程持有锁，并发访问共享资源，比如ReentrantReadWriteLock\"},\"3066\":{\"t\":\"共享锁和独占锁的释放有一定区别，前面部分是一致的，先判断头结点是不是signal状态，如果是则唤醒头节点的下一个节点，并将该节点设置为头结点。而共享锁不一样，某个节点被设置为head之后，如果它的后继节点是shared状态，那么会尝试使用doReleaseShared方法尝试唤醒节点，实现共享状态的传播。\"},\"3067\":{\"h\":\"3.AQS内部实现\",\"a\":\"_3-aqs内部实现\"},\"3068\":{\"t\":\"AQS是依赖内部的同步队列实现，也就是FIFO双向队列，如果当前线程竞争锁失败，那么AQS会把当前线程以及等待状态封装成一个Node节点加入到同步队列中，同时阻塞该线程，当同步状态释放时，会把首节点唤醒，使其再次尝试获取同步状态。\"},\"3069\":{\"t\":\"AQS队列内部维护的是一个双向链表，这种结构每个数据都有两个指针，分别指向直接的的前驱节点和后继节点，当线程抢占锁失败时候，会封装成Node加入到AQS中去。\"},\"3070\":{\"t\":\"AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁 实现的，即将暂时获取不到锁的线程加入到队列中。\"},\"3071\":{\"t\":\"CLH(Craig,Landin,and Hagersten) 队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。在 CLH 同步队列中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。\"},\"3072\":{\"t\":\"CLH 队列结构如下图所示：\"},\"3073\":{\"t\":\"在同步队列中，一个节点表示一个线程，他保存这线程的引用ThreadId，状态（watiStatus）,前驱结点（pre），后继节点（next），其数据结构如下：\"},\"3074\":{\"h\":\"4.4acquire方法流程总结\",\"a\":\"_4-4acquire方法流程总结\"},\"3075\":{\"t\":\"首先通过子类判断是否获取了锁，如果获取了就什么也不干。tryAcquire\"},\"3076\":{\"t\":\"如果没有获取锁、通过线程创建节点加入同步队列的队尾。addWaiter\"},\"3077\":{\"t\":\"当线程在同步队列中不断的通过自旋去获取同步状态，如果获取了锁，就把其设为同步队列中的头节点，否则在同步队列中不停的自旋等待获取同步状态 acquireQueued,shouldParkAfterFailedAcquire(Node pre,Node node),parkAndCheckInterrupt()\"},\"3078\":{\"t\":\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\"},\"3079\":{\"h\":\"4.5AQS 底层使用了模板方法模式，你能说出几个需要重写的方法吗？\",\"a\":\"_4-5aqs-底层使用了模板方法模式-你能说出几个需要重写的方法吗\"},\"3080\":{\"t\":\"使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。\"},\"3081\":{\"t\":\"isHeldExclusively() ：该线程是否正在独占资源。只有用到 condition 才需要去实现它。\"},\"3082\":{\"t\":\"tryAcquire(int) ：独占方式。尝试获取资源，成功则返回 true，失败则返回 false。\"},\"3083\":{\"t\":\"tryRelease(int) ：独占方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"3084\":{\"t\":\"tryAcquireShared(int) ：共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\"},\"3085\":{\"t\":\"tryReleaseShared(int) ：共享方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"3086\":{\"h\":\"4.6总结\",\"a\":\"_4-6总结\"},\"3087\":{\"t\":\"总结的来说：线程获取锁，如果获取了锁就 保存当前获得锁的线程，如果没获取就创造一个节点通过compareAndSetTail(CAS操作)操作的方式将创建的节点加入同步队列的尾部，在同步队列中的节点通过自旋的操作不断去获取同步状态【当然由于FIFO先进先出的特性】等待时间越长就越先被唤醒。当头节点释放同步状态的时候，首先查看是否存在后继节点，如果存在就唤醒自己的后继节点，如果不存在就获取等待时间最长的符合条件的线程。\"},\"3088\":{\"h\":\"CAS\"},\"3089\":{\"h\":\"CAS\",\"a\":\"cas\"},\"3090\":{\"t\":\"在并发编程中我们都知道i++操作是非线程安全的，这是因为 i++操作不是原子操作。\"},\"3091\":{\"t\":\"如何保证原子性呢？常用的方法就是加锁。在Java语言中可以使用 Synchronized和CAS实现加锁效果。\"},\"3092\":{\"t\":\"Synchronized是悲观锁，线程开始执行第一步就是获取锁，一旦获得锁，其他的线程进入后就会阻塞等待锁。如果不好理解，举个生活中的例子：一个人进入厕所后首先把门锁上（获取锁），然后开始上厕所，这个时候有其他人来了只能在外面等（阻塞），就算再急也没用。上完厕所完事后把门打开（解锁），其他人就可以进入了。\"},\"3093\":{\"t\":\"CAS是乐观锁，线程执行的时候不会加锁，假设没有冲突去完成某项操作，如果因为冲突失败了就重试，最后直到成功为止。\"},\"3094\":{\"h\":\"1.什么是 CAS？\",\"a\":\"_1-什么是-cas\"},\"3095\":{\"t\":\"CAS（Compare-And-Swap）是比较并交换的意思，它是一条 CPU 并发原语，用于判断内存中某个值是否为预期值，如果是则更改为新的值，这个过程是原子的。下面用一个小示例解释一下。\"},\"3096\":{\"t\":\"CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，计算后要修改后的新值B。\"},\"3097\":{\"t\":\"（1）初始状态：在内存地址V中存储着变量值为 1。\"},\"3098\":{\"t\":\"（2）线程1想要把内存地址为 V 的变量值增加1。这个时候对线程1来说，旧的预期值A=1，要修改的新值B=2。\"},\"3099\":{\"t\":\"（3）在线程1要提交更新之前，线程2捷足先登了，已经把内存地址V中的变量值率先更新成了2。\"},\"3100\":{\"t\":\"（4）线程1开始提交更新，首先将预期值A和内存地址V的实际值比较（Compare），发现A不等于V的实际值，提交失败。\"},\"3101\":{\"t\":\"（5）线程1重新获取内存地址 V 的当前值，并重新计算想要修改的新值。此时对线程1来说，A=2，B=3。这个重新尝试的过程被称为自旋。如果多次失败会有多次自旋。\"},\"3102\":{\"t\":\"（6）线程 1 再次提交更新，这一次没有其他线程改变地址 V 的值。线程1进行Compare，发现预期值 A 和内存地址 V的实际值是相等的，进行 Swap 操作，将内存地址 V 的实际值修改为 B。\"},\"3103\":{\"t\":\"总结：更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 中的实际值相同时，才会将内存地址 V 对应的值修改为 B，这整个操作就是CAS。\"},\"3104\":{\"h\":\"2.CAS 基本原理\",\"a\":\"_2-cas-基本原理\"},\"3105\":{\"t\":\"CAS 主要包括两个操作：Compare和Swap，有人可能要问了：两个操作能保证是原子性吗？可以的。\"},\"3106\":{\"t\":\"CAS 是一种系统原语，原语属于操作系统用语，原语由若干指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，由操作系统硬件来保证。在 Intel 的 CPU 中，使用 cmpxchg 指令。\"},\"3107\":{\"t\":\"回到 Java 语言，JDK 是在 1.5 版本后才引入 CAS 操作，在sun.misc.Unsafe这个类中定义了 CAS 相关的方法。\"},\"3108\":{\"t\":\"在 Java 编程中我们通常不会直接使用到 CAS，都是通过 JDK 封装好的并发工具类来间接使用的，这些并发工具类都在java.util.concurrent包中。\"},\"3109\":{\"h\":\"3.CAS 的问题\",\"a\":\"_3-cas-的问题\"},\"3110\":{\"t\":\"CAS 不是万能的，也有很多问题。\"},\"3111\":{\"t\":\"敲黑板：CAS有哪些问题，这是面试高频考点，需要重点掌握。\"},\"3112\":{\"h\":\"3.1典型 ABA 问题\",\"a\":\"_3-1典型-aba-问题\"},\"3113\":{\"t\":\"ABA 是 CAS 操作的一个经典问题，假设有一个变量初始值为 A，修改为 B，然后又修改为 A，这个变量实际被修改过了，但是 CAS 操作可能无法感知到。\"},\"3114\":{\"t\":\"如果是整型还好，不会影响最终结果，但如果是对象的引用类型包含了多个变量，引用没有变实际上包含的变量已经被修改，这就会造成大问题。\"},\"3115\":{\"t\":\"如何解决？思路其实很简单，在变量前加版本号，每次变量更新了就把版本号加一，结果如下：\"},\"3116\":{\"t\":\"最终结果都是 A 但是版本号改变了。\"},\"3117\":{\"t\":\"从 JDK 1.5 开始提供了AtomicStampedReference类，这个类的 compareAndSe方法首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\"},\"3118\":{\"t\":\"​\"},\"3119\":{\"h\":\"3.2自旋开销问题\",\"a\":\"_3-2自旋开销问题\"},\"3120\":{\"t\":\"CAS 出现冲突后就会开始自旋操作，如果资源竞争非常激烈，自旋长时间不能成功就会给 CPU 带来非常大的开销。\"},\"3121\":{\"t\":\"解决方案：可以考虑限制自旋的次数，避免过度消耗 CPU；另外还可以考虑延迟执行。\"},\"3122\":{\"h\":\"3.3只能保证单个变量的原子性\",\"a\":\"_3-3只能保证单个变量的原子性\"},\"3123\":{\"t\":\"当对一个共享变量执行操作时，可以使用 CAS 来保证原子性，但是如果要对多个共享变量进行操作时，CAS 是无法保证原子性的，比如需要将 i 和 j 同时加 1：\"},\"3124\":{\"t\":\"i++；j++； \"},\"3125\":{\"t\":\"这个时候可以使用 synchronized 进行加锁，有没有其他办法呢？有，将多个变量操作合成一个变量操作。从 JDK1.5 开始提供了AtomicReference 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\"},\"3126\":{\"h\":\"3.4总结\",\"a\":\"_3-4总结\"},\"3127\":{\"t\":\"CAS 是 Compare And Swap，是一条 CPU 原语，由操作系统保证原子性。\"},\"3128\":{\"t\":\"Java语言从 JDK1.5 版本开始引入 CAS ， 并且是 Java 并发编程J.U.C 包的基石，应用非常广泛。\"},\"3129\":{\"t\":\"当然 CAS 也不是万能的，也有很多问题：典型 ABA 问题、自旋开销问题、只能保证单个变量的原子性。\"},\"3130\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&mid=2247510278&idx=3&sn=a58a9ec9f805d0e109c4b09cd497c9ca&chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1&scene=27\"},\"3131\":{\"h\":\"volitile、synchronized、ThreadLocal关键字\"},\"3132\":{\"h\":\"1.volitile关键字原理\",\"a\":\"_1-volitile关键字原理\"},\"3133\":{\"h\":\"1.1简述Java内存模型：\",\"a\":\"_1-1简述java内存模型\"},\"3134\":{\"t\":\"Java内存模型分为主内存和线程工作内存两大类。\"},\"3135\":{\"t\":\"主内存： **多个线程共享的内存。**如下图所示，方法区和堆属于主内存区域。\"},\"3136\":{\"t\":\"线程工作内存：每个线程独享的内存。如下图所示，虚拟机栈、本地方法栈、程序计数器属于线程独享的工作内存。\"},\"3137\":{\"t\":\"Java内存模型规定：所有变量都需要存储在主内存中，线程工作内存保存了变量在主内存中的副本，线程对变量的所有操作都在工作内存中进行，执行结束后在同步到主内存中去。这里必然会存在时间差，在这个时间差内，该线程对副本的操作，对于其他线程是不见的，从而造成了可见性问题。\"},\"3138\":{\"h\":\"1.2volatile的作用：\",\"a\":\"_1-2volatile的作用\"},\"3139\":{\"t\":\"保证共享变量的可见性： 使用volatile修饰的变量，任何线程对其进行操作都是在主内存中进行的，不会产生副本，从而保证共享变量的可见性。\"},\"3140\":{\"t\":\"防止局部指令重排序： happens-before规则中的volatile变量规则规定了一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。\"},\"3141\":{\"t\":\"**保证原子性:单次读/写：**volatile不能保证完全的原子性，只能保证单次的读/写操作具有原子性。\"},\"3142\":{\"h\":\"1.3volatile如何防止指令重排序：\",\"a\":\"_1-3volatile如何防止指令重排序\"},\"3143\":{\"t\":\"volatile是通过内存屏障来防止指令重排序的。\"},\"3144\":{\"t\":\"硬件层面的内存屏障分为Load Barrier 和 Store Barrier即读屏障和写屏障。\"},\"3145\":{\"t\":\"对于Load Barrier来说，在指令前插入Load Barrier，可以让高速缓存中的数据失效，强制从新从主内存加载数据。\"},\"3146\":{\"t\":\"对于Store Barrier来说，在指令后插入Store Barrier，能让写入缓存中的最新数据更新写入主内存，让其他线程可见。\"},\"3147\":{\"t\":\"Java内存屏障类型把上述两种内存屏障两两组合，如下图所示：\"},\"3148\":{\"t\":\"volatile防止指令重排序具体步骤：\"},\"3149\":{\"t\":\"在每个volatile写操作的前面插入一个StoreStore屏障。\"},\"3150\":{\"t\":\"在每个volatile写操作的后面插入一个StoreLoad屏障。\"},\"3151\":{\"t\":\"在每个volatile读操作的后面插入一个LoadLoad屏障。\"},\"3152\":{\"t\":\"在每个volatile读操作的后面插入一个LoadStore屏障。\"},\"3153\":{\"h\":\"1.4volatile总结：\",\"a\":\"_1-4volatile总结\"},\"3154\":{\"t\":\"volatile解决的是多线程共享变量可见性问题，但是被volatile修饰的变量操作并非具有原子性。\"},\"3155\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=MzAxNTE2NjEyMw==&mid=2247483734&idx=1&sn=8509d4aa61d08550c2b7668314da3582&chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e&scene=27\"},\"3156\":{\"h\":\"2.synchronized原理\",\"a\":\"_2-synchronized原理\"},\"3157\":{\"t\":\"在应用Sychronized关键字时需要把握如下注意点：\"},\"3158\":{\"t\":\"一把锁只能同时被一个线程获取，没有获得锁的线程只能等待；\"},\"3159\":{\"t\":\"每个实例都对应有自己的一把锁(this),不同实例之间互不影响；例外：锁对象是*.class以及synchronized修饰的是static方法的时候，所有对象公用同一把锁\"},\"3160\":{\"t\":\"synchronized修饰的方法，无论方法正常执行完毕还是抛出异常，都会释放锁\"},\"3161\":{\"h\":\"2.1synchronized 同步语句块的情况:\",\"a\":\"_2-1synchronized-同步语句块的情况\"},\"3162\":{\"t\":\"代码块形式：手动指定锁定对象，也可是是this,也可以是自定义的锁。\"},\"3163\":{\"t\":\"public class SynchronizedDemo { public void method() { synchronized (this) { System.out.println(\\\"synchronized 代码块\\\"); } } } \"},\"3164\":{\"t\":\"通过 JDK 自带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：首先切换到类的对应目录执行 javac SynchronizedDemo.java 命令生成编译后的 .class 文件，然后执行javap -c -s -v -l SynchronizedDemo.class。\"},\"3165\":{\"t\":\"从上面我们可以看出：synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"3166\":{\"t\":\"上面的字节码中包含一个 monitorenter 指令以及两个 monitorexit 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。\"},\"3167\":{\"t\":\"当执行 monitorenter 指令时，线程试图获取锁也就是获取 对象监视器 monitor 的持有权。\"},\"3168\":{\"t\":\"在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由ObjectMonitor实现的。每个对象中都内置了一个 ObjectMonitor对象。\"},\"3169\":{\"t\":\"另外，wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。\"},\"3170\":{\"t\":\"在执行monitorenter时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。\"},\"3171\":{\"t\":\"对象锁的的拥有者线程才可以执行 monitorexit 指令来释放锁。在执行 monitorexit 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\"},\"3172\":{\"h\":\"2.2synchronized 修饰方法的的情况:\",\"a\":\"_2-2synchronized-修饰方法的的情况\"},\"3173\":{\"t\":\"方法锁形式：synchronized修饰普通方法，锁对象默认为this；synchronize修饰静态的方法或指定锁对象为Class对象\"},\"3174\":{\"t\":\"public class SynchronizedDemo2 { public synchronized void method() { System.out.println(\\\"synchronized 方法\\\"); } } \"},\"3175\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\"},\"3176\":{\"t\":\"如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。\"},\"3177\":{\"h\":\"2.3总结:\",\"a\":\"_2-3总结\"},\"3178\":{\"t\":\"synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"3179\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。\"},\"3180\":{\"t\":\"不过两者的本质都是对对象监视器 monitor 的获取。\"},\"3181\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-底层原理了解吗；https://pdai.tech/md/java/thread/java-thread-x-key-synchronized.html#synchronized的使用\"},\"3182\":{\"h\":\"3.ThreadLocal原理\",\"a\":\"_3-threadlocal原理\"},\"3183\":{\"h\":\"3.1ThreadLocal 有什么用？\",\"a\":\"_3-1threadlocal-有什么用\"},\"3184\":{\"t\":\"通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？\"},\"3185\":{\"t\":\"JDK 中自带的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。\"},\"3186\":{\"t\":\"如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get() 和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\"},\"3187\":{\"t\":\"总结而言：ThreadLocal是一个将在多线程中为每一个线程创建单独的变量副本的类; 当使用ThreadLocal来维护变量时, ThreadLocal会为每个线程创建单独的变量副本, 避免因多线程操作共享变量而导致的数据不一致的情况。\"},\"3188\":{\"h\":\"3.2原理：\",\"a\":\"_3-2原理\"},\"3189\":{\"t\":\"源码：\"},\"3190\":{\"t\":\"public class Thread implements Runnable { //...... //与此线程有关的ThreadLocal值。由ThreadLocal类维护 ThreadLocal.ThreadLocalMap threadLocals = null; //与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护 ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; //...... } \"},\"3191\":{\"t\":\"从上面Thread类 源代码可以看出Thread 类中有一个 threadLocals 和 一个 inheritableThreadLocals 变量，它们都是 ThreadLocalMap 类型的变量,我们可以把 ThreadLocalMap 理解为ThreadLocal 类实现的定制化的 HashMap。默认情况下这两个变量都是 null，只有当前线程调用 ThreadLocal 类的 set或get方法时才创建它们，实际上调用这两个方法的时候，我们调用的是ThreadLocalMap类对应的 get()、set()方法。\"},\"3192\":{\"t\":\"ThreadLocal类的set()方法：\"},\"3193\":{\"t\":\"public void set(T value) { //获取当前请求的线程 Thread t = Thread.currentThread(); //取出 Thread 类内部的 threadLocals 变量(哈希表结构) ThreadLocalMap map = getMap(t); if (map != null) // 将需要存储的值放入到这个哈希表中 map.set(this, value); else createMap(t, value); } public T get() { Thread t = Thread.currentThread(); ThreadLocalMap threadLocals = getMap(t); if (threadLocals != null) { ThreadLocalMap.Entry e = threadLocals.getEntry(this); if (e != null) { @SuppressWarnings(\\\"unchecked\\\") T result = (T)e.value; return result; } } return setInitialValue(); } ThreadLocalMap getMap(Thread t) { return t.threadLocals; } \"},\"3194\":{\"t\":\"通过上面这些内容，我们足以通过猜测得出结论：最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。ThrealLocal 类中可以通过Thread.currentThread()获取到当前线程对象后，直接通过getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。\"},\"3195\":{\"t\":\"每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为 key ，Object 对象为 value 的键值对。\"},\"3196\":{\"t\":\"ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) { //...... } \"},\"3197\":{\"t\":\"比如我们在同一个线程中声明了两个 ThreadLocal 对象的话， Thread内部都是使用仅有的那个ThreadLocalMap 存放数据的，ThreadLocalMap的 key 就是 ThreadLocal对象，value 就是 ThreadLocal 对象调用set方法设置的值。\"},\"3198\":{\"h\":\"3.3ThreadLocal造成内存泄露的问题\",\"a\":\"_3-3threadlocal造成内存泄露的问题\"},\"3199\":{\"t\":\"网上有这样一个例子：\"},\"3200\":{\"t\":\"import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; public class ThreadLocalDemo { static class LocalVariable { private Long[] a = new Long[1024 * 1024]; } // (1) final static ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(5, 5, 1, TimeUnit.MINUTES, new LinkedBlockingQueue<>()); // (2) final static ThreadLocal<LocalVariable> localVariable = new ThreadLocal<LocalVariable>(); public static void main(String[] args) throws InterruptedException { // (3) Thread.sleep(5000 * 4); for (int i = 0; i < 50; ++i) { poolExecutor.execute(new Runnable() { public void run() { // (4) localVariable.set(new LocalVariable()); // (5) System.out.println(\\\"use local varaible\\\" + localVariable.get()); localVariable.remove(); } }); } // (6) System.out.println(\\\"pool execute over\\\"); } } \"},\"3201\":{\"t\":\"如果用线程池来操作ThreadLocal 对象确实会造成内存泄露, 因为对于线程池里面不会销毁的线程, 里面总会存在着<ThreadLocal, LocalVariable>的强引用, 因为final static 修饰的 ThreadLocal 并不会释放, 而ThreadLocalMap 对于 Key 虽然是弱引用, 但是强引用不会释放, 弱引用当然也会一直有值, 同时创建的LocalVariable对象也不会释放, 就造成了内存泄露; 如果LocalVariable对象不是一个大对象的话, 其实泄露的并不严重, 泄露的内存 = 核心线程数 * LocalVariable对象的大小;\"},\"3202\":{\"t\":\"所以, 为了避免出现内存泄露的情况, ThreadLocal提供了一个清除线程中对象的方法, 即 remove, 其实内部实现就是调用 ThreadLocalMap 的remove方法:\"},\"3203\":{\"t\":\"private void remove(ThreadLocal<?> key) { Entry[] tab = table; int len = tab.length; int i = key.threadLocalHashCode & (len-1); for (Entry e = tab[i]; e != null; e = tab[i = nextIndex(i, len)]) { if (e.get() == key) { e.clear(); expungeStaleEntry(i); return; } } } \"},\"3204\":{\"h\":\"线程同步互斥和锁\"},\"3205\":{\"h\":\"1.线程的互斥同步方式有哪些? 如何比较和选择?\",\"a\":\"_1-线程的互斥同步方式有哪些-如何比较和选择\"},\"3206\":{\"t\":\"Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。\"},\"3207\":{\"t\":\"锁的实现synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。\"},\"3208\":{\"t\":\"性能新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。\"},\"3209\":{\"t\":\"等待可中断当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。\"},\"3210\":{\"t\":\"公平锁公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\"},\"3211\":{\"t\":\"锁绑定多个条件一个 ReentrantLock 可以同时绑定多个 Condition 对象。\"},\"3212\":{\"t\":\"ReentrantLock：\"},\"3213\":{\"t\":\"ReentrantLock 实现了 Lock 接口，是一个可重入且独占式的锁，和 synchronized 关键字类似。不过，ReentrantLock 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。\"},\"3214\":{\"t\":\"public class ReentrantLock implements Lock, java.io.Serializable {} \"},\"3215\":{\"t\":\"ReentrantLock 里面有一个内部类 Sync，Sync 继承 AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在 Sync 中实现的。Sync 有公平锁 FairSync 和非公平锁 NonfairSync 两个子类。\"},\"3216\":{\"t\":\"ReentrantLock 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。\"},\"3217\":{\"t\":\"// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁 public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } \"},\"3218\":{\"t\":\"https://blog.csdn.net/zhengzhaoyang122/article/details/110847701；https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html\"},\"3219\":{\"h\":\"2.锁升级\",\"a\":\"_2-锁升级\"},\"3220\":{\"t\":\"img\"},\"3221\":{\"h\":\"2.1无锁\",\"a\":\"_2-1无锁\"},\"3222\":{\"t\":\"无锁并不会对资源锁定，所有的线程都可以访问并修改同一个资源，但同时只有一个线程能修改成功。也就是我们常说的乐观锁。\"},\"3223\":{\"h\":\"2.2偏向锁\",\"a\":\"_2-2偏向锁\"},\"3224\":{\"t\":\"偏向于第一个访问锁的线程，初次执行synchronized代码块时，通过 CAS 修改对象头里的锁标志位，锁对象变成偏向锁。\"},\"3225\":{\"t\":\"当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。\"},\"3226\":{\"t\":\"执行完同步代码块后，线程并不会主动释放偏向锁。当线程第二次再执行同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里不需要重新加锁，偏向锁几乎没有额外开销，性能极高。\"},\"3227\":{\"t\":\"偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。\"},\"3228\":{\"t\":\"偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗。\"},\"3229\":{\"h\":\"2.3轻量级锁\",\"a\":\"_2-3轻量级锁\"},\"3230\":{\"t\":\"当前锁是偏向锁，此时有多个线程同时来竞争锁，偏向锁就会升级为轻量级锁。轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式来获取锁。\"},\"3231\":{\"t\":\"轻量级锁的获取有两种情况：\"},\"3232\":{\"t\":\"当关闭偏向锁功能时\"},\"3233\":{\"t\":\"多个线程竞争偏向锁导致偏向锁升级为轻量级锁。一旦有第二个线程加入锁竞争，偏向锁就升级为轻量级锁（自旋锁）\"},\"3234\":{\"t\":\"在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先比较当前锁标志位是否为“释放”，如果是则将其设置为“锁定”，此过程是原子性。如果抢到锁，然后线程将当前锁的持有者信息修改为自己。\"},\"3235\":{\"h\":\"2.4重量级锁\",\"a\":\"_2-4重量级锁\"},\"3236\":{\"t\":\"如果线程的竞争很激励，线程的自旋超过了一定次数（默认循环10次，可以通过虚拟机参数更改），将轻量级锁升级为重量级锁（依然是 CAS 修改锁标志位，但不修改持有锁的线程ID），当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。\"},\"3237\":{\"t\":\"重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资。\"},\"3238\":{\"h\":\"2.5锁优化技术（锁粗化、锁消除）：\",\"a\":\"_2-5锁优化技术-锁粗化、锁消除\"},\"3239\":{\"t\":\"锁粗化就是告诉我们任何事情都有个度，有些情况下我们反而希望把很多次锁的请求合并成一个请求，以降低短时间内大量锁请求、同步、释放带来的性能损耗。\"},\"3240\":{\"t\":\"锁消除指的是在某些情况下，JVM 虚拟机如果检测不到某段代码被共享和竞争的可能性，就会将这段代码所属的同步锁消除掉，从而到底提高程序性能的目的。\"},\"3241\":{\"h\":\"3.锁的分类实现\",\"a\":\"_3-锁的分类实现\"},\"3242\":{\"h\":\"3.1悲观锁：\",\"a\":\"_3-1悲观锁\"},\"3243\":{\"t\":\"正如其名，它是指对数据修改时持保守态度，认为其他人也会修改数据。因此在操作数据时，会把数据锁住，直到操作完成。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是长事务而言，这样的开销往往无法承受。\"},\"3244\":{\"h\":\"3.2乐观锁：\",\"a\":\"_3-2乐观锁\"},\"3245\":{\"t\":\"乐观锁，从字面意思也能猜到个大概，在操作数据时非常乐观，认为别人不会同时修改数据，因此乐观锁不会上锁 只是在 提交更新 时，才会正式对数据的冲突与否进行检测。如果发现冲突了，则返回错误信息，让用户决定如何去做 。否则，执行本次操作。\"},\"3246\":{\"h\":\"3.3可重入锁：\",\"a\":\"_3-3可重入锁\"},\"3247\":{\"t\":\"可重入锁，也叫做递归锁，是指在同一个线程在调外层方法获取锁的时候，再进入内层方法会自动获取锁。\"},\"3248\":{\"t\":\"对象锁或类锁内部有计数器，一个线程每获得一次锁，计数器 +1；解锁时，计数器 -1。\"},\"3249\":{\"t\":\"JAVA 中的 ReentrantLock 和 synchronized 都是 可重入锁。可重入锁的一个好处是可一定程度避免死锁。\"},\"3250\":{\"h\":\"3.4自旋锁：\",\"a\":\"_3-4自旋锁\"},\"3251\":{\"t\":\"自旋锁是采用让当前线程不停地在循环体内执行，当循环的条件被其他线程改变时才能进入临界区。自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不断增加时，性能下降明显，因为每个线程都需要执行，会占用CPU时间片。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\"},\"3252\":{\"t\":\"自旋锁缺点：\"},\"3253\":{\"t\":\"可能引发死锁\"},\"3254\":{\"t\":\"可能占用 CPU 的时间过长\"},\"3255\":{\"t\":\"我们可以设置一个 循环时间 或 循环次数，超出阈值时，让线程进入阻塞状态，防止线程长时间占用 CPU 资源。JUC 并发包中的 CAS 就是采用自旋锁，compareAndswap 是CAS操作的核心，底层利用Unsafe对象实现的。\"},\"3256\":{\"t\":\"自适应自旋锁：在JDK 1.6中引入了自适应自旋锁。这就意味着自旋的时间不再固定了，而是由前一次在同一个锁上的自旋 时间及锁的拥有者的状态来决定的。如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行中，那么JVM会认为该锁自旋获取到锁的可能性很大，会自动增加等待时间。比如增加到100此循环。相反，如果对于某个锁，自旋很少成功获取锁。那再以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，JVM对程序的锁的状态预测会越来越准确，JVM也会越来越聪明。\"},\"3257\":{\"h\":\"3.5独享锁：\",\"a\":\"_3-5独享锁\"},\"3258\":{\"t\":\"独享锁，也有人叫它排他锁。无论读操作还是写操作，只能有一个线程获得锁，其他线程处于阻塞状态。\"},\"3259\":{\"t\":\"缺点：读操作并不会修改数据，而且大部分的系统都是 读多写少，如果读读之间互斥，大大降低系统的性能。下面的 共享锁 会解决这个问题。\"},\"3260\":{\"t\":\"像JAVA 中的 ReentrantLock 和 synchronized 都是独享锁。\"},\"3261\":{\"h\":\"3.6共享锁：\",\"a\":\"_3-6共享锁\"},\"3262\":{\"t\":\"共享锁是指允许多个线程同时持有锁，一般用在读锁上。读锁的共享锁可保证并发读是非常高效的。读写，写读 ，写写的则是互斥的。独享锁与共享锁是通过AQS来实现的.\"},\"3263\":{\"t\":\"ReentrantReadWriteLock，其读锁是共享锁，其写锁是独享锁。\"},\"3264\":{\"h\":\"3.7读锁/写锁：\",\"a\":\"_3-7读锁-写锁\"},\"3265\":{\"t\":\"如果对某个资源是读操作，那多个线程之间并不会相互影响，可以通过添加读锁实现共享。如果有修改动作，为了保证数据的并发安全，此时只能有一个线程获得锁，我们称之为 写锁。读读是共享的；而 读写、写读 、写写 则是互斥的\"},\"3266\":{\"t\":\"像 JAVA 中的 ReentrantReadWriteLock 就是一种 读写锁。\"},\"3267\":{\"h\":\"3.8公平锁/非公平锁：\",\"a\":\"_3-8公平锁-非公平锁\"},\"3268\":{\"t\":\"公平锁：多个线程按照申请锁的顺序去获得锁，所有线程都在队列里排队，先来先获取的公平性原则。\"},\"3269\":{\"t\":\"优点：所有的线程都能得到资源，不会饿死在队列中。\"},\"3270\":{\"t\":\"缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，CPU 唤醒下一个阻塞线程有系统开销\"},\"3271\":{\"t\":\"**非公平锁：**多个线程不按照申请锁的顺序去获得锁，而是同时以插队方式直接尝试获取锁，获取不到（插队失败），会进入队列等待（失败则乖乖排队），如果能获取到（插队成功），就直接获取到锁。\"},\"3272\":{\"t\":\"**优点：**可以减少 CPU 唤醒线程的开销，整体的吞吐效率会高点\"},\"3273\":{\"t\":\"**缺点：**可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁，活活饿死。\"},\"3274\":{\"t\":\"Java 多线程并发操作，我们操作锁大多时候都是基于 Sync 本身去实现的，而 Sync 本身却是 ReentrantLock 的一个内部类，Sync 继承 AbstractQueuedSynchronizer\"},\"3275\":{\"t\":\"像 ReentrantLock 默认是非公平锁，我们可以在构造函数中传入 true，来创建公平锁。\"},\"3276\":{\"t\":\"参考：https://blog.csdn.net/weixin_70730532/article/details/126875303\"},\"3277\":{\"h\":\"线程池\"},\"3278\":{\"h\":\"线程池\",\"a\":\"线程池\"},\"3279\":{\"h\":\"1.1为什么要用线程池？\",\"a\":\"_1-1为什么要用线程池\"},\"3280\":{\"t\":\"这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：\"},\"3281\":{\"t\":\"降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\"},\"3282\":{\"t\":\"提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。\"},\"3283\":{\"t\":\"提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\"},\"3284\":{\"h\":\"1.2如何创建线程池？\",\"a\":\"_1-2如何创建线程池\"},\"3285\":{\"h\":\"1.2.1方式一：通过 ThreadPoolExecutor 构造函数来创建（推荐）。\",\"a\":\"_1-2-1方式一-通过threadpoolexecutor构造函数来创建-推荐-。\"},\"3286\":{\"t\":\"package com.young.多线程; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.Executors; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * @author 杨路恒 */ public class ThreadPool { public static void main(String[] args) { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1,2, 2, TimeUnit.MILLISECONDS,new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(), // new ThreadPoolExecutor.AbortPolicy() // new ThreadPoolExecutor.CallerRunsPolicy() // new ThreadPoolExecutor.DiscardOldestPolicy() new ThreadPoolExecutor.DiscardPolicy() ); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.shutdown(); } } \"},\"3287\":{\"t\":\"参数：\"},\"3288\":{\"t\":\"/** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @param threadFactory the factory to use when the executor * creates a new thread * @param handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached * @throws IllegalArgumentException if one of the following holds:<br> * {@code corePoolSize < 0}<br> * {@code keepAliveTime < 0}<br> * {@code maximumPoolSize <= 0}<br> * {@code maximumPoolSize < corePoolSize} * @throws NullPointerException if {@code workQueue} * or {@code threadFactory} or {@code handler} is null */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; } \"},\"3289\":{\"t\":\"ThreadPoolExecutor 3 个最重要的参数：\"},\"3290\":{\"t\":\"corePoolSize : 任务队列未达到队列容量时，最大可以同时运行的线程数量。\"},\"3291\":{\"t\":\"maximumPoolSize : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\"},\"3292\":{\"t\":\"workQueue: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"3293\":{\"t\":\"ThreadPoolExecutor其他常见参数 :\"},\"3294\":{\"t\":\"keepAliveTime:线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；\"},\"3295\":{\"t\":\"unit : keepAliveTime 参数的时间单位。\"},\"3296\":{\"t\":\"threadFactory :executor 创建新线程的时候会用到。\"},\"3297\":{\"t\":\"handler :饱和策略。关于饱和策略下面单独介绍一下。\"},\"3298\":{\"t\":\"下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）：\"},\"3299\":{\"t\":\"线程池的饱和策略有哪些？\"},\"3300\":{\"t\":\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，ThreadPoolTaskExecutor 定义一些策略:\"},\"3301\":{\"t\":\"ThreadPoolExecutor.AbortPolicy： 抛出 RejectedExecutionException来拒绝新任务的处理。\"},\"3302\":{\"t\":\"ThreadPoolExecutor.CallerRunsPolicy： 调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。\"},\"3303\":{\"t\":\"ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。\"},\"3304\":{\"t\":\"ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。\"},\"3305\":{\"t\":\"举个例子：Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略来配置线程池的时候，默认使用的是 AbortPolicy。在这种饱和策略下，如果队列满了，ThreadPoolExecutor 将抛出 RejectedExecutionException 异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。如果不想丢弃任务的话，可以使用CallerRunsPolicy。CallerRunsPolicy 和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务\"},\"3306\":{\"t\":\"线程池常用的阻塞队列有哪些？\"},\"3307\":{\"t\":\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"3308\":{\"t\":\"不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。\"},\"3309\":{\"t\":\"容量为 Integer.MAX_VALUE 的 LinkedBlockingQueue（无界队列）：FixedThreadPool 和 SingleThreadExector 。由于队列永远不会被放满，因此FixedThreadPool最多只能创建核心线程数的线程。\"},\"3310\":{\"t\":\"SynchronousQueue（同步队列） ：CachedThreadPool 。SynchronousQueue 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，CachedThreadPool 的最大线程数是 Integer.MAX_VALUE ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。\"},\"3311\":{\"t\":\"DelayedWorkQueue（延迟阻塞队列）：ScheduledThreadPool 和 SingleThreadScheduledExecutor 。DelayedWorkQueue 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。DelayedWorkQueue 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 Integer.MAX_VALUE，所以最多只能创建核心线程数的线程。\"},\"3312\":{\"t\":\"线程池处理任务的流程了解吗？\"},\"3313\":{\"t\":\"如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。\"},\"3314\":{\"t\":\"如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。\"},\"3315\":{\"t\":\"如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。\"},\"3316\":{\"t\":\"如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用RejectedExecutionHandler.rejectedExecution()方法。\"},\"3317\":{\"t\":\"其实java线程池的实现原理很简单，说白了就是一个线程集合workerSet和一个阻塞队列workQueue。当用户向线程池提交一个任务(也就是线程)时，线程池会先将任务放入workQueue中。workerSet中的线程会不断的从workQueue中获取线程然后执行。当workQueue中没有任务的时候，worker就会阻塞，直到队列中有任务了就取出来继续执行。\"},\"3318\":{\"t\":\"任务的执行\"},\"3319\":{\"t\":\"execute –> addWorker –>runworker (getTask)\"},\"3320\":{\"t\":\"关闭线程池：\"},\"3321\":{\"t\":\"遍历线程池中的所有线程，然后逐个调用线程的interrupt方法来中断线程。\"},\"3322\":{\"t\":\"关闭方式 - shutdown\"},\"3323\":{\"t\":\"将线程池里的线程状态设置成SHUTDOWN状态, 然后中断所有没有正在执行任务的线程。\"},\"3324\":{\"t\":\"关闭方式 - shutdownNow\"},\"3325\":{\"t\":\"将线程池里的线程状态设置成STOP状态, 然后停止所有正在执行或暂停任务的线程. 只要调用这两个关闭方法中的任意一个, isShutDown() 返回true.。当所有任务都成功关闭了, isTerminated()返回true。\"},\"3326\":{\"t\":\"如何设定线程池的大小？\"},\"3327\":{\"t\":\"有一个简单并且适用面比较广的公式：\"},\"3328\":{\"t\":\"CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\"},\"3329\":{\"t\":\"I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\"},\"3330\":{\"h\":\"1.2.2方式二：通过 Executor 框架的工具类 Executors 来创建。\",\"a\":\"_1-2-2方式二-通过-executor-框架的工具类-executors-来创建。\"},\"3331\":{\"t\":\"我们可以创建多种类型的 ThreadPoolExecutor：\"},\"3332\":{\"t\":\"FixedThreadPool ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\"},\"3333\":{\"t\":\"SingleThreadExecutor： 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\"},\"3334\":{\"t\":\"CachedThreadPool： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。\"},\"3335\":{\"t\":\"ScheduledThreadPool ：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。\"},\"3336\":{\"h\":\"1.3为什么不推荐使用内置线程池？\",\"a\":\"_1-3为什么不推荐使用内置线程池\"},\"3337\":{\"t\":\"在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\"},\"3338\":{\"t\":\"为什么呢？\"},\"3339\":{\"t\":\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\"},\"3340\":{\"t\":\"另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险\"},\"3341\":{\"t\":\"Executors 返回线程池对象的弊端如下(后文会详细介绍到)：\"},\"3342\":{\"t\":\"FixedThreadPool 和 SingleThreadExecutor ： 使用的是无界的 LinkedBlockingQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"3343\":{\"t\":\"CachedThreadPool ：使用的是同步队列 SynchronousQueue, 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。\"},\"3344\":{\"t\":\"ScheduledThreadPool 和 SingleThreadScheduledExecutor : 使用的无界的延迟阻塞队列DelayedWorkQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"3345\":{\"h\":\"1.4如何动态修改线程池的参数？\",\"a\":\"_1-4如何动态修改线程池的参数\"},\"3346\":{\"t\":\"JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：\"},\"3347\":{\"t\":\"重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。\"},\"3348\":{\"t\":\"问题一：线程池被创建后里面有线程吗？如果没有的话，你知道有什么方法对线程池进行预热吗？\"},\"3349\":{\"t\":\"线程池被创建后如果没有任务过来，里面是不会有线程的。如果需要预热的话可以调用下面的两个方法：\"},\"3350\":{\"t\":\"全部启动：\"},\"3351\":{\"t\":\"仅启动一个：\"},\"3352\":{\"t\":\"问题二：核心线程数会被回收吗？需要什么设置？\"},\"3353\":{\"t\":\"核心线程数默认是不会被回收的，如果需要回收核心线程数，需要调用下面的方法：\"},\"3354\":{\"h\":\"1.5监控线程池的状态\",\"a\":\"_1-5监控线程池的状态\"},\"3355\":{\"t\":\"可以使用ThreadPoolExecutor以下方法:\"},\"3356\":{\"t\":\"getTaskCount() Returns the approximate total number of tasks that have ever been scheduled for execution.\"},\"3357\":{\"t\":\"getCompletedTaskCount() Returns the approximate total number of tasks that have completed execution. 返回结果少于getTaskCount()。\"},\"3358\":{\"t\":\"getLargestPoolSize() Returns the largest number of threads that have ever simultaneously been in the pool. 返回结果小于等于maximumPoolSize\"},\"3359\":{\"t\":\"getPoolSize() Returns the current number of threads in the pool.\"},\"3360\":{\"t\":\"getActiveCount() Returns the approximate number of threads that are actively executing tasks\"},\"3361\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html；https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651751537&idx=1&sn=c50a434302cc06797828782970da190e&chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c&scene=21#wechat_redirect；https://pdai.tech/md/java/thread/java-thread-x-juc-executor-ThreadPoolExecutor.html\"},\"3362\":{\"h\":\"面试\"},\"3363\":{\"h\":\"实习\",\"a\":\"实习\"},\"3364\":{\"h\":\"一、中科全安\",\"a\":\"一、中科全安\"},\"3365\":{\"h\":\"一面：HR面，态度算好的（5分钟）\",\"a\":\"一面-hr面-态度算好的-5分钟\"},\"3366\":{\"t\":\"1.介绍公司\"},\"3367\":{\"t\":\"2.问啥时候能来实习\"},\"3368\":{\"t\":\"3.问你能接受加班吗\"},\"3369\":{\"t\":\"4.问你的期望薪资多少\"},\"3370\":{\"t\":\"5.问我想听听你对加班什么看法\"},\"3371\":{\"t\":\"6.最后让明天面试，我说不行，能最晚啥时候，她说最晚周五下午，电话面试\"},\"3372\":{\"h\":\"二面：面试官狗叫（15分钟 ）\",\"a\":\"二面-面试官狗叫-15分钟\"},\"3373\":{\"t\":\"面试官的态度极其恶心，什么垃圾玩意，老子是来面试的，不是听狗叫的，就算老子啥都不会也不去你这个垃圾公司。\"},\"3374\":{\"t\":\"1.自我介绍，直接打断说只介绍自己会的，项目中的技术栈\"},\"3375\":{\"t\":\"2.问我熟悉哪些框架，我说Spring、Mysql，其他都是了解，熟悉的是Java基础和Mysql，他就非得问SpringBoot，离谱\"},\"3376\":{\"t\":\"3.问Kafka的分区、主题了解吗，我就是了解，然后他也说了你只是了解\"},\"3377\":{\"t\":\"4.问ES了解吗（我只是了解他是干啥的，其它都是API）\"},\"3378\":{\"t\":\"5.问SpringBoot异常怎么处理（这个紧张忘了，只是说在一个包里要继承一个异常的接口）\"},\"3379\":{\"t\":\"6.问SpringBoot的核心配置文件以及它们的区别\"},\"3380\":{\"t\":\"7.问SpringBoot的起步依赖starter有哪些以及作用（他说你了解的很少，我都说了了解Mysql、Spring，你他妈的非得问）\"},\"3381\":{\"t\":\"8.问SpringBoot 中的监视器是什么（我说不了解）\"},\"3382\":{\"t\":\"9.问Swagger用过么、它用来做什么\"},\"3383\":{\"t\":\"10.问什么是 WebSockets（我说只了解它是用来作为即时通讯的协议）\"},\"3384\":{\"t\":\"11.问什么是 FreeMarker 模板（这个离谱，说完他是干啥的以及插值表达式，他问还有呢？他妈的）\"},\"3385\":{\"t\":\"12.问C/S 、B/S模式\"},\"3386\":{\"t\":\"13.问String、StringBuilder、StringBuffer 的区别\"},\"3387\":{\"t\":\"14.问了MySQL的存储引擎\"},\"3388\":{\"t\":\"15.问了 InnoDB 和 MyISAM 的比较\"},\"3389\":{\"t\":\"16.问了建立索引的原则\"},\"3390\":{\"t\":\"17.问了三大范式\"},\"3391\":{\"t\":\"18.问了Jdbc的防止sql注入（我说不了解）\"},\"3392\":{\"t\":\"19.反问（我说实习生的日常工作安排是什么，他妈的开始狗叫，想打他）\"},\"3393\":{\"t\":\"20.最后问我啥时能来实习（老子不去）\"},\"3394\":{\"h\":\"二、联想\",\"a\":\"二、联想\"},\"3395\":{\"h\":\"一面：（16分钟）\",\"a\":\"一面-16分钟\"},\"3396\":{\"t\":\"1.说一下红黑树（吧啦吧啦，讲了下红黑树的特性、又扯到HashMap底层用到了红黑树、突然说到MySQLB+树用到了红黑树）\"},\"3397\":{\"t\":\"2.讲一下线程池（这个熟，线程池的7大参数以及具体用法）\"},\"3398\":{\"t\":\"3.讲一下为什么用线程池（两点原因）\"},\"3399\":{\"t\":\"4.讲一下线程池参数MaxSize满了你会怎么做（我说实现自定义处理策略，可以选择移除等待队列中的最不常用的线程）\"},\"3400\":{\"t\":\"5.看我熟悉Python（这里没听清发音，重复确认了好几遍哈哈哈哈哈哈哈），问我生成器用过没（我说是生成随机数吗，面试官说不是，是，还耐心给我解答了是用来循环遍历的）\"},\"3401\":{\"t\":\"5.项目拷打环节\"},\"3402\":{\"t\":\"1）讲一下你的项目经验（从项目的整体架构到具体功能实现细节都说了）\"},\"3403\":{\"t\":\"2）我说了做的一些优化（存储到阿里云OSS）\"},\"3404\":{\"t\":\"3）突然电话断了，在那我俩喂喂喂了好几声，面试官又给我打了过来，问我同步和异步怎么实现的（加@Async注解）\"},\"3405\":{\"t\":\"4）问异步调用后，做了些什么（第三方接口审核完后传来一个statusCode200，表示审核成功存储到数据库）\"},\"3406\":{\"t\":\"6.反问环节\"},\"3407\":{\"t\":\"1）实习生的日常工作安排（面试官说了早上9：30上班，下午6：30下班，八小时工作制，中午休息一小时）\"},\"3408\":{\"t\":\"2）技术栈是什么（面试官说这有Java和Python，你来就是Java）\"},\"3409\":{\"h\":\"三、中国邮政储蓄银行\",\"a\":\"三、中国邮政储蓄银行\"},\"3410\":{\"h\":\"一面：结构化面试+技术面（20分钟，五个面试官）\",\"a\":\"一面-结构化面试-技术面-20分钟-五个面试官\"},\"3411\":{\"t\":\"1.先做一个两分钟以内的自我介绍（对邮储的看法，对未来工作的看法）\"},\"3412\":{\"t\":\"2.对工作地点的看法\"},\"3413\":{\"t\":\"3.有没有参加过团体活动\"},\"3414\":{\"t\":\"4.数学建模比赛中遇到的最大困难\"},\"3415\":{\"t\":\"5.开始技术面试了，面试官说看你简历都是Java相关，讲一下Spring Cloud你用过的组件\"},\"3416\":{\"t\":\"6.ConcurrentHashMap为什么用红黑树\"},\"3417\":{\"t\":\"7.看你项目中用到了网关，是怎么实现的\"},\"3418\":{\"t\":\"8.都说CAS要比synchronized好，但是CAS也有自己的问题，你能说一下有哪些问题吗\"},\"3419\":{\"t\":\"9.另一个面试官问看你简历有高并发系统的东西，你有实际的项目经验吗（这个我说就是了解，实际项目是自学的，实际项目经验都是人工智能相关的）\"},\"3420\":{\"t\":\"10.最后女的HR问看你成绩这么好，没有保研吗\"},\"3421\":{\"t\":\"11.讲一下研究生的论文成果\"},\"3422\":{\"t\":\"12.研究生的专业成绩排名，有获得过奖学金吗\"},\"3423\":{\"t\":\"13.最后问有offer吗，方便说一下是哪个公司吗\"},\"3424\":{\"t\":\"另：\"},\"3425\":{\"t\":\"1.对工作地点的看法\"},\"3426\":{\"t\":\"2.CPU达到100%的时候你如何排查问题\"},\"3427\":{\"t\":\"3.新生代和老年代数据是如何流动的\"},\"3428\":{\"t\":\"4.Linux如何给文件权限\"},\"3429\":{\"t\":\"5.想从实习中收获什么\"},\"3430\":{\"t\":\"6.看你是院研副部长，如果负责的活动和实验室科研冲突了怎么平衡\"},\"3431\":{\"t\":\"7.你平常也这样扎头发吗\"},\"3432\":{\"h\":\"秋招\",\"a\":\"秋招\"},\"3433\":{\"h\":\"一、海尔（提前批一面11min：经理技术面+HR面）：挂\",\"a\":\"一、海尔-提前批一面11min-经理技术面-hr面-挂\"},\"3434\":{\"t\":\"1.自我介绍\"},\"3435\":{\"t\":\"2.就关于应聘的软件开发岗位谈一下实际的开发\"},\"3436\":{\"t\":\"3.对于取得的最终效果讲一下\"},\"3437\":{\"t\":\"4.看了你去年做了一个博客社区的项目（？？？去年，博客社区？这个经理不太专业呀），你是用MD5做的，那么MD5它能够被破解吗（我说算力够的话能够被破解，对面不满意？？？）\"},\"3438\":{\"t\":\"5.那你熟悉这个加密算法吗？它属于对称加密还是非对称加密（凉了，直接说不熟悉）\"},\"3439\":{\"t\":\"6.我看到你用到了ThreadLocal，那你能简单说下ThreadLocal的原理吗？\"},\"3440\":{\"t\":\"7.那你什么时间把这个对象删除的呢？我看你为了防止内存泄漏，那你怎么判断它使用完了呢？\"},\"3441\":{\"t\":\"8.Token失效谁判断的？\"},\"3442\":{\"t\":\"9.说我python写得多，而他们用Java比较多，所以问我一个逻辑题：甲乙两个人，有2-6五张牌，甲乙各抽一张，你怎么判断谁大谁小？（离谱，我简历上都是Java，这是不想要我刷KPI呢）\"},\"3443\":{\"h\":\"来看头条\"},\"3444\":{\"h\":\"十二：项目\",\"a\":\"十二-项目\"},\"3445\":{\"t\":\"开发技术：Spring Cloud + Spring Boot + MybatisPlus + Redis + mysql + Mongodb + Zookeeper + kafka + ElasticSearch + Docker + 第三方技术阿里云OSS;\"},\"3446\":{\"t\":\"项目背景：”来看头条“ 项目类似于今日头条，是一个新闻资讯类项目。该项目由用户端和自媒体端组成。在用户端，实现了用户通过app端登录功能、浏览文章功能、搜索文章功能、用户历史记录功能。在自媒体端，实现了自媒体管理员登录功能、发布文章功能、删除文章功能、上传素材功能、文章内容审核功能\"},\"3447\":{\"t\":\"**项目重难点：**网关搭建；文章详情静态化及存储；文章自动审核及延迟发布；分布式锁解决集群下的方法抢占执行；热点文章实时计算\"},\"3448\":{\"t\":\"技术栈的具体应用：\"},\"3449\":{\"t\":\"Spring-Cloud-Gateway : 微服务之前架设的网关服务，实现服务注册中的API请求路由，以及控制流速控制和熔断处理都是常用的架构手段，而这些功能Gateway天然支持\"},\"3450\":{\"t\":\"运用Spring Boot快速开发框架，构建项目工程；并结合Spring Cloud全家桶技术，实现app后端、自媒体等微服务。\"},\"3451\":{\"t\":\"运用Spring Cloud Alibaba Nacos作为项目中的注册中心和配置中心\"},\"3452\":{\"t\":\"运用mybatis-plus作为持久层提升开发效率\"},\"3453\":{\"t\":\"采用kafka作为消息服务中间件，把自媒体文章上下架放进消息队列；通过用户的行为（点赞、评论、喜欢）实时记录用户数据，通过kafkaStream流式计算最新的数据；与客户端系统消息通知\"},\"3454\":{\"t\":\"运用Redis缓存技术，实现热数据的计算，提升系统性能指标，同时作为消息中间件异步消费任务。\"},\"3455\":{\"t\":\"使用Mysql存储用户数据，以保证上层数据查询的高性能\"},\"3456\":{\"t\":\"使用Mongo存储用户历史记录数据，以保证用户热数据高扩展和高性能指标\"},\"3457\":{\"t\":\"运用AI技术，来完成系统自动化功能，以提升效率及节省成本。比如文章审核\"},\"3458\":{\"h\":\"优化：\",\"a\":\"优化\"},\"3459\":{\"h\":\"（1）优化一\",\"a\":\"_1-优化一\"},\"3460\":{\"t\":\"缺陷 ：写操作（定时刷新）比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。\"},\"3461\":{\"t\":\"解决办法：\"},\"3462\":{\"t\":\"数据库和缓存数据强一致场景 ：更新 db 的时候同样更新 cache，不过我们需要加一个分布式锁来保证更新 cache 的时候不存在线程安全问题。\"},\"3463\":{\"h\":\"（2）优化二\",\"a\":\"_2-优化二\"},\"3464\":{\"t\":\"缺陷：消费者丢失消息的情况\"},\"3465\":{\"t\":\"我们知道消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。偏移量（offset)表示 Consumer 当前消费到的 Partition(分区)的所在的位置。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。\"},\"3466\":{\"t\":\"当消费者拉取到了分区的某个消息之后，消费者会自动提交了 offset。自动提交的话会有一个问题，试想一下，当消费者刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。\"},\"3467\":{\"t\":\"解决办法:\"},\"3468\":{\"t\":\"我们手动关闭自动提交 offset，每次在真正消费完消息之后再自己手动提交 offset 。 但是这样会带来消息被重新消费的问题。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。\"},\"3469\":{\"h\":\"（3）优化三\",\"a\":\"_3-优化三\"},\"3470\":{\"t\":\"存储技术选型优化：\"},\"3471\":{\"t\":\"MinIO：\"},\"3472\":{\"t\":\"AliyunOSS：\"},\"3473\":{\"h\":\"（4）优化四\",\"a\":\"_4-优化四\"},\"3474\":{\"t\":\"缺陷：对于变量存在多线程并发竞争\"},\"3475\":{\"t\":\"解决办法：\"},\"3476\":{\"t\":\"为变量设置ThreadLocal。\"},\"3477\":{\"h\":\"身份验证怎么做的？\",\"a\":\"身份验证怎么做的\"},\"3478\":{\"t\":\"AuthorizedFilter + AppJwtUtil \"},\"3479\":{\"t\":\"用户向服务器发送用户名、密码以及验证码用于登陆系统。用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录。\"},\"3480\":{\"t\":\"如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT。\"},\"3481\":{\"t\":\"用户以后每次向后端发请求都在 Header 中带上这个 JWT ，再次进入网关开始访问，网关过滤器接收用户携带的TOKEN。\"},\"3482\":{\"t\":\"服务端检查 JWT 并从中获取用户相关信息。网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误。\"},\"3483\":{\"t\":\"两点建议：\"},\"3484\":{\"t\":\"建议将 JWT 存放在 localStorage 中，放在 Cookie 中会有 CSRF 风险。\"},\"3485\":{\"t\":\"请求服务端并携带 JWT 的常见做法是将其放在 HTTP Header 的 Authorization 字段中（Authorization: Bearer Token）。\"},\"3486\":{\"t\":\"乐观锁：\"},\"3487\":{\"t\":\"使用版本号。\"},\"3488\":{\"h\":\"网关搭建 ：\",\"a\":\"网关搭建\"},\"3489\":{\"t\":\"思路分析：\"},\"3490\":{\"t\":\"用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录\"},\"3491\":{\"t\":\"用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户\"},\"3492\":{\"t\":\"用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN\"},\"3493\":{\"t\":\"网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误\"},\"3494\":{\"t\":\"具体实现：\"},\"3495\":{\"t\":\"第一：\"},\"3496\":{\"t\":\"​ 在认证过滤器中需要用到jwt的解析，所以需要把工具类拷贝一份到网关微服务\"},\"3497\":{\"t\":\"第二：\"},\"3498\":{\"t\":\"​ 在网关微服务中新建全局过滤器\"},\"3499\":{\"h\":\"文章详情静态化及存储：\",\"a\":\"文章详情静态化及存储\"},\"3500\":{\"t\":\"文章详情静态化：\"},\"3501\":{\"t\":\"​ FreeMarker 是一款模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。\"},\"3502\":{\"t\":\"​ 模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。\"},\"3503\":{\"t\":\"存储：AliyunOSS\"},\"3504\":{\"t\":\"对象存储可提供更好的数据保护，加密、保护敏感数据。\"},\"3505\":{\"h\":\"文章自动审核及延迟发布：\",\"a\":\"文章自动审核及延迟发布\"},\"3506\":{\"t\":\"文章自动审核：\"},\"3507\":{\"t\":\"1 自媒体端发布文章后，开始审核文章（异步线程的方式审核文章，在自动审核的方法上加上@Async注解（标明要异步调用），在自媒体引导类中使用@EnableAsync注解开启异步调用）\"},\"3508\":{\"t\":\"2 审核的主要是审核文章的内容（文本内容和图片）\"},\"3509\":{\"t\":\"3 借助第三方提供的接口审核文本\"},\"3510\":{\"t\":\"4 借助第三方提供的接口审核图片，由于图片存储到OSS中，需要先下载才能审核\"},\"3511\":{\"t\":\"5 如果审核失败，则需要修改自媒体文章的状态，status:2 审核失败 status:3 转到人工审核\"},\"3512\":{\"t\":\"6 如果审核成功，则需要在文章微服务中创建app端需要的文章：\"},\"3513\":{\"t\":\"​ 在文章审核成功以后需要在app的article库中新增文章数据：\"},\"3514\":{\"t\":\"​ 保存文章信息 ap_article\"},\"3515\":{\"t\":\"​ 保存文章配置信息 ap_article_config\"},\"3516\":{\"t\":\"​ 保存文章内容 ap_article_content\"},\"3517\":{\"t\":\"延迟发布：\"},\"3518\":{\"t\":\"redis实现：zset数据类型的去重有序（分数排序）特点进行延迟。例如：时间戳作为score进行排序\"},\"3519\":{\"t\":\"实现思路：\"},\"3520\":{\"t\":\"问题思路：\"},\"3521\":{\"t\":\"1.为什么任务需要存储在数据库中？\"},\"3522\":{\"t\":\"延迟任务是一个通用的服务，任何需要延迟得任务都可以调用该服务，需要考虑数据持久化的问题，存储数据库中是一种数据安全的考虑。\"},\"3523\":{\"t\":\"2.为什么redis中使用两种数据类型，list和zset？\"},\"3524\":{\"t\":\"效率问题，算法的时间复杂度\"},\"3525\":{\"t\":\"3.在添加zset数据的时候，为什么不需要预加载？\"},\"3526\":{\"t\":\"任务模块是一个通用的模块，项目中任何需要延迟队列的地方，都可以调用这个接口，要考虑到数据量的问题，如果数据量特别大，为了防止阻塞，只需要把未来几分钟要执行的数据存入缓存即可。\"},\"3527\":{\"t\":\"实现：\"},\"3528\":{\"t\":\"延迟队列服务提供对外接口：提供远程的feign接口\"},\"3529\":{\"t\":\"发布文章集成添加延迟队列接口\"},\"3530\":{\"t\":\"修改发布文章代码：把之前的异步调用修改为调用延迟任务\"},\"3531\":{\"t\":\"消费任务进行审核文章\"},\"3532\":{\"t\":\"4.为什么选用redis作为消息队列？\"},\"3533\":{\"t\":\"把 Redis 当作队列来使用时，会面临的 2 个问题：\"},\"3534\":{\"t\":\"Redis 本身可能会丢数据；\"},\"3535\":{\"t\":\"面对消息挤压，内存资源会紧张；\"},\"3536\":{\"t\":\"所以，能不能将 Redis 作为消息队列来使用，关键看你的业务场景：\"},\"3537\":{\"t\":\"如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。\"},\"3538\":{\"t\":\"如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。\"},\"3539\":{\"h\":\"分布式锁解决集群下的方法抢占执行：\",\"a\":\"分布式锁解决集群下的方法抢占执行\"},\"3540\":{\"t\":\"问题描述：\"},\"3541\":{\"t\":\"启动两台heima-leadnews-schedule服务，每台服务都会去执行refresh定时任务方法\"},\"3542\":{\"t\":\"分布式锁：\"},\"3543\":{\"t\":\"控制分布式系统有序的去对共享资源进行操作，通过互斥来保证数据的一致性。\"},\"3544\":{\"t\":\"解决方案：\"},\"3545\":{\"t\":\"sexnx （SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。\"},\"3546\":{\"t\":\"这种加锁的思路是，如果 key 不存在则为 key 设置 value，如果 key 已存在则 SETNX 命令不做任何操作\"},\"3547\":{\"t\":\"客户端A请求服务器设置key的值，如果设置成功就表示加锁成功\"},\"3548\":{\"t\":\"客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败\"},\"3549\":{\"t\":\"客户端A执行代码完成，删除锁\"},\"3550\":{\"t\":\"客户端B在等待一段时间后再去请求设置key的值，设置成功\"},\"3551\":{\"t\":\"客户端B执行代码完成，删除锁\"},\"3552\":{\"h\":\"热点文章实时计算：\",\"a\":\"热点文章实时计算\"},\"3553\":{\"t\":\"思路说明：\"},\"3554\":{\"t\":\"待优化：\"},\"3555\":{\"t\":\"使用FastDFS作为静态资源存储器，在其上实现热静态资源缓存、淘汰等功能（待优化）\"},\"3556\":{\"t\":\"运用Hbase技术，存储系统中的冷数据，保证系统数据的可靠性（待优化）\"},\"3557\":{\"t\":\"运用ES搜索技术，对冷数据、文章数据建立索引，以保证冷数据、文章查询性能（待优化）\"},\"3558\":{\"t\":\"当用户 Logout 的话，JWT 也还有效。除非，我们在后端增加额外的处理逻辑比如将失效的 JWT 存储起来，后端先验证 JWT 是否有效再进行处理。\"},\"3559\":{\"h\":\"QPS估算方法、性能测试：\",\"a\":\"qps估算方法、性能测试\"},\"3560\":{\"t\":\"QPS（Query Per Second）：每秒请求数，就是说服务器在一秒的时间内处理了多少个请求。\"},\"3561\":{\"t\":\"怎么估出每秒钟能处理多少请求呢？\"},\"3562\":{\"t\":\"方式一:自己在接口里记录\"},\"3563\":{\"t\":\"这种方式指的是在你的接口里，日志记录了能体现该接口特性的，并具有唯一性的字符串！\"},\"3564\":{\"t\":\"例如，下面这一段代码：\"},\"3565\":{\"t\":\"@RestController @RequestMapping(\\\"/home\\\") public class IndexController { //省略 @RequestMapping(\\\"/index\\\") String index() { logger.info(\\\"渣渣烟\\\"); return \\\"index\\\"; } } \"},\"3566\":{\"t\":\"假设现在我要统计index这个接口的QPS！\"},\"3567\":{\"t\":\"OK，什么叫能体现该接口特性的字符串呢！就像上面的\\\"渣渣烟\\\"这个字符串，只在index这个接口里出现过，没在其他其他接口里出现过！因此，只要统计出\\\"渣渣烟\\\"这个字符串在日志里的出现次数，就能知道该接口的请求次数！\"},\"3568\":{\"t\":\"什么叫具有唯一性的字符串呢！所谓唯一性，指的是\\\"渣渣烟\\\"这个字符串，在这个接口的一次调用流程中，只出现一次！如果出现两次，就会导致到时候统计出来的次数会多一倍，所以尽量选择具有唯一性的字段！\"},\"3569\":{\"t\":\"方式二:利用tomcat的access log\"},\"3570\":{\"t\":\"tomcat自带的access log功能：\"},\"3571\":{\"t\":\"server.tomcat.accesslog.directory 设定log的目录，默认: logs server.tomcat.accesslog.enabled 是否开启access log，默认: false \"},\"3572\":{\"t\":\"此时，你访问一次/home/index地址，会有下面这样日志：\"},\"3573\":{\"t\":\"127.0.0.1 - - [xxx] \\\"POST /home/index HTTP/1.1\\\" 200 138 \"},\"3574\":{\"t\":\"执行一串命令：\"},\"3575\":{\"t\":\"cat xx.log |grep 'GET /mvc2'|cut -d ' ' -f4|uniq -c|sort -n -r \"},\"3576\":{\"t\":\"JMeter测试：\"},\"3577\":{\"h\":\"自我介绍：\",\"a\":\"自我介绍\"},\"3578\":{\"t\":\"面试官，您好，首先很感谢您给我的面试机会！我叫杨路恒，今年24岁，山东济宁人，就读于陕西师范大学，今年研二，软件工程专业，研究方向为知识图谱。大学时间我主要利用课外时间学习了 Java 以及 一些框架 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的粉丝数达到了3k+，访问量达到了44W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"3579\":{\"h\":\"项目中常用技术一：MD5\"},\"3580\":{\"h\":\"一、什么是MD5？\",\"a\":\"一、什么是md5\"},\"3581\":{\"t\":\"MD5（Message Digest Algorithm 5），消息摘要算法第五版。\"},\"3582\":{\"t\":\"消息摘要算法又称为哈希算法、散列算法，输出的消息摘要又称为哈希值、散列值。\"},\"3583\":{\"h\":\"二、MD5的特点\",\"a\":\"二、md5的特点\"},\"3584\":{\"t\":\"压缩性：MD5可以将任意长度的输入转化为128位长度的输出；\"},\"3585\":{\"t\":\"不可逆性：MD5是不可逆的，我们无法通过常规方式从MD5值倒推出它的原文；\"},\"3586\":{\"t\":\"抗修改性：对原文做一丁点儿改动，MD5值就会有巨大的变动，也就是说就算两个MD5值非常相似，你也不能想当然地认为它们俩对应的原文也非常相似。\"},\"3587\":{\"t\":\"容易计算：从原数据计算出MD5值很容易。\"},\"3588\":{\"h\":\"三、MD5的问题\",\"a\":\"三、md5的问题\"},\"3589\":{\"t\":\"因为MD5是不可逆的，所以MD5是安全的。但是2004年，山东大学的王小云教授在美国加州举办的密码学会议上宣布破解了MD5，其实并不是真正的破解，而是非常明显地加快了反向查询的速度，在当时计算机的计算能力下，利用她们的技术，可以在几个小时内就找到一个MD5值对应的原文。因为MD5可以被暴力破解，所以MD5不再是安全的了，对安全性要求较高的场合，不建议直接使用MD5。\"},\"3590\":{\"h\":\"四、MD5的应用场景\",\"a\":\"四、md5的应用场景\"},\"3591\":{\"h\":\"4.1 对密码加密\",\"a\":\"_4-1-对密码加密\"},\"3592\":{\"t\":\"MD5可以用来对密码加密，防止密码被窃听。\"},\"3593\":{\"t\":\"为什么要对密码加密\"},\"3594\":{\"t\":\"比如一个用户的用户名为18666666666，密码为123456，那么如果不对密码加密，客户端在注册或登录的时候，就是明文传输密码http://localhost:8080/hw/register|login?username=18666666666&password=123456，传输过程中一旦请求被截获，用户的密码就被泄漏了；再者服务器的数据库中也是明文存储密码\"},\"3595\":{\"t\":\"username\"},\"3596\":{\"t\":\"password\"},\"3597\":{\"t\":\"18666666666\"},\"3598\":{\"t\":\"123456\"},\"3599\":{\"t\":\"一旦数据库泄漏，用户的密码就被泄漏了。\"},\"3600\":{\"t\":\"而如果我们使用了MD5对密码加密，客户端在注册或登录的时候，就是密文传输密码http://localhost:8080/hw/register|login?username=18666666666&password=e10adc3949ba59abbe56e057f20f883e，传输过程中即便请求被截获，用户的密码也不会被泄漏；再者服务器的数据库中也是密文存储密码\"},\"3601\":{\"t\":\"username\"},\"3602\":{\"t\":\"password\"},\"3603\":{\"t\":\"18666666666\"},\"3604\":{\"t\":\"e10adc3949ba59abbe56e057f20f883e\"},\"3605\":{\"t\":\"就算数据库泄漏，用户的密码也不会被泄漏。\"},\"3606\":{\"t\":\"彩虹表\"},\"3607\":{\"t\":\"攻击者创建了一个叫彩虹表的东西，它是一个非常庞大的数据库，里面收集了所有常用的密码，以及这些密码对应的MD5值、SHA-1值等，现在主流的彩虹表记录数据约90万亿条，占用硬盘超过500TB。有了彩虹表，攻击者就可以通过穷举法反向查询出MD5值、SHA-1值等对应的原文，因此如果你的密码很不幸被搜集在彩虹表里，就可能被破解掉，这也是为什么很多场合我们输密码的时候，有字母数字下划线大小写等乱七八糟各种要求，目的就是尽量使得明文密码的复杂度增加一些，尽量使得明文密码及其MD5值、SHA-1值等不被收集在彩虹表里。\"},\"3608\":{\"t\":\"如果有一个预先计算好的常用口令和它们的 MD5的对照表（如下表），那么通过查表方式，时间上将大大减少，而这个表就叫做彩虹表：\"},\"3609\":{\"t\":\"常用口令\"},\"3610\":{\"t\":\"MD5\"},\"3611\":{\"t\":\"hello123\"},\"3612\":{\"t\":\"f30aa7a662c728b7407c54ae6bfd27d1\"},\"3613\":{\"t\":\"12345678\"},\"3614\":{\"t\":\"25d55ad283aa400af464c76d713c07ad\"},\"3615\":{\"t\":\"passw0rd\"},\"3616\":{\"t\":\"bed128365216c019988915ed3add75fb\"},\"3617\":{\"t\":\"19700101\"},\"3618\":{\"t\":\"570da6d5277a646f6552b8832012f5dc\"},\"3619\":{\"t\":\"…\"},\"3620\":{\"t\":\"…\"},\"3621\":{\"t\":\"20201231\"},\"3622\":{\"t\":\"6879c0ae9117b50074ce0a0d4c843060\"},\"3623\":{\"t\":\"加盐Sault\"},\"3624\":{\"t\":\"可见直接使用MD5加密是不安全的，但是我们可以加盐。加盐是指在密码的任意位置插入一些指定的字符串（即盐值salt），加盐的目的也是为了尽量增强明文密码的复杂度，尽量使得明文密码及其MD5值、SHA-1值等不被收集在彩虹表里。\"},\"3625\":{\"t\":\"加盐流程：\"},\"3626\":{\"t\":\"用户注册时\"},\"3627\":{\"t\":\"用户输入【账号】和【密码】（以及其他用户信息）；\"},\"3628\":{\"t\":\"系统为用户生成【Salt值】；\"},\"3629\":{\"t\":\"系统将【Salt值】和【用户密码】连接到一起；\"},\"3630\":{\"t\":\"对连接后的值进行散列，得到【Hash1值】；\"},\"3631\":{\"t\":\"将【Hash1值】和【Salt值】分别放到数据库中。\"},\"3632\":{\"t\":\"用户登录时\"},\"3633\":{\"t\":\"用户输入【账号】和【密码】；\"},\"3634\":{\"t\":\"系统通过用户名找到与之对应的【Hash值】和【Salt值】；\"},\"3635\":{\"t\":\"系统将【Salt值】和【用户输入的密码】连接到一起；\"},\"3636\":{\"t\":\"对连接后的值进行散列，得到【Hash2值】（注意是即时运算出来的值）；\"},\"3637\":{\"t\":\"比较【Hash1值】和【Hash2值】是否相等，相等则表示密码正确，否则表示密码错误。\"},\"3638\":{\"h\":\"4.2 生成数字签名\",\"a\":\"_4-2-生成数字签名\"},\"3639\":{\"t\":\"MD5可以用来生成数字签名，验证数据是否被篡改。\"},\"3640\":{\"h\":\"五、MD5是是对称加密还是非对称加密？\",\"a\":\"五、md5是是对称加密还是非对称加密\"},\"3641\":{\"t\":\"小羊在昨天2023.5.19下午等了将近十多分钟面试官才进面试，结果面试官问我MD5，我当时一脸懵逼，只听他说MD5是一个非对称加密算法，我当时信以为真。我就去总结MD5相关的知识，结果发现面试官说错了。话不多说，直接发车！\"},\"3642\":{\"t\":\"在计算机信息安全领域，经常应用到MD5、对称加密、非对称加密。在密码学的应用和研究中，DES、RSA、SHA等加密算法占据着重要的位置。随着人们对加密强度需求的不断提高，近期出现了很多加密算法，如AES、ECC等。那么，哪些算法是对称加密，哪些是非对称加密；对称加密和非对称加密有哪些优缺点，MD5是对称加密还是非对称加密？\"},\"3643\":{\"t\":\"我们先来了解一下加密算法的基础北背景。\"},\"3644\":{\"h\":\"5.1对称加密算法有哪些？\",\"a\":\"_5-1对称加密算法有哪些\"},\"3645\":{\"t\":\"对称密码算法又叫传统密码算法，也就是加密密钥能够从解密密钥中推算出来，反过来也成立。在大多数对称算法中，加密解密密钥是相同的。常见的对称加密算法有：DES、IDEA、AES、SM1和SM4。\"},\"3646\":{\"h\":\"5.2非对称加密算法有哪些？\",\"a\":\"_5-2非对称加密算法有哪些\"},\"3647\":{\"t\":\"非对称密钥也叫公开密钥加密,它是用两个数学相关的密钥对信息进行编码。在此系统中，其中一个密钥叫公开密钥，可随意发给期望同密钥持有者进行安全通信的人。公开密钥用于对信息加密。第二个密钥是私有密钥，属于密钥持有者，此人要仔细保存私有密钥。密钥持有者用私有密钥对收到的信息进行解密。常见的非对称加密算法有：RSA、ECC、SM2。\"},\"3648\":{\"h\":\"5.3MD5是对称加密还是非对称加密？\",\"a\":\"_5-3md5是对称加密还是非对称加密\"},\"3649\":{\"t\":\"这个问题有人吐槽过，面试官竟然问MD5是对称加密还是非对称加密？其实，MD5不是加密算法，md5实际上既不是对称算法，也不是非对称加密算法。它是消息摘要（安全散列）算法。\"},\"3650\":{\"t\":\"俺也要吐槽一下。\"},\"3651\":{\"h\":\"5.4对称加密和非对称加密有哪些优缺点？\",\"a\":\"_5-4对称加密和非对称加密有哪些优缺点\"},\"3652\":{\"t\":\"对称加密优点：速度快，对称性加密通常在消息发送方需要加密大量数据时使用，具有算法公开、计算量小、加密速度快、加密效率高的特点。对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性。\"},\"3653\":{\"t\":\"对称加密的缺点：密钥的管理和分发非常困难，不够安全。在数据传送前，发送方和接收方必须商定好秘钥，并且双方都要保存好密钥，如果一方的密钥被泄露，那么加密信息也就不安全了，安全性得不到保证。\"},\"3654\":{\"t\":\"非对称加密优点：安全性更高，公钥是公开的，秘钥是自己保存的，不需要将私钥给别人。\"},\"3655\":{\"t\":\"非对称加密缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。\"},\"3656\":{\"t\":\"参考：https://www.jianshu.com/p/38c93c677124、https://blog.csdn.net/m0_69916115/article/details/126145847、https://blog.csdn.net/qq_42992084/article/details/112252684\"},\"3657\":{\"h\":\"主要功能与配置演示\"},\"3658\":{\"h\":\"目录\",\"a\":\"目录\"},\"3659\":{\"t\":\"Markdown 展示\"},\"3660\":{\"t\":\"页面展示\"},\"3661\":{\"t\":\"禁用展示\"},\"3662\":{\"t\":\"加密展示\"},\"3663\":{\"h\":\"布局与功能禁用\"},\"3664\":{\"t\":\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\"},\"3665\":{\"t\":\"本页面就是一个示例，禁用了如下功能:\"},\"3666\":{\"t\":\"导航栏\"},\"3667\":{\"t\":\"侧边栏\"},\"3668\":{\"t\":\"路径导航\"},\"3669\":{\"t\":\"页面信息\"},\"3670\":{\"t\":\"贡献者\"},\"3671\":{\"t\":\"编辑此页链接\"},\"3672\":{\"t\":\"更新时间\"},\"3673\":{\"t\":\"上一篇/下一篇 链接\"},\"3674\":{\"t\":\"评论\"},\"3675\":{\"t\":\"页脚\"},\"3676\":{\"t\":\"返回顶部按钮\"},\"3677\":{\"h\":\"密码加密的文章\"},\"3678\":{\"t\":\"实际的文章内容。\"},\"3679\":{\"t\":\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\"},\"3680\":{\"t\":\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"},\"3681\":{\"h\":\"Markdown 展示\"},\"3682\":{\"t\":\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\"},\"3683\":{\"t\":\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"},\"3684\":{\"h\":\"Markdown 介绍\",\"a\":\"markdown-介绍\"},\"3685\":{\"t\":\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"},\"3686\":{\"h\":\"Markdown 配置\",\"a\":\"markdown-配置\"},\"3687\":{\"t\":\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\"},\"3688\":{\"t\":\"相关信息\"},\"3689\":{\"t\":\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"},\"3690\":{\"h\":\"Markdown 扩展\",\"a\":\"markdown-扩展\"},\"3691\":{\"t\":\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"},\"3692\":{\"h\":\"VuePress 扩展\",\"a\":\"vuepress-扩展\"},\"3693\":{\"t\":\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\"},\"3694\":{\"t\":\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"},\"3695\":{\"h\":\"主题扩展\",\"a\":\"主题扩展\"},\"3696\":{\"t\":\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"},\"3697\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"3698\":{\"t\":\"安全的在 Markdown 中使用 {{ variable }}。\"},\"3699\":{\"t\":\"自定义标题\"},\"3700\":{\"t\":\"信息容器，包含 代码 与 链接。\"},\"3701\":{\"t\":\"const a = 1; \"},\"3702\":{\"t\":\"自定义标题\"},\"3703\":{\"t\":\"提示容器\"},\"3704\":{\"t\":\"自定义标题\"},\"3705\":{\"t\":\"警告容器\"},\"3706\":{\"t\":\"自定义标题\"},\"3707\":{\"t\":\"危险容器\"},\"3708\":{\"t\":\"自定义标题\"},\"3709\":{\"t\":\"详情容器\"},\"3710\":{\"t\":\"查看详情\"},\"3711\":{\"h\":\"代码块\",\"a\":\"代码块\"},\"3712\":{\"t\":\"查看详情\"},\"3713\":{\"h\":\"上下角标\",\"a\":\"上下角标\"},\"3714\":{\"t\":\"19th H2O\"},\"3715\":{\"t\":\"查看详情\"},\"3716\":{\"h\":\"自定义对齐\",\"a\":\"自定义对齐\"},\"3717\":{\"t\":\"我是居中的\"},\"3718\":{\"t\":\"我在右对齐\"},\"3719\":{\"t\":\"查看详情\"},\"3720\":{\"h\":\"Attrs\",\"a\":\"attrs\"},\"3721\":{\"t\":\"一个拥有 ID 的 单词。\"},\"3722\":{\"t\":\"查看详情\"},\"3723\":{\"h\":\"脚注\",\"a\":\"脚注\"},\"3724\":{\"t\":\"此文字有脚注[1].\"},\"3725\":{\"t\":\"查看详情\"},\"3726\":{\"h\":\"标记\",\"a\":\"标记\"},\"3727\":{\"t\":\"你可以标记 重要的内容 。\"},\"3728\":{\"t\":\"查看详情\"},\"3729\":{\"h\":\"任务列表\",\"a\":\"任务列表\"},\"3730\":{\"t\":\" 计划 1\"},\"3731\":{\"t\":\" 计划 2\"},\"3732\":{\"t\":\"查看详情\"},\"3733\":{\"h\":\"图片增强\",\"a\":\"图片增强\"},\"3734\":{\"t\":\"支持为图片设置颜色模式和大小\"},\"3735\":{\"t\":\"查看详情\"},\"3736\":{\"h\":\"卡片\",\"a\":\"卡片\"},\"3737\":{\"t\":\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mrhope.site/logo.svg link: https://mrhope.site color: rgba(253, 230, 138, 0.15) \"},\"3738\":{\"t\":\"查看详情\"},\"3739\":{\"h\":\"图表\",\"a\":\"图表\"},\"3740\":{\"t\":\"查看详情\"},\"3741\":{\"h\":\"Echarts\",\"a\":\"echarts\"},\"3742\":{\"t\":\"查看详情\"},\"3743\":{\"h\":\"流程图\",\"a\":\"流程图\"},\"3744\":{\"t\":\"查看详情\"},\"3745\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"3746\":{\"t\":\"查看详情\"},\"3747\":{\"h\":\"Tex 语法\",\"a\":\"tex-语法\"},\"3748\":{\"t\":\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\"},\"3749\":{\"t\":\"查看详情\"},\"3750\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"3751\":{\"t\":\"Markdown 展示\"},\"3752\":{\"t\":\"页面展示\"},\"3753\":{\"t\":\"禁用展示\"},\"3754\":{\"t\":\"加密展示\"},\"3755\":{\"t\":\"查看详情\"},\"3756\":{\"h\":\"代码演示\",\"a\":\"代码演示\"},\"3757\":{\"t\":\"查看详情\"},\"3758\":{\"h\":\"样式化\",\"a\":\"样式化\"},\"3759\":{\"t\":\"向 Mr.Hope 捐赠一杯咖啡。 \"},\"3760\":{\"t\":\"查看详情\"},\"3761\":{\"h\":\"交互演示\",\"a\":\"交互演示\"},\"3762\":{\"t\":\"查看详情\"},\"3763\":{\"h\":\"Vue 交互演示\",\"a\":\"vue-交互演示\"},\"3764\":{\"t\":\"查看详情\"},\"3765\":{\"h\":\"幻灯片\",\"a\":\"幻灯片\"},\"3766\":{\"t\":\"查看详情\"},\"3767\":{\"t\":\"这是脚注内容 ↩︎\"},\"3768\":{\"h\":\"页面配置\"},\"3769\":{\"t\":\"more 注释之前的内容被视为文章摘要。\"},\"3770\":{\"h\":\"页面信息\",\"a\":\"页面信息\"},\"3771\":{\"t\":\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\"},\"3772\":{\"t\":\"作者设置为 Ms.Hope。\"},\"3773\":{\"t\":\"写作日期为 2020 年 1 月 1 日\"},\"3774\":{\"t\":\"分类为 “使用指南”\"},\"3775\":{\"t\":\"标签为 “页面配置” 和 “使用指南”\"},\"3776\":{\"h\":\"页面内容\",\"a\":\"页面内容\"},\"3777\":{\"t\":\"你可以自由在这里书写你的 Markdown。\"},\"3778\":{\"t\":\"提示\"},\"3779\":{\"t\":\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\"},\"3780\":{\"t\":\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"},\"3781\":{\"t\":\"主题包含了一个自定义徽章可以使用:\"},\"3782\":{\"t\":\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"},\"3783\":{\"h\":\"页面结构\",\"a\":\"页面结构\"},\"3784\":{\"t\":\"此页面应当包含:\"},\"3785\":{\"t\":\"路径导航\"},\"3786\":{\"t\":\"标题和页面信息\"},\"3787\":{\"t\":\"TOC (文章标题列表)\"},\"3788\":{\"t\":\"贡献者、更新时间等页面元信息\"},\"3789\":{\"t\":\"评论\"},\"3790\":{\"t\":\"导航栏\"},\"3791\":{\"t\":\"侧边栏\"},\"3792\":{\"t\":\"页脚\"},\"3793\":{\"t\":\"返回顶部按钮\"},\"3794\":{\"t\":\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"},\"3795\":{\"h\":\"指南\"},\"3796\":{\"h\":\"功能亮点\",\"a\":\"功能亮点\"},\"3797\":{\"h\":\"Bar\",\"a\":\"bar\"},\"3798\":{\"t\":\"baz\"},\"3799\":{\"t\":\"...\"},\"3800\":{\"h\":\"Foo\",\"a\":\"foo\"},\"3801\":{\"t\":\"ray\"},\"3802\":{\"t\":\"...\"},\"3803\":{\"h\":\"写在前面\"},\"3804\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"3805\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"3806\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"3807\":{\"h\":\"Bar 功能\"},\"3808\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"3809\":{\"t\":\"我们支持 bar 功能，...\"},\"3810\":{\"h\":\"详情\",\"a\":\"详情\"},\"3811\":{\"t\":\"baz\"},\"3812\":{\"t\":\"...\"},\"3813\":{\"h\":\"Baz\"},\"3814\":{\"t\":\"功能详情...\"},\"3815\":{\"h\":\"Foo 功能\"},\"3816\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"3817\":{\"t\":\"我们支持 foo 功能，...\"},\"3818\":{\"h\":\"详情\",\"a\":\"详情\"},\"3819\":{\"t\":\"ray\"},\"3820\":{\"t\":\"...\"},\"3821\":{\"h\":\"Ray\"},\"3822\":{\"t\":\"功能详情...\"},\"3823\":{\"h\":\"JVM\"},\"3824\":{\"h\":\"二：JVM\",\"a\":\"二-jvm\"},\"3825\":{\"h\":\"基本概念\",\"a\":\"基本概念\"},\"3826\":{\"h\":\"说一下 Jvm 的主要组成部分？及其作用？\",\"a\":\"说一下-jvm-的主要组成部分-及其作用\"},\"3827\":{\"t\":\"类加载器（ClassLoader）\"},\"3828\":{\"t\":\"运行时数据区（Runtime Data Area）\"},\"3829\":{\"t\":\"执行引擎（Execution Engine）\"},\"3830\":{\"t\":\"本地库接口（Native Interface）\"},\"3831\":{\"t\":\"首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\"},\"3832\":{\"h\":\"内存结构（运行时数据区）\",\"a\":\"内存结构-运行时数据区\"},\"3833\":{\"h\":\"垃圾回收机制\",\"a\":\"垃圾回收机制\"},\"3834\":{\"h\":\"如何判断对象是否可回收？\",\"a\":\"如何判断对象是否可回收\"},\"3835\":{\"h\":\"垃圾回收算法\",\"a\":\"垃圾回收算法\"},\"3836\":{\"h\":\"垃圾收集器\",\"a\":\"垃圾收集器\"},\"3837\":{\"h\":\"类加载机制\",\"a\":\"类加载机制\"},\"3838\":{\"h\":\"类的生命周期\",\"a\":\"类的生命周期\"},\"3839\":{\"t\":\"类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，前三个阶段可以统称为连接（Linking）。\"},\"3840\":{\"t\":\"这 7 个阶段的顺序如下图所示：\"},\"3841\":{\"t\":\"一个类的完整生命周期\"},\"3842\":{\"h\":\"类加载过程\",\"a\":\"类加载过程\"},\"3843\":{\"t\":\"Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？\"},\"3844\":{\"t\":\"系统加载 Class 类型的文件主要三步：加载->连接->初始化。连接过程又可分为三步：验证->准备->解析。\"},\"3845\":{\"t\":\"类加载过程\"},\"3846\":{\"h\":\"类加载器\",\"a\":\"类加载器\"},\"3847\":{\"h\":\"介绍：\",\"a\":\"介绍\"},\"3848\":{\"t\":\"类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。\"},\"3849\":{\"t\":\"每个 Java 类都有一个引用指向加载它的 ClassLoader。\"},\"3850\":{\"t\":\"数组类不是通过 ClassLoader 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。\"},\"3851\":{\"t\":\"简单来说，类加载器的主要作用就是加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。\"},\"3852\":{\"h\":\"类加载器加载规则\",\"a\":\"类加载器加载规则\"},\"3853\":{\"t\":\"JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。\"},\"3854\":{\"t\":\"对于已经加载的类会被放在 ClassLoader 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。\"},\"3855\":{\"h\":\"类加载器总结\",\"a\":\"类加载器总结\"},\"3856\":{\"t\":\"JVM 中内置了三个重要的 ClassLoader：\"},\"3857\":{\"t\":\"BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ %JAVA_HOME%/lib目录下的 rt.jar 、resources.jar 、charsets.jar等 jar 包和类）以及被 -Xbootclasspath参数指定的路径下的所有类。\"},\"3858\":{\"t\":\"ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类以及被 java.ext.dirs 系统变量所指定的路径下的所有类。\"},\"3859\":{\"t\":\"AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。\"},\"3860\":{\"t\":\"除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ .class 文件）进行加密，加载时再利用自定义的类加载器对其解密。\"},\"3861\":{\"t\":\"如果我们要自定义自己的类加载器，很明显需要继承 ClassLoader抽象类。\"},\"3862\":{\"t\":\"ClassLoader 类有两个关键的方法：\"},\"3863\":{\"t\":\"protected Class loadClass(String name, boolean resolve)：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resove 如果为 true，在加载时调用 resolveClass(Class<?> c) 方法解析该类。\"},\"3864\":{\"t\":\"protected Class findClass(String name)：根据类的二进制名称来查找类，默认实现是空方法。\"},\"3865\":{\"t\":\"官方 API 文档中写到：\"},\"3866\":{\"t\":\"Subclasses of ClassLoader are encouraged to override findClass(String name), rather than this method.\"},\"3867\":{\"t\":\"建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。\"},\"3868\":{\"t\":\"如果我们不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 loadClass() 方法。\"},\"3869\":{\"t\":\"类加载器层次关系图\"},\"3870\":{\"h\":\"双亲委派模型\",\"a\":\"双亲委派模型\"},\"3871\":{\"t\":\"类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载呢？这就需要提到双亲委派模型了。\"},\"3872\":{\"t\":\"ClassLoader 类使用委托模型来搜索类和资源。\"},\"3873\":{\"t\":\"双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。\"},\"3874\":{\"t\":\"ClassLoader 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。\"},\"3875\":{\"t\":\"下图展示的各种类加载器之间的层次关系被称为类加载器的“双亲委派模型(Parents Delegation Model)”。\"},\"3876\":{\"t\":\"类加载器层次关系图\"},\"3877\":{\"t\":\"双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在 java.lang.ClassLoader 的 loadClass() 中，相关代码如下所示。\"},\"3878\":{\"t\":\"protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { //首先，检查该类是否已经加载过 Class c = findLoadedClass(name); if (c == null) { //如果 c 为 null，则说明该类没有被加载过 long t0 = System.nanoTime(); try { if (parent != null) { //当父类的加载器不为空，则通过父类的loadClass来加载该类 c = parent.loadClass(name, false); } else { //当父类的加载器为空，则调用启动类加载器来加载该类 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { //非空父类的类加载器无法找到相应的类，则抛出异常 } if (c == null) { //当父类加载器无法加载时，则调用findClass方法来加载该类 //用户可通过覆写该方法，来自定义类加载器 long t1 = System.nanoTime(); c = findClass(name); //用于统计类加载器相关的信息 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { //对类进行link操作 resolveClass(c); } return c; } } \"},\"3879\":{\"t\":\"每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。\"},\"3880\":{\"t\":\"结合上面的源码，简单总结一下双亲委派模型的执行流程：\"},\"3881\":{\"t\":\"在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。\"},\"3882\":{\"t\":\"类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 BootstrapClassLoader 中。\"},\"3883\":{\"t\":\"只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 findClass() 方法来加载类）。\"},\"3884\":{\"t\":\"优点：\"},\"3885\":{\"t\":\"双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。\"},\"3886\":{\"h\":\"Java基础\"},\"3887\":{\"h\":\"一：Java基础\",\"a\":\"一-java基础\"},\"3888\":{\"t\":\"HashMap、HashTable：https://blog.csdn.net/yang13563758128/article/details/86655574?spm=1001.2014.3001.5502\"},\"3889\":{\"h\":\"异常\",\"a\":\"异常\"},\"3890\":{\"h\":\"Java异常类层次结构?\",\"a\":\"java异常类层次结构\"},\"3891\":{\"t\":\"Throwable是 Java 语言中所有错误与异常的超类。 \"},\"3892\":{\"t\":\"Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。\"},\"3893\":{\"t\":\"Exception 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。\"},\"3894\":{\"t\":\"运行时异常\"},\"3895\":{\"t\":\"都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。\"},\"3896\":{\"t\":\"运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。\"},\"3897\":{\"t\":\"非运行时异常 （编译异常）\"},\"3898\":{\"t\":\"是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。\"},\"3899\":{\"h\":\"可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）区别？\",\"a\":\"可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions-区别\"},\"3900\":{\"t\":\"可查异常（编译器要求必须处置的异常）：\"},\"3901\":{\"t\":\"正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。\"},\"3902\":{\"t\":\"除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。\"},\"3903\":{\"t\":\"不可查异常(编译器不要求强制处置的异常)\"},\"3904\":{\"t\":\"包括运行时异常（RuntimeException与其子类）和错误（Error）。\"},\"3905\":{\"h\":\"throw和throws的区别？\",\"a\":\"throw和throws的区别\"},\"3906\":{\"t\":\"异常的申明(throws)\"},\"3907\":{\"t\":\"在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：\"},\"3908\":{\"t\":\"public static void method() throws IOException, FileNotFoundException{ //something statements } \"},\"3909\":{\"t\":\"异常的抛出(throw)\"},\"3910\":{\"t\":\"如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：\"},\"3911\":{\"t\":\"public static double method(int value) { if(value == 0) { throw new ArithmeticException(\\\"参数不能为0\\\"); //抛出一个运行时异常 } return 5.0 / value; } \"},\"3912\":{\"h\":\"Java 7 的 try-with-resource?\",\"a\":\"java-7-的-try-with-resource\"},\"3913\":{\"t\":\"如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。\"},\"3914\":{\"t\":\"public void automaticallyCloseResource() { File file = new File(\\\"./tmp.txt\\\"); try (FileInputStream inputStream = new FileInputStream(file);) { // use the inputStream to read a file } catch (FileNotFoundException e) { log.error(e); } catch (IOException e) { log.error(e); } } \"},\"3915\":{\"h\":\"异常的底层？\",\"a\":\"异常的底层\"},\"3916\":{\"t\":\"提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。\"},\"3917\":{\"t\":\"public static void simpleTryCatch() { try { testNPE(); } catch (Exception e) { e.printStackTrace(); } } \"},\"3918\":{\"t\":\"使用javap来分析这段代码（需要先使用javac编译）：\"},\"3919\":{\"t\":\"//javap -c Main public static void simpleTryCatch(); Code: 0: invokestatic #3 // Method testNPE:()V 3: goto 11 6: astore_0 7: aload_0 8: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 11: return Exception table: from to target type 0 3 6 Class java/lang/Exception \"},\"3920\":{\"t\":\"看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。\"},\"3921\":{\"t\":\"异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下\"},\"3922\":{\"t\":\"from 可能发生异常的起始点\"},\"3923\":{\"t\":\"to 可能发生异常的结束点\"},\"3924\":{\"t\":\"target 上述from和to之前发生异常后的异常处理者的位置\"},\"3925\":{\"t\":\"type 异常处理者处理的异常的类信息\"},\"3926\":{\"h\":\"反射\",\"a\":\"反射\"},\"3927\":{\"h\":\"什么是反射机制?\",\"a\":\"什么是反射机制\"},\"3928\":{\"t\":\"JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制。\"},\"3929\":{\"t\":\"直接new对象就叫正射。\"},\"3930\":{\"t\":\"如下:\"},\"3931\":{\"t\":\"Map<String, String> map = new HashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"3932\":{\"t\":\"那反射是啥？我先不说反射是啥，概念啥的太虚幻我就不说了，把你绕蒙你这篇文章就白看了，直接举例吧\"},\"3933\":{\"t\":\"接着看上面的正射，如果哪天你发现用LinkedHashMap效果更好，然后你修改代码：\"},\"3934\":{\"t\":\"Map<String, String> map = new LinkedHashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"3935\":{\"t\":\"改完了编译运行没有bug然而过了两天你发现用LinkedHashMap会有隐患，还是得改回去用HashMap，成年人的崩溃如此简单，但是聪明的你想到可以加个判断，根据传入的条件来决定用HashMap还是LinkedHashMap，于是：\"},\"3936\":{\"t\":\"public Map<String, String> getMap(String param) { Map<String, String> map = null; if (param.equals(\\\"HashMap\\\")) { map = new HashMap<>(); } else if (param.equals(\\\"LinkedHashMap\\\")) { map = new LinkedHashMap<>(); } return map; } \"},\"3937\":{\"t\":\"大功告成，这么难的逻辑都被你实现了，然后你得用TreeMap，你又要改代码。\"},\"3938\":{\"t\":\"有没有一种办法可以让你不修改代码呢，这时候反射就派上用场了。\"},\"3939\":{\"t\":\"概念：反射是Java的一种机制，让我们可以在运行时获取类的信息\"},\"3940\":{\"t\":\"作用：通过反射，我们可以在程序运行时动态创建对象，还能获取到类的所有信息，比如它的属性、构造器、方法、注解等；\"},\"3941\":{\"t\":\"直接举例吧：\"},\"3942\":{\"t\":\"public Map<String, String> getMap(String className) { Class clazz = Class.forName(className); Constructor constructor = clazz.getConstructor(); return (Map<String, String>) constructor.newInstance(); } \"},\"3943\":{\"t\":\"这时候不管你需要什么Map，只要实现了Map接口，你都能通过getMap获得，只需要传入对应Map的全限定名，例如java.util.HashMap / java.util.LinkedHashMap。\"},\"3944\":{\"t\":\"java中反射的用法非常非常多，常见的有以下这几个：\"},\"3945\":{\"t\":\"一、在运行时获取一个类的 Class 对象 二、在运行时构造一个类的实例化对象 三、在运行时获取一个类的所有信息：变量、方法、构造器、注解 \"},\"3946\":{\"h\":\"一、获取class对象\",\"a\":\"一、获取class对象\"},\"3947\":{\"t\":\"三种方法 1、类名.class：这种获取方式只有在编译前已经声明了该类的类型才能获取到 Class 对象\"},\"3948\":{\"t\":\"Class<HashMap> hashMap= HashMap.class; \"},\"3949\":{\"t\":\"2、实例.getClass()：通过实例化对象获取该实例的 Class 对象\"},\"3950\":{\"t\":\"Map<String, String> hashMap = new HashMap<>(); Class<? extends Map> hashMapClass = hashMap.getClass(); \"},\"3951\":{\"t\":\"3、Class.forName(“类的全限定名”)：通过类的全限定名获取该类的 Class 对象\"},\"3952\":{\"t\":\"Class<?> hashMap= Class.forName(\\\"java.util.HashMap\\\"); \"},\"3953\":{\"t\":\"拿到 Class对象就可以对它为所欲为了：调用它的方法、获取属性、获取类信息，总之它在你面前就没有隐私了，好羞羞，嘤~。\"},\"3954\":{\"h\":\"二、构造类的实例化对象\",\"a\":\"二、构造类的实例化对象\"},\"3955\":{\"t\":\"通过反射构造一个类的实例方式有2种： 1、Class 对象调用newInstance()方法\"},\"3956\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); HashMap hashMapInstance = (HashMap) hashMapClass.newInstance(); \"},\"3957\":{\"t\":\"注意：即使 HashMap已经显式定义了构造方法，通过 newInstance() 创建的实例中，所有属性值都是对应类型的初始值，因为 newInstance() 构造实例会调用默认无参构造器。\"},\"3958\":{\"t\":\"2、Constructor 构造器调用newInstance()方法\"},\"3959\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); Constructor<?> constructor = hashMapClass.getConstructor(); constructor.setAccessible(true); HashMap newInstance = (HashMap) constructor.newInstance(); \"},\"3960\":{\"t\":\"通过 getConstructor(Object… paramTypes) 方法指定获取指定参数类型的 Constructor， Constructor 调用 newInstance(Object… paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。\"},\"3961\":{\"t\":\"通过Class对象调用 newInstance() 会走默认无参构造方法，如果想通过显式构造方法构造实例，需要提前从Class中调用getConstructor()方法获取对应的构造器，通过构造器去实例化对象。\"},\"3962\":{\"h\":\"三、获取类的所有信息\",\"a\":\"三、获取类的所有信息\"},\"3963\":{\"t\":\"1、获取类中的变量（Field）\"},\"3964\":{\"t\":\"Field[] getFields()：获取类中所有被public修饰的所有变量 Field getField(String name)：根据变量名获取类中的一个变量，该变量必须被public修饰 Field[] getDeclaredFields()：获取类中所有的变量，但无法获取继承下来的变量 Field getDeclaredField(String name)：根据姓名获取类中的某个变量，无法获取继承下来的变量 \"},\"3965\":{\"t\":\"2、获取类中的方法（Method）\"},\"3966\":{\"t\":\"Method[] getMethods()：获取类中被public修饰的所有方法 Method getMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，该方法必须被public修饰 Method[] getDeclaredMethods()：获取所有方法，但无法获取继承下来的方法 Method getDeclaredMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，无法获取继承下来的方法 \"},\"3967\":{\"t\":\"3、获取类的构造器（Constructor）\"},\"3968\":{\"t\":\"Constuctor[] getConstructors()：获取类中所有被public修饰的构造器 Constructor getConstructor(Class…<?> paramTypes)：根据参数类型获取类中某个构造器，该构造器必须被public修饰 Constructor[] getDeclaredConstructors()：获取类中所有构造器 Constructor getDeclaredConstructor(class…<?> paramTypes)：根据参数类型获取对应的构造器 \"},\"3969\":{\"t\":\"反射的应用场景\"},\"3970\":{\"t\":\"1、Spring 实例化对象：当程序启动时，Spring 会读取配置文件applicationContext.xml并解析出里面所有的标签实例化到IOC容器中。 2、反射 + 工厂模式：通过反射消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，反射可以使得程序更加健壮。 3、JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的驱动类时用到反射加载驱动类 \"},\"3971\":{\"t\":\"参考：https://blog.csdn.net/qq_33709582/article/details/113550163\"},\"3972\":{\"h\":\"List\",\"a\":\"list\"},\"3973\":{\"h\":\"Set\",\"a\":\"set\"},\"3974\":{\"h\":\"Map\",\"a\":\"map\"},\"3975\":{\"h\":\"为什么JDK1.8中HashMap从头插入改成尾插入\",\"a\":\"为什么jdk1-8中hashmap从头插入改成尾插入\"},\"3976\":{\"t\":\"原文链接：https://blog.csdn.net/qq_35590459/article/details/108988011\"},\"3977\":{\"t\":\"JDK1.7中扩容时，每个元素的rehash之后，都会插入到新数组对应索引的链表头，所以这就导致原链表顺序为A->B->C，扩容之后，rehash之后的链表可能为C->B->A，元素的顺序发生了变化。在并发场景下，扩容时可能会出现循环链表的情况。而JDK1.8从头插入改成尾插入元素的顺序不变，避免出现循环链表的情况。\"},\"3978\":{\"h\":\"为什么JDK1.8采用红黑树存储 Hash 冲突的元素？\",\"a\":\"为什么jdk1-8采用红黑树存储hash冲突的元素\"},\"3979\":{\"t\":\"红黑树本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为O(log n)。能够加快检索速率。\"},\"3980\":{\"h\":\"为什么在长度小于8时使用链表，不一直使用红黑树？\",\"a\":\"为什么在长度小于8时使用链表-不一直使用红黑树\"},\"3981\":{\"t\":\"桶中元素的插入只会在hash冲突时发生，而hash冲突发生的概率较小，一直维护一个红黑树比链表耗费资源更多，在桶中元素量较小时没有这个必要。\"},\"3982\":{\"h\":\"为什么要使用红黑树而不使用AVL树？\",\"a\":\"为什么要使用红黑树而不使用avl树\"},\"3983\":{\"t\":\"红黑树与AVLl树，在检索的时候效率差不多，都是通过平衡来二分查找。但红黑树不像avl树一样追求绝对的平衡，红黑树允许局部很少的不完全平衡，这样对于效率影响不大，但省去了很多没有必要的调平衡操作，avl树调平衡有时候代价较大，所以效率不如红黑树。\"},\"3984\":{\"h\":\"为什么数组容量必须是2次幂？\",\"a\":\"为什么数组容量必须是2次幂\"},\"3985\":{\"t\":\"索引计算公式为i = (n - 1) & hash，如果n为2次幂，那么n-1的低位就全是1，哈希值进行与操作时可以保证低位的值不变，从而保证分布均匀，效果等同于hash%n，但是位运算比取余运算要高效的多。\"},\"3986\":{\"h\":\"为什么单链表转为红黑树要求桶内的元素个数大于8？\",\"a\":\"为什么单链表转为红黑树要求桶内的元素个数大于8\"},\"3987\":{\"t\":\"当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，而一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件。\"},\"3988\":{\"t\":\"同理，少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗，而选择8作为临界值，是因理想情况下一个bin中元素个数达到6的概率是0.00001316，达到7的概率为0.00000094，二者跨度较大，可以减小树和链表之间频繁转化的可能性。\"},\"3989\":{\"h\":\"数据结构\",\"a\":\"数据结构\"},\"3990\":{\"h\":\"数组\",\"a\":\"数组\"},\"3991\":{\"h\":\"链表\",\"a\":\"链表\"},\"3992\":{\"h\":\"栈\",\"a\":\"栈\"},\"3993\":{\"h\":\"队列\",\"a\":\"队列\"},\"3994\":{\"h\":\"二叉树\",\"a\":\"二叉树\"},\"3995\":{\"h\":\"红黑树\",\"a\":\"红黑树\"},\"3996\":{\"h\":\"1.简介\",\"a\":\"_1-简介\"},\"3997\":{\"t\":\"红黑树是一种自平衡的二叉查找树，是一种高效的查找树。红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作。\"},\"3998\":{\"h\":\"2.为什么需要红黑树？\",\"a\":\"_2-为什么需要红黑树\"},\"3999\":{\"t\":\"对于二叉搜索树，如果插入的数据是随机的，那么它就是接近平衡的二叉树，平衡的二叉树，它的操作效率（查询，插入，删除）效率较高，时间复杂度是O（logN）。但是可能会出现一种极端的情况，那就是插入的数据是有序的（递增或者递减），那么所有的节点都会在根节点的右侧或左侧，此时，二叉搜索树就变为了一个链表，它的操作效率就降低了，时间复杂度为O(N)，所以可以认为二叉搜索树的时间复杂度介于O（logN）和O(N)之间，视情况而定。那么为了应对这种极端情况，红黑树就出现了，它是具备了某些特性的二叉搜索树，能解决非平衡树问题，红黑树是一种接近平衡的二叉树（说它是接近平衡因为它并没有像AVL树的平衡因子的概念，它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构，进而提升整体的性能，并没有严格的卡定某个平衡因子来维持绝对平衡）。\"},\"4000\":{\"h\":\"3.红黑树的特性\",\"a\":\"_3-红黑树的特性\"},\"4001\":{\"t\":\"首先，红黑树是一个二叉搜索树，它在每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK；通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡（最短路径就是全黑节点，最长路径就是一个红节点一个黑节点，当从根节点到叶子节点的路径上黑色节点相同时，最长路径刚好是最短路径的两倍）。它同时满足以下特性：\"},\"4002\":{\"t\":\"节点是红色或黑色\"},\"4003\":{\"t\":\"根是黑色\"},\"4004\":{\"t\":\"叶子节点（外部节点，空节点）都是**黑色，**这里的叶子节点指的是最底层的空节点（外部节点），下图中的那些null节点才是叶子节点，null节点的父节点在红黑树里不将其看作叶子节点\"},\"4005\":{\"t\":\"红色节点的子节点都是黑色；\"},\"4006\":{\"t\":\"红色节点的父节点都是黑色；\"},\"4007\":{\"t\":\"从根节点到叶子节点的所有路径上不能有 2 个连续的红色节点\"},\"4008\":{\"t\":\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\"},\"4009\":{\"t\":\"img\"},\"4010\":{\"h\":\"4.红黑树的效率\",\"a\":\"_4-红黑树的效率\"},\"4011\":{\"t\":\"红黑树的查找，插入和删除操作，时间复杂度都是O(logN)。\"},\"4012\":{\"t\":\"查找操作时，它和普通的相对平衡的二叉搜索树的效率相同，都是通过相同的方式来查找的，没有用到红黑树特有的特性。\"},\"4013\":{\"t\":\"但如果插入的时候是有序数据，那么红黑树的查询效率就比二叉搜索树要高了，因为此时二叉搜索树不是平衡树，它的时间复杂度O(N)。\"},\"4014\":{\"t\":\"插入和删除操作时，由于红黑树的每次操作平均要旋转一次和变换颜色，所以它比普通的二叉搜索树效率要低一点，不过时间复杂度仍然是O(logN)。总之，红黑树的优点就是对有序数据的查询操作不会慢到O(N)的时间复杂度。\"},\"4015\":{\"t\":\"红黑树和AVL树的比较：\"},\"4016\":{\"t\":\"AVL树的时间复杂度虽然优于红黑树，但是对于现在的计算机，cpu太快，可以忽略性能差异\"},\"4017\":{\"t\":\"红黑树的插入删除比AVL树更便于控制操作\"},\"4018\":{\"t\":\"红黑树整体性能略优于AVL树（红黑树旋转情况少于AVL树）\"},\"4019\":{\"h\":\"哈希表结构\",\"a\":\"哈希表结构\"},\"4020\":{\"h\":\"常见的设计模式\",\"a\":\"常见的设计模式\"},\"4021\":{\"h\":\"软件设计原则有哪些？\",\"a\":\"软件设计原则有哪些\"},\"4022\":{\"h\":\"什么是设计模式？\",\"a\":\"什么是设计模式\"},\"4023\":{\"t\":\"设计模式（Design pattern）代表了最佳的实践，通常被有经验的⾯向对象的软件开发⼈员所采⽤。设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案。这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的。\"},\"4024\":{\"t\":\"分为三大类：\"},\"4025\":{\"t\":\"创建型： 在创建对象的同时隐藏创建逻辑，不使⽤ new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括⼯⼚/抽象⼯⼚/单例/建造者/原型模式。 结构型： 通过类和接⼝间的继承和引⽤实现创建复杂结构的对象。包括适配器/桥接模式/过滤器/组合/装饰器/外观/享元/代理模式。 行为型： 通过类之间不同通信⽅式实现不同⾏为。包括责任链/命名/解释器/迭代器/中介者/备忘录/观察者/状态/策略/模板/访问者模式。\"},\"4026\":{\"h\":\"单例模式\",\"a\":\"单例模式\"},\"4027\":{\"t\":\"单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，构造⽅法必须是私有的、由自己创建⼀个静态变量存储实例，对外提供⼀个静态公有方法获取实例。\"},\"4028\":{\"t\":\"双重检查锁（DCL， 即 double-checked locking） 实现代码如下：\"},\"4029\":{\"t\":\"public class Singleton { // 1、私有化构造⽅法 private Singleton() { } // 2、定义⼀个静态变量指向⾃⼰类型 private volatile static Singleton instance; // 3、对外提供⼀个公共的⽅法获取实例 public static Singleton getInstance() { // 第⼀重检查是否为 null if (instance == null) { // 使⽤ synchronized 加锁 synchronized (Singleton.class) { // 第⼆重检查是否为 null if (instance == null) { // new 关键字创建对象不是原⼦操作 instance = new Singleton(); } } } return instance; } } \"},\"4030\":{\"t\":\"优点：懒加载，线程安全，效率较⾼缺点：实现较复杂 这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单例。关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返回已创建的单例对象。\"},\"4031\":{\"h\":\"工厂模式\",\"a\":\"工厂模式\"},\"4032\":{\"h\":\"说⼀说简单⼯⼚模式：\",\"a\":\"说一说简单工厂模式\"},\"4033\":{\"t\":\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数。\"},\"4034\":{\"t\":\"适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较复杂。\"},\"4035\":{\"t\":\"Spring 中的 BeanFactory 使⽤简单⼯⼚模式，根据传⼊⼀个唯⼀的标识来获得 Bean 对象。\"},\"4036\":{\"h\":\"⼯⼚⽅法模式了解吗：\",\"a\":\"工厂方法模式了解吗\"},\"4037\":{\"t\":\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐，⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚。\"},\"4038\":{\"t\":\"也就是定义⼀个抽象⼯⼚，其定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。这样不⽤通过指定类型来创建对象了。\"},\"4039\":{\"h\":\"抽象⼯⼚模式了解吗：\",\"a\":\"抽象工厂模式了解吗\"},\"4040\":{\"t\":\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象，都只是针对⼀类产品，如果要⽣成另⼀种产品，就⽐较难办了！抽象⼯⼚模式通过在 AbstarctFactory 中增加创建产品的接⼝，并在具体⼦⼯⼚中实现新加产品的创建，当然前提是⼦⼯⼚⽀持⽣产该产品。否则继承的这个接⼝可以什么也不⼲。\"},\"4041\":{\"h\":\"装饰器模式\",\"a\":\"装饰器模式\"},\"4042\":{\"h\":\"代理模式\",\"a\":\"代理模式\"},\"4043\":{\"h\":\"什么是代理模式？\",\"a\":\"什么是代理模式\"},\"4044\":{\"t\":\"代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制，是⼀种结构性模式。\"},\"4045\":{\"h\":\"静态代理和动态代理的区别：\",\"a\":\"静态代理和动态代理的区别\"},\"4046\":{\"t\":\"灵活性 ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。另外，静态代理中，接⼝⼀旦新增加⽅法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！\"},\"4047\":{\"t\":\"JVM 层⾯ ：静态代理在编译时就将接⼝、实现类、代理类这些都变成了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节码，并加载到 JVM 中的。\"},\"4048\":{\"h\":\"静态代理：\",\"a\":\"静态代理\"},\"4049\":{\"t\":\"静态代理中，我们对目标对象的每个方法的增强都是手动完成的（*后面会具体演示代码*），非常不灵活（*比如接口一旦新增加方法，目标对象和代理对象都要进行修改*）且麻烦(*需要对每个目标类都单独写一个代理类*）。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\"},\"4050\":{\"t\":\"上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\"},\"4051\":{\"h\":\"动态代理：\",\"a\":\"动态代理\"},\"4052\":{\"t\":\"相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。\"},\"4053\":{\"t\":\"从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\"},\"4054\":{\"t\":\"说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\"},\"4055\":{\"t\":\"动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\"},\"4056\":{\"t\":\"就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\"},\"4057\":{\"h\":\"JDK 动态代理机制\",\"a\":\"jdk-动态代理机制\"},\"4058\":{\"t\":\"在 Java 动态代理机制中 InvocationHandler 接口和 Proxy 类是核心。\"},\"4059\":{\"t\":\"Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\"},\"4060\":{\"t\":\" public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException { ...... } 这个方法一共有 3 个参数： loader :类加载器，用于加载代理对象。 interfaces : 被代理类实现的一些接口； h : 实现了 InvocationHandler 接口的对象； \"},\"4061\":{\"t\":\"要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\"},\"4062\":{\"t\":\"public interface InvocationHandler { /** * 当你使用代理对象调用方法的时候实际会调用到这个方法 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; } invoke() 方法有下面三个参数： proxy :动态生成的代理类 method : 与代理类对象调用的方法相对应 args : 当前 method 方法的参数 \"},\"4063\":{\"t\":\"也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\"},\"4064\":{\"h\":\"CGLIB 动态代理机制\",\"a\":\"cglib-动态代理机制\"},\"4065\":{\"t\":\"JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。\"},\"4066\":{\"t\":\"为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\"},\"4067\":{\"t\":\"CGLIBCode Generation Library)允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\"},\"4068\":{\"t\":\"在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\"},\"4069\":{\"t\":\"你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\"},\"4070\":{\"t\":\"public interface MethodInterceptor extends Callback{ // 拦截被代理类中的方法 public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy) throws Throwable; } obj : 被代理的对象（需要增强的对象） method : 被拦截的方法（需要增强的方法） args : 方法入参 proxy : 用于调用原始方法 \"},\"4071\":{\"t\":\"你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\"},\"4072\":{\"h\":\"JDK 动态代理和 CGLIB 动态代理对比：\",\"a\":\"jdk-动态代理和-cglib-动态代理对比\"},\"4073\":{\"t\":\"JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\"},\"4074\":{\"t\":\"就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\"},\"4075\":{\"h\":\"框架\"},\"4076\":{\"h\":\"四：Java高级：Spring、SpringMVC、Spring Boot、MyBatis\",\"a\":\"四-java高级-spring、springmvc、spring-boot、mybatis\"},\"4077\":{\"h\":\"AOP和IOC概念\",\"a\":\"aop和ioc概念\"},\"4078\":{\"t\":\"AOP：AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。\"},\"4079\":{\"t\":\"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理。\"},\"4080\":{\"t\":\"IOC： 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。\"},\"4081\":{\"t\":\"为什么叫控制反转？\"},\"4082\":{\"t\":\"控制 ：指的是对象创建（实例化、管理）的权力\"},\"4083\":{\"t\":\"反转 ：控制权交给外部环境（Spring 框架、IoC 容器）\"},\"4084\":{\"h\":\"Bean的生命周期\",\"a\":\"bean的生命周期\"},\"4085\":{\"h\":\"MVC的基本流程\",\"a\":\"mvc的基本流程\"},\"4086\":{\"t\":\"简单来说：客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler -> HandlerAdapter 会根据 Handler 来调用真正的处理器来处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象 -> 前端控制器 DispatcherServlet 渲染数据（Model）-> 将得到视图对象返回给用户。\"},\"4087\":{\"t\":\"image-20210608002334025\"},\"4088\":{\"t\":\"上图用于辅助理解，面试时可用下列 8 步描述 SpringMVC 运行流程：\"},\"4089\":{\"t\":\"用户向服务器发送请求，请求被 Spring 前端控制Servelt DispatcherServlet 捕获；\"},\"4090\":{\"t\":\"DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 对象的形式返回；\"},\"4091\":{\"t\":\"DispatcherServlet 根据获得的 Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得 HandlerAdapter 后，此时将开始执行拦截器的 preHandler(…)方法）\"},\"4092\":{\"t\":\"提取 Request 中的模型数据，填充 Handler 入参，开始执行Handler（Controller)。在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\"},\"4093\":{\"t\":\"（1）HttpMessageConveter：将请求消息（如：Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息；\"},\"4094\":{\"t\":\"（2）数据转换：对请求消息进行数据转换。如：String 转换成 Integer、Double 等；\"},\"4095\":{\"t\":\"（3）数据格式化：对请求消息进行数据格式化。如：将字符串转换成格式化数字或格式化日期等；\"},\"4096\":{\"t\":\"（4）数据验证：验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中;\"},\"4097\":{\"t\":\"5.Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象；\"},\"4098\":{\"t\":\"6.根据返回的 ModelAndView，选择一个适合的 ViewResolver（必须是已经注册到 Spring 容器中的 ViewResolver)返回给DispatcherServlet；\"},\"4099\":{\"t\":\"7.ViewResolver 结合 Model 和 View，来渲染视图；\"},\"4100\":{\"t\":\"8.将渲染结果返回给客户端。\"},\"4101\":{\"h\":\"Spring的设计模式\",\"a\":\"spring的设计模式\"},\"4102\":{\"t\":\"工厂设计模式 : Spring 使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象；\"},\"4103\":{\"t\":\"代理设计模式 : Spring AOP 功能的实现；\"},\"4104\":{\"t\":\"单例设计模式 : Spring 中的 Bean 默认都是单例的；\"},\"4105\":{\"t\":\"模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式；\"},\"4106\":{\"t\":\"包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源；\"},\"4107\":{\"t\":\"观察者模式：Spring 事件驱动模型就是观察者模式很经典的一个应用；\"},\"4108\":{\"t\":\"适配器模式：Spring AOP 的增强或通知(Advice)使用到了适配器模式、SpringMVC 中也是用到了适配器模式适配 Controller。\"},\"4109\":{\"h\":\"Spring事务机制\",\"a\":\"spring事务机制\"},\"4110\":{\"h\":\"谈谈你对 Spring 中的事务的理解？\",\"a\":\"谈谈你对-spring-中的事务的理解\"},\"4111\":{\"t\":\"事务是逻辑上的一组操作，要么都执行，要么都不执行。\"},\"4112\":{\"t\":\"事务特性\"},\"4113\":{\"t\":\"原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\"},\"4114\":{\"t\":\"一致性：执行事务前后，数据保持一致；\"},\"4115\":{\"t\":\"隔离性：并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\"},\"4116\":{\"t\":\"持久性: 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\"},\"4117\":{\"t\":\"Spring 事务管理接口\"},\"4118\":{\"t\":\"PlatformTransactionManager：（平台）事务管理器；\"},\"4119\":{\"t\":\"TransactionDefinition：事务定义信息（事务隔离级别、传播行为、超时、只读、回滚规则）；\"},\"4120\":{\"t\":\"TransactionStatus：事务运行状态；\"},\"4121\":{\"t\":\"所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。\"},\"4122\":{\"h\":\"Spring 中的事务隔离级别？\",\"a\":\"spring-中的事务隔离级别\"},\"4123\":{\"t\":\"TransactionDefinition 接口中定义了五个表示隔离级别的常量：\"},\"4124\":{\"t\":\"TransactionDefinition.ISOLATION_DEFAULT：使用后端数据库默认的隔离级别，MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED 隔离级别；\"},\"4125\":{\"t\":\"TransactionDefinition.ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读；\"},\"4126\":{\"t\":\"TransactionDefinition.ISOLATION_READ_COMMITTED：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生；\"},\"4127\":{\"t\":\"TransactionDefinition.ISOLATION_REPEATABLE_READ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生；\"},\"4128\":{\"t\":\"TransactionDefinition.ISOLATION_SERIALIZABLE：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\"},\"4129\":{\"h\":\"Spring 中的事物传播行为？\",\"a\":\"spring-中的事物传播行为\"},\"4130\":{\"t\":\"事务传播行为是为了解决业务层方法之间互相调用的事务问题。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在 TransactionDefinition 定义中包括了如下几个表示传播行为的常量：\"},\"4131\":{\"t\":\"支持当前事务的情况：\"},\"4132\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务；\"},\"4133\":{\"t\":\"TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行；\"},\"4134\":{\"t\":\"TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\"},\"4135\":{\"t\":\"不支持当前事务的情况：\"},\"4136\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起；\"},\"4137\":{\"t\":\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\"},\"4138\":{\"t\":\"TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\"},\"4139\":{\"t\":\"其他情况：\"},\"4140\":{\"t\":\"TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 TransactionDefinition.PROPAGATION_REQUIRED。\"},\"4141\":{\"h\":\"Spring如何解决循环依赖问题？\",\"a\":\"spring如何解决循环依赖问题\"},\"4142\":{\"t\":\"了解问题的本质再分析问题，往往更利于对问题有更深入的了解和研究。所以我们在分析 Spring 关于循环依赖的源码之前，先要了解下什么是循环依赖。\"},\"4143\":{\"t\":\"1. 循环依赖的概念\"},\"4144\":{\"t\":\"img\"},\"4145\":{\"t\":\"循环依赖分为三种，自身依赖于自身、互相循环依赖、多组循环依赖。\"},\"4146\":{\"t\":\"但无论循环依赖的数量有多少，循环依赖的本质是一样的。就是你的完整创建依赖于我，而我的完整创建也依赖于你，但我们互相没法解耦，最终导致依赖创建失败。\"},\"4147\":{\"t\":\"所以 Spring 提供了除了构造函数注入和原型注入外的，setter循环依赖注入解决方案。那么我们也可以先来尝试下这样的依赖，如果是我们自己处理的话该怎么解决。\"},\"4148\":{\"t\":\"2. 问题体现\"},\"4149\":{\"t\":\"public class ABTest { public static void main(String[] args) { new ClazzA(); } } class ClazzA { private ClazzB b = new ClazzB(); } class ClazzB { private ClazzA a = new ClazzA(); } \"},\"4150\":{\"t\":\"3.解决方案\"},\"4151\":{\"t\":\"整个解决循环依赖的核心内容，A 创建后填充属性时依赖 B，那么就去创建 B，在创建 B 开始填充时发现依赖于 A，但此时 A 这个半成品对象已经存放在缓存到singletonObjects 中了，所以 B 可以正常创建，在通过递归把 A 也创建完整了。\"},\"4152\":{\"t\":\"4.Spring解决\"},\"4153\":{\"t\":\"（1）一级缓存能解决吗？\"},\"4154\":{\"t\":\"img\"},\"4155\":{\"t\":\"其实只有一级缓存并不是不能解决循环依赖，就像我们自己做的例子一样。\"},\"4156\":{\"t\":\"但是在 Spring 中如果像我们例子里那么处理，就会变得非常麻烦，而且也可能会出现 NPE 问题。\"},\"4157\":{\"t\":\"所以如图按照 Spring 中代码处理的流程，我们去分析一级缓存这样存放成品 Bean 的流程中，是不能解决循环依赖的问题的。因为 A 的成品创建依赖于 B，B的成品创建又依赖于 A，当需要补全B的属性时 A 还是没有创建完，所以会出现死循环。\"},\"4158\":{\"t\":\"（2） 二级缓存能解决吗？\"},\"4159\":{\"t\":\"img\"},\"4160\":{\"t\":\"有了二级缓存其实这个事处理起来就容易了，一个缓存用于存放成品对象，另外一个缓存用于存放半成品对象。\"},\"4161\":{\"t\":\"A 在创建半成品对象后存放到缓存中，接下来补充 A 对象中依赖 B 的属性。\"},\"4162\":{\"t\":\"B 继续创建，创建的半成品同样放到缓存中，在补充对象的 A 属性时，可以从半成品缓存中获取，现在 B 就是一个完整对象了，而接下来像是递归操作一样 A 也是一个完整对象了。\"},\"4163\":{\"t\":\"（3） 三级缓存解决什么？\"},\"4164\":{\"t\":\"img\"},\"4165\":{\"t\":\"有了二级缓存都能解决 Spring 依赖了，怎么要有三级缓存呢。其实我们在前面分析源码时也提到过，三级缓存主要是解决 Spring AOP 的特性。AOP 本身就是对方法的增强，是 ObjectFactory<?> 类型的 lambda 表达式，而 Spring 的原则又不希望将此类类型的 Bean 前置创建，所以要存放到三级缓存中处理。\"},\"4166\":{\"t\":\"其实整体处理过程类似，唯独是 B 在填充属性 A 时，先查询成品缓存、再查半成品缓存，最后在看看有没有单例工程类在三级缓存中。最终获取到以后调用 getObject 方法返回代理引用或者原始引用。\"},\"4167\":{\"t\":\"至此也就解决了 Spring AOP 所带来的三级缓存问题。本章节涉及到的 AOP 依赖有源码例子，可以进行调试\"},\"4168\":{\"t\":\"（4）总结\"},\"4169\":{\"t\":\"回顾本文基本以实际操作的例子开始，引导大家对循环依赖有一个整体的认识，也对它的解决方案可以上手的例子，这样对后续的关于 Spring 对循环依赖的解决也就不会那么陌生了。\"},\"4170\":{\"t\":\"通篇全文下来大家也可以看到，三级缓存并不是非必须不可，只不过在满足 Spring 自身创建的原则下，是必须的。如果你可以下载 Spring 源码对这部分代码进行改动下，提前创建 AOP 对象保存到缓存中，那么二级缓存一样可以解决循环依赖问题。\"},\"4171\":{\"h\":\"Spring Boot自动配置原理\",\"a\":\"spring-boot自动配置原理\"},\"4172\":{\"t\":\"在Spring程序main方法中，添加@SpringBootApplication或者@EnableAutoConfiguration会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建的Spring容器中的bean。Spring Boot 通过@EnableAutoConfiguration开启自动装配，通过 SpringFactoriesLoader 最终加载META-INF/spring.factories中的自动配置类实现自动装配，自动配置类其实就是通过@Conditional按需加载的配置类，想要其生效必须引入spring-boot-starter-xxx包实现起步依赖。\"},\"4173\":{\"t\":\"第 1 步: 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true，可在 application.properties 或 application.yml 中设置 \"},\"4174\":{\"t\":\"img\"},\"4175\":{\"t\":\"第 2 步 ： 用于获取EnableAutoConfiguration注解中的 exclude 和 excludeName。 \"},\"4176\":{\"t\":\"img\"},\"4177\":{\"t\":\"第 3 步： 获取需要自动装配的所有配置类，读取META-INF/spring.factories： spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories \"},\"4178\":{\"t\":\"img\"},\"4179\":{\"t\":\"从下图可以看到这个文件的配置内容都被我们读取到了。XXXAutoConfiguration的作用就是按需加载组件。 不光是这个依赖下的META-INF/spring.factories被读取到，所有 Spring Boot Starter 下的META-INF/spring.factories都会被读取到。 \"},\"4180\":{\"t\":\"img\"},\"4181\":{\"t\":\"参考：https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html#autoconfigurationimportselector-加载自动装配类\"},\"4182\":{\"h\":\"Spring Boot 加载配置文件的优先级了解么？\",\"a\":\"spring-boot-加载配置文件的优先级了解么\"},\"4183\":{\"t\":\"项目启动后扫描顺序：\"},\"4184\":{\"t\":\"1）先去项目根目录找config文件夹下找配置文件件 2）再去根目录下找配置文件 3）去resources下找cofnig文件夹下找配置文件 4）去resources下找配置文件\"},\"4185\":{\"t\":\"在这里插入图片描述\"},\"4186\":{\"h\":\"如何使用 Spring Boot 实现全局异常处理？\",\"a\":\"如何使用-spring-boot-实现全局异常处理\"},\"4187\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485568&idx=2&sn=c5ba880fd0c5d82e39531fa42cb036ac&chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&token=1729829670&lang=zh_CN#rd\"},\"4188\":{\"t\":\"使用 @ControllerAdvice 和 @ExceptionHandler 处理全局异常\"},\"4189\":{\"t\":\"@ExceptionHandler 处理 Controller 级别的异常\"},\"4190\":{\"t\":\"例子：\"},\"4191\":{\"t\":\"CustomException： public class CustomException extends RuntimeException { private AppHttpCodeEnum appHttpCodeEnum; public CustomException(AppHttpCodeEnum appHttpCodeEnum){ this.appHttpCodeEnum = appHttpCodeEnum; } public AppHttpCodeEnum getAppHttpCodeEnum() { return appHttpCodeEnum; } } \"},\"4192\":{\"t\":\"ExceptionCatch： @ControllerAdvice //控制器增强类 @Slf4j public class ExceptionCatch { /** * 处理不可控异常 * @param e * @return */ @ExceptionHandler(Exception.class) @ResponseBody public ResponseResult exception(Exception e){ e.printStackTrace(); log.error(\\\"catch exception:{}\\\",e.getMessage()); return ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR); } /** * 处理可控异常 自定义异常 * @param e * @return */ @ExceptionHandler(CustomException.class) @ResponseBody public ResponseResult exception(CustomException e){ log.error(\\\"catch exception:{}\\\",e); return ResponseResult.errorResult(e.getAppHttpCodeEnum()); } } \"},\"4193\":{\"h\":\"核心配置文件\",\"a\":\"核心配置文件\"},\"4194\":{\"t\":\"SpringBoot的核心配置文件是application和bootstrap配置文件。\"},\"4195\":{\"t\":\"application配置文件这个容易理解，主要用于Spring Boot项目的自动化配置。\"},\"4196\":{\"t\":\"bootstrap配置文件有以下几个应用场景：\"},\"4197\":{\"t\":\"使用Spring Cloud Config配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；\"},\"4198\":{\"t\":\"一些固定的不能被覆盖的属性；\"},\"4199\":{\"t\":\"一些加密/解密的场景；\"},\"4200\":{\"h\":\"实现热部署的方式\",\"a\":\"实现热部署的方式\"},\"4201\":{\"t\":\"这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。\"},\"4202\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> </dependency> \"},\"4203\":{\"h\":\"监视器和监听器\",\"a\":\"监视器和监听器\"},\"4204\":{\"h\":\"监听器\",\"a\":\"监听器\"},\"4205\":{\"t\":\"监听器也叫listener，是servlet的监听器，可以用于监听web应用程序中某些对象的创建、销毁、增加、修改、删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化时，服务器自动调用监听器对象中的方法，常用于系统加载时进行信息初始化，统计在线人数和在线用户，统计网站的访问量。 配置监听器的方法：\"},\"4206\":{\"t\":\"通过@Component把监听器加入Spring容器中管理;\"},\"4207\":{\"t\":\"在application.properties中添加context.listener.classes配置;\"},\"4208\":{\"t\":\"在方法上加@EventListener注解;\"},\"4209\":{\"h\":\"监控器\",\"a\":\"监控器\"},\"4210\":{\"t\":\"actuator\"},\"4211\":{\"t\":\" 这是springboot程序的监控系统，可以实现健康检查，info信息等。在使用之前需要引入`spring-boot-starter-actuator`，并做简单的配置即可。 引入依赖并编写好配置之后，启动项目，访问http://localhost:8080/actuator \"},\"4212\":{\"t\":\"Spring Boot自带监控组件—Actuator，它可以帮助实现对程序内部运行情况的监控。Actuator轻松实现应用程序的监控治理，比如健康状况、审计、统计和HTTP追踪、Bean加载情况、环境变量、日志信息、线程信息等。 Actuator的核心是端点（Endpoint），它用来监视、提供应用程序的信息，Spring Boot提供的spring-boot-actuator组件中已经内置了非常多的Endpoint（health、info、beans、metrics、httptrace、shutdown等），每个端点都可以启用和禁用。\"},\"4213\":{\"h\":\"什么是Spring Boot Starter？有哪些常用的？\",\"a\":\"什么是spring-boot-starter-有哪些常用的\"},\"4214\":{\"t\":\"和自动配置一样，Spring Boot Starter的目的也是简化配置，而Spring Boot Starter解决的是依赖管理配置复杂的问题，有了它，当我需要构建一个Web应用程序时，不必再遍历所有的依赖包，一个一个地添加到项目的依赖管理中，而是只需要一个配置spring-boot-starter-web。\"},\"4215\":{\"t\":\"常用的：\"},\"4216\":{\"t\":\"spring-boot-starter-web - Web 和 RESTful 应用程序\"},\"4217\":{\"t\":\"spring-boot-starter-test - 单元测试和集成测试\"},\"4218\":{\"t\":\"spring-boot-starter-parent有什么作用？\"},\"4219\":{\"t\":\"我们知道，新建一个SpringBoot项目，默认都是有parent的，这个parent就是spring-boot-starter-parent，spring-boot-starter-parent主要有如下作用：\"},\"4220\":{\"t\":\"定义了Java编译版本\"},\"4221\":{\"t\":\"使用UTF-8格式编码\"},\"4222\":{\"t\":\"继承自spring-boor-dependencies，这里面定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号\"},\"4223\":{\"t\":\"执行打包操作的配置\"},\"4224\":{\"t\":\"自动化的资源过滤\"},\"4225\":{\"t\":\"自动化的插件配置\"},\"4226\":{\"h\":\"Spring Boot四大核心组件\",\"a\":\"spring-boot四大核心组件\"},\"4227\":{\"t\":\"四大组件分别是：starter， autoconfigure, CLI 以及actuator。\"},\"4228\":{\"t\":\"autoconfigure在我们的开发中并不会被感知，因为它是存在与我们的starter中的。所以我们的每个starter都是依赖autoconfigure的。\"},\"4229\":{\"t\":\"Spring Boot CLI是一个命令行使用Spring Boot的客户端工具；主要功能如下：\"},\"4230\":{\"t\":\"运行groovy脚本 => 官网2.1\"},\"4231\":{\"t\":\"打包groovy文件到jar => 官网2.3\"},\"4232\":{\"t\":\"初始化Spring Boot项目 => 官网2.4\"},\"4233\":{\"t\":\"其他\"},\"4234\":{\"t\":\"actuator是Spring Boot的监控插件，本身提供了很多接口可以获取当前项目的各项运行状态指标。\"},\"4235\":{\"h\":\"MyBatis Dao接口原理\",\"a\":\"mybatis-dao接口原理\"},\"4236\":{\"h\":\"MyBatis分页原理\",\"a\":\"mybatis分页原理\"},\"4237\":{\"t\":\"img\"},\"4238\":{\"t\":\"总结一下：\"},\"4239\":{\"t\":\"通过page对象作为分页依据\"},\"4240\":{\"t\":\"通过count来进行查询总条数的限制\"},\"4241\":{\"t\":\"对原sql通过limit来进行分页的效果\"},\"4242\":{\"t\":\"参考：https://blog.csdn.net/xiaolegeaizy/article/details/108461284\"},\"4243\":{\"h\":\"MyBatis 是如何进行分页的？分页插件的原理是什么？\",\"a\":\"mybatis-是如何进行分页的-分页插件的原理是什么\"},\"4244\":{\"t\":\"答：\"},\"4245\":{\"t\":\"(1) MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；\"},\"4246\":{\"t\":\"(2) 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能；\"},\"4247\":{\"t\":\"(3) 也可以使用分页插件来完成物理分页。\"},\"4248\":{\"t\":\"分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。\"},\"4249\":{\"t\":\"举例： select _ from student ，拦截 sql 后重写为： select t._ from （select \\\\* from student）t limit 0，10 \"},\"4250\":{\"t\":\"MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 invoke() 方法，当然，只会拦截那些指定需要拦截的方法。\"},\"4251\":{\"t\":\"实现 MyBatis 的 Interceptor 接口并复写 intercept() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，在配置文件中配置编写的插件。\"},\"4252\":{\"h\":\"MyBatis缓存机制(一级缓存、二级缓存、三级缓存)\",\"a\":\"mybatis缓存机制-一级缓存、二级缓存、三级缓存\"},\"4253\":{\"h\":\"一级缓存：\",\"a\":\"一级缓存\"},\"4254\":{\"t\":\"作用域是同一个 SqlSession，在同一个 sqlSession 中两次执行相同的 sql 语句， 第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取,从而提高查询效率。当一个 sqlSession 结束后该 sqlSession 中的 一级缓存也就不存在了。Mybatis 默认开启一级缓存。 一级缓存内部存储使用一个 HashMap，key 为 hashCode+sqlId+Sql 语句。value 为 从查询出来映射生成的 java 对象 sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。\"},\"4255\":{\"h\":\"二级缓存：\",\"a\":\"二级缓存\"},\"4256\":{\"t\":\"是多个 SqlSession 共享的，其作用域是 mapper 的同一个 namespace，不同 的 sqlSession 两次执行相同 namespace 下的 sql 语句且向 sql 中传递参数也相同即最终执行 相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从 缓存中获取数据将不再从数据库查询，从而提高查询效率。Mybatis 默认没有开启二级缓存 需要在 setting 全局参数中配置开启二级缓存。\"},\"4257\":{\"t\":\"在yml中添加以下代码：\"},\"4258\":{\"t\":\"在这里插入图片描述\"},\"4259\":{\"t\":\"然后在对应的mapper.xml里面加入配置：\"},\"4260\":{\"t\":\"在这里插入图片描述\"},\"4261\":{\"t\":\"注意：开启二级缓存后，对应的pojo一定要实现Serializable，否则在序列化的时候会报错。 readOnly：是否只读 。 值为true时，mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为了加快获取速度，直接会将数据在缓存中的引用交给用户，不安全，但速度快。 值为false时，mybatis觉得获取的数据可能会被修改，mybatis会利用序列化&反序列化的技术克隆一份新的数据给你，安全，但速度慢。\"},\"4262\":{\"h\":\"三级缓存：\",\"a\":\"三级缓存\"},\"4263\":{\"t\":\"Mybatis 的一级缓存与二级缓存 只适用于单体项目，在分布式服务或者微服务架构下 都会出现数据不一致问题。所以Mybatis 为我们提供了自定义缓存 我们可以集成很多三方中间件来做缓存 这里就那Redis来说一下。\"},\"4264\":{\"t\":\"在这里插入图片描述\"},\"4265\":{\"h\":\"总结：\",\"a\":\"总结\"},\"4266\":{\"t\":\"一级缓存的作用域是一个sqlsession内；二级缓存作用域是针对mapper进行缓存；\"},\"4267\":{\"t\":\"一级缓存是默认开启的；二级缓存需要手动配置；\"},\"4268\":{\"t\":\"一级缓存sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。sqlSession.close()后一级缓存也没有了。但是销毁sqlSession后会将里面的缓存存到二级缓存中；\"},\"4269\":{\"t\":\"二级缓存cache中readonly属性如果为false 那么相应的pojo类必须实现Serializable接口 并且其缓存查询到的对象都是通过序列化或者反序列化克隆的，所以对象之间两两不相等；\"},\"4270\":{\"t\":\"二级缓存的生命周期和应用同步，它是用来解决一级缓存不能跨会话共享数据的问题，范围是namespace级别的，可以被多个会话共享(只要是同一个接口的相同方法，都可以进行共享)。\"},\"4271\":{\"t\":\"只要没有显式地设置cacheEnabled为false，都会使用CachingExector装饰基本的执行器(SIMPLE、REUSE、BATCH)。 二级缓存总是默认开启的，但是每个Mapper的二级开关是默认关闭的。\"},\"4272\":{\"t\":\"二级缓存进行增删改操作也会刷新二级缓存，导致二级缓存失效；\"},\"4273\":{\"t\":\"二级缓存的执行流程：\"},\"4274\":{\"t\":\"在这里插入图片描述\"},\"4275\":{\"t\":\"参考：https://blog.csdn.net/weixin_45161172/article/details/129526131\"},\"4276\":{\"h\":\"Linux常用命令\"},\"4277\":{\"h\":\"常用的命令\",\"a\":\"常用的命令\"},\"4278\":{\"h\":\"内核\",\"a\":\"内核\"},\"4279\":{\"h\":\"基本组件\",\"a\":\"基本组件\"},\"4280\":{\"h\":\"进程间通信方式\",\"a\":\"进程间通信方式\"},\"4281\":{\"h\":\"目录结构\",\"a\":\"目录结构\"},\"4282\":{\"t\":\"Linux 使用一种称为目录树的层次结构来组织文件和目录。目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。每个目录可以包含文件和其他子目录。结构层次鲜明，就像一棵倒立的树。\"},\"4283\":{\"h\":\"场景问题\"},\"4284\":{\"h\":\"缓存一致性解决\",\"a\":\"缓存一致性解决\"},\"4285\":{\"h\":\"4G数据找系统记录(大数据题)\",\"a\":\"_4g数据找系统记录-大数据题\"},\"4286\":{\"h\":\"很多短任务线程，选择 synchronized 还是 lock（2022-04-11 携程）\",\"a\":\"很多短任务线程-选择-synchronized-还是-lock-2022-04-11-携程\"},\"4287\":{\"t\":\"锁竞争小时，synchronized和lock效率没差，偏向模式下（单线程读写）甚至高于lock，但是并发量上升时锁撤销会大幅影响性能，稳定自适应轻量级锁状态下，线程接近交替运行，或者说短任务线程多，基本一样，因为都是自旋，大量任务并发竞争时，随着任务量的增大，synchronized的效率会远小于lock，因为重量级锁会频繁切换内核态与用户态；大量长任务，只能重量级锁。\"},\"4288\":{\"h\":\"多个人给一个主播打赏怎么设计？（2022-6-3 58同城）\",\"a\":\"多个人给一个主播打赏怎么设计-2022-6-3-58同城\"},\"4289\":{\"t\":\"我说是一个高并发写的操作，对一个记录频繁写，分批操作，比如 10 个记录 操作一次。他说这个方案可以 但是有 100 个记录 怎么去做一个一个操作呢？我说如果在一个进程可以 分多个线程分批。他说还是不够快 我们是用的 MQ 多个消费者 一个打赏就发一个消息\"},\"4290\":{\"h\":\"怎么实现一个点赞功能？\",\"a\":\"怎么实现一个点赞功能\"},\"4291\":{\"t\":\"主要的流程解释下：先查询数据库改用户是否进行点赞，如果已经点赞则抛出异常，如果没有则new一个对象来一个一个Set，然后将已点赞的信息存入redis中，相反，取消点赞的操作就是删除redis中的数据即可，然后通过Dubbo调用API来完成保存操作，因为我这里是还要获取点赞数和评论数啥的，所以会对动态表进行更新操作。\"},\"4292\":{\"h\":\"比如下单清空购物车，你是如何设计的？\",\"a\":\"比如下单清空购物车-你是如何设计的\"},\"4293\":{\"t\":\"生产者（订单系统）产生消息，发送一条半事务消息到MQ服务器\"},\"4294\":{\"t\":\"MQ收到消息后，将消息持久化到存储系统，这条消息的状态是待发送状态。\"},\"4295\":{\"t\":\"MQ服务器返回ACK确认到生产者，此时MQ不会触发消息推送事件\"},\"4296\":{\"t\":\"生产者执行本地事务（订单创建成功，提交事务消息）\"},\"4297\":{\"t\":\"如果本地事务执行成功，即commit执行结果到MQ服务器；如果执行失败，发送rollback。\"},\"4298\":{\"t\":\"如果是commit正常提交，MQ服务器更新消息状态为可发送；如果是rollback，即删除消息。\"},\"4299\":{\"t\":\"如果消息状态更新为可发送，则MQ服务器会push消息给消费者（购物车系统）。消费者消费完（即拿到订单消息，清空购物车成功）就应答ACK。\"},\"4300\":{\"t\":\"如果MQ服务器长时间没有收到生产者的commit或者rollback，它会反查生产者，然后根据查询到的结果（回滚操作或者重新发送消息）执行最终状态。\"},\"4301\":{\"t\":\"有些伙伴可能有疑惑，如果消费者消费失败怎么办呢？那数据是不是不一致啦？所以就需要消费者消费成功，执行业务逻辑成功，再反馈ack嘛。如果消费者消费失败，那就自动重试嘛，接口支持幂等即可。\"},\"4302\":{\"h\":\"排行榜的实现，比如高考成绩排序（2022 虾皮）\",\"a\":\"排行榜的实现-比如高考成绩排序-2022-虾皮\"},\"4303\":{\"t\":\"排行版的实现，一般使用redis的zset数据类型。\"},\"4304\":{\"t\":\"zadd key score member [score member ...]，zrank key member \"},\"4305\":{\"h\":\"有一批帖子，会根据类别搜索，但是现在是单独一个表，现在查询非常慢，如何提高搜索性能？（2022 虾皮）\",\"a\":\"有一批帖子-会根据类别搜索-但是现在是单独一个表-现在查询非常慢-如何提高搜索性能-2022-虾皮\"},\"4306\":{\"t\":\"根据类别分库分表，库可以放到不同的实例上，经常查询的不变的数据]可以放到缓存里。 数据有更新时，需要刷新下缓存 因为分表后，只能是固定类别，所以需要根据类别去分开查找。 如果还有另一个重要的字段也需要查，可以再建一个分表，user-ses/ses-user就是这么做的，但是冗余就比较大。\"},\"4307\":{\"h\":\"如果有多个表，进行聚合查询，如何解决深分页的问题（2022 虾皮）\",\"a\":\"如果有多个表-进行聚合查询-如何解决深分页的问题-2022-虾皮\"},\"4308\":{\"t\":\"就是保存每个节点的表id给前端，前端查询时把id返回过来了，然后加到SQL里，但是不一定准。这里回答的是单个表吧。\"},\"4309\":{\"h\":\"分表的数据，动态增加一张表，不停服如何实现？（2022 虾皮）\",\"a\":\"分表的数据-动态增加一张表-不停服如何实现-2022-虾皮\"},\"4310\":{\"t\":\"分区策略使用一致性哈希 然后新表的数据，查询的时候，先查老的，再插入新的。如果老数据没有动，需要有对应的迁移服务进行定时迁移。插入的时候优先插入到新的表。\"},\"4311\":{\"h\":\"迁移线程和用户线程同时执行，会有数据库不一致的问题，怎么解决？（2022 虾皮）\",\"a\":\"迁移线程和用户线程同时执行-会有数据库不一致的问题-怎么解决-2022-虾皮\"},\"4312\":{\"t\":\"加分布式锁。\"},\"4313\":{\"h\":\"两个机房，某个机房可能断电，如何做多机房容灾（2022 虾皮）\",\"a\":\"两个机房-某个机房可能断电-如何做多机房容灾-2022-虾皮\"},\"4314\":{\"t\":\"负载均衡层，支持切换机房写数据的时候，中间件（db/redis/es）都要进行双写。\"},\"4315\":{\"t\":\"kafka容灾，mirror maker: https://cloud.tencent.com/developer/article/1358933\"},\"4316\":{\"h\":\"主从机房同步有什么问题呢？ （2022 虾皮）\",\"a\":\"主从机房同步有什么问题呢-2022-虾皮\"},\"4317\":{\"t\":\"会有比较大的延迟。 一些分布式的问题，例如分布式事务，可能就执行了几步，然后就挂了，需要有一定的策略，进行回滚或者提交。 切换机房的过程中，可能存在数据丢失，重复数据等\"},\"4318\":{\"t\":\"双向同步，两个机房都能写入，如果操作的是各自的数据的话，问题不大。如果操作的是相同数据，必然会有冲突，需要解决。所以上层保证相同数据到同一个机房即可，然后同步到另外一个机房，保证每个机房都有全量的数据。各种中间件都要做改造。\"},\"4319\":{\"t\":\"总之，分片的核心思路在于，让同一个用户的相关请求，只在一个机房内完成所有业务「闭环」，不再出现「跨机房」访问。\"},\"4320\":{\"t\":\"阿里在实施这种方案时，给它起了个名字，叫做「单元化」。\"},\"4321\":{\"t\":\"这里还有一种情况，是无法做数据分片的：全局数据。例如系统配置、商品库存这类需要强一致的数据，这类服务依旧只能采用写主机房，读从机房的方案，不做双活。\"},\"4322\":{\"t\":\"双活的重点，是要优先保证「核心」业务先实现双活，并不是「全部」业务实现双活。\"},\"4323\":{\"h\":\"冷机房新请求过来，发现缓存没有，会把数据库打挂，这个怎么解决？（2022 虾皮）\",\"a\":\"冷机房新请求过来-发现缓存没有-会把数据库打挂-这个怎么解决-2022-虾皮\"},\"4324\":{\"t\":\"预热，提前加载到缓存。 或者平时保持一定的流量。 用了缓存的，一般需要预热下，防止雪崩。\"},\"4325\":{\"h\":\"定时任务这种，怎么改变执行的机房（2022 虾皮）\",\"a\":\"定时任务这种-怎么改变执行的机房-2022-虾皮\"},\"4326\":{\"t\":\"加开关，任何时候都有一个条件不满足，在空跑。\"},\"4327\":{\"h\":\"多线程和高并发\"},\"4328\":{\"h\":\"三：多线程与高并发\",\"a\":\"三-多线程与高并发\"},\"4329\":{\"h\":\"线程的互斥同步方式有哪些? 如何比较和选择?\",\"a\":\"线程的互斥同步方式有哪些-如何比较和选择\"},\"4330\":{\"t\":\"Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。\"},\"4331\":{\"t\":\"锁的实现synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。\"},\"4332\":{\"t\":\"性能新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。\"},\"4333\":{\"t\":\"等待可中断当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。\"},\"4334\":{\"t\":\"公平锁公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\"},\"4335\":{\"t\":\"锁绑定多个条件一个 ReentrantLock 可以同时绑定多个 Condition 对象。\"},\"4336\":{\"h\":\"ReentrantLock：\",\"a\":\"reentrantlock\"},\"4337\":{\"t\":\"ReentrantLock 实现了 Lock 接口，是一个可重入且独占式的锁，和 synchronized 关键字类似。不过，ReentrantLock 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。\"},\"4338\":{\"t\":\"public class ReentrantLock implements Lock, java.io.Serializable {} \"},\"4339\":{\"t\":\"ReentrantLock 里面有一个内部类 Sync，Sync 继承 AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在 Sync 中实现的。Sync 有公平锁 FairSync 和非公平锁 NonfairSync 两个子类。\"},\"4340\":{\"t\":\"ReentrantLock 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。\"},\"4341\":{\"t\":\"// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁 public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } \"},\"4342\":{\"t\":\"https://blog.csdn.net/zhengzhaoyang122/article/details/110847701；https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html\"},\"4343\":{\"h\":\"锁升级\",\"a\":\"锁升级\"},\"4344\":{\"t\":\"img\"},\"4345\":{\"h\":\"无锁\",\"a\":\"无锁\"},\"4346\":{\"t\":\"无锁并不会对资源锁定，所有的线程都可以访问并修改同一个资源，但同时只有一个线程能修改成功。也就是我们常说的乐观锁。\"},\"4347\":{\"h\":\"偏向锁\",\"a\":\"偏向锁\"},\"4348\":{\"t\":\"偏向于第一个访问锁的线程，初次执行synchronized代码块时，通过 CAS 修改对象头里的锁标志位，锁对象变成偏向锁。\"},\"4349\":{\"t\":\"当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。\"},\"4350\":{\"t\":\"执行完同步代码块后，线程并不会主动释放偏向锁。当线程第二次再执行同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里不需要重新加锁，偏向锁几乎没有额外开销，性能极高。\"},\"4351\":{\"t\":\"偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。\"},\"4352\":{\"t\":\"偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗。 \"},\"4353\":{\"h\":\"轻量级锁\",\"a\":\"轻量级锁\"},\"4354\":{\"t\":\"当前锁是偏向锁，此时有多个线程同时来竞争锁，偏向锁就会升级为轻量级锁。轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式来获取锁。\"},\"4355\":{\"t\":\"轻量级锁的获取有两种情况：\"},\"4356\":{\"t\":\"当关闭偏向锁功能时 多个线程竞争偏向锁导致偏向锁升级为轻量级锁。一旦有第二个线程加入锁竞争，偏向锁就升级为轻量级锁（自旋锁） \"},\"4357\":{\"t\":\"在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先比较当前锁标志位是否为“释放”，如果是则将其设置为“锁定”，此过程是原子性。如果抢到锁，然后线程将当前锁的持有者信息修改为自己。\"},\"4358\":{\"h\":\"重量级锁\",\"a\":\"重量级锁\"},\"4359\":{\"t\":\"如果线程的竞争很激励，线程的自旋超过了一定次数（默认循环10次，可以通过虚拟机参数更改），将轻量级锁升级为重量级锁（依然是 CAS 修改锁标志位，但不修改持有锁的线程ID），当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。\"},\"4360\":{\"t\":\"重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资。\"},\"4361\":{\"h\":\"锁优化技术（锁粗化、锁消除）：\",\"a\":\"锁优化技术-锁粗化、锁消除\"},\"4362\":{\"t\":\"锁粗化就是告诉我们任何事情都有个度，有些情况下我们反而希望把很多次锁的请求合并成一个请求，以降低短时间内大量锁请求、同步、释放带来的性能损耗。\"},\"4363\":{\"t\":\"锁消除指的是在某些情况下，JVM 虚拟机如果检测不到某段代码被共享和竞争的可能性，就会将这段代码所属的同步锁消除掉，从而到底提高程序性能的目的。\"},\"4364\":{\"h\":\"CAS\",\"a\":\"cas\"},\"4365\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&mid=2247510278&idx=3&sn=a58a9ec9f805d0e109c4b09cd497c9ca&chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1&scene=27\"},\"4366\":{\"t\":\"在并发编程中我们都知道i++操作是非线程安全的，这是因为 i++操作不是原子操作。\"},\"4367\":{\"t\":\"如何保证原子性呢？常用的方法就是加锁。在Java语言中可以使用 Synchronized和CAS实现加锁效果。\"},\"4368\":{\"t\":\"Synchronized是悲观锁，线程开始执行第一步就是获取锁，一旦获得锁，其他的线程进入后就会阻塞等待锁。如果不好理解，举个生活中的例子：一个人进入厕所后首先把门锁上（获取锁），然后开始上厕所，这个时候有其他人来了只能在外面等（阻塞），就算再急也没用。上完厕所完事后把门打开（解锁），其他人就可以进入了。\"},\"4369\":{\"t\":\"CAS是乐观锁，线程执行的时候不会加锁，假设没有冲突去完成某项操作，如果因为冲突失败了就重试，最后直到成功为止。\"},\"4370\":{\"h\":\"什么是 CAS？\",\"a\":\"什么是-cas\"},\"4371\":{\"t\":\"CAS（Compare-And-Swap）是比较并交换的意思，它是一条 CPU 并发原语，用于判断内存中某个值是否为预期值，如果是则更改为新的值，这个过程是原子的。下面用一个小示例解释一下。\"},\"4372\":{\"t\":\"CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，计算后要修改后的新值B。\"},\"4373\":{\"t\":\"（1）初始状态：在内存地址V中存储着变量值为 1。\"},\"4374\":{\"t\":\"图片\"},\"4375\":{\"t\":\"（2）线程1想要把内存地址为 V 的变量值增加1。这个时候对线程1来说，旧的预期值A=1，要修改的新值B=2。\"},\"4376\":{\"t\":\"图片\"},\"4377\":{\"t\":\"（3）在线程1要提交更新之前，线程2捷足先登了，已经把内存地址V中的变量值率先更新成了2。\"},\"4378\":{\"t\":\"图片\"},\"4379\":{\"t\":\"（4）线程1开始提交更新，首先将预期值A和内存地址V的实际值比较（Compare），发现A不等于V的实际值，提交失败。\"},\"4380\":{\"t\":\"图片\"},\"4381\":{\"t\":\"（5）线程1重新获取内存地址 V 的当前值，并重新计算想要修改的新值。此时对线程1来说，A=2，B=3。这个重新尝试的过程被称为自旋。如果多次失败会有多次自旋。\"},\"4382\":{\"t\":\"图片\"},\"4383\":{\"t\":\"（6）线程 1 再次提交更新，这一次没有其他线程改变地址 V 的值。线程1进行Compare，发现预期值 A 和内存地址 V的实际值是相等的，进行 Swap 操作，将内存地址 V 的实际值修改为 B。\"},\"4384\":{\"t\":\"图片\"},\"4385\":{\"t\":\"总结：更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 中的实际值相同时，才会将内存地址 V 对应的值修改为 B，这整个操作就是CAS。\"},\"4386\":{\"h\":\"CAS 基本原理\",\"a\":\"cas-基本原理\"},\"4387\":{\"t\":\"CAS 主要包括两个操作：Compare和Swap，有人可能要问了：两个操作能保证是原子性吗？可以的。\"},\"4388\":{\"t\":\"CAS 是一种系统原语，原语属于操作系统用语，原语由若干指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，由操作系统硬件来保证。在 Intel 的 CPU 中，使用 cmpxchg 指令。\"},\"4389\":{\"t\":\"回到 Java 语言，JDK 是在 1.5 版本后才引入 CAS 操作，在sun.misc.Unsafe这个类中定义了 CAS 相关的方法。\"},\"4390\":{\"t\":\"在 Java 编程中我们通常不会直接使用到 CAS，都是通过 JDK 封装好的并发工具类来间接使用的，这些并发工具类都在java.util.concurrent包中。\"},\"4391\":{\"h\":\"CAS 的问题\",\"a\":\"cas-的问题\"},\"4392\":{\"t\":\"CAS 不是万能的，也有很多问题。\"},\"4393\":{\"t\":\"敲黑板：CAS有哪些问题，这是面试高频考点，需要重点掌握。\"},\"4394\":{\"h\":\"典型 ABA 问题\",\"a\":\"典型-aba-问题\"},\"4395\":{\"t\":\"ABA 是 CAS 操作的一个经典问题，假设有一个变量初始值为 A，修改为 B，然后又修改为 A，这个变量实际被修改过了，但是 CAS 操作可能无法感知到。\"},\"4396\":{\"t\":\"如果是整型还好，不会影响最终结果，但如果是对象的引用类型包含了多个变量，引用没有变实际上包含的变量已经被修改，这就会造成大问题。\"},\"4397\":{\"t\":\"如何解决？思路其实很简单，在变量前加版本号，每次变量更新了就把版本号加一，结果如下：\"},\"4398\":{\"t\":\"图片\"},\"4399\":{\"t\":\"最终结果都是 A 但是版本号改变了。\"},\"4400\":{\"t\":\"从 JDK 1.5 开始提供了AtomicStampedReference类，这个类的 compareAndSe方法首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\"},\"4401\":{\"h\":\"自旋开销问题\",\"a\":\"自旋开销问题\"},\"4402\":{\"t\":\"CAS 出现冲突后就会开始自旋操作，如果资源竞争非常激烈，自旋长时间不能成功就会给 CPU 带来非常大的开销。\"},\"4403\":{\"t\":\"解决方案：可以考虑限制自旋的次数，避免过度消耗 CPU；另外还可以考虑延迟执行。\"},\"4404\":{\"h\":\"只能保证单个变量的原子性\",\"a\":\"只能保证单个变量的原子性\"},\"4405\":{\"t\":\"当对一个共享变量执行操作时，可以使用 CAS 来保证原子性，但是如果要对多个共享变量进行操作时，CAS 是无法保证原子性的，比如需要将 i 和 j 同时加 1：\"},\"4406\":{\"t\":\"i++；j++； \"},\"4407\":{\"t\":\"这个时候可以使用 synchronized 进行加锁，有没有其他办法呢？有，将多个变量操作合成一个变量操作。从 JDK1.5 开始提供了AtomicReference 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\"},\"4408\":{\"h\":\"总结\",\"a\":\"总结\"},\"4409\":{\"t\":\"CAS 是 Compare And Swap，是一条 CPU 原语，由操作系统保证原子性。\"},\"4410\":{\"t\":\"Java语言从 JDK1.5 版本开始引入 CAS ， 并且是 Java 并发编程J.U.C 包的基石，应用非常广泛。\"},\"4411\":{\"t\":\"当然 CAS 也不是万能的，也有很多问题：典型 ABA 问题、自旋开销问题、只能保证单个变量的原子性。\"},\"4412\":{\"h\":\"AQS\",\"a\":\"aqs\"},\"4413\":{\"t\":\"https://zhuanlan.zhihu.com/p/543902719\"},\"4414\":{\"h\":\"什么是AQS\",\"a\":\"什么是aqs\"},\"4415\":{\"t\":\"AQS（AbstractQueuedSynchronizer），即队列同步器，它是构建锁或者其他同步组件的基础框架，如ReentrantLock、ReentrantReadWriteLock、Semaphore，CountDownLatch等。 AQS是一个抽象类，主要是通过继承方式使用，本身没有实现任何接口，仅仅是定义了同步状态的获取和释放的方法。AQS解决了了之类实现同步器的大量细节问题，例如获取同步状态，FIFO队列，入队和出队。自定义同步器在实现时候只需要实现共享资源state的获取和释放即可，至于获取资源失败入队/唤醒出队等，AQS在顶层已经定义好了。\"},\"4416\":{\"h\":\"AQS的两种功能\",\"a\":\"aqs的两种功能\"},\"4417\":{\"t\":\"从使用层面来说，AQS功能分为两种：独占和共享\"},\"4418\":{\"t\":\"独占锁，每次只能一个线程持有锁，比如ReentrantLock就是独占锁\"},\"4419\":{\"t\":\"共享锁，允许多个线程持有锁，并发访问共享资源，比如ReentrantReadWriteLock\"},\"4420\":{\"t\":\"共享锁和独占锁的释放有一定区别，前面部分是一致的，先判断头结点是不是signal状态，如果是则唤醒头节点的下一个节点，并将该节点设置为头结点。而共享锁不一样，某个节点被设置为head之后，如果它的后继节点是shared状态，那么会尝试使用doReleaseShared方法尝试唤醒节点，实现共享状态的传播。\"},\"4421\":{\"h\":\"AQS内部实现\",\"a\":\"aqs内部实现\"},\"4422\":{\"t\":\"AQS是依赖内部的同步队列实现，也就是FIFO双向队列，如果当前线程竞争锁失败，那么AQS会把当前线程以及等待状态封装成一个Node节点加入到同步队列中，同时阻塞该线程，当同步状态释放时，会把首节点唤醒，使其再次尝试获取同步状态。\"},\"4423\":{\"t\":\"AQS队列内部维护的是一个双向链表，这种结构每个数据都有两个指针，分别指向直接的的前驱节点和后继节点，当线程抢占锁失败时候，会封装成Node加入到AQS中去。\"},\"4424\":{\"t\":\"AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁 实现的，即将暂时获取不到锁的线程加入到队列中。\"},\"4425\":{\"t\":\"CLH(Craig,Landin,and Hagersten) 队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。在 CLH 同步队列中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。\"},\"4426\":{\"t\":\"CLH 队列结构如下图所示：\"},\"4427\":{\"t\":\"img\"},\"4428\":{\"t\":\"在同步队列中，一个节点表示一个线程，他保存这线程的引用ThreadId，状态（watiStatus）,前驱结点（pre），后继节点（next），其数据结构如下：\"},\"4429\":{\"t\":\"img\"},\"4430\":{\"h\":\"acquire方法流程总结\",\"a\":\"acquire方法流程总结\"},\"4431\":{\"t\":\"首先通过子类判断是否获取了锁，如果获取了就什么也不干。tryAcquire\"},\"4432\":{\"t\":\"如果没有获取锁、通过线程创建节点加入同步队列的队尾。addWaiter\"},\"4433\":{\"t\":\"当线程在同步队列中不断的通过自旋去获取同步状态，如果获取了锁，就把其设为同步队列中的头节点，否则在同步队列中不停的自旋等待获取同步状态 acquireQueued,shouldParkAfterFailedAcquire(Node pre,Node node),parkAndCheckInterrupt()\"},\"4434\":{\"t\":\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\"},\"4435\":{\"h\":\"AQS 底层使用了模板方法模式，你能说出几个需要重写的方法吗？\",\"a\":\"aqs-底层使用了模板方法模式-你能说出几个需要重写的方法吗\"},\"4436\":{\"t\":\"使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。\"},\"4437\":{\"t\":\"isHeldExclusively() ：该线程是否正在独占资源。只有用到 condition 才需要去实现它。\"},\"4438\":{\"t\":\"tryAcquire(int) ：独占方式。尝试获取资源，成功则返回 true，失败则返回 false。\"},\"4439\":{\"t\":\"tryRelease(int) ：独占方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"4440\":{\"t\":\"tryAcquireShared(int) ：共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\"},\"4441\":{\"t\":\"tryReleaseShared(int) ：共享方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"4442\":{\"h\":\"总结\",\"a\":\"总结-1\"},\"4443\":{\"t\":\"总结的来说：线程获取锁，如果获取了锁就 保存当前获得锁的线程，如果没获取就创造一个节点通过compareAndSetTail(CAS操作)操作的方式将创建的节点加入同步队列的尾部，在同步队列中的节点通过自旋的操作不断去获取同步状态【当然由于FIFO先进先出的特性】等待时间越长就越先被唤醒。当头节点释放同步状态的时候，首先查看是否存在后继节点，如果存在就唤醒自己的后继节点，如果不存在就获取等待时间最长的符合条件的线程。\"},\"4444\":{\"h\":\"volitile关键字原理\",\"a\":\"volitile关键字原理\"},\"4445\":{\"h\":\"简述Java内存模型：\",\"a\":\"简述java内存模型\"},\"4446\":{\"t\":\"Java内存模型分为主内存和线程工作内存两大类。\"},\"4447\":{\"t\":\"主内存： **多个线程共享的内存。**如下图所示，方法区和堆属于主内存区域。\"},\"4448\":{\"t\":\"线程工作内存：每个线程独享的内存。如下图所示，虚拟机栈、本地方法栈、程序计数器属于线程独享的工作内存。\"},\"4449\":{\"t\":\"图片\"},\"4450\":{\"t\":\"Java内存模型规定：所有变量都需要存储在主内存中，线程工作内存保存了变量在主内存中的副本，线程对变量的所有操作都在工作内存中进行，执行结束后在同步到主内存中去。这里必然会存在时间差，在这个时间差内，该线程对副本的操作，对于其他线程是不见的，从而造成了可见性问题。\"},\"4451\":{\"h\":\"volatile的作用：\",\"a\":\"volatile的作用\"},\"4452\":{\"t\":\"保证共享变量的可见性： 使用volatile修饰的变量，任何线程对其进行操作都是在主内存中进行的，不会产生副本，从而保证共享变量的可见性。\"},\"4453\":{\"t\":\"防止局部指令重排序： happens-before规则中的volatile变量规则规定了一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。\"},\"4454\":{\"h\":\"volatile如何防止指令重排序：\",\"a\":\"volatile如何防止指令重排序\"},\"4455\":{\"t\":\"volatile是通过内存屏障来防止指令重排序的。\"},\"4456\":{\"t\":\"硬件层面的内存屏障分为Load Barrier 和 Store Barrier即读屏障和写屏障。\"},\"4457\":{\"t\":\"对于Load Barrier来说，在指令前插入Load Barrier，可以让高速缓存中的数据失效，强制从新从主内存加载数据。\"},\"4458\":{\"t\":\"对于Store Barrier来说，在指令后插入Store Barrier，能让写入缓存中的最新数据更新写入主内存，让其他线程可见。\"},\"4459\":{\"t\":\"Java内存屏障类型把上述两种内存屏障两两组合，如下图所示：\"},\"4460\":{\"t\":\"图片\"},\"4461\":{\"t\":\"volatile防止指令重排序具体步骤：\"},\"4462\":{\"t\":\"在每个volatile写操作的前面插入一个StoreStore屏障。\"},\"4463\":{\"t\":\"在每个volatile写操作的后面插入一个StoreLoad屏障。\"},\"4464\":{\"t\":\"在每个volatile读操作的后面插入一个LoadLoad屏障。\"},\"4465\":{\"t\":\"在每个volatile读操作的后面插入一个LoadStore屏障。\"},\"4466\":{\"t\":\"图片\"},\"4467\":{\"t\":\"图片\"},\"4468\":{\"h\":\"volatile总结：\",\"a\":\"volatile总结\"},\"4469\":{\"t\":\"volatile解决的是多线程共享变量可见性问题，但是被volatile修饰的变量操作并非具有原子性。\"},\"4470\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=MzAxNTE2NjEyMw==&mid=2247483734&idx=1&sn=8509d4aa61d08550c2b7668314da3582&chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e&scene=27\"},\"4471\":{\"h\":\"锁的分类实现\",\"a\":\"锁的分类实现\"},\"4472\":{\"h\":\"悲观锁：\",\"a\":\"悲观锁\"},\"4473\":{\"t\":\"正如其名，它是指对数据修改时持保守态度，认为其他人也会修改数据。因此在操作数据时，会把数据锁住，直到操作完成。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是长事务而言，这样的开销往往无法承受。\"},\"4474\":{\"h\":\"乐观锁：\",\"a\":\"乐观锁\"},\"4475\":{\"t\":\"乐观锁，从字面意思也能猜到个大概，在操作数据时非常乐观，认为别人不会同时修改数据，因此乐观锁不会上锁 只是在 提交更新 时，才会正式对数据的冲突与否进行检测。如果发现冲突了，则返回错误信息，让用户决定如何去做，fail-fast 机制 。否则，执行本次操作。\"},\"4476\":{\"h\":\"可重入锁：\",\"a\":\"可重入锁\"},\"4477\":{\"t\":\"可重入锁，也叫做递归锁，是指在同一个线程在调外层方法获取锁的时候，再进入内层方法会自动获取锁。\"},\"4478\":{\"t\":\"对象锁或类锁内部有计数器，一个线程每获得一次锁，计数器 +1；解锁时，计数器 -1。\"},\"4479\":{\"t\":\"JAVA 中的 ReentrantLock 和 synchronized 都是 可重入锁。可重入锁的一个好处是可一定程度避免死锁。\"},\"4480\":{\"h\":\"自旋锁：\",\"a\":\"自旋锁\"},\"4481\":{\"t\":\"自旋锁是采用让当前线程不停地在循环体内执行，当循环的条件被其他线程改变时才能进入临界区。自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不断增加时，性能下降明显，因为每个线程都需要执行，会占用CPU时间片。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\"},\"4482\":{\"t\":\"自旋锁缺点：\"},\"4483\":{\"t\":\"可能引发死锁 可能占用 CPU 的时间过长 \"},\"4484\":{\"t\":\"我们可以设置一个 循环时间 或 循环次数，超出阈值时，让线程进入阻塞状态，防止线程长时间占用 CPU 资源。JUC 并发包中的 CAS 就是采用自旋锁，compareAndSet 是CAS操作的核心，底层利用Unsafe对象实现的。\"},\"4485\":{\"h\":\"独享锁：\",\"a\":\"独享锁\"},\"4486\":{\"t\":\"独享锁，也有人叫它排他锁。无论读操作还是写操作，只能有一个线程获得锁，其他线程处于阻塞状态。\"},\"4487\":{\"t\":\"缺点：读操作并不会修改数据，而且大部分的系统都是 读多写少，如果读读之间互斥，大大降低系统的性能。下面的 共享锁 会解决这个问题。\"},\"4488\":{\"t\":\"像JAVA 中的 ReentrantLock 和 synchronized 都是独享锁。\"},\"4489\":{\"h\":\"共享锁：\",\"a\":\"共享锁\"},\"4490\":{\"t\":\"共享锁是指允许多个线程同时持有锁，一般用在读锁上。读锁的共享锁可保证并发读是非常高效的。读写，写读 ，写写的则是互斥的。独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享\"},\"4491\":{\"t\":\"ReentrantReadWriteLock，其读锁是共享锁，其写锁是独享锁。\"},\"4492\":{\"h\":\"读锁/写锁：\",\"a\":\"读锁-写锁\"},\"4493\":{\"t\":\"如果对某个资源是读操作，那多个线程之间并不会相互影响，可以通过添加读锁实现共享。如果有修改动作，为了保证数据的并发安全，此时只能有一个线程获得锁，我们称之为 写锁。读读是共享的；而 读写、写读 、写写 则是互斥的\"},\"4494\":{\"t\":\"像 JAVA 中的 ReentrantReadWriteLock 就是一种 读写锁 \"},\"4495\":{\"h\":\"公平锁/非公平锁：\",\"a\":\"公平锁-非公平锁\"},\"4496\":{\"t\":\"公平锁：多个线程按照申请锁的顺序去获得锁，所有线程都在队列里排队，先来先获取的公平性原则。\"},\"4497\":{\"t\":\"优点：所有的线程都能得到资源，不会饿死在队列中。\"},\"4498\":{\"t\":\"缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，CPU 唤醒下一个阻塞线程有系统开销\"},\"4499\":{\"t\":\"**非公平锁：**多个线程不按照申请锁的顺序去获得锁，而是同时以插队方式直接尝试获取锁，获取不到（插队失败），会进入队列等待（失败则乖乖排队），如果能获取到（插队成功），就直接获取到锁。\"},\"4500\":{\"t\":\"**优点：**可以减少 CPU 唤醒线程的开销，整体的吞吐效率会高点\"},\"4501\":{\"t\":\"**缺点：**可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁，活活饿死。\"},\"4502\":{\"t\":\"Java 多线程并发操作，我们操作锁大多时候都是基于 Sync 本身去实现的，而 Sync 本身却是 ReentrantLock 的一个内部类，Sync 继承 AbstractQueuedSynchronizer\"},\"4503\":{\"t\":\"像 ReentrantLock 默认是非公平锁，我们可以在构造函数中传入 true，来创建公平锁。\"},\"4504\":{\"t\":\"参考：https://blog.csdn.net/weixin_70730532/article/details/126875303\"},\"4505\":{\"h\":\"synchronized原理\",\"a\":\"synchronized原理\"},\"4506\":{\"h\":\"synchronized 同步语句块的情况:\",\"a\":\"synchronized-同步语句块的情况\"},\"4507\":{\"t\":\"public class SynchronizedDemo { public void method() { synchronized (this) { System.out.println(\\\"synchronized 代码块\\\"); } } } \"},\"4508\":{\"t\":\"通过 JDK 自带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：首先切换到类的对应目录执行 javac SynchronizedDemo.java 命令生成编译后的 .class 文件，然后执行javap -c -s -v -l SynchronizedDemo.class。\"},\"4509\":{\"t\":\"synchronized关键字原理\"},\"4510\":{\"t\":\"从上面我们可以看出：synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"4511\":{\"t\":\"上面的字节码中包含一个 monitorenter 指令以及两个 monitorexit 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。\"},\"4512\":{\"t\":\"当执行 monitorenter 指令时，线程试图获取锁也就是获取 对象监视器 monitor 的持有权。\"},\"4513\":{\"t\":\"在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由ObjectMonitor实现的。每个对象中都内置了一个 ObjectMonitor对象。\"},\"4514\":{\"t\":\"另外，wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。\"},\"4515\":{\"t\":\"在执行monitorenter时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。\"},\"4516\":{\"t\":\"对象锁的的拥有者线程才可以执行 monitorexit 指令来释放锁。在执行 monitorexit 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\"},\"4517\":{\"h\":\"synchronized 修饰方法的的情况:\",\"a\":\"synchronized-修饰方法的的情况\"},\"4518\":{\"t\":\"public class SynchronizedDemo2 { public synchronized void method() { System.out.println(\\\"synchronized 方法\\\"); } } \"},\"4519\":{\"t\":\"synchronized关键字原理\"},\"4520\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\"},\"4521\":{\"t\":\"如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。\"},\"4522\":{\"h\":\"总结:\",\"a\":\"总结-2\"},\"4523\":{\"t\":\"synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"4524\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。\"},\"4525\":{\"t\":\"不过两者的本质都是对对象监视器 monitor 的获取。\"},\"4526\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-底层原理了解吗\"},\"4527\":{\"h\":\"ThreadLocal原理\",\"a\":\"threadlocal原理\"},\"4528\":{\"h\":\"ThreadLocal 有什么用？\",\"a\":\"threadlocal-有什么用\"},\"4529\":{\"t\":\"通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？\"},\"4530\":{\"t\":\"JDK 中自带的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。\"},\"4531\":{\"t\":\"如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get() 和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\"},\"4532\":{\"h\":\"原理：\",\"a\":\"原理\"},\"4533\":{\"t\":\"源码：\"},\"4534\":{\"t\":\"public class Thread implements Runnable { //...... //与此线程有关的ThreadLocal值。由ThreadLocal类维护 ThreadLocal.ThreadLocalMap threadLocals = null; //与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护 ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; //...... } \"},\"4535\":{\"t\":\"从上面Thread类 源代码可以看出Thread 类中有一个 threadLocals 和 一个 inheritableThreadLocals 变量，它们都是 ThreadLocalMap 类型的变量,我们可以把 ThreadLocalMap 理解为ThreadLocal 类实现的定制化的 HashMap。默认情况下这两个变量都是 null，只有当前线程调用 ThreadLocal 类的 set或get方法时才创建它们，实际上调用这两个方法的时候，我们调用的是ThreadLocalMap类对应的 get()、set()方法。\"},\"4536\":{\"t\":\"ThreadLocal类的set()方法：\"},\"4537\":{\"t\":\"public void set(T value) { //获取当前请求的线程 Thread t = Thread.currentThread(); //取出 Thread 类内部的 threadLocals 变量(哈希表结构) ThreadLocalMap map = getMap(t); if (map != null) // 将需要存储的值放入到这个哈希表中 map.set(this, value); else createMap(t, value); } ThreadLocalMap getMap(Thread t) { return t.threadLocals; } \"},\"4538\":{\"t\":\"通过上面这些内容，我们足以通过猜测得出结论：最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。ThrealLocal 类中可以通过Thread.currentThread()获取到当前线程对象后，直接通过getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。\"},\"4539\":{\"t\":\"每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为 key ，Object 对象为 value 的键值对。\"},\"4540\":{\"t\":\"ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) { //...... } \"},\"4541\":{\"t\":\"比如我们在同一个线程中声明了两个 ThreadLocal 对象的话， Thread内部都是使用仅有的那个ThreadLocalMap 存放数据的，ThreadLocalMap的 key 就是 ThreadLocal对象，value 就是 ThreadLocal 对象调用set方法设置的值。\"},\"4542\":{\"h\":\"线程池\",\"a\":\"线程池\"},\"4543\":{\"h\":\"为什么要用线程池？\",\"a\":\"为什么要用线程池\"},\"4544\":{\"t\":\"这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：\"},\"4545\":{\"t\":\"降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\"},\"4546\":{\"t\":\"提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。\"},\"4547\":{\"t\":\"提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\"},\"4548\":{\"h\":\"如何创建线程池？\",\"a\":\"如何创建线程池\"},\"4549\":{\"t\":\"方式一：通过ThreadPoolExecutor构造函数来创建（推荐）。\"},\"4550\":{\"t\":\"package com.young.多线程; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.Executors; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * @author 杨路恒 */ public class ThreadPool { public static void main(String[] args) { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1,2, 2, TimeUnit.MILLISECONDS,new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(), // new ThreadPoolExecutor.AbortPolicy() // new ThreadPoolExecutor.CallerRunsPolicy() // new ThreadPoolExecutor.DiscardOldestPolicy() new ThreadPoolExecutor.DiscardPolicy() ); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.shutdown(); } } \"},\"4551\":{\"t\":\"参数：\"},\"4552\":{\"t\":\"/** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @param threadFactory the factory to use when the executor * creates a new thread * @param handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached * @throws IllegalArgumentException if one of the following holds:<br> * {@code corePoolSize < 0}<br> * {@code keepAliveTime < 0}<br> * {@code maximumPoolSize <= 0}<br> * {@code maximumPoolSize < corePoolSize} * @throws NullPointerException if {@code workQueue} * or {@code threadFactory} or {@code handler} is null */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; } \"},\"4553\":{\"t\":\"ThreadPoolExecutor 3 个最重要的参数：\"},\"4554\":{\"t\":\"corePoolSize : 任务队列未达到队列容量时，最大可以同时运行的线程数量。\"},\"4555\":{\"t\":\"maximumPoolSize : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\"},\"4556\":{\"t\":\"workQueue: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"4557\":{\"t\":\"ThreadPoolExecutor其他常见参数 :\"},\"4558\":{\"t\":\"keepAliveTime:线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；\"},\"4559\":{\"t\":\"unit : keepAliveTime 参数的时间单位。\"},\"4560\":{\"t\":\"threadFactory :executor 创建新线程的时候会用到。\"},\"4561\":{\"t\":\"handler :饱和策略。关于饱和策略下面单独介绍一下。\"},\"4562\":{\"t\":\"下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）：\"},\"4563\":{\"t\":\"线程池各个参数的关系\"},\"4564\":{\"t\":\"线程池的饱和策略有哪些？\"},\"4565\":{\"t\":\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，ThreadPoolTaskExecutor 定义一些策略:\"},\"4566\":{\"t\":\"ThreadPoolExecutor.AbortPolicy： 抛出 RejectedExecutionException来拒绝新任务的处理。\"},\"4567\":{\"t\":\"ThreadPoolExecutor.CallerRunsPolicy： 调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。\"},\"4568\":{\"t\":\"ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。\"},\"4569\":{\"t\":\"ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。\"},\"4570\":{\"t\":\"举个例子：Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略来配置线程池的时候，默认使用的是 AbortPolicy。在这种饱和策略下，如果队列满了，ThreadPoolExecutor 将抛出 RejectedExecutionException 异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。如果不想丢弃任务的话，可以使用CallerRunsPolicy。CallerRunsPolicy 和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务\"},\"4571\":{\"t\":\"线程池常用的阻塞队列有哪些？\"},\"4572\":{\"t\":\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"4573\":{\"t\":\"不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。\"},\"4574\":{\"t\":\"容量为 Integer.MAX_VALUE 的 LinkedBlockingQueue（无界队列）：FixedThreadPool 和 SingleThreadExector 。由于队列永远不会被放满，因此FixedThreadPool最多只能创建核心线程数的线程。\"},\"4575\":{\"t\":\"SynchronousQueue（同步队列） ：CachedThreadPool 。SynchronousQueue 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，CachedThreadPool 的最大线程数是 Integer.MAX_VALUE ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。\"},\"4576\":{\"t\":\"DelayedWorkQueue（延迟阻塞队列）：ScheduledThreadPool 和 SingleThreadScheduledExecutor 。DelayedWorkQueue 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。DelayedWorkQueue 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 Integer.MAX_VALUE，所以最多只能创建核心线程数的线程。\"},\"4577\":{\"t\":\"线程池处理任务的流程了解吗？\"},\"4578\":{\"t\":\"如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。\"},\"4579\":{\"t\":\"如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。\"},\"4580\":{\"t\":\"如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。\"},\"4581\":{\"t\":\"如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用RejectedExecutionHandler.rejectedExecution()方法。\"},\"4582\":{\"t\":\"图解线程池实现原理\"},\"4583\":{\"t\":\"如何设定线程池的大小？\"},\"4584\":{\"t\":\"有一个简单并且适用面比较广的公式：\"},\"4585\":{\"t\":\"CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\"},\"4586\":{\"t\":\"I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\"},\"4587\":{\"t\":\"方式二：通过 Executor 框架的工具类 Executors 来创建。\"},\"4588\":{\"t\":\"我们可以创建多种类型的 ThreadPoolExecutor：\"},\"4589\":{\"t\":\"FixedThreadPool ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\"},\"4590\":{\"t\":\"SingleThreadExecutor： 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\"},\"4591\":{\"t\":\"CachedThreadPool： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。\"},\"4592\":{\"t\":\"ScheduledThreadPool ：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。\"},\"4593\":{\"h\":\"为什么不推荐使用内置线程池？\",\"a\":\"为什么不推荐使用内置线程池\"},\"4594\":{\"t\":\"在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\"},\"4595\":{\"t\":\"为什么呢？\"},\"4596\":{\"t\":\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\"},\"4597\":{\"t\":\"另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险\"},\"4598\":{\"t\":\"Executors 返回线程池对象的弊端如下(后文会详细介绍到)：\"},\"4599\":{\"t\":\"FixedThreadPool 和 SingleThreadExecutor ： 使用的是无界的 LinkedBlockingQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"4600\":{\"t\":\"CachedThreadPool ：使用的是同步队列 SynchronousQueue, 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。\"},\"4601\":{\"t\":\"ScheduledThreadPool 和 SingleThreadScheduledExecutor : 使用的无界的延迟阻塞队列DelayedWorkQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"4602\":{\"h\":\"如何动态修改线程池的参数？\",\"a\":\"如何动态修改线程池的参数\"},\"4603\":{\"t\":\"JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：\"},\"4604\":{\"t\":\"图片\"},\"4605\":{\"t\":\"重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。\"},\"4606\":{\"t\":\"问题一：线程池被创建后里面有线程吗？如果没有的话，你知道有什么方法对线程池进行预热吗？\"},\"4607\":{\"t\":\"线程池被创建后如果没有任务过来，里面是不会有线程的。如果需要预热的话可以调用下面的两个方法：\"},\"4608\":{\"t\":\"全部启动：\"},\"4609\":{\"t\":\"图片\"},\"4610\":{\"t\":\"仅启动一个：\"},\"4611\":{\"t\":\"图片\"},\"4612\":{\"t\":\"问题二：核心线程数会被回收吗？需要什么设置？\"},\"4613\":{\"t\":\"核心线程数默认是不会被回收的，如果需要回收核心线程数，需要调用下面的方法：\"},\"4614\":{\"t\":\"图片\"},\"4615\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html；https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651751537&idx=1&sn=c50a434302cc06797828782970da190e&chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c&scene=21#wechat_redirect\"},\"4616\":{\"h\":\"Docker\"},\"4617\":{\"h\":\"Docker\",\"a\":\"docker\"},\"4618\":{\"h\":\"什么是 Docker?\",\"a\":\"什么是-docker\"},\"4619\":{\"t\":\"Docker 是世界领先的软件容器平台。\"},\"4620\":{\"t\":\"Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 UnionFS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\"},\"4621\":{\"t\":\"Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。\"},\"4622\":{\"t\":\"用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\"},\"4623\":{\"h\":\"Docker的架构\",\"a\":\"docker的架构\"},\"4624\":{\"t\":\"Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，模块各司其职。下图是它的总体架构图：\"},\"4625\":{\"t\":\"img\"},\"4626\":{\"t\":\"用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。\"},\"4627\":{\"t\":\"Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。\"},\"4628\":{\"t\":\"Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。\"},\"4629\":{\"t\":\"Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graphdriver 将下载镜像以 Graph 的形式存储。\"},\"4630\":{\"t\":\"当需要为 Docker 创建网络环境时，通过网络管理驱动 Networkdriver 创建并配置 Docker容器网络环境。\"},\"4631\":{\"t\":\"当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。\"},\"4632\":{\"t\":\"Libcontainer 是一项独立的容器管理包，Networkdriver 以及 Execdriver 都是通过 Libcontainer 来实现具体对容器进行的操作。\"},\"4633\":{\"h\":\"镜像和容器的相关操作\",\"a\":\"镜像和容器的相关操作\"},\"4634\":{\"h\":\"Spring Cloud\"},\"4635\":{\"h\":\"Spring Cloud\",\"a\":\"spring-cloud\"},\"4636\":{\"h\":\"什么是Spring Cloud？\",\"a\":\"什么是spring-cloud\"},\"4637\":{\"t\":\"Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。\"},\"4638\":{\"h\":\"微服务的概念\",\"a\":\"微服务的概念\"},\"4639\":{\"t\":\"分布式，多个模块，每一个模块都是一个单独的系统。\"},\"4640\":{\"t\":\"以前所有的代码都放在同一个工程中、部署在同一个服务器、同一项目的不同模块不同功能互相抢占资源，微服务就是将工程根据不同的业务规则拆分成微服务，部署在不同的服务器上，服务之间相互调用，java中有的微服务有dubbo(只能用来做微服务)、springcloud( 提供了服务的发现、断路器等)。\"},\"4641\":{\"t\":\"微服务的特点：\"},\"4642\":{\"t\":\"按业务划分为一个独立运行的程序，即服务单元\"},\"4643\":{\"t\":\"服务之间通过HTTP协议相互通信\"},\"4644\":{\"t\":\"自动化部署\"},\"4645\":{\"t\":\"可以用不同的编程语言\"},\"4646\":{\"t\":\"可以用不同的存储技术\"},\"4647\":{\"t\":\"服务集中化管理\"},\"4648\":{\"t\":\"微服务是一个分布式系统\"},\"4649\":{\"t\":\"微服务的优势\"},\"4650\":{\"t\":\"将一个复杂的业务拆分为若干小的业务，将复杂的业务简单化，新人只需要了解他所接管的服务的代码，减少了新人的学习成本。\"},\"4651\":{\"t\":\"由于微服务是分布式服务，服务与服务之间没有任何耦合。微服务系统的微服务单元具有很强的横向拓展能力。\"},\"4652\":{\"t\":\"服务与服务之间采用HTTP网络通信协议来通信，单个服务内部高度耦合，服务与服务之间完全独立，无耦合。这使得微服务可以采用任何的开发语言和技术来实现，提高开发效率、降低开发成本。\"},\"4653\":{\"t\":\"微服务是按照业务进行拆分的，并有坚实的服务边界，若要重写某一业务代码，不需了解所有业务，重写简单。\"},\"4654\":{\"t\":\"微服务的每个服务单元是独立部署的，即独立运行在某个进程中，微服务的修改和部署对其他服务没有影响。\"},\"4655\":{\"t\":\"微服务在CAP理论中采用的AP架构，具有高可用分区容错特点。高可用主要体现在系统7x24不间断服务，他要求系统有大量的服务器集群，从而提高系统的负载能力。分区容错也使得系统更加健壮。\"},\"4656\":{\"t\":\"微服务的不足\"},\"4657\":{\"t\":\"微服务的复杂度：构建一个微服务比较复杂，服务与服务之间通过HTTP协议或其他消息传递机制通信，开发者要选出最佳的通信机制，并解决网络服务差时带来的风险。\"},\"4658\":{\"t\":\"分布式事物：将事物分成多阶段提交，如果一阶段某一节点失败仍会导致数据不正确。如果事物涉及的节点很多，某一节点的网络出现异常会导致整个事务处于阻塞状态，大大降低数据库的性能。\"},\"4659\":{\"t\":\"服务划分：将一个完整的系统拆分成很多个服务，是一件非常困难的事，因为这涉及了具体的业务场景\"},\"4660\":{\"t\":\"服务部署：最佳部署容器Docker\"},\"4661\":{\"h\":\"Spring Cloud的优缺点以及组件\",\"a\":\"spring-cloud的优缺点以及组件\"},\"4662\":{\"t\":\"设计目标\"},\"4663\":{\"t\":\"协调各个微服务，简化分布式系统开发。\"},\"4664\":{\"t\":\"优缺点\"},\"4665\":{\"t\":\"微服务的框架那么多比如：dubbo、Kubernetes，为什么就要使用Spring Cloud的呢？\"},\"4666\":{\"t\":\"优点：\"},\"4667\":{\"t\":\"产出于Spring大家族，Spring在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善 组件丰富，功能齐全。Spring Cloud 为微服务架构提供了非常完整的支持。例如、配置管理、服务发现、断路器、微服务网关等； Spring Cloud 社区活跃度很高，教程很丰富，遇到问题很容易找到解决方案 服务拆分粒度更细，耦合度比较低，有利于资源重复利用，有利于提高开发效率 可以更精准的制定优化服务方案，提高系统的可维护性 减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发 微服务可以是跨平台的，可以用任何一种语言开发 适于互联网时代，产品迭代周期更短 \"},\"4668\":{\"t\":\"缺点：\"},\"4669\":{\"t\":\"微服务过多，治理成本高，不利于维护系统 分布式系统开发的成本高（容错，分布式事务等）对团队挑战大 \"},\"4670\":{\"t\":\"springcloud中的组件有那些？\"},\"4671\":{\"t\":\"说出主要的组件： Spring Cloud Eureka,服务注册中心,特性有失效剔除、服务保护 Spring Cloud Zuul,API服务网关,功能有路由分发和过滤 Spring Cloud Config,分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式 Spring Cloud Ribbon,客户端负载均衡,特性有区域亲和,重试机制 Spring Cloud Hystrix,客户端容错保护,特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离 Spring Cloud Feign,声明式服务调用本质上就是Ribbon+Hystrix Spring Cloud Stream,消息驱动,有Sink、Source、Processor三种通道,特性有订阅发布、消费组、消息分区 Spring Cloud Bus,消息总线,配合Config仓库修改的一种Stream实现， Spring Cloud Sleuth,分布式服务追踪,需要搞清楚TraceID和SpanID以及抽样,如何与ELK整合 \"},\"4672\":{\"t\":\"Spring Cloud项目部署架构？\"},\"4673\":{\"t\":\"img\"},\"4674\":{\"t\":\"网关与过滤器有什么区别？\"},\"4675\":{\"t\":\"网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。\"},\"4676\":{\"t\":\"什么是断路器\"},\"4677\":{\"t\":\"当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）\"},\"4678\":{\"t\":\"断路器有三种状态\"},\"4679\":{\"t\":\"打开状态：一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务\"},\"4680\":{\"t\":\"半开状态：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭\"},\"4681\":{\"t\":\"关闭状态：当服务一直处于正常状态 能正常调用\"},\"4682\":{\"t\":\"什么是 Hystrix？\"},\"4683\":{\"t\":\"在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等一些防止雪崩的技术。\"},\"4684\":{\"t\":\"Hystrix有四种防雪崩方式:\"},\"4685\":{\"t\":\"服务降级：接口调用失败就调用本地的方法返回一个空\"},\"4686\":{\"t\":\"服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息\"},\"4687\":{\"t\":\"服务隔离：隔离服务之间相互影响\"},\"4688\":{\"t\":\"服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。\"},\"4689\":{\"t\":\"什么是Feign？\"},\"4690\":{\"t\":\"Feign 是一个声明web服务客户端，这使得编写web服务客户端更容易。它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。\"},\"4691\":{\"h\":\"Feign远程调用的基本流程\",\"a\":\"feign远程调用的基本流程\"},\"4692\":{\"t\":\"Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，放回给调用者。Feign远程调用的基本流程，大致如下图所示。\"},\"4693\":{\"t\":\"在这里插入图片描述\"},\"4694\":{\"t\":\"从上图可以看到，Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的 Request 请求。通过Feign以及JAVA的动态代理机制，使得Java 开发人员，可以不用通过HTTP框架去封装HTTP请求报文的方式，完成远程服务的HTTP调用。\"},\"4695\":{\"t\":\"过程：\"},\"4696\":{\"t\":\"在微服务启动时，Feign会进行包扫描，对加@FeignClient注解的接口，按照注解的规则，创建远程接口的本地JDK Proxy代理实例。然后，将这些本地Proxy代理实例，注入到Spring IOC容器中。当远程接口的方法被调用，由Proxy代理实例去完成真正的远程访问，并且返回结果。\"},\"4697\":{\"h\":\"ZooKeeper\"},\"4698\":{\"h\":\"ZooKeeper\",\"a\":\"zookeeper\"},\"4699\":{\"h\":\"基本功能\",\"a\":\"基本功能\"},\"4700\":{\"t\":\"ZooKeeper 是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\"},\"4701\":{\"t\":\"ZooKeeper 为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。这些功能的实现主要依赖于 ZooKeeper 提供的 数据存储+事件监听 功能。\"},\"4702\":{\"t\":\"ZooKeeper 将数据保存在内存中，性能是不错的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景）。\"},\"4703\":{\"t\":\"另外，很多顶级的开源项目都用到了 ZooKeeper，比如：\"},\"4704\":{\"t\":\"Kafka : ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。不过，在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构。\"},\"4705\":{\"h\":\"ZAB算法\",\"a\":\"zab算法\"},\"4706\":{\"h\":\"ZAB 协议介绍\",\"a\":\"zab-协议介绍\"},\"4707\":{\"t\":\"ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\"},\"4708\":{\"h\":\"ZAB 协议两种基本的模式：崩溃恢复和消息广播\",\"a\":\"zab-协议两种基本的模式-崩溃恢复和消息广播\"},\"4709\":{\"t\":\"ZAB 协议包括两种基本的模式，分别是\"},\"4710\":{\"t\":\"崩溃恢复 ：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致。\"},\"4711\":{\"t\":\"消息广播 ：当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进入消息广播模式了。 当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\"},\"4712\":{\"h\":\"Zookeeper 架构\",\"a\":\"zookeeper-架构\"},\"4713\":{\"t\":\"作为一个优秀高效且可靠的分布式协调框架，ZooKeeper 在解决分布式数据一致性问题时并没有直接使用 Paxos ，而是专门定制了一致性协议叫做 ZAB(ZooKeeper Atomic Broadcast) 原子广播协议，该协议能够很好地支持 崩溃恢复 。\"},\"4714\":{\"h\":\"ZAB 中的三个角色\",\"a\":\"zab-中的三个角色\"},\"4715\":{\"t\":\"和介绍 Paxos 一样，在介绍 ZAB 协议之前，我们首先来了解一下在 ZAB 中三个主要的角色，Leader 领导者、Follower跟随者、Observer观察者 。\"},\"4716\":{\"t\":\"Leader ：集群中 唯一的写请求处理者 ，能够发起投票（投票也是为了进行写请求）。\"},\"4717\":{\"t\":\"Follower：能够接收客户端的请求，如果是读请求则可以自己处理，如果是写请求则要转发给 Leader 。在选举过程中会参与投票，有选举权和被选举权 。\"},\"4718\":{\"t\":\"Observer ：就是没有选举权和被选举权的 Follower 。\"},\"4719\":{\"t\":\"在 ZAB 协议中对 zkServer(即上面我们说的三个角色的总称) 还有两种模式的定义，分别是 消息广播 和 崩溃恢复 。\"},\"4720\":{\"h\":\"消息广播模式\",\"a\":\"消息广播模式\"},\"4721\":{\"t\":\"说白了就是 ZAB 协议是如何处理写请求的，上面我们不是说只有 Leader 能处理写请求嘛？那么我们的 Follower 和 Observer 是不是也需要 同步更新数据 呢？总不能数据只在 Leader 中更新了，其他角色都没有得到更新吧？\"},\"4722\":{\"t\":\"第一步肯定需要 Leader 将写请求 广播 出去呀，让 Leader 问问 Followers 是否同意更新，如果超过半数以上的同意那么就进行 Follower 和 Observer 的更新（和 Paxos 一样）。\"},\"4723\":{\"t\":\"在 Leader 这端，它为每个其他的 zkServer 准备了一个 队列 ，采用先进先出的方式发送消息。由于协议是 通过 TCP 来进行网络通信的，保证了消息的发送顺序性，接受顺序性也得到了保证。\"},\"4724\":{\"t\":\"除此之外，在 ZAB 中还定义了一个 全局单调递增的事务ID ZXID ，它是一个64位long型，其中高32位表示 epoch 年代，低32位表示事务id。epoch 是会根据 Leader 的变化而变化的，当一个 Leader 挂了，新的 Leader 上位的时候，年代（epoch）就变了。而低32位可以简单理解为递增的事务id。\"},\"4725\":{\"t\":\"定义这个的原因也是为了顺序性，每个 proposal 在 Leader 中生成后需要 通过其 ZXID 来进行排序 ，才能得到处理。\"},\"4726\":{\"h\":\"崩溃恢复模式\",\"a\":\"崩溃恢复模式\"},\"4727\":{\"t\":\"说到崩溃恢复我们首先要提到 ZAB 中的 Leader 选举算法，当系统出现崩溃影响最大应该是 Leader 的崩溃，因为我们只有一个 Leader ，所以当 Leader 出现问题的时候我们势必需要重新选举 Leader 。\"},\"4728\":{\"t\":\"Leader 选举可以分为两个不同的阶段，第一个是我们提到的 Leader 宕机需要重新选举，第二则是当 Zookeeper 启动时需要进行系统的 Leader 初始化选举。下面我先来介绍一下 ZAB 是如何进行初始化选举的。\"},\"4729\":{\"t\":\"假设我们集群中有3台机器，那也就意味着我们需要两台以上同意（超过半数）。比如这个时候我们启动了 server1 ，它会首先 投票给自己 ，投票内容为服务器的 myid 和 ZXID ，因为初始化所以 ZXID 都为0，此时 server1 发出的投票为 (1,0)。但此时 server1 的投票仅为1，所以不能作为 Leader ，此时还在选举阶段所以整个集群处于 Looking 状态。\"},\"4730\":{\"t\":\"接着 server2 启动了，它首先也会将投票选给自己(2,0)，并将投票信息广播出去（server1也会，只是它那时没有其他的服务器了），server1 在收到 server2 的投票信息后会将投票信息与自己的作比较。首先它会比较 ZXID ，ZXID 大的优先为 Leader，如果相同则比较 myid，myid 大的优先作为 Leader。所以此时server1 发现 server2 更适合做 Leader，它就会将自己的投票信息更改为(2,0)然后再广播出去，之后server2 收到之后发现和自己的一样无需做更改，并且自己的 投票已经超过半数 ，则 确定 server2 为 Leader，server1 也会将自己服务器设置为 Following 变为 Follower。整个服务器就从 Looking 变为了正常状态。\"},\"4731\":{\"t\":\"当 server3 启动发现集群没有处于 Looking 状态时，它会直接以 Follower 的身份加入集群。\"},\"4732\":{\"t\":\"还是前面三个 server 的例子，如果在整个集群运行的过程中 server2 挂了，那么整个集群会如何重新选举 Leader 呢？其实和初始化选举差不多。\"},\"4733\":{\"t\":\"首先毫无疑问的是剩下的两个 Follower 会将自己的状态 从 Following 变为 Looking 状态 ，然后每个 server 会向初始化投票一样首先给自己投票（这不过这里的 zxid 可能不是0了，这里为了方便随便取个数字）。\"},\"4734\":{\"t\":\"假设 server1 给自己投票为(1,99)，然后广播给其他 server，server3 首先也会给自己投票(3,95)，然后也广播给其他 server。server1 和 server3 此时会收到彼此的投票信息，和一开始选举一样，他们也会比较自己的投票和收到的投票（zxid 大的优先，如果相同那么就 myid 大的优先）。这个时候 server1 收到了 server3 的投票发现没自己的合适故不变，server3 收到 server1 的投票结果后发现比自己的合适于是更改投票为(1,99)然后广播出去，最后 server1 收到了发现自己的投票已经超过半数就把自己设为 Leader，server3 也随之变为 Follower。\"},\"4735\":{\"t\":\"请注意 ZooKeeper 为什么要设置奇数个结点？比如这里我们是三个，挂了一个我们还能正常工作，挂了两个我们就不能正常工作了（已经没有超过半数的节点数了，所以无法进行投票等操作了）。而假设我们现在有四个，挂了一个也能工作，但是挂了两个也不能正常工作了，这是和三个一样的，而三个比四个还少一个，带来的效益是一样的，所以 Zookeeper 推荐奇数个 server 。\"},\"4736\":{\"t\":\"那么说完了 ZAB 中的 Leader 选举方式之后我们再来了解一下 崩溃恢复 是什么玩意？\"},\"4737\":{\"t\":\"其实主要就是 当集群中有机器挂了，我们整个集群如何保证数据一致性？\"},\"4738\":{\"t\":\"如果只是 Follower 挂了，而且挂的没超过半数的时候，因为我们一开始讲了在 Leader 中会维护队列，所以不用担心后面的数据没接收到导致数据不一致性。\"},\"4739\":{\"t\":\"如果 Leader 挂了那就麻烦了，我们肯定需要先暂停服务变为 Looking 状态然后进行 Leader 的重新选举（上面我讲过了），但这个就要分为两种情况了，分别是 确保已经被Leader提交的提案最终能够被所有的Follower提交 和 跳过那些已经被丢弃的提案 。\"},\"4740\":{\"t\":\"确保已经被Leader提交的提案最终能够被所有的Follower提交是什么意思呢？\"},\"4741\":{\"t\":\"假设 Leader (server2) 发送 commit 请求（忘了请看上面的消息广播模式），他发送给了 server3，然后要发给 server1 的时候突然挂了。这个时候重新选举的时候我们如果把 server1 作为 Leader 的话，那么肯定会产生数据不一致性，因为 server3 肯定会提交刚刚 server2 发送的 commit 请求的提案，而 server1 根本没收到所以会丢弃。\"},\"4742\":{\"t\":\"崩溃恢复\"},\"4743\":{\"t\":\"那怎么解决呢？\"},\"4744\":{\"t\":\"聪明的同学肯定会质疑，这个时候 server1 已经不可能成为 Leader 了，因为 server1 和 server3 进行投票选举的时候会比较 ZXID ，而此时 server3 的 ZXID 肯定比 server1 的大了。(不理解可以看前面的选举算法)\"},\"4745\":{\"t\":\"那么跳过那些已经被丢弃的提案又是什么意思呢？\"},\"4746\":{\"t\":\"假设 Leader (server2) 此时同意了提案N1，自身提交了这个事务并且要发送给所有 Follower 要 commit 的请求，却在这个时候挂了，此时肯定要重新进行 Leader 的选举，比如说此时选 server1 为 Leader （这无所谓）。但是过了一会，这个 挂掉的 Leader 又重新恢复了 ，此时它肯定会作为 Follower 的身份进入集群中，需要注意的是刚刚 server2 已经同意提交了提案N1，但其他 server 并没有收到它的 commit 信息，所以其他 server 不可能再提交这个提案N1了，这样就会出现数据不一致性问题了，所以 该提案N1最终需要被抛弃掉 。\"},\"4747\":{\"t\":\"崩溃恢复\"},\"4748\":{\"h\":\"CAP\",\"a\":\"cap\"},\"4749\":{\"h\":\"简介\",\"a\":\"简介\"},\"4750\":{\"t\":\"CAP 也就是 Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性） 这三个单词首字母组合。\"},\"4751\":{\"t\":\"img\"},\"4752\":{\"t\":\"在理论计算机科学中，CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能同时满足以下三点中的两个：\"},\"4753\":{\"t\":\"一致性（Consistency） : 所有节点访问同一份最新的数据副本\"},\"4754\":{\"t\":\"可用性（Availability）: 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\"},\"4755\":{\"t\":\"分区容错性（Partition Tolerance） : 分布式系统出现网络分区的时候，仍然能够对外提供服务。\"},\"4756\":{\"t\":\"什么是网络分区？\"},\"4757\":{\"t\":\"分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫 网络分区。\"},\"4758\":{\"h\":\"不是所谓的“3 选 2”\",\"a\":\"不是所谓的-3-选-2\"},\"4759\":{\"t\":\"大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。\"},\"4760\":{\"t\":\"当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。\"},\"4761\":{\"t\":\"简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。\"},\"4762\":{\"t\":\"因此，分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。 比如 ZooKeeper 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。\"},\"4763\":{\"t\":\"为啥不可能选择 CA 架构呢？ 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。\"},\"4764\":{\"t\":\"选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。\"},\"4765\":{\"t\":\"另外，需要补充说明的一点是： 如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。\"},\"4766\":{\"h\":\"操作系统\"},\"4767\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"4768\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"4769\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"4770\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"4771\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"4772\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"4773\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"4774\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"4775\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"4776\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"4777\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"4778\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"4779\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"4780\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"4781\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"4782\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"4783\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"4784\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"4785\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"4786\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"4787\":{\"t\":\"锁：加锁、解锁操作；\"},\"4788\":{\"t\":\"信号量：P、V 操作；\"},\"4789\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"4790\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"4791\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"4792\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"4793\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"4794\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"4795\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"4796\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"4797\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"4798\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"4799\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"4800\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"4801\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"4802\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"4803\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"4804\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"4805\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"4806\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"4807\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"4808\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"4809\":{\"t\":\"img\"},\"4810\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"4811\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"4812\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"4813\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"4814\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"4815\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"4816\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"4817\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"4818\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"4819\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"4820\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"4821\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"4822\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"4823\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"4824\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"4825\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"4826\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"4827\":{\"t\":\"mmap + write\"},\"4828\":{\"t\":\"sendfile\"},\"4829\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"4830\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"4831\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"4832\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"4833\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"4834\":{\"t\":\"img\"},\"4835\":{\"t\":\"具体过程如下：\"},\"4836\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"4837\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"4838\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"4839\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"4840\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"4841\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"4842\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"4843\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"4844\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"4845\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"4846\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"4847\":{\"t\":\"img\"},\"4848\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"4849\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"4850\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"4851\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"4852\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"4853\":{\"t\":\"img\"},\"4854\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"4855\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"4856\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"4857\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"4858\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"4859\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"4860\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"4861\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"4862\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"4863\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"4864\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"4865\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"4866\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"4867\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"4868\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"4869\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"4870\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"4871\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"4872\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"4873\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"4874\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"4875\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"4876\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"4877\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"4878\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"4879\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"4880\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"4881\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"4882\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"4883\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"4884\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"4885\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"4886\":{\"t\":\"img\"},\"4887\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"4888\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"4889\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"4890\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"4891\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"4892\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"4893\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"4894\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"4895\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"4896\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"4897\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"4898\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"4899\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"4900\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"4901\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"4902\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"4903\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"4904\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"4905\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"4906\":{\"t\":\"img\"},\"4907\":{\"t\":\"详细说一下这个方案：\"},\"4908\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"4909\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"4910\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"4911\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"4912\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"4913\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"4914\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"4915\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"4916\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"4917\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"4918\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"4919\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"4920\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"4921\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"4922\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"4923\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"4924\":{\"t\":\"img\"},\"4925\":{\"t\":\"方案详细说明如下：\"},\"4926\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"4927\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"4928\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"4929\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"4930\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"4931\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"4932\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"4933\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"4934\":{\"h\":\"MySQL\"},\"4935\":{\"h\":\"MySQL\",\"a\":\"mysql\"},\"4936\":{\"h\":\"InnoDB特性\",\"a\":\"innodb特性\"},\"4937\":{\"h\":\"MyISAM 和 InnoDB 有什么区别？\",\"a\":\"myisam-和-innodb-有什么区别\"},\"4938\":{\"t\":\"MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，可谓是风光一时。\"},\"4939\":{\"t\":\"虽然，MyISAM 的性能还行，各种特性也还不错（比如全文索引、压缩、空间函数等）。但是，MyISAM 不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。\"},\"4940\":{\"t\":\"MySQL 5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。\"},\"4941\":{\"t\":\"言归正传！咱们下面还是来简单对比一下两者：\"},\"4942\":{\"t\":\"1.是否支持行级锁\"},\"4943\":{\"t\":\"MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。\"},\"4944\":{\"t\":\"也就说，MyISAM 一锁就是锁住了整张表，这在并发写的情况下是多么滴憨憨啊！这也是为什么 InnoDB 在并发写的时候，性能更牛皮了！\"},\"4945\":{\"t\":\"2.是否支持事务\"},\"4946\":{\"t\":\"MyISAM 不提供事务支持。\"},\"4947\":{\"t\":\"InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别，具有提交(commit)和回滚(rollback)事务的能力。并且，InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）。\"},\"4948\":{\"t\":\"3.是否支持外键\"},\"4949\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"4950\":{\"t\":\"外键对于维护数据一致性非常有帮助，但是对性能有一定的损耗。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，在业务代码中进行约束即可！\"},\"4951\":{\"t\":\"阿里的《Java 开发手册》也是明确规定禁止使用外键的。\"},\"4952\":{\"t\":\"4.是否支持数据库异常崩溃后的安全恢复\"},\"4953\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"4954\":{\"t\":\"使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 redo log 。\"},\"4955\":{\"t\":\"5.是否支持 MVCC\"},\"4956\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"4957\":{\"t\":\"讲真，这个对比有点废话，毕竟 MyISAM 连行级锁都不支持。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能。\"},\"4958\":{\"t\":\"6.索引实现不一样。\"},\"4959\":{\"t\":\"虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。\"},\"4960\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。\"},\"4961\":{\"h\":\"索引\",\"a\":\"索引\"},\"4962\":{\"t\":\"索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。\"},\"4963\":{\"h\":\"底层数据结构：\",\"a\":\"底层数据结构\"},\"4964\":{\"t\":\"Hash 表\"},\"4965\":{\"t\":\"哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。\"},\"4966\":{\"t\":\"为何能够通过 key 快速取出 value 呢？ 原因在于 哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。\"},\"4967\":{\"t\":\"既然哈希表这么快，为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。\"},\"4968\":{\"t\":\"B 树& B+树\"},\"4969\":{\"t\":\"B 树也称 B-树,全称为 多路平衡查找树 ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 Balanced （平衡）的意思。\"},\"4970\":{\"t\":\"目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。\"},\"4971\":{\"t\":\"B 树& B+树两者有何异同呢？\"},\"4972\":{\"t\":\"B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\"},\"4973\":{\"t\":\"B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。\"},\"4974\":{\"t\":\"B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\"},\"4975\":{\"t\":\"在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）\"},\"4976\":{\"t\":\"MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引（非聚集索引）”。\"},\"4977\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“聚簇索引（聚集索引）”，而其余的索引都作为 辅助索引 ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。\"},\"4978\":{\"h\":\"类型总结\",\"a\":\"类型总结\"},\"4979\":{\"t\":\"按照数据结构维度划分：\"},\"4980\":{\"t\":\"BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。\"},\"4981\":{\"t\":\"哈希索引：类似键值对的形式，一次即可定位。\"},\"4982\":{\"t\":\"RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"4983\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"4984\":{\"t\":\"按照底层存储方式角度划分：\"},\"4985\":{\"t\":\"聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。\"},\"4986\":{\"t\":\"非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"4987\":{\"t\":\"按照应用维度划分：\"},\"4988\":{\"t\":\"主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。\"},\"4989\":{\"t\":\"普通索引：仅加速查询。\"},\"4990\":{\"t\":\"唯一索引：加速查询 + 列值唯一（可以有 NULL）。\"},\"4991\":{\"t\":\"覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。\"},\"4992\":{\"t\":\"联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。\"},\"4993\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"4994\":{\"h\":\"主键索引：\",\"a\":\"主键索引\"},\"4995\":{\"t\":\"数据表的主键列使用的就是主键索引。\"},\"4996\":{\"t\":\"一张数据表有只能有一个主键，并且主键不能为 null，不能重复。\"},\"4997\":{\"t\":\"在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。\"},\"4998\":{\"t\":\"img\"},\"4999\":{\"h\":\"二级索引：\",\"a\":\"二级索引\"},\"5000\":{\"t\":\"二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。\"},\"5001\":{\"t\":\"唯一索引，普通索引，前缀索引等索引属于二级索引。\"},\"5002\":{\"t\":\"PS: 不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。\"},\"5003\":{\"t\":\"唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。\"},\"5004\":{\"t\":\"普通索引(Index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。\"},\"5005\":{\"t\":\"前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。\"},\"5006\":{\"t\":\"全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。\"},\"5007\":{\"t\":\"img\"},\"5008\":{\"h\":\"聚簇索引：\",\"a\":\"聚簇索引\"},\"5009\":{\"t\":\"聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。\"},\"5010\":{\"t\":\"在 MySQL 中，InnoDB 引擎的表的 .ibd文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。\"},\"5011\":{\"t\":\"优点 ：\"},\"5012\":{\"t\":\"查询速度非常快 ：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。\"},\"5013\":{\"t\":\"对排序查找和范围查找优化 ：聚簇索引对于主键的排序查找和范围查找速度非常快。\"},\"5014\":{\"t\":\"缺点 ：\"},\"5015\":{\"t\":\"依赖于有序的数据 ：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。\"},\"5016\":{\"t\":\"更新代价大 ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。\"},\"5017\":{\"h\":\"非聚簇索引：\",\"a\":\"非聚簇索引\"},\"5018\":{\"t\":\"非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"5019\":{\"t\":\"非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。\"},\"5020\":{\"t\":\"优点 ：\"},\"5021\":{\"t\":\"更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的\"},\"5022\":{\"t\":\"缺点 ：\"},\"5023\":{\"t\":\"依赖于有序的数据 ：跟聚簇索引一样，非聚簇索引也依赖于有序的数据\"},\"5024\":{\"t\":\"可能会二次查询(回表) ：这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。\"},\"5025\":{\"h\":\"覆盖索引：\",\"a\":\"覆盖索引\"},\"5026\":{\"t\":\"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 覆盖索引（Covering Index） 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！\"},\"5027\":{\"t\":\"覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。\"},\"5028\":{\"t\":\"如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。\"},\"5029\":{\"h\":\"联合索引：\",\"a\":\"联合索引\"},\"5030\":{\"t\":\"使用表中的多个字段创建索引，就是 联合索引，也叫 组合索引 或 复合索引。\"},\"5031\":{\"t\":\"最左前缀匹配原则\"},\"5032\":{\"t\":\"最左前缀匹配原则指的是，在使用联合索引时，MySQL 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 >、<）才会停止匹配。对于 >=、<=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。\"},\"5033\":{\"t\":\"索引下推\"},\"5034\":{\"t\":\"索引下推（Index Condition Pushdown） 是 MySQL 5.6 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。\"},\"5035\":{\"h\":\"正确使用索引的一些建议：\",\"a\":\"正确使用索引的一些建议\"},\"5036\":{\"t\":\"选择合适的字段创建索引：\"},\"5037\":{\"t\":\"不为 NULL 的字段 ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。\"},\"5038\":{\"t\":\"被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。\"},\"5039\":{\"t\":\"被作为条件查询的字段 ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。\"},\"5040\":{\"t\":\"频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。\"},\"5041\":{\"t\":\"被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。\"},\"5042\":{\"t\":\"被频繁更新的字段应该慎重建立索引：\"},\"5043\":{\"t\":\"虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。\"},\"5044\":{\"t\":\"限制每张表上的索引数量：\"},\"5045\":{\"t\":\"索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。\"},\"5046\":{\"t\":\"索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。\"},\"5047\":{\"t\":\"因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。\"},\"5048\":{\"t\":\"尽可能的考虑建立联合索引而不是单列索引：\"},\"5049\":{\"t\":\"因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。\"},\"5050\":{\"t\":\"注意避免冗余索引：\"},\"5051\":{\"t\":\"冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\"},\"5052\":{\"t\":\"字符串类型的字段使用前缀索引代替普通索引：\"},\"5053\":{\"t\":\"前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。\"},\"5054\":{\"t\":\"避免索引失效：\"},\"5055\":{\"t\":\"索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：\"},\"5056\":{\"t\":\"使用 SELECT * 进行查询;\"},\"5057\":{\"t\":\"创建了组合索引，但查询条件未遵守最左匹配原则;\"},\"5058\":{\"t\":\"在索引列上进行计算、函数、类型转换等操作;\"},\"5059\":{\"t\":\"以 % 开头的 LIKE 查询比如 like '%abc';\"},\"5060\":{\"t\":\"查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;\"},\"5061\":{\"t\":\"发生隐式转换\"},\"5062\":{\"h\":\"锁机制\",\"a\":\"锁机制\"},\"5063\":{\"t\":\"在 MySQL 里，根据加锁的范围，可以分为全局锁、表级锁和行锁三类。\"},\"5064\":{\"t\":\"img\"},\"5065\":{\"h\":\"全局锁：\",\"a\":\"全局锁\"},\"5066\":{\"t\":\"要使用全局锁，则要执行这条命令：\"},\"5067\":{\"t\":\"flush tables with read lock \"},\"5068\":{\"t\":\"执行后，整个数据库就处于只读状态了，这时其他线程执行以下操作，都会被阻塞：\"},\"5069\":{\"t\":\"对数据的增删改操作，比如 insert、delete、update等语句；\"},\"5070\":{\"t\":\"对表结构的更改操作，比如 alter table、drop table 等语句。\"},\"5071\":{\"t\":\"如果要释放全局锁，则要执行这条命令：\"},\"5072\":{\"t\":\"unlock tables \"},\"5073\":{\"t\":\"全局锁应用场景是什么？\"},\"5074\":{\"t\":\"全局锁主要应用于做全库逻辑备份，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。\"},\"5075\":{\"t\":\"加全局锁又会带来什么缺点呢？\"},\"5076\":{\"t\":\"加上全局锁，意味着整个数据库都是只读状态。\"},\"5077\":{\"t\":\"那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。\"},\"5078\":{\"t\":\"既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？\"},\"5079\":{\"t\":\"有的，如果数据库的引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。\"},\"5080\":{\"t\":\"因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。\"},\"5081\":{\"t\":\"备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 –single-transaction 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。\"},\"5082\":{\"t\":\"InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。\"},\"5083\":{\"t\":\"但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。\"},\"5084\":{\"h\":\"表级锁：\",\"a\":\"表级锁\"},\"5085\":{\"t\":\"MySQL 里面表级别的锁有这几种：\"},\"5086\":{\"t\":\"表锁；\"},\"5087\":{\"t\":\"元数据锁（MDL）;\"},\"5088\":{\"t\":\"意向锁；\"},\"5089\":{\"t\":\"AUTO-INC 锁；\"},\"5090\":{\"h\":\"表锁\",\"a\":\"表锁\"},\"5091\":{\"t\":\"先来说说表锁。\"},\"5092\":{\"t\":\"如果我们想对学生表（t_student）加表锁，可以使用下面的命令：\"},\"5093\":{\"t\":\"//表级别的共享锁，也就是读锁； lock tables t_student read; //表级别的独占锁，也就是写锁； lock tables t_stuent write; \"},\"5094\":{\"t\":\"需要注意的是，表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。\"},\"5095\":{\"t\":\"也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放。\"},\"5096\":{\"t\":\"要释放表锁，可以使用下面这条命令，会释放当前会话的所有表锁：\"},\"5097\":{\"t\":\"unlock tables \"},\"5098\":{\"t\":\"另外，当会话退出后，也会释放所有表锁。\"},\"5099\":{\"t\":\"不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁。\"},\"5100\":{\"h\":\"元数据锁\",\"a\":\"元数据锁\"},\"5101\":{\"t\":\"再来说说元数据锁（MDL）。\"},\"5102\":{\"t\":\"我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：\"},\"5103\":{\"t\":\"对一张表进行 CRUD 操作时，加的是 MDL 读锁；\"},\"5104\":{\"t\":\"对一张表做结构变更操作的时候，加的是 MDL 写锁；\"},\"5105\":{\"t\":\"MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。\"},\"5106\":{\"t\":\"当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。\"},\"5107\":{\"t\":\"反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。\"},\"5108\":{\"t\":\"MDL 不需要显示调用，那它是在什么时候释放的?\"},\"5109\":{\"t\":\"MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。\"},\"5110\":{\"t\":\"那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），那在对表结构做变更操作的时候，可能会发生意想不到的事情，比如下面这个顺序的场景：\"},\"5111\":{\"t\":\"首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；\"},\"5112\":{\"t\":\"然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；\"},\"5113\":{\"t\":\"接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，\"},\"5114\":{\"t\":\"那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。\"},\"5115\":{\"t\":\"为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？\"},\"5116\":{\"t\":\"这是因为申请 MDL 锁的操作会形成一个队列，队列中写锁获取优先级高于读锁，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。\"},\"5117\":{\"t\":\"所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。\"},\"5118\":{\"h\":\"意向锁\",\"a\":\"意向锁\"},\"5119\":{\"t\":\"接着，说说意向锁。\"},\"5120\":{\"t\":\"在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；\"},\"5121\":{\"t\":\"在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；\"},\"5122\":{\"t\":\"也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。\"},\"5123\":{\"t\":\"而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。\"},\"5124\":{\"t\":\"不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：\"},\"5125\":{\"t\":\"//先在表上加上意向共享锁，然后对读取的记录加共享锁 select ... lock in share mode; //先表上加上意向独占锁，然后对读取的记录加独占锁 select ... for update; \"},\"5126\":{\"t\":\"意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables ... read*）和独占表锁（*lock tables ... write*）发生冲突。\"},\"5127\":{\"t\":\"表锁和行锁是满足读读共享、读写互斥、写写互斥的。\"},\"5128\":{\"t\":\"如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。\"},\"5129\":{\"t\":\"那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。\"},\"5130\":{\"t\":\"所以，意向锁的目的是为了快速判断表里是否有记录被加锁。\"},\"5131\":{\"h\":\"AUTO-INC 锁\",\"a\":\"auto-inc-锁\"},\"5132\":{\"t\":\"表里的主键通常都会设置成自增的，这是通过对主键字段声明 AUTO_INCREMENT 属性实现的。\"},\"5133\":{\"t\":\"之后可以在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 AUTO-INC 锁实现的。\"},\"5134\":{\"t\":\"AUTO-INC 锁是特殊的表锁机制，锁不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放。\"},\"5135\":{\"t\":\"在插入数据时，会加一个表级别的 AUTO-INC 锁，然后为被 AUTO_INCREMENT 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。\"},\"5136\":{\"t\":\"那么，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 AUTO_INCREMENT 修饰的字段的值是连续递增的。\"},\"5137\":{\"t\":\"但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。\"},\"5138\":{\"t\":\"因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种轻量级的锁来实现自增。\"},\"5139\":{\"t\":\"一样也是在插入数据的时候，会为被 AUTO_INCREMENT 修饰的字段加上轻量级锁，然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁。\"},\"5140\":{\"t\":\"InnoDB 存储引擎提供了个 innodb_autoinc_lock_mode 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。\"},\"5141\":{\"t\":\"当 innodb_autoinc_lock_mode = 0，就采用 AUTO-INC 锁，语句执行结束后才释放锁；\"},\"5142\":{\"t\":\"当 innodb_autoinc_lock_mode = 2，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。\"},\"5143\":{\"t\":\"当 innodb_autoinc_lock_mode = 1： \"},\"5144\":{\"t\":\"普通 insert 语句，自增锁在申请之后就马上释放；\"},\"5145\":{\"t\":\"类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；\"},\"5146\":{\"t\":\"当 innodb_autoinc_lock_mode = 2 是性能最高的方式，但是当搭配 binlog 的日志格式是 statement 一起使用的时候，在「主从复制的场景」中会发生数据不一致的问题。\"},\"5147\":{\"t\":\"要解决这问题，binlog 日志格式要设置为 row，这样在 binlog 里面记录的是主库分配的自增值，到备库执行的时候，主库的自增值是什么，从库的自增值就是什么。\"},\"5148\":{\"t\":\"所以，当 innodb_autoinc_lock_mode = 2 时，并且 binlog_format = row，既能提升并发性，又不会出现数据一致性问题。\"},\"5149\":{\"h\":\"行级锁：\",\"a\":\"行级锁\"},\"5150\":{\"t\":\"InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。\"},\"5151\":{\"t\":\"前面也提到，普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为锁定读。\"},\"5152\":{\"t\":\"//对读取的记录加共享锁 select ... lock in share mode; //对读取的记录加独占锁 select ... for update; \"},\"5153\":{\"t\":\"上面这两条语句必须在一个事务中，因为当事务提交了，锁就会被释放，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。\"},\"5154\":{\"t\":\"共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。\"},\"5155\":{\"t\":\"img\"},\"5156\":{\"t\":\"行级锁的类型主要有三类：\"},\"5157\":{\"t\":\"Record Lock，记录锁，也就是仅仅把一条记录锁上；\"},\"5158\":{\"t\":\"Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"},\"5159\":{\"t\":\"Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"5160\":{\"h\":\"Record Lock\",\"a\":\"record-lock\"},\"5161\":{\"t\":\"Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：\"},\"5162\":{\"t\":\"当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;\"},\"5163\":{\"t\":\"当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。\"},\"5164\":{\"h\":\"Gap Lock\",\"a\":\"gap-lock\"},\"5165\":{\"t\":\"Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。\"},\"5166\":{\"t\":\"假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。\"},\"5167\":{\"t\":\"间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。\"},\"5168\":{\"h\":\"Next-Key Lock\",\"a\":\"next-key-lock\"},\"5169\":{\"t\":\"Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"5170\":{\"t\":\"所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。\"},\"5171\":{\"t\":\"next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。\"},\"5172\":{\"t\":\"比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。\"},\"5173\":{\"t\":\"虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。\"},\"5174\":{\"h\":\"插入意向锁\",\"a\":\"插入意向锁\"},\"5175\":{\"t\":\"一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。\"},\"5176\":{\"t\":\"如果有的话，插入操作就会发生阻塞，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个插入意向锁，表明有事务想在某个区间插入新记录，但是现在处于等待状态。\"},\"5177\":{\"t\":\"插入意向锁名字虽然有意向锁，但是它并不是意向锁，它是一种特殊的间隙锁，属于行级别锁。\"},\"5178\":{\"t\":\"如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。\"},\"5179\":{\"t\":\"插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。\"},\"5180\":{\"h\":\"ACID事务\",\"a\":\"acid事务\"},\"5181\":{\"t\":\"事务是由 MySQL 的引擎来实现的，我们常见的 InnoDB 引擎它是支持事务的。\"},\"5182\":{\"t\":\"不过并不是所有的引擎都能支持事务，比如 MySQL 原生的 MyISAM 引擎就不支持事务，也正是这样，所以大多数 MySQL 的引擎都是用 InnoDB。\"},\"5183\":{\"t\":\"事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：\"},\"5184\":{\"t\":\"原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。\"},\"5185\":{\"t\":\"一致性（Consistency）：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。\"},\"5186\":{\"t\":\"隔离性（Isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。\"},\"5187\":{\"t\":\"持久性（Durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\"},\"5188\":{\"t\":\"InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？\"},\"5189\":{\"t\":\"持久性是通过 redo log （重做日志）来保证的；\"},\"5190\":{\"t\":\"原子性是通过 undo log（回滚日志） 来保证的；\"},\"5191\":{\"t\":\"隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；\"},\"5192\":{\"t\":\"一致性则是通过持久性+原子性+隔离性来保证；\"},\"5193\":{\"h\":\"脏读\",\"a\":\"脏读\"},\"5194\":{\"t\":\"如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。\"},\"5195\":{\"t\":\"举个栗子。\"},\"5196\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后再执行更新操作，如果此时事务 A 还没有提交事务，而此时正好事务 B 也从数据库中读取小林的余额数据，那么事务 B 读取到的余额数据是刚才事务 A 更新后的数据，即使没有提交事务。\"},\"5197\":{\"t\":\"因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。\"},\"5198\":{\"h\":\"不可重复读\",\"a\":\"不可重复读\"},\"5199\":{\"t\":\"在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。\"},\"5200\":{\"t\":\"举个栗子。\"},\"5201\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后继续执行代码逻辑处理，在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为不可重复读。\"},\"5202\":{\"h\":\"幻读\",\"a\":\"幻读\"},\"5203\":{\"t\":\"在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。\"},\"5204\":{\"t\":\"举个栗子。\"},\"5205\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库查询账户余额大于 100 万的记录，发现共有 5 条，然后事务 B 也按相同的搜索条件也是查询出了 5 条记录。\"},\"5206\":{\"t\":\"接下来，事务 A 插入了一条余额超过 100 万的账号，并提交了事务，此时数据库超过 100 万余额的账号个数就变为 6。\"},\"5207\":{\"t\":\"然后事务 B 再次查询账户余额大于 100 万的记录，此时查询到的记录数量有 6 条，发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。\"},\"5208\":{\"h\":\"四大隔离级别\",\"a\":\"四大隔离级别\"},\"5209\":{\"t\":\"SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：\"},\"5210\":{\"t\":\"读未提交（*read uncommitted*），指一个事务还没提交时，它做的变更就能被其他事务看到；\"},\"5211\":{\"t\":\"读提交（*read committed*），指一个事务提交之后，它做的变更才能被其他事务看到；\"},\"5212\":{\"t\":\"可重复读（*repeatable read*），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别；\"},\"5213\":{\"t\":\"串行化（*serializable* ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\"},\"5214\":{\"t\":\"按隔离水平高低排序如下：\"},\"5215\":{\"t\":\"图片\"},\"5216\":{\"t\":\"针对不同的隔离级别，并发事务时可能发生的现象也会不同。也就是说：\"},\"5217\":{\"t\":\"在「读未提交」隔离级别下，可能发生脏读、不可重复读和幻读现象；\"},\"5218\":{\"t\":\"在「读提交」隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；\"},\"5219\":{\"t\":\"在「可重复读」隔离级别下，可能发生幻读现象，但是不可能脏读和不可重复读现象；\"},\"5220\":{\"t\":\"在「串行化」隔离级别下，脏读、不可重复读和幻读现象都不可能会发生。\"},\"5221\":{\"t\":\"所以，要解决脏读现象，就要升级到「读提交」以上的隔离级别；要解决不可重复读现象，就要升级到「可重复读」的隔离级别，要解决幻读现象不建议将隔离级别升级到「串行化」。\"},\"5222\":{\"t\":\"不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，我们讨论的 MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入。\"},\"5223\":{\"t\":\"MySQL 在「可重复读」隔离级别下，可以很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能。\"},\"5224\":{\"t\":\"MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象，解决的方案有两种：\"},\"5225\":{\"t\":\"针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\"},\"5226\":{\"t\":\"针对当前读（select ... for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\"},\"5227\":{\"t\":\"这四种隔离级别具体是如何实现的呢？\"},\"5228\":{\"t\":\"对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；\"},\"5229\":{\"t\":\"对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；\"},\"5230\":{\"t\":\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View。\"},\"5231\":{\"h\":\"MVCC\",\"a\":\"mvcc\"},\"5232\":{\"t\":\"MVCC 的实现依赖于：隐藏字段、Read View、undo log。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改\"},\"5233\":{\"t\":\"隐藏字段\"},\"5234\":{\"t\":\"在内部，InnoDB 存储引擎为每行数据添加了三个 隐藏字段：\"},\"5235\":{\"t\":\"DB_TRX_ID（6字节）：表示最后一次插入或更新该行的事务 id。此外，delete 操作在内部被视为更新，只不过会在记录头 Record header 中的 deleted_flag 字段将其标记为已删除\"},\"5236\":{\"t\":\"DB_ROLL_PTR（7字节） 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空\"},\"5237\":{\"t\":\"DB_ROW_ID（6字节）：如果没有设置主键且该表没有唯一非空索引时，InnoDB 会使用该 id 来生成聚簇索引\"},\"5238\":{\"t\":\"ReadView主要是用来做可见性判断，里面保存了 “当前对本事务不可见的其他活跃事务”\"},\"5239\":{\"t\":\" trx_id_t m_low_limit_id; /* 大于等于这个 ID 的事务均不可见 */ trx_id_t m_up_limit_id; /* 小于这个 ID 的事务均可见 */ trx_id_t m_creator_trx_id; /* 创建该 Read View 的事务ID */ trx_id_t m_low_limit_no; /* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */ ids_t m_ids; /* 创建 Read View 时的活跃事务列表 */ \"},\"5240\":{\"t\":\"主要有以下字段：\"},\"5241\":{\"t\":\"m_low_limit_id：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见\"},\"5242\":{\"t\":\"m_up_limit_id：活跃事务列表 m_ids 中最小的事务 ID，如果 m_ids 为空，则 m_up_limit_id 为 m_low_limit_id。小于这个 ID 的数据版本均可见\"},\"5243\":{\"t\":\"m_ids：Read View 创建时其他未提交的活跃事务 ID 列表。创建 Read View时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。m_ids 不包括当前事务自己和已提交的事务（正在内存中）\"},\"5244\":{\"t\":\"m_creator_trx_id：创建该 Read View 的事务 ID\"},\"5245\":{\"t\":\"trans_visible\"},\"5246\":{\"h\":\"undo-log\",\"a\":\"undo-log\"},\"5247\":{\"t\":\"undo log 主要有两个作用：\"},\"5248\":{\"t\":\"当事务回滚时用于将数据恢复到修改前的样子\"},\"5249\":{\"t\":\"另一个作用是 MVCC ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 undo log 读取之前的版本数据，以此实现非锁定读\"},\"5250\":{\"t\":\"在 InnoDB 存储引擎中 undo log 分为两种： insert undo log 和 update undo log：\"},\"5251\":{\"t\":\"insert undo log ：指在 insert 操作中产生的 undo log。因为 insert 操作的记录只对事务本身可见，对其他事务不可见，故该 undo log 可以在事务提交后直接删除。不需要进行 purge 操作\"},\"5252\":{\"h\":\"Jdbc防止sql注入\",\"a\":\"jdbc防止sql注入\"},\"5253\":{\"t\":\"我们只需要使用PreparedStatement解决 将敏感字符进行转义。\"},\"5254\":{\"t\":\"我们可以看到输出的SQL文是把整个参数用引号包起来，并把参数中的引号作为转义字符，从而避免了参数也作为条件的一部分。\"},\"5255\":{\"t\":\"参考：https://blog.csdn.net/weixin_52258054/article/details/124891266\"},\"5256\":{\"h\":\"常见优化手段\",\"a\":\"常见优化手段\"},\"5257\":{\"h\":\"经常一起使用的列放到一个表中\",\"a\":\"经常一起使用的列放到一个表中\"},\"5258\":{\"t\":\"避免更多的关联操作。\"},\"5259\":{\"h\":\"禁止在数据库中存储文件（比如图片）这类大的二进制数据\",\"a\":\"禁止在数据库中存储文件-比如图片-这类大的二进制数据\"},\"5260\":{\"t\":\"在数据库中存储文件会严重影响数据库性能，消耗过多存储空间。\"},\"5261\":{\"t\":\"文件（比如图片）这类大的二进制数据通常存储于文件服务器，数据库只存储文件地址信息。\"},\"5262\":{\"h\":\"优先选择符合存储需要的最小的数据类型\",\"a\":\"优先选择符合存储需要的最小的数据类型\"},\"5263\":{\"t\":\"存储字节越小，占用也就空间越小，性能也越好。\"},\"5264\":{\"h\":\"同财务相关的金额类数据必须使用 decimal 类型\",\"a\":\"同财务相关的金额类数据必须使用-decimal-类型\"},\"5265\":{\"t\":\"非精准浮点 ：float,double\"},\"5266\":{\"t\":\"精准浮点 ：decimal\"},\"5267\":{\"t\":\"decimal 类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节。并且，decimal 可用于存储比 bigint 更大的整型数据\"},\"5268\":{\"t\":\"不过， 由于 decimal 需要额外的空间和计算开销，应该尽量只在需要对数据进行精确计算时才使用 decimal 。\"},\"5269\":{\"h\":\"单表不要包含过多字段\",\"a\":\"单表不要包含过多字段\"},\"5270\":{\"t\":\"如果一个表包含过多字段的话，可以考虑将其分解成多个表，必要时增加中间表进行关联。\"},\"5271\":{\"h\":\"禁止使用全文索引\",\"a\":\"禁止使用全文索引\"},\"5272\":{\"t\":\"全文索引不适用于 OLTP 场景。\"},\"5273\":{\"h\":\"禁止给表中的每一列都建立单独的索引\",\"a\":\"禁止给表中的每一列都建立单独的索引\"},\"5274\":{\"t\":\"5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。\"},\"5275\":{\"h\":\"每个 InnoDB 表必须有个主键\",\"a\":\"每个-innodb-表必须有个主键\"},\"5276\":{\"h\":\"禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询\",\"a\":\"禁止使用-select-必须使用-select-字段列表-查询\"},\"5277\":{\"t\":\"SELECT * 消耗更多的 CPU 和 IO 以网络带宽资源\"},\"5278\":{\"t\":\"SELECT * 无法使用覆盖索引\"},\"5279\":{\"t\":\"SELECT <字段列表> 可减少表结构变更带来的影响\"},\"5280\":{\"h\":\"避免使用子查询，可以把子查询优化为 join 操作\",\"a\":\"避免使用子查询-可以把子查询优化为-join-操作\"},\"5281\":{\"t\":\"通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。\"},\"5282\":{\"t\":\"子查询性能差的原因： 子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。\"},\"5283\":{\"h\":\"Redis\"},\"5284\":{\"h\":\"Redis\",\"a\":\"redis\"},\"5285\":{\"h\":\"Redis 为什么这么快？\",\"a\":\"redis-为什么这么快\"},\"5286\":{\"t\":\"Redis 内部做了非常多的性能优化，比较重要的主要有下面 3 点：\"},\"5287\":{\"t\":\"Redis 基于内存，内存的访问速度是磁盘的上千倍；\"},\"5288\":{\"t\":\"Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；\"},\"5289\":{\"t\":\"Redis 内置了多种优化过后的数据结构实现，性能非常高。\"},\"5290\":{\"h\":\"基本数据类型\",\"a\":\"基本数据类型\"},\"5291\":{\"t\":\"5 种基础数据类型 ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\"},\"5292\":{\"t\":\"3 种特殊数据类型 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。\"},\"5293\":{\"h\":\"数据结构及适用场景\",\"a\":\"数据结构及适用场景\"},\"5294\":{\"h\":\"String（字符串）：\",\"a\":\"string-字符串\"},\"5295\":{\"h\":\"数据结构：\",\"a\":\"数据结构\"},\"5296\":{\"t\":\"String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。\"},\"5297\":{\"t\":\"SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：\"},\"5298\":{\"t\":\"SDS 不仅可以保存文本数据，还可以保存二进制数据。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。\"},\"5299\":{\"t\":\"SDS 获取字符串长度的时间复杂度是 O(1)。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 len 属性记录了字符串长度，所以复杂度为 O(1)。\"},\"5300\":{\"t\":\"Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。\"},\"5301\":{\"h\":\"应用场景：\",\"a\":\"应用场景\"},\"5302\":{\"t\":\"常规数据（比如 session、token、序列化后的对象、图片的路径）的缓存；\"},\"5303\":{\"t\":\"计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；\"},\"5304\":{\"t\":\"分布式锁(利用 SETNX key value 命令可以实现一个最简易的分布式锁)；\"},\"5305\":{\"h\":\"List（列表）：\",\"a\":\"list-列表\"},\"5306\":{\"h\":\"数据结构：\",\"a\":\"数据结构-1\"},\"5307\":{\"t\":\"List 类型的底层数据结构是由双向链表或压缩列表实现的：\"},\"5308\":{\"t\":\"如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用压缩列表作为 List 类型的底层数据结构；\"},\"5309\":{\"t\":\"如果列表的元素不满足上面的条件，Redis 会使用双向链表作为 List 类型的底层数据结构；\"},\"5310\":{\"t\":\"但是在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表。\"},\"5311\":{\"h\":\"应用场景：\",\"a\":\"应用场景-1\"},\"5312\":{\"t\":\"消息队列，List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列；\"},\"5313\":{\"h\":\"Set（集合）：\",\"a\":\"set-集合\"},\"5314\":{\"h\":\"数据结构：\",\"a\":\"数据结构-2\"},\"5315\":{\"t\":\"Set 类型的底层数据结构是由哈希表或整数集合实现的：\"},\"5316\":{\"t\":\"如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用整数集合作为 Set 类型的底层数据结构；\"},\"5317\":{\"t\":\"如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构。\"},\"5318\":{\"h\":\"应用场景：\",\"a\":\"应用场景-2\"},\"5319\":{\"t\":\"点赞、共同关注；\"},\"5320\":{\"h\":\"Hash（散列）：\",\"a\":\"hash-散列\"},\"5321\":{\"h\":\"数据结构：\",\"a\":\"数据结构-3\"},\"5322\":{\"t\":\"Hash 类型的底层数据结构是由压缩列表或哈希表实现的：\"},\"5323\":{\"t\":\"如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用压缩列表作为 Hash 类型的底层数据结构；\"},\"5324\":{\"t\":\"如果哈希类型元素不满足上面条件，Redis 会使用哈希表作为 Hash 类型的 底层数据结构。\"},\"5325\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"5326\":{\"h\":\"应用场景：\",\"a\":\"应用场景-3\"},\"5327\":{\"t\":\"Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象以及购物车；\"},\"5328\":{\"h\":\"Zset（有序集合）：\",\"a\":\"zset-有序集合\"},\"5329\":{\"h\":\"数据结构：\",\"a\":\"数据结构-4\"},\"5330\":{\"t\":\"Zset 类型的底层数据结构是由压缩列表或跳表实现的：\"},\"5331\":{\"t\":\"如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构；\"},\"5332\":{\"t\":\"如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构；\"},\"5333\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"5334\":{\"h\":\"应用场景：\",\"a\":\"应用场景-4\"},\"5335\":{\"t\":\"有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。\"},\"5336\":{\"h\":\"持久化\",\"a\":\"持久化\"},\"5337\":{\"t\":\"Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:\"},\"5338\":{\"t\":\"快照（snapshotting，RDB）\"},\"5339\":{\"t\":\"只追加文件（append-only file, AOF）\"},\"5340\":{\"t\":\"RDB 和 AOF 的混合持久化(Redis 4.0 新增)\"},\"5341\":{\"h\":\"什么是 RDB 持久化？\",\"a\":\"什么是-rdb-持久化\"},\"5342\":{\"t\":\"Redis 可以通过创建快照来获得存储在内存里面的数据在 某个时间点 上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\"},\"5343\":{\"t\":\"快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\"},\"5344\":{\"t\":\"save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。 \"},\"5345\":{\"h\":\"RDB 创建快照时会阻塞主线程吗？\",\"a\":\"rdb-创建快照时会阻塞主线程吗\"},\"5346\":{\"t\":\"Redis 提供了两个命令来生成 RDB 快照文件：\"},\"5347\":{\"t\":\"save : 同步保存操作，会阻塞 Redis 主线程；\"},\"5348\":{\"t\":\"bgsave : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。\"},\"5349\":{\"h\":\"什么是 AOF 持久化？\",\"a\":\"什么是-aof-持久化\"},\"5350\":{\"t\":\"与快照持久化相比，AOF 持久化的实时性更好。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化（Redis 6.0 之后已经默认是开启了），可以通过 appendonly 参数开启：\"},\"5351\":{\"t\":\"appendonly yes \"},\"5352\":{\"t\":\"开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到 AOF 缓冲区 server.aof_buf 中，然后再写入到 AOF 文件中（此时还在系统内核缓存区为同步到磁盘），最后再根据持久化方式（ fsync策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中的。\"},\"5353\":{\"t\":\"只有同步到磁盘中才算持久化保存了，否则依然存在数据丢失的风险，比如说：系统内核缓存区的数据还未同步，磁盘机器就宕机了，那这部分数据就算丢失了。\"},\"5354\":{\"t\":\"AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\"},\"5355\":{\"h\":\"AOF 工作基本流程是怎样的？\",\"a\":\"aof-工作基本流程是怎样的\"},\"5356\":{\"t\":\"AOF 持久化功能的实现可以简单分为 5 步：\"},\"5357\":{\"t\":\"命令追加（append） ：所有的写命令会追加到 AOF 缓冲区中。\"},\"5358\":{\"t\":\"文件写入（write） ：将 AOF 缓冲区的数据写入到 AOF 文件中。这一步需要调用write函数（系统调用），write将数据写入到了系统内核缓冲区之后直接返回了（延迟写）。注意！！！此时并没有同步到磁盘。\"},\"5359\":{\"t\":\"文件同步（fsync） ：AOF 缓冲区根据对应的持久化方式（ fsync 策略）向硬盘做同步操作。这一步需要调用 fsync 函数（系统调用）， fsync 针对单个文件操作，对其进行强制硬盘同步，fsync 将阻塞直到写入磁盘完成后返回，保证了数据持久化。\"},\"5360\":{\"t\":\"文件重写（rewrite） ：随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。\"},\"5361\":{\"t\":\"重启加载（load） ：当 Redis 重启时，可以加载 AOF 文件进行数据恢复。\"},\"5362\":{\"t\":\"Linux 系统直接提供了一些函数用于对文件和设备进行访问和控制，这些函数被称为 系统调用（syscall）。\"},\"5363\":{\"t\":\"这里对上面提到的一些 Linux 系统调用再做一遍解释：\"},\"5364\":{\"t\":\"write ：写入系统内核缓冲区之后直接返回（仅仅是写到缓冲区），不会立即同步到硬盘。虽然提高了效率，但也带来了数据丢失的风险。同步硬盘操作通常依赖于系统调度机制，Linux 内核通常为 30s 同步一次，具体值取决于写出的数据量和 I/O 缓冲区的状态。\"},\"5365\":{\"t\":\"fsync ： fsync用于强制刷新系统内核缓冲区（同步到到磁盘），确保写磁盘操作结束才会返回。\"},\"5366\":{\"t\":\"AOF 工作流程图如下：\"},\"5367\":{\"t\":\"AOF 工作基本流程\"},\"5368\":{\"h\":\"删除与淘汰策略\",\"a\":\"删除与淘汰策略\"},\"5369\":{\"h\":\"过期的数据的删除策略了解么？\",\"a\":\"过期的数据的删除策略了解么\"},\"5370\":{\"t\":\"如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？\"},\"5371\":{\"t\":\"常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：\"},\"5372\":{\"t\":\"惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。\"},\"5373\":{\"t\":\"定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。\"},\"5374\":{\"t\":\"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性/懒汉式删除 。\"},\"5375\":{\"t\":\"但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。\"},\"5376\":{\"t\":\"怎么解决这个问题呢？答案就是：Redis 内存淘汰机制。\"},\"5377\":{\"h\":\"Redis 内存淘汰机制了解么？\",\"a\":\"redis-内存淘汰机制了解么\"},\"5378\":{\"t\":\"相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?\"},\"5379\":{\"t\":\"Redis 提供 6 种数据淘汰策略：\"},\"5380\":{\"t\":\"volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰。\"},\"5381\":{\"t\":\"volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰。\"},\"5382\":{\"t\":\"volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰。\"},\"5383\":{\"t\":\"allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。\"},\"5384\":{\"t\":\"allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰。\"},\"5385\":{\"t\":\"no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\"},\"5386\":{\"t\":\"4.0 版本后增加以下两种：\"},\"5387\":{\"t\":\"volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰。\"},\"5388\":{\"t\":\"allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。\"},\"5389\":{\"h\":\"主从复制\",\"a\":\"主从复制\"},\"5390\":{\"h\":\"哨兵\",\"a\":\"哨兵\"},\"5391\":{\"h\":\"缓存雪崩/击穿/穿透\",\"a\":\"缓存雪崩-击穿-穿透\"},\"5392\":{\"h\":\"什么是缓存穿透？\",\"a\":\"什么是缓存穿透\"},\"5393\":{\"t\":\"缓存穿透说简单点就是大量请求的 key 是不合理的，根本不存在于缓存中，也不存在于数据库中 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"5394\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法\"},\"5395\":{\"t\":\"最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。\"},\"5396\":{\"t\":\"1）缓存无效 key\"},\"5397\":{\"t\":\"如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： SET key value EX 10086 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。\"},\"5398\":{\"t\":\"2）布隆过滤器\"},\"5399\":{\"t\":\"布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。\"},\"5400\":{\"t\":\"具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\"},\"5401\":{\"t\":\"但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。\"},\"5402\":{\"t\":\"为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！\"},\"5403\":{\"t\":\"我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：\"},\"5404\":{\"t\":\"使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。\"},\"5405\":{\"t\":\"根据得到的哈希值，在位数组中把对应下标的值置为 1。\"},\"5406\":{\"t\":\"我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：\"},\"5407\":{\"t\":\"对给定元素再次进行相同的哈希计算；\"},\"5408\":{\"t\":\"得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。\"},\"5409\":{\"t\":\"然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）\"},\"5410\":{\"h\":\"什么是缓存击穿？\",\"a\":\"什么是缓存击穿\"},\"5411\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"5412\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-1\"},\"5413\":{\"t\":\"设置热点数据永不过期或者过期时间比较长。\"},\"5414\":{\"t\":\"针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。\"},\"5415\":{\"t\":\"请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。\"},\"5416\":{\"h\":\"缓存穿透和缓存击穿有什么区别？\",\"a\":\"缓存穿透和缓存击穿有什么区别\"},\"5417\":{\"t\":\"缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。\"},\"5418\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。\"},\"5419\":{\"h\":\"什么是缓存雪崩？\",\"a\":\"什么是缓存雪崩\"},\"5420\":{\"t\":\"我发现缓存雪崩这名字起的有点意思，哈哈。\"},\"5421\":{\"t\":\"实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。\"},\"5422\":{\"t\":\"另外，缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。\"},\"5423\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-2\"},\"5424\":{\"t\":\"针对 Redis 服务不可用的情况：\"},\"5425\":{\"t\":\"采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。\"},\"5426\":{\"t\":\"限流，避免同时处理大量的请求。\"},\"5427\":{\"t\":\"针对热点缓存失效的情况：\"},\"5428\":{\"t\":\"设置不同的失效时间比如随机设置缓存的失效时间。\"},\"5429\":{\"t\":\"缓存永不失效（不太推荐，实用性太差）。\"},\"5430\":{\"t\":\"设置二级缓存。\"},\"5431\":{\"h\":\"缓存雪崩和缓存击穿有什么区别？\",\"a\":\"缓存雪崩和缓存击穿有什么区别\"},\"5432\":{\"t\":\"缓存雪崩和缓存击穿比较像，但缓存雪崩导致的原因是缓存中的大量或者所有数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。\"},\"5433\":{\"h\":\"redis 6.0 多线程的实现机制：\",\"a\":\"redis-6-0-多线程的实现机制\"},\"5434\":{\"t\":\"https://blog.csdn.net/zhizhengguan/article/details/120627481\"},\"5435\":{\"h\":\"Kafka\"},\"5436\":{\"h\":\"数据保存的策略\",\"a\":\"数据保存的策略\"},\"5437\":{\"t\":\"kafka 有两种数据保存策略:\"},\"5438\":{\"t\":\"1、按照过期时间保留\"},\"5439\":{\"t\":\"2、按照存储的消息大小保留\"},\"5440\":{\"t\":\"Kafka Broker默认的消息保留策略是：要么保留一定时间，要么保留到消息达到一定大小的字节数。\"},\"5441\":{\"t\":\"当消息达到设置的条件上限时，旧消息就会过期并被删除，所以，在任何时刻，可用消息的总量都不会超过配置参数所指定的大小。\"},\"5442\":{\"t\":\"topic可以配置自己的保留策略，可以将消息保留到不再使用他们为止。\"},\"5443\":{\"t\":\"因为在一个大文件里查找和删除消息是很费时的事，也容易出错，所以，分区被划分为若干个片段。默认情况下，每个片段包含1G或者一周的数据，以较小的那个为准。在broker往leader分区写入消息时，如果达到片段上限，就关闭当前文件，并打开一个新文件。当前正在写入数据的片段叫活跃片段。当所有片段都被写满时，会清除下一个分区片段的数据，如果配置的是7个片段，每天打开一个新片段，就会删除一个最老的片段，循环使用所有片段。\"},\"5444\":{\"t\":\"kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？ 这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。\"},\"5445\":{\"h\":\"分区策略\",\"a\":\"分区策略\"},\"5446\":{\"h\":\"生产者：\",\"a\":\"生产者\"},\"5447\":{\"t\":\"为什么要分区\"},\"5448\":{\"t\":\"多Partition分布式存储，利于集群数据的均衡。\"},\"5449\":{\"t\":\"并发读写，加快读写速度。\"},\"5450\":{\"t\":\"加快数据恢复的速率：当某台机器挂了，每个Topic仅需恢复一部分的数据，多机器并发。\"},\"5451\":{\"t\":\"分区的原则\"},\"5452\":{\"t\":\"指明partition的情况下，使用指定的partition；\"},\"5453\":{\"t\":\"没有指明partition，但是有key的情况下，将key的hash值与topic的partition数进行取余得到partition值；\"},\"5454\":{\"t\":\"既没有指定partition，也没有key的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与topic可用的partition数取余得到partition值，也就是常说的round-robin算法。\"},\"5455\":{\"t\":\"public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) { List<PartitionInfo> partitions = cluster.partitionsForTopic(topic); int numPartitions = partitions.size(); if (keyBytes == null) { //key为空时，获取一个自增的计数，然后对分区做取模得到分区编号 int nextValue = nextValue(topic); List<PartitionInfo> availablePartitions = cluster.availablePartitionsForTopic(topic); if (availablePartitions.size() > 0) { int part = Utils.toPositive(nextValue) % availablePartitions.size(); return availablePartitions.get(part).partition(); } else { // no partitions are available, give a non-available partition return Utils.toPositive(nextValue) % numPartitions; } } else { // hash the keyBytes to choose a partition // key不为空时，通过key的hash对分区取模（疑问：为什么这里不像上面那样，使用availablePartitions呢？） // 根据《Kafka权威指南》Page45理解：为了保证相同的键，总是能路由到固定的分区，如果使用可用分区，那么因为分区数变化，会导致相同的key，路由到不同分区 // 所以如果要使用key来映射分区，最好在创建主题的时候就把分区规划好 return Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions; } } private int nextValue(String topic) { //为每个topic维护了一个AtomicInteger对象，每次获取时+1 AtomicInteger counter = topicCounterMap.get(topic); if (null == counter) { counter = new AtomicInteger(ThreadLocalRandom.current().nextInt()); AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter); if (currentCounter != null) { counter = currentCounter; } } return counter.getAndIncrement(); } \"},\"5456\":{\"h\":\"消费者：\",\"a\":\"消费者\"},\"5457\":{\"t\":\"分区分配策略\"},\"5458\":{\"t\":\"一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及到partition的分配问题，即确定哪个partition由哪个consumer来消费。Kafka提供了3种消费者分区分配策略：RangeAssigor、RoundRobinAssignor、StickyAssignor。\"},\"5459\":{\"t\":\"PartitionAssignor接口用于用户定义实现分区分配算法，以实现Consumer之间的分区分配。消费组的成员订阅它们感兴趣的Topic并将这种订阅关系传递给作为订阅组协调者的Broker。协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者。Kafka默认采用RangeAssignor的分配算法。\"},\"5460\":{\"t\":\"RangeAssignor\"},\"5461\":{\"t\":\"RangeAssignor对每个Topic进行独立的分区分配。对于每一个Topic，首先对分区按照分区ID进行排序，然后订阅这个Topic的消费组的消费者再进行排序，之后尽量均衡的将分区分配给消费者。这里只能是尽量均衡，因为分区数可能无法被消费者数量整除，那么有一些消费者就会多分配到一些分区。分配示意图如下：\"},\"5462\":{\"t\":\"f4108e1816b3087f38b546372e214958.png\"},\"5463\":{\"t\":\"分区分配的算法如下：\"},\"5464\":{\"t\":\"@Override public Map<String, List<TopicPartition>> assign(Map<String, Integer> partitionsPerTopic, Map<String, Subscription> subscriptions) { Map<String, List<String>> consumersPerTopic = consumersPerTopic(subscriptions); Map<String, List<TopicPartition>> assignment = new HashMap<>(); for (String memberId : subscriptions.keySet()) assignment.put(memberId, new ArrayList<TopicPartition>()); //for循环对订阅的多个topic分别进行处理 for (Map.Entry<String, List<String>> topicEntry : consumersPerTopic.entrySet()) { String topic = topicEntry.getKey(); List<String> consumersForTopic = topicEntry.getValue(); Integer numPartitionsForTopic = partitionsPerTopic.get(topic); if (numPartitionsForTopic == null) continue; //对消费者进行排序 Collections.sort(consumersForTopic); //计算平均每个消费者分配的分区数 int numPartitionsPerConsumer = numPartitionsForTopic / consumersForTopic.size(); //计算平均分配后多出的分区数 int consumersWithExtraPartition = numPartitionsForTopic % consumersForTopic.size(); List<TopicPartition> partitions = AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic); for (int i = 0, n = consumersForTopic.size(); i < n; i++) { //计算第i个消费者，分配分区的起始位置 int start = numPartitionsPerConsumer * i + Math.min(i, consumersWithExtraPartition); //计算第i个消费者，分配到的分区数量 int length = numPartitionsPerConsumer + (i + 1 > consumersWithExtraPartition ? 0 : 1); assignment.get(consumersForTopic.get(i)).addAll(partitions.subList(start, start + length)); } } return assignment; } \"},\"5465\":{\"t\":\"这种分配方式明显的一个问题是随着消费者订阅的Topic的数量的增加，不均衡的问题会越来越严重，比如上图中4个分区3个消费者的场景，C0会多分配一个分区。如果此时再订阅一个分区数为4的Topic，那么C0又会比C1、C2多分配一个分区，这样C0总共就比C1、C2多分配两个分区了，而且随着Topic的增加，这个情况会越来越严重。分配结果：\"},\"5466\":{\"t\":\"eff9adb5a086691e56b5d68bec68ffcf.png\"},\"5467\":{\"t\":\"订阅2个Topic，每个Topic4个分区，共3个Consumer\"},\"5468\":{\"t\":\"C0：[T0P0，T0P1，T1P0，T1P1]\"},\"5469\":{\"t\":\"C1：[T0P2，T1P2]\"},\"5470\":{\"t\":\"C2：[T0P3，T1P3]\"},\"5471\":{\"t\":\"RoundRobinAssignor\"},\"5472\":{\"t\":\"RoundRobinAssignor的分配策略是将消费组内订阅的所有Topic的分区及所有消费者进行排序后尽量均衡的分配（RangeAssignor是针对单个Topic的分区进行排序分配的）。如果消费组内，消费者订阅的Topic列表是相同的（每个消费者都订阅了相同的Topic），那么分配结果是尽量均衡的（消费者之间分配到的分区数的差值不会超过1）。如果订阅的Topic列表是不同的，那么分配结果是不保证“尽量均衡”的，因为某些消费者不参与一些Topic的分配。\"},\"5473\":{\"t\":\"51b27d00cf50d9aca86e0934ab42a565.png\"},\"5474\":{\"t\":\"以上两个topic的情况，相比于之前RangeAssignor的分配策略，可以使分区分配的更均衡。不过考虑这种情况，假设有三个消费者分别为C0、C1、C2，有3个Topic T0、T1、T2，分别拥有1、2、3个分区，并且C0订阅T0，C1订阅T0和T1，C2订阅T0、T1、T2，那么RoundRobinAssignor的分配结果如下：\"},\"5475\":{\"t\":\"4e161a06a0afcae8d2c06603d676de4e.png\"},\"5476\":{\"t\":\"看上去分配已经尽量的保证均衡了，不过可以发现C2承担了4个分区的消费而C1订阅了T1，是不是把T1P1交给C1消费能更加的均衡呢？\"},\"5477\":{\"t\":\"StickyAssignor\"},\"5478\":{\"t\":\"StickyAssignor分区分配算法，目的是在执行一次新的分配时，能在上一次分配的结果的基础上，尽量少的调整分区分配的变动，节省因分区分配变化带来的开销。Sticky是“粘性的”，可以理解为分配结果是带“粘性的”——每一次分配变更相对上一次分配做最少的变动。其目标有两点：\"},\"5479\":{\"t\":\"分区的分配尽量的均衡。\"},\"5480\":{\"t\":\"每一次重分配的结果尽量与上一次分配结果保持一致。\"},\"5481\":{\"t\":\"当这两个目标发生冲突时，优先保证第一个目标。第一个目标是每个分配算法都尽量尝试去完成的，而第二个目标才真正体现出StickyAssignor特性的。\"},\"5482\":{\"t\":\"StickyAssignor算法比较复杂，下面举例来说明分配的效果（对比RoundRobinAssignor），前提条件：\"},\"5483\":{\"t\":\"有4个Topic：T0、T1、T2、T3，每个Topic有2个分区。\"},\"5484\":{\"t\":\"有3个Consumer：C0、C1、C2，所有Consumer都订阅了这4个分区。\"},\"5485\":{\"t\":\"eb5597ed0b81b03c762e54ff3f909492.png\"},\"5486\":{\"t\":\"上面红色的箭头代表的是有变动的分区分配，可以看出，StickyAssignor的分配策略，变动较小。\"},\"5487\":{\"t\":\"参考：https://blog.csdn.net/easylife206/article/details/124580641?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-124580641-blog-124349832.235^v28^pc_relevant_t0_download&spm=1001.2101.3001.4242.3&utm_relevant_index=7\"},\"5488\":{\"h\":\"kafka如何保证消息不被重复消费\",\"a\":\"kafka如何保证消息不被重复消费\"},\"5489\":{\"h\":\"原因\",\"a\":\"原因\"},\"5490\":{\"t\":\"（1）kafka有个offset的概念，当每个消息被写进去后，都有一个offset，代表他的序号，然后consumer消费该数据之后，隔一段时间，会把自己消费过的消息的offset提交一下，代表我已经消费过了。下次我要是重启，就会继续从上次消费到的offset来继续消费。但是当我们直接kill进程了，再重启。这会导致consumer有些消息处理了，但是没来得及提交offset。等重启之后，少数消息就会再次消费一次 （2）在Kafka中有一个Partition Balance机制，就是把多个Partition均衡的分配给多个消费者。消费端会从分配到的Partition里面去消费消息，如果消费者在默认的5分钟内没有处理完这一批消息。就会触发Kafka的Rebalance机制，从而导致offset自动提交失败。而Rebalance之后，消费者还是会从之前没提交的offset位置开始消费，从而导致消息重复消费。\"},\"5491\":{\"h\":\"解决方案\",\"a\":\"解决方案\"},\"5492\":{\"t\":\"开启kafka本身存在的幂等性：\"},\"5493\":{\"t\":\"在这里插入图片描述\"},\"5494\":{\"t\":\"注： 添加唯一ID，类似于数据库的主键，用于唯一标记一个消息。 ProducerID：#在每个新的Producer初始化时，会被分配一个唯一的PID SequenceNumber：#对于每个PID发送数据的每个Topic都对应一个从0开始单调递增的SN值。\"},\"5495\":{\"t\":\"将获取的唯一id存表，（利用mySQl的唯一键约束，或者redis天然的set结构）\"},\"5496\":{\"t\":\"参考：https://blog.csdn.net/m0_51167384/article/details/128106266?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&utm_relevant_index=8&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2Mjc4NDAvYXJ0aWNsZS9kZXRhaWxzLzc2NDM1Mzg1P3NwbT0xMDAxLjIxMDEuMzAwMS42NjUwLjEmdXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RVJhdGUtMS03NjQzNTM4NS1ibG9nLTExNzQxOTA1OC4yMzUlNUV2MjglNUVwY19yZWxldmFudF90MF9kb3dubG9hZCZkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VSYXRlLTEtNzY0MzUzODUtYmxvZy0xMTc0MTkwNTguMjM1JTVFdjI4JTVFcGNfcmVsZXZhbnRfdDBfZG93bmxvYWQmdXRtX3JlbGV2YW50X2luZGV4PTI%3D\"},\"5497\":{\"h\":\"如何保证消息的顺序性?\",\"a\":\"如何保证消息的顺序性\"},\"5498\":{\"h\":\"为什么要保证顺序？\",\"a\":\"为什么要保证顺序\"},\"5499\":{\"t\":\"消息队列中的若干消息如果是对同一个数据进行操作, 这些操作具有前后关系, 必须要按前后的顺序执行, 否则就会造成数据异常.\"},\"5500\":{\"h\":\"出现顺序错乱的场景：\",\"a\":\"出现顺序错乱的场景\"},\"5501\":{\"t\":\"第一种情况: 一个queue, 有多个consumer去消费, 这样就会造成顺序的错误, consumer从MQ里面读取数据是有序的, 但是每个consumer的执行时间是不固定的, 无法保证先读到消息的consumer一定先完成操作, 这样就会出现消息并没有按照顺序执行, 造成数据顺序错误。 \"},\"5502\":{\"t\":\"img\"},\"5503\":{\"t\":\"第二种情况: 一个queue对应一个consumer, 但是consumer里面进行了多线程消费, 这样也会造成消息消费顺序错误。 \"},\"5504\":{\"t\":\"img\"},\"5505\":{\"h\":\"如何保证消息的消费顺序？\",\"a\":\"如何保证消息的消费顺序\"},\"5506\":{\"t\":\"第一种方案: 拆分多个queue, 每一个queue一个consumer, 就是多一些queue而已, 确实是麻烦点; 这样也会造成吞吐量下降, 可以在消费者内部采用多线程的方式去消费。 \"},\"5507\":{\"t\":\"img\"},\"5508\":{\"t\":\"第二种方案: 就是一个queue对应一个consumer, 然后这个consumer内部用内存队列做排队, 然后分发给底层不同的worker来处理。 \"},\"5509\":{\"t\":\"img\"},\"5510\":{\"t\":\"参考：https://blog.csdn.net/qq_44901983/article/details/123416498\"},\"5511\":{\"h\":\"HTTP协议中为什么广泛使用的还是HTTP1.1？\"},\"5512\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"5513\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"5514\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"5515\":{\"h\":\"一、关于HTTP2\",\"a\":\"一、关于http2\"},\"5516\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"5517\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"5518\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"5519\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"5520\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"5521\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"5522\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"5523\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"5524\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"5525\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"5526\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"5527\":{\"h\":\"二、关于HTTP3\",\"a\":\"二、关于http3\"},\"5528\":{\"t\":\"具体的细节请移步：HTTP3协议\"},\"5529\":{\"h\":\"三、HTTP历史\",\"a\":\"三、http历史\"},\"5530\":{\"t\":\"随着网络技术的发展，1999 年设计的 HTTP/1.1 已经不能满足需求，所以 Google 在 2009 年设计了基于 TCP 的 SPDY，后来 SPDY 的开发组推动 SPDY 成为正式标准，不过最终没能通过。不过 SPDY 的开发组全程参与了 HTTP/2 的制定过程，参考了 SPDY 的很多设计，所以我们一般认为 SPDY 就是 HTTP/2 的前身。无论 SPDY 还是 HTTP/2，都是基于 TCP 的，TCP 与 UDP 相比效率上存在天然的劣势，所以 2013 年 Google 开发了基于 UDP 的名为 QUIC 的传输层协议，QUIC 全称 Quick UDP Internet Connections，希望它能替代 TCP，使得网页传输更加高效。后经提议，互联网工程任务组正式将基于 QUIC 协议的 HTTP （HTTP over QUIC）重命名为 HTTP/3。\"},\"5531\":{\"h\":\"三、原因\",\"a\":\"三、原因\"},\"5532\":{\"t\":\"小羊看来网站上大家的讨论，总结了下面的几点。\"},\"5533\":{\"t\":\"1.至少目前来看，要启用http2必须使用OpenSSL/ssl加密协议，而且在对传输速率要求不高的情况下，HTTP1.1完全可以hold住任何场景。所以还是需要等待催生http2不得不出的时机到来。\"},\"5534\":{\"t\":\"2.HTTP 1.1 用着也还行，性能不好，但也不算差。\"},\"5535\":{\"t\":\"3.HTTP 3 出来得太快了，没有给HTTP 2留下发挥时间，HTTP 2还没来得及全面推广，HTTP 3就横空出世了，既然有更好的可以用，有什么理由还升HTTP 2呢？\"},\"5536\":{\"h\":\"HTTP\"},\"5537\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"5538\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"5539\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"5540\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"5541\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"5542\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"5543\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"5544\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"5545\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"5546\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"5547\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"5548\":{\"h\":\"计算机网络\"},\"5549\":{\"h\":\"键入网址到网页显示，期间发生了什么？\",\"a\":\"键入网址到网页显示-期间发生了什么\"},\"5550\":{\"t\":\"img\"},\"5551\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"5552\":{\"t\":\"总体来说分为以下几个过程:\"},\"5553\":{\"t\":\"DNS 解析\"},\"5554\":{\"t\":\"TCP 连接\"},\"5555\":{\"t\":\"发送 HTTP 请求\"},\"5556\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"5557\":{\"t\":\"浏览器解析渲染页面\"},\"5558\":{\"t\":\"连接结束\"},\"5559\":{\"h\":\"OSI 七层模型\",\"a\":\"osi-七层模型\"},\"5560\":{\"t\":\"OSI 七层模型\"},\"5561\":{\"h\":\"TCP/IP 四层模型\",\"a\":\"tcp-ip-四层模型\"},\"5562\":{\"t\":\"img\"},\"5563\":{\"h\":\"TCP\",\"a\":\"tcp\"},\"5564\":{\"h\":\"IP\",\"a\":\"ip\"},\"5565\":{\"h\":\"UDP\",\"a\":\"udp\"},\"5566\":{\"h\":\"ARP\",\"a\":\"arp\"},\"5567\":{\"t\":\"ARP 协议，全称 地址解析协议（Address Resolution Protocol），它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。\"},\"5568\":{\"t\":\"ARP 协议工作时有一个大前提，那就是 ARP 表。\"},\"5569\":{\"t\":\"在一个局域网内，每个网络设备都自己维护了一个 ARP 表，ARP 表记录了某些其他网络设备的 IP 地址-MAC 地址映射关系，该映射关系以 <IP, MAC, TTL> 三元组的形式存储。其中，TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。\"},\"5570\":{\"t\":\"ARP 的工作原理将分两种场景讨论：\"},\"5571\":{\"t\":\"同一局域网内的 MAC 寻址；\"},\"5572\":{\"t\":\"从一个局域网到另一个局域网中的网络设备的寻址。\"},\"5573\":{\"h\":\"同一局域网内的 MAC 寻址\",\"a\":\"同一局域网内的-mac-寻址\"},\"5574\":{\"t\":\"假设当前有如下场景：IP 地址为137.196.7.23的主机 A，想要给同一局域网内的 IP 地址为137.196.7.14主机 B，发送 IP 数据报文。\"},\"5575\":{\"t\":\"再次强调，当主机发送 IP 数据报文时（网络层），仅知道目的地的 IP 地址，并不清楚目的地的 MAC 地址，而 ARP 协议就是解决这一问题的。\"},\"5576\":{\"t\":\"为了达成这一目标，主机 A 将不得不通过 ARP 协议来获取主机 B 的 MAC 地址，并将 IP 报文封装成链路层帧，发送到下一跳上。在该局域网内，关于此将按照时间顺序，依次发生如下事件：\"},\"5577\":{\"t\":\"主机 A 检索自己的 ARP 表，发现 ARP 表中并无主机 B 的 IP 地址对应的映射条目，也就无从知道主机 B 的 MAC 地址。\"},\"5578\":{\"t\":\"主机 A 将构造一个 ARP 查询分组，并将其广播到所在的局域网中。\"},\"5579\":{\"t\":\"ARP 分组是一种特殊报文，ARP 分组有两类，一种是查询分组，另一种是响应分组，它们具有相同的格式，均包含了发送和接收的 IP 地址、发送和接收的 MAC 地址。当然了，查询分组中，发送的 IP 地址，即为主机 A 的 IP 地址，接收的 IP 地址即为主机 B 的 IP 地址，发送的 MAC 地址也是主机 A 的 MAC 地址，但接收的 MAC 地址绝不会是主机 B 的 MAC 地址（因为这正是我们要问询的！），而是一个特殊值——FF-FF-FF-FF-FF-FF，之前说过，该 MAC 地址是广播地址，也就是说，查询分组将广播给该局域网内的所有设备。\"},\"5580\":{\"t\":\"主机 A 构造的查询分组将在该局域网内广播，理论上，每一个设备都会收到该分组，并检查查询分组的接收 IP 地址是否为自己的 IP 地址，如果是，说明查询分组已经到达了主机 B，否则，该查询分组对当前设备无效，丢弃之。\"},\"5581\":{\"t\":\"主机 B 收到了查询分组之后，验证是对自己的问询，接着构造一个 ARP 响应分组，该分组的目的地只有一个——主机 A，发送给主机 A。同时，主机 B 提取查询分组中的 IP 地址和 MAC 地址信息，在自己的 ARP 表中构造一条主机 A 的 IP-MAC 映射记录。\"},\"5582\":{\"t\":\"ARP 响应分组具有和 ARP 查询分组相同的构造，不同的是，发送和接受的 IP 地址恰恰相反，发送的 MAC 地址为发送者本身，目标 MAC 地址为查询分组的发送者，也就是说，ARP 响应分组只有一个目的地，而非广播。\"},\"5583\":{\"t\":\"主机 A 终将收到主机 B 的响应分组，提取出该分组中的 IP 地址和 MAC 地址后，构造映射信息，加入到自己的 ARP 表中。\"},\"5584\":{\"t\":\"总结来说，ARP 协议是一个广播问询，单播响应协议。\"},\"5585\":{\"h\":\"不同局域网内的 MAC 寻址\",\"a\":\"不同局域网内的-mac-寻址\"},\"5586\":{\"t\":\"更复杂的情况是，发送主机 A 和接收主机 B 不在同一个子网中，假设一个一般场景，两台主机所在的子网由一台路由器联通。这里需要注意的是，一般情况下，我们说网络设备都有一个 IP 地址和一个 MAC 地址，这里说的网络设备，更严谨的说法应该是一个接口。路由器作为互联设备，具有多个接口，每个接口同样也应该具备不重复的 IP 地址和 MAC 地址。因此，在讨论 ARP 表时，路由器的多个接口都各自维护一个 ARP 表，而非一个路由器只维护一个 ARP 表。\"},\"5587\":{\"t\":\"接下来，回顾同一子网内的 MAC 寻址，如果主机 A 发送一个广播问询分组，那么 A 所在子网内的所有设备（接口）都将不会捕获该分组，因为该分组的目的 IP 地址在另一个子网中，本子网内不会有设备成功接收。那么，主机 A 应该发送怎样的查询分组呢？整个过程按照时间顺序发生的事件如下：\"},\"5588\":{\"t\":\"主机 A 查询 ARP 表，期望寻找到目标路由器的本子网接口的 MAC 地址。\"},\"5589\":{\"t\":\"目标路由器指的是，根据目的主机 B 的 IP 地址，分析出 B 所在的子网，能够把报文转发到 B 所在子网的那个路由器。\"},\"5590\":{\"t\":\"主机 A 未能找到目标路由器的本子网接口的 MAC 地址，将采用 ARP 协议，问询到该 MAC 地址，由于目标接口与主机 A 在同一个子网内，该过程与同一局域网内的 MAC 寻址相同。\"},\"5591\":{\"t\":\"主机 A 获取到目标接口的 MAC 地址，先构造 IP 数据报，其中源 IP 是 A 的 IP 地址，目的 IP 地址是 B 的 IP 地址，再构造链路层帧，其中源 MAC 地址是 A 的 MAC 地址，目的 MAC 地址是本子网内与路由器连接的接口的 MAC 地址。主机 A 将把这个链路层帧，以单播的方式，发送给目标接口。\"},\"5592\":{\"t\":\"目标接口接收到了主机 A 发过来的链路层帧，解析，根据目的 IP 地址，查询转发表，将该 IP 数据报转发到与主机 B 所在子网相连的接口上。\"},\"5593\":{\"t\":\"到此，该帧已经从主机 A 所在的子网，转移到了主机 B 所在的子网了。\"},\"5594\":{\"t\":\"路由器接口查询 ARP 表，期望寻找到主机 B 的 MAC 地址。\"},\"5595\":{\"t\":\"路由器接口如未能找到主机 B 的 MAC 地址，将采用 ARP 协议，广播问询，单播响应，获取到主机 B 的 MAC 地址。\"},\"5596\":{\"t\":\"路由器接口将对 IP 数据报重新封装成链路层帧，目标 MAC 地址为主机 B 的 MAC 地址，单播发送，直到目的地。\"},\"5597\":{\"h\":\"HTTP\",\"a\":\"http\"},\"5598\":{\"h\":\"HTTP 状态码有哪些？\",\"a\":\"http-状态码有哪些\"},\"5599\":{\"t\":\"HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。\"},\"5600\":{\"t\":\"常见 HTTP 状态码\"},\"5601\":{\"h\":\"HTTP/1.0 和 HTTP/1.1 有什么区别？\",\"a\":\"http-1-0-和-http-1-1-有什么区别\"},\"5602\":{\"t\":\"连接方式 : HTTP/1.0 为短连接，HTTP/1.1 支持长连接。\"},\"5603\":{\"t\":\"状态响应码 : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，100 (Continue)——在请求大资源前的预热请求，206 (Partial Content)——范围请求的标识码，409 (Conflict)——请求与当前资源的规定冲突，410 (Gone)——资源已被永久转移，而且没有任何已知的转发地址。\"},\"5604\":{\"t\":\"缓存机制 : 在 HTTP/1.0 中主要使用 Header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP/1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。\"},\"5605\":{\"t\":\"Host 头（Host Header）处理 :HTTP/1.1 引入了 Host 头字段，允许在同一 IP 地址上托管多个域名，从而支持虚拟主机的功能。而 HTTP/1.0 没有 Host 头字段，无法实现虚拟主机。\"},\"5606\":{\"h\":\"HTTP/1.1 和 HTTP/2.0 有什么区别？\",\"a\":\"http-1-1-和-http-2-0-有什么区别\"},\"5607\":{\"t\":\"IO 多路复用（Multiplexing） ：HTTP/2.0 在同一连接上可以同时传输多个请求和响应（可以看作是 HTTP/1.1 中长链接的升级版本）。HTTP/1.1 则使用串行方式，每个请求和响应都需要独立的连接。这使得 HTTP/2.0 在处理多个请求时更加高效，减少了网络延迟和提高了性能。\"},\"5608\":{\"t\":\"二进制帧（Binary Frames） ：HTTP/2.0 使用二进制帧进行数据传输，而 HTTP/1.1 则使用文本格式的报文。二进制帧更加紧凑和高效，减少了传输的数据量和带宽消耗。\"},\"5609\":{\"t\":\"头部压缩（Header Compression） ：HTTP/1.1 支持Body压缩，Header不支持压缩。HTTP/2.0 支持对Header压缩，减少了网络开销。\"},\"5610\":{\"t\":\"服务器推送（Server Push）：HTTP/2.0 支持服务器推送，可以在客户端请求一个资源时，将其他相关资源一并推送给客户端，从而减少了客户端的请求次数和延迟。而 HTTP/1.1 需要客户端自己发送请求来获取相关资源。\"},\"5611\":{\"h\":\"HTTP/2.0 和 HTTP/3.0 有什么区别？\",\"a\":\"http-2-0-和-http-3-0-有什么区别\"},\"5612\":{\"t\":\"传输协议 ：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP/3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\"},\"5613\":{\"t\":\"连接建立 ：HTTP/2.0 需要经过经典的 TCP 三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP/3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。\"},\"5614\":{\"t\":\"队头阻塞 ：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。\"},\"5615\":{\"h\":\"HTTPS\",\"a\":\"https\"},\"5616\":{\"h\":\"HTTP 和 HTTPS 有什么区别？\",\"a\":\"http-和-https-有什么区别\"},\"5617\":{\"t\":\"端口号 ：HTTP 默认是 80，HTTPS 默认是 443。\"},\"5618\":{\"t\":\"URL 前缀 ：HTTP 的 URL 前缀是 http://，HTTPS 的 URL 前缀是 https://。\"},\"5619\":{\"t\":\"安全性和资源消耗 ： HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。\"},\"5620\":{\"t\":\"SEO（搜索引擎优化） ：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。\"},\"5621\":{\"h\":\"DNS\",\"a\":\"dns\"},\"5622\":{\"t\":\"DNS 中的域名都是用句点来分隔的，比如 www.server.com，这里的句点代表了不同层次之间的界限。\"},\"5623\":{\"t\":\"在域名中，越靠右的位置表示其层级越高。\"},\"5624\":{\"t\":\"实际上域名最后还有一个点，比如 www.server.com.，这个最后的一个点代表根域名。\"},\"5625\":{\"t\":\"也就是，. 根域是在最顶层，它的下一层就是 .com 顶级域，再下面是 server.com。\"},\"5626\":{\"t\":\"所以域名的层级关系类似一个树状结构：\"},\"5627\":{\"t\":\"根 DNS 服务器（.）\"},\"5628\":{\"t\":\"顶级域 DNS 服务器（.com）\"},\"5629\":{\"t\":\"权威 DNS 服务器（server.com）\"},\"5630\":{\"t\":\"根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。\"},\"5631\":{\"t\":\"这样一来，任何 DNS 服务器就都可以找到并访问根域 DNS 服务器了。\"},\"5632\":{\"t\":\"因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。\"},\"5633\":{\"h\":\"域名解析的工作流程：\",\"a\":\"域名解析的工作流程\"},\"5634\":{\"t\":\"客户端首先会发出一个 DNS 请求，问 www.server.com 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。\"},\"5635\":{\"t\":\"本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 www.server.com，则它直接返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 www.server.com 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。\"},\"5636\":{\"t\":\"根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“www.server.com 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”\"},\"5637\":{\"t\":\"本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 www.server.com 的 IP 地址吗？”\"},\"5638\":{\"t\":\"顶级域名服务器说：“我给你负责 www.server.com 区域的权威 DNS 服务器的地址，你去问它应该能问到”。\"},\"5639\":{\"t\":\"本地 DNS 于是转向问权威 DNS 服务器：“老三，www.server.com对应的IP是啥呀？” server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。\"},\"5640\":{\"t\":\"权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。\"},\"5641\":{\"t\":\"本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。\"},\"5642\":{\"h\":\"面试\"},\"5643\":{\"h\":\"面试：\",\"a\":\"面试\"},\"5644\":{\"h\":\"一、中科全安\",\"a\":\"一、中科全安\"},\"5645\":{\"h\":\"一面：HR面，态度算好的（5分钟）\",\"a\":\"一面-hr面-态度算好的-5分钟\"},\"5646\":{\"t\":\"1.介绍公司\"},\"5647\":{\"t\":\"2.问啥时候能来实习\"},\"5648\":{\"t\":\"3.问你能接受加班吗\"},\"5649\":{\"t\":\"4.问你的期望薪资多少\"},\"5650\":{\"t\":\"5.问我想听听你对加班什么看法\"},\"5651\":{\"t\":\"6.最后让明天面试，我说不行，能最晚啥时候，她说最晚周五下午，电话面试\"},\"5652\":{\"h\":\"二面：面试官狗叫（15分钟 ）\",\"a\":\"二面-面试官狗叫-15分钟\"},\"5653\":{\"t\":\"面试官的态度极其恶心，什么垃圾玩意，老子是来面试的，不是听狗叫的，就算老子啥都不会也不去你这个垃圾公司。\"},\"5654\":{\"t\":\"1.自我介绍，直接打断说只介绍自己会的，项目中的技术栈\"},\"5655\":{\"t\":\"2.问我熟悉哪些框架，我说Spring、Mysql，其他都是了解，熟悉的是Java基础和Mysql，他就非得问SpringBoot，离谱\"},\"5656\":{\"t\":\"3.问Kafka的分区、主题了解吗，我就是了解，然后他也说了你只是了解\"},\"5657\":{\"t\":\"4.问ES了解吗（我只是了解他是干啥的，其它都是API）\"},\"5658\":{\"t\":\"5.问SpringBoot异常怎么处理（这个紧张忘了，只是说在一个包里要继承一个异常的接口）\"},\"5659\":{\"t\":\"6.问SpringBoot的核心配置文件以及它们的区别\"},\"5660\":{\"t\":\"7.问SpringBoot的起步依赖starter有哪些以及作用（他说你了解的很少，我都说了了解Mysql、Spring，你他妈的非得问）\"},\"5661\":{\"t\":\"8.问SpringBoot 中的监视器是什么（我说不了解）\"},\"5662\":{\"t\":\"9.问Swagger用过么、它用来做什么\"},\"5663\":{\"t\":\"10.问什么是 WebSockets（我说只了解它是用来作为即时通讯的协议）\"},\"5664\":{\"t\":\"11.问什么是 FreeMarker 模板（这个离谱，说完他是干啥的以及插值表达式，他问还有呢？他妈的）\"},\"5665\":{\"t\":\"12.问C/S 、B/S模式\"},\"5666\":{\"t\":\"13.问String、StringBuilder、StringBuffer 的区别\"},\"5667\":{\"t\":\"14.问了MySQL的存储引擎\"},\"5668\":{\"t\":\"15.问了 InnoDB 和 MyISAM 的比较\"},\"5669\":{\"t\":\"16.问了建立索引的原则\"},\"5670\":{\"t\":\"17.问了三大范式\"},\"5671\":{\"t\":\"18.问了Jdbc的防止sql注入（我说不了解）\"},\"5672\":{\"t\":\"19.反问（我说实习生的日常工作安排是什么，他妈的开始狗叫，想打他）\"},\"5673\":{\"t\":\"20.最后问我啥时能来实习（老子不去）\"},\"5674\":{\"h\":\"二、联想\",\"a\":\"二、联想\"},\"5675\":{\"h\":\"一面：（16分钟）\",\"a\":\"一面-16分钟\"},\"5676\":{\"t\":\"1.说一下红黑树（吧啦吧啦，讲了下红黑树的特性、又扯到HashMap底层用到了红黑树、突然说到MySQLB+树用到了红黑树）\"},\"5677\":{\"t\":\"2.讲一下线程池（这个熟，线程池的7大参数以及具体用法）\"},\"5678\":{\"t\":\"3.讲一下为什么用线程池（两点原因）\"},\"5679\":{\"t\":\"4.讲一下线程池参数MaxSize满了你会怎么做（我说实现自定义处理策略，可以选择移除等待队列中的最不常用的线程）\"},\"5680\":{\"t\":\"5.看我熟悉Python（这里没听清发音，重复确认了好几遍哈哈哈哈哈哈哈），问我生成器用过没（我说是生成随机数吗，面试官说不是，是，还耐心给我解答了是用来循环遍历的）\"},\"5681\":{\"t\":\"5.项目拷打环节\"},\"5682\":{\"t\":\"1）讲一下你的项目经验（从项目的整体架构到具体功能实现细节都说了）\"},\"5683\":{\"t\":\"2）我说了做的一些优化（存储到阿里云OSS）\"},\"5684\":{\"t\":\"3）突然电话断了，在那我俩喂喂喂了好几声，面试官又给我打了过来，问我同步和异步怎么实现的（加@Async注解）\"},\"5685\":{\"t\":\"4）问异步调用后，做了些什么（第三方接口审核完后传来一个statusCode200，表示审核成功存储到数据库）\"},\"5686\":{\"t\":\"6.反问环节\"},\"5687\":{\"t\":\"1）实习生的日常工作安排（面试官说了早上9：30上班，下午6：30下班，八小时工作制，中午休息一小时）\"},\"5688\":{\"t\":\"2）技术栈是什么（面试官说这有Java和Python，你来就是Java）\"},\"5689\":{\"h\":\"三、中国邮政储蓄银行\",\"a\":\"三、中国邮政储蓄银行\"},\"5690\":{\"h\":\"一面：结构化面试+技术面（20分钟，五个面试官）\",\"a\":\"一面-结构化面试-技术面-20分钟-五个面试官\"},\"5691\":{\"t\":\"1.先做一个两分钟以内的自我介绍（对邮储的看法，对未来工作的看法）\"},\"5692\":{\"t\":\"2.对工作地点的看法\"},\"5693\":{\"t\":\"3.有没有参加过团体活动\"},\"5694\":{\"t\":\"4.数学建模比赛中遇到的最大困难\"},\"5695\":{\"t\":\"5.开始技术面试了，面试官说看你简历都是Java相关，讲一下Spring Cloud你用过的组件\"},\"5696\":{\"t\":\"6.ConcurrentHashMap为什么用红黑树\"},\"5697\":{\"t\":\"7.看你项目中用到了网关，是怎么实现的\"},\"5698\":{\"t\":\"8.都说CAS要比synchronized好，但是CAS也有自己的问题，你能说一下有哪些问题吗\"},\"5699\":{\"t\":\"9.另一个面试官问看你简历有高并发系统的东西，你有实际的项目经验吗（这个我说就是了解，实际项目是自学的，实际项目经验都是人工智能相关的）\"},\"5700\":{\"t\":\"10.最后女的HR问看你成绩这么好，没有保研吗\"},\"5701\":{\"t\":\"11.讲一下研究生的论文成果\"},\"5702\":{\"t\":\"12.研究生的专业成绩排名，有获得过奖学金吗\"},\"5703\":{\"t\":\"13.最后问有offer吗，方便说一下是哪个公司吗\"},\"5704\":{\"t\":\"另：\"},\"5705\":{\"t\":\"1.对工作地点的看法\"},\"5706\":{\"t\":\"2.CPU达到100%的时候你如何排查问题\"},\"5707\":{\"t\":\"3.新生代和老年代数据是如何流动的\"},\"5708\":{\"t\":\"4.Linux如何给文件权限\"},\"5709\":{\"t\":\"5.想从实习中收获什么\"},\"5710\":{\"t\":\"6.看你是院研副部长，如果负责的活动和实验室科研冲突了怎么平衡\"},\"5711\":{\"t\":\"7.你平常也这样扎头发吗\"},\"5712\":{\"h\":\"来看头条\"},\"5713\":{\"h\":\"十二：项目\",\"a\":\"十二-项目\"},\"5714\":{\"t\":\"开发技术：Spring Cloud + Spring Boot + MybatisPlus + Redis + mysql + Mongodb + Zookeeper + kafka + ElasticSearch + Docker + 第三方技术阿里云OSS;\"},\"5715\":{\"t\":\"项目背景：”来看头条“ 项目类似于今日头条，是一个新闻资讯类项目。该项目由用户端和自媒体端组成。在用户端，实现了用户通过app端登录功能、浏览文章功能、搜索文章功能、用户历史记录功能。在自媒体端，实现了自媒体管理员登录功能、发布文章功能、删除文章功能、上传素材功能、文章内容审核功能\"},\"5716\":{\"t\":\"**项目重难点：**网关搭建；文章详情静态化及存储；文章自动审核及延迟发布；分布式锁解决集群下的方法抢占执行；热点文章实时计算\"},\"5717\":{\"t\":\"技术栈的具体应用：\"},\"5718\":{\"t\":\"Spring-Cloud-Gateway : 微服务之前架设的网关服务，实现服务注册中的API请求路由，以及控制流速控制和熔断处理都是常用的架构手段，而这些功能Gateway天然支持\"},\"5719\":{\"t\":\"运用Spring Boot快速开发框架，构建项目工程；并结合Spring Cloud全家桶技术，实现app后端、自媒体等微服务。\"},\"5720\":{\"t\":\"运用Spring Cloud Alibaba Nacos作为项目中的注册中心和配置中心\"},\"5721\":{\"t\":\"运用mybatis-plus作为持久层提升开发效率\"},\"5722\":{\"t\":\"采用kafka作为消息服务中间件，把自媒体文章上下架放进消息队列；通过用户的行为（点赞、评论、喜欢）实时记录用户数据，通过kafkaStream流式计算最新的数据；与客户端系统消息通知\"},\"5723\":{\"t\":\"运用Redis缓存技术，实现热数据的计算，提升系统性能指标，同时作为消息中间件异步消费任务。\"},\"5724\":{\"t\":\"使用Mysql存储用户数据，以保证上层数据查询的高性能\"},\"5725\":{\"t\":\"使用Mongo存储用户历史记录数据，以保证用户热数据高扩展和高性能指标\"},\"5726\":{\"t\":\"运用AI技术，来完成系统自动化功能，以提升效率及节省成本。比如文章审核\"},\"5727\":{\"h\":\"优化：\",\"a\":\"优化\"},\"5728\":{\"h\":\"（1）优化一\",\"a\":\"_1-优化一\"},\"5729\":{\"t\":\"缺陷 ：写操作（定时刷新）比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。\"},\"5730\":{\"t\":\"解决办法：\"},\"5731\":{\"t\":\"数据库和缓存数据强一致场景 ：更新 db 的时候同样更新 cache，不过我们需要加一个分布式锁来保证更新 cache 的时候不存在线程安全问题。\"},\"5732\":{\"h\":\"（2）优化二\",\"a\":\"_2-优化二\"},\"5733\":{\"t\":\"缺陷：消费者丢失消息的情况\"},\"5734\":{\"t\":\"我们知道消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。偏移量（offset)表示 Consumer 当前消费到的 Partition(分区)的所在的位置。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。\"},\"5735\":{\"t\":\"当消费者拉取到了分区的某个消息之后，消费者会自动提交了 offset。自动提交的话会有一个问题，试想一下，当消费者刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。\"},\"5736\":{\"t\":\"解决办法:\"},\"5737\":{\"t\":\"我们手动关闭自动提交 offset，每次在真正消费完消息之后再自己手动提交 offset 。 细心的朋友一定会发现，这样会带来消息被重新消费的问题。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。\"},\"5738\":{\"h\":\"（3）优化三\",\"a\":\"_3-优化三\"},\"5739\":{\"t\":\"存储技术选型优化：\"},\"5740\":{\"t\":\"MinIO：\"},\"5741\":{\"t\":\"AliyunOSS：\"},\"5742\":{\"h\":\"（4）优化四\",\"a\":\"_4-优化四\"},\"5743\":{\"t\":\"缺陷：对于变量存在多线程并发竞争\"},\"5744\":{\"t\":\"解决办法：\"},\"5745\":{\"t\":\"为变量设置ThreadLocal。\"},\"5746\":{\"h\":\"身份验证怎么做的？\",\"a\":\"身份验证怎么做的\"},\"5747\":{\"t\":\"AuthorizedFilter + AppJwtUtil \"},\"5748\":{\"t\":\"用户向服务器发送用户名、密码以及验证码用于登陆系统。用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录。\"},\"5749\":{\"t\":\"如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT。\"},\"5750\":{\"t\":\"用户以后每次向后端发请求都在 Header 中带上这个 JWT ，再次进入网关开始访问，网关过滤器接收用户携带的TOKEN。\"},\"5751\":{\"t\":\"服务端检查 JWT 并从中获取用户相关信息。网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误。\"},\"5752\":{\"t\":\"两点建议：\"},\"5753\":{\"t\":\"建议将 JWT 存放在 localStorage 中，放在 Cookie 中会有 CSRF 风险。\"},\"5754\":{\"t\":\"请求服务端并携带 JWT 的常见做法是将其放在 HTTP Header 的 Authorization 字段中（Authorization: Bearer Token）。\"},\"5755\":{\"t\":\"乐观锁：\"},\"5756\":{\"t\":\"使用版本号。\"},\"5757\":{\"h\":\"网关搭建 ：\",\"a\":\"网关搭建\"},\"5758\":{\"t\":\"思路分析：\"},\"5759\":{\"t\":\"用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录\"},\"5760\":{\"t\":\"用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户\"},\"5761\":{\"t\":\"用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN\"},\"5762\":{\"t\":\"网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误\"},\"5763\":{\"t\":\"具体实现：\"},\"5764\":{\"t\":\"第一：\"},\"5765\":{\"t\":\"​ 在认证过滤器中需要用到jwt的解析，所以需要把工具类拷贝一份到网关微服务\"},\"5766\":{\"t\":\"第二：\"},\"5767\":{\"t\":\"​ 在网关微服务中新建全局过滤器\"},\"5768\":{\"h\":\"文章详情静态化及存储：\",\"a\":\"文章详情静态化及存储\"},\"5769\":{\"t\":\"文章详情静态化：\"},\"5770\":{\"t\":\"​ FreeMarker 是一款模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。\"},\"5771\":{\"t\":\"​ 模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。\"},\"5772\":{\"t\":\"存储：AliyunOSS\"},\"5773\":{\"t\":\"对象存储可提供更好的数据保护，加密、保护敏感数据。\"},\"5774\":{\"h\":\"文章自动审核及延迟发布：\",\"a\":\"文章自动审核及延迟发布\"},\"5775\":{\"t\":\"文章自动审核：\"},\"5776\":{\"t\":\"1 自媒体端发布文章后，开始审核文章（异步线程的方式审核文章，在自动审核的方法上加上@Async注解（标明要异步调用），在自媒体引导类中使用@EnableAsync注解开启异步调用）\"},\"5777\":{\"t\":\"2 审核的主要是审核文章的内容（文本内容和图片）\"},\"5778\":{\"t\":\"3 借助第三方提供的接口审核文本\"},\"5779\":{\"t\":\"4 借助第三方提供的接口审核图片，由于图片存储到OSS中，需要先下载才能审核\"},\"5780\":{\"t\":\"5 如果审核失败，则需要修改自媒体文章的状态，status:2 审核失败 status:3 转到人工审核\"},\"5781\":{\"t\":\"6 如果审核成功，则需要在文章微服务中创建app端需要的文章：\"},\"5782\":{\"t\":\"​ 在文章审核成功以后需要在app的article库中新增文章数据：\"},\"5783\":{\"t\":\"​ 保存文章信息 ap_article\"},\"5784\":{\"t\":\"​ 保存文章配置信息 ap_article_config\"},\"5785\":{\"t\":\"​ 保存文章内容 ap_article_content\"},\"5786\":{\"t\":\"延迟发布：\"},\"5787\":{\"t\":\"redis实现：zset数据类型的去重有序（分数排序）特点进行延迟。例如：时间戳作为score进行排序\"},\"5788\":{\"t\":\"实现思路：\"},\"5789\":{\"t\":\"问题思路：\"},\"5790\":{\"t\":\"1.为什么任务需要存储在数据库中？\"},\"5791\":{\"t\":\"延迟任务是一个通用的服务，任何需要延迟得任务都可以调用该服务，需要考虑数据持久化的问题，存储数据库中是一种数据安全的考虑。\"},\"5792\":{\"t\":\"2.为什么redis中使用两种数据类型，list和zset？\"},\"5793\":{\"t\":\"效率问题，算法的时间复杂度\"},\"5794\":{\"t\":\"3.在添加zset数据的时候，为什么不需要预加载？\"},\"5795\":{\"t\":\"任务模块是一个通用的模块，项目中任何需要延迟队列的地方，都可以调用这个接口，要考虑到数据量的问题，如果数据量特别大，为了防止阻塞，只需要把未来几分钟要执行的数据存入缓存即可。\"},\"5796\":{\"t\":\"实现：\"},\"5797\":{\"t\":\"延迟队列服务提供对外接口：提供远程的feign接口\"},\"5798\":{\"t\":\"发布文章集成添加延迟队列接口\"},\"5799\":{\"t\":\"修改发布文章代码：把之前的异步调用修改为调用延迟任务\"},\"5800\":{\"t\":\"消费任务进行审核文章\"},\"5801\":{\"t\":\"4.为什么选用redis作为消息队列？\"},\"5802\":{\"t\":\"把 Redis 当作队列来使用时，会面临的 2 个问题：\"},\"5803\":{\"t\":\"Redis 本身可能会丢数据；\"},\"5804\":{\"t\":\"面对消息挤压，内存资源会紧张；\"},\"5805\":{\"t\":\"所以，能不能将 Redis 作为消息队列来使用，关键看你的业务场景：\"},\"5806\":{\"t\":\"如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。\"},\"5807\":{\"t\":\"如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。\"},\"5808\":{\"h\":\"分布式锁解决集群下的方法抢占执行：\",\"a\":\"分布式锁解决集群下的方法抢占执行\"},\"5809\":{\"t\":\"问题描述：\"},\"5810\":{\"t\":\"启动两台heima-leadnews-schedule服务，每台服务都会去执行refresh定时任务方法\"},\"5811\":{\"t\":\"分布式锁：\"},\"5812\":{\"t\":\"控制分布式系统有序的去对共享资源进行操作，通过互斥来保证数据的一致性。\"},\"5813\":{\"t\":\"解决方案：\"},\"5814\":{\"t\":\"sexnx （SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。\"},\"5815\":{\"t\":\"这种加锁的思路是，如果 key 不存在则为 key 设置 value，如果 key 已存在则 SETNX 命令不做任何操作\"},\"5816\":{\"t\":\"客户端A请求服务器设置key的值，如果设置成功就表示加锁成功\"},\"5817\":{\"t\":\"客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败\"},\"5818\":{\"t\":\"客户端A执行代码完成，删除锁\"},\"5819\":{\"t\":\"客户端B在等待一段时间后再去请求设置key的值，设置成功\"},\"5820\":{\"t\":\"客户端B执行代码完成，删除锁\"},\"5821\":{\"h\":\"热点文章实时计算：\",\"a\":\"热点文章实时计算\"},\"5822\":{\"t\":\"思路说明：\"},\"5823\":{\"t\":\"待优化：\"},\"5824\":{\"t\":\"使用FastDFS作为静态资源存储器，在其上实现热静态资源缓存、淘汰等功能（待优化）\"},\"5825\":{\"t\":\"运用Hbase技术，存储系统中的冷数据，保证系统数据的可靠性（待优化）\"},\"5826\":{\"t\":\"运用ES搜索技术，对冷数据、文章数据建立索引，以保证冷数据、文章查询性能（待优化）\"},\"5827\":{\"t\":\"当用户 Logout 的话，JWT 也还有效。除非，我们在后端增加额外的处理逻辑比如将失效的 JWT 存储起来，后端先验证 JWT 是否有效再进行处理。\"},\"5828\":{\"h\":\"自我介绍：\",\"a\":\"自我介绍\"},\"5829\":{\"t\":\"面试官，您好，首先很感谢您给我的面试机会！我叫杨路恒，今年24岁，山东济宁人，就读于陕西师范大学，今年研二，软件工程专业，研究方向为知识图谱。大学时间我主要利用课外时间学习了 Java 以及 一些框架 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的粉丝数达到了3k+，访问量达到了44W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"5830\":{\"h\":\"J V M\"},\"5831\":{\"h\":\"Java S E\"},\"5832\":{\"h\":\"Java Framework\"},\"5833\":{\"h\":\"Kafka\"},\"5834\":{\"h\":\"Linux\"},\"5835\":{\"h\":\"O S\"},\"5836\":{\"h\":\"Spring Cloud Distribution\"},\"5837\":{\"h\":\"Chang Jing\"},\"5838\":{\"h\":\"Cs Network\"},\"5839\":{\"h\":\"Database\"},\"5840\":{\"h\":\"Duo Xian Cheng\"},\"5841\":{\"h\":\"Interview\"},\"5842\":{\"h\":\"Project\"},\"5843\":{\"h\":\"J V M\"},\"5844\":{\"h\":\"Java基础\"},\"5845\":{\"h\":\"Java框架\"},\"5846\":{\"h\":\"Linux\"},\"5847\":{\"h\":\"场景问题\"},\"5848\":{\"h\":\"多线程和高并发\"},\"5849\":{\"h\":\"微服务 Spring Cloud、分布式\"},\"5850\":{\"h\":\"操作系统\"},\"5851\":{\"h\":\"数据库\"},\"5852\":{\"h\":\"消息中间件 Kafka\"},\"5853\":{\"h\":\"计算机网络\"},\"5854\":{\"h\":\"面试\"},\"5855\":{\"h\":\"项目\"}},\"dirtCount\":0,\"index\":[[\"细心的朋友一定会发现\",{\"1\":{\"5737\":1}}],[\"希望它能替代\",{\"1\":{\"5530\":1}}],[\"希望断开连接\",{\"1\":{\"2344\":1}}],[\"机制\",{\"1\":{\"4475\":1}}],[\"悲观锁\",{\"0\":{\"4472\":1}}],[\"悲观锁大多数情况下依靠数据库的锁机制实现\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"⼯⼚⽅法模式了解吗\",{\"0\":{\"4036\":1}}],[\"⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚\",{\"1\":{\"828\":1,\"4037\":1}}],[\"秘钥是自己保存的\",{\"1\":{\"3654\":1}}],[\"速度慢\",{\"1\":{\"3655\":1}}],[\"速度快\",{\"1\":{\"3652\":1}}],[\"速度很快\",{\"1\":{\"364\":1}}],[\"俺也要吐槽一下\",{\"1\":{\"3650\":1}}],[\"哪些是非对称加密\",{\"1\":{\"3642\":1}}],[\"哪些算法是对称加密\",{\"1\":{\"3642\":1}}],[\"近期出现了很多加密算法\",{\"1\":{\"3642\":1}}],[\"账号\",{\"1\":{\"3627\":1,\"3633\":1}}],[\"彩虹表\",{\"1\":{\"3606\":1}}],[\"山东大学的王小云教授在美国加州举办的密码学会议上宣布破解了md5\",{\"1\":{\"3589\":1}}],[\"山东济宁人\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"抗修改性\",{\"1\":{\"3586\":1}}],[\"感谢\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"研究方向为知识图谱\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"研究生的专业成绩排名\",{\"1\":{\"3422\":1,\"5702\":1}}],[\"软件设计原则有哪些\",{\"0\":{\"4021\":1}}],[\"软件工程专业\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"软引用\",{\"1\":{\"313\":1}}],[\"今年研二\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"今年24岁\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"今日在刷leetcode\",{\"1\":{\"529\":1}}],[\"您好\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"您可以节省任何更改\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"|cut\",{\"1\":{\"3575\":1}}],[\"|grep\",{\"1\":{\"3575\":1}}],[\"||\",{\"1\":{\"778\":1,\"3288\":5,\"4552\":5}}],[\"渣渣烟\",{\"1\":{\"3565\":1,\"3567\":2,\"3568\":1}}],[\"省略\",{\"1\":{\"3565\":1}}],[\"淘汰等功能\",{\"1\":{\"3555\":1,\"5824\":1}}],[\"已存在则\",{\"1\":{\"3546\":1,\"5815\":1}}],[\"已经把内存地址v中的变量值率先更新成了2\",{\"1\":{\"3099\":1,\"4377\":1}}],[\"已经同意提交了提案n1\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"已经不能满足需求\",{\"1\":{\"5530\":1}}],[\"已经不可能成为\",{\"1\":{\"2139\":1,\"4744\":1}}],[\"已经不再有hash方法了\",{\"1\":{\"1023\":1}}],[\"已经没有超过半数的节点数了\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"已经被加载的类会直接返回\",{\"1\":{\"399\":1,\"424\":1,\"3854\":1,\"3881\":1}}],[\"借助第三方提供的接口审核图片\",{\"1\":{\"3510\":1,\"5779\":1}}],[\"借助第三方提供的接口审核文本\",{\"1\":{\"3509\":1,\"5778\":1}}],[\"审核失败\",{\"1\":{\"3511\":1,\"5780\":1}}],[\"审核的主要是审核文章的内容\",{\"1\":{\"3508\":1,\"5777\":1}}],[\"审计\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"异步线程的方式审核文章\",{\"1\":{\"3507\":1,\"5776\":1}}],[\"异常来拒绝新来的任务\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"异常表中包含了一个或多个异常处理者\",{\"1\":{\"470\":1,\"3921\":1}}],[\"异常的底层\",{\"0\":{\"3915\":1}}],[\"异常的抛出\",{\"1\":{\"450\":1,\"3909\":1}}],[\"异常的申明\",{\"1\":{\"447\":1,\"3906\":1}}],[\"异常和反射\",{\"0\":{\"429\":1}}],[\"异常\",{\"0\":{\"3889\":1},\"1\":{\"208\":1,\"229\":1,\"246\":1,\"270\":1,\"281\":1,\"292\":1}}],[\"异常处理者处理的异常的类信息\",{\"1\":{\"474\":1,\"3925\":1}}],[\"异常处理\",{\"1\":{\"200\":1}}],[\"专用的语言\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"专门用于组合搜索\",{\"1\":{\"2614\":1,\"4992\":1}}],[\"专门设计的一种支持崩溃恢复的原子广播协议\",{\"1\":{\"2102\":1,\"4707\":1}}],[\"思路说明\",{\"1\":{\"3553\":1,\"5822\":1}}],[\"思路分析\",{\"1\":{\"3489\":1,\"5758\":1}}],[\"思路其实很简单\",{\"1\":{\"3115\":1,\"4397\":1}}],[\"风险\",{\"1\":{\"3484\":1,\"5753\":1}}],[\"放在\",{\"1\":{\"3484\":1,\"5753\":1}}],[\"放回给调用者\",{\"1\":{\"2087\":1,\"4692\":1}}],[\"身份验证怎么做的\",{\"0\":{\"3477\":1,\"5746\":1}}],[\"试想一下\",{\"1\":{\"3466\":1,\"5735\":1}}],[\"偏移量\",{\"1\":{\"3465\":1,\"5734\":1}}],[\"偏向锁\",{\"0\":{\"4347\":1}}],[\"偏向锁就升级为轻量级锁\",{\"1\":{\"3233\":1,\"4356\":1}}],[\"偏向锁就会升级为轻量级锁\",{\"1\":{\"3230\":1,\"4354\":1}}],[\"偏向锁是指当一段同步代码一直被同一个线程所访问时\",{\"1\":{\"3228\":1,\"4352\":1}}],[\"偏向锁只有遇到其他线程尝试竞争偏向锁时\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"偏向锁几乎没有额外开销\",{\"1\":{\"3226\":1,\"4350\":1}}],[\"偏向于第一个访问锁的线程\",{\"1\":{\"3224\":1,\"4348\":1}}],[\"偏向模式下\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"缺陷\",{\"1\":{\"3460\":1,\"3464\":1,\"3474\":1,\"5729\":1,\"5733\":1,\"5743\":1}}],[\"缺点\",{\"1\":{\"2063\":1,\"2636\":1,\"2644\":1,\"3259\":1,\"3270\":1,\"3273\":1,\"4487\":1,\"4498\":1,\"4501\":1,\"4668\":1,\"5014\":1,\"5022\":1}}],[\"缺点是如果要增加新产品\",{\"1\":{\"825\":1,\"4034\":1}}],[\"喜欢\",{\"1\":{\"3453\":1,\"5722\":1}}],[\"运用es搜索技术\",{\"1\":{\"3557\":1,\"5826\":1}}],[\"运用hbase技术\",{\"1\":{\"3556\":1,\"5825\":1}}],[\"运用ai技术\",{\"1\":{\"3457\":1,\"5726\":1}}],[\"运用redis缓存技术\",{\"1\":{\"3454\":1,\"5723\":1}}],[\"运用mybatis\",{\"1\":{\"3452\":1,\"5721\":1}}],[\"运用spring\",{\"1\":{\"3450\":1,\"3451\":1,\"5719\":1,\"5720\":1}}],[\"运行在\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"运行后就是一个独立的进程\",{\"1\":{\"1456\":1,\"1624\":1,\"1792\":1,\"1960\":1,\"4883\":1}}],[\"运行的线程执行sleep\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"运行的线程执行wait\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"运行的线程在获取对象的同步锁时\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"运行状态\",{\"1\":{\"1345\":1,\"1513\":1,\"1681\":1,\"1849\":1,\"4772\":1}}],[\"运行groovy脚本\",{\"1\":{\"1197\":1,\"4230\":1}}],[\"运行流程\",{\"1\":{\"1055\":1,\"4088\":1}}],[\"运行期间也可以将新的常量放入池中\",{\"1\":{\"291\":1}}],[\"运行期间也可能将新的常量放入池中\",{\"1\":{\"281\":1}}],[\"运行时异常的特点是java编译器不会检查它\",{\"1\":{\"437\":1,\"3896\":1}}],[\"运行时异常\",{\"1\":{\"435\":1,\"3894\":1}}],[\"运行时异常和编译时异常\",{\"1\":{\"434\":1,\"3893\":1}}],[\"运行时常量池中包含各种不同的常量\",{\"1\":{\"290\":1}}],[\"运行时常量池\",{\"0\":{\"284\":1},\"1\":{\"281\":1,\"286\":1,\"291\":1}}],[\"运行时数据区\",{\"0\":{\"183\":1,\"3832\":1},\"1\":{\"179\":1,\"182\":1,\"3828\":1,\"3831\":1}}],[\"热点文章实时计算\",{\"0\":{\"3552\":1,\"5821\":1},\"1\":{\"3447\":1,\"5716\":1}}],[\"热点数据\",{\"1\":{\"3033\":1,\"3040\":1,\"5411\":1,\"5418\":1}}],[\"浏览文章功能\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"浏览器解析渲染页面\",{\"1\":{\"2459\":1,\"2552\":1,\"5557\":1}}],[\"十二\",{\"0\":{\"3444\":1,\"5713\":1}}],[\"甲乙各抽一张\",{\"1\":{\"3442\":1}}],[\"甲乙两个人\",{\"1\":{\"3442\":1}}],[\"凉了\",{\"1\":{\"3438\":1}}],[\"博客社区\",{\"1\":{\"3437\":1}}],[\"海尔\",{\"0\":{\"3433\":1}}],[\"秋招\",{\"0\":{\"3432\":1}}],[\"突然挂掉了\",{\"1\":{\"3466\":1,\"5735\":1}}],[\"突然电话断了\",{\"1\":{\"3404\":1,\"5684\":1}}],[\"突然说到mysqlb+树用到了红黑树\",{\"1\":{\"3396\":1,\"5676\":1}}],[\"讲一下研究生的论文成果\",{\"1\":{\"3421\":1,\"5701\":1}}],[\"讲一下spring\",{\"1\":{\"3415\":1,\"5695\":1}}],[\"讲一下你的项目经验\",{\"1\":{\"3402\":1,\"5682\":1}}],[\"讲一下为什么用线程池\",{\"1\":{\"3398\":1,\"5678\":1}}],[\"讲一下线程池参数maxsize满了你会怎么做\",{\"1\":{\"3399\":1,\"5679\":1}}],[\"讲一下线程池\",{\"1\":{\"3397\":1,\"5677\":1}}],[\"讲了下红黑树的特性\",{\"1\":{\"3396\":1,\"5676\":1}}],[\"讲真\",{\"1\":{\"2579\":1,\"4957\":1}}],[\"吧啦吧啦\",{\"1\":{\"3396\":1,\"5676\":1}}],[\"联想\",{\"0\":{\"3394\":1,\"5674\":1}}],[\"联合索引\",{\"0\":{\"2651\":1,\"5029\":1},\"1\":{\"2614\":1,\"2652\":1,\"4992\":1,\"5030\":1}}],[\"想从实习中收获什么\",{\"1\":{\"3429\":1,\"5709\":1}}],[\"想打他\",{\"1\":{\"3392\":1,\"5672\":1}}],[\"想要给同一局域网内的\",{\"1\":{\"2476\":1,\"5574\":1}}],[\"想要其生效必须引入spring\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"想要使用此布局\",{\"1\":{\"151\":1,\"155\":1,\"3805\":1}}],[\"离谱\",{\"1\":{\"3375\":1,\"3442\":1,\"5655\":1}}],[\"离散性可能会变差\",{\"1\":{\"879\":1,\"3987\":1}}],[\"熟悉的是java基础和mysql\",{\"1\":{\"3375\":1,\"5655\":1}}],[\"她说最晚周五下午\",{\"1\":{\"3371\":1,\"5651\":1}}],[\"态度算好的\",{\"0\":{\"3365\":1,\"5645\":1}}],[\"明确指出线程资源必须通过线程池提供\",{\"1\":{\"3337\":1,\"4594\":1}}],[\"便处理在任务队列中的任务\",{\"1\":{\"3332\":1,\"4589\":1}}],[\"便于减少系统的重复代码\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"便于后者的封装和控制\",{\"1\":{\"835\":1,\"4044\":1}}],[\"待优化\",{\"1\":{\"3554\":1,\"3555\":1,\"3556\":1,\"3557\":1,\"5823\":1,\"5824\":1,\"5825\":1,\"5826\":1}}],[\"待线程空闲\",{\"1\":{\"3333\":1,\"4590\":1}}],[\"待有线程空闲时\",{\"1\":{\"3332\":1,\"4589\":1}}],[\"待该线程操作完释放互斥锁后\",{\"1\":{\"1489\":1,\"1657\":1,\"1825\":1,\"1993\":1,\"4916\":1}}],[\"密钥的管理和分发非常困难\",{\"1\":{\"3653\":1}}],[\"密钥持有者用私有密钥对收到的信息进行解密\",{\"1\":{\"3647\":1}}],[\"密码\",{\"1\":{\"3627\":1,\"3633\":1}}],[\"密码为123456\",{\"1\":{\"3594\":1}}],[\"密码以及验证码校验正确的话\",{\"1\":{\"3480\":1,\"5749\":1}}],[\"密码以及验证码用于登陆系统\",{\"1\":{\"3479\":1,\"5748\":1}}],[\"密码加密的文章\",{\"0\":{\"23\":1,\"3677\":1}}],[\"密集型任务的应用中\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"密集型任务\",{\"1\":{\"3328\":1,\"3329\":1,\"4585\":1,\"4586\":1}}],[\"延迟队列服务提供对外接口\",{\"1\":{\"3528\":1,\"5797\":1}}],[\"延迟任务是一个通用的服务\",{\"1\":{\"3522\":1,\"5791\":1}}],[\"延迟发布\",{\"1\":{\"3517\":1,\"5786\":1}}],[\"延迟阻塞队列\",{\"1\":{\"3311\":1,\"4576\":1}}],[\"延迟写\",{\"1\":{\"2980\":1,\"5358\":1}}],[\"影响程序的整体性能\",{\"1\":{\"3302\":1,\"4567\":1}}],[\"影响程序的并发访问性\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"抛出\",{\"1\":{\"3301\":1,\"4566\":1}}],[\"抛出一个运行时异常\",{\"1\":{\"452\":1,\"3911\":1}}],[\"饱和策略会调用rejectedexecutionhandler\",{\"1\":{\"3316\":1,\"4581\":1}}],[\"饱和策略来配置线程池的时候\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"饱和策略\",{\"1\":{\"3297\":1,\"4561\":1}}],[\"杨路恒\",{\"1\":{\"3286\":1,\"4550\":1}}],[\"调优和监控\",{\"1\":{\"3283\":1,\"4547\":1}}],[\"调用执行自己的线程运行任务\",{\"1\":{\"3302\":1,\"4567\":1}}],[\"调用方法要和本地抽象方法的签名完全一致\",{\"1\":{\"2085\":1,\"4690\":1}}],[\"调用者就会等待被调用者的响应\",{\"1\":{\"2072\":1,\"4677\":1}}],[\"调用\",{\"1\":{\"509\":1,\"1057\":1,\"3960\":1,\"4090\":1}}],[\"调用它的方法\",{\"1\":{\"502\":1,\"3953\":1}}],[\"调用自己的\",{\"1\":{\"426\":1,\"3883\":1}}],[\"调用父加载器\",{\"1\":{\"425\":1,\"3882\":1}}],[\"活活饿死\",{\"1\":{\"3273\":1,\"4501\":1}}],[\"活跃事务列表\",{\"1\":{\"2864\":1,\"5242\":1}}],[\"失败则乖乖排队\",{\"1\":{\"3271\":1,\"4499\":1}}],[\"失败则返回\",{\"1\":{\"3082\":1,\"3083\":1,\"3085\":1,\"4438\":1,\"4439\":1,\"4441\":1}}],[\"唤醒线程的开销\",{\"1\":{\"3272\":1,\"4500\":1}}],[\"唤醒下一个阻塞线程有系统开销\",{\"1\":{\"3270\":1,\"4498\":1}}],[\"唤醒出队等\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"独享锁与共享锁也是通过aqs来实现的\",{\"1\":{\"4490\":1}}],[\"独享锁与共享锁是通过aqs来实现的\",{\"1\":{\"3262\":1}}],[\"独享锁\",{\"0\":{\"4485\":1},\"1\":{\"3258\":1,\"4486\":1}}],[\"独占方式\",{\"1\":{\"3082\":1,\"3083\":1,\"4438\":1,\"4439\":1}}],[\"独占和共享\",{\"1\":{\"3063\":1,\"4417\":1}}],[\"独占表锁\",{\"1\":{\"2750\":1,\"2751\":1,\"5128\":1,\"5129\":1}}],[\"独占锁\",{\"1\":{\"2743\":1,\"2776\":1,\"3064\":1,\"4418\":1,\"5121\":1,\"5154\":1}}],[\"乐观锁\",{\"0\":{\"4474\":1},\"1\":{\"3245\":1,\"3486\":1,\"4475\":1,\"5755\":1}}],[\"轻量级锁\",{\"0\":{\"4353\":1}}],[\"轻量级锁的获取有两种情况\",{\"1\":{\"3231\":1,\"4355\":1}}],[\"轻量级锁的获取及释放依赖多次\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"轻量级锁认为虽然竞争是存在的\",{\"1\":{\"3230\":1,\"4354\":1}}],[\"恢复到无锁\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"持有偏向锁的线程才会释放锁\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"持有锁的线程id也在对象头里\",{\"1\":{\"3226\":1,\"4350\":1}}],[\"持久化功能的实现可以简单分为\",{\"1\":{\"2978\":1,\"5356\":1}}],[\"持久化后每执行一条会更改\",{\"1\":{\"2974\":1,\"5352\":1}}],[\"持久化的实时性更好\",{\"1\":{\"2972\":1,\"5350\":1}}],[\"持久化\",{\"0\":{\"2958\":1,\"2963\":1,\"2971\":1,\"5336\":1,\"5341\":1,\"5349\":1}}],[\"持久性是通过\",{\"1\":{\"2811\":1,\"5189\":1}}],[\"持久性\",{\"1\":{\"1083\":1,\"2809\":1,\"4116\":1,\"5187\":1}}],[\"初次执行synchronized代码块时\",{\"1\":{\"3224\":1,\"4348\":1}}],[\"初始状态\",{\"1\":{\"3097\":1,\"4373\":1}}],[\"初始序列号\",{\"1\":{\"2307\":1}}],[\"初始值为16\",{\"1\":{\"983\":1}}],[\"初始值是16\",{\"1\":{\"981\":1}}],[\"初始化的序列号都要求不一样呢\",{\"0\":{\"2421\":1},\"1\":{\"2306\":1}}],[\"初始化选举\",{\"1\":{\"2123\":1,\"4728\":1}}],[\"初始化spring\",{\"1\":{\"1199\":1,\"4232\":1}}],[\"初始化\",{\"1\":{\"386\":1,\"3839\":1}}],[\"初始标记\",{\"1\":{\"364\":1,\"377\":1}}],[\"初始堆内存大小为\",{\"1\":{\"248\":1}}],[\"公钥是公开的\",{\"1\":{\"3654\":1}}],[\"公开密钥用于对信息加密\",{\"1\":{\"3647\":1}}],[\"公平锁\",{\"0\":{\"4495\":1},\"1\":{\"3268\":1,\"4496\":1}}],[\"公平锁和非公平锁等高级功能\",{\"1\":{\"3213\":1,\"4337\":1}}],[\"公平锁公平锁是指多个线程在等待同一个锁时\",{\"1\":{\"3210\":1,\"4334\":1}}],[\"公司推出的\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"改为处理其他事情\",{\"1\":{\"3209\":1,\"4333\":1}}],[\"改完了编译运行没有bug然而过了两天你发现用linkedhashmap会有隐患\",{\"1\":{\"484\":1,\"3935\":1}}],[\"泄露的内存\",{\"1\":{\"3201\":1}}],[\"盒子中可以存储每个线程的私有数据\",{\"1\":{\"3185\":1,\"4530\":1}}],[\"手动指定锁定对象\",{\"1\":{\"3162\":1}}],[\"强制从新从主内存加载数据\",{\"1\":{\"3145\":1,\"4457\":1}}],[\"强引用\",{\"1\":{\"310\":1}}],[\"硬件层面的内存屏障分为load\",{\"1\":{\"3144\":1,\"4456\":1}}],[\"典型\",{\"0\":{\"4394\":1},\"1\":{\"3129\":1,\"4411\":1}}],[\"典型值为\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"带来非常大的开销\",{\"1\":{\"3120\":1,\"4402\":1}}],[\"带来的效益是一样的\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"​\",{\"1\":{\"3118\":1,\"3496\":1,\"3498\":1,\"3501\":1,\"3502\":1,\"3513\":1,\"3514\":1,\"3515\":1,\"3516\":1,\"5765\":1,\"5767\":1,\"5770\":1,\"5771\":1,\"5782\":1,\"5783\":1,\"5784\":1,\"5785\":1}}],[\"敲黑板\",{\"1\":{\"3111\":1,\"4393\":1}}],[\"封装好的并发工具类来间接使用的\",{\"1\":{\"3108\":1,\"4390\":1}}],[\"封装起来\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"尝试释放资源\",{\"1\":{\"3083\":1,\"3085\":1,\"4439\":1,\"4441\":1}}],[\"尝试获取资源\",{\"1\":{\"3082\":1,\"3084\":1,\"4438\":1,\"4440\":1}}],[\"尝试如下的代码片段\",{\"1\":{\"543\":1}}],[\"限流\",{\"1\":{\"3048\":1,\"5426\":1}}],[\"限制每张表上的索引数量\",{\"1\":{\"2666\":1,\"5044\":1}}],[\"限制了\",{\"1\":{\"283\":1}}],[\"摧枯拉朽之势\",{\"1\":{\"3043\":1,\"5421\":1}}],[\"哈哈\",{\"1\":{\"3042\":1,\"5420\":1}}],[\"哈希索引\",{\"1\":{\"2603\":1,\"4981\":1}}],[\"哈希表是键值对的集合\",{\"1\":{\"2587\":1,\"4965\":1}}],[\"哈希表结构\",{\"0\":{\"677\":1,\"4019\":1},\"1\":{\"3193\":1,\"4537\":1}}],[\"哈希算法\",{\"1\":{\"1015\":1,\"2588\":1,\"4966\":1}}],[\"哈希值的使用不同\",{\"1\":{\"890\":1}}],[\"哈希值进行与操作时可以保证低位的值不变\",{\"1\":{\"877\":1,\"3985\":1}}],[\"小羊看来网站上大家的讨论\",{\"1\":{\"5532\":1}}],[\"小羊在昨天2023\",{\"1\":{\"3641\":1}}],[\"小概率会误判\",{\"1\":{\"3023\":1,\"5401\":1}}],[\"小于该\",{\"1\":{\"2861\":1,\"5239\":1}}],[\"小于这个\",{\"1\":{\"2861\":1,\"2864\":1,\"5239\":1,\"5242\":1}}],[\"布隆过滤器说某个元素不在\",{\"1\":{\"3023\":1,\"5401\":1}}],[\"布隆过滤器说某个元素存在\",{\"1\":{\"3023\":1,\"5401\":1}}],[\"布隆过滤器是一个非常神奇的数据结构\",{\"1\":{\"3021\":1,\"5399\":1}}],[\"布隆过滤器\",{\"1\":{\"3020\":1,\"5398\":1}}],[\"布局与功能禁用\",{\"0\":{\"9\":1,\"3663\":1}}],[\"穿透\",{\"0\":{\"3013\":1,\"5391\":1}}],[\"击穿\",{\"0\":{\"3013\":1,\"5391\":1}}],[\"哨兵\",{\"0\":{\"3012\":1,\"5390\":1}}],[\"移除最不经常使用的\",{\"1\":{\"3010\":1,\"5388\":1}}],[\"移除最近最少使用的\",{\"1\":{\"3005\":1,\"5383\":1}}],[\"懒汉式删除\",{\"1\":{\"2996\":1,\"5374\":1}}],[\"懒加载\",{\"1\":{\"821\":1,\"4030\":1}}],[\"惰性删除对\",{\"1\":{\"2996\":1,\"5374\":1}}],[\"惰性删除\",{\"1\":{\"2994\":1,\"5372\":1}}],[\"磁盘机器就宕机了\",{\"1\":{\"2975\":1,\"5353\":1}}],[\"快照文件\",{\"1\":{\"2968\":1,\"5346\":1}}],[\"快照持久化是\",{\"1\":{\"2965\":1,\"5343\":1}}],[\"快照\",{\"1\":{\"2960\":1,\"5338\":1}}],[\"快速取出\",{\"1\":{\"2588\":1,\"4966\":1}}],[\"电子邮件\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"电话面试\",{\"1\":{\"3371\":1,\"5651\":1}}],[\"电商系统中商品的销量排名等\",{\"1\":{\"2957\":1,\"5335\":1}}],[\"电脑里有\",{\"1\":{\"553\":1}}],[\"电脑内存大小\",{\"1\":{\"248\":1,\"249\":1}}],[\"游戏积分排行榜\",{\"1\":{\"2957\":1,\"5335\":1}}],[\"替代了双向链表和压缩列表\",{\"1\":{\"2932\":1,\"5310\":1}}],[\"替换\",{\"1\":{\"1404\":1,\"1572\":1,\"1740\":1,\"1908\":1,\"4831\":1}}],[\"命令不做任何操作\",{\"1\":{\"3546\":1,\"5815\":1}}],[\"命令在指定的\",{\"1\":{\"3545\":1,\"5814\":1}}],[\"命令生成编译后的\",{\"1\":{\"3164\":1,\"4508\":1}}],[\"命令查看\",{\"1\":{\"3164\":1,\"4508\":1}}],[\"命令追加\",{\"1\":{\"2979\":1,\"5357\":1}}],[\"命令实现消息队列\",{\"1\":{\"2934\":1,\"5312\":1}}],[\"命令可以实现一个最简易的分布式锁\",{\"1\":{\"2926\":1,\"5304\":1}}],[\"命名服务\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"命名管道\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"命名\",{\"1\":{\"816\":1,\"4025\":1}}],[\"拼接字符串不会造成缓冲区溢出\",{\"1\":{\"2922\":1,\"5300\":1}}],[\"音频\",{\"1\":{\"2920\":1,\"5298\":1}}],[\"音频等多媒体通信\",{\"1\":{\"2403\":1}}],[\"地理位置\",{\"1\":{\"2914\":1,\"5292\":1}}],[\"地址返回客户端\",{\"1\":{\"2543\":1,\"5641\":1}}],[\"地址吗\",{\"1\":{\"2537\":1,\"2539\":1,\"5635\":1,\"5637\":1}}],[\"地址上托管多个域名\",{\"1\":{\"2507\":1,\"5605\":1}}],[\"地址在另一个子网中\",{\"1\":{\"2489\":1,\"5587\":1}}],[\"地址后\",{\"1\":{\"2485\":1,\"5583\":1}}],[\"地址为主机\",{\"1\":{\"2498\":1,\"5596\":1}}],[\"地址为查询分组的发送者\",{\"1\":{\"2484\":1,\"5582\":1}}],[\"地址为发送者本身\",{\"1\":{\"2484\":1,\"5582\":1}}],[\"地址为137\",{\"1\":{\"2476\":2,\"5574\":2}}],[\"地址恰恰相反\",{\"1\":{\"2484\":1,\"5582\":1}}],[\"地址信息\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"地址和一个\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"地址和\",{\"1\":{\"2483\":1,\"2485\":1,\"2488\":1,\"5581\":1,\"5583\":1,\"5586\":1}}],[\"地址和端口号组成\",{\"1\":{\"2357\":1}}],[\"地址是本子网内与路由器连接的接口的\",{\"1\":{\"2493\":1,\"5591\":1}}],[\"地址是\",{\"1\":{\"2493\":2,\"5591\":2}}],[\"地址是否为自己的\",{\"1\":{\"2482\":1,\"5580\":1}}],[\"地址是广播地址\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"地址绝不会是主机\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"地址也是主机\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"地址即为主机\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"地址对应的映射条目\",{\"1\":{\"2479\":1,\"5577\":1}}],[\"地址映射关系\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"地址\",{\"1\":{\"2471\":1,\"2477\":2,\"2478\":1,\"2479\":1,\"2481\":7,\"2482\":1,\"2488\":2,\"2490\":1,\"2491\":1,\"2492\":2,\"2493\":5,\"2494\":1,\"2496\":1,\"2497\":2,\"2498\":1,\"2537\":1,\"2542\":1,\"5569\":1,\"5575\":2,\"5576\":1,\"5577\":1,\"5579\":7,\"5580\":1,\"5586\":2,\"5588\":1,\"5589\":1,\"5590\":2,\"5591\":5,\"5592\":1,\"5594\":1,\"5595\":2,\"5596\":1,\"5635\":1,\"5640\":1}}],[\"地址的一些问题\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"地址转\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"地址才是物理地址\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"地址属于逻辑地址\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"地址解析协议\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"散列值\",{\"1\":{\"3582\":1}}],[\"散列算法\",{\"1\":{\"3582\":1}}],[\"散列\",{\"0\":{\"2942\":1,\"5320\":1},\"1\":{\"2913\":1,\"5291\":1}}],[\"点赞\",{\"1\":{\"2941\":1,\"3453\":1,\"5319\":1,\"5722\":1}}],[\"点\",{\"1\":{\"2908\":1,\"5286\":1}}],[\"场景\",{\"1\":{\"2894\":1,\"5272\":1}}],[\"场景问题\",{\"0\":{\"2161\":1,\"4283\":1,\"5847\":1}}],[\"占用硬盘超过500tb\",{\"1\":{\"3607\":1}}],[\"占用空间由定义的宽度决定\",{\"1\":{\"2889\":1,\"5267\":1}}],[\"占用也就空间越小\",{\"1\":{\"2885\":1,\"5263\":1}}],[\"精准浮点\",{\"1\":{\"2888\":1,\"5266\":1}}],[\"禁止驱逐数据\",{\"1\":{\"3007\":1,\"5385\":1}}],[\"禁止使用\",{\"0\":{\"2898\":1,\"5276\":1}}],[\"禁止使用全文索引\",{\"0\":{\"2893\":1,\"5271\":1}}],[\"禁止给表中的每一列都建立单独的索引\",{\"0\":{\"2895\":1,\"5273\":1}}],[\"禁止在数据库中存储文件\",{\"0\":{\"2881\":1,\"5259\":1}}],[\"禁用了如下功能\",{\"1\":{\"11\":1,\"3665\":1}}],[\"禁用展示\",{\"1\":{\"7\":1,\"99\":1,\"3661\":1,\"3753\":1}}],[\"故该\",{\"1\":{\"2873\":1,\"5251\":1}}],[\"隐藏字段\",{\"1\":{\"2854\":1,\"2855\":1,\"2856\":1,\"5232\":1,\"5233\":1,\"5234\":1}}],[\"条记录\",{\"1\":{\"2827\":1,\"5205\":1}}],[\"条\",{\"1\":{\"2827\":1,\"2829\":1,\"5205\":1,\"5207\":1}}],[\"条件查询的字段\",{\"1\":{\"2661\":1,\"5039\":1}}],[\"刚才得到的数据就是过期的数据\",{\"1\":{\"2819\":1,\"5197\":1}}],[\"刚刚开始有软件支持\",{\"1\":{\"2212\":1,\"2227\":1,\"2242\":1,\"2255\":1,\"2268\":1,\"2283\":1,\"5519\":1,\"5542\":1}}],[\"现象\",{\"1\":{\"2816\":1,\"2821\":1,\"2825\":1,\"5194\":1,\"5199\":1,\"5203\":1}}],[\"现在主流的彩虹表记录数据约90万亿条\",{\"1\":{\"3607\":1}}],[\"现在在csdn上的粉丝数达到了3k+\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"现在http\",{\"1\":{\"2212\":1,\"2227\":1,\"2242\":1,\"2255\":1,\"2268\":1,\"2283\":1,\"5519\":1,\"5542\":1}}],[\"现在查询非常慢\",{\"0\":{\"2183\":1,\"4305\":1}}],[\"现在\",{\"1\":{\"1129\":1,\"4162\":1}}],[\"现在这个基于\",{\"1\":{\"587\":1}}],[\"现在的商业虚拟机采用分代收集算法\",{\"1\":{\"337\":1}}],[\"现在的商业虚拟机都采用这种收集算法来回收新生代\",{\"1\":{\"334\":1}}],[\"脏读\",{\"0\":{\"2815\":1,\"5193\":1},\"1\":{\"2816\":1,\"2842\":1,\"5194\":1,\"5220\":1}}],[\"均可以被\",{\"1\":{\"2861\":1,\"5239\":1}}],[\"均为\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"均包含了发送和接收的\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"未提交事务修改过的数据\",{\"1\":{\"2816\":1,\"5194\":1}}],[\"未增加的情况\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"未能找到目标路由器的本子网接口的\",{\"1\":{\"2492\":1,\"5590\":1}}],[\"扣除了\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"商品到手\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"商品库存这类需要强一致的数据\",{\"1\":{\"2199\":1,\"4321\":1}}],[\"购买失败时\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"购买成功时\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"购物车系统\",{\"1\":{\"2177\":1,\"4299\":1}}],[\"型关系\",{\"1\":{\"2795\":1,\"5173\":1}}],[\"型的记录锁是冲突的\",{\"1\":{\"2795\":1,\"5173\":1}}],[\"型的记录锁与\",{\"1\":{\"2795\":1,\"5173\":1}}],[\"型的\",{\"1\":{\"2793\":2,\"2794\":2,\"5171\":2,\"5172\":2}}],[\"型间隙锁\",{\"1\":{\"2789\":1,\"5167\":1}}],[\"型间隙锁和\",{\"1\":{\"2789\":1,\"5167\":1}}],[\"型与\",{\"1\":{\"2784\":2,\"2785\":2,\"2795\":1,\"5162\":2,\"5163\":2,\"5173\":1}}],[\"型记录锁\",{\"1\":{\"2784\":2,\"2785\":2,\"5162\":2,\"5163\":2}}],[\"型记录锁后\",{\"1\":{\"2784\":1,\"2785\":1,\"5162\":1,\"5163\":1}}],[\"称为临键锁\",{\"1\":{\"2791\":1,\"5169\":1}}],[\"称为间隙锁\",{\"1\":{\"2787\":1,\"5165\":1}}],[\"称为记录锁\",{\"1\":{\"2783\":1,\"5161\":1}}],[\"称为祖先关系或子孙关系\",{\"1\":{\"629\":1}}],[\"间隙锁之间是兼容的\",{\"1\":{\"2789\":1,\"5167\":1}}],[\"间隙锁虽然存在\",{\"1\":{\"2789\":1,\"5167\":1}}],[\"间隙锁\",{\"1\":{\"2780\":1,\"2788\":1,\"5158\":1,\"5166\":1}}],[\"记录下来\",{\"1\":{\"2865\":1,\"5243\":1}}],[\"记录数量\",{\"1\":{\"2825\":1,\"5203\":1}}],[\"记录锁+间隙锁\",{\"1\":{\"2848\":1,\"5226\":1}}],[\"记录锁\",{\"1\":{\"2779\":1,\"5157\":1}}],[\"记录了map中kv对的个数\",{\"1\":{\"915\":1}}],[\"满足写写互斥\",{\"1\":{\"2776\":1,\"5154\":1}}],[\"满足读读共享\",{\"1\":{\"2776\":1,\"5154\":1}}],[\"行级锁的类型主要有三类\",{\"1\":{\"2778\":1,\"5156\":1}}],[\"行级锁\",{\"0\":{\"2771\":1,\"5149\":1}}],[\"行为型\",{\"1\":{\"816\":1,\"4025\":1}}],[\"修饰的\",{\"1\":{\"3201\":1}}],[\"修饰的方法并没有\",{\"1\":{\"3175\":1,\"3179\":1,\"4520\":1,\"4524\":1}}],[\"修饰的字段加上轻量级锁\",{\"1\":{\"2761\":1,\"5139\":1}}],[\"修饰的字段的值是连续递增的\",{\"1\":{\"2758\":1,\"5136\":1}}],[\"修饰的字段赋值递增的值\",{\"1\":{\"2757\":1,\"5135\":1}}],[\"修饰方法的的情况\",{\"0\":{\"3172\":1,\"4517\":1}}],[\"修改发布文章代码\",{\"1\":{\"3530\":1,\"5799\":1}}],[\"修改锁标志位\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"修改对象头里的锁标志位\",{\"1\":{\"3224\":1,\"4348\":1}}],[\"修改为\",{\"1\":{\"3113\":1,\"4395\":1}}],[\"修改了表字段\",{\"1\":{\"2735\":1,\"5113\":1}}],[\"修改代价肯定是较大的\",{\"1\":{\"2638\":1,\"5016\":1}}],[\"修改\",{\"1\":{\"1172\":1,\"2017\":1,\"4205\":1,\"4622\":1}}],[\"修改元素\",{\"1\":{\"895\":1}}],[\"修改引用类型\",{\"1\":{\"463\":1}}],[\"修改值类型\",{\"1\":{\"463\":1}}],[\"掉这个长事务\",{\"1\":{\"2739\":1,\"5117\":1}}],[\"释放带来的性能损耗\",{\"1\":{\"3239\":1,\"4362\":1}}],[\"释放间隙锁的时刻\",{\"1\":{\"2798\":1,\"5176\":1}}],[\"释放\",{\"1\":{\"2728\":1,\"2729\":1,\"3234\":1,\"4357\":1,\"5106\":1,\"5107\":1}}],[\"申请自增主键后就释放锁\",{\"1\":{\"2764\":1,\"5142\":1}}],[\"申请\",{\"1\":{\"2728\":1,\"2729\":1,\"5106\":1,\"5107\":1}}],[\"牛逼的地方在于实现了颗粒度更细的行级锁\",{\"1\":{\"2721\":1,\"5099\":1}}],[\"意向独占锁\",{\"1\":{\"2743\":1,\"2744\":1,\"5121\":1,\"5122\":1}}],[\"意向共享锁和意向独占锁是表级锁\",{\"1\":{\"2748\":1,\"5126\":1}}],[\"意向共享锁\",{\"1\":{\"2742\":1,\"5120\":1}}],[\"意向锁的目的是为了快速判断表里是否有记录被加锁\",{\"1\":{\"2752\":1,\"5130\":1}}],[\"意向锁\",{\"0\":{\"2740\":1,\"5118\":1},\"1\":{\"2710\":1,\"2750\":1,\"2751\":1,\"5088\":1,\"5128\":1,\"5129\":1}}],[\"意味着整个数据库都是只读状态\",{\"1\":{\"2698\":1,\"5076\":1}}],[\"备份数据库的工具是\",{\"1\":{\"2703\":1,\"5081\":1}}],[\"备份期间业务依然可以对数据进行更新操作\",{\"1\":{\"2701\":1,\"5079\":1}}],[\"备份就会花费很多的时间\",{\"1\":{\"2699\":1,\"5077\":1}}],[\"备忘录\",{\"1\":{\"816\":1,\"4025\":1}}],[\"涉及的索引都不会被使用到\",{\"1\":{\"2682\":1,\"5060\":1}}],[\"较普通索引会占用更小的空间\",{\"1\":{\"2675\":1,\"5053\":1}}],[\"冗余索引指的是索引的功能相同\",{\"1\":{\"2673\":1,\"5051\":1}}],[\"尽管\",{\"1\":{\"2801\":1,\"5179\":1}}],[\"尽可能的考虑建立联合索引而不是单列索引\",{\"1\":{\"2670\":1,\"5048\":1}}],[\"尽量使得明文密码及其md5值\",{\"1\":{\"3607\":1,\"3624\":1}}],[\"尽量将无效的\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"尽量少的调整分区分配的变动\",{\"1\":{\"1286\":1,\"5478\":1}}],[\"尽量均衡\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"尽量做到任何一位的变化都能对最终得到的结果产生影响\",{\"1\":{\"988\":1}}],[\"频繁需要排序的字段\",{\"1\":{\"2662\":1,\"5040\":1}}],[\"复合索引\",{\"1\":{\"2652\":1,\"5030\":1}}],[\"复制\",{\"1\":{\"382\":1,\"2017\":1,\"4622\":1}}],[\"复制算法\",{\"1\":{\"339\":1}}],[\"跟聚簇索引一样\",{\"1\":{\"2645\":1,\"5023\":1}}],[\"值\",{\"1\":{\"2949\":1,\"3217\":1,\"4341\":1,\"5327\":1}}],[\"值的字段\",{\"1\":{\"2619\":1,\"4997\":1}}],[\"值为false时\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"值为true时\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"覆盖索引即需要查询的字段正好是索引的字段\",{\"1\":{\"2649\":1,\"5027\":1}}],[\"覆盖索引\",{\"0\":{\"2647\":1,\"5025\":1},\"1\":{\"2613\":1,\"2648\":1,\"4991\":1,\"5026\":1}}],[\"普通\",{\"1\":{\"2766\":1,\"2847\":1,\"5144\":1,\"5225\":1}}],[\"普通的\",{\"1\":{\"2745\":1,\"2773\":1,\"5123\":1,\"5151\":1}}],[\"普通的树一般是无序的\",{\"1\":{\"621\":1}}],[\"普通索引的唯一作用就是为了快速查询数据\",{\"1\":{\"2626\":1,\"5004\":1}}],[\"普通索引\",{\"1\":{\"2611\":1,\"2623\":1,\"2626\":1,\"4989\":1,\"5001\":1,\"5004\":1}}],[\"列表每个元素的值都小于\",{\"1\":{\"2930\":1,\"5308\":1}}],[\"列表\",{\"0\":{\"2927\":1,\"5305\":1},\"1\":{\"2865\":1,\"2913\":1,\"5243\":1,\"5291\":1}}],[\"列值唯一\",{\"1\":{\"2610\":1,\"2612\":1,\"4988\":1,\"4990\":1}}],[\"列上可以创建全文索引\",{\"1\":{\"2605\":1,\"2615\":1,\"4983\":1,\"4993\":1}}],[\"辅助索引的\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"辅助索引\",{\"1\":{\"2599\":1,\"2608\":1,\"2640\":1,\"4977\":1,\"4986\":1,\"5018\":1}}],[\"聚集索引\",{\"1\":{\"2599\":1,\"2607\":1,\"4977\":1,\"4985\":1}}],[\"聚簇索引对于主键的排序查找和范围查找速度非常快\",{\"1\":{\"2635\":1,\"5013\":1}}],[\"聚簇索引少了一次读取数据的\",{\"1\":{\"2634\":1,\"5012\":1}}],[\"聚簇索引的查询速度非常的快\",{\"1\":{\"2634\":1,\"5012\":1}}],[\"聚簇索引\",{\"0\":{\"2630\":1,\"5008\":1},\"1\":{\"2599\":1,\"2607\":1,\"2631\":1,\"4977\":1,\"4985\":1,\"5009\":1}}],[\"搜索文章功能\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"搜索算法搜索索引\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"搜索引擎通常会更青睐使用\",{\"1\":{\"2522\":1,\"5620\":1}}],[\"搜索引擎优化\",{\"1\":{\"2522\":1,\"5620\":1}}],[\"叶节点的\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"叶子节点存储的是主键+列值\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"叶子节点存储索引和索引对应的数据\",{\"1\":{\"2632\":1,\"5010\":1}}],[\"叶子节点也都是有序的\",{\"1\":{\"2634\":1,\"5012\":1}}],[\"叶子节点的顺序检索很明显\",{\"1\":{\"2596\":1,\"4974\":1}}],[\"叶子节点\",{\"1\":{\"663\":1,\"4004\":1}}],[\"假如我们要对表中的数据进行排序或者进行范围查询\",{\"1\":{\"2589\":1,\"4967\":1}}],[\"假设现在我要统计index这个接口的qps\",{\"1\":{\"3566\":1}}],[\"假设没有冲突去完成某项操作\",{\"1\":{\"3093\":1,\"4369\":1}}],[\"假设有一个变量初始值为\",{\"1\":{\"3113\":1,\"4395\":1}}],[\"假设有\",{\"1\":{\"2818\":1,\"2823\":1,\"2827\":1,\"5196\":1,\"5201\":1,\"5205\":1}}],[\"假设有三个消费者分别为c0\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"假设一个一般场景\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"假设当前有如下场景\",{\"1\":{\"2476\":1,\"5574\":1}}],[\"假设\",{\"1\":{\"2129\":1,\"2136\":1,\"2141\":1,\"2788\":1,\"4734\":1,\"4741\":1,\"4746\":1,\"5166\":1}}],[\"假设我们集群中有3台机器\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"假设n为3\",{\"1\":{\"974\":1}}],[\"假设容器中的类型是\",{\"1\":{\"536\":1}}],[\"域存储相应记录主键的值而不是地址\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"域存放的是数据记录的地址\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"域的值为地址读取相应的数据记录\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"域的值\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"域保存了完整的数据记录\",{\"1\":{\"2582\":1,\"2599\":1,\"4960\":1,\"4977\":1}}],[\"域名解析的工作流程\",{\"0\":{\"2535\":1,\"5633\":1}}],[\"索引失效也是慢查询的主要原因之一\",{\"1\":{\"2677\":1,\"5055\":1}}],[\"索引占用的空间也是很多的\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"索引过多\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"索引可以增加查询效率\",{\"1\":{\"2668\":1,\"5046\":1}}],[\"索引可以提高效率同样可以降低效率\",{\"1\":{\"2667\":1,\"5045\":1}}],[\"索引可就不行了\",{\"1\":{\"2589\":1,\"4967\":1}}],[\"索引并不是越多越好\",{\"1\":{\"2667\":1,\"5045\":1}}],[\"索引已经排序\",{\"1\":{\"2662\":1,\"5040\":1}}],[\"索引字段的数据应该尽量不为\",{\"1\":{\"2659\":1,\"5037\":1}}],[\"索引下推\",{\"1\":{\"2655\":1,\"2656\":1,\"5033\":1,\"5034\":1}}],[\"索引结构和数据分开存放的索引\",{\"1\":{\"2608\":1,\"4986\":1}}],[\"索引结构和数据一起存放的索引\",{\"1\":{\"2607\":1,\"4985\":1}}],[\"索引都是使用\",{\"1\":{\"2602\":1,\"4980\":1}}],[\"索引不支持顺序和范围查询\",{\"1\":{\"2589\":1,\"4967\":1}}],[\"索引是一种用于快速查询和检索数据的数据结构\",{\"1\":{\"2584\":1,\"4962\":1}}],[\"索引\",{\"0\":{\"2583\":1,\"4961\":1},\"1\":{\"2602\":1,\"2604\":1,\"4980\":1,\"4982\":1}}],[\"索引文件和数据文件是分离的\",{\"1\":{\"2582\":1,\"2599\":1,\"4960\":1,\"4977\":1}}],[\"索引实现不一样\",{\"1\":{\"2580\":1,\"4958\":1}}],[\"索引计算公式为i\",{\"1\":{\"877\":1,\"3985\":1}}],[\"咱们下面还是来简单对比一下两者\",{\"1\":{\"2563\":1,\"4941\":1}}],[\"言归正传\",{\"1\":{\"2563\":1,\"4941\":1}}],[\"告诉本地\",{\"1\":{\"2542\":1,\"5640\":1}}],[\"权威\",{\"1\":{\"2531\":1,\"2542\":1,\"5629\":1,\"5640\":1}}],[\"权限控制等\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"顶级域名服务器说\",{\"1\":{\"2540\":1,\"5638\":1}}],[\"顶级域名服务器地址给你\",{\"1\":{\"2538\":1,\"5636\":1}}],[\"顶级域\",{\"1\":{\"2527\":1,\"2530\":1,\"5625\":1,\"5628\":1}}],[\"越靠右的位置表示其层级越高\",{\"1\":{\"2525\":1,\"5623\":1}}],[\"越来越多的国际大公司已经开始使用http\",{\"1\":{\"2206\":1,\"2221\":1,\"2236\":1,\"2249\":1,\"2262\":1,\"2277\":1,\"5512\":1,\"5537\":1}}],[\"耗费的时间也是较多的\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"耗费更多服务器资源\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"耗时控制在\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"队头阻塞\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"队列里面除了第一个线程\",{\"1\":{\"3270\":1,\"4498\":1}}],[\"队列结构如下图所示\",{\"1\":{\"3072\":1,\"4426\":1}}],[\"队列是一个虚拟的双向队列\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"队列锁\",{\"1\":{\"3070\":1,\"4424\":1}}],[\"队列中写锁获取优先级高于读锁\",{\"1\":{\"2738\":1,\"5116\":1}}],[\"队列\",{\"0\":{\"608\":1,\"3993\":1},\"1\":{\"573\":1,\"2118\":1,\"4723\":1}}],[\"零往返时间\",{\"1\":{\"2515\":1,\"5613\":1}}],[\"零拷贝技术可以把文件传输的性能提高至少一倍以上\",{\"1\":{\"1429\":1,\"1597\":1,\"1765\":1,\"1933\":1,\"4856\":1}}],[\"零拷贝技术的文件传输方式相比传统文件传输的方式\",{\"1\":{\"1428\":1,\"1596\":1,\"1764\":1,\"1932\":1,\"4855\":1}}],[\"零拷贝技术实现的方式通常有\",{\"1\":{\"1399\":1,\"1567\":1,\"1735\":1,\"1903\":1,\"4826\":1}}],[\"零拷贝\",{\"0\":{\"1398\":1,\"1566\":1,\"1734\":1,\"1902\":1,\"4825\":1},\"1\":{\"1431\":1,\"1599\":1,\"1767\":1,\"1935\":1,\"4858\":1}}],[\"里是否存储着指向当前线程的偏向锁\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"里存储锁偏向的线程\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"里有\",{\"1\":{\"3000\":1,\"5378\":1}}],[\"里\",{\"1\":{\"2685\":1,\"5063\":1}}],[\"里默认和最常用的索引类型\",{\"1\":{\"2602\":1,\"4980\":1}}],[\"里的\",{\"1\":{\"2506\":1,\"5604\":1}}],[\"里面收集了所有常用的密码\",{\"1\":{\"3607\":1}}],[\"里面是不会有线程的\",{\"1\":{\"3349\":1,\"4607\":1}}],[\"里面有一个内部类\",{\"1\":{\"3215\":1,\"4339\":1}}],[\"里面总会存在着<threadlocal\",{\"1\":{\"3201\":1}}],[\"里面保存了\",{\"1\":{\"2860\":1,\"5238\":1}}],[\"里面记录的是主库分配的自增值\",{\"1\":{\"2769\":1,\"5147\":1}}],[\"里面表级别的锁有这几种\",{\"1\":{\"2707\":1,\"5085\":1}}],[\"里面的求hash的方法从hash改为了spread\",{\"1\":{\"1027\":1}}],[\"里面\",{\"1\":{\"379\":1}}],[\"资源\",{\"1\":{\"2904\":1,\"3255\":1,\"3328\":1,\"4484\":1,\"4585\":1,\"5282\":1}}],[\"资源已被永久转移\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"资源会在\",{\"1\":{\"454\":1,\"3913\":1}}],[\"范围请求的标识码\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"范围是namespace级别的\",{\"1\":{\"1237\":1,\"4270\":1}}],[\"光是错误响应状态码就新增了\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"转到人工审核\",{\"1\":{\"3511\":1,\"5780\":1}}],[\"转账\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"转移到了主机\",{\"1\":{\"2495\":1,\"5593\":1}}],[\"转换成\",{\"1\":{\"1061\":1,\"4094\":1}}],[\"转换成一个对象\",{\"1\":{\"1060\":1,\"4093\":1}}],[\"终将收到主机\",{\"1\":{\"2485\":1,\"5583\":1}}],[\"终止状态\",{\"1\":{\"1348\":1,\"1516\":1,\"1684\":1,\"1852\":1,\"4775\":1}}],[\"响应分组只有一个目的地\",{\"1\":{\"2484\":1,\"5582\":1}}],[\"响应分组具有和\",{\"1\":{\"2484\":1,\"5582\":1}}],[\"响应分组\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"响应消息\",{\"1\":{\"2217\":1,\"2232\":1,\"2247\":1,\"2260\":1,\"2273\":1,\"2288\":1,\"5524\":1,\"5547\":1}}],[\"丢弃之\",{\"1\":{\"2482\":1,\"5580\":1}}],[\"另\",{\"1\":{\"3424\":1,\"5704\":1}}],[\"另一个是喜欢旅游和骑行的方式来放松\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"另一个面试官问看你简历有高并发系统的东西\",{\"1\":{\"3419\":1,\"5699\":1}}],[\"另一个作用是\",{\"1\":{\"2871\":1,\"5249\":1}}],[\"另一个拥有该间隙区间内的插入意向锁\",{\"1\":{\"2801\":1,\"5179\":1}}],[\"另一种是响应分组\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"另外还可以考虑延迟执行\",{\"1\":{\"3121\":1,\"4403\":1}}],[\"另外数组底层的存储是连续的\",{\"1\":{\"1336\":1}}],[\"另外它只是一个简单变量\",{\"1\":{\"1335\":1}}],[\"另外一个缓存用于存放半成品对象\",{\"1\":{\"1127\":1,\"4160\":1}}],[\"另外一些则是与线程一一对应的\",{\"1\":{\"186\":1}}],[\"另外\",{\"1\":{\"837\":1,\"864\":1,\"1493\":1,\"1661\":1,\"1829\":1,\"1997\":1,\"2098\":1,\"2160\":1,\"2720\":1,\"3044\":1,\"3169\":1,\"3340\":1,\"4046\":1,\"4073\":1,\"4514\":1,\"4597\":1,\"4703\":1,\"4765\":1,\"4920\":1,\"5098\":1,\"5422\":1}}],[\"检索就结束了\",{\"1\":{\"2596\":1,\"4974\":1}}],[\"检索自己的\",{\"1\":{\"2479\":1,\"5577\":1}}],[\"检查该类是否已经加载过\",{\"1\":{\"421\":1,\"3878\":1}}],[\"检查幸存者对象\",{\"1\":{\"234\":1}}],[\"仅启动一个\",{\"1\":{\"3351\":1,\"4610\":1}}],[\"仅存在结点之间的关联关系\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"仅仅是定义了同步状态的获取和释放的方法\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"仅仅是写到缓冲区\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"仅仅通过给\",{\"1\":{\"2997\":1,\"5375\":1}}],[\"仅仅只是标记一下\",{\"1\":{\"364\":1}}],[\"仅加速查询\",{\"1\":{\"2611\":1,\"4989\":1}}],[\"仅支持\",{\"1\":{\"2604\":1,\"4982\":1}}],[\"仅知道目的地的\",{\"1\":{\"2477\":1,\"5575\":1}}],[\"物理上的下一个目的地\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"期间发生了什么\",{\"0\":{\"2451\":1,\"2545\":1,\"5549\":1}}],[\"期望寻找到主机\",{\"1\":{\"2496\":1,\"5594\":1}}],[\"期望寻找到目标路由器的本子网接口的\",{\"1\":{\"2490\":1,\"5588\":1}}],[\"期望\",{\"1\":{\"2339\":1}}],[\"键入网址到网页显示\",{\"0\":{\"2451\":1,\"2545\":1,\"5549\":1}}],[\"键和值都可以为null\",{\"1\":{\"908\":1}}],[\"号端口\",{\"1\":{\"2415\":2}}],[\"送给\",{\"1\":{\"2414\":1}}],[\"首部长度\",{\"1\":{\"2406\":2}}],[\"首部长度较长\",{\"1\":{\"2389\":1}}],[\"首部只有\",{\"1\":{\"2390\":1}}],[\"首部在没有使用\",{\"1\":{\"2389\":1}}],[\"首部开销\",{\"1\":{\"2388\":1}}],[\"首先很感谢您给我的面试机会\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"首先切换到类的对应目录执行\",{\"1\":{\"3164\":1,\"4508\":1}}],[\"首先将预期值a和内存地址v的实际值比较\",{\"1\":{\"3100\":1,\"4379\":1}}],[\"首先查看是否存在后继节点\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"首先通过子类判断是否获取了锁\",{\"1\":{\"3075\":1,\"4431\":1}}],[\"首先通过类加载器\",{\"1\":{\"182\":1,\"3831\":1}}],[\"首先按照\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"首先也会给自己投票\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"首先毫无疑问的是剩下的两个\",{\"1\":{\"2128\":1,\"4733\":1}}],[\"首先它会比较\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"首先提供\",{\"1\":{\"2022\":1,\"4627\":1}}],[\"首先对分区按照分区id进行排序\",{\"1\":{\"1269\":1,\"5461\":1}}],[\"首先对各个\",{\"1\":{\"380\":1}}],[\"首先要知道他应该保存在这个链表数组中的哪个位置\",{\"1\":{\"960\":1}}],[\"首先计算元素的hashcode值\",{\"1\":{\"699\":1}}],[\"首先\",{\"1\":{\"421\":1,\"660\":1,\"769\":1,\"961\":1,\"996\":1,\"1418\":1,\"1586\":1,\"1754\":1,\"1922\":1,\"2733\":1,\"3878\":1,\"4001\":1,\"4845\":1,\"5111\":1}}],[\"流量控制\",{\"1\":{\"2385\":1}}],[\"流程图\",{\"0\":{\"89\":1,\"3743\":1}}],[\"拥塞控制\",{\"1\":{\"2385\":1}}],[\"约为\",{\"1\":{\"2371\":1}}],[\"端口号\",{\"1\":{\"2414\":1,\"2519\":1,\"5617\":1}}],[\"端口\",{\"1\":{\"2363\":1,\"2365\":1}}],[\"源代码等\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"源代码可以看出thread\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"源码\",{\"1\":{\"3189\":1,\"4533\":1}}],[\"源码对这部分代码进行改动下\",{\"1\":{\"1137\":1,\"4170\":1}}],[\"源端口\",{\"1\":{\"2363\":1}}],[\"源地址\",{\"1\":{\"2362\":1}}],[\"窗口大小\",{\"1\":{\"2359\":1}}],[\"报文封装成链路层帧\",{\"1\":{\"2478\":1,\"5576\":1}}],[\"报文首部需要有长度字段以供计算\",{\"1\":{\"2409\":1}}],[\"报文会自动丢弃\",{\"1\":{\"2353\":1}}],[\"报文没有收到的时候\",{\"1\":{\"2353\":1}}],[\"报文是\",{\"1\":{\"2353\":1}}],[\"报文\",{\"1\":{\"2353\":2,\"2458\":1,\"2551\":1,\"5556\":1}}],[\"段\",{\"1\":{\"2344\":1}}],[\"段落\",{\"1\":{\"25\":1,\"26\":1,\"3679\":1,\"3680\":1}}],[\"位存储\",{\"1\":{\"2914\":1,\"5292\":1}}],[\"位数字\",{\"1\":{\"2889\":1,\"5267\":1}}],[\"位为\",{\"1\":{\"2344\":1}}],[\"位运算\",{\"1\":{\"969\":1}}],[\"规避资源耗尽的风险\",{\"1\":{\"3340\":1,\"4597\":1}}],[\"规定除了最初建立连接时的\",{\"1\":{\"2341\":1}}],[\"规范\",{\"1\":{\"282\":1}}],[\"规范中没有规定任何\",{\"1\":{\"202\":1}}],[\"规范中\",{\"1\":{\"198\":1}}],[\"累加\",{\"1\":{\"2338\":1}}],[\"序列化后的对象\",{\"1\":{\"2924\":1,\"5302\":1}}],[\"序列化存储相同内容的vector与arraylist\",{\"1\":{\"756\":1}}],[\"序列号和窗口大小称为连接\",{\"1\":{\"2355\":1}}],[\"序列号\",{\"1\":{\"2338\":1,\"2343\":1,\"2358\":1}}],[\"针对热点缓存失效的情况\",{\"1\":{\"3049\":1,\"5427\":1}}],[\"针对热点数据提前预热\",{\"1\":{\"3036\":1,\"5414\":1}}],[\"针对单个文件操作\",{\"1\":{\"2981\":1,\"5359\":1}}],[\"针对当前读\",{\"1\":{\"2848\":1,\"5226\":1}}],[\"针对快照读\",{\"1\":{\"2847\":1,\"5225\":1}}],[\"针对不同的隔离级别\",{\"1\":{\"2838\":1,\"5216\":1}}],[\"针对\",{\"1\":{\"2329\":1,\"3046\":1,\"5424\":1}}],[\"攻击者就可以通过穷举法反向查询出md5值\",{\"1\":{\"3607\":1}}],[\"攻击者创建了一个叫彩虹表的东西\",{\"1\":{\"3607\":1}}],[\"攻击\",{\"0\":{\"2427\":2},\"1\":{\"2312\":2}}],[\"头字段\",{\"1\":{\"2507\":2,\"5605\":2}}],[\"头\",{\"1\":{\"2507\":1,\"5605\":1}}],[\"头部压缩\",{\"1\":{\"2511\":1,\"5609\":1}}],[\"头部则没有\",{\"1\":{\"2408\":1}}],[\"头部长度则是不会变化的\",{\"1\":{\"2407\":1}}],[\"头部有\",{\"1\":{\"2406\":1,\"2408\":1}}],[\"头部没有\",{\"1\":{\"2406\":1}}],[\"头部格式\",{\"1\":{\"2374\":1}}],[\"头格式有哪些\",{\"0\":{\"2336\":1},\"1\":{\"2295\":1}}],[\"头节点和尾节点\",{\"1\":{\"714\":1}}],[\"截至2019年6月\",{\"1\":{\"2213\":1,\"2228\":1,\"2243\":1,\"2256\":1,\"2269\":1,\"2284\":1,\"5520\":1,\"5543\":1}}],[\"短短两年过去了\",{\"1\":{\"2212\":1,\"2227\":1,\"2242\":1,\"2255\":1,\"2268\":1,\"2283\":1,\"5519\":1,\"5542\":1}}],[\"短时间内\",{\"1\":{\"2075\":1,\"4680\":1}}],[\"认为别人不会同时修改数据\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"认为其他人也会修改数据\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"认为每个结点到自身有长0\",{\"1\":{\"633\":1}}],[\"认可http\",{\"1\":{\"2211\":1,\"2226\":1,\"2241\":1,\"2254\":1,\"2267\":1,\"2282\":1,\"5518\":1,\"5541\":1}}],[\"真正被广泛使用起来要到2018年左右\",{\"1\":{\"2211\":1,\"2226\":1,\"2241\":1,\"2254\":1,\"2267\":1,\"2282\":1,\"5518\":1,\"5541\":1}}],[\"真正的栈\",{\"1\":{\"586\":1}}],[\"真正的继承关系中\",{\"1\":{\"559\":1}}],[\"真正的继承关系是很少的\",{\"1\":{\"559\":1}}],[\"辉煌不在\",{\"0\":{\"2209\":1,\"2224\":1,\"2239\":1,\"2252\":1,\"2265\":1,\"2280\":1,\"5516\":1,\"5539\":1}}],[\"预热\",{\"1\":{\"2202\":1,\"4324\":1}}],[\"冷机房新请求过来\",{\"0\":{\"2201\":1,\"4323\":1}}],[\"全文索引不适用于\",{\"1\":{\"2894\":1,\"5272\":1}}],[\"全文索引主要是为了检索大文本数据中的关键字的信息\",{\"1\":{\"2628\":1,\"5006\":1}}],[\"全文索引\",{\"1\":{\"2605\":1,\"2615\":1,\"2628\":1,\"4983\":1,\"4993\":1,\"5006\":1}}],[\"全称为\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"全称\",{\"1\":{\"2469\":1,\"5530\":1,\"5567\":1}}],[\"全球也仅有36\",{\"1\":{\"2213\":1,\"2228\":1,\"2243\":1,\"2256\":1,\"2269\":1,\"2284\":1,\"5520\":1,\"5543\":1}}],[\"全面使用只是个时间问题\",{\"1\":{\"2207\":1,\"2222\":1,\"2237\":1,\"2250\":1,\"2263\":1,\"2278\":1,\"5513\":1,\"5538\":1}}],[\"全部启动\",{\"1\":{\"3350\":1,\"4608\":1}}],[\"全部\",{\"1\":{\"2200\":1,\"4322\":1}}],[\"全局锁主要应用于做全库逻辑备份\",{\"1\":{\"2696\":1,\"5074\":1}}],[\"全局锁应用场景是什么\",{\"1\":{\"2695\":1,\"5073\":1}}],[\"全局锁\",{\"0\":{\"2687\":1,\"5065\":1}}],[\"全局数据\",{\"1\":{\"2199\":1,\"4321\":1}}],[\"全局单调递增的事务id\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"全局参数中配置开启二级缓存\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"阿里巴巴\",{\"1\":{\"3337\":1,\"3340\":1,\"4594\":1,\"4597\":1}}],[\"阿里巴巴java开发规约\",{\"1\":{\"934\":1}}],[\"阿里的\",{\"1\":{\"2573\":1,\"4951\":1}}],[\"阿里在实施这种方案时\",{\"1\":{\"2198\":1,\"4320\":1}}],[\"跨机房\",{\"1\":{\"2197\":1,\"4319\":1}}],[\"闭环\",{\"1\":{\"2197\":1,\"4319\":1}}],[\"各种特性也还不错\",{\"1\":{\"2561\":1,\"4939\":1}}],[\"各种中间件都要做改造\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"各自的端口号也相互独立\",{\"1\":{\"2415\":1}}],[\"各并发事务之间数据库是独立的\",{\"1\":{\"1082\":1,\"4115\":1}}],[\"必要时增加中间表进行关联\",{\"1\":{\"2892\":1,\"5270\":1}}],[\"必然会有冲突\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"必须按照申请锁的时间顺序来依次获得锁\",{\"1\":{\"3210\":1,\"4334\":1}}],[\"必须使用\",{\"0\":{\"2898\":1,\"5276\":1}}],[\"必须要禁止其他节点的读写操作\",{\"1\":{\"2158\":1,\"4763\":1}}],[\"必须要按前后的顺序执行\",{\"1\":{\"1307\":1,\"5499\":1}}],[\"必须依靠其他线程调用notify\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"必须指定事务应该如何传播\",{\"1\":{\"1097\":1,\"4130\":1}}],[\"必须是已经注册到\",{\"1\":{\"1065\":1,\"4098\":1}}],[\"必须逐个比较\",{\"1\":{\"717\":1}}],[\"必须从头或尾顺着链接找\",{\"1\":{\"716\":1}}],[\"切换机房的过程中\",{\"1\":{\"2195\":1,\"4317\":1}}],[\"迁移线程和用户线程同时执行\",{\"0\":{\"2189\":1,\"4311\":1}}],[\"库可以放到不同的实例上\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"库里的\",{\"1\":{\"1432\":1,\"1600\":1,\"1768\":1,\"1936\":1,\"4859\":1}}],[\"排行版的实现\",{\"1\":{\"2181\":1,\"4303\":1}}],[\"排行榜的实现\",{\"0\":{\"2180\":1,\"4302\":1}}],[\"虾皮\",{\"0\":{\"2180\":1,\"2183\":1,\"2185\":1,\"2187\":1,\"2189\":1,\"2191\":1,\"2194\":1,\"2201\":1,\"2203\":1,\"4302\":1,\"4305\":1,\"4307\":1,\"4309\":1,\"4311\":1,\"4313\":1,\"4316\":1,\"4323\":1,\"4325\":1}}],[\"清空购物车成功\",{\"1\":{\"2177\":1,\"4299\":1}}],[\"清除数据\",{\"1\":{\"1252\":1,\"5444\":1}}],[\"清除算法导致的空间碎片\",{\"1\":{\"371\":1}}],[\"清除算法\",{\"1\":{\"362\":1}}],[\"清除\",{\"0\":{\"324\":1},\"1\":{\"340\":1}}],[\"订单创建成功\",{\"1\":{\"2174\":1,\"4296\":1}}],[\"订单系统\",{\"1\":{\"2171\":1,\"4293\":1}}],[\"订阅\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"订阅2个topic\",{\"1\":{\"1275\":1,\"5467\":1}}],[\"怎么估出每秒钟能处理多少请求呢\",{\"1\":{\"3561\":1}}],[\"怎么改变执行的机房\",{\"0\":{\"2203\":1,\"4325\":1}}],[\"怎么解决这个问题呢\",{\"1\":{\"2998\":1,\"5376\":1}}],[\"怎么解决\",{\"0\":{\"2189\":1,\"4311\":1}}],[\"怎么实现一个点赞功能\",{\"0\":{\"2168\":1,\"4290\":1}}],[\"怎么去做一个一个操作呢\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"怎么要有三级缓存呢\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"稳定自适应轻量级锁状态下\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"稳定的分布式数据一致性解决方案\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"甚至有些情况下会降低查询效率\",{\"1\":{\"2668\":1,\"5046\":1}}],[\"甚至有人建议\",{\"1\":{\"605\":1}}],[\"甚至高于lock\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"携程\",{\"0\":{\"2164\":1,\"4286\":1}}],[\"决定了\",{\"1\":{\"2155\":1,\"4760\":1}}],[\"决定了set中可以保存哪些元素\",{\"1\":{\"694\":1}}],[\"某个节点被设置为head之后\",{\"1\":{\"3066\":1,\"4420\":1}}],[\"某个时间点\",{\"1\":{\"2964\":1,\"5342\":1}}],[\"某个数据流发生丢包了\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"某个机房可能断电\",{\"0\":{\"2191\":1,\"4313\":1}}],[\"某些节点之间不连通了\",{\"1\":{\"2152\":1,\"4757\":1}}],[\"某一节点的网络出现异常会导致整个事务处于阻塞状态\",{\"1\":{\"2053\":1,\"4658\":1}}],[\"某一范围的键\",{\"1\":{\"1036\":1}}],[\"某一值的邻近元素等\",{\"1\":{\"686\":1}}],[\"某一取值范围\",{\"1\":{\"686\":1}}],[\"仍然能够对外提供服务\",{\"1\":{\"2150\":1,\"4755\":1}}],[\"定时刷新\",{\"1\":{\"3460\":1,\"5729\":1}}],[\"定时任务这种\",{\"0\":{\"2203\":1,\"4325\":1}}],[\"定期删除+惰性\",{\"1\":{\"2996\":1,\"5374\":1}}],[\"定期删除对内存更加友好\",{\"1\":{\"2996\":1,\"5374\":1}}],[\"定期删除\",{\"1\":{\"2995\":1,\"5373\":1}}],[\"定格某一时刻的风景\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"定位到索引的节点\",{\"1\":{\"2634\":1,\"5012\":1}}],[\"定理\",{\"1\":{\"2147\":1,\"4752\":1}}],[\"定义一些策略\",{\"1\":{\"3300\":1,\"4565\":1}}],[\"定义这个的原因也是为了顺序性\",{\"1\":{\"2120\":1,\"4725\":1}}],[\"定义了java编译版本\",{\"1\":{\"1187\":1,\"4220\":1}}],[\"定义中包括了如下几个表示传播行为的常量\",{\"1\":{\"1097\":1,\"4130\":1}}],[\"定义⼀个静态变量指向⾃⼰类型\",{\"1\":{\"820\":1,\"4029\":1}}],[\"定义\",{\"1\":{\"612\":1}}],[\"挂\",{\"0\":{\"3433\":1}}],[\"挂掉的\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"挂了那就麻烦了\",{\"1\":{\"2134\":1,\"4739\":1}}],[\"挂了一个也能工作\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"挂了一个我们还能正常工作\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"挂了两个我们就不能正常工作了\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"挂了\",{\"1\":{\"2119\":1,\"2127\":1,\"2133\":1,\"4724\":1,\"4732\":1,\"4738\":1}}],[\"却被自动提交了\",{\"1\":{\"3466\":1,\"5735\":1}}],[\"却在这个时候挂了\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"却为业务模块所共同调用的逻辑或责任\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"肯定比\",{\"1\":{\"2139\":1,\"4744\":1}}],[\"肯定会提交刚刚\",{\"1\":{\"2136\":1,\"4741\":1}}],[\"聪明的同学肯定会质疑\",{\"1\":{\"2139\":1,\"4744\":1}}],[\"忘了请看上面的消息广播模式\",{\"1\":{\"2136\":1,\"4741\":1}}],[\"跳过那些已经被丢弃的提案\",{\"1\":{\"2134\":1,\"4739\":1}}],[\"跳转\",{\"1\":{\"200\":1}}],[\"给用户\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"给它起了个名字\",{\"1\":{\"2198\":1,\"4320\":1}}],[\"给自己投票为\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"给对象添加一个引用计数器\",{\"1\":{\"298\":1}}],[\"确保写磁盘操作结束才会返回\",{\"1\":{\"2987\":1,\"5365\":1}}],[\"确保已经被leader提交的提案最终能够被所有的follower提交是什么意思呢\",{\"1\":{\"2135\":1,\"4740\":1}}],[\"确保已经被leader提交的提案最终能够被所有的follower提交\",{\"1\":{\"2134\":1,\"4739\":1}}],[\"确认应答\",{\"1\":{\"2341\":1}}],[\"确认应答号\",{\"1\":{\"2339\":1}}],[\"确定送给哪个应用程序处理\",{\"1\":{\"2414\":1}}],[\"确定\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"确实是麻烦点\",{\"1\":{\"1314\":1,\"5506\":1}}],[\"投票已经超过半数\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"投票内容为服务器的\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"投票给自己\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"投票也是为了进行写请求\",{\"1\":{\"2111\":1,\"4716\":1}}],[\"宕机需要重新选举\",{\"1\":{\"2123\":1,\"4728\":1}}],[\"低32位表示事务id\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"低停顿时间是以牺牲吞吐量为代价的\",{\"1\":{\"370\":1}}],[\"问异步调用后\",{\"1\":{\"3405\":1,\"5685\":1}}],[\"问了jdbc的防止sql注入\",{\"1\":{\"3391\":1,\"5671\":1}}],[\"问了三大范式\",{\"1\":{\"3390\":1,\"5670\":1}}],[\"问了建立索引的原则\",{\"1\":{\"3389\":1,\"5669\":1}}],[\"问了\",{\"1\":{\"3388\":1,\"5668\":1}}],[\"问了mysql的存储引擎\",{\"1\":{\"3387\":1,\"5667\":1}}],[\"问c\",{\"1\":{\"3385\":1,\"5665\":1}}],[\"问什么是\",{\"1\":{\"3383\":1,\"3384\":1,\"5663\":1,\"5664\":1}}],[\"问string\",{\"1\":{\"3386\":1,\"5666\":1}}],[\"问swagger用过么\",{\"1\":{\"3382\":1,\"5662\":1}}],[\"问springboot\",{\"1\":{\"3381\":1,\"5661\":1}}],[\"问springboot的起步依赖starter有哪些以及作用\",{\"1\":{\"3380\":1,\"5660\":1}}],[\"问springboot的核心配置文件以及它们的区别\",{\"1\":{\"3379\":1,\"5659\":1}}],[\"问springboot异常怎么处理\",{\"1\":{\"3378\":1,\"5658\":1}}],[\"问es了解吗\",{\"1\":{\"3377\":1,\"5657\":1}}],[\"问kafka的分区\",{\"1\":{\"3376\":1,\"5656\":1}}],[\"问我同步和异步怎么实现的\",{\"1\":{\"3404\":1,\"5684\":1}}],[\"问我生成器用过没\",{\"1\":{\"3400\":1,\"5680\":1}}],[\"问我熟悉哪些框架\",{\"1\":{\"3375\":1,\"5655\":1}}],[\"问我想听听你对加班什么看法\",{\"1\":{\"3370\":1,\"5650\":1}}],[\"问你的期望薪资多少\",{\"1\":{\"3369\":1,\"5649\":1}}],[\"问你能接受加班吗\",{\"1\":{\"3368\":1,\"5648\":1}}],[\"问啥时候能来实习\",{\"1\":{\"3367\":1,\"5647\":1}}],[\"问\",{\"1\":{\"2536\":1,\"5634\":1}}],[\"问询到该\",{\"1\":{\"2492\":1,\"5590\":1}}],[\"问问\",{\"1\":{\"2117\":1,\"4722\":1}}],[\"问题描述\",{\"1\":{\"3540\":1,\"5809\":1}}],[\"问题思路\",{\"1\":{\"3520\":1,\"5789\":1}}],[\"问题二\",{\"1\":{\"3352\":1,\"4612\":1}}],[\"问题一\",{\"1\":{\"3348\":1,\"4606\":1}}],[\"问题不大\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"问题的利器\",{\"1\":{\"1383\":1,\"1551\":1,\"1719\":1,\"1887\":1,\"4810\":1}}],[\"问题\",{\"0\":{\"3112\":1,\"4394\":1},\"1\":{\"1123\":1,\"1396\":1,\"1564\":1,\"1732\":1,\"1900\":1,\"2516\":1,\"3129\":1,\"4156\":1,\"4411\":1,\"4823\":1,\"5614\":1}}],[\"问题体现\",{\"1\":{\"1115\":1,\"4148\":1}}],[\"问题出在哪里\",{\"0\":{\"545\":1}}],[\"广播问询\",{\"1\":{\"2497\":1,\"5595\":1}}],[\"广播通信\",{\"1\":{\"2404\":1}}],[\"广播\",{\"1\":{\"2117\":1,\"4722\":1}}],[\"唯一索引的属性列不能出现重复的数据\",{\"1\":{\"2625\":1,\"5003\":1}}],[\"唯一索引也是一种约束\",{\"1\":{\"2625\":1,\"5003\":1}}],[\"唯一索引\",{\"1\":{\"2612\":1,\"2623\":1,\"2625\":1,\"4990\":1,\"5001\":1,\"5003\":1}}],[\"唯一的写请求处理者\",{\"1\":{\"2111\":1,\"4716\":1}}],[\"唯独是\",{\"1\":{\"1133\":1,\"4166\":1}}],[\"领导者\",{\"1\":{\"2110\":1,\"4715\":1}}],[\"架构呢\",{\"1\":{\"2158\":1,\"4763\":1}}],[\"架构也支持\",{\"1\":{\"2157\":1,\"4762\":1}}],[\"架构\",{\"0\":{\"2107\":1,\"4712\":1},\"1\":{\"2157\":5,\"4762\":5}}],[\"架构中的主体部分\",{\"1\":{\"2022\":1,\"4627\":1}}],[\"找到了\",{\"1\":{\"2588\":1,\"4966\":1}}],[\"找到\",{\"1\":{\"2106\":1,\"2854\":1,\"4711\":1,\"5232\":1}}],[\"找到处理器映射\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"崩溃退出与重启等异常情况时\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"崩溃恢复模式\",{\"0\":{\"2121\":1,\"4726\":1}}],[\"崩溃恢复\",{\"1\":{\"2105\":1,\"2108\":1,\"2114\":1,\"2131\":1,\"2137\":1,\"2142\":1,\"4710\":1,\"4713\":1,\"4719\":1,\"4736\":1,\"4742\":1,\"4747\":1}}],[\"崩溃恢复和消息广播\",{\"0\":{\"2103\":1,\"4708\":1}}],[\"协议运行在\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"协议实现的\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"协议实现可靠传输\",{\"1\":{\"2384\":1}}],[\"协议就是解决这一问题的\",{\"1\":{\"2477\":1,\"5575\":1}}],[\"协议就会退出恢复模式\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"协议就会进入恢复模式并选举产生新的\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"协议工作时有一个大前提\",{\"1\":{\"2470\":1,\"5568\":1}}],[\"协议解决了\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"协议号\",{\"1\":{\"2414\":1}}],[\"协议发展的\",{\"1\":{\"2409\":1}}],[\"协议传输时\",{\"1\":{\"2353\":1}}],[\"协议可以一个主机同时向多个主机发送消息\",{\"1\":{\"2351\":1}}],[\"协议来实现可靠的传输\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"协议来实现分布式数据一致性\",{\"1\":{\"2102\":1,\"4707\":1}}],[\"协议来获取主机\",{\"1\":{\"2478\":1,\"5576\":1}}],[\"协议来负责\",{\"1\":{\"2346\":1}}],[\"协议\",{\"0\":{\"2345\":1},\"1\":{\"2296\":1,\"2384\":1,\"2469\":1,\"2492\":1,\"2497\":1,\"2521\":1,\"5567\":1,\"5590\":1,\"5595\":1,\"5619\":1}}],[\"协议是一个广播问询\",{\"1\":{\"2486\":1,\"5584\":1}}],[\"协议是基于\",{\"1\":{\"2409\":1}}],[\"协议是如何处理写请求的\",{\"1\":{\"2116\":1,\"4721\":1}}],[\"协议是为分布式协调服务\",{\"1\":{\"2102\":1,\"4707\":1}}],[\"协议中对\",{\"1\":{\"2114\":1,\"4719\":1}}],[\"协议之前\",{\"1\":{\"2110\":1,\"4715\":1}}],[\"协议包括两种基本的模式\",{\"1\":{\"2104\":1,\"4709\":1}}],[\"协议两种基本的模式\",{\"0\":{\"2103\":1,\"4708\":1}}],[\"协议介绍\",{\"0\":{\"2101\":1,\"4706\":1}}],[\"协议的网站在搜索结果中可能会被优先显示\",{\"1\":{\"2522\":1,\"5620\":1}}],[\"协议的网站\",{\"1\":{\"2522\":1,\"5620\":1}}],[\"协议的特性\",{\"1\":{\"2515\":1,\"2516\":1,\"5613\":1,\"5614\":1}}],[\"协议的服务器启动后加入到集群中时\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"协议的\",{\"1\":{\"2099\":1,\"4704\":1,\"5530\":1}}],[\"协调各个微服务\",{\"1\":{\"2058\":1,\"4663\":1}}],[\"协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者\",{\"1\":{\"1267\":1,\"5459\":1}}],[\"选项\",{\"1\":{\"2389\":2,\"2407\":1}}],[\"选\",{\"0\":{\"2153\":1,\"4758\":1},\"1\":{\"2155\":1,\"4760\":1}}],[\"选举方式之后我们再来了解一下\",{\"1\":{\"2131\":1,\"4736\":1}}],[\"选举可以分为两个不同的阶段\",{\"1\":{\"2123\":1,\"4728\":1}}],[\"选举算法\",{\"1\":{\"2122\":1,\"4727\":1}}],[\"选举\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"选择合适的字段创建索引\",{\"1\":{\"2658\":1,\"5036\":1}}],[\"选择一个适合的\",{\"1\":{\"1065\":1,\"4098\":1}}],[\"选择一个合适的handleradapter\",{\"1\":{\"1058\":1,\"4091\":1}}],[\"选择\",{\"0\":{\"2164\":1,\"4286\":1},\"1\":{\"606\":1,\"2159\":1,\"4764\":1}}],[\"集群\",{\"1\":{\"3047\":1,\"5425\":1}}],[\"集群中\",{\"1\":{\"2111\":1,\"4716\":1}}],[\"集群管理\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"集合\",{\"0\":{\"2935\":1,\"5313\":1},\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"2913\":1,\"4807\":1,\"5291\":1}}],[\"集合给内核\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"集合运算等功能\",{\"1\":{\"683\":1}}],[\"过度切换\",{\"1\":{\"3339\":1,\"4596\":1}}],[\"过期的数据的删除策略了解么\",{\"0\":{\"2991\":1,\"5369\":1}}],[\"过滤掉不符合条件的记录\",{\"1\":{\"2656\":1,\"5034\":1}}],[\"过滤器是对单个服务而言\",{\"1\":{\"2070\":1,\"4675\":1}}],[\"过滤器\",{\"1\":{\"816\":1,\"4025\":1}}],[\"过多有什么危害\",{\"0\":{\"2437\":1},\"1\":{\"2322\":1}}],[\"过程\",{\"1\":{\"2090\":1,\"4695\":1}}],[\"核心数多出来的一个线程是为了防止线程偶发的缺页中断\",{\"1\":{\"3328\":1,\"4585\":1}}],[\"核心数\",{\"1\":{\"3328\":1,\"4585\":1}}],[\"核心线程外的线程不会立即销毁\",{\"1\":{\"3294\":1,\"4558\":1}}],[\"核心线程数默认是不会被回收的\",{\"1\":{\"3353\":1,\"4613\":1}}],[\"核心线程数会被回收吗\",{\"1\":{\"3352\":1,\"4612\":1}}],[\"核心线程数\",{\"1\":{\"3201\":1}}],[\"核心思想是\",{\"1\":{\"3070\":1,\"4424\":1}}],[\"核心\",{\"1\":{\"2200\":1,\"4322\":1}}],[\"核心就是通过一系列的封装和处理\",{\"1\":{\"2087\":1,\"4692\":1}}],[\"核心配置文件\",{\"0\":{\"1160\":1,\"4193\":1}}],[\"成为正式标准\",{\"1\":{\"5530\":1}}],[\"成功则返回\",{\"1\":{\"3082\":1,\"3083\":1,\"3085\":1,\"4438\":1,\"4439\":1,\"4441\":1}}],[\"成功请求数等运行指标记录下来\",{\"1\":{\"2083\":1,\"4688\":1}}],[\"成多个的\",{\"1\":{\"2353\":1}}],[\"成年人的崩溃如此简单\",{\"1\":{\"484\":1,\"3935\":1}}],[\"防止密码被窃听\",{\"1\":{\"3592\":1}}],[\"防止线程长时间占用\",{\"1\":{\"3255\":1,\"4484\":1}}],[\"防止局部指令重排序\",{\"1\":{\"3140\":1,\"4453\":1}}],[\"防止其他线程对这个表结构做了变更\",{\"1\":{\"2727\":1,\"5105\":1}}],[\"防止雪崩\",{\"1\":{\"2202\":1,\"4324\":1}}],[\"防止不同hashcode的高位不同但低位相同导致的hash冲突\",{\"1\":{\"988\":1}}],[\"防雪崩利器\",{\"1\":{\"2078\":1,\"4683\":1}}],[\"半开状态\",{\"1\":{\"2075\":1,\"4680\":1}}],[\"达到压缩的目的\",{\"1\":{\"2982\":1,\"5360\":1}}],[\"达到一定的次数无法调用\",{\"1\":{\"2074\":1,\"4679\":1}}],[\"达到7的概率为0\",{\"1\":{\"880\":1,\"3988\":1}}],[\"打开状态\",{\"1\":{\"2074\":1,\"4679\":1}}],[\"打包groovy文件到jar\",{\"1\":{\"1198\":1,\"4231\":1}}],[\"雪崩效应\",{\"1\":{\"2072\":1,\"4677\":1}}],[\"发布文章集成添加延迟队列接口\",{\"1\":{\"3529\":1,\"5798\":1}}],[\"发布文章功能\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"发起请求问\",{\"1\":{\"2539\":1,\"5637\":1}}],[\"发过来的链路层帧\",{\"1\":{\"2494\":1,\"5592\":1}}],[\"发车\",{\"1\":{\"2292\":1}}],[\"发生了回滚\",{\"1\":{\"2819\":1,\"5197\":1}}],[\"发生冲突\",{\"1\":{\"2748\":1,\"5126\":1}}],[\"发生冲突了\",{\"1\":{\"2158\":2,\"4763\":2}}],[\"发生隐式转换\",{\"1\":{\"2683\":1,\"5061\":1}}],[\"发生在三次握手的哪一步\",{\"0\":{\"2446\":1},\"1\":{\"2331\":1}}],[\"发生连锁效应\",{\"1\":{\"2072\":1,\"4677\":1}}],[\"发送方和接收方必须商定好秘钥\",{\"1\":{\"3653\":1}}],[\"发送给目标接口\",{\"1\":{\"2493\":1,\"5591\":1}}],[\"发送给主机\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"发送一个广播问询分组\",{\"1\":{\"2489\":1,\"5587\":1}}],[\"发送一条半事务消息到mq服务器\",{\"1\":{\"2171\":1,\"4293\":1}}],[\"发送主机\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"发送和接受的\",{\"1\":{\"2484\":1,\"5582\":1}}],[\"发送和接收的\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"发送到下一跳上\",{\"1\":{\"2478\":1,\"5576\":1}}],[\"发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收\",{\"1\":{\"2339\":1}}],[\"发送rollback\",{\"1\":{\"2175\":1,\"4297\":1}}],[\"发送的\",{\"1\":{\"2136\":1,\"2481\":2,\"2484\":1,\"4741\":1,\"5579\":2,\"5582\":1}}],[\"发送\",{\"1\":{\"2136\":1,\"2457\":1,\"2476\":1,\"2550\":1,\"4741\":1,\"5555\":1,\"5574\":1}}],[\"发现被占用的锁是重量级锁\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"发现预期值\",{\"1\":{\"3102\":1,\"4383\":1}}],[\"发现a不等于v的实际值\",{\"1\":{\"3100\":1,\"4379\":1}}],[\"发现和前一次读到的记录数量不一样了\",{\"1\":{\"2829\":1,\"5207\":1}}],[\"发现共有\",{\"1\":{\"2827\":1,\"5205\":1}}],[\"发现后置是\",{\"1\":{\"2538\":1,\"5636\":1}}],[\"发现缓存没有\",{\"0\":{\"2201\":1,\"4323\":1}}],[\"发现\",{\"1\":{\"2125\":1,\"2479\":1,\"4730\":1,\"5577\":1}}],[\"发出的投票为\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"发挥了两者的优势\",{\"1\":{\"954\":1}}],[\"网上有这样一个例子\",{\"1\":{\"3199\":1}}],[\"网上文章不少说\",{\"1\":{\"1384\":1,\"1552\":1,\"1720\":1,\"1888\":1,\"4811\":1}}],[\"网络层\",{\"1\":{\"2477\":1,\"5575\":1}}],[\"网络分区\",{\"1\":{\"2152\":1,\"4757\":1}}],[\"网关过滤器解析token\",{\"1\":{\"3482\":1,\"3493\":1,\"5751\":1,\"5762\":1}}],[\"网关过滤器接收用户携带的token\",{\"1\":{\"3481\":1,\"3492\":1,\"5750\":1,\"5761\":1}}],[\"网关过滤器进行判断\",{\"1\":{\"3479\":1,\"3490\":1,\"5748\":1,\"5759\":1}}],[\"网关搭建\",{\"0\":{\"3488\":1,\"5757\":1},\"1\":{\"3447\":1,\"5716\":1}}],[\"网关是对所有服务的请求进行分析过滤\",{\"1\":{\"2070\":1,\"4675\":1}}],[\"网关与过滤器有什么区别\",{\"1\":{\"2069\":1,\"4674\":1}}],[\"配合config仓库修改的一种stream实现\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"配置文件\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"配置文件中默认有此下配置\",{\"1\":{\"2965\":1,\"5343\":1}}],[\"配置管理\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"配置中心\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"配置监听器的方法\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"配置的所有相关的对象\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"配置项的相关说明详见\",{\"1\":{\"152\":1,\"156\":1,\"3806\":1}}],[\"配置\",{\"0\":{\"32\":1,\"3686\":1},\"1\":{\"2930\":2,\"2945\":2,\"5308\":2,\"5323\":2}}],[\"声明式服务调用本质上就是ribbon+hystrix\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"特点进行延迟\",{\"1\":{\"3518\":1,\"5787\":1}}],[\"特别是长事务而言\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"特别是对于返回结果集比较大的子查询\",{\"1\":{\"2904\":1,\"5282\":1}}],[\"特性有订阅发布\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"特性有服务降级\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"特性有区域亲和\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"特性有失效剔除\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"特有\",{\"1\":{\"1047\":1,\"4080\":1}}],[\"治理成本高\",{\"1\":{\"2064\":1,\"4669\":1}}],[\"产生大量的慢查询\",{\"1\":{\"2904\":1,\"5282\":1}}],[\"产生影响\",{\"1\":{\"2522\":1,\"5620\":1}}],[\"产生消息\",{\"1\":{\"2171\":1,\"4293\":1}}],[\"产品迭代周期更短\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"产出于spring大家族\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"减少数据库的压力\",{\"1\":{\"3037\":1,\"5415\":1}}],[\"减少回表次数\",{\"1\":{\"2656\":1,\"5034\":1}}],[\"减少了网络开销\",{\"1\":{\"2511\":1,\"5609\":1}}],[\"减少了网络延迟和提高了性能\",{\"1\":{\"2509\":1,\"5607\":1}}],[\"减少了传输的数据量和带宽消耗\",{\"1\":{\"2510\":1,\"5608\":1}}],[\"减少了新人的学习成本\",{\"1\":{\"2045\":1,\"4650\":1}}],[\"减少了\",{\"1\":{\"1428\":1,\"1596\":1,\"1764\":1,\"1932\":1,\"4855\":1}}],[\"减少了内核和用户空间大量的数据拷贝和内存分配\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"减轻团队的成本\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"耦合度比较低\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"遇到问题很容易找到解决方案\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"教程很丰富\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"社区活跃度很高\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"微服务\",{\"0\":{\"5849\":1}}],[\"微服务之前架设的网关服务\",{\"1\":{\"3449\":1,\"5718\":1}}],[\"微服务过多\",{\"1\":{\"2064\":1,\"4669\":1}}],[\"微服务可以是跨平台的\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"微服务网关等\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"微服务在cap理论中采用的ap架构\",{\"1\":{\"2050\":1,\"4655\":1}}],[\"微服务是按照业务进行拆分的\",{\"1\":{\"2048\":1,\"4653\":1}}],[\"微服务是一个分布式系统\",{\"1\":{\"2043\":1,\"4648\":1}}],[\"微服务系统的微服务单元具有很强的横向拓展能力\",{\"1\":{\"2046\":1,\"4651\":1}}],[\"微服务的框架那么多比如\",{\"1\":{\"2060\":1,\"4665\":1}}],[\"微服务的复杂度\",{\"1\":{\"2052\":1,\"4657\":1}}],[\"微服务的不足\",{\"1\":{\"2051\":1,\"4656\":1}}],[\"微服务的修改和部署对其他服务没有影响\",{\"1\":{\"2049\":1,\"4654\":1}}],[\"微服务的每个服务单元是独立部署的\",{\"1\":{\"2049\":1,\"4654\":1}}],[\"微服务的优势\",{\"1\":{\"2044\":1,\"4649\":1}}],[\"微服务的特点\",{\"1\":{\"2036\":1,\"4641\":1}}],[\"微服务的概念\",{\"0\":{\"2033\":1,\"4638\":1}}],[\"微服务就是将工程根据不同的业务规则拆分成微服务\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"部署在不同的服务器上\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"部署在同一个服务器\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"部分结果\",{\"1\":{\"204\":1}}],[\"易部署和易维护的分布式系统开发工具包\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"经理技术面+hr面\",{\"0\":{\"3433\":1}}],[\"经常应用到md5\",{\"1\":{\"3642\":1}}],[\"经常一起使用的列放到一个表中\",{\"0\":{\"2879\":1,\"5257\":1}}],[\"经常用于连接的字段可能是一些外键列\",{\"1\":{\"2663\":1,\"5041\":1}}],[\"经常查询的不变的数据\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"经得起实际考验的服务框架组合起来\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"经过扰动计算之后\",{\"1\":{\"994\":1}}],[\"经过简单的获取hashcode后\",{\"1\":{\"989\":1}}],[\"经过多次\",{\"1\":{\"235\":1}}],[\"断路器关闭\",{\"1\":{\"2075\":1,\"4680\":1}}],[\"断路器会将部分请求发给该服务\",{\"1\":{\"2075\":1,\"4680\":1}}],[\"断路器完全打开\",{\"1\":{\"2074\":1,\"4679\":1}}],[\"断路器有三种状态\",{\"1\":{\"2073\":1,\"4678\":1}}],[\"断路器等\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"断路器\",{\"1\":{\"2032\":1,\"2062\":1,\"4637\":1,\"4667\":1}}],[\"负数表示失败\",{\"1\":{\"3084\":1,\"4440\":1}}],[\"负载均衡层\",{\"1\":{\"2192\":1,\"4314\":1}}],[\"负载均衡\",{\"1\":{\"2032\":1,\"2096\":1,\"4637\":1,\"4701\":1}}],[\"负责监听和分发事件\",{\"1\":{\"1436\":1,\"1604\":1,\"1772\":1,\"1940\":1,\"4863\":1}}],[\"负责加载当前应用\",{\"1\":{\"404\":1,\"3859\":1}}],[\"智能路由\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"镜像和容器的相关操作\",{\"0\":{\"2028\":1,\"4633\":1}}],[\"属于密钥持有者\",{\"1\":{\"3647\":1}}],[\"属于行级别锁\",{\"1\":{\"2799\":1,\"5177\":1}}],[\"属于操作系统层面的虚拟化技术\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"属性\",{\"1\":{\"2949\":1,\"5327\":1}}],[\"属性记录了字符串长度\",{\"1\":{\"2921\":1,\"5299\":1}}],[\"属性的值而不是空字符来判断字符串是否结束\",{\"1\":{\"2920\":1,\"5298\":1}}],[\"属性实现的\",{\"1\":{\"2754\":1,\"5132\":1}}],[\"属性时\",{\"1\":{\"1129\":1,\"4162\":1}}],[\"演进\",{\"1\":{\"1506\":1,\"1674\":1,\"1842\":1,\"2010\":1,\"4933\":1}}],[\"演示\",{\"1\":{\"31\":1,\"3685\":1}}],[\"老子不去\",{\"1\":{\"3393\":1,\"5673\":1}}],[\"老子是来面试的\",{\"1\":{\"3373\":1,\"5653\":1}}],[\"老三\",{\"1\":{\"2541\":1,\"5639\":1}}],[\"老二\",{\"1\":{\"2539\":1,\"5637\":1}}],[\"老大\",{\"1\":{\"2537\":1,\"5635\":1}}],[\"老规矩\",{\"1\":{\"1496\":1,\"1664\":1,\"1832\":1,\"2000\":1,\"4923\":1}}],[\"老年代使用\",{\"1\":{\"340\":1}}],[\"老年代地址是连续的\",{\"1\":{\"283\":1}}],[\"老年代垃圾收集称为\",{\"1\":{\"237\":1}}],[\"老年代的内存空间应该要比年轻代更大\",{\"1\":{\"226\":1}}],[\"老年代\",{\"0\":{\"236\":1},\"1\":{\"226\":1}}],[\"聊完单\",{\"1\":{\"1490\":1,\"1658\":1,\"1826\":1,\"1994\":1,\"4917\":1}}],[\"闻其名不如看其图\",{\"1\":{\"1478\":1,\"1496\":1,\"1646\":1,\"1664\":1,\"1814\":1,\"1832\":1,\"1982\":1,\"2000\":1,\"4905\":1,\"4923\":1}}],[\"收到顶级域名服务器的地址后\",{\"1\":{\"2539\":1,\"5637\":1}}],[\"收到来自本地\",{\"1\":{\"2538\":1,\"5636\":1}}],[\"收到的数据的序列号\",{\"1\":{\"2339\":1}}],[\"收到\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"收到了查询分组之后\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"收到了发现自己的投票已经超过半数就把自己设为\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"收到了\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"收到之后发现和自己的一样无需做更改\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"收到事件后通过\",{\"1\":{\"1466\":1,\"1481\":1,\"1499\":1,\"1634\":1,\"1649\":1,\"1667\":1,\"1802\":1,\"1817\":1,\"1835\":1,\"1970\":1,\"1985\":1,\"2003\":1,\"4893\":1,\"4908\":1,\"4926\":1}}],[\"收集器线程都可以与用户线程一起工作\",{\"1\":{\"368\":1}}],[\"收集器的运作大致可划分为以下几个步骤\",{\"1\":{\"376\":1}}],[\"收集器的老年代版本\",{\"1\":{\"358\":1,\"360\":1}}],[\"收集器的多线程版本\",{\"1\":{\"351\":1}}],[\"收集器配合工作\",{\"1\":{\"352\":1}}],[\"收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内\",{\"1\":{\"349\":1}}],[\"收集器\",{\"0\":{\"345\":1,\"350\":1,\"354\":1,\"357\":1,\"359\":1,\"361\":1,\"372\":1},\"1\":{\"352\":1,\"356\":1,\"373\":1}}],[\"业务只能读数据\",{\"1\":{\"2699\":1,\"5077\":1}}],[\"业务实现双活\",{\"1\":{\"2200\":1,\"4322\":1}}],[\"业务先实现双活\",{\"1\":{\"2200\":1,\"4322\":1}}],[\"业务处理主要是在内存中完成\",{\"1\":{\"1475\":1,\"1643\":1,\"1811\":1,\"1979\":1,\"4902\":1}}],[\"业务处理\",{\"1\":{\"1464\":1,\"1469\":1,\"1502\":1,\"1632\":1,\"1637\":1,\"1670\":1,\"1800\":1,\"1805\":1,\"1838\":1,\"1968\":1,\"1973\":1,\"2006\":1,\"4891\":1,\"4896\":1,\"4929\":1}}],[\"业务逻辑\",{\"1\":{\"1437\":1,\"1605\":1,\"1773\":1,\"1941\":1,\"4864\":1}}],[\"剩下的\",{\"1\":{\"1447\":1,\"1615\":1,\"1783\":1,\"1951\":1,\"4874\":1}}],[\"理论上\",{\"1\":{\"2482\":1,\"5580\":1}}],[\"理论上就可以有\",{\"1\":{\"1441\":1,\"1609\":1,\"1777\":1,\"1945\":1,\"4868\":1}}],[\"理论中分区容错性\",{\"1\":{\"2156\":1,\"4761\":1}}],[\"理论诞生\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"理解为threadlocal\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"理解成一个数据快照\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"理解了linkedlist和arraylist的特点\",{\"1\":{\"720\":1}}],[\"理解下pc计数器\",{\"1\":{\"191\":1}}],[\"灵活在于\",{\"1\":{\"1438\":1,\"1606\":1,\"1774\":1,\"1942\":1,\"4865\":1}}],[\"灵活性\",{\"1\":{\"837\":1,\"4046\":1}}],[\"版本后才引入\",{\"1\":{\"3107\":1,\"4389\":1}}],[\"版本后增加以下两种\",{\"1\":{\"3008\":1,\"5386\":1}}],[\"版本开始引入\",{\"1\":{\"3128\":1,\"4410\":1}}],[\"版本开始\",{\"1\":{\"2760\":1,\"5138\":1}}],[\"版本开始起\",{\"1\":{\"1422\":1,\"1590\":1,\"1758\":1,\"1926\":1,\"4849\":1}}],[\"版本中提供的一项索引优化功能\",{\"1\":{\"2656\":1,\"5034\":1}}],[\"版本之前\",{\"1\":{\"2896\":1,\"5274\":1}}],[\"版本之前采用的正是\",{\"1\":{\"1475\":1,\"1643\":1,\"1811\":1,\"1979\":1,\"4902\":1}}],[\"版本之后\",{\"1\":{\"2562\":1,\"2932\":1,\"4940\":1,\"5310\":1}}],[\"版本的升级\",{\"1\":{\"865\":1,\"4074\":1}}],[\"技术栈的具体应用\",{\"1\":{\"3448\":1,\"5717\":1}}],[\"技术栈是什么\",{\"1\":{\"3408\":1,\"5688\":1}}],[\"技术的情况下\",{\"1\":{\"1422\":1,\"1590\":1,\"1758\":1,\"1926\":1,\"4849\":1}}],[\"技术\",{\"1\":{\"1421\":1,\"1427\":1,\"1431\":1,\"1589\":1,\"1595\":1,\"1599\":1,\"1757\":1,\"1763\":1,\"1767\":1,\"1925\":1,\"1931\":1,\"1935\":1,\"4848\":1,\"4854\":1,\"4858\":1}}],[\"次方\",{\"1\":{\"2371\":3}}],[\"次都是由\",{\"1\":{\"1428\":1,\"1596\":1,\"1764\":1,\"1932\":1,\"4855\":1}}],[\"次的数据拷贝过程\",{\"1\":{\"1428\":1,\"1596\":1,\"1764\":1,\"1932\":1,\"4855\":1}}],[\"次数据拷贝\",{\"1\":{\"1419\":1,\"1425\":1,\"1587\":1,\"1593\":1,\"1755\":1,\"1761\":1,\"1923\":1,\"1929\":1,\"4846\":1,\"4852\":1}}],[\"次\",{\"1\":{\"1413\":1,\"1581\":1,\"1749\":1,\"1917\":1,\"4840\":1}}],[\"次上下文切换和数据拷贝次数\",{\"1\":{\"1428\":2,\"1596\":2,\"1764\":2,\"1932\":2,\"4855\":2}}],[\"次上下文切换的开销\",{\"1\":{\"1418\":1,\"1586\":1,\"1754\":1,\"1922\":1,\"4845\":1}}],[\"次上下文切换\",{\"1\":{\"1413\":1,\"1419\":1,\"1581\":1,\"1587\":1,\"1749\":1,\"1755\":1,\"1917\":1,\"1923\":1,\"4840\":1,\"4846\":1}}],[\"次回收标记\",{\"1\":{\"268\":1}}],[\"搬运的\",{\"1\":{\"1411\":1,\"1579\":1,\"1747\":1,\"1915\":1,\"4838\":1}}],[\"拷贝到网卡的缓冲区里\",{\"1\":{\"1411\":1,\"1579\":1,\"1747\":1,\"1915\":1,\"4838\":1}}],[\"缓存击穿导致的原因主要是某个热点数据不存在与缓存中\",{\"1\":{\"3054\":1,\"5432\":1}}],[\"缓存击穿中\",{\"1\":{\"3033\":1,\"3040\":1,\"5411\":1,\"5418\":1}}],[\"缓存永不失效\",{\"1\":{\"3051\":1,\"5429\":1}}],[\"缓存服务宕机也会导致缓存雪崩现象\",{\"1\":{\"3044\":1,\"5422\":1}}],[\"缓存在同一时间大面积的失效\",{\"1\":{\"3043\":1,\"5421\":1}}],[\"缓存穿透中\",{\"1\":{\"3039\":1,\"5417\":1}}],[\"缓存穿透和缓存击穿有什么区别\",{\"0\":{\"3038\":1,\"5416\":1}}],[\"缓存穿透说简单点就是大量请求的\",{\"1\":{\"3015\":1,\"5393\":1}}],[\"缓存无效\",{\"1\":{\"3018\":1,\"5396\":1}}],[\"缓存雪崩和缓存击穿比较像\",{\"1\":{\"3054\":1,\"5432\":1}}],[\"缓存雪崩和缓存击穿有什么区别\",{\"0\":{\"3053\":1,\"5431\":1}}],[\"缓存雪崩描述的就是这样一个简单的场景\",{\"1\":{\"3043\":1,\"5421\":1}}],[\"缓存雪崩\",{\"0\":{\"3013\":1,\"5391\":1}}],[\"缓存机制\",{\"1\":{\"2506\":1,\"5604\":1}}],[\"缓存一致性解决\",{\"0\":{\"2162\":1,\"4284\":1}}],[\"缓存中获取数据将不再从数据库查询\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"缓冲区根据对应的持久化方式\",{\"1\":{\"2981\":1,\"5359\":1}}],[\"缓冲区的状态\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"缓冲区的数据写入到\",{\"1\":{\"2980\":1,\"5358\":1}}],[\"缓冲区的过程\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"缓冲区\",{\"1\":{\"1424\":1,\"1592\":1,\"1760\":1,\"1928\":1,\"2974\":1,\"4851\":1,\"5352\":1}}],[\"缓冲区描述符和数据长度传到\",{\"1\":{\"1424\":1,\"1592\":1,\"1760\":1,\"1928\":1,\"4851\":1}}],[\"缓冲区里\",{\"1\":{\"1413\":1,\"1419\":1,\"1581\":1,\"1587\":1,\"1749\":1,\"1755\":1,\"1917\":1,\"1923\":1,\"4840\":1,\"4846\":1}}],[\"缓冲区里的数据\",{\"1\":{\"1411\":1,\"1579\":1,\"1747\":1,\"1915\":1,\"4838\":1}}],[\"缓冲区中\",{\"1\":{\"1410\":1,\"1424\":1,\"1578\":1,\"1592\":1,\"1746\":1,\"1760\":1,\"1914\":1,\"1928\":1,\"2979\":1,\"4837\":1,\"4851\":1,\"5357\":1}}],[\"映射记录\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"映射\",{\"1\":{\"1406\":1,\"1574\":1,\"1742\":1,\"1910\":1,\"4833\":1}}],[\"种数据淘汰策略\",{\"1\":{\"3001\":1,\"5379\":1}}],[\"种持久化方式\",{\"1\":{\"2959\":1,\"5337\":1}}],[\"种特殊数据类型\",{\"1\":{\"2914\":1,\"5292\":1}}],[\"种基础数据类型\",{\"1\":{\"2913\":1,\"5291\":1}}],[\"种隔离级别\",{\"1\":{\"2844\":1,\"5222\":1}}],[\"种隔离级别的支持不一样\",{\"1\":{\"2844\":1,\"5222\":1}}],[\"种方案选择\",{\"1\":{\"1441\":1,\"1609\":1,\"1777\":1,\"1945\":1,\"4868\":1}}],[\"种\",{\"1\":{\"1399\":1,\"1567\":1,\"1735\":1,\"1903\":1,\"2505\":1,\"4826\":1,\"5603\":1}}],[\"万余额的账号个数就变为\",{\"1\":{\"2828\":1,\"5206\":1}}],[\"万的账号\",{\"1\":{\"2828\":1,\"5206\":1}}],[\"万的记录\",{\"1\":{\"2827\":1,\"2829\":1,\"5205\":1,\"5207\":1}}],[\"万个请求的问题\",{\"1\":{\"1396\":1,\"1564\":1,\"1732\":1,\"1900\":1,\"4823\":1}}],[\"万请求\",{\"1\":{\"1396\":1,\"1564\":1,\"1732\":1,\"1900\":1,\"4823\":1}}],[\"错误类型为\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"搭配使用\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"描述符上有可读事件发生时\",{\"1\":{\"1388\":1,\"1556\":1,\"1724\":1,\"1892\":1,\"4815\":1}}],[\"水平触发的意思是只要满足事件的条件\",{\"1\":{\"1391\":1,\"1559\":1,\"1727\":1,\"1895\":1,\"4818\":1}}],[\"水平触发\",{\"1\":{\"1386\":1,\"1554\":1,\"1722\":1,\"1890\":1,\"4813\":1}}],[\"压缩性\",{\"1\":{\"3584\":1}}],[\"压缩列表数据结构已经废弃了\",{\"1\":{\"2947\":1,\"2955\":1,\"5325\":1,\"5333\":1}}],[\"压缩文件这样的二进制数据\",{\"1\":{\"2920\":1,\"5298\":1}}],[\"压缩\",{\"1\":{\"2561\":1,\"4939\":1}}],[\"压根就没有使用共享内存这个玩意\",{\"1\":{\"1385\":1,\"1553\":1,\"1721\":1,\"1889\":1,\"4812\":1}}],[\"压栈\",{\"1\":{\"205\":1}}],[\"增删改一般时间复杂度是\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"增加了轮询\",{\"1\":{\"3213\":1,\"4337\":1}}],[\"增加的方式是\",{\"1\":{\"889\":1}}],[\"增加\",{\"1\":{\"656\":1,\"895\":1,\"1172\":1,\"3997\":1,\"4205\":1}}],[\"传递了变量值\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"传入一个\",{\"1\":{\"3217\":1,\"4341\":1}}],[\"传入的邮箱格式不对的时候直接返回错误消息给客户端等等\",{\"1\":{\"3017\":1,\"5395\":1}}],[\"传入参数\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"传输过程中即便请求被截获\",{\"1\":{\"3600\":1}}],[\"传输过程中一旦请求被截获\",{\"1\":{\"3594\":1}}],[\"传输协议\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"传输协议实现一个可靠的传输协议\",{\"1\":{\"2384\":1}}],[\"传输方式\",{\"1\":{\"2391\":1}}],[\"传输数据前先要建立连接\",{\"1\":{\"2377\":1}}],[\"传输层有两个传输协议分别是\",{\"1\":{\"2413\":1}}],[\"传输层的端口号的作用\",{\"1\":{\"2412\":1}}],[\"传输层\",{\"1\":{\"2346\":1}}],[\"传给内核\",{\"1\":{\"1376\":1,\"1544\":1,\"1712\":1,\"1880\":1,\"4803\":1}}],[\"传播行为\",{\"1\":{\"1086\":1,\"4119\":1}}],[\"秒内就可以处理上千个请求\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"套接字是支持\",{\"1\":{\"1370\":1,\"1538\":1,\"1706\":1,\"1874\":1,\"4797\":1}}],[\"套接字\",{\"1\":{\"1370\":1,\"1538\":1,\"1706\":1,\"1874\":1,\"4797\":1}}],[\"更强大\",{\"1\":{\"3213\":1,\"4337\":1}}],[\"更灵活\",{\"1\":{\"3213\":1,\"4337\":1}}],[\"更加友好\",{\"1\":{\"2996\":1,\"5374\":1}}],[\"更大的整型数据\",{\"1\":{\"2889\":1,\"5267\":1}}],[\"更新一个变量的时候\",{\"1\":{\"3103\":1,\"4385\":1}}],[\"更新了这条数据\",{\"1\":{\"2823\":1,\"5201\":1}}],[\"更新后的数据\",{\"1\":{\"2818\":1,\"5196\":1}}],[\"更新\",{\"1\":{\"2744\":1,\"3462\":1,\"5122\":1,\"5731\":1}}],[\"更新代价比聚簇索引要小\",{\"1\":{\"2643\":1,\"5021\":1}}],[\"更新代价大\",{\"1\":{\"2638\":1,\"5016\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"134\":1,\"3788\":1}}],[\"更新时间\",{\"1\":{\"18\":1,\"3672\":1}}],[\"更严谨的说法应该是一个接口\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"更复杂的情况是\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"更适合做\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"更有优势\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"比较\",{\"1\":{\"3637\":1}}],[\"比较频繁的话导致\",{\"1\":{\"3460\":1,\"5729\":1}}],[\"比较重要的主要有下面\",{\"1\":{\"2908\":1,\"5286\":1}}],[\"比较靠谱的原因\",{\"1\":{\"2409\":1}}],[\"比\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"2521\":1,\"3328\":1,\"4585\":1,\"4794\":1,\"5619\":1}}],[\"比如一个用户的用户名为18666666666\",{\"1\":{\"3594\":1}}],[\"比如数据库查询和业务运算\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"比如你刚刚消费完消息之后\",{\"1\":{\"3468\":1,\"5737\":1}}],[\"比如文章审核\",{\"1\":{\"3457\":1,\"5726\":1}}],[\"比如增加到100此循环\",{\"1\":{\"3256\":1}}],[\"比如我们在同一个线程中声明了两个\",{\"1\":{\"3197\":1,\"4541\":1}}],[\"比如需要将\",{\"1\":{\"3123\":1,\"4405\":1}}],[\"比如reentrantreadwritelock\",{\"1\":{\"3065\":1,\"4419\":1}}],[\"比如reentrantlock就是独占锁\",{\"1\":{\"3064\":1,\"4418\":1}}],[\"比如查询的数据库\",{\"1\":{\"3017\":1,\"5395\":1}}],[\"比如图片\",{\"0\":{\"2881\":1,\"5259\":1},\"1\":{\"2883\":1,\"5261\":1}}],[\"比如下面这个顺序的场景\",{\"1\":{\"2732\":1,\"5110\":1}}],[\"比如下单清空购物车\",{\"0\":{\"2170\":1,\"4292\":1}}],[\"比如全文索引\",{\"1\":{\"2561\":1,\"4939\":1}}],[\"比如说\",{\"1\":{\"2505\":1,\"2975\":1,\"5353\":1,\"5603\":1}}],[\"比如说此时选\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"比如高考成绩排序\",{\"0\":{\"2180\":1,\"4302\":1}}],[\"比如对于需要确保强一致性的场景如银行一般会选择保证\",{\"1\":{\"2159\":1,\"4764\":1}}],[\"比如部分节点网络出了问题\",{\"1\":{\"2152\":1,\"4757\":1}}],[\"比如这里我们是三个\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"比如这个时候我们启动了\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"比如内核中有数据需要读\",{\"1\":{\"1391\":1,\"1559\":1,\"1727\":1,\"1895\":1,\"4818\":1}}],[\"比如上图中4个分区3个消费者的场景\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"比如健康状况\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"比如在put方法中就有如下实现\",{\"1\":{\"1023\":1}}],[\"比如在方法执行前后做什么事情\",{\"1\":{\"854\":1,\"4063\":1}}],[\"比如在任何一个位置插入一个元素\",{\"1\":{\"587\":1}}],[\"比如接口一旦新增加方法\",{\"1\":{\"840\":1,\"4049\":1}}],[\"比如hashmap有hashset\",{\"1\":{\"688\":1}}],[\"比如\",{\"1\":{\"535\":1,\"555\":1,\"559\":2,\"570\":1,\"592\":1,\"847\":1,\"984\":1,\"1353\":1,\"1356\":1,\"1452\":1,\"1521\":1,\"1524\":1,\"1620\":1,\"1689\":1,\"1692\":1,\"1788\":1,\"1857\":1,\"1860\":1,\"1956\":1,\"2098\":1,\"2157\":1,\"2167\":1,\"2384\":1,\"2501\":1,\"2524\":1,\"2526\":1,\"2691\":1,\"2692\":1,\"2794\":1,\"2804\":1,\"2807\":1,\"2924\":1,\"4056\":1,\"4289\":1,\"4703\":1,\"4762\":1,\"4780\":1,\"4783\":1,\"4879\":1,\"5069\":1,\"5070\":1,\"5172\":1,\"5182\":1,\"5185\":1,\"5302\":1,\"5599\":1,\"5622\":1,\"5624\":1}}],[\"比如它的属性\",{\"1\":{\"489\":1,\"3940\":1}}],[\"存放数据的\",{\"1\":{\"3197\":1,\"4541\":1}}],[\"存放在\",{\"1\":{\"2920\":1,\"3484\":1,\"5298\":1,\"5753\":1}}],[\"存放在内存中并由消息队列标识符标识\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"存储起来\",{\"1\":{\"3558\":1,\"5827\":1}}],[\"存储系统中的冷数据\",{\"1\":{\"3556\":1,\"5825\":1}}],[\"存储数据库中是一种数据安全的考虑\",{\"1\":{\"3522\":1,\"5791\":1}}],[\"存储\",{\"1\":{\"3503\":1,\"5772\":1}}],[\"存储技术选型优化\",{\"1\":{\"3470\":1,\"5739\":1}}],[\"存储到阿里云oss\",{\"1\":{\"3403\":1,\"5683\":1}}],[\"存储字节越小\",{\"1\":{\"2885\":1,\"5263\":1}}],[\"存储引擎为每行数据添加了三个\",{\"1\":{\"2856\":1,\"5234\":1}}],[\"存储引擎提供了个\",{\"1\":{\"2762\":1,\"5140\":1}}],[\"存储引擎提供了一种轻量级的锁来实现自增\",{\"1\":{\"2760\":1,\"5138\":1}}],[\"存储引擎默认的事务隔离级别正是可重复读\",{\"1\":{\"2704\":1,\"5082\":1}}],[\"存储引擎中\",{\"1\":{\"2648\":1,\"2872\":1,\"5026\":1,\"5250\":1}}],[\"存储引擎\",{\"1\":{\"2602\":1,\"4980\":1}}],[\"存在于数据库中\",{\"1\":{\"3033\":1,\"3040\":1,\"5411\":1,\"5418\":1}}],[\"存在于实际的磁盘介质或者文件系统\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"存在的话才会走下面的流程\",{\"1\":{\"3022\":1,\"5400\":1}}],[\"存在\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"存在tcp头部\",{\"1\":{\"2363\":1,\"2365\":1}}],[\"存在ip头部\",{\"1\":{\"2362\":1,\"2364\":1}}],[\"匿名管道由于没有名字\",{\"1\":{\"1365\":1,\"1533\":1,\"1701\":1,\"1869\":1,\"4792\":1}}],[\"匿名管道\",{\"1\":{\"1364\":1,\"1532\":1,\"1700\":1,\"1868\":1,\"4791\":1}}],[\"管道只能承载无格式字\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"管道和消息队列的通信数据都是先进先出的原则\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"管道\",{\"1\":{\"1364\":1,\"1532\":1,\"1700\":1,\"1868\":1,\"4791\":1}}],[\"管理\",{\"1\":{\"1049\":1,\"4082\":1}}],[\"屏障是一种同步原语\",{\"1\":{\"1356\":1,\"1524\":1,\"1692\":1,\"1860\":1,\"4783\":1}}],[\"屏障\",{\"1\":{\"1356\":1,\"1524\":1,\"1692\":1,\"1860\":1,\"4783\":1}}],[\"信息\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"信息容器\",{\"1\":{\"46\":1,\"3700\":1}}],[\"信号是一种比较复杂的通信方式\",{\"1\":{\"1366\":1,\"1534\":1,\"1702\":1,\"1870\":1,\"4793\":1}}],[\"信号\",{\"1\":{\"1366\":1,\"1534\":1,\"1702\":1,\"1870\":1,\"4793\":1}}],[\"信号量的意图在于进程间同步\",{\"1\":{\"1368\":1,\"1536\":1,\"1704\":1,\"1872\":1,\"4795\":1}}],[\"信号量是一个计数器\",{\"1\":{\"1368\":1,\"1536\":1,\"1704\":1,\"1872\":1,\"4795\":1}}],[\"信号量\",{\"1\":{\"1355\":1,\"1361\":1,\"1368\":1,\"1523\":1,\"1529\":1,\"1536\":1,\"1691\":1,\"1697\":1,\"1704\":1,\"1859\":1,\"1865\":1,\"1872\":1,\"4782\":1,\"4788\":1,\"4795\":1}}],[\"读多写少\",{\"1\":{\"3259\":1,\"4487\":1}}],[\"读操作并不会修改数据\",{\"1\":{\"3259\":1,\"4487\":1}}],[\"读提交\",{\"1\":{\"2833\":1,\"2840\":1,\"2843\":1,\"2852\":2,\"5211\":1,\"5218\":1,\"5221\":1,\"5230\":2}}],[\"读未提交\",{\"1\":{\"2832\":1,\"2839\":1,\"2850\":1,\"5210\":1,\"5217\":1,\"5228\":1}}],[\"读到\",{\"1\":{\"2816\":1,\"5194\":1}}],[\"读读是共享的\",{\"1\":{\"3265\":1,\"4493\":1}}],[\"读读\",{\"1\":{\"2734\":1,\"5112\":1}}],[\"读锁的共享锁可保证并发读是非常高效的\",{\"1\":{\"3262\":1,\"4490\":1}}],[\"读锁还在占用着\",{\"1\":{\"2735\":1,\"5113\":1}}],[\"读锁\",{\"0\":{\"4492\":1},\"1\":{\"2725\":1,\"2728\":2,\"2729\":1,\"2733\":1,\"2739\":1,\"5103\":1,\"5106\":2,\"5107\":1,\"5111\":1,\"5117\":1}}],[\"读从机房的方案\",{\"1\":{\"2199\":1,\"4321\":1}}],[\"读\",{\"1\":{\"2097\":2,\"4702\":2}}],[\"读取之前的版本数据\",{\"1\":{\"2871\":1,\"5249\":1}}],[\"读取到的余额数据是刚才事务\",{\"1\":{\"2818\":1,\"5196\":1}}],[\"读取到数据后\",{\"1\":{\"1485\":1,\"1653\":1,\"1821\":1,\"1989\":1,\"4912\":1}}],[\"读取meta\",{\"1\":{\"1144\":1,\"4177\":1}}],[\"读写\",{\"1\":{\"3262\":1,\"3265\":1,\"4490\":1,\"4493\":1}}],[\"读写互斥\",{\"1\":{\"2749\":1,\"2776\":2,\"5127\":1,\"5154\":2}}],[\"读写事件\",{\"1\":{\"1436\":1,\"1604\":1,\"1772\":1,\"1940\":1,\"4863\":1}}],[\"读写锁\",{\"1\":{\"1354\":1,\"1522\":1,\"1690\":1,\"1858\":1,\"3266\":1,\"4494\":1,\"4781\":1}}],[\"采用kafka作为消息服务中间件\",{\"1\":{\"3453\":1,\"5722\":1}}],[\"采用\",{\"1\":{\"3047\":1,\"5425\":1}}],[\"采用的是\",{\"1\":{\"2996\":1,\"5374\":1}}],[\"采用先进先出的方式发送消息\",{\"1\":{\"2118\":1,\"4723\":1}}],[\"采用互斥对象机制\",{\"1\":{\"1353\":1,\"1521\":1,\"1689\":1,\"1857\":1,\"4780\":1}}],[\"采用了两种方法\",{\"1\":{\"1000\":1}}],[\"互联网工程任务组正式将基于\",{\"1\":{\"5530\":1}}],[\"互斥锁\",{\"1\":{\"1353\":1,\"1521\":1,\"1689\":1,\"1857\":1,\"4780\":1}}],[\"互斥同步\",{\"0\":{\"1350\":1,\"1518\":1,\"1686\":1,\"1854\":1,\"4777\":1}}],[\"互相循环依赖\",{\"1\":{\"1112\":1,\"4145\":1}}],[\"阻塞\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"阻塞后\",{\"1\":{\"2736\":1,\"5114\":1}}],[\"阻塞的情况分三种\",{\"1\":{\"1346\":1,\"1514\":1,\"1682\":1,\"1850\":1,\"4773\":1}}],[\"阻塞状态是线程因为某种原因放弃cpu使用权\",{\"1\":{\"1346\":1,\"1514\":1,\"1682\":1,\"1850\":1,\"4773\":1}}],[\"阻塞状态\",{\"1\":{\"1346\":1,\"1514\":1,\"1682\":1,\"1850\":1,\"4773\":1}}],[\"才需要去实现它\",{\"1\":{\"3081\":1,\"4437\":1}}],[\"才可以把子查询转化为关联查询进行优化\",{\"1\":{\"2903\":1,\"5281\":1}}],[\"才会正式对数据的冲突与否进行检测\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"才会将内存地址\",{\"1\":{\"3103\":1,\"4385\":1}}],[\"才会把\",{\"1\":{\"2757\":1,\"5135\":1}}],[\"才会停止匹配\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"才会进⼊同步块\",{\"1\":{\"821\":1,\"4030\":1}}],[\"才能继续执行\",{\"1\":{\"2835\":1,\"5213\":1}}],[\"才能连接\",{\"1\":{\"2351\":1}}],[\"才能得到处理\",{\"1\":{\"2120\":1,\"4725\":1}}],[\"才有机会转到运行状态\",{\"1\":{\"1346\":1,\"1514\":1,\"1682\":1,\"1850\":1,\"4773\":1}}],[\"直至联合索引中全部字段匹配完成\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"直到队列中有任务了就取出来继续执行\",{\"1\":{\"3317\":1}}],[\"直到等待的时间超过了\",{\"1\":{\"3294\":1,\"4558\":1}}],[\"直到操作完成\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"直到锁被另外一个线程释放为止\",{\"1\":{\"3171\":1,\"4516\":1}}],[\"直到锁被释放\",{\"1\":{\"2717\":1,\"5095\":1}}],[\"直到拥有间隙锁的那个事务提交为止\",{\"1\":{\"2798\":1,\"5176\":1}}],[\"直到表结构变更完成\",{\"1\":{\"2729\":1,\"5107\":1}}],[\"直到执行完\",{\"1\":{\"2728\":1,\"5106\":1}}],[\"直到目的地\",{\"1\":{\"2498\":1,\"5596\":1}}],[\"直到系统调用\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"直到你取出了快递\",{\"1\":{\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"4817\":1}}],[\"直到内核缓冲区数据被\",{\"1\":{\"1389\":1,\"1557\":1,\"1725\":1,\"1893\":1,\"4816\":1}}],[\"直到所有线程都到达屏障后\",{\"1\":{\"1356\":1,\"1524\":1,\"1692\":1,\"1860\":1,\"4783\":1}}],[\"直到线程进入就绪状态\",{\"1\":{\"1346\":1,\"1514\":1,\"1682\":1,\"1850\":1,\"4773\":1}}],[\"直接发车\",{\"1\":{\"3641\":1}}],[\"直接说不熟悉\",{\"1\":{\"3438\":1}}],[\"直接打断说只介绍自己会的\",{\"1\":{\"3374\":1,\"5654\":1}}],[\"直接丢弃掉\",{\"1\":{\"3303\":1,\"4568\":1}}],[\"直接通过getmap\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"直接返回请求参数错误信息给客户端\",{\"1\":{\"3022\":1,\"5400\":1}}],[\"直接返回已创建的单例对象\",{\"1\":{\"821\":1,\"4030\":1}}],[\"直接查该表是否有意向独占锁\",{\"1\":{\"2751\":1,\"5129\":1}}],[\"直接找到\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"直接调用接口就行了\",{\"1\":{\"2085\":1,\"4690\":1}}],[\"直接就可以在子线程将处理结果发送给客户端\",{\"1\":{\"1505\":1,\"1673\":1,\"1841\":1,\"2009\":1,\"4932\":1}}],[\"直接会将数据在缓存中的引用交给用户\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"直接给出结论\",{\"1\":{\"1002\":1}}],[\"直接在第⼀重判断就返回了单例\",{\"1\":{\"821\":1,\"4030\":1}}],[\"直接实例化对象\",{\"1\":{\"816\":1,\"4025\":1}}],[\"直接上菜\",{\"1\":{\"531\":1}}],[\"直接举例吧\",{\"1\":{\"481\":1,\"490\":1,\"3932\":1,\"3941\":1}}],[\"直接new对象就叫正射\",{\"1\":{\"478\":1,\"3929\":1}}],[\"直接生成的\",{\"1\":{\"395\":1,\"3850\":1}}],[\"直接从本地内存的堆中分配任意数量的内存\",{\"1\":{\"219\":1}}],[\"直接对虚拟机栈的操作只有两个\",{\"1\":{\"205\":1}}],[\"操作来加锁和解锁\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"操作可能无法感知到\",{\"1\":{\"3113\":1,\"4395\":1}}],[\"操作的一个经典问题\",{\"1\":{\"3113\":1,\"4395\":1}}],[\"操作的方式将创建的节点加入同步队列的尾部\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"操作的记录只对事务本身可见\",{\"1\":{\"2873\":1,\"5251\":1}}],[\"操作的速度是很快的\",{\"1\":{\"1475\":1,\"1643\":1,\"1811\":1,\"1979\":1,\"4902\":1}}],[\"操作中产生的\",{\"1\":{\"2873\":1,\"5251\":1}}],[\"操作在内部被视为更新\",{\"1\":{\"2857\":1,\"5235\":1}}],[\"操作时\",{\"1\":{\"2725\":1,\"2727\":1,\"5103\":1,\"5105\":1}}],[\"操作一次\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"操作\",{\"0\":{\"2902\":1,\"5280\":1},\"1\":{\"1361\":1,\"1393\":1,\"1529\":1,\"1561\":1,\"1697\":1,\"1729\":1,\"1865\":1,\"1897\":1,\"2634\":1,\"2729\":1,\"2738\":1,\"2873\":1,\"2995\":1,\"3102\":1,\"3107\":1,\"4383\":1,\"4389\":1,\"4788\":1,\"4820\":1,\"5012\":1,\"5107\":1,\"5116\":1,\"5251\":1,\"5373\":1}}],[\"操作系统直接将内核缓冲区的数据拷贝到\",{\"1\":{\"1410\":1,\"1578\":1,\"1746\":1,\"1914\":1,\"4837\":1}}],[\"操作系统内核与用户空间就不需要再进行任何的数据拷贝操作\",{\"1\":{\"1406\":1,\"1574\":1,\"1742\":1,\"1910\":1,\"4833\":1}}],[\"操作系统重启\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"操作系统必须提供实现进程协作的措施和方法\",{\"1\":{\"1359\":1,\"1527\":1,\"1695\":1,\"1863\":1,\"4786\":1}}],[\"操作系统\",{\"0\":{\"1339\":1,\"1340\":1,\"1507\":1,\"1508\":1,\"1675\":1,\"1676\":1,\"1843\":1,\"1844\":1,\"4766\":1,\"4767\":1,\"5850\":1}}],[\"操作数栈\",{\"1\":{\"213\":1}}],[\"形成一系列的目录和子目录\",{\"1\":{\"1325\":1,\"4282\":1}}],[\"拆分多个queue\",{\"1\":{\"1314\":1,\"5506\":1}}],[\"造成数据顺序错误\",{\"1\":{\"1309\":1,\"5501\":1}}],[\"出来得太快了\",{\"1\":{\"5535\":1}}],[\"出一个子进程\",{\"1\":{\"2970\":1,\"5348\":1}}],[\"出现冲突后就会开始自旋操作\",{\"1\":{\"3120\":1,\"4402\":1}}],[\"出现问题的时候我们势必需要重新选举\",{\"1\":{\"2122\":1,\"4727\":1}}],[\"出现顺序错乱的场景\",{\"0\":{\"1308\":1,\"5500\":1}}],[\"出去呀\",{\"1\":{\"2117\":1,\"4722\":1}}],[\"出队效率比较高\",{\"1\":{\"733\":1}}],[\"隔一段时间\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"隔离服务之间相互影响\",{\"1\":{\"2082\":1,\"4687\":1}}],[\"隔离级别是\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"隔离级别是在\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"隔离级别是可以解决幻读问题发生的\",{\"1\":{\"2569\":1,\"4947\":1}}],[\"隔离级别的事务来说\",{\"1\":{\"2850\":1,\"2851\":1,\"2852\":1,\"5228\":1,\"5229\":1,\"5230\":1}}],[\"隔离级别会影响性能\",{\"1\":{\"2845\":1,\"5223\":1}}],[\"隔离级别来避免幻读现象的发生\",{\"1\":{\"2845\":1,\"5223\":1}}],[\"隔离级别下\",{\"1\":{\"2839\":1,\"2840\":1,\"2841\":1,\"2842\":1,\"2845\":1,\"5217\":1,\"5218\":1,\"5219\":1,\"5220\":1,\"5223\":1}}],[\"隔离级别越高\",{\"1\":{\"2831\":1,\"5209\":1}}],[\"隔离级别\",{\"1\":{\"1091\":2,\"4124\":2}}],[\"隔离性是通过\",{\"1\":{\"2813\":1,\"5191\":1}}],[\"隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致\",{\"1\":{\"2808\":1,\"5186\":1}}],[\"隔离性\",{\"1\":{\"1082\":1,\"2808\":1,\"4115\":1,\"5186\":1}}],[\"变化不频繁的情况\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"变为了正常状态\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"变为\",{\"1\":{\"2125\":1,\"2128\":1,\"4730\":1,\"4733\":1}}],[\"变得可运行\",{\"1\":{\"1344\":1,\"1512\":1,\"1680\":1,\"1848\":1,\"4771\":1}}],[\"变动较小\",{\"1\":{\"1294\":1,\"5486\":1}}],[\"变量符合我们上面提到的空间局部性\",{\"1\":{\"1336\":1}}],[\"变量\",{\"1\":{\"494\":1,\"3191\":1,\"3193\":1,\"3945\":1,\"4535\":1,\"4537\":1}}],[\"粘性的\",{\"1\":{\"1286\":2,\"5478\":2}}],[\"节流以及缓冲区大小受限等缺点\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"节省因分区分配变化带来的开销\",{\"1\":{\"1286\":1,\"5478\":1}}],[\"节点是红色或黑色\",{\"1\":{\"661\":1,\"4002\":1}}],[\"消耗更多的\",{\"1\":{\"2899\":1,\"5277\":1}}],[\"消耗过多存储空间\",{\"1\":{\"2882\":1,\"5260\":1}}],[\"消耗在\",{\"1\":{\"383\":1}}],[\"消息中间件\",{\"0\":{\"5852\":1}}],[\"消息摘要算法又称为哈希算法\",{\"1\":{\"3582\":1}}],[\"消息摘要算法第五版\",{\"1\":{\"3581\":1}}],[\"消息积压的概率比较大\",{\"1\":{\"3538\":1,\"5807\":1}}],[\"消息实际上并没有被消费\",{\"1\":{\"3466\":1,\"5735\":1}}],[\"消息的边界\",{\"1\":{\"2353\":1}}],[\"消息可能会被操作系统\",{\"1\":{\"2353\":1}}],[\"消息广播模式\",{\"0\":{\"2115\":1,\"4720\":1}}],[\"消息广播\",{\"1\":{\"2106\":1,\"2114\":1,\"4711\":1,\"4719\":1}}],[\"消息分区\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"消息驱动\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"消息总线\",{\"1\":{\"2032\":1,\"2066\":1,\"4637\":1,\"4671\":1}}],[\"消息不一定要以先进先出的次序读取\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"消息队列克服了信号承载信息量少\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"消息队列可以实现消息的随机查询\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"消息队列是消息的链表\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"消息队列\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"2934\":1,\"4794\":1,\"5312\":1}}],[\"消息队列中的若干消息如果是对同一个数据进行操作\",{\"1\":{\"1307\":1,\"5499\":1}}],[\"消费任务进行审核文章\",{\"1\":{\"3531\":1,\"5800\":1}}],[\"消费组\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"消费组的成员订阅它们感兴趣的topic并将这种订阅关系传递给作为订阅组协调者的broker\",{\"1\":{\"1267\":1,\"5459\":1}}],[\"消费端会从分配到的partition里面去消费消息\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"消费者会自动提交了\",{\"1\":{\"3466\":1,\"5735\":1}}],[\"消费者丢失消息的情况\",{\"1\":{\"3464\":1,\"5733\":1}}],[\"消费者购买商品这个事务\",{\"1\":{\"2808\":1,\"5186\":1}}],[\"消费者的钱也没花出去\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"消费者消费完\",{\"1\":{\"2177\":1,\"4299\":1}}],[\"消费者还是会从之前没提交的offset位置开始消费\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"消费者之间分配到的分区数的差值不会超过1\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"消费者订阅的topic列表是相同的\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"消费者\",{\"0\":{\"1264\":1,\"5456\":1}}],[\"路由器接口将对\",{\"1\":{\"2498\":1,\"5596\":1}}],[\"路由器接口如未能找到主机\",{\"1\":{\"2497\":1,\"5595\":1}}],[\"路由器接口查询\",{\"1\":{\"2496\":1,\"5594\":1}}],[\"路由器的多个接口都各自维护一个\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"路由器作为互联设备\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"路由到不同分区\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"路径中边的条数称为路径长度\",{\"1\":{\"633\":1}}],[\"路径长度\",{\"1\":{\"631\":1}}],[\"路径\",{\"1\":{\"631\":1}}],[\"路径导航\",{\"1\":{\"14\":1,\"131\":1,\"3668\":1,\"3785\":1}}],[\"疑问\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"既不存在于缓存中\",{\"1\":{\"3039\":1,\"5417\":1}}],[\"既能提升并发性\",{\"1\":{\"2770\":1,\"5148\":1}}],[\"既然有更好的可以用\",{\"1\":{\"5535\":1}}],[\"既然备份数据库数据的时候\",{\"1\":{\"2700\":1,\"5078\":1}}],[\"既然哈希表这么快\",{\"1\":{\"2589\":1,\"4967\":1}}],[\"既然\",{\"1\":{\"2308\":1}}],[\"既然为每个请求分配一个进程\",{\"1\":{\"1373\":1,\"1541\":1,\"1709\":1,\"1877\":1,\"4800\":1}}],[\"既没有指定partition\",{\"1\":{\"1262\":1,\"5454\":1}}],[\"既可以是固定大小\",{\"1\":{\"229\":1}}],[\"利用她们的技术\",{\"1\":{\"3589\":1}}],[\"利用tomcat的access\",{\"1\":{\"3569\":1}}],[\"利用\",{\"1\":{\"2926\":1,\"5304\":1}}],[\"利用mysql的唯一键约束\",{\"1\":{\"1303\":1,\"5495\":1}}],[\"利用率不够高\",{\"1\":{\"370\":1}}],[\"利于集群数据的均衡\",{\"1\":{\"1256\":1,\"5448\":1}}],[\"天和\",{\"1\":{\"1252\":1,\"5444\":1}}],[\"旧的预期值a=1\",{\"1\":{\"3098\":1,\"4375\":1}}],[\"旧的预期值a\",{\"1\":{\"3096\":1,\"4372\":1}}],[\"旧的一代内存包含那些经过许多轮小型\",{\"1\":{\"237\":1}}],[\"旧消息就会过期并被删除\",{\"1\":{\"1249\":1,\"5441\":1}}],[\"安全散列\",{\"1\":{\"3649\":1}}],[\"安全性更高\",{\"1\":{\"3654\":1}}],[\"安全性得不到保证\",{\"1\":{\"3653\":1}}],[\"安全性没有\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"安全性和资源消耗\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"安全\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"安全的在\",{\"1\":{\"44\":1,\"3698\":1}}],[\"共同关注\",{\"1\":{\"2941\":1,\"5319\":1}}],[\"共同点\",{\"1\":{\"882\":1}}],[\"共享方式\",{\"1\":{\"3084\":1,\"3085\":1,\"4440\":1,\"4441\":1}}],[\"共享锁是指允许多个线程同时持有锁\",{\"1\":{\"3262\":1,\"4490\":1}}],[\"共享锁和独占锁的释放有一定区别\",{\"1\":{\"3066\":1,\"4420\":1}}],[\"共享锁\",{\"0\":{\"4489\":1},\"1\":{\"2742\":1,\"2776\":1,\"3065\":1,\"3259\":1,\"4419\":1,\"4487\":1,\"5120\":1,\"5154\":1}}],[\"共享表锁\",{\"1\":{\"2717\":1,\"5095\":1}}],[\"共享\",{\"1\":{\"1409\":1,\"1577\":1,\"1745\":1,\"1913\":1,\"4836\":1}}],[\"共享内存\",{\"1\":{\"1369\":1,\"1537\":1,\"1705\":1,\"1873\":1,\"4796\":1}}],[\"共享的\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"共3个consumer\",{\"1\":{\"1275\":1,\"5467\":1}}],[\"拦截\",{\"1\":{\"1216\":1,\"4249\":1}}],[\"拦截被代理类中的方法\",{\"1\":{\"861\":1,\"4070\":1}}],[\"举个生活中的例子\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"举个栗子\",{\"1\":{\"2817\":1,\"2822\":1,\"2826\":1,\"5195\":1,\"5200\":1,\"5204\":1}}],[\"举个例子来说\",{\"1\":{\"989\":1}}],[\"举个例子\",{\"1\":{\"600\":1,\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"2158\":1,\"3305\":1,\"4570\":1,\"4763\":1,\"4817\":1}}],[\"举例\",{\"1\":{\"1216\":1,\"4249\":1}}],[\"方便说一下是哪个公司吗\",{\"1\":{\"3423\":1,\"5703\":1}}],[\"方式二\",{\"1\":{\"3569\":1,\"4587\":1}}],[\"方式一\",{\"1\":{\"3562\":1,\"4549\":1}}],[\"方式的持久化\",{\"1\":{\"2972\":1,\"5350\":1}}],[\"方式解决了幻读\",{\"1\":{\"2847\":1,\"2848\":1,\"5225\":1,\"5226\":1}}],[\"方案详细说明如下\",{\"1\":{\"1498\":1,\"1666\":1,\"1834\":1,\"2002\":1,\"4925\":1}}],[\"方案的示意图如下\",{\"1\":{\"1478\":1,\"1646\":1,\"1814\":1,\"1982\":1,\"4905\":1}}],[\"方案的缺点\",{\"1\":{\"1477\":1,\"1645\":1,\"1813\":1,\"1981\":1,\"4904\":1}}],[\"方案具体使用进程还是线程\",{\"1\":{\"1451\":1,\"1619\":1,\"1787\":1,\"1955\":1,\"4878\":1}}],[\"方案\",{\"1\":{\"1446\":1,\"1454\":1,\"1614\":1,\"1622\":1,\"1782\":1,\"1790\":1,\"1950\":1,\"1958\":1,\"4873\":1,\"4881\":1}}],[\"方言\",{\"1\":{\"1215\":1,\"4248\":1}}],[\"方法锁形式\",{\"1\":{\"3173\":1}}],[\"方法将响应结果发送给\",{\"1\":{\"1486\":1,\"1654\":1,\"1822\":1,\"1990\":1,\"4913\":1}}],[\"方法才能被唤醒\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"方法返回代理引用或者原始引用\",{\"1\":{\"1133\":1,\"4166\":1}}],[\"方法返回地址\",{\"1\":{\"215\":1}}],[\"方法可能继续在现有事务中运行\",{\"1\":{\"1097\":1,\"4130\":1}}],[\"方法入参\",{\"1\":{\"861\":1,\"4070\":1}}],[\"方法中自定义处理逻辑\",{\"1\":{\"854\":1,\"4063\":1}}],[\"方法的功能就是根据key来定位其在hashmap中的位置\",{\"1\":{\"960\":1}}],[\"方法的参数\",{\"1\":{\"853\":1,\"4062\":1}}],[\"方法的调用\",{\"1\":{\"220\":1}}],[\"方法有下面三个参数\",{\"1\":{\"853\":1,\"4062\":1}}],[\"方法来获取默认值或将其值更改为当前线程所存的副本的值\",{\"1\":{\"3186\":1,\"4531\":1}}],[\"方法来调用\",{\"1\":{\"852\":1,\"4061\":1}}],[\"方法来返回一个线程安全的list\",{\"1\":{\"767\":1}}],[\"方法来加载类\",{\"1\":{\"425\":1,\"426\":1,\"3882\":1,\"3883\":1}}],[\"方法会传入一个期望的最小容量\",{\"1\":{\"763\":1}}],[\"方法要被调用\",{\"1\":{\"701\":1}}],[\"方法获取对应的构造器\",{\"1\":{\"510\":1,\"3961\":1}}],[\"方法指定获取指定参数类型的\",{\"1\":{\"509\":1,\"3960\":1}}],[\"方法头中使用关键字throws\",{\"1\":{\"448\":1,\"3907\":1}}],[\"方法即可\",{\"1\":{\"413\":1,\"3868\":1}}],[\"方法而不是loadclass\",{\"1\":{\"412\":1,\"3867\":1}}],[\"方法解析该类\",{\"1\":{\"408\":1,\"3863\":1}}],[\"方法就是这样的\",{\"1\":{\"291\":1}}],[\"方法名\",{\"1\":{\"285\":1}}],[\"方法正常退出或异常退出的地址\",{\"1\":{\"215\":1}}],[\"方法执行结束出栈\",{\"1\":{\"205\":1}}],[\"方法\",{\"1\":{\"199\":2,\"281\":2,\"412\":1,\"413\":1,\"489\":1,\"494\":1,\"504\":1,\"507\":1,\"653\":1,\"777\":1,\"854\":1,\"860\":1,\"862\":1,\"958\":1,\"963\":1,\"1058\":1,\"1217\":1,\"1218\":1,\"1344\":1,\"1347\":2,\"1348\":1,\"1432\":1,\"1467\":1,\"1482\":1,\"1512\":1,\"1515\":2,\"1516\":1,\"1600\":1,\"1635\":1,\"1650\":1,\"1680\":1,\"1683\":2,\"1684\":1,\"1768\":1,\"1803\":1,\"1818\":1,\"1848\":1,\"1851\":2,\"1852\":1,\"1936\":1,\"1971\":1,\"1986\":1,\"3174\":1,\"3191\":1,\"3192\":1,\"3316\":1,\"3867\":1,\"3868\":1,\"3940\":1,\"3945\":1,\"3955\":1,\"3958\":1,\"4063\":1,\"4069\":1,\"4071\":1,\"4091\":1,\"4250\":1,\"4251\":1,\"4518\":1,\"4535\":1,\"4536\":1,\"4581\":1,\"4771\":1,\"4774\":2,\"4775\":1,\"4859\":1,\"4894\":1,\"4909\":1}}],[\"方法区和堆属于主内存区域\",{\"1\":{\"3135\":1,\"4447\":1}}],[\"方法区中的常量引用的对象\",{\"1\":{\"307\":1}}],[\"方法区中类静态属性引用的对象\",{\"1\":{\"306\":1}}],[\"方法区\",{\"1\":{\"188\":1,\"279\":1,\"282\":1}}],[\"答案就是\",{\"1\":{\"2998\":1,\"5376\":1}}],[\"答案是有的\",{\"1\":{\"1373\":1,\"1541\":1,\"1709\":1,\"1877\":1,\"4800\":1}}],[\"答案是不可能\",{\"1\":{\"558\":1}}],[\"答\",{\"1\":{\"1211\":1,\"4244\":1}}],[\"官网2\",{\"1\":{\"1197\":1,\"1198\":1,\"1199\":1,\"4230\":1,\"4231\":1,\"4232\":1}}],[\"官方的推荐所建立的这个stack\",{\"1\":{\"588\":1}}],[\"官方推荐的创建栈的方式\",{\"1\":{\"595\":1}}],[\"官方推荐的方法声明的这个\",{\"1\":{\"586\":1}}],[\"官方推荐的写法\",{\"1\":{\"567\":1}}],[\"官方推荐的写法是这样的\",{\"1\":{\"536\":1}}],[\"官方推出了\",{\"1\":{\"580\":1}}],[\"官方也并没有将\",{\"1\":{\"565\":1}}],[\"官方可以做到的是\",{\"1\":{\"564\":1}}],[\"官方不想推出一个叫做\",{\"1\":{\"588\":1}}],[\"官方不愿意看到的\",{\"1\":{\"563\":1}}],[\"官方不能做接口设计层面的修改\",{\"1\":{\"563\":1}}],[\"官方不知道这个\",{\"0\":{\"562\":1}}],[\"官方当然知道这个实现不好\",{\"1\":{\"563\":1}}],[\"官方文档中的类关系\",{\"1\":{\"539\":1}}],[\"官方\",{\"1\":{\"410\":1,\"533\":1,\"3865\":1}}],[\"统计和http追踪\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"统计网站的访问量\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"统计在线人数和在线用户\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"服务不可用的情况\",{\"1\":{\"3046\":1,\"5424\":1}}],[\"服务对象\",{\"1\":{\"2379\":1}}],[\"服务端检查\",{\"1\":{\"3482\":1,\"5751\":1}}],[\"服务端会返回已经签名的\",{\"1\":{\"3480\":1,\"5749\":1}}],[\"服务端最大并发\",{\"1\":{\"2372\":1}}],[\"服务端通常固定在某个本地端口上监听\",{\"1\":{\"2368\":1}}],[\"服务端推送等技术\",{\"1\":{\"2218\":1,\"2233\":1,\"2274\":1,\"2289\":1,\"5525\":1}}],[\"服务监控\",{\"1\":{\"2083\":1,\"4688\":1}}],[\"服务降级\",{\"1\":{\"2080\":1,\"4685\":1}}],[\"服务隔离\",{\"1\":{\"2078\":1,\"2082\":1,\"4683\":1,\"4687\":1}}],[\"服务熔断\",{\"1\":{\"2066\":1,\"2078\":1,\"2081\":1,\"4671\":1,\"4683\":1,\"4686\":1}}],[\"服务保护\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"服务注册中心\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"服务拆分粒度更细\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"服务发现\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"服务部署\",{\"1\":{\"2055\":1,\"4660\":1}}],[\"服务划分\",{\"1\":{\"2054\":1,\"4659\":1}}],[\"服务与服务之间通过http协议或其他消息传递机制通信\",{\"1\":{\"2052\":1,\"4657\":1}}],[\"服务与服务之间完全独立\",{\"1\":{\"2047\":1,\"4652\":1}}],[\"服务与服务之间采用http网络通信协议来通信\",{\"1\":{\"2047\":1,\"4652\":1}}],[\"服务与服务之间没有任何耦合\",{\"1\":{\"2046\":1,\"4651\":1}}],[\"服务集中化管理\",{\"1\":{\"2042\":1,\"4647\":1}}],[\"服务之间通过http协议相互通信\",{\"1\":{\"2038\":1,\"4643\":1}}],[\"服务之间相互调用\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"服务器查询后将对应的\",{\"1\":{\"2542\":1,\"5640\":1}}],[\"服务器地址\",{\"1\":{\"2536\":1,\"5634\":1}}],[\"服务器了\",{\"1\":{\"2533\":1,\"5631\":1}}],[\"服务器就都可以找到并访问根域\",{\"1\":{\"2533\":1,\"5631\":1}}],[\"服务器中\",{\"1\":{\"2532\":1,\"5630\":1}}],[\"服务器信息保存在互联网中所有的\",{\"1\":{\"2532\":1,\"5630\":1}}],[\"服务器推送\",{\"1\":{\"2512\":1,\"5610\":1}}],[\"服务器处理请求并返回\",{\"1\":{\"2458\":1,\"2551\":1,\"5556\":1}}],[\"服务器出现大量\",{\"1\":{\"2324\":1,\"2325\":1}}],[\"服务器出现网络中断\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"服务器在负责进行消息广播\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"服务器的地址\",{\"1\":{\"2540\":1,\"5638\":1}}],[\"服务器的状态同步\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"服务器的数据状态保持一致\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"服务器完成了和\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"服务器完成了状态同步之后\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"服务器\",{\"1\":{\"2105\":2,\"2529\":1,\"2530\":1,\"2531\":1,\"2534\":3,\"2536\":1,\"2541\":2,\"4710\":2,\"5627\":1,\"5628\":1,\"5629\":1,\"5632\":3,\"5634\":1,\"5639\":2}}],[\"服务器端不断地从\",{\"1\":{\"1389\":1,\"1557\":1,\"1725\":1,\"1893\":1,\"4816\":1}}],[\"服务器端只会从\",{\"1\":{\"1388\":1,\"1556\":1,\"1724\":1,\"1892\":1,\"4815\":1}}],[\"服务器自动调用监听器对象中的方法\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"服务于java的collection框架\",{\"1\":{\"706\":1}}],[\"销毁\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"监控等一些防止雪崩的技术\",{\"1\":{\"2078\":1,\"4683\":1}}],[\"监控连接建立事件\",{\"1\":{\"1499\":1,\"1667\":1,\"1835\":1,\"2003\":1,\"4926\":1}}],[\"监控器\",{\"0\":{\"1176\":1,\"4209\":1}}],[\"监听事件\",{\"1\":{\"1466\":1,\"1481\":1,\"1634\":1,\"1649\":1,\"1802\":1,\"1817\":1,\"1970\":1,\"1985\":1,\"4893\":1,\"4908\":1}}],[\"监听器也叫listener\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"监听器\",{\"0\":{\"1171\":1,\"4204\":1}}],[\"监视器和监听器\",{\"0\":{\"1170\":1,\"4203\":1}}],[\"嵌入式tomcat\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"工作基本流程\",{\"1\":{\"2989\":1,\"5367\":1}}],[\"工作基本流程是怎样的\",{\"0\":{\"2977\":1,\"5355\":1}}],[\"工作流程图如下\",{\"1\":{\"2988\":1,\"5366\":1}}],[\"工作在哪一层\",{\"0\":{\"2345\":1},\"1\":{\"2296\":1}}],[\"工程师修炼之道\",{\"1\":{\"2597\":1,\"4975\":1}}],[\"工程任务组开发的路由选择协议\",{\"1\":{\"2453\":1,\"2546\":1,\"5551\":1}}],[\"工具来实现\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"工厂设计模式\",{\"1\":{\"1069\":1,\"4102\":1}}],[\"工厂类可以应对各种新增的类\",{\"1\":{\"519\":1,\"3970\":1}}],[\"工厂模式\",{\"0\":{\"4031\":1},\"1\":{\"519\":1,\"3970\":1}}],[\"例外\",{\"1\":{\"3159\":1}}],[\"例子\",{\"1\":{\"1157\":1,\"4190\":1}}],[\"例如自旋锁等\",{\"1\":{\"3208\":1,\"4332\":1}}],[\"例如获取同步状态\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"例如学生成绩的排名榜\",{\"1\":{\"2957\":1,\"5335\":1}}],[\"例如系统配置\",{\"1\":{\"2199\":1,\"4321\":1}}],[\"例如分布式事务\",{\"1\":{\"2195\":1,\"4317\":1}}],[\"例如搭建和配置开发环境\",{\"1\":{\"2016\":1,\"4621\":1}}],[\"例如有互斥\",{\"1\":{\"1358\":1,\"1526\":1,\"1694\":1,\"1862\":1,\"4785\":1}}],[\"例如事务处理\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"例如\",{\"1\":{\"621\":1,\"858\":1,\"1097\":1,\"1453\":1,\"1488\":1,\"1621\":1,\"1656\":1,\"1789\":1,\"1824\":1,\"1957\":1,\"1992\":1,\"2062\":1,\"3518\":1,\"3564\":1,\"4067\":1,\"4130\":1,\"4667\":1,\"4880\":1,\"4915\":1,\"5787\":1}}],[\"例如java\",{\"1\":{\"492\":1,\"3943\":1}}],[\"级别的异常\",{\"1\":{\"1156\":1,\"4189\":1}}],[\"项目中常用技术一\",{\"0\":{\"3579\":1}}],[\"项目中任何需要延迟队列的地方\",{\"1\":{\"3526\":1,\"5795\":1}}],[\"项目中的技术栈\",{\"1\":{\"3374\":1,\"5654\":1}}],[\"项目重难点\",{\"1\":{\"3447\":1,\"5716\":1}}],[\"项目类似于今日头条\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"项目背景\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"项目\",{\"0\":{\"3444\":1,\"5713\":1,\"5855\":1}}],[\"项目拷打环节\",{\"1\":{\"3401\":1,\"5681\":1}}],[\"项目启动后扫描顺序\",{\"1\":{\"1150\":1,\"4183\":1}}],[\"项目主页\",{\"0\":{\"153\":1}}],[\"项目主页配置\",{\"1\":{\"152\":1,\"156\":1,\"3806\":1}}],[\"步\",{\"1\":{\"1140\":1,\"1142\":1,\"1144\":1,\"2978\":1,\"4173\":1,\"4175\":1,\"4177\":1,\"5356\":1}}],[\"步描述\",{\"1\":{\"1055\":1,\"4088\":1}}],[\"引擎的默认隔离级别虽然是\",{\"1\":{\"2846\":1,\"5224\":1}}],[\"引擎的默认隔离级别\",{\"1\":{\"2834\":1,\"5212\":1}}],[\"引擎的表里对某些纪录加上\",{\"1\":{\"2743\":1,\"5121\":1}}],[\"引擎的表里对某些记录加上\",{\"1\":{\"2742\":1,\"5120\":1}}],[\"引擎的表使用表锁\",{\"1\":{\"2721\":1,\"5099\":1}}],[\"引擎的表的\",{\"1\":{\"2632\":1,\"5010\":1}}],[\"引擎通过什么技术来保证事务的这四个特性的呢\",{\"1\":{\"2810\":1,\"5188\":1}}],[\"引擎就不支持事务\",{\"1\":{\"2804\":1,\"5182\":1}}],[\"引擎它是支持事务的\",{\"1\":{\"2803\":1,\"5181\":1}}],[\"引擎并不支持行级锁\",{\"1\":{\"2772\":1,\"5150\":1}}],[\"引擎表来说\",{\"1\":{\"2632\":1,\"5010\":1}}],[\"引擎支持全文索引\",{\"1\":{\"2628\":1,\"5006\":1}}],[\"引擎\",{\"1\":{\"2608\":1,\"2640\":1,\"4986\":1,\"5018\":1}}],[\"引擎中\",{\"1\":{\"2582\":1,\"2598\":1,\"2599\":1,\"4960\":1,\"4976\":1,\"4977\":1}}],[\"引擎都是使用\",{\"1\":{\"2581\":1,\"2597\":1,\"4959\":1,\"4975\":1}}],[\"引擎和\",{\"1\":{\"2581\":1,\"2597\":1,\"4959\":1,\"4975\":1}}],[\"引擎是支持行级锁的\",{\"1\":{\"2772\":1,\"5150\":1}}],[\"引擎是\",{\"1\":{\"2560\":1,\"4938\":1}}],[\"引入了\",{\"1\":{\"2507\":1,\"5605\":1}}],[\"引入了基于\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"引入依赖并编写好配置之后\",{\"1\":{\"1178\":1,\"4211\":1}}],[\"引导大家对循环依赖有一个整体的认识\",{\"1\":{\"1136\":1,\"4169\":1}}],[\"引用没有变实际上包含的变量已经被修改\",{\"1\":{\"3114\":1,\"4396\":1}}],[\"引用类型\",{\"0\":{\"308\":1}}],[\"引用计数为\",{\"1\":{\"298\":1}}],[\"引用计数算法\",{\"0\":{\"297\":1}}],[\"引用失效时计数器减\",{\"1\":{\"298\":1}}],[\"回到\",{\"1\":{\"3107\":1,\"4389\":1}}],[\"回表\",{\"1\":{\"2646\":1,\"2648\":1,\"5024\":1,\"5026\":1}}],[\"回顾同一子网内的\",{\"1\":{\"2489\":1,\"5587\":1}}],[\"回顾\",{\"0\":{\"2215\":1,\"2230\":1,\"2245\":1,\"2258\":1,\"2271\":1,\"2286\":1,\"5522\":1,\"5545\":1}}],[\"回顾本文基本以实际操作的例子开始\",{\"1\":{\"1136\":1,\"4169\":1}}],[\"回滚指针\",{\"1\":{\"2858\":1,\"5236\":1}}],[\"回滚日志\",{\"1\":{\"2812\":1,\"5190\":1}}],[\"回滚操作或者重新发送消息\",{\"1\":{\"2178\":1,\"4300\":1}}],[\"回滚规则\",{\"1\":{\"1086\":1,\"4119\":1}}],[\"总共\",{\"1\":{\"2807\":3,\"5185\":3}}],[\"总是需要知道下一跳\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"总是能路由到固定的分区\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"总体来说分为以下几个过程\",{\"1\":{\"2454\":1,\"2547\":1,\"5552\":1}}],[\"总体来看\",{\"1\":{\"1429\":1,\"1597\":1,\"1765\":1,\"1933\":1,\"4856\":1}}],[\"总不能数据只在\",{\"1\":{\"2116\":1,\"4721\":1}}],[\"总结了下面的几点\",{\"1\":{\"5532\":1}}],[\"总结而言\",{\"1\":{\"3187\":1}}],[\"总结的来说\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"总结来说就是\",{\"1\":{\"3023\":1,\"5401\":1}}],[\"总结来说\",{\"1\":{\"2486\":1,\"5584\":1}}],[\"总结一句话\",{\"1\":{\"2349\":1}}],[\"总结一下\",{\"1\":{\"1205\":1,\"4238\":1}}],[\"总结\",{\"0\":{\"1232\":1,\"4265\":1,\"4408\":1,\"4442\":1,\"4522\":1},\"1\":{\"1135\":1,\"2411\":1,\"3103\":1,\"4168\":1,\"4385\":1}}],[\"总之\",{\"1\":{\"672\":1,\"2197\":1,\"4014\":1,\"4319\":1}}],[\"总之它在你面前就没有隐私了\",{\"1\":{\"502\":1,\"3953\":1}}],[\"表明锁被释放\",{\"1\":{\"3171\":1,\"4516\":1}}],[\"表明有事务想在某个区间插入新记录\",{\"1\":{\"2798\":1,\"5176\":1}}],[\"表必须有个主键\",{\"0\":{\"2897\":1,\"5275\":1}}],[\"表里的主键通常都会设置成自增的\",{\"1\":{\"2754\":1,\"5132\":1}}],[\"表级别的独占锁\",{\"1\":{\"2715\":1,\"5093\":1}}],[\"表级别的共享锁\",{\"1\":{\"2715\":1,\"5093\":1}}],[\"表级锁\",{\"0\":{\"2706\":1,\"5084\":1}}],[\"表级锁和行锁三类\",{\"1\":{\"2685\":1,\"5063\":1}}],[\"表锁和行锁是满足读读共享\",{\"1\":{\"2749\":1,\"5127\":1}}],[\"表锁除了会限制别的线程的读写外\",{\"1\":{\"2716\":1,\"5094\":1}}],[\"表锁\",{\"0\":{\"2712\":1,\"5090\":1},\"1\":{\"2708\":1,\"5086\":1}}],[\"表数据文件本身就是主索引\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"表时\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"表中有一个范围\",{\"1\":{\"2788\":1,\"5166\":1}}],[\"表中只有一个\",{\"1\":{\"2610\":1,\"4988\":1}}],[\"表中\",{\"1\":{\"2485\":1,\"5583\":1}}],[\"表中构造一条主机\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"表中并无主机\",{\"1\":{\"2479\":1,\"5577\":1}}],[\"表记录了某些其他网络设备的\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"表\",{\"1\":{\"2470\":1,\"2471\":1,\"2479\":1,\"2488\":2,\"2490\":1,\"2496\":1,\"2586\":1,\"4964\":1,\"5568\":1,\"5569\":1,\"5577\":1,\"5586\":2,\"5588\":1,\"5594\":1}}],[\"表达式\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"表示审核成功存储到数据库\",{\"1\":{\"3405\":1,\"5685\":1}}],[\"表示成功\",{\"1\":{\"3084\":1,\"4440\":1}}],[\"表示成2进制就是1000\",{\"1\":{\"974\":1}}],[\"表示最后一次插入或更新该行的事务\",{\"1\":{\"2857\":1,\"5235\":1}}],[\"表示今后不会再有数据发送\",{\"1\":{\"2344\":1}}],[\"表示希望建立连接\",{\"1\":{\"2343\":1}}],[\"表示\",{\"1\":{\"2342\":1,\"3465\":1,\"5734\":1}}],[\"表示hashmap满的程度\",{\"1\":{\"940\":1}}],[\"表示运行应用程序中出现了严重的错误\",{\"1\":{\"433\":1,\"3892\":1}}],[\"依次发生如下事件\",{\"1\":{\"2478\":1,\"5576\":1}}],[\"依赖于有序的数据\",{\"1\":{\"2637\":1,\"2645\":1,\"5015\":1,\"5023\":1}}],[\"依赖的可能是别的不提供自身报文长度或首部长度的网络层协议\",{\"1\":{\"2409\":1}}],[\"依赖隔离\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"依赖有源码例子\",{\"1\":{\"1134\":1,\"4167\":1}}],[\"依赖了\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"依然是\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"依然不完美\",{\"1\":{\"588\":1}}],[\"依然有我们不需要的方法啊\",{\"1\":{\"587\":1}}],[\"继续进行监听\",{\"1\":{\"1500\":1,\"1668\":1,\"1836\":1,\"2004\":1,\"4927\":1}}],[\"继续创建\",{\"1\":{\"1129\":1,\"4162\":1}}],[\"继承\",{\"1\":{\"3215\":1,\"3274\":1,\"4339\":1,\"4502\":1}}],[\"继承自spring\",{\"1\":{\"1189\":1,\"4222\":1}}],[\"继承关系把父类的所有方法都拿过来的问题\",{\"1\":{\"577\":1}}],[\"继承关系描述的是\",{\"1\":{\"548\":1}}],[\"继承使得子类继承了父类的所有公有方法\",{\"1\":{\"541\":1}}],[\"继承了\",{\"1\":{\"539\":1,\"542\":1,\"579\":1}}],[\"往往更利于对问题有更深入的了解和研究\",{\"1\":{\"1109\":1,\"4142\":1}}],[\"往往出现老年代空间剩余\",{\"1\":{\"371\":1}}],[\"幻读\",{\"0\":{\"2824\":1,\"5202\":1},\"1\":{\"2825\":1,\"5203\":1}}],[\"幻读或不可重复读\",{\"1\":{\"1092\":1,\"4125\":1}}],[\"幻灯片页\",{\"0\":{\"157\":1}}],[\"幻灯片\",{\"0\":{\"111\":1,\"3765\":1}}],[\"允许创建的线程数量为\",{\"1\":{\"3343\":1,\"4600\":1}}],[\"允许多个线程持有锁\",{\"1\":{\"3065\":1,\"4419\":1}}],[\"允许多个线程同时读取共享资源\",{\"1\":{\"1354\":1,\"1522\":1,\"1690\":1,\"1858\":1,\"4781\":1}}],[\"允许在第一次连接时发送数据\",{\"1\":{\"2515\":1,\"5613\":1}}],[\"允许在同一\",{\"1\":{\"2507\":1,\"5605\":1}}],[\"允许读取并发事务已经提交的数据\",{\"1\":{\"1093\":1,\"4126\":1}}],[\"允许读取尚未提交的数据变更\",{\"1\":{\"1092\":1,\"4125\":1}}],[\"允许我们在运行时对字节码进行修改和动态生成\",{\"1\":{\"858\":1,\"4067\":1}}],[\"超出阈值时\",{\"1\":{\"3255\":1,\"4484\":1}}],[\"超过该时间\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"超过半数\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"超过临界值\",{\"1\":{\"938\":1}}],[\"超时\",{\"1\":{\"1086\":1,\"3213\":1,\"4119\":1,\"4337\":1}}],[\"平衡\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"平衡的二叉树\",{\"1\":{\"658\":1,\"3999\":1}}],[\"平台\",{\"1\":{\"1085\":1,\"4118\":1}}],[\"谈谈你对\",{\"0\":{\"1077\":1,\"4110\":1}}],[\"适合使用自旋锁\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"适于互联网时代\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"适配器模式\",{\"1\":{\"1075\":1,\"4108\":1}}],[\"适⽤于⼯⼚类负责创建对象较少的情况\",{\"1\":{\"825\":1,\"4034\":1}}],[\"事实上\",{\"1\":{\"1431\":1,\"1491\":1,\"1599\":1,\"1659\":1,\"1767\":1,\"1827\":1,\"1935\":1,\"1995\":1,\"4858\":1,\"4918\":1}}],[\"事件类型包含连接事件\",{\"1\":{\"1436\":1,\"1604\":1,\"1772\":1,\"1940\":1,\"4863\":1}}],[\"事件发生时只会通知一次\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"事件\",{\"1\":{\"1357\":1,\"1525\":1,\"1693\":1,\"1861\":1,\"4784\":1}}],[\"事件驱动模型就是观察者模式很经典的一个应用\",{\"1\":{\"1074\":1,\"4107\":1}}],[\"事务执行过程中看到的数据\",{\"1\":{\"2847\":1,\"5225\":1}}],[\"事务\",{\"1\":{\"2818\":1,\"2823\":1,\"2827\":1,\"2828\":1,\"2861\":1,\"5196\":1,\"5201\":1,\"5205\":1,\"5206\":1,\"5239\":1}}],[\"事务处理结束后\",{\"1\":{\"2809\":1,\"5187\":1}}],[\"事务看起来感觉简单\",{\"1\":{\"2805\":1,\"5183\":1}}],[\"事务的能力\",{\"1\":{\"2569\":1,\"4947\":1}}],[\"事务的原子性确保动作要么全部完成\",{\"1\":{\"1080\":1,\"4113\":1}}],[\"事务传播行为是为了解决业务层方法之间互相调用的事务问题\",{\"1\":{\"1097\":1,\"4130\":1}}],[\"事务运行状态\",{\"1\":{\"1087\":1,\"4120\":1}}],[\"事务隔离级别\",{\"1\":{\"1086\":1,\"4119\":1}}],[\"事务定义信息\",{\"1\":{\"1086\":1,\"4119\":1}}],[\"事务管理器\",{\"1\":{\"1085\":1,\"4118\":1}}],[\"事务管理接口\",{\"1\":{\"1084\":1,\"4117\":1}}],[\"事务是由\",{\"1\":{\"2803\":1,\"5181\":1}}],[\"事务是最小的执行单位\",{\"1\":{\"1080\":1,\"4113\":1}}],[\"事务是逻辑上的一组操作\",{\"1\":{\"1078\":1,\"4111\":1}}],[\"事务特性\",{\"1\":{\"1079\":1,\"4112\":1}}],[\"事情可能就不一样了\",{\"1\":{\"554\":1}}],[\"格式等\",{\"1\":{\"1063\":1,\"4096\":1}}],[\"长度\",{\"1\":{\"1063\":1,\"4096\":1}}],[\"开头的\",{\"1\":{\"2681\":1,\"5059\":1}}],[\"开放最短路径优先协议\",{\"1\":{\"2453\":1,\"2546\":1,\"5551\":1}}],[\"开销较小\",{\"1\":{\"2390\":1}}],[\"开启\",{\"1\":{\"2974\":1,\"5352\":1}}],[\"开启kafka本身存在的幂等性\",{\"1\":{\"1300\":1,\"5492\":1}}],[\"开启二级缓存后\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"开始审核文章\",{\"1\":{\"3507\":1,\"5776\":1}}],[\"开始技术面试了\",{\"1\":{\"3415\":1,\"5695\":1}}],[\"开始提供了atomicreference\",{\"1\":{\"3125\":1,\"4407\":1}}],[\"开始提供了atomicstampedreference类\",{\"1\":{\"3117\":1,\"4400\":1}}],[\"开始填充时发现依赖于\",{\"1\":{\"1118\":1,\"4151\":1}}],[\"开始执行handler\",{\"1\":{\"1059\":1,\"4092\":1}}],[\"开发了基于\",{\"1\":{\"5530\":1}}],[\"开发技术\",{\"1\":{\"3445\":1,\"5714\":1}}],[\"开发手册\",{\"1\":{\"2573\":1,\"3337\":1,\"3340\":1,\"4594\":1,\"4597\":1,\"4951\":1}}],[\"开发者要选出最佳的通信机制\",{\"1\":{\"2052\":1,\"4657\":1}}],[\"开发者可以选择合适的数据结构来定义\",{\"1\":{\"575\":1}}],[\"开发人员\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"开发人员可以重新加载\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"开发团队赋予它的使命是未来可以替换掉\",{\"1\":{\"373\":1}}],[\"入参\",{\"1\":{\"1059\":1,\"4092\":1}}],[\"入队和出队\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"入队\",{\"1\":{\"733\":1}}],[\"填充\",{\"1\":{\"1059\":1,\"4092\":1}}],[\"附注\",{\"1\":{\"1058\":1,\"4091\":1}}],[\"获得该\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"获取class对象\",{\"0\":{\"3946\":1}}],[\"获取不到\",{\"1\":{\"3271\":1,\"4499\":1}}],[\"获取当前请求的线程\",{\"1\":{\"3193\":1,\"4537\":1}}],[\"获取后将锁计数器设为\",{\"1\":{\"3170\":1,\"4515\":1}}],[\"获取锁的操作\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"获取锁\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"获取字符串长度的时间复杂度是\",{\"1\":{\"2921\":1,\"5299\":1}}],[\"获取到当前线程对象后\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"获取到主机\",{\"1\":{\"2497\":1,\"5595\":1}}],[\"获取到目标接口的\",{\"1\":{\"2493\":1,\"5591\":1}}],[\"获取连接\",{\"1\":{\"1467\":1,\"1482\":1,\"1499\":1,\"1635\":1,\"1650\":1,\"1667\":1,\"1803\":1,\"1818\":1,\"1835\":1,\"1971\":1,\"1986\":1,\"2003\":1,\"4894\":1,\"4909\":1,\"4926\":1}}],[\"获取一个自增的计数\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"获取需要自动装配的所有配置类\",{\"1\":{\"1144\":1,\"4177\":1}}],[\"获取所有方法\",{\"1\":{\"515\":1,\"3966\":1}}],[\"获取类的所有信息\",{\"0\":{\"3962\":1}}],[\"获取类的构造器\",{\"1\":{\"516\":1,\"3967\":1}}],[\"获取类中被public修饰的所有方法\",{\"1\":{\"515\":1,\"3966\":1}}],[\"获取类中的方法\",{\"1\":{\"514\":1,\"3965\":1}}],[\"获取类中的变量\",{\"1\":{\"512\":1,\"3963\":1}}],[\"获取类中所有构造器\",{\"1\":{\"517\":1,\"3968\":1}}],[\"获取类中所有被public修饰的构造器\",{\"1\":{\"517\":1,\"3968\":1}}],[\"获取类中所有被public修饰的所有变量\",{\"1\":{\"513\":1,\"3964\":1}}],[\"获取类中所有的变量\",{\"1\":{\"513\":1,\"3964\":1}}],[\"获取类信息\",{\"1\":{\"502\":1,\"3953\":1}}],[\"获取属性\",{\"1\":{\"502\":1,\"3953\":1}}],[\"得到\",{\"1\":{\"3630\":1,\"3636\":1}}],[\"得到值之后判断位数组中的每个元素是否都为\",{\"1\":{\"3030\":1,\"5408\":1}}],[\"得到哈希值\",{\"1\":{\"3026\":1,\"5404\":1}}],[\"得到请求资源标识符\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"得到的结果一定是个正数\",{\"1\":{\"996\":1}}],[\"得到的值为\",{\"1\":{\"989\":1}}],[\"捕获\",{\"1\":{\"1056\":1,\"4089\":1}}],[\"渲染数据\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"视频播放排名\",{\"1\":{\"2957\":1,\"5335\":1}}],[\"视频\",{\"1\":{\"2403\":1,\"2920\":1,\"5298\":1}}],[\"视图解析器进行解析\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"视情况而定\",{\"1\":{\"658\":1,\"3999\":1}}],[\"处理完后\",{\"1\":{\"1486\":1,\"1654\":1,\"1822\":1,\"1990\":1,\"4913\":1}}],[\"处理资源池可以是单个进程\",{\"1\":{\"1440\":1,\"1608\":1,\"1776\":1,\"1944\":1,\"4867\":1}}],[\"处理资源池负责处理事件\",{\"1\":{\"1437\":1,\"1605\":1,\"1773\":1,\"1941\":1,\"4864\":1}}],[\"处理可控异常\",{\"1\":{\"1159\":1,\"4192\":1}}],[\"处理不可控异常\",{\"1\":{\"1159\":1,\"4192\":1}}],[\"处理\",{\"1\":{\"1156\":1,\"2414\":1,\"2507\":1,\"4189\":1,\"5605\":1}}],[\"处理全局异常\",{\"1\":{\"1155\":1,\"4188\":1}}],[\"处理器返回一个模型视图\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"处理异常的小例子\",{\"1\":{\"465\":1,\"3916\":1}}],[\"客户端在注册或登录的时候\",{\"1\":{\"3594\":1,\"3600\":1}}],[\"客户端b执行代码完成\",{\"1\":{\"3551\":1,\"5820\":1}}],[\"客户端b在等待一段时间后再去请求设置key的值\",{\"1\":{\"3550\":1,\"5819\":1}}],[\"客户端b也去请求服务器设置key的值\",{\"1\":{\"3548\":1,\"5817\":1}}],[\"客户端a执行代码完成\",{\"1\":{\"3549\":1,\"5818\":1}}],[\"客户端a请求服务器设置key的值\",{\"1\":{\"3547\":1,\"5816\":1}}],[\"客户端和目标建立连接\",{\"1\":{\"2543\":1,\"5641\":1}}],[\"客户端和服务器端都无法验证对方的身份\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"客户端首先会发出一个\",{\"1\":{\"2536\":1,\"5634\":1}}],[\"客户端只要能够找到任意一台\",{\"1\":{\"2534\":1,\"5632\":1}}],[\"客户端的端口数最多为\",{\"1\":{\"2371\":1}}],[\"客户端的\",{\"1\":{\"2371\":1}}],[\"客户端\",{\"1\":{\"2369\":1}}],[\"客户端调用\",{\"1\":{\"2332\":1}}],[\"客户端容错保护\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"客户端负载均衡\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"客户端发送请求\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"客户端不需要关注创建逻辑\",{\"1\":{\"824\":1,\"4033\":1}}],[\"容易计算\",{\"1\":{\"3587\":1}}],[\"容易成为性能的瓶颈的地方\",{\"1\":{\"1493\":1,\"1661\":1,\"1829\":1,\"1997\":1,\"4920\":1}}],[\"容错\",{\"1\":{\"2064\":1,\"4669\":1}}],[\"容器运行资源或执行用户指令等操作时\",{\"1\":{\"2026\":1,\"4631\":1}}],[\"容器还可以进行版本管理\",{\"1\":{\"2017\":1,\"4622\":1}}],[\"容器中的\",{\"1\":{\"1065\":1,\"4098\":1}}],[\"容器\",{\"1\":{\"1050\":1,\"4083\":1}}],[\"容量为\",{\"1\":{\"3309\":1,\"4574\":1}}],[\"容量\",{\"1\":{\"921\":1}}],[\"交出给其它线程使用\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"交互\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"交互演示\",{\"0\":{\"107\":1,\"109\":1,\"3761\":1,\"3763\":1}}],[\"交由\",{\"1\":{\"1047\":1,\"2947\":1,\"2955\":1,\"4080\":1,\"5325\":1,\"5333\":1}}],[\"生成数字签名\",{\"0\":{\"3638\":1}}],[\"生成一个\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"生成一个被代理对象的子类来作为代理\",{\"1\":{\"1046\":1,\"4079\":1}}],[\"生产者执行本地事务\",{\"1\":{\"2174\":1,\"4296\":1}}],[\"生产者\",{\"0\":{\"1254\":1,\"5446\":1},\"1\":{\"2171\":1,\"4293\":1}}],[\"生命周期与线程的生命周期一致\",{\"1\":{\"198\":1}}],[\"去年\",{\"1\":{\"3437\":1}}],[\"去创建\",{\"1\":{\"3340\":1,\"4597\":1}}],[\"去创建代理对象\",{\"1\":{\"1046\":1,\"4079\":1}}],[\"去resources下找配置文件\",{\"1\":{\"1151\":1,\"4184\":1}}],[\"去resources下找cofnig文件夹下找配置文件\",{\"1\":{\"1151\":1,\"4184\":1}}],[\"去进行代理了\",{\"1\":{\"1046\":1,\"4079\":1}}],[\"去执行\",{\"1\":{\"182\":1,\"3831\":1}}],[\"框架的工具类\",{\"0\":{\"3330\":1},\"1\":{\"4587\":1}}],[\"框架来管理\",{\"1\":{\"1047\":1,\"4080\":1}}],[\"框架\",{\"0\":{\"1042\":1,\"4075\":1},\"1\":{\"1050\":1,\"4083\":1}}],[\"框架应该是两个不得不提的\",{\"1\":{\"845\":1,\"4054\":1}}],[\"访问量达到了44w+\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"访问标志来辨别一个方法是否声明为同步方法\",{\"1\":{\"3175\":1,\"4520\":1}}],[\"访问\",{\"1\":{\"2197\":1,\"4319\":1}}],[\"访问http\",{\"1\":{\"1178\":1,\"4211\":1}}],[\"访问顺序经常用于实现lru缓存\",{\"1\":{\"1041\":1}}],[\"访问者模式\",{\"1\":{\"816\":1,\"4025\":1}}],[\"考虑treemap\",{\"1\":{\"1039\":1}}],[\"邻近键等\",{\"1\":{\"1036\":1}}],[\"推荐\",{\"0\":{\"3285\":1},\"1\":{\"4549\":1}}],[\"推荐奇数个\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"推荐使用concurrenthashmap\",{\"1\":{\"908\":1}}],[\"推荐使用hashmap\",{\"1\":{\"908\":1}}],[\"推敲\",{\"1\":{\"1032\":1}}],[\"质量来考虑的\",{\"1\":{\"1021\":1}}],[\"功效\",{\"1\":{\"1021\":1}}],[\"功能有路由分发和过滤\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"功能齐全\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"功能和\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"功能的实现\",{\"1\":{\"1070\":1,\"4103\":1}}],[\"功能详情\",{\"1\":{\"165\":1,\"173\":1,\"3814\":1,\"3822\":1}}],[\"功能\",{\"0\":{\"158\":1,\"166\":1,\"3807\":1,\"3815\":1},\"1\":{\"160\":1,\"168\":1,\"2096\":1,\"3809\":1,\"3817\":1,\"4701\":1}}],[\"功能亮点\",{\"0\":{\"142\":1,\"3796\":1}}],[\"降低资源消耗\",{\"1\":{\"3281\":1,\"4545\":1}}],[\"降低开发成本\",{\"1\":{\"2047\":1,\"4652\":1}}],[\"降低模块间的耦合度\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"降低到o\",{\"1\":{\"1017\":1}}],[\"降低哈希冲突的概率\",{\"1\":{\"988\":1}}],[\"至少目前来看\",{\"1\":{\"5533\":1}}],[\"至少我目前没有办法证明哪个更优\",{\"1\":{\"1015\":1}}],[\"至于获取资源失败入队\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"至于为啥不和hashmap采用同样的算法进行扰动\",{\"1\":{\"1015\":1}}],[\"至此也就解决了\",{\"1\":{\"1134\":1,\"4167\":1}}],[\"至此\",{\"1\":{\"982\":1,\"1007\":1,\"1031\":1}}],[\"避免因多线程操作共享变量而导致的数据不一致的情况\",{\"1\":{\"3187\":1}}],[\"避免过度消耗\",{\"1\":{\"3121\":1,\"4403\":1}}],[\"避免同时处理大量的请求\",{\"1\":{\"3048\":1,\"5426\":1}}],[\"避免单机出现问题整个缓存服务都没办法使用\",{\"1\":{\"3047\":1,\"5425\":1}}],[\"避免使用子查询\",{\"0\":{\"2902\":1,\"5280\":1}}],[\"避免更多的关联操作\",{\"1\":{\"2880\":1,\"5258\":1}}],[\"避免索引失效\",{\"1\":{\"2676\":1,\"5054\":1}}],[\"避免发生冲突\",{\"1\":{\"1015\":1}}],[\"避免出现循环链表的情况\",{\"1\":{\"869\":1,\"3977\":1}}],[\"又扯到hashmap底层用到了红黑树\",{\"1\":{\"3396\":1,\"5676\":1}}],[\"又有新的任务提交\",{\"1\":{\"3334\":1,\"4591\":1}}],[\"又能阻止其他事务将新纪录插入到被保护记录前面的间隙中\",{\"1\":{\"2792\":1,\"5170\":1}}],[\"又不会出现数据一致性问题\",{\"1\":{\"2770\":1,\"5148\":1}}],[\"又称为辅助索引\",{\"1\":{\"2622\":1,\"5000\":1}}],[\"又称为幽灵引用或者幻影引用\",{\"1\":{\"320\":1}}],[\"又重新恢复了\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"又对hash算法做了一些改进\",{\"1\":{\"1012\":1}}],[\"又是hashmap更胜一筹\",{\"1\":{\"1011\":1}}],[\"似乎更高明些\",{\"1\":{\"1010\":1}}],[\"zhengzhaoyang122\",{\"1\":{\"3218\":1,\"4342\":1}}],[\"zhihu\",{\"1\":{\"3059\":1,\"4413\":1}}],[\"zhizhengguan\",{\"1\":{\"3056\":1,\"5434\":1}}],[\"zhuanlan\",{\"1\":{\"3059\":1,\"4413\":1}}],[\"zhaox\",{\"1\":{\"1006\":1}}],[\"ziplist\",{\"1\":{\"2930\":2,\"2945\":2,\"5308\":2,\"5323\":2}}],[\"zset数据类型的去重有序\",{\"1\":{\"3518\":1,\"5787\":1}}],[\"zset\",{\"0\":{\"2950\":1,\"5328\":1},\"1\":{\"2913\":1,\"2952\":1,\"2953\":1,\"2954\":1,\"5291\":1,\"5330\":1,\"5331\":1,\"5332\":1}}],[\"zrank\",{\"1\":{\"2182\":1,\"4304\":1}}],[\"zadd\",{\"1\":{\"2182\":1,\"4304\":1}}],[\"zab\",{\"0\":{\"2101\":1,\"2103\":1,\"2109\":1,\"4706\":1,\"4708\":1,\"4714\":1},\"1\":{\"2102\":2,\"2104\":1,\"2105\":2,\"2106\":1,\"2108\":1,\"2110\":2,\"2114\":1,\"2116\":1,\"2119\":1,\"2122\":1,\"2123\":1,\"2131\":1,\"4707\":2,\"4709\":1,\"4710\":2,\"4711\":1,\"4713\":1,\"4715\":2,\"4719\":1,\"4721\":1,\"4724\":1,\"4727\":1,\"4728\":1,\"4736\":1}}],[\"zab算法\",{\"0\":{\"2100\":1,\"4705\":1}}],[\"zxid\",{\"1\":{\"2119\":1,\"2120\":1,\"2124\":2,\"2125\":2,\"2128\":1,\"2129\":1,\"2139\":2,\"4724\":1,\"4725\":1,\"4729\":2,\"4730\":2,\"4733\":1,\"4734\":1,\"4744\":2}}],[\"zkserver\",{\"1\":{\"2114\":1,\"2118\":1,\"4719\":1,\"4723\":1}}],[\"zookeeper\",{\"0\":{\"2092\":1,\"2093\":1,\"2107\":1,\"4697\":1,\"4698\":1,\"4712\":1},\"1\":{\"2095\":1,\"2096\":2,\"2097\":1,\"2098\":1,\"2099\":2,\"2102\":4,\"2108\":2,\"2123\":1,\"2130\":2,\"2157\":1,\"3445\":1,\"4700\":1,\"4701\":2,\"4702\":1,\"4703\":1,\"4704\":2,\"4707\":4,\"4713\":2,\"4728\":1,\"4735\":2,\"4762\":1,\"5714\":1}}],[\"zuul\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"zero\",{\"1\":{\"999\":1,\"1427\":1,\"1595\":1,\"1763\":1,\"1931\":1,\"4854\":1}}],[\"暂时停止运行\",{\"1\":{\"1346\":1,\"1514\":1,\"1682\":1,\"1850\":1,\"4773\":1}}],[\"暂时只是做到这个份儿上\",{\"1\":{\"589\":1}}],[\"暂不详细介绍\",{\"1\":{\"1006\":1}}],[\"奇数作为容量的大小\",{\"1\":{\"1006\":1}}],[\"奇数\",{\"1\":{\"1005\":1}}],[\"取出\",{\"1\":{\"3193\":1,\"4537\":1}}],[\"取得代之的确实是\",{\"1\":{\"3175\":1,\"3179\":1,\"4520\":1,\"4524\":1}}],[\"取消点赞的操作就是删除redis中的数据即可\",{\"1\":{\"2169\":1,\"4291\":1}}],[\"取而代之的是这段代码\",{\"1\":{\"1000\":1}}],[\"取了一下其hashcode\",{\"1\":{\"1000\":1}}],[\"取代了\",{\"1\":{\"282\":1}}],[\"~\",{\"1\":{\"996\":1}}],[\"计数器\",{\"1\":{\"3248\":2,\"4478\":2}}],[\"计数比如用户单位时间的请求数\",{\"1\":{\"2925\":1,\"5303\":1}}],[\"计算量小\",{\"1\":{\"3652\":1}}],[\"计算后要修改后的新值b\",{\"1\":{\"3096\":1,\"4372\":1}}],[\"计算机网络基础\",{\"0\":{\"2544\":1}}],[\"计算机网络\",{\"0\":{\"2450\":1,\"5548\":1,\"5853\":1}}],[\"计算第i个消费者\",{\"1\":{\"1272\":2,\"5464\":2}}],[\"计算平均分配后多出的分区数\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"计算平均每个消费者分配的分区数\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"计算结果都一样\",{\"1\":{\"989\":1}}],[\"计划\",{\"1\":{\"76\":1,\"77\":1,\"3730\":1,\"3731\":1}}],[\"呢\",{\"0\":{\"2423\":1},\"1\":{\"970\":1,\"1373\":1,\"1541\":1,\"1709\":1,\"1877\":1,\"2116\":1,\"2127\":1,\"2308\":1,\"2588\":1,\"4721\":1,\"4732\":1,\"4800\":1,\"4966\":1}}],[\"高\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"高性能\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"高可用主要体现在系统7x24不间断服务\",{\"1\":{\"2050\":1,\"4655\":1}}],[\"高很多\",{\"1\":{\"969\":1}}],[\"高度\",{\"1\":{\"637\":1}}],[\"^\",{\"1\":{\"968\":3,\"987\":3,\"999\":1,\"1014\":2,\"1020\":1,\"1021\":1,\"1028\":1}}],[\"^=\",{\"1\":{\"968\":2,\"987\":2,\"1014\":3}}],[\"输出的消息摘要又称为哈希值\",{\"1\":{\"3582\":1}}],[\"输出应该是个int类型的数组下标\",{\"1\":{\"962\":1}}],[\"输出结果\",{\"1\":{\"944\":1}}],[\"输出结果为\",{\"1\":{\"926\":1}}],[\"keepalivetime才会被回收销毁\",{\"1\":{\"3294\":1,\"4558\":1}}],[\"keepalivetime\",{\"1\":{\"3288\":7,\"3294\":1,\"3295\":1,\"4552\":7,\"4558\":1,\"4559\":1}}],[\"keep\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"keyset\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"key不为空时\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"key为空时\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"keybytes\",{\"1\":{\"1263\":4,\"5455\":4}}],[\"key\",{\"0\":{\"2790\":1,\"5168\":1},\"1\":{\"1020\":3,\"1024\":1,\"1221\":1,\"1263\":1,\"2182\":2,\"2569\":1,\"2587\":1,\"2588\":2,\"2594\":3,\"2598\":1,\"2599\":2,\"2602\":1,\"2625\":1,\"2781\":1,\"2791\":1,\"2792\":1,\"2793\":3,\"2794\":2,\"2797\":1,\"2848\":3,\"2926\":1,\"2949\":1,\"2992\":2,\"2994\":2,\"2995\":2,\"2997\":3,\"3005\":1,\"3010\":1,\"3015\":1,\"3018\":1,\"3019\":6,\"3021\":1,\"3033\":1,\"3039\":1,\"3040\":1,\"3181\":1,\"3195\":1,\"3197\":1,\"3201\":1,\"3203\":3,\"3545\":2,\"3546\":3,\"4254\":1,\"4304\":2,\"4539\":1,\"4541\":1,\"4947\":1,\"4965\":1,\"4966\":2,\"4972\":3,\"4976\":1,\"4977\":2,\"4980\":1,\"5003\":1,\"5159\":1,\"5169\":1,\"5170\":1,\"5171\":3,\"5172\":2,\"5175\":1,\"5226\":3,\"5304\":1,\"5327\":1,\"5370\":2,\"5372\":2,\"5373\":2,\"5375\":3,\"5383\":1,\"5388\":1,\"5393\":1,\"5396\":1,\"5397\":6,\"5399\":1,\"5411\":1,\"5417\":1,\"5418\":1,\"5455\":1,\"5814\":2,\"5815\":3}}],[\"key的值为\",{\"1\":{\"989\":1}}],[\"kill\",{\"1\":{\"2739\":1,\"5117\":1}}],[\"kraft\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"kubernetes\",{\"1\":{\"2060\":1,\"4665\":1}}],[\"kafka容灾\",{\"1\":{\"2193\":1,\"4315\":1}}],[\"kafka有个offset的概念\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"kafka如何保证消息不被重复消费\",{\"0\":{\"1296\":1,\"5488\":1}}],[\"kafka默认采用rangeassignor的分配算法\",{\"1\":{\"1267\":1,\"5459\":1}}],[\"kafka提供了3种消费者分区分配策略\",{\"1\":{\"1266\":1,\"5458\":1}}],[\"kafka权威指南\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"kafka\",{\"0\":{\"1243\":1,\"5435\":1,\"5833\":1,\"5852\":1},\"1\":{\"1245\":1,\"1248\":1,\"1252\":3,\"1431\":2,\"1432\":1,\"1599\":2,\"1600\":1,\"1767\":2,\"1768\":1,\"1935\":2,\"1936\":1,\"2099\":4,\"3445\":1,\"3465\":1,\"4704\":4,\"4858\":2,\"4859\":1,\"5437\":1,\"5440\":1,\"5444\":3,\"5714\":1,\"5734\":1}}],[\"k\",{\"1\":{\"958\":1,\"963\":1,\"968\":4,\"987\":1,\"999\":2,\"1014\":4,\"1021\":1}}],[\"k>=1\",{\"1\":{\"645\":1}}],[\"函数形式如下\",{\"1\":{\"1415\":1,\"1583\":1,\"1751\":1,\"1919\":1,\"4842\":1}}],[\"函数读完才结束\",{\"1\":{\"1389\":1,\"1557\":1,\"1725\":1,\"1893\":1,\"4816\":1}}],[\"函数从内核读取数据\",{\"1\":{\"1388\":1,\"1556\":1,\"1724\":1,\"1892\":1,\"4815\":1}}],[\"函数时\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"函数加入内核中的红黑树里\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"函数\",{\"1\":{\"956\":2,\"2680\":1,\"2981\":1,\"5058\":1,\"5359\":1}}],[\"反过来也成立\",{\"1\":{\"3645\":1}}],[\"反过来我们也正是通过这些特征找到正确的链表\",{\"1\":{\"956\":1}}],[\"反问环节\",{\"1\":{\"3406\":1,\"5686\":1}}],[\"反问\",{\"1\":{\"3392\":1,\"5672\":1}}],[\"反之\",{\"1\":{\"2729\":1,\"5107\":1}}],[\"反而被经常修改\",{\"1\":{\"2665\":1,\"5043\":1}}],[\"反序列化的技术克隆一份新的数据给你\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"反转\",{\"1\":{\"1050\":1,\"4083\":1}}],[\"反射可以使得程序更加健壮\",{\"1\":{\"519\":1,\"3970\":1}}],[\"反射\",{\"0\":{\"3926\":1},\"1\":{\"519\":1,\"3970\":1}}],[\"反射的应用场景\",{\"1\":{\"518\":1,\"3969\":1}}],[\"反射是java的一种机制\",{\"1\":{\"488\":1,\"3939\":1}}],[\"左边很明显是个数组\",{\"1\":{\"956\":1}}],[\"左子树\",{\"1\":{\"641\":1}}],[\"寻址相同\",{\"1\":{\"2492\":1,\"5590\":1}}],[\"寻址\",{\"0\":{\"2475\":1,\"2487\":1,\"5573\":1,\"5585\":1},\"1\":{\"2473\":1,\"2489\":1,\"5571\":1,\"5587\":1}}],[\"寻址效率也足够高\",{\"1\":{\"1029\":1}}],[\"寻址困难\",{\"1\":{\"954\":1}}],[\"寻址容易\",{\"1\":{\"954\":1}}],[\"保护敏感数据\",{\"1\":{\"3504\":1,\"5773\":1}}],[\"保存文章内容\",{\"1\":{\"3516\":1,\"5785\":1}}],[\"保存文章配置信息\",{\"1\":{\"3515\":1,\"5784\":1}}],[\"保存文章信息\",{\"1\":{\"3514\":1,\"5783\":1}}],[\"保存当前获得锁的线程\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"保存数据有两种比较简单的数据结构\",{\"1\":{\"954\":1}}],[\"保证系统数据的可靠性\",{\"1\":{\"3556\":1,\"5825\":1}}],[\"保证原子性\",{\"1\":{\"3141\":1}}],[\"保证共享变量的可见性\",{\"1\":{\"3139\":1,\"4452\":1}}],[\"保证只有一个请求会落到数据库上\",{\"1\":{\"3037\":1,\"5415\":1}}],[\"保证数据传输的安全性\",{\"1\":{\"2386\":1}}],[\"保证每个机房都有全量的数据\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"保证了数据持久化\",{\"1\":{\"2981\":1,\"5359\":1}}],[\"保证了消息的发送顺序性\",{\"1\":{\"2118\":1,\"4723\":1}}],[\"保证了内存的利用率达到\",{\"1\":{\"335\":1}}],[\"9time\",{\"0\":{\"2437\":1}}],[\"9第三次握手丢失了\",{\"0\":{\"2426\":1}}],[\"95\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"99\",{\"1\":{\"2129\":2,\"4734\":2}}],[\"9\",{\"1\":{\"930\":1,\"932\":1,\"2889\":1,\"3382\":1,\"3419\":1,\"3442\":1,\"5267\":1,\"5662\":1,\"5699\":1}}],[\"900\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"90\",{\"1\":{\"335\":1}}],[\"桶\",{\"1\":{\"924\":1}}],[\"桶中元素的插入只会在hash冲突时发生\",{\"1\":{\"873\":1,\"3981\":1}}],[\"临界值\",{\"1\":{\"919\":1}}],[\"装载因子\",{\"1\":{\"917\":1,\"919\":1}}],[\"装饰器模式\",{\"0\":{\"4041\":1}}],[\"装饰器\",{\"1\":{\"816\":1,\"4025\":1}}],[\"先做一个两分钟以内的自我介绍\",{\"1\":{\"3411\":1,\"5691\":1}}],[\"先做个总结\",{\"1\":{\"982\":1}}],[\"先比较当前锁标志位是否为\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"先判断头结点是不是signal状态\",{\"1\":{\"3066\":1,\"4420\":1}}],[\"先判断用户发来的请求的值是否存在于布隆过滤器中\",{\"1\":{\"3022\":1,\"5400\":1}}],[\"先获取互斥锁\",{\"1\":{\"3037\":1,\"5415\":1}}],[\"先开始从数据库查询账户余额大于\",{\"1\":{\"2827\":1,\"5205\":1}}],[\"先开始从数据库中读取小林的余额数据\",{\"1\":{\"2818\":1,\"2823\":1,\"5196\":1,\"5201\":1}}],[\"先会加上表级别的意向独占锁\",{\"1\":{\"2751\":1,\"5129\":1}}],[\"先表上加上意向独占锁\",{\"1\":{\"2747\":1,\"5125\":1}}],[\"先在表上加上意向共享锁\",{\"1\":{\"2747\":1,\"5125\":1}}],[\"先要看看数据库中的长事务\",{\"1\":{\"2739\":1,\"5117\":1}}],[\"先要了解下什么是循环依赖\",{\"1\":{\"1109\":1,\"4142\":1}}],[\"先启用了事务\",{\"1\":{\"2733\":1,\"5111\":1}}],[\"先来先获取的公平性原则\",{\"1\":{\"3268\":1,\"4496\":1}}],[\"先来说说表锁\",{\"1\":{\"2713\":1,\"5091\":1}}],[\"先来看看\",{\"1\":{\"1478\":1,\"1646\":1,\"1814\":1,\"1982\":1,\"4905\":1}}],[\"先来看一下\",{\"1\":{\"910\":1}}],[\"先构造\",{\"1\":{\"2493\":1,\"5591\":1}}],[\"先给大家列出目录\",{\"1\":{\"2293\":1}}],[\"先查老的\",{\"1\":{\"2188\":1,\"4310\":1}}],[\"先查询数据库改用户是否进行点赞\",{\"1\":{\"2169\":1,\"4291\":1}}],[\"先查询成品缓存\",{\"1\":{\"1133\":1,\"4166\":1}}],[\"先关注自己的开发\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"先把所有连接\",{\"1\":{\"1376\":1,\"1544\":1,\"1712\":1,\"1880\":1,\"4803\":1}}],[\"先进先出\",{\"1\":{\"1365\":1,\"1533\":1,\"1701\":1,\"1869\":1,\"4792\":1}}],[\"先去项目根目录找config文件夹下找配置文件件\",{\"1\":{\"1151\":1,\"4184\":1}}],[\"先看一个简单的\",{\"1\":{\"465\":1,\"3916\":1}}],[\"前驱结点\",{\"1\":{\"3073\":1,\"4428\":1}}],[\"前驱节点\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"前面部分是一致的\",{\"1\":{\"3066\":1,\"4420\":1}}],[\"前面也提到\",{\"1\":{\"2773\":1,\"5151\":1}}],[\"前面已经介绍了\",{\"1\":{\"2602\":1,\"4980\":1}}],[\"前面我说过\",{\"1\":{\"969\":1}}],[\"前面我们提到过\",{\"1\":{\"936\":1}}],[\"前缀匹配的范围查询\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"前缀索引仅限于字符串类型\",{\"1\":{\"2675\":1,\"5053\":1}}],[\"前缀索引是对文本的前几个字符创建索引\",{\"1\":{\"2627\":1,\"5005\":1}}],[\"前缀索引只适用于字符串类型的数据\",{\"1\":{\"2627\":1,\"5005\":1}}],[\"前缀索引\",{\"1\":{\"2627\":1,\"5005\":1}}],[\"前缀索引等索引属于二级索引\",{\"1\":{\"2623\":1,\"5001\":1}}],[\"前缀是\",{\"1\":{\"2520\":2,\"5618\":2}}],[\"前缀\",{\"1\":{\"2520\":1,\"5618\":1}}],[\"前一个\",{\"1\":{\"2353\":1}}],[\"前端查询时把id返回过来了\",{\"1\":{\"2186\":1,\"4308\":1}}],[\"前端控制servelt\",{\"1\":{\"1056\":1,\"4089\":1}}],[\"前端控制器\",{\"1\":{\"1053\":2,\"4086\":2}}],[\"前提条件\",{\"1\":{\"1290\":1,\"5482\":1}}],[\"前置创建\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"前28位无论是什么\",{\"1\":{\"989\":1}}],[\"前者线程安全的\",{\"1\":{\"900\":1}}],[\"前三个阶段可以统称为连接\",{\"1\":{\"386\":1,\"3839\":1}}],[\"遍历线程池中的所有线程\",{\"1\":{\"3321\":1}}],[\"遍历支持fast\",{\"1\":{\"891\":1}}],[\"遍历方式的内部实现上不同\",{\"1\":{\"891\":1}}],[\"支持持久化\",{\"1\":{\"2959\":1,\"5337\":1}}],[\"支持\",{\"1\":{\"2571\":1,\"2575\":1,\"2578\":1,\"4949\":1,\"4953\":1,\"4956\":1}}],[\"支持行级锁\",{\"1\":{\"2565\":1,\"4943\":1}}],[\"支持服务器推送\",{\"1\":{\"2512\":1,\"5610\":1}}],[\"支持对header压缩\",{\"1\":{\"2511\":1,\"5609\":1}}],[\"支持body压缩\",{\"1\":{\"2511\":1,\"5609\":1}}],[\"支持长连接\",{\"1\":{\"2504\":1,\"5602\":1}}],[\"支持一对一\",{\"1\":{\"2381\":1}}],[\"支持切换机房写数据的时候\",{\"1\":{\"2192\":1,\"4314\":1}}],[\"支持本地仓库\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"支持两种事件触发模式\",{\"1\":{\"1386\":1,\"1554\":1,\"1722\":1,\"1890\":1,\"4813\":1}}],[\"支持当前事务的情况\",{\"1\":{\"1098\":1,\"4131\":1}}],[\"支持fast\",{\"1\":{\"891\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"80\":1,\"3734\":1}}],[\"底层利用unsafe对象实现的\",{\"1\":{\"3255\":1,\"4484\":1}}],[\"底层原理了解吗\",{\"1\":{\"3181\":1,\"4526\":1}}],[\"底层使用了模板方法模式\",{\"0\":{\"3079\":1,\"4435\":1}}],[\"底层会通过限制删除操作执行的时长和频率来减少删除操作对\",{\"1\":{\"2995\":1,\"5373\":1}}],[\"底层数据结构\",{\"0\":{\"2585\":1,\"4963\":1},\"1\":{\"2946\":1,\"5324\":1}}],[\"底层都是哈希算法\",{\"1\":{\"882\":1}}],[\"底层开发人员可以随意维护自己的\",{\"1\":{\"574\":1}}],[\"然而jdk又不能阻止用户实现这种不好的hash算法\",{\"1\":{\"879\":1,\"3987\":1}}],[\"然后他也说了你只是了解\",{\"1\":{\"3376\":1,\"5656\":1}}],[\"然后他们才有资格提升到老一代\",{\"1\":{\"235\":1}}],[\"然后停止所有正在执行或暂停任务的线程\",{\"1\":{\"3325\":1}}],[\"然后中断所有没有正在执行任务的线程\",{\"1\":{\"3323\":1}}],[\"然后逐个调用线程的interrupt方法来中断线程\",{\"1\":{\"3321\":1}}],[\"然后线程将当前锁的持有者信息修改为自己\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"然后判断锁对象是否处于被锁定状态\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"然后执行javap\",{\"1\":{\"3164\":1,\"4508\":1}}],[\"然后执行一条\",{\"1\":{\"2733\":1,\"5111\":1}}],[\"然后一个线程去读这个变量\",{\"1\":{\"3140\":1,\"4453\":1}}],[\"然后一起参与到消息广播流程中去\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"然后又修改为\",{\"1\":{\"3113\":1,\"4395\":1}}],[\"然后开始上厕所\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"然后就\",{\"1\":{\"2997\":1,\"5375\":1}}],[\"然后就挂了\",{\"1\":{\"2195\":1,\"4317\":1}}],[\"然后整个事务期间都在用这个\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"然后整个事务执行期间都在用这个\",{\"1\":{\"2701\":1,\"5079\":1}}],[\"然后事务\",{\"1\":{\"2827\":1,\"2829\":1,\"5205\":1,\"5207\":1}}],[\"然后继续执行代码逻辑处理\",{\"1\":{\"2823\":1,\"5201\":1}}],[\"然后给该字段赋值一个自增的值\",{\"1\":{\"2761\":1,\"5139\":1}}],[\"然后为被\",{\"1\":{\"2757\":1,\"5135\":1}}],[\"然后对读取的记录加独占锁\",{\"1\":{\"2747\":1,\"5125\":1}}],[\"然后对读取的记录加共享锁\",{\"1\":{\"2747\":1,\"5125\":1}}],[\"然后对该记录加独占锁\",{\"1\":{\"2744\":1,\"5122\":1}}],[\"然后对分区做取模得到分区编号\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"然后以\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"然后同步到另外一个机房\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"然后新表的数据\",{\"1\":{\"2188\":1,\"4310\":1}}],[\"然后加到sql里\",{\"1\":{\"2186\":1,\"4308\":1}}],[\"然后根据查询到的结果\",{\"1\":{\"2178\":1,\"4300\":1}}],[\"然后根据该\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"然后要发给\",{\"1\":{\"2136\":1,\"4741\":1}}],[\"然后广播出去\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"然后广播给其他\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"然后也广播给其他\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"然后每个\",{\"1\":{\"2128\":1,\"4733\":1}}],[\"然后\",{\"1\":{\"2091\":1,\"2734\":1,\"3031\":1,\"4696\":1,\"5112\":1,\"5409\":1}}],[\"然后将已点赞的信息存入redis中\",{\"1\":{\"2169\":1,\"4291\":1}}],[\"然后将http的请求的响应结果\",{\"1\":{\"2087\":1,\"4692\":1}}],[\"然后将伊甸园中的剩余对象移动到幸存者\",{\"1\":{\"265\":1}}],[\"然后分发给底层不同的worker来处理\",{\"1\":{\"1316\":1,\"5508\":1}}],[\"然后这个consumer内部用内存队列做排队\",{\"1\":{\"1316\":1,\"5508\":1}}],[\"然后consumer消费该数据之后\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"然后订阅这个topic的消费组的消费者再进行排序\",{\"1\":{\"1269\":1,\"5461\":1}}],[\"然后在用户态中再处理这些连接对应的请求即可\",{\"1\":{\"1376\":1,\"1544\":1,\"1712\":1,\"1880\":1,\"4803\":1}}],[\"然后在对应的mapper\",{\"1\":{\"1226\":1,\"4259\":1}}],[\"然后在给插件编写注解\",{\"1\":{\"1218\":1,\"4251\":1}}],[\"然后在将hashcode得到的int值对数组长度进行取模\",{\"1\":{\"983\":1}}],[\"然后重写\",{\"1\":{\"1215\":1,\"4248\":1}}],[\"然后做出相应的响应处理\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"然后不停访问这些key导致hashmap忙于进行线性查找\",{\"1\":{\"1018\":1}}],[\"然后用这个数对hashmap或者hashtable的容量进行取模就行了\",{\"1\":{\"963\":1}}],[\"然后通过dubbo调用api来完成保存操作\",{\"1\":{\"2169\":1,\"4291\":1}}],[\"然后通过反射的方式打印capacity和size\",{\"1\":{\"926\":1}}],[\"然后通过扰动计算和按位与的方式计算出这个元素的存储位置\",{\"1\":{\"699\":1}}],[\"然后再写入到\",{\"1\":{\"2974\":1,\"5352\":1}}],[\"然后再执行更新操作\",{\"1\":{\"2818\":1,\"5196\":1}}],[\"然后再做表结构的变更\",{\"1\":{\"2739\":1,\"5117\":1}}],[\"然后再一路顺藤摸瓜找到位于下层的某台目标\",{\"1\":{\"2534\":1,\"5632\":1}}],[\"然后再广播出去\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"然后再通过h\",{\"1\":{\"1021\":1}}],[\"然后再对hashcode进行扰动\",{\"1\":{\"1015\":1}}],[\"然后再分析他们的作用\",{\"1\":{\"912\":1}}],[\"然后再把使用过的内存空间进行一次清理\",{\"1\":{\"332\":1}}],[\"然后你得用treemap\",{\"1\":{\"486\":1,\"3937\":1}}],[\"然后你修改代码\",{\"1\":{\"482\":1,\"3933\":1}}],[\"然后直接清理掉端边界以外的内存\",{\"1\":{\"330\":1}}],[\"然后清理掉未被标记的对象\",{\"1\":{\"325\":1}}],[\"效果等同于hash\",{\"1\":{\"877\":1,\"3985\":1}}],[\"效率问题\",{\"1\":{\"3524\":1,\"5793\":1}}],[\"效率不会大幅度降低\",{\"1\":{\"1383\":1,\"1551\":1,\"1719\":1,\"1887\":1,\"4810\":1}}],[\"效率要大大高于做除法\",{\"1\":{\"1011\":1}}],[\"效率要比代替取模运算\",{\"1\":{\"969\":1}}],[\"效率低\",{\"1\":{\"885\":1}}],[\"效率高\",{\"1\":{\"884\":1}}],[\"效率较低\",{\"1\":{\"2604\":1,\"2605\":1,\"2615\":1,\"4982\":1,\"4983\":1,\"4993\":1}}],[\"效率较⾼缺点\",{\"1\":{\"821\":1,\"4030\":1}}],[\"效率较高\",{\"1\":{\"658\":1,\"3999\":1}}],[\"效率比较低\",{\"1\":{\"719\":1}}],[\"效率比较高\",{\"1\":{\"686\":1}}],[\"效率都比较低\",{\"1\":{\"717\":1}}],[\"效率都为o\",{\"1\":{\"682\":1}}],[\"效率为o\",{\"1\":{\"716\":1,\"717\":1,\"719\":1}}],[\"效率是o\",{\"1\":{\"709\":1}}],[\"冲突的元素\",{\"0\":{\"870\":1,\"3978\":1}}],[\"原理\",{\"0\":{\"4532\":1}}],[\"原理和java\",{\"1\":{\"1019\":1}}],[\"原语\",{\"1\":{\"3127\":1,\"4409\":1}}],[\"原语由若干指令组成\",{\"1\":{\"3106\":1,\"4388\":1}}],[\"原语属于操作系统用语\",{\"1\":{\"3106\":1,\"4388\":1}}],[\"原生的\",{\"1\":{\"2804\":1,\"5182\":1}}],[\"原子指令即可\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"原子指令\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"原子广播协议\",{\"1\":{\"2108\":1,\"4713\":1}}],[\"原子广播\",{\"1\":{\"2102\":1,\"4707\":1}}],[\"原子性是通过\",{\"1\":{\"2812\":1,\"5190\":1}}],[\"原子性\",{\"1\":{\"1080\":1,\"2806\":1,\"4113\":1,\"5184\":1}}],[\"原因在于\",{\"1\":{\"2588\":1,\"4966\":1}}],[\"原因如下\",{\"1\":{\"1503\":1,\"1671\":1,\"1839\":1,\"2007\":1,\"4930\":1}}],[\"原因\",{\"0\":{\"1297\":1,\"5489\":1,\"5531\":1},\"1\":{\"2346\":1,\"2407\":1}}],[\"原文链接\",{\"1\":{\"868\":1,\"897\":1,\"3976\":1}}],[\"原型模式\",{\"1\":{\"816\":1,\"4025\":1}}],[\"六\",{\"0\":{\"866\":1}}],[\"学会了动态代理之后\",{\"1\":{\"846\":1,\"4055\":1}}],[\"学习过程中\",{\"1\":{\"547\":1}}],[\"角度来说\",{\"1\":{\"844\":1,\"4053\":1}}],[\"层组装完数据\",{\"1\":{\"2396\":1}}],[\"层进行分片\",{\"1\":{\"2396\":1}}],[\"层是\",{\"1\":{\"2346\":1}}],[\"层还需要\",{\"0\":{\"2423\":1},\"1\":{\"2308\":1}}],[\"层会分片\",{\"0\":{\"2423\":1},\"1\":{\"2308\":1}}],[\"层面来说\",{\"1\":{\"841\":1,\"4050\":1}}],[\"层⾯\",{\"1\":{\"838\":1,\"4047\":1}}],[\"⽽动态代理是在运⾏时动态⽣成类字节码\",{\"1\":{\"838\":1,\"4047\":1}}],[\"⽽是直接返回这个实例\",{\"1\":{\"821\":1,\"4030\":1}}],[\"⽂件\",{\"1\":{\"838\":1,\"4047\":1}}],[\"⽬标对象和代理对象都要进⾏修改\",{\"1\":{\"837\":1,\"4046\":1}}],[\"⽬的是为了防⽌有多个线程同时调⽤时\",{\"1\":{\"821\":1,\"4030\":1}}],[\"静态代理\",{\"0\":{\"4048\":1}}],[\"静态代理和动态代理的区别\",{\"0\":{\"4045\":1}}],[\"静态代理在编译时就将接口\",{\"1\":{\"841\":1,\"4050\":1}}],[\"静态代理在编译时就将接⼝\",{\"1\":{\"838\":1,\"4047\":1}}],[\"静态代理中\",{\"1\":{\"837\":1,\"840\":1,\"4046\":1,\"4049\":1}}],[\"静态变量放在堆里\",{\"1\":{\"293\":1}}],[\"静态变量\",{\"1\":{\"282\":1}}],[\"违背开闭原则\",{\"1\":{\"825\":1,\"4034\":1}}],[\"锁优化技术\",{\"0\":{\"4361\":1}}],[\"锁消除指的是在某些情况下\",{\"1\":{\"3240\":1,\"4363\":1}}],[\"锁消除\",{\"0\":{\"3238\":1,\"4361\":1}}],[\"锁粗化就是告诉我们任何事情都有个度\",{\"1\":{\"3239\":1,\"4362\":1}}],[\"锁粗化\",{\"0\":{\"3238\":1,\"4361\":1}}],[\"锁定\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"锁定一个范围\",{\"1\":{\"2780\":1,\"2781\":1,\"2791\":1,\"5158\":1,\"5159\":1,\"5169\":1}}],[\"锁升级\",{\"0\":{\"3219\":1,\"4343\":1}}],[\"锁绑定多个条件一个\",{\"1\":{\"3211\":1,\"4335\":1}}],[\"锁对象变成偏向锁\",{\"1\":{\"3224\":1,\"4348\":1}}],[\"锁对象默认为this\",{\"1\":{\"3173\":1}}],[\"锁对象是\",{\"1\":{\"3159\":1}}],[\"锁队列的一个结点\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"锁范围内插入了一条记录\",{\"1\":{\"2848\":1,\"5226\":1}}],[\"锁住的就是一个点\",{\"1\":{\"2800\":1,\"5178\":1}}],[\"锁住的是一条记录\",{\"1\":{\"2783\":1,\"5161\":1}}],[\"锁不兼容\",{\"1\":{\"2784\":1,\"2785\":2,\"5162\":1,\"5163\":2}}],[\"锁不是再一个事务提交后才释放\",{\"1\":{\"2756\":1,\"5134\":1}}],[\"锁兼容\",{\"1\":{\"2784\":1,\"5162\":1}}],[\"锁之分的\",{\"1\":{\"2783\":1,\"5161\":1}}],[\"锁和\",{\"1\":{\"2783\":1,\"5161\":1}}],[\"锁就会被释放\",{\"1\":{\"2775\":1,\"5153\":1}}],[\"锁再对大量数据进行插入的时候\",{\"1\":{\"2759\":1,\"5137\":1}}],[\"锁释放掉\",{\"1\":{\"2757\":1,\"5135\":1}}],[\"锁是特殊的表锁机制\",{\"1\":{\"2756\":1,\"5134\":1}}],[\"锁实现的\",{\"1\":{\"2755\":1,\"5133\":1}}],[\"锁的分类实现\",{\"0\":{\"3241\":1,\"4471\":1}}],[\"锁的实现synchronized\",{\"1\":{\"3207\":1,\"4331\":1}}],[\"锁的过程中\",{\"1\":{\"2758\":1,\"5136\":1}}],[\"锁的操作会形成一个队列\",{\"1\":{\"2738\":1,\"5116\":1}}],[\"锁的作用域就是从锁被获取到其被释放的时间\",{\"1\":{\"799\":1}}],[\"锁机制\",{\"0\":{\"2684\":1,\"5062\":1}}],[\"锁竞争小时\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"锁\",{\"0\":{\"2753\":1,\"5131\":1},\"1\":{\"1360\":1,\"1528\":1,\"1696\":1,\"1864\":1,\"2711\":1,\"2757\":1,\"2762\":1,\"2763\":1,\"4787\":1,\"5089\":1,\"5135\":1,\"5140\":1,\"5141\":1}}],[\"锁池\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"锁指的是\",{\"1\":{\"821\":1,\"4030\":1}}],[\"第三方技术阿里云oss\",{\"1\":{\"3445\":1,\"5714\":1}}],[\"第三方接口审核完后传来一个statuscode200\",{\"1\":{\"3405\":1,\"5685\":1}}],[\"第三次挥手丢失了\",{\"1\":{\"2318\":1}}],[\"第三次握手丢失了\",{\"1\":{\"2311\":1}}],[\"第四次挥手丢失了\",{\"1\":{\"2319\":1}}],[\"第二个密钥是私有密钥\",{\"1\":{\"3647\":1}}],[\"第二个缺点\",{\"1\":{\"1473\":1,\"1641\":1,\"1809\":1,\"1977\":1,\"4900\":1}}],[\"第二\",{\"1\":{\"3497\":1,\"5766\":1}}],[\"第二次挥手丢失了\",{\"1\":{\"2317\":1}}],[\"第二次握手丢失了\",{\"1\":{\"2310\":1}}],[\"第二次会从\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"第二次会从缓存中获取\",{\"1\":{\"1221\":1,\"4254\":1}}],[\"第二则是当\",{\"1\":{\"2123\":1,\"4728\":1}}],[\"第二步\",{\"1\":{\"1424\":1,\"1592\":1,\"1760\":1,\"1928\":1,\"4851\":1}}],[\"第二点\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"第二种方案\",{\"1\":{\"1316\":1,\"5508\":1}}],[\"第二种情况\",{\"1\":{\"1311\":1,\"5503\":1}}],[\"第一\",{\"1\":{\"3495\":1,\"5764\":1}}],[\"第一个是\",{\"1\":{\"3206\":1,\"4330\":1}}],[\"第一个是我们提到的\",{\"1\":{\"2123\":1,\"4728\":1}}],[\"第一个缺点\",{\"1\":{\"1472\":1,\"1640\":1,\"1808\":1,\"1976\":1,\"4899\":1}}],[\"第一个目标是每个分配算法都尽量尝试去完成的\",{\"1\":{\"1289\":1,\"5481\":1}}],[\"第一步肯定需要\",{\"1\":{\"2117\":1,\"4722\":1}}],[\"第一步\",{\"1\":{\"1423\":1,\"1591\":1,\"1759\":1,\"1927\":1,\"4850\":1}}],[\"第一点\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"第一种方案\",{\"1\":{\"1314\":1,\"5506\":1}}],[\"第一种情况\",{\"1\":{\"1309\":1,\"5501\":1}}],[\"第一次挥手丢失了\",{\"1\":{\"2316\":1}}],[\"第一次握手丢失了\",{\"1\":{\"2309\":1}}],[\"第一次调用时随机生成一个整数\",{\"1\":{\"1262\":1,\"5454\":1}}],[\"第一次执行完毕会将数据库中查询的数据写到缓存\",{\"1\":{\"1221\":1,\"1223\":1,\"4254\":1,\"4256\":1}}],[\"第一位一定是个0\",{\"1\":{\"996\":1}}],[\"第\",{\"1\":{\"1140\":1,\"1142\":1,\"1144\":1,\"4173\":1,\"4175\":1,\"4177\":1}}],[\"第⼀重判断\",{\"1\":{\"821\":1,\"4030\":1}}],[\"第⼀重检查是否为\",{\"1\":{\"820\":1,\"4029\":1}}],[\"第⼆重检查是否为\",{\"1\":{\"820\":1,\"4029\":1}}],[\"私有化构造⽅法\",{\"1\":{\"820\":1,\"4029\":1}}],[\"双活的重点\",{\"1\":{\"2200\":1,\"4322\":1}}],[\"双向同步\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"双重检查锁\",{\"1\":{\"819\":1,\"4028\":1}}],[\"双亲委派模型保证了\",{\"1\":{\"428\":1,\"3885\":1}}],[\"双亲委派模型的实现代码非常简单\",{\"1\":{\"420\":1,\"3877\":1}}],[\"双亲委派模型\",{\"0\":{\"3870\":1},\"1\":{\"419\":1,\"3875\":1}}],[\"双亲委派模型要求除了顶层的启动类加载器外\",{\"1\":{\"417\":1,\"3873\":1}}],[\"⼀个单例类在任何情况下都只存在⼀个实例\",{\"1\":{\"818\":1,\"4027\":1}}],[\"模式设计开发了一套高效的事件处理模型\",{\"1\":{\"2910\":1,\"5288\":1}}],[\"模式\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"模式的架构\",{\"1\":{\"2019\":1,\"4624\":1}}],[\"模式是灵活多变的\",{\"1\":{\"1438\":1,\"1606\":1,\"1774\":1,\"1942\":1,\"4865\":1}}],[\"模式主要由\",{\"1\":{\"1435\":1,\"1603\":1,\"1771\":1,\"1939\":1,\"4862\":1}}],[\"模式下的虚拟机使用\",{\"1\":{\"358\":1}}],[\"模式下的虚拟机首选新生代收集器\",{\"1\":{\"352\":1}}],[\"模式下的默认新生代收集器\",{\"1\":{\"349\":1}}],[\"模块的报文根据\",{\"1\":{\"2414\":1}}],[\"模块各司其职\",{\"1\":{\"2019\":1,\"4624\":1}}],[\"模块完全满足开发人员的需求\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"模块\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"模块中\",{\"1\":{\"858\":1,\"4067\":1}}],[\"模板编写为freemarker\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"模板方法模式\",{\"1\":{\"1072\":1,\"4105\":1}}],[\"模板\",{\"1\":{\"816\":1,\"3384\":1,\"4025\":1,\"5664\":1}}],[\"策略\",{\"1\":{\"816\":1,\"2981\":1,\"4025\":1,\"5359\":1}}],[\"状态响应码\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"状态码\",{\"1\":{\"2502\":1,\"5600\":1}}],[\"状态码用于描述\",{\"1\":{\"2501\":1,\"5599\":1}}],[\"状态码有哪些\",{\"0\":{\"2500\":1,\"5598\":1}}],[\"状态的原因有哪些\",{\"0\":{\"2439\":1,\"2440\":1},\"1\":{\"2324\":1,\"2325\":1}}],[\"状态然后进行\",{\"1\":{\"2134\":1,\"4739\":1}}],[\"状态时\",{\"1\":{\"2126\":1,\"4731\":1}}],[\"状态超时\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"状态\",{\"0\":{\"2419\":1,\"2436\":1},\"1\":{\"816\":1,\"2124\":1,\"2128\":1,\"2304\":1,\"2321\":1,\"3073\":1,\"4025\":1,\"4428\":1,\"4729\":1,\"4733\":1}}],[\"观察者模式\",{\"1\":{\"1074\":1,\"4107\":1}}],[\"观察者\",{\"1\":{\"816\":1,\"4025\":1}}],[\"迭代器\",{\"1\":{\"816\":1,\"4025\":1}}],[\"享元\",{\"1\":{\"816\":1,\"4025\":1}}],[\"外键对于维护数据一致性非常有帮助\",{\"1\":{\"2572\":1,\"4950\":1}}],[\"外观\",{\"1\":{\"816\":1,\"4025\":1}}],[\"外部节点\",{\"1\":{\"663\":2,\"4004\":2}}],[\"桥接模式\",{\"1\":{\"816\":1,\"4025\":1}}],[\"建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性\",{\"1\":{\"2625\":1,\"5003\":1}}],[\"建立通信\",{\"1\":{\"2021\":1,\"4626\":1}}],[\"建造者\",{\"1\":{\"816\":1,\"4025\":1}}],[\"建议将\",{\"1\":{\"3484\":1,\"5753\":1}}],[\"建议单张表索引不超过\",{\"1\":{\"2667\":1,\"5045\":1}}],[\"建议使用\",{\"1\":{\"2659\":1,\"5037\":1}}],[\"建议\",{\"1\":{\"412\":1,\"3867\":1}}],[\"抽象⼯⼚模式了解吗\",{\"0\":{\"4039\":1}}],[\"抽象⼯⼚模式通过在\",{\"1\":{\"831\":1,\"4040\":1}}],[\"抽象⼯⼚\",{\"1\":{\"816\":1,\"4025\":1}}],[\"创建新线程的时候会用到\",{\"1\":{\"3296\":1,\"4560\":1}}],[\"创建快照时会阻塞主线程吗\",{\"0\":{\"2967\":1,\"5345\":1}}],[\"创建快照之后\",{\"1\":{\"2964\":1,\"5342\":1}}],[\"创建时其他未提交的活跃事务\",{\"1\":{\"2865\":1,\"5243\":1}}],[\"创建该\",{\"1\":{\"2861\":1,\"2866\":1,\"5239\":1,\"5244\":1}}],[\"创建了组合索引\",{\"1\":{\"2679\":1,\"5057\":1}}],[\"创建远程接口的本地jdk\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"创建并配置\",{\"1\":{\"2025\":1,\"4630\":1}}],[\"创建网络环境时\",{\"1\":{\"2025\":1,\"4630\":1}}],[\"创建后填充属性时依赖\",{\"1\":{\"1118\":1,\"4151\":1}}],[\"创建一个新的事务\",{\"1\":{\"1103\":1,\"4136\":1}}],[\"创建\",{\"1\":{\"1069\":1,\"2861\":1,\"2865\":1,\"4102\":1,\"5239\":1,\"5243\":1}}],[\"创建型\",{\"1\":{\"816\":1,\"4025\":1}}],[\"创建的半成品同样放到缓存中\",{\"1\":{\"1129\":1,\"4162\":1}}],[\"创建的代理对象在调用方法的时候\",{\"1\":{\"854\":1,\"4063\":1}}],[\"创建的实例中\",{\"1\":{\"506\":1,\"3957\":1}}],[\"创建的\",{\"1\":{\"395\":1,\"3850\":1}}],[\"代替\",{\"1\":{\"2604\":1,\"2605\":1,\"2615\":1,\"4982\":1,\"4983\":1,\"4993\":1}}],[\"代表我已经消费过了\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"代表他的序号\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"代表\",{\"1\":{\"996\":2}}],[\"代表了最佳的实践\",{\"1\":{\"814\":1,\"4023\":1}}],[\"代理设计模式\",{\"1\":{\"1070\":1,\"4103\":1}}],[\"代理类这些都变成了一个个实际的\",{\"1\":{\"841\":1,\"4050\":1}}],[\"代理类这些都变成了⼀个个实际的\",{\"1\":{\"838\":1,\"4047\":1}}],[\"代理模式的本质是⼀个中间件\",{\"1\":{\"835\":1,\"4044\":1}}],[\"代理模式\",{\"0\":{\"4042\":1},\"1\":{\"816\":1,\"4025\":1}}],[\"代码如下\",{\"1\":{\"600\":1}}],[\"代码缓存\",{\"1\":{\"188\":1}}],[\"代码转换成字节码\",{\"1\":{\"182\":1,\"3831\":1}}],[\"代码演示\",{\"0\":{\"102\":1,\"3756\":1}}],[\"代码块形式\",{\"1\":{\"3162\":1}}],[\"代码块执行后或异常处理后自动关闭\",{\"1\":{\"454\":1,\"3913\":1}}],[\"代码块\",{\"0\":{\"57\":1,\"3711\":1},\"1\":{\"3163\":1,\"4507\":1}}],[\"代码\",{\"1\":{\"46\":1,\"3700\":1}}],[\"八小时工作制\",{\"1\":{\"3407\":1,\"5687\":1}}],[\"八\",{\"0\":{\"811\":1}}],[\"他妈的开始狗叫\",{\"1\":{\"3392\":1,\"5672\":1}}],[\"他妈的\",{\"1\":{\"3384\":1,\"5664\":1}}],[\"他问还有呢\",{\"1\":{\"3384\":1,\"5664\":1}}],[\"他就非得问springboot\",{\"1\":{\"3375\":1,\"5655\":1}}],[\"他就是取模\",{\"1\":{\"969\":1}}],[\"他保存这线程的引用threadid\",{\"1\":{\"3073\":1,\"4428\":1}}],[\"他说你了解的很少\",{\"1\":{\"3380\":1,\"5660\":1}}],[\"他说还是不够快\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"他说这个方案可以\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"他发送给了\",{\"1\":{\"2136\":1,\"4741\":1}}],[\"他们可以使用\",{\"1\":{\"3186\":1,\"4531\":1}}],[\"他们也会比较自己的投票和收到的投票\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"他们底层的实现都是一样的\",{\"1\":{\"769\":1}}],[\"他要求系统有大量的服务器集群\",{\"1\":{\"2050\":1,\"4655\":1}}],[\"他的二进制的第一位一定是0\",{\"1\":{\"996\":1}}],[\"他最终得到的index结果值为11\",{\"1\":{\"989\":1}}],[\"他可以将所有的list的子类转成线程安全的类\",{\"1\":{\"808\":1}}],[\"凡事都有但是\",{\"1\":{\"804\":1}}],[\"扩容\",{\"0\":{\"909\":1}}],[\"扩容时可能会出现循环链表的情况\",{\"1\":{\"869\":1,\"3977\":1}}],[\"扩容之后\",{\"1\":{\"869\":1,\"3977\":1}}],[\"扩容的时候使用的arrays\",{\"1\":{\"763\":1}}],[\"扩展类加载器\",{\"1\":{\"403\":1,\"3858\":1}}],[\"扩展\",{\"0\":{\"36\":1,\"38\":1,\"3690\":1,\"3692\":1},\"1\":{\"40\":1,\"3694\":1}}],[\"五个面试官\",{\"0\":{\"3410\":1,\"5690\":1}}],[\"五\",{\"0\":{\"735\":1,\"3640\":1}}],[\"构成一个高效可靠的原语集\",{\"1\":{\"2095\":1,\"4700\":1}}],[\"构建项目工程\",{\"1\":{\"3450\":1,\"5719\":1}}],[\"构建一个微服务比较复杂\",{\"1\":{\"2052\":1,\"4657\":1}}],[\"构建杰出的软件\",{\"1\":{\"2016\":1,\"4621\":1}}],[\"构建堆heapify的效率为o\",{\"1\":{\"733\":1}}],[\"构造类的实例化对象\",{\"0\":{\"3954\":1}}],[\"构造函数的方式\",{\"1\":{\"3340\":1,\"4597\":1}}],[\"构造函数来创建\",{\"0\":{\"3285\":1}}],[\"构造映射信息\",{\"1\":{\"2485\":1,\"5583\":1}}],[\"构造的查询分组将在该局域网内广播\",{\"1\":{\"2482\":1,\"5580\":1}}],[\"构造⽅法必须是私有的\",{\"1\":{\"818\":1,\"4027\":1}}],[\"构造实例会调用默认无参构造器\",{\"1\":{\"506\":1,\"3957\":1}}],[\"构造器调用newinstance\",{\"1\":{\"507\":1,\"3958\":1}}],[\"构造器\",{\"1\":{\"489\":1,\"494\":1,\"3940\":1,\"3945\":1}}],[\"详细说一下这个方案\",{\"1\":{\"1480\":1,\"1648\":1,\"1816\":1,\"1984\":1,\"4907\":1}}],[\"详见\",{\"1\":{\"727\":1}}],[\"详情\",{\"0\":{\"161\":1,\"169\":1,\"3810\":1,\"3818\":1}}],[\"详情容器\",{\"1\":{\"55\":1,\"3709\":1}}],[\"尤其是当你已知map中存放的元素个数时\",{\"1\":{\"934\":1}}],[\"尤其是面对大规模数据的时候\",{\"1\":{\"605\":1}}],[\"尤其经常从两端进行操作\",{\"1\":{\"721\":1}}],[\"按先入先出的顺序执行队列中的任务\",{\"1\":{\"3333\":1,\"4590\":1}}],[\"按隔离水平高低排序如下\",{\"1\":{\"2836\":1,\"5214\":1}}],[\"按序到达\",{\"1\":{\"2383\":1}}],[\"按业务划分为一个独立运行的程序\",{\"1\":{\"2037\":1,\"4642\":1}}],[\"按键有序\",{\"1\":{\"1036\":1}}],[\"按需分配空间\",{\"1\":{\"715\":1}}],[\"按照应用维度划分\",{\"1\":{\"2609\":1,\"4987\":1}}],[\"按照底层存储方式角度划分\",{\"1\":{\"2606\":1,\"4984\":1}}],[\"按照数据结构维度划分\",{\"1\":{\"2601\":1,\"4979\":1}}],[\"按照注解的规则\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"按照存储的消息大小保留\",{\"1\":{\"1247\":1,\"5439\":1}}],[\"按照过期时间保留\",{\"1\":{\"1246\":1,\"5438\":1}}],[\"按照给定的事务规则来执行提交或者回滚操作\",{\"1\":{\"1088\":1,\"4121\":1}}],[\"按照索引位置访问效率比较低\",{\"1\":{\"716\":1}}],[\"按照索引位置进行访问效率很高\",{\"1\":{\"709\":1}}],[\"按照\",{\"1\":{\"588\":1}}],[\"两点建议\",{\"1\":{\"3483\":1,\"5752\":1}}],[\"两点原因\",{\"1\":{\"3398\":1,\"5678\":1}}],[\"两台主机所在的子网由一台路由器联通\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"两次执行相同\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"两者各有千秋\",{\"1\":{\"2996\":1,\"5374\":1}}],[\"两者的实现方式不太一样\",{\"1\":{\"2597\":1,\"4975\":1}}],[\"两者的add方法在扩容方面的差别也就是arraylist和vector的差别\",{\"1\":{\"781\":1}}],[\"两者的扩充数组容量方式不一样\",{\"1\":{\"781\":1}}],[\"两者中的值都不能重复\",{\"1\":{\"698\":1}}],[\"两个子类\",{\"1\":{\"3215\":1,\"4339\":1}}],[\"两个操作能保证是原子性吗\",{\"1\":{\"3105\":1,\"4387\":1}}],[\"两个机房都能写入\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"两个机房\",{\"0\":{\"2191\":1,\"4313\":1}}],[\"两个变量\",{\"1\":{\"1335\":1}}],[\"两个不同的键值\",{\"1\":{\"985\":1}}],[\"两个数的乘积都是整数\",{\"1\":{\"940\":1}}],[\"两个\",{\"1\":{\"382\":1}}],[\"两个对象出现循环引用的情况下\",{\"1\":{\"299\":1}}],[\"两个参数配置为相同的值\",{\"1\":{\"247\":1}}],[\"元\",{\"1\":{\"2807\":10,\"5185\":10}}],[\"元和对\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"元和\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"元数据锁\",{\"0\":{\"2722\":1,\"5100\":1},\"1\":{\"2709\":1,\"5087\":1}}],[\"元素的顺序发生了变化\",{\"1\":{\"869\":1,\"3977\":1}}],[\"元素在插入treeset时compareto\",{\"1\":{\"701\":1}}],[\"元素不可重复\",{\"1\":{\"693\":1}}],[\"元素无放入顺序\",{\"1\":{\"693\":1}}],[\"元素可重复\",{\"1\":{\"691\":1}}],[\"元素有放入顺序\",{\"1\":{\"691\":1}}],[\"元空间\",{\"0\":{\"239\":1},\"1\":{\"227\":1,\"282\":1}}],[\"添加元素满了之后会自动扩容原来容量的\",{\"1\":{\"3311\":1,\"4576\":1}}],[\"添加元素的效率还可以\",{\"1\":{\"711\":1}}],[\"添加锁和释放锁的大部分操作实际上都是在\",{\"1\":{\"3215\":1,\"4339\":1}}],[\"添加唯一id\",{\"1\":{\"1302\":1,\"5494\":1}}],[\"添加对应的物理分页语句和物理分页参数\",{\"1\":{\"1215\":1,\"4248\":1}}],[\"添加n个元素的效率为o\",{\"1\":{\"711\":1,\"724\":1}}],[\"添加\",{\"1\":{\"686\":1,\"721\":1,\"1139\":1,\"4172\":1}}],[\"判断是否有权限\",{\"1\":{\"3482\":1,\"3493\":1,\"5751\":1,\"5762\":1}}],[\"判断自动装配开关是否打开\",{\"1\":{\"1140\":1,\"4173\":1}}],[\"判断元素是否存在\",{\"1\":{\"682\":1,\"686\":1}}],[\"判断一下\",{\"1\":{\"557\":1}}],[\"四大隔离级别\",{\"0\":{\"2830\":1,\"5208\":1}}],[\"四大组件分别是\",{\"1\":{\"1194\":1,\"4227\":1}}],[\"四层模型\",{\"0\":{\"2463\":1,\"2555\":1,\"5561\":1}}],[\"四元组包括如下\",{\"1\":{\"2361\":1}}],[\"四元组可以唯一的确定一个连接\",{\"1\":{\"2361\":1}}],[\"四次挥手过程是怎样的\",{\"0\":{\"2429\":1},\"1\":{\"2314\":1}}],[\"四次\",{\"0\":{\"2420\":1},\"1\":{\"2305\":1}}],[\"四\",{\"0\":{\"902\":1,\"1043\":1,\"3590\":1,\"4076\":1},\"1\":{\"678\":1}}],[\"红色节点的父节点都是黑色\",{\"1\":{\"665\":1,\"4006\":1}}],[\"红色节点的子节点都是黑色\",{\"1\":{\"664\":1,\"4005\":1}}],[\"红黑树这种保存所有待检测的\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"红黑树是个高效的数据结构\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"红黑树是统计效率比较高的大致平衡的排序二叉树\",{\"1\":{\"1035\":1}}],[\"红黑树是一个二叉搜索树\",{\"1\":{\"660\":1,\"4001\":1}}],[\"红黑树是一种平衡二叉查找树\",{\"1\":{\"700\":1}}],[\"红黑树是一种接近平衡的二叉树\",{\"1\":{\"658\":1,\"3999\":1}}],[\"红黑树是一种自平衡的二叉查找树\",{\"1\":{\"656\":1,\"3997\":1}}],[\"红黑树允许局部很少的不完全平衡\",{\"1\":{\"875\":1,\"3983\":1}}],[\"红黑树与avll树\",{\"1\":{\"875\":1,\"3983\":1}}],[\"红黑树本质上是一棵二叉查找树\",{\"1\":{\"871\":1,\"3979\":1}}],[\"红黑树旋转情况少于avl树\",{\"1\":{\"676\":1,\"4018\":1}}],[\"红黑树整体性能略优于avl树\",{\"1\":{\"676\":1,\"4018\":1}}],[\"红黑树和avl树的比较\",{\"1\":{\"673\":1,\"4015\":1}}],[\"红黑树的插入删除比avl树更便于控制操作\",{\"1\":{\"675\":1,\"4017\":1}}],[\"红黑树的优点就是对有序数据的查询操作不会慢到o\",{\"1\":{\"672\":1,\"4014\":1}}],[\"红黑树的查找\",{\"1\":{\"669\":1,\"4011\":1}}],[\"红黑树的效率\",{\"0\":{\"668\":1,\"4010\":1}}],[\"红黑树的特性\",{\"0\":{\"659\":1,\"4000\":1}}],[\"红黑树保证最长路径不超过最短路径的二倍\",{\"1\":{\"660\":1,\"4001\":1}}],[\"红黑树就出现了\",{\"1\":{\"658\":1,\"3999\":1}}],[\"红黑树具有良好的效率\",{\"1\":{\"656\":1,\"3997\":1}}],[\"红黑树\",{\"0\":{\"654\":1,\"3995\":1},\"1\":{\"685\":1}}],[\"黑色\",{\"1\":{\"663\":1,\"4004\":1}}],[\"说⼀说简单⼯⼚模式\",{\"0\":{\"4032\":1}}],[\"说一下\",{\"0\":{\"3826\":1}}],[\"说一下红黑树\",{\"1\":{\"3396\":1,\"5676\":1}}],[\"说我python写得多\",{\"1\":{\"3442\":1}}],[\"说完他是干啥的以及插值表达式\",{\"1\":{\"3384\":1,\"5664\":1}}],[\"说明该元素不在布隆过滤器中\",{\"1\":{\"3030\":1,\"5408\":1}}],[\"说明查询分组已经到达了主机\",{\"1\":{\"2482\":1,\"5580\":1}}],[\"说说意向锁\",{\"1\":{\"2741\":1,\"5119\":1}}],[\"说\",{\"1\":{\"2538\":1,\"5636\":1}}],[\"说到业余爱好的话\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"说到崩溃恢复我们首先要提到\",{\"1\":{\"2122\":1,\"4727\":1}}],[\"说到动态代理\",{\"1\":{\"845\":1,\"4054\":1}}],[\"说白了就是一个线程集合workerset和一个阻塞队列workqueue\",{\"1\":{\"3317\":1}}],[\"说白了就是一个变量在程序运行过程中\",{\"1\":{\"1332\":1}}],[\"说白了就是\",{\"1\":{\"2116\":1,\"4721\":1}}],[\"说出主要的组件\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"说它是接近平衡因为它并没有像avl树的平衡因子的概念\",{\"1\":{\"658\":1,\"3999\":1}}],[\"说得再绝对一些\",{\"1\":{\"561\":1}}],[\"递增或者递减\",{\"1\":{\"658\":1,\"3999\":1}}],[\"删除锁\",{\"1\":{\"3549\":1,\"3551\":1,\"5818\":1,\"5820\":1}}],[\"删除文章功能\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"删除与淘汰策略\",{\"0\":{\"2990\":1,\"5368\":1}}],[\"删除操作\",{\"1\":{\"2744\":1,\"5122\":1}}],[\"删除操作比较多\",{\"1\":{\"721\":1}}],[\"删除等动作的发生\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"删除等操作时\",{\"1\":{\"983\":1}}],[\"删除等操作\",{\"1\":{\"656\":1,\"3997\":1}}],[\"删除的效率比较高\",{\"1\":{\"1038\":1}}],[\"删除的时间复杂度最坏为o\",{\"1\":{\"871\":1,\"3979\":1}}],[\"删除元素的效率很高\",{\"1\":{\"718\":1,\"724\":1}}],[\"删除元素\",{\"1\":{\"682\":1,\"686\":1,\"719\":1}}],[\"删除\",{\"1\":{\"658\":1,\"895\":1,\"3999\":1}}],[\"插队成功\",{\"1\":{\"3271\":1,\"4499\":1}}],[\"插队失败\",{\"1\":{\"3271\":1,\"4499\":1}}],[\"插个题外话\",{\"1\":{\"1384\":1,\"1552\":1,\"1720\":1,\"1888\":1,\"4811\":1}}],[\"插入了一条余额超过\",{\"1\":{\"2828\":1,\"5206\":1}}],[\"插入操作就会发生阻塞\",{\"1\":{\"2798\":1,\"5176\":1}}],[\"插入意向锁如果不在间隙锁区间内则是可以的\",{\"1\":{\"2801\":1,\"5179\":1}}],[\"插入意向锁与间隙锁的另一个非常重要的差别是\",{\"1\":{\"2801\":1,\"5179\":1}}],[\"插入意向锁确实是一种特殊的间隙锁\",{\"1\":{\"2800\":1,\"5178\":1}}],[\"插入意向锁名字虽然有意向锁\",{\"1\":{\"2799\":1,\"5177\":1}}],[\"插入意向锁\",{\"0\":{\"2796\":1,\"5174\":1},\"1\":{\"2800\":1,\"2801\":1,\"5178\":1,\"5179\":1}}],[\"插入或查找的速度肯定比较慢\",{\"1\":{\"2637\":1,\"5015\":1}}],[\"插入的时候优先插入到新的表\",{\"1\":{\"2188\":1,\"4310\":1}}],[\"插入顺序经常用于处理键值对的数据\",{\"1\":{\"1041\":1}}],[\"插入和删除容易\",{\"1\":{\"954\":1}}],[\"插入和删除困难\",{\"1\":{\"954\":1}}],[\"插入和删除元素的效率比较低\",{\"1\":{\"712\":1}}],[\"插入和删除操作时\",{\"1\":{\"672\":1,\"4014\":1}}],[\"插入和删除操作\",{\"1\":{\"669\":1,\"4011\":1}}],[\"插入\",{\"1\":{\"658\":1,\"871\":1,\"3979\":1,\"3999\":1}}],[\"插件来实现\",{\"1\":{\"37\":1,\"3691\":1}}],[\"查找\",{\"1\":{\"1038\":1}}],[\"查找操作时\",{\"1\":{\"670\":1,\"4012\":1}}],[\"查看是否有记录存在独占锁\",{\"1\":{\"2750\":1,\"5128\":1}}],[\"查看头部元素的效率很高\",{\"1\":{\"733\":1}}],[\"查看详情\",{\"1\":{\"56\":1,\"58\":1,\"61\":1,\"65\":1,\"68\":1,\"71\":1,\"74\":1,\"78\":1,\"81\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"95\":1,\"101\":1,\"103\":1,\"106\":1,\"108\":1,\"110\":1,\"112\":1,\"3710\":1,\"3712\":1,\"3715\":1,\"3719\":1,\"3722\":1,\"3725\":1,\"3728\":1,\"3732\":1,\"3735\":1,\"3738\":1,\"3740\":1,\"3742\":1,\"3744\":1,\"3746\":1,\"3749\":1,\"3755\":1,\"3757\":1,\"3760\":1,\"3762\":1,\"3764\":1,\"3766\":1}}],[\"查询条件中使用\",{\"1\":{\"2682\":1,\"5060\":1}}],[\"查询比如\",{\"1\":{\"2681\":1,\"5059\":1}}],[\"查询速度非常快\",{\"1\":{\"2634\":1,\"5012\":1}}],[\"查询转发表\",{\"1\":{\"2494\":1,\"5592\":1}}],[\"查询分组相同的构造\",{\"1\":{\"2484\":1,\"5582\":1}}],[\"查询分组将广播给该局域网内的所有设备\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"查询分组中\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"查询分组\",{\"1\":{\"2480\":1,\"5578\":1}}],[\"查询的时候\",{\"1\":{\"2188\":1,\"4310\":1}}],[\"查询\",{\"0\":{\"2898\":1,\"5276\":1},\"1\":{\"658\":1,\"2490\":1,\"3999\":1,\"5588\":1}}],[\"简述java内存模型\",{\"0\":{\"4445\":1}}],[\"简言之\",{\"1\":{\"3237\":1,\"4360\":1}}],[\"简写\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"简而言之就是\",{\"1\":{\"2156\":1,\"4761\":1}}],[\"简化分布式系统开发\",{\"1\":{\"2058\":1,\"4663\":1}}],[\"简介\",{\"0\":{\"655\":1,\"2144\":1,\"3996\":1,\"4749\":1}}],[\"简单限流可以用到\",{\"1\":{\"2925\":1,\"5303\":1}}],[\"简单动态字符串\",{\"1\":{\"2918\":1,\"5296\":1}}],[\"简单的说就是通信的两方的一种约定\",{\"1\":{\"1370\":1,\"1538\":1,\"1706\":1,\"1874\":1,\"4797\":1}}],[\"简单的取模哈希的结果会更加均匀\",{\"1\":{\"1006\":1,\"1010\":1}}],[\"简单的做法是先求取出键值的hashcode\",{\"1\":{\"983\":1}}],[\"简单点说\",{\"1\":{\"988\":1}}],[\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象\",{\"1\":{\"831\":1,\"4040\":1}}],[\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例\",{\"1\":{\"824\":1,\"4033\":1}}],[\"简单说就是可以一步到位\",{\"1\":{\"709\":1}}],[\"简单翻译\",{\"1\":{\"535\":1}}],[\"简单总结一下双亲委派模型的执行流程\",{\"1\":{\"423\":1,\"3880\":1}}],[\"简单来说\",{\"1\":{\"396\":1,\"540\":1,\"1053\":1,\"3851\":1,\"4086\":1}}],[\"yes\",{\"1\":{\"2973\":1,\"5351\":1}}],[\"ydreferer=ahr0chm6ly9ibg9nlmnzzg4ubmv0l3uwmta2mjc4ndavyxj0awnszs9kzxrhawxzlzc2ndm1mzg1p3nwbt0xmdaxljixmdeumzawms42njuwljemdxrtx21lzgl1bt1kaxn0cmlidxrllnbjx3jlbgv2yw50lm5vbmutdgfzay1ibg9nltiln0vkzwzhdwx0jtdfq1rsteltvcu3rvjhdgutms03njqzntm4ns1ibg9nltexnzqxota1oc4ymzulnuv2mjglnuvwy19yzwxldmfudf90mf9kb3dubg9hzczkzxb0af8xlxv0bv9zb3vyy2u9zglzdhjpynv0zs5wy19yzwxldmfudc5ub25llxrhc2stymxvzy0yjtdfzgvmyxvsdcu3runuukxju1qln0vsyxrlltetnzy0mzuzodutymxvzy0xmtc0mtkwntgumjm1jtvfdji4jtvfcgnfcmvszxzhbnrfddbfzg93bmxvywqmdxrtx3jlbgv2yw50x2luzgv4pti\",{\"1\":{\"1304\":1,\"5496\":1}}],[\"yml\",{\"1\":{\"1140\":1,\"4173\":1}}],[\"yang13563758128\",{\"1\":{\"653\":1,\"897\":1,\"3888\":1}}],[\"youngxy\",{\"1\":{\"523\":1,\"525\":1,\"527\":1,\"609\":1,\"678\":1,\"727\":1}}],[\"young\",{\"0\":{\"230\":1},\"1\":{\"3286\":1,\"4550\":1}}],[\"＋1\",{\"1\":{\"647\":1}}],[\"度为2的结点数为n2\",{\"1\":{\"646\":1}}],[\"度数\",{\"1\":{\"630\":1}}],[\"深度为k的二叉树至多有2k\",{\"1\":{\"645\":1}}],[\"深入理解\",{\"1\":{\"277\":1}}],[\"性质5\",{\"1\":{\"648\":1}}],[\"性质4\",{\"1\":{\"647\":1}}],[\"性质3\",{\"1\":{\"646\":1}}],[\"性质2\",{\"1\":{\"645\":1}}],[\"性质1\",{\"1\":{\"644\":1}}],[\"性能不好\",{\"1\":{\"5534\":1}}],[\"性能测试\",{\"0\":{\"3559\":1}}],[\"性能调优实战\",{\"1\":{\"3298\":1,\"4562\":1}}],[\"性能下降明显\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"性能极高\",{\"1\":{\"3226\":1,\"4350\":1}}],[\"性能新版本\",{\"1\":{\"3208\":1,\"4332\":1}}],[\"性能非常高\",{\"1\":{\"2911\":1,\"5289\":1}}],[\"性能也越好\",{\"1\":{\"2885\":1,\"5263\":1}}],[\"性能效率就越低\",{\"1\":{\"2831\":1,\"5209\":1}}],[\"性能更牛皮了\",{\"1\":{\"2566\":1,\"4944\":1}}],[\"性能是不错的\",{\"1\":{\"2097\":1,\"4702\":1}}],[\"性能瓶颈不在\",{\"1\":{\"1475\":1,\"1643\":1,\"1811\":1,\"1979\":1,\"4902\":1}}],[\"性能与数组长度成正比\",{\"1\":{\"710\":1}}],[\"性能\",{\"1\":{\"224\":1,\"2964\":1,\"5342\":1}}],[\"右子树\",{\"1\":{\"641\":1}}],[\"根本没有经过缓存这一层\",{\"1\":{\"3015\":1,\"5393\":1}}],[\"根本没收到所以会丢弃\",{\"1\":{\"2136\":1,\"4741\":1}}],[\"根本不存在于缓存中\",{\"1\":{\"3015\":1,\"5393\":1}}],[\"根域名服务器是最高层次的\",{\"1\":{\"2537\":1,\"5635\":1}}],[\"根域的\",{\"1\":{\"2532\":1,\"5630\":1}}],[\"根域是在最顶层\",{\"1\":{\"2527\":1,\"5625\":1}}],[\"根\",{\"1\":{\"2529\":1,\"2538\":1,\"5627\":1,\"5636\":1}}],[\"根是黑色\",{\"1\":{\"662\":1,\"4003\":1}}],[\"根所在的层为0\",{\"1\":{\"636\":1}}],[\"根据得到的哈希值\",{\"1\":{\"3027\":1,\"5405\":1}}],[\"根据加锁的范围\",{\"1\":{\"2685\":1,\"5063\":1}}],[\"根据主键再回表查数据\",{\"1\":{\"2641\":1,\"5019\":1}}],[\"根据目的\",{\"1\":{\"2494\":1,\"5592\":1}}],[\"根据目的主机\",{\"1\":{\"2491\":1,\"5589\":1}}],[\"根据w3techs的数据\",{\"1\":{\"2213\":1,\"2228\":1,\"2243\":1,\"2256\":1,\"2269\":1,\"2284\":1,\"5520\":1,\"5543\":1}}],[\"根据类别分库分表\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"根据类的二进制名称来查找类\",{\"1\":{\"409\":1,\"3864\":1}}],[\"根据参数再应用到请求上\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"根据参数类型获取对应的构造器\",{\"1\":{\"517\":1,\"3968\":1}}],[\"根据参数类型获取类中某个构造器\",{\"1\":{\"517\":1,\"3968\":1}}],[\"根据返回的\",{\"1\":{\"1065\":1,\"4098\":1}}],[\"根据你的配置\",{\"1\":{\"1059\":1,\"4092\":1}}],[\"根据获得的\",{\"1\":{\"1058\":1,\"4091\":1}}],[\"根据键保存\",{\"1\":{\"1038\":1}}],[\"根据键保存和获取值的效率都很高\",{\"1\":{\"905\":1}}],[\"根据元素特征计算元素数组下标的方法就是哈希算法\",{\"1\":{\"956\":1}}],[\"根据元素内容查找和删除的效率比较低\",{\"1\":{\"725\":1}}],[\"根据hash值就可以直接快速定位\",{\"1\":{\"905\":1}}],[\"根据传⼊⼀个唯⼀的标识来获得\",{\"1\":{\"826\":1,\"4035\":1}}],[\"根据传入的条件来决定用hashmap还是linkedhashmap\",{\"1\":{\"484\":1,\"3935\":1}}],[\"根据值查找和删除元素的效率比较低\",{\"1\":{\"734\":1}}],[\"根据实现方式不同主要分为两大类\",{\"1\":{\"696\":1}}],[\"根据是否认为子树的排列顺序有意义\",{\"1\":{\"621\":1}}],[\"根据\",{\"1\":{\"539\":1,\"1215\":1,\"1263\":1,\"4248\":1,\"5455\":1}}],[\"根据名字和参数类型获取对应方法\",{\"1\":{\"515\":2,\"3966\":2}}],[\"根据姓名获取类中的某个变量\",{\"1\":{\"513\":1,\"3964\":1}}],[\"根据变量名获取类中的一个变量\",{\"1\":{\"513\":1,\"3964\":1}}],[\"根据用户所期望的\",{\"1\":{\"380\":1}}],[\"且有剩余资源\",{\"1\":{\"3084\":1,\"4440\":1}}],[\"且子查询中为简单\",{\"1\":{\"2903\":1,\"5281\":1}}],[\"且\",{\"1\":{\"2682\":1,\"5060\":1}}],[\"且修改数据的操作效率也会提升\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"且修改索引时\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"且都有应用在实际的项目中\",{\"1\":{\"1447\":1,\"1615\":1,\"1783\":1,\"1951\":1,\"4874\":1}}],[\"且麻烦\",{\"1\":{\"840\":1,\"4049\":1}}],[\"且产品多的话会使⼯⼚类⽐较复杂\",{\"1\":{\"825\":1,\"4034\":1}}],[\"且路径唯一\",{\"1\":{\"632\":1}}],[\"且内部属性已经被赋值\",{\"1\":{\"509\":1,\"3960\":1}}],[\"显然\",{\"1\":{\"632\":1}}],[\"显然树叶的度数为0\",{\"1\":{\"630\":1}}],[\"显卡\",{\"1\":{\"553\":2}}],[\"关闭方式\",{\"1\":{\"3322\":1,\"3324\":1}}],[\"关闭线程池\",{\"1\":{\"3320\":1}}],[\"关闭状态\",{\"1\":{\"2076\":1,\"4681\":1}}],[\"关键看你的业务场景\",{\"1\":{\"3536\":1,\"5805\":1}}],[\"关键字类似\",{\"1\":{\"3213\":1,\"4337\":1}}],[\"关键字创建对象不是原⼦操作\",{\"1\":{\"820\":1,\"4029\":1}}],[\"关键是备份期间\",{\"1\":{\"2699\":1,\"5077\":1}}],[\"关键词和各种\",{\"1\":{\"1353\":1,\"1521\":1,\"1689\":1,\"1857\":1,\"4780\":1}}],[\"关系\",{\"1\":{\"629\":1}}],[\"关于饱和策略下面单独介绍一下\",{\"1\":{\"3297\":1,\"4561\":1}}],[\"关于偏向锁的撤销\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"关于此将按照时间顺序\",{\"1\":{\"2478\":1,\"5576\":1}}],[\"关于http3\",{\"0\":{\"5527\":1}}],[\"关于http2\",{\"0\":{\"2238\":1,\"2251\":1,\"5515\":1}}],[\"关于http\",{\"1\":{\"2206\":1,\"2221\":1,\"2236\":1,\"2249\":1,\"2262\":1,\"2277\":1,\"5512\":1,\"5537\":1}}],[\"关于hashmap在java\",{\"1\":{\"1017\":1}}],[\"关于循环依赖的源码之前\",{\"1\":{\"1109\":1,\"4142\":1}}],[\"关于java\",{\"1\":{\"1019\":1}}],[\"关于内部的第⼆重空判断的作⽤\",{\"1\":{\"821\":1,\"4030\":1}}],[\"关于在面试中\",{\"1\":{\"606\":1}}],[\"关于继承关系和组合关系的区别\",{\"1\":{\"547\":1}}],[\"关于这些扩展\",{\"1\":{\"40\":1,\"3694\":1}}],[\"祖先和子孙\",{\"1\":{\"629\":1}}],[\"没在其他其他接口里出现过\",{\"1\":{\"3567\":1}}],[\"没必要一次执行尽可能多的读写操作\",{\"1\":{\"1392\":1,\"1560\":1,\"1728\":1,\"1896\":1,\"4819\":1}}],[\"没看懂的话其实也没关系\",{\"1\":{\"977\":1}}],[\"没有给http\",{\"1\":{\"5535\":1}}],[\"没有保研吗\",{\"1\":{\"3420\":1,\"5700\":1}}],[\"没有容量\",{\"1\":{\"3310\":1,\"4575\":1}}],[\"没有抢到锁的线程将自旋\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"没有获得锁的线程只能等待\",{\"1\":{\"3158\":1}}],[\"没有被删除\",{\"1\":{\"2994\":1,\"5372\":1}}],[\"没有开启\",{\"1\":{\"2972\":1,\"5350\":1}}],[\"没有使用其作为索引的数据结构呢\",{\"1\":{\"2589\":1,\"4967\":1}}],[\"没有边界\",{\"1\":{\"2392\":1}}],[\"没有\",{\"1\":{\"2333\":1,\"2334\":1,\"2507\":1,\"5605\":1}}],[\"没有定论\",{\"1\":{\"2159\":1,\"4764\":1}}],[\"没有数据可读写时\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"没有指明partition\",{\"1\":{\"1261\":1,\"5453\":1}}],[\"没有同步方法\",{\"1\":{\"758\":1}}],[\"没有在多个线程之间共享同一个集合\",{\"1\":{\"742\":1}}],[\"没有索引位置的概念\",{\"1\":{\"726\":1}}],[\"没有顺序\",{\"1\":{\"682\":1}}],[\"没有重复元素\",{\"1\":{\"682\":1,\"686\":1}}],[\"没有用到红黑树特有的特性\",{\"1\":{\"670\":1,\"4012\":1}}],[\"没有子结点的结点称为树叶\",{\"1\":{\"628\":1}}],[\"没错\",{\"1\":{\"588\":1,\"963\":1}}],[\"兄弟结点\",{\"1\":{\"627\":1}}],[\"边缘触发的效率比水平触发的效率要高\",{\"1\":{\"1394\":1,\"1562\":1,\"1730\":1,\"1898\":1,\"4821\":1}}],[\"边缘触发模式一般和非阻塞\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"边有方向\",{\"1\":{\"626\":1}}],[\"边\",{\"1\":{\"626\":1}}],[\"父进程的双向通信\",{\"1\":{\"1491\":1,\"1659\":1,\"1827\":1,\"1995\":1,\"4918\":1}}],[\"父结点相同的结点互为兄弟结点\",{\"1\":{\"627\":1}}],[\"父结点和子结点\",{\"1\":{\"623\":1}}],[\"父类大多是一个很抽象的概念\",{\"1\":{\"559\":1}}],[\"除非\",{\"1\":{\"3558\":1,\"5827\":1}}],[\"除非数据是被本身事务自己所修改\",{\"1\":{\"1094\":1,\"4127\":1}}],[\"除非数组已排序\",{\"1\":{\"710\":1}}],[\"除此之外\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"除树根外\",{\"1\":{\"621\":1}}],[\"除了性能之外\",{\"1\":{\"996\":1}}],[\"除了性能原因外\",{\"1\":{\"352\":1}}],[\"除了以上这些重要成员变量外\",{\"1\":{\"920\":1}}],[\"除了第一个\",{\"1\":{\"732\":1}}],[\"除了runtimeexception及其子类以外\",{\"1\":{\"443\":1,\"3902\":1}}],[\"除了这三种类加载器之外\",{\"1\":{\"405\":1,\"3860\":1}}],[\"除了\",{\"1\":{\"344\":1}}],[\"结构化面试+技术面\",{\"0\":{\"3410\":1,\"5690\":1}}],[\"结构里用\",{\"1\":{\"2921\":1,\"5299\":1}}],[\"结构层次鲜明\",{\"1\":{\"1325\":1,\"4282\":1}}],[\"结构型\",{\"1\":{\"816\":1,\"4025\":1}}],[\"结束后该\",{\"1\":{\"1221\":1,\"4254\":1}}],[\"结果发现面试官说错了\",{\"1\":{\"3641\":1}}],[\"结果面试官问我md5\",{\"1\":{\"3641\":1}}],[\"结果自己挂掉了\",{\"1\":{\"3468\":1,\"5737\":1}}],[\"结果如下\",{\"1\":{\"3115\":1,\"4397\":1}}],[\"结果集执行的内存分页\",{\"1\":{\"1212\":1,\"4245\":1}}],[\"结果都为0\",{\"1\":{\"989\":1}}],[\"结尾的对数据库操作的类\",{\"1\":{\"1072\":1,\"4105\":1}}],[\"结合\",{\"1\":{\"1066\":1,\"4099\":1}}],[\"结合上面的源码\",{\"1\":{\"423\":1,\"3880\":1}}],[\"结点都有层数\",{\"1\":{\"636\":1}}],[\"结点的层数\",{\"1\":{\"634\":1}}],[\"结点个数为0\",{\"1\":{\"616\":1}}],[\"要启用http2必须使用openssl\",{\"1\":{\"5533\":1}}],[\"要考虑到数据量的问题\",{\"1\":{\"3526\":1,\"5795\":1}}],[\"要修改的新值b=2\",{\"1\":{\"3098\":1,\"4375\":1}}],[\"要加上\",{\"1\":{\"2775\":1,\"5153\":1}}],[\"要释放表锁\",{\"1\":{\"2718\":1,\"5096\":1}}],[\"要使用全局锁\",{\"1\":{\"2688\":1,\"5066\":1}}],[\"要\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"要解决幻读现象不建议将隔离级别升级到\",{\"1\":{\"2843\":1,\"5221\":1}}],[\"要解决不可重复读现象\",{\"1\":{\"2843\":1,\"5221\":1}}],[\"要解决脏读现象\",{\"1\":{\"2843\":1,\"5221\":1}}],[\"要解决这问题\",{\"1\":{\"2769\":1,\"5147\":1}}],[\"要解决\",{\"1\":{\"1495\":1,\"1663\":1,\"1831\":1,\"1999\":1,\"4922\":1}}],[\"要避免多线程由于竞争共享资源而导致数据错乱的问题\",{\"1\":{\"1489\":1,\"1657\":1,\"1825\":1,\"1993\":1,\"4916\":1}}],[\"要把结果传递给主线程的\",{\"1\":{\"1488\":1,\"1656\":1,\"1824\":1,\"1992\":1,\"4915\":1}}],[\"要看使用的编程语言以及平台有关\",{\"1\":{\"1451\":1,\"1619\":1,\"1787\":1,\"1955\":1,\"4878\":1}}],[\"要么全部不完成\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"要么全部完成\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"要么保留到消息达到一定大小的字节数\",{\"1\":{\"1248\":1,\"5440\":1}}],[\"要么保留一定时间\",{\"1\":{\"1248\":1,\"5440\":1}}],[\"要么完全不起作用\",{\"1\":{\"1080\":1,\"4113\":1}}],[\"要么都不执行\",{\"1\":{\"1078\":1,\"4111\":1}}],[\"要么都执行\",{\"1\":{\"1078\":1,\"4111\":1}}],[\"要么用throws子句声明抛出它\",{\"1\":{\"443\":1,\"3902\":1}}],[\"要么用try\",{\"1\":{\"443\":1,\"3902\":1}}],[\"要求排序\",{\"1\":{\"1039\":1}}],[\"要求子树都非空\",{\"1\":{\"615\":1}}],[\"要实现动态代理的话\",{\"1\":{\"852\":1,\"4061\":1}}],[\"要先定位\",{\"1\":{\"719\":1}}],[\"树和\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"树是\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"树是一种层次性结构\",{\"1\":{\"618\":1}}],[\"树也称\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"树型bin用到的概率非常小\",{\"1\":{\"879\":1,\"3987\":1}}],[\"树根到结点的路径长度是该结点的层数\",{\"1\":{\"635\":1}}],[\"树中的其余结点称为分支结点\",{\"1\":{\"628\":1}}],[\"树叶\",{\"1\":{\"628\":1}}],[\"树的检索的过程相当于对范围内的每个节点的关键字做二分查找\",{\"1\":{\"2596\":1,\"4974\":1}}],[\"树的叶子节点都是独立的\",{\"1\":{\"2595\":1,\"4973\":1}}],[\"树的叶节点\",{\"1\":{\"2582\":1,\"2599\":1,\"4960\":1,\"4977\":1}}],[\"树的所有节点既存放键\",{\"1\":{\"2594\":1,\"4972\":1}}],[\"树的一种变体\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"树的高度或深度是树中结点的最大层数\",{\"1\":{\"638\":1}}],[\"树的基本术语\",{\"0\":{\"622\":1}}],[\"树的定义\",{\"0\":{\"611\":1}}],[\"树\",{\"1\":{\"612\":1,\"2590\":1,\"2591\":1,\"2593\":1,\"4968\":1,\"4969\":1,\"4971\":1}}],[\"面对消息挤压\",{\"1\":{\"3535\":1,\"5804\":1}}],[\"面试官竟然问md5是对称加密还是非对称加密\",{\"1\":{\"3649\":1}}],[\"面试官\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"面试官说看你简历都是java相关\",{\"1\":{\"3415\":1,\"5695\":1}}],[\"面试官说这有java和python\",{\"1\":{\"3408\":1,\"5688\":1}}],[\"面试官说了早上9\",{\"1\":{\"3407\":1,\"5687\":1}}],[\"面试官说不是\",{\"1\":{\"3400\":1,\"5680\":1}}],[\"面试官又给我打了过来\",{\"1\":{\"3404\":1,\"5684\":1}}],[\"面试官的态度极其恶心\",{\"1\":{\"3373\":1,\"5653\":1}}],[\"面试官狗叫\",{\"0\":{\"3372\":1,\"5652\":1}}],[\"面试官会怎么看\",{\"1\":{\"606\":1}}],[\"面试\",{\"0\":{\"3362\":1,\"5642\":1,\"5643\":1,\"5854\":1}}],[\"面试时可用下列\",{\"1\":{\"1055\":1,\"4088\":1}}],[\"面向无连接\",{\"1\":{\"2401\":1}}],[\"面向连接\",{\"1\":{\"2351\":1}}],[\"面向切面编程\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"面向对象\",{\"1\":{\"561\":1}}],[\"面向我们用户的加载器\",{\"1\":{\"404\":1,\"3859\":1}}],[\"倍以上\",{\"1\":{\"604\":1}}],[\"慢慢往下看\",{\"1\":{\"2624\":1,\"5002\":1}}],[\"慢\",{\"1\":{\"604\":1}}],[\"基数统计\",{\"1\":{\"2914\":1,\"5292\":1}}],[\"基本原理\",{\"0\":{\"3104\":1,\"4386\":1}}],[\"基本数据类型\",{\"0\":{\"2912\":1,\"5290\":1}}],[\"基本一样\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"基本功能\",{\"0\":{\"2094\":1,\"4699\":1}}],[\"基本组件\",{\"0\":{\"1322\":1,\"4279\":1}}],[\"基本的操作都是由hashmap底层实现的\",{\"1\":{\"699\":1}}],[\"基本概念\",{\"0\":{\"176\":1,\"3825\":1}}],[\"基于内存\",{\"1\":{\"2909\":1,\"5287\":1}}],[\"基于字节流的传输层通信协议\",{\"1\":{\"2349\":1}}],[\"基于该协议\",{\"1\":{\"2102\":1,\"4707\":1}}],[\"基于\",{\"1\":{\"2015\":1,\"2569\":1,\"2910\":1,\"4620\":1,\"4947\":1,\"5288\":1}}],[\"基于父结点\",{\"1\":{\"629\":1}}],[\"基于链表的实现\",{\"1\":{\"597\":1}}],[\"做了些什么\",{\"1\":{\"3405\":1,\"5685\":1}}],[\"做了很多事情\",{\"1\":{\"1031\":1}}],[\"做按位与运算\",{\"1\":{\"973\":1}}],[\"做为\",{\"1\":{\"591\":1}}],[\"做成一个\",{\"1\":{\"583\":1}}],[\"做成了一个类\",{\"1\":{\"579\":1}}],[\"少数消息就会再次消费一次\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗\",{\"1\":{\"880\":1,\"3988\":1}}],[\"少打一些官司\",{\"1\":{\"590\":1}}],[\"少用继承\",{\"1\":{\"561\":1}}],[\"破坏了封装性\",{\"1\":{\"587\":1}}],[\"毕竟也存在上下文的切换\",{\"1\":{\"1394\":1,\"1562\":1,\"1730\":1,\"1898\":1,\"4821\":1}}],[\"毕竟\",{\"1\":{\"587\":1,\"2579\":1,\"4957\":1}}],[\"毕竟继承关系看起来更\",{\"1\":{\"561\":1}}],[\"自己在接口里记录\",{\"1\":{\"3562\":1}}],[\"自己造缓存轮子的时候需要格外考虑的东西\",{\"1\":{\"2993\":1,\"5371\":1}}],[\"自媒体端发布文章后\",{\"1\":{\"3507\":1,\"5776\":1}}],[\"自媒体等微服务\",{\"1\":{\"3450\":1,\"5719\":1}}],[\"自我介绍\",{\"0\":{\"3577\":1,\"5828\":1},\"1\":{\"3374\":1,\"3434\":1,\"5654\":1}}],[\"自适应自旋锁\",{\"1\":{\"3256\":1}}],[\"自带的\",{\"1\":{\"3164\":1,\"4508\":1}}],[\"自旋很少成功获取锁\",{\"1\":{\"3256\":1}}],[\"自旋等待刚刚成功获取过锁\",{\"1\":{\"3256\":1}}],[\"自旋锁缺点\",{\"1\":{\"3252\":1,\"4482\":1}}],[\"自旋锁只是将当前线程不停地执行循环体\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"自旋锁是采用让当前线程不停地在循环体内执行\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"自旋锁\",{\"0\":{\"4480\":1},\"1\":{\"3233\":1,\"4356\":1}}],[\"自旋开销问题\",{\"0\":{\"4401\":1},\"1\":{\"3129\":1,\"4411\":1}}],[\"自旋长时间不能成功就会给\",{\"1\":{\"3120\":1,\"4402\":1}}],[\"自增锁还是要等语句结束后才被释放\",{\"1\":{\"2767\":1,\"5145\":1}}],[\"自增锁在申请之后就马上释放\",{\"1\":{\"2766\":1,\"5144\":1}}],[\"自动提交的话会有一个问题\",{\"1\":{\"3466\":1,\"5735\":1}}],[\"自动化部署\",{\"1\":{\"2039\":1,\"4644\":1}}],[\"自动化的插件配置\",{\"1\":{\"1192\":1,\"4225\":1}}],[\"自动化的资源过滤\",{\"1\":{\"1191\":1,\"4224\":1}}],[\"自动配置类其实就是通过\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"自身提交了这个事务并且要发送给所有\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"自身创建的原则下\",{\"1\":{\"1137\":1,\"4170\":1}}],[\"自身依赖于自身\",{\"1\":{\"1112\":1,\"4145\":1}}],[\"自然也能在同一端进行插入和删除\",{\"1\":{\"583\":1}}],[\"自定义同步器在实现时候只需要实现共享资源state的获取和释放即可\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"自定义异常\",{\"1\":{\"1159\":1,\"4192\":1}}],[\"自定义它们\",{\"1\":{\"140\":1,\"3794\":1}}],[\"自定义对齐\",{\"0\":{\"62\":1,\"3716\":1}}],[\"自定义标题\",{\"1\":{\"45\":1,\"48\":1,\"50\":1,\"52\":1,\"54\":1,\"3699\":1,\"3702\":1,\"3704\":1,\"3706\":1,\"3708\":1}}],[\"自定义容器\",{\"0\":{\"43\":1,\"3697\":1}}],[\"完成远程服务的http调用\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"完成后释放锁\",{\"1\":{\"821\":1,\"4030\":1}}],[\"完善\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"完全服从\",{\"1\":{\"1095\":1,\"4128\":1}}],[\"完全不会对其生存时间构成影响\",{\"1\":{\"320\":1}}],[\"完美解决了之前说的\",{\"1\":{\"577\":1}}],[\"解锁时\",{\"1\":{\"3248\":1,\"4478\":1}}],[\"解锁\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"解锁操作\",{\"1\":{\"1360\":1,\"1528\":1,\"1696\":1,\"1864\":1,\"4787\":1}}],[\"解决办法\",{\"1\":{\"3461\":1,\"3467\":1,\"3475\":1,\"5730\":1,\"5736\":1,\"5744\":1}}],[\"解决资源不足的问题\",{\"1\":{\"3339\":1,\"4596\":1}}],[\"解决的方案有两种\",{\"1\":{\"2846\":1,\"5224\":1}}],[\"解决方案\",{\"0\":{\"1299\":1,\"5491\":1},\"1\":{\"1117\":1,\"3121\":1,\"3544\":1,\"4150\":1,\"4403\":1,\"5813\":1}}],[\"解码成java\",{\"1\":{\"2087\":1,\"4692\":1}}],[\"解密的场景\",{\"1\":{\"1166\":1,\"4199\":1}}],[\"解释器\",{\"1\":{\"816\":1,\"4025\":1}}],[\"解耦了\",{\"1\":{\"573\":1}}],[\"解析请求对应的\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"解析\",{\"1\":{\"386\":1,\"2455\":1,\"2494\":1,\"2548\":1,\"3839\":1,\"5553\":1,\"5592\":1}}],[\"弃用\",{\"1\":{\"564\":1,\"565\":1}}],[\"环境变量\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"环境下无法执行\",{\"1\":{\"563\":1}}],[\"环境来说\",{\"1\":{\"348\":1}}],[\"多版本并发控制\",{\"1\":{\"2813\":1,\"5191\":1}}],[\"多列值组成一个索引\",{\"1\":{\"2614\":1,\"4992\":1}}],[\"多路平衡查找树\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"多路复用接口\",{\"1\":{\"1466\":1,\"1481\":1,\"1634\":1,\"1649\":1,\"1802\":1,\"1817\":1,\"1970\":1,\"1985\":1,\"4893\":1,\"4908\":1}}],[\"多路复用技术\",{\"1\":{\"1373\":1,\"1541\":1,\"1709\":1,\"1877\":1,\"4800\":1}}],[\"多路复用\",{\"0\":{\"1372\":1,\"1540\":1,\"1708\":1,\"1876\":1,\"4799\":1},\"1\":{\"2509\":1,\"2910\":1,\"5288\":1,\"5607\":1}}],[\"多请求复用一个\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"多对多的交互通信\",{\"1\":{\"2381\":1}}],[\"多于\",{\"1\":{\"2097\":2,\"4702\":2}}],[\"多个线程不按照申请锁的顺序去获得锁\",{\"1\":{\"3271\":1,\"4499\":1}}],[\"多个线程按照申请锁的顺序去获得锁\",{\"1\":{\"3268\":1,\"4496\":1}}],[\"多个线程竞争偏向锁导致偏向锁升级为轻量级锁\",{\"1\":{\"3233\":1,\"4356\":1}}],[\"多个线程共享的内存\",{\"1\":{\"3135\":1,\"4447\":1}}],[\"多个字段在一个索引上\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"多个消费者\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"多个人给一个主播打赏怎么设计\",{\"0\":{\"2166\":1,\"4288\":1}}],[\"多个节点之前的网络本来是连通的\",{\"1\":{\"2152\":1,\"4757\":1}}],[\"多个模块\",{\"1\":{\"2034\":1,\"4639\":1}}],[\"多个请求复用了一个进程\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"多核\",{\"1\":{\"1472\":1,\"1640\":1,\"1808\":1,\"1976\":1,\"4899\":1}}],[\"多\",{\"0\":{\"1494\":1,\"1662\":1,\"1830\":1,\"1998\":1,\"4921\":1},\"1\":{\"1444\":1,\"1445\":1,\"1446\":1,\"1450\":1,\"1495\":2,\"1496\":1,\"1503\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1618\":1,\"1663\":2,\"1664\":1,\"1671\":1,\"1780\":1,\"1781\":1,\"1782\":1,\"1786\":1,\"1831\":2,\"1832\":1,\"1839\":1,\"1948\":1,\"1949\":1,\"1950\":1,\"1954\":1,\"1999\":2,\"2000\":1,\"2007\":1,\"4871\":1,\"4872\":1,\"4873\":1,\"4877\":1,\"4922\":2,\"4923\":1,\"4930\":1}}],[\"多进程的模式\",{\"1\":{\"1492\":1,\"1660\":1,\"1828\":1,\"1996\":1,\"4919\":1}}],[\"多进程的方案\",{\"1\":{\"1477\":1,\"1490\":1,\"1645\":1,\"1658\":1,\"1813\":1,\"1826\":1,\"1981\":1,\"1994\":1,\"4904\":1,\"4917\":1}}],[\"多进程相比单\",{\"1\":{\"1491\":1,\"1659\":1,\"1827\":1,\"1995\":1,\"4918\":1}}],[\"多进程\",{\"0\":{\"1476\":1,\"1494\":1,\"1644\":1,\"1662\":1,\"1812\":1,\"1830\":1,\"1980\":1,\"1998\":1,\"4903\":1,\"4921\":1},\"1\":{\"1443\":1,\"1445\":1,\"1450\":1,\"1477\":1,\"1495\":1,\"1496\":1,\"1611\":1,\"1613\":1,\"1618\":1,\"1645\":1,\"1663\":1,\"1664\":1,\"1779\":1,\"1781\":1,\"1786\":1,\"1813\":1,\"1831\":1,\"1832\":1,\"1947\":1,\"1949\":1,\"1954\":1,\"1981\":1,\"1999\":1,\"2000\":1,\"4870\":1,\"4872\":1,\"4877\":1,\"4904\":1,\"4922\":1,\"4923\":1}}],[\"多机器并发\",{\"1\":{\"1258\":1,\"5450\":1}}],[\"多partition分布式存储\",{\"1\":{\"1256\":1,\"5448\":1}}],[\"多组循环依赖\",{\"1\":{\"1112\":1,\"4145\":1}}],[\"多研究一下如何处理这些历史遗留问题\",{\"1\":{\"590\":1}}],[\"多用组合\",{\"1\":{\"561\":1}}],[\"多线程与高并发\",{\"0\":{\"4328\":1}}],[\"多线程和高并发\",{\"0\":{\"4327\":1,\"5848\":1}}],[\"多线程并发操作\",{\"1\":{\"3274\":1,\"4502\":1}}],[\"多线程的实现机制\",{\"0\":{\"3055\":1,\"5433\":1}}],[\"多线程的方案要简单的多\",{\"1\":{\"1503\":1,\"1671\":1,\"1839\":1,\"2007\":1,\"4930\":1}}],[\"多线程的方案虽然看起来复杂的\",{\"1\":{\"1503\":1,\"1671\":1,\"1839\":1,\"2007\":1,\"4930\":1}}],[\"多线程的方案\",{\"1\":{\"1490\":1,\"1658\":1,\"1826\":1,\"1994\":1,\"4917\":1}}],[\"多线程的方案优势在于能够充分利用多核\",{\"1\":{\"1487\":1,\"1655\":1,\"1823\":1,\"1991\":1,\"4914\":1}}],[\"多线程实现起来很麻烦\",{\"1\":{\"1491\":1,\"1659\":1,\"1827\":1,\"1995\":1,\"4918\":1}}],[\"多线程\",{\"0\":{\"1476\":1,\"1644\":1,\"1812\":1,\"1980\":1,\"4903\":1},\"1\":{\"1449\":1,\"1477\":1,\"1478\":1,\"1617\":1,\"1645\":1,\"1646\":1,\"1785\":1,\"1813\":1,\"1814\":1,\"1953\":1,\"1981\":1,\"1982\":1,\"3286\":1,\"4550\":1,\"4876\":1,\"4904\":1,\"4905\":1}}],[\"多线程同时分配内存时\",{\"1\":{\"273\":1}}],[\"多线程在一个特定的时间段内只会执行其中某一个线程方法\",{\"1\":{\"195\":1}}],[\"组织的一个索引结构\",{\"1\":{\"2582\":1,\"2599\":1,\"4960\":1,\"4977\":1}}],[\"组件丰富\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"组合在自定义同步组件的实现中\",{\"1\":{\"3080\":1,\"4436\":1}}],[\"组合索引\",{\"1\":{\"2652\":1,\"5030\":1}}],[\"组合\",{\"1\":{\"816\":1,\"4025\":1}}],[\"组合更常见\",{\"1\":{\"561\":1}}],[\"组成关系更常用\",{\"1\":{\"559\":1}}],[\"组成\",{\"1\":{\"254\":1}}],[\"叫做\",{\"1\":{\"560\":1,\"2198\":1,\"4320\":1}}],[\"动物\",{\"1\":{\"559\":1}}],[\"动态增加一张表\",{\"0\":{\"2187\":1,\"4309\":1}}],[\"动态生成的代理类\",{\"1\":{\"853\":1,\"4062\":1}}],[\"动态代理更优秀\",{\"1\":{\"865\":1,\"4074\":1}}],[\"动态代理更加灵活\",{\"1\":{\"837\":1,\"843\":1,\"4046\":1,\"4052\":1}}],[\"动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用\",{\"1\":{\"864\":1,\"4073\":1}}],[\"动态代理是在运行时动态生成类字节码\",{\"1\":{\"844\":1,\"4053\":1}}],[\"动态代理只能代理实现了接口的类或者直接代理接口\",{\"1\":{\"864\":1,\"4073\":1}}],[\"动态代理对比\",{\"0\":{\"863\":1,\"4072\":1}}],[\"动态代理和\",{\"0\":{\"863\":1,\"4072\":1}}],[\"动态代理有一个最致命的问题是其只能代理实现了接口的类\",{\"1\":{\"856\":1,\"4065\":1}}],[\"动态代理等等\",{\"1\":{\"847\":1,\"4056\":1}}],[\"动态代理\",{\"0\":{\"4051\":1},\"1\":{\"847\":1,\"858\":2,\"4056\":1,\"4067\":2}}],[\"动态代理的实现方式有很多种\",{\"1\":{\"847\":1,\"4056\":1}}],[\"动态代理在我们日常开发中使用的相对较少\",{\"1\":{\"846\":1,\"4055\":1}}],[\"动态代理机制来避免\",{\"1\":{\"857\":1,\"4066\":1}}],[\"动态代理机制中\",{\"1\":{\"849\":1,\"859\":1,\"4058\":1,\"4068\":1}}],[\"动态代理机制\",{\"0\":{\"848\":1,\"855\":1,\"4057\":1,\"4064\":1},\"1\":{\"843\":1,\"4052\":1}}],[\"动态扩展需要的内存分配以及数组复制开销可以被平摊\",{\"1\":{\"724\":1}}],[\"动态数组是可以进行扩容操作的\",{\"1\":{\"596\":1}}],[\"动态性\",{\"1\":{\"291\":1}}],[\"动态链接\",{\"1\":{\"214\":1}}],[\"人\",{\"1\":{\"559\":1,\"3021\":1,\"5399\":1}}],[\"人类很可能想不清楚\",{\"1\":{\"557\":1}}],[\"换句话说\",{\"1\":{\"558\":1}}],[\"毛病不大\",{\"1\":{\"556\":1}}],[\"听起来似乎说\",{\"1\":{\"556\":1}}],[\"听过无数遍\",{\"1\":{\"547\":1}}],[\"车里有一台发动机\",{\"1\":{\"552\":1}}],[\"有字母数字下划线大小写等乱七八糟各种要求\",{\"1\":{\"3607\":1}}],[\"有2\",{\"1\":{\"3442\":1}}],[\"有获得过奖学金吗\",{\"1\":{\"3422\":1,\"5702\":1}}],[\"有可能会造成系统创建大量同类线程而导致消耗完内存或者\",{\"1\":{\"3339\":1,\"4596\":1}}],[\"有可变长的\",{\"1\":{\"2407\":1}}],[\"有公平锁\",{\"1\":{\"3215\":1,\"4339\":1}}],[\"有什么理由还升http\",{\"1\":{\"5535\":1}}],[\"有什么用\",{\"0\":{\"3183\":1,\"4528\":1}}],[\"有什么区别\",{\"0\":{\"2503\":1,\"2508\":1,\"2513\":1,\"2518\":1,\"2559\":1,\"4937\":1,\"5601\":1,\"5606\":1,\"5611\":1,\"5616\":1}}],[\"有什么区别呢\",{\"0\":{\"2373\":1},\"1\":{\"2300\":1}}],[\"有几个哈希函数得到几个哈希值\",{\"1\":{\"3026\":1,\"5404\":1}}],[\"有没有参加过团体活动\",{\"1\":{\"3413\":1,\"5693\":1}}],[\"有没有其他办法呢\",{\"1\":{\"3125\":1,\"4407\":1}}],[\"有没有感觉布隆过滤器就是我们想要找的那个\",{\"1\":{\"3021\":1,\"5399\":1}}],[\"有没有一种办法可以让你不修改代码呢\",{\"1\":{\"487\":1,\"3938\":1}}],[\"有哪些解决办法\",{\"0\":{\"3016\":1,\"3034\":1,\"3045\":1,\"5394\":1,\"5412\":1,\"5423\":1}}],[\"有哪些常用的\",{\"0\":{\"1180\":1,\"4213\":1}}],[\"有的数据库只实现了其中几种隔离级别\",{\"1\":{\"2844\":1,\"5222\":1}}],[\"有的\",{\"1\":{\"2701\":1,\"5079\":1}}],[\"有拥塞控制和流量控制机制\",{\"1\":{\"2386\":1}}],[\"有一批帖子\",{\"0\":{\"2183\":1,\"4305\":1}}],[\"有一个简单并且适用面比较广的公式\",{\"1\":{\"3327\":1,\"4584\":1}}],[\"有一个开发工具\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"有一个是支持传入initialcapacity的\",{\"1\":{\"929\":1}}],[\"有一个\",{\"1\":{\"551\":1,\"2367\":1,\"2415\":1}}],[\"有些情况下我们反而希望把很多次锁的请求合并成一个请求\",{\"1\":{\"3239\":1,\"4362\":1}}],[\"有些伙伴可能有疑惑\",{\"1\":{\"2179\":1,\"4301\":1}}],[\"有些场景下\",{\"1\":{\"694\":1}}],[\"有选举权和被选举权\",{\"1\":{\"2112\":1,\"4717\":1}}],[\"有恢复迹象\",{\"1\":{\"2075\":1,\"4680\":1}}],[\"有sink\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"有利于提高开发效率\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"有利于资源重复利用\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"有所不同\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"有事件发生时\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"有名管道以磁盘文件的方式存在\",{\"1\":{\"1365\":1,\"1533\":1,\"1701\":1,\"1869\":1,\"4792\":1}}],[\"有名管道严格遵循\",{\"1\":{\"1365\":1,\"1533\":1,\"1701\":1,\"1869\":1,\"4792\":1}}],[\"有名管道\",{\"1\":{\"1365\":1,\"1533\":1,\"1701\":1,\"1869\":1,\"4792\":1}}],[\"有多个consumer去消费\",{\"1\":{\"1309\":1,\"5501\":1}}],[\"有3个consumer\",{\"1\":{\"1292\":1,\"5484\":1}}],[\"有3个topic\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"有4个topic\",{\"1\":{\"1291\":1,\"5483\":1}}],[\"有两种数据保存策略\",{\"1\":{\"1245\":1,\"5437\":1}}],[\"有了彩虹表\",{\"1\":{\"3607\":1}}],[\"有了自适应自旋\",{\"1\":{\"3256\":1}}],[\"有了它\",{\"1\":{\"1181\":1,\"4214\":1}}],[\"有了二级缓存都能解决\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"有了二级缓存其实这个事处理起来就容易了\",{\"1\":{\"1127\":1,\"4160\":1}}],[\"有了同步块\",{\"1\":{\"821\":1,\"4030\":1}}],[\"有人可能要问了\",{\"1\":{\"3105\":1,\"4387\":1}}],[\"有人认为\",{\"1\":{\"1001\":1}}],[\"有人也并不建议使用\",{\"1\":{\"591\":1}}],[\"有符号数用最高位作为符号位\",{\"1\":{\"996\":1}}],[\"有顺序\",{\"1\":{\"692\":1}}],[\"有序集合比较典型的使用场景就是排行榜\",{\"1\":{\"2957\":1,\"5335\":1}}],[\"有序集合\",{\"0\":{\"2950\":1,\"5328\":1},\"1\":{\"2913\":1,\"5291\":1}}],[\"有序的\",{\"1\":{\"2353\":1}}],[\"有序\",{\"1\":{\"686\":1}}],[\"有如下特点\",{\"1\":{\"681\":1,\"730\":1}}],[\"有\",{\"1\":{\"648\":1,\"2807\":1,\"3125\":1,\"4407\":1,\"5185\":1}}],[\"有且仅有一个特定的称为根\",{\"1\":{\"613\":1}}],[\"猫是一个动物\",{\"1\":{\"549\":1}}],[\"qps\",{\"1\":{\"3560\":1}}],[\"qps估算方法\",{\"0\":{\"3559\":1}}],[\"query\",{\"1\":{\"3560\":1}}],[\"questions\",{\"1\":{\"3181\":1,\"3218\":1,\"3361\":1,\"4342\":1,\"4526\":1,\"4615\":1}}],[\"queuing\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"queue<integer>\",{\"1\":{\"571\":2,\"601\":2}}],[\"queue\",{\"1\":{\"570\":1,\"574\":1,\"575\":1,\"576\":2,\"577\":2,\"578\":1,\"744\":1,\"3288\":3,\"4552\":3}}],[\"quicklist\",{\"1\":{\"2932\":1,\"5310\":1}}],[\"quick\",{\"1\":{\"2514\":1,\"5530\":1,\"5612\":1}}],[\"quic\",{\"1\":{\"2384\":1,\"2514\":4,\"2515\":1,\"2516\":1,\"5530\":4,\"5612\":4,\"5613\":1,\"5614\":1}}],[\"quic成为http\",{\"1\":{\"2211\":1,\"2226\":1,\"2241\":1,\"2254\":1,\"2267\":1,\"2282\":1,\"5518\":1,\"5541\":1}}],[\"q8\",{\"0\":{\"593\":1}}],[\"q7\",{\"0\":{\"584\":1}}],[\"q6\",{\"0\":{\"581\":1}}],[\"q5\",{\"0\":{\"566\":1}}],[\"q4\",{\"0\":{\"562\":1}}],[\"q3\",{\"0\":{\"545\":1}}],[\"q2\",{\"0\":{\"538\":1},\"1\":{\"571\":1,\"572\":2,\"576\":1,\"601\":2}}],[\"q1\",{\"0\":{\"532\":1},\"1\":{\"571\":1,\"572\":2,\"576\":1,\"601\":2}}],[\"qq\",{\"1\":{\"520\":1,\"868\":1,\"1154\":1,\"1318\":1,\"3130\":1,\"3155\":1,\"3361\":1,\"3656\":1,\"3971\":1,\"3976\":1,\"4187\":1,\"4365\":1,\"4470\":1,\"4615\":1,\"5510\":1}}],[\"话不多说\",{\"1\":{\"531\":1,\"747\":1,\"2292\":1,\"3641\":1}}],[\"链表的性能是远远低于动态数组的\",{\"1\":{\"598\":1}}],[\"链表呢\",{\"0\":{\"593\":1}}],[\"链表\",{\"0\":{\"524\":1,\"3991\":1}}],[\"链接\",{\"1\":{\"19\":1,\"46\":1,\"3673\":1,\"3700\":1}}],[\"七层模型\",{\"0\":{\"2461\":1,\"2554\":1,\"5559\":1},\"1\":{\"2462\":1,\"5560\":1}}],[\"七\",{\"0\":{\"521\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"1844\":1,\"4767\":1}}],[\"参考了\",{\"1\":{\"5530\":1}}],[\"参考\",{\"1\":{\"520\":1,\"607\":1,\"1033\":1,\"1148\":1,\"1209\":1,\"1242\":1,\"1295\":1,\"1304\":1,\"1318\":1,\"1397\":1,\"1506\":1,\"1565\":1,\"1674\":1,\"1733\":1,\"1842\":1,\"1901\":1,\"2010\":1,\"2877\":1,\"3130\":1,\"3155\":1,\"3181\":1,\"3276\":1,\"3361\":1,\"3656\":1,\"3971\":1,\"4181\":1,\"4242\":1,\"4275\":1,\"4470\":1,\"4504\":1,\"4526\":1,\"4615\":1,\"4824\":1,\"4933\":1,\"5255\":1,\"5487\":1,\"5496\":1,\"5510\":1}}],[\"参数的时间单位\",{\"1\":{\"3295\":1,\"4559\":1}}],[\"参数的时候\",{\"1\":{\"2703\":1,\"5081\":1}}],[\"参数\",{\"1\":{\"3287\":1,\"4551\":1}}],[\"参数设置的\",{\"1\":{\"2976\":1,\"5354\":1}}],[\"参数开启\",{\"1\":{\"2972\":1,\"5350\":1}}],[\"参数不能为0\",{\"1\":{\"452\":1,\"3911\":1}}],[\"参数来设置线程数\",{\"1\":{\"353\":1}}],[\"参数类型\",{\"1\":{\"285\":1}}],[\"无锁\",{\"0\":{\"4345\":1}}],[\"无锁并不会对资源锁定\",{\"1\":{\"3222\":1,\"4346\":1}}],[\"无界队列\",{\"1\":{\"3309\":1,\"4574\":1}}],[\"无论\",{\"1\":{\"5530\":1}}],[\"无论读操作还是写操作\",{\"1\":{\"3258\":1,\"4486\":1}}],[\"无论方法正常执行完毕还是抛出异常\",{\"1\":{\"3160\":1}}],[\"无论的网络链路中出现了怎样的链路变化\",{\"1\":{\"2352\":1}}],[\"无论是用取模运算还是位运算都无法直接解决冲突较大的问题\",{\"1\":{\"984\":1}}],[\"无间隔\",{\"1\":{\"2347\":1}}],[\"无耦合\",{\"1\":{\"2047\":1,\"4652\":1}}],[\"无名管道\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"无顺序\",{\"1\":{\"694\":1}}],[\"无左孩子\",{\"1\":{\"650\":1}}],[\"无需多一个字段去记录\",{\"1\":{\"2407\":1}}],[\"无需知道\",{\"1\":{\"576\":1}}],[\"无需关注工厂类\",{\"1\":{\"519\":1,\"3970\":1}}],[\"无法使用覆盖索引\",{\"1\":{\"2900\":1,\"5278\":1}}],[\"无法成功插入\",{\"1\":{\"2848\":1,\"5226\":1}}],[\"无法实现虚拟主机\",{\"1\":{\"2507\":1,\"5605\":1}}],[\"无法充分利用\",{\"1\":{\"1472\":1,\"1640\":1,\"1808\":1,\"1976\":1,\"4899\":1}}],[\"无法保证先读到消息的consumer一定先完成操作\",{\"1\":{\"1309\":1,\"5501\":1}}],[\"无法获取继承下来的方法\",{\"1\":{\"515\":1,\"3966\":1}}],[\"无法获取继承下来的变量\",{\"1\":{\"513\":1,\"3964\":1}}],[\"无法被父类加载器加载的类最终会通过这个方法被加载\",{\"1\":{\"413\":1,\"3868\":1}}],[\"<br>\",{\"1\":{\"3288\":4,\"4552\":4}}],[\"<字段列表>\",{\"0\":{\"2898\":1,\"5276\":1},\"1\":{\"2901\":1,\"5279\":1}}],[\"<=\",{\"1\":{\"2654\":1,\"3288\":2,\"4552\":2,\"5032\":1}}],[\"<ip\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"<sys\",{\"1\":{\"1416\":1,\"1584\":1,\"1752\":1,\"1920\":1,\"4843\":1}}],[\"<artifactid>spring\",{\"1\":{\"1169\":1,\"4202\":1}}],[\"<groupid>org\",{\"1\":{\"1169\":1,\"4202\":1}}],[\"<dependency>\",{\"1\":{\"1169\":1,\"4202\":1}}],[\"<<\",{\"1\":{\"921\":1,\"1014\":4}}],[\"<tt>object<\",{\"1\":{\"749\":1}}],[\"<tt>arraylist<\",{\"1\":{\"749\":2}}],[\"<\",{\"1\":{\"515\":2,\"517\":2,\"601\":2,\"778\":1,\"1169\":1,\"1272\":1,\"1334\":1,\"1491\":1,\"1659\":1,\"1827\":1,\"1995\":1,\"2654\":1,\"3200\":1,\"3288\":6,\"3966\":2,\"3968\":2,\"4202\":1,\"4552\":6,\"4918\":1,\"5032\":1,\"5464\":1}}],[\"该项目由用户端和自媒体端组成\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池\",{\"1\":{\"3335\":1,\"4592\":1}}],[\"该标识指明了该方法是一个同步方法\",{\"1\":{\"3175\":1,\"3179\":1,\"4520\":1,\"4524\":1}}],[\"该数据\",{\"1\":{\"3033\":1,\"3040\":1,\"5411\":1,\"5418\":1}}],[\"该数据结构所容纳的所有元素均包含一个指针\",{\"1\":{\"956\":1}}],[\"该情况\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"该表的索引\",{\"1\":{\"2632\":1,\"5010\":1}}],[\"该帧已经从主机\",{\"1\":{\"2495\":1,\"5593\":1}}],[\"该过程与同一局域网内的\",{\"1\":{\"2492\":1,\"5590\":1}}],[\"该分组的目的地只有一个\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"该查询分组对当前设备无效\",{\"1\":{\"2482\":1,\"5580\":1}}],[\"该\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"该条目将被丢弃\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"该映射关系以\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"该去往何处\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"该位为\",{\"1\":{\"2341\":1,\"2342\":1,\"2343\":1,\"2344\":1}}],[\"该提案n1最终需要被抛弃掉\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"该协议能够很好地支持\",{\"1\":{\"2108\":1,\"4713\":1}}],[\"该系统调用\",{\"1\":{\"1419\":1,\"1587\":1,\"1755\":1,\"1923\":1,\"4846\":1}}],[\"该消息队列才会被真正的删除\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"该线程池中的线程数量始终不变\",{\"1\":{\"3332\":1,\"4589\":1}}],[\"该线程对副本的操作\",{\"1\":{\"3137\":1,\"4450\":1}}],[\"该线程是否正在独占资源\",{\"1\":{\"3081\":1,\"4437\":1}}],[\"该线程结束生命周期\",{\"1\":{\"1348\":1,\"1516\":1,\"1684\":1,\"1852\":1,\"4775\":1}}],[\"该线程会释放占用的所有资源\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"该状态的线程位于\",{\"1\":{\"1344\":1,\"1512\":1,\"1680\":1,\"1848\":1,\"4771\":1}}],[\"该模块将在生产环境中被禁用\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"该文件里配置了所有需要被创建的spring容器中的bean\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"该级别可以防止脏读\",{\"1\":{\"1095\":1,\"4128\":1}}],[\"该方法返回一个可根据实际情况调整线程数量的线程池\",{\"1\":{\"3334\":1,\"4591\":1}}],[\"该方法返回一个只有一个线程的线程池\",{\"1\":{\"3333\":1,\"4590\":1}}],[\"该方法返回一个固定线程数量的线程池\",{\"1\":{\"3332\":1,\"4589\":1}}],[\"该方法主要是将hash生成的整型转换成链表数组中的下标\",{\"1\":{\"966\":1}}],[\"该方法主要是将object转换成一个整型\",{\"1\":{\"965\":1}}],[\"该方法会返回一个整数\",{\"1\":{\"963\":1}}],[\"该方法必须被public修饰\",{\"1\":{\"515\":1,\"3966\":1}}],[\"该接口比list提供了更多的方法\",{\"1\":{\"744\":1}}],[\"该构造器必须被public修饰\",{\"1\":{\"517\":1,\"3968\":1}}],[\"该变量必须被public修饰\",{\"1\":{\"513\":1,\"3964\":1}}],[\"该类加载器才会尝试去加载\",{\"1\":{\"422\":1,\"3879\":1}}],[\"同财务相关的金额类数据必须使用\",{\"0\":{\"2886\":1,\"5264\":1}}],[\"同一局域网内的\",{\"0\":{\"2475\":1,\"5573\":1},\"1\":{\"2473\":1,\"5571\":1}}],[\"同一项目的不同模块不同功能互相抢占资源\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"同一端出\",{\"1\":{\"583\":1}}],[\"同时作为消息中间件异步消费任务\",{\"1\":{\"3454\":1,\"5723\":1}}],[\"同时这样对数据库性能开销影响也很大\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"同时创建的localvariable对象也不会释放\",{\"1\":{\"3201\":1}}],[\"同时加\",{\"1\":{\"3123\":1,\"4405\":1}}],[\"同时阻塞该线程\",{\"1\":{\"3068\":1,\"4422\":1}}],[\"同时\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"同时对\",{\"1\":{\"2353\":1}}],[\"同时还实现了二进制分帧\",{\"1\":{\"2218\":1,\"2233\":1,\"2274\":1,\"2289\":1,\"5525\":1}}],[\"同时还能提升内存分配的吞吐量\",{\"1\":{\"273\":1}}],[\"同时集群中已经有过半的机器与该\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"同时设置了\",{\"1\":{\"1252\":1,\"5444\":1}}],[\"同理\",{\"1\":{\"880\":1,\"3988\":1}}],[\"同步队列\",{\"1\":{\"3310\":1,\"4575\":1}}],[\"同步队列中\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"同步\",{\"1\":{\"3239\":1,\"4362\":1}}],[\"同步语句块的实现使用的是\",{\"1\":{\"3165\":1,\"3178\":1,\"4510\":1,\"4523\":1}}],[\"同步语句块的情况\",{\"0\":{\"3161\":1,\"4506\":1}}],[\"同步到到磁盘\",{\"1\":{\"2987\":1,\"5365\":1}}],[\"同步一次\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"同步硬盘操作通常依赖于系统调度机制\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"同步保存操作\",{\"1\":{\"2969\":1,\"5347\":1}}],[\"同步更新数据\",{\"1\":{\"2116\":1,\"4721\":1}}],[\"同步的关系\",{\"1\":{\"1358\":1,\"1526\":1,\"1694\":1,\"1862\":1,\"4785\":1}}],[\"同步阻塞\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"同步块的⽬的与之前相同\",{\"1\":{\"821\":1,\"4030\":1}}],[\"同步块可以更加精确的控制锁的作用域\",{\"1\":{\"799\":1}}],[\"同步方法的锁的作用域就是整个方法\",{\"1\":{\"799\":1}}],[\"同步代码块可以选择对哪个对象加锁\",{\"1\":{\"800\":1}}],[\"同步代码块在锁定的范围上可能比同步方法要小\",{\"1\":{\"798\":1}}],[\"同步代码块和同步方法的区别\",{\"1\":{\"796\":1}}],[\"同步处理\",{\"1\":{\"762\":1}}],[\"同学的看法\",{\"1\":{\"606\":1}}],[\"同样会降低查询性能\",{\"1\":{\"2669\":1,\"5047\":1}}],[\"同样为了避免不太好的key的hashcode设计\",{\"1\":{\"1029\":1}}],[\"同样作为一种特殊的线性数据结构\",{\"1\":{\"578\":1}}],[\"同样可以构造一个实例\",{\"1\":{\"509\":1,\"3960\":1}}],[\"同https\",{\"1\":{\"523\":1,\"525\":1,\"527\":1,\"609\":1,\"678\":1}}],[\"嘤~\",{\"1\":{\"502\":1,\"3953\":1}}],[\"好羞羞\",{\"1\":{\"502\":1,\"3953\":1}}],[\"拿到\",{\"1\":{\"502\":1,\"3953\":1}}],[\"三次握手的延迟\",{\"1\":{\"2515\":1,\"5613\":1}}],[\"三次握手过程\",{\"1\":{\"2515\":1,\"5613\":1}}],[\"三次握手过程是怎样的\",{\"0\":{\"2418\":1},\"1\":{\"2303\":1}}],[\"三元组的形式存储\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"三级缓存\",{\"0\":{\"1219\":1,\"1229\":1,\"4252\":1,\"4262\":1}}],[\"三级缓存并不是非必须不可\",{\"1\":{\"1137\":1,\"4170\":1}}],[\"三级缓存主要是解决\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"三级缓存解决什么\",{\"1\":{\"1130\":1,\"4163\":1}}],[\"三种方法\",{\"1\":{\"496\":1,\"3947\":1}}],[\"三\",{\"0\":{\"679\":1,\"3409\":1,\"3588\":1,\"3962\":1,\"4328\":1,\"5529\":1,\"5531\":1,\"5689\":1},\"1\":{\"494\":1,\"3945\":1}}],[\"二面\",{\"0\":{\"3372\":1,\"5652\":1}}],[\"二级索引\",{\"0\":{\"2621\":1,\"4999\":1},\"1\":{\"2608\":1,\"2622\":1,\"2640\":1,\"4986\":1,\"5000\":1,\"5018\":1}}],[\"二级缓存的执行流程\",{\"1\":{\"1240\":1,\"4273\":1}}],[\"二级缓存的生命周期和应用同步\",{\"1\":{\"1237\":1,\"4270\":1}}],[\"二级缓存进行增删改操作也会刷新二级缓存\",{\"1\":{\"1239\":1,\"4272\":1}}],[\"二级缓存总是默认开启的\",{\"1\":{\"1238\":1,\"4271\":1}}],[\"二级缓存cache中readonly属性如果为false\",{\"1\":{\"1236\":1,\"4269\":1}}],[\"二级缓存需要手动配置\",{\"1\":{\"1234\":1,\"4267\":1}}],[\"二级缓存作用域是针对mapper进行缓存\",{\"1\":{\"1233\":1,\"4266\":1}}],[\"二级缓存\",{\"0\":{\"1219\":1,\"1222\":1,\"4252\":1,\"4255\":1}}],[\"二级缓存能解决吗\",{\"1\":{\"1125\":1,\"4158\":1}}],[\"二进制帧更加紧凑和高效\",{\"1\":{\"2510\":1,\"5608\":1}}],[\"二进制帧\",{\"1\":{\"2510\":1,\"5608\":1}}],[\"二者并不冲突\",{\"1\":{\"2415\":1}}],[\"二者跨度较大\",{\"1\":{\"880\":1,\"3988\":1}}],[\"二叉搜索树就变为了一个链表\",{\"1\":{\"658\":1,\"3999\":1}}],[\"二叉搜索树bst是有序的\",{\"1\":{\"621\":1}}],[\"二叉树计算\",{\"0\":{\"652\":1}}],[\"二叉树的性质\",{\"0\":{\"643\":1}}],[\"二叉树的定义\",{\"0\":{\"640\":1}}],[\"二叉树是每个结点最多有两个子树的树结构\",{\"1\":{\"641\":1}}],[\"二叉树\",{\"0\":{\"610\":1,\"3994\":1},\"1\":{\"642\":1}}],[\"二\",{\"0\":{\"702\":1,\"3394\":1,\"3583\":1,\"3824\":1,\"3954\":1,\"5527\":1,\"5674\":1},\"1\":{\"494\":1,\"523\":1,\"525\":1,\"527\":1,\"609\":1,\"3945\":1}}],[\"常规数据\",{\"1\":{\"2924\":1,\"5302\":1}}],[\"常见优化手段\",{\"0\":{\"2878\":1,\"5256\":1}}],[\"常见\",{\"1\":{\"2502\":1,\"5600\":1}}],[\"常见的非对称加密算法有\",{\"1\":{\"3647\":1}}],[\"常见的对称加密算法有\",{\"1\":{\"3645\":1}}],[\"常见的导致索引失效的情况有下面这些\",{\"1\":{\"2677\":1,\"5055\":1}}],[\"常见的设计模式\",{\"0\":{\"811\":1,\"4020\":1}}],[\"常见的有以下这几个\",{\"1\":{\"493\":1,\"3944\":1}}],[\"常考\",{\"1\":{\"2292\":1}}],[\"常常简单的表述为\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"常用口令\",{\"1\":{\"3609\":1}}],[\"常用的方法就是加锁\",{\"1\":{\"3091\":1,\"4367\":1}}],[\"常用的过期数据的删除策略就两个\",{\"1\":{\"2993\":1,\"5371\":1}}],[\"常用的命令\",{\"0\":{\"1320\":1,\"4277\":1}}],[\"常用的\",{\"1\":{\"1182\":1,\"4215\":1}}],[\"常用的哈希函数的冲突解决办法中有一种方法叫做链地址法\",{\"1\":{\"954\":1}}],[\"常用于系统加载时进行信息初始化\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"常量池表\",{\"1\":{\"288\":1}}],[\"常量池可以看作是一张表\",{\"1\":{\"285\":1}}],[\"常量池\",{\"1\":{\"282\":1}}],[\"注入到spring\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"注\",{\"1\":{\"1302\":1,\"5494\":1}}],[\"注意是即时运算出来的值\",{\"1\":{\"3636\":1}}],[\"注意是很大程度避免\",{\"1\":{\"2845\":1,\"5223\":1}}],[\"注意避免冗余索引\",{\"1\":{\"2672\":1,\"5050\":1}}],[\"注意\",{\"1\":{\"506\":1,\"626\":1,\"628\":1,\"745\":1,\"901\":1,\"951\":1,\"1228\":1,\"2980\":1,\"3957\":1,\"4261\":1,\"5358\":1}}],[\"注解\",{\"1\":{\"494\":1,\"3945\":1}}],[\"注解等\",{\"1\":{\"489\":1,\"3940\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"115\":1,\"3769\":1}}],[\"让线程进入阻塞状态\",{\"1\":{\"3255\":1,\"4484\":1}}],[\"让用户决定如何去做\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"让其他线程可见\",{\"1\":{\"3146\":1,\"4458\":1}}],[\"让同一个用户的相关请求\",{\"1\":{\"2197\":1,\"4319\":1}}],[\"让\",{\"1\":{\"2117\":1,\"4722\":1}}],[\"让我们可以在运行时获取类的信息\",{\"1\":{\"488\":1,\"3939\":1}}],[\"让所有存活的对象都向一端移动\",{\"1\":{\"330\":1}}],[\"于是转向问权威\",{\"1\":{\"2541\":1,\"5639\":1}}],[\"于是为了减少这一步开销\",{\"1\":{\"1404\":1,\"1572\":1,\"1740\":1,\"1908\":1,\"4831\":1}}],[\"于是\",{\"1\":{\"484\":1,\"1422\":1,\"1590\":1,\"1758\":1,\"1926\":1,\"3935\":1,\"4849\":1}}],[\"把\",{\"1\":{\"3533\":1,\"3537\":1,\"5802\":1,\"5806\":1}}],[\"把之前的异步调用修改为调用延迟任务\",{\"1\":{\"3530\":1,\"5799\":1}}],[\"把自媒体文章上下架放进消息队列\",{\"1\":{\"3453\":1,\"5722\":1}}],[\"把自己的应用放入容器\",{\"1\":{\"2017\":1,\"4622\":1}}],[\"把所有可能存在的请求的值都存放在布隆过滤器中\",{\"1\":{\"3022\":1,\"5400\":1}}],[\"把内核缓冲区里的数据拷贝到\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"把内核缓冲区的数据拷贝到\",{\"1\":{\"1413\":1,\"1581\":1,\"1749\":1,\"1917\":1,\"4840\":1}}],[\"把内核的\",{\"1\":{\"1411\":1,\"1579\":1,\"1747\":1,\"1915\":1,\"4838\":1}}],[\"把需要监控的\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"把时间拉长来看\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"把你绕蒙你这篇文章就白看了\",{\"1\":{\"481\":1,\"3932\":1}}],[\"把堆划分成多个大小相等的独立区域\",{\"1\":{\"375\":1}}],[\"唱跳rap篮球\",{\"1\":{\"480\":1,\"483\":1,\"3931\":1,\"3934\":1}}],[\"蔡徐鸡\",{\"1\":{\"480\":1,\"483\":1,\"3931\":1,\"3934\":1}}],[\"应用非常广泛\",{\"1\":{\"3128\":1,\"4410\":1}}],[\"应用场景\",{\"0\":{\"2397\":1,\"2923\":1,\"2933\":1,\"2940\":1,\"2948\":1,\"2956\":1,\"5301\":1,\"5311\":1,\"5318\":1,\"5326\":1,\"5334\":1}}],[\"应用进程再调用\",{\"1\":{\"1410\":1,\"1578\":1,\"1746\":1,\"1914\":1,\"4837\":1}}],[\"应用进程跟操作系统内核\",{\"1\":{\"1409\":1,\"1577\":1,\"1745\":1,\"1913\":1,\"4836\":1}}],[\"应用进程调用了\",{\"1\":{\"1409\":1,\"1577\":1,\"1745\":1,\"1913\":1,\"4836\":1}}],[\"应用程序\",{\"1\":{\"1183\":1,\"4216\":1}}],[\"应用程序类加载器\",{\"1\":{\"404\":1,\"3859\":1}}],[\"应该尽量只在需要对数据进行精确计算时才使用\",{\"1\":{\"2890\":1,\"5268\":1}}],[\"应该尽量指定其大小\",{\"1\":{\"934\":1}}],[\"应该被考虑建立索引\",{\"1\":{\"2661\":1,\"5039\":1}}],[\"应该被优先使用\",{\"1\":{\"728\":1}}],[\"应该发送怎样的查询分组呢\",{\"1\":{\"2489\":1,\"5587\":1}}],[\"应该如何\",{\"0\":{\"2444\":1},\"1\":{\"2329\":1}}],[\"应该同步线程以避免关键的资源使用冲突\",{\"1\":{\"1351\":1,\"1519\":1,\"1687\":1,\"1855\":1,\"4778\":1}}],[\"应该用哪一个呢\",{\"1\":{\"727\":1}}],[\"应该是组合关系\",{\"1\":{\"552\":1}}],[\"应该由\",{\"1\":{\"535\":1}}],[\"应该会有会心一笑\",{\"1\":{\"469\":1,\"3920\":1}}],[\"看了你去年做了一个博客社区的项目\",{\"1\":{\"3437\":1}}],[\"看了大佬小林coding的文章\",{\"1\":{\"2337\":1}}],[\"看你是院研副部长\",{\"1\":{\"3430\":1,\"5710\":1}}],[\"看你项目中用到了网关\",{\"1\":{\"3417\":1,\"5697\":1}}],[\"看我熟悉python\",{\"1\":{\"3400\":1,\"5680\":1}}],[\"看作是\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"看它是否依然可读或可写\",{\"1\":{\"1392\":1,\"1560\":1,\"1728\":1,\"1896\":1,\"4819\":1}}],[\"看过\",{\"1\":{\"1385\":1,\"1553\":1,\"1721\":1,\"1889\":1,\"4812\":1}}],[\"看上去分配已经尽量的保证均衡了\",{\"1\":{\"1284\":1,\"5476\":1}}],[\"看完这篇文章\",{\"1\":{\"961\":1}}],[\"看结果如何\",{\"1\":{\"929\":1}}],[\"看到k神题解下的一个评论\",{\"1\":{\"529\":1}}],[\"看到上面的代码\",{\"1\":{\"469\":1,\"3920\":1}}],[\"看下它的背后\",{\"1\":{\"456\":1}}],[\"测试它们的性能\",{\"1\":{\"600\":1}}],[\"测试\",{\"1\":{\"463\":2}}],[\"⾥⾯的code会不会被执⾏\",{\"1\":{\"460\":1}}],[\"⾥⾯有⼀个return语句\",{\"1\":{\"460\":1}}],[\"子进程执行\",{\"1\":{\"2970\":1,\"5348\":1}}],[\"子查询的结果集无法使用索引\",{\"1\":{\"2904\":1,\"5282\":1}}],[\"子查询性能差的原因\",{\"1\":{\"2904\":1,\"5282\":1}}],[\"子句中\",{\"1\":{\"2903\":1,\"5281\":1}}],[\"子句中打开资源\",{\"1\":{\"454\":1,\"3913\":1}}],[\"子线程无须返回数据\",{\"1\":{\"1505\":1,\"1673\":1,\"1841\":1,\"2009\":1,\"4932\":1}}],[\"子线程负责完成后续的业务处理\",{\"1\":{\"1504\":1,\"1672\":1,\"1840\":1,\"2008\":1,\"4931\":1}}],[\"子线程中的\",{\"1\":{\"1500\":1,\"1668\":1,\"1836\":1,\"2004\":1,\"4927\":1}}],[\"子线程完成业务处理后\",{\"1\":{\"1488\":1,\"1656\":1,\"1824\":1,\"1992\":1,\"4915\":1}}],[\"子线程里的\",{\"1\":{\"1486\":1,\"1654\":1,\"1822\":1,\"1990\":1,\"4913\":1}}],[\"子结点关系和传递性\",{\"1\":{\"629\":1}}],[\"子树的根是树根的子结点\",{\"1\":{\"625\":1}}],[\"子树的根看作是树根的下一层元素\",{\"1\":{\"619\":1}}],[\"子加载器才会尝试自己去加载\",{\"1\":{\"426\":1,\"3883\":1}}],[\"后经提议\",{\"1\":{\"5530\":1}}],[\"后来\",{\"1\":{\"5530\":1}}],[\"后端先验证\",{\"1\":{\"3558\":1,\"5827\":1}}],[\"后端是一个松耦合架构\",{\"1\":{\"2019\":1,\"4624\":1}}],[\"后台管理微服务签发jwt\",{\"1\":{\"3491\":1,\"5760\":1}}],[\"后文会详细介绍到\",{\"1\":{\"3341\":1,\"4598\":1}}],[\"后继节点\",{\"1\":{\"3071\":1,\"3073\":1,\"4425\":1,\"4428\":1}}],[\"后续即使它们修改了记录行的值\",{\"1\":{\"2865\":1,\"5243\":1}}],[\"后续有对该表的\",{\"1\":{\"2736\":1,\"5114\":1}}],[\"后访问的事务必须等前一个事务执行完成\",{\"1\":{\"2835\":1,\"5213\":1}}],[\"后一级缓存也没有了\",{\"1\":{\"1235\":1,\"4268\":1}}],[\"后重写为\",{\"1\":{\"1216\":1,\"4249\":1}}],[\"后\",{\"1\":{\"1058\":1,\"1409\":1,\"1577\":1,\"1745\":1,\"1913\":1,\"4091\":1,\"4836\":1}}],[\"后三位\",{\"1\":{\"976\":1}}],[\"后者不是线程安全的\",{\"1\":{\"900\":1}}],[\"后面会有答案的\",{\"1\":{\"2624\":1,\"5002\":1}}],[\"后面会具体演示代码\",{\"1\":{\"840\":1,\"4049\":1}}],[\"后面两个参数是源端的偏移量和复制数据的长度\",{\"1\":{\"1417\":1,\"1585\":1,\"1753\":1,\"1921\":1,\"4844\":1}}],[\"后面每次调用在这个整数上自增\",{\"1\":{\"1262\":1,\"5454\":1}}],[\"后面的两个hashcode经过位运算之后得到的值也是11\",{\"1\":{\"991\":1}}],[\"后面接上要声明的异常\",{\"1\":{\"448\":1,\"3907\":1}}],[\"后进先出的栈相关的操作\",{\"1\":{\"535\":1}}],[\"后仍然存活的对象\",{\"1\":{\"237\":1}}],[\"若所有线程均在工作\",{\"1\":{\"3334\":1,\"4591\":1}}],[\"若多余一个任务被提交到该线程池\",{\"1\":{\"3333\":1,\"4590\":1}}],[\"若没有\",{\"1\":{\"3332\":1,\"4589\":1}}],[\"若该记录被其他事务占用或当前版本对该事务不可见\",{\"1\":{\"2871\":1,\"5249\":1}}],[\"若该同步锁被别的线程占用\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"若系统出现\",{\"1\":{\"2158\":1,\"4763\":1}}],[\"若要重写某一业务代码\",{\"1\":{\"2048\":1,\"4653\":1}}],[\"若扩容后容量仍然小于最小容量\",{\"1\":{\"763\":1}}],[\"若声明多个异常\",{\"1\":{\"448\":1,\"3907\":1}}],[\"若方法中存在检查异常\",{\"1\":{\"448\":1,\"3907\":1}}],[\"若养老区执行了\",{\"1\":{\"270\":1}}],[\"否则表示密码错误\",{\"1\":{\"3637\":1}}],[\"否则新建一个线程来处理任务\",{\"1\":{\"3310\":1,\"4575\":1}}],[\"否则会抛出java\",{\"1\":{\"3169\":1,\"4514\":1}}],[\"否则在同步队列中不停的自旋等待获取同步状态\",{\"1\":{\"3077\":1,\"4433\":1}}],[\"否则在序列化的时候会报错\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"否则依然存在数据丢失的风险\",{\"1\":{\"2975\":1,\"5353\":1}}],[\"否则类似于字符串或\",{\"1\":{\"2637\":1,\"5015\":1}}],[\"否则就会造成数据异常\",{\"1\":{\"1307\":1,\"5499\":1}}],[\"否则采用\",{\"1\":{\"858\":1,\"4067\":1}}],[\"否则继承的这个接⼝可以什么也不⼲\",{\"1\":{\"831\":1,\"4040\":1}}],[\"否则按照内容查找元素效率比较低\",{\"1\":{\"710\":1}}],[\"否则找一个空位添加\",{\"1\":{\"699\":1}}],[\"否则它满足如下两个条件\",{\"1\":{\"612\":1}}],[\"否则\",{\"1\":{\"563\":1,\"650\":1,\"651\":1,\"2482\":1,\"2619\":1,\"3245\":1,\"4475\":1,\"4997\":1,\"5580\":1}}],[\"否则应该是组合关系\",{\"1\":{\"557\":1}}],[\"否则编译不会通过\",{\"1\":{\"443\":1,\"3902\":1}}],[\"否则才会尝试加载\",{\"1\":{\"399\":1,\"424\":1,\"3854\":1,\"3881\":1}}],[\"情理可容的异常状况\",{\"1\":{\"442\":1,\"3901\":1}}],[\"情况的区域\",{\"1\":{\"202\":1}}],[\"很明显\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"很明显需要继承\",{\"1\":{\"406\":1,\"3861\":1}}],[\"很好解决了\",{\"1\":{\"1378\":1,\"1546\":1,\"1714\":1,\"1882\":1,\"4805\":1}}],[\"很简单\",{\"1\":{\"1000\":1}}],[\"很多短任务线程\",{\"0\":{\"2164\":1,\"4286\":1}}],[\"很多顶级的开源项目都用到了\",{\"1\":{\"2098\":1,\"4703\":1}}],[\"很多同学应该能马上反应过来了\",{\"1\":{\"585\":1}}],[\"很多人会更倾向于使用继承关系\",{\"1\":{\"561\":1}}],[\"很多时候\",{\"1\":{\"557\":1}}],[\"很容易出现的\",{\"1\":{\"442\":1,\"3901\":1}}],[\"正如其名\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"正在等待的线程可以选择放弃等待\",{\"1\":{\"3209\":1,\"4333\":1}}],[\"正在内存中\",{\"1\":{\"2865\":1,\"5243\":1}}],[\"正数表示成功\",{\"1\":{\"3084\":1,\"4440\":1}}],[\"正确使用索引的一些建议\",{\"0\":{\"2657\":1,\"5035\":1}}],[\"正确的程序在运行中\",{\"1\":{\"442\":1,\"3901\":1}}],[\"正常调用时\",{\"1\":{\"2075\":1,\"4680\":1}}],[\"正因为循环引用的存在\",{\"1\":{\"300\":1}}],[\"即盐值salt\",{\"1\":{\"3624\":1}}],[\"即一种基于模板和要改变的数据\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"即一条连接只有两个端点\",{\"1\":{\"2380\":1}}],[\"即永远不会阻塞\",{\"1\":{\"3311\":1,\"4576\":1}}],[\"即不存在多个线程的竞争时\",{\"1\":{\"3228\":1,\"4352\":1}}],[\"即将暂时获取不到锁的线程加入到队列中\",{\"1\":{\"3070\":1,\"4424\":1}}],[\"即将要执行的指令代码\",{\"1\":{\"190\":1}}],[\"即队列同步器\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"即下一个将被分配的事务\",{\"1\":{\"2863\":1,\"5241\":1}}],[\"即便系统故障也不会丢失\",{\"1\":{\"2809\":1,\"5187\":1}}],[\"即能保护该记录\",{\"1\":{\"2792\":1,\"5170\":1}}],[\"即两个事务可以同时持有包含共同间隙范围的间隙锁\",{\"1\":{\"2789\":1,\"5167\":1}}],[\"即索引结构和数据分开存放的索引\",{\"1\":{\"2640\":1,\"5018\":1}}],[\"即索引结构和数据一起存放的索引\",{\"1\":{\"2631\":1,\"5009\":1}}],[\"即可快速取出对应的值\",{\"1\":{\"2587\":1,\"4965\":1}}],[\"即为主机\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"即刻传输数据\",{\"1\":{\"2378\":1}}],[\"即允许同时通过单一的http\",{\"1\":{\"2217\":1,\"2232\":1,\"2247\":1,\"2260\":1,\"2273\":1,\"2288\":1,\"5524\":1,\"5547\":1}}],[\"即拿到订单消息\",{\"1\":{\"2177\":1,\"4299\":1}}],[\"即删除消息\",{\"1\":{\"2176\":1,\"4298\":1}}],[\"即commit执行结果到mq服务器\",{\"1\":{\"2175\":1,\"4297\":1}}],[\"即上面我们说的三个角色的总称\",{\"1\":{\"2114\":1,\"4719\":1}}],[\"即上面提到的fast\",{\"1\":{\"758\":1}}],[\"即独立运行在某个进程中\",{\"1\":{\"2049\":1,\"4654\":1}}],[\"即服务单元\",{\"1\":{\"2037\":1,\"4642\":1}}],[\"即用户态和内核态都指向了就绪链表\",{\"1\":{\"1384\":1,\"1552\":1,\"1720\":1,\"1888\":1,\"4811\":1}}],[\"即在某个时间点上没有字节码正在执行时\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"即在就绪状态的进程除cpu之外\",{\"1\":{\"1344\":1,\"1512\":1,\"1680\":1,\"1848\":1,\"4771\":1}}],[\"即在不进行扰动计算的情况下\",{\"1\":{\"989\":1}}],[\"即确定哪个partition由哪个consumer来消费\",{\"1\":{\"1266\":1,\"5458\":1}}],[\"即形成了拒绝服务攻击\",{\"1\":{\"1018\":1}}],[\"即把x右移3位\",{\"1\":{\"976\":1}}],[\"即0111\",{\"1\":{\"974\":1}}],[\"即他在这个数组中的下标\",{\"1\":{\"960\":1}}],[\"即本文的主角hash\",{\"1\":{\"956\":1}}],[\"即list的size个数的elementdata\",{\"1\":{\"750\":1}}],[\"即排序中的第一个\",{\"1\":{\"731\":1}}],[\"即相同元素在set中只会保留一份\",{\"1\":{\"694\":1}}],[\"即先放入的元素不一定排在前面\",{\"1\":{\"694\":1}}],[\"即先放入的元素排在前面\",{\"1\":{\"692\":1}}],[\"即车中包含一个成员变量\",{\"1\":{\"552\":1}}],[\"即\",{\"1\":{\"548\":1,\"551\":1,\"819\":1,\"996\":1,\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"3202\":1,\"4028\":1,\"4794\":1}}],[\"即使中途有其他事务插入了一条数据\",{\"1\":{\"2847\":1,\"5225\":1}}],[\"即使没有提交事务\",{\"1\":{\"2818\":1,\"5196\":1}}],[\"即使没有用try\",{\"1\":{\"437\":1,\"3896\":1}}],[\"即使其他事务更新了表的数据\",{\"1\":{\"2702\":1,\"5080\":1}}],[\"即使网络非常拥堵了\",{\"1\":{\"2387\":1}}],[\"即使它先收到了后面的\",{\"1\":{\"2353\":1}}],[\"即使你一直没有去取\",{\"1\":{\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"4817\":1}}],[\"即使进程没有调用\",{\"1\":{\"1388\":1,\"1556\":1,\"1724\":1,\"1892\":1,\"4815\":1}}],[\"即使数据库发生故障也不应该对其有任何影响\",{\"1\":{\"1083\":1,\"4116\":1}}],[\"即使哈希冲突比较严重\",{\"1\":{\"1029\":1}}],[\"即使\",{\"1\":{\"506\":1,\"3957\":1}}],[\"等插入语句执行完成后\",{\"1\":{\"2757\":1,\"5135\":1}}],[\"等语句\",{\"1\":{\"2692\":1,\"2848\":1,\"5070\":1,\"5226\":1}}],[\"等更多可供选择的缓存头来控制缓存策略\",{\"1\":{\"2506\":1,\"5604\":1}}],[\"等技术\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"等待将来被唤醒\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"等待可中断当持有锁的线程长期不释放锁的时候\",{\"1\":{\"3209\":1,\"4333\":1}}],[\"等待时间越长就越先被唤醒\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"等待客户端的连接请求\",{\"1\":{\"2368\":1}}],[\"等待的时间是\",{\"0\":{\"2435\":1},\"1\":{\"2320\":1}}],[\"等待线程终止或者超时\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"等待池\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"等待阻塞\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"等重启之后\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"等操作\",{\"1\":{\"1221\":1,\"1235\":1,\"4254\":1,\"4268\":1}}],[\"等以\",{\"1\":{\"1072\":1,\"4105\":1}}],[\"等数据\",{\"1\":{\"1060\":1,\"4093\":1}}],[\"等等\",{\"0\":{\"584\":1},\"1\":{\"576\":1}}],[\"等\",{\"1\":{\"436\":1,\"744\":1,\"1061\":1,\"2402\":1,\"3895\":1,\"4094\":1}}],[\"等价于\",{\"1\":{\"244\":1,\"245\":1}}],[\"空节点\",{\"1\":{\"663\":1,\"4004\":1}}],[\"空树高度为0\",{\"1\":{\"639\":1}}],[\"空指针异常\",{\"1\":{\"436\":1,\"3895\":1}}],[\"空间是否满足要求\",{\"1\":{\"2922\":1,\"5300\":1}}],[\"空间函数等\",{\"1\":{\"2561\":1,\"4939\":1}}],[\"空间局部性是指一旦程序访问了某个存储单元\",{\"1\":{\"1331\":1}}],[\"空间整合\",{\"1\":{\"382\":1}}],[\"空间就不够用了\",{\"1\":{\"335\":1}}],[\"空间上\",{\"1\":{\"334\":1}}],[\"空间和其中一块\",{\"1\":{\"334\":1}}],[\"空间和两块较小的\",{\"1\":{\"334\":1}}],[\"空间\",{\"1\":{\"334\":1}}],[\"空间内\",{\"1\":{\"272\":1}}],[\"空间不足时\",{\"1\":{\"257\":1}}],[\"空间被对象填充时\",{\"1\":{\"233\":1}}],[\"如aes\",{\"1\":{\"3642\":1}}],[\"如reentrantlock\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"如不可见\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"如主键索引\",{\"1\":{\"2650\":1,\"5028\":1}}],[\"如今的\",{\"1\":{\"2409\":1}}],[\"如服务发现注册\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"如互斥锁和信号量等\",{\"1\":{\"1369\":1,\"1537\":1,\"1705\":1,\"1873\":1,\"4796\":1}}],[\"如何动态修改线程池的参数\",{\"0\":{\"4602\":1}}],[\"如何创建线程池\",{\"0\":{\"4548\":1}}],[\"如何判断对象是否可回收\",{\"0\":{\"3834\":1}}],[\"如何设定线程池的大小\",{\"1\":{\"3326\":1,\"4583\":1}}],[\"如何比较和选择\",{\"0\":{\"3205\":1,\"4329\":1}}],[\"如何解决\",{\"1\":{\"3115\":1,\"4397\":1}}],[\"如何解决深分页的问题\",{\"0\":{\"2185\":1,\"4307\":1}}],[\"如何保证原子性呢\",{\"1\":{\"3091\":1,\"4367\":1}}],[\"如何保证\",{\"1\":{\"3000\":1,\"5378\":1}}],[\"如何保证消息的消费顺序\",{\"0\":{\"1313\":1,\"5505\":1}}],[\"如何保证消息的顺序性\",{\"0\":{\"1305\":1,\"5497\":1}}],[\"如何基于\",{\"1\":{\"2384\":1}}],[\"如何优化\",{\"1\":{\"2323\":1}}],[\"如何避免\",{\"0\":{\"2427\":1},\"1\":{\"2312\":1}}],[\"如何在\",{\"1\":{\"2304\":1}}],[\"如何唯一确定一个\",{\"1\":{\"2299\":1}}],[\"如何做多机房容灾\",{\"0\":{\"2191\":1,\"4313\":1}}],[\"如何提高搜索性能\",{\"0\":{\"2183\":1,\"4305\":1}}],[\"如何与elk整合\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"如何服务更多的用户\",{\"1\":{\"1397\":1,\"1565\":1,\"1733\":1,\"1901\":1,\"4824\":1}}],[\"如何使用\",{\"0\":{\"1153\":1,\"4186\":1}}],[\"如\",{\"1\":{\"1060\":1,\"1061\":1,\"1062\":1,\"1393\":1,\"1437\":1,\"1561\":1,\"1605\":1,\"1729\":1,\"1773\":1,\"1897\":1,\"1941\":1,\"2402\":1,\"2415\":1,\"2654\":1,\"2673\":1,\"4093\":1,\"4094\":1,\"4095\":1,\"4820\":1,\"4864\":1,\"5032\":1,\"5051\":1}}],[\"如第一个\",{\"1\":{\"686\":1,\"1036\":1}}],[\"如下表\",{\"1\":{\"3608\":1}}],[\"如下图\",{\"1\":{\"1419\":1,\"1425\":1,\"1587\":1,\"1593\":1,\"1755\":1,\"1761\":1,\"1923\":1,\"1929\":1,\"4846\":1,\"4852\":1}}],[\"如下图所示\",{\"1\":{\"989\":1,\"3135\":1,\"3136\":1,\"3147\":1,\"3346\":1,\"4447\":1,\"4448\":1,\"4459\":1,\"4603\":1}}],[\"如下\",{\"1\":{\"479\":1,\"3930\":1}}],[\"如下所示\",{\"1\":{\"448\":1,\"451\":1,\"539\":1,\"3907\":1,\"3910\":1}}],[\"如ioexception\",{\"1\":{\"439\":1,\"3898\":1}}],[\"如nullpointerexception\",{\"1\":{\"436\":1,\"3895\":1}}],[\"如果出现两次\",{\"1\":{\"3568\":1}}],[\"如果出现前后两次查询到的记录数量不一样的情况\",{\"1\":{\"2825\":1,\"5203\":1}}],[\"如果出现前后两次读到的数据不一样的情况\",{\"1\":{\"2821\":1,\"5199\":1}}],[\"如果返回失败\",{\"1\":{\"3548\":1,\"5817\":1}}],[\"如果设置成功就表示加锁成功\",{\"1\":{\"3547\":1,\"5816\":1}}],[\"如果设计成继承关系的话\",{\"1\":{\"557\":1}}],[\"如果审核成功\",{\"1\":{\"3512\":1,\"5781\":1}}],[\"如果审核失败\",{\"1\":{\"3511\":1,\"5780\":1}}],[\"如果负责的活动和实验室科研冲突了怎么平衡\",{\"1\":{\"3430\":1,\"5710\":1}}],[\"如果向任务队列投放任务失败\",{\"1\":{\"3315\":1,\"4580\":1}}],[\"如果队列满了\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话\",{\"1\":{\"3302\":1,\"4567\":1}}],[\"如果执行程序已关闭\",{\"1\":{\"3302\":1,\"4567\":1}}],[\"如果执行失败\",{\"1\":{\"2175\":1,\"4297\":1}}],[\"如果这时没有新的任务提交\",{\"1\":{\"3294\":1,\"4558\":1}}],[\"如果这个位置为空\",{\"1\":{\"699\":1}}],[\"如果达到的话\",{\"1\":{\"3292\":1,\"3307\":1,\"4556\":1,\"4572\":1}}],[\"如果达到片段上限\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"如果无限制的创建\",{\"1\":{\"3283\":1,\"4547\":1}}],[\"如果能获取到\",{\"1\":{\"3271\":1,\"4499\":1}}],[\"如果读读之间互斥\",{\"1\":{\"3259\":1,\"4487\":1}}],[\"如果发现冲突了\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"如果发生了读写冲突的时候\",{\"1\":{\"2835\":1,\"5213\":1}}],[\"如果加锁的时间过长\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"如果抢到锁\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"如果线程竞争不激烈\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"如果线程的竞争很激励\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"如果线程不处于活动状态\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"如果线程请求分配的栈容量超过\",{\"1\":{\"208\":1}}],[\"如果localvariable对象不是一个大对象的话\",{\"1\":{\"3201\":1}}],[\"如果获取对象锁失败\",{\"1\":{\"3171\":1,\"4516\":1}}],[\"如果获取了锁就\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"如果获取了锁\",{\"1\":{\"3077\":1,\"4433\":1}}],[\"如果获取了就什么也不干\",{\"1\":{\"3075\":1,\"4431\":1}}],[\"如果锁的计数器为\",{\"1\":{\"3170\":1,\"4515\":1}}],[\"如果资源竞争非常激烈\",{\"1\":{\"3120\":1,\"4402\":1}}],[\"如果全部相等\",{\"1\":{\"3117\":1,\"4400\":1}}],[\"如果多次失败会有多次自旋\",{\"1\":{\"3101\":1,\"4381\":1}}],[\"如果因为冲突失败了就重试\",{\"1\":{\"3093\":1,\"4369\":1}}],[\"如果存在就唤醒自己的后继节点\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"如果存在一个值不为\",{\"1\":{\"3030\":1,\"5408\":1}}],[\"如果没获取就创造一个节点通过compareandsettail\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"如果没有则返回未认证错误\",{\"1\":{\"3482\":1,\"3493\":1,\"5751\":1,\"5762\":1}}],[\"如果没有则new一个对象来一个一个set\",{\"1\":{\"2169\":1,\"4291\":1}}],[\"如果没有的话\",{\"1\":{\"3348\":1,\"4606\":1}}],[\"如果没有获取锁\",{\"1\":{\"3076\":1,\"4432\":1}}],[\"如果没有设置主键且该表没有唯一非空索引时\",{\"1\":{\"2859\":1,\"5237\":1}}],[\"如果没有\",{\"1\":{\"2537\":1,\"2750\":1,\"5128\":1,\"5635\":1}}],[\"如果没有创建\",{\"1\":{\"821\":1,\"4030\":1}}],[\"如果没有指定\",{\"1\":{\"803\":1}}],[\"如果没有回收\",{\"1\":{\"266\":1}}],[\"如果被请求的共享资源被占用\",{\"1\":{\"3070\":1,\"4424\":1}}],[\"如果被请求的共享资源空闲\",{\"1\":{\"3070\":1,\"4424\":1}}],[\"如果被引用过一次\",{\"1\":{\"1332\":1}}],[\"如果它的后继节点是shared状态\",{\"1\":{\"3066\":1,\"4420\":1}}],[\"如果值都为\",{\"1\":{\"3030\":1,\"5408\":1}}],[\"如果非要用这种方式来解决穿透问题的话\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"如果黑客恶意攻击\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"如果缓存和数据库都查不到某个\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"如果缓存里的表格能找到\",{\"1\":{\"2537\":1,\"5635\":1}}],[\"如果假设你设置了一批\",{\"1\":{\"2992\":1,\"5370\":1}}],[\"如果至少有10000个key发生变化\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"如果至少有10个key发生变化\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"如果至少有1个key发生变化\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"如果哈希类型元素不满足上面条件\",{\"1\":{\"2946\":1,\"5324\":1}}],[\"如果哈希类型元素个数小于\",{\"1\":{\"2945\":1,\"5323\":1}}],[\"如果集合中的元素不满足上面条件\",{\"1\":{\"2939\":1,\"5317\":1}}],[\"如果集合中的元素都是整数且元素个数小于\",{\"1\":{\"2938\":1,\"5316\":1}}],[\"如果列表的元素不满足上面的条件\",{\"1\":{\"2931\":1,\"5309\":1}}],[\"如果列表的元素个数小于\",{\"1\":{\"2930\":1,\"5308\":1}}],[\"如果列表长度未知\",{\"1\":{\"721\":1}}],[\"如果空间不够会自动扩容\",{\"1\":{\"2922\":1,\"5300\":1}}],[\"如果该行未被更新\",{\"1\":{\"2858\":1,\"5236\":1}}],[\"如果该list是arraylist那么\",{\"1\":{\"791\":1}}],[\"如果说间隙锁锁住的是一个区间\",{\"1\":{\"2800\":1,\"5178\":1}}],[\"如果可以考虑\",{\"1\":{\"2739\":1,\"5117\":1}}],[\"如果可能\",{\"1\":{\"557\":1}}],[\"如果同时有很多个索引都可以用于查询\",{\"1\":{\"2669\":1,\"5047\":1}}],[\"如果同时需要根据索引位置进行操作\",{\"1\":{\"728\":1}}],[\"如果字段频繁被查询\",{\"1\":{\"2659\":1,\"5037\":1}}],[\"如果查询条件中存在与联合索引中最左侧字段相匹配的字段\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"如果一方的密钥被泄露\",{\"1\":{\"3653\":1}}],[\"如果一个表包含过多字段的话\",{\"1\":{\"2892\":1,\"5270\":1}}],[\"如果一个表的字段过多\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"如果一个事务\",{\"1\":{\"2816\":1,\"5194\":1}}],[\"如果一个事务获取了\",{\"1\":{\"2793\":1,\"5171\":1}}],[\"如果一个字段不被经常查询\",{\"1\":{\"2665\":1,\"5043\":1}}],[\"如果一个索引包含\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"如果一条\",{\"1\":{\"2650\":2,\"5028\":2}}],[\"如果一阶段某一节点失败仍会导致数据不正确\",{\"1\":{\"2053\":1,\"4658\":1}}],[\"如果对某个资源是读操作\",{\"1\":{\"3265\":1,\"4493\":1}}],[\"如果对于某个锁\",{\"1\":{\"3256\":1}}],[\"如果对索引列的数据被修改时\",{\"1\":{\"2638\":1,\"5016\":1}}],[\"如果对一棵有n个结点的完全二叉树的结点按层序编号\",{\"1\":{\"648\":1}}],[\"如果数据量特别大\",{\"1\":{\"3526\":1,\"5795\":1}}],[\"如果数据库的引擎支持的事务支持可重复读的隔离级别\",{\"1\":{\"2701\":1,\"5079\":1}}],[\"如果数据是整型还好\",{\"1\":{\"2637\":1,\"5015\":1}}],[\"如果数据和运算量很小\",{\"1\":{\"741\":1}}],[\"如果索引的数据不是有序的\",{\"1\":{\"2637\":1,\"5015\":1}}],[\"如果指定的\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"如果主机\",{\"1\":{\"2489\":1,\"5587\":1}}],[\"如果中途丢失了一个分片\",{\"1\":{\"2395\":1}}],[\"如果接收方的程序如果不知道\",{\"1\":{\"2353\":1}}],[\"如果需要回收核心线程数\",{\"1\":{\"3353\":1,\"4613\":1}}],[\"如果需要预热的话可以调用下面的两个方法\",{\"1\":{\"3349\":1,\"4607\":1}}],[\"如果需要保障网络数据包的可靠性\",{\"1\":{\"2346\":1}}],[\"如果需要生产新的类\",{\"1\":{\"519\":1,\"3970\":1}}],[\"如果已经建立了连接\",{\"1\":{\"2326\":1,\"2327\":1}}],[\"如果已经点赞则抛出异常\",{\"1\":{\"2169\":1,\"4291\":1}}],[\"如果操作的是相同数据\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"如果操作的是各自的数据的话\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"如果老数据没有动\",{\"1\":{\"2188\":1,\"4310\":1}}],[\"如果还有另一个重要的字段也需要查\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"如果mq服务器长时间没有收到生产者的commit或者rollback\",{\"1\":{\"2178\":1,\"4300\":1}}],[\"如果消息状态更新为可发送\",{\"1\":{\"2177\":1,\"4299\":1}}],[\"如果消费者消费失败\",{\"1\":{\"2179\":1,\"4301\":1}}],[\"如果消费者消费失败怎么办呢\",{\"1\":{\"2179\":1,\"4301\":1}}],[\"如果消费者在默认的5分钟内没有处理完这一批消息\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"如果消费组内\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"如果本地事务执行成功\",{\"1\":{\"2175\":1,\"4297\":1}}],[\"如果网络分区正常的话\",{\"1\":{\"2160\":1,\"4765\":1}}],[\"如果网卡支持\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"如果只是\",{\"1\":{\"2133\":1,\"4738\":1}}],[\"如果只需要deque接口\",{\"1\":{\"728\":1}}],[\"如果相同那么就\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"如果相同则比较\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"如果在同一个锁对象上\",{\"1\":{\"3256\":1}}],[\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\",{\"1\":{\"3078\":1,\"4434\":1}}],[\"如果在上面这种情况事务\",{\"1\":{\"2819\":1,\"5197\":1}}],[\"如果在整个集群运行的过程中\",{\"1\":{\"2127\":1,\"4732\":1}}],[\"如果在调用的时候显示的传入一个对象\",{\"1\":{\"803\":1}}],[\"如果超过半数以上的同意那么就进行\",{\"1\":{\"2117\":1,\"4722\":1}}],[\"如果此时事务\",{\"1\":{\"2818\":1,\"5196\":1}}],[\"如果此时有大量该表的\",{\"1\":{\"2736\":1,\"5114\":1}}],[\"如果此时集群中已经存在一个\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"如果此时再订阅一个分区数为4的topic\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"如果事物涉及的节点很多\",{\"1\":{\"2053\":1,\"4658\":1}}],[\"如果有一个预先计算好的常用口令和它们的\",{\"1\":{\"3608\":1}}],[\"如果有空闲线程\",{\"1\":{\"3310\":1,\"4575\":1}}],[\"如果有修改动作\",{\"1\":{\"3265\":1,\"4493\":1}}],[\"如果有序集合的元素不满足上面的条件\",{\"1\":{\"2954\":1,\"5332\":1}}],[\"如果有序集合的元素个数小于\",{\"1\":{\"2953\":1,\"5331\":1}}],[\"如果有其他事务在\",{\"1\":{\"2848\":1,\"5226\":1}}],[\"如果有其他线程执行了\",{\"1\":{\"2729\":1,\"5107\":1}}],[\"如果有其他线程要更改该表的结构\",{\"1\":{\"2728\":1,\"5106\":1}}],[\"如果有的话\",{\"1\":{\"2798\":1,\"5176\":1}}],[\"如果有就意味着表里已经有记录被加了独占锁\",{\"1\":{\"2751\":1,\"5129\":1}}],[\"如果有\",{\"1\":{\"2619\":1,\"3482\":1,\"3493\":1,\"4997\":1,\"5751\":1,\"5762\":1}}],[\"如果有多个表\",{\"0\":{\"2185\":1,\"4307\":1}}],[\"如果有新的事件发生时\",{\"1\":{\"1501\":1,\"1669\":1,\"1837\":1,\"2005\":1,\"4928\":1}}],[\"如果有同学需要使用\",{\"1\":{\"606\":1}}],[\"如果业务处理耗时比较长\",{\"1\":{\"1473\":1,\"1641\":1,\"1809\":1,\"1977\":1,\"4900\":1}}],[\"如果快递箱发现你的快递没有被取出\",{\"1\":{\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"4817\":1}}],[\"如果快递箱只会通过短信通知你一次\",{\"1\":{\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"4817\":1}}],[\"如果某块数据被访问\",{\"1\":{\"1331\":1}}],[\"如果订阅的topic列表是不同的\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"如果使用了\",{\"1\":{\"2389\":1}}],[\"如果使用边缘触发模式\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"如果使用水平触发模式\",{\"1\":{\"1392\":1,\"1560\":1,\"1728\":1,\"1896\":1,\"4819\":1}}],[\"如果使用可用分区\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"如果使用二进制的位运算的话就可以很好的避免这个问题\",{\"1\":{\"996\":1}}],[\"如果配置的是7个片段\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"如果成功获得\",{\"1\":{\"1058\":1,\"4091\":1}}],[\"如果恶意程序知道我们用的是hash算法\",{\"1\":{\"1018\":1}}],[\"如果模数是2的幂\",{\"1\":{\"1011\":1}}],[\"如果当前运行的线程数已经等同于最大线程数了\",{\"1\":{\"3316\":1,\"4581\":1}}],[\"如果当前运行的线程数等于或大于核心线程数\",{\"1\":{\"3314\":1,\"4579\":1}}],[\"如果当前运行的线程数小于核心线程数\",{\"1\":{\"3313\":1,\"4578\":1}}],[\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时\",{\"1\":{\"3300\":1,\"4565\":1}}],[\"如果当前线程竞争锁失败\",{\"1\":{\"3068\":1,\"4422\":1}}],[\"如果当前线程正在执行的是\",{\"1\":{\"199\":1}}],[\"如果当前没有事务\",{\"1\":{\"1099\":1,\"1100\":1,\"1101\":1,\"1107\":1,\"4132\":1,\"4133\":1,\"4134\":1,\"4140\":1}}],[\"如果当前存在事务\",{\"1\":{\"1099\":1,\"1100\":1,\"1101\":1,\"1103\":1,\"1104\":1,\"1105\":1,\"1107\":1,\"4132\":1,\"4133\":1,\"4134\":1,\"4136\":1,\"4137\":1,\"4138\":1,\"4140\":1}}],[\"如果当前hashtable的大小为16\",{\"1\":{\"989\":1}}],[\"如果让你设计这个方法\",{\"1\":{\"962\":1}}],[\"如果用户用户名\",{\"1\":{\"3480\":1,\"5749\":1}}],[\"如果用户通过构造函数指定了一个数字作为容量\",{\"1\":{\"932\":1}}],[\"如果用线程池来操作threadlocal\",{\"1\":{\"3201\":1}}],[\"如果用中文说\",{\"1\":{\"560\":1}}],[\"如果n为2次幂\",{\"1\":{\"877\":1,\"3985\":1}}],[\"如果目标对象实现了接口\",{\"1\":{\"858\":1,\"4067\":1}}],[\"如果要在查询时对记录加行锁\",{\"1\":{\"2773\":1,\"5151\":1}}],[\"如果要释放全局锁\",{\"1\":{\"2693\":1,\"5071\":1}}],[\"如果要克服\",{\"1\":{\"1477\":1,\"1645\":1,\"1813\":1,\"1981\":1,\"4904\":1}}],[\"如果要代理的对象\",{\"1\":{\"1046\":1,\"4079\":1}}],[\"如果要⽣成另⼀种产品\",{\"1\":{\"831\":1,\"4040\":1}}],[\"如果要保持添加的顺序\",{\"1\":{\"683\":1}}],[\"如果是登录\",{\"1\":{\"3479\":1,\"3490\":1,\"5748\":1,\"5759\":1}}],[\"如果是静态方法\",{\"1\":{\"3176\":1,\"4521\":1}}],[\"如果是实例方法\",{\"1\":{\"3176\":1,\"4521\":1}}],[\"如果是整型还好\",{\"1\":{\"3114\":1,\"4396\":1}}],[\"如果是则将其设置为\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"如果是则正常往下执行\",{\"1\":{\"3226\":1,\"4350\":1}}],[\"如果是则更改为新的值\",{\"1\":{\"3095\":1,\"4371\":1}}],[\"如果是则唤醒头节点的下一个节点\",{\"1\":{\"3066\":1,\"4420\":1}}],[\"如果是联合索引\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"如果是\",{\"1\":{\"2482\":1,\"5580\":1}}],[\"如果是rollback\",{\"1\":{\"2176\":1,\"4298\":1}}],[\"如果是commit正常提交\",{\"1\":{\"2176\":1,\"4298\":1}}],[\"如果是写请求则要转发给\",{\"1\":{\"2112\":1,\"4717\":1}}],[\"如果是读请求则可以自己处理\",{\"1\":{\"2112\":1,\"4717\":1}}],[\"如果是连接建立的事件\",{\"1\":{\"1467\":1,\"1482\":1,\"1635\":1,\"1650\":1,\"1803\":1,\"1818\":1,\"1971\":1,\"1986\":1,\"4894\":1,\"4909\":1}}],[\"如果是我们自己处理的话该怎么解决\",{\"1\":{\"1114\":1,\"4147\":1}}],[\"如果是第⼀次进⼊则为\",{\"1\":{\"821\":1,\"4030\":1}}],[\"如果是执行\",{\"1\":{\"199\":1}}],[\"如果实例已经存在\",{\"1\":{\"821\":1,\"4030\":1}}],[\"如果元素的数目超出了内部数组目前的长度它们都需要扩展内部数组的长度\",{\"1\":{\"795\":1}}],[\"如果遍历输出\",{\"1\":{\"732\":1}}],[\"如果插入的数据是随机的\",{\"1\":{\"658\":1,\"3999\":1}}],[\"如果2i＋1>n\",{\"1\":{\"651\":1}}],[\"如果2i>n\",{\"1\":{\"650\":1}}],[\"如果i>1\",{\"1\":{\"649\":1}}],[\"如果i＝1\",{\"1\":{\"649\":1}}],[\"如果其终端结点数为n0\",{\"1\":{\"646\":1}}],[\"如果大家在\",{\"1\":{\"534\":1}}],[\"如果想实现每一个线程都有自己的专属本地变量该如何解决呢\",{\"1\":{\"3184\":1,\"4529\":1}}],[\"如果想通过显式构造方法构造实例\",{\"1\":{\"510\":1,\"3961\":1}}],[\"如果想打破双亲委派模型则需要重写\",{\"1\":{\"413\":1,\"3868\":1}}],[\"如果哪天你发现用linkedhashmap效果更好\",{\"1\":{\"482\":1,\"3933\":1}}],[\"如果try中有return语句\",{\"1\":{\"461\":1}}],[\"如果代码可能会引发某种错误\",{\"1\":{\"451\":1,\"3910\":1}}],[\"如果不使用线程池\",{\"1\":{\"3339\":1,\"4596\":1}}],[\"如果不想丢弃任务的话\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"如果不好理解\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"如果不存在就获取等待时间最长的符合条件的线程\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"如果不是主键索引\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"如果不是连接建立事件\",{\"1\":{\"1468\":1,\"1483\":1,\"1636\":1,\"1651\":1,\"1804\":1,\"1819\":1,\"1972\":1,\"1987\":1,\"4895\":1,\"4910\":1}}],[\"如果不指定\",{\"1\":{\"921\":1}}],[\"如果不为空\",{\"1\":{\"699\":1}}],[\"如果不对其捕获\",{\"1\":{\"448\":1,\"3907\":1}}],[\"如果不处理\",{\"1\":{\"439\":1,\"3898\":1}}],[\"如果我们想对学生表\",{\"1\":{\"2714\":1,\"5092\":1}}],[\"如果我们要继续服务\",{\"1\":{\"2155\":1,\"4760\":1}}],[\"如果我们要自定义自己的类加载器\",{\"1\":{\"406\":1,\"3861\":1}}],[\"如果我们不想打破双亲委派模型\",{\"1\":{\"413\":1,\"3868\":1}}],[\"如果为了保证\",{\"1\":{\"2158\":1,\"4763\":1}}],[\"如果为\",{\"1\":{\"408\":1,\"3863\":1}}],[\"如果每次回收有多于\",{\"1\":{\"335\":1}}],[\"如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值\",{\"1\":{\"292\":1}}],[\"如果再次经历垃圾回收\",{\"1\":{\"267\":1}}],[\"如果再次触发垃圾回收\",{\"1\":{\"266\":1}}],[\"如果分配的对象超过了\",{\"1\":{\"260\":1}}],[\"如果堆的内存大小超过\",{\"1\":{\"246\":1}}],[\"如果堆中没有完成实例分配\",{\"1\":{\"229\":1}}],[\"如果\",{\"1\":{\"209\":1,\"421\":1,\"583\":1,\"1433\":1,\"1601\":1,\"1769\":1,\"1937\":1,\"2134\":1,\"2864\":1,\"3546\":2,\"3878\":1,\"4739\":1,\"4860\":1,\"5242\":1,\"5815\":2}}],[\"如果采用固定大小的\",{\"1\":{\"208\":1}}],[\"如果你创建了一个threadlocal变量\",{\"1\":{\"3186\":1,\"4531\":1}}],[\"如果你追溯\",{\"1\":{\"1432\":1,\"1600\":1,\"1768\":1,\"1936\":1,\"4859\":1}}],[\"如果你可以下载\",{\"1\":{\"1137\":1,\"4170\":1}}],[\"如果你的业务有海量消息\",{\"1\":{\"3538\":1,\"5807\":1}}],[\"如果你的业务场景足够简单\",{\"1\":{\"3537\":1,\"5806\":1}}],[\"如果你的程序本身是线程安全的\",{\"1\":{\"742\":1}}],[\"如果你的资源实现了\",{\"1\":{\"454\":1,\"3913\":1}}],[\"如果你想使用栈这种数据结构\",{\"1\":{\"536\":1}}],[\"如果你不了解它\",{\"1\":{\"35\":1,\"3689\":1}}],[\"如果你是一个新手\",{\"1\":{\"31\":1,\"3685\":1}}],[\"优化四\",{\"0\":{\"3473\":1,\"5742\":1}}],[\"优化三\",{\"0\":{\"3469\":1,\"5738\":1}}],[\"优化二\",{\"0\":{\"3463\":1,\"5732\":1}}],[\"优化一\",{\"0\":{\"3459\":1,\"5728\":1}}],[\"优化\",{\"0\":{\"3458\":1,\"5727\":1}}],[\"优化器生成执行计划的时间\",{\"1\":{\"2669\":1,\"5047\":1}}],[\"优化器在选择如何优化查询时\",{\"1\":{\"2669\":1,\"5047\":1}}],[\"优化了高位运算的算法\",{\"1\":{\"1021\":1}}],[\"优化了存储\",{\"1\":{\"758\":1}}],[\"优势在于范围查找\",{\"1\":{\"2604\":1,\"4982\":1}}],[\"优缺点\",{\"1\":{\"2059\":1,\"4664\":1}}],[\"优先选择符合存储需要的最小的数据类型\",{\"0\":{\"2884\":1,\"5262\":1}}],[\"优先保证第一个目标\",{\"1\":{\"1289\":1,\"5481\":1}}],[\"优先考虑hashmap\",{\"1\":{\"1039\":1}}],[\"优先级可以有相同的\",{\"1\":{\"732\":1}}],[\"优先回收价值最大的\",{\"1\":{\"375\":1}}],[\"优点\",{\"1\":{\"427\":1,\"821\":1,\"2061\":1,\"2633\":1,\"2642\":1,\"3269\":1,\"3272\":1,\"3884\":1,\"4030\":1,\"4497\":1,\"4500\":1,\"4666\":1,\"5011\":1,\"5020\":1}}],[\"时为非公平锁\",{\"1\":{\"3217\":1,\"4341\":1}}],[\"时为公平锁\",{\"1\":{\"3217\":1,\"4341\":1}}],[\"时的活跃事务列表\",{\"1\":{\"2861\":1,\"5239\":1}}],[\"时加上\",{\"1\":{\"2703\":1,\"5081\":1}}],[\"时候参数\",{\"0\":{\"2445\":1},\"1\":{\"2330\":1}}],[\"时就会触发扩容\",{\"1\":{\"941\":1}}],[\"时就会自动扩容\",{\"1\":{\"938\":1}}],[\"时间上将大大减少\",{\"1\":{\"3608\":1}}],[\"时间戳作为score进行排序\",{\"1\":{\"3518\":1,\"5787\":1}}],[\"时间及锁的拥有者的状态来决定的\",{\"1\":{\"3256\":1}}],[\"时间的影响\",{\"1\":{\"2995\":1,\"5373\":1}}],[\"时间局部性是指如果程序中的某条指令一旦执行\",{\"1\":{\"1331\":1}}],[\"时间局部性和空间局部性\",{\"1\":{\"1331\":1}}],[\"时间和大小不论那个满足条件\",{\"1\":{\"1252\":1,\"5444\":1}}],[\"时间复杂度都是o\",{\"1\":{\"669\":1,\"4011\":1}}],[\"时间复杂度为o\",{\"1\":{\"658\":1,\"3999\":1}}],[\"时间复杂度是o\",{\"1\":{\"658\":1,\"3999\":1}}],[\"时间复杂度是\",{\"1\":{\"596\":1}}],[\"时间内完成查找\",{\"1\":{\"656\":1,\"3997\":1}}],[\"时间是用户可控制的\",{\"1\":{\"380\":1}}],[\"时传入构造方法参数的值\",{\"1\":{\"509\":1,\"3960\":1}}],[\"时\",{\"1\":{\"426\":1,\"1133\":1,\"2341\":1,\"2342\":1,\"2343\":1,\"2344\":1,\"2750\":1,\"2751\":1,\"2770\":1,\"2793\":1,\"2794\":1,\"2903\":1,\"3245\":1,\"3317\":1,\"3883\":1,\"4166\":1,\"4475\":1,\"5128\":1,\"5129\":1,\"5148\":1,\"5171\":1,\"5172\":1,\"5281\":1}}],[\"非对称密钥也叫公开密钥加密\",{\"1\":{\"3647\":1}}],[\"非对称加密缺点\",{\"1\":{\"3655\":1}}],[\"非对称加密优点\",{\"1\":{\"3654\":1}}],[\"非对称加密\",{\"1\":{\"3642\":1}}],[\"非公平锁\",{\"0\":{\"3267\":1,\"4495\":1},\"1\":{\"3271\":1,\"4499\":1}}],[\"非精准浮点\",{\"1\":{\"2887\":1,\"5265\":1}}],[\"非叶子节点只有指针和\",{\"1\":{\"2602\":1,\"4980\":1}}],[\"非聚集索引\",{\"1\":{\"2598\":1,\"2608\":1,\"4976\":1,\"4986\":1}}],[\"非聚簇索引也依赖于有序的数据\",{\"1\":{\"2645\":1,\"5023\":1}}],[\"非聚簇索引的叶子节点是不存放数据的\",{\"1\":{\"2643\":1,\"5021\":1}}],[\"非聚簇索引的叶子节点并不一定存放数据的指针\",{\"1\":{\"2641\":1,\"5019\":1}}],[\"非聚簇索引的更新代价就没有聚簇索引那么大了\",{\"1\":{\"2643\":1,\"5021\":1}}],[\"非聚簇索引\",{\"0\":{\"2639\":1,\"5017\":1},\"1\":{\"2598\":1,\"2608\":1,\"2640\":1,\"4976\":1,\"4986\":1,\"5018\":1}}],[\"非冗余和按序的\",{\"1\":{\"2347\":1}}],[\"非故障的节点在合理的时间内返回合理的响应\",{\"1\":{\"2149\":1,\"4754\":1}}],[\"非常不灵活\",{\"1\":{\"840\":1,\"4049\":1}}],[\"非运行时异常\",{\"1\":{\"438\":1,\"3897\":1}}],[\"非空父类的类加载器无法找到相应的类\",{\"1\":{\"421\":1,\"3878\":1}}],[\"非堆\",{\"1\":{\"241\":1,\"280\":1}}],[\"逻辑非常清晰\",{\"1\":{\"420\":1,\"3877\":1}}],[\"启动两台heima\",{\"1\":{\"3541\":1,\"5810\":1}}],[\"启动事务时\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"启动发现集群没有处于\",{\"1\":{\"2126\":1,\"4731\":1}}],[\"启动了\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"启动时需要进行系统的\",{\"1\":{\"2123\":1,\"4728\":1}}],[\"启动项目\",{\"1\":{\"1178\":1,\"4211\":1}}],[\"启动类加载器\",{\"1\":{\"402\":1,\"3857\":1}}],[\"启动的时候\",{\"1\":{\"398\":1,\"3853\":1}}],[\"启动的时候就确定了\",{\"1\":{\"243\":1}}],[\"b=3\",{\"1\":{\"3101\":1,\"4381\":1}}],[\"bgsave\",{\"1\":{\"2970\":1,\"5348\":1}}],[\"btree\",{\"1\":{\"2602\":2,\"4980\":2}}],[\"b+\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"b+树是多路平衡树\",{\"1\":{\"2637\":1,\"5015\":1}}],[\"b+树本身就是一颗多叉平衡树\",{\"1\":{\"2634\":1,\"5012\":1}}],[\"b+树的检索效率就很稳定了\",{\"1\":{\"2596\":1,\"4974\":1}}],[\"b+树的叶子节点有一条引用链指向与它相邻的叶子节点\",{\"1\":{\"2595\":1,\"4973\":1}}],[\"b+树只有叶子节点存放\",{\"1\":{\"2594\":1,\"4972\":1}}],[\"b+树两者有何异同呢\",{\"1\":{\"2593\":1,\"4971\":1}}],[\"b+树中的\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"b+树\",{\"1\":{\"2590\":1,\"2632\":1,\"2671\":1,\"4968\":1,\"5010\":1,\"5049\":1}}],[\"b+tree\",{\"1\":{\"2581\":1,\"2582\":1,\"2592\":1,\"2597\":1,\"2598\":2,\"2599\":1,\"2602\":1,\"4959\":1,\"4960\":1,\"4970\":1,\"4975\":1,\"4976\":2,\"4977\":1,\"4980\":1}}],[\"bus\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"buf\",{\"1\":{\"1405\":2,\"1573\":2,\"1741\":2,\"1909\":2,\"2920\":1,\"2974\":1,\"4832\":2,\"5298\":1,\"5352\":1}}],[\"bufferedreader\",{\"1\":{\"457\":2}}],[\"b的成品创建又依赖于\",{\"1\":{\"1124\":1,\"4157\":1}}],[\"b\",{\"1\":{\"1116\":1,\"1118\":4,\"1124\":1,\"1128\":1,\"1129\":2,\"1133\":1,\"2476\":1,\"2478\":1,\"2479\":2,\"2481\":2,\"2482\":1,\"2483\":2,\"2485\":1,\"2488\":1,\"2491\":3,\"2493\":1,\"2494\":1,\"2495\":1,\"2496\":1,\"2497\":2,\"2498\":1,\"2590\":1,\"2591\":5,\"2592\":1,\"2593\":1,\"2594\":1,\"2595\":1,\"2596\":1,\"2673\":1,\"2734\":1,\"2807\":6,\"2818\":3,\"2819\":1,\"2823\":2,\"2827\":2,\"2829\":1,\"3102\":1,\"3103\":1,\"3113\":1,\"3385\":1,\"4149\":1,\"4151\":4,\"4157\":1,\"4161\":1,\"4162\":2,\"4166\":1,\"4383\":1,\"4385\":1,\"4395\":1,\"4968\":1,\"4969\":5,\"4970\":1,\"4971\":1,\"4972\":1,\"4973\":1,\"4974\":1,\"5051\":1,\"5112\":1,\"5185\":6,\"5196\":3,\"5197\":1,\"5201\":2,\"5205\":2,\"5207\":1,\"5574\":1,\"5576\":1,\"5577\":2,\"5579\":2,\"5580\":1,\"5581\":2,\"5583\":1,\"5586\":1,\"5589\":3,\"5591\":1,\"5592\":1,\"5593\":1,\"5594\":1,\"5595\":2,\"5596\":1,\"5665\":1}}],[\"biz=mjm5njq5mti5oa==\",{\"1\":{\"3361\":1,\"4615\":1}}],[\"biz=mzaxnte2njeymw==\",{\"1\":{\"3155\":1,\"4470\":1}}],[\"biz=mzu0ote4mzyzmw==\",{\"1\":{\"3130\":1,\"4365\":1}}],[\"biz=mzg2ota0njk0oa==\",{\"1\":{\"1154\":1,\"4187\":1}}],[\"bitmap\",{\"1\":{\"2914\":1,\"5292\":1}}],[\"bits\",{\"1\":{\"1014\":1,\"1028\":1}}],[\"bigint\",{\"1\":{\"2889\":1,\"5267\":1}}],[\"binlog\",{\"1\":{\"2768\":1,\"2769\":2,\"2770\":1,\"5146\":1,\"5147\":2,\"5148\":1}}],[\"binary\",{\"1\":{\"2510\":1,\"5608\":1}}],[\"bindingresult\",{\"1\":{\"1063\":1,\"4096\":1}}],[\"bounds\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"both\",{\"1\":{\"1014\":1}}],[\"boor\",{\"1\":{\"1189\":1,\"4222\":1}}],[\"boot快速开发框架\",{\"1\":{\"3450\":1,\"5719\":1}}],[\"boot风格进行再封装屏蔽掉了复杂的配置和实现原理\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"boot的开发风格做到一键启动和部署\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"boot的开发便利性巧妙地简化了分布式系统基础设施的开发\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"boot的监控插件\",{\"1\":{\"1201\":1,\"4234\":1}}],[\"boot的客户端工具\",{\"1\":{\"1196\":1,\"4229\":1}}],[\"boot项目\",{\"1\":{\"1199\":1,\"4232\":1}}],[\"boot项目的自动化配置\",{\"1\":{\"1162\":1,\"4195\":1}}],[\"boot四大核心组件\",{\"0\":{\"1193\":1,\"4226\":1}}],[\"boot提供的spring\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"boot自带监控组件\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"boot自动配置原理\",{\"0\":{\"1138\":1,\"4171\":1}}],[\"boot<\",{\"1\":{\"1169\":1,\"4202\":1}}],[\"bootstrap配置文件有以下几个应用场景\",{\"1\":{\"1163\":1,\"4196\":1}}],[\"bootstrapclassloader\",{\"1\":{\"402\":1,\"425\":1,\"3857\":1,\"3882\":1}}],[\"boot\",{\"0\":{\"1043\":1,\"1149\":1,\"1153\":1,\"1180\":1,\"4076\":1,\"4182\":1,\"4186\":1,\"4213\":1},\"1\":{\"1139\":2,\"1140\":1,\"1144\":3,\"1146\":1,\"1148\":1,\"1168\":3,\"1169\":1,\"1178\":1,\"1179\":1,\"1181\":3,\"1183\":1,\"1184\":1,\"1185\":1,\"1186\":2,\"1196\":1,\"3445\":1,\"4172\":2,\"4173\":1,\"4177\":3,\"4179\":1,\"4181\":1,\"4201\":3,\"4202\":1,\"4211\":1,\"4212\":1,\"4214\":3,\"4216\":1,\"4217\":1,\"4218\":1,\"4219\":2,\"4229\":1,\"5714\":1}}],[\"boolean\",{\"1\":{\"408\":1,\"412\":1,\"421\":1,\"3217\":2,\"3863\":1,\"3867\":1,\"3878\":1,\"4341\":2}}],[\"bed128365216c019988915ed3add75fb\",{\"1\":{\"3616\":1}}],[\"bearer\",{\"1\":{\"3485\":1,\"5754\":1}}],[\"beans\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"bean加载情况\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"bean的生命周期\",{\"0\":{\"1051\":1,\"4084\":1}}],[\"bean\",{\"1\":{\"826\":1,\"1069\":1,\"1071\":1,\"1124\":1,\"1132\":1,\"2087\":1,\"4035\":1,\"4102\":1,\"4104\":1,\"4157\":1,\"4165\":1,\"4692\":1}}],[\"beanfactory\",{\"1\":{\"826\":1,\"1069\":1,\"4035\":1,\"4102\":1}}],[\"been\",{\"1\":{\"3356\":1,\"3358\":1}}],[\"because\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"before\",{\"1\":{\"3288\":2,\"4552\":2}}],[\"before规则中的volatile变量规则规定了一个线程先去写一个volatile变量\",{\"1\":{\"3140\":1,\"4453\":1}}],[\"begin\",{\"1\":{\"2775\":1,\"5153\":1}}],[\"between\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"be\",{\"1\":{\"999\":1}}],[\"byte\",{\"1\":{\"1263\":2,\"5455\":2}}],[\"by\",{\"1\":{\"749\":1,\"2903\":2,\"3288\":1,\"4552\":1,\"5281\":2}}],[\"blog\",{\"1\":{\"520\":1,\"592\":1,\"607\":1,\"653\":1,\"868\":1,\"897\":1,\"1209\":1,\"1242\":1,\"1295\":3,\"1304\":5,\"1318\":1,\"2877\":1,\"3056\":1,\"3218\":1,\"3276\":1,\"3656\":2,\"3888\":1,\"3971\":1,\"3976\":1,\"4242\":1,\"4275\":1,\"4342\":1,\"4504\":1,\"5255\":1,\"5434\":1,\"5487\":3,\"5496\":5,\"5510\":1}}],[\"blockingqueue<runnable>\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"blocking\",{\"1\":{\"2516\":2,\"5614\":2}}],[\"blocked\",{\"1\":{\"1346\":1,\"1514\":1,\"1682\":1,\"1850\":1,\"3288\":1,\"4552\":1,\"4773\":1}}],[\"block\",{\"1\":{\"457\":1}}],[\"broadcast\",{\"1\":{\"2102\":1,\"2108\":1,\"4707\":1,\"4713\":1}}],[\"broker\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"broker默认的消息保留策略是\",{\"1\":{\"1248\":1,\"5440\":1}}],[\"break\",{\"1\":{\"457\":1}}],[\"br\",{\"1\":{\"457\":9}}],[\"balanced\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"balance机制\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"baidulandingword~default\",{\"1\":{\"1295\":1,\"5487\":1}}],[\"batch\",{\"1\":{\"1238\":1,\"4271\":1}}],[\"basic\",{\"1\":{\"1033\":1}}],[\"basics\",{\"1\":{\"1033\":1}}],[\"backlog\",{\"0\":{\"2445\":1},\"1\":{\"2330\":1}}],[\"backing\",{\"1\":{\"749\":1}}],[\"backward\",{\"1\":{\"563\":1}}],[\"baddotrobot\",{\"1\":{\"592\":1}}],[\"baz\",{\"0\":{\"164\":1,\"3813\":1},\"1\":{\"144\":1,\"162\":1,\"3798\":1,\"3811\":1}}],[\"barrier来说\",{\"1\":{\"3145\":1,\"3146\":1,\"4457\":1,\"4458\":1}}],[\"barrier即读屏障和写屏障\",{\"1\":{\"3144\":1,\"4456\":1}}],[\"barrier\",{\"1\":{\"1356\":1,\"1524\":1,\"1692\":1,\"1860\":1,\"3144\":1,\"3145\":1,\"3146\":1,\"4456\":1,\"4457\":1,\"4458\":1,\"4783\":1}}],[\"bar\",{\"0\":{\"143\":1,\"158\":1,\"3797\":1,\"3807\":1},\"1\":{\"160\":1,\"3809\":1}}],[\"到备库执行的时候\",{\"1\":{\"2769\":1,\"5147\":1}}],[\"到此\",{\"1\":{\"2495\":1,\"5593\":1}}],[\"到用户空间\",{\"1\":{\"1406\":1,\"1574\":1,\"1742\":1,\"1910\":1,\"4833\":1}}],[\"到第五天的时候消息达到了\",{\"1\":{\"1252\":1,\"5444\":1}}],[\"到底synchronizedlist和vector有没有区别\",{\"1\":{\"768\":1}}],[\"到底应该是\",{\"1\":{\"555\":1}}],[\"到\",{\"1\":{\"396\":1,\"3851\":1}}],[\"数学建模比赛中遇到的最大困难\",{\"1\":{\"3414\":1,\"5694\":1}}],[\"数最多为\",{\"1\":{\"2371\":1}}],[\"数量越多的时候\",{\"1\":{\"1383\":1,\"1551\":1,\"1719\":1,\"1887\":1,\"4810\":1}}],[\"数量相同\",{\"1\":{\"353\":1}}],[\"数据满足完整性约束\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"数据表的主键列使用的就是主键索引\",{\"1\":{\"2617\":1,\"4995\":1}}],[\"数据类型底层数据结构就只由\",{\"1\":{\"2932\":1,\"5310\":1}}],[\"数据类型\",{\"1\":{\"2604\":1,\"4982\":1}}],[\"数据\",{\"1\":{\"2594\":1,\"3000\":1,\"4972\":1,\"5378\":1}}],[\"数据库\",{\"0\":{\"5851\":1}}],[\"数据库和缓存数据强一致场景\",{\"1\":{\"3462\":1,\"5731\":1}}],[\"数据库的压力可想而知\",{\"1\":{\"3043\":1,\"5421\":1}}],[\"数据库只存储文件地址信息\",{\"1\":{\"2883\":1,\"5261\":1}}],[\"数据库允许多个并发事务同时对其数据进行读写和修改的能力\",{\"1\":{\"2808\":1,\"5186\":1}}],[\"数据库保持一致性状态\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"数据库会自动给主键赋值递增的值\",{\"1\":{\"2755\":1,\"5133\":1}}],[\"数据库较难优化\",{\"1\":{\"2659\":1,\"5037\":1}}],[\"数据库重新启动的时候会保证数据库恢复到崩溃前的状态\",{\"1\":{\"2576\":1,\"4954\":1}}],[\"数据库控制台以更好地测试应用程序\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"数据报重新封装成链路层帧\",{\"1\":{\"2498\":1,\"5596\":1}}],[\"数据报转发到与主机\",{\"1\":{\"2494\":1,\"5592\":1}}],[\"数据报\",{\"1\":{\"2493\":1,\"5591\":1}}],[\"数据报文时\",{\"1\":{\"2477\":1,\"5575\":1}}],[\"数据报文\",{\"1\":{\"2476\":1,\"5574\":1}}],[\"数据报在物理上传输的过程中\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"数据包\",{\"1\":{\"2395\":1}}],[\"数据可以无差错\",{\"1\":{\"2383\":1}}],[\"数据字节数\",{\"1\":{\"2338\":1}}],[\"数据有更新时\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"数据存储+事件监听\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"数据监控等\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"数据拷贝\",{\"1\":{\"1402\":1,\"1570\":1,\"1738\":1,\"1906\":1,\"4829\":1}}],[\"数据保存的策略\",{\"0\":{\"1244\":1,\"5436\":1}}],[\"数据保持一致\",{\"1\":{\"1081\":1,\"4114\":1}}],[\"数据验证\",{\"1\":{\"1063\":1,\"4096\":1}}],[\"数据格式化\",{\"1\":{\"1062\":1,\"4095\":1}}],[\"数据转换\",{\"1\":{\"1061\":1,\"4094\":1}}],[\"数据增长区别\",{\"1\":{\"793\":1}}],[\"数据结构来实现了\",{\"1\":{\"2947\":1,\"2955\":1,\"5325\":1,\"5333\":1}}],[\"数据结构及适用场景\",{\"0\":{\"2915\":1,\"5293\":1}}],[\"数据结构\",{\"0\":{\"521\":1,\"2917\":1,\"2928\":1,\"2936\":1,\"2943\":1,\"2951\":1,\"3989\":1,\"5295\":1,\"5306\":1,\"5314\":1,\"5321\":1,\"5329\":1},\"1\":{\"727\":1}}],[\"数组里的数据\",{\"1\":{\"2920\":1,\"5298\":1}}],[\"数组中的每个元素只访问一次\",{\"1\":{\"1336\":1}}],[\"数组的每个成员是一个链表\",{\"1\":{\"956\":1}}],[\"数组的特点是\",{\"1\":{\"954\":1}}],[\"数组和链表\",{\"1\":{\"954\":1}}],[\"数组\",{\"0\":{\"522\":1,\"3990\":1}}],[\"数组类没有对应的二进制字节流\",{\"1\":{\"395\":1,\"3850\":1}}],[\"数组类不是通过\",{\"1\":{\"395\":1,\"3850\":1}}],[\"连行级锁都不支持\",{\"1\":{\"2579\":1,\"4957\":1}}],[\"连接到一起\",{\"1\":{\"3629\":1,\"3635\":1}}],[\"连接建立\",{\"1\":{\"2515\":1,\"5613\":1}}],[\"连接方式\",{\"1\":{\"2504\":1,\"5602\":1}}],[\"连接结束\",{\"1\":{\"2460\":1,\"2553\":1,\"5558\":1}}],[\"连接数远不能达到理论上限\",{\"1\":{\"2372\":1}}],[\"连接数\",{\"1\":{\"2371\":1}}],[\"连接中出现异常必须强制断开连接\",{\"1\":{\"2342\":1}}],[\"连接吗\",{\"0\":{\"2448\":1,\"2449\":1},\"1\":{\"2333\":1,\"2334\":1}}],[\"连接是断开的流程是什么\",{\"0\":{\"2447\":1},\"1\":{\"2332\":1}}],[\"连接时\",{\"0\":{\"2421\":1},\"1\":{\"2306\":1}}],[\"连接呢\",{\"0\":{\"2360\":1},\"1\":{\"2299\":1}}],[\"连接\",{\"0\":{\"2354\":1},\"1\":{\"2298\":1,\"2376\":1,\"2456\":1,\"2516\":1,\"2549\":1,\"5554\":1,\"5614\":1}}],[\"连接过程又可分为三步\",{\"1\":{\"390\":1,\"3844\":1}}],[\"连线表示垃圾收集器可以配合使用\",{\"1\":{\"342\":1}}],[\">runworker\",{\"1\":{\"3319\":1}}],[\">8\",{\"1\":{\"932\":1}}],[\">16\",{\"1\":{\"932\":1}}],[\">1\",{\"1\":{\"932\":1}}],[\">a\",{\"1\":{\"869\":1,\"3977\":1}}],[\">c\",{\"1\":{\"869\":1,\"3977\":1}}],[\">b\",{\"1\":{\"869\":2,\"3977\":2}}],[\">=\",{\"1\":{\"788\":1,\"2654\":1,\"5032\":1}}],[\">>>\",{\"1\":{\"968\":4,\"987\":4,\"1014\":4,\"1020\":1,\"1021\":1,\"1028\":1}}],[\">>\",{\"1\":{\"763\":1,\"976\":1}}],[\">\",{\"1\":{\"408\":1,\"421\":1,\"501\":1,\"505\":1,\"508\":2,\"515\":2,\"517\":2,\"764\":1,\"774\":3,\"778\":1,\"786\":1,\"788\":1,\"851\":1,\"925\":1,\"930\":3,\"943\":1,\"1053\":8,\"1132\":1,\"1263\":1,\"1272\":1,\"1437\":2,\"1469\":2,\"1491\":1,\"1502\":2,\"1605\":2,\"1637\":2,\"1659\":1,\"1670\":2,\"1773\":2,\"1805\":2,\"1827\":1,\"1838\":2,\"1941\":2,\"1973\":2,\"1995\":1,\"2006\":2,\"2654\":1,\"3196\":1,\"3203\":1,\"3319\":1,\"3863\":1,\"3878\":1,\"3952\":1,\"3956\":1,\"3959\":2,\"3966\":2,\"3968\":2,\"4060\":1,\"4086\":8,\"4165\":1,\"4540\":1,\"4864\":2,\"4896\":2,\"4918\":1,\"4929\":2,\"5032\":1,\"5455\":1,\"5464\":1}}],[\">解析\",{\"1\":{\"390\":1,\"3844\":1}}],[\">准备\",{\"1\":{\"390\":1,\"3844\":1}}],[\">初始化\",{\"1\":{\"390\":1,\"3844\":1}}],[\">连接\",{\"1\":{\"390\":1,\"3844\":1}}],[\"系统通过用户名找到与之对应的\",{\"1\":{\"3634\":1}}],[\"系统将\",{\"1\":{\"3629\":1,\"3635\":1}}],[\"系统为用户生成\",{\"1\":{\"3628\":1}}],[\"系统会用大部分的时间来处理\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"系统会首先判断当前类是否被加载过\",{\"1\":{\"399\":1,\"424\":1,\"3854\":1,\"3881\":1}}],[\"系统直接提供了一些函数用于对文件和设备进行访问和控制\",{\"1\":{\"2984\":1,\"5362\":1}}],[\"系统内核缓存区的数据还未同步\",{\"1\":{\"2975\":1,\"5353\":1}}],[\"系统内存大小\",{\"1\":{\"251\":2}}],[\"系统中查看\",{\"0\":{\"2419\":1},\"1\":{\"2304\":1}}],[\"系统中的某个节点在进行写操作\",{\"1\":{\"2158\":1,\"4763\":1}}],[\"系统在绝大部分时候所处的状态\",{\"1\":{\"2160\":1,\"4765\":1}}],[\"系统支持\",{\"1\":{\"1433\":1,\"1601\":1,\"1769\":1,\"1937\":1,\"4860\":1}}],[\"系统调用再做一遍解释\",{\"1\":{\"2985\":1,\"5363\":1}}],[\"系统调用\",{\"1\":{\"1433\":1,\"1601\":1,\"1769\":1,\"1937\":1,\"2980\":1,\"2981\":1,\"2984\":1,\"4860\":1,\"5358\":1,\"5359\":1,\"5362\":1}}],[\"系统调用的过程发生了点变化\",{\"1\":{\"1422\":1,\"1590\":1,\"1758\":1,\"1926\":1,\"4849\":1}}],[\"系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里\",{\"1\":{\"1404\":1,\"1572\":1,\"1740\":1,\"1908\":1,\"4831\":1}}],[\"系统调用函数会直接把内核缓冲区里的数据\",{\"1\":{\"1406\":1,\"1574\":1,\"1742\":1,\"1910\":1,\"4833\":1}}],[\"系统调用函数\",{\"1\":{\"1404\":1,\"1433\":1,\"1572\":1,\"1601\":1,\"1740\":1,\"1769\":1,\"1908\":1,\"1937\":1,\"4831\":1,\"4860\":1}}],[\"系统调用也是有一定的开销的的\",{\"1\":{\"1394\":1,\"1562\":1,\"1730\":1,\"1898\":1,\"4821\":1}}],[\"系统变量所指定的路径下的所有类\",{\"1\":{\"403\":1,\"3858\":1}}],[\"系统加载\",{\"1\":{\"390\":1,\"3844\":1}}],[\"u\",{\"1\":{\"3128\":1,\"4410\":1}}],[\"up\",{\"1\":{\"2861\":1,\"2864\":2,\"5239\":1,\"5242\":2}}],[\"update等语句\",{\"1\":{\"2691\":1,\"5069\":1}}],[\"update\",{\"1\":{\"1221\":1,\"1235\":1,\"2747\":1,\"2774\":1,\"2848\":2,\"2872\":1,\"4254\":1,\"4268\":1,\"5125\":1,\"5152\":1,\"5226\":2,\"5250\":1}}],[\"uuid\",{\"1\":{\"2637\":1,\"5015\":1}}],[\"udp\",{\"0\":{\"2375\":1,\"2397\":1,\"2410\":1,\"2467\":1,\"5565\":1},\"1\":{\"2300\":1,\"2301\":1,\"2351\":1,\"2374\":1,\"2378\":1,\"2381\":1,\"2384\":3,\"2387\":2,\"2390\":1,\"2393\":1,\"2396\":1,\"2401\":2,\"2406\":1,\"2407\":2,\"2408\":1,\"2409\":2,\"2413\":1,\"2414\":3,\"2415\":2,\"2416\":1,\"2514\":2,\"5530\":3,\"5612\":2}}],[\"utm\",{\"1\":{\"1295\":2,\"1304\":3,\"5487\":2,\"5496\":3}}],[\"utils\",{\"1\":{\"1263\":4,\"5455\":4}}],[\"util包中的一个类\",{\"1\":{\"766\":1}}],[\"util\",{\"1\":{\"492\":2,\"501\":1,\"505\":1,\"508\":1,\"766\":1,\"3108\":1,\"3200\":3,\"3286\":4,\"3943\":2,\"3952\":1,\"3956\":1,\"3959\":1,\"4390\":1,\"4550\":4}}],[\"uri\",{\"1\":{\"1057\":2,\"4090\":2}}],[\"url\",{\"1\":{\"1057\":1,\"2520\":3,\"4090\":1,\"5618\":3}}],[\"used\",{\"1\":{\"3002\":1,\"3005\":1,\"3009\":1,\"3010\":1,\"5380\":1,\"5383\":1,\"5387\":1,\"5388\":1}}],[\"username\",{\"1\":{\"3595\":1,\"3601\":1}}],[\"username=18666666666\",{\"1\":{\"3594\":1,\"3600\":1}}],[\"user就是这么做的\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"user\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"use\",{\"1\":{\"455\":1,\"959\":1,\"3200\":1,\"3288\":3,\"3914\":1,\"4552\":3}}],[\"using\",{\"1\":{\"386\":1,\"1014\":1,\"3839\":1}}],[\"unless\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"unlock\",{\"1\":{\"2694\":1,\"2719\":1,\"5072\":1,\"5097\":1}}],[\"unloading\",{\"1\":{\"386\":1,\"3839\":1}}],[\"unsafe这个类中定义了\",{\"1\":{\"3107\":1,\"4389\":1}}],[\"undo\",{\"0\":{\"2868\":1,\"5246\":1},\"1\":{\"2812\":1,\"2854\":2,\"2858\":1,\"2861\":1,\"2869\":1,\"2871\":1,\"2872\":3,\"2873\":3,\"5190\":1,\"5232\":2,\"5236\":1,\"5239\":1,\"5247\":1,\"5249\":1,\"5250\":3,\"5251\":3}}],[\"undefined\",{\"1\":{\"199\":1}}],[\"unit\",{\"1\":{\"3288\":4,\"3295\":1,\"4552\":4,\"4559\":1}}],[\"union\",{\"1\":{\"2903\":1,\"5281\":1}}],[\"unionfs\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"unique\",{\"1\":{\"2625\":1,\"5003\":1}}],[\"unmodified\",{\"1\":{\"2506\":1,\"5604\":1}}],[\"uncommitted\",{\"1\":{\"1092\":1,\"2832\":1,\"4125\":1,\"5210\":1}}],[\"unchecked\",{\"0\":{\"440\":1,\"3899\":1},\"1\":{\"3193\":1}}],[\"准备了一个\",{\"1\":{\"2118\":1,\"4723\":1}}],[\"准备\",{\"1\":{\"386\":1,\"3839\":1}}],[\"验证数据是否被篡改\",{\"1\":{\"3639\":1}}],[\"验证数据的有效性\",{\"1\":{\"1063\":1,\"4096\":1}}],[\"验证是对自己的问询\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"验证结果存储到\",{\"1\":{\"1063\":1,\"4096\":1}}],[\"验证代码如下\",{\"1\":{\"942\":1}}],[\"验证\",{\"1\":{\"386\":1,\"390\":1,\"3839\":1,\"3844\":1}}],[\"加盐流程\",{\"1\":{\"3625\":1}}],[\"加盐的目的也是为了尽量增强明文密码的复杂度\",{\"1\":{\"3624\":1}}],[\"加盐是指在密码的任意位置插入一些指定的字符串\",{\"1\":{\"3624\":1}}],[\"加盐sault\",{\"1\":{\"3623\":1}}],[\"加\",{\"1\":{\"2728\":1,\"2729\":1,\"3404\":1,\"5106\":1,\"5107\":1,\"5684\":1}}],[\"加的是\",{\"1\":{\"2725\":1,\"2726\":1,\"5103\":1,\"5104\":1}}],[\"加表锁\",{\"1\":{\"2714\":1,\"5092\":1}}],[\"加上全局锁\",{\"1\":{\"2698\":1,\"5076\":1}}],[\"加全局锁又会带来什么缺点呢\",{\"1\":{\"2697\":1,\"5075\":1}}],[\"加速查询\",{\"1\":{\"2610\":1,\"2612\":1,\"4988\":1,\"4990\":1}}],[\"加密和解密花费时间长\",{\"1\":{\"3655\":1}}],[\"加密效率高的特点\",{\"1\":{\"3652\":1}}],[\"加密速度快\",{\"1\":{\"3652\":1}}],[\"加密解密密钥是相同的\",{\"1\":{\"3645\":1}}],[\"加密\",{\"1\":{\"3504\":1,\"5773\":1}}],[\"加密采用对称加密\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"加密展示\",{\"1\":{\"8\":1,\"100\":1,\"3662\":1,\"3754\":1}}],[\"加入到自己的\",{\"1\":{\"2485\":1,\"5583\":1}}],[\"加开关\",{\"1\":{\"2204\":1,\"4326\":1}}],[\"加分布式锁\",{\"1\":{\"2190\":1,\"4312\":1}}],[\"加快排序查询时间\",{\"1\":{\"2662\":1,\"5040\":1}}],[\"加快数据恢复的速率\",{\"1\":{\"1258\":1,\"5450\":1}}],[\"加快读写速度\",{\"1\":{\"1257\":1,\"5449\":1}}],[\"加锁\",{\"1\":{\"820\":1,\"821\":1,\"1360\":1,\"1528\":1,\"1696\":1,\"1864\":1,\"4029\":1,\"4030\":1,\"4787\":1}}],[\"加1\",{\"1\":{\"638\":1}}],[\"加载配置文件的优先级了解么\",{\"0\":{\"1149\":1,\"4182\":1}}],[\"加载自动装配类\",{\"1\":{\"1148\":1,\"4181\":1}}],[\"加载指定二进制名称的类\",{\"1\":{\"408\":1,\"3863\":1}}],[\"加载时再利用自定义的类加载器对其解密\",{\"1\":{\"405\":1,\"3860\":1}}],[\"加载\",{\"1\":{\"386\":1,\"390\":1,\"3839\":1,\"3844\":1}}],[\"个问题\",{\"1\":{\"3533\":1,\"5802\":1}}],[\"个最重要的参数\",{\"1\":{\"3289\":1,\"4553\":1}}],[\"个特性\",{\"1\":{\"2805\":1,\"5183\":1}}],[\"个\",{\"1\":{\"2515\":2,\"2667\":1,\"2930\":1,\"2938\":1,\"2945\":1,\"2953\":1,\"5045\":1,\"5308\":1,\"5316\":1,\"5323\":1,\"5331\":1,\"5613\":2}}],[\"个字节可以存储\",{\"1\":{\"2889\":1,\"5267\":1}}],[\"个字节\",{\"1\":{\"2389\":1,\"2390\":1}}],[\"个记录\",{\"1\":{\"2167\":2,\"4289\":2}}],[\"个缺点\",{\"1\":{\"1471\":1,\"1639\":1,\"1807\":1,\"1975\":1,\"4898\":1}}],[\"个方案都是比较经典的\",{\"1\":{\"1447\":1,\"1615\":1,\"1783\":1,\"1951\":1,\"4874\":1}}],[\"个参数\",{\"1\":{\"851\":1,\"4060\":1}}],[\"个连续的红色节点\",{\"1\":{\"666\":1,\"4007\":1}}],[\"个互不相交的子集t1\",{\"1\":{\"614\":1}}],[\"个结点的有限集t\",{\"1\":{\"612\":1}}],[\"个阶段的顺序如下图所示\",{\"1\":{\"387\":1,\"3840\":1}}],[\"个阶段\",{\"1\":{\"386\":1,\"3839\":1}}],[\"个垃圾收集器\",{\"1\":{\"342\":1}}],[\"毫秒以内\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"毫秒\",{\"1\":{\"383\":1}}],[\"毫秒的时间片段内\",{\"1\":{\"383\":1}}],[\"整体的吞吐效率会高点\",{\"1\":{\"3272\":1,\"4500\":1}}],[\"整体来说\",{\"1\":{\"559\":1}}],[\"整体来看是基于\",{\"1\":{\"382\":1}}],[\"整个数据库就处于只读状态了\",{\"1\":{\"2690\":1,\"5068\":1}}],[\"整个过程按照时间顺序发生的事件如下\",{\"1\":{\"2489\":1,\"5587\":1}}],[\"整个网络就分成了几块区域\",{\"1\":{\"2152\":1,\"4757\":1}}],[\"整个服务器就从\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"整个进程是无法处理其他连接的事件的\",{\"1\":{\"1473\":1,\"1641\":1,\"1809\":1,\"1977\":1,\"4900\":1}}],[\"整个解决循环依赖的核心内容\",{\"1\":{\"1118\":1,\"4151\":1}}],[\"整理\",{\"0\":{\"329\":1},\"1\":{\"340\":1,\"382\":1}}],[\"具体实现\",{\"1\":{\"3494\":1,\"5763\":1}}],[\"具体命令如下\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"具体值取决于写出的数据量和\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"具体方式如下\",{\"1\":{\"2746\":1,\"5124\":1}}],[\"具体可以参见这篇文章\",{\"1\":{\"2384\":1}}],[\"具体的计算方法是\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"具体的给面试官扯一扯\",{\"1\":{\"2350\":1}}],[\"具体的细节请移步\",{\"1\":{\"2219\":1,\"2234\":1,\"2275\":1,\"2290\":1,\"5526\":1,\"5528\":1}}],[\"具体的底层实现\",{\"1\":{\"578\":1}}],[\"具体分发给\",{\"1\":{\"1466\":1,\"1481\":1,\"1634\":1,\"1649\":1,\"1802\":1,\"1817\":1,\"1970\":1,\"1985\":1,\"4893\":1,\"4908\":1}}],[\"具体过程如下\",{\"1\":{\"1408\":1,\"1422\":1,\"1576\":1,\"1590\":1,\"1744\":1,\"1758\":1,\"1912\":1,\"1926\":1,\"4835\":1,\"4849\":1}}],[\"具体就是\",{\"1\":{\"1217\":1,\"4250\":1}}],[\"具体地\",{\"1\":{\"892\":1}}],[\"具体为o\",{\"1\":{\"712\":1}}],[\"具体来说\",{\"1\":{\"711\":1,\"724\":1}}],[\"具体是这样做的\",{\"1\":{\"3022\":1,\"5400\":1}}],[\"具体是o\",{\"1\":{\"710\":1}}],[\"具体是哪个类加载器加载呢\",{\"1\":{\"415\":1,\"3871\":1}}],[\"具备如下特点\",{\"1\":{\"381\":1}}],[\"具有算法公开\",{\"1\":{\"3652\":1}}],[\"具有提交\",{\"1\":{\"2569\":1,\"4947\":1}}],[\"具有较低的连接和传输延迟\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"具有多个接口\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"具有高可用分区容错特点\",{\"1\":{\"2050\":1,\"4655\":1}}],[\"具有特定的格式\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"具有n个结点的完全二叉树的深度为\",{\"1\":{\"647\":1}}],[\"具有以下缺点\",{\"1\":{\"369\":1}}],[\"具有四种强度不同的引用类型\",{\"1\":{\"309\":1}}],[\"停顿时间来制定回收计划\",{\"1\":{\"380\":1}}],[\"筛选回收\",{\"1\":{\"380\":1}}],[\"使其再次尝试获取同步状态\",{\"1\":{\"3068\":1,\"4422\":1}}],[\"使⽤者通过代理间接的访问服务提供者\",{\"1\":{\"835\":1,\"4044\":1}}],[\"使⽤简单⼯⼚模式\",{\"1\":{\"826\":1,\"4035\":1}}],[\"使⽤\",{\"1\":{\"820\":1,\"4029\":1}}],[\"使子树的个数\",{\"1\":{\"615\":1}}],[\"使得网页传输更加高效\",{\"1\":{\"5530\":1}}],[\"使得java\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"使得多个进程可以访问同一块内存空间\",{\"1\":{\"1369\":1,\"1537\":1,\"1705\":1,\"1873\":1,\"4796\":1}}],[\"使得可预测的停顿时间模型成为可能\",{\"1\":{\"375\":1}}],[\"使得每个小空间可以单独进行垃圾回收\",{\"1\":{\"375\":1}}],[\"使用fastdfs作为静态资源存储器\",{\"1\":{\"3555\":1,\"5824\":1}}],[\"使用版本号\",{\"1\":{\"3487\":1,\"5756\":1}}],[\"使用mongo存储用户历史记录数据\",{\"1\":{\"3456\":1,\"5725\":1}}],[\"使用mysql存储用户数据\",{\"1\":{\"3455\":1,\"5724\":1}}],[\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销\",{\"1\":{\"3339\":1,\"4596\":1}}],[\"使用线程池可以进行统一的分配\",{\"1\":{\"3283\":1,\"4547\":1}}],[\"使用调用者的线程来执行任务\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"使用volatile修饰的变量\",{\"1\":{\"3139\":1,\"4452\":1}}],[\"使用者继承\",{\"1\":{\"3080\":1,\"4436\":1}}],[\"使用布隆过滤器中的哈希函数对元素值进行计算\",{\"1\":{\"3026\":1,\"5404\":1}}],[\"使用哈希表作为\",{\"1\":{\"2939\":1,\"5317\":1}}],[\"使用全局锁会影响业务\",{\"1\":{\"2700\":1,\"5078\":1}}],[\"使用表中的多个字段创建索引\",{\"1\":{\"2652\":1,\"5030\":1}}],[\"使用的无界的延迟阻塞队列delayedworkqueue\",{\"1\":{\"3344\":1,\"4601\":1}}],[\"使用的都是非聚簇索引\",{\"1\":{\"2608\":1,\"2640\":1,\"4986\":1,\"5018\":1}}],[\"使用的是同步队列\",{\"1\":{\"3343\":1,\"4600\":1}}],[\"使用的是无界的\",{\"1\":{\"3342\":1,\"4599\":1}}],[\"使用的是线程\",{\"1\":{\"1453\":1,\"1621\":1,\"1789\":1,\"1957\":1,\"4880\":1}}],[\"使用的是进程\",{\"1\":{\"1453\":1,\"1621\":1,\"1789\":1,\"1957\":1,\"4880\":1}}],[\"使用的是共享内存的方式\",{\"1\":{\"1384\":1,\"1552\":1,\"1720\":1,\"1888\":1,\"4811\":1}}],[\"使用二进制帧进行数据传输\",{\"1\":{\"2510\":1,\"5608\":1}}],[\"使用零拷贝技术的项目\",{\"0\":{\"1430\":1,\"1598\":1,\"1766\":1,\"1934\":1,\"4857\":1}}],[\"使用水平触发模式时\",{\"1\":{\"1389\":1,\"1557\":1,\"1725\":1,\"1893\":1,\"4816\":1}}],[\"使用边缘触发模式时\",{\"1\":{\"1388\":1,\"1556\":1,\"1724\":1,\"1892\":1,\"4815\":1}}],[\"使用事件驱动的机制\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"使用一种称为目录树的层次结构来组织文件和目录\",{\"1\":{\"1325\":1,\"4282\":1}}],[\"使用availablepartitions呢\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"使用指定的partition\",{\"1\":{\"1260\":1,\"5452\":1}}],[\"使用指南\",{\"1\":{\"120\":1,\"121\":1,\"3774\":1,\"3775\":1}}],[\"使用utf\",{\"1\":{\"1188\":1,\"4221\":1}}],[\"使用spring\",{\"1\":{\"1164\":1,\"4197\":1}}],[\"使用synchronizedlist的时候\",{\"1\":{\"809\":1}}],[\"使用后端数据库默认的隔离级别\",{\"1\":{\"1091\":1,\"4124\":1}}],[\"使用到了适配器模式\",{\"1\":{\"1075\":1,\"4108\":1}}],[\"使用工厂模式通过\",{\"1\":{\"1069\":1,\"4102\":1}}],[\"使用位运算代替取模运算\",{\"1\":{\"996\":1}}],[\"使用hashmap时就必须要自己增加同步处理\",{\"1\":{\"893\":1}}],[\"使用同步代码块的方式调用arraylist的add\",{\"1\":{\"777\":1}}],[\"使用方式也很相似\",{\"1\":{\"738\":1}}],[\"使用了一种变种的wang\",{\"1\":{\"1015\":1}}],[\"使用了\",{\"1\":{\"595\":2}}],[\"使用老版本\",{\"1\":{\"563\":1}}],[\"使用自然语言描述\",{\"1\":{\"556\":1}}],[\"使用jdbc连接数据库时\",{\"1\":{\"519\":1,\"3970\":1}}],[\"使用javap来分析这段代码\",{\"1\":{\"467\":1,\"3918\":1}}],[\"使用\",{\"1\":{\"273\":1,\"312\":1,\"315\":1,\"318\":1,\"322\":1,\"386\":1,\"567\":1,\"1155\":1,\"1212\":1,\"1217\":1,\"2015\":1,\"2522\":1,\"2576\":1,\"2678\":1,\"2920\":1,\"3106\":1,\"3839\":1,\"4188\":1,\"4245\":1,\"4250\":1,\"4388\":1,\"4620\":1,\"4954\":1,\"5056\":1,\"5298\":1,\"5620\":1}}],[\"使用pc寄存器存储字节码指令地址有什么用呢\",{\"1\":{\"192\":1}}],[\"但若有空闲线程可以复用\",{\"1\":{\"3334\":1,\"4591\":1}}],[\"但当线程数不断增加时\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"但同时只有一个线程能修改成功\",{\"1\":{\"3222\":1,\"4346\":1}}],[\"但同样也会降低插入和更新的效率\",{\"1\":{\"2668\":1,\"5046\":1}}],[\"但没有剩余可用资源\",{\"1\":{\"3084\":1,\"4440\":1}}],[\"但没有特别的优化\",{\"1\":{\"907\":1}}],[\"但缓存雪崩导致的原因是缓存中的大量或者所有数据失效\",{\"1\":{\"3054\":1,\"5432\":1}}],[\"但不修改持有锁的线程id\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"但不存在于缓存中\",{\"1\":{\"3033\":1,\"3040\":1,\"5411\":1,\"5418\":1}}],[\"但不负责具体的产品\",{\"1\":{\"829\":1,\"4038\":1}}],[\"但也不算差\",{\"1\":{\"5534\":1}}],[\"但也带来了数据丢失的风险\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"但也实现了deque接口\",{\"1\":{\"714\":1}}],[\"但用户\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"但两个事务却不能在同一时间内\",{\"1\":{\"2801\":1,\"5179\":1}}],[\"但对于记录锁\",{\"1\":{\"2795\":1,\"5173\":1}}],[\"但对称加密的密钥用服务器方的证书进行了非对称加密\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"但查询条件未遵守最左匹配原则\",{\"1\":{\"2679\":1,\"5057\":1}}],[\"但又避免不了为\",{\"1\":{\"2659\":1,\"5037\":1}}],[\"但二者实现方式不一样\",{\"1\":{\"2602\":1,\"4980\":1}}],[\"但能指明一条道路\",{\"1\":{\"2537\":1,\"5635\":1}}],[\"但接收的\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"但\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"但可能会丢包和乱序\",{\"1\":{\"2393\":1}}],[\"但保证顺序和可靠\",{\"1\":{\"2392\":1}}],[\"但其他\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"但其实仔细思考\",{\"1\":{\"556\":1}}],[\"但这个就要分为两种情况了\",{\"1\":{\"2134\":1,\"4739\":1}}],[\"但这还不是最理想的零拷贝\",{\"1\":{\"1413\":1,\"1581\":1,\"1749\":1,\"1917\":1,\"4840\":1}}],[\"但只有一个线程可以对共享资源进行写操作\",{\"1\":{\"1354\":1,\"1522\":1,\"1690\":1,\"1858\":1,\"4781\":1}}],[\"但只能放入一个null\",{\"1\":{\"698\":1}}],[\"但速度慢\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"但速度快\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"但此时\",{\"1\":{\"1118\":1,\"2124\":1,\"4151\":1,\"4729\":1}}],[\"但我们互相没法解耦\",{\"1\":{\"1113\":1,\"4146\":1}}],[\"但无论循环依赖的数量有多少\",{\"1\":{\"1113\":1,\"4146\":1}}],[\"但无法获取继承下来的方法\",{\"1\":{\"515\":1,\"3966\":1}}],[\"但无法获取继承下来的变量\",{\"1\":{\"513\":1,\"3964\":1}}],[\"但无法找到足够大连续空间来分配当前对象\",{\"1\":{\"371\":1}}],[\"但幻读仍有可能发生\",{\"1\":{\"1094\":1,\"4127\":1}}],[\"但内部有一个双向链表以维护节点的顺序\",{\"1\":{\"1041\":1}}],[\"但内部使用红黑树实现\",{\"1\":{\"1035\":1}}],[\"但原理是不变的\",{\"1\":{\"1019\":1}}],[\"但如果是对象的引用类型包含了多个变量\",{\"1\":{\"3114\":1,\"4396\":1}}],[\"但如果深究进去\",{\"1\":{\"897\":1}}],[\"但如果插入的时候是有序数据\",{\"1\":{\"671\":1,\"4013\":1}}],[\"但省去了很多没有必要的调平衡操作\",{\"1\":{\"875\":1,\"3983\":1}}],[\"但红黑树不像avl树一样追求绝对的平衡\",{\"1\":{\"875\":1,\"3983\":1}}],[\"但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡\",{\"1\":{\"871\":1,\"3979\":1}}],[\"但它实际上是一个\",{\"1\":{\"586\":1}}],[\"但方法并没有像arraylist一样进行优化存储\",{\"1\":{\"753\":1}}],[\"但属于强同步类\",{\"1\":{\"742\":1}}],[\"但在get与set方面弱于arraylist\",{\"1\":{\"740\":1}}],[\"但在一定程度上它的发生是可以预计的\",{\"1\":{\"442\":1,\"3901\":1}}],[\"但按优先级出队\",{\"1\":{\"730\":1}}],[\"但修改本身的效率很高\",{\"1\":{\"719\":1}}],[\"但有序\",{\"1\":{\"685\":1}}],[\"但整体平均时间复杂度\",{\"1\":{\"596\":1}}],[\"但至今为止\",{\"1\":{\"589\":1}}],[\"但因为\",{\"1\":{\"579\":1}}],[\"但老版本的程序\",{\"1\":{\"564\":1}}],[\"但遇到更抽象的对象的时候\",{\"1\":{\"554\":1}}],[\"但最终还是要转成编译器认识的语言\",{\"1\":{\"458\":1}}],[\"但是2004年\",{\"1\":{\"3589\":1}}],[\"但是cas也有自己的问题\",{\"1\":{\"3418\":1,\"5698\":1}}],[\"但是consumer里面进行了多线程消费\",{\"1\":{\"1311\":1,\"5503\":1}}],[\"但是小于最大线程数\",{\"1\":{\"3314\":1,\"4579\":1}}],[\"但是理想情况下竞争的程度很低\",{\"1\":{\"3230\":1,\"4354\":1}}],[\"但是也可以是公平的\",{\"1\":{\"3210\":1,\"4334\":1}}],[\"但是也是在2018年\",{\"1\":{\"2211\":1,\"2226\":1,\"2241\":1,\"2254\":1,\"2267\":1,\"2282\":1,\"5518\":1,\"5541\":1}}],[\"但是强引用不会释放\",{\"1\":{\"3201\":1}}],[\"但是被volatile修饰的变量操作并非具有原子性\",{\"1\":{\"3154\":1,\"4469\":1}}],[\"但是如果要对多个共享变量进行操作时\",{\"1\":{\"3123\":1,\"4405\":1}}],[\"但是版本号改变了\",{\"1\":{\"3116\":1,\"4399\":1}}],[\"但是还是远远没有使用一个联合索引的查询方式好\",{\"1\":{\"2896\":1,\"5274\":1}}],[\"但是还是有区别\",{\"1\":{\"899\":1}}],[\"但是与sql\",{\"1\":{\"2844\":1,\"5222\":1}}],[\"但是要实现事务必须要遵守\",{\"1\":{\"2805\":1,\"5183\":1}}],[\"但是现在处于等待状态\",{\"1\":{\"2798\":1,\"5176\":1}}],[\"但是现在是单独一个表\",{\"0\":{\"2183\":1,\"4305\":1}}],[\"但是当前运行的线程数是小于最大线程数的\",{\"1\":{\"3315\":1,\"4580\":1}}],[\"但是当搭配\",{\"1\":{\"2768\":1,\"5146\":1}}],[\"但是当我们直接kill进程了\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"但是一直不提交\",{\"1\":{\"2733\":1,\"5111\":1}}],[\"但是一直还没提交\",{\"1\":{\"2732\":1,\"5110\":1}}],[\"但是维护索引的成本也是不小的\",{\"1\":{\"2665\":1,\"5043\":1}}],[\"但是允许数据为\",{\"1\":{\"2625\":1,\"5003\":1}}],[\"但是两者的实现方式不太一样\",{\"1\":{\"2581\":1,\"4959\":1}}],[\"但是对性能有一定的损耗\",{\"1\":{\"2572\":1,\"4950\":1}}],[\"但是对于现在的计算机\",{\"1\":{\"674\":1,\"4016\":1}}],[\"但是我们可以加盐\",{\"1\":{\"3624\":1}}],[\"但是我们可以基于\",{\"1\":{\"2384\":1}}],[\"但是我们设计的大多数类\",{\"1\":{\"559\":1}}],[\"但是服务端的进程崩溃会发生什么\",{\"0\":{\"2442\":1},\"1\":{\"2327\":1}}],[\"但是客户端突然出现故障了怎么办\",{\"0\":{\"2441\":1},\"1\":{\"2326\":1}}],[\"但是为什么现在广泛使用的还是http1\",{\"1\":{\"2208\":1,\"2223\":1,\"2264\":1,\"2279\":1,\"5514\":1}}],[\"但是不可能脏读和不可重复读现象\",{\"1\":{\"2841\":1,\"5219\":1}}],[\"但是不可能发生脏读现象\",{\"1\":{\"2840\":1,\"5218\":1}}],[\"但是不可以对该记录加\",{\"1\":{\"2784\":1,\"5162\":1}}],[\"但是不包含记录本身\",{\"1\":{\"2780\":1,\"5158\":1}}],[\"但是不一定准\",{\"1\":{\"2186\":1,\"4308\":1}}],[\"但是不符合时间局部性\",{\"1\":{\"1336\":1}}],[\"但是冗余就比较大\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"但是有\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"但是有key的情况下\",{\"1\":{\"1261\":1,\"5453\":1}}],[\"但是并没有什么区别\",{\"1\":{\"2789\":1,\"5167\":1}}],[\"但是并发量上升时锁撤销会大幅影响性能\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"但是并不是将新生代划分为大小相等的两块\",{\"1\":{\"334\":1}}],[\"但是因为某些故障\",{\"1\":{\"2152\":1,\"4757\":1}}],[\"但是因为只回收一部分\",{\"1\":{\"380\":1}}],[\"但是过了一会\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"但是挂了两个也不能正常工作了\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"但是实际实现时比单\",{\"1\":{\"1503\":1,\"1671\":1,\"1839\":1,\"2007\":1,\"4930\":1}}],[\"但是这样会带来消息被重新消费的问题\",{\"1\":{\"3468\":1}}],[\"但是这远比进程间通信的复杂度低得多\",{\"1\":{\"1492\":1,\"1660\":1,\"1828\":1,\"1996\":1,\"4919\":1}}],[\"但是这还不是真正的零拷贝技术\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"但是这将严重影响程序的性能\",{\"1\":{\"1095\":1,\"4128\":1}}],[\"但是处理每个请求的事件时\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"但是需要控制同一时刻访问此资源的最大线程数量\",{\"1\":{\"1355\":1,\"1523\":1,\"1691\":1,\"1859\":1,\"4782\":1}}],[\"但是每个consumer的执行时间是不固定的\",{\"1\":{\"1309\":1,\"5501\":1}}],[\"但是每个mapper的二级开关是默认关闭的\",{\"1\":{\"1238\":1,\"4271\":1}}],[\"但是没来得及提交offset\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"但是销毁sqlsession后会将里面的缓存存到二级缓存中\",{\"1\":{\"1235\":1,\"4268\":1}}],[\"但是幻读或不可重复读仍有可能发生\",{\"1\":{\"1093\":1,\"4126\":1}}],[\"但是哈希的操作还是在的\",{\"1\":{\"1023\":1}}],[\"但是其实并不完全是\",{\"1\":{\"1001\":1}}],[\"但是肯定存在这样的key\",{\"1\":{\"991\":1}}],[\"但是考虑到效率等问题\",{\"1\":{\"963\":1}}],[\"但是它很大程度上避免幻读现象\",{\"1\":{\"2846\":1,\"5224\":1}}],[\"但是它并不是意向锁\",{\"1\":{\"2799\":1,\"5177\":1}}],[\"但是它不存在我们所说的空间局部性了\",{\"1\":{\"1335\":1}}],[\"但是它的效率比hashtable要高好多倍\",{\"1\":{\"893\":1}}],[\"但是它的效率会比hashtable要好很多\",{\"1\":{\"893\":1}}],[\"但是它却有一个别名叫\",{\"1\":{\"241\":1,\"280\":1}}],[\"但是在\",{\"1\":{\"1123\":1,\"2932\":1,\"4156\":1,\"5310\":1}}],[\"但是在随机hashcode下\",{\"1\":{\"879\":1,\"3987\":1}}],[\"但是在框架中的几乎是必用的一门技术\",{\"1\":{\"846\":1,\"4055\":1}}],[\"但是位运算比取余运算要高效的多\",{\"1\":{\"877\":1,\"3985\":1}}],[\"但是之后还有但是\",{\"1\":{\"805\":1}}],[\"但是vector却对该方法加了方法锁\",{\"1\":{\"804\":1}}],[\"但是静态方法只能给this对象加锁\",{\"1\":{\"800\":1}}],[\"但是可能会造成太多过期\",{\"1\":{\"2994\":1,\"5372\":1}}],[\"但是可能会出现一种极端的情况\",{\"1\":{\"658\":1,\"3999\":1}}],[\"但是可以根据应用场景设置为边缘触发模式\",{\"1\":{\"1395\":1,\"1563\":1,\"1731\":1,\"1899\":1,\"4822\":1}}],[\"但是可并行执行\",{\"1\":{\"379\":1}}],[\"但是聪明的你想到可以加个判断\",{\"1\":{\"484\":1,\"3935\":1}}],[\"但是return前执行的finally块内\",{\"1\":{\"462\":1}}],[\"但是\",{\"1\":{\"413\":1,\"561\":1,\"563\":1,\"565\":1,\"572\":1,\"577\":1,\"586\":1,\"597\":1,\"804\":1,\"805\":1,\"932\":1,\"1012\":1,\"1471\":1,\"1639\":1,\"1807\":1,\"1975\":1,\"2211\":1,\"2226\":1,\"2241\":1,\"2254\":1,\"2267\":1,\"2282\":1,\"2521\":1,\"2561\":1,\"2597\":1,\"2705\":1,\"2759\":1,\"2997\":1,\"3023\":1,\"3113\":1,\"3466\":1,\"3868\":1,\"4395\":1,\"4898\":1,\"4939\":1,\"4975\":1,\"5083\":1,\"5137\":1,\"5375\":1,\"5401\":1,\"5518\":1,\"5541\":1,\"5619\":1,\"5735\":1}}],[\"但是你需要使用相对链接\",{\"1\":{\"125\":1,\"3779\":1}}],[\"吞吐量会下降很多\",{\"1\":{\"3270\":1,\"4498\":1}}],[\"吞吐量低\",{\"1\":{\"370\":1}}],[\"吞吐量优先\",{\"1\":{\"356\":1}}],[\"重命名为\",{\"1\":{\"5530\":1}}],[\"重量级锁\",{\"0\":{\"4358\":1}}],[\"重量级锁是指当有一个线程获取锁之后\",{\"1\":{\"3237\":1,\"4360\":1}}],[\"重点是基于这几个public方法\",{\"1\":{\"3347\":1,\"4605\":1}}],[\"重要\",{\"1\":{\"2993\":1,\"5371\":1}}],[\"重要的内容\",{\"1\":{\"73\":1,\"3727\":1}}],[\"重启时\",{\"1\":{\"2983\":1,\"5361\":1}}],[\"重启加载\",{\"1\":{\"2983\":1,\"5361\":1}}],[\"重做日志\",{\"1\":{\"2811\":1,\"5189\":1}}],[\"重传等等\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"重复确认了好几遍哈哈哈哈哈哈哈\",{\"1\":{\"3400\":1,\"5680\":1}}],[\"重复\",{\"1\":{\"2353\":1}}],[\"重复数据等\",{\"1\":{\"2195\":1,\"4317\":1}}],[\"重试机制\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"重写简单\",{\"1\":{\"2048\":1,\"4653\":1}}],[\"重写writeobject来实现自定义的序列化\",{\"1\":{\"758\":1}}],[\"重新分配和复制数组的开销被平摊了\",{\"1\":{\"711\":1}}],[\"重新标记\",{\"1\":{\"366\":1}}],[\"需要考虑数据持久化的问题\",{\"1\":{\"3522\":1,\"5791\":1}}],[\"需要调用下面的方法\",{\"1\":{\"3353\":1,\"4613\":1}}],[\"需要什么设置\",{\"1\":{\"3352\":1,\"4612\":1}}],[\"需要等待全局安全点\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"需要重点掌握\",{\"1\":{\"3111\":1,\"4393\":1}}],[\"需要定期对\",{\"1\":{\"2982\":1,\"5360\":1}}],[\"需要额外的空间和计算开销\",{\"1\":{\"2890\":1,\"5268\":1}}],[\"需要额外注意的一点是\",{\"1\":{\"750\":1}}],[\"需要判断插入位置是否已被其他事务加了间隙锁\",{\"1\":{\"2797\":1,\"5175\":1}}],[\"需要先下载才能审核\",{\"1\":{\"3510\":1,\"5779\":1}}],[\"需要先对表加上\",{\"1\":{\"2744\":1,\"5122\":1}}],[\"需要先在表级别加上一个\",{\"1\":{\"2742\":1,\"2743\":1,\"5120\":1,\"5121\":1}}],[\"需要先使用javac编译\",{\"1\":{\"467\":1,\"3918\":1}}],[\"需要注意的是布隆过滤器可能会存在误判的情况\",{\"1\":{\"3023\":1,\"5401\":1}}],[\"需要注意的是\",{\"1\":{\"2716\":1,\"5094\":1}}],[\"需要注意的是刚刚\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"需要查询\",{\"1\":{\"2650\":1,\"5028\":1}}],[\"需要查询主键\",{\"1\":{\"2650\":1,\"5028\":1}}],[\"需要经过经典的\",{\"1\":{\"2515\":1,\"5613\":1}}],[\"需要客户端自己发送请求来获取相关资源\",{\"1\":{\"2512\":1,\"5610\":1}}],[\"需要解决\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"需要有一定的策略\",{\"1\":{\"2195\":1,\"4317\":1}}],[\"需要有对应的迁移服务进行定时迁移\",{\"1\":{\"2188\":1,\"4310\":1}}],[\"需要刷新下缓存\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"需要补充说明的一点是\",{\"1\":{\"2160\":1,\"4765\":1}}],[\"需要搞清楚traceid和spanid以及抽样\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"需要在\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"需要说明的是\",{\"1\":{\"907\":1}}],[\"需要增强的方法\",{\"1\":{\"861\":1,\"4070\":1}}],[\"需要增强的对象\",{\"1\":{\"861\":1,\"4070\":1}}],[\"需要对每个目标类都单独写一个代理类\",{\"1\":{\"840\":1,\"4049\":1}}],[\"需要提前从class中调用getconstructor\",{\"1\":{\"510\":1,\"3961\":1}}],[\"需要进行处理\",{\"1\":{\"448\":1,\"3907\":1}}],[\"需要停顿\",{\"1\":{\"364\":1,\"366\":1}}],[\"需要使用加锁等机制\",{\"1\":{\"275\":1}}],[\"能不能将\",{\"1\":{\"3536\":1,\"5805\":1}}],[\"能最晚啥时候\",{\"1\":{\"3371\":1,\"5651\":1}}],[\"能让写入缓存中的最新数据更新写入主内存\",{\"1\":{\"3146\":1,\"4458\":1}}],[\"能让使用者明确指定在一个长度为\",{\"1\":{\"383\":1}}],[\"能告诉我\",{\"1\":{\"2537\":1,\"5635\":1}}],[\"能保证数据的可靠性交付\",{\"1\":{\"2398\":1}}],[\"能建立\",{\"0\":{\"2448\":1,\"2449\":1},\"1\":{\"2333\":1,\"2334\":1}}],[\"能处理写请求嘛\",{\"1\":{\"2116\":1,\"4721\":1}}],[\"能正常调用\",{\"1\":{\"2076\":1,\"4681\":1}}],[\"能在上一次分配的结果的基础上\",{\"1\":{\"1286\":1,\"5478\":1}}],[\"能够命中前者的查询肯定是能够命中后者的\",{\"1\":{\"2673\":1,\"5051\":1}}],[\"能够命中索引\",{\"1\":{\"2673\":1,\"5051\":1}}],[\"能够提供更高的安全性和用户隐私保护\",{\"1\":{\"2522\":1,\"5620\":1}}],[\"能够把报文转发到\",{\"1\":{\"2491\":1,\"5589\":1}}],[\"能够同时保证\",{\"1\":{\"2160\":1,\"4765\":1}}],[\"能够同时监听的\",{\"1\":{\"1383\":1,\"1551\":1,\"1719\":1,\"1887\":1,\"4810\":1}}],[\"能够接收客户端的请求\",{\"1\":{\"2112\":1,\"4717\":1}}],[\"能够发起投票\",{\"1\":{\"2111\":1,\"4716\":1}}],[\"能够自动执行重复性任务\",{\"1\":{\"2016\":1,\"4621\":1}}],[\"能够将那些与业务无关\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"能够加快检索速率\",{\"1\":{\"871\":1,\"3979\":1}}],[\"能够到达到的对象都是存活的\",{\"1\":{\"302\":1}}],[\"能解决非平衡树问题\",{\"1\":{\"658\":1,\"3999\":1}}],[\"能有明确定义\",{\"1\":{\"615\":1}}],[\"能更好吧\",{\"1\":{\"590\":1}}],[\"能直接关联到的对象\",{\"1\":{\"364\":1}}],[\"69916115\",{\"1\":{\"3656\":1}}],[\"6879c0ae9117b50074ce0a0d4c843060\",{\"1\":{\"3622\":1}}],[\"6五张牌\",{\"1\":{\"3442\":1}}],[\"6共享锁\",{\"0\":{\"3261\":1}}],[\"6中引入了自适应自旋锁\",{\"1\":{\"3256\":1}}],[\"6总结\",{\"0\":{\"3086\":1}}],[\"60\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"600\",{\"1\":{\"2807\":3,\"5185\":3}}],[\"6字节\",{\"1\":{\"2857\":1,\"2859\":1,\"5235\":1,\"5237\":1}}],[\"6byte\",{\"1\":{\"2619\":1,\"4997\":1}}],[\"6没有\",{\"0\":{\"2449\":1}}],[\"6第四次挥手丢失了\",{\"0\":{\"2434\":1}}],[\"6既然\",{\"0\":{\"2423\":1}}],[\"6udp\",{\"0\":{\"2373\":1}}],[\"6650\",{\"1\":{\"1304\":1,\"5496\":1}}],[\"666\",{\"1\":{\"544\":1}}],[\"6代理模式\",{\"0\":{\"833\":1}}],[\"6\",{\"0\":{\"834\":1,\"836\":1,\"839\":1,\"842\":1,\"878\":1,\"2166\":1,\"2248\":1,\"2375\":1,\"2397\":1,\"3055\":1,\"4288\":1,\"5433\":1},\"1\":{\"468\":2,\"979\":4,\"1014\":1,\"1065\":1,\"1475\":1,\"1643\":1,\"1811\":1,\"1979\":1,\"2391\":1,\"2580\":1,\"2628\":2,\"2656\":1,\"2828\":1,\"2829\":1,\"2896\":2,\"2972\":1,\"3001\":1,\"3102\":1,\"3200\":1,\"3371\":1,\"3379\":1,\"3406\":1,\"3416\":1,\"3430\":1,\"3439\":1,\"3512\":1,\"3919\":2,\"4098\":1,\"4383\":1,\"4902\":1,\"4958\":1,\"5006\":2,\"5034\":1,\"5206\":1,\"5207\":1,\"5274\":2,\"5350\":1,\"5379\":1,\"5651\":1,\"5659\":1,\"5686\":1,\"5696\":1,\"5710\":1,\"5781\":1}}],[\"6异常的底层\",{\"0\":{\"464\":1}}],[\"6cms\",{\"0\":{\"361\":1}}],[\"640\",{\"1\":{\"955\":1,\"990\":1,\"993\":1}}],[\"64\",{\"1\":{\"248\":1,\"251\":1,\"936\":1,\"2930\":1,\"2945\":1,\"2953\":1,\"5308\":1,\"5323\":1,\"5331\":1}}],[\"570da6d5277a646f6552b8832012f5dc\",{\"1\":{\"3618\":1}}],[\"5监控线程池的状态\",{\"0\":{\"3354\":1}}],[\"5独享锁\",{\"0\":{\"3257\":1}}],[\"5锁优化技术\",{\"0\":{\"3238\":1}}],[\"50\",{\"1\":{\"3200\":1}}],[\"5000\",{\"1\":{\"3200\":1}}],[\"5aqs\",{\"0\":{\"3079\":1}}],[\"543902719\",{\"1\":{\"3059\":1,\"4413\":1}}],[\"5分钟\",{\"0\":{\"3365\":1,\"5645\":1},\"1\":{\"2966\":1,\"5344\":1}}],[\"52258054\",{\"1\":{\"2877\":1,\"5255\":1}}],[\"5没有\",{\"0\":{\"2448\":1}}],[\"5第三次挥手丢失了\",{\"0\":{\"2433\":1}}],[\"5初始序列号\",{\"0\":{\"2422\":1}}],[\"5如何唯一确定一个\",{\"0\":{\"2360\":1}}],[\"58同城\",{\"0\":{\"2166\":1,\"4288\":1}}],[\"512\",{\"1\":{\"2930\":1,\"2938\":1,\"2945\":1,\"5308\":1,\"5316\":1,\"5323\":1}}],[\"51167384\",{\"1\":{\"1304\":1,\"5496\":1}}],[\"51b27d00cf50d9aca86e0934ab42a565\",{\"1\":{\"1281\":1,\"5473\":1}}],[\"5装饰器模式\",{\"0\":{\"832\":1}}],[\"5倍\",{\"1\":{\"763\":2}}],[\"5502\",{\"1\":{\"653\":1,\"897\":1,\"3888\":1}}],[\"5finally和return的执行顺序\",{\"0\":{\"459\":1}}],[\"5\",{\"0\":{\"652\":1,\"695\":1,\"876\":1,\"2235\":1,\"3644\":1,\"3646\":1,\"3648\":1,\"3651\":1},\"1\":{\"452\":1,\"468\":1,\"604\":1,\"1064\":1,\"2213\":1,\"2228\":1,\"2243\":1,\"2256\":1,\"2269\":1,\"2284\":1,\"2388\":1,\"2560\":2,\"2562\":2,\"2577\":1,\"2628\":1,\"2656\":1,\"2667\":1,\"2760\":1,\"2788\":1,\"2827\":2,\"2896\":2,\"2913\":1,\"2978\":1,\"3101\":1,\"3107\":1,\"3117\":1,\"3125\":1,\"3128\":1,\"3200\":3,\"3370\":1,\"3378\":1,\"3400\":1,\"3401\":1,\"3415\":1,\"3429\":1,\"3438\":1,\"3511\":1,\"3581\":1,\"3641\":1,\"3911\":1,\"3919\":1,\"4097\":1,\"4381\":1,\"4389\":1,\"4400\":1,\"4407\":1,\"4410\":1,\"4938\":2,\"4940\":2,\"4955\":1,\"5006\":1,\"5034\":1,\"5045\":1,\"5138\":1,\"5166\":1,\"5205\":2,\"5274\":2,\"5291\":1,\"5356\":1,\"5520\":1,\"5543\":1,\"5650\":1,\"5658\":1,\"5680\":1,\"5681\":1,\"5695\":1,\"5709\":1,\"5780\":1}}],[\"5parallel\",{\"0\":{\"359\":1}}],[\"5方法区\",{\"0\":{\"278\":1}}],[\"翻译为串行\",{\"1\":{\"346\":1}}],[\"串行化\",{\"1\":{\"2835\":1,\"2842\":1,\"2843\":1,\"2845\":2,\"2851\":1,\"5213\":1,\"5220\":1,\"5221\":1,\"5223\":2,\"5229\":1}}],[\"串行指的是垃圾收集器与用户程序交替执行\",{\"1\":{\"344\":1}}],[\"串行与并行\",{\"1\":{\"344\":1}}],[\"单次读\",{\"1\":{\"3141\":1}}],[\"单表不要包含过多字段\",{\"0\":{\"2891\":1,\"5269\":1}}],[\"单播发送\",{\"1\":{\"2498\":1,\"5596\":1}}],[\"单播响应\",{\"1\":{\"2497\":1,\"5595\":1}}],[\"单播响应协议\",{\"1\":{\"2486\":1,\"5584\":1}}],[\"单元化\",{\"1\":{\"2198\":1,\"4320\":1}}],[\"单元测试和集成测试\",{\"1\":{\"1184\":1,\"4217\":1}}],[\"单个服务内部高度耦合\",{\"1\":{\"2047\":1,\"4652\":1}}],[\"单进程的方案不适用计算机密集型的场景\",{\"1\":{\"1474\":1,\"1642\":1,\"1810\":1,\"1978\":1,\"4901\":1}}],[\"单进程的方案因为全部工作都在同一个进程内完成\",{\"1\":{\"1470\":1,\"1638\":1,\"1806\":1,\"1974\":1,\"4897\":1}}],[\"单进程\",{\"0\":{\"1455\":1,\"1623\":1,\"1791\":1,\"1959\":1,\"4882\":1},\"1\":{\"1442\":1,\"1444\":1,\"1446\":2,\"1448\":1,\"1456\":1,\"1458\":1,\"1465\":1,\"1475\":1,\"1610\":1,\"1612\":1,\"1614\":2,\"1616\":1,\"1624\":1,\"1626\":1,\"1633\":1,\"1643\":1,\"1778\":1,\"1780\":1,\"1782\":2,\"1784\":1,\"1792\":1,\"1794\":1,\"1801\":1,\"1811\":1,\"1946\":1,\"1948\":1,\"1950\":2,\"1952\":1,\"1960\":1,\"1962\":1,\"1969\":1,\"1979\":1,\"4869\":1,\"4871\":1,\"4873\":2,\"4875\":1,\"4883\":1,\"4885\":1,\"4892\":1,\"4902\":1}}],[\"单\",{\"0\":{\"1455\":1,\"1476\":1,\"1623\":1,\"1644\":1,\"1791\":1,\"1812\":1,\"1959\":1,\"1980\":1,\"4882\":1,\"4903\":1},\"1\":{\"1442\":1,\"1443\":1,\"1446\":1,\"1448\":1,\"1449\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1465\":1,\"1470\":1,\"1474\":1,\"1475\":1,\"1477\":1,\"1478\":1,\"1487\":1,\"1491\":1,\"1493\":1,\"1495\":2,\"1610\":1,\"1611\":1,\"1614\":1,\"1616\":1,\"1617\":1,\"1624\":1,\"1625\":1,\"1626\":1,\"1633\":1,\"1638\":1,\"1642\":1,\"1643\":1,\"1645\":1,\"1646\":1,\"1655\":1,\"1659\":1,\"1661\":1,\"1663\":2,\"1778\":1,\"1779\":1,\"1782\":1,\"1784\":1,\"1785\":1,\"1792\":1,\"1793\":1,\"1794\":1,\"1801\":1,\"1806\":1,\"1810\":1,\"1811\":1,\"1813\":1,\"1814\":1,\"1823\":1,\"1827\":1,\"1829\":1,\"1831\":2,\"1946\":1,\"1947\":1,\"1950\":1,\"1952\":1,\"1953\":1,\"1960\":1,\"1961\":1,\"1962\":1,\"1969\":1,\"1974\":1,\"1978\":1,\"1979\":1,\"1981\":1,\"1982\":1,\"1991\":1,\"1995\":1,\"1997\":1,\"1999\":2,\"4869\":1,\"4870\":1,\"4873\":1,\"4875\":1,\"4876\":1,\"4883\":1,\"4884\":1,\"4885\":1,\"4892\":1,\"4897\":1,\"4901\":1,\"4902\":1,\"4904\":1,\"4905\":1,\"4914\":1,\"4918\":1,\"4920\":1,\"4922\":2}}],[\"单例模式\",{\"0\":{\"4026\":1}}],[\"单例模式属于创建型模式\",{\"1\":{\"818\":1,\"4027\":1}}],[\"单例设计模式\",{\"1\":{\"1071\":1,\"4104\":1}}],[\"单例\",{\"1\":{\"816\":1,\"4025\":1}}],[\"单线程读写\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"单线程方案是一样的\",{\"1\":{\"1484\":1,\"1652\":1,\"1820\":1,\"1988\":1,\"4911\":1}}],[\"单线程\",{\"1\":{\"1457\":1,\"1477\":1,\"1625\":1,\"1645\":1,\"1793\":1,\"1813\":1,\"1961\":1,\"1981\":1,\"4884\":1,\"4904\":1}}],[\"单线程指的是垃圾收集器只使用一个线程进行收集\",{\"1\":{\"343\":1}}],[\"单线程与多线程\",{\"1\":{\"343\":1}}],[\"单词首字母缩写\",{\"1\":{\"1396\":1,\"1564\":1,\"1732\":1,\"1900\":1,\"4823\":1}}],[\"单词\",{\"1\":{\"67\":1,\"3721\":1}}],[\"70730532\",{\"1\":{\"3276\":1,\"4504\":1}}],[\"7读锁\",{\"0\":{\"3264\":1}}],[\"7字节\",{\"1\":{\"2858\":1,\"5236\":1}}],[\"7为什么\",{\"0\":{\"2435\":1}}],[\"7第一次握手丢失了\",{\"0\":{\"2424\":1}}],[\"7tcp\",{\"0\":{\"2410\":1}}],[\"76435385\",{\"1\":{\"1304\":2,\"5496\":2}}],[\"76ms\",{\"1\":{\"603\":1}}],[\"7中的实现几乎无差别\",{\"1\":{\"1025\":1}}],[\"7中基本类似\",{\"1\":{\"1019\":1}}],[\"7中hashmap和hashtable中对于hash的实现\",{\"1\":{\"1007\":1}}],[\"7中hashmap的hash方法以及indexof方法的实现\",{\"1\":{\"998\":1}}],[\"7中hashtable的hash方法的实现\",{\"1\":{\"998\":1}}],[\"7中扩容时\",{\"1\":{\"869\":1,\"3977\":1}}],[\"7的hashmap为例\",{\"1\":{\"958\":1}}],[\"73\",{\"1\":{\"951\":1}}],[\"7540正式发表了\",{\"1\":{\"2210\":1,\"2225\":1,\"2240\":1,\"2253\":1,\"2266\":1,\"2281\":1,\"5517\":1,\"5540\":1}}],[\"75\",{\"1\":{\"941\":1,\"945\":2}}],[\"75正好是3\",{\"1\":{\"940\":1}}],[\"75有一个好处\",{\"1\":{\"940\":1}}],[\"75f\",{\"1\":{\"917\":2,\"940\":1}}],[\"7g1\",{\"0\":{\"372\":1}}],[\"7\",{\"0\":{\"453\":1,\"881\":1,\"2261\":1,\"3912\":1},\"1\":{\"342\":1,\"386\":1,\"387\":1,\"468\":1,\"930\":1,\"932\":1,\"967\":1,\"968\":1,\"974\":1,\"979\":1,\"980\":1,\"987\":1,\"997\":1,\"1013\":1,\"1031\":1,\"1066\":1,\"1252\":1,\"1304\":3,\"2394\":1,\"2476\":2,\"2947\":1,\"2955\":1,\"3380\":1,\"3417\":1,\"3431\":1,\"3440\":1,\"3839\":1,\"3840\":1,\"3919\":1,\"4099\":1,\"5325\":1,\"5333\":1,\"5444\":1,\"5496\":3,\"5574\":2,\"5660\":1,\"5697\":1,\"5711\":1}}],[\"以提升效率及节省成本\",{\"1\":{\"3457\":1,\"5726\":1}}],[\"以避免浪费处理器资源\",{\"1\":{\"3256\":1}}],[\"以保证冷数据\",{\"1\":{\"3557\":1,\"5826\":1}}],[\"以保证用户热数据高扩展和高性能指标\",{\"1\":{\"3456\":1,\"5725\":1}}],[\"以保证上层数据查询的高性能\",{\"1\":{\"3455\":1,\"5724\":1}}],[\"以保证操作最大程度的独占性\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"以保证任意时间里只有一个线程在操作共享资源\",{\"1\":{\"1489\":1,\"1657\":1,\"1825\":1,\"1993\":1,\"4916\":1}}],[\"以降低短时间内大量锁请求\",{\"1\":{\"3239\":1,\"4362\":1}}],[\"以网络带宽资源\",{\"1\":{\"2899\":1,\"5277\":1}}],[\"以后\",{\"1\":{\"2896\":1,\"5274\":1}}],[\"以此实现非锁定读\",{\"1\":{\"2871\":1,\"5249\":1}}],[\"以\",{\"1\":{\"2681\":1,\"5059\":1}}],[\"以生成出一个最好的执行计划\",{\"1\":{\"2669\":1,\"5047\":1}}],[\"以单播的方式\",{\"1\":{\"2493\":1,\"5591\":1}}],[\"以前所有的代码都放在同一个工程中\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"以线程为例\",{\"1\":{\"1496\":1,\"1664\":1,\"1832\":1,\"2000\":1,\"4923\":1}}],[\"以免错失读写的机会\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"以实现consumer之间的分区分配\",{\"1\":{\"1267\":1,\"5459\":1}}],[\"以较小的那个为准\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"以及其他用户信息\",{\"1\":{\"3627\":1}}],[\"以及这些密码对应的md5值\",{\"1\":{\"3607\":1}}],[\"以及控制流速控制和熔断处理都是常用的架构手段\",{\"1\":{\"3449\":1,\"5718\":1}}],[\"以及\",{\"1\":{\"2015\":1,\"2027\":1,\"3578\":1,\"4620\":1,\"4632\":1,\"5829\":1}}],[\"以及actuator\",{\"1\":{\"1194\":1,\"4227\":1}}],[\"以及被\",{\"1\":{\"402\":1,\"3857\":1}}],[\"以非事务方式运行\",{\"1\":{\"1104\":1,\"1105\":1,\"4137\":1,\"4138\":1}}],[\"以下是java\",{\"1\":{\"998\":1}}],[\"以下称为异常表\",{\"1\":{\"465\":1,\"3916\":1}}],[\"以上的隔离级别\",{\"1\":{\"2843\":1,\"5221\":1}}],[\"以上两个topic的情况\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"以上方法得到的int的hash值\",{\"1\":{\"1021\":1}}],[\"以上区别基于jdk1\",{\"1\":{\"901\":1}}],[\"以上是\",{\"1\":{\"342\":1}}],[\"以让新版本的开发者不再允许使用这个类\",{\"1\":{\"564\":1}}],[\"以满足自己的特殊需求\",{\"1\":{\"405\":1,\"3860\":1}}],[\"以便于告知方法调用者此方法有异常\",{\"1\":{\"448\":1,\"3907\":1}}],[\"以便\",{\"1\":{\"29\":1,\"3683\":1}}],[\"算法的时间复杂度\",{\"1\":{\"3524\":1,\"5793\":1}}],[\"算法实现的\",{\"1\":{\"382\":1}}],[\"算法实现的收集器\",{\"1\":{\"382\":1}}],[\"算法\",{\"1\":{\"340\":1,\"3649\":1}}],[\"最基本的就是首先做好参数校验\",{\"1\":{\"3017\":1,\"5395\":1}}],[\"最友好\",{\"1\":{\"2994\":1,\"5372\":1}}],[\"最左前缀匹配原则指的是\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"最左前缀匹配原则\",{\"1\":{\"2653\":1,\"5031\":1}}],[\"最近一段时间以来\",{\"1\":{\"2206\":1,\"2221\":1,\"2236\":1,\"2249\":1,\"2262\":1,\"2277\":1,\"5512\":1,\"5537\":1}}],[\"最佳部署容器docker\",{\"1\":{\"2055\":1,\"4660\":1}}],[\"最好在创建主题的时候就把分区规划好\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"最高的隔离级别\",{\"1\":{\"1095\":1,\"4128\":1}}],[\"最低的隔离级别\",{\"1\":{\"1092\":1,\"4125\":1}}],[\"最主要的考虑就是效率\",{\"1\":{\"969\":1}}],[\"最多可以装多少元素\",{\"1\":{\"924\":1}}],[\"最先出队的总是优先级最高的\",{\"1\":{\"731\":1}}],[\"最长路径刚好是最短路径的两倍\",{\"1\":{\"660\":1,\"4001\":1}}],[\"最长路径就是一个红节点一个黑节点\",{\"1\":{\"660\":1,\"4001\":1}}],[\"最长路径的长度\",{\"1\":{\"638\":1}}],[\"最短路径就是全黑节点\",{\"1\":{\"660\":1,\"4001\":1}}],[\"最后问有offer吗\",{\"1\":{\"3423\":1,\"5703\":1}}],[\"最后问我啥时能来实习\",{\"1\":{\"3393\":1,\"5673\":1}}],[\"最后女的hr问看你成绩这么好\",{\"1\":{\"3420\":1,\"5700\":1}}],[\"最后让明天面试\",{\"1\":{\"3371\":1,\"5651\":1}}],[\"最后直到成功为止\",{\"1\":{\"3093\":1,\"4369\":1}}],[\"最后再根据持久化方式\",{\"1\":{\"2974\":1,\"5352\":1}}],[\"最后的结果是用户\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"最后在看看有没有单例工程类在三级缓存中\",{\"1\":{\"1133\":1,\"4166\":1}}],[\"最后以\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"最后一个\",{\"1\":{\"686\":1,\"1036\":1}}],[\"最后\",{\"1\":{\"606\":1,\"807\":1,\"1411\":1,\"1579\":1,\"1747\":1,\"1915\":1,\"2129\":1,\"4734\":1,\"4838\":1}}],[\"最后清理\",{\"1\":{\"334\":1}}],[\"最终的变量是放在了当前线程的\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"最终的结果\",{\"1\":{\"602\":1}}],[\"最终结果都是\",{\"1\":{\"3116\":1,\"4399\":1}}],[\"最终还是要\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"最终转换成http的请求形式\",{\"1\":{\"2087\":1,\"4692\":1}}],[\"最终给开发者留出了一套简单易懂\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"最终它调用了\",{\"1\":{\"1432\":1,\"1600\":1,\"1768\":1,\"1936\":1,\"4859\":1}}],[\"最终加载meta\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"最终获取到以后调用\",{\"1\":{\"1133\":1,\"4166\":1}}],[\"最终导致依赖创建失败\",{\"1\":{\"1113\":1,\"4146\":1}}],[\"最终陷入瘫痪\",{\"1\":{\"1018\":1}}],[\"最终得到的index的值不一样了\",{\"1\":{\"994\":1}}],[\"最终标记阶段需要把\",{\"1\":{\"379\":1}}],[\"最终标记\",{\"1\":{\"379\":1}}],[\"最大扩容可达\",{\"1\":{\"3311\":1,\"4576\":1}}],[\"最大可以同时运行的线程数量\",{\"1\":{\"3290\":1,\"4554\":1}}],[\"最大的改造就是使用了\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"最大的问题在于\",{\"1\":{\"541\":1}}],[\"最大的问题是\",{\"1\":{\"539\":1}}],[\"最大堆内存大小为\",{\"1\":{\"249\":1}}],[\"最顶层的加载类\",{\"1\":{\"402\":1,\"3857\":1}}],[\"虚拟的双向队列即不存在队列实例\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"虚拟内存管理\",{\"0\":{\"1327\":1,\"1371\":1,\"1539\":1,\"1707\":1,\"1875\":1,\"4798\":1}}],[\"虚拟机如果检测不到某段代码被共享和竞争的可能性\",{\"1\":{\"3240\":1,\"4363\":1}}],[\"虚拟机中有很多线程\",{\"1\":{\"1457\":1,\"1625\":1,\"1793\":1,\"1961\":1,\"4884\":1}}],[\"虚拟机中的\",{\"1\":{\"342\":1}}],[\"虚拟机这个进程上面的\",{\"1\":{\"1457\":1,\"1625\":1,\"1793\":1,\"1961\":1,\"4884\":1}}],[\"虚拟机将这段时间对象变化记录在线程的\",{\"1\":{\"379\":1}}],[\"虚拟机将会抛出一个outofmemoryerror异常\",{\"1\":{\"209\":1}}],[\"虚拟机将会抛出一个\",{\"1\":{\"208\":1}}],[\"虚拟机的\",{\"1\":{\"335\":1}}],[\"虚拟机使用该算法来判断对象是否可被回收\",{\"1\":{\"303\":1}}],[\"虚拟机不使用引用计数算法\",{\"1\":{\"300\":1}}],[\"虚拟机指令根据这张常量表找到要执行的类名\",{\"1\":{\"285\":1}}],[\"虚拟机特有的概念\",{\"1\":{\"282\":1}}],[\"虚拟机\",{\"1\":{\"277\":1,\"3168\":1,\"4513\":1}}],[\"虚拟机规范把方法区描述为堆的一个逻辑部分\",{\"1\":{\"241\":1,\"280\":1}}],[\"虚拟机规范中方法区的实现\",{\"1\":{\"240\":1}}],[\"虚拟机规范规定\",{\"1\":{\"229\":1}}],[\"虚拟机把堆内存逻辑上划分成三块区域\",{\"1\":{\"224\":1}}],[\"虚拟机管理的内存中最大的一块\",{\"1\":{\"223\":1}}],[\"虚拟机栈中引用的对象\",{\"1\":{\"304\":1}}],[\"虚拟机栈用于管理\",{\"1\":{\"220\":1}}],[\"虚拟机栈可以动态扩展\",{\"1\":{\"209\":1}}],[\"虚拟机栈允许的最大容量\",{\"1\":{\"208\":1}}],[\"虚拟机栈容量可以在线程创建的时候独立选定\",{\"1\":{\"208\":1}}],[\"虚拟机栈\",{\"1\":{\"187\":1,\"208\":1,\"3136\":1,\"4448\":1}}],[\"虚拟机定义了若干种程序运行期间会使用到的运行时数据区\",{\"1\":{\"186\":1}}],[\"虚引用\",{\"1\":{\"319\":1}}],[\"watistatus\",{\"1\":{\"3073\":1,\"4428\":1}}],[\"waitstatus\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"wait\",{\"0\":{\"2435\":1,\"2436\":1,\"2437\":1,\"2438\":1,\"2439\":1,\"2440\":1},\"1\":{\"1357\":1,\"1380\":1,\"1384\":1,\"1388\":1,\"1389\":1,\"1394\":1,\"1525\":1,\"1548\":1,\"1552\":1,\"1556\":1,\"1557\":1,\"1562\":1,\"1693\":1,\"1716\":1,\"1720\":1,\"1724\":1,\"1725\":1,\"1730\":1,\"1861\":1,\"1884\":1,\"1888\":1,\"1892\":1,\"1893\":1,\"1898\":1,\"2320\":1,\"2321\":1,\"2322\":1,\"2323\":1,\"2324\":1,\"2325\":1,\"3169\":1,\"3288\":1,\"4514\":1,\"4552\":1,\"4784\":1,\"4807\":1,\"4811\":1,\"4815\":1,\"4816\":1,\"4821\":1}}],[\"wang\",{\"1\":{\"1014\":1}}],[\"wechat\",{\"1\":{\"3361\":1,\"4615\":1}}],[\"websockets\",{\"1\":{\"3383\":1,\"5663\":1}}],[\"web\",{\"1\":{\"1181\":1,\"1183\":2,\"4214\":1,\"4216\":2}}],[\"weixin\",{\"1\":{\"1154\":1,\"1242\":1,\"2877\":1,\"3130\":1,\"3155\":1,\"3276\":1,\"3361\":1,\"4187\":1,\"4275\":1,\"4365\":1,\"4470\":1,\"4504\":1,\"4615\":1,\"5255\":1}}],[\"weakreference\",{\"1\":{\"318\":1}}],[\"will\",{\"1\":{\"999\":1,\"3288\":2,\"4552\":2}}],[\"with\",{\"0\":{\"453\":1,\"3912\":1},\"1\":{\"2689\":1,\"3288\":1,\"4552\":1,\"5067\":1}}],[\"word\",{\"1\":{\"1014\":1,\"3225\":2,\"4349\":2}}],[\"worker就会阻塞\",{\"1\":{\"3317\":1}}],[\"workerset中的线程会不断的从workqueue中获取线程然后执行\",{\"1\":{\"3317\":1}}],[\"workqueue\",{\"1\":{\"3288\":6,\"3292\":1,\"4552\":6,\"4556\":1}}],[\"work\",{\"1\":{\"786\":1,\"788\":1}}],[\"world\",{\"1\":{\"364\":1}}],[\"write将数据写入到了系统内核缓冲区之后直接返回了\",{\"1\":{\"2980\":1,\"5358\":1}}],[\"writefields\",{\"1\":{\"752\":1}}],[\"writeint\",{\"1\":{\"749\":1}}],[\"write\",{\"0\":{\"1403\":1,\"1571\":1,\"1739\":1,\"1907\":1,\"4830\":1},\"1\":{\"749\":3,\"1354\":1,\"1393\":1,\"1400\":1,\"1405\":1,\"1410\":1,\"1418\":1,\"1522\":1,\"1561\":1,\"1568\":1,\"1573\":1,\"1578\":1,\"1586\":1,\"1690\":1,\"1729\":1,\"1736\":1,\"1741\":1,\"1746\":1,\"1754\":1,\"1858\":1,\"1897\":1,\"1904\":1,\"1909\":1,\"1914\":1,\"1922\":1,\"2715\":1,\"2748\":1,\"2980\":1,\"2986\":1,\"4781\":1,\"4820\":1,\"4827\":1,\"4832\":1,\"4837\":1,\"4845\":1,\"5093\":1,\"5126\":1,\"5358\":1,\"5364\":1}}],[\"writeobject\",{\"1\":{\"749\":2,\"752\":1}}],[\"www\",{\"1\":{\"523\":1,\"525\":1,\"527\":1,\"609\":1,\"678\":1,\"727\":1,\"1397\":1,\"1506\":1,\"1565\":1,\"1674\":1,\"1733\":1,\"1842\":1,\"1901\":1,\"2010\":1,\"2524\":1,\"2526\":1,\"2536\":1,\"2537\":2,\"2538\":1,\"2539\":1,\"2540\":1,\"2541\":1,\"3656\":1,\"4824\":1,\"4933\":1,\"5622\":1,\"5624\":1,\"5634\":1,\"5635\":2,\"5636\":1,\"5637\":1,\"5638\":1,\"5639\":1}}],[\"when\",{\"1\":{\"3288\":3,\"4552\":3}}],[\"where\",{\"1\":{\"83\":1,\"2661\":1,\"3737\":1,\"5039\":1}}],[\"while\",{\"1\":{\"457\":1}}],[\"弱引用当然也会一直有值\",{\"1\":{\"3201\":1}}],[\"弱引用\",{\"1\":{\"316\":1}}],[\"作为消息队列来使用\",{\"1\":{\"3536\":1,\"5805\":1}}],[\"作为索引结构\",{\"1\":{\"2581\":1,\"2592\":1,\"2597\":1,\"4959\":1,\"4970\":1,\"4975\":1}}],[\"作为一线开发者\",{\"1\":{\"2207\":1,\"2222\":1,\"2237\":1,\"2250\":1,\"2263\":1,\"2278\":1,\"5513\":1,\"5538\":1}}],[\"作为一个优秀高效且可靠的分布式协调框架\",{\"1\":{\"2108\":1,\"4713\":1}}],[\"作为\",{\"1\":{\"2022\":1,\"2136\":1,\"4627\":1,\"4741\":1}}],[\"作为起始点\",{\"1\":{\"1325\":1,\"4282\":1}}],[\"作为起始点进行搜索\",{\"1\":{\"302\":1}}],[\"作为实现栈的接口\",{\"1\":{\"580\":1}}],[\"作为动态数组\",{\"1\":{\"542\":1}}],[\"作用域是同一个\",{\"1\":{\"1221\":1,\"4254\":1}}],[\"作用\",{\"1\":{\"489\":1,\"3940\":1}}],[\"作者设置为\",{\"1\":{\"118\":1,\"3772\":1}}],[\"可查的异常\",{\"0\":{\"3899\":1}}],[\"可查异常虽然是异常状况\",{\"1\":{\"442\":1,\"3901\":1}}],[\"可查异常\",{\"1\":{\"441\":1,\"3900\":1}}],[\"可随意发给期望同密钥持有者进行安全通信的人\",{\"1\":{\"3647\":1}}],[\"可见直接使用md5加密是不安全的\",{\"1\":{\"3624\":1}}],[\"可中断\",{\"1\":{\"3209\":1,\"4333\":1}}],[\"可由\",{\"1\":{\"2930\":2,\"2945\":2,\"5308\":2,\"5323\":2}}],[\"可减少表结构变更带来的影响\",{\"1\":{\"2901\":1,\"5279\":1}}],[\"可重入锁的一个好处是可一定程度避免死锁\",{\"1\":{\"3249\":1,\"4479\":1}}],[\"可重入锁\",{\"0\":{\"4476\":1},\"1\":{\"3247\":1,\"3249\":1,\"4477\":1,\"4479\":1}}],[\"可重复读\",{\"1\":{\"2834\":1,\"2841\":1,\"2843\":1,\"2845\":1,\"2846\":1,\"2852\":2,\"5212\":1,\"5219\":1,\"5221\":1,\"5223\":1,\"5224\":1,\"5230\":2}}],[\"可重复读隔离级别的事务\",{\"1\":{\"2703\":1,\"5081\":1}}],[\"可重读\",{\"1\":{\"2569\":1,\"4947\":1}}],[\"可谓是风光一时\",{\"1\":{\"2560\":1,\"4938\":1}}],[\"可靠性\",{\"1\":{\"2382\":1}}],[\"可靠的\",{\"1\":{\"2349\":1,\"2352\":1}}],[\"可用于存储比\",{\"1\":{\"2889\":1,\"5267\":1}}],[\"可用性\",{\"1\":{\"2145\":1,\"2149\":1,\"2154\":1,\"4750\":1,\"4754\":1,\"4759\":1}}],[\"可用消息的总量都不会超过配置参数所指定的大小\",{\"1\":{\"1249\":1,\"5441\":1}}],[\"可运行线程池\",{\"1\":{\"1344\":1,\"1512\":1,\"1680\":1,\"1848\":1,\"4771\":1}}],[\"可在\",{\"1\":{\"1140\":1,\"4173\":1}}],[\"可参考\",{\"1\":{\"1006\":1}}],[\"可能堆积大量的请求\",{\"1\":{\"3342\":1,\"3344\":1,\"4599\":1,\"4601\":1}}],[\"可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁\",{\"1\":{\"3273\":1,\"4501\":1}}],[\"可能占用\",{\"1\":{\"3254\":1,\"4483\":1}}],[\"可能引发死锁\",{\"1\":{\"3253\":1,\"4483\":1}}],[\"可能直接就被这么多请求弄宕机了\",{\"1\":{\"3015\":1,\"3033\":1,\"3043\":1,\"5393\":1,\"5411\":1,\"5421\":1}}],[\"可能发生幻读现象\",{\"1\":{\"2841\":1,\"5219\":1}}],[\"可能发生不可重复读和幻读现象\",{\"1\":{\"2840\":1,\"5218\":1}}],[\"可能发生脏读\",{\"1\":{\"2839\":1,\"5217\":1}}],[\"可能发生异常的结束点\",{\"1\":{\"472\":1,\"3923\":1}}],[\"可能发生异常的起始点\",{\"1\":{\"471\":1,\"3922\":1}}],[\"可能还需要根据指针或主键再到数据文件或表中查询\",{\"1\":{\"2646\":1,\"5024\":1}}],[\"可能还没有到达叶子节点\",{\"1\":{\"2596\":1,\"4974\":1}}],[\"可能很多网站还没开始支持http\",{\"1\":{\"2213\":1,\"2228\":1,\"2243\":1,\"2256\":1,\"2269\":1,\"2284\":1,\"5520\":1,\"5543\":1}}],[\"可能存在数据丢失\",{\"1\":{\"2195\":1,\"4317\":1}}],[\"可能就执行了几步\",{\"1\":{\"2195\":1,\"4317\":1}}],[\"可能不是0了\",{\"1\":{\"2128\":1,\"4733\":1}}],[\"可能会创建大量线程\",{\"1\":{\"3310\":1,\"3343\":1,\"4575\":1,\"4600\":1}}],[\"可能会发生意想不到的事情\",{\"1\":{\"2732\":1,\"5110\":1}}],[\"可能会二次查询\",{\"1\":{\"2646\":1,\"5024\":1}}],[\"可能会导致脏读\",{\"1\":{\"1092\":1,\"4125\":1}}],[\"可能会产生死锁等问题\",{\"1\":{\"893\":1}}],[\"可能看完了你还是有点蒙\",{\"1\":{\"922\":1}}],[\"可能有多棵子树\",{\"1\":{\"621\":1}}],[\"可是实际上\",{\"1\":{\"598\":1}}],[\"可预测的停顿\",{\"1\":{\"383\":1}}],[\"可达性分析算法\",{\"0\":{\"301\":1}}],[\"可以选择移除等待队列中的最不常用的线程\",{\"1\":{\"3399\":1,\"5679\":1}}],[\"可以同时绑定多个\",{\"1\":{\"3211\":1,\"4335\":1}}],[\"可以访问到该线程的threadlocalmap对象\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"可以理解为线程数是可以无限扩展的\",{\"1\":{\"3310\":1,\"4575\":1}}],[\"可以理解为只是threadlocalmap的封装\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"可以理解为分配结果是带\",{\"1\":{\"1286\":1,\"5478\":1}}],[\"可以让高速缓存中的数据失效\",{\"1\":{\"3145\":1,\"4457\":1}}],[\"可以适当增加位数组大小或者调整我们的哈希函数来降低概率\",{\"1\":{\"3031\":1,\"5409\":1}}],[\"可以加载\",{\"1\":{\"2983\":1,\"5361\":1}}],[\"可以对快照进行备份\",{\"1\":{\"2964\":1,\"5342\":1}}],[\"可以把子查询优化为\",{\"0\":{\"2902\":1,\"5280\":1}}],[\"可以把树分为有序树和无序树两种概念\",{\"1\":{\"621\":1}}],[\"可以考虑限制自旋的次数\",{\"1\":{\"3121\":1,\"4403\":1}}],[\"可以考虑将其分解成多个表\",{\"1\":{\"2892\":1,\"5270\":1}}],[\"可以考虑建立索引\",{\"1\":{\"2663\":1,\"5041\":1}}],[\"可以很大程度上避免幻读现象的发生\",{\"1\":{\"2845\":1,\"5223\":1}}],[\"可以不指定主键的值\",{\"1\":{\"2755\":1,\"5133\":1}}],[\"可以不用通过http框架去封装http请求报文的方式\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"可以分为全局锁\",{\"1\":{\"2685\":1,\"5063\":1}}],[\"可以简单理解为每个索引都对应着一颗\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"可以将线程数设置为\",{\"1\":{\"3328\":1,\"4585\":1}}],[\"可以将threadlocal类形象的比喻成存放数据的盒子\",{\"1\":{\"3185\":1,\"4530\":1}}],[\"可以将快照复制到其他服务器从而创建具有相同数据的服务器副本\",{\"1\":{\"2964\":1,\"5342\":1}}],[\"可以将区分度高的字段放在最左边\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"可以将消息保留到不再使用他们为止\",{\"1\":{\"1250\":1,\"5442\":1}}],[\"可以定位主键的位置\",{\"1\":{\"2622\":1,\"5000\":1}}],[\"可以有\",{\"1\":{\"2612\":1,\"4990\":1}}],[\"可以有效减少加锁操作\",{\"1\":{\"2579\":1,\"4957\":1}}],[\"可以的\",{\"1\":{\"2411\":1,\"3105\":1,\"4387\":1}}],[\"可以再建一个分表\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"可以放到缓存里\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"可以放入\",{\"1\":{\"698\":1}}],[\"可以并行开发\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"可以更精准的制定优化服务方案\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"可以保证消息在分区内的顺序性\",{\"1\":{\"3465\":1,\"5734\":1}}],[\"可以保证每次出队的任务都是当前队列中执行时间最靠前的\",{\"1\":{\"3311\":1,\"4576\":1}}],[\"可以保证后续的更新\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"可以保存所有待检测的\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"可以用任何一种语言开发\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"可以用不同的存储技术\",{\"1\":{\"2041\":1,\"4646\":1}}],[\"可以用不同的编程语言\",{\"1\":{\"2040\":1,\"4645\":1}}],[\"可以用于监听web应用程序中某些对象的创建\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"可以应对不同的业务场景\",{\"1\":{\"1438\":1,\"1606\":1,\"1774\":1,\"1942\":1,\"4865\":1}}],[\"可以减少\",{\"1\":{\"3272\":1,\"4500\":1}}],[\"可以减少一次数据拷贝的过程\",{\"1\":{\"1412\":1,\"1580\":1,\"1748\":1,\"1916\":1,\"4839\":1}}],[\"可以减小树和链表之间频繁转化的可能性\",{\"1\":{\"880\":1,\"3988\":1}}],[\"可以说这是最有用的进程间通信方式\",{\"1\":{\"1369\":1,\"1537\":1,\"1705\":1,\"1873\":1,\"4796\":1}}],[\"可以实现本机任意两个进程通信\",{\"1\":{\"1365\":1,\"1533\":1,\"1701\":1,\"1869\":1,\"4792\":1}}],[\"可以实现健康检查\",{\"1\":{\"1178\":1,\"4211\":1}}],[\"可以看作是行级锁的一个升级\",{\"1\":{\"2579\":1,\"4957\":1}}],[\"可以看作是\",{\"1\":{\"2509\":1,\"5607\":1}}],[\"可以看这篇文章\",{\"1\":{\"2416\":1}}],[\"可以看做是不同主机之间的进程进行双向通信的端点\",{\"1\":{\"1370\":1,\"1538\":1,\"1706\":1,\"1874\":1,\"4797\":1}}],[\"可以看出\",{\"1\":{\"1294\":1,\"5486\":1}}],[\"可以看到进程里有\",{\"1\":{\"1460\":1,\"1628\":1,\"1796\":1,\"1964\":1,\"4887\":1}}],[\"可以看到\",{\"1\":{\"991\":1}}],[\"可以看到只保存了非null的数组位置上的数据\",{\"1\":{\"750\":1}}],[\"可以使分区分配的更均衡\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"可以使用threadpoolexecutor以下方法\",{\"1\":{\"3355\":1}}],[\"可以使用callerrunspolicy\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"可以使用下面这两个方式\",{\"1\":{\"2773\":1,\"5151\":1}}],[\"可以使用下面这条命令\",{\"1\":{\"2718\":1,\"5096\":1}}],[\"可以使用下面的命令\",{\"1\":{\"2714\":1,\"5092\":1}}],[\"可以使用同一个端口吗\",{\"0\":{\"2410\":1},\"1\":{\"2301\":1,\"2416\":1}}],[\"可以使用hashset的一个子类linkedhashset\",{\"1\":{\"683\":1}}],[\"可以使用\",{\"1\":{\"353\":1,\"2934\":1,\"3123\":1,\"4405\":1,\"5312\":1}}],[\"可以被多个会话共享\",{\"1\":{\"1237\":1,\"4270\":1}}],[\"可以在几个小时内就找到一个md5值对应的原文\",{\"1\":{\"3589\":1}}],[\"可以在事务提交后直接删除\",{\"1\":{\"2873\":1,\"5251\":1}}],[\"可以在非聚簇索引遍历过程中\",{\"1\":{\"2656\":1,\"5034\":1}}],[\"可以在客户端请求一个资源时\",{\"1\":{\"2512\":1,\"5610\":1}}],[\"可以在消费者内部采用多线程的方式去消费\",{\"1\":{\"1314\":1,\"5506\":1}}],[\"可以在\",{\"1\":{\"1213\":1,\"2414\":1,\"4246\":1}}],[\"可以在两段做插入和删除操作\",{\"1\":{\"586\":1}}],[\"可以进行调试\",{\"1\":{\"1134\":1,\"4167\":1}}],[\"可以从半成品缓存中获取\",{\"1\":{\"1129\":1,\"4162\":1}}],[\"可以正常创建\",{\"1\":{\"1118\":1,\"4151\":1}}],[\"可以阻止脏读和不可重复读\",{\"1\":{\"1094\":1,\"4127\":1}}],[\"可以阻止脏读\",{\"1\":{\"1093\":1,\"4126\":1}}],[\"可以方便地根据键的顺序进行查找\",{\"1\":{\"1036\":1}}],[\"可以方便地根据顺序进行查找和操作\",{\"1\":{\"686\":1}}],[\"可以方便地按照键存取值\",{\"1\":{\"904\":1}}],[\"可以代理未实现任何接口的类\",{\"1\":{\"864\":1,\"4073\":1}}],[\"可以直接把内核缓冲区里的数据拷贝到\",{\"1\":{\"1419\":1,\"1587\":1,\"1755\":1,\"1923\":1,\"4846\":1}}],[\"可以直接使用hashtable\",{\"1\":{\"892\":1}}],[\"可以直接代理实现类\",{\"1\":{\"837\":1,\"4046\":1}}],[\"可以直接对新生代和老年代一起回收\",{\"1\":{\"374\":1}}],[\"可以测试一下\",{\"1\":{\"756\":1}}],[\"可以提供弱一致性\",{\"1\":{\"750\":1}}],[\"可以作为队列\",{\"1\":{\"714\":1}}],[\"可以随机访问\",{\"1\":{\"709\":1}}],[\"可以高效地添加\",{\"1\":{\"682\":1}}],[\"可以忽略性能差异\",{\"1\":{\"674\":1,\"4016\":1}}],[\"可以是red\",{\"1\":{\"660\":1,\"4001\":1}}],[\"可以确定相应的传递\",{\"1\":{\"629\":1}}],[\"可以满足在两段进行插入和删除\",{\"1\":{\"583\":1}}],[\"可以这么写\",{\"1\":{\"570\":1}}],[\"可以创建一个合适的异常类实例并抛出它\",{\"1\":{\"451\":1,\"3910\":1}}],[\"可以避免\",{\"1\":{\"2515\":1,\"5613\":1}}],[\"可以避免类的重复加载\",{\"1\":{\"428\":1,\"3885\":1}}],[\"可以避免一系列的非线程安全问题\",{\"1\":{\"273\":1}}],[\"可以通过添加读锁实现共享\",{\"1\":{\"3265\":1,\"4493\":1}}],[\"可以通过虚拟机参数更改\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"可以通过\",{\"1\":{\"2972\":1,\"5350\":1}}],[\"可以通过创建快照来获得存储在内存里面的数据在\",{\"1\":{\"2964\":1,\"5342\":1}}],[\"可以通过代码获取到我们的设置值\",{\"1\":{\"250\":1}}],[\"可以通过参数\",{\"1\":{\"210\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"29\":1,\"3683\":1}}],[\"垃圾收集器\",{\"0\":{\"3836\":1}}],[\"垃圾收集是在老年代内存满时执行的\",{\"1\":{\"237\":1}}],[\"垃圾回收算法\",{\"0\":{\"3835\":1}}],[\"垃圾回收时间以及回收所获得的空间\",{\"1\":{\"375\":1}}],[\"垃圾回收机制\",{\"0\":{\"295\":1,\"3833\":1}}],[\"3就横空出世了\",{\"1\":{\"5535\":1}}],[\"3就已经来了\",{\"1\":{\"2213\":1,\"2228\":1,\"2243\":1,\"2256\":1,\"2269\":1,\"2284\":1,\"5520\":1,\"5543\":1}}],[\"38c93c677124\",{\"1\":{\"3656\":1}}],[\"3md5是对称加密还是非对称加密\",{\"0\":{\"3648\":1}}],[\"3为什么不推荐使用内置线程池\",{\"0\":{\"3336\":1}}],[\"3为什么是三次握手\",{\"0\":{\"2420\":1}}],[\"3可重入锁\",{\"0\":{\"3246\":1}}],[\"3轻量级锁\",{\"0\":{\"3229\":1}}],[\"3threadlocal造成内存泄露的问题\",{\"0\":{\"3198\":1}}],[\"3throw和throws的区别\",{\"0\":{\"446\":1}}],[\"3volatile如何防止指令重排序\",{\"0\":{\"3142\":1}}],[\"3只能保证单个变量的原子性\",{\"0\":{\"3122\":1}}],[\"30下班\",{\"1\":{\"3407\":1,\"5687\":1}}],[\"30上班\",{\"1\":{\"3407\":1,\"5687\":1}}],[\"30s\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"300\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"3001\",{\"1\":{\"653\":1,\"897\":1,\"1295\":1,\"1304\":1,\"3888\":1,\"5487\":1,\"5496\":1}}],[\"3accept\",{\"0\":{\"2446\":1}}],[\"3第一次挥手丢失了\",{\"0\":{\"2431\":1}}],[\"3什么是\",{\"0\":{\"2348\":1}}],[\"3是一个更加正确的选择\",{\"1\":{\"2214\":1,\"2229\":1,\"2244\":1,\"2257\":1,\"2270\":1,\"2285\":1,\"5521\":1,\"5544\":1}}],[\"3已经悄然而至了\",{\"1\":{\"2212\":1,\"2227\":1,\"2242\":1,\"2255\":1,\"2268\":1,\"2283\":1,\"5519\":1,\"5542\":1}}],[\"3已经是箭在弦上了\",{\"1\":{\"2207\":1,\"2222\":1,\"2237\":1,\"2250\":1,\"2263\":1,\"2278\":1,\"5513\":1,\"5538\":1}}],[\"3了\",{\"1\":{\"2206\":1,\"2207\":1,\"2221\":1,\"2222\":1,\"2236\":1,\"2237\":1,\"2249\":1,\"2250\":1,\"2262\":1,\"2263\":1,\"2277\":1,\"2278\":1,\"5512\":1,\"5513\":1,\"5537\":1,\"5538\":1}}],[\"3的新闻有很多\",{\"1\":{\"2206\":1,\"2221\":1,\"2236\":1,\"2249\":1,\"2262\":1,\"2277\":1,\"5512\":1,\"5537\":1}}],[\"3d\",{\"1\":{\"1304\":1,\"5496\":1}}],[\"3个分区\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"3总结\",{\"0\":{\"949\":1,\"1030\":1,\"3177\":1}}],[\"32位\",{\"1\":{\"2362\":1,\"2364\":1}}],[\"32\",{\"1\":{\"945\":1,\"2371\":1}}],[\"35590459\",{\"1\":{\"868\":1,\"3976\":1}}],[\"3静态代理\",{\"0\":{\"839\":1}}],[\"3抽象⼯⼚模式了解吗\",{\"0\":{\"830\":1}}],[\"3单例模式\",{\"0\":{\"817\":1}}],[\"33709582\",{\"1\":{\"520\":1,\"3971\":1}}],[\"3构造类的实例化对象\",{\"0\":{\"503\":1}}],[\"3类加载器总结\",{\"0\":{\"400\":1}}],[\"3类加载器\",{\"0\":{\"391\":1}}],[\"3parallel\",{\"0\":{\"354\":1}}],[\"3垃圾收集器\",{\"0\":{\"341\":1}}],[\"3复制\",{\"0\":{\"331\":1}}],[\"3\",{\"0\":{\"295\":1,\"296\":1,\"323\":1,\"324\":1,\"329\":1,\"331\":1,\"336\":1,\"341\":1,\"345\":2,\"350\":2,\"354\":2,\"357\":2,\"359\":2,\"361\":2,\"372\":2,\"392\":1,\"397\":1,\"400\":1,\"414\":1,\"640\":1,\"659\":1,\"687\":1,\"722\":1,\"765\":1,\"771\":1,\"772\":1,\"782\":1,\"792\":1,\"872\":1,\"1040\":1,\"2153\":1,\"2166\":1,\"2276\":1,\"2428\":1,\"2429\":1,\"2430\":1,\"2431\":1,\"2432\":1,\"2433\":1,\"2434\":1,\"2435\":1,\"2436\":1,\"2437\":1,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2513\":1,\"2555\":1,\"3067\":1,\"3109\":1,\"3112\":1,\"3119\":1,\"3122\":1,\"3126\":1,\"3182\":1,\"3183\":1,\"3188\":1,\"3198\":1,\"3241\":1,\"3242\":1,\"3244\":1,\"3246\":1,\"3250\":1,\"3257\":1,\"3261\":1,\"3264\":1,\"3267\":1,\"3469\":1,\"4000\":1,\"4288\":1,\"4758\":1,\"5611\":1,\"5738\":1},\"1\":{\"468\":3,\"500\":1,\"516\":1,\"519\":1,\"651\":1,\"682\":1,\"686\":1,\"727\":1,\"820\":1,\"851\":1,\"976\":1,\"990\":1,\"1014\":1,\"1062\":1,\"1117\":1,\"1130\":1,\"1144\":1,\"1151\":1,\"1198\":1,\"1214\":1,\"1295\":1,\"1419\":1,\"1447\":1,\"1587\":1,\"1615\":1,\"1755\":1,\"1783\":1,\"1923\":1,\"1951\":1,\"2129\":1,\"2207\":1,\"2211\":1,\"2222\":1,\"2226\":1,\"2237\":1,\"2241\":1,\"2250\":1,\"2254\":1,\"2263\":1,\"2267\":1,\"2278\":1,\"2282\":1,\"2313\":1,\"2382\":1,\"2514\":3,\"2515\":2,\"2516\":1,\"2570\":1,\"2788\":1,\"2908\":1,\"2914\":1,\"2932\":1,\"2959\":1,\"3099\":1,\"3200\":1,\"3289\":1,\"3368\":1,\"3376\":1,\"3398\":1,\"3404\":1,\"3413\":1,\"3427\":1,\"3436\":1,\"3509\":1,\"3511\":1,\"3525\":1,\"3919\":3,\"3951\":1,\"3967\":1,\"3970\":1,\"4029\":1,\"4060\":1,\"4095\":1,\"4150\":1,\"4163\":1,\"4177\":1,\"4184\":1,\"4231\":1,\"4247\":1,\"4377\":1,\"4553\":1,\"4734\":1,\"4846\":1,\"4874\":1,\"4948\":1,\"5166\":1,\"5286\":1,\"5292\":1,\"5310\":1,\"5337\":1,\"5487\":1,\"5513\":1,\"5518\":1,\"5530\":1,\"5535\":2,\"5538\":1,\"5541\":1,\"5612\":3,\"5613\":2,\"5614\":1,\"5648\":1,\"5656\":1,\"5678\":1,\"5684\":1,\"5693\":1,\"5707\":1,\"5778\":1,\"5780\":1,\"5794\":1}}],[\"3本地方法栈\",{\"0\":{\"218\":1}}],[\"下午6\",{\"1\":{\"3407\":1,\"5687\":1}}],[\"下次我要是重启\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"下的\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"下的meta\",{\"1\":{\"1146\":1,\"4179\":1}}],[\"下的所有\",{\"1\":{\"404\":1,\"3859\":1}}],[\"下面这一段代码\",{\"1\":{\"3564\":1}}],[\"下面这张图可以加深你对线程池中各个参数的相互关系的理解\",{\"1\":{\"3298\":1,\"4562\":1}}],[\"下面的\",{\"1\":{\"3259\":1,\"4487\":1}}],[\"下面的内容整理自\",{\"1\":{\"2597\":1,\"4975\":1}}],[\"下面用一个小示例解释一下\",{\"1\":{\"3095\":1,\"4371\":1}}],[\"下面我先来介绍一下\",{\"1\":{\"2123\":1,\"4728\":1}}],[\"下面我们通过一段代码来看看局部性原理\",{\"1\":{\"1333\":1}}],[\"下面就谈一谈\",{\"1\":{\"1402\":1,\"1570\":1,\"1738\":1,\"1906\":1,\"4829\":1}}],[\"下面是几种常见的线程同步的方式\",{\"1\":{\"1352\":1,\"1520\":1,\"1688\":1,\"1856\":1,\"4779\":1}}],[\"下面举例来说明分配的效果\",{\"1\":{\"1290\":1,\"5482\":1}}],[\"下面\",{\"1\":{\"567\":1}}],[\"下标越界异常\",{\"1\":{\"436\":1,\"3895\":1}}],[\"下图是它的总体架构图\",{\"1\":{\"2019\":1,\"4624\":1}}],[\"下图中的那些null节点才是叶子节点\",{\"1\":{\"663\":1,\"4004\":1}}],[\"下图展示的各种类加载器之间的层次关系被称为类加载器的\",{\"1\":{\"419\":1,\"3875\":1}}],[\"下图来自\",{\"1\":{\"294\":1}}],[\"下一篇\",{\"1\":{\"19\":1,\"3673\":1}}],[\"则需要在文章微服务中创建app端需要的文章\",{\"1\":{\"3512\":1,\"5781\":1}}],[\"则需要修改自媒体文章的状态\",{\"1\":{\"3511\":1,\"5780\":1}}],[\"则需要先取出主键的值\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"则放行\",{\"1\":{\"3482\":1,\"3493\":1,\"5751\":1,\"5762\":1}}],[\"则路由到后台管理微服务进行登录\",{\"1\":{\"3479\":1,\"3490\":1,\"5748\":1,\"5759\":1}}],[\"则新的任务会被暂存在一个任务队列中\",{\"1\":{\"3332\":1,\"4589\":1}}],[\"则立即执行\",{\"1\":{\"3332\":1,\"4589\":1}}],[\"则会创建新的线程处理任务\",{\"1\":{\"3334\":1,\"4591\":1}}],[\"则会优先使用可复用的线程\",{\"1\":{\"3334\":1,\"4591\":1}}],[\"则会丢弃该任务\",{\"1\":{\"3302\":1,\"4567\":1}}],[\"则会在\",{\"1\":{\"2396\":1}}],[\"则会在传输层进行分片\",{\"1\":{\"2395\":1}}],[\"则返回错误信息\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"则直接将自己挂起\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"则将对象头设置成无锁状态\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"则将当前请求资源的线程设置为有效的工作线程\",{\"1\":{\"3070\":1,\"4424\":1}}],[\"则表示锁可以被获取\",{\"1\":{\"3170\":1,\"4515\":1}}],[\"则以原子方式将该引用和该标志的值设置为给定的更新值\",{\"1\":{\"3117\":1,\"4400\":1}}],[\"则以非事务的方式继续运行\",{\"1\":{\"1100\":1,\"4133\":1}}],[\"则可以通过\",{\"1\":{\"2871\":1,\"5249\":1}}],[\"则为空\",{\"1\":{\"2858\":1,\"5236\":1}}],[\"则商品在商家手中\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"则给商家付了钱\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"则要执行这条命令\",{\"1\":{\"2688\":1,\"2693\":1,\"5066\":1,\"5071\":1}}],[\"则就会使用该字段过滤一批数据\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"则选择该字段为默认的主键\",{\"1\":{\"2619\":1,\"4997\":1}}],[\"则取出其\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"则它直接返回\",{\"1\":{\"2537\":1,\"5635\":1}}],[\"则使用空闲线程来处理\",{\"1\":{\"3310\":1,\"4575\":1}}],[\"则使用文本格式的报文\",{\"1\":{\"2510\":1,\"5608\":1}}],[\"则使用串行方式\",{\"1\":{\"2509\":1,\"5607\":1}}],[\"则使用逗号分割\",{\"1\":{\"448\":1,\"3907\":1}}],[\"则引入了更多的缓存控制策略例如\",{\"1\":{\"2506\":1,\"5604\":1}}],[\"则没有\",{\"1\":{\"2387\":1}}],[\"则mq服务器会push消息给消费者\",{\"1\":{\"2177\":1,\"4299\":1}}],[\"则通过数据行的\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"则通过\",{\"1\":{\"2026\":1,\"4631\":1}}],[\"则通过父类的loadclass来加载该类\",{\"1\":{\"421\":1,\"3878\":1}}],[\"则从\",{\"1\":{\"2024\":1,\"4629\":1}}],[\"则交由当前连接对应的\",{\"1\":{\"1468\":1,\"1483\":1,\"1636\":1,\"1651\":1,\"1804\":1,\"1819\":1,\"1972\":1,\"1987\":1,\"4895\":1,\"4910\":1}}],[\"则交由\",{\"1\":{\"1467\":1,\"1482\":1,\"1635\":1,\"1650\":1,\"1803\":1,\"1818\":1,\"1971\":1,\"1986\":1,\"4894\":1,\"4909\":1}}],[\"则jvm会把该线程放入\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"则不久之后\",{\"1\":{\"1331\":1}}],[\"则不久之后该数据可能再次被访问\",{\"1\":{\"1331\":1}}],[\"则不久之后该指令可能再次被执行\",{\"1\":{\"1331\":1}}],[\"则该取值等价于\",{\"1\":{\"1107\":1,\"4140\":1}}],[\"则创建一个事务作为当前事务的嵌套事务来运行\",{\"1\":{\"1107\":1,\"4140\":1}}],[\"则创建一个新的事务\",{\"1\":{\"1099\":1,\"4132\":1}}],[\"则把当前事务挂起\",{\"1\":{\"1103\":1,\"1104\":1,\"4136\":1,\"4137\":1}}],[\"则加入该事务\",{\"1\":{\"1099\":1,\"1100\":1,\"1101\":1,\"4132\":1,\"4133\":1,\"4134\":1}}],[\"则在纯链表情况下\",{\"1\":{\"1018\":1}}],[\"则是互斥的\",{\"1\":{\"3265\":1,\"4493\":1}}],[\"则是x\",{\"1\":{\"976\":1}}],[\"则是未指定值\",{\"1\":{\"199\":1}}],[\"则2^3\",{\"1\":{\"974\":1}}],[\"则默认采用\",{\"1\":{\"858\":1,\"4067\":1}}],[\"则应该选linkedlist\",{\"1\":{\"728\":1}}],[\"则应该设计成继承关系\",{\"1\":{\"557\":1}}],[\"则linkedlist是比较理想的选择\",{\"1\":{\"721\":1}}],[\"则用equals方法比较元素是否相等\",{\"1\":{\"699\":1}}],[\"则结点i无右孩子\",{\"1\":{\"651\":1}}],[\"则结点i无双亲\",{\"1\":{\"649\":1}}],[\"则结点i为叶子结点\",{\"1\":{\"650\":1}}],[\"则其双亲是结点\",{\"1\":{\"649\":1}}],[\"则对任一结点i\",{\"1\":{\"648\":1}}],[\"则n0＝n2＋1\",{\"1\":{\"646\":1}}],[\"则调用findclass方法来加载该类\",{\"1\":{\"421\":1,\"3878\":1}}],[\"则调用启动类加载器来加载该类\",{\"1\":{\"421\":1,\"3878\":1}}],[\"则抛出异常\",{\"1\":{\"421\":1,\"1101\":1,\"1105\":1,\"3878\":1,\"4134\":1,\"4138\":1}}],[\"则说明该类没有被加载过\",{\"1\":{\"421\":1,\"3878\":1}}],[\"则\",{\"1\":{\"292\":1,\"2125\":1,\"2864\":1,\"2939\":1,\"4730\":1,\"5242\":1,\"5317\":1}}],[\"语编写完的程序\",{\"1\":{\"1456\":1,\"1624\":1,\"1792\":1,\"1960\":1,\"4883\":1}}],[\"语句的时候\",{\"1\":{\"2848\":1,\"5226\":1}}],[\"语句的请求到来\",{\"1\":{\"2736\":1,\"5114\":1}}],[\"语句是不会对记录加锁的\",{\"1\":{\"2773\":1,\"5151\":1}}],[\"语句是利用\",{\"1\":{\"2745\":1,\"5123\":1}}],[\"语句执行结束后才释放锁\",{\"1\":{\"2763\":1,\"5141\":1}}],[\"语句且向\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"语句\",{\"1\":{\"1221\":2,\"1223\":1,\"2728\":2,\"2733\":1,\"2734\":1,\"2736\":1,\"2766\":1,\"2847\":1,\"4254\":2,\"4256\":1,\"5106\":2,\"5111\":1,\"5112\":1,\"5114\":1,\"5144\":1,\"5225\":1}}],[\"语言的字符串并不记录自身长度\",{\"1\":{\"2921\":1,\"5299\":1}}],[\"语言的字符串表示\",{\"1\":{\"2919\":1,\"5297\":1}}],[\"语言\",{\"1\":{\"2015\":1,\"3107\":1,\"4389\":1,\"4620\":1}}],[\"语言实现的\",{\"1\":{\"1475\":1,\"1643\":1,\"1811\":1,\"1979\":1,\"4902\":1}}],[\"语言实现的是\",{\"1\":{\"1456\":1,\"1457\":1,\"1624\":1,\"1625\":1,\"1792\":1,\"1793\":1,\"1960\":1,\"1961\":1,\"4883\":1,\"4884\":1}}],[\"语言使用进程和线程都可以\",{\"1\":{\"1453\":1,\"1621\":1,\"1789\":1,\"1957\":1,\"4880\":1}}],[\"语言一般使用线程\",{\"1\":{\"1452\":1,\"1620\":1,\"1788\":1,\"1956\":1,\"4879\":1}}],[\"语言中\",{\"0\":{\"532\":1},\"1\":{\"570\":1}}],[\"语言中所有错误与异常的超类\",{\"1\":{\"432\":1,\"3891\":1}}],[\"语言并不要求常量一定只有编译期间才能产生\",{\"1\":{\"291\":1}}],[\"语法糖的作用就是方便程序员的使用\",{\"1\":{\"458\":1}}],[\"语法\",{\"0\":{\"93\":1,\"3747\":1},\"1\":{\"42\":1,\"3696\":1}}],[\"语法进行了扩展\",{\"1\":{\"39\":1,\"3693\":1}}],[\"语法扩展\",{\"1\":{\"37\":1,\"3691\":1}}],[\"包的基石\",{\"1\":{\"3128\":1,\"4410\":1}}],[\"包头的\",{\"1\":{\"2414\":1}}],[\"包长度\",{\"1\":{\"2408\":2}}],[\"包总量较少的通信\",{\"1\":{\"2402\":1}}],[\"包之外该位必须设置为\",{\"1\":{\"2341\":1}}],[\"包传给接收端主机\",{\"1\":{\"2338\":1}}],[\"包装器设计模式\",{\"1\":{\"1073\":1,\"4106\":1}}],[\"包括责任链\",{\"1\":{\"816\":1,\"4025\":1}}],[\"包括适配器\",{\"1\":{\"816\":1,\"4025\":1}}],[\"包括⼯⼚\",{\"1\":{\"816\":1,\"4025\":1}}],[\"包括\",{\"1\":{\"744\":1,\"1057\":1,\"2355\":1,\"4090\":1}}],[\"包括运行时异常\",{\"1\":{\"445\":1,\"3904\":1}}],[\"包括编译器就已经明确的数值字面量\",{\"1\":{\"290\":1}}],[\"包和类以及被\",{\"1\":{\"403\":1,\"3858\":1}}],[\"包和类\",{\"1\":{\"402\":1,\"404\":1,\"3857\":1,\"3859\":1}}],[\"包含三个东西\",{\"1\":{\"2356\":1}}],[\"包含\",{\"1\":{\"46\":1,\"3700\":1}}],[\"池中的数据项像数组项一样\",{\"1\":{\"289\":1}}],[\"类内部的\",{\"1\":{\"3193\":1,\"4537\":1}}],[\"类实现的定制化的\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"类似\",{\"1\":{\"2767\":1,\"5145\":1}}],[\"类似键值对的形式\",{\"1\":{\"2603\":1,\"4981\":1}}],[\"类似于数据库的主键\",{\"1\":{\"1302\":1,\"5494\":1}}],[\"类中可以通过thread\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"类中有一个\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"类中使用频率最高的方法是\",{\"1\":{\"850\":1,\"4059\":1}}],[\"类中的\",{\"1\":{\"413\":1,\"3868\":1}}],[\"类是核心\",{\"1\":{\"849\":1,\"859\":1,\"4058\":1,\"4068\":1}}],[\"类库中有很多具体的实现\",{\"1\":{\"704\":1}}],[\"类或者\",{\"1\":{\"574\":1}}],[\"类或接口\",{\"1\":{\"289\":1}}],[\"类到底怎么了\",{\"0\":{\"538\":1}}],[\"类\",{\"0\":{\"532\":1},\"1\":{\"539\":1,\"574\":1}}],[\"类名\",{\"1\":{\"496\":1,\"3947\":1}}],[\"类型为精准浮点数\",{\"1\":{\"2889\":1,\"5267\":1}}],[\"类型\",{\"0\":{\"2886\":1,\"5264\":1}}],[\"类型转换等操作\",{\"1\":{\"2680\":1,\"5058\":1}}],[\"类型总结\",{\"0\":{\"2600\":1,\"4978\":1}}],[\"类型的变量\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"类型的底层数据结构是由压缩列表或跳表实现的\",{\"1\":{\"2952\":1,\"5330\":1}}],[\"类型的底层数据结构是由压缩列表或哈希表实现的\",{\"1\":{\"2944\":1,\"5322\":1}}],[\"类型的底层数据结构是由哈希表或整数集合实现的\",{\"1\":{\"2937\":1,\"5315\":1}}],[\"类型的底层数据结构是由双向链表或压缩列表实现的\",{\"1\":{\"2929\":1,\"5307\":1}}],[\"类型的底层数据结构\",{\"1\":{\"2930\":1,\"2931\":1,\"2938\":1,\"2939\":1,\"2945\":1,\"2953\":1,\"2954\":1,\"5308\":1,\"5309\":1,\"5316\":1,\"5317\":1,\"5323\":1,\"5331\":1,\"5332\":1}}],[\"类型的底层的数据结构实现主要是\",{\"1\":{\"2918\":1,\"5296\":1}}],[\"类型的\",{\"1\":{\"1132\":1,\"2946\":1,\"2949\":1,\"4165\":1,\"5324\":1,\"5327\":1}}],[\"类型的类和方法\",{\"1\":{\"864\":1,\"4073\":1}}],[\"类型的文件主要三步\",{\"1\":{\"390\":1,\"3844\":1}}],[\"类型上都属于exception类及其子类\",{\"1\":{\"439\":1,\"3898\":1}}],[\"类及其子类\",{\"1\":{\"433\":1,\"3892\":1}}],[\"类使用委托模型来搜索类和资源\",{\"1\":{\"416\":1,\"3872\":1}}],[\"类有两个关键的方法\",{\"1\":{\"407\":1,\"3862\":1}}],[\"类都有一个引用指向加载它的\",{\"1\":{\"394\":1,\"3849\":1}}],[\"类从被加载到虚拟机内存中开始到卸载出内存为止\",{\"1\":{\"386\":1,\"3839\":1}}],[\"类加载过程\",{\"0\":{\"3842\":1},\"1\":{\"3845\":1}}],[\"类加载机制\",{\"0\":{\"384\":1,\"3837\":1}}],[\"类加载器层次关系图\",{\"1\":{\"3869\":1,\"3876\":1}}],[\"类加载器总结\",{\"0\":{\"3855\":1}}],[\"类加载器加载规则\",{\"0\":{\"3852\":1}}],[\"类加载器在进行类加载的时候\",{\"1\":{\"425\":1,\"3882\":1}}],[\"类加载器有很多种\",{\"1\":{\"415\":1,\"3871\":1}}],[\"类加载器的主要作用就是加载\",{\"1\":{\"396\":1,\"3851\":1}}],[\"类加载器是一个负责加载类的对象\",{\"1\":{\"393\":1,\"3848\":1}}],[\"类加载器\",{\"0\":{\"3846\":1},\"1\":{\"178\":1,\"851\":1,\"3827\":1,\"4060\":1}}],[\"类来保证引用对象之间的原子性\",{\"1\":{\"3125\":1,\"4407\":1}}],[\"类来实现弱引用\",{\"1\":{\"318\":1}}],[\"类来创建软引用\",{\"1\":{\"315\":1}}],[\"类的生命周期\",{\"0\":{\"3838\":1}}],[\"类的相关字节码信息\",{\"1\":{\"3164\":1,\"4508\":1}}],[\"类的对象\",{\"1\":{\"599\":1}}],[\"类的实现不好吗\",{\"0\":{\"562\":1}}],[\"类的全限定名\",{\"1\":{\"500\":1,\"3951\":1}}],[\"类的字节码\",{\"1\":{\"396\":1,\"405\":1,\"3851\":1,\"3860\":1}}],[\"类的\",{\"1\":{\"291\":1,\"854\":1,\"2015\":1,\"3191\":1,\"4063\":1,\"4535\":1,\"4620\":1}}],[\"都说cas要比synchronized好\",{\"1\":{\"3418\":1,\"5698\":1}}],[\"都将不会捕获该分组\",{\"1\":{\"2489\":1,\"5587\":1}}],[\"都要进行双写\",{\"1\":{\"2192\":1,\"4314\":1}}],[\"都为0\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"都不需要通过\",{\"1\":{\"1428\":1,\"1596\":1,\"1764\":1,\"1932\":1,\"4855\":1}}],[\"都有一个offset\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"都可以调用这个接口\",{\"1\":{\"3526\":1,\"5795\":1}}],[\"都可以保证一个报文一定能够到达接收端\",{\"1\":{\"2352\":1}}],[\"都可以用spring\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"都可以进行共享\",{\"1\":{\"1237\":1,\"4270\":1}}],[\"都可以看作是\",{\"1\":{\"240\":1}}],[\"都值得花时间去钻研\",{\"1\":{\"1032\":1}}],[\"都需要根据k\",{\"1\":{\"983\":1}}],[\"都需要重新创建一个\",{\"1\":{\"599\":1}}],[\"都会释放锁\",{\"1\":{\"3160\":1}}],[\"都会以处理二进制的方式来处理\",{\"1\":{\"2920\":1,\"5298\":1}}],[\"都会重新生成一个\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"都会被阻塞\",{\"1\":{\"2690\":1,\"5068\":1}}],[\"都会清空数据\",{\"1\":{\"1252\":1,\"5444\":1}}],[\"都会使用cachingexector装饰基本的执行器\",{\"1\":{\"1238\":1,\"4271\":1}}],[\"都会出现数据不一致问题\",{\"1\":{\"1230\":1,\"4263\":1}}],[\"都会插入到新数组对应索引的链表头\",{\"1\":{\"869\":1,\"3977\":1}}],[\"都会有溢出异常\",{\"1\":{\"283\":1}}],[\"都只是针对⼀类产品\",{\"1\":{\"831\":1,\"4040\":1}}],[\"都应该尽量扩展已有的索引而不是创建新索引\",{\"1\":{\"2673\":1,\"5051\":1}}],[\"都应该只是规定一系列操作的接口而已\",{\"1\":{\"578\":1}}],[\"都应该是组合关系\",{\"1\":{\"553\":1}}],[\"都是基于\",{\"1\":{\"5530\":1}}],[\"都是独享锁\",{\"1\":{\"3260\":1,\"4488\":1}}],[\"都是这种机制\",{\"1\":{\"1353\":1,\"1521\":1,\"1689\":1,\"1857\":1,\"4780\":1}}],[\"都是双列集合\",{\"1\":{\"882\":1}}],[\"都是通过\",{\"1\":{\"2027\":1,\"2976\":1,\"3108\":1,\"4390\":1,\"4632\":1,\"5354\":1}}],[\"都是通过位运算代替取模\",{\"1\":{\"1015\":1}}],[\"都是通过平衡来二分查找\",{\"1\":{\"875\":1,\"3983\":1}}],[\"都是通过相同的方式来查找的\",{\"1\":{\"670\":1,\"4012\":1}}],[\"都是用来存储一组相同类型的元素的\",{\"1\":{\"690\":1}}],[\"都是\",{\"1\":{\"597\":1,\"663\":1,\"3249\":1,\"4004\":1,\"4479\":1}}],[\"都是一个队列\",{\"1\":{\"572\":1}}],[\"都是我们在生活中看得到摸得到的实体\",{\"1\":{\"554\":1}}],[\"都是runtimeexception类及其子类异常\",{\"1\":{\"436\":1,\"3895\":1}}],[\"都能够调用它的任意一个方法和属性\",{\"1\":{\"477\":1,\"3928\":1}}],[\"都能够知道这个类的所有属性和方法\",{\"1\":{\"477\":1,\"3928\":1}}],[\"都集中在\",{\"1\":{\"420\":1,\"3877\":1}}],[\"都维护一个常量池\",{\"1\":{\"289\":1}}],[\"受垃圾回收器管理\",{\"1\":{\"283\":1}}],[\"受方法区内存的限制\",{\"1\":{\"281\":1}}],[\"永久代物理是堆的一部分\",{\"1\":{\"283\":1}}],[\"永久代和元空间都可以理解为方法区的落地实现\",{\"1\":{\"282\":1}}],[\"概念啥的太虚幻我就不说了\",{\"1\":{\"481\":1,\"3932\":1}}],[\"概念\",{\"1\":{\"282\":1,\"488\":1,\"3939\":1}}],[\"只适合对少量数据进行加密\",{\"1\":{\"3655\":1}}],[\"只适用于业务处理非常快速的场景\",{\"1\":{\"1474\":1,\"1642\":1,\"1810\":1,\"1978\":1,\"4901\":1}}],[\"只适用于单体项目\",{\"1\":{\"1230\":1,\"4263\":1}}],[\"只听他说md5是一个非对称加密算法\",{\"1\":{\"3641\":1}}],[\"只出现一次\",{\"1\":{\"3568\":1}}],[\"只在index这个接口里出现过\",{\"1\":{\"3567\":1}}],[\"只在一个机房内完成所有业务\",{\"1\":{\"2197\":1,\"4319\":1}}],[\"只追加文件\",{\"1\":{\"2961\":1,\"5339\":1}}],[\"只存在于可重复读隔离级别\",{\"1\":{\"2787\":1,\"5165\":1}}],[\"只存在于内存中的文件\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"只负责数据的接收和发送\",{\"1\":{\"1485\":1,\"1653\":1,\"1821\":1,\"1989\":1,\"4912\":1}}],[\"只进行了\",{\"1\":{\"1425\":1,\"1593\":1,\"1761\":1,\"1929\":1,\"4852\":1}}],[\"只等待获取cpu的使用权\",{\"1\":{\"1344\":1,\"1512\":1,\"1680\":1,\"1848\":1,\"4771\":1}}],[\"只会在取出\",{\"1\":{\"2994\":1,\"5372\":1}}],[\"只会和共享表锁\",{\"1\":{\"2748\":1,\"5126\":1}}],[\"只会返回有事件发生的文件描述符的个数\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"只会拦截那些指定需要拦截的方法\",{\"1\":{\"1217\":1,\"4250\":1}}],[\"只会使用一个线程进行垃圾收集工作\",{\"1\":{\"347\":1}}],[\"只读\",{\"1\":{\"1086\":1,\"4119\":1}}],[\"只做一次16位右位移异或混合\",{\"1\":{\"1019\":1}}],[\"只不过会在记录头\",{\"1\":{\"2857\":1,\"5235\":1}}],[\"只不过在满足\",{\"1\":{\"1137\":1,\"4170\":1}}],[\"只不过\",{\"1\":{\"963\":1}}],[\"只需要把未来几分钟要执行的数据存入缓存即可\",{\"1\":{\"3526\":1,\"5795\":1}}],[\"只需要传输丢失的这个分片\",{\"1\":{\"2395\":1}}],[\"只需要传入对应map的全限定名\",{\"1\":{\"492\":1,\"3943\":1}}],[\"只需要\",{\"1\":{\"1428\":1,\"1596\":1,\"1764\":1,\"1932\":1,\"4855\":1}}],[\"只需提供传⼊⼯⼚的参数\",{\"1\":{\"824\":1,\"4033\":1}}],[\"只包含一个根结点\",{\"1\":{\"617\":1}}],[\"只能有一个线程获得锁\",{\"1\":{\"3258\":1,\"4486\":1}}],[\"只能保证单次的读\",{\"1\":{\"3141\":1}}],[\"只能保证单个变量的原子性\",{\"0\":{\"4404\":1},\"1\":{\"3129\":1,\"4411\":1}}],[\"只能存活\",{\"1\":{\"2992\":1,\"5370\":1}}],[\"只能使用到一个表中的一个索引\",{\"1\":{\"2896\":1,\"5274\":1}}],[\"只能取一个\",{\"1\":{\"2589\":1,\"4967\":1}}],[\"只能是固定类别\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"只能重量级锁\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"只能选择\",{\"1\":{\"2157\":1,\"4762\":1}}],[\"只能满足可用性\",{\"1\":{\"2156\":1,\"4761\":1}}],[\"只能同时满足以下三点中的两个\",{\"1\":{\"2147\":1,\"4752\":1}}],[\"只能用来做微服务\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"只能用于亲缘关系的进程间通信\",{\"1\":{\"1365\":1,\"1533\":1,\"1701\":1,\"1869\":1,\"4792\":1}}],[\"只能在同一端做插入和删除操作\",{\"1\":{\"586\":1}}],[\"只能执行队列规定的方法\",{\"1\":{\"572\":1}}],[\"只定义了一个类应该满足哪些方法\",{\"1\":{\"569\":1}}],[\"只有当前线程调用\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"只有当变量的预期值\",{\"1\":{\"3103\":1,\"4385\":1}}],[\"只有当父加载器反馈自己无法完成这个加载请求\",{\"1\":{\"426\":1,\"3883\":1}}],[\"只有用到\",{\"1\":{\"3081\":1,\"4437\":1}}],[\"只有同步到磁盘中才算持久化保存了\",{\"1\":{\"2975\":1,\"5353\":1}}],[\"只有叶子节点存储\",{\"1\":{\"2602\":1,\"4980\":1}}],[\"只有表级锁\",{\"1\":{\"2565\":1,\"4943\":1}}],[\"只有水平触发模式\",{\"1\":{\"1395\":1,\"1563\":1,\"1731\":1,\"1899\":1,\"4822\":1}}],[\"只有在内核重启\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"只有拥有互斥对象的线程才有访问公共资源的权限\",{\"1\":{\"1353\":1,\"1521\":1,\"1689\":1,\"1857\":1,\"4780\":1}}],[\"只有根结点的树高度为1\",{\"1\":{\"639\":1}}],[\"只有它能与\",{\"1\":{\"352\":1}}],[\"只要统计出\",{\"1\":{\"3567\":1}}],[\"只要调用这两个关闭方法中的任意一个\",{\"1\":{\"3325\":1}}],[\"只要没有显式地设置cacheenabled为false\",{\"1\":{\"1238\":1,\"4271\":1}}],[\"只要是同一个接口的相同方法\",{\"1\":{\"1237\":1,\"4270\":1}}],[\"只要是按照内容查找元素\",{\"1\":{\"717\":1}}],[\"只要保证length的长度是2^n的话\",{\"1\":{\"981\":1}}],[\"只要能调用\",{\"1\":{\"576\":1}}],[\"只要他们满足\",{\"1\":{\"574\":1}}],[\"只要实现了map接口\",{\"1\":{\"492\":1,\"3943\":1}}],[\"只要不是太频繁\",{\"1\":{\"349\":1}}],[\"只要逻辑上是连续的即可\",{\"1\":{\"229\":1}}],[\"只是说在一个包里要继承一个异常的接口\",{\"1\":{\"3378\":1,\"5658\":1}}],[\"只是说该列涉及到表与表的关系\",{\"1\":{\"2663\":1,\"5041\":1}}],[\"只是在\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"只是在文档上注明\",{\"1\":{\"565\":1}}],[\"只是它那时没有其他的服务器了\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"只是将key的hashcode值与其高16位作异或并保证最高位为0\",{\"1\":{\"1029\":1}}],[\"只是\",{\"1\":{\"282\":1}}],[\"用着也还行\",{\"1\":{\"5534\":1}}],[\"用了缓存的\",{\"1\":{\"2202\":1,\"4324\":1}}],[\"用套接字中的相关函数来完成通信过程\",{\"1\":{\"1370\":1,\"1538\":1,\"1706\":1,\"1874\":1,\"4797\":1}}],[\"用来做流量控制\",{\"1\":{\"2359\":1}}],[\"用来解决乱序问题等\",{\"1\":{\"2358\":1}}],[\"用来解决丢包的问题\",{\"1\":{\"2339\":1}}],[\"用来解决网络包乱序问题\",{\"1\":{\"2338\":1}}],[\"用来保证集群中存在过半的机器能够和\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"用来衡量hashmap满的程度\",{\"1\":{\"917\":1}}],[\"用来表示堆的最大内存\",{\"1\":{\"245\":1}}],[\"用来表示堆的起始内存\",{\"1\":{\"244\":1}}],[\"用\",{\"1\":{\"891\":1}}],[\"用法上\",{\"1\":{\"714\":1}}],[\"用算法描述中的术语\",{\"1\":{\"709\":1}}],[\"用户登录时\",{\"1\":{\"3632\":1}}],[\"用户登录成功\",{\"1\":{\"3491\":1,\"5760\":1}}],[\"用户密码\",{\"1\":{\"3629\":1}}],[\"用户输入的密码\",{\"1\":{\"3635\":1}}],[\"用户输入\",{\"1\":{\"3627\":1,\"3633\":1}}],[\"用户注册时\",{\"1\":{\"3626\":1}}],[\"用户的密码也不会被泄漏\",{\"1\":{\"3600\":1,\"3605\":1}}],[\"用户的密码就被泄漏了\",{\"1\":{\"3594\":1,\"3599\":1}}],[\"用户再次进入网关开始访问\",{\"1\":{\"3492\":1,\"5761\":1}}],[\"用户以后每次向后端发请求都在\",{\"1\":{\"3481\":1,\"5750\":1}}],[\"用户进入网关开始登陆\",{\"1\":{\"3479\":1,\"3490\":1,\"5748\":1,\"5759\":1}}],[\"用户向服务器发送用户名\",{\"1\":{\"3479\":1,\"5748\":1}}],[\"用户向服务器发送请求\",{\"1\":{\"1056\":1,\"4089\":1}}],[\"用户历史记录功能\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"用户只能看到该事务创建\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"用户只能调用\",{\"1\":{\"577\":1}}],[\"用户\",{\"1\":{\"2807\":4,\"5185\":4}}],[\"用户消息通过\",{\"1\":{\"2353\":1}}],[\"用户是使用\",{\"1\":{\"2021\":1,\"4626\":1}}],[\"用户可以方便地创建和使用容器\",{\"1\":{\"2017\":1,\"4622\":1}}],[\"用户可通过覆写该方法\",{\"1\":{\"421\":1,\"3878\":1}}],[\"用户还可以加入自定义的类加载器来进行拓展\",{\"1\":{\"405\":1,\"3860\":1}}],[\"用于完成某个功能的一个过程\",{\"1\":{\"3106\":1,\"4388\":1}}],[\"用于判断内存中某个值是否为预期值\",{\"1\":{\"3095\":1,\"4371\":1}}],[\"用于保证可靠性和流量控制维护的某些状态信息\",{\"1\":{\"2355\":1}}],[\"用于处理连接的响应事件\",{\"1\":{\"1500\":1,\"1668\":1,\"1836\":1,\"2004\":1,\"4927\":1}}],[\"用于多进程对共享数据的访问\",{\"1\":{\"1368\":1,\"1536\":1,\"1704\":1,\"1872\":1,\"4795\":1}}],[\"用于通知接收进程某个事件已经发生\",{\"1\":{\"1366\":1,\"1534\":1,\"1702\":1,\"1870\":1,\"4793\":1}}],[\"用于具有亲缘关系的父子进程间或者兄弟进程之间的通信\",{\"1\":{\"1364\":1,\"1532\":1,\"1700\":1,\"1868\":1,\"4791\":1}}],[\"用于等待多个线程到达某个点再一起继续执行\",{\"1\":{\"1356\":1,\"1524\":1,\"1692\":1,\"1860\":1,\"4783\":1}}],[\"用于唯一标记一个消息\",{\"1\":{\"1302\":1,\"5494\":1}}],[\"用于获取enableautoconfiguration注解中的\",{\"1\":{\"1142\":1,\"4175\":1}}],[\"用于元素间的链接\",{\"1\":{\"956\":1}}],[\"用于调用原始方法\",{\"1\":{\"861\":1,\"4070\":1}}],[\"用于拦截增强被代理类的方法\",{\"1\":{\"860\":1,\"4069\":1}}],[\"用于加载代理对象\",{\"1\":{\"851\":1,\"4060\":1}}],[\"用于统计类加载器相关的信息\",{\"1\":{\"421\":1,\"3878\":1}}],[\"用于实现类加载过程中的加载这一步\",{\"1\":{\"393\":1,\"3848\":1}}],[\"用于存储编译期生成的各种字面量和符号引用\",{\"1\":{\"288\":1}}],[\"用于存储类信息\",{\"1\":{\"282\":1}}],[\"用于存放编译期生成的各种字面量和符号引用\",{\"1\":{\"281\":1}}],[\"接近\",{\"1\":{\"2587\":1,\"4965\":1}}],[\"接收的\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"接受顺序性也得到了保证\",{\"1\":{\"2118\":1,\"4723\":1}}],[\"接受客户端请求\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"接下来的步骤就开始不一样了\",{\"1\":{\"1484\":1,\"1652\":1,\"1820\":1,\"1988\":1,\"4911\":1}}],[\"接下来还可以继续去检测它的状态\",{\"1\":{\"1392\":1,\"1560\":1,\"1728\":1,\"1896\":1,\"4819\":1}}],[\"接下来补充\",{\"1\":{\"1128\":1,\"4161\":1}}],[\"接下来\",{\"1\":{\"992\":1,\"1454\":1,\"1465\":1,\"1622\":1,\"1633\":1,\"1790\":1,\"1801\":1,\"1958\":1,\"1969\":1,\"2489\":1,\"2828\":1,\"4881\":1,\"4892\":1,\"5206\":1,\"5587\":1}}],[\"接下来我们会发现\",{\"1\":{\"984\":1}}],[\"接⼝⼀旦新增加⽅法\",{\"1\":{\"837\":1,\"4046\":1}}],[\"接着构造一个\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"接着再传给传输层\",{\"1\":{\"2396\":1}}],[\"接着再去幸存者\",{\"1\":{\"267\":1}}],[\"接着来看看单\",{\"1\":{\"1490\":1,\"1658\":1,\"1826\":1,\"1994\":1,\"4917\":1}}],[\"接着由\",{\"1\":{\"1486\":1,\"1654\":1,\"1822\":1,\"1990\":1,\"4913\":1}}],[\"接着\",{\"1\":{\"1409\":1,\"1577\":1,\"1745\":1,\"1913\":1,\"2125\":1,\"2735\":1,\"2741\":1,\"4730\":1,\"4836\":1,\"5113\":1,\"5119\":1}}],[\"接着看上面的正射\",{\"1\":{\"482\":1,\"3933\":1}}],[\"接口支持幂等即可\",{\"1\":{\"2179\":1,\"4301\":1}}],[\"接口调用失败就会进入调用接口提前定义好的一个熔断的方法\",{\"1\":{\"2081\":1,\"4686\":1}}],[\"接口调用失败就调用本地的方法返回一个空\",{\"1\":{\"2080\":1,\"4685\":1}}],[\"接口并复写\",{\"1\":{\"1218\":1,\"4251\":1}}],[\"接口中定义了五个表示隔离级别的常量\",{\"1\":{\"1090\":1,\"4123\":1}}],[\"接口类的\",{\"1\":{\"852\":1,\"4061\":1}}],[\"接口和\",{\"1\":{\"849\":1,\"859\":1,\"4058\":1,\"4068\":1}}],[\"接口的类的\",{\"1\":{\"854\":1,\"4063\":1}}],[\"接口的对象\",{\"1\":{\"851\":1,\"4060\":1}}],[\"接口的stack\",{\"1\":{\"587\":1}}],[\"接口的时候\",{\"1\":{\"577\":1}}],[\"接口的设计相当于做了访问限制\",{\"1\":{\"577\":1}}],[\"接口规定的规范\",{\"1\":{\"574\":1}}],[\"接口最大的意义之一\",{\"1\":{\"569\":1}}],[\"接口提供\",{\"1\":{\"535\":1}}],[\"接口\",{\"0\":{\"581\":1},\"1\":{\"454\":1,\"567\":1,\"580\":1,\"595\":1,\"738\":1,\"744\":1,\"2489\":1,\"3213\":1,\"3913\":1,\"4337\":1,\"5587\":1}}],[\"接口等描述信息外\",{\"1\":{\"281\":1}}],[\"字符串不太一样\",{\"1\":{\"2919\":1,\"5297\":1}}],[\"字符串\",{\"0\":{\"2916\":1,\"5294\":1},\"1\":{\"2913\":1,\"5291\":1}}],[\"字符串类型的字段使用前缀索引代替普通索引\",{\"1\":{\"2674\":1,\"5052\":1}}],[\"字符串常量池放在堆里\",{\"1\":{\"293\":1}}],[\"字节时\",{\"1\":{\"2953\":1,\"5331\":1}}],[\"字节\",{\"1\":{\"2930\":1,\"2945\":1,\"5308\":1,\"5323\":1}}],[\"字节流\",{\"1\":{\"2353\":1}}],[\"字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令\",{\"1\":{\"201\":1}}],[\"字节码指令地址\",{\"1\":{\"199\":1}}],[\"字面量等类型\",{\"1\":{\"285\":1}}],[\"字段中\",{\"1\":{\"3485\":1,\"5754\":1}}],[\"字段将其标记为已删除\",{\"1\":{\"2857\":1,\"5235\":1}}],[\"字段正好有索引\",{\"1\":{\"2650\":1,\"5028\":1}}],[\"字段知道该数据包是\",{\"1\":{\"2414\":1}}],[\"字段呢\",{\"1\":{\"2406\":1,\"2408\":1}}],[\"字段则会变长的\",{\"1\":{\"2389\":1}}],[\"字段时是\",{\"1\":{\"2389\":1}}],[\"字段\",{\"1\":{\"281\":1,\"2406\":1,\"2407\":1,\"2408\":1}}],[\"了另一个\",{\"1\":{\"2816\":1,\"5194\":1}}],[\"了解问题的本质再分析问题\",{\"1\":{\"1109\":1,\"4142\":1}}],[\"了\",{\"0\":{\"2447\":1},\"1\":{\"277\":1,\"2139\":1,\"2332\":1,\"2997\":1,\"4744\":1,\"5375\":1}}],[\"绝对\",{\"1\":{\"277\":1}}],[\"所在子网相连的接口上\",{\"1\":{\"2494\":1,\"5592\":1}}],[\"所在子网的那个路由器\",{\"1\":{\"2491\":1,\"5589\":1}}],[\"所在子网内的所有设备\",{\"1\":{\"2489\":1,\"5587\":1}}],[\"所在的节点即可取出数据\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"所在的子网了\",{\"1\":{\"2495\":1,\"5593\":1}}],[\"所在的子网\",{\"1\":{\"2491\":1,\"2495\":1,\"5589\":1,\"5593\":1}}],[\"所在的服务器\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"所带来的三级缓存问题\",{\"1\":{\"1134\":1,\"4167\":1}}],[\"所谓唯一性\",{\"1\":{\"3568\":1}}],[\"所谓的长事务\",{\"1\":{\"2732\":1,\"5110\":1}}],[\"所谓的状态同步是指数据同步\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"所谓的双端队列\",{\"1\":{\"582\":1}}],[\"所谓事务管理\",{\"1\":{\"1088\":1,\"4121\":1}}],[\"所有线程在当前任务执行完毕后\",{\"1\":{\"3334\":1,\"4591\":1}}],[\"所有线程都在队列里排队\",{\"1\":{\"3268\":1,\"4496\":1}}],[\"所有对象公用同一把锁\",{\"1\":{\"3159\":1}}],[\"所有变量都需要存储在主内存中\",{\"1\":{\"3137\":1,\"4450\":1}}],[\"所有值小于\",{\"1\":{\"2945\":1,\"5323\":1}}],[\"所有需要查询的字段的值\",{\"1\":{\"2613\":1,\"2648\":1,\"4991\":1,\"5026\":1}}],[\"所有传输的内容都经过加密\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"所有传输的内容都是明文\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"所有节点访问同一份最新的数据副本\",{\"1\":{\"2148\":1,\"4753\":1}}],[\"所有consumer都订阅了这4个分区\",{\"1\":{\"1292\":1,\"5484\":1}}],[\"所有\",{\"1\":{\"1146\":1,\"4179\":1}}],[\"所有方法都实现了同步\",{\"1\":{\"759\":1}}],[\"所有属性值都是对应类型的初始值\",{\"1\":{\"506\":1,\"3957\":1}}],[\"所有的线程都能得到资源\",{\"1\":{\"3269\":1,\"4497\":1}}],[\"所有的线程都可以访问并修改同一个资源\",{\"1\":{\"3222\":1,\"4346\":1}}],[\"所有的写命令会追加到\",{\"1\":{\"2979\":1,\"5357\":1}}],[\"所有的数据都是通过\",{\"1\":{\"1427\":1,\"1595\":1,\"1763\":1,\"1931\":1,\"4854\":1}}],[\"所有的事务依次逐个执行\",{\"1\":{\"1095\":1,\"4128\":1}}],[\"所有的请求最终都会传送到顶层的启动类加载器\",{\"1\":{\"425\":1,\"3882\":1}}],[\"所有的对象都分配到堆上也渐渐变得不那么\",{\"1\":{\"277\":1}}],[\"所以还是需要等待催生http2不得不出的时机到来\",{\"1\":{\"5533\":1}}],[\"所以还需要考虑\",{\"1\":{\"262\":1}}],[\"所以md5不再是安全的了\",{\"1\":{\"3589\":1}}],[\"所以md5是安全的\",{\"1\":{\"3589\":1}}],[\"所以mybatis\",{\"1\":{\"1230\":1,\"4263\":1}}],[\"所以尽量选择具有唯一性的字段\",{\"1\":{\"3568\":1}}],[\"所以需要把工具类拷贝一份到网关微服务\",{\"1\":{\"3496\":1,\"5765\":1}}],[\"所以需要根据类别去分开查找\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"所以问我一个逻辑题\",{\"1\":{\"3442\":1}}],[\"所以最多只能创建核心线程数的线程\",{\"1\":{\"3311\":1,\"4576\":1}}],[\"所以最后你获得的这个集合所占的空间总是比你实际需要的要大\",{\"1\":{\"795\":1}}],[\"所以响应速度更快\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"所以复杂度为\",{\"1\":{\"2921\":1,\"5299\":1}}],[\"所以获取长度的复杂度为\",{\"1\":{\"2921\":1,\"5299\":1}}],[\"所以查询性能会受到一定的影响\",{\"1\":{\"2904\":1,\"5282\":1}}],[\"所以直接读取最新的数据就好了\",{\"1\":{\"2850\":1,\"5228\":1}}],[\"所以大多数\",{\"1\":{\"2804\":1,\"5182\":1}}],[\"所以为了能安全的对表结构进行变更\",{\"1\":{\"2739\":1,\"5117\":1}}],[\"所以为每个线程都分配了一个pc寄存器\",{\"1\":{\"195\":1}}],[\"所以域名的层级关系类似一个树状结构\",{\"1\":{\"2528\":1,\"5626\":1}}],[\"所以上层保证相同数据到同一个机房即可\",{\"1\":{\"2196\":1,\"4318\":1}}],[\"所以就很好了避免幻读问题\",{\"1\":{\"2847\":1,\"2848\":1,\"5225\":1,\"5226\":1}}],[\"所以就需要消费者消费成功\",{\"1\":{\"2179\":1,\"4301\":1}}],[\"所以就避免了内存拷贝消耗\",{\"1\":{\"1384\":1,\"1552\":1,\"1720\":1,\"1888\":1,\"4811\":1}}],[\"所以会消耗过多的\",{\"1\":{\"2904\":1,\"5282\":1}}],[\"所以会对动态表进行更新操作\",{\"1\":{\"2169\":1,\"4291\":1}}],[\"所以会出现死循环\",{\"1\":{\"1124\":1,\"4157\":1}}],[\"所以其他\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"所以不会导致缓冲区溢出的问题\",{\"1\":{\"2922\":1,\"5300\":1}}],[\"所以不用担心后面的数据没接收到导致数据不一致性\",{\"1\":{\"2133\":1,\"4738\":1}}],[\"所以不能作为\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"所以无法进行投票等操作了\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"所以此时server1\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"所以当\",{\"1\":{\"2122\":1,\"4727\":1}}],[\"所以实现起来比较简单\",{\"1\":{\"1470\":1,\"1638\":1,\"1806\":1,\"1974\":1,\"4897\":1}}],[\"所以在使用这两条语句的时候\",{\"1\":{\"2775\":1,\"5153\":1}}],[\"所以在收到通知后应尽可能地读写数据\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"所以在收到通知后\",{\"1\":{\"1392\":1,\"1560\":1,\"1728\":1,\"1896\":1,\"4819\":1}}],[\"所以在锁定范围和锁的作用域上两者并无区别\",{\"1\":{\"801\":1}}],[\"所以只需要传入一个待检测的\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"所以也叫做时分多路复用\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"所以可以考虑使用前缀索引带替普通索引\",{\"1\":{\"2675\":1,\"5053\":1}}],[\"所以可以根据这个信息确定送给哪个模块\",{\"1\":{\"2414\":1}}],[\"所以可以保证公共资源不会被多个线程同时访问\",{\"1\":{\"1353\":1,\"1521\":1,\"1689\":1,\"1857\":1,\"4780\":1}}],[\"所以可以认为二叉搜索树的时间复杂度介于o\",{\"1\":{\"658\":1,\"3999\":1}}],[\"所以必然会涉及到partition的分配问题\",{\"1\":{\"1266\":1,\"5458\":1}}],[\"所以对于主键索引来说\",{\"1\":{\"2638\":1,\"5016\":1}}],[\"所以对象之间两两不相等\",{\"1\":{\"1236\":1,\"4269\":1}}],[\"所以对不同的操作具有不同的效率\",{\"1\":{\"738\":1}}],[\"所以我们一般认为\",{\"1\":{\"5530\":1}}],[\"所以我们可以看到\",{\"1\":{\"1335\":1}}],[\"所以我们的每个starter都是依赖autoconfigure的\",{\"1\":{\"1195\":1,\"4228\":1}}],[\"所以我们在写依赖时才不需要写版本号\",{\"1\":{\"1189\":1,\"4222\":1}}],[\"所以我们在分析\",{\"1\":{\"1109\":1,\"4142\":1}}],[\"所以要存放到三级缓存中处理\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"所以如图按照\",{\"1\":{\"1124\":1,\"4157\":1}}],[\"所以如果要使用key来映射分区\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"所以如果你要在集合中保存大量的数据那么使用vector有一些优势\",{\"1\":{\"795\":1}}],[\"所以如果可以预估数据量的话\",{\"1\":{\"745\":1}}],[\"所以作者并未在哈希值的计算上做过多设计\",{\"1\":{\"1029\":1}}],[\"所以hashmap为解决这问题\",{\"1\":{\"1012\":1}}],[\"所以从hash计算的效率上\",{\"1\":{\"1011\":1}}],[\"所以单从这一点上看\",{\"1\":{\"1010\":1}}],[\"所以java并没有考虑效率问题\",{\"1\":{\"1001\":1}}],[\"所以效率不如红黑树\",{\"1\":{\"875\":1,\"3983\":1}}],[\"所以这就导致原链表顺序为a\",{\"1\":{\"869\":1,\"3977\":1}}],[\"所以这里比较如下两个list1和list2的区别\",{\"1\":{\"769\":1}}],[\"所以说\",{\"1\":{\"804\":1,\"2521\":1,\"5619\":1}}],[\"所以保存相同内容的vector与arraylist\",{\"1\":{\"755\":1}}],[\"所以treeset中的元素要实现comparable接口\",{\"1\":{\"701\":1}}],[\"所以它也可以保持插入顺序\",{\"1\":{\"688\":1}}],[\"所以它比普通的二叉搜索树效率要低一点\",{\"1\":{\"672\":1,\"4014\":1}}],[\"所以发动机这个类和车这个类之间\",{\"1\":{\"552\":1}}],[\"所以程序员这个类可以继承雇员类\",{\"1\":{\"550\":1}}],[\"所以猫这个类可以继承动物类\",{\"1\":{\"549\":1}}],[\"所以\",{\"1\":{\"458\":1,\"461\":1,\"530\":1,\"553\":1,\"558\":1,\"583\":1,\"588\":1,\"591\":1,\"694\":1,\"807\":1,\"900\":1,\"940\":1,\"981\":1,\"989\":1,\"1114\":1,\"1118\":1,\"1249\":1,\"1251\":1,\"1336\":1,\"1379\":1,\"1393\":1,\"1425\":1,\"1429\":1,\"1474\":1,\"1475\":1,\"1547\":1,\"1561\":1,\"1593\":1,\"1597\":1,\"1642\":1,\"1643\":1,\"1715\":1,\"1729\":1,\"1761\":1,\"1765\":1,\"1810\":1,\"1811\":1,\"1883\":1,\"1897\":1,\"1929\":1,\"1933\":1,\"1978\":1,\"1979\":1,\"2130\":1,\"2141\":1,\"2207\":1,\"2213\":1,\"2214\":1,\"2222\":1,\"2228\":1,\"2229\":1,\"2237\":1,\"2243\":1,\"2244\":1,\"2250\":1,\"2256\":1,\"2257\":1,\"2263\":1,\"2269\":1,\"2270\":1,\"2278\":1,\"2284\":1,\"2285\":1,\"2654\":1,\"2752\":1,\"2770\":1,\"2792\":1,\"2843\":1,\"2845\":1,\"2920\":1,\"2996\":1,\"3202\":1,\"3536\":1,\"4147\":1,\"4151\":1,\"4735\":1,\"4746\":1,\"4806\":1,\"4820\":1,\"4852\":1,\"4856\":1,\"4901\":1,\"4902\":1,\"5032\":1,\"5130\":1,\"5148\":1,\"5170\":1,\"5221\":1,\"5223\":1,\"5298\":1,\"5374\":1,\"5441\":1,\"5443\":1,\"5513\":1,\"5520\":1,\"5521\":1,\"5530\":2,\"5538\":1,\"5543\":1,\"5544\":1,\"5805\":1}}],[\"所以每次\",{\"1\":{\"234\":1}}],[\"编程中我们通常不会直接使用到\",{\"1\":{\"3108\":1,\"4390\":1}}],[\"编程\",{\"0\":{\"2443\":1,\"2444\":1},\"1\":{\"2328\":1,\"2329\":1}}],[\"编译器都帮我们做了\",{\"1\":{\"458\":1}}],[\"编译器不要求强制处置的异常\",{\"1\":{\"444\":1,\"3903\":1}}],[\"编译器要求必须处置的异常\",{\"1\":{\"441\":1,\"3900\":1}}],[\"编译异常\",{\"1\":{\"438\":1,\"3897\":1}}],[\"编译期的发展和逃逸分析技术的逐渐成熟\",{\"1\":{\"277\":1}}],[\"编辑此页链接\",{\"1\":{\"17\":1,\"3671\":1}}],[\"随着网络技术的发展\",{\"1\":{\"5530\":1}}],[\"随着人们对加密强度需求的不断提高\",{\"1\":{\"3642\":1}}],[\"随着任务量的增大\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"随着\",{\"1\":{\"277\":1,\"865\":1,\"2982\":1,\"4074\":1,\"5360\":1}}],[\"随着虚拟机退出而销毁\",{\"1\":{\"186\":1}}],[\"由inheritablethreadlocal类维护\",{\"1\":{\"3190\":1,\"4534\":1}}],[\"由threadlocal类维护\",{\"1\":{\"3190\":1,\"4534\":1}}],[\"由objectmonitor实现的\",{\"1\":{\"3168\":1,\"4513\":1}}],[\"由操作系统来负责线程间的调度和线程的状态变更\",{\"1\":{\"3237\":1,\"4360\":1}}],[\"由操作系统保证原子性\",{\"1\":{\"3127\":1,\"4409\":1}}],[\"由操作系统硬件来保证\",{\"1\":{\"3106\":1,\"4388\":1}}],[\"由proxy代理实例去完成真正的远程访问\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"由两个方法int\",{\"1\":{\"963\":1}}],[\"由自己创建⼀个静态变量存储实例\",{\"1\":{\"818\":1,\"4027\":1}}],[\"由这两个关系决定了一个结点的祖先结点\",{\"1\":{\"629\":1}}],[\"由开发者再做选择\",{\"1\":{\"578\":1}}],[\"由\",{\"1\":{\"402\":1,\"1410\":1,\"1578\":1,\"1746\":1,\"1914\":1,\"2357\":1,\"3857\":1,\"4837\":1}}],[\"由于图片存储到oss中\",{\"1\":{\"3510\":1,\"5779\":1}}],[\"由于队列永远不会被放满\",{\"1\":{\"3309\":1,\"4574\":1}}],[\"由于之前没有释放锁\",{\"1\":{\"3226\":1,\"4350\":1}}],[\"由于子查询会产生大量的临时表也没有索引\",{\"1\":{\"2904\":1,\"5282\":1}}],[\"由于在对记录加独占锁前\",{\"1\":{\"2751\":1,\"5129\":1}}],[\"由于目标接口与主机\",{\"1\":{\"2492\":1,\"5590\":1}}],[\"由于协议是\",{\"1\":{\"2118\":1,\"4723\":1}}],[\"由于微服务是分布式服务\",{\"1\":{\"2046\":1,\"4651\":1}}],[\"由于隔离的进程独立于宿主和其它的隔离的进程\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"由于不是本文重点\",{\"1\":{\"1006\":1}}],[\"由于hashtable会尽量使用素数\",{\"1\":{\"1006\":1}}],[\"由于篇幅有限\",{\"1\":{\"1002\":1}}],[\"由于15的二进制扩展到32位为\",{\"1\":{\"989\":1}}],[\"由于红黑树的每次操作平均要旋转一次和变换颜色\",{\"1\":{\"672\":1,\"4014\":1}}],[\"由于\",{\"1\":{\"583\":1,\"2398\":1,\"2401\":1,\"2515\":1,\"2516\":1,\"2890\":1,\"5268\":1,\"5613\":1,\"5614\":1}}],[\"由于没有线程交互的开销\",{\"1\":{\"348\":1}}],[\"由于对象实例的创建在\",{\"1\":{\"274\":1}}],[\"由执行引擎读取下一条指令\",{\"1\":{\"190\":1}}],[\"从原数据计算出md5值很容易\",{\"1\":{\"3587\":1}}],[\"从项目的整体架构到具体功能实现细节都说了\",{\"1\":{\"3402\":1,\"5682\":1}}],[\"从字面意思也能猜到个大概\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"从使用层面来说\",{\"1\":{\"3063\":1,\"4417\":1}}],[\"从数据集\",{\"1\":{\"3006\":1,\"5384\":1}}],[\"从已设置过期时间的数据集\",{\"1\":{\"3002\":1,\"3003\":1,\"3004\":1,\"3009\":1,\"5380\":1,\"5381\":1,\"5382\":1,\"5387\":1}}],[\"从句\",{\"1\":{\"2903\":1,\"5281\":1}}],[\"从库的自增值就是什么\",{\"1\":{\"2769\":1,\"5147\":1}}],[\"从左到右依次到查询条件中去匹配\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"从这个名字中我们也可以发现\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"从这个角度\",{\"1\":{\"578\":1}}],[\"从上图可以看到\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"从上面thread类\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"从上面我们可以看出\",{\"1\":{\"3165\":1,\"4510\":1}}],[\"从上面的这段代码来看\",{\"1\":{\"1335\":1}}],[\"从上面图中可以看到\",{\"1\":{\"994\":1}}],[\"从上面两段代码中发现有两处不同\",{\"1\":{\"779\":1}}],[\"从下图你可以看到\",{\"1\":{\"1381\":1,\"1549\":1,\"1717\":1,\"1885\":1,\"4808\":1}}],[\"从下图可以看到这个文件的配置内容都被我们读取到了\",{\"1\":{\"1146\":1,\"4179\":1}}],[\"从查询出来映射生成的\",{\"1\":{\"1221\":1,\"4254\":1}}],[\"从2进制角度来看\",{\"1\":{\"976\":1}}],[\"从16扩容到32\",{\"1\":{\"936\":1}}],[\"从\",{\"1\":{\"841\":1,\"844\":1,\"1422\":1,\"1590\":1,\"1758\":1,\"1926\":1,\"2128\":1,\"2807\":1,\"3117\":1,\"3125\":1,\"4050\":1,\"4053\":1,\"4400\":1,\"4407\":1,\"4733\":1,\"4849\":1,\"5185\":1}}],[\"从内部实现机制来讲arraylist和vector都是使用数组\",{\"1\":{\"795\":1}}],[\"从内存模型而不是垃圾回收的角度\",{\"1\":{\"272\":1}}],[\"从remove方法中我们发现除了一个使用同步方法\",{\"1\":{\"789\":1}}],[\"从两端进行操作\",{\"1\":{\"728\":1}}],[\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\",{\"1\":{\"667\":1,\"4008\":1}}],[\"从根节点到叶子节点的所有路径上不能有\",{\"1\":{\"666\":1,\"4007\":1}}],[\"从第1层到第\",{\"1\":{\"648\":1}}],[\"从一个局域网到另一个局域网中的网络设备的寻址\",{\"1\":{\"2474\":1,\"5572\":1}}],[\"从一个祖先结点到其子孙结点的一系列边称为树中一条路径\",{\"1\":{\"632\":1}}],[\"从一棵树的根到树中任一个结点都有路径\",{\"1\":{\"632\":1}}],[\"从父结点到子结点的连线\",{\"1\":{\"626\":1}}],[\"从时间复杂度的角度\",{\"1\":{\"597\":1}}],[\"从他们的角度看\",{\"1\":{\"576\":1}}],[\"从用户的角度看\",{\"1\":{\"572\":1}}],[\"从程序语法角度讲是必须进行处理的异常\",{\"1\":{\"439\":1,\"3898\":1}}],[\"从局部\",{\"1\":{\"382\":1}}],[\"从而到底提高程序性能的目的\",{\"1\":{\"3240\":1,\"4363\":1}}],[\"从而消耗大量的系统资\",{\"1\":{\"3237\":1,\"4360\":1}}],[\"从而降低获取锁带来的消耗\",{\"1\":{\"3228\":1,\"4352\":1}}],[\"从而避免了线程安全问题\",{\"1\":{\"3186\":1,\"4531\":1}}],[\"从而避免了参数也作为条件的一部分\",{\"1\":{\"2876\":1,\"5254\":1}}],[\"从而执行相应的同步调用\",{\"1\":{\"3175\":1,\"4520\":1}}],[\"从而造成了可见性问题\",{\"1\":{\"3137\":1,\"4450\":1}}],[\"从而对\",{\"1\":{\"2522\":1,\"5620\":1}}],[\"从而减少了客户端的请求次数和延迟\",{\"1\":{\"2512\":1,\"5610\":1}}],[\"从而支持虚拟主机的功能\",{\"1\":{\"2507\":1,\"5605\":1}}],[\"从而解放了开发人员以便他们专注在真正重要的事情上\",{\"1\":{\"2016\":1,\"4621\":1}}],[\"从而大幅提升了\",{\"1\":{\"1431\":1,\"1599\":1,\"1767\":1,\"1935\":1,\"4858\":1}}],[\"从而导致\",{\"1\":{\"3310\":1,\"3342\":1,\"3343\":1,\"3344\":1,\"4575\":1,\"4599\":1,\"4600\":1,\"4601\":1}}],[\"从而导致消息重复消费\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"从而导致offset自动提交失败\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"从而提高系统的负载能力\",{\"1\":{\"2050\":1,\"4655\":1}}],[\"从而提高查询效率\",{\"1\":{\"1221\":1,\"1223\":1,\"4254\":1,\"4256\":1}}],[\"从而提高性能\",{\"1\":{\"247\":1}}],[\"从而保证共享变量的可见性\",{\"1\":{\"3139\":1,\"4452\":1}}],[\"从而保证插入数据时\",{\"1\":{\"2758\":1,\"5136\":1}}],[\"从而保证最终结果为正整数\",{\"1\":{\"1029\":1}}],[\"从而保证分布均匀\",{\"1\":{\"877\":1,\"3985\":1}}],[\"从而保证了红黑树的查找\",{\"1\":{\"871\":1,\"3979\":1}}],[\"从而将原来的一整块内存空间划分成多个的小空间\",{\"1\":{\"375\":1}}],[\"什么叫具有唯一性的字符串呢\",{\"1\":{\"3568\":1}}],[\"什么叫能体现该接口特性的字符串呢\",{\"1\":{\"3567\":1}}],[\"什么垃圾玩意\",{\"1\":{\"3373\":1,\"5653\":1}}],[\"什么时候执⾏\",{\"1\":{\"460\":1}}],[\"什么时候才会去养老区呢\",{\"1\":{\"268\":1}}],[\"什么是代理模式\",{\"0\":{\"4043\":1}}],[\"什么是设计模式\",{\"0\":{\"4022\":1}}],[\"什么是反射机制\",{\"0\":{\"3927\":1}}],[\"什么是md5\",{\"0\":{\"3580\":1}}],[\"什么是aqs\",{\"0\":{\"3060\":1,\"4414\":1}}],[\"什么是缓存雪崩\",{\"0\":{\"3041\":1,\"5419\":1}}],[\"什么是缓存击穿\",{\"0\":{\"3032\":1,\"5410\":1}}],[\"什么是缓存穿透\",{\"0\":{\"3014\":1,\"5392\":1}}],[\"什么是网络分区\",{\"1\":{\"2151\":1,\"4756\":1}}],[\"什么是feign\",{\"1\":{\"2084\":1,\"4689\":1}}],[\"什么是断路器\",{\"1\":{\"2071\":1,\"4676\":1}}],[\"什么是spring\",{\"0\":{\"1180\":1,\"2031\":1,\"4213\":1,\"4636\":1}}],[\"什么是\",{\"0\":{\"271\":1,\"581\":1,\"2013\":1,\"2963\":1,\"2971\":1,\"3094\":1,\"4370\":1,\"4618\":1,\"5341\":1,\"5349\":1},\"1\":{\"2077\":1,\"2297\":1,\"2298\":1,\"2312\":1,\"4682\":1}}],[\"相等则表示密码正确\",{\"1\":{\"3637\":1}}],[\"相等就不添加\",{\"1\":{\"699\":1}}],[\"相当的安全性\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"相当于只是对k做了个简单的hash\",{\"1\":{\"1000\":1}}],[\"相反\",{\"1\":{\"2169\":1,\"3256\":1,\"4291\":1}}],[\"相反的\",{\"1\":{\"1336\":1}}],[\"相信\",{\"1\":{\"961\":1}}],[\"相信大家在\",{\"1\":{\"547\":1}}],[\"相比效率上存在天然的劣势\",{\"1\":{\"5530\":1}}],[\"相比普通索引建立的数据更小\",{\"1\":{\"2627\":1,\"5005\":1}}],[\"相比\",{\"1\":{\"2582\":1,\"2599\":1,\"4960\":1,\"4977\":1}}],[\"相比于\",{\"1\":{\"2919\":1,\"5297\":1}}],[\"相比于非聚簇索引\",{\"1\":{\"2634\":1,\"5012\":1}}],[\"相比于之前rangeassignor的分配策略\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"相比于静态代理来说\",{\"1\":{\"843\":1,\"4052\":1}}],[\"相比treemap效率更高\",{\"1\":{\"1041\":1}}],[\"相比vector来说\",{\"1\":{\"758\":1}}],[\"相同的\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"相同的类文件被不同的类加载器加载产生的是两个不同的类\",{\"1\":{\"428\":1,\"3885\":1}}],[\"相同二进制名称的类只会被加载一次\",{\"1\":{\"399\":1,\"3854\":1}}],[\"相对于\",{\"1\":{\"291\":1}}],[\"相对悠闲\",{\"1\":{\"269\":1}}],[\"相关的方法\",{\"1\":{\"3107\":1,\"4389\":1}}],[\"相关的接口作用\",{\"1\":{\"1381\":1,\"1549\":1,\"1717\":1,\"1885\":1,\"4808\":1}}],[\"相关问题\",{\"1\":{\"3000\":1,\"5378\":1}}],[\"相关代码如下所示\",{\"1\":{\"420\":1,\"3877\":1}}],[\"相关总结如下\",{\"1\":{\"196\":1}}],[\"相关信息\",{\"1\":{\"34\":1,\"703\":1,\"705\":1,\"761\":1,\"790\":1,\"794\":1,\"797\":1,\"933\":1,\"947\":1,\"964\":1,\"971\":1,\"978\":1,\"995\":1,\"1003\":1,\"1330\":1,\"3688\":1}}],[\"每秒请求数\",{\"1\":{\"3560\":1}}],[\"每台服务都会去执行refresh定时任务方法\",{\"1\":{\"3541\":1,\"5810\":1}}],[\"每隔一段时间抽取一批\",{\"1\":{\"2995\":1,\"5373\":1}}],[\"每\",{\"1\":{\"2889\":1,\"5267\":1}}],[\"每发送一次数据\",{\"1\":{\"2338\":1}}],[\"每天打开一个新片段\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"每当执行接口对象的方法时\",{\"1\":{\"1217\":1,\"4250\":1}}],[\"每当一个类加载器接收到加载请求时\",{\"1\":{\"422\":1,\"3879\":1}}],[\"每一个设备都会收到该分组\",{\"1\":{\"2482\":1,\"5580\":1}}],[\"每一个模块都是一个单独的系统\",{\"1\":{\"2034\":1,\"4639\":1}}],[\"每一个queue一个consumer\",{\"1\":{\"1314\":1,\"5506\":1}}],[\"每一项工作都是以一个\",{\"1\":{\"2023\":1,\"4628\":1}}],[\"每一次重分配的结果尽量与上一次分配结果保持一致\",{\"1\":{\"1288\":1,\"5480\":1}}],[\"每一次分配变更相对上一次分配做最少的变动\",{\"1\":{\"1286\":1,\"5478\":1}}],[\"每一次添加操作\",{\"1\":{\"597\":1}}],[\"每一行都很有意思\",{\"1\":{\"1032\":1}}],[\"每层从左到右\",{\"1\":{\"648\":1}}],[\"每添加一个元素\",{\"1\":{\"599\":1}}],[\"每次在真正消费完消息之后再自己手动提交\",{\"1\":{\"3468\":1,\"5737\":1}}],[\"每次变量更新了就把版本号加一\",{\"1\":{\"3115\":1,\"4397\":1}}],[\"每次构建不同的请求\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"每次\",{\"1\":{\"2589\":1,\"4967\":1}}],[\"每次操作时都传入整个\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"每次获取时+1\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"每次扩容都是成倍的\",{\"1\":{\"950\":1}}],[\"每次只能一个线程持有锁\",{\"1\":{\"3064\":1,\"4418\":1}}],[\"每次只能有⼀个线程调⽤访问同步块内容\",{\"1\":{\"821\":1,\"4030\":1}}],[\"每次只使用其中一块\",{\"1\":{\"332\":1}}],[\"每次增长capacityincrement\",{\"1\":{\"764\":1}}],[\"每次根据允许的收集时间\",{\"1\":{\"375\":1}}],[\"每次使用\",{\"1\":{\"334\":1}}],[\"每经历一次\",{\"1\":{\"259\":1}}],[\"每个thread中都具备一个threadlocalmap\",{\"1\":{\"3195\":1,\"4539\":1}}],[\"每个topic有2个分区\",{\"1\":{\"1291\":1,\"5483\":1}}],[\"每个topic4个分区\",{\"1\":{\"1275\":1,\"5467\":1}}],[\"每个topic仅需恢复一部分的数据\",{\"1\":{\"1258\":1,\"5450\":1}}],[\"每个对象中都内置了一个\",{\"1\":{\"3168\":1,\"4513\":1}}],[\"每个实例都对应有自己的一把锁\",{\"1\":{\"3159\":1}}],[\"每个线程独享的内存\",{\"1\":{\"3136\":1,\"4448\":1}}],[\"每个线程都有它自己的程序计数器\",{\"1\":{\"198\":1}}],[\"每个线程都独立计算\",{\"1\":{\"195\":1}}],[\"每个事务读到的数据版本可能是不一样的\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"每个事务都有一个完整的数据空间\",{\"1\":{\"2808\":1,\"5186\":1}}],[\"每个语句执行前\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"每个请求和响应都需要独立的连接\",{\"1\":{\"2509\":1,\"5607\":1}}],[\"每个接口同样也应该具备不重复的\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"每个网络设备都自己维护了一个\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"每个目录可以包含文件和其他子目录\",{\"1\":{\"1325\":1,\"4282\":1}}],[\"每个消费者都订阅了相同的topic\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"每个片段包含1g或者一周的数据\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"每个端点都可以启用和禁用\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"每个单向链表往往只有一个或少数几个节点\",{\"1\":{\"905\":1}}],[\"每个元素的rehash之后\",{\"1\":{\"869\":1,\"3977\":1}}],[\"每个父类加载器都会走一遍这个流程\",{\"1\":{\"424\":1,\"3881\":1}}],[\"每个\",{\"0\":{\"2897\":1,\"5275\":1},\"1\":{\"394\":1,\"2120\":1,\"3849\":1,\"4725\":1}}],[\"每个栈帧\",{\"1\":{\"211\":1}}],[\"每个方法执行\",{\"1\":{\"205\":1}}],[\"将返回线程池进行复用\",{\"1\":{\"3334\":1,\"4591\":1}}],[\"将线程池里的线程状态设置成stop状态\",{\"1\":{\"3325\":1}}],[\"将线程池里的线程状态设置成shutdown状态\",{\"1\":{\"3323\":1}}],[\"将抛出\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"将轻量级锁升级为重量级锁\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"将需要存储的值放入到这个哈希表中\",{\"1\":{\"3193\":1,\"4537\":1}}],[\"将锁计数器设为\",{\"1\":{\"3171\":1,\"4516\":1}}],[\"将多个变量操作合成一个变量操作\",{\"1\":{\"3125\":1,\"4407\":1}}],[\"将内存地址\",{\"1\":{\"3102\":1,\"4383\":1}}],[\"将内存划分为大小相等的两块\",{\"1\":{\"332\":1}}],[\"将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期\",{\"1\":{\"3036\":1,\"5414\":1}}],[\"将其他相关资源一并推送给客户端\",{\"1\":{\"2512\":1,\"5610\":1}}],[\"将阻塞直到写入磁盘完成后返回\",{\"1\":{\"2981\":1,\"5359\":1}}],[\"将敏感字符进行转义\",{\"1\":{\"2875\":1,\"5253\":1}}],[\"将当前未提交事务\",{\"1\":{\"2865\":1,\"5243\":1}}],[\"将会自动创建一个\",{\"1\":{\"2619\":1,\"4997\":1}}],[\"将会抛出concurrentmodificationexception\",{\"1\":{\"895\":1}}],[\"将该\",{\"1\":{\"2494\":1,\"5592\":1}}],[\"将把这个链路层帧\",{\"1\":{\"2493\":1,\"5591\":1}}],[\"将采用\",{\"1\":{\"2492\":1,\"2497\":1,\"5590\":1,\"5595\":1}}],[\"将构造一个\",{\"1\":{\"2480\":1,\"5578\":1}}],[\"将不得不通过\",{\"1\":{\"2478\":1,\"5576\":1}}],[\"将消息持久化到存储系统\",{\"1\":{\"2172\":1,\"4294\":1}}],[\"将写请求\",{\"1\":{\"2117\":1,\"4722\":1}}],[\"将数据保存在内存中\",{\"1\":{\"2097\":1,\"4702\":1}}],[\"将这些本地proxy代理实例\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"将这个值与topic可用的partition数取余得到partition值\",{\"1\":{\"1262\":1,\"5454\":1}}],[\"将这个类标志成\",{\"1\":{\"564\":1}}],[\"将请求模板化\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"将请求消息\",{\"1\":{\"1060\":1,\"4093\":1}}],[\"将以java注解的方式定义的远程调用api接口\",{\"1\":{\"2087\":1,\"4692\":1}}],[\"将一个完整的系统拆分成很多个服务\",{\"1\":{\"2054\":1,\"4659\":1}}],[\"将一个复杂的业务拆分为若干小的业务\",{\"1\":{\"2045\":1,\"4650\":1}}],[\"将事物分成多阶段提交\",{\"1\":{\"2053\":1,\"4658\":1}}],[\"将复杂的业务简单化\",{\"1\":{\"2045\":1,\"4650\":1}}],[\"将下载镜像以\",{\"1\":{\"2024\":1,\"4629\":1}}],[\"将新的连接分配给某个子线程\",{\"1\":{\"1499\":1,\"1667\":1,\"1835\":1,\"2003\":1,\"4926\":1}}],[\"将结果发给主线程中的\",{\"1\":{\"1486\":1,\"1654\":1,\"1822\":1,\"1990\":1,\"4913\":1}}],[\"将上面的两个因素排列组设一下\",{\"1\":{\"1441\":1,\"1609\":1,\"1777\":1,\"1945\":1,\"4868\":1}}],[\"将磁盘上的数据拷贝到内核缓冲区里\",{\"1\":{\"1423\":1,\"1591\":1,\"1759\":1,\"1927\":1,\"4850\":1}}],[\"将获取的唯一id存表\",{\"1\":{\"1303\":1,\"5495\":1}}],[\"将key的hash值与topic的partition数进行取余得到partition值\",{\"1\":{\"1261\":1,\"5453\":1}}],[\"将如何处理\",{\"1\":{\"1252\":1,\"5444\":1}}],[\"将重新启动\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"将渲染结果返回给客户端\",{\"1\":{\"1067\":1,\"4100\":1}}],[\"将字符串转换成格式化数字或格式化日期等\",{\"1\":{\"1062\":1,\"4095\":1}}],[\"将字节码翻译成底层系统指令\",{\"1\":{\"182\":1,\"3831\":1}}],[\"将对象转换为指定的响应信息\",{\"1\":{\"1060\":1,\"4093\":1}}],[\"将帮你做一些额外的工作\",{\"1\":{\"1059\":1,\"4092\":1}}],[\"将得到视图对象返回给用户\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"将⽣产任务交给不同的派⽣类⼯⼚\",{\"1\":{\"829\":1,\"4038\":1}}],[\"将在新的\",{\"1\":{\"563\":1}}],[\"将搜索类或资源的任务委托给其父类加载器\",{\"1\":{\"418\":1,\"3874\":1}}],[\"将\",{\"1\":{\"334\":1,\"573\":1,\"2980\":1,\"3080\":1,\"3631\":1,\"4436\":1,\"5358\":1}}],[\"将存活的对象进行标记\",{\"1\":{\"325\":1}}],[\"将伊甸园区中的不再被其他对象所引用的对象进行销毁\",{\"1\":{\"264\":1}}],[\"将执行新生代的垃圾回收\",{\"1\":{\"257\":1}}],[\"+=\",{\"1\":{\"1014\":3}}],[\"++i\",{\"1\":{\"3200\":1}}],[\"++\",{\"1\":{\"463\":1}}],[\"+1层\",{\"1\":{\"648\":1}}],[\"+1\",{\"1\":{\"258\":1,\"3248\":1,\"3328\":1,\"4478\":1,\"4585\":1}}],[\"+maxmemory\",{\"1\":{\"251\":1}}],[\"+\",{\"0\":{\"1403\":1,\"1571\":1,\"1739\":1,\"1907\":1,\"4830\":1},\"1\":{\"251\":6,\"519\":1,\"601\":2,\"763\":1,\"764\":1,\"774\":4,\"778\":2,\"925\":2,\"930\":3,\"943\":8,\"996\":1,\"1014\":1,\"1272\":4,\"1334\":1,\"1400\":1,\"1568\":1,\"1736\":1,\"1904\":1,\"2610\":2,\"2612\":1,\"2781\":1,\"2791\":1,\"2934\":1,\"3200\":1,\"3445\":10,\"3478\":1,\"3970\":1,\"4827\":1,\"4988\":2,\"4990\":1,\"5159\":1,\"5169\":1,\"5312\":1,\"5464\":4,\"5714\":10,\"5747\":1}}],[\"+initalmemory\",{\"1\":{\"251\":1}}],[\"返回结果小于等于maximumpoolsize\",{\"1\":{\"3358\":1}}],[\"返回结果少于gettaskcount\",{\"1\":{\"3357\":1}}],[\"返回线程池对象的弊端如下\",{\"1\":{\"3341\":1,\"4598\":1}}],[\"返回true\",{\"1\":{\"3325\":2}}],[\"返回值是实际复制数据的长度\",{\"1\":{\"1417\":1,\"1585\":1,\"1753\":1,\"1921\":1,\"4844\":1}}],[\"返回错误信息\",{\"1\":{\"2081\":1,\"4686\":1}}],[\"返回错误\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"返回时\",{\"1\":{\"1384\":1,\"1552\":1,\"1720\":1,\"1888\":1,\"4811\":1}}],[\"返回给dispatcherservlet\",{\"1\":{\"1065\":1,\"4098\":1}}],[\"返回一个\",{\"1\":{\"1064\":1,\"4097\":1}}],[\"返回一个视图对象\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"返回\",{\"1\":{\"251\":2,\"463\":2}}],[\"返回顶部按钮\",{\"1\":{\"22\":1,\"139\":1,\"3676\":1,\"3793\":1}}],[\"42992084\",{\"1\":{\"3656\":1}}],[\"4242\",{\"1\":{\"1295\":1,\"5487\":1}}],[\"4对称加密和非对称加密有哪些优缺点\",{\"0\":{\"3651\":1}}],[\"4如何动态修改线程池的参数\",{\"0\":{\"3345\":1}}],[\"4自旋锁\",{\"0\":{\"3250\":1}}],[\"4重量级锁\",{\"0\":{\"3235\":1}}],[\"4volatile总结\",{\"0\":{\"3153\":1}}],[\"4总结\",{\"0\":{\"3126\":1}}],[\"4acquire方法流程总结\",{\"0\":{\"3074\":1}}],[\"443\",{\"1\":{\"2519\":1,\"5617\":1}}],[\"44901983\",{\"1\":{\"1318\":1,\"5510\":1}}],[\"410\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"4163ms\",{\"1\":{\"603\":1}}],[\"409\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"4客户端调用\",{\"0\":{\"2447\":1}}],[\"4第二次挥手丢失了\",{\"0\":{\"2432\":1}}],[\"4为什么每次建立\",{\"0\":{\"2421\":1}}],[\"48\",{\"1\":{\"2371\":1}}],[\"4什么是\",{\"0\":{\"2354\":1}}],[\"4g数据找系统记录\",{\"0\":{\"2163\":1,\"4285\":1}}],[\"4e161a06a0afcae8d2c06603d676de4e\",{\"1\":{\"1283\":1,\"5475\":1}}],[\"45161172\",{\"1\":{\"1242\":1,\"4275\":1}}],[\"4动态代理\",{\"0\":{\"842\":1}}],[\"4工厂模式\",{\"0\":{\"822\":1}}],[\"4获取类的所有信息\",{\"0\":{\"511\":1}}],[\"4java\",{\"0\":{\"453\":1}}],[\"4双亲委派模型\",{\"0\":{\"414\":1}}],[\"4serial\",{\"0\":{\"357\":1}}],[\"4分代收集\",{\"0\":{\"336\":1}}],[\"4\",{\"0\":{\"384\":1,\"385\":1,\"388\":1,\"391\":1,\"392\":1,\"397\":1,\"400\":1,\"414\":1,\"643\":1,\"668\":1,\"689\":1,\"729\":1,\"812\":1,\"813\":1,\"817\":1,\"822\":1,\"823\":2,\"827\":2,\"830\":2,\"832\":1,\"833\":1,\"834\":1,\"836\":1,\"839\":1,\"842\":1,\"874\":1,\"2205\":1,\"2443\":1,\"2444\":1,\"2445\":1,\"2446\":1,\"2447\":1,\"2448\":1,\"2449\":1,\"3074\":1,\"3079\":1,\"3086\":1,\"3473\":1,\"3591\":1,\"3638\":1,\"4010\":1,\"5742\":1},\"1\":{\"249\":1,\"251\":1,\"686\":1,\"921\":1,\"940\":1,\"968\":1,\"987\":1,\"993\":1,\"1063\":1,\"1119\":1,\"1135\":1,\"1151\":1,\"1199\":1,\"1295\":1,\"1413\":1,\"1422\":1,\"1441\":1,\"1581\":1,\"1590\":1,\"1609\":1,\"1749\":1,\"1758\":1,\"1777\":1,\"1917\":1,\"1926\":1,\"1945\":1,\"2328\":1,\"2385\":1,\"2574\":1,\"2788\":1,\"2805\":1,\"2844\":2,\"2889\":1,\"2962\":1,\"3008\":1,\"3100\":1,\"3200\":2,\"3369\":1,\"3377\":1,\"3399\":1,\"3405\":1,\"3414\":1,\"3428\":1,\"3437\":1,\"3510\":1,\"3532\":1,\"4096\":1,\"4152\":1,\"4168\":1,\"4184\":1,\"4232\":1,\"4379\":1,\"4840\":1,\"4849\":1,\"4868\":1,\"4952\":1,\"5166\":1,\"5183\":1,\"5222\":2,\"5267\":1,\"5340\":1,\"5386\":1,\"5487\":1,\"5649\":1,\"5657\":1,\"5679\":1,\"5685\":1,\"5694\":1,\"5708\":1,\"5779\":1,\"5801\":1}}],[\"4堆内存\",{\"0\":{\"222\":1}}],[\"默认\",{\"1\":{\"3571\":2}}],[\"默认循环10次\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"默认使用非公平锁\",{\"1\":{\"3216\":1,\"4340\":1}}],[\"默认使用的是\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"默认使用的\",{\"1\":{\"2569\":1,\"4947\":1}}],[\"默认的文件名是\",{\"1\":{\"2976\":1,\"5354\":1}}],[\"默认的触发模式是水平触发\",{\"1\":{\"1395\":1,\"1563\":1,\"1731\":1,\"1899\":1,\"4822\":1}}],[\"默认选项\",{\"1\":{\"2970\":1,\"5348\":1}}],[\"默认为行级锁\",{\"1\":{\"2565\":1,\"4943\":1}}],[\"默认没有开启二级缓存\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"默认开启一级缓存\",{\"1\":{\"1221\":1,\"4254\":1}}],[\"默认开启的线程数量与\",{\"1\":{\"353\":1}}],[\"默认都是有parent的\",{\"1\":{\"1186\":1,\"4219\":1}}],[\"默认都是单例的\",{\"1\":{\"1071\":1,\"4104\":1}}],[\"默认spring\",{\"1\":{\"1140\":1,\"4173\":1}}],[\"默认采用的持久化方式\",{\"1\":{\"2965\":1,\"5343\":1}}],[\"默认采用的\",{\"1\":{\"1091\":2,\"4124\":2}}],[\"默认值\",{\"1\":{\"2930\":2,\"2938\":1,\"2945\":2,\"5308\":2,\"5316\":1,\"5323\":2}}],[\"默认值是16\",{\"1\":{\"950\":1}}],[\"默认值为0\",{\"1\":{\"940\":1}}],[\"默认容量是16\",{\"1\":{\"921\":1}}],[\"默认初始容量和扩容机制\",{\"1\":{\"889\":1}}],[\"默认实现是空方法\",{\"1\":{\"409\":1,\"3864\":1}}],[\"默认是非公平锁\",{\"1\":{\"3275\":1,\"4503\":1}}],[\"默认是\",{\"1\":{\"268\":1,\"2519\":2,\"5617\":2}}],[\"默认情况下也是非公平的\",{\"1\":{\"3210\":1,\"4334\":1}}],[\"默认情况下这两个变量都是\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"默认情况下hashmap的容量是16\",{\"1\":{\"932\":1}}],[\"默认情况下arraylist的初始容量非常小\",{\"1\":{\"745\":1}}],[\"默认情况下\",{\"1\":{\"248\":1,\"249\":1,\"928\":1,\"941\":1,\"1251\":1,\"2972\":1,\"5350\":1,\"5443\":1}}],[\"默认比例是8\",{\"1\":{\"231\":1}}],[\"其写锁是独享锁\",{\"1\":{\"3263\":1,\"4491\":1}}],[\"其读锁是共享锁\",{\"1\":{\"3263\":1,\"4491\":1}}],[\"其余所有等待获取该锁的线程都会处于阻塞状态\",{\"1\":{\"3237\":1,\"4360\":1}}],[\"其余的结点可分为m\",{\"1\":{\"614\":1}}],[\"其余的类加载器都应有自己的父类加载器\",{\"1\":{\"417\":1,\"3873\":1}}],[\"其对查询性能的影响也就越大\",{\"1\":{\"2904\":1,\"5282\":1}}],[\"其效率大于索引合并\",{\"1\":{\"2614\":1,\"4992\":1}}],[\"其本质可以看成是一种排序好的数据结构\",{\"1\":{\"2584\":1,\"4962\":1}}],[\"其表数据文件本身就是按\",{\"1\":{\"2582\":1,\"2599\":1,\"4960\":1,\"4977\":1}}],[\"其数据结构如下\",{\"1\":{\"3073\":1,\"4428\":1}}],[\"其数据文件本身就是索引文件\",{\"1\":{\"2582\":1,\"2599\":1,\"4960\":1,\"4977\":1}}],[\"其数据流不受影响\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"其理论值计算公式如下\",{\"1\":{\"2369\":1}}],[\"其次\",{\"1\":{\"1419\":1,\"1587\":1,\"1755\":1,\"1923\":1,\"4846\":1}}],[\"其附近的存储单元也将被访问\",{\"1\":{\"1331\":1}}],[\"其目标有两点\",{\"1\":{\"1286\":1,\"5478\":1}}],[\"其目的是为了能够在垃圾回收机制清理完堆区后不再需要重新分隔计算堆的大小\",{\"1\":{\"247\":1}}],[\"其作用域是\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"其主要目的也是为了把高位和低位组合在一起\",{\"1\":{\"1015\":1}}],[\"其主要被以下方法引用\",{\"1\":{\"958\":1}}],[\"其定义了产品的⽣产接⼝\",{\"1\":{\"829\":1,\"4038\":1}}],[\"其实并不是真正的破解\",{\"1\":{\"3589\":1}}],[\"其实java线程池的实现原理很简单\",{\"1\":{\"3317\":1}}],[\"其实内部实现就是调用\",{\"1\":{\"3202\":1}}],[\"其实泄露的并不严重\",{\"1\":{\"3201\":1}}],[\"其实主要就是\",{\"1\":{\"2132\":1,\"4737\":1}}],[\"其实和初始化选举差不多\",{\"1\":{\"2127\":1,\"4732\":1}}],[\"其实它们的区别还是很好理解的\",{\"1\":{\"1387\":1,\"1555\":1,\"1723\":1,\"1891\":1,\"4814\":1}}],[\"其实整体处理过程类似\",{\"1\":{\"1133\":1,\"4166\":1}}],[\"其实我们在前面分析源码时也提到过\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"其实只有一级缓存并不是不能解决循环依赖\",{\"1\":{\"1122\":1,\"4155\":1}}],[\"其实就是通过cas修改对象头里的锁标志位\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"其实就是\",{\"1\":{\"1088\":1,\"4121\":1}}],[\"其实就是将数组和链表组合在一起\",{\"1\":{\"954\":1}}],[\"其实基本原理就是这个\",{\"1\":{\"963\":1}}],[\"其实简单\",{\"1\":{\"963\":1}}],[\"其实\",{\"1\":{\"938\":1,\"969\":1,\"996\":1,\"1002\":1,\"3649\":1}}],[\"其实很简单\",{\"1\":{\"821\":1,\"4030\":1}}],[\"其实synchronizedlist有一个构造函数可以传入一个object\",{\"1\":{\"803\":1}}],[\"其实背后的原理也很简单\",{\"1\":{\"458\":1}}],[\"其大小将会动态地增长\",{\"1\":{\"739\":1}}],[\"其他都是了解\",{\"1\":{\"3375\":1,\"5655\":1}}],[\"其他用户长时间无法访问\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"其他人就可以进入了\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"其他的线程都会阻塞\",{\"1\":{\"3270\":1,\"4498\":1}}],[\"其他的线程进入后就会阻塞等待锁\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"其他的exception类及其子类都属于可查异常\",{\"1\":{\"443\":1,\"3902\":1}}],[\"其他事务既不可以对该记录加\",{\"1\":{\"2785\":1,\"5163\":1}}],[\"其他事务也可以继续对该记录加\",{\"1\":{\"2784\":1,\"5162\":1}}],[\"其他事务的如果要向该表插入语句都会被阻塞\",{\"1\":{\"2758\":1,\"5136\":1}}],[\"其他内节点只存放\",{\"1\":{\"2594\":1,\"4972\":1}}],[\"其他节点的读写操作正常的话\",{\"1\":{\"2158\":1,\"4763\":1}}],[\"其他角色都没有得到更新吧\",{\"1\":{\"2116\":1,\"4721\":1}}],[\"其他阻塞\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"其他线程处于阻塞状态\",{\"1\":{\"3258\":1,\"4486\":1}}],[\"其他线程可以尝试获取锁\",{\"1\":{\"3171\":1,\"4516\":1}}],[\"其他线程才有机会操作共享数据\",{\"1\":{\"1489\":1,\"1657\":1,\"1825\":1,\"1993\":1,\"4916\":1}}],[\"其他线程调用了该对象的start\",{\"1\":{\"1344\":1,\"1512\":1,\"1680\":1,\"1848\":1,\"4771\":1}}],[\"其他线程获取锁后就会被空判断拦截\",{\"1\":{\"821\":1,\"4030\":1}}],[\"其他\",{\"1\":{\"1200\":1,\"4233\":1}}],[\"其他情况\",{\"1\":{\"1106\":1,\"4139\":1}}],[\"其他没有特定顺序\",{\"1\":{\"732\":1}}],[\"其右孩子是结点2i＋1\",{\"1\":{\"651\":1}}],[\"其左孩子是结点2i\",{\"1\":{\"650\":1}}],[\"其中一个密钥叫公开密钥\",{\"1\":{\"3647\":1}}],[\"其中源\",{\"1\":{\"2493\":2,\"5591\":2}}],[\"其中高32位表示\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"其中的主要代码部分如下\",{\"1\":{\"986\":1}}],[\"其中定义了一个final\",{\"1\":{\"958\":1}}],[\"其中⼀个线程获取锁\",{\"1\":{\"821\":1,\"4030\":1}}],[\"其中有一个是我们本文主要关注的\",{\"1\":{\"911\":1}}],[\"其中有一些会随着虚拟机启动而创建\",{\"1\":{\"186\":1}}],[\"其中有listiterator和\",{\"1\":{\"804\":1}}],[\"其中每个子集又是一棵树\",{\"1\":{\"614\":1}}],[\"其中\",{\"1\":{\"386\":1,\"956\":1,\"1446\":1,\"1464\":1,\"1614\":1,\"1632\":1,\"1782\":1,\"1800\":1,\"1950\":1,\"1968\":1,\"2105\":1,\"2471\":1,\"3165\":1,\"3178\":1,\"3839\":1,\"4510\":1,\"4523\":1,\"4710\":1,\"4873\":1,\"4891\":1,\"5569\":1}}],[\"其它都是api\",{\"1\":{\"3377\":1,\"5657\":1}}],[\"其它的运行所需资源都已全部获得\",{\"1\":{\"1344\":1,\"1512\":1,\"1680\":1,\"1848\":1,\"4771\":1}}],[\"其它收集器进行收集的范围都是整个新生代或者老年代\",{\"1\":{\"374\":1}}],[\"其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间\",{\"1\":{\"356\":1}}],[\"其它垃圾收集器都是以串行的方式执行\",{\"1\":{\"344\":1}}],[\"设定log的目录\",{\"1\":{\"3571\":1}}],[\"设定的最大内存\",{\"1\":{\"246\":1}}],[\"设置成功\",{\"1\":{\"3550\":1,\"5819\":1}}],[\"设置成0\",{\"1\":{\"940\":1}}],[\"设置\",{\"1\":{\"3546\":1,\"5815\":1}}],[\"设置指定的值\",{\"1\":{\"3545\":1,\"5814\":1}}],[\"设置二级缓存\",{\"1\":{\"3052\":1,\"5430\":1}}],[\"设置不同的失效时间比如随机设置缓存的失效时间\",{\"1\":{\"3050\":1,\"5428\":1}}],[\"设置热点数据永不过期或者过期时间比较长\",{\"1\":{\"3035\":1,\"5413\":1}}],[\"设置过期时间还是有问题的\",{\"1\":{\"2997\":1,\"5375\":1}}],[\"设置中填写的\",{\"1\":{\"2536\":1,\"5634\":1}}],[\"设置堆内存大小和\",{\"0\":{\"242\":1}}],[\"设计目标\",{\"1\":{\"2057\":1,\"4662\":1}}],[\"设计成16的好处主要是可以使用按位与替代取模来提升hash的效率\",{\"1\":{\"928\":1}}],[\"设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案\",{\"1\":{\"814\":1,\"4023\":1}}],[\"设计模式\",{\"1\":{\"814\":1,\"4023\":1}}],[\"设计的另一个不合理之处\",{\"1\":{\"578\":1}}],[\"设计中\",{\"1\":{\"561\":1}}],[\"设计原则\",{\"1\":{\"560\":1}}],[\"目前出现过的最大的事务\",{\"1\":{\"2863\":1,\"5241\":1}}],[\"目前只有\",{\"1\":{\"2605\":1,\"2615\":1,\"4983\":1,\"4993\":1}}],[\"目前大部分数据库系统及文件系统都采用\",{\"1\":{\"2592\":1,\"4970\":1}}],[\"目标接口接收到了主机\",{\"1\":{\"2494\":1,\"5592\":1}}],[\"目标路由器指的是\",{\"1\":{\"2491\":1,\"5589\":1}}],[\"目标\",{\"1\":{\"2484\":1,\"2498\":1,\"5582\":1,\"5596\":1}}],[\"目标主机收到后\",{\"1\":{\"2395\":1,\"2396\":1}}],[\"目标对象和代理对象都要进行修改\",{\"1\":{\"840\":1,\"4049\":1}}],[\"目的就是尽量使得明文密码的复杂度增加一些\",{\"1\":{\"3607\":1}}],[\"目的\",{\"1\":{\"2493\":2,\"5591\":2}}],[\"目的端口\",{\"1\":{\"2365\":1}}],[\"目的地址\",{\"1\":{\"2364\":1}}],[\"目的是保证对于提交的任务\",{\"1\":{\"3310\":1,\"4575\":1}}],[\"目的是为了解决可重复读隔离级别下幻读的现象\",{\"1\":{\"2787\":1,\"5165\":1}}],[\"目的是告诉我们有数据需要读取\",{\"1\":{\"1389\":1,\"1557\":1,\"1725\":1,\"1893\":1,\"4816\":1}}],[\"目的是在执行一次新的分配时\",{\"1\":{\"1286\":1,\"5478\":1}}],[\"目的应该是与\",{\"1\":{\"241\":1,\"280\":1}}],[\"目录树由根目录\",{\"1\":{\"1325\":1,\"4282\":1}}],[\"目录结构\",{\"0\":{\"1324\":1,\"4281\":1}}],[\"目录下的\",{\"1\":{\"403\":1,\"3858\":1}}],[\"目录\",{\"0\":{\"4\":1,\"3658\":1}}],[\"n+1\",{\"1\":{\"3328\":1,\"4585\":1}}],[\"nginx\",{\"1\":{\"1453\":1,\"1621\":1,\"1789\":1,\"1957\":1,\"4880\":1}}],[\"nio\",{\"1\":{\"1432\":1,\"1600\":1,\"1768\":1,\"1936\":1,\"4859\":1}}],[\"npe\",{\"1\":{\"1123\":1,\"4156\":1}}],[\"number\",{\"1\":{\"2861\":2,\"3288\":3,\"3356\":1,\"3357\":1,\"3358\":1,\"3359\":1,\"3360\":1,\"4552\":3,\"5239\":2}}],[\"numpartitionsperconsumer\",{\"1\":{\"1272\":3,\"5464\":3}}],[\"numpartitionsfortopic\",{\"1\":{\"1272\":5,\"5464\":5}}],[\"numpartitions\",{\"1\":{\"1263\":3,\"5455\":3}}],[\"nummoved\",{\"1\":{\"786\":3,\"788\":3}}],[\"nullpointerexception\",{\"1\":{\"3288\":2,\"4552\":2}}],[\"null值\",{\"1\":{\"697\":1,\"698\":1}}],[\"null节点的父节点在红黑树里不将其看作叶子节点\",{\"1\":{\"663\":1,\"4004\":1}}],[\"null\",{\"1\":{\"402\":1,\"421\":4,\"457\":6,\"485\":1,\"786\":1,\"788\":1,\"820\":4,\"821\":1,\"1020\":1,\"1263\":3,\"1272\":1,\"2610\":1,\"2612\":1,\"2618\":1,\"2619\":1,\"2625\":1,\"2626\":1,\"2659\":4,\"3190\":2,\"3191\":1,\"3193\":3,\"3203\":1,\"3288\":6,\"3857\":1,\"3878\":4,\"3936\":1,\"4029\":4,\"4030\":1,\"4534\":2,\"4535\":1,\"4537\":1,\"4552\":6,\"4988\":1,\"4990\":1,\"4996\":1,\"4997\":1,\"5003\":1,\"5004\":1,\"5037\":4,\"5455\":3,\"5464\":1}}],[\"n为节点数\",{\"1\":{\"1038\":1}}],[\"n为数组内容长度\",{\"1\":{\"710\":1}}],[\"n为元素个数\",{\"1\":{\"686\":1}}],[\"n>=0\",{\"1\":{\"612\":1}}],[\"no\",{\"1\":{\"1263\":1,\"2861\":1,\"3007\":1,\"5239\":1,\"5385\":1,\"5455\":1}}],[\"notify等方法\",{\"1\":{\"3169\":1,\"4514\":1}}],[\"notify等方法也依赖于monitor对象\",{\"1\":{\"3169\":1,\"4514\":1}}],[\"notify\",{\"1\":{\"1357\":1,\"1525\":1,\"1693\":1,\"1861\":1,\"4784\":1}}],[\"not\",{\"1\":{\"1104\":1,\"3545\":1,\"4137\":1,\"5814\":1}}],[\"node\",{\"1\":{\"599\":1,\"3071\":1,\"3077\":3,\"4425\":1,\"4433\":3}}],[\"nonfairsync\",{\"1\":{\"3215\":1,\"3217\":1,\"4339\":1,\"4341\":1}}],[\"none\",{\"1\":{\"1295\":1,\"1304\":2,\"2506\":1,\"5487\":1,\"5496\":2,\"5604\":1}}],[\"non\",{\"1\":{\"241\":1,\"280\":1,\"1263\":1,\"2640\":1,\"5018\":1,\"5455\":1}}],[\"nextindex\",{\"1\":{\"3203\":1}}],[\"nextint\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"next\",{\"0\":{\"2790\":1,\"5168\":1},\"1\":{\"2569\":1,\"2781\":1,\"2791\":1,\"2792\":1,\"2793\":3,\"2794\":2,\"2797\":1,\"2848\":3,\"3071\":1,\"3073\":1,\"4425\":1,\"4428\":1,\"4947\":1,\"5159\":1,\"5169\":1,\"5170\":1,\"5171\":3,\"5172\":2,\"5175\":1,\"5226\":3}}],[\"nextvalue\",{\"1\":{\"1263\":5,\"5455\":5}}],[\"nested\",{\"1\":{\"1107\":1,\"4140\":1}}],[\"never\",{\"1\":{\"1105\":1,\"4138\":1}}],[\"netty\",{\"1\":{\"1452\":1,\"1620\":1,\"1788\":1,\"1956\":1,\"4879\":1}}],[\"networkdriver\",{\"1\":{\"2025\":1,\"2027\":1,\"4630\":1,\"4632\":1}}],[\"network\",{\"0\":{\"5838\":1},\"1\":{\"1397\":1,\"1506\":1,\"1565\":1,\"1674\":1,\"1733\":1,\"1842\":1,\"1901\":1,\"2010\":1,\"4824\":1,\"4933\":1}}],[\"net\",{\"1\":{\"520\":1,\"607\":1,\"653\":1,\"868\":1,\"897\":1,\"1209\":1,\"1242\":1,\"1295\":1,\"1304\":1,\"1318\":1,\"2877\":1,\"3056\":1,\"3218\":1,\"3276\":1,\"3656\":2,\"3888\":1,\"3971\":1,\"3976\":1,\"4242\":1,\"4275\":1,\"4342\":1,\"4504\":1,\"5255\":1,\"5434\":1,\"5487\":1,\"5496\":1,\"5510\":1}}],[\"newproxyinstance\",{\"1\":{\"850\":1,\"851\":1,\"854\":1,\"4059\":1,\"4060\":1,\"4063\":1}}],[\"newcapacity\",{\"1\":{\"763\":1,\"764\":1}}],[\"newinstance\",{\"1\":{\"491\":1,\"505\":1,\"506\":2,\"508\":2,\"509\":1,\"510\":1,\"3942\":1,\"3956\":1,\"3957\":2,\"3959\":2,\"3960\":1,\"3961\":1}}],[\"new\",{\"1\":{\"263\":1,\"312\":1,\"452\":1,\"455\":2,\"457\":2,\"463\":1,\"480\":1,\"483\":1,\"485\":2,\"499\":1,\"537\":1,\"544\":1,\"568\":1,\"571\":2,\"599\":1,\"601\":2,\"749\":1,\"770\":2,\"774\":1,\"778\":1,\"788\":1,\"816\":1,\"820\":2,\"925\":1,\"930\":3,\"943\":1,\"1103\":1,\"1116\":3,\"1263\":1,\"1272\":2,\"1343\":1,\"1511\":1,\"1679\":1,\"1847\":1,\"3200\":6,\"3217\":2,\"3286\":14,\"3288\":5,\"3911\":1,\"3914\":2,\"3931\":1,\"3934\":1,\"3936\":2,\"3950\":1,\"4025\":1,\"4029\":2,\"4136\":1,\"4149\":3,\"4341\":2,\"4550\":14,\"4552\":5,\"4770\":1,\"5455\":1,\"5464\":2}}],[\"nacos作为项目中的注册中心和配置中心\",{\"1\":{\"3451\":1,\"5720\":1}}],[\"nacos\",{\"1\":{\"2157\":1,\"4762\":1}}],[\"nanotime\",{\"1\":{\"421\":2,\"3878\":2}}],[\"named\",{\"1\":{\"1365\":1,\"1533\":1,\"1701\":1,\"1869\":1,\"4792\":1}}],[\"namespace\",{\"1\":{\"1223\":2,\"2015\":1,\"4256\":2,\"4620\":1}}],[\"name\",{\"1\":{\"408\":2,\"409\":1,\"411\":1,\"412\":2,\"421\":6,\"513\":1,\"515\":2,\"2650\":2,\"2673\":2,\"3863\":2,\"3864\":1,\"3866\":1,\"3867\":2,\"3878\":6,\"3964\":2,\"3966\":2,\"5028\":2,\"5051\":2}}],[\"native\",{\"1\":{\"181\":1,\"182\":1,\"199\":1,\"3830\":1,\"3831\":1}}],[\"n\",{\"1\":{\"383\":1,\"596\":1,\"601\":3,\"658\":2,\"671\":1,\"672\":1,\"686\":1,\"710\":1,\"711\":1,\"712\":1,\"716\":1,\"717\":1,\"719\":1,\"724\":1,\"725\":1,\"733\":2,\"734\":1,\"871\":1,\"877\":2,\"1017\":2,\"1038\":1,\"1272\":2,\"2921\":1,\"3328\":1,\"3575\":1,\"3979\":1,\"3985\":2,\"3999\":2,\"4013\":1,\"4014\":1,\"4585\":1,\"5299\":1,\"5464\":2}}],[\"虽然是弱引用\",{\"1\":{\"3201\":1}}],[\"虽然提高了效率\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"虽然有了合并索引的优化方式\",{\"1\":{\"2896\":1,\"5274\":1}}],[\"虽然支持\",{\"1\":{\"2844\":1,\"5222\":1}}],[\"虽然相同范围的间隙锁是多个事务相互兼容的\",{\"1\":{\"2795\":1,\"5173\":1}}],[\"虽然索引能带来查询上的效率\",{\"1\":{\"2665\":1,\"5043\":1}}],[\"虽然http\",{\"1\":{\"2210\":1,\"2225\":1,\"2240\":1,\"2253\":1,\"2266\":1,\"2281\":1,\"5517\":1,\"5540\":1}}],[\"虽然hashmap不是线程安全的\",{\"1\":{\"893\":1}}],[\"虽然要额外考虑并发问题\",{\"1\":{\"1492\":1,\"1660\":1,\"1828\":1,\"1996\":1,\"4919\":1}}],[\"虽然这样效率确实是会比hashmap慢一些\",{\"1\":{\"1001\":1}}],[\"虽然我们不知道哪个key的hashcode是上面例子中的那两个\",{\"1\":{\"991\":1}}],[\"虽然都是使用桶数组实现的\",{\"1\":{\"899\":1}}],[\"虽然如此\",{\"1\":{\"598\":1}}],[\"虽然变量名称是stack\",{\"1\":{\"586\":1}}],[\"虽然\",{\"1\":{\"241\":1,\"280\":1,\"2561\":1,\"2581\":1,\"4939\":1,\"4959\":1}}],[\"及以后的元空间\",{\"1\":{\"240\":1}}],[\"及其作用\",{\"0\":{\"177\":1,\"3826\":1}}],[\"还没提交\",{\"1\":{\"3468\":1,\"5737\":1}}],[\"还没有提交事务\",{\"1\":{\"2818\":1,\"5196\":1}}],[\"还耐心给我解答了是用来循环遍历的\",{\"1\":{\"3400\":1,\"5680\":1}}],[\"还会降低系统的稳定性\",{\"1\":{\"3283\":1,\"4547\":1}}],[\"还可以将快照留在原地以便重启服务器的时候使用\",{\"1\":{\"2964\":1,\"5342\":1}}],[\"还可以保存二进制数据\",{\"1\":{\"2920\":1,\"5298\":1}}],[\"还可以方便的实现多线程优先级的比较操作\",{\"1\":{\"1357\":1,\"1525\":1,\"1693\":1,\"1861\":1,\"4784\":1}}],[\"还收到物理内存和其他因素影响\",{\"1\":{\"2372\":1}}],[\"还有\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"还有两种模式的定义\",{\"1\":{\"2114\":1,\"4719\":1}}],[\"还有一个好处就是可以很好的解决负数的问题\",{\"1\":{\"996\":1}}],[\"还有一项信息是常量池\",{\"1\":{\"281\":1}}],[\"还要看收到的事件类型\",{\"1\":{\"1466\":1,\"1481\":1,\"1634\":1,\"1649\":1,\"1802\":1,\"1817\":1,\"1970\":1,\"1985\":1,\"4893\":1,\"4908\":1}}],[\"还要学会这种对代码精益求精的态度\",{\"1\":{\"1031\":1}}],[\"还包括indexof\",{\"1\":{\"956\":1}}],[\"还必须需要实现invocationhandler\",{\"1\":{\"852\":1,\"4061\":1}}],[\"还实现了\",{\"1\":{\"744\":1}}],[\"还能继续执行\",{\"1\":{\"564\":1}}],[\"还能获取到类的所有信息\",{\"1\":{\"489\":1,\"3940\":1}}],[\"还是轻量级的锁\",{\"1\":{\"2762\":1,\"5140\":1}}],[\"还是前面三个\",{\"1\":{\"2127\":1,\"4732\":1}}],[\"还是没有创建完\",{\"1\":{\"1124\":1,\"4157\":1}}],[\"还是得改回去用hashmap\",{\"1\":{\"484\":1,\"3935\":1}}],[\"还是\",{\"0\":{\"2164\":1,\"4286\":1},\"1\":{\"240\":1,\"555\":1,\"2159\":1,\"4764\":1,\"5530\":1}}],[\"还不会编写\",{\"1\":{\"31\":1,\"3685\":1}}],[\"不够安全\",{\"1\":{\"3653\":1}}],[\"不建议直接使用md5\",{\"1\":{\"3589\":1}}],[\"不建议使用过长的字段作为主键\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"不建议使用\",{\"1\":{\"565\":1}}],[\"不存在则为\",{\"1\":{\"3546\":1,\"5815\":1}}],[\"不存在时\",{\"1\":{\"3545\":1,\"5814\":1}}],[\"不存在的话\",{\"1\":{\"3022\":1,\"5400\":1}}],[\"不存储元素\",{\"1\":{\"3310\":1,\"4575\":1}}],[\"不处理新任务\",{\"1\":{\"3303\":1,\"4568\":1}}],[\"不进行线程状态的改变\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"不停地循环判断锁是否能够被成功获取\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"不停服如何实现\",{\"0\":{\"2187\":1,\"4309\":1}}],[\"不行\",{\"1\":{\"3209\":1,\"4333\":1}}],[\"不太推荐\",{\"1\":{\"3051\":1,\"5429\":1}}],[\"不光能存放文本数据\",{\"1\":{\"2920\":1,\"5298\":1}}],[\"不光是这个依赖下的meta\",{\"1\":{\"1146\":1,\"4179\":1}}],[\"不论是内存临时表还是磁盘临时表都不会存在索引\",{\"1\":{\"2904\":1,\"5282\":1}}],[\"不包含\",{\"1\":{\"2903\":1,\"5281\":1}}],[\"不包括当前事务自己和已提交的事务\",{\"1\":{\"2865\":1,\"5243\":1}}],[\"不为\",{\"1\":{\"2659\":1,\"5037\":1}}],[\"不做回表操作\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"不做双活\",{\"1\":{\"2199\":1,\"4321\":1}}],[\"不懂的同学可以暂存疑\",{\"1\":{\"2624\":1,\"5002\":1}}],[\"不提供事务支持\",{\"1\":{\"2568\":1,\"4946\":1}}],[\"不在同一个子网中\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"不保证可靠交付数据\",{\"1\":{\"2384\":1}}],[\"不保证网络包的按序交付\",{\"1\":{\"2346\":1}}],[\"不重复\",{\"1\":{\"2383\":1}}],[\"不丢失\",{\"1\":{\"2383\":1}}],[\"不能小于\",{\"1\":{\"3017\":1,\"5395\":1}}],[\"不能重复\",{\"1\":{\"2618\":1,\"4996\":1}}],[\"不能像\",{\"1\":{\"2351\":1}}],[\"不能根据索引位置进行操作\",{\"1\":{\"726\":1}}],[\"不仅会消耗系统资源\",{\"1\":{\"3283\":1,\"4547\":1}}],[\"不仅可以保存文本数据\",{\"1\":{\"2920\":1,\"5298\":1}}],[\"不仅支持\",{\"1\":{\"2157\":1,\"4762\":1}}],[\"不仅复杂而且也没有性能优势\",{\"1\":{\"1446\":1,\"1614\":1,\"1782\":1,\"1950\":1,\"4873\":1}}],[\"不是像php那样成熟的编程语言\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"不是听狗叫的\",{\"1\":{\"3373\":1,\"5653\":1}}],[\"不是万能的\",{\"1\":{\"3110\":1,\"4392\":1}}],[\"不是\",{\"1\":{\"2453\":1,\"2546\":1,\"5551\":1}}],[\"不是两次\",{\"0\":{\"2420\":1},\"1\":{\"2305\":1}}],[\"不是所谓的\",{\"0\":{\"2153\":1,\"4758\":1}}],[\"不是错误或者超时的响应\",{\"1\":{\"2149\":1,\"4754\":1}}],[\"不是这么抽象的概念\",{\"1\":{\"559\":1}}],[\"不理解可以看前面的选举算法\",{\"1\":{\"2139\":1,\"4744\":1}}],[\"不再出现\",{\"1\":{\"2197\":1,\"4319\":1}}],[\"不再依赖\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"不再拷贝到用户态\",{\"1\":{\"1419\":1,\"1587\":1,\"1755\":1,\"1923\":1,\"4846\":1}}],[\"不利于维护系统\",{\"1\":{\"2064\":1,\"4669\":1}}],[\"不用关注其他人怎么开发\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"不需了解所有业务\",{\"1\":{\"2048\":1,\"4653\":1}}],[\"不需要将私钥给别人\",{\"1\":{\"3654\":1}}],[\"不需要进行\",{\"1\":{\"2873\":1,\"5251\":1}}],[\"不需要进行停顿\",{\"1\":{\"368\":1}}],[\"不需要显示调用\",{\"1\":{\"2730\":1,\"5108\":1}}],[\"不需要自己构建http请求了\",{\"1\":{\"2085\":1,\"4690\":1}}],[\"不需要自己为它的方法实现同步\",{\"1\":{\"892\":1}}],[\"不需要考虑进程间通信\",{\"1\":{\"1470\":1,\"1638\":1,\"1806\":1,\"1974\":1,\"4897\":1}}],[\"不需要在进程中再创建线程\",{\"1\":{\"1456\":1,\"1624\":1,\"1792\":1,\"1960\":1,\"4883\":1}}],[\"不需要像\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"不需要转成十进制\",{\"1\":{\"969\":1}}],[\"不需要必须实现接⼝\",{\"1\":{\"837\":1,\"4046\":1}}],[\"不需要预先分配很多空间\",{\"1\":{\"715\":1}}],[\"不需要停顿\",{\"1\":{\"365\":1,\"367\":1}}],[\"不均衡的问题会越来越严重\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"不安全\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"不必再遍历所有的依赖包\",{\"1\":{\"1181\":1,\"4214\":1}}],[\"不允许在应用中自行显式创建线程\",{\"1\":{\"3337\":1,\"4594\":1}}],[\"不允许分割\",{\"1\":{\"1080\":1,\"4113\":1}}],[\"不允许放入\",{\"1\":{\"697\":1}}],[\"不要求排序\",{\"1\":{\"1039\":1}}],[\"不支持事务和行级锁\",{\"1\":{\"2561\":1,\"4939\":1}}],[\"不支持当前事务的情况\",{\"1\":{\"1102\":1,\"4135\":1}}],[\"不支持\",{\"1\":{\"891\":1,\"2571\":1,\"2575\":1,\"2578\":1,\"4949\":1,\"4953\":1,\"4956\":1}}],[\"不一直使用红黑树\",{\"0\":{\"872\":1,\"3980\":1}}],[\"不使⽤\",{\"1\":{\"816\":1,\"4025\":1}}],[\"不管主键还是非主键\",{\"1\":{\"2608\":1,\"2640\":1,\"4986\":1,\"5018\":1}}],[\"不管hashcode的值是正数还是负数\",{\"1\":{\"996\":1}}],[\"不管列表是否已排序\",{\"1\":{\"717\":1}}],[\"不管是\",{\"1\":{\"240\":1}}],[\"不过最终没能通过\",{\"1\":{\"5530\":1}}],[\"不过我们需要加一个分布式锁来保证更新\",{\"1\":{\"3462\":1,\"5731\":1}}],[\"不过两者的本质都是对对象监视器\",{\"1\":{\"3180\":1,\"4525\":1}}],[\"不过并不是所有的引擎都能支持事务\",{\"1\":{\"2804\":1,\"5182\":1}}],[\"不过尽量避免在使用\",{\"1\":{\"2721\":1,\"5099\":1}}],[\"不过要注意\",{\"1\":{\"2085\":1,\"4690\":1}}],[\"不过可以发现c2承担了4个分区的消费而c1订阅了t1\",{\"1\":{\"1284\":1,\"5476\":1}}],[\"不过考虑这种情况\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"不过\",{\"1\":{\"948\":1,\"1047\":1,\"2099\":1,\"2746\":1,\"2890\":1,\"3213\":1,\"4080\":1,\"4337\":1,\"4704\":1,\"5124\":1,\"5268\":1,\"5530\":1}}],[\"不过理想情况下随机hashcode算法下所有bin中节点的分布频率会遵循泊松分布\",{\"1\":{\"879\":1,\"3987\":1}}],[\"不过需要注意的是\",{\"1\":{\"694\":1}}],[\"不过时间复杂度仍然是o\",{\"1\":{\"672\":1,\"4014\":1}}],[\"不应该使用链表\",{\"1\":{\"605\":1}}],[\"不应该是继承关系\",{\"1\":{\"546\":1}}],[\"不会饿死在队列中\",{\"1\":{\"3269\":1,\"4497\":1}}],[\"不会产生副本\",{\"1\":{\"3139\":1,\"4452\":1}}],[\"不会影响最终结果\",{\"1\":{\"3114\":1,\"4396\":1}}],[\"不会立即同步到硬盘\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"不会阻塞\",{\"1\":{\"2970\":1,\"5348\":1}}],[\"不会相互干扰\",{\"1\":{\"2808\":1,\"5186\":1}}],[\"不会结束在中间某个环节\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"不会和行级的共享锁和独占锁发生冲突\",{\"1\":{\"2748\":1,\"5126\":1}}],[\"不会因为数据或表结构的更新\",{\"1\":{\"2696\":1,\"5074\":1}}],[\"不会修改数据\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"不会牵扯到扩容问题\",{\"1\":{\"597\":1}}],[\"不会互相影响\",{\"1\":{\"195\":1}}],[\"不推荐使用\",{\"0\":{\"532\":1}}],[\"不可逆性\",{\"1\":{\"3585\":1}}],[\"不可以有\",{\"1\":{\"2610\":1,\"4988\":1}}],[\"不可以随机访问\",{\"1\":{\"716\":1}}],[\"不可靠\",{\"1\":{\"2346\":1}}],[\"不可能同时达到\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"不可能再提交这个提案n1了\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"不可重复读和幻读现象都不可能会发生\",{\"1\":{\"2842\":1,\"5220\":1}}],[\"不可重复读和幻读现象\",{\"1\":{\"2839\":1,\"5217\":1}}],[\"不可重复读\",{\"0\":{\"2820\":1,\"5198\":1},\"1\":{\"2821\":1,\"5199\":1}}],[\"不可重复读以及幻读\",{\"1\":{\"1095\":1,\"4128\":1}}],[\"不可重复\",{\"1\":{\"694\":1}}],[\"不可查异常\",{\"1\":{\"444\":1,\"3903\":1}}],[\"不可达的对象可被回收\",{\"1\":{\"302\":1}}],[\"不被篡改\",{\"1\":{\"428\":1,\"3885\":1}}],[\"不得不提前触发一次\",{\"1\":{\"371\":1}}],[\"不同实例之间互不影响\",{\"1\":{\"3159\":1}}],[\"不同于\",{\"1\":{\"2959\":1,\"5337\":1}}],[\"不同局域网内的\",{\"0\":{\"2487\":1,\"5585\":1}}],[\"不同进程可以及时看到对方进程中对共享内存中数据的更新\",{\"1\":{\"1369\":1,\"1537\":1,\"1705\":1,\"1873\":1,\"4796\":1}}],[\"不同\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"不同的线程池会选用不同的阻塞队列\",{\"1\":{\"3308\":1,\"4573\":1}}],[\"不同的字符串可能哈希出来的位置相同\",{\"1\":{\"3031\":1,\"5409\":1}}],[\"不同的数据库厂商对\",{\"1\":{\"2844\":1,\"5222\":1}}],[\"不同的地方\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"不同的是消息队列存放在内核中\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"不同的是\",{\"1\":{\"1029\":1,\"2484\":1,\"5582\":1}}],[\"不同的厂商有不同的实现\",{\"1\":{\"282\":1}}],[\"不同块采用适当的收集算法\",{\"1\":{\"337\":1}}],[\"不足\",{\"1\":{\"326\":1}}],[\"不受垃圾回收器管理\",{\"1\":{\"283\":1}}],[\"区域的权威\",{\"1\":{\"2540\":1,\"5638\":1}}],[\"区域管理\",{\"1\":{\"2538\":1,\"5636\":1}}],[\"区域继续进行划分\",{\"1\":{\"272\":1}}],[\"区别在于\",{\"1\":{\"1015\":1}}],[\"区别\",{\"0\":{\"440\":1,\"2375\":1,\"3899\":1},\"1\":{\"760\":1,\"883\":1}}],[\"区分不同类的方式不仅仅根据类名\",{\"1\":{\"428\":1,\"3885\":1}}],[\"区\",{\"1\":{\"255\":1,\"265\":1,\"266\":2,\"267\":2}}],[\"区由\",{\"1\":{\"254\":1}}],[\"区之间发生大量的内存拷贝\",{\"1\":{\"238\":1}}],[\"区和两个survivor\",{\"1\":{\"238\":1}}],[\"大学时间我主要利用课外时间学习了\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"大致相同\",{\"1\":{\"3208\":1,\"4332\":1}}],[\"大致如下图所示\",{\"1\":{\"2087\":1,\"4692\":1}}],[\"大于等于这个\",{\"1\":{\"2861\":1,\"2863\":1,\"5239\":1,\"5241\":1}}],[\"大小\",{\"1\":{\"2395\":1,\"2396\":1}}],[\"大白话\",{\"1\":{\"2355\":1}}],[\"大量长任务\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"大量任务并发竞争时\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"大数据题\",{\"0\":{\"2163\":1,\"4285\":1}}],[\"大的优先\",{\"1\":{\"2129\":2,\"4734\":2}}],[\"大的优先作为\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"大的优先为\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"大大降低系统的性能\",{\"1\":{\"3259\":1,\"4487\":1}}],[\"大大降低数据库的性能\",{\"1\":{\"2053\":1,\"4658\":1}}],[\"大大简化了\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"大大提高了检测的效率\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"大部分人解释这一定律时\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"大部分时间是单线程操作的\",{\"1\":{\"893\":1}}],[\"大部分情况都是\",{\"1\":{\"865\":1,\"4074\":1}}],[\"大部分类在具体用到的时候才会去加载\",{\"1\":{\"398\":1,\"3853\":1}}],[\"大家好\",{\"1\":{\"2292\":1}}],[\"大家应该都知道\",{\"1\":{\"596\":1}}],[\"大家可以把\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"大家可以看到\",{\"1\":{\"595\":1}}],[\"大家可以看一下这篇探讨\",{\"1\":{\"592\":1}}],[\"大家可以想象\",{\"1\":{\"583\":1}}],[\"大功告成\",{\"1\":{\"486\":1,\"3937\":1}}],[\"大多数的\",{\"1\":{\"454\":1,\"3913\":1}}],[\"大多数新创建的对象都位于\",{\"1\":{\"232\":1}}],[\"大对象是指需要大量连续内存空间的对象\",{\"1\":{\"238\":1}}],[\"大对象直接进入老年代\",{\"1\":{\"238\":1}}],[\"通信双方的主机之间就可以相互交换\",{\"1\":{\"2344\":1}}],[\"通知\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"通篇全文下来大家也可以看到\",{\"1\":{\"1137\":1,\"4170\":1}}],[\"通常是因为缓存中的那份数据已经过期\",{\"1\":{\"3033\":1,\"3040\":1,\"3054\":1,\"5411\":1,\"5418\":1,\"5432\":1}}],[\"通常子查询的结果集会被存储到临时表中\",{\"1\":{\"2904\":1,\"5282\":1}}],[\"通常子查询在\",{\"1\":{\"2903\":1,\"5281\":1}}],[\"通常子树被称作\",{\"1\":{\"641\":1}}],[\"通常使用搜索引擎如\",{\"1\":{\"2604\":1,\"2605\":1,\"2615\":1,\"4982\":1,\"4983\":1,\"4993\":1}}],[\"通常情况下\",{\"1\":{\"2572\":1,\"3184\":1,\"4529\":1,\"4950\":1}}],[\"通常情况下也不会用到该级别\",{\"1\":{\"1095\":1,\"4128\":1}}],[\"通常被用于实现诸如数据发布\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"通常被有经验的⾯向对象的软件开发⼈员所采⽤\",{\"1\":{\"814\":1,\"4023\":1}}],[\"通常不会犯糊涂\",{\"1\":{\"554\":1}}],[\"通常表示为\",{\"1\":{\"402\":1,\"3857\":1}}],[\"通常需要更长的时间\",{\"1\":{\"237\":1}}],[\"通常\",{\"1\":{\"235\":1,\"237\":1}}],[\"通过threadpoolexecutor构造函数来创建\",{\"1\":{\"4549\":1}}],[\"通过实现不同的方法\",{\"1\":{\"4490\":1}}],[\"通过实例化对象获取该实例的\",{\"1\":{\"498\":1,\"3949\":1}}],[\"通过互斥来保证数据的一致性\",{\"1\":{\"3543\":1,\"5812\":1}}],[\"通过偏移量\",{\"1\":{\"3465\":1,\"5734\":1}}],[\"通过kafkastream流式计算最新的数据\",{\"1\":{\"3453\":1,\"5722\":1}}],[\"通过key的hash对分区取模\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"通过用户的行为\",{\"1\":{\"3453\":1,\"5722\":1}}],[\"通过重复利用已创建的线程降低线程创建和销毁造成的消耗\",{\"1\":{\"3281\":1,\"4545\":1}}],[\"通过自旋方式来获取锁\",{\"1\":{\"3230\":1,\"4354\":1}}],[\"通过上面这些内容\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"通过该\",{\"1\":{\"3175\":1,\"4520\":1}}],[\"通过线程创建节点加入同步队列的队尾\",{\"1\":{\"3076\":1,\"4432\":1}}],[\"通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中\",{\"1\":{\"3021\":1,\"5399\":1}}],[\"通过数据行的\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"通过加读写锁的方式来避免并行访问\",{\"1\":{\"2851\":1,\"5229\":1}}],[\"通过二级索引\",{\"1\":{\"2622\":1,\"5000\":1}}],[\"通过哈希算法\",{\"1\":{\"2588\":1,\"4966\":1}}],[\"通过键\",{\"1\":{\"2587\":1,\"4965\":1}}],[\"通过其\",{\"1\":{\"2120\":1,\"4725\":1}}],[\"通过feign以及java的动态代理机制\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"通过spring\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"通过网络管理驱动\",{\"1\":{\"2025\":1,\"4630\":1}}],[\"通过使用\",{\"1\":{\"1412\":1,\"1580\":1,\"1748\":1,\"1916\":1,\"4839\":1}}],[\"通过回调函数内核会将其加入到这个就绪事件列表中\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"通过两个方面\",{\"1\":{\"1378\":1,\"1546\":1,\"1714\":1,\"1882\":1,\"4805\":1}}],[\"通过通知操作的方式来保持多线程同步\",{\"1\":{\"1357\":1,\"1525\":1,\"1693\":1,\"1861\":1,\"4784\":1}}],[\"通过count来进行查询总条数的限制\",{\"1\":{\"1207\":1,\"4240\":1}}],[\"通过class对象调用\",{\"1\":{\"510\":1,\"3961\":1}}],[\"通过page对象作为分页依据\",{\"1\":{\"1206\":1,\"4239\":1}}],[\"通过这种依赖关系\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"通过hashcode\",{\"1\":{\"1021\":1}}],[\"通过继承方式实现代理\",{\"1\":{\"858\":1,\"4067\":1}}],[\"通过类之间不同通信⽅式实现不同⾏为\",{\"1\":{\"816\":1,\"4025\":1}}],[\"通过类和接⼝间的继承和引⽤实现创建复杂结构的对象\",{\"1\":{\"816\":1,\"4025\":1}}],[\"通过类的全限定名获取该类的\",{\"1\":{\"500\":1,\"3951\":1}}],[\"通过比较其他方法\",{\"1\":{\"791\":1}}],[\"通过任意一条从根到叶子简单路径上颜色的约束\",{\"1\":{\"660\":1,\"4001\":1}}],[\"通过构造器去实例化对象\",{\"1\":{\"510\":1,\"3961\":1}}],[\"通过反射消除工厂中的多个分支\",{\"1\":{\"519\":1,\"3970\":1}}],[\"通过反射构造一个类的实例方式有2种\",{\"1\":{\"504\":1,\"3955\":1}}],[\"通过反射\",{\"1\":{\"489\":1,\"3940\":1}}],[\"通过记录每个\",{\"1\":{\"375\":1}}],[\"通过引入\",{\"1\":{\"375\":1}}],[\"通过下面两个问题\",{\"1\":{\"191\":1}}],[\"通过\",{\"0\":{\"3285\":1,\"3330\":1},\"1\":{\"33\":1,\"42\":1,\"229\":1,\"302\":1,\"506\":1,\"509\":1,\"1139\":2,\"1173\":1,\"1379\":1,\"1423\":1,\"1486\":1,\"1547\":1,\"1591\":1,\"1654\":1,\"1715\":1,\"1759\":1,\"1822\":1,\"1883\":1,\"1927\":1,\"1990\":1,\"2118\":1,\"2338\":1,\"3164\":1,\"3224\":1,\"3305\":1,\"3687\":1,\"3696\":1,\"3957\":1,\"3960\":1,\"4172\":2,\"4206\":1,\"4348\":1,\"4508\":1,\"4570\":1,\"4587\":1,\"4723\":1,\"4806\":1,\"4850\":1,\"4913\":1}}],[\"当作队列是完全可以的\",{\"1\":{\"3537\":1,\"5806\":1}}],[\"当作队列来使用时\",{\"1\":{\"3533\":1,\"5802\":1}}],[\"当消费者刚拿到这个消息准备进行真正消费的时候\",{\"1\":{\"3466\":1,\"5735\":1}}],[\"当消费者拉取到了分区的某个消息之后\",{\"1\":{\"3466\":1,\"5735\":1}}],[\"当消息达到设置的条件上限时\",{\"1\":{\"1249\":1,\"5441\":1}}],[\"当所有任务都成功关闭了\",{\"1\":{\"3325\":1}}],[\"当所有片段都被写满时\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"当workqueue中没有任务的时候\",{\"1\":{\"3317\":1}}],[\"当任务到达时\",{\"1\":{\"3282\":1,\"4546\":1}}],[\"当循环的条件被其他线程改变时才能进入临界区\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"当后续线程尝试获取锁时\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"当关闭偏向锁功能时\",{\"1\":{\"3232\":1,\"4356\":1}}],[\"当使用threadlocal来维护变量时\",{\"1\":{\"3187\":1}}],[\"当执行\",{\"1\":{\"3167\":1,\"4512\":1}}],[\"当执行插入\",{\"1\":{\"2744\":1,\"5122\":1}}],[\"当对一个共享变量执行操作时\",{\"1\":{\"3123\":1,\"4405\":1}}],[\"当对象增加一个引用时计数器加\",{\"1\":{\"298\":1}}],[\"当头节点释放同步状态的时候\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"当线程第二次再执行同步代码块时\",{\"1\":{\"3226\":1,\"4350\":1}}],[\"当线程在同步队列中不断的通过自旋去获取同步状态\",{\"1\":{\"3077\":1,\"4433\":1}}],[\"当线程抢占锁失败时候\",{\"1\":{\"3069\":1,\"4423\":1}}],[\"当同步状态释放时\",{\"1\":{\"3068\":1,\"4422\":1}}],[\"当用户\",{\"1\":{\"3558\":1,\"5827\":1}}],[\"当用户向线程池提交一个任务\",{\"1\":{\"3317\":1}}],[\"当用户请求过来\",{\"1\":{\"3022\":1,\"5400\":1}}],[\"当用户调用\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"当内存不足以容纳新写入数据时\",{\"1\":{\"3005\":1,\"3010\":1,\"5383\":1,\"5388\":1}}],[\"当内核通知文件描述符可读写时\",{\"1\":{\"1392\":1,\"1560\":1,\"1728\":1,\"1896\":1,\"4819\":1}}],[\"当读取记录时\",{\"1\":{\"2871\":1,\"5249\":1}}],[\"当事务回滚时用于将数据恢复到修改前的样子\",{\"1\":{\"2870\":1,\"5248\":1}}],[\"当事务方法被另一个事务方法调用时\",{\"1\":{\"1097\":1,\"4130\":1}}],[\"当有一个新的任务提交时\",{\"1\":{\"3332\":1,\"4589\":1}}],[\"当有线程对表结构进行变更\",{\"1\":{\"2729\":1,\"5107\":1}}],[\"当有线程在执行\",{\"1\":{\"2728\":1,\"5106\":1}}],[\"当有其它线程改变了hashmap的结构\",{\"1\":{\"895\":1}}],[\"当会话退出后\",{\"1\":{\"2720\":1,\"5098\":1}}],[\"当查到索引对应的指针或主键后\",{\"1\":{\"2646\":1,\"5024\":1}}],[\"当没有显示的指定表的主键时\",{\"1\":{\"2619\":1,\"4997\":1}}],[\"当主机发送\",{\"1\":{\"2477\":1,\"5575\":1}}],[\"当主机收到数据包后\",{\"1\":{\"2414\":1}}],[\"当通信结束希望断开连接时\",{\"1\":{\"2344\":1}}],[\"当发生网络分区的时候\",{\"1\":{\"2155\":1,\"4760\":1}}],[\"当设计读写操作时\",{\"1\":{\"2147\":1,\"4752\":1}}],[\"当集群中有机器挂了\",{\"1\":{\"2132\":1,\"4737\":1}}],[\"当集群中已经有过半的\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"当系统出现崩溃影响最大应该是\",{\"1\":{\"2122\":1,\"4727\":1}}],[\"当一台同样遵守\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"当一个线程访问同步代码块并获取锁时\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"当一个线程到达屏障时\",{\"1\":{\"1356\":1,\"1524\":1,\"1692\":1,\"1860\":1,\"4783\":1}}],[\"当一个元素加入布隆过滤器中的时候\",{\"1\":{\"3025\":1,\"5403\":1}}],[\"当一个事务对一条记录加了\",{\"1\":{\"2784\":1,\"2785\":1,\"5162\":1,\"5163\":1}}],[\"当一个服务调用另一个服务由于网络原因或自身原因出现问题\",{\"1\":{\"2072\":1,\"4677\":1}}],[\"当一个\",{\"1\":{\"1221\":1,\"2119\":1,\"4254\":1,\"4724\":1}}],[\"当选举产生了新的\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"当整个服务框架在启动过程中\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"当远程接口的方法被调用\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"当实际调用的时候\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"当实际kv个数超过threshold时\",{\"1\":{\"919\":1}}],[\"当服务一直处于正常状态\",{\"1\":{\"2076\":1,\"4681\":1}}],[\"当更多的服务请求到这些资源导致更多的请求等待\",{\"1\":{\"2072\":1,\"4677\":1}}],[\"当更多的元素加入到arraylist中时\",{\"1\":{\"739\":1}}],[\"当被监控的\",{\"1\":{\"1388\":1,\"1389\":1,\"1556\":1,\"1557\":1,\"1724\":1,\"1725\":1,\"1892\":1,\"1893\":1,\"4815\":1,\"4816\":1}}],[\"当某个\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"当某台机器挂了\",{\"1\":{\"1258\":1,\"5450\":1}}],[\"当sleep\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"当每个消息被写进去后\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"当这两个目标发生冲突时\",{\"1\":{\"1289\":1,\"5481\":1}}],[\"当这一块内存用完了就将还存活的对象复制到另一块上面\",{\"1\":{\"332\":1}}],[\"当我需要构建一个web应用程序时\",{\"1\":{\"1181\":1,\"4214\":1}}],[\"当我们不指定\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"当我们需要判断一个元素是否存在于布隆过滤器的时候\",{\"1\":{\"3028\":1,\"5406\":1}}],[\"当我们要对一个链表数组中的某个元素进行增删的时候\",{\"1\":{\"960\":1}}],[\"当我们的动态代理对象调用一个方法时\",{\"1\":{\"852\":1,\"4061\":1}}],[\"当我们使用\",{\"1\":{\"577\":1}}],[\"当我们想要加载一个类的时候\",{\"1\":{\"415\":1,\"3871\":1}}],[\"当范围对象的状态发生变化时\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"当需要限制\",{\"1\":{\"2026\":1,\"4631\":1}}],[\"当需要为\",{\"1\":{\"2025\":1,\"4630\":1}}],[\"当需要容器镜像时\",{\"1\":{\"2024\":1,\"4629\":1}}],[\"当需要补全b的属性时\",{\"1\":{\"1124\":1,\"4157\":1}}],[\"当需要多线程操作的时候可以使用线程安全的concurrenthashmap\",{\"1\":{\"893\":1}}],[\"当哈希表的大小为素数时\",{\"1\":{\"1006\":1,\"1010\":1}}],[\"当map中元素个数超过loadfactor\",{\"1\":{\"950\":1}}],[\"当hashmap中的元素个数达到13的时候\",{\"1\":{\"946\":1}}],[\"当hashcode离散性很好的时候\",{\"1\":{\"879\":1,\"3987\":1}}],[\"当其size大于12\",{\"1\":{\"941\":1}}],[\"当代理类调用方法的时候\",{\"1\":{\"862\":1,\"4071\":1}}],[\"当前消费到的\",{\"1\":{\"3465\":1,\"5734\":1}}],[\"当前可以同时运行的线程数量变为最大线程数\",{\"1\":{\"3291\":1,\"4555\":1}}],[\"当前锁是偏向锁\",{\"1\":{\"3230\":1,\"4354\":1}}],[\"当前节点在队列中的状态\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"当前对本事务不可见的其他活跃事务\",{\"1\":{\"2860\":1,\"5238\":1}}],[\"当前正在写入数据的片段叫活跃片段\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"当前\",{\"1\":{\"853\":1,\"924\":1,\"4062\":1}}],[\"当前执行的语句必属于某个方法\",{\"1\":{\"448\":1,\"3907\":1}}],[\"当多个线程⼀起到达锁位置时\",{\"1\":{\"821\":1,\"4030\":1}}],[\"当第⼀个抢到锁的调⽤获取了实例之后\",{\"1\":{\"821\":1,\"4030\":1}}],[\"当你使用代理对象调用方法的时候实际会调用到这个方法\",{\"1\":{\"853\":1,\"4062\":1}}],[\"当你向这两种类型中增加元素的时候\",{\"1\":{\"795\":1}}],[\"当你在\",{\"1\":{\"454\":1,\"3913\":1}}],[\"当然由于fifo先进先出的特性\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"当然其他线程对学生表进行写操作时也会被阻塞\",{\"1\":{\"2717\":1,\"5095\":1}}],[\"当然了\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"当然前提是⼦⼯⼚⽀持⽣产该产品\",{\"1\":{\"831\":1,\"4040\":1}}],[\"当然\",{\"1\":{\"741\":1,\"956\":1,\"1031\":1,\"1217\":1,\"2372\":1,\"2801\":1,\"3129\":1,\"4250\":1,\"4411\":1,\"5179\":1}}],[\"当然也可以模拟\",{\"1\":{\"250\":1}}],[\"当向hashset中添加元素的时候\",{\"1\":{\"699\":1}}],[\"当从根节点到叶子节点的路径上黑色节点相同时\",{\"1\":{\"660\":1,\"4001\":1}}],[\"当数据量达到一定程度的时候\",{\"1\":{\"598\":1}}],[\"当程序启动时\",{\"1\":{\"519\":1,\"3970\":1}}],[\"当程序中可能出现这类异常\",{\"1\":{\"437\":1,\"443\":1,\"3896\":1,\"3902\":1}}],[\"当父类加载器无法加载时\",{\"1\":{\"421\":1,\"3878\":1}}],[\"当父类的加载器为空\",{\"1\":{\"421\":1,\"3878\":1}}],[\"当父类的加载器不为空\",{\"1\":{\"421\":1,\"3878\":1}}],[\"当创建类或接口的运行时常量池时\",{\"1\":{\"292\":1}}],[\"当创建一个对象时\",{\"1\":{\"255\":1}}],[\"当常量池无法再申请到内存时会抛出\",{\"1\":{\"281\":1}}],[\"当养老区内存不足时\",{\"1\":{\"269\":1}}],[\"当伊甸园的空间填满时\",{\"1\":{\"264\":1}}],[\"当\",{\"1\":{\"233\":1,\"257\":1,\"2126\":1,\"2353\":1,\"2763\":1,\"2764\":1,\"2765\":1,\"2768\":1,\"2770\":1,\"2983\":1,\"4731\":1,\"5141\":1,\"5142\":1,\"5143\":1,\"5146\":1,\"5148\":1,\"5361\":1}}],[\"当填充年轻代时\",{\"1\":{\"231\":1}}],[\"伊甸园\",{\"1\":{\"231\":1}}],[\"执行一串命令\",{\"1\":{\"3574\":1}}],[\"执行本次操作\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"执行结束后在同步到主内存中去\",{\"1\":{\"3137\":1,\"4450\":1}}],[\"执行删除过期\",{\"1\":{\"2995\":1,\"5373\":1}}],[\"执行后\",{\"1\":{\"2690\":1,\"5068\":1}}],[\"执行业务逻辑成功\",{\"1\":{\"2179\":1,\"4301\":1}}],[\"执行最终状态\",{\"1\":{\"2178\":1,\"4300\":1}}],[\"执行程序代码\",{\"1\":{\"1345\":1,\"1513\":1,\"1681\":1,\"1849\":1,\"4772\":1}}],[\"执行\",{\"1\":{\"1221\":1,\"1235\":1,\"2023\":1,\"4254\":1,\"4268\":1,\"4628\":1}}],[\"执行打包操作的配置\",{\"1\":{\"1190\":1,\"4223\":1}}],[\"执行事务前后\",{\"1\":{\"1081\":1,\"4114\":1}}],[\"执行完同步代码块后\",{\"1\":{\"3226\":1,\"4350\":1}}],[\"执行完成后\",{\"1\":{\"1064\":1,\"4097\":1}}],[\"执行完内存回收后是否会在内存空间中产生内存碎片\",{\"1\":{\"262\":1}}],[\"执行minor\",{\"1\":{\"233\":1}}],[\"执行垃圾收集\",{\"1\":{\"231\":1}}],[\"执行引擎\",{\"1\":{\"180\":1,\"3829\":1}}],[\"greater\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"graph\",{\"1\":{\"2024\":1,\"4629\":1}}],[\"graphdriver\",{\"1\":{\"2024\":1,\"4629\":1}}],[\"group\",{\"1\":{\"2903\":1,\"5281\":1}}],[\"group中有多个consumer\",{\"1\":{\"1266\":1,\"5458\":1}}],[\"groupid>\",{\"1\":{\"1169\":1,\"4202\":1}}],[\"grow\",{\"1\":{\"774\":1}}],[\"gone\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"go\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"google\",{\"1\":{\"2015\":1,\"4620\":1,\"5530\":2}}],[\"goto\",{\"1\":{\"468\":1,\"3919\":1}}],[\"gateway\",{\"1\":{\"3449\":1,\"5718\":1}}],[\"gather\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"gap\",{\"0\":{\"2786\":1,\"5164\":1},\"1\":{\"2780\":1,\"2781\":1,\"2787\":1,\"2791\":1,\"5158\":1,\"5159\":1,\"5165\":1,\"5169\":1}}],[\"garbage\",{\"1\":{\"373\":1}}],[\"given\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"give\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"git\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"gitee\",{\"1\":{\"1033\":1}}],[\"github\",{\"1\":{\"1006\":1}}],[\"g1\",{\"1\":{\"344\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1}}],[\"g\",{\"1\":{\"251\":2}}],[\"geospatial\",{\"1\":{\"2914\":1,\"5292\":1}}],[\"geometry\",{\"1\":{\"2604\":1,\"4982\":1}}],[\"getpoolsize\",{\"1\":{\"3359\":1}}],[\"getparentdelegationtime\",{\"1\":{\"421\":1,\"3878\":1}}],[\"getlargestpoolsize\",{\"1\":{\"3358\":1}}],[\"gettaskcount\",{\"1\":{\"3356\":1}}],[\"gettask\",{\"1\":{\"3319\":1}}],[\"getsecuritymanager\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"getentry\",{\"1\":{\"3193\":1}}],[\"getvalue\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"getkey\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"getactivecount\",{\"1\":{\"3360\":1}}],[\"getandincrement\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"getapphttpcodeenum\",{\"1\":{\"1158\":1,\"1159\":1,\"4191\":1,\"4192\":1}}],[\"getobject\",{\"1\":{\"1133\":1,\"4166\":1}}],[\"get\",{\"1\":{\"925\":1,\"943\":6,\"1263\":2,\"1272\":3,\"3186\":1,\"3191\":1,\"3193\":1,\"3200\":1,\"3203\":1,\"3575\":1,\"4531\":1,\"4535\":1,\"5455\":2,\"5464\":3}}],[\"getinstance\",{\"1\":{\"820\":1,\"4029\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"517\":1,\"3968\":1}}],[\"getdeclaredconstructors\",{\"1\":{\"517\":1,\"3968\":1}}],[\"getdeclaredmethod\",{\"1\":{\"515\":1,\"925\":1,\"930\":3,\"943\":2,\"3966\":1}}],[\"getdeclaredmethods\",{\"1\":{\"515\":1,\"3966\":1}}],[\"getdeclaredfield\",{\"1\":{\"513\":1,\"925\":1,\"943\":6,\"3964\":1}}],[\"getdeclaredfields\",{\"1\":{\"513\":1,\"3964\":1}}],[\"getmessage\",{\"1\":{\"1159\":1,\"4192\":1}}],[\"getmethod\",{\"1\":{\"515\":1,\"3966\":1}}],[\"getmethods\",{\"1\":{\"515\":1,\"3966\":1}}],[\"getmap\",{\"1\":{\"485\":1,\"491\":1,\"3193\":3,\"3936\":1,\"3942\":1,\"4537\":2}}],[\"getfield\",{\"1\":{\"513\":1,\"3964\":1}}],[\"getfields\",{\"1\":{\"513\":1,\"3964\":1}}],[\"getfindclasses\",{\"1\":{\"421\":1,\"3878\":1}}],[\"getfindclasstime\",{\"1\":{\"421\":1,\"3878\":1}}],[\"getcompletedtaskcount\",{\"1\":{\"3357\":1}}],[\"getcontext\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"getconstructors\",{\"1\":{\"517\":1,\"3968\":1}}],[\"getconstructor\",{\"1\":{\"491\":1,\"508\":1,\"509\":1,\"517\":1,\"3942\":1,\"3959\":1,\"3960\":1,\"3968\":1}}],[\"getclass\",{\"1\":{\"498\":1,\"499\":1,\"925\":1,\"930\":3,\"943\":1,\"3949\":1,\"3950\":1}}],[\"getclassloadinglock\",{\"1\":{\"421\":1,\"3878\":1}}],[\"getruntime\",{\"1\":{\"251\":2}}],[\"generation\",{\"0\":{\"230\":1,\"236\":1},\"1\":{\"858\":1,\"4067\":1}}],[\"gc\",{\"1\":{\"224\":1,\"231\":1,\"233\":1,\"234\":1,\"235\":1,\"237\":2,\"257\":1,\"259\":2,\"262\":1,\"264\":1,\"269\":1,\"270\":1,\"302\":1,\"303\":1,\"364\":1,\"365\":1,\"371\":1,\"380\":1,\"383\":1,\"786\":1,\"788\":1}}],[\"就可能被破解掉\",{\"1\":{\"3607\":1}}],[\"就可以查到数据了\",{\"1\":{\"2649\":1,\"5027\":1}}],[\"就可以通过它找到根域\",{\"1\":{\"2534\":1,\"5632\":1}}],[\"就可以完成文件的传输\",{\"1\":{\"1428\":1,\"1596\":1,\"1764\":1,\"1932\":1,\"4855\":1}}],[\"就可以实现取模运算了\",{\"1\":{\"981\":1}}],[\"就读于陕西师范大学\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"就能知道该接口的请求次数\",{\"1\":{\"3567\":1}}],[\"就能比较容易地进行选择了\",{\"1\":{\"720\":1}}],[\"就关于应聘的软件开发岗位谈一下实际的开发\",{\"1\":{\"3435\":1}}],[\"就关闭当前文件\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"就算数据库泄漏\",{\"1\":{\"3605\":1}}],[\"就算老子啥都不会也不去你这个垃圾公司\",{\"1\":{\"3373\":1,\"5653\":1}}],[\"就算再急也没用\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"就新建一个线程来执行任务\",{\"1\":{\"3315\":1,\"4580\":1}}],[\"就直接获取到锁\",{\"1\":{\"3271\":1,\"4499\":1}}],[\"就直接使用取模算法了呢\",{\"1\":{\"1001\":1}}],[\"就造成了内存泄露\",{\"1\":{\"3201\":1}}],[\"就把其设为同步队列中的头节点\",{\"1\":{\"3077\":1,\"4433\":1}}],[\"就把这个轻量级锁释放了\",{\"1\":{\"2761\":1,\"5139\":1}}],[\"就要升级到\",{\"1\":{\"2843\":2,\"5221\":2}}],[\"就感觉发生了幻觉一样\",{\"1\":{\"2829\":1,\"5207\":1}}],[\"就意味着发生了\",{\"1\":{\"2816\":1,\"2821\":1,\"2825\":1,\"5194\":1,\"5199\":1,\"5203\":1}}],[\"就好比买一件商品\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"就好了\",{\"1\":{\"576\":1}}],[\"就采用轻量级锁\",{\"1\":{\"2764\":1,\"5142\":1}}],[\"就采用\",{\"1\":{\"2763\":1,\"5141\":1}}],[\"就都会被阻塞\",{\"1\":{\"2736\":1,\"5114\":1}}],[\"就无法申请到\",{\"1\":{\"2735\":1,\"5113\":1}}],[\"就无法使用\",{\"1\":{\"1046\":1,\"4079\":1}}],[\"就肯定能命中索引\",{\"1\":{\"2673\":1,\"5051\":1}}],[\"就相当于定位到了数据\",{\"1\":{\"2634\":1,\"5012\":1}}],[\"就相当于取x的2进制的最后三位数\",{\"1\":{\"975\":1}}],[\"就属于非聚簇索引\",{\"1\":{\"2608\":1,\"2640\":1,\"4986\":1,\"5018\":1}}],[\"就代表请求被成功处理\",{\"1\":{\"2501\":1,\"5599\":1}}],[\"就应答ack\",{\"1\":{\"2177\":1,\"4299\":1}}],[\"就变了\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"就利用了\",{\"1\":{\"1431\":1,\"1599\":1,\"1767\":1,\"1935\":1,\"4858\":1}}],[\"就一直不断地把这个事件传递给用户\",{\"1\":{\"1391\":1,\"1559\":1,\"1727\":1,\"1895\":1,\"4818\":1}}],[\"就绪状态的线程获取了cpu\",{\"1\":{\"1345\":1,\"1513\":1,\"1681\":1,\"1849\":1,\"4772\":1}}],[\"就绪状态\",{\"1\":{\"1344\":1,\"1512\":1,\"1680\":1,\"1848\":1,\"4771\":1}}],[\"就像上面的\",{\"1\":{\"3567\":1}}],[\"就像相机拍照那样\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"就像这个事务从来没有执行过一样\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"就像管理普通的代码一样\",{\"1\":{\"2017\":1,\"4622\":1}}],[\"就像一棵倒立的树\",{\"1\":{\"1325\":1,\"4282\":1}}],[\"就像一个工具类\",{\"1\":{\"706\":1}}],[\"就像我们自己做的例子一样\",{\"1\":{\"1122\":1,\"4155\":1}}],[\"就不做过多的介绍了\",{\"1\":{\"1025\":1}}],[\"就二者的效率来说\",{\"1\":{\"865\":1,\"4074\":1}}],[\"就\",{\"1\":{\"847\":1,\"2338\":1,\"4056\":1}}],[\"就⽐较难办了\",{\"1\":{\"831\":1,\"4040\":1}}],[\"就需要遍历表里所有记录\",{\"1\":{\"2750\":1,\"5128\":1}}],[\"就需要在操作共享资源前加上互斥锁\",{\"1\":{\"1489\":1,\"1657\":1,\"1825\":1,\"1993\":1,\"4916\":1}}],[\"就需要修改⼯⼚类的判断逻辑\",{\"1\":{\"825\":1,\"4034\":1}}],[\"就需要提及exception\",{\"1\":{\"465\":1,\"3916\":1}}],[\"就将元素添加进去\",{\"1\":{\"699\":1}}],[\"就如数据库中的唯一约束\",{\"1\":{\"698\":1}}],[\"就说\",{\"1\":{\"587\":1}}],[\"就是密文传输密码http\",{\"1\":{\"3600\":1}}],[\"就是明文传输密码http\",{\"1\":{\"3594\":1}}],[\"就是说服务器在一秒的时间内处理了多少个请求\",{\"1\":{\"3560\":1}}],[\"就是一种\",{\"1\":{\"3266\":1,\"4494\":1}}],[\"就是一个很简单的数组元素求和\",{\"1\":{\"1335\":1}}],[\"就是一个queue对应一个consumer\",{\"1\":{\"1316\":1,\"5508\":1}}],[\"就是一个完整对象了\",{\"1\":{\"1129\":1,\"4162\":1}}],[\"就是一个接口\",{\"1\":{\"570\":1}}],[\"就是一个动态数组\",{\"1\":{\"540\":1}}],[\"就是采用自旋锁\",{\"1\":{\"3255\":1,\"4484\":1}}],[\"就是所有的控制权都交给了操作系统\",{\"1\":{\"3237\":1,\"4360\":1}}],[\"就是开启了事务\",{\"1\":{\"2732\":1,\"5110\":1}}],[\"就是冗余索引\",{\"1\":{\"2673\":1,\"5051\":1}}],[\"就是我的域名我做主\",{\"1\":{\"2541\":1,\"5639\":1}}],[\"就是保存每个节点的表id给前端\",{\"1\":{\"2186\":1,\"4308\":1}}],[\"就是\",{\"1\":{\"2157\":2,\"2652\":1,\"3197\":2,\"4541\":2,\"4762\":2,\"5030\":1,\"5530\":1}}],[\"就是没有选举权和被选举权的\",{\"1\":{\"2113\":1,\"4718\":1}}],[\"就是将\",{\"1\":{\"1495\":1,\"1663\":1,\"1831\":1,\"1999\":1,\"4922\":1}}],[\"就是单机同时处理\",{\"1\":{\"1396\":1,\"1564\":1,\"1732\":1,\"1900\":1,\"4823\":1}}],[\"就是多一些queue而已\",{\"1\":{\"1314\":1,\"5506\":1}}],[\"就是把多个partition均衡的分配给多个消费者\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"就是你的完整创建依赖于我\",{\"1\":{\"1113\":1,\"4146\":1}}],[\"就是基于动态代理的\",{\"1\":{\"1046\":1,\"4079\":1}}],[\"就是为了把高位的特征和低位的特征组合起来\",{\"1\":{\"988\":1}}],[\"就是当达到扩容条件时会进行扩容\",{\"1\":{\"936\":1}}],[\"就是能在线性数据结构的两段\",{\"1\":{\"582\":1}}],[\"就是做了更高层次的抽象\",{\"1\":{\"569\":1}}],[\"就是应该优先考虑组合关系\",{\"1\":{\"560\":1}}],[\"就必须采取某种方式进行处理\",{\"1\":{\"442\":1,\"3901\":1}}],[\"就重写\",{\"1\":{\"413\":1,\"3868\":1}}],[\"就比如说\",{\"1\":{\"405\":1,\"3860\":1}}],[\"就会导致到时候统计出来的次数会多一倍\",{\"1\":{\"3568\":1}}],[\"就会导致雪崩\",{\"1\":{\"2078\":1,\"4683\":1}}],[\"就会处于空闲状态\",{\"1\":{\"3328\":1,\"4585\":1}}],[\"就会将这段代码所属的同步锁消除掉\",{\"1\":{\"3240\":1,\"4363\":1}}],[\"就会将该命令写入到\",{\"1\":{\"2974\":1,\"5352\":1}}],[\"就会有大量的线程被阻塞住\",{\"1\":{\"2736\":1,\"5114\":1}}],[\"就会被阻塞\",{\"1\":{\"2735\":1,\"2794\":1,\"5113\":1,\"5172\":1}}],[\"就会在备份数据库之前先开启事务\",{\"1\":{\"2703\":1,\"5081\":1}}],[\"就会增加\",{\"1\":{\"2669\":1,\"5047\":1}}],[\"就会阻塞住所有的\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"就会触发kafka的rebalance机制\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"就会继续从上次消费到的offset来继续消费\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"就会删除一个最老的片段\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"就会进入拦截方法\",{\"1\":{\"1217\":1,\"4250\":1}}],[\"就会变得非常麻烦\",{\"1\":{\"1123\":1,\"4156\":1}}],[\"就会发现前后两次读到的数据是不一致的\",{\"1\":{\"2823\":1,\"5201\":1}}],[\"就会发现\",{\"1\":{\"556\":1}}],[\"就会看到如下标为蓝色的说明\",{\"1\":{\"534\":1}}],[\"就会创建对应的运行时常量池\",{\"1\":{\"287\":1}}],[\"就会产生\",{\"1\":{\"270\":1}}],[\"就会放到幸存者\",{\"1\":{\"266\":1}}],[\"就会抛出\",{\"1\":{\"229\":1,\"246\":1}}],[\"就得知道接着从哪开始继续执行\",{\"1\":{\"193\":1}}],[\"控制分布式系统有序的去对共享资源进行操作\",{\"1\":{\"3543\":1,\"5812\":1}}],[\"控制位\",{\"1\":{\"2340\":1}}],[\"控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里\",{\"1\":{\"1424\":1,\"1592\":1,\"1760\":1,\"1928\":1,\"4851\":1}}],[\"控制器增强类\",{\"1\":{\"1159\":1,\"4192\":1}}],[\"控制权交给外部环境\",{\"1\":{\"1050\":1,\"4083\":1}}],[\"控制\",{\"1\":{\"229\":1,\"1049\":1,\"4082\":1}}],[\"xian\",{\"0\":{\"5840\":1}}],[\"xiaolincoding\",{\"1\":{\"1397\":1,\"1506\":1,\"1565\":1,\"1674\":1,\"1733\":1,\"1842\":1,\"1901\":1,\"2010\":1,\"4824\":1,\"4933\":1}}],[\"xiaolegeaizy\",{\"1\":{\"1209\":1,\"4242\":1}}],[\"x锁\",{\"1\":{\"2776\":1,\"5154\":1}}],[\"x\",{\"1\":{\"972\":2,\"976\":2,\"2542\":4,\"2783\":1,\"2784\":2,\"2785\":5,\"2789\":1,\"2793\":2,\"2794\":2,\"2795\":3,\"3181\":1,\"3361\":1,\"5161\":1,\"5162\":2,\"5163\":5,\"5167\":1,\"5171\":2,\"5172\":2,\"5173\":3,\"5640\":4}}],[\"xbootclasspath参数指定的路径下的所有类\",{\"1\":{\"402\":1,\"3857\":1}}],[\"xxx\",{\"1\":{\"3573\":1}}],[\"xxxautoconfiguration的作用就是按需加载组件\",{\"1\":{\"1146\":1,\"4179\":1}}],[\"xxx包实现起步依赖\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"xx\",{\"1\":{\"244\":1,\"245\":1,\"256\":1,\"260\":1,\"353\":1,\"3575\":1}}],[\"xml里面加入配置\",{\"1\":{\"1226\":1,\"4259\":1}}],[\"xml并解析出里面所有的标签实例化到ioc容器中\",{\"1\":{\"519\":1,\"3970\":1}}],[\"xml\",{\"1\":{\"457\":1,\"1060\":1,\"4093\":1}}],[\"xms\",{\"1\":{\"229\":1,\"243\":1,\"244\":1,\"247\":1,\"251\":1}}],[\"xmx\",{\"1\":{\"229\":1,\"243\":1,\"245\":1,\"246\":1,\"247\":1,\"251\":1}}],[\"xss来设置线程的最大栈空间\",{\"1\":{\"210\":1}}],[\"实时记录用户数据\",{\"1\":{\"3453\":1,\"5722\":1}}],[\"实习生的日常工作安排\",{\"1\":{\"3407\":1,\"5687\":1}}],[\"实习\",{\"0\":{\"3363\":1}}],[\"实用性太差\",{\"1\":{\"3051\":1,\"5429\":1}}],[\"实际项目经验都是人工智能相关的\",{\"1\":{\"3419\":1,\"5699\":1}}],[\"实际项目是自学的\",{\"1\":{\"3419\":1,\"5699\":1}}],[\"实际调用的是\",{\"1\":{\"862\":1,\"4071\":1}}],[\"实际会调用到实现invocationhandler\",{\"1\":{\"854\":1,\"4063\":1}}],[\"实际应用场景非常非常少\",{\"1\":{\"840\":1,\"4049\":1}}],[\"实际上调用这两个方法的时候\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"实际上域名最后还有一个点\",{\"1\":{\"2526\":1,\"5624\":1}}],[\"实际上这是一个非常具有误导性质的说法\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"实际上最后就会使用到\",{\"1\":{\"1433\":1,\"1601\":1,\"1769\":1,\"1937\":1,\"4860\":1}}],[\"实际上\",{\"1\":{\"533\":1,\"546\":1,\"559\":1,\"3043\":1,\"5421\":1}}],[\"实际的文章内容\",{\"1\":{\"24\":1,\"3678\":1}}],[\"实例化\",{\"1\":{\"1049\":1,\"4082\":1}}],[\"实例化对象\",{\"1\":{\"519\":1,\"3970\":1}}],[\"实例\",{\"1\":{\"498\":1,\"3949\":1}}],[\"实例会在试图亲自查找类或资源之前\",{\"1\":{\"418\":1,\"3874\":1}}],[\"实现思路\",{\"1\":{\"3519\":1,\"5788\":1}}],[\"实现热数据的计算\",{\"1\":{\"3454\":1,\"5723\":1}}],[\"实现热部署的方式\",{\"0\":{\"1167\":1,\"4200\":1}}],[\"实现app后端\",{\"1\":{\"3450\":1,\"5719\":1}}],[\"实现服务注册中的api请求路由\",{\"1\":{\"3449\":1,\"5718\":1}}],[\"实现的\",{\"1\":{\"3070\":1,\"3206\":2,\"3207\":2,\"4330\":2,\"4331\":2,\"4424\":1}}],[\"实现的时候\",{\"1\":{\"763\":1}}],[\"实现共享状态的传播\",{\"1\":{\"3066\":1,\"4420\":1}}],[\"实现一致性读\",{\"1\":{\"2745\":1,\"5123\":1}}],[\"实现成\",{\"1\":{\"1495\":1,\"1663\":1,\"1831\":1,\"1999\":1,\"4922\":1}}],[\"实现方案相比\",{\"1\":{\"1446\":1,\"1614\":1,\"1782\":1,\"1950\":1,\"4873\":1}}],[\"实现方式如下\",{\"1\":{\"1027\":1}}],[\"实现自定义插件\",{\"1\":{\"1215\":1,\"4248\":1}}],[\"实现全局异常处理\",{\"0\":{\"1153\":1,\"4186\":1}}],[\"实现原理与hashmap类似\",{\"1\":{\"907\":1}}],[\"实现原理上\",{\"1\":{\"714\":1,\"1041\":1}}],[\"实现类\",{\"1\":{\"838\":1,\"841\":1,\"4047\":1,\"4050\":1}}],[\"实现较复杂\",{\"1\":{\"821\":1,\"4030\":1}}],[\"实现代码如下\",{\"1\":{\"819\":1,\"4028\":1}}],[\"实现语句是\",{\"1\":{\"753\":1}}],[\"实现了自媒体管理员登录功能\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"实现了用户通过app端登录功能\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性\",{\"1\":{\"2102\":1,\"4707\":1}}],[\"实现了某个接口\",{\"1\":{\"1046\":1,\"4079\":1}}],[\"实现了map接口\",{\"1\":{\"907\":1}}],[\"实现了\",{\"1\":{\"851\":1,\"2569\":1,\"2932\":1,\"3213\":1,\"4060\":1,\"4337\":1,\"4947\":1,\"5310\":1}}],[\"实现了优先级队列\",{\"1\":{\"731\":1}}],[\"实现了双亲委派机制\",{\"1\":{\"408\":1,\"3863\":1}}],[\"实现\",{\"1\":{\"546\":1,\"577\":1,\"891\":1,\"1218\":1,\"2602\":1,\"3527\":1,\"4251\":1,\"4980\":1,\"5796\":1}}],[\"实现时\",{\"1\":{\"229\":1}}],[\"像\",{\"1\":{\"3266\":1,\"3275\":1,\"4494\":1,\"4503\":1}}],[\"像java\",{\"1\":{\"3260\":1,\"4488\":1}}],[\"像磁盘空间一样\",{\"1\":{\"229\":1}}],[\"像一些方法中的操作临时对象等\",{\"1\":{\"227\":1}}],[\"之所以没有使用\",{\"1\":{\"2919\":1,\"5297\":1}}],[\"之上的\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"之上\",{\"1\":{\"2521\":2,\"5619\":2}}],[\"之父也在\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"之间的关系\",{\"1\":{\"546\":1}}],[\"之间\",{\"1\":{\"382\":1,\"658\":1,\"3999\":1}}],[\"之外\",{\"1\":{\"344\":1}}],[\"之后模板显示已经准备好的数据\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"之后已经默认是开启了\",{\"1\":{\"2972\":1,\"5350\":1}}],[\"之后可以在插入数据时\",{\"1\":{\"2755\":1,\"5133\":1}}],[\"之后才有\",{\"1\":{\"2155\":1,\"4760\":1}}],[\"之后server2\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"之后\",{\"1\":{\"2099\":1,\"2628\":1,\"2966\":3,\"4704\":1,\"5006\":1,\"5344\":3}}],[\"之后就不会再传递同样的事件了\",{\"1\":{\"1391\":1,\"1559\":1,\"1727\":1,\"1895\":1,\"4818\":1}}],[\"之后尽量均衡的将分区分配给消费者\",{\"1\":{\"1269\":1,\"5461\":1}}],[\"之后的每次扩充结果也都是奇数\",{\"1\":{\"1005\":1}}],[\"之后的所有调⽤都不会进⼊同步块\",{\"1\":{\"821\":1,\"4030\":1}}],[\"之后每次扩充为原来的2n+1\",{\"1\":{\"1004\":1,\"1009\":1}}],[\"之后每次扩充为原来的2倍\",{\"1\":{\"981\":1,\"1008\":1}}],[\"之后发现依然无法进行对象的保存\",{\"1\":{\"270\":1}}],[\"之后直接使用物理内存\",{\"1\":{\"227\":1}}],[\"之前已经提交的修改和该事务本身做的修改\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"之前只有\",{\"1\":{\"2628\":1,\"5006\":1}}],[\"之前名为\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"之前说过\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"之前\",{\"1\":{\"1017\":1,\"2560\":1,\"2742\":1,\"2743\":1,\"4938\":1,\"5120\":1,\"5121\":1}}],[\"之前会产生冲突的两个hashcode\",{\"1\":{\"994\":1}}],[\"之前的比较都是基于我们将arraylist转成synchronizedlist\",{\"1\":{\"806\":1}}],[\"之前的永久代\",{\"1\":{\"240\":1}}],[\"之前介绍的map接口的实现类都有一个对应的set接口的实现类\",{\"1\":{\"688\":1}}],[\"之前是占用\",{\"1\":{\"227\":1}}],[\"之前叫永久代\",{\"1\":{\"227\":1}}],[\"8公平锁\",{\"0\":{\"3267\":1}}],[\"8为什么需要\",{\"0\":{\"2436\":1}}],[\"8第二次握手丢失了\",{\"0\":{\"2425\":1}}],[\"800\",{\"1\":{\"2807\":2,\"5185\":2}}],[\"80\",{\"1\":{\"2415\":2,\"2519\":1,\"5617\":1}}],[\"8080\",{\"1\":{\"1178\":1,\"3594\":1,\"3600\":1,\"4211\":1}}],[\"8格式编码\",{\"1\":{\"1188\":1,\"4221\":1}}],[\"8的concurrenthashmap作者认为引入红黑树后\",{\"1\":{\"1029\":1}}],[\"8的concurrenthashmap同样是通过key的哈希值与数组长度取模确定该key在数组中的索引\",{\"1\":{\"1029\":1}}],[\"8的hashtable中\",{\"1\":{\"1023\":1}}],[\"8的实现中\",{\"1\":{\"1021\":1}}],[\"8的商\",{\"1\":{\"976\":1}}],[\"8中这一步做了优化\",{\"1\":{\"1019\":1}}],[\"8中的实现\",{\"1\":{\"1031\":1}}],[\"8中的hash函数\",{\"1\":{\"1019\":1}}],[\"8中的优化\",{\"1\":{\"1017\":1}}],[\"8中使用平衡树来替代链表存储冲突的元素\",{\"1\":{\"1017\":1}}],[\"8中hashmap从头插入改成尾插入\",{\"0\":{\"867\":1,\"3975\":1}}],[\"8相当于\",{\"1\":{\"976\":1}}],[\"8以前的版本\",{\"1\":{\"901\":1}}],[\"86655574\",{\"1\":{\"897\":1,\"3888\":1}}],[\"8采用红黑树存储\",{\"0\":{\"870\":1,\"3978\":1}}],[\"8从头插入改成尾插入元素的顺序不变\",{\"1\":{\"869\":1,\"3977\":1}}],[\"85109687\",{\"1\":{\"653\":1}}],[\"8\",{\"0\":{\"898\":1},\"1\":{\"227\":3,\"335\":1,\"468\":1,\"931\":1,\"951\":1,\"974\":1,\"976\":1,\"979\":1,\"980\":1,\"1016\":1,\"1017\":1,\"1022\":1,\"1026\":1,\"1027\":1,\"1055\":1,\"1067\":1,\"1397\":1,\"1506\":1,\"1565\":1,\"1674\":1,\"1733\":1,\"1842\":1,\"1901\":1,\"2010\":1,\"2099\":1,\"2390\":1,\"3381\":1,\"3418\":1,\"3441\":1,\"3919\":1,\"4088\":1,\"4100\":1,\"4704\":1,\"4824\":1,\"4933\":1,\"5661\":1,\"5698\":1}}],[\"被拒绝的任务\",{\"1\":{\"3302\":1,\"4567\":1}}],[\"被\",{\"1\":{\"2758\":1,\"5136\":1}}],[\"被频繁更新的字段应该慎重建立索引\",{\"1\":{\"2664\":1,\"5042\":1}}],[\"被频繁查询的字段\",{\"1\":{\"2660\":1,\"5038\":1}}],[\"被经常频繁用于连接的字段\",{\"1\":{\"2663\":1,\"5041\":1}}],[\"被作为\",{\"1\":{\"2661\":1,\"5039\":1}}],[\"被作为条件查询的字段\",{\"1\":{\"2661\":1,\"5039\":1}}],[\"被称为解决\",{\"1\":{\"1383\":1,\"1551\":1,\"1719\":1,\"1887\":1,\"4810\":1}}],[\"被称为from\",{\"1\":{\"231\":1}}],[\"被拦截的方法\",{\"1\":{\"861\":1,\"4070\":1}}],[\"被代理的对象\",{\"1\":{\"861\":1,\"4070\":1}}],[\"被代理类实现的一些接口\",{\"1\":{\"851\":1,\"4060\":1}}],[\"被弱引用关联的对象一定会被回收\",{\"1\":{\"317\":1}}],[\"被软引用关联的对象只有在内存不够的情况下才会被回收\",{\"1\":{\"314\":1}}],[\"被强引用关联的对象不会被回收\",{\"1\":{\"311\":1}}],[\"被长时间使用的对象\",{\"1\":{\"226\":1}}],[\"被所有线程共享\",{\"1\":{\"223\":1}}],[\"养老区\",{\"1\":{\"226\":1}}],[\"新任务就会被存放在队列中\",{\"1\":{\"3292\":1,\"3307\":1,\"4556\":1,\"4572\":1}}],[\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数\",{\"1\":{\"3292\":1,\"3307\":1,\"4556\":1,\"4572\":1}}],[\"新写入操作会报错\",{\"1\":{\"3007\":1,\"5385\":1}}],[\"新增\",{\"1\":{\"2962\":1,\"5340\":1}}],[\"新增了\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"新的\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"新人只需要了解他所接管的服务的代码\",{\"1\":{\"2045\":1,\"4650\":1}}],[\"新创建了一个线程对象\",{\"1\":{\"1343\":1,\"1511\":1,\"1679\":1,\"1847\":1,\"4770\":1}}],[\"新建线程将会使当前运行的线程超出最大线程数\",{\"1\":{\"3316\":1,\"4581\":1}}],[\"新建状态\",{\"1\":{\"1343\":1,\"1511\":1,\"1679\":1,\"1847\":1,\"4770\":1}}],[\"新建一个springboot项目\",{\"1\":{\"1186\":1,\"4219\":1}}],[\"新生代和老年代数据是如何流动的\",{\"1\":{\"3427\":1,\"5707\":1}}],[\"新生代和老年代不再物理隔离\",{\"1\":{\"375\":1}}],[\"新生代使用\",{\"1\":{\"339\":1}}],[\"新生代又被进一步划分为\",{\"1\":{\"254\":1}}],[\"新生带\",{\"1\":{\"225\":1}}],[\"新对象和没达到一定年龄的对象都在新生代\",{\"1\":{\"225\":1}}],[\"几乎是不可能事件\",{\"1\":{\"879\":1,\"3987\":1}}],[\"几乎不会有bin中链表长度会达到阈值\",{\"1\":{\"879\":1,\"3987\":1}}],[\"几乎所有的对象实例以及数据都在这里分配内存\",{\"1\":{\"223\":1}}],[\"几乎可以忽略不计\",{\"1\":{\"197\":1}}],[\"指令和\",{\"1\":{\"3175\":1,\"3179\":1,\"4520\":1,\"4524\":1}}],[\"指令后\",{\"1\":{\"3171\":1,\"4516\":1}}],[\"指令来释放锁\",{\"1\":{\"3171\":1,\"4516\":1}}],[\"指令时\",{\"1\":{\"3167\":1,\"4512\":1}}],[\"指令以及两个\",{\"1\":{\"3166\":1,\"4511\":1}}],[\"指令则指明同步代码块的结束位置\",{\"1\":{\"3165\":1,\"3178\":1,\"4510\":1,\"4523\":1}}],[\"指令指向同步代码块的开始位置\",{\"1\":{\"3165\":1,\"3178\":1,\"4510\":1,\"4523\":1}}],[\"指令\",{\"1\":{\"3106\":1,\"3165\":1,\"3166\":1,\"3175\":1,\"3178\":1,\"3179\":1,\"4388\":1,\"4510\":1,\"4511\":1,\"4520\":1,\"4523\":1,\"4524\":1}}],[\"指在\",{\"1\":{\"2873\":1,\"5251\":1}}],[\"指向该行的\",{\"1\":{\"2858\":1,\"5236\":1}}],[\"指向运行时常量池的方法引用\",{\"1\":{\"214\":1}}],[\"指一个事务执行过程中看到的数据\",{\"1\":{\"2834\":1,\"5212\":1}}],[\"指一个事务提交之后\",{\"1\":{\"2833\":1,\"5211\":1}}],[\"指一个事务还没提交时\",{\"1\":{\"2832\":1,\"5210\":1}}],[\"指下一次\",{\"1\":{\"2339\":1}}],[\"指出对于一个分布式系统来说\",{\"1\":{\"2147\":1,\"4752\":1}}],[\"指明partition的情况下\",{\"1\":{\"1260\":1,\"5452\":1}}],[\"指定要拦截哪一个接口的哪些方法即可\",{\"1\":{\"1218\":1,\"4251\":1}}],[\"指定连接数据库的驱动类时用到反射加载驱动类\",{\"1\":{\"519\":1,\"3970\":1}}],[\"指的是\",{\"1\":{\"3568\":1}}],[\"指的是对象创建\",{\"1\":{\"1049\":1,\"4082\":1}}],[\"指的是标记\",{\"1\":{\"362\":1}}],[\"指南\",{\"0\":{\"141\":1,\"3795\":1}}],[\"或轻量级锁\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"或锁机制来保证的\",{\"1\":{\"2813\":1,\"5191\":1}}],[\"或其变种\",{\"1\":{\"2592\":1,\"4970\":1}}],[\"或是当\",{\"1\":{\"2105\":1,\"4710\":1}}],[\"或join\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"或notifyall\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"或\",{\"1\":{\"1063\":1,\"1140\":1,\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"2652\":1,\"3255\":1,\"4096\":1,\"4173\":1,\"4484\":1,\"4820\":1,\"5030\":1}}],[\"或深度\",{\"1\":{\"637\":1}}],[\"或子孙结点\",{\"1\":{\"629\":1}}],[\"或许直接升级http\",{\"1\":{\"2214\":1,\"2229\":1,\"2244\":1,\"2257\":1,\"2270\":1,\"2285\":1,\"5521\":1,\"5544\":1}}],[\"或许\",{\"1\":{\"590\":1}}],[\"或者其它原因导致的任务暂停而带来的影响\",{\"1\":{\"3328\":1,\"4585\":1}}],[\"或者我们直接通过\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"或者反过来\",{\"1\":{\"2934\":1,\"5312\":1}}],[\"或者在执行过程中遇到范围查询\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈\",{\"1\":{\"209\":1}}],[\"或者平时保持一定的流量\",{\"1\":{\"2202\":1,\"4324\":1}}],[\"或者说覆盖\",{\"1\":{\"2613\":1,\"2648\":1,\"4991\":1,\"5026\":1}}],[\"或者说短任务线程多\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"或者说我想要方便在中间插入和删除的同步的链表\",{\"1\":{\"806\":1}}],[\"或者一致性\",{\"1\":{\"2156\":1,\"4761\":1}}],[\"或者显式地删除一个消息队列时\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"或者i\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"或者发出了i\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"或者redis天然的set结构\",{\"1\":{\"1303\":1,\"5495\":1}}],[\"或者你可以找几个例子试一下\",{\"1\":{\"977\":1}}],[\"或者经常需要在中间进行插入和删除\",{\"1\":{\"728\":1}}],[\"或者\",{\"1\":{\"340\":1,\"573\":1,\"576\":1,\"588\":1,\"2157\":1,\"2775\":1,\"4762\":1,\"5153\":1}}],[\"或称为表达式栈\",{\"1\":{\"213\":1}}],[\"局部变量表\",{\"1\":{\"212\":1}}],[\"那你怎么判断它使用完了呢\",{\"1\":{\"3440\":1}}],[\"那你什么时间把这个对象删除的呢\",{\"1\":{\"3440\":1}}],[\"那你能简单说下threadlocal的原理吗\",{\"1\":{\"3439\":1}}],[\"那你熟悉这个加密算法吗\",{\"1\":{\"3438\":1}}],[\"那多个线程之间并不会相互影响\",{\"1\":{\"3265\":1,\"4493\":1}}],[\"那再以后要获取这个锁时将可能省略掉自旋过程\",{\"1\":{\"3256\":1}}],[\"那当前线程就要阻塞等待\",{\"1\":{\"3171\":1,\"4516\":1}}],[\"那这部分数据就算丢失了\",{\"1\":{\"2975\":1,\"5353\":1}}],[\"那在对表结构做变更操作的时候\",{\"1\":{\"2732\":1,\"5110\":1}}],[\"那如果数据库有一个长事务\",{\"1\":{\"2732\":1,\"5110\":1}}],[\"那它是在什么时候释放的\",{\"1\":{\"2730\":1,\"5108\":1}}],[\"那有什么其他方式可以避免\",{\"1\":{\"2700\":1,\"5078\":1}}],[\"那有没有可能只使用一个进程来维护多个\",{\"1\":{\"1373\":1,\"1541\":1,\"1709\":1,\"1877\":1,\"4800\":1}}],[\"那时候http\",{\"1\":{\"2212\":1,\"2227\":1,\"2242\":1,\"2255\":1,\"2268\":1,\"2283\":1,\"5519\":1,\"5542\":1}}],[\"那数据是不是不一致啦\",{\"1\":{\"2179\":1,\"4301\":1}}],[\"那就意味着要准备数据在真实编程语言中来显示\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"那就自动重试嘛\",{\"1\":{\"2179\":1,\"4301\":1}}],[\"那就和\",{\"1\":{\"2158\":1,\"4763\":1}}],[\"那就是\",{\"1\":{\"1373\":1,\"1541\":1,\"1709\":1,\"1877\":1,\"2470\":1,\"4800\":1,\"5568\":1}}],[\"那就是0\",{\"1\":{\"940\":1}}],[\"那就是插入的数据是有序的\",{\"1\":{\"658\":1,\"3999\":1}}],[\"那怎么解决呢\",{\"1\":{\"2138\":1,\"4743\":1}}],[\"那也就意味着我们需要两台以上同意\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"那既然引入多线程\",{\"1\":{\"1487\":1,\"1655\":1,\"1823\":1,\"1991\":1,\"4914\":1}}],[\"那样轮询扫描整个\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"那后续很有可能会再被引用到\",{\"1\":{\"1332\":1}}],[\"那反射是啥\",{\"1\":{\"481\":1,\"3932\":1}}],[\"那些我们没有做的关闭资源的操作\",{\"1\":{\"458\":1}}],[\"那必须在方法头中显式声明该异常\",{\"1\":{\"448\":1,\"3907\":1}}],[\"那么通过查表方式\",{\"1\":{\"3608\":1}}],[\"那么还是用专业的消息队列中间件吧\",{\"1\":{\"3538\":1,\"5807\":1}}],[\"那么md5它能够被破解吗\",{\"1\":{\"3437\":1}}],[\"那么mutex对象又是什么呢\",{\"1\":{\"803\":1}}],[\"那么jvm会认为该锁自旋获取到锁的可能性很大\",{\"1\":{\"3256\":1}}],[\"那么该线程在后续访问时便会自动获得锁\",{\"1\":{\"3228\":1,\"4352\":1}}],[\"那么访问这个变量的每个线程都会有这个变量的本地副本\",{\"1\":{\"3186\":1,\"4531\":1}}],[\"那么aqs会把当前线程以及等待状态封装成一个node节点加入到同步队列中\",{\"1\":{\"3068\":1,\"4422\":1}}],[\"那么会尝试使用doreleaseshared方法尝试唤醒节点\",{\"1\":{\"3066\":1,\"4420\":1}}],[\"那么说明这个值在布隆过滤器中\",{\"1\":{\"3030\":1,\"5408\":1}}],[\"那么说完了\",{\"1\":{\"2131\":1,\"4736\":1}}],[\"那么这个消息理论上就会被消费两次\",{\"1\":{\"3468\":1,\"5737\":1}}],[\"那么这个写操作的结果一定对读的这个线程可见\",{\"1\":{\"3140\":1,\"4453\":1}}],[\"那么这个元素一定不在\",{\"1\":{\"3023\":1,\"5401\":1}}],[\"那么这个插入语句就会被阻塞\",{\"1\":{\"2848\":1,\"5226\":1}}],[\"那么这些个服务一定会出现失败的情况\",{\"1\":{\"2078\":1,\"4683\":1}}],[\"那么当前任务会被拒绝\",{\"1\":{\"3316\":1,\"4581\":1}}],[\"那么当事务\",{\"1\":{\"2823\":1,\"5201\":1}}],[\"那么当这个表的数据达到一个体量后\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"那么事务\",{\"1\":{\"2818\":1,\"2819\":1,\"5196\":1,\"5197\":1}}],[\"那么另外一个事务在获取相同范围的\",{\"1\":{\"2793\":1,\"2794\":1,\"5171\":1,\"5172\":1}}],[\"那么其他事务就无法插入\",{\"1\":{\"2788\":1,\"5166\":1}}],[\"那么有了\",{\"1\":{\"2751\":1,\"5129\":1}}],[\"那么有一些消费者就会多分配到一些分区\",{\"1\":{\"1269\":1,\"5461\":1}}],[\"那么加密信息也就不安全了\",{\"1\":{\"3653\":1}}],[\"那么加\",{\"1\":{\"2750\":1,\"5128\":1}}],[\"那么在加\",{\"1\":{\"2751\":1,\"5129\":1}}],[\"那么在线程\",{\"1\":{\"2736\":1,\"5114\":1}}],[\"那么在备份数据库之前先开启事务\",{\"1\":{\"2701\":1,\"5079\":1}}],[\"那么将会被阻塞\",{\"1\":{\"2728\":1,\"5106\":1}}],[\"那么将会节约很大磁盘空间\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"那么本线程接下来如果要对学生表执行写操作的语句\",{\"1\":{\"2717\":1,\"5095\":1}}],[\"那么索引\",{\"1\":{\"2673\":1,\"5051\":1}}],[\"那么直接根据这个索引就可以查到数据\",{\"1\":{\"2650\":1,\"5028\":1}}],[\"那么直接根据该索引\",{\"1\":{\"2649\":1,\"5027\":1}}],[\"那么正好根据主键索引就可以查到主键\",{\"1\":{\"2650\":1,\"5028\":1}}],[\"那么对应的索引也将会被修改\",{\"1\":{\"2638\":1,\"5016\":1}}],[\"那么对比将失去意义\",{\"1\":{\"741\":1}}],[\"那么也不能扔给应用层去处理\",{\"1\":{\"2353\":1}}],[\"那么强一致性和可用性只能\",{\"1\":{\"2155\":1,\"4760\":1}}],[\"那么跳过那些已经被丢弃的提案又是什么意思呢\",{\"1\":{\"2140\":1,\"4745\":1}}],[\"那么肯定会产生数据不一致性\",{\"1\":{\"2136\":1,\"4741\":1}}],[\"那么整个集群会如何重新选举\",{\"1\":{\"2127\":1,\"4732\":1}}],[\"那么整个服务框架就可以进入消息广播模式了\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"那么新加入的服务器就会自觉地进入数据恢复模式\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"那么下次请求就不会请求到该服务\",{\"1\":{\"2074\":1,\"4679\":1}}],[\"那么自然就带来了多线程竞争资源的问题\",{\"1\":{\"1487\":1,\"1655\":1,\"1823\":1,\"1991\":1,\"4914\":1}}],[\"那么roundrobinassignor的分配结果如下\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"那么return\",{\"1\":{\"969\":1}}],[\"那么分配结果是不保证\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"那么分配结果是尽量均衡的\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"那么c0又会比c1\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"那么capacity就是这个桶\",{\"1\":{\"924\":1}}],[\"那么因为分区数变化\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"那么相应的pojo类必须实现serializable接口\",{\"1\":{\"1236\":1,\"4269\":1}}],[\"那么二级缓存一样可以解决循环依赖问题\",{\"1\":{\"1137\":1,\"4170\":1}}],[\"那么就代表加锁失败\",{\"1\":{\"3548\":1,\"5817\":1}}],[\"那么就把该任务放入到任务队列里等待执行\",{\"1\":{\"3314\":1,\"4579\":1}}],[\"那么就会新建一个线程来执行任务\",{\"1\":{\"3313\":1,\"4578\":1}}],[\"那么就会被阻塞\",{\"1\":{\"2729\":1,\"5107\":1}}],[\"那么就更不应该在这种字段上建立索引了\",{\"1\":{\"2665\":1,\"5043\":1}}],[\"那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制\",{\"1\":{\"3070\":1,\"4424\":1}}],[\"那么就需要在插入时排序\",{\"1\":{\"2637\":1,\"5015\":1}}],[\"那么就需要由上层\",{\"1\":{\"2346\":1}}],[\"那么就需要引入多线程\",{\"1\":{\"1477\":1,\"1645\":1,\"1813\":1,\"1981\":1,\"4904\":1}}],[\"那么就造成响应的延迟\",{\"1\":{\"1473\":1,\"1641\":1,\"1809\":1,\"1977\":1,\"4900\":1}}],[\"那么就去创建\",{\"1\":{\"1118\":1,\"4151\":1}}],[\"那么就不再需要进⾏同步操作\",{\"1\":{\"821\":1,\"4030\":1}}],[\"那么接下来我们要看下\",{\"1\":{\"998\":1}}],[\"那么如果不对密码加密\",{\"1\":{\"3594\":1}}],[\"那么如果数据库里有很多数据\",{\"1\":{\"2699\":1,\"5077\":1}}],[\"那么如果文件描述符是阻塞的\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"那么如果我们想把linkedlist变成线程安全的\",{\"1\":{\"806\":1}}],[\"那么如何解决这种冲突呢\",{\"1\":{\"985\":1}}],[\"那么hash会选择大于该数字的第一个2的幂作为容量\",{\"1\":{\"932\":1}}],[\"那么我们的\",{\"1\":{\"2116\":1,\"4721\":1}}],[\"那么我们也可以先来尝试下这样的依赖\",{\"1\":{\"1114\":1,\"4147\":1}}],[\"那么我们可以直接使用位运算来得到结果\",{\"1\":{\"1011\":1}}],[\"那么我们尝试着设置一下\",{\"1\":{\"929\":1}}],[\"那么我可以将已有的linkedlist直接转成\",{\"1\":{\"806\":1}}],[\"那么n\",{\"1\":{\"877\":1,\"3985\":1}}],[\"那么锁定的也是this对象\",{\"1\":{\"803\":1}}],[\"那么锁定的就是用户传入的对象\",{\"1\":{\"803\":1}}],[\"那么\",{\"1\":{\"768\":1,\"937\":1,\"970\":1,\"992\":1,\"996\":1,\"1046\":1,\"1433\":1,\"1601\":1,\"1769\":1,\"1937\":1,\"2207\":1,\"2222\":1,\"2237\":1,\"2250\":1,\"2263\":1,\"2278\":1,\"2489\":2,\"2758\":1,\"2800\":1,\"2992\":1,\"3642\":1,\"4079\":1,\"4860\":1,\"5136\":1,\"5178\":1,\"5370\":1,\"5513\":1,\"5538\":1,\"5587\":2}}],[\"那么容量就为传入的最小容量\",{\"1\":{\"763\":1}}],[\"那么使用arraylist是更好的选择\",{\"1\":{\"742\":1}}],[\"那么红黑树的查询效率就比二叉搜索树要高了\",{\"1\":{\"671\":1,\"4013\":1}}],[\"那么为了应对这种极端情况\",{\"1\":{\"658\":1,\"3999\":1}}],[\"那么所有的节点都会在根节点的右侧或左侧\",{\"1\":{\"658\":1,\"3999\":1}}],[\"那么它就是接近平衡的二叉树\",{\"1\":{\"658\":1,\"3999\":1}}],[\"那么finally中的代码还是会执⾏\",{\"1\":{\"461\":1}}],[\"那么后⾯的finally\",{\"1\":{\"460\":1}}],[\"那么虚拟机是如何加载这些\",{\"1\":{\"389\":1,\"3843\":1}}],[\"那么一块\",{\"1\":{\"335\":1}}],[\"那么堆的大小在\",{\"1\":{\"243\":1}}],[\"那\",{\"1\":{\"209\":1,\"2589\":1,\"4967\":1}}],[\"那每个线程的\",{\"1\":{\"208\":1}}],[\"栈和双端队列使用\",{\"1\":{\"714\":1}}],[\"栈和动态数组之间的关系不应该是继承关系\",{\"1\":{\"558\":1}}],[\"栈不是一个动态数组\",{\"1\":{\"556\":1}}],[\"栈不存在垃圾回收问题\",{\"1\":{\"206\":1}}],[\"栈是一个动态数组\",{\"1\":{\"556\":1}}],[\"栈这种数据结构\",{\"1\":{\"555\":1}}],[\"栈\",{\"0\":{\"526\":1,\"3992\":1},\"1\":{\"606\":1}}],[\"栈上分配\",{\"1\":{\"277\":1}}],[\"栈帧\",{\"1\":{\"217\":1}}],[\"栈的大小直接决定了函数调用的最大可达深度\",{\"1\":{\"210\":1}}],[\"栈中可能出现的异常\",{\"1\":{\"207\":1}}],[\"进入这个状态后\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"进程会阻塞在读写函数那里\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"进程可以通过一个系统调用函数从内核中获取多个事件\",{\"1\":{\"1375\":1,\"1543\":1,\"1711\":1,\"1879\":1,\"4802\":1}}],[\"进程\",{\"1\":{\"1358\":1,\"1449\":1,\"1477\":1,\"1526\":1,\"1617\":1,\"1645\":1,\"1694\":1,\"1785\":1,\"1813\":1,\"1862\":1,\"1953\":1,\"1981\":1,\"4785\":1,\"4876\":1,\"4904\":1}}],[\"进程间通信\",{\"0\":{\"1349\":1,\"1363\":1,\"1517\":1,\"1531\":1,\"1685\":1,\"1699\":1,\"1853\":1,\"1867\":1,\"4776\":1,\"4790\":1}}],[\"进程间通信方式\",{\"0\":{\"1323\":1,\"4280\":1}}],[\"进程和线程管理\",{\"0\":{\"1341\":1,\"1509\":1,\"1677\":1,\"1845\":1,\"4768\":1}}],[\"进⾏锁竞争\",{\"1\":{\"821\":1,\"4030\":1}}],[\"进而转化成真正的\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"进而提升整体的性能\",{\"1\":{\"658\":1,\"3999\":1}}],[\"进而影响分配速度\",{\"1\":{\"275\":1}}],[\"进行了很多优化\",{\"1\":{\"3208\":1,\"4332\":1}}],[\"进行了扰动计算\",{\"1\":{\"1012\":1}}],[\"进行加锁\",{\"1\":{\"3125\":1,\"4407\":1}}],[\"进行加密\",{\"1\":{\"405\":1,\"3860\":1}}],[\"进行删除的呢\",{\"1\":{\"2992\":1,\"5370\":1}}],[\"进行查询\",{\"1\":{\"2678\":1,\"5056\":1}}],[\"进行搜索\",{\"1\":{\"2605\":1,\"2615\":1,\"4983\":1,\"4993\":1}}],[\"进行回滚或者提交\",{\"1\":{\"2195\":1,\"4317\":1}}],[\"进行聚合查询\",{\"0\":{\"2185\":1,\"4307\":1}}],[\"进行投票选举的时候会比较\",{\"1\":{\"2139\":1,\"4744\":1}}],[\"进行开发实现\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"进行发送\",{\"1\":{\"1488\":1,\"1656\":1,\"1824\":1,\"1992\":1,\"4915\":1}}],[\"进行分发\",{\"1\":{\"1466\":1,\"1481\":1,\"1634\":1,\"1649\":1,\"1802\":1,\"1817\":1,\"1970\":1,\"1985\":1,\"4893\":1,\"4908\":1}}],[\"进行解析\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"进行遍历时要手动进行同步处理\",{\"1\":{\"809\":1}}],[\"进行插入和删除操作\",{\"1\":{\"582\":1}}],[\"进行\",{\"1\":{\"365\":1,\"3102\":1,\"4383\":1}}],[\"进行养老区的内存清理\",{\"1\":{\"269\":1}}],[\"进行引用\",{\"1\":{\"125\":1,\"126\":1,\"3779\":1,\"3780\":1}}],[\"进栈\",{\"1\":{\"205\":1}}],[\"伴随着入栈\",{\"1\":{\"205\":1}}],[\"并具有唯一性的字符串\",{\"1\":{\"3563\":1}}],[\"并用来生成输出文本\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"并从中获取用户相关信息\",{\"1\":{\"3482\":1,\"5751\":1}}],[\"并结合spring\",{\"1\":{\"3450\":1,\"5719\":1}}],[\"并撤销偏向锁\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"并重新计算想要修改的新值\",{\"1\":{\"3101\":1,\"4381\":1}}],[\"并重写指定的方法\",{\"1\":{\"3080\":1,\"4436\":1}}],[\"并重写\",{\"1\":{\"860\":1,\"4069\":1}}],[\"并调用其模板方法\",{\"1\":{\"3080\":1,\"4436\":1}}],[\"并把参数中的引号作为转义字符\",{\"1\":{\"2876\":1,\"5254\":1}}],[\"并提交了事务\",{\"1\":{\"2823\":1,\"2828\":1,\"5201\":1,\"5206\":1}}],[\"并允许数据重复和\",{\"1\":{\"2626\":1,\"5004\":1}}],[\"并检查查询分组的接收\",{\"1\":{\"2482\":1,\"5580\":1}}],[\"并与其进行数据同步\",{\"1\":{\"2106\":1,\"4711\":1}}],[\"并以一系列简单易用的接口提供给用户使用\",{\"1\":{\"2095\":1,\"4700\":1}}],[\"并解决网络服务差时带来的风险\",{\"1\":{\"2052\":1,\"4657\":1}}],[\"并有坚实的服务边界\",{\"1\":{\"2048\":1,\"4653\":1}}],[\"并有利于未来的可拓展性和可维护性\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"并通过镜像管理驱动\",{\"1\":{\"2024\":1,\"4629\":1}}],[\"并创建一个\",{\"1\":{\"1467\":1,\"1482\":1,\"1500\":1,\"1635\":1,\"1650\":1,\"1668\":1,\"1803\":1,\"1818\":1,\"1836\":1,\"1971\":1,\"1986\":1,\"2004\":1,\"4894\":1,\"4909\":1,\"4927\":1}}],[\"并打开一个新文件\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"并做简单的配置即可\",{\"1\":{\"1178\":1,\"4211\":1}}],[\"并在其\",{\"1\":{\"2343\":1}}],[\"并在自己的事务中运行\",{\"1\":{\"1097\":1,\"4130\":1}}],[\"并在具体⼦⼯⼚中实现新加产品的创建\",{\"1\":{\"831\":1,\"4040\":1}}],[\"并处理相应的业务逻辑\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"并非\",{\"1\":{\"1047\":1,\"4080\":1}}],[\"并保持其输入顺序\",{\"1\":{\"1041\":1}}],[\"并试着分析下不同的原因\",{\"1\":{\"998\":1}}],[\"并想其中put了一个元素\",{\"1\":{\"926\":1}}],[\"并加载到\",{\"1\":{\"838\":1,\"844\":1,\"4047\":1,\"4053\":1}}],[\"并维护了长度\",{\"1\":{\"714\":1}}],[\"并维护一个优先列表\",{\"1\":{\"375\":1}}],[\"并没有收到它的\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"并没有做同步处理\",{\"1\":{\"804\":1}}],[\"并没有严格的卡定某个平衡因子来维持绝对平衡\",{\"1\":{\"658\":1,\"3999\":1}}],[\"并没有规定如何去实现它\",{\"1\":{\"282\":1}}],[\"并称其为子树\",{\"1\":{\"614\":1}}],[\"并不存在互斥关系\",{\"1\":{\"2789\":1,\"5167\":1}}],[\"并不需要等语句执行后才释放\",{\"1\":{\"2764\":1,\"5142\":1}}],[\"并不冲突\",{\"1\":{\"2734\":1,\"5112\":1}}],[\"并不会释放\",{\"1\":{\"3201\":1}}],[\"并不会使用\",{\"1\":{\"2845\":1,\"5223\":1}}],[\"并不会停止匹配\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"并不会一次性加载所有的类\",{\"1\":{\"398\":1,\"3853\":1}}],[\"并不清楚目的地的\",{\"1\":{\"2477\":1,\"5575\":1}}],[\"并不是存在\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"并不是彻底避免\",{\"1\":{\"2845\":1,\"5223\":1}}],[\"并不是一种单独的索引类型\",{\"1\":{\"2631\":1,\"2640\":1,\"5009\":1,\"5018\":1}}],[\"并不是\",{\"1\":{\"2200\":1,\"4322\":1}}],[\"并不对整个数据进行锁定\",{\"1\":{\"893\":1}}],[\"并不能直接交给底层操作系统去执行\",{\"1\":{\"182\":1,\"3831\":1}}],[\"并发处理\",{\"1\":{\"3337\":1,\"4594\":1}}],[\"并发编程的艺术\",{\"1\":{\"3280\":1,\"4544\":1}}],[\"并发编程j\",{\"1\":{\"3128\":1,\"4410\":1}}],[\"并发包中的\",{\"1\":{\"3255\":1,\"4484\":1}}],[\"并发原语\",{\"1\":{\"3095\":1,\"4371\":1}}],[\"并发访问共享资源\",{\"1\":{\"3065\":1,\"4419\":1}}],[\"并发访问数据库时\",{\"1\":{\"1082\":1,\"4115\":1}}],[\"并发事务时可能发生的现象也会不同\",{\"1\":{\"2838\":1,\"5216\":1}}],[\"并发给本地\",{\"1\":{\"2536\":1,\"5634\":1}}],[\"并发送请求给后者\",{\"1\":{\"2021\":1,\"4626\":1}}],[\"并发\",{\"1\":{\"1396\":1,\"1564\":1,\"1732\":1,\"1900\":1,\"4823\":1}}],[\"并发多个进程\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"并发读写\",{\"1\":{\"1257\":1,\"5449\":1}}],[\"并发清除\",{\"1\":{\"367\":1}}],[\"并发标记\",{\"1\":{\"365\":1,\"378\":1}}],[\"并形指的是垃圾收集器和用户程序同时执行\",{\"1\":{\"344\":1}}],[\"并将该节点设置为头结点\",{\"1\":{\"3066\":1,\"4420\":1}}],[\"并将其广播到所在的局域网中\",{\"1\":{\"2480\":1,\"5578\":1}}],[\"并将\",{\"1\":{\"2478\":1,\"5576\":1}}],[\"并将投票信息广播出去\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"并将它们移动到另一个幸存者空间\",{\"1\":{\"234\":1}}],[\"并将所有幸存者对象移动到一个幸存者空间中\",{\"1\":{\"233\":1}}],[\"并且双方都要保存好密钥\",{\"1\":{\"3653\":1}}],[\"并且不能接受数据丢失\",{\"1\":{\"3538\":1,\"5807\":1}}],[\"并且在数学建模比赛中担任队长并获得了陕西省一等奖\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"并且在需要修改的时候拿到实例修改其参数即可\",{\"1\":{\"3347\":1,\"4605\":1}}],[\"并且在尝试扩展的时候无法申请到足够的内存\",{\"1\":{\"209\":1}}],[\"并且持有锁的线程正在运行中\",{\"1\":{\"3256\":1}}],[\"并且保持锁的时间段\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"并且是\",{\"1\":{\"3128\":1,\"4410\":1}}],[\"并且是固定不变的\",{\"1\":{\"2390\":1}}],[\"并且当前标志是否等于预期标志\",{\"1\":{\"3117\":1,\"4400\":1}}],[\"并且原语的执行必须是连续的\",{\"1\":{\"3106\":1,\"4388\":1}}],[\"并且将共享资源设置为锁定状态\",{\"1\":{\"3070\":1,\"4424\":1}}],[\"并且每个元素的值小于\",{\"1\":{\"2953\":1,\"5331\":1}}],[\"并且小数点要占用一个字节\",{\"1\":{\"2889\":1,\"5267\":1}}],[\"并且锁定记录本身\",{\"1\":{\"2781\":1,\"2791\":1,\"5159\":1,\"5169\":1}}],[\"并且主键不能为\",{\"1\":{\"2618\":1,\"4996\":1}}],[\"并且多数浏览器在2015年底就支持了\",{\"1\":{\"2210\":1,\"2225\":1,\"2240\":1,\"2253\":1,\"2266\":1,\"2281\":1,\"5517\":1,\"5540\":1}}],[\"并且多次监测没有恢复的迹象\",{\"1\":{\"2074\":1,\"4679\":1}}],[\"并且自己的\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"并且返回结果\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"并且父进程还得知道子进程要将数据发送给哪个客户端\",{\"1\":{\"1491\":1,\"1659\":1,\"1827\":1,\"1995\":1,\"4918\":1}}],[\"并且c0订阅t0\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"并且其缓存查询到的对象都是通过序列化或者反序列化克隆的\",{\"1\":{\"1236\":1,\"4269\":1}}],[\"并且也不需要我们必须实现接口\",{\"1\":{\"843\":1,\"4052\":1}}],[\"并且可以不需要针对每个⽬标类都创建⼀个代理类\",{\"1\":{\"837\":1,\"4046\":1}}],[\"并且\",{\"1\":{\"535\":1,\"595\":1,\"2353\":1,\"2569\":1,\"2589\":1,\"2770\":1,\"2889\":1,\"2920\":1,\"2995\":1,\"4947\":1,\"4967\":1,\"5148\":1,\"5267\":1,\"5298\":1,\"5373\":1}}],[\"并且没有父级\",{\"1\":{\"402\":1,\"3857\":1}}],[\"并且由于内存分配算法和内存回收算法密切相关\",{\"1\":{\"262\":1}}],[\"并且对象年龄\",{\"1\":{\"258\":1}}],[\"并且堆无法再扩展时\",{\"1\":{\"229\":1}}],[\"并参与方法的调用和返回\",{\"1\":{\"204\":1}}],[\"它属于对称加密还是非对称加密\",{\"1\":{\"3438\":1}}],[\"它用来做什么\",{\"1\":{\"3382\":1,\"5662\":1}}],[\"它用来监视\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"它既不会抛弃任务\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"它保存着线程的引用\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"它保存方法的局部变量\",{\"1\":{\"204\":1}}],[\"它做的变更才能被其他事务看到\",{\"1\":{\"2833\":1,\"5211\":1}}],[\"它做的变更就能被其他事务看到\",{\"1\":{\"2832\":1,\"5210\":1}}],[\"它解决的是网络层地址和链路层地址之间的转换问题\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"它不是面向最终用户的\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"它不直接用于域名解析\",{\"1\":{\"2537\":1,\"5635\":1}}],[\"它不保证网络包的交付\",{\"1\":{\"2346\":1}}],[\"它不允许出现重复元素\",{\"1\":{\"701\":1}}],[\"它就会将自己的投票信息更改为\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"它就会不停地发短信通知你\",{\"1\":{\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"4817\":1}}],[\"它首先也会将投票选给自己\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"它首先不会自己去尝试加载这个类\",{\"1\":{\"425\":1,\"3882\":1}}],[\"它为每个其他的\",{\"1\":{\"2118\":1,\"4723\":1}}],[\"它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了\",{\"1\":{\"2085\":1,\"4690\":1}}],[\"它具有服务降级\",{\"1\":{\"2078\":1,\"4683\":1}}],[\"它只是将各家公司开发的比较成熟\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构\",{\"1\":{\"658\":1,\"3999\":1}}],[\"它利用spring\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"它俩负责的事情如下\",{\"1\":{\"1435\":1,\"1603\":1,\"1771\":1,\"1939\":1,\"4862\":1}}],[\"它才消停\",{\"1\":{\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"4817\":1}}],[\"它也不会再发送第二条短信提醒你\",{\"1\":{\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"4817\":1}}],[\"它也有一个对应的set接口的实现类linkedhashset\",{\"1\":{\"688\":1}}],[\"它还可以方便地实现进程\",{\"1\":{\"1362\":1,\"1530\":1,\"1698\":1,\"1866\":1,\"4789\":1}}],[\"它还提供\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"它会先暂停拥有偏向锁的线程\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"它会先将请求转发给父类加载器\",{\"1\":{\"422\":1,\"3879\":1}}],[\"它会反查生产者\",{\"1\":{\"2178\":1,\"4300\":1}}],[\"它会直接以\",{\"1\":{\"2126\":1,\"4731\":1}}],[\"它会首先\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"它会停止执行并等待其他线程到达屏障\",{\"1\":{\"1356\":1,\"1524\":1,\"1692\":1,\"1860\":1,\"4783\":1}}],[\"它允许同一时刻多个线程访问同一资源\",{\"1\":{\"1355\":1,\"1523\":1,\"1691\":1,\"1859\":1,\"4782\":1}}],[\"它有助于提高开发人员的生产力\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"它对数据库中数据的改变是持久的\",{\"1\":{\"1083\":1,\"4116\":1}}],[\"它通过如下方法计算得到key的最终哈希值\",{\"1\":{\"1029\":1}}],[\"它能确保接收端接收的网络包是无损坏\",{\"1\":{\"2347\":1}}],[\"它能够发送大量请求导致哈希碰撞\",{\"1\":{\"1018\":1}}],[\"它能保证任何一个节点的左右子树的高度差不会超过较矮的那棵的一倍\",{\"1\":{\"700\":1}}],[\"它们都是\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"它们的区别在于创建\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"它们的实现都依赖了动态代理\",{\"1\":{\"845\":1,\"4054\":1}}],[\"它们是通过\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"它们是如何减少\",{\"1\":{\"1402\":1,\"1570\":1,\"1738\":1,\"1906\":1,\"4829\":1}}],[\"它们具有相同的格式\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"它们才会一起继续执行\",{\"1\":{\"1356\":1,\"1524\":1,\"1692\":1,\"1860\":1,\"4783\":1}}],[\"它们就使用到了模板模式\",{\"1\":{\"1072\":1,\"4105\":1}}],[\"它们使用单向链表来存储相同索引值的元素\",{\"1\":{\"1017\":1}}],[\"它内部通过synchronized实现了线程安全\",{\"1\":{\"907\":1}}],[\"它内部的map的实现类是linkedhashmap\",{\"1\":{\"688\":1}}],[\"它包含有各种有关集合操作的静态多态方法\",{\"1\":{\"706\":1}}],[\"它包含在\",{\"1\":{\"272\":1}}],[\"它提供了对集合对象进行基本操作的通用接口方法\",{\"1\":{\"704\":1}}],[\"它基于treemap实现\",{\"1\":{\"685\":1}}],[\"它可以随时发送数据\",{\"1\":{\"2401\":1}}],[\"它可以替代前面的\",{\"1\":{\"1418\":1,\"1586\":1,\"1754\":1,\"1922\":1,\"4845\":1}}],[\"它可以帮助实现对程序内部运行情况的监控\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"它可以排序\",{\"1\":{\"683\":1}}],[\"它可在\",{\"1\":{\"656\":1,\"3997\":1}}],[\"它和普通的相对平衡的二叉搜索树的效率相同\",{\"1\":{\"670\":1,\"4012\":1}}],[\"它同时满足以下特性\",{\"1\":{\"660\":1,\"4001\":1}}],[\"它在每个节点增加了一个存储位记录节点的颜色\",{\"1\":{\"660\":1,\"4001\":1}}],[\"它在整个回收过程中耗时最长\",{\"1\":{\"365\":1}}],[\"它犯了面向对象设计领域的一个基本错误\",{\"1\":{\"546\":1}}],[\"它的下一层就是\",{\"1\":{\"2527\":1,\"5625\":1}}],[\"它的\",{\"1\":{\"2367\":1}}],[\"它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来\",{\"1\":{\"2095\":1,\"4700\":1}}],[\"它的前两个参数分别是目的端和源端的文件描述符\",{\"1\":{\"1417\":1,\"1585\":1,\"1753\":1,\"1921\":1,\"4844\":1}}],[\"它的每个方法中都加入了synchronize方法\",{\"1\":{\"892\":1}}],[\"它的特点是内部采用动态数组实现\",{\"1\":{\"708\":1}}],[\"它的时间复杂度o\",{\"1\":{\"671\":1,\"4013\":1}}],[\"它的操作效率就降低了\",{\"1\":{\"658\":1,\"3999\":1}}],[\"它的操作效率\",{\"1\":{\"658\":1,\"3999\":1}}],[\"它的搜索范围中没有找到所需的类\",{\"1\":{\"426\":1,\"3883\":1}}],[\"它的整个生命周期可以简单概括为\",{\"1\":{\"386\":1,\"3839\":1}}],[\"它的优点是简单高效\",{\"1\":{\"348\":1}}],[\"它被称为\",{\"1\":{\"356\":1}}],[\"它根据对象存活周期将内存划分为几块\",{\"1\":{\"337\":1}}],[\"它甚至可以直接使用本地处理器中的寄存器\",{\"1\":{\"219\":1}}],[\"它是消息摘要\",{\"1\":{\"3649\":1}}],[\"它是用两个数学相关的密钥对信息进行编码\",{\"1\":{\"3647\":1}}],[\"它是用来解决一级缓存不能跨会话共享数据的问题\",{\"1\":{\"1237\":1,\"4270\":1}}],[\"它是简单的\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"它是指对数据修改时持保守态度\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"它是构建锁或者其他同步组件的基础框架\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"它是域名解析结果的原出处\",{\"1\":{\"2541\":1,\"5639\":1}}],[\"它是针对\",{\"1\":{\"1212\":1,\"4245\":1}}],[\"它是hashmap的子类\",{\"1\":{\"1041\":1}}],[\"它是java最早实现的容器类之一\",{\"1\":{\"907\":1}}],[\"它是具备了某些特性的二叉搜索树\",{\"1\":{\"658\":1,\"3999\":1}}],[\"它是一个非常庞大的数据库\",{\"1\":{\"3607\":1}}],[\"它是一个64位long型\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"它是一条\",{\"1\":{\"3095\":1,\"4371\":1}}],[\"它是一种特殊的间隙锁\",{\"1\":{\"2799\":1,\"5177\":1}}],[\"它是一款面向服务端应用的垃圾收集器\",{\"1\":{\"373\":1}}],[\"它是一块很小的内存空间\",{\"1\":{\"197\":1}}],[\"它是\",{\"1\":{\"349\":1,\"351\":1}}],[\"它是单线程的收集器\",{\"1\":{\"347\":1}}],[\"它是唯一一个在\",{\"1\":{\"202\":1}}],[\"它是程序控制流的指示器\",{\"1\":{\"200\":1}}],[\"程序只是其中的一个线程而已\",{\"1\":{\"1457\":1,\"1625\":1,\"1793\":1,\"1961\":1,\"4884\":1}}],[\"程序是跑在\",{\"1\":{\"1457\":1,\"1625\":1,\"1793\":1,\"1961\":1,\"4884\":1}}],[\"程序会一直执行\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"程序就没办法继续往下执行\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"程序就不能编译通过\",{\"1\":{\"439\":1,\"3898\":1}}],[\"程序局部性原理表现为\",{\"1\":{\"1331\":1}}],[\"程序在判断需要创建哪些对象时更灵活\",{\"1\":{\"816\":1,\"4025\":1}}],[\"程序员是一个雇员\",{\"1\":{\"550\":1}}],[\"程序应该从逻辑角度尽可能避免这类异常的发生\",{\"1\":{\"436\":1,\"3895\":1}}],[\"程序中可以选择捕获处理\",{\"1\":{\"436\":1,\"3895\":1}}],[\"程序中无法处理的错误\",{\"1\":{\"433\":1,\"3892\":1}}],[\"程序本身可以捕获并且可以处理的异常\",{\"1\":{\"434\":1,\"3893\":1}}],[\"程序的稳定运行\",{\"1\":{\"428\":1,\"3885\":1}}],[\"程序的运行\",{\"1\":{\"204\":1}}],[\"程序又需要创建对象\",{\"1\":{\"264\":1}}],[\"程序计数器属于线程独享的工作内存\",{\"1\":{\"3136\":1,\"4448\":1}}],[\"程序计数器记录的是\",{\"1\":{\"199\":1}}],[\"程序计数器\",{\"1\":{\"187\":1}}],[\"ok\",{\"1\":{\"3567\":1}}],[\"one\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"only\",{\"1\":{\"2961\":1,\"2972\":1,\"3288\":1,\"4552\":1,\"5339\":1,\"5350\":1}}],[\"oltp\",{\"1\":{\"2894\":1,\"5272\":1}}],[\"oldvalue\",{\"1\":{\"786\":2,\"788\":2}}],[\"oldcapacity\",{\"1\":{\"763\":2,\"764\":2}}],[\"old\",{\"0\":{\"236\":1,\"357\":1,\"359\":1},\"1\":{\"889\":1}}],[\"opsf\",{\"1\":{\"2453\":1,\"2546\":1,\"5551\":1}}],[\"open\",{\"1\":{\"2453\":1,\"2546\":1,\"5551\":1}}],[\"openai\",{\"1\":{\"1\":1}}],[\"operand\",{\"1\":{\"213\":1}}],[\"observer\",{\"1\":{\"2113\":1,\"2116\":1,\"2117\":1,\"4718\":1,\"4721\":1,\"4722\":1}}],[\"observer观察者\",{\"1\":{\"2110\":1,\"4715\":1}}],[\"obj\",{\"1\":{\"774\":2,\"861\":2,\"4070\":2}}],[\"objectmonitor对象\",{\"1\":{\"3168\":1,\"4513\":1}}],[\"objectfactory<\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"objectoutputstream\",{\"1\":{\"749\":1,\"752\":2}}],[\"object\",{\"1\":{\"509\":2,\"752\":1,\"851\":1,\"853\":3,\"861\":3,\"958\":1,\"963\":1,\"968\":1,\"999\":1,\"1014\":1,\"1020\":1,\"1263\":2,\"3195\":1,\"3196\":1,\"3960\":2,\"4060\":1,\"4062\":3,\"4070\":3,\"4539\":1,\"4540\":1,\"5455\":2}}],[\"osi\",{\"0\":{\"2461\":1,\"2554\":1,\"5559\":1},\"1\":{\"2462\":1,\"5560\":1}}],[\"ospf\",{\"1\":{\"2453\":3,\"2546\":3,\"5551\":3}}],[\"os\",{\"1\":{\"1397\":1,\"1506\":1,\"1565\":1,\"1674\":1,\"1733\":1,\"1842\":1,\"1901\":1,\"2010\":1,\"4824\":1,\"4933\":1}}],[\"o处理完毕时\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"o请求时\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"or\",{\"1\":{\"2682\":2,\"3288\":2,\"4552\":2,\"5060\":2}}],[\"oriented\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"order\",{\"1\":{\"749\":2,\"2903\":1,\"5281\":1}}],[\"oracle\",{\"1\":{\"590\":1,\"1091\":1,\"4124\":1}}],[\"o\",{\"0\":{\"1372\":1,\"1540\":1,\"1708\":1,\"1876\":1,\"4799\":1,\"5835\":1},\"1\":{\"596\":2,\"597\":1,\"656\":1,\"1373\":1,\"1379\":1,\"1393\":3,\"1431\":1,\"1541\":1,\"1547\":1,\"1561\":3,\"1599\":1,\"1709\":1,\"1715\":1,\"1729\":3,\"1767\":1,\"1877\":1,\"1883\":1,\"1897\":3,\"1935\":1,\"2587\":1,\"2921\":3,\"2986\":1,\"3329\":4,\"3997\":1,\"4586\":4,\"4800\":1,\"4806\":1,\"4820\":3,\"4858\":1,\"4965\":1,\"5299\":3,\"5364\":1}}],[\"overflow\",{\"1\":{\"774\":1}}],[\"over\",{\"1\":{\"560\":1,\"2211\":1,\"2226\":1,\"2241\":1,\"2254\":1,\"2267\":1,\"2282\":1,\"2514\":1,\"3200\":1,\"5518\":1,\"5530\":1,\"5541\":1,\"5612\":1}}],[\"override\",{\"1\":{\"411\":1,\"1272\":1,\"3866\":1,\"5464\":1}}],[\"oop\",{\"1\":{\"560\":1,\"561\":1}}],[\"ood\",{\"1\":{\"547\":1}}],[\"oom\",{\"0\":{\"242\":1},\"1\":{\"250\":1,\"270\":1,\"3310\":1,\"3342\":1,\"3343\":1,\"3344\":1,\"4575\":1,\"4599\":1,\"4600\":1,\"4601\":1}}],[\"offset\",{\"1\":{\"1416\":1,\"1584\":1,\"1752\":1,\"1920\":1,\"3465\":3,\"3466\":2,\"3468\":3,\"4843\":1,\"5734\":3,\"5735\":2,\"5737\":3}}],[\"off\",{\"1\":{\"1416\":1,\"1584\":1,\"1752\":1,\"1920\":1,\"4843\":1}}],[\"offer\",{\"1\":{\"576\":1,\"601\":2,\"744\":1}}],[\"of\",{\"1\":{\"411\":1,\"749\":3,\"752\":2,\"1014\":1,\"2516\":1,\"2997\":1,\"3288\":4,\"3356\":1,\"3357\":1,\"3358\":1,\"3359\":1,\"3360\":1,\"3866\":1,\"4552\":4,\"5375\":1,\"5614\":1}}],[\"outofboundsmsg\",{\"1\":{\"778\":1}}],[\"outofmemoryerror\",{\"1\":{\"202\":1,\"229\":1,\"246\":1,\"281\":1,\"292\":1}}],[\"out\",{\"1\":{\"251\":4,\"457\":1,\"463\":2,\"601\":2,\"749\":3,\"925\":2,\"930\":3,\"943\":8,\"1365\":1,\"1416\":1,\"1533\":1,\"1584\":1,\"1701\":1,\"1752\":1,\"1869\":1,\"1920\":1,\"2997\":1,\"3163\":1,\"3174\":1,\"3200\":2,\"4507\":1,\"4518\":1,\"4792\":1,\"4843\":1,\"5375\":1}}],[\"循环次数\",{\"1\":{\"3255\":1,\"4484\":1}}],[\"循环时间\",{\"1\":{\"3255\":1,\"4484\":1}}],[\"循环使用所有片段\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"循环依赖的本质是一样的\",{\"1\":{\"1113\":1,\"4146\":1}}],[\"循环依赖的概念\",{\"1\":{\"1110\":1,\"4143\":1}}],[\"循环依赖分为三种\",{\"1\":{\"1112\":1,\"4145\":1}}],[\"循环后存活下来的对象被移动到老年代\",{\"1\":{\"235\":1}}],[\"循环\",{\"1\":{\"200\":1}}],[\"分数排序\",{\"1\":{\"3518\":1,\"5787\":1}}],[\"分钟后\",{\"1\":{\"2992\":1,\"5370\":1}}],[\"分钟\",{\"1\":{\"2471\":1,\"2992\":1,\"3019\":1,\"5370\":1,\"5397\":1,\"5569\":1}}],[\"分片不同\",{\"1\":{\"2394\":1}}],[\"分片的核心思路在于\",{\"1\":{\"2197\":1,\"4319\":1}}],[\"分组有两类\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"分组是一种特殊报文\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"分组\",{\"1\":{\"2353\":1}}],[\"分表的数据\",{\"0\":{\"2187\":1,\"4309\":1}}],[\"分多个线程分批\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"分批操作\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"分布式锁解决集群下的方法抢占执行\",{\"0\":{\"3539\":1,\"5808\":1},\"1\":{\"3447\":1,\"5716\":1}}],[\"分布式锁\",{\"1\":{\"2926\":1,\"3542\":1,\"5304\":1,\"5811\":1}}],[\"分布式锁和分布式队列等功能\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"分布式系统理论上不可能选择\",{\"1\":{\"2157\":1,\"4762\":1}}],[\"分布式系统中\",{\"1\":{\"2152\":1,\"4757\":1}}],[\"分布式系统出现网络分区的时候\",{\"1\":{\"2150\":1,\"4755\":1}}],[\"分布式系统开发的成本高\",{\"1\":{\"2064\":1,\"4669\":1}}],[\"分布式协调\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"分布式服务追踪\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"分布式配置中心\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"分布式事务等\",{\"1\":{\"2064\":1,\"4669\":1}}],[\"分布式事物\",{\"1\":{\"2053\":1,\"4658\":1}}],[\"分布式\",{\"0\":{\"5849\":1},\"1\":{\"2034\":1,\"4639\":1}}],[\"分享\",{\"1\":{\"2017\":1,\"4622\":1}}],[\"分区\",{\"1\":{\"2158\":1,\"3465\":2,\"4763\":1,\"5734\":2}}],[\"分区容忍性三者你只能同时达到其中两个\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"分区容错性\",{\"1\":{\"2145\":1,\"2150\":1,\"4750\":1,\"4755\":1}}],[\"分区容错也使得系统更加健壮\",{\"1\":{\"2050\":1,\"4655\":1}}],[\"分区的分配尽量的均衡\",{\"1\":{\"1287\":1,\"5479\":1}}],[\"分区的原则\",{\"1\":{\"1259\":1,\"5451\":1}}],[\"分区分配的算法如下\",{\"1\":{\"1271\":1,\"5463\":1}}],[\"分区分配策略\",{\"1\":{\"1265\":1,\"5457\":1}}],[\"分区策略使用一致性哈希\",{\"1\":{\"2188\":1,\"4310\":1}}],[\"分区策略\",{\"0\":{\"1253\":1,\"5445\":1}}],[\"分区被划分为若干个片段\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"分页插件的基本原理是使用\",{\"1\":{\"1215\":1,\"4248\":1}}],[\"分页插件的原理是什么\",{\"0\":{\"1210\":1,\"4243\":1}}],[\"分别放到数据库中\",{\"1\":{\"3631\":1}}],[\"分别指向直接的的前驱节点和后继节点\",{\"1\":{\"3069\":1,\"4423\":1}}],[\"分别如下\",{\"1\":{\"2805\":1,\"5183\":1}}],[\"分别的应用场景是\",{\"0\":{\"2373\":1},\"1\":{\"2300\":1}}],[\"分别是\",{\"1\":{\"2104\":1,\"2114\":1,\"2134\":1,\"4709\":1,\"4719\":1,\"4739\":1}}],[\"分别是边缘触发\",{\"1\":{\"1386\":1,\"1554\":1,\"1722\":1,\"1890\":1,\"4813\":1}}],[\"分别介绍这三个经典的\",{\"1\":{\"1454\":1,\"1622\":1,\"1790\":1,\"1958\":1,\"4881\":1}}],[\"分别拥有1\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"分别输出\",{\"1\":{\"931\":1}}],[\"分别执行以上3段代码\",{\"1\":{\"931\":1}}],[\"分别到一个文本文件中去\",{\"1\":{\"756\":1}}],[\"分为两种\",{\"1\":{\"2872\":1,\"5250\":1}}],[\"分为两个步骤\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"分为三大类\",{\"1\":{\"815\":1,\"4024\":1}}],[\"分为以下四个流程\",{\"1\":{\"363\":1}}],[\"分析出\",{\"1\":{\"2491\":1,\"5589\":1}}],[\"分析完indexfor方法后\",{\"1\":{\"982\":1}}],[\"分析\",{\"1\":{\"757\":1}}],[\"分配结果\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"分配到的分区数量\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"分配分区的起始位置\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"分配示意图如下\",{\"1\":{\"1269\":1,\"5461\":1}}],[\"分配一个较大的初始值属于最佳实践\",{\"1\":{\"745\":1}}],[\"分配给虚拟机管理的内存一般来说不会很大\",{\"1\":{\"349\":1}}],[\"分代的唯一理由就是优化\",{\"1\":{\"224\":1}}],[\"分支结点可以只有一个分支\",{\"1\":{\"628\":1}}],[\"分支结点\",{\"1\":{\"628\":1}}],[\"分支\",{\"1\":{\"200\":1}}],[\"分类为\",{\"1\":{\"120\":1,\"3774\":1}}],[\"也还有效\",{\"1\":{\"3558\":1,\"5827\":1}}],[\"也有人叫它排他锁\",{\"1\":{\"3258\":1,\"4486\":1}}],[\"也有很多问题\",{\"1\":{\"3110\":1,\"3129\":1,\"4392\":1,\"4411\":1}}],[\"也有这样的能力\",{\"1\":{\"542\":1}}],[\"也按相同的搜索条件也是查询出了\",{\"1\":{\"2827\":1,\"5205\":1}}],[\"也从数据库中读取小林的余额数据\",{\"1\":{\"2818\":1,\"5196\":1}}],[\"也正是这样\",{\"1\":{\"2804\":1,\"5182\":1}}],[\"也正是因为继承了这个依赖\",{\"1\":{\"1189\":1,\"4222\":1}}],[\"也属于间隙锁\",{\"1\":{\"2801\":1,\"5179\":1}}],[\"也包含间隙锁\",{\"1\":{\"2797\":1,\"5175\":1}}],[\"也包括到运行期解析后才能够获得的方法或字段引用\",{\"1\":{\"290\":1}}],[\"也执行了同样的\",{\"1\":{\"2734\":1,\"5112\":1}}],[\"也叫做递归锁\",{\"1\":{\"3247\":1,\"4477\":1}}],[\"也叫\",{\"1\":{\"2652\":1,\"5030\":1}}],[\"也叫散列算法\",{\"1\":{\"2588\":1,\"4966\":1}}],[\"也无需回表\",{\"1\":{\"2650\":1,\"5028\":1}}],[\"也无法通过虚引用取得一个对象\",{\"1\":{\"320\":1}}],[\"也支持了全文索引\",{\"1\":{\"2628\":1,\"5006\":1}}],[\"也存放\",{\"1\":{\"2594\":1,\"4972\":1}}],[\"也同样在传输层组装\",{\"1\":{\"2395\":1}}],[\"也不是非对称加密算法\",{\"1\":{\"3649\":1}}],[\"也不是万能的\",{\"1\":{\"3129\":1,\"4411\":1}}],[\"也不会抛出异常\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"也不会影响备份数据库时的\",{\"1\":{\"2702\":1,\"5080\":1}}],[\"也不会影响\",{\"1\":{\"2387\":1}}],[\"也不存在于数据库中\",{\"1\":{\"3015\":1,\"3039\":1,\"5393\":1,\"5417\":1}}],[\"也不可以对该记录加\",{\"1\":{\"2785\":1,\"5163\":1}}],[\"也不建议使用非单调的字段作为主键\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"也不保证网络包中的数据的完整性\",{\"1\":{\"2346\":1}}],[\"也不用担心多进程竞争\",{\"1\":{\"1470\":1,\"1638\":1,\"1806\":1,\"1974\":1,\"4897\":1}}],[\"也随之变为\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"也会释放所有表锁\",{\"1\":{\"2720\":1,\"5098\":1}}],[\"也会限制本线程接下来的读写操作\",{\"1\":{\"2716\":1,\"5094\":1}}],[\"也会将自己服务器设置为\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"也会编译通过\",{\"1\":{\"437\":1,\"3896\":1}}],[\"也依然只苏醒一次\",{\"1\":{\"1388\":1,\"1556\":1,\"1724\":1,\"1892\":1,\"4815\":1}}],[\"也没有key的情况下\",{\"1\":{\"1262\":1,\"5454\":1}}],[\"也没有用throws子句声明抛出它\",{\"1\":{\"437\":1,\"3896\":1}}],[\"也容易出错\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"也对它的解决方案可以上手的例子\",{\"1\":{\"1136\":1,\"4169\":1}}],[\"也创建完整了\",{\"1\":{\"1118\":1,\"4151\":1}}],[\"也可是是this\",{\"1\":{\"3162\":1}}],[\"也可能开启一个新事务\",{\"1\":{\"1097\":1,\"4130\":1}}],[\"也可以通过构造器来显式的指定使用公平锁\",{\"1\":{\"3216\":1,\"4340\":1}}],[\"也可以用来存储对象以及购物车\",{\"1\":{\"2949\":1,\"5327\":1}}],[\"也可以自行搜索\",{\"1\":{\"2624\":1,\"5002\":1}}],[\"也可以有一个\",{\"1\":{\"2415\":1}}],[\"也可以有多个\",{\"1\":{\"1439\":1,\"1607\":1,\"1775\":1,\"1943\":1,\"4866\":1}}],[\"也可以按消息的类型读取\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"也可以使用分页插件来完成物理分页\",{\"1\":{\"1214\":1,\"4247\":1}}],[\"也可以使用collections\",{\"1\":{\"767\":1}}],[\"也可以是自定义的锁\",{\"1\":{\"3162\":1}}],[\"也可以是多个进程\",{\"1\":{\"1440\":1,\"1608\":1,\"1776\":1,\"1944\":1,\"4867\":1}}],[\"也可以是black\",{\"1\":{\"660\":1,\"4001\":1}}],[\"也可以是可扩展的\",{\"1\":{\"229\":1}}],[\"也可以不处理\",{\"1\":{\"436\":1,\"3895\":1}}],[\"也经常用于键已经排好序的场景\",{\"1\":{\"1041\":1}}],[\"也能了解到不少知识\",{\"1\":{\"897\":1}}],[\"也就找到了对应的\",{\"1\":{\"2588\":1,\"4966\":1}}],[\"也就说\",{\"1\":{\"2566\":1,\"4944\":1}}],[\"也就说不需要保证\",{\"1\":{\"2160\":1,\"4765\":1}}],[\"也就无从知道主机\",{\"1\":{\"2479\":1,\"5577\":1}}],[\"也就减少了\",{\"1\":{\"1418\":1,\"1586\":1,\"1754\":1,\"1922\":1,\"4845\":1}}],[\"也就只能基于\",{\"1\":{\"579\":1}}],[\"也就是线程\",{\"1\":{\"3317\":1}}],[\"也就是直接在调用execute方法的线程中运行\",{\"1\":{\"3302\":1,\"4567\":1}}],[\"也就是我们常说的乐观锁\",{\"1\":{\"3222\":1,\"4346\":1}}],[\"也就是我们要研究的异常表\",{\"1\":{\"469\":1,\"3920\":1}}],[\"也就是加密密钥能够从解密密钥中推算出来\",{\"1\":{\"3645\":1}}],[\"也就是加\",{\"1\":{\"3170\":1,\"4515\":1}}],[\"也就是fifo双向队列\",{\"1\":{\"3068\":1,\"4422\":1}}],[\"也就是它随时可能发生回滚操作\",{\"1\":{\"2819\":1,\"5197\":1}}],[\"也就是仅仅把一条记录锁上\",{\"1\":{\"2779\":1,\"5157\":1}}],[\"也就是写锁\",{\"1\":{\"2715\":1,\"5093\":1}}],[\"也就是读锁\",{\"1\":{\"2715\":1,\"5093\":1}}],[\"也就是要通过主键再查找一次\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"也就是客户端的\",{\"1\":{\"2536\":1,\"5634\":1}}],[\"也就是服务端单机最大\",{\"1\":{\"2371\":1}}],[\"也就是一对多是无法做到的\",{\"1\":{\"2351\":1}}],[\"也就是经典的\",{\"1\":{\"1396\":1,\"1564\":1,\"1732\":1,\"1900\":1,\"4823\":1}}],[\"也就是常说的round\",{\"1\":{\"1262\":1,\"5454\":1}}],[\"也就是\",{\"1\":{\"996\":1,\"2145\":1,\"2527\":1,\"2735\":1,\"2744\":1,\"3480\":1,\"4750\":1,\"5113\":1,\"5122\":1,\"5625\":1,\"5749\":1}}],[\"也就是余数\",{\"1\":{\"976\":1}}],[\"也就是hash方法的输入应该是个object类型的key\",{\"1\":{\"962\":1}}],[\"也就是定义⼀个抽象⼯⼚\",{\"1\":{\"829\":1,\"4038\":1}}],[\"也就是使用\",{\"1\":{\"604\":1}}],[\"也就是都需要进行一次\",{\"1\":{\"599\":1}}],[\"也就是基于动态数组的实现\",{\"1\":{\"595\":1}}],[\"也就是可以以此为基础\",{\"1\":{\"583\":1}}],[\"也就是说就算两个md5值非常相似\",{\"1\":{\"3586\":1}}],[\"也就是说当内存不足以容纳新写入数据时\",{\"1\":{\"3007\":1,\"5385\":1}}],[\"也就是说当网络分区之后\",{\"1\":{\"2155\":1,\"4760\":1}}],[\"也就是说如果本线程对学生表加了\",{\"1\":{\"2717\":1,\"5095\":1}}],[\"也就是说分区容错性\",{\"1\":{\"2155\":1,\"4760\":1}}],[\"也就是说全程没有通过\",{\"1\":{\"1427\":1,\"1595\":1,\"1763\":1,\"1931\":1,\"4854\":1}}],[\"也就是说\",{\"1\":{\"398\":1,\"399\":1,\"437\":1,\"443\":1,\"710\":1,\"854\":1,\"932\":1,\"973\":1,\"988\":1,\"1000\":1,\"1005\":1,\"1095\":1,\"2481\":1,\"2484\":1,\"2622\":1,\"2808\":1,\"2838\":1,\"3106\":1,\"3310\":1,\"3853\":1,\"3854\":1,\"3896\":1,\"3902\":1,\"4063\":1,\"4128\":1,\"4388\":1,\"4575\":1,\"5000\":1,\"5186\":1,\"5216\":1,\"5579\":1,\"5582\":1}}],[\"也就是说它以串行的方式执行\",{\"1\":{\"346\":1}}],[\"也就是说它只能存活到下一次垃圾回收发生之前\",{\"1\":{\"317\":1}}],[\"也就是借用老年代的空间存储放不下的对象\",{\"1\":{\"335\":1}}],[\"也就是所谓的当前方法\",{\"1\":{\"199\":1}}],[\"也推荐使用\",{\"1\":{\"535\":1}}],[\"也保证了\",{\"1\":{\"428\":1,\"3885\":1}}],[\"也是可以对记录加共享锁和独占锁的\",{\"1\":{\"2746\":1,\"5124\":1}}],[\"也是明确规定禁止使用外键的\",{\"1\":{\"2573\":1,\"4951\":1}}],[\"也是一个完整对象了\",{\"1\":{\"1129\":1,\"4162\":1}}],[\"也是面向对象讲解的重点\",{\"1\":{\"561\":1}}],[\"也是给\",{\"1\":{\"358\":1}}],[\"也是运行速度最快的存储区域\",{\"1\":{\"197\":1}}],[\"也比较难发生oom\",{\"1\":{\"283\":1}}],[\"任务模块是一个通用的模块\",{\"1\":{\"3526\":1,\"5795\":1}}],[\"任务会被保存在一个任务队列中\",{\"1\":{\"3333\":1,\"4590\":1}}],[\"任务的执行\",{\"1\":{\"3318\":1}}],[\"任务队列最大长度为\",{\"1\":{\"3342\":1,\"3344\":1,\"4599\":1,\"4601\":1}}],[\"任务队列已经满了\",{\"1\":{\"3315\":1,\"4580\":1}}],[\"任务队列中存放的任务达到队列容量的时候\",{\"1\":{\"3291\":1,\"4555\":1}}],[\"任务队列未达到队列容量时\",{\"1\":{\"3290\":1,\"4554\":1}}],[\"任务可以不需要等到线程创建就能立即执行\",{\"1\":{\"3282\":1,\"4546\":1}}],[\"任务列表\",{\"0\":{\"75\":1,\"3729\":1}}],[\"任何需要延迟得任务都可以调用该服务\",{\"1\":{\"3522\":1,\"5791\":1}}],[\"任何线程对其进行操作都是在主内存中进行的\",{\"1\":{\"3139\":1,\"4452\":1}}],[\"任何查找都是从根节点到叶子节点的过程\",{\"1\":{\"2596\":1,\"4974\":1}}],[\"任何\",{\"1\":{\"2533\":1,\"5631\":1}}],[\"任何时候都有一个条件不满足\",{\"1\":{\"2204\":1,\"4326\":1}}],[\"任何时间一个线程都只有一个方法在执行\",{\"1\":{\"199\":1}}],[\"在数据传送前\",{\"1\":{\"3653\":1}}],[\"在数据库中存储文件会严重影响数据库性能\",{\"1\":{\"2882\":1,\"5260\":1}}],[\"在大多数对称算法中\",{\"1\":{\"3645\":1}}],[\"在大多数情况下\",{\"1\":{\"2673\":1,\"5051\":1}}],[\"在密码学的应用和研究中\",{\"1\":{\"3642\":1}}],[\"在当时计算机的计算能力下\",{\"1\":{\"3589\":1}}],[\"在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"在添加zset数据的时候\",{\"1\":{\"3525\":1,\"5794\":1}}],[\"在添加和删除元素时具有比arraylist更好的性能\",{\"1\":{\"740\":1}}],[\"在文章审核成功以后需要在app的article库中新增文章数据\",{\"1\":{\"3513\":1,\"5782\":1}}],[\"在模板中\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"在网关微服务中新建全局过滤器\",{\"1\":{\"3498\":1,\"5767\":1}}],[\"在认证过滤器中需要用到jwt的解析\",{\"1\":{\"3496\":1,\"5765\":1}}],[\"在自媒体引导类中使用\",{\"1\":{\"3507\":1,\"5776\":1}}],[\"在自媒体端\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"在自动审核的方法上加上\",{\"1\":{\"3507\":1,\"5776\":1}}],[\"在自己的\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"在用户端\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"在那我俩喂喂喂了好几声\",{\"1\":{\"3404\":1,\"5684\":1}}],[\"在操作数据时非常乐观\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"在轻量级锁状态下继续锁竞争\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"在线程进入和退出同步块时不再通过\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"在线程1要提交更新之前\",{\"1\":{\"3099\":1,\"4377\":1}}],[\"在执行\",{\"1\":{\"3171\":1,\"4516\":1}}],[\"在执行monitorenter时\",{\"1\":{\"3170\":1,\"4515\":1}}],[\"在执行过程中不允许被中断\",{\"1\":{\"3106\":1,\"4388\":1}}],[\"在应用sychronized关键字时需要把握如下注意点\",{\"1\":{\"3157\":1}}],[\"在指令后插入store\",{\"1\":{\"3146\":1,\"4458\":1}}],[\"在指令前插入load\",{\"1\":{\"3145\":1,\"4457\":1}}],[\"在变量前加版本号\",{\"1\":{\"3115\":1,\"4397\":1}}],[\"在sun\",{\"1\":{\"3107\":1,\"4389\":1}}],[\"在spring程序main方法中\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"在同步队列中的节点通过自旋的操作不断去获取同步状态\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"在同步队列中\",{\"1\":{\"3073\":1,\"4428\":1}}],[\"在同一连接上可以同时传输多个请求和响应\",{\"1\":{\"2509\":1,\"5607\":1}}],[\"在同一个事务中\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"在同一个子网内\",{\"1\":{\"2492\":1,\"5590\":1}}],[\"在同一个\",{\"1\":{\"1221\":1,\"4254\":1}}],[\"在同一个版本的jdk中\",{\"1\":{\"961\":1}}],[\"在位数组中把对应下标的值置为\",{\"1\":{\"3027\":1,\"5405\":1}}],[\"在键空间中\",{\"1\":{\"3005\":1,\"3010\":1,\"5383\":1,\"5388\":1}}],[\"在60秒\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"在300秒\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"在900秒\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"在拼接字符串之前会检查\",{\"1\":{\"2922\":1,\"5300\":1}}],[\"在计算机信息安全领域\",{\"1\":{\"3642\":1}}],[\"在计算机科学中\",{\"1\":{\"641\":1}}],[\"在计算时不会丢失精度\",{\"1\":{\"2889\":1,\"5267\":1}}],[\"在银行分别有\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"在此系统中\",{\"1\":{\"3647\":1}}],[\"在此期间会生成一个插入意向锁\",{\"1\":{\"2798\":1,\"5176\":1}}],[\"在此基础上\",{\"1\":{\"2156\":1,\"4761\":1}}],[\"在插入数据时\",{\"1\":{\"2757\":1,\"5135\":1}}],[\"在插件的拦截方法内拦截待执行的\",{\"1\":{\"1215\":1,\"4248\":1}}],[\"在备份数据库时就要使用全局锁的方法\",{\"1\":{\"2705\":1,\"5083\":1}}],[\"在索引列上进行计算\",{\"1\":{\"2680\":1,\"5058\":1}}],[\"在索引检索的时候\",{\"1\":{\"2598\":1,\"4976\":1}}],[\"在设计表的时候\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"在根据辅助索引查找时\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"在根据主索引搜索时\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"在业务代码中进行约束即可\",{\"1\":{\"2572\":1,\"4950\":1}}],[\"在并发编程中我们都知道i++操作是非线程安全的\",{\"1\":{\"3090\":1,\"4366\":1}}],[\"在并发写的时候\",{\"1\":{\"2566\":1,\"4944\":1}}],[\"在并发场景下\",{\"1\":{\"869\":1,\"3977\":1}}],[\"在域名中\",{\"1\":{\"2525\":1,\"5623\":1}}],[\"在一个事务内多次查询某个符合查询条件的\",{\"1\":{\"2825\":1,\"5203\":1}}],[\"在一个事务内多次读取同一个数据\",{\"1\":{\"2821\":1,\"5199\":1}}],[\"在一个局域网内\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"在一定程度上解决了队头阻塞\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"在其上实现热静态资源缓存\",{\"1\":{\"3555\":1,\"5824\":1}}],[\"在其基础上新增了很多功能比如加密\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"在其他语言中也有应用\",{\"1\":{\"1047\":1,\"4080\":1}}],[\"在处理多个请求时更加高效\",{\"1\":{\"2509\":1,\"5607\":1}}],[\"在处理海量数据为什么这么快的原因之一\",{\"1\":{\"1431\":1,\"1599\":1,\"1767\":1,\"1935\":1,\"4858\":1}}],[\"在请求大资源前的预热请求\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"在讨论\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"在该局域网内\",{\"1\":{\"2478\":1,\"5576\":1}}],[\"在建立连接时由计算机生成的随机数作为其初始值\",{\"1\":{\"2338\":1}}],[\"在空跑\",{\"1\":{\"2204\":1,\"4326\":1}}],[\"在理论计算机科学中\",{\"1\":{\"2147\":1,\"4752\":1}}],[\"在收到\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"在选举过程中会参与投票\",{\"1\":{\"2112\":1,\"4717\":1}}],[\"在介绍\",{\"1\":{\"2110\":1,\"4715\":1}}],[\"在解决分布式数据一致性问题时并没有直接使用\",{\"1\":{\"2108\":1,\"4713\":1}}],[\"在微服务启动时\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"在服务发生调用时\",{\"1\":{\"2083\":1,\"4688\":1}}],[\"在分布式系统\",{\"1\":{\"2078\":1,\"4683\":1}}],[\"在分布式服务或者微服务架构下\",{\"1\":{\"1230\":1,\"4263\":1}}],[\"在面对瞬间高并发的场景时\",{\"1\":{\"1493\":1,\"1661\":1,\"1829\":1,\"1997\":1,\"4920\":1}}],[\"在前面我们知道\",{\"1\":{\"1404\":1,\"1572\":1,\"1740\":1,\"1908\":1,\"4831\":1}}],[\"在获取事件时\",{\"1\":{\"1376\":1,\"1544\":1,\"1712\":1,\"1880\":1,\"4803\":1}}],[\"在进程\",{\"1\":{\"1358\":1,\"1526\":1,\"1694\":1,\"1862\":1,\"4785\":1}}],[\"在每个volatile读操作的后面插入一个loadstore屏障\",{\"1\":{\"3152\":1,\"4465\":1}}],[\"在每个volatile读操作的后面插入一个loadload屏障\",{\"1\":{\"3151\":1,\"4464\":1}}],[\"在每个volatile写操作的后面插入一个storeload屏障\",{\"1\":{\"3150\":1,\"4463\":1}}],[\"在每个volatile写操作的前面插入一个storestore屏障\",{\"1\":{\"3149\":1,\"4462\":1}}],[\"在每个新的producer初始化时\",{\"1\":{\"1302\":1,\"5494\":1}}],[\"在每次循环中都会用到\",{\"1\":{\"1335\":1}}],[\"在了解这部分知识之前\",{\"1\":{\"1329\":1}}],[\"在kafka中有一个partition\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"在broker往leader分区写入消息时\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"在任何时刻\",{\"1\":{\"1249\":1,\"5441\":1}}],[\"在yml中添加以下代码\",{\"1\":{\"1224\":1,\"4257\":1}}],[\"在配置文件中配置编写的插件\",{\"1\":{\"1218\":1,\"4251\":1}}],[\"在使用\",{\"1\":{\"2703\":1,\"2742\":1,\"2743\":1,\"5081\":1,\"5120\":1,\"5121\":1}}],[\"在使用联合索引时\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"在使用之前需要引入`spring\",{\"1\":{\"1178\":1,\"4211\":1}}],[\"在使用synchronizedlist进行遍历的时候要手动加锁\",{\"1\":{\"804\":1}}],[\"在方法上加\",{\"1\":{\"1175\":1,\"4208\":1}}],[\"在方法中声明一个异常\",{\"1\":{\"448\":1,\"3907\":1}}],[\"在application\",{\"1\":{\"1174\":1,\"4207\":1}}],[\"在发布它的第一个版本时没有这个功能\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"在补充对象的\",{\"1\":{\"1129\":1,\"4162\":1}}],[\"在通过递归把\",{\"1\":{\"1118\":1,\"4151\":1}}],[\"在创建半成品对象后存放到缓存中\",{\"1\":{\"1128\":1,\"4161\":1}}],[\"在创建\",{\"1\":{\"1118\":1,\"4151\":1}}],[\"在创建对象的同时隐藏创建逻辑\",{\"1\":{\"816\":1,\"4025\":1}}],[\"在填充属性\",{\"1\":{\"1133\":1,\"4166\":1}}],[\"在填充\",{\"1\":{\"1059\":1,\"4092\":1}}],[\"在树平衡的情况下\",{\"1\":{\"1038\":1}}],[\"在最坏的情况下\",{\"1\":{\"1017\":1}}],[\"在取模计算时\",{\"1\":{\"1011\":1}}],[\"在对表结构变更前\",{\"1\":{\"2739\":1,\"5117\":1}}],[\"在对数组长度进行按位与运算后得到的结果相同\",{\"1\":{\"985\":1}}],[\"在对hashmap进行插入\",{\"1\":{\"983\":1}}],[\"在深入分析之前\",{\"1\":{\"982\":1}}],[\"在具体实现上\",{\"1\":{\"963\":1}}],[\"在具体实践中\",{\"1\":{\"561\":1}}],[\"在上代码之前\",{\"1\":{\"962\":1}}],[\"在上述实现中\",{\"1\":{\"572\":1}}],[\"在不同的版本的jdk中\",{\"1\":{\"961\":1}}],[\"在不需要并发安全的场景中\",{\"1\":{\"908\":1}}],[\"在初始化hashmap的时候\",{\"1\":{\"934\":1}}],[\"在高并发的场景中\",{\"1\":{\"908\":1}}],[\"在hashmap中\",{\"1\":{\"908\":1,\"939\":1}}],[\"在hashset中\",{\"1\":{\"699\":1}}],[\"在jdk\",{\"1\":{\"3256\":1}}],[\"在jdk1\",{\"1\":{\"1021\":1}}],[\"在jdk8及以后的版本中\",{\"1\":{\"896\":1}}],[\"在java语言中可以使用\",{\"1\":{\"3091\":1,\"4367\":1}}],[\"在java\",{\"1\":{\"1017\":1,\"1023\":1}}],[\"在java的set体系中\",{\"1\":{\"696\":1}}],[\"在java中\",{\"1\":{\"448\":1,\"954\":1,\"3907\":1}}],[\"在我们的日常使用当中\",{\"1\":{\"893\":1}}],[\"在检索的时候效率差不多\",{\"1\":{\"875\":1,\"3983\":1}}],[\"在桶中元素量较小时没有这个必要\",{\"1\":{\"873\":1,\"3981\":1}}],[\"在锁定的对象区别上\",{\"1\":{\"802\":1}}],[\"在中间插入\",{\"1\":{\"719\":1}}],[\"在两端添加\",{\"1\":{\"718\":1,\"724\":1}}],[\"在内存地址v中存储着变量值为\",{\"1\":{\"3097\":1,\"4373\":1}}],[\"在内存中生成一个代表该类的\",{\"1\":{\"396\":1,\"3851\":1}}],[\"在内部\",{\"1\":{\"2856\":1,\"5234\":1}}],[\"在内部实现中\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"在内部实现上\",{\"1\":{\"685\":1}}],[\"在内核中是两个完全独立的软件模块\",{\"1\":{\"2413\":1}}],[\"在内核里使用红黑树来跟踪进程所有待检测的文件描述字\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"在二叉树的第i层上至多有2i\",{\"1\":{\"644\":1}}],[\"在实践中\",{\"1\":{\"605\":1}}],[\"在实际的工程应用上\",{\"1\":{\"591\":1}}],[\"在触发扩容的时候\",{\"1\":{\"596\":1}}],[\"在底层实现上\",{\"1\":{\"595\":1}}],[\"在真实的世界中\",{\"1\":{\"559\":1}}],[\"在这种饱和策略下\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"在这个接口的一次调用流程中\",{\"1\":{\"3568\":1}}],[\"在这个时间差内\",{\"1\":{\"3137\":1,\"4450\":1}}],[\"在这个例子中\",{\"1\":{\"558\":1}}],[\"在这过程中如果事务\",{\"1\":{\"2823\":1,\"5201\":1}}],[\"在这里插入图片描述\",{\"1\":{\"1152\":1,\"1225\":1,\"1227\":1,\"1231\":1,\"1241\":1,\"1301\":1,\"2088\":1,\"4185\":1,\"4258\":1,\"4260\":1,\"4264\":1,\"4274\":1,\"4693\":1,\"5493\":1}}],[\"在这里\",{\"1\":{\"557\":1}}],[\"在运行时构造一个类的实例化对象\",{\"1\":{\"494\":1,\"3945\":1}}],[\"在运行时获取一个类的所有信息\",{\"1\":{\"494\":1,\"3945\":1}}],[\"在运行时获取一个类的\",{\"1\":{\"494\":1,\"3945\":1}}],[\"在父类加载器没有找到所请求的类的情况下\",{\"1\":{\"422\":1,\"3879\":1}}],[\"在加载时调用\",{\"1\":{\"408\":1,\"3863\":1}}],[\"在加载类和结构到虚拟机后\",{\"1\":{\"287\":1}}],[\"在类加载的时候\",{\"1\":{\"399\":1,\"424\":1,\"3854\":1,\"3881\":1}}],[\"在多个事务对这条记录进行读写操作时\",{\"1\":{\"2835\":1,\"5213\":1}}],[\"在多线程并发的环境下\",{\"1\":{\"892\":1,\"893\":1}}],[\"在多线程的场景中可以直接使用vector类\",{\"1\":{\"767\":1}}],[\"在多\",{\"1\":{\"373\":1}}],[\"在整个过程中耗时最长的并发标记和并发清除过程中\",{\"1\":{\"368\":1}}],[\"在回收时\",{\"1\":{\"334\":1}}],[\"在养老区\",{\"1\":{\"269\":1}}],[\"在哪里分配等问题\",{\"1\":{\"262\":1}}],[\"在\",{\"0\":{\"532\":1},\"1\":{\"198\":1,\"253\":1,\"303\":1,\"543\":1,\"561\":1,\"570\":1,\"849\":1,\"859\":1,\"1097\":1,\"1415\":1,\"1475\":1,\"1583\":1,\"1643\":1,\"1751\":1,\"1811\":1,\"1919\":1,\"1979\":1,\"2097\":1,\"2099\":1,\"2102\":1,\"2114\":1,\"2118\":1,\"2119\":1,\"2120\":1,\"2396\":1,\"2506\":1,\"2597\":1,\"2619\":1,\"2632\":1,\"2685\":1,\"2760\":1,\"2768\":1,\"2839\":1,\"2840\":1,\"2841\":1,\"2842\":1,\"2845\":1,\"2872\":1,\"2947\":1,\"2955\":1,\"2965\":1,\"3071\":1,\"3106\":1,\"3108\":1,\"3168\":1,\"3337\":1,\"4058\":1,\"4068\":1,\"4130\":1,\"4388\":1,\"4390\":1,\"4425\":1,\"4513\":1,\"4594\":1,\"4702\":1,\"4704\":1,\"4707\":1,\"4719\":1,\"4723\":1,\"4724\":1,\"4725\":1,\"4842\":1,\"4902\":1,\"4975\":1,\"4997\":1,\"5010\":1,\"5063\":1,\"5138\":1,\"5146\":1,\"5217\":1,\"5218\":1,\"5219\":1,\"5220\":1,\"5223\":1,\"5250\":1,\"5325\":1,\"5333\":1,\"5343\":1,\"5530\":1,\"5604\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"10\":1,\"3664\":1}}],[\"因而从这个角度来说\",{\"1\":{\"2800\":1,\"5178\":1}}],[\"因而\",{\"1\":{\"1383\":1,\"1551\":1,\"1719\":1,\"1887\":1,\"4810\":1}}],[\"因而近似平衡\",{\"1\":{\"660\":1,\"4001\":1}}],[\"因为md5可以被暴力破解\",{\"1\":{\"3589\":1}}],[\"因为md5是不可逆的\",{\"1\":{\"3589\":1}}],[\"因为每个线程都需要执行\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"因为final\",{\"1\":{\"3201\":1}}],[\"因为对于线程池里面不会销毁的线程\",{\"1\":{\"3201\":1}}],[\"因为对于数据为\",{\"1\":{\"2659\":1,\"5037\":1}}],[\"因为还是可能存在定期删除和惰性删除漏掉了很多过期\",{\"1\":{\"2997\":1,\"5375\":1}}],[\"因为可以读到未提交事务修改的数据\",{\"1\":{\"2850\":1,\"5228\":1}}],[\"因为可重复读隔离级别下\",{\"1\":{\"2847\":1,\"5225\":1}}],[\"因为使用\",{\"1\":{\"2845\":1,\"5223\":1}}],[\"因为事务\",{\"1\":{\"2819\":1,\"5197\":1}}],[\"因为多个事务同时使用相同的数据时\",{\"1\":{\"2808\":1,\"5186\":1}}],[\"因为间隙锁的目的是防止插入幻影记录而提出的\",{\"1\":{\"2789\":1,\"5167\":1}}],[\"因为当执行\",{\"1\":{\"2848\":1,\"5226\":1}}],[\"因为当事务提交了\",{\"1\":{\"2775\":1,\"5153\":1}}],[\"因为当我们对数据库表进行操作时\",{\"1\":{\"2724\":1,\"5102\":1}}],[\"因为它属于快照读\",{\"1\":{\"2773\":1,\"5151\":1}}],[\"因为它是存在与我们的starter中的\",{\"1\":{\"1195\":1,\"4228\":1}}],[\"因为另一个事务中的插入会被阻塞\",{\"1\":{\"2759\":1,\"5137\":1}}],[\"因为申请不到\",{\"1\":{\"2737\":1,\"5115\":1}}],[\"因为表锁的颗粒度太大\",{\"1\":{\"2721\":1,\"5099\":1}}],[\"因为索引是需要占用磁盘空间的\",{\"1\":{\"2671\":1,\"5049\":1}}],[\"因为二级索引的叶子节点就存放的是主键\",{\"1\":{\"2641\":1,\"5019\":1}}],[\"因为整个\",{\"1\":{\"2634\":1,\"5012\":1}}],[\"因为只取前几个字符\",{\"1\":{\"2627\":1,\"5005\":1}}],[\"因为只有一个进程\",{\"1\":{\"1472\":1,\"1640\":1,\"1808\":1,\"1976\":1,\"4899\":1}}],[\"因为该分组的目的\",{\"1\":{\"2489\":1,\"5587\":1}}],[\"因为这正是我们要问询的\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"因为这涉及了具体的业务场景\",{\"1\":{\"2054\":1,\"4659\":1}}],[\"因为分表后\",{\"1\":{\"2184\":1,\"4306\":1}}],[\"因为分区数可能无法被消费者数量整除\",{\"1\":{\"1269\":1,\"5461\":1}}],[\"因为我这里是还要获取点赞数和评论数啥的\",{\"1\":{\"2169\":1,\"4291\":1}}],[\"因为我们一开始讲了在\",{\"1\":{\"2133\":1,\"4738\":1}}],[\"因为我们只有一个\",{\"1\":{\"2122\":1,\"4727\":1}}],[\"因为我们没有在内存层面去拷贝数据\",{\"1\":{\"1427\":1,\"1595\":1,\"1763\":1,\"1931\":1,\"4854\":1}}],[\"因为我们知道\",{\"1\":{\"996\":1}}],[\"因为我们根据\",{\"1\":{\"586\":1}}],[\"因为重量级锁会频繁切换内核态与用户态\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"因为都是自旋\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"因为初始化所以\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"因为一个\",{\"1\":{\"1493\":1,\"1661\":1,\"1829\":1,\"1997\":1,\"2469\":1,\"4920\":1,\"5567\":1}}],[\"因为系统调用还是\",{\"1\":{\"1413\":1,\"1581\":1,\"1749\":1,\"1917\":1,\"4840\":1}}],[\"因为仍然需要通过\",{\"1\":{\"1413\":1,\"1581\":1,\"1749\":1,\"1917\":1,\"4840\":1}}],[\"因为边缘触发可以减少\",{\"1\":{\"1394\":1,\"1562\":1,\"1730\":1,\"1898\":1,\"4821\":1}}],[\"因为互斥对象只有一个\",{\"1\":{\"1353\":1,\"1521\":1,\"1689\":1,\"1857\":1,\"4780\":1}}],[\"因为某些消费者不参与一些topic的分配\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"因为在可重复读的隔离级别下\",{\"1\":{\"2702\":1,\"5080\":1}}],[\"因为在内核维护了红黑树\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"因为在一个大文件里查找和删除消息是很费时的事\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"因为在用户的桌面应用场景下\",{\"1\":{\"349\":1}}],[\"因为0和任何数做与\",{\"1\":{\"989\":1}}],[\"因为hash结果越分散效果越好\",{\"1\":{\"1010\":1}}],[\"因为hashtable是个线程安全的类\",{\"1\":{\"1001\":1}}],[\"因为hash值是随机的\",{\"1\":{\"906\":1}}],[\"因为hashset底层是用hashmap存储数据的\",{\"1\":{\"699\":1}}],[\"因为concurrenthashmap使用了分段锁\",{\"1\":{\"893\":1}}],[\"因为cpu需要不停的切换各个线程\",{\"1\":{\"193\":1}}],[\"因为数据均匀分布在每个bin中\",{\"1\":{\"879\":1,\"3987\":1}}],[\"因为他的底层结构就是使用数组实现的\",{\"1\":{\"806\":1}}],[\"因为synchronizedlist只是使用同步代码块包裹了arraylist的方法\",{\"1\":{\"801\":1}}],[\"因为你可以通过设置集合的初始化大小来避免不必要的资源开销\",{\"1\":{\"795\":1}}],[\"因为arraylist本质上就是一个数组\",{\"1\":{\"739\":1}}],[\"因为需要移动元素\",{\"1\":{\"712\":1}}],[\"因为此时二叉搜索树不是平衡树\",{\"1\":{\"671\":1,\"4013\":1}}],[\"因为要保持兼容性\",{\"1\":{\"563\":1}}],[\"因为\",{\"1\":{\"506\":1,\"588\":1,\"1124\":1,\"1456\":1,\"1457\":1,\"1475\":1,\"1624\":1,\"1625\":1,\"1643\":1,\"1792\":1,\"1793\":1,\"1811\":1,\"1960\":1,\"1961\":1,\"1979\":1,\"2097\":1,\"2136\":1,\"2139\":1,\"2347\":1,\"2522\":1,\"2637\":1,\"2669\":1,\"2734\":1,\"2873\":1,\"2919\":1,\"2920\":1,\"2921\":1,\"2922\":1,\"3957\":1,\"4157\":1,\"4702\":1,\"4741\":1,\"4744\":1,\"4883\":1,\"4884\":1,\"4902\":1,\"5015\":1,\"5047\":1,\"5112\":1,\"5251\":1,\"5297\":1,\"5298\":1,\"5299\":1,\"5300\":1,\"5620\":1}}],[\"因为终于看到了exception\",{\"1\":{\"469\":1,\"3920\":1}}],[\"因为return表⽰的是要整个⽅法体返回\",{\"1\":{\"461\":1}}],[\"因此如果你的密码很不幸被搜集在彩虹表里\",{\"1\":{\"3607\":1}}],[\"因此fixedthreadpool最多只能创建核心线程数的线程\",{\"1\":{\"3309\":1,\"4574\":1}}],[\"因此这种策略会降低对于新任务提交速度\",{\"1\":{\"3302\":1,\"4567\":1}}],[\"因此乐观锁不会上锁\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"因此在\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"因此在操作数据时\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"因此在并发环境下从堆区中划分内存空间是线程不安全的\",{\"1\":{\"274\":1}}],[\"因此可以采用这种方式来备份数据库\",{\"1\":{\"2704\":1,\"5082\":1}}],[\"因此可以借助于\",{\"1\":{\"37\":1,\"3691\":1}}],[\"因此哈希表可以快速检索数据\",{\"1\":{\"2587\":1,\"4965\":1}}],[\"因此经常用于\",{\"1\":{\"2398\":1,\"2401\":1}}],[\"因此也称其为容器\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"因此实际应用中也看不到单\",{\"1\":{\"1492\":1,\"1660\":1,\"1828\":1,\"1996\":1,\"4919\":1}}],[\"因此实际中并没有应用\",{\"1\":{\"1446\":1,\"1614\":1,\"1782\":1,\"1950\":1,\"4873\":1}}],[\"因此我们程序要保证一次性将内核缓冲区的数据读取完\",{\"1\":{\"1388\":1,\"1556\":1,\"1724\":1,\"1892\":1,\"4815\":1}}],[\"因此我们可以将这种内存分配方式称为快速分配策略\",{\"1\":{\"273\":1}}],[\"因此处理速度非常快\",{\"1\":{\"969\":1}}],[\"因此就可能导致不均匀的数据分布\",{\"1\":{\"879\":1,\"3987\":1}}],[\"因此不能代理声明为\",{\"1\":{\"864\":1,\"4073\":1}}],[\"因此拥有最高的单线程收集效率\",{\"1\":{\"348\":1}}],[\"因此需要特定的命令解析器执行引擎\",{\"1\":{\"182\":1,\"3831\":1}}],[\"因此\",{\"1\":{\"28\":1,\"300\":1,\"536\":1,\"542\":1,\"557\":1,\"597\":1,\"605\":1,\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"2157\":1,\"2369\":1,\"2409\":1,\"2415\":1,\"2488\":1,\"2534\":1,\"2572\":1,\"2599\":2,\"2760\":1,\"3567\":1,\"3682\":1,\"4762\":1,\"4820\":1,\"4950\":1,\"4977\":2,\"5138\":1,\"5586\":1,\"5632\":1}}],[\"寄存器用来存储指向下一条指令的地址\",{\"1\":{\"190\":1}}],[\"堆积在内存里\",{\"1\":{\"2997\":1,\"5375\":1}}],[\"堆被分为新生代和老年代\",{\"1\":{\"374\":1}}],[\"堆被划分为新生代和老年代\",{\"1\":{\"253\":1}}],[\"堆一样\",{\"1\":{\"279\":1}}],[\"堆的最大内存\",{\"1\":{\"251\":1}}],[\"堆大小\",{\"1\":{\"251\":1}}],[\"堆用于存储\",{\"1\":{\"243\":1}}],[\"堆区分开\",{\"1\":{\"241\":1,\"280\":1}}],[\"堆可以是处于物理上不连续的内存空间中\",{\"1\":{\"229\":1}}],[\"堆内存\",{\"1\":{\"228\":1}}],[\"堆是分配对象存储的唯一选择吗\",{\"0\":{\"276\":1}}],[\"堆是\",{\"1\":{\"223\":1}}],[\"堆外内存\",{\"1\":{\"188\":1}}],[\"堆\",{\"1\":{\"188\":1,\"3311\":1,\"4576\":1}}],[\"线程是稀缺资源\",{\"1\":{\"3283\":1,\"4547\":1}}],[\"线程是不会主动释放偏向锁的\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"线程池各个参数的关系\",{\"1\":{\"4563\":1}}],[\"线程池被创建后如果没有任务过来\",{\"1\":{\"3349\":1,\"4607\":1}}],[\"线程池被创建后里面有线程吗\",{\"1\":{\"3348\":1,\"4606\":1}}],[\"线程池的7大参数以及具体用法\",{\"1\":{\"3397\":1,\"5677\":1}}],[\"线程池的线程数量不确定\",{\"1\":{\"3334\":1,\"4591\":1}}],[\"线程池的饱和策略有哪些\",{\"1\":{\"3299\":1,\"4564\":1}}],[\"线程池中若有空闲线程\",{\"1\":{\"3332\":1,\"4589\":1}}],[\"线程池中的线程数量大于\",{\"1\":{\"3294\":1,\"4558\":1}}],[\"线程池会先将任务放入workqueue中\",{\"1\":{\"3317\":1}}],[\"线程池处理任务的流程了解吗\",{\"1\":{\"3312\":1,\"4577\":1}}],[\"线程池常用的阻塞队列有哪些\",{\"1\":{\"3306\":1,\"4571\":1}}],[\"线程池\",{\"0\":{\"3277\":1,\"3278\":1,\"4542\":1}}],[\"线程会判断此时持有锁的线程是否就是自己\",{\"1\":{\"3226\":1,\"4350\":1}}],[\"线程并不会主动释放偏向锁\",{\"1\":{\"3226\":1,\"4350\":1}}],[\"线程并发执行的过程中\",{\"1\":{\"1358\":1,\"1526\":1,\"1694\":1,\"1862\":1,\"4785\":1}}],[\"线程的挂起和唤醒\",{\"1\":{\"3237\":1,\"4360\":1}}],[\"线程的自旋超过了一定次数\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"线程的互斥同步方式有哪些\",{\"0\":{\"3205\":1,\"4329\":1}}],[\"线程的方案\",{\"1\":{\"1495\":1,\"1663\":1,\"1831\":1,\"1999\":1,\"4922\":1}}],[\"线程的方式不合适\",{\"1\":{\"1373\":1,\"1541\":1,\"1709\":1,\"1877\":1,\"4800\":1}}],[\"线程试图获取锁也就是获取\",{\"1\":{\"3167\":1,\"4512\":1}}],[\"线程对变量的所有操作都在工作内存中进行\",{\"1\":{\"3137\":1,\"4450\":1}}],[\"线程对象创建后\",{\"1\":{\"1344\":1,\"1512\":1,\"1680\":1,\"1848\":1,\"4771\":1}}],[\"线程工作内存保存了变量在主内存中的副本\",{\"1\":{\"3137\":1,\"4450\":1}}],[\"线程工作内存\",{\"1\":{\"3136\":1,\"4448\":1}}],[\"线程1进行compare\",{\"1\":{\"3102\":1,\"4383\":1}}],[\"线程1重新获取内存地址\",{\"1\":{\"3101\":1,\"4381\":1}}],[\"线程1开始提交更新\",{\"1\":{\"3100\":1,\"4379\":1}}],[\"线程1想要把内存地址为\",{\"1\":{\"3098\":1,\"4375\":1}}],[\"线程2捷足先登了\",{\"1\":{\"3099\":1,\"4377\":1}}],[\"线程执行的时候不会加锁\",{\"1\":{\"3093\":1,\"4369\":1}}],[\"线程执行完了或者因异常退出了run\",{\"1\":{\"1348\":1,\"1516\":1,\"1684\":1,\"1852\":1,\"4775\":1}}],[\"线程开始执行第一步就是获取锁\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"线程获取锁\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"线程模式后面会详细介绍到\",{\"1\":{\"2910\":1,\"5288\":1}}],[\"线程接近交替运行\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"线程方案的示意图如下\",{\"1\":{\"1496\":1,\"1664\":1,\"1832\":1,\"2000\":1,\"4923\":1}}],[\"线程\",{\"0\":{\"1455\":1,\"1494\":1,\"1623\":1,\"1662\":1,\"1791\":1,\"1830\":1,\"1959\":1,\"1998\":1,\"4882\":1,\"4921\":1},\"1\":{\"1440\":2,\"1442\":1,\"1443\":1,\"1444\":1,\"1445\":1,\"1446\":2,\"1448\":1,\"1450\":1,\"1608\":2,\"1610\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":2,\"1616\":1,\"1618\":1,\"1776\":2,\"1778\":1,\"1779\":1,\"1780\":1,\"1781\":1,\"1782\":2,\"1784\":1,\"1786\":1,\"1944\":2,\"1946\":1,\"1947\":1,\"1948\":1,\"1949\":1,\"1950\":2,\"1952\":1,\"1954\":1,\"2733\":1,\"2734\":1,\"2735\":1,\"3102\":1,\"4383\":1,\"4867\":2,\"4869\":1,\"4870\":1,\"4871\":1,\"4872\":1,\"4873\":2,\"4875\":1,\"4877\":1,\"5111\":1,\"5112\":1,\"5113\":1}}],[\"线程同步互斥和锁\",{\"0\":{\"3204\":1}}],[\"线程同步\",{\"1\":{\"1362\":1,\"1530\":1,\"1698\":1,\"1866\":1,\"4789\":1}}],[\"线程同步是两个或多个共享关键资源的线程的并发执行\",{\"1\":{\"1351\":1,\"1519\":1,\"1687\":1,\"1855\":1,\"4778\":1}}],[\"线程互斥\",{\"1\":{\"1362\":1,\"1530\":1,\"1698\":1,\"1866\":1,\"4789\":1}}],[\"线程间正确的协作\",{\"1\":{\"1359\":1,\"1527\":1,\"1695\":1,\"1863\":1,\"4786\":1}}],[\"线程之间存在协作的关系\",{\"1\":{\"1358\":1,\"1526\":1,\"1694\":1,\"1862\":1,\"4785\":1}}],[\"线程重新转入就绪状态\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"线程信息等\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"线程安全的hashtable是如何实现的\",{\"1\":{\"998\":1}}],[\"线程安全\",{\"1\":{\"821\":1,\"4030\":1}}],[\"线程恢复等基础功能都需要依赖这个计数器来完成\",{\"1\":{\"200\":1}}],[\"线程共享\",{\"1\":{\"188\":1}}],[\"线程私有\",{\"1\":{\"187\":1}}],[\"这代表你将丢失对这个任务的处理\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"这整个操作就是cas\",{\"1\":{\"3103\":1,\"4385\":1}}],[\"这类大的二进制数据通常存储于文件服务器\",{\"1\":{\"2883\":1,\"5261\":1}}],[\"这类大的二进制数据\",{\"0\":{\"2881\":1,\"5259\":1}}],[\"这类服务依旧只能采用写主机房\",{\"1\":{\"2199\":1,\"4321\":1}}],[\"这四种隔离级别具体是如何实现的呢\",{\"1\":{\"2849\":1,\"5227\":1}}],[\"这四个隔离级别如下\",{\"1\":{\"2831\":1,\"5209\":1}}],[\"这条记录了\",{\"1\":{\"2788\":1,\"5166\":1}}],[\"这条消息的状态是待发送状态\",{\"1\":{\"2172\":1,\"4294\":1}}],[\"这主要是通过\",{\"1\":{\"2755\":1,\"5133\":1}}],[\"这也可以过滤更多数据\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"这也是threadlocal变量名的由来\",{\"1\":{\"3186\":1,\"4531\":1}}],[\"这也是和\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"这也是为什么很多场合我们输密码的时候\",{\"1\":{\"3607\":1}}],[\"这也是为什么\",{\"1\":{\"2566\":1,\"4944\":1}}],[\"这也是\",{\"1\":{\"1431\":1,\"1599\":1,\"1767\":1,\"1935\":1,\"4858\":1}}],[\"这应该是非聚簇索引最大的缺点了\",{\"1\":{\"2646\":1,\"5024\":1}}],[\"这被称为\",{\"1\":{\"2598\":1,\"2599\":1,\"4976\":1,\"4977\":1}}],[\"这在并发写的情况下是多么滴憨憨啊\",{\"1\":{\"2566\":1,\"4944\":1}}],[\"这地方有个常见面试题\",{\"1\":{\"2366\":1}}],[\"这篇文章来一起看下tcp中那些烦人\",{\"1\":{\"2292\":1}}],[\"这无所谓\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"这端\",{\"1\":{\"2118\":1,\"4723\":1}}],[\"这使得\",{\"1\":{\"2509\":1,\"5607\":1}}],[\"这使得编写web服务客户端更容易\",{\"1\":{\"2085\":1,\"4690\":1}}],[\"这使得微服务可以采用任何的开发语言和技术来实现\",{\"1\":{\"2047\":1,\"4652\":1}}],[\"这三个单词首字母组合\",{\"1\":{\"2145\":1,\"4750\":1}}],[\"这三个对象\",{\"1\":{\"1460\":1,\"1628\":1,\"1796\":1,\"1964\":1,\"4887\":1}}],[\"这三者都实现了list\",{\"1\":{\"738\":1}}],[\"这一章节\",{\"1\":{\"3337\":1,\"4594\":1}}],[\"这一次没有其他线程改变地址\",{\"1\":{\"3102\":1,\"4383\":1}}],[\"这一步需要调用\",{\"1\":{\"2981\":1,\"5359\":1}}],[\"这一步需要调用write函数\",{\"1\":{\"2980\":1,\"5358\":1}}],[\"这一切都发生在内核态\",{\"1\":{\"1410\":1,\"1578\":1,\"1746\":1,\"1914\":1,\"4837\":1}}],[\"这一种固定的数据结构了\",{\"1\":{\"579\":1}}],[\"这两个事务同时在处理\",{\"1\":{\"2818\":1,\"2823\":1,\"2827\":1,\"5196\":1,\"5201\":1,\"5205\":1}}],[\"这两个索引就是冗余索引\",{\"1\":{\"2673\":1,\"5051\":1}}],[\"这两个系统调用\",{\"1\":{\"1418\":1,\"1586\":1,\"1754\":1,\"1922\":1,\"4845\":1}}],[\"这两个术语还挺抽象的\",{\"1\":{\"1387\":1,\"1555\":1,\"1723\":1,\"1891\":1,\"4814\":1}}],[\"这两个都可以方便地实现进程\",{\"1\":{\"1362\":1,\"1530\":1,\"1698\":1,\"1866\":1,\"4789\":1}}],[\"这两个值是通过过去回收的经验获得\",{\"1\":{\"375\":1}}],[\"这会导致consumer有些消息处理了\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"这将消除每次手动部署更改的需要\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"这可以使用\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"这时就可以将\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"这时数据库的线程很快就会爆满了\",{\"1\":{\"2736\":1,\"5114\":1}}],[\"这时线程\",{\"1\":{\"2735\":1,\"5113\":1}}],[\"这时其他线程执行以下操作\",{\"1\":{\"2690\":1,\"5068\":1}}],[\"这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息\",{\"1\":{\"1164\":1,\"4197\":1}}],[\"这时候\",{\"1\":{\"1046\":1,\"4079\":1}}],[\"这时候不管你需要什么map\",{\"1\":{\"492\":1,\"3943\":1}}],[\"这时候反射就派上用场了\",{\"1\":{\"487\":1,\"3938\":1}}],[\"这时候切换回来以后\",{\"1\":{\"193\":1}}],[\"这其实和java\",{\"1\":{\"1025\":1}}],[\"这又引入了哈希分布不均匀的问题\",{\"1\":{\"1012\":1}}],[\"这段代码是为了对key的hashcode进行扰动计算\",{\"1\":{\"988\":1}}],[\"这不过这里的\",{\"1\":{\"2128\":1,\"4733\":1}}],[\"这不就发生了冲突吗\",{\"1\":{\"985\":1}}],[\"这不难理解\",{\"1\":{\"960\":1}}],[\"这实现的原理如下\",{\"1\":{\"970\":1}}],[\"这⾥的双重检查是指两次⾮空判断\",{\"1\":{\"821\":1,\"4030\":1}}],[\"这决定了以下几点\",{\"1\":{\"708\":1}}],[\"这决定了它有如下特点\",{\"1\":{\"685\":1,\"714\":1,\"723\":1,\"904\":1,\"1035\":1}}],[\"这难道不是重蹈了\",{\"1\":{\"587\":1}}],[\"这里没听清发音\",{\"1\":{\"3400\":1,\"5680\":1}}],[\"这里借用\",{\"1\":{\"3280\":1,\"4544\":1}}],[\"这里不需要重新加锁\",{\"1\":{\"3226\":1,\"4350\":1}}],[\"这里必然会存在时间差\",{\"1\":{\"3137\":1,\"4450\":1}}],[\"这里对上面提到的一些\",{\"1\":{\"2985\":1,\"5363\":1}}],[\"这里的句点代表了不同层次之间的界限\",{\"1\":{\"2524\":1,\"5622\":1}}],[\"这里的叶子节点指的是最底层的空节点\",{\"1\":{\"663\":1,\"4004\":1}}],[\"这里说的网络设备\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"这里需要注意的是\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"这里还有一种情况\",{\"1\":{\"2199\":1,\"4321\":1}}],[\"这里回答的是单个表吧\",{\"1\":{\"2186\":1,\"4308\":1}}],[\"这里为了方便随便取个数字\",{\"1\":{\"2128\":1,\"4733\":1}}],[\"这里涉及共享数据的竞争\",{\"1\":{\"1488\":1,\"1656\":1,\"1824\":1,\"1992\":1,\"4915\":1}}],[\"这里我们主要看\",{\"1\":{\"1335\":1}}],[\"这里只能是尽量均衡\",{\"1\":{\"1269\":1,\"5461\":1}}],[\"这里就那redis来说一下\",{\"1\":{\"1230\":1,\"4263\":1}}],[\"这里就不贴代码了\",{\"1\":{\"1002\":1}}],[\"这里面定义了依赖的版本\",{\"1\":{\"1189\":1,\"4222\":1}}],[\"这里面是包含负数的\",{\"1\":{\"996\":1}}],[\"这里有两道常见面试题\",{\"1\":{\"2405\":1}}],[\"这里有一个小建议\",{\"1\":{\"934\":1}}],[\"这里有问题\",{\"0\":{\"584\":1},\"1\":{\"585\":1}}],[\"这里\",{\"1\":{\"777\":1}}],[\"这里换为真实地址\",{\"1\":{\"290\":1}}],[\"这么多年了\",{\"1\":{\"565\":1}}],[\"这么难的逻辑都被你实现了\",{\"1\":{\"486\":1,\"3937\":1}}],[\"这个字符串在日志里的出现次数\",{\"1\":{\"3567\":1}}],[\"这个字符串\",{\"1\":{\"3567\":1,\"3568\":1}}],[\"这个经理不太专业呀\",{\"1\":{\"3437\":1}}],[\"这个我说就是了解\",{\"1\":{\"3419\":1,\"5699\":1}}],[\"这个熟\",{\"1\":{\"3397\":1,\"5677\":1}}],[\"这个离谱\",{\"1\":{\"3384\":1,\"5664\":1}}],[\"这个紧张忘了\",{\"1\":{\"3378\":1,\"5658\":1}}],[\"这个变量实际被修改过了\",{\"1\":{\"3113\":1,\"4395\":1}}],[\"这个变量所在的位置附近的位置很有可能在程序后续运行中被访问到\",{\"1\":{\"1332\":1}}],[\"这个重新尝试的过程被称为自旋\",{\"1\":{\"3101\":1,\"4381\":1}}],[\"这个机制\",{\"1\":{\"3070\":1,\"4424\":1}}],[\"这个应该没人使用吧\",{\"1\":{\"3007\":1,\"5385\":1}}],[\"这个索引的\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"这个对比有点废话\",{\"1\":{\"2579\":1,\"4957\":1}}],[\"这个恢复的过程依赖于\",{\"1\":{\"2576\":1,\"4954\":1}}],[\"这个域名归\",{\"1\":{\"2538\":1,\"5636\":1}}],[\"这个最后的一个点代表根域名\",{\"1\":{\"2526\":1,\"5624\":1}}],[\"这个怎么解决\",{\"0\":{\"2201\":1,\"4323\":1}}],[\"这个\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"这个开源项目\",{\"1\":{\"1431\":1,\"1599\":1,\"1767\":1,\"1935\":1,\"4858\":1}}],[\"这个过程是原子的\",{\"1\":{\"3095\":1,\"4371\":1}}],[\"这个过程是由\",{\"1\":{\"1411\":1,\"1579\":1,\"1747\":1,\"1915\":1,\"4838\":1}}],[\"这个过程之中\",{\"1\":{\"1425\":1,\"1593\":1,\"1761\":1,\"1929\":1,\"4852\":1}}],[\"这个缓冲区\",{\"1\":{\"1409\":1,\"1577\":1,\"1745\":1,\"1913\":1,\"4836\":1}}],[\"这个就是水平触发的方式\",{\"1\":{\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"4817\":1}}],[\"这个方案\",{\"1\":{\"1465\":1,\"1633\":1,\"1801\":1,\"1969\":1,\"4892\":1}}],[\"这个方式就是边缘触发\",{\"1\":{\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"4817\":1}}],[\"这个方法的调用就会被转发到实现invocationhandler\",{\"1\":{\"852\":1,\"4061\":1}}],[\"这个方法一共有\",{\"1\":{\"851\":1,\"4060\":1}}],[\"这个方法主要用来生成一个代理对象\",{\"1\":{\"850\":1,\"4059\":1}}],[\"这个方法很重要\",{\"1\":{\"694\":1}}],[\"这个情况会越来越严重\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"这个时候可以使用\",{\"1\":{\"3125\":1,\"4407\":1}}],[\"这个时候对线程1来说\",{\"1\":{\"3098\":1,\"4375\":1}}],[\"这个时候有其他人来了只能在外面等\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"这个时候重新选举的时候我们如果把\",{\"1\":{\"2136\":1,\"4741\":1}}],[\"这个时候\",{\"1\":{\"1252\":2,\"2129\":1,\"2139\":1,\"4734\":1,\"4744\":1,\"5444\":2}}],[\"这个parent就是spring\",{\"1\":{\"1186\":1,\"4219\":1}}],[\"这个半成品对象已经存放在缓存到singletonobjects\",{\"1\":{\"1118\":1,\"4151\":1}}],[\"这个是最常用的\",{\"1\":{\"3005\":1,\"5383\":1}}],[\"这个是可以证明出来的\",{\"1\":{\"1006\":1}}],[\"这个是无法更改的\",{\"1\":{\"806\":1}}],[\"这个扩容条件指的是什么呢\",{\"1\":{\"937\":1}}],[\"这个问题有人吐槽过\",{\"1\":{\"3649\":1}}],[\"这个问题看似简单\",{\"1\":{\"897\":1}}],[\"这个问题至此已经无解了\",{\"1\":{\"588\":1}}],[\"这个优势更加明显\",{\"1\":{\"865\":1,\"4074\":1}}],[\"这个实例就会被创建\",{\"1\":{\"821\":1,\"4030\":1}}],[\"这个关键字被占据了\",{\"1\":{\"588\":1}}],[\"这个stack\",{\"1\":{\"586\":1}}],[\"这个概念不是我说的\",{\"1\":{\"560\":1}}],[\"这个类的\",{\"1\":{\"3117\":1,\"4400\":1}}],[\"这个类的若干我们不需要的方法\",{\"1\":{\"587\":1}}],[\"这个类的一大问题\",{\"1\":{\"587\":1}}],[\"这个类的覆辙\",{\"1\":{\"587\":1}}],[\"这个类\",{\"1\":{\"539\":1,\"606\":1}}],[\"这个不推荐不是某个技术专家或者某个企业的规范标准\",{\"1\":{\"533\":1}}],[\"这就会造成大问题\",{\"1\":{\"3114\":1,\"4396\":1}}],[\"这就好比雪崩一样\",{\"1\":{\"3043\":1,\"5421\":1}}],[\"这就可能会导致瞬时大量的请求直接打到了数据库上\",{\"1\":{\"3033\":1,\"5411\":1}}],[\"这就导致这些请求直接到了数据库上\",{\"1\":{\"3015\":1,\"5393\":1}}],[\"这就和\",{\"1\":{\"2158\":1,\"4763\":1}}],[\"这就叫\",{\"1\":{\"2152\":1,\"4757\":1}}],[\"这就要涉及到hashtable的构造函数和扩容函数了\",{\"1\":{\"1002\":1}}],[\"这就很好的避免了冲突\",{\"1\":{\"994\":1}}],[\"这就产生了冲突\",{\"1\":{\"991\":1}}],[\"这就是我的自我介绍\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"这就是为什么只有在同步的块或者方法中才能调用wait\",{\"1\":{\"3169\":1,\"4514\":1}}],[\"这就是事务四大特性中的隔离性\",{\"1\":{\"2702\":1,\"5080\":1}}],[\"这就是所谓的零拷贝\",{\"1\":{\"1427\":1,\"1595\":1,\"1763\":1,\"1931\":1,\"4854\":1}}],[\"这就是两者的区别\",{\"1\":{\"1391\":1,\"1559\":1,\"1727\":1,\"1895\":1,\"4818\":1}}],[\"这就是多路复用\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"这就是\",{\"1\":{\"588\":1}}],[\"这就是抛出异常\",{\"1\":{\"451\":1,\"3910\":1}}],[\"这就意味着自旋的时间不再固定了\",{\"1\":{\"3256\":1}}],[\"这就意味着\",{\"1\":{\"586\":1}}],[\"这就需要提到双亲委派模型了\",{\"1\":{\"415\":1,\"3871\":1}}],[\"这些并发工具类都在java\",{\"1\":{\"3108\":1,\"4390\":1}}],[\"这些函数被称为\",{\"1\":{\"2984\":1,\"5362\":1}}],[\"这些数据流之间独立互不影响\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"这些信息的组合\",{\"1\":{\"2355\":1}}],[\"这些信息包含如下\",{\"1\":{\"470\":1,\"3921\":1}}],[\"这些功能的实现主要依赖于\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"这些操作具有前后关系\",{\"1\":{\"1307\":1,\"5499\":1}}],[\"这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的\",{\"1\":{\"814\":1,\"4023\":1}}],[\"这些对比都是指数据量很大或者操作很频繁的情况下的对比\",{\"1\":{\"741\":1}}],[\"这些类和电脑类之间的关系\",{\"1\":{\"553\":1}}],[\"这些异常一般是由程序逻辑错误引起的\",{\"1\":{\"436\":1,\"3895\":1}}],[\"这些异常是不检查异常\",{\"1\":{\"436\":1,\"3895\":1}}],[\"这些与线程一一对应的数据区域会随着线程开始和结束而创建和销毁\",{\"1\":{\"186\":1}}],[\"这\",{\"1\":{\"387\":1,\"3840\":1}}],[\"这意味着事务执行期间\",{\"1\":{\"2731\":1,\"5109\":1}}],[\"这意味着我们可以将最坏情况下的性能从o\",{\"1\":{\"1017\":1}}],[\"这意味着运行期间不会产生内存空间碎片\",{\"1\":{\"382\":1}}],[\"这意味着在执行垃圾收集的时候需要停顿用户程序\",{\"1\":{\"344\":1}}],[\"这阶段需要停顿线程\",{\"1\":{\"379\":1}}],[\"这点停顿是可以接受的\",{\"1\":{\"349\":1}}],[\"这部分内容将在类加载后存放到方法区的运行时常量池中\",{\"1\":{\"288\":1}}],[\"这部分内容将类在加载后进入方法区的运行时常量池中存放\",{\"1\":{\"281\":1}}],[\"这种加锁的思路是\",{\"1\":{\"3546\":1,\"5815\":1}}],[\"这种任务应用起来\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"这种任务消耗的主要是\",{\"1\":{\"3328\":1,\"4585\":1}}],[\"这种结构每个数据都有两个指针\",{\"1\":{\"3069\":1,\"4423\":1}}],[\"这种现象就被称为幻读\",{\"1\":{\"2829\":1,\"5207\":1}}],[\"这种现象就被称为不可重复读\",{\"1\":{\"2823\":1,\"5201\":1}}],[\"这种现象就被称为脏读\",{\"1\":{\"2819\":1,\"5197\":1}}],[\"这种查询会加锁的语句称为锁定读\",{\"1\":{\"2773\":1,\"5151\":1}}],[\"这种不支持事务的引擎\",{\"1\":{\"2705\":1,\"5083\":1}}],[\"这种又长又难比较的数据\",{\"1\":{\"2637\":1,\"5015\":1}}],[\"这种方案并不能从根本上解决此问题\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"这种方案存在\",{\"1\":{\"1471\":1,\"1639\":1,\"1807\":1,\"1975\":1,\"4898\":1}}],[\"这种方法只适用于支持\",{\"1\":{\"2703\":1,\"5081\":1}}],[\"这种方式指的是在你的接口里\",{\"1\":{\"3563\":1}}],[\"这种方式可以解决请求的\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"这种方式需要依靠某种同步操作\",{\"1\":{\"1369\":1,\"1537\":1,\"1705\":1,\"1873\":1,\"4796\":1}}],[\"这种方式会将hashmap的get方法的性能从o\",{\"1\":{\"1017\":1}}],[\"这种思想很类似一个\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"这种通信方式主要用于解决与同步相关的问题并避免竞争条件\",{\"1\":{\"1368\":1,\"1536\":1,\"1704\":1,\"1872\":1,\"4795\":1}}],[\"这种分配方式明显的一个问题是随着消费者订阅的topic的数量的增加\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"这种模式让我们可以根据客户的需求能够动态切换不同的数据源\",{\"1\":{\"1073\":1,\"4106\":1}}],[\"这种数据结构\",{\"1\":{\"535\":1,\"606\":1}}],[\"这种获取方式只有在编译前已经声明了该类的类型才能获取到\",{\"1\":{\"496\":1,\"3947\":1}}],[\"这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制\",{\"1\":{\"477\":1,\"3928\":1}}],[\"这种异常的特点是java编译器会检查它\",{\"1\":{\"443\":1,\"3902\":1}}],[\"这种异常又分为两类\",{\"1\":{\"434\":1,\"3893\":1}}],[\"这种划分方法带来了很大的灵活性\",{\"1\":{\"375\":1}}],[\"这种特性被开发人员利用得比较多的是\",{\"1\":{\"281\":1}}],[\"这种垃圾收集称为\",{\"1\":{\"231\":1}}],[\"这样会带来消息被重新消费的问题\",{\"1\":{\"5737\":1}}],[\"这样会影响缓存命中率\",{\"1\":{\"3460\":1,\"5729\":1}}],[\"这样会造成业务停滞\",{\"1\":{\"2699\":1,\"5077\":1}}],[\"这样会造成主索引频繁分裂\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"这样在\",{\"1\":{\"2769\":1,\"5147\":1}}],[\"这样在备份数据库期间\",{\"1\":{\"2696\":1,\"5074\":1}}],[\"这样的处理方式让写的同学更加明确线程池的运行规则\",{\"1\":{\"3340\":1,\"4597\":1}}],[\"这样的开销往往无法承受\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"这样的批量插入数据的语句\",{\"1\":{\"2767\":1,\"5145\":1}}],[\"这样的话\",{\"1\":{\"425\":1,\"3882\":1}}],[\"这样效率会很慢\",{\"1\":{\"2750\":1,\"5128\":1}}],[\"这样备份期间备份的数据一直是在开启事务时的数据\",{\"1\":{\"2702\":1,\"5080\":1}}],[\"这样查询可以利用索引的排序\",{\"1\":{\"2662\":1,\"5040\":1}}],[\"这样语义较为清晰的短值或短字符作为替代\",{\"1\":{\"2659\":1,\"5037\":1}}],[\"这样一来\",{\"1\":{\"2533\":1,\"5631\":1}}],[\"这样一个概念\",{\"1\":{\"573\":1}}],[\"这样网卡的\",{\"1\":{\"1424\":1,\"1592\":1,\"1760\":1,\"1928\":1,\"4851\":1}}],[\"这样\",{\"1\":{\"1374\":1,\"1406\":1,\"1542\":1,\"1574\":1,\"1710\":1,\"1742\":1,\"1878\":1,\"1910\":1,\"4801\":1,\"4833\":1}}],[\"这样也会造成吞吐量下降\",{\"1\":{\"1314\":1,\"5506\":1}}],[\"这样也会造成消息消费顺序错误\",{\"1\":{\"1311\":1,\"5503\":1}}],[\"这样就导致大量过期\",{\"1\":{\"2997\":1,\"5375\":1}}],[\"这样就有效的防止幻读现象的发生\",{\"1\":{\"2788\":1,\"5166\":1}}],[\"这样就不用去遍历表里的记录\",{\"1\":{\"2751\":1,\"5129\":1}}],[\"这样就不受\",{\"1\":{\"283\":1}}],[\"这样就产生了第\",{\"1\":{\"1495\":1,\"1663\":1,\"1831\":1,\"1999\":1,\"4922\":1}}],[\"这样就产生了单\",{\"1\":{\"1477\":1,\"1645\":1,\"1813\":1,\"1981\":1,\"4904\":1}}],[\"这样就减少了一次数据拷贝\",{\"1\":{\"1424\":1,\"1592\":1,\"1760\":1,\"1928\":1,\"4851\":1}}],[\"这样就只有\",{\"1\":{\"1419\":1,\"1587\":1,\"1755\":1,\"1923\":1,\"4846\":1}}],[\"这样就可以减少一次系统调用\",{\"1\":{\"1418\":1,\"1586\":1,\"1754\":1,\"1922\":1,\"4845\":1}}],[\"这样就会比较慢\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"这样就会出现数据不一致性问题了\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"这样就会出现消息并没有按照顺序执行\",{\"1\":{\"1309\":1,\"5501\":1}}],[\"这样就会造成顺序的错误\",{\"1\":{\"1309\":1,\"5501\":1}}],[\"这样c0总共就比c1\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"这样事务之间就完全不可能产生干扰\",{\"1\":{\"1095\":1,\"4128\":1}}],[\"这样里两个数做按位与运算之后\",{\"1\":{\"996\":1}}],[\"这样设计是合理的\",{\"1\":{\"893\":1}}],[\"这样对\",{\"1\":{\"2994\":1,\"5372\":1}}],[\"这样对后续的关于\",{\"1\":{\"1136\":1,\"4169\":1}}],[\"这样对于效率影响不大\",{\"1\":{\"875\":1,\"3983\":1}}],[\"这样对内存更加友好\",{\"1\":{\"398\":1,\"3853\":1}}],[\"这样不⽤通过指定类型来创建对象了\",{\"1\":{\"829\":1,\"4038\":1}}],[\"这样可以减少调整大小的开销\",{\"1\":{\"745\":1}}],[\"这样做\",{\"1\":{\"573\":1}}],[\"这样做的目的是避免在\",{\"1\":{\"238\":1}}],[\"这样必然会导致经常中断或恢复\",{\"1\":{\"195\":1}}],[\"这是不想要我刷kpi呢\",{\"1\":{\"3442\":1}}],[\"这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放\",{\"1\":{\"3166\":1,\"4511\":1}}],[\"这是面试高频考点\",{\"1\":{\"3111\":1,\"4393\":1}}],[\"这是通过对主键字段声明\",{\"1\":{\"2754\":1,\"5132\":1}}],[\"这是通过设置年轻一代对象的年龄阈值来实现的\",{\"1\":{\"235\":1}}],[\"这是和三个一样的\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"这是错的\",{\"1\":{\"1385\":1,\"1553\":1,\"1721\":1,\"1889\":1,\"4812\":1}}],[\"这是springboot程序的监控系统\",{\"1\":{\"1178\":1,\"4211\":1}}],[\"这是开发人员最需要的功能\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"这是⾮常麻烦的\",{\"1\":{\"837\":1,\"4046\":1}}],[\"这是一棵单结点的树\",{\"1\":{\"617\":1}}],[\"这是因为申请\",{\"1\":{\"2738\":1,\"5116\":1}}],[\"这是因为\",{\"1\":{\"599\":1,\"3090\":1,\"4366\":1}}],[\"这是\",{\"1\":{\"563\":1}}],[\"这是项目主页的案例\",{\"1\":{\"150\":1,\"154\":1,\"3804\":1}}],[\"这是脚注内容\",{\"1\":{\"113\":1,\"3767\":1}}],[\"内置了多种优化过后的数据结构实现\",{\"1\":{\"2911\":1,\"5289\":1}}],[\"内核通常为\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"内核版本\",{\"1\":{\"1415\":1,\"1583\":1,\"1751\":1,\"1919\":1,\"4842\":1}}],[\"内核源码的都知道\",{\"1\":{\"1385\":1,\"1553\":1,\"1721\":1,\"1889\":1,\"4812\":1}}],[\"内核里维护了一个链表来记录就绪事件\",{\"1\":{\"1380\":1,\"1548\":1,\"1716\":1,\"1884\":1,\"4807\":1}}],[\"内核里没有类似\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"内核提供给用户态的多路复用系统调用\",{\"1\":{\"1375\":1,\"1543\":1,\"1711\":1,\"1879\":1,\"4802\":1}}],[\"内核\",{\"0\":{\"1321\":1,\"4278\":1},\"1\":{\"1422\":1,\"1590\":1,\"1758\":1,\"1926\":1,\"2015\":1,\"4620\":1,\"4849\":1}}],[\"内直接书写带有物理分页的参数来完成物理分页功能\",{\"1\":{\"1213\":1,\"4246\":1}}],[\"内部采用的是\",{\"1\":{\"3311\":1,\"4576\":1}}],[\"内部做了非常多的性能优化\",{\"1\":{\"2908\":1,\"5286\":1}}],[\"内部使用数组链表和哈希的方式进行实现\",{\"1\":{\"904\":1}}],[\"内部使用循环数组实现\",{\"1\":{\"723\":1}}],[\"内部的一系列工作\",{\"1\":{\"2023\":1,\"4628\":1}}],[\"内部的元素可以直接通过get与set方法进行访问\",{\"1\":{\"739\":1}}],[\"内部的核心类库\",{\"1\":{\"402\":1,\"3857\":1}}],[\"内部元素不是完全有序的\",{\"1\":{\"732\":1}}],[\"内部是用堆实现的\",{\"1\":{\"730\":1}}],[\"内部实现利用了hashmap\",{\"1\":{\"681\":1}}],[\"内存资源会紧张\",{\"1\":{\"3535\":1,\"5804\":1}}],[\"内存地址v\",{\"1\":{\"3096\":1,\"4372\":1}}],[\"内存淘汰机制了解么\",{\"0\":{\"2999\":1,\"5377\":1}}],[\"内存淘汰机制\",{\"1\":{\"2998\":1,\"5376\":1}}],[\"内存的访问速度是磁盘的上千倍\",{\"1\":{\"2909\":1,\"5287\":1}}],[\"内存管理\",{\"0\":{\"1326\":1}}],[\"内存模型的堆中\",{\"1\":{\"253\":1}}],[\"内存空间中\",{\"1\":{\"232\":1}}],[\"内存\",{\"1\":{\"227\":1,\"553\":2,\"1221\":1,\"1223\":1,\"4254\":1,\"4256\":1}}],[\"内存结构\",{\"0\":{\"183\":1,\"3832\":1}}],[\"内容\",{\"1\":{\"37\":1,\"3691\":1}}],[\"来看头条\",{\"0\":{\"3443\":1,\"5712\":1},\"1\":{\"3446\":1,\"5715\":1}}],[\"来看下java是如何做的\",{\"1\":{\"985\":1}}],[\"来看下以下代码\",{\"1\":{\"924\":1}}],[\"来创建\",{\"0\":{\"3330\":1},\"1\":{\"4587\":1}}],[\"来创建公平锁\",{\"1\":{\"3275\":1,\"4503\":1}}],[\"来处理\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"来保证原子性\",{\"1\":{\"3123\":1,\"4405\":1}}],[\"来保证的\",{\"1\":{\"2811\":1,\"2812\":1,\"5189\":1,\"5190\":1}}],[\"来生成聚簇索引\",{\"1\":{\"2859\":1,\"5237\":1}}],[\"来判断数据的可见性\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"来判断重复元素的\",{\"1\":{\"701\":1}}],[\"来做为缓存判断的标准\",{\"1\":{\"2506\":1,\"5604\":1}}],[\"来进行排序\",{\"1\":{\"2120\":1,\"4725\":1}}],[\"来进行网络通信的\",{\"1\":{\"2118\":1,\"4723\":1}}],[\"来进行传输的\",{\"1\":{\"1427\":1,\"1595\":1,\"1763\":1,\"1931\":1,\"4854\":1}}],[\"来头很大\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"来完成系统自动化功能\",{\"1\":{\"3457\":1,\"5726\":1}}],[\"来完成\",{\"1\":{\"2026\":1,\"4631\":1}}],[\"来搬运\",{\"1\":{\"1428\":1,\"1596\":1,\"1764\":1,\"1932\":1,\"4855\":1}}],[\"来搬运数据\",{\"1\":{\"1410\":1,\"1427\":1,\"1578\":1,\"1595\":1,\"1746\":1,\"1763\":1,\"1914\":1,\"1931\":1,\"4837\":1,\"4854\":1}}],[\"来代替\",{\"1\":{\"1412\":1,\"1580\":1,\"1748\":1,\"1916\":1,\"4839\":1}}],[\"来代替取模运算\",{\"1\":{\"969\":1}}],[\"来渲染视图\",{\"1\":{\"1066\":1,\"4099\":1}}],[\"来调用真正的处理器来处理请求\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"来得到该对象在数据中保存的位置\",{\"1\":{\"1021\":1}}],[\"来初始化容量和装载因子\",{\"1\":{\"948\":1}}],[\"来自定义处理逻辑\",{\"1\":{\"852\":1,\"4061\":1}}],[\"来自定义类加载器\",{\"1\":{\"421\":1,\"3878\":1}}],[\"来说\",{\"1\":{\"847\":1,\"4056\":1}}],[\"来控制集合中的对象\",{\"1\":{\"795\":1}}],[\"来满足上层的业务需求\",{\"1\":{\"576\":1}}],[\"来实现独享或者共享\",{\"1\":{\"4490\":1}}],[\"来实现锁的分配\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"来实现具体对容器进行的操作\",{\"1\":{\"2027\":1,\"4632\":1}}],[\"来实现的\",{\"1\":{\"2015\":1,\"2852\":1,\"4620\":1,\"5230\":1}}],[\"来实现取模运算\",{\"1\":{\"970\":1}}],[\"来实现\",{\"1\":{\"535\":1,\"963\":1}}],[\"来实现虚引用\",{\"1\":{\"322\":1}}],[\"来实现整个程序的功能\",{\"1\":{\"182\":1,\"3831\":1}}],[\"来设定\",{\"1\":{\"243\":1}}],[\"来解析\",{\"1\":{\"37\":1,\"3691\":1}}],[\"而如果我们使用了md5对密码加密\",{\"1\":{\"3600\":1}}],[\"而他们用java比较多\",{\"1\":{\"3442\":1}}],[\"而线程在处理\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"而在模板之外可以专注于要展示什么数据\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"而在这种情况下多出来的一个线程就可以充分利用\",{\"1\":{\"3328\":1,\"4585\":1}}],[\"而在hashtable中不可以\",{\"1\":{\"908\":1}}],[\"而偏向锁只需要在置换\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"而另一个是\",{\"1\":{\"3206\":1,\"4330\":1}}],[\"而threadlocalmap\",{\"1\":{\"3201\":1}}],[\"而threadlocalmap可以存储以threadlocal为\",{\"1\":{\"3195\":1,\"4539\":1}}],[\"而treemap是基于红黑树实现的\",{\"1\":{\"700\":1}}],[\"而treemap基于大致平衡的排序二叉树\",{\"1\":{\"685\":1}}],[\"而共享锁不一样\",{\"1\":{\"3066\":1,\"4420\":1}}],[\"而普通的\",{\"1\":{\"2745\":1,\"5123\":1}}],[\"而导致后续的申请读锁的查询操作也会被阻塞\",{\"1\":{\"2737\":1,\"5115\":1}}],[\"而出现备份文件的数据与预期的不一样\",{\"1\":{\"2696\":1,\"5074\":1}}],[\"而无需回表查询\",{\"1\":{\"2649\":1,\"5027\":1}}],[\"而无需重新启动服务器\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"而覆盖索引就是把要查询出的列和索引是对应的\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"而其余的索引都作为\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"而非一个路由器只维护一个\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"而非广播\",{\"1\":{\"2484\":1,\"5582\":1}}],[\"而非物理分页\",{\"1\":{\"1212\":1,\"4245\":1}}],[\"而当年可能并非如此\",{\"1\":{\"2409\":1}}],[\"而此时正好事务\",{\"1\":{\"2818\":1,\"5196\":1}}],[\"而此时\",{\"1\":{\"2139\":1,\"4744\":1}}],[\"而三个比四个还少一个\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"而假设我们现在有四个\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"而低32位可以简单理解为递增的事务id\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"而多线程间可以共享数据\",{\"1\":{\"1492\":1,\"1660\":1,\"1828\":1,\"1996\":1,\"4919\":1}}],[\"而多线程使用多个线程\",{\"1\":{\"343\":1}}],[\"而边缘触发的意思是只有第一次满足条件的时候才触发\",{\"1\":{\"1391\":1,\"1559\":1,\"1727\":1,\"1895\":1,\"4818\":1}}],[\"而信号量比锁的功能更强一些\",{\"1\":{\"1362\":1,\"1530\":1,\"1698\":1,\"1866\":1,\"4789\":1}}],[\"而rebalance之后\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"而第二个目标才真正体现出stickyassignor特性的\",{\"1\":{\"1289\":1,\"5481\":1}}],[\"而spring\",{\"1\":{\"1181\":1,\"4214\":1}}],[\"而size表示这个桶已经装了多少元素\",{\"1\":{\"924\":1}}],[\"而接下来像是递归操作一样\",{\"1\":{\"1129\":1,\"4162\":1}}],[\"而我的完整创建也依赖于你\",{\"1\":{\"1113\":1,\"4146\":1}}],[\"而不会出现用户\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"而不需要等待整个插入语句执行完后才释放锁\",{\"1\":{\"2761\":1,\"5139\":1}}],[\"而不能更新数据\",{\"1\":{\"2699\":1,\"5077\":1}}],[\"而不是忙等\",{\"1\":{\"3236\":1,\"4359\":1}}],[\"而不是为了查询效率\",{\"1\":{\"2625\":1,\"5003\":1}}],[\"而不是一个具体的技术实现\",{\"1\":{\"1047\":1,\"4080\":1}}],[\"而不是四次\",{\"1\":{\"1019\":1}}],[\"而不用改变他的底层数据结构\",{\"1\":{\"806\":1}}],[\"而int的取值范围是\",{\"1\":{\"996\":1}}],[\"而被移掉的部分\",{\"1\":{\"976\":1}}],[\"而链表的特点是\",{\"1\":{\"954\":1}}],[\"而capacity又是2的幂\",{\"1\":{\"940\":1}}],[\"而hashtable采用的是直接取模\",{\"1\":{\"1000\":1}}],[\"而hashtable中也没有indexof方法\",{\"1\":{\"1000\":1}}],[\"而hashmap中的length也确实是2的倍数\",{\"1\":{\"981\":1}}],[\"而hashmap并没有\",{\"1\":{\"899\":1}}],[\"而hash\",{\"1\":{\"960\":1}}],[\"而hash冲突发生的概率较小\",{\"1\":{\"873\":1,\"3981\":1}}],[\"而由于历史原因\",{\"1\":{\"891\":1,\"894\":1}}],[\"而选择8作为临界值\",{\"1\":{\"880\":1,\"3988\":1}}],[\"而一个bin中链表长度达到8个元素的概率为0\",{\"1\":{\"879\":1,\"3987\":1}}],[\"而jdk1\",{\"1\":{\"869\":1,\"3977\":1}}],[\"而这些功能gateway天然支持\",{\"1\":{\"3449\":1,\"5718\":1}}],[\"而这些模板方法会调用使用者重写的方法\",{\"1\":{\"3080\":1,\"4436\":1}}],[\"而这样会出现频繁地对线程运行状态的切换\",{\"1\":{\"3237\":1,\"4360\":1}}],[\"而这个表就叫做彩虹表\",{\"1\":{\"3608\":1}}],[\"而这个通过键值求取下标的操作就叫做哈希\",{\"1\":{\"983\":1}}],[\"而这个过程中需要调用其他语言的本地库接口\",{\"1\":{\"182\":1,\"3831\":1}}],[\"而这一点是vector无法做到的\",{\"1\":{\"806\":1}}],[\"而arraylist和vector中同名方法的方法体内容并无太大差异\",{\"1\":{\"801\":1}}],[\"而arraylist每次对size增长50\",{\"1\":{\"743\":1}}],[\"而vector没有\",{\"0\":{\"746\":1}}],[\"而按照索引位置访问相对比较少\",{\"1\":{\"721\":1}}],[\"而对于没有实现接口的对象\",{\"1\":{\"1046\":1,\"4079\":1}}],[\"而对内存的操作\",{\"1\":{\"599\":1}}],[\"而对具体的实现方式不做限制\",{\"1\":{\"569\":1}}],[\"而组合关系描述的是\",{\"1\":{\"551\":1}}],[\"而应该是组合关系\",{\"1\":{\"546\":1}}],[\"而且消息积压概率比较小的情况下\",{\"1\":{\"3537\":1,\"5806\":1}}],[\"而且大部分的系统都是\",{\"1\":{\"3259\":1,\"4487\":1}}],[\"而且支持\",{\"1\":{\"2959\":1,\"5337\":1}}],[\"而且能保存图片\",{\"1\":{\"2920\":1,\"5298\":1}}],[\"而且事务在执行过程中发生错误\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"而且记录锁是有\",{\"1\":{\"2783\":1,\"5161\":1}}],[\"而且意向锁之间也不会发生冲突\",{\"1\":{\"2748\":1,\"5126\":1}}],[\"而且由于\",{\"1\":{\"2701\":1,\"5079\":1}}],[\"而且聚簇索引的叶子节点还存放着数据\",{\"1\":{\"2638\":1,\"5016\":1}}],[\"而且最大的缺陷就是崩溃后无法安全恢复\",{\"1\":{\"2561\":1,\"4939\":1}}],[\"而且没有任何已知的转发地址\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"而且在对传输速率要求不高的情况下\",{\"1\":{\"5533\":1}}],[\"而且在\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"而且挂的没超过半数的时候\",{\"1\":{\"2133\":1,\"4738\":1}}],[\"而且只在主线程中运行\",{\"1\":{\"1493\":1,\"1661\":1,\"1829\":1,\"1997\":1,\"4920\":1}}],[\"而且\",{\"1\":{\"1428\":1,\"1596\":1,\"1764\":1,\"1932\":1,\"4855\":1}}],[\"而且仍然需要\",{\"1\":{\"1413\":1,\"1581\":1,\"1749\":1,\"1917\":1,\"4840\":1}}],[\"而且我们不知道到底能读写多少数据\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"而且随着topic的增加\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"而且也可能会出现\",{\"1\":{\"1123\":1,\"4156\":1}}],[\"而且不同的客户在每次访问中根据需要会去访问不同的数据库\",{\"1\":{\"1073\":1,\"4106\":1}}],[\"而且一定是2的指数\",{\"1\":{\"889\":1}}],[\"而且一旦发生这种异常状况\",{\"1\":{\"442\":1,\"3901\":1}}],[\"而且这样做\",{\"1\":{\"577\":1}}],[\"而且停顿用户线程将大幅度提高收集效率\",{\"1\":{\"380\":1}}],[\"而是非常明显地加快了反向查询的速度\",{\"1\":{\"3589\":1}}],[\"而是一个java类库\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"而是一个特殊值\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"而是通过\",{\"1\":{\"3340\":1,\"4597\":1}}],[\"而是会按照延迟的时间长短对任务进行排序\",{\"1\":{\"3311\":1,\"4576\":1}}],[\"而是会等待\",{\"1\":{\"3294\":1,\"4558\":1}}],[\"而是将任务回退给调用者\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"而是同时以插队方式直接尝试获取锁\",{\"1\":{\"3271\":1,\"4499\":1}}],[\"而是由前一次在同一个锁上的自旋\",{\"1\":{\"3256\":1}}],[\"而是检测\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"而是再执行完插入语句后就会立即释放\",{\"1\":{\"2756\":1,\"5134\":1}}],[\"而是专门定制了一致性协议叫做\",{\"1\":{\"2108\":1,\"4713\":1}}],[\"而是只需要一个配置spring\",{\"1\":{\"1181\":1,\"4214\":1}}],[\"而是自己再做一层封装\",{\"1\":{\"591\":1}}],[\"而是业界公认的\",{\"1\":{\"560\":1}}],[\"而是来自\",{\"1\":{\"533\":1}}],[\"而是把这个请求委派给父类加载器去完成\",{\"1\":{\"425\":1,\"3882\":1}}],[\"而是根据需要去动态加载\",{\"1\":{\"398\":1,\"3853\":1}}],[\"而是分为一块较大的\",{\"1\":{\"334\":1}}],[\"而\",{\"1\":{\"374\":1,\"542\":1,\"576\":1,\"744\":1,\"864\":1,\"1132\":1,\"1379\":2,\"1457\":1,\"1547\":2,\"1625\":1,\"1715\":2,\"1793\":1,\"1883\":2,\"1961\":1,\"2136\":1,\"2406\":1,\"2407\":1,\"2408\":1,\"2469\":1,\"2477\":1,\"2507\":1,\"2510\":1,\"2512\":1,\"2565\":1,\"2571\":1,\"2575\":1,\"2578\":1,\"2594\":1,\"2596\":1,\"2772\":1,\"2852\":1,\"2921\":1,\"3207\":1,\"3209\":1,\"3265\":1,\"3274\":1,\"4073\":1,\"4165\":1,\"4331\":1,\"4333\":1,\"4493\":1,\"4502\":1,\"4741\":1,\"4806\":2,\"4884\":1,\"4943\":1,\"4949\":1,\"4953\":1,\"4956\":1,\"4972\":1,\"4974\":1,\"5150\":1,\"5230\":1,\"5299\":1,\"5567\":1,\"5575\":1,\"5605\":1,\"5608\":1,\"5610\":1}}],[\"而它的目标是达到一个可控制的吞吐量\",{\"1\":{\"356\":1}}],[\"而元空间存在于本地内存\",{\"1\":{\"283\":1}}],[\"而永久代\",{\"1\":{\"282\":1}}],[\"而本地方法栈用于管理本地方法的调用\",{\"1\":{\"220\":1}}],[\"而字节码文件只是\",{\"1\":{\"182\":1,\"3831\":1}}],[\"再者服务器的数据库中也是密文存储密码\",{\"1\":{\"3600\":1}}],[\"再者服务器的数据库中也是明文存储密码\",{\"1\":{\"3594\":1}}],[\"再进入内层方法会自动获取锁\",{\"1\":{\"3247\":1,\"4477\":1}}],[\"再来说说元数据锁\",{\"1\":{\"2723\":1,\"5101\":1}}],[\"再如普通索引\",{\"1\":{\"2650\":1,\"5028\":1}}],[\"再走一遍主索引\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"再将\",{\"1\":{\"2543\":1,\"5641\":1}}],[\"再下面是\",{\"1\":{\"2527\":1,\"5625\":1}}],[\"再构造链路层帧\",{\"1\":{\"2493\":1,\"5591\":1}}],[\"再加上\",{\"1\":{\"2401\":1}}],[\"再加载新的对象放到伊甸园区\",{\"1\":{\"264\":1}}],[\"再插入新的\",{\"1\":{\"2188\":1,\"4310\":1}}],[\"再反馈ack嘛\",{\"1\":{\"2179\":1,\"4301\":1}}],[\"再由内核返回产生了事件的连接\",{\"1\":{\"1376\":1,\"1544\":1,\"1712\":1,\"1880\":1,\"4803\":1}}],[\"再访问一次后还会被继续访问到\",{\"1\":{\"1335\":1}}],[\"再重启\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"再去根目录下找配置文件\",{\"1\":{\"1151\":1,\"4184\":1}}],[\"再查半成品缓存\",{\"1\":{\"1133\":1,\"4166\":1}}],[\"再从链表中找出正确的元素\",{\"1\":{\"956\":1}}],[\"再说一个小问题\",{\"1\":{\"594\":1}}],[\"再次进入网关开始访问\",{\"1\":{\"3481\":1,\"5750\":1}}],[\"再次提交更新\",{\"1\":{\"3102\":1,\"4383\":1}}],[\"再次查询账户余额大于\",{\"1\":{\"2829\":1,\"5207\":1}}],[\"再次读取该数据时\",{\"1\":{\"2823\":1,\"5201\":1}}],[\"再次强调\",{\"1\":{\"2477\":1,\"5575\":1}}],[\"再次印证了\",{\"1\":{\"458\":1}}],[\"再次触发\",{\"1\":{\"269\":1}}],[\"再交由\",{\"1\":{\"182\":1,\"3831\":1}}],[\"再把字节码加载到内存中\",{\"1\":{\"182\":1,\"3831\":1}}],[\"jing\",{\"0\":{\"5837\":1}}],[\"jianshu\",{\"1\":{\"3656\":1}}],[\"jit编译后的代码等数据\",{\"1\":{\"282\":1}}],[\"jit\",{\"1\":{\"277\":1}}],[\"jmeter测试\",{\"1\":{\"3576\":1}}],[\"jwt\",{\"1\":{\"3480\":1,\"3481\":1,\"3482\":1,\"3484\":1,\"3485\":1,\"3558\":3,\"5749\":1,\"5750\":1,\"5751\":1,\"5753\":1,\"5754\":1,\"5827\":3}}],[\"juc\",{\"1\":{\"3255\":1,\"3361\":1,\"4484\":1}}],[\"j++\",{\"1\":{\"3124\":1,\"4406\":1}}],[\"job\",{\"1\":{\"2023\":1,\"2024\":1,\"4628\":1,\"4629\":1}}],[\"join\",{\"0\":{\"2902\":1,\"5280\":1},\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"json\",{\"1\":{\"1060\":1,\"4093\":1}}],[\"j\",{\"0\":{\"5830\":1,\"5843\":1},\"1\":{\"1014\":1,\"3123\":1,\"4405\":1}}],[\"jenkins\",{\"1\":{\"1014\":1,\"1015\":1}}],[\"jdbc防止sql注入\",{\"0\":{\"2874\":1,\"5252\":1}}],[\"jdbctemplate\",{\"1\":{\"1072\":1,\"4105\":1}}],[\"jdbc连接数据库\",{\"1\":{\"519\":1,\"3970\":1}}],[\"jdk原生线程池threadpoolexecutor提供了如下几个public的setter方法\",{\"1\":{\"3346\":1,\"4603\":1}}],[\"jdk的源代码\",{\"1\":{\"1032\":1}}],[\"jdk在一个小小的hash方法上就有很多考虑\",{\"1\":{\"1031\":1}}],[\"jdk\",{\"0\":{\"848\":1,\"863\":1,\"4057\":1,\"4072\":1},\"1\":{\"402\":1,\"847\":1,\"856\":1,\"858\":1,\"864\":1,\"865\":2,\"1031\":1,\"1046\":2,\"1217\":1,\"3107\":1,\"3108\":1,\"3117\":1,\"3164\":1,\"3185\":1,\"3206\":1,\"3207\":1,\"3857\":1,\"4056\":1,\"4065\":1,\"4067\":1,\"4073\":1,\"4074\":2,\"4079\":2,\"4250\":1,\"4330\":1,\"4331\":1,\"4389\":1,\"4390\":1,\"4400\":1,\"4508\":1,\"4530\":1}}],[\"jdk8之前的版本中\",{\"1\":{\"896\":1}}],[\"jdk8\",{\"1\":{\"240\":2}}],[\"jdk1\",{\"1\":{\"227\":3,\"869\":1,\"884\":1,\"885\":1,\"3125\":1,\"3128\":1,\"3977\":1,\"4407\":1,\"4410\":1}}],[\"jre\",{\"1\":{\"403\":1,\"3858\":1}}],[\"jar包内配置等模式\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"jar等\",{\"1\":{\"402\":1,\"3857\":1}}],[\"jar\",{\"1\":{\"402\":3,\"403\":1,\"404\":1,\"3857\":3,\"3858\":1,\"3859\":1}}],[\"java框架\",{\"0\":{\"5845\":1}}],[\"java异常类层次结构\",{\"0\":{\"3890\":1}}],[\"java基础\",{\"0\":{\"3886\":1,\"3887\":1,\"5844\":1}}],[\"javac\",{\"1\":{\"3164\":1,\"4508\":1}}],[\"java内存屏障类型把上述两种内存屏障两两组合\",{\"1\":{\"3147\":1,\"4459\":1}}],[\"java内存模型规定\",{\"1\":{\"3137\":1,\"4450\":1}}],[\"java内存模型分为主内存和线程工作内存两大类\",{\"1\":{\"3134\":1,\"4446\":1}}],[\"java语言从\",{\"1\":{\"3128\":1,\"4410\":1}}],[\"java里的进程有哪些状态\",{\"0\":{\"1342\":1,\"1510\":1,\"1678\":1,\"1846\":1,\"4769\":1}}],[\"java高级\",{\"0\":{\"1043\":1,\"4076\":1}}],[\"java这样设计还是有一定的考虑在的\",{\"1\":{\"1001\":1}}],[\"java总采用按位与操作实现取模操作\",{\"1\":{\"983\":1}}],[\"java之所以使用位运算\",{\"1\":{\"969\":1}}],[\"java7\",{\"1\":{\"961\":1}}],[\"java7的永久代或jdk8的元空间\",{\"1\":{\"188\":1}}],[\"java中有的微服务有dubbo\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"java中规定这个长度只能是2的倍数\",{\"1\":{\"983\":1}}],[\"java中还有一个类hashtable\",{\"1\":{\"907\":1}}],[\"java中反射的用法非常非常多\",{\"1\":{\"493\":1,\"3944\":1}}],[\"java官方推荐的实现方式\",{\"0\":{\"528\":1},\"1\":{\"727\":1}}],[\"java反射机制是在运行状态中\",{\"1\":{\"477\":1,\"3928\":1}}],[\"javap\",{\"1\":{\"468\":1,\"3164\":1,\"3919\":1,\"4508\":1}}],[\"java解释器调用main方法执行开始执行程序\",{\"1\":{\"448\":1,\"3907\":1}}],[\"javaguide\",{\"1\":{\"294\":2,\"1148\":1,\"3181\":1,\"3218\":1,\"3361\":1,\"4181\":1,\"4342\":1,\"4526\":1,\"4615\":1}}],[\"java8\",{\"1\":{\"282\":1,\"961\":1}}],[\"java\",{\"0\":{\"532\":1,\"538\":1,\"562\":1,\"3912\":1,\"5831\":1,\"5832\":1},\"1\":{\"182\":1,\"186\":1,\"199\":1,\"204\":1,\"208\":4,\"209\":2,\"220\":2,\"223\":2,\"229\":2,\"240\":1,\"241\":2,\"243\":1,\"277\":1,\"279\":1,\"280\":2,\"291\":1,\"294\":1,\"300\":1,\"303\":2,\"309\":1,\"394\":1,\"396\":1,\"402\":1,\"403\":1,\"405\":1,\"420\":1,\"428\":2,\"432\":1,\"454\":1,\"465\":1,\"468\":2,\"492\":1,\"501\":1,\"505\":1,\"508\":1,\"523\":1,\"525\":1,\"527\":1,\"533\":1,\"534\":1,\"536\":1,\"539\":2,\"543\":1,\"546\":1,\"563\":5,\"564\":1,\"565\":1,\"567\":1,\"570\":1,\"580\":1,\"586\":1,\"588\":3,\"589\":1,\"590\":1,\"595\":1,\"609\":1,\"678\":1,\"727\":1,\"749\":2,\"752\":3,\"847\":1,\"849\":1,\"861\":1,\"967\":1,\"997\":1,\"1013\":1,\"1016\":1,\"1017\":1,\"1019\":1,\"1022\":1,\"1026\":1,\"1027\":1,\"1029\":2,\"1033\":1,\"1168\":1,\"1221\":1,\"1353\":1,\"1356\":1,\"1432\":1,\"1452\":1,\"1457\":4,\"1521\":1,\"1524\":1,\"1600\":1,\"1620\":1,\"1625\":4,\"1689\":1,\"1692\":1,\"1768\":1,\"1788\":1,\"1793\":4,\"1857\":1,\"1860\":1,\"1936\":1,\"1956\":1,\"1961\":4,\"2573\":1,\"2597\":1,\"3107\":1,\"3108\":1,\"3128\":1,\"3164\":1,\"3168\":1,\"3181\":4,\"3200\":3,\"3206\":1,\"3208\":1,\"3214\":1,\"3218\":2,\"3249\":1,\"3266\":1,\"3274\":1,\"3280\":1,\"3286\":4,\"3298\":1,\"3337\":1,\"3340\":1,\"3361\":4,\"3578\":1,\"3831\":1,\"3849\":1,\"3851\":1,\"3857\":1,\"3858\":1,\"3860\":1,\"3877\":1,\"3885\":2,\"3891\":1,\"3913\":1,\"3916\":1,\"3919\":2,\"3943\":1,\"3952\":1,\"3956\":1,\"3959\":1,\"4056\":1,\"4058\":1,\"4070\":1,\"4201\":1,\"4254\":1,\"4330\":1,\"4332\":1,\"4338\":1,\"4342\":2,\"4389\":1,\"4390\":1,\"4410\":1,\"4479\":1,\"4494\":1,\"4502\":1,\"4508\":1,\"4513\":1,\"4526\":2,\"4544\":1,\"4550\":4,\"4562\":1,\"4594\":1,\"4597\":1,\"4615\":2,\"4780\":1,\"4783\":1,\"4859\":1,\"4879\":1,\"4884\":4,\"4951\":1,\"4975\":1,\"5829\":1}}],[\"jvm也会越来越聪明\",{\"1\":{\"3256\":1}}],[\"jvm对程序的锁的状态预测会越来越准确\",{\"1\":{\"3256\":1}}],[\"jvm会把该线程置为阻塞状态\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"jvm会把该线程放入\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"jvm的字节码解释器就需要通过改变pc寄存器的值来明确下一条应该执行什么样的字节码指令\",{\"1\":{\"193\":1}}],[\"jvm整体架构\",{\"1\":{\"184\":1}}],[\"jvm\",{\"0\":{\"174\":1,\"175\":1,\"177\":1,\"3823\":1,\"3824\":1,\"3826\":1},\"1\":{\"182\":1,\"185\":1,\"198\":1,\"199\":1,\"202\":1,\"205\":1,\"227\":1,\"243\":1,\"251\":2,\"253\":1,\"256\":1,\"257\":1,\"258\":1,\"262\":1,\"264\":1,\"272\":1,\"274\":1,\"282\":1,\"283\":1,\"289\":1,\"292\":1,\"294\":1,\"395\":1,\"396\":1,\"398\":1,\"401\":1,\"428\":1,\"838\":2,\"841\":1,\"844\":2,\"3175\":1,\"3176\":2,\"3206\":1,\"3207\":1,\"3240\":1,\"3831\":1,\"3850\":1,\"3851\":1,\"3853\":1,\"3856\":1,\"3885\":1,\"4047\":2,\"4050\":1,\"4053\":2,\"4330\":1,\"4331\":1,\"4363\":1,\"4520\":1,\"4521\":2}}],[\"会面临的\",{\"1\":{\"3533\":1,\"5802\":1}}],[\"会解决这个问题\",{\"1\":{\"3259\":1,\"4487\":1}}],[\"会占用cpu时间片\",{\"1\":{\"3251\":1,\"4481\":1}}],[\"会在\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"会尝试获取当前\",{\"1\":{\"3176\":1,\"4521\":1}}],[\"会尝试获取实例对象的锁\",{\"1\":{\"3176\":1,\"4521\":1}}],[\"会尝试获取对象的锁\",{\"1\":{\"3170\":1,\"4515\":1}}],[\"会封装成node加入到aqs中去\",{\"1\":{\"3069\":1,\"4423\":1}}],[\"会进入队列等待\",{\"1\":{\"3271\":1,\"4499\":1}}],[\"会进行哪些操作\",{\"1\":{\"3025\":1,\"3028\":1,\"5403\":1,\"5406\":1}}],[\"会进⾏单例对象的创建\",{\"1\":{\"821\":1,\"4030\":1}}],[\"会阻塞\",{\"1\":{\"2969\":1,\"5347\":1}}],[\"会阻塞后续该表的所有\",{\"1\":{\"2738\":1,\"5116\":1}}],[\"会加上\",{\"1\":{\"2848\":1,\"5226\":1}}],[\"会加一个表级别的\",{\"1\":{\"2757\":1,\"5135\":1}}],[\"会对记录加上读写锁\",{\"1\":{\"2835\":1,\"5213\":1}}],[\"会被回滚到事务开始前的状态\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"会被分配一个唯一的pid\",{\"1\":{\"1302\":1,\"5494\":1}}],[\"会为被\",{\"1\":{\"2761\":1,\"5139\":1}}],[\"会影响插入性能\",{\"1\":{\"2759\":1,\"5137\":1}}],[\"会影响并发性能\",{\"1\":{\"2721\":1,\"5099\":1}}],[\"会自动增加等待时间\",{\"1\":{\"3256\":1}}],[\"会自动给这个表加上\",{\"1\":{\"2724\":1,\"5102\":1}}],[\"会自动先检查表中是否有唯一索引且不允许存在\",{\"1\":{\"2619\":1,\"4997\":1}}],[\"会释放当前会话的所有表锁\",{\"1\":{\"2718\":1,\"5096\":1}}],[\"会先创建\",{\"1\":{\"2701\":1,\"5079\":1}}],[\"会去问它的根域名服务器\",{\"1\":{\"2537\":1,\"5635\":1}}],[\"会发生什么\",{\"0\":{\"2424\":1,\"2425\":1,\"2426\":1,\"2431\":1,\"2432\":1,\"2433\":1,\"2434\":1},\"1\":{\"2309\":1,\"2310\":1,\"2311\":1,\"2316\":1,\"2317\":1,\"2318\":1,\"2319\":1}}],[\"会有下面这样日志\",{\"1\":{\"3572\":1}}],[\"会有一定的开销\",{\"1\":{\"2389\":1}}],[\"会有比较大的延迟\",{\"1\":{\"2195\":1,\"4317\":1}}],[\"会有数据库不一致的问题\",{\"0\":{\"2189\":1,\"4311\":1}}],[\"会向初始化投票一样首先给自己投票\",{\"1\":{\"2128\":1,\"4733\":1}}],[\"会导致\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"会导致所有的服务器间同步状态\",{\"1\":{\"2097\":1,\"4702\":1}}],[\"会导致相同的key\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"会将自己的状态\",{\"1\":{\"2128\":1,\"4733\":1}}],[\"会将每秒请求数\",{\"1\":{\"2083\":1,\"4688\":1}}],[\"会将数据发给子线程里的\",{\"1\":{\"1485\":1,\"1653\":1,\"1821\":1,\"1989\":1,\"4912\":1}}],[\"会执行数据清除工作\",{\"1\":{\"1252\":1,\"5444\":1}}],[\"会清除下一个分区片段的数据\",{\"1\":{\"1251\":1,\"5443\":1}}],[\"会根据统一信息\",{\"1\":{\"2669\":1,\"5047\":1}}],[\"会根据联合索引中的字段顺序\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"会根据类别搜索\",{\"0\":{\"2183\":1,\"4305\":1}}],[\"会根据\",{\"1\":{\"1053\":1,\"4086\":1}}],[\"会触发扩容\",{\"1\":{\"950\":1}}],[\"会比使用\",{\"1\":{\"604\":1}}],[\"会读取配置文件applicationcontext\",{\"1\":{\"519\":1,\"3970\":1}}],[\"会走默认无参构造方法\",{\"1\":{\"510\":1,\"3961\":1}}],[\"会产生大量不连续的内存碎片\",{\"1\":{\"328\":1}}],[\"会抛出\",{\"1\":{\"292\":1}}],[\"会给对象定义一个对象年轻计数器\",{\"1\":{\"256\":1}}],[\"会把数据锁住\",{\"1\":{\"3243\":1,\"4473\":1}}],[\"会把数据库打挂\",{\"0\":{\"2201\":1,\"4323\":1}}],[\"会把首节点唤醒\",{\"1\":{\"3068\":1,\"4422\":1}}],[\"会把磁盘的数据拷贝到内核的缓冲区里\",{\"1\":{\"1409\":1,\"1577\":1,\"1745\":1,\"1913\":1,\"4836\":1}}],[\"会把自己消费过的消息的offset提交一下\",{\"1\":{\"1298\":1,\"5490\":1}}],[\"会把存活的对象转移到\",{\"1\":{\"258\":1}}],[\"会把\",{\"1\":{\"182\":1,\"3831\":1}}],[\"会使用跳表作为\",{\"1\":{\"2954\":1,\"5332\":1}}],[\"会使用哈希表作为\",{\"1\":{\"2946\":1,\"5324\":1}}],[\"会使用整数集合作为\",{\"1\":{\"2938\":1,\"5316\":1}}],[\"会使用双向链表作为\",{\"1\":{\"2931\":1,\"5309\":1}}],[\"会使用压缩列表作为\",{\"1\":{\"2930\":1,\"2945\":1,\"2953\":1,\"5308\":1,\"5323\":1,\"5331\":1}}],[\"会使用该\",{\"1\":{\"2859\":1,\"5237\":1}}],[\"会使用\",{\"1\":{\"37\":1,\"1046\":2,\"3691\":1,\"4079\":2}}],[\"本质上是多路复用+轮询\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"本子网内不会有设备成功接收\",{\"1\":{\"2489\":1,\"5587\":1}}],[\"本身可能会丢数据\",{\"1\":{\"3534\":1,\"5803\":1}}],[\"本身却是\",{\"1\":{\"3274\":1,\"4502\":1}}],[\"本身去实现的\",{\"1\":{\"3274\":1,\"4502\":1}}],[\"本身没有实现任何接口\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"本身的处理既简单又高效\",{\"1\":{\"2401\":1}}],[\"本身提供了很多接口可以获取当前项目的各项运行状态指标\",{\"1\":{\"1201\":1,\"4234\":1}}],[\"本身就是对方法的增强\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"本章节涉及到的\",{\"1\":{\"1134\":1,\"4167\":1}}],[\"本来就慢\",{\"1\":{\"1001\":1}}],[\"本地\",{\"1\":{\"2537\":1,\"2539\":1,\"2541\":1,\"2543\":1,\"5635\":1,\"5637\":1,\"5639\":1,\"5641\":1}}],[\"本地域名服务器收到客户端的请求后\",{\"1\":{\"2537\":1,\"5635\":1}}],[\"本地方法栈\",{\"1\":{\"3136\":1,\"4448\":1}}],[\"本地方法栈中引用的对象\",{\"1\":{\"305\":1}}],[\"本地方法栈也是线程私有的\",{\"1\":{\"221\":1}}],[\"本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区\",{\"1\":{\"219\":1}}],[\"本地方法区\",{\"1\":{\"187\":1}}],[\"本地库接口\",{\"1\":{\"181\":1,\"3830\":1}}],[\"本页面就是一个示例\",{\"1\":{\"11\":1,\"3665\":1}}],[\"duo\",{\"0\":{\"5840\":1}}],[\"durability\",{\"1\":{\"2809\":1,\"5187\":1}}],[\"dubbo\",{\"1\":{\"2060\":1,\"4665\":1}}],[\"drop\",{\"1\":{\"2692\":1,\"5070\":1}}],[\"dns\",{\"0\":{\"2523\":1,\"5621\":1},\"1\":{\"2402\":1,\"2455\":1,\"2524\":1,\"2529\":1,\"2530\":1,\"2531\":1,\"2532\":2,\"2533\":2,\"2534\":3,\"2536\":3,\"2537\":1,\"2538\":2,\"2539\":1,\"2540\":1,\"2541\":3,\"2542\":2,\"2543\":1,\"2548\":1,\"5553\":1,\"5622\":1,\"5627\":1,\"5628\":1,\"5629\":1,\"5630\":2,\"5631\":2,\"5632\":3,\"5634\":3,\"5635\":1,\"5636\":2,\"5637\":1,\"5638\":1,\"5639\":3,\"5640\":2,\"5641\":1}}],[\"db\",{\"1\":{\"2192\":1,\"2854\":2,\"2857\":1,\"2858\":1,\"2859\":1,\"3002\":1,\"3003\":1,\"3004\":1,\"3006\":1,\"3009\":1,\"3462\":1,\"4314\":1,\"5232\":2,\"5235\":1,\"5236\":1,\"5237\":1,\"5380\":1,\"5381\":1,\"5382\":1,\"5384\":1,\"5387\":1,\"5731\":1}}],[\"dma\",{\"1\":{\"1409\":1,\"1411\":1,\"1421\":2,\"1422\":1,\"1423\":1,\"1424\":1,\"1427\":1,\"1428\":1,\"1577\":1,\"1579\":1,\"1589\":2,\"1590\":1,\"1591\":1,\"1592\":1,\"1595\":1,\"1596\":1,\"1745\":1,\"1747\":1,\"1757\":2,\"1758\":1,\"1759\":1,\"1760\":1,\"1763\":1,\"1764\":1,\"1913\":1,\"1915\":1,\"1925\":2,\"1926\":1,\"1927\":1,\"1928\":1,\"1931\":1,\"1932\":1,\"4836\":1,\"4838\":1,\"4848\":2,\"4849\":1,\"4850\":1,\"4851\":1,\"4854\":1,\"4855\":1}}],[\"daemon\",{\"1\":{\"2021\":1,\"2022\":1,\"4626\":1,\"4627\":1}}],[\"dao接口原理\",{\"0\":{\"1202\":1,\"4235\":1}}],[\"database\",{\"0\":{\"5839\":1}}],[\"data\",{\"1\":{\"179\":1,\"182\":1,\"752\":4,\"754\":1,\"2582\":1,\"2594\":2,\"2598\":3,\"2599\":2,\"3828\":1,\"3831\":1,\"4960\":1,\"4972\":2,\"4976\":3,\"4977\":2}}],[\"digest\",{\"1\":{\"3581\":1}}],[\"dict\",{\"1\":{\"3006\":1,\"5384\":1}}],[\"dir\",{\"1\":{\"2976\":1,\"5354\":1}}],[\"directory\",{\"1\":{\"3571\":1}}],[\"direct\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"dirs\",{\"1\":{\"403\":1,\"3858\":1}}],[\"dialect\",{\"1\":{\"1215\":1,\"4248\":1}}],[\"distribution\",{\"0\":{\"5836\":1}}],[\"discardpolicy\",{\"1\":{\"3286\":1,\"3303\":1,\"4550\":1,\"4568\":1}}],[\"discardoldestpolicy\",{\"1\":{\"3286\":1,\"3304\":1,\"4550\":1,\"4569\":1}}],[\"dispatch\",{\"1\":{\"1464\":2,\"1466\":1,\"1481\":1,\"1632\":2,\"1634\":1,\"1649\":1,\"1800\":2,\"1802\":1,\"1817\":1,\"1968\":2,\"1970\":1,\"1985\":1,\"4891\":2,\"4893\":1,\"4908\":1}}],[\"dispatcherservlet\",{\"1\":{\"1053\":2,\"1056\":1,\"1057\":1,\"1058\":1,\"1064\":1,\"4086\":2,\"4089\":1,\"4090\":1,\"4091\":1,\"4097\":1}}],[\"disabled\",{\"1\":{\"999\":1}}],[\"dcl\",{\"1\":{\"819\":1,\"4028\":1}}],[\"docker容器网络环境\",{\"1\":{\"2025\":1,\"4630\":1}}],[\"docker的架构\",{\"0\":{\"2018\":1,\"4623\":1}}],[\"docker\",{\"0\":{\"2011\":1,\"2012\":1,\"2013\":1,\"4616\":1,\"4617\":1,\"4618\":1},\"1\":{\"2014\":1,\"2015\":1,\"2016\":1,\"2019\":1,\"2021\":2,\"2022\":4,\"2023\":2,\"2024\":1,\"2025\":1,\"2026\":1,\"3445\":1,\"4619\":1,\"4620\":1,\"4621\":1,\"4624\":1,\"4626\":2,\"4627\":4,\"4628\":2,\"4629\":1,\"4630\":1,\"4631\":1,\"5714\":1}}],[\"download\",{\"1\":{\"1295\":1,\"1304\":2,\"5487\":1,\"5496\":2}}],[\"dos\",{\"1\":{\"1018\":1}}],[\"do\",{\"1\":{\"786\":1,\"788\":1}}],[\"double\",{\"1\":{\"452\":1,\"819\":1,\"1061\":1,\"2887\":1,\"3911\":1,\"4028\":1,\"4094\":1,\"5265\":1}}],[\"dlgdlgd\",{\"1\":{\"607\":1}}],[\"d\",{\"1\":{\"457\":1,\"3575\":1}}],[\"delayedworkqueue\",{\"1\":{\"3311\":3,\"4576\":3}}],[\"deleted\",{\"1\":{\"2857\":1,\"5235\":1}}],[\"delete\",{\"1\":{\"1221\":1,\"1235\":1,\"2691\":1,\"2857\":1,\"4254\":1,\"4268\":1,\"5069\":1,\"5235\":1}}],[\"delegation\",{\"1\":{\"419\":1,\"3875\":1}}],[\"decimal\",{\"0\":{\"2886\":1,\"5264\":1},\"1\":{\"2888\":1,\"2889\":2,\"2890\":2,\"5266\":1,\"5267\":2,\"5268\":2}}],[\"dead\",{\"1\":{\"1348\":1,\"1516\":1,\"1684\":1,\"1852\":1,\"4775\":1}}],[\"depth\",{\"1\":{\"1304\":1,\"5496\":1}}],[\"dependencies\",{\"1\":{\"1189\":1,\"4222\":1}}],[\"dependency>\",{\"1\":{\"1169\":1,\"4202\":1}}],[\"deprecated\",{\"1\":{\"564\":1}}],[\"developer\",{\"1\":{\"2193\":1,\"4315\":1}}],[\"devtools<\",{\"1\":{\"1169\":1,\"4202\":1}}],[\"devtools\",{\"1\":{\"1168\":2,\"4201\":2}}],[\"dev\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"des\",{\"1\":{\"3642\":1,\"3645\":1}}],[\"design\",{\"1\":{\"814\":1,\"1148\":1,\"4023\":1,\"4181\":1}}],[\"desc\",{\"1\":{\"83\":1,\"3737\":1}}],[\"defaultthreadfactory\",{\"1\":{\"3286\":1,\"4550\":1}}],[\"default\",{\"1\":{\"778\":1,\"911\":1,\"917\":1,\"921\":1,\"1091\":1,\"4124\":1}}],[\"defaultcapacity\",{\"1\":{\"778\":1}}],[\"defaultwriteobject\",{\"1\":{\"749\":1}}],[\"deque<integer>\",{\"1\":{\"537\":1,\"568\":1}}],[\"deque\",{\"0\":{\"528\":1,\"581\":1},\"1\":{\"535\":2,\"567\":1,\"580\":1,\"582\":1,\"583\":1,\"586\":1,\"587\":1,\"591\":1,\"592\":2,\"595\":1,\"727\":1}}],[\"details\",{\"1\":{\"520\":1,\"607\":1,\"653\":1,\"868\":1,\"897\":1,\"1209\":1,\"1242\":1,\"1295\":1,\"1304\":1,\"1318\":1,\"2877\":1,\"3056\":1,\"3218\":1,\"3276\":1,\"3656\":2,\"3888\":1,\"3971\":1,\"3976\":1,\"4242\":1,\"4275\":1,\"4342\":1,\"4504\":1,\"5255\":1,\"5434\":1,\"5487\":1,\"5496\":1,\"5510\":1}}],[\"dynamic\",{\"1\":{\"214\":1}}],[\"c|sort\",{\"1\":{\"3575\":1}}],[\"cs\",{\"0\":{\"5838\":1}}],[\"csrf\",{\"1\":{\"3484\":1,\"5753\":1}}],[\"csdn\",{\"1\":{\"520\":1,\"607\":1,\"653\":1,\"868\":1,\"897\":1,\"1209\":1,\"1242\":1,\"1295\":1,\"1304\":1,\"1318\":1,\"2877\":1,\"3056\":1,\"3218\":1,\"3276\":1,\"3656\":2,\"3888\":1,\"3971\":1,\"3976\":1,\"4242\":1,\"4275\":1,\"4342\":1,\"4504\":1,\"5255\":1,\"5434\":1,\"5487\":1,\"5496\":1,\"5510\":1}}],[\"cmpxchg\",{\"1\":{\"3106\":1,\"4388\":1}}],[\"cms\",{\"1\":{\"344\":1,\"352\":1,\"362\":1,\"373\":1}}],[\"creates\",{\"1\":{\"3288\":2,\"4552\":2}}],[\"createmap\",{\"1\":{\"3193\":1,\"4537\":1}}],[\"creator\",{\"1\":{\"2861\":1,\"2866\":1,\"5239\":1,\"5244\":1}}],[\"craig\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"crud\",{\"1\":{\"2725\":1,\"2727\":1,\"2729\":1,\"2738\":1,\"5103\":1,\"5105\":1,\"5107\":1,\"5116\":1}}],[\"city\",{\"1\":{\"2673\":1,\"5051\":1}}],[\"cp\",{\"1\":{\"2157\":3,\"2159\":2,\"4762\":3,\"4764\":2}}],[\"cpu达到100\",{\"1\":{\"3426\":1,\"5706\":1}}],[\"cpu太快\",{\"1\":{\"674\":1,\"4016\":1}}],[\"cpu会不停的做任务切换\",{\"1\":{\"195\":1}}],[\"cpu\",{\"1\":{\"182\":1,\"348\":1,\"353\":1,\"370\":1,\"373\":1,\"553\":2,\"1374\":1,\"1410\":1,\"1413\":1,\"1421\":1,\"1427\":1,\"1428\":1,\"1472\":1,\"1475\":1,\"1487\":1,\"1542\":1,\"1578\":1,\"1581\":1,\"1589\":1,\"1595\":1,\"1596\":1,\"1640\":1,\"1643\":1,\"1655\":1,\"1710\":1,\"1746\":1,\"1749\":1,\"1757\":1,\"1763\":1,\"1764\":1,\"1808\":1,\"1811\":1,\"1823\":1,\"1878\":1,\"1914\":1,\"1917\":1,\"1925\":1,\"1931\":1,\"1932\":1,\"1976\":1,\"1979\":1,\"1991\":1,\"2899\":1,\"2904\":1,\"2994\":1,\"2995\":1,\"2996\":1,\"3095\":1,\"3106\":2,\"3120\":1,\"3121\":1,\"3127\":1,\"3254\":1,\"3255\":1,\"3270\":1,\"3272\":1,\"3328\":6,\"3329\":2,\"3831\":1,\"4371\":1,\"4388\":2,\"4402\":1,\"4403\":1,\"4409\":1,\"4483\":1,\"4484\":1,\"4498\":1,\"4500\":1,\"4585\":6,\"4586\":2,\"4801\":1,\"4837\":1,\"4840\":1,\"4848\":1,\"4854\":1,\"4855\":1,\"4899\":1,\"4902\":1,\"4914\":1,\"5277\":1,\"5282\":1,\"5372\":1,\"5373\":1,\"5374\":1}}],[\"cgroup\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"cglibcode\",{\"1\":{\"858\":1,\"4067\":1}}],[\"cglib\",{\"0\":{\"855\":1,\"863\":1,\"4064\":1,\"4072\":1},\"1\":{\"843\":1,\"847\":1,\"857\":1,\"858\":2,\"859\":1,\"864\":2,\"1046\":1,\"4052\":1,\"4056\":1,\"4066\":1,\"4067\":2,\"4068\":1,\"4073\":2,\"4079\":1}}],[\"ctl\",{\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"4806\":1}}],[\"cyclicbarrier\",{\"1\":{\"1356\":1,\"1524\":1,\"1692\":1,\"1860\":1,\"4783\":1}}],[\"c2订阅t0\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"c2\",{\"1\":{\"1278\":1,\"1282\":1,\"1292\":1,\"5470\":1,\"5474\":1,\"5484\":1}}],[\"c2多分配两个分区了\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"c2多分配一个分区\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"c10k\",{\"1\":{\"1383\":1,\"1396\":3,\"1551\":1,\"1564\":3,\"1719\":1,\"1732\":3,\"1887\":1,\"1900\":3,\"4810\":1,\"4823\":3}}],[\"c1订阅t0和t1\",{\"1\":{\"1282\":1,\"5474\":1}}],[\"c1\",{\"1\":{\"1277\":1,\"1282\":1,\"1292\":1,\"5469\":1,\"5474\":1,\"5484\":1}}],[\"c0\",{\"1\":{\"1276\":1,\"1292\":1,\"5468\":1,\"5484\":1}}],[\"c0会多分配一个分区\",{\"1\":{\"1273\":1,\"5465\":1}}],[\"currentthread\",{\"1\":{\"3193\":2,\"3194\":1,\"4537\":1,\"4538\":1}}],[\"currenttimemillis\",{\"1\":{\"601\":4}}],[\"currentcounter\",{\"1\":{\"1263\":3,\"5455\":3}}],[\"current\",{\"1\":{\"1263\":1,\"3359\":1,\"5455\":1}}],[\"customexception\",{\"1\":{\"1158\":3,\"1159\":2,\"4191\":3,\"4192\":2}}],[\"cat\",{\"1\":{\"3575\":1}}],[\"catch语句捕获它\",{\"1\":{\"437\":1,\"443\":1,\"3896\":1,\"3902\":1}}],[\"catch\",{\"1\":{\"421\":1,\"455\":2,\"457\":3,\"466\":1,\"1159\":2,\"3878\":1,\"3914\":2,\"3917\":1,\"4192\":2}}],[\"cache\",{\"1\":{\"3460\":1,\"3462\":2,\"5729\":1,\"5731\":2}}],[\"cachedthreadpool\",{\"1\":{\"3310\":2,\"3334\":1,\"3343\":1,\"4575\":2,\"4591\":1,\"4600\":1}}],[\"callerrunspolicy\",{\"1\":{\"3286\":1,\"3302\":1,\"3305\":1,\"4550\":1,\"4567\":1,\"4570\":1}}],[\"callback\",{\"1\":{\"861\":1,\"4070\":1}}],[\"cas有哪些问题\",{\"1\":{\"3111\":1,\"4393\":1}}],[\"cas机制当中使用了3个基本操作数\",{\"1\":{\"3096\":1,\"4372\":1}}],[\"cas是乐观锁\",{\"1\":{\"3093\":1,\"4369\":1}}],[\"cas\",{\"0\":{\"3088\":1,\"3089\":1,\"3094\":1,\"3104\":1,\"3109\":1,\"4364\":1,\"4370\":1,\"4386\":1,\"4391\":1},\"1\":{\"3095\":1,\"3105\":1,\"3106\":2,\"3107\":2,\"3108\":1,\"3110\":1,\"3113\":2,\"3120\":1,\"3123\":2,\"3127\":1,\"3128\":1,\"3129\":1,\"3224\":1,\"3225\":3,\"3236\":1,\"3255\":1,\"4348\":1,\"4349\":3,\"4359\":1,\"4371\":1,\"4387\":1,\"4388\":2,\"4389\":2,\"4390\":1,\"4392\":1,\"4395\":2,\"4402\":1,\"4405\":2,\"4409\":1,\"4410\":1,\"4411\":1,\"4484\":1}}],[\"cas操作\",{\"1\":{\"3087\":1,\"4443\":1}}],[\"cassandra\",{\"1\":{\"2157\":1,\"4762\":1}}],[\"ca\",{\"1\":{\"2157\":1,\"2158\":1,\"4762\":1,\"4763\":1}}],[\"capacities\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"capacity可以用threshold表示\",{\"1\":{\"950\":1}}],[\"capacity的值时\",{\"1\":{\"950\":1}}],[\"capacity表示当前hashmap的容量是多少\",{\"1\":{\"950\":1}}],[\"capacity就从16扩容到32了\",{\"1\":{\"946\":1}}],[\"capacity\",{\"0\":{\"923\":1},\"1\":{\"778\":1,\"911\":1,\"920\":1,\"921\":1,\"925\":5,\"927\":1,\"928\":1,\"930\":15,\"931\":3,\"939\":1,\"943\":10,\"945\":2}}],[\"capacityincrement来初始化的时候\",{\"1\":{\"764\":1}}],[\"capacityincrement\",{\"1\":{\"752\":2,\"764\":2}}],[\"cap\",{\"0\":{\"2143\":1,\"4748\":1},\"1\":{\"2145\":1,\"2147\":2,\"2154\":2,\"2156\":1,\"4750\":1,\"4752\":2,\"4759\":2,\"4761\":1}}],[\"ca11\",{\"1\":{\"984\":1}}],[\"cheng\",{\"0\":{\"5840\":1}}],[\"checked\",{\"0\":{\"440\":1,\"3899\":1},\"1\":{\"819\":1,\"4028\":1}}],[\"chang\",{\"0\":{\"5837\":1}}],[\"char\",{\"1\":{\"2605\":1,\"2615\":1,\"4983\":1,\"4993\":1}}],[\"charsets\",{\"1\":{\"402\":1,\"3857\":1}}],[\"chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c\",{\"1\":{\"3361\":1,\"4615\":1}}],[\"chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e\",{\"1\":{\"3155\":1,\"4470\":1}}],[\"chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1\",{\"1\":{\"3130\":1,\"4365\":1}}],[\"chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34\",{\"1\":{\"1154\":1,\"4187\":1}}],[\"choose\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"c\",{\"1\":{\"408\":1,\"421\":9,\"468\":1,\"1396\":1,\"1453\":1,\"1456\":2,\"1475\":1,\"1564\":1,\"1621\":1,\"1624\":2,\"1643\":1,\"1732\":1,\"1789\":1,\"1792\":2,\"1811\":1,\"1900\":1,\"1957\":1,\"1960\":2,\"1979\":1,\"2019\":1,\"2155\":1,\"2156\":1,\"2158\":2,\"2160\":1,\"2735\":2,\"2736\":1,\"2737\":1,\"2919\":3,\"2921\":1,\"3128\":1,\"3164\":1,\"3863\":1,\"3878\":9,\"3919\":1,\"4410\":1,\"4508\":1,\"4624\":1,\"4760\":1,\"4761\":1,\"4763\":2,\"4765\":1,\"4823\":1,\"4880\":1,\"4883\":2,\"4902\":1,\"5113\":2,\"5114\":1,\"5115\":1,\"5297\":3,\"5299\":1}}],[\"c++实现的\",{\"1\":{\"3168\":1,\"4513\":1}}],[\"c++实现\",{\"1\":{\"402\":1,\"3857\":1}}],[\"clh\",{\"1\":{\"3070\":1,\"3071\":3,\"3072\":1,\"4424\":1,\"4425\":3,\"4426\":1}}],[\"clustered\",{\"1\":{\"2631\":1,\"2640\":1,\"5009\":1,\"5018\":1}}],[\"cluster\",{\"1\":{\"1263\":4,\"5455\":4}}],[\"cli是一个命令行使用spring\",{\"1\":{\"1196\":1,\"4229\":1}}],[\"cli\",{\"1\":{\"1194\":1,\"4227\":1}}],[\"client\",{\"1\":{\"349\":1,\"358\":1,\"1396\":1,\"1486\":1,\"1564\":1,\"1654\":1,\"1732\":1,\"1822\":1,\"1900\":1,\"1990\":1,\"2021\":1,\"2022\":1,\"4626\":1,\"4627\":1,\"4823\":1,\"4913\":1}}],[\"clear\",{\"1\":{\"786\":1,\"3203\":1}}],[\"cloud全家桶技术\",{\"1\":{\"3450\":1,\"5719\":1}}],[\"cloud你用过的组件\",{\"1\":{\"3415\":1,\"5695\":1}}],[\"cloud项目部署架构\",{\"1\":{\"2067\":1,\"4672\":1}}],[\"cloud的呢\",{\"1\":{\"2060\":1,\"4665\":1}}],[\"cloud的优缺点以及组件\",{\"0\":{\"2056\":1,\"4661\":1}}],[\"cloud并没有重复制造轮子\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"cloud是一系列框架的有序集合\",{\"1\":{\"2032\":1,\"4637\":1}}],[\"cloud\",{\"0\":{\"2029\":1,\"2030\":1,\"2031\":1,\"4634\":1,\"4635\":1,\"4636\":1,\"5836\":1,\"5849\":1},\"1\":{\"1164\":1,\"2062\":2,\"2066\":9,\"2193\":1,\"3445\":1,\"3449\":1,\"3451\":1,\"4197\":1,\"4315\":1,\"4667\":2,\"4671\":9,\"5714\":1,\"5718\":1,\"5720\":1}}],[\"clone\",{\"1\":{\"752\":1,\"754\":1,\"755\":1}}],[\"close\",{\"0\":{\"2440\":1,\"2447\":1},\"1\":{\"457\":4,\"1235\":1,\"2325\":1,\"2332\":1,\"4268\":1}}],[\"clazzb\",{\"1\":{\"1116\":3,\"4149\":3}}],[\"clazza\",{\"1\":{\"1116\":4,\"4149\":4}}],[\"clazz\",{\"1\":{\"491\":2,\"3942\":2}}],[\"class以及synchronized修饰的是static方法的时候\",{\"1\":{\"3159\":1}}],[\"classes配置\",{\"1\":{\"1174\":1,\"4207\":1}}],[\"class对象就可以对它为所欲为了\",{\"1\":{\"502\":1,\"3953\":1}}],[\"classname\",{\"1\":{\"491\":2,\"3942\":2}}],[\"classnotfoundexception\",{\"1\":{\"421\":2,\"3878\":2}}],[\"class<hashmap>\",{\"1\":{\"497\":1,\"3948\":1}}],[\"class<\",{\"1\":{\"408\":1,\"421\":1,\"499\":1,\"501\":1,\"505\":1,\"508\":1,\"851\":1,\"925\":1,\"930\":3,\"943\":1,\"3863\":1,\"3878\":1,\"3950\":1,\"3952\":1,\"3956\":1,\"3959\":1,\"4060\":1}}],[\"classpath\",{\"1\":{\"404\":1,\"3859\":1}}],[\"class\",{\"1\":{\"281\":1,\"288\":1,\"291\":1,\"389\":2,\"390\":1,\"396\":2,\"405\":1,\"408\":1,\"409\":1,\"421\":1,\"468\":1,\"491\":2,\"494\":1,\"496\":2,\"497\":1,\"498\":1,\"500\":2,\"501\":1,\"504\":1,\"505\":1,\"508\":1,\"515\":2,\"517\":2,\"820\":2,\"838\":1,\"841\":1,\"1116\":3,\"1158\":1,\"1159\":3,\"3163\":1,\"3164\":2,\"3174\":1,\"3176\":1,\"3190\":1,\"3200\":2,\"3214\":1,\"3286\":1,\"3565\":1,\"3843\":2,\"3844\":1,\"3851\":2,\"3860\":1,\"3863\":1,\"3864\":1,\"3878\":1,\"3919\":1,\"3942\":2,\"3945\":1,\"3947\":2,\"3948\":1,\"3949\":1,\"3951\":2,\"3952\":1,\"3955\":1,\"3956\":1,\"3959\":1,\"3966\":2,\"3968\":2,\"4029\":2,\"4047\":1,\"4050\":1,\"4149\":3,\"4191\":1,\"4192\":3,\"4338\":1,\"4507\":1,\"4508\":2,\"4518\":1,\"4521\":1,\"4534\":1,\"4550\":1}}],[\"classloader的子类重写\",{\"1\":{\"412\":1,\"3867\":1}}],[\"classloader抽象类\",{\"1\":{\"406\":1,\"3861\":1}}],[\"classloader\",{\"1\":{\"178\":1,\"182\":1,\"394\":1,\"395\":1,\"399\":1,\"401\":1,\"407\":1,\"411\":1,\"413\":1,\"416\":1,\"418\":1,\"420\":1,\"851\":1,\"3827\":1,\"3831\":1,\"3849\":1,\"3850\":1,\"3854\":1,\"3856\":1,\"3862\":1,\"3866\":1,\"3868\":1,\"3872\":1,\"3874\":1,\"3877\":1,\"4060\":1}}],[\"cn\",{\"1\":{\"294\":1,\"1148\":1,\"1154\":1,\"3181\":1,\"3218\":1,\"3361\":1,\"4181\":1,\"4187\":1,\"4342\":1,\"4526\":1,\"4615\":1}}],[\"cookie\",{\"1\":{\"3484\":1,\"5753\":1}}],[\"core\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"corepoolsize\",{\"1\":{\"3288\":8,\"3290\":1,\"3294\":1,\"4552\":8,\"4554\":1,\"4558\":1}}],[\"correctstack\",{\"1\":{\"588\":1}}],[\"covering\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"copy\",{\"1\":{\"1427\":1,\"1595\":1,\"1763\":1,\"1931\":1,\"4854\":1}}],[\"copyof方法最终调用native方法进行新数组创建和数据拷贝\",{\"1\":{\"763\":1}}],[\"countdownlatch等\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"counter\",{\"1\":{\"1263\":6,\"5455\":6}}],[\"count\",{\"1\":{\"749\":1,\"1416\":1,\"1584\":1,\"1752\":1,\"1920\":1,\"4843\":1}}],[\"collections中的一个静态内部类\",{\"1\":{\"766\":1}}],[\"collections\",{\"1\":{\"706\":1,\"770\":1,\"1272\":1,\"5464\":1}}],[\"collection接口在java\",{\"1\":{\"704\":1}}],[\"collection\",{\"1\":{\"704\":1}}],[\"color\",{\"1\":{\"83\":1,\"3737\":1}}],[\"com对应的ip是啥呀\",{\"1\":{\"2541\":1,\"5639\":1}}],[\"commit\",{\"1\":{\"1221\":1,\"1235\":1,\"2136\":2,\"2141\":2,\"2569\":1,\"4254\":1,\"4268\":1,\"4741\":2,\"4746\":2,\"4947\":1}}],[\"committed\",{\"1\":{\"1091\":1,\"1093\":1,\"2833\":1,\"4124\":1,\"4126\":1,\"5211\":1}}],[\"com\",{\"1\":{\"592\":1,\"1154\":1,\"1397\":1,\"1506\":1,\"1565\":1,\"1674\":1,\"1733\":1,\"1842\":1,\"1901\":1,\"2010\":1,\"2193\":1,\"2524\":1,\"2526\":1,\"2527\":2,\"2530\":1,\"2531\":1,\"2536\":1,\"2537\":2,\"2538\":4,\"2539\":1,\"2540\":1,\"2541\":1,\"3059\":1,\"3130\":1,\"3155\":1,\"3286\":1,\"3361\":1,\"3656\":1,\"4187\":1,\"4315\":1,\"4365\":1,\"4413\":1,\"4470\":1,\"4550\":1,\"4615\":1,\"4824\":1,\"4933\":1,\"5622\":1,\"5624\":1,\"5625\":2,\"5628\":1,\"5629\":1,\"5634\":1,\"5635\":2,\"5636\":4,\"5637\":1,\"5638\":1,\"5639\":1}}],[\"completed\",{\"1\":{\"3357\":1}}],[\"compareandset\",{\"1\":{\"4484\":1}}],[\"compareandse方法首先检查当前引用是否等于预期引用\",{\"1\":{\"3117\":1,\"4400\":1}}],[\"compareandswap\",{\"1\":{\"3255\":1}}],[\"compare和swap\",{\"1\":{\"3105\":1,\"4387\":1}}],[\"compare\",{\"1\":{\"3095\":1,\"3100\":1,\"3127\":1,\"4371\":1,\"4379\":1,\"4409\":1}}],[\"compatibility\",{\"1\":{\"563\":1}}],[\"compression\",{\"1\":{\"2511\":1,\"5609\":1}}],[\"component把监听器加入spring容器中管理\",{\"1\":{\"1173\":1,\"4206\":1}}],[\"composition\",{\"1\":{\"546\":1,\"560\":1}}],[\"code\",{\"1\":{\"468\":1,\"752\":1,\"774\":1,\"3288\":12,\"3919\":1,\"4552\":12}}],[\"condition\",{\"1\":{\"2656\":1,\"3081\":1,\"3211\":1,\"4335\":1,\"4437\":1,\"5034\":1}}],[\"conditional按需加载的配置类\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"connections\",{\"1\":{\"2514\":1,\"5530\":1,\"5612\":1}}],[\"conf\",{\"1\":{\"2965\":1,\"5343\":1}}],[\"conflict\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"config\",{\"1\":{\"2066\":1,\"3515\":1,\"4671\":1,\"5784\":1}}],[\"config配置中心时\",{\"1\":{\"1164\":1,\"4197\":1}}],[\"content\",{\"1\":{\"2505\":1,\"3516\":1,\"5603\":1,\"5785\":1}}],[\"continue\",{\"1\":{\"1272\":1,\"2505\":1,\"5464\":1,\"5603\":1}}],[\"controlleradvice\",{\"1\":{\"1155\":1,\"1159\":1,\"4188\":1,\"4192\":1}}],[\"controller\",{\"1\":{\"1059\":1,\"1075\":1,\"1156\":1,\"4092\":1,\"4108\":1,\"4189\":1}}],[\"consumer\",{\"1\":{\"3465\":1,\"5734\":1}}],[\"consumer从mq里面读取数据是有序的\",{\"1\":{\"1309\":1,\"5501\":1}}],[\"consumerswithextrapartition\",{\"1\":{\"1272\":3,\"5464\":3}}],[\"consumersfortopic\",{\"1\":{\"1272\":6,\"5464\":6}}],[\"consumerspertopic\",{\"1\":{\"1272\":3,\"5464\":3}}],[\"conscious\",{\"1\":{\"774\":1}}],[\"consistency\",{\"1\":{\"752\":1,\"2145\":1,\"2148\":1,\"2807\":1,\"4750\":1,\"4753\":1,\"5185\":1}}],[\"constuctor\",{\"1\":{\"517\":1,\"3968\":1}}],[\"constructor<\",{\"1\":{\"508\":1,\"3959\":1}}],[\"constructor\",{\"1\":{\"491\":3,\"507\":1,\"508\":3,\"509\":2,\"516\":1,\"517\":3,\"3942\":3,\"3958\":1,\"3959\":3,\"3960\":2,\"3967\":1,\"3968\":3}}],[\"constant\",{\"1\":{\"281\":2,\"288\":1}}],[\"const\",{\"1\":{\"47\":1,\"3701\":1}}],[\"concurrent包中\",{\"1\":{\"3108\":1,\"4390\":1}}],[\"concurrenthashmap为什么用红黑树\",{\"1\":{\"3416\":1,\"5696\":1}}],[\"concurrenthashmap\",{\"1\":{\"1013\":1,\"1015\":1,\"1026\":1}}],[\"concurrenthashmap同理\",{\"1\":{\"960\":1}}],[\"concurrenthashmap在每一个分段上都用锁进行了保护\",{\"1\":{\"900\":1}}],[\"concurrenthashmap对桶数组进行了分段\",{\"1\":{\"899\":1}}],[\"concurrenthashmap和hashmap的实现方式不一样\",{\"1\":{\"899\":1}}],[\"concurrenthashmap区别\",{\"0\":{\"898\":1}}],[\"concurrenthashmap虽然也是线程安全的\",{\"1\":{\"893\":1}}],[\"concurrentmodificationexception\",{\"1\":{\"749\":1}}],[\"concurrent\",{\"1\":{\"362\":1,\"3181\":2,\"3200\":3,\"3218\":2,\"3286\":4,\"3361\":2,\"4342\":2,\"4526\":2,\"4550\":4,\"4615\":2}}],[\"一面\",{\"0\":{\"3365\":1,\"3395\":1,\"3410\":1,\"5645\":1,\"5675\":1,\"5690\":1}}],[\"一把锁只能同时被一个线程获取\",{\"1\":{\"3158\":1}}],[\"一定会出现这样一种情况\",{\"1\":{\"3031\":1,\"5409\":1}}],[\"一定是\",{\"1\":{\"2351\":1}}],[\"一直跟这个事务启动时看到的数据是一致的\",{\"1\":{\"2834\":1,\"2847\":1,\"5212\":1,\"5225\":1}}],[\"一直维护一个红黑树比链表耗费资源更多\",{\"1\":{\"873\":1,\"3981\":1}}],[\"一起使用的时候\",{\"1\":{\"2768\":1,\"5146\":1}}],[\"一旦数据库泄漏\",{\"1\":{\"3599\":1}}],[\"一旦任务暂停\",{\"1\":{\"3328\":1,\"4585\":1}}],[\"一旦有第二个线程加入锁竞争\",{\"1\":{\"3233\":1,\"4356\":1}}],[\"一旦获得锁\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"一旦出现\",{\"1\":{\"2738\":1,\"5116\":1}}],[\"一旦发生丢包\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"一张表允许创建多个普通索引\",{\"1\":{\"2626\":1,\"5004\":1}}],[\"一张表允许创建多个唯一索引\",{\"1\":{\"2625\":1,\"5003\":1}}],[\"一张数据表有只能有一个主键\",{\"1\":{\"2618\":1,\"4996\":1}}],[\"一次即可定位\",{\"1\":{\"2603\":1,\"4981\":1}}],[\"一次该\",{\"1\":{\"2338\":1}}],[\"一锁就是锁住了整张表\",{\"1\":{\"2566\":1,\"4944\":1}}],[\"一种是查询分组\",{\"1\":{\"2481\":1,\"5579\":1}}],[\"一对多\",{\"1\":{\"2381\":1}}],[\"一对一\",{\"1\":{\"2351\":1}}],[\"一样也是在插入数据的时候\",{\"1\":{\"2761\":1,\"5139\":1}}],[\"一样\",{\"1\":{\"2110\":1,\"2117\":1,\"4715\":1,\"4722\":1}}],[\"一样是多线程收集器\",{\"1\":{\"355\":1}}],[\"一段时间内\",{\"1\":{\"2074\":1,\"4679\":1}}],[\"一级缓存sqlsession\",{\"1\":{\"1235\":1,\"4268\":1}}],[\"一级缓存是默认开启的\",{\"1\":{\"1234\":1,\"4267\":1}}],[\"一级缓存的作用域是一个sqlsession内\",{\"1\":{\"1233\":1,\"4266\":1}}],[\"一级缓存内部存储使用一个\",{\"1\":{\"1221\":1,\"4254\":1}}],[\"一级缓存也就不存在了\",{\"1\":{\"1221\":1,\"4254\":1}}],[\"一级缓存\",{\"0\":{\"1219\":1,\"1220\":1,\"4252\":1,\"4253\":1}}],[\"一级缓存能解决吗\",{\"1\":{\"1120\":1,\"4153\":1}}],[\"一致性则是通过持久性+原子性+隔离性来保证\",{\"1\":{\"2814\":1,\"5192\":1}}],[\"一致性就是要求上述步骤操作后\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"一致性\",{\"1\":{\"1081\":1,\"2145\":1,\"2148\":1,\"2154\":1,\"2807\":1,\"4114\":1,\"4750\":1,\"4753\":1,\"4759\":1,\"5185\":1}}],[\"一致的\",{\"1\":{\"535\":1}}],[\"一棵树的度数就是它里面度数最大的结点的度数\",{\"1\":{\"630\":1}}],[\"一棵树的根结点称为该树的子树的根结点的父结点\",{\"1\":{\"624\":1}}],[\"一棵树\",{\"1\":{\"621\":1}}],[\"一棵树里的元素可以根据这种关系分为一层层的元素\",{\"1\":{\"620\":1}}],[\"一棵树可以只有根但没有子树\",{\"1\":{\"617\":1}}],[\"一类的接口名称\",{\"1\":{\"588\":1}}],[\"一些框架\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"一些不合法的参数请求直接抛出异常信息返回给客户端\",{\"1\":{\"3017\":1,\"5395\":1}}],[\"一些分布式的问题\",{\"1\":{\"2195\":1,\"4317\":1}}],[\"一些加密\",{\"1\":{\"1166\":1,\"4199\":1}}],[\"一些固定的不能被覆盖的属性\",{\"1\":{\"1165\":1,\"4198\":1}}],[\"一些\",{\"1\":{\"561\":1}}],[\"一些附加信息\",{\"1\":{\"216\":1}}],[\"一般用在读锁上\",{\"1\":{\"3262\":1,\"4490\":1}}],[\"一般不会使用\",{\"1\":{\"2604\":1,\"2605\":1,\"2615\":1,\"4982\":1,\"4983\":1,\"4993\":1}}],[\"一般不建议修改loadfactor的值\",{\"1\":{\"948\":1}}],[\"一般是\",{\"1\":{\"2515\":1,\"5613\":1}}],[\"一般情况下\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"一般情况下不自定义检查异常\",{\"1\":{\"439\":1,\"3898\":1}}],[\"一般需要预热下\",{\"1\":{\"2202\":1,\"4324\":1}}],[\"一般使用redis的zset数据类型\",{\"1\":{\"2181\":1,\"4303\":1}}],[\"一般来说\",{\"1\":{\"1394\":1,\"1456\":1,\"1562\":1,\"1624\":1,\"1730\":1,\"1792\":1,\"1898\":1,\"1960\":1,\"4821\":1,\"4883\":1}}],[\"一般来说锁的范围大小和性能是成反比的\",{\"1\":{\"798\":1}}],[\"一般而言\",{\"1\":{\"728\":1}}],[\"一般将堆分为新生代和老年代\",{\"1\":{\"338\":1}}],[\"一般包含以下内容\",{\"1\":{\"303\":1}}],[\"一个类的完整生命周期\",{\"1\":{\"3841\":1}}],[\"一个线程每获得一次锁\",{\"1\":{\"3248\":1,\"4478\":1}}],[\"一个人进入厕所后首先把门锁上\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"一个节点表示一个线程\",{\"1\":{\"3071\":1,\"3073\":1,\"4425\":1,\"4428\":1}}],[\"一个\",{\"1\":{\"2896\":1,\"3191\":1,\"4535\":1,\"5274\":1}}],[\"一个事务中的所有操作\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"一个事务在插入一条记录的时候\",{\"1\":{\"2797\":1,\"5175\":1}}],[\"一个事务在持有\",{\"1\":{\"2758\":1,\"5136\":1}}],[\"一个事务持有了范围为\",{\"1\":{\"2794\":1,\"5172\":1}}],[\"一个事务被提交之后\",{\"1\":{\"1083\":1,\"4116\":1}}],[\"一个索引包含\",{\"1\":{\"2613\":1,\"4991\":1}}],[\"一个连接建立多个不同的数据流\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"一个打赏就发一个消息\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"一个进程虽然任一时刻只能处理一个请求\",{\"1\":{\"1374\":1,\"1542\":1,\"1710\":1,\"1878\":1,\"4801\":1}}],[\"一个变量被访问到过后\",{\"1\":{\"1332\":1}}],[\"一个queue对应一个consumer\",{\"1\":{\"1311\":1,\"5503\":1}}],[\"一个queue\",{\"1\":{\"1309\":1,\"5501\":1}}],[\"一个topic有多个partition\",{\"1\":{\"1266\":1,\"5458\":1}}],[\"一个consumer\",{\"1\":{\"1266\":1,\"5458\":1}}],[\"一个一个地添加到项目的依赖管理中\",{\"1\":{\"1181\":1,\"4214\":1}}],[\"一个缓存用于存放成品对象\",{\"1\":{\"1127\":1,\"4160\":1}}],[\"一个用户的事物不被其他事物所干扰\",{\"1\":{\"1082\":1,\"4115\":1}}],[\"一个数字在和他进行按位与操作的时候\",{\"1\":{\"989\":1}}],[\"一个数和\",{\"1\":{\"973\":1}}],[\"一个数对2n取模\",{\"1\":{\"973\":1}}],[\"一个hashmap的容量\",{\"1\":{\"928\":1}}],[\"一个使用了同步方法\",{\"1\":{\"791\":1}}],[\"一个使用同步代码块之外几乎无任何区别\",{\"1\":{\"789\":1}}],[\"一个结点的子结点个数称为该结点的度数\",{\"1\":{\"630\":1}}],[\"一个是比较喜欢通过博客整理分享自己所学知识\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"一个是\",{\"1\":{\"572\":2}}],[\"一个更加完整\",{\"1\":{\"535\":1}}],[\"一个对象是否有虚引用的存在\",{\"1\":{\"320\":1}}],[\"一个新对象的方式来创建强引用\",{\"1\":{\"312\":1}}],[\"一个幸存者空间总是空的\",{\"1\":{\"234\":1}}],[\"一个拥有间隙锁\",{\"1\":{\"2801\":1,\"5179\":1}}],[\"一个拥有\",{\"1\":{\"67\":1,\"3721\":1}}],[\"一\",{\"0\":{\"175\":1,\"429\":1,\"2238\":1,\"2251\":1,\"3364\":1,\"3433\":1,\"3580\":1,\"3887\":1,\"3946\":1,\"5515\":1,\"5644\":1},\"1\":{\"494\":1,\"3945\":1}}],[\"写操作\",{\"1\":{\"3460\":1,\"5729\":1}}],[\"写操作具有原子性\",{\"1\":{\"3141\":1}}],[\"写写\",{\"1\":{\"3265\":1,\"4493\":1}}],[\"写写的则是互斥的\",{\"1\":{\"3262\":1,\"4490\":1}}],[\"写写互斥的\",{\"1\":{\"2749\":1,\"5127\":1}}],[\"写读\",{\"1\":{\"3262\":1,\"3265\":1,\"4490\":1,\"4493\":1}}],[\"写入系统内核缓冲区之后直接返回\",{\"1\":{\"2986\":1,\"5364\":1}}],[\"写锁等待\",{\"1\":{\"2738\":1,\"5116\":1}}],[\"写锁\",{\"0\":{\"3264\":1,\"4492\":1},\"1\":{\"2726\":1,\"2728\":1,\"2729\":2,\"2735\":1,\"2737\":1,\"3265\":1,\"4493\":1,\"5104\":1,\"5106\":1,\"5107\":2,\"5113\":1,\"5115\":1}}],[\"写\",{\"1\":{\"2097\":3,\"3141\":1,\"4702\":3}}],[\"写在前面\",{\"0\":{\"149\":1,\"3803\":1}}],[\"写作日期为\",{\"1\":{\"119\":1,\"3773\":1}}],[\"f30aa7a662c728b7407c54ae6bfd27d1\",{\"1\":{\"3612\":1}}],[\"f4|uniq\",{\"1\":{\"3575\":1}}],[\"f4108e1816b3087f38b546372e214958\",{\"1\":{\"1270\":1,\"5462\":1}}],[\"ftl\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"ftp\",{\"1\":{\"2399\":1}}],[\"fsync用于强制刷新系统内核缓冲区\",{\"1\":{\"2987\":1,\"5365\":1}}],[\"fsync\",{\"1\":{\"2981\":5,\"2987\":1,\"5359\":5,\"5365\":1}}],[\"fsync策略\",{\"1\":{\"2974\":1,\"5352\":1}}],[\"flag\",{\"1\":{\"2857\":1,\"5235\":1}}],[\"flush\",{\"1\":{\"2689\":1,\"5067\":1}}],[\"float\",{\"1\":{\"917\":1,\"2887\":1,\"5265\":1}}],[\"ff\",{\"1\":{\"2481\":6,\"5579\":6}}],[\"feignclient注解的接口\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"feign会进行包扫描\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"feign通过处理注解\",{\"1\":{\"2089\":1,\"4694\":1}}],[\"feign远程调用\",{\"1\":{\"2087\":1,\"4692\":1}}],[\"feign远程调用的基本流程\",{\"0\":{\"2086\":1,\"4691\":1},\"1\":{\"2087\":1,\"4692\":1}}],[\"feign\",{\"1\":{\"2066\":1,\"2085\":1,\"4671\":1,\"4690\":1}}],[\"fd\",{\"1\":{\"1416\":2,\"1584\":2,\"1752\":2,\"1920\":2,\"4843\":2}}],[\"fair\",{\"1\":{\"3217\":2,\"4341\":2}}],[\"fairsync\",{\"1\":{\"3215\":1,\"3217\":1,\"4339\":1,\"4341\":1}}],[\"fail的\",{\"1\":{\"896\":1}}],[\"fail\",{\"1\":{\"891\":3,\"4475\":1}}],[\"fail机制的\",{\"1\":{\"896\":1}}],[\"fail机制\",{\"1\":{\"750\":1,\"758\":1}}],[\"factory\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"factories都会被读取到\",{\"1\":{\"1146\":1,\"4179\":1}}],[\"factories被读取到\",{\"1\":{\"1146\":1,\"4179\":1}}],[\"factories\",{\"1\":{\"1144\":2,\"4177\":2}}],[\"factories中的自动配置类实现自动装配\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"factories文件\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"factor\",{\"1\":{\"917\":1}}],[\"factor和default\",{\"1\":{\"911\":1}}],[\"fast迭代器\",{\"1\":{\"895\":1}}],[\"fast\",{\"1\":{\"891\":1,\"4475\":1}}],[\"false\",{\"1\":{\"421\":1,\"2659\":1,\"3082\":1,\"3083\":1,\"3085\":1,\"3217\":1,\"3571\":1,\"3878\":1,\"4341\":1,\"4438\":1,\"4439\":1,\"4441\":1,\"5037\":1}}],[\"following\",{\"1\":{\"2125\":1,\"2128\":1,\"3288\":1,\"4552\":1,\"4730\":1,\"4733\":1}}],[\"followers\",{\"1\":{\"2117\":1,\"4722\":1}}],[\"follower跟随者\",{\"1\":{\"2110\":1,\"4715\":1}}],[\"follower\",{\"1\":{\"2106\":1,\"2112\":1,\"2113\":1,\"2116\":1,\"2117\":1,\"2125\":1,\"2126\":1,\"2128\":1,\"2129\":1,\"2133\":1,\"2141\":2,\"4711\":1,\"4717\":1,\"4718\":1,\"4721\":1,\"4722\":1,\"4730\":1,\"4731\":1,\"4733\":1,\"4734\":1,\"4738\":1,\"4746\":2}}],[\"followed\",{\"1\":{\"749\":1}}],[\"fork\",{\"1\":{\"2970\":1,\"5348\":1}}],[\"format\",{\"1\":{\"2770\":1,\"5148\":1}}],[\"for循环对订阅的多个topic分别进行处理\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"for\",{\"1\":{\"601\":2,\"749\":1,\"1272\":3,\"1334\":1,\"2747\":1,\"2774\":1,\"2848\":2,\"3200\":1,\"3203\":1,\"3288\":3,\"3356\":1,\"4552\":3,\"5125\":1,\"5152\":1,\"5226\":2,\"5464\":3}}],[\"forname\",{\"1\":{\"491\":1,\"500\":1,\"501\":1,\"505\":1,\"508\":1,\"3942\":1,\"3951\":1,\"3952\":1,\"3956\":1,\"3959\":1}}],[\"foo\",{\"0\":{\"146\":1,\"166\":1,\"3800\":1,\"3815\":1},\"1\":{\"168\":1,\"3817\":1}}],[\"f2\",{\"1\":{\"463\":1}}],[\"f\",{\"1\":{\"463\":1}}],[\"fixedthreadpool\",{\"1\":{\"3309\":1,\"3332\":1,\"3342\":1,\"4574\":1,\"4589\":1,\"4599\":1}}],[\"fifo队列\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"fifo\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"fields\",{\"1\":{\"752\":4}}],[\"field\",{\"1\":{\"512\":1,\"513\":4,\"925\":1,\"943\":6,\"2949\":1,\"3963\":1,\"3964\":4,\"5327\":1}}],[\"fin\",{\"1\":{\"2344\":2}}],[\"final\",{\"1\":{\"752\":2,\"864\":1,\"917\":1,\"921\":1,\"968\":1,\"1020\":1,\"1028\":1,\"3200\":2,\"4073\":1}}],[\"finally内的修改效果起了作用\",{\"1\":{\"463\":1}}],[\"finally内的修改效果不起作用\",{\"1\":{\"463\":1}}],[\"finally执行\",{\"1\":{\"463\":2}}],[\"finally\",{\"1\":{\"463\":2}}],[\"finally中的语句会在return之前执⾏\",{\"1\":{\"461\":1}}],[\"findbootstrapclassornull\",{\"1\":{\"421\":1,\"3878\":1}}],[\"findloadedclass\",{\"1\":{\"421\":1,\"3878\":1}}],[\"findclass\",{\"1\":{\"409\":1,\"411\":1,\"412\":1,\"413\":1,\"421\":1,\"426\":1,\"3864\":1,\"3866\":1,\"3867\":1,\"3868\":1,\"3878\":1,\"3883\":1}}],[\"filereader\",{\"1\":{\"457\":1}}],[\"fileinputstream\",{\"1\":{\"455\":2,\"3914\":2}}],[\"file\",{\"1\":{\"455\":5,\"1405\":1,\"1573\":1,\"1741\":1,\"1909\":1,\"2961\":1,\"2972\":1,\"3914\":5,\"4832\":1,\"5339\":1,\"5350\":1}}],[\"filenotfoundexception\",{\"1\":{\"449\":1,\"455\":1,\"3908\":1,\"3914\":1}}],[\"firstvalue\",{\"1\":{\"3196\":1,\"4540\":1}}],[\"firstkey\",{\"1\":{\"3196\":1,\"4540\":1}}],[\"first\",{\"1\":{\"373\":1,\"1365\":2,\"1533\":2,\"1701\":2,\"1869\":2,\"2453\":1,\"2546\":1,\"4792\":2,\"5551\":1}}],[\"full\",{\"1\":{\"371\":1,\"2628\":1,\"5006\":1}}],[\"freemarker\",{\"1\":{\"3384\":1,\"3501\":1,\"5664\":1,\"5770\":1}}],[\"frequently\",{\"1\":{\"3009\":1,\"3010\":1,\"5387\":1,\"5388\":1}}],[\"from\",{\"1\":{\"254\":1,\"468\":1,\"471\":1,\"1216\":3,\"3919\":1,\"3922\":1,\"4249\":3}}],[\"front\",{\"1\":{\"151\":1,\"155\":1,\"3805\":1}}],[\"frontmatter\",{\"1\":{\"10\":1,\"33\":1,\"35\":2,\"117\":1,\"140\":1,\"3664\":1,\"3687\":1,\"3689\":2,\"3771\":1,\"3794\":1}}],[\"frames\",{\"1\":{\"2510\":1,\"5608\":1}}],[\"framework\",{\"0\":{\"5832\":1},\"1\":{\"1148\":1,\"4181\":1}}],[\"frame\",{\"1\":{\"211\":1}}],[\"此人要仔细保存私有密钥\",{\"1\":{\"3647\":1}}],[\"此策略将丢弃最早的未处理的任务请求\",{\"1\":{\"3304\":1,\"4569\":1}}],[\"此过程是原子性\",{\"1\":{\"3234\":1,\"4357\":1}}],[\"此过程不需要将数据从操作系统内核缓冲区拷贝到\",{\"1\":{\"1424\":1,\"1592\":1,\"1760\":1,\"1928\":1,\"4851\":1}}],[\"此外\",{\"1\":{\"2857\":1,\"5235\":1}}],[\"此方法主要用于在客户端和服务器之间通过网络进行通信\",{\"1\":{\"1370\":1,\"1538\":1,\"1706\":1,\"1874\":1,\"4797\":1}}],[\"此类不能实例化\",{\"1\":{\"706\":1}}],[\"此阶段其实也可以做到与用户程序一起并发执行\",{\"1\":{\"380\":1}}],[\"此区有大小限制\",{\"1\":{\"263\":1}}],[\"此时只能有一个线程获得锁\",{\"1\":{\"3265\":1,\"4493\":1}}],[\"此时有多个线程同时来竞争锁\",{\"1\":{\"3230\":1,\"4354\":1}}],[\"此时对线程1来说\",{\"1\":{\"3101\":1,\"4381\":1}}],[\"此时并没有同步到磁盘\",{\"1\":{\"2980\":1,\"5358\":1}}],[\"此时并不会阻塞\",{\"1\":{\"2734\":1,\"5112\":1}}],[\"此时还在系统内核缓存区为同步到磁盘\",{\"1\":{\"2974\":1,\"5352\":1}}],[\"此时还在选举阶段所以整个集群处于\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"此时查询到的记录数量有\",{\"1\":{\"2829\":1,\"5207\":1}}],[\"此时数据库超过\",{\"1\":{\"2828\":1,\"5206\":1}}],[\"此时由于线程\",{\"1\":{\"2735\":1,\"5113\":1}}],[\"此时就先对该表加上\",{\"1\":{\"2733\":1,\"5111\":1}}],[\"此时mq不会触发消息推送事件\",{\"1\":{\"2173\":1,\"4295\":1}}],[\"此时它肯定会作为\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"此时肯定要重新进行\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"此时同意了提案n1\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"此时会收到彼此的投票信息\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"此时会重新放回幸存者\",{\"1\":{\"267\":1}}],[\"此时将开始执行拦截器的\",{\"1\":{\"1058\":1,\"4091\":1}}],[\"此时得到了x\",{\"1\":{\"976\":1}}],[\"此时x\",{\"1\":{\"975\":1}}],[\"此时需要依赖于老年代进行分配担保\",{\"1\":{\"335\":1}}],[\"此时引用计数器永远不为\",{\"1\":{\"299\":1}}],[\"此时不再是常量池中的符号地址了\",{\"1\":{\"290\":1}}],[\"此时上次幸存下来的放到幸存者\",{\"1\":{\"266\":1}}],[\"此时\",{\"1\":{\"256\":1,\"658\":1,\"2124\":1,\"3572\":1,\"3999\":1,\"4729\":1}}],[\"此内存区域的唯一目的就是存放对象实例\",{\"1\":{\"223\":1}}],[\"此页面应当包含\",{\"1\":{\"130\":1,\"3784\":1}}],[\"此文字有脚注\",{\"1\":{\"70\":1,\"3724\":1}}],[\"徽章\",{\"1\":{\"128\":1,\"3782\":1}}],[\"徽章文字\",{\"1\":{\"128\":1,\"3782\":1}}],[\"标明要异步调用\",{\"1\":{\"3507\":1,\"5776\":1}}],[\"标志位为00\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"标志位为01\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"标识\",{\"1\":{\"3175\":1,\"3179\":1,\"4520\":1,\"4524\":1}}],[\"标准中规定的各级隔离级别允许发生的现象却有些出入\",{\"1\":{\"2844\":1,\"5222\":1}}],[\"标准中规定的\",{\"1\":{\"2844\":1,\"5222\":1}}],[\"标准提出了四种隔离级别来规避这些现象\",{\"1\":{\"2831\":1,\"5209\":1}}],[\"标准定义了四个隔离级别\",{\"1\":{\"2569\":1,\"4947\":1}}],[\"标准资源都继承了这个接口\",{\"1\":{\"454\":1,\"3913\":1}}],[\"标为\",{\"1\":{\"565\":1}}],[\"标量替换优化技术将会导致一些微妙的变化\",{\"1\":{\"277\":1}}],[\"标题和页面信息\",{\"1\":{\"132\":1,\"3786\":1}}],[\"标签为\",{\"1\":{\"121\":1,\"3775\":1}}],[\"标记和清除过程效率都不高\",{\"1\":{\"327\":1}}],[\"标记\",{\"0\":{\"72\":1,\"3726\":1},\"1\":{\"340\":2,\"371\":1,\"382\":1}}],[\"日志记录了能体现该接口特性的\",{\"1\":{\"3563\":1}}],[\"日志格式要设置为\",{\"1\":{\"2769\":1,\"5147\":1}}],[\"日志信息\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"日志管理\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"日常开发几乎看不到使用静态代理的场景\",{\"1\":{\"840\":1,\"4049\":1}}],[\"日\",{\"1\":{\"119\":1,\"3773\":1}}],[\"月\",{\"1\":{\"119\":1,\"3773\":1}}],[\"年设计了基于\",{\"1\":{\"5530\":1}}],[\"年设计的\",{\"1\":{\"5530\":1}}],[\"年重写了之前的论文\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"年之后\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"年代\",{\"1\":{\"2119\":2,\"4724\":2}}],[\"年轻一代被分为三个部分\",{\"1\":{\"231\":1}}],[\"年轻代是所有新对象创建的地方\",{\"1\":{\"231\":1}}],[\"年轻代\",{\"0\":{\"230\":1},\"1\":{\"225\":1}}],[\"年\",{\"1\":{\"119\":1,\"3773\":1,\"5530\":1}}],[\"↩︎\",{\"1\":{\"113\":1,\"3767\":1}}],[\"捐赠一杯咖啡\",{\"1\":{\"105\":1,\"3759\":1}}],[\"向硬盘做同步操作\",{\"1\":{\"2981\":1,\"5359\":1}}],[\"向下延伸\",{\"1\":{\"1325\":1,\"4282\":1}}],[\"向\",{\"1\":{\"105\":1,\"1064\":1,\"3759\":1,\"4097\":1}}],[\"样式化\",{\"0\":{\"104\":1,\"3758\":1}}],[\"导致所有的请求都落到了数据库上\",{\"1\":{\"3044\":1,\"5422\":1}}],[\"导致大量的请求都直接落到了数据库上\",{\"1\":{\"3043\":1,\"5421\":1}}],[\"导致二级缓存失效\",{\"1\":{\"1239\":1,\"4272\":1}}],[\"导致⽣成多个实例\",{\"1\":{\"821\":1,\"4030\":1}}],[\"导致\",{\"1\":{\"370\":1}}],[\"导致无法给大对象分配内存\",{\"1\":{\"328\":1}}],[\"导致无法对它们进行回收\",{\"1\":{\"299\":1}}],[\"导入文件\",{\"0\":{\"96\":1,\"3750\":1}}],[\"导航栏\",{\"1\":{\"12\":1,\"136\":1,\"3666\":1,\"3790\":1}}],[\"−1\",{\"1\":{\"94\":1,\"3748\":1}}],[\"ωyω​\",{\"1\":{\"94\":2,\"3748\":2}}],[\"∂ωr∂r​\",{\"1\":{\"94\":1,\"3748\":1}}],[\"ecc\",{\"1\":{\"3647\":1}}],[\"ecc等\",{\"1\":{\"3642\":1}}],[\"echarts\",{\"0\":{\"87\":1,\"3741\":1}}],[\"e10adc3949ba59abbe56e057f20f883e\",{\"1\":{\"3604\":1}}],[\"ever\",{\"1\":{\"3356\":1,\"3358\":1}}],[\"even\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"event\",{\"1\":{\"1357\":1,\"1525\":1,\"1693\":1,\"1861\":1,\"4784\":1}}],[\"eventlistener注解\",{\"1\":{\"1175\":1,\"4208\":1}}],[\"eviction\",{\"1\":{\"3007\":1,\"5385\":1}}],[\"es\",{\"1\":{\"2192\":1,\"4314\":1}}],[\"epoch\",{\"1\":{\"2119\":3,\"4724\":3}}],[\"epoll\",{\"0\":{\"1377\":1,\"1545\":1,\"1713\":1,\"1881\":1,\"4804\":1},\"1\":{\"1375\":1,\"1376\":1,\"1378\":1,\"1379\":4,\"1380\":2,\"1381\":1,\"1383\":2,\"1384\":2,\"1385\":1,\"1386\":1,\"1388\":1,\"1389\":1,\"1394\":1,\"1395\":1,\"1397\":1,\"1543\":1,\"1544\":1,\"1546\":1,\"1547\":4,\"1548\":2,\"1549\":1,\"1551\":2,\"1552\":2,\"1553\":1,\"1554\":1,\"1556\":1,\"1557\":1,\"1562\":1,\"1563\":1,\"1565\":1,\"1711\":1,\"1712\":1,\"1714\":1,\"1715\":4,\"1716\":2,\"1717\":1,\"1719\":2,\"1720\":2,\"1721\":1,\"1722\":1,\"1724\":1,\"1725\":1,\"1730\":1,\"1731\":1,\"1733\":1,\"1879\":1,\"1880\":1,\"1882\":1,\"1883\":4,\"1884\":2,\"1885\":1,\"1887\":2,\"1888\":2,\"1889\":1,\"1890\":1,\"1892\":1,\"1893\":1,\"1898\":1,\"1899\":1,\"1901\":1,\"4802\":1,\"4803\":1,\"4805\":1,\"4806\":4,\"4807\":2,\"4808\":1,\"4810\":2,\"4811\":2,\"4812\":1,\"4813\":1,\"4815\":1,\"4816\":1,\"4821\":1,\"4822\":1,\"4824\":1}}],[\"eureka\",{\"1\":{\"2066\":1,\"2157\":1,\"4671\":1,\"4762\":1}}],[\"ewouldblock\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"et\",{\"1\":{\"1386\":1,\"1554\":1,\"1722\":1,\"1890\":1,\"4813\":1}}],[\"edge\",{\"1\":{\"1386\":1,\"1554\":1,\"1722\":1,\"1890\":1,\"4813\":1}}],[\"eden区\",{\"1\":{\"254\":1}}],[\"eden\",{\"1\":{\"231\":1,\"232\":1,\"233\":1,\"238\":1,\"255\":1,\"257\":1,\"272\":2,\"334\":4,\"335\":1}}],[\"eagain\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"easylife206\",{\"1\":{\"1295\":1,\"5487\":1}}],[\"each\",{\"1\":{\"749\":1}}],[\"eb5597ed0b81b03c762e54ff3f909492\",{\"1\":{\"1293\":1,\"5485\":1}}],[\"eff9adb5a086691e56b5d68bec68ffcf\",{\"1\":{\"1274\":1,\"5466\":1}}],[\"empty\",{\"1\":{\"778\":1}}],[\"emitted\",{\"1\":{\"749\":1}}],[\"elasticsearch\",{\"1\":{\"2604\":1,\"2605\":1,\"2615\":1,\"3445\":1,\"4982\":1,\"4983\":1,\"4993\":1,\"5714\":1}}],[\"elementcount++\",{\"1\":{\"774\":1}}],[\"elementcount\",{\"1\":{\"752\":2,\"774\":4,\"788\":3}}],[\"elementdata\",{\"1\":{\"749\":2,\"752\":2,\"754\":1,\"774\":4,\"778\":5,\"786\":4,\"788\":4}}],[\"element\",{\"1\":{\"749\":1,\"774\":2,\"776\":2,\"778\":2}}],[\"elements\",{\"1\":{\"749\":2}}],[\"else\",{\"1\":{\"421\":1,\"457\":2,\"485\":1,\"1263\":2,\"3193\":1,\"3878\":1,\"3936\":1,\"4537\":1,\"5455\":2}}],[\"equals\",{\"1\":{\"485\":2,\"3936\":2}}],[\"errorresult\",{\"1\":{\"1159\":2,\"4192\":2}}],[\"error\",{\"1\":{\"433\":1,\"445\":1,\"455\":2,\"1063\":1,\"1159\":3,\"3892\":1,\"3904\":1,\"3914\":2,\"4096\":1,\"4192\":3}}],[\"e\",{\"0\":{\"5831\":1},\"1\":{\"421\":1,\"455\":4,\"466\":2,\"774\":2,\"776\":1,\"778\":1,\"784\":1,\"786\":2,\"788\":2,\"1159\":8,\"3193\":3,\"3203\":5,\"3878\":1,\"3914\":4,\"3917\":2,\"4192\":8}}],[\"exists\",{\"1\":{\"3545\":1,\"5814\":1}}],[\"ex\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"expungestaleentry\",{\"1\":{\"3203\":1}}],[\"expires\",{\"1\":{\"2506\":1,\"3002\":1,\"3003\":1,\"3004\":1,\"3009\":1,\"5380\":1,\"5381\":1,\"5382\":1,\"5387\":1,\"5604\":1}}],[\"expectedmodcount\",{\"1\":{\"749\":2}}],[\"executing\",{\"1\":{\"3360\":1}}],[\"execution\",{\"1\":{\"180\":1,\"182\":1,\"3288\":1,\"3356\":1,\"3357\":1,\"3829\":1,\"3831\":1,\"4552\":1}}],[\"executor\",{\"0\":{\"3330\":1},\"1\":{\"3288\":1,\"3296\":1,\"3361\":1,\"4552\":1,\"4560\":1,\"4587\":1}}],[\"executors\",{\"0\":{\"3330\":1},\"1\":{\"3286\":2,\"3340\":1,\"3341\":1,\"4550\":2,\"4587\":1,\"4597\":1,\"4598\":1}}],[\"executed\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"execute\",{\"1\":{\"3200\":2,\"3288\":1,\"3319\":1,\"4552\":1}}],[\"execdriver\",{\"1\":{\"2026\":1,\"2027\":1,\"4631\":1,\"4632\":1}}],[\"excess\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"exceptioncatch\",{\"1\":{\"1159\":2,\"4192\":2}}],[\"exceptionhandler\",{\"1\":{\"1155\":1,\"1156\":1,\"1159\":2,\"4188\":1,\"4189\":1,\"4192\":2}}],[\"exceptions\",{\"0\":{\"440\":2,\"3899\":2}}],[\"exception\",{\"1\":{\"434\":2,\"457\":4,\"466\":1,\"468\":3,\"470\":1,\"1159\":6,\"3893\":2,\"3917\":1,\"3919\":3,\"3921\":1,\"4192\":6}}],[\"excludename\",{\"1\":{\"1142\":1,\"4175\":1}}],[\"exclude\",{\"1\":{\"1142\":1,\"4175\":1}}],[\"extends\",{\"1\":{\"499\":1,\"861\":1,\"1158\":1,\"3950\":1,\"4070\":1,\"4191\":1}}],[\"extensionclassloader\",{\"1\":{\"403\":1,\"3858\":1}}],[\"ext\",{\"1\":{\"403\":2,\"3858\":2}}],[\"enabled\",{\"1\":{\"3571\":1}}],[\"enableasync注解开启异步调用\",{\"1\":{\"3507\":1,\"5776\":1}}],[\"enableautoconfiguration=true\",{\"1\":{\"1140\":1,\"4173\":1}}],[\"enableautoconfiguration开启自动装配\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"enableautoconfiguration会自动去maven中读取每个starter中的spring\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"entries配置\",{\"1\":{\"2938\":1,\"5316\":1}}],[\"entries\",{\"1\":{\"2930\":1,\"2945\":1,\"5308\":1,\"5323\":1}}],[\"entry\",{\"1\":{\"3193\":1,\"3203\":2}}],[\"entryset\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"entry<string\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"entity\",{\"1\":{\"2506\":1,\"5604\":1}}],[\"enumeration\",{\"1\":{\"891\":1}}],[\"ensureexplicitcapacity\",{\"1\":{\"778\":1}}],[\"ensurecapacityinternal\",{\"1\":{\"778\":2}}],[\"ensurecapacityhelper\",{\"1\":{\"774\":2}}],[\"ensure\",{\"1\":{\"752\":1}}],[\"endpoint\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"end2\",{\"1\":{\"601\":2}}],[\"end1\",{\"1\":{\"601\":2}}],[\"encouraged\",{\"1\":{\"411\":1,\"3866\":1}}],[\"engine\",{\"1\":{\"180\":1,\"182\":1,\"2023\":1,\"3829\":1,\"3831\":1,\"4628\":1}}],[\"enhancer类来动态获取被代理类\",{\"1\":{\"862\":1,\"4071\":1}}],[\"enhancer\",{\"1\":{\"859\":1,\"4068\":1}}],[\"enhance\",{\"1\":{\"42\":1,\"3696\":1}}],[\"图解线程池实现原理\",{\"1\":{\"4582\":1}}],[\"图片来源\",{\"1\":{\"3298\":1,\"4562\":1}}],[\"图片的路径\",{\"1\":{\"2924\":1,\"5302\":1}}],[\"图片\",{\"1\":{\"2837\":1,\"4374\":1,\"4376\":1,\"4378\":1,\"4380\":1,\"4382\":1,\"4384\":1,\"4398\":1,\"4449\":1,\"4460\":1,\"4466\":1,\"4467\":1,\"4604\":1,\"4609\":1,\"4611\":1,\"4614\":1,\"5215\":1}}],[\"图片增强\",{\"0\":{\"79\":1,\"3733\":1}}],[\"图表\",{\"0\":{\"85\":1,\"3739\":1}}],[\"03\",{\"1\":{\"3361\":1,\"4615\":1}}],[\"02\",{\"1\":{\"3181\":1,\"3218\":1,\"4342\":1,\"4526\":1}}],[\"0连接发起多重的请求\",{\"1\":{\"2217\":1,\"2232\":1,\"2247\":1,\"2260\":1,\"2273\":1,\"2288\":1,\"5524\":1,\"5547\":1}}],[\"04\",{\"0\":{\"2164\":1,\"4286\":1}}],[\"0xffffcd7d\",{\"1\":{\"1014\":1}}],[\"0x7fffffff\",{\"1\":{\"1000\":1,\"1024\":1}}],[\"06\",{\"1\":{\"1006\":1}}],[\"0版本\",{\"1\":{\"885\":1}}],[\"0000在对0000\",{\"1\":{\"984\":1}}],[\"0000和0001\",{\"1\":{\"984\":1}}],[\"00000000000000000000000000001111\",{\"1\":{\"989\":1}}],[\"00000006\",{\"1\":{\"879\":1,\"3987\":1}}],[\"00000094\",{\"1\":{\"880\":1,\"3988\":1}}],[\"00001316\",{\"1\":{\"880\":1,\"3988\":1}}],[\"01\",{\"1\":{\"592\":1}}],[\"0\",{\"0\":{\"2503\":1,\"2508\":1,\"2513\":2,\"3055\":1,\"5433\":1,\"5601\":1,\"5606\":1,\"5611\":2},\"1\":{\"83\":1,\"265\":1,\"266\":1,\"267\":1,\"298\":1,\"299\":1,\"452\":2,\"463\":4,\"468\":4,\"601\":2,\"617\":1,\"764\":1,\"774\":1,\"778\":1,\"786\":1,\"788\":1,\"917\":1,\"941\":1,\"945\":2,\"951\":1,\"968\":1,\"996\":1,\"1014\":1,\"1020\":1,\"1216\":1,\"1263\":1,\"1272\":2,\"1334\":2,\"1475\":1,\"1643\":1,\"1811\":1,\"1979\":1,\"2124\":1,\"2125\":2,\"2504\":1,\"2506\":1,\"2507\":1,\"2509\":2,\"2510\":1,\"2511\":1,\"2512\":1,\"2514\":3,\"2515\":3,\"2516\":2,\"2659\":1,\"2763\":1,\"2775\":1,\"2947\":1,\"2955\":1,\"2962\":1,\"2972\":1,\"3008\":1,\"3017\":1,\"3084\":1,\"3170\":1,\"3171\":1,\"3200\":1,\"3288\":6,\"3573\":2,\"3737\":1,\"3911\":2,\"3919\":4,\"4249\":1,\"4440\":1,\"4515\":1,\"4516\":1,\"4552\":6,\"4729\":1,\"4730\":2,\"4902\":1,\"5037\":1,\"5141\":1,\"5153\":1,\"5325\":1,\"5333\":1,\"5340\":1,\"5350\":1,\"5386\":1,\"5395\":1,\"5455\":1,\"5464\":2,\"5602\":1,\"5604\":1,\"5605\":1,\"5607\":2,\"5608\":1,\"5609\":1,\"5610\":1,\"5612\":3,\"5613\":3,\"5614\":2}}],[\"rsa\",{\"1\":{\"3642\":1,\"3647\":1}}],[\"rst\",{\"1\":{\"2342\":1}}],[\"r\",{\"1\":{\"3575\":1}}],[\"rpush+lpop\",{\"1\":{\"2934\":1,\"5312\":1}}],[\"rpop\",{\"1\":{\"2934\":1,\"5312\":1}}],[\"rpc\",{\"1\":{\"845\":1,\"4054\":1}}],[\"ribbon\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"run\",{\"1\":{\"3200\":1,\"3302\":1,\"4567\":1}}],[\"running\",{\"1\":{\"1345\":1,\"1513\":1,\"1681\":1,\"1849\":1,\"4772\":1}}],[\"runnable\",{\"1\":{\"1344\":1,\"1512\":1,\"1680\":1,\"1848\":1,\"3190\":1,\"3200\":1,\"3288\":1,\"4534\":1,\"4552\":1,\"4771\":1}}],[\"runtimeexception\",{\"1\":{\"1158\":1,\"4191\":1}}],[\"runtimeexception与其子类\",{\"1\":{\"445\":1,\"3904\":1}}],[\"runtime\",{\"1\":{\"179\":1,\"182\":1,\"251\":2,\"281\":1,\"3828\":1,\"3831\":1}}],[\"roll\",{\"1\":{\"2854\":1,\"2858\":1,\"5232\":1,\"5236\":1}}],[\"rollback\",{\"1\":{\"2569\":1,\"4947\":1}}],[\"row\",{\"1\":{\"2565\":1,\"2769\":1,\"2770\":1,\"2859\":1,\"4943\":1,\"5147\":1,\"5148\":1,\"5237\":1}}],[\"rowbounds\",{\"1\":{\"1212\":1,\"4245\":1}}],[\"roundrobinassignor的分配策略是将消费组内订阅的所有topic的分区及所有消费者进行排序后尽量均衡的分配\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"roundrobinassignor\",{\"1\":{\"1266\":1,\"1279\":1,\"5458\":1,\"5471\":1}}],[\"robin算法\",{\"1\":{\"1262\":1,\"5454\":1}}],[\"root\",{\"1\":{\"613\":1}}],[\"roots\",{\"1\":{\"302\":1,\"303\":1,\"364\":1,\"365\":1}}],[\"rdb\",{\"0\":{\"2963\":1,\"2967\":1,\"5341\":1,\"5345\":1},\"1\":{\"2960\":1,\"2962\":1,\"2968\":1,\"2976\":1,\"5338\":1,\"5340\":1,\"5346\":1,\"5354\":1}}],[\"rd\",{\"1\":{\"1154\":1,\"4187\":1}}],[\"random\",{\"1\":{\"3004\":1,\"3006\":1,\"5382\":1,\"5384\":1}}],[\"rangeassignor是针对单个topic的分区进行排序分配的\",{\"1\":{\"1280\":1,\"5472\":1}}],[\"rangeassignor对每个topic进行独立的分区分配\",{\"1\":{\"1269\":1,\"5461\":1}}],[\"rangeassignor\",{\"1\":{\"1268\":1,\"5460\":1}}],[\"rangeassigor\",{\"1\":{\"1266\":1,\"5458\":1}}],[\"rangecheck\",{\"1\":{\"786\":1}}],[\"rangecheckforadd\",{\"1\":{\"778\":2}}],[\"raft\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"rather\",{\"1\":{\"411\":1,\"3866\":1}}],[\"ray\",{\"0\":{\"172\":1,\"3821\":1},\"1\":{\"147\":1,\"170\":1,\"3801\":1,\"3819\":1}}],[\"rtree\",{\"1\":{\"2604\":1,\"4982\":1}}],[\"rtt\",{\"1\":{\"2515\":2,\"5613\":2}}],[\"rt\",{\"1\":{\"402\":1,\"3857\":1}}],[\"rejectedexecution\",{\"1\":{\"3316\":1,\"4581\":1}}],[\"rejectedexecutionexception\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"rejectedexecutionexception来拒绝新任务的处理\",{\"1\":{\"3301\":1,\"4566\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"3288\":1,\"3305\":1,\"4552\":1,\"4570\":1}}],[\"reentrantlock\",{\"0\":{\"4336\":1},\"1\":{\"3206\":1,\"3207\":1,\"3208\":1,\"3209\":1,\"3210\":1,\"3211\":1,\"3212\":1,\"3213\":2,\"3214\":1,\"3215\":1,\"3216\":1,\"3217\":1,\"3249\":1,\"3260\":1,\"3274\":1,\"3275\":1,\"4330\":1,\"4331\":1,\"4332\":1,\"4333\":1,\"4334\":1,\"4335\":1,\"4337\":2,\"4338\":1,\"4339\":1,\"4340\":1,\"4341\":1,\"4479\":1,\"4488\":1,\"4502\":1,\"4503\":1}}],[\"reentrantreadwritelock\",{\"1\":{\"3061\":1,\"3263\":1,\"3266\":1,\"4415\":1,\"4491\":1,\"4494\":1}}],[\"recently\",{\"1\":{\"3002\":1,\"3005\":1,\"5380\":1,\"5383\":1}}],[\"record\",{\"0\":{\"2782\":1,\"5160\":1},\"1\":{\"2779\":1,\"2781\":1,\"2783\":1,\"2791\":1,\"2857\":1,\"5157\":1,\"5159\":1,\"5161\":1,\"5169\":1,\"5235\":1}}],[\"rewrite\",{\"1\":{\"2982\":1,\"5360\":1}}],[\"redirect\",{\"1\":{\"3361\":1,\"4615\":1}}],[\"redis实现\",{\"1\":{\"3518\":1,\"5787\":1}}],[\"redis就会自动触发bgsave命令创建快照\",{\"1\":{\"2966\":3,\"5344\":3}}],[\"redis\",{\"0\":{\"2905\":1,\"2906\":1,\"2907\":1,\"2999\":1,\"3055\":1,\"5283\":1,\"5284\":1,\"5285\":1,\"5377\":1,\"5433\":1},\"1\":{\"1475\":4,\"1643\":4,\"1811\":4,\"1979\":4,\"2192\":1,\"2908\":1,\"2909\":1,\"2910\":2,\"2911\":1,\"2922\":1,\"2930\":1,\"2931\":1,\"2932\":1,\"2938\":1,\"2939\":1,\"2945\":1,\"2946\":1,\"2947\":1,\"2953\":1,\"2954\":1,\"2955\":1,\"2959\":2,\"2962\":1,\"2964\":4,\"2965\":2,\"2968\":1,\"2969\":1,\"2970\":1,\"2972\":2,\"2974\":2,\"2983\":1,\"2992\":1,\"2995\":1,\"2996\":1,\"2998\":1,\"3000\":2,\"3001\":1,\"3019\":2,\"3046\":1,\"3047\":1,\"3445\":1,\"3533\":1,\"3534\":1,\"3536\":1,\"3537\":1,\"4314\":1,\"4902\":4,\"5286\":1,\"5287\":1,\"5288\":2,\"5289\":1,\"5300\":1,\"5308\":1,\"5309\":1,\"5310\":1,\"5316\":1,\"5317\":1,\"5323\":1,\"5324\":1,\"5325\":1,\"5331\":1,\"5332\":1,\"5333\":1,\"5337\":2,\"5340\":1,\"5342\":4,\"5343\":2,\"5346\":1,\"5347\":1,\"5348\":1,\"5350\":2,\"5352\":2,\"5361\":1,\"5370\":1,\"5373\":1,\"5374\":1,\"5376\":1,\"5378\":2,\"5379\":1,\"5397\":2,\"5424\":1,\"5425\":1,\"5714\":1,\"5802\":1,\"5803\":1,\"5805\":1,\"5806\":1}}],[\"redo\",{\"1\":{\"2576\":1,\"2811\":1,\"4954\":1,\"5189\":1}}],[\"relevant\",{\"1\":{\"1295\":3,\"1304\":5,\"5487\":3,\"5496\":5}}],[\"reuse\",{\"1\":{\"1238\":1,\"4271\":1}}],[\"restcontroller\",{\"1\":{\"3565\":1}}],[\"restful\",{\"1\":{\"1183\":1,\"4216\":1}}],[\"result\",{\"1\":{\"3193\":2}}],[\"resultset\",{\"1\":{\"1212\":1,\"4245\":1}}],[\"responseresult\",{\"1\":{\"1159\":4,\"4192\":4}}],[\"responsebody\",{\"1\":{\"1159\":2,\"4192\":2}}],[\"resource\",{\"0\":{\"453\":1,\"3912\":1}}],[\"resources\",{\"1\":{\"402\":1,\"1144\":1,\"3857\":1,\"4177\":1}}],[\"resove\",{\"1\":{\"408\":1,\"3863\":1}}],[\"resolveclass\",{\"1\":{\"408\":1,\"421\":1,\"3863\":1,\"3878\":1}}],[\"resolve\",{\"1\":{\"408\":1,\"412\":1,\"421\":2,\"3863\":1,\"3867\":1,\"3878\":2}}],[\"resolution\",{\"1\":{\"386\":1,\"2469\":1,\"3839\":1,\"5567\":1}}],[\"requires\",{\"1\":{\"1103\":1,\"4136\":1}}],[\"required\",{\"1\":{\"1099\":1,\"1107\":1,\"4132\":1,\"4140\":1}}],[\"requestmapping\",{\"1\":{\"3565\":2}}],[\"request\",{\"1\":{\"1059\":1,\"2089\":1,\"4092\":1,\"4694\":1}}],[\"repeatable\",{\"1\":{\"1091\":1,\"1094\":1,\"2569\":1,\"2834\":1,\"4124\":1,\"4127\":1,\"4947\":1,\"5212\":1}}],[\"register|login\",{\"1\":{\"3594\":1,\"3600\":1}}],[\"registry\",{\"1\":{\"2024\":1,\"4629\":1}}],[\"region\",{\"1\":{\"375\":4,\"380\":2,\"382\":1}}],[\"regularize\",{\"1\":{\"1014\":1}}],[\"rehash之后的链表可能为c\",{\"1\":{\"869\":1,\"3977\":1}}],[\"reflect\",{\"1\":{\"861\":1,\"4070\":1}}],[\"remove\",{\"1\":{\"784\":2,\"786\":1,\"788\":1,\"3200\":1,\"3202\":1,\"3203\":1}}],[\"remembered\",{\"1\":{\"379\":3}}],[\"reached\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"reactor\",{\"0\":{\"1434\":1,\"1455\":1,\"1476\":1,\"1494\":1,\"1602\":1,\"1623\":1,\"1644\":1,\"1662\":1,\"1770\":1,\"1791\":1,\"1812\":1,\"1830\":1,\"1938\":1,\"1959\":1,\"1980\":1,\"1998\":1,\"4861\":1,\"4882\":1,\"4903\":1,\"4921\":1},\"1\":{\"1435\":2,\"1436\":1,\"1438\":1,\"1439\":1,\"1442\":1,\"1443\":1,\"1444\":1,\"1445\":1,\"1446\":2,\"1448\":1,\"1449\":1,\"1450\":1,\"1454\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1460\":1,\"1461\":1,\"1465\":1,\"1466\":1,\"1470\":1,\"1474\":1,\"1475\":1,\"1477\":2,\"1478\":1,\"1481\":1,\"1484\":1,\"1490\":2,\"1491\":2,\"1492\":1,\"1493\":2,\"1495\":4,\"1496\":1,\"1503\":2,\"1506\":1,\"1603\":2,\"1604\":1,\"1606\":1,\"1607\":1,\"1610\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":2,\"1616\":1,\"1617\":1,\"1618\":1,\"1622\":1,\"1624\":1,\"1625\":1,\"1626\":1,\"1628\":1,\"1629\":1,\"1633\":1,\"1634\":1,\"1638\":1,\"1642\":1,\"1643\":1,\"1645\":2,\"1646\":1,\"1649\":1,\"1652\":1,\"1658\":2,\"1659\":2,\"1660\":1,\"1661\":2,\"1663\":4,\"1664\":1,\"1671\":2,\"1674\":1,\"1771\":2,\"1772\":1,\"1774\":1,\"1775\":1,\"1778\":1,\"1779\":1,\"1780\":1,\"1781\":1,\"1782\":2,\"1784\":1,\"1785\":1,\"1786\":1,\"1790\":1,\"1792\":1,\"1793\":1,\"1794\":1,\"1796\":1,\"1797\":1,\"1801\":1,\"1802\":1,\"1806\":1,\"1810\":1,\"1811\":1,\"1813\":2,\"1814\":1,\"1817\":1,\"1820\":1,\"1826\":2,\"1827\":2,\"1828\":1,\"1829\":2,\"1831\":4,\"1832\":1,\"1839\":2,\"1842\":1,\"1939\":2,\"1940\":1,\"1942\":1,\"1943\":1,\"1946\":1,\"1947\":1,\"1948\":1,\"1949\":1,\"1950\":2,\"1952\":1,\"1953\":1,\"1954\":1,\"1958\":1,\"1960\":1,\"1961\":1,\"1962\":1,\"1964\":1,\"1965\":1,\"1969\":1,\"1970\":1,\"1974\":1,\"1978\":1,\"1979\":1,\"1981\":2,\"1982\":1,\"1985\":1,\"1988\":1,\"1994\":2,\"1995\":2,\"1996\":1,\"1997\":2,\"1999\":4,\"2000\":1,\"2007\":2,\"2010\":1,\"2910\":1,\"4862\":2,\"4863\":1,\"4865\":1,\"4866\":1,\"4869\":1,\"4870\":1,\"4871\":1,\"4872\":1,\"4873\":2,\"4875\":1,\"4876\":1,\"4877\":1,\"4881\":1,\"4883\":1,\"4884\":1,\"4885\":1,\"4887\":1,\"4888\":1,\"4892\":1,\"4893\":1,\"4897\":1,\"4901\":1,\"4902\":1,\"4904\":2,\"4905\":1,\"4908\":1,\"4911\":1,\"4917\":2,\"4918\":2,\"4919\":1,\"4920\":2,\"4922\":4,\"4923\":1,\"4930\":2,\"4933\":1,\"5288\":1}}],[\"reator\",{\"1\":{\"1487\":1,\"1655\":1,\"1823\":1,\"1991\":1,\"4914\":1}}],[\"realstack\",{\"1\":{\"588\":1}}],[\"readview主要是用来做可见性判断\",{\"1\":{\"2860\":1,\"5238\":1}}],[\"readonly\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"readline\",{\"1\":{\"457\":1}}],[\"read\",{\"1\":{\"455\":1,\"1091\":2,\"1092\":1,\"1093\":1,\"1094\":1,\"1354\":1,\"1388\":1,\"1389\":1,\"1393\":1,\"1404\":2,\"1412\":1,\"1418\":1,\"1437\":1,\"1464\":1,\"1469\":1,\"1485\":1,\"1502\":1,\"1522\":1,\"1556\":1,\"1557\":1,\"1561\":1,\"1572\":2,\"1580\":1,\"1586\":1,\"1605\":1,\"1632\":1,\"1637\":1,\"1653\":1,\"1670\":1,\"1690\":1,\"1724\":1,\"1725\":1,\"1729\":1,\"1740\":2,\"1748\":1,\"1754\":1,\"1773\":1,\"1800\":1,\"1805\":1,\"1821\":1,\"1838\":1,\"1858\":1,\"1892\":1,\"1893\":1,\"1897\":1,\"1908\":2,\"1916\":1,\"1922\":1,\"1941\":1,\"1968\":1,\"1973\":1,\"1989\":1,\"2006\":1,\"2569\":1,\"2689\":1,\"2701\":2,\"2702\":1,\"2715\":1,\"2748\":1,\"2832\":1,\"2833\":1,\"2834\":1,\"2852\":6,\"2854\":3,\"2861\":2,\"2865\":2,\"2866\":1,\"3914\":1,\"4124\":2,\"4125\":1,\"4126\":1,\"4127\":1,\"4781\":1,\"4815\":1,\"4816\":1,\"4820\":1,\"4831\":2,\"4839\":1,\"4845\":1,\"4864\":1,\"4891\":1,\"4896\":1,\"4912\":1,\"4929\":1,\"4947\":1,\"5067\":1,\"5079\":2,\"5080\":1,\"5093\":1,\"5126\":1,\"5210\":1,\"5211\":1,\"5212\":1,\"5230\":6,\"5232\":3,\"5239\":2,\"5243\":2,\"5244\":1}}],[\"ret++\",{\"1\":{\"463\":1}}],[\"ret\",{\"1\":{\"463\":5}}],[\"returns\",{\"1\":{\"3356\":1,\"3357\":1,\"3358\":1,\"3359\":1,\"3360\":1}}],[\"return\",{\"1\":{\"215\":1,\"421\":1,\"452\":1,\"463\":2,\"468\":1,\"485\":1,\"491\":1,\"784\":1,\"786\":1,\"788\":1,\"820\":1,\"968\":3,\"981\":1,\"987\":1,\"999\":1,\"1014\":2,\"1020\":1,\"1028\":1,\"1158\":1,\"1159\":4,\"1263\":4,\"1272\":1,\"1334\":1,\"3193\":3,\"3203\":1,\"3565\":1,\"3878\":1,\"3911\":1,\"3919\":1,\"3936\":1,\"3942\":1,\"4029\":1,\"4191\":1,\"4192\":4,\"4537\":1,\"5455\":4,\"5464\":1}}],[\"r−i​\",{\"1\":{\"94\":1,\"3748\":1}}],[\"r−i+1\",{\"1\":{\"94\":1,\"3748\":1}}],[\"r+i=1∑r​ωi\",{\"1\":{\"94\":1,\"3748\":1}}],[\"rgba\",{\"1\":{\"83\":1,\"3737\":1}}],[\"rbnaakhnddhoaohlkdmtt3blbkfjeefvpcmjhg4usggd8bhk\",{\"1\":{\"1\":1}}],[\"l\",{\"1\":{\"3164\":1,\"4508\":1}}],[\"lfu\",{\"1\":{\"3009\":1,\"3010\":1,\"5387\":1,\"5388\":1}}],[\"lru\",{\"1\":{\"3002\":1,\"3005\":1,\"5380\":1,\"5383\":1}}],[\"lpush\",{\"1\":{\"2934\":1,\"5312\":1}}],[\"lt\",{\"1\":{\"1386\":1,\"1554\":1,\"1722\":1,\"1890\":1,\"4813\":1}}],[\"leadnews\",{\"1\":{\"3541\":1,\"5810\":1}}],[\"leader\",{\"1\":{\"2105\":5,\"2106\":3,\"2110\":1,\"2111\":1,\"2112\":1,\"2116\":2,\"2117\":2,\"2118\":1,\"2119\":3,\"2120\":1,\"2122\":5,\"2123\":3,\"2124\":1,\"2125\":4,\"2127\":1,\"2129\":1,\"2131\":1,\"2133\":1,\"2134\":2,\"2136\":2,\"2139\":1,\"2141\":4,\"4710\":5,\"4711\":3,\"4715\":1,\"4716\":1,\"4717\":1,\"4721\":2,\"4722\":2,\"4723\":1,\"4724\":3,\"4725\":1,\"4727\":5,\"4728\":3,\"4729\":1,\"4730\":4,\"4732\":1,\"4734\":1,\"4736\":1,\"4738\":1,\"4739\":2,\"4741\":2,\"4744\":1,\"4746\":4}}],[\"least\",{\"1\":{\"3002\":1,\"3005\":1,\"3009\":1,\"3010\":1,\"5380\":1,\"5383\":1,\"5387\":1,\"5388\":1}}],[\"len\",{\"1\":{\"1405\":2,\"1573\":2,\"1741\":2,\"1909\":2,\"2920\":1,\"2921\":1,\"3203\":3,\"4832\":2,\"5298\":1,\"5299\":1}}],[\"length\",{\"1\":{\"749\":3,\"774\":1,\"963\":1,\"968\":2,\"969\":1,\"981\":1,\"996\":1,\"1000\":1,\"1021\":1,\"1024\":1,\"1272\":2,\"1334\":1,\"3203\":1,\"5464\":2}}],[\"level\",{\"1\":{\"1386\":1,\"1554\":1,\"1722\":1,\"1890\":1,\"2565\":2,\"4813\":1,\"4943\":2}}],[\"let\",{\"1\":{\"786\":1,\"788\":1}}],[\"lk\",{\"1\":{\"606\":1}}],[\"largest\",{\"1\":{\"3358\":1}}],[\"landin\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"language\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"lang=zh\",{\"1\":{\"1154\":1,\"4187\":1}}],[\"lang\",{\"1\":{\"420\":1,\"468\":2,\"861\":1,\"3169\":1,\"3877\":1,\"3919\":2,\"4070\":1,\"4514\":1}}],[\"lambda\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"label\",{\"1\":{\"457\":1}}],[\"low\",{\"1\":{\"2861\":2,\"2863\":1,\"2864\":1,\"5239\":2,\"5241\":1,\"5242\":1}}],[\"looking\",{\"1\":{\"2124\":1,\"2125\":1,\"2126\":1,\"2128\":1,\"2134\":1,\"4729\":1,\"4730\":1,\"4731\":1,\"4733\":1,\"4739\":1}}],[\"lock\",{\"0\":{\"2164\":1,\"2782\":1,\"2786\":1,\"2790\":1,\"4286\":1,\"5160\":1,\"5164\":1,\"5168\":1},\"1\":{\"1353\":1,\"1354\":1,\"1521\":1,\"1522\":1,\"1689\":1,\"1690\":1,\"1857\":1,\"1858\":1,\"2569\":1,\"2689\":1,\"2715\":2,\"2747\":1,\"2748\":2,\"2762\":1,\"2763\":1,\"2764\":1,\"2765\":1,\"2768\":1,\"2770\":1,\"2774\":1,\"2779\":1,\"2780\":1,\"2781\":3,\"2783\":1,\"2787\":1,\"2791\":3,\"2792\":1,\"2793\":3,\"2794\":2,\"2797\":1,\"2848\":3,\"3213\":1,\"3214\":1,\"4337\":1,\"4338\":1,\"4780\":1,\"4781\":1,\"4947\":1,\"5067\":1,\"5093\":2,\"5125\":1,\"5126\":2,\"5140\":1,\"5141\":1,\"5142\":1,\"5143\":1,\"5146\":1,\"5148\":1,\"5152\":1,\"5157\":1,\"5158\":1,\"5159\":3,\"5161\":1,\"5165\":1,\"5169\":3,\"5170\":1,\"5171\":3,\"5172\":2,\"5175\":1,\"5226\":3}}],[\"locking\",{\"1\":{\"819\":1,\"2565\":2,\"4028\":1,\"4943\":2}}],[\"locations\",{\"1\":{\"1014\":1}}],[\"localstorage\",{\"1\":{\"3484\":1,\"5753\":1}}],[\"localvariable对象的大小\",{\"1\":{\"3201\":1}}],[\"localvariable>的强引用\",{\"1\":{\"3201\":1}}],[\"localvariable\",{\"1\":{\"3200\":6}}],[\"localhost\",{\"1\":{\"1178\":1,\"3594\":1,\"3600\":1,\"4211\":1}}],[\"local\",{\"1\":{\"212\":1,\"3200\":1}}],[\"load\",{\"1\":{\"911\":1,\"917\":1,\"2983\":1,\"5361\":1}}],[\"loadfactor两个参数的方法\",{\"1\":{\"948\":1}}],[\"loadfactor是装载因子\",{\"1\":{\"940\":1,\"950\":1}}],[\"loadfactor和threshold又是干啥的\",{\"1\":{\"922\":1}}],[\"loadfactor的默认值为0\",{\"1\":{\"917\":1}}],[\"loadfactor\",{\"1\":{\"911\":1,\"916\":1,\"939\":1,\"943\":10,\"945\":2,\"950\":1}}],[\"loader\",{\"1\":{\"851\":2,\"4060\":2}}],[\"loadclass\",{\"1\":{\"408\":1,\"413\":1,\"420\":1,\"421\":2,\"425\":1,\"3863\":1,\"3868\":1,\"3877\":1,\"3878\":2,\"3882\":1}}],[\"loading\",{\"1\":{\"386\":1,\"3839\":1}}],[\"long\",{\"1\":{\"251\":2,\"421\":2,\"601\":4,\"3200\":2,\"3288\":1,\"3878\":2,\"4552\":1}}],[\"log功能\",{\"1\":{\"3570\":1}}],[\"logger\",{\"1\":{\"3565\":1}}],[\"log2\",{\"1\":{\"686\":1,\"733\":1}}],[\"log2n\",{\"1\":{\"647\":1,\"648\":1}}],[\"logn\",{\"1\":{\"656\":1,\"658\":2,\"669\":1,\"672\":1,\"1017\":1,\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"3997\":1,\"3999\":2,\"4011\":1,\"4014\":1,\"4806\":1}}],[\"log\",{\"0\":{\"2868\":1,\"5246\":1},\"1\":{\"455\":2,\"871\":1,\"1159\":2,\"2576\":1,\"2811\":1,\"2812\":1,\"2854\":2,\"2858\":1,\"2869\":1,\"2871\":1,\"2872\":3,\"2873\":3,\"3569\":1,\"3571\":1,\"3575\":1,\"3914\":2,\"3979\":1,\"4192\":2,\"4954\":1,\"5189\":1,\"5190\":1,\"5232\":2,\"5236\":1,\"5247\":1,\"5249\":1,\"5250\":3,\"5251\":3}}],[\"logs\",{\"1\":{\"379\":2,\"2861\":1,\"3571\":1,\"5239\":1}}],[\"logy\",{\"1\":{\"94\":2,\"3748\":2}}],[\"logout\",{\"1\":{\"3558\":1,\"5827\":1}}],[\"logo\",{\"1\":{\"83\":2,\"3737\":2}}],[\"like\",{\"1\":{\"2654\":1,\"2681\":2,\"5032\":1,\"5059\":2}}],[\"limit\",{\"1\":{\"1216\":1,\"2861\":3,\"2863\":1,\"2864\":3,\"2903\":1,\"4249\":1,\"5239\":3,\"5241\":1,\"5242\":3,\"5281\":1}}],[\"list和zset\",{\"1\":{\"3523\":1,\"5792\":1}}],[\"listpack\",{\"1\":{\"2947\":1,\"2955\":1,\"5325\":1,\"5333\":1}}],[\"listen\",{\"0\":{\"2449\":1},\"1\":{\"2330\":1,\"2334\":1}}],[\"listener\",{\"1\":{\"1174\":1,\"4207\":1}}],[\"list<topicpartition>\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"list<topicpartition>>\",{\"1\":{\"1272\":2,\"5464\":2}}],[\"list<partitioninfo>\",{\"1\":{\"1263\":2,\"5455\":2}}],[\"list<string>>\",{\"1\":{\"1272\":2,\"5464\":2}}],[\"list<string>\",{\"1\":{\"770\":1,\"1272\":1,\"5464\":1}}],[\"listiterator\",{\"1\":{\"804\":1}}],[\"list1\",{\"1\":{\"770\":1}}],[\"list2\",{\"1\":{\"770\":1}}],[\"list主要有arraylist\",{\"1\":{\"737\":1}}],[\"list常见面试题\",{\"0\":{\"735\":1}}],[\"list特点\",{\"1\":{\"691\":1}}],[\"list\",{\"0\":{\"702\":1,\"2927\":1,\"3972\":1,\"5305\":1},\"1\":{\"523\":1,\"525\":1,\"527\":1,\"609\":1,\"690\":1,\"767\":2,\"770\":3,\"776\":1,\"784\":1,\"2913\":1,\"2929\":1,\"2930\":3,\"2931\":1,\"2932\":1,\"2934\":1,\"5291\":1,\"5307\":1,\"5308\":3,\"5309\":1,\"5310\":1,\"5312\":1}}],[\"linux如何给文件权限\",{\"1\":{\"3428\":1,\"5708\":1}}],[\"linux\",{\"0\":{\"2419\":1,\"5834\":1,\"5846\":1},\"1\":{\"1325\":1,\"1415\":1,\"1422\":1,\"1433\":1,\"1583\":1,\"1590\":1,\"1601\":1,\"1751\":1,\"1758\":1,\"1769\":1,\"1919\":1,\"1926\":1,\"1937\":1,\"2015\":1,\"2304\":1,\"2984\":1,\"2985\":1,\"2986\":1,\"4282\":1,\"4620\":1,\"4842\":1,\"4849\":1,\"4860\":1,\"5362\":1,\"5363\":1,\"5364\":1}}],[\"linux常用命令\",{\"0\":{\"1319\":1,\"4276\":1}}],[\"line\",{\"1\":{\"457\":3,\"2516\":1,\"5614\":1}}],[\"linkedblockingqueue<>\",{\"1\":{\"3200\":1}}],[\"linkedblockingqueue\",{\"1\":{\"3200\":1,\"3309\":1,\"3342\":1,\"4574\":1,\"4599\":1}}],[\"linkedhashset是hashset的子类\",{\"1\":{\"688\":1}}],[\"linkedhashset\",{\"0\":{\"687\":1}}],[\"linkedhashmap可以保持插入顺序或访问顺序\",{\"1\":{\"1041\":1}}],[\"linkedhashmap也不例外\",{\"1\":{\"688\":1}}],[\"linkedhashmap\",{\"0\":{\"1040\":1},\"1\":{\"485\":1,\"492\":1,\"3936\":1,\"3943\":1}}],[\"linkedhashmap<>\",{\"1\":{\"483\":1,\"485\":1,\"3934\":1,\"3936\":1}}],[\"linkedlist与vector几种实现\",{\"1\":{\"737\":1}}],[\"linkedlist内部是一个双向链表\",{\"1\":{\"714\":1}}],[\"linkedlist是一个list\",{\"1\":{\"714\":1}}],[\"linkedlist\",{\"0\":{\"713\":1},\"1\":{\"572\":1,\"573\":1,\"574\":1,\"577\":2,\"604\":1,\"740\":1,\"744\":1}}],[\"linkedlist<>\",{\"1\":{\"571\":1,\"601\":1}}],[\"linking\",{\"1\":{\"214\":1,\"386\":1,\"3839\":1}}],[\"link\",{\"1\":{\"83\":1,\"3737\":1}}],[\"libcontainer\",{\"1\":{\"2027\":2,\"4632\":2}}],[\"library\",{\"1\":{\"858\":1,\"4067\":1}}],[\"lib\",{\"1\":{\"403\":1,\"3858\":1}}],[\"lib目录下的\",{\"1\":{\"402\":1,\"3857\":1}}],[\"light\",{\"1\":{\"83\":1,\"3737\":1}}],[\"tls\",{\"1\":{\"2514\":1,\"2521\":2,\"5612\":1,\"5619\":2}}],[\"tlab\",{\"0\":{\"271\":2},\"1\":{\"273\":1}}],[\"ttl\",{\"1\":{\"2471\":1,\"3003\":1,\"5381\":1,\"5569\":1}}],[\"ttl>\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"tt>\",{\"1\":{\"749\":3}}],[\"tcp的最大连接数=客户端的ip数⋅客户端的端口数\",{\"1\":{\"2370\":1}}],[\"tcp四次挥手\",{\"0\":{\"2428\":1},\"1\":{\"2313\":1}}],[\"tcp三次握手\",{\"0\":{\"2417\":1},\"1\":{\"2302\":1}}],[\"tcp基础\",{\"0\":{\"2335\":1},\"1\":{\"2294\":1}}],[\"tcp和udp常见面试题\",{\"0\":{\"2291\":1}}],[\"tcp\",{\"0\":{\"2345\":2,\"2348\":1,\"2354\":1,\"2360\":1,\"2373\":1,\"2419\":1,\"2421\":1,\"2423\":1,\"2444\":1,\"2448\":1,\"2449\":1,\"2463\":1,\"2465\":1,\"2555\":1,\"5561\":1,\"5563\":1},\"1\":{\"1370\":1,\"1538\":1,\"1706\":1,\"1874\":1,\"2118\":1,\"2295\":1,\"2296\":2,\"2297\":1,\"2298\":1,\"2299\":1,\"2300\":1,\"2301\":1,\"2303\":1,\"2304\":1,\"2306\":1,\"2308\":1,\"2314\":1,\"2329\":1,\"2333\":1,\"2334\":1,\"2341\":1,\"2342\":1,\"2344\":1,\"2346\":1,\"2347\":1,\"2349\":1,\"2352\":1,\"2353\":6,\"2361\":1,\"2367\":1,\"2371\":1,\"2372\":1,\"2377\":1,\"2380\":1,\"2383\":1,\"2386\":1,\"2389\":1,\"2392\":1,\"2395\":2,\"2398\":1,\"2406\":1,\"2407\":1,\"2408\":1,\"2413\":1,\"2414\":3,\"2415\":2,\"2416\":1,\"2456\":1,\"2514\":1,\"2515\":2,\"2516\":1,\"2521\":2,\"2536\":1,\"2549\":1,\"4723\":1,\"4797\":1,\"5530\":4,\"5554\":1,\"5612\":1,\"5613\":2,\"5614\":1,\"5619\":2,\"5634\":1}}],[\"t\",{\"1\":{\"1216\":2,\"1416\":3,\"1584\":3,\"1752\":3,\"1920\":3,\"2714\":1,\"2715\":2,\"2861\":5,\"3193\":11,\"3194\":1,\"4249\":2,\"4537\":6,\"4538\":1,\"4843\":3,\"5092\":1,\"5093\":2,\"5239\":5}}],[\"tm\",{\"1\":{\"614\":1}}],[\"tmp\",{\"1\":{\"455\":1,\"3914\":1}}],[\"t3\",{\"1\":{\"614\":1,\"1291\":1,\"5483\":1}}],[\"t2\",{\"1\":{\"614\":1,\"1282\":2,\"1291\":1,\"5474\":2,\"5483\":1}}],[\"t为空时称为空树\",{\"1\":{\"612\":1}}],[\"timeunit\",{\"1\":{\"3200\":2,\"3286\":2,\"3288\":1,\"4550\":2,\"4552\":1}}],[\"time\",{\"0\":{\"2435\":1,\"2436\":1,\"2438\":1,\"2439\":1},\"1\":{\"596\":1,\"2320\":1,\"2321\":1,\"2322\":1,\"2323\":1,\"2324\":1,\"3288\":2,\"4552\":2}}],[\"title\",{\"1\":{\"83\":1,\"3737\":1}}],[\"type\",{\"1\":{\"468\":1,\"474\":1,\"3919\":1,\"3925\":1}}],[\"tag\",{\"1\":{\"2506\":1,\"5604\":1}}],[\"tasks\",{\"1\":{\"3288\":3,\"3356\":1,\"3357\":1,\"3360\":1,\"4552\":3}}],[\"task\",{\"1\":{\"1295\":1,\"1304\":2,\"5487\":1,\"5496\":2}}],[\"tab\",{\"1\":{\"1000\":1,\"1024\":1,\"3203\":4}}],[\"tables\",{\"1\":{\"2689\":1,\"2694\":1,\"2715\":2,\"2719\":1,\"2748\":2,\"5067\":1,\"5072\":1,\"5093\":2,\"5097\":1,\"5126\":2}}],[\"table\",{\"1\":{\"281\":1,\"288\":1,\"465\":1,\"468\":1,\"469\":1,\"1021\":1,\"2565\":1,\"2692\":2,\"3203\":1,\"3916\":1,\"3919\":1,\"3920\":1,\"4943\":1,\"5070\":2}}],[\"target\",{\"1\":{\"468\":1,\"473\":1,\"3919\":1,\"3924\":1}}],[\"terminating\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"tech\",{\"1\":{\"3181\":1,\"3361\":1}}],[\"tencent\",{\"1\":{\"2193\":1,\"4315\":1}}],[\"test\",{\"1\":{\"1184\":1,\"4217\":1}}],[\"testnpe\",{\"1\":{\"466\":1,\"468\":1,\"3917\":1,\"3919\":1}}],[\"template\",{\"1\":{\"1072\":1,\"3502\":1,\"4105\":1,\"5771\":1}}],[\"text\",{\"1\":{\"2605\":1,\"2615\":1,\"2628\":1,\"4983\":1,\"4993\":1,\"5006\":1}}],[\"tex\",{\"0\":{\"93\":1,\"3747\":1}}],[\"txt\",{\"1\":{\"455\":1,\"3914\":1}}],[\"t1p3\",{\"1\":{\"1278\":1,\"5470\":1}}],[\"t1p2\",{\"1\":{\"1277\":1,\"5469\":1}}],[\"t1p1\",{\"1\":{\"1276\":1,\"5468\":1}}],[\"t1p0\",{\"1\":{\"1276\":1,\"5468\":1}}],[\"t1\",{\"1\":{\"421\":3,\"1282\":2,\"1291\":1,\"3878\":3,\"5474\":2,\"5483\":1}}],[\"t0p3\",{\"1\":{\"1278\":1,\"5470\":1}}],[\"t0p2\",{\"1\":{\"1277\":1,\"5469\":1}}],[\"t0p1\",{\"1\":{\"1276\":1,\"5468\":1}}],[\"t0p0\",{\"1\":{\"1276\":1,\"5468\":1}}],[\"t0\",{\"1\":{\"421\":2,\"1282\":1,\"1291\":1,\"1295\":1,\"1304\":2,\"3878\":2,\"5474\":1,\"5483\":1,\"5487\":1,\"5496\":2}}],[\"that\",{\"1\":{\"749\":1,\"752\":1,\"3288\":1,\"3356\":1,\"3357\":1,\"3358\":1,\"3360\":1,\"4552\":1}}],[\"than\",{\"1\":{\"411\":1,\"3288\":1,\"3866\":1,\"4552\":1}}],[\"threallocal\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"threadfactory\",{\"1\":{\"3288\":7,\"3296\":1,\"4552\":7,\"4560\":1}}],[\"threads\",{\"1\":{\"3288\":4,\"3358\":1,\"3359\":1,\"3360\":1,\"4552\":4}}],[\"thread2\",{\"1\":{\"3286\":8,\"4550\":8}}],[\"threadpooltaskexecutor\",{\"1\":{\"3300\":1,\"3305\":1,\"4565\":1,\"4570\":1}}],[\"threadpool\",{\"1\":{\"3286\":1,\"4550\":1}}],[\"threadpoolexecutor其他常见参数\",{\"1\":{\"3293\":1,\"4557\":1}}],[\"threadpoolexecutor\",{\"0\":{\"3285\":1},\"1\":{\"3200\":3,\"3286\":17,\"3288\":2,\"3289\":1,\"3301\":1,\"3302\":1,\"3303\":1,\"3304\":1,\"3305\":2,\"3331\":1,\"3340\":1,\"3361\":1,\"4550\":17,\"4552\":2,\"4553\":1,\"4566\":1,\"4567\":1,\"4568\":1,\"4569\":1,\"4570\":2,\"4588\":1,\"4597\":1}}],[\"threadid\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"thread内部都是使用仅有的那个threadlocalmap\",{\"1\":{\"3197\":1,\"4541\":1}}],[\"threadlocalhashcode\",{\"1\":{\"3203\":1}}],[\"threadlocal提供了一个清除线程中对象的方法\",{\"1\":{\"3202\":1}}],[\"threadlocaldemo\",{\"1\":{\"3200\":1}}],[\"threadlocal对象\",{\"1\":{\"3197\":1,\"4541\":1}}],[\"threadlocal<localvariable>\",{\"1\":{\"3200\":2}}],[\"threadlocal<\",{\"1\":{\"3196\":1,\"3203\":1,\"4540\":1}}],[\"threadlocal类的set\",{\"1\":{\"3192\":1,\"4536\":1}}],[\"threadlocal类主要解决的就是让每个线程绑定自己的值\",{\"1\":{\"3185\":1,\"4530\":1}}],[\"threadlocals\",{\"1\":{\"3190\":1,\"3191\":1,\"3193\":5,\"4534\":1,\"4535\":1,\"4537\":2}}],[\"threadlocalmap的\",{\"1\":{\"3197\":1,\"4541\":1}}],[\"threadlocalmap\",{\"1\":{\"3190\":2,\"3191\":2,\"3193\":4,\"3194\":1,\"3196\":1,\"3202\":1,\"4534\":2,\"4535\":2,\"4537\":2,\"4538\":1,\"4540\":1}}],[\"threadlocal\",{\"0\":{\"4528\":1},\"1\":{\"3190\":2,\"3191\":1,\"3194\":2,\"3197\":2,\"3201\":1,\"4534\":2,\"4535\":1,\"4538\":2,\"4541\":2}}],[\"threadlocal会为每个线程创建单独的变量副本\",{\"1\":{\"3187\":1}}],[\"threadlocal是一个将在多线程中为每一个线程创建单独的变量副本的类\",{\"1\":{\"3187\":1}}],[\"threadlocal原理\",{\"0\":{\"3182\":1,\"4527\":1}}],[\"threadlocal关键字\",{\"0\":{\"3131\":1}}],[\"threadlocalrandom\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"thread\",{\"1\":{\"742\":1,\"3071\":1,\"3181\":2,\"3190\":1,\"3193\":6,\"3194\":1,\"3200\":1,\"3288\":2,\"3361\":2,\"4425\":1,\"4534\":1,\"4537\":4,\"4538\":1,\"4552\":2}}],[\"threshold＝容量\",{\"1\":{\"919\":1}}],[\"threshold\",{\"0\":{\"935\":1},\"1\":{\"911\":1,\"918\":1,\"938\":1,\"939\":1,\"943\":10,\"945\":2}}],[\"throw和throws的区别\",{\"0\":{\"3905\":1}}],[\"throwable3\",{\"1\":{\"457\":2}}],[\"throwable1\",{\"1\":{\"457\":2}}],[\"throwable2\",{\"1\":{\"457\":3}}],[\"throwable\",{\"1\":{\"457\":11,\"853\":1,\"861\":1,\"4062\":1,\"4070\":1}}],[\"throwable是\",{\"1\":{\"432\":1,\"3891\":1}}],[\"throw\",{\"1\":{\"450\":1,\"452\":1,\"457\":2,\"749\":1,\"774\":1,\"778\":1,\"788\":1,\"3288\":2,\"3909\":1,\"3911\":1,\"4552\":2}}],[\"throws\",{\"1\":{\"421\":1,\"447\":1,\"449\":1,\"749\":1,\"752\":1,\"851\":1,\"853\":1,\"861\":1,\"3200\":1,\"3288\":2,\"3878\":1,\"3906\":1,\"3908\":1,\"4060\":1,\"4062\":1,\"4070\":1,\"4552\":2}}],[\"this\",{\"1\":{\"411\":1,\"752\":2,\"1158\":1,\"3159\":1,\"3163\":1,\"3193\":2,\"3288\":9,\"3866\":1,\"4191\":1,\"4507\":1,\"4537\":1,\"4552\":9}}],[\"they\",{\"1\":{\"3288\":2,\"4552\":2}}],[\"theorem\",{\"1\":{\"2147\":1,\"4752\":1}}],[\"the\",{\"1\":{\"364\":1,\"455\":1,\"749\":7,\"752\":4,\"1263\":1,\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"3288\":18,\"3356\":1,\"3357\":1,\"3358\":2,\"3359\":2,\"3360\":1,\"3914\":1,\"4552\":18,\"4848\":1,\"5455\":1}}],[\"there\",{\"1\":{\"83\":2,\"3737\":2}}],[\"trx\",{\"1\":{\"2854\":1,\"2857\":1,\"2861\":5,\"2866\":1,\"5232\":1,\"5235\":1,\"5239\":5,\"5244\":1}}],[\"triggered\",{\"1\":{\"1386\":2,\"1554\":2,\"1722\":2,\"1890\":2,\"4813\":2}}],[\"treemap要求键实现comparable接口或通过构造方法提供一个com\",{\"1\":{\"1037\":1}}],[\"treemap同样实现了sortedmap和navigablemap接口\",{\"1\":{\"1036\":1}}],[\"treemap同样实现了map接口\",{\"1\":{\"1035\":1}}],[\"treemap与hashmap相比\",{\"1\":{\"1035\":1}}],[\"treemap\",{\"0\":{\"1034\":1}}],[\"treemap是按key排序的\",{\"1\":{\"701\":1}}],[\"treemap有treeset\",{\"1\":{\"688\":1}}],[\"treeset是用compareto\",{\"1\":{\"701\":1}}],[\"treeset作为一种set\",{\"1\":{\"701\":1}}],[\"treeset的底层是treemap的keyset\",{\"1\":{\"700\":1}}],[\"treeset中的数据是自动排好序的\",{\"1\":{\"697\":1}}],[\"treeset要求元素实现comparable接口或通过构造方法提供一个com\",{\"1\":{\"686\":1}}],[\"treeset同样实现了sortedset和navigatableset接口\",{\"1\":{\"686\":1}}],[\"treeset实现了set接口\",{\"1\":{\"685\":1}}],[\"treeset\",{\"0\":{\"684\":1},\"1\":{\"697\":1}}],[\"tree\",{\"1\":{\"612\":1,\"2592\":1,\"4970\":1}}],[\"trans\",{\"1\":{\"2867\":1,\"5245\":1}}],[\"transferto\",{\"1\":{\"1432\":1,\"1433\":1,\"1600\":1,\"1601\":1,\"1768\":1,\"1769\":1,\"1936\":1,\"1937\":1,\"4859\":1,\"4860\":1}}],[\"transaction\",{\"1\":{\"2703\":1,\"2775\":1,\"5081\":1,\"5153\":1}}],[\"transactionstatus\",{\"1\":{\"1087\":1,\"4120\":1}}],[\"transactiondefinition\",{\"1\":{\"1086\":1,\"1090\":1,\"1091\":1,\"1092\":1,\"1093\":1,\"1094\":1,\"1095\":1,\"1097\":1,\"1099\":1,\"1100\":1,\"1101\":1,\"1103\":1,\"1104\":1,\"1105\":1,\"1107\":2,\"4119\":1,\"4123\":1,\"4124\":1,\"4125\":1,\"4126\":1,\"4127\":1,\"4128\":1,\"4130\":1,\"4132\":1,\"4133\":1,\"4134\":1,\"4136\":1,\"4137\":1,\"4138\":1,\"4140\":2}}],[\"transient\",{\"1\":{\"457\":1,\"914\":1}}],[\"tracing\",{\"1\":{\"365\":1}}],[\"tryreleaseshared\",{\"1\":{\"3085\":1,\"4441\":1}}],[\"tryrelease\",{\"1\":{\"3083\":1,\"4439\":1}}],[\"tryacquireshared\",{\"1\":{\"3084\":1,\"4440\":1}}],[\"tryacquire\",{\"1\":{\"3075\":1,\"3082\":1,\"4431\":1,\"4438\":1}}],[\"try\",{\"0\":{\"453\":1,\"3912\":1},\"1\":{\"421\":1,\"454\":2,\"455\":1,\"457\":3,\"460\":1,\"463\":2,\"466\":1,\"3878\":1,\"3913\":2,\"3914\":1,\"3917\":1}}],[\"true\",{\"1\":{\"151\":1,\"155\":1,\"408\":1,\"508\":1,\"925\":2,\"930\":3,\"943\":8,\"2659\":1,\"3082\":1,\"3083\":1,\"3085\":1,\"3217\":1,\"3275\":1,\"3805\":1,\"3863\":1,\"3959\":1,\"4341\":1,\"4438\":1,\"4439\":1,\"4441\":1,\"4503\":1,\"5037\":1}}],[\"tomcat\",{\"1\":{\"3571\":2}}],[\"tomcat自带的access\",{\"1\":{\"3570\":1}}],[\"total\",{\"1\":{\"3356\":1,\"3357\":1}}],[\"totalmemory\",{\"1\":{\"251\":1}}],[\"tonanos\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"token信息返回给用户\",{\"1\":{\"3491\":1,\"5760\":1}}],[\"token失效谁判断的\",{\"1\":{\"3441\":1}}],[\"token\",{\"1\":{\"2924\":1,\"3480\":1,\"3485\":1,\"5302\":1,\"5749\":1,\"5754\":1}}],[\"token=1729829670\",{\"1\":{\"1154\":1,\"4187\":1}}],[\"tolerance\",{\"1\":{\"2145\":1,\"2150\":1,\"2155\":1,\"4750\":1,\"4755\":1,\"4760\":1}}],[\"tobetopjavaer\",{\"1\":{\"1033\":1}}],[\"topositive\",{\"1\":{\"1263\":3,\"5455\":3}}],[\"topicentry\",{\"1\":{\"1272\":3,\"5464\":3}}],[\"topiccountermap\",{\"1\":{\"1263\":2,\"5455\":2}}],[\"topic\",{\"1\":{\"1263\":7,\"1272\":3,\"2099\":1,\"4704\":1,\"5455\":7,\"5464\":3}}],[\"topic可以配置自己的保留策略\",{\"1\":{\"1250\":1,\"5442\":1}}],[\"top\",{\"1\":{\"523\":1,\"525\":1,\"527\":1,\"609\":1,\"678\":1,\"727\":1}}],[\"to\",{\"1\":{\"254\":1,\"411\":1,\"455\":1,\"468\":1,\"472\":1,\"749\":1,\"752\":2,\"786\":1,\"1014\":1,\"1263\":1,\"3288\":5,\"3866\":1,\"3914\":1,\"3919\":1,\"3923\":1,\"4552\":5,\"5455\":1}}],[\"to或s0\",{\"1\":{\"231\":1}}],[\"toc\",{\"1\":{\"133\":1,\"3787\":1}}],[\"hello123\",{\"1\":{\"3611\":1}}],[\"head\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"header不支持压缩\",{\"1\":{\"2511\":1,\"5609\":1}}],[\"header\",{\"1\":{\"2506\":1,\"2507\":1,\"2511\":1,\"2857\":1,\"3481\":1,\"3485\":1,\"5235\":1,\"5604\":1,\"5605\":1,\"5609\":1,\"5750\":1,\"5754\":1}}],[\"header压缩\",{\"1\":{\"2218\":1,\"2233\":1,\"2274\":1,\"2289\":1,\"5525\":1}}],[\"health\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"heap\",{\"1\":{\"241\":1,\"280\":1}}],[\"hw\",{\"1\":{\"3594\":1,\"3600\":1}}],[\"hr面\",{\"0\":{\"3365\":1,\"5645\":1}}],[\"hyperloglogs\",{\"1\":{\"2914\":1,\"5292\":1}}],[\"hystrix有四种防雪崩方式\",{\"1\":{\"2079\":1,\"4684\":1}}],[\"hystrix就是这样的一个工具\",{\"1\":{\"2078\":1,\"4683\":1}}],[\"hystrix\",{\"1\":{\"2066\":1,\"2077\":1,\"4671\":1,\"4682\":1}}],[\"h>\",{\"1\":{\"1416\":1,\"1584\":1,\"1752\":1,\"1920\":1,\"4843\":1}}],[\"h2\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"h2o\",{\"1\":{\"60\":1,\"3714\":1}}],[\"hibernatetemplate\",{\"1\":{\"1072\":1,\"4105\":1}}],[\"hidden\",{\"1\":{\"749\":1}}],[\"h为log2\",{\"1\":{\"1038\":1}}],[\"h为树的高度\",{\"1\":{\"1038\":1}}],[\"h\",{\"1\":{\"851\":2,\"963\":1,\"968\":11,\"969\":1,\"981\":1,\"987\":7,\"1014\":16,\"1020\":3,\"1021\":2,\"1028\":3,\"1038\":1,\"4060\":2}}],[\"have\",{\"1\":{\"3356\":1,\"3357\":1,\"3358\":1}}],[\"happens\",{\"1\":{\"3140\":1,\"4453\":1}}],[\"hagersten\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"hash2值\",{\"1\":{\"3636\":1,\"3637\":1}}],[\"hash值\",{\"1\":{\"3634\":1}}],[\"hash1值\",{\"1\":{\"3630\":1,\"3631\":1,\"3637\":1}}],[\"hashcode+sqlid+sql\",{\"1\":{\"1221\":1,\"4254\":1}}],[\"hashcode的结果是int类型\",{\"1\":{\"996\":1}}],[\"hashcode\",{\"1\":{\"968\":1,\"987\":1,\"999\":1,\"1014\":1,\"1020\":1,\"1021\":1,\"1024\":1}}],[\"hashing\",{\"1\":{\"968\":1,\"999\":1,\"1014\":1}}],[\"hashseed\",{\"1\":{\"968\":1,\"999\":2,\"1014\":1}}],[\"hashset中的数据是无序的\",{\"1\":{\"698\":1}}],[\"hashset和treeset\",{\"1\":{\"696\":1}}],[\"hashset可以方便高效地实现去重\",{\"1\":{\"683\":1}}],[\"hashset实现了set接口\",{\"1\":{\"681\":1}}],[\"hashset\",{\"0\":{\"680\":1},\"1\":{\"698\":1}}],[\"hash方法的功能是根据key来定位这个k\",{\"1\":{\"962\":1}}],[\"hashtable以及concurrenthashmap分别在jdk\",{\"1\":{\"1031\":1}}],[\"hashtable以及concurrenthashmap里面的hash方法的实现是不同的\",{\"1\":{\"961\":1}}],[\"hashtable默认的初始大小为11\",{\"1\":{\"1004\":1,\"1009\":1}}],[\"hashtable采用简单的取模是有一定的考虑在的\",{\"1\":{\"1002\":1}}],[\"hashtable也是使用fast\",{\"1\":{\"896\":1}}],[\"hashtable的哈希表大小选择\",{\"1\":{\"1010\":1}}],[\"hashtable的链表数组的默认大小是一个素数\",{\"1\":{\"1005\":1}}],[\"hashtable的\",{\"1\":{\"891\":1}}],[\"hashtable还使用了enumeration的方式\",{\"1\":{\"891\":1,\"894\":1}}],[\"hashtable\",{\"1\":{\"891\":1,\"894\":1,\"960\":1,\"997\":1,\"1022\":1,\"3888\":1}}],[\"hashtable直接使用对象的hashcode\",{\"1\":{\"890\":1}}],[\"hashtable中的hash数组初始大小是11\",{\"1\":{\"889\":1}}],[\"hashtable是没有fast\",{\"1\":{\"896\":1}}],[\"hashtable是基于陈旧的dictionary类继承来的\",{\"1\":{\"888\":1}}],[\"hashtable是线程安全的\",{\"1\":{\"885\":1,\"892\":1}}],[\"hashtable不可以存储null键和null值\",{\"1\":{\"887\":1}}],[\"hash\",{\"0\":{\"870\":1,\"2942\":1,\"3978\":1,\"5320\":1},\"1\":{\"877\":1,\"958\":1,\"959\":1,\"963\":1,\"965\":1,\"968\":1,\"999\":1,\"1000\":1,\"1006\":1,\"1014\":3,\"1020\":1,\"1024\":2,\"1028\":1,\"1033\":1,\"1263\":1,\"2586\":1,\"2589\":2,\"2913\":1,\"2944\":1,\"2945\":3,\"2946\":1,\"2949\":1,\"3985\":1,\"4964\":1,\"4967\":2,\"5291\":1,\"5322\":1,\"5323\":3,\"5324\":1,\"5327\":1,\"5455\":1}}],[\"hashmap还是treemap呢\",{\"1\":{\"1039\":1}}],[\"hashmap和其他基于map的类都是通过链地址法解决冲突\",{\"1\":{\"1017\":1}}],[\"hashmap和hashtable对于计算数组下标这件事\",{\"1\":{\"1000\":1}}],[\"hashmap和hashtable的区别\",{\"0\":{\"881\":1}}],[\"hashmap为了提高效率使用位运算代替哈希\",{\"1\":{\"1012\":1}}],[\"hashmap默认的初始化大小为16\",{\"1\":{\"1008\":1}}],[\"hashmap之所以不用取模的原因是为了提高效率\",{\"1\":{\"1001\":1}}],[\"hashmap采用的是位运算\",{\"1\":{\"1000\":1}}],[\"hashmap有扩容机制\",{\"1\":{\"936\":1}}],[\"hashmap的数组是有长度的\",{\"1\":{\"983\":1}}],[\"hashmap的数据是存储在链表数组里面的\",{\"1\":{\"983\":1}}],[\"hashmap的实现会稍微复杂一点\",{\"1\":{\"963\":1}}],[\"hashmap的扩容条件就是当hashmap中的元素个数\",{\"1\":{\"938\":1}}],[\"hashmap的重载的构造函数中\",{\"1\":{\"929\":1}}],[\"hashmap的iterator是fail\",{\"1\":{\"895\":1}}],[\"hashmap<string\",{\"1\":{\"925\":1,\"930\":3}}],[\"hashmap<>\",{\"1\":{\"480\":1,\"485\":1,\"499\":1,\"943\":1,\"1272\":1,\"3931\":1,\"3936\":1,\"3950\":1,\"5464\":1}}],[\"hashmap就像一个\",{\"1\":{\"924\":1}}],[\"hashmap会将容量扩容\",{\"1\":{\"919\":1}}],[\"hashmap类中有以下主要成员变量\",{\"1\":{\"913\":1}}],[\"hashmap中size表示当前共有多少个kv对\",{\"1\":{\"950\":1}}],[\"hashmap中还提供了一个支持传入initialcapacity\",{\"1\":{\"948\":1}}],[\"hashmap中还有一个和他们紧密相关的概念\",{\"1\":{\"920\":1}}],[\"hashmap中的size和capacity之间的区别其实解释起来也挺简单的\",{\"1\":{\"924\":1}}],[\"hashmap中的键值对没有顺序\",{\"1\":{\"906\":1}}],[\"hashmap中都定义了哪些成员变量\",{\"1\":{\"910\":1}}],[\"hashmap中hash数组的默认大小是16\",{\"1\":{\"889\":1}}],[\"hashmap实现了map接口\",{\"1\":{\"904\":1}}],[\"hashmap没有锁机制\",{\"1\":{\"900\":1}}],[\"hashmap与hashtable的区别是面试中经常遇到的一个问题\",{\"1\":{\"897\":1}}],[\"hashmap把这部分操作解放出来了\",{\"1\":{\"893\":1}}],[\"hashmap不是线程安全的\",{\"1\":{\"893\":1,\"907\":1}}],[\"hashmap都使用了\",{\"1\":{\"891\":1,\"894\":1}}],[\"hashmap重新计算hash值\",{\"1\":{\"890\":1}}],[\"hashmap继承的抽象类abstractmap实现了map接口\",{\"1\":{\"888\":1}}],[\"hashmap可以存储null键和null值\",{\"1\":{\"886\":1}}],[\"hashmap是线程不安全的\",{\"1\":{\"884\":1}}],[\"hashmap已经显式定义了构造方法\",{\"1\":{\"506\":1,\"3957\":1}}],[\"hashmapinstance\",{\"1\":{\"505\":1,\"3956\":1}}],[\"hashmapclass\",{\"1\":{\"499\":1,\"505\":2,\"508\":2,\"3950\":1,\"3956\":2,\"3959\":2}}],[\"hashmap=\",{\"1\":{\"497\":1,\"501\":1,\"3948\":1,\"3952\":1}}],[\"hashmap\",{\"0\":{\"898\":1,\"903\":1},\"1\":{\"485\":1,\"492\":1,\"497\":1,\"499\":2,\"501\":1,\"505\":3,\"508\":3,\"891\":1,\"961\":1,\"967\":1,\"1016\":1,\"1033\":1,\"1221\":1,\"3191\":1,\"3888\":1,\"3936\":1,\"3943\":1,\"3948\":1,\"3950\":2,\"3952\":1,\"3956\":3,\"3959\":3,\"4254\":1,\"4535\":1}}],[\"has\",{\"1\":{\"551\":1,\"555\":1,\"557\":1}}],[\"handlerexecutionchain\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"handleradapter\",{\"1\":{\"1053\":1,\"1058\":1,\"4086\":1,\"4091\":1}}],[\"handlermapping\",{\"1\":{\"1053\":1,\"1057\":1,\"4086\":1,\"4090\":1}}],[\"handler\",{\"1\":{\"470\":1,\"1053\":2,\"1057\":3,\"1058\":1,\"1059\":2,\"1064\":1,\"1460\":1,\"1463\":1,\"1466\":1,\"1467\":1,\"1468\":1,\"1469\":1,\"1473\":1,\"1481\":1,\"1482\":1,\"1483\":1,\"1485\":2,\"1486\":2,\"1488\":1,\"1500\":1,\"1501\":1,\"1502\":1,\"1628\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1641\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":2,\"1654\":2,\"1656\":1,\"1668\":1,\"1669\":1,\"1670\":1,\"1796\":1,\"1799\":1,\"1802\":1,\"1803\":1,\"1804\":1,\"1805\":1,\"1809\":1,\"1817\":1,\"1818\":1,\"1819\":1,\"1821\":2,\"1822\":2,\"1824\":1,\"1836\":1,\"1837\":1,\"1838\":1,\"1964\":1,\"1967\":1,\"1970\":1,\"1971\":1,\"1972\":1,\"1973\":1,\"1977\":1,\"1985\":1,\"1986\":1,\"1987\":1,\"1989\":2,\"1990\":2,\"1992\":1,\"2004\":1,\"2005\":1,\"2006\":1,\"3288\":7,\"3297\":1,\"3921\":1,\"4086\":2,\"4090\":3,\"4091\":1,\"4092\":2,\"4097\":1,\"4552\":7,\"4561\":1,\"4887\":1,\"4890\":1,\"4893\":1,\"4894\":1,\"4895\":1,\"4896\":1,\"4900\":1,\"4908\":1,\"4909\":1,\"4910\":1,\"4912\":2,\"4913\":2,\"4915\":1,\"4927\":1,\"4928\":1,\"4929\":1}}],[\"http1\",{\"1\":{\"5533\":1}}],[\"http历史\",{\"0\":{\"5529\":1}}],[\"http3协议\",{\"1\":{\"5528\":1}}],[\"http3常见面试题\",{\"0\":{\"2248\":1}}],[\"http2常见面试题\",{\"0\":{\"2235\":1}}],[\"http2协议\",{\"1\":{\"2219\":1,\"2234\":1,\"2275\":1,\"2290\":1,\"5526\":1}}],[\"http协议中为什么广泛使用的还是http1\",{\"0\":{\"2220\":1,\"5511\":1}}],[\"http常见面试题\",{\"0\":{\"2205\":1}}],[\"httptrace\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"httpmessageconveter\",{\"1\":{\"1060\":1,\"4093\":1}}],[\"http\",{\"0\":{\"2209\":1,\"2215\":1,\"2224\":1,\"2230\":1,\"2239\":1,\"2245\":1,\"2252\":1,\"2258\":1,\"2265\":1,\"2271\":1,\"2280\":1,\"2286\":1,\"2499\":1,\"2500\":1,\"2503\":2,\"2508\":2,\"2513\":2,\"2518\":1,\"5516\":1,\"5522\":1,\"5536\":1,\"5539\":1,\"5545\":1,\"5597\":1,\"5598\":1,\"5601\":2,\"5606\":2,\"5611\":2,\"5616\":1},\"1\":{\"592\":1,\"1006\":1,\"2207\":1,\"2213\":1,\"2217\":2,\"2222\":1,\"2228\":1,\"2232\":2,\"2237\":1,\"2243\":1,\"2247\":2,\"2250\":1,\"2256\":1,\"2260\":2,\"2263\":1,\"2269\":1,\"2273\":2,\"2278\":1,\"2284\":1,\"2288\":2,\"2400\":1,\"2457\":1,\"2458\":1,\"2501\":2,\"2502\":1,\"2504\":2,\"2505\":1,\"2506\":2,\"2507\":2,\"2509\":4,\"2510\":2,\"2511\":2,\"2512\":2,\"2514\":5,\"2515\":2,\"2516\":3,\"2519\":1,\"2520\":2,\"2521\":4,\"2550\":1,\"2551\":1,\"3485\":1,\"3573\":1,\"5513\":1,\"5520\":1,\"5524\":2,\"5530\":7,\"5534\":1,\"5535\":3,\"5538\":1,\"5543\":1,\"5547\":2,\"5555\":1,\"5556\":1,\"5599\":2,\"5600\":1,\"5602\":2,\"5603\":1,\"5604\":2,\"5605\":2,\"5607\":4,\"5608\":2,\"5609\":2,\"5610\":2,\"5612\":5,\"5613\":2,\"5614\":3,\"5617\":1,\"5618\":2,\"5619\":4,\"5754\":1}}],[\"https常见面试题\",{\"0\":{\"2261\":1}}],[\"https\",{\"0\":{\"2517\":1,\"2518\":1,\"5615\":1,\"5616\":1},\"1\":{\"83\":2,\"294\":1,\"520\":1,\"607\":1,\"653\":1,\"727\":1,\"868\":1,\"897\":1,\"1033\":1,\"1148\":1,\"1154\":1,\"1209\":1,\"1242\":1,\"1295\":1,\"1304\":1,\"1318\":1,\"1397\":1,\"1506\":1,\"1565\":1,\"1674\":1,\"1733\":1,\"1842\":1,\"1901\":1,\"2010\":1,\"2193\":1,\"2400\":1,\"2519\":1,\"2520\":2,\"2521\":3,\"2522\":3,\"2877\":1,\"3056\":1,\"3059\":1,\"3130\":1,\"3155\":1,\"3181\":2,\"3218\":2,\"3276\":1,\"3361\":3,\"3656\":3,\"3737\":2,\"3888\":1,\"3971\":1,\"3976\":1,\"4181\":1,\"4187\":1,\"4242\":1,\"4275\":1,\"4315\":1,\"4342\":2,\"4365\":1,\"4413\":1,\"4470\":1,\"4504\":1,\"4526\":1,\"4615\":2,\"4824\":1,\"4933\":1,\"5255\":1,\"5434\":1,\"5487\":1,\"5496\":1,\"5510\":1,\"5617\":1,\"5618\":2,\"5619\":3,\"5620\":3}}],[\"html网页\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"html\",{\"1\":{\"294\":1,\"523\":1,\"525\":1,\"527\":1,\"609\":1,\"678\":1,\"727\":1,\"1148\":1,\"1397\":1,\"1506\":1,\"1565\":1,\"1674\":1,\"1733\":1,\"1842\":1,\"1901\":1,\"2010\":1,\"3181\":2,\"3218\":1,\"3361\":2,\"4181\":1,\"4342\":1,\"4526\":1,\"4615\":1,\"4824\":1,\"4933\":1}}],[\"holds\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"hold\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"holding\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"hol\",{\"1\":{\"2516\":1,\"5614\":1}}],[\"hollis9\",{\"1\":{\"943\":1}}],[\"hollis8\",{\"1\":{\"943\":1}}],[\"hollis7\",{\"1\":{\"943\":1}}],[\"hollis6\",{\"1\":{\"943\":1}}],[\"hollis5\",{\"1\":{\"943\":1}}],[\"hollis4\",{\"1\":{\"943\":1}}],[\"hollis3\",{\"1\":{\"943\":1}}],[\"hollis2\",{\"1\":{\"943\":1}}],[\"hollis13\",{\"1\":{\"943\":1}}],[\"hollis12\",{\"1\":{\"943\":1}}],[\"hollis11\",{\"1\":{\"943\":1}}],[\"hollis10\",{\"1\":{\"943\":1}}],[\"hollis1\",{\"1\":{\"943\":1}}],[\"hollis\",{\"1\":{\"925\":1}}],[\"hollischuang\",{\"1\":{\"457\":1,\"925\":1,\"943\":13,\"989\":1,\"1033\":1}}],[\"host\",{\"1\":{\"2507\":4,\"5605\":4}}],[\"hot100的时候\",{\"1\":{\"529\":1}}],[\"hotspot\",{\"1\":{\"282\":1,\"335\":1,\"342\":1,\"373\":1,\"3168\":1,\"4513\":1}}],[\"home\",{\"1\":{\"151\":1,\"155\":1,\"402\":1,\"403\":1,\"3565\":1,\"3572\":1,\"3573\":1,\"3805\":1,\"3857\":1,\"3858\":1}}],[\"hope\",{\"1\":{\"83\":2,\"105\":1,\"118\":1,\"3737\":2,\"3759\":1,\"3772\":1}}],[\"卡片\",{\"0\":{\"82\":1,\"3736\":1}}],[\"脚注\",{\"0\":{\"69\":1,\"3723\":1}}],[\"的传输层协议\",{\"1\":{\"5530\":1}}],[\"的名为\",{\"1\":{\"5530\":1}}],[\"的前身\",{\"1\":{\"5530\":1}}],[\"的前后条件中有一个列没有索引\",{\"1\":{\"2682\":1,\"5060\":1}}],[\"的很多设计\",{\"1\":{\"5530\":1}}],[\"的很重要一点就是\",{\"1\":{\"2959\":1,\"5337\":1}}],[\"的制定过程\",{\"1\":{\"5530\":1}}],[\"的开发组全程参与了\",{\"1\":{\"5530\":1}}],[\"的开发组推动\",{\"1\":{\"5530\":1}}],[\"的通用工具\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"的常见做法是将其放在\",{\"1\":{\"3485\":1,\"5754\":1}}],[\"的所在的位置\",{\"1\":{\"3465\":1,\"5734\":1}}],[\"的所有\",{\"1\":{\"2920\":1,\"5298\":1}}],[\"的比较\",{\"1\":{\"3388\":1,\"5668\":1}}],[\"的区别\",{\"1\":{\"3386\":1,\"5666\":1}}],[\"的空闲时间\",{\"1\":{\"3328\":1,\"4585\":1}}],[\"的内部元素并不是按照放入的时间排序\",{\"1\":{\"3311\":1,\"4576\":1}}],[\"的内存操作\",{\"1\":{\"599\":1}}],[\"的最大线程数是\",{\"1\":{\"3310\":1,\"4575\":1}}],[\"的最大连接数是多少\",{\"1\":{\"2367\":1}}],[\"的构造函数创建线程池的时候\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"的状态\",{\"1\":{\"3227\":1,\"4351\":1}}],[\"的remove方法\",{\"1\":{\"3202\":1}}],[\"的键值对\",{\"1\":{\"3195\":1,\"4539\":1}}],[\"的获取\",{\"1\":{\"3180\":1,\"4525\":1}}],[\"的锁\",{\"1\":{\"3176\":1,\"4521\":1}}],[\"的持有权\",{\"1\":{\"3167\":1,\"4512\":1}}],[\"的实际值修改为\",{\"1\":{\"3102\":1,\"4383\":1}}],[\"的实现依赖于\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"的实现\",{\"1\":{\"591\":1}}],[\"的实现细节\",{\"1\":{\"576\":1}}],[\"的值\",{\"1\":{\"3102\":1,\"4383\":1}}],[\"的当前值\",{\"1\":{\"3101\":1,\"4381\":1}}],[\"的变量值增加1\",{\"1\":{\"3098\":1,\"4375\":1}}],[\"的变化而变化的\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"的过期时间设置短一点比如\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"的过程\",{\"1\":{\"365\":1}}],[\"的情况\",{\"1\":{\"2997\":1,\"5375\":1}}],[\"的配置来决定何时将系统内核缓存区的数据同步到硬盘中的\",{\"1\":{\"2974\":1,\"5352\":1}}],[\"的混合持久化\",{\"1\":{\"2962\":1,\"5340\":1}}],[\"的结构相似\",{\"1\":{\"2949\":1,\"5327\":1}}],[\"的结构与对象的\",{\"1\":{\"2949\":1,\"5327\":1}}],[\"的结点\",{\"1\":{\"613\":1}}],[\"的缓存\",{\"1\":{\"2924\":1,\"5302\":1}}],[\"的原子指令\",{\"1\":{\"3106\":1,\"4388\":1}}],[\"的原生字符串\",{\"1\":{\"2919\":1,\"5297\":1}}],[\"的原则又不希望将此类类型的\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"的事务\",{\"1\":{\"2866\":1,\"5244\":1}}],[\"的事务id\",{\"1\":{\"2861\":1,\"5239\":1}}],[\"的事务均可见\",{\"1\":{\"2861\":1,\"5239\":1}}],[\"的事务均不可见\",{\"1\":{\"2861\":1,\"5239\":1}}],[\"的事务并没有提交\",{\"1\":{\"2735\":1,\"5113\":1}}],[\"的账户增加\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"的账户扣除\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"的引擎都是用\",{\"1\":{\"2804\":1,\"5182\":1}}],[\"的引擎来实现的\",{\"1\":{\"2803\":1,\"5181\":1}}],[\"的组合\",{\"1\":{\"2781\":1,\"2791\":1,\"5159\":1,\"5169\":1}}],[\"的日志格式是\",{\"1\":{\"2768\":1,\"5146\":1}}],[\"的系统变量\",{\"1\":{\"2762\":1,\"5140\":1}}],[\"的系统调用次数\",{\"1\":{\"1394\":1,\"1562\":1,\"1730\":1,\"1898\":1,\"4821\":1}}],[\"的期间\",{\"1\":{\"2728\":1,\"2729\":1,\"5106\":1,\"5107\":1}}],[\"的存储引擎\",{\"1\":{\"2703\":1,\"5081\":1}}],[\"的支持\",{\"1\":{\"2701\":1,\"5079\":1}}],[\"的每个非叶子节点存储索引\",{\"1\":{\"2632\":1,\"5010\":1}}],[\"的自增主键\",{\"1\":{\"2619\":1,\"4997\":1}}],[\"的表中\",{\"1\":{\"2619\":1,\"4997\":1}}],[\"的意思\",{\"1\":{\"2591\":1,\"4969\":1}}],[\"的意义\",{\"0\":{\"2445\":1},\"1\":{\"2330\":1}}],[\"的默认存储引擎\",{\"1\":{\"2560\":1,\"2562\":1,\"4938\":1,\"4940\":1}}],[\"的权威\",{\"1\":{\"2541\":1,\"5639\":1}}],[\"的权力\",{\"1\":{\"1049\":1,\"4082\":1}}],[\"的升级版本\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"的响应分组\",{\"1\":{\"2485\":1,\"5583\":1}}],[\"的工作原理将分两种场景讨论\",{\"1\":{\"2472\":1,\"5570\":1}}],[\"的首部长度\",{\"1\":{\"2407\":1}}],[\"的发送速率\",{\"1\":{\"2387\":1}}],[\"的服务端监听了一个端口\",{\"1\":{\"2367\":1}}],[\"的字段\",{\"1\":{\"2659\":2,\"5037\":2}}],[\"的字段进行序列号初始值的设定\",{\"1\":{\"2343\":1}}],[\"的字段变为有效\",{\"1\":{\"2341\":1}}],[\"的面试题\",{\"1\":{\"2292\":1}}],[\"的网站支持了http\",{\"1\":{\"2213\":1,\"2228\":1,\"2243\":1,\"2256\":1,\"2269\":1,\"2284\":1,\"5520\":1,\"5543\":1}}],[\"的网络通信的基本操作单元\",{\"1\":{\"1370\":1,\"1538\":1,\"1706\":1,\"1874\":1,\"4797\":1}}],[\"的关键在于当前的业务场景\",{\"1\":{\"2159\":1,\"4764\":1}}],[\"的关系\",{\"1\":{\"548\":2,\"551\":2,\"555\":2,\"557\":1}}],[\"的选择\",{\"1\":{\"2155\":1,\"4760\":1}}],[\"的选举\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"的身份进入集群中\",{\"1\":{\"2141\":1,\"4746\":1}}],[\"的身份加入集群\",{\"1\":{\"2126\":1,\"4731\":1}}],[\"的大小\",{\"1\":{\"2338\":1}}],[\"的大小比例默认为\",{\"1\":{\"335\":1}}],[\"的大了\",{\"1\":{\"2139\":1,\"4744\":1}}],[\"的话\",{\"1\":{\"2136\":1,\"2945\":1,\"3558\":1,\"4741\":1,\"5323\":1,\"5827\":1}}],[\"的重新选举\",{\"1\":{\"2134\":1,\"4739\":1}}],[\"的例子\",{\"1\":{\"2127\":1,\"4732\":1}}],[\"的投票结果后发现比自己的合适于是更改投票为\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"的投票发现没自己的合适故不变\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"的投票信息后会将投票信息与自己的作比较\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"的投票仅为1\",{\"1\":{\"2124\":1,\"4729\":1}}],[\"的崩溃\",{\"1\":{\"2122\":1,\"4727\":1}}],[\"的更新\",{\"1\":{\"2117\":1,\"4722\":1}}],[\"的更上层使用者\",{\"1\":{\"576\":1}}],[\"的架构\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"的负载均衡等功能\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"的注册以及多个\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"的应用程序中尤其地高性能\",{\"1\":{\"2097\":1,\"4702\":1}}],[\"的形式存储\",{\"1\":{\"2024\":1,\"4629\":1}}],[\"的形式的存在\",{\"1\":{\"2023\":1,\"4628\":1}}],[\"的运行过程中\",{\"1\":{\"2024\":1,\"4629\":1}}],[\"的请求后\",{\"1\":{\"2538\":1,\"5636\":1}}],[\"的请求\",{\"1\":{\"2022\":1,\"2141\":1,\"4627\":1,\"4746\":1}}],[\"的功能使其可以接受\",{\"1\":{\"2022\":1,\"4627\":1}}],[\"的模式还有个问题\",{\"1\":{\"1493\":1,\"1661\":1,\"1829\":1,\"1997\":1,\"4920\":1}}],[\"的能力\",{\"1\":{\"1487\":1,\"1655\":1,\"1823\":1,\"1991\":1,\"4914\":1}}],[\"的性能还行\",{\"1\":{\"2561\":1,\"4939\":1}}],[\"的性能\",{\"1\":{\"1472\":1,\"1640\":1,\"1808\":1,\"1976\":1,\"4899\":1}}],[\"的流程来完成完整的业务流程\",{\"1\":{\"1469\":1,\"1502\":1,\"1637\":1,\"1670\":1,\"1805\":1,\"1838\":1,\"1973\":1,\"2006\":1,\"4896\":1,\"4929\":1}}],[\"的流程中\",{\"1\":{\"1124\":1,\"4157\":1}}],[\"的方案示意图\",{\"1\":{\"1458\":1,\"1626\":1,\"1794\":1,\"1962\":1,\"4885\":1}}],[\"的方案\",{\"1\":{\"1456\":1,\"1457\":1,\"1475\":1,\"1624\":1,\"1625\":1,\"1643\":1,\"1792\":1,\"1793\":1,\"1811\":1,\"1960\":1,\"1961\":1,\"1979\":1,\"4883\":1,\"4884\":1,\"4902\":1}}],[\"的方式即使监听的\",{\"1\":{\"1383\":1,\"1551\":1,\"1719\":1,\"1887\":1,\"4810\":1}}],[\"的吞吐率\",{\"1\":{\"1431\":1,\"1599\":1,\"1767\":1,\"1935\":1,\"4858\":1}}],[\"的次数\",{\"1\":{\"1402\":1,\"1570\":1,\"1738\":1,\"1906\":1,\"4829\":1}}],[\"的数量可以只有一个\",{\"1\":{\"1439\":1,\"1607\":1,\"1775\":1,\"1943\":1,\"4866\":1}}],[\"的数目也非常的多了\",{\"1\":{\"1383\":1,\"1551\":1,\"1719\":1,\"1887\":1,\"4810\":1}}],[\"的数据就写一个到\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"的数据\",{\"1\":{\"3000\":1,\"5378\":1}}],[\"的数据版本均可见\",{\"1\":{\"2864\":1,\"5242\":1}}],[\"的数据版本均不可见\",{\"1\":{\"2863\":1,\"5241\":1}}],[\"的数据库在异常崩溃后\",{\"1\":{\"2576\":1,\"4954\":1}}],[\"的数据大小如果大于\",{\"1\":{\"2395\":1,\"2396\":1}}],[\"的数据结构\",{\"0\":{\"953\":1},\"1\":{\"1379\":1,\"1547\":1,\"1715\":1,\"1883\":1,\"3311\":1,\"4576\":1,\"4806\":1}}],[\"的数据合并到\",{\"1\":{\"379\":1}}],[\"的问题\",{\"0\":{\"3109\":1,\"4391\":1},\"1\":{\"1378\":1,\"1495\":1,\"1546\":1,\"1663\":1,\"1714\":1,\"1831\":1,\"1882\":1,\"1999\":1,\"3339\":1,\"4596\":1,\"4805\":1,\"4922\":1}}],[\"的一个内部类\",{\"1\":{\"3274\":1,\"4502\":1}}],[\"的一级缓存与二级缓存\",{\"1\":{\"1230\":1,\"4263\":1}}],[\"的一套指令集规范\",{\"1\":{\"182\":1,\"3831\":1}}],[\"的同一个\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"的动态代理\",{\"1\":{\"1217\":1,\"4250\":1}}],[\"的特性\",{\"1\":{\"1132\":1,\"4165\":1}}],[\"的属性\",{\"1\":{\"1128\":1,\"4161\":1}}],[\"的成品创建依赖于\",{\"1\":{\"1124\":1,\"4157\":1}}],[\"的隔离级别\",{\"1\":{\"1095\":1,\"2843\":1,\"4128\":1,\"5221\":1}}],[\"的增强或通知\",{\"1\":{\"1075\":1,\"4108\":1}}],[\"的入参过程中\",{\"1\":{\"1059\":1,\"4092\":1}}],[\"的思想就是将原本在程序中手动创建对象的控制权\",{\"1\":{\"1047\":1,\"4080\":1}}],[\"的高16位异或低16位实现的\",{\"1\":{\"1021\":1}}],[\"的时间段内不会占用\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"的时间过长\",{\"1\":{\"3254\":1,\"4483\":1}}],[\"的时间复杂度\",{\"1\":{\"672\":1,\"4014\":1}}],[\"的时机不同\",{\"1\":{\"2852\":1,\"5230\":1}}],[\"的时候都会分配一个特定的偏移量\",{\"1\":{\"3465\":1,\"5734\":1}}],[\"的时候不存在线程安全问题\",{\"1\":{\"3462\":1,\"5731\":1}}],[\"的时候同样更新\",{\"1\":{\"3462\":1,\"5731\":1}}],[\"的时候你如何排查问题\",{\"1\":{\"3426\":1,\"5706\":1}}],[\"的时候依赖一次\",{\"1\":{\"3225\":1,\"4349\":1}}],[\"的时候才对数据进行过期检查\",{\"1\":{\"2994\":1,\"5372\":1}}],[\"的时候\",{\"1\":{\"2160\":1,\"3294\":1,\"4558\":1,\"4765\":1}}],[\"的时候突然挂了\",{\"1\":{\"2136\":1,\"4741\":1}}],[\"的时候会把null值也拷贝\",{\"1\":{\"755\":1}}],[\"的时候又被\",{\"1\":{\"282\":1}}],[\"的路径\",{\"1\":{\"633\":1}}],[\"的树称为空树\",{\"1\":{\"616\":1}}],[\"的文章\",{\"1\":{\"592\":1}}],[\"的文档\",{\"1\":{\"534\":1}}],[\"的历史遗留问题了\",{\"1\":{\"588\":1}}],[\"的定义是在同一端进\",{\"1\":{\"583\":1}}],[\"的相关方法\",{\"1\":{\"576\":1}}],[\"的底层具体实现不同\",{\"1\":{\"572\":1}}],[\"的程序\",{\"1\":{\"563\":1}}],[\"的信息\",{\"1\":{\"470\":1,\"3921\":1}}],[\"的核心\",{\"1\":{\"428\":1,\"3885\":1}}],[\"的概念\",{\"1\":{\"375\":1}}],[\"的对象存活\",{\"1\":{\"335\":1}}],[\"的对象可被回收\",{\"1\":{\"298\":1}}],[\"的对象先放在伊甸园区\",{\"1\":{\"263\":1}}],[\"的垃圾回收器将对伊甸园区进行垃圾回收\",{\"1\":{\"264\":1}}],[\"的设计者们不仅需要考虑内存如何分配\",{\"1\":{\"262\":1}}],[\"的主要组成部分\",{\"0\":{\"177\":1,\"3826\":1}}],[\"的\",{\"0\":{\"453\":1,\"3912\":1},\"1\":{\"67\":1,\"117\":1,\"420\":1,\"596\":1,\"597\":1,\"1217\":1,\"1218\":1,\"1223\":1,\"1280\":1,\"2139\":1,\"2344\":1,\"2346\":2,\"2353\":1,\"2371\":3,\"2478\":1,\"2479\":2,\"2481\":4,\"2483\":1,\"2491\":1,\"2493\":3,\"2496\":1,\"2497\":2,\"2498\":1,\"2520\":2,\"2536\":1,\"2537\":1,\"2539\":1,\"2608\":1,\"2619\":1,\"2640\":1,\"2794\":1,\"2861\":1,\"2922\":1,\"3106\":1,\"3309\":1,\"3485\":1,\"3721\":1,\"3771\":1,\"3877\":1,\"4250\":1,\"4251\":1,\"4256\":1,\"4388\":1,\"4574\":1,\"4744\":1,\"4986\":1,\"4997\":1,\"5018\":1,\"5172\":1,\"5239\":1,\"5300\":1,\"5472\":1,\"5530\":2,\"5576\":1,\"5577\":2,\"5579\":4,\"5581\":1,\"5589\":1,\"5591\":3,\"5594\":1,\"5595\":2,\"5596\":1,\"5618\":2,\"5634\":1,\"5635\":1,\"5637\":1,\"5754\":1}}],[\"illegalmonitorstateexception的异常的原因\",{\"1\":{\"3169\":1,\"4514\":1}}],[\"illegalargumentexception\",{\"1\":{\"851\":1,\"3288\":2,\"4060\":1,\"4552\":2}}],[\"ibd文件就包含了该表的索引和数据\",{\"1\":{\"2632\":1,\"5010\":1}}],[\"ipv4\",{\"1\":{\"2371\":1}}],[\"ip地址\",{\"1\":{\"2362\":1,\"2364\":1}}],[\"ip常见面试题\",{\"0\":{\"2276\":1}}],[\"ip\",{\"0\":{\"2423\":1,\"2463\":1,\"2466\":1,\"2555\":1,\"5561\":1,\"5564\":1},\"1\":{\"1370\":1,\"1538\":1,\"1706\":1,\"1874\":1,\"2308\":1,\"2346\":1,\"2357\":1,\"2367\":1,\"2369\":1,\"2371\":1,\"2396\":2,\"2409\":1,\"2414\":1,\"2469\":3,\"2471\":1,\"2476\":3,\"2477\":2,\"2478\":1,\"2479\":1,\"2481\":5,\"2482\":2,\"2483\":2,\"2484\":1,\"2485\":1,\"2488\":2,\"2489\":1,\"2491\":1,\"2493\":5,\"2494\":2,\"2498\":1,\"2507\":1,\"2536\":2,\"2537\":2,\"2539\":1,\"2542\":1,\"2543\":1,\"4797\":1,\"5567\":3,\"5569\":1,\"5574\":3,\"5575\":2,\"5576\":1,\"5577\":1,\"5579\":5,\"5580\":2,\"5581\":2,\"5582\":1,\"5583\":1,\"5586\":2,\"5587\":1,\"5589\":1,\"5591\":5,\"5592\":2,\"5596\":1,\"5605\":1,\"5634\":2,\"5635\":2,\"5637\":1,\"5640\":1,\"5641\":1}}],[\"import\",{\"1\":{\"3200\":3,\"3286\":4,\"4550\":4}}],[\"implements\",{\"1\":{\"3190\":1,\"3214\":1,\"4338\":1,\"4534\":1}}],[\"img\",{\"1\":{\"1111\":1,\"1121\":1,\"1126\":1,\"1131\":1,\"1141\":1,\"1143\":1,\"1145\":1,\"1147\":1,\"1204\":1,\"1310\":1,\"1312\":1,\"1315\":1,\"1317\":1,\"1382\":1,\"1407\":1,\"1420\":1,\"1426\":1,\"1459\":1,\"1479\":1,\"1497\":1,\"1550\":1,\"1575\":1,\"1588\":1,\"1594\":1,\"1627\":1,\"1647\":1,\"1665\":1,\"1718\":1,\"1743\":1,\"1756\":1,\"1762\":1,\"1795\":1,\"1815\":1,\"1833\":1,\"1886\":1,\"1911\":1,\"1924\":1,\"1930\":1,\"1963\":1,\"1983\":1,\"2001\":1,\"2020\":1,\"2068\":1,\"2146\":1,\"2452\":1,\"2464\":1,\"2620\":1,\"2629\":1,\"2686\":1,\"2777\":1,\"3220\":1,\"4009\":1,\"4144\":1,\"4154\":1,\"4159\":1,\"4164\":1,\"4174\":1,\"4176\":1,\"4178\":1,\"4180\":1,\"4237\":1,\"4344\":1,\"4427\":1,\"4429\":1,\"4625\":1,\"4673\":1,\"4751\":1,\"4809\":1,\"4834\":1,\"4847\":1,\"4853\":1,\"4886\":1,\"4906\":1,\"4924\":1,\"4998\":1,\"5007\":1,\"5064\":1,\"5155\":1,\"5502\":1,\"5504\":1,\"5507\":1,\"5509\":1,\"5550\":1,\"5562\":1}}],[\"image\",{\"1\":{\"1054\":1,\"1338\":1,\"4087\":1}}],[\"i<size\",{\"1\":{\"749\":1}}],[\"i=0\",{\"1\":{\"749\":1}}],[\"ioc容器中\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"ioc\",{\"1\":{\"1047\":3,\"1050\":1,\"4080\":3,\"4083\":1}}],[\"io\",{\"1\":{\"749\":2,\"752\":3,\"1006\":1,\"1033\":1,\"1466\":1,\"1481\":1,\"1634\":1,\"1649\":1,\"1802\":1,\"1817\":1,\"1970\":1,\"1985\":1,\"2509\":1,\"2589\":1,\"2634\":1,\"2899\":1,\"2904\":1,\"2910\":1,\"3214\":1,\"4338\":1,\"4893\":1,\"4908\":1,\"4967\":1,\"5012\":1,\"5277\":1,\"5282\":1,\"5288\":1,\"5607\":1}}],[\"ioexception\",{\"1\":{\"449\":1,\"455\":1,\"457\":3,\"749\":1,\"752\":1,\"3908\":1,\"3914\":1}}],[\"i>=1\",{\"1\":{\"644\":1}}],[\"i++操作不是原子操作\",{\"1\":{\"3090\":1,\"4366\":1}}],[\"i++\",{\"1\":{\"601\":2,\"749\":1,\"1272\":1,\"1334\":1,\"3124\":1,\"4406\":1,\"5464\":1}}],[\"i\",{\"0\":{\"1372\":1,\"1540\":1,\"1708\":1,\"1876\":1,\"4799\":1},\"1\":{\"601\":5,\"649\":1,\"749\":1,\"1272\":6,\"1334\":3,\"1373\":1,\"1393\":3,\"1431\":1,\"1541\":1,\"1561\":3,\"1599\":1,\"1709\":1,\"1729\":3,\"1767\":1,\"1877\":1,\"1897\":3,\"1935\":1,\"2986\":1,\"3002\":1,\"3003\":1,\"3004\":1,\"3006\":1,\"3009\":1,\"3123\":1,\"3200\":2,\"3203\":5,\"3329\":4,\"4405\":1,\"4586\":4,\"4800\":1,\"4820\":3,\"4858\":1,\"5364\":1,\"5380\":1,\"5381\":1,\"5382\":1,\"5384\":1,\"5387\":1,\"5464\":6}}],[\"if\",{\"1\":{\"421\":4,\"452\":1,\"457\":4,\"485\":2,\"749\":1,\"774\":2,\"778\":2,\"786\":1,\"788\":2,\"820\":2,\"968\":1,\"999\":1,\"1014\":1,\"1263\":4,\"1272\":1,\"2506\":4,\"3193\":3,\"3203\":1,\"3288\":5,\"3545\":1,\"3878\":4,\"3911\":1,\"3936\":2,\"4029\":2,\"4537\":1,\"4552\":5,\"5455\":4,\"5464\":1,\"5604\":4,\"5814\":1}}],[\"inheritablethreadlocals\",{\"1\":{\"3190\":1,\"3191\":1,\"4534\":1,\"4535\":1}}],[\"inheritance\",{\"1\":{\"560\":1}}],[\"innodb\",{\"0\":{\"2559\":1,\"2897\":1,\"4937\":1,\"5275\":1},\"1\":{\"2562\":1,\"2565\":1,\"2566\":1,\"2569\":2,\"2571\":1,\"2575\":1,\"2576\":1,\"2578\":1,\"2581\":1,\"2582\":1,\"2597\":1,\"2599\":2,\"2602\":1,\"2607\":1,\"2619\":3,\"2628\":1,\"2631\":1,\"2632\":2,\"2648\":1,\"2704\":1,\"2721\":2,\"2742\":1,\"2743\":1,\"2760\":1,\"2762\":2,\"2763\":1,\"2764\":1,\"2765\":1,\"2768\":1,\"2770\":1,\"2772\":1,\"2803\":1,\"2804\":1,\"2810\":1,\"2834\":1,\"2846\":1,\"2854\":1,\"2856\":1,\"2859\":1,\"2872\":1,\"3388\":1,\"4940\":1,\"4943\":1,\"4944\":1,\"4947\":2,\"4949\":1,\"4953\":1,\"4954\":1,\"4956\":1,\"4959\":1,\"4960\":1,\"4975\":1,\"4977\":2,\"4980\":1,\"4985\":1,\"4997\":3,\"5006\":1,\"5009\":1,\"5010\":2,\"5026\":1,\"5082\":1,\"5099\":2,\"5120\":1,\"5121\":1,\"5138\":1,\"5140\":2,\"5141\":1,\"5142\":1,\"5143\":1,\"5146\":1,\"5148\":1,\"5150\":1,\"5181\":1,\"5182\":1,\"5188\":1,\"5212\":1,\"5224\":1,\"5232\":1,\"5234\":1,\"5237\":1,\"5250\":1,\"5668\":1}}],[\"innodb特性\",{\"0\":{\"2558\":1,\"4936\":1}}],[\"inc\",{\"0\":{\"2753\":1,\"5131\":1},\"1\":{\"2711\":1,\"2755\":1,\"2756\":1,\"2757\":2,\"2758\":1,\"2759\":1,\"2762\":1,\"2763\":1,\"5089\":1,\"5133\":1,\"5134\":1,\"5135\":2,\"5136\":1,\"5137\":1,\"5140\":1,\"5141\":1}}],[\"include\",{\"1\":{\"1416\":1,\"1584\":1,\"1752\":1,\"1920\":1,\"4843\":1}}],[\"increments\",{\"1\":{\"778\":1}}],[\"increment\",{\"1\":{\"421\":1,\"2754\":1,\"2757\":1,\"2758\":1,\"2761\":1,\"3878\":1,\"5132\":1,\"5135\":1,\"5136\":1,\"5139\":1}}],[\"info\",{\"1\":{\"1179\":1,\"3565\":1,\"4212\":1}}],[\"info信息等\",{\"1\":{\"1178\":1,\"4211\":1}}],[\"inf\",{\"1\":{\"1139\":1,\"1144\":2,\"1146\":2,\"4172\":1,\"4177\":2,\"4179\":2}}],[\"invocationhandler\",{\"1\":{\"849\":1,\"851\":2,\"853\":1,\"1217\":1,\"4058\":1,\"4060\":2,\"4062\":1,\"4250\":1}}],[\"invoke\",{\"1\":{\"852\":1,\"853\":2,\"854\":2,\"925\":1,\"930\":3,\"943\":2,\"1217\":1,\"4061\":1,\"4062\":2,\"4063\":2,\"4250\":1}}],[\"invokevirtual\",{\"1\":{\"468\":1,\"3919\":1}}],[\"invokestatic\",{\"1\":{\"468\":1,\"3919\":1}}],[\"insert\",{\"1\":{\"1221\":1,\"1235\":1,\"2691\":1,\"2766\":1,\"2767\":1,\"2872\":1,\"2873\":3,\"4254\":1,\"4268\":1,\"5069\":1,\"5144\":1,\"5145\":1,\"5250\":1,\"5251\":3}}],[\"insertelementat\",{\"1\":{\"774\":2}}],[\"instanceof\",{\"1\":{\"968\":1,\"1014\":1}}],[\"instance\",{\"1\":{\"749\":2,\"752\":1,\"820\":5,\"4029\":5}}],[\"index地址\",{\"1\":{\"3572\":1}}],[\"indexcontroller\",{\"1\":{\"3565\":1}}],[\"index=8\",{\"1\":{\"1304\":1,\"5496\":1}}],[\"index=7\",{\"1\":{\"1295\":1,\"5487\":1}}],[\"indexfor方法其实主要是将hash生成的整型转换成链表数组中的下标\",{\"1\":{\"969\":1}}],[\"indexfor\",{\"1\":{\"963\":1,\"966\":1,\"968\":1}}],[\"index+1\",{\"1\":{\"786\":1,\"788\":1}}],[\"index\",{\"1\":{\"774\":9,\"776\":2,\"778\":10,\"784\":2,\"786\":5,\"788\":6,\"804\":1,\"1000\":1,\"1014\":1,\"1024\":1,\"2588\":2,\"2622\":1,\"2626\":1,\"2631\":1,\"2640\":1,\"2648\":1,\"2656\":1,\"3565\":3,\"3573\":1,\"4966\":2,\"5000\":1,\"5004\":1,\"5009\":1,\"5018\":1,\"5026\":1,\"5034\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"436\":1,\"778\":1,\"3895\":1}}],[\"in\",{\"1\":{\"749\":2,\"967\":1,\"997\":1,\"1013\":1,\"1016\":1,\"1022\":1,\"1026\":1,\"1033\":1,\"1365\":1,\"1416\":1,\"1533\":1,\"1584\":1,\"1701\":1,\"1752\":1,\"1869\":1,\"1920\":1,\"2747\":1,\"2774\":1,\"2903\":1,\"3288\":2,\"3358\":1,\"3359\":1,\"4552\":2,\"4792\":1,\"4843\":1,\"5125\":1,\"5152\":1,\"5281\":1}}],[\"inputstream\",{\"1\":{\"455\":2,\"3914\":2}}],[\"intel\",{\"1\":{\"3106\":1,\"4388\":1}}],[\"integer>\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"integer\",{\"1\":{\"536\":1,\"1061\":1,\"1272\":1,\"3309\":1,\"3310\":1,\"3311\":1,\"3342\":1,\"3343\":1,\"3344\":1,\"4094\":1,\"4574\":1,\"4575\":1,\"4576\":1,\"4599\":1,\"4600\":1,\"4601\":1,\"5464\":1}}],[\"interview\",{\"0\":{\"5841\":1}}],[\"interruptedexception\",{\"1\":{\"3200\":1}}],[\"interceptor\",{\"1\":{\"1218\":1,\"4251\":1}}],[\"intercept\",{\"1\":{\"860\":2,\"861\":1,\"862\":1,\"1218\":1,\"4069\":2,\"4070\":1,\"4071\":1,\"4251\":1}}],[\"internet\",{\"1\":{\"2453\":1,\"2514\":1,\"2546\":1,\"5530\":1,\"5551\":1,\"5612\":1}}],[\"intern\",{\"1\":{\"281\":1,\"291\":1}}],[\"interfaces\",{\"1\":{\"851\":2,\"4060\":2}}],[\"interface\",{\"1\":{\"181\":1,\"182\":1,\"853\":1,\"861\":1,\"3830\":1,\"3831\":1,\"4062\":1,\"4070\":1}}],[\"int\",{\"1\":{\"452\":1,\"463\":5,\"601\":3,\"749\":3,\"763\":1,\"764\":1,\"774\":3,\"776\":1,\"778\":3,\"784\":1,\"786\":2,\"788\":2,\"804\":1,\"914\":1,\"918\":1,\"921\":1,\"958\":1,\"963\":2,\"968\":5,\"999\":1,\"1000\":1,\"1014\":3,\"1020\":2,\"1024\":2,\"1028\":2,\"1263\":5,\"1272\":5,\"1334\":4,\"1416\":2,\"1584\":2,\"1752\":2,\"1920\":2,\"2918\":1,\"3082\":1,\"3083\":1,\"3084\":1,\"3085\":1,\"3200\":1,\"3203\":2,\"3288\":2,\"3911\":1,\"4438\":1,\"4439\":1,\"4440\":1,\"4441\":1,\"4552\":2,\"4843\":2,\"5296\":1,\"5455\":5,\"5464\":5}}],[\"initial\",{\"1\":{\"911\":1,\"921\":1,\"3288\":1,\"4552\":1}}],[\"initialization\",{\"1\":{\"386\":1,\"3839\":1}}],[\"initialheapsize\",{\"1\":{\"244\":1}}],[\"initalmemory\",{\"1\":{\"251\":2}}],[\"ir⋯\",{\"1\":{\"94\":1,\"3748\":1}}],[\"isterminated\",{\"1\":{\"3325\":1}}],[\"isshutdown\",{\"1\":{\"3325\":1}}],[\"isheldexclusively\",{\"1\":{\"3081\":1,\"4437\":1}}],[\"isn\",{\"0\":{\"2422\":1},\"1\":{\"2307\":1}}],[\"isolation\",{\"1\":{\"1091\":1,\"1092\":1,\"1093\":1,\"1094\":1,\"1095\":1,\"2808\":1,\"4124\":1,\"4125\":1,\"4126\":1,\"4127\":1,\"4128\":1,\"5186\":1}}],[\"is\",{\"1\":{\"83\":2,\"548\":1,\"555\":1,\"557\":1,\"749\":2,\"752\":1,\"999\":1,\"3288\":5,\"3737\":2,\"4552\":5}}],[\"idea\",{\"1\":{\"3645\":1}}],[\"idle\",{\"1\":{\"3288\":2,\"4552\":2}}],[\"idx=1\",{\"1\":{\"3155\":1,\"3361\":1,\"4470\":1,\"4615\":1}}],[\"idx=3\",{\"1\":{\"3130\":1,\"4365\":1}}],[\"idx=2\",{\"1\":{\"1154\":1,\"4187\":1}}],[\"id+1\",{\"1\":{\"2863\":1,\"5241\":1}}],[\"ids\",{\"1\":{\"2861\":2,\"2864\":2,\"2865\":2,\"5239\":2,\"5242\":2,\"5243\":2}}],[\"id\",{\"1\":{\"67\":1,\"2788\":2,\"2854\":1,\"2857\":2,\"2859\":2,\"2861\":9,\"2863\":3,\"2864\":5,\"2865\":2,\"2866\":2,\"3017\":1,\"3225\":1,\"3721\":1,\"4349\":1,\"5166\":2,\"5232\":1,\"5235\":2,\"5237\":2,\"5239\":9,\"5241\":3,\"5242\":5,\"5243\":2,\"5244\":2,\"5395\":1}}],[\"iterator\",{\"1\":{\"891\":3,\"894\":1}}],[\"its\",{\"1\":{\"749\":1,\"786\":1,\"788\":1}}],[\"it\",{\"1\":{\"37\":2,\"749\":1,\"752\":1,\"3691\":2}}],[\"我就去总结md5相关的知识\",{\"1\":{\"3641\":1}}],[\"我就是了解\",{\"1\":{\"3376\":1,\"5656\":1}}],[\"我当时信以为真\",{\"1\":{\"3641\":1}}],[\"我当时一脸懵逼\",{\"1\":{\"3641\":1}}],[\"我叫杨路恒\",{\"1\":{\"3578\":1,\"5829\":1}}],[\"我简历上都是java\",{\"1\":{\"3442\":1}}],[\"我看你为了防止内存泄漏\",{\"1\":{\"3440\":1}}],[\"我看到你用到了threadlocal\",{\"1\":{\"3439\":1}}],[\"我看看一下经过扰动的算法最终的计算结果会如何\",{\"1\":{\"992\":1}}],[\"我都说了了解mysql\",{\"1\":{\"3380\":1,\"5660\":1}}],[\"我只是了解他是干啥的\",{\"1\":{\"3377\":1,\"5657\":1}}],[\"我发现缓存雪崩这名字起的有点意思\",{\"1\":{\"3042\":1,\"5420\":1}}],[\"我给你负责\",{\"1\":{\"2540\":1,\"5638\":1}}],[\"我给你\",{\"1\":{\"2538\":1,\"5636\":1}}],[\"我总结面试常考的也就是\",{\"1\":{\"2337\":1}}],[\"我默认大家对http\",{\"1\":{\"2216\":1,\"2231\":1,\"2246\":1,\"2259\":1,\"2272\":1,\"2287\":1,\"5523\":1,\"5546\":1}}],[\"我说算力够的话能够被破解\",{\"1\":{\"3437\":1}}],[\"我说了做的一些优化\",{\"1\":{\"3403\":1,\"5683\":1}}],[\"我说是生成随机数吗\",{\"1\":{\"3400\":1,\"5680\":1}}],[\"我说是一个高并发写的操作\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"我说实现自定义处理策略\",{\"1\":{\"3399\":1,\"5679\":1}}],[\"我说实习生的日常工作安排是什么\",{\"1\":{\"3392\":1,\"5672\":1}}],[\"我说只了解它是用来作为即时通讯的协议\",{\"1\":{\"3383\":1,\"5663\":1}}],[\"我说不了解\",{\"1\":{\"3381\":1,\"3391\":1,\"5661\":1,\"5671\":1}}],[\"我说不行\",{\"1\":{\"3371\":1,\"5651\":1}}],[\"我说spring\",{\"1\":{\"3375\":1,\"5655\":1}}],[\"我说如果在一个进程可以\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"我要先告诉大家一个常见的局部性原理\",{\"1\":{\"1329\":1}}],[\"我希望我们不仅可以深入了解背后的原理\",{\"1\":{\"1031\":1}}],[\"我后面会有文章继续深入介绍\",{\"1\":{\"1017\":1}}],[\"我猜这只是程序员自由意志的选择吧\",{\"1\":{\"1015\":1}}],[\"我会尽量全部介绍到\",{\"1\":{\"961\":1}}],[\"我参考了网上的其博主的文章写的\",{\"1\":{\"606\":1}}],[\"我再提供一个简单的原则\",{\"1\":{\"557\":1}}],[\"我一个小白当然是去百度一下这个deque为啥java官方要推荐作为stack的实现呢\",{\"1\":{\"530\":1}}],[\"我先不说反射是啥\",{\"1\":{\"481\":1,\"3932\":1}}],[\"我们无法通过常规方式从md5值倒推出它的原文\",{\"1\":{\"3585\":1}}],[\"我们手动关闭自动提交\",{\"1\":{\"3468\":1,\"5737\":1}}],[\"我们操作锁大多时候都是基于\",{\"1\":{\"3274\":1,\"4502\":1}}],[\"我们称之为\",{\"1\":{\"3265\":1,\"4493\":1}}],[\"我们足以通过猜测得出结论\",{\"1\":{\"3194\":1,\"4538\":1}}],[\"我们调用的是threadlocalmap类对应的\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"我们创建的变量是可以被任何一个线程访问并修改的\",{\"1\":{\"3184\":1,\"4529\":1}}],[\"我们创建索引的字段应该是查询操作非常频繁的字段\",{\"1\":{\"2660\":1,\"5038\":1}}],[\"我们还要从布隆过滤器的原理来说\",{\"1\":{\"3024\":1,\"5402\":1}}],[\"我们需要的就是判断\",{\"1\":{\"3021\":1,\"5399\":1}}],[\"我们只需要维护threadpoolexecutor的实例\",{\"1\":{\"3347\":1,\"4605\":1}}],[\"我们只需要使用preparedstatement解决\",{\"1\":{\"2875\":1,\"5253\":1}}],[\"我们只要调用object对象的hashcode\",{\"1\":{\"963\":1}}],[\"我们讨论的\",{\"1\":{\"2844\":1,\"5222\":1}}],[\"我们常见的\",{\"1\":{\"2803\":1,\"5181\":1}}],[\"我们常说的堆外内存\",{\"1\":{\"283\":1}}],[\"我们不需要显示的使用\",{\"1\":{\"2724\":1,\"5102\":1}}],[\"我们不需要针对每个目标类都单独创建一个代理类\",{\"1\":{\"843\":1,\"4052\":1}}],[\"我们在后端增加额外的处理逻辑比如将失效的\",{\"1\":{\"3558\":1,\"5827\":1}}],[\"我们在使用联合索引时\",{\"1\":{\"2654\":1,\"5032\":1}}],[\"我们在做类设计的时候\",{\"1\":{\"554\":1}}],[\"我们就称之为\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"我们说网络设备都有一个\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"我们也是时候了解下到底什么是http\",{\"1\":{\"2207\":1,\"2222\":1,\"2237\":1,\"2250\":1,\"2263\":1,\"2278\":1,\"5513\":1,\"5538\":1}}],[\"我们也能看出\",{\"1\":{\"578\":1}}],[\"我们是要考虑\",{\"1\":{\"2795\":1,\"5173\":1}}],[\"我们是不建议在实际生产项目中使用外键的\",{\"1\":{\"2572\":1,\"4950\":1}}],[\"我们是用的\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"我们是必须要实现的\",{\"1\":{\"2155\":1,\"4760\":1}}],[\"我们是否可能将栈当做一个动态数组使用\",{\"1\":{\"558\":1}}],[\"我们是否有可能把子类进行向上的父类转型\",{\"1\":{\"557\":1}}],[\"我们肯定需要先暂停服务变为\",{\"1\":{\"2134\":1,\"4739\":1}}],[\"我们整个集群如何保证数据一致性\",{\"1\":{\"2132\":1,\"4737\":1}}],[\"我们首先来了解一下在\",{\"1\":{\"2110\":1,\"4715\":1}}],[\"我们一定会依赖各种服务\",{\"1\":{\"2078\":1,\"4683\":1}}],[\"我们来看看\",{\"1\":{\"1458\":1,\"1626\":1,\"1794\":1,\"1962\":1,\"4885\":1}}],[\"我们来做个简单的总结\",{\"1\":{\"1007\":1}}],[\"我们写的\",{\"1\":{\"1457\":1,\"1625\":1,\"1793\":1,\"1961\":1,\"4884\":1}}],[\"我们会循环从文件描述符读写数据\",{\"1\":{\"1393\":1,\"1561\":1,\"1729\":1,\"1897\":1,\"4820\":1}}],[\"我们熟悉的\",{\"1\":{\"1375\":1,\"1543\":1,\"1711\":1,\"1879\":1,\"4802\":1}}],[\"我们去分析一级缓存这样存放成品\",{\"1\":{\"1124\":1,\"4157\":1}}],[\"我们的项目需要连接多个数据库\",{\"1\":{\"1073\":1,\"4106\":1}}],[\"我们已经分析完了hashmap\",{\"1\":{\"1031\":1}}],[\"我们看完了java\",{\"1\":{\"1007\":1}}],[\"我们前面说过\",{\"1\":{\"1001\":1}}],[\"我们现在想向一个hashmap中put一个k\",{\"1\":{\"989\":1}}],[\"我们接下来准备分析hash方法的具体原理和实现\",{\"1\":{\"982\":1}}],[\"我们先来了解一下加密算法的基础北背景\",{\"1\":{\"3643\":1}}],[\"我们先来看一下\",{\"1\":{\"3025\":1,\"5403\":1}}],[\"我们先来做个简单分析\",{\"1\":{\"962\":1}}],[\"我们先来简单解释一下这些参数的含义\",{\"1\":{\"912\":1}}],[\"我们拿jdk\",{\"1\":{\"958\":1}}],[\"我们根据元素的自身特征把元素分配到不同的链表中去\",{\"1\":{\"956\":1}}],[\"我们定义了一个新的hashmap\",{\"1\":{\"926\":1}}],[\"我们知道消息在被追加到\",{\"1\":{\"3465\":1,\"5734\":1}}],[\"我们知道在\",{\"1\":{\"2648\":1,\"5026\":1}}],[\"我们知道\",{\"1\":{\"924\":1,\"929\":1,\"962\":1,\"996\":1,\"1186\":1,\"2217\":1,\"2232\":1,\"2247\":1,\"2260\":1,\"2273\":1,\"2288\":1,\"4219\":1,\"5524\":1,\"5547\":1}}],[\"我们知道vector和arraylist都是list的子类\",{\"1\":{\"769\":1}}],[\"我们对目标对象的每个方法的增强都是手动完成的\",{\"1\":{\"840\":1,\"4049\":1}}],[\"我们发现\",{\"1\":{\"791\":1}}],[\"我们最开始分析\",{\"1\":{\"587\":1}}],[\"我们想实现一个队列\",{\"1\":{\"570\":1}}],[\"我们都知道\",{\"1\":{\"570\":1}}],[\"我们再来看一下\",{\"1\":{\"567\":1,\"3028\":1,\"5406\":1}}],[\"我们暂且不急于介绍异常表\",{\"1\":{\"465\":1,\"3916\":1}}],[\"我们可以创建多种类型的\",{\"1\":{\"3331\":1,\"4588\":1}}],[\"我们可以多配置一些线程\",{\"1\":{\"3329\":1,\"4586\":1}}],[\"我们可以结合内置线程池来分析\",{\"1\":{\"3308\":1,\"4573\":1}}],[\"我们可以在构造函数中传入\",{\"1\":{\"3275\":1,\"4503\":1}}],[\"我们可以在程序运行时动态创建对象\",{\"1\":{\"489\":1,\"3940\":1}}],[\"我们可以设置一个\",{\"1\":{\"3255\":1,\"4484\":1}}],[\"我们可以把\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"我们可以快速找到\",{\"1\":{\"2588\":1,\"4966\":1}}],[\"我们可以进一步减少通过\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"我们可以得知\",{\"1\":{\"1412\":1,\"1580\":1,\"1748\":1,\"1916\":1,\"4839\":1}}],[\"我们可以看到输出的sql文是把整个参数用引号包起来\",{\"1\":{\"2876\":1,\"5254\":1}}],[\"我们可以看到\",{\"1\":{\"1335\":1}}],[\"我们可以集成很多三方中间件来做缓存\",{\"1\":{\"1230\":1,\"4263\":1}}],[\"我们可以发现\",{\"1\":{\"1000\":1,\"1031\":1}}],[\"我们可以从上图看到\",{\"1\":{\"956\":1}}],[\"我们可以将其理解为链表的数组\",{\"1\":{\"954\":1}}],[\"我们可以用\",{\"1\":{\"857\":1,\"1404\":1,\"1572\":1,\"1740\":1,\"1908\":1,\"4066\":1,\"4831\":1}}],[\"我们可以直接代理实现类\",{\"1\":{\"843\":1,\"4052\":1}}],[\"我们可以对\",{\"1\":{\"405\":1,\"3860\":1}}],[\"我们可以通过\",{\"1\":{\"243\":1}}],[\"我们通常会将\",{\"1\":{\"247\":1}}],[\"我们支持\",{\"1\":{\"160\":1,\"168\":1,\"3809\":1,\"3817\":1}}],[\"我在右对齐\",{\"1\":{\"64\":1,\"3718\":1}}],[\"我是居中的\",{\"1\":{\"63\":1,\"3717\":1}}],[\"上传素材功能\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"上完厕所完事后把门打开\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"上图有一个错误\",{\"1\":{\"2453\":1,\"2546\":1,\"5551\":1}}],[\"上图用于辅助理解\",{\"1\":{\"1055\":1,\"4088\":1}}],[\"上位的时候\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"上\",{\"1\":{\"1475\":1,\"1643\":1,\"1811\":1,\"1979\":1,\"3194\":1,\"4538\":1,\"4902\":1}}],[\"上下文切换\",{\"1\":{\"1402\":1,\"1570\":1,\"1738\":1,\"1906\":1,\"4829\":1}}],[\"上下角标\",{\"0\":{\"59\":1,\"3713\":1}}],[\"上有可读事件发生时\",{\"1\":{\"1389\":1,\"1557\":1,\"1725\":1,\"1893\":1,\"4816\":1}}],[\"上限就为系统定义的进程打开的最大文件描述符个数\",{\"1\":{\"1383\":1,\"1551\":1,\"1719\":1,\"1887\":1,\"4810\":1}}],[\"上的副本\",{\"1\":{\"2964\":1,\"5342\":1}}],[\"上的更改\",{\"1\":{\"1168\":1,\"4201\":1}}],[\"上的时间不得超过\",{\"1\":{\"383\":1}}],[\"上面我讲过了\",{\"1\":{\"2134\":1,\"4739\":1}}],[\"上面我们不是说只有\",{\"1\":{\"2116\":1,\"4721\":1}}],[\"上面我们提到过\",{\"1\":{\"954\":1}}],[\"上面我们是从实现和应用角度来说的静态代理\",{\"1\":{\"841\":1,\"4050\":1}}],[\"上面红色的箭头代表的是有变动的分区分配\",{\"1\":{\"1294\":1,\"5486\":1}}],[\"上面这两条语句必须在一个事务中\",{\"1\":{\"2775\":1,\"5153\":1}}],[\"上面这段关于concurrenthashmap的hash实现其实和hashmap如出一辙\",{\"1\":{\"1015\":1}}],[\"上面这些例子\",{\"1\":{\"554\":1}}],[\"上面是java\",{\"1\":{\"998\":1}}],[\"上面是一张hashmap中主要的成员变量的图\",{\"1\":{\"911\":1}}],[\"上面的字节码中包含一个\",{\"1\":{\"3166\":1,\"4511\":1}}],[\"上面的三个步骤和单\",{\"1\":{\"1484\":1,\"1652\":1,\"1820\":1,\"1988\":1,\"4911\":1}}],[\"上面的解释不知道你有没有看懂\",{\"1\":{\"977\":1}}],[\"上面的方法主要都是增加和删除方法\",{\"1\":{\"960\":1}}],[\"上源码\",{\"1\":{\"747\":1}}],[\"上述from和to之前发生异常后的异常处理者的位置\",{\"1\":{\"473\":1,\"3924\":1}}],[\"上来看是基于\",{\"1\":{\"382\":1}}],[\"上一篇\",{\"1\":{\"19\":1,\"3673\":1}}],[\"危险容器\",{\"1\":{\"53\":1,\"3707\":1}}],[\"警告容器\",{\"1\":{\"51\":1,\"3705\":1}}],[\"提升系统性能指标\",{\"1\":{\"3454\":1,\"5723\":1}}],[\"提到的来说一下使用线程池的好处\",{\"1\":{\"3280\":1,\"4544\":1}}],[\"提到jvm处理异常的机制\",{\"1\":{\"465\":1,\"3916\":1}}],[\"提前批一面11min\",{\"0\":{\"3433\":1}}],[\"提前加载到缓存\",{\"1\":{\"2202\":1,\"4324\":1}}],[\"提前创建\",{\"1\":{\"1137\":1,\"4170\":1}}],[\"提交更新\",{\"1\":{\"3245\":1,\"4475\":1}}],[\"提交失败\",{\"1\":{\"3100\":1,\"4379\":1}}],[\"提交事务消息\",{\"1\":{\"2174\":1,\"4296\":1}}],[\"提交后会清空缓存区域\",{\"1\":{\"1221\":1,\"1235\":1,\"4254\":1,\"4268\":1}}],[\"提高线程的可管理性\",{\"1\":{\"3283\":1,\"4547\":1}}],[\"提高响应速度\",{\"1\":{\"3282\":1,\"4546\":1}}],[\"提高多表连接查询的效率\",{\"1\":{\"2663\":1,\"5041\":1}}],[\"提高性能\",{\"1\":{\"2579\":1,\"4957\":1}}],[\"提高系统的可维护性\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"提高开发效率\",{\"1\":{\"2047\":1,\"4652\":1}}],[\"提高到o\",{\"1\":{\"1017\":1}}],[\"提出了有名管道\",{\"1\":{\"1365\":1,\"1533\":1,\"1701\":1,\"1869\":1,\"4792\":1}}],[\"提取出该分组中的\",{\"1\":{\"2485\":1,\"5583\":1}}],[\"提取查询分组中的\",{\"1\":{\"2483\":1,\"5581\":1}}],[\"提取\",{\"1\":{\"1059\":1,\"4092\":1}}],[\"提供远程的feign接口\",{\"1\":{\"3528\":1,\"5797\":1}}],[\"提供事务支持\",{\"1\":{\"2569\":1,\"4947\":1}}],[\"提供与\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"提供\",{\"1\":{\"2099\":1,\"3001\":1,\"4704\":1,\"5379\":1}}],[\"提供的\",{\"1\":{\"2015\":1,\"2096\":1,\"4620\":1,\"4701\":1}}],[\"提供的插件接口\",{\"1\":{\"1215\":1,\"4248\":1}}],[\"提供应用程序的信息\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"提供了两种锁机制来控制多个线程对共享资源的互斥访问\",{\"1\":{\"3206\":1,\"4330\":1}}],[\"提供了两个命令来生成\",{\"1\":{\"2968\":1,\"5346\":1}}],[\"提供了服务的发现\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"提供了一个专门发送文件的系统调用函数\",{\"1\":{\"1415\":1,\"1583\":1,\"1751\":1,\"1919\":1,\"4842\":1}}],[\"提供了除了构造函数注入和原型注入外的\",{\"1\":{\"1114\":1,\"4147\":1}}],[\"提供了fast\",{\"1\":{\"750\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"42\":1,\"3696\":1}}],[\"提示\",{\"1\":{\"124\":1,\"3778\":1}}],[\"提示容器\",{\"1\":{\"49\":1,\"3703\":1}}],[\"=>\",{\"1\":{\"1197\":1,\"1198\":1,\"1199\":1,\"4230\":1,\"4231\":1,\"4232\":1}}],[\"==\",{\"1\":{\"421\":2,\"452\":1,\"778\":1,\"820\":2,\"973\":1,\"1020\":1,\"1263\":2,\"1272\":1,\"3203\":1,\"3288\":4,\"3878\":2,\"3911\":1,\"4029\":2,\"4552\":4,\"5455\":2,\"5464\":1}}],[\"=\",{\"1\":{\"47\":1,\"94\":1,\"251\":2,\"421\":7,\"455\":2,\"457\":9,\"463\":2,\"480\":1,\"483\":1,\"485\":3,\"491\":2,\"499\":2,\"505\":2,\"508\":3,\"537\":1,\"544\":1,\"568\":1,\"571\":2,\"601\":9,\"617\":1,\"749\":2,\"752\":2,\"754\":1,\"763\":1,\"764\":1,\"770\":3,\"774\":1,\"778\":2,\"786\":3,\"788\":3,\"820\":1,\"877\":1,\"917\":1,\"921\":1,\"925\":4,\"930\":9,\"939\":1,\"943\":10,\"968\":2,\"972\":1,\"974\":2,\"979\":2,\"980\":2,\"1000\":1,\"1014\":3,\"1020\":1,\"1021\":1,\"1024\":2,\"1116\":2,\"1158\":1,\"1263\":10,\"1272\":12,\"1334\":3,\"1405\":1,\"1573\":1,\"1741\":1,\"1909\":1,\"2763\":1,\"2764\":1,\"2765\":1,\"2768\":1,\"2770\":2,\"2775\":1,\"2788\":1,\"3190\":2,\"3193\":9,\"3200\":4,\"3201\":1,\"3203\":7,\"3217\":1,\"3286\":1,\"3288\":7,\"3701\":1,\"3748\":1,\"3878\":7,\"3914\":2,\"3931\":1,\"3934\":1,\"3936\":3,\"3942\":2,\"3950\":2,\"3956\":2,\"3959\":3,\"3985\":1,\"4029\":1,\"4149\":2,\"4191\":1,\"4341\":1,\"4534\":2,\"4537\":3,\"4550\":1,\"4552\":7,\"4832\":1,\"5141\":1,\"5142\":1,\"5143\":1,\"5146\":1,\"5148\":2,\"5153\":1,\"5166\":1,\"5455\":10,\"5464\":12}}],[\"aes\",{\"1\":{\"3645\":1}}],[\"a=2\",{\"1\":{\"3101\":1,\"4381\":1}}],[\"aqs队列内部维护的是一个双向链表\",{\"1\":{\"3069\":1,\"4423\":1}}],[\"aqs是依赖内部的同步队列实现\",{\"1\":{\"3068\":1,\"4422\":1}}],[\"aqs是一个抽象类\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"aqs内部实现\",{\"0\":{\"3067\":1,\"4421\":1}}],[\"aqs功能分为两种\",{\"1\":{\"3063\":1,\"4417\":1}}],[\"aqs的两种功能\",{\"0\":{\"3062\":1,\"4416\":1}}],[\"aqs在顶层已经定义好了\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"aqs解决了了之类实现同步器的大量细节问题\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"aqs\",{\"0\":{\"3057\":1,\"3058\":1,\"4412\":1,\"4435\":1},\"1\":{\"3061\":1,\"3070\":2,\"3071\":1,\"3080\":1,\"3215\":1,\"4339\":1,\"4415\":1,\"4424\":2,\"4425\":1,\"4436\":1}}],[\"aof\",{\"0\":{\"2971\":1,\"2977\":1,\"5349\":1,\"5355\":1},\"1\":{\"2961\":1,\"2962\":1,\"2972\":2,\"2974\":4,\"2976\":2,\"2978\":1,\"2979\":1,\"2980\":2,\"2981\":1,\"2982\":2,\"2983\":1,\"2988\":1,\"2989\":1,\"5339\":1,\"5340\":1,\"5350\":2,\"5352\":4,\"5354\":2,\"5356\":1,\"5357\":1,\"5358\":2,\"5359\":1,\"5360\":2,\"5361\":1,\"5366\":1,\"5367\":1}}],[\"aop和ioc概念\",{\"0\":{\"1044\":1,\"4077\":1}}],[\"aop\",{\"1\":{\"845\":1,\"858\":1,\"1045\":2,\"1046\":3,\"1070\":1,\"1075\":1,\"1132\":2,\"1134\":2,\"1137\":1,\"4054\":1,\"4067\":1,\"4078\":2,\"4079\":3,\"4103\":1,\"4108\":1,\"4165\":2,\"4167\":2,\"4170\":1}}],[\"authorization\",{\"1\":{\"3485\":2,\"5754\":2}}],[\"authorizedfilter\",{\"1\":{\"3478\":1,\"5747\":1}}],[\"author\",{\"1\":{\"3286\":1,\"4550\":1}}],[\"autoinc\",{\"1\":{\"2762\":1,\"2763\":1,\"2764\":1,\"2765\":1,\"2768\":1,\"2770\":1,\"5140\":1,\"5141\":1,\"5142\":1,\"5143\":1,\"5146\":1,\"5148\":1}}],[\"auto\",{\"0\":{\"2753\":1,\"5131\":1},\"1\":{\"1148\":1,\"2711\":1,\"2754\":1,\"2755\":1,\"2756\":1,\"2757\":3,\"2758\":2,\"2759\":1,\"2761\":1,\"2762\":1,\"2763\":1,\"4181\":1,\"5089\":1,\"5132\":1,\"5133\":1,\"5134\":1,\"5135\":3,\"5136\":2,\"5137\":1,\"5139\":1,\"5140\":1,\"5141\":1}}],[\"autocommit\",{\"1\":{\"2775\":1,\"5153\":1}}],[\"autoconfigurationimportselector\",{\"1\":{\"1148\":1,\"4181\":1}}],[\"autoconfigure在我们的开发中并不会被感知\",{\"1\":{\"1195\":1,\"4228\":1}}],[\"autoconfigure\",{\"1\":{\"1144\":1,\"1194\":1,\"4177\":1,\"4227\":1}}],[\"autocloseable\",{\"1\":{\"454\":1,\"3913\":1}}],[\"automaticallycloseresource\",{\"1\":{\"455\":1,\"3914\":1}}],[\"aufs\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"atomicity\",{\"1\":{\"2806\":1,\"5184\":1}}],[\"atomicinteger\",{\"1\":{\"1263\":3,\"5455\":3}}],[\"atomic\",{\"1\":{\"2102\":1,\"2108\":1,\"4707\":1,\"4713\":1}}],[\"attrs\",{\"0\":{\"66\":1,\"3720\":1}}],[\"acquire方法流程总结\",{\"0\":{\"4430\":1}}],[\"acquirequeued\",{\"1\":{\"3077\":1,\"4433\":1}}],[\"actively\",{\"1\":{\"3360\":1}}],[\"actuator是spring\",{\"1\":{\"1201\":1,\"4234\":1}}],[\"actuator组件中已经内置了非常多的endpoint\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"actuator的核心是端点\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"actuator轻松实现应用程序的监控治理\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"actuator`\",{\"1\":{\"1178\":1,\"4211\":1}}],[\"actuator\",{\"1\":{\"1177\":1,\"1178\":1,\"1179\":1,\"4210\":1,\"4211\":1,\"4212\":1}}],[\"acc\",{\"1\":{\"3175\":2,\"3179\":1,\"3288\":1,\"4520\":2,\"4524\":1,\"4552\":1}}],[\"accept\",{\"0\":{\"2448\":1},\"1\":{\"1464\":1,\"1467\":1,\"1482\":1,\"1499\":1,\"1632\":1,\"1635\":1,\"1650\":1,\"1667\":1,\"1800\":1,\"1803\":1,\"1818\":1,\"1835\":1,\"1968\":1,\"1971\":1,\"1986\":1,\"2003\":1,\"2331\":1,\"2333\":1,\"4891\":1,\"4894\":1,\"4909\":1,\"4926\":1}}],[\"acceptor\",{\"1\":{\"1460\":1,\"1462\":1,\"1466\":1,\"1467\":2,\"1481\":1,\"1482\":2,\"1499\":1,\"1628\":1,\"1630\":1,\"1634\":1,\"1635\":2,\"1649\":1,\"1650\":2,\"1667\":1,\"1796\":1,\"1798\":1,\"1802\":1,\"1803\":2,\"1817\":1,\"1818\":2,\"1835\":1,\"1964\":1,\"1966\":1,\"1970\":1,\"1971\":2,\"1985\":1,\"1986\":2,\"2003\":1,\"4887\":1,\"4889\":1,\"4893\":1,\"4894\":2,\"4908\":1,\"4909\":2,\"4926\":1}}],[\"accesslog\",{\"1\":{\"3571\":2}}],[\"accesscontroller\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"access\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"ack\",{\"1\":{\"2341\":1}}],[\"acid事务\",{\"0\":{\"2802\":1,\"5180\":1}}],[\"acid\",{\"1\":{\"1095\":1,\"4128\":1}}],[\"abortpolicy\",{\"1\":{\"3286\":1,\"3301\":1,\"3305\":1,\"4550\":1,\"4566\":1,\"4570\":1}}],[\"aba\",{\"0\":{\"3112\":1,\"4394\":1},\"1\":{\"3113\":1,\"3129\":1,\"4395\":1,\"4411\":1}}],[\"abc\",{\"1\":{\"2681\":1,\"5059\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"3061\":1,\"3080\":1,\"3215\":1,\"3274\":1,\"4339\":1,\"4415\":1,\"4436\":1,\"4502\":1}}],[\"abstractpartitionassignor\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"abstarctfactory\",{\"1\":{\"831\":1,\"4040\":1}}],[\"abtest\",{\"1\":{\"1116\":1,\"4149\":1}}],[\"advice\",{\"1\":{\"1075\":1,\"4108\":1}}],[\"addworker\",{\"1\":{\"3319\":1}}],[\"addwaiter\",{\"1\":{\"3076\":1,\"4432\":1}}],[\"addall\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"add\",{\"1\":{\"544\":1,\"774\":1,\"776\":2,\"778\":1}}],[\"addsuppressed\",{\"1\":{\"457\":2}}],[\"addelapsedtimefrom\",{\"1\":{\"421\":1,\"3878\":1}}],[\"addtime\",{\"1\":{\"421\":1,\"3878\":1}}],[\"address\",{\"1\":{\"215\":1,\"2469\":1,\"5567\":1}}],[\"async注解\",{\"1\":{\"3404\":1,\"3507\":1,\"5684\":1,\"5776\":1}}],[\"assignment\",{\"1\":{\"1272\":4,\"5464\":4}}],[\"assign\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"assembly\",{\"1\":{\"1148\":1,\"4181\":1}}],[\"aspect\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"astore\",{\"1\":{\"468\":1,\"3919\":1}}],[\"any\",{\"1\":{\"749\":1}}],[\"and\",{\"1\":{\"749\":1,\"1014\":1,\"3071\":1,\"3095\":1,\"3127\":1,\"3288\":1,\"4371\":1,\"4409\":1,\"4425\":1,\"4552\":1}}],[\"an\",{\"1\":{\"749\":1}}],[\"aliyunoss\",{\"1\":{\"3472\":1,\"3503\":1,\"5741\":1,\"5772\":1}}],[\"alibaba\",{\"1\":{\"3451\":1,\"5720\":1}}],[\"alter\",{\"1\":{\"2692\":1,\"5070\":1}}],[\"alternative\",{\"1\":{\"999\":1}}],[\"algorithm\",{\"1\":{\"1006\":1,\"3581\":1}}],[\"allow\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"allowcorethreadtimeout\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"allkeys\",{\"1\":{\"3005\":1,\"3006\":1,\"3010\":1,\"5383\":1,\"5384\":1,\"5388\":1}}],[\"all\",{\"1\":{\"749\":2}}],[\"aload\",{\"1\":{\"468\":1,\"3919\":1}}],[\"avl树调平衡有时候代价较大\",{\"1\":{\"875\":1,\"3983\":1}}],[\"avl树的时间复杂度虽然优于红黑树\",{\"1\":{\"674\":1,\"4016\":1}}],[\"availability\",{\"1\":{\"2145\":1,\"2149\":1,\"4750\":1,\"4754\":1}}],[\"available\",{\"1\":{\"1263\":2,\"5455\":2}}],[\"availablepartitionsfortopic\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"availablepartitions\",{\"1\":{\"1263\":4,\"5455\":4}}],[\"ava\",{\"1\":{\"243\":1}}],[\"amortized\",{\"1\":{\"596\":1}}],[\"ap\",{\"1\":{\"2157\":3,\"2159\":1,\"3514\":1,\"3515\":1,\"3516\":1,\"4762\":3,\"4764\":1,\"5783\":1,\"5784\":1,\"5785\":1}}],[\"appjwtutil\",{\"1\":{\"3478\":1,\"5747\":1}}],[\"approximate\",{\"1\":{\"3356\":1,\"3357\":1,\"3360\":1}}],[\"appendonly\",{\"1\":{\"2972\":1,\"2973\":1,\"2976\":1,\"5350\":1,\"5351\":1,\"5354\":1}}],[\"append\",{\"1\":{\"2961\":1,\"2972\":1,\"2979\":1,\"5339\":1,\"5350\":1,\"5357\":1}}],[\"apphttpcodeenum\",{\"1\":{\"1158\":8,\"1159\":1,\"4191\":8,\"4192\":1}}],[\"application配置文件这个容易理解\",{\"1\":{\"1162\":1,\"4195\":1}}],[\"application\",{\"1\":{\"1140\":2,\"4173\":2}}],[\"applicationcontext\",{\"1\":{\"1069\":1,\"4102\":1}}],[\"appclassloader\",{\"1\":{\"404\":1,\"3859\":1}}],[\"api服务网关\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"api要提供这两种线程安全的list的实现方式呢\",{\"1\":{\"768\":1}}],[\"api\",{\"1\":{\"410\":1,\"428\":1,\"2920\":1,\"2922\":1,\"3865\":1,\"3885\":1,\"5298\":1,\"5300\":1}}],[\"argument\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"args\",{\"1\":{\"251\":1,\"457\":1,\"853\":2,\"861\":2,\"1116\":1,\"3200\":1,\"3286\":1,\"4062\":2,\"4070\":2,\"4149\":1,\"4550\":1}}],[\"arp\",{\"0\":{\"2468\":1,\"5566\":1},\"1\":{\"2469\":2,\"2470\":2,\"2471\":2,\"2472\":1,\"2477\":1,\"2478\":1,\"2479\":2,\"2480\":1,\"2481\":2,\"2483\":2,\"2484\":3,\"2485\":1,\"2486\":1,\"2488\":3,\"2490\":1,\"2492\":1,\"2496\":1,\"2497\":1,\"5567\":2,\"5568\":2,\"5569\":2,\"5570\":1,\"5575\":1,\"5576\":1,\"5577\":2,\"5578\":1,\"5579\":2,\"5581\":2,\"5582\":3,\"5583\":1,\"5584\":1,\"5586\":3,\"5588\":1,\"5590\":1,\"5594\":1,\"5595\":1}}],[\"artifactid>\",{\"1\":{\"1169\":1,\"4202\":1}}],[\"article\",{\"1\":{\"520\":1,\"607\":1,\"653\":1,\"868\":1,\"897\":1,\"1209\":1,\"1242\":1,\"1295\":1,\"1304\":1,\"1318\":1,\"2193\":1,\"2877\":1,\"3056\":1,\"3218\":1,\"3276\":1,\"3514\":1,\"3515\":1,\"3516\":1,\"3656\":2,\"3888\":1,\"3971\":1,\"3976\":1,\"4242\":1,\"4275\":1,\"4315\":1,\"4342\":1,\"4504\":1,\"5255\":1,\"5434\":1,\"5487\":1,\"5496\":1,\"5510\":1,\"5783\":1,\"5784\":1,\"5785\":1}}],[\"arrayblockingqueue<>\",{\"1\":{\"3286\":1,\"4550\":1}}],[\"arrayblockingqueue\",{\"1\":{\"3286\":1,\"4550\":1}}],[\"arraycopy\",{\"1\":{\"774\":1,\"778\":1,\"786\":1,\"788\":1}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"774\":1,\"788\":1}}],[\"array\",{\"1\":{\"749\":2,\"795\":1,\"1334\":3,\"1335\":1,\"1336\":2}}],[\"arraylist<topicpartition>\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"arraylist<string>\",{\"1\":{\"770\":1}}],[\"arraylist类的remove方法内容如下\",{\"1\":{\"785\":1}}],[\"arraylist自动扩大容量为原来的1\",{\"1\":{\"763\":1}}],[\"arraylist是原来的50\",{\"1\":{\"795\":1}}],[\"arraylist是0\",{\"1\":{\"763\":1}}],[\"arraylist是非同步实现的一个单线程下较为高效的数据结构\",{\"1\":{\"758\":1}}],[\"arraylist非同步\",{\"1\":{\"762\":1}}],[\"arraylist的add方法内容如下\",{\"1\":{\"777\":1}}],[\"arraylist的存储结构定义为transient\",{\"1\":{\"758\":1}}],[\"arraylist的实现\",{\"1\":{\"750\":1}}],[\"arraylist只通过一个修改记录字段提供弱一致性\",{\"1\":{\"758\":1}}],[\"arraylist需要135字节\",{\"1\":{\"756\":1}}],[\"arraylist实现了writeobject方法\",{\"1\":{\"750\":1}}],[\"arraylist使用了transient关键字进行存储优化\",{\"0\":{\"746\":1}}],[\"arraylist和linkedlist和vector的区别\",{\"0\":{\"736\":1}}],[\"arraylist\",{\"0\":{\"707\":1},\"1\":{\"739\":1,\"748\":1,\"763\":1}}],[\"arraydeque效率更高一些\",{\"1\":{\"728\":1}}],[\"arraydeque和linkedlist都实现了deque接口\",{\"1\":{\"727\":1}}],[\"arraydeque实现了双端队列\",{\"1\":{\"723\":1}}],[\"arraydeque<>\",{\"1\":{\"571\":1,\"601\":1}}],[\"arraydeque<integer>\",{\"1\":{\"537\":1,\"568\":1}}],[\"arraydeque\",{\"0\":{\"722\":1},\"1\":{\"535\":1,\"572\":1,\"573\":1,\"574\":1,\"595\":1,\"604\":1}}],[\"arithmeticexception\",{\"1\":{\"452\":1,\"3911\":1}}],[\"are\",{\"1\":{\"411\":1,\"1263\":1,\"3288\":3,\"3360\":1,\"3866\":1,\"4552\":3,\"5455\":1}}],[\"area\",{\"1\":{\"179\":1,\"182\":1,\"279\":1,\"282\":1,\"294\":1,\"3828\":1,\"3831\":1}}],[\"a\",{\"1\":{\"47\":1,\"455\":1,\"548\":1,\"551\":1,\"555\":2,\"557\":2,\"749\":1,\"752\":1,\"1116\":1,\"1118\":4,\"1124\":3,\"1128\":2,\"1129\":2,\"1133\":1,\"1263\":2,\"2155\":1,\"2156\":1,\"2158\":2,\"2160\":1,\"2476\":1,\"2478\":1,\"2479\":1,\"2480\":1,\"2481\":2,\"2482\":1,\"2483\":3,\"2485\":1,\"2488\":1,\"2489\":3,\"2490\":1,\"2492\":2,\"2493\":4,\"2494\":1,\"2495\":1,\"2673\":3,\"2733\":1,\"2735\":1,\"2807\":6,\"2818\":4,\"2819\":2,\"2823\":3,\"2827\":2,\"2828\":1,\"3102\":1,\"3103\":1,\"3113\":2,\"3116\":1,\"3200\":1,\"3288\":2,\"3701\":1,\"3914\":1,\"4149\":1,\"4151\":4,\"4157\":3,\"4161\":2,\"4162\":2,\"4166\":1,\"4383\":1,\"4385\":1,\"4395\":2,\"4399\":1,\"4552\":2,\"4760\":1,\"4761\":1,\"4763\":2,\"4765\":1,\"5051\":3,\"5111\":1,\"5113\":1,\"5185\":6,\"5196\":4,\"5197\":2,\"5201\":3,\"5205\":2,\"5206\":1,\"5455\":2,\"5574\":1,\"5576\":1,\"5577\":1,\"5578\":1,\"5579\":2,\"5580\":1,\"5581\":3,\"5583\":1,\"5586\":1,\"5587\":3,\"5588\":1,\"5590\":2,\"5591\":4,\"5592\":1,\"5593\":1}}],[\"与客户端系统消息通知\",{\"1\":{\"3453\":1,\"5722\":1}}],[\"与此线程有关的inheritablethreadlocal值\",{\"1\":{\"3190\":1,\"4534\":1}}],[\"与此线程有关的threadlocal值\",{\"1\":{\"3190\":1,\"4534\":1}}],[\"与快照持久化相比\",{\"1\":{\"2972\":1,\"5350\":1}}],[\"与管道\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"4794\":1}}],[\"与代理类对象调用的方法相对应\",{\"1\":{\"853\":1,\"4062\":1}}],[\"与arraylist和linkedlist不同\",{\"1\":{\"726\":1}}],[\"与\",{\"1\":{\"46\":1,\"279\":1,\"355\":1,\"2021\":1,\"3208\":1,\"3700\":1,\"4332\":1,\"4626\":1,\"5530\":1}}],[\"v的实际值是相等的\",{\"1\":{\"3102\":1,\"4383\":1}}],[\"visible\",{\"1\":{\"2867\":1,\"5245\":1}}],[\"view时\",{\"1\":{\"2865\":1,\"5243\":1}}],[\"view\",{\"1\":{\"1066\":1,\"2701\":2,\"2702\":1,\"2852\":6,\"2854\":3,\"2861\":2,\"2865\":1,\"2866\":1,\"4099\":1,\"5079\":2,\"5080\":1,\"5230\":6,\"5232\":3,\"5239\":2,\"5243\":1,\"5244\":1}}],[\"viewresolver\",{\"1\":{\"1065\":2,\"1066\":1,\"4098\":2,\"4099\":1}}],[\"v对\",{\"1\":{\"989\":1}}],[\"v对的键值定位到他应该保存在数组的哪个下标中\",{\"1\":{\"983\":1}}],[\"v在链表数组中的位置的\",{\"1\":{\"962\":1}}],[\"volitile关键字原理\",{\"0\":{\"3132\":1,\"4444\":1}}],[\"volitile\",{\"0\":{\"3131\":1}}],[\"volatile总结\",{\"0\":{\"4468\":1}}],[\"volatile如何防止指令重排序\",{\"0\":{\"4454\":1}}],[\"volatile的作用\",{\"0\":{\"4451\":1}}],[\"volatile解决的是多线程共享变量可见性问题\",{\"1\":{\"3154\":1,\"4469\":1}}],[\"volatile防止指令重排序具体步骤\",{\"1\":{\"3148\":1,\"4461\":1}}],[\"volatile是通过内存屏障来防止指令重排序的\",{\"1\":{\"3143\":1,\"4455\":1}}],[\"volatile不能保证完全的原子性\",{\"1\":{\"3141\":1}}],[\"volatile\",{\"1\":{\"820\":1,\"3002\":1,\"3003\":1,\"3004\":1,\"3009\":1,\"4029\":1,\"5380\":1,\"5381\":1,\"5382\":1,\"5387\":1}}],[\"void\",{\"1\":{\"251\":1,\"449\":1,\"455\":1,\"457\":1,\"466\":1,\"468\":1,\"749\":1,\"752\":1,\"774\":3,\"776\":1,\"778\":3,\"1116\":1,\"3163\":1,\"3174\":1,\"3193\":1,\"3200\":2,\"3203\":1,\"3286\":1,\"3908\":1,\"3914\":1,\"3917\":1,\"3919\":1,\"4149\":1,\"4507\":1,\"4518\":1,\"4537\":1,\"4550\":1}}],[\"vs\",{\"1\":{\"592\":1}}],[\"vector锁定的是this对象\",{\"1\":{\"802\":1}}],[\"vector缺省情况下自动增长原来一倍的数组长度\",{\"1\":{\"795\":1}}],[\"vector缺省情况下增长原来一倍的数组长度\",{\"1\":{\"763\":1}}],[\"vector使用同步方法实现\",{\"1\":{\"780\":1}}],[\"vector的实现\",{\"1\":{\"773\":1,\"787\":1}}],[\"vector的占用的字节比arraylist要多\",{\"1\":{\"755\":1}}],[\"vector<string>\",{\"1\":{\"770\":2}}],[\"vector是java\",{\"1\":{\"766\":1}}],[\"vector是多线程环境下更为可靠的数据结构\",{\"1\":{\"759\":1}}],[\"vector指定了initialcapacity\",{\"1\":{\"764\":1}}],[\"vector同步\",{\"1\":{\"762\":1}}],[\"vector需要243字节\",{\"1\":{\"756\":1}}],[\"vector也实现了writeobject方法\",{\"1\":{\"753\":1}}],[\"vector每次请求其大小的双倍空间\",{\"1\":{\"743\":1}}],[\"vector和arraylist在更多元素添加进来时会请求更大的空间\",{\"1\":{\"743\":1}}],[\"vector\",{\"1\":{\"539\":1,\"540\":2,\"542\":2,\"546\":1,\"579\":2,\"587\":1,\"742\":1,\"751\":1,\"752\":1,\"764\":1}}],[\"verification\",{\"1\":{\"386\":1,\"3839\":1}}],[\"v\",{\"0\":{\"5830\":1,\"5843\":1},\"1\":{\"468\":2,\"1361\":1,\"1529\":1,\"1697\":1,\"1865\":1,\"3098\":1,\"3101\":1,\"3102\":2,\"3103\":2,\"3164\":1,\"3919\":2,\"4375\":1,\"4381\":1,\"4383\":2,\"4385\":2,\"4508\":1,\"4788\":1}}],[\"varaible\",{\"1\":{\"3200\":1}}],[\"varchar\",{\"1\":{\"2605\":1,\"2615\":1,\"4983\":1,\"4993\":1}}],[\"variant\",{\"1\":{\"1014\":1}}],[\"variables\",{\"1\":{\"212\":1}}],[\"variable\",{\"1\":{\"44\":1,\"3698\":1}}],[\"valuebytes\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"value\",{\"1\":{\"452\":3,\"1221\":1,\"1263\":1,\"2587\":1,\"2588\":2,\"2602\":1,\"2926\":1,\"2930\":1,\"2945\":1,\"2949\":1,\"3019\":1,\"3193\":4,\"3195\":1,\"3197\":1,\"3309\":1,\"3310\":1,\"3311\":1,\"3342\":1,\"3343\":1,\"3344\":1,\"3546\":1,\"3911\":3,\"4254\":1,\"4537\":3,\"4539\":1,\"4541\":1,\"4574\":1,\"4575\":1,\"4576\":1,\"4599\":1,\"4600\":1,\"4601\":1,\"4965\":1,\"4966\":2,\"4980\":1,\"5304\":1,\"5308\":1,\"5323\":1,\"5327\":1,\"5397\":1,\"5455\":1,\"5815\":1}}],[\"vue\",{\"0\":{\"109\":1,\"3763\":1}}],[\"vuepress\",{\"0\":{\"38\":1,\"3692\":1},\"1\":{\"28\":1,\"29\":1,\"33\":1,\"35\":1,\"37\":1,\"39\":1,\"40\":1,\"42\":1,\"126\":1,\"3682\":1,\"3683\":1,\"3687\":1,\"3689\":1,\"3691\":1,\"3693\":1,\"3694\":1,\"3696\":1,\"3780\":1}}],[\"pdai\",{\"1\":{\"3181\":1,\"3361\":1}}],[\"ptr\",{\"1\":{\"2854\":1,\"2858\":1,\"5232\":1,\"5236\":1}}],[\"ps\",{\"1\":{\"2624\":1,\"5002\":1}}],[\"pipes\",{\"1\":{\"1364\":1,\"1365\":1,\"1532\":1,\"1533\":1,\"1700\":1,\"1701\":1,\"1868\":1,\"1869\":1,\"4791\":1,\"4792\":1}}],[\"p\",{\"1\":{\"1361\":1,\"1529\":1,\"1697\":1,\"1865\":1,\"2155\":2,\"2156\":1,\"2160\":1,\"3059\":1,\"3656\":1,\"4413\":1,\"4760\":2,\"4761\":1,\"4765\":1,\"4788\":1}}],[\"png\",{\"1\":{\"1270\":1,\"1274\":1,\"1281\":1,\"1283\":1,\"1293\":1,\"1338\":1,\"5462\":1,\"5466\":1,\"5473\":1,\"5475\":1,\"5485\":1}}],[\"plus作为持久层提升开发效率\",{\"1\":{\"3452\":1,\"5721\":1}}],[\"plugin\",{\"1\":{\"42\":1,\"3696\":1}}],[\"platformtransactionmanager\",{\"1\":{\"1085\":1,\"4118\":1}}],[\"post\",{\"1\":{\"3573\":1}}],[\"poll\",{\"1\":{\"576\":1,\"744\":1,\"1375\":1,\"1376\":1,\"1378\":1,\"1379\":2,\"1380\":1,\"1395\":1,\"1397\":1,\"1543\":1,\"1544\":1,\"1546\":1,\"1547\":2,\"1548\":1,\"1563\":1,\"1565\":1,\"1711\":1,\"1712\":1,\"1714\":1,\"1715\":2,\"1716\":1,\"1731\":1,\"1733\":1,\"1879\":1,\"1880\":1,\"1882\":1,\"1883\":2,\"1884\":1,\"1899\":1,\"1901\":1,\"4802\":1,\"4803\":1,\"4805\":1,\"4806\":2,\"4807\":1,\"4822\":1,\"4824\":1}}],[\"poolexecutor\",{\"1\":{\"3200\":2}}],[\"pool\",{\"1\":{\"281\":2,\"288\":1,\"3200\":1,\"3288\":2,\"3358\":1,\"3359\":1,\"4552\":2}}],[\"purge\",{\"1\":{\"2861\":1,\"2873\":1,\"5239\":1,\"5251\":1}}],[\"pushdown\",{\"1\":{\"2656\":1,\"5034\":1}}],[\"push\",{\"1\":{\"544\":2,\"2512\":1,\"5610\":1}}],[\"putifabsent\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"putfields\",{\"1\":{\"752\":1}}],[\"putfield\",{\"1\":{\"752\":1}}],[\"put\",{\"1\":{\"480\":1,\"483\":1,\"752\":3,\"925\":1,\"943\":13,\"1272\":1,\"3931\":1,\"3934\":1,\"5464\":1}}],[\"public\",{\"1\":{\"126\":1,\"251\":1,\"449\":1,\"452\":1,\"455\":1,\"457\":1,\"466\":1,\"468\":1,\"485\":1,\"491\":1,\"774\":2,\"776\":1,\"778\":1,\"784\":1,\"786\":1,\"788\":1,\"820\":2,\"851\":1,\"853\":2,\"861\":2,\"1116\":2,\"1158\":3,\"1159\":3,\"1263\":1,\"1272\":1,\"1334\":1,\"3163\":2,\"3174\":2,\"3190\":1,\"3193\":2,\"3200\":3,\"3214\":1,\"3217\":1,\"3286\":2,\"3288\":1,\"3565\":1,\"3780\":1,\"3908\":1,\"3911\":1,\"3914\":1,\"3917\":1,\"3919\":1,\"3936\":1,\"3942\":1,\"4029\":2,\"4060\":1,\"4062\":2,\"4070\":2,\"4149\":2,\"4191\":3,\"4192\":3,\"4338\":1,\"4341\":1,\"4507\":2,\"4518\":2,\"4534\":1,\"4537\":1,\"4550\":2,\"4552\":1,\"5455\":1,\"5464\":1}}],[\"pre\",{\"1\":{\"3073\":1,\"3077\":1,\"4428\":1,\"4433\":1}}],[\"prev\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"prefix\",{\"1\":{\"2627\":1,\"5005\":1}}],[\"prehandler\",{\"1\":{\"1058\":1,\"4091\":1}}],[\"preparation\",{\"1\":{\"386\":1,\"3839\":1}}],[\"protocol\",{\"1\":{\"2469\":1,\"5567\":1}}],[\"protected\",{\"1\":{\"408\":1,\"409\":1,\"421\":1,\"3863\":1,\"3864\":1,\"3878\":1}}],[\"processor三种通道\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"processor\",{\"1\":{\"1485\":1,\"1486\":1,\"1653\":1,\"1654\":1,\"1821\":1,\"1822\":1,\"1989\":1,\"1990\":1,\"4912\":1,\"4913\":1}}],[\"producerid\",{\"1\":{\"1302\":1,\"5494\":1}}],[\"project\",{\"0\":{\"5842\":1},\"1\":{\"1144\":1,\"4177\":1}}],[\"proposal\",{\"1\":{\"2120\":1,\"4725\":1}}],[\"propagation\",{\"1\":{\"1099\":1,\"1100\":1,\"1101\":1,\"1103\":1,\"1104\":1,\"1105\":1,\"1107\":2,\"4132\":1,\"4133\":1,\"4134\":1,\"4136\":1,\"4137\":1,\"4138\":1,\"4140\":2}}],[\"properties中添加context\",{\"1\":{\"1174\":1,\"4207\":1}}],[\"properties\",{\"1\":{\"1140\":1,\"4173\":1}}],[\"proper\",{\"1\":{\"749\":2}}],[\"programming\",{\"1\":{\"1045\":1,\"4078\":1}}],[\"proxy代理实例\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"proxy\",{\"1\":{\"849\":1,\"850\":1,\"853\":2,\"861\":2,\"1046\":2,\"4058\":1,\"4059\":1,\"4062\":2,\"4070\":2,\"4079\":2}}],[\"principles\",{\"1\":{\"1148\":1,\"4181\":1}}],[\"printstacktrace\",{\"1\":{\"466\":1,\"468\":1,\"1159\":1,\"3917\":1,\"3919\":1,\"4192\":1}}],[\"println\",{\"1\":{\"251\":4,\"457\":1,\"463\":2,\"601\":2,\"925\":2,\"930\":3,\"943\":8,\"3163\":1,\"3174\":1,\"3200\":2,\"4507\":1,\"4518\":1}}],[\"private\",{\"1\":{\"749\":1,\"752\":1,\"774\":1,\"778\":2,\"820\":2,\"999\":1,\"1014\":1,\"1116\":2,\"1158\":1,\"1263\":1,\"3200\":1,\"3203\":1,\"4029\":2,\"4149\":2,\"4191\":1,\"5455\":1}}],[\"priorityqueue实现了队列接口queue\",{\"1\":{\"730\":1}}],[\"priorityqueue\",{\"0\":{\"729\":1}}],[\"passw0rd\",{\"1\":{\"3615\":1}}],[\"password=e10adc3949ba59abbe56e057f20f883e\",{\"1\":{\"3600\":1}}],[\"password=123456\",{\"1\":{\"3594\":1}}],[\"password\",{\"1\":{\"3596\":1,\"3602\":1}}],[\"package\",{\"1\":{\"3286\":1,\"4550\":1}}],[\"path\",{\"1\":{\"2453\":1,\"2546\":1,\"5551\":1}}],[\"pattern\",{\"1\":{\"814\":1,\"4023\":1}}],[\"paxos\",{\"1\":{\"2108\":1,\"2110\":1,\"2117\":1,\"4713\":1,\"4715\":1,\"4722\":1}}],[\"parkandcheckinterrupt\",{\"1\":{\"3077\":1,\"4433\":1}}],[\"partial\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"partitionassignor接口用于用户定义实现分区分配算法\",{\"1\":{\"1267\":1,\"5459\":1}}],[\"partitionspertopic\",{\"1\":{\"1272\":2,\"5464\":2}}],[\"partitionsfortopic\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"partitions\",{\"1\":{\"1263\":3,\"1272\":3,\"5455\":3,\"5464\":3}}],[\"partition\",{\"1\":{\"1263\":4,\"2099\":1,\"2145\":1,\"2150\":1,\"2155\":1,\"3465\":2,\"4704\":1,\"4750\":1,\"4755\":1,\"4760\":1,\"5455\":4,\"5734\":2}}],[\"part\",{\"1\":{\"1263\":2,\"5455\":2}}],[\"parator对象\",{\"1\":{\"686\":1,\"1037\":1}}],[\"parameters\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"paramvalues\",{\"1\":{\"509\":1,\"3960\":1}}],[\"paramtypes\",{\"1\":{\"509\":1,\"515\":2,\"517\":2,\"3960\":1,\"3966\":2,\"3968\":2}}],[\"param\",{\"1\":{\"485\":3,\"1159\":2,\"3288\":7,\"3936\":3,\"4192\":2,\"4552\":7}}],[\"parallel\",{\"1\":{\"360\":1}}],[\"parallelgcthreads\",{\"1\":{\"353\":1}}],[\"parent主要有如下作用\",{\"1\":{\"1186\":1,\"4219\":1}}],[\"parent有什么作用\",{\"1\":{\"1185\":1,\"4218\":1}}],[\"parent\",{\"1\":{\"421\":2,\"1186\":1,\"3878\":2,\"4219\":1}}],[\"parents\",{\"1\":{\"419\":1,\"3875\":1}}],[\"parnew\",{\"1\":{\"355\":1}}],[\"page45理解\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"page\",{\"0\":{\"2\":1},\"1\":{\"523\":1,\"525\":1,\"527\":1,\"609\":1,\"678\":1,\"727\":1}}],[\"phantomreference\",{\"1\":{\"322\":1}}],[\"peek\",{\"1\":{\"576\":1,\"744\":1}}],[\"per\",{\"1\":{\"3560\":1}}],[\"performs\",{\"1\":{\"752\":1}}],[\"perfcounter\",{\"1\":{\"421\":3,\"3878\":3}}],[\"permgen\",{\"1\":{\"282\":1}}],[\"petenuresizethreshold\",{\"1\":{\"260\":1}}],[\"pc寄存器为什么会被设定为线程私有的\",{\"1\":{\"194\":1}}],[\"pc\",{\"1\":{\"190\":1,\"1295\":1,\"1304\":2,\"5487\":1,\"5496\":2}}],[\"中带上这个\",{\"1\":{\"3481\":1,\"5750\":1}}],[\"中国邮政储蓄银行\",{\"0\":{\"3409\":1,\"5689\":1}}],[\"中午休息一小时\",{\"1\":{\"3407\":1,\"5687\":1}}],[\"中科全安\",{\"0\":{\"3364\":1,\"5644\":1}}],[\"中强制线程池不允许使用\",{\"1\":{\"3340\":1,\"4597\":1}}],[\"中实现的\",{\"1\":{\"3215\":1,\"4339\":1}}],[\"中断\",{\"1\":{\"3213\":1,\"4337\":1}}],[\"中自带的threadlocal类正是为了解决这样的问题\",{\"1\":{\"3185\":1,\"4530\":1}}],[\"中缓存大量无效的\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"中去并设置过期时间\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"中任意选择数据淘汰\",{\"1\":{\"3004\":1,\"3006\":1,\"5382\":1,\"5384\":1}}],[\"中挑选最不经常使用的数据淘汰\",{\"1\":{\"3009\":1,\"5387\":1}}],[\"中挑选最近最少使用的数据淘汰\",{\"1\":{\"3002\":1,\"5380\":1}}],[\"中挑选将要过期的数据淘汰\",{\"1\":{\"3003\":1,\"5381\":1}}],[\"中只存\",{\"1\":{\"3000\":1,\"5378\":1}}],[\"中最小的事务\",{\"1\":{\"2864\":1,\"5242\":1}}],[\"中会有\",{\"1\":{\"3484\":1,\"5753\":1}}],[\"中会发生数据不一致的问题\",{\"1\":{\"2768\":1,\"5146\":1}}],[\"中会维护队列\",{\"1\":{\"2133\":1,\"4738\":1}}],[\"中长链接的升级版本\",{\"1\":{\"2509\":1,\"5607\":1}}],[\"中主要使用\",{\"1\":{\"2506\":1,\"5604\":1}}],[\"中新加入了大量的状态码\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"中间件\",{\"1\":{\"2192\":1,\"4314\":1}}],[\"中生成后需要\",{\"1\":{\"2120\":1,\"4725\":1}}],[\"中还定义了一个\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"中还存活着的对象一次性复制到另一块\",{\"1\":{\"334\":1}}],[\"中更新了\",{\"1\":{\"2116\":1,\"4721\":1}}],[\"中三个主要的角色\",{\"1\":{\"2110\":1,\"4715\":1}}],[\"中下载镜像\",{\"1\":{\"2024\":1,\"4629\":1}}],[\"中苏醒\",{\"1\":{\"1389\":1,\"1557\":1,\"1725\":1,\"1893\":1,\"4816\":1}}],[\"中苏醒一次\",{\"1\":{\"1388\":1,\"1556\":1,\"1724\":1,\"1892\":1,\"4815\":1}}],[\"中传递参数也相同即最终执行\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"中两次执行相同的\",{\"1\":{\"1221\":1,\"4254\":1}}],[\"中代码处理的流程\",{\"1\":{\"1124\":1,\"4157\":1}}],[\"中如果像我们例子里那么处理\",{\"1\":{\"1123\":1,\"4156\":1}}],[\"中了\",{\"1\":{\"1118\":1,\"4151\":1}}],[\"中也是用到了适配器模式适配\",{\"1\":{\"1075\":1,\"4108\":1}}],[\"中也是有区别的\",{\"1\":{\"961\":1}}],[\"中增加创建产品的接⼝\",{\"1\":{\"831\":1,\"4040\":1}}],[\"中介者\",{\"1\":{\"816\":1,\"4025\":1}}],[\"中定义的方法\",{\"1\":{\"577\":1}}],[\"中定义的一个\",{\"1\":{\"282\":1}}],[\"中有很多方法\",{\"1\":{\"577\":1}}],[\"中是正确的\",{\"1\":{\"543\":1}}],[\"中查询\",{\"1\":{\"534\":1}}],[\"中内置了三个重要的\",{\"1\":{\"401\":1,\"3856\":1}}],[\"中非常频繁\",{\"1\":{\"274\":1}}],[\"中同样也会经历\",{\"1\":{\"259\":1}}],[\"中\",{\"1\":{\"258\":1,\"303\":1,\"379\":1,\"396\":1,\"399\":1,\"420\":1,\"425\":1,\"1063\":1,\"1072\":1,\"1344\":1,\"1347\":2,\"1415\":1,\"1512\":1,\"1515\":2,\"1583\":1,\"1680\":1,\"1683\":2,\"1751\":1,\"1848\":1,\"1851\":2,\"1919\":1,\"2102\":1,\"2597\":1,\"2632\":1,\"2947\":1,\"2955\":1,\"2974\":1,\"3106\":1,\"3168\":1,\"3194\":1,\"3484\":1,\"3851\":1,\"3854\":1,\"3877\":1,\"3882\":1,\"4096\":1,\"4105\":1,\"4388\":1,\"4513\":1,\"4538\":1,\"4707\":1,\"4771\":1,\"4774\":2,\"4842\":1,\"4975\":1,\"5010\":1,\"5325\":1,\"5333\":1,\"5352\":1,\"5753\":1}}],[\"中存储着\",{\"1\":{\"211\":1}}],[\"中设置\",{\"1\":{\"151\":1,\"155\":1,\"1140\":1,\"3805\":1,\"4173\":1}}],[\"中设置页面信息\",{\"1\":{\"117\":1,\"3771\":1}}],[\"中使用\",{\"1\":{\"44\":1,\"3698\":1}}],[\"中的监视器是什么\",{\"1\":{\"3381\":1,\"5661\":1}}],[\"中的锁是非公平的\",{\"1\":{\"3210\":1,\"4334\":1}}],[\"中的实际值相同时\",{\"1\":{\"3103\":1,\"4385\":1}}],[\"中的数据会被频繁被删除\",{\"1\":{\"3460\":1,\"5729\":1}}],[\"中的数据都是热点数据\",{\"1\":{\"3000\":1,\"5378\":1}}],[\"中的数据的命令\",{\"1\":{\"2974\":1,\"5352\":1}}],[\"中的历史版本\",{\"1\":{\"2854\":1,\"5232\":1}}],[\"中的主键索引就属于聚簇索引\",{\"1\":{\"2607\":1,\"2631\":1,\"4985\":1,\"5009\":1}}],[\"中的域名都是用句点来分隔的\",{\"1\":{\"2524\":1,\"5622\":1}}],[\"中的三个角色\",{\"0\":{\"2109\":1,\"4714\":1}}],[\"中的事物传播行为\",{\"0\":{\"1096\":1,\"4129\":1}}],[\"中的事务隔离级别\",{\"0\":{\"1089\":1,\"4122\":1}}],[\"中的事务的理解\",{\"0\":{\"1077\":1,\"4110\":1}}],[\"中的模型数据\",{\"1\":{\"1059\":1,\"4092\":1}}],[\"中的回收价值和成本进行排序\",{\"1\":{\"380\":1}}],[\"中的\",{\"0\":{\"538\":1},\"1\":{\"40\":1,\"539\":1,\"546\":1,\"826\":1,\"838\":1,\"844\":1,\"858\":1,\"862\":1,\"1071\":1,\"1221\":1,\"1353\":1,\"1356\":1,\"1521\":1,\"1524\":1,\"1689\":1,\"1692\":1,\"1857\":1,\"1860\":1,\"2122\":1,\"2131\":1,\"2857\":1,\"3249\":1,\"3260\":1,\"3266\":1,\"3694\":1,\"4035\":1,\"4047\":1,\"4053\":1,\"4067\":1,\"4071\":1,\"4104\":1,\"4254\":1,\"4479\":1,\"4488\":1,\"4494\":1,\"4727\":1,\"4736\":1,\"4780\":1,\"4783\":1,\"5235\":1}}],[\"中很重要的一个概念\",{\"1\":{\"35\":1,\"3689\":1}}],[\"请注意\",{\"1\":{\"2130\":1,\"2453\":1,\"2546\":1,\"4735\":1,\"5551\":1}}],[\"请求服务端并携带\",{\"1\":{\"3485\":1,\"5754\":1}}],[\"请求数据库写数据到缓存之前\",{\"1\":{\"3037\":1,\"5415\":1}}],[\"请求与当前资源的规定冲突\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"请求的\",{\"1\":{\"3033\":1,\"3039\":1,\"3040\":1,\"5411\":1,\"5417\":1,\"5418\":1}}],[\"请求的结果\",{\"1\":{\"2501\":1,\"5599\":1}}],[\"请求的提案\",{\"1\":{\"2136\":1,\"4741\":1}}],[\"请求\",{\"1\":{\"2089\":1,\"2136\":1,\"2457\":1,\"2516\":1,\"2536\":1,\"2550\":1,\"4694\":1,\"4741\":1,\"5555\":1,\"5614\":1,\"5634\":1}}],[\"请求合并\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"请求缓存\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"请求被\",{\"1\":{\"1056\":1,\"4089\":1}}],[\"请使用绝对链接\",{\"1\":{\"126\":1,\"3780\":1}}],[\"请阅读\",{\"1\":{\"40\":1,\"3694\":1}}],[\"请先阅读\",{\"1\":{\"31\":1,\"3685\":1}}],[\"对称性加密通常在消息发送方需要加密大量数据时使用\",{\"1\":{\"3652\":1}}],[\"对称密码算法又叫传统密码算法\",{\"1\":{\"3645\":1}}],[\"对称加密的缺点\",{\"1\":{\"3653\":1}}],[\"对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性\",{\"1\":{\"3652\":1}}],[\"对称加密优点\",{\"1\":{\"3652\":1}}],[\"对称加密和非对称加密有哪些优缺点\",{\"1\":{\"3642\":1}}],[\"对称加密\",{\"1\":{\"3642\":1}}],[\"对连接后的值进行散列\",{\"1\":{\"3630\":1,\"3636\":1}}],[\"对密码加密\",{\"0\":{\"3591\":1}}],[\"对安全性要求较高的场合\",{\"1\":{\"3589\":1}}],[\"对原文做一丁点儿改动\",{\"1\":{\"3586\":1}}],[\"对原sql通过limit来进行分页的效果\",{\"1\":{\"1208\":1,\"4241\":1}}],[\"对冷数据\",{\"1\":{\"3557\":1,\"5826\":1}}],[\"对面不满意\",{\"1\":{\"3437\":1}}],[\"对工作地点的看法\",{\"1\":{\"3412\":1,\"3425\":1,\"5692\":1,\"5705\":1}}],[\"对未来工作的看法\",{\"1\":{\"3411\":1,\"5691\":1}}],[\"对邮储的看法\",{\"1\":{\"3411\":1,\"5691\":1}}],[\"对给定元素再次进行相同的哈希计算\",{\"1\":{\"3029\":1,\"5407\":1}}],[\"对数据库造成了巨大的压力\",{\"1\":{\"3015\":1,\"3033\":1,\"3043\":1,\"5393\":1,\"5411\":1,\"5421\":1}}],[\"对数据的修改就是永久的\",{\"1\":{\"2809\":1,\"5187\":1}}],[\"对数据的修改效果对于引用类型和值类型会不同\",{\"1\":{\"462\":1}}],[\"对数据的增删改操作\",{\"1\":{\"2691\":1,\"5069\":1}}],[\"对其进行强制硬盘同步\",{\"1\":{\"2981\":1,\"5359\":1}}],[\"对其他事务不可见\",{\"1\":{\"2873\":1,\"5251\":1}}],[\"对其他并发事务是隔离的\",{\"1\":{\"2808\":1,\"5186\":1}}],[\"对读取的记录加独占锁\",{\"1\":{\"2774\":1,\"5152\":1}}],[\"对读取的记录加共享锁\",{\"1\":{\"2774\":1,\"5152\":1}}],[\"对一张表做结构变更操作的时候\",{\"1\":{\"2726\":1,\"5104\":1}}],[\"对一张表进行\",{\"1\":{\"2725\":1,\"5103\":1}}],[\"对一个记录频繁写\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"对表结构的更改操作\",{\"1\":{\"2692\":1,\"5070\":1}}],[\"对每一个可以用到的索引来进行评估\",{\"1\":{\"2669\":1,\"5047\":1}}],[\"对索引中包含的字段先做判断\",{\"1\":{\"2656\":1,\"5034\":1}}],[\"对排序查找和范围查找优化\",{\"1\":{\"2635\":1,\"5013\":1}}],[\"对文本的内容进行分词\",{\"1\":{\"2605\":1,\"2615\":1,\"4983\":1,\"4993\":1}}],[\"对应的值修改为\",{\"1\":{\"3103\":1,\"4385\":1}}],[\"对应的是\",{\"1\":{\"3033\":1,\"3040\":1,\"5411\":1,\"5418\":1}}],[\"对应的\",{\"1\":{\"2588\":1,\"4966\":1}}],[\"对应的pojo一定要实现serializable\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"对加\",{\"1\":{\"2091\":1,\"4696\":1}}],[\"对团队挑战大\",{\"1\":{\"2064\":1,\"4669\":1}}],[\"对进程进行封装隔离\",{\"1\":{\"2015\":1,\"4620\":1}}],[\"对比roundrobinassignor\",{\"1\":{\"1290\":1,\"5482\":1}}],[\"对消费者进行排序\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"对循环依赖的解决也就不会那么陌生了\",{\"1\":{\"1136\":1,\"4169\":1}}],[\"对同一字段的多次读取结果都是一致的\",{\"1\":{\"1094\":1,\"4127\":1}}],[\"对请求消息进行数据格式化\",{\"1\":{\"1062\":1,\"4095\":1}}],[\"对请求消息进行数据转换\",{\"1\":{\"1061\":1,\"4094\":1}}],[\"对请求\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"对外提供⼀个公共的⽅法获取实例\",{\"1\":{\"820\":1,\"4029\":1}}],[\"对外提供⼀个静态公有方法获取实例\",{\"1\":{\"818\":1,\"4027\":1}}],[\"对任何一棵二叉树\",{\"1\":{\"646\":1}}],[\"对类进行link操作\",{\"1\":{\"421\":1,\"3878\":1}}],[\"对象存储可提供更好的数据保护\",{\"1\":{\"3504\":1,\"5773\":1}}],[\"对象锁或类锁内部有计数器\",{\"1\":{\"3248\":1,\"4478\":1}}],[\"对象锁的的拥有者线程才可以执行\",{\"1\":{\"3171\":1,\"4516\":1}}],[\"对象确实会造成内存泄露\",{\"1\":{\"3201\":1}}],[\"对象调用set方法设置的值\",{\"1\":{\"3197\":1,\"4541\":1}}],[\"对象调用newinstance\",{\"1\":{\"504\":1,\"3955\":1}}],[\"对象为\",{\"1\":{\"3195\":1,\"4539\":1}}],[\"对象监视器\",{\"1\":{\"3167\":1,\"4512\":1}}],[\"对象id\",{\"1\":{\"2949\":1,\"5327\":1}}],[\"对象分配的连接加入\",{\"1\":{\"1500\":1,\"1668\":1,\"1836\":1,\"2004\":1,\"4927\":1}}],[\"对象将\",{\"1\":{\"1500\":1,\"1668\":1,\"1836\":1,\"2004\":1,\"4927\":1}}],[\"对象中的\",{\"1\":{\"1499\":1,\"1667\":1,\"1835\":1,\"2003\":1,\"4926\":1}}],[\"对象中依赖\",{\"1\":{\"1128\":1,\"4161\":1}}],[\"对象承担所有事件的监听和响应\",{\"1\":{\"1493\":1,\"1661\":1,\"1829\":1,\"1997\":1,\"4920\":1}}],[\"对象就进行业务处理\",{\"1\":{\"1486\":1,\"1654\":1,\"1822\":1,\"1990\":1,\"4913\":1}}],[\"对象不再负责业务处理\",{\"1\":{\"1485\":1,\"1653\":1,\"1821\":1,\"1989\":1,\"4912\":1}}],[\"对象来进行响应\",{\"1\":{\"1468\":1,\"1483\":1,\"1501\":1,\"1636\":1,\"1651\":1,\"1669\":1,\"1804\":1,\"1819\":1,\"1837\":1,\"1972\":1,\"1987\":1,\"2005\":1,\"4895\":1,\"4910\":1,\"4928\":1}}],[\"对象来处理后续的响应事件\",{\"1\":{\"1467\":1,\"1482\":1,\"1635\":1,\"1650\":1,\"1803\":1,\"1818\":1,\"1971\":1,\"1986\":1,\"4894\":1,\"4909\":1}}],[\"对象进行业务处理\",{\"1\":{\"1485\":1,\"1653\":1,\"1821\":1,\"1989\":1,\"4912\":1}}],[\"对象进行处理\",{\"1\":{\"1467\":1,\"1482\":1,\"1635\":1,\"1650\":1,\"1803\":1,\"1818\":1,\"1971\":1,\"1986\":1,\"4894\":1,\"4909\":1}}],[\"对象进行分页\",{\"1\":{\"1212\":1,\"4245\":1}}],[\"对象还是\",{\"1\":{\"1466\":1,\"1481\":1,\"1634\":1,\"1649\":1,\"1802\":1,\"1817\":1,\"1970\":1,\"1985\":1,\"4893\":1,\"4908\":1}}],[\"对象通过\",{\"1\":{\"1466\":1,\"1469\":1,\"1481\":1,\"1485\":1,\"1499\":1,\"1502\":1,\"1634\":1,\"1637\":1,\"1649\":1,\"1653\":1,\"1667\":1,\"1670\":1,\"1802\":1,\"1805\":1,\"1817\":1,\"1821\":1,\"1835\":1,\"1838\":1,\"1970\":1,\"1973\":1,\"1985\":1,\"1989\":1,\"2003\":1,\"2006\":1,\"4893\":1,\"4896\":1,\"4908\":1,\"4912\":1,\"4926\":1,\"4929\":1}}],[\"对象里的\",{\"1\":{\"1464\":1,\"1632\":1,\"1800\":1,\"1968\":1,\"4891\":1}}],[\"对象保存到缓存中\",{\"1\":{\"1137\":1,\"4170\":1}}],[\"对象的话\",{\"1\":{\"3197\":1,\"4541\":1}}],[\"对象的作用是处理业务\",{\"1\":{\"1463\":1,\"1631\":1,\"1799\":1,\"1967\":1,\"4890\":1}}],[\"对象的作用是获取连接\",{\"1\":{\"1462\":1,\"1630\":1,\"1798\":1,\"1966\":1,\"4889\":1}}],[\"对象的作用是监听和分发事件\",{\"1\":{\"1461\":1,\"1629\":1,\"1797\":1,\"1965\":1,\"4888\":1}}],[\"对象的形式返回\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"对象的分配过程\",{\"0\":{\"261\":1}}],[\"对象对应的拦截器\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"对象以及\",{\"1\":{\"1057\":1,\"4090\":1}}],[\"对象\",{\"1\":{\"396\":1,\"494\":1,\"496\":1,\"498\":1,\"500\":1,\"742\":1,\"826\":1,\"1064\":1,\"1069\":1,\"1221\":1,\"1466\":1,\"1481\":1,\"1486\":1,\"1634\":1,\"1649\":1,\"1654\":1,\"1802\":1,\"1817\":1,\"1822\":1,\"1970\":1,\"1985\":1,\"1990\":1,\"3211\":1,\"3851\":1,\"3945\":1,\"3947\":1,\"3949\":1,\"3951\":1,\"4035\":1,\"4097\":1,\"4102\":1,\"4254\":1,\"4335\":1,\"4893\":1,\"4908\":1,\"4913\":1}}],[\"对象会调用当前连接对应的\",{\"1\":{\"1501\":1,\"1669\":1,\"1837\":1,\"2005\":1,\"4928\":1}}],[\"对象会通过\",{\"1\":{\"1467\":1,\"1482\":1,\"1635\":1,\"1650\":1,\"1803\":1,\"1818\":1,\"1971\":1,\"1986\":1,\"4894\":1,\"4909\":1}}],[\"对象会直接被分配到老年代\",{\"1\":{\"260\":1}}],[\"对象会被优先分配到新生代的\",{\"1\":{\"255\":1}}],[\"对象年龄都会+1\",{\"1\":{\"259\":1}}],[\"对象在业务处理时\",{\"1\":{\"1473\":1,\"1641\":1,\"1809\":1,\"1977\":1,\"4900\":1}}],[\"对象在\",{\"1\":{\"259\":1}}],[\"对象在堆中的生命周期\",{\"0\":{\"252\":1}}],[\"对象实例\",{\"1\":{\"243\":1}}],[\"对于数据丢失不敏感\",{\"1\":{\"3537\":1,\"5806\":1}}],[\"对于变量存在多线程并发竞争\",{\"1\":{\"3474\":1,\"5743\":1}}],[\"对于取得的最终效果讲一下\",{\"1\":{\"3436\":1}}],[\"对于store\",{\"1\":{\"3146\":1,\"4458\":1}}],[\"对于load\",{\"1\":{\"3145\":1,\"4457\":1}}],[\"对于其他线程是不见的\",{\"1\":{\"3137\":1,\"4450\":1}}],[\"对于当前事务也是不可见的\",{\"1\":{\"2865\":1,\"5243\":1}}],[\"对于频繁被连接查询的字段\",{\"1\":{\"2663\":1,\"5041\":1}}],[\"对于外键列并不一定要建立外键\",{\"1\":{\"2663\":1,\"5041\":1}}],[\"对于很多网站来说\",{\"1\":{\"2214\":1,\"2229\":1,\"2244\":1,\"2257\":1,\"2270\":1,\"2285\":1,\"5521\":1,\"5544\":1}}],[\"对于命令的处理是单进程的方案\",{\"1\":{\"1475\":1,\"1643\":1,\"1811\":1,\"1979\":1,\"4902\":1}}],[\"对于支持网卡支持\",{\"1\":{\"1422\":1,\"1590\":1,\"1758\":1,\"1926\":1,\"4849\":1}}],[\"对于就绪的事件\",{\"1\":{\"1384\":1,\"1552\":1,\"1720\":1,\"1888\":1,\"4811\":1}}],[\"对于每个pid发送数据的每个topic都对应一个从0开始单调递增的sn值\",{\"1\":{\"1302\":1,\"5494\":1}}],[\"对于每一个topic\",{\"1\":{\"1269\":1,\"5461\":1}}],[\"对于一个负数取模还是有些麻烦的\",{\"1\":{\"996\":1}}],[\"对于一个默认的hashmap来说\",{\"1\":{\"941\":1}}],[\"对于一个类加载器来说\",{\"1\":{\"399\":1,\"3854\":1}}],[\"对于我们理解和学习各种框架的原理也非常有帮助\",{\"1\":{\"846\":1,\"4055\":1}}],[\"对于arraylist\",{\"1\":{\"708\":1}}],[\"对于二叉搜索树\",{\"1\":{\"658\":1,\"3999\":1}}],[\"对于队列\",{\"1\":{\"600\":1}}],[\"对于链表来说\",{\"1\":{\"599\":1}}],[\"对于已经正式发布的代码\",{\"1\":{\"563\":1}}],[\"对于已经加载的类会被放在\",{\"1\":{\"399\":1,\"3854\":1}}],[\"对于现实中并不存在的设计对象\",{\"1\":{\"557\":1}}],[\"对于任意一个对象\",{\"1\":{\"477\":1,\"3928\":1}}],[\"对于任意一个类\",{\"1\":{\"477\":1,\"3928\":1}}],[\"对于单个\",{\"1\":{\"348\":1}}],[\"对于大多数应用\",{\"1\":{\"223\":1}}],[\"对于\",{\"1\":{\"126\":1,\"2632\":1,\"2654\":1,\"2705\":1,\"2850\":1,\"2851\":1,\"2852\":1,\"3201\":1,\"3780\":1,\"5010\":1,\"5032\":1,\"5083\":1,\"5228\":1,\"5229\":1,\"5230\":1}}],[\"对\",{\"1\":{\"39\":1,\"272\":1,\"2371\":1,\"3208\":1,\"3693\":1,\"4332\":1}}],[\"为变量设置threadlocal\",{\"1\":{\"3476\":1,\"5745\":1}}],[\"为空\",{\"1\":{\"2864\":1,\"5242\":1}}],[\"为何能够通过\",{\"1\":{\"2588\":1,\"4966\":1}}],[\"为短连接\",{\"1\":{\"2504\":1,\"5602\":1}}],[\"为该映射关系的生存周期\",{\"1\":{\"2471\":1,\"5569\":1}}],[\"为啥叫权威呢\",{\"1\":{\"2541\":1,\"5639\":1}}],[\"为啥不可能选择\",{\"1\":{\"2158\":1,\"4763\":1}}],[\"为啥要定义这两个变量\",{\"1\":{\"922\":1}}],[\"为我们提供了高可用\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"为我们提供了自定义缓存\",{\"1\":{\"1230\":1,\"4263\":1}}],[\"为微服务架构提供了非常完整的支持\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"为需要拦截的接口生成代理对象以实现接口方法拦截功能\",{\"1\":{\"1217\":1,\"4250\":1}}],[\"为o\",{\"1\":{\"686\":1,\"718\":1,\"719\":1,\"725\":1,\"733\":2,\"734\":1,\"905\":1,\"1038\":1}}],[\"为\",{\"1\":{\"421\":1,\"1221\":2,\"2125\":1,\"2141\":1,\"2788\":1,\"2864\":1,\"3545\":1,\"3878\":1,\"4254\":2,\"4730\":1,\"4746\":1,\"5166\":1,\"5242\":1,\"5814\":1}}],[\"为类的二进制名称\",{\"1\":{\"408\":1,\"3863\":1}}],[\"为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知\",{\"1\":{\"321\":1}}],[\"为避免多个线程操作同一地址\",{\"1\":{\"275\":1}}],[\"为什么选用redis作为消息队列\",{\"1\":{\"3532\":1,\"5801\":1}}],[\"为什么不推荐使用内置线程池\",{\"0\":{\"4593\":1}}],[\"为什么不需要预加载\",{\"1\":{\"3525\":1,\"5794\":1}}],[\"为什么不改\",{\"0\":{\"562\":1}}],[\"为什么redis中使用两种数据类型\",{\"1\":{\"3523\":1,\"5792\":1}}],[\"为什么任务需要存储在数据库中\",{\"1\":{\"3521\":1,\"5790\":1}}],[\"为什么呢\",{\"1\":{\"3338\":1,\"4595\":1}}],[\"为什么会出现误判的情况呢\",{\"1\":{\"3024\":1,\"5402\":1}}],[\"为什么这么快\",{\"0\":{\"2907\":1,\"5285\":1}}],[\"为什么这里不像上面那样\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"为什么线程\",{\"1\":{\"2737\":1,\"5115\":1}}],[\"为什么挥手需要四次\",{\"1\":{\"2315\":1}}],[\"为什么每次建立\",{\"1\":{\"2306\":1}}],[\"为什么是三次握手\",{\"1\":{\"2305\":1}}],[\"为什么需要\",{\"1\":{\"2296\":1,\"2321\":1}}],[\"为什么需要http\",{\"1\":{\"2207\":1,\"2222\":1,\"2237\":1,\"2250\":1,\"2263\":1,\"2278\":1,\"5513\":1,\"5538\":1}}],[\"为什么需要红黑树\",{\"0\":{\"657\":1,\"3998\":1}}],[\"为什么就要使用spring\",{\"1\":{\"2060\":1,\"4665\":1}}],[\"为什么叫控制反转\",{\"1\":{\"1048\":1,\"4081\":1}}],[\"为什么可以使用位运算\",{\"1\":{\"970\":1}}],[\"为什么单链表转为红黑树要求桶内的元素个数大于8\",{\"0\":{\"878\":1,\"3986\":1}}],[\"为什么数组容量必须是2次幂\",{\"0\":{\"876\":1,\"3984\":1}}],[\"为什么在长度小于8时使用链表\",{\"0\":{\"872\":1,\"3980\":1}}],[\"为什么jdk1\",{\"0\":{\"867\":1,\"870\":1,\"3975\":1,\"3978\":1}}],[\"为什么java\",{\"1\":{\"768\":1}}],[\"为什么要用线程池\",{\"0\":{\"4543\":1}}],[\"为什么要对密码加密\",{\"1\":{\"3593\":1}}],[\"为什么要设置奇数个结点\",{\"1\":{\"2130\":1,\"4735\":1}}],[\"为什么要保证顺序\",{\"0\":{\"1306\":1,\"5498\":1}}],[\"为什么要分区\",{\"1\":{\"1255\":1,\"5447\":1}}],[\"为什么要使用红黑树而不使用avl树\",{\"0\":{\"874\":1,\"3982\":1}}],[\"为什么要进⾏双重判断\",{\"1\":{\"821\":1,\"4030\":1}}],[\"为什么要有\",{\"0\":{\"271\":1}}],[\"为什么\",{\"0\":{\"746\":1,\"2423\":1},\"1\":{\"595\":1,\"2308\":1,\"2320\":1,\"2406\":1,\"2408\":1,\"2589\":1,\"4967\":1}}],[\"为什么使用接口\",{\"0\":{\"566\":1}}],[\"为什么使用pc寄存器记录当前线程的执行地址呢\",{\"1\":{\"192\":1}}],[\"为对象分配内存是一件非常严谨和复杂的任务\",{\"1\":{\"262\":1}}],[\"为了防止阻塞\",{\"1\":{\"3526\":1,\"5795\":1}}],[\"为了避免出现内存泄露的情况\",{\"1\":{\"3202\":1}}],[\"为了达成这一目标\",{\"1\":{\"2478\":1,\"5576\":1}}],[\"为了检验对这些知识掌握的深度\",{\"1\":{\"2293\":1}}],[\"为了克服这个缺点\",{\"1\":{\"1365\":1,\"1533\":1,\"1701\":1,\"1869\":1,\"4792\":1}}],[\"为了实现进程\",{\"1\":{\"1359\":1,\"1527\":1,\"1695\":1,\"1863\":1,\"4786\":1}}],[\"为了保证数据的并发安全\",{\"1\":{\"3265\":1,\"4493\":1}}],[\"为了保证\",{\"1\":{\"2158\":1,\"4763\":1}}],[\"为了保证相同的键\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"为了保证哈希的结果可以分散\",{\"1\":{\"1031\":1}}],[\"为了按键有序\",{\"1\":{\"1037\":1}}],[\"为了提高哈希的效率\",{\"1\":{\"1031\":1}}],[\"为了解决在频繁冲突时hashmap性能降低的问题\",{\"1\":{\"1017\":1}}],[\"为了解决这个问题\",{\"1\":{\"857\":1,\"4066\":1}}],[\"为了考虑性能\",{\"1\":{\"983\":1}}],[\"为了有序\",{\"1\":{\"686\":1}}],[\"为了修正这个问题\",{\"1\":{\"580\":1}}],[\"为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录\",{\"1\":{\"379\":1}}],[\"为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录\",{\"1\":{\"366\":1}}],[\"为了进行高效的垃圾回收\",{\"1\":{\"224\":1}}],[\"为了能够准确的记录各个线程正在执行的当前字节码指令地址\",{\"1\":{\"195\":1}}],[\"为了丰富文档写作\",{\"1\":{\"39\":1,\"3693\":1}}],[\"为每个topic维护了一个atomicinteger对象\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"为每个已加载的类型\",{\"1\":{\"289\":1}}],[\"为每个线程分配了一个私有缓存区域\",{\"1\":{\"272\":1}}],[\"为每个\",{\"1\":{\"33\":1,\"3687\":1}}],[\"是怎么实现的\",{\"1\":{\"3417\":1,\"5697\":1}}],[\"是怎么对这批\",{\"1\":{\"2992\":1,\"5370\":1}}],[\"是cas操作的核心\",{\"1\":{\"3255\":1,\"4484\":1}}],[\"是指在同一个线程在调外层方法获取锁的时候\",{\"1\":{\"3247\":1,\"4477\":1}}],[\"是指事务操作前和操作后\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"是比较并交换的意思\",{\"1\":{\"3095\":1,\"4371\":1}}],[\"是将每条请求共享资源的线程封装成一个\",{\"1\":{\"3071\":1,\"4425\":1}}],[\"是用\",{\"1\":{\"3070\":1,\"4424\":1}}],[\"是用来控制选择用\",{\"1\":{\"2762\":1,\"5140\":1}}],[\"是安全的\",{\"1\":{\"2922\":1,\"5300\":1}}],[\"是查询不出来这条数据的\",{\"1\":{\"2847\":1,\"5225\":1}}],[\"是通过\",{\"1\":{\"2847\":1,\"2848\":1,\"5225\":1,\"5226\":1}}],[\"是通过索引访问的\",{\"1\":{\"289\":1}}],[\"是还没提交事务的\",{\"1\":{\"2819\":1,\"5197\":1}}],[\"是包含间隙锁+记录锁的\",{\"1\":{\"2793\":1,\"5171\":1}}],[\"是性能最高的方式\",{\"1\":{\"2768\":1,\"5146\":1}}],[\"是无锁的\",{\"1\":{\"2745\":1,\"5123\":1}}],[\"是无法保证原子性的\",{\"1\":{\"3123\":1,\"4405\":1}}],[\"是无法读出一个有效的用户消息的\",{\"1\":{\"2353\":1}}],[\"是无法做数据分片的\",{\"1\":{\"2199\":1,\"4321\":1}}],[\"是在\",{\"1\":{\"3107\":1,\"4389\":1}}],[\"是在事务提交后才会释放\",{\"1\":{\"2731\":1,\"5109\":1}}],[\"是在return前还是return后\",{\"1\":{\"460\":1}}],[\"是为了保证当用户对表执行\",{\"1\":{\"2727\":1,\"5105\":1}}],[\"是为了区分同一个主机上不同应用程序的数据包\",{\"1\":{\"2412\":1}}],[\"是会被阻塞的\",{\"1\":{\"2717\":1,\"2793\":1,\"5095\":1,\"5171\":1}}],[\"是会根据\",{\"1\":{\"2119\":1,\"4724\":1}}],[\"是目前搜索引擎数据库使用的一种技术\",{\"1\":{\"2628\":1,\"5006\":1}}],[\"是因为二级索引的叶子节点存储的数据是主键\",{\"1\":{\"2622\":1,\"5000\":1}}],[\"是因理想情况下一个bin中元素个数达到6的概率是0\",{\"1\":{\"880\":1,\"3988\":1}}],[\"是数据表的主键\",{\"1\":{\"2599\":1,\"4977\":1}}],[\"是啥\",{\"1\":{\"2536\":1,\"5634\":1}}],[\"是运行在\",{\"1\":{\"2521\":1,\"5619\":1}}],[\"是基于\",{\"1\":{\"2514\":1,\"3168\":1,\"4513\":1,\"5612\":1}}],[\"是面向连接\",{\"1\":{\"2398\":1}}],[\"是面向连接的传输层协议\",{\"1\":{\"2377\":1}}],[\"是面向连接的\",{\"1\":{\"2349\":1}}],[\"是有边界的\",{\"1\":{\"2393\":1}}],[\"是有能力在数组中的任何位置添加或者删除元素的\",{\"1\":{\"542\":1}}],[\"是流式传输\",{\"1\":{\"2392\":1}}],[\"是尽最大努力交付\",{\"1\":{\"2384\":1}}],[\"是可靠交付数据的\",{\"1\":{\"2383\":1}}],[\"是要优先保证\",{\"1\":{\"2200\":1,\"4322\":1}}],[\"是前提\",{\"1\":{\"2155\":1,\"4760\":1}}],[\"是否相等\",{\"1\":{\"3637\":1}}],[\"是否开启access\",{\"1\":{\"3571\":1}}],[\"是否有效再进行处理\",{\"1\":{\"3558\":1,\"5827\":1}}],[\"是否有事务已经对表加上了\",{\"1\":{\"2739\":1,\"5117\":1}}],[\"是否合法\",{\"1\":{\"3021\":1,\"5399\":1}}],[\"是否支持\",{\"1\":{\"2577\":1,\"4955\":1}}],[\"是否支持数据库异常崩溃后的安全恢复\",{\"1\":{\"2574\":1,\"4952\":1}}],[\"是否支持外键\",{\"1\":{\"2570\":1,\"4948\":1}}],[\"是否支持事务\",{\"1\":{\"2567\":1,\"4945\":1}}],[\"是否支持行级锁\",{\"1\":{\"2564\":1,\"4942\":1}}],[\"是否同意更新\",{\"1\":{\"2117\":1,\"4722\":1}}],[\"是否只读\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"是协调服务的典型场景\",{\"1\":{\"2097\":1,\"4702\":1}}],[\"是世界领先的软件容器平台\",{\"1\":{\"2014\":1,\"4619\":1}}],[\"是分发事件操作\",{\"1\":{\"1464\":1,\"1632\":1,\"1800\":1,\"1968\":1,\"4891\":1}}],[\"是需要完成的操作\",{\"1\":{\"1464\":1,\"1632\":1,\"1800\":1,\"1968\":1,\"4891\":1}}],[\"是系统调用函数\",{\"1\":{\"1464\":1,\"1632\":1,\"1800\":1,\"1968\":1,\"4891\":1}}],[\"是如何随机产生的\",{\"0\":{\"2422\":1},\"1\":{\"2307\":1}}],[\"是如何进行初始化选举的\",{\"1\":{\"2123\":1,\"4728\":1}}],[\"是如何进行分页的\",{\"0\":{\"1210\":1,\"4243\":1}}],[\"是如何获取网络事件的呢\",{\"1\":{\"1376\":1,\"1544\":1,\"1712\":1,\"1880\":1,\"4803\":1}}],[\"是这种机制\",{\"1\":{\"1356\":1,\"1524\":1,\"1692\":1,\"1860\":1,\"4783\":1}}],[\"是符合我们上面提到的时间局部性\",{\"1\":{\"1335\":1}}],[\"是不合理的\",{\"1\":{\"3015\":1,\"5393\":1}}],[\"是不影响其他消费者购买的\",{\"1\":{\"2808\":1,\"5186\":1}}],[\"是不会加行级锁的\",{\"1\":{\"2745\":1,\"5123\":1}}],[\"是不需要连接\",{\"1\":{\"2378\":1}}],[\"是不是也需要\",{\"1\":{\"2116\":1,\"4721\":1}}],[\"是不是把t1p1交给c1消费能更加的均衡呢\",{\"1\":{\"1284\":1,\"5476\":1}}],[\"是不能自动唤醒的\",{\"1\":{\"1347\":1,\"1515\":1,\"1683\":1,\"1851\":1,\"4774\":1}}],[\"是不能解决循环依赖的问题的\",{\"1\":{\"1124\":1,\"4157\":1}}],[\"是多个\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"是servlet的监听器\",{\"1\":{\"1172\":1,\"4205\":1}}],[\"是必须的\",{\"1\":{\"1137\":1,\"4170\":1}}],[\"是什么玩意\",{\"1\":{\"2131\":1,\"4736\":1}}],[\"是什么意思呢\",{\"1\":{\"969\":1}}],[\"是什么类\",{\"1\":{\"540\":1}}],[\"是16\",{\"1\":{\"928\":1}}],[\"是⼀种结构性模式\",{\"1\":{\"835\":1,\"4044\":1}}],[\"是list\",{\"1\":{\"704\":1}}],[\"是哈希表实现的\",{\"1\":{\"698\":1}}],[\"是二叉树实现的\",{\"1\":{\"697\":1}}],[\"是二叉树的根\",{\"1\":{\"649\":1}}],[\"是树的整体性质\",{\"1\":{\"639\":1}}],[\"是相对定义的\",{\"1\":{\"623\":1}}],[\"是n\",{\"1\":{\"612\":1}}],[\"是非常慢的\",{\"1\":{\"599\":1}}],[\"是继承了\",{\"1\":{\"587\":1}}],[\"是双端队列的意思\",{\"1\":{\"582\":1}}],[\"是一款程序员可以嵌入他们所开发产品的组件\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"是一款模板引擎\",{\"1\":{\"3501\":1,\"5770\":1}}],[\"是一条\",{\"1\":{\"3106\":1,\"3127\":1,\"4388\":1,\"4409\":1}}],[\"是一直持有的\",{\"1\":{\"2731\":1,\"5109\":1}}],[\"是一对一的两点服务\",{\"1\":{\"2380\":1}}],[\"是一定要满足的\",{\"1\":{\"2156\":1,\"4761\":1}}],[\"是一件非常困难的事\",{\"1\":{\"2054\":1,\"4659\":1}}],[\"是一项独立的容器管理包\",{\"1\":{\"2027\":1,\"4632\":1}}],[\"是一种系统原语\",{\"1\":{\"3106\":1,\"4388\":1}}],[\"是一种设计思想\",{\"1\":{\"1047\":1,\"4080\":1}}],[\"是一种高效的查找树\",{\"1\":{\"656\":1,\"3997\":1}}],[\"是一致的\",{\"1\":{\"572\":1}}],[\"是一个新闻资讯类项目\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"是一个可重入且独占式的锁\",{\"1\":{\"3213\":1,\"4337\":1}}],[\"是一个可改变大小的数组\",{\"1\":{\"739\":1}}],[\"是一个包一个包的发送\",{\"1\":{\"2393\":1}}],[\"是一个包装类\",{\"1\":{\"706\":1}}],[\"是一个工作在传输层的可靠数据传输的服务\",{\"1\":{\"2347\":1}}],[\"是一个开源的分布式协调服务\",{\"1\":{\"2095\":1,\"4700\":1}}],[\"是一个声明web服务客户端\",{\"1\":{\"2085\":1,\"4690\":1}}],[\"是一个双链表\",{\"1\":{\"740\":1}}],[\"是一个集合接口\",{\"1\":{\"704\":1}}],[\"是一个\",{\"1\":{\"548\":1,\"2019\":1,\"4624\":1}}],[\"是发动机这个类的对象\",{\"1\":{\"552\":1}}],[\"是被业界一直认为非常糟糕的实现\",{\"1\":{\"546\":1}}],[\"是的\",{\"1\":{\"533\":1}}],[\"是runtimeexception以外的异常\",{\"1\":{\"439\":1,\"3898\":1}}],[\"是由\",{\"1\":{\"395\":1,\"1475\":1,\"1643\":1,\"1811\":1,\"1979\":1,\"2453\":1,\"2546\":1,\"3850\":1,\"4902\":1,\"5551\":1}}],[\"是方法区的一部分\",{\"1\":{\"281\":1}}],[\"是所有线程共享的内存区域\",{\"1\":{\"279\":1}}],[\"是线程私有的\",{\"1\":{\"198\":1}}],[\"是\",{\"1\":{\"35\":1,\"282\":1,\"288\":1,\"352\":1,\"358\":1,\"360\":1,\"596\":1,\"1132\":1,\"1396\":1,\"1564\":1,\"1732\":1,\"1900\":1,\"2453\":1,\"2493\":1,\"2546\":1,\"2562\":1,\"2591\":1,\"2656\":1,\"2791\":1,\"3113\":1,\"3127\":1,\"3207\":2,\"3400\":1,\"3689\":1,\"4165\":1,\"4331\":2,\"4395\":1,\"4409\":1,\"4823\":1,\"4940\":1,\"4969\":1,\"5034\":1,\"5169\":1,\"5551\":1,\"5591\":1,\"5680\":1}}],[\"和其他的几个策略不同\",{\"1\":{\"3305\":1,\"4570\":1}}],[\"和非公平锁\",{\"1\":{\"3215\":1,\"4339\":1}}],[\"和内存地址\",{\"1\":{\"3102\":1,\"3103\":1,\"4383\":1,\"4385\":1}}],[\"和我们认识的\",{\"1\":{\"2919\":1,\"5297\":1}}],[\"和用户\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"和独占表锁\",{\"1\":{\"2748\":1,\"5126\":1}}],[\"和回滚\",{\"1\":{\"2569\":1,\"4947\":1}}],[\"和表级锁\",{\"1\":{\"2565\":1,\"4943\":1}}],[\"和接收主机\",{\"1\":{\"2488\":1,\"5586\":1}}],[\"和端口是可变的\",{\"1\":{\"2369\":1}}],[\"和一开始选举一样\",{\"1\":{\"2129\":1,\"4734\":1}}],[\"和介绍\",{\"1\":{\"2110\":1,\"4715\":1}}],[\"和处理资源池这两个核心部分组成\",{\"1\":{\"1435\":1,\"1603\":1,\"1771\":1,\"1939\":1,\"4862\":1}}],[\"和普通的\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"和自动配置一样\",{\"1\":{\"1181\":1,\"4214\":1}}],[\"和hashmap有何不同\",{\"1\":{\"998\":1}}],[\"和int\",{\"1\":{\"963\":1}}],[\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐\",{\"1\":{\"828\":1,\"4037\":1}}],[\"和arraylist类似\",{\"1\":{\"742\":1}}],[\"和o\",{\"1\":{\"658\":1,\"3999\":1}}],[\"和树的结构\",{\"1\":{\"615\":1}}],[\"和底层数据结构的具体实现\",{\"1\":{\"573\":1}}],[\"和动态数组这种数据结构之间\",{\"1\":{\"555\":1}}],[\"和错误\",{\"1\":{\"445\":1,\"3904\":1}}],[\"和不可查的异常\",{\"0\":{\"440\":1,\"3899\":1}}],[\"和卸载\",{\"1\":{\"386\":1,\"3839\":1}}],[\"和大内存的场景下有很好的性能\",{\"1\":{\"373\":1}}],[\"和使用过的那一块\",{\"1\":{\"334\":1}}],[\"和新生代\",{\"1\":{\"283\":1}}],[\"和两个幸存区\",{\"1\":{\"231\":1}}],[\"和\",{\"0\":{\"923\":1,\"935\":1,\"2373\":1,\"2375\":1,\"2397\":1,\"2410\":1,\"2503\":1,\"2508\":1,\"2513\":1,\"2518\":1,\"2559\":1,\"4937\":1,\"5601\":1,\"5606\":1,\"5611\":1,\"5616\":1},\"1\":{\"31\":1,\"121\":1,\"229\":1,\"243\":1,\"247\":1,\"254\":2,\"334\":1,\"335\":1,\"344\":1,\"546\":1,\"557\":1,\"572\":2,\"578\":1,\"592\":1,\"641\":1,\"961\":1,\"1031\":1,\"1066\":1,\"1142\":1,\"1155\":1,\"1183\":1,\"1335\":1,\"1386\":1,\"1393\":1,\"1402\":1,\"1418\":1,\"1419\":1,\"1464\":1,\"1554\":1,\"1561\":1,\"1570\":1,\"1586\":1,\"1587\":1,\"1632\":1,\"1722\":1,\"1729\":1,\"1738\":1,\"1754\":1,\"1755\":1,\"1800\":1,\"1890\":1,\"1897\":1,\"1906\":1,\"1922\":1,\"1923\":1,\"1968\":1,\"2099\":1,\"2114\":1,\"2116\":1,\"2117\":2,\"2124\":1,\"2129\":1,\"2134\":1,\"2139\":1,\"2155\":1,\"2160\":1,\"2300\":1,\"2301\":1,\"2413\":1,\"2416\":1,\"2569\":1,\"2594\":1,\"2602\":1,\"2673\":1,\"2807\":1,\"2818\":1,\"2823\":1,\"2827\":1,\"2852\":1,\"2854\":1,\"2872\":1,\"2899\":1,\"2904\":1,\"2918\":1,\"2962\":1,\"3123\":1,\"3144\":1,\"3165\":1,\"3178\":1,\"3186\":1,\"3191\":1,\"3213\":1,\"3249\":1,\"3260\":1,\"3309\":1,\"3311\":1,\"3342\":1,\"3344\":1,\"3388\":1,\"3627\":1,\"3629\":1,\"3631\":1,\"3633\":1,\"3634\":1,\"3635\":1,\"3637\":1,\"3685\":1,\"3775\":1,\"4099\":1,\"4175\":1,\"4188\":1,\"4216\":1,\"4337\":1,\"4405\":1,\"4456\":1,\"4479\":1,\"4488\":1,\"4510\":1,\"4523\":1,\"4531\":1,\"4535\":1,\"4574\":1,\"4576\":1,\"4599\":1,\"4601\":1,\"4704\":1,\"4719\":1,\"4721\":1,\"4722\":2,\"4729\":1,\"4734\":1,\"4739\":1,\"4744\":1,\"4760\":1,\"4765\":1,\"4813\":1,\"4820\":1,\"4829\":1,\"4845\":1,\"4846\":1,\"4891\":1,\"4947\":1,\"4972\":1,\"4980\":1,\"5051\":1,\"5185\":1,\"5196\":1,\"5201\":1,\"5205\":1,\"5230\":1,\"5232\":1,\"5250\":1,\"5277\":1,\"5282\":1,\"5296\":1,\"5340\":1,\"5668\":1}}],[\"介绍公司\",{\"1\":{\"3366\":1,\"5646\":1}}],[\"介绍下\",{\"1\":{\"1465\":1,\"1633\":1,\"1801\":1,\"1969\":1,\"4892\":1}}],[\"介绍\",{\"0\":{\"30\":1,\"159\":1,\"167\":1,\"3684\":1,\"3808\":1,\"3816\":1,\"3847\":1},\"1\":{\"31\":1,\"35\":1,\"3685\":1,\"3689\":1}}],[\"你也不能想当然地认为它们俩对应的原文也非常相似\",{\"1\":{\"3586\":1}}],[\"你访问一次\",{\"1\":{\"3572\":1}}],[\"你怎么判断谁大谁小\",{\"1\":{\"3442\":1}}],[\"你是用md5做的\",{\"1\":{\"3437\":1}}],[\"你是如何设计的\",{\"0\":{\"2170\":1,\"4292\":1}}],[\"你平常也这样扎头发吗\",{\"1\":{\"3431\":1,\"5711\":1}}],[\"你有实际的项目经验吗\",{\"1\":{\"3419\":1,\"5699\":1}}],[\"你来就是java\",{\"1\":{\"3408\":1,\"5688\":1}}],[\"你他妈的非得问\",{\"1\":{\"3380\":1,\"5660\":1}}],[\"你知道有什么方法对线程池进行预热吗\",{\"1\":{\"3348\":1,\"4606\":1}}],[\"你能说一下有哪些问题吗\",{\"1\":{\"3418\":1,\"5698\":1}}],[\"你能说出几个需要重写的方法吗\",{\"0\":{\"3079\":1,\"4435\":1}}],[\"你能告诉我\",{\"1\":{\"2539\":1,\"5637\":1}}],[\"你去问它应该能问到\",{\"1\":{\"2540\":1,\"5638\":1}}],[\"你去问问它吧\",{\"1\":{\"2538\":1,\"5636\":1}}],[\"你的快递被放到了一个快递箱里\",{\"1\":{\"1390\":1,\"1558\":1,\"1726\":1,\"1894\":1,\"4817\":1}}],[\"你只需要记住这个技巧就可以了\",{\"1\":{\"977\":1}}],[\"你会发现\",{\"1\":{\"1432\":1,\"1600\":1,\"1768\":1,\"1936\":1,\"4859\":1}}],[\"你会怎么做\",{\"1\":{\"962\":1}}],[\"你会彻底理解hash方法\",{\"1\":{\"961\":1}}],[\"你通过proxy\",{\"1\":{\"854\":1,\"4063\":1}}],[\"你都能通过getmap获得\",{\"1\":{\"492\":1,\"3943\":1}}],[\"你又要改代码\",{\"1\":{\"486\":1,\"3937\":1}}],[\"你需要自定义\",{\"1\":{\"860\":1,\"4069\":1}}],[\"你需要在页面\",{\"1\":{\"151\":1,\"155\":1,\"3805\":1}}],[\"你需要阅读\",{\"1\":{\"35\":1,\"3689\":1}}],[\"你应该创建和编写\",{\"1\":{\"29\":1,\"3683\":1}}],[\"你可以专注于如何展现数据\",{\"1\":{\"3502\":1,\"5771\":1}}],[\"你可以选择这个策略\",{\"1\":{\"3302\":1,\"4567\":1}}],[\"你可以把多个变量放在一个对象里来进行cas操作\",{\"1\":{\"3125\":1,\"4407\":1}}],[\"你可以将\",{\"1\":{\"2514\":1,\"5612\":1}}],[\"你可以将图片和\",{\"1\":{\"125\":1,\"3779\":1}}],[\"你可以使用这个语法\",{\"1\":{\"454\":1,\"3913\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"28\":1,\"3682\":1}}],[\"你可以通过\",{\"1\":{\"862\":1,\"4071\":1}}],[\"你可以通过主题选项和页面\",{\"1\":{\"140\":1,\"3794\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"10\":1,\"3664\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"123\":1,\"3777\":1}}],[\"你可以在这里放置你的主体内容\",{\"1\":{\"150\":1,\"154\":1,\"3804\":1}}],[\"你可以在\",{\"1\":{\"117\":1,\"854\":1,\"3771\":1,\"4063\":1}}],[\"你可以标记\",{\"1\":{\"73\":1,\"3727\":1}}],[\"文本内容和图片\",{\"1\":{\"3508\":1,\"5777\":1}}],[\"文章查询性能\",{\"1\":{\"3557\":1,\"5826\":1}}],[\"文章数据建立索引\",{\"1\":{\"3557\":1,\"5826\":1}}],[\"文章自动审核\",{\"1\":{\"3506\":1,\"5775\":1}}],[\"文章自动审核及延迟发布\",{\"0\":{\"3505\":1,\"5774\":1},\"1\":{\"3447\":1,\"5716\":1}}],[\"文章详情静态化\",{\"1\":{\"3500\":1,\"5769\":1}}],[\"文章详情静态化及存储\",{\"0\":{\"3499\":1,\"5768\":1},\"1\":{\"3447\":1,\"5716\":1}}],[\"文章内容审核功能\",{\"1\":{\"3446\":1,\"5715\":1}}],[\"文章标题列表\",{\"1\":{\"133\":1,\"3787\":1}}],[\"文中分析基于jdk1\",{\"1\":{\"951\":1}}],[\"文档中写到\",{\"1\":{\"410\":1,\"3865\":1}}],[\"文件进行数据恢复\",{\"1\":{\"2983\":1,\"5361\":1}}],[\"文件进行重写\",{\"1\":{\"2982\":1,\"5360\":1}}],[\"文件越来越大\",{\"1\":{\"2982\":1,\"5360\":1}}],[\"文件重写\",{\"1\":{\"2982\":1,\"5360\":1}}],[\"文件同步\",{\"1\":{\"2981\":1,\"5359\":1}}],[\"文件写入\",{\"1\":{\"2980\":1,\"5358\":1}}],[\"文件的位置相同\",{\"1\":{\"2976\":1,\"5354\":1}}],[\"文件的保存位置和\",{\"1\":{\"2976\":1,\"5354\":1}}],[\"文件的一部分\",{\"1\":{\"288\":1}}],[\"文件中\",{\"1\":{\"2974\":1,\"2980\":1,\"5352\":1,\"5358\":1}}],[\"文件中除了有类的版本\",{\"1\":{\"281\":1}}],[\"文件传输\",{\"1\":{\"2399\":1}}],[\"文件传输的代码\",{\"1\":{\"1432\":1,\"1600\":1,\"1768\":1,\"1936\":1,\"4859\":1}}],[\"文件描述符\",{\"1\":{\"1376\":1,\"1544\":1,\"1712\":1,\"1880\":1,\"4803\":1}}],[\"文件呢\",{\"1\":{\"389\":1,\"3843\":1}}],[\"文件需要加载到虚拟机中之后才能运行和使用\",{\"1\":{\"389\":1,\"3843\":1}}],[\"文件常量池的另一个重要特征是\",{\"1\":{\"291\":1}}],[\"文件夹的图片\",{\"1\":{\"126\":1,\"3780\":1}}],[\"文件放置在一起\",{\"1\":{\"125\":1,\"3779\":1}}],[\"文件\",{\"1\":{\"29\":1,\"396\":1,\"405\":1,\"841\":1,\"2883\":1,\"3164\":1,\"3683\":1,\"3851\":1,\"3860\":1,\"4050\":1,\"4508\":1,\"5261\":1}}],[\"文件生成页面\",{\"1\":{\"28\":1,\"3682\":1}}],[\"文字结尾应该有深蓝色的\",{\"1\":{\"128\":1,\"3782\":1}}],[\"文字\",{\"1\":{\"25\":1,\"26\":1,\"3679\":1,\"3680\":1}}],[\"文字段落\",{\"1\":{\"25\":11,\"26\":13,\"3679\":11,\"3680\":13}}],[\"2呢\",{\"1\":{\"5535\":1}}],[\"2还没来得及全面推广\",{\"1\":{\"5535\":1}}],[\"2还是个新技术\",{\"1\":{\"2212\":1,\"2227\":1,\"2242\":1,\"2255\":1,\"2268\":1,\"2283\":1,\"5519\":1,\"5542\":1}}],[\"2留下发挥时间\",{\"1\":{\"5535\":1}}],[\"2非对称加密算法有哪些\",{\"0\":{\"3646\":1}}],[\"25d55ad283aa400af464c76d713c07ad\",{\"1\":{\"3614\":1}}],[\"253\",{\"1\":{\"83\":1,\"3737\":1}}],[\"2方式二\",{\"0\":{\"3330\":1}}],[\"2n\",{\"1\":{\"3329\":2,\"4586\":2}}],[\"2n表示2的n次方\",{\"1\":{\"973\":1}}],[\"2如何创建线程池\",{\"0\":{\"3284\":1}}],[\"2如何在\",{\"0\":{\"2419\":1}}],[\"2乐观锁\",{\"0\":{\"3244\":1}}],[\"2偏向锁\",{\"0\":{\"3223\":1}}],[\"2原理\",{\"0\":{\"3188\":1}}],[\"2synchronized\",{\"0\":{\"3172\":1}}],[\"2volatile的作用\",{\"0\":{\"3138\":1}}],[\"2自旋开销问题\",{\"0\":{\"3119\":1}}],[\"22\",{\"1\":{\"2760\":1,\"5138\":1}}],[\"2xx\",{\"1\":{\"2501\":1,\"5599\":1}}],[\"2listen\",{\"0\":{\"2445\":1}}],[\"2loadfactor\",{\"0\":{\"935\":1}}],[\"2为什么挥手需要四次\",{\"0\":{\"2430\":1}}],[\"2为什么需要\",{\"0\":{\"2345\":1}}],[\"2为什么需要虚拟内存\",{\"0\":{\"1337\":1}}],[\"2tcp\",{\"0\":{\"2397\":1}}],[\"2msl\",{\"0\":{\"2435\":1},\"1\":{\"2320\":1}}],[\"2中最核心的技术就是多路复用技术\",{\"1\":{\"2217\":1,\"2232\":1,\"2247\":1,\"2260\":1,\"2273\":1,\"2288\":1,\"5524\":1,\"5547\":1}}],[\"2的诞生\",{\"1\":{\"2217\":1,\"2232\":1,\"2247\":1,\"2260\":1,\"2273\":1,\"2288\":1,\"5524\":1,\"5547\":1}}],[\"2有了一定的基本了解\",{\"1\":{\"2216\":1,\"2231\":1,\"2246\":1,\"2259\":1,\"2272\":1,\"2287\":1,\"5523\":1,\"5546\":1}}],[\"2标准在2015年5月就以rfc\",{\"1\":{\"2210\":1,\"2225\":1,\"2240\":1,\"2253\":1,\"2266\":1,\"2281\":1,\"5517\":1,\"5540\":1}}],[\"2标记\",{\"0\":{\"329\":1}}],[\"2~default~blogcommendfrombaidu~rate\",{\"1\":{\"1304\":2,\"5496\":2}}],[\"2~default~baidujs\",{\"1\":{\"1295\":1,\"5487\":1}}],[\"2101\",{\"1\":{\"1295\":1,\"1304\":1,\"5487\":1,\"5496\":1}}],[\"2147483647\",{\"1\":{\"996\":1}}],[\"2147483648\",{\"1\":{\"996\":1}}],[\"23的主机\",{\"1\":{\"2476\":1,\"5574\":1}}],[\"235^v28^pc\",{\"1\":{\"1295\":1,\"1304\":2,\"5487\":1,\"5496\":2}}],[\"230\",{\"1\":{\"83\":1,\"3737\":1}}],[\"29\",{\"1\":{\"1006\":1}}],[\"2^31\",{\"1\":{\"996\":2}}],[\"2^3\",{\"1\":{\"974\":1,\"975\":1}}],[\"2^n\",{\"1\":{\"972\":2,\"973\":1}}],[\"2hash方法\",{\"0\":{\"957\":1}}],[\"2hashmap中hash方法的原理\",{\"0\":{\"952\":1}}],[\"24\",{\"1\":{\"945\":1,\"2505\":1,\"5603\":1}}],[\"2+1\",{\"1\":{\"889\":1}}],[\"2版本\",{\"1\":{\"884\":1}}],[\"2静态代理和动态代理的区别\",{\"0\":{\"836\":1}}],[\"2⼯⼚⽅法模式了解吗\",{\"0\":{\"827\":1}}],[\"2什么是设计模式\",{\"0\":{\"813\":1}}],[\"2区别分析\",{\"0\":{\"792\":1}}],[\"2remove方法\",{\"0\":{\"782\":1}}],[\"20分钟\",{\"0\":{\"3410\":1,\"5690\":1}}],[\"20w\",{\"1\":{\"3000\":1,\"5378\":1}}],[\"2009\",{\"1\":{\"5530\":1}}],[\"2000w\",{\"1\":{\"3000\":1,\"5378\":1}}],[\"200\",{\"1\":{\"2807\":4,\"3573\":1,\"5185\":4}}],[\"206\",{\"1\":{\"2505\":1,\"5603\":1}}],[\"2022\",{\"0\":{\"2164\":1,\"2166\":1,\"2180\":1,\"2183\":1,\"2185\":1,\"2187\":1,\"2189\":1,\"2191\":1,\"2194\":1,\"2201\":1,\"2203\":1,\"4286\":1,\"4288\":1,\"4302\":1,\"4305\":1,\"4307\":1,\"4309\":1,\"4311\":1,\"4313\":1,\"4316\":1,\"4323\":1,\"4325\":1}}],[\"20210608002334025\",{\"1\":{\"1054\":1,\"4087\":1}}],[\"20201231\",{\"1\":{\"3621\":1}}],[\"2020\",{\"1\":{\"119\":1,\"3773\":1}}],[\"20\",{\"1\":{\"968\":1,\"987\":1,\"2389\":1,\"2471\":1,\"3393\":1,\"5569\":1,\"5673\":1}}],[\"2018年的时候\",{\"1\":{\"2212\":1,\"2227\":1,\"2242\":1,\"2255\":1,\"2268\":1,\"2283\":1,\"5519\":1,\"5542\":1}}],[\"2012\",{\"1\":{\"2154\":1,\"4759\":1}}],[\"2015\",{\"1\":{\"1006\":1}}],[\"2014\",{\"1\":{\"653\":1,\"897\":1,\"3888\":1}}],[\"2013\",{\"1\":{\"592\":1,\"5530\":1}}],[\"2获取class对象\",{\"0\":{\"495\":1}}],[\"2反射\",{\"0\":{\"475\":1}}],[\"2可查的异常\",{\"0\":{\"440\":1}}],[\"2类加载器加载规则\",{\"0\":{\"397\":1}}],[\"2类加载过程\",{\"0\":{\"388\":1}}],[\"2parnew\",{\"0\":{\"350\":1}}],[\"2垃圾回收算法\",{\"0\":{\"323\":1}}],[\"2虚拟机栈\",{\"0\":{\"203\":1}}],[\"2\",{\"0\":{\"183\":1,\"189\":1,\"203\":1,\"218\":1,\"222\":1,\"278\":1,\"324\":1,\"329\":1,\"331\":1,\"336\":1,\"476\":1,\"495\":1,\"503\":1,\"511\":1,\"622\":1,\"657\":1,\"684\":1,\"713\":1,\"746\":1,\"870\":1,\"953\":1,\"957\":1,\"1030\":1,\"1034\":1,\"1337\":1,\"2153\":1,\"2209\":1,\"2215\":1,\"2224\":1,\"2230\":1,\"2239\":1,\"2245\":1,\"2252\":1,\"2258\":1,\"2265\":1,\"2271\":1,\"2280\":1,\"2286\":1,\"2291\":1,\"2417\":1,\"2418\":1,\"2419\":1,\"2420\":1,\"2421\":1,\"2422\":1,\"2423\":1,\"2424\":1,\"2425\":1,\"2426\":1,\"2427\":1,\"2508\":1,\"2513\":1,\"2554\":1,\"3062\":1,\"3104\":1,\"3156\":1,\"3161\":1,\"3172\":1,\"3177\":1,\"3219\":1,\"3221\":1,\"3223\":1,\"3229\":1,\"3235\":1,\"3238\":1,\"3285\":1,\"3330\":1,\"3463\":1,\"3638\":1,\"3998\":1,\"4758\":1,\"5516\":1,\"5522\":1,\"5539\":1,\"5545\":1,\"5606\":1,\"5611\":1,\"5732\":1},\"1\":{\"26\":14,\"77\":1,\"498\":1,\"507\":1,\"514\":1,\"519\":1,\"544\":1,\"614\":1,\"649\":1,\"650\":1,\"666\":1,\"682\":1,\"686\":1,\"698\":1,\"716\":1,\"781\":1,\"820\":1,\"980\":2,\"1014\":1,\"1061\":1,\"1115\":1,\"1125\":1,\"1142\":1,\"1151\":1,\"1213\":1,\"1247\":1,\"1282\":1,\"1298\":1,\"1399\":1,\"1413\":1,\"1415\":1,\"1418\":1,\"1419\":1,\"1422\":1,\"1425\":1,\"1428\":4,\"1471\":1,\"1567\":1,\"1581\":1,\"1583\":1,\"1586\":1,\"1587\":1,\"1590\":1,\"1593\":1,\"1596\":4,\"1639\":1,\"1735\":1,\"1749\":1,\"1751\":1,\"1754\":1,\"1755\":1,\"1758\":1,\"1761\":1,\"1764\":4,\"1807\":1,\"1903\":1,\"1917\":1,\"1919\":1,\"1922\":1,\"1923\":1,\"1926\":1,\"1929\":1,\"1932\":4,\"1975\":1,\"2099\":1,\"2125\":2,\"2155\":1,\"2213\":2,\"2217\":1,\"2228\":2,\"2232\":1,\"2243\":2,\"2247\":1,\"2256\":2,\"2260\":1,\"2269\":2,\"2273\":1,\"2284\":2,\"2288\":1,\"2302\":1,\"2371\":3,\"2379\":1,\"2509\":2,\"2510\":1,\"2511\":1,\"2512\":1,\"2514\":1,\"2515\":1,\"2516\":1,\"2567\":1,\"2764\":1,\"2768\":1,\"2770\":1,\"2932\":1,\"3020\":1,\"3098\":1,\"3200\":1,\"3286\":3,\"3311\":1,\"3367\":1,\"3375\":1,\"3397\":1,\"3403\":1,\"3408\":1,\"3412\":1,\"3426\":1,\"3435\":1,\"3508\":1,\"3511\":1,\"3523\":1,\"3533\":1,\"3680\":14,\"3731\":1,\"3949\":1,\"3958\":1,\"3965\":1,\"3970\":1,\"4007\":1,\"4029\":1,\"4094\":1,\"4148\":1,\"4158\":1,\"4175\":1,\"4184\":1,\"4246\":1,\"4375\":1,\"4550\":3,\"4576\":1,\"4704\":1,\"4730\":2,\"4760\":1,\"4826\":1,\"4840\":1,\"4842\":1,\"4845\":1,\"4846\":1,\"4849\":1,\"4852\":1,\"4855\":4,\"4898\":1,\"4945\":1,\"5142\":1,\"5146\":1,\"5148\":1,\"5310\":1,\"5398\":1,\"5439\":1,\"5474\":1,\"5490\":1,\"5520\":2,\"5524\":1,\"5530\":3,\"5534\":1,\"5543\":2,\"5547\":1,\"5607\":2,\"5608\":1,\"5609\":1,\"5610\":1,\"5612\":1,\"5613\":1,\"5614\":1,\"5647\":1,\"5655\":1,\"5677\":1,\"5683\":1,\"5688\":1,\"5692\":1,\"5706\":1,\"5777\":1,\"5780\":1,\"5792\":1,\"5802\":1}}],[\"1完全可以hold住任何场景\",{\"1\":{\"5533\":1}}],[\"1对称加密算法有哪些\",{\"0\":{\"3644\":1}}],[\"1值等不被收集在彩虹表里\",{\"1\":{\"3607\":1,\"3624\":1}}],[\"1值等对应的原文\",{\"1\":{\"3607\":1}}],[\"1值等\",{\"1\":{\"3607\":1}}],[\"18666666666\",{\"1\":{\"3597\":1,\"3603\":1}}],[\"18\",{\"1\":{\"3391\":1,\"5671\":1}}],[\"17\",{\"1\":{\"3390\":1,\"5670\":1}}],[\"1方式一\",{\"0\":{\"3285\":1}}],[\"1为什么要用线程池\",{\"0\":{\"3279\":1}}],[\"1悲观锁\",{\"0\":{\"3242\":1}}],[\"1无锁\",{\"0\":{\"3221\":1}}],[\"1threadlocal\",{\"0\":{\"3183\":1}}],[\"1tcp\",{\"0\":{\"2336\":1,\"2375\":1,\"2418\":1,\"2429\":1}}],[\"1简述java内存模型\",{\"0\":{\"3133\":1}}],[\"1典型\",{\"0\":{\"3112\":1}}],[\"1分钟\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"1999\",{\"1\":{\"5530\":1}}],[\"19下午等了将近十多分钟面试官才进面试\",{\"1\":{\"3641\":1}}],[\"19700101\",{\"1\":{\"3617\":1}}],[\"19\",{\"1\":{\"3392\":1,\"5672\":1}}],[\"196\",{\"1\":{\"2476\":2,\"5574\":2}}],[\"19th\",{\"1\":{\"60\":1,\"3714\":1}}],[\"1针对\",{\"0\":{\"2444\":1}}],[\"1中的效率问题\",{\"1\":{\"2217\":1,\"2232\":1,\"2247\":1,\"2260\":1,\"2273\":1,\"2288\":1,\"5524\":1,\"5547\":1}}],[\"1局部性原理\",{\"0\":{\"1328\":1}}],[\"1400\",{\"1\":{\"2807\":2,\"5185\":2}}],[\"14主机\",{\"1\":{\"2476\":1,\"5574\":1}}],[\"14如果已经建立了连接\",{\"0\":{\"2442\":1}}],[\"14\",{\"1\":{\"1014\":1,\"3387\":1,\"5667\":1}}],[\"1这个值一定是个正数\",{\"1\":{\"996\":1}}],[\"1hashmap\",{\"0\":{\"953\":1}}],[\"1hashmap的容量\",{\"0\":{\"909\":1}}],[\"13如果已经建立了连接\",{\"0\":{\"2441\":1}}],[\"1358933\",{\"1\":{\"2193\":1,\"4315\":1}}],[\"13\",{\"1\":{\"945\":1,\"3386\":1,\"3423\":1,\"5666\":1,\"5703\":1}}],[\"138\",{\"1\":{\"83\":1,\"3573\":1,\"3737\":1}}],[\"126145847\",{\"1\":{\"3656\":1}}],[\"126875303\",{\"1\":{\"3276\":1,\"4504\":1}}],[\"12345678\",{\"1\":{\"3613\":1}}],[\"123456\",{\"1\":{\"3598\":1}}],[\"123416498\",{\"1\":{\"1318\":1,\"5510\":1}}],[\"127\",{\"1\":{\"3573\":1}}],[\"120627481\",{\"1\":{\"3056\":1,\"5434\":1}}],[\"1200\",{\"1\":{\"2807\":1,\"5185\":1}}],[\"12服务器出现大量\",{\"0\":{\"2440\":1}}],[\"124891266\",{\"1\":{\"2877\":1,\"5255\":1}}],[\"124349832\",{\"1\":{\"1295\":1,\"5487\":1}}],[\"124580641\",{\"1\":{\"1295\":2,\"5487\":2}}],[\"129526131\",{\"1\":{\"1242\":1,\"4275\":1}}],[\"12\",{\"1\":{\"945\":2,\"968\":1,\"987\":1,\"2154\":1,\"3385\":1,\"3422\":1,\"4759\":1,\"5665\":1,\"5702\":1}}],[\"128106266\",{\"1\":{\"1304\":3,\"5496\":3}}],[\"128\",{\"1\":{\"936\":1,\"2953\":1,\"5331\":1}}],[\"125768706\",{\"1\":{\"607\":1}}],[\"16分钟\",{\"0\":{\"3395\":1,\"5675\":1}}],[\"16位\",{\"1\":{\"2363\":1,\"2365\":1}}],[\"16\",{\"1\":{\"927\":1,\"931\":1,\"941\":1,\"945\":1,\"1014\":1,\"1020\":1,\"1021\":1,\"1028\":1,\"2371\":1,\"3389\":1,\"5669\":1}}],[\"1synchronized\",{\"0\":{\"3161\":1}}],[\"1size\",{\"0\":{\"923\":1}}],[\"1serial\",{\"0\":{\"345\":1}}],[\"1的低位就全是1\",{\"1\":{\"877\":1,\"3985\":1}}],[\"1什么是代理模式\",{\"0\":{\"834\":1}}],[\"1什么是反射机制\",{\"0\":{\"476\":1}}],[\"1说⼀说简单⼯⼚模式\",{\"0\":{\"823\":1}}],[\"1说一下\",{\"0\":{\"177\":1}}],[\"1软件设计原则有哪些\",{\"0\":{\"812\":1}}],[\"1add方法\",{\"0\":{\"772\":1}}],[\"1比较几个重要的方法\",{\"0\":{\"771\":1}}],[\"1<=i<=n\",{\"1\":{\"648\":1}}],[\"1个结点\",{\"1\":{\"644\":1,\"645\":1}}],[\"112252684\",{\"1\":{\"3656\":1}}],[\"110847701\",{\"1\":{\"3218\":1,\"4342\":1}}],[\"11服务器出现大量\",{\"0\":{\"2439\":1}}],[\"11月ietf给出了官方批准\",{\"1\":{\"2211\":1,\"2226\":1,\"2241\":1,\"2254\":1,\"2267\":1,\"2282\":1,\"5518\":1,\"5541\":1}}],[\"1111进行按位与运算后的值是相等的\",{\"1\":{\"984\":1}}],[\"11\",{\"0\":{\"2164\":1,\"4286\":1},\"1\":{\"468\":2,\"3384\":1,\"3421\":1,\"3919\":2,\"5664\":1,\"5701\":1}}],[\"113550163\",{\"1\":{\"520\":1,\"3971\":1}}],[\"113\",{\"1\":{\"457\":1}}],[\"1java异常类层次结构\",{\"0\":{\"431\":1}}],[\"1异常\",{\"0\":{\"430\":1}}],[\"1介绍\",{\"0\":{\"392\":1}}],[\"1类的生命周期\",{\"0\":{\"385\":1}}],[\"10如何优化\",{\"0\":{\"2438\":1}}],[\"10什么是\",{\"0\":{\"2427\":1}}],[\"10086\",{\"1\":{\"3019\":1,\"5397\":1}}],[\"10000\",{\"1\":{\"2966\":1,\"5344\":1}}],[\"10000000\",{\"1\":{\"601\":1}}],[\"100\",{\"1\":{\"2167\":1,\"2505\":1,\"2827\":1,\"2828\":2,\"2829\":1,\"4289\":1,\"5205\":1,\"5206\":2,\"5207\":1,\"5603\":1}}],[\"10g\",{\"1\":{\"1252\":2,\"5444\":2}}],[\"108461284\",{\"1\":{\"1209\":1,\"4242\":1}}],[\"108988011\",{\"1\":{\"868\":1,\"3976\":1}}],[\"1011000110101110011111010011011\",{\"1\":{\"989\":1}}],[\"10\",{\"1\":{\"335\":1,\"592\":1,\"980\":2,\"1014\":1,\"1216\":1,\"2167\":1,\"2794\":1,\"2966\":1,\"3383\":1,\"3420\":1,\"4249\":1,\"4289\":1,\"5172\":1,\"5344\":1,\"5663\":1,\"5700\":1}}],[\"1024\",{\"1\":{\"251\":6,\"3200\":2}}],[\"1标记\",{\"0\":{\"324\":1}}],[\"1如何判断对象是否可回收\",{\"0\":{\"296\":1}}],[\"1程序计数器\",{\"0\":{\"189\":1}}],[\"15分钟\",{\"0\":{\"3372\":1,\"5652\":1},\"1\":{\"2966\":1,\"5344\":1}}],[\"15\",{\"1\":{\"83\":1,\"268\":1,\"1014\":1,\"3388\":1,\"3737\":1,\"5668\":1}}],[\"1\",{\"0\":{\"176\":1,\"177\":1,\"430\":1,\"431\":2,\"440\":2,\"446\":2,\"453\":2,\"459\":2,\"464\":2,\"475\":1,\"476\":1,\"495\":1,\"503\":1,\"511\":1,\"611\":1,\"655\":1,\"680\":1,\"707\":1,\"736\":1,\"772\":1,\"782\":1,\"867\":1,\"903\":1,\"909\":1,\"923\":2,\"935\":2,\"949\":2,\"952\":1,\"953\":1,\"957\":1,\"1030\":1,\"1327\":1,\"1328\":1,\"2220\":1,\"2335\":1,\"2336\":1,\"2345\":1,\"2348\":1,\"2354\":1,\"2360\":1,\"2373\":1,\"2375\":1,\"2397\":1,\"2410\":1,\"2503\":3,\"2508\":2,\"2544\":1,\"2545\":1,\"3060\":1,\"3094\":1,\"3132\":1,\"3133\":1,\"3138\":1,\"3142\":1,\"3153\":1,\"3205\":1,\"3279\":1,\"3284\":1,\"3285\":1,\"3330\":1,\"3336\":1,\"3345\":1,\"3354\":1,\"3459\":1,\"3591\":1,\"3996\":1,\"5511\":1,\"5601\":3,\"5606\":2,\"5728\":1},\"1\":{\"25\":12,\"47\":1,\"70\":1,\"76\":1,\"119\":2,\"231\":2,\"266\":1,\"267\":1,\"298\":2,\"335\":1,\"463\":1,\"496\":1,\"504\":1,\"512\":1,\"519\":1,\"544\":2,\"596\":1,\"597\":1,\"601\":1,\"613\":1,\"649\":1,\"682\":2,\"686\":1,\"697\":1,\"709\":1,\"718\":1,\"719\":1,\"733\":1,\"763\":1,\"774\":2,\"778\":2,\"780\":1,\"786\":1,\"788\":1,\"820\":1,\"877\":1,\"905\":1,\"921\":1,\"927\":1,\"930\":1,\"931\":1,\"932\":1,\"958\":1,\"968\":1,\"969\":1,\"972\":1,\"973\":1,\"974\":1,\"975\":1,\"981\":1,\"996\":2,\"1017\":1,\"1021\":1,\"1031\":2,\"1060\":1,\"1110\":1,\"1120\":1,\"1140\":1,\"1151\":1,\"1197\":1,\"1212\":1,\"1246\":1,\"1272\":2,\"1298\":1,\"1304\":1,\"1374\":2,\"1396\":2,\"1415\":1,\"1542\":2,\"1564\":2,\"1583\":1,\"1710\":2,\"1732\":2,\"1751\":1,\"1878\":2,\"1900\":2,\"1919\":1,\"2124\":1,\"2129\":2,\"2155\":1,\"2208\":1,\"2217\":1,\"2223\":1,\"2232\":1,\"2247\":1,\"2260\":1,\"2264\":1,\"2273\":1,\"2279\":1,\"2288\":1,\"2294\":1,\"2341\":2,\"2342\":1,\"2343\":1,\"2344\":2,\"2376\":1,\"2504\":3,\"2505\":2,\"2506\":3,\"2507\":3,\"2509\":4,\"2510\":2,\"2511\":2,\"2512\":2,\"2564\":1,\"2587\":1,\"2659\":1,\"2760\":1,\"2765\":1,\"2794\":1,\"2921\":2,\"2966\":1,\"2992\":2,\"3018\":1,\"3019\":1,\"3027\":1,\"3030\":3,\"3097\":2,\"3102\":1,\"3107\":1,\"3117\":1,\"3123\":1,\"3170\":2,\"3200\":2,\"3203\":1,\"3248\":1,\"3256\":1,\"3286\":1,\"3311\":1,\"3366\":1,\"3374\":1,\"3396\":1,\"3402\":1,\"3407\":1,\"3411\":1,\"3425\":1,\"3434\":1,\"3507\":1,\"3521\":1,\"3573\":3,\"3679\":12,\"3701\":1,\"3724\":1,\"3730\":1,\"3773\":2,\"3947\":1,\"3955\":1,\"3963\":1,\"3970\":1,\"3985\":1,\"4029\":1,\"4093\":1,\"4143\":1,\"4153\":1,\"4173\":1,\"4184\":1,\"4230\":1,\"4245\":1,\"4373\":2,\"4383\":1,\"4389\":1,\"4400\":1,\"4405\":1,\"4478\":1,\"4515\":2,\"4550\":1,\"4576\":1,\"4729\":1,\"4734\":2,\"4760\":1,\"4801\":2,\"4823\":2,\"4842\":1,\"4942\":1,\"4965\":1,\"5037\":1,\"5138\":1,\"5143\":1,\"5172\":1,\"5299\":2,\"5344\":1,\"5370\":2,\"5396\":1,\"5397\":1,\"5405\":1,\"5408\":3,\"5438\":1,\"5464\":2,\"5490\":1,\"5496\":1,\"5514\":1,\"5524\":1,\"5530\":2,\"5533\":1,\"5534\":2,\"5547\":1,\"5602\":3,\"5603\":2,\"5604\":3,\"5605\":3,\"5607\":4,\"5608\":2,\"5609\":2,\"5610\":2,\"5646\":1,\"5654\":1,\"5676\":1,\"5682\":1,\"5687\":1,\"5691\":1,\"5705\":1,\"5776\":1,\"5790\":1}}],[\"页脚\",{\"1\":{\"21\":1,\"138\":1,\"3675\":1,\"3792\":1}}],[\"页面单位时间的访问数\",{\"1\":{\"2925\":1,\"5303\":1}}],[\"页面结构\",{\"0\":{\"129\":1,\"3783\":1}}],[\"页面内容\",{\"0\":{\"122\":1,\"3776\":1}}],[\"页面配置\",{\"0\":{\"114\":1,\"3768\":1},\"1\":{\"121\":1,\"3775\":1}}],[\"页面引入配置\",{\"1\":{\"33\":1,\"3687\":1}}],[\"页面信息\",{\"0\":{\"116\":1,\"3770\":1},\"1\":{\"15\":1,\"3669\":1}}],[\"页面展示\",{\"1\":{\"6\":1,\"98\":1,\"3660\":1,\"3752\":1}}],[\"评论\",{\"1\":{\"20\":1,\"135\":1,\"3453\":1,\"3674\":1,\"3789\":1,\"5722\":1}}],[\"贡献者\",{\"1\":{\"16\":1,\"134\":1,\"3670\":1,\"3788\":1}}],[\"侧边栏\",{\"1\":{\"13\":1,\"137\":1,\"3667\":1,\"3791\":1}}],[\"展示\",{\"0\":{\"27\":1,\"3681\":1},\"1\":{\"5\":1,\"97\":1,\"3659\":1,\"3751\":1}}],[\"mvc2\",{\"1\":{\"3575\":1}}],[\"mvcc\",{\"0\":{\"2853\":1,\"5231\":1},\"1\":{\"2569\":1,\"2577\":1,\"2579\":1,\"2701\":1,\"2745\":1,\"2813\":1,\"2847\":1,\"2854\":1,\"2871\":1,\"4947\":1,\"4955\":1,\"4957\":1,\"5079\":1,\"5123\":1,\"5191\":1,\"5225\":1,\"5232\":1,\"5249\":1}}],[\"mvc的基本流程\",{\"0\":{\"1052\":1,\"4085\":1}}],[\"mtu\",{\"1\":{\"2396\":1}}],[\"mq服务器更新消息状态为可发送\",{\"1\":{\"2176\":1,\"4298\":1}}],[\"mq服务器返回ack确认到生产者\",{\"1\":{\"2173\":1,\"4295\":1}}],[\"mq收到消息后\",{\"1\":{\"2172\":1,\"4294\":1}}],[\"mq\",{\"1\":{\"2167\":1,\"4289\":1}}],[\"mmap\",{\"0\":{\"1403\":1,\"1571\":1,\"1739\":1,\"1907\":1,\"4830\":1},\"1\":{\"1400\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1409\":1,\"1412\":1,\"1568\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1577\":1,\"1580\":1,\"1736\":1,\"1740\":1,\"1741\":1,\"1742\":1,\"1745\":1,\"1748\":1,\"1904\":1,\"1908\":1,\"1909\":1,\"1910\":1,\"1913\":1,\"1916\":1,\"4827\":1,\"4831\":1,\"4832\":1,\"4833\":1,\"4836\":1,\"4839\":1}}],[\"m0\",{\"1\":{\"1304\":1,\"3656\":1,\"5496\":1}}],[\"multiplexing\",{\"1\":{\"2509\":1,\"5607\":1}}],[\"murmur2\",{\"1\":{\"1263\":1,\"5455\":1}}],[\"mutex\",{\"1\":{\"776\":1,\"784\":1,\"1353\":1,\"1521\":1,\"1689\":1,\"1857\":1,\"4780\":1}}],[\"mp\",{\"1\":{\"1154\":1,\"3130\":1,\"3155\":1,\"3361\":1,\"4187\":1,\"4365\":1,\"4470\":1,\"4615\":1}}],[\"myisam\",{\"0\":{\"2559\":1,\"4937\":1},\"1\":{\"2560\":1,\"2561\":2,\"2565\":1,\"2566\":1,\"2568\":1,\"2571\":1,\"2575\":1,\"2578\":1,\"2579\":1,\"2581\":1,\"2582\":1,\"2597\":1,\"2598\":1,\"2599\":2,\"2602\":1,\"2608\":1,\"2628\":1,\"2640\":1,\"2705\":1,\"2772\":1,\"2804\":1,\"3388\":1,\"4938\":1,\"4939\":2,\"4943\":1,\"4944\":1,\"4946\":1,\"4949\":1,\"4953\":1,\"4956\":1,\"4957\":1,\"4959\":1,\"4960\":1,\"4975\":1,\"4976\":1,\"4977\":2,\"4980\":1,\"4986\":1,\"5006\":1,\"5018\":1,\"5083\":1,\"5150\":1,\"5182\":1,\"5668\":1}}],[\"myid\",{\"1\":{\"2124\":1,\"2125\":2,\"2129\":1,\"4729\":1,\"4730\":2,\"4734\":1}}],[\"mysqldump\",{\"1\":{\"2703\":2,\"5081\":2}}],[\"mysql5\",{\"1\":{\"2628\":1,\"5006\":1}}],[\"mysql\",{\"0\":{\"2556\":1,\"2557\":1,\"4934\":1,\"4935\":1},\"1\":{\"1091\":1,\"2560\":2,\"2562\":2,\"2589\":1,\"2597\":1,\"2602\":1,\"2608\":1,\"2619\":1,\"2632\":1,\"2640\":1,\"2654\":1,\"2656\":1,\"2669\":2,\"2685\":1,\"2707\":1,\"2760\":1,\"2803\":1,\"2804\":2,\"2834\":1,\"2844\":1,\"2845\":2,\"2846\":1,\"3000\":1,\"3375\":1,\"3445\":1,\"4124\":1,\"4938\":2,\"4940\":2,\"4967\":1,\"4975\":1,\"4980\":1,\"4986\":1,\"4997\":1,\"5010\":1,\"5018\":1,\"5032\":1,\"5034\":1,\"5047\":2,\"5063\":1,\"5085\":1,\"5138\":1,\"5181\":1,\"5182\":2,\"5212\":1,\"5222\":1,\"5223\":2,\"5224\":1,\"5378\":1,\"5655\":1,\"5714\":1}}],[\"mybatisplus\",{\"1\":{\"3445\":1,\"5714\":1}}],[\"mybatis会利用序列化\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"mybatis觉得获取的数据可能会被修改\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"mybatis为了加快获取速度\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"mybatis认为所有从缓存中获取数据的操作都是只读操作\",{\"1\":{\"1228\":1,\"4261\":1}}],[\"mybatis缓存机制\",{\"0\":{\"1219\":1,\"4252\":1}}],[\"mybatis分页原理\",{\"0\":{\"1203\":1,\"4236\":1}}],[\"mybatis\",{\"0\":{\"1043\":1,\"1202\":1,\"1210\":1,\"4076\":1,\"4235\":1,\"4243\":1},\"1\":{\"1212\":1,\"1215\":1,\"1217\":1,\"1218\":1,\"1221\":1,\"1223\":1,\"1230\":1,\"4245\":1,\"4248\":1,\"4250\":1,\"4251\":1,\"4254\":1,\"4256\":1,\"4263\":1}}],[\"mykey\",{\"1\":{\"1\":1}}],[\"m>=0\",{\"1\":{\"614\":1}}],[\"mid=2651751537\",{\"1\":{\"3361\":1,\"4615\":1}}],[\"mid=2247483734\",{\"1\":{\"3155\":1,\"4470\":1}}],[\"mid=2247485568\",{\"1\":{\"1154\":1,\"4187\":1}}],[\"mid=2247510278\",{\"1\":{\"3130\":1,\"4365\":1}}],[\"milliseconds\",{\"1\":{\"3286\":1,\"4550\":1}}],[\"mirror\",{\"1\":{\"2193\":1,\"4315\":1}}],[\"minio\",{\"1\":{\"3471\":1,\"5740\":1}}],[\"minutes\",{\"1\":{\"3200\":1}}],[\"min\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"mincapacity\",{\"1\":{\"774\":3,\"778\":4}}],[\"minor\",{\"1\":{\"231\":1,\"234\":1,\"257\":1,\"259\":2,\"264\":1}}],[\"missing\",{\"1\":{\"457\":1}}],[\"misc\",{\"1\":{\"421\":3,\"968\":1,\"1014\":1,\"3107\":1,\"3878\":3,\"4389\":1}}],[\"mongodb\",{\"1\":{\"3445\":1,\"5714\":1}}],[\"monitor\",{\"1\":{\"3167\":1,\"3168\":1,\"3180\":1,\"4512\":1,\"4513\":1,\"4525\":1}}],[\"monitorexit\",{\"1\":{\"3165\":2,\"3166\":1,\"3171\":2,\"3175\":1,\"3178\":2,\"3179\":1,\"4510\":2,\"4511\":1,\"4516\":2,\"4520\":1,\"4523\":2,\"4524\":1}}],[\"monitorenter\",{\"1\":{\"3165\":2,\"3166\":1,\"3167\":1,\"3175\":1,\"3178\":2,\"3179\":1,\"4510\":2,\"4511\":1,\"4512\":1,\"4520\":1,\"4523\":2,\"4524\":1}}],[\"mode\",{\"1\":{\"2747\":1,\"2762\":1,\"2763\":1,\"2764\":1,\"2765\":1,\"2768\":1,\"2770\":1,\"2774\":1,\"5125\":1,\"5140\":1,\"5141\":1,\"5142\":1,\"5143\":1,\"5146\":1,\"5148\":1,\"5152\":1}}],[\"modelandview\",{\"1\":{\"1053\":1,\"1064\":1,\"1065\":1,\"4086\":1,\"4097\":1,\"4098\":1}}],[\"model\",{\"1\":{\"419\":1,\"1053\":1,\"1066\":1,\"3875\":1,\"4086\":1,\"4099\":1}}],[\"modified\",{\"1\":{\"2506\":1,\"5604\":1}}],[\"modcount++\",{\"1\":{\"774\":1,\"786\":1,\"788\":1}}],[\"modcount\",{\"1\":{\"749\":2,\"778\":1}}],[\"more\",{\"1\":{\"115\":1,\"3769\":1}}],[\"m\",{\"0\":{\"5830\":1,\"5843\":1},\"1\":{\"251\":2,\"383\":1,\"617\":1,\"2861\":5,\"2863\":1,\"2864\":5,\"2865\":2,\"2866\":1,\"5239\":5,\"5241\":1,\"5242\":5,\"5243\":2,\"5244\":1}}],[\"message\",{\"1\":{\"1367\":1,\"1535\":1,\"1703\":1,\"1871\":1,\"3581\":1,\"4794\":1}}],[\"medium=distribute\",{\"1\":{\"1295\":1,\"1304\":1,\"5487\":1,\"5496\":1}}],[\"member\",{\"1\":{\"2182\":3,\"4304\":3}}],[\"memberid\",{\"1\":{\"1272\":2,\"5464\":2}}],[\"memcached\",{\"1\":{\"2959\":1,\"5337\":1}}],[\"memcache\",{\"1\":{\"1453\":1,\"1621\":1,\"1789\":1,\"1957\":1,\"4880\":1}}],[\"memory\",{\"1\":{\"231\":2,\"294\":1,\"1369\":1,\"1421\":1,\"1537\":1,\"1589\":1,\"1705\":1,\"1757\":1,\"1873\":1,\"1925\":1,\"2997\":1,\"4796\":1,\"4848\":1,\"5375\":1}}],[\"metrics\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"meta\",{\"1\":{\"1144\":1,\"4177\":1}}],[\"methodproxy\",{\"1\":{\"861\":1,\"4070\":1}}],[\"methodinterceptor\",{\"1\":{\"859\":1,\"860\":1,\"861\":1,\"862\":1,\"4068\":1,\"4069\":1,\"4070\":1,\"4071\":1}}],[\"method\",{\"1\":{\"279\":1,\"282\":1,\"411\":1,\"449\":1,\"452\":1,\"468\":2,\"514\":1,\"515\":4,\"752\":1,\"853\":4,\"861\":3,\"925\":1,\"930\":3,\"943\":2,\"3163\":1,\"3174\":1,\"3288\":1,\"3866\":1,\"3908\":1,\"3911\":1,\"3919\":2,\"3965\":1,\"3966\":4,\"4062\":4,\"4070\":3,\"4507\":1,\"4518\":1,\"4552\":1}}],[\"mermaid\",{\"0\":{\"91\":1,\"3745\":1}}],[\"mac\",{\"0\":{\"2475\":1,\"2487\":1,\"5573\":1,\"5585\":1},\"1\":{\"2469\":2,\"2471\":2,\"2473\":1,\"2477\":1,\"2478\":1,\"2479\":1,\"2481\":6,\"2483\":2,\"2484\":2,\"2485\":1,\"2488\":2,\"2489\":1,\"2490\":1,\"2492\":3,\"2493\":5,\"2496\":1,\"2497\":2,\"2498\":2,\"5567\":2,\"5569\":2,\"5571\":1,\"5575\":1,\"5576\":1,\"5577\":1,\"5579\":6,\"5581\":2,\"5582\":2,\"5583\":1,\"5586\":2,\"5587\":1,\"5588\":1,\"5590\":3,\"5591\":5,\"5594\":1,\"5595\":2,\"5596\":2}}],[\"maker\",{\"1\":{\"2193\":1,\"4315\":1}}],[\"master\",{\"1\":{\"2096\":1,\"4701\":1}}],[\"mandatory\",{\"1\":{\"1101\":1,\"4134\":1}}],[\"match\",{\"1\":{\"2506\":2,\"5604\":2}}],[\"math\",{\"1\":{\"778\":1,\"1272\":1,\"5464\":1}}],[\"matter\",{\"1\":{\"151\":1,\"155\":1,\"3805\":1}}],[\"mapper\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"maptype\",{\"1\":{\"925\":3,\"930\":6,\"943\":9}}],[\"map常见面试题\",{\"0\":{\"866\":1}}],[\"map>\",{\"1\":{\"499\":1,\"3950\":1}}],[\"map\",{\"0\":{\"902\":1,\"3974\":1},\"1\":{\"480\":2,\"483\":2,\"485\":4,\"678\":1,\"925\":5,\"930\":9,\"943\":23,\"1272\":1,\"3193\":3,\"3931\":2,\"3934\":2,\"3936\":4,\"4537\":3,\"5464\":1}}],[\"map<string\",{\"1\":{\"480\":1,\"483\":1,\"485\":2,\"491\":2,\"499\":1,\"925\":1,\"930\":3,\"943\":1,\"1272\":5,\"3931\":1,\"3934\":1,\"3936\":2,\"3942\":2,\"3950\":1,\"5464\":5}}],[\"mark\",{\"1\":{\"362\":2,\"3225\":2,\"4349\":2}}],[\"markdown\",{\"0\":{\"27\":1,\"30\":1,\"32\":1,\"36\":1,\"3681\":1,\"3684\":1,\"3686\":1,\"3690\":1},\"1\":{\"5\":1,\"28\":1,\"29\":1,\"31\":3,\"33\":1,\"37\":3,\"39\":1,\"40\":1,\"42\":1,\"44\":1,\"97\":1,\"117\":1,\"123\":1,\"125\":1,\"3659\":1,\"3682\":1,\"3683\":1,\"3685\":3,\"3687\":1,\"3691\":3,\"3693\":1,\"3694\":1,\"3696\":1,\"3698\":1,\"3751\":1,\"3771\":1,\"3777\":1,\"3779\":1}}],[\"maximum\",{\"1\":{\"3288\":2,\"4552\":2}}],[\"maximumpoolsize\",{\"1\":{\"3288\":8,\"3291\":1,\"4552\":8,\"4555\":1}}],[\"maxintset\",{\"1\":{\"2938\":1,\"5316\":1}}],[\"max\",{\"1\":{\"778\":1,\"2930\":2,\"2945\":2,\"3309\":1,\"3310\":1,\"3311\":1,\"3342\":1,\"3343\":1,\"3344\":1,\"4574\":1,\"4575\":1,\"4576\":1,\"4599\":1,\"4600\":1,\"4601\":1,\"5308\":2,\"5323\":2}}],[\"maxtenuringthreshold\",{\"1\":{\"256\":1}}],[\"maxmemory\",{\"1\":{\"251\":3}}],[\"maxheapsize\",{\"1\":{\"245\":1}}],[\"mainreactor\",{\"1\":{\"1499\":1,\"1500\":1,\"1667\":1,\"1668\":1,\"1835\":1,\"1836\":1,\"2003\":1,\"2004\":1,\"4926\":1,\"4927\":1}}],[\"main\",{\"1\":{\"251\":1,\"457\":1,\"468\":1,\"1116\":1,\"1144\":1,\"3200\":1,\"3286\":1,\"3919\":1,\"4149\":1,\"4177\":1,\"4550\":1}}],[\"major\",{\"1\":{\"237\":1,\"269\":1,\"270\":1}}],[\"mss\",{\"0\":{\"2423\":1},\"1\":{\"2308\":1,\"2395\":1}}],[\"ms\",{\"1\":{\"118\":1,\"601\":2,\"3772\":1}}],[\"mrhope\",{\"1\":{\"83\":2,\"3737\":2}}],[\"mr\",{\"1\":{\"83\":1,\"105\":1,\"3737\":1,\"3759\":1}}],[\"md5实际上既不是对称算法\",{\"1\":{\"3649\":1}}],[\"md5不是加密算法\",{\"1\":{\"3649\":1}}],[\"md5是对称加密还是非对称加密\",{\"1\":{\"3642\":1}}],[\"md5是是对称加密还是非对称加密\",{\"0\":{\"3640\":1}}],[\"md5是不可逆的\",{\"1\":{\"3585\":1}}],[\"md5可以用来生成数字签名\",{\"1\":{\"3639\":1}}],[\"md5可以用来对密码加密\",{\"1\":{\"3592\":1}}],[\"md5可以将任意长度的输入转化为128位长度的输出\",{\"1\":{\"3584\":1}}],[\"md5的对照表\",{\"1\":{\"3608\":1}}],[\"md5的应用场景\",{\"0\":{\"3590\":1}}],[\"md5的问题\",{\"0\":{\"3588\":1}}],[\"md5的特点\",{\"0\":{\"3583\":1}}],[\"md5值就会有巨大的变动\",{\"1\":{\"3586\":1}}],[\"md5\",{\"0\":{\"3579\":1},\"1\":{\"3581\":1,\"3610\":1}}],[\"mdl\",{\"1\":{\"2709\":1,\"2723\":1,\"2724\":2,\"2725\":1,\"2726\":1,\"2727\":1,\"2728\":3,\"2729\":3,\"2730\":1,\"2731\":2,\"2733\":1,\"2735\":2,\"2737\":1,\"2738\":2,\"2739\":1,\"5087\":1,\"5101\":1,\"5102\":2,\"5103\":1,\"5104\":1,\"5105\":1,\"5106\":3,\"5107\":3,\"5108\":1,\"5109\":2,\"5111\":1,\"5113\":2,\"5115\":1,\"5116\":2,\"5117\":1}}],[\"md\",{\"1\":{\"42\":1,\"3181\":1,\"3361\":1,\"3696\":1}}],[\"主内存\",{\"1\":{\"3135\":1,\"4447\":1}}],[\"主库的自增值是什么\",{\"1\":{\"2769\":1,\"5147\":1}}],[\"主从复制\",{\"0\":{\"3011\":1,\"5389\":1}}],[\"主从复制的场景\",{\"1\":{\"2768\":1,\"5146\":1}}],[\"主从结构\",{\"1\":{\"2964\":1,\"5342\":1}}],[\"主从机房同步有什么问题呢\",{\"0\":{\"2194\":1,\"4316\":1}}],[\"主键一般都是不可被修改的\",{\"1\":{\"2638\":1,\"5016\":1}}],[\"主键索引\",{\"0\":{\"2616\":1,\"4994\":1},\"1\":{\"2610\":1,\"4988\":1}}],[\"主机\",{\"1\":{\"2478\":1,\"2479\":1,\"2480\":1,\"2482\":1,\"2483\":3,\"2485\":1,\"2489\":1,\"2490\":1,\"2492\":1,\"2493\":2,\"5576\":1,\"5577\":1,\"5578\":1,\"5580\":1,\"5581\":3,\"5583\":1,\"5587\":1,\"5588\":1,\"5590\":1,\"5591\":2}}],[\"主线程\",{\"1\":{\"2969\":1,\"2970\":1,\"5347\":1,\"5348\":1}}],[\"主线程只需要把新连接传给子线程\",{\"1\":{\"1505\":1,\"1673\":1,\"1841\":1,\"2009\":1,\"4932\":1}}],[\"主线程只负责接收新连接\",{\"1\":{\"1504\":1,\"1672\":1,\"1840\":1,\"2008\":1,\"4931\":1}}],[\"主线程和子线程的交互很简单\",{\"1\":{\"1505\":1,\"1673\":1,\"1841\":1,\"2009\":1,\"4932\":1}}],[\"主线程和子线程分工明确\",{\"1\":{\"1504\":1,\"1672\":1,\"1840\":1,\"2008\":1,\"4931\":1}}],[\"主线程中的\",{\"1\":{\"1499\":1,\"1667\":1,\"1835\":1,\"2003\":1,\"4926\":1}}],[\"主gc\",{\"1\":{\"237\":1}}],[\"主流虚拟机都是可扩展的\",{\"1\":{\"229\":1}}],[\"主管\",{\"1\":{\"204\":1}}],[\"主题了解吗\",{\"1\":{\"3376\":1,\"5656\":1}}],[\"主题包含了一个自定义徽章可以使用\",{\"1\":{\"127\":1,\"3781\":1}}],[\"主题扩展了更多\",{\"1\":{\"42\":1,\"3696\":1}}],[\"主题扩展\",{\"0\":{\"41\":1,\"3695\":1}}],[\"主要包括两个操作\",{\"1\":{\"3105\":1,\"4387\":1}}],[\"主要有两个作用\",{\"1\":{\"2869\":1,\"5247\":1}}],[\"主要有以下字段\",{\"1\":{\"2862\":1,\"5240\":1}}],[\"主要的流程解释下\",{\"1\":{\"2169\":1,\"4291\":1}}],[\"主要的方法有两种\",{\"1\":{\"1359\":1,\"1527\":1,\"1695\":1,\"1863\":1,\"4786\":1}}],[\"主要依赖\",{\"1\":{\"2102\":1,\"4707\":1}}],[\"主要为\",{\"1\":{\"2099\":1,\"4704\":1}}],[\"主要因为要考虑子进程\",{\"1\":{\"1491\":1,\"1659\":1,\"1827\":1,\"1995\":1,\"4918\":1}}],[\"主要功能如下\",{\"1\":{\"1196\":1,\"4229\":1}}],[\"主要功能与配置演示\",{\"0\":{\"3\":1,\"3657\":1}}],[\"主要是通过继承方式使用\",{\"1\":{\"3061\":1,\"4415\":1}}],[\"主要是单线程事件循环和\",{\"1\":{\"2910\":1,\"5288\":1}}],[\"主要是因为\",{\"1\":{\"2589\":1,\"4967\":1}}],[\"主要是因为除了\",{\"1\":{\"352\":1}}],[\"主要是为了解决http\",{\"1\":{\"2217\":1,\"2232\":1,\"2247\":1,\"2260\":1,\"2273\":1,\"2288\":1,\"5524\":1,\"5547\":1}}],[\"主要是从速度\",{\"1\":{\"1021\":1}}],[\"主要原因是位运算直接对内存数据进行操作\",{\"1\":{\"969\":1}}],[\"主要⽬的是解耦合服务提供者和使⽤者\",{\"1\":{\"835\":1,\"4044\":1}}],[\"主要用来提高\",{\"1\":{\"2964\":1,\"5342\":1}}],[\"主要用来加载\",{\"1\":{\"402\":1,\"3857\":1}}],[\"主要用于spring\",{\"1\":{\"1162\":1,\"4195\":1}}],[\"主要用在迭代器里\",{\"1\":{\"758\":1}}],[\"主要区别在于因为实现方式的不同\",{\"1\":{\"738\":1}}],[\"主要负责加载\",{\"1\":{\"403\":1,\"3858\":1}}],[\"主要不足是只使用了内存的一半\",{\"1\":{\"333\":1}}],[\"主要从\",{\"1\":{\"28\":1,\"3682\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"sm2\",{\"1\":{\"3647\":1}}],[\"sm1和sm4\",{\"1\":{\"3645\":1}}],[\"s模式\",{\"1\":{\"3385\":1,\"5665\":1}}],[\"swap\",{\"1\":{\"3095\":1,\"3102\":1,\"3127\":1,\"4371\":1,\"4383\":1,\"4409\":1}}],[\"sweep\",{\"1\":{\"362\":2}}],[\"sds\",{\"1\":{\"2918\":1,\"2919\":2,\"2920\":5,\"2921\":2,\"2922\":3,\"5296\":1,\"5297\":2,\"5298\":5,\"5299\":2,\"5300\":3}}],[\"s锁\",{\"1\":{\"2776\":1,\"5154\":1}}],[\"ssl加密协议\",{\"1\":{\"5533\":1}}],[\"ssl\",{\"1\":{\"2514\":1,\"2521\":2,\"5612\":1,\"5619\":2}}],[\"ssize\",{\"1\":{\"1416\":1,\"1584\":1,\"1752\":1,\"1920\":1,\"4843\":1}}],[\"sn=c50a434302cc06797828782970da190e\",{\"1\":{\"3361\":1,\"4615\":1}}],[\"sn=c5ba880fd0c5d82e39531fa42cb036ac\",{\"1\":{\"1154\":1,\"4187\":1}}],[\"sn=8509d4aa61d08550c2b7668314da3582\",{\"1\":{\"3155\":1,\"4470\":1}}],[\"sn=a58a9ec9f805d0e109c4b09cd497c9ca\",{\"1\":{\"3130\":1,\"4365\":1}}],[\"snapshotting\",{\"1\":{\"2960\":1,\"5338\":1}}],[\"snmp\",{\"1\":{\"2402\":1}}],[\"schedule服务\",{\"1\":{\"3541\":1,\"5810\":1}}],[\"scheduled\",{\"1\":{\"3356\":1}}],[\"scheduledthreadpool\",{\"1\":{\"3311\":1,\"3335\":1,\"3344\":1,\"4576\":1,\"4592\":1,\"4601\":1}}],[\"scene=21\",{\"1\":{\"3361\":1,\"4615\":1}}],[\"scene=27\",{\"1\":{\"3130\":1,\"3155\":1,\"4365\":1,\"4470\":1}}],[\"score\",{\"1\":{\"2182\":2,\"4304\":2}}],[\"scatter\",{\"1\":{\"1421\":1,\"1589\":1,\"1757\":1,\"1925\":1,\"4848\":1}}],[\"scavenge\",{\"0\":{\"354\":1},\"1\":{\"360\":1}}],[\"svn\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"svg\",{\"1\":{\"83\":1,\"3737\":1}}],[\"sg\",{\"1\":{\"1421\":1,\"1422\":1,\"1424\":1,\"1589\":1,\"1590\":1,\"1592\":1,\"1757\":1,\"1758\":1,\"1760\":1,\"1925\":1,\"1926\":1,\"1928\":1,\"4848\":1,\"4849\":1,\"4851\":1}}],[\"sha等加密算法占据着重要的位置\",{\"1\":{\"3642\":1}}],[\"sha\",{\"1\":{\"3607\":3,\"3624\":1}}],[\"share\",{\"1\":{\"2747\":1,\"2774\":1,\"5125\":1,\"5152\":1}}],[\"shared\",{\"1\":{\"1369\":1,\"1537\":1,\"1705\":1,\"1873\":1,\"4796\":1}}],[\"shutdownnow\",{\"1\":{\"3324\":1}}],[\"shutdown\",{\"1\":{\"3286\":1,\"3322\":1,\"4550\":1}}],[\"shutdown等\",{\"1\":{\"1179\":1,\"4212\":1}}],[\"shouldparkafterfailedacquire\",{\"1\":{\"3077\":1,\"4433\":1}}],[\"shortest\",{\"1\":{\"2453\":1,\"2546\":1,\"5551\":1}}],[\"sqlsession\",{\"1\":{\"1221\":5,\"1223\":2,\"1235\":1,\"4254\":5,\"4256\":2,\"4268\":1}}],[\"sql\",{\"1\":{\"1213\":1,\"1215\":2,\"1216\":1,\"1221\":1,\"1223\":3,\"2569\":1,\"2650\":2,\"2831\":1,\"2844\":1,\"2896\":1,\"2903\":1,\"4246\":1,\"4248\":2,\"4249\":1,\"4254\":1,\"4256\":3,\"4947\":1,\"5028\":2,\"5209\":1,\"5222\":1,\"5274\":1,\"5281\":1}}],[\"sqlexception等以及用户自定义的exception异常\",{\"1\":{\"439\":1,\"3898\":1}}],[\"sleep\",{\"1\":{\"3200\":1}}],[\"sleuth\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"slf4j\",{\"1\":{\"1159\":1,\"4192\":1}}],[\"slide\",{\"0\":{\"2\":1}}],[\"src\",{\"1\":{\"1144\":1,\"4177\":1}}],[\"s\",{\"0\":{\"5831\":1,\"5835\":1},\"1\":{\"749\":4,\"752\":3,\"1154\":1,\"2019\":1,\"2783\":1,\"2784\":5,\"2785\":2,\"2789\":1,\"2795\":1,\"3130\":1,\"3155\":1,\"3164\":1,\"3361\":1,\"3385\":1,\"4187\":1,\"4365\":1,\"4470\":1,\"4508\":1,\"4615\":1,\"4624\":1,\"5161\":1,\"5162\":5,\"5163\":2,\"5167\":1,\"5173\":1,\"5665\":1}}],[\"salt值\",{\"1\":{\"3628\":1,\"3629\":1,\"3631\":1,\"3634\":1,\"3635\":1}}],[\"save\",{\"1\":{\"749\":1,\"752\":1,\"2966\":3,\"2969\":1,\"5344\":3,\"5347\":1}}],[\"safe\",{\"1\":{\"742\":1}}],[\"spdy\",{\"1\":{\"5530\":7}}],[\"spread\",{\"1\":{\"1014\":1,\"1028\":1}}],[\"spring在企业级开发框架中无人能敌\",{\"1\":{\"2062\":1,\"4667\":1}}],[\"springcloud中的组件有那些\",{\"1\":{\"2065\":1,\"4670\":1}}],[\"springcloud\",{\"1\":{\"2035\":1,\"4640\":1}}],[\"springframework\",{\"1\":{\"1169\":1,\"4202\":1}}],[\"springfactoriesloader\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"springboot的核心配置文件是application和bootstrap配置文件\",{\"1\":{\"1161\":1,\"4194\":1}}],[\"springbootapplication或者\",{\"1\":{\"1139\":1,\"4172\":1}}],[\"spring解决\",{\"1\":{\"1119\":1,\"4152\":1}}],[\"spring如何解决循环依赖问题\",{\"0\":{\"1108\":1,\"4141\":1}}],[\"spring事务机制\",{\"0\":{\"1076\":1,\"4109\":1}}],[\"spring的设计模式\",{\"0\":{\"1068\":1,\"4101\":1}}],[\"springmvc\",{\"0\":{\"1043\":1,\"4076\":1},\"1\":{\"1055\":1,\"1075\":1,\"4088\":1,\"4108\":1}}],[\"spring\",{\"0\":{\"1043\":2,\"1077\":1,\"1089\":1,\"1096\":1,\"1138\":1,\"1149\":1,\"1153\":1,\"1193\":1,\"2029\":1,\"2030\":1,\"2056\":1,\"4076\":2,\"4110\":1,\"4122\":1,\"4129\":1,\"4171\":1,\"4182\":1,\"4186\":1,\"4226\":1,\"4634\":1,\"4635\":1,\"4661\":1,\"5836\":1,\"5849\":1},\"1\":{\"519\":2,\"826\":1,\"845\":1,\"858\":1,\"1046\":3,\"1047\":2,\"1050\":1,\"1056\":1,\"1059\":1,\"1065\":1,\"1069\":1,\"1070\":1,\"1071\":1,\"1072\":1,\"1074\":1,\"1075\":1,\"1084\":1,\"1109\":1,\"1114\":1,\"1123\":1,\"1124\":1,\"1132\":3,\"1134\":1,\"1136\":1,\"1137\":2,\"1139\":2,\"1144\":5,\"1146\":3,\"1148\":2,\"1168\":3,\"1179\":2,\"1181\":1,\"1183\":1,\"1184\":1,\"1185\":1,\"1186\":1,\"1196\":1,\"2032\":2,\"2062\":2,\"2066\":9,\"2067\":1,\"3305\":1,\"3380\":1,\"3445\":2,\"3449\":1,\"3970\":2,\"4035\":1,\"4054\":1,\"4067\":1,\"4079\":3,\"4080\":2,\"4083\":1,\"4089\":1,\"4092\":1,\"4098\":1,\"4102\":1,\"4103\":1,\"4104\":1,\"4105\":1,\"4107\":1,\"4108\":1,\"4117\":1,\"4142\":1,\"4147\":1,\"4156\":1,\"4157\":1,\"4165\":3,\"4167\":1,\"4169\":1,\"4170\":2,\"4172\":2,\"4177\":5,\"4179\":3,\"4181\":2,\"4201\":3,\"4212\":2,\"4214\":1,\"4216\":1,\"4217\":1,\"4218\":1,\"4219\":1,\"4229\":1,\"4570\":1,\"4637\":2,\"4667\":2,\"4671\":9,\"4672\":1,\"5660\":1,\"5714\":2,\"5718\":1}}],[\"spm=1001\",{\"1\":{\"653\":1,\"897\":1,\"1295\":1,\"1304\":1,\"3888\":1,\"5487\":1,\"5496\":1}}],[\"simultaneously\",{\"1\":{\"3358\":1}}],[\"simple\",{\"1\":{\"1238\":1,\"4271\":1}}],[\"simpletrycatch\",{\"1\":{\"466\":1,\"468\":1,\"3917\":1,\"3919\":1}}],[\"since\",{\"1\":{\"2506\":2,\"5604\":2}}],[\"singlethreadexecutor\",{\"1\":{\"3333\":1,\"3342\":1,\"4590\":1,\"4599\":1}}],[\"singlethreadexector\",{\"1\":{\"3309\":1,\"4574\":1}}],[\"singlethreadscheduledexecutor\",{\"1\":{\"3311\":1,\"3344\":1,\"4576\":1,\"4601\":1}}],[\"singleton\",{\"1\":{\"820\":6,\"4029\":6}}],[\"single\",{\"1\":{\"1014\":1,\"2703\":1,\"5081\":1}}],[\"signal\",{\"1\":{\"1366\":1,\"1534\":1,\"1702\":1,\"1870\":1,\"4793\":1}}],[\"size和capacity之间有啥关系\",{\"1\":{\"922\":1}}],[\"size++\",{\"1\":{\"778\":1}}],[\"size\",{\"1\":{\"778\":3,\"786\":2,\"911\":1,\"914\":1,\"925\":5,\"927\":1,\"938\":1,\"943\":10,\"945\":2,\"1263\":3,\"1272\":3,\"1416\":1,\"1584\":1,\"1752\":1,\"1920\":1,\"4843\":1,\"5455\":3,\"5464\":3}}],[\"site\",{\"1\":{\"83\":2,\"3737\":2}}],[\"source\",{\"1\":{\"2066\":1,\"4671\":1}}],[\"source=distribute\",{\"1\":{\"1304\":1,\"5496\":1}}],[\"sockfd\",{\"1\":{\"1405\":1,\"1573\":1,\"1741\":1,\"1909\":1,\"4832\":1}}],[\"socket\",{\"0\":{\"2443\":1,\"2444\":1},\"1\":{\"1373\":1,\"1379\":5,\"1380\":2,\"1383\":2,\"1388\":1,\"1389\":1,\"1410\":1,\"1411\":1,\"1413\":1,\"1416\":1,\"1419\":1,\"1421\":1,\"1424\":2,\"1541\":1,\"1547\":5,\"1548\":2,\"1551\":2,\"1556\":1,\"1557\":1,\"1578\":1,\"1579\":1,\"1581\":1,\"1584\":1,\"1587\":1,\"1589\":1,\"1592\":2,\"1709\":1,\"1715\":5,\"1716\":2,\"1719\":2,\"1724\":1,\"1725\":1,\"1746\":1,\"1747\":1,\"1749\":1,\"1752\":1,\"1755\":1,\"1757\":1,\"1760\":2,\"1877\":1,\"1883\":5,\"1884\":2,\"1887\":2,\"1892\":1,\"1893\":1,\"1914\":1,\"1915\":1,\"1917\":1,\"1920\":1,\"1923\":1,\"1925\":1,\"1928\":2,\"2328\":1,\"2329\":1,\"2355\":1,\"2357\":1,\"4800\":1,\"4806\":5,\"4807\":2,\"4810\":2,\"4815\":1,\"4816\":1,\"4837\":1,\"4838\":1,\"4840\":1,\"4843\":1,\"4846\":1,\"4848\":1,\"4851\":2}}],[\"sockets\",{\"1\":{\"1370\":1,\"1538\":1,\"1706\":1,\"1874\":1,\"4797\":1}}],[\"sort\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"something\",{\"1\":{\"449\":1,\"3908\":1}}],[\"softreference\",{\"1\":{\"315\":1}}],[\"syscall\",{\"1\":{\"2984\":1,\"5362\":1}}],[\"system\",{\"1\":{\"251\":4,\"421\":2,\"457\":1,\"463\":2,\"601\":6,\"774\":1,\"778\":1,\"786\":1,\"788\":1,\"925\":2,\"930\":3,\"943\":8,\"1148\":1,\"1397\":1,\"1506\":1,\"1565\":1,\"1674\":1,\"1733\":1,\"1842\":1,\"1901\":1,\"2010\":1,\"3163\":1,\"3174\":1,\"3200\":2,\"3288\":1,\"3878\":2,\"4181\":1,\"4507\":1,\"4518\":1,\"4552\":1,\"4824\":1,\"4933\":1}}],[\"synchronousqueue\",{\"1\":{\"3310\":2,\"3343\":1,\"4575\":2,\"4600\":1}}],[\"synchronize修饰静态的方法或指定锁对象为class对象\",{\"1\":{\"3173\":1}}],[\"synchronized关键字原理\",{\"1\":{\"4509\":1,\"4519\":1}}],[\"synchronized的使用\",{\"1\":{\"3181\":1}}],[\"synchronized的效率会远小于lock\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"synchronized修饰普通方法\",{\"1\":{\"3173\":1}}],[\"synchronized修饰的方法\",{\"1\":{\"3160\":1}}],[\"synchronizeddemo2\",{\"1\":{\"3174\":1,\"4518\":1}}],[\"synchronizeddemo\",{\"1\":{\"3163\":1,\"3164\":3,\"4507\":1,\"4508\":3}}],[\"synchronized原理\",{\"0\":{\"3156\":1,\"4505\":1}}],[\"synchronized是悲观锁\",{\"1\":{\"3092\":1,\"4368\":1}}],[\"synchronized和cas实现加锁效果\",{\"1\":{\"3091\":1,\"4367\":1}}],[\"synchronized和lock效率没差\",{\"1\":{\"2165\":1,\"4287\":1}}],[\"synchronizedlist可以指定锁定的对象\",{\"1\":{\"810\":1}}],[\"synchronizedlist有很好的扩展和兼容功能\",{\"1\":{\"808\":1}}],[\"synchronizedlist和vector最主要的区别\",{\"1\":{\"807\":1}}],[\"synchronizedlist和vector的一个比较明显区别就是一个使用了同步代码块\",{\"1\":{\"791\":1}}],[\"synchronizedlist和vector的区别\",{\"0\":{\"765\":1}}],[\"synchronizedlist中实现的类并没有都使用synchronized同步代码块\",{\"1\":{\"804\":1}}],[\"synchronizedlist的同步代码块锁定的是mutex对象\",{\"1\":{\"802\":1}}],[\"synchronizedlist的实现\",{\"1\":{\"775\":1,\"783\":1}}],[\"synchronizedlist里面实现的方法几乎都是使用同步代码块包上list的方法\",{\"1\":{\"791\":1}}],[\"synchronizedlist使用同步代码块实现\",{\"1\":{\"780\":1}}],[\"synchronizedlist\",{\"1\":{\"767\":1,\"770\":1,\"806\":1}}],[\"synchronizedlist是java\",{\"1\":{\"766\":1}}],[\"synchronized\",{\"0\":{\"2164\":1,\"3131\":1,\"4286\":1,\"4506\":1,\"4517\":1},\"1\":{\"421\":1,\"752\":1,\"774\":1,\"776\":1,\"784\":1,\"788\":1,\"820\":2,\"821\":1,\"1353\":1,\"1521\":1,\"1689\":1,\"1857\":1,\"3125\":1,\"3163\":2,\"3165\":1,\"3174\":2,\"3175\":3,\"3178\":1,\"3179\":2,\"3181\":2,\"3206\":1,\"3208\":2,\"3209\":1,\"3210\":1,\"3213\":1,\"3249\":1,\"3260\":1,\"3878\":1,\"4029\":2,\"4030\":1,\"4330\":1,\"4332\":2,\"4333\":1,\"4334\":1,\"4337\":1,\"4407\":1,\"4479\":1,\"4488\":1,\"4507\":2,\"4510\":1,\"4518\":2,\"4520\":3,\"4523\":1,\"4524\":2,\"4526\":1,\"4780\":1}}],[\"synchronization\",{\"1\":{\"752\":1}}],[\"sync\",{\"1\":{\"3215\":4,\"3217\":1,\"3274\":3,\"4339\":4,\"4341\":1,\"4502\":3}}],[\"syn\",{\"0\":{\"2427\":2},\"1\":{\"2312\":2,\"2338\":1,\"2341\":1,\"2343\":1}}],[\"suppresswarnings\",{\"1\":{\"3193\":1}}],[\"supported\",{\"1\":{\"1104\":1,\"4137\":1}}],[\"supports\",{\"1\":{\"1100\":1,\"4133\":1}}],[\"sum\",{\"1\":{\"1334\":5,\"1335\":3}}],[\"submitted\",{\"1\":{\"3288\":1,\"4552\":1}}],[\"submit\",{\"1\":{\"3286\":8,\"4550\":8}}],[\"subreactor\",{\"1\":{\"1500\":1,\"1501\":1,\"1668\":1,\"1669\":1,\"1836\":1,\"1837\":1,\"2004\":1,\"2005\":1,\"4927\":1,\"4928\":1}}],[\"sublist\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"subscriptions\",{\"1\":{\"1272\":3,\"5464\":3}}],[\"subscription>\",{\"1\":{\"1272\":1,\"5464\":1}}],[\"subtree\",{\"1\":{\"614\":1}}],[\"subclasses\",{\"1\":{\"411\":1,\"3866\":1}}],[\"sun\",{\"1\":{\"421\":3,\"968\":1,\"1014\":1,\"3878\":3}}],[\"survivor区\",{\"1\":{\"254\":1}}],[\"survivor\",{\"1\":{\"231\":1,\"254\":3,\"258\":1,\"259\":1,\"334\":5,\"335\":2}}],[\"second\",{\"1\":{\"3560\":1}}],[\"secondary\",{\"1\":{\"2622\":1,\"5000\":1}}],[\"sexnx\",{\"1\":{\"3545\":1,\"5814\":1}}],[\"seo\",{\"1\":{\"2522\":2,\"5620\":2}}],[\"session\",{\"1\":{\"2924\":1,\"5302\":1}}],[\"ses\",{\"1\":{\"2184\":2,\"4306\":2}}],[\"send\",{\"1\":{\"1437\":1,\"1464\":1,\"1469\":1,\"1486\":1,\"1502\":1,\"1605\":1,\"1632\":1,\"1637\":1,\"1654\":1,\"1670\":1,\"1773\":1,\"1800\":1,\"1805\":1,\"1822\":1,\"1838\":1,\"1941\":1,\"1968\":1,\"1973\":1,\"1990\":1,\"2006\":1,\"4864\":1,\"4891\":1,\"4896\":1,\"4913\":1,\"4929\":1}}],[\"sendfile\",{\"0\":{\"1414\":1,\"1582\":1,\"1750\":1,\"1918\":1,\"4841\":1},\"1\":{\"1401\":1,\"1415\":1,\"1416\":1,\"1422\":1,\"1433\":2,\"1569\":1,\"1583\":1,\"1584\":1,\"1590\":1,\"1601\":2,\"1737\":1,\"1751\":1,\"1752\":1,\"1758\":1,\"1769\":2,\"1905\":1,\"1919\":1,\"1920\":1,\"1926\":1,\"1937\":2,\"4828\":1,\"4842\":1,\"4843\":1,\"4849\":1,\"4860\":2}}],[\"selete\",{\"1\":{\"1397\":1,\"1565\":1,\"1733\":1,\"1901\":1,\"4824\":1}}],[\"select\",{\"0\":{\"2898\":2,\"5276\":2},\"1\":{\"1216\":3,\"1375\":1,\"1376\":1,\"1378\":1,\"1379\":2,\"1380\":1,\"1395\":1,\"1464\":1,\"1466\":1,\"1481\":1,\"1499\":1,\"1500\":1,\"1543\":1,\"1544\":1,\"1546\":1,\"1547\":2,\"1548\":1,\"1563\":1,\"1632\":1,\"1634\":1,\"1649\":1,\"1667\":1,\"1668\":1,\"1711\":1,\"1712\":1,\"1714\":1,\"1715\":2,\"1716\":1,\"1731\":1,\"1800\":1,\"1802\":1,\"1817\":1,\"1835\":1,\"1836\":1,\"1879\":1,\"1880\":1,\"1882\":1,\"1883\":2,\"1884\":1,\"1899\":1,\"1968\":1,\"1970\":1,\"1985\":1,\"2003\":1,\"2004\":1,\"2678\":1,\"2728\":2,\"2733\":1,\"2734\":1,\"2736\":2,\"2745\":2,\"2746\":1,\"2747\":2,\"2767\":1,\"2773\":1,\"2774\":2,\"2847\":1,\"2848\":2,\"2899\":1,\"2900\":1,\"2901\":1,\"4249\":3,\"4802\":1,\"4803\":1,\"4805\":1,\"4806\":2,\"4807\":1,\"4822\":1,\"4891\":1,\"4893\":1,\"4908\":1,\"4926\":1,\"4927\":1,\"5056\":1,\"5106\":2,\"5111\":1,\"5112\":1,\"5114\":2,\"5123\":2,\"5124\":1,\"5125\":2,\"5145\":1,\"5151\":1,\"5152\":2,\"5225\":1,\"5226\":2,\"5277\":1,\"5278\":1,\"5279\":1}}],[\"semaphores\",{\"1\":{\"1368\":1,\"1536\":1,\"1704\":1,\"1872\":1,\"4795\":1}}],[\"semaphore\",{\"1\":{\"1355\":1,\"1523\":1,\"1691\":1,\"1859\":1,\"3061\":1,\"4415\":1,\"4782\":1}}],[\"sequencenumber\",{\"1\":{\"1302\":1,\"5494\":1}}],[\"segmentmask\",{\"1\":{\"1014\":1}}],[\"segmentshift\",{\"1\":{\"1014\":1}}],[\"segment\",{\"1\":{\"1014\":1}}],[\"se\",{\"1\":{\"523\":1,\"525\":1,\"527\":1,\"609\":1,\"678\":1,\"727\":1}}],[\"setinitialvalue\",{\"1\":{\"3193\":1}}],[\"set或get方法时才创建它们\",{\"1\":{\"3191\":1,\"4535\":1}}],[\"setnx\",{\"1\":{\"2926\":1,\"3546\":1,\"5304\":1,\"5815\":1}}],[\"setting\",{\"1\":{\"1223\":1,\"4256\":1}}],[\"setter循环依赖注入解决方案\",{\"1\":{\"1114\":1,\"4147\":1}}],[\"set等的父接口\",{\"1\":{\"704\":1}}],[\"set如何保证元素不重复\",{\"0\":{\"695\":1}}],[\"set在元素插入时是要有一定的方法来判断元素是否重复的\",{\"1\":{\"694\":1}}],[\"set可以用来去重\",{\"1\":{\"694\":1}}],[\"set特点\",{\"1\":{\"693\":1}}],[\"set都是继承自collection接口\",{\"1\":{\"690\":1}}],[\"set和list区别\",{\"0\":{\"689\":1}}],[\"set还有一个重要的实现类treeset\",{\"1\":{\"683\":1}}],[\"setaccessible\",{\"1\":{\"508\":1,\"925\":2,\"930\":3,\"943\":8,\"3959\":1}}],[\"set\",{\"0\":{\"679\":1,\"2935\":1,\"3973\":1,\"5313\":1},\"1\":{\"379\":3,\"2775\":1,\"2913\":1,\"2937\":1,\"2938\":2,\"2939\":1,\"3019\":1,\"3186\":1,\"3191\":1,\"3193\":2,\"3200\":1,\"3288\":1,\"3545\":1,\"4531\":1,\"4535\":1,\"4537\":2,\"4552\":1,\"5153\":1,\"5291\":1,\"5315\":1,\"5316\":2,\"5317\":1,\"5397\":1,\"5814\":1}}],[\"server3\",{\"1\":{\"2126\":1,\"2129\":5,\"2136\":2,\"2139\":2,\"4731\":1,\"4734\":5,\"4741\":2,\"4744\":2}}],[\"server2\",{\"1\":{\"2125\":4,\"2127\":1,\"2136\":2,\"2141\":2,\"4730\":4,\"4732\":1,\"4741\":2,\"4746\":2}}],[\"server1也会\",{\"1\":{\"2125\":1,\"4730\":1}}],[\"server1\",{\"1\":{\"2124\":3,\"2125\":2,\"2129\":5,\"2136\":3,\"2139\":3,\"2141\":1,\"4729\":3,\"4730\":2,\"4734\":5,\"4741\":3,\"4744\":3,\"4746\":1}}],[\"server\",{\"1\":{\"352\":1,\"1159\":1,\"2022\":1,\"2127\":1,\"2128\":1,\"2129\":2,\"2130\":1,\"2141\":2,\"2512\":1,\"2524\":1,\"2526\":1,\"2527\":1,\"2531\":1,\"2536\":1,\"2537\":2,\"2538\":1,\"2539\":1,\"2540\":1,\"2541\":2,\"2974\":1,\"3002\":1,\"3003\":1,\"3004\":1,\"3006\":1,\"3009\":1,\"3571\":2,\"4192\":1,\"4627\":1,\"4732\":1,\"4733\":1,\"4734\":2,\"4735\":1,\"4746\":2,\"5352\":1,\"5380\":1,\"5381\":1,\"5382\":1,\"5384\":1,\"5387\":1,\"5610\":1,\"5622\":1,\"5624\":1,\"5625\":1,\"5629\":1,\"5634\":1,\"5635\":2,\"5636\":1,\"5637\":1,\"5638\":1,\"5639\":2}}],[\"serializable\",{\"1\":{\"1095\":1,\"2835\":1,\"3214\":1,\"4128\":1,\"4338\":1,\"5213\":1}}],[\"serialized\",{\"1\":{\"752\":1}}],[\"serialize\",{\"1\":{\"749\":1,\"752\":1}}],[\"serialdata\",{\"1\":{\"749\":1}}],[\"serial\",{\"1\":{\"346\":1,\"349\":1,\"351\":1,\"352\":1,\"358\":1}}],[\"store\",{\"1\":{\"3144\":1,\"4456\":1}}],[\"stop\",{\"1\":{\"364\":1}}],[\"sticky是\",{\"1\":{\"1286\":1,\"5478\":1}}],[\"stickyassignor的分配策略\",{\"1\":{\"1294\":1,\"5486\":1}}],[\"stickyassignor算法比较复杂\",{\"1\":{\"1290\":1,\"5482\":1}}],[\"stickyassignor分区分配算法\",{\"1\":{\"1286\":1,\"5478\":1}}],[\"stickyassignor\",{\"1\":{\"1266\":1,\"1285\":1,\"5458\":1,\"5477\":1}}],[\"stuent\",{\"1\":{\"2715\":1,\"5093\":1}}],[\"student\",{\"1\":{\"1216\":2,\"2714\":1,\"2715\":1,\"4249\":2,\"5092\":1,\"5093\":1}}],[\"stuff\",{\"1\":{\"749\":1}}],[\"stream\",{\"1\":{\"749\":1,\"752\":1,\"2066\":1,\"4671\":1}}],[\"stringbuffer\",{\"1\":{\"3386\":1,\"5666\":1}}],[\"stringbuilder\",{\"1\":{\"3386\":1,\"5666\":1}}],[\"stringhash32\",{\"1\":{\"968\":1,\"1014\":1}}],[\"stringname\",{\"1\":{\"513\":1}}],[\"string>\",{\"1\":{\"480\":1,\"483\":1,\"485\":2,\"491\":2,\"499\":1,\"925\":2,\"930\":6,\"943\":1,\"3931\":1,\"3934\":1,\"3936\":2,\"3942\":2,\"3950\":1}}],[\"string\",{\"0\":{\"2916\":1,\"5294\":1},\"1\":{\"251\":1,\"281\":1,\"291\":1,\"408\":1,\"409\":1,\"411\":1,\"412\":2,\"421\":1,\"457\":2,\"485\":1,\"491\":1,\"513\":1,\"515\":2,\"968\":2,\"1014\":2,\"1061\":1,\"1116\":1,\"1263\":2,\"1272\":2,\"2913\":1,\"2918\":1,\"3200\":1,\"3286\":1,\"3565\":1,\"3863\":1,\"3864\":1,\"3866\":1,\"3867\":2,\"3878\":1,\"3936\":1,\"3942\":1,\"3964\":2,\"3966\":2,\"4094\":1,\"4149\":1,\"4550\":1,\"5291\":1,\"5296\":1,\"5455\":2,\"5464\":2}}],[\"stw\",{\"1\":{\"364\":1}}],[\"start\",{\"1\":{\"1272\":3,\"2775\":1,\"5153\":1,\"5464\":3}}],[\"starter解决的是依赖管理配置复杂的问题\",{\"1\":{\"1181\":1,\"4214\":1}}],[\"starter的目的也是简化配置\",{\"1\":{\"1181\":1,\"4214\":1}}],[\"starter\",{\"0\":{\"1180\":1,\"4213\":1},\"1\":{\"1139\":1,\"1146\":1,\"1178\":1,\"1181\":1,\"1183\":1,\"1184\":1,\"1185\":1,\"1186\":2,\"1194\":1,\"4172\":1,\"4179\":1,\"4211\":1,\"4214\":1,\"4216\":1,\"4217\":1,\"4218\":1,\"4219\":2,\"4227\":1}}],[\"start2\",{\"1\":{\"601\":2}}],[\"start1\",{\"1\":{\"601\":2}}],[\"status\",{\"1\":{\"3511\":2,\"5780\":2}}],[\"statement\",{\"1\":{\"2768\":1,\"5146\":1}}],[\"statements\",{\"1\":{\"449\":1,\"3908\":1}}],[\"state\",{\"1\":{\"749\":1,\"752\":1}}],[\"static\",{\"1\":{\"251\":1,\"449\":1,\"452\":1,\"457\":1,\"463\":2,\"466\":1,\"468\":1,\"820\":2,\"851\":1,\"917\":1,\"921\":1,\"968\":1,\"1020\":1,\"1028\":1,\"1116\":1,\"3200\":4,\"3201\":1,\"3286\":1,\"3908\":1,\"3911\":1,\"3917\":1,\"3919\":1,\"4029\":2,\"4060\":1,\"4149\":1,\"4550\":1}}],[\"stack<>\",{\"1\":{\"544\":1}}],[\"stack<integer>\",{\"1\":{\"544\":1}}],[\"stack\",{\"0\":{\"532\":1,\"538\":1,\"562\":1},\"1\":{\"211\":1,\"213\":1,\"534\":1,\"537\":1,\"539\":1,\"542\":2,\"544\":4,\"546\":2,\"565\":1,\"568\":1,\"578\":2,\"579\":1,\"583\":2,\"586\":1,\"587\":2,\"588\":1,\"591\":1,\"592\":2,\"606\":1}}],[\"stackoverflowerror\",{\"1\":{\"208\":1}}],[\"s1\",{\"1\":{\"231\":1}}],[\"sk\",{\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,Et(t,{fields:[p.heading,p.text,p.customFields],storeFields:[p.heading,p.text,p.customFields]})]));self.onmessage=({data:{query:e,locale:t,options:s}})=>{self.postMessage(kt(e,vt[t],s))};
//# sourceMappingURL=index.js.map
