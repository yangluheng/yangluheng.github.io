const it="ENTRIES",R="KEYS",q="VALUES",_="";class S{constructor(t,s){const n=t._tree,i=Array.from(n.keys());this.set=t,this._type=s,this._path=i.length>0?[{node:n,keys:i}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=x(this._path);if(x(s)===_)return{done:!1,value:this.result()};const n=t.get(x(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=x(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>x(t)).filter(t=>t!==_).join("")}value(){return x(this._path).node.get(_)}result(){switch(this._type){case q:return this.value();case R:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const x=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const i=t.length+1,u=i+s,o=new Uint8Array(u*i).fill(s+1);for(let r=0;r<i;++r)o[r]=r;for(let r=1;r<u;++r)o[r*i]=r;return P(e,t,s,n,o,1,i,""),n},P=(e,t,s,n,i,u,o,r)=>{const a=u*o;t:for(const c of e.keys())if(c===_){const d=i[a-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const m=c[l],F=o*d,f=F-o;let h=i[F];const g=Math.max(0,d-s-1),A=Math.min(o-1,d+s);for(let C=g;C<A;++C){const B=m!==t[C],b=i[f+C]+ +B,z=i[f+C+1]+1,D=i[F+C]+1,W=i[F+C+1]=Math.min(b,z,D);W<h&&(h=W)}if(h>s)continue t}P(e.get(c),t,s,n,i,d,o,r+c)}};let N=class v{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[i,u]=V(n);for(const o of i.keys())if(o!==_&&o.startsWith(u)){const r=new Map;return r.set(o.slice(u.length),i.get(o)),new v(r,t)}}return new v(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new S(this,it)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=j(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=j(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new S(this,R)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,L(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=L(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=L(this._tree,t);let i=n.get(_);return i===void 0&&n.set(_,i=s()),i}values(){return new S(this,q)}[Symbol.iterator](){return this.entries()}static from(t){const s=new v;for(const[n,i]of t)s.set(n,i);return s}static fromObject(t){return v.from(Object.entries(t))}};const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},j=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return j(e.get(s),t.slice(s.length))},L=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const o=Math.min(s-n,u.length);let r=1;for(;r<o&&t[n+r]===u[r];)++r;const a=e.get(u);if(r===u.length)e=a;else{const c=new Map;c.set(u.slice(r),a),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const i=new Map;return e.set(t.slice(n),i),i}return e},ot=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)G(n);else if(s.size===1){const[i,u]=s.entries().next().value;J(n,i,u)}}},G=e=>{if(e.length===0)return;const[t,s]=V(e);if(t.delete(s),t.size===0)G(e.slice(0,-1));else if(t.size===1){const[n,i]=t.entries().next().value;n!==_&&J(e.slice(0,-1),n,i)}},J=(e,t,s)=>{if(e.length===0)return;const[n,i]=V(e);n.set(i+t,s),n.delete(i)},V=e=>e[e.length-1],rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,T="or",U="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},H=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},ht=({score:e},{score:t})=>t-e,dt=()=>new Map,O=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},K=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,at={[T]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:i,terms:u,match:o}=t.get(s);n.score=n.score+i,n.match=Object.assign(n.match,o),H(n.terms,u)}}return e},[U]:(e,t)=>{const s=new Map;for(const n of t.keys()){const i=e.get(n);if(i==null)continue;const{score:u,terms:o,match:r}=t.get(n);H(i.terms,o),s.set(n,{score:i.score+u,terms:i.terms,match:Object.assign(i.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},ft=(e,t,s,n,i,u)=>{const{k:o,b:r,d:a}=u;return Math.log(1+(s-t+.5)/(t+.5))*(a+e*(o+1)/(e+o*(1-r+r*n/i)))},Ft=e=>(t,s,n)=>{const i=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:i,prefix:u}},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},X={combineWith:T,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:U,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={..._t,...Y};class At{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...X,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new N,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const i={};for(const[u,o]of n)i[u]=Object.fromEntries(o);t.push([s,i])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const Q=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},Z=(e,t,s,n)=>{for(const i of Object.keys(e._fieldIds))if(e._fieldIds[i]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${i}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},Ct=(e,t,s,n)=>{if(!e._index.has(n)){Z(e,s,t,n);return}const i=e._index.fetch(n,dt),u=i.get(t);u==null||u.get(s)==null?Z(e,s,t,n):u.get(s)<=1?u.size<=1?i.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},tt=(e,t=T)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(at[s])||new Map},$=(e,t,s,n,i,u,o,r,a=new Map)=>{if(i==null)return a;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],m=i.get(l);if(m==null)continue;let F=m.size;const f=e._avgFieldLength[l];for(const h of m.keys()){if(!e._documentIds.has(h)){Ct(e,l,h,s),F-=1;continue}const g=o?o(e._documentIds.get(h),s,e._storedFields.get(h)):1;if(!g)continue;const A=m.get(h),C=e._fieldLength.get(h)[l],B=ft(A,F,e._documentCount,C,f,r),b=n*d*g*B,z=a.get(h);if(z){z.score+=b,lt(z.terms,t);const D=K(z.match,s);D?D.push(c):z.match[s]=[c]}else a.set(h,{score:b,terms:[t],match:{[s]:[c]}})}}return a},zt=(e,t,s)=>{const n={...e._options.searchOptions,...s},i=(n.fields||e._options.fields).reduce((h,g)=>({...h,[g]:K(n.boost,g)||1}),{}),{boostDocument:u,weights:o,maxFuzzy:r,bm25:a}=n,{fuzzy:c,prefix:d}={...X.weights,...o},l=e._index.get(t.term),m=$(e,t.term,t.term,1,l,i,u,a);let F,f;if(t.prefix&&(F=e._index.atPrefix(t.term)),t.fuzzy){const h=t.fuzzy===!0?.2:t.fuzzy,g=h<1?Math.min(r,Math.round(t.term.length*h)):h;g&&(f=e._index.fuzzyGet(t.term,g))}if(F)for(const[h,g]of F){const A=h.length-t.term.length;if(!A)continue;f==null||f.delete(h);const C=d*h.length/(h.length+.3*A);$(e,t.term,h,C,g,i,u,a,m)}if(f)for(const h of f.keys()){const[g,A]=f.get(h);if(!A)continue;const C=c*h.length/(h.length+A);$(e,t.term,h,C,g,i,u,a,m)}return m},et=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(m=>et(e,m,d));return tt(l,d.combineWith)}const{tokenize:n,processTerm:i,searchOptions:u}=e._options,o={tokenize:n,processTerm:i,...u,...s},{tokenize:r,processTerm:a}=o,c=r(t).flatMap(d=>a(d)).filter(d=>!!d).map(Ft(o)).map(d=>zt(e,d,o));return tt(c,o.combineWith)},xt=(e,t,s={})=>{const n=et(e,t,s),i=[];for(const[u,{score:o,terms:r,match:a}]of n){const c=r.length,d={id:e._documentIds.get(u),score:o*c,terms:Object.keys(a),match:a};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&i.push(d)}return i.sort(ht),i},Et=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:i,fieldLength:u,averageFieldLength:o,storedFields:r,dirtCount:a,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new At(d);l._documentCount=t,l._nextId=s,l._documentIds=O(n),l._idToShortId=new Map,l._fieldIds=i,l._fieldLength=O(u),l._avgFieldLength=o,l._storedFields=O(r),l._dirtCount=a||0,l._index=new N;for(const[m,F]of l._documentIds)l._idToShortId.set(F,m);for(const[m,F]of e){const f=new Map;for(const h of Object.keys(F)){let g=F[h];c===1&&(g=g.ds),f.set(parseInt(h,10),O(g))}l._index.set(m,f)}return l},st=Object.entries,wt=Object.fromEntries,E=100,w=20,M=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),i=[];let u=0,o=0;const r=(c,d=!1)=>{let l="";o===0?l=c.length>w?`… ${c.slice(-w)}`:c:d?l=c.length+o>E?`${c.slice(0,E-o)}… `:c:l=c.length>w?`${c.slice(0,w)} … ${c.slice(-w)}`:c,l&&i.push(l),o+=l.length,d||(i.push(["mark",t]),o+=t.length,o>=E&&i.push(" …"))};let a=s.indexOf(n,u);if(a===-1)return null;for(;a>=0;){const c=a+n.length;if(r(e.slice(u,a)),u=c,o>E)break;a=s.indexOf(n,u)}return o<E&&r(e.slice(u),!0),i};var p=(e=>(e.heading="h",e.anchor="a",e.text="t",e.customFields="c",e))(p||{}),k=(e=>(e.title="t",e.heading="h",e.text="p",e.custom="c",e))(k||{}),y=(e=>(e.type="t",e.key="k",e.anchor="a",e.header="h",e.index="i",e.display="d",e))(y||{});const nt=/[\u4e00-\u9fa5]/g,kt=(e,t,s={})=>{const n={};return xt(t,e,{fuzzy:.2,prefix:!0,boost:{[p.heading]:2,[p.text]:1,[p.customFields]:4},processTerm:i=>{const u=i.match(nt)||[],o=i.replace(nt,"").toLowerCase();return o?[o,...u]:[...u]},...s}).forEach(i=>{const{id:u,terms:o,score:r}=i,a=u.includes("/"),c=!a&&u.includes("#"),d=u.includes("@"),[l,m]=u.split(/[#@]/),{contents:F}=n[l]??={title:"",contents:[]};if(c)F.push([{[y.type]:k.heading,[y.key]:l,[y.anchor]:i[p.anchor],[y.display]:o.map(f=>M(i[p.heading],f)).filter(f=>f!==null)},r]);else if(a){const[f]=m.split("/"),{[p.heading]:h="",[p.anchor]:g=""}=Q(t,`${l}#${f}`)||{};F.push([{[y.type]:k.text,[y.key]:l,[y.header]:h,[y.anchor]:g,[y.display]:o.map(A=>M(i[p.text],A)).filter(A=>A!==null)},r])}else d?F.push([{[y.type]:k.custom,[y.key]:l,[y.index]:m,[y.display]:o.map(f=>i[p.customFields].map(h=>M(h,f))).flat().filter(f=>f!==null)},r]):F.push([{[y.type]:k.title,[y.key]:l,[y.display]:o.map(f=>M(i[p.heading],f)).filter(f=>f!==null)},r])}),st(n).sort(([,i],[,u])=>u.contents.reduce((o,[,r])=>o+r,0)-i.contents.reduce((o,[,r])=>o+r,0)).map(([i,{title:u,contents:o}])=>{if(!u){const r=Q(t,i);r&&(u=r[p.heading])}return{title:u,contents:o.map(([r])=>r)}})},vt=wt(st(JSON.parse("{\"/\":{\"documentCount\":5488,\"nextId\":5488,\"documentIds\":{\"0\":\"v-2e3eac9e\",\"1\":\"v-1473bf53\",\"2\":\"v-1473bf53#1\",\"3\":\"v-1473bf53#1/0\",\"4\":\"v-1473bf53#1/1\",\"5\":\"v-1473bf53#1/2\",\"6\":\"v-1473bf53#1/3\",\"7\":\"v-4e65ec78\",\"8\":\"v-4e65ec78#0/0\",\"9\":\"v-4e65ec78#0/1\",\"10\":\"v-4e65ec78#0/2\",\"11\":\"v-4e65ec78#0/3\",\"12\":\"v-4e65ec78#0/4\",\"13\":\"v-4e65ec78#0/5\",\"14\":\"v-4e65ec78#0/6\",\"15\":\"v-4e65ec78#0/7\",\"16\":\"v-4e65ec78#0/8\",\"17\":\"v-4e65ec78#0/9\",\"18\":\"v-4e65ec78#0/10\",\"19\":\"v-4e65ec78#0/11\",\"20\":\"v-4e65ec78#0/12\",\"21\":\"v-c151bf32\",\"22\":\"v-c151bf32#0/0\",\"23\":\"v-c151bf32#0/1\",\"24\":\"v-c151bf32#0/2\",\"25\":\"v-438ffe52\",\"26\":\"v-438ffe52#0/0\",\"27\":\"v-438ffe52#0/1\",\"28\":\"v-438ffe52#1\",\"29\":\"v-438ffe52#1/0\",\"30\":\"v-438ffe52#2\",\"31\":\"v-438ffe52#2/0\",\"32\":\"v-438ffe52#2/1\",\"33\":\"v-438ffe52#2/2\",\"34\":\"v-438ffe52#3\",\"35\":\"v-438ffe52#3/0\",\"36\":\"v-438ffe52#4\",\"37\":\"v-438ffe52#4/0\",\"38\":\"v-438ffe52#4/1\",\"39\":\"v-438ffe52#5\",\"40\":\"v-438ffe52#5/0\",\"41\":\"v-438ffe52#6\",\"42\":\"v-438ffe52#6/0\",\"43\":\"v-438ffe52#6/1\",\"44\":\"v-438ffe52#6/2\",\"45\":\"v-438ffe52#6/3\",\"46\":\"v-438ffe52#6/4\",\"47\":\"v-438ffe52#6/5\",\"48\":\"v-438ffe52#6/6\",\"49\":\"v-438ffe52#6/7\",\"50\":\"v-438ffe52#6/8\",\"51\":\"v-438ffe52#6/9\",\"52\":\"v-438ffe52#6/10\",\"53\":\"v-438ffe52#6/11\",\"54\":\"v-438ffe52#6/12\",\"55\":\"v-438ffe52#7\",\"56\":\"v-438ffe52#7/0\",\"57\":\"v-438ffe52#8\",\"58\":\"v-438ffe52#8/0\",\"59\":\"v-438ffe52#8/1\",\"60\":\"v-438ffe52#9\",\"61\":\"v-438ffe52#9/0\",\"62\":\"v-438ffe52#9/1\",\"63\":\"v-438ffe52#9/2\",\"64\":\"v-438ffe52#10\",\"65\":\"v-438ffe52#10/0\",\"66\":\"v-438ffe52#10/1\",\"67\":\"v-438ffe52#11\",\"68\":\"v-438ffe52#11/0\",\"69\":\"v-438ffe52#11/1\",\"70\":\"v-438ffe52#12\",\"71\":\"v-438ffe52#12/0\",\"72\":\"v-438ffe52#12/1\",\"73\":\"v-438ffe52#13\",\"74\":\"v-438ffe52#13/0\",\"75\":\"v-438ffe52#13/1\",\"76\":\"v-438ffe52#13/2\",\"77\":\"v-438ffe52#14\",\"78\":\"v-438ffe52#14/0\",\"79\":\"v-438ffe52#14/1\",\"80\":\"v-438ffe52#15\",\"81\":\"v-438ffe52#15/0\",\"82\":\"v-438ffe52#15/1\",\"83\":\"v-438ffe52#16\",\"84\":\"v-438ffe52#16/0\",\"85\":\"v-438ffe52#17\",\"86\":\"v-438ffe52#17/0\",\"87\":\"v-438ffe52#18\",\"88\":\"v-438ffe52#18/0\",\"89\":\"v-438ffe52#19\",\"90\":\"v-438ffe52#19/0\",\"91\":\"v-438ffe52#20\",\"92\":\"v-438ffe52#20/0\",\"93\":\"v-438ffe52#20/1\",\"94\":\"v-438ffe52#21\",\"95\":\"v-438ffe52#21/0\",\"96\":\"v-438ffe52#21/1\",\"97\":\"v-438ffe52#21/2\",\"98\":\"v-438ffe52#21/3\",\"99\":\"v-438ffe52#21/4\",\"100\":\"v-438ffe52#22\",\"101\":\"v-438ffe52#22/0\",\"102\":\"v-438ffe52#23\",\"103\":\"v-438ffe52#23/0\",\"104\":\"v-438ffe52#23/1\",\"105\":\"v-438ffe52#24\",\"106\":\"v-438ffe52#24/0\",\"107\":\"v-438ffe52#25\",\"108\":\"v-438ffe52#25/0\",\"109\":\"v-438ffe52#26\",\"110\":\"v-438ffe52#26/0\",\"111\":\"v-438ffe52#26/1\",\"112\":\"v-6e19edb7\",\"113\":\"v-6e19edb7#0/0\",\"114\":\"v-6e19edb7#1\",\"115\":\"v-6e19edb7#1/0\",\"116\":\"v-6e19edb7#1/1\",\"117\":\"v-6e19edb7#1/2\",\"118\":\"v-6e19edb7#1/3\",\"119\":\"v-6e19edb7#1/4\",\"120\":\"v-6e19edb7#2\",\"121\":\"v-6e19edb7#2/0\",\"122\":\"v-6e19edb7#2/1\",\"123\":\"v-6e19edb7#2/2\",\"124\":\"v-6e19edb7#2/3\",\"125\":\"v-6e19edb7#2/4\",\"126\":\"v-6e19edb7#2/5\",\"127\":\"v-6e19edb7#3\",\"128\":\"v-6e19edb7#3/0\",\"129\":\"v-6e19edb7#3/1\",\"130\":\"v-6e19edb7#3/2\",\"131\":\"v-6e19edb7#3/3\",\"132\":\"v-6e19edb7#3/4\",\"133\":\"v-6e19edb7#3/5\",\"134\":\"v-6e19edb7#3/6\",\"135\":\"v-6e19edb7#3/7\",\"136\":\"v-6e19edb7#3/8\",\"137\":\"v-6e19edb7#3/9\",\"138\":\"v-6e19edb7#3/10\",\"139\":\"v-fffb8e28\",\"140\":\"v-fffb8e28#1\",\"141\":\"v-fffb8e28#2\",\"142\":\"v-fffb8e28#2/0\",\"143\":\"v-fffb8e28#2/1\",\"144\":\"v-fffb8e28#3\",\"145\":\"v-fffb8e28#3/0\",\"146\":\"v-fffb8e28#3/1\",\"147\":\"v-151af027\",\"148\":\"v-151af027#0/0\",\"149\":\"v-151af027#0/1\",\"150\":\"v-151af027#0/2\",\"151\":\"v-2d0ad528\",\"152\":\"v-2d0ad528#0/0\",\"153\":\"v-2d0ad528#0/1\",\"154\":\"v-2d0ad528#0/2\",\"155\":\"v-269ae70f\",\"156\":\"v-5d5c2d30\",\"157\":\"v-5d5c2d30#1\",\"158\":\"v-5d5c2d30#1/0\",\"159\":\"v-5d5c2d30#2\",\"160\":\"v-5d5c2d30#2/0\",\"161\":\"v-5d5c2d30#2/1\",\"162\":\"v-177e1f06\",\"163\":\"v-177e1f06#0/0\",\"164\":\"v-5d5821d6\",\"165\":\"v-5d5821d6#1\",\"166\":\"v-5d5821d6#1/0\",\"167\":\"v-5d5821d6#2\",\"168\":\"v-5d5821d6#2/0\",\"169\":\"v-5d5821d6#2/1\",\"170\":\"v-0b6fc5f8\",\"171\":\"v-0b6fc5f8#0/0\",\"172\":\"v-a4e90f26\",\"173\":\"v-a4e90f26#1\",\"174\":\"v-a4e90f26#2\",\"175\":\"v-a4e90f26#3\",\"176\":\"v-a4e90f26#3/0\",\"177\":\"v-a4e90f26#3/1\",\"178\":\"v-a4e90f26#3/2\",\"179\":\"v-a4e90f26#3/3\",\"180\":\"v-a4e90f26#3/4\",\"181\":\"v-a4e90f26#4\",\"182\":\"v-a4e90f26#5\",\"183\":\"v-a4e90f26#6\",\"184\":\"v-a4e90f26#7\",\"185\":\"v-a4e90f26#8\",\"186\":\"v-a4e90f26#9\",\"187\":\"v-a4e90f26#10\",\"188\":\"v-a4e90f26#10/0\",\"189\":\"v-a4e90f26#10/1\",\"190\":\"v-a4e90f26#10/2\",\"191\":\"v-a4e90f26#11\",\"192\":\"v-a4e90f26#11/0\",\"193\":\"v-a4e90f26#11/1\",\"194\":\"v-a4e90f26#11/2\",\"195\":\"v-a4e90f26#12\",\"196\":\"v-a4e90f26#13\",\"197\":\"v-a4e90f26#13/0\",\"198\":\"v-a4e90f26#13/1\",\"199\":\"v-a4e90f26#13/2\",\"200\":\"v-a4e90f26#13/3\",\"201\":\"v-a4e90f26#14\",\"202\":\"v-a4e90f26#14/0\",\"203\":\"v-a4e90f26#14/1\",\"204\":\"v-a4e90f26#15\",\"205\":\"v-a4e90f26#15/0\",\"206\":\"v-a4e90f26#15/1\",\"207\":\"v-a4e90f26#15/2\",\"208\":\"v-a4e90f26#15/3\",\"209\":\"v-a4e90f26#15/4\",\"210\":\"v-a4e90f26#15/5\",\"211\":\"v-a4e90f26#15/6\",\"212\":\"v-a4e90f26#15/7\",\"213\":\"v-a4e90f26#15/8\",\"214\":\"v-a4e90f26#15/9\",\"215\":\"v-a4e90f26#15/10\",\"216\":\"v-a4e90f26#15/11\",\"217\":\"v-a4e90f26#15/12\",\"218\":\"v-a4e90f26#15/13\",\"219\":\"v-a4e90f26#16\",\"220\":\"v-a4e90f26#16/0\",\"221\":\"v-a4e90f26#16/1\",\"222\":\"v-a4e90f26#16/2\",\"223\":\"v-a4e90f26#16/3\",\"224\":\"v-a4e90f26#16/4\",\"225\":\"v-a4e90f26#16/5\",\"226\":\"v-a4e90f26#16/6\",\"227\":\"v-a4e90f26#16/7\",\"228\":\"v-a4e90f26#16/8\",\"229\":\"v-a4e90f26#16/9\",\"230\":\"v-a4e90f26#16/10\",\"231\":\"v-a4e90f26#16/11\",\"232\":\"v-a4e90f26#16/12\",\"233\":\"v-a4e90f26#16/13\",\"234\":\"v-a4e90f26#16/14\",\"235\":\"v-142f925f\",\"236\":\"v-142f925f#1\",\"237\":\"v-142f925f#2\",\"238\":\"v-142f925f#2/0\",\"239\":\"v-142f925f#2/1\",\"240\":\"v-142f925f#2/2\",\"241\":\"v-142f925f#2/3\",\"242\":\"v-142f925f#2/4\",\"243\":\"v-142f925f#2/5\",\"244\":\"v-142f925f#2/6\",\"245\":\"v-142f925f#2/7\",\"246\":\"v-142f925f#3\",\"247\":\"v-142f925f#3/8\",\"248\":\"v-142f925f#3/9\",\"249\":\"v-142f925f#3/10\",\"250\":\"v-142f925f#3/11\",\"251\":\"v-142f925f#3/12\",\"252\":\"v-142f925f#4\",\"253\":\"v-142f925f#4/0\",\"254\":\"v-142f925f#4/1\",\"255\":\"v-142f925f#4/2\",\"256\":\"v-142f925f#4/3\",\"257\":\"v-142f925f#4/4\",\"258\":\"v-142f925f#4/5\",\"259\":\"v-142f925f#5\",\"260\":\"v-142f925f#5/6\",\"261\":\"v-142f925f#5/7\",\"262\":\"v-142f925f#5/8\",\"263\":\"v-142f925f#5/9\",\"264\":\"v-142f925f#5/10\",\"265\":\"v-142f925f#6\",\"266\":\"v-142f925f#6/0\",\"267\":\"v-142f925f#6/1\",\"268\":\"v-142f925f#6/2\",\"269\":\"v-142f925f#6/3\",\"270\":\"v-142f925f#7\",\"271\":\"v-142f925f#7/4\",\"272\":\"v-142f925f#7/5\",\"273\":\"v-142f925f#7/6\",\"274\":\"v-142f925f#7/7\",\"275\":\"v-142f925f#7/8\",\"276\":\"v-142f925f#7/9\",\"277\":\"v-142f925f#7/10\",\"278\":\"v-142f925f#7/11\",\"279\":\"v-142f925f#7/12\",\"280\":\"v-142f925f#7/13\",\"281\":\"v-142f925f#8\",\"282\":\"v-142f925f#9\",\"283\":\"v-142f925f#9/0\",\"284\":\"v-142f925f#9/1\",\"285\":\"v-142f925f#9/2\",\"286\":\"v-142f925f#9/3\",\"287\":\"v-142f925f#9/4\",\"288\":\"v-142f925f#9/5\",\"289\":\"v-142f925f#9/6\",\"290\":\"v-142f925f#9/7\",\"291\":\"v-142f925f#9/8\",\"292\":\"v-142f925f#9/9\",\"293\":\"v-142f925f#9/10\",\"294\":\"v-142f925f#9/11\",\"295\":\"v-142f925f#9/12\",\"296\":\"v-142f925f#9/13\",\"297\":\"v-142f925f#9/14\",\"298\":\"v-142f925f#9/15\",\"299\":\"v-142f925f#9/16\",\"300\":\"v-142f925f#9/17\",\"301\":\"v-142f925f#10\",\"302\":\"v-142f925f#10/0\",\"303\":\"v-142f925f#10/1\",\"304\":\"v-142f925f#10/2\",\"305\":\"v-142f925f#10/3\",\"306\":\"v-142f925f#10/4\",\"307\":\"v-142f925f#10/5\",\"308\":\"v-142f925f#10/6\",\"309\":\"v-142f925f#11\",\"310\":\"v-142f925f#11/0\",\"311\":\"v-142f925f#11/1\",\"312\":\"v-142f925f#11/2\",\"313\":\"v-142f925f#11/3\",\"314\":\"v-142f925f#11/4\",\"315\":\"v-142f925f#11/5\",\"316\":\"v-142f925f#11/6\",\"317\":\"v-142f925f#12\",\"318\":\"v-142f925f#12/0\",\"319\":\"v-142f925f#12/1\",\"320\":\"v-142f925f#12/2\",\"321\":\"v-142f925f#12/3\",\"322\":\"v-142f925f#12/4\",\"323\":\"v-142f925f#12/5\",\"324\":\"v-142f925f#12/6\",\"325\":\"v-142f925f#12/7\",\"326\":\"v-142f925f#12/8\",\"327\":\"v-0768d746\",\"328\":\"v-0768d746#0/0\",\"329\":\"v-0768d746#0/1\",\"330\":\"v-0768d746#0/2\",\"331\":\"v-0768d746#0/3\",\"332\":\"v-0768d746#1\",\"333\":\"v-0768d746#1/4\",\"334\":\"v-0768d746#1/5\",\"335\":\"v-0768d746#1/6\",\"336\":\"v-0768d746#1/7\",\"337\":\"v-0768d746#1/8\",\"338\":\"v-0768d746#2\",\"339\":\"v-0768d746#2/0\",\"340\":\"v-0768d746#2/1\",\"341\":\"v-0768d746#2/2\",\"342\":\"v-0768d746#2/3\",\"343\":\"v-0768d746#2/4\",\"344\":\"v-0768d746#2/5\",\"345\":\"v-0768d746#2/6\",\"346\":\"v-0768d746#2/7\",\"347\":\"v-0768d746#3\",\"348\":\"v-0768d746#3/0\",\"349\":\"v-0768d746#3/1\",\"350\":\"v-0768d746#3/2\",\"351\":\"v-0768d746#3/3\",\"352\":\"v-0768d746#3/4\",\"353\":\"v-0768d746#3/5\",\"354\":\"v-0768d746#4\",\"355\":\"v-0768d746#4/0\",\"356\":\"v-0768d746#4/1\",\"357\":\"v-0768d746#4/2\",\"358\":\"v-0768d746#4/3\",\"359\":\"v-0768d746#4/4\",\"360\":\"v-50e1992b\",\"361\":\"v-50e1992b#1\",\"362\":\"v-50e1992b#1/0\",\"363\":\"v-50e1992b#1/1\",\"364\":\"v-50e1992b#1/2\",\"365\":\"v-50e1992b#2\",\"366\":\"v-50e1992b#2/0\",\"367\":\"v-50e1992b#2/1\",\"368\":\"v-50e1992b#3\",\"369\":\"v-50e1992b#3/0\",\"370\":\"v-50e1992b#4\",\"371\":\"v-50e1992b#4/0\",\"372\":\"v-50e1992b#4/1\",\"373\":\"v-50e1992b#4/2\",\"374\":\"v-50e1992b#4/3\",\"375\":\"v-50e1992b#4/4\",\"376\":\"v-50e1992b#5\",\"377\":\"v-50e1992b#5/0\",\"378\":\"v-50e1992b#5/1\",\"379\":\"v-50e1992b#5/2\",\"380\":\"v-50e1992b#5/3\",\"381\":\"v-50e1992b#5/4\",\"382\":\"v-50e1992b#5/5\",\"383\":\"v-0910a4e0\",\"384\":\"v-0910a4e0#1\",\"385\":\"v-0910a4e0#1/0\",\"386\":\"v-0910a4e0#1/1\",\"387\":\"v-0910a4e0#1/2\",\"388\":\"v-0910a4e0#1/3\",\"389\":\"v-0910a4e0#1/4\",\"390\":\"v-0910a4e0#2\",\"391\":\"v-0910a4e0#2/0\",\"392\":\"v-0910a4e0#2/1\",\"393\":\"v-0910a4e0#2/2\",\"394\":\"v-0910a4e0#2/3\",\"395\":\"v-0910a4e0#2/4\",\"396\":\"v-0910a4e0#2/5\",\"397\":\"v-0910a4e0#2/6\",\"398\":\"v-0910a4e0#2/7\",\"399\":\"v-0910a4e0#2/8\",\"400\":\"v-0910a4e0#2/9\",\"401\":\"v-0910a4e0#2/10\",\"402\":\"v-0910a4e0#2/11\",\"403\":\"v-0910a4e0#2/12\",\"404\":\"v-0910a4e0#3\",\"405\":\"v-0910a4e0#3/0\",\"406\":\"v-0910a4e0#3/1\",\"407\":\"v-0910a4e0#3/2\",\"408\":\"v-0910a4e0#3/3\",\"409\":\"v-0910a4e0#3/4\",\"410\":\"v-0910a4e0#3/5\",\"411\":\"v-0910a4e0#3/6\",\"412\":\"v-0910a4e0#3/7\",\"413\":\"v-0910a4e0#3/8\",\"414\":\"v-0910a4e0#3/9\",\"415\":\"v-0910a4e0#3/10\",\"416\":\"v-0910a4e0#4\",\"417\":\"v-0910a4e0#4/0\",\"418\":\"v-0910a4e0#4/1\",\"419\":\"v-0910a4e0#4/2\",\"420\":\"v-0910a4e0#4/3\",\"421\":\"v-0910a4e0#4/4\",\"422\":\"v-0910a4e0#4/5\",\"423\":\"v-0910a4e0#4/6\",\"424\":\"v-0910a4e0#4/7\",\"425\":\"v-0910a4e0#4/8\",\"426\":\"v-0910a4e0#4/9\",\"427\":\"v-0910a4e0#4/10\",\"428\":\"v-0910a4e0#4/11\",\"429\":\"v-0910a4e0#4/12\",\"430\":\"v-0910a4e0#5\",\"431\":\"v-0910a4e0#5/0\",\"432\":\"v-0910a4e0#5/1\",\"433\":\"v-0910a4e0#6\",\"434\":\"v-0910a4e0#6/0\",\"435\":\"v-0910a4e0#6/1\",\"436\":\"v-0910a4e0#6/2\",\"437\":\"v-0910a4e0#6/3\",\"438\":\"v-0910a4e0#6/4\",\"439\":\"v-0910a4e0#7\",\"440\":\"v-0910a4e0#7/0\",\"441\":\"v-123d4838\",\"442\":\"v-123d4838#1\",\"443\":\"v-123d4838#1/0\",\"444\":\"v-123d4838#1/1\",\"445\":\"v-123d4838#1/2\",\"446\":\"v-123d4838#1/3\",\"447\":\"v-123d4838#1/4\",\"448\":\"v-123d4838#1/5\",\"449\":\"v-123d4838#1/6\",\"450\":\"v-123d4838#1/7\",\"451\":\"v-123d4838#1/8\",\"452\":\"v-123d4838#2\",\"453\":\"v-123d4838#2/0\",\"454\":\"v-123d4838#2/1\",\"455\":\"v-123d4838#2/2\",\"456\":\"v-123d4838#2/3\",\"457\":\"v-123d4838#2/4\",\"458\":\"v-123d4838#2/5\",\"459\":\"v-123d4838#2/6\",\"460\":\"v-123d4838#2/7\",\"461\":\"v-123d4838#2/8\",\"462\":\"v-123d4838#2/9\",\"463\":\"v-123d4838#2/10\",\"464\":\"v-123d4838#2/11\",\"465\":\"v-123d4838#2/12\",\"466\":\"v-123d4838#2/13\",\"467\":\"v-123d4838#2/14\",\"468\":\"v-123d4838#2/15\",\"469\":\"v-123d4838#2/16\",\"470\":\"v-123d4838#2/17\",\"471\":\"v-123d4838#3\",\"472\":\"v-123d4838#3/0\",\"473\":\"v-123d4838#3/1\",\"474\":\"v-123d4838#3/2\",\"475\":\"v-123d4838#3/3\",\"476\":\"v-123d4838#3/4\",\"477\":\"v-123d4838#4\",\"478\":\"v-123d4838#5\",\"479\":\"v-123d4838#5/5\",\"480\":\"v-123d4838#5/6\",\"481\":\"v-123d4838#5/7\",\"482\":\"v-123d4838#5/8\",\"483\":\"v-123d4838#5/9\",\"484\":\"v-123d4838#5/10\",\"485\":\"v-123d4838#5/11\",\"486\":\"v-123d4838#5/12\",\"487\":\"v-123d4838#5/13\",\"488\":\"v-123d4838#6\",\"489\":\"v-123d4838#6/0\",\"490\":\"v-123d4838#6/1\",\"491\":\"v-123d4838#6/2\",\"492\":\"v-123d4838#6/3\",\"493\":\"v-123d4838#6/4\",\"494\":\"v-123d4838#6/5\",\"495\":\"v-123d4838#6/6\",\"496\":\"v-123d4838#6/7\",\"497\":\"v-123d4838#6/8\",\"498\":\"v-123d4838#7\",\"499\":\"v-123d4838#7/0\",\"500\":\"v-123d4838#7/1\",\"501\":\"v-123d4838#7/2\",\"502\":\"v-123d4838#7/3\",\"503\":\"v-123d4838#7/4\",\"504\":\"v-123d4838#7/5\",\"505\":\"v-123d4838#7/6\",\"506\":\"v-123d4838#7/7\",\"507\":\"v-123d4838#7/8\",\"508\":\"v-123d4838#7/9\",\"509\":\"v-123d4838#7/10\",\"510\":\"v-123d4838#7/11\",\"511\":\"v-123d4838#7/12\",\"512\":\"v-123d4838#7/13\",\"513\":\"v-123d4838#7/14\",\"514\":\"v-123d4838#7/15\",\"515\":\"v-123d4838#7/16\",\"516\":\"v-123d4838#7/17\",\"517\":\"v-38e6d413\",\"518\":\"v-38e6d413#1\",\"519\":\"v-38e6d413#1/0\",\"520\":\"v-38e6d413#1/1\",\"521\":\"v-38e6d413#2\",\"522\":\"v-38e6d413#2/0\",\"523\":\"v-38e6d413#3\",\"524\":\"v-38e6d413#3/0\",\"525\":\"v-38e6d413#4\",\"526\":\"v-38e6d413#4/0\",\"527\":\"v-38e6d413#5\",\"528\":\"v-38e6d413#5/0\",\"529\":\"v-38e6d413#6\",\"530\":\"v-38e6d413#6/0\",\"531\":\"v-38e6d413#6/1\",\"532\":\"v-38e6d413#7\",\"533\":\"v-38e6d413#7/0\",\"534\":\"v-38e6d413#7/1\",\"535\":\"v-38e6d413#7/2\",\"536\":\"v-38e6d413#7/3\",\"537\":\"v-38e6d413#7/4\",\"538\":\"v-38e6d413#7/5\",\"539\":\"v-38e6d413#7/6\",\"540\":\"v-38e6d413#7/7\",\"541\":\"v-38e6d413#7/8\",\"542\":\"v-38e6d413#7/9\",\"543\":\"v-38e6d413#7/10\",\"544\":\"v-38e6d413#7/11\",\"545\":\"v-38e6d413#7/12\",\"546\":\"v-38e6d413#7/13\",\"547\":\"v-38e6d413#7/14\",\"548\":\"v-38e6d413#7/15\",\"549\":\"v-38e6d413#8\",\"550\":\"v-38e6d413#8/0\",\"551\":\"v-38e6d413#8/1\",\"552\":\"v-38e6d413#8/2\",\"553\":\"v-2be7bd0e\",\"554\":\"v-2be7bd0e#1\",\"555\":\"v-2be7bd0e#2\",\"556\":\"v-2be7bd0e#3\",\"557\":\"v-2be7bd0e#4\",\"558\":\"v-2be7bd0e#4/0\",\"559\":\"v-2be7bd0e#4/1\",\"560\":\"v-2be7bd0e#4/2\",\"561\":\"v-2be7bd0e#5\",\"562\":\"v-2be7bd0e#5/0\",\"563\":\"v-2be7bd0e#5/1\",\"564\":\"v-2be7bd0e#5/2\",\"565\":\"v-2be7bd0e#5/3\",\"566\":\"v-2be7bd0e#5/4\",\"567\":\"v-2be7bd0e#6\",\"568\":\"v-2be7bd0e#6/5\",\"569\":\"v-2be7bd0e#6/6\",\"570\":\"v-2be7bd0e#6/7\",\"571\":\"v-2be7bd0e#6/8\",\"572\":\"v-2be7bd0e#6/9\",\"573\":\"v-2be7bd0e#6/10\",\"574\":\"v-2be7bd0e#7\",\"575\":\"v-2be7bd0e#7/11\",\"576\":\"v-2be7bd0e#7/12\",\"577\":\"v-2be7bd0e#7/13\",\"578\":\"v-2be7bd0e#7/14\",\"579\":\"v-2be7bd0e#7/15\",\"580\":\"v-2be7bd0e#7/16\",\"581\":\"v-2be7bd0e#7/17\",\"582\":\"v-2be7bd0e#7/18\",\"583\":\"v-2be7bd0e#7/19\",\"584\":\"v-2be7bd0e#7/20\",\"585\":\"v-2be7bd0e#7/21\",\"586\":\"v-2be7bd0e#7/22\",\"587\":\"v-2be7bd0e#7/23\",\"588\":\"v-2be7bd0e#7/24\",\"589\":\"v-2be7bd0e#7/25\",\"590\":\"v-2be7bd0e#7/26\",\"591\":\"v-2be7bd0e#8\",\"592\":\"v-2be7bd0e#8/0\",\"593\":\"v-2be7bd0e#8/1\",\"594\":\"v-2be7bd0e#8/2\",\"595\":\"v-2be7bd0e#9\",\"596\":\"v-2be7bd0e#9/0\",\"597\":\"v-2be7bd0e#9/1\",\"598\":\"v-2be7bd0e#9/2\",\"599\":\"v-2be7bd0e#9/3\",\"600\":\"v-2be7bd0e#9/4\",\"601\":\"v-2be7bd0e#9/5\",\"602\":\"v-2be7bd0e#9/6\",\"603\":\"v-2be7bd0e#9/7\",\"604\":\"v-2be7bd0e#9/8\",\"605\":\"v-2be7bd0e#9/9\",\"606\":\"v-2be7bd0e#9/10\",\"607\":\"v-2be7bd0e#9/11\",\"608\":\"v-2be7bd0e#9/12\",\"609\":\"v-2be7bd0e#9/13\",\"610\":\"v-2be7bd0e#10\",\"611\":\"v-2be7bd0e#10/0\",\"612\":\"v-2be7bd0e#10/1\",\"613\":\"v-2be7bd0e#11\",\"614\":\"v-2be7bd0e#11/0\",\"615\":\"v-2be7bd0e#11/1\",\"616\":\"v-2be7bd0e#11/2\",\"617\":\"v-2be7bd0e#11/3\",\"618\":\"v-2be7bd0e#11/4\",\"619\":\"v-2be7bd0e#11/5\",\"620\":\"v-2be7bd0e#11/6\",\"621\":\"v-2be7bd0e#11/7\",\"622\":\"v-2be7bd0e#12\",\"623\":\"v-2be7bd0e#12/8\",\"624\":\"v-2be7bd0e#12/9\",\"625\":\"v-2be7bd0e#12/10\",\"626\":\"v-2be7bd0e#12/11\",\"627\":\"v-2be7bd0e#12/12\",\"628\":\"v-2be7bd0e#12/13\",\"629\":\"v-2be7bd0e#12/14\",\"630\":\"v-2be7bd0e#12/15\",\"631\":\"v-2be7bd0e#12/16\",\"632\":\"v-2be7bd0e#12/17\",\"633\":\"v-2be7bd0e#12/18\",\"634\":\"v-2be7bd0e#12/19\",\"635\":\"v-2be7bd0e#12/20\",\"636\":\"v-2be7bd0e#12/21\",\"637\":\"v-2be7bd0e#13\",\"638\":\"v-2be7bd0e#14\",\"639\":\"v-2be7bd0e#15\",\"640\":\"v-2be7bd0e#16\",\"641\":\"v-2be7bd0e#16/0\",\"642\":\"v-2be7bd0e#17\",\"643\":\"v-2be7bd0e#17/0\",\"644\":\"v-2be7bd0e#18\",\"645\":\"v-2be7bd0e#18/0\",\"646\":\"v-2be7bd0e#18/1\",\"647\":\"v-2be7bd0e#18/2\",\"648\":\"v-2be7bd0e#18/3\",\"649\":\"v-2be7bd0e#18/4\",\"650\":\"v-2be7bd0e#18/5\",\"651\":\"v-2be7bd0e#18/6\",\"652\":\"v-2be7bd0e#18/7\",\"653\":\"v-2be7bd0e#18/8\",\"654\":\"v-2be7bd0e#19\",\"655\":\"v-2be7bd0e#19/0\",\"656\":\"v-2be7bd0e#19/1\",\"657\":\"v-2be7bd0e#19/2\",\"658\":\"v-2be7bd0e#19/3\",\"659\":\"v-2be7bd0e#19/4\",\"660\":\"v-2be7bd0e#19/5\",\"661\":\"v-2be7bd0e#19/6\",\"662\":\"v-2be7bd0e#19/7\",\"663\":\"v-2be7bd0e#20\",\"664\":\"v-4641063a\",\"665\":\"v-4641063a#1\",\"666\":\"v-4641063a#2\",\"667\":\"v-4641063a#2/0\",\"668\":\"v-4641063a#2/1\",\"669\":\"v-4641063a#2/2\",\"670\":\"v-4641063a#3\",\"671\":\"v-4641063a#3/0\",\"672\":\"v-4641063a#3/1\",\"673\":\"v-4641063a#3/2\",\"674\":\"v-4641063a#3/3\",\"675\":\"v-4641063a#4\",\"676\":\"v-4641063a#5\",\"677\":\"v-4641063a#5/0\",\"678\":\"v-4641063a#5/1\",\"679\":\"v-4641063a#5/2\",\"680\":\"v-4641063a#6\",\"681\":\"v-4641063a#6/0\",\"682\":\"v-4641063a#6/1\",\"683\":\"v-4641063a#7\",\"684\":\"v-4641063a#7/0\",\"685\":\"v-4641063a#8\",\"686\":\"v-4641063a#9\",\"687\":\"v-4641063a#10\",\"688\":\"v-4641063a#10/0\",\"689\":\"v-4641063a#11\",\"690\":\"v-4641063a#11/0\",\"691\":\"v-4641063a#11/1\",\"692\":\"v-4641063a#12\",\"693\":\"v-4641063a#12/0\",\"694\":\"v-4641063a#12/1\",\"695\":\"v-4641063a#13\",\"696\":\"v-4641063a#13/0\",\"697\":\"v-4641063a#13/1\",\"698\":\"v-4641063a#13/2\",\"699\":\"v-4641063a#13/3\",\"700\":\"v-4641063a#13/4\",\"701\":\"v-4641063a#14\",\"702\":\"v-4641063a#14/0\",\"703\":\"v-4641063a#14/1\",\"704\":\"v-4641063a#14/2\",\"705\":\"v-4641063a#14/3\",\"706\":\"v-4641063a#14/4\",\"707\":\"v-4641063a#14/5\",\"708\":\"v-4641063a#15\",\"709\":\"v-4641063a#15/0\",\"710\":\"v-4641063a#15/1\",\"711\":\"v-4641063a#15/2\",\"712\":\"v-4641063a#15/3\",\"713\":\"v-4641063a#15/4\",\"714\":\"v-4641063a#15/5\",\"715\":\"v-4641063a#15/6\",\"716\":\"v-4641063a#16\",\"717\":\"v-4641063a#16/0\",\"718\":\"v-4641063a#16/1\",\"719\":\"v-fa628ec0\",\"720\":\"v-fa628ec0#1\",\"721\":\"v-fa628ec0#2\",\"722\":\"v-fa628ec0#2/0\",\"723\":\"v-fa628ec0#2/1\",\"724\":\"v-fa628ec0#2/2\",\"725\":\"v-fa628ec0#2/3\",\"726\":\"v-fa628ec0#2/4\",\"727\":\"v-fa628ec0#2/5\",\"728\":\"v-fa628ec0#3\",\"729\":\"v-fa628ec0#4\",\"730\":\"v-fa628ec0#4/0\",\"731\":\"v-fa628ec0#4/1\",\"732\":\"v-fa628ec0#4/2\",\"733\":\"v-fa628ec0#4/3\",\"734\":\"v-fa628ec0#4/4\",\"735\":\"v-fa628ec0#4/5\",\"736\":\"v-fa628ec0#4/6\",\"737\":\"v-fa628ec0#4/7\",\"738\":\"v-fa628ec0#4/8\",\"739\":\"v-fa628ec0#4/9\",\"740\":\"v-fa628ec0#4/10\",\"741\":\"v-fa628ec0#4/11\",\"742\":\"v-fa628ec0#4/12\",\"743\":\"v-fa628ec0#4/13\",\"744\":\"v-fa628ec0#4/14\",\"745\":\"v-fa628ec0#5\",\"746\":\"v-fa628ec0#5/0\",\"747\":\"v-fa628ec0#5/1\",\"748\":\"v-fa628ec0#5/2\",\"749\":\"v-fa628ec0#5/3\",\"750\":\"v-fa628ec0#5/4\",\"751\":\"v-fa628ec0#5/5\",\"752\":\"v-fa628ec0#5/6\",\"753\":\"v-fa628ec0#6\",\"754\":\"v-fa628ec0#7\",\"755\":\"v-fa628ec0#7/0\",\"756\":\"v-fa628ec0#7/1\",\"757\":\"v-fa628ec0#7/2\",\"758\":\"v-fa628ec0#7/3\",\"759\":\"v-fa628ec0#7/4\",\"760\":\"v-fa628ec0#7/5\",\"761\":\"v-fa628ec0#7/6\",\"762\":\"v-fa628ec0#7/7\",\"763\":\"v-fa628ec0#7/8\",\"764\":\"v-fa628ec0#7/9\",\"765\":\"v-fa628ec0#7/10\",\"766\":\"v-fa628ec0#8\",\"767\":\"v-fa628ec0#8/0\",\"768\":\"v-fa628ec0#8/1\",\"769\":\"v-fa628ec0#8/2\",\"770\":\"v-fa628ec0#8/3\",\"771\":\"v-fa628ec0#8/4\",\"772\":\"v-fa628ec0#8/5\",\"773\":\"v-fa628ec0#9\",\"774\":\"v-fa628ec0#9/0\",\"775\":\"v-fa628ec0#9/1\",\"776\":\"v-fa628ec0#9/2\",\"777\":\"v-fa628ec0#9/3\",\"778\":\"v-fa628ec0#9/4\",\"779\":\"v-fa628ec0#9/5\",\"780\":\"v-fa628ec0#9/6\",\"781\":\"v-fa628ec0#9/7\",\"782\":\"v-fa628ec0#9/8\",\"783\":\"v-fa628ec0#9/9\",\"784\":\"v-fa628ec0#9/10\",\"785\":\"v-fa628ec0#10\",\"786\":\"v-fa628ec0#10/0\",\"787\":\"v-fa628ec0#10/1\",\"788\":\"v-fa628ec0#10/2\",\"789\":\"v-fa628ec0#10/3\",\"790\":\"v-fa628ec0#10/4\",\"791\":\"v-fa628ec0#10/5\",\"792\":\"v-fa628ec0#10/6\",\"793\":\"v-fa628ec0#10/7\",\"794\":\"v-fa628ec0#10/8\",\"795\":\"v-fa628ec0#10/9\",\"796\":\"v-fa628ec0#10/10\",\"797\":\"v-fa628ec0#10/11\",\"798\":\"v-fa628ec0#10/12\",\"799\":\"v-fa628ec0#10/13\",\"800\":\"v-fa628ec0#10/14\",\"801\":\"v-fa628ec0#10/15\",\"802\":\"v-fa628ec0#10/16\",\"803\":\"v-fa628ec0#10/17\",\"804\":\"v-fa628ec0#10/18\",\"805\":\"v-fa628ec0#10/19\",\"806\":\"v-fa628ec0#10/20\",\"807\":\"v-fa628ec0#10/21\",\"808\":\"v-fa628ec0#10/22\",\"809\":\"v-fa628ec0#10/23\",\"810\":\"v-fa628ec0#10/24\",\"811\":\"v-fa628ec0#10/25\",\"812\":\"v-fa628ec0#10/26\",\"813\":\"v-fa628ec0#10/27\",\"814\":\"v-fa628ec0#10/28\",\"815\":\"v-fa628ec0#11\",\"816\":\"v-fa628ec0#11/0\",\"817\":\"v-fa628ec0#11/1\",\"818\":\"v-fa628ec0#11/2\",\"819\":\"v-fa628ec0#11/3\",\"820\":\"v-fa628ec0#11/4\",\"821\":\"v-fa628ec0#11/5\",\"822\":\"v-fa628ec0#11/6\",\"823\":\"v-fa628ec0#11/7\",\"824\":\"v-fa628ec0#11/8\",\"825\":\"v-fa628ec0#11/9\",\"826\":\"v-fa628ec0#12\",\"827\":\"v-fa628ec0#12/0\",\"828\":\"v-fa628ec0#12/1\",\"829\":\"v-fa628ec0#12/2\",\"830\":\"v-fa628ec0#13\",\"831\":\"v-fa628ec0#13/0\",\"832\":\"v-fa628ec0#13/1\",\"833\":\"v-fa628ec0#13/2\",\"834\":\"v-fa628ec0#13/3\",\"835\":\"v-fa628ec0#13/4\",\"836\":\"v-fa628ec0#13/5\",\"837\":\"v-fa628ec0#14\",\"838\":\"v-fa628ec0#14/6\",\"839\":\"v-fa628ec0#14/7\",\"840\":\"v-fa628ec0#14/8\",\"841\":\"v-fa628ec0#14/9\",\"842\":\"v-fa628ec0#14/10\",\"843\":\"v-fa628ec0#14/11\",\"844\":\"v-fa628ec0#15\",\"845\":\"v-fa628ec0#15/0\",\"846\":\"v-fa628ec0#15/1\",\"847\":\"v-fa628ec0#16\",\"848\":\"v-fa628ec0#17\",\"849\":\"v-fa628ec0#17/2\",\"850\":\"v-fa628ec0#17/3\",\"851\":\"v-fa628ec0#17/4\",\"852\":\"v-fa628ec0#17/5\",\"853\":\"v-fa628ec0#18\",\"854\":\"v-fa628ec0#18/0\",\"855\":\"v-fa628ec0#18/1\",\"856\":\"v-fa628ec0#18/2\",\"857\":\"v-fa628ec0#19\",\"858\":\"v-fa628ec0#19/0\",\"859\":\"v-fa628ec0#19/1\",\"860\":\"v-fa628ec0#19/2\",\"861\":\"v-fa628ec0#19/3\",\"862\":\"v-fa628ec0#19/4\",\"863\":\"v-fa628ec0#19/5\",\"864\":\"v-fa628ec0#19/6\",\"865\":\"v-fa628ec0#19/7\",\"866\":\"v-fa628ec0#19/8\",\"867\":\"v-fa628ec0#19/9\",\"868\":\"v-fa628ec0#19/10\",\"869\":\"v-fa628ec0#19/11\",\"870\":\"v-fa628ec0#20\",\"871\":\"v-fa628ec0#20/0\",\"872\":\"v-fa628ec0#20/1\",\"873\":\"v-fa628ec0#20/2\",\"874\":\"v-fa628ec0#20/3\",\"875\":\"v-fa628ec0#20/4\",\"876\":\"v-fa628ec0#20/5\",\"877\":\"v-fa628ec0#20/6\",\"878\":\"v-fa628ec0#20/7\",\"879\":\"v-fa628ec0#21\",\"880\":\"v-fa628ec0#22\",\"881\":\"v-fa628ec0#22/0\",\"882\":\"v-fa628ec0#22/1\",\"883\":\"v-fa628ec0#22/2\",\"884\":\"v-fa628ec0#22/3\",\"885\":\"v-fa628ec0#22/4\",\"886\":\"v-fa628ec0#22/5\",\"887\":\"v-fa628ec0#23\",\"888\":\"v-fa628ec0#23/0\",\"889\":\"v-fa628ec0#23/1\",\"890\":\"v-fa628ec0#23/2\",\"891\":\"v-fa628ec0#23/3\",\"892\":\"v-fa628ec0#23/4\",\"893\":\"v-fa628ec0#23/5\",\"894\":\"v-fa628ec0#23/6\",\"895\":\"v-fa628ec0#23/7\",\"896\":\"v-fa628ec0#24\",\"897\":\"v-fa628ec0#25\",\"898\":\"v-fa628ec0#25/0\",\"899\":\"v-fa628ec0#26\",\"900\":\"v-fa628ec0#26/0\",\"901\":\"v-fa628ec0#26/1\",\"902\":\"v-fa628ec0#26/2\",\"903\":\"v-fa628ec0#26/3\",\"904\":\"v-fa628ec0#26/4\",\"905\":\"v-fa628ec0#26/5\",\"906\":\"v-fa628ec0#27\",\"907\":\"v-fa628ec0#27/0\",\"908\":\"v-fa628ec0#27/1\",\"909\":\"v-fa628ec0#28\",\"910\":\"v-fa628ec0#28/0\",\"911\":\"v-fa628ec0#28/1\",\"912\":\"v-fa628ec0#28/2\",\"913\":\"v-fa628ec0#28/3\",\"914\":\"v-fa628ec0#28/4\",\"915\":\"v-fa628ec0#28/5\",\"916\":\"v-fa628ec0#28/6\",\"917\":\"v-fa628ec0#28/7\",\"918\":\"v-fa628ec0#28/8\",\"919\":\"v-fa628ec0#28/9\",\"920\":\"v-240dba63\",\"921\":\"v-240dba63#1\",\"922\":\"v-240dba63#1/0\",\"923\":\"v-240dba63#1/1\",\"924\":\"v-240dba63#1/2\",\"925\":\"v-240dba63#1/3\",\"926\":\"v-240dba63#1/4\",\"927\":\"v-240dba63#1/5\",\"928\":\"v-240dba63#1/6\",\"929\":\"v-240dba63#1/7\",\"930\":\"v-240dba63#2\",\"931\":\"v-240dba63#3\",\"932\":\"v-240dba63#3/0\",\"933\":\"v-240dba63#3/1\",\"934\":\"v-240dba63#3/2\",\"935\":\"v-240dba63#3/3\",\"936\":\"v-240dba63#3/4\",\"937\":\"v-240dba63#3/5\",\"938\":\"v-240dba63#3/6\",\"939\":\"v-240dba63#3/7\",\"940\":\"v-240dba63#3/8\",\"941\":\"v-240dba63#4\",\"942\":\"v-240dba63#4/9\",\"943\":\"v-240dba63#4/10\",\"944\":\"v-240dba63#4/11\",\"945\":\"v-240dba63#4/12\",\"946\":\"v-240dba63#4/13\",\"947\":\"v-240dba63#4/14\",\"948\":\"v-240dba63#4/15\",\"949\":\"v-240dba63#4/16\",\"950\":\"v-240dba63#4/17\",\"951\":\"v-240dba63#4/18\",\"952\":\"v-240dba63#4/19\",\"953\":\"v-240dba63#4/20\",\"954\":\"v-240dba63#4/21\",\"955\":\"v-240dba63#4/22\",\"956\":\"v-240dba63#4/23\",\"957\":\"v-240dba63#4/24\",\"958\":\"v-240dba63#4/25\",\"959\":\"v-240dba63#4/26\",\"960\":\"v-240dba63#4/27\",\"961\":\"v-240dba63#4/28\",\"962\":\"v-240dba63#4/29\",\"963\":\"v-240dba63#4/30\",\"964\":\"v-240dba63#4/31\",\"965\":\"v-240dba63#4/32\",\"966\":\"v-240dba63#4/33\",\"967\":\"v-240dba63#4/34\",\"968\":\"v-240dba63#4/35\",\"969\":\"v-240dba63#4/36\",\"970\":\"v-240dba63#4/37\",\"971\":\"v-240dba63#4/38\",\"972\":\"v-240dba63#4/39\",\"973\":\"v-240dba63#5\",\"974\":\"v-240dba63#6\",\"975\":\"v-240dba63#6/0\",\"976\":\"v-240dba63#7\",\"977\":\"v-240dba63#7/0\",\"978\":\"v-240dba63#7/1\",\"979\":\"v-240dba63#7/2\",\"980\":\"v-240dba63#7/3\",\"981\":\"v-240dba63#7/4\",\"982\":\"v-240dba63#8\",\"983\":\"v-240dba63#9\",\"984\":\"v-240dba63#9/0\",\"985\":\"v-240dba63#10\",\"986\":\"v-240dba63#10/0\",\"987\":\"v-240dba63#10/1\",\"988\":\"v-240dba63#10/2\",\"989\":\"v-240dba63#10/3\",\"990\":\"v-240dba63#11\",\"991\":\"v-240dba63#11/0\",\"992\":\"v-240dba63#11/1\",\"993\":\"v-240dba63#11/2\",\"994\":\"v-240dba63#11/3\",\"995\":\"v-240dba63#11/4\",\"996\":\"v-350830c1\",\"997\":\"v-350830c1#1\",\"998\":\"v-350830c1#2\",\"999\":\"v-350830c1#3\",\"1000\":\"v-350830c1#4\",\"1001\":\"v-350830c1#5\",\"1002\":\"v-350830c1#5/0\",\"1003\":\"v-6a58427d\",\"1004\":\"v-6a58427d#1\",\"1005\":\"v-6a58427d#2\",\"1006\":\"v-6a58427d#2/0\",\"1007\":\"v-6a58427d#2/1\",\"1008\":\"v-6a58427d#2/2\",\"1009\":\"v-6a58427d#2/3\",\"1010\":\"v-6a58427d#2/4\",\"1011\":\"v-6a58427d#2/5\",\"1012\":\"v-6a58427d#2/6\",\"1013\":\"v-6a58427d#2/7\",\"1014\":\"v-6a58427d#3\",\"1015\":\"v-6a58427d#3/0\",\"1016\":\"v-3641dca3\",\"1017\":\"v-3641dca3#1\",\"1018\":\"v-3641dca3#2\",\"1019\":\"v-3641dca3#3\",\"1020\":\"v-3641dca3#3/0\",\"1021\":\"v-3641dca3#3/1\",\"1022\":\"v-3641dca3#3/2\",\"1023\":\"v-3641dca3#3/3\",\"1024\":\"v-3641dca3#3/4\",\"1025\":\"v-3641dca3#3/5\",\"1026\":\"v-3641dca3#4\",\"1027\":\"v-3641dca3#5\",\"1028\":\"v-3641dca3#5/0\",\"1029\":\"v-3641dca3#5/1\",\"1030\":\"v-3641dca3#5/2\",\"1031\":\"v-3641dca3#5/3\",\"1032\":\"v-3641dca3#5/4\",\"1033\":\"v-3641dca3#5/5\",\"1034\":\"v-3641dca3#5/6\",\"1035\":\"v-3641dca3#5/7\",\"1036\":\"v-3641dca3#5/8\",\"1037\":\"v-3641dca3#5/9\",\"1038\":\"v-3641dca3#5/10\",\"1039\":\"v-3641dca3#5/11\",\"1040\":\"v-3641dca3#6\",\"1041\":\"v-3641dca3#6/0\",\"1042\":\"v-3641dca3#6/1\",\"1043\":\"v-3641dca3#6/2\",\"1044\":\"v-3641dca3#6/3\",\"1045\":\"v-3641dca3#6/4\",\"1046\":\"v-3641dca3#6/5\",\"1047\":\"v-3641dca3#6/6\",\"1048\":\"v-3641dca3#7\",\"1049\":\"v-3641dca3#8\",\"1050\":\"v-3641dca3#8/0\",\"1051\":\"v-3641dca3#8/1\",\"1052\":\"v-3641dca3#8/2\",\"1053\":\"v-3641dca3#8/3\",\"1054\":\"v-3641dca3#9\",\"1055\":\"v-3641dca3#9/0\",\"1056\":\"v-3641dca3#9/1\",\"1057\":\"v-3641dca3#9/2\",\"1058\":\"v-3641dca3#9/3\",\"1059\":\"v-3641dca3#9/4\",\"1060\":\"v-3641dca3#9/5\",\"1061\":\"v-3641dca3#9/6\",\"1062\":\"v-3641dca3#9/7\",\"1063\":\"v-3641dca3#9/8\",\"1064\":\"v-3641dca3#9/9\",\"1065\":\"v-3641dca3#9/10\",\"1066\":\"v-3641dca3#9/11\",\"1067\":\"v-3641dca3#9/12\",\"1068\":\"v-3641dca3#9/13\",\"1069\":\"v-3641dca3#9/14\",\"1070\":\"v-3641dca3#9/15\",\"1071\":\"v-3641dca3#9/16\",\"1072\":\"v-3641dca3#9/17\",\"1073\":\"v-3641dca3#9/18\",\"1074\":\"v-3641dca3#9/19\",\"1075\":\"v-3641dca3#10\",\"1076\":\"v-3641dca3#10/0\",\"1077\":\"v-3641dca3#10/1\",\"1078\":\"v-3641dca3#10/2\",\"1079\":\"v-3641dca3#10/3\",\"1080\":\"v-3641dca3#11\",\"1081\":\"v-3641dca3#11/0\",\"1082\":\"v-3641dca3#11/1\",\"1083\":\"v-3641dca3#11/2\",\"1084\":\"v-3641dca3#11/3\",\"1085\":\"v-3641dca3#11/4\",\"1086\":\"v-3641dca3#11/5\",\"1087\":\"v-3641dca3#11/6\",\"1088\":\"v-3641dca3#11/7\",\"1089\":\"v-3641dca3#11/8\",\"1090\":\"v-3641dca3#11/9\",\"1091\":\"v-3641dca3#12\",\"1092\":\"v-3641dca3#12/0\",\"1093\":\"v-3641dca3#12/1\",\"1094\":\"v-3641dca3#12/2\",\"1095\":\"v-3641dca3#12/3\",\"1096\":\"v-3641dca3#12/4\",\"1097\":\"v-3641dca3#12/5\",\"1098\":\"v-3641dca3#12/6\",\"1099\":\"v-3641dca3#12/7\",\"1100\":\"v-3641dca3#12/8\",\"1101\":\"v-3641dca3#12/9\",\"1102\":\"v-3641dca3#12/10\",\"1103\":\"v-3641dca3#12/11\",\"1104\":\"v-3641dca3#12/12\",\"1105\":\"v-3641dca3#12/13\",\"1106\":\"v-3641dca3#12/14\",\"1107\":\"v-3641dca3#13\",\"1108\":\"v-3641dca3#13/0\",\"1109\":\"v-3641dca3#13/1\",\"1110\":\"v-3641dca3#13/2\",\"1111\":\"v-3641dca3#14\",\"1112\":\"v-3641dca3#14/0\",\"1113\":\"v-3641dca3#14/1\",\"1114\":\"v-3641dca3#14/2\",\"1115\":\"v-3641dca3#14/3\",\"1116\":\"v-3641dca3#14/4\",\"1117\":\"v-3641dca3#14/5\",\"1118\":\"v-3641dca3#14/6\",\"1119\":\"v-3641dca3#14/7\",\"1120\":\"v-3641dca3#14/8\",\"1121\":\"v-3641dca3#14/9\",\"1122\":\"v-3641dca3#14/10\",\"1123\":\"v-3641dca3#14/11\",\"1124\":\"v-3641dca3#14/12\",\"1125\":\"v-3641dca3#14/13\",\"1126\":\"v-3641dca3#14/14\",\"1127\":\"v-3641dca3#14/15\",\"1128\":\"v-3641dca3#14/16\",\"1129\":\"v-3641dca3#14/17\",\"1130\":\"v-3641dca3#14/18\",\"1131\":\"v-3641dca3#14/19\",\"1132\":\"v-3641dca3#15\",\"1133\":\"v-3641dca3#15/0\",\"1134\":\"v-3641dca3#15/1\",\"1135\":\"v-3641dca3#15/2\",\"1136\":\"v-3641dca3#15/3\",\"1137\":\"v-3641dca3#15/4\",\"1138\":\"v-3641dca3#15/5\",\"1139\":\"v-3641dca3#15/6\",\"1140\":\"v-3641dca3#15/7\",\"1141\":\"v-3641dca3#15/8\",\"1142\":\"v-3641dca3#15/9\",\"1143\":\"v-3641dca3#15/10\",\"1144\":\"v-3641dca3#15/11\",\"1145\":\"v-3641dca3#15/12\",\"1146\":\"v-3641dca3#15/13\",\"1147\":\"v-3641dca3#15/14\",\"1148\":\"v-3641dca3#15/15\",\"1149\":\"v-3641dca3#15/16\",\"1150\":\"v-3641dca3#15/17\",\"1151\":\"v-3641dca3#15/18\",\"1152\":\"v-3641dca3#15/19\",\"1153\":\"v-3641dca3#16\",\"1154\":\"v-3641dca3#16/0\",\"1155\":\"v-3641dca3#16/1\",\"1156\":\"v-3641dca3#16/2\",\"1157\":\"v-3641dca3#16/3\",\"1158\":\"v-3641dca3#16/4\",\"1159\":\"v-3641dca3#16/5\",\"1160\":\"v-3641dca3#16/6\",\"1161\":\"v-3641dca3#16/7\",\"1162\":\"v-3641dca3#16/8\",\"1163\":\"v-3641dca3#16/9\",\"1164\":\"v-3641dca3#16/10\",\"1165\":\"v-3641dca3#16/11\",\"1166\":\"v-3641dca3#16/12\",\"1167\":\"v-3641dca3#16/13\",\"1168\":\"v-3641dca3#16/14\",\"1169\":\"v-3641dca3#16/15\",\"1170\":\"v-3641dca3#16/16\",\"1171\":\"v-3641dca3#17\",\"1172\":\"v-3641dca3#17/0\",\"1173\":\"v-3641dca3#17/1\",\"1174\":\"v-3641dca3#17/2\",\"1175\":\"v-3641dca3#17/3\",\"1176\":\"v-3641dca3#17/4\",\"1177\":\"v-3641dca3#17/5\",\"1178\":\"v-3641dca3#17/6\",\"1179\":\"v-3641dca3#17/7\",\"1180\":\"v-3641dca3#17/8\",\"1181\":\"v-3641dca3#17/9\",\"1182\":\"v-3641dca3#17/10\",\"1183\":\"v-3641dca3#17/11\",\"1184\":\"v-444699ba\",\"1185\":\"v-444699ba#1\",\"1186\":\"v-444699ba#2\",\"1187\":\"v-444699ba#3\",\"1188\":\"v-444699ba#3/0\",\"1189\":\"v-444699ba#3/1\",\"1190\":\"v-444699ba#3/2\",\"1191\":\"v-444699ba#3/3\",\"1192\":\"v-444699ba#3/4\",\"1193\":\"v-444699ba#3/5\",\"1194\":\"v-444699ba#4\",\"1195\":\"v-444699ba#5\",\"1196\":\"v-444699ba#5/0\",\"1197\":\"v-444699ba#5/1\",\"1198\":\"v-444699ba#5/2\",\"1199\":\"v-444699ba#5/3\",\"1200\":\"v-444699ba#5/4\",\"1201\":\"v-444699ba#5/5\",\"1202\":\"v-444699ba#5/6\",\"1203\":\"v-444699ba#5/7\",\"1204\":\"v-444699ba#5/8\",\"1205\":\"v-444699ba#5/9\",\"1206\":\"v-444699ba#5/10\",\"1207\":\"v-444699ba#5/11\",\"1208\":\"v-444699ba#6\",\"1209\":\"v-444699ba#6/0\",\"1210\":\"v-444699ba#6/1\",\"1211\":\"v-444699ba#6/2\",\"1212\":\"v-444699ba#6/3\",\"1213\":\"v-444699ba#6/4\",\"1214\":\"v-444699ba#6/5\",\"1215\":\"v-444699ba#6/6\",\"1216\":\"v-444699ba#7\",\"1217\":\"v-444699ba#8\",\"1218\":\"v-444699ba#8/0\",\"1219\":\"v-444699ba#8/1\",\"1220\":\"v-444699ba#8/2\",\"1221\":\"v-444699ba#8/3\",\"1222\":\"v-444699ba#9\",\"1223\":\"v-444699ba#9/0\",\"1224\":\"v-444699ba#9/1\",\"1225\":\"v-444699ba#9/2\",\"1226\":\"v-444699ba#9/3\",\"1227\":\"v-444699ba#9/4\",\"1228\":\"v-444699ba#9/5\",\"1229\":\"v-444699ba#9/6\",\"1230\":\"v-444699ba#9/7\",\"1231\":\"v-444699ba#9/8\",\"1232\":\"v-444699ba#9/9\",\"1233\":\"v-444699ba#9/10\",\"1234\":\"v-444699ba#9/11\",\"1235\":\"v-444699ba#9/12\",\"1236\":\"v-444699ba#9/13\",\"1237\":\"v-444699ba#9/14\",\"1238\":\"v-444699ba#9/15\",\"1239\":\"v-444699ba#9/16\",\"1240\":\"v-444699ba#9/17\",\"1241\":\"v-444699ba#9/18\",\"1242\":\"v-444699ba#9/19\",\"1243\":\"v-444699ba#10\",\"1244\":\"v-444699ba#10/0\",\"1245\":\"v-444699ba#10/1\",\"1246\":\"v-444699ba#10/2\",\"1247\":\"v-444699ba#10/3\",\"1248\":\"v-444699ba#11\",\"1249\":\"v-444699ba#11/0\",\"1250\":\"v-444699ba#11/1\",\"1251\":\"v-444699ba#11/2\",\"1252\":\"v-444699ba#11/3\",\"1253\":\"v-444699ba#11/4\",\"1254\":\"v-444699ba#11/5\",\"1255\":\"v-444699ba#11/6\",\"1256\":\"v-444699ba#11/7\",\"1257\":\"v-444699ba#11/8\",\"1258\":\"v-444699ba#11/9\",\"1259\":\"v-444699ba#12\",\"1260\":\"v-444699ba#12/0\",\"1261\":\"v-444699ba#12/1\",\"1262\":\"v-444699ba#12/2\",\"1263\":\"v-444699ba#12/3\",\"1264\":\"v-444699ba#12/4\",\"1265\":\"v-444699ba#12/5\",\"1266\":\"v-444699ba#12/6\",\"1267\":\"v-444699ba#12/7\",\"1268\":\"v-444699ba#12/8\",\"1269\":\"v-444699ba#12/9\",\"1270\":\"v-444699ba#12/10\",\"1271\":\"v-444699ba#12/11\",\"1272\":\"v-444699ba#12/12\",\"1273\":\"v-444699ba#12/13\",\"1274\":\"v-444699ba#12/14\",\"1275\":\"v-444699ba#13\",\"1276\":\"v-444699ba#13/0\",\"1277\":\"v-444699ba#13/1\",\"1278\":\"v-444699ba#13/2\",\"1279\":\"v-444699ba#14\",\"1280\":\"v-444699ba#14/0\",\"1281\":\"v-444699ba#14/1\",\"1282\":\"v-444699ba#14/2\",\"1283\":\"v-444699ba#14/3\",\"1284\":\"v-444699ba#14/4\",\"1285\":\"v-444699ba#14/5\",\"1286\":\"v-444699ba#14/6\",\"1287\":\"v-444699ba#14/7\",\"1288\":\"v-444699ba#14/8\",\"1289\":\"v-444699ba#14/9\",\"1290\":\"v-444699ba#14/10\",\"1291\":\"v-444699ba#14/11\",\"1292\":\"v-444699ba#14/12\",\"1293\":\"v-444699ba#14/13\",\"1294\":\"v-444699ba#14/14\",\"1295\":\"v-444699ba#14/15\",\"1296\":\"v-444699ba#14/16\",\"1297\":\"v-444699ba#14/17\",\"1298\":\"v-444699ba#14/18\",\"1299\":\"v-444699ba#14/19\",\"1300\":\"v-444699ba#15\",\"1301\":\"v-444699ba#15/0\",\"1302\":\"v-444699ba#15/1\",\"1303\":\"v-444699ba#15/2\",\"1304\":\"v-444699ba#15/3\",\"1305\":\"v-444699ba#15/4\",\"1306\":\"v-444699ba#15/5\",\"1307\":\"v-444699ba#15/6\",\"1308\":\"v-444699ba#15/7\",\"1309\":\"v-444699ba#15/8\",\"1310\":\"v-444699ba#15/9\",\"1311\":\"v-444699ba#15/10\",\"1312\":\"v-444699ba#15/11\",\"1313\":\"v-444699ba#15/12\",\"1314\":\"v-444699ba#15/13\",\"1315\":\"v-444699ba#15/14\",\"1316\":\"v-444699ba#15/15\",\"1317\":\"v-444699ba#15/16\",\"1318\":\"v-444699ba#15/17\",\"1319\":\"v-444699ba#15/18\",\"1320\":\"v-444699ba#15/19\",\"1321\":\"v-444699ba#16\",\"1322\":\"v-444699ba#16/0\",\"1323\":\"v-444699ba#16/1\",\"1324\":\"v-444699ba#16/2\",\"1325\":\"v-444699ba#16/3\",\"1326\":\"v-444699ba#16/4\",\"1327\":\"v-444699ba#16/5\",\"1328\":\"v-444699ba#16/6\",\"1329\":\"v-444699ba#16/7\",\"1330\":\"v-444699ba#16/8\",\"1331\":\"v-444699ba#16/9\",\"1332\":\"v-444699ba#16/10\",\"1333\":\"v-444699ba#16/11\",\"1334\":\"v-444699ba#16/12\",\"1335\":\"v-444699ba#16/13\",\"1336\":\"v-444699ba#16/14\",\"1337\":\"v-444699ba#16/15\",\"1338\":\"v-444699ba#16/16\",\"1339\":\"v-444699ba#17\",\"1340\":\"v-444699ba#17/0\",\"1341\":\"v-444699ba#17/1\",\"1342\":\"v-444699ba#17/2\",\"1343\":\"v-444699ba#17/3\",\"1344\":\"v-444699ba#17/4\",\"1345\":\"v-444699ba#17/5\",\"1346\":\"v-444699ba#17/6\",\"1347\":\"v-444699ba#17/7\",\"1348\":\"v-444699ba#17/8\",\"1349\":\"v-444699ba#17/9\",\"1350\":\"v-444699ba#17/10\",\"1351\":\"v-444699ba#17/11\",\"1352\":\"v-5ed95942\",\"1353\":\"v-5ed95942#1\",\"1354\":\"v-5ed95942#2\",\"1355\":\"v-5ed95942#3\",\"1356\":\"v-5ed95942#3/0\",\"1357\":\"v-5ed95942#3/1\",\"1358\":\"v-5ed95942#3/2\",\"1359\":\"v-5ed95942#3/3\",\"1360\":\"v-5ed95942#3/4\",\"1361\":\"v-5ed95942#3/5\",\"1362\":\"v-5ed95942#4\",\"1363\":\"v-5ed95942#5\",\"1364\":\"v-5ed95942#5/0\",\"1365\":\"v-5ed95942#5/1\",\"1366\":\"v-5ed95942#5/2\",\"1367\":\"v-5ed95942#5/3\",\"1368\":\"v-5ed95942#5/4\",\"1369\":\"v-5ed95942#5/5\",\"1370\":\"v-5ed95942#5/6\",\"1371\":\"v-5ed95942#5/7\",\"1372\":\"v-5ed95942#5/8\",\"1373\":\"v-5ed95942#5/9\",\"1374\":\"v-5ed95942#5/10\",\"1375\":\"v-5ed95942#5/11\",\"1376\":\"v-5ed95942#6\",\"1377\":\"v-5ed95942#6/0\",\"1378\":\"v-5ed95942#6/1\",\"1379\":\"v-5ed95942#6/2\",\"1380\":\"v-5ed95942#6/3\",\"1381\":\"v-5ed95942#6/4\",\"1382\":\"v-5ed95942#6/5\",\"1383\":\"v-5ed95942#6/6\",\"1384\":\"v-5ed95942#7\",\"1385\":\"v-5ed95942#8\",\"1386\":\"v-5ed95942#8/0\",\"1387\":\"v-5ed95942#8/1\",\"1388\":\"v-5ed95942#8/2\",\"1389\":\"v-5ed95942#8/3\",\"1390\":\"v-5ed95942#9\",\"1391\":\"v-5ed95942#9/0\",\"1392\":\"v-5ed95942#9/1\",\"1393\":\"v-5ed95942#9/2\",\"1394\":\"v-5ed95942#9/3\",\"1395\":\"v-5ed95942#9/4\",\"1396\":\"v-5ed95942#9/5\",\"1397\":\"v-5ed95942#9/6\",\"1398\":\"v-5ed95942#9/7\",\"1399\":\"v-5ed95942#9/8\",\"1400\":\"v-5ed95942#9/9\",\"1401\":\"v-5ed95942#9/10\",\"1402\":\"v-5ed95942#9/11\",\"1403\":\"v-5ed95942#9/12\",\"1404\":\"v-5ed95942#9/13\",\"1405\":\"v-5ed95942#9/14\",\"1406\":\"v-5ed95942#9/15\",\"1407\":\"v-5ed95942#9/16\",\"1408\":\"v-5ed95942#9/17\",\"1409\":\"v-5ed95942#9/18\",\"1410\":\"v-5ed95942#9/19\",\"1411\":\"v-5ed95942#10\",\"1412\":\"v-5ed95942#10/0\",\"1413\":\"v-5ed95942#10/1\",\"1414\":\"v-5ed95942#10/2\",\"1415\":\"v-5ed95942#10/3\",\"1416\":\"v-5ed95942#11\",\"1417\":\"v-5ed95942#11/0\",\"1418\":\"v-5ed95942#11/1\",\"1419\":\"v-5ed95942#11/2\",\"1420\":\"v-5ed95942#11/3\",\"1421\":\"v-5ed95942#11/4\",\"1422\":\"v-5ed95942#11/5\",\"1423\":\"v-5ed95942#11/6\",\"1424\":\"v-5ed95942#11/7\",\"1425\":\"v-5ed95942#11/8\",\"1426\":\"v-5ed95942#11/9\",\"1427\":\"v-5ed95942#12\",\"1428\":\"v-5ed95942#12/0\",\"1429\":\"v-5ed95942#12/1\",\"1430\":\"v-5ed95942#12/2\",\"1431\":\"v-5ed95942#12/3\",\"1432\":\"v-5ed95942#12/4\",\"1433\":\"v-5ed95942#12/5\",\"1434\":\"v-5ed95942#12/6\",\"1435\":\"v-5ed95942#12/7\",\"1436\":\"v-5ed95942#12/8\",\"1437\":\"v-5ed95942#12/9\",\"1438\":\"v-5ed95942#12/10\",\"1439\":\"v-5ed95942#12/11\",\"1440\":\"v-5ed95942#12/12\",\"1441\":\"v-5ed95942#12/13\",\"1442\":\"v-5ed95942#12/14\",\"1443\":\"v-5ed95942#13\",\"1444\":\"v-5ed95942#13/0\",\"1445\":\"v-5ed95942#13/1\",\"1446\":\"v-5ed95942#13/2\",\"1447\":\"v-5ed95942#14\",\"1448\":\"v-5ed95942#14/0\",\"1449\":\"v-5ed95942#14/1\",\"1450\":\"v-5ed95942#14/2\",\"1451\":\"v-5ed95942#14/3\",\"1452\":\"v-5ed95942#14/4\",\"1453\":\"v-5ed95942#14/5\",\"1454\":\"v-5ed95942#14/6\",\"1455\":\"v-5ed95942#14/7\",\"1456\":\"v-5ed95942#14/8\",\"1457\":\"v-5ed95942#14/9\",\"1458\":\"v-5ed95942#14/10\",\"1459\":\"v-5ed95942#14/11\",\"1460\":\"v-5ed95942#14/12\",\"1461\":\"v-5ed95942#14/13\",\"1462\":\"v-5ed95942#14/14\",\"1463\":\"v-5ed95942#14/15\",\"1464\":\"v-5ed95942#14/16\",\"1465\":\"v-5ed95942#14/17\",\"1466\":\"v-5ed95942#14/18\",\"1467\":\"v-5ed95942#14/19\",\"1468\":\"v-5ed95942#15\",\"1469\":\"v-5ed95942#15/0\",\"1470\":\"v-5ed95942#15/1\",\"1471\":\"v-5ed95942#15/2\",\"1472\":\"v-5ed95942#15/3\",\"1473\":\"v-5ed95942#15/4\",\"1474\":\"v-5ed95942#15/5\",\"1475\":\"v-5ed95942#15/6\",\"1476\":\"v-5ed95942#15/7\",\"1477\":\"v-5ed95942#15/8\",\"1478\":\"v-5ed95942#15/9\",\"1479\":\"v-5ed95942#15/10\",\"1480\":\"v-5ed95942#15/11\",\"1481\":\"v-5ed95942#15/12\",\"1482\":\"v-5ed95942#15/13\",\"1483\":\"v-5ed95942#15/14\",\"1484\":\"v-5ed95942#15/15\",\"1485\":\"v-5ed95942#15/16\",\"1486\":\"v-5ed95942#15/17\",\"1487\":\"v-5ed95942#15/18\",\"1488\":\"v-5ed95942#15/19\",\"1489\":\"v-5ed95942#16\",\"1490\":\"v-5ed95942#16/0\",\"1491\":\"v-5ed95942#16/1\",\"1492\":\"v-5ed95942#16/2\",\"1493\":\"v-5ed95942#16/3\",\"1494\":\"v-5ed95942#16/4\",\"1495\":\"v-5ed95942#16/5\",\"1496\":\"v-5ed95942#16/6\",\"1497\":\"v-5ed95942#16/7\",\"1498\":\"v-5ed95942#16/8\",\"1499\":\"v-5ed95942#16/9\",\"1500\":\"v-5ed95942#16/10\",\"1501\":\"v-5ed95942#16/11\",\"1502\":\"v-5ed95942#16/12\",\"1503\":\"v-5ed95942#16/13\",\"1504\":\"v-5ed95942#16/14\",\"1505\":\"v-5ed95942#16/15\",\"1506\":\"v-5ed95942#16/16\",\"1507\":\"v-5ed95942#17\",\"1508\":\"v-5ed95942#17/0\",\"1509\":\"v-5ed95942#17/1\",\"1510\":\"v-5ed95942#17/2\",\"1511\":\"v-5ed95942#17/3\",\"1512\":\"v-5ed95942#17/4\",\"1513\":\"v-5ed95942#17/5\",\"1514\":\"v-5ed95942#17/6\",\"1515\":\"v-5ed95942#17/7\",\"1516\":\"v-5ed95942#17/8\",\"1517\":\"v-5ed95942#17/9\",\"1518\":\"v-5ed95942#17/10\",\"1519\":\"v-5ed95942#17/11\",\"1520\":\"v-477bbf9a\",\"1521\":\"v-477bbf9a#1\",\"1522\":\"v-477bbf9a#2\",\"1523\":\"v-477bbf9a#3\",\"1524\":\"v-477bbf9a#3/0\",\"1525\":\"v-477bbf9a#3/1\",\"1526\":\"v-477bbf9a#3/2\",\"1527\":\"v-477bbf9a#3/3\",\"1528\":\"v-477bbf9a#3/4\",\"1529\":\"v-477bbf9a#3/5\",\"1530\":\"v-477bbf9a#4\",\"1531\":\"v-477bbf9a#5\",\"1532\":\"v-477bbf9a#5/0\",\"1533\":\"v-477bbf9a#5/1\",\"1534\":\"v-477bbf9a#5/2\",\"1535\":\"v-477bbf9a#5/3\",\"1536\":\"v-477bbf9a#5/4\",\"1537\":\"v-477bbf9a#5/5\",\"1538\":\"v-477bbf9a#5/6\",\"1539\":\"v-477bbf9a#5/7\",\"1540\":\"v-477bbf9a#5/8\",\"1541\":\"v-477bbf9a#5/9\",\"1542\":\"v-477bbf9a#5/10\",\"1543\":\"v-477bbf9a#5/11\",\"1544\":\"v-477bbf9a#6\",\"1545\":\"v-477bbf9a#6/0\",\"1546\":\"v-477bbf9a#6/1\",\"1547\":\"v-477bbf9a#6/2\",\"1548\":\"v-477bbf9a#6/3\",\"1549\":\"v-477bbf9a#6/4\",\"1550\":\"v-477bbf9a#6/5\",\"1551\":\"v-477bbf9a#6/6\",\"1552\":\"v-477bbf9a#7\",\"1553\":\"v-477bbf9a#8\",\"1554\":\"v-477bbf9a#8/0\",\"1555\":\"v-477bbf9a#8/1\",\"1556\":\"v-477bbf9a#8/2\",\"1557\":\"v-477bbf9a#8/3\",\"1558\":\"v-477bbf9a#9\",\"1559\":\"v-477bbf9a#9/0\",\"1560\":\"v-477bbf9a#9/1\",\"1561\":\"v-477bbf9a#9/2\",\"1562\":\"v-477bbf9a#9/3\",\"1563\":\"v-477bbf9a#9/4\",\"1564\":\"v-477bbf9a#9/5\",\"1565\":\"v-477bbf9a#9/6\",\"1566\":\"v-477bbf9a#9/7\",\"1567\":\"v-477bbf9a#9/8\",\"1568\":\"v-477bbf9a#9/9\",\"1569\":\"v-477bbf9a#9/10\",\"1570\":\"v-477bbf9a#9/11\",\"1571\":\"v-477bbf9a#9/12\",\"1572\":\"v-477bbf9a#9/13\",\"1573\":\"v-477bbf9a#9/14\",\"1574\":\"v-477bbf9a#9/15\",\"1575\":\"v-477bbf9a#9/16\",\"1576\":\"v-477bbf9a#9/17\",\"1577\":\"v-477bbf9a#9/18\",\"1578\":\"v-477bbf9a#9/19\",\"1579\":\"v-477bbf9a#10\",\"1580\":\"v-477bbf9a#10/0\",\"1581\":\"v-477bbf9a#10/1\",\"1582\":\"v-477bbf9a#10/2\",\"1583\":\"v-477bbf9a#10/3\",\"1584\":\"v-477bbf9a#11\",\"1585\":\"v-477bbf9a#11/0\",\"1586\":\"v-477bbf9a#11/1\",\"1587\":\"v-477bbf9a#11/2\",\"1588\":\"v-477bbf9a#11/3\",\"1589\":\"v-477bbf9a#11/4\",\"1590\":\"v-477bbf9a#11/5\",\"1591\":\"v-477bbf9a#11/6\",\"1592\":\"v-477bbf9a#11/7\",\"1593\":\"v-477bbf9a#11/8\",\"1594\":\"v-477bbf9a#11/9\",\"1595\":\"v-477bbf9a#12\",\"1596\":\"v-477bbf9a#12/0\",\"1597\":\"v-477bbf9a#12/1\",\"1598\":\"v-477bbf9a#12/2\",\"1599\":\"v-477bbf9a#12/3\",\"1600\":\"v-477bbf9a#12/4\",\"1601\":\"v-477bbf9a#12/5\",\"1602\":\"v-477bbf9a#12/6\",\"1603\":\"v-477bbf9a#12/7\",\"1604\":\"v-477bbf9a#12/8\",\"1605\":\"v-477bbf9a#12/9\",\"1606\":\"v-477bbf9a#12/10\",\"1607\":\"v-477bbf9a#12/11\",\"1608\":\"v-477bbf9a#12/12\",\"1609\":\"v-477bbf9a#12/13\",\"1610\":\"v-477bbf9a#12/14\",\"1611\":\"v-477bbf9a#13\",\"1612\":\"v-477bbf9a#13/0\",\"1613\":\"v-477bbf9a#13/1\",\"1614\":\"v-477bbf9a#13/2\",\"1615\":\"v-477bbf9a#14\",\"1616\":\"v-477bbf9a#14/0\",\"1617\":\"v-477bbf9a#14/1\",\"1618\":\"v-477bbf9a#14/2\",\"1619\":\"v-477bbf9a#14/3\",\"1620\":\"v-477bbf9a#14/4\",\"1621\":\"v-477bbf9a#14/5\",\"1622\":\"v-477bbf9a#14/6\",\"1623\":\"v-477bbf9a#14/7\",\"1624\":\"v-477bbf9a#14/8\",\"1625\":\"v-477bbf9a#14/9\",\"1626\":\"v-477bbf9a#14/10\",\"1627\":\"v-477bbf9a#14/11\",\"1628\":\"v-477bbf9a#14/12\",\"1629\":\"v-477bbf9a#14/13\",\"1630\":\"v-477bbf9a#14/14\",\"1631\":\"v-477bbf9a#14/15\",\"1632\":\"v-477bbf9a#14/16\",\"1633\":\"v-477bbf9a#14/17\",\"1634\":\"v-477bbf9a#14/18\",\"1635\":\"v-477bbf9a#14/19\",\"1636\":\"v-477bbf9a#15\",\"1637\":\"v-477bbf9a#15/0\",\"1638\":\"v-477bbf9a#15/1\",\"1639\":\"v-477bbf9a#15/2\",\"1640\":\"v-477bbf9a#15/3\",\"1641\":\"v-477bbf9a#15/4\",\"1642\":\"v-477bbf9a#15/5\",\"1643\":\"v-477bbf9a#15/6\",\"1644\":\"v-477bbf9a#15/7\",\"1645\":\"v-477bbf9a#15/8\",\"1646\":\"v-477bbf9a#15/9\",\"1647\":\"v-477bbf9a#15/10\",\"1648\":\"v-477bbf9a#15/11\",\"1649\":\"v-477bbf9a#15/12\",\"1650\":\"v-477bbf9a#15/13\",\"1651\":\"v-477bbf9a#15/14\",\"1652\":\"v-477bbf9a#15/15\",\"1653\":\"v-477bbf9a#15/16\",\"1654\":\"v-477bbf9a#15/17\",\"1655\":\"v-477bbf9a#15/18\",\"1656\":\"v-477bbf9a#15/19\",\"1657\":\"v-477bbf9a#16\",\"1658\":\"v-477bbf9a#16/0\",\"1659\":\"v-477bbf9a#16/1\",\"1660\":\"v-477bbf9a#16/2\",\"1661\":\"v-477bbf9a#16/3\",\"1662\":\"v-477bbf9a#16/4\",\"1663\":\"v-477bbf9a#16/5\",\"1664\":\"v-477bbf9a#16/6\",\"1665\":\"v-477bbf9a#16/7\",\"1666\":\"v-477bbf9a#16/8\",\"1667\":\"v-477bbf9a#16/9\",\"1668\":\"v-477bbf9a#16/10\",\"1669\":\"v-477bbf9a#16/11\",\"1670\":\"v-477bbf9a#16/12\",\"1671\":\"v-477bbf9a#16/13\",\"1672\":\"v-477bbf9a#16/14\",\"1673\":\"v-477bbf9a#16/15\",\"1674\":\"v-477bbf9a#16/16\",\"1675\":\"v-477bbf9a#17\",\"1676\":\"v-477bbf9a#17/0\",\"1677\":\"v-477bbf9a#17/1\",\"1678\":\"v-477bbf9a#17/2\",\"1679\":\"v-477bbf9a#17/3\",\"1680\":\"v-477bbf9a#17/4\",\"1681\":\"v-477bbf9a#17/5\",\"1682\":\"v-477bbf9a#17/6\",\"1683\":\"v-477bbf9a#17/7\",\"1684\":\"v-477bbf9a#17/8\",\"1685\":\"v-477bbf9a#17/9\",\"1686\":\"v-477bbf9a#17/10\",\"1687\":\"v-477bbf9a#17/11\",\"1688\":\"v-70612c1f\",\"1689\":\"v-70612c1f#1\",\"1690\":\"v-70612c1f#2\",\"1691\":\"v-70612c1f#2/0\",\"1692\":\"v-70612c1f#2/1\",\"1693\":\"v-70612c1f#2/2\",\"1694\":\"v-70612c1f#2/3\",\"1695\":\"v-70612c1f#3\",\"1696\":\"v-70612c1f#3/0\",\"1697\":\"v-70612c1f#3/1\",\"1698\":\"v-70612c1f#3/2\",\"1699\":\"v-70612c1f#3/3\",\"1700\":\"v-70612c1f#3/4\",\"1701\":\"v-70612c1f#3/5\",\"1702\":\"v-70612c1f#3/6\",\"1703\":\"v-70612c1f#3/7\",\"1704\":\"v-70612c1f#3/8\",\"1705\":\"v-70612c1f#4\",\"1706\":\"v-94b65880\",\"1707\":\"v-94b65880#1\",\"1708\":\"v-94b65880#2\",\"1709\":\"v-94b65880#2/0\",\"1710\":\"v-94b65880#3\",\"1711\":\"v-94b65880#3/0\",\"1712\":\"v-94b65880#3/1\",\"1713\":\"v-94b65880#3/2\",\"1714\":\"v-94b65880#3/3\",\"1715\":\"v-94b65880#3/4\",\"1716\":\"v-94b65880#3/5\",\"1717\":\"v-94b65880#3/6\",\"1718\":\"v-94b65880#3/7\",\"1719\":\"v-94b65880#3/8\",\"1720\":\"v-94b65880#3/9\",\"1721\":\"v-94b65880#3/10\",\"1722\":\"v-94b65880#3/11\",\"1723\":\"v-94b65880#3/12\",\"1724\":\"v-94b65880#3/13\",\"1725\":\"v-94b65880#3/14\",\"1726\":\"v-94b65880#3/15\",\"1727\":\"v-94b65880#3/16\",\"1728\":\"v-94b65880#3/17\",\"1729\":\"v-94b65880#3/18\",\"1730\":\"v-94b65880#3/19\",\"1731\":\"v-94b65880#3/20\",\"1732\":\"v-94b65880#3/21\",\"1733\":\"v-94b65880#4\",\"1734\":\"v-94b65880#4/0\",\"1735\":\"v-94b65880#4/1\",\"1736\":\"v-94b65880#4/2\",\"1737\":\"v-94b65880#4/3\",\"1738\":\"v-94b65880#4/4\",\"1739\":\"v-94b65880#4/5\",\"1740\":\"v-94b65880#4/6\",\"1741\":\"v-94b65880#4/7\",\"1742\":\"v-94b65880#4/8\",\"1743\":\"v-94b65880#4/9\",\"1744\":\"v-94b65880#4/10\",\"1745\":\"v-94b65880#4/11\",\"1746\":\"v-94b65880#4/12\",\"1747\":\"v-94b65880#4/13\",\"1748\":\"v-94b65880#4/14\",\"1749\":\"v-94b65880#4/15\",\"1750\":\"v-94b65880#4/16\",\"1751\":\"v-94b65880#4/17\",\"1752\":\"v-94b65880#4/18\",\"1753\":\"v-94b65880#4/19\",\"1754\":\"v-94b65880#4/20\",\"1755\":\"v-94b65880#4/21\",\"1756\":\"v-94b65880#4/22\",\"1757\":\"v-94b65880#4/23\",\"1758\":\"v-94b65880#4/24\",\"1759\":\"v-94b65880#4/25\",\"1760\":\"v-94b65880#4/26\",\"1761\":\"v-94b65880#4/27\",\"1762\":\"v-94b65880#4/28\",\"1763\":\"v-94b65880#5\",\"1764\":\"v-94b65880#5/0\",\"1765\":\"v-94b65880#5/1\",\"1766\":\"v-94b65880#5/2\",\"1767\":\"v-94b65880#5/3\",\"1768\":\"v-94b65880#5/4\",\"1769\":\"v-7fd9d9c7\",\"1770\":\"v-7fd9d9c7#1\",\"1771\":\"v-7fd9d9c7#2\",\"1772\":\"v-7fd9d9c7#2/0\",\"1773\":\"v-7fd9d9c7#2/1\",\"1774\":\"v-7fd9d9c7#2/2\",\"1775\":\"v-7fd9d9c7#2/3\",\"1776\":\"v-7fd9d9c7#2/4\",\"1777\":\"v-7fd9d9c7#3\",\"1778\":\"v-7fd9d9c7#4\",\"1779\":\"v-7fd9d9c7#4/0\",\"1780\":\"v-7fd9d9c7#5\",\"1781\":\"v-7fd9d9c7#5/0\",\"1782\":\"v-7fd9d9c7#5/1\",\"1783\":\"v-7fd9d9c7#5/2\",\"1784\":\"v-7fd9d9c7#6\",\"1785\":\"v-7fd9d9c7#6/0\",\"1786\":\"v-7fd9d9c7#7\",\"1787\":\"v-7fd9d9c7#7/0\",\"1788\":\"v-7fd9d9c7#7/1\",\"1789\":\"v-7fd9d9c7#7/2\",\"1790\":\"v-7fd9d9c7#7/3\",\"1791\":\"v-7fd9d9c7#7/4\",\"1792\":\"v-7fd9d9c7#8\",\"1793\":\"v-7fd9d9c7#8/0\",\"1794\":\"v-7fd9d9c7#8/1\",\"1795\":\"v-7fd9d9c7#8/2\",\"1796\":\"v-7fd9d9c7#8/3\",\"1797\":\"v-7fd9d9c7#8/4\",\"1798\":\"v-7fd9d9c7#9\",\"1799\":\"v-7fd9d9c7#9/0\",\"1800\":\"v-7fd9d9c7#9/1\",\"1801\":\"v-7fd9d9c7#9/2\",\"1802\":\"v-7fd9d9c7#9/3\",\"1803\":\"v-7fd9d9c7#9/4\",\"1804\":\"v-7fd9d9c7#9/5\",\"1805\":\"v-7fd9d9c7#9/6\",\"1806\":\"v-7fd9d9c7#9/7\",\"1807\":\"v-7fd9d9c7#9/8\",\"1808\":\"v-7fd9d9c7#9/9\",\"1809\":\"v-7fd9d9c7#9/10\",\"1810\":\"v-7fd9d9c7#9/11\",\"1811\":\"v-7fd9d9c7#9/12\",\"1812\":\"v-7fd9d9c7#9/13\",\"1813\":\"v-7fd9d9c7#9/14\",\"1814\":\"v-7fd9d9c7#9/15\",\"1815\":\"v-7fd9d9c7#9/16\",\"1816\":\"v-7fd9d9c7#9/17\",\"1817\":\"v-7fd9d9c7#9/18\",\"1818\":\"v-7fd9d9c7#9/19\",\"1819\":\"v-7fd9d9c7#9/20\",\"1820\":\"v-7fd9d9c7#10\",\"1821\":\"v-7fd9d9c7#11\",\"1822\":\"v-7fd9d9c7#11/0\",\"1823\":\"v-7fd9d9c7#11/1\",\"1824\":\"v-7fd9d9c7#11/2\",\"1825\":\"v-7fd9d9c7#11/3\",\"1826\":\"v-7fd9d9c7#11/4\",\"1827\":\"v-7fd9d9c7#11/5\",\"1828\":\"v-7fd9d9c7#11/6\",\"1829\":\"v-7fd9d9c7#11/7\",\"1830\":\"v-7fd9d9c7#12\",\"1831\":\"v-7fd9d9c7#12/0\",\"1832\":\"v-7fd9d9c7#12/1\",\"1833\":\"v-7fd9d9c7#12/2\",\"1834\":\"v-7fd9d9c7#12/3\",\"1835\":\"v-7fd9d9c7#12/4\",\"1836\":\"v-7fd9d9c7#12/5\",\"1837\":\"v-7fd9d9c7#12/6\",\"1838\":\"v-2d06a607\",\"1839\":\"v-2d06a607#1\",\"1840\":\"v-2d06a607#2\",\"1841\":\"v-2d06a607#3\",\"1842\":\"v-2d06a607#3/0\",\"1843\":\"v-2d06a607#4\",\"1844\":\"v-2d06a607#4/0\",\"1845\":\"v-2d06a607#5\",\"1846\":\"v-2d06a607#5/0\",\"1847\":\"v-2d06a607#6\",\"1848\":\"v-2d06a607#6/0\",\"1849\":\"v-2d06a607#6/1\",\"1850\":\"v-2d06a607#6/2\",\"1851\":\"v-2d06a607#6/3\",\"1852\":\"v-2d06a607#6/4\",\"1853\":\"v-2d06a607#6/5\",\"1854\":\"v-2d06a607#6/6\",\"1855\":\"v-2d06a607#6/7\",\"1856\":\"v-2d06a607#6/8\",\"1857\":\"v-2d06a607#7\",\"1858\":\"v-2d06a607#7/0\",\"1859\":\"v-2d06a607#7/1\",\"1860\":\"v-2d06a607#8\",\"1861\":\"v-2d06a607#8/2\",\"1862\":\"v-2d06a607#9\",\"1863\":\"v-2d06a607#9/0\",\"1864\":\"v-2d06a607#10\",\"1865\":\"v-2d06a607#10/0\",\"1866\":\"v-2d06a607#11\",\"1867\":\"v-2d06a607#11/0\",\"1868\":\"v-2d06a607#12\",\"1869\":\"v-2d06a607#12/0\",\"1870\":\"v-2d06a607#12/1\",\"1871\":\"v-2d06a607#13\",\"1872\":\"v-2d06a607#13/0\",\"1873\":\"v-2d06a607#13/1\",\"1874\":\"v-2d06a607#13/2\",\"1875\":\"v-2d06a607#13/3\",\"1876\":\"v-2d06a607#13/4\",\"1877\":\"v-2d06a607#13/5\",\"1878\":\"v-2d06a607#14\",\"1879\":\"v-2d06a607#14/0\",\"1880\":\"v-2d06a607#15\",\"1881\":\"v-2d06a607#15/0\",\"1882\":\"v-544bf93a\",\"1883\":\"v-544bf93a#0/0\",\"1884\":\"v-544bf93a#0/1\",\"1885\":\"v-544bf93a#0/2\",\"1886\":\"v-544bf93a#1\",\"1887\":\"v-544bf93a#1/0\",\"1888\":\"v-544bf93a#1/1\",\"1889\":\"v-544bf93a#1/2\",\"1890\":\"v-544bf93a#1/3\",\"1891\":\"v-544bf93a#1/4\",\"1892\":\"v-544bf93a#2\",\"1893\":\"v-544bf93a#2/0\",\"1894\":\"v-544bf93a#2/1\",\"1895\":\"v-544bf93a#2/2\",\"1896\":\"v-544bf93a#2/3\",\"1897\":\"v-75b93c32\",\"1898\":\"v-75b93c32#0/0\",\"1899\":\"v-75b93c32#0/1\",\"1900\":\"v-75b93c32#0/2\",\"1901\":\"v-75b93c32#1\",\"1902\":\"v-75b93c32#1/0\",\"1903\":\"v-75b93c32#1/1\",\"1904\":\"v-75b93c32#1/2\",\"1905\":\"v-75b93c32#1/3\",\"1906\":\"v-75b93c32#1/4\",\"1907\":\"v-75b93c32#2\",\"1908\":\"v-75b93c32#2/0\",\"1909\":\"v-75b93c32#2/1\",\"1910\":\"v-75b93c32#2/2\",\"1911\":\"v-75b93c32#2/3\",\"1912\":\"v-38cfe3a6\",\"1913\":\"v-38cfe3a6#0/0\",\"1914\":\"v-38cfe3a6#0/1\",\"1915\":\"v-38cfe3a6#1\",\"1916\":\"v-38cfe3a6#2\",\"1917\":\"v-38cfe3a6#2/0\",\"1918\":\"v-38cfe3a6#2/1\",\"1919\":\"v-38cfe3a6#2/2\",\"1920\":\"v-38cfe3a6#2/3\",\"1921\":\"v-38cfe3a6#2/4\",\"1922\":\"v-38cfe3a6#3\",\"1923\":\"v-38cfe3a6#3/0\",\"1924\":\"v-38cfe3a6#3/1\",\"1925\":\"v-3a84bc45\",\"1926\":\"v-3a84bc45#0/0\",\"1927\":\"v-3a84bc45#0/1\",\"1928\":\"v-3a84bc45#1\",\"1929\":\"v-3a84bc45#2\",\"1930\":\"v-3a84bc45#2/0\",\"1931\":\"v-3a84bc45#2/1\",\"1932\":\"v-3a84bc45#2/2\",\"1933\":\"v-3a84bc45#2/3\",\"1934\":\"v-3a84bc45#2/4\",\"1935\":\"v-3a84bc45#3\",\"1936\":\"v-3a84bc45#3/0\",\"1937\":\"v-3a84bc45#3/1\",\"1938\":\"v-711fd025\",\"1939\":\"v-711fd025#0/0\",\"1940\":\"v-711fd025#0/1\",\"1941\":\"v-711fd025#0/2\",\"1942\":\"v-711fd025#1\",\"1943\":\"v-711fd025#1/0\",\"1944\":\"v-711fd025#1/1\",\"1945\":\"v-711fd025#1/2\",\"1946\":\"v-711fd025#1/3\",\"1947\":\"v-711fd025#1/4\",\"1948\":\"v-711fd025#2\",\"1949\":\"v-711fd025#2/0\",\"1950\":\"v-711fd025#2/1\",\"1951\":\"v-711fd025#2/2\",\"1952\":\"v-711fd025#2/3\",\"1953\":\"v-1dff623b\",\"1954\":\"v-1dff623b#0/0\",\"1955\":\"v-1dff623b#0/1\",\"1956\":\"v-1dff623b#0/2\",\"1957\":\"v-1dff623b#1\",\"1958\":\"v-1dff623b#1/0\",\"1959\":\"v-1dff623b#1/1\",\"1960\":\"v-1dff623b#1/2\",\"1961\":\"v-1dff623b#1/3\",\"1962\":\"v-1dff623b#1/4\",\"1963\":\"v-1dff623b#2\",\"1964\":\"v-1dff623b#2/0\",\"1965\":\"v-1dff623b#2/1\",\"1966\":\"v-1dff623b#2/2\",\"1967\":\"v-1dff623b#2/3\",\"1968\":\"v-0daa9495\",\"1969\":\"v-0daa9495#0/0\",\"1970\":\"v-0daa9495#0/1\",\"1971\":\"v-0daa9495#0/2\",\"1972\":\"v-0daa9495#0/3\",\"1973\":\"v-0daa9495#0/4\",\"1974\":\"v-0daa9495#0/5\",\"1975\":\"v-0daa9495#0/6\",\"1976\":\"v-0daa9495#0/7\",\"1977\":\"v-0daa9495#0/8\",\"1978\":\"v-0daa9495#0/9\",\"1979\":\"v-0daa9495#0/10\",\"1980\":\"v-0daa9495#0/11\",\"1981\":\"v-0daa9495#0/12\",\"1982\":\"v-0daa9495#0/13\",\"1983\":\"v-0daa9495#0/14\",\"1984\":\"v-0daa9495#0/15\",\"1985\":\"v-0daa9495#0/16\",\"1986\":\"v-0daa9495#0/17\",\"1987\":\"v-0daa9495#0/18\",\"1988\":\"v-0daa9495#0/19\",\"1989\":\"v-0daa9495#0/20\",\"1990\":\"v-0daa9495#0/21\",\"1991\":\"v-0daa9495#0/22\",\"1992\":\"v-0daa9495#0/23\",\"1993\":\"v-0daa9495#0/24\",\"1994\":\"v-0daa9495#0/25\",\"1995\":\"v-0daa9495#0/26\",\"1996\":\"v-0daa9495#0/27\",\"1997\":\"v-0daa9495#0/28\",\"1998\":\"v-0daa9495#0/29\",\"1999\":\"v-0daa9495#0/30\",\"2000\":\"v-0daa9495#0/31\",\"2001\":\"v-0daa9495#0/32\",\"2002\":\"v-0daa9495#0/33\",\"2003\":\"v-0daa9495#0/34\",\"2004\":\"v-0daa9495#0/35\",\"2005\":\"v-0daa9495#0/36\",\"2006\":\"v-0daa9495#0/37\",\"2007\":\"v-0daa9495#0/38\",\"2008\":\"v-0daa9495#0/39\",\"2009\":\"v-0daa9495#0/40\",\"2010\":\"v-0daa9495#0/41\",\"2011\":\"v-0daa9495#0/42\",\"2012\":\"v-0daa9495#1\",\"2013\":\"v-0daa9495#2\",\"2014\":\"v-0daa9495#2/0\",\"2015\":\"v-0daa9495#2/1\",\"2016\":\"v-0daa9495#2/2\",\"2017\":\"v-0daa9495#2/3\",\"2018\":\"v-0daa9495#2/4\",\"2019\":\"v-0daa9495#2/5\",\"2020\":\"v-0daa9495#2/6\",\"2021\":\"v-0daa9495#2/7\",\"2022\":\"v-0daa9495#3\",\"2023\":\"v-0daa9495#3/0\",\"2024\":\"v-0daa9495#3/1\",\"2025\":\"v-0daa9495#4\",\"2026\":\"v-0daa9495#4/0\",\"2027\":\"v-0daa9495#4/1\",\"2028\":\"v-0daa9495#4/2\",\"2029\":\"v-0daa9495#4/3\",\"2030\":\"v-0daa9495#4/4\",\"2031\":\"v-0daa9495#5\",\"2032\":\"v-0daa9495#5/0\",\"2033\":\"v-0daa9495#5/1\",\"2034\":\"v-0daa9495#5/2\",\"2035\":\"v-0daa9495#5/3\",\"2036\":\"v-0daa9495#5/4\",\"2037\":\"v-0daa9495#6\",\"2038\":\"v-0daa9495#6/0\",\"2039\":\"v-0daa9495#6/1\",\"2040\":\"v-0daa9495#6/2\",\"2041\":\"v-0daa9495#6/3\",\"2042\":\"v-0daa9495#6/4\",\"2043\":\"v-0daa9495#6/5\",\"2044\":\"v-0daa9495#6/6\",\"2045\":\"v-0daa9495#6/7\",\"2046\":\"v-0daa9495#6/8\",\"2047\":\"v-0daa9495#6/9\",\"2048\":\"v-0daa9495#6/10\",\"2049\":\"v-0daa9495#6/11\",\"2050\":\"v-0daa9495#7\",\"2051\":\"v-0daa9495#7/0\",\"2052\":\"v-0daa9495#8\",\"2053\":\"v-0daa9495#8/0\",\"2054\":\"v-0daa9495#8/1\",\"2055\":\"v-0daa9495#8/2\",\"2056\":\"v-0daa9495#8/3\",\"2057\":\"v-0daa9495#8/4\",\"2058\":\"v-0daa9495#8/5\",\"2059\":\"v-0daa9495#8/6\",\"2060\":\"v-0daa9495#8/7\",\"2061\":\"v-0daa9495#8/8\",\"2062\":\"v-0daa9495#8/9\",\"2063\":\"v-0daa9495#8/10\",\"2064\":\"v-0daa9495#8/11\",\"2065\":\"v-0daa9495#8/12\",\"2066\":\"v-0daa9495#8/13\",\"2067\":\"v-0daa9495#8/14\",\"2068\":\"v-0daa9495#8/15\",\"2069\":\"v-0daa9495#8/16\",\"2070\":\"v-0daa9495#8/17\",\"2071\":\"v-0daa9495#8/18\",\"2072\":\"v-0daa9495#8/19\",\"2073\":\"v-0daa9495#8/20\",\"2074\":\"v-0daa9495#9\",\"2075\":\"v-0daa9495#9/0\",\"2076\":\"v-0daa9495#9/1\",\"2077\":\"v-0daa9495#9/2\",\"2078\":\"v-0daa9495#9/3\",\"2079\":\"v-0daa9495#9/4\",\"2080\":\"v-0daa9495#9/5\",\"2081\":\"v-0daa9495#9/6\",\"2082\":\"v-0daa9495#9/7\",\"2083\":\"v-0daa9495#9/8\",\"2084\":\"v-0daa9495#9/9\",\"2085\":\"v-0daa9495#9/10\",\"2086\":\"v-0daa9495#9/11\",\"2087\":\"v-0daa9495#10\",\"2088\":\"v-0daa9495#10/0\",\"2089\":\"v-0daa9495#10/1\",\"2090\":\"v-0daa9495#10/2\",\"2091\":\"v-0daa9495#10/3\",\"2092\":\"v-0daa9495#10/4\",\"2093\":\"v-0daa9495#10/5\",\"2094\":\"v-0daa9495#11\",\"2095\":\"v-0daa9495#12\",\"2096\":\"v-0daa9495#13\",\"2097\":\"v-0daa9495#14\",\"2098\":\"v-0daa9495#15\",\"2099\":\"v-0daa9495#16\",\"2100\":\"v-0daa9495#17\",\"2101\":\"v-0daa9495#18\",\"2102\":\"v-0daa9495#19\",\"2103\":\"v-0daa9495#20\",\"2104\":\"v-0daa9495#21\",\"2105\":\"v-0daa9495#22\",\"2106\":\"v-0daa9495#23\",\"2107\":\"v-0daa9495#24\",\"2108\":\"v-0daa9495#25\",\"2109\":\"v-0daa9495#26\",\"2110\":\"v-0daa9495#27\",\"2111\":\"v-0daa9495#28\",\"2112\":\"v-0daa9495#29\",\"2113\":\"v-0daa9495#30\",\"2114\":\"v-0daa9495#31\",\"2115\":\"v-0daa9495#32\",\"2116\":\"v-0daa9495#33\",\"2117\":\"v-0daa9495#34\",\"2118\":\"v-0daa9495#35\",\"2119\":\"v-0daa9495#36\",\"2120\":\"v-0daa9495#37\",\"2121\":\"v-0daa9495#38\",\"2122\":\"v-0daa9495#39\",\"2123\":\"v-0daa9495#40\",\"2124\":\"v-0daa9495#41\",\"2125\":\"v-0daa9495#42\",\"2126\":\"v-0daa9495#43\",\"2127\":\"v-77c78bde\",\"2128\":\"v-77c78bde#1\",\"2129\":\"v-77c78bde#1/0\",\"2130\":\"v-77c78bde#1/1\",\"2131\":\"v-77c78bde#1/2\",\"2132\":\"v-77c78bde#1/3\",\"2133\":\"v-77c78bde#1/4\",\"2134\":\"v-77c78bde#1/5\",\"2135\":\"v-77c78bde#1/6\",\"2136\":\"v-77c78bde#1/7\",\"2137\":\"v-77c78bde#1/8\",\"2138\":\"v-77c78bde#2\",\"2139\":\"v-77c78bde#2/0\",\"2140\":\"v-77c78bde#3\",\"2141\":\"v-77c78bde#3/0\",\"2142\":\"v-77c78bde#4\",\"2143\":\"v-77c78bde#5\",\"2144\":\"v-77c78bde#6\",\"2145\":\"v-77c78bde#7\",\"2146\":\"v-77c78bde#7/0\",\"2147\":\"v-77c78bde#7/1\",\"2148\":\"v-77c78bde#7/2\",\"2149\":\"v-77c78bde#7/3\",\"2150\":\"v-77c78bde#7/4\",\"2151\":\"v-77c78bde#7/5\",\"2152\":\"v-77c78bde#8\",\"2153\":\"v-77c78bde#8/0\",\"2154\":\"v-77c78bde#8/1\",\"2155\":\"v-77c78bde#8/2\",\"2156\":\"v-77c78bde#8/3\",\"2157\":\"v-77c78bde#8/4\",\"2158\":\"v-77c78bde#8/5\",\"2159\":\"v-77c78bde#8/6\",\"2160\":\"v-77c78bde#8/7\",\"2161\":\"v-77c78bde#8/8\",\"2162\":\"v-77c78bde#8/9\",\"2163\":\"v-77c78bde#8/10\",\"2164\":\"v-77c78bde#9\",\"2165\":\"v-77c78bde#9/0\",\"2166\":\"v-77c78bde#9/1\",\"2167\":\"v-77c78bde#9/2\",\"2168\":\"v-77c78bde#9/3\",\"2169\":\"v-77c78bde#9/4\",\"2170\":\"v-77c78bde#9/5\",\"2171\":\"v-77c78bde#9/6\",\"2172\":\"v-77c78bde#9/7\",\"2173\":\"v-77c78bde#9/8\",\"2174\":\"v-77c78bde#9/9\",\"2175\":\"v-77c78bde#9/10\",\"2176\":\"v-77c78bde#10\",\"2177\":\"v-77c78bde#11\",\"2178\":\"v-77c78bde#11/0\",\"2179\":\"v-77c78bde#11/1\",\"2180\":\"v-77c78bde#12\",\"2181\":\"v-77c78bde#12/0\",\"2182\":\"v-77c78bde#12/1\",\"2183\":\"v-77c78bde#12/2\",\"2184\":\"v-77c78bde#12/3\",\"2185\":\"v-77c78bde#13\",\"2186\":\"v-77c78bde#13/0\",\"2187\":\"v-77c78bde#13/1\",\"2188\":\"v-77c78bde#13/2\",\"2189\":\"v-77c78bde#13/3\",\"2190\":\"v-77c78bde#14\",\"2191\":\"v-77c78bde#14/0\",\"2192\":\"v-77c78bde#14/1\",\"2193\":\"v-77c78bde#14/2\",\"2194\":\"v-77c78bde#15\",\"2195\":\"v-77c78bde#16\",\"2196\":\"v-77c78bde#16/0\",\"2197\":\"v-77c78bde#16/1\",\"2198\":\"v-77c78bde#16/2\",\"2199\":\"v-77c78bde#16/3\",\"2200\":\"v-77c78bde#17\",\"2201\":\"v-77c78bde#17/0\",\"2202\":\"v-77c78bde#17/1\",\"2203\":\"v-77c78bde#17/2\",\"2204\":\"v-77c78bde#17/3\",\"2205\":\"v-77c78bde#17/4\",\"2206\":\"v-77c78bde#17/5\",\"2207\":\"v-77c78bde#17/6\",\"2208\":\"v-77c78bde#17/7\",\"2209\":\"v-77c78bde#17/8\",\"2210\":\"v-77c78bde#17/9\",\"2211\":\"v-77c78bde#17/10\",\"2212\":\"v-77c78bde#18\",\"2213\":\"v-77c78bde#18/0\",\"2214\":\"v-77c78bde#18/1\",\"2215\":\"v-77c78bde#18/2\",\"2216\":\"v-77c78bde#18/3\",\"2217\":\"v-77c78bde#18/4\",\"2218\":\"v-77c78bde#18/5\",\"2219\":\"v-77c78bde#18/6\",\"2220\":\"v-77c78bde#18/7\",\"2221\":\"v-265d1e46\",\"2222\":\"v-265d1e46#1\",\"2223\":\"v-265d1e46#1/0\",\"2224\":\"v-265d1e46#1/1\",\"2225\":\"v-265d1e46#1/2\",\"2226\":\"v-265d1e46#1/3\",\"2227\":\"v-265d1e46#1/4\",\"2228\":\"v-265d1e46#1/5\",\"2229\":\"v-265d1e46#1/6\",\"2230\":\"v-265d1e46#1/7\",\"2231\":\"v-265d1e46#2\",\"2232\":\"v-265d1e46#3\",\"2233\":\"v-6703a744\",\"2234\":\"v-6703a744#1\",\"2235\":\"v-6703a744#2\",\"2236\":\"v-6703a744#3\",\"2237\":\"v-6703a744#3/0\",\"2238\":\"v-6703a744#3/1\",\"2239\":\"v-6703a744#3/2\",\"2240\":\"v-6703a744#3/3\",\"2241\":\"v-6703a744#3/4\",\"2242\":\"v-6703a744#3/5\",\"2243\":\"v-6703a744#3/6\",\"2244\":\"v-6703a744#3/7\",\"2245\":\"v-6703a744#3/8\",\"2246\":\"v-6703a744#3/9\",\"2247\":\"v-6703a744#3/10\",\"2248\":\"v-6703a744#3/11\",\"2249\":\"v-6703a744#3/12\",\"2250\":\"v-6703a744#3/13\",\"2251\":\"v-6703a744#3/14\",\"2252\":\"v-6703a744#3/15\",\"2253\":\"v-6703a744#3/16\",\"2254\":\"v-6703a744#3/17\",\"2255\":\"v-6703a744#3/18\",\"2256\":\"v-6703a744#3/19\",\"2257\":\"v-6703a744#3/20\",\"2258\":\"v-6703a744#3/21\",\"2259\":\"v-6703a744#3/22\",\"2260\":\"v-6703a744#4\",\"2261\":\"v-6703a744#4/0\",\"2262\":\"v-6703a744#5\",\"2263\":\"v-6703a744#5/0\",\"2264\":\"v-6703a744#5/1\",\"2265\":\"v-6703a744#5/2\",\"2266\":\"v-6703a744#5/3\",\"2267\":\"v-6703a744#5/4\",\"2268\":\"v-6703a744#5/5\",\"2269\":\"v-6703a744#5/6\",\"2270\":\"v-6703a744#5/7\",\"2271\":\"v-6703a744#5/8\",\"2272\":\"v-6703a744#5/9\",\"2273\":\"v-6703a744#5/10\",\"2274\":\"v-6703a744#5/11\",\"2275\":\"v-6703a744#5/12\",\"2276\":\"v-6703a744#5/13\",\"2277\":\"v-6703a744#6\",\"2278\":\"v-6703a744#6/0\",\"2279\":\"v-6703a744#6/1\",\"2280\":\"v-6703a744#6/2\",\"2281\":\"v-6703a744#6/3\",\"2282\":\"v-6703a744#6/4\",\"2283\":\"v-6703a744#6/5\",\"2284\":\"v-6703a744#6/6\",\"2285\":\"v-6703a744#6/7\",\"2286\":\"v-6703a744#6/8\",\"2287\":\"v-6703a744#6/9\",\"2288\":\"v-6703a744#6/10\",\"2289\":\"v-6703a744#6/11\",\"2290\":\"v-6703a744#6/12\",\"2291\":\"v-6703a744#6/13\",\"2292\":\"v-6703a744#6/14\",\"2293\":\"v-6703a744#7\",\"2294\":\"v-6703a744#7/0\",\"2295\":\"v-6703a744#7/1\",\"2296\":\"v-6703a744#7/2\",\"2297\":\"v-6703a744#7/3\",\"2298\":\"v-6703a744#8\",\"2299\":\"v-6703a744#8/0\",\"2300\":\"v-6703a744#8/1\",\"2301\":\"v-6703a744#8/2\",\"2302\":\"v-6703a744#8/3\",\"2303\":\"v-6703a744#8/4\",\"2304\":\"v-6703a744#8/5\",\"2305\":\"v-6703a744#8/6\",\"2306\":\"v-6703a744#8/7\",\"2307\":\"v-6703a744#9\",\"2308\":\"v-6703a744#9/0\",\"2309\":\"v-6703a744#9/1\",\"2310\":\"v-6703a744#9/2\",\"2311\":\"v-6703a744#9/3\",\"2312\":\"v-6703a744#9/4\",\"2313\":\"v-6703a744#9/5\",\"2314\":\"v-6703a744#9/6\",\"2315\":\"v-6703a744#9/7\",\"2316\":\"v-6703a744#10\",\"2317\":\"v-6703a744#10/0\",\"2318\":\"v-6703a744#10/1\",\"2319\":\"v-6703a744#10/2\",\"2320\":\"v-6703a744#10/3\",\"2321\":\"v-6703a744#10/4\",\"2322\":\"v-6703a744#10/5\",\"2323\":\"v-6703a744#10/6\",\"2324\":\"v-6703a744#11\",\"2325\":\"v-6703a744#11/0\",\"2326\":\"v-6703a744#11/1\",\"2327\":\"v-6703a744#11/2\",\"2328\":\"v-6703a744#12\",\"2329\":\"v-6703a744#12/0\",\"2330\":\"v-6703a744#12/1\",\"2331\":\"v-6703a744#12/2\",\"2332\":\"v-6703a744#12/3\",\"2333\":\"v-6703a744#12/4\",\"2334\":\"v-6703a744#13\",\"2335\":\"v-6703a744#13/0\",\"2336\":\"v-6703a744#13/1\",\"2337\":\"v-6703a744#13/2\",\"2338\":\"v-6703a744#13/3\",\"2339\":\"v-6703a744#13/4\",\"2340\":\"v-6703a744#13/5\",\"2341\":\"v-6703a744#13/6\",\"2342\":\"v-6703a744#13/7\",\"2343\":\"v-6703a744#13/8\",\"2344\":\"v-6703a744#13/9\",\"2345\":\"v-6703a744#13/10\",\"2346\":\"v-6703a744#13/11\",\"2347\":\"v-6703a744#13/12\",\"2348\":\"v-6703a744#13/13\",\"2349\":\"v-6703a744#13/14\",\"2350\":\"v-6703a744#13/15\",\"2351\":\"v-6703a744#13/16\",\"2352\":\"v-6703a744#13/17\",\"2353\":\"v-6703a744#13/18\",\"2354\":\"v-6703a744#13/19\",\"2355\":\"v-6703a744#13/20\",\"2356\":\"v-6703a744#13/21\",\"2357\":\"v-6703a744#13/22\",\"2358\":\"v-6703a744#13/23\",\"2359\":\"v-6703a744#13/24\",\"2360\":\"v-6703a744#13/25\",\"2361\":\"v-6703a744#14\",\"2362\":\"v-6703a744#14/0\",\"2363\":\"v-6703a744#14/1\",\"2364\":\"v-6703a744#15\",\"2365\":\"v-6703a744#15/0\",\"2366\":\"v-6703a744#15/1\",\"2367\":\"v-6703a744#15/2\",\"2368\":\"v-6703a744#15/3\",\"2369\":\"v-6703a744#15/4\",\"2370\":\"v-6703a744#15/5\",\"2371\":\"v-6703a744#15/6\",\"2372\":\"v-6703a744#15/7\",\"2373\":\"v-6703a744#15/8\",\"2374\":\"v-6703a744#15/9\",\"2375\":\"v-6703a744#15/10\",\"2376\":\"v-6703a744#15/11\",\"2377\":\"v-6703a744#15/12\",\"2378\":\"v-6703a744#15/13\",\"2379\":\"v-6703a744#15/14\",\"2380\":\"v-6703a744#15/15\",\"2381\":\"v-6703a744#15/16\",\"2382\":\"v-6703a744#15/17\",\"2383\":\"v-6703a744#16\",\"2384\":\"v-6703a744#16/0\",\"2385\":\"v-6703a744#16/1\",\"2386\":\"v-6703a744#16/2\",\"2387\":\"v-6703a744#16/3\",\"2388\":\"v-6703a744#16/4\",\"2389\":\"v-6703a744#17\",\"2390\":\"v-6703a744#17/0\",\"2391\":\"v-6703a744#17/1\",\"2392\":\"v-6703a744#17/2\",\"2393\":\"v-6703a744#17/3\",\"2394\":\"v-6703a744#17/4\",\"2395\":\"v-6703a744#17/5\",\"2396\":\"v-6703a744#17/6\",\"2397\":\"v-6703a744#17/7\",\"2398\":\"v-6703a744#17/8\",\"2399\":\"v-6703a744#18\",\"2400\":\"v-6703a744#18/0\",\"2401\":\"v-6703a744#18/1\",\"2402\":\"v-6703a744#18/2\",\"2403\":\"v-6703a744#18/3\",\"2404\":\"v-6703a744#18/4\",\"2405\":\"v-6703a744#18/5\",\"2406\":\"v-6703a744#18/6\",\"2407\":\"v-6703a744#18/7\",\"2408\":\"v-6703a744#18/8\",\"2409\":\"v-6703a744#18/9\",\"2410\":\"v-6703a744#18/10\",\"2411\":\"v-6703a744#18/11\",\"2412\":\"v-6703a744#18/12\",\"2413\":\"v-6703a744#18/13\",\"2414\":\"v-6703a744#18/14\",\"2415\":\"v-6703a744#18/15\",\"2416\":\"v-6703a744#18/16\",\"2417\":\"v-6703a744#19\",\"2418\":\"v-6703a744#19/0\",\"2419\":\"v-6703a744#19/1\",\"2420\":\"v-6703a744#19/2\",\"2421\":\"v-6703a744#19/3\",\"2422\":\"v-6703a744#19/4\",\"2423\":\"v-6703a744#19/5\",\"2424\":\"v-6703a744#19/6\",\"2425\":\"v-6703a744#19/7\",\"2426\":\"v-6703a744#19/8\",\"2427\":\"v-6703a744#19/9\",\"2428\":\"v-6703a744#19/10\",\"2429\":\"v-6703a744#19/11\",\"2430\":\"v-6703a744#20\",\"2431\":\"v-6703a744#20/0\",\"2432\":\"v-6703a744#20/1\",\"2433\":\"v-6703a744#20/2\",\"2434\":\"v-6703a744#20/3\",\"2435\":\"v-6703a744#20/4\",\"2436\":\"v-6703a744#20/5\",\"2437\":\"v-6703a744#20/6\",\"2438\":\"v-6703a744#20/7\",\"2439\":\"v-6703a744#20/8\",\"2440\":\"v-6703a744#20/9\",\"2441\":\"v-6703a744#20/10\",\"2442\":\"v-6703a744#20/11\",\"2443\":\"v-6703a744#20/12\",\"2444\":\"v-6703a744#20/13\",\"2445\":\"v-6703a744#20/14\",\"2446\":\"v-6703a744#20/15\",\"2447\":\"v-6703a744#20/16\",\"2448\":\"v-6703a744#21\",\"2449\":\"v-6703a744#21/0\",\"2450\":\"v-6703a744#21/1\",\"2451\":\"v-6703a744#21/2\",\"2452\":\"v-6703a744#21/3\",\"2453\":\"v-6703a744#21/4\",\"2454\":\"v-6703a744#21/5\",\"2455\":\"v-6703a744#21/6\",\"2456\":\"v-6703a744#21/7\",\"2457\":\"v-6703a744#21/8\",\"2458\":\"v-6703a744#21/9\",\"2459\":\"v-6703a744#22\",\"2460\":\"v-6703a744#22/0\",\"2461\":\"v-6703a744#22/1\",\"2462\":\"v-6703a744#22/2\",\"2463\":\"v-6703a744#23\",\"2464\":\"v-6703a744#23/0\",\"2465\":\"v-6703a744#23/1\",\"2466\":\"v-6703a744#23/2\",\"2467\":\"v-6703a744#24\",\"2468\":\"v-6703a744#24/0\",\"2469\":\"v-6703a744#24/1\",\"2470\":\"v-6703a744#24/2\",\"2471\":\"v-6703a744#24/3\",\"2472\":\"v-6703a744#24/4\",\"2473\":\"v-6703a744#25\",\"2474\":\"v-6703a744#25/0\",\"2475\":\"v-6703a744#25/1\",\"2476\":\"v-6703a744#25/2\",\"2477\":\"v-6703a744#25/3\",\"2478\":\"v-6703a744#25/4\",\"2479\":\"v-6703a744#26\",\"2480\":\"v-6703a744#26/0\",\"2481\":\"v-6703a744#26/1\",\"2482\":\"v-6703a744#26/2\",\"2483\":\"v-6703a744#26/3\",\"2484\":\"v-6703a744#26/4\",\"2485\":\"v-6703a744#26/5\",\"2486\":\"v-6703a744#26/6\",\"2487\":\"v-6703a744#26/7\",\"2488\":\"v-6703a744#26/8\",\"2489\":\"v-6703a744#26/9\",\"2490\":\"v-6703a744#26/10\",\"2491\":\"v-6703a744#26/11\",\"2492\":\"v-6703a744#27\",\"2493\":\"v-6703a744#27/0\",\"2494\":\"v-6703a744#27/1\",\"2495\":\"v-6703a744#27/2\",\"2496\":\"v-6703a744#27/3\",\"2497\":\"v-6703a744#28\",\"2498\":\"v-6703a744#28/0\",\"2499\":\"v-6703a744#28/1\",\"2500\":\"v-6703a744#28/2\",\"2501\":\"v-6703a744#29\",\"2502\":\"v-6703a744#29/0\",\"2503\":\"v-6703a744#29/1\",\"2504\":\"v-6703a744#29/2\",\"2505\":\"v-6703a744#29/3\",\"2506\":\"v-6703a744#29/4\",\"2507\":\"v-6703a744#30\",\"2508\":\"v-6703a744#30/0\",\"2509\":\"v-6703a744#30/1\",\"2510\":\"v-6703a744#30/2\",\"2511\":\"v-6703a744#30/3\",\"2512\":\"v-6703a744#30/4\",\"2513\":\"v-6703a744#30/5\",\"2514\":\"v-6703a744#30/6\",\"2515\":\"v-6703a744#30/7\",\"2516\":\"v-6703a744#30/8\",\"2517\":\"v-6703a744#30/9\",\"2518\":\"v-6703a744#30/10\",\"2519\":\"v-6703a744#30/11\",\"2520\":\"v-6703a744#30/12\",\"2521\":\"v-6703a744#30/13\",\"2522\":\"v-6703a744#30/14\",\"2523\":\"v-6703a744#30/15\",\"2524\":\"v-6703a744#30/16\",\"2525\":\"v-6703a744#30/17\",\"2526\":\"v-6703a744#30/18\",\"2527\":\"v-6703a744#30/19\",\"2528\":\"v-6703a744#30/20\",\"2529\":\"v-6703a744#30/21\",\"2530\":\"v-6703a744#31\",\"2531\":\"v-6703a744#31/0\",\"2532\":\"v-6703a744#31/1\",\"2533\":\"v-6703a744#31/2\",\"2534\":\"v-6703a744#31/3\",\"2535\":\"v-6703a744#31/4\",\"2536\":\"v-6703a744#31/5\",\"2537\":\"v-6703a744#31/6\",\"2538\":\"v-6703a744#31/7\",\"2539\":\"v-6703a744#31/8\",\"2540\":\"v-6703a744#31/9\",\"2541\":\"v-6703a744#31/10\",\"2542\":\"v-6703a744#31/11\",\"2543\":\"v-6703a744#31/12\",\"2544\":\"v-6703a744#31/13\",\"2545\":\"v-6703a744#32\",\"2546\":\"v-6703a744#32/0\",\"2547\":\"v-6703a744#32/1\",\"2548\":\"v-6703a744#32/2\",\"2549\":\"v-6703a744#32/3\",\"2550\":\"v-6703a744#32/4\",\"2551\":\"v-6703a744#33\",\"2552\":\"v-6703a744#33/0\",\"2553\":\"v-6703a744#33/1\",\"2554\":\"v-6703a744#33/2\",\"2555\":\"v-6703a744#34\",\"2556\":\"v-6703a744#35\",\"2557\":\"v-6703a744#35/0\",\"2558\":\"v-6703a744#36\",\"2559\":\"v-6703a744#36/0\",\"2560\":\"v-6703a744#36/1\",\"2561\":\"v-6703a744#37\",\"2562\":\"v-6703a744#37/0\",\"2563\":\"v-6703a744#38\",\"2564\":\"v-6703a744#38/0\",\"2565\":\"v-6703a744#38/1\",\"2566\":\"v-6703a744#38/2\",\"2567\":\"v-6703a744#38/3\",\"2568\":\"v-6703a744#39\",\"2569\":\"v-6703a744#39/0\",\"2570\":\"v-6703a744#40\",\"2571\":\"v-6703a744#40/0\",\"2572\":\"v-6703a744#41\",\"2573\":\"v-6703a744#41/0\",\"2574\":\"v-6703a744#42\",\"2575\":\"v-6703a744#43\",\"2576\":\"v-6703a744#43/0\",\"2577\":\"v-6703a744#43/1\",\"2578\":\"v-6703a744#43/2\",\"2579\":\"v-6703a744#44\",\"2580\":\"v-6703a744#44/0\",\"2581\":\"v-6703a744#44/1\",\"2582\":\"v-959e8c2a\",\"2583\":\"v-959e8c2a#1\",\"2584\":\"v-959e8c2a#2\",\"2585\":\"v-959e8c2a#2/0\",\"2586\":\"v-959e8c2a#2/1\",\"2587\":\"v-959e8c2a#2/2\",\"2588\":\"v-959e8c2a#2/3\",\"2589\":\"v-959e8c2a#3\",\"2590\":\"v-959e8c2a#3/0\",\"2591\":\"v-959e8c2a#3/1\",\"2592\":\"v-959e8c2a#4\",\"2593\":\"v-959e8c2a#5\",\"2594\":\"v-959e8c2a#6\",\"2595\":\"v-959e8c2a#6/0\",\"2596\":\"v-959e8c2a#6/1\",\"2597\":\"v-959e8c2a#6/2\",\"2598\":\"v-959e8c2a#6/3\",\"2599\":\"v-959e8c2a#6/4\",\"2600\":\"v-959e8c2a#7\",\"2601\":\"v-959e8c2a#7/0\",\"2602\":\"v-959e8c2a#7/1\",\"2603\":\"v-959e8c2a#7/2\",\"2604\":\"v-959e8c2a#8\",\"2605\":\"v-959e8c2a#9\",\"2606\":\"v-959e8c2a#9/0\",\"2607\":\"v-959e8c2a#9/1\",\"2608\":\"v-959e8c2a#9/2\",\"2609\":\"v-959e8c2a#9/3\",\"2610\":\"v-959e8c2a#10\",\"2611\":\"v-959e8c2a#10/0\",\"2612\":\"v-959e8c2a#11\",\"2613\":\"v-959e8c2a#12\",\"2614\":\"v-959e8c2a#12/0\",\"2615\":\"v-959e8c2a#12/1\",\"2616\":\"v-959e8c2a#12/2\",\"2617\":\"v-959e8c2a#13\",\"2618\":\"v-959e8c2a#13/0\",\"2619\":\"v-959e8c2a#14\",\"2620\":\"v-959e8c2a#15\",\"2621\":\"v-959e8c2a#15/0\",\"2622\":\"v-959e8c2a#15/1\",\"2623\":\"v-959e8c2a#15/2\",\"2624\":\"v-959e8c2a#15/3\",\"2625\":\"v-959e8c2a#16\",\"2626\":\"v-959e8c2a#16/0\",\"2627\":\"v-959e8c2a#17\",\"2628\":\"v-959e8c2a#18\",\"2629\":\"v-959e8c2a#18/0\",\"2630\":\"v-959e8c2a#18/1\",\"2631\":\"v-959e8c2a#18/2\",\"2632\":\"v-959e8c2a#18/3\",\"2633\":\"v-959e8c2a#19\",\"2634\":\"v-959e8c2a#19/0\",\"2635\":\"v-959e8c2a#20\",\"2636\":\"v-959e8c2a#20/0\",\"2637\":\"v-959e8c2a#20/1\",\"2638\":\"v-959e8c2a#20/2\",\"2639\":\"v-959e8c2a#20/3\",\"2640\":\"v-959e8c2a#21\",\"2641\":\"v-959e8c2a#21/0\",\"2642\":\"v-959e8c2a#21/1\",\"2643\":\"v-959e8c2a#21/2\",\"2644\":\"v-959e8c2a#22\",\"2645\":\"v-959e8c2a#22/3\",\"2646\":\"v-959e8c2a#22/4\",\"2647\":\"v-959e8c2a#22/5\",\"2648\":\"v-959e8c2a#23\",\"2649\":\"v-959e8c2a#23/0\",\"2650\":\"v-959e8c2a#23/1\",\"2651\":\"v-959e8c2a#23/2\",\"2652\":\"v-959e8c2a#23/3\",\"2653\":\"v-959e8c2a#23/4\",\"2654\":\"v-959e8c2a#24\",\"2655\":\"v-959e8c2a#24/0\",\"2656\":\"v-959e8c2a#24/1\",\"2657\":\"v-959e8c2a#24/2\",\"2658\":\"v-959e8c2a#24/3\",\"2659\":\"v-959e8c2a#24/4\",\"2660\":\"v-959e8c2a#24/5\",\"2661\":\"v-959e8c2a#24/6\",\"2662\":\"v-959e8c2a#24/7\",\"2663\":\"v-959e8c2a#24/8\",\"2664\":\"v-959e8c2a#24/9\",\"2665\":\"v-959e8c2a#24/10\",\"2666\":\"v-959e8c2a#24/11\",\"2667\":\"v-959e8c2a#25\",\"2668\":\"v-959e8c2a#26\",\"2669\":\"v-959e8c2a#26/0\",\"2670\":\"v-959e8c2a#26/1\",\"2671\":\"v-959e8c2a#26/2\",\"2672\":\"v-959e8c2a#26/3\",\"2673\":\"v-959e8c2a#26/4\",\"2674\":\"v-959e8c2a#26/5\",\"2675\":\"v-959e8c2a#26/6\",\"2676\":\"v-959e8c2a#27\",\"2677\":\"v-959e8c2a#27/0\",\"2678\":\"v-959e8c2a#27/1\",\"2679\":\"v-959e8c2a#27/2\",\"2680\":\"v-959e8c2a#27/3\",\"2681\":\"v-959e8c2a#27/4\",\"2682\":\"v-959e8c2a#27/5\",\"2683\":\"v-959e8c2a#27/6\",\"2684\":\"v-959e8c2a#27/7\",\"2685\":\"v-959e8c2a#27/8\",\"2686\":\"v-959e8c2a#27/9\",\"2687\":\"v-959e8c2a#27/10\",\"2688\":\"v-959e8c2a#28\",\"2689\":\"v-959e8c2a#29\",\"2690\":\"v-959e8c2a#30\",\"2691\":\"v-959e8c2a#31\",\"2692\":\"v-959e8c2a#31/0\",\"2693\":\"v-959e8c2a#32\",\"2694\":\"v-959e8c2a#32/0\",\"2695\":\"v-959e8c2a#32/1\",\"2696\":\"v-959e8c2a#32/2\",\"2697\":\"v-959e8c2a#32/3\",\"2698\":\"v-959e8c2a#32/4\",\"2699\":\"v-959e8c2a#32/5\",\"2700\":\"v-959e8c2a#32/6\",\"2701\":\"v-959e8c2a#32/7\",\"2702\":\"v-959e8c2a#32/8\",\"2703\":\"v-959e8c2a#32/9\",\"2704\":\"v-959e8c2a#32/10\",\"2705\":\"v-959e8c2a#32/11\",\"2706\":\"v-959e8c2a#32/12\",\"2707\":\"v-959e8c2a#32/13\",\"2708\":\"v-959e8c2a#32/14\",\"2709\":\"v-959e8c2a#33\",\"2710\":\"v-959e8c2a#33/0\",\"2711\":\"v-959e8c2a#34\",\"2712\":\"v-959e8c2a#34/0\",\"2713\":\"v-959e8c2a#34/1\",\"2714\":\"v-959e8c2a#34/2\",\"2715\":\"v-959e8c2a#35\",\"2716\":\"v-959e8c2a#35/0\",\"2717\":\"v-959e8c2a#35/1\",\"2718\":\"v-959e8c2a#36\",\"2719\":\"v-959e8c2a#36/0\",\"2720\":\"v-959e8c2a#36/1\",\"2721\":\"v-959e8c2a#36/2\",\"2722\":\"v-959e8c2a#37\",\"2723\":\"v-959e8c2a#37/0\",\"2724\":\"v-959e8c2a#37/1\",\"2725\":\"v-959e8c2a#37/2\",\"2726\":\"v-959e8c2a#37/3\",\"2727\":\"v-959e8c2a#37/4\",\"2728\":\"v-959e8c2a#37/5\",\"2729\":\"v-959e8c2a#37/6\",\"2730\":\"v-959e8c2a#38\",\"2731\":\"v-959e8c2a#38/0\",\"2732\":\"v-959e8c2a#39\",\"2733\":\"v-959e8c2a#39/0\",\"2734\":\"v-b44a5be0\",\"2735\":\"v-b44a5be0#1\",\"2736\":\"v-b44a5be0#2\",\"2737\":\"v-b44a5be0#2/0\",\"2738\":\"v-b44a5be0#2/1\",\"2739\":\"v-b44a5be0#2/2\",\"2740\":\"v-b44a5be0#2/3\",\"2741\":\"v-b44a5be0#2/4\",\"2742\":\"v-b44a5be0#2/5\",\"2743\":\"v-b44a5be0#3\",\"2744\":\"v-b44a5be0#3/0\",\"2745\":\"v-b44a5be0#3/1\",\"2746\":\"v-b44a5be0#3/2\",\"2747\":\"v-b44a5be0#3/3\",\"2748\":\"v-b44a5be0#3/4\",\"2749\":\"v-b44a5be0#3/5\",\"2750\":\"v-b44a5be0#4\",\"2751\":\"v-b44a5be0#4/0\",\"2752\":\"v-b44a5be0#5\",\"2753\":\"v-b44a5be0#5/0\",\"2754\":\"v-b44a5be0#6\",\"2755\":\"v-b44a5be0#6/0\",\"2756\":\"v-b44a5be0#6/1\",\"2757\":\"v-b44a5be0#6/2\",\"2758\":\"v-b44a5be0#6/3\",\"2759\":\"v-b44a5be0#6/4\",\"2760\":\"v-b44a5be0#7\",\"2761\":\"v-b44a5be0#7/0\",\"2762\":\"v-b44a5be0#7/1\",\"2763\":\"v-b44a5be0#7/2\",\"2764\":\"v-b44a5be0#7/3\",\"2765\":\"v-b44a5be0#8\",\"2766\":\"v-b44a5be0#8/0\",\"2767\":\"v-b44a5be0#8/1\",\"2768\":\"v-b44a5be0#9\",\"2769\":\"v-b44a5be0#9/0\",\"2770\":\"v-b44a5be0#9/1\",\"2771\":\"v-b44a5be0#10\",\"2772\":\"v-b44a5be0#10/0\",\"2773\":\"v-b44a5be0#10/1\",\"2774\":\"v-b44a5be0#10/2\",\"2775\":\"v-b44a5be0#10/3\",\"2776\":\"v-b44a5be0#10/4\",\"2777\":\"v-b44a5be0#11\",\"2778\":\"v-b44a5be0#11/0\",\"2779\":\"v-b44a5be0#11/1\",\"2780\":\"v-b44a5be0#11/2\",\"2781\":\"v-b44a5be0#11/3\",\"2782\":\"v-b44a5be0#11/4\",\"2783\":\"v-b44a5be0#11/5\",\"2784\":\"v-b44a5be0#11/6\",\"2785\":\"v-b44a5be0#11/7\",\"2786\":\"v-b44a5be0#11/8\",\"2787\":\"v-b44a5be0#11/9\",\"2788\":\"v-b44a5be0#11/10\",\"2789\":\"v-b44a5be0#11/11\",\"2790\":\"v-b44a5be0#11/12\",\"2791\":\"v-b44a5be0#11/13\",\"2792\":\"v-b44a5be0#11/14\",\"2793\":\"v-b44a5be0#12\",\"2794\":\"v-b44a5be0#12/0\",\"2795\":\"v-b44a5be0#12/1\",\"2796\":\"v-b44a5be0#12/2\",\"2797\":\"v-b44a5be0#12/3\",\"2798\":\"v-b44a5be0#13\",\"2799\":\"v-b44a5be0#13/0\",\"2800\":\"v-b44a5be0#13/1\",\"2801\":\"v-b44a5be0#14\",\"2802\":\"v-b44a5be0#14/0\",\"2803\":\"v-b44a5be0#14/1\",\"2804\":\"v-b44a5be0#14/2\",\"2805\":\"v-b44a5be0#14/3\",\"2806\":\"v-b44a5be0#14/4\",\"2807\":\"v-b44a5be0#14/5\",\"2808\":\"v-b44a5be0#15\",\"2809\":\"v-b44a5be0#15/0\",\"2810\":\"v-b44a5be0#15/1\",\"2811\":\"v-b44a5be0#16\",\"2812\":\"v-b44a5be0#16/0\",\"2813\":\"v-b44a5be0#16/1\",\"2814\":\"v-b44a5be0#16/2\",\"2815\":\"v-b44a5be0#17\",\"2816\":\"v-b44a5be0#17/0\",\"2817\":\"v-b44a5be0#17/1\",\"2818\":\"v-b44a5be0#17/2\",\"2819\":\"v-b44a5be0#18\",\"2820\":\"v-b44a5be0#18/0\",\"2821\":\"v-b44a5be0#19\",\"2822\":\"v-b44a5be0#19/0\",\"2823\":\"v-b44a5be0#20\",\"2824\":\"v-b44a5be0#20/0\",\"2825\":\"v-b44a5be0#20/1\",\"2826\":\"v-b44a5be0#20/2\",\"2827\":\"v-b44a5be0#20/3\",\"2828\":\"v-b44a5be0#21\",\"2829\":\"v-b44a5be0#21/0\",\"2830\":\"v-b44a5be0#21/1\",\"2831\":\"v-b44a5be0#21/2\",\"2832\":\"v-b44a5be0#21/3\",\"2833\":\"v-b44a5be0#21/4\",\"2834\":\"v-b44a5be0#21/5\",\"2835\":\"v-b44a5be0#21/6\",\"2836\":\"v-b44a5be0#21/7\",\"2837\":\"v-b44a5be0#22\",\"2838\":\"v-b44a5be0#22/0\",\"2839\":\"v-b44a5be0#22/1\",\"2840\":\"v-b44a5be0#22/2\",\"2841\":\"v-b44a5be0#22/3\",\"2842\":\"v-b44a5be0#23\",\"2843\":\"v-b44a5be0#23/0\",\"2844\":\"v-b44a5be0#23/1\",\"2845\":\"v-b44a5be0#23/2\",\"2846\":\"v-b44a5be0#23/3\",\"2847\":\"v-b44a5be0#23/4\",\"2848\":\"v-b44a5be0#23/5\",\"2849\":\"v-b44a5be0#24\",\"2850\":\"v-b44a5be0#24/0\",\"2851\":\"v-b44a5be0#25\",\"2852\":\"v-b44a5be0#26\",\"2853\":\"v-b44a5be0#26/0\",\"2854\":\"v-b44a5be0#26/1\",\"2855\":\"v-b44a5be0#26/2\",\"2856\":\"v-b44a5be0#26/3\",\"2857\":\"v-b44a5be0#26/4\",\"2858\":\"v-b44a5be0#27\",\"2859\":\"v-b44a5be0#27/0\",\"2860\":\"v-b44a5be0#27/1\",\"2861\":\"v-b44a5be0#28\",\"2862\":\"v-b44a5be0#28/0\",\"2863\":\"v-b44a5be0#28/1\",\"2864\":\"v-b44a5be0#28/2\",\"2865\":\"v-b44a5be0#28/3\",\"2866\":\"v-b44a5be0#28/4\",\"2867\":\"v-b44a5be0#28/5\",\"2868\":\"v-b44a5be0#28/6\",\"2869\":\"v-b44a5be0#28/7\",\"2870\":\"v-b44a5be0#28/8\",\"2871\":\"v-b44a5be0#28/9\",\"2872\":\"v-b44a5be0#28/10\",\"2873\":\"v-b44a5be0#28/11\",\"2874\":\"v-b44a5be0#28/12\",\"2875\":\"v-b44a5be0#29\",\"2876\":\"v-b44a5be0#29/0\",\"2877\":\"v-b44a5be0#29/1\",\"2878\":\"v-b44a5be0#30\",\"2879\":\"v-b44a5be0#31\",\"2880\":\"v-b44a5be0#31/0\",\"2881\":\"v-b44a5be0#32\",\"2882\":\"v-b44a5be0#32/0\",\"2883\":\"v-b44a5be0#33\",\"2884\":\"v-b44a5be0#33/0\",\"2885\":\"v-b44a5be0#33/1\",\"2886\":\"v-b44a5be0#33/2\",\"2887\":\"v-b44a5be0#34\",\"2888\":\"v-b44a5be0#34/0\",\"2889\":\"v-b44a5be0#34/1\",\"2890\":\"v-b44a5be0#34/2\",\"2891\":\"v-b44a5be0#34/3\",\"2892\":\"v-b44a5be0#35\",\"2893\":\"v-b44a5be0#35/0\",\"2894\":\"v-b44a5be0#35/1\",\"2895\":\"v-b44a5be0#35/2\",\"2896\":\"v-b44a5be0#36\",\"2897\":\"v-b44a5be0#36/0\",\"2898\":\"v-b44a5be0#36/1\",\"2899\":\"v-b44a5be0#37\",\"2900\":\"v-b44a5be0#37/0\",\"2901\":\"v-b44a5be0#37/1\",\"2902\":\"v-b44a5be0#38\",\"2903\":\"v-b44a5be0#38/0\",\"2904\":\"v-b44a5be0#38/1\",\"2905\":\"v-b44a5be0#38/2\",\"2906\":\"v-b44a5be0#38/3\",\"2907\":\"v-b44a5be0#38/4\",\"2908\":\"v-b44a5be0#38/5\",\"2909\":\"v-b44a5be0#38/6\",\"2910\":\"v-b44a5be0#38/7\",\"2911\":\"v-b44a5be0#38/8\",\"2912\":\"v-b44a5be0#39\",\"2913\":\"v-b44a5be0#40\",\"2914\":\"v-b44a5be0#40/0\",\"2915\":\"v-b44a5be0#40/1\",\"2916\":\"v-b44a5be0#40/2\",\"2917\":\"v-b44a5be0#40/3\",\"2918\":\"v-b44a5be0#40/4\",\"2919\":\"v-b44a5be0#40/5\",\"2920\":\"v-b44a5be0#40/6\",\"2921\":\"v-b44a5be0#40/7\",\"2922\":\"v-b44a5be0#40/8\",\"2923\":\"v-b44a5be0#40/9\",\"2924\":\"v-b44a5be0#41\",\"2925\":\"v-b44a5be0#41/0\",\"2926\":\"v-b44a5be0#41/1\",\"2927\":\"v-b44a5be0#41/2\",\"2928\":\"v-b44a5be0#41/3\",\"2929\":\"v-b44a5be0#42\",\"2930\":\"v-b44a5be0#42/0\",\"2931\":\"v-b44a5be0#42/1\",\"2932\":\"v-b44a5be0#42/2\",\"2933\":\"v-b44a5be0#42/3\",\"2934\":\"v-b44a5be0#43\",\"2935\":\"v-b44a5be0#44\",\"2936\":\"v-b44a5be0#44/0\",\"2937\":\"v-b44a5be0#44/1\",\"2938\":\"v-b44a5be0#44/2\",\"2939\":\"v-b44a5be0#45\",\"2940\":\"v-b44a5be0#45/0\",\"2941\":\"v-b44a5be0#45/1\",\"2942\":\"v-b44a5be0#45/2\",\"2943\":\"v-b44a5be0#45/3\",\"2944\":\"v-b44a5be0#45/4\",\"2945\":\"v-b44a5be0#45/5\",\"2946\":\"v-b44a5be0#45/6\",\"2947\":\"v-b44a5be0#45/7\",\"2948\":\"v-b44a5be0#45/8\",\"2949\":\"v-b44a5be0#46\",\"2950\":\"v-b44a5be0#47\",\"2951\":\"v-b44a5be0#47/0\",\"2952\":\"v-b44a5be0#47/1\",\"2953\":\"v-b44a5be0#47/2\",\"2954\":\"v-b44a5be0#47/3\",\"2955\":\"v-b44a5be0#48\",\"2956\":\"v-b44a5be0#48/0\",\"2957\":\"v-b44a5be0#48/1\",\"2958\":\"v-b44a5be0#48/2\",\"2959\":\"v-b44a5be0#48/3\",\"2960\":\"v-b44a5be0#48/4\",\"2961\":\"v-b44a5be0#48/5\",\"2962\":\"v-b44a5be0#48/6\",\"2963\":\"v-b44a5be0#48/7\",\"2964\":\"v-b44a5be0#48/8\",\"2965\":\"v-b44a5be0#48/9\",\"2966\":\"v-b44a5be0#48/10\",\"2967\":\"v-b44a5be0#48/11\",\"2968\":\"v-b44a5be0#48/12\",\"2969\":\"v-b44a5be0#48/13\",\"2970\":\"v-b44a5be0#48/14\",\"2971\":\"v-b44a5be0#48/15\",\"2972\":\"v-b44a5be0#48/16\",\"2973\":\"v-b44a5be0#48/17\",\"2974\":\"v-b44a5be0#48/18\",\"2975\":\"v-b44a5be0#48/19\",\"2976\":\"v-b44a5be0#48/20\",\"2977\":\"v-b44a5be0#48/21\",\"2978\":\"v-b44a5be0#48/22\",\"2979\":\"v-b44a5be0#48/23\",\"2980\":\"v-b44a5be0#48/24\",\"2981\":\"v-b44a5be0#48/25\",\"2982\":\"v-b44a5be0#48/26\",\"2983\":\"v-b44a5be0#48/27\",\"2984\":\"v-b44a5be0#48/28\",\"2985\":\"v-b44a5be0#48/29\",\"2986\":\"v-b44a5be0#48/30\",\"2987\":\"v-b44a5be0#48/31\",\"2988\":\"v-b44a5be0#48/32\",\"2989\":\"v-b44a5be0#48/33\",\"2990\":\"v-b44a5be0#48/34\",\"2991\":\"v-b44a5be0#48/35\",\"2992\":\"v-b44a5be0#48/36\",\"2993\":\"v-b44a5be0#48/37\",\"2994\":\"v-b44a5be0#48/38\",\"2995\":\"v-b44a5be0#48/39\",\"2996\":\"v-b44a5be0#48/40\",\"2997\":\"v-b44a5be0#48/41\",\"2998\":\"v-b44a5be0#48/42\",\"2999\":\"v-b44a5be0#48/43\",\"3000\":\"v-b44a5be0#49\",\"3001\":\"v-b44a5be0#49/0\",\"3002\":\"v-b44a5be0#49/1\",\"3003\":\"v-b44a5be0#49/2\",\"3004\":\"v-b44a5be0#49/3\",\"3005\":\"v-b44a5be0#49/4\",\"3006\":\"v-b44a5be0#49/5\",\"3007\":\"v-b44a5be0#49/6\",\"3008\":\"v-b44a5be0#49/7\",\"3009\":\"v-b44a5be0#50\",\"3010\":\"v-b44a5be0#50/0\",\"3011\":\"v-b44a5be0#50/1\",\"3012\":\"v-b44a5be0#50/2\",\"3013\":\"v-b44a5be0#50/3\",\"3014\":\"v-b44a5be0#50/4\",\"3015\":\"v-b44a5be0#50/5\",\"3016\":\"v-b44a5be0#50/6\",\"3017\":\"v-b44a5be0#50/7\",\"3018\":\"v-b44a5be0#50/8\",\"3019\":\"v-b44a5be0#50/9\",\"3020\":\"v-b44a5be0#50/10\",\"3021\":\"v-b44a5be0#50/11\",\"3022\":\"v-b44a5be0#50/12\",\"3023\":\"v-63bba594\",\"3024\":\"v-63bba594#1\",\"3025\":\"v-63bba594#2\",\"3026\":\"v-63bba594#3\",\"3027\":\"v-63bba594#3/0\",\"3028\":\"v-63bba594#3/1\",\"3029\":\"v-63bba594#3/2\",\"3030\":\"v-63bba594#3/3\",\"3031\":\"v-63bba594#3/4\",\"3032\":\"v-63bba594#3/5\",\"3033\":\"v-63bba594#4\",\"3034\":\"v-63bba594#4/0\",\"3035\":\"v-63bba594#4/1\",\"3036\":\"v-63bba594#4/2\",\"3037\":\"v-63bba594#4/3\",\"3038\":\"v-63bba594#4/4\",\"3039\":\"v-63bba594#4/5\",\"3040\":\"v-63bba594#4/6\",\"3041\":\"v-63bba594#4/7\",\"3042\":\"v-63bba594#4/8\",\"3043\":\"v-63bba594#4/9\",\"3044\":\"v-63bba594#4/10\",\"3045\":\"v-63bba594#4/11\",\"3046\":\"v-63bba594#4/12\",\"3047\":\"v-63bba594#4/13\",\"3048\":\"v-63bba594#4/14\",\"3049\":\"v-63bba594#4/15\",\"3050\":\"v-63bba594#4/16\",\"3051\":\"v-63bba594#4/17\",\"3052\":\"v-63bba594#4/18\",\"3053\":\"v-63bba594#4/19\",\"3054\":\"v-63bba594#4/20\",\"3055\":\"v-63bba594#5\",\"3056\":\"v-63bba594#6\",\"3057\":\"v-63bba594#6/0\",\"3058\":\"v-63bba594#6/1\",\"3059\":\"v-63bba594#6/2\",\"3060\":\"v-63bba594#6/3\",\"3061\":\"v-63bba594#6/4\",\"3062\":\"v-63bba594#6/5\",\"3063\":\"v-63bba594#6/6\",\"3064\":\"v-63bba594#6/7\",\"3065\":\"v-63bba594#6/8\",\"3066\":\"v-63bba594#6/9\",\"3067\":\"v-63bba594#6/10\",\"3068\":\"v-63bba594#6/11\",\"3069\":\"v-63bba594#6/12\",\"3070\":\"v-63bba594#7\",\"3071\":\"v-63bba594#8\",\"3072\":\"v-63bba594#8/0\",\"3073\":\"v-63bba594#8/1\",\"3074\":\"v-63bba594#8/2\",\"3075\":\"v-63bba594#8/3\",\"3076\":\"v-63bba594#8/4\",\"3077\":\"v-63bba594#8/5\",\"3078\":\"v-63bba594#8/6\",\"3079\":\"v-63bba594#8/7\",\"3080\":\"v-63bba594#8/8\",\"3081\":\"v-63bba594#8/9\",\"3082\":\"v-63bba594#8/10\",\"3083\":\"v-63bba594#8/11\",\"3084\":\"v-63bba594#8/12\",\"3085\":\"v-63bba594#8/13\",\"3086\":\"v-63bba594#8/14\",\"3087\":\"v-63bba594#8/15\",\"3088\":\"v-63bba594#8/16\",\"3089\":\"v-63bba594#8/17\",\"3090\":\"v-63bba594#8/18\",\"3091\":\"v-63bba594#8/19\",\"3092\":\"v-63bba594#8/20\",\"3093\":\"v-4072253d\",\"3094\":\"v-4072253d#1\",\"3095\":\"v-4072253d#1/0\",\"3096\":\"v-4072253d#1/1\",\"3097\":\"v-4072253d#1/2\",\"3098\":\"v-4072253d#1/3\",\"3099\":\"v-4072253d#1/4\",\"3100\":\"v-4072253d#1/5\",\"3101\":\"v-4072253d#1/6\",\"3102\":\"v-4072253d#1/7\",\"3103\":\"v-4072253d#1/8\",\"3104\":\"v-4072253d#1/9\",\"3105\":\"v-4072253d#1/10\",\"3106\":\"v-4072253d#1/11\",\"3107\":\"v-4072253d#1/12\",\"3108\":\"v-4072253d#2\",\"3109\":\"v-4072253d#3\",\"3110\":\"v-4072253d#3/0\",\"3111\":\"v-4072253d#3/1\",\"3112\":\"v-4072253d#3/2\",\"3113\":\"v-4072253d#4\",\"3114\":\"v-4072253d#4/0\",\"3115\":\"v-4072253d#4/1\",\"3116\":\"v-4072253d#4/2\",\"3117\":\"v-4072253d#4/3\",\"3118\":\"v-4072253d#4/4\",\"3119\":\"v-4072253d#5\",\"3120\":\"v-4072253d#5/0\",\"3121\":\"v-4072253d#5/1\",\"3122\":\"v-4072253d#5/2\",\"3123\":\"v-4072253d#6\",\"3124\":\"v-4072253d#6/0\",\"3125\":\"v-4072253d#6/1\",\"3126\":\"v-4072253d#6/2\",\"3127\":\"v-4072253d#7\",\"3128\":\"v-4072253d#7/0\",\"3129\":\"v-4072253d#7/1\",\"3130\":\"v-4072253d#7/2\",\"3131\":\"v-4072253d#7/3\",\"3132\":\"v-4072253d#7/4\",\"3133\":\"v-4072253d#7/5\",\"3134\":\"v-4072253d#7/6\",\"3135\":\"v-4072253d#7/7\",\"3136\":\"v-4072253d#7/8\",\"3137\":\"v-4072253d#7/9\",\"3138\":\"v-4072253d#8\",\"3139\":\"v-4072253d#8/0\",\"3140\":\"v-4072253d#8/1\",\"3141\":\"v-4072253d#8/2\",\"3142\":\"v-4072253d#8/3\",\"3143\":\"v-4072253d#8/4\",\"3144\":\"v-4072253d#8/5\",\"3145\":\"v-4072253d#8/6\",\"3146\":\"v-4072253d#8/7\",\"3147\":\"v-4072253d#8/8\",\"3148\":\"v-4072253d#8/9\",\"3149\":\"v-4072253d#9\",\"3150\":\"v-4072253d#9/0\",\"3151\":\"v-4072253d#9/1\",\"3152\":\"v-4072253d#9/2\",\"3153\":\"v-4072253d#9/3\",\"3154\":\"v-4072253d#9/4\",\"3155\":\"v-4072253d#10\",\"3156\":\"v-4072253d#10/5\",\"3157\":\"v-4072253d#10/6\",\"3158\":\"v-4072253d#10/7\",\"3159\":\"v-4072253d#10/8\",\"3160\":\"v-4072253d#10/9\",\"3161\":\"v-4072253d#10/10\",\"3162\":\"v-4072253d#10/11\",\"3163\":\"v-4072253d#10/12\",\"3164\":\"v-4072253d#10/13\",\"3165\":\"v-4072253d#10/14\",\"3166\":\"v-4072253d#10/15\",\"3167\":\"v-4072253d#10/16\",\"3168\":\"v-4072253d#10/17\",\"3169\":\"v-4072253d#10/18\",\"3170\":\"v-4072253d#10/19\",\"3171\":\"v-4072253d#10/20\",\"3172\":\"v-4072253d#10/21\",\"3173\":\"v-4072253d#10/22\",\"3174\":\"v-4072253d#10/23\",\"3175\":\"v-4072253d#10/24\",\"3176\":\"v-4072253d#10/25\",\"3177\":\"v-4072253d#10/26\",\"3178\":\"v-4072253d#10/27\",\"3179\":\"v-4072253d#10/28\",\"3180\":\"v-4072253d#10/29\",\"3181\":\"v-4072253d#10/30\",\"3182\":\"v-4072253d#10/31\",\"3183\":\"v-4072253d#10/32\",\"3184\":\"v-4072253d#10/33\",\"3185\":\"v-4072253d#10/34\",\"3186\":\"v-4072253d#10/35\",\"3187\":\"v-4072253d#10/36\",\"3188\":\"v-4072253d#10/37\",\"3189\":\"v-4072253d#11\",\"3190\":\"v-4072253d#11/0\",\"3191\":\"v-4072253d#11/1\",\"3192\":\"v-4072253d#11/2\",\"3193\":\"v-4072253d#11/3\",\"3194\":\"v-4072253d#11/4\",\"3195\":\"v-4072253d#11/5\",\"3196\":\"v-4072253d#11/6\",\"3197\":\"v-4072253d#11/7\",\"3198\":\"v-4072253d#11/8\",\"3199\":\"v-4072253d#11/9\",\"3200\":\"v-4072253d#11/10\",\"3201\":\"v-4072253d#11/11\",\"3202\":\"v-4072253d#12\",\"3203\":\"v-4072253d#12/0\",\"3204\":\"v-4072253d#12/1\",\"3205\":\"v-4072253d#12/2\",\"3206\":\"v-4072253d#12/3\",\"3207\":\"v-4072253d#12/4\",\"3208\":\"v-4072253d#12/5\",\"3209\":\"v-4072253d#13\",\"3210\":\"v-4072253d#13/0\",\"3211\":\"v-5aff0ece\",\"3212\":\"v-5aff0ece#1\",\"3213\":\"v-5aff0ece#1/0\",\"3214\":\"v-5aff0ece#1/1\",\"3215\":\"v-5aff0ece#2\",\"3216\":\"v-5aff0ece#2/0\",\"3217\":\"v-5aff0ece#2/1\",\"3218\":\"v-5aff0ece#2/2\",\"3219\":\"v-5aff0ece#2/3\",\"3220\":\"v-5aff0ece#3\",\"3221\":\"v-5aff0ece#3/0\",\"3222\":\"v-5aff0ece#4\",\"3223\":\"v-5aff0ece#5\",\"3224\":\"v-5aff0ece#5/0\",\"3225\":\"v-5aff0ece#5/1\",\"3226\":\"v-5aff0ece#5/2\",\"3227\":\"v-5aff0ece#5/3\",\"3228\":\"v-5aff0ece#5/4\",\"3229\":\"v-5aff0ece#5/5\",\"3230\":\"v-5aff0ece#5/6\",\"3231\":\"v-5aff0ece#5/7\",\"3232\":\"v-5aff0ece#5/8\",\"3233\":\"v-5aff0ece#5/9\",\"3234\":\"v-5aff0ece#5/10\",\"3235\":\"v-5aff0ece#5/11\",\"3236\":\"v-5aff0ece#5/12\",\"3237\":\"v-5aff0ece#5/13\",\"3238\":\"v-5aff0ece#5/14\",\"3239\":\"v-5aff0ece#5/15\",\"3240\":\"v-5aff0ece#5/16\",\"3241\":\"v-5aff0ece#5/17\",\"3242\":\"v-5aff0ece#5/18\",\"3243\":\"v-5aff0ece#5/19\",\"3244\":\"v-5aff0ece#5/20\",\"3245\":\"v-5aff0ece#5/21\",\"3246\":\"v-5aff0ece#5/22\",\"3247\":\"v-5aff0ece#5/23\",\"3248\":\"v-5aff0ece#5/24\",\"3249\":\"v-5aff0ece#5/25\",\"3250\":\"v-5aff0ece#5/26\",\"3251\":\"v-5aff0ece#5/27\",\"3252\":\"v-5aff0ece#5/28\",\"3253\":\"v-5aff0ece#5/29\",\"3254\":\"v-5aff0ece#5/30\",\"3255\":\"v-5aff0ece#5/31\",\"3256\":\"v-5aff0ece#5/32\",\"3257\":\"v-5aff0ece#5/33\",\"3258\":\"v-5aff0ece#5/34\",\"3259\":\"v-5aff0ece#5/35\",\"3260\":\"v-5aff0ece#5/36\",\"3261\":\"v-5aff0ece#5/37\",\"3262\":\"v-5aff0ece#5/38\",\"3263\":\"v-5aff0ece#5/39\",\"3264\":\"v-5aff0ece#5/40\",\"3265\":\"v-5aff0ece#5/41\",\"3266\":\"v-5aff0ece#5/42\",\"3267\":\"v-5aff0ece#5/43\",\"3268\":\"v-5aff0ece#5/44\",\"3269\":\"v-5aff0ece#5/45\",\"3270\":\"v-5aff0ece#6\",\"3271\":\"v-5aff0ece#6/0\",\"3272\":\"v-5aff0ece#7\",\"3273\":\"v-5aff0ece#7/1\",\"3274\":\"v-5aff0ece#7/2\",\"3275\":\"v-5aff0ece#7/3\",\"3276\":\"v-5aff0ece#8\",\"3277\":\"v-5aff0ece#8/0\",\"3278\":\"v-5aff0ece#9\",\"3279\":\"v-5aff0ece#9/0\",\"3280\":\"v-5aff0ece#10\",\"3281\":\"v-5aff0ece#10/0\",\"3282\":\"v-5aff0ece#10/1\",\"3283\":\"v-5aff0ece#11\",\"3284\":\"v-5aff0ece#11/0\",\"3285\":\"v-5aff0ece#11/1\",\"3286\":\"v-5aff0ece#11/2\",\"3287\":\"v-5aff0ece#11/3\",\"3288\":\"v-5aff0ece#11/4\",\"3289\":\"v-2b64e284\",\"3290\":\"v-2b64e284#1\",\"3291\":\"v-2b64e284#1/0\",\"3292\":\"v-2b64e284#1/1\",\"3293\":\"v-2b64e284#1/2\",\"3294\":\"v-2b64e284#1/3\",\"3295\":\"v-c1942916\",\"3296\":\"v-c1942916#0/0\",\"3297\":\"v-c1942916#0/1\",\"3298\":\"v-c1942916#0/2\",\"3299\":\"v-c1942916#0/3\",\"3300\":\"v-c1942916#0/4\",\"3301\":\"v-c1942916#0/5\",\"3302\":\"v-c1942916#0/6\",\"3303\":\"v-c1942916#0/7\",\"3304\":\"v-c1942916#0/8\",\"3305\":\"v-c1942916#0/9\",\"3306\":\"v-c1942916#0/10\",\"3307\":\"v-c1942916#0/11\",\"3308\":\"v-c1942916#0/12\",\"3309\":\"v-65c00218\",\"3310\":\"v-65c00218#0/0\",\"3311\":\"v-65c00218#0/1\",\"3312\":\"v-65c00218#0/2\",\"3313\":\"v-36295574\",\"3314\":\"v-36295574#0/0\",\"3315\":\"v-36295574#0/1\",\"3316\":\"v-36295574#1\",\"3317\":\"v-36295574#1/0\",\"3318\":\"v-36295574#2\",\"3319\":\"v-36295574#2/0\",\"3320\":\"v-36295574#2/1\",\"3321\":\"v-36295574#2/2\",\"3322\":\"v-36295574#3\",\"3323\":\"v-36295574#3/0\",\"3324\":\"v-36295574#4\",\"3325\":\"v-36295574#4/0\",\"3326\":\"v-36295574#4/1\",\"3327\":\"v-36295574#5\",\"3328\":\"v-36295574#5/0\",\"3329\":\"v-36295574#6\",\"3330\":\"v-36295574#6/0\",\"3331\":\"v-36295574#6/1\",\"3332\":\"v-36295574#6/2\",\"3333\":\"v-36295574#6/3\",\"3334\":\"v-36295574#6/4\",\"3335\":\"v-36295574#6/5\",\"3336\":\"v-36295574#6/6\",\"3337\":\"v-36295574#6/7\",\"3338\":\"v-36295574#6/8\",\"3339\":\"v-36295574#6/9\",\"3340\":\"v-36295574#6/10\",\"3341\":\"v-36295574#6/11\",\"3342\":\"v-36295574#6/12\",\"3343\":\"v-36295574#7\",\"3344\":\"v-36295574#7/0\",\"3345\":\"v-36295574#8\",\"3346\":\"v-36295574#8/0\",\"3347\":\"v-36295574#8/1\",\"3348\":\"v-36295574#9\",\"3349\":\"v-36295574#9/0\",\"3350\":\"v-36295574#9/1\",\"3351\":\"v-36295574#9/2\",\"3352\":\"v-36295574#10\",\"3353\":\"v-36295574#10/0\",\"3354\":\"v-36295574#10/1\",\"3355\":\"v-36295574#11\",\"3356\":\"v-36295574#11/0\",\"3357\":\"v-36295574#11/1\",\"3358\":\"v-36295574#12\",\"3359\":\"v-36295574#12/0\",\"3360\":\"v-36295574#12/1\",\"3361\":\"v-36295574#13\",\"3362\":\"v-36295574#13/0\",\"3363\":\"v-36295574#13/1\",\"3364\":\"v-36295574#13/2\",\"3365\":\"v-36295574#14\",\"3366\":\"v-36295574#14/0\",\"3367\":\"v-36295574#14/1\",\"3368\":\"v-36295574#15\",\"3369\":\"v-36295574#15/0\",\"3370\":\"v-36295574#15/1\",\"3371\":\"v-36295574#16\",\"3372\":\"v-36295574#16/0\",\"3373\":\"v-36295574#17\",\"3374\":\"v-36295574#17/0\",\"3375\":\"v-36295574#18\",\"3376\":\"v-36295574#18/0\",\"3377\":\"v-36295574#19\",\"3378\":\"v-36295574#19/0\",\"3379\":\"v-36295574#20\",\"3380\":\"v-36295574#20/0\",\"3381\":\"v-36295574#20/1\",\"3382\":\"v-36295574#21\",\"3383\":\"v-36295574#21/0\",\"3384\":\"v-36295574#21/1\",\"3385\":\"v-36295574#21/2\",\"3386\":\"v-36295574#21/3\",\"3387\":\"v-36295574#21/4\",\"3388\":\"v-36295574#22\",\"3389\":\"v-36295574#22/0\",\"3390\":\"v-36295574#23\",\"3391\":\"v-36295574#23/0\",\"3392\":\"v-36295574#23/1\",\"3393\":\"v-36295574#24\",\"3394\":\"v-36295574#24/0\",\"3395\":\"v-36295574#25\",\"3396\":\"v-36295574#25/0\",\"3397\":\"v-36295574#26\",\"3398\":\"v-36295574#26/0\",\"3399\":\"v-36295574#26/1\",\"3400\":\"v-62ced1a6\",\"3401\":\"v-62ced1a6#0/0\",\"3402\":\"v-62ced1a6#1\",\"3403\":\"v-62ced1a6#1/0\",\"3404\":\"v-62ced1a6#1/1\",\"3405\":\"v-62ced1a6#1/2\",\"3406\":\"v-62ced1a6#1/3\",\"3407\":\"v-62ced1a6#1/4\",\"3408\":\"v-62ced1a6#2\",\"3409\":\"v-62ced1a6#2/0\",\"3410\":\"v-62ced1a6#2/1\",\"3411\":\"v-62ced1a6#2/2\",\"3412\":\"v-62ced1a6#2/3\",\"3413\":\"v-62ced1a6#2/4\",\"3414\":\"v-62ced1a6#2/5\",\"3415\":\"v-62ced1a6#3\",\"3416\":\"v-62ced1a6#3/0\",\"3417\":\"v-62ced1a6#3/1\",\"3418\":\"v-62ced1a6#3/2\",\"3419\":\"v-62ced1a6#3/3\",\"3420\":\"v-62ced1a6#3/4\",\"3421\":\"v-62ced1a6#3/5\",\"3422\":\"v-62ced1a6#3/6\",\"3423\":\"v-62ced1a6#3/7\",\"3424\":\"v-62ced1a6#3/8\",\"3425\":\"v-62ced1a6#3/9\",\"3426\":\"v-62ced1a6#3/10\",\"3427\":\"v-47357bdb\",\"3428\":\"v-47357bdb#1\",\"3429\":\"v-47357bdb#2\",\"3430\":\"v-47357bdb#2/0\",\"3431\":\"v-47357bdb#2/1\",\"3432\":\"v-47357bdb#3\",\"3433\":\"v-47357bdb#3/0\",\"3434\":\"v-47357bdb#3/1\",\"3435\":\"v-2c0c1358\",\"3436\":\"v-2c0c1358#0/0\",\"3437\":\"v-2c0c1358#0/1\",\"3438\":\"v-2c0c1358#0/2\",\"3439\":\"v-763c1cd7\",\"3440\":\"v-763c1cd7#1\",\"3441\":\"v-763c1cd7#1/0\",\"3442\":\"v-763c1cd7#2\",\"3443\":\"v-763c1cd7#2/0\",\"3444\":\"v-763c1cd7#2/1\",\"3445\":\"v-1e317375\",\"3446\":\"v-1e317375#0/0\",\"3447\":\"v-763e2284\",\"3448\":\"v-763e2284#1\",\"3449\":\"v-763e2284#1/0\",\"3450\":\"v-763e2284#2\",\"3451\":\"v-763e2284#2/0\",\"3452\":\"v-763e2284#2/1\",\"3453\":\"v-00fb7173\",\"3454\":\"v-00fb7173#0/0\",\"3455\":\"v-73f45a1e\",\"3456\":\"v-73f45a1e#1\",\"3457\":\"v-73f45a1e#2\",\"3458\":\"v-73f45a1e#3\",\"3459\":\"v-73f45a1e#3/0\",\"3460\":\"v-73f45a1e#3/1\",\"3461\":\"v-73f45a1e#3/2\",\"3462\":\"v-73f45a1e#3/3\",\"3463\":\"v-73f45a1e#3/4\",\"3464\":\"v-73f45a1e#4\",\"3465\":\"v-73f45a1e#5\",\"3466\":\"v-73f45a1e#6\",\"3467\":\"v-73f45a1e#7\",\"3468\":\"v-73f45a1e#8\",\"3469\":\"v-73f45a1e#9\",\"3470\":\"v-73f45a1e#10\",\"3471\":\"v-73f45a1e#10/0\",\"3472\":\"v-73f45a1e#10/1\",\"3473\":\"v-73f45a1e#10/2\",\"3474\":\"v-73f45a1e#11\",\"3475\":\"v-73f45a1e#11/0\",\"3476\":\"v-73f45a1e#11/1\",\"3477\":\"v-73f45a1e#11/2\",\"3478\":\"v-73f45a1e#12\",\"3479\":\"v-73f45a1e#13\",\"3480\":\"v-73f45a1e#13/0\",\"3481\":\"v-73f45a1e#13/1\",\"3482\":\"v-73f45a1e#13/2\",\"3483\":\"v-73f45a1e#13/3\",\"3484\":\"v-73f45a1e#14\",\"3485\":\"v-73f45a1e#14/0\",\"3486\":\"v-73f45a1e#14/1\",\"3487\":\"v-73f45a1e#15\",\"3488\":\"v-73f45a1e#15/0\",\"3489\":\"v-73f45a1e#15/1\",\"3490\":\"v-73f45a1e#15/2\",\"3491\":\"v-73f45a1e#15/3\",\"3492\":\"v-73f45a1e#15/4\",\"3493\":\"v-73f45a1e#15/5\",\"3494\":\"v-73f45a1e#15/6\",\"3495\":\"v-73f45a1e#15/7\",\"3496\":\"v-73f45a1e#15/8\",\"3497\":\"v-73f45a1e#15/9\",\"3498\":\"v-73f45a1e#15/10\",\"3499\":\"v-73f45a1e#15/11\",\"3500\":\"v-73f45a1e#15/12\",\"3501\":\"v-73f45a1e#15/13\",\"3502\":\"v-73f45a1e#16\",\"3503\":\"v-73f45a1e#16/0\",\"3504\":\"v-73f45a1e#16/1\",\"3505\":\"v-73f45a1e#16/2\",\"3506\":\"v-73f45a1e#16/3\",\"3507\":\"v-73f45a1e#16/4\",\"3508\":\"v-73f45a1e#16/5\",\"3509\":\"v-73f45a1e#16/6\",\"3510\":\"v-73f45a1e#16/7\",\"3511\":\"v-73f45a1e#16/8\",\"3512\":\"v-73f45a1e#16/9\",\"3513\":\"v-73f45a1e#16/10\",\"3514\":\"v-73f45a1e#16/11\",\"3515\":\"v-73f45a1e#16/12\",\"3516\":\"v-73f45a1e#16/13\",\"3517\":\"v-73f45a1e#16/14\",\"3518\":\"v-86e9843c\",\"3519\":\"v-86e9843c#1\",\"3520\":\"v-86e9843c#1/0\",\"3521\":\"v-86e9843c#2\",\"3522\":\"v-86e9843c#3\",\"3523\":\"v-86e9843c#3/0\",\"3524\":\"v-86e9843c#3/1\",\"3525\":\"v-86e9843c#3/2\",\"3526\":\"v-86e9843c#3/3\",\"3527\":\"v-86e9843c#3/4\",\"3528\":\"v-86e9843c#3/5\",\"3529\":\"v-86e9843c#3/6\",\"3530\":\"v-86e9843c#3/7\",\"3531\":\"v-86e9843c#4\",\"3532\":\"v-86e9843c#4/8\",\"3533\":\"v-86e9843c#4/9\",\"3534\":\"v-86e9843c#4/10\",\"3535\":\"v-86e9843c#4/11\",\"3536\":\"v-86e9843c#4/12\",\"3537\":\"v-86e9843c#5\",\"3538\":\"v-86e9843c#5/0\",\"3539\":\"v-86e9843c#5/1\",\"3540\":\"v-86e9843c#5/2\",\"3541\":\"v-86e9843c#5/3\",\"3542\":\"v-86e9843c#5/4\",\"3543\":\"v-86e9843c#5/5\",\"3544\":\"v-86e9843c#6\",\"3545\":\"v-86e9843c#6/6\",\"3546\":\"v-86e9843c#6/7\",\"3547\":\"v-86e9843c#7\",\"3548\":\"v-86e9843c#7/8\",\"3549\":\"v-86e9843c#7/9\",\"3550\":\"v-86e9843c#7/10\",\"3551\":\"v-86e9843c#7/11\",\"3552\":\"v-86e9843c#7/12\",\"3553\":\"v-86e9843c#7/13\",\"3554\":\"v-86e9843c#7/14\",\"3555\":\"v-86e9843c#7/15\",\"3556\":\"v-86e9843c#7/16\",\"3557\":\"v-86e9843c#7/17\",\"3558\":\"v-86e9843c#8\",\"3559\":\"v-86e9843c#9\",\"3560\":\"v-86e9843c#9/0\",\"3561\":\"v-86e9843c#9/1\",\"3562\":\"v-86e9843c#9/2\",\"3563\":\"v-86e9843c#9/3\",\"3564\":\"v-86e9843c#9/4\",\"3565\":\"v-86e9843c#9/5\",\"3566\":\"v-86e9843c#9/6\",\"3567\":\"v-86e9843c#9/7\",\"3568\":\"v-86e9843c#9/8\",\"3569\":\"v-86e9843c#9/9\",\"3570\":\"v-86e9843c#9/10\",\"3571\":\"v-86e9843c#9/11\",\"3572\":\"v-86e9843c#9/12\",\"3573\":\"v-86e9843c#9/13\",\"3574\":\"v-86e9843c#9/14\",\"3575\":\"v-86e9843c#9/15\",\"3576\":\"v-86e9843c#9/16\",\"3577\":\"v-86e9843c#9/17\",\"3578\":\"v-86e9843c#10\",\"3579\":\"v-86e9843c#10/0\",\"3580\":\"v-86e9843c#10/1\",\"3581\":\"v-86e9843c#10/2\",\"3582\":\"v-86e9843c#10/3\",\"3583\":\"v-86e9843c#10/4\",\"3584\":\"v-86e9843c#10/5\",\"3585\":\"v-86e9843c#10/6\",\"3586\":\"v-86e9843c#11\",\"3587\":\"v-86e9843c#11/0\",\"3588\":\"v-86e9843c#11/1\",\"3589\":\"v-86e9843c#11/2\",\"3590\":\"v-86e9843c#11/3\",\"3591\":\"v-86e9843c#11/4\",\"3592\":\"v-86e9843c#11/5\",\"3593\":\"v-86e9843c#11/6\",\"3594\":\"v-86e9843c#12\",\"3595\":\"v-86e9843c#12/0\",\"3596\":\"v-86e9843c#12/1\",\"3597\":\"v-86e9843c#12/2\",\"3598\":\"v-86e9843c#12/3\",\"3599\":\"v-86e9843c#12/4\",\"3600\":\"v-86e9843c#12/5\",\"3601\":\"v-86e9843c#12/6\",\"3602\":\"v-86e9843c#12/7\",\"3603\":\"v-86e9843c#12/8\",\"3604\":\"v-86e9843c#13\",\"3605\":\"v-86e9843c#14\",\"3606\":\"v-86e9843c#15\",\"3607\":\"v-86e9843c#16\",\"3608\":\"v-86e9843c#16/0\",\"3609\":\"v-86e9843c#16/1\",\"3610\":\"v-86e9843c#17\",\"3611\":\"v-86e9843c#17/0\",\"3612\":\"v-86e9843c#18\",\"3613\":\"v-86e9843c#18/0\",\"3614\":\"v-86e9843c#19\",\"3615\":\"v-86e9843c#19/0\",\"3616\":\"v-86e9843c#20\",\"3617\":\"v-86e9843c#20/0\",\"3618\":\"v-86e9843c#21\",\"3619\":\"v-86e9843c#21/0\",\"3620\":\"v-86e9843c#21/1\",\"3621\":\"v-86e9843c#22\",\"3622\":\"v-86e9843c#23\",\"3623\":\"v-86e9843c#24\",\"3624\":\"v-86e9843c#25\",\"3625\":\"v-86e9843c#26\",\"3626\":\"v-86e9843c#27\",\"3627\":\"v-86e9843c#28\",\"3628\":\"v-86e9843c#29\",\"3629\":\"v-86e9843c#29/0\",\"3630\":\"v-86e9843c#30\",\"3631\":\"v-86e9843c#30/0\",\"3632\":\"v-86e9843c#31\",\"3633\":\"v-86e9843c#31/0\",\"3634\":\"v-86e9843c#31/1\",\"3635\":\"v-86e9843c#31/2\",\"3636\":\"v-86e9843c#31/3\",\"3637\":\"v-86e9843c#31/4\",\"3638\":\"v-86e9843c#31/5\",\"3639\":\"v-86e9843c#31/6\",\"3640\":\"v-86e9843c#31/7\",\"3641\":\"v-86e9843c#31/8\",\"3642\":\"v-86e9843c#32\",\"3643\":\"v-86e9843c#32/0\",\"3644\":\"v-86e9843c#32/1\",\"3645\":\"v-86e9843c#32/2\",\"3646\":\"v-86e9843c#32/3\",\"3647\":\"v-86e9843c#32/4\",\"3648\":\"v-86e9843c#32/5\",\"3649\":\"v-86e9843c#32/6\",\"3650\":\"v-86e9843c#32/7\",\"3651\":\"v-86e9843c#33\",\"3652\":\"v-86e9843c#34\",\"3653\":\"v-86e9843c#35\",\"3654\":\"v-86e9843c#36\",\"3655\":\"v-86e9843c#36/0\",\"3656\":\"v-86e9843c#36/1\",\"3657\":\"v-86e9843c#36/2\",\"3658\":\"v-86e9843c#37\",\"3659\":\"v-86e9843c#37/0\",\"3660\":\"v-86e9843c#37/1\",\"3661\":\"v-86e9843c#37/2\",\"3662\":\"v-86e9843c#37/3\",\"3663\":\"v-86e9843c#38\",\"3664\":\"v-86e9843c#39\",\"3665\":\"v-86e9843c#39/0\",\"3666\":\"v-86e9843c#39/1\",\"3667\":\"v-86e9843c#39/2\",\"3668\":\"v-86e9843c#40\",\"3669\":\"v-86e9843c#40/0\",\"3670\":\"v-86e9843c#40/1\",\"3671\":\"v-86e9843c#41\",\"3672\":\"v-86e9843c#41/0\",\"3673\":\"v-86e9843c#42\",\"3674\":\"v-86e9843c#43\",\"3675\":\"v-86e9843c#44\",\"3676\":\"v-86e9843c#44/0\",\"3677\":\"v-86e9843c#45\",\"3678\":\"v-86e9843c#45/0\",\"3679\":\"v-86e9843c#45/1\",\"3680\":\"v-86e9843c#46\",\"3681\":\"v-86e9843c#46/0\",\"3682\":\"v-86e9843c#46/1\",\"3683\":\"v-86e9843c#47\",\"3684\":\"v-86e9843c#47/0\",\"3685\":\"v-86e9843c#47/1\",\"3686\":\"v-86e9843c#47/2\",\"3687\":\"v-86e9843c#47/3\",\"3688\":\"v-86e9843c#47/4\",\"3689\":\"v-86e9843c#48\",\"3690\":\"v-86e9843c#48/0\",\"3691\":\"v-86e9843c#48/1\",\"3692\":\"v-86e9843c#48/2\",\"3693\":\"v-86e9843c#48/3\",\"3694\":\"v-86e9843c#48/4\",\"3695\":\"v-86e9843c#48/5\",\"3696\":\"v-86e9843c#49\",\"3697\":\"v-86e9843c#49/0\",\"3698\":\"v-86e9843c#49/1\",\"3699\":\"v-86e9843c#49/2\",\"3700\":\"v-86e9843c#49/3\",\"3701\":\"v-86e9843c#49/4\",\"3702\":\"v-86e9843c#49/5\",\"3703\":\"v-86e9843c#49/6\",\"3704\":\"v-86e9843c#50\",\"3705\":\"v-86e9843c#50/0\",\"3706\":\"v-86e9843c#50/1\",\"3707\":\"v-692f37ea\",\"3708\":\"v-692f37ea#1\",\"3709\":\"v-692f37ea#2\",\"3710\":\"v-692f37ea#2/0\",\"3711\":\"v-692f37ea#2/1\",\"3712\":\"v-692f37ea#2/2\",\"3713\":\"v-692f37ea#2/3\",\"3714\":\"v-692f37ea#2/4\",\"3715\":\"v-692f37ea#2/5\",\"3716\":\"v-692f37ea#3\",\"3717\":\"v-692f37ea#4\",\"3718\":\"v-692f37ea#4/0\",\"3719\":\"v-692f37ea#4/1\",\"3720\":\"v-692f37ea#4/2\",\"3721\":\"v-692f37ea#4/3\",\"3722\":\"v-692f37ea#4/4\",\"3723\":\"v-692f37ea#4/5\",\"3724\":\"v-692f37ea#4/6\",\"3725\":\"v-692f37ea#4/7\",\"3726\":\"v-692f37ea#4/8\",\"3727\":\"v-692f37ea#4/9\",\"3728\":\"v-692f37ea#4/10\",\"3729\":\"v-692f37ea#4/11\",\"3730\":\"v-692f37ea#4/12\",\"3731\":\"v-692f37ea#4/13\",\"3732\":\"v-692f37ea#4/14\",\"3733\":\"v-692f37ea#5\",\"3734\":\"v-692f37ea#5/0\",\"3735\":\"v-692f37ea#5/1\",\"3736\":\"v-692f37ea#5/2\",\"3737\":\"v-692f37ea#5/3\",\"3738\":\"v-692f37ea#5/4\",\"3739\":\"v-692f37ea#5/5\",\"3740\":\"v-692f37ea#5/6\",\"3741\":\"v-692f37ea#6\",\"3742\":\"v-692f37ea#7\",\"3743\":\"v-692f37ea#7/0\",\"3744\":\"v-692f37ea#7/1\",\"3745\":\"v-692f37ea#7/2\",\"3746\":\"v-692f37ea#7/3\",\"3747\":\"v-692f37ea#7/4\",\"3748\":\"v-692f37ea#7/5\",\"3749\":\"v-692f37ea#7/6\",\"3750\":\"v-692f37ea#7/7\",\"3751\":\"v-692f37ea#7/8\",\"3752\":\"v-692f37ea#7/9\",\"3753\":\"v-692f37ea#7/10\",\"3754\":\"v-692f37ea#8\",\"3755\":\"v-692f37ea#8/0\",\"3756\":\"v-692f37ea#8/1\",\"3757\":\"v-692f37ea#8/2\",\"3758\":\"v-692f37ea#8/3\",\"3759\":\"v-692f37ea#8/4\",\"3760\":\"v-692f37ea#8/5\",\"3761\":\"v-692f37ea#9\",\"3762\":\"v-692f37ea#9/0\",\"3763\":\"v-692f37ea#9/1\",\"3764\":\"v-692f37ea#9/2\",\"3765\":\"v-692f37ea#9/3\",\"3766\":\"v-692f37ea#9/4\",\"3767\":\"v-692f37ea#9/5\",\"3768\":\"v-692f37ea#9/6\",\"3769\":\"v-692f37ea#9/7\",\"3770\":\"v-692f37ea#9/8\",\"3771\":\"v-692f37ea#9/9\",\"3772\":\"v-692f37ea#9/10\",\"3773\":\"v-692f37ea#10\",\"3774\":\"v-692f37ea#10/0\",\"3775\":\"v-692f37ea#10/1\",\"3776\":\"v-692f37ea#10/2\",\"3777\":\"v-692f37ea#10/3\",\"3778\":\"v-692f37ea#10/4\",\"3779\":\"v-692f37ea#10/5\",\"3780\":\"v-692f37ea#10/6\",\"3781\":\"v-692f37ea#10/7\",\"3782\":\"v-692f37ea#10/8\",\"3783\":\"v-692f37ea#10/9\",\"3784\":\"v-692f37ea#10/10\",\"3785\":\"v-692f37ea#10/11\",\"3786\":\"v-692f37ea#10/12\",\"3787\":\"v-692f37ea#10/13\",\"3788\":\"v-692f37ea#10/14\",\"3789\":\"v-692f37ea#10/15\",\"3790\":\"v-692f37ea#10/16\",\"3791\":\"v-692f37ea#10/17\",\"3792\":\"v-692f37ea#10/18\",\"3793\":\"v-692f37ea#10/19\",\"3794\":\"v-692f37ea#10/20\",\"3795\":\"v-692f37ea#10/21\",\"3796\":\"v-692f37ea#10/22\",\"3797\":\"v-692f37ea#10/23\",\"3798\":\"v-692f37ea#10/24\",\"3799\":\"v-692f37ea#10/25\",\"3800\":\"v-692f37ea#10/26\",\"3801\":\"v-692f37ea#10/27\",\"3802\":\"v-692f37ea#10/28\",\"3803\":\"v-692f37ea#11\",\"3804\":\"v-692f37ea#11/0\",\"3805\":\"v-692f37ea#11/1\",\"3806\":\"v-692f37ea#11/2\",\"3807\":\"v-692f37ea#11/3\",\"3808\":\"v-692f37ea#11/4\",\"3809\":\"v-692f37ea#11/5\",\"3810\":\"v-692f37ea#11/6\",\"3811\":\"v-692f37ea#11/7\",\"3812\":\"v-692f37ea#11/8\",\"3813\":\"v-692f37ea#11/9\",\"3814\":\"v-692f37ea#12\",\"3815\":\"v-692f37ea#12/0\",\"3816\":\"v-692f37ea#12/1\",\"3817\":\"v-692f37ea#12/2\",\"3818\":\"v-692f37ea#13\",\"3819\":\"v-692f37ea#13/0\",\"3820\":\"v-692f37ea#13/1\",\"3821\":\"v-692f37ea#13/2\",\"3822\":\"v-692f37ea#13/3\",\"3823\":\"v-692f37ea#13/4\",\"3824\":\"v-692f37ea#13/5\",\"3825\":\"v-692f37ea#14\",\"3826\":\"v-692f37ea#14/6\",\"3827\":\"v-692f37ea#14/7\",\"3828\":\"v-692f37ea#14/8\",\"3829\":\"v-692f37ea#14/9\",\"3830\":\"v-692f37ea#14/10\",\"3831\":\"v-692f37ea#14/11\",\"3832\":\"v-692f37ea#15\",\"3833\":\"v-692f37ea#15/0\",\"3834\":\"v-692f37ea#15/1\",\"3835\":\"v-692f37ea#16\",\"3836\":\"v-692f37ea#17\",\"3837\":\"v-692f37ea#17/2\",\"3838\":\"v-692f37ea#17/3\",\"3839\":\"v-692f37ea#17/4\",\"3840\":\"v-692f37ea#17/5\",\"3841\":\"v-692f37ea#18\",\"3842\":\"v-692f37ea#18/0\",\"3843\":\"v-692f37ea#18/1\",\"3844\":\"v-692f37ea#18/2\",\"3845\":\"v-692f37ea#19\",\"3846\":\"v-692f37ea#19/0\",\"3847\":\"v-692f37ea#19/1\",\"3848\":\"v-692f37ea#19/2\",\"3849\":\"v-692f37ea#19/3\",\"3850\":\"v-692f37ea#19/4\",\"3851\":\"v-692f37ea#19/5\",\"3852\":\"v-692f37ea#19/6\",\"3853\":\"v-692f37ea#19/7\",\"3854\":\"v-692f37ea#19/8\",\"3855\":\"v-692f37ea#19/9\",\"3856\":\"v-692f37ea#19/10\",\"3857\":\"v-692f37ea#19/11\",\"3858\":\"v-692f37ea#20\",\"3859\":\"v-692f37ea#20/0\",\"3860\":\"v-692f37ea#20/1\",\"3861\":\"v-692f37ea#20/2\",\"3862\":\"v-692f37ea#20/3\",\"3863\":\"v-692f37ea#20/4\",\"3864\":\"v-692f37ea#20/5\",\"3865\":\"v-692f37ea#20/6\",\"3866\":\"v-692f37ea#20/7\",\"3867\":\"v-692f37ea#21\",\"3868\":\"v-692f37ea#22\",\"3869\":\"v-692f37ea#22/0\",\"3870\":\"v-692f37ea#22/1\",\"3871\":\"v-692f37ea#22/2\",\"3872\":\"v-692f37ea#22/3\",\"3873\":\"v-692f37ea#22/4\",\"3874\":\"v-692f37ea#22/5\",\"3875\":\"v-692f37ea#23\",\"3876\":\"v-692f37ea#23/0\",\"3877\":\"v-692f37ea#23/1\",\"3878\":\"v-692f37ea#23/2\",\"3879\":\"v-692f37ea#23/3\",\"3880\":\"v-692f37ea#23/4\",\"3881\":\"v-692f37ea#23/5\",\"3882\":\"v-692f37ea#23/6\",\"3883\":\"v-692f37ea#23/7\",\"3884\":\"v-692f37ea#24\",\"3885\":\"v-692f37ea#25\",\"3886\":\"v-692f37ea#25/0\",\"3887\":\"v-692f37ea#26\",\"3888\":\"v-692f37ea#26/0\",\"3889\":\"v-692f37ea#26/1\",\"3890\":\"v-692f37ea#26/2\",\"3891\":\"v-692f37ea#26/3\",\"3892\":\"v-692f37ea#26/4\",\"3893\":\"v-692f37ea#26/5\",\"3894\":\"v-692f37ea#27\",\"3895\":\"v-692f37ea#27/0\",\"3896\":\"v-692f37ea#27/1\",\"3897\":\"v-692f37ea#28\",\"3898\":\"v-692f37ea#28/0\",\"3899\":\"v-692f37ea#28/1\",\"3900\":\"v-692f37ea#28/2\",\"3901\":\"v-692f37ea#28/3\",\"3902\":\"v-692f37ea#28/4\",\"3903\":\"v-692f37ea#28/5\",\"3904\":\"v-692f37ea#28/6\",\"3905\":\"v-692f37ea#28/7\",\"3906\":\"v-692f37ea#28/8\",\"3907\":\"v-692f37ea#28/9\",\"3908\":\"v-73f9cd72\",\"3909\":\"v-73f9cd72#1\",\"3910\":\"v-73f9cd72#2\",\"3911\":\"v-73f9cd72#3\",\"3912\":\"v-73f9cd72#4\",\"3913\":\"v-73f9cd72#5\",\"3914\":\"v-73f9cd72#5/0\",\"3915\":\"v-63f5528d\",\"3916\":\"v-63f5528d#1\",\"3917\":\"v-63f5528d#2\",\"3918\":\"v-63f5528d#3\",\"3919\":\"v-63f5528d#3/0\",\"3920\":\"v-63f5528d#4\",\"3921\":\"v-63f5528d#4/0\",\"3922\":\"v-63f5528d#5\",\"3923\":\"v-63f5528d#5/0\",\"3924\":\"v-63f5528d#6\",\"3925\":\"v-63f5528d#6/0\",\"3926\":\"v-63f5528d#6/1\",\"3927\":\"v-63f5528d#6/2\",\"3928\":\"v-63f5528d#6/3\",\"3929\":\"v-63f5528d#6/4\",\"3930\":\"v-63f5528d#6/5\",\"3931\":\"v-63f5528d#6/6\",\"3932\":\"v-63f5528d#6/7\",\"3933\":\"v-63f5528d#6/8\",\"3934\":\"v-63f5528d#7\",\"3935\":\"v-63f5528d#7/0\",\"3936\":\"v-63f5528d#7/1\",\"3937\":\"v-63f5528d#8\",\"3938\":\"v-63f5528d#8/2\",\"3939\":\"v-63f5528d#9\",\"3940\":\"v-63f5528d#9/0\",\"3941\":\"v-63f5528d#10\",\"3942\":\"v-63f5528d#10/0\",\"3943\":\"v-63f5528d#11\",\"3944\":\"v-63f5528d#11/0\",\"3945\":\"v-63f5528d#12\",\"3946\":\"v-63f5528d#12/0\",\"3947\":\"v-63f5528d#12/1\",\"3948\":\"v-63f5528d#13\",\"3949\":\"v-63f5528d#13/0\",\"3950\":\"v-63f5528d#13/1\",\"3951\":\"v-63f5528d#13/2\",\"3952\":\"v-63f5528d#13/3\",\"3953\":\"v-63f5528d#13/4\",\"3954\":\"v-63f5528d#13/5\",\"3955\":\"v-63f5528d#14\",\"3956\":\"v-63f5528d#14/0\",\"3957\":\"v-63f5528d#15\",\"3958\":\"v-63f5528d#15/0\",\"3959\":\"v-13d681f6\",\"3960\":\"v-13d681f6#1\",\"3961\":\"v-13d681f6#2\",\"3962\":\"v-13d681f6#2/0\",\"3963\":\"v-13d681f6#2/1\",\"3964\":\"v-13d681f6#2/2\",\"3965\":\"v-13d681f6#2/3\",\"3966\":\"v-13d681f6#2/4\",\"3967\":\"v-13d681f6#2/5\",\"3968\":\"v-13d681f6#3\",\"3969\":\"v-13d681f6#3/0\",\"3970\":\"v-13d681f6#3/1\",\"3971\":\"v-13d681f6#3/2\",\"3972\":\"v-13d681f6#3/3\",\"3973\":\"v-13d681f6#3/4\",\"3974\":\"v-13d681f6#3/5\",\"3975\":\"v-13d681f6#4\",\"3976\":\"v-13d681f6#4/0\",\"3977\":\"v-13d681f6#5\",\"3978\":\"v-13d681f6#5/0\",\"3979\":\"v-13d681f6#6\",\"3980\":\"v-13d681f6#6/0\",\"3981\":\"v-13d681f6#6/1\",\"3982\":\"v-13d681f6#6/2\",\"3983\":\"v-13d681f6#6/3\",\"3984\":\"v-13d681f6#6/4\",\"3985\":\"v-13d681f6#7\",\"3986\":\"v-13d681f6#7/0\",\"3987\":\"v-13d681f6#7/1\",\"3988\":\"v-13d681f6#7/2\",\"3989\":\"v-13d681f6#7/3\",\"3990\":\"v-13d681f6#8\",\"3991\":\"v-13d681f6#8/0\",\"3992\":\"v-13d681f6#8/1\",\"3993\":\"v-13d681f6#9\",\"3994\":\"v-13d681f6#9/0\",\"3995\":\"v-13d681f6#9/1\",\"3996\":\"v-13d681f6#10\",\"3997\":\"v-13d681f6#10/0\",\"3998\":\"v-13d681f6#10/1\",\"3999\":\"v-13d681f6#10/2\",\"4000\":\"v-13d681f6#10/3\",\"4001\":\"v-13d681f6#10/4\",\"4002\":\"v-13d681f6#11\",\"4003\":\"v-13d681f6#11/0\",\"4004\":\"v-13d681f6#11/1\",\"4005\":\"v-13d681f6#11/2\",\"4006\":\"v-13d681f6#11/3\",\"4007\":\"v-13d681f6#11/4\",\"4008\":\"v-13d681f6#11/5\",\"4009\":\"v-13d681f6#11/6\",\"4010\":\"v-13d681f6#11/7\",\"4011\":\"v-13d681f6#11/8\",\"4012\":\"v-13d681f6#11/9\",\"4013\":\"v-13d681f6#11/10\",\"4014\":\"v-13d681f6#11/11\",\"4015\":\"v-13d681f6#11/12\",\"4016\":\"v-13d681f6#11/13\",\"4017\":\"v-13d681f6#11/14\",\"4018\":\"v-13d681f6#12\",\"4019\":\"v-13d681f6#12/0\",\"4020\":\"v-13d681f6#12/1\",\"4021\":\"v-13d681f6#12/2\",\"4022\":\"v-13d681f6#12/3\",\"4023\":\"v-13d681f6#13\",\"4024\":\"v-13d681f6#13/0\",\"4025\":\"v-13d681f6#13/1\",\"4026\":\"v-13d681f6#14\",\"4027\":\"v-13d681f6#14/0\",\"4028\":\"v-13d681f6#14/1\",\"4029\":\"v-13d681f6#14/2\",\"4030\":\"v-13d681f6#14/3\",\"4031\":\"v-13d681f6#14/4\",\"4032\":\"v-13d681f6#14/5\",\"4033\":\"v-13d681f6#15\",\"4034\":\"v-13d681f6#15/0\",\"4035\":\"v-13d681f6#15/1\",\"4036\":\"v-13d681f6#16\",\"4037\":\"v-13d681f6#16/0\",\"4038\":\"v-13d681f6#16/1\",\"4039\":\"v-13d681f6#16/2\",\"4040\":\"v-13d681f6#17\",\"4041\":\"v-13d681f6#17/0\",\"4042\":\"v-13d681f6#17/1\",\"4043\":\"v-13d681f6#17/2\",\"4044\":\"v-13d681f6#18\",\"4045\":\"v-13d681f6#18/0\",\"4046\":\"v-13d681f6#19\",\"4047\":\"v-13d681f6#19/0\",\"4048\":\"v-13d681f6#20\",\"4049\":\"v-13d681f6#20/0\",\"4050\":\"v-13d681f6#20/1\",\"4051\":\"v-13d681f6#20/2\",\"4052\":\"v-13d681f6#20/3\",\"4053\":\"v-13d681f6#21\",\"4054\":\"v-13d681f6#21/0\",\"4055\":\"v-13d681f6#21/1\",\"4056\":\"v-13d681f6#21/2\",\"4057\":\"v-13d681f6#21/3\",\"4058\":\"v-13d681f6#21/4\",\"4059\":\"v-13d681f6#21/5\",\"4060\":\"v-13d681f6#21/6\",\"4061\":\"v-13d681f6#21/7\",\"4062\":\"v-13d681f6#22\",\"4063\":\"v-13d681f6#22/0\",\"4064\":\"v-13d681f6#22/1\",\"4065\":\"v-13d681f6#22/2\",\"4066\":\"v-13d681f6#22/3\",\"4067\":\"v-13d681f6#23\",\"4068\":\"v-13d681f6#23/0\",\"4069\":\"v-13d681f6#23/1\",\"4070\":\"v-13d681f6#23/2\",\"4071\":\"v-13d681f6#23/3\",\"4072\":\"v-13d681f6#23/4\",\"4073\":\"v-13d681f6#23/5\",\"4074\":\"v-13d681f6#24\",\"4075\":\"v-13d681f6#24/0\",\"4076\":\"v-13d681f6#25\",\"4077\":\"v-13d681f6#26\",\"4078\":\"v-13d681f6#26/0\",\"4079\":\"v-13d681f6#26/1\",\"4080\":\"v-13d681f6#26/2\",\"4081\":\"v-13d681f6#26/3\",\"4082\":\"v-13d681f6#26/4\",\"4083\":\"v-13d681f6#27\",\"4084\":\"v-13d681f6#27/0\",\"4085\":\"v-13d681f6#27/1\",\"4086\":\"v-13d681f6#28\",\"4087\":\"v-13d681f6#28/0\",\"4088\":\"v-13d681f6#28/1\",\"4089\":\"v-13d681f6#28/2\",\"4090\":\"v-13d681f6#28/3\",\"4091\":\"v-13d681f6#28/4\",\"4092\":\"v-13d681f6#28/5\",\"4093\":\"v-13d681f6#28/6\",\"4094\":\"v-13d681f6#28/7\",\"4095\":\"v-13d681f6#28/8\",\"4096\":\"v-13d681f6#28/9\",\"4097\":\"v-13d681f6#28/10\",\"4098\":\"v-13d681f6#28/11\",\"4099\":\"v-13d681f6#28/12\",\"4100\":\"v-13d681f6#29\",\"4101\":\"v-13d681f6#29/0\",\"4102\":\"v-13d681f6#29/1\",\"4103\":\"v-13d681f6#30\",\"4104\":\"v-13d681f6#31\",\"4105\":\"v-13d681f6#31/0\",\"4106\":\"v-13d681f6#32\",\"4107\":\"v-13d681f6#32/0\",\"4108\":\"v-13d681f6#33\",\"4109\":\"v-13d681f6#33/0\",\"4110\":\"v-13d681f6#33/1\",\"4111\":\"v-13d681f6#33/2\",\"4112\":\"v-13d681f6#34\",\"4113\":\"v-13d681f6#34/0\",\"4114\":\"v-13d681f6#34/1\",\"4115\":\"v-13d681f6#34/2\",\"4116\":\"v-13d681f6#34/3\",\"4117\":\"v-13d681f6#35\",\"4118\":\"v-13d681f6#35/0\",\"4119\":\"v-13d681f6#35/1\",\"4120\":\"v-13d681f6#35/2\",\"4121\":\"v-13d681f6#36\",\"4122\":\"v-13d681f6#36/0\",\"4123\":\"v-13d681f6#36/1\",\"4124\":\"v-13d681f6#37\",\"4125\":\"v-13d681f6#37/0\",\"4126\":\"v-13d681f6#37/1\",\"4127\":\"v-13d681f6#38\",\"4128\":\"v-13d681f6#38/0\",\"4129\":\"v-13d681f6#38/1\",\"4130\":\"v-13d681f6#38/2\",\"4131\":\"v-13d681f6#38/3\",\"4132\":\"v-13d681f6#38/4\",\"4133\":\"v-13d681f6#38/5\",\"4134\":\"v-13d681f6#38/6\",\"4135\":\"v-13d681f6#38/7\",\"4136\":\"v-13d681f6#38/8\",\"4137\":\"v-13d681f6#39\",\"4138\":\"v-13d681f6#40\",\"4139\":\"v-13d681f6#40/0\",\"4140\":\"v-13d681f6#40/1\",\"4141\":\"v-13d681f6#40/2\",\"4142\":\"v-13d681f6#40/3\",\"4143\":\"v-13d681f6#40/4\",\"4144\":\"v-13d681f6#40/5\",\"4145\":\"v-13d681f6#40/6\",\"4146\":\"v-13d681f6#40/7\",\"4147\":\"v-13d681f6#40/8\",\"4148\":\"v-13d681f6#40/9\",\"4149\":\"v-13d681f6#41\",\"4150\":\"v-13d681f6#41/0\",\"4151\":\"v-13d681f6#41/1\",\"4152\":\"v-13d681f6#41/2\",\"4153\":\"v-13d681f6#41/3\",\"4154\":\"v-13d681f6#42\",\"4155\":\"v-13d681f6#42/0\",\"4156\":\"v-13d681f6#42/1\",\"4157\":\"v-13d681f6#42/2\",\"4158\":\"v-13d681f6#42/3\",\"4159\":\"v-13d681f6#43\",\"4160\":\"v-13d681f6#44\",\"4161\":\"v-13d681f6#44/0\",\"4162\":\"v-13d681f6#44/1\",\"4163\":\"v-13d681f6#44/2\",\"4164\":\"v-13d681f6#45\",\"4165\":\"v-13d681f6#45/0\",\"4166\":\"v-13d681f6#45/1\",\"4167\":\"v-13d681f6#45/2\",\"4168\":\"v-13d681f6#45/3\",\"4169\":\"v-13d681f6#45/4\",\"4170\":\"v-13d681f6#45/5\",\"4171\":\"v-13d681f6#45/6\",\"4172\":\"v-13d681f6#45/7\",\"4173\":\"v-13d681f6#45/8\",\"4174\":\"v-13d681f6#46\",\"4175\":\"v-13d681f6#47\",\"4176\":\"v-13d681f6#47/0\",\"4177\":\"v-13d681f6#47/1\",\"4178\":\"v-13d681f6#47/2\",\"4179\":\"v-13d681f6#47/3\",\"4180\":\"v-13d681f6#48\",\"4181\":\"v-13d681f6#48/0\",\"4182\":\"v-13d681f6#48/1\",\"4183\":\"v-13d681f6#48/2\",\"4184\":\"v-13d681f6#48/3\",\"4185\":\"v-13d681f6#48/4\",\"4186\":\"v-13d681f6#48/5\",\"4187\":\"v-13d681f6#48/6\",\"4188\":\"v-13d681f6#48/7\",\"4189\":\"v-13d681f6#48/8\",\"4190\":\"v-13d681f6#48/9\",\"4191\":\"v-13d681f6#48/10\",\"4192\":\"v-13d681f6#48/11\",\"4193\":\"v-13d681f6#48/12\",\"4194\":\"v-13d681f6#48/13\",\"4195\":\"v-13d681f6#48/14\",\"4196\":\"v-13d681f6#48/15\",\"4197\":\"v-13d681f6#48/16\",\"4198\":\"v-13d681f6#48/17\",\"4199\":\"v-13d681f6#48/18\",\"4200\":\"v-13d681f6#48/19\",\"4201\":\"v-13d681f6#48/20\",\"4202\":\"v-13d681f6#48/21\",\"4203\":\"v-13d681f6#48/22\",\"4204\":\"v-13d681f6#48/23\",\"4205\":\"v-13d681f6#48/24\",\"4206\":\"v-13d681f6#48/25\",\"4207\":\"v-13d681f6#48/26\",\"4208\":\"v-13d681f6#48/27\",\"4209\":\"v-13d681f6#48/28\",\"4210\":\"v-13d681f6#48/29\",\"4211\":\"v-13d681f6#48/30\",\"4212\":\"v-13d681f6#48/31\",\"4213\":\"v-13d681f6#48/32\",\"4214\":\"v-13d681f6#48/33\",\"4215\":\"v-13d681f6#48/34\",\"4216\":\"v-13d681f6#48/35\",\"4217\":\"v-13d681f6#48/36\",\"4218\":\"v-13d681f6#48/37\",\"4219\":\"v-13d681f6#48/38\",\"4220\":\"v-13d681f6#48/39\",\"4221\":\"v-13d681f6#48/40\",\"4222\":\"v-13d681f6#48/41\",\"4223\":\"v-13d681f6#48/42\",\"4224\":\"v-13d681f6#48/43\",\"4225\":\"v-13d681f6#49\",\"4226\":\"v-13d681f6#49/0\",\"4227\":\"v-13d681f6#49/1\",\"4228\":\"v-13d681f6#49/2\",\"4229\":\"v-13d681f6#49/3\",\"4230\":\"v-13d681f6#49/4\",\"4231\":\"v-13d681f6#49/5\",\"4232\":\"v-13d681f6#49/6\",\"4233\":\"v-13d681f6#49/7\",\"4234\":\"v-13d681f6#50\",\"4235\":\"v-13d681f6#50/0\",\"4236\":\"v-13d681f6#50/1\",\"4237\":\"v-13d681f6#50/2\",\"4238\":\"v-13d681f6#50/3\",\"4239\":\"v-13d681f6#50/4\",\"4240\":\"v-13d681f6#50/5\",\"4241\":\"v-13d681f6#50/6\",\"4242\":\"v-13d681f6#50/7\",\"4243\":\"v-13d681f6#50/8\",\"4244\":\"v-13d681f6#50/9\",\"4245\":\"v-13d681f6#50/10\",\"4246\":\"v-13d681f6#50/11\",\"4247\":\"v-13d681f6#50/12\",\"4248\":\"v-709b2df2\",\"4249\":\"v-709b2df2#1\",\"4250\":\"v-709b2df2#2\",\"4251\":\"v-709b2df2#2/0\",\"4252\":\"v-709b2df2#2/1\",\"4253\":\"v-709b2df2#2/2\",\"4254\":\"v-709b2df2#2/3\",\"4255\":\"v-709b2df2#3\",\"4256\":\"v-709b2df2#3/0\",\"4257\":\"v-709b2df2#3/1\",\"4258\":\"v-709b2df2#3/2\",\"4259\":\"v-709b2df2#3/3\",\"4260\":\"v-709b2df2#3/4\",\"4261\":\"v-709b2df2#3/5\",\"4262\":\"v-709b2df2#3/6\",\"4263\":\"v-709b2df2#3/7\",\"4264\":\"v-709b2df2#3/8\",\"4265\":\"v-709b2df2#4\",\"4266\":\"v-54b55293\",\"4267\":\"v-54b55293#1\",\"4268\":\"v-54b55293#2\",\"4269\":\"v-54b55293#2/0\",\"4270\":\"v-54b55293#3\",\"4271\":\"v-54b55293#3/0\",\"4272\":\"v-54b55293#3/1\",\"4273\":\"v-54b55293#3/2\",\"4274\":\"v-54b55293#3/3\",\"4275\":\"v-54b55293#3/4\",\"4276\":\"v-54b55293#3/5\",\"4277\":\"v-54b55293#3/6\",\"4278\":\"v-54b55293#3/7\",\"4279\":\"v-54b55293#3/8\",\"4280\":\"v-54b55293#3/9\",\"4281\":\"v-54b55293#3/10\",\"4282\":\"v-54b55293#3/11\",\"4283\":\"v-54b55293#3/12\",\"4284\":\"v-54b55293#3/13\",\"4285\":\"v-54b55293#3/14\",\"4286\":\"v-54b55293#3/15\",\"4287\":\"v-54b55293#3/16\",\"4288\":\"v-54b55293#3/17\",\"4289\":\"v-54b55293#3/18\",\"4290\":\"v-54b55293#3/19\",\"4291\":\"v-54b55293#3/20\",\"4292\":\"v-54b55293#3/21\",\"4293\":\"v-54b55293#4\",\"4294\":\"v-54b55293#4/0\",\"4295\":\"v-54b55293#4/1\",\"4296\":\"v-54b55293#4/2\",\"4297\":\"v-54b55293#4/3\",\"4298\":\"v-54b55293#4/4\",\"4299\":\"v-54b55293#4/5\",\"4300\":\"v-54b55293#4/6\",\"4301\":\"v-54b55293#4/7\",\"4302\":\"v-54b55293#4/8\",\"4303\":\"v-54b55293#4/9\",\"4304\":\"v-54b55293#4/10\",\"4305\":\"v-54b55293#4/11\",\"4306\":\"v-54b55293#4/12\",\"4307\":\"v-54b55293#4/13\",\"4308\":\"v-54b55293#4/14\",\"4309\":\"v-54b55293#4/15\",\"4310\":\"v-54b55293#4/16\",\"4311\":\"v-54b55293#4/17\",\"4312\":\"v-54b55293#4/18\",\"4313\":\"v-54b55293#4/19\",\"4314\":\"v-54b55293#4/20\",\"4315\":\"v-54b55293#4/21\",\"4316\":\"v-54b55293#4/22\",\"4317\":\"v-54b55293#4/23\",\"4318\":\"v-54b55293#4/24\",\"4319\":\"v-54b55293#4/25\",\"4320\":\"v-54b55293#4/26\",\"4321\":\"v-54b55293#4/27\",\"4322\":\"v-54b55293#4/28\",\"4323\":\"v-54b55293#5\",\"4324\":\"v-54b55293#5/0\",\"4325\":\"v-54b55293#5/1\",\"4326\":\"v-54b55293#5/2\",\"4327\":\"v-54b55293#5/3\",\"4328\":\"v-54b55293#5/4\",\"4329\":\"v-4397b9d8\",\"4330\":\"v-4397b9d8#1\",\"4331\":\"v-4397b9d8#2\",\"4332\":\"v-4397b9d8#2/0\",\"4333\":\"v-4397b9d8#2/1\",\"4334\":\"v-4397b9d8#2/2\",\"4335\":\"v-4397b9d8#2/3\",\"4336\":\"v-4397b9d8#2/4\",\"4337\":\"v-4397b9d8#3\",\"4338\":\"v-4397b9d8#4\",\"4339\":\"v-4397b9d8#4/0\",\"4340\":\"v-4397b9d8#5\",\"4341\":\"v-4397b9d8#5/0\",\"4342\":\"v-4397b9d8#5/1\",\"4343\":\"v-4397b9d8#5/2\",\"4344\":\"v-4397b9d8#6\",\"4345\":\"v-4397b9d8#6/0\",\"4346\":\"v-4397b9d8#7\",\"4347\":\"v-4397b9d8#7/0\",\"4348\":\"v-4397b9d8#7/1\",\"4349\":\"v-4397b9d8#7/2\",\"4350\":\"v-4397b9d8#7/3\",\"4351\":\"v-4397b9d8#7/4\",\"4352\":\"v-4397b9d8#8\",\"4353\":\"v-4397b9d8#8/0\",\"4354\":\"v-4397b9d8#8/1\",\"4355\":\"v-4397b9d8#8/2\",\"4356\":\"v-4397b9d8#8/3\",\"4357\":\"v-4397b9d8#8/4\",\"4358\":\"v-4397b9d8#9\",\"4359\":\"v-4397b9d8#9/0\",\"4360\":\"v-4397b9d8#9/1\",\"4361\":\"v-4397b9d8#9/2\",\"4362\":\"v-4397b9d8#9/3\",\"4363\":\"v-4397b9d8#9/4\",\"4364\":\"v-4397b9d8#9/5\",\"4365\":\"v-4397b9d8#9/6\",\"4366\":\"v-4397b9d8#9/7\",\"4367\":\"v-4397b9d8#9/8\",\"4368\":\"v-4397b9d8#9/9\",\"4369\":\"v-4397b9d8#9/10\",\"4370\":\"v-4397b9d8#9/11\",\"4371\":\"v-4397b9d8#9/12\",\"4372\":\"v-4397b9d8#9/13\",\"4373\":\"v-4397b9d8#9/14\",\"4374\":\"v-4397b9d8#9/15\",\"4375\":\"v-4397b9d8#9/16\",\"4376\":\"v-4397b9d8#9/17\",\"4377\":\"v-4397b9d8#9/18\",\"4378\":\"v-4397b9d8#9/19\",\"4379\":\"v-4397b9d8#9/20\",\"4380\":\"v-4397b9d8#10\",\"4381\":\"v-4397b9d8#11\",\"4382\":\"v-4397b9d8#11/0\",\"4383\":\"v-4397b9d8#11/1\",\"4384\":\"v-4397b9d8#11/2\",\"4385\":\"v-4397b9d8#11/3\",\"4386\":\"v-4397b9d8#11/4\",\"4387\":\"v-4397b9d8#11/5\",\"4388\":\"v-4397b9d8#11/6\",\"4389\":\"v-4397b9d8#11/7\",\"4390\":\"v-4397b9d8#12\",\"4391\":\"v-4397b9d8#12/0\",\"4392\":\"v-4397b9d8#12/1\",\"4393\":\"v-4397b9d8#12/2\",\"4394\":\"v-4397b9d8#12/3\",\"4395\":\"v-4397b9d8#12/4\",\"4396\":\"v-4397b9d8#12/5\",\"4397\":\"v-4397b9d8#12/6\",\"4398\":\"v-6e0208bc\",\"4399\":\"v-6e0208bc#1\",\"4400\":\"v-6e0208bc#2\",\"4401\":\"v-6e0208bc#3\",\"4402\":\"v-6e0208bc#3/0\",\"4403\":\"v-6e0208bc#3/1\",\"4404\":\"v-6e0208bc#3/2\",\"4405\":\"v-6e0208bc#3/3\",\"4406\":\"v-6e0208bc#3/4\",\"4407\":\"v-6e0208bc#3/5\",\"4408\":\"v-6e0208bc#4\",\"4409\":\"v-6e0208bc#5\",\"4410\":\"v-6e0208bc#5/0\",\"4411\":\"v-6e0208bc#5/1\",\"4412\":\"v-6e0208bc#5/2\",\"4413\":\"v-6e0208bc#5/3\",\"4414\":\"v-6e0208bc#5/4\",\"4415\":\"v-6e0208bc#5/5\",\"4416\":\"v-6e0208bc#5/6\",\"4417\":\"v-6e0208bc#5/7\",\"4418\":\"v-6e0208bc#5/8\",\"4419\":\"v-6e0208bc#5/9\",\"4420\":\"v-6e0208bc#5/10\",\"4421\":\"v-6e0208bc#5/11\",\"4422\":\"v-6e0208bc#6\",\"4423\":\"v-6e0208bc#6/0\",\"4424\":\"v-6e0208bc#6/1\",\"4425\":\"v-6e0208bc#6/2\",\"4426\":\"v-6e0208bc#6/3\",\"4427\":\"v-6e0208bc#6/4\",\"4428\":\"v-6e0208bc#6/5\",\"4429\":\"v-6e0208bc#6/6\",\"4430\":\"v-6e0208bc#7\",\"4431\":\"v-6e0208bc#8\",\"4432\":\"v-6e0208bc#8/0\",\"4433\":\"v-6e0208bc#8/1\",\"4434\":\"v-6e0208bc#8/2\",\"4435\":\"v-6e0208bc#8/3\",\"4436\":\"v-6e0208bc#9\",\"4437\":\"v-6e0208bc#9/0\",\"4438\":\"v-6e0208bc#9/1\",\"4439\":\"v-6e0208bc#9/2\",\"4440\":\"v-6e0208bc#9/3\",\"4441\":\"v-6e0208bc#9/4\",\"4442\":\"v-6e0208bc#9/5\",\"4443\":\"v-6e0208bc#9/6\",\"4444\":\"v-6e0208bc#9/7\",\"4445\":\"v-6e0208bc#9/8\",\"4446\":\"v-6e0208bc#9/9\",\"4447\":\"v-6e0208bc#9/10\",\"4448\":\"v-6e0208bc#9/11\",\"4449\":\"v-6e0208bc#9/12\",\"4450\":\"v-6e0208bc#9/13\",\"4451\":\"v-6e0208bc#9/14\",\"4452\":\"v-6e0208bc#9/15\",\"4453\":\"v-6e0208bc#9/16\",\"4454\":\"v-6e0208bc#9/17\",\"4455\":\"v-6e0208bc#9/18\",\"4456\":\"v-6e0208bc#9/19\",\"4457\":\"v-6e0208bc#10\",\"4458\":\"v-6e0208bc#10/0\",\"4459\":\"v-6e0208bc#10/1\",\"4460\":\"v-6e0208bc#10/2\",\"4461\":\"v-6e0208bc#10/3\",\"4462\":\"v-6e0208bc#11\",\"4463\":\"v-6e0208bc#11/0\",\"4464\":\"v-6e0208bc#11/1\",\"4465\":\"v-6e0208bc#11/2\",\"4466\":\"v-6e0208bc#11/3\",\"4467\":\"v-6e0208bc#11/4\",\"4468\":\"v-6e0208bc#11/5\",\"4469\":\"v-6e0208bc#11/6\",\"4470\":\"v-6e0208bc#11/7\",\"4471\":\"v-6e0208bc#11/8\",\"4472\":\"v-6e0208bc#11/9\",\"4473\":\"v-6e0208bc#12\",\"4474\":\"v-6e0208bc#12/0\",\"4475\":\"v-6e0208bc#12/1\",\"4476\":\"v-6e0208bc#12/2\",\"4477\":\"v-6e0208bc#12/3\",\"4478\":\"v-6e0208bc#12/4\",\"4479\":\"v-6e0208bc#12/5\",\"4480\":\"v-6e0208bc#12/6\",\"4481\":\"v-6e0208bc#12/7\",\"4482\":\"v-6e0208bc#12/8\",\"4483\":\"v-6e0208bc#12/9\",\"4484\":\"v-6e0208bc#12/10\",\"4485\":\"v-6e0208bc#12/11\",\"4486\":\"v-6e0208bc#12/12\",\"4487\":\"v-6e0208bc#12/13\",\"4488\":\"v-6e0208bc#12/14\",\"4489\":\"v-6e0208bc#13\",\"4490\":\"v-6e0208bc#13/0\",\"4491\":\"v-6e0208bc#13/1\",\"4492\":\"v-6e0208bc#13/2\",\"4493\":\"v-6e0208bc#14\",\"4494\":\"v-6e0208bc#14/0\",\"4495\":\"v-6e0208bc#14/1\",\"4496\":\"v-6e0208bc#14/2\",\"4497\":\"v-6e0208bc#14/3\",\"4498\":\"v-6e0208bc#14/4\",\"4499\":\"v-6e0208bc#14/5\",\"4500\":\"v-6e0208bc#14/6\",\"4501\":\"v-6e0208bc#14/7\",\"4502\":\"v-6e0208bc#14/8\",\"4503\":\"v-6e0208bc#14/9\",\"4504\":\"v-6e0208bc#14/10\",\"4505\":\"v-6e0208bc#14/11\",\"4506\":\"v-6e0208bc#14/12\",\"4507\":\"v-6e0208bc#14/13\",\"4508\":\"v-6e0208bc#14/14\",\"4509\":\"v-6e0208bc#14/15\",\"4510\":\"v-6e0208bc#14/16\",\"4511\":\"v-6e0208bc#14/17\",\"4512\":\"v-6e0208bc#14/18\",\"4513\":\"v-6e0208bc#14/19\",\"4514\":\"v-6e0208bc#15\",\"4515\":\"v-6e0208bc#15/0\",\"4516\":\"v-6e0208bc#15/1\",\"4517\":\"v-6e0208bc#15/2\",\"4518\":\"v-6e0208bc#15/3\",\"4519\":\"v-6e0208bc#15/4\",\"4520\":\"v-6e0208bc#15/5\",\"4521\":\"v-6e0208bc#15/6\",\"4522\":\"v-6e0208bc#15/7\",\"4523\":\"v-6e0208bc#15/8\",\"4524\":\"v-6e0208bc#15/9\",\"4525\":\"v-6e0208bc#15/10\",\"4526\":\"v-6e0208bc#15/11\",\"4527\":\"v-6e0208bc#15/12\",\"4528\":\"v-6e0208bc#15/13\",\"4529\":\"v-6e0208bc#15/14\",\"4530\":\"v-6e0208bc#15/15\",\"4531\":\"v-6e0208bc#15/16\",\"4532\":\"v-6e0208bc#15/17\",\"4533\":\"v-6e0208bc#15/18\",\"4534\":\"v-6e0208bc#15/19\",\"4535\":\"v-6e0208bc#16\",\"4536\":\"v-6e0208bc#16/0\",\"4537\":\"v-6e0208bc#16/1\",\"4538\":\"v-6e0208bc#16/2\",\"4539\":\"v-6e0208bc#16/3\",\"4540\":\"v-6e0208bc#16/4\",\"4541\":\"v-6e0208bc#16/5\",\"4542\":\"v-6e0208bc#16/6\",\"4543\":\"v-6e0208bc#16/7\",\"4544\":\"v-6e0208bc#16/8\",\"4545\":\"v-6e0208bc#16/9\",\"4546\":\"v-6e0208bc#16/10\",\"4547\":\"v-6e0208bc#16/11\",\"4548\":\"v-6e0208bc#16/12\",\"4549\":\"v-6e0208bc#16/13\",\"4550\":\"v-6e0208bc#16/14\",\"4551\":\"v-6e0208bc#16/15\",\"4552\":\"v-6e0208bc#16/16\",\"4553\":\"v-6e0208bc#17\",\"4554\":\"v-6e0208bc#17/0\",\"4555\":\"v-6e0208bc#17/1\",\"4556\":\"v-6e0208bc#17/2\",\"4557\":\"v-6e0208bc#17/3\",\"4558\":\"v-6e0208bc#17/4\",\"4559\":\"v-6e0208bc#17/5\",\"4560\":\"v-6e0208bc#17/6\",\"4561\":\"v-6e0208bc#17/7\",\"4562\":\"v-6e0208bc#17/8\",\"4563\":\"v-6e0208bc#17/9\",\"4564\":\"v-6e0208bc#17/10\",\"4565\":\"v-6e0208bc#17/11\",\"4566\":\"v-4115de74\",\"4567\":\"v-4115de74#1\",\"4568\":\"v-4115de74#2\",\"4569\":\"v-4115de74#3\",\"4570\":\"v-4115de74#3/0\",\"4571\":\"v-4115de74#3/1\",\"4572\":\"v-4115de74#3/2\",\"4573\":\"v-4115de74#3/3\",\"4574\":\"v-4115de74#3/4\",\"4575\":\"v-4115de74#3/5\",\"4576\":\"v-4115de74#3/6\",\"4577\":\"v-4115de74#3/7\",\"4578\":\"v-4115de74#3/8\",\"4579\":\"v-4115de74#3/9\",\"4580\":\"v-4115de74#3/10\",\"4581\":\"v-4115de74#3/11\",\"4582\":\"v-4115de74#3/12\",\"4583\":\"v-4115de74#3/13\",\"4584\":\"v-4115de74#3/14\",\"4585\":\"v-4115de74#3/15\",\"4586\":\"v-4115de74#3/16\",\"4587\":\"v-4115de74#3/17\",\"4588\":\"v-4115de74#3/18\",\"4589\":\"v-4115de74#3/19\",\"4590\":\"v-4115de74#3/20\",\"4591\":\"v-4115de74#3/21\",\"4592\":\"v-4115de74#3/22\",\"4593\":\"v-4115de74#4\",\"4594\":\"v-4115de74#4/0\",\"4595\":\"v-4115de74#5\",\"4596\":\"v-4115de74#5/0\",\"4597\":\"v-4115de74#5/1\",\"4598\":\"v-4115de74#5/2\",\"4599\":\"v-4115de74#5/3\",\"4600\":\"v-4115de74#5/4\",\"4601\":\"v-4115de74#5/5\",\"4602\":\"v-4115de74#5/6\",\"4603\":\"v-4115de74#5/7\",\"4604\":\"v-4115de74#5/8\",\"4605\":\"v-4115de74#5/9\",\"4606\":\"v-4115de74#5/10\",\"4607\":\"v-4115de74#5/11\",\"4608\":\"v-4115de74#5/12\",\"4609\":\"v-4115de74#5/13\",\"4610\":\"v-4115de74#6\",\"4611\":\"v-4115de74#6/0\",\"4612\":\"v-4115de74#6/1\",\"4613\":\"v-4115de74#6/2\",\"4614\":\"v-4115de74#6/3\",\"4615\":\"v-4115de74#6/4\",\"4616\":\"v-4115de74#6/5\",\"4617\":\"v-4115de74#6/6\",\"4618\":\"v-4115de74#6/7\",\"4619\":\"v-4115de74#6/8\",\"4620\":\"v-4115de74#6/9\",\"4621\":\"v-4115de74#6/10\",\"4622\":\"v-4115de74#6/11\",\"4623\":\"v-4115de74#6/12\",\"4624\":\"v-4115de74#6/13\",\"4625\":\"v-4115de74#6/14\",\"4626\":\"v-4115de74#7\",\"4627\":\"v-4115de74#7/0\",\"4628\":\"v-4115de74#7/1\",\"4629\":\"v-4115de74#7/2\",\"4630\":\"v-4115de74#7/3\",\"4631\":\"v-4115de74#8\",\"4632\":\"v-4115de74#8/0\",\"4633\":\"v-4115de74#8/1\",\"4634\":\"v-4115de74#8/2\",\"4635\":\"v-4115de74#8/3\",\"4636\":\"v-4115de74#8/4\",\"4637\":\"v-4115de74#8/5\",\"4638\":\"v-4115de74#8/6\",\"4639\":\"v-4115de74#8/7\",\"4640\":\"v-4115de74#9\",\"4641\":\"v-4115de74#9/0\",\"4642\":\"v-4115de74#9/1\",\"4643\":\"v-4115de74#9/2\",\"4644\":\"v-4115de74#9/3\",\"4645\":\"v-4115de74#9/4\",\"4646\":\"v-4115de74#9/5\",\"4647\":\"v-4115de74#9/6\",\"4648\":\"v-4115de74#9/7\",\"4649\":\"v-4115de74#10\",\"4650\":\"v-4115de74#10/0\",\"4651\":\"v-4115de74#10/1\",\"4652\":\"v-4115de74#10/2\",\"4653\":\"v-4115de74#10/3\",\"4654\":\"v-4115de74#10/4\",\"4655\":\"v-4115de74#10/5\",\"4656\":\"v-4115de74#10/6\",\"4657\":\"v-4115de74#11\",\"4658\":\"v-4115de74#11/0\",\"4659\":\"v-4115de74#11/1\",\"4660\":\"v-4115de74#11/2\",\"4661\":\"v-4115de74#12\",\"4662\":\"v-4115de74#12/0\",\"4663\":\"v-4115de74#12/1\",\"4664\":\"v-4115de74#12/2\",\"4665\":\"v-4115de74#12/3\",\"4666\":\"v-4115de74#12/4\",\"4667\":\"v-4115de74#13\",\"4668\":\"v-4115de74#13/0\",\"4669\":\"v-4115de74#13/1\",\"4670\":\"v-4115de74#13/2\",\"4671\":\"v-4115de74#13/3\",\"4672\":\"v-4115de74#13/4\",\"4673\":\"v-4115de74#13/5\",\"4674\":\"v-4115de74#13/6\",\"4675\":\"v-4115de74#13/7\",\"4676\":\"v-4115de74#13/8\",\"4677\":\"v-4115de74#13/9\",\"4678\":\"v-4115de74#13/10\",\"4679\":\"v-4115de74#13/11\",\"4680\":\"v-4115de74#13/12\",\"4681\":\"v-4115de74#13/13\",\"4682\":\"v-4115de74#13/14\",\"4683\":\"v-4115de74#13/15\",\"4684\":\"v-4115de74#13/16\",\"4685\":\"v-4115de74#13/17\",\"4686\":\"v-4115de74#13/18\",\"4687\":\"v-4115de74#13/19\",\"4688\":\"v-4115de74#13/20\",\"4689\":\"v-4115de74#13/21\",\"4690\":\"v-4115de74#13/22\",\"4691\":\"v-4115de74#13/23\",\"4692\":\"v-4115de74#13/24\",\"4693\":\"v-4115de74#13/25\",\"4694\":\"v-4115de74#14\",\"4695\":\"v-4115de74#14/0\",\"4696\":\"v-4115de74#14/1\",\"4697\":\"v-4115de74#15\",\"4698\":\"v-4115de74#15/0\",\"4699\":\"v-4115de74#15/1\",\"4700\":\"v-4115de74#15/2\",\"4701\":\"v-4115de74#15/3\",\"4702\":\"v-4115de74#15/4\",\"4703\":\"v-4115de74#15/5\",\"4704\":\"v-4115de74#15/6\",\"4705\":\"v-4115de74#15/7\",\"4706\":\"v-4115de74#15/8\",\"4707\":\"v-4115de74#15/9\",\"4708\":\"v-4115de74#15/10\",\"4709\":\"v-4115de74#15/11\",\"4710\":\"v-4115de74#15/12\",\"4711\":\"v-4115de74#15/13\",\"4712\":\"v-4115de74#15/14\",\"4713\":\"v-4115de74#15/15\",\"4714\":\"v-4115de74#15/16\",\"4715\":\"v-4115de74#15/17\",\"4716\":\"v-4115de74#16\",\"4717\":\"v-4115de74#16/0\",\"4718\":\"v-4115de74#16/1\",\"4719\":\"v-4115de74#16/2\",\"4720\":\"v-4115de74#16/3\",\"4721\":\"v-4115de74#16/4\",\"4722\":\"v-4115de74#17\",\"4723\":\"v-4115de74#17/0\",\"4724\":\"v-4115de74#17/1\",\"4725\":\"v-4115de74#17/2\",\"4726\":\"v-4115de74#17/3\",\"4727\":\"v-4115de74#17/4\",\"4728\":\"v-4115de74#17/5\",\"4729\":\"v-4115de74#17/6\",\"4730\":\"v-4115de74#17/7\",\"4731\":\"v-4115de74#17/8\",\"4732\":\"v-4115de74#18\",\"4733\":\"v-4115de74#18/0\",\"4734\":\"v-4115de74#18/1\",\"4735\":\"v-4115de74#18/2\",\"4736\":\"v-4115de74#18/3\",\"4737\":\"v-4115de74#18/4\",\"4738\":\"v-4115de74#18/5\",\"4739\":\"v-4115de74#18/6\",\"4740\":\"v-4115de74#18/7\",\"4741\":\"v-4115de74#18/8\",\"4742\":\"v-4115de74#18/9\",\"4743\":\"v-4115de74#18/10\",\"4744\":\"v-4115de74#18/11\",\"4745\":\"v-4115de74#18/12\",\"4746\":\"v-4115de74#18/13\",\"4747\":\"v-4115de74#18/14\",\"4748\":\"v-4115de74#18/15\",\"4749\":\"v-4115de74#18/16\",\"4750\":\"v-4115de74#19\",\"4751\":\"v-4115de74#19/0\",\"4752\":\"v-4115de74#19/1\",\"4753\":\"v-4115de74#19/2\",\"4754\":\"v-4115de74#19/3\",\"4755\":\"v-4115de74#19/4\",\"4756\":\"v-4115de74#19/5\",\"4757\":\"v-4115de74#19/6\",\"4758\":\"v-4115de74#19/7\",\"4759\":\"v-4115de74#19/8\",\"4760\":\"v-4115de74#19/9\",\"4761\":\"v-4115de74#19/10\",\"4762\":\"v-4115de74#19/11\",\"4763\":\"v-4115de74#20\",\"4764\":\"v-4115de74#20/0\",\"4765\":\"v-4115de74#20/1\",\"4766\":\"v-4115de74#20/2\",\"4767\":\"v-4115de74#20/3\",\"4768\":\"v-4115de74#20/4\",\"4769\":\"v-4115de74#20/5\",\"4770\":\"v-4115de74#20/6\",\"4771\":\"v-4115de74#20/7\",\"4772\":\"v-4115de74#20/8\",\"4773\":\"v-4115de74#20/9\",\"4774\":\"v-4115de74#20/10\",\"4775\":\"v-4115de74#20/11\",\"4776\":\"v-4115de74#20/12\",\"4777\":\"v-4115de74#20/13\",\"4778\":\"v-4115de74#20/14\",\"4779\":\"v-4115de74#20/15\",\"4780\":\"v-4115de74#20/16\",\"4781\":\"v-4115de74#21\",\"4782\":\"v-4115de74#21/0\",\"4783\":\"v-4115de74#21/1\",\"4784\":\"v-4115de74#21/2\",\"4785\":\"v-4115de74#21/3\",\"4786\":\"v-4115de74#21/4\",\"4787\":\"v-4115de74#21/5\",\"4788\":\"v-4115de74#21/6\",\"4789\":\"v-4115de74#21/7\",\"4790\":\"v-4115de74#21/8\",\"4791\":\"v-4115de74#21/9\",\"4792\":\"v-4115de74#22\",\"4793\":\"v-4115de74#22/0\",\"4794\":\"v-4115de74#22/1\",\"4795\":\"v-4115de74#22/2\",\"4796\":\"v-4115de74#23\",\"4797\":\"v-4115de74#23/0\",\"4798\":\"v-4115de74#23/1\",\"4799\":\"v-4115de74#23/2\",\"4800\":\"v-4115de74#24\",\"4801\":\"v-4115de74#24/0\",\"4802\":\"v-4115de74#24/1\",\"4803\":\"v-4115de74#24/2\",\"4804\":\"v-4115de74#24/3\",\"4805\":\"v-4115de74#24/4\",\"4806\":\"v-4115de74#25\",\"4807\":\"v-4115de74#25/0\",\"4808\":\"v-4115de74#25/1\",\"4809\":\"v-4115de74#25/2\",\"4810\":\"v-4115de74#25/3\",\"4811\":\"v-4115de74#25/4\",\"4812\":\"v-4115de74#26\",\"4813\":\"v-4115de74#26/0\",\"4814\":\"v-4115de74#26/1\",\"4815\":\"v-4115de74#26/2\",\"4816\":\"v-4115de74#26/3\",\"4817\":\"v-4115de74#26/4\",\"4818\":\"v-4115de74#26/5\",\"4819\":\"v-4115de74#26/6\",\"4820\":\"v-4115de74#26/7\",\"4821\":\"v-4115de74#26/8\",\"4822\":\"v-4115de74#26/9\",\"4823\":\"v-4115de74#26/10\",\"4824\":\"v-4115de74#26/11\",\"4825\":\"v-4115de74#27\",\"4826\":\"v-4115de74#27/0\",\"4827\":\"v-4115de74#27/1\",\"4828\":\"v-4115de74#27/2\",\"4829\":\"v-4115de74#27/3\",\"4830\":\"v-4115de74#28\",\"4831\":\"v-4115de74#28/0\",\"4832\":\"v-4115de74#28/1\",\"4833\":\"v-4115de74#28/2\",\"4834\":\"v-4115de74#29\",\"4835\":\"v-4115de74#29/0\",\"4836\":\"v-4115de74#29/1\",\"4837\":\"v-4115de74#29/2\",\"4838\":\"v-4115de74#29/3\",\"4839\":\"v-4115de74#29/4\",\"4840\":\"v-4115de74#30\",\"4841\":\"v-4115de74#30/0\",\"4842\":\"v-4115de74#30/1\",\"4843\":\"v-4115de74#30/2\",\"4844\":\"v-4115de74#30/3\",\"4845\":\"v-4115de74#30/4\",\"4846\":\"v-4115de74#30/5\",\"4847\":\"v-4115de74#30/6\",\"4848\":\"v-4115de74#30/7\",\"4849\":\"v-4115de74#30/8\",\"4850\":\"v-4115de74#30/9\",\"4851\":\"v-4115de74#30/10\",\"4852\":\"v-4115de74#30/11\",\"4853\":\"v-4115de74#30/12\",\"4854\":\"v-4115de74#30/13\",\"4855\":\"v-4115de74#30/14\",\"4856\":\"v-4115de74#30/15\",\"4857\":\"v-4115de74#30/16\",\"4858\":\"v-4115de74#30/17\",\"4859\":\"v-4115de74#30/18\",\"4860\":\"v-4115de74#30/19\",\"4861\":\"v-4115de74#30/20\",\"4862\":\"v-4115de74#30/21\",\"4863\":\"v-4115de74#31\",\"4864\":\"v-4115de74#31/0\",\"4865\":\"v-4115de74#31/1\",\"4866\":\"v-4115de74#31/2\",\"4867\":\"v-4115de74#31/3\",\"4868\":\"v-4115de74#31/4\",\"4869\":\"v-4115de74#31/5\",\"4870\":\"v-4115de74#31/6\",\"4871\":\"v-4115de74#31/7\",\"4872\":\"v-4115de74#31/8\",\"4873\":\"v-4115de74#31/9\",\"4874\":\"v-4115de74#31/10\",\"4875\":\"v-4115de74#31/11\",\"4876\":\"v-4115de74#31/12\",\"4877\":\"v-4115de74#31/13\",\"4878\":\"v-4115de74#32\",\"4879\":\"v-4115de74#32/0\",\"4880\":\"v-4115de74#32/1\",\"4881\":\"v-4115de74#32/2\",\"4882\":\"v-4115de74#32/3\",\"4883\":\"v-4115de74#32/4\",\"4884\":\"v-4115de74#33\",\"4885\":\"v-4115de74#33/0\",\"4886\":\"v-4115de74#33/1\",\"4887\":\"v-4115de74#33/2\",\"4888\":\"v-4115de74#34\",\"4889\":\"v-4115de74#35\",\"4890\":\"v-4115de74#35/0\",\"4891\":\"v-4115de74#36\",\"4892\":\"v-4115de74#36/0\",\"4893\":\"v-4115de74#36/1\",\"4894\":\"v-4115de74#37\",\"4895\":\"v-4115de74#37/0\",\"4896\":\"v-4115de74#38\",\"4897\":\"v-4115de74#38/0\",\"4898\":\"v-4115de74#38/1\",\"4899\":\"v-4115de74#38/2\",\"4900\":\"v-4115de74#38/3\",\"4901\":\"v-4115de74#39\",\"4902\":\"v-4115de74#39/0\",\"4903\":\"v-4115de74#40\",\"4904\":\"v-4115de74#40/0\",\"4905\":\"v-4115de74#41\",\"4906\":\"v-4115de74#41/0\",\"4907\":\"v-4115de74#42\",\"4908\":\"v-4115de74#43\",\"4909\":\"v-4115de74#43/0\",\"4910\":\"v-4115de74#43/1\",\"4911\":\"v-4115de74#43/2\",\"4912\":\"v-4115de74#44\",\"4913\":\"v-4115de74#44/0\",\"4914\":\"v-4115de74#44/1\",\"4915\":\"v-e17a1dca\",\"4916\":\"v-e17a1dca#1\",\"4917\":\"v-e17a1dca#2\",\"4918\":\"v-e17a1dca#2/0\",\"4919\":\"v-e17a1dca#2/1\",\"4920\":\"v-e17a1dca#2/2\",\"4921\":\"v-e17a1dca#2/3\",\"4922\":\"v-e17a1dca#3\",\"4923\":\"v-e17a1dca#3/0\",\"4924\":\"v-e17a1dca#3/1\",\"4925\":\"v-e17a1dca#4\",\"4926\":\"v-e17a1dca#5\",\"4927\":\"v-e17a1dca#6\",\"4928\":\"v-e17a1dca#6/0\",\"4929\":\"v-e17a1dca#6/1\",\"4930\":\"v-e17a1dca#6/2\",\"4931\":\"v-e17a1dca#6/3\",\"4932\":\"v-e17a1dca#6/4\",\"4933\":\"v-e17a1dca#7\",\"4934\":\"v-e17a1dca#7/0\",\"4935\":\"v-e17a1dca#7/1\",\"4936\":\"v-e17a1dca#7/2\",\"4937\":\"v-e17a1dca#8\",\"4938\":\"v-e17a1dca#9\",\"4939\":\"v-e17a1dca#9/0\",\"4940\":\"v-e17a1dca#9/1\",\"4941\":\"v-e17a1dca#9/2\",\"4942\":\"v-e17a1dca#9/3\",\"4943\":\"v-e17a1dca#10\",\"4944\":\"v-e17a1dca#10/0\",\"4945\":\"v-e17a1dca#11\",\"4946\":\"v-e17a1dca#12\",\"4947\":\"v-e17a1dca#12/0\",\"4948\":\"v-e17a1dca#12/1\",\"4949\":\"v-e17a1dca#12/2\",\"4950\":\"v-e17a1dca#13\",\"4951\":\"v-e17a1dca#13/0\",\"4952\":\"v-e17a1dca#14\",\"4953\":\"v-e17a1dca#15\",\"4954\":\"v-e17a1dca#15/0\",\"4955\":\"v-e17a1dca#15/1\",\"4956\":\"v-e17a1dca#15/2\",\"4957\":\"v-e17a1dca#15/3\",\"4958\":\"v-e17a1dca#16\",\"4959\":\"v-e17a1dca#16/0\",\"4960\":\"v-e17a1dca#17\",\"4961\":\"v-e17a1dca#18\",\"4962\":\"v-e17a1dca#18/0\",\"4963\":\"v-e17a1dca#18/1\",\"4964\":\"v-e17a1dca#18/2\",\"4965\":\"v-e17a1dca#18/3\",\"4966\":\"v-e17a1dca#19\",\"4967\":\"v-e17a1dca#19/0\",\"4968\":\"v-e17a1dca#20\",\"4969\":\"v-e17a1dca#20/0\",\"4970\":\"v-e17a1dca#20/1\",\"4971\":\"v-e17a1dca#20/2\",\"4972\":\"v-e17a1dca#20/3\",\"4973\":\"v-e17a1dca#21\",\"4974\":\"v-e17a1dca#21/0\",\"4975\":\"v-e17a1dca#21/1\",\"4976\":\"v-e17a1dca#21/2\",\"4977\":\"v-e17a1dca#22\",\"4978\":\"v-e17a1dca#22/3\",\"4979\":\"v-e17a1dca#22/4\",\"4980\":\"v-e17a1dca#22/5\",\"4981\":\"v-e17a1dca#23\",\"4982\":\"v-e17a1dca#23/0\",\"4983\":\"v-e17a1dca#23/1\",\"4984\":\"v-e17a1dca#23/2\",\"4985\":\"v-e17a1dca#23/3\",\"4986\":\"v-e17a1dca#23/4\",\"4987\":\"v-e17a1dca#24\",\"4988\":\"v-e17a1dca#24/0\",\"4989\":\"v-e17a1dca#24/1\",\"4990\":\"v-e17a1dca#24/2\",\"4991\":\"v-e17a1dca#24/3\",\"4992\":\"v-e17a1dca#24/4\",\"4993\":\"v-e17a1dca#24/5\",\"4994\":\"v-e17a1dca#24/6\",\"4995\":\"v-e17a1dca#24/7\",\"4996\":\"v-e17a1dca#24/8\",\"4997\":\"v-e17a1dca#24/9\",\"4998\":\"v-e17a1dca#24/10\",\"4999\":\"v-e17a1dca#24/11\",\"5000\":\"v-e17a1dca#25\",\"5001\":\"v-e17a1dca#26\",\"5002\":\"v-e17a1dca#26/0\",\"5003\":\"v-e17a1dca#26/1\",\"5004\":\"v-e17a1dca#26/2\",\"5005\":\"v-e17a1dca#26/3\",\"5006\":\"v-e17a1dca#26/4\",\"5007\":\"v-e17a1dca#26/5\",\"5008\":\"v-e17a1dca#26/6\",\"5009\":\"v-e17a1dca#27\",\"5010\":\"v-e17a1dca#27/0\",\"5011\":\"v-e17a1dca#27/1\",\"5012\":\"v-e17a1dca#27/2\",\"5013\":\"v-e17a1dca#27/3\",\"5014\":\"v-e17a1dca#27/4\",\"5015\":\"v-e17a1dca#27/5\",\"5016\":\"v-e17a1dca#27/6\",\"5017\":\"v-e17a1dca#27/7\",\"5018\":\"v-e17a1dca#27/8\",\"5019\":\"v-e17a1dca#27/9\",\"5020\":\"v-e17a1dca#27/10\",\"5021\":\"v-e17a1dca#28\",\"5022\":\"v-e17a1dca#29\",\"5023\":\"v-e17a1dca#30\",\"5024\":\"v-e17a1dca#31\",\"5025\":\"v-e17a1dca#31/0\",\"5026\":\"v-e17a1dca#32\",\"5027\":\"v-e17a1dca#32/0\",\"5028\":\"v-e17a1dca#32/1\",\"5029\":\"v-e17a1dca#32/2\",\"5030\":\"v-e17a1dca#32/3\",\"5031\":\"v-e17a1dca#32/4\",\"5032\":\"v-e17a1dca#32/5\",\"5033\":\"v-e17a1dca#32/6\",\"5034\":\"v-e17a1dca#32/7\",\"5035\":\"v-e17a1dca#32/8\",\"5036\":\"v-e17a1dca#32/9\",\"5037\":\"v-e17a1dca#32/10\",\"5038\":\"v-e17a1dca#32/11\",\"5039\":\"v-e17a1dca#32/12\",\"5040\":\"v-e17a1dca#32/13\",\"5041\":\"v-e17a1dca#32/14\",\"5042\":\"v-e17a1dca#33\",\"5043\":\"v-e17a1dca#33/0\",\"5044\":\"v-e17a1dca#34\",\"5045\":\"v-e17a1dca#34/0\",\"5046\":\"v-e17a1dca#34/1\",\"5047\":\"v-e17a1dca#34/2\",\"5048\":\"v-e17a1dca#35\",\"5049\":\"v-e17a1dca#35/0\",\"5050\":\"v-e17a1dca#35/1\",\"5051\":\"v-e17a1dca#36\",\"5052\":\"v-e17a1dca#36/0\",\"5053\":\"v-e17a1dca#36/1\",\"5054\":\"v-e17a1dca#36/2\",\"5055\":\"v-e17a1dca#37\",\"5056\":\"v-e17a1dca#37/0\",\"5057\":\"v-e17a1dca#37/1\",\"5058\":\"v-e17a1dca#37/2\",\"5059\":\"v-e17a1dca#37/3\",\"5060\":\"v-e17a1dca#37/4\",\"5061\":\"v-e17a1dca#37/5\",\"5062\":\"v-e17a1dca#37/6\",\"5063\":\"v-e17a1dca#38\",\"5064\":\"v-e17a1dca#38/0\",\"5065\":\"v-e17a1dca#39\",\"5066\":\"v-e17a1dca#39/0\",\"5067\":\"v-6c315fa0\",\"5068\":\"v-6c315fa0#1\",\"5069\":\"v-6c315fa0#1/0\",\"5070\":\"v-6c315fa0#1/1\",\"5071\":\"v-6c315fa0#1/2\",\"5072\":\"v-6c315fa0#1/3\",\"5073\":\"v-6c315fa0#1/4\",\"5074\":\"v-6c315fa0#1/5\",\"5075\":\"v-6c315fa0#1/6\",\"5076\":\"v-6c315fa0#1/7\",\"5077\":\"v-6c315fa0#2\",\"5078\":\"v-6c315fa0#3\",\"5079\":\"v-6c315fa0#3/0\",\"5080\":\"v-6c315fa0#3/1\",\"5081\":\"v-6c315fa0#3/2\",\"5082\":\"v-6c315fa0#3/3\",\"5083\":\"v-6c315fa0#3/4\",\"5084\":\"v-6c315fa0#3/5\",\"5085\":\"v-6c315fa0#3/6\",\"5086\":\"v-6c315fa0#3/7\",\"5087\":\"v-6c315fa0#3/8\",\"5088\":\"v-6c315fa0#4\",\"5089\":\"v-6c315fa0#4/9\",\"5090\":\"v-6c315fa0#4/10\",\"5091\":\"v-6c315fa0#4/11\",\"5092\":\"v-6c315fa0#4/12\",\"5093\":\"v-6c315fa0#4/13\",\"5094\":\"v-6c315fa0#4/14\",\"5095\":\"v-6c315fa0#4/15\",\"5096\":\"v-6c315fa0#4/16\",\"5097\":\"v-6c315fa0#4/17\",\"5098\":\"v-6c315fa0#4/18\",\"5099\":\"v-6c315fa0#4/19\",\"5100\":\"v-6c315fa0#4/20\",\"5101\":\"v-6c315fa0#4/21\",\"5102\":\"v-6c315fa0#4/22\",\"5103\":\"v-6c315fa0#4/23\",\"5104\":\"v-6c315fa0#4/24\",\"5105\":\"v-6c315fa0#4/25\",\"5106\":\"v-6c315fa0#4/26\",\"5107\":\"v-6c315fa0#4/27\",\"5108\":\"v-6c315fa0#4/28\",\"5109\":\"v-6c315fa0#4/29\",\"5110\":\"v-6c315fa0#4/30\",\"5111\":\"v-6c315fa0#4/31\",\"5112\":\"v-6c315fa0#4/32\",\"5113\":\"v-6c315fa0#4/33\",\"5114\":\"v-6c315fa0#4/34\",\"5115\":\"v-6c315fa0#4/35\",\"5116\":\"v-6c315fa0#4/36\",\"5117\":\"v-6c315fa0#4/37\",\"5118\":\"v-6c315fa0#4/38\",\"5119\":\"v-6c315fa0#4/39\",\"5120\":\"v-6c315fa0#5\",\"5121\":\"v-6c315fa0#6\",\"5122\":\"v-6c315fa0#6/0\",\"5123\":\"v-6c315fa0#7\",\"5124\":\"v-6c315fa0#7/0\",\"5125\":\"v-6c315fa0#7/1\",\"5126\":\"v-6c315fa0#7/2\",\"5127\":\"v-6c315fa0#7/3\",\"5128\":\"v-6c315fa0#7/4\",\"5129\":\"v-6c315fa0#8\",\"5130\":\"v-6c315fa0#9\",\"5131\":\"v-6c315fa0#9/0\",\"5132\":\"v-6c315fa0#10\",\"5133\":\"v-6c315fa0#10/0\",\"5134\":\"v-6c315fa0#10/1\",\"5135\":\"v-6c315fa0#10/2\",\"5136\":\"v-6c315fa0#10/3\",\"5137\":\"v-6c315fa0#11\",\"5138\":\"v-6c315fa0#11/0\",\"5139\":\"v-6c315fa0#11/1\",\"5140\":\"v-6c315fa0#11/2\",\"5141\":\"v-6c315fa0#11/3\",\"5142\":\"v-6c315fa0#11/4\",\"5143\":\"v-359680c8\",\"5144\":\"v-359680c8#0/0\",\"5145\":\"v-359680c8#0/1\",\"5146\":\"v-359680c8#0/2\",\"5147\":\"v-359680c8#1\",\"5148\":\"v-359680c8#2\",\"5149\":\"v-359680c8#2/0\",\"5150\":\"v-359680c8#2/1\",\"5151\":\"v-359680c8#2/2\",\"5152\":\"v-359680c8#2/3\",\"5153\":\"v-359680c8#2/4\",\"5154\":\"v-359680c8#3\",\"5155\":\"v-359680c8#3/0\",\"5156\":\"v-359680c8#3/1\",\"5157\":\"v-359680c8#3/2\",\"5158\":\"v-359680c8#3/3\",\"5159\":\"v-359680c8#4\",\"5160\":\"v-359680c8#4/0\",\"5161\":\"v-359680c8#5\",\"5162\":\"v-359680c8#5/0\",\"5163\":\"v-359680c8#6\",\"5164\":\"v-359680c8#6/0\",\"5165\":\"v-359680c8#6/1\",\"5166\":\"v-359680c8#6/2\",\"5167\":\"v-359680c8#6/3\",\"5168\":\"v-76002cf8\",\"5169\":\"v-76002cf8#0/0\",\"5170\":\"v-76002cf8#0/1\",\"5171\":\"v-76002cf8#1\",\"5172\":\"v-76002cf8#1/0\",\"5173\":\"v-76002cf8#1/1\",\"5174\":\"v-76002cf8#1/2\",\"5175\":\"v-76002cf8#1/3\",\"5176\":\"v-76002cf8#1/4\",\"5177\":\"v-76002cf8#2\",\"5178\":\"v-76002cf8#2/0\",\"5179\":\"v-76002cf8#2/1\",\"5180\":\"v-27b3dbbc\",\"5181\":\"v-27b3dbbc#1\",\"5182\":\"v-27b3dbbc#1/0\",\"5183\":\"v-27b3dbbc#1/1\",\"5184\":\"v-27b3dbbc#1/2\",\"5185\":\"v-27b3dbbc#1/3\",\"5186\":\"v-27b3dbbc#1/4\",\"5187\":\"v-27b3dbbc#1/5\",\"5188\":\"v-27b3dbbc#1/6\",\"5189\":\"v-27b3dbbc#1/7\",\"5190\":\"v-27b3dbbc#1/8\",\"5191\":\"v-27b3dbbc#2\",\"5192\":\"v-27b3dbbc#2/0\",\"5193\":\"v-27b3dbbc#3\",\"5194\":\"v-27b3dbbc#3/0\",\"5195\":\"v-27b3dbbc#4\",\"5196\":\"v-27b3dbbc#5\",\"5197\":\"v-27b3dbbc#6\",\"5198\":\"v-27b3dbbc#7\",\"5199\":\"v-27b3dbbc#7/0\",\"5200\":\"v-27b3dbbc#7/1\",\"5201\":\"v-27b3dbbc#7/2\",\"5202\":\"v-27b3dbbc#7/3\",\"5203\":\"v-27b3dbbc#7/4\",\"5204\":\"v-27b3dbbc#7/5\",\"5205\":\"v-27b3dbbc#8\",\"5206\":\"v-27b3dbbc#8/0\",\"5207\":\"v-27b3dbbc#8/1\",\"5208\":\"v-27b3dbbc#8/2\",\"5209\":\"v-27b3dbbc#8/3\",\"5210\":\"v-27b3dbbc#8/4\",\"5211\":\"v-27b3dbbc#8/5\",\"5212\":\"v-27b3dbbc#8/6\",\"5213\":\"v-27b3dbbc#8/7\",\"5214\":\"v-27b3dbbc#8/8\",\"5215\":\"v-27b3dbbc#8/9\",\"5216\":\"v-27b3dbbc#8/10\",\"5217\":\"v-27b3dbbc#9\",\"5218\":\"v-27b3dbbc#9/0\",\"5219\":\"v-27b3dbbc#9/1\",\"5220\":\"v-27b3dbbc#9/2\",\"5221\":\"v-27b3dbbc#9/3\",\"5222\":\"v-27b3dbbc#9/4\",\"5223\":\"v-27b3dbbc#9/5\",\"5224\":\"v-27b3dbbc#9/6\",\"5225\":\"v-27b3dbbc#9/7\",\"5226\":\"v-27b3dbbc#9/8\",\"5227\":\"v-27b3dbbc#9/9\",\"5228\":\"v-27b3dbbc#9/10\",\"5229\":\"v-27b3dbbc#10\",\"5230\":\"v-27b3dbbc#11\",\"5231\":\"v-27b3dbbc#11/0\",\"5232\":\"v-27b3dbbc#11/1\",\"5233\":\"v-27b3dbbc#12\",\"5234\":\"v-27b3dbbc#12/0\",\"5235\":\"v-27b3dbbc#12/1\",\"5236\":\"v-27b3dbbc#12/2\",\"5237\":\"v-27b3dbbc#12/3\",\"5238\":\"v-27b3dbbc#13\",\"5239\":\"v-27b3dbbc#13/0\",\"5240\":\"v-27b3dbbc#13/1\",\"5241\":\"v-27b3dbbc#13/2\",\"5242\":\"v-27b3dbbc#13/3\",\"5243\":\"v-27b3dbbc#14\",\"5244\":\"v-27b3dbbc#14/0\",\"5245\":\"v-27b3dbbc#14/1\",\"5246\":\"v-27b3dbbc#14/2\",\"5247\":\"v-27b3dbbc#15\",\"5248\":\"v-27b3dbbc#16\",\"5249\":\"v-27b3dbbc#16/0\",\"5250\":\"v-27b3dbbc#16/1\",\"5251\":\"v-27b3dbbc#16/2\",\"5252\":\"v-27b3dbbc#16/3\",\"5253\":\"v-27b3dbbc#17\",\"5254\":\"v-27b3dbbc#17/0\",\"5255\":\"v-27b3dbbc#17/1\",\"5256\":\"v-27b3dbbc#17/2\",\"5257\":\"v-27b3dbbc#17/3\",\"5258\":\"v-27b3dbbc#17/4\",\"5259\":\"v-27b3dbbc#17/5\",\"5260\":\"v-27b3dbbc#17/6\",\"5261\":\"v-27b3dbbc#17/7\",\"5262\":\"v-27b3dbbc#17/8\",\"5263\":\"v-27b3dbbc#17/9\",\"5264\":\"v-27b3dbbc#17/10\",\"5265\":\"v-27b3dbbc#18\",\"5266\":\"v-27b3dbbc#18/0\",\"5267\":\"v-27b3dbbc#18/1\",\"5268\":\"v-27b3dbbc#18/2\",\"5269\":\"v-27b3dbbc#18/3\",\"5270\":\"v-27b3dbbc#18/4\",\"5271\":\"v-27b3dbbc#18/5\",\"5272\":\"v-27b3dbbc#18/6\",\"5273\":\"v-27b3dbbc#18/7\",\"5274\":\"v-09033722\",\"5275\":\"v-09033722#1\",\"5276\":\"v-09033722#2\",\"5277\":\"v-09033722#3\",\"5278\":\"v-09033722#3/0\",\"5279\":\"v-09033722#3/1\",\"5280\":\"v-09033722#3/2\",\"5281\":\"v-09033722#3/3\",\"5282\":\"v-09033722#3/4\",\"5283\":\"v-09033722#3/5\",\"5284\":\"v-09033722#4\",\"5285\":\"v-09033722#4/0\",\"5286\":\"v-09033722#4/1\",\"5287\":\"v-09033722#4/2\",\"5288\":\"v-09033722#4/3\",\"5289\":\"v-09033722#4/4\",\"5290\":\"v-09033722#4/5\",\"5291\":\"v-09033722#4/6\",\"5292\":\"v-09033722#4/7\",\"5293\":\"v-09033722#4/8\",\"5294\":\"v-09033722#4/9\",\"5295\":\"v-09033722#4/10\",\"5296\":\"v-09033722#4/11\",\"5297\":\"v-09033722#4/12\",\"5298\":\"v-09033722#4/13\",\"5299\":\"v-09033722#4/14\",\"5300\":\"v-09033722#4/15\",\"5301\":\"v-09033722#4/16\",\"5302\":\"v-09033722#4/17\",\"5303\":\"v-09033722#4/18\",\"5304\":\"v-09033722#4/19\",\"5305\":\"v-09033722#4/20\",\"5306\":\"v-09033722#5\",\"5307\":\"v-09033722#6\",\"5308\":\"v-09033722#6/0\",\"5309\":\"v-09033722#6/1\",\"5310\":\"v-09033722#6/2\",\"5311\":\"v-09033722#6/3\",\"5312\":\"v-09033722#6/4\",\"5313\":\"v-09033722#6/5\",\"5314\":\"v-09033722#6/6\",\"5315\":\"v-09033722#6/7\",\"5316\":\"v-09033722#6/8\",\"5317\":\"v-09033722#6/9\",\"5318\":\"v-09033722#6/10\",\"5319\":\"v-09033722#6/11\",\"5320\":\"v-09033722#6/12\",\"5321\":\"v-09033722#7\",\"5322\":\"v-09033722#8\",\"5323\":\"v-09033722#8/0\",\"5324\":\"v-09033722#8/1\",\"5325\":\"v-09033722#8/2\",\"5326\":\"v-09033722#8/3\",\"5327\":\"v-09033722#8/4\",\"5328\":\"v-09033722#8/5\",\"5329\":\"v-09033722#8/6\",\"5330\":\"v-09033722#8/7\",\"5331\":\"v-09033722#8/8\",\"5332\":\"v-09033722#8/9\",\"5333\":\"v-09033722#8/10\",\"5334\":\"v-09033722#8/11\",\"5335\":\"v-09033722#8/12\",\"5336\":\"v-09033722#8/13\",\"5337\":\"v-09033722#8/14\",\"5338\":\"v-09033722#8/15\",\"5339\":\"v-09033722#8/16\",\"5340\":\"v-09033722#8/17\",\"5341\":\"v-09033722#8/18\",\"5342\":\"v-09033722#8/19\",\"5343\":\"v-09033722#8/20\",\"5344\":\"v-f9616996\",\"5345\":\"v-f9616996#1\",\"5346\":\"v-f9616996#1/0\",\"5347\":\"v-f9616996#1/1\",\"5348\":\"v-f9616996#1/2\",\"5349\":\"v-f9616996#1/3\",\"5350\":\"v-f9616996#1/4\",\"5351\":\"v-f9616996#1/5\",\"5352\":\"v-f9616996#1/6\",\"5353\":\"v-f9616996#1/7\",\"5354\":\"v-f9616996#1/8\",\"5355\":\"v-f9616996#1/9\",\"5356\":\"v-f9616996#1/10\",\"5357\":\"v-f9616996#1/11\",\"5358\":\"v-f9616996#1/12\",\"5359\":\"v-f9616996#2\",\"5360\":\"v-f9616996#3\",\"5361\":\"v-f9616996#3/0\",\"5362\":\"v-f9616996#3/1\",\"5363\":\"v-f9616996#3/2\",\"5364\":\"v-f9616996#4\",\"5365\":\"v-f9616996#4/0\",\"5366\":\"v-f9616996#4/1\",\"5367\":\"v-f9616996#4/2\",\"5368\":\"v-f9616996#4/3\",\"5369\":\"v-f9616996#4/4\",\"5370\":\"v-f9616996#5\",\"5371\":\"v-f9616996#5/0\",\"5372\":\"v-f9616996#5/1\",\"5373\":\"v-f9616996#5/2\",\"5374\":\"v-f9616996#6\",\"5375\":\"v-f9616996#6/0\",\"5376\":\"v-f9616996#6/1\",\"5377\":\"v-f9616996#6/2\",\"5378\":\"v-f9616996#7\",\"5379\":\"v-f9616996#7/0\",\"5380\":\"v-f9616996#7/1\",\"5381\":\"v-f9616996#7/2\",\"5382\":\"v-f9616996#7/3\",\"5383\":\"v-f9616996#7/4\",\"5384\":\"v-f9616996#7/5\",\"5385\":\"v-f9616996#7/6\",\"5386\":\"v-f9616996#7/7\",\"5387\":\"v-f9616996#7/8\",\"5388\":\"v-f9616996#7/9\",\"5389\":\"v-f9616996#8\",\"5390\":\"v-f9616996#8/0\",\"5391\":\"v-f9616996#8/1\",\"5392\":\"v-f9616996#8/2\",\"5393\":\"v-f9616996#8/3\",\"5394\":\"v-f9616996#8/4\",\"5395\":\"v-f9616996#8/5\",\"5396\":\"v-f9616996#8/6\",\"5397\":\"v-f9616996#8/7\",\"5398\":\"v-f9616996#8/8\",\"5399\":\"v-f9616996#8/9\",\"5400\":\"v-f9616996#9\",\"5401\":\"v-f9616996#9/0\",\"5402\":\"v-f9616996#9/1\",\"5403\":\"v-f9616996#9/2\",\"5404\":\"v-f9616996#9/3\",\"5405\":\"v-f9616996#9/4\",\"5406\":\"v-f9616996#10\",\"5407\":\"v-f9616996#10/5\",\"5408\":\"v-f9616996#10/6\",\"5409\":\"v-f9616996#10/7\",\"5410\":\"v-f9616996#10/8\",\"5411\":\"v-f9616996#10/9\",\"5412\":\"v-f9616996#10/10\",\"5413\":\"v-f9616996#10/11\",\"5414\":\"v-f9616996#10/12\",\"5415\":\"v-f9616996#10/13\",\"5416\":\"v-f9616996#10/14\",\"5417\":\"v-f9616996#10/15\",\"5418\":\"v-f9616996#10/16\",\"5419\":\"v-f9616996#10/17\",\"5420\":\"v-f9616996#10/18\",\"5421\":\"v-f9616996#10/19\",\"5422\":\"v-f9616996#10/20\",\"5423\":\"v-f9616996#10/21\",\"5424\":\"v-f9616996#10/22\",\"5425\":\"v-f9616996#10/23\",\"5426\":\"v-f9616996#10/24\",\"5427\":\"v-f9616996#10/25\",\"5428\":\"v-f9616996#10/26\",\"5429\":\"v-f9616996#10/27\",\"5430\":\"v-f9616996#10/28\",\"5431\":\"v-f9616996#10/29\",\"5432\":\"v-f9616996#10/30\",\"5433\":\"v-f9616996#10/31\",\"5434\":\"v-f9616996#10/32\",\"5435\":\"v-f9616996#10/33\",\"5436\":\"v-f9616996#10/34\",\"5437\":\"v-f9616996#10/35\",\"5438\":\"v-f9616996#10/36\",\"5439\":\"v-f9616996#10/37\",\"5440\":\"v-f9616996#11\",\"5441\":\"v-f9616996#11/0\",\"5442\":\"v-f9616996#11/1\",\"5443\":\"v-f9616996#11/2\",\"5444\":\"v-f9616996#11/3\",\"5445\":\"v-f9616996#11/4\",\"5446\":\"v-f9616996#11/5\",\"5447\":\"v-f9616996#11/6\",\"5448\":\"v-f9616996#11/7\",\"5449\":\"v-f9616996#11/8\",\"5450\":\"v-f9616996#11/9\",\"5451\":\"v-f9616996#11/10\",\"5452\":\"v-f9616996#11/11\",\"5453\":\"v-f9616996#12\",\"5454\":\"v-f9616996#12/0\",\"5455\":\"v-f9616996#12/1\",\"5456\":\"v-f9616996#12/2\",\"5457\":\"v-f9616996#12/3\",\"5458\":\"v-f9616996#12/4\",\"5459\":\"v-f9616996#12/5\",\"5460\":\"v-f9616996#13\",\"5461\":\"v-f9616996#13/0\",\"5462\":\"v-306b7475\",\"5463\":\"v-0a98898e\",\"5464\":\"v-c6f23874\",\"5465\":\"v-74875e60\",\"5466\":\"v-70349e7c\",\"5467\":\"v-09d1fd44\",\"5468\":\"v-27255a3a\",\"5469\":\"v-e7ae8e10\",\"5470\":\"v-0500bc12\",\"5471\":\"v-03dc69cd\",\"5472\":\"v-5bc5daac\",\"5473\":\"v-96b8eb96\",\"5474\":\"v-43de1d46\",\"5475\":\"v-56c59726\",\"5476\":\"v-79528dfd\",\"5477\":\"v-2b17cb0a\",\"5478\":\"v-7f7c299a\",\"5479\":\"v-1c49167e\",\"5480\":\"v-d388c4dc\",\"5481\":\"v-c48b8372\",\"5482\":\"v-443c1136\",\"5483\":\"v-787e4606\",\"5484\":\"v-4694ee4d\",\"5485\":\"v-78c5c555\",\"5486\":\"v-3e7dbf32\",\"5487\":\"v-df4e5736\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2],\"1\":[1],\"2\":[1],\"3\":[null,2],\"4\":[null,1],\"5\":[null,1],\"6\":[null,1],\"7\":[1],\"8\":[null,4],\"9\":[null,3],\"10\":[null,1],\"11\":[null,1],\"12\":[null,1],\"13\":[null,1],\"14\":[null,1],\"15\":[null,1],\"16\":[null,1],\"17\":[null,3],\"18\":[null,1],\"19\":[null,1],\"20\":[null,1],\"21\":[1],\"22\":[null,2],\"23\":[null,5],\"24\":[null,5],\"25\":[2],\"26\":[null,7],\"27\":[null,7],\"28\":[2],\"29\":[null,8],\"30\":[2],\"31\":[null,7],\"32\":[null,1],\"33\":[null,8],\"34\":[2],\"35\":[null,11],\"36\":[2],\"37\":[null,6],\"38\":[null,7],\"39\":[1],\"40\":[null,10],\"41\":[1],\"42\":[null,5],\"43\":[null,1],\"44\":[null,6],\"45\":[null,5],\"46\":[null,1],\"47\":[null,1],\"48\":[null,1],\"49\":[null,1],\"50\":[null,1],\"51\":[null,1],\"52\":[null,1],\"53\":[null,1],\"54\":[null,1],\"55\":[1],\"56\":[null,1],\"57\":[1],\"58\":[null,2],\"59\":[null,1],\"60\":[1],\"61\":[null,1],\"62\":[null,1],\"63\":[null,1],\"64\":[1],\"65\":[null,5],\"66\":[null,1],\"67\":[1],\"68\":[null,3],\"69\":[null,1],\"70\":[1],\"71\":[null,3],\"72\":[null,1],\"73\":[1],\"74\":[null,3],\"75\":[null,3],\"76\":[null,1],\"77\":[1],\"78\":[null,1],\"79\":[null,1],\"80\":[1],\"81\":[null,23],\"82\":[null,1],\"83\":[1],\"84\":[null,1],\"85\":[1],\"86\":[null,1],\"87\":[1],\"88\":[null,1],\"89\":[1],\"90\":[null,1],\"91\":[2],\"92\":[null,10],\"93\":[null,1],\"94\":[1],\"95\":[null,2],\"96\":[null,1],\"97\":[null,1],\"98\":[null,1],\"99\":[null,1],\"100\":[1],\"101\":[null,1],\"102\":[1],\"103\":[null,5],\"104\":[null,1],\"105\":[1],\"106\":[null,1],\"107\":[2],\"108\":[null,1],\"109\":[1],\"110\":[null,1],\"111\":[null,2],\"112\":[1],\"113\":[null,3],\"114\":[1],\"115\":[null,6],\"116\":[null,4],\"117\":[null,6],\"118\":[null,3],\"119\":[null,5],\"120\":[1],\"121\":[null,3],\"122\":[null,1],\"123\":[null,6],\"124\":[null,7],\"125\":[null,2],\"126\":[null,4],\"127\":[1],\"128\":[null,2],\"129\":[null,1],\"130\":[null,1],\"131\":[null,3],\"132\":[null,2],\"133\":[null,1],\"134\":[null,1],\"135\":[null,1],\"136\":[null,1],\"137\":[null,1],\"138\":[null,4],\"139\":[1],\"140\":[1],\"141\":[1],\"142\":[null,1],\"143\":[null,1],\"144\":[1],\"145\":[null,1],\"146\":[null,1],\"147\":[1],\"148\":[null,3],\"149\":[null,8],\"150\":[null,3],\"151\":[1],\"152\":[null,3],\"153\":[null,8],\"154\":[null,3],\"155\":[1],\"156\":[2],\"157\":[1],\"158\":[null,4],\"159\":[1],\"160\":[null,1],\"161\":[null,1],\"162\":[1],\"163\":[null,2],\"164\":[2],\"165\":[1],\"166\":[null,4],\"167\":[1],\"168\":[null,1],\"169\":[null,1],\"170\":[1],\"171\":[null,2],\"172\":[1],\"173\":[2],\"174\":[1],\"175\":[5],\"176\":[null,3],\"177\":[null,5],\"178\":[null,4],\"179\":[null,4],\"180\":[null,26],\"181\":[3],\"182\":[1],\"183\":[2],\"184\":[1],\"185\":[1],\"186\":[1],\"187\":[1],\"188\":[null,22],\"189\":[null,4],\"190\":[null,1],\"191\":[1],\"192\":[null,5],\"193\":[null,11],\"194\":[null,1],\"195\":[1],\"196\":[2],\"197\":[null,3],\"198\":[null,5],\"199\":[null,8],\"200\":[null,13],\"201\":[1],\"202\":[null,8],\"203\":[null,11],\"204\":[1],\"205\":[null,4],\"206\":[null,23],\"207\":[null,14],\"208\":[null,9],\"209\":[null,12],\"210\":[null,4],\"211\":[null,3],\"212\":[null,20],\"213\":[null,8],\"214\":[null,4],\"215\":[null,15],\"216\":[null,10],\"217\":[null,12],\"218\":[null,1],\"219\":[1],\"220\":[null,5],\"221\":[null,3],\"222\":[null,3],\"223\":[null,4],\"224\":[null,6],\"225\":[null,1],\"226\":[null,11],\"227\":[null,61],\"228\":[null,5],\"229\":[null,3],\"230\":[null,6],\"231\":[null,11],\"232\":[null,8],\"233\":[null,2],\"234\":[null,12],\"235\":[2],\"236\":[2],\"237\":[3],\"238\":[null,4],\"239\":[null,5],\"240\":[null,5],\"241\":[null,1],\"242\":[null,12],\"243\":[null,8],\"244\":[null,3],\"245\":[null,9],\"246\":[8],\"247\":[null,3],\"248\":[null,8],\"249\":[null,10],\"250\":[null,3],\"251\":[null,5],\"252\":[3],\"253\":[null,3],\"254\":[null,15],\"255\":[null,10],\"256\":[null,3],\"257\":[null,5],\"258\":[null,17],\"259\":[8],\"260\":[null,13],\"261\":[null,24],\"262\":[null,2],\"263\":[null,44],\"264\":[null,8],\"265\":[2],\"266\":[null,7],\"267\":[null,6],\"268\":[null,3],\"269\":[null,25],\"270\":[3],\"271\":[null,9],\"272\":[null,11],\"273\":[null,3],\"274\":[null,35],\"275\":[null,6],\"276\":[null,5],\"277\":[null,2],\"278\":[null,2],\"279\":[null,2],\"280\":[null,2],\"281\":[2],\"282\":[4],\"283\":[null,7],\"284\":[null,2],\"285\":[null,2],\"286\":[null,10],\"287\":[null,5],\"288\":[null,4],\"289\":[null,10],\"290\":[null,7],\"291\":[null,19],\"292\":[null,5],\"293\":[null,3],\"294\":[null,3],\"295\":[null,9],\"296\":[null,2],\"297\":[null,16],\"298\":[null,10],\"299\":[null,3],\"300\":[null,13],\"301\":[3],\"302\":[null,7],\"303\":[null,5],\"304\":[null,6],\"305\":[null,12],\"306\":[null,6],\"307\":[null,9],\"308\":[null,9],\"309\":[3],\"310\":[null,5],\"311\":[null,12],\"312\":[null,10],\"313\":[null,4],\"314\":[null,16],\"315\":[null,13],\"316\":[null,8],\"317\":[3],\"318\":[null,4],\"319\":[null,15],\"320\":[null,4],\"321\":[null,18],\"322\":[null,4],\"323\":[null,17],\"324\":[null,1],\"325\":[null,20],\"326\":[null,10],\"327\":[2],\"328\":[null,1],\"329\":[null,8],\"330\":[null,1],\"331\":[null,7],\"332\":[2],\"333\":[null,4],\"334\":[null,7],\"335\":[null,8],\"336\":[null,6],\"337\":[null,5],\"338\":[2],\"339\":[null,11],\"340\":[null,3],\"341\":[null,7],\"342\":[null,7],\"343\":[null,5],\"344\":[null,10],\"345\":[null,3],\"346\":[null,7],\"347\":[2],\"348\":[null,4],\"349\":[null,7],\"350\":[null,4],\"351\":[null,4],\"352\":[null,16],\"353\":[null,9],\"354\":[2],\"355\":[null,5],\"356\":[null,4],\"357\":[null,6],\"358\":[null,9],\"359\":[null,4],\"360\":[2],\"361\":[2],\"362\":[null,4],\"363\":[null,10],\"364\":[null,7],\"365\":[2],\"366\":[null,8],\"367\":[null,24],\"368\":[2],\"369\":[null,9],\"370\":[3],\"371\":[null,4],\"372\":[null,4],\"373\":[null,3],\"374\":[null,4],\"375\":[null,12],\"376\":[3],\"377\":[null,4],\"378\":[null,6],\"379\":[null,9],\"380\":[null,13],\"381\":[null,5],\"382\":[null,9],\"383\":[2],\"384\":[2],\"385\":[null,5],\"386\":[null,6],\"387\":[null,3],\"388\":[null,9],\"389\":[null,8],\"390\":[3],\"391\":[null,3],\"392\":[null,11],\"393\":[null,3],\"394\":[null,2],\"395\":[null,4],\"396\":[null,1],\"397\":[null,2],\"398\":[null,13],\"399\":[null,3],\"400\":[null,5],\"401\":[null,4],\"402\":[null,14],\"403\":[null,5],\"404\":[4],\"405\":[null,10],\"406\":[null,28],\"407\":[null,5],\"408\":[null,4],\"409\":[null,6],\"410\":[null,6],\"411\":[null,24],\"412\":[null,7],\"413\":[null,12],\"414\":[null,1],\"415\":[null,6],\"416\":[4],\"417\":[null,7],\"418\":[null,3],\"419\":[null,7],\"420\":[null,6],\"421\":[null,13],\"422\":[null,8],\"423\":[null,2],\"424\":[null,42],\"425\":[null,2],\"426\":[null,12],\"427\":[null,3],\"428\":[null,1],\"429\":[null,6],\"430\":[2],\"431\":[null,11],\"432\":[null,5],\"433\":[2],\"434\":[null,6],\"435\":[null,8],\"436\":[null,4],\"437\":[null,11],\"438\":[null,6],\"439\":[2],\"440\":[null,10],\"441\":[2],\"442\":[2],\"443\":[null,3],\"444\":[null,6],\"445\":[null,7],\"446\":[null,5],\"447\":[null,5],\"448\":[null,10],\"449\":[null,4],\"450\":[null,12],\"451\":[null,6],\"452\":[5],\"453\":[null,3],\"454\":[null,2],\"455\":[null,65],\"456\":[null,9],\"457\":[null,2],\"458\":[null,46],\"459\":[null,3],\"460\":[null,5],\"461\":[null,5],\"462\":[null,6],\"463\":[null,2],\"464\":[null,11],\"465\":[null,3],\"466\":[null,2],\"467\":[null,1],\"468\":[null,4],\"469\":[null,19],\"470\":[null,13],\"471\":[2],\"472\":[null,6],\"473\":[null,7],\"474\":[null,5],\"475\":[null,5],\"476\":[null,12],\"477\":[3],\"478\":[4],\"479\":[null,2],\"480\":[null,34],\"481\":[null,2],\"482\":[null,11],\"483\":[null,5],\"484\":[null,40],\"485\":[null,2],\"486\":[null,4],\"487\":[null,4],\"488\":[3],\"489\":[null,2],\"490\":[null,10],\"491\":[null,2],\"492\":[null,29],\"493\":[null,2],\"494\":[null,31],\"495\":[null,3],\"496\":[null,1],\"497\":[null,7],\"498\":[2],\"499\":[null,1],\"500\":[null,1],\"501\":[null,11],\"502\":[null,1],\"503\":[null,1],\"504\":[null,3],\"505\":[null,4],\"506\":[null,3],\"507\":[null,4],\"508\":[null,4],\"509\":[null,7],\"510\":[null,12],\"511\":[null,3],\"512\":[null,10],\"513\":[null,4],\"514\":[null,3],\"515\":[null,3],\"516\":[null,2],\"517\":[2],\"518\":[3],\"519\":[null,10],\"520\":[null,17],\"521\":[6],\"522\":[null,9],\"523\":[4],\"524\":[null,5],\"525\":[3],\"526\":[null,10],\"527\":[3],\"528\":[null,13],\"529\":[3],\"530\":[null,13],\"531\":[null,10],\"532\":[2],\"533\":[null,4],\"534\":[null,2],\"535\":[null,4],\"536\":[null,4],\"537\":[null,1],\"538\":[null,1],\"539\":[null,3],\"540\":[null,8],\"541\":[null,4],\"542\":[null,16],\"543\":[null,7],\"544\":[null,16],\"545\":[null,6],\"546\":[null,8],\"547\":[null,7],\"548\":[null,18],\"549\":[3],\"550\":[null,6],\"551\":[null,6],\"552\":[null,4],\"553\":[2],\"554\":[1],\"555\":[1],\"556\":[1],\"557\":[2],\"558\":[null,4],\"559\":[null,3],\"560\":[null,3],\"561\":[8],\"562\":[null,7],\"563\":[null,7],\"564\":[null,14],\"565\":[null,7],\"566\":[null,6],\"567\":[6],\"568\":[null,12],\"569\":[null,5],\"570\":[null,3],\"571\":[null,9],\"572\":[null,5],\"573\":[null,11],\"574\":[3],\"575\":[null,14],\"576\":[null,6],\"577\":[null,7],\"578\":[null,3],\"579\":[null,3],\"580\":[null,7],\"581\":[null,6],\"582\":[null,8],\"583\":[null,7],\"584\":[null,10],\"585\":[null,8],\"586\":[null,18],\"587\":[null,7],\"588\":[null,13],\"589\":[null,11],\"590\":[null,15],\"591\":[7],\"592\":[null,16],\"593\":[null,9],\"594\":[null,10],\"595\":[3],\"596\":[null,8],\"597\":[null,6],\"598\":[null,5],\"599\":[null,10],\"600\":[null,8],\"601\":[null,14],\"602\":[null,10],\"603\":[null,9],\"604\":[null,3],\"605\":[null,18],\"606\":[null,14],\"607\":[null,11],\"608\":[null,8],\"609\":[null,7],\"610\":[5],\"611\":[null,6],\"612\":[null,13],\"613\":[4],\"614\":[null,3],\"615\":[null,14],\"616\":[null,17],\"617\":[null,18],\"618\":[null,4],\"619\":[null,7],\"620\":[null,9],\"621\":[null,17],\"622\":[3],\"623\":[null,2],\"624\":[null,12],\"625\":[null,13],\"626\":[null,11],\"627\":[null,5],\"628\":[null,12],\"629\":[null,5],\"630\":[null,29],\"631\":[null,2],\"632\":[null,3],\"633\":[null,8],\"634\":[null,6],\"635\":[null,13],\"636\":[null,9],\"637\":[1],\"638\":[1],\"639\":[1],\"640\":[2],\"641\":[null,10],\"642\":[3],\"643\":[null,34],\"644\":[2],\"645\":[null,14],\"646\":[null,1],\"647\":[null,1],\"648\":[null,8],\"649\":[null,2],\"650\":[null,2],\"651\":[null,3],\"652\":[null,1],\"653\":[null,1],\"654\":[2],\"655\":[null,5],\"656\":[null,5],\"657\":[null,6],\"658\":[null,10],\"659\":[null,2],\"660\":[null,4],\"661\":[null,1],\"662\":[null,3],\"663\":[1],\"664\":[2],\"665\":[3],\"666\":[3],\"667\":[null,8],\"668\":[null,2],\"669\":[null,35],\"670\":[2],\"671\":[null,6],\"672\":[null,8],\"673\":[null,27],\"674\":[null,37],\"675\":[2],\"676\":[3],\"677\":[null,4],\"678\":[null,6],\"679\":[null,8],\"680\":[3],\"681\":[null,3],\"682\":[null,6],\"683\":[3],\"684\":[null,11],\"685\":[2],\"686\":[2],\"687\":[4],\"688\":[null,6],\"689\":[4],\"690\":[null,11],\"691\":[null,11],\"692\":[4],\"693\":[null,11],\"694\":[null,10],\"695\":[4],\"696\":[null,8],\"697\":[null,7],\"698\":[null,7],\"699\":[null,5],\"700\":[null,10],\"701\":[2],\"702\":[null,8],\"703\":[null,5],\"704\":[null,22],\"705\":[null,9],\"706\":[null,18],\"707\":[null,13],\"708\":[2],\"709\":[null,3],\"710\":[null,5],\"711\":[null,17],\"712\":[null,8],\"713\":[null,7],\"714\":[null,26],\"715\":[null,9],\"716\":[5],\"717\":[null,11],\"718\":[null,8],\"719\":[1],\"720\":[6],\"721\":[1],\"722\":[null,15],\"723\":[null,17],\"724\":[null,13],\"725\":[null,2],\"726\":[null,5],\"727\":[null,7],\"728\":[1],\"729\":[1],\"730\":[null,22],\"731\":[null,2],\"732\":[null,7],\"733\":[null,7],\"734\":[null,19],\"735\":[null,12],\"736\":[null,14],\"737\":[null,10],\"738\":[null,10],\"739\":[null,6],\"740\":[null,11],\"741\":[null,9],\"742\":[null,10],\"743\":[null,8],\"744\":[null,3],\"745\":[1],\"746\":[null,9],\"747\":[null,5],\"748\":[null,6],\"749\":[null,10],\"750\":[null,5],\"751\":[null,4],\"752\":[null,10],\"753\":[1],\"754\":[4],\"755\":[null,4],\"756\":[null,1],\"757\":[null,6],\"758\":[null,4],\"759\":[null,5],\"760\":[null,5],\"761\":[null,2],\"762\":[null,4],\"763\":[null,8],\"764\":[null,3],\"765\":[null,4],\"766\":[3],\"767\":[null,3],\"768\":[null,12],\"769\":[null,9],\"770\":[null,8],\"771\":[null,9],\"772\":[null,15],\"773\":[3],\"774\":[null,11],\"775\":[null,2],\"776\":[null,8],\"777\":[null,8],\"778\":[null,8],\"779\":[null,2],\"780\":[null,8],\"781\":[null,8],\"782\":[null,7],\"783\":[null,2],\"784\":[null,9],\"785\":[2],\"786\":[null,7],\"787\":[null,2],\"788\":[null,1],\"789\":[null,5],\"790\":[null,7],\"791\":[null,7],\"792\":[null,2],\"793\":[null,16],\"794\":[null,2],\"795\":[null,15],\"796\":[null,2],\"797\":[null,3],\"798\":[null,1],\"799\":[null,3],\"800\":[null,8],\"801\":[null,16],\"802\":[null,3],\"803\":[null,1],\"804\":[null,4],\"805\":[null,7],\"806\":[null,12],\"807\":[null,3],\"808\":[null,1],\"809\":[null,21],\"810\":[null,13],\"811\":[null,7],\"812\":[null,3],\"813\":[null,7],\"814\":[null,13],\"815\":[2],\"816\":[null,22],\"817\":[null,14],\"818\":[null,1],\"819\":[null,8],\"820\":[null,1],\"821\":[null,16],\"822\":[null,1],\"823\":[null,13],\"824\":[null,1],\"825\":[null,15],\"826\":[4],\"827\":[null,2],\"828\":[null,8],\"829\":[null,1],\"830\":[5],\"831\":[null,15],\"832\":[null,5],\"833\":[null,5],\"834\":[null,2],\"835\":[null,13],\"836\":[null,29],\"837\":[1],\"838\":[null,2],\"839\":[null,4],\"840\":[null,2],\"841\":[null,5],\"842\":[null,2],\"843\":[null,3],\"844\":[1],\"845\":[null,27],\"846\":[null,12],\"847\":[1],\"848\":[1],\"849\":[null,15],\"850\":[null,3],\"851\":[null,5],\"852\":[null,3],\"853\":[1],\"854\":[null,1],\"855\":[null,15],\"856\":[null,27],\"857\":[5],\"858\":[null,15],\"859\":[null,2],\"860\":[null,8],\"861\":[null,5],\"862\":[null,5],\"863\":[null,10],\"864\":[null,1],\"865\":[null,2],\"866\":[null,6],\"867\":[null,1],\"868\":[null,1],\"869\":[null,1],\"870\":[2],\"871\":[null,6],\"872\":[null,4],\"873\":[null,6],\"874\":[null,4],\"875\":[null,4],\"876\":[null,5],\"877\":[null,1],\"878\":[null,4],\"879\":[2],\"880\":[1],\"881\":[null,1],\"882\":[null,2],\"883\":[null,1],\"884\":[null,1],\"885\":[null,1],\"886\":[null,9],\"887\":[4],\"888\":[null,2],\"889\":[null,10],\"890\":[null,5],\"891\":[null,3],\"892\":[null,12],\"893\":[null,12],\"894\":[null,15],\"895\":[null,11],\"896\":[5],\"897\":[2],\"898\":[null,34],\"899\":[2],\"900\":[null,28],\"901\":[null,2],\"902\":[null,1],\"903\":[null,3],\"904\":[null,1],\"905\":[null,20],\"906\":[2],\"907\":[null,10],\"908\":[null,1],\"909\":[2],\"910\":[null,3],\"911\":[null,3],\"912\":[null,13],\"913\":[null,5],\"914\":[null,7],\"915\":[null,8],\"916\":[null,3],\"917\":[null,2],\"918\":[null,1],\"919\":[null,10],\"920\":[1],\"921\":[1],\"922\":[null,3],\"923\":[null,2],\"924\":[null,2],\"925\":[null,5],\"926\":[null,6],\"927\":[null,3],\"928\":[null,19],\"929\":[null,13],\"930\":[1],\"931\":[2],\"932\":[null,1],\"933\":[null,3],\"934\":[null,3],\"935\":[null,5],\"936\":[null,1],\"937\":[null,3],\"938\":[null,4],\"939\":[null,8],\"940\":[null,77],\"941\":[2],\"942\":[null,1],\"943\":[null,10],\"944\":[null,6],\"945\":[null,1],\"946\":[null,10],\"947\":[null,2],\"948\":[null,2],\"949\":[null,69],\"950\":[null,13],\"951\":[null,2],\"952\":[null,3],\"953\":[null,6],\"954\":[null,4],\"955\":[null,4],\"956\":[null,1],\"957\":[null,13],\"958\":[null,2],\"959\":[null,19],\"960\":[null,2],\"961\":[null,4],\"962\":[null,1],\"963\":[null,11],\"964\":[null,2],\"965\":[null,2],\"966\":[null,5],\"967\":[null,5],\"968\":[null,7],\"969\":[null,6],\"970\":[null,2],\"971\":[null,5],\"972\":[null,28],\"973\":[1],\"974\":[1],\"975\":[null,29],\"976\":[1],\"977\":[null,2],\"978\":[null,1],\"979\":[null,10],\"980\":[null,4],\"981\":[null,32],\"982\":[2],\"983\":[2],\"984\":[null,5],\"985\":[2],\"986\":[null,10],\"987\":[null,1],\"988\":[null,5],\"989\":[null,1],\"990\":[2],\"991\":[null,8],\"992\":[null,1],\"993\":[null,5],\"994\":[null,1],\"995\":[null,10],\"996\":[1],\"997\":[1],\"998\":[1],\"999\":[1],\"1000\":[1],\"1001\":[1],\"1002\":[null,10],\"1003\":[1],\"1004\":[2],\"1005\":[2],\"1006\":[null,3],\"1007\":[null,1],\"1008\":[null,10],\"1009\":[null,6],\"1010\":[null,2],\"1011\":[null,14],\"1012\":[null,15],\"1013\":[null,8],\"1014\":[3],\"1015\":[null,2],\"1016\":[1],\"1017\":[2],\"1018\":[1],\"1019\":[2],\"1020\":[null,4],\"1021\":[null,13],\"1022\":[null,5],\"1023\":[null,8],\"1024\":[null,31],\"1025\":[null,6],\"1026\":[1],\"1027\":[1],\"1028\":[null,3],\"1029\":[null,2],\"1030\":[null,14],\"1031\":[null,7],\"1032\":[null,5],\"1033\":[null,14],\"1034\":[null,7],\"1035\":[null,7],\"1036\":[null,5],\"1037\":[null,4],\"1038\":[null,5],\"1039\":[null,6],\"1040\":[1],\"1041\":[null,5],\"1042\":[null,15],\"1043\":[null,5],\"1044\":[null,28],\"1045\":[null,7],\"1046\":[null,9],\"1047\":[null,11],\"1048\":[1],\"1049\":[3],\"1050\":[null,11],\"1051\":[null,15],\"1052\":[null,7],\"1053\":[null,11],\"1054\":[1],\"1055\":[null,7],\"1056\":[null,26],\"1057\":[null,19],\"1058\":[null,4],\"1059\":[null,1],\"1060\":[null,13],\"1061\":[null,10],\"1062\":[null,6],\"1063\":[null,11],\"1064\":[null,3],\"1065\":[null,14],\"1066\":[null,13],\"1067\":[null,12],\"1068\":[null,7],\"1069\":[null,7],\"1070\":[null,29],\"1071\":[null,9],\"1072\":[null,7],\"1073\":[null,13],\"1074\":[null,14],\"1075\":[1],\"1076\":[null,4],\"1077\":[null,3],\"1078\":[null,1],\"1079\":[null,7],\"1080\":[3],\"1081\":[null,9],\"1082\":[null,8],\"1083\":[null,7],\"1084\":[null,1],\"1085\":[null,2],\"1086\":[null,10],\"1087\":[null,10],\"1088\":[null,9],\"1089\":[null,7],\"1090\":[null,13],\"1091\":[1],\"1092\":[null,10],\"1093\":[null,16],\"1094\":[null,4],\"1095\":[null,11],\"1096\":[null,14],\"1097\":[null,1],\"1098\":[null,19],\"1099\":[null,15],\"1100\":[null,5],\"1101\":[null,12],\"1102\":[null,7],\"1103\":[null,1],\"1104\":[null,12],\"1105\":[null,14],\"1106\":[null,4],\"1107\":[1],\"1108\":[null,13],\"1109\":[null,11],\"1110\":[null,10],\"1111\":[1],\"1112\":[null,5],\"1113\":[null,5],\"1114\":[null,7],\"1115\":[null,5],\"1116\":[null,4],\"1117\":[null,4],\"1118\":[null,5],\"1119\":[null,5],\"1120\":[null,5],\"1121\":[null,5],\"1122\":[null,5],\"1123\":[null,11],\"1124\":[null,5],\"1125\":[null,5],\"1126\":[null,5],\"1127\":[null,5],\"1128\":[null,3],\"1129\":[null,5],\"1130\":[null,8],\"1131\":[null,5],\"1132\":[4],\"1133\":[null,12],\"1134\":[null,14],\"1135\":[null,6],\"1136\":[null,1],\"1137\":[null,6],\"1138\":[null,3],\"1139\":[null,3],\"1140\":[null,3],\"1141\":[null,13],\"1142\":[null,7],\"1143\":[null,16],\"1144\":[null,12],\"1145\":[null,5],\"1146\":[null,8],\"1147\":[null,7],\"1148\":[null,5],\"1149\":[null,7],\"1150\":[null,7],\"1151\":[null,6],\"1152\":[null,21],\"1153\":[4],\"1154\":[null,12],\"1155\":[null,7],\"1156\":[null,1],\"1157\":[null,2],\"1158\":[null,16],\"1159\":[null,12],\"1160\":[null,5],\"1161\":[null,5],\"1162\":[null,10],\"1163\":[null,13],\"1164\":[null,8],\"1165\":[null,7],\"1166\":[null,6],\"1167\":[null,6],\"1168\":[null,11],\"1169\":[null,7],\"1170\":[null,10],\"1171\":[4],\"1172\":[null,11],\"1173\":[null,8],\"1174\":[null,1],\"1175\":[null,2],\"1176\":[null,12],\"1177\":[null,11],\"1178\":[null,6],\"1179\":[null,8],\"1180\":[null,7],\"1181\":[null,4],\"1182\":[null,5],\"1183\":[null,12],\"1184\":[1],\"1185\":[2],\"1186\":[1],\"1187\":[2],\"1188\":[null,4],\"1189\":[null,13],\"1190\":[null,5],\"1191\":[null,8],\"1192\":[null,31],\"1193\":[null,6],\"1194\":[1],\"1195\":[1],\"1196\":[null,3],\"1197\":[null,2],\"1198\":[null,14],\"1199\":[null,7],\"1200\":[null,5],\"1201\":[null,14],\"1202\":[null,7],\"1203\":[null,7],\"1204\":[null,5],\"1205\":[null,4],\"1206\":[null,5],\"1207\":[null,6],\"1208\":[1],\"1209\":[null,5],\"1210\":[null,15],\"1211\":[null,5],\"1212\":[null,28],\"1213\":[null,7],\"1214\":[null,9],\"1215\":[null,11],\"1216\":[1],\"1217\":[3],\"1218\":[null,11],\"1219\":[null,15],\"1220\":[null,7],\"1221\":[null,11],\"1222\":[1],\"1223\":[null,7],\"1224\":[null,26],\"1225\":[null,19],\"1226\":[null,4],\"1227\":[null,1],\"1228\":[null,13],\"1229\":[null,10],\"1230\":[null,6],\"1231\":[null,11],\"1232\":[null,3],\"1233\":[null,14],\"1234\":[null,13],\"1235\":[null,12],\"1236\":[null,7],\"1237\":[null,7],\"1238\":[null,29],\"1239\":[null,9],\"1240\":[null,7],\"1241\":[null,13],\"1242\":[null,14],\"1243\":[1],\"1244\":[null,4],\"1245\":[null,3],\"1246\":[null,1],\"1247\":[null,7],\"1248\":[3],\"1249\":[null,9],\"1250\":[null,8],\"1251\":[null,7],\"1252\":[null,1],\"1253\":[null,2],\"1254\":[null,10],\"1255\":[null,10],\"1256\":[null,9],\"1257\":[null,7],\"1258\":[null,13],\"1259\":[1],\"1260\":[null,10],\"1261\":[null,16],\"1262\":[null,4],\"1263\":[null,11],\"1264\":[null,14],\"1265\":[null,1],\"1266\":[null,19],\"1267\":[null,15],\"1268\":[null,5],\"1269\":[null,12],\"1270\":[null,7],\"1271\":[null,1],\"1272\":[null,12],\"1273\":[null,14],\"1274\":[null,4],\"1275\":[1],\"1276\":[null,13],\"1277\":[null,11],\"1278\":[null,10],\"1279\":[1],\"1280\":[null,5],\"1281\":[null,5],\"1282\":[null,7],\"1283\":[null,5],\"1284\":[null,4],\"1285\":[null,4],\"1286\":[null,5],\"1287\":[null,5],\"1288\":[null,5],\"1289\":[null,5],\"1290\":[null,5],\"1291\":[null,11],\"1292\":[null,5],\"1293\":[null,5],\"1294\":[null,5],\"1295\":[null,5],\"1296\":[null,3],\"1297\":[null,5],\"1298\":[null,8],\"1299\":[null,5],\"1300\":[4],\"1301\":[null,12],\"1302\":[null,14],\"1303\":[null,6],\"1304\":[null,1],\"1305\":[null,6],\"1306\":[null,3],\"1307\":[null,3],\"1308\":[null,3],\"1309\":[null,13],\"1310\":[null,7],\"1311\":[null,16],\"1312\":[null,12],\"1313\":[null,5],\"1314\":[null,8],\"1315\":[null,7],\"1316\":[null,5],\"1317\":[null,7],\"1318\":[null,7],\"1319\":[null,6],\"1320\":[null,21],\"1321\":[4],\"1322\":[null,12],\"1323\":[null,7],\"1324\":[null,1],\"1325\":[null,2],\"1326\":[null,16],\"1327\":[null,12],\"1328\":[null,5],\"1329\":[null,5],\"1330\":[null,10],\"1331\":[null,13],\"1332\":[null,8],\"1333\":[null,7],\"1334\":[null,6],\"1335\":[null,6],\"1336\":[null,11],\"1337\":[null,7],\"1338\":[null,10],\"1339\":[4],\"1340\":[null,11],\"1341\":[null,8],\"1342\":[null,1],\"1343\":[null,2],\"1344\":[null,12],\"1345\":[null,11],\"1346\":[null,6],\"1347\":[null,8],\"1348\":[null,7],\"1349\":[null,4],\"1350\":[null,5],\"1351\":[null,12],\"1352\":[1],\"1353\":[2],\"1354\":[1],\"1355\":[2],\"1356\":[null,4],\"1357\":[null,13],\"1358\":[null,5],\"1359\":[null,8],\"1360\":[null,31],\"1361\":[null,6],\"1362\":[1],\"1363\":[1],\"1364\":[null,3],\"1365\":[null,2],\"1366\":[null,14],\"1367\":[null,7],\"1368\":[null,5],\"1369\":[null,14],\"1370\":[null,7],\"1371\":[null,7],\"1372\":[null,5],\"1373\":[null,4],\"1374\":[null,5],\"1375\":[null,6],\"1376\":[1],\"1377\":[null,5],\"1378\":[null,15],\"1379\":[null,5],\"1380\":[null,28],\"1381\":[null,7],\"1382\":[null,9],\"1383\":[null,11],\"1384\":[1],\"1385\":[3],\"1386\":[null,11],\"1387\":[null,15],\"1388\":[null,7],\"1389\":[null,11],\"1390\":[1],\"1391\":[null,7],\"1392\":[null,26],\"1393\":[null,19],\"1394\":[null,4],\"1395\":[null,1],\"1396\":[null,13],\"1397\":[null,10],\"1398\":[null,6],\"1399\":[null,11],\"1400\":[null,3],\"1401\":[null,14],\"1402\":[null,13],\"1403\":[null,12],\"1404\":[null,7],\"1405\":[null,7],\"1406\":[null,29],\"1407\":[null,9],\"1408\":[null,7],\"1409\":[null,13],\"1410\":[null,14],\"1411\":[1],\"1412\":[null,4],\"1413\":[null,3],\"1414\":[null,1],\"1415\":[null,7],\"1416\":[3],\"1417\":[null,9],\"1418\":[null,8],\"1419\":[null,7],\"1420\":[null,1],\"1421\":[null,2],\"1422\":[null,10],\"1423\":[null,10],\"1424\":[null,9],\"1425\":[null,7],\"1426\":[null,13],\"1427\":[1],\"1428\":[null,10],\"1429\":[null,16],\"1430\":[null,4],\"1431\":[null,11],\"1432\":[null,14],\"1433\":[null,1],\"1434\":[null,19],\"1435\":[null,15],\"1436\":[null,5],\"1437\":[null,12],\"1438\":[null,7],\"1439\":[null,1],\"1440\":[null,12],\"1441\":[null,14],\"1442\":[null,4],\"1443\":[1],\"1444\":[null,13],\"1445\":[null,11],\"1446\":[null,10],\"1447\":[1],\"1448\":[null,5],\"1449\":[null,5],\"1450\":[null,7],\"1451\":[null,5],\"1452\":[null,4],\"1453\":[null,4],\"1454\":[null,5],\"1455\":[null,5],\"1456\":[null,5],\"1457\":[null,5],\"1458\":[null,5],\"1459\":[null,11],\"1460\":[null,5],\"1461\":[null,5],\"1462\":[null,5],\"1463\":[null,5],\"1464\":[null,3],\"1465\":[null,5],\"1466\":[null,8],\"1467\":[null,5],\"1468\":[4],\"1469\":[null,12],\"1470\":[null,14],\"1471\":[null,6],\"1472\":[null,1],\"1473\":[null,6],\"1474\":[null,3],\"1475\":[null,3],\"1476\":[null,3],\"1477\":[null,13],\"1478\":[null,7],\"1479\":[null,16],\"1480\":[null,12],\"1481\":[null,5],\"1482\":[null,8],\"1483\":[null,7],\"1484\":[null,5],\"1485\":[null,7],\"1486\":[null,7],\"1487\":[null,6],\"1488\":[null,21],\"1489\":[4],\"1490\":[null,12],\"1491\":[null,7],\"1492\":[null,1],\"1493\":[null,2],\"1494\":[null,16],\"1495\":[null,12],\"1496\":[null,5],\"1497\":[null,5],\"1498\":[null,10],\"1499\":[null,13],\"1500\":[null,8],\"1501\":[null,7],\"1502\":[null,6],\"1503\":[null,6],\"1504\":[null,11],\"1505\":[null,7],\"1506\":[null,10],\"1507\":[4],\"1508\":[null,11],\"1509\":[null,8],\"1510\":[null,1],\"1511\":[null,2],\"1512\":[null,12],\"1513\":[null,11],\"1514\":[null,6],\"1515\":[null,8],\"1516\":[null,7],\"1517\":[null,4],\"1518\":[null,5],\"1519\":[null,12],\"1520\":[1],\"1521\":[2],\"1522\":[1],\"1523\":[2],\"1524\":[null,4],\"1525\":[null,13],\"1526\":[null,5],\"1527\":[null,8],\"1528\":[null,31],\"1529\":[null,6],\"1530\":[1],\"1531\":[1],\"1532\":[null,3],\"1533\":[null,2],\"1534\":[null,14],\"1535\":[null,7],\"1536\":[null,5],\"1537\":[null,14],\"1538\":[null,7],\"1539\":[null,7],\"1540\":[null,5],\"1541\":[null,4],\"1542\":[null,5],\"1543\":[null,6],\"1544\":[1],\"1545\":[null,5],\"1546\":[null,15],\"1547\":[null,5],\"1548\":[null,28],\"1549\":[null,7],\"1550\":[null,9],\"1551\":[null,11],\"1552\":[1],\"1553\":[3],\"1554\":[null,11],\"1555\":[null,15],\"1556\":[null,7],\"1557\":[null,11],\"1558\":[1],\"1559\":[null,7],\"1560\":[null,26],\"1561\":[null,19],\"1562\":[null,4],\"1563\":[null,1],\"1564\":[null,13],\"1565\":[null,10],\"1566\":[null,6],\"1567\":[null,11],\"1568\":[null,3],\"1569\":[null,14],\"1570\":[null,13],\"1571\":[null,12],\"1572\":[null,7],\"1573\":[null,7],\"1574\":[null,29],\"1575\":[null,9],\"1576\":[null,7],\"1577\":[null,13],\"1578\":[null,14],\"1579\":[1],\"1580\":[null,4],\"1581\":[null,3],\"1582\":[null,1],\"1583\":[null,7],\"1584\":[3],\"1585\":[null,9],\"1586\":[null,8],\"1587\":[null,7],\"1588\":[null,1],\"1589\":[null,2],\"1590\":[null,10],\"1591\":[null,10],\"1592\":[null,9],\"1593\":[null,7],\"1594\":[null,13],\"1595\":[1],\"1596\":[null,10],\"1597\":[null,16],\"1598\":[null,4],\"1599\":[null,11],\"1600\":[null,14],\"1601\":[null,1],\"1602\":[null,19],\"1603\":[null,15],\"1604\":[null,5],\"1605\":[null,12],\"1606\":[null,7],\"1607\":[null,1],\"1608\":[null,12],\"1609\":[null,14],\"1610\":[null,4],\"1611\":[1],\"1612\":[null,13],\"1613\":[null,11],\"1614\":[null,10],\"1615\":[1],\"1616\":[null,5],\"1617\":[null,5],\"1618\":[null,7],\"1619\":[null,5],\"1620\":[null,4],\"1621\":[null,4],\"1622\":[null,5],\"1623\":[null,5],\"1624\":[null,5],\"1625\":[null,5],\"1626\":[null,5],\"1627\":[null,11],\"1628\":[null,5],\"1629\":[null,5],\"1630\":[null,5],\"1631\":[null,5],\"1632\":[null,3],\"1633\":[null,5],\"1634\":[null,8],\"1635\":[null,5],\"1636\":[4],\"1637\":[null,12],\"1638\":[null,14],\"1639\":[null,6],\"1640\":[null,1],\"1641\":[null,6],\"1642\":[null,3],\"1643\":[null,3],\"1644\":[null,3],\"1645\":[null,13],\"1646\":[null,7],\"1647\":[null,16],\"1648\":[null,12],\"1649\":[null,5],\"1650\":[null,8],\"1651\":[null,7],\"1652\":[null,5],\"1653\":[null,7],\"1654\":[null,7],\"1655\":[null,6],\"1656\":[null,21],\"1657\":[4],\"1658\":[null,12],\"1659\":[null,7],\"1660\":[null,1],\"1661\":[null,2],\"1662\":[null,16],\"1663\":[null,12],\"1664\":[null,5],\"1665\":[null,5],\"1666\":[null,10],\"1667\":[null,13],\"1668\":[null,8],\"1669\":[null,7],\"1670\":[null,6],\"1671\":[null,6],\"1672\":[null,11],\"1673\":[null,7],\"1674\":[null,10],\"1675\":[4],\"1676\":[null,11],\"1677\":[null,8],\"1678\":[null,1],\"1679\":[null,2],\"1680\":[null,12],\"1681\":[null,11],\"1682\":[null,6],\"1683\":[null,8],\"1684\":[null,7],\"1685\":[null,4],\"1686\":[null,5],\"1687\":[null,12],\"1688\":[1],\"1689\":[1],\"1690\":[3],\"1691\":[null,3],\"1692\":[null,25],\"1693\":[null,6],\"1694\":[null,8],\"1695\":[1],\"1696\":[null,9],\"1697\":[null,1],\"1698\":[null,8],\"1699\":[null,10],\"1700\":[null,8],\"1701\":[null,13],\"1702\":[null,8],\"1703\":[null,7],\"1704\":[null,8],\"1705\":[1],\"1706\":[2],\"1707\":[2],\"1708\":[3],\"1709\":[null,21],\"1710\":[1],\"1711\":[null,4],\"1712\":[null,12],\"1713\":[null,2],\"1714\":[null,2],\"1715\":[null,1],\"1716\":[null,1],\"1717\":[null,1],\"1718\":[null,1],\"1719\":[null,1],\"1720\":[null,1],\"1721\":[null,1],\"1722\":[null,5],\"1723\":[null,4],\"1724\":[null,8],\"1725\":[null,6],\"1726\":[null,4],\"1727\":[null,7],\"1728\":[null,1],\"1729\":[null,6],\"1730\":[null,7],\"1731\":[null,4],\"1732\":[null,2],\"1733\":[2],\"1734\":[null,1],\"1735\":[null,3],\"1736\":[null,1],\"1737\":[null,6],\"1738\":[null,2],\"1739\":[null,33],\"1740\":[null,2],\"1741\":[null,8],\"1742\":[null,2],\"1743\":[null,45],\"1744\":[null,3],\"1745\":[null,1],\"1746\":[null,2],\"1747\":[null,3],\"1748\":[null,1],\"1749\":[null,6],\"1750\":[null,1],\"1751\":[null,6],\"1752\":[null,6],\"1753\":[null,3],\"1754\":[null,3],\"1755\":[null,11],\"1756\":[null,2],\"1757\":[null,2],\"1758\":[null,3],\"1759\":[null,2],\"1760\":[null,5],\"1761\":[null,2],\"1762\":[null,9],\"1763\":[1],\"1764\":[null,11],\"1765\":[null,1],\"1766\":[null,15],\"1767\":[null,2],\"1768\":[null,15],\"1769\":[1],\"1770\":[1],\"1771\":[1],\"1772\":[null,6],\"1773\":[null,19],\"1774\":[null,12],\"1775\":[null,5],\"1776\":[null,25],\"1777\":[1],\"1778\":[2],\"1779\":[null,14],\"1780\":[3],\"1781\":[null,3],\"1782\":[null,18],\"1783\":[null,18],\"1784\":[2],\"1785\":[null,12],\"1786\":[2],\"1787\":[null,13],\"1788\":[null,6],\"1789\":[null,8],\"1790\":[null,4],\"1791\":[null,11],\"1792\":[1],\"1793\":[null,17],\"1794\":[null,17],\"1795\":[null,15],\"1796\":[null,21],\"1797\":[null,11],\"1798\":[1],\"1799\":[null,11],\"1800\":[null,12],\"1801\":[null,25],\"1802\":[null,39],\"1803\":[null,9],\"1804\":[null,11],\"1805\":[null,16],\"1806\":[null,32],\"1807\":[null,19],\"1808\":[null,8],\"1809\":[null,4],\"1810\":[null,9],\"1811\":[null,14],\"1812\":[null,2],\"1813\":[null,23],\"1814\":[null,1],\"1815\":[null,2],\"1816\":[null,17],\"1817\":[null,2],\"1818\":[null,34],\"1819\":[null,1],\"1820\":[1],\"1821\":[1],\"1822\":[null,11],\"1823\":[null,1],\"1824\":[null,8],\"1825\":[null,3],\"1826\":[null,5],\"1827\":[null,6],\"1828\":[null,2],\"1829\":[null,9],\"1830\":[5],\"1831\":[null,16],\"1832\":[null,20],\"1833\":[null,11],\"1834\":[null,17],\"1835\":[null,17],\"1836\":[null,8],\"1837\":[null,12],\"1838\":[1],\"1839\":[1],\"1840\":[3],\"1841\":[10],\"1842\":[null,18],\"1843\":[6],\"1844\":[null,18],\"1845\":[2],\"1846\":[null,11],\"1847\":[3],\"1848\":[null,4],\"1849\":[null,4],\"1850\":[null,2],\"1851\":[null,4],\"1852\":[null,5],\"1853\":[null,5],\"1854\":[null,8],\"1855\":[null,6],\"1856\":[null,10],\"1857\":[5],\"1858\":[null,3],\"1859\":[null,6],\"1860\":[8],\"1861\":[null,16],\"1862\":[6],\"1863\":[null,6],\"1864\":[6],\"1865\":[null,9],\"1866\":[6],\"1867\":[null,2],\"1868\":[6],\"1869\":[null,8],\"1870\":[null,10],\"1871\":[4],\"1872\":[null,10],\"1873\":[null,12],\"1874\":[null,9],\"1875\":[null,5],\"1876\":[null,9],\"1877\":[null,8],\"1878\":[7],\"1879\":[null,7],\"1880\":[5],\"1881\":[null,4],\"1882\":[2],\"1883\":[null,6],\"1884\":[null,11],\"1885\":[null,3],\"1886\":[4],\"1887\":[null,5],\"1888\":[null,9],\"1889\":[null,8],\"1890\":[null,11],\"1891\":[null,5],\"1892\":[3],\"1893\":[null,3],\"1894\":[null,12],\"1895\":[null,4],\"1896\":[null,2],\"1897\":[3],\"1898\":[null,6],\"1899\":[null,11],\"1900\":[null,3],\"1901\":[4],\"1902\":[null,5],\"1903\":[null,9],\"1904\":[null,8],\"1905\":[null,11],\"1906\":[null,5],\"1907\":[3],\"1908\":[null,3],\"1909\":[null,12],\"1910\":[null,4],\"1911\":[null,2],\"1912\":[2],\"1913\":[null,6],\"1914\":[null,11],\"1915\":[2],\"1916\":[4],\"1917\":[null,5],\"1918\":[null,9],\"1919\":[null,8],\"1920\":[null,11],\"1921\":[null,5],\"1922\":[3],\"1923\":[null,3],\"1924\":[null,12],\"1925\":[2],\"1926\":[null,6],\"1927\":[null,11],\"1928\":[2],\"1929\":[4],\"1930\":[null,5],\"1931\":[null,9],\"1932\":[null,8],\"1933\":[null,11],\"1934\":[null,5],\"1935\":[3],\"1936\":[null,3],\"1937\":[null,12],\"1938\":[2],\"1939\":[null,6],\"1940\":[null,11],\"1941\":[null,3],\"1942\":[4],\"1943\":[null,5],\"1944\":[null,9],\"1945\":[null,8],\"1946\":[null,11],\"1947\":[null,5],\"1948\":[3],\"1949\":[null,3],\"1950\":[null,12],\"1951\":[null,4],\"1952\":[null,2],\"1953\":[2],\"1954\":[null,6],\"1955\":[null,11],\"1956\":[null,3],\"1957\":[4],\"1958\":[null,5],\"1959\":[null,9],\"1960\":[null,8],\"1961\":[null,11],\"1962\":[null,5],\"1963\":[3],\"1964\":[null,3],\"1965\":[null,12],\"1966\":[null,4],\"1967\":[null,2],\"1968\":[2],\"1969\":[null,7],\"1970\":[null,3],\"1971\":[null,2],\"1972\":[null,3],\"1973\":[null,5],\"1974\":[null,3],\"1975\":[null,4],\"1976\":[null,4],\"1977\":[null,6],\"1978\":[null,5],\"1979\":[null,2],\"1980\":[null,3],\"1981\":[null,6],\"1982\":[null,4],\"1983\":[null,5],\"1984\":[null,4],\"1985\":[null,9],\"1986\":[null,3],\"1987\":[null,3],\"1988\":[null,3],\"1989\":[null,5],\"1990\":[null,2],\"1991\":[null,3],\"1992\":[null,2],\"1993\":[null,3],\"1994\":[null,3],\"1995\":[null,3],\"1996\":[null,3],\"1997\":[null,6],\"1998\":[null,5],\"1999\":[null,4],\"2000\":[null,4],\"2001\":[null,5],\"2002\":[null,5],\"2003\":[null,3],\"2004\":[null,3],\"2005\":[null,3],\"2006\":[null,6],\"2007\":[null,5],\"2008\":[null,3],\"2009\":[null,5],\"2010\":[null,6],\"2011\":[null,6],\"2012\":[2],\"2013\":[4],\"2014\":[null,3],\"2015\":[null,13],\"2016\":[null,7],\"2017\":[null,2],\"2018\":[null,11],\"2019\":[null,8],\"2020\":[null,9],\"2021\":[null,13],\"2022\":[6],\"2023\":[null,14],\"2024\":[null,7],\"2025\":[4],\"2026\":[null,6],\"2027\":[null,2],\"2028\":[null,9],\"2029\":[null,5],\"2030\":[null,24],\"2031\":[5],\"2032\":[null,7],\"2033\":[null,2],\"2034\":[null,4],\"2035\":[null,2],\"2036\":[null,2],\"2037\":[5],\"2038\":[null,4],\"2039\":[null,5],\"2040\":[null,5],\"2041\":[null,5],\"2042\":[null,5],\"2043\":[null,2],\"2044\":[null,7],\"2045\":[null,3],\"2046\":[null,6],\"2047\":[null,1],\"2048\":[null,17],\"2049\":[null,6],\"2050\":[7],\"2051\":[null,2],\"2052\":[7],\"2053\":[null,2],\"2054\":[null,4],\"2055\":[null,4],\"2056\":[null,2],\"2057\":[null,4],\"2058\":[null,4],\"2059\":[null,2],\"2060\":[null,7],\"2061\":[null,12],\"2062\":[null,3],\"2063\":[null,4],\"2064\":[null,6],\"2065\":[null,2],\"2066\":[null,11],\"2067\":[null,7],\"2068\":[null,2],\"2069\":[null,5],\"2070\":[null,5],\"2071\":[null,2],\"2072\":[null,11],\"2073\":[null,12],\"2074\":[7],\"2075\":[null,6],\"2076\":[null,3],\"2077\":[null,3],\"2078\":[null,8],\"2079\":[null,6],\"2080\":[null,3],\"2081\":[null,2],\"2082\":[null,2],\"2083\":[null,10],\"2084\":[null,11],\"2085\":[null,10],\"2086\":[null,11],\"2087\":[6],\"2088\":[null,3],\"2089\":[null,3],\"2090\":[null,6],\"2091\":[null,15],\"2092\":[null,11],\"2093\":[null,6],\"2094\":[2],\"2095\":[4],\"2096\":[7],\"2097\":[5],\"2098\":[6],\"2099\":[5],\"2100\":[10],\"2101\":[4],\"2102\":[4],\"2103\":[4],\"2104\":[6],\"2105\":[2],\"2106\":[4],\"2107\":[3],\"2108\":[4],\"2109\":[4],\"2110\":[4],\"2111\":[4],\"2112\":[7],\"2113\":[6],\"2114\":[5],\"2115\":[5],\"2116\":[6],\"2117\":[6],\"2118\":[4],\"2119\":[4],\"2120\":[3],\"2121\":[7],\"2122\":[6],\"2123\":[4],\"2124\":[6],\"2125\":[7],\"2126\":[7],\"2127\":[1],\"2128\":[3],\"2129\":[null,1],\"2130\":[null,15],\"2131\":[null,2],\"2132\":[null,2],\"2133\":[null,2],\"2134\":[null,3],\"2135\":[null,3],\"2136\":[null,1],\"2137\":[null,1],\"2138\":[2],\"2139\":[null,2],\"2140\":[3],\"2141\":[null,1],\"2142\":[1],\"2143\":[1],\"2144\":[1],\"2145\":[1],\"2146\":[null,23],\"2147\":[null,5],\"2148\":[null,22],\"2149\":[null,3],\"2150\":[null,4],\"2151\":[null,2],\"2152\":[3],\"2153\":[null,13],\"2154\":[null,13],\"2155\":[null,18],\"2156\":[null,15],\"2157\":[null,7],\"2158\":[null,32],\"2159\":[null,16],\"2160\":[null,21],\"2161\":[null,16],\"2162\":[null,15],\"2163\":[null,5],\"2164\":[3],\"2165\":[null,29],\"2166\":[null,19],\"2167\":[null,9],\"2168\":[null,11],\"2169\":[null,14],\"2170\":[null,20],\"2171\":[null,13],\"2172\":[null,8],\"2173\":[null,9],\"2174\":[null,12],\"2175\":[null,12],\"2176\":[1],\"2177\":[3],\"2178\":[null,7],\"2179\":[null,3],\"2180\":[6],\"2181\":[null,7],\"2182\":[null,23],\"2183\":[null,21],\"2184\":[null,17],\"2185\":[7],\"2186\":[null,16],\"2187\":[null,13],\"2188\":[null,12],\"2189\":[null,14],\"2190\":[7],\"2191\":[null,30],\"2192\":[null,19],\"2193\":[null,28],\"2194\":[1],\"2195\":[5],\"2196\":[null,7],\"2197\":[null,9],\"2198\":[null,24],\"2199\":[null,12],\"2200\":[1],\"2201\":[null,8],\"2202\":[null,3],\"2203\":[null,7],\"2204\":[null,8],\"2205\":[null,2],\"2206\":[null,4],\"2207\":[null,5],\"2208\":[null,6],\"2209\":[null,5],\"2210\":[null,6],\"2211\":[null,7],\"2212\":[2],\"2213\":[null,17],\"2214\":[null,20],\"2215\":[null,15],\"2216\":[null,13],\"2217\":[null,10],\"2218\":[null,14],\"2219\":[null,8],\"2220\":[null,7],\"2221\":[2],\"2222\":[4],\"2223\":[null,15],\"2224\":[null,2],\"2225\":[null,2],\"2226\":[null,2],\"2227\":[null,3],\"2228\":[null,3],\"2229\":[null,1],\"2230\":[null,1],\"2231\":[3],\"2232\":[4],\"2233\":[1],\"2234\":[1],\"2235\":[1],\"2236\":[5],\"2237\":[null,8],\"2238\":[null,11],\"2239\":[null,7],\"2240\":[null,3],\"2241\":[null,2],\"2242\":[null,12],\"2243\":[null,9],\"2244\":[null,2],\"2245\":[null,3],\"2246\":[null,23],\"2247\":[null,2],\"2248\":[null,6],\"2249\":[null,7],\"2250\":[null,5],\"2251\":[null,2],\"2252\":[null,6],\"2253\":[null,8],\"2254\":[null,3],\"2255\":[null,6],\"2256\":[null,10],\"2257\":[null,3],\"2258\":[null,9],\"2259\":[null,13],\"2260\":[1],\"2261\":[null,3],\"2262\":[2],\"2263\":[null,2],\"2264\":[null,10],\"2265\":[null,15],\"2266\":[null,15],\"2267\":[null,3],\"2268\":[null,15],\"2269\":[null,7],\"2270\":[null,4],\"2271\":[null,11],\"2272\":[null,4],\"2273\":[null,9],\"2274\":[null,15],\"2275\":[null,20],\"2276\":[null,37],\"2277\":[1],\"2278\":[null,2],\"2279\":[null,18],\"2280\":[null,4],\"2281\":[null,12],\"2282\":[null,14],\"2283\":[null,2],\"2284\":[null,6],\"2285\":[null,13],\"2286\":[null,2],\"2287\":[null,8],\"2288\":[null,3],\"2289\":[null,7],\"2290\":[null,5],\"2291\":[null,5],\"2292\":[null,14],\"2293\":[2],\"2294\":[null,2],\"2295\":[null,5],\"2296\":[null,16],\"2297\":[null,1],\"2298\":[2],\"2299\":[null,9],\"2300\":[null,4],\"2301\":[null,6],\"2302\":[null,11],\"2303\":[null,7],\"2304\":[null,7],\"2305\":[null,15],\"2306\":[null,1],\"2307\":[2],\"2308\":[null,8],\"2309\":[null,13],\"2310\":[null,2],\"2311\":[null,12],\"2312\":[null,3],\"2313\":[null,2],\"2314\":[null,11],\"2315\":[null,8],\"2316\":[2],\"2317\":[null,16],\"2318\":[null,4],\"2319\":[null,2],\"2320\":[null,3],\"2321\":[null,2],\"2322\":[null,3],\"2323\":[null,6],\"2324\":[2],\"2325\":[null,19],\"2326\":[null,5],\"2327\":[null,12],\"2328\":[2],\"2329\":[null,8],\"2330\":[null,1],\"2331\":[null,25],\"2332\":[null,1],\"2333\":[null,14],\"2334\":[2],\"2335\":[null,2],\"2336\":[null,15],\"2337\":[null,3],\"2338\":[null,6],\"2339\":[null,5],\"2340\":[null,8],\"2341\":[null,2],\"2342\":[null,6],\"2343\":[null,2],\"2344\":[null,6],\"2345\":[null,4],\"2346\":[null,11],\"2347\":[null,2],\"2348\":[null,14],\"2349\":[null,2],\"2350\":[null,16],\"2351\":[null,2],\"2352\":[null,4],\"2353\":[null,2],\"2354\":[null,3],\"2355\":[null,4],\"2356\":[null,3],\"2357\":[null,4],\"2358\":[null,7],\"2359\":[null,6],\"2360\":[null,1],\"2361\":[1],\"2362\":[null,7],\"2363\":[null,1],\"2364\":[2],\"2365\":[null,3],\"2366\":[null,6],\"2367\":[null,5],\"2368\":[null,6],\"2369\":[null,7],\"2370\":[null,3],\"2371\":[null,3],\"2372\":[null,2],\"2373\":[null,5],\"2374\":[null,2],\"2375\":[null,3],\"2376\":[null,7],\"2377\":[null,4],\"2378\":[null,12],\"2379\":[null,8],\"2380\":[null,12],\"2381\":[null,4],\"2382\":[null,6],\"2383\":[2],\"2384\":[null,3],\"2385\":[null,2],\"2386\":[null,3],\"2387\":[null,2],\"2388\":[null,4],\"2389\":[1],\"2390\":[null,2],\"2391\":[null,6],\"2392\":[null,12],\"2393\":[null,4],\"2394\":[null,7],\"2395\":[null,4],\"2396\":[null,3],\"2397\":[null,4],\"2398\":[null,7],\"2399\":[1],\"2400\":[null,3],\"2401\":[null,5],\"2402\":[null,7],\"2403\":[null,5],\"2404\":[null,6],\"2405\":[null,14],\"2406\":[null,15],\"2407\":[null,4],\"2408\":[null,5],\"2409\":[null,8],\"2410\":[null,12],\"2411\":[null,11],\"2412\":[null,15],\"2413\":[null,12],\"2414\":[null,7],\"2415\":[null,10],\"2416\":[null,11],\"2417\":[1],\"2418\":[null,3],\"2419\":[null,8],\"2420\":[null,8],\"2421\":[null,8],\"2422\":[null,9],\"2423\":[null,5],\"2424\":[null,12],\"2425\":[null,11],\"2426\":[null,4],\"2427\":[null,9],\"2428\":[null,11],\"2429\":[null,3],\"2430\":[3],\"2431\":[null,6],\"2432\":[null,8],\"2433\":[null,6],\"2434\":[null,12],\"2435\":[null,11],\"2436\":[null,7],\"2437\":[null,10],\"2438\":[null,9],\"2439\":[null,13],\"2440\":[null,13],\"2441\":[null,11],\"2442\":[null,8],\"2443\":[null,5],\"2444\":[null,6],\"2445\":[null,17],\"2446\":[null,10],\"2447\":[null,16],\"2448\":[2],\"2449\":[null,6],\"2450\":[null,9],\"2451\":[null,10],\"2452\":[null,14],\"2453\":[null,8],\"2454\":[null,1],\"2455\":[null,2],\"2456\":[null,5],\"2457\":[null,6],\"2458\":[null,10],\"2459\":[2],\"2460\":[null,10],\"2461\":[null,11],\"2462\":[null,10],\"2463\":[2],\"2464\":[null,6],\"2465\":[null,13],\"2466\":[null,11],\"2467\":[3],\"2468\":[null,12],\"2469\":[null,7],\"2470\":[null,11],\"2471\":[null,14],\"2472\":[null,10],\"2473\":[1],\"2474\":[null,7],\"2475\":[null,8],\"2476\":[null,5],\"2477\":[null,7],\"2478\":[null,10],\"2479\":[1],\"2480\":[null,7],\"2481\":[null,11],\"2482\":[null,6],\"2483\":[null,17],\"2484\":[null,38],\"2485\":[null,12],\"2486\":[null,6],\"2487\":[null,3],\"2488\":[null,6],\"2489\":[null,6],\"2490\":[null,5],\"2491\":[null,2],\"2492\":[1],\"2493\":[null,8],\"2494\":[null,2],\"2495\":[null,17],\"2496\":[null,11],\"2497\":[1],\"2498\":[null,6],\"2499\":[null,2],\"2500\":[null,16],\"2501\":[1],\"2502\":[null,7],\"2503\":[null,2],\"2504\":[null,16],\"2505\":[null,11],\"2506\":[null,12],\"2507\":[1],\"2508\":[null,6],\"2509\":[null,6],\"2510\":[null,6],\"2511\":[null,9],\"2512\":[null,8],\"2513\":[null,2],\"2514\":[null,1],\"2515\":[null,4],\"2516\":[null,6],\"2517\":[null,6],\"2518\":[null,6],\"2519\":[null,6],\"2520\":[null,11],\"2521\":[null,13],\"2522\":[null,14],\"2523\":[null,7],\"2524\":[null,14],\"2525\":[null,20],\"2526\":[null,2],\"2527\":[null,6],\"2528\":[null,5],\"2529\":[null,24],\"2530\":[1],\"2531\":[null,25],\"2532\":[null,1],\"2533\":[null,5],\"2534\":[null,16],\"2535\":[null,10],\"2536\":[null,9],\"2537\":[null,4],\"2538\":[null,30],\"2539\":[null,2],\"2540\":[null,10],\"2541\":[null,15],\"2542\":[null,16],\"2543\":[null,9],\"2544\":[null,2],\"2545\":[2],\"2546\":[null,4],\"2547\":[null,1],\"2548\":[null,9],\"2549\":[null,10],\"2550\":[null,13],\"2551\":[1],\"2552\":[null,3],\"2553\":[null,4],\"2554\":[null,10],\"2555\":[1],\"2556\":[1],\"2557\":[null,2],\"2558\":[3],\"2559\":[null,3],\"2560\":[null,5],\"2561\":[1],\"2562\":[null,4],\"2563\":[3],\"2564\":[null,3],\"2565\":[null,2],\"2566\":[null,14],\"2567\":[null,6],\"2568\":[1],\"2569\":[null,4],\"2570\":[1],\"2571\":[null,4],\"2572\":[1],\"2573\":[null,10],\"2574\":[3],\"2575\":[5],\"2576\":[null,6],\"2577\":[null,2],\"2578\":[null,3],\"2579\":[4],\"2580\":[null,15],\"2581\":[null,15],\"2582\":[1],\"2583\":[1],\"2584\":[3],\"2585\":[null,6],\"2586\":[null,4],\"2587\":[null,9],\"2588\":[null,4],\"2589\":[1],\"2590\":[null,13],\"2591\":[null,9],\"2592\":[1],\"2593\":[3],\"2594\":[2],\"2595\":[null,7],\"2596\":[null,10],\"2597\":[null,21],\"2598\":[null,15],\"2599\":[null,12],\"2600\":[2],\"2601\":[null,8],\"2602\":[null,4],\"2603\":[null,7],\"2604\":[3],\"2605\":[2],\"2606\":[null,3],\"2607\":[null,19],\"2608\":[null,6],\"2609\":[null,11],\"2610\":[2],\"2611\":[null,10],\"2612\":[3],\"2613\":[2],\"2614\":[null,3],\"2615\":[null,12],\"2616\":[null,7],\"2617\":[2],\"2618\":[null,3],\"2619\":[3],\"2620\":[2],\"2621\":[null,3],\"2622\":[null,20],\"2623\":[null,7],\"2624\":[null,10],\"2625\":[2],\"2626\":[null,12],\"2627\":[3],\"2628\":[2],\"2629\":[null,3],\"2630\":[null,11],\"2631\":[null,6],\"2632\":[null,10],\"2633\":[2],\"2634\":[null,6],\"2635\":[1],\"2636\":[null,9],\"2637\":[null,4],\"2638\":[null,6],\"2639\":[null,9],\"2640\":[4],\"2641\":[null,12],\"2642\":[null,8],\"2643\":[null,19],\"2644\":[3],\"2645\":[null,5],\"2646\":[null,6],\"2647\":[null,9],\"2648\":[4],\"2649\":[null,17],\"2650\":[null,3],\"2651\":[null,18],\"2652\":[null,7],\"2653\":[null,11],\"2654\":[3],\"2655\":[null,5],\"2656\":[null,6],\"2657\":[null,13],\"2658\":[null,14],\"2659\":[null,9],\"2660\":[null,9],\"2661\":[null,6],\"2662\":[null,4],\"2663\":[null,16],\"2664\":[null,5],\"2665\":[null,3],\"2666\":[null,2],\"2667\":[1],\"2668\":[2],\"2669\":[null,11],\"2670\":[null,4],\"2671\":[null,10],\"2672\":[null,11],\"2673\":[null,11],\"2674\":[null,14],\"2675\":[null,5],\"2676\":[3],\"2677\":[null,12],\"2678\":[null,5],\"2679\":[null,12],\"2680\":[null,9],\"2681\":[null,9],\"2682\":[null,11],\"2683\":[null,9],\"2684\":[null,7],\"2685\":[null,4],\"2686\":[null,12],\"2687\":[null,10],\"2688\":[1],\"2689\":[1],\"2690\":[3],\"2691\":[2],\"2692\":[null,10],\"2693\":[2],\"2694\":[null,8],\"2695\":[null,3],\"2696\":[null,24],\"2697\":[null,2],\"2698\":[null,8],\"2699\":[null,8],\"2700\":[null,8],\"2701\":[null,3],\"2702\":[null,4],\"2703\":[null,4],\"2704\":[null,4],\"2705\":[null,4],\"2706\":[null,2],\"2707\":[null,7],\"2708\":[null,5],\"2709\":[2],\"2710\":[null,13],\"2711\":[2],\"2712\":[null,2],\"2713\":[null,3],\"2714\":[null,5],\"2715\":[2],\"2716\":[null,6],\"2717\":[null,10],\"2718\":[2],\"2719\":[null,3],\"2720\":[null,10],\"2721\":[null,4],\"2722\":[2],\"2723\":[null,4],\"2724\":[null,5],\"2725\":[null,3],\"2726\":[null,2],\"2727\":[null,2],\"2728\":[null,4],\"2729\":[null,2],\"2730\":[2],\"2731\":[null,5],\"2732\":[5],\"2733\":[null,8],\"2734\":[1],\"2735\":[2],\"2736\":[3],\"2737\":[null,10],\"2738\":[null,8],\"2739\":[null,10],\"2740\":[null,9],\"2741\":[null,8],\"2742\":[null,6],\"2743\":[2],\"2744\":[null,16],\"2745\":[null,9],\"2746\":[null,14],\"2747\":[null,4],\"2748\":[null,16],\"2749\":[null,15],\"2750\":[1],\"2751\":[null,1],\"2752\":[1],\"2753\":[null,5],\"2754\":[1],\"2755\":[null,7],\"2756\":[null,18],\"2757\":[null,11],\"2758\":[null,17],\"2759\":[null,5],\"2760\":[1],\"2761\":[null,7],\"2762\":[null,2],\"2763\":[null,6],\"2764\":[null,13],\"2765\":[1],\"2766\":[null,15],\"2767\":[null,9],\"2768\":[4],\"2769\":[null,6],\"2770\":[null,6],\"2771\":[1],\"2772\":[null,12],\"2773\":[null,4],\"2774\":[null,5],\"2775\":[null,16],\"2776\":[null,6],\"2777\":[3],\"2778\":[null,13],\"2779\":[null,5],\"2780\":[null,4],\"2781\":[null,1],\"2782\":[null,8],\"2783\":[null,1],\"2784\":[null,5],\"2785\":[null,1],\"2786\":[null,7],\"2787\":[null,1],\"2788\":[null,11],\"2789\":[null,1],\"2790\":[null,19],\"2791\":[null,1],\"2792\":[null,12],\"2793\":[2],\"2794\":[null,7],\"2795\":[null,20],\"2796\":[null,15],\"2797\":[null,11],\"2798\":[2],\"2799\":[null,4],\"2800\":[null,5],\"2801\":[3],\"2802\":[null,13],\"2803\":[null,6],\"2804\":[null,6],\"2805\":[null,1],\"2806\":[null,4],\"2807\":[null,11],\"2808\":[1],\"2809\":[null,7],\"2810\":[null,6],\"2811\":[1],\"2812\":[null,13],\"2813\":[null,3],\"2814\":[null,13],\"2815\":[1],\"2816\":[null,10],\"2817\":[null,13],\"2818\":[null,10],\"2819\":[1],\"2820\":[null,6],\"2821\":[1],\"2822\":[null,21],\"2823\":[1],\"2824\":[null,3],\"2825\":[null,3],\"2826\":[null,4],\"2827\":[null,11],\"2828\":[1],\"2829\":[null,9],\"2830\":[null,6],\"2831\":[null,14],\"2832\":[null,25],\"2833\":[null,3],\"2834\":[null,1],\"2835\":[null,11],\"2836\":[null,1],\"2837\":[1],\"2838\":[null,3],\"2839\":[null,3],\"2840\":[null,11],\"2841\":[null,1],\"2842\":[4],\"2843\":[null,9],\"2844\":[null,6],\"2845\":[null,9],\"2846\":[null,9],\"2847\":[null,11],\"2848\":[null,9],\"2849\":[1],\"2850\":[null,15],\"2851\":[1],\"2852\":[2],\"2853\":[null,2],\"2854\":[null,5],\"2855\":[null,7],\"2856\":[null,1],\"2857\":[null,11],\"2858\":[2],\"2859\":[null,6],\"2860\":[null,6],\"2861\":[2],\"2862\":[null,2],\"2863\":[null,6],\"2864\":[null,7],\"2865\":[null,7],\"2866\":[null,3],\"2867\":[null,1],\"2868\":[null,2],\"2869\":[null,2],\"2870\":[null,2],\"2871\":[null,2],\"2872\":[null,2],\"2873\":[null,1],\"2874\":[null,1],\"2875\":[2],\"2876\":[null,3],\"2877\":[null,13],\"2878\":[1],\"2879\":[2],\"2880\":[null,15],\"2881\":[2],\"2882\":[null,18],\"2883\":[2],\"2884\":[null,5],\"2885\":[null,7],\"2886\":[null,9],\"2887\":[2],\"2888\":[null,13],\"2889\":[null,2],\"2890\":[null,5],\"2891\":[null,17],\"2892\":[2],\"2893\":[null,6],\"2894\":[null,10],\"2895\":[null,7],\"2896\":[2],\"2897\":[null,9],\"2898\":[null,4],\"2899\":[3],\"2900\":[null,14],\"2901\":[null,7],\"2902\":[3],\"2903\":[null,5],\"2904\":[null,4],\"2905\":[null,6],\"2906\":[null,11],\"2907\":[null,6],\"2908\":[null,4],\"2909\":[null,11],\"2910\":[null,7],\"2911\":[null,10],\"2912\":[1],\"2913\":[3],\"2914\":[null,12],\"2915\":[null,19],\"2916\":[null,1],\"2917\":[null,11],\"2918\":[null,7],\"2919\":[null,8],\"2920\":[null,12],\"2921\":[null,9],\"2922\":[null,9],\"2923\":[null,13],\"2924\":[3],\"2925\":[null,11],\"2926\":[null,1],\"2927\":[null,16],\"2928\":[null,8],\"2929\":[2],\"2930\":[null,10],\"2931\":[null,12],\"2932\":[null,4],\"2933\":[null,11],\"2934\":[1],\"2935\":[3],\"2936\":[null,4],\"2937\":[null,6],\"2938\":[null,10],\"2939\":[2],\"2940\":[null,2],\"2941\":[null,16],\"2942\":[null,27],\"2943\":[null,3],\"2944\":[null,26],\"2945\":[null,19],\"2946\":[null,8],\"2947\":[null,7],\"2948\":[null,12],\"2949\":[1],\"2950\":[2],\"2951\":[null,5],\"2952\":[null,3],\"2953\":[null,4],\"2954\":[null,8],\"2955\":[2],\"2956\":[null,4],\"2957\":[null,38],\"2958\":[null,2],\"2959\":[null,104],\"2960\":[null,4],\"2961\":[null,4],\"2962\":[null,4],\"2963\":[null,5],\"2964\":[null,2],\"2965\":[null,10],\"2966\":[null,4],\"2967\":[null,4],\"2968\":[null,4],\"2969\":[null,5],\"2970\":[null,1],\"2971\":[null,2],\"2972\":[null,4],\"2973\":[null,5],\"2974\":[null,13],\"2975\":[null,5],\"2976\":[null,4],\"2977\":[null,26],\"2978\":[null,2],\"2979\":[null,4],\"2980\":[null,3],\"2981\":[null,13],\"2982\":[null,19],\"2983\":[null,21],\"2984\":[null,2],\"2985\":[null,3],\"2986\":[null,4],\"2987\":[null,5],\"2988\":[null,7],\"2989\":[null,1],\"2990\":[null,2],\"2991\":[null,2],\"2992\":[null,17],\"2993\":[null,18],\"2994\":[null,7],\"2995\":[null,3],\"2996\":[null,11],\"2997\":[null,7],\"2998\":[null,11],\"2999\":[null,3],\"3000\":[2],\"3001\":[null,9],\"3002\":[null,2],\"3003\":[null,7],\"3004\":[null,12],\"3005\":[null,4],\"3006\":[null,13],\"3007\":[null,11],\"3008\":[null,12],\"3009\":[2],\"3010\":[null,3],\"3011\":[null,1],\"3012\":[null,4],\"3013\":[null,5],\"3014\":[null,4],\"3015\":[null,2],\"3016\":[null,1],\"3017\":[null,2],\"3018\":[null,1],\"3019\":[null,4],\"3020\":[null,4],\"3021\":[null,1],\"3022\":[null,22],\"3023\":[1],\"3024\":[2],\"3025\":[2],\"3026\":[5],\"3027\":[null,2],\"3028\":[null,2],\"3029\":[null,2],\"3030\":[null,2],\"3031\":[null,2],\"3032\":[null,6],\"3033\":[4],\"3034\":[null,6],\"3035\":[null,4],\"3036\":[null,8],\"3037\":[null,5],\"3038\":[null,5],\"3039\":[null,5],\"3040\":[null,2],\"3041\":[null,7],\"3042\":[null,5],\"3043\":[null,3],\"3044\":[null,5],\"3045\":[null,9],\"3046\":[null,5],\"3047\":[null,5],\"3048\":[null,2],\"3049\":[null,6],\"3050\":[null,2],\"3051\":[null,2],\"3052\":[null,4],\"3053\":[null,6],\"3054\":[null,4],\"3055\":[2],\"3056\":[3],\"3057\":[null,7],\"3058\":[null,5],\"3059\":[null,4],\"3060\":[null,5],\"3061\":[null,10],\"3062\":[null,2],\"3063\":[null,4],\"3064\":[null,4],\"3065\":[null,8],\"3066\":[null,6],\"3067\":[null,2],\"3068\":[null,9],\"3069\":[null,5],\"3070\":[2],\"3071\":[5],\"3072\":[null,5],\"3073\":[null,2],\"3074\":[null,2],\"3075\":[null,2],\"3076\":[null,5],\"3077\":[null,2],\"3078\":[null,3],\"3079\":[null,4],\"3080\":[null,7],\"3081\":[null,3],\"3082\":[null,2],\"3083\":[null,3],\"3084\":[null,3],\"3085\":[null,2],\"3086\":[null,2],\"3087\":[null,3],\"3088\":[null,2],\"3089\":[null,2],\"3090\":[null,2],\"3091\":[null,3],\"3092\":[null,2],\"3093\":[1],\"3094\":[2],\"3095\":[null,15],\"3096\":[null,16],\"3097\":[null,7],\"3098\":[null,2],\"3099\":[null,7],\"3100\":[null,8],\"3101\":[null,4],\"3102\":[null,2],\"3103\":[null,9],\"3104\":[null,5],\"3105\":[null,2],\"3106\":[null,2],\"3107\":[null,4],\"3108\":[2],\"3109\":[3],\"3110\":[null,8],\"3111\":[null,2],\"3112\":[null,8],\"3113\":[3],\"3114\":[null,2],\"3115\":[null,14],\"3116\":[null,11],\"3117\":[null,2],\"3118\":[null,10],\"3119\":[3],\"3120\":[null,2],\"3121\":[null,2],\"3122\":[null,2],\"3123\":[3],\"3124\":[null,2],\"3125\":[null,2],\"3126\":[null,2],\"3127\":[2],\"3128\":[null,4],\"3129\":[null,7],\"3130\":[null,7],\"3131\":[null,7],\"3132\":[null,9],\"3133\":[null,2],\"3134\":[null,11],\"3135\":[null,11],\"3136\":[null,2],\"3137\":[null,2],\"3138\":[2],\"3139\":[null,2],\"3140\":[null,4],\"3141\":[null,3],\"3142\":[null,2],\"3143\":[null,5],\"3144\":[null,2],\"3145\":[null,2],\"3146\":[null,3],\"3147\":[null,2],\"3148\":[null,2],\"3149\":[2],\"3150\":[null,2],\"3151\":[null,14],\"3152\":[null,15],\"3153\":[null,2],\"3154\":[null,4],\"3155\":[2],\"3156\":[null,2],\"3157\":[null,10],\"3158\":[null,4],\"3159\":[null,2],\"3160\":[null,4],\"3161\":[null,8],\"3162\":[null,4],\"3163\":[null,3],\"3164\":[null,4],\"3165\":[null,5],\"3166\":[null,5],\"3167\":[null,2],\"3168\":[null,6],\"3169\":[null,2],\"3170\":[null,2],\"3171\":[null,3],\"3172\":[null,5],\"3173\":[null,4],\"3174\":[null,2],\"3175\":[null,4],\"3176\":[null,8],\"3177\":[null,2],\"3178\":[null,2],\"3179\":[null,1],\"3180\":[null,2],\"3181\":[null,1],\"3182\":[null,3],\"3183\":[null,7],\"3184\":[null,3],\"3185\":[null,3],\"3186\":[null,6],\"3187\":[null,7],\"3188\":[null,5],\"3189\":[2],\"3190\":[null,2],\"3191\":[null,4],\"3192\":[null,2],\"3193\":[null,3],\"3194\":[null,2],\"3195\":[null,11],\"3196\":[null,9],\"3197\":[null,2],\"3198\":[null,3],\"3199\":[null,2],\"3200\":[null,2],\"3201\":[null,2],\"3202\":[2],\"3203\":[null,2],\"3204\":[null,2],\"3205\":[null,5],\"3206\":[null,5],\"3207\":[null,7],\"3208\":[null,11],\"3209\":[2],\"3210\":[null,24],\"3211\":[2],\"3212\":[3],\"3213\":[null,7],\"3214\":[null,5],\"3215\":[2],\"3216\":[null,3],\"3217\":[null,4],\"3218\":[null,6],\"3219\":[null,3],\"3220\":[2],\"3221\":[null,14],\"3222\":[2],\"3223\":[3],\"3224\":[null,3],\"3225\":[null,1],\"3226\":[null,14],\"3227\":[null,1],\"3228\":[null,1],\"3229\":[null,1],\"3230\":[null,1],\"3231\":[null,3],\"3232\":[null,12],\"3233\":[null,1],\"3234\":[null,1],\"3235\":[null,1],\"3236\":[null,1],\"3237\":[null,3],\"3238\":[null,1],\"3239\":[null,19],\"3240\":[null,7],\"3241\":[null,1],\"3242\":[null,1],\"3243\":[null,1],\"3244\":[null,1],\"3245\":[null,1],\"3246\":[null,1],\"3247\":[null,1],\"3248\":[null,1],\"3249\":[null,1],\"3250\":[null,1],\"3251\":[null,1],\"3252\":[null,1],\"3253\":[null,1],\"3254\":[null,1],\"3255\":[null,1],\"3256\":[null,9],\"3257\":[null,2],\"3258\":[null,1],\"3259\":[null,6],\"3260\":[null,3],\"3261\":[null,6],\"3262\":[null,4],\"3263\":[null,6],\"3264\":[null,1],\"3265\":[null,5],\"3266\":[null,5],\"3267\":[null,6],\"3268\":[null,5],\"3269\":[null,8],\"3270\":[3],\"3271\":[null,3],\"3272\":[3],\"3273\":[null,12],\"3274\":[null,18],\"3275\":[null,2],\"3276\":[3],\"3277\":[null,11],\"3278\":[3],\"3279\":[null,15],\"3280\":[3],\"3281\":[null,10],\"3282\":[null,2],\"3283\":[3],\"3284\":[null,9],\"3285\":[null,10],\"3286\":[null,6],\"3287\":[null,5],\"3288\":[null,18],\"3289\":[1],\"3290\":[1],\"3291\":[null,2],\"3292\":[null,1],\"3293\":[null,1],\"3294\":[null,1],\"3295\":[1],\"3296\":[null,4],\"3297\":[null,3],\"3298\":[null,1],\"3299\":[null,1],\"3300\":[null,1],\"3301\":[null,1],\"3302\":[null,1],\"3303\":[null,1],\"3304\":[null,1],\"3305\":[null,3],\"3306\":[null,1],\"3307\":[null,1],\"3308\":[null,1],\"3309\":[1],\"3310\":[null,2],\"3311\":[null,5],\"3312\":[null,5],\"3313\":[2],\"3314\":[null,7],\"3315\":[null,7],\"3316\":[2],\"3317\":[null,8],\"3318\":[2],\"3319\":[null,7],\"3320\":[null,1],\"3321\":[null,8],\"3322\":[2],\"3323\":[null,11],\"3324\":[2],\"3325\":[null,6],\"3326\":[null,7],\"3327\":[1],\"3328\":[null,10],\"3329\":[1],\"3330\":[null,5],\"3331\":[null,1],\"3332\":[null,6],\"3333\":[null,5],\"3334\":[null,1],\"3335\":[null,1],\"3336\":[null,1],\"3337\":[null,1],\"3338\":[null,1],\"3339\":[null,1],\"3340\":[null,1],\"3341\":[null,1],\"3342\":[null,1],\"3343\":[1],\"3344\":[null,1],\"3345\":[1],\"3346\":[null,2],\"3347\":[null,1],\"3348\":[1],\"3349\":[null,1],\"3350\":[null,1],\"3351\":[null,1],\"3352\":[1],\"3353\":[null,5],\"3354\":[null,1],\"3355\":[1],\"3356\":[null,3],\"3357\":[null,1],\"3358\":[1],\"3359\":[null,3],\"3360\":[null,1],\"3361\":[1],\"3362\":[null,3],\"3363\":[null,3],\"3364\":[null,1],\"3365\":[1],\"3366\":[null,1],\"3367\":[null,1],\"3368\":[1],\"3369\":[null,23],\"3370\":[null,1],\"3371\":[1],\"3372\":[null,1],\"3373\":[1],\"3374\":[null,1],\"3375\":[1],\"3376\":[null,1],\"3377\":[1],\"3378\":[null,1],\"3379\":[2],\"3380\":[null,10],\"3381\":[null,1],\"3382\":[1],\"3383\":[null,2],\"3384\":[null,1],\"3385\":[null,1],\"3386\":[null,1],\"3387\":[null,1],\"3388\":[1],\"3389\":[null,1],\"3390\":[1],\"3391\":[null,5],\"3392\":[null,1],\"3393\":[1],\"3394\":[null,1],\"3395\":[2],\"3396\":[null,1],\"3397\":[1],\"3398\":[null,1],\"3399\":[null,2],\"3400\":[1],\"3401\":[null,3],\"3402\":[1],\"3403\":[null,6],\"3404\":[null,4],\"3405\":[null,6],\"3406\":[null,3],\"3407\":[null,5],\"3408\":[1],\"3409\":[null,3],\"3410\":[null,1],\"3411\":[null,6],\"3412\":[null,7],\"3413\":[null,2],\"3414\":[null,4],\"3415\":[1],\"3416\":[null,2],\"3417\":[null,1],\"3418\":[null,1],\"3419\":[null,3],\"3420\":[null,2],\"3421\":[null,1],\"3422\":[null,1],\"3423\":[null,1],\"3424\":[null,1],\"3425\":[null,1],\"3426\":[null,4],\"3427\":[1],\"3428\":[1],\"3429\":[1],\"3430\":[null,1],\"3431\":[null,1],\"3432\":[1],\"3433\":[null,1],\"3434\":[null,1],\"3435\":[1],\"3436\":[null,3],\"3437\":[null,8],\"3438\":[null,3],\"3439\":[2],\"3440\":[1],\"3441\":[null,4],\"3442\":[1],\"3443\":[null,1],\"3444\":[null,1],\"3445\":[1],\"3446\":[null,2],\"3447\":[2],\"3448\":[1],\"3449\":[null,4],\"3450\":[1],\"3451\":[null,1],\"3452\":[null,1],\"3453\":[1],\"3454\":[null,2],\"3455\":[1],\"3456\":[2],\"3457\":[1],\"3458\":[5],\"3459\":[null,3],\"3460\":[null,5],\"3461\":[null,4],\"3462\":[null,4],\"3463\":[null,26],\"3464\":[3],\"3465\":[1],\"3466\":[2],\"3467\":[1],\"3468\":[1],\"3469\":[1],\"3470\":[1],\"3471\":[null,22],\"3472\":[null,4],\"3473\":[null,1],\"3474\":[1],\"3475\":[null,5],\"3476\":[null,11],\"3477\":[null,1],\"3478\":[1],\"3479\":[2],\"3480\":[null,3],\"3481\":[null,5],\"3482\":[null,8],\"3483\":[null,13],\"3484\":[1],\"3485\":[null,8],\"3486\":[null,11],\"3487\":[1],\"3488\":[null,4],\"3489\":[null,23],\"3490\":[null,14],\"3491\":[null,9],\"3492\":[null,12],\"3493\":[null,4],\"3494\":[null,3],\"3495\":[null,20],\"3496\":[null,8],\"3497\":[null,4],\"3498\":[null,15],\"3499\":[null,10],\"3500\":[null,12],\"3501\":[null,1],\"3502\":[1],\"3503\":[null,5],\"3504\":[null,3],\"3505\":[null,3],\"3506\":[null,4],\"3507\":[null,6],\"3508\":[null,1],\"3509\":[null,11],\"3510\":[null,61],\"3511\":[null,5],\"3512\":[null,3],\"3513\":[null,6],\"3514\":[null,11],\"3515\":[null,8],\"3516\":[null,2],\"3517\":[null,12],\"3518\":[1],\"3519\":[2],\"3520\":[null,14],\"3521\":[1],\"3522\":[2],\"3523\":[null,4],\"3524\":[null,5],\"3525\":[null,5],\"3526\":[null,1],\"3527\":[null,12],\"3528\":[null,8],\"3529\":[null,3],\"3530\":[null,9],\"3531\":[7],\"3532\":[null,3],\"3533\":[null,8],\"3534\":[null,10],\"3535\":[null,3],\"3536\":[null,5],\"3537\":[2],\"3538\":[null,3],\"3539\":[null,15],\"3540\":[null,10],\"3541\":[null,3],\"3542\":[null,5],\"3543\":[null,17],\"3544\":[7],\"3545\":[null,13],\"3546\":[null,24],\"3547\":[2],\"3548\":[null,9],\"3549\":[null,11],\"3550\":[null,3],\"3551\":[null,35],\"3552\":[null,6],\"3553\":[null,5],\"3554\":[null,2],\"3555\":[null,2],\"3556\":[null,2],\"3557\":[null,2],\"3558\":[1],\"3559\":[2],\"3560\":[null,7],\"3561\":[null,2],\"3562\":[null,2],\"3563\":[null,10],\"3564\":[null,5],\"3565\":[null,4],\"3566\":[null,10],\"3567\":[null,7],\"3568\":[null,19],\"3569\":[null,5],\"3570\":[null,3],\"3571\":[null,3],\"3572\":[null,9],\"3573\":[null,2],\"3574\":[null,16],\"3575\":[null,10],\"3576\":[null,3],\"3577\":[null,13],\"3578\":[2],\"3579\":[null,7],\"3580\":[null,5],\"3581\":[null,6],\"3582\":[null,12],\"3583\":[null,6],\"3584\":[null,9],\"3585\":[null,9],\"3586\":[2],\"3587\":[null,5],\"3588\":[null,12],\"3589\":[null,10],\"3590\":[null,4],\"3591\":[null,16],\"3592\":[null,13],\"3593\":[null,8],\"3594\":[2],\"3595\":[null,4],\"3596\":[null,15],\"3597\":[null,4],\"3598\":[null,18],\"3599\":[null,4],\"3600\":[null,17],\"3601\":[null,1],\"3602\":[null,20],\"3603\":[null,10],\"3604\":[1],\"3605\":[1],\"3606\":[1],\"3607\":[2],\"3608\":[null,10],\"3609\":[null,17],\"3610\":[5],\"3611\":[null,9],\"3612\":[3],\"3613\":[null,5],\"3614\":[2],\"3615\":[null,10],\"3616\":[2],\"3617\":[null,13],\"3618\":[2],\"3619\":[null,13],\"3620\":[null,10],\"3621\":[1],\"3622\":[1],\"3623\":[1],\"3624\":[1],\"3625\":[1],\"3626\":[1],\"3627\":[1],\"3628\":[2],\"3629\":[null,10],\"3630\":[3],\"3631\":[null,34],\"3632\":[2],\"3633\":[null,14],\"3634\":[null,1],\"3635\":[null,1],\"3636\":[null,8],\"3637\":[null,2],\"3638\":[null,2],\"3639\":[null,3],\"3640\":[null,1],\"3641\":[null,1],\"3642\":[2],\"3643\":[null,5],\"3644\":[null,5],\"3645\":[null,6],\"3646\":[null,10],\"3647\":[null,2],\"3648\":[null,4],\"3649\":[null,1],\"3650\":[null,3],\"3651\":[1],\"3652\":[1],\"3653\":[2],\"3654\":[2],\"3655\":[null,8],\"3656\":[null,2],\"3657\":[null,35],\"3658\":[1],\"3659\":[null,6],\"3660\":[null,8],\"3661\":[null,27],\"3662\":[null,37],\"3663\":[1],\"3664\":[2],\"3665\":[null,4],\"3666\":[null,6],\"3667\":[null,8],\"3668\":[2],\"3669\":[null,3],\"3670\":[null,6],\"3671\":[2],\"3672\":[null,11],\"3673\":[1],\"3674\":[1],\"3675\":[2],\"3676\":[null,6],\"3677\":[2],\"3678\":[null,11],\"3679\":[null,11],\"3680\":[2],\"3681\":[null,11],\"3682\":[null,10],\"3683\":[2],\"3684\":[null,8],\"3685\":[null,7],\"3686\":[null,7],\"3687\":[null,5],\"3688\":[null,10],\"3689\":[2],\"3690\":[null,8],\"3691\":[null,5],\"3692\":[null,22],\"3693\":[null,9],\"3694\":[null,18],\"3695\":[null,13],\"3696\":[2],\"3697\":[null,3],\"3698\":[null,5],\"3699\":[null,17],\"3700\":[null,8],\"3701\":[null,7],\"3702\":[null,26],\"3703\":[null,9],\"3704\":[5],\"3705\":[null,11],\"3706\":[null,8],\"3707\":[1],\"3708\":[6],\"3709\":[1],\"3710\":[null,15],\"3711\":[null,17],\"3712\":[null,13],\"3713\":[null,2],\"3714\":[null,5],\"3715\":[null,7],\"3716\":[1],\"3717\":[1],\"3718\":[null,22],\"3719\":[null,2],\"3720\":[null,7],\"3721\":[null,7],\"3722\":[null,19],\"3723\":[null,12],\"3724\":[null,14],\"3725\":[null,10],\"3726\":[null,10],\"3727\":[null,6],\"3728\":[null,11],\"3729\":[null,9],\"3730\":[null,10],\"3731\":[null,8],\"3732\":[null,3],\"3733\":[1],\"3734\":[null,9],\"3735\":[null,5],\"3736\":[null,6],\"3737\":[null,10],\"3738\":[null,5],\"3739\":[null,4],\"3740\":[null,10],\"3741\":[1],\"3742\":[4],\"3743\":[null,4],\"3744\":[null,1],\"3745\":[null,6],\"3746\":[null,4],\"3747\":[null,5],\"3748\":[null,5],\"3749\":[null,2],\"3750\":[null,4],\"3751\":[null,8],\"3752\":[null,3],\"3753\":[null,4],\"3754\":[3],\"3755\":[null,3],\"3756\":[null,12],\"3757\":[null,9],\"3758\":[null,8],\"3759\":[null,9],\"3760\":[null,15],\"3761\":[3],\"3762\":[null,11],\"3763\":[null,2],\"3764\":[null,8],\"3765\":[null,8],\"3766\":[null,8],\"3767\":[null,2],\"3768\":[null,8],\"3769\":[null,8],\"3770\":[null,7],\"3771\":[null,2],\"3772\":[null,9],\"3773\":[2],\"3774\":[null,7],\"3775\":[null,2],\"3776\":[null,1],\"3777\":[null,5],\"3778\":[null,7],\"3779\":[null,7],\"3780\":[null,2],\"3781\":[null,16],\"3782\":[null,2],\"3783\":[null,15],\"3784\":[null,2],\"3785\":[null,3],\"3786\":[null,1],\"3787\":[null,3],\"3788\":[null,8],\"3789\":[null,16],\"3790\":[null,3],\"3791\":[null,1],\"3792\":[null,4],\"3793\":[null,7],\"3794\":[null,12],\"3795\":[null,3],\"3796\":[null,1],\"3797\":[null,21],\"3798\":[null,13],\"3799\":[null,7],\"3800\":[null,3],\"3801\":[null,7],\"3802\":[null,13],\"3803\":[2],\"3804\":[null,22],\"3805\":[null,14],\"3806\":[null,1],\"3807\":[null,8],\"3808\":[null,1],\"3809\":[null,16],\"3810\":[null,1],\"3811\":[null,13],\"3812\":[null,1],\"3813\":[null,15],\"3814\":[4],\"3815\":[null,2],\"3816\":[null,8],\"3817\":[null,1],\"3818\":[5],\"3819\":[null,15],\"3820\":[null,5],\"3821\":[null,5],\"3822\":[null,2],\"3823\":[null,13],\"3824\":[null,29],\"3825\":[1],\"3826\":[null,2],\"3827\":[null,4],\"3828\":[null,2],\"3829\":[null,5],\"3830\":[null,2],\"3831\":[null,3],\"3832\":[1],\"3833\":[null,27],\"3834\":[null,12],\"3835\":[1],\"3836\":[1],\"3837\":[null,15],\"3838\":[null,3],\"3839\":[null,5],\"3840\":[null,3],\"3841\":[1],\"3842\":[null,1],\"3843\":[null,15],\"3844\":[null,27],\"3845\":[5],\"3846\":[null,15],\"3847\":[null,2],\"3848\":[null,8],\"3849\":[null,5],\"3850\":[null,5],\"3851\":[null,10],\"3852\":[null,1],\"3853\":[null,2],\"3854\":[null,6],\"3855\":[null,1],\"3856\":[null,1],\"3857\":[null,1],\"3858\":[2],\"3859\":[null,6],\"3860\":[null,4],\"3861\":[null,6],\"3862\":[null,4],\"3863\":[null,4],\"3864\":[null,5],\"3865\":[null,1],\"3866\":[null,4],\"3867\":[2],\"3868\":[1],\"3869\":[null,1],\"3870\":[null,2],\"3871\":[null,1],\"3872\":[null,1],\"3873\":[null,1],\"3874\":[null,9],\"3875\":[4],\"3876\":[null,2],\"3877\":[null,10],\"3878\":[null,5],\"3879\":[null,3],\"3880\":[null,12],\"3881\":[null,12],\"3882\":[null,15],\"3883\":[null,11],\"3884\":[5],\"3885\":[2],\"3886\":[null,34],\"3887\":[2],\"3888\":[null,28],\"3889\":[null,2],\"3890\":[null,1],\"3891\":[null,3],\"3892\":[null,1],\"3893\":[null,20],\"3894\":[2],\"3895\":[null,10],\"3896\":[null,1],\"3897\":[2],\"3898\":[null,3],\"3899\":[null,3],\"3900\":[null,13],\"3901\":[null,5],\"3902\":[null,7],\"3903\":[null,8],\"3904\":[null,3],\"3905\":[null,2],\"3906\":[null,1],\"3907\":[null,10],\"3908\":[1],\"3909\":[1],\"3910\":[1],\"3911\":[1],\"3912\":[1],\"3913\":[1],\"3914\":[null,10],\"3915\":[1],\"3916\":[1],\"3917\":[3],\"3918\":[10],\"3919\":[null,18],\"3920\":[6],\"3921\":[null,18],\"3922\":[2],\"3923\":[null,11],\"3924\":[3],\"3925\":[null,4],\"3926\":[null,4],\"3927\":[null,2],\"3928\":[null,4],\"3929\":[null,5],\"3930\":[null,5],\"3931\":[null,8],\"3932\":[null,6],\"3933\":[null,10],\"3934\":[5],\"3935\":[null,3],\"3936\":[null,6],\"3937\":[8],\"3938\":[null,16],\"3939\":[6],\"3940\":[null,6],\"3941\":[6],\"3942\":[null,9],\"3943\":[6],\"3944\":[null,2],\"3945\":[6],\"3946\":[null,8],\"3947\":[null,10],\"3948\":[4],\"3949\":[null,10],\"3950\":[null,12],\"3951\":[null,9],\"3952\":[null,5],\"3953\":[null,9],\"3954\":[null,8],\"3955\":[7],\"3956\":[null,7],\"3957\":[5],\"3958\":[null,4],\"3959\":[1],\"3960\":[2],\"3961\":[3],\"3962\":[null,10],\"3963\":[null,8],\"3964\":[null,10],\"3965\":[null,9],\"3966\":[null,8],\"3967\":[null,6],\"3968\":[2],\"3969\":[null,16],\"3970\":[null,9],\"3971\":[null,14],\"3972\":[null,4],\"3973\":[null,16],\"3974\":[null,15],\"3975\":[1],\"3976\":[null,1],\"3977\":[1],\"3978\":[null,5],\"3979\":[1],\"3980\":[null,7],\"3981\":[null,18],\"3982\":[null,11],\"3983\":[null,17],\"3984\":[null,5],\"3985\":[1],\"3986\":[null,7],\"3987\":[null,2],\"3988\":[null,6],\"3989\":[null,13],\"3990\":[1],\"3991\":[null,15],\"3992\":[null,9],\"3993\":[4],\"3994\":[null,6],\"3995\":[null,6],\"3996\":[1],\"3997\":[null,12],\"3998\":[null,4],\"3999\":[null,5],\"4000\":[null,16],\"4001\":[null,6],\"4002\":[3],\"4003\":[null,13],\"4004\":[null,5],\"4005\":[null,4],\"4006\":[null,1],\"4007\":[null,8],\"4008\":[null,1],\"4009\":[null,5],\"4010\":[null,1],\"4011\":[null,7],\"4012\":[null,1],\"4013\":[null,11],\"4014\":[null,1],\"4015\":[null,19],\"4016\":[null,1],\"4017\":[null,12],\"4018\":[2],\"4019\":[null,7],\"4020\":[null,20],\"4021\":[null,15],\"4022\":[null,11],\"4023\":[2],\"4024\":[null,4],\"4025\":[null,5],\"4026\":[3],\"4027\":[null,13],\"4028\":[null,6],\"4029\":[null,6],\"4030\":[null,1],\"4031\":[null,4],\"4032\":[null,11],\"4033\":[1],\"4034\":[null,7],\"4035\":[null,6],\"4036\":[1],\"4037\":[null,13],\"4038\":[null,3],\"4039\":[null,13],\"4040\":[1],\"4041\":[null,10],\"4042\":[null,13],\"4043\":[null,10],\"4044\":[1],\"4045\":[null,6],\"4046\":[1],\"4047\":[null,21],\"4048\":[1],\"4049\":[null,3],\"4050\":[null,3],\"4051\":[null,4],\"4052\":[null,11],\"4053\":[1],\"4054\":[null,9],\"4055\":[null,6],\"4056\":[null,14],\"4057\":[null,25],\"4058\":[null,3],\"4059\":[null,1],\"4060\":[null,11],\"4061\":[null,1],\"4062\":[1],\"4063\":[null,3],\"4064\":[null,3],\"4065\":[null,11],\"4066\":[null,1],\"4067\":[4],\"4068\":[null,9],\"4069\":[null,6],\"4070\":[null,9],\"4071\":[null,9],\"4072\":[null,11],\"4073\":[null,9],\"4074\":[1],\"4075\":[null,15],\"4076\":[1],\"4077\":[2],\"4078\":[null,2],\"4079\":[null,5],\"4080\":[null,7],\"4081\":[null,1],\"4082\":[null,11],\"4083\":[2],\"4084\":[null,6],\"4085\":[null,6],\"4086\":[2],\"4087\":[null,2],\"4088\":[null,6],\"4089\":[null,7],\"4090\":[null,7],\"4091\":[null,3],\"4092\":[null,1],\"4093\":[null,2],\"4094\":[null,2],\"4095\":[null,2],\"4096\":[null,2],\"4097\":[null,2],\"4098\":[null,1],\"4099\":[null,1],\"4100\":[2],\"4101\":[null,3],\"4102\":[null,13],\"4103\":[1],\"4104\":[2],\"4105\":[null,15],\"4106\":[2],\"4107\":[null,18],\"4108\":[2],\"4109\":[null,5],\"4110\":[null,7],\"4111\":[null,9],\"4112\":[2],\"4113\":[null,13],\"4114\":[null,2],\"4115\":[null,5],\"4116\":[null,17],\"4117\":[2],\"4118\":[null,6],\"4119\":[null,10],\"4120\":[null,7],\"4121\":[2],\"4122\":[null,9],\"4123\":[null,4],\"4124\":[3],\"4125\":[null,14],\"4126\":[null,7],\"4127\":[3],\"4128\":[null,5],\"4129\":[null,4],\"4130\":[null,6],\"4131\":[null,11],\"4132\":[null,6],\"4133\":[null,4],\"4134\":[null,11],\"4135\":[null,7],\"4136\":[null,10],\"4137\":[1],\"4138\":[3],\"4139\":[null,12],\"4140\":[null,19],\"4141\":[null,1],\"4142\":[null,11],\"4143\":[null,7],\"4144\":[null,8],\"4145\":[null,12],\"4146\":[null,9],\"4147\":[null,9],\"4148\":[null,13],\"4149\":[3],\"4150\":[null,11],\"4151\":[null,1],\"4152\":[null,16],\"4153\":[null,8],\"4154\":[2],\"4155\":[null,10],\"4156\":[null,12],\"4157\":[null,4],\"4158\":[null,11],\"4159\":[1],\"4160\":[3],\"4161\":[null,4],\"4162\":[null,6],\"4163\":[null,10],\"4164\":[2],\"4165\":[null,2],\"4166\":[null,16],\"4167\":[null,27],\"4168\":[null,3],\"4169\":[null,26],\"4170\":[null,19],\"4171\":[null,8],\"4172\":[null,7],\"4173\":[null,12],\"4174\":[1],\"4175\":[2],\"4176\":[null,5],\"4177\":[null,3],\"4178\":[null,4],\"4179\":[null,8],\"4180\":[2],\"4181\":[null,4],\"4182\":[null,38],\"4183\":[null,2],\"4184\":[null,104],\"4185\":[null,4],\"4186\":[null,4],\"4187\":[null,4],\"4188\":[null,5],\"4189\":[null,2],\"4190\":[null,10],\"4191\":[null,4],\"4192\":[null,4],\"4193\":[null,4],\"4194\":[null,5],\"4195\":[null,1],\"4196\":[null,2],\"4197\":[null,4],\"4198\":[null,5],\"4199\":[null,13],\"4200\":[null,5],\"4201\":[null,4],\"4202\":[null,26],\"4203\":[null,2],\"4204\":[null,4],\"4205\":[null,3],\"4206\":[null,13],\"4207\":[null,19],\"4208\":[null,21],\"4209\":[null,2],\"4210\":[null,3],\"4211\":[null,4],\"4212\":[null,5],\"4213\":[null,7],\"4214\":[null,1],\"4215\":[null,2],\"4216\":[null,2],\"4217\":[null,17],\"4218\":[null,18],\"4219\":[null,7],\"4220\":[null,3],\"4221\":[null,11],\"4222\":[null,7],\"4223\":[null,11],\"4224\":[null,3],\"4225\":[2],\"4226\":[null,9],\"4227\":[null,2],\"4228\":[null,7],\"4229\":[null,12],\"4230\":[null,4],\"4231\":[null,13],\"4232\":[null,11],\"4233\":[null,12],\"4234\":[2],\"4235\":[null,3],\"4236\":[null,1],\"4237\":[null,4],\"4238\":[null,5],\"4239\":[null,4],\"4240\":[null,2],\"4241\":[null,1],\"4242\":[null,2],\"4243\":[null,1],\"4244\":[null,4],\"4245\":[null,4],\"4246\":[null,1],\"4247\":[null,22],\"4248\":[1],\"4249\":[1],\"4250\":[3],\"4251\":[null,3],\"4252\":[null,25],\"4253\":[null,6],\"4254\":[null,8],\"4255\":[1],\"4256\":[null,9],\"4257\":[null,1],\"4258\":[null,8],\"4259\":[null,10],\"4260\":[null,8],\"4261\":[null,13],\"4262\":[null,8],\"4263\":[null,7],\"4264\":[null,8],\"4265\":[1],\"4266\":[2],\"4267\":[2],\"4268\":[3],\"4269\":[null,21],\"4270\":[1],\"4271\":[null,4],\"4272\":[null,12],\"4273\":[null,2],\"4274\":[null,2],\"4275\":[null,1],\"4276\":[null,1],\"4277\":[null,1],\"4278\":[null,1],\"4279\":[null,1],\"4280\":[null,1],\"4281\":[null,1],\"4282\":[null,5],\"4283\":[null,4],\"4284\":[null,8],\"4285\":[null,6],\"4286\":[null,4],\"4287\":[null,7],\"4288\":[null,1],\"4289\":[null,6],\"4290\":[null,7],\"4291\":[null,4],\"4292\":[null,2],\"4293\":[2],\"4294\":[null,1],\"4295\":[null,3],\"4296\":[null,1],\"4297\":[null,6],\"4298\":[null,2],\"4299\":[null,33],\"4300\":[null,2],\"4301\":[null,8],\"4302\":[null,2],\"4303\":[null,45],\"4304\":[null,3],\"4305\":[null,1],\"4306\":[null,2],\"4307\":[null,3],\"4308\":[null,1],\"4309\":[null,6],\"4310\":[null,1],\"4311\":[null,6],\"4312\":[null,6],\"4313\":[null,3],\"4314\":[null,3],\"4315\":[null,11],\"4316\":[null,2],\"4317\":[null,2],\"4318\":[null,3],\"4319\":[null,2],\"4320\":[null,5],\"4321\":[null,2],\"4322\":[null,9],\"4323\":[1],\"4324\":[null,11],\"4325\":[null,1],\"4326\":[null,15],\"4327\":[null,2],\"4328\":[null,15],\"4329\":[1],\"4330\":[1],\"4331\":[1],\"4332\":[null,6],\"4333\":[null,19],\"4334\":[null,12],\"4335\":[null,5],\"4336\":[null,25],\"4337\":[1],\"4338\":[2],\"4339\":[null,14],\"4340\":[3],\"4341\":[null,3],\"4342\":[null,18],\"4343\":[null,18],\"4344\":[2],\"4345\":[null,12],\"4346\":[2],\"4347\":[null,13],\"4348\":[null,6],\"4349\":[null,8],\"4350\":[null,4],\"4351\":[null,11],\"4352\":[1],\"4353\":[null,17],\"4354\":[null,17],\"4355\":[null,15],\"4356\":[null,21],\"4357\":[null,11],\"4358\":[1],\"4359\":[null,11],\"4360\":[null,12],\"4361\":[null,25],\"4362\":[null,39],\"4363\":[null,9],\"4364\":[null,11],\"4365\":[null,16],\"4366\":[null,32],\"4367\":[null,19],\"4368\":[null,8],\"4369\":[null,4],\"4370\":[null,9],\"4371\":[null,14],\"4372\":[null,2],\"4373\":[null,23],\"4374\":[null,1],\"4375\":[null,2],\"4376\":[null,17],\"4377\":[null,2],\"4378\":[null,34],\"4379\":[null,1],\"4380\":[1],\"4381\":[1],\"4382\":[null,11],\"4383\":[null,1],\"4384\":[null,8],\"4385\":[null,3],\"4386\":[null,5],\"4387\":[null,6],\"4388\":[null,2],\"4389\":[null,9],\"4390\":[5],\"4391\":[null,16],\"4392\":[null,20],\"4393\":[null,11],\"4394\":[null,17],\"4395\":[null,17],\"4396\":[null,8],\"4397\":[null,12],\"4398\":[1],\"4399\":[2],\"4400\":[1],\"4401\":[2],\"4402\":[null,4],\"4403\":[null,13],\"4404\":[null,5],\"4405\":[null,8],\"4406\":[null,31],\"4407\":[null,6],\"4408\":[1],\"4409\":[1],\"4410\":[null,3],\"4411\":[null,2],\"4412\":[null,14],\"4413\":[null,7],\"4414\":[null,5],\"4415\":[null,14],\"4416\":[null,7],\"4417\":[null,7],\"4418\":[null,5],\"4419\":[null,4],\"4420\":[null,5],\"4421\":[null,6],\"4422\":[1],\"4423\":[null,5],\"4424\":[null,15],\"4425\":[null,5],\"4426\":[null,28],\"4427\":[null,7],\"4428\":[null,9],\"4429\":[null,11],\"4430\":[1],\"4431\":[3],\"4432\":[null,11],\"4433\":[null,15],\"4434\":[null,7],\"4435\":[null,11],\"4436\":[1],\"4437\":[null,7],\"4438\":[null,26],\"4439\":[null,19],\"4440\":[null,4],\"4441\":[null,1],\"4442\":[null,13],\"4443\":[null,10],\"4444\":[null,6],\"4445\":[null,11],\"4446\":[null,3],\"4447\":[null,14],\"4448\":[null,13],\"4449\":[null,12],\"4450\":[null,7],\"4451\":[null,7],\"4452\":[null,29],\"4453\":[null,9],\"4454\":[null,7],\"4455\":[null,13],\"4456\":[null,14],\"4457\":[1],\"4458\":[null,4],\"4459\":[null,3],\"4460\":[null,1],\"4461\":[null,7],\"4462\":[3],\"4463\":[null,9],\"4464\":[null,8],\"4465\":[null,7],\"4466\":[null,1],\"4467\":[null,2],\"4468\":[null,10],\"4469\":[null,10],\"4470\":[null,9],\"4471\":[null,7],\"4472\":[null,13],\"4473\":[1],\"4474\":[null,10],\"4475\":[null,16],\"4476\":[null,4],\"4477\":[null,11],\"4478\":[null,14],\"4479\":[null,1],\"4480\":[null,19],\"4481\":[null,15],\"4482\":[null,5],\"4483\":[null,12],\"4484\":[null,7],\"4485\":[null,1],\"4486\":[null,12],\"4487\":[null,14],\"4488\":[null,4],\"4489\":[1],\"4490\":[null,13],\"4491\":[null,11],\"4492\":[null,10],\"4493\":[1],\"4494\":[null,5],\"4495\":[null,5],\"4496\":[null,7],\"4497\":[null,5],\"4498\":[null,4],\"4499\":[null,4],\"4500\":[null,5],\"4501\":[null,5],\"4502\":[null,5],\"4503\":[null,5],\"4504\":[null,5],\"4505\":[null,11],\"4506\":[null,5],\"4507\":[null,5],\"4508\":[null,5],\"4509\":[null,5],\"4510\":[null,3],\"4511\":[null,5],\"4512\":[null,8],\"4513\":[null,5],\"4514\":[4],\"4515\":[null,12],\"4516\":[null,14],\"4517\":[null,6],\"4518\":[null,1],\"4519\":[null,6],\"4520\":[null,3],\"4521\":[null,3],\"4522\":[null,3],\"4523\":[null,13],\"4524\":[null,7],\"4525\":[null,16],\"4526\":[null,12],\"4527\":[null,5],\"4528\":[null,8],\"4529\":[null,7],\"4530\":[null,5],\"4531\":[null,7],\"4532\":[null,7],\"4533\":[null,6],\"4534\":[null,21],\"4535\":[4],\"4536\":[null,12],\"4537\":[null,7],\"4538\":[null,1],\"4539\":[null,2],\"4540\":[null,16],\"4541\":[null,12],\"4542\":[null,5],\"4543\":[null,5],\"4544\":[null,10],\"4545\":[null,13],\"4546\":[null,8],\"4547\":[null,7],\"4548\":[null,6],\"4549\":[null,6],\"4550\":[null,11],\"4551\":[null,7],\"4552\":[null,10],\"4553\":[4],\"4554\":[null,11],\"4555\":[null,8],\"4556\":[null,1],\"4557\":[null,2],\"4558\":[null,12],\"4559\":[null,11],\"4560\":[null,6],\"4561\":[null,8],\"4562\":[null,7],\"4563\":[null,4],\"4564\":[null,5],\"4565\":[null,12],\"4566\":[1],\"4567\":[1],\"4568\":[1],\"4569\":[5],\"4570\":[null,8],\"4571\":[null,11],\"4572\":[null,7],\"4573\":[null,3],\"4574\":[null,2],\"4575\":[null,12],\"4576\":[null,9],\"4577\":[null,2],\"4578\":[null,3],\"4579\":[null,23],\"4580\":[null,2],\"4581\":[null,6],\"4582\":[null,7],\"4583\":[null,5],\"4584\":[null,2],\"4585\":[null,6],\"4586\":[null,8],\"4587\":[null,3],\"4588\":[null,6],\"4589\":[null,10],\"4590\":[null,3],\"4591\":[null,9],\"4592\":[null,13],\"4593\":[1],\"4594\":[null,3],\"4595\":[2],\"4596\":[null,2],\"4597\":[null,10],\"4598\":[null,15],\"4599\":[null,15],\"4600\":[null,3],\"4601\":[null,15],\"4602\":[null,7],\"4603\":[null,4],\"4604\":[null,11],\"4605\":[null,4],\"4606\":[null,9],\"4607\":[null,15],\"4608\":[null,20],\"4609\":[null,37],\"4610\":[1],\"4611\":[null,2],\"4612\":[null,18],\"4613\":[null,4],\"4614\":[null,12],\"4615\":[null,14],\"4616\":[null,2],\"4617\":[null,6],\"4618\":[null,13],\"4619\":[null,2],\"4620\":[null,8],\"4621\":[null,3],\"4622\":[null,7],\"4623\":[null,5],\"4624\":[null,5],\"4625\":[null,14],\"4626\":[2],\"4627\":[null,2],\"4628\":[null,5],\"4629\":[null,16],\"4630\":[null,1],\"4631\":[2],\"4632\":[null,9],\"4633\":[null,4],\"4634\":[null,6],\"4635\":[null,11],\"4636\":[null,7],\"4637\":[null,7],\"4638\":[null,15],\"4639\":[null,1],\"4640\":[2],\"4641\":[null,8],\"4642\":[null,13],\"4643\":[null,2],\"4644\":[null,12],\"4645\":[null,3],\"4646\":[null,2],\"4647\":[null,11],\"4648\":[null,8],\"4649\":[2],\"4650\":[null,16],\"4651\":[null,4],\"4652\":[null,2],\"4653\":[null,3],\"4654\":[null,2],\"4655\":[null,3],\"4656\":[null,6],\"4657\":[2],\"4658\":[null,19],\"4659\":[null,5],\"4660\":[null,12],\"4661\":[2],\"4662\":[null,8],\"4663\":[null,1],\"4664\":[null,25],\"4665\":[null,1],\"4666\":[null,14],\"4667\":[2],\"4668\":[null,2],\"4669\":[null,15],\"4670\":[null,3],\"4671\":[null,6],\"4672\":[null,5],\"4673\":[null,8],\"4674\":[null,2],\"4675\":[null,6],\"4676\":[null,2],\"4677\":[null,6],\"4678\":[null,4],\"4679\":[null,11],\"4680\":[null,2],\"4681\":[null,14],\"4682\":[null,2],\"4683\":[null,16],\"4684\":[null,2],\"4685\":[null,4],\"4686\":[null,2],\"4687\":[null,3],\"4688\":[null,4],\"4689\":[null,3],\"4690\":[null,4],\"4691\":[null,7],\"4692\":[null,6],\"4693\":[null,1],\"4694\":[1],\"4695\":[null,7],\"4696\":[null,1],\"4697\":[2],\"4698\":[null,3],\"4699\":[null,6],\"4700\":[null,5],\"4701\":[null,6],\"4702\":[null,7],\"4703\":[null,3],\"4704\":[null,3],\"4705\":[null,2],\"4706\":[null,5],\"4707\":[null,2],\"4708\":[null,3],\"4709\":[null,7],\"4710\":[null,4],\"4711\":[null,12],\"4712\":[null,8],\"4713\":[null,12],\"4714\":[null,4],\"4715\":[null,6],\"4716\":[2],\"4717\":[null,3],\"4718\":[null,2],\"4719\":[null,3],\"4720\":[null,2],\"4721\":[null,4],\"4722\":[1],\"4723\":[null,2],\"4724\":[null,6],\"4725\":[null,12],\"4726\":[null,4],\"4727\":[null,7],\"4728\":[null,4],\"4729\":[null,3],\"4730\":[null,4],\"4731\":[null,7],\"4732\":[1],\"4733\":[null,3],\"4734\":[null,5],\"4735\":[null,7],\"4736\":[null,5],\"4737\":[null,6],\"4738\":[null,14],\"4739\":[null,15],\"4740\":[null,4],\"4741\":[null,5],\"4742\":[null,8],\"4743\":[null,12],\"4744\":[null,11],\"4745\":[null,15],\"4746\":[null,12],\"4747\":[null,7],\"4748\":[null,10],\"4749\":[null,11],\"4750\":[1],\"4751\":[null,3],\"4752\":[null,8],\"4753\":[null,8],\"4754\":[null,8],\"4755\":[null,9],\"4756\":[null,5],\"4757\":[null,12],\"4758\":[null,11],\"4759\":[null,4],\"4760\":[null,9],\"4761\":[null,11],\"4762\":[null,3],\"4763\":[3],\"4764\":[null,6],\"4765\":[null,8],\"4766\":[null,6],\"4767\":[null,12],\"4768\":[null,11],\"4769\":[null,7],\"4770\":[null,10],\"4771\":[null,9],\"4772\":[null,13],\"4773\":[null,13],\"4774\":[null,11],\"4775\":[null,8],\"4776\":[null,5],\"4777\":[null,6],\"4778\":[null,17],\"4779\":[null,10],\"4780\":[null,16],\"4781\":[2],\"4782\":[null,6],\"4783\":[null,9],\"4784\":[null,10],\"4785\":[null,14],\"4786\":[null,8],\"4787\":[null,1],\"4788\":[null,2],\"4789\":[null,5],\"4790\":[null,6],\"4791\":[null,10],\"4792\":[2],\"4793\":[null,10],\"4794\":[null,11],\"4795\":[null,10],\"4796\":[2],\"4797\":[null,6],\"4798\":[null,13],\"4799\":[null,11],\"4800\":[3],\"4801\":[null,12],\"4802\":[null,7],\"4803\":[null,11],\"4804\":[null,14],\"4805\":[null,10],\"4806\":[1],\"4807\":[null,7],\"4808\":[null,8],\"4809\":[null,5],\"4810\":[null,7],\"4811\":[null,10],\"4812\":[1],\"4813\":[null,7],\"4814\":[null,11],\"4815\":[null,6],\"4816\":[null,17],\"4817\":[null,38],\"4818\":[null,12],\"4819\":[null,6],\"4820\":[null,3],\"4821\":[null,6],\"4822\":[null,6],\"4823\":[null,5],\"4824\":[null,2],\"4825\":[1],\"4826\":[null,8],\"4827\":[null,2],\"4828\":[null,17],\"4829\":[null,11],\"4830\":[1],\"4831\":[null,6],\"4832\":[null,2],\"4833\":[null,16],\"4834\":[1],\"4835\":[null,7],\"4836\":[null,2],\"4837\":[null,16],\"4838\":[null,11],\"4839\":[null,12],\"4840\":[1],\"4841\":[null,6],\"4842\":[null,6],\"4843\":[null,6],\"4844\":[null,9],\"4845\":[null,8],\"4846\":[null,2],\"4847\":[null,1],\"4848\":[null,4],\"4849\":[null,6],\"4850\":[null,6],\"4851\":[null,6],\"4852\":[null,6],\"4853\":[null,11],\"4854\":[null,13],\"4855\":[null,14],\"4856\":[null,7],\"4857\":[null,14],\"4858\":[null,20],\"4859\":[null,2],\"4860\":[null,6],\"4861\":[null,5],\"4862\":[null,24],\"4863\":[1],\"4864\":[null,25],\"4865\":[null,1],\"4866\":[null,5],\"4867\":[null,16],\"4868\":[null,10],\"4869\":[null,9],\"4870\":[null,4],\"4871\":[null,30],\"4872\":[null,2],\"4873\":[null,10],\"4874\":[null,15],\"4875\":[null,16],\"4876\":[null,9],\"4877\":[null,2],\"4878\":[2],\"4879\":[null,4],\"4880\":[null,1],\"4881\":[null,9],\"4882\":[null,10],\"4883\":[null,13],\"4884\":[1],\"4885\":[null,3],\"4886\":[null,4],\"4887\":[null,10],\"4888\":[1],\"4889\":[1],\"4890\":[null,2],\"4891\":[3],\"4892\":[null,3],\"4893\":[null,5],\"4894\":[1],\"4895\":[null,4],\"4896\":[3],\"4897\":[null,3],\"4898\":[null,2],\"4899\":[null,14],\"4900\":[null,6],\"4901\":[1],\"4902\":[null,4],\"4903\":[1],\"4904\":[null,4],\"4905\":[1],\"4906\":[null,10],\"4907\":[3],\"4908\":[5],\"4909\":[null,6],\"4910\":[null,2],\"4911\":[null,3],\"4912\":[4],\"4913\":[null,15],\"4914\":[null,15],\"4915\":[1],\"4916\":[1],\"4917\":[3],\"4918\":[null,6],\"4919\":[null,4],\"4920\":[null,9],\"4921\":[null,4],\"4922\":[1],\"4923\":[null,13],\"4924\":[null,9],\"4925\":[1],\"4926\":[3],\"4927\":[2],\"4928\":[null,7],\"4929\":[null,10],\"4930\":[null,21],\"4931\":[null,15],\"4932\":[null,12],\"4933\":[2],\"4934\":[null,8],\"4935\":[null,4],\"4936\":[null,7],\"4937\":[3],\"4938\":[2],\"4939\":[null,3],\"4940\":[null,19],\"4941\":[null,6],\"4942\":[null,11],\"4943\":[2],\"4944\":[null,10],\"4945\":[3],\"4946\":[2],\"4947\":[null,3],\"4948\":[null,12],\"4949\":[null,7],\"4950\":[2],\"4951\":[null,3],\"4952\":[3],\"4953\":[2],\"4954\":[null,3],\"4955\":[null,20],\"4956\":[null,7],\"4957\":[null,10],\"4958\":[2],\"4959\":[null,12],\"4960\":[3],\"4961\":[2],\"4962\":[null,3],\"4963\":[null,11],\"4964\":[null,6],\"4965\":[null,10],\"4966\":[2],\"4967\":[null,6],\"4968\":[1],\"4969\":[null,9],\"4970\":[null,4],\"4971\":[null,6],\"4972\":[null,9],\"4973\":[4],\"4974\":[null,12],\"4975\":[null,8],\"4976\":[null,19],\"4977\":[3],\"4978\":[null,5],\"4979\":[null,6],\"4980\":[null,9],\"4981\":[4],\"4982\":[null,17],\"4983\":[null,3],\"4984\":[null,18],\"4985\":[null,7],\"4986\":[null,11],\"4987\":[3],\"4988\":[null,5],\"4989\":[null,6],\"4990\":[null,13],\"4991\":[null,14],\"4992\":[null,9],\"4993\":[null,9],\"4994\":[null,6],\"4995\":[null,4],\"4996\":[null,16],\"4997\":[null,5],\"4998\":[null,3],\"4999\":[null,2],\"5000\":[1],\"5001\":[2],\"5002\":[null,11],\"5003\":[null,4],\"5004\":[null,10],\"5005\":[null,11],\"5006\":[null,11],\"5007\":[null,14],\"5008\":[null,5],\"5009\":[3],\"5010\":[null,12],\"5011\":[null,5],\"5012\":[null,12],\"5013\":[null,9],\"5014\":[null,9],\"5015\":[null,11],\"5016\":[null,9],\"5017\":[null,7],\"5018\":[null,4],\"5019\":[null,12],\"5020\":[null,10],\"5021\":[1],\"5022\":[1],\"5023\":[3],\"5024\":[2],\"5025\":[null,10],\"5026\":[2],\"5027\":[null,8],\"5028\":[null,3],\"5029\":[null,24],\"5030\":[null,2],\"5031\":[null,8],\"5032\":[null,8],\"5033\":[null,8],\"5034\":[null,3],\"5035\":[null,4],\"5036\":[null,4],\"5037\":[null,4],\"5038\":[null,4],\"5039\":[null,2],\"5040\":[null,7],\"5041\":[null,5],\"5042\":[2],\"5043\":[null,13],\"5044\":[2],\"5045\":[null,2],\"5046\":[null,3],\"5047\":[null,5],\"5048\":[2],\"5049\":[null,6],\"5050\":[null,10],\"5051\":[2],\"5052\":[null,3],\"5053\":[null,10],\"5054\":[null,4],\"5055\":[2],\"5056\":[null,4],\"5057\":[null,5],\"5058\":[null,3],\"5059\":[null,2],\"5060\":[null,2],\"5061\":[null,4],\"5062\":[null,2],\"5063\":[2],\"5064\":[null,5],\"5065\":[5],\"5066\":[null,8],\"5067\":[1],\"5068\":[1],\"5069\":[null,3],\"5070\":[null,2],\"5071\":[null,2],\"5072\":[null,5],\"5073\":[null,6],\"5074\":[null,3],\"5075\":[null,19],\"5076\":[null,13],\"5077\":[1],\"5078\":[2],\"5079\":[null,1],\"5080\":[null,3],\"5081\":[null,3],\"5082\":[null,5],\"5083\":[null,1],\"5084\":[null,3],\"5085\":[null,4],\"5086\":[null,8],\"5087\":[null,77],\"5088\":[2],\"5089\":[null,1],\"5090\":[null,10],\"5091\":[null,6],\"5092\":[null,1],\"5093\":[null,10],\"5094\":[null,2],\"5095\":[null,2],\"5096\":[null,69],\"5097\":[null,13],\"5098\":[null,2],\"5099\":[null,3],\"5100\":[null,6],\"5101\":[null,4],\"5102\":[null,4],\"5103\":[null,1],\"5104\":[null,13],\"5105\":[null,2],\"5106\":[null,19],\"5107\":[null,2],\"5108\":[null,4],\"5109\":[null,1],\"5110\":[null,11],\"5111\":[null,2],\"5112\":[null,2],\"5113\":[null,5],\"5114\":[null,5],\"5115\":[null,7],\"5116\":[null,6],\"5117\":[null,2],\"5118\":[null,5],\"5119\":[null,28],\"5120\":[1],\"5121\":[1],\"5122\":[null,29],\"5123\":[1],\"5124\":[null,2],\"5125\":[null,1],\"5126\":[null,10],\"5127\":[null,4],\"5128\":[null,32],\"5129\":[2],\"5130\":[2],\"5131\":[null,5],\"5132\":[2],\"5133\":[null,10],\"5134\":[null,1],\"5135\":[null,5],\"5136\":[null,1],\"5137\":[2],\"5138\":[null,8],\"5139\":[null,1],\"5140\":[null,5],\"5141\":[null,1],\"5142\":[null,10],\"5143\":[3],\"5144\":[null,6],\"5145\":[null,11],\"5146\":[null,3],\"5147\":[2],\"5148\":[4],\"5149\":[null,5],\"5150\":[null,9],\"5151\":[null,8],\"5152\":[null,11],\"5153\":[null,5],\"5154\":[3],\"5155\":[null,3],\"5156\":[null,12],\"5157\":[null,4],\"5158\":[null,2],\"5159\":[2],\"5160\":[null,2],\"5161\":[2],\"5162\":[null,52],\"5163\":[2],\"5164\":[null,3],\"5165\":[null,9],\"5166\":[null,7],\"5167\":[null,11],\"5168\":[1],\"5169\":[null,6],\"5170\":[null,11],\"5171\":[4],\"5172\":[null,5],\"5173\":[null,9],\"5174\":[null,8],\"5175\":[null,11],\"5176\":[null,5],\"5177\":[3],\"5178\":[null,3],\"5179\":[null,12],\"5180\":[1],\"5181\":[3],\"5182\":[null,1],\"5183\":[null,15],\"5184\":[null,2],\"5185\":[null,2],\"5186\":[null,2],\"5187\":[null,3],\"5188\":[null,3],\"5189\":[null,1],\"5190\":[null,1],\"5191\":[2],\"5192\":[null,2],\"5193\":[3],\"5194\":[null,1],\"5195\":[1],\"5196\":[1],\"5197\":[1],\"5198\":[1],\"5199\":[null,23],\"5200\":[null,5],\"5201\":[null,22],\"5202\":[null,3],\"5203\":[null,4],\"5204\":[null,2],\"5205\":[3],\"5206\":[null,13],\"5207\":[null,13],\"5208\":[null,18],\"5209\":[null,15],\"5210\":[null,7],\"5211\":[null,32],\"5212\":[null,16],\"5213\":[null,21],\"5214\":[null,16],\"5215\":[null,15],\"5216\":[null,5],\"5217\":[3],\"5218\":[null,29],\"5219\":[null,19],\"5220\":[null,9],\"5221\":[null,11],\"5222\":[null,14],\"5223\":[null,20],\"5224\":[null,13],\"5225\":[null,8],\"5226\":[null,9],\"5227\":[null,12],\"5228\":[null,12],\"5229\":[1],\"5230\":[3],\"5231\":[null,7],\"5232\":[null,3],\"5233\":[6],\"5234\":[null,7],\"5235\":[null,23],\"5236\":[null,21],\"5237\":[null,17],\"5238\":[7],\"5239\":[null,16],\"5240\":[null,13],\"5241\":[null,12],\"5242\":[null,14],\"5243\":[7],\"5244\":[null,30],\"5245\":[null,19],\"5246\":[null,28],\"5247\":[1],\"5248\":[5],\"5249\":[null,7],\"5250\":[null,9],\"5251\":[null,24],\"5252\":[null,12],\"5253\":[1],\"5254\":[null,8],\"5255\":[null,3],\"5256\":[null,7],\"5257\":[null,8],\"5258\":[null,2],\"5259\":[null,4],\"5260\":[null,5],\"5261\":[null,6],\"5262\":[null,5],\"5263\":[null,6],\"5264\":[null,7],\"5265\":[2],\"5266\":[null,17],\"5267\":[null,20],\"5268\":[null,15],\"5269\":[null,13],\"5270\":[null,10],\"5271\":[null,14],\"5272\":[null,8],\"5273\":[null,7],\"5274\":[1],\"5275\":[2],\"5276\":[2],\"5277\":[5],\"5278\":[null,2],\"5279\":[null,2],\"5280\":[null,2],\"5281\":[null,2],\"5282\":[null,2],\"5283\":[null,6],\"5284\":[4],\"5285\":[null,6],\"5286\":[null,4],\"5287\":[null,8],\"5288\":[null,5],\"5289\":[null,5],\"5290\":[null,5],\"5291\":[null,2],\"5292\":[null,7],\"5293\":[null,5],\"5294\":[null,3],\"5295\":[null,5],\"5296\":[null,9],\"5297\":[null,5],\"5298\":[null,5],\"5299\":[null,2],\"5300\":[null,6],\"5301\":[null,2],\"5302\":[null,2],\"5303\":[null,4],\"5304\":[null,6],\"5305\":[null,4],\"5306\":[2],\"5307\":[3],\"5308\":[null,7],\"5309\":[null,5],\"5310\":[null,4],\"5311\":[null,5],\"5312\":[null,10],\"5313\":[null,2],\"5314\":[null,4],\"5315\":[null,4],\"5316\":[null,8],\"5317\":[null,6],\"5318\":[null,2],\"5319\":[null,9],\"5320\":[null,5],\"5321\":[2],\"5322\":[5],\"5323\":[null,5],\"5324\":[null,2],\"5325\":[null,2],\"5326\":[null,2],\"5327\":[null,5],\"5328\":[null,2],\"5329\":[null,3],\"5330\":[null,4],\"5331\":[null,7],\"5332\":[null,3],\"5333\":[null,2],\"5334\":[null,3],\"5335\":[null,3],\"5336\":[null,2],\"5337\":[null,2],\"5338\":[null,3],\"5339\":[null,2],\"5340\":[null,2],\"5341\":[null,2],\"5342\":[null,3],\"5343\":[null,2],\"5344\":[1],\"5345\":[2],\"5346\":[null,15],\"5347\":[null,16],\"5348\":[null,7],\"5349\":[null,2],\"5350\":[null,7],\"5351\":[null,8],\"5352\":[null,4],\"5353\":[null,2],\"5354\":[null,9],\"5355\":[null,5],\"5356\":[null,2],\"5357\":[null,2],\"5358\":[null,4],\"5359\":[2],\"5360\":[3],\"5361\":[null,8],\"5362\":[null,2],\"5363\":[null,8],\"5364\":[3],\"5365\":[null,2],\"5366\":[null,14],\"5367\":[null,11],\"5368\":[null,2],\"5369\":[null,10],\"5370\":[3],\"5371\":[null,2],\"5372\":[null,2],\"5373\":[null,2],\"5374\":[3],\"5375\":[null,2],\"5376\":[null,2],\"5377\":[null,2],\"5378\":[2],\"5379\":[null,4],\"5380\":[null,7],\"5381\":[null,7],\"5382\":[null,7],\"5383\":[null,9],\"5384\":[null,2],\"5385\":[null,11],\"5386\":[null,11],\"5387\":[null,2],\"5388\":[null,2],\"5389\":[2],\"5390\":[null,2],\"5391\":[null,4],\"5392\":[null,3],\"5393\":[null,2],\"5394\":[null,5],\"5395\":[null,2],\"5396\":[null,2],\"5397\":[null,3],\"5398\":[null,2],\"5399\":[null,2],\"5400\":[2],\"5401\":[null,2],\"5402\":[null,14],\"5403\":[null,15],\"5404\":[null,2],\"5405\":[null,4],\"5406\":[2],\"5407\":[null,2],\"5408\":[null,10],\"5409\":[null,4],\"5410\":[null,2],\"5411\":[null,4],\"5412\":[null,8],\"5413\":[null,4],\"5414\":[null,3],\"5415\":[null,4],\"5416\":[null,5],\"5417\":[null,5],\"5418\":[null,2],\"5419\":[null,6],\"5420\":[null,2],\"5421\":[null,2],\"5422\":[null,3],\"5423\":[null,5],\"5424\":[null,4],\"5425\":[null,2],\"5426\":[null,4],\"5427\":[null,8],\"5428\":[null,2],\"5429\":[null,2],\"5430\":[null,1],\"5431\":[null,2],\"5432\":[null,1],\"5433\":[null,3],\"5434\":[null,7],\"5435\":[null,3],\"5436\":[null,3],\"5437\":[null,6],\"5438\":[null,7],\"5439\":[null,5],\"5440\":[2],\"5441\":[null,2],\"5442\":[null,4],\"5443\":[null,2],\"5444\":[null,3],\"5445\":[null,2],\"5446\":[null,11],\"5447\":[null,9],\"5448\":[null,2],\"5449\":[null,3],\"5450\":[null,2],\"5451\":[null,2],\"5452\":[null,2],\"5453\":[2],\"5454\":[null,2],\"5455\":[null,2],\"5456\":[null,5],\"5457\":[null,5],\"5458\":[null,7],\"5459\":[null,11],\"5460\":[2],\"5461\":[null,24],\"5462\":[3],\"5463\":[3],\"5464\":[2],\"5465\":[1],\"5466\":[1],\"5467\":[2],\"5468\":[3],\"5469\":[2],\"5470\":[2],\"5471\":[1],\"5472\":[6],\"5473\":[1],\"5474\":[1],\"5475\":[3],\"5476\":[1],\"5477\":[1],\"5478\":[1],\"5479\":[1],\"5480\":[1],\"5481\":[4],\"5482\":[1],\"5483\":[1],\"5484\":[2],\"5485\":[1],\"5486\":[1],\"5487\":[1]},\"averageFieldLength\":[1.7843129933162938,7.453008043653909],\"storedFields\":{\"0\":{\"h\":\"Slide page\"},\"1\":{\"h\":\"主要功能与配置演示\"},\"2\":{\"h\":\"目录\",\"a\":\"目录\"},\"3\":{\"t\":\"Markdown 展示\"},\"4\":{\"t\":\"页面展示\"},\"5\":{\"t\":\"禁用展示\"},\"6\":{\"t\":\"加密展示\"},\"7\":{\"h\":\"布局与功能禁用\"},\"8\":{\"t\":\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\"},\"9\":{\"t\":\"本页面就是一个示例，禁用了如下功能:\"},\"10\":{\"t\":\"导航栏\"},\"11\":{\"t\":\"侧边栏\"},\"12\":{\"t\":\"路径导航\"},\"13\":{\"t\":\"页面信息\"},\"14\":{\"t\":\"贡献者\"},\"15\":{\"t\":\"编辑此页链接\"},\"16\":{\"t\":\"更新时间\"},\"17\":{\"t\":\"上一篇/下一篇 链接\"},\"18\":{\"t\":\"评论\"},\"19\":{\"t\":\"页脚\"},\"20\":{\"t\":\"返回顶部按钮\"},\"21\":{\"h\":\"密码加密的文章\"},\"22\":{\"t\":\"实际的文章内容。\"},\"23\":{\"t\":\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\"},\"24\":{\"t\":\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"},\"25\":{\"h\":\"Markdown 展示\"},\"26\":{\"t\":\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\"},\"27\":{\"t\":\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"},\"28\":{\"h\":\"Markdown 介绍\",\"a\":\"markdown-介绍\"},\"29\":{\"t\":\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"},\"30\":{\"h\":\"Markdown 配置\",\"a\":\"markdown-配置\"},\"31\":{\"t\":\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\"},\"32\":{\"t\":\"相关信息\"},\"33\":{\"t\":\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"},\"34\":{\"h\":\"Markdown 扩展\",\"a\":\"markdown-扩展\"},\"35\":{\"t\":\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"},\"36\":{\"h\":\"VuePress 扩展\",\"a\":\"vuepress-扩展\"},\"37\":{\"t\":\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\"},\"38\":{\"t\":\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"},\"39\":{\"h\":\"主题扩展\",\"a\":\"主题扩展\"},\"40\":{\"t\":\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"},\"41\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"42\":{\"t\":\"安全的在 Markdown 中使用 {{ variable }}。\"},\"43\":{\"t\":\"自定义标题\"},\"44\":{\"t\":\"信息容器，包含 代码 与 链接。\"},\"45\":{\"t\":\"const a = 1; \"},\"46\":{\"t\":\"自定义标题\"},\"47\":{\"t\":\"提示容器\"},\"48\":{\"t\":\"自定义标题\"},\"49\":{\"t\":\"警告容器\"},\"50\":{\"t\":\"自定义标题\"},\"51\":{\"t\":\"危险容器\"},\"52\":{\"t\":\"自定义标题\"},\"53\":{\"t\":\"详情容器\"},\"54\":{\"t\":\"查看详情\"},\"55\":{\"h\":\"代码块\",\"a\":\"代码块\"},\"56\":{\"t\":\"查看详情\"},\"57\":{\"h\":\"上下角标\",\"a\":\"上下角标\"},\"58\":{\"t\":\"19th H2O\"},\"59\":{\"t\":\"查看详情\"},\"60\":{\"h\":\"自定义对齐\",\"a\":\"自定义对齐\"},\"61\":{\"t\":\"我是居中的\"},\"62\":{\"t\":\"我在右对齐\"},\"63\":{\"t\":\"查看详情\"},\"64\":{\"h\":\"Attrs\",\"a\":\"attrs\"},\"65\":{\"t\":\"一个拥有 ID 的 单词。\"},\"66\":{\"t\":\"查看详情\"},\"67\":{\"h\":\"脚注\",\"a\":\"脚注\"},\"68\":{\"t\":\"此文字有脚注[1].\"},\"69\":{\"t\":\"查看详情\"},\"70\":{\"h\":\"标记\",\"a\":\"标记\"},\"71\":{\"t\":\"你可以标记 重要的内容 。\"},\"72\":{\"t\":\"查看详情\"},\"73\":{\"h\":\"任务列表\",\"a\":\"任务列表\"},\"74\":{\"t\":\" 计划 1\"},\"75\":{\"t\":\" 计划 2\"},\"76\":{\"t\":\"查看详情\"},\"77\":{\"h\":\"图片增强\",\"a\":\"图片增强\"},\"78\":{\"t\":\"支持为图片设置颜色模式和大小\"},\"79\":{\"t\":\"查看详情\"},\"80\":{\"h\":\"卡片\",\"a\":\"卡片\"},\"81\":{\"t\":\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mrhope.site/logo.svg link: https://mrhope.site color: rgba(253, 230, 138, 0.15) \"},\"82\":{\"t\":\"查看详情\"},\"83\":{\"h\":\"图表\",\"a\":\"图表\"},\"84\":{\"t\":\"查看详情\"},\"85\":{\"h\":\"Echarts\",\"a\":\"echarts\"},\"86\":{\"t\":\"查看详情\"},\"87\":{\"h\":\"流程图\",\"a\":\"流程图\"},\"88\":{\"t\":\"查看详情\"},\"89\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"90\":{\"t\":\"查看详情\"},\"91\":{\"h\":\"Tex 语法\",\"a\":\"tex-语法\"},\"92\":{\"t\":\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\"},\"93\":{\"t\":\"查看详情\"},\"94\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"95\":{\"t\":\"Markdown 展示\"},\"96\":{\"t\":\"页面展示\"},\"97\":{\"t\":\"禁用展示\"},\"98\":{\"t\":\"加密展示\"},\"99\":{\"t\":\"查看详情\"},\"100\":{\"h\":\"代码演示\",\"a\":\"代码演示\"},\"101\":{\"t\":\"查看详情\"},\"102\":{\"h\":\"样式化\",\"a\":\"样式化\"},\"103\":{\"t\":\"向 Mr.Hope 捐赠一杯咖啡。 \"},\"104\":{\"t\":\"查看详情\"},\"105\":{\"h\":\"交互演示\",\"a\":\"交互演示\"},\"106\":{\"t\":\"查看详情\"},\"107\":{\"h\":\"Vue 交互演示\",\"a\":\"vue-交互演示\"},\"108\":{\"t\":\"查看详情\"},\"109\":{\"h\":\"幻灯片\",\"a\":\"幻灯片\"},\"110\":{\"t\":\"查看详情\"},\"111\":{\"t\":\"这是脚注内容 ↩︎\"},\"112\":{\"h\":\"页面配置\"},\"113\":{\"t\":\"more 注释之前的内容被视为文章摘要。\"},\"114\":{\"h\":\"页面信息\",\"a\":\"页面信息\"},\"115\":{\"t\":\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\"},\"116\":{\"t\":\"作者设置为 Ms.Hope。\"},\"117\":{\"t\":\"写作日期为 2020 年 1 月 1 日\"},\"118\":{\"t\":\"分类为 “使用指南”\"},\"119\":{\"t\":\"标签为 “页面配置” 和 “使用指南”\"},\"120\":{\"h\":\"页面内容\",\"a\":\"页面内容\"},\"121\":{\"t\":\"你可以自由在这里书写你的 Markdown。\"},\"122\":{\"t\":\"提示\"},\"123\":{\"t\":\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\"},\"124\":{\"t\":\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"},\"125\":{\"t\":\"主题包含了一个自定义徽章可以使用:\"},\"126\":{\"t\":\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"},\"127\":{\"h\":\"页面结构\",\"a\":\"页面结构\"},\"128\":{\"t\":\"此页面应当包含:\"},\"129\":{\"t\":\"路径导航\"},\"130\":{\"t\":\"标题和页面信息\"},\"131\":{\"t\":\"TOC (文章标题列表)\"},\"132\":{\"t\":\"贡献者、更新时间等页面元信息\"},\"133\":{\"t\":\"评论\"},\"134\":{\"t\":\"导航栏\"},\"135\":{\"t\":\"侧边栏\"},\"136\":{\"t\":\"页脚\"},\"137\":{\"t\":\"返回顶部按钮\"},\"138\":{\"t\":\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"},\"139\":{\"h\":\"指南\"},\"140\":{\"h\":\"功能亮点\",\"a\":\"功能亮点\"},\"141\":{\"h\":\"Bar\",\"a\":\"bar\"},\"142\":{\"t\":\"baz\"},\"143\":{\"t\":\"...\"},\"144\":{\"h\":\"Foo\",\"a\":\"foo\"},\"145\":{\"t\":\"ray\"},\"146\":{\"t\":\"...\"},\"147\":{\"h\":\"写在前面\"},\"148\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"149\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"150\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"151\":{\"h\":\"项目主页\"},\"152\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"153\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"154\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"155\":{\"h\":\"幻灯片页\"},\"156\":{\"h\":\"Bar 功能\"},\"157\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"158\":{\"t\":\"我们支持 bar 功能，...\"},\"159\":{\"h\":\"详情\",\"a\":\"详情\"},\"160\":{\"t\":\"baz\"},\"161\":{\"t\":\"...\"},\"162\":{\"h\":\"Baz\"},\"163\":{\"t\":\"功能详情...\"},\"164\":{\"h\":\"Foo 功能\"},\"165\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"166\":{\"t\":\"我们支持 foo 功能，...\"},\"167\":{\"h\":\"详情\",\"a\":\"详情\"},\"168\":{\"t\":\"ray\"},\"169\":{\"t\":\"...\"},\"170\":{\"h\":\"Ray\"},\"171\":{\"t\":\"功能详情...\"},\"172\":{\"h\":\"JVM\"},\"173\":{\"h\":\"二：JVM\",\"a\":\"二-jvm\"},\"174\":{\"h\":\"基本概念\",\"a\":\"基本概念\"},\"175\":{\"h\":\"说一下 Jvm 的主要组成部分？及其作用？\",\"a\":\"说一下-jvm-的主要组成部分-及其作用\"},\"176\":{\"t\":\"类加载器（ClassLoader）\"},\"177\":{\"t\":\"运行时数据区（Runtime Data Area）\"},\"178\":{\"t\":\"执行引擎（Execution Engine）\"},\"179\":{\"t\":\"本地库接口（Native Interface）\"},\"180\":{\"t\":\"首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\"},\"181\":{\"h\":\"内存结构（运行时数据区）\",\"a\":\"内存结构-运行时数据区\"},\"182\":{\"h\":\"垃圾回收机制\",\"a\":\"垃圾回收机制\"},\"183\":{\"h\":\"如何判断对象是否可回收？\",\"a\":\"如何判断对象是否可回收\"},\"184\":{\"h\":\"垃圾回收算法\",\"a\":\"垃圾回收算法\"},\"185\":{\"h\":\"垃圾收集器\",\"a\":\"垃圾收集器\"},\"186\":{\"h\":\"类加载机制\",\"a\":\"类加载机制\"},\"187\":{\"h\":\"类的生命周期\",\"a\":\"类的生命周期\"},\"188\":{\"t\":\"类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，前三个阶段可以统称为连接（Linking）。\"},\"189\":{\"t\":\"这 7 个阶段的顺序如下图所示：\"},\"190\":{\"t\":\"一个类的完整生命周期\"},\"191\":{\"h\":\"类加载过程\",\"a\":\"类加载过程\"},\"192\":{\"t\":\"Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？\"},\"193\":{\"t\":\"系统加载 Class 类型的文件主要三步：加载->连接->初始化。连接过程又可分为三步：验证->准备->解析。\"},\"194\":{\"t\":\"类加载过程\"},\"195\":{\"h\":\"类加载器\",\"a\":\"类加载器\"},\"196\":{\"h\":\"介绍：\",\"a\":\"介绍\"},\"197\":{\"t\":\"类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。\"},\"198\":{\"t\":\"每个 Java 类都有一个引用指向加载它的 ClassLoader。\"},\"199\":{\"t\":\"数组类不是通过 ClassLoader 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。\"},\"200\":{\"t\":\"简单来说，类加载器的主要作用就是加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。\"},\"201\":{\"h\":\"类加载器加载规则\",\"a\":\"类加载器加载规则\"},\"202\":{\"t\":\"JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。\"},\"203\":{\"t\":\"对于已经加载的类会被放在 ClassLoader 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。\"},\"204\":{\"h\":\"类加载器总结\",\"a\":\"类加载器总结\"},\"205\":{\"t\":\"JVM 中内置了三个重要的 ClassLoader：\"},\"206\":{\"t\":\"BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ %JAVA_HOME%/lib目录下的 rt.jar 、resources.jar 、charsets.jar等 jar 包和类）以及被 -Xbootclasspath参数指定的路径下的所有类。\"},\"207\":{\"t\":\"ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类以及被 java.ext.dirs 系统变量所指定的路径下的所有类。\"},\"208\":{\"t\":\"AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。\"},\"209\":{\"t\":\"除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ .class 文件）进行加密，加载时再利用自定义的类加载器对其解密。\"},\"210\":{\"t\":\"如果我们要自定义自己的类加载器，很明显需要继承 ClassLoader抽象类。\"},\"211\":{\"t\":\"ClassLoader 类有两个关键的方法：\"},\"212\":{\"t\":\"protected Class loadClass(String name, boolean resolve)：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resove 如果为 true，在加载时调用 resolveClass(Class<?> c) 方法解析该类。\"},\"213\":{\"t\":\"protected Class findClass(String name)：根据类的二进制名称来查找类，默认实现是空方法。\"},\"214\":{\"t\":\"官方 API 文档中写到：\"},\"215\":{\"t\":\"Subclasses of ClassLoader are encouraged to override findClass(String name), rather than this method.\"},\"216\":{\"t\":\"建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。\"},\"217\":{\"t\":\"如果我们不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 loadClass() 方法。\"},\"218\":{\"t\":\"类加载器层次关系图\"},\"219\":{\"h\":\"双亲委派模型\",\"a\":\"双亲委派模型\"},\"220\":{\"t\":\"类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载呢？这就需要提到双亲委派模型了。\"},\"221\":{\"t\":\"ClassLoader 类使用委托模型来搜索类和资源。\"},\"222\":{\"t\":\"双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。\"},\"223\":{\"t\":\"ClassLoader 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。\"},\"224\":{\"t\":\"下图展示的各种类加载器之间的层次关系被称为类加载器的“双亲委派模型(Parents Delegation Model)”。\"},\"225\":{\"t\":\"类加载器层次关系图\"},\"226\":{\"t\":\"双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在 java.lang.ClassLoader 的 loadClass() 中，相关代码如下所示。\"},\"227\":{\"t\":\"protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { //首先，检查该类是否已经加载过 Class c = findLoadedClass(name); if (c == null) { //如果 c 为 null，则说明该类没有被加载过 long t0 = System.nanoTime(); try { if (parent != null) { //当父类的加载器不为空，则通过父类的loadClass来加载该类 c = parent.loadClass(name, false); } else { //当父类的加载器为空，则调用启动类加载器来加载该类 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { //非空父类的类加载器无法找到相应的类，则抛出异常 } if (c == null) { //当父类加载器无法加载时，则调用findClass方法来加载该类 //用户可通过覆写该方法，来自定义类加载器 long t1 = System.nanoTime(); c = findClass(name); //用于统计类加载器相关的信息 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { //对类进行link操作 resolveClass(c); } return c; } } \"},\"228\":{\"t\":\"每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。\"},\"229\":{\"t\":\"结合上面的源码，简单总结一下双亲委派模型的执行流程：\"},\"230\":{\"t\":\"在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。\"},\"231\":{\"t\":\"类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 BootstrapClassLoader 中。\"},\"232\":{\"t\":\"只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 findClass() 方法来加载类）。\"},\"233\":{\"t\":\"优点：\"},\"234\":{\"t\":\"双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。\"},\"235\":{\"h\":\"1.异常和反射\"},\"236\":{\"h\":\"1.1异常\",\"a\":\"_1-1异常\"},\"237\":{\"h\":\"1.1.1Java异常类层次结构?\",\"a\":\"_1-1-1java异常类层次结构\"},\"238\":{\"t\":\"Throwable是 Java 语言中所有错误与异常的超类。 \"},\"239\":{\"t\":\"Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。\"},\"240\":{\"t\":\"Exception 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。\"},\"241\":{\"t\":\"运行时异常\"},\"242\":{\"t\":\"都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。\"},\"243\":{\"t\":\"运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。\"},\"244\":{\"t\":\"非运行时异常 （编译异常）\"},\"245\":{\"t\":\"是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。\"},\"246\":{\"h\":\"1.1.2可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）区别？\",\"a\":\"_1-1-2可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions-区别\"},\"247\":{\"t\":\"可查异常（编译器要求必须处置的异常）：\"},\"248\":{\"t\":\"正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。\"},\"249\":{\"t\":\"除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。\"},\"250\":{\"t\":\"不可查异常(编译器不要求强制处置的异常)\"},\"251\":{\"t\":\"包括运行时异常（RuntimeException与其子类）和错误（Error）。\"},\"252\":{\"h\":\"1.1.3throw和throws的区别？\",\"a\":\"_1-1-3throw和throws的区别\"},\"253\":{\"t\":\"异常的申明(throws)\"},\"254\":{\"t\":\"在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：\"},\"255\":{\"t\":\"public static void method() throws IOException, FileNotFoundException{ //something statements } \"},\"256\":{\"t\":\"异常的抛出(throw)\"},\"257\":{\"t\":\"如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：\"},\"258\":{\"t\":\"public static double method(int value) { if(value == 0) { throw new ArithmeticException(\\\"参数不能为0\\\"); //抛出一个运行时异常 } return 5.0 / value; } \"},\"259\":{\"h\":\"1.1.4Java 7 的 try-with-resource?\",\"a\":\"_1-1-4java-7-的-try-with-resource\"},\"260\":{\"t\":\"如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。\"},\"261\":{\"t\":\"public void automaticallyCloseResource() { File file = new File(\\\"./tmp.txt\\\"); try (FileInputStream inputStream = new FileInputStream(file);) { // use the inputStream to read a file } catch (FileNotFoundException e) { log.error(e); } catch (IOException e) { log.error(e); } } \"},\"262\":{\"t\":\"看下它的背后：\"},\"263\":{\"t\":\"public static transient void main(String args[]) { BufferedReader br; Throwable throwable; br = new BufferedReader(new FileReader(\\\"d:\\\\\\\\ hollischuang.xml\\\")); throwable = null; String line; try { while((line = br.readLine()) != null) System.out.println(line); } catch(Throwable throwable2) { throwable = throwable2; throw throwable2; } if(br != null) if(throwable != null) try { br.close(); } catch(Throwable throwable1) { throwable.addSuppressed(throwable1); } else br.close(); break MISSING_BLOCK_LABEL_113; Exception exception; exception; if(br != null) if(throwable != null) try { br.close(); } catch(Throwable throwable3) { throwable.addSuppressed(throwable3); } else br.close(); throw exception; IOException ioexception; ioexception; } } \"},\"264\":{\"t\":\"其实背后的原理也很简单，那些我们没有做的关闭资源的操作，编译器都帮我们做了。所以，再次印证了，语法糖的作用就是方便程序员的使用，但最终还是要转成编译器认识的语言。\"},\"265\":{\"h\":\"1.1.5finally和return的执行顺序\",\"a\":\"_1-1-5finally和return的执行顺序\"},\"266\":{\"t\":\"try() ⾥⾯有⼀个return语句， 那么后⾯的finally{}⾥⾯的code会不会被执⾏， 什么时候执⾏， 是在return前还是return后?\"},\"267\":{\"t\":\"如果try中有return语句， 那么finally中的代码还是会执⾏。因为return表⽰的是要整个⽅法体返回， 所以，finally中的语句会在return之前执⾏。\"},\"268\":{\"t\":\"但是return前执行的finally块内，对数据的修改效果对于引用类型和值类型会不同：\"},\"269\":{\"t\":\"// 测试 修改值类型 static int f() { int ret = 0; try { return ret; // 返回 0，finally内的修改效果不起作用 } finally { ret++; System.out.println(\\\"finally执行\\\"); } } // 测试 修改引用类型 static int[] f2(){ int[] ret = new int[]{0}; try { return ret; // 返回 [1]，finally内的修改效果起了作用 } finally { ret[0]++; System.out.println(\\\"finally执行\\\"); } } \"},\"270\":{\"h\":\"1.1.6异常的底层？\",\"a\":\"_1-1-6异常的底层\"},\"271\":{\"t\":\"提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。\"},\"272\":{\"t\":\"public static void simpleTryCatch() { try { testNPE(); } catch (Exception e) { e.printStackTrace(); } } \"},\"273\":{\"t\":\"使用javap来分析这段代码（需要先使用javac编译）：\"},\"274\":{\"t\":\"//javap -c Main public static void simpleTryCatch(); Code: 0: invokestatic #3 // Method testNPE:()V 3: goto 11 6: astore_0 7: aload_0 8: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 11: return Exception table: from to target type 0 3 6 Class java/lang/Exception \"},\"275\":{\"t\":\"看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。\"},\"276\":{\"t\":\"异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下\"},\"277\":{\"t\":\"from 可能发生异常的起始点\"},\"278\":{\"t\":\"to 可能发生异常的结束点\"},\"279\":{\"t\":\"target 上述from和to之前发生异常后的异常处理者的位置\"},\"280\":{\"t\":\"type 异常处理者处理的异常的类信息\"},\"281\":{\"h\":\"1.2反射\",\"a\":\"_1-2反射\"},\"282\":{\"h\":\"1.2.1什么是反射机制?\",\"a\":\"_1-2-1什么是反射机制\"},\"283\":{\"t\":\"JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制。\"},\"284\":{\"t\":\"直接new对象就叫正射。\"},\"285\":{\"t\":\"如下:\"},\"286\":{\"t\":\"Map<String, String> map = new HashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"287\":{\"t\":\"那反射是啥？我先不说反射是啥，概念啥的太虚幻我就不说了，把你绕蒙你这篇文章就白看了，直接举例吧\"},\"288\":{\"t\":\"接着看上面的正射，如果哪天你发现用LinkedHashMap效果更好，然后你修改代码：\"},\"289\":{\"t\":\"Map<String, String> map = new LinkedHashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"290\":{\"t\":\"改完了编译运行没有bug然而过了两天你发现用LinkedHashMap会有隐患，还是得改回去用HashMap，成年人的崩溃如此简单，但是聪明的你想到可以加个判断，根据传入的条件来决定用HashMap还是LinkedHashMap，于是：\"},\"291\":{\"t\":\"public Map<String, String> getMap(String param) { Map<String, String> map = null; if (param.equals(\\\"HashMap\\\")) { map = new HashMap<>(); } else if (param.equals(\\\"LinkedHashMap\\\")) { map = new LinkedHashMap<>(); } return map; } \"},\"292\":{\"t\":\"大功告成，这么难的逻辑都被你实现了，然后你得用TreeMap，你又要改代码。\"},\"293\":{\"t\":\"有没有一种办法可以让你不修改代码呢，这时候反射就派上用场了。\"},\"294\":{\"t\":\"概念：反射是Java的一种机制，让我们可以在运行时获取类的信息\"},\"295\":{\"t\":\"作用：通过反射，我们可以在程序运行时动态创建对象，还能获取到类的所有信息，比如它的属性、构造器、方法、注解等；\"},\"296\":{\"t\":\"直接举例吧：\"},\"297\":{\"t\":\"public Map<String, String> getMap(String className) { Class clazz = Class.forName(className); Constructor constructor = clazz.getConstructor(); return (Map<String, String>) constructor.newInstance(); } \"},\"298\":{\"t\":\"这时候不管你需要什么Map，只要实现了Map接口，你都能通过getMap获得，只需要传入对应Map的全限定名，例如java.util.HashMap / java.util.LinkedHashMap。\"},\"299\":{\"t\":\"java中反射的用法非常非常多，常见的有以下这几个：\"},\"300\":{\"t\":\"一、在运行时获取一个类的 Class 对象 二、在运行时构造一个类的实例化对象 三、在运行时获取一个类的所有信息：变量、方法、构造器、注解 \"},\"301\":{\"h\":\"1.2.2获取class对象\",\"a\":\"_1-2-2获取class对象\"},\"302\":{\"t\":\"三种方法 1、类名.class：这种获取方式只有在编译前已经声明了该类的类型才能获取到 Class 对象\"},\"303\":{\"t\":\"Class<HashMap> hashMap= HashMap.class; \"},\"304\":{\"t\":\"2、实例.getClass()：通过实例化对象获取该实例的 Class 对象\"},\"305\":{\"t\":\"Map<String, String> hashMap = new HashMap<>(); Class<? extends Map> hashMapClass = hashMap.getClass(); \"},\"306\":{\"t\":\"3、Class.forName(“类的全限定名”)：通过类的全限定名获取该类的 Class 对象\"},\"307\":{\"t\":\"Class<?> hashMap= Class.forName(\\\"java.util.HashMap\\\"); \"},\"308\":{\"t\":\"拿到 Class对象就可以对它为所欲为了：调用它的方法、获取属性、获取类信息，总之它在你面前就没有隐私了，好羞羞，嘤~。\"},\"309\":{\"h\":\"1.2.3构造类的实例化对象\",\"a\":\"_1-2-3构造类的实例化对象\"},\"310\":{\"t\":\"通过反射构造一个类的实例方式有2种： 1、Class 对象调用newInstance()方法\"},\"311\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); HashMap hashMapInstance = (HashMap) hashMapClass.newInstance(); \"},\"312\":{\"t\":\"注意：即使 HashMap已经显式定义了构造方法，通过 newInstance() 创建的实例中，所有属性值都是对应类型的初始值，因为 newInstance() 构造实例会调用默认无参构造器。\"},\"313\":{\"t\":\"2、Constructor 构造器调用newInstance()方法\"},\"314\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); Constructor<?> constructor = hashMapClass.getConstructor(); constructor.setAccessible(true); HashMap newInstance = (HashMap) constructor.newInstance(); \"},\"315\":{\"t\":\"通过 getConstructor(Object… paramTypes) 方法指定获取指定参数类型的 Constructor， Constructor 调用 newInstance(Object… paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。\"},\"316\":{\"t\":\"通过Class对象调用 newInstance() 会走默认无参构造方法，如果想通过显式构造方法构造实例，需要提前从Class中调用getConstructor()方法获取对应的构造器，通过构造器去实例化对象。\"},\"317\":{\"h\":\"1.2.4获取类的所有信息\",\"a\":\"_1-2-4获取类的所有信息\"},\"318\":{\"t\":\"1、获取类中的变量（Field）\"},\"319\":{\"t\":\"Field[] getFields()：获取类中所有被public修饰的所有变量 Field getField(String name)：根据变量名获取类中的一个变量，该变量必须被public修饰 Field[] getDeclaredFields()：获取类中所有的变量，但无法获取继承下来的变量 Field getDeclaredField(String name)：根据姓名获取类中的某个变量，无法获取继承下来的变量 \"},\"320\":{\"t\":\"2、获取类中的方法（Method）\"},\"321\":{\"t\":\"Method[] getMethods()：获取类中被public修饰的所有方法 Method getMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，该方法必须被public修饰 Method[] getDeclaredMethods()：获取所有方法，但无法获取继承下来的方法 Method getDeclaredMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，无法获取继承下来的方法 \"},\"322\":{\"t\":\"3、获取类的构造器（Constructor）\"},\"323\":{\"t\":\"Constuctor[] getConstructors()：获取类中所有被public修饰的构造器 Constructor getConstructor(Class…<?> paramTypes)：根据参数类型获取类中某个构造器，该构造器必须被public修饰 Constructor[] getDeclaredConstructors()：获取类中所有构造器 Constructor getDeclaredConstructor(class…<?> paramTypes)：根据参数类型获取对应的构造器 \"},\"324\":{\"t\":\"反射的应用场景\"},\"325\":{\"t\":\"1、Spring 实例化对象：当程序启动时，Spring 会读取配置文件applicationContext.xml并解析出里面所有的标签实例化到IOC容器中。 2、反射 + 工厂模式：通过反射消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，反射可以使得程序更加健壮。 3、JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的驱动类时用到反射加载驱动类 \"},\"326\":{\"t\":\"参考：https://blog.csdn.net/qq_33709582/article/details/113550163\"},\"327\":{\"h\":\"2.List\"},\"328\":{\"t\":\"相关信息\"},\"329\":{\"t\":\"Collection 是一个集合接口。 它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。是list，set等的父接口。\"},\"330\":{\"t\":\"相关信息\"},\"331\":{\"t\":\"Collections 是一个包装类。 它包含有各种有关集合操作的静态多态方法。此类不能实例化，就像一个工具类，服务于Java的Collection框架。\"},\"332\":{\"h\":\"1.ArrayList\",\"a\":\"_1-arraylist\"},\"333\":{\"t\":\"对于ArrayList，它的特点是内部采用动态数组实现，这决定了以下几点。\"},\"334\":{\"t\":\"可以随机访问，按照索引位置进行访问效率很高，用算法描述中的术语，效率是O(1)，简单说就是可以一步到位。\"},\"335\":{\"t\":\"除非数组已排序，否则按照内容查找元素效率比较低，具体是O(N), N为数组内容长度，也就是说，性能与数组长度成正比。\"},\"336\":{\"t\":\"添加元素的效率还可以，重新分配和复制数组的开销被平摊了，具体来说，添加N个元素的效率为O(N)。\"},\"337\":{\"t\":\"插入和删除元素的效率比较低，因为需要移动元素，具体为O(N)。\"},\"338\":{\"h\":\"2.LinkedList\",\"a\":\"_2-linkedlist\"},\"339\":{\"t\":\"用法上，LinkedList是一个List，但也实现了Deque接口，可以作为队列、栈和双端队列使用。实现原理上，LinkedList内部是一个双向链表，并维护了长度、头节点和尾节点，这决定了它有如下特点。\"},\"340\":{\"t\":\"按需分配空间，不需要预先分配很多空间。\"},\"341\":{\"t\":\"不可以随机访问，按照索引位置访问效率比较低，必须从头或尾顺着链接找，效率为O(N/2)。\"},\"342\":{\"t\":\"不管列表是否已排序，只要是按照内容查找元素，效率都比较低，必须逐个比较，效率为O(N)。\"},\"343\":{\"t\":\"在两端添加、删除元素的效率很高，为O(1)。\"},\"344\":{\"t\":\"在中间插入、删除元素，要先定位，效率比较低，为O(N)，但修改本身的效率很高，效率为O(1)。\"},\"345\":{\"t\":\"理解了LinkedList和ArrayList的特点，就能比较容易地进行选择了：\"},\"346\":{\"t\":\"如果列表长度未知，添加、删除操作比较多，尤其经常从两端进行操作，而按照索引位置访问相对比较少，则LinkedList是比较理想的选择。\"},\"347\":{\"h\":\"3.ArrayDeque\",\"a\":\"_3-arraydeque\"},\"348\":{\"t\":\"ArrayDeque实现了双端队列，内部使用循环数组实现，这决定了它有如下特点。\"},\"349\":{\"t\":\"在两端添加、删除元素的效率很高，动态扩展需要的内存分配以及数组复制开销可以被平摊，具体来说，添加N个元素的效率为O(N)。\"},\"350\":{\"t\":\"根据元素内容查找和删除的效率比较低，为O(N)。\"},\"351\":{\"t\":\"与ArrayList和LinkedList不同，没有索引位置的概念，不能根据索引位置进行操作。\"},\"352\":{\"t\":\"ArrayDeque和LinkedList都实现了Deque接口，应该用哪一个呢？（详见：https://www.youngxy.top/page/Java-SE/3.数据结构.html#java官方推荐的实现方式-deque）\"},\"353\":{\"t\":\"如果只需要Deque接口，从两端进行操作，一般而言，ArrayDeque效率更高一些，应该被优先使用；如果同时需要根据索引位置进行操作，或者经常需要在中间进行插入和删除，则应该选LinkedList。\"},\"354\":{\"h\":\"4.PriorityQueue\",\"a\":\"_4-priorityqueue\"},\"355\":{\"t\":\"PriorityQueue实现了队列接口Queue，但按优先级出队，内部是用堆实现的，有如下特点：\"},\"356\":{\"t\":\"实现了优先级队列，最先出队的总是优先级最高的，即排序中的第一个。\"},\"357\":{\"t\":\"优先级可以有相同的，内部元素不是完全有序的，如果遍历输出，除了第一个，其他没有特定顺序。\"},\"358\":{\"t\":\"查看头部元素的效率很高，为O(1)，入队、出队效率比较高，为O(log2(N))，构建堆heapify的效率为O(N)。\"},\"359\":{\"t\":\"根据值查找和删除元素的效率比较低，为O(N)。\"},\"360\":{\"h\":\"3.Set\"},\"361\":{\"h\":\"1.HashSet\",\"a\":\"_1-hashset\"},\"362\":{\"t\":\"HashSet实现了Set接口，内部实现利用了HashMap，有如下特点：\"},\"363\":{\"t\":\"1）没有重复元素； 2）可以高效地添加、删除元素、判断元素是否存在，效率都为O(1)； 3）没有顺序。 \"},\"364\":{\"t\":\"HashSet可以方便高效地实现去重、集合运算等功能。如果要保持添加的顺序，可以使用HashSet的一个子类LinkedHashSet。Set还有一个重要的实现类TreeSet，它可以排序。\"},\"365\":{\"h\":\"2.TreeSet\",\"a\":\"_2-treeset\"},\"366\":{\"t\":\"TreeSet实现了Set接口，但有序。在内部实现上，它基于TreeMap实现，而TreeMap基于大致平衡的排序二叉树：红黑树，这决定了它有如下特点。\"},\"367\":{\"t\":\"1）没有重复元素。 2）添加、删除元素、判断元素是否存在，效率比较高，为O(log2(N)), N为元素个数。 3）有序，TreeSet同样实现了SortedSet和NavigatableSet接口，可以方便地根据顺序进行查找和操作，如第一个、最后一个、某一取值范围、某一值的邻近元素等。 4）为了有序，TreeSet要求元素实现Comparable接口或通过构造方法提供一个Com-parator对象。 \"},\"368\":{\"h\":\"3.LinkedHashSet\",\"a\":\"_3-linkedhashset\"},\"369\":{\"t\":\"之前介绍的Map接口的实现类都有一个对应的Set接口的实现类，比如HashMap有HashSet,TreeMap有TreeSet, LinkedHashMap也不例外，它也有一个对应的Set接口的实现类LinkedHashSet。LinkedHashSet是HashSet的子类，它内部的Map的实现类是LinkedHashMap，所以它也可以保持插入顺序。\"},\"370\":{\"h\":\"4.Set和List区别？\",\"a\":\"_4-set和list区别\"},\"371\":{\"t\":\"List,Set都是继承自Collection接口。都是用来存储一组相同类型的元素的。\"},\"372\":{\"t\":\"List特点：元素有放入顺序，元素可重复 。\"},\"373\":{\"t\":\"有顺序，即先放入的元素排在前面。\"},\"374\":{\"t\":\"Set特点：元素无放入顺序，元素不可重复。\"},\"375\":{\"t\":\"无顺序，即先放入的元素不一定排在前面。 不可重复，即相同元素在set中只会保留一份。所以，有些场景下，set可以用来去重。 不过需要注意的是，set在元素插入时是要有一定的方法来判断元素是否重复的。这个方法很重要，决定了set中可以保存哪些元素。\"},\"376\":{\"h\":\"5.Set如何保证元素不重复?\",\"a\":\"_5-set如何保证元素不重复\"},\"377\":{\"t\":\"在Java的Set体系中，根据实现方式不同主要分为两大类。HashSet和TreeSet。\"},\"378\":{\"t\":\"1、TreeSet 是二叉树实现的，TreeSet中的数据是自动排好序的，不允许放入 null值\"},\"379\":{\"t\":\"2、HashSet 是哈希表实现的，HashSet中的数据是无序的，可以放入 null值，但只能放入一个null，两者中的值都不能重复，就如数据库中的唯一约束\"},\"380\":{\"t\":\"在HashSet中，基本的操作都是由HashMap底层实现的，因为HashSet底层是用HashMap存储数据的。当向HashSet中添加元素的时候，首先计算元素的hashCode值，然后通过扰动计算和按位与的方式计算出这个元素的存储位置，如果这个位置为空，就将元素添加进去；如果不为空，则用equals方法比较元素是否相等，相等就不添加，否则找一个空位添加。\"},\"381\":{\"t\":\"TreeSet的底层是TreeMap的keySet()，而TreeMap是基于红黑树实现的，红黑树是一种平衡二叉查找树，它能保证任何一个节点的左右子树的高度差不会超过较矮的那棵的一倍。\"},\"382\":{\"t\":\"TreeMap是按key排序的，元素在插入TreeSet时compareTo()方法要被调用，所以TreeSet中的元素要实现Comparable接口。TreeSet作为一种Set，它不允许出现重复元素。TreeSet是用compareTo()来判断重复元素的。\"},\"383\":{\"h\":\"4.Map\"},\"384\":{\"h\":\"1.HashMap\",\"a\":\"_1-hashmap\"},\"385\":{\"t\":\"HashMap实现了Map接口，可以方便地按照键存取值，内部使用数组链表和哈希的方式进行实现，这决定了它有如下特点：\"},\"386\":{\"t\":\"根据键保存和获取值的效率都很高，为O(1)，每个单向链表往往只有一个或少数几个节点，根据hash值就可以直接快速定位；\"},\"387\":{\"t\":\"HashMap中的键值对没有顺序，因为hash值是随机的。\"},\"388\":{\"t\":\"需要说明的是，HashMap不是线程安全的，Java中还有一个类Hashtable，它是Java最早实现的容器类之一，实现了Map接口，实现原理与HashMap类似，但没有特别的优化，它内部通过synchronized实现了线程安全。\"},\"389\":{\"t\":\"在HashMap中，键和值都可以为null，而在Hashtable中不可以。在不需要并发安全的场景中，推荐使用HashMap。在高并发的场景中，推荐使用ConcurrentHashMap。\"},\"390\":{\"h\":\"1.1HashMap的容量、扩容\",\"a\":\"_1-1hashmap的容量、扩容\"},\"391\":{\"t\":\"先来看一下，HashMap中都定义了哪些成员变量。\"},\"392\":{\"t\":\"上面是一张HashMap中主要的成员变量的图，其中有一个是我们本文主要关注的： size、loadFactor、threshold、DEFAULT_LOAD_FACTOR和DEFAULT_INITIAL_CAPACITY。\"},\"393\":{\"t\":\"我们先来简单解释一下这些参数的含义，然后再分析他们的作用。\"},\"394\":{\"t\":\"HashMap类中有以下主要成员变量：\"},\"395\":{\"t\":\"transient int size; \"},\"396\":{\"t\":\"记录了Map中KV对的个数\"},\"397\":{\"t\":\"loadFactor \"},\"398\":{\"t\":\"装载因子，用来衡量HashMap满的程度。loadFactor的默认值为0.75f（static final float DEFAULT_LOAD_FACTOR = 0.75f;）。\"},\"399\":{\"t\":\"int threshold; \"},\"400\":{\"t\":\"临界值，当实际KV个数超过threshold时，HashMap会将容量扩容，threshold＝容量*装载因子\"},\"401\":{\"t\":\"除了以上这些重要成员变量外，HashMap中还有一个和他们紧密相关的概念：capacity \"},\"402\":{\"t\":\"容量，如果不指定，默认容量是16(static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;)\"},\"403\":{\"t\":\"可能看完了你还是有点蒙，size和capacity之间有啥关系？为啥要定义这两个变量。loadFactor和threshold又是干啥的？\"},\"404\":{\"h\":\"1.2size 和 capacity\",\"a\":\"_1-2size-和-capacity\"},\"405\":{\"t\":\"HashMap中的size和capacity之间的区别其实解释起来也挺简单的。我们知道，HashMap就像一个“桶”，那么capacity就是这个桶“当前”最多可以装多少元素，而size表示这个桶已经装了多少元素。来看下以下代码：\"},\"406\":{\"t\":\" Map<String, String> map = new HashMap<String, String>(); map.put(\\\"hollis\\\", \\\"hollischuang\\\"); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); \"},\"407\":{\"t\":\"我们定义了一个新的HashMap，并想其中put了一个元素，然后通过反射的方式打印capacity和size。输出结果为：\"},\"408\":{\"t\":\"capacity : 16、size : 1\"},\"409\":{\"t\":\"默认情况下，一个HashMap的容量（capacity）是16，设计成16的好处主要是可以使用按位与替代取模来提升hash的效率。\"},\"410\":{\"t\":\"我们知道，HashMap的重载的构造函数中，有一个是支持传入initialCapacity的，那么我们尝试着设置一下，看结果如何。\"},\"411\":{\"t\":\" Map<String, String> map = new HashMap<String, String>(1); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Map<String, String> map = new HashMap<String, String>(7); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Map<String, String> map = new HashMap<String, String>(9); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); \"},\"412\":{\"t\":\"分别执行以上3段代码，分别输出：capacity : 1、capacity : 8、capacity : 16。\"},\"413\":{\"t\":\"也就是说，默认情况下HashMap的容量是16，但是，如果用户通过构造函数指定了一个数字作为容量，那么Hash会选择大于该数字的第一个2的幂作为容量。(1->1、7->8、9->16)\"},\"414\":{\"t\":\"相关信息\"},\"415\":{\"t\":\"这里有一个小建议：在初始化HashMap的时候，应该尽量指定其大小。尤其是当你已知map中存放的元素个数时。（《阿里巴巴Java开发规约》）\"},\"416\":{\"h\":\"1.3loadFactor 和 threshold\",\"a\":\"_1-3loadfactor-和-threshold\"},\"417\":{\"t\":\"前面我们提到过，HashMap有扩容机制，就是当达到扩容条件时会进行扩容，从16扩容到32、64、128...\"},\"418\":{\"t\":\"那么，这个扩容条件指的是什么呢？\"},\"419\":{\"t\":\"其实，HashMap的扩容条件就是当HashMap中的元素个数（size）超过临界值（threshold）时就会自动扩容。\"},\"420\":{\"t\":\"在HashMap中，threshold = loadFactor * capacity。\"},\"421\":{\"t\":\"loadFactor是装载因子，表示HashMap满的程度，默认值为0.75f，设置成0.75有一个好处，那就是0.75正好是3/4，而capacity又是2的幂。所以，两个数的乘积都是整数。\"},\"422\":{\"t\":\"对于一个默认的HashMap来说，默认情况下，当其size大于12(16*0.75)时就会触发扩容。\"},\"423\":{\"t\":\"验证代码如下：\"},\"424\":{\"t\":\" Map<String, String> map = new HashMap<>(); map.put(\\\"hollis1\\\", \\\"hollischuang\\\"); map.put(\\\"hollis2\\\", \\\"hollischuang\\\"); map.put(\\\"hollis3\\\", \\\"hollischuang\\\"); map.put(\\\"hollis4\\\", \\\"hollischuang\\\"); map.put(\\\"hollis5\\\", \\\"hollischuang\\\"); map.put(\\\"hollis6\\\", \\\"hollischuang\\\"); map.put(\\\"hollis7\\\", \\\"hollischuang\\\"); map.put(\\\"hollis8\\\", \\\"hollischuang\\\"); map.put(\\\"hollis9\\\", \\\"hollischuang\\\"); map.put(\\\"hollis10\\\", \\\"hollischuang\\\"); map.put(\\\"hollis11\\\", \\\"hollischuang\\\"); map.put(\\\"hollis12\\\", \\\"hollischuang\\\"); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); Field threshold = mapType.getDeclaredField(\\\"threshold\\\"); threshold.setAccessible(true); System.out.println(\\\"threshold : \\\" + threshold.get(map)); Field loadFactor = mapType.getDeclaredField(\\\"loadFactor\\\"); loadFactor.setAccessible(true); System.out.println(\\\"loadFactor : \\\" + loadFactor.get(map)); map.put(\\\"hollis13\\\", \\\"hollischuang\\\"); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); Field threshold = mapType.getDeclaredField(\\\"threshold\\\"); threshold.setAccessible(true); System.out.println(\\\"threshold : \\\" + threshold.get(map)); Field loadFactor = mapType.getDeclaredField(\\\"loadFactor\\\"); loadFactor.setAccessible(true); System.out.println(\\\"loadFactor : \\\" + loadFactor.get(map)); \"},\"425\":{\"t\":\"输出结果：\"},\"426\":{\"t\":\"capacity : 16 size : 12 threshold : 12 loadFactor : 0.75 capacity : 32 size : 13 threshold : 24 loadFactor : 0.75 \"},\"427\":{\"t\":\"当HashMap中的元素个数达到13的时候，capacity就从16扩容到32了。\"},\"428\":{\"t\":\"相关信息\"},\"429\":{\"t\":\"HashMap中还提供了一个支持传入initialCapacity,loadFactor两个参数的方法，来初始化容量和装载因子。不过，一般不建议修改loadFactor的值。\"},\"430\":{\"h\":\"1.4总结\",\"a\":\"_1-4总结\"},\"431\":{\"t\":\"HashMap中size表示当前共有多少个KV对，capacity表示当前HashMap的容量是多少，默认值是16，每次扩容都是成倍的。loadFactor是装载因子，当Map中元素个数超过loadFactor* capacity的值时，会触发扩容。loadFactor* capacity可以用threshold表示。\"},\"432\":{\"t\":\"注意：文中分析基于JDK1.8.0_73\"},\"433\":{\"h\":\"2.TreeMap\",\"a\":\"_2-treemap\"},\"434\":{\"t\":\"TreeMap与HashMap相比，TreeMap同样实现了Map接口，但内部使用红黑树实现。红黑树是统计效率比较高的大致平衡的排序二叉树，这决定了它有如下特点：\"},\"435\":{\"t\":\"按键有序，TreeMap同样实现了SortedMap和NavigableMap接口，可以方便地根据键的顺序进行查找，如第一个、最后一个、某一范围的键、邻近键等。\"},\"436\":{\"t\":\"为了按键有序，TreeMap要求键实现Comparable接口或通过构造方法提供一个Com-parator对象。\"},\"437\":{\"t\":\"根据键保存、查找、删除的效率比较高，为O(h), h为树的高度，在树平衡的情况下，h为log2(N), N为节点数。\"},\"438\":{\"t\":\"HashMap还是TreeMap呢：不要求排序，优先考虑HashMap，要求排序，考虑TreeMap。\"},\"439\":{\"h\":\"3.LinkedHashMap\",\"a\":\"_3-linkedhashmap\"},\"440\":{\"t\":\"LinkedHashMap可以保持插入顺序或访问顺序。插入顺序经常用于处理键值对的数据，并保持其输入顺序，也经常用于键已经排好序的场景，相比TreeMap效率更高；访问顺序经常用于实现LRU缓存。实现原理上，它是HashMap的子类，但内部有一个双向链表以维护节点的顺序。\"},\"441\":{\"h\":\"5.List常见面试题\"},\"442\":{\"h\":\"1.ArrayList和LinkedList和Vector的区别\",\"a\":\"_1-arraylist和linkedlist和vector的区别\"},\"443\":{\"t\":\"List主要有ArrayList、LinkedList与Vector几种实现。\"},\"444\":{\"t\":\"这三者都实现了List 接口，使用方式也很相似,主要区别在于因为实现方式的不同,所以对不同的操作具有不同的效率。\"},\"445\":{\"t\":\"ArrayList 是一个可改变大小的数组.当更多的元素加入到ArrayList中时,其大小将会动态地增长.内部的元素可以直接通过get与set方法进行访问,因为ArrayList本质上就是一个数组。\"},\"446\":{\"t\":\"LinkedList 是一个双链表,在添加和删除元素时具有比ArrayList更好的性能.但在get与set方面弱于ArrayList。\"},\"447\":{\"t\":\"当然,这些对比都是指数据量很大或者操作很频繁的情况下的对比,如果数据和运算量很小,那么对比将失去意义。\"},\"448\":{\"t\":\"Vector 和ArrayList类似,但属于强同步类。如果你的程序本身是线程安全的(thread-safe,没有在多个线程之间共享同一个集合/对象),那么使用ArrayList是更好的选择。\"},\"449\":{\"t\":\"Vector和ArrayList在更多元素添加进来时会请求更大的空间。Vector每次请求其大小的双倍空间，而ArrayList每次对size增长50%。\"},\"450\":{\"t\":\"而 LinkedList 还实现了 Queue 接口,该接口比List提供了更多的方法,包括 offer(),peek(),poll()等。\"},\"451\":{\"t\":\"注意: 默认情况下ArrayList的初始容量非常小,所以如果可以预估数据量的话,分配一个较大的初始值属于最佳实践,这样可以减少调整大小的开销。\"},\"452\":{\"h\":\"2.ArrayList使用了transient关键字进行存储优化，而Vector没有，为什么？\",\"a\":\"_2-arraylist使用了transient关键字进行存储优化-而vector没有-为什么\"},\"453\":{\"t\":\"话不多说，上源码：\"},\"454\":{\"t\":\"ArrayList：\"},\"455\":{\"t\":\"/** * Save the state of the <tt>ArrayList</tt> instance to a stream (that * is, serialize it). * * @serialData The length of the array backing the <tt>ArrayList</tt> * instance is emitted (int), followed by all of its elements * (each an <tt>Object</tt>) in the proper order. */ private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException{ // Write out element count, and any hidden stuff int expectedModCount = modCount; s.defaultWriteObject(); // Write out array length s.writeInt(elementData.length); // Write out all elements in the proper order. for (int i=0; i<size; i++) s.writeObject(elementData[i]); if (modCount != expectedModCount) { throw new ConcurrentModificationException(); } } \"},\"456\":{\"t\":\"ArrayList实现了writeObject方法，可以看到只保存了非null的数组位置上的数据。即list的size个数的elementData。需要额外注意的一点是，ArrayList的实现，提供了fast-fail机制，可以提供弱一致性。\"},\"457\":{\"t\":\"Vector：\"},\"458\":{\"t\":\"/** * Save the state of the {@code Vector} instance to a stream (that * is, serialize it). * This method performs synchronization to ensure the consistency * of the serialized data. */ private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException { final java.io.ObjectOutputStream.PutField fields = s.putFields(); final Object[] data; synchronized (this) { fields.put(\\\"capacityIncrement\\\", capacityIncrement); fields.put(\\\"elementCount\\\", elementCount); data = elementData.clone(); } fields.put(\\\"elementData\\\", data); s.writeFields(); } \"},\"459\":{\"t\":\"Vector也实现了writeObject方法，但方法并没有像ArrayList一样进行优化存储，实现语句是\"},\"460\":{\"t\":\"data = elementData.clone(); \"},\"461\":{\"t\":\"clone()的时候会把null值也拷贝。所以保存相同内容的Vector与ArrayList，Vector的占用的字节比ArrayList要多。\"},\"462\":{\"t\":\"可以测试一下，序列化存储相同内容的Vector与ArrayList，分别到一个文本文件中去。 Vector需要243字节， ArrayList需要135字节。\"},\"463\":{\"t\":\"分析：\"},\"464\":{\"t\":\"ArrayList是非同步实现的一个单线程下较为高效的数据结构（相比Vector来说）。 ArrayList只通过一个修改记录字段提供弱一致性，主要用在迭代器里。没有同步方法。 即上面提到的Fast-fail机制.ArrayList的存储结构定义为transient，重写writeObject来实现自定义的序列化，优化了存储。\"},\"465\":{\"t\":\"Vector是多线程环境下更为可靠的数据结构，所有方法都实现了同步。\"},\"466\":{\"t\":\"区别：\"},\"467\":{\"t\":\"相关信息\"},\"468\":{\"t\":\"同步处理：Vector同步，ArrayList非同步 。\"},\"469\":{\"t\":\"Vector缺省情况下增长原来一倍的数组长度，ArrayList是0.5倍。ArrayList: int newCapacity = oldCapacity + (oldCapacity >> 1); ArrayList自动扩大容量为原来的1.5倍（实现的时候，方法会传入一个期望的最小容量，若扩容后容量仍然小于最小容量，那么容量就为传入的最小容量。扩容的时候使用的Arrays.copyOf方法最终调用native方法进行新数组创建和数据拷贝）。\"},\"470\":{\"t\":\"Vector: int newCapacity = oldCapacity + ((capacityIncrement > 0) ? capacityIncrement : oldCapacity);Vector指定了initialCapacity，capacityIncrement来初始化的时候，每次增长capacityIncrement。\"},\"471\":{\"h\":\"3.SynchronizedList和Vector的区别\",\"a\":\"_3-synchronizedlist和vector的区别\"},\"472\":{\"t\":\"Vector是java.util包中的一个类。 SynchronizedList是java.util.Collections中的一个静态内部类。\"},\"473\":{\"t\":\"在多线程的场景中可以直接使用Vector类，也可以使用Collections.synchronizedList(List list)方法来返回一个线程安全的List。\"},\"474\":{\"t\":\"那么，到底SynchronizedList和Vector有没有区别，为什么java api要提供这两种线程安全的List的实现方式呢？\"},\"475\":{\"t\":\"首先，我们知道Vector和Arraylist都是List的子类，他们底层的实现都是一样的。所以这里比较如下两个list1和list2的区别：\"},\"476\":{\"t\":\"List<String> list = new ArrayList<String>(); List list2 = Collections.synchronizedList(list); Vector<String> list1 = new Vector<String>(); \"},\"477\":{\"h\":\"3.1比较几个重要的方法。\",\"a\":\"_3-1比较几个重要的方法。\"},\"478\":{\"h\":\"3.1.1add方法：\",\"a\":\"_3-1-1add方法\"},\"479\":{\"t\":\"Vector的实现：\"},\"480\":{\"t\":\"public void add(int index, E element) { insertElementAt(element, index); } public synchronized void insertElementAt(E obj, int index) { modCount++; if (index > elementCount) { throw new ArrayIndexOutOfBoundsException(index + \\\" > \\\" + elementCount); } ensureCapacityHelper(elementCount + 1); System.arraycopy(elementData, index, elementData, index + 1, elementCount - index); elementData[index] = obj; elementCount++; } private void ensureCapacityHelper(int minCapacity) { // overflow-conscious code if (minCapacity - elementData.length > 0) grow(minCapacity); } \"},\"481\":{\"t\":\"synchronizedList的实现：\"},\"482\":{\"t\":\"public void add(int index, E element) { synchronized (mutex) { list.add(index, element); } } \"},\"483\":{\"t\":\"这里，使用同步代码块的方式调用ArrayList的add()方法。ArrayList的add方法内容如下：\"},\"484\":{\"t\":\"public void add(int index, E element) { rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; } private void rangeCheckForAdd(int index) { if (index > size || index < 0) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } private void ensureCapacityInternal(int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); } ensureExplicitCapacity(minCapacity); } \"},\"485\":{\"t\":\"从上面两段代码中发现有两处不同：\"},\"486\":{\"t\":\"1.Vector使用同步方法实现，synchronizedList使用同步代码块实现。\"},\"487\":{\"t\":\"2.两者的扩充数组容量方式不一样（两者的add方法在扩容方面的差别也就是ArrayList和Vector的差别。）\"},\"488\":{\"h\":\"3.1.2remove方法\",\"a\":\"_3-1-2remove方法\"},\"489\":{\"t\":\"synchronizedList的实现：\"},\"490\":{\"t\":\"public E remove(int index) { synchronized (mutex) {return list.remove(index);} } \"},\"491\":{\"t\":\"ArrayList类的remove方法内容如下：\"},\"492\":{\"t\":\"public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; } \"},\"493\":{\"t\":\"Vector的实现：\"},\"494\":{\"t\":\"public synchronized E remove(int index) { modCount++; if (index >= elementCount) throw new ArrayIndexOutOfBoundsException(index); E oldValue = elementData(index); int numMoved = elementCount - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--elementCount] = null; // Let gc do its work return oldValue; } \"},\"495\":{\"t\":\"从remove方法中我们发现除了一个使用同步方法，一个使用同步代码块之外几乎无任何区别。\"},\"496\":{\"t\":\"相关信息\"},\"497\":{\"t\":\"通过比较其他方法，我们发现，SynchronizedList里面实现的方法几乎都是使用同步代码块包上List的方法。如果该List是ArrayList那么，SynchronizedList和Vector的一个比较明显区别就是一个使用了同步代码块，一个使用了同步方法。\"},\"498\":{\"h\":\"3.2区别分析\",\"a\":\"_3-2区别分析\"},\"499\":{\"t\":\"数据增长区别\"},\"500\":{\"t\":\"相关信息\"},\"501\":{\"t\":\"从内部实现机制来讲ArrayList和Vector都是使用数组(Array)来控制集合中的对象。当你向这两种类型中增加元素的时候，如果元素的数目超出了内部数组目前的长度它们都需要扩展内部数组的长度，Vector缺省情况下自动增长原来一倍的数组长度，ArrayList是原来的50%,所以最后你获得的这个集合所占的空间总是比你实际需要的要大。所以如果你要在集合中保存大量的数据那么使用Vector有一些优势，因为你可以通过设置集合的初始化大小来避免不必要的资源开销。\"},\"502\":{\"t\":\"同步代码块和同步方法的区别\"},\"503\":{\"t\":\"相关信息\"},\"504\":{\"t\":\"同步代码块在锁定的范围上可能比同步方法要小，一般来说锁的范围大小和性能是成反比的。\"},\"505\":{\"t\":\"同步块可以更加精确的控制锁的作用域（锁的作用域就是从锁被获取到其被释放的时间），同步方法的锁的作用域就是整个方法。\"},\"506\":{\"t\":\"同步代码块可以选择对哪个对象加锁，但是静态方法只能给this对象加锁。\"},\"507\":{\"t\":\"因为SynchronizedList只是使用同步代码块包裹了ArrayList的方法，而ArrayList和Vector中同名方法的方法体内容并无太大差异，所以在锁定范围和锁的作用域上两者并无区别。\"},\"508\":{\"t\":\"在锁定的对象区别上，SynchronizedList的同步代码块锁定的是mutex对象，Vector锁定的是this对象。\"},\"509\":{\"t\":\"那么mutex对象又是什么呢？ 其实SynchronizedList有一个构造函数可以传入一个Object,如果在调用的时候显示的传入一个对象，那么锁定的就是用户传入的对象。如果没有指定，那么锁定的也是this对象。\"},\"510\":{\"t\":\"但是，凡事都有但是。 SynchronizedList中实现的类并没有都使用synchronized同步代码块。其中有listIterator和**listIterator(int index)**并没有做同步处理。但是Vector却对该方法加了方法锁。 所以说，在使用SynchronizedList进行遍历的时候要手动加锁。\"},\"511\":{\"t\":\"但是，但是之后还有但是。\"},\"512\":{\"t\":\"之前的比较都是基于我们将ArrayList转成SynchronizedList。那么如果我们想把LinkedList变成线程安全的，或者说我想要方便在中间插入和删除的同步的链表，那么我可以将已有的LinkedList直接转成 SynchronizedList，而不用改变他的底层数据结构。而这一点是Vector无法做到的，因为他的底层结构就是使用数组实现的，这个是无法更改的。\"},\"513\":{\"t\":\"所以，最后，SynchronizedList和Vector最主要的区别：\"},\"514\":{\"t\":\"SynchronizedList有很好的扩展和兼容功能。他可以将所有的List的子类转成线程安全的类。\"},\"515\":{\"t\":\"使用SynchronizedList的时候，进行遍历时要手动进行同步处理。\"},\"516\":{\"t\":\"SynchronizedList可以指定锁定的对象。\"},\"517\":{\"h\":\"6.Map常见面试题\"},\"518\":{\"h\":\"1.为什么JDK1.8中HashMap从头插入改成尾插入\",\"a\":\"_1-为什么jdk1-8中hashmap从头插入改成尾插入\"},\"519\":{\"t\":\"原文链接：https://blog.csdn.net/qq_35590459/article/details/108988011\"},\"520\":{\"t\":\"JDK1.7中扩容时，每个元素的rehash之后，都会插入到新数组对应索引的链表头，所以这就导致原链表顺序为A->B->C，扩容之后，rehash之后的链表可能为C->B->A，元素的顺序发生了变化。在并发场景下，扩容时可能会出现循环链表的情况。而JDK1.8从头插入改成尾插入元素的顺序不变，避免出现循环链表的情况。\"},\"521\":{\"h\":\"2.为什么JDK1.8采用红黑树存储 Hash 冲突的元素？\",\"a\":\"_2-为什么jdk1-8采用红黑树存储hash冲突的元素\"},\"522\":{\"t\":\"红黑树本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为O(log n)。能够加快检索速率。\"},\"523\":{\"h\":\"3.为什么在长度小于8时使用链表，不一直使用红黑树？\",\"a\":\"_3-为什么在长度小于8时使用链表-不一直使用红黑树\"},\"524\":{\"t\":\"桶中元素的插入只会在hash冲突时发生，而hash冲突发生的概率较小，一直维护一个红黑树比链表耗费资源更多，在桶中元素量较小时没有这个必要。\"},\"525\":{\"h\":\"4.为什么要使用红黑树而不使用AVL树？\",\"a\":\"_4-为什么要使用红黑树而不使用avl树\"},\"526\":{\"t\":\"红黑树与AVLl树，在检索的时候效率差不多，都是通过平衡来二分查找。但红黑树不像avl树一样追求绝对的平衡，红黑树允许局部很少的不完全平衡，这样对于效率影响不大，但省去了很多没有必要的调平衡操作，avl树调平衡有时候代价较大，所以效率不如红黑树。\"},\"527\":{\"h\":\"5.为什么数组容量必须是2次幂？\",\"a\":\"_5-为什么数组容量必须是2次幂\"},\"528\":{\"t\":\"索引计算公式为i = (n - 1) & hash，如果n为2次幂，那么n-1的低位就全是1，哈希值进行与操作时可以保证低位的值不变，从而保证分布均匀，效果等同于hash%n，但是位运算比取余运算要高效的多。\"},\"529\":{\"h\":\"6.为什么单链表转为红黑树要求桶内的元素个数大于8？\",\"a\":\"_6-为什么单链表转为红黑树要求桶内的元素个数大于8\"},\"530\":{\"t\":\"当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，而一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件。\"},\"531\":{\"t\":\"同理，少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗，而选择8作为临界值，是因理想情况下一个bin中元素个数达到6的概率是0.00001316，达到7的概率为0.00000094，二者跨度较大，可以减小树和链表之间频繁转化的可能性。\"},\"532\":{\"h\":\"7.HashMap和Hashtable的区别\",\"a\":\"_7-hashmap和hashtable的区别\"},\"533\":{\"t\":\"**共同点:**都是双列集合,底层都是哈希算法\"},\"534\":{\"t\":\"区别:\"},\"535\":{\"t\":\"HashMap是线程不安全的，效率高，JDK1.2版本\"},\"536\":{\"t\":\"Hashtable是线程安全的，效率低，JDK1.0版本\"},\"537\":{\"t\":\"HashMap可以存储null键和null值\"},\"538\":{\"t\":\"Hashtable不可以存储null键和null值\"},\"539\":{\"t\":\"HashTable是基于陈旧的Dictionary类继承来的。 HashMap继承的抽象类AbstractMap实现了Map接口。\"},\"540\":{\"t\":\"默认初始容量和扩容机制： HashTable中的hash数组初始大小是11，增加的方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。\"},\"541\":{\"t\":\"哈希值的使用不同 ： HashTable直接使用对象的hashCode。 HashMap重新计算hash值。\"},\"542\":{\"t\":\"遍历方式的内部实现上不同 ： Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式。HashMap 实现 Iterator，支持fast-fail，Hashtable的 Iterator 遍历支持fast-fail，用 Enumeration 不支持 fast-fail\"},\"543\":{\"t\":\"具体地，Hashtable是线程安全的，它的每个方法中都加入了Synchronize方法。在多线程并发的环境下，可以直接使用Hashtable，不需要自己为它的方法实现同步。\"},\"544\":{\"t\":\"HashMap不是线程安全的，在多线程并发的环境下，可能会产生死锁等问题。使用HashMap时就必须要自己增加同步处理。虽然HashMap不是线程安全的，但是它的效率会比Hashtable要好很多。这样设计是合理的。在我们的日常使用当中，大部分时间是单线程操作的。HashMap把这部分操作解放出来了。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。\"},\"545\":{\"t\":\"Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。\"},\"546\":{\"t\":\"HashMap的Iterator是fail-fast迭代器。当有其它线程改变了HashMap的结构（增加，删除，修改元素），将会抛出ConcurrentModificationException。\"},\"547\":{\"t\":\"JDK8之前的版本中，Hashtable是没有fast-fail机制的。在JDK8及以后的版本中 ，HashTable也是使用fast-fail的。\"},\"548\":{\"t\":\"HashMap与Hashtable的区别是面试中经常遇到的一个问题。这个问题看似简单，但如果深究进去，也能了解到不少知识。（原文链接：https://blog.csdn.net/yang13563758128/article/details/86655574?spm=1001.2014.3001.5502）\"},\"549\":{\"h\":\"8.HashMap、ConcurrentHashMap区别\",\"a\":\"_8-hashmap、concurrenthashmap区别\"},\"550\":{\"t\":\"ConcurrentHashMap和HashMap的实现方式不一样，虽然都是使用桶数组实现的，但是还是有区别，ConcurrentHashMap对桶数组进行了分段，而HashMap并没有。\"},\"551\":{\"t\":\"ConcurrentHashMap在每一个分段上都用锁进行了保护。HashMap没有锁机制。所以，前者线程安全的，后者不是线程安全的。\"},\"552\":{\"t\":\"注意：以上区别基于jdk1.8以前的版本。\"},\"553\":{\"h\":\"3.数据结构\"},\"554\":{\"h\":\"数组\",\"a\":\"数组\"},\"555\":{\"h\":\"链表\",\"a\":\"链表\"},\"556\":{\"h\":\"栈\",\"a\":\"栈\"},\"557\":{\"h\":\"Java官方推荐的实现方式：Deque\",\"a\":\"java官方推荐的实现方式-deque\"},\"558\":{\"t\":\"今日在刷LeetCode hot100的时候，看到K神题解下的一个评论：\"},\"559\":{\"t\":\"所以，我一个小白当然是去百度一下这个Deque为啥Java官方要推荐作为Stack的实现呢？\"},\"560\":{\"t\":\"话不多说，直接上菜！\"},\"561\":{\"h\":\"Q1：在 Java 语言中，不推荐使用 Stack 类？\",\"a\":\"q1-在-java-语言中-不推荐使用-stack-类\"},\"562\":{\"t\":\"是的。实际上，这个不推荐不是某个技术专家或者某个企业的规范标准，而是来自 Java 官方。\"},\"563\":{\"t\":\"如果大家在 Java 中查询 Stack 的文档，就会看到如下标为蓝色的说明：\"},\"564\":{\"t\":\"简单翻译：一个更加完整，一致的，后进先出的栈相关的操作，应该由 Deque 接口提供。并且，也推荐使用 Deque 这种数据结构（比如 ArrayDeque）来实现。\"},\"565\":{\"t\":\"因此，如果你想使用栈这种数据结构，Java 官方推荐的写法是这样的（假设容器中的类型是 Integer）：\"},\"566\":{\"t\":\"Deque<Integer> stack = new ArrayDeque<Integer>(); \"},\"567\":{\"h\":\"Q2：Java 中的 Stack 类到底怎么了？\",\"a\":\"q2-java-中的-stack-类到底怎么了\"},\"568\":{\"t\":\"Java 中的 Stack 类，最大的问题是，继承了 Vector 这个类。根据 Java 官方文档中的类关系，如下所示：\"},\"569\":{\"t\":\"Vector 是什么类？简单来说，Vector 就是一个动态数组。\"},\"570\":{\"t\":\"最大的问题在于，继承使得子类继承了父类的所有公有方法。\"},\"571\":{\"t\":\"而 Vector 作为动态数组，是有能力在数组中的任何位置添加或者删除元素的。因此，Stack 继承了 Vector，Stack 也有这样的能力！\"},\"572\":{\"t\":\"尝试如下的代码片段，在 Java 中是正确的：\"},\"573\":{\"t\":\"Stack<Integer> stack = new Stack<>(); stack.push(1); stack.push(2); stack.add(1, 666); \"},\"574\":{\"h\":\"Q3：问题出在哪里？\",\"a\":\"q3-问题出在哪里\"},\"575\":{\"t\":\"Java 中的 Stack 实现，是被业界一直认为非常糟糕的实现。实际上，它犯了面向对象设计领域的一个基本错误：Stack 和 Vector 之间的关系，不应该是继承关系，而应该是组合关系（composition）。\"},\"576\":{\"t\":\"关于继承关系和组合关系的区别，相信大家在 OOD 学习过程中，听过无数遍。\"},\"577\":{\"t\":\"继承关系描述的是 is-a 的关系，即“是一个”的关系。\"},\"578\":{\"t\":\"猫是一个动物，所以猫这个类可以继承动物类；\"},\"579\":{\"t\":\"程序员是一个雇员，所以程序员这个类可以继承雇员类。\"},\"580\":{\"t\":\"而组合关系描述的是 has-a 的关系，即“有一个”的关系。\"},\"581\":{\"t\":\"车里有一台发动机，所以发动机这个类和车这个类之间，应该是组合关系，即车中包含一个成员变量，是发动机这个类的对象；\"},\"582\":{\"t\":\"电脑里有 CPU，内存，显卡。所以 CPU，内存，显卡，这些类和电脑类之间的关系，都应该是组合关系。\"},\"583\":{\"t\":\"上面这些例子，都是我们在生活中看得到摸得到的实体，我们在做类设计的时候，通常不会犯糊涂。但遇到更抽象的对象的时候，事情可能就不一样了。\"},\"584\":{\"t\":\"比如，栈这种数据结构，和动态数组这种数据结构之间，到底应该是 is-a 的关系？还是 has-a 的关系？\"},\"585\":{\"t\":\"使用自然语言描述，听起来似乎说：栈是一个动态数组，毛病不大。但其实仔细思考，就会发现，栈不是一个动态数组！\"},\"586\":{\"t\":\"因此，很多时候，对于现实中并不存在的设计对象，人类很可能想不清楚 is-a 和 has-a 的关系。在这里，我再提供一个简单的原则：判断一下，如果设计成继承关系的话，我们是否有可能把子类进行向上的父类转型？如果可能，则应该设计成继承关系，否则应该是组合关系。\"},\"587\":{\"t\":\"换句话说，在这个例子中，我们是否可能将栈当做一个动态数组使用？答案是不可能。所以，栈和动态数组之间的关系不应该是继承关系。\"},\"588\":{\"t\":\"实际上，在真实的世界中，真正的继承关系是很少的。真正的继承关系中，父类大多是一个很抽象的概念，比如“人”，比如“动物”。但是我们设计的大多数类，不是这么抽象的概念。整体来说，组成关系更常用。\"},\"589\":{\"t\":\"这个概念不是我说的，而是业界公认的 OOP 设计原则。叫做：Composition over inheritance。如果用中文说，就是应该优先考虑组合关系。\"},\"590\":{\"t\":\"在 OOP 设计中，很多人会更倾向于使用继承关系，毕竟继承关系看起来更“面向对象”一些，也是面向对象讲解的重点。但是，在具体实践中，组合更常见！说得再绝对一些：多用组合，少用继承！\"},\"591\":{\"h\":\"Q4：Java 官方不知道这个 Stack 类的实现不好吗？为什么不改？\",\"a\":\"q4-java-官方不知道这个-stack-类的实现不好吗-为什么不改\"},\"592\":{\"t\":\"Java 官方当然知道这个实现不好。但是，因为要保持兼容性（backward compatibility），对于已经正式发布的代码，Java 官方不能做接口设计层面的修改。否则，使用老版本 Java 的程序，将在新的 Java 环境下无法执行，这是 Java 官方不愿意看到的。\"},\"593\":{\"t\":\"Java 官方可以做到的是，将这个类标志成“弃用”（deprecated），以让新版本的开发者不再允许使用这个类，但老版本的程序，还能继续执行。\"},\"594\":{\"t\":\"但是，这么多年了，Java 官方也并没有将 Stack 标为“弃用”，只是在文档上注明“不建议使用”。\"},\"595\":{\"h\":\"Q5：为什么使用接口？\",\"a\":\"q5-为什么使用接口\"},\"596\":{\"t\":\"下面，我们再来看一下 Java 官方推荐的写法：使用 Deque 接口：\"},\"597\":{\"t\":\"Deque<Integer> stack = new ArrayDeque<Integer>(); \"},\"598\":{\"t\":\"接口最大的意义之一，就是做了更高层次的抽象：只定义了一个类应该满足哪些方法，而对具体的实现方式不做限制。\"},\"599\":{\"t\":\"比如，我们都知道，在 Java 语言中，Queue 就是一个接口。我们想实现一个队列，可以这么写：\"},\"600\":{\"t\":\" Queue<Integer> q1 = new ArrayDeque<>(); Queue<Integer> q2 = new LinkedList<>(); \"},\"601\":{\"t\":\"在上述实现中，q1 和 q2 的底层具体实现不同，一个是 LinkedList，一个是 ArrayDeque。但是，从用户的角度看，q1 和 q2 是一致的：都是一个队列，只能执行队列规定的方法。\"},\"602\":{\"t\":\"这样做，将“队列”这样一个概念，和底层数据结构的具体实现——LinkedList 或者 ArrayDeque 解耦了：\"},\"603\":{\"t\":\"底层开发人员可以随意维护自己的 LinkedList 类或者 ArrayDeque 类，只要他们满足 Queue 接口规定的规范；\"},\"604\":{\"t\":\"开发者可以选择合适的数据结构来定义 Queue；\"},\"605\":{\"t\":\"而 Queue 的更上层使用者，无需知道 q1 或者 q2 的实现细节，从他们的角度看，只要能调用 Queue 的相关方法：peek, poll, offer 等等，来满足上层的业务需求，就好了。\"},\"606\":{\"t\":\"而且这样做，完美解决了之前说的，继承关系把父类的所有方法都拿过来的问题。接口的设计相当于做了访问限制。LinkedList 中有很多方法，但是，当我们使用 LinkedList 实现 Queue 接口的时候，用户只能调用 Queue 中定义的方法。\"},\"607\":{\"t\":\"从这个角度，我们也能看出 Stack 设计的另一个不合理之处：Stack 和 Queue 同样作为一种特殊的线性数据结构，都应该只是规定一系列操作的接口而已，具体的底层实现，由开发者再做选择。\"},\"608\":{\"t\":\"但因为 Stack 做成了一个类，继承了 Vector，也就只能基于 Vector 这一种固定的数据结构了。\"},\"609\":{\"t\":\"为了修正这个问题，Java 官方推出了 Deque 接口，作为实现栈的接口。\"},\"610\":{\"h\":\"Q6：什么是 Deque 接口？\",\"a\":\"q6-什么是-deque-接口\"},\"611\":{\"t\":\"Deque 是双端队列的意思。所谓的双端队列，就是能在线性数据结构的两段，进行插入和删除操作。\"},\"612\":{\"t\":\"大家可以想象，由于 Stack 的定义是在同一端进，同一端出。所以，如果 Deque 可以满足在两段进行插入和删除，自然也能在同一端进行插入和删除，也就是可以以此为基础，做成一个 Stack。\"},\"613\":{\"h\":\"Q7：等等！这里有问题！\",\"a\":\"q7-等等-这里有问题\"},\"614\":{\"t\":\"很多同学应该能马上反应过来了。这里有问题！\"},\"615\":{\"t\":\"因为我们根据 Java 官方推荐的方法声明的这个 Stack，虽然变量名称是Stack，但它实际上是一个 Deque。这就意味着，这个Stack，可以在两段做插入和删除操作！但是，真正的栈，只能在同一端做插入和删除操作！\"},\"616\":{\"t\":\"这难道不是重蹈了 Stack 这个类的覆辙？毕竟，我们最开始分析，就说 Stack 这个类的一大问题，是继承了 Vector 这个类的若干我们不需要的方法，破坏了封装性，比如在任何一个位置插入一个元素。现在这个基于 Deque 接口的Stack，依然有我们不需要的方法啊！\"},\"617\":{\"t\":\"没错！这就是 Java 的历史遗留问题了。这个问题至此已经无解了。因为 Stack 这个关键字被占据了。Java 官方不想推出一个叫做 RealStack 或者 CorrectStack 一类的接口名称。所以，按照 Java 官方的推荐所建立的这个Stack，依然不完美。\"},\"618\":{\"t\":\"但至今为止，Java 暂时只是做到这个份儿上。\"},\"619\":{\"t\":\"或许，Oracle 少打一些官司，多研究一下如何处理这些历史遗留问题，Java 能更好吧。\"},\"620\":{\"t\":\"所以，在实际的工程应用上，有人也并不建议使用 Deque 做为 Stack 的实现，而是自己再做一层封装。\"},\"621\":{\"t\":\"比如，大家可以看一下这篇探讨 Stack 和 Deque 的文章：http://baddotrobot.com/blog/2013/01/10/stack-vs-deque/。\"},\"622\":{\"h\":\"Q8：链表呢？\",\"a\":\"q8-链表呢\"},\"623\":{\"t\":\"再说一个小问题。\"},\"624\":{\"t\":\"大家可以看到，Java 官方推荐的创建栈的方式，使用了 Deque 接口。并且，在底层实现上，使用了 ArrayDeque，也就是基于动态数组的实现。为什么？\"},\"625\":{\"t\":\"大家应该都知道，动态数组是可以进行扩容操作的。在触发扩容的时候，时间复杂度是 O(n) 的，但整体平均时间复杂度（Amortized Time）是 O(1)。\"},\"626\":{\"t\":\"但是，基于链表的实现，不会牵扯到扩容问题，因此，每一次添加操作，从时间复杂度的角度，都是 O(1) 的。\"},\"627\":{\"t\":\"虽然如此，可是实际上，当数据量达到一定程度的时候，链表的性能是远远低于动态数组的。\"},\"628\":{\"t\":\"这是因为，对于链表来说，每添加一个元素，都需要重新创建一个 Node 类的对象，也就是都需要进行一次 new 的内存操作。而对内存的操作，是非常慢的。\"},\"629\":{\"t\":\"举个例子，对于队列，测试它们的性能。代码如下：\"},\"630\":{\"t\":\" Queue<Integer> q1 = new ArrayDeque<>(); Queue<Integer> q2 = new LinkedList<>(); int N = 10000000; long start1 = System.currentTimeMillis(); for (int i = 0; i < N; i++) { q1.offer(1); } long end1 = System.currentTimeMillis(); long start2 = System.currentTimeMillis(); for (int i = 0; i < N; i++) { q2.offer(i); } long end2 = System.currentTimeMillis(); System.out.println(end1 - start1 + \\\"ms\\\"); System.out.println(end2 - start2 + \\\"ms\\\"); \"},\"631\":{\"t\":\"最终的结果：\"},\"632\":{\"t\":\"76ms 4163ms \"},\"633\":{\"t\":\"也就是使用 LinkedList，会比使用 ArrayDeque 慢 5 倍以上！\"},\"634\":{\"t\":\"因此，甚至有人建议：在实践中，尤其是面对大规模数据的时候，不应该使用链表！\"},\"635\":{\"t\":\"最后，关于在面试中，如果有同学需要使用“栈”这种数据结构，选择 Stack 这个类，面试官会怎么看？我参考了网上的其博主的文章写的@lk 同学的看法：\"},\"636\":{\"t\":\"参考：https://blog.csdn.net/Dlgdlgd/article/details/125768706\"},\"637\":{\"h\":\"队列\",\"a\":\"队列\"},\"638\":{\"h\":\"二叉树\",\"a\":\"二叉树\"},\"639\":{\"h\":\"红黑树\",\"a\":\"红黑树\"},\"640\":{\"h\":\"1.简介\",\"a\":\"_1-简介\"},\"641\":{\"t\":\"红黑树是一种自平衡的二叉查找树，是一种高效的查找树。红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作。\"},\"642\":{\"h\":\"2.为什么需要红黑树？\",\"a\":\"_2-为什么需要红黑树\"},\"643\":{\"t\":\"对于二叉搜索树，如果插入的数据是随机的，那么它就是接近平衡的二叉树，平衡的二叉树，它的操作效率（查询，插入，删除）效率较高，时间复杂度是O（logN）。但是可能会出现一种极端的情况，那就是插入的数据是有序的（递增或者递减），那么所有的节点都会在根节点的右侧或左侧，此时，二叉搜索树就变为了一个链表，它的操作效率就降低了，时间复杂度为O(N)，所以可以认为二叉搜索树的时间复杂度介于O（logN）和O(N)之间，视情况而定。那么为了应对这种极端情况，红黑树就出现了，它是具备了某些特性的二叉搜索树，能解决非平衡树问题，红黑树是一种接近平衡的二叉树（说它是接近平衡因为它并没有像AVL树的平衡因子的概念，它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构，进而提升整体的性能，并没有严格的卡定某个平衡因子来维持绝对平衡）。\"},\"644\":{\"h\":\"3.红黑树的特性\",\"a\":\"_3-红黑树的特性\"},\"645\":{\"t\":\"首先，红黑树是一个二叉搜索树，它在每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK；通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡（最短路径就是全黑节点，最长路径就是一个红节点一个黑节点，当从根节点到叶子节点的路径上黑色节点相同时，最长路径刚好是最短路径的两倍）。它同时满足以下特性：\"},\"646\":{\"t\":\"节点是红色或黑色\"},\"647\":{\"t\":\"根是黑色\"},\"648\":{\"t\":\"叶子节点（外部节点，空节点）都是**黑色，**这里的叶子节点指的是最底层的空节点（外部节点），下图中的那些null节点才是叶子节点，null节点的父节点在红黑树里不将其看作叶子节点\"},\"649\":{\"t\":\"红色节点的子节点都是黑色；\"},\"650\":{\"t\":\"红色节点的父节点都是黑色；\"},\"651\":{\"t\":\"从根节点到叶子节点的所有路径上不能有 2 个连续的红色节点\"},\"652\":{\"t\":\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\"},\"653\":{\"t\":\"img\"},\"654\":{\"h\":\"4.红黑树的效率\",\"a\":\"_4-红黑树的效率\"},\"655\":{\"t\":\"红黑树的查找，插入和删除操作，时间复杂度都是O(logN)。\"},\"656\":{\"t\":\"查找操作时，它和普通的相对平衡的二叉搜索树的效率相同，都是通过相同的方式来查找的，没有用到红黑树特有的特性。\"},\"657\":{\"t\":\"但如果插入的时候是有序数据，那么红黑树的查询效率就比二叉搜索树要高了，因为此时二叉搜索树不是平衡树，它的时间复杂度O(N)。\"},\"658\":{\"t\":\"插入和删除操作时，由于红黑树的每次操作平均要旋转一次和变换颜色，所以它比普通的二叉搜索树效率要低一点，不过时间复杂度仍然是O(logN)。总之，红黑树的优点就是对有序数据的查询操作不会慢到O(N)的时间复杂度。\"},\"659\":{\"t\":\"红黑树和AVL树的比较：\"},\"660\":{\"t\":\"AVL树的时间复杂度虽然优于红黑树，但是对于现在的计算机，cpu太快，可以忽略性能差异\"},\"661\":{\"t\":\"红黑树的插入删除比AVL树更便于控制操作\"},\"662\":{\"t\":\"红黑树整体性能略优于AVL树（红黑树旋转情况少于AVL树）\"},\"663\":{\"h\":\"哈希表结构\",\"a\":\"哈希表结构\"},\"664\":{\"h\":\"4.常见的设计模式\"},\"665\":{\"h\":\"4.1软件设计原则有哪些？\",\"a\":\"_4-1软件设计原则有哪些\"},\"666\":{\"h\":\"4.2什么是设计模式？\",\"a\":\"_4-2什么是设计模式\"},\"667\":{\"t\":\"设计模式（Design pattern）代表了最佳的实践，通常被有经验的⾯向对象的软件开发⼈员所采⽤。设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案。这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的。\"},\"668\":{\"t\":\"分为三大类：\"},\"669\":{\"t\":\"创建型： 在创建对象的同时隐藏创建逻辑，不使⽤ new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括⼯⼚/抽象⼯⼚/单例/建造者/原型模式。 结构型： 通过类和接⼝间的继承和引⽤实现创建复杂结构的对象。包括适配器/桥接模式/过滤器/组合/装饰器/外观/享元/代理模式。 行为型： 通过类之间不同通信⽅式实现不同⾏为。包括责任链/命名/解释器/迭代器/中介者/备忘录/观察者/状态/策略/模板/访问者模式。\"},\"670\":{\"h\":\"4.3单例模式\",\"a\":\"_4-3单例模式\"},\"671\":{\"t\":\"单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，构造⽅法必须是私有的、由自己创建⼀个静态变量存储实例，对外提供⼀个静态公有方法获取实例。\"},\"672\":{\"t\":\"双重检查锁（DCL， 即 double-checked locking） 实现代码如下：\"},\"673\":{\"t\":\"public class Singleton { // 1、私有化构造⽅法 private Singleton() { } // 2、定义⼀个静态变量指向⾃⼰类型 private volatile static Singleton instance; // 3、对外提供⼀个公共的⽅法获取实例 public static Singleton getInstance() { // 第⼀重检查是否为 null if (instance == null) { // 使⽤ synchronized 加锁 synchronized (Singleton.class) { // 第⼆重检查是否为 null if (instance == null) { // new 关键字创建对象不是原⼦操作 instance = new Singleton(); } } } return instance; } } \"},\"674\":{\"t\":\"优点：懒加载，线程安全，效率较⾼缺点：实现较复杂 这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单例。关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返回已创建的单例对象。\"},\"675\":{\"h\":\"4.4工厂模式\",\"a\":\"_4-4工厂模式\"},\"676\":{\"h\":\"4.4.1说⼀说简单⼯⼚模式：\",\"a\":\"_4-4-1说一说简单工厂模式\"},\"677\":{\"t\":\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数。\"},\"678\":{\"t\":\"适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较复杂。\"},\"679\":{\"t\":\"Spring 中的 BeanFactory 使⽤简单⼯⼚模式，根据传⼊⼀个唯⼀的标识来获得 Bean 对象。\"},\"680\":{\"h\":\"4.4.2⼯⼚⽅法模式了解吗：\",\"a\":\"_4-4-2工厂方法模式了解吗\"},\"681\":{\"t\":\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐，⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚。\"},\"682\":{\"t\":\"也就是定义⼀个抽象⼯⼚，其定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。这样不⽤通过指定类型来创建对象了。\"},\"683\":{\"h\":\"4.4.3抽象⼯⼚模式了解吗：\",\"a\":\"_4-4-3抽象工厂模式了解吗\"},\"684\":{\"t\":\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象，都只是针对⼀类产品，如果要⽣成另⼀种产品，就⽐较难办了！抽象⼯⼚模式通过在 AbstarctFactory 中增加创建产品的接⼝，并在具体⼦⼯⼚中实现新加产品的创建，当然前提是⼦⼯⼚⽀持⽣产该产品。否则继承的这个接⼝可以什么也不⼲。\"},\"685\":{\"h\":\"4.5装饰器模式\",\"a\":\"_4-5装饰器模式\"},\"686\":{\"h\":\"4.6代理模式\",\"a\":\"_4-6代理模式\"},\"687\":{\"h\":\"4.6.1什么是代理模式？\",\"a\":\"_4-6-1什么是代理模式\"},\"688\":{\"t\":\"代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制，是⼀种结构性模式。\"},\"689\":{\"h\":\"4.6.2静态代理和动态代理的区别：\",\"a\":\"_4-6-2静态代理和动态代理的区别\"},\"690\":{\"t\":\"灵活性 ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。另外，静态代理中，接⼝⼀旦新增加⽅法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！\"},\"691\":{\"t\":\"JVM 层⾯ ：静态代理在编译时就将接⼝、实现类、代理类这些都变成了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节码，并加载到 JVM 中的。\"},\"692\":{\"h\":\"4.6.3静态代理：\",\"a\":\"_4-6-3静态代理\"},\"693\":{\"t\":\"静态代理中，我们对目标对象的每个方法的增强都是手动完成的（*后面会具体演示代码*），非常不灵活（*比如接口一旦新增加方法，目标对象和代理对象都要进行修改*）且麻烦(*需要对每个目标类都单独写一个代理类*）。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\"},\"694\":{\"t\":\"上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\"},\"695\":{\"h\":\"4.6.4动态代理：\",\"a\":\"_4-6-4动态代理\"},\"696\":{\"t\":\"相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。\"},\"697\":{\"t\":\"从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\"},\"698\":{\"t\":\"说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\"},\"699\":{\"t\":\"动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\"},\"700\":{\"t\":\"就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\"},\"701\":{\"h\":\"JDK 动态代理机制\",\"a\":\"jdk-动态代理机制\"},\"702\":{\"t\":\"在 Java 动态代理机制中 InvocationHandler 接口和 Proxy 类是核心。\"},\"703\":{\"t\":\"Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\"},\"704\":{\"t\":\" public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException { ...... } 这个方法一共有 3 个参数： loader :类加载器，用于加载代理对象。 interfaces : 被代理类实现的一些接口； h : 实现了 InvocationHandler 接口的对象； \"},\"705\":{\"t\":\"要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\"},\"706\":{\"t\":\"public interface InvocationHandler { /** * 当你使用代理对象调用方法的时候实际会调用到这个方法 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; } invoke() 方法有下面三个参数： proxy :动态生成的代理类 method : 与代理类对象调用的方法相对应 args : 当前 method 方法的参数 \"},\"707\":{\"t\":\"也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\"},\"708\":{\"h\":\"CGLIB 动态代理机制\",\"a\":\"cglib-动态代理机制\"},\"709\":{\"t\":\"JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。\"},\"710\":{\"t\":\"为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\"},\"711\":{\"t\":\"CGLIBCode Generation Library)允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\"},\"712\":{\"t\":\"在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\"},\"713\":{\"t\":\"你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\"},\"714\":{\"t\":\"public interface MethodInterceptor extends Callback{ // 拦截被代理类中的方法 public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy) throws Throwable; } obj : 被代理的对象（需要增强的对象） method : 被拦截的方法（需要增强的方法） args : 方法入参 proxy : 用于调用原始方法 \"},\"715\":{\"t\":\"你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\"},\"716\":{\"h\":\"JDK 动态代理和 CGLIB 动态代理对比：\",\"a\":\"jdk-动态代理和-cglib-动态代理对比\"},\"717\":{\"t\":\"JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\"},\"718\":{\"t\":\"就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\"},\"719\":{\"h\":\"框架\"},\"720\":{\"h\":\"四：Java高级：Spring、SpringMVC、Spring Boot、MyBatis\",\"a\":\"四-java高级-spring、springmvc、spring-boot、mybatis\"},\"721\":{\"h\":\"AOP和IOC概念\",\"a\":\"aop和ioc概念\"},\"722\":{\"t\":\"AOP：AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。\"},\"723\":{\"t\":\"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理。\"},\"724\":{\"t\":\"IOC： 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。\"},\"725\":{\"t\":\"为什么叫控制反转？\"},\"726\":{\"t\":\"控制 ：指的是对象创建（实例化、管理）的权力\"},\"727\":{\"t\":\"反转 ：控制权交给外部环境（Spring 框架、IoC 容器）\"},\"728\":{\"h\":\"Bean的生命周期\",\"a\":\"bean的生命周期\"},\"729\":{\"h\":\"MVC的基本流程\",\"a\":\"mvc的基本流程\"},\"730\":{\"t\":\"简单来说：客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler -> HandlerAdapter 会根据 Handler 来调用真正的处理器来处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象 -> 前端控制器 DispatcherServlet 渲染数据（Model）-> 将得到视图对象返回给用户。\"},\"731\":{\"t\":\"image-20210608002334025\"},\"732\":{\"t\":\"上图用于辅助理解，面试时可用下列 8 步描述 SpringMVC 运行流程：\"},\"733\":{\"t\":\"用户向服务器发送请求，请求被 Spring 前端控制Servelt DispatcherServlet 捕获；\"},\"734\":{\"t\":\"DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 对象的形式返回；\"},\"735\":{\"t\":\"DispatcherServlet 根据获得的 Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得 HandlerAdapter 后，此时将开始执行拦截器的 preHandler(…)方法）\"},\"736\":{\"t\":\"提取 Request 中的模型数据，填充 Handler 入参，开始执行Handler（Controller)。在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\"},\"737\":{\"t\":\"（1）HttpMessageConveter：将请求消息（如：Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息；\"},\"738\":{\"t\":\"（2）数据转换：对请求消息进行数据转换。如：String 转换成 Integer、Double 等；\"},\"739\":{\"t\":\"（3）数据格式化：对请求消息进行数据格式化。如：将字符串转换成格式化数字或格式化日期等；\"},\"740\":{\"t\":\"（4）数据验证：验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中;\"},\"741\":{\"t\":\"5.Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象；\"},\"742\":{\"t\":\"6.根据返回的 ModelAndView，选择一个适合的 ViewResolver（必须是已经注册到 Spring 容器中的 ViewResolver)返回给DispatcherServlet；\"},\"743\":{\"t\":\"7.ViewResolver 结合 Model 和 View，来渲染视图；\"},\"744\":{\"t\":\"8.将渲染结果返回给客户端。\"},\"745\":{\"h\":\"Spring的设计模式\",\"a\":\"spring的设计模式\"},\"746\":{\"t\":\"工厂设计模式 : Spring 使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象；\"},\"747\":{\"t\":\"代理设计模式 : Spring AOP 功能的实现；\"},\"748\":{\"t\":\"单例设计模式 : Spring 中的 Bean 默认都是单例的；\"},\"749\":{\"t\":\"模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式；\"},\"750\":{\"t\":\"包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源；\"},\"751\":{\"t\":\"观察者模式：Spring 事件驱动模型就是观察者模式很经典的一个应用；\"},\"752\":{\"t\":\"适配器模式：Spring AOP 的增强或通知(Advice)使用到了适配器模式、SpringMVC 中也是用到了适配器模式适配 Controller。\"},\"753\":{\"h\":\"Spring事务机制\",\"a\":\"spring事务机制\"},\"754\":{\"h\":\"谈谈你对 Spring 中的事务的理解？\",\"a\":\"谈谈你对-spring-中的事务的理解\"},\"755\":{\"t\":\"事务是逻辑上的一组操作，要么都执行，要么都不执行。\"},\"756\":{\"t\":\"事务特性\"},\"757\":{\"t\":\"原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\"},\"758\":{\"t\":\"一致性：执行事务前后，数据保持一致；\"},\"759\":{\"t\":\"隔离性：并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\"},\"760\":{\"t\":\"持久性: 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\"},\"761\":{\"t\":\"Spring 事务管理接口\"},\"762\":{\"t\":\"PlatformTransactionManager：（平台）事务管理器；\"},\"763\":{\"t\":\"TransactionDefinition：事务定义信息（事务隔离级别、传播行为、超时、只读、回滚规则）；\"},\"764\":{\"t\":\"TransactionStatus：事务运行状态；\"},\"765\":{\"t\":\"所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。\"},\"766\":{\"h\":\"Spring 中的事务隔离级别？\",\"a\":\"spring-中的事务隔离级别\"},\"767\":{\"t\":\"TransactionDefinition 接口中定义了五个表示隔离级别的常量：\"},\"768\":{\"t\":\"TransactionDefinition.ISOLATION_DEFAULT：使用后端数据库默认的隔离级别，MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED 隔离级别；\"},\"769\":{\"t\":\"TransactionDefinition.ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读；\"},\"770\":{\"t\":\"TransactionDefinition.ISOLATION_READ_COMMITTED：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生；\"},\"771\":{\"t\":\"TransactionDefinition.ISOLATION_REPEATABLE_READ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生；\"},\"772\":{\"t\":\"TransactionDefinition.ISOLATION_SERIALIZABLE：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\"},\"773\":{\"h\":\"Spring 中的事物传播行为？\",\"a\":\"spring-中的事物传播行为\"},\"774\":{\"t\":\"事务传播行为是为了解决业务层方法之间互相调用的事务问题。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在 TransactionDefinition 定义中包括了如下几个表示传播行为的常量：\"},\"775\":{\"t\":\"支持当前事务的情况：\"},\"776\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务；\"},\"777\":{\"t\":\"TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行；\"},\"778\":{\"t\":\"TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\"},\"779\":{\"t\":\"不支持当前事务的情况：\"},\"780\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起；\"},\"781\":{\"t\":\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\"},\"782\":{\"t\":\"TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\"},\"783\":{\"t\":\"其他情况：\"},\"784\":{\"t\":\"TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 TransactionDefinition.PROPAGATION_REQUIRED。\"},\"785\":{\"h\":\"Spring如何解决循环依赖问题？\",\"a\":\"spring如何解决循环依赖问题\"},\"786\":{\"t\":\"了解问题的本质再分析问题，往往更利于对问题有更深入的了解和研究。所以我们在分析 Spring 关于循环依赖的源码之前，先要了解下什么是循环依赖。\"},\"787\":{\"t\":\"1. 循环依赖的概念\"},\"788\":{\"t\":\"img\"},\"789\":{\"t\":\"循环依赖分为三种，自身依赖于自身、互相循环依赖、多组循环依赖。\"},\"790\":{\"t\":\"但无论循环依赖的数量有多少，循环依赖的本质是一样的。就是你的完整创建依赖于我，而我的完整创建也依赖于你，但我们互相没法解耦，最终导致依赖创建失败。\"},\"791\":{\"t\":\"所以 Spring 提供了除了构造函数注入和原型注入外的，setter循环依赖注入解决方案。那么我们也可以先来尝试下这样的依赖，如果是我们自己处理的话该怎么解决。\"},\"792\":{\"t\":\"2. 问题体现\"},\"793\":{\"t\":\"public class ABTest { public static void main(String[] args) { new ClazzA(); } } class ClazzA { private ClazzB b = new ClazzB(); } class ClazzB { private ClazzA a = new ClazzA(); } \"},\"794\":{\"t\":\"3.解决方案\"},\"795\":{\"t\":\"整个解决循环依赖的核心内容，A 创建后填充属性时依赖 B，那么就去创建 B，在创建 B 开始填充时发现依赖于 A，但此时 A 这个半成品对象已经存放在缓存到singletonObjects 中了，所以 B 可以正常创建，在通过递归把 A 也创建完整了。\"},\"796\":{\"t\":\"4.Spring解决\"},\"797\":{\"t\":\"（1）一级缓存能解决吗？\"},\"798\":{\"t\":\"img\"},\"799\":{\"t\":\"其实只有一级缓存并不是不能解决循环依赖，就像我们自己做的例子一样。\"},\"800\":{\"t\":\"但是在 Spring 中如果像我们例子里那么处理，就会变得非常麻烦，而且也可能会出现 NPE 问题。\"},\"801\":{\"t\":\"所以如图按照 Spring 中代码处理的流程，我们去分析一级缓存这样存放成品 Bean 的流程中，是不能解决循环依赖的问题的。因为 A 的成品创建依赖于 B，B的成品创建又依赖于 A，当需要补全B的属性时 A 还是没有创建完，所以会出现死循环。\"},\"802\":{\"t\":\"（2） 二级缓存能解决吗？\"},\"803\":{\"t\":\"img\"},\"804\":{\"t\":\"有了二级缓存其实这个事处理起来就容易了，一个缓存用于存放成品对象，另外一个缓存用于存放半成品对象。\"},\"805\":{\"t\":\"A 在创建半成品对象后存放到缓存中，接下来补充 A 对象中依赖 B 的属性。\"},\"806\":{\"t\":\"B 继续创建，创建的半成品同样放到缓存中，在补充对象的 A 属性时，可以从半成品缓存中获取，现在 B 就是一个完整对象了，而接下来像是递归操作一样 A 也是一个完整对象了。\"},\"807\":{\"t\":\"（3） 三级缓存解决什么？\"},\"808\":{\"t\":\"img\"},\"809\":{\"t\":\"有了二级缓存都能解决 Spring 依赖了，怎么要有三级缓存呢。其实我们在前面分析源码时也提到过，三级缓存主要是解决 Spring AOP 的特性。AOP 本身就是对方法的增强，是 ObjectFactory<?> 类型的 lambda 表达式，而 Spring 的原则又不希望将此类类型的 Bean 前置创建，所以要存放到三级缓存中处理。\"},\"810\":{\"t\":\"其实整体处理过程类似，唯独是 B 在填充属性 A 时，先查询成品缓存、再查半成品缓存，最后在看看有没有单例工程类在三级缓存中。最终获取到以后调用 getObject 方法返回代理引用或者原始引用。\"},\"811\":{\"t\":\"至此也就解决了 Spring AOP 所带来的三级缓存问题。本章节涉及到的 AOP 依赖有源码例子，可以进行调试\"},\"812\":{\"t\":\"（4）总结\"},\"813\":{\"t\":\"回顾本文基本以实际操作的例子开始，引导大家对循环依赖有一个整体的认识，也对它的解决方案可以上手的例子，这样对后续的关于 Spring 对循环依赖的解决也就不会那么陌生了。\"},\"814\":{\"t\":\"通篇全文下来大家也可以看到，三级缓存并不是非必须不可，只不过在满足 Spring 自身创建的原则下，是必须的。如果你可以下载 Spring 源码对这部分代码进行改动下，提前创建 AOP 对象保存到缓存中，那么二级缓存一样可以解决循环依赖问题。\"},\"815\":{\"h\":\"Spring Boot自动配置原理\",\"a\":\"spring-boot自动配置原理\"},\"816\":{\"t\":\"在Spring程序main方法中，添加@SpringBootApplication或者@EnableAutoConfiguration会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建的Spring容器中的bean。Spring Boot 通过@EnableAutoConfiguration开启自动装配，通过 SpringFactoriesLoader 最终加载META-INF/spring.factories中的自动配置类实现自动装配，自动配置类其实就是通过@Conditional按需加载的配置类，想要其生效必须引入spring-boot-starter-xxx包实现起步依赖。\"},\"817\":{\"t\":\"第 1 步: 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true，可在 application.properties 或 application.yml 中设置 \"},\"818\":{\"t\":\"img\"},\"819\":{\"t\":\"第 2 步 ： 用于获取EnableAutoConfiguration注解中的 exclude 和 excludeName。 \"},\"820\":{\"t\":\"img\"},\"821\":{\"t\":\"第 3 步： 获取需要自动装配的所有配置类，读取META-INF/spring.factories： spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories \"},\"822\":{\"t\":\"img\"},\"823\":{\"t\":\"从下图可以看到这个文件的配置内容都被我们读取到了。XXXAutoConfiguration的作用就是按需加载组件。 不光是这个依赖下的META-INF/spring.factories被读取到，所有 Spring Boot Starter 下的META-INF/spring.factories都会被读取到。 \"},\"824\":{\"t\":\"img\"},\"825\":{\"t\":\"参考：https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html#autoconfigurationimportselector-加载自动装配类\"},\"826\":{\"h\":\"Spring Boot 加载配置文件的优先级了解么？\",\"a\":\"spring-boot-加载配置文件的优先级了解么\"},\"827\":{\"t\":\"项目启动后扫描顺序：\"},\"828\":{\"t\":\"1）先去项目根目录找config文件夹下找配置文件件 2）再去根目录下找配置文件 3）去resources下找cofnig文件夹下找配置文件 4）去resources下找配置文件\"},\"829\":{\"t\":\"在这里插入图片描述\"},\"830\":{\"h\":\"如何使用 Spring Boot 实现全局异常处理？\",\"a\":\"如何使用-spring-boot-实现全局异常处理\"},\"831\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485568&idx=2&sn=c5ba880fd0c5d82e39531fa42cb036ac&chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&token=1729829670&lang=zh_CN#rd\"},\"832\":{\"t\":\"使用 @ControllerAdvice 和 @ExceptionHandler 处理全局异常\"},\"833\":{\"t\":\"@ExceptionHandler 处理 Controller 级别的异常\"},\"834\":{\"t\":\"例子：\"},\"835\":{\"t\":\"CustomException： public class CustomException extends RuntimeException { private AppHttpCodeEnum appHttpCodeEnum; public CustomException(AppHttpCodeEnum appHttpCodeEnum){ this.appHttpCodeEnum = appHttpCodeEnum; } public AppHttpCodeEnum getAppHttpCodeEnum() { return appHttpCodeEnum; } } \"},\"836\":{\"t\":\"ExceptionCatch： @ControllerAdvice //控制器增强类 @Slf4j public class ExceptionCatch { /** * 处理不可控异常 * @param e * @return */ @ExceptionHandler(Exception.class) @ResponseBody public ResponseResult exception(Exception e){ e.printStackTrace(); log.error(\\\"catch exception:{}\\\",e.getMessage()); return ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR); } /** * 处理可控异常 自定义异常 * @param e * @return */ @ExceptionHandler(CustomException.class) @ResponseBody public ResponseResult exception(CustomException e){ log.error(\\\"catch exception:{}\\\",e); return ResponseResult.errorResult(e.getAppHttpCodeEnum()); } } \"},\"837\":{\"h\":\"核心配置文件\",\"a\":\"核心配置文件\"},\"838\":{\"t\":\"SpringBoot的核心配置文件是application和bootstrap配置文件。\"},\"839\":{\"t\":\"application配置文件这个容易理解，主要用于Spring Boot项目的自动化配置。\"},\"840\":{\"t\":\"bootstrap配置文件有以下几个应用场景：\"},\"841\":{\"t\":\"使用Spring Cloud Config配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；\"},\"842\":{\"t\":\"一些固定的不能被覆盖的属性；\"},\"843\":{\"t\":\"一些加密/解密的场景；\"},\"844\":{\"h\":\"实现热部署的方式\",\"a\":\"实现热部署的方式\"},\"845\":{\"t\":\"这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。\"},\"846\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> </dependency> \"},\"847\":{\"h\":\"监视器和监听器\",\"a\":\"监视器和监听器\"},\"848\":{\"h\":\"监听器\",\"a\":\"监听器\"},\"849\":{\"t\":\"监听器也叫listener，是servlet的监听器，可以用于监听web应用程序中某些对象的创建、销毁、增加、修改、删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化时，服务器自动调用监听器对象中的方法，常用于系统加载时进行信息初始化，统计在线人数和在线用户，统计网站的访问量。 配置监听器的方法：\"},\"850\":{\"t\":\"通过@Component把监听器加入Spring容器中管理;\"},\"851\":{\"t\":\"在application.properties中添加context.listener.classes配置;\"},\"852\":{\"t\":\"在方法上加@EventListener注解;\"},\"853\":{\"h\":\"监控器\",\"a\":\"监控器\"},\"854\":{\"t\":\"actuator\"},\"855\":{\"t\":\" 这是springboot程序的监控系统，可以实现健康检查，info信息等。在使用之前需要引入`spring-boot-starter-actuator`，并做简单的配置即可。 引入依赖并编写好配置之后，启动项目，访问http://localhost:8080/actuator \"},\"856\":{\"t\":\"Spring Boot自带监控组件—Actuator，它可以帮助实现对程序内部运行情况的监控。Actuator轻松实现应用程序的监控治理，比如健康状况、审计、统计和HTTP追踪、Bean加载情况、环境变量、日志信息、线程信息等。 Actuator的核心是端点（Endpoint），它用来监视、提供应用程序的信息，Spring Boot提供的spring-boot-actuator组件中已经内置了非常多的Endpoint（health、info、beans、metrics、httptrace、shutdown等），每个端点都可以启用和禁用。\"},\"857\":{\"h\":\"什么是Spring Boot Starter？有哪些常用的？\",\"a\":\"什么是spring-boot-starter-有哪些常用的\"},\"858\":{\"t\":\"和自动配置一样，Spring Boot Starter的目的也是简化配置，而Spring Boot Starter解决的是依赖管理配置复杂的问题，有了它，当我需要构建一个Web应用程序时，不必再遍历所有的依赖包，一个一个地添加到项目的依赖管理中，而是只需要一个配置spring-boot-starter-web。\"},\"859\":{\"t\":\"常用的：\"},\"860\":{\"t\":\"spring-boot-starter-web - Web 和 RESTful 应用程序\"},\"861\":{\"t\":\"spring-boot-starter-test - 单元测试和集成测试\"},\"862\":{\"t\":\"spring-boot-starter-parent有什么作用？\"},\"863\":{\"t\":\"我们知道，新建一个SpringBoot项目，默认都是有parent的，这个parent就是spring-boot-starter-parent，spring-boot-starter-parent主要有如下作用：\"},\"864\":{\"t\":\"定义了Java编译版本\"},\"865\":{\"t\":\"使用UTF-8格式编码\"},\"866\":{\"t\":\"继承自spring-boor-dependencies，这里面定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号\"},\"867\":{\"t\":\"执行打包操作的配置\"},\"868\":{\"t\":\"自动化的资源过滤\"},\"869\":{\"t\":\"自动化的插件配置\"},\"870\":{\"h\":\"Spring Boot四大核心组件\",\"a\":\"spring-boot四大核心组件\"},\"871\":{\"t\":\"四大组件分别是：starter， autoconfigure, CLI 以及actuator。\"},\"872\":{\"t\":\"autoconfigure在我们的开发中并不会被感知，因为它是存在与我们的starter中的。所以我们的每个starter都是依赖autoconfigure的。\"},\"873\":{\"t\":\"Spring Boot CLI是一个命令行使用Spring Boot的客户端工具；主要功能如下：\"},\"874\":{\"t\":\"运行groovy脚本 => 官网2.1\"},\"875\":{\"t\":\"打包groovy文件到jar => 官网2.3\"},\"876\":{\"t\":\"初始化Spring Boot项目 => 官网2.4\"},\"877\":{\"t\":\"其他\"},\"878\":{\"t\":\"actuator是Spring Boot的监控插件，本身提供了很多接口可以获取当前项目的各项运行状态指标。\"},\"879\":{\"h\":\"MyBatis Dao接口原理\",\"a\":\"mybatis-dao接口原理\"},\"880\":{\"h\":\"MyBatis分页原理\",\"a\":\"mybatis分页原理\"},\"881\":{\"t\":\"img\"},\"882\":{\"t\":\"总结一下：\"},\"883\":{\"t\":\"通过page对象作为分页依据\"},\"884\":{\"t\":\"通过count来进行查询总条数的限制\"},\"885\":{\"t\":\"对原sql通过limit来进行分页的效果\"},\"886\":{\"t\":\"参考：https://blog.csdn.net/xiaolegeaizy/article/details/108461284\"},\"887\":{\"h\":\"MyBatis 是如何进行分页的？分页插件的原理是什么？\",\"a\":\"mybatis-是如何进行分页的-分页插件的原理是什么\"},\"888\":{\"t\":\"答：\"},\"889\":{\"t\":\"(1) MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；\"},\"890\":{\"t\":\"(2) 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能；\"},\"891\":{\"t\":\"(3) 也可以使用分页插件来完成物理分页。\"},\"892\":{\"t\":\"分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。\"},\"893\":{\"t\":\"举例： select _ from student ，拦截 sql 后重写为： select t._ from （select \\\\* from student）t limit 0，10 \"},\"894\":{\"t\":\"MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 invoke() 方法，当然，只会拦截那些指定需要拦截的方法。\"},\"895\":{\"t\":\"实现 MyBatis 的 Interceptor 接口并复写 intercept() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，在配置文件中配置编写的插件。\"},\"896\":{\"h\":\"MyBatis缓存机制(一级缓存、二级缓存、三级缓存)\",\"a\":\"mybatis缓存机制-一级缓存、二级缓存、三级缓存\"},\"897\":{\"h\":\"一级缓存：\",\"a\":\"一级缓存\"},\"898\":{\"t\":\"作用域是同一个 SqlSession，在同一个 sqlSession 中两次执行相同的 sql 语句， 第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取,从而提高查询效率。当一个 sqlSession 结束后该 sqlSession 中的 一级缓存也就不存在了。Mybatis 默认开启一级缓存。 一级缓存内部存储使用一个 HashMap，key 为 hashCode+sqlId+Sql 语句。value 为 从查询出来映射生成的 java 对象 sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。\"},\"899\":{\"h\":\"二级缓存：\",\"a\":\"二级缓存\"},\"900\":{\"t\":\"是多个 SqlSession 共享的，其作用域是 mapper 的同一个 namespace，不同 的 sqlSession 两次执行相同 namespace 下的 sql 语句且向 sql 中传递参数也相同即最终执行 相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从 缓存中获取数据将不再从数据库查询，从而提高查询效率。Mybatis 默认没有开启二级缓存 需要在 setting 全局参数中配置开启二级缓存。\"},\"901\":{\"t\":\"在yml中添加以下代码：\"},\"902\":{\"t\":\"在这里插入图片描述\"},\"903\":{\"t\":\"然后在对应的mapper.xml里面加入配置：\"},\"904\":{\"t\":\"在这里插入图片描述\"},\"905\":{\"t\":\"注意：开启二级缓存后，对应的pojo一定要实现Serializable，否则在序列化的时候会报错。 readOnly：是否只读 。 值为true时，mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为了加快获取速度，直接会将数据在缓存中的引用交给用户，不安全，但速度快。 值为false时，mybatis觉得获取的数据可能会被修改，mybatis会利用序列化&反序列化的技术克隆一份新的数据给你，安全，但速度慢。\"},\"906\":{\"h\":\"三级缓存：\",\"a\":\"三级缓存\"},\"907\":{\"t\":\"Mybatis 的一级缓存与二级缓存 只适用于单体项目，在分布式服务或者微服务架构下 都会出现数据不一致问题。所以Mybatis 为我们提供了自定义缓存 我们可以集成很多三方中间件来做缓存 这里就那Redis来说一下。\"},\"908\":{\"t\":\"在这里插入图片描述\"},\"909\":{\"h\":\"总结：\",\"a\":\"总结\"},\"910\":{\"t\":\"一级缓存的作用域是一个sqlsession内；二级缓存作用域是针对mapper进行缓存；\"},\"911\":{\"t\":\"一级缓存是默认开启的；二级缓存需要手动配置；\"},\"912\":{\"t\":\"一级缓存sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。sqlSession.close()后一级缓存也没有了。但是销毁sqlSession后会将里面的缓存存到二级缓存中；\"},\"913\":{\"t\":\"二级缓存cache中readonly属性如果为false 那么相应的pojo类必须实现Serializable接口 并且其缓存查询到的对象都是通过序列化或者反序列化克隆的，所以对象之间两两不相等；\"},\"914\":{\"t\":\"二级缓存的生命周期和应用同步，它是用来解决一级缓存不能跨会话共享数据的问题，范围是namespace级别的，可以被多个会话共享(只要是同一个接口的相同方法，都可以进行共享)。\"},\"915\":{\"t\":\"只要没有显式地设置cacheEnabled为false，都会使用CachingExector装饰基本的执行器(SIMPLE、REUSE、BATCH)。 二级缓存总是默认开启的，但是每个Mapper的二级开关是默认关闭的。\"},\"916\":{\"t\":\"二级缓存进行增删改操作也会刷新二级缓存，导致二级缓存失效；\"},\"917\":{\"t\":\"二级缓存的执行流程：\"},\"918\":{\"t\":\"在这里插入图片描述\"},\"919\":{\"t\":\"参考：https://blog.csdn.net/weixin_45161172/article/details/129526131\"},\"920\":{\"h\":\"Kafka\"},\"921\":{\"h\":\"数据保存的策略\",\"a\":\"数据保存的策略\"},\"922\":{\"t\":\"kafka 有两种数据保存策略:\"},\"923\":{\"t\":\"1、按照过期时间保留\"},\"924\":{\"t\":\"2、按照存储的消息大小保留\"},\"925\":{\"t\":\"Kafka Broker默认的消息保留策略是：要么保留一定时间，要么保留到消息达到一定大小的字节数。\"},\"926\":{\"t\":\"当消息达到设置的条件上限时，旧消息就会过期并被删除，所以，在任何时刻，可用消息的总量都不会超过配置参数所指定的大小。\"},\"927\":{\"t\":\"topic可以配置自己的保留策略，可以将消息保留到不再使用他们为止。\"},\"928\":{\"t\":\"因为在一个大文件里查找和删除消息是很费时的事，也容易出错，所以，分区被划分为若干个片段。默认情况下，每个片段包含1G或者一周的数据，以较小的那个为准。在broker往leader分区写入消息时，如果达到片段上限，就关闭当前文件，并打开一个新文件。当前正在写入数据的片段叫活跃片段。当所有片段都被写满时，会清除下一个分区片段的数据，如果配置的是7个片段，每天打开一个新片段，就会删除一个最老的片段，循环使用所有片段。\"},\"929\":{\"t\":\"kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？ 这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。\"},\"930\":{\"h\":\"分区策略\",\"a\":\"分区策略\"},\"931\":{\"h\":\"生产者：\",\"a\":\"生产者\"},\"932\":{\"t\":\"为什么要分区\"},\"933\":{\"t\":\"多Partition分布式存储，利于集群数据的均衡。\"},\"934\":{\"t\":\"并发读写，加快读写速度。\"},\"935\":{\"t\":\"加快数据恢复的速率：当某台机器挂了，每个Topic仅需恢复一部分的数据，多机器并发。\"},\"936\":{\"t\":\"分区的原则\"},\"937\":{\"t\":\"指明partition的情况下，使用指定的partition；\"},\"938\":{\"t\":\"没有指明partition，但是有key的情况下，将key的hash值与topic的partition数进行取余得到partition值；\"},\"939\":{\"t\":\"既没有指定partition，也没有key的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与topic可用的partition数取余得到partition值，也就是常说的round-robin算法。\"},\"940\":{\"t\":\"public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) { List<PartitionInfo> partitions = cluster.partitionsForTopic(topic); int numPartitions = partitions.size(); if (keyBytes == null) { //key为空时，获取一个自增的计数，然后对分区做取模得到分区编号 int nextValue = nextValue(topic); List<PartitionInfo> availablePartitions = cluster.availablePartitionsForTopic(topic); if (availablePartitions.size() > 0) { int part = Utils.toPositive(nextValue) % availablePartitions.size(); return availablePartitions.get(part).partition(); } else { // no partitions are available, give a non-available partition return Utils.toPositive(nextValue) % numPartitions; } } else { // hash the keyBytes to choose a partition // key不为空时，通过key的hash对分区取模（疑问：为什么这里不像上面那样，使用availablePartitions呢？） // 根据《Kafka权威指南》Page45理解：为了保证相同的键，总是能路由到固定的分区，如果使用可用分区，那么因为分区数变化，会导致相同的key，路由到不同分区 // 所以如果要使用key来映射分区，最好在创建主题的时候就把分区规划好 return Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions; } } private int nextValue(String topic) { //为每个topic维护了一个AtomicInteger对象，每次获取时+1 AtomicInteger counter = topicCounterMap.get(topic); if (null == counter) { counter = new AtomicInteger(ThreadLocalRandom.current().nextInt()); AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter); if (currentCounter != null) { counter = currentCounter; } } return counter.getAndIncrement(); } \"},\"941\":{\"h\":\"消费者：\",\"a\":\"消费者\"},\"942\":{\"t\":\"分区分配策略\"},\"943\":{\"t\":\"一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及到partition的分配问题，即确定哪个partition由哪个consumer来消费。Kafka提供了3种消费者分区分配策略：RangeAssigor、RoundRobinAssignor、StickyAssignor。\"},\"944\":{\"t\":\"PartitionAssignor接口用于用户定义实现分区分配算法，以实现Consumer之间的分区分配。消费组的成员订阅它们感兴趣的Topic并将这种订阅关系传递给作为订阅组协调者的Broker。协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者。Kafka默认采用RangeAssignor的分配算法。\"},\"945\":{\"t\":\"RangeAssignor\"},\"946\":{\"t\":\"RangeAssignor对每个Topic进行独立的分区分配。对于每一个Topic，首先对分区按照分区ID进行排序，然后订阅这个Topic的消费组的消费者再进行排序，之后尽量均衡的将分区分配给消费者。这里只能是尽量均衡，因为分区数可能无法被消费者数量整除，那么有一些消费者就会多分配到一些分区。分配示意图如下：\"},\"947\":{\"t\":\"f4108e1816b3087f38b546372e214958.png\"},\"948\":{\"t\":\"分区分配的算法如下：\"},\"949\":{\"t\":\"@Override public Map<String, List<TopicPartition>> assign(Map<String, Integer> partitionsPerTopic, Map<String, Subscription> subscriptions) { Map<String, List<String>> consumersPerTopic = consumersPerTopic(subscriptions); Map<String, List<TopicPartition>> assignment = new HashMap<>(); for (String memberId : subscriptions.keySet()) assignment.put(memberId, new ArrayList<TopicPartition>()); //for循环对订阅的多个topic分别进行处理 for (Map.Entry<String, List<String>> topicEntry : consumersPerTopic.entrySet()) { String topic = topicEntry.getKey(); List<String> consumersForTopic = topicEntry.getValue(); Integer numPartitionsForTopic = partitionsPerTopic.get(topic); if (numPartitionsForTopic == null) continue; //对消费者进行排序 Collections.sort(consumersForTopic); //计算平均每个消费者分配的分区数 int numPartitionsPerConsumer = numPartitionsForTopic / consumersForTopic.size(); //计算平均分配后多出的分区数 int consumersWithExtraPartition = numPartitionsForTopic % consumersForTopic.size(); List<TopicPartition> partitions = AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic); for (int i = 0, n = consumersForTopic.size(); i < n; i++) { //计算第i个消费者，分配分区的起始位置 int start = numPartitionsPerConsumer * i + Math.min(i, consumersWithExtraPartition); //计算第i个消费者，分配到的分区数量 int length = numPartitionsPerConsumer + (i + 1 > consumersWithExtraPartition ? 0 : 1); assignment.get(consumersForTopic.get(i)).addAll(partitions.subList(start, start + length)); } } return assignment; } \"},\"950\":{\"t\":\"这种分配方式明显的一个问题是随着消费者订阅的Topic的数量的增加，不均衡的问题会越来越严重，比如上图中4个分区3个消费者的场景，C0会多分配一个分区。如果此时再订阅一个分区数为4的Topic，那么C0又会比C1、C2多分配一个分区，这样C0总共就比C1、C2多分配两个分区了，而且随着Topic的增加，这个情况会越来越严重。分配结果：\"},\"951\":{\"t\":\"eff9adb5a086691e56b5d68bec68ffcf.png\"},\"952\":{\"t\":\"订阅2个Topic，每个Topic4个分区，共3个Consumer\"},\"953\":{\"t\":\"C0：[T0P0，T0P1，T1P0，T1P1]\"},\"954\":{\"t\":\"C1：[T0P2，T1P2]\"},\"955\":{\"t\":\"C2：[T0P3，T1P3]\"},\"956\":{\"t\":\"RoundRobinAssignor\"},\"957\":{\"t\":\"RoundRobinAssignor的分配策略是将消费组内订阅的所有Topic的分区及所有消费者进行排序后尽量均衡的分配（RangeAssignor是针对单个Topic的分区进行排序分配的）。如果消费组内，消费者订阅的Topic列表是相同的（每个消费者都订阅了相同的Topic），那么分配结果是尽量均衡的（消费者之间分配到的分区数的差值不会超过1）。如果订阅的Topic列表是不同的，那么分配结果是不保证“尽量均衡”的，因为某些消费者不参与一些Topic的分配。\"},\"958\":{\"t\":\"51b27d00cf50d9aca86e0934ab42a565.png\"},\"959\":{\"t\":\"以上两个topic的情况，相比于之前RangeAssignor的分配策略，可以使分区分配的更均衡。不过考虑这种情况，假设有三个消费者分别为C0、C1、C2，有3个Topic T0、T1、T2，分别拥有1、2、3个分区，并且C0订阅T0，C1订阅T0和T1，C2订阅T0、T1、T2，那么RoundRobinAssignor的分配结果如下：\"},\"960\":{\"t\":\"4e161a06a0afcae8d2c06603d676de4e.png\"},\"961\":{\"t\":\"看上去分配已经尽量的保证均衡了，不过可以发现C2承担了4个分区的消费而C1订阅了T1，是不是把T1P1交给C1消费能更加的均衡呢？\"},\"962\":{\"t\":\"StickyAssignor\"},\"963\":{\"t\":\"StickyAssignor分区分配算法，目的是在执行一次新的分配时，能在上一次分配的结果的基础上，尽量少的调整分区分配的变动，节省因分区分配变化带来的开销。Sticky是“粘性的”，可以理解为分配结果是带“粘性的”——每一次分配变更相对上一次分配做最少的变动。其目标有两点：\"},\"964\":{\"t\":\"分区的分配尽量的均衡。\"},\"965\":{\"t\":\"每一次重分配的结果尽量与上一次分配结果保持一致。\"},\"966\":{\"t\":\"当这两个目标发生冲突时，优先保证第一个目标。第一个目标是每个分配算法都尽量尝试去完成的，而第二个目标才真正体现出StickyAssignor特性的。\"},\"967\":{\"t\":\"StickyAssignor算法比较复杂，下面举例来说明分配的效果（对比RoundRobinAssignor），前提条件：\"},\"968\":{\"t\":\"有4个Topic：T0、T1、T2、T3，每个Topic有2个分区。\"},\"969\":{\"t\":\"有3个Consumer：C0、C1、C2，所有Consumer都订阅了这4个分区。\"},\"970\":{\"t\":\"eb5597ed0b81b03c762e54ff3f909492.png\"},\"971\":{\"t\":\"上面红色的箭头代表的是有变动的分区分配，可以看出，StickyAssignor的分配策略，变动较小。\"},\"972\":{\"t\":\"参考：https://blog.csdn.net/easylife206/article/details/124580641?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-124580641-blog-124349832.235^v28^pc_relevant_t0_download&spm=1001.2101.3001.4242.3&utm_relevant_index=7\"},\"973\":{\"h\":\"kafka如何保证消息不被重复消费\",\"a\":\"kafka如何保证消息不被重复消费\"},\"974\":{\"h\":\"原因\",\"a\":\"原因\"},\"975\":{\"t\":\"（1）kafka有个offset的概念，当每个消息被写进去后，都有一个offset，代表他的序号，然后consumer消费该数据之后，隔一段时间，会把自己消费过的消息的offset提交一下，代表我已经消费过了。下次我要是重启，就会继续从上次消费到的offset来继续消费。但是当我们直接kill进程了，再重启。这会导致consumer有些消息处理了，但是没来得及提交offset。等重启之后，少数消息就会再次消费一次 （2）在Kafka中有一个Partition Balance机制，就是把多个Partition均衡的分配给多个消费者。消费端会从分配到的Partition里面去消费消息，如果消费者在默认的5分钟内没有处理完这一批消息。就会触发Kafka的Rebalance机制，从而导致offset自动提交失败。而Rebalance之后，消费者还是会从之前没提交的offset位置开始消费，从而导致消息重复消费。\"},\"976\":{\"h\":\"解决方案\",\"a\":\"解决方案\"},\"977\":{\"t\":\"开启kafka本身存在的幂等性：\"},\"978\":{\"t\":\"在这里插入图片描述\"},\"979\":{\"t\":\"注： 添加唯一ID，类似于数据库的主键，用于唯一标记一个消息。 ProducerID：#在每个新的Producer初始化时，会被分配一个唯一的PID SequenceNumber：#对于每个PID发送数据的每个Topic都对应一个从0开始单调递增的SN值。\"},\"980\":{\"t\":\"将获取的唯一id存表，（利用mySQl的唯一键约束，或者redis天然的set结构）\"},\"981\":{\"t\":\"参考：https://blog.csdn.net/m0_51167384/article/details/128106266?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&utm_relevant_index=8&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2Mjc4NDAvYXJ0aWNsZS9kZXRhaWxzLzc2NDM1Mzg1P3NwbT0xMDAxLjIxMDEuMzAwMS42NjUwLjEmdXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RVJhdGUtMS03NjQzNTM4NS1ibG9nLTExNzQxOTA1OC4yMzUlNUV2MjglNUVwY19yZWxldmFudF90MF9kb3dubG9hZCZkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VSYXRlLTEtNzY0MzUzODUtYmxvZy0xMTc0MTkwNTguMjM1JTVFdjI4JTVFcGNfcmVsZXZhbnRfdDBfZG93bmxvYWQmdXRtX3JlbGV2YW50X2luZGV4PTI%3D\"},\"982\":{\"h\":\"如何保证消息的顺序性?\",\"a\":\"如何保证消息的顺序性\"},\"983\":{\"h\":\"为什么要保证顺序？\",\"a\":\"为什么要保证顺序\"},\"984\":{\"t\":\"消息队列中的若干消息如果是对同一个数据进行操作, 这些操作具有前后关系, 必须要按前后的顺序执行, 否则就会造成数据异常.\"},\"985\":{\"h\":\"出现顺序错乱的场景：\",\"a\":\"出现顺序错乱的场景\"},\"986\":{\"t\":\"第一种情况: 一个queue, 有多个consumer去消费, 这样就会造成顺序的错误, consumer从MQ里面读取数据是有序的, 但是每个consumer的执行时间是不固定的, 无法保证先读到消息的consumer一定先完成操作, 这样就会出现消息并没有按照顺序执行, 造成数据顺序错误。 \"},\"987\":{\"t\":\"img\"},\"988\":{\"t\":\"第二种情况: 一个queue对应一个consumer, 但是consumer里面进行了多线程消费, 这样也会造成消息消费顺序错误。 \"},\"989\":{\"t\":\"img\"},\"990\":{\"h\":\"如何保证消息的消费顺序？\",\"a\":\"如何保证消息的消费顺序\"},\"991\":{\"t\":\"第一种方案: 拆分多个queue, 每一个queue一个consumer, 就是多一些queue而已, 确实是麻烦点; 这样也会造成吞吐量下降, 可以在消费者内部采用多线程的方式去消费。 \"},\"992\":{\"t\":\"img\"},\"993\":{\"t\":\"第二种方案: 就是一个queue对应一个consumer, 然后这个consumer内部用内存队列做排队, 然后分发给底层不同的worker来处理。 \"},\"994\":{\"t\":\"img\"},\"995\":{\"t\":\"参考：https://blog.csdn.net/qq_44901983/article/details/123416498\"},\"996\":{\"h\":\"Linux常用命令\"},\"997\":{\"h\":\"常用的命令\",\"a\":\"常用的命令\"},\"998\":{\"h\":\"内核\",\"a\":\"内核\"},\"999\":{\"h\":\"基本组件\",\"a\":\"基本组件\"},\"1000\":{\"h\":\"进程间通信方式\",\"a\":\"进程间通信方式\"},\"1001\":{\"h\":\"目录结构\",\"a\":\"目录结构\"},\"1002\":{\"t\":\"Linux 使用一种称为目录树的层次结构来组织文件和目录。目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。每个目录可以包含文件和其他子目录。结构层次鲜明，就像一棵倒立的树。\"},\"1003\":{\"h\":\"内存管理\"},\"1004\":{\"h\":\"1.虚拟内存管理\",\"a\":\"_1-虚拟内存管理\"},\"1005\":{\"h\":\"1.1局部性原理\",\"a\":\"_1-1局部性原理\"},\"1006\":{\"t\":\"在了解这部分知识之前，我要先告诉大家一个常见的局部性原理：\"},\"1007\":{\"t\":\"相关信息\"},\"1008\":{\"t\":\"程序局部性原理表现为：时间局部性和空间局部性。时间局部性是指如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某块数据被访问，则不久之后该数据可能再次被访问。空间局部性是指一旦程序访问了某个存储单元，则不久之后，其附近的存储单元也将被访问。\"},\"1009\":{\"t\":\"说白了就是一个变量在程序运行过程中，如果被引用过一次，那后续很有可能会再被引用到；一个变量被访问到过后，这个变量所在的位置附近的位置很有可能在程序后续运行中被访问到。\"},\"1010\":{\"t\":\"下面我们通过一段代码来看看局部性原理：\"},\"1011\":{\"t\":\"public int sum(int[] array) { int sum = 0; for (int i = 0; i < array.length; i++) { sum = sum + array[i]; } return sum; } \"},\"1012\":{\"t\":\"从上面的这段代码来看，就是一个很简单的数组元素求和，这里我们主要看 sum 和 array 两个变量，我们可以看到 sum 在每次循环中都会用到，另外它只是一个简单变量，所以我们可以看到，sum 是符合我们上面提到的时间局部性，再访问一次后还会被继续访问到，但是它不存在我们所说的空间局部性了。\"},\"1013\":{\"t\":\"相反的，array 数组中的每个元素只访问一次，另外数组底层的存储是连续的，所以 array 变量符合我们上面提到的空间局部性，但是不符合时间局部性。\"},\"1014\":{\"h\":\"2.2为什么需要虚拟内存？\",\"a\":\"_2-2为什么需要虚拟内存\"},\"1015\":{\"t\":\"image.png\"},\"1016\":{\"h\":\"操作系统\"},\"1017\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1018\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1019\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1020\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1021\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1022\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1023\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1024\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1025\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1026\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1027\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1028\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1029\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1030\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1031\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1032\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1033\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1034\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1035\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1036\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1037\":{\"t\":\"锁：加锁、解锁操作；\"},\"1038\":{\"t\":\"信号量：P、V 操作；\"},\"1039\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1040\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1041\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1042\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1043\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1044\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1045\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1046\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1047\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1048\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1049\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1050\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1051\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1052\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1053\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1054\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1055\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1056\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1057\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1058\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1059\":{\"t\":\"img\"},\"1060\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1061\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1062\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1063\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1064\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1065\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1066\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1067\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1068\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1069\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1070\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1071\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1072\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1073\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1074\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1075\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1076\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1077\":{\"t\":\"mmap + write\"},\"1078\":{\"t\":\"sendfile\"},\"1079\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1080\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1081\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1082\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1083\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1084\":{\"t\":\"img\"},\"1085\":{\"t\":\"具体过程如下：\"},\"1086\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1087\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1088\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1089\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1090\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1091\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1092\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1093\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1094\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1095\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1096\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1097\":{\"t\":\"img\"},\"1098\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1099\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1100\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1101\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1102\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1103\":{\"t\":\"img\"},\"1104\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1105\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1106\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1107\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1108\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1109\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1110\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1111\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1112\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1113\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1114\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1115\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1116\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1117\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1118\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1119\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1120\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1121\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1122\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1123\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1124\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1125\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1126\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1127\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1128\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1129\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1130\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1131\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1132\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1133\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1134\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1135\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1136\":{\"t\":\"img\"},\"1137\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1138\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1139\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1140\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1141\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1142\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1143\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1144\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1145\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1146\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1147\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1148\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1149\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1150\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1151\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1152\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1153\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1154\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1155\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1156\":{\"t\":\"img\"},\"1157\":{\"t\":\"详细说一下这个方案：\"},\"1158\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1159\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1160\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1161\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1162\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1163\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1164\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1165\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1166\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1167\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1168\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1169\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1170\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1171\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1172\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1173\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1174\":{\"t\":\"img\"},\"1175\":{\"t\":\"方案详细说明如下：\"},\"1176\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1177\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1178\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1179\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1180\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1181\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1182\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1183\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1184\":{\"h\":\"操作系统\"},\"1185\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1186\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1187\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1188\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1189\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1190\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1191\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1192\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1193\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1194\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1195\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1196\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1197\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1198\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1199\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1200\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1201\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1202\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1203\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1204\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1205\":{\"t\":\"锁：加锁、解锁操作；\"},\"1206\":{\"t\":\"信号量：P、V 操作；\"},\"1207\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1208\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1209\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1210\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1211\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1212\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1213\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1214\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1215\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1216\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1217\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1218\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1219\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1220\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1221\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1222\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1223\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1224\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1225\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1226\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1227\":{\"t\":\"img\"},\"1228\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1229\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1230\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1231\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1232\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1233\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1234\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1235\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1236\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1237\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1238\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1239\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1240\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1241\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1242\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1243\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1244\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1245\":{\"t\":\"mmap + write\"},\"1246\":{\"t\":\"sendfile\"},\"1247\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1248\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1249\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1250\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1251\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1252\":{\"t\":\"img\"},\"1253\":{\"t\":\"具体过程如下：\"},\"1254\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1255\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1256\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1257\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1258\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1259\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1260\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1261\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1262\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1263\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1264\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1265\":{\"t\":\"img\"},\"1266\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1267\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1268\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1269\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1270\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1271\":{\"t\":\"img\"},\"1272\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1273\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1274\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1275\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1276\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1277\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1278\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1279\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1280\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1281\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1282\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1283\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1284\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1285\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1286\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1287\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1288\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1289\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1290\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1291\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1292\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1293\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1294\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1295\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1296\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1297\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1298\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1299\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1300\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1301\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1302\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1303\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1304\":{\"t\":\"img\"},\"1305\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1306\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1307\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1308\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1309\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1310\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1311\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1312\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1313\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1314\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1315\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1316\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1317\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1318\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1319\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1320\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1321\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1322\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1323\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1324\":{\"t\":\"img\"},\"1325\":{\"t\":\"详细说一下这个方案：\"},\"1326\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1327\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1328\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1329\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1330\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1331\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1332\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1333\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1334\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1335\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1336\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1337\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1338\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1339\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1340\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1341\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1342\":{\"t\":\"img\"},\"1343\":{\"t\":\"方案详细说明如下：\"},\"1344\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1345\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1346\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1347\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1348\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1349\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1350\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1351\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1352\":{\"h\":\"操作系统\"},\"1353\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1354\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1355\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1356\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1357\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1358\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1359\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1360\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1361\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1362\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1363\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1364\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1365\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1366\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1367\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1368\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1369\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1370\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1371\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1372\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1373\":{\"t\":\"锁：加锁、解锁操作；\"},\"1374\":{\"t\":\"信号量：P、V 操作；\"},\"1375\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1376\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1377\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1378\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1379\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1380\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1381\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1382\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1383\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1384\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1385\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1386\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1387\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1388\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1389\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1390\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1391\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1392\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1393\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1394\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1395\":{\"t\":\"img\"},\"1396\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1397\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1398\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1399\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1400\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1401\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1402\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1403\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1404\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1405\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1406\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1407\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1408\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1409\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1410\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1411\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1412\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1413\":{\"t\":\"mmap + write\"},\"1414\":{\"t\":\"sendfile\"},\"1415\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1416\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1417\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1418\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1419\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1420\":{\"t\":\"img\"},\"1421\":{\"t\":\"具体过程如下：\"},\"1422\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1423\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1424\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1425\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1426\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1427\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1428\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1429\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1430\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1431\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1432\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1433\":{\"t\":\"img\"},\"1434\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1435\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1436\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1437\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1438\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1439\":{\"t\":\"img\"},\"1440\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1441\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1442\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1443\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1444\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1445\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1446\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1447\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1448\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1449\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1450\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1451\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1452\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1453\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1454\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1455\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1456\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1457\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1458\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1459\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1460\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1461\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1462\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1463\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1464\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1465\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1466\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1467\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1468\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1469\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1470\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1471\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1472\":{\"t\":\"img\"},\"1473\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1474\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1475\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1476\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1477\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1478\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1479\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1480\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1481\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1482\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1483\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1484\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1485\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1486\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1487\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1488\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1489\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1490\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1491\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1492\":{\"t\":\"img\"},\"1493\":{\"t\":\"详细说一下这个方案：\"},\"1494\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1495\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1496\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1497\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1498\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1499\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1500\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1501\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1502\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1503\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1504\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1505\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1506\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1507\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1508\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1509\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1510\":{\"t\":\"img\"},\"1511\":{\"t\":\"方案详细说明如下：\"},\"1512\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1513\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1514\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1515\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1516\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1517\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1518\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1519\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1520\":{\"h\":\"操作系统\"},\"1521\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"1522\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"1523\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"1524\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1525\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1526\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1527\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1528\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1529\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1530\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"1531\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"1532\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1533\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1534\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1535\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1536\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1537\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1538\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1539\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1540\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1541\":{\"t\":\"锁：加锁、解锁操作；\"},\"1542\":{\"t\":\"信号量：P、V 操作；\"},\"1543\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1544\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"1545\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1546\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1547\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1548\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1549\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1550\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1551\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1552\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"1553\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"1554\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"1555\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"1556\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"1557\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"1558\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"1559\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"1560\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1561\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1562\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"1563\":{\"t\":\"img\"},\"1564\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"1565\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"1566\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"1567\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"1568\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"1569\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1570\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1571\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"1572\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"1573\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"1574\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"1575\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"1576\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1577\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"1578\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"1579\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"1580\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1581\":{\"t\":\"mmap + write\"},\"1582\":{\"t\":\"sendfile\"},\"1583\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"1584\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"1585\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1586\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1587\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1588\":{\"t\":\"img\"},\"1589\":{\"t\":\"具体过程如下：\"},\"1590\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1591\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1592\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1593\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1594\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1595\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"1596\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1597\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1598\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1599\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1600\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1601\":{\"t\":\"img\"},\"1602\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1603\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1604\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1605\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1606\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1607\":{\"t\":\"img\"},\"1608\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1609\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1610\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1611\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"1612\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1613\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1614\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1615\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"1616\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"1617\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"1618\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"1619\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"1620\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"1621\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"1622\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"1623\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1624\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"1625\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"1626\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1627\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"1628\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"1629\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"1630\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"1631\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"1632\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"1633\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"1634\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"1635\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"1636\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"1637\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1638\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1639\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"1640\":{\"t\":\"img\"},\"1641\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1642\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1643\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1644\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1645\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1646\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1647\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1648\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1649\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1650\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1651\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1652\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1653\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1654\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1655\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1656\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"1657\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"1658\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1659\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"1660\":{\"t\":\"img\"},\"1661\":{\"t\":\"详细说一下这个方案：\"},\"1662\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1663\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1664\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1665\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1666\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1667\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1668\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"1669\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"1670\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"1671\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"1672\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"1673\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"1674\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"1675\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"1676\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"1677\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"1678\":{\"t\":\"img\"},\"1679\":{\"t\":\"方案详细说明如下：\"},\"1680\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1681\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1682\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1683\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1684\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1685\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1686\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1687\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"1688\":{\"h\":\"Docker\"},\"1689\":{\"h\":\"Docker\",\"a\":\"docker\"},\"1690\":{\"h\":\"什么是 Docker?\",\"a\":\"什么是-docker\"},\"1691\":{\"t\":\"Docker 是世界领先的软件容器平台。\"},\"1692\":{\"t\":\"Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 UnionFS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\"},\"1693\":{\"t\":\"Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。\"},\"1694\":{\"t\":\"用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\"},\"1695\":{\"h\":\"Docker的架构\",\"a\":\"docker的架构\"},\"1696\":{\"t\":\"Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，模块各司其职。下图是它的总体架构图：\"},\"1697\":{\"t\":\"img\"},\"1698\":{\"t\":\"用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。\"},\"1699\":{\"t\":\"Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。\"},\"1700\":{\"t\":\"Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。\"},\"1701\":{\"t\":\"Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graphdriver 将下载镜像以 Graph 的形式存储。\"},\"1702\":{\"t\":\"当需要为 Docker 创建网络环境时，通过网络管理驱动 Networkdriver 创建并配置 Docker容器网络环境。\"},\"1703\":{\"t\":\"当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。\"},\"1704\":{\"t\":\"Libcontainer 是一项独立的容器管理包，Networkdriver 以及 Execdriver 都是通过 Libcontainer 来实现具体对容器进行的操作。\"},\"1705\":{\"h\":\"镜像和容器的相关操作\",\"a\":\"镜像和容器的相关操作\"},\"1706\":{\"h\":\"Spring Cloud\"},\"1707\":{\"h\":\"Spring Cloud\",\"a\":\"spring-cloud\"},\"1708\":{\"h\":\"什么是Spring Cloud？\",\"a\":\"什么是spring-cloud\"},\"1709\":{\"t\":\"Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。\"},\"1710\":{\"h\":\"微服务的概念\",\"a\":\"微服务的概念\"},\"1711\":{\"t\":\"分布式，多个模块，每一个模块都是一个单独的系统。\"},\"1712\":{\"t\":\"以前所有的代码都放在同一个工程中、部署在同一个服务器、同一项目的不同模块不同功能互相抢占资源，微服务就是将工程根据不同的业务规则拆分成微服务，部署在不同的服务器上，服务之间相互调用，java中有的微服务有dubbo(只能用来做微服务)、springcloud( 提供了服务的发现、断路器等)。\"},\"1713\":{\"t\":\"微服务的特点：\"},\"1714\":{\"t\":\"按业务划分为一个独立运行的程序，即服务单元\"},\"1715\":{\"t\":\"服务之间通过HTTP协议相互通信\"},\"1716\":{\"t\":\"自动化部署\"},\"1717\":{\"t\":\"可以用不同的编程语言\"},\"1718\":{\"t\":\"可以用不同的存储技术\"},\"1719\":{\"t\":\"服务集中化管理\"},\"1720\":{\"t\":\"微服务是一个分布式系统\"},\"1721\":{\"t\":\"微服务的优势\"},\"1722\":{\"t\":\"将一个复杂的业务拆分为若干小的业务，将复杂的业务简单化，新人只需要了解他所接管的服务的代码，减少了新人的学习成本。\"},\"1723\":{\"t\":\"由于微服务是分布式服务，服务与服务之间没有任何耦合。微服务系统的微服务单元具有很强的横向拓展能力。\"},\"1724\":{\"t\":\"服务与服务之间采用HTTP网络通信协议来通信，单个服务内部高度耦合，服务与服务之间完全独立，无耦合。这使得微服务可以采用任何的开发语言和技术来实现，提高开发效率、降低开发成本。\"},\"1725\":{\"t\":\"微服务是按照业务进行拆分的，并有坚实的服务边界，若要重写某一业务代码，不需了解所有业务，重写简单。\"},\"1726\":{\"t\":\"微服务的每个服务单元是独立部署的，即独立运行在某个进程中，微服务的修改和部署对其他服务没有影响。\"},\"1727\":{\"t\":\"微服务在CAP理论中采用的AP架构，具有高可用分区容错特点。高可用主要体现在系统7x24不间断服务，他要求系统有大量的服务器集群，从而提高系统的负载能力。分区容错也使得系统更加健壮。\"},\"1728\":{\"t\":\"微服务的不足\"},\"1729\":{\"t\":\"微服务的复杂度：构建一个微服务比较复杂，服务与服务之间通过HTTP协议或其他消息传递机制通信，开发者要选出最佳的通信机制，并解决网络服务差时带来的风险。\"},\"1730\":{\"t\":\"分布式事物：将事物分成多阶段提交，如果一阶段某一节点失败仍会导致数据不正确。如果事物涉及的节点很多，某一节点的网络出现异常会导致整个事务处于阻塞状态，大大降低数据库的性能。\"},\"1731\":{\"t\":\"服务划分：将一个完整的系统拆分成很多个服务，是一件非常困难的事，因为这涉及了具体的业务场景\"},\"1732\":{\"t\":\"服务部署：最佳部署容器Docker\"},\"1733\":{\"h\":\"Spring Cloud的优缺点以及组件\",\"a\":\"spring-cloud的优缺点以及组件\"},\"1734\":{\"t\":\"设计目标\"},\"1735\":{\"t\":\"协调各个微服务，简化分布式系统开发。\"},\"1736\":{\"t\":\"优缺点\"},\"1737\":{\"t\":\"微服务的框架那么多比如：dubbo、Kubernetes，为什么就要使用Spring Cloud的呢？\"},\"1738\":{\"t\":\"优点：\"},\"1739\":{\"t\":\"产出于Spring大家族，Spring在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善 组件丰富，功能齐全。Spring Cloud 为微服务架构提供了非常完整的支持。例如、配置管理、服务发现、断路器、微服务网关等； Spring Cloud 社区活跃度很高，教程很丰富，遇到问题很容易找到解决方案 服务拆分粒度更细，耦合度比较低，有利于资源重复利用，有利于提高开发效率 可以更精准的制定优化服务方案，提高系统的可维护性 减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发 微服务可以是跨平台的，可以用任何一种语言开发 适于互联网时代，产品迭代周期更短 \"},\"1740\":{\"t\":\"缺点：\"},\"1741\":{\"t\":\"微服务过多，治理成本高，不利于维护系统 分布式系统开发的成本高（容错，分布式事务等）对团队挑战大 \"},\"1742\":{\"t\":\"springcloud中的组件有那些？\"},\"1743\":{\"t\":\"说出主要的组件： Spring Cloud Eureka,服务注册中心,特性有失效剔除、服务保护 Spring Cloud Zuul,API服务网关,功能有路由分发和过滤 Spring Cloud Config,分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式 Spring Cloud Ribbon,客户端负载均衡,特性有区域亲和,重试机制 Spring Cloud Hystrix,客户端容错保护,特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离 Spring Cloud Feign,声明式服务调用本质上就是Ribbon+Hystrix Spring Cloud Stream,消息驱动,有Sink、Source、Processor三种通道,特性有订阅发布、消费组、消息分区 Spring Cloud Bus,消息总线,配合Config仓库修改的一种Stream实现， Spring Cloud Sleuth,分布式服务追踪,需要搞清楚TraceID和SpanID以及抽样,如何与ELK整合 \"},\"1744\":{\"t\":\"Spring Cloud项目部署架构？\"},\"1745\":{\"t\":\"img\"},\"1746\":{\"t\":\"网关与过滤器有什么区别？\"},\"1747\":{\"t\":\"网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。\"},\"1748\":{\"t\":\"什么是断路器\"},\"1749\":{\"t\":\"当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）\"},\"1750\":{\"t\":\"断路器有三种状态\"},\"1751\":{\"t\":\"打开状态：一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务\"},\"1752\":{\"t\":\"半开状态：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭\"},\"1753\":{\"t\":\"关闭状态：当服务一直处于正常状态 能正常调用\"},\"1754\":{\"t\":\"什么是 Hystrix？\"},\"1755\":{\"t\":\"在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等一些防止雪崩的技术。\"},\"1756\":{\"t\":\"Hystrix有四种防雪崩方式:\"},\"1757\":{\"t\":\"服务降级：接口调用失败就调用本地的方法返回一个空\"},\"1758\":{\"t\":\"服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息\"},\"1759\":{\"t\":\"服务隔离：隔离服务之间相互影响\"},\"1760\":{\"t\":\"服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。\"},\"1761\":{\"t\":\"什么是Feign？\"},\"1762\":{\"t\":\"Feign 是一个声明web服务客户端，这使得编写web服务客户端更容易。它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。\"},\"1763\":{\"h\":\"Feign远程调用的基本流程\",\"a\":\"feign远程调用的基本流程\"},\"1764\":{\"t\":\"Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，放回给调用者。Feign远程调用的基本流程，大致如下图所示。\"},\"1765\":{\"t\":\"在这里插入图片描述\"},\"1766\":{\"t\":\"从上图可以看到，Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的 Request 请求。通过Feign以及JAVA的动态代理机制，使得Java 开发人员，可以不用通过HTTP框架去封装HTTP请求报文的方式，完成远程服务的HTTP调用。\"},\"1767\":{\"t\":\"过程：\"},\"1768\":{\"t\":\"在微服务启动时，Feign会进行包扫描，对加@FeignClient注解的接口，按照注解的规则，创建远程接口的本地JDK Proxy代理实例。然后，将这些本地Proxy代理实例，注入到Spring IOC容器中。当远程接口的方法被调用，由Proxy代理实例去完成真正的远程访问，并且返回结果。\"},\"1769\":{\"h\":\"ZooKeeper\"},\"1770\":{\"h\":\"ZooKeeper\",\"a\":\"zookeeper\"},\"1771\":{\"h\":\"基本功能\",\"a\":\"基本功能\"},\"1772\":{\"t\":\"ZooKeeper 是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\"},\"1773\":{\"t\":\"ZooKeeper 为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。这些功能的实现主要依赖于 ZooKeeper 提供的 数据存储+事件监听 功能。\"},\"1774\":{\"t\":\"ZooKeeper 将数据保存在内存中，性能是不错的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景）。\"},\"1775\":{\"t\":\"另外，很多顶级的开源项目都用到了 ZooKeeper，比如：\"},\"1776\":{\"t\":\"Kafka : ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。不过，在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构。\"},\"1777\":{\"h\":\"ZAB算法\",\"a\":\"zab算法\"},\"1778\":{\"h\":\"ZAB 协议介绍\",\"a\":\"zab-协议介绍\"},\"1779\":{\"t\":\"ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\"},\"1780\":{\"h\":\"ZAB 协议两种基本的模式：崩溃恢复和消息广播\",\"a\":\"zab-协议两种基本的模式-崩溃恢复和消息广播\"},\"1781\":{\"t\":\"ZAB 协议包括两种基本的模式，分别是\"},\"1782\":{\"t\":\"崩溃恢复 ：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致。\"},\"1783\":{\"t\":\"消息广播 ：当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进入消息广播模式了。 当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\"},\"1784\":{\"h\":\"Zookeeper 架构\",\"a\":\"zookeeper-架构\"},\"1785\":{\"t\":\"作为一个优秀高效且可靠的分布式协调框架，ZooKeeper 在解决分布式数据一致性问题时并没有直接使用 Paxos ，而是专门定制了一致性协议叫做 ZAB(ZooKeeper Atomic Broadcast) 原子广播协议，该协议能够很好地支持 崩溃恢复 。\"},\"1786\":{\"h\":\"ZAB 中的三个角色\",\"a\":\"zab-中的三个角色\"},\"1787\":{\"t\":\"和介绍 Paxos 一样，在介绍 ZAB 协议之前，我们首先来了解一下在 ZAB 中三个主要的角色，Leader 领导者、Follower跟随者、Observer观察者 。\"},\"1788\":{\"t\":\"Leader ：集群中 唯一的写请求处理者 ，能够发起投票（投票也是为了进行写请求）。\"},\"1789\":{\"t\":\"Follower：能够接收客户端的请求，如果是读请求则可以自己处理，如果是写请求则要转发给 Leader 。在选举过程中会参与投票，有选举权和被选举权 。\"},\"1790\":{\"t\":\"Observer ：就是没有选举权和被选举权的 Follower 。\"},\"1791\":{\"t\":\"在 ZAB 协议中对 zkServer(即上面我们说的三个角色的总称) 还有两种模式的定义，分别是 消息广播 和 崩溃恢复 。\"},\"1792\":{\"h\":\"消息广播模式\",\"a\":\"消息广播模式\"},\"1793\":{\"t\":\"说白了就是 ZAB 协议是如何处理写请求的，上面我们不是说只有 Leader 能处理写请求嘛？那么我们的 Follower 和 Observer 是不是也需要 同步更新数据 呢？总不能数据只在 Leader 中更新了，其他角色都没有得到更新吧？\"},\"1794\":{\"t\":\"第一步肯定需要 Leader 将写请求 广播 出去呀，让 Leader 问问 Followers 是否同意更新，如果超过半数以上的同意那么就进行 Follower 和 Observer 的更新（和 Paxos 一样）。\"},\"1795\":{\"t\":\"在 Leader 这端，它为每个其他的 zkServer 准备了一个 队列 ，采用先进先出的方式发送消息。由于协议是 通过 TCP 来进行网络通信的，保证了消息的发送顺序性，接受顺序性也得到了保证。\"},\"1796\":{\"t\":\"除此之外，在 ZAB 中还定义了一个 全局单调递增的事务ID ZXID ，它是一个64位long型，其中高32位表示 epoch 年代，低32位表示事务id。epoch 是会根据 Leader 的变化而变化的，当一个 Leader 挂了，新的 Leader 上位的时候，年代（epoch）就变了。而低32位可以简单理解为递增的事务id。\"},\"1797\":{\"t\":\"定义这个的原因也是为了顺序性，每个 proposal 在 Leader 中生成后需要 通过其 ZXID 来进行排序 ，才能得到处理。\"},\"1798\":{\"h\":\"崩溃恢复模式\",\"a\":\"崩溃恢复模式\"},\"1799\":{\"t\":\"说到崩溃恢复我们首先要提到 ZAB 中的 Leader 选举算法，当系统出现崩溃影响最大应该是 Leader 的崩溃，因为我们只有一个 Leader ，所以当 Leader 出现问题的时候我们势必需要重新选举 Leader 。\"},\"1800\":{\"t\":\"Leader 选举可以分为两个不同的阶段，第一个是我们提到的 Leader 宕机需要重新选举，第二则是当 Zookeeper 启动时需要进行系统的 Leader 初始化选举。下面我先来介绍一下 ZAB 是如何进行初始化选举的。\"},\"1801\":{\"t\":\"假设我们集群中有3台机器，那也就意味着我们需要两台以上同意（超过半数）。比如这个时候我们启动了 server1 ，它会首先 投票给自己 ，投票内容为服务器的 myid 和 ZXID ，因为初始化所以 ZXID 都为0，此时 server1 发出的投票为 (1,0)。但此时 server1 的投票仅为1，所以不能作为 Leader ，此时还在选举阶段所以整个集群处于 Looking 状态。\"},\"1802\":{\"t\":\"接着 server2 启动了，它首先也会将投票选给自己(2,0)，并将投票信息广播出去（server1也会，只是它那时没有其他的服务器了），server1 在收到 server2 的投票信息后会将投票信息与自己的作比较。首先它会比较 ZXID ，ZXID 大的优先为 Leader，如果相同则比较 myid，myid 大的优先作为 Leader。所以此时server1 发现 server2 更适合做 Leader，它就会将自己的投票信息更改为(2,0)然后再广播出去，之后server2 收到之后发现和自己的一样无需做更改，并且自己的 投票已经超过半数 ，则 确定 server2 为 Leader，server1 也会将自己服务器设置为 Following 变为 Follower。整个服务器就从 Looking 变为了正常状态。\"},\"1803\":{\"t\":\"当 server3 启动发现集群没有处于 Looking 状态时，它会直接以 Follower 的身份加入集群。\"},\"1804\":{\"t\":\"还是前面三个 server 的例子，如果在整个集群运行的过程中 server2 挂了，那么整个集群会如何重新选举 Leader 呢？其实和初始化选举差不多。\"},\"1805\":{\"t\":\"首先毫无疑问的是剩下的两个 Follower 会将自己的状态 从 Following 变为 Looking 状态 ，然后每个 server 会向初始化投票一样首先给自己投票（这不过这里的 zxid 可能不是0了，这里为了方便随便取个数字）。\"},\"1806\":{\"t\":\"假设 server1 给自己投票为(1,99)，然后广播给其他 server，server3 首先也会给自己投票(3,95)，然后也广播给其他 server。server1 和 server3 此时会收到彼此的投票信息，和一开始选举一样，他们也会比较自己的投票和收到的投票（zxid 大的优先，如果相同那么就 myid 大的优先）。这个时候 server1 收到了 server3 的投票发现没自己的合适故不变，server3 收到 server1 的投票结果后发现比自己的合适于是更改投票为(1,99)然后广播出去，最后 server1 收到了发现自己的投票已经超过半数就把自己设为 Leader，server3 也随之变为 Follower。\"},\"1807\":{\"t\":\"请注意 ZooKeeper 为什么要设置奇数个结点？比如这里我们是三个，挂了一个我们还能正常工作，挂了两个我们就不能正常工作了（已经没有超过半数的节点数了，所以无法进行投票等操作了）。而假设我们现在有四个，挂了一个也能工作，但是挂了两个也不能正常工作了，这是和三个一样的，而三个比四个还少一个，带来的效益是一样的，所以 Zookeeper 推荐奇数个 server 。\"},\"1808\":{\"t\":\"那么说完了 ZAB 中的 Leader 选举方式之后我们再来了解一下 崩溃恢复 是什么玩意？\"},\"1809\":{\"t\":\"其实主要就是 当集群中有机器挂了，我们整个集群如何保证数据一致性？\"},\"1810\":{\"t\":\"如果只是 Follower 挂了，而且挂的没超过半数的时候，因为我们一开始讲了在 Leader 中会维护队列，所以不用担心后面的数据没接收到导致数据不一致性。\"},\"1811\":{\"t\":\"如果 Leader 挂了那就麻烦了，我们肯定需要先暂停服务变为 Looking 状态然后进行 Leader 的重新选举（上面我讲过了），但这个就要分为两种情况了，分别是 确保已经被Leader提交的提案最终能够被所有的Follower提交 和 跳过那些已经被丢弃的提案 。\"},\"1812\":{\"t\":\"确保已经被Leader提交的提案最终能够被所有的Follower提交是什么意思呢？\"},\"1813\":{\"t\":\"假设 Leader (server2) 发送 commit 请求（忘了请看上面的消息广播模式），他发送给了 server3，然后要发给 server1 的时候突然挂了。这个时候重新选举的时候我们如果把 server1 作为 Leader 的话，那么肯定会产生数据不一致性，因为 server3 肯定会提交刚刚 server2 发送的 commit 请求的提案，而 server1 根本没收到所以会丢弃。\"},\"1814\":{\"t\":\"崩溃恢复\"},\"1815\":{\"t\":\"那怎么解决呢？\"},\"1816\":{\"t\":\"聪明的同学肯定会质疑，这个时候 server1 已经不可能成为 Leader 了，因为 server1 和 server3 进行投票选举的时候会比较 ZXID ，而此时 server3 的 ZXID 肯定比 server1 的大了。(不理解可以看前面的选举算法)\"},\"1817\":{\"t\":\"那么跳过那些已经被丢弃的提案又是什么意思呢？\"},\"1818\":{\"t\":\"假设 Leader (server2) 此时同意了提案N1，自身提交了这个事务并且要发送给所有 Follower 要 commit 的请求，却在这个时候挂了，此时肯定要重新进行 Leader 的选举，比如说此时选 server1 为 Leader （这无所谓）。但是过了一会，这个 挂掉的 Leader 又重新恢复了 ，此时它肯定会作为 Follower 的身份进入集群中，需要注意的是刚刚 server2 已经同意提交了提案N1，但其他 server 并没有收到它的 commit 信息，所以其他 server 不可能再提交这个提案N1了，这样就会出现数据不一致性问题了，所以 该提案N1最终需要被抛弃掉 。\"},\"1819\":{\"t\":\"崩溃恢复\"},\"1820\":{\"h\":\"CAP\",\"a\":\"cap\"},\"1821\":{\"h\":\"简介\",\"a\":\"简介\"},\"1822\":{\"t\":\"CAP 也就是 Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性） 这三个单词首字母组合。\"},\"1823\":{\"t\":\"img\"},\"1824\":{\"t\":\"在理论计算机科学中，CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能同时满足以下三点中的两个：\"},\"1825\":{\"t\":\"一致性（Consistency） : 所有节点访问同一份最新的数据副本\"},\"1826\":{\"t\":\"可用性（Availability）: 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\"},\"1827\":{\"t\":\"分区容错性（Partition Tolerance） : 分布式系统出现网络分区的时候，仍然能够对外提供服务。\"},\"1828\":{\"t\":\"什么是网络分区？\"},\"1829\":{\"t\":\"分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫 网络分区。\"},\"1830\":{\"h\":\"不是所谓的“3 选 2”\",\"a\":\"不是所谓的-3-选-2\"},\"1831\":{\"t\":\"大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。\"},\"1832\":{\"t\":\"当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。\"},\"1833\":{\"t\":\"简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。\"},\"1834\":{\"t\":\"因此，分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。 比如 ZooKeeper 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。\"},\"1835\":{\"t\":\"为啥不可能选择 CA 架构呢？ 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。\"},\"1836\":{\"t\":\"选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。\"},\"1837\":{\"t\":\"另外，需要补充说明的一点是： 如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。\"},\"1838\":{\"h\":\"场景问题\"},\"1839\":{\"h\":\"缓存一致性解决\",\"a\":\"缓存一致性解决\"},\"1840\":{\"h\":\"4G数据找系统记录(大数据题)\",\"a\":\"_4g数据找系统记录-大数据题\"},\"1841\":{\"h\":\"很多短任务线程，选择 synchronized 还是 lock（2022-04-11 携程）\",\"a\":\"很多短任务线程-选择-synchronized-还是-lock-2022-04-11-携程\"},\"1842\":{\"t\":\"锁竞争小时，synchronized和lock效率没差，偏向模式下（单线程读写）甚至高于lock，但是并发量上升时锁撤销会大幅影响性能，稳定自适应轻量级锁状态下，线程接近交替运行，或者说短任务线程多，基本一样，因为都是自旋，大量任务并发竞争时，随着任务量的增大，synchronized的效率会远小于lock，因为重量级锁会频繁切换内核态与用户态；大量长任务，只能重量级锁。\"},\"1843\":{\"h\":\"多个人给一个主播打赏怎么设计？（2022-6-3 58同城）\",\"a\":\"多个人给一个主播打赏怎么设计-2022-6-3-58同城\"},\"1844\":{\"t\":\"我说是一个高并发写的操作，对一个记录频繁写，分批操作，比如 10 个记录 操作一次。他说这个方案可以 但是有 100 个记录 怎么去做一个一个操作呢？我说如果在一个进程可以 分多个线程分批。他说还是不够快 我们是用的 MQ 多个消费者 一个打赏就发一个消息\"},\"1845\":{\"h\":\"怎么实现一个点赞功能？\",\"a\":\"怎么实现一个点赞功能\"},\"1846\":{\"t\":\"主要的流程解释下：先查询数据库改用户是否进行点赞，如果已经点赞则抛出异常，如果没有则new一个对象来一个一个Set，然后将已点赞的信息存入redis中，相反，取消点赞的操作就是删除redis中的数据即可，然后通过Dubbo调用API来完成保存操作，因为我这里是还要获取点赞数和评论数啥的，所以会对动态表进行更新操作。\"},\"1847\":{\"h\":\"比如下单清空购物车，你是如何设计的？\",\"a\":\"比如下单清空购物车-你是如何设计的\"},\"1848\":{\"t\":\"生产者（订单系统）产生消息，发送一条半事务消息到MQ服务器\"},\"1849\":{\"t\":\"MQ收到消息后，将消息持久化到存储系统，这条消息的状态是待发送状态。\"},\"1850\":{\"t\":\"MQ服务器返回ACK确认到生产者，此时MQ不会触发消息推送事件\"},\"1851\":{\"t\":\"生产者执行本地事务（订单创建成功，提交事务消息）\"},\"1852\":{\"t\":\"如果本地事务执行成功，即commit执行结果到MQ服务器；如果执行失败，发送rollback。\"},\"1853\":{\"t\":\"如果是commit正常提交，MQ服务器更新消息状态为可发送；如果是rollback，即删除消息。\"},\"1854\":{\"t\":\"如果消息状态更新为可发送，则MQ服务器会push消息给消费者（购物车系统）。消费者消费完（即拿到订单消息，清空购物车成功）就应答ACK。\"},\"1855\":{\"t\":\"如果MQ服务器长时间没有收到生产者的commit或者rollback，它会反查生产者，然后根据查询到的结果（回滚操作或者重新发送消息）执行最终状态。\"},\"1856\":{\"t\":\"有些伙伴可能有疑惑，如果消费者消费失败怎么办呢？那数据是不是不一致啦？所以就需要消费者消费成功，执行业务逻辑成功，再反馈ack嘛。如果消费者消费失败，那就自动重试嘛，接口支持幂等即可。\"},\"1857\":{\"h\":\"排行榜的实现，比如高考成绩排序（2022 虾皮）\",\"a\":\"排行榜的实现-比如高考成绩排序-2022-虾皮\"},\"1858\":{\"t\":\"排行版的实现，一般使用redis的zset数据类型。\"},\"1859\":{\"t\":\"zadd key score member [score member ...]，zrank key member \"},\"1860\":{\"h\":\"有一批帖子，会根据类别搜索，但是现在是单独一个表，现在查询非常慢，如何提高搜索性能？（2022 虾皮）\",\"a\":\"有一批帖子-会根据类别搜索-但是现在是单独一个表-现在查询非常慢-如何提高搜索性能-2022-虾皮\"},\"1861\":{\"t\":\"根据类别分库分表，库可以放到不同的实例上，经常查询的不变的数据]可以放到缓存里。 数据有更新时，需要刷新下缓存 因为分表后，只能是固定类别，所以需要根据类别去分开查找。 如果还有另一个重要的字段也需要查，可以再建一个分表，user-ses/ses-user就是这么做的，但是冗余就比较大。\"},\"1862\":{\"h\":\"如果有多个表，进行聚合查询，如何解决深分页的问题（2022 虾皮）\",\"a\":\"如果有多个表-进行聚合查询-如何解决深分页的问题-2022-虾皮\"},\"1863\":{\"t\":\"就是保存每个节点的表id给前端，前端查询时把id返回过来了，然后加到SQL里，但是不一定准。这里回答的是单个表吧。\"},\"1864\":{\"h\":\"分表的数据，动态增加一张表，不停服如何实现？（2022 虾皮）\",\"a\":\"分表的数据-动态增加一张表-不停服如何实现-2022-虾皮\"},\"1865\":{\"t\":\"分区策略使用一致性哈希 然后新表的数据，查询的时候，先查老的，再插入新的。如果老数据没有动，需要有对应的迁移服务进行定时迁移。插入的时候优先插入到新的表。\"},\"1866\":{\"h\":\"迁移线程和用户线程同时执行，会有数据库不一致的问题，怎么解决？（2022 虾皮）\",\"a\":\"迁移线程和用户线程同时执行-会有数据库不一致的问题-怎么解决-2022-虾皮\"},\"1867\":{\"t\":\"加分布式锁。\"},\"1868\":{\"h\":\"两个机房，某个机房可能断电，如何做多机房容灾（2022 虾皮）\",\"a\":\"两个机房-某个机房可能断电-如何做多机房容灾-2022-虾皮\"},\"1869\":{\"t\":\"负载均衡层，支持切换机房写数据的时候，中间件（db/redis/es）都要进行双写。\"},\"1870\":{\"t\":\"kafka容灾，mirror maker: https://cloud.tencent.com/developer/article/1358933\"},\"1871\":{\"h\":\"主从机房同步有什么问题呢？ （2022 虾皮）\",\"a\":\"主从机房同步有什么问题呢-2022-虾皮\"},\"1872\":{\"t\":\"会有比较大的延迟。 一些分布式的问题，例如分布式事务，可能就执行了几步，然后就挂了，需要有一定的策略，进行回滚或者提交。 切换机房的过程中，可能存在数据丢失，重复数据等\"},\"1873\":{\"t\":\"双向同步，两个机房都能写入，如果操作的是各自的数据的话，问题不大。如果操作的是相同数据，必然会有冲突，需要解决。所以上层保证相同数据到同一个机房即可，然后同步到另外一个机房，保证每个机房都有全量的数据。各种中间件都要做改造。\"},\"1874\":{\"t\":\"总之，分片的核心思路在于，让同一个用户的相关请求，只在一个机房内完成所有业务「闭环」，不再出现「跨机房」访问。\"},\"1875\":{\"t\":\"阿里在实施这种方案时，给它起了个名字，叫做「单元化」。\"},\"1876\":{\"t\":\"这里还有一种情况，是无法做数据分片的：全局数据。例如系统配置、商品库存这类需要强一致的数据，这类服务依旧只能采用写主机房，读从机房的方案，不做双活。\"},\"1877\":{\"t\":\"双活的重点，是要优先保证「核心」业务先实现双活，并不是「全部」业务实现双活。\"},\"1878\":{\"h\":\"冷机房新请求过来，发现缓存没有，会把数据库打挂，这个怎么解决？（2022 虾皮）\",\"a\":\"冷机房新请求过来-发现缓存没有-会把数据库打挂-这个怎么解决-2022-虾皮\"},\"1879\":{\"t\":\"预热，提前加载到缓存。 或者平时保持一定的流量。 用了缓存的，一般需要预热下，防止雪崩。\"},\"1880\":{\"h\":\"定时任务这种，怎么改变执行的机房（2022 虾皮）\",\"a\":\"定时任务这种-怎么改变执行的机房-2022-虾皮\"},\"1881\":{\"t\":\"加开关，任何时候都有一个条件不满足，在空跑。\"},\"1882\":{\"h\":\"4.HTTP常见面试题\"},\"1883\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"1884\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"1885\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"1886\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"1887\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"1888\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"1889\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"1890\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"1891\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"1892\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"1893\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"1894\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"1895\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"1896\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"1897\":{\"h\":\"HTTP协议中为什么广泛使用的还是HTTP1.1？\"},\"1898\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"1899\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"1900\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"1901\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"1902\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"1903\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"1904\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"1905\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"1906\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"1907\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"1908\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"1909\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"1910\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"1911\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"1912\":{\"h\":\"5.HTTP2常见面试题\"},\"1913\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"1914\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"1915\":{\"h\":\"一、关于HTTP2\",\"a\":\"一、关于http2\"},\"1916\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"1917\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"1918\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"1919\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"1920\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"1921\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"1922\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"1923\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"1924\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"1925\":{\"h\":\"6.HTTP3常见面试题\"},\"1926\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"1927\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"1928\":{\"h\":\"一、关于HTTP2\",\"a\":\"一、关于http2\"},\"1929\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"1930\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"1931\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"1932\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"1933\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"1934\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"1935\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"1936\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"1937\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"1938\":{\"h\":\"7.HTTPS常见面试题\"},\"1939\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"1940\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"1941\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"1942\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"1943\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"1944\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"1945\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"1946\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"1947\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"1948\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"1949\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"1950\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"1951\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"1952\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"1953\":{\"h\":\"3.IP常见面试题\"},\"1954\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"1955\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"1956\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"1957\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"1958\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"1959\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"1960\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"1961\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"1962\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"1963\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"1964\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"1965\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"1966\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"1967\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"1968\":{\"h\":\"2.TCP和UDP常见面试题\"},\"1969\":{\"t\":\"大家好，这篇文章来一起看下TCP中那些烦人（常考）的面试题，话不多说，发车！\"},\"1970\":{\"t\":\"为了检验对这些知识掌握的深度，先给大家列出目录：\"},\"1971\":{\"t\":\"1.TCP基础\"},\"1972\":{\"t\":\"TCP 头格式有哪些？\"},\"1973\":{\"t\":\"为什么需要 TCP 协议？ TCP 工作在哪一层？\"},\"1974\":{\"t\":\"什么是 TCP ？\"},\"1975\":{\"t\":\"什么是 TCP 连接？\"},\"1976\":{\"t\":\"如何唯一确定一个 TCP 连接呢？\"},\"1977\":{\"t\":\"UDP 和 TCP 有什么区别呢？分别的应用场景是？\"},\"1978\":{\"t\":\"TCP 和 UDP 可以使用同一个端口吗？\"},\"1979\":{\"t\":\"2.TCP三次握手\"},\"1980\":{\"t\":\"TCP 三次握手过程是怎样的？\"},\"1981\":{\"t\":\"如何在 Linux 系统中查看 TCP 状态？\"},\"1982\":{\"t\":\"为什么是三次握手？不是两次、四次？\"},\"1983\":{\"t\":\"为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？\"},\"1984\":{\"t\":\"初始序列号 ISN 是如何随机产生的？\"},\"1985\":{\"t\":\"既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？\"},\"1986\":{\"t\":\"第一次握手丢失了，会发生什么？\"},\"1987\":{\"t\":\"第二次握手丢失了，会发生什么？\"},\"1988\":{\"t\":\"第三次握手丢失了，会发生什么？\"},\"1989\":{\"t\":\"什么是 SYN 攻击？如何避免 SYN 攻击？\"},\"1990\":{\"t\":\"3.TCP四次挥手\"},\"1991\":{\"t\":\"TCP 四次挥手过程是怎样的？\"},\"1992\":{\"t\":\"为什么挥手需要四次？\"},\"1993\":{\"t\":\"第一次挥手丢失了，会发生什么？\"},\"1994\":{\"t\":\"第二次挥手丢失了，会发生什么？\"},\"1995\":{\"t\":\"第三次挥手丢失了，会发生什么？\"},\"1996\":{\"t\":\"第四次挥手丢失了，会发生什么？\"},\"1997\":{\"t\":\"为什么 TIME_WAIT 等待的时间是 2MSL？\"},\"1998\":{\"t\":\"为什么需要 TIME_WAIT 状态？\"},\"1999\":{\"t\":\"TIME_WAIT 过多有什么危害？\"},\"2000\":{\"t\":\"如何优化 TIME_WAIT？\"},\"2001\":{\"t\":\"服务器出现大量 TIME_WAIT 状态的原因有哪些？\"},\"2002\":{\"t\":\"服务器出现大量 CLOSE_WAIT 状态的原因有哪些？\"},\"2003\":{\"t\":\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"},\"2004\":{\"t\":\"如果已经建立了连接，但是服务端的进程崩溃会发生什么？\"},\"2005\":{\"t\":\"4.Socket 编程\"},\"2006\":{\"t\":\"针对 TCP 应该如何 Socket 编程？\"},\"2007\":{\"t\":\"listen 时候参数 backlog 的意义？\"},\"2008\":{\"t\":\"accept 发生在三次握手的哪一步？\"},\"2009\":{\"t\":\"客户端调用 close 了，连接是断开的流程是什么？\"},\"2010\":{\"t\":\"没有 accept，能建立 TCP 连接吗？\"},\"2011\":{\"t\":\"没有 listen，能建立 TCP 连接吗？\"},\"2012\":{\"h\":\"1.TCP基础\",\"a\":\"_1-tcp基础\"},\"2013\":{\"h\":\"1.1TCP 头格式有哪些？\",\"a\":\"_1-1tcp-头格式有哪些\"},\"2014\":{\"t\":\"看了大佬小林coding的文章，我总结面试常考的也就是：\"},\"2015\":{\"t\":\"序列号：在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就「累加」一次该「数据字节数」的大小。用来解决网络包乱序问题。\"},\"2016\":{\"t\":\"确认应答号：指下一次「期望」收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。用来解决丢包的问题。\"},\"2017\":{\"t\":\"控制位：\"},\"2018\":{\"t\":\"ACK：该位为 1 时，「确认应答」的字段变为有效，TCP 规定除了最初建立连接时的 SYN 包之外该位必须设置为 1 。\"},\"2019\":{\"t\":\"RST：该位为 1 时，表示 TCP 连接中出现异常必须强制断开连接。\"},\"2020\":{\"t\":\"SYN：该位为 1 时，表示希望建立连接，并在其「序列号」的字段进行序列号初始值的设定。\"},\"2021\":{\"t\":\"FIN：该位为 1 时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 FIN 位为 1 的 TCP 段。\"},\"2022\":{\"h\":\"1.2为什么需要 TCP 协议？ TCP 工作在哪一层？\",\"a\":\"_1-2为什么需要-tcp-协议-tcp-工作在哪一层\"},\"2023\":{\"t\":\"原因：IP 层是「不可靠」的，它不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据的完整性。如果需要保障网络数据包的可靠性，那么就需要由上层（传输层）的 TCP 协议来负责。\"},\"2024\":{\"t\":\"因为 TCP 是一个工作在传输层的可靠数据传输的服务，它能确保接收端接收的网络包是无损坏、无间隔、非冗余和按序的。\"},\"2025\":{\"h\":\"1.3什么是 TCP ？\",\"a\":\"_1-3什么是-tcp\"},\"2026\":{\"t\":\"总结一句话：TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。\"},\"2027\":{\"t\":\"具体的给面试官扯一扯：\"},\"2028\":{\"t\":\"面向连接：一定是「一对一」才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；\"},\"2029\":{\"t\":\"可靠的：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；\"},\"2030\":{\"t\":\"字节流：用户消息通过 TCP 协议传输时，消息可能会被操作系统「分组」成多个的 TCP 报文，如果接收方的程序如果不知道「消息的边界」，是无法读出一个有效的用户消息的。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。\"},\"2031\":{\"h\":\"1.4什么是 TCP 连接？\",\"a\":\"_1-4什么是-tcp-连接\"},\"2032\":{\"t\":\"大白话：用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括 Socket、序列号和窗口大小称为连接。\"},\"2033\":{\"t\":\"包含三个东西：\"},\"2034\":{\"t\":\"Socket：由 IP 地址和端口号组成\"},\"2035\":{\"t\":\"序列号：用来解决乱序问题等\"},\"2036\":{\"t\":\"窗口大小：用来做流量控制\"},\"2037\":{\"h\":\"1.5如何唯一确定一个 TCP 连接呢？\",\"a\":\"_1-5如何唯一确定一个-tcp-连接呢\"},\"2038\":{\"t\":\"TCP 四元组可以唯一的确定一个连接，四元组包括如下：\"},\"2039\":{\"t\":\"源地址（IP地址，32位，存在IP头部）\"},\"2040\":{\"t\":\"源端口（端口，16位，存在TCP头部）\"},\"2041\":{\"t\":\"目的地址（IP地址，32位，存在IP头部）\"},\"2042\":{\"t\":\"目的端口（端口，16位，存在TCP头部）\"},\"2043\":{\"t\":\"这地方有个常见面试题：\"},\"2044\":{\"t\":\"有一个 IP 的服务端监听了一个端口，它的 TCP 的最大连接数是多少？\"},\"2045\":{\"t\":\"服务端通常固定在某个本地端口上监听，等待客户端的连接请求。\"},\"2046\":{\"t\":\"因此，客户端 IP 和端口是可变的，其理论值计算公式如下:\"},\"2047\":{\"t\":\"TCP的最大连接数=客户端的IP数⋅客户端的端口数\"},\"2048\":{\"t\":\"对 IPv4，客户端的 IP 数最多为 2 的 32 次方，客户端的端口数最多为 2 的 16 次方，也就是服务端单机最大 TCP 连接数，约为 2 的 48 次方。\"},\"2049\":{\"t\":\"当然，服务端最大并发 TCP 连接数远不能达到理论上限，还收到物理内存和其他因素影响。\"},\"2050\":{\"h\":\"1.6UDP 和 TCP 有什么区别呢？分别的应用场景是？\",\"a\":\"_1-6udp-和-tcp-有什么区别呢-分别的应用场景是\"},\"2051\":{\"t\":\"UDP 头部格式\"},\"2052\":{\"h\":\"1.6.1TCP 和 UDP 区别：\",\"a\":\"_1-6-1tcp-和-udp-区别\"},\"2053\":{\"t\":\"1.连接\"},\"2054\":{\"t\":\"TCP 是面向连接的传输层协议，传输数据前先要建立连接。\"},\"2055\":{\"t\":\"UDP 是不需要连接，即刻传输数据。\"},\"2056\":{\"t\":\"2. 服务对象\"},\"2057\":{\"t\":\"TCP 是一对一的两点服务，即一条连接只有两个端点。\"},\"2058\":{\"t\":\"UDP 支持一对一、一对多、多对多的交互通信\"},\"2059\":{\"t\":\"3. 可靠性\"},\"2060\":{\"t\":\"TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按序到达。\"},\"2061\":{\"t\":\"UDP 是尽最大努力交付，不保证可靠交付数据。但是我们可以基于 UDP 传输协议实现一个可靠的传输协议，比如 QUIC 协议，具体可以参见这篇文章：如何基于 UDP 协议实现可靠传输？\"},\"2062\":{\"t\":\"4. 拥塞控制、流量控制\"},\"2063\":{\"t\":\"TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。\"},\"2064\":{\"t\":\"UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。\"},\"2065\":{\"t\":\"5. 首部开销\"},\"2066\":{\"t\":\"TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。\"},\"2067\":{\"t\":\"UDP 首部只有 8 个字节，并且是固定不变的，开销较小。\"},\"2068\":{\"t\":\"6. 传输方式\"},\"2069\":{\"t\":\"TCP 是流式传输，没有边界，但保证顺序和可靠。\"},\"2070\":{\"t\":\"UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。\"},\"2071\":{\"t\":\"7. 分片不同\"},\"2072\":{\"t\":\"TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。\"},\"2073\":{\"t\":\"UDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层。\"},\"2074\":{\"h\":\"1.6.2TCP 和 UDP 应用场景：\",\"a\":\"_1-6-2tcp-和-udp-应用场景\"},\"2075\":{\"t\":\"由于 TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：\"},\"2076\":{\"t\":\"FTP 文件传输；\"},\"2077\":{\"t\":\"HTTP / HTTPS；\"},\"2078\":{\"t\":\"由于 UDP 面向无连接，它可以随时发送数据，再加上 UDP 本身的处理既简单又高效，因此经常用于：\"},\"2079\":{\"t\":\"包总量较少的通信，如 DNS、SNMP 等；\"},\"2080\":{\"t\":\"视频、音频等多媒体通信；\"},\"2081\":{\"t\":\"广播通信；\"},\"2082\":{\"t\":\"这里有两道常见面试题：\"},\"2083\":{\"t\":\"为什么 UDP 头部没有「首部长度」字段，而 TCP 头部有「首部长度」字段呢？\"},\"2084\":{\"t\":\"原因： TCP 有可变长的「选项」字段，而 UDP 头部长度则是不会变化的，无需多一个字段去记录 UDP 的首部长度。\"},\"2085\":{\"t\":\"为什么 UDP 头部有「包长度」字段，而 TCP 头部则没有「包长度」字段呢？\"},\"2086\":{\"t\":\"比较靠谱的原因：如今的 UDP 协议是基于 IP 协议发展的，而当年可能并非如此，依赖的可能是别的不提供自身报文长度或首部长度的网络层协议，因此 UDP 报文首部需要有长度字段以供计算。\"},\"2087\":{\"h\":\"1.7TCP 和 UDP 可以使用同一个端口吗？\",\"a\":\"_1-7tcp-和-udp-可以使用同一个端口吗\"},\"2088\":{\"t\":\"总结：可以的。\"},\"2089\":{\"t\":\"传输层的端口号的作用，是为了区分同一个主机上不同应用程序的数据包。\"},\"2090\":{\"t\":\"传输层有两个传输协议分别是 TCP 和 UDP，在内核中是两个完全独立的软件模块。\"},\"2091\":{\"t\":\"当主机收到数据包后，可以在 IP 包头的「协议号」字段知道该数据包是 TCP/UDP，所以可以根据这个信息确定送给哪个模块（TCP/UDP）处理，送给 TCP/UDP 模块的报文根据「端口号」确定送给哪个应用程序处理。\"},\"2092\":{\"t\":\"因此，TCP/UDP 各自的端口号也相互独立，如 TCP 有一个 80 号端口，UDP 也可以有一个 80 号端口，二者并不冲突。\"},\"2093\":{\"t\":\"可以看这篇文章：TCP 和 UDP 可以使用同一个端口吗？\"},\"2094\":{\"h\":\"2.TCP三次握手\",\"a\":\"_2-tcp三次握手\"},\"2095\":{\"h\":\"2.1TCP 三次握手过程是怎样的？\",\"a\":\"_2-1tcp-三次握手过程是怎样的\"},\"2096\":{\"h\":\"2.2如何在 Linux 系统中查看 TCP 状态？\",\"a\":\"_2-2如何在-linux-系统中查看-tcp-状态\"},\"2097\":{\"h\":\"2.3为什么是三次握手？不是两次、四次？\",\"a\":\"_2-3为什么是三次握手-不是两次、四次\"},\"2098\":{\"h\":\"2.4为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？\",\"a\":\"_2-4为什么每次建立-tcp-连接时-初始化的序列号都要求不一样呢\"},\"2099\":{\"h\":\"2.5初始序列号 ISN 是如何随机产生的？\",\"a\":\"_2-5初始序列号-isn-是如何随机产生的\"},\"2100\":{\"h\":\"2.6既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？\",\"a\":\"_2-6既然-ip-层会分片-为什么-tcp-层还需要-mss-呢\"},\"2101\":{\"h\":\"2.7第一次握手丢失了，会发生什么？\",\"a\":\"_2-7第一次握手丢失了-会发生什么\"},\"2102\":{\"h\":\"2.8第二次握手丢失了，会发生什么？\",\"a\":\"_2-8第二次握手丢失了-会发生什么\"},\"2103\":{\"h\":\"2.9第三次握手丢失了，会发生什么？\",\"a\":\"_2-9第三次握手丢失了-会发生什么\"},\"2104\":{\"h\":\"2.10什么是 SYN 攻击？如何避免 SYN 攻击？\",\"a\":\"_2-10什么是-syn-攻击-如何避免-syn-攻击\"},\"2105\":{\"h\":\"3.TCP四次挥手\",\"a\":\"_3-tcp四次挥手\"},\"2106\":{\"h\":\"3.1TCP 四次挥手过程是怎样的？\",\"a\":\"_3-1tcp-四次挥手过程是怎样的\"},\"2107\":{\"h\":\"3.2为什么挥手需要四次？\",\"a\":\"_3-2为什么挥手需要四次\"},\"2108\":{\"h\":\"3.3第一次挥手丢失了，会发生什么？\",\"a\":\"_3-3第一次挥手丢失了-会发生什么\"},\"2109\":{\"h\":\"3.4第二次挥手丢失了，会发生什么？\",\"a\":\"_3-4第二次挥手丢失了-会发生什么\"},\"2110\":{\"h\":\"3.5第三次挥手丢失了，会发生什么？\",\"a\":\"_3-5第三次挥手丢失了-会发生什么\"},\"2111\":{\"h\":\"3.6第四次挥手丢失了，会发生什么？\",\"a\":\"_3-6第四次挥手丢失了-会发生什么\"},\"2112\":{\"h\":\"3.7为什么 TIME_WAIT 等待的时间是 2MSL？\",\"a\":\"_3-7为什么-time-wait-等待的时间是-2msl\"},\"2113\":{\"h\":\"3.8为什么需要 TIME_WAIT 状态？\",\"a\":\"_3-8为什么需要-time-wait-状态\"},\"2114\":{\"h\":\"3.9TIME_WAIT 过多有什么危害？\",\"a\":\"_3-9time-wait-过多有什么危害\"},\"2115\":{\"h\":\"3.10如何优化 TIME_WAIT？\",\"a\":\"_3-10如何优化-time-wait\"},\"2116\":{\"h\":\"3.11服务器出现大量 TIME_WAIT 状态的原因有哪些？\",\"a\":\"_3-11服务器出现大量-time-wait-状态的原因有哪些\"},\"2117\":{\"h\":\"3.12服务器出现大量 CLOSE_WAIT 状态的原因有哪些？\",\"a\":\"_3-12服务器出现大量-close-wait-状态的原因有哪些\"},\"2118\":{\"h\":\"3.13如果已经建立了连接，但是客户端突然出现故障了怎么办？\",\"a\":\"_3-13如果已经建立了连接-但是客户端突然出现故障了怎么办\"},\"2119\":{\"h\":\"3.14如果已经建立了连接，但是服务端的进程崩溃会发生什么？\",\"a\":\"_3-14如果已经建立了连接-但是服务端的进程崩溃会发生什么\"},\"2120\":{\"h\":\"4.Socket 编程\",\"a\":\"_4-socket-编程\"},\"2121\":{\"h\":\"4.1针对 TCP 应该如何 Socket 编程？\",\"a\":\"_4-1针对-tcp-应该如何-socket-编程\"},\"2122\":{\"h\":\"4.2listen 时候参数 backlog 的意义？\",\"a\":\"_4-2listen-时候参数-backlog-的意义\"},\"2123\":{\"h\":\"4.3accept 发生在三次握手的哪一步？\",\"a\":\"_4-3accept-发生在三次握手的哪一步\"},\"2124\":{\"h\":\"4.4客户端调用 close 了，连接是断开的流程是什么？\",\"a\":\"_4-4客户端调用-close-了-连接是断开的流程是什么\"},\"2125\":{\"h\":\"4.5没有 accept，能建立 TCP 连接吗？\",\"a\":\"_4-5没有-accept-能建立-tcp-连接吗\"},\"2126\":{\"h\":\"4.6没有 listen，能建立 TCP 连接吗？\",\"a\":\"_4-6没有-listen-能建立-tcp-连接吗\"},\"2127\":{\"h\":\"计算机网络\"},\"2128\":{\"h\":\"键入网址到网页显示，期间发生了什么？\",\"a\":\"键入网址到网页显示-期间发生了什么\"},\"2129\":{\"t\":\"img\"},\"2130\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"2131\":{\"t\":\"总体来说分为以下几个过程:\"},\"2132\":{\"t\":\"DNS 解析\"},\"2133\":{\"t\":\"TCP 连接\"},\"2134\":{\"t\":\"发送 HTTP 请求\"},\"2135\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"2136\":{\"t\":\"浏览器解析渲染页面\"},\"2137\":{\"t\":\"连接结束\"},\"2138\":{\"h\":\"OSI 七层模型\",\"a\":\"osi-七层模型\"},\"2139\":{\"t\":\"OSI 七层模型\"},\"2140\":{\"h\":\"TCP/IP 四层模型\",\"a\":\"tcp-ip-四层模型\"},\"2141\":{\"t\":\"img\"},\"2142\":{\"h\":\"TCP\",\"a\":\"tcp\"},\"2143\":{\"h\":\"IP\",\"a\":\"ip\"},\"2144\":{\"h\":\"UDP\",\"a\":\"udp\"},\"2145\":{\"h\":\"ARP\",\"a\":\"arp\"},\"2146\":{\"t\":\"ARP 协议，全称 地址解析协议（Address Resolution Protocol），它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。\"},\"2147\":{\"t\":\"ARP 协议工作时有一个大前提，那就是 ARP 表。\"},\"2148\":{\"t\":\"在一个局域网内，每个网络设备都自己维护了一个 ARP 表，ARP 表记录了某些其他网络设备的 IP 地址-MAC 地址映射关系，该映射关系以 <IP, MAC, TTL> 三元组的形式存储。其中，TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。\"},\"2149\":{\"t\":\"ARP 的工作原理将分两种场景讨论：\"},\"2150\":{\"t\":\"同一局域网内的 MAC 寻址；\"},\"2151\":{\"t\":\"从一个局域网到另一个局域网中的网络设备的寻址。\"},\"2152\":{\"h\":\"同一局域网内的 MAC 寻址\",\"a\":\"同一局域网内的-mac-寻址\"},\"2153\":{\"t\":\"假设当前有如下场景：IP 地址为137.196.7.23的主机 A，想要给同一局域网内的 IP 地址为137.196.7.14主机 B，发送 IP 数据报文。\"},\"2154\":{\"t\":\"再次强调，当主机发送 IP 数据报文时（网络层），仅知道目的地的 IP 地址，并不清楚目的地的 MAC 地址，而 ARP 协议就是解决这一问题的。\"},\"2155\":{\"t\":\"为了达成这一目标，主机 A 将不得不通过 ARP 协议来获取主机 B 的 MAC 地址，并将 IP 报文封装成链路层帧，发送到下一跳上。在该局域网内，关于此将按照时间顺序，依次发生如下事件：\"},\"2156\":{\"t\":\"主机 A 检索自己的 ARP 表，发现 ARP 表中并无主机 B 的 IP 地址对应的映射条目，也就无从知道主机 B 的 MAC 地址。\"},\"2157\":{\"t\":\"主机 A 将构造一个 ARP 查询分组，并将其广播到所在的局域网中。\"},\"2158\":{\"t\":\"ARP 分组是一种特殊报文，ARP 分组有两类，一种是查询分组，另一种是响应分组，它们具有相同的格式，均包含了发送和接收的 IP 地址、发送和接收的 MAC 地址。当然了，查询分组中，发送的 IP 地址，即为主机 A 的 IP 地址，接收的 IP 地址即为主机 B 的 IP 地址，发送的 MAC 地址也是主机 A 的 MAC 地址，但接收的 MAC 地址绝不会是主机 B 的 MAC 地址（因为这正是我们要问询的！），而是一个特殊值——FF-FF-FF-FF-FF-FF，之前说过，该 MAC 地址是广播地址，也就是说，查询分组将广播给该局域网内的所有设备。\"},\"2159\":{\"t\":\"主机 A 构造的查询分组将在该局域网内广播，理论上，每一个设备都会收到该分组，并检查查询分组的接收 IP 地址是否为自己的 IP 地址，如果是，说明查询分组已经到达了主机 B，否则，该查询分组对当前设备无效，丢弃之。\"},\"2160\":{\"t\":\"主机 B 收到了查询分组之后，验证是对自己的问询，接着构造一个 ARP 响应分组，该分组的目的地只有一个——主机 A，发送给主机 A。同时，主机 B 提取查询分组中的 IP 地址和 MAC 地址信息，在自己的 ARP 表中构造一条主机 A 的 IP-MAC 映射记录。\"},\"2161\":{\"t\":\"ARP 响应分组具有和 ARP 查询分组相同的构造，不同的是，发送和接受的 IP 地址恰恰相反，发送的 MAC 地址为发送者本身，目标 MAC 地址为查询分组的发送者，也就是说，ARP 响应分组只有一个目的地，而非广播。\"},\"2162\":{\"t\":\"主机 A 终将收到主机 B 的响应分组，提取出该分组中的 IP 地址和 MAC 地址后，构造映射信息，加入到自己的 ARP 表中。\"},\"2163\":{\"t\":\"总结来说，ARP 协议是一个广播问询，单播响应协议。\"},\"2164\":{\"h\":\"不同局域网内的 MAC 寻址\",\"a\":\"不同局域网内的-mac-寻址\"},\"2165\":{\"t\":\"更复杂的情况是，发送主机 A 和接收主机 B 不在同一个子网中，假设一个一般场景，两台主机所在的子网由一台路由器联通。这里需要注意的是，一般情况下，我们说网络设备都有一个 IP 地址和一个 MAC 地址，这里说的网络设备，更严谨的说法应该是一个接口。路由器作为互联设备，具有多个接口，每个接口同样也应该具备不重复的 IP 地址和 MAC 地址。因此，在讨论 ARP 表时，路由器的多个接口都各自维护一个 ARP 表，而非一个路由器只维护一个 ARP 表。\"},\"2166\":{\"t\":\"接下来，回顾同一子网内的 MAC 寻址，如果主机 A 发送一个广播问询分组，那么 A 所在子网内的所有设备（接口）都将不会捕获该分组，因为该分组的目的 IP 地址在另一个子网中，本子网内不会有设备成功接收。那么，主机 A 应该发送怎样的查询分组呢？整个过程按照时间顺序发生的事件如下：\"},\"2167\":{\"t\":\"主机 A 查询 ARP 表，期望寻找到目标路由器的本子网接口的 MAC 地址。\"},\"2168\":{\"t\":\"目标路由器指的是，根据目的主机 B 的 IP 地址，分析出 B 所在的子网，能够把报文转发到 B 所在子网的那个路由器。\"},\"2169\":{\"t\":\"主机 A 未能找到目标路由器的本子网接口的 MAC 地址，将采用 ARP 协议，问询到该 MAC 地址，由于目标接口与主机 A 在同一个子网内，该过程与同一局域网内的 MAC 寻址相同。\"},\"2170\":{\"t\":\"主机 A 获取到目标接口的 MAC 地址，先构造 IP 数据报，其中源 IP 是 A 的 IP 地址，目的 IP 地址是 B 的 IP 地址，再构造链路层帧，其中源 MAC 地址是 A 的 MAC 地址，目的 MAC 地址是本子网内与路由器连接的接口的 MAC 地址。主机 A 将把这个链路层帧，以单播的方式，发送给目标接口。\"},\"2171\":{\"t\":\"目标接口接收到了主机 A 发过来的链路层帧，解析，根据目的 IP 地址，查询转发表，将该 IP 数据报转发到与主机 B 所在子网相连的接口上。\"},\"2172\":{\"t\":\"到此，该帧已经从主机 A 所在的子网，转移到了主机 B 所在的子网了。\"},\"2173\":{\"t\":\"路由器接口查询 ARP 表，期望寻找到主机 B 的 MAC 地址。\"},\"2174\":{\"t\":\"路由器接口如未能找到主机 B 的 MAC 地址，将采用 ARP 协议，广播问询，单播响应，获取到主机 B 的 MAC 地址。\"},\"2175\":{\"t\":\"路由器接口将对 IP 数据报重新封装成链路层帧，目标 MAC 地址为主机 B 的 MAC 地址，单播发送，直到目的地。\"},\"2176\":{\"h\":\"HTTP\",\"a\":\"http\"},\"2177\":{\"h\":\"HTTP 状态码有哪些？\",\"a\":\"http-状态码有哪些\"},\"2178\":{\"t\":\"HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。\"},\"2179\":{\"t\":\"常见 HTTP 状态码\"},\"2180\":{\"h\":\"HTTP/1.0 和 HTTP/1.1 有什么区别？\",\"a\":\"http-1-0-和-http-1-1-有什么区别\"},\"2181\":{\"t\":\"连接方式 : HTTP/1.0 为短连接，HTTP/1.1 支持长连接。\"},\"2182\":{\"t\":\"状态响应码 : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，100 (Continue)——在请求大资源前的预热请求，206 (Partial Content)——范围请求的标识码，409 (Conflict)——请求与当前资源的规定冲突，410 (Gone)——资源已被永久转移，而且没有任何已知的转发地址。\"},\"2183\":{\"t\":\"缓存机制 : 在 HTTP/1.0 中主要使用 Header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP/1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。\"},\"2184\":{\"t\":\"Host 头（Host Header）处理 :HTTP/1.1 引入了 Host 头字段，允许在同一 IP 地址上托管多个域名，从而支持虚拟主机的功能。而 HTTP/1.0 没有 Host 头字段，无法实现虚拟主机。\"},\"2185\":{\"h\":\"HTTP/1.1 和 HTTP/2.0 有什么区别？\",\"a\":\"http-1-1-和-http-2-0-有什么区别\"},\"2186\":{\"t\":\"IO 多路复用（Multiplexing） ：HTTP/2.0 在同一连接上可以同时传输多个请求和响应（可以看作是 HTTP/1.1 中长链接的升级版本）。HTTP/1.1 则使用串行方式，每个请求和响应都需要独立的连接。这使得 HTTP/2.0 在处理多个请求时更加高效，减少了网络延迟和提高了性能。\"},\"2187\":{\"t\":\"二进制帧（Binary Frames） ：HTTP/2.0 使用二进制帧进行数据传输，而 HTTP/1.1 则使用文本格式的报文。二进制帧更加紧凑和高效，减少了传输的数据量和带宽消耗。\"},\"2188\":{\"t\":\"头部压缩（Header Compression） ：HTTP/1.1 支持Body压缩，Header不支持压缩。HTTP/2.0 支持对Header压缩，减少了网络开销。\"},\"2189\":{\"t\":\"服务器推送（Server Push）：HTTP/2.0 支持服务器推送，可以在客户端请求一个资源时，将其他相关资源一并推送给客户端，从而减少了客户端的请求次数和延迟。而 HTTP/1.1 需要客户端自己发送请求来获取相关资源。\"},\"2190\":{\"h\":\"HTTP/2.0 和 HTTP/3.0 有什么区别？\",\"a\":\"http-2-0-和-http-3-0-有什么区别\"},\"2191\":{\"t\":\"传输协议 ：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP/3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\"},\"2192\":{\"t\":\"连接建立 ：HTTP/2.0 需要经过经典的 TCP 三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP/3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。\"},\"2193\":{\"t\":\"队头阻塞 ：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。\"},\"2194\":{\"h\":\"HTTPS\",\"a\":\"https\"},\"2195\":{\"h\":\"HTTP 和 HTTPS 有什么区别？\",\"a\":\"http-和-https-有什么区别\"},\"2196\":{\"t\":\"端口号 ：HTTP 默认是 80，HTTPS 默认是 443。\"},\"2197\":{\"t\":\"URL 前缀 ：HTTP 的 URL 前缀是 http://，HTTPS 的 URL 前缀是 https://。\"},\"2198\":{\"t\":\"安全性和资源消耗 ： HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。\"},\"2199\":{\"t\":\"SEO（搜索引擎优化） ：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。\"},\"2200\":{\"h\":\"DNS\",\"a\":\"dns\"},\"2201\":{\"t\":\"DNS 中的域名都是用句点来分隔的，比如 www.server.com，这里的句点代表了不同层次之间的界限。\"},\"2202\":{\"t\":\"在域名中，越靠右的位置表示其层级越高。\"},\"2203\":{\"t\":\"实际上域名最后还有一个点，比如 www.server.com.，这个最后的一个点代表根域名。\"},\"2204\":{\"t\":\"也就是，. 根域是在最顶层，它的下一层就是 .com 顶级域，再下面是 server.com。\"},\"2205\":{\"t\":\"所以域名的层级关系类似一个树状结构：\"},\"2206\":{\"t\":\"根 DNS 服务器（.）\"},\"2207\":{\"t\":\"顶级域 DNS 服务器（.com）\"},\"2208\":{\"t\":\"权威 DNS 服务器（server.com）\"},\"2209\":{\"t\":\"根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。\"},\"2210\":{\"t\":\"这样一来，任何 DNS 服务器就都可以找到并访问根域 DNS 服务器了。\"},\"2211\":{\"t\":\"因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。\"},\"2212\":{\"h\":\"域名解析的工作流程：\",\"a\":\"域名解析的工作流程\"},\"2213\":{\"t\":\"客户端首先会发出一个 DNS 请求，问 www.server.com 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。\"},\"2214\":{\"t\":\"本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 www.server.com，则它直接返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 www.server.com 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。\"},\"2215\":{\"t\":\"根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“www.server.com 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”\"},\"2216\":{\"t\":\"本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 www.server.com 的 IP 地址吗？”\"},\"2217\":{\"t\":\"顶级域名服务器说：“我给你负责 www.server.com 区域的权威 DNS 服务器的地址，你去问它应该能问到”。\"},\"2218\":{\"t\":\"本地 DNS 于是转向问权威 DNS 服务器：“老三，www.server.com对应的IP是啥呀？” server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。\"},\"2219\":{\"t\":\"权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。\"},\"2220\":{\"t\":\"本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。\"},\"2221\":{\"h\":\"1.计算机网络基础\"},\"2222\":{\"h\":\"1.键入网址到网页显示，期间发生了什么？\",\"a\":\"_1-键入网址到网页显示-期间发生了什么\"},\"2223\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"2224\":{\"t\":\"总体来说分为以下几个过程:\"},\"2225\":{\"t\":\"DNS 解析\"},\"2226\":{\"t\":\"TCP 连接\"},\"2227\":{\"t\":\"发送 HTTP 请求\"},\"2228\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"2229\":{\"t\":\"浏览器解析渲染页面\"},\"2230\":{\"t\":\"连接结束\"},\"2231\":{\"h\":\"2.OSI 七层模型\",\"a\":\"_2-osi-七层模型\"},\"2232\":{\"h\":\"3.TCP/IP 四层模型\",\"a\":\"_3-tcp-ip-四层模型\"},\"2233\":{\"h\":\"MySQL\"},\"2234\":{\"h\":\"MySQL\",\"a\":\"mysql\"},\"2235\":{\"h\":\"InnoDB特性\",\"a\":\"innodb特性\"},\"2236\":{\"h\":\"MyISAM 和 InnoDB 有什么区别？\",\"a\":\"myisam-和-innodb-有什么区别\"},\"2237\":{\"t\":\"MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，可谓是风光一时。\"},\"2238\":{\"t\":\"虽然，MyISAM 的性能还行，各种特性也还不错（比如全文索引、压缩、空间函数等）。但是，MyISAM 不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。\"},\"2239\":{\"t\":\"MySQL 5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。\"},\"2240\":{\"t\":\"言归正传！咱们下面还是来简单对比一下两者：\"},\"2241\":{\"t\":\"1.是否支持行级锁\"},\"2242\":{\"t\":\"MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。\"},\"2243\":{\"t\":\"也就说，MyISAM 一锁就是锁住了整张表，这在并发写的情况下是多么滴憨憨啊！这也是为什么 InnoDB 在并发写的时候，性能更牛皮了！\"},\"2244\":{\"t\":\"2.是否支持事务\"},\"2245\":{\"t\":\"MyISAM 不提供事务支持。\"},\"2246\":{\"t\":\"InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别，具有提交(commit)和回滚(rollback)事务的能力。并且，InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）。\"},\"2247\":{\"t\":\"3.是否支持外键\"},\"2248\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2249\":{\"t\":\"外键对于维护数据一致性非常有帮助，但是对性能有一定的损耗。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，在业务代码中进行约束即可！\"},\"2250\":{\"t\":\"阿里的《Java 开发手册》也是明确规定禁止使用外键的。\"},\"2251\":{\"t\":\"4.是否支持数据库异常崩溃后的安全恢复\"},\"2252\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2253\":{\"t\":\"使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 redo log 。\"},\"2254\":{\"t\":\"5.是否支持 MVCC\"},\"2255\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2256\":{\"t\":\"讲真，这个对比有点废话，毕竟 MyISAM 连行级锁都不支持。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能。\"},\"2257\":{\"t\":\"6.索引实现不一样。\"},\"2258\":{\"t\":\"虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。\"},\"2259\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。\"},\"2260\":{\"h\":\"索引\",\"a\":\"索引\"},\"2261\":{\"t\":\"索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。\"},\"2262\":{\"h\":\"底层数据结构：\",\"a\":\"底层数据结构\"},\"2263\":{\"t\":\"Hash 表\"},\"2264\":{\"t\":\"哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。\"},\"2265\":{\"t\":\"为何能够通过 key 快速取出 value 呢？ 原因在于 哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。\"},\"2266\":{\"t\":\"既然哈希表这么快，为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。\"},\"2267\":{\"t\":\"B 树& B+树\"},\"2268\":{\"t\":\"B 树也称 B-树,全称为 多路平衡查找树 ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 Balanced （平衡）的意思。\"},\"2269\":{\"t\":\"目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。\"},\"2270\":{\"t\":\"B 树& B+树两者有何异同呢？\"},\"2271\":{\"t\":\"B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\"},\"2272\":{\"t\":\"B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。\"},\"2273\":{\"t\":\"B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\"},\"2274\":{\"t\":\"在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）\"},\"2275\":{\"t\":\"MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引（非聚集索引）”。\"},\"2276\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“聚簇索引（聚集索引）”，而其余的索引都作为 辅助索引 ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。\"},\"2277\":{\"h\":\"类型总结\",\"a\":\"类型总结\"},\"2278\":{\"t\":\"按照数据结构维度划分：\"},\"2279\":{\"t\":\"BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。\"},\"2280\":{\"t\":\"哈希索引：类似键值对的形式，一次即可定位。\"},\"2281\":{\"t\":\"RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2282\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2283\":{\"t\":\"按照底层存储方式角度划分：\"},\"2284\":{\"t\":\"聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。\"},\"2285\":{\"t\":\"非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"2286\":{\"t\":\"按照应用维度划分：\"},\"2287\":{\"t\":\"主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。\"},\"2288\":{\"t\":\"普通索引：仅加速查询。\"},\"2289\":{\"t\":\"唯一索引：加速查询 + 列值唯一（可以有 NULL）。\"},\"2290\":{\"t\":\"覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。\"},\"2291\":{\"t\":\"联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。\"},\"2292\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2293\":{\"h\":\"主键索引：\",\"a\":\"主键索引\"},\"2294\":{\"t\":\"数据表的主键列使用的就是主键索引。\"},\"2295\":{\"t\":\"一张数据表有只能有一个主键，并且主键不能为 null，不能重复。\"},\"2296\":{\"t\":\"在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。\"},\"2297\":{\"t\":\"img\"},\"2298\":{\"h\":\"二级索引：\",\"a\":\"二级索引\"},\"2299\":{\"t\":\"二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。\"},\"2300\":{\"t\":\"唯一索引，普通索引，前缀索引等索引属于二级索引。\"},\"2301\":{\"t\":\"PS: 不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。\"},\"2302\":{\"t\":\"唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。\"},\"2303\":{\"t\":\"普通索引(Index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。\"},\"2304\":{\"t\":\"前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。\"},\"2305\":{\"t\":\"全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。\"},\"2306\":{\"t\":\"img\"},\"2307\":{\"h\":\"聚簇索引：\",\"a\":\"聚簇索引\"},\"2308\":{\"t\":\"聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。\"},\"2309\":{\"t\":\"在 MySQL 中，InnoDB 引擎的表的 .ibd文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。\"},\"2310\":{\"t\":\"优点 ：\"},\"2311\":{\"t\":\"查询速度非常快 ：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。\"},\"2312\":{\"t\":\"对排序查找和范围查找优化 ：聚簇索引对于主键的排序查找和范围查找速度非常快。\"},\"2313\":{\"t\":\"缺点 ：\"},\"2314\":{\"t\":\"依赖于有序的数据 ：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。\"},\"2315\":{\"t\":\"更新代价大 ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。\"},\"2316\":{\"h\":\"非聚簇索引：\",\"a\":\"非聚簇索引\"},\"2317\":{\"t\":\"非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"2318\":{\"t\":\"非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。\"},\"2319\":{\"t\":\"优点 ：\"},\"2320\":{\"t\":\"更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的\"},\"2321\":{\"t\":\"缺点 ：\"},\"2322\":{\"t\":\"依赖于有序的数据 ：跟聚簇索引一样，非聚簇索引也依赖于有序的数据\"},\"2323\":{\"t\":\"可能会二次查询(回表) ：这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。\"},\"2324\":{\"h\":\"覆盖索引：\",\"a\":\"覆盖索引\"},\"2325\":{\"t\":\"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 覆盖索引（Covering Index） 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！\"},\"2326\":{\"t\":\"覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。\"},\"2327\":{\"t\":\"如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。\"},\"2328\":{\"h\":\"联合索引：\",\"a\":\"联合索引\"},\"2329\":{\"t\":\"使用表中的多个字段创建索引，就是 联合索引，也叫 组合索引 或 复合索引。\"},\"2330\":{\"t\":\"最左前缀匹配原则\"},\"2331\":{\"t\":\"最左前缀匹配原则指的是，在使用联合索引时，MySQL 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 >、<）才会停止匹配。对于 >=、<=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。\"},\"2332\":{\"t\":\"索引下推\"},\"2333\":{\"t\":\"索引下推（Index Condition Pushdown） 是 MySQL 5.6 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。\"},\"2334\":{\"h\":\"正确使用索引的一些建议：\",\"a\":\"正确使用索引的一些建议\"},\"2335\":{\"t\":\"选择合适的字段创建索引：\"},\"2336\":{\"t\":\"不为 NULL 的字段 ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。\"},\"2337\":{\"t\":\"被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。\"},\"2338\":{\"t\":\"被作为条件查询的字段 ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。\"},\"2339\":{\"t\":\"频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。\"},\"2340\":{\"t\":\"被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。\"},\"2341\":{\"t\":\"被频繁更新的字段应该慎重建立索引：\"},\"2342\":{\"t\":\"虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。\"},\"2343\":{\"t\":\"限制每张表上的索引数量：\"},\"2344\":{\"t\":\"索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。\"},\"2345\":{\"t\":\"索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。\"},\"2346\":{\"t\":\"因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。\"},\"2347\":{\"t\":\"尽可能的考虑建立联合索引而不是单列索引：\"},\"2348\":{\"t\":\"因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。\"},\"2349\":{\"t\":\"注意避免冗余索引：\"},\"2350\":{\"t\":\"冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\"},\"2351\":{\"t\":\"字符串类型的字段使用前缀索引代替普通索引：\"},\"2352\":{\"t\":\"前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。\"},\"2353\":{\"t\":\"避免索引失效：\"},\"2354\":{\"t\":\"索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：\"},\"2355\":{\"t\":\"使用 SELECT * 进行查询;\"},\"2356\":{\"t\":\"创建了组合索引，但查询条件未遵守最左匹配原则;\"},\"2357\":{\"t\":\"在索引列上进行计算、函数、类型转换等操作;\"},\"2358\":{\"t\":\"以 % 开头的 LIKE 查询比如 like '%abc';\"},\"2359\":{\"t\":\"查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;\"},\"2360\":{\"t\":\"发生隐式转换\"},\"2361\":{\"h\":\"锁机制\",\"a\":\"锁机制\"},\"2362\":{\"t\":\"在 MySQL 里，根据加锁的范围，可以分为全局锁、表级锁和行锁三类。\"},\"2363\":{\"t\":\"img\"},\"2364\":{\"h\":\"全局锁：\",\"a\":\"全局锁\"},\"2365\":{\"t\":\"要使用全局锁，则要执行这条命令：\"},\"2366\":{\"t\":\"flush tables with read lock \"},\"2367\":{\"t\":\"执行后，整个数据库就处于只读状态了，这时其他线程执行以下操作，都会被阻塞：\"},\"2368\":{\"t\":\"对数据的增删改操作，比如 insert、delete、update等语句；\"},\"2369\":{\"t\":\"对表结构的更改操作，比如 alter table、drop table 等语句。\"},\"2370\":{\"t\":\"如果要释放全局锁，则要执行这条命令：\"},\"2371\":{\"t\":\"unlock tables \"},\"2372\":{\"t\":\"全局锁应用场景是什么？\"},\"2373\":{\"t\":\"全局锁主要应用于做全库逻辑备份，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。\"},\"2374\":{\"t\":\"加全局锁又会带来什么缺点呢？\"},\"2375\":{\"t\":\"加上全局锁，意味着整个数据库都是只读状态。\"},\"2376\":{\"t\":\"那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。\"},\"2377\":{\"t\":\"既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？\"},\"2378\":{\"t\":\"有的，如果数据库的引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。\"},\"2379\":{\"t\":\"因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。\"},\"2380\":{\"t\":\"备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 –single-transaction 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。\"},\"2381\":{\"t\":\"InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。\"},\"2382\":{\"t\":\"但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。\"},\"2383\":{\"h\":\"表级锁：\",\"a\":\"表级锁\"},\"2384\":{\"t\":\"MySQL 里面表级别的锁有这几种：\"},\"2385\":{\"t\":\"表锁；\"},\"2386\":{\"t\":\"元数据锁（MDL）;\"},\"2387\":{\"t\":\"意向锁；\"},\"2388\":{\"t\":\"AUTO-INC 锁；\"},\"2389\":{\"h\":\"表锁\",\"a\":\"表锁\"},\"2390\":{\"t\":\"先来说说表锁。\"},\"2391\":{\"t\":\"如果我们想对学生表（t_student）加表锁，可以使用下面的命令：\"},\"2392\":{\"t\":\"//表级别的共享锁，也就是读锁； lock tables t_student read; //表级别的独占锁，也就是写锁； lock tables t_stuent write; \"},\"2393\":{\"t\":\"需要注意的是，表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。\"},\"2394\":{\"t\":\"也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放。\"},\"2395\":{\"t\":\"要释放表锁，可以使用下面这条命令，会释放当前会话的所有表锁：\"},\"2396\":{\"t\":\"unlock tables \"},\"2397\":{\"t\":\"另外，当会话退出后，也会释放所有表锁。\"},\"2398\":{\"t\":\"不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁。\"},\"2399\":{\"h\":\"元数据锁\",\"a\":\"元数据锁\"},\"2400\":{\"t\":\"再来说说元数据锁（MDL）。\"},\"2401\":{\"t\":\"我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：\"},\"2402\":{\"t\":\"对一张表进行 CRUD 操作时，加的是 MDL 读锁；\"},\"2403\":{\"t\":\"对一张表做结构变更操作的时候，加的是 MDL 写锁；\"},\"2404\":{\"t\":\"MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。\"},\"2405\":{\"t\":\"当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。\"},\"2406\":{\"t\":\"反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。\"},\"2407\":{\"t\":\"MDL 不需要显示调用，那它是在什么时候释放的?\"},\"2408\":{\"t\":\"MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。\"},\"2409\":{\"t\":\"那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），那在对表结构做变更操作的时候，可能会发生意想不到的事情，比如下面这个顺序的场景：\"},\"2410\":{\"t\":\"首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；\"},\"2411\":{\"t\":\"然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；\"},\"2412\":{\"t\":\"接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，\"},\"2413\":{\"t\":\"那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。\"},\"2414\":{\"t\":\"为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？\"},\"2415\":{\"t\":\"这是因为申请 MDL 锁的操作会形成一个队列，队列中写锁获取优先级高于读锁，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。\"},\"2416\":{\"t\":\"所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。\"},\"2417\":{\"h\":\"意向锁\",\"a\":\"意向锁\"},\"2418\":{\"t\":\"接着，说说意向锁。\"},\"2419\":{\"t\":\"在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；\"},\"2420\":{\"t\":\"在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；\"},\"2421\":{\"t\":\"也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。\"},\"2422\":{\"t\":\"而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。\"},\"2423\":{\"t\":\"不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：\"},\"2424\":{\"t\":\"//先在表上加上意向共享锁，然后对读取的记录加共享锁 select ... lock in share mode; //先表上加上意向独占锁，然后对读取的记录加独占锁 select ... for update; \"},\"2425\":{\"t\":\"意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables ... read*）和独占表锁（*lock tables ... write*）发生冲突。\"},\"2426\":{\"t\":\"表锁和行锁是满足读读共享、读写互斥、写写互斥的。\"},\"2427\":{\"t\":\"如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。\"},\"2428\":{\"t\":\"那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。\"},\"2429\":{\"t\":\"所以，意向锁的目的是为了快速判断表里是否有记录被加锁。\"},\"2430\":{\"h\":\"AUTO-INC 锁\",\"a\":\"auto-inc-锁\"},\"2431\":{\"t\":\"表里的主键通常都会设置成自增的，这是通过对主键字段声明 AUTO_INCREMENT 属性实现的。\"},\"2432\":{\"t\":\"之后可以在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 AUTO-INC 锁实现的。\"},\"2433\":{\"t\":\"AUTO-INC 锁是特殊的表锁机制，锁不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放。\"},\"2434\":{\"t\":\"在插入数据时，会加一个表级别的 AUTO-INC 锁，然后为被 AUTO_INCREMENT 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。\"},\"2435\":{\"t\":\"那么，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 AUTO_INCREMENT 修饰的字段的值是连续递增的。\"},\"2436\":{\"t\":\"但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。\"},\"2437\":{\"t\":\"因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种轻量级的锁来实现自增。\"},\"2438\":{\"t\":\"一样也是在插入数据的时候，会为被 AUTO_INCREMENT 修饰的字段加上轻量级锁，然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁。\"},\"2439\":{\"t\":\"InnoDB 存储引擎提供了个 innodb_autoinc_lock_mode 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。\"},\"2440\":{\"t\":\"当 innodb_autoinc_lock_mode = 0，就采用 AUTO-INC 锁，语句执行结束后才释放锁；\"},\"2441\":{\"t\":\"当 innodb_autoinc_lock_mode = 2，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。\"},\"2442\":{\"t\":\"当 innodb_autoinc_lock_mode = 1： \"},\"2443\":{\"t\":\"普通 insert 语句，自增锁在申请之后就马上释放；\"},\"2444\":{\"t\":\"类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；\"},\"2445\":{\"t\":\"当 innodb_autoinc_lock_mode = 2 是性能最高的方式，但是当搭配 binlog 的日志格式是 statement 一起使用的时候，在「主从复制的场景」中会发生数据不一致的问题。\"},\"2446\":{\"t\":\"要解决这问题，binlog 日志格式要设置为 row，这样在 binlog 里面记录的是主库分配的自增值，到备库执行的时候，主库的自增值是什么，从库的自增值就是什么。\"},\"2447\":{\"t\":\"所以，当 innodb_autoinc_lock_mode = 2 时，并且 binlog_format = row，既能提升并发性，又不会出现数据一致性问题。\"},\"2448\":{\"h\":\"行级锁：\",\"a\":\"行级锁\"},\"2449\":{\"t\":\"InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。\"},\"2450\":{\"t\":\"前面也提到，普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为锁定读。\"},\"2451\":{\"t\":\"//对读取的记录加共享锁 select ... lock in share mode; //对读取的记录加独占锁 select ... for update; \"},\"2452\":{\"t\":\"上面这两条语句必须在一个事务中，因为当事务提交了，锁就会被释放，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。\"},\"2453\":{\"t\":\"共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。\"},\"2454\":{\"t\":\"img\"},\"2455\":{\"t\":\"行级锁的类型主要有三类：\"},\"2456\":{\"t\":\"Record Lock，记录锁，也就是仅仅把一条记录锁上；\"},\"2457\":{\"t\":\"Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"},\"2458\":{\"t\":\"Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"2459\":{\"h\":\"Record Lock\",\"a\":\"record-lock\"},\"2460\":{\"t\":\"Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：\"},\"2461\":{\"t\":\"当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;\"},\"2462\":{\"t\":\"当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。\"},\"2463\":{\"h\":\"Gap Lock\",\"a\":\"gap-lock\"},\"2464\":{\"t\":\"Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。\"},\"2465\":{\"t\":\"假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。\"},\"2466\":{\"t\":\"间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。\"},\"2467\":{\"h\":\"Next-Key Lock\",\"a\":\"next-key-lock\"},\"2468\":{\"t\":\"Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"2469\":{\"t\":\"所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。\"},\"2470\":{\"t\":\"next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。\"},\"2471\":{\"t\":\"比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。\"},\"2472\":{\"t\":\"虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。\"},\"2473\":{\"h\":\"插入意向锁\",\"a\":\"插入意向锁\"},\"2474\":{\"t\":\"一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。\"},\"2475\":{\"t\":\"如果有的话，插入操作就会发生阻塞，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个插入意向锁，表明有事务想在某个区间插入新记录，但是现在处于等待状态。\"},\"2476\":{\"t\":\"插入意向锁名字虽然有意向锁，但是它并不是意向锁，它是一种特殊的间隙锁，属于行级别锁。\"},\"2477\":{\"t\":\"如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。\"},\"2478\":{\"t\":\"插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。\"},\"2479\":{\"h\":\"ACID事务\",\"a\":\"acid事务\"},\"2480\":{\"t\":\"事务是由 MySQL 的引擎来实现的，我们常见的 InnoDB 引擎它是支持事务的。\"},\"2481\":{\"t\":\"不过并不是所有的引擎都能支持事务，比如 MySQL 原生的 MyISAM 引擎就不支持事务，也正是这样，所以大多数 MySQL 的引擎都是用 InnoDB。\"},\"2482\":{\"t\":\"事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：\"},\"2483\":{\"t\":\"原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。\"},\"2484\":{\"t\":\"一致性（Consistency）：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。\"},\"2485\":{\"t\":\"隔离性（Isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。\"},\"2486\":{\"t\":\"持久性（Durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\"},\"2487\":{\"t\":\"InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？\"},\"2488\":{\"t\":\"持久性是通过 redo log （重做日志）来保证的；\"},\"2489\":{\"t\":\"原子性是通过 undo log（回滚日志） 来保证的；\"},\"2490\":{\"t\":\"隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；\"},\"2491\":{\"t\":\"一致性则是通过持久性+原子性+隔离性来保证；\"},\"2492\":{\"h\":\"脏读\",\"a\":\"脏读\"},\"2493\":{\"t\":\"如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。\"},\"2494\":{\"t\":\"举个栗子。\"},\"2495\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后再执行更新操作，如果此时事务 A 还没有提交事务，而此时正好事务 B 也从数据库中读取小林的余额数据，那么事务 B 读取到的余额数据是刚才事务 A 更新后的数据，即使没有提交事务。\"},\"2496\":{\"t\":\"因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。\"},\"2497\":{\"h\":\"不可重复读\",\"a\":\"不可重复读\"},\"2498\":{\"t\":\"在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。\"},\"2499\":{\"t\":\"举个栗子。\"},\"2500\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后继续执行代码逻辑处理，在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为不可重复读。\"},\"2501\":{\"h\":\"幻读\",\"a\":\"幻读\"},\"2502\":{\"t\":\"在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。\"},\"2503\":{\"t\":\"举个栗子。\"},\"2504\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库查询账户余额大于 100 万的记录，发现共有 5 条，然后事务 B 也按相同的搜索条件也是查询出了 5 条记录。\"},\"2505\":{\"t\":\"接下来，事务 A 插入了一条余额超过 100 万的账号，并提交了事务，此时数据库超过 100 万余额的账号个数就变为 6。\"},\"2506\":{\"t\":\"然后事务 B 再次查询账户余额大于 100 万的记录，此时查询到的记录数量有 6 条，发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。\"},\"2507\":{\"h\":\"四大隔离级别\",\"a\":\"四大隔离级别\"},\"2508\":{\"t\":\"SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：\"},\"2509\":{\"t\":\"读未提交（*read uncommitted*），指一个事务还没提交时，它做的变更就能被其他事务看到；\"},\"2510\":{\"t\":\"读提交（*read committed*），指一个事务提交之后，它做的变更才能被其他事务看到；\"},\"2511\":{\"t\":\"可重复读（*repeatable read*），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别；\"},\"2512\":{\"t\":\"串行化（*serializable* ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\"},\"2513\":{\"t\":\"按隔离水平高低排序如下：\"},\"2514\":{\"t\":\"图片\"},\"2515\":{\"t\":\"针对不同的隔离级别，并发事务时可能发生的现象也会不同。也就是说：\"},\"2516\":{\"t\":\"在「读未提交」隔离级别下，可能发生脏读、不可重复读和幻读现象；\"},\"2517\":{\"t\":\"在「读提交」隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；\"},\"2518\":{\"t\":\"在「可重复读」隔离级别下，可能发生幻读现象，但是不可能脏读和不可重复读现象；\"},\"2519\":{\"t\":\"在「串行化」隔离级别下，脏读、不可重复读和幻读现象都不可能会发生。\"},\"2520\":{\"t\":\"所以，要解决脏读现象，就要升级到「读提交」以上的隔离级别；要解决不可重复读现象，就要升级到「可重复读」的隔离级别，要解决幻读现象不建议将隔离级别升级到「串行化」。\"},\"2521\":{\"t\":\"不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，我们讨论的 MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入。\"},\"2522\":{\"t\":\"MySQL 在「可重复读」隔离级别下，可以很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能。\"},\"2523\":{\"t\":\"MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象，解决的方案有两种：\"},\"2524\":{\"t\":\"针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\"},\"2525\":{\"t\":\"针对当前读（select ... for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\"},\"2526\":{\"t\":\"这四种隔离级别具体是如何实现的呢？\"},\"2527\":{\"t\":\"对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；\"},\"2528\":{\"t\":\"对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；\"},\"2529\":{\"t\":\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View。\"},\"2530\":{\"h\":\"MVCC\",\"a\":\"mvcc\"},\"2531\":{\"t\":\"MVCC 的实现依赖于：隐藏字段、Read View、undo log。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改\"},\"2532\":{\"t\":\"隐藏字段\"},\"2533\":{\"t\":\"在内部，InnoDB 存储引擎为每行数据添加了三个 隐藏字段：\"},\"2534\":{\"t\":\"DB_TRX_ID（6字节）：表示最后一次插入或更新该行的事务 id。此外，delete 操作在内部被视为更新，只不过会在记录头 Record header 中的 deleted_flag 字段将其标记为已删除\"},\"2535\":{\"t\":\"DB_ROLL_PTR（7字节） 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空\"},\"2536\":{\"t\":\"DB_ROW_ID（6字节）：如果没有设置主键且该表没有唯一非空索引时，InnoDB 会使用该 id 来生成聚簇索引\"},\"2537\":{\"t\":\"ReadView主要是用来做可见性判断，里面保存了 “当前对本事务不可见的其他活跃事务”\"},\"2538\":{\"t\":\" trx_id_t m_low_limit_id; /* 大于等于这个 ID 的事务均不可见 */ trx_id_t m_up_limit_id; /* 小于这个 ID 的事务均可见 */ trx_id_t m_creator_trx_id; /* 创建该 Read View 的事务ID */ trx_id_t m_low_limit_no; /* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */ ids_t m_ids; /* 创建 Read View 时的活跃事务列表 */ \"},\"2539\":{\"t\":\"主要有以下字段：\"},\"2540\":{\"t\":\"m_low_limit_id：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见\"},\"2541\":{\"t\":\"m_up_limit_id：活跃事务列表 m_ids 中最小的事务 ID，如果 m_ids 为空，则 m_up_limit_id 为 m_low_limit_id。小于这个 ID 的数据版本均可见\"},\"2542\":{\"t\":\"m_ids：Read View 创建时其他未提交的活跃事务 ID 列表。创建 Read View时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。m_ids 不包括当前事务自己和已提交的事务（正在内存中）\"},\"2543\":{\"t\":\"m_creator_trx_id：创建该 Read View 的事务 ID\"},\"2544\":{\"t\":\"trans_visible\"},\"2545\":{\"h\":\"undo-log\",\"a\":\"undo-log\"},\"2546\":{\"t\":\"undo log 主要有两个作用：\"},\"2547\":{\"t\":\"当事务回滚时用于将数据恢复到修改前的样子\"},\"2548\":{\"t\":\"另一个作用是 MVCC ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 undo log 读取之前的版本数据，以此实现非锁定读\"},\"2549\":{\"t\":\"在 InnoDB 存储引擎中 undo log 分为两种： insert undo log 和 update undo log：\"},\"2550\":{\"t\":\"insert undo log ：指在 insert 操作中产生的 undo log。因为 insert 操作的记录只对事务本身可见，对其他事务不可见，故该 undo log 可以在事务提交后直接删除。不需要进行 purge 操作\"},\"2551\":{\"h\":\"Jdbc防止sql注入\",\"a\":\"jdbc防止sql注入\"},\"2552\":{\"t\":\"我们只需要使用PreparedStatement解决 将敏感字符进行转义。\"},\"2553\":{\"t\":\"我们可以看到输出的SQL文是把整个参数用引号包起来，并把参数中的引号作为转义字符，从而避免了参数也作为条件的一部分。\"},\"2554\":{\"t\":\"参考：https://blog.csdn.net/weixin_52258054/article/details/124891266\"},\"2555\":{\"h\":\"常见优化手段\",\"a\":\"常见优化手段\"},\"2556\":{\"h\":\"经常一起使用的列放到一个表中\",\"a\":\"经常一起使用的列放到一个表中\"},\"2557\":{\"t\":\"避免更多的关联操作。\"},\"2558\":{\"h\":\"禁止在数据库中存储文件（比如图片）这类大的二进制数据\",\"a\":\"禁止在数据库中存储文件-比如图片-这类大的二进制数据\"},\"2559\":{\"t\":\"在数据库中存储文件会严重影响数据库性能，消耗过多存储空间。\"},\"2560\":{\"t\":\"文件（比如图片）这类大的二进制数据通常存储于文件服务器，数据库只存储文件地址信息。\"},\"2561\":{\"h\":\"优先选择符合存储需要的最小的数据类型\",\"a\":\"优先选择符合存储需要的最小的数据类型\"},\"2562\":{\"t\":\"存储字节越小，占用也就空间越小，性能也越好。\"},\"2563\":{\"h\":\"同财务相关的金额类数据必须使用 decimal 类型\",\"a\":\"同财务相关的金额类数据必须使用-decimal-类型\"},\"2564\":{\"t\":\"非精准浮点 ：float,double\"},\"2565\":{\"t\":\"精准浮点 ：decimal\"},\"2566\":{\"t\":\"decimal 类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节。并且，decimal 可用于存储比 bigint 更大的整型数据\"},\"2567\":{\"t\":\"不过， 由于 decimal 需要额外的空间和计算开销，应该尽量只在需要对数据进行精确计算时才使用 decimal 。\"},\"2568\":{\"h\":\"单表不要包含过多字段\",\"a\":\"单表不要包含过多字段\"},\"2569\":{\"t\":\"如果一个表包含过多字段的话，可以考虑将其分解成多个表，必要时增加中间表进行关联。\"},\"2570\":{\"h\":\"禁止使用全文索引\",\"a\":\"禁止使用全文索引\"},\"2571\":{\"t\":\"全文索引不适用于 OLTP 场景。\"},\"2572\":{\"h\":\"禁止给表中的每一列都建立单独的索引\",\"a\":\"禁止给表中的每一列都建立单独的索引\"},\"2573\":{\"t\":\"5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。\"},\"2574\":{\"h\":\"每个 InnoDB 表必须有个主键\",\"a\":\"每个-innodb-表必须有个主键\"},\"2575\":{\"h\":\"禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询\",\"a\":\"禁止使用-select-必须使用-select-字段列表-查询\"},\"2576\":{\"t\":\"SELECT * 消耗更多的 CPU 和 IO 以网络带宽资源\"},\"2577\":{\"t\":\"SELECT * 无法使用覆盖索引\"},\"2578\":{\"t\":\"SELECT <字段列表> 可减少表结构变更带来的影响\"},\"2579\":{\"h\":\"避免使用子查询，可以把子查询优化为 join 操作\",\"a\":\"避免使用子查询-可以把子查询优化为-join-操作\"},\"2580\":{\"t\":\"通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。\"},\"2581\":{\"t\":\"子查询性能差的原因： 子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。\"},\"2582\":{\"h\":\"Redis\"},\"2583\":{\"h\":\"Redis\",\"a\":\"redis\"},\"2584\":{\"h\":\"Redis 为什么这么快？\",\"a\":\"redis-为什么这么快\"},\"2585\":{\"t\":\"Redis 内部做了非常多的性能优化，比较重要的主要有下面 3 点：\"},\"2586\":{\"t\":\"Redis 基于内存，内存的访问速度是磁盘的上千倍；\"},\"2587\":{\"t\":\"Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；\"},\"2588\":{\"t\":\"Redis 内置了多种优化过后的数据结构实现，性能非常高。\"},\"2589\":{\"h\":\"基本数据类型\",\"a\":\"基本数据类型\"},\"2590\":{\"t\":\"5 种基础数据类型 ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\"},\"2591\":{\"t\":\"3 种特殊数据类型 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。\"},\"2592\":{\"h\":\"数据结构及适用场景\",\"a\":\"数据结构及适用场景\"},\"2593\":{\"h\":\"String（字符串）：\",\"a\":\"string-字符串\"},\"2594\":{\"h\":\"数据结构：\",\"a\":\"数据结构\"},\"2595\":{\"t\":\"String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。\"},\"2596\":{\"t\":\"SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：\"},\"2597\":{\"t\":\"SDS 不仅可以保存文本数据，还可以保存二进制数据。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。\"},\"2598\":{\"t\":\"SDS 获取字符串长度的时间复杂度是 O(1)。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 len 属性记录了字符串长度，所以复杂度为 O(1)。\"},\"2599\":{\"t\":\"Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。\"},\"2600\":{\"h\":\"应用场景：\",\"a\":\"应用场景\"},\"2601\":{\"t\":\"常规数据（比如 session、token、序列化后的对象、图片的路径）的缓存；\"},\"2602\":{\"t\":\"计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；\"},\"2603\":{\"t\":\"分布式锁(利用 SETNX key value 命令可以实现一个最简易的分布式锁)；\"},\"2604\":{\"h\":\"List（列表）：\",\"a\":\"list-列表\"},\"2605\":{\"h\":\"数据结构：\",\"a\":\"数据结构-1\"},\"2606\":{\"t\":\"List 类型的底层数据结构是由双向链表或压缩列表实现的：\"},\"2607\":{\"t\":\"如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用压缩列表作为 List 类型的底层数据结构；\"},\"2608\":{\"t\":\"如果列表的元素不满足上面的条件，Redis 会使用双向链表作为 List 类型的底层数据结构；\"},\"2609\":{\"t\":\"但是在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表。\"},\"2610\":{\"h\":\"应用场景：\",\"a\":\"应用场景-1\"},\"2611\":{\"t\":\"消息队列，List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列；\"},\"2612\":{\"h\":\"Set（集合）：\",\"a\":\"set-集合\"},\"2613\":{\"h\":\"数据结构：\",\"a\":\"数据结构-2\"},\"2614\":{\"t\":\"Set 类型的底层数据结构是由哈希表或整数集合实现的：\"},\"2615\":{\"t\":\"如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用整数集合作为 Set 类型的底层数据结构；\"},\"2616\":{\"t\":\"如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构。\"},\"2617\":{\"h\":\"应用场景：\",\"a\":\"应用场景-2\"},\"2618\":{\"t\":\"点赞、共同关注；\"},\"2619\":{\"h\":\"Hash（散列）：\",\"a\":\"hash-散列\"},\"2620\":{\"h\":\"数据结构：\",\"a\":\"数据结构-3\"},\"2621\":{\"t\":\"Hash 类型的底层数据结构是由压缩列表或哈希表实现的：\"},\"2622\":{\"t\":\"如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用压缩列表作为 Hash 类型的底层数据结构；\"},\"2623\":{\"t\":\"如果哈希类型元素不满足上面条件，Redis 会使用哈希表作为 Hash 类型的 底层数据结构。\"},\"2624\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"2625\":{\"h\":\"应用场景：\",\"a\":\"应用场景-3\"},\"2626\":{\"t\":\"Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象以及购物车；\"},\"2627\":{\"h\":\"Zset（有序集合）：\",\"a\":\"zset-有序集合\"},\"2628\":{\"h\":\"数据结构：\",\"a\":\"数据结构-4\"},\"2629\":{\"t\":\"Zset 类型的底层数据结构是由压缩列表或跳表实现的：\"},\"2630\":{\"t\":\"如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构；\"},\"2631\":{\"t\":\"如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构；\"},\"2632\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"2633\":{\"h\":\"应用场景：\",\"a\":\"应用场景-4\"},\"2634\":{\"t\":\"有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。\"},\"2635\":{\"h\":\"持久化\",\"a\":\"持久化\"},\"2636\":{\"t\":\"Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:\"},\"2637\":{\"t\":\"快照（snapshotting，RDB）\"},\"2638\":{\"t\":\"只追加文件（append-only file, AOF）\"},\"2639\":{\"t\":\"RDB 和 AOF 的混合持久化(Redis 4.0 新增)\"},\"2640\":{\"h\":\"什么是 RDB 持久化？\",\"a\":\"什么是-rdb-持久化\"},\"2641\":{\"t\":\"Redis 可以通过创建快照来获得存储在内存里面的数据在 某个时间点 上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\"},\"2642\":{\"t\":\"快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\"},\"2643\":{\"t\":\"save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。 \"},\"2644\":{\"h\":\"RDB 创建快照时会阻塞主线程吗？\",\"a\":\"rdb-创建快照时会阻塞主线程吗\"},\"2645\":{\"t\":\"Redis 提供了两个命令来生成 RDB 快照文件：\"},\"2646\":{\"t\":\"save : 同步保存操作，会阻塞 Redis 主线程；\"},\"2647\":{\"t\":\"bgsave : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。\"},\"2648\":{\"h\":\"什么是 AOF 持久化？\",\"a\":\"什么是-aof-持久化\"},\"2649\":{\"t\":\"与快照持久化相比，AOF 持久化的实时性更好。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化（Redis 6.0 之后已经默认是开启了），可以通过 appendonly 参数开启：\"},\"2650\":{\"t\":\"appendonly yes \"},\"2651\":{\"t\":\"开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到 AOF 缓冲区 server.aof_buf 中，然后再写入到 AOF 文件中（此时还在系统内核缓存区为同步到磁盘），最后再根据持久化方式（ fsync策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中的。\"},\"2652\":{\"t\":\"只有同步到磁盘中才算持久化保存了，否则依然存在数据丢失的风险，比如说：系统内核缓存区的数据还未同步，磁盘机器就宕机了，那这部分数据就算丢失了。\"},\"2653\":{\"t\":\"AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\"},\"2654\":{\"h\":\"AOF 工作基本流程是怎样的？\",\"a\":\"aof-工作基本流程是怎样的\"},\"2655\":{\"t\":\"AOF 持久化功能的实现可以简单分为 5 步：\"},\"2656\":{\"t\":\"命令追加（append） ：所有的写命令会追加到 AOF 缓冲区中。\"},\"2657\":{\"t\":\"文件写入（write） ：将 AOF 缓冲区的数据写入到 AOF 文件中。这一步需要调用write函数（系统调用），write将数据写入到了系统内核缓冲区之后直接返回了（延迟写）。注意！！！此时并没有同步到磁盘。\"},\"2658\":{\"t\":\"文件同步（fsync） ：AOF 缓冲区根据对应的持久化方式（ fsync 策略）向硬盘做同步操作。这一步需要调用 fsync 函数（系统调用）， fsync 针对单个文件操作，对其进行强制硬盘同步，fsync 将阻塞直到写入磁盘完成后返回，保证了数据持久化。\"},\"2659\":{\"t\":\"文件重写（rewrite） ：随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。\"},\"2660\":{\"t\":\"重启加载（load） ：当 Redis 重启时，可以加载 AOF 文件进行数据恢复。\"},\"2661\":{\"t\":\"Linux 系统直接提供了一些函数用于对文件和设备进行访问和控制，这些函数被称为 系统调用（syscall）。\"},\"2662\":{\"t\":\"这里对上面提到的一些 Linux 系统调用再做一遍解释：\"},\"2663\":{\"t\":\"write ：写入系统内核缓冲区之后直接返回（仅仅是写到缓冲区），不会立即同步到硬盘。虽然提高了效率，但也带来了数据丢失的风险。同步硬盘操作通常依赖于系统调度机制，Linux 内核通常为 30s 同步一次，具体值取决于写出的数据量和 I/O 缓冲区的状态。\"},\"2664\":{\"t\":\"fsync ： fsync用于强制刷新系统内核缓冲区（同步到到磁盘），确保写磁盘操作结束才会返回。\"},\"2665\":{\"t\":\"AOF 工作流程图如下：\"},\"2666\":{\"t\":\"AOF 工作基本流程\"},\"2667\":{\"h\":\"删除与淘汰策略\",\"a\":\"删除与淘汰策略\"},\"2668\":{\"h\":\"过期的数据的删除策略了解么？\",\"a\":\"过期的数据的删除策略了解么\"},\"2669\":{\"t\":\"如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？\"},\"2670\":{\"t\":\"常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：\"},\"2671\":{\"t\":\"惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。\"},\"2672\":{\"t\":\"定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。\"},\"2673\":{\"t\":\"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性/懒汉式删除 。\"},\"2674\":{\"t\":\"但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。\"},\"2675\":{\"t\":\"怎么解决这个问题呢？答案就是：Redis 内存淘汰机制。\"},\"2676\":{\"h\":\"Redis 内存淘汰机制了解么？\",\"a\":\"redis-内存淘汰机制了解么\"},\"2677\":{\"t\":\"相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?\"},\"2678\":{\"t\":\"Redis 提供 6 种数据淘汰策略：\"},\"2679\":{\"t\":\"volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰。\"},\"2680\":{\"t\":\"volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰。\"},\"2681\":{\"t\":\"volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰。\"},\"2682\":{\"t\":\"allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。\"},\"2683\":{\"t\":\"allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰。\"},\"2684\":{\"t\":\"no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\"},\"2685\":{\"t\":\"4.0 版本后增加以下两种：\"},\"2686\":{\"t\":\"volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰。\"},\"2687\":{\"t\":\"allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。\"},\"2688\":{\"h\":\"主从复制\",\"a\":\"主从复制\"},\"2689\":{\"h\":\"哨兵\",\"a\":\"哨兵\"},\"2690\":{\"h\":\"缓存雪崩/击穿/穿透\",\"a\":\"缓存雪崩-击穿-穿透\"},\"2691\":{\"h\":\"什么是缓存穿透？\",\"a\":\"什么是缓存穿透\"},\"2692\":{\"t\":\"缓存穿透说简单点就是大量请求的 key 是不合理的，根本不存在于缓存中，也不存在于数据库中 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"2693\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法\"},\"2694\":{\"t\":\"最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。\"},\"2695\":{\"t\":\"1）缓存无效 key\"},\"2696\":{\"t\":\"如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： SET key value EX 10086 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。\"},\"2697\":{\"t\":\"2）布隆过滤器\"},\"2698\":{\"t\":\"布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。\"},\"2699\":{\"t\":\"具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\"},\"2700\":{\"t\":\"但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。\"},\"2701\":{\"t\":\"为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！\"},\"2702\":{\"t\":\"我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：\"},\"2703\":{\"t\":\"使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。\"},\"2704\":{\"t\":\"根据得到的哈希值，在位数组中把对应下标的值置为 1。\"},\"2705\":{\"t\":\"我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：\"},\"2706\":{\"t\":\"对给定元素再次进行相同的哈希计算；\"},\"2707\":{\"t\":\"得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。\"},\"2708\":{\"t\":\"然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）\"},\"2709\":{\"h\":\"什么是缓存击穿？\",\"a\":\"什么是缓存击穿\"},\"2710\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"2711\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-1\"},\"2712\":{\"t\":\"设置热点数据永不过期或者过期时间比较长。\"},\"2713\":{\"t\":\"针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。\"},\"2714\":{\"t\":\"请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。\"},\"2715\":{\"h\":\"缓存穿透和缓存击穿有什么区别？\",\"a\":\"缓存穿透和缓存击穿有什么区别\"},\"2716\":{\"t\":\"缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。\"},\"2717\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。\"},\"2718\":{\"h\":\"什么是缓存雪崩？\",\"a\":\"什么是缓存雪崩\"},\"2719\":{\"t\":\"我发现缓存雪崩这名字起的有点意思，哈哈。\"},\"2720\":{\"t\":\"实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。\"},\"2721\":{\"t\":\"另外，缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。\"},\"2722\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-2\"},\"2723\":{\"t\":\"针对 Redis 服务不可用的情况：\"},\"2724\":{\"t\":\"采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。\"},\"2725\":{\"t\":\"限流，避免同时处理大量的请求。\"},\"2726\":{\"t\":\"针对热点缓存失效的情况：\"},\"2727\":{\"t\":\"设置不同的失效时间比如随机设置缓存的失效时间。\"},\"2728\":{\"t\":\"缓存永不失效（不太推荐，实用性太差）。\"},\"2729\":{\"t\":\"设置二级缓存。\"},\"2730\":{\"h\":\"缓存雪崩和缓存击穿有什么区别？\",\"a\":\"缓存雪崩和缓存击穿有什么区别\"},\"2731\":{\"t\":\"缓存雪崩和缓存击穿比较像，但缓存雪崩导致的原因是缓存中的大量或者所有数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。\"},\"2732\":{\"h\":\"redis 6.0 多线程的实现机制：\",\"a\":\"redis-6-0-多线程的实现机制\"},\"2733\":{\"t\":\"https://blog.csdn.net/zhizhengguan/article/details/120627481\"},\"2734\":{\"h\":\"多线程和高并发\"},\"2735\":{\"h\":\"三：多线程与高并发\",\"a\":\"三-多线程与高并发\"},\"2736\":{\"h\":\"线程的互斥同步方式有哪些? 如何比较和选择?\",\"a\":\"线程的互斥同步方式有哪些-如何比较和选择\"},\"2737\":{\"t\":\"Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。\"},\"2738\":{\"t\":\"锁的实现synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。\"},\"2739\":{\"t\":\"性能新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。\"},\"2740\":{\"t\":\"等待可中断当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。\"},\"2741\":{\"t\":\"公平锁公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\"},\"2742\":{\"t\":\"锁绑定多个条件一个 ReentrantLock 可以同时绑定多个 Condition 对象。\"},\"2743\":{\"h\":\"ReentrantLock：\",\"a\":\"reentrantlock\"},\"2744\":{\"t\":\"ReentrantLock 实现了 Lock 接口，是一个可重入且独占式的锁，和 synchronized 关键字类似。不过，ReentrantLock 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。\"},\"2745\":{\"t\":\"public class ReentrantLock implements Lock, java.io.Serializable {} \"},\"2746\":{\"t\":\"ReentrantLock 里面有一个内部类 Sync，Sync 继承 AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在 Sync 中实现的。Sync 有公平锁 FairSync 和非公平锁 NonfairSync 两个子类。\"},\"2747\":{\"t\":\"ReentrantLock 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。\"},\"2748\":{\"t\":\"// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁 public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } \"},\"2749\":{\"t\":\"https://blog.csdn.net/zhengzhaoyang122/article/details/110847701；https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html\"},\"2750\":{\"h\":\"锁升级\",\"a\":\"锁升级\"},\"2751\":{\"t\":\"img\"},\"2752\":{\"h\":\"无锁\",\"a\":\"无锁\"},\"2753\":{\"t\":\"无锁并不会对资源锁定，所有的线程都可以访问并修改同一个资源，但同时只有一个线程能修改成功。也就是我们常说的乐观锁。\"},\"2754\":{\"h\":\"偏向锁\",\"a\":\"偏向锁\"},\"2755\":{\"t\":\"偏向于第一个访问锁的线程，初次执行synchronized代码块时，通过 CAS 修改对象头里的锁标志位，锁对象变成偏向锁。\"},\"2756\":{\"t\":\"当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。\"},\"2757\":{\"t\":\"执行完同步代码块后，线程并不会主动释放偏向锁。当线程第二次再执行同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里不需要重新加锁，偏向锁几乎没有额外开销，性能极高。\"},\"2758\":{\"t\":\"偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。\"},\"2759\":{\"t\":\"偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗。 \"},\"2760\":{\"h\":\"轻量级锁\",\"a\":\"轻量级锁\"},\"2761\":{\"t\":\"当前锁是偏向锁，此时有多个线程同时来竞争锁，偏向锁就会升级为轻量级锁。轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式来获取锁。\"},\"2762\":{\"t\":\"轻量级锁的获取有两种情况：\"},\"2763\":{\"t\":\"当关闭偏向锁功能时 多个线程竞争偏向锁导致偏向锁升级为轻量级锁。一旦有第二个线程加入锁竞争，偏向锁就升级为轻量级锁（自旋锁） \"},\"2764\":{\"t\":\"在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先比较当前锁标志位是否为“释放”，如果是则将其设置为“锁定”，此过程是原子性。如果抢到锁，然后线程将当前锁的持有者信息修改为自己。\"},\"2765\":{\"h\":\"重量级锁\",\"a\":\"重量级锁\"},\"2766\":{\"t\":\"如果线程的竞争很激励，线程的自旋超过了一定次数（默认循环10次，可以通过虚拟机参数更改），将轻量级锁升级为重量级锁（依然是 CAS 修改锁标志位，但不修改持有锁的线程ID），当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。\"},\"2767\":{\"t\":\"重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资。\"},\"2768\":{\"h\":\"锁优化技术（锁粗化、锁消除）：\",\"a\":\"锁优化技术-锁粗化、锁消除\"},\"2769\":{\"t\":\"锁粗化就是告诉我们任何事情都有个度，有些情况下我们反而希望把很多次锁的请求合并成一个请求，以降低短时间内大量锁请求、同步、释放带来的性能损耗。\"},\"2770\":{\"t\":\"锁消除指的是在某些情况下，JVM 虚拟机如果检测不到某段代码被共享和竞争的可能性，就会将这段代码所属的同步锁消除掉，从而到底提高程序性能的目的。\"},\"2771\":{\"h\":\"CAS\",\"a\":\"cas\"},\"2772\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&mid=2247510278&idx=3&sn=a58a9ec9f805d0e109c4b09cd497c9ca&chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1&scene=27\"},\"2773\":{\"t\":\"在并发编程中我们都知道i++操作是非线程安全的，这是因为 i++操作不是原子操作。\"},\"2774\":{\"t\":\"如何保证原子性呢？常用的方法就是加锁。在Java语言中可以使用 Synchronized和CAS实现加锁效果。\"},\"2775\":{\"t\":\"Synchronized是悲观锁，线程开始执行第一步就是获取锁，一旦获得锁，其他的线程进入后就会阻塞等待锁。如果不好理解，举个生活中的例子：一个人进入厕所后首先把门锁上（获取锁），然后开始上厕所，这个时候有其他人来了只能在外面等（阻塞），就算再急也没用。上完厕所完事后把门打开（解锁），其他人就可以进入了。\"},\"2776\":{\"t\":\"CAS是乐观锁，线程执行的时候不会加锁，假设没有冲突去完成某项操作，如果因为冲突失败了就重试，最后直到成功为止。\"},\"2777\":{\"h\":\"什么是 CAS？\",\"a\":\"什么是-cas\"},\"2778\":{\"t\":\"CAS（Compare-And-Swap）是比较并交换的意思，它是一条 CPU 并发原语，用于判断内存中某个值是否为预期值，如果是则更改为新的值，这个过程是原子的。下面用一个小示例解释一下。\"},\"2779\":{\"t\":\"CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，计算后要修改后的新值B。\"},\"2780\":{\"t\":\"（1）初始状态：在内存地址V中存储着变量值为 1。\"},\"2781\":{\"t\":\"图片\"},\"2782\":{\"t\":\"（2）线程1想要把内存地址为 V 的变量值增加1。这个时候对线程1来说，旧的预期值A=1，要修改的新值B=2。\"},\"2783\":{\"t\":\"图片\"},\"2784\":{\"t\":\"（3）在线程1要提交更新之前，线程2捷足先登了，已经把内存地址V中的变量值率先更新成了2。\"},\"2785\":{\"t\":\"图片\"},\"2786\":{\"t\":\"（4）线程1开始提交更新，首先将预期值A和内存地址V的实际值比较（Compare），发现A不等于V的实际值，提交失败。\"},\"2787\":{\"t\":\"图片\"},\"2788\":{\"t\":\"（5）线程1重新获取内存地址 V 的当前值，并重新计算想要修改的新值。此时对线程1来说，A=2，B=3。这个重新尝试的过程被称为自旋。如果多次失败会有多次自旋。\"},\"2789\":{\"t\":\"图片\"},\"2790\":{\"t\":\"（6）线程 1 再次提交更新，这一次没有其他线程改变地址 V 的值。线程1进行Compare，发现预期值 A 和内存地址 V的实际值是相等的，进行 Swap 操作，将内存地址 V 的实际值修改为 B。\"},\"2791\":{\"t\":\"图片\"},\"2792\":{\"t\":\"总结：更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 中的实际值相同时，才会将内存地址 V 对应的值修改为 B，这整个操作就是CAS。\"},\"2793\":{\"h\":\"CAS 基本原理\",\"a\":\"cas-基本原理\"},\"2794\":{\"t\":\"CAS 主要包括两个操作：Compare和Swap，有人可能要问了：两个操作能保证是原子性吗？可以的。\"},\"2795\":{\"t\":\"CAS 是一种系统原语，原语属于操作系统用语，原语由若干指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，由操作系统硬件来保证。在 Intel 的 CPU 中，使用 cmpxchg 指令。\"},\"2796\":{\"t\":\"回到 Java 语言，JDK 是在 1.5 版本后才引入 CAS 操作，在sun.misc.Unsafe这个类中定义了 CAS 相关的方法。\"},\"2797\":{\"t\":\"在 Java 编程中我们通常不会直接使用到 CAS，都是通过 JDK 封装好的并发工具类来间接使用的，这些并发工具类都在java.util.concurrent包中。\"},\"2798\":{\"h\":\"CAS 的问题\",\"a\":\"cas-的问题\"},\"2799\":{\"t\":\"CAS 不是万能的，也有很多问题。\"},\"2800\":{\"t\":\"敲黑板：CAS有哪些问题，这是面试高频考点，需要重点掌握。\"},\"2801\":{\"h\":\"典型 ABA 问题\",\"a\":\"典型-aba-问题\"},\"2802\":{\"t\":\"ABA 是 CAS 操作的一个经典问题，假设有一个变量初始值为 A，修改为 B，然后又修改为 A，这个变量实际被修改过了，但是 CAS 操作可能无法感知到。\"},\"2803\":{\"t\":\"如果是整型还好，不会影响最终结果，但如果是对象的引用类型包含了多个变量，引用没有变实际上包含的变量已经被修改，这就会造成大问题。\"},\"2804\":{\"t\":\"如何解决？思路其实很简单，在变量前加版本号，每次变量更新了就把版本号加一，结果如下：\"},\"2805\":{\"t\":\"图片\"},\"2806\":{\"t\":\"最终结果都是 A 但是版本号改变了。\"},\"2807\":{\"t\":\"从 JDK 1.5 开始提供了AtomicStampedReference类，这个类的 compareAndSe方法首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\"},\"2808\":{\"h\":\"自旋开销问题\",\"a\":\"自旋开销问题\"},\"2809\":{\"t\":\"CAS 出现冲突后就会开始自旋操作，如果资源竞争非常激烈，自旋长时间不能成功就会给 CPU 带来非常大的开销。\"},\"2810\":{\"t\":\"解决方案：可以考虑限制自旋的次数，避免过度消耗 CPU；另外还可以考虑延迟执行。\"},\"2811\":{\"h\":\"只能保证单个变量的原子性\",\"a\":\"只能保证单个变量的原子性\"},\"2812\":{\"t\":\"当对一个共享变量执行操作时，可以使用 CAS 来保证原子性，但是如果要对多个共享变量进行操作时，CAS 是无法保证原子性的，比如需要将 i 和 j 同时加 1：\"},\"2813\":{\"t\":\"i++；j++； \"},\"2814\":{\"t\":\"这个时候可以使用 synchronized 进行加锁，有没有其他办法呢？有，将多个变量操作合成一个变量操作。从 JDK1.5 开始提供了AtomicReference 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\"},\"2815\":{\"h\":\"总结\",\"a\":\"总结\"},\"2816\":{\"t\":\"CAS 是 Compare And Swap，是一条 CPU 原语，由操作系统保证原子性。\"},\"2817\":{\"t\":\"Java语言从 JDK1.5 版本开始引入 CAS ， 并且是 Java 并发编程J.U.C 包的基石，应用非常广泛。\"},\"2818\":{\"t\":\"当然 CAS 也不是万能的，也有很多问题：典型 ABA 问题、自旋开销问题、只能保证单个变量的原子性。\"},\"2819\":{\"h\":\"AQS\",\"a\":\"aqs\"},\"2820\":{\"t\":\"https://zhuanlan.zhihu.com/p/543902719\"},\"2821\":{\"h\":\"什么是AQS\",\"a\":\"什么是aqs\"},\"2822\":{\"t\":\"AQS（AbstractQueuedSynchronizer），即队列同步器，它是构建锁或者其他同步组件的基础框架，如ReentrantLock、ReentrantReadWriteLock、Semaphore，CountDownLatch等。 AQS是一个抽象类，主要是通过继承方式使用，本身没有实现任何接口，仅仅是定义了同步状态的获取和释放的方法。AQS解决了了之类实现同步器的大量细节问题，例如获取同步状态，FIFO队列，入队和出队。自定义同步器在实现时候只需要实现共享资源state的获取和释放即可，至于获取资源失败入队/唤醒出队等，AQS在顶层已经定义好了。\"},\"2823\":{\"h\":\"AQS的两种功能\",\"a\":\"aqs的两种功能\"},\"2824\":{\"t\":\"从使用层面来说，AQS功能分为两种：独占和共享\"},\"2825\":{\"t\":\"独占锁，每次只能一个线程持有锁，比如ReentrantLock就是独占锁\"},\"2826\":{\"t\":\"共享锁，允许多个线程持有锁，并发访问共享资源，比如ReentrantReadWriteLock\"},\"2827\":{\"t\":\"共享锁和独占锁的释放有一定区别，前面部分是一致的，先判断头结点是不是signal状态，如果是则唤醒头节点的下一个节点，并将该节点设置为头结点。而共享锁不一样，某个节点被设置为head之后，如果它的后继节点是shared状态，那么会尝试使用doReleaseShared方法尝试唤醒节点，实现共享状态的传播。\"},\"2828\":{\"h\":\"AQS内部实现\",\"a\":\"aqs内部实现\"},\"2829\":{\"t\":\"AQS是依赖内部的同步队列实现，也就是FIFO双向队列，如果当前线程竞争锁失败，那么AQS会把当前线程以及等待状态封装成一个Node节点加入到同步队列中，同时阻塞该线程，当同步状态释放时，会把首节点唤醒，使其再次尝试获取同步状态。\"},\"2830\":{\"t\":\"AQS队列内部维护的是一个双向链表，这种结构每个数据都有两个指针，分别指向直接的的前驱节点和后继节点，当线程抢占锁失败时候，会封装成Node加入到AQS中去。\"},\"2831\":{\"t\":\"AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁 实现的，即将暂时获取不到锁的线程加入到队列中。\"},\"2832\":{\"t\":\"CLH(Craig,Landin,and Hagersten) 队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。在 CLH 同步队列中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。\"},\"2833\":{\"t\":\"CLH 队列结构如下图所示：\"},\"2834\":{\"t\":\"img\"},\"2835\":{\"t\":\"在同步队列中，一个节点表示一个线程，他保存这线程的引用ThreadId，状态（watiStatus）,前驱结点（pre），后继节点（next），其数据结构如下：\"},\"2836\":{\"t\":\"img\"},\"2837\":{\"h\":\"acquire方法流程总结\",\"a\":\"acquire方法流程总结\"},\"2838\":{\"t\":\"首先通过子类判断是否获取了锁，如果获取了就什么也不干。tryAcquire\"},\"2839\":{\"t\":\"如果没有获取锁、通过线程创建节点加入同步队列的队尾。addWaiter\"},\"2840\":{\"t\":\"当线程在同步队列中不断的通过自旋去获取同步状态，如果获取了锁，就把其设为同步队列中的头节点，否则在同步队列中不停的自旋等待获取同步状态 acquireQueued,shouldParkAfterFailedAcquire(Node pre,Node node),parkAndCheckInterrupt()\"},\"2841\":{\"t\":\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\"},\"2842\":{\"h\":\"AQS 底层使用了模板方法模式，你能说出几个需要重写的方法吗？\",\"a\":\"aqs-底层使用了模板方法模式-你能说出几个需要重写的方法吗\"},\"2843\":{\"t\":\"使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。\"},\"2844\":{\"t\":\"isHeldExclusively() ：该线程是否正在独占资源。只有用到 condition 才需要去实现它。\"},\"2845\":{\"t\":\"tryAcquire(int) ：独占方式。尝试获取资源，成功则返回 true，失败则返回 false。\"},\"2846\":{\"t\":\"tryRelease(int) ：独占方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"2847\":{\"t\":\"tryAcquireShared(int) ：共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\"},\"2848\":{\"t\":\"tryReleaseShared(int) ：共享方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"2849\":{\"h\":\"总结\",\"a\":\"总结-1\"},\"2850\":{\"t\":\"总结的来说：线程获取锁，如果获取了锁就 保存当前获得锁的线程，如果没获取就创造一个节点通过compareAndSetTail(CAS操作)操作的方式将创建的节点加入同步队列的尾部，在同步队列中的节点通过自旋的操作不断去获取同步状态【当然由于FIFO先进先出的特性】等待时间越长就越先被唤醒。当头节点释放同步状态的时候，首先查看是否存在后继节点，如果存在就唤醒自己的后继节点，如果不存在就获取等待时间最长的符合条件的线程。\"},\"2851\":{\"h\":\"volitile关键字原理\",\"a\":\"volitile关键字原理\"},\"2852\":{\"h\":\"简述Java内存模型：\",\"a\":\"简述java内存模型\"},\"2853\":{\"t\":\"Java内存模型分为主内存和线程工作内存两大类。\"},\"2854\":{\"t\":\"主内存： **多个线程共享的内存。**如下图所示，方法区和堆属于主内存区域。\"},\"2855\":{\"t\":\"线程工作内存：每个线程独享的内存。如下图所示，虚拟机栈、本地方法栈、程序计数器属于线程独享的工作内存。\"},\"2856\":{\"t\":\"图片\"},\"2857\":{\"t\":\"Java内存模型规定：所有变量都需要存储在主内存中，线程工作内存保存了变量在主内存中的副本，线程对变量的所有操作都在工作内存中进行，执行结束后在同步到主内存中去。这里必然会存在时间差，在这个时间差内，该线程对副本的操作，对于其他线程是不见的，从而造成了可见性问题。\"},\"2858\":{\"h\":\"volatile的作用：\",\"a\":\"volatile的作用\"},\"2859\":{\"t\":\"保证共享变量的可见性： 使用volatile修饰的变量，任何线程对其进行操作都是在主内存中进行的，不会产生副本，从而保证共享变量的可见性。\"},\"2860\":{\"t\":\"防止局部指令重排序： happens-before规则中的volatile变量规则规定了一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。\"},\"2861\":{\"h\":\"volatile如何防止指令重排序：\",\"a\":\"volatile如何防止指令重排序\"},\"2862\":{\"t\":\"volatile是通过内存屏障来防止指令重排序的。\"},\"2863\":{\"t\":\"硬件层面的内存屏障分为Load Barrier 和 Store Barrier即读屏障和写屏障。\"},\"2864\":{\"t\":\"对于Load Barrier来说，在指令前插入Load Barrier，可以让高速缓存中的数据失效，强制从新从主内存加载数据。\"},\"2865\":{\"t\":\"对于Store Barrier来说，在指令后插入Store Barrier，能让写入缓存中的最新数据更新写入主内存，让其他线程可见。\"},\"2866\":{\"t\":\"Java内存屏障类型把上述两种内存屏障两两组合，如下图所示：\"},\"2867\":{\"t\":\"图片\"},\"2868\":{\"t\":\"volatile防止指令重排序具体步骤：\"},\"2869\":{\"t\":\"在每个volatile写操作的前面插入一个StoreStore屏障。\"},\"2870\":{\"t\":\"在每个volatile写操作的后面插入一个StoreLoad屏障。\"},\"2871\":{\"t\":\"在每个volatile读操作的后面插入一个LoadLoad屏障。\"},\"2872\":{\"t\":\"在每个volatile读操作的后面插入一个LoadStore屏障。\"},\"2873\":{\"t\":\"图片\"},\"2874\":{\"t\":\"图片\"},\"2875\":{\"h\":\"volatile总结：\",\"a\":\"volatile总结\"},\"2876\":{\"t\":\"volatile解决的是多线程共享变量可见性问题，但是被volatile修饰的变量操作并非具有原子性。\"},\"2877\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=MzAxNTE2NjEyMw==&mid=2247483734&idx=1&sn=8509d4aa61d08550c2b7668314da3582&chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e&scene=27\"},\"2878\":{\"h\":\"锁的分类实现\",\"a\":\"锁的分类实现\"},\"2879\":{\"h\":\"悲观锁：\",\"a\":\"悲观锁\"},\"2880\":{\"t\":\"正如其名，它是指对数据修改时持保守态度，认为其他人也会修改数据。因此在操作数据时，会把数据锁住，直到操作完成。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是长事务而言，这样的开销往往无法承受。\"},\"2881\":{\"h\":\"乐观锁：\",\"a\":\"乐观锁\"},\"2882\":{\"t\":\"乐观锁，从字面意思也能猜到个大概，在操作数据时非常乐观，认为别人不会同时修改数据，因此乐观锁不会上锁 只是在 提交更新 时，才会正式对数据的冲突与否进行检测。如果发现冲突了，则返回错误信息，让用户决定如何去做，fail-fast 机制 。否则，执行本次操作。\"},\"2883\":{\"h\":\"可重入锁：\",\"a\":\"可重入锁\"},\"2884\":{\"t\":\"可重入锁，也叫做递归锁，是指在同一个线程在调外层方法获取锁的时候，再进入内层方法会自动获取锁。\"},\"2885\":{\"t\":\"对象锁或类锁内部有计数器，一个线程每获得一次锁，计数器 +1；解锁时，计数器 -1。\"},\"2886\":{\"t\":\"JAVA 中的 ReentrantLock 和 synchronized 都是 可重入锁。可重入锁的一个好处是可一定程度避免死锁。\"},\"2887\":{\"h\":\"自旋锁：\",\"a\":\"自旋锁\"},\"2888\":{\"t\":\"自旋锁是采用让当前线程不停地在循环体内执行，当循环的条件被其他线程改变时才能进入临界区。自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不断增加时，性能下降明显，因为每个线程都需要执行，会占用CPU时间片。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\"},\"2889\":{\"t\":\"自旋锁缺点：\"},\"2890\":{\"t\":\"可能引发死锁 可能占用 CPU 的时间过长 \"},\"2891\":{\"t\":\"我们可以设置一个 循环时间 或 循环次数，超出阈值时，让线程进入阻塞状态，防止线程长时间占用 CPU 资源。JUC 并发包中的 CAS 就是采用自旋锁，compareAndSet 是CAS操作的核心，底层利用Unsafe对象实现的。\"},\"2892\":{\"h\":\"独享锁：\",\"a\":\"独享锁\"},\"2893\":{\"t\":\"独享锁，也有人叫它排他锁。无论读操作还是写操作，只能有一个线程获得锁，其他线程处于阻塞状态。\"},\"2894\":{\"t\":\"缺点：读操作并不会修改数据，而且大部分的系统都是 读多写少，如果读读之间互斥，大大降低系统的性能。下面的 共享锁 会解决这个问题。\"},\"2895\":{\"t\":\"像JAVA 中的 ReentrantLock 和 synchronized 都是独享锁。\"},\"2896\":{\"h\":\"共享锁：\",\"a\":\"共享锁\"},\"2897\":{\"t\":\"共享锁是指允许多个线程同时持有锁，一般用在读锁上。读锁的共享锁可保证并发读是非常高效的。读写，写读 ，写写的则是互斥的。独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享\"},\"2898\":{\"t\":\"ReentrantReadWriteLock，其读锁是共享锁，其写锁是独享锁。\"},\"2899\":{\"h\":\"读锁/写锁：\",\"a\":\"读锁-写锁\"},\"2900\":{\"t\":\"如果对某个资源是读操作，那多个线程之间并不会相互影响，可以通过添加读锁实现共享。如果有修改动作，为了保证数据的并发安全，此时只能有一个线程获得锁，我们称之为 写锁。读读是共享的；而 读写、写读 、写写 则是互斥的\"},\"2901\":{\"t\":\"像 JAVA 中的 ReentrantReadWriteLock 就是一种 读写锁 \"},\"2902\":{\"h\":\"公平锁/非公平锁：\",\"a\":\"公平锁-非公平锁\"},\"2903\":{\"t\":\"公平锁：多个线程按照申请锁的顺序去获得锁，所有线程都在队列里排队，先来先获取的公平性原则。\"},\"2904\":{\"t\":\"优点：所有的线程都能得到资源，不会饿死在队列中。\"},\"2905\":{\"t\":\"缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，CPU 唤醒下一个阻塞线程有系统开销\"},\"2906\":{\"t\":\"**非公平锁：**多个线程不按照申请锁的顺序去获得锁，而是同时以插队方式直接尝试获取锁，获取不到（插队失败），会进入队列等待（失败则乖乖排队），如果能获取到（插队成功），就直接获取到锁。\"},\"2907\":{\"t\":\"**优点：**可以减少 CPU 唤醒线程的开销，整体的吞吐效率会高点\"},\"2908\":{\"t\":\"**缺点：**可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁，活活饿死。\"},\"2909\":{\"t\":\"Java 多线程并发操作，我们操作锁大多时候都是基于 Sync 本身去实现的，而 Sync 本身却是 ReentrantLock 的一个内部类，Sync 继承 AbstractQueuedSynchronizer\"},\"2910\":{\"t\":\"像 ReentrantLock 默认是非公平锁，我们可以在构造函数中传入 true，来创建公平锁。\"},\"2911\":{\"t\":\"参考：https://blog.csdn.net/weixin_70730532/article/details/126875303\"},\"2912\":{\"h\":\"synchronized原理\",\"a\":\"synchronized原理\"},\"2913\":{\"h\":\"synchronized 同步语句块的情况:\",\"a\":\"synchronized-同步语句块的情况\"},\"2914\":{\"t\":\"public class SynchronizedDemo { public void method() { synchronized (this) { System.out.println(\\\"synchronized 代码块\\\"); } } } \"},\"2915\":{\"t\":\"通过 JDK 自带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：首先切换到类的对应目录执行 javac SynchronizedDemo.java 命令生成编译后的 .class 文件，然后执行javap -c -s -v -l SynchronizedDemo.class。\"},\"2916\":{\"t\":\"synchronized关键字原理\"},\"2917\":{\"t\":\"从上面我们可以看出：synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"2918\":{\"t\":\"上面的字节码中包含一个 monitorenter 指令以及两个 monitorexit 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。\"},\"2919\":{\"t\":\"当执行 monitorenter 指令时，线程试图获取锁也就是获取 对象监视器 monitor 的持有权。\"},\"2920\":{\"t\":\"在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由ObjectMonitor实现的。每个对象中都内置了一个 ObjectMonitor对象。\"},\"2921\":{\"t\":\"另外，wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。\"},\"2922\":{\"t\":\"在执行monitorenter时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。\"},\"2923\":{\"t\":\"对象锁的的拥有者线程才可以执行 monitorexit 指令来释放锁。在执行 monitorexit 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\"},\"2924\":{\"h\":\"synchronized 修饰方法的的情况:\",\"a\":\"synchronized-修饰方法的的情况\"},\"2925\":{\"t\":\"public class SynchronizedDemo2 { public synchronized void method() { System.out.println(\\\"synchronized 方法\\\"); } } \"},\"2926\":{\"t\":\"synchronized关键字原理\"},\"2927\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\"},\"2928\":{\"t\":\"如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。\"},\"2929\":{\"h\":\"总结:\",\"a\":\"总结-2\"},\"2930\":{\"t\":\"synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"2931\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。\"},\"2932\":{\"t\":\"不过两者的本质都是对对象监视器 monitor 的获取。\"},\"2933\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-底层原理了解吗\"},\"2934\":{\"h\":\"ThreadLocal原理\",\"a\":\"threadlocal原理\"},\"2935\":{\"h\":\"ThreadLocal 有什么用？\",\"a\":\"threadlocal-有什么用\"},\"2936\":{\"t\":\"通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？\"},\"2937\":{\"t\":\"JDK 中自带的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。\"},\"2938\":{\"t\":\"如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get() 和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\"},\"2939\":{\"h\":\"原理：\",\"a\":\"原理\"},\"2940\":{\"t\":\"源码：\"},\"2941\":{\"t\":\"public class Thread implements Runnable { //...... //与此线程有关的ThreadLocal值。由ThreadLocal类维护 ThreadLocal.ThreadLocalMap threadLocals = null; //与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护 ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; //...... } \"},\"2942\":{\"t\":\"从上面Thread类 源代码可以看出Thread 类中有一个 threadLocals 和 一个 inheritableThreadLocals 变量，它们都是 ThreadLocalMap 类型的变量,我们可以把 ThreadLocalMap 理解为ThreadLocal 类实现的定制化的 HashMap。默认情况下这两个变量都是 null，只有当前线程调用 ThreadLocal 类的 set或get方法时才创建它们，实际上调用这两个方法的时候，我们调用的是ThreadLocalMap类对应的 get()、set()方法。\"},\"2943\":{\"t\":\"ThreadLocal类的set()方法：\"},\"2944\":{\"t\":\"public void set(T value) { //获取当前请求的线程 Thread t = Thread.currentThread(); //取出 Thread 类内部的 threadLocals 变量(哈希表结构) ThreadLocalMap map = getMap(t); if (map != null) // 将需要存储的值放入到这个哈希表中 map.set(this, value); else createMap(t, value); } ThreadLocalMap getMap(Thread t) { return t.threadLocals; } \"},\"2945\":{\"t\":\"通过上面这些内容，我们足以通过猜测得出结论：最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。ThrealLocal 类中可以通过Thread.currentThread()获取到当前线程对象后，直接通过getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。\"},\"2946\":{\"t\":\"每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为 key ，Object 对象为 value 的键值对。\"},\"2947\":{\"t\":\"ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) { //...... } \"},\"2948\":{\"t\":\"比如我们在同一个线程中声明了两个 ThreadLocal 对象的话， Thread内部都是使用仅有的那个ThreadLocalMap 存放数据的，ThreadLocalMap的 key 就是 ThreadLocal对象，value 就是 ThreadLocal 对象调用set方法设置的值。\"},\"2949\":{\"h\":\"线程池\",\"a\":\"线程池\"},\"2950\":{\"h\":\"为什么要用线程池？\",\"a\":\"为什么要用线程池\"},\"2951\":{\"t\":\"这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：\"},\"2952\":{\"t\":\"降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\"},\"2953\":{\"t\":\"提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。\"},\"2954\":{\"t\":\"提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\"},\"2955\":{\"h\":\"如何创建线程池？\",\"a\":\"如何创建线程池\"},\"2956\":{\"t\":\"方式一：通过ThreadPoolExecutor构造函数来创建（推荐）。\"},\"2957\":{\"t\":\"package com.young.多线程; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.Executors; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * @author 杨路恒 */ public class ThreadPool { public static void main(String[] args) { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1,2, 2, TimeUnit.MILLISECONDS,new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(), // new ThreadPoolExecutor.AbortPolicy() // new ThreadPoolExecutor.CallerRunsPolicy() // new ThreadPoolExecutor.DiscardOldestPolicy() new ThreadPoolExecutor.DiscardPolicy() ); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.shutdown(); } } \"},\"2958\":{\"t\":\"参数：\"},\"2959\":{\"t\":\"/** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @param threadFactory the factory to use when the executor * creates a new thread * @param handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached * @throws IllegalArgumentException if one of the following holds:<br> * {@code corePoolSize < 0}<br> * {@code keepAliveTime < 0}<br> * {@code maximumPoolSize <= 0}<br> * {@code maximumPoolSize < corePoolSize} * @throws NullPointerException if {@code workQueue} * or {@code threadFactory} or {@code handler} is null */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; } \"},\"2960\":{\"t\":\"ThreadPoolExecutor 3 个最重要的参数：\"},\"2961\":{\"t\":\"corePoolSize : 任务队列未达到队列容量时，最大可以同时运行的线程数量。\"},\"2962\":{\"t\":\"maximumPoolSize : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\"},\"2963\":{\"t\":\"workQueue: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"2964\":{\"t\":\"ThreadPoolExecutor其他常见参数 :\"},\"2965\":{\"t\":\"keepAliveTime:线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；\"},\"2966\":{\"t\":\"unit : keepAliveTime 参数的时间单位。\"},\"2967\":{\"t\":\"threadFactory :executor 创建新线程的时候会用到。\"},\"2968\":{\"t\":\"handler :饱和策略。关于饱和策略下面单独介绍一下。\"},\"2969\":{\"t\":\"下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）：\"},\"2970\":{\"t\":\"线程池各个参数的关系\"},\"2971\":{\"t\":\"线程池的饱和策略有哪些？\"},\"2972\":{\"t\":\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，ThreadPoolTaskExecutor 定义一些策略:\"},\"2973\":{\"t\":\"ThreadPoolExecutor.AbortPolicy： 抛出 RejectedExecutionException来拒绝新任务的处理。\"},\"2974\":{\"t\":\"ThreadPoolExecutor.CallerRunsPolicy： 调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。\"},\"2975\":{\"t\":\"ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。\"},\"2976\":{\"t\":\"ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。\"},\"2977\":{\"t\":\"举个例子：Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略来配置线程池的时候，默认使用的是 AbortPolicy。在这种饱和策略下，如果队列满了，ThreadPoolExecutor 将抛出 RejectedExecutionException 异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。如果不想丢弃任务的话，可以使用CallerRunsPolicy。CallerRunsPolicy 和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务\"},\"2978\":{\"t\":\"线程池常用的阻塞队列有哪些？\"},\"2979\":{\"t\":\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"2980\":{\"t\":\"不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。\"},\"2981\":{\"t\":\"容量为 Integer.MAX_VALUE 的 LinkedBlockingQueue（无界队列）：FixedThreadPool 和 SingleThreadExector 。由于队列永远不会被放满，因此FixedThreadPool最多只能创建核心线程数的线程。\"},\"2982\":{\"t\":\"SynchronousQueue（同步队列） ：CachedThreadPool 。SynchronousQueue 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，CachedThreadPool 的最大线程数是 Integer.MAX_VALUE ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。\"},\"2983\":{\"t\":\"DelayedWorkQueue（延迟阻塞队列）：ScheduledThreadPool 和 SingleThreadScheduledExecutor 。DelayedWorkQueue 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。DelayedWorkQueue 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 Integer.MAX_VALUE，所以最多只能创建核心线程数的线程。\"},\"2984\":{\"t\":\"线程池处理任务的流程了解吗？\"},\"2985\":{\"t\":\"如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。\"},\"2986\":{\"t\":\"如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。\"},\"2987\":{\"t\":\"如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。\"},\"2988\":{\"t\":\"如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用RejectedExecutionHandler.rejectedExecution()方法。\"},\"2989\":{\"t\":\"图解线程池实现原理\"},\"2990\":{\"t\":\"如何设定线程池的大小？\"},\"2991\":{\"t\":\"有一个简单并且适用面比较广的公式：\"},\"2992\":{\"t\":\"CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\"},\"2993\":{\"t\":\"I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\"},\"2994\":{\"t\":\"方式二：通过 Executor 框架的工具类 Executors 来创建。\"},\"2995\":{\"t\":\"我们可以创建多种类型的 ThreadPoolExecutor：\"},\"2996\":{\"t\":\"FixedThreadPool ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\"},\"2997\":{\"t\":\"SingleThreadExecutor： 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\"},\"2998\":{\"t\":\"CachedThreadPool： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。\"},\"2999\":{\"t\":\"ScheduledThreadPool ：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。\"},\"3000\":{\"h\":\"为什么不推荐使用内置线程池？\",\"a\":\"为什么不推荐使用内置线程池\"},\"3001\":{\"t\":\"在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\"},\"3002\":{\"t\":\"为什么呢？\"},\"3003\":{\"t\":\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\"},\"3004\":{\"t\":\"另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险\"},\"3005\":{\"t\":\"Executors 返回线程池对象的弊端如下(后文会详细介绍到)：\"},\"3006\":{\"t\":\"FixedThreadPool 和 SingleThreadExecutor ： 使用的是无界的 LinkedBlockingQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"3007\":{\"t\":\"CachedThreadPool ：使用的是同步队列 SynchronousQueue, 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。\"},\"3008\":{\"t\":\"ScheduledThreadPool 和 SingleThreadScheduledExecutor : 使用的无界的延迟阻塞队列DelayedWorkQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"3009\":{\"h\":\"如何动态修改线程池的参数？\",\"a\":\"如何动态修改线程池的参数\"},\"3010\":{\"t\":\"JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：\"},\"3011\":{\"t\":\"图片\"},\"3012\":{\"t\":\"重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。\"},\"3013\":{\"t\":\"问题一：线程池被创建后里面有线程吗？如果没有的话，你知道有什么方法对线程池进行预热吗？\"},\"3014\":{\"t\":\"线程池被创建后如果没有任务过来，里面是不会有线程的。如果需要预热的话可以调用下面的两个方法：\"},\"3015\":{\"t\":\"全部启动：\"},\"3016\":{\"t\":\"图片\"},\"3017\":{\"t\":\"仅启动一个：\"},\"3018\":{\"t\":\"图片\"},\"3019\":{\"t\":\"问题二：核心线程数会被回收吗？需要什么设置？\"},\"3020\":{\"t\":\"核心线程数默认是不会被回收的，如果需要回收核心线程数，需要调用下面的方法：\"},\"3021\":{\"t\":\"图片\"},\"3022\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html；https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651751537&idx=1&sn=c50a434302cc06797828782970da190e&chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c&scene=21#wechat_redirect\"},\"3023\":{\"h\":\"面试\"},\"3024\":{\"h\":\"面试：\",\"a\":\"面试\"},\"3025\":{\"h\":\"一、中科全安\",\"a\":\"一、中科全安\"},\"3026\":{\"h\":\"一面：HR面，态度算好的（5分钟）\",\"a\":\"一面-hr面-态度算好的-5分钟\"},\"3027\":{\"t\":\"1.介绍公司\"},\"3028\":{\"t\":\"2.问啥时候能来实习\"},\"3029\":{\"t\":\"3.问你能接受加班吗\"},\"3030\":{\"t\":\"4.问你的期望薪资多少\"},\"3031\":{\"t\":\"5.问我想听听你对加班什么看法\"},\"3032\":{\"t\":\"6.最后让明天面试，我说不行，能最晚啥时候，她说最晚周五下午，电话面试\"},\"3033\":{\"h\":\"二面：面试官狗叫（15分钟 ）\",\"a\":\"二面-面试官狗叫-15分钟\"},\"3034\":{\"t\":\"面试官的态度极其恶心，什么垃圾玩意，老子是来面试的，不是听狗叫的，就算老子啥都不会也不去你这个垃圾公司。\"},\"3035\":{\"t\":\"1.自我介绍，直接打断说只介绍自己会的，项目中的技术栈\"},\"3036\":{\"t\":\"2.问我熟悉哪些框架，我说Spring、Mysql，其他都是了解，熟悉的是Java基础和Mysql，他就非得问SpringBoot，离谱\"},\"3037\":{\"t\":\"3.问Kafka的分区、主题了解吗，我就是了解，然后他也说了你只是了解\"},\"3038\":{\"t\":\"4.问ES了解吗（我只是了解他是干啥的，其它都是API）\"},\"3039\":{\"t\":\"5.问SpringBoot异常怎么处理（这个紧张忘了，只是说在一个包里要继承一个异常的接口）\"},\"3040\":{\"t\":\"6.问SpringBoot的核心配置文件以及它们的区别\"},\"3041\":{\"t\":\"7.问SpringBoot的起步依赖starter有哪些以及作用（他说你了解的很少，我都说了了解Mysql、Spring，你他妈的非得问）\"},\"3042\":{\"t\":\"8.问SpringBoot 中的监视器是什么（我说不了解）\"},\"3043\":{\"t\":\"9.问Swagger用过么、它用来做什么\"},\"3044\":{\"t\":\"10.问什么是 WebSockets（我说只了解它是用来作为即时通讯的协议）\"},\"3045\":{\"t\":\"11.问什么是 FreeMarker 模板（这个离谱，说完他是干啥的以及插值表达式，他问还有呢？他妈的）\"},\"3046\":{\"t\":\"12.问C/S 、B/S模式\"},\"3047\":{\"t\":\"13.问String、StringBuilder、StringBuffer 的区别\"},\"3048\":{\"t\":\"14.问了MySQL的存储引擎\"},\"3049\":{\"t\":\"15.问了 InnoDB 和 MyISAM 的比较\"},\"3050\":{\"t\":\"16.问了建立索引的原则\"},\"3051\":{\"t\":\"17.问了三大范式\"},\"3052\":{\"t\":\"18.问了Jdbc的防止sql注入（我说不了解）\"},\"3053\":{\"t\":\"19.反问（我说实习生的日常工作安排是什么，他妈的开始狗叫，想打他）\"},\"3054\":{\"t\":\"20.最后问我啥时能来实习（老子不去）\"},\"3055\":{\"h\":\"二、联想\",\"a\":\"二、联想\"},\"3056\":{\"h\":\"一面：（16分钟）\",\"a\":\"一面-16分钟\"},\"3057\":{\"t\":\"1.说一下红黑树（吧啦吧啦，讲了下红黑树的特性、又扯到HashMap底层用到了红黑树、突然说到MySQLB+树用到了红黑树）\"},\"3058\":{\"t\":\"2.讲一下线程池（这个熟，线程池的7大参数以及具体用法）\"},\"3059\":{\"t\":\"3.讲一下为什么用线程池（两点原因）\"},\"3060\":{\"t\":\"4.讲一下线程池参数MaxSize满了你会怎么做（我说实现自定义处理策略，可以选择移除等待队列中的最不常用的线程）\"},\"3061\":{\"t\":\"5.看我熟悉Python（这里没听清发音，重复确认了好几遍哈哈哈哈哈哈哈），问我生成器用过没（我说是生成随机数吗，面试官说不是，是，还耐心给我解答了是用来循环遍历的）\"},\"3062\":{\"t\":\"5.项目拷打环节\"},\"3063\":{\"t\":\"1）讲一下你的项目经验（从项目的整体架构到具体功能实现细节都说了）\"},\"3064\":{\"t\":\"2）我说了做的一些优化（存储到阿里云OSS）\"},\"3065\":{\"t\":\"3）突然电话断了，在那我俩喂喂喂了好几声，面试官又给我打了过来，问我同步和异步怎么实现的（加@Async注解）\"},\"3066\":{\"t\":\"4）问异步调用后，做了些什么（第三方接口审核完后传来一个statusCode200，表示审核成功存储到数据库）\"},\"3067\":{\"t\":\"6.反问环节\"},\"3068\":{\"t\":\"1）实习生的日常工作安排（面试官说了早上9：30上班，下午6：30下班，八小时工作制，中午休息一小时）\"},\"3069\":{\"t\":\"2）技术栈是什么（面试官说这有Java和Python，你来就是Java）\"},\"3070\":{\"h\":\"三、中国邮政储蓄银行\",\"a\":\"三、中国邮政储蓄银行\"},\"3071\":{\"h\":\"一面：结构化面试+技术面（20分钟，五个面试官）\",\"a\":\"一面-结构化面试-技术面-20分钟-五个面试官\"},\"3072\":{\"t\":\"1.先做一个两分钟以内的自我介绍（对邮储的看法，对未来工作的看法）\"},\"3073\":{\"t\":\"2.对工作地点的看法\"},\"3074\":{\"t\":\"3.有没有参加过团体活动\"},\"3075\":{\"t\":\"4.数学建模比赛中遇到的最大困难\"},\"3076\":{\"t\":\"5.开始技术面试了，面试官说看你简历都是Java相关，讲一下Spring Cloud你用过的组件\"},\"3077\":{\"t\":\"6.ConcurrentHashMap为什么用红黑树\"},\"3078\":{\"t\":\"7.看你项目中用到了网关，是怎么实现的\"},\"3079\":{\"t\":\"8.都说CAS要比synchronized好，但是CAS也有自己的问题，你能说一下有哪些问题吗\"},\"3080\":{\"t\":\"9.另一个面试官问看你简历有高并发系统的东西，你有实际的项目经验吗（这个我说就是了解，实际项目是自学的，实际项目经验都是人工智能相关的）\"},\"3081\":{\"t\":\"10.最后女的HR问看你成绩这么好，没有保研吗\"},\"3082\":{\"t\":\"11.讲一下研究生的论文成果\"},\"3083\":{\"t\":\"12.研究生的专业成绩排名，有获得过奖学金吗\"},\"3084\":{\"t\":\"13.最后问有offer吗，方便说一下是哪个公司吗\"},\"3085\":{\"t\":\"另：\"},\"3086\":{\"t\":\"1.对工作地点的看法\"},\"3087\":{\"t\":\"2.CPU达到100%的时候你如何排查问题\"},\"3088\":{\"t\":\"3.新生代和老年代数据是如何流动的\"},\"3089\":{\"t\":\"4.Linux如何给文件权限\"},\"3090\":{\"t\":\"5.想从实习中收获什么\"},\"3091\":{\"t\":\"6.看你是院研副部长，如果负责的活动和实验室科研冲突了怎么平衡\"},\"3092\":{\"t\":\"7.你平常也这样扎头发吗\"},\"3093\":{\"h\":\"来看头条\"},\"3094\":{\"h\":\"十二：项目\",\"a\":\"十二-项目\"},\"3095\":{\"t\":\"开发技术：Spring Cloud + Spring Boot + MybatisPlus + Redis + mysql + Mongodb + Zookeeper + kafka + ElasticSearch + Docker + 第三方技术阿里云OSS;\"},\"3096\":{\"t\":\"项目背景：”来看头条“ 项目类似于今日头条，是一个新闻资讯类项目。该项目由用户端和自媒体端组成。在用户端，实现了用户通过app端登录功能、浏览文章功能、搜索文章功能、用户历史记录功能。在自媒体端，实现了自媒体管理员登录功能、发布文章功能、删除文章功能、上传素材功能、文章内容审核功能\"},\"3097\":{\"t\":\"**项目重难点：**网关搭建；文章详情静态化及存储；文章自动审核及延迟发布；分布式锁解决集群下的方法抢占执行；热点文章实时计算\"},\"3098\":{\"t\":\"技术栈的具体应用：\"},\"3099\":{\"t\":\"Spring-Cloud-Gateway : 微服务之前架设的网关服务，实现服务注册中的API请求路由，以及控制流速控制和熔断处理都是常用的架构手段，而这些功能Gateway天然支持\"},\"3100\":{\"t\":\"运用Spring Boot快速开发框架，构建项目工程；并结合Spring Cloud全家桶技术，实现app后端、自媒体等微服务。\"},\"3101\":{\"t\":\"运用Spring Cloud Alibaba Nacos作为项目中的注册中心和配置中心\"},\"3102\":{\"t\":\"运用mybatis-plus作为持久层提升开发效率\"},\"3103\":{\"t\":\"采用kafka作为消息服务中间件，把自媒体文章上下架放进消息队列；通过用户的行为（点赞、评论、喜欢）实时记录用户数据，通过kafkaStream流式计算最新的数据；与客户端系统消息通知\"},\"3104\":{\"t\":\"运用Redis缓存技术，实现热数据的计算，提升系统性能指标，同时作为消息中间件异步消费任务。\"},\"3105\":{\"t\":\"使用Mysql存储用户数据，以保证上层数据查询的高性能\"},\"3106\":{\"t\":\"使用Mongo存储用户历史记录数据，以保证用户热数据高扩展和高性能指标\"},\"3107\":{\"t\":\"运用AI技术，来完成系统自动化功能，以提升效率及节省成本。比如文章审核\"},\"3108\":{\"h\":\"优化：\",\"a\":\"优化\"},\"3109\":{\"h\":\"（1）优化一\",\"a\":\"_1-优化一\"},\"3110\":{\"t\":\"缺陷 ：写操作（定时刷新）比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。\"},\"3111\":{\"t\":\"解决办法：\"},\"3112\":{\"t\":\"数据库和缓存数据强一致场景 ：更新 db 的时候同样更新 cache，不过我们需要加一个分布式锁来保证更新 cache 的时候不存在线程安全问题。\"},\"3113\":{\"h\":\"（2）优化二\",\"a\":\"_2-优化二\"},\"3114\":{\"t\":\"缺陷：消费者丢失消息的情况\"},\"3115\":{\"t\":\"我们知道消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。偏移量（offset)表示 Consumer 当前消费到的 Partition(分区)的所在的位置。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。\"},\"3116\":{\"t\":\"当消费者拉取到了分区的某个消息之后，消费者会自动提交了 offset。自动提交的话会有一个问题，试想一下，当消费者刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。\"},\"3117\":{\"t\":\"解决办法:\"},\"3118\":{\"t\":\"我们手动关闭自动提交 offset，每次在真正消费完消息之后再自己手动提交 offset 。 细心的朋友一定会发现，这样会带来消息被重新消费的问题。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。\"},\"3119\":{\"h\":\"（3）优化三\",\"a\":\"_3-优化三\"},\"3120\":{\"t\":\"存储技术选型优化：\"},\"3121\":{\"t\":\"MinIO：\"},\"3122\":{\"t\":\"AliyunOSS：\"},\"3123\":{\"h\":\"（4）优化四\",\"a\":\"_4-优化四\"},\"3124\":{\"t\":\"缺陷：对于变量存在多线程并发竞争\"},\"3125\":{\"t\":\"解决办法：\"},\"3126\":{\"t\":\"为变量设置ThreadLocal。\"},\"3127\":{\"h\":\"身份验证怎么做的？\",\"a\":\"身份验证怎么做的\"},\"3128\":{\"t\":\"AuthorizedFilter + AppJwtUtil \"},\"3129\":{\"t\":\"用户向服务器发送用户名、密码以及验证码用于登陆系统。用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录。\"},\"3130\":{\"t\":\"如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT。\"},\"3131\":{\"t\":\"用户以后每次向后端发请求都在 Header 中带上这个 JWT ，再次进入网关开始访问，网关过滤器接收用户携带的TOKEN。\"},\"3132\":{\"t\":\"服务端检查 JWT 并从中获取用户相关信息。网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误。\"},\"3133\":{\"t\":\"两点建议：\"},\"3134\":{\"t\":\"建议将 JWT 存放在 localStorage 中，放在 Cookie 中会有 CSRF 风险。\"},\"3135\":{\"t\":\"请求服务端并携带 JWT 的常见做法是将其放在 HTTP Header 的 Authorization 字段中（Authorization: Bearer Token）。\"},\"3136\":{\"t\":\"乐观锁：\"},\"3137\":{\"t\":\"使用版本号。\"},\"3138\":{\"h\":\"网关搭建 ：\",\"a\":\"网关搭建\"},\"3139\":{\"t\":\"思路分析：\"},\"3140\":{\"t\":\"用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录\"},\"3141\":{\"t\":\"用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户\"},\"3142\":{\"t\":\"用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN\"},\"3143\":{\"t\":\"网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误\"},\"3144\":{\"t\":\"具体实现：\"},\"3145\":{\"t\":\"第一：\"},\"3146\":{\"t\":\"​ 在认证过滤器中需要用到jwt的解析，所以需要把工具类拷贝一份到网关微服务\"},\"3147\":{\"t\":\"第二：\"},\"3148\":{\"t\":\"​ 在网关微服务中新建全局过滤器\"},\"3149\":{\"h\":\"文章详情静态化及存储：\",\"a\":\"文章详情静态化及存储\"},\"3150\":{\"t\":\"文章详情静态化：\"},\"3151\":{\"t\":\"​ FreeMarker 是一款模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。\"},\"3152\":{\"t\":\"​ 模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。\"},\"3153\":{\"t\":\"存储：AliyunOSS\"},\"3154\":{\"t\":\"对象存储可提供更好的数据保护，加密、保护敏感数据。\"},\"3155\":{\"h\":\"文章自动审核及延迟发布：\",\"a\":\"文章自动审核及延迟发布\"},\"3156\":{\"t\":\"文章自动审核：\"},\"3157\":{\"t\":\"1 自媒体端发布文章后，开始审核文章（异步线程的方式审核文章，在自动审核的方法上加上@Async注解（标明要异步调用），在自媒体引导类中使用@EnableAsync注解开启异步调用）\"},\"3158\":{\"t\":\"2 审核的主要是审核文章的内容（文本内容和图片）\"},\"3159\":{\"t\":\"3 借助第三方提供的接口审核文本\"},\"3160\":{\"t\":\"4 借助第三方提供的接口审核图片，由于图片存储到OSS中，需要先下载才能审核\"},\"3161\":{\"t\":\"5 如果审核失败，则需要修改自媒体文章的状态，status:2 审核失败 status:3 转到人工审核\"},\"3162\":{\"t\":\"6 如果审核成功，则需要在文章微服务中创建app端需要的文章：\"},\"3163\":{\"t\":\"​ 在文章审核成功以后需要在app的article库中新增文章数据：\"},\"3164\":{\"t\":\"​ 保存文章信息 ap_article\"},\"3165\":{\"t\":\"​ 保存文章配置信息 ap_article_config\"},\"3166\":{\"t\":\"​ 保存文章内容 ap_article_content\"},\"3167\":{\"t\":\"延迟发布：\"},\"3168\":{\"t\":\"redis实现：zset数据类型的去重有序（分数排序）特点进行延迟。例如：时间戳作为score进行排序\"},\"3169\":{\"t\":\"实现思路：\"},\"3170\":{\"t\":\"问题思路：\"},\"3171\":{\"t\":\"1.为什么任务需要存储在数据库中？\"},\"3172\":{\"t\":\"延迟任务是一个通用的服务，任何需要延迟得任务都可以调用该服务，需要考虑数据持久化的问题，存储数据库中是一种数据安全的考虑。\"},\"3173\":{\"t\":\"2.为什么redis中使用两种数据类型，list和zset？\"},\"3174\":{\"t\":\"效率问题，算法的时间复杂度\"},\"3175\":{\"t\":\"3.在添加zset数据的时候，为什么不需要预加载？\"},\"3176\":{\"t\":\"任务模块是一个通用的模块，项目中任何需要延迟队列的地方，都可以调用这个接口，要考虑到数据量的问题，如果数据量特别大，为了防止阻塞，只需要把未来几分钟要执行的数据存入缓存即可。\"},\"3177\":{\"t\":\"实现：\"},\"3178\":{\"t\":\"延迟队列服务提供对外接口：提供远程的feign接口\"},\"3179\":{\"t\":\"发布文章集成添加延迟队列接口\"},\"3180\":{\"t\":\"修改发布文章代码：把之前的异步调用修改为调用延迟任务\"},\"3181\":{\"t\":\"消费任务进行审核文章\"},\"3182\":{\"t\":\"4.为什么选用redis作为消息队列？\"},\"3183\":{\"t\":\"把 Redis 当作队列来使用时，会面临的 2 个问题：\"},\"3184\":{\"t\":\"Redis 本身可能会丢数据；\"},\"3185\":{\"t\":\"面对消息挤压，内存资源会紧张；\"},\"3186\":{\"t\":\"所以，能不能将 Redis 作为消息队列来使用，关键看你的业务场景：\"},\"3187\":{\"t\":\"如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。\"},\"3188\":{\"t\":\"如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。\"},\"3189\":{\"h\":\"分布式锁解决集群下的方法抢占执行：\",\"a\":\"分布式锁解决集群下的方法抢占执行\"},\"3190\":{\"t\":\"问题描述：\"},\"3191\":{\"t\":\"启动两台heima-leadnews-schedule服务，每台服务都会去执行refresh定时任务方法\"},\"3192\":{\"t\":\"分布式锁：\"},\"3193\":{\"t\":\"控制分布式系统有序的去对共享资源进行操作，通过互斥来保证数据的一致性。\"},\"3194\":{\"t\":\"解决方案：\"},\"3195\":{\"t\":\"sexnx （SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。\"},\"3196\":{\"t\":\"这种加锁的思路是，如果 key 不存在则为 key 设置 value，如果 key 已存在则 SETNX 命令不做任何操作\"},\"3197\":{\"t\":\"客户端A请求服务器设置key的值，如果设置成功就表示加锁成功\"},\"3198\":{\"t\":\"客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败\"},\"3199\":{\"t\":\"客户端A执行代码完成，删除锁\"},\"3200\":{\"t\":\"客户端B在等待一段时间后再去请求设置key的值，设置成功\"},\"3201\":{\"t\":\"客户端B执行代码完成，删除锁\"},\"3202\":{\"h\":\"热点文章实时计算：\",\"a\":\"热点文章实时计算\"},\"3203\":{\"t\":\"思路说明：\"},\"3204\":{\"t\":\"待优化：\"},\"3205\":{\"t\":\"使用FastDFS作为静态资源存储器，在其上实现热静态资源缓存、淘汰等功能（待优化）\"},\"3206\":{\"t\":\"运用Hbase技术，存储系统中的冷数据，保证系统数据的可靠性（待优化）\"},\"3207\":{\"t\":\"运用ES搜索技术，对冷数据、文章数据建立索引，以保证冷数据、文章查询性能（待优化）\"},\"3208\":{\"t\":\"当用户 Logout 的话，JWT 也还有效。除非，我们在后端增加额外的处理逻辑比如将失效的 JWT 存储起来，后端先验证 JWT 是否有效再进行处理。\"},\"3209\":{\"h\":\"自我介绍：\",\"a\":\"自我介绍\"},\"3210\":{\"t\":\"面试官，您好，首先很感谢您给我的面试机会！我叫杨路恒，今年24岁，山东济宁人，就读于陕西师范大学，今年研二，软件工程专业，研究方向为知识图谱。大学时间我主要利用课外时间学习了 Java 以及 一些框架 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的粉丝数达到了3k+，访问量达到了44W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"3211\":{\"h\":\"项目中常用技术一：MD5\"},\"3212\":{\"h\":\"一、什么是MD5？\",\"a\":\"一、什么是md5\"},\"3213\":{\"t\":\"MD5（Message Digest Algorithm 5），消息摘要算法第五版。\"},\"3214\":{\"t\":\"消息摘要算法又称为哈希算法、散列算法，输出的消息摘要又称为哈希值、散列值。\"},\"3215\":{\"h\":\"二、MD5的特点\",\"a\":\"二、md5的特点\"},\"3216\":{\"t\":\"压缩性：MD5可以将任意长度的输入转化为128位长度的输出；\"},\"3217\":{\"t\":\"不可逆性：MD5是不可逆的，我们无法通过常规方式从MD5值倒推出它的原文；\"},\"3218\":{\"t\":\"抗修改性：对原文做一丁点儿改动，MD5值就会有巨大的变动，也就是说就算两个MD5值非常相似，你也不能想当然地认为它们俩对应的原文也非常相似。\"},\"3219\":{\"t\":\"容易计算：从原数据计算出MD5值很容易。\"},\"3220\":{\"h\":\"三、MD5的问题\",\"a\":\"三、md5的问题\"},\"3221\":{\"t\":\"因为MD5是不可逆的，所以MD5是安全的。但是2004年，山东大学的王小云教授在美国加州举办的密码学会议上宣布破解了MD5，其实并不是真正的破解，而是非常明显地加快了反向查询的速度，在当时计算机的计算能力下，利用她们的技术，可以在几个小时内就找到一个MD5值对应的原文。因为MD5可以被暴力破解，所以MD5不再是安全的了，对安全性要求较高的场合，不建议直接使用MD5。\"},\"3222\":{\"h\":\"四、MD5的应用场景\",\"a\":\"四、md5的应用场景\"},\"3223\":{\"h\":\"4.1 对密码加密\",\"a\":\"_4-1-对密码加密\"},\"3224\":{\"t\":\"MD5可以用来对密码加密，防止密码被窃听。\"},\"3225\":{\"t\":\"为什么要对密码加密\"},\"3226\":{\"t\":\"比如一个用户的用户名为18666666666，密码为123456，那么如果不对密码加密，客户端在注册或登录的时候，就是明文传输密码http://localhost:8080/hw/register|login?username=18666666666&password=123456，传输过程中一旦请求被截获，用户的密码就被泄漏了；再者服务器的数据库中也是明文存储密码\"},\"3227\":{\"t\":\"username\"},\"3228\":{\"t\":\"password\"},\"3229\":{\"t\":\"18666666666\"},\"3230\":{\"t\":\"123456\"},\"3231\":{\"t\":\"一旦数据库泄漏，用户的密码就被泄漏了。\"},\"3232\":{\"t\":\"而如果我们使用了MD5对密码加密，客户端在注册或登录的时候，就是密文传输密码http://localhost:8080/hw/register|login?username=18666666666&password=e10adc3949ba59abbe56e057f20f883e，传输过程中即便请求被截获，用户的密码也不会被泄漏；再者服务器的数据库中也是密文存储密码\"},\"3233\":{\"t\":\"username\"},\"3234\":{\"t\":\"password\"},\"3235\":{\"t\":\"18666666666\"},\"3236\":{\"t\":\"e10adc3949ba59abbe56e057f20f883e\"},\"3237\":{\"t\":\"就算数据库泄漏，用户的密码也不会被泄漏。\"},\"3238\":{\"t\":\"彩虹表\"},\"3239\":{\"t\":\"攻击者创建了一个叫彩虹表的东西，它是一个非常庞大的数据库，里面收集了所有常用的密码，以及这些密码对应的MD5值、SHA-1值等，现在主流的彩虹表记录数据约90万亿条，占用硬盘超过500TB。有了彩虹表，攻击者就可以通过穷举法反向查询出MD5值、SHA-1值等对应的原文，因此如果你的密码很不幸被搜集在彩虹表里，就可能被破解掉，这也是为什么很多场合我们输密码的时候，有字母数字下划线大小写等乱七八糟各种要求，目的就是尽量使得明文密码的复杂度增加一些，尽量使得明文密码及其MD5值、SHA-1值等不被收集在彩虹表里。\"},\"3240\":{\"t\":\"如果有一个预先计算好的常用口令和它们的 MD5的对照表（如下表），那么通过查表方式，时间上将大大减少，而这个表就叫做彩虹表：\"},\"3241\":{\"t\":\"常用口令\"},\"3242\":{\"t\":\"MD5\"},\"3243\":{\"t\":\"hello123\"},\"3244\":{\"t\":\"f30aa7a662c728b7407c54ae6bfd27d1\"},\"3245\":{\"t\":\"12345678\"},\"3246\":{\"t\":\"25d55ad283aa400af464c76d713c07ad\"},\"3247\":{\"t\":\"passw0rd\"},\"3248\":{\"t\":\"bed128365216c019988915ed3add75fb\"},\"3249\":{\"t\":\"19700101\"},\"3250\":{\"t\":\"570da6d5277a646f6552b8832012f5dc\"},\"3251\":{\"t\":\"…\"},\"3252\":{\"t\":\"…\"},\"3253\":{\"t\":\"20201231\"},\"3254\":{\"t\":\"6879c0ae9117b50074ce0a0d4c843060\"},\"3255\":{\"t\":\"加盐Sault\"},\"3256\":{\"t\":\"可见直接使用MD5加密是不安全的，但是我们可以加盐。加盐是指在密码的任意位置插入一些指定的字符串（即盐值salt），加盐的目的也是为了尽量增强明文密码的复杂度，尽量使得明文密码及其MD5值、SHA-1值等不被收集在彩虹表里。\"},\"3257\":{\"t\":\"加盐流程：\"},\"3258\":{\"t\":\"用户注册时\"},\"3259\":{\"t\":\"用户输入【账号】和【密码】（以及其他用户信息）；\"},\"3260\":{\"t\":\"系统为用户生成【Salt值】；\"},\"3261\":{\"t\":\"系统将【Salt值】和【用户密码】连接到一起；\"},\"3262\":{\"t\":\"对连接后的值进行散列，得到【Hash1值】；\"},\"3263\":{\"t\":\"将【Hash1值】和【Salt值】分别放到数据库中。\"},\"3264\":{\"t\":\"用户登录时\"},\"3265\":{\"t\":\"用户输入【账号】和【密码】；\"},\"3266\":{\"t\":\"系统通过用户名找到与之对应的【Hash值】和【Salt值】；\"},\"3267\":{\"t\":\"系统将【Salt值】和【用户输入的密码】连接到一起；\"},\"3268\":{\"t\":\"对连接后的值进行散列，得到【Hash2值】（注意是即时运算出来的值）；\"},\"3269\":{\"t\":\"比较【Hash1值】和【Hash2值】是否相等，相等则表示密码正确，否则表示密码错误。\"},\"3270\":{\"h\":\"4.2 生成数字签名\",\"a\":\"_4-2-生成数字签名\"},\"3271\":{\"t\":\"MD5可以用来生成数字签名，验证数据是否被篡改。\"},\"3272\":{\"h\":\"五、MD5是是对称加密还是非对称加密？\",\"a\":\"五、md5是是对称加密还是非对称加密\"},\"3273\":{\"t\":\"小羊在昨天2023.5.19下午等了将近十多分钟面试官才进面试，结果面试官问我MD5，我当时一脸懵逼，只听他说MD5是一个非对称加密算法，我当时信以为真。我就去总结MD5相关的知识，结果发现面试官说错了。话不多说，直接发车！\"},\"3274\":{\"t\":\"在计算机信息安全领域，经常应用到MD5、对称加密、非对称加密。在密码学的应用和研究中，DES、RSA、SHA等加密算法占据着重要的位置。随着人们对加密强度需求的不断提高，近期出现了很多加密算法，如AES、ECC等。那么，哪些算法是对称加密，哪些是非对称加密；对称加密和非对称加密有哪些优缺点，MD5是对称加密还是非对称加密？\"},\"3275\":{\"t\":\"我们先来了解一下加密算法的基础北背景。\"},\"3276\":{\"h\":\"5.1对称加密算法有哪些？\",\"a\":\"_5-1对称加密算法有哪些\"},\"3277\":{\"t\":\"对称密码算法又叫传统密码算法，也就是加密密钥能够从解密密钥中推算出来，反过来也成立。在大多数对称算法中，加密解密密钥是相同的。常见的对称加密算法有：DES、IDEA、AES、SM1和SM4。\"},\"3278\":{\"h\":\"5.2非对称加密算法有哪些？\",\"a\":\"_5-2非对称加密算法有哪些\"},\"3279\":{\"t\":\"非对称密钥也叫公开密钥加密,它是用两个数学相关的密钥对信息进行编码。在此系统中，其中一个密钥叫公开密钥，可随意发给期望同密钥持有者进行安全通信的人。公开密钥用于对信息加密。第二个密钥是私有密钥，属于密钥持有者，此人要仔细保存私有密钥。密钥持有者用私有密钥对收到的信息进行解密。常见的非对称加密算法有：RSA、ECC、SM2。\"},\"3280\":{\"h\":\"5.3MD5是对称加密还是非对称加密？\",\"a\":\"_5-3md5是对称加密还是非对称加密\"},\"3281\":{\"t\":\"这个问题有人吐槽过，面试官竟然问MD5是对称加密还是非对称加密？其实，MD5不是加密算法，md5实际上既不是对称算法，也不是非对称加密算法。它是消息摘要（安全散列）算法。\"},\"3282\":{\"t\":\"俺也要吐槽一下。\"},\"3283\":{\"h\":\"5.4对称加密和非对称加密有哪些优缺点？\",\"a\":\"_5-4对称加密和非对称加密有哪些优缺点\"},\"3284\":{\"t\":\"对称加密优点：速度快，对称性加密通常在消息发送方需要加密大量数据时使用，具有算法公开、计算量小、加密速度快、加密效率高的特点。对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性。\"},\"3285\":{\"t\":\"对称加密的缺点：密钥的管理和分发非常困难，不够安全。在数据传送前，发送方和接收方必须商定好秘钥，并且双方都要保存好密钥，如果一方的密钥被泄露，那么加密信息也就不安全了，安全性得不到保证。\"},\"3286\":{\"t\":\"非对称加密优点：安全性更高，公钥是公开的，秘钥是自己保存的，不需要将私钥给别人。\"},\"3287\":{\"t\":\"非对称加密缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。\"},\"3288\":{\"t\":\"参考：https://www.jianshu.com/p/38c93c677124、https://blog.csdn.net/m0_69916115/article/details/126145847、https://blog.csdn.net/qq_42992084/article/details/112252684\"},\"3289\":{\"h\":\"主要功能与配置演示\"},\"3290\":{\"h\":\"目录\",\"a\":\"目录\"},\"3291\":{\"t\":\"Markdown 展示\"},\"3292\":{\"t\":\"页面展示\"},\"3293\":{\"t\":\"禁用展示\"},\"3294\":{\"t\":\"加密展示\"},\"3295\":{\"h\":\"布局与功能禁用\"},\"3296\":{\"t\":\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\"},\"3297\":{\"t\":\"本页面就是一个示例，禁用了如下功能:\"},\"3298\":{\"t\":\"导航栏\"},\"3299\":{\"t\":\"侧边栏\"},\"3300\":{\"t\":\"路径导航\"},\"3301\":{\"t\":\"页面信息\"},\"3302\":{\"t\":\"贡献者\"},\"3303\":{\"t\":\"编辑此页链接\"},\"3304\":{\"t\":\"更新时间\"},\"3305\":{\"t\":\"上一篇/下一篇 链接\"},\"3306\":{\"t\":\"评论\"},\"3307\":{\"t\":\"页脚\"},\"3308\":{\"t\":\"返回顶部按钮\"},\"3309\":{\"h\":\"密码加密的文章\"},\"3310\":{\"t\":\"实际的文章内容。\"},\"3311\":{\"t\":\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\"},\"3312\":{\"t\":\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"},\"3313\":{\"h\":\"Markdown 展示\"},\"3314\":{\"t\":\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\"},\"3315\":{\"t\":\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"},\"3316\":{\"h\":\"Markdown 介绍\",\"a\":\"markdown-介绍\"},\"3317\":{\"t\":\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"},\"3318\":{\"h\":\"Markdown 配置\",\"a\":\"markdown-配置\"},\"3319\":{\"t\":\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\"},\"3320\":{\"t\":\"相关信息\"},\"3321\":{\"t\":\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"},\"3322\":{\"h\":\"Markdown 扩展\",\"a\":\"markdown-扩展\"},\"3323\":{\"t\":\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"},\"3324\":{\"h\":\"VuePress 扩展\",\"a\":\"vuepress-扩展\"},\"3325\":{\"t\":\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\"},\"3326\":{\"t\":\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"},\"3327\":{\"h\":\"主题扩展\",\"a\":\"主题扩展\"},\"3328\":{\"t\":\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"},\"3329\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"3330\":{\"t\":\"安全的在 Markdown 中使用 {{ variable }}。\"},\"3331\":{\"t\":\"自定义标题\"},\"3332\":{\"t\":\"信息容器，包含 代码 与 链接。\"},\"3333\":{\"t\":\"const a = 1; \"},\"3334\":{\"t\":\"自定义标题\"},\"3335\":{\"t\":\"提示容器\"},\"3336\":{\"t\":\"自定义标题\"},\"3337\":{\"t\":\"警告容器\"},\"3338\":{\"t\":\"自定义标题\"},\"3339\":{\"t\":\"危险容器\"},\"3340\":{\"t\":\"自定义标题\"},\"3341\":{\"t\":\"详情容器\"},\"3342\":{\"t\":\"查看详情\"},\"3343\":{\"h\":\"代码块\",\"a\":\"代码块\"},\"3344\":{\"t\":\"查看详情\"},\"3345\":{\"h\":\"上下角标\",\"a\":\"上下角标\"},\"3346\":{\"t\":\"19th H2O\"},\"3347\":{\"t\":\"查看详情\"},\"3348\":{\"h\":\"自定义对齐\",\"a\":\"自定义对齐\"},\"3349\":{\"t\":\"我是居中的\"},\"3350\":{\"t\":\"我在右对齐\"},\"3351\":{\"t\":\"查看详情\"},\"3352\":{\"h\":\"Attrs\",\"a\":\"attrs\"},\"3353\":{\"t\":\"一个拥有 ID 的 单词。\"},\"3354\":{\"t\":\"查看详情\"},\"3355\":{\"h\":\"脚注\",\"a\":\"脚注\"},\"3356\":{\"t\":\"此文字有脚注[1].\"},\"3357\":{\"t\":\"查看详情\"},\"3358\":{\"h\":\"标记\",\"a\":\"标记\"},\"3359\":{\"t\":\"你可以标记 重要的内容 。\"},\"3360\":{\"t\":\"查看详情\"},\"3361\":{\"h\":\"任务列表\",\"a\":\"任务列表\"},\"3362\":{\"t\":\" 计划 1\"},\"3363\":{\"t\":\" 计划 2\"},\"3364\":{\"t\":\"查看详情\"},\"3365\":{\"h\":\"图片增强\",\"a\":\"图片增强\"},\"3366\":{\"t\":\"支持为图片设置颜色模式和大小\"},\"3367\":{\"t\":\"查看详情\"},\"3368\":{\"h\":\"卡片\",\"a\":\"卡片\"},\"3369\":{\"t\":\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mrhope.site/logo.svg link: https://mrhope.site color: rgba(253, 230, 138, 0.15) \"},\"3370\":{\"t\":\"查看详情\"},\"3371\":{\"h\":\"图表\",\"a\":\"图表\"},\"3372\":{\"t\":\"查看详情\"},\"3373\":{\"h\":\"Echarts\",\"a\":\"echarts\"},\"3374\":{\"t\":\"查看详情\"},\"3375\":{\"h\":\"流程图\",\"a\":\"流程图\"},\"3376\":{\"t\":\"查看详情\"},\"3377\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"3378\":{\"t\":\"查看详情\"},\"3379\":{\"h\":\"Tex 语法\",\"a\":\"tex-语法\"},\"3380\":{\"t\":\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\"},\"3381\":{\"t\":\"查看详情\"},\"3382\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"3383\":{\"t\":\"Markdown 展示\"},\"3384\":{\"t\":\"页面展示\"},\"3385\":{\"t\":\"禁用展示\"},\"3386\":{\"t\":\"加密展示\"},\"3387\":{\"t\":\"查看详情\"},\"3388\":{\"h\":\"代码演示\",\"a\":\"代码演示\"},\"3389\":{\"t\":\"查看详情\"},\"3390\":{\"h\":\"样式化\",\"a\":\"样式化\"},\"3391\":{\"t\":\"向 Mr.Hope 捐赠一杯咖啡。 \"},\"3392\":{\"t\":\"查看详情\"},\"3393\":{\"h\":\"交互演示\",\"a\":\"交互演示\"},\"3394\":{\"t\":\"查看详情\"},\"3395\":{\"h\":\"Vue 交互演示\",\"a\":\"vue-交互演示\"},\"3396\":{\"t\":\"查看详情\"},\"3397\":{\"h\":\"幻灯片\",\"a\":\"幻灯片\"},\"3398\":{\"t\":\"查看详情\"},\"3399\":{\"t\":\"这是脚注内容 ↩︎\"},\"3400\":{\"h\":\"页面配置\"},\"3401\":{\"t\":\"more 注释之前的内容被视为文章摘要。\"},\"3402\":{\"h\":\"页面信息\",\"a\":\"页面信息\"},\"3403\":{\"t\":\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\"},\"3404\":{\"t\":\"作者设置为 Ms.Hope。\"},\"3405\":{\"t\":\"写作日期为 2020 年 1 月 1 日\"},\"3406\":{\"t\":\"分类为 “使用指南”\"},\"3407\":{\"t\":\"标签为 “页面配置” 和 “使用指南”\"},\"3408\":{\"h\":\"页面内容\",\"a\":\"页面内容\"},\"3409\":{\"t\":\"你可以自由在这里书写你的 Markdown。\"},\"3410\":{\"t\":\"提示\"},\"3411\":{\"t\":\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\"},\"3412\":{\"t\":\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"},\"3413\":{\"t\":\"主题包含了一个自定义徽章可以使用:\"},\"3414\":{\"t\":\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"},\"3415\":{\"h\":\"页面结构\",\"a\":\"页面结构\"},\"3416\":{\"t\":\"此页面应当包含:\"},\"3417\":{\"t\":\"路径导航\"},\"3418\":{\"t\":\"标题和页面信息\"},\"3419\":{\"t\":\"TOC (文章标题列表)\"},\"3420\":{\"t\":\"贡献者、更新时间等页面元信息\"},\"3421\":{\"t\":\"评论\"},\"3422\":{\"t\":\"导航栏\"},\"3423\":{\"t\":\"侧边栏\"},\"3424\":{\"t\":\"页脚\"},\"3425\":{\"t\":\"返回顶部按钮\"},\"3426\":{\"t\":\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"},\"3427\":{\"h\":\"指南\"},\"3428\":{\"h\":\"功能亮点\",\"a\":\"功能亮点\"},\"3429\":{\"h\":\"Bar\",\"a\":\"bar\"},\"3430\":{\"t\":\"baz\"},\"3431\":{\"t\":\"...\"},\"3432\":{\"h\":\"Foo\",\"a\":\"foo\"},\"3433\":{\"t\":\"ray\"},\"3434\":{\"t\":\"...\"},\"3435\":{\"h\":\"写在前面\"},\"3436\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"3437\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"3438\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"3439\":{\"h\":\"Bar 功能\"},\"3440\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"3441\":{\"t\":\"我们支持 bar 功能，...\"},\"3442\":{\"h\":\"详情\",\"a\":\"详情\"},\"3443\":{\"t\":\"baz\"},\"3444\":{\"t\":\"...\"},\"3445\":{\"h\":\"Baz\"},\"3446\":{\"t\":\"功能详情...\"},\"3447\":{\"h\":\"Foo 功能\"},\"3448\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"3449\":{\"t\":\"我们支持 foo 功能，...\"},\"3450\":{\"h\":\"详情\",\"a\":\"详情\"},\"3451\":{\"t\":\"ray\"},\"3452\":{\"t\":\"...\"},\"3453\":{\"h\":\"Ray\"},\"3454\":{\"t\":\"功能详情...\"},\"3455\":{\"h\":\"JVM\"},\"3456\":{\"h\":\"二：JVM\",\"a\":\"二-jvm\"},\"3457\":{\"h\":\"基本概念\",\"a\":\"基本概念\"},\"3458\":{\"h\":\"说一下 Jvm 的主要组成部分？及其作用？\",\"a\":\"说一下-jvm-的主要组成部分-及其作用\"},\"3459\":{\"t\":\"类加载器（ClassLoader）\"},\"3460\":{\"t\":\"运行时数据区（Runtime Data Area）\"},\"3461\":{\"t\":\"执行引擎（Execution Engine）\"},\"3462\":{\"t\":\"本地库接口（Native Interface）\"},\"3463\":{\"t\":\"首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\"},\"3464\":{\"h\":\"内存结构（运行时数据区）\",\"a\":\"内存结构-运行时数据区\"},\"3465\":{\"h\":\"垃圾回收机制\",\"a\":\"垃圾回收机制\"},\"3466\":{\"h\":\"如何判断对象是否可回收？\",\"a\":\"如何判断对象是否可回收\"},\"3467\":{\"h\":\"垃圾回收算法\",\"a\":\"垃圾回收算法\"},\"3468\":{\"h\":\"垃圾收集器\",\"a\":\"垃圾收集器\"},\"3469\":{\"h\":\"类加载机制\",\"a\":\"类加载机制\"},\"3470\":{\"h\":\"类的生命周期\",\"a\":\"类的生命周期\"},\"3471\":{\"t\":\"类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，前三个阶段可以统称为连接（Linking）。\"},\"3472\":{\"t\":\"这 7 个阶段的顺序如下图所示：\"},\"3473\":{\"t\":\"一个类的完整生命周期\"},\"3474\":{\"h\":\"类加载过程\",\"a\":\"类加载过程\"},\"3475\":{\"t\":\"Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？\"},\"3476\":{\"t\":\"系统加载 Class 类型的文件主要三步：加载->连接->初始化。连接过程又可分为三步：验证->准备->解析。\"},\"3477\":{\"t\":\"类加载过程\"},\"3478\":{\"h\":\"类加载器\",\"a\":\"类加载器\"},\"3479\":{\"h\":\"介绍：\",\"a\":\"介绍\"},\"3480\":{\"t\":\"类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。\"},\"3481\":{\"t\":\"每个 Java 类都有一个引用指向加载它的 ClassLoader。\"},\"3482\":{\"t\":\"数组类不是通过 ClassLoader 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。\"},\"3483\":{\"t\":\"简单来说，类加载器的主要作用就是加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。\"},\"3484\":{\"h\":\"类加载器加载规则\",\"a\":\"类加载器加载规则\"},\"3485\":{\"t\":\"JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。\"},\"3486\":{\"t\":\"对于已经加载的类会被放在 ClassLoader 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。\"},\"3487\":{\"h\":\"类加载器总结\",\"a\":\"类加载器总结\"},\"3488\":{\"t\":\"JVM 中内置了三个重要的 ClassLoader：\"},\"3489\":{\"t\":\"BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ %JAVA_HOME%/lib目录下的 rt.jar 、resources.jar 、charsets.jar等 jar 包和类）以及被 -Xbootclasspath参数指定的路径下的所有类。\"},\"3490\":{\"t\":\"ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类以及被 java.ext.dirs 系统变量所指定的路径下的所有类。\"},\"3491\":{\"t\":\"AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。\"},\"3492\":{\"t\":\"除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ .class 文件）进行加密，加载时再利用自定义的类加载器对其解密。\"},\"3493\":{\"t\":\"如果我们要自定义自己的类加载器，很明显需要继承 ClassLoader抽象类。\"},\"3494\":{\"t\":\"ClassLoader 类有两个关键的方法：\"},\"3495\":{\"t\":\"protected Class loadClass(String name, boolean resolve)：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resove 如果为 true，在加载时调用 resolveClass(Class<?> c) 方法解析该类。\"},\"3496\":{\"t\":\"protected Class findClass(String name)：根据类的二进制名称来查找类，默认实现是空方法。\"},\"3497\":{\"t\":\"官方 API 文档中写到：\"},\"3498\":{\"t\":\"Subclasses of ClassLoader are encouraged to override findClass(String name), rather than this method.\"},\"3499\":{\"t\":\"建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。\"},\"3500\":{\"t\":\"如果我们不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 loadClass() 方法。\"},\"3501\":{\"t\":\"类加载器层次关系图\"},\"3502\":{\"h\":\"双亲委派模型\",\"a\":\"双亲委派模型\"},\"3503\":{\"t\":\"类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载呢？这就需要提到双亲委派模型了。\"},\"3504\":{\"t\":\"ClassLoader 类使用委托模型来搜索类和资源。\"},\"3505\":{\"t\":\"双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。\"},\"3506\":{\"t\":\"ClassLoader 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。\"},\"3507\":{\"t\":\"下图展示的各种类加载器之间的层次关系被称为类加载器的“双亲委派模型(Parents Delegation Model)”。\"},\"3508\":{\"t\":\"类加载器层次关系图\"},\"3509\":{\"t\":\"双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在 java.lang.ClassLoader 的 loadClass() 中，相关代码如下所示。\"},\"3510\":{\"t\":\"protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { //首先，检查该类是否已经加载过 Class c = findLoadedClass(name); if (c == null) { //如果 c 为 null，则说明该类没有被加载过 long t0 = System.nanoTime(); try { if (parent != null) { //当父类的加载器不为空，则通过父类的loadClass来加载该类 c = parent.loadClass(name, false); } else { //当父类的加载器为空，则调用启动类加载器来加载该类 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { //非空父类的类加载器无法找到相应的类，则抛出异常 } if (c == null) { //当父类加载器无法加载时，则调用findClass方法来加载该类 //用户可通过覆写该方法，来自定义类加载器 long t1 = System.nanoTime(); c = findClass(name); //用于统计类加载器相关的信息 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { //对类进行link操作 resolveClass(c); } return c; } } \"},\"3511\":{\"t\":\"每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。\"},\"3512\":{\"t\":\"结合上面的源码，简单总结一下双亲委派模型的执行流程：\"},\"3513\":{\"t\":\"在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。\"},\"3514\":{\"t\":\"类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 BootstrapClassLoader 中。\"},\"3515\":{\"t\":\"只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 findClass() 方法来加载类）。\"},\"3516\":{\"t\":\"优点：\"},\"3517\":{\"t\":\"双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。\"},\"3518\":{\"h\":\"Java基础\"},\"3519\":{\"h\":\"一：Java基础\",\"a\":\"一-java基础\"},\"3520\":{\"t\":\"HashMap、HashTable：https://blog.csdn.net/yang13563758128/article/details/86655574?spm=1001.2014.3001.5502\"},\"3521\":{\"h\":\"异常\",\"a\":\"异常\"},\"3522\":{\"h\":\"Java异常类层次结构?\",\"a\":\"java异常类层次结构\"},\"3523\":{\"t\":\"Throwable是 Java 语言中所有错误与异常的超类。 \"},\"3524\":{\"t\":\"Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。\"},\"3525\":{\"t\":\"Exception 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。\"},\"3526\":{\"t\":\"运行时异常\"},\"3527\":{\"t\":\"都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。\"},\"3528\":{\"t\":\"运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。\"},\"3529\":{\"t\":\"非运行时异常 （编译异常）\"},\"3530\":{\"t\":\"是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。\"},\"3531\":{\"h\":\"可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）区别？\",\"a\":\"可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions-区别\"},\"3532\":{\"t\":\"可查异常（编译器要求必须处置的异常）：\"},\"3533\":{\"t\":\"正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。\"},\"3534\":{\"t\":\"除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。\"},\"3535\":{\"t\":\"不可查异常(编译器不要求强制处置的异常)\"},\"3536\":{\"t\":\"包括运行时异常（RuntimeException与其子类）和错误（Error）。\"},\"3537\":{\"h\":\"throw和throws的区别？\",\"a\":\"throw和throws的区别\"},\"3538\":{\"t\":\"异常的申明(throws)\"},\"3539\":{\"t\":\"在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：\"},\"3540\":{\"t\":\"public static void method() throws IOException, FileNotFoundException{ //something statements } \"},\"3541\":{\"t\":\"异常的抛出(throw)\"},\"3542\":{\"t\":\"如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：\"},\"3543\":{\"t\":\"public static double method(int value) { if(value == 0) { throw new ArithmeticException(\\\"参数不能为0\\\"); //抛出一个运行时异常 } return 5.0 / value; } \"},\"3544\":{\"h\":\"Java 7 的 try-with-resource?\",\"a\":\"java-7-的-try-with-resource\"},\"3545\":{\"t\":\"如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。\"},\"3546\":{\"t\":\"public void automaticallyCloseResource() { File file = new File(\\\"./tmp.txt\\\"); try (FileInputStream inputStream = new FileInputStream(file);) { // use the inputStream to read a file } catch (FileNotFoundException e) { log.error(e); } catch (IOException e) { log.error(e); } } \"},\"3547\":{\"h\":\"异常的底层？\",\"a\":\"异常的底层\"},\"3548\":{\"t\":\"提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。\"},\"3549\":{\"t\":\"public static void simpleTryCatch() { try { testNPE(); } catch (Exception e) { e.printStackTrace(); } } \"},\"3550\":{\"t\":\"使用javap来分析这段代码（需要先使用javac编译）：\"},\"3551\":{\"t\":\"//javap -c Main public static void simpleTryCatch(); Code: 0: invokestatic #3 // Method testNPE:()V 3: goto 11 6: astore_0 7: aload_0 8: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 11: return Exception table: from to target type 0 3 6 Class java/lang/Exception \"},\"3552\":{\"t\":\"看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。\"},\"3553\":{\"t\":\"异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下\"},\"3554\":{\"t\":\"from 可能发生异常的起始点\"},\"3555\":{\"t\":\"to 可能发生异常的结束点\"},\"3556\":{\"t\":\"target 上述from和to之前发生异常后的异常处理者的位置\"},\"3557\":{\"t\":\"type 异常处理者处理的异常的类信息\"},\"3558\":{\"h\":\"反射\",\"a\":\"反射\"},\"3559\":{\"h\":\"什么是反射机制?\",\"a\":\"什么是反射机制\"},\"3560\":{\"t\":\"JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制。\"},\"3561\":{\"t\":\"直接new对象就叫正射。\"},\"3562\":{\"t\":\"如下:\"},\"3563\":{\"t\":\"Map<String, String> map = new HashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"3564\":{\"t\":\"那反射是啥？我先不说反射是啥，概念啥的太虚幻我就不说了，把你绕蒙你这篇文章就白看了，直接举例吧\"},\"3565\":{\"t\":\"接着看上面的正射，如果哪天你发现用LinkedHashMap效果更好，然后你修改代码：\"},\"3566\":{\"t\":\"Map<String, String> map = new LinkedHashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"3567\":{\"t\":\"改完了编译运行没有bug然而过了两天你发现用LinkedHashMap会有隐患，还是得改回去用HashMap，成年人的崩溃如此简单，但是聪明的你想到可以加个判断，根据传入的条件来决定用HashMap还是LinkedHashMap，于是：\"},\"3568\":{\"t\":\"public Map<String, String> getMap(String param) { Map<String, String> map = null; if (param.equals(\\\"HashMap\\\")) { map = new HashMap<>(); } else if (param.equals(\\\"LinkedHashMap\\\")) { map = new LinkedHashMap<>(); } return map; } \"},\"3569\":{\"t\":\"大功告成，这么难的逻辑都被你实现了，然后你得用TreeMap，你又要改代码。\"},\"3570\":{\"t\":\"有没有一种办法可以让你不修改代码呢，这时候反射就派上用场了。\"},\"3571\":{\"t\":\"概念：反射是Java的一种机制，让我们可以在运行时获取类的信息\"},\"3572\":{\"t\":\"作用：通过反射，我们可以在程序运行时动态创建对象，还能获取到类的所有信息，比如它的属性、构造器、方法、注解等；\"},\"3573\":{\"t\":\"直接举例吧：\"},\"3574\":{\"t\":\"public Map<String, String> getMap(String className) { Class clazz = Class.forName(className); Constructor constructor = clazz.getConstructor(); return (Map<String, String>) constructor.newInstance(); } \"},\"3575\":{\"t\":\"这时候不管你需要什么Map，只要实现了Map接口，你都能通过getMap获得，只需要传入对应Map的全限定名，例如java.util.HashMap / java.util.LinkedHashMap。\"},\"3576\":{\"t\":\"java中反射的用法非常非常多，常见的有以下这几个：\"},\"3577\":{\"t\":\"一、在运行时获取一个类的 Class 对象 二、在运行时构造一个类的实例化对象 三、在运行时获取一个类的所有信息：变量、方法、构造器、注解 \"},\"3578\":{\"h\":\"一、获取class对象\",\"a\":\"一、获取class对象\"},\"3579\":{\"t\":\"三种方法 1、类名.class：这种获取方式只有在编译前已经声明了该类的类型才能获取到 Class 对象\"},\"3580\":{\"t\":\"Class<HashMap> hashMap= HashMap.class; \"},\"3581\":{\"t\":\"2、实例.getClass()：通过实例化对象获取该实例的 Class 对象\"},\"3582\":{\"t\":\"Map<String, String> hashMap = new HashMap<>(); Class<? extends Map> hashMapClass = hashMap.getClass(); \"},\"3583\":{\"t\":\"3、Class.forName(“类的全限定名”)：通过类的全限定名获取该类的 Class 对象\"},\"3584\":{\"t\":\"Class<?> hashMap= Class.forName(\\\"java.util.HashMap\\\"); \"},\"3585\":{\"t\":\"拿到 Class对象就可以对它为所欲为了：调用它的方法、获取属性、获取类信息，总之它在你面前就没有隐私了，好羞羞，嘤~。\"},\"3586\":{\"h\":\"二、构造类的实例化对象\",\"a\":\"二、构造类的实例化对象\"},\"3587\":{\"t\":\"通过反射构造一个类的实例方式有2种： 1、Class 对象调用newInstance()方法\"},\"3588\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); HashMap hashMapInstance = (HashMap) hashMapClass.newInstance(); \"},\"3589\":{\"t\":\"注意：即使 HashMap已经显式定义了构造方法，通过 newInstance() 创建的实例中，所有属性值都是对应类型的初始值，因为 newInstance() 构造实例会调用默认无参构造器。\"},\"3590\":{\"t\":\"2、Constructor 构造器调用newInstance()方法\"},\"3591\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); Constructor<?> constructor = hashMapClass.getConstructor(); constructor.setAccessible(true); HashMap newInstance = (HashMap) constructor.newInstance(); \"},\"3592\":{\"t\":\"通过 getConstructor(Object… paramTypes) 方法指定获取指定参数类型的 Constructor， Constructor 调用 newInstance(Object… paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。\"},\"3593\":{\"t\":\"通过Class对象调用 newInstance() 会走默认无参构造方法，如果想通过显式构造方法构造实例，需要提前从Class中调用getConstructor()方法获取对应的构造器，通过构造器去实例化对象。\"},\"3594\":{\"h\":\"三、获取类的所有信息\",\"a\":\"三、获取类的所有信息\"},\"3595\":{\"t\":\"1、获取类中的变量（Field）\"},\"3596\":{\"t\":\"Field[] getFields()：获取类中所有被public修饰的所有变量 Field getField(String name)：根据变量名获取类中的一个变量，该变量必须被public修饰 Field[] getDeclaredFields()：获取类中所有的变量，但无法获取继承下来的变量 Field getDeclaredField(String name)：根据姓名获取类中的某个变量，无法获取继承下来的变量 \"},\"3597\":{\"t\":\"2、获取类中的方法（Method）\"},\"3598\":{\"t\":\"Method[] getMethods()：获取类中被public修饰的所有方法 Method getMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，该方法必须被public修饰 Method[] getDeclaredMethods()：获取所有方法，但无法获取继承下来的方法 Method getDeclaredMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，无法获取继承下来的方法 \"},\"3599\":{\"t\":\"3、获取类的构造器（Constructor）\"},\"3600\":{\"t\":\"Constuctor[] getConstructors()：获取类中所有被public修饰的构造器 Constructor getConstructor(Class…<?> paramTypes)：根据参数类型获取类中某个构造器，该构造器必须被public修饰 Constructor[] getDeclaredConstructors()：获取类中所有构造器 Constructor getDeclaredConstructor(class…<?> paramTypes)：根据参数类型获取对应的构造器 \"},\"3601\":{\"t\":\"反射的应用场景\"},\"3602\":{\"t\":\"1、Spring 实例化对象：当程序启动时，Spring 会读取配置文件applicationContext.xml并解析出里面所有的标签实例化到IOC容器中。 2、反射 + 工厂模式：通过反射消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，反射可以使得程序更加健壮。 3、JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的驱动类时用到反射加载驱动类 \"},\"3603\":{\"t\":\"参考：https://blog.csdn.net/qq_33709582/article/details/113550163\"},\"3604\":{\"h\":\"List\",\"a\":\"list\"},\"3605\":{\"h\":\"Set\",\"a\":\"set\"},\"3606\":{\"h\":\"Map\",\"a\":\"map\"},\"3607\":{\"h\":\"为什么JDK1.8中HashMap从头插入改成尾插入\",\"a\":\"为什么jdk1-8中hashmap从头插入改成尾插入\"},\"3608\":{\"t\":\"原文链接：https://blog.csdn.net/qq_35590459/article/details/108988011\"},\"3609\":{\"t\":\"JDK1.7中扩容时，每个元素的rehash之后，都会插入到新数组对应索引的链表头，所以这就导致原链表顺序为A->B->C，扩容之后，rehash之后的链表可能为C->B->A，元素的顺序发生了变化。在并发场景下，扩容时可能会出现循环链表的情况。而JDK1.8从头插入改成尾插入元素的顺序不变，避免出现循环链表的情况。\"},\"3610\":{\"h\":\"为什么JDK1.8采用红黑树存储 Hash 冲突的元素？\",\"a\":\"为什么jdk1-8采用红黑树存储hash冲突的元素\"},\"3611\":{\"t\":\"红黑树本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为O(log n)。能够加快检索速率。\"},\"3612\":{\"h\":\"为什么在长度小于8时使用链表，不一直使用红黑树？\",\"a\":\"为什么在长度小于8时使用链表-不一直使用红黑树\"},\"3613\":{\"t\":\"桶中元素的插入只会在hash冲突时发生，而hash冲突发生的概率较小，一直维护一个红黑树比链表耗费资源更多，在桶中元素量较小时没有这个必要。\"},\"3614\":{\"h\":\"为什么要使用红黑树而不使用AVL树？\",\"a\":\"为什么要使用红黑树而不使用avl树\"},\"3615\":{\"t\":\"红黑树与AVLl树，在检索的时候效率差不多，都是通过平衡来二分查找。但红黑树不像avl树一样追求绝对的平衡，红黑树允许局部很少的不完全平衡，这样对于效率影响不大，但省去了很多没有必要的调平衡操作，avl树调平衡有时候代价较大，所以效率不如红黑树。\"},\"3616\":{\"h\":\"为什么数组容量必须是2次幂？\",\"a\":\"为什么数组容量必须是2次幂\"},\"3617\":{\"t\":\"索引计算公式为i = (n - 1) & hash，如果n为2次幂，那么n-1的低位就全是1，哈希值进行与操作时可以保证低位的值不变，从而保证分布均匀，效果等同于hash%n，但是位运算比取余运算要高效的多。\"},\"3618\":{\"h\":\"为什么单链表转为红黑树要求桶内的元素个数大于8？\",\"a\":\"为什么单链表转为红黑树要求桶内的元素个数大于8\"},\"3619\":{\"t\":\"当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，而一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件。\"},\"3620\":{\"t\":\"同理，少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗，而选择8作为临界值，是因理想情况下一个bin中元素个数达到6的概率是0.00001316，达到7的概率为0.00000094，二者跨度较大，可以减小树和链表之间频繁转化的可能性。\"},\"3621\":{\"h\":\"数据结构\",\"a\":\"数据结构\"},\"3622\":{\"h\":\"数组\",\"a\":\"数组\"},\"3623\":{\"h\":\"链表\",\"a\":\"链表\"},\"3624\":{\"h\":\"栈\",\"a\":\"栈\"},\"3625\":{\"h\":\"队列\",\"a\":\"队列\"},\"3626\":{\"h\":\"二叉树\",\"a\":\"二叉树\"},\"3627\":{\"h\":\"红黑树\",\"a\":\"红黑树\"},\"3628\":{\"h\":\"1.简介\",\"a\":\"_1-简介\"},\"3629\":{\"t\":\"红黑树是一种自平衡的二叉查找树，是一种高效的查找树。红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作。\"},\"3630\":{\"h\":\"2.为什么需要红黑树？\",\"a\":\"_2-为什么需要红黑树\"},\"3631\":{\"t\":\"对于二叉搜索树，如果插入的数据是随机的，那么它就是接近平衡的二叉树，平衡的二叉树，它的操作效率（查询，插入，删除）效率较高，时间复杂度是O（logN）。但是可能会出现一种极端的情况，那就是插入的数据是有序的（递增或者递减），那么所有的节点都会在根节点的右侧或左侧，此时，二叉搜索树就变为了一个链表，它的操作效率就降低了，时间复杂度为O(N)，所以可以认为二叉搜索树的时间复杂度介于O（logN）和O(N)之间，视情况而定。那么为了应对这种极端情况，红黑树就出现了，它是具备了某些特性的二叉搜索树，能解决非平衡树问题，红黑树是一种接近平衡的二叉树（说它是接近平衡因为它并没有像AVL树的平衡因子的概念，它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构，进而提升整体的性能，并没有严格的卡定某个平衡因子来维持绝对平衡）。\"},\"3632\":{\"h\":\"3.红黑树的特性\",\"a\":\"_3-红黑树的特性\"},\"3633\":{\"t\":\"首先，红黑树是一个二叉搜索树，它在每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK；通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡（最短路径就是全黑节点，最长路径就是一个红节点一个黑节点，当从根节点到叶子节点的路径上黑色节点相同时，最长路径刚好是最短路径的两倍）。它同时满足以下特性：\"},\"3634\":{\"t\":\"节点是红色或黑色\"},\"3635\":{\"t\":\"根是黑色\"},\"3636\":{\"t\":\"叶子节点（外部节点，空节点）都是**黑色，**这里的叶子节点指的是最底层的空节点（外部节点），下图中的那些null节点才是叶子节点，null节点的父节点在红黑树里不将其看作叶子节点\"},\"3637\":{\"t\":\"红色节点的子节点都是黑色；\"},\"3638\":{\"t\":\"红色节点的父节点都是黑色；\"},\"3639\":{\"t\":\"从根节点到叶子节点的所有路径上不能有 2 个连续的红色节点\"},\"3640\":{\"t\":\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\"},\"3641\":{\"t\":\"img\"},\"3642\":{\"h\":\"4.红黑树的效率\",\"a\":\"_4-红黑树的效率\"},\"3643\":{\"t\":\"红黑树的查找，插入和删除操作，时间复杂度都是O(logN)。\"},\"3644\":{\"t\":\"查找操作时，它和普通的相对平衡的二叉搜索树的效率相同，都是通过相同的方式来查找的，没有用到红黑树特有的特性。\"},\"3645\":{\"t\":\"但如果插入的时候是有序数据，那么红黑树的查询效率就比二叉搜索树要高了，因为此时二叉搜索树不是平衡树，它的时间复杂度O(N)。\"},\"3646\":{\"t\":\"插入和删除操作时，由于红黑树的每次操作平均要旋转一次和变换颜色，所以它比普通的二叉搜索树效率要低一点，不过时间复杂度仍然是O(logN)。总之，红黑树的优点就是对有序数据的查询操作不会慢到O(N)的时间复杂度。\"},\"3647\":{\"t\":\"红黑树和AVL树的比较：\"},\"3648\":{\"t\":\"AVL树的时间复杂度虽然优于红黑树，但是对于现在的计算机，cpu太快，可以忽略性能差异\"},\"3649\":{\"t\":\"红黑树的插入删除比AVL树更便于控制操作\"},\"3650\":{\"t\":\"红黑树整体性能略优于AVL树（红黑树旋转情况少于AVL树）\"},\"3651\":{\"h\":\"哈希表结构\",\"a\":\"哈希表结构\"},\"3652\":{\"h\":\"常见的设计模式\",\"a\":\"常见的设计模式\"},\"3653\":{\"h\":\"软件设计原则有哪些？\",\"a\":\"软件设计原则有哪些\"},\"3654\":{\"h\":\"什么是设计模式？\",\"a\":\"什么是设计模式\"},\"3655\":{\"t\":\"设计模式（Design pattern）代表了最佳的实践，通常被有经验的⾯向对象的软件开发⼈员所采⽤。设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案。这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的。\"},\"3656\":{\"t\":\"分为三大类：\"},\"3657\":{\"t\":\"创建型： 在创建对象的同时隐藏创建逻辑，不使⽤ new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括⼯⼚/抽象⼯⼚/单例/建造者/原型模式。 结构型： 通过类和接⼝间的继承和引⽤实现创建复杂结构的对象。包括适配器/桥接模式/过滤器/组合/装饰器/外观/享元/代理模式。 行为型： 通过类之间不同通信⽅式实现不同⾏为。包括责任链/命名/解释器/迭代器/中介者/备忘录/观察者/状态/策略/模板/访问者模式。\"},\"3658\":{\"h\":\"单例模式\",\"a\":\"单例模式\"},\"3659\":{\"t\":\"单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，构造⽅法必须是私有的、由自己创建⼀个静态变量存储实例，对外提供⼀个静态公有方法获取实例。\"},\"3660\":{\"t\":\"双重检查锁（DCL， 即 double-checked locking） 实现代码如下：\"},\"3661\":{\"t\":\"public class Singleton { // 1、私有化构造⽅法 private Singleton() { } // 2、定义⼀个静态变量指向⾃⼰类型 private volatile static Singleton instance; // 3、对外提供⼀个公共的⽅法获取实例 public static Singleton getInstance() { // 第⼀重检查是否为 null if (instance == null) { // 使⽤ synchronized 加锁 synchronized (Singleton.class) { // 第⼆重检查是否为 null if (instance == null) { // new 关键字创建对象不是原⼦操作 instance = new Singleton(); } } } return instance; } } \"},\"3662\":{\"t\":\"优点：懒加载，线程安全，效率较⾼缺点：实现较复杂 这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单例。关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返回已创建的单例对象。\"},\"3663\":{\"h\":\"工厂模式\",\"a\":\"工厂模式\"},\"3664\":{\"h\":\"说⼀说简单⼯⼚模式：\",\"a\":\"说一说简单工厂模式\"},\"3665\":{\"t\":\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数。\"},\"3666\":{\"t\":\"适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较复杂。\"},\"3667\":{\"t\":\"Spring 中的 BeanFactory 使⽤简单⼯⼚模式，根据传⼊⼀个唯⼀的标识来获得 Bean 对象。\"},\"3668\":{\"h\":\"⼯⼚⽅法模式了解吗：\",\"a\":\"工厂方法模式了解吗\"},\"3669\":{\"t\":\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐，⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚。\"},\"3670\":{\"t\":\"也就是定义⼀个抽象⼯⼚，其定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。这样不⽤通过指定类型来创建对象了。\"},\"3671\":{\"h\":\"抽象⼯⼚模式了解吗：\",\"a\":\"抽象工厂模式了解吗\"},\"3672\":{\"t\":\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象，都只是针对⼀类产品，如果要⽣成另⼀种产品，就⽐较难办了！抽象⼯⼚模式通过在 AbstarctFactory 中增加创建产品的接⼝，并在具体⼦⼯⼚中实现新加产品的创建，当然前提是⼦⼯⼚⽀持⽣产该产品。否则继承的这个接⼝可以什么也不⼲。\"},\"3673\":{\"h\":\"装饰器模式\",\"a\":\"装饰器模式\"},\"3674\":{\"h\":\"代理模式\",\"a\":\"代理模式\"},\"3675\":{\"h\":\"什么是代理模式？\",\"a\":\"什么是代理模式\"},\"3676\":{\"t\":\"代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制，是⼀种结构性模式。\"},\"3677\":{\"h\":\"静态代理和动态代理的区别：\",\"a\":\"静态代理和动态代理的区别\"},\"3678\":{\"t\":\"灵活性 ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。另外，静态代理中，接⼝⼀旦新增加⽅法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！\"},\"3679\":{\"t\":\"JVM 层⾯ ：静态代理在编译时就将接⼝、实现类、代理类这些都变成了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节码，并加载到 JVM 中的。\"},\"3680\":{\"h\":\"静态代理：\",\"a\":\"静态代理\"},\"3681\":{\"t\":\"静态代理中，我们对目标对象的每个方法的增强都是手动完成的（*后面会具体演示代码*），非常不灵活（*比如接口一旦新增加方法，目标对象和代理对象都要进行修改*）且麻烦(*需要对每个目标类都单独写一个代理类*）。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\"},\"3682\":{\"t\":\"上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\"},\"3683\":{\"h\":\"动态代理：\",\"a\":\"动态代理\"},\"3684\":{\"t\":\"相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。\"},\"3685\":{\"t\":\"从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\"},\"3686\":{\"t\":\"说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\"},\"3687\":{\"t\":\"动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\"},\"3688\":{\"t\":\"就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\"},\"3689\":{\"h\":\"JDK 动态代理机制\",\"a\":\"jdk-动态代理机制\"},\"3690\":{\"t\":\"在 Java 动态代理机制中 InvocationHandler 接口和 Proxy 类是核心。\"},\"3691\":{\"t\":\"Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\"},\"3692\":{\"t\":\" public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException { ...... } 这个方法一共有 3 个参数： loader :类加载器，用于加载代理对象。 interfaces : 被代理类实现的一些接口； h : 实现了 InvocationHandler 接口的对象； \"},\"3693\":{\"t\":\"要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\"},\"3694\":{\"t\":\"public interface InvocationHandler { /** * 当你使用代理对象调用方法的时候实际会调用到这个方法 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; } invoke() 方法有下面三个参数： proxy :动态生成的代理类 method : 与代理类对象调用的方法相对应 args : 当前 method 方法的参数 \"},\"3695\":{\"t\":\"也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\"},\"3696\":{\"h\":\"CGLIB 动态代理机制\",\"a\":\"cglib-动态代理机制\"},\"3697\":{\"t\":\"JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。\"},\"3698\":{\"t\":\"为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\"},\"3699\":{\"t\":\"CGLIBCode Generation Library)允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\"},\"3700\":{\"t\":\"在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\"},\"3701\":{\"t\":\"你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\"},\"3702\":{\"t\":\"public interface MethodInterceptor extends Callback{ // 拦截被代理类中的方法 public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy) throws Throwable; } obj : 被代理的对象（需要增强的对象） method : 被拦截的方法（需要增强的方法） args : 方法入参 proxy : 用于调用原始方法 \"},\"3703\":{\"t\":\"你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\"},\"3704\":{\"h\":\"JDK 动态代理和 CGLIB 动态代理对比：\",\"a\":\"jdk-动态代理和-cglib-动态代理对比\"},\"3705\":{\"t\":\"JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\"},\"3706\":{\"t\":\"就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\"},\"3707\":{\"h\":\"框架\"},\"3708\":{\"h\":\"四：Java高级：Spring、SpringMVC、Spring Boot、MyBatis\",\"a\":\"四-java高级-spring、springmvc、spring-boot、mybatis\"},\"3709\":{\"h\":\"AOP和IOC概念\",\"a\":\"aop和ioc概念\"},\"3710\":{\"t\":\"AOP：AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。\"},\"3711\":{\"t\":\"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理。\"},\"3712\":{\"t\":\"IOC： 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。\"},\"3713\":{\"t\":\"为什么叫控制反转？\"},\"3714\":{\"t\":\"控制 ：指的是对象创建（实例化、管理）的权力\"},\"3715\":{\"t\":\"反转 ：控制权交给外部环境（Spring 框架、IoC 容器）\"},\"3716\":{\"h\":\"Bean的生命周期\",\"a\":\"bean的生命周期\"},\"3717\":{\"h\":\"MVC的基本流程\",\"a\":\"mvc的基本流程\"},\"3718\":{\"t\":\"简单来说：客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler -> HandlerAdapter 会根据 Handler 来调用真正的处理器来处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象 -> 前端控制器 DispatcherServlet 渲染数据（Model）-> 将得到视图对象返回给用户。\"},\"3719\":{\"t\":\"image-20210608002334025\"},\"3720\":{\"t\":\"上图用于辅助理解，面试时可用下列 8 步描述 SpringMVC 运行流程：\"},\"3721\":{\"t\":\"用户向服务器发送请求，请求被 Spring 前端控制Servelt DispatcherServlet 捕获；\"},\"3722\":{\"t\":\"DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 对象的形式返回；\"},\"3723\":{\"t\":\"DispatcherServlet 根据获得的 Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得 HandlerAdapter 后，此时将开始执行拦截器的 preHandler(…)方法）\"},\"3724\":{\"t\":\"提取 Request 中的模型数据，填充 Handler 入参，开始执行Handler（Controller)。在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\"},\"3725\":{\"t\":\"（1）HttpMessageConveter：将请求消息（如：Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息；\"},\"3726\":{\"t\":\"（2）数据转换：对请求消息进行数据转换。如：String 转换成 Integer、Double 等；\"},\"3727\":{\"t\":\"（3）数据格式化：对请求消息进行数据格式化。如：将字符串转换成格式化数字或格式化日期等；\"},\"3728\":{\"t\":\"（4）数据验证：验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中;\"},\"3729\":{\"t\":\"5.Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象；\"},\"3730\":{\"t\":\"6.根据返回的 ModelAndView，选择一个适合的 ViewResolver（必须是已经注册到 Spring 容器中的 ViewResolver)返回给DispatcherServlet；\"},\"3731\":{\"t\":\"7.ViewResolver 结合 Model 和 View，来渲染视图；\"},\"3732\":{\"t\":\"8.将渲染结果返回给客户端。\"},\"3733\":{\"h\":\"Spring的设计模式\",\"a\":\"spring的设计模式\"},\"3734\":{\"t\":\"工厂设计模式 : Spring 使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象；\"},\"3735\":{\"t\":\"代理设计模式 : Spring AOP 功能的实现；\"},\"3736\":{\"t\":\"单例设计模式 : Spring 中的 Bean 默认都是单例的；\"},\"3737\":{\"t\":\"模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式；\"},\"3738\":{\"t\":\"包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源；\"},\"3739\":{\"t\":\"观察者模式：Spring 事件驱动模型就是观察者模式很经典的一个应用；\"},\"3740\":{\"t\":\"适配器模式：Spring AOP 的增强或通知(Advice)使用到了适配器模式、SpringMVC 中也是用到了适配器模式适配 Controller。\"},\"3741\":{\"h\":\"Spring事务机制\",\"a\":\"spring事务机制\"},\"3742\":{\"h\":\"谈谈你对 Spring 中的事务的理解？\",\"a\":\"谈谈你对-spring-中的事务的理解\"},\"3743\":{\"t\":\"事务是逻辑上的一组操作，要么都执行，要么都不执行。\"},\"3744\":{\"t\":\"事务特性\"},\"3745\":{\"t\":\"原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\"},\"3746\":{\"t\":\"一致性：执行事务前后，数据保持一致；\"},\"3747\":{\"t\":\"隔离性：并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\"},\"3748\":{\"t\":\"持久性: 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\"},\"3749\":{\"t\":\"Spring 事务管理接口\"},\"3750\":{\"t\":\"PlatformTransactionManager：（平台）事务管理器；\"},\"3751\":{\"t\":\"TransactionDefinition：事务定义信息（事务隔离级别、传播行为、超时、只读、回滚规则）；\"},\"3752\":{\"t\":\"TransactionStatus：事务运行状态；\"},\"3753\":{\"t\":\"所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。\"},\"3754\":{\"h\":\"Spring 中的事务隔离级别？\",\"a\":\"spring-中的事务隔离级别\"},\"3755\":{\"t\":\"TransactionDefinition 接口中定义了五个表示隔离级别的常量：\"},\"3756\":{\"t\":\"TransactionDefinition.ISOLATION_DEFAULT：使用后端数据库默认的隔离级别，MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED 隔离级别；\"},\"3757\":{\"t\":\"TransactionDefinition.ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读；\"},\"3758\":{\"t\":\"TransactionDefinition.ISOLATION_READ_COMMITTED：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生；\"},\"3759\":{\"t\":\"TransactionDefinition.ISOLATION_REPEATABLE_READ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生；\"},\"3760\":{\"t\":\"TransactionDefinition.ISOLATION_SERIALIZABLE：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\"},\"3761\":{\"h\":\"Spring 中的事物传播行为？\",\"a\":\"spring-中的事物传播行为\"},\"3762\":{\"t\":\"事务传播行为是为了解决业务层方法之间互相调用的事务问题。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在 TransactionDefinition 定义中包括了如下几个表示传播行为的常量：\"},\"3763\":{\"t\":\"支持当前事务的情况：\"},\"3764\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务；\"},\"3765\":{\"t\":\"TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行；\"},\"3766\":{\"t\":\"TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\"},\"3767\":{\"t\":\"不支持当前事务的情况：\"},\"3768\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起；\"},\"3769\":{\"t\":\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\"},\"3770\":{\"t\":\"TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\"},\"3771\":{\"t\":\"其他情况：\"},\"3772\":{\"t\":\"TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 TransactionDefinition.PROPAGATION_REQUIRED。\"},\"3773\":{\"h\":\"Spring如何解决循环依赖问题？\",\"a\":\"spring如何解决循环依赖问题\"},\"3774\":{\"t\":\"了解问题的本质再分析问题，往往更利于对问题有更深入的了解和研究。所以我们在分析 Spring 关于循环依赖的源码之前，先要了解下什么是循环依赖。\"},\"3775\":{\"t\":\"1. 循环依赖的概念\"},\"3776\":{\"t\":\"img\"},\"3777\":{\"t\":\"循环依赖分为三种，自身依赖于自身、互相循环依赖、多组循环依赖。\"},\"3778\":{\"t\":\"但无论循环依赖的数量有多少，循环依赖的本质是一样的。就是你的完整创建依赖于我，而我的完整创建也依赖于你，但我们互相没法解耦，最终导致依赖创建失败。\"},\"3779\":{\"t\":\"所以 Spring 提供了除了构造函数注入和原型注入外的，setter循环依赖注入解决方案。那么我们也可以先来尝试下这样的依赖，如果是我们自己处理的话该怎么解决。\"},\"3780\":{\"t\":\"2. 问题体现\"},\"3781\":{\"t\":\"public class ABTest { public static void main(String[] args) { new ClazzA(); } } class ClazzA { private ClazzB b = new ClazzB(); } class ClazzB { private ClazzA a = new ClazzA(); } \"},\"3782\":{\"t\":\"3.解决方案\"},\"3783\":{\"t\":\"整个解决循环依赖的核心内容，A 创建后填充属性时依赖 B，那么就去创建 B，在创建 B 开始填充时发现依赖于 A，但此时 A 这个半成品对象已经存放在缓存到singletonObjects 中了，所以 B 可以正常创建，在通过递归把 A 也创建完整了。\"},\"3784\":{\"t\":\"4.Spring解决\"},\"3785\":{\"t\":\"（1）一级缓存能解决吗？\"},\"3786\":{\"t\":\"img\"},\"3787\":{\"t\":\"其实只有一级缓存并不是不能解决循环依赖，就像我们自己做的例子一样。\"},\"3788\":{\"t\":\"但是在 Spring 中如果像我们例子里那么处理，就会变得非常麻烦，而且也可能会出现 NPE 问题。\"},\"3789\":{\"t\":\"所以如图按照 Spring 中代码处理的流程，我们去分析一级缓存这样存放成品 Bean 的流程中，是不能解决循环依赖的问题的。因为 A 的成品创建依赖于 B，B的成品创建又依赖于 A，当需要补全B的属性时 A 还是没有创建完，所以会出现死循环。\"},\"3790\":{\"t\":\"（2） 二级缓存能解决吗？\"},\"3791\":{\"t\":\"img\"},\"3792\":{\"t\":\"有了二级缓存其实这个事处理起来就容易了，一个缓存用于存放成品对象，另外一个缓存用于存放半成品对象。\"},\"3793\":{\"t\":\"A 在创建半成品对象后存放到缓存中，接下来补充 A 对象中依赖 B 的属性。\"},\"3794\":{\"t\":\"B 继续创建，创建的半成品同样放到缓存中，在补充对象的 A 属性时，可以从半成品缓存中获取，现在 B 就是一个完整对象了，而接下来像是递归操作一样 A 也是一个完整对象了。\"},\"3795\":{\"t\":\"（3） 三级缓存解决什么？\"},\"3796\":{\"t\":\"img\"},\"3797\":{\"t\":\"有了二级缓存都能解决 Spring 依赖了，怎么要有三级缓存呢。其实我们在前面分析源码时也提到过，三级缓存主要是解决 Spring AOP 的特性。AOP 本身就是对方法的增强，是 ObjectFactory<?> 类型的 lambda 表达式，而 Spring 的原则又不希望将此类类型的 Bean 前置创建，所以要存放到三级缓存中处理。\"},\"3798\":{\"t\":\"其实整体处理过程类似，唯独是 B 在填充属性 A 时，先查询成品缓存、再查半成品缓存，最后在看看有没有单例工程类在三级缓存中。最终获取到以后调用 getObject 方法返回代理引用或者原始引用。\"},\"3799\":{\"t\":\"至此也就解决了 Spring AOP 所带来的三级缓存问题。本章节涉及到的 AOP 依赖有源码例子，可以进行调试\"},\"3800\":{\"t\":\"（4）总结\"},\"3801\":{\"t\":\"回顾本文基本以实际操作的例子开始，引导大家对循环依赖有一个整体的认识，也对它的解决方案可以上手的例子，这样对后续的关于 Spring 对循环依赖的解决也就不会那么陌生了。\"},\"3802\":{\"t\":\"通篇全文下来大家也可以看到，三级缓存并不是非必须不可，只不过在满足 Spring 自身创建的原则下，是必须的。如果你可以下载 Spring 源码对这部分代码进行改动下，提前创建 AOP 对象保存到缓存中，那么二级缓存一样可以解决循环依赖问题。\"},\"3803\":{\"h\":\"Spring Boot自动配置原理\",\"a\":\"spring-boot自动配置原理\"},\"3804\":{\"t\":\"在Spring程序main方法中，添加@SpringBootApplication或者@EnableAutoConfiguration会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建的Spring容器中的bean。Spring Boot 通过@EnableAutoConfiguration开启自动装配，通过 SpringFactoriesLoader 最终加载META-INF/spring.factories中的自动配置类实现自动装配，自动配置类其实就是通过@Conditional按需加载的配置类，想要其生效必须引入spring-boot-starter-xxx包实现起步依赖。\"},\"3805\":{\"t\":\"第 1 步: 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true，可在 application.properties 或 application.yml 中设置 \"},\"3806\":{\"t\":\"img\"},\"3807\":{\"t\":\"第 2 步 ： 用于获取EnableAutoConfiguration注解中的 exclude 和 excludeName。 \"},\"3808\":{\"t\":\"img\"},\"3809\":{\"t\":\"第 3 步： 获取需要自动装配的所有配置类，读取META-INF/spring.factories： spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories \"},\"3810\":{\"t\":\"img\"},\"3811\":{\"t\":\"从下图可以看到这个文件的配置内容都被我们读取到了。XXXAutoConfiguration的作用就是按需加载组件。 不光是这个依赖下的META-INF/spring.factories被读取到，所有 Spring Boot Starter 下的META-INF/spring.factories都会被读取到。 \"},\"3812\":{\"t\":\"img\"},\"3813\":{\"t\":\"参考：https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html#autoconfigurationimportselector-加载自动装配类\"},\"3814\":{\"h\":\"Spring Boot 加载配置文件的优先级了解么？\",\"a\":\"spring-boot-加载配置文件的优先级了解么\"},\"3815\":{\"t\":\"项目启动后扫描顺序：\"},\"3816\":{\"t\":\"1）先去项目根目录找config文件夹下找配置文件件 2）再去根目录下找配置文件 3）去resources下找cofnig文件夹下找配置文件 4）去resources下找配置文件\"},\"3817\":{\"t\":\"在这里插入图片描述\"},\"3818\":{\"h\":\"如何使用 Spring Boot 实现全局异常处理？\",\"a\":\"如何使用-spring-boot-实现全局异常处理\"},\"3819\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485568&idx=2&sn=c5ba880fd0c5d82e39531fa42cb036ac&chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&token=1729829670&lang=zh_CN#rd\"},\"3820\":{\"t\":\"使用 @ControllerAdvice 和 @ExceptionHandler 处理全局异常\"},\"3821\":{\"t\":\"@ExceptionHandler 处理 Controller 级别的异常\"},\"3822\":{\"t\":\"例子：\"},\"3823\":{\"t\":\"CustomException： public class CustomException extends RuntimeException { private AppHttpCodeEnum appHttpCodeEnum; public CustomException(AppHttpCodeEnum appHttpCodeEnum){ this.appHttpCodeEnum = appHttpCodeEnum; } public AppHttpCodeEnum getAppHttpCodeEnum() { return appHttpCodeEnum; } } \"},\"3824\":{\"t\":\"ExceptionCatch： @ControllerAdvice //控制器增强类 @Slf4j public class ExceptionCatch { /** * 处理不可控异常 * @param e * @return */ @ExceptionHandler(Exception.class) @ResponseBody public ResponseResult exception(Exception e){ e.printStackTrace(); log.error(\\\"catch exception:{}\\\",e.getMessage()); return ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR); } /** * 处理可控异常 自定义异常 * @param e * @return */ @ExceptionHandler(CustomException.class) @ResponseBody public ResponseResult exception(CustomException e){ log.error(\\\"catch exception:{}\\\",e); return ResponseResult.errorResult(e.getAppHttpCodeEnum()); } } \"},\"3825\":{\"h\":\"核心配置文件\",\"a\":\"核心配置文件\"},\"3826\":{\"t\":\"SpringBoot的核心配置文件是application和bootstrap配置文件。\"},\"3827\":{\"t\":\"application配置文件这个容易理解，主要用于Spring Boot项目的自动化配置。\"},\"3828\":{\"t\":\"bootstrap配置文件有以下几个应用场景：\"},\"3829\":{\"t\":\"使用Spring Cloud Config配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；\"},\"3830\":{\"t\":\"一些固定的不能被覆盖的属性；\"},\"3831\":{\"t\":\"一些加密/解密的场景；\"},\"3832\":{\"h\":\"实现热部署的方式\",\"a\":\"实现热部署的方式\"},\"3833\":{\"t\":\"这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。\"},\"3834\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> </dependency> \"},\"3835\":{\"h\":\"监视器和监听器\",\"a\":\"监视器和监听器\"},\"3836\":{\"h\":\"监听器\",\"a\":\"监听器\"},\"3837\":{\"t\":\"监听器也叫listener，是servlet的监听器，可以用于监听web应用程序中某些对象的创建、销毁、增加、修改、删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化时，服务器自动调用监听器对象中的方法，常用于系统加载时进行信息初始化，统计在线人数和在线用户，统计网站的访问量。 配置监听器的方法：\"},\"3838\":{\"t\":\"通过@Component把监听器加入Spring容器中管理;\"},\"3839\":{\"t\":\"在application.properties中添加context.listener.classes配置;\"},\"3840\":{\"t\":\"在方法上加@EventListener注解;\"},\"3841\":{\"h\":\"监控器\",\"a\":\"监控器\"},\"3842\":{\"t\":\"actuator\"},\"3843\":{\"t\":\" 这是springboot程序的监控系统，可以实现健康检查，info信息等。在使用之前需要引入`spring-boot-starter-actuator`，并做简单的配置即可。 引入依赖并编写好配置之后，启动项目，访问http://localhost:8080/actuator \"},\"3844\":{\"t\":\"Spring Boot自带监控组件—Actuator，它可以帮助实现对程序内部运行情况的监控。Actuator轻松实现应用程序的监控治理，比如健康状况、审计、统计和HTTP追踪、Bean加载情况、环境变量、日志信息、线程信息等。 Actuator的核心是端点（Endpoint），它用来监视、提供应用程序的信息，Spring Boot提供的spring-boot-actuator组件中已经内置了非常多的Endpoint（health、info、beans、metrics、httptrace、shutdown等），每个端点都可以启用和禁用。\"},\"3845\":{\"h\":\"什么是Spring Boot Starter？有哪些常用的？\",\"a\":\"什么是spring-boot-starter-有哪些常用的\"},\"3846\":{\"t\":\"和自动配置一样，Spring Boot Starter的目的也是简化配置，而Spring Boot Starter解决的是依赖管理配置复杂的问题，有了它，当我需要构建一个Web应用程序时，不必再遍历所有的依赖包，一个一个地添加到项目的依赖管理中，而是只需要一个配置spring-boot-starter-web。\"},\"3847\":{\"t\":\"常用的：\"},\"3848\":{\"t\":\"spring-boot-starter-web - Web 和 RESTful 应用程序\"},\"3849\":{\"t\":\"spring-boot-starter-test - 单元测试和集成测试\"},\"3850\":{\"t\":\"spring-boot-starter-parent有什么作用？\"},\"3851\":{\"t\":\"我们知道，新建一个SpringBoot项目，默认都是有parent的，这个parent就是spring-boot-starter-parent，spring-boot-starter-parent主要有如下作用：\"},\"3852\":{\"t\":\"定义了Java编译版本\"},\"3853\":{\"t\":\"使用UTF-8格式编码\"},\"3854\":{\"t\":\"继承自spring-boor-dependencies，这里面定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号\"},\"3855\":{\"t\":\"执行打包操作的配置\"},\"3856\":{\"t\":\"自动化的资源过滤\"},\"3857\":{\"t\":\"自动化的插件配置\"},\"3858\":{\"h\":\"Spring Boot四大核心组件\",\"a\":\"spring-boot四大核心组件\"},\"3859\":{\"t\":\"四大组件分别是：starter， autoconfigure, CLI 以及actuator。\"},\"3860\":{\"t\":\"autoconfigure在我们的开发中并不会被感知，因为它是存在与我们的starter中的。所以我们的每个starter都是依赖autoconfigure的。\"},\"3861\":{\"t\":\"Spring Boot CLI是一个命令行使用Spring Boot的客户端工具；主要功能如下：\"},\"3862\":{\"t\":\"运行groovy脚本 => 官网2.1\"},\"3863\":{\"t\":\"打包groovy文件到jar => 官网2.3\"},\"3864\":{\"t\":\"初始化Spring Boot项目 => 官网2.4\"},\"3865\":{\"t\":\"其他\"},\"3866\":{\"t\":\"actuator是Spring Boot的监控插件，本身提供了很多接口可以获取当前项目的各项运行状态指标。\"},\"3867\":{\"h\":\"MyBatis Dao接口原理\",\"a\":\"mybatis-dao接口原理\"},\"3868\":{\"h\":\"MyBatis分页原理\",\"a\":\"mybatis分页原理\"},\"3869\":{\"t\":\"img\"},\"3870\":{\"t\":\"总结一下：\"},\"3871\":{\"t\":\"通过page对象作为分页依据\"},\"3872\":{\"t\":\"通过count来进行查询总条数的限制\"},\"3873\":{\"t\":\"对原sql通过limit来进行分页的效果\"},\"3874\":{\"t\":\"参考：https://blog.csdn.net/xiaolegeaizy/article/details/108461284\"},\"3875\":{\"h\":\"MyBatis 是如何进行分页的？分页插件的原理是什么？\",\"a\":\"mybatis-是如何进行分页的-分页插件的原理是什么\"},\"3876\":{\"t\":\"答：\"},\"3877\":{\"t\":\"(1) MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；\"},\"3878\":{\"t\":\"(2) 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能；\"},\"3879\":{\"t\":\"(3) 也可以使用分页插件来完成物理分页。\"},\"3880\":{\"t\":\"分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。\"},\"3881\":{\"t\":\"举例： select _ from student ，拦截 sql 后重写为： select t._ from （select \\\\* from student）t limit 0，10 \"},\"3882\":{\"t\":\"MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 invoke() 方法，当然，只会拦截那些指定需要拦截的方法。\"},\"3883\":{\"t\":\"实现 MyBatis 的 Interceptor 接口并复写 intercept() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，在配置文件中配置编写的插件。\"},\"3884\":{\"h\":\"MyBatis缓存机制(一级缓存、二级缓存、三级缓存)\",\"a\":\"mybatis缓存机制-一级缓存、二级缓存、三级缓存\"},\"3885\":{\"h\":\"一级缓存：\",\"a\":\"一级缓存\"},\"3886\":{\"t\":\"作用域是同一个 SqlSession，在同一个 sqlSession 中两次执行相同的 sql 语句， 第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取,从而提高查询效率。当一个 sqlSession 结束后该 sqlSession 中的 一级缓存也就不存在了。Mybatis 默认开启一级缓存。 一级缓存内部存储使用一个 HashMap，key 为 hashCode+sqlId+Sql 语句。value 为 从查询出来映射生成的 java 对象 sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。\"},\"3887\":{\"h\":\"二级缓存：\",\"a\":\"二级缓存\"},\"3888\":{\"t\":\"是多个 SqlSession 共享的，其作用域是 mapper 的同一个 namespace，不同 的 sqlSession 两次执行相同 namespace 下的 sql 语句且向 sql 中传递参数也相同即最终执行 相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从 缓存中获取数据将不再从数据库查询，从而提高查询效率。Mybatis 默认没有开启二级缓存 需要在 setting 全局参数中配置开启二级缓存。\"},\"3889\":{\"t\":\"在yml中添加以下代码：\"},\"3890\":{\"t\":\"在这里插入图片描述\"},\"3891\":{\"t\":\"然后在对应的mapper.xml里面加入配置：\"},\"3892\":{\"t\":\"在这里插入图片描述\"},\"3893\":{\"t\":\"注意：开启二级缓存后，对应的pojo一定要实现Serializable，否则在序列化的时候会报错。 readOnly：是否只读 。 值为true时，mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为了加快获取速度，直接会将数据在缓存中的引用交给用户，不安全，但速度快。 值为false时，mybatis觉得获取的数据可能会被修改，mybatis会利用序列化&反序列化的技术克隆一份新的数据给你，安全，但速度慢。\"},\"3894\":{\"h\":\"三级缓存：\",\"a\":\"三级缓存\"},\"3895\":{\"t\":\"Mybatis 的一级缓存与二级缓存 只适用于单体项目，在分布式服务或者微服务架构下 都会出现数据不一致问题。所以Mybatis 为我们提供了自定义缓存 我们可以集成很多三方中间件来做缓存 这里就那Redis来说一下。\"},\"3896\":{\"t\":\"在这里插入图片描述\"},\"3897\":{\"h\":\"总结：\",\"a\":\"总结\"},\"3898\":{\"t\":\"一级缓存的作用域是一个sqlsession内；二级缓存作用域是针对mapper进行缓存；\"},\"3899\":{\"t\":\"一级缓存是默认开启的；二级缓存需要手动配置；\"},\"3900\":{\"t\":\"一级缓存sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。sqlSession.close()后一级缓存也没有了。但是销毁sqlSession后会将里面的缓存存到二级缓存中；\"},\"3901\":{\"t\":\"二级缓存cache中readonly属性如果为false 那么相应的pojo类必须实现Serializable接口 并且其缓存查询到的对象都是通过序列化或者反序列化克隆的，所以对象之间两两不相等；\"},\"3902\":{\"t\":\"二级缓存的生命周期和应用同步，它是用来解决一级缓存不能跨会话共享数据的问题，范围是namespace级别的，可以被多个会话共享(只要是同一个接口的相同方法，都可以进行共享)。\"},\"3903\":{\"t\":\"只要没有显式地设置cacheEnabled为false，都会使用CachingExector装饰基本的执行器(SIMPLE、REUSE、BATCH)。 二级缓存总是默认开启的，但是每个Mapper的二级开关是默认关闭的。\"},\"3904\":{\"t\":\"二级缓存进行增删改操作也会刷新二级缓存，导致二级缓存失效；\"},\"3905\":{\"t\":\"二级缓存的执行流程：\"},\"3906\":{\"t\":\"在这里插入图片描述\"},\"3907\":{\"t\":\"参考：https://blog.csdn.net/weixin_45161172/article/details/129526131\"},\"3908\":{\"h\":\"Linux常用命令\"},\"3909\":{\"h\":\"常用的命令\",\"a\":\"常用的命令\"},\"3910\":{\"h\":\"内核\",\"a\":\"内核\"},\"3911\":{\"h\":\"基本组件\",\"a\":\"基本组件\"},\"3912\":{\"h\":\"进程间通信方式\",\"a\":\"进程间通信方式\"},\"3913\":{\"h\":\"目录结构\",\"a\":\"目录结构\"},\"3914\":{\"t\":\"Linux 使用一种称为目录树的层次结构来组织文件和目录。目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。每个目录可以包含文件和其他子目录。结构层次鲜明，就像一棵倒立的树。\"},\"3915\":{\"h\":\"场景问题\"},\"3916\":{\"h\":\"缓存一致性解决\",\"a\":\"缓存一致性解决\"},\"3917\":{\"h\":\"4G数据找系统记录(大数据题)\",\"a\":\"_4g数据找系统记录-大数据题\"},\"3918\":{\"h\":\"很多短任务线程，选择 synchronized 还是 lock（2022-04-11 携程）\",\"a\":\"很多短任务线程-选择-synchronized-还是-lock-2022-04-11-携程\"},\"3919\":{\"t\":\"锁竞争小时，synchronized和lock效率没差，偏向模式下（单线程读写）甚至高于lock，但是并发量上升时锁撤销会大幅影响性能，稳定自适应轻量级锁状态下，线程接近交替运行，或者说短任务线程多，基本一样，因为都是自旋，大量任务并发竞争时，随着任务量的增大，synchronized的效率会远小于lock，因为重量级锁会频繁切换内核态与用户态；大量长任务，只能重量级锁。\"},\"3920\":{\"h\":\"多个人给一个主播打赏怎么设计？（2022-6-3 58同城）\",\"a\":\"多个人给一个主播打赏怎么设计-2022-6-3-58同城\"},\"3921\":{\"t\":\"我说是一个高并发写的操作，对一个记录频繁写，分批操作，比如 10 个记录 操作一次。他说这个方案可以 但是有 100 个记录 怎么去做一个一个操作呢？我说如果在一个进程可以 分多个线程分批。他说还是不够快 我们是用的 MQ 多个消费者 一个打赏就发一个消息\"},\"3922\":{\"h\":\"怎么实现一个点赞功能？\",\"a\":\"怎么实现一个点赞功能\"},\"3923\":{\"t\":\"主要的流程解释下：先查询数据库改用户是否进行点赞，如果已经点赞则抛出异常，如果没有则new一个对象来一个一个Set，然后将已点赞的信息存入redis中，相反，取消点赞的操作就是删除redis中的数据即可，然后通过Dubbo调用API来完成保存操作，因为我这里是还要获取点赞数和评论数啥的，所以会对动态表进行更新操作。\"},\"3924\":{\"h\":\"比如下单清空购物车，你是如何设计的？\",\"a\":\"比如下单清空购物车-你是如何设计的\"},\"3925\":{\"t\":\"生产者（订单系统）产生消息，发送一条半事务消息到MQ服务器\"},\"3926\":{\"t\":\"MQ收到消息后，将消息持久化到存储系统，这条消息的状态是待发送状态。\"},\"3927\":{\"t\":\"MQ服务器返回ACK确认到生产者，此时MQ不会触发消息推送事件\"},\"3928\":{\"t\":\"生产者执行本地事务（订单创建成功，提交事务消息）\"},\"3929\":{\"t\":\"如果本地事务执行成功，即commit执行结果到MQ服务器；如果执行失败，发送rollback。\"},\"3930\":{\"t\":\"如果是commit正常提交，MQ服务器更新消息状态为可发送；如果是rollback，即删除消息。\"},\"3931\":{\"t\":\"如果消息状态更新为可发送，则MQ服务器会push消息给消费者（购物车系统）。消费者消费完（即拿到订单消息，清空购物车成功）就应答ACK。\"},\"3932\":{\"t\":\"如果MQ服务器长时间没有收到生产者的commit或者rollback，它会反查生产者，然后根据查询到的结果（回滚操作或者重新发送消息）执行最终状态。\"},\"3933\":{\"t\":\"有些伙伴可能有疑惑，如果消费者消费失败怎么办呢？那数据是不是不一致啦？所以就需要消费者消费成功，执行业务逻辑成功，再反馈ack嘛。如果消费者消费失败，那就自动重试嘛，接口支持幂等即可。\"},\"3934\":{\"h\":\"排行榜的实现，比如高考成绩排序（2022 虾皮）\",\"a\":\"排行榜的实现-比如高考成绩排序-2022-虾皮\"},\"3935\":{\"t\":\"排行版的实现，一般使用redis的zset数据类型。\"},\"3936\":{\"t\":\"zadd key score member [score member ...]，zrank key member \"},\"3937\":{\"h\":\"有一批帖子，会根据类别搜索，但是现在是单独一个表，现在查询非常慢，如何提高搜索性能？（2022 虾皮）\",\"a\":\"有一批帖子-会根据类别搜索-但是现在是单独一个表-现在查询非常慢-如何提高搜索性能-2022-虾皮\"},\"3938\":{\"t\":\"根据类别分库分表，库可以放到不同的实例上，经常查询的不变的数据]可以放到缓存里。 数据有更新时，需要刷新下缓存 因为分表后，只能是固定类别，所以需要根据类别去分开查找。 如果还有另一个重要的字段也需要查，可以再建一个分表，user-ses/ses-user就是这么做的，但是冗余就比较大。\"},\"3939\":{\"h\":\"如果有多个表，进行聚合查询，如何解决深分页的问题（2022 虾皮）\",\"a\":\"如果有多个表-进行聚合查询-如何解决深分页的问题-2022-虾皮\"},\"3940\":{\"t\":\"就是保存每个节点的表id给前端，前端查询时把id返回过来了，然后加到SQL里，但是不一定准。这里回答的是单个表吧。\"},\"3941\":{\"h\":\"分表的数据，动态增加一张表，不停服如何实现？（2022 虾皮）\",\"a\":\"分表的数据-动态增加一张表-不停服如何实现-2022-虾皮\"},\"3942\":{\"t\":\"分区策略使用一致性哈希 然后新表的数据，查询的时候，先查老的，再插入新的。如果老数据没有动，需要有对应的迁移服务进行定时迁移。插入的时候优先插入到新的表。\"},\"3943\":{\"h\":\"迁移线程和用户线程同时执行，会有数据库不一致的问题，怎么解决？（2022 虾皮）\",\"a\":\"迁移线程和用户线程同时执行-会有数据库不一致的问题-怎么解决-2022-虾皮\"},\"3944\":{\"t\":\"加分布式锁。\"},\"3945\":{\"h\":\"两个机房，某个机房可能断电，如何做多机房容灾（2022 虾皮）\",\"a\":\"两个机房-某个机房可能断电-如何做多机房容灾-2022-虾皮\"},\"3946\":{\"t\":\"负载均衡层，支持切换机房写数据的时候，中间件（db/redis/es）都要进行双写。\"},\"3947\":{\"t\":\"kafka容灾，mirror maker: https://cloud.tencent.com/developer/article/1358933\"},\"3948\":{\"h\":\"主从机房同步有什么问题呢？ （2022 虾皮）\",\"a\":\"主从机房同步有什么问题呢-2022-虾皮\"},\"3949\":{\"t\":\"会有比较大的延迟。 一些分布式的问题，例如分布式事务，可能就执行了几步，然后就挂了，需要有一定的策略，进行回滚或者提交。 切换机房的过程中，可能存在数据丢失，重复数据等\"},\"3950\":{\"t\":\"双向同步，两个机房都能写入，如果操作的是各自的数据的话，问题不大。如果操作的是相同数据，必然会有冲突，需要解决。所以上层保证相同数据到同一个机房即可，然后同步到另外一个机房，保证每个机房都有全量的数据。各种中间件都要做改造。\"},\"3951\":{\"t\":\"总之，分片的核心思路在于，让同一个用户的相关请求，只在一个机房内完成所有业务「闭环」，不再出现「跨机房」访问。\"},\"3952\":{\"t\":\"阿里在实施这种方案时，给它起了个名字，叫做「单元化」。\"},\"3953\":{\"t\":\"这里还有一种情况，是无法做数据分片的：全局数据。例如系统配置、商品库存这类需要强一致的数据，这类服务依旧只能采用写主机房，读从机房的方案，不做双活。\"},\"3954\":{\"t\":\"双活的重点，是要优先保证「核心」业务先实现双活，并不是「全部」业务实现双活。\"},\"3955\":{\"h\":\"冷机房新请求过来，发现缓存没有，会把数据库打挂，这个怎么解决？（2022 虾皮）\",\"a\":\"冷机房新请求过来-发现缓存没有-会把数据库打挂-这个怎么解决-2022-虾皮\"},\"3956\":{\"t\":\"预热，提前加载到缓存。 或者平时保持一定的流量。 用了缓存的，一般需要预热下，防止雪崩。\"},\"3957\":{\"h\":\"定时任务这种，怎么改变执行的机房（2022 虾皮）\",\"a\":\"定时任务这种-怎么改变执行的机房-2022-虾皮\"},\"3958\":{\"t\":\"加开关，任何时候都有一个条件不满足，在空跑。\"},\"3959\":{\"h\":\"多线程和高并发\"},\"3960\":{\"h\":\"三：多线程与高并发\",\"a\":\"三-多线程与高并发\"},\"3961\":{\"h\":\"线程的互斥同步方式有哪些? 如何比较和选择?\",\"a\":\"线程的互斥同步方式有哪些-如何比较和选择\"},\"3962\":{\"t\":\"Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。\"},\"3963\":{\"t\":\"锁的实现synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。\"},\"3964\":{\"t\":\"性能新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。\"},\"3965\":{\"t\":\"等待可中断当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。\"},\"3966\":{\"t\":\"公平锁公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\"},\"3967\":{\"t\":\"锁绑定多个条件一个 ReentrantLock 可以同时绑定多个 Condition 对象。\"},\"3968\":{\"h\":\"ReentrantLock：\",\"a\":\"reentrantlock\"},\"3969\":{\"t\":\"ReentrantLock 实现了 Lock 接口，是一个可重入且独占式的锁，和 synchronized 关键字类似。不过，ReentrantLock 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。\"},\"3970\":{\"t\":\"public class ReentrantLock implements Lock, java.io.Serializable {} \"},\"3971\":{\"t\":\"ReentrantLock 里面有一个内部类 Sync，Sync 继承 AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在 Sync 中实现的。Sync 有公平锁 FairSync 和非公平锁 NonfairSync 两个子类。\"},\"3972\":{\"t\":\"ReentrantLock 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。\"},\"3973\":{\"t\":\"// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁 public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } \"},\"3974\":{\"t\":\"https://blog.csdn.net/zhengzhaoyang122/article/details/110847701；https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html\"},\"3975\":{\"h\":\"锁升级\",\"a\":\"锁升级\"},\"3976\":{\"t\":\"img\"},\"3977\":{\"h\":\"无锁\",\"a\":\"无锁\"},\"3978\":{\"t\":\"无锁并不会对资源锁定，所有的线程都可以访问并修改同一个资源，但同时只有一个线程能修改成功。也就是我们常说的乐观锁。\"},\"3979\":{\"h\":\"偏向锁\",\"a\":\"偏向锁\"},\"3980\":{\"t\":\"偏向于第一个访问锁的线程，初次执行synchronized代码块时，通过 CAS 修改对象头里的锁标志位，锁对象变成偏向锁。\"},\"3981\":{\"t\":\"当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。\"},\"3982\":{\"t\":\"执行完同步代码块后，线程并不会主动释放偏向锁。当线程第二次再执行同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里不需要重新加锁，偏向锁几乎没有额外开销，性能极高。\"},\"3983\":{\"t\":\"偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。\"},\"3984\":{\"t\":\"偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗。 \"},\"3985\":{\"h\":\"轻量级锁\",\"a\":\"轻量级锁\"},\"3986\":{\"t\":\"当前锁是偏向锁，此时有多个线程同时来竞争锁，偏向锁就会升级为轻量级锁。轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式来获取锁。\"},\"3987\":{\"t\":\"轻量级锁的获取有两种情况：\"},\"3988\":{\"t\":\"当关闭偏向锁功能时 多个线程竞争偏向锁导致偏向锁升级为轻量级锁。一旦有第二个线程加入锁竞争，偏向锁就升级为轻量级锁（自旋锁） \"},\"3989\":{\"t\":\"在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先比较当前锁标志位是否为“释放”，如果是则将其设置为“锁定”，此过程是原子性。如果抢到锁，然后线程将当前锁的持有者信息修改为自己。\"},\"3990\":{\"h\":\"重量级锁\",\"a\":\"重量级锁\"},\"3991\":{\"t\":\"如果线程的竞争很激励，线程的自旋超过了一定次数（默认循环10次，可以通过虚拟机参数更改），将轻量级锁升级为重量级锁（依然是 CAS 修改锁标志位，但不修改持有锁的线程ID），当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。\"},\"3992\":{\"t\":\"重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资。\"},\"3993\":{\"h\":\"锁优化技术（锁粗化、锁消除）：\",\"a\":\"锁优化技术-锁粗化、锁消除\"},\"3994\":{\"t\":\"锁粗化就是告诉我们任何事情都有个度，有些情况下我们反而希望把很多次锁的请求合并成一个请求，以降低短时间内大量锁请求、同步、释放带来的性能损耗。\"},\"3995\":{\"t\":\"锁消除指的是在某些情况下，JVM 虚拟机如果检测不到某段代码被共享和竞争的可能性，就会将这段代码所属的同步锁消除掉，从而到底提高程序性能的目的。\"},\"3996\":{\"h\":\"CAS\",\"a\":\"cas\"},\"3997\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&mid=2247510278&idx=3&sn=a58a9ec9f805d0e109c4b09cd497c9ca&chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1&scene=27\"},\"3998\":{\"t\":\"在并发编程中我们都知道i++操作是非线程安全的，这是因为 i++操作不是原子操作。\"},\"3999\":{\"t\":\"如何保证原子性呢？常用的方法就是加锁。在Java语言中可以使用 Synchronized和CAS实现加锁效果。\"},\"4000\":{\"t\":\"Synchronized是悲观锁，线程开始执行第一步就是获取锁，一旦获得锁，其他的线程进入后就会阻塞等待锁。如果不好理解，举个生活中的例子：一个人进入厕所后首先把门锁上（获取锁），然后开始上厕所，这个时候有其他人来了只能在外面等（阻塞），就算再急也没用。上完厕所完事后把门打开（解锁），其他人就可以进入了。\"},\"4001\":{\"t\":\"CAS是乐观锁，线程执行的时候不会加锁，假设没有冲突去完成某项操作，如果因为冲突失败了就重试，最后直到成功为止。\"},\"4002\":{\"h\":\"什么是 CAS？\",\"a\":\"什么是-cas\"},\"4003\":{\"t\":\"CAS（Compare-And-Swap）是比较并交换的意思，它是一条 CPU 并发原语，用于判断内存中某个值是否为预期值，如果是则更改为新的值，这个过程是原子的。下面用一个小示例解释一下。\"},\"4004\":{\"t\":\"CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，计算后要修改后的新值B。\"},\"4005\":{\"t\":\"（1）初始状态：在内存地址V中存储着变量值为 1。\"},\"4006\":{\"t\":\"图片\"},\"4007\":{\"t\":\"（2）线程1想要把内存地址为 V 的变量值增加1。这个时候对线程1来说，旧的预期值A=1，要修改的新值B=2。\"},\"4008\":{\"t\":\"图片\"},\"4009\":{\"t\":\"（3）在线程1要提交更新之前，线程2捷足先登了，已经把内存地址V中的变量值率先更新成了2。\"},\"4010\":{\"t\":\"图片\"},\"4011\":{\"t\":\"（4）线程1开始提交更新，首先将预期值A和内存地址V的实际值比较（Compare），发现A不等于V的实际值，提交失败。\"},\"4012\":{\"t\":\"图片\"},\"4013\":{\"t\":\"（5）线程1重新获取内存地址 V 的当前值，并重新计算想要修改的新值。此时对线程1来说，A=2，B=3。这个重新尝试的过程被称为自旋。如果多次失败会有多次自旋。\"},\"4014\":{\"t\":\"图片\"},\"4015\":{\"t\":\"（6）线程 1 再次提交更新，这一次没有其他线程改变地址 V 的值。线程1进行Compare，发现预期值 A 和内存地址 V的实际值是相等的，进行 Swap 操作，将内存地址 V 的实际值修改为 B。\"},\"4016\":{\"t\":\"图片\"},\"4017\":{\"t\":\"总结：更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 中的实际值相同时，才会将内存地址 V 对应的值修改为 B，这整个操作就是CAS。\"},\"4018\":{\"h\":\"CAS 基本原理\",\"a\":\"cas-基本原理\"},\"4019\":{\"t\":\"CAS 主要包括两个操作：Compare和Swap，有人可能要问了：两个操作能保证是原子性吗？可以的。\"},\"4020\":{\"t\":\"CAS 是一种系统原语，原语属于操作系统用语，原语由若干指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，由操作系统硬件来保证。在 Intel 的 CPU 中，使用 cmpxchg 指令。\"},\"4021\":{\"t\":\"回到 Java 语言，JDK 是在 1.5 版本后才引入 CAS 操作，在sun.misc.Unsafe这个类中定义了 CAS 相关的方法。\"},\"4022\":{\"t\":\"在 Java 编程中我们通常不会直接使用到 CAS，都是通过 JDK 封装好的并发工具类来间接使用的，这些并发工具类都在java.util.concurrent包中。\"},\"4023\":{\"h\":\"CAS 的问题\",\"a\":\"cas-的问题\"},\"4024\":{\"t\":\"CAS 不是万能的，也有很多问题。\"},\"4025\":{\"t\":\"敲黑板：CAS有哪些问题，这是面试高频考点，需要重点掌握。\"},\"4026\":{\"h\":\"典型 ABA 问题\",\"a\":\"典型-aba-问题\"},\"4027\":{\"t\":\"ABA 是 CAS 操作的一个经典问题，假设有一个变量初始值为 A，修改为 B，然后又修改为 A，这个变量实际被修改过了，但是 CAS 操作可能无法感知到。\"},\"4028\":{\"t\":\"如果是整型还好，不会影响最终结果，但如果是对象的引用类型包含了多个变量，引用没有变实际上包含的变量已经被修改，这就会造成大问题。\"},\"4029\":{\"t\":\"如何解决？思路其实很简单，在变量前加版本号，每次变量更新了就把版本号加一，结果如下：\"},\"4030\":{\"t\":\"图片\"},\"4031\":{\"t\":\"最终结果都是 A 但是版本号改变了。\"},\"4032\":{\"t\":\"从 JDK 1.5 开始提供了AtomicStampedReference类，这个类的 compareAndSe方法首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\"},\"4033\":{\"h\":\"自旋开销问题\",\"a\":\"自旋开销问题\"},\"4034\":{\"t\":\"CAS 出现冲突后就会开始自旋操作，如果资源竞争非常激烈，自旋长时间不能成功就会给 CPU 带来非常大的开销。\"},\"4035\":{\"t\":\"解决方案：可以考虑限制自旋的次数，避免过度消耗 CPU；另外还可以考虑延迟执行。\"},\"4036\":{\"h\":\"只能保证单个变量的原子性\",\"a\":\"只能保证单个变量的原子性\"},\"4037\":{\"t\":\"当对一个共享变量执行操作时，可以使用 CAS 来保证原子性，但是如果要对多个共享变量进行操作时，CAS 是无法保证原子性的，比如需要将 i 和 j 同时加 1：\"},\"4038\":{\"t\":\"i++；j++； \"},\"4039\":{\"t\":\"这个时候可以使用 synchronized 进行加锁，有没有其他办法呢？有，将多个变量操作合成一个变量操作。从 JDK1.5 开始提供了AtomicReference 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\"},\"4040\":{\"h\":\"总结\",\"a\":\"总结\"},\"4041\":{\"t\":\"CAS 是 Compare And Swap，是一条 CPU 原语，由操作系统保证原子性。\"},\"4042\":{\"t\":\"Java语言从 JDK1.5 版本开始引入 CAS ， 并且是 Java 并发编程J.U.C 包的基石，应用非常广泛。\"},\"4043\":{\"t\":\"当然 CAS 也不是万能的，也有很多问题：典型 ABA 问题、自旋开销问题、只能保证单个变量的原子性。\"},\"4044\":{\"h\":\"AQS\",\"a\":\"aqs\"},\"4045\":{\"t\":\"https://zhuanlan.zhihu.com/p/543902719\"},\"4046\":{\"h\":\"什么是AQS\",\"a\":\"什么是aqs\"},\"4047\":{\"t\":\"AQS（AbstractQueuedSynchronizer），即队列同步器，它是构建锁或者其他同步组件的基础框架，如ReentrantLock、ReentrantReadWriteLock、Semaphore，CountDownLatch等。 AQS是一个抽象类，主要是通过继承方式使用，本身没有实现任何接口，仅仅是定义了同步状态的获取和释放的方法。AQS解决了了之类实现同步器的大量细节问题，例如获取同步状态，FIFO队列，入队和出队。自定义同步器在实现时候只需要实现共享资源state的获取和释放即可，至于获取资源失败入队/唤醒出队等，AQS在顶层已经定义好了。\"},\"4048\":{\"h\":\"AQS的两种功能\",\"a\":\"aqs的两种功能\"},\"4049\":{\"t\":\"从使用层面来说，AQS功能分为两种：独占和共享\"},\"4050\":{\"t\":\"独占锁，每次只能一个线程持有锁，比如ReentrantLock就是独占锁\"},\"4051\":{\"t\":\"共享锁，允许多个线程持有锁，并发访问共享资源，比如ReentrantReadWriteLock\"},\"4052\":{\"t\":\"共享锁和独占锁的释放有一定区别，前面部分是一致的，先判断头结点是不是signal状态，如果是则唤醒头节点的下一个节点，并将该节点设置为头结点。而共享锁不一样，某个节点被设置为head之后，如果它的后继节点是shared状态，那么会尝试使用doReleaseShared方法尝试唤醒节点，实现共享状态的传播。\"},\"4053\":{\"h\":\"AQS内部实现\",\"a\":\"aqs内部实现\"},\"4054\":{\"t\":\"AQS是依赖内部的同步队列实现，也就是FIFO双向队列，如果当前线程竞争锁失败，那么AQS会把当前线程以及等待状态封装成一个Node节点加入到同步队列中，同时阻塞该线程，当同步状态释放时，会把首节点唤醒，使其再次尝试获取同步状态。\"},\"4055\":{\"t\":\"AQS队列内部维护的是一个双向链表，这种结构每个数据都有两个指针，分别指向直接的的前驱节点和后继节点，当线程抢占锁失败时候，会封装成Node加入到AQS中去。\"},\"4056\":{\"t\":\"AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁 实现的，即将暂时获取不到锁的线程加入到队列中。\"},\"4057\":{\"t\":\"CLH(Craig,Landin,and Hagersten) 队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。在 CLH 同步队列中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。\"},\"4058\":{\"t\":\"CLH 队列结构如下图所示：\"},\"4059\":{\"t\":\"img\"},\"4060\":{\"t\":\"在同步队列中，一个节点表示一个线程，他保存这线程的引用ThreadId，状态（watiStatus）,前驱结点（pre），后继节点（next），其数据结构如下：\"},\"4061\":{\"t\":\"img\"},\"4062\":{\"h\":\"acquire方法流程总结\",\"a\":\"acquire方法流程总结\"},\"4063\":{\"t\":\"首先通过子类判断是否获取了锁，如果获取了就什么也不干。tryAcquire\"},\"4064\":{\"t\":\"如果没有获取锁、通过线程创建节点加入同步队列的队尾。addWaiter\"},\"4065\":{\"t\":\"当线程在同步队列中不断的通过自旋去获取同步状态，如果获取了锁，就把其设为同步队列中的头节点，否则在同步队列中不停的自旋等待获取同步状态 acquireQueued,shouldParkAfterFailedAcquire(Node pre,Node node),parkAndCheckInterrupt()\"},\"4066\":{\"t\":\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\"},\"4067\":{\"h\":\"AQS 底层使用了模板方法模式，你能说出几个需要重写的方法吗？\",\"a\":\"aqs-底层使用了模板方法模式-你能说出几个需要重写的方法吗\"},\"4068\":{\"t\":\"使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。\"},\"4069\":{\"t\":\"isHeldExclusively() ：该线程是否正在独占资源。只有用到 condition 才需要去实现它。\"},\"4070\":{\"t\":\"tryAcquire(int) ：独占方式。尝试获取资源，成功则返回 true，失败则返回 false。\"},\"4071\":{\"t\":\"tryRelease(int) ：独占方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"4072\":{\"t\":\"tryAcquireShared(int) ：共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\"},\"4073\":{\"t\":\"tryReleaseShared(int) ：共享方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"4074\":{\"h\":\"总结\",\"a\":\"总结-1\"},\"4075\":{\"t\":\"总结的来说：线程获取锁，如果获取了锁就 保存当前获得锁的线程，如果没获取就创造一个节点通过compareAndSetTail(CAS操作)操作的方式将创建的节点加入同步队列的尾部，在同步队列中的节点通过自旋的操作不断去获取同步状态【当然由于FIFO先进先出的特性】等待时间越长就越先被唤醒。当头节点释放同步状态的时候，首先查看是否存在后继节点，如果存在就唤醒自己的后继节点，如果不存在就获取等待时间最长的符合条件的线程。\"},\"4076\":{\"h\":\"volitile关键字原理\",\"a\":\"volitile关键字原理\"},\"4077\":{\"h\":\"简述Java内存模型：\",\"a\":\"简述java内存模型\"},\"4078\":{\"t\":\"Java内存模型分为主内存和线程工作内存两大类。\"},\"4079\":{\"t\":\"主内存： **多个线程共享的内存。**如下图所示，方法区和堆属于主内存区域。\"},\"4080\":{\"t\":\"线程工作内存：每个线程独享的内存。如下图所示，虚拟机栈、本地方法栈、程序计数器属于线程独享的工作内存。\"},\"4081\":{\"t\":\"图片\"},\"4082\":{\"t\":\"Java内存模型规定：所有变量都需要存储在主内存中，线程工作内存保存了变量在主内存中的副本，线程对变量的所有操作都在工作内存中进行，执行结束后在同步到主内存中去。这里必然会存在时间差，在这个时间差内，该线程对副本的操作，对于其他线程是不见的，从而造成了可见性问题。\"},\"4083\":{\"h\":\"volatile的作用：\",\"a\":\"volatile的作用\"},\"4084\":{\"t\":\"保证共享变量的可见性： 使用volatile修饰的变量，任何线程对其进行操作都是在主内存中进行的，不会产生副本，从而保证共享变量的可见性。\"},\"4085\":{\"t\":\"防止局部指令重排序： happens-before规则中的volatile变量规则规定了一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。\"},\"4086\":{\"h\":\"volatile如何防止指令重排序：\",\"a\":\"volatile如何防止指令重排序\"},\"4087\":{\"t\":\"volatile是通过内存屏障来防止指令重排序的。\"},\"4088\":{\"t\":\"硬件层面的内存屏障分为Load Barrier 和 Store Barrier即读屏障和写屏障。\"},\"4089\":{\"t\":\"对于Load Barrier来说，在指令前插入Load Barrier，可以让高速缓存中的数据失效，强制从新从主内存加载数据。\"},\"4090\":{\"t\":\"对于Store Barrier来说，在指令后插入Store Barrier，能让写入缓存中的最新数据更新写入主内存，让其他线程可见。\"},\"4091\":{\"t\":\"Java内存屏障类型把上述两种内存屏障两两组合，如下图所示：\"},\"4092\":{\"t\":\"图片\"},\"4093\":{\"t\":\"volatile防止指令重排序具体步骤：\"},\"4094\":{\"t\":\"在每个volatile写操作的前面插入一个StoreStore屏障。\"},\"4095\":{\"t\":\"在每个volatile写操作的后面插入一个StoreLoad屏障。\"},\"4096\":{\"t\":\"在每个volatile读操作的后面插入一个LoadLoad屏障。\"},\"4097\":{\"t\":\"在每个volatile读操作的后面插入一个LoadStore屏障。\"},\"4098\":{\"t\":\"图片\"},\"4099\":{\"t\":\"图片\"},\"4100\":{\"h\":\"volatile总结：\",\"a\":\"volatile总结\"},\"4101\":{\"t\":\"volatile解决的是多线程共享变量可见性问题，但是被volatile修饰的变量操作并非具有原子性。\"},\"4102\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=MzAxNTE2NjEyMw==&mid=2247483734&idx=1&sn=8509d4aa61d08550c2b7668314da3582&chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e&scene=27\"},\"4103\":{\"h\":\"锁的分类实现\",\"a\":\"锁的分类实现\"},\"4104\":{\"h\":\"悲观锁：\",\"a\":\"悲观锁\"},\"4105\":{\"t\":\"正如其名，它是指对数据修改时持保守态度，认为其他人也会修改数据。因此在操作数据时，会把数据锁住，直到操作完成。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是长事务而言，这样的开销往往无法承受。\"},\"4106\":{\"h\":\"乐观锁：\",\"a\":\"乐观锁\"},\"4107\":{\"t\":\"乐观锁，从字面意思也能猜到个大概，在操作数据时非常乐观，认为别人不会同时修改数据，因此乐观锁不会上锁 只是在 提交更新 时，才会正式对数据的冲突与否进行检测。如果发现冲突了，则返回错误信息，让用户决定如何去做，fail-fast 机制 。否则，执行本次操作。\"},\"4108\":{\"h\":\"可重入锁：\",\"a\":\"可重入锁\"},\"4109\":{\"t\":\"可重入锁，也叫做递归锁，是指在同一个线程在调外层方法获取锁的时候，再进入内层方法会自动获取锁。\"},\"4110\":{\"t\":\"对象锁或类锁内部有计数器，一个线程每获得一次锁，计数器 +1；解锁时，计数器 -1。\"},\"4111\":{\"t\":\"JAVA 中的 ReentrantLock 和 synchronized 都是 可重入锁。可重入锁的一个好处是可一定程度避免死锁。\"},\"4112\":{\"h\":\"自旋锁：\",\"a\":\"自旋锁\"},\"4113\":{\"t\":\"自旋锁是采用让当前线程不停地在循环体内执行，当循环的条件被其他线程改变时才能进入临界区。自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不断增加时，性能下降明显，因为每个线程都需要执行，会占用CPU时间片。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\"},\"4114\":{\"t\":\"自旋锁缺点：\"},\"4115\":{\"t\":\"可能引发死锁 可能占用 CPU 的时间过长 \"},\"4116\":{\"t\":\"我们可以设置一个 循环时间 或 循环次数，超出阈值时，让线程进入阻塞状态，防止线程长时间占用 CPU 资源。JUC 并发包中的 CAS 就是采用自旋锁，compareAndSet 是CAS操作的核心，底层利用Unsafe对象实现的。\"},\"4117\":{\"h\":\"独享锁：\",\"a\":\"独享锁\"},\"4118\":{\"t\":\"独享锁，也有人叫它排他锁。无论读操作还是写操作，只能有一个线程获得锁，其他线程处于阻塞状态。\"},\"4119\":{\"t\":\"缺点：读操作并不会修改数据，而且大部分的系统都是 读多写少，如果读读之间互斥，大大降低系统的性能。下面的 共享锁 会解决这个问题。\"},\"4120\":{\"t\":\"像JAVA 中的 ReentrantLock 和 synchronized 都是独享锁。\"},\"4121\":{\"h\":\"共享锁：\",\"a\":\"共享锁\"},\"4122\":{\"t\":\"共享锁是指允许多个线程同时持有锁，一般用在读锁上。读锁的共享锁可保证并发读是非常高效的。读写，写读 ，写写的则是互斥的。独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享\"},\"4123\":{\"t\":\"ReentrantReadWriteLock，其读锁是共享锁，其写锁是独享锁。\"},\"4124\":{\"h\":\"读锁/写锁：\",\"a\":\"读锁-写锁\"},\"4125\":{\"t\":\"如果对某个资源是读操作，那多个线程之间并不会相互影响，可以通过添加读锁实现共享。如果有修改动作，为了保证数据的并发安全，此时只能有一个线程获得锁，我们称之为 写锁。读读是共享的；而 读写、写读 、写写 则是互斥的\"},\"4126\":{\"t\":\"像 JAVA 中的 ReentrantReadWriteLock 就是一种 读写锁 \"},\"4127\":{\"h\":\"公平锁/非公平锁：\",\"a\":\"公平锁-非公平锁\"},\"4128\":{\"t\":\"公平锁：多个线程按照申请锁的顺序去获得锁，所有线程都在队列里排队，先来先获取的公平性原则。\"},\"4129\":{\"t\":\"优点：所有的线程都能得到资源，不会饿死在队列中。\"},\"4130\":{\"t\":\"缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，CPU 唤醒下一个阻塞线程有系统开销\"},\"4131\":{\"t\":\"**非公平锁：**多个线程不按照申请锁的顺序去获得锁，而是同时以插队方式直接尝试获取锁，获取不到（插队失败），会进入队列等待（失败则乖乖排队），如果能获取到（插队成功），就直接获取到锁。\"},\"4132\":{\"t\":\"**优点：**可以减少 CPU 唤醒线程的开销，整体的吞吐效率会高点\"},\"4133\":{\"t\":\"**缺点：**可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁，活活饿死。\"},\"4134\":{\"t\":\"Java 多线程并发操作，我们操作锁大多时候都是基于 Sync 本身去实现的，而 Sync 本身却是 ReentrantLock 的一个内部类，Sync 继承 AbstractQueuedSynchronizer\"},\"4135\":{\"t\":\"像 ReentrantLock 默认是非公平锁，我们可以在构造函数中传入 true，来创建公平锁。\"},\"4136\":{\"t\":\"参考：https://blog.csdn.net/weixin_70730532/article/details/126875303\"},\"4137\":{\"h\":\"synchronized原理\",\"a\":\"synchronized原理\"},\"4138\":{\"h\":\"synchronized 同步语句块的情况:\",\"a\":\"synchronized-同步语句块的情况\"},\"4139\":{\"t\":\"public class SynchronizedDemo { public void method() { synchronized (this) { System.out.println(\\\"synchronized 代码块\\\"); } } } \"},\"4140\":{\"t\":\"通过 JDK 自带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：首先切换到类的对应目录执行 javac SynchronizedDemo.java 命令生成编译后的 .class 文件，然后执行javap -c -s -v -l SynchronizedDemo.class。\"},\"4141\":{\"t\":\"synchronized关键字原理\"},\"4142\":{\"t\":\"从上面我们可以看出：synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"4143\":{\"t\":\"上面的字节码中包含一个 monitorenter 指令以及两个 monitorexit 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。\"},\"4144\":{\"t\":\"当执行 monitorenter 指令时，线程试图获取锁也就是获取 对象监视器 monitor 的持有权。\"},\"4145\":{\"t\":\"在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由ObjectMonitor实现的。每个对象中都内置了一个 ObjectMonitor对象。\"},\"4146\":{\"t\":\"另外，wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。\"},\"4147\":{\"t\":\"在执行monitorenter时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。\"},\"4148\":{\"t\":\"对象锁的的拥有者线程才可以执行 monitorexit 指令来释放锁。在执行 monitorexit 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\"},\"4149\":{\"h\":\"synchronized 修饰方法的的情况:\",\"a\":\"synchronized-修饰方法的的情况\"},\"4150\":{\"t\":\"public class SynchronizedDemo2 { public synchronized void method() { System.out.println(\\\"synchronized 方法\\\"); } } \"},\"4151\":{\"t\":\"synchronized关键字原理\"},\"4152\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\"},\"4153\":{\"t\":\"如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。\"},\"4154\":{\"h\":\"总结:\",\"a\":\"总结-2\"},\"4155\":{\"t\":\"synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"4156\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。\"},\"4157\":{\"t\":\"不过两者的本质都是对对象监视器 monitor 的获取。\"},\"4158\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-底层原理了解吗\"},\"4159\":{\"h\":\"ThreadLocal原理\",\"a\":\"threadlocal原理\"},\"4160\":{\"h\":\"ThreadLocal 有什么用？\",\"a\":\"threadlocal-有什么用\"},\"4161\":{\"t\":\"通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？\"},\"4162\":{\"t\":\"JDK 中自带的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。\"},\"4163\":{\"t\":\"如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get() 和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\"},\"4164\":{\"h\":\"原理：\",\"a\":\"原理\"},\"4165\":{\"t\":\"源码：\"},\"4166\":{\"t\":\"public class Thread implements Runnable { //...... //与此线程有关的ThreadLocal值。由ThreadLocal类维护 ThreadLocal.ThreadLocalMap threadLocals = null; //与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护 ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; //...... } \"},\"4167\":{\"t\":\"从上面Thread类 源代码可以看出Thread 类中有一个 threadLocals 和 一个 inheritableThreadLocals 变量，它们都是 ThreadLocalMap 类型的变量,我们可以把 ThreadLocalMap 理解为ThreadLocal 类实现的定制化的 HashMap。默认情况下这两个变量都是 null，只有当前线程调用 ThreadLocal 类的 set或get方法时才创建它们，实际上调用这两个方法的时候，我们调用的是ThreadLocalMap类对应的 get()、set()方法。\"},\"4168\":{\"t\":\"ThreadLocal类的set()方法：\"},\"4169\":{\"t\":\"public void set(T value) { //获取当前请求的线程 Thread t = Thread.currentThread(); //取出 Thread 类内部的 threadLocals 变量(哈希表结构) ThreadLocalMap map = getMap(t); if (map != null) // 将需要存储的值放入到这个哈希表中 map.set(this, value); else createMap(t, value); } ThreadLocalMap getMap(Thread t) { return t.threadLocals; } \"},\"4170\":{\"t\":\"通过上面这些内容，我们足以通过猜测得出结论：最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。ThrealLocal 类中可以通过Thread.currentThread()获取到当前线程对象后，直接通过getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。\"},\"4171\":{\"t\":\"每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为 key ，Object 对象为 value 的键值对。\"},\"4172\":{\"t\":\"ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) { //...... } \"},\"4173\":{\"t\":\"比如我们在同一个线程中声明了两个 ThreadLocal 对象的话， Thread内部都是使用仅有的那个ThreadLocalMap 存放数据的，ThreadLocalMap的 key 就是 ThreadLocal对象，value 就是 ThreadLocal 对象调用set方法设置的值。\"},\"4174\":{\"h\":\"线程池\",\"a\":\"线程池\"},\"4175\":{\"h\":\"为什么要用线程池？\",\"a\":\"为什么要用线程池\"},\"4176\":{\"t\":\"这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：\"},\"4177\":{\"t\":\"降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\"},\"4178\":{\"t\":\"提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。\"},\"4179\":{\"t\":\"提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\"},\"4180\":{\"h\":\"如何创建线程池？\",\"a\":\"如何创建线程池\"},\"4181\":{\"t\":\"方式一：通过ThreadPoolExecutor构造函数来创建（推荐）。\"},\"4182\":{\"t\":\"package com.young.多线程; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.Executors; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * @author 杨路恒 */ public class ThreadPool { public static void main(String[] args) { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1,2, 2, TimeUnit.MILLISECONDS,new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(), // new ThreadPoolExecutor.AbortPolicy() // new ThreadPoolExecutor.CallerRunsPolicy() // new ThreadPoolExecutor.DiscardOldestPolicy() new ThreadPoolExecutor.DiscardPolicy() ); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.shutdown(); } } \"},\"4183\":{\"t\":\"参数：\"},\"4184\":{\"t\":\"/** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @param threadFactory the factory to use when the executor * creates a new thread * @param handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached * @throws IllegalArgumentException if one of the following holds:<br> * {@code corePoolSize < 0}<br> * {@code keepAliveTime < 0}<br> * {@code maximumPoolSize <= 0}<br> * {@code maximumPoolSize < corePoolSize} * @throws NullPointerException if {@code workQueue} * or {@code threadFactory} or {@code handler} is null */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; } \"},\"4185\":{\"t\":\"ThreadPoolExecutor 3 个最重要的参数：\"},\"4186\":{\"t\":\"corePoolSize : 任务队列未达到队列容量时，最大可以同时运行的线程数量。\"},\"4187\":{\"t\":\"maximumPoolSize : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\"},\"4188\":{\"t\":\"workQueue: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"4189\":{\"t\":\"ThreadPoolExecutor其他常见参数 :\"},\"4190\":{\"t\":\"keepAliveTime:线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；\"},\"4191\":{\"t\":\"unit : keepAliveTime 参数的时间单位。\"},\"4192\":{\"t\":\"threadFactory :executor 创建新线程的时候会用到。\"},\"4193\":{\"t\":\"handler :饱和策略。关于饱和策略下面单独介绍一下。\"},\"4194\":{\"t\":\"下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）：\"},\"4195\":{\"t\":\"线程池各个参数的关系\"},\"4196\":{\"t\":\"线程池的饱和策略有哪些？\"},\"4197\":{\"t\":\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，ThreadPoolTaskExecutor 定义一些策略:\"},\"4198\":{\"t\":\"ThreadPoolExecutor.AbortPolicy： 抛出 RejectedExecutionException来拒绝新任务的处理。\"},\"4199\":{\"t\":\"ThreadPoolExecutor.CallerRunsPolicy： 调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。\"},\"4200\":{\"t\":\"ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。\"},\"4201\":{\"t\":\"ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。\"},\"4202\":{\"t\":\"举个例子：Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略来配置线程池的时候，默认使用的是 AbortPolicy。在这种饱和策略下，如果队列满了，ThreadPoolExecutor 将抛出 RejectedExecutionException 异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。如果不想丢弃任务的话，可以使用CallerRunsPolicy。CallerRunsPolicy 和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务\"},\"4203\":{\"t\":\"线程池常用的阻塞队列有哪些？\"},\"4204\":{\"t\":\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"4205\":{\"t\":\"不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。\"},\"4206\":{\"t\":\"容量为 Integer.MAX_VALUE 的 LinkedBlockingQueue（无界队列）：FixedThreadPool 和 SingleThreadExector 。由于队列永远不会被放满，因此FixedThreadPool最多只能创建核心线程数的线程。\"},\"4207\":{\"t\":\"SynchronousQueue（同步队列） ：CachedThreadPool 。SynchronousQueue 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，CachedThreadPool 的最大线程数是 Integer.MAX_VALUE ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。\"},\"4208\":{\"t\":\"DelayedWorkQueue（延迟阻塞队列）：ScheduledThreadPool 和 SingleThreadScheduledExecutor 。DelayedWorkQueue 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。DelayedWorkQueue 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 Integer.MAX_VALUE，所以最多只能创建核心线程数的线程。\"},\"4209\":{\"t\":\"线程池处理任务的流程了解吗？\"},\"4210\":{\"t\":\"如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。\"},\"4211\":{\"t\":\"如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。\"},\"4212\":{\"t\":\"如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。\"},\"4213\":{\"t\":\"如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用RejectedExecutionHandler.rejectedExecution()方法。\"},\"4214\":{\"t\":\"图解线程池实现原理\"},\"4215\":{\"t\":\"如何设定线程池的大小？\"},\"4216\":{\"t\":\"有一个简单并且适用面比较广的公式：\"},\"4217\":{\"t\":\"CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\"},\"4218\":{\"t\":\"I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\"},\"4219\":{\"t\":\"方式二：通过 Executor 框架的工具类 Executors 来创建。\"},\"4220\":{\"t\":\"我们可以创建多种类型的 ThreadPoolExecutor：\"},\"4221\":{\"t\":\"FixedThreadPool ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\"},\"4222\":{\"t\":\"SingleThreadExecutor： 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\"},\"4223\":{\"t\":\"CachedThreadPool： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。\"},\"4224\":{\"t\":\"ScheduledThreadPool ：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。\"},\"4225\":{\"h\":\"为什么不推荐使用内置线程池？\",\"a\":\"为什么不推荐使用内置线程池\"},\"4226\":{\"t\":\"在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\"},\"4227\":{\"t\":\"为什么呢？\"},\"4228\":{\"t\":\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\"},\"4229\":{\"t\":\"另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险\"},\"4230\":{\"t\":\"Executors 返回线程池对象的弊端如下(后文会详细介绍到)：\"},\"4231\":{\"t\":\"FixedThreadPool 和 SingleThreadExecutor ： 使用的是无界的 LinkedBlockingQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"4232\":{\"t\":\"CachedThreadPool ：使用的是同步队列 SynchronousQueue, 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。\"},\"4233\":{\"t\":\"ScheduledThreadPool 和 SingleThreadScheduledExecutor : 使用的无界的延迟阻塞队列DelayedWorkQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"4234\":{\"h\":\"如何动态修改线程池的参数？\",\"a\":\"如何动态修改线程池的参数\"},\"4235\":{\"t\":\"JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：\"},\"4236\":{\"t\":\"图片\"},\"4237\":{\"t\":\"重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。\"},\"4238\":{\"t\":\"问题一：线程池被创建后里面有线程吗？如果没有的话，你知道有什么方法对线程池进行预热吗？\"},\"4239\":{\"t\":\"线程池被创建后如果没有任务过来，里面是不会有线程的。如果需要预热的话可以调用下面的两个方法：\"},\"4240\":{\"t\":\"全部启动：\"},\"4241\":{\"t\":\"图片\"},\"4242\":{\"t\":\"仅启动一个：\"},\"4243\":{\"t\":\"图片\"},\"4244\":{\"t\":\"问题二：核心线程数会被回收吗？需要什么设置？\"},\"4245\":{\"t\":\"核心线程数默认是不会被回收的，如果需要回收核心线程数，需要调用下面的方法：\"},\"4246\":{\"t\":\"图片\"},\"4247\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html；https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651751537&idx=1&sn=c50a434302cc06797828782970da190e&chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c&scene=21#wechat_redirect\"},\"4248\":{\"h\":\"Docker\"},\"4249\":{\"h\":\"Docker\",\"a\":\"docker\"},\"4250\":{\"h\":\"什么是 Docker?\",\"a\":\"什么是-docker\"},\"4251\":{\"t\":\"Docker 是世界领先的软件容器平台。\"},\"4252\":{\"t\":\"Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 UnionFS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\"},\"4253\":{\"t\":\"Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。\"},\"4254\":{\"t\":\"用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\"},\"4255\":{\"h\":\"Docker的架构\",\"a\":\"docker的架构\"},\"4256\":{\"t\":\"Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，模块各司其职。下图是它的总体架构图：\"},\"4257\":{\"t\":\"img\"},\"4258\":{\"t\":\"用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。\"},\"4259\":{\"t\":\"Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。\"},\"4260\":{\"t\":\"Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。\"},\"4261\":{\"t\":\"Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graphdriver 将下载镜像以 Graph 的形式存储。\"},\"4262\":{\"t\":\"当需要为 Docker 创建网络环境时，通过网络管理驱动 Networkdriver 创建并配置 Docker容器网络环境。\"},\"4263\":{\"t\":\"当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。\"},\"4264\":{\"t\":\"Libcontainer 是一项独立的容器管理包，Networkdriver 以及 Execdriver 都是通过 Libcontainer 来实现具体对容器进行的操作。\"},\"4265\":{\"h\":\"镜像和容器的相关操作\",\"a\":\"镜像和容器的相关操作\"},\"4266\":{\"h\":\"Spring Cloud\"},\"4267\":{\"h\":\"Spring Cloud\",\"a\":\"spring-cloud\"},\"4268\":{\"h\":\"什么是Spring Cloud？\",\"a\":\"什么是spring-cloud\"},\"4269\":{\"t\":\"Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。\"},\"4270\":{\"h\":\"微服务的概念\",\"a\":\"微服务的概念\"},\"4271\":{\"t\":\"分布式，多个模块，每一个模块都是一个单独的系统。\"},\"4272\":{\"t\":\"以前所有的代码都放在同一个工程中、部署在同一个服务器、同一项目的不同模块不同功能互相抢占资源，微服务就是将工程根据不同的业务规则拆分成微服务，部署在不同的服务器上，服务之间相互调用，java中有的微服务有dubbo(只能用来做微服务)、springcloud( 提供了服务的发现、断路器等)。\"},\"4273\":{\"t\":\"微服务的特点：\"},\"4274\":{\"t\":\"按业务划分为一个独立运行的程序，即服务单元\"},\"4275\":{\"t\":\"服务之间通过HTTP协议相互通信\"},\"4276\":{\"t\":\"自动化部署\"},\"4277\":{\"t\":\"可以用不同的编程语言\"},\"4278\":{\"t\":\"可以用不同的存储技术\"},\"4279\":{\"t\":\"服务集中化管理\"},\"4280\":{\"t\":\"微服务是一个分布式系统\"},\"4281\":{\"t\":\"微服务的优势\"},\"4282\":{\"t\":\"将一个复杂的业务拆分为若干小的业务，将复杂的业务简单化，新人只需要了解他所接管的服务的代码，减少了新人的学习成本。\"},\"4283\":{\"t\":\"由于微服务是分布式服务，服务与服务之间没有任何耦合。微服务系统的微服务单元具有很强的横向拓展能力。\"},\"4284\":{\"t\":\"服务与服务之间采用HTTP网络通信协议来通信，单个服务内部高度耦合，服务与服务之间完全独立，无耦合。这使得微服务可以采用任何的开发语言和技术来实现，提高开发效率、降低开发成本。\"},\"4285\":{\"t\":\"微服务是按照业务进行拆分的，并有坚实的服务边界，若要重写某一业务代码，不需了解所有业务，重写简单。\"},\"4286\":{\"t\":\"微服务的每个服务单元是独立部署的，即独立运行在某个进程中，微服务的修改和部署对其他服务没有影响。\"},\"4287\":{\"t\":\"微服务在CAP理论中采用的AP架构，具有高可用分区容错特点。高可用主要体现在系统7x24不间断服务，他要求系统有大量的服务器集群，从而提高系统的负载能力。分区容错也使得系统更加健壮。\"},\"4288\":{\"t\":\"微服务的不足\"},\"4289\":{\"t\":\"微服务的复杂度：构建一个微服务比较复杂，服务与服务之间通过HTTP协议或其他消息传递机制通信，开发者要选出最佳的通信机制，并解决网络服务差时带来的风险。\"},\"4290\":{\"t\":\"分布式事物：将事物分成多阶段提交，如果一阶段某一节点失败仍会导致数据不正确。如果事物涉及的节点很多，某一节点的网络出现异常会导致整个事务处于阻塞状态，大大降低数据库的性能。\"},\"4291\":{\"t\":\"服务划分：将一个完整的系统拆分成很多个服务，是一件非常困难的事，因为这涉及了具体的业务场景\"},\"4292\":{\"t\":\"服务部署：最佳部署容器Docker\"},\"4293\":{\"h\":\"Spring Cloud的优缺点以及组件\",\"a\":\"spring-cloud的优缺点以及组件\"},\"4294\":{\"t\":\"设计目标\"},\"4295\":{\"t\":\"协调各个微服务，简化分布式系统开发。\"},\"4296\":{\"t\":\"优缺点\"},\"4297\":{\"t\":\"微服务的框架那么多比如：dubbo、Kubernetes，为什么就要使用Spring Cloud的呢？\"},\"4298\":{\"t\":\"优点：\"},\"4299\":{\"t\":\"产出于Spring大家族，Spring在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善 组件丰富，功能齐全。Spring Cloud 为微服务架构提供了非常完整的支持。例如、配置管理、服务发现、断路器、微服务网关等； Spring Cloud 社区活跃度很高，教程很丰富，遇到问题很容易找到解决方案 服务拆分粒度更细，耦合度比较低，有利于资源重复利用，有利于提高开发效率 可以更精准的制定优化服务方案，提高系统的可维护性 减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发 微服务可以是跨平台的，可以用任何一种语言开发 适于互联网时代，产品迭代周期更短 \"},\"4300\":{\"t\":\"缺点：\"},\"4301\":{\"t\":\"微服务过多，治理成本高，不利于维护系统 分布式系统开发的成本高（容错，分布式事务等）对团队挑战大 \"},\"4302\":{\"t\":\"springcloud中的组件有那些？\"},\"4303\":{\"t\":\"说出主要的组件： Spring Cloud Eureka,服务注册中心,特性有失效剔除、服务保护 Spring Cloud Zuul,API服务网关,功能有路由分发和过滤 Spring Cloud Config,分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式 Spring Cloud Ribbon,客户端负载均衡,特性有区域亲和,重试机制 Spring Cloud Hystrix,客户端容错保护,特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离 Spring Cloud Feign,声明式服务调用本质上就是Ribbon+Hystrix Spring Cloud Stream,消息驱动,有Sink、Source、Processor三种通道,特性有订阅发布、消费组、消息分区 Spring Cloud Bus,消息总线,配合Config仓库修改的一种Stream实现， Spring Cloud Sleuth,分布式服务追踪,需要搞清楚TraceID和SpanID以及抽样,如何与ELK整合 \"},\"4304\":{\"t\":\"Spring Cloud项目部署架构？\"},\"4305\":{\"t\":\"img\"},\"4306\":{\"t\":\"网关与过滤器有什么区别？\"},\"4307\":{\"t\":\"网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。\"},\"4308\":{\"t\":\"什么是断路器\"},\"4309\":{\"t\":\"当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）\"},\"4310\":{\"t\":\"断路器有三种状态\"},\"4311\":{\"t\":\"打开状态：一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务\"},\"4312\":{\"t\":\"半开状态：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭\"},\"4313\":{\"t\":\"关闭状态：当服务一直处于正常状态 能正常调用\"},\"4314\":{\"t\":\"什么是 Hystrix？\"},\"4315\":{\"t\":\"在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等一些防止雪崩的技术。\"},\"4316\":{\"t\":\"Hystrix有四种防雪崩方式:\"},\"4317\":{\"t\":\"服务降级：接口调用失败就调用本地的方法返回一个空\"},\"4318\":{\"t\":\"服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息\"},\"4319\":{\"t\":\"服务隔离：隔离服务之间相互影响\"},\"4320\":{\"t\":\"服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。\"},\"4321\":{\"t\":\"什么是Feign？\"},\"4322\":{\"t\":\"Feign 是一个声明web服务客户端，这使得编写web服务客户端更容易。它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。\"},\"4323\":{\"h\":\"Feign远程调用的基本流程\",\"a\":\"feign远程调用的基本流程\"},\"4324\":{\"t\":\"Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，放回给调用者。Feign远程调用的基本流程，大致如下图所示。\"},\"4325\":{\"t\":\"在这里插入图片描述\"},\"4326\":{\"t\":\"从上图可以看到，Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的 Request 请求。通过Feign以及JAVA的动态代理机制，使得Java 开发人员，可以不用通过HTTP框架去封装HTTP请求报文的方式，完成远程服务的HTTP调用。\"},\"4327\":{\"t\":\"过程：\"},\"4328\":{\"t\":\"在微服务启动时，Feign会进行包扫描，对加@FeignClient注解的接口，按照注解的规则，创建远程接口的本地JDK Proxy代理实例。然后，将这些本地Proxy代理实例，注入到Spring IOC容器中。当远程接口的方法被调用，由Proxy代理实例去完成真正的远程访问，并且返回结果。\"},\"4329\":{\"h\":\"ZooKeeper\"},\"4330\":{\"h\":\"ZooKeeper\",\"a\":\"zookeeper\"},\"4331\":{\"h\":\"基本功能\",\"a\":\"基本功能\"},\"4332\":{\"t\":\"ZooKeeper 是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\"},\"4333\":{\"t\":\"ZooKeeper 为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。这些功能的实现主要依赖于 ZooKeeper 提供的 数据存储+事件监听 功能。\"},\"4334\":{\"t\":\"ZooKeeper 将数据保存在内存中，性能是不错的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景）。\"},\"4335\":{\"t\":\"另外，很多顶级的开源项目都用到了 ZooKeeper，比如：\"},\"4336\":{\"t\":\"Kafka : ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。不过，在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构。\"},\"4337\":{\"h\":\"ZAB算法\",\"a\":\"zab算法\"},\"4338\":{\"h\":\"ZAB 协议介绍\",\"a\":\"zab-协议介绍\"},\"4339\":{\"t\":\"ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\"},\"4340\":{\"h\":\"ZAB 协议两种基本的模式：崩溃恢复和消息广播\",\"a\":\"zab-协议两种基本的模式-崩溃恢复和消息广播\"},\"4341\":{\"t\":\"ZAB 协议包括两种基本的模式，分别是\"},\"4342\":{\"t\":\"崩溃恢复 ：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致。\"},\"4343\":{\"t\":\"消息广播 ：当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进入消息广播模式了。 当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\"},\"4344\":{\"h\":\"Zookeeper 架构\",\"a\":\"zookeeper-架构\"},\"4345\":{\"t\":\"作为一个优秀高效且可靠的分布式协调框架，ZooKeeper 在解决分布式数据一致性问题时并没有直接使用 Paxos ，而是专门定制了一致性协议叫做 ZAB(ZooKeeper Atomic Broadcast) 原子广播协议，该协议能够很好地支持 崩溃恢复 。\"},\"4346\":{\"h\":\"ZAB 中的三个角色\",\"a\":\"zab-中的三个角色\"},\"4347\":{\"t\":\"和介绍 Paxos 一样，在介绍 ZAB 协议之前，我们首先来了解一下在 ZAB 中三个主要的角色，Leader 领导者、Follower跟随者、Observer观察者 。\"},\"4348\":{\"t\":\"Leader ：集群中 唯一的写请求处理者 ，能够发起投票（投票也是为了进行写请求）。\"},\"4349\":{\"t\":\"Follower：能够接收客户端的请求，如果是读请求则可以自己处理，如果是写请求则要转发给 Leader 。在选举过程中会参与投票，有选举权和被选举权 。\"},\"4350\":{\"t\":\"Observer ：就是没有选举权和被选举权的 Follower 。\"},\"4351\":{\"t\":\"在 ZAB 协议中对 zkServer(即上面我们说的三个角色的总称) 还有两种模式的定义，分别是 消息广播 和 崩溃恢复 。\"},\"4352\":{\"h\":\"消息广播模式\",\"a\":\"消息广播模式\"},\"4353\":{\"t\":\"说白了就是 ZAB 协议是如何处理写请求的，上面我们不是说只有 Leader 能处理写请求嘛？那么我们的 Follower 和 Observer 是不是也需要 同步更新数据 呢？总不能数据只在 Leader 中更新了，其他角色都没有得到更新吧？\"},\"4354\":{\"t\":\"第一步肯定需要 Leader 将写请求 广播 出去呀，让 Leader 问问 Followers 是否同意更新，如果超过半数以上的同意那么就进行 Follower 和 Observer 的更新（和 Paxos 一样）。\"},\"4355\":{\"t\":\"在 Leader 这端，它为每个其他的 zkServer 准备了一个 队列 ，采用先进先出的方式发送消息。由于协议是 通过 TCP 来进行网络通信的，保证了消息的发送顺序性，接受顺序性也得到了保证。\"},\"4356\":{\"t\":\"除此之外，在 ZAB 中还定义了一个 全局单调递增的事务ID ZXID ，它是一个64位long型，其中高32位表示 epoch 年代，低32位表示事务id。epoch 是会根据 Leader 的变化而变化的，当一个 Leader 挂了，新的 Leader 上位的时候，年代（epoch）就变了。而低32位可以简单理解为递增的事务id。\"},\"4357\":{\"t\":\"定义这个的原因也是为了顺序性，每个 proposal 在 Leader 中生成后需要 通过其 ZXID 来进行排序 ，才能得到处理。\"},\"4358\":{\"h\":\"崩溃恢复模式\",\"a\":\"崩溃恢复模式\"},\"4359\":{\"t\":\"说到崩溃恢复我们首先要提到 ZAB 中的 Leader 选举算法，当系统出现崩溃影响最大应该是 Leader 的崩溃，因为我们只有一个 Leader ，所以当 Leader 出现问题的时候我们势必需要重新选举 Leader 。\"},\"4360\":{\"t\":\"Leader 选举可以分为两个不同的阶段，第一个是我们提到的 Leader 宕机需要重新选举，第二则是当 Zookeeper 启动时需要进行系统的 Leader 初始化选举。下面我先来介绍一下 ZAB 是如何进行初始化选举的。\"},\"4361\":{\"t\":\"假设我们集群中有3台机器，那也就意味着我们需要两台以上同意（超过半数）。比如这个时候我们启动了 server1 ，它会首先 投票给自己 ，投票内容为服务器的 myid 和 ZXID ，因为初始化所以 ZXID 都为0，此时 server1 发出的投票为 (1,0)。但此时 server1 的投票仅为1，所以不能作为 Leader ，此时还在选举阶段所以整个集群处于 Looking 状态。\"},\"4362\":{\"t\":\"接着 server2 启动了，它首先也会将投票选给自己(2,0)，并将投票信息广播出去（server1也会，只是它那时没有其他的服务器了），server1 在收到 server2 的投票信息后会将投票信息与自己的作比较。首先它会比较 ZXID ，ZXID 大的优先为 Leader，如果相同则比较 myid，myid 大的优先作为 Leader。所以此时server1 发现 server2 更适合做 Leader，它就会将自己的投票信息更改为(2,0)然后再广播出去，之后server2 收到之后发现和自己的一样无需做更改，并且自己的 投票已经超过半数 ，则 确定 server2 为 Leader，server1 也会将自己服务器设置为 Following 变为 Follower。整个服务器就从 Looking 变为了正常状态。\"},\"4363\":{\"t\":\"当 server3 启动发现集群没有处于 Looking 状态时，它会直接以 Follower 的身份加入集群。\"},\"4364\":{\"t\":\"还是前面三个 server 的例子，如果在整个集群运行的过程中 server2 挂了，那么整个集群会如何重新选举 Leader 呢？其实和初始化选举差不多。\"},\"4365\":{\"t\":\"首先毫无疑问的是剩下的两个 Follower 会将自己的状态 从 Following 变为 Looking 状态 ，然后每个 server 会向初始化投票一样首先给自己投票（这不过这里的 zxid 可能不是0了，这里为了方便随便取个数字）。\"},\"4366\":{\"t\":\"假设 server1 给自己投票为(1,99)，然后广播给其他 server，server3 首先也会给自己投票(3,95)，然后也广播给其他 server。server1 和 server3 此时会收到彼此的投票信息，和一开始选举一样，他们也会比较自己的投票和收到的投票（zxid 大的优先，如果相同那么就 myid 大的优先）。这个时候 server1 收到了 server3 的投票发现没自己的合适故不变，server3 收到 server1 的投票结果后发现比自己的合适于是更改投票为(1,99)然后广播出去，最后 server1 收到了发现自己的投票已经超过半数就把自己设为 Leader，server3 也随之变为 Follower。\"},\"4367\":{\"t\":\"请注意 ZooKeeper 为什么要设置奇数个结点？比如这里我们是三个，挂了一个我们还能正常工作，挂了两个我们就不能正常工作了（已经没有超过半数的节点数了，所以无法进行投票等操作了）。而假设我们现在有四个，挂了一个也能工作，但是挂了两个也不能正常工作了，这是和三个一样的，而三个比四个还少一个，带来的效益是一样的，所以 Zookeeper 推荐奇数个 server 。\"},\"4368\":{\"t\":\"那么说完了 ZAB 中的 Leader 选举方式之后我们再来了解一下 崩溃恢复 是什么玩意？\"},\"4369\":{\"t\":\"其实主要就是 当集群中有机器挂了，我们整个集群如何保证数据一致性？\"},\"4370\":{\"t\":\"如果只是 Follower 挂了，而且挂的没超过半数的时候，因为我们一开始讲了在 Leader 中会维护队列，所以不用担心后面的数据没接收到导致数据不一致性。\"},\"4371\":{\"t\":\"如果 Leader 挂了那就麻烦了，我们肯定需要先暂停服务变为 Looking 状态然后进行 Leader 的重新选举（上面我讲过了），但这个就要分为两种情况了，分别是 确保已经被Leader提交的提案最终能够被所有的Follower提交 和 跳过那些已经被丢弃的提案 。\"},\"4372\":{\"t\":\"确保已经被Leader提交的提案最终能够被所有的Follower提交是什么意思呢？\"},\"4373\":{\"t\":\"假设 Leader (server2) 发送 commit 请求（忘了请看上面的消息广播模式），他发送给了 server3，然后要发给 server1 的时候突然挂了。这个时候重新选举的时候我们如果把 server1 作为 Leader 的话，那么肯定会产生数据不一致性，因为 server3 肯定会提交刚刚 server2 发送的 commit 请求的提案，而 server1 根本没收到所以会丢弃。\"},\"4374\":{\"t\":\"崩溃恢复\"},\"4375\":{\"t\":\"那怎么解决呢？\"},\"4376\":{\"t\":\"聪明的同学肯定会质疑，这个时候 server1 已经不可能成为 Leader 了，因为 server1 和 server3 进行投票选举的时候会比较 ZXID ，而此时 server3 的 ZXID 肯定比 server1 的大了。(不理解可以看前面的选举算法)\"},\"4377\":{\"t\":\"那么跳过那些已经被丢弃的提案又是什么意思呢？\"},\"4378\":{\"t\":\"假设 Leader (server2) 此时同意了提案N1，自身提交了这个事务并且要发送给所有 Follower 要 commit 的请求，却在这个时候挂了，此时肯定要重新进行 Leader 的选举，比如说此时选 server1 为 Leader （这无所谓）。但是过了一会，这个 挂掉的 Leader 又重新恢复了 ，此时它肯定会作为 Follower 的身份进入集群中，需要注意的是刚刚 server2 已经同意提交了提案N1，但其他 server 并没有收到它的 commit 信息，所以其他 server 不可能再提交这个提案N1了，这样就会出现数据不一致性问题了，所以 该提案N1最终需要被抛弃掉 。\"},\"4379\":{\"t\":\"崩溃恢复\"},\"4380\":{\"h\":\"CAP\",\"a\":\"cap\"},\"4381\":{\"h\":\"简介\",\"a\":\"简介\"},\"4382\":{\"t\":\"CAP 也就是 Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性） 这三个单词首字母组合。\"},\"4383\":{\"t\":\"img\"},\"4384\":{\"t\":\"在理论计算机科学中，CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能同时满足以下三点中的两个：\"},\"4385\":{\"t\":\"一致性（Consistency） : 所有节点访问同一份最新的数据副本\"},\"4386\":{\"t\":\"可用性（Availability）: 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\"},\"4387\":{\"t\":\"分区容错性（Partition Tolerance） : 分布式系统出现网络分区的时候，仍然能够对外提供服务。\"},\"4388\":{\"t\":\"什么是网络分区？\"},\"4389\":{\"t\":\"分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫 网络分区。\"},\"4390\":{\"h\":\"不是所谓的“3 选 2”\",\"a\":\"不是所谓的-3-选-2\"},\"4391\":{\"t\":\"大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。\"},\"4392\":{\"t\":\"当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。\"},\"4393\":{\"t\":\"简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。\"},\"4394\":{\"t\":\"因此，分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。 比如 ZooKeeper 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。\"},\"4395\":{\"t\":\"为啥不可能选择 CA 架构呢？ 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。\"},\"4396\":{\"t\":\"选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。\"},\"4397\":{\"t\":\"另外，需要补充说明的一点是： 如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。\"},\"4398\":{\"h\":\"操作系统\"},\"4399\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"4400\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"4401\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"4402\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"4403\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"4404\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"4405\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"4406\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"4407\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"4408\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"4409\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"4410\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"4411\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"4412\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"4413\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"4414\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"4415\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"4416\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"4417\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"4418\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"4419\":{\"t\":\"锁：加锁、解锁操作；\"},\"4420\":{\"t\":\"信号量：P、V 操作；\"},\"4421\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"4422\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"4423\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"4424\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"4425\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"4426\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"4427\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"4428\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"4429\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"4430\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"4431\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"4432\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"4433\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"4434\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"4435\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"4436\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"4437\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"4438\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"4439\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"4440\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"4441\":{\"t\":\"img\"},\"4442\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"4443\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"4444\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"4445\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"4446\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"4447\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"4448\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"4449\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"4450\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"4451\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"4452\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"4453\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"4454\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"4455\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"4456\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"4457\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"4458\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"4459\":{\"t\":\"mmap + write\"},\"4460\":{\"t\":\"sendfile\"},\"4461\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"4462\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"4463\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"4464\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"4465\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"4466\":{\"t\":\"img\"},\"4467\":{\"t\":\"具体过程如下：\"},\"4468\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"4469\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"4470\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"4471\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"4472\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"4473\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"4474\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"4475\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"4476\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"4477\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"4478\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"4479\":{\"t\":\"img\"},\"4480\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"4481\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"4482\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"4483\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"4484\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"4485\":{\"t\":\"img\"},\"4486\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"4487\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"4488\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"4489\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"4490\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"4491\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"4492\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"4493\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"4494\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"4495\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"4496\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"4497\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"4498\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"4499\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"4500\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"4501\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"4502\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"4503\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"4504\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"4505\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"4506\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"4507\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"4508\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"4509\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"4510\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"4511\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"4512\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"4513\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"4514\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"4515\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"4516\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"4517\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"4518\":{\"t\":\"img\"},\"4519\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"4520\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"4521\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"4522\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"4523\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"4524\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"4525\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"4526\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"4527\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"4528\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"4529\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"4530\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"4531\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"4532\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"4533\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"4534\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"4535\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"4536\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"4537\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"4538\":{\"t\":\"img\"},\"4539\":{\"t\":\"详细说一下这个方案：\"},\"4540\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"4541\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"4542\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"4543\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"4544\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"4545\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"4546\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"4547\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"4548\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"4549\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"4550\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"4551\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"4552\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"4553\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"4554\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"4555\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"4556\":{\"t\":\"img\"},\"4557\":{\"t\":\"方案详细说明如下：\"},\"4558\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"4559\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"4560\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"4561\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"4562\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"4563\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"4564\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"4565\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"4566\":{\"h\":\"MySQL\"},\"4567\":{\"h\":\"MySQL\",\"a\":\"mysql\"},\"4568\":{\"h\":\"InnoDB特性\",\"a\":\"innodb特性\"},\"4569\":{\"h\":\"MyISAM 和 InnoDB 有什么区别？\",\"a\":\"myisam-和-innodb-有什么区别\"},\"4570\":{\"t\":\"MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，可谓是风光一时。\"},\"4571\":{\"t\":\"虽然，MyISAM 的性能还行，各种特性也还不错（比如全文索引、压缩、空间函数等）。但是，MyISAM 不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。\"},\"4572\":{\"t\":\"MySQL 5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。\"},\"4573\":{\"t\":\"言归正传！咱们下面还是来简单对比一下两者：\"},\"4574\":{\"t\":\"1.是否支持行级锁\"},\"4575\":{\"t\":\"MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。\"},\"4576\":{\"t\":\"也就说，MyISAM 一锁就是锁住了整张表，这在并发写的情况下是多么滴憨憨啊！这也是为什么 InnoDB 在并发写的时候，性能更牛皮了！\"},\"4577\":{\"t\":\"2.是否支持事务\"},\"4578\":{\"t\":\"MyISAM 不提供事务支持。\"},\"4579\":{\"t\":\"InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别，具有提交(commit)和回滚(rollback)事务的能力。并且，InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）。\"},\"4580\":{\"t\":\"3.是否支持外键\"},\"4581\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"4582\":{\"t\":\"外键对于维护数据一致性非常有帮助，但是对性能有一定的损耗。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，在业务代码中进行约束即可！\"},\"4583\":{\"t\":\"阿里的《Java 开发手册》也是明确规定禁止使用外键的。\"},\"4584\":{\"t\":\"4.是否支持数据库异常崩溃后的安全恢复\"},\"4585\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"4586\":{\"t\":\"使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 redo log 。\"},\"4587\":{\"t\":\"5.是否支持 MVCC\"},\"4588\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"4589\":{\"t\":\"讲真，这个对比有点废话，毕竟 MyISAM 连行级锁都不支持。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能。\"},\"4590\":{\"t\":\"6.索引实现不一样。\"},\"4591\":{\"t\":\"虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。\"},\"4592\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。\"},\"4593\":{\"h\":\"索引\",\"a\":\"索引\"},\"4594\":{\"t\":\"索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。\"},\"4595\":{\"h\":\"底层数据结构：\",\"a\":\"底层数据结构\"},\"4596\":{\"t\":\"Hash 表\"},\"4597\":{\"t\":\"哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。\"},\"4598\":{\"t\":\"为何能够通过 key 快速取出 value 呢？ 原因在于 哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。\"},\"4599\":{\"t\":\"既然哈希表这么快，为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。\"},\"4600\":{\"t\":\"B 树& B+树\"},\"4601\":{\"t\":\"B 树也称 B-树,全称为 多路平衡查找树 ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 Balanced （平衡）的意思。\"},\"4602\":{\"t\":\"目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。\"},\"4603\":{\"t\":\"B 树& B+树两者有何异同呢？\"},\"4604\":{\"t\":\"B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\"},\"4605\":{\"t\":\"B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。\"},\"4606\":{\"t\":\"B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\"},\"4607\":{\"t\":\"在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）\"},\"4608\":{\"t\":\"MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引（非聚集索引）”。\"},\"4609\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“聚簇索引（聚集索引）”，而其余的索引都作为 辅助索引 ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。\"},\"4610\":{\"h\":\"类型总结\",\"a\":\"类型总结\"},\"4611\":{\"t\":\"按照数据结构维度划分：\"},\"4612\":{\"t\":\"BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。\"},\"4613\":{\"t\":\"哈希索引：类似键值对的形式，一次即可定位。\"},\"4614\":{\"t\":\"RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"4615\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"4616\":{\"t\":\"按照底层存储方式角度划分：\"},\"4617\":{\"t\":\"聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。\"},\"4618\":{\"t\":\"非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"4619\":{\"t\":\"按照应用维度划分：\"},\"4620\":{\"t\":\"主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。\"},\"4621\":{\"t\":\"普通索引：仅加速查询。\"},\"4622\":{\"t\":\"唯一索引：加速查询 + 列值唯一（可以有 NULL）。\"},\"4623\":{\"t\":\"覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。\"},\"4624\":{\"t\":\"联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。\"},\"4625\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"4626\":{\"h\":\"主键索引：\",\"a\":\"主键索引\"},\"4627\":{\"t\":\"数据表的主键列使用的就是主键索引。\"},\"4628\":{\"t\":\"一张数据表有只能有一个主键，并且主键不能为 null，不能重复。\"},\"4629\":{\"t\":\"在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。\"},\"4630\":{\"t\":\"img\"},\"4631\":{\"h\":\"二级索引：\",\"a\":\"二级索引\"},\"4632\":{\"t\":\"二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。\"},\"4633\":{\"t\":\"唯一索引，普通索引，前缀索引等索引属于二级索引。\"},\"4634\":{\"t\":\"PS: 不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。\"},\"4635\":{\"t\":\"唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。\"},\"4636\":{\"t\":\"普通索引(Index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。\"},\"4637\":{\"t\":\"前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。\"},\"4638\":{\"t\":\"全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。\"},\"4639\":{\"t\":\"img\"},\"4640\":{\"h\":\"聚簇索引：\",\"a\":\"聚簇索引\"},\"4641\":{\"t\":\"聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。\"},\"4642\":{\"t\":\"在 MySQL 中，InnoDB 引擎的表的 .ibd文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。\"},\"4643\":{\"t\":\"优点 ：\"},\"4644\":{\"t\":\"查询速度非常快 ：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。\"},\"4645\":{\"t\":\"对排序查找和范围查找优化 ：聚簇索引对于主键的排序查找和范围查找速度非常快。\"},\"4646\":{\"t\":\"缺点 ：\"},\"4647\":{\"t\":\"依赖于有序的数据 ：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。\"},\"4648\":{\"t\":\"更新代价大 ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。\"},\"4649\":{\"h\":\"非聚簇索引：\",\"a\":\"非聚簇索引\"},\"4650\":{\"t\":\"非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"4651\":{\"t\":\"非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。\"},\"4652\":{\"t\":\"优点 ：\"},\"4653\":{\"t\":\"更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的\"},\"4654\":{\"t\":\"缺点 ：\"},\"4655\":{\"t\":\"依赖于有序的数据 ：跟聚簇索引一样，非聚簇索引也依赖于有序的数据\"},\"4656\":{\"t\":\"可能会二次查询(回表) ：这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。\"},\"4657\":{\"h\":\"覆盖索引：\",\"a\":\"覆盖索引\"},\"4658\":{\"t\":\"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 覆盖索引（Covering Index） 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！\"},\"4659\":{\"t\":\"覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。\"},\"4660\":{\"t\":\"如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。\"},\"4661\":{\"h\":\"联合索引：\",\"a\":\"联合索引\"},\"4662\":{\"t\":\"使用表中的多个字段创建索引，就是 联合索引，也叫 组合索引 或 复合索引。\"},\"4663\":{\"t\":\"最左前缀匹配原则\"},\"4664\":{\"t\":\"最左前缀匹配原则指的是，在使用联合索引时，MySQL 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 >、<）才会停止匹配。对于 >=、<=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。\"},\"4665\":{\"t\":\"索引下推\"},\"4666\":{\"t\":\"索引下推（Index Condition Pushdown） 是 MySQL 5.6 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。\"},\"4667\":{\"h\":\"正确使用索引的一些建议：\",\"a\":\"正确使用索引的一些建议\"},\"4668\":{\"t\":\"选择合适的字段创建索引：\"},\"4669\":{\"t\":\"不为 NULL 的字段 ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。\"},\"4670\":{\"t\":\"被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。\"},\"4671\":{\"t\":\"被作为条件查询的字段 ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。\"},\"4672\":{\"t\":\"频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。\"},\"4673\":{\"t\":\"被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。\"},\"4674\":{\"t\":\"被频繁更新的字段应该慎重建立索引：\"},\"4675\":{\"t\":\"虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。\"},\"4676\":{\"t\":\"限制每张表上的索引数量：\"},\"4677\":{\"t\":\"索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。\"},\"4678\":{\"t\":\"索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。\"},\"4679\":{\"t\":\"因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。\"},\"4680\":{\"t\":\"尽可能的考虑建立联合索引而不是单列索引：\"},\"4681\":{\"t\":\"因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。\"},\"4682\":{\"t\":\"注意避免冗余索引：\"},\"4683\":{\"t\":\"冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\"},\"4684\":{\"t\":\"字符串类型的字段使用前缀索引代替普通索引：\"},\"4685\":{\"t\":\"前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。\"},\"4686\":{\"t\":\"避免索引失效：\"},\"4687\":{\"t\":\"索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：\"},\"4688\":{\"t\":\"使用 SELECT * 进行查询;\"},\"4689\":{\"t\":\"创建了组合索引，但查询条件未遵守最左匹配原则;\"},\"4690\":{\"t\":\"在索引列上进行计算、函数、类型转换等操作;\"},\"4691\":{\"t\":\"以 % 开头的 LIKE 查询比如 like '%abc';\"},\"4692\":{\"t\":\"查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;\"},\"4693\":{\"t\":\"发生隐式转换\"},\"4694\":{\"h\":\"锁机制\",\"a\":\"锁机制\"},\"4695\":{\"t\":\"在 MySQL 里，根据加锁的范围，可以分为全局锁、表级锁和行锁三类。\"},\"4696\":{\"t\":\"img\"},\"4697\":{\"h\":\"全局锁：\",\"a\":\"全局锁\"},\"4698\":{\"t\":\"要使用全局锁，则要执行这条命令：\"},\"4699\":{\"t\":\"flush tables with read lock \"},\"4700\":{\"t\":\"执行后，整个数据库就处于只读状态了，这时其他线程执行以下操作，都会被阻塞：\"},\"4701\":{\"t\":\"对数据的增删改操作，比如 insert、delete、update等语句；\"},\"4702\":{\"t\":\"对表结构的更改操作，比如 alter table、drop table 等语句。\"},\"4703\":{\"t\":\"如果要释放全局锁，则要执行这条命令：\"},\"4704\":{\"t\":\"unlock tables \"},\"4705\":{\"t\":\"全局锁应用场景是什么？\"},\"4706\":{\"t\":\"全局锁主要应用于做全库逻辑备份，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。\"},\"4707\":{\"t\":\"加全局锁又会带来什么缺点呢？\"},\"4708\":{\"t\":\"加上全局锁，意味着整个数据库都是只读状态。\"},\"4709\":{\"t\":\"那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。\"},\"4710\":{\"t\":\"既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？\"},\"4711\":{\"t\":\"有的，如果数据库的引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。\"},\"4712\":{\"t\":\"因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。\"},\"4713\":{\"t\":\"备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 –single-transaction 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。\"},\"4714\":{\"t\":\"InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。\"},\"4715\":{\"t\":\"但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。\"},\"4716\":{\"h\":\"表级锁：\",\"a\":\"表级锁\"},\"4717\":{\"t\":\"MySQL 里面表级别的锁有这几种：\"},\"4718\":{\"t\":\"表锁；\"},\"4719\":{\"t\":\"元数据锁（MDL）;\"},\"4720\":{\"t\":\"意向锁；\"},\"4721\":{\"t\":\"AUTO-INC 锁；\"},\"4722\":{\"h\":\"表锁\",\"a\":\"表锁\"},\"4723\":{\"t\":\"先来说说表锁。\"},\"4724\":{\"t\":\"如果我们想对学生表（t_student）加表锁，可以使用下面的命令：\"},\"4725\":{\"t\":\"//表级别的共享锁，也就是读锁； lock tables t_student read; //表级别的独占锁，也就是写锁； lock tables t_stuent write; \"},\"4726\":{\"t\":\"需要注意的是，表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。\"},\"4727\":{\"t\":\"也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放。\"},\"4728\":{\"t\":\"要释放表锁，可以使用下面这条命令，会释放当前会话的所有表锁：\"},\"4729\":{\"t\":\"unlock tables \"},\"4730\":{\"t\":\"另外，当会话退出后，也会释放所有表锁。\"},\"4731\":{\"t\":\"不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁。\"},\"4732\":{\"h\":\"元数据锁\",\"a\":\"元数据锁\"},\"4733\":{\"t\":\"再来说说元数据锁（MDL）。\"},\"4734\":{\"t\":\"我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：\"},\"4735\":{\"t\":\"对一张表进行 CRUD 操作时，加的是 MDL 读锁；\"},\"4736\":{\"t\":\"对一张表做结构变更操作的时候，加的是 MDL 写锁；\"},\"4737\":{\"t\":\"MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。\"},\"4738\":{\"t\":\"当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。\"},\"4739\":{\"t\":\"反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。\"},\"4740\":{\"t\":\"MDL 不需要显示调用，那它是在什么时候释放的?\"},\"4741\":{\"t\":\"MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。\"},\"4742\":{\"t\":\"那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），那在对表结构做变更操作的时候，可能会发生意想不到的事情，比如下面这个顺序的场景：\"},\"4743\":{\"t\":\"首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；\"},\"4744\":{\"t\":\"然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；\"},\"4745\":{\"t\":\"接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，\"},\"4746\":{\"t\":\"那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。\"},\"4747\":{\"t\":\"为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？\"},\"4748\":{\"t\":\"这是因为申请 MDL 锁的操作会形成一个队列，队列中写锁获取优先级高于读锁，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。\"},\"4749\":{\"t\":\"所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。\"},\"4750\":{\"h\":\"意向锁\",\"a\":\"意向锁\"},\"4751\":{\"t\":\"接着，说说意向锁。\"},\"4752\":{\"t\":\"在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；\"},\"4753\":{\"t\":\"在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；\"},\"4754\":{\"t\":\"也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。\"},\"4755\":{\"t\":\"而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。\"},\"4756\":{\"t\":\"不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：\"},\"4757\":{\"t\":\"//先在表上加上意向共享锁，然后对读取的记录加共享锁 select ... lock in share mode; //先表上加上意向独占锁，然后对读取的记录加独占锁 select ... for update; \"},\"4758\":{\"t\":\"意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables ... read*）和独占表锁（*lock tables ... write*）发生冲突。\"},\"4759\":{\"t\":\"表锁和行锁是满足读读共享、读写互斥、写写互斥的。\"},\"4760\":{\"t\":\"如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。\"},\"4761\":{\"t\":\"那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。\"},\"4762\":{\"t\":\"所以，意向锁的目的是为了快速判断表里是否有记录被加锁。\"},\"4763\":{\"h\":\"AUTO-INC 锁\",\"a\":\"auto-inc-锁\"},\"4764\":{\"t\":\"表里的主键通常都会设置成自增的，这是通过对主键字段声明 AUTO_INCREMENT 属性实现的。\"},\"4765\":{\"t\":\"之后可以在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 AUTO-INC 锁实现的。\"},\"4766\":{\"t\":\"AUTO-INC 锁是特殊的表锁机制，锁不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放。\"},\"4767\":{\"t\":\"在插入数据时，会加一个表级别的 AUTO-INC 锁，然后为被 AUTO_INCREMENT 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。\"},\"4768\":{\"t\":\"那么，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 AUTO_INCREMENT 修饰的字段的值是连续递增的。\"},\"4769\":{\"t\":\"但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。\"},\"4770\":{\"t\":\"因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种轻量级的锁来实现自增。\"},\"4771\":{\"t\":\"一样也是在插入数据的时候，会为被 AUTO_INCREMENT 修饰的字段加上轻量级锁，然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁。\"},\"4772\":{\"t\":\"InnoDB 存储引擎提供了个 innodb_autoinc_lock_mode 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。\"},\"4773\":{\"t\":\"当 innodb_autoinc_lock_mode = 0，就采用 AUTO-INC 锁，语句执行结束后才释放锁；\"},\"4774\":{\"t\":\"当 innodb_autoinc_lock_mode = 2，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。\"},\"4775\":{\"t\":\"当 innodb_autoinc_lock_mode = 1： \"},\"4776\":{\"t\":\"普通 insert 语句，自增锁在申请之后就马上释放；\"},\"4777\":{\"t\":\"类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；\"},\"4778\":{\"t\":\"当 innodb_autoinc_lock_mode = 2 是性能最高的方式，但是当搭配 binlog 的日志格式是 statement 一起使用的时候，在「主从复制的场景」中会发生数据不一致的问题。\"},\"4779\":{\"t\":\"要解决这问题，binlog 日志格式要设置为 row，这样在 binlog 里面记录的是主库分配的自增值，到备库执行的时候，主库的自增值是什么，从库的自增值就是什么。\"},\"4780\":{\"t\":\"所以，当 innodb_autoinc_lock_mode = 2 时，并且 binlog_format = row，既能提升并发性，又不会出现数据一致性问题。\"},\"4781\":{\"h\":\"行级锁：\",\"a\":\"行级锁\"},\"4782\":{\"t\":\"InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。\"},\"4783\":{\"t\":\"前面也提到，普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为锁定读。\"},\"4784\":{\"t\":\"//对读取的记录加共享锁 select ... lock in share mode; //对读取的记录加独占锁 select ... for update; \"},\"4785\":{\"t\":\"上面这两条语句必须在一个事务中，因为当事务提交了，锁就会被释放，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。\"},\"4786\":{\"t\":\"共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。\"},\"4787\":{\"t\":\"img\"},\"4788\":{\"t\":\"行级锁的类型主要有三类：\"},\"4789\":{\"t\":\"Record Lock，记录锁，也就是仅仅把一条记录锁上；\"},\"4790\":{\"t\":\"Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"},\"4791\":{\"t\":\"Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"4792\":{\"h\":\"Record Lock\",\"a\":\"record-lock\"},\"4793\":{\"t\":\"Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：\"},\"4794\":{\"t\":\"当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;\"},\"4795\":{\"t\":\"当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。\"},\"4796\":{\"h\":\"Gap Lock\",\"a\":\"gap-lock\"},\"4797\":{\"t\":\"Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。\"},\"4798\":{\"t\":\"假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。\"},\"4799\":{\"t\":\"间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。\"},\"4800\":{\"h\":\"Next-Key Lock\",\"a\":\"next-key-lock\"},\"4801\":{\"t\":\"Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"4802\":{\"t\":\"所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。\"},\"4803\":{\"t\":\"next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。\"},\"4804\":{\"t\":\"比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。\"},\"4805\":{\"t\":\"虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。\"},\"4806\":{\"h\":\"插入意向锁\",\"a\":\"插入意向锁\"},\"4807\":{\"t\":\"一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。\"},\"4808\":{\"t\":\"如果有的话，插入操作就会发生阻塞，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个插入意向锁，表明有事务想在某个区间插入新记录，但是现在处于等待状态。\"},\"4809\":{\"t\":\"插入意向锁名字虽然有意向锁，但是它并不是意向锁，它是一种特殊的间隙锁，属于行级别锁。\"},\"4810\":{\"t\":\"如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。\"},\"4811\":{\"t\":\"插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。\"},\"4812\":{\"h\":\"ACID事务\",\"a\":\"acid事务\"},\"4813\":{\"t\":\"事务是由 MySQL 的引擎来实现的，我们常见的 InnoDB 引擎它是支持事务的。\"},\"4814\":{\"t\":\"不过并不是所有的引擎都能支持事务，比如 MySQL 原生的 MyISAM 引擎就不支持事务，也正是这样，所以大多数 MySQL 的引擎都是用 InnoDB。\"},\"4815\":{\"t\":\"事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：\"},\"4816\":{\"t\":\"原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。\"},\"4817\":{\"t\":\"一致性（Consistency）：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。\"},\"4818\":{\"t\":\"隔离性（Isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。\"},\"4819\":{\"t\":\"持久性（Durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\"},\"4820\":{\"t\":\"InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？\"},\"4821\":{\"t\":\"持久性是通过 redo log （重做日志）来保证的；\"},\"4822\":{\"t\":\"原子性是通过 undo log（回滚日志） 来保证的；\"},\"4823\":{\"t\":\"隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；\"},\"4824\":{\"t\":\"一致性则是通过持久性+原子性+隔离性来保证；\"},\"4825\":{\"h\":\"脏读\",\"a\":\"脏读\"},\"4826\":{\"t\":\"如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。\"},\"4827\":{\"t\":\"举个栗子。\"},\"4828\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后再执行更新操作，如果此时事务 A 还没有提交事务，而此时正好事务 B 也从数据库中读取小林的余额数据，那么事务 B 读取到的余额数据是刚才事务 A 更新后的数据，即使没有提交事务。\"},\"4829\":{\"t\":\"因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。\"},\"4830\":{\"h\":\"不可重复读\",\"a\":\"不可重复读\"},\"4831\":{\"t\":\"在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。\"},\"4832\":{\"t\":\"举个栗子。\"},\"4833\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后继续执行代码逻辑处理，在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为不可重复读。\"},\"4834\":{\"h\":\"幻读\",\"a\":\"幻读\"},\"4835\":{\"t\":\"在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。\"},\"4836\":{\"t\":\"举个栗子。\"},\"4837\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库查询账户余额大于 100 万的记录，发现共有 5 条，然后事务 B 也按相同的搜索条件也是查询出了 5 条记录。\"},\"4838\":{\"t\":\"接下来，事务 A 插入了一条余额超过 100 万的账号，并提交了事务，此时数据库超过 100 万余额的账号个数就变为 6。\"},\"4839\":{\"t\":\"然后事务 B 再次查询账户余额大于 100 万的记录，此时查询到的记录数量有 6 条，发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。\"},\"4840\":{\"h\":\"四大隔离级别\",\"a\":\"四大隔离级别\"},\"4841\":{\"t\":\"SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：\"},\"4842\":{\"t\":\"读未提交（*read uncommitted*），指一个事务还没提交时，它做的变更就能被其他事务看到；\"},\"4843\":{\"t\":\"读提交（*read committed*），指一个事务提交之后，它做的变更才能被其他事务看到；\"},\"4844\":{\"t\":\"可重复读（*repeatable read*），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别；\"},\"4845\":{\"t\":\"串行化（*serializable* ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\"},\"4846\":{\"t\":\"按隔离水平高低排序如下：\"},\"4847\":{\"t\":\"图片\"},\"4848\":{\"t\":\"针对不同的隔离级别，并发事务时可能发生的现象也会不同。也就是说：\"},\"4849\":{\"t\":\"在「读未提交」隔离级别下，可能发生脏读、不可重复读和幻读现象；\"},\"4850\":{\"t\":\"在「读提交」隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；\"},\"4851\":{\"t\":\"在「可重复读」隔离级别下，可能发生幻读现象，但是不可能脏读和不可重复读现象；\"},\"4852\":{\"t\":\"在「串行化」隔离级别下，脏读、不可重复读和幻读现象都不可能会发生。\"},\"4853\":{\"t\":\"所以，要解决脏读现象，就要升级到「读提交」以上的隔离级别；要解决不可重复读现象，就要升级到「可重复读」的隔离级别，要解决幻读现象不建议将隔离级别升级到「串行化」。\"},\"4854\":{\"t\":\"不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，我们讨论的 MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入。\"},\"4855\":{\"t\":\"MySQL 在「可重复读」隔离级别下，可以很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能。\"},\"4856\":{\"t\":\"MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象，解决的方案有两种：\"},\"4857\":{\"t\":\"针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\"},\"4858\":{\"t\":\"针对当前读（select ... for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\"},\"4859\":{\"t\":\"这四种隔离级别具体是如何实现的呢？\"},\"4860\":{\"t\":\"对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；\"},\"4861\":{\"t\":\"对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；\"},\"4862\":{\"t\":\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View。\"},\"4863\":{\"h\":\"MVCC\",\"a\":\"mvcc\"},\"4864\":{\"t\":\"MVCC 的实现依赖于：隐藏字段、Read View、undo log。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改\"},\"4865\":{\"t\":\"隐藏字段\"},\"4866\":{\"t\":\"在内部，InnoDB 存储引擎为每行数据添加了三个 隐藏字段：\"},\"4867\":{\"t\":\"DB_TRX_ID（6字节）：表示最后一次插入或更新该行的事务 id。此外，delete 操作在内部被视为更新，只不过会在记录头 Record header 中的 deleted_flag 字段将其标记为已删除\"},\"4868\":{\"t\":\"DB_ROLL_PTR（7字节） 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空\"},\"4869\":{\"t\":\"DB_ROW_ID（6字节）：如果没有设置主键且该表没有唯一非空索引时，InnoDB 会使用该 id 来生成聚簇索引\"},\"4870\":{\"t\":\"ReadView主要是用来做可见性判断，里面保存了 “当前对本事务不可见的其他活跃事务”\"},\"4871\":{\"t\":\" trx_id_t m_low_limit_id; /* 大于等于这个 ID 的事务均不可见 */ trx_id_t m_up_limit_id; /* 小于这个 ID 的事务均可见 */ trx_id_t m_creator_trx_id; /* 创建该 Read View 的事务ID */ trx_id_t m_low_limit_no; /* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */ ids_t m_ids; /* 创建 Read View 时的活跃事务列表 */ \"},\"4872\":{\"t\":\"主要有以下字段：\"},\"4873\":{\"t\":\"m_low_limit_id：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见\"},\"4874\":{\"t\":\"m_up_limit_id：活跃事务列表 m_ids 中最小的事务 ID，如果 m_ids 为空，则 m_up_limit_id 为 m_low_limit_id。小于这个 ID 的数据版本均可见\"},\"4875\":{\"t\":\"m_ids：Read View 创建时其他未提交的活跃事务 ID 列表。创建 Read View时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。m_ids 不包括当前事务自己和已提交的事务（正在内存中）\"},\"4876\":{\"t\":\"m_creator_trx_id：创建该 Read View 的事务 ID\"},\"4877\":{\"t\":\"trans_visible\"},\"4878\":{\"h\":\"undo-log\",\"a\":\"undo-log\"},\"4879\":{\"t\":\"undo log 主要有两个作用：\"},\"4880\":{\"t\":\"当事务回滚时用于将数据恢复到修改前的样子\"},\"4881\":{\"t\":\"另一个作用是 MVCC ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 undo log 读取之前的版本数据，以此实现非锁定读\"},\"4882\":{\"t\":\"在 InnoDB 存储引擎中 undo log 分为两种： insert undo log 和 update undo log：\"},\"4883\":{\"t\":\"insert undo log ：指在 insert 操作中产生的 undo log。因为 insert 操作的记录只对事务本身可见，对其他事务不可见，故该 undo log 可以在事务提交后直接删除。不需要进行 purge 操作\"},\"4884\":{\"h\":\"Jdbc防止sql注入\",\"a\":\"jdbc防止sql注入\"},\"4885\":{\"t\":\"我们只需要使用PreparedStatement解决 将敏感字符进行转义。\"},\"4886\":{\"t\":\"我们可以看到输出的SQL文是把整个参数用引号包起来，并把参数中的引号作为转义字符，从而避免了参数也作为条件的一部分。\"},\"4887\":{\"t\":\"参考：https://blog.csdn.net/weixin_52258054/article/details/124891266\"},\"4888\":{\"h\":\"常见优化手段\",\"a\":\"常见优化手段\"},\"4889\":{\"h\":\"经常一起使用的列放到一个表中\",\"a\":\"经常一起使用的列放到一个表中\"},\"4890\":{\"t\":\"避免更多的关联操作。\"},\"4891\":{\"h\":\"禁止在数据库中存储文件（比如图片）这类大的二进制数据\",\"a\":\"禁止在数据库中存储文件-比如图片-这类大的二进制数据\"},\"4892\":{\"t\":\"在数据库中存储文件会严重影响数据库性能，消耗过多存储空间。\"},\"4893\":{\"t\":\"文件（比如图片）这类大的二进制数据通常存储于文件服务器，数据库只存储文件地址信息。\"},\"4894\":{\"h\":\"优先选择符合存储需要的最小的数据类型\",\"a\":\"优先选择符合存储需要的最小的数据类型\"},\"4895\":{\"t\":\"存储字节越小，占用也就空间越小，性能也越好。\"},\"4896\":{\"h\":\"同财务相关的金额类数据必须使用 decimal 类型\",\"a\":\"同财务相关的金额类数据必须使用-decimal-类型\"},\"4897\":{\"t\":\"非精准浮点 ：float,double\"},\"4898\":{\"t\":\"精准浮点 ：decimal\"},\"4899\":{\"t\":\"decimal 类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节。并且，decimal 可用于存储比 bigint 更大的整型数据\"},\"4900\":{\"t\":\"不过， 由于 decimal 需要额外的空间和计算开销，应该尽量只在需要对数据进行精确计算时才使用 decimal 。\"},\"4901\":{\"h\":\"单表不要包含过多字段\",\"a\":\"单表不要包含过多字段\"},\"4902\":{\"t\":\"如果一个表包含过多字段的话，可以考虑将其分解成多个表，必要时增加中间表进行关联。\"},\"4903\":{\"h\":\"禁止使用全文索引\",\"a\":\"禁止使用全文索引\"},\"4904\":{\"t\":\"全文索引不适用于 OLTP 场景。\"},\"4905\":{\"h\":\"禁止给表中的每一列都建立单独的索引\",\"a\":\"禁止给表中的每一列都建立单独的索引\"},\"4906\":{\"t\":\"5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。\"},\"4907\":{\"h\":\"每个 InnoDB 表必须有个主键\",\"a\":\"每个-innodb-表必须有个主键\"},\"4908\":{\"h\":\"禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询\",\"a\":\"禁止使用-select-必须使用-select-字段列表-查询\"},\"4909\":{\"t\":\"SELECT * 消耗更多的 CPU 和 IO 以网络带宽资源\"},\"4910\":{\"t\":\"SELECT * 无法使用覆盖索引\"},\"4911\":{\"t\":\"SELECT <字段列表> 可减少表结构变更带来的影响\"},\"4912\":{\"h\":\"避免使用子查询，可以把子查询优化为 join 操作\",\"a\":\"避免使用子查询-可以把子查询优化为-join-操作\"},\"4913\":{\"t\":\"通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。\"},\"4914\":{\"t\":\"子查询性能差的原因： 子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。\"},\"4915\":{\"h\":\"Redis\"},\"4916\":{\"h\":\"Redis\",\"a\":\"redis\"},\"4917\":{\"h\":\"Redis 为什么这么快？\",\"a\":\"redis-为什么这么快\"},\"4918\":{\"t\":\"Redis 内部做了非常多的性能优化，比较重要的主要有下面 3 点：\"},\"4919\":{\"t\":\"Redis 基于内存，内存的访问速度是磁盘的上千倍；\"},\"4920\":{\"t\":\"Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；\"},\"4921\":{\"t\":\"Redis 内置了多种优化过后的数据结构实现，性能非常高。\"},\"4922\":{\"h\":\"基本数据类型\",\"a\":\"基本数据类型\"},\"4923\":{\"t\":\"5 种基础数据类型 ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\"},\"4924\":{\"t\":\"3 种特殊数据类型 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。\"},\"4925\":{\"h\":\"数据结构及适用场景\",\"a\":\"数据结构及适用场景\"},\"4926\":{\"h\":\"String（字符串）：\",\"a\":\"string-字符串\"},\"4927\":{\"h\":\"数据结构：\",\"a\":\"数据结构\"},\"4928\":{\"t\":\"String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。\"},\"4929\":{\"t\":\"SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：\"},\"4930\":{\"t\":\"SDS 不仅可以保存文本数据，还可以保存二进制数据。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。\"},\"4931\":{\"t\":\"SDS 获取字符串长度的时间复杂度是 O(1)。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 len 属性记录了字符串长度，所以复杂度为 O(1)。\"},\"4932\":{\"t\":\"Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。\"},\"4933\":{\"h\":\"应用场景：\",\"a\":\"应用场景\"},\"4934\":{\"t\":\"常规数据（比如 session、token、序列化后的对象、图片的路径）的缓存；\"},\"4935\":{\"t\":\"计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；\"},\"4936\":{\"t\":\"分布式锁(利用 SETNX key value 命令可以实现一个最简易的分布式锁)；\"},\"4937\":{\"h\":\"List（列表）：\",\"a\":\"list-列表\"},\"4938\":{\"h\":\"数据结构：\",\"a\":\"数据结构-1\"},\"4939\":{\"t\":\"List 类型的底层数据结构是由双向链表或压缩列表实现的：\"},\"4940\":{\"t\":\"如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用压缩列表作为 List 类型的底层数据结构；\"},\"4941\":{\"t\":\"如果列表的元素不满足上面的条件，Redis 会使用双向链表作为 List 类型的底层数据结构；\"},\"4942\":{\"t\":\"但是在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表。\"},\"4943\":{\"h\":\"应用场景：\",\"a\":\"应用场景-1\"},\"4944\":{\"t\":\"消息队列，List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列；\"},\"4945\":{\"h\":\"Set（集合）：\",\"a\":\"set-集合\"},\"4946\":{\"h\":\"数据结构：\",\"a\":\"数据结构-2\"},\"4947\":{\"t\":\"Set 类型的底层数据结构是由哈希表或整数集合实现的：\"},\"4948\":{\"t\":\"如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用整数集合作为 Set 类型的底层数据结构；\"},\"4949\":{\"t\":\"如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构。\"},\"4950\":{\"h\":\"应用场景：\",\"a\":\"应用场景-2\"},\"4951\":{\"t\":\"点赞、共同关注；\"},\"4952\":{\"h\":\"Hash（散列）：\",\"a\":\"hash-散列\"},\"4953\":{\"h\":\"数据结构：\",\"a\":\"数据结构-3\"},\"4954\":{\"t\":\"Hash 类型的底层数据结构是由压缩列表或哈希表实现的：\"},\"4955\":{\"t\":\"如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用压缩列表作为 Hash 类型的底层数据结构；\"},\"4956\":{\"t\":\"如果哈希类型元素不满足上面条件，Redis 会使用哈希表作为 Hash 类型的 底层数据结构。\"},\"4957\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"4958\":{\"h\":\"应用场景：\",\"a\":\"应用场景-3\"},\"4959\":{\"t\":\"Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象以及购物车；\"},\"4960\":{\"h\":\"Zset（有序集合）：\",\"a\":\"zset-有序集合\"},\"4961\":{\"h\":\"数据结构：\",\"a\":\"数据结构-4\"},\"4962\":{\"t\":\"Zset 类型的底层数据结构是由压缩列表或跳表实现的：\"},\"4963\":{\"t\":\"如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构；\"},\"4964\":{\"t\":\"如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构；\"},\"4965\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"4966\":{\"h\":\"应用场景：\",\"a\":\"应用场景-4\"},\"4967\":{\"t\":\"有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。\"},\"4968\":{\"h\":\"持久化\",\"a\":\"持久化\"},\"4969\":{\"t\":\"Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:\"},\"4970\":{\"t\":\"快照（snapshotting，RDB）\"},\"4971\":{\"t\":\"只追加文件（append-only file, AOF）\"},\"4972\":{\"t\":\"RDB 和 AOF 的混合持久化(Redis 4.0 新增)\"},\"4973\":{\"h\":\"什么是 RDB 持久化？\",\"a\":\"什么是-rdb-持久化\"},\"4974\":{\"t\":\"Redis 可以通过创建快照来获得存储在内存里面的数据在 某个时间点 上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\"},\"4975\":{\"t\":\"快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\"},\"4976\":{\"t\":\"save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。 \"},\"4977\":{\"h\":\"RDB 创建快照时会阻塞主线程吗？\",\"a\":\"rdb-创建快照时会阻塞主线程吗\"},\"4978\":{\"t\":\"Redis 提供了两个命令来生成 RDB 快照文件：\"},\"4979\":{\"t\":\"save : 同步保存操作，会阻塞 Redis 主线程；\"},\"4980\":{\"t\":\"bgsave : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。\"},\"4981\":{\"h\":\"什么是 AOF 持久化？\",\"a\":\"什么是-aof-持久化\"},\"4982\":{\"t\":\"与快照持久化相比，AOF 持久化的实时性更好。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化（Redis 6.0 之后已经默认是开启了），可以通过 appendonly 参数开启：\"},\"4983\":{\"t\":\"appendonly yes \"},\"4984\":{\"t\":\"开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到 AOF 缓冲区 server.aof_buf 中，然后再写入到 AOF 文件中（此时还在系统内核缓存区为同步到磁盘），最后再根据持久化方式（ fsync策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中的。\"},\"4985\":{\"t\":\"只有同步到磁盘中才算持久化保存了，否则依然存在数据丢失的风险，比如说：系统内核缓存区的数据还未同步，磁盘机器就宕机了，那这部分数据就算丢失了。\"},\"4986\":{\"t\":\"AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\"},\"4987\":{\"h\":\"AOF 工作基本流程是怎样的？\",\"a\":\"aof-工作基本流程是怎样的\"},\"4988\":{\"t\":\"AOF 持久化功能的实现可以简单分为 5 步：\"},\"4989\":{\"t\":\"命令追加（append） ：所有的写命令会追加到 AOF 缓冲区中。\"},\"4990\":{\"t\":\"文件写入（write） ：将 AOF 缓冲区的数据写入到 AOF 文件中。这一步需要调用write函数（系统调用），write将数据写入到了系统内核缓冲区之后直接返回了（延迟写）。注意！！！此时并没有同步到磁盘。\"},\"4991\":{\"t\":\"文件同步（fsync） ：AOF 缓冲区根据对应的持久化方式（ fsync 策略）向硬盘做同步操作。这一步需要调用 fsync 函数（系统调用）， fsync 针对单个文件操作，对其进行强制硬盘同步，fsync 将阻塞直到写入磁盘完成后返回，保证了数据持久化。\"},\"4992\":{\"t\":\"文件重写（rewrite） ：随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。\"},\"4993\":{\"t\":\"重启加载（load） ：当 Redis 重启时，可以加载 AOF 文件进行数据恢复。\"},\"4994\":{\"t\":\"Linux 系统直接提供了一些函数用于对文件和设备进行访问和控制，这些函数被称为 系统调用（syscall）。\"},\"4995\":{\"t\":\"这里对上面提到的一些 Linux 系统调用再做一遍解释：\"},\"4996\":{\"t\":\"write ：写入系统内核缓冲区之后直接返回（仅仅是写到缓冲区），不会立即同步到硬盘。虽然提高了效率，但也带来了数据丢失的风险。同步硬盘操作通常依赖于系统调度机制，Linux 内核通常为 30s 同步一次，具体值取决于写出的数据量和 I/O 缓冲区的状态。\"},\"4997\":{\"t\":\"fsync ： fsync用于强制刷新系统内核缓冲区（同步到到磁盘），确保写磁盘操作结束才会返回。\"},\"4998\":{\"t\":\"AOF 工作流程图如下：\"},\"4999\":{\"t\":\"AOF 工作基本流程\"},\"5000\":{\"h\":\"删除与淘汰策略\",\"a\":\"删除与淘汰策略\"},\"5001\":{\"h\":\"过期的数据的删除策略了解么？\",\"a\":\"过期的数据的删除策略了解么\"},\"5002\":{\"t\":\"如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？\"},\"5003\":{\"t\":\"常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：\"},\"5004\":{\"t\":\"惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。\"},\"5005\":{\"t\":\"定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。\"},\"5006\":{\"t\":\"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性/懒汉式删除 。\"},\"5007\":{\"t\":\"但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。\"},\"5008\":{\"t\":\"怎么解决这个问题呢？答案就是：Redis 内存淘汰机制。\"},\"5009\":{\"h\":\"Redis 内存淘汰机制了解么？\",\"a\":\"redis-内存淘汰机制了解么\"},\"5010\":{\"t\":\"相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?\"},\"5011\":{\"t\":\"Redis 提供 6 种数据淘汰策略：\"},\"5012\":{\"t\":\"volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰。\"},\"5013\":{\"t\":\"volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰。\"},\"5014\":{\"t\":\"volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰。\"},\"5015\":{\"t\":\"allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。\"},\"5016\":{\"t\":\"allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰。\"},\"5017\":{\"t\":\"no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\"},\"5018\":{\"t\":\"4.0 版本后增加以下两种：\"},\"5019\":{\"t\":\"volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰。\"},\"5020\":{\"t\":\"allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。\"},\"5021\":{\"h\":\"主从复制\",\"a\":\"主从复制\"},\"5022\":{\"h\":\"哨兵\",\"a\":\"哨兵\"},\"5023\":{\"h\":\"缓存雪崩/击穿/穿透\",\"a\":\"缓存雪崩-击穿-穿透\"},\"5024\":{\"h\":\"什么是缓存穿透？\",\"a\":\"什么是缓存穿透\"},\"5025\":{\"t\":\"缓存穿透说简单点就是大量请求的 key 是不合理的，根本不存在于缓存中，也不存在于数据库中 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"5026\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法\"},\"5027\":{\"t\":\"最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。\"},\"5028\":{\"t\":\"1）缓存无效 key\"},\"5029\":{\"t\":\"如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： SET key value EX 10086 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。\"},\"5030\":{\"t\":\"2）布隆过滤器\"},\"5031\":{\"t\":\"布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。\"},\"5032\":{\"t\":\"具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\"},\"5033\":{\"t\":\"但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。\"},\"5034\":{\"t\":\"为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！\"},\"5035\":{\"t\":\"我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：\"},\"5036\":{\"t\":\"使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。\"},\"5037\":{\"t\":\"根据得到的哈希值，在位数组中把对应下标的值置为 1。\"},\"5038\":{\"t\":\"我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：\"},\"5039\":{\"t\":\"对给定元素再次进行相同的哈希计算；\"},\"5040\":{\"t\":\"得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。\"},\"5041\":{\"t\":\"然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）\"},\"5042\":{\"h\":\"什么是缓存击穿？\",\"a\":\"什么是缓存击穿\"},\"5043\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"5044\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-1\"},\"5045\":{\"t\":\"设置热点数据永不过期或者过期时间比较长。\"},\"5046\":{\"t\":\"针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。\"},\"5047\":{\"t\":\"请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。\"},\"5048\":{\"h\":\"缓存穿透和缓存击穿有什么区别？\",\"a\":\"缓存穿透和缓存击穿有什么区别\"},\"5049\":{\"t\":\"缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。\"},\"5050\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。\"},\"5051\":{\"h\":\"什么是缓存雪崩？\",\"a\":\"什么是缓存雪崩\"},\"5052\":{\"t\":\"我发现缓存雪崩这名字起的有点意思，哈哈。\"},\"5053\":{\"t\":\"实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。\"},\"5054\":{\"t\":\"另外，缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。\"},\"5055\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-2\"},\"5056\":{\"t\":\"针对 Redis 服务不可用的情况：\"},\"5057\":{\"t\":\"采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。\"},\"5058\":{\"t\":\"限流，避免同时处理大量的请求。\"},\"5059\":{\"t\":\"针对热点缓存失效的情况：\"},\"5060\":{\"t\":\"设置不同的失效时间比如随机设置缓存的失效时间。\"},\"5061\":{\"t\":\"缓存永不失效（不太推荐，实用性太差）。\"},\"5062\":{\"t\":\"设置二级缓存。\"},\"5063\":{\"h\":\"缓存雪崩和缓存击穿有什么区别？\",\"a\":\"缓存雪崩和缓存击穿有什么区别\"},\"5064\":{\"t\":\"缓存雪崩和缓存击穿比较像，但缓存雪崩导致的原因是缓存中的大量或者所有数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。\"},\"5065\":{\"h\":\"redis 6.0 多线程的实现机制：\",\"a\":\"redis-6-0-多线程的实现机制\"},\"5066\":{\"t\":\"https://blog.csdn.net/zhizhengguan/article/details/120627481\"},\"5067\":{\"h\":\"Kafka\"},\"5068\":{\"h\":\"数据保存的策略\",\"a\":\"数据保存的策略\"},\"5069\":{\"t\":\"kafka 有两种数据保存策略:\"},\"5070\":{\"t\":\"1、按照过期时间保留\"},\"5071\":{\"t\":\"2、按照存储的消息大小保留\"},\"5072\":{\"t\":\"Kafka Broker默认的消息保留策略是：要么保留一定时间，要么保留到消息达到一定大小的字节数。\"},\"5073\":{\"t\":\"当消息达到设置的条件上限时，旧消息就会过期并被删除，所以，在任何时刻，可用消息的总量都不会超过配置参数所指定的大小。\"},\"5074\":{\"t\":\"topic可以配置自己的保留策略，可以将消息保留到不再使用他们为止。\"},\"5075\":{\"t\":\"因为在一个大文件里查找和删除消息是很费时的事，也容易出错，所以，分区被划分为若干个片段。默认情况下，每个片段包含1G或者一周的数据，以较小的那个为准。在broker往leader分区写入消息时，如果达到片段上限，就关闭当前文件，并打开一个新文件。当前正在写入数据的片段叫活跃片段。当所有片段都被写满时，会清除下一个分区片段的数据，如果配置的是7个片段，每天打开一个新片段，就会删除一个最老的片段，循环使用所有片段。\"},\"5076\":{\"t\":\"kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？ 这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。\"},\"5077\":{\"h\":\"分区策略\",\"a\":\"分区策略\"},\"5078\":{\"h\":\"生产者：\",\"a\":\"生产者\"},\"5079\":{\"t\":\"为什么要分区\"},\"5080\":{\"t\":\"多Partition分布式存储，利于集群数据的均衡。\"},\"5081\":{\"t\":\"并发读写，加快读写速度。\"},\"5082\":{\"t\":\"加快数据恢复的速率：当某台机器挂了，每个Topic仅需恢复一部分的数据，多机器并发。\"},\"5083\":{\"t\":\"分区的原则\"},\"5084\":{\"t\":\"指明partition的情况下，使用指定的partition；\"},\"5085\":{\"t\":\"没有指明partition，但是有key的情况下，将key的hash值与topic的partition数进行取余得到partition值；\"},\"5086\":{\"t\":\"既没有指定partition，也没有key的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与topic可用的partition数取余得到partition值，也就是常说的round-robin算法。\"},\"5087\":{\"t\":\"public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) { List<PartitionInfo> partitions = cluster.partitionsForTopic(topic); int numPartitions = partitions.size(); if (keyBytes == null) { //key为空时，获取一个自增的计数，然后对分区做取模得到分区编号 int nextValue = nextValue(topic); List<PartitionInfo> availablePartitions = cluster.availablePartitionsForTopic(topic); if (availablePartitions.size() > 0) { int part = Utils.toPositive(nextValue) % availablePartitions.size(); return availablePartitions.get(part).partition(); } else { // no partitions are available, give a non-available partition return Utils.toPositive(nextValue) % numPartitions; } } else { // hash the keyBytes to choose a partition // key不为空时，通过key的hash对分区取模（疑问：为什么这里不像上面那样，使用availablePartitions呢？） // 根据《Kafka权威指南》Page45理解：为了保证相同的键，总是能路由到固定的分区，如果使用可用分区，那么因为分区数变化，会导致相同的key，路由到不同分区 // 所以如果要使用key来映射分区，最好在创建主题的时候就把分区规划好 return Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions; } } private int nextValue(String topic) { //为每个topic维护了一个AtomicInteger对象，每次获取时+1 AtomicInteger counter = topicCounterMap.get(topic); if (null == counter) { counter = new AtomicInteger(ThreadLocalRandom.current().nextInt()); AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter); if (currentCounter != null) { counter = currentCounter; } } return counter.getAndIncrement(); } \"},\"5088\":{\"h\":\"消费者：\",\"a\":\"消费者\"},\"5089\":{\"t\":\"分区分配策略\"},\"5090\":{\"t\":\"一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及到partition的分配问题，即确定哪个partition由哪个consumer来消费。Kafka提供了3种消费者分区分配策略：RangeAssigor、RoundRobinAssignor、StickyAssignor。\"},\"5091\":{\"t\":\"PartitionAssignor接口用于用户定义实现分区分配算法，以实现Consumer之间的分区分配。消费组的成员订阅它们感兴趣的Topic并将这种订阅关系传递给作为订阅组协调者的Broker。协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者。Kafka默认采用RangeAssignor的分配算法。\"},\"5092\":{\"t\":\"RangeAssignor\"},\"5093\":{\"t\":\"RangeAssignor对每个Topic进行独立的分区分配。对于每一个Topic，首先对分区按照分区ID进行排序，然后订阅这个Topic的消费组的消费者再进行排序，之后尽量均衡的将分区分配给消费者。这里只能是尽量均衡，因为分区数可能无法被消费者数量整除，那么有一些消费者就会多分配到一些分区。分配示意图如下：\"},\"5094\":{\"t\":\"f4108e1816b3087f38b546372e214958.png\"},\"5095\":{\"t\":\"分区分配的算法如下：\"},\"5096\":{\"t\":\"@Override public Map<String, List<TopicPartition>> assign(Map<String, Integer> partitionsPerTopic, Map<String, Subscription> subscriptions) { Map<String, List<String>> consumersPerTopic = consumersPerTopic(subscriptions); Map<String, List<TopicPartition>> assignment = new HashMap<>(); for (String memberId : subscriptions.keySet()) assignment.put(memberId, new ArrayList<TopicPartition>()); //for循环对订阅的多个topic分别进行处理 for (Map.Entry<String, List<String>> topicEntry : consumersPerTopic.entrySet()) { String topic = topicEntry.getKey(); List<String> consumersForTopic = topicEntry.getValue(); Integer numPartitionsForTopic = partitionsPerTopic.get(topic); if (numPartitionsForTopic == null) continue; //对消费者进行排序 Collections.sort(consumersForTopic); //计算平均每个消费者分配的分区数 int numPartitionsPerConsumer = numPartitionsForTopic / consumersForTopic.size(); //计算平均分配后多出的分区数 int consumersWithExtraPartition = numPartitionsForTopic % consumersForTopic.size(); List<TopicPartition> partitions = AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic); for (int i = 0, n = consumersForTopic.size(); i < n; i++) { //计算第i个消费者，分配分区的起始位置 int start = numPartitionsPerConsumer * i + Math.min(i, consumersWithExtraPartition); //计算第i个消费者，分配到的分区数量 int length = numPartitionsPerConsumer + (i + 1 > consumersWithExtraPartition ? 0 : 1); assignment.get(consumersForTopic.get(i)).addAll(partitions.subList(start, start + length)); } } return assignment; } \"},\"5097\":{\"t\":\"这种分配方式明显的一个问题是随着消费者订阅的Topic的数量的增加，不均衡的问题会越来越严重，比如上图中4个分区3个消费者的场景，C0会多分配一个分区。如果此时再订阅一个分区数为4的Topic，那么C0又会比C1、C2多分配一个分区，这样C0总共就比C1、C2多分配两个分区了，而且随着Topic的增加，这个情况会越来越严重。分配结果：\"},\"5098\":{\"t\":\"eff9adb5a086691e56b5d68bec68ffcf.png\"},\"5099\":{\"t\":\"订阅2个Topic，每个Topic4个分区，共3个Consumer\"},\"5100\":{\"t\":\"C0：[T0P0，T0P1，T1P0，T1P1]\"},\"5101\":{\"t\":\"C1：[T0P2，T1P2]\"},\"5102\":{\"t\":\"C2：[T0P3，T1P3]\"},\"5103\":{\"t\":\"RoundRobinAssignor\"},\"5104\":{\"t\":\"RoundRobinAssignor的分配策略是将消费组内订阅的所有Topic的分区及所有消费者进行排序后尽量均衡的分配（RangeAssignor是针对单个Topic的分区进行排序分配的）。如果消费组内，消费者订阅的Topic列表是相同的（每个消费者都订阅了相同的Topic），那么分配结果是尽量均衡的（消费者之间分配到的分区数的差值不会超过1）。如果订阅的Topic列表是不同的，那么分配结果是不保证“尽量均衡”的，因为某些消费者不参与一些Topic的分配。\"},\"5105\":{\"t\":\"51b27d00cf50d9aca86e0934ab42a565.png\"},\"5106\":{\"t\":\"以上两个topic的情况，相比于之前RangeAssignor的分配策略，可以使分区分配的更均衡。不过考虑这种情况，假设有三个消费者分别为C0、C1、C2，有3个Topic T0、T1、T2，分别拥有1、2、3个分区，并且C0订阅T0，C1订阅T0和T1，C2订阅T0、T1、T2，那么RoundRobinAssignor的分配结果如下：\"},\"5107\":{\"t\":\"4e161a06a0afcae8d2c06603d676de4e.png\"},\"5108\":{\"t\":\"看上去分配已经尽量的保证均衡了，不过可以发现C2承担了4个分区的消费而C1订阅了T1，是不是把T1P1交给C1消费能更加的均衡呢？\"},\"5109\":{\"t\":\"StickyAssignor\"},\"5110\":{\"t\":\"StickyAssignor分区分配算法，目的是在执行一次新的分配时，能在上一次分配的结果的基础上，尽量少的调整分区分配的变动，节省因分区分配变化带来的开销。Sticky是“粘性的”，可以理解为分配结果是带“粘性的”——每一次分配变更相对上一次分配做最少的变动。其目标有两点：\"},\"5111\":{\"t\":\"分区的分配尽量的均衡。\"},\"5112\":{\"t\":\"每一次重分配的结果尽量与上一次分配结果保持一致。\"},\"5113\":{\"t\":\"当这两个目标发生冲突时，优先保证第一个目标。第一个目标是每个分配算法都尽量尝试去完成的，而第二个目标才真正体现出StickyAssignor特性的。\"},\"5114\":{\"t\":\"StickyAssignor算法比较复杂，下面举例来说明分配的效果（对比RoundRobinAssignor），前提条件：\"},\"5115\":{\"t\":\"有4个Topic：T0、T1、T2、T3，每个Topic有2个分区。\"},\"5116\":{\"t\":\"有3个Consumer：C0、C1、C2，所有Consumer都订阅了这4个分区。\"},\"5117\":{\"t\":\"eb5597ed0b81b03c762e54ff3f909492.png\"},\"5118\":{\"t\":\"上面红色的箭头代表的是有变动的分区分配，可以看出，StickyAssignor的分配策略，变动较小。\"},\"5119\":{\"t\":\"参考：https://blog.csdn.net/easylife206/article/details/124580641?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-124580641-blog-124349832.235^v28^pc_relevant_t0_download&spm=1001.2101.3001.4242.3&utm_relevant_index=7\"},\"5120\":{\"h\":\"kafka如何保证消息不被重复消费\",\"a\":\"kafka如何保证消息不被重复消费\"},\"5121\":{\"h\":\"原因\",\"a\":\"原因\"},\"5122\":{\"t\":\"（1）kafka有个offset的概念，当每个消息被写进去后，都有一个offset，代表他的序号，然后consumer消费该数据之后，隔一段时间，会把自己消费过的消息的offset提交一下，代表我已经消费过了。下次我要是重启，就会继续从上次消费到的offset来继续消费。但是当我们直接kill进程了，再重启。这会导致consumer有些消息处理了，但是没来得及提交offset。等重启之后，少数消息就会再次消费一次 （2）在Kafka中有一个Partition Balance机制，就是把多个Partition均衡的分配给多个消费者。消费端会从分配到的Partition里面去消费消息，如果消费者在默认的5分钟内没有处理完这一批消息。就会触发Kafka的Rebalance机制，从而导致offset自动提交失败。而Rebalance之后，消费者还是会从之前没提交的offset位置开始消费，从而导致消息重复消费。\"},\"5123\":{\"h\":\"解决方案\",\"a\":\"解决方案\"},\"5124\":{\"t\":\"开启kafka本身存在的幂等性：\"},\"5125\":{\"t\":\"在这里插入图片描述\"},\"5126\":{\"t\":\"注： 添加唯一ID，类似于数据库的主键，用于唯一标记一个消息。 ProducerID：#在每个新的Producer初始化时，会被分配一个唯一的PID SequenceNumber：#对于每个PID发送数据的每个Topic都对应一个从0开始单调递增的SN值。\"},\"5127\":{\"t\":\"将获取的唯一id存表，（利用mySQl的唯一键约束，或者redis天然的set结构）\"},\"5128\":{\"t\":\"参考：https://blog.csdn.net/m0_51167384/article/details/128106266?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&utm_relevant_index=8&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2Mjc4NDAvYXJ0aWNsZS9kZXRhaWxzLzc2NDM1Mzg1P3NwbT0xMDAxLjIxMDEuMzAwMS42NjUwLjEmdXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RVJhdGUtMS03NjQzNTM4NS1ibG9nLTExNzQxOTA1OC4yMzUlNUV2MjglNUVwY19yZWxldmFudF90MF9kb3dubG9hZCZkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VSYXRlLTEtNzY0MzUzODUtYmxvZy0xMTc0MTkwNTguMjM1JTVFdjI4JTVFcGNfcmVsZXZhbnRfdDBfZG93bmxvYWQmdXRtX3JlbGV2YW50X2luZGV4PTI%3D\"},\"5129\":{\"h\":\"如何保证消息的顺序性?\",\"a\":\"如何保证消息的顺序性\"},\"5130\":{\"h\":\"为什么要保证顺序？\",\"a\":\"为什么要保证顺序\"},\"5131\":{\"t\":\"消息队列中的若干消息如果是对同一个数据进行操作, 这些操作具有前后关系, 必须要按前后的顺序执行, 否则就会造成数据异常.\"},\"5132\":{\"h\":\"出现顺序错乱的场景：\",\"a\":\"出现顺序错乱的场景\"},\"5133\":{\"t\":\"第一种情况: 一个queue, 有多个consumer去消费, 这样就会造成顺序的错误, consumer从MQ里面读取数据是有序的, 但是每个consumer的执行时间是不固定的, 无法保证先读到消息的consumer一定先完成操作, 这样就会出现消息并没有按照顺序执行, 造成数据顺序错误。 \"},\"5134\":{\"t\":\"img\"},\"5135\":{\"t\":\"第二种情况: 一个queue对应一个consumer, 但是consumer里面进行了多线程消费, 这样也会造成消息消费顺序错误。 \"},\"5136\":{\"t\":\"img\"},\"5137\":{\"h\":\"如何保证消息的消费顺序？\",\"a\":\"如何保证消息的消费顺序\"},\"5138\":{\"t\":\"第一种方案: 拆分多个queue, 每一个queue一个consumer, 就是多一些queue而已, 确实是麻烦点; 这样也会造成吞吐量下降, 可以在消费者内部采用多线程的方式去消费。 \"},\"5139\":{\"t\":\"img\"},\"5140\":{\"t\":\"第二种方案: 就是一个queue对应一个consumer, 然后这个consumer内部用内存队列做排队, 然后分发给底层不同的worker来处理。 \"},\"5141\":{\"t\":\"img\"},\"5142\":{\"t\":\"参考：https://blog.csdn.net/qq_44901983/article/details/123416498\"},\"5143\":{\"h\":\"HTTP协议中为什么广泛使用的还是HTTP1.1？\"},\"5144\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"5145\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"5146\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"5147\":{\"h\":\"一、关于HTTP2\",\"a\":\"一、关于http2\"},\"5148\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"5149\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"5150\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"5151\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"5152\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"5153\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"5154\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"5155\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"5156\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"5157\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"5158\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"5159\":{\"h\":\"二、关于HTTP3\",\"a\":\"二、关于http3\"},\"5160\":{\"t\":\"具体的细节请移步：HTTP3协议\"},\"5161\":{\"h\":\"三、HTTP历史\",\"a\":\"三、http历史\"},\"5162\":{\"t\":\"随着网络技术的发展，1999 年设计的 HTTP/1.1 已经不能满足需求，所以 Google 在 2009 年设计了基于 TCP 的 SPDY，后来 SPDY 的开发组推动 SPDY 成为正式标准，不过最终没能通过。不过 SPDY 的开发组全程参与了 HTTP/2 的制定过程，参考了 SPDY 的很多设计，所以我们一般认为 SPDY 就是 HTTP/2 的前身。无论 SPDY 还是 HTTP/2，都是基于 TCP 的，TCP 与 UDP 相比效率上存在天然的劣势，所以 2013 年 Google 开发了基于 UDP 的名为 QUIC 的传输层协议，QUIC 全称 Quick UDP Internet Connections，希望它能替代 TCP，使得网页传输更加高效。后经提议，互联网工程任务组正式将基于 QUIC 协议的 HTTP （HTTP over QUIC）重命名为 HTTP/3。\"},\"5163\":{\"h\":\"三、原因\",\"a\":\"三、原因\"},\"5164\":{\"t\":\"小羊看来网站上大家的讨论，总结了下面的几点。\"},\"5165\":{\"t\":\"1.至少目前来看，要启用http2必须使用OpenSSL/ssl加密协议，而且在对传输速率要求不高的情况下，HTTP1.1完全可以hold住任何场景。所以还是需要等待催生http2不得不出的时机到来。\"},\"5166\":{\"t\":\"2.HTTP 1.1 用着也还行，性能不好，但也不算差。\"},\"5167\":{\"t\":\"3.HTTP 3 出来得太快了，没有给HTTP 2留下发挥时间，HTTP 2还没来得及全面推广，HTTP 3就横空出世了，既然有更好的可以用，有什么理由还升HTTP 2呢？\"},\"5168\":{\"h\":\"HTTP\"},\"5169\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"5170\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"5171\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"5172\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"5173\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"5174\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"5175\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"5176\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"5177\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"5178\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"5179\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"5180\":{\"h\":\"计算机网络\"},\"5181\":{\"h\":\"键入网址到网页显示，期间发生了什么？\",\"a\":\"键入网址到网页显示-期间发生了什么\"},\"5182\":{\"t\":\"img\"},\"5183\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"5184\":{\"t\":\"总体来说分为以下几个过程:\"},\"5185\":{\"t\":\"DNS 解析\"},\"5186\":{\"t\":\"TCP 连接\"},\"5187\":{\"t\":\"发送 HTTP 请求\"},\"5188\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"5189\":{\"t\":\"浏览器解析渲染页面\"},\"5190\":{\"t\":\"连接结束\"},\"5191\":{\"h\":\"OSI 七层模型\",\"a\":\"osi-七层模型\"},\"5192\":{\"t\":\"OSI 七层模型\"},\"5193\":{\"h\":\"TCP/IP 四层模型\",\"a\":\"tcp-ip-四层模型\"},\"5194\":{\"t\":\"img\"},\"5195\":{\"h\":\"TCP\",\"a\":\"tcp\"},\"5196\":{\"h\":\"IP\",\"a\":\"ip\"},\"5197\":{\"h\":\"UDP\",\"a\":\"udp\"},\"5198\":{\"h\":\"ARP\",\"a\":\"arp\"},\"5199\":{\"t\":\"ARP 协议，全称 地址解析协议（Address Resolution Protocol），它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。\"},\"5200\":{\"t\":\"ARP 协议工作时有一个大前提，那就是 ARP 表。\"},\"5201\":{\"t\":\"在一个局域网内，每个网络设备都自己维护了一个 ARP 表，ARP 表记录了某些其他网络设备的 IP 地址-MAC 地址映射关系，该映射关系以 <IP, MAC, TTL> 三元组的形式存储。其中，TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。\"},\"5202\":{\"t\":\"ARP 的工作原理将分两种场景讨论：\"},\"5203\":{\"t\":\"同一局域网内的 MAC 寻址；\"},\"5204\":{\"t\":\"从一个局域网到另一个局域网中的网络设备的寻址。\"},\"5205\":{\"h\":\"同一局域网内的 MAC 寻址\",\"a\":\"同一局域网内的-mac-寻址\"},\"5206\":{\"t\":\"假设当前有如下场景：IP 地址为137.196.7.23的主机 A，想要给同一局域网内的 IP 地址为137.196.7.14主机 B，发送 IP 数据报文。\"},\"5207\":{\"t\":\"再次强调，当主机发送 IP 数据报文时（网络层），仅知道目的地的 IP 地址，并不清楚目的地的 MAC 地址，而 ARP 协议就是解决这一问题的。\"},\"5208\":{\"t\":\"为了达成这一目标，主机 A 将不得不通过 ARP 协议来获取主机 B 的 MAC 地址，并将 IP 报文封装成链路层帧，发送到下一跳上。在该局域网内，关于此将按照时间顺序，依次发生如下事件：\"},\"5209\":{\"t\":\"主机 A 检索自己的 ARP 表，发现 ARP 表中并无主机 B 的 IP 地址对应的映射条目，也就无从知道主机 B 的 MAC 地址。\"},\"5210\":{\"t\":\"主机 A 将构造一个 ARP 查询分组，并将其广播到所在的局域网中。\"},\"5211\":{\"t\":\"ARP 分组是一种特殊报文，ARP 分组有两类，一种是查询分组，另一种是响应分组，它们具有相同的格式，均包含了发送和接收的 IP 地址、发送和接收的 MAC 地址。当然了，查询分组中，发送的 IP 地址，即为主机 A 的 IP 地址，接收的 IP 地址即为主机 B 的 IP 地址，发送的 MAC 地址也是主机 A 的 MAC 地址，但接收的 MAC 地址绝不会是主机 B 的 MAC 地址（因为这正是我们要问询的！），而是一个特殊值——FF-FF-FF-FF-FF-FF，之前说过，该 MAC 地址是广播地址，也就是说，查询分组将广播给该局域网内的所有设备。\"},\"5212\":{\"t\":\"主机 A 构造的查询分组将在该局域网内广播，理论上，每一个设备都会收到该分组，并检查查询分组的接收 IP 地址是否为自己的 IP 地址，如果是，说明查询分组已经到达了主机 B，否则，该查询分组对当前设备无效，丢弃之。\"},\"5213\":{\"t\":\"主机 B 收到了查询分组之后，验证是对自己的问询，接着构造一个 ARP 响应分组，该分组的目的地只有一个——主机 A，发送给主机 A。同时，主机 B 提取查询分组中的 IP 地址和 MAC 地址信息，在自己的 ARP 表中构造一条主机 A 的 IP-MAC 映射记录。\"},\"5214\":{\"t\":\"ARP 响应分组具有和 ARP 查询分组相同的构造，不同的是，发送和接受的 IP 地址恰恰相反，发送的 MAC 地址为发送者本身，目标 MAC 地址为查询分组的发送者，也就是说，ARP 响应分组只有一个目的地，而非广播。\"},\"5215\":{\"t\":\"主机 A 终将收到主机 B 的响应分组，提取出该分组中的 IP 地址和 MAC 地址后，构造映射信息，加入到自己的 ARP 表中。\"},\"5216\":{\"t\":\"总结来说，ARP 协议是一个广播问询，单播响应协议。\"},\"5217\":{\"h\":\"不同局域网内的 MAC 寻址\",\"a\":\"不同局域网内的-mac-寻址\"},\"5218\":{\"t\":\"更复杂的情况是，发送主机 A 和接收主机 B 不在同一个子网中，假设一个一般场景，两台主机所在的子网由一台路由器联通。这里需要注意的是，一般情况下，我们说网络设备都有一个 IP 地址和一个 MAC 地址，这里说的网络设备，更严谨的说法应该是一个接口。路由器作为互联设备，具有多个接口，每个接口同样也应该具备不重复的 IP 地址和 MAC 地址。因此，在讨论 ARP 表时，路由器的多个接口都各自维护一个 ARP 表，而非一个路由器只维护一个 ARP 表。\"},\"5219\":{\"t\":\"接下来，回顾同一子网内的 MAC 寻址，如果主机 A 发送一个广播问询分组，那么 A 所在子网内的所有设备（接口）都将不会捕获该分组，因为该分组的目的 IP 地址在另一个子网中，本子网内不会有设备成功接收。那么，主机 A 应该发送怎样的查询分组呢？整个过程按照时间顺序发生的事件如下：\"},\"5220\":{\"t\":\"主机 A 查询 ARP 表，期望寻找到目标路由器的本子网接口的 MAC 地址。\"},\"5221\":{\"t\":\"目标路由器指的是，根据目的主机 B 的 IP 地址，分析出 B 所在的子网，能够把报文转发到 B 所在子网的那个路由器。\"},\"5222\":{\"t\":\"主机 A 未能找到目标路由器的本子网接口的 MAC 地址，将采用 ARP 协议，问询到该 MAC 地址，由于目标接口与主机 A 在同一个子网内，该过程与同一局域网内的 MAC 寻址相同。\"},\"5223\":{\"t\":\"主机 A 获取到目标接口的 MAC 地址，先构造 IP 数据报，其中源 IP 是 A 的 IP 地址，目的 IP 地址是 B 的 IP 地址，再构造链路层帧，其中源 MAC 地址是 A 的 MAC 地址，目的 MAC 地址是本子网内与路由器连接的接口的 MAC 地址。主机 A 将把这个链路层帧，以单播的方式，发送给目标接口。\"},\"5224\":{\"t\":\"目标接口接收到了主机 A 发过来的链路层帧，解析，根据目的 IP 地址，查询转发表，将该 IP 数据报转发到与主机 B 所在子网相连的接口上。\"},\"5225\":{\"t\":\"到此，该帧已经从主机 A 所在的子网，转移到了主机 B 所在的子网了。\"},\"5226\":{\"t\":\"路由器接口查询 ARP 表，期望寻找到主机 B 的 MAC 地址。\"},\"5227\":{\"t\":\"路由器接口如未能找到主机 B 的 MAC 地址，将采用 ARP 协议，广播问询，单播响应，获取到主机 B 的 MAC 地址。\"},\"5228\":{\"t\":\"路由器接口将对 IP 数据报重新封装成链路层帧，目标 MAC 地址为主机 B 的 MAC 地址，单播发送，直到目的地。\"},\"5229\":{\"h\":\"HTTP\",\"a\":\"http\"},\"5230\":{\"h\":\"HTTP 状态码有哪些？\",\"a\":\"http-状态码有哪些\"},\"5231\":{\"t\":\"HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。\"},\"5232\":{\"t\":\"常见 HTTP 状态码\"},\"5233\":{\"h\":\"HTTP/1.0 和 HTTP/1.1 有什么区别？\",\"a\":\"http-1-0-和-http-1-1-有什么区别\"},\"5234\":{\"t\":\"连接方式 : HTTP/1.0 为短连接，HTTP/1.1 支持长连接。\"},\"5235\":{\"t\":\"状态响应码 : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，100 (Continue)——在请求大资源前的预热请求，206 (Partial Content)——范围请求的标识码，409 (Conflict)——请求与当前资源的规定冲突，410 (Gone)——资源已被永久转移，而且没有任何已知的转发地址。\"},\"5236\":{\"t\":\"缓存机制 : 在 HTTP/1.0 中主要使用 Header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP/1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。\"},\"5237\":{\"t\":\"Host 头（Host Header）处理 :HTTP/1.1 引入了 Host 头字段，允许在同一 IP 地址上托管多个域名，从而支持虚拟主机的功能。而 HTTP/1.0 没有 Host 头字段，无法实现虚拟主机。\"},\"5238\":{\"h\":\"HTTP/1.1 和 HTTP/2.0 有什么区别？\",\"a\":\"http-1-1-和-http-2-0-有什么区别\"},\"5239\":{\"t\":\"IO 多路复用（Multiplexing） ：HTTP/2.0 在同一连接上可以同时传输多个请求和响应（可以看作是 HTTP/1.1 中长链接的升级版本）。HTTP/1.1 则使用串行方式，每个请求和响应都需要独立的连接。这使得 HTTP/2.0 在处理多个请求时更加高效，减少了网络延迟和提高了性能。\"},\"5240\":{\"t\":\"二进制帧（Binary Frames） ：HTTP/2.0 使用二进制帧进行数据传输，而 HTTP/1.1 则使用文本格式的报文。二进制帧更加紧凑和高效，减少了传输的数据量和带宽消耗。\"},\"5241\":{\"t\":\"头部压缩（Header Compression） ：HTTP/1.1 支持Body压缩，Header不支持压缩。HTTP/2.0 支持对Header压缩，减少了网络开销。\"},\"5242\":{\"t\":\"服务器推送（Server Push）：HTTP/2.0 支持服务器推送，可以在客户端请求一个资源时，将其他相关资源一并推送给客户端，从而减少了客户端的请求次数和延迟。而 HTTP/1.1 需要客户端自己发送请求来获取相关资源。\"},\"5243\":{\"h\":\"HTTP/2.0 和 HTTP/3.0 有什么区别？\",\"a\":\"http-2-0-和-http-3-0-有什么区别\"},\"5244\":{\"t\":\"传输协议 ：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP/3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\"},\"5245\":{\"t\":\"连接建立 ：HTTP/2.0 需要经过经典的 TCP 三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP/3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。\"},\"5246\":{\"t\":\"队头阻塞 ：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。\"},\"5247\":{\"h\":\"HTTPS\",\"a\":\"https\"},\"5248\":{\"h\":\"HTTP 和 HTTPS 有什么区别？\",\"a\":\"http-和-https-有什么区别\"},\"5249\":{\"t\":\"端口号 ：HTTP 默认是 80，HTTPS 默认是 443。\"},\"5250\":{\"t\":\"URL 前缀 ：HTTP 的 URL 前缀是 http://，HTTPS 的 URL 前缀是 https://。\"},\"5251\":{\"t\":\"安全性和资源消耗 ： HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。\"},\"5252\":{\"t\":\"SEO（搜索引擎优化） ：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。\"},\"5253\":{\"h\":\"DNS\",\"a\":\"dns\"},\"5254\":{\"t\":\"DNS 中的域名都是用句点来分隔的，比如 www.server.com，这里的句点代表了不同层次之间的界限。\"},\"5255\":{\"t\":\"在域名中，越靠右的位置表示其层级越高。\"},\"5256\":{\"t\":\"实际上域名最后还有一个点，比如 www.server.com.，这个最后的一个点代表根域名。\"},\"5257\":{\"t\":\"也就是，. 根域是在最顶层，它的下一层就是 .com 顶级域，再下面是 server.com。\"},\"5258\":{\"t\":\"所以域名的层级关系类似一个树状结构：\"},\"5259\":{\"t\":\"根 DNS 服务器（.）\"},\"5260\":{\"t\":\"顶级域 DNS 服务器（.com）\"},\"5261\":{\"t\":\"权威 DNS 服务器（server.com）\"},\"5262\":{\"t\":\"根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。\"},\"5263\":{\"t\":\"这样一来，任何 DNS 服务器就都可以找到并访问根域 DNS 服务器了。\"},\"5264\":{\"t\":\"因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。\"},\"5265\":{\"h\":\"域名解析的工作流程：\",\"a\":\"域名解析的工作流程\"},\"5266\":{\"t\":\"客户端首先会发出一个 DNS 请求，问 www.server.com 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。\"},\"5267\":{\"t\":\"本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 www.server.com，则它直接返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 www.server.com 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。\"},\"5268\":{\"t\":\"根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“www.server.com 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”\"},\"5269\":{\"t\":\"本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 www.server.com 的 IP 地址吗？”\"},\"5270\":{\"t\":\"顶级域名服务器说：“我给你负责 www.server.com 区域的权威 DNS 服务器的地址，你去问它应该能问到”。\"},\"5271\":{\"t\":\"本地 DNS 于是转向问权威 DNS 服务器：“老三，www.server.com对应的IP是啥呀？” server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。\"},\"5272\":{\"t\":\"权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。\"},\"5273\":{\"t\":\"本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。\"},\"5274\":{\"h\":\"面试\"},\"5275\":{\"h\":\"面试：\",\"a\":\"面试\"},\"5276\":{\"h\":\"一、中科全安\",\"a\":\"一、中科全安\"},\"5277\":{\"h\":\"一面：HR面，态度算好的（5分钟）\",\"a\":\"一面-hr面-态度算好的-5分钟\"},\"5278\":{\"t\":\"1.介绍公司\"},\"5279\":{\"t\":\"2.问啥时候能来实习\"},\"5280\":{\"t\":\"3.问你能接受加班吗\"},\"5281\":{\"t\":\"4.问你的期望薪资多少\"},\"5282\":{\"t\":\"5.问我想听听你对加班什么看法\"},\"5283\":{\"t\":\"6.最后让明天面试，我说不行，能最晚啥时候，她说最晚周五下午，电话面试\"},\"5284\":{\"h\":\"二面：面试官狗叫（15分钟 ）\",\"a\":\"二面-面试官狗叫-15分钟\"},\"5285\":{\"t\":\"面试官的态度极其恶心，什么垃圾玩意，老子是来面试的，不是听狗叫的，就算老子啥都不会也不去你这个垃圾公司。\"},\"5286\":{\"t\":\"1.自我介绍，直接打断说只介绍自己会的，项目中的技术栈\"},\"5287\":{\"t\":\"2.问我熟悉哪些框架，我说Spring、Mysql，其他都是了解，熟悉的是Java基础和Mysql，他就非得问SpringBoot，离谱\"},\"5288\":{\"t\":\"3.问Kafka的分区、主题了解吗，我就是了解，然后他也说了你只是了解\"},\"5289\":{\"t\":\"4.问ES了解吗（我只是了解他是干啥的，其它都是API）\"},\"5290\":{\"t\":\"5.问SpringBoot异常怎么处理（这个紧张忘了，只是说在一个包里要继承一个异常的接口）\"},\"5291\":{\"t\":\"6.问SpringBoot的核心配置文件以及它们的区别\"},\"5292\":{\"t\":\"7.问SpringBoot的起步依赖starter有哪些以及作用（他说你了解的很少，我都说了了解Mysql、Spring，你他妈的非得问）\"},\"5293\":{\"t\":\"8.问SpringBoot 中的监视器是什么（我说不了解）\"},\"5294\":{\"t\":\"9.问Swagger用过么、它用来做什么\"},\"5295\":{\"t\":\"10.问什么是 WebSockets（我说只了解它是用来作为即时通讯的协议）\"},\"5296\":{\"t\":\"11.问什么是 FreeMarker 模板（这个离谱，说完他是干啥的以及插值表达式，他问还有呢？他妈的）\"},\"5297\":{\"t\":\"12.问C/S 、B/S模式\"},\"5298\":{\"t\":\"13.问String、StringBuilder、StringBuffer 的区别\"},\"5299\":{\"t\":\"14.问了MySQL的存储引擎\"},\"5300\":{\"t\":\"15.问了 InnoDB 和 MyISAM 的比较\"},\"5301\":{\"t\":\"16.问了建立索引的原则\"},\"5302\":{\"t\":\"17.问了三大范式\"},\"5303\":{\"t\":\"18.问了Jdbc的防止sql注入（我说不了解）\"},\"5304\":{\"t\":\"19.反问（我说实习生的日常工作安排是什么，他妈的开始狗叫，想打他）\"},\"5305\":{\"t\":\"20.最后问我啥时能来实习（老子不去）\"},\"5306\":{\"h\":\"二、联想\",\"a\":\"二、联想\"},\"5307\":{\"h\":\"一面：（16分钟）\",\"a\":\"一面-16分钟\"},\"5308\":{\"t\":\"1.说一下红黑树（吧啦吧啦，讲了下红黑树的特性、又扯到HashMap底层用到了红黑树、突然说到MySQLB+树用到了红黑树）\"},\"5309\":{\"t\":\"2.讲一下线程池（这个熟，线程池的7大参数以及具体用法）\"},\"5310\":{\"t\":\"3.讲一下为什么用线程池（两点原因）\"},\"5311\":{\"t\":\"4.讲一下线程池参数MaxSize满了你会怎么做（我说实现自定义处理策略，可以选择移除等待队列中的最不常用的线程）\"},\"5312\":{\"t\":\"5.看我熟悉Python（这里没听清发音，重复确认了好几遍哈哈哈哈哈哈哈），问我生成器用过没（我说是生成随机数吗，面试官说不是，是，还耐心给我解答了是用来循环遍历的）\"},\"5313\":{\"t\":\"5.项目拷打环节\"},\"5314\":{\"t\":\"1）讲一下你的项目经验（从项目的整体架构到具体功能实现细节都说了）\"},\"5315\":{\"t\":\"2）我说了做的一些优化（存储到阿里云OSS）\"},\"5316\":{\"t\":\"3）突然电话断了，在那我俩喂喂喂了好几声，面试官又给我打了过来，问我同步和异步怎么实现的（加@Async注解）\"},\"5317\":{\"t\":\"4）问异步调用后，做了些什么（第三方接口审核完后传来一个statusCode200，表示审核成功存储到数据库）\"},\"5318\":{\"t\":\"6.反问环节\"},\"5319\":{\"t\":\"1）实习生的日常工作安排（面试官说了早上9：30上班，下午6：30下班，八小时工作制，中午休息一小时）\"},\"5320\":{\"t\":\"2）技术栈是什么（面试官说这有Java和Python，你来就是Java）\"},\"5321\":{\"h\":\"三、中国邮政储蓄银行\",\"a\":\"三、中国邮政储蓄银行\"},\"5322\":{\"h\":\"一面：结构化面试+技术面（20分钟，五个面试官）\",\"a\":\"一面-结构化面试-技术面-20分钟-五个面试官\"},\"5323\":{\"t\":\"1.先做一个两分钟以内的自我介绍（对邮储的看法，对未来工作的看法）\"},\"5324\":{\"t\":\"2.对工作地点的看法\"},\"5325\":{\"t\":\"3.有没有参加过团体活动\"},\"5326\":{\"t\":\"4.数学建模比赛中遇到的最大困难\"},\"5327\":{\"t\":\"5.开始技术面试了，面试官说看你简历都是Java相关，讲一下Spring Cloud你用过的组件\"},\"5328\":{\"t\":\"6.ConcurrentHashMap为什么用红黑树\"},\"5329\":{\"t\":\"7.看你项目中用到了网关，是怎么实现的\"},\"5330\":{\"t\":\"8.都说CAS要比synchronized好，但是CAS也有自己的问题，你能说一下有哪些问题吗\"},\"5331\":{\"t\":\"9.另一个面试官问看你简历有高并发系统的东西，你有实际的项目经验吗（这个我说就是了解，实际项目是自学的，实际项目经验都是人工智能相关的）\"},\"5332\":{\"t\":\"10.最后女的HR问看你成绩这么好，没有保研吗\"},\"5333\":{\"t\":\"11.讲一下研究生的论文成果\"},\"5334\":{\"t\":\"12.研究生的专业成绩排名，有获得过奖学金吗\"},\"5335\":{\"t\":\"13.最后问有offer吗，方便说一下是哪个公司吗\"},\"5336\":{\"t\":\"另：\"},\"5337\":{\"t\":\"1.对工作地点的看法\"},\"5338\":{\"t\":\"2.CPU达到100%的时候你如何排查问题\"},\"5339\":{\"t\":\"3.新生代和老年代数据是如何流动的\"},\"5340\":{\"t\":\"4.Linux如何给文件权限\"},\"5341\":{\"t\":\"5.想从实习中收获什么\"},\"5342\":{\"t\":\"6.看你是院研副部长，如果负责的活动和实验室科研冲突了怎么平衡\"},\"5343\":{\"t\":\"7.你平常也这样扎头发吗\"},\"5344\":{\"h\":\"来看头条\"},\"5345\":{\"h\":\"十二：项目\",\"a\":\"十二-项目\"},\"5346\":{\"t\":\"开发技术：Spring Cloud + Spring Boot + MybatisPlus + Redis + mysql + Mongodb + Zookeeper + kafka + ElasticSearch + Docker + 第三方技术阿里云OSS;\"},\"5347\":{\"t\":\"项目背景：”来看头条“ 项目类似于今日头条，是一个新闻资讯类项目。该项目由用户端和自媒体端组成。在用户端，实现了用户通过app端登录功能、浏览文章功能、搜索文章功能、用户历史记录功能。在自媒体端，实现了自媒体管理员登录功能、发布文章功能、删除文章功能、上传素材功能、文章内容审核功能\"},\"5348\":{\"t\":\"**项目重难点：**网关搭建；文章详情静态化及存储；文章自动审核及延迟发布；分布式锁解决集群下的方法抢占执行；热点文章实时计算\"},\"5349\":{\"t\":\"技术栈的具体应用：\"},\"5350\":{\"t\":\"Spring-Cloud-Gateway : 微服务之前架设的网关服务，实现服务注册中的API请求路由，以及控制流速控制和熔断处理都是常用的架构手段，而这些功能Gateway天然支持\"},\"5351\":{\"t\":\"运用Spring Boot快速开发框架，构建项目工程；并结合Spring Cloud全家桶技术，实现app后端、自媒体等微服务。\"},\"5352\":{\"t\":\"运用Spring Cloud Alibaba Nacos作为项目中的注册中心和配置中心\"},\"5353\":{\"t\":\"运用mybatis-plus作为持久层提升开发效率\"},\"5354\":{\"t\":\"采用kafka作为消息服务中间件，把自媒体文章上下架放进消息队列；通过用户的行为（点赞、评论、喜欢）实时记录用户数据，通过kafkaStream流式计算最新的数据；与客户端系统消息通知\"},\"5355\":{\"t\":\"运用Redis缓存技术，实现热数据的计算，提升系统性能指标，同时作为消息中间件异步消费任务。\"},\"5356\":{\"t\":\"使用Mysql存储用户数据，以保证上层数据查询的高性能\"},\"5357\":{\"t\":\"使用Mongo存储用户历史记录数据，以保证用户热数据高扩展和高性能指标\"},\"5358\":{\"t\":\"运用AI技术，来完成系统自动化功能，以提升效率及节省成本。比如文章审核\"},\"5359\":{\"h\":\"优化：\",\"a\":\"优化\"},\"5360\":{\"h\":\"（1）优化一\",\"a\":\"_1-优化一\"},\"5361\":{\"t\":\"缺陷 ：写操作（定时刷新）比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。\"},\"5362\":{\"t\":\"解决办法：\"},\"5363\":{\"t\":\"数据库和缓存数据强一致场景 ：更新 db 的时候同样更新 cache，不过我们需要加一个分布式锁来保证更新 cache 的时候不存在线程安全问题。\"},\"5364\":{\"h\":\"（2）优化二\",\"a\":\"_2-优化二\"},\"5365\":{\"t\":\"缺陷：消费者丢失消息的情况\"},\"5366\":{\"t\":\"我们知道消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。偏移量（offset)表示 Consumer 当前消费到的 Partition(分区)的所在的位置。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。\"},\"5367\":{\"t\":\"当消费者拉取到了分区的某个消息之后，消费者会自动提交了 offset。自动提交的话会有一个问题，试想一下，当消费者刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。\"},\"5368\":{\"t\":\"解决办法:\"},\"5369\":{\"t\":\"我们手动关闭自动提交 offset，每次在真正消费完消息之后再自己手动提交 offset 。 细心的朋友一定会发现，这样会带来消息被重新消费的问题。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。\"},\"5370\":{\"h\":\"（3）优化三\",\"a\":\"_3-优化三\"},\"5371\":{\"t\":\"存储技术选型优化：\"},\"5372\":{\"t\":\"MinIO：\"},\"5373\":{\"t\":\"AliyunOSS：\"},\"5374\":{\"h\":\"（4）优化四\",\"a\":\"_4-优化四\"},\"5375\":{\"t\":\"缺陷：对于变量存在多线程并发竞争\"},\"5376\":{\"t\":\"解决办法：\"},\"5377\":{\"t\":\"为变量设置ThreadLocal。\"},\"5378\":{\"h\":\"身份验证怎么做的？\",\"a\":\"身份验证怎么做的\"},\"5379\":{\"t\":\"AuthorizedFilter + AppJwtUtil \"},\"5380\":{\"t\":\"用户向服务器发送用户名、密码以及验证码用于登陆系统。用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录。\"},\"5381\":{\"t\":\"如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT。\"},\"5382\":{\"t\":\"用户以后每次向后端发请求都在 Header 中带上这个 JWT ，再次进入网关开始访问，网关过滤器接收用户携带的TOKEN。\"},\"5383\":{\"t\":\"服务端检查 JWT 并从中获取用户相关信息。网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误。\"},\"5384\":{\"t\":\"两点建议：\"},\"5385\":{\"t\":\"建议将 JWT 存放在 localStorage 中，放在 Cookie 中会有 CSRF 风险。\"},\"5386\":{\"t\":\"请求服务端并携带 JWT 的常见做法是将其放在 HTTP Header 的 Authorization 字段中（Authorization: Bearer Token）。\"},\"5387\":{\"t\":\"乐观锁：\"},\"5388\":{\"t\":\"使用版本号。\"},\"5389\":{\"h\":\"网关搭建 ：\",\"a\":\"网关搭建\"},\"5390\":{\"t\":\"思路分析：\"},\"5391\":{\"t\":\"用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录\"},\"5392\":{\"t\":\"用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户\"},\"5393\":{\"t\":\"用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN\"},\"5394\":{\"t\":\"网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误\"},\"5395\":{\"t\":\"具体实现：\"},\"5396\":{\"t\":\"第一：\"},\"5397\":{\"t\":\"​ 在认证过滤器中需要用到jwt的解析，所以需要把工具类拷贝一份到网关微服务\"},\"5398\":{\"t\":\"第二：\"},\"5399\":{\"t\":\"​ 在网关微服务中新建全局过滤器\"},\"5400\":{\"h\":\"文章详情静态化及存储：\",\"a\":\"文章详情静态化及存储\"},\"5401\":{\"t\":\"文章详情静态化：\"},\"5402\":{\"t\":\"​ FreeMarker 是一款模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。\"},\"5403\":{\"t\":\"​ 模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。\"},\"5404\":{\"t\":\"存储：AliyunOSS\"},\"5405\":{\"t\":\"对象存储可提供更好的数据保护，加密、保护敏感数据。\"},\"5406\":{\"h\":\"文章自动审核及延迟发布：\",\"a\":\"文章自动审核及延迟发布\"},\"5407\":{\"t\":\"文章自动审核：\"},\"5408\":{\"t\":\"1 自媒体端发布文章后，开始审核文章（异步线程的方式审核文章，在自动审核的方法上加上@Async注解（标明要异步调用），在自媒体引导类中使用@EnableAsync注解开启异步调用）\"},\"5409\":{\"t\":\"2 审核的主要是审核文章的内容（文本内容和图片）\"},\"5410\":{\"t\":\"3 借助第三方提供的接口审核文本\"},\"5411\":{\"t\":\"4 借助第三方提供的接口审核图片，由于图片存储到OSS中，需要先下载才能审核\"},\"5412\":{\"t\":\"5 如果审核失败，则需要修改自媒体文章的状态，status:2 审核失败 status:3 转到人工审核\"},\"5413\":{\"t\":\"6 如果审核成功，则需要在文章微服务中创建app端需要的文章：\"},\"5414\":{\"t\":\"​ 在文章审核成功以后需要在app的article库中新增文章数据：\"},\"5415\":{\"t\":\"​ 保存文章信息 ap_article\"},\"5416\":{\"t\":\"​ 保存文章配置信息 ap_article_config\"},\"5417\":{\"t\":\"​ 保存文章内容 ap_article_content\"},\"5418\":{\"t\":\"延迟发布：\"},\"5419\":{\"t\":\"redis实现：zset数据类型的去重有序（分数排序）特点进行延迟。例如：时间戳作为score进行排序\"},\"5420\":{\"t\":\"实现思路：\"},\"5421\":{\"t\":\"问题思路：\"},\"5422\":{\"t\":\"1.为什么任务需要存储在数据库中？\"},\"5423\":{\"t\":\"延迟任务是一个通用的服务，任何需要延迟得任务都可以调用该服务，需要考虑数据持久化的问题，存储数据库中是一种数据安全的考虑。\"},\"5424\":{\"t\":\"2.为什么redis中使用两种数据类型，list和zset？\"},\"5425\":{\"t\":\"效率问题，算法的时间复杂度\"},\"5426\":{\"t\":\"3.在添加zset数据的时候，为什么不需要预加载？\"},\"5427\":{\"t\":\"任务模块是一个通用的模块，项目中任何需要延迟队列的地方，都可以调用这个接口，要考虑到数据量的问题，如果数据量特别大，为了防止阻塞，只需要把未来几分钟要执行的数据存入缓存即可。\"},\"5428\":{\"t\":\"实现：\"},\"5429\":{\"t\":\"延迟队列服务提供对外接口：提供远程的feign接口\"},\"5430\":{\"t\":\"发布文章集成添加延迟队列接口\"},\"5431\":{\"t\":\"修改发布文章代码：把之前的异步调用修改为调用延迟任务\"},\"5432\":{\"t\":\"消费任务进行审核文章\"},\"5433\":{\"t\":\"4.为什么选用redis作为消息队列？\"},\"5434\":{\"t\":\"把 Redis 当作队列来使用时，会面临的 2 个问题：\"},\"5435\":{\"t\":\"Redis 本身可能会丢数据；\"},\"5436\":{\"t\":\"面对消息挤压，内存资源会紧张；\"},\"5437\":{\"t\":\"所以，能不能将 Redis 作为消息队列来使用，关键看你的业务场景：\"},\"5438\":{\"t\":\"如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。\"},\"5439\":{\"t\":\"如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。\"},\"5440\":{\"h\":\"分布式锁解决集群下的方法抢占执行：\",\"a\":\"分布式锁解决集群下的方法抢占执行\"},\"5441\":{\"t\":\"问题描述：\"},\"5442\":{\"t\":\"启动两台heima-leadnews-schedule服务，每台服务都会去执行refresh定时任务方法\"},\"5443\":{\"t\":\"分布式锁：\"},\"5444\":{\"t\":\"控制分布式系统有序的去对共享资源进行操作，通过互斥来保证数据的一致性。\"},\"5445\":{\"t\":\"解决方案：\"},\"5446\":{\"t\":\"sexnx （SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。\"},\"5447\":{\"t\":\"这种加锁的思路是，如果 key 不存在则为 key 设置 value，如果 key 已存在则 SETNX 命令不做任何操作\"},\"5448\":{\"t\":\"客户端A请求服务器设置key的值，如果设置成功就表示加锁成功\"},\"5449\":{\"t\":\"客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败\"},\"5450\":{\"t\":\"客户端A执行代码完成，删除锁\"},\"5451\":{\"t\":\"客户端B在等待一段时间后再去请求设置key的值，设置成功\"},\"5452\":{\"t\":\"客户端B执行代码完成，删除锁\"},\"5453\":{\"h\":\"热点文章实时计算：\",\"a\":\"热点文章实时计算\"},\"5454\":{\"t\":\"思路说明：\"},\"5455\":{\"t\":\"待优化：\"},\"5456\":{\"t\":\"使用FastDFS作为静态资源存储器，在其上实现热静态资源缓存、淘汰等功能（待优化）\"},\"5457\":{\"t\":\"运用Hbase技术，存储系统中的冷数据，保证系统数据的可靠性（待优化）\"},\"5458\":{\"t\":\"运用ES搜索技术，对冷数据、文章数据建立索引，以保证冷数据、文章查询性能（待优化）\"},\"5459\":{\"t\":\"当用户 Logout 的话，JWT 也还有效。除非，我们在后端增加额外的处理逻辑比如将失效的 JWT 存储起来，后端先验证 JWT 是否有效再进行处理。\"},\"5460\":{\"h\":\"自我介绍：\",\"a\":\"自我介绍\"},\"5461\":{\"t\":\"面试官，您好，首先很感谢您给我的面试机会！我叫杨路恒，今年24岁，山东济宁人，就读于陕西师范大学，今年研二，软件工程专业，研究方向为知识图谱。大学时间我主要利用课外时间学习了 Java 以及 一些框架 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的粉丝数达到了3k+，访问量达到了44W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"5462\":{\"h\":\"J V M\"},\"5463\":{\"h\":\"Java S E\"},\"5464\":{\"h\":\"Java Frame\"},\"5465\":{\"h\":\"Kafka\"},\"5466\":{\"h\":\"Linux\"},\"5467\":{\"h\":\"O S\"},\"5468\":{\"h\":\"Spring Cloud Distribution\"},\"5469\":{\"h\":\"Chang Jing\"},\"5470\":{\"h\":\"Cs Network\"},\"5471\":{\"h\":\"Database\"},\"5472\":{\"h\":\"Duo Xian Cheng Gao Bing Fa\"},\"5473\":{\"h\":\"Interview\"},\"5474\":{\"h\":\"Project\"},\"5475\":{\"h\":\"J V M\"},\"5476\":{\"h\":\"Java基础\"},\"5477\":{\"h\":\"Java框架\"},\"5478\":{\"h\":\"Linux\"},\"5479\":{\"h\":\"场景问题\"},\"5480\":{\"h\":\"多线程和高并发\"},\"5481\":{\"h\":\"微服务 Spring Cloud、分布式\"},\"5482\":{\"h\":\"操作系统\"},\"5483\":{\"h\":\"数据库\"},\"5484\":{\"h\":\"消息中间件 Kafka\"},\"5485\":{\"h\":\"计算机网络\"},\"5486\":{\"h\":\"面试\"},\"5487\":{\"h\":\"项目\"}},\"dirtCount\":0,\"index\":[[\"希望它能替代\",{\"1\":{\"5162\":1}}],[\"希望断开连接\",{\"1\":{\"2021\":1}}],[\"⼯⼚⽅法模式了解吗\",{\"0\":{\"3668\":1}}],[\"⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚\",{\"1\":{\"681\":1,\"3669\":1}}],[\"软件设计原则有哪些\",{\"0\":{\"3653\":1}}],[\"软件工程专业\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"速度慢\",{\"1\":{\"3287\":1}}],[\"速度快\",{\"1\":{\"3284\":1}}],[\"秘钥是自己保存的\",{\"1\":{\"3286\":1}}],[\"俺也要吐槽一下\",{\"1\":{\"3282\":1}}],[\"算法\",{\"1\":{\"3281\":1}}],[\"算法的时间复杂度\",{\"1\":{\"3174\":1,\"5425\":1}}],[\"哪些是非对称加密\",{\"1\":{\"3274\":1}}],[\"哪些算法是对称加密\",{\"1\":{\"3274\":1}}],[\"近期出现了很多加密算法\",{\"1\":{\"3274\":1}}],[\"五\",{\"0\":{\"3272\":1}}],[\"五个面试官\",{\"0\":{\"3071\":1,\"5322\":1}}],[\"账号\",{\"1\":{\"3259\":1,\"3265\":1}}],[\"彩虹表\",{\"1\":{\"3238\":1}}],[\"山东大学的王小云教授在美国加州举办的密码学会议上宣布破解了md5\",{\"1\":{\"3221\":1}}],[\"山东济宁人\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"抗修改性\",{\"1\":{\"3218\":1}}],[\"输出的消息摘要又称为哈希值\",{\"1\":{\"3214\":1}}],[\"输出结果\",{\"1\":{\"425\":1}}],[\"输出结果为\",{\"1\":{\"407\":1}}],[\"感谢\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"研究方向为知识图谱\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"研究生的专业成绩排名\",{\"1\":{\"3083\":1,\"5334\":1}}],[\"今年研二\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"今年24岁\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"今日在刷leetcode\",{\"1\":{\"558\":1}}],[\"您好\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"您可以节省任何更改\",{\"1\":{\"845\":1,\"3833\":1}}],[\"淘汰等功能\",{\"1\":{\"3205\":1,\"5456\":1}}],[\"已存在则\",{\"1\":{\"3196\":1,\"5447\":1}}],[\"已经不能满足需求\",{\"1\":{\"5162\":1}}],[\"已经不可能成为\",{\"1\":{\"1816\":1,\"4376\":1}}],[\"已经把内存地址v中的变量值率先更新成了2\",{\"1\":{\"2784\":1,\"4009\":1}}],[\"已经同意提交了提案n1\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"已经没有超过半数的节点数了\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"已经被加载的类会直接返回\",{\"1\":{\"203\":1,\"230\":1,\"3486\":1,\"3513\":1}}],[\"借助第三方提供的接口审核图片\",{\"1\":{\"3160\":1,\"5411\":1}}],[\"借助第三方提供的接口审核文本\",{\"1\":{\"3159\":1,\"5410\":1}}],[\"审核失败\",{\"1\":{\"3161\":1,\"5412\":1}}],[\"审核的主要是审核文章的内容\",{\"1\":{\"3158\":1,\"5409\":1}}],[\"审计\",{\"1\":{\"856\":1,\"3844\":1}}],[\"异步线程的方式审核文章\",{\"1\":{\"3157\":1,\"5408\":1}}],[\"异常\",{\"0\":{\"3521\":1}}],[\"异常来拒绝新来的任务\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"异常处理者处理的异常的类信息\",{\"1\":{\"280\":1,\"3557\":1}}],[\"异常表中包含了一个或多个异常处理者\",{\"1\":{\"276\":1,\"3553\":1}}],[\"异常的底层\",{\"0\":{\"3547\":1}}],[\"异常的抛出\",{\"1\":{\"256\":1,\"3541\":1}}],[\"异常的申明\",{\"1\":{\"253\":1,\"3538\":1}}],[\"异常和反射\",{\"0\":{\"235\":1}}],[\"专用的语言\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"专门用于组合搜索\",{\"1\":{\"2291\":1,\"4624\":1}}],[\"专门设计的一种支持崩溃恢复的原子广播协议\",{\"1\":{\"1779\":1,\"4339\":1}}],[\"​\",{\"1\":{\"3146\":1,\"3148\":1,\"3151\":1,\"3152\":1,\"3163\":1,\"3164\":1,\"3165\":1,\"3166\":1,\"5397\":1,\"5399\":1,\"5402\":1,\"5403\":1,\"5414\":1,\"5415\":1,\"5416\":1,\"5417\":1}}],[\"思路说明\",{\"1\":{\"3203\":1,\"5454\":1}}],[\"思路分析\",{\"1\":{\"3139\":1,\"5390\":1}}],[\"思路其实很简单\",{\"1\":{\"2804\":1,\"4029\":1}}],[\"风险\",{\"1\":{\"3134\":1,\"5385\":1}}],[\"放在\",{\"1\":{\"3134\":1,\"5385\":1}}],[\"放回给调用者\",{\"1\":{\"1764\":1,\"4324\":1}}],[\"身份验证怎么做的\",{\"0\":{\"3127\":1,\"5378\":1}}],[\"细心的朋友一定会发现\",{\"1\":{\"3118\":1,\"5369\":1}}],[\"试想一下\",{\"1\":{\"3116\":1,\"5367\":1}}],[\"偏移量\",{\"1\":{\"3115\":1,\"5366\":1}}],[\"偏向于第一个访问锁的线程\",{\"1\":{\"2755\":1,\"3980\":1}}],[\"偏向锁就升级为轻量级锁\",{\"1\":{\"2763\":1,\"3988\":1}}],[\"偏向锁就会升级为轻量级锁\",{\"1\":{\"2761\":1,\"3986\":1}}],[\"偏向锁是指当一段同步代码一直被同一个线程所访问时\",{\"1\":{\"2759\":1,\"3984\":1}}],[\"偏向锁只有遇到其他线程尝试竞争偏向锁时\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"偏向锁几乎没有额外开销\",{\"1\":{\"2757\":1,\"3982\":1}}],[\"偏向锁\",{\"0\":{\"2754\":1,\"3979\":1}}],[\"偏向模式下\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"缺陷\",{\"1\":{\"3110\":1,\"3114\":1,\"3124\":1,\"5361\":1,\"5365\":1,\"5375\":1}}],[\"缺点\",{\"1\":{\"1740\":1,\"2313\":1,\"2321\":1,\"2894\":1,\"2905\":1,\"2908\":1,\"4119\":1,\"4130\":1,\"4133\":1,\"4300\":1,\"4646\":1,\"4654\":1}}],[\"缺点是如果要增加新产品\",{\"1\":{\"678\":1,\"3666\":1}}],[\"喜欢\",{\"1\":{\"3103\":1,\"5354\":1}}],[\"运用es搜索技术\",{\"1\":{\"3207\":1,\"5458\":1}}],[\"运用hbase技术\",{\"1\":{\"3206\":1,\"5457\":1}}],[\"运用ai技术\",{\"1\":{\"3107\":1,\"5358\":1}}],[\"运用redis缓存技术\",{\"1\":{\"3104\":1,\"5355\":1}}],[\"运用mybatis\",{\"1\":{\"3102\":1,\"5353\":1}}],[\"运用spring\",{\"1\":{\"3100\":1,\"3101\":1,\"5351\":1,\"5352\":1}}],[\"运行在\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"运行后就是一个独立的进程\",{\"1\":{\"1133\":1,\"1301\":1,\"1469\":1,\"1637\":1,\"4515\":1}}],[\"运行的线程执行sleep\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"运行的线程执行wait\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"运行的线程在获取对象的同步锁时\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"运行状态\",{\"1\":{\"1022\":1,\"1190\":1,\"1358\":1,\"1526\":1,\"4404\":1}}],[\"运行groovy脚本\",{\"1\":{\"874\":1,\"3862\":1}}],[\"运行流程\",{\"1\":{\"732\":1,\"3720\":1}}],[\"运行时异常的特点是java编译器不会检查它\",{\"1\":{\"243\":1,\"3528\":1}}],[\"运行时异常\",{\"1\":{\"241\":1,\"3526\":1}}],[\"运行时异常和编译时异常\",{\"1\":{\"240\":1,\"3525\":1}}],[\"运行时数据区\",{\"0\":{\"181\":1,\"3464\":1},\"1\":{\"177\":1,\"180\":1,\"3460\":1,\"3463\":1}}],[\"热点文章实时计算\",{\"0\":{\"3202\":1,\"5453\":1},\"1\":{\"3097\":1,\"5348\":1}}],[\"热点数据\",{\"1\":{\"2710\":1,\"2717\":1,\"5043\":1,\"5050\":1}}],[\"浏览文章功能\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"浏览器解析渲染页面\",{\"1\":{\"2136\":1,\"2229\":1,\"5189\":1}}],[\"十二\",{\"0\":{\"3094\":1,\"5345\":1}}],[\"八小时工作制\",{\"1\":{\"3068\":1,\"5319\":1}}],[\"突然挂掉了\",{\"1\":{\"3116\":1,\"5367\":1}}],[\"突然电话断了\",{\"1\":{\"3065\":1,\"5316\":1}}],[\"突然说到mysqlb+树用到了红黑树\",{\"1\":{\"3057\":1,\"5308\":1}}],[\"讲一下研究生的论文成果\",{\"1\":{\"3082\":1,\"5333\":1}}],[\"讲一下spring\",{\"1\":{\"3076\":1,\"5327\":1}}],[\"讲一下你的项目经验\",{\"1\":{\"3063\":1,\"5314\":1}}],[\"讲一下为什么用线程池\",{\"1\":{\"3059\":1,\"5310\":1}}],[\"讲一下线程池参数maxsize满了你会怎么做\",{\"1\":{\"3060\":1,\"5311\":1}}],[\"讲一下线程池\",{\"1\":{\"3058\":1,\"5309\":1}}],[\"讲了下红黑树的特性\",{\"1\":{\"3057\":1,\"5308\":1}}],[\"讲真\",{\"1\":{\"2256\":1,\"4589\":1}}],[\"吧啦吧啦\",{\"1\":{\"3057\":1,\"5308\":1}}],[\"联想\",{\"0\":{\"3055\":1,\"5306\":1}}],[\"联合索引\",{\"0\":{\"2328\":1,\"4661\":1},\"1\":{\"2291\":1,\"2329\":1,\"4624\":1,\"4662\":1}}],[\"想从实习中收获什么\",{\"1\":{\"3090\":1,\"5341\":1}}],[\"想打他\",{\"1\":{\"3053\":1,\"5304\":1}}],[\"想要给同一局域网内的\",{\"1\":{\"2153\":1,\"5206\":1}}],[\"想要其生效必须引入spring\",{\"1\":{\"816\":1,\"3804\":1}}],[\"想要使用此布局\",{\"1\":{\"149\":1,\"153\":1,\"3437\":1}}],[\"离谱\",{\"1\":{\"3036\":1,\"5287\":1}}],[\"离散性可能会变差\",{\"1\":{\"530\":1,\"3619\":1}}],[\"熟悉的是java基础和mysql\",{\"1\":{\"3036\":1,\"5287\":1}}],[\"她说最晚周五下午\",{\"1\":{\"3032\":1,\"5283\":1}}],[\"态度算好的\",{\"0\":{\"3026\":1,\"5277\":1}}],[\"规避资源耗尽的风险\",{\"1\":{\"3004\":1,\"4229\":1}}],[\"规定除了最初建立连接时的\",{\"1\":{\"2018\":1}}],[\"明确指出线程资源必须通过线程池提供\",{\"1\":{\"3001\":1,\"4226\":1}}],[\"便处理在任务队列中的任务\",{\"1\":{\"2996\":1,\"4221\":1}}],[\"便于减少系统的重复代码\",{\"1\":{\"722\":1,\"3710\":1}}],[\"便于后者的封装和控制\",{\"1\":{\"688\":1,\"3676\":1}}],[\"待优化\",{\"1\":{\"3204\":1,\"3205\":1,\"3206\":1,\"3207\":1,\"5455\":1,\"5456\":1,\"5457\":1,\"5458\":1}}],[\"待线程空闲\",{\"1\":{\"2997\":1,\"4222\":1}}],[\"待有线程空闲时\",{\"1\":{\"2996\":1,\"4221\":1}}],[\"待该线程操作完释放互斥锁后\",{\"1\":{\"1166\":1,\"1334\":1,\"1502\":1,\"1670\":1,\"4548\":1}}],[\"密钥的管理和分发非常困难\",{\"1\":{\"3285\":1}}],[\"密钥持有者用私有密钥对收到的信息进行解密\",{\"1\":{\"3279\":1}}],[\"密码\",{\"1\":{\"3259\":1,\"3265\":1}}],[\"密码为123456\",{\"1\":{\"3226\":1}}],[\"密码以及验证码校验正确的话\",{\"1\":{\"3130\":1,\"5381\":1}}],[\"密码以及验证码用于登陆系统\",{\"1\":{\"3129\":1,\"5380\":1}}],[\"密码加密的文章\",{\"0\":{\"21\":1,\"3309\":1}}],[\"密集型任务的应用中\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"密集型任务\",{\"1\":{\"2992\":1,\"2993\":1,\"4217\":1,\"4218\":1}}],[\"堆\",{\"1\":{\"2983\":1,\"4208\":1}}],[\"堆积在内存里\",{\"1\":{\"2674\":1,\"5007\":1}}],[\"延迟队列服务提供对外接口\",{\"1\":{\"3178\":1,\"5429\":1}}],[\"延迟任务是一个通用的服务\",{\"1\":{\"3172\":1,\"5423\":1}}],[\"延迟发布\",{\"1\":{\"3167\":1,\"5418\":1}}],[\"延迟阻塞队列\",{\"1\":{\"2983\":1,\"4208\":1}}],[\"延迟写\",{\"1\":{\"2657\":1,\"4990\":1}}],[\"影响程序的整体性能\",{\"1\":{\"2974\":1,\"4199\":1}}],[\"影响程序的并发访问性\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"抛出\",{\"1\":{\"2973\":1,\"4198\":1}}],[\"抛出一个运行时异常\",{\"1\":{\"258\":1,\"3543\":1}}],[\"饱和策略会调用rejectedexecutionhandler\",{\"1\":{\"2988\":1,\"4213\":1}}],[\"饱和策略来配置线程池的时候\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"饱和策略\",{\"1\":{\"2968\":1,\"4193\":1}}],[\"杨路恒\",{\"1\":{\"2957\":1,\"4182\":1}}],[\"调优和监控\",{\"1\":{\"2954\":1,\"4179\":1}}],[\"调用执行自己的线程运行任务\",{\"1\":{\"2974\":1,\"4199\":1}}],[\"调用方法要和本地抽象方法的签名完全一致\",{\"1\":{\"1762\":1,\"4322\":1}}],[\"调用者就会等待被调用者的响应\",{\"1\":{\"1749\":1,\"4309\":1}}],[\"调用\",{\"1\":{\"315\":1,\"734\":1,\"3592\":1,\"3722\":1}}],[\"调用它的方法\",{\"1\":{\"308\":1,\"3585\":1}}],[\"调用自己的\",{\"1\":{\"232\":1,\"3515\":1}}],[\"调用父加载器\",{\"1\":{\"231\":1,\"3514\":1}}],[\"盒子中可以存储每个线程的私有数据\",{\"1\":{\"2937\":1,\"4162\":1}}],[\"取出\",{\"1\":{\"2944\":1,\"4169\":1}}],[\"取得代之的确实是\",{\"1\":{\"2927\":1,\"2931\":1,\"4152\":1,\"4156\":1}}],[\"取消点赞的操作就是删除redis中的数据即可\",{\"1\":{\"1846\":1,\"3923\":1}}],[\"活活饿死\",{\"1\":{\"2908\":1,\"4133\":1}}],[\"活跃事务列表\",{\"1\":{\"2541\":1,\"4874\":1}}],[\"失败则乖乖排队\",{\"1\":{\"2906\":1,\"4131\":1}}],[\"失败则返回\",{\"1\":{\"2845\":1,\"2846\":1,\"2848\":1,\"4070\":1,\"4071\":1,\"4073\":1}}],[\"唤醒线程的开销\",{\"1\":{\"2907\":1,\"4132\":1}}],[\"唤醒下一个阻塞线程有系统开销\",{\"1\":{\"2905\":1,\"4130\":1}}],[\"唤醒出队等\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"吞吐量会下降很多\",{\"1\":{\"2905\":1,\"4130\":1}}],[\"像\",{\"1\":{\"2901\":1,\"2910\":1,\"4126\":1,\"4135\":1}}],[\"像java\",{\"1\":{\"2895\":1,\"4120\":1}}],[\"独享锁与共享锁也是通过aqs来实现的\",{\"1\":{\"2897\":1,\"4122\":1}}],[\"独享锁\",{\"0\":{\"2892\":1,\"4117\":1},\"1\":{\"2893\":1,\"4118\":1}}],[\"独占方式\",{\"1\":{\"2845\":1,\"2846\":1,\"4070\":1,\"4071\":1}}],[\"独占和共享\",{\"1\":{\"2824\":1,\"4049\":1}}],[\"独占表锁\",{\"1\":{\"2427\":1,\"2428\":1,\"4760\":1,\"4761\":1}}],[\"独占锁\",{\"1\":{\"2420\":1,\"2453\":1,\"2825\":1,\"4050\":1,\"4753\":1,\"4786\":1}}],[\"机制\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"乐观锁\",{\"0\":{\"2881\":1,\"4106\":1},\"1\":{\"2882\":1,\"3136\":1,\"4107\":1,\"5387\":1}}],[\"认为别人不会同时修改数据\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"认为其他人也会修改数据\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"认可http\",{\"1\":{\"1888\":1,\"1903\":1,\"1918\":1,\"1931\":1,\"1944\":1,\"1959\":1,\"5150\":1,\"5173\":1}}],[\"悲观锁大多数情况下依靠数据库的锁机制实现\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"悲观锁\",{\"0\":{\"2879\":1,\"4104\":1}}],[\"强制从新从主内存加载数据\",{\"1\":{\"2864\":1,\"4089\":1}}],[\"硬件层面的内存屏障分为load\",{\"1\":{\"2863\":1,\"4088\":1}}],[\"保存文章内容\",{\"1\":{\"3166\":1,\"5417\":1}}],[\"保存文章配置信息\",{\"1\":{\"3165\":1,\"5416\":1}}],[\"保存文章信息\",{\"1\":{\"3164\":1,\"5415\":1}}],[\"保存当前获得锁的线程\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"保护敏感数据\",{\"1\":{\"3154\":1,\"5405\":1}}],[\"保证系统数据的可靠性\",{\"1\":{\"3206\":1,\"5457\":1}}],[\"保证共享变量的可见性\",{\"1\":{\"2859\":1,\"4084\":1}}],[\"保证只有一个请求会落到数据库上\",{\"1\":{\"2714\":1,\"5047\":1}}],[\"保证了数据持久化\",{\"1\":{\"2658\":1,\"4991\":1}}],[\"保证了消息的发送顺序性\",{\"1\":{\"1795\":1,\"4355\":1}}],[\"保证数据传输的安全性\",{\"1\":{\"2063\":1}}],[\"保证每个机房都有全量的数据\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"尝试释放资源\",{\"1\":{\"2846\":1,\"2848\":1,\"4071\":1,\"4073\":1}}],[\"尝试获取资源\",{\"1\":{\"2845\":1,\"2847\":1,\"4070\":1,\"4072\":1}}],[\"尝试如下的代码片段\",{\"1\":{\"572\":1}}],[\"至少目前来看\",{\"1\":{\"5165\":1}}],[\"至于获取资源失败入队\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"至此也就解决了\",{\"1\":{\"811\":1,\"3799\":1}}],[\"带来非常大的开销\",{\"1\":{\"2809\":1,\"4034\":1}}],[\"带来的效益是一样的\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"典型\",{\"0\":{\"2801\":1,\"4026\":1},\"1\":{\"2818\":1,\"4043\":1}}],[\"典型值为\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"敲黑板\",{\"1\":{\"2800\":1,\"4025\":1}}],[\"封装好的并发工具类来间接使用的\",{\"1\":{\"2797\":1,\"4022\":1}}],[\"封装起来\",{\"1\":{\"722\":1,\"3710\":1}}],[\"旧的预期值a=1\",{\"1\":{\"2782\":1,\"4007\":1}}],[\"旧的预期值a\",{\"1\":{\"2779\":1,\"4004\":1}}],[\"旧消息就会过期并被删除\",{\"1\":{\"926\":1,\"5073\":1}}],[\"轻量级锁的获取有两种情况\",{\"1\":{\"2762\":1,\"3987\":1}}],[\"轻量级锁的获取及释放依赖多次\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"轻量级锁认为虽然竞争是存在的\",{\"1\":{\"2761\":1,\"3986\":1}}],[\"轻量级锁\",{\"0\":{\"2760\":1,\"3985\":1}}],[\"恢复到无锁\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"持有偏向锁的线程才会释放锁\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"持有锁的线程id也在对象头里\",{\"1\":{\"2757\":1,\"3982\":1}}],[\"持久化功能的实现可以简单分为\",{\"1\":{\"2655\":1,\"4988\":1}}],[\"持久化后每执行一条会更改\",{\"1\":{\"2651\":1,\"4984\":1}}],[\"持久化的实时性更好\",{\"1\":{\"2649\":1,\"4982\":1}}],[\"持久化\",{\"0\":{\"2635\":1,\"2640\":1,\"2648\":1,\"4968\":1,\"4973\":1,\"4981\":1}}],[\"持久性是通过\",{\"1\":{\"2488\":1,\"4821\":1}}],[\"持久性\",{\"1\":{\"760\":1,\"2486\":1,\"3748\":1,\"4819\":1}}],[\"初次执行synchronized代码块时\",{\"1\":{\"2755\":1,\"3980\":1}}],[\"初始状态\",{\"1\":{\"2780\":1,\"4005\":1}}],[\"初始序列号\",{\"1\":{\"1984\":1}}],[\"初始化的序列号都要求不一样呢\",{\"0\":{\"2098\":1},\"1\":{\"1983\":1}}],[\"初始化选举\",{\"1\":{\"1800\":1,\"4360\":1}}],[\"初始化spring\",{\"1\":{\"876\":1,\"3864\":1}}],[\"初始化\",{\"1\":{\"188\":1,\"3471\":1}}],[\"公钥是公开的\",{\"1\":{\"3286\":1}}],[\"公开密钥用于对信息加密\",{\"1\":{\"3279\":1}}],[\"公平锁\",{\"0\":{\"2902\":1,\"4127\":1},\"1\":{\"2903\":1,\"4128\":1}}],[\"公平锁和非公平锁等高级功能\",{\"1\":{\"2744\":1,\"3969\":1}}],[\"公平锁公平锁是指多个线程在等待同一个锁时\",{\"1\":{\"2741\":1,\"3966\":1}}],[\"公司推出的\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"改为处理其他事情\",{\"1\":{\"2740\":1,\"3965\":1}}],[\"改完了编译运行没有bug然而过了两天你发现用linkedhashmap会有隐患\",{\"1\":{\"290\":1,\"3567\":1}}],[\"限流\",{\"1\":{\"2725\":1,\"5058\":1}}],[\"限制每张表上的索引数量\",{\"1\":{\"2343\":1,\"4676\":1}}],[\"摧枯拉朽之势\",{\"1\":{\"2720\":1,\"5053\":1}}],[\"哈哈\",{\"1\":{\"2719\":1,\"5052\":1}}],[\"哈希索引\",{\"1\":{\"2280\":1,\"4613\":1}}],[\"哈希算法\",{\"1\":{\"2265\":1,\"4598\":1}}],[\"哈希表是键值对的集合\",{\"1\":{\"2264\":1,\"4597\":1}}],[\"哈希表结构\",{\"0\":{\"663\":1,\"3651\":1},\"1\":{\"2944\":1,\"4169\":1}}],[\"哈希值的使用不同\",{\"1\":{\"541\":1}}],[\"哈希值进行与操作时可以保证低位的值不变\",{\"1\":{\"528\":1,\"3617\":1}}],[\"得到\",{\"1\":{\"3262\":1,\"3268\":1}}],[\"得到值之后判断位数组中的每个元素是否都为\",{\"1\":{\"2707\":1,\"5040\":1}}],[\"得到哈希值\",{\"1\":{\"2703\":1,\"5036\":1}}],[\"得到请求资源标识符\",{\"1\":{\"734\":1,\"3722\":1}}],[\"小羊看来网站上大家的讨论\",{\"1\":{\"5164\":1}}],[\"小羊在昨天2023\",{\"1\":{\"3273\":1}}],[\"小概率会误判\",{\"1\":{\"2700\":1,\"5033\":1}}],[\"小于该\",{\"1\":{\"2538\":1,\"4871\":1}}],[\"小于这个\",{\"1\":{\"2538\":1,\"2541\":1,\"4871\":1,\"4874\":1}}],[\"布隆过滤器说某个元素不在\",{\"1\":{\"2700\":1,\"5033\":1}}],[\"布隆过滤器说某个元素存在\",{\"1\":{\"2700\":1,\"5033\":1}}],[\"布隆过滤器是一个非常神奇的数据结构\",{\"1\":{\"2698\":1,\"5031\":1}}],[\"布隆过滤器\",{\"1\":{\"2697\":1,\"5030\":1}}],[\"布局与功能禁用\",{\"0\":{\"7\":1,\"3295\":1}}],[\"穿透\",{\"0\":{\"2690\":1,\"5023\":1}}],[\"击穿\",{\"0\":{\"2690\":1,\"5023\":1}}],[\"哨兵\",{\"0\":{\"2689\":1,\"5022\":1}}],[\"移除最不经常使用的\",{\"1\":{\"2687\":1,\"5020\":1}}],[\"移除最近最少使用的\",{\"1\":{\"2682\":1,\"5015\":1}}],[\"懒汉式删除\",{\"1\":{\"2673\":1,\"5006\":1}}],[\"懒加载\",{\"1\":{\"674\":1,\"3662\":1}}],[\"惰性删除对\",{\"1\":{\"2673\":1,\"5006\":1}}],[\"惰性删除\",{\"1\":{\"2671\":1,\"5004\":1}}],[\"磁盘机器就宕机了\",{\"1\":{\"2652\":1,\"4985\":1}}],[\"快照文件\",{\"1\":{\"2645\":1,\"4978\":1}}],[\"快照持久化是\",{\"1\":{\"2642\":1,\"4975\":1}}],[\"快照\",{\"1\":{\"2637\":1,\"4970\":1}}],[\"快速取出\",{\"1\":{\"2265\":1,\"4598\":1}}],[\"电子邮件\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"电话面试\",{\"1\":{\"3032\":1,\"5283\":1}}],[\"电商系统中商品的销量排名等\",{\"1\":{\"2634\":1,\"4967\":1}}],[\"电脑里有\",{\"1\":{\"582\":1}}],[\"游戏积分排行榜\",{\"1\":{\"2634\":1,\"4967\":1}}],[\"替代了双向链表和压缩列表\",{\"1\":{\"2609\":1,\"4942\":1}}],[\"替换\",{\"1\":{\"1081\":1,\"1249\":1,\"1417\":1,\"1585\":1,\"4463\":1}}],[\"命令不做任何操作\",{\"1\":{\"3196\":1,\"5447\":1}}],[\"命令在指定的\",{\"1\":{\"3195\":1,\"5446\":1}}],[\"命令生成编译后的\",{\"1\":{\"2915\":1,\"4140\":1}}],[\"命令查看\",{\"1\":{\"2915\":1,\"4140\":1}}],[\"命令追加\",{\"1\":{\"2656\":1,\"4989\":1}}],[\"命令实现消息队列\",{\"1\":{\"2611\":1,\"4944\":1}}],[\"命令可以实现一个最简易的分布式锁\",{\"1\":{\"2603\":1,\"4936\":1}}],[\"命名服务\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"命名管道\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"命名\",{\"1\":{\"669\":1,\"3657\":1}}],[\"拼接字符串不会造成缓冲区溢出\",{\"1\":{\"2599\":1,\"4932\":1}}],[\"音频\",{\"1\":{\"2597\":1,\"4930\":1}}],[\"音频等多媒体通信\",{\"1\":{\"2080\":1}}],[\"地理位置\",{\"1\":{\"2591\":1,\"4924\":1}}],[\"地址返回客户端\",{\"1\":{\"2220\":1,\"5273\":1}}],[\"地址吗\",{\"1\":{\"2214\":1,\"2216\":1,\"5267\":1,\"5269\":1}}],[\"地址上托管多个域名\",{\"1\":{\"2184\":1,\"5237\":1}}],[\"地址在另一个子网中\",{\"1\":{\"2166\":1,\"5219\":1}}],[\"地址后\",{\"1\":{\"2162\":1,\"5215\":1}}],[\"地址为主机\",{\"1\":{\"2175\":1,\"5228\":1}}],[\"地址为查询分组的发送者\",{\"1\":{\"2161\":1,\"5214\":1}}],[\"地址为发送者本身\",{\"1\":{\"2161\":1,\"5214\":1}}],[\"地址为137\",{\"1\":{\"2153\":2,\"5206\":2}}],[\"地址恰恰相反\",{\"1\":{\"2161\":1,\"5214\":1}}],[\"地址信息\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"地址和一个\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"地址和\",{\"1\":{\"2160\":1,\"2162\":1,\"2165\":1,\"5213\":1,\"5215\":1,\"5218\":1}}],[\"地址和端口号组成\",{\"1\":{\"2034\":1}}],[\"地址是本子网内与路由器连接的接口的\",{\"1\":{\"2170\":1,\"5223\":1}}],[\"地址是\",{\"1\":{\"2170\":2,\"5223\":2}}],[\"地址是否为自己的\",{\"1\":{\"2159\":1,\"5212\":1}}],[\"地址是广播地址\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"地址绝不会是主机\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"地址也是主机\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"地址即为主机\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"地址对应的映射条目\",{\"1\":{\"2156\":1,\"5209\":1}}],[\"地址映射关系\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"地址\",{\"1\":{\"2148\":1,\"2154\":2,\"2155\":1,\"2156\":1,\"2158\":7,\"2159\":1,\"2165\":2,\"2167\":1,\"2168\":1,\"2169\":2,\"2170\":5,\"2171\":1,\"2173\":1,\"2174\":2,\"2175\":1,\"2214\":1,\"2219\":1,\"5201\":1,\"5207\":2,\"5208\":1,\"5209\":1,\"5211\":7,\"5212\":1,\"5218\":2,\"5220\":1,\"5221\":1,\"5222\":2,\"5223\":5,\"5224\":1,\"5226\":1,\"5227\":2,\"5228\":1,\"5267\":1,\"5272\":1}}],[\"地址的一些问题\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"地址转\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"地址才是物理地址\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"地址属于逻辑地址\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"地址解析协议\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"散列值\",{\"1\":{\"3214\":1}}],[\"散列算法\",{\"1\":{\"3214\":1}}],[\"散列\",{\"0\":{\"2619\":1,\"4952\":1},\"1\":{\"2590\":1,\"4923\":1}}],[\"点赞\",{\"1\":{\"2618\":1,\"3103\":1,\"4951\":1,\"5354\":1}}],[\"点\",{\"1\":{\"2585\":1,\"4918\":1}}],[\"场景\",{\"1\":{\"2571\":1,\"4904\":1}}],[\"场景问题\",{\"0\":{\"1838\":1,\"3915\":1,\"5479\":1}}],[\"位存储\",{\"1\":{\"2591\":1,\"4924\":1}}],[\"位数字\",{\"1\":{\"2566\":1,\"4899\":1}}],[\"位为\",{\"1\":{\"2021\":1}}],[\"占用硬盘超过500tb\",{\"1\":{\"3239\":1}}],[\"占用空间由定义的宽度决定\",{\"1\":{\"2566\":1,\"4899\":1}}],[\"占用也就空间越小\",{\"1\":{\"2562\":1,\"4895\":1}}],[\"精准浮点\",{\"1\":{\"2565\":1,\"4898\":1}}],[\"禁止驱逐数据\",{\"1\":{\"2684\":1,\"5017\":1}}],[\"禁止使用\",{\"0\":{\"2575\":1,\"4908\":1}}],[\"禁止使用全文索引\",{\"0\":{\"2570\":1,\"4903\":1}}],[\"禁止给表中的每一列都建立单独的索引\",{\"0\":{\"2572\":1,\"4905\":1}}],[\"禁止在数据库中存储文件\",{\"0\":{\"2558\":1,\"4891\":1}}],[\"禁用了如下功能\",{\"1\":{\"9\":1,\"3297\":1}}],[\"禁用展示\",{\"1\":{\"5\":1,\"97\":1,\"3293\":1,\"3385\":1}}],[\"故该\",{\"1\":{\"2550\":1,\"4883\":1}}],[\"隐藏字段\",{\"1\":{\"2531\":1,\"2532\":1,\"2533\":1,\"4864\":1,\"4865\":1,\"4866\":1}}],[\"串行化\",{\"1\":{\"2512\":1,\"2519\":1,\"2520\":1,\"2522\":2,\"2528\":1,\"4845\":1,\"4852\":1,\"4853\":1,\"4855\":2,\"4861\":1}}],[\"条记录\",{\"1\":{\"2504\":1,\"4837\":1}}],[\"条\",{\"1\":{\"2504\":1,\"2506\":1,\"4837\":1,\"4839\":1}}],[\"条件查询的字段\",{\"1\":{\"2338\":1,\"4671\":1}}],[\"刚才得到的数据就是过期的数据\",{\"1\":{\"2496\":1,\"4829\":1}}],[\"刚刚开始有软件支持\",{\"1\":{\"1889\":1,\"1904\":1,\"1919\":1,\"1932\":1,\"1945\":1,\"1960\":1,\"5151\":1,\"5174\":1}}],[\"现象\",{\"1\":{\"2493\":1,\"2498\":1,\"2502\":1,\"4826\":1,\"4831\":1,\"4835\":1}}],[\"现在主流的彩虹表记录数据约90万亿条\",{\"1\":{\"3239\":1}}],[\"现在在csdn上的粉丝数达到了3k+\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"现在http\",{\"1\":{\"1889\":1,\"1904\":1,\"1919\":1,\"1932\":1,\"1945\":1,\"1960\":1,\"5151\":1,\"5174\":1}}],[\"现在查询非常慢\",{\"0\":{\"1860\":1,\"3937\":1}}],[\"现在\",{\"1\":{\"806\":1,\"3794\":1}}],[\"现在这个基于\",{\"1\":{\"616\":1}}],[\"脏读\",{\"0\":{\"2492\":1,\"4825\":1},\"1\":{\"2493\":1,\"2519\":1,\"4826\":1,\"4852\":1}}],[\"均可以被\",{\"1\":{\"2538\":1,\"4871\":1}}],[\"均为\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"均包含了发送和接收的\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"未提交事务修改过的数据\",{\"1\":{\"2493\":1,\"4826\":1}}],[\"未增加的情况\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"未能找到目标路由器的本子网接口的\",{\"1\":{\"2169\":1,\"5222\":1}}],[\"扣除了\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"商品到手\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"商品库存这类需要强一致的数据\",{\"1\":{\"1876\":1,\"3953\":1}}],[\"购买失败时\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"购买成功时\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"购物车系统\",{\"1\":{\"1854\":1,\"3931\":1}}],[\"称为临键锁\",{\"1\":{\"2468\":1,\"4801\":1}}],[\"称为间隙锁\",{\"1\":{\"2464\":1,\"4797\":1}}],[\"称为记录锁\",{\"1\":{\"2460\":1,\"4793\":1}}],[\"型关系\",{\"1\":{\"2472\":1,\"4805\":1}}],[\"型的记录锁是冲突的\",{\"1\":{\"2472\":1,\"4805\":1}}],[\"型的记录锁与\",{\"1\":{\"2472\":1,\"4805\":1}}],[\"型的\",{\"1\":{\"2470\":2,\"2471\":2,\"4803\":2,\"4804\":2}}],[\"型间隙锁\",{\"1\":{\"2466\":1,\"4799\":1}}],[\"型间隙锁和\",{\"1\":{\"2466\":1,\"4799\":1}}],[\"型与\",{\"1\":{\"2461\":2,\"2462\":2,\"2472\":1,\"4794\":2,\"4795\":2,\"4805\":1}}],[\"型记录锁\",{\"1\":{\"2461\":2,\"2462\":2,\"4794\":2,\"4795\":2}}],[\"型记录锁后\",{\"1\":{\"2461\":1,\"2462\":1,\"4794\":1,\"4795\":1}}],[\"间隙锁之间是兼容的\",{\"1\":{\"2466\":1,\"4799\":1}}],[\"间隙锁虽然存在\",{\"1\":{\"2466\":1,\"4799\":1}}],[\"间隙锁\",{\"1\":{\"2457\":1,\"2465\":1,\"4790\":1,\"4798\":1}}],[\"记录下来\",{\"1\":{\"2542\":1,\"4875\":1}}],[\"记录数量\",{\"1\":{\"2502\":1,\"4835\":1}}],[\"记录锁+间隙锁\",{\"1\":{\"2525\":1,\"4858\":1}}],[\"记录锁\",{\"1\":{\"2456\":1,\"4789\":1}}],[\"记录了map中kv对的个数\",{\"1\":{\"396\":1}}],[\"满足写写互斥\",{\"1\":{\"2453\":1,\"4786\":1}}],[\"满足读读共享\",{\"1\":{\"2453\":1,\"4786\":1}}],[\"行级锁的类型主要有三类\",{\"1\":{\"2455\":1,\"4788\":1}}],[\"行级锁\",{\"0\":{\"2448\":1,\"4781\":1}}],[\"行为型\",{\"1\":{\"669\":1,\"3657\":1}}],[\"修饰的方法并没有\",{\"1\":{\"2927\":1,\"2931\":1,\"4152\":1,\"4156\":1}}],[\"修饰的字段加上轻量级锁\",{\"1\":{\"2438\":1,\"4771\":1}}],[\"修饰的字段的值是连续递增的\",{\"1\":{\"2435\":1,\"4768\":1}}],[\"修饰的字段赋值递增的值\",{\"1\":{\"2434\":1,\"4767\":1}}],[\"修饰方法的的情况\",{\"0\":{\"2924\":1,\"4149\":1}}],[\"修改发布文章代码\",{\"1\":{\"3180\":1,\"5431\":1}}],[\"修改为\",{\"1\":{\"2802\":1,\"4027\":1}}],[\"修改锁标志位\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"修改对象头里的锁标志位\",{\"1\":{\"2755\":1,\"3980\":1}}],[\"修改了表字段\",{\"1\":{\"2412\":1,\"4745\":1}}],[\"修改代价肯定是较大的\",{\"1\":{\"2315\":1,\"4648\":1}}],[\"修改\",{\"1\":{\"849\":1,\"1694\":1,\"3837\":1,\"4254\":1}}],[\"修改元素\",{\"1\":{\"546\":1}}],[\"修改引用类型\",{\"1\":{\"269\":1}}],[\"修改值类型\",{\"1\":{\"269\":1}}],[\"普通\",{\"1\":{\"2443\":1,\"2524\":1,\"4776\":1,\"4857\":1}}],[\"普通的\",{\"1\":{\"2422\":1,\"2450\":1,\"4755\":1,\"4783\":1}}],[\"普通索引的唯一作用就是为了快速查询数据\",{\"1\":{\"2303\":1,\"4636\":1}}],[\"普通索引\",{\"1\":{\"2288\":1,\"2300\":1,\"2303\":1,\"4621\":1,\"4633\":1,\"4636\":1}}],[\"掉这个长事务\",{\"1\":{\"2416\":1,\"4749\":1}}],[\"释放带来的性能损耗\",{\"1\":{\"2769\":1,\"3994\":1}}],[\"释放间隙锁的时刻\",{\"1\":{\"2475\":1,\"4808\":1}}],[\"释放\",{\"1\":{\"2405\":1,\"2406\":1,\"2764\":1,\"3989\":1,\"4738\":1,\"4739\":1}}],[\"申请自增主键后就释放锁\",{\"1\":{\"2441\":1,\"4774\":1}}],[\"申请\",{\"1\":{\"2405\":1,\"2406\":1,\"4738\":1,\"4739\":1}}],[\"牛逼的地方在于实现了颗粒度更细的行级锁\",{\"1\":{\"2398\":1,\"4731\":1}}],[\"意向独占锁\",{\"1\":{\"2420\":1,\"2421\":1,\"4753\":1,\"4754\":1}}],[\"意向共享锁和意向独占锁是表级锁\",{\"1\":{\"2425\":1,\"4758\":1}}],[\"意向共享锁\",{\"1\":{\"2419\":1,\"4752\":1}}],[\"意向锁的目的是为了快速判断表里是否有记录被加锁\",{\"1\":{\"2429\":1,\"4762\":1}}],[\"意向锁\",{\"0\":{\"2417\":1,\"4750\":1},\"1\":{\"2387\":1,\"2427\":1,\"2428\":1,\"4720\":1,\"4760\":1,\"4761\":1}}],[\"意味着整个数据库都是只读状态\",{\"1\":{\"2375\":1,\"4708\":1}}],[\"元\",{\"1\":{\"2484\":10,\"4817\":10}}],[\"元和对\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"元和\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"元数据锁\",{\"0\":{\"2399\":1,\"4732\":1},\"1\":{\"2386\":1,\"4719\":1}}],[\"元素的顺序发生了变化\",{\"1\":{\"520\":1,\"3609\":1}}],[\"元素在插入treeset时compareto\",{\"1\":{\"382\":1}}],[\"元素不可重复\",{\"1\":{\"374\":1}}],[\"元素无放入顺序\",{\"1\":{\"374\":1}}],[\"元素可重复\",{\"1\":{\"372\":1}}],[\"元素有放入顺序\",{\"1\":{\"372\":1}}],[\"备份数据库的工具是\",{\"1\":{\"2380\":1,\"4713\":1}}],[\"备份期间业务依然可以对数据进行更新操作\",{\"1\":{\"2378\":1,\"4711\":1}}],[\"备份就会花费很多的时间\",{\"1\":{\"2376\":1,\"4709\":1}}],[\"备忘录\",{\"1\":{\"669\":1,\"3657\":1}}],[\"涉及的索引都不会被使用到\",{\"1\":{\"2359\":1,\"4692\":1}}],[\"避免过度消耗\",{\"1\":{\"2810\":1,\"4035\":1}}],[\"避免同时处理大量的请求\",{\"1\":{\"2725\":1,\"5058\":1}}],[\"避免单机出现问题整个缓存服务都没办法使用\",{\"1\":{\"2724\":1,\"5057\":1}}],[\"避免使用子查询\",{\"0\":{\"2579\":1,\"4912\":1}}],[\"避免更多的关联操作\",{\"1\":{\"2557\":1,\"4890\":1}}],[\"避免索引失效\",{\"1\":{\"2353\":1,\"4686\":1}}],[\"避免出现循环链表的情况\",{\"1\":{\"520\":1,\"3609\":1}}],[\"较普通索引会占用更小的空间\",{\"1\":{\"2352\":1,\"4685\":1}}],[\"冗余索引指的是索引的功能相同\",{\"1\":{\"2350\":1,\"4683\":1}}],[\"尽管\",{\"1\":{\"2478\":1,\"4811\":1}}],[\"尽可能的考虑建立联合索引而不是单列索引\",{\"1\":{\"2347\":1,\"4680\":1}}],[\"尽量使得明文密码及其md5值\",{\"1\":{\"3239\":1,\"3256\":1}}],[\"尽量将无效的\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"尽量少的调整分区分配的变动\",{\"1\":{\"963\":1,\"5110\":1}}],[\"尽量均衡\",{\"1\":{\"957\":1,\"5104\":1}}],[\"频繁需要排序的字段\",{\"1\":{\"2339\":1,\"4672\":1}}],[\"复合索引\",{\"1\":{\"2329\":1,\"4662\":1}}],[\"复制\",{\"1\":{\"1694\":1,\"4254\":1}}],[\"跟聚簇索引一样\",{\"1\":{\"2322\":1,\"4655\":1}}],[\"又扯到hashmap底层用到了红黑树\",{\"1\":{\"3057\":1,\"5308\":1}}],[\"又有新的任务提交\",{\"1\":{\"2998\":1,\"4223\":1}}],[\"又能阻止其他事务将新纪录插入到被保护记录前面的间隙中\",{\"1\":{\"2469\":1,\"4802\":1}}],[\"又不会出现数据一致性问题\",{\"1\":{\"2447\":1,\"4780\":1}}],[\"又称为辅助索引\",{\"1\":{\"2299\":1,\"4632\":1}}],[\"又重新恢复了\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"值\",{\"1\":{\"2626\":1,\"2748\":1,\"3973\":1,\"4959\":1}}],[\"值的字段\",{\"1\":{\"2296\":1,\"4629\":1}}],[\"值为false时\",{\"1\":{\"905\":1,\"3893\":1}}],[\"值为true时\",{\"1\":{\"905\":1,\"3893\":1}}],[\"覆盖索引即需要查询的字段正好是索引的字段\",{\"1\":{\"2326\":1,\"4659\":1}}],[\"覆盖索引\",{\"0\":{\"2324\":1,\"4657\":1},\"1\":{\"2290\":1,\"2325\":1,\"4623\":1,\"4658\":1}}],[\"列表每个元素的值都小于\",{\"1\":{\"2607\":1,\"4940\":1}}],[\"列表\",{\"0\":{\"2604\":1,\"4937\":1},\"1\":{\"2542\":1,\"2590\":1,\"4875\":1,\"4923\":1}}],[\"列值唯一\",{\"1\":{\"2287\":1,\"2289\":1,\"4620\":1,\"4622\":1}}],[\"列上可以创建全文索引\",{\"1\":{\"2282\":1,\"2292\":1,\"4615\":1,\"4625\":1}}],[\"仅启动一个\",{\"1\":{\"3017\":1,\"4242\":1}}],[\"仅存在结点之间的关联关系\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"仅仅是定义了同步状态的获取和释放的方法\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"仅仅是写到缓冲区\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"仅仅通过给\",{\"1\":{\"2674\":1,\"5007\":1}}],[\"仅加速查询\",{\"1\":{\"2288\":1,\"4621\":1}}],[\"仅支持\",{\"1\":{\"2281\":1,\"4614\":1}}],[\"仅知道目的地的\",{\"1\":{\"2154\":1,\"5207\":1}}],[\"里是否存储着指向当前线程的偏向锁\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"里存储锁偏向的线程\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"里有\",{\"1\":{\"2677\":1,\"5010\":1}}],[\"里面收集了所有常用的密码\",{\"1\":{\"3239\":1}}],[\"里面是不会有线程的\",{\"1\":{\"3014\":1,\"4239\":1}}],[\"里面有一个内部类\",{\"1\":{\"2746\":1,\"3971\":1}}],[\"里面保存了\",{\"1\":{\"2537\":1,\"4870\":1}}],[\"里面记录的是主库分配的自增值\",{\"1\":{\"2446\":1,\"4779\":1}}],[\"里面表级别的锁有这几种\",{\"1\":{\"2384\":1,\"4717\":1}}],[\"里\",{\"1\":{\"2362\":1,\"4695\":1}}],[\"里默认和最常用的索引类型\",{\"1\":{\"2279\":1,\"4612\":1}}],[\"里的\",{\"1\":{\"2183\":1,\"5236\":1}}],[\"辅助索引的\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"辅助索引\",{\"1\":{\"2276\":1,\"2285\":1,\"2317\":1,\"4609\":1,\"4618\":1,\"4650\":1}}],[\"聚集索引\",{\"1\":{\"2276\":1,\"2284\":1,\"4609\":1,\"4617\":1}}],[\"聚簇索引对于主键的排序查找和范围查找速度非常快\",{\"1\":{\"2312\":1,\"4645\":1}}],[\"聚簇索引少了一次读取数据的\",{\"1\":{\"2311\":1,\"4644\":1}}],[\"聚簇索引的查询速度非常的快\",{\"1\":{\"2311\":1,\"4644\":1}}],[\"聚簇索引\",{\"0\":{\"2307\":1,\"4640\":1},\"1\":{\"2276\":1,\"2284\":1,\"2308\":1,\"4609\":1,\"4617\":1,\"4641\":1}}],[\"搜索文章功能\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"搜索算法搜索索引\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"搜索引擎通常会更青睐使用\",{\"1\":{\"2199\":1,\"5252\":1}}],[\"搜索引擎优化\",{\"1\":{\"2199\":1,\"5252\":1}}],[\"叶节点的\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"叶子节点存储的是主键+列值\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"叶子节点存储索引和索引对应的数据\",{\"1\":{\"2309\":1,\"4642\":1}}],[\"叶子节点也都是有序的\",{\"1\":{\"2311\":1,\"4644\":1}}],[\"叶子节点的顺序检索很明显\",{\"1\":{\"2273\":1,\"4606\":1}}],[\"叶子节点\",{\"1\":{\"648\":1,\"3636\":1}}],[\"假如我们要对表中的数据进行排序或者进行范围查询\",{\"1\":{\"2266\":1,\"4599\":1}}],[\"假设没有冲突去完成某项操作\",{\"1\":{\"2776\":1,\"4001\":1}}],[\"假设有一个变量初始值为\",{\"1\":{\"2802\":1,\"4027\":1}}],[\"假设有\",{\"1\":{\"2495\":1,\"2500\":1,\"2504\":1,\"4828\":1,\"4833\":1,\"4837\":1}}],[\"假设有三个消费者分别为c0\",{\"1\":{\"959\":1,\"5106\":1}}],[\"假设一个一般场景\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"假设当前有如下场景\",{\"1\":{\"2153\":1,\"5206\":1}}],[\"假设\",{\"1\":{\"1806\":1,\"1813\":1,\"1818\":1,\"2465\":1,\"4366\":1,\"4373\":1,\"4378\":1,\"4798\":1}}],[\"假设我们集群中有3台机器\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"假设容器中的类型是\",{\"1\":{\"565\":1}}],[\"域存储相应记录主键的值而不是地址\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"域存放的是数据记录的地址\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"域的值为地址读取相应的数据记录\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"域的值\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"域保存了完整的数据记录\",{\"1\":{\"2259\":1,\"2276\":1,\"4592\":1,\"4609\":1}}],[\"域名解析的工作流程\",{\"0\":{\"2212\":1,\"5265\":1}}],[\"树和\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"树的检索的过程相当于对范围内的每个节点的关键字做二分查找\",{\"1\":{\"2273\":1,\"4606\":1}}],[\"树的叶子节点都是独立的\",{\"1\":{\"2272\":1,\"4605\":1}}],[\"树的叶节点\",{\"1\":{\"2259\":1,\"2276\":1,\"4592\":1,\"4609\":1}}],[\"树的所有节点既存放键\",{\"1\":{\"2271\":1,\"4604\":1}}],[\"树的一种变体\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"树是\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"树也称\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"树\",{\"1\":{\"2267\":1,\"2268\":1,\"2270\":1,\"4600\":1,\"4601\":1,\"4603\":1}}],[\"树型bin用到的概率非常小\",{\"1\":{\"530\":1,\"3619\":1}}],[\"索引失效也是慢查询的主要原因之一\",{\"1\":{\"2354\":1,\"4687\":1}}],[\"索引占用的空间也是很多的\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"索引过多\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"索引可以增加查询效率\",{\"1\":{\"2345\":1,\"4678\":1}}],[\"索引可以提高效率同样可以降低效率\",{\"1\":{\"2344\":1,\"4677\":1}}],[\"索引可就不行了\",{\"1\":{\"2266\":1,\"4599\":1}}],[\"索引并不是越多越好\",{\"1\":{\"2344\":1,\"4677\":1}}],[\"索引已经排序\",{\"1\":{\"2339\":1,\"4672\":1}}],[\"索引字段的数据应该尽量不为\",{\"1\":{\"2336\":1,\"4669\":1}}],[\"索引下推\",{\"1\":{\"2332\":1,\"2333\":1,\"4665\":1,\"4666\":1}}],[\"索引结构和数据分开存放的索引\",{\"1\":{\"2285\":1,\"4618\":1}}],[\"索引结构和数据一起存放的索引\",{\"1\":{\"2284\":1,\"4617\":1}}],[\"索引都是使用\",{\"1\":{\"2279\":1,\"4612\":1}}],[\"索引不支持顺序和范围查询\",{\"1\":{\"2266\":1,\"4599\":1}}],[\"索引是一种用于快速查询和检索数据的数据结构\",{\"1\":{\"2261\":1,\"4594\":1}}],[\"索引\",{\"0\":{\"2260\":1,\"4593\":1},\"1\":{\"2279\":1,\"2281\":1,\"4612\":1,\"4614\":1}}],[\"索引文件和数据文件是分离的\",{\"1\":{\"2259\":1,\"2276\":1,\"4592\":1,\"4609\":1}}],[\"索引实现不一样\",{\"1\":{\"2257\":1,\"4590\":1}}],[\"索引计算公式为i\",{\"1\":{\"528\":1,\"3617\":1}}],[\"连行级锁都不支持\",{\"1\":{\"2256\":1,\"4589\":1}}],[\"连接到一起\",{\"1\":{\"3261\":1,\"3267\":1}}],[\"连接建立\",{\"1\":{\"2192\":1,\"5245\":1}}],[\"连接方式\",{\"1\":{\"2181\":1,\"5234\":1}}],[\"连接结束\",{\"1\":{\"2137\":1,\"2230\":1,\"5190\":1}}],[\"连接数远不能达到理论上限\",{\"1\":{\"2049\":1}}],[\"连接数\",{\"1\":{\"2048\":1}}],[\"连接中出现异常必须强制断开连接\",{\"1\":{\"2019\":1}}],[\"连接吗\",{\"0\":{\"2125\":1,\"2126\":1},\"1\":{\"2010\":1,\"2011\":1}}],[\"连接是断开的流程是什么\",{\"0\":{\"2124\":1},\"1\":{\"2009\":1}}],[\"连接时\",{\"0\":{\"2098\":1},\"1\":{\"1983\":1}}],[\"连接呢\",{\"0\":{\"2037\":1},\"1\":{\"1976\":1}}],[\"连接\",{\"0\":{\"2031\":1},\"1\":{\"1975\":1,\"2053\":1,\"2133\":1,\"2193\":1,\"2226\":1,\"5186\":1,\"5246\":1}}],[\"连接过程又可分为三步\",{\"1\":{\"193\":1,\"3476\":1}}],[\"咱们下面还是来简单对比一下两者\",{\"1\":{\"2240\":1,\"4573\":1}}],[\"言归正传\",{\"1\":{\"2240\":1,\"4573\":1}}],[\"压缩性\",{\"1\":{\"3216\":1}}],[\"压缩列表数据结构已经废弃了\",{\"1\":{\"2624\":1,\"2632\":1,\"4957\":1,\"4965\":1}}],[\"压缩文件这样的二进制数据\",{\"1\":{\"2597\":1,\"4930\":1}}],[\"压缩\",{\"1\":{\"2238\":1,\"4571\":1}}],[\"压根就没有使用共享内存这个玩意\",{\"1\":{\"1062\":1,\"1230\":1,\"1398\":1,\"1566\":1,\"4444\":1}}],[\"告诉本地\",{\"1\":{\"2219\":1,\"5272\":1}}],[\"老子不去\",{\"1\":{\"3054\":1,\"5305\":1}}],[\"老子是来面试的\",{\"1\":{\"3034\":1,\"5285\":1}}],[\"老三\",{\"1\":{\"2218\":1,\"5271\":1}}],[\"老二\",{\"1\":{\"2216\":1,\"5269\":1}}],[\"老大\",{\"1\":{\"2214\":1,\"5267\":1}}],[\"老规矩\",{\"1\":{\"1173\":1,\"1341\":1,\"1509\":1,\"1677\":1,\"4555\":1}}],[\"权威\",{\"1\":{\"2208\":1,\"2219\":1,\"5261\":1,\"5272\":1}}],[\"权限控制等\",{\"1\":{\"722\":1,\"3710\":1}}],[\"顶级域名服务器说\",{\"1\":{\"2217\":1,\"5270\":1}}],[\"顶级域名服务器地址给你\",{\"1\":{\"2215\":1,\"5268\":1}}],[\"顶级域\",{\"1\":{\"2204\":1,\"2207\":1,\"5257\":1,\"5260\":1}}],[\"越靠右的位置表示其层级越高\",{\"1\":{\"2202\":1,\"5255\":1}}],[\"越来越多的国际大公司已经开始使用http\",{\"1\":{\"1883\":1,\"1898\":1,\"1913\":1,\"1926\":1,\"1939\":1,\"1954\":1,\"5144\":1,\"5169\":1}}],[\"耗费的时间也是较多的\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"耗费更多服务器资源\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"耗时控制在\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"队头阻塞\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"队列里面除了第一个线程\",{\"1\":{\"2905\":1,\"4130\":1}}],[\"队列结构如下图所示\",{\"1\":{\"2833\":1,\"4058\":1}}],[\"队列是一个虚拟的双向队列\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"队列锁\",{\"1\":{\"2831\":1,\"4056\":1}}],[\"队列中写锁获取优先级高于读锁\",{\"1\":{\"2415\":1,\"4748\":1}}],[\"队列\",{\"0\":{\"637\":1,\"3625\":1},\"1\":{\"602\":1,\"1795\":1,\"4355\":1}}],[\"零往返时间\",{\"1\":{\"2192\":1,\"5245\":1}}],[\"零拷贝技术可以把文件传输的性能提高至少一倍以上\",{\"1\":{\"1106\":1,\"1274\":1,\"1442\":1,\"1610\":1,\"4488\":1}}],[\"零拷贝技术的文件传输方式相比传统文件传输的方式\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4487\":1}}],[\"零拷贝技术实现的方式通常有\",{\"1\":{\"1076\":1,\"1244\":1,\"1412\":1,\"1580\":1,\"4458\":1}}],[\"零拷贝\",{\"0\":{\"1075\":1,\"1243\":1,\"1411\":1,\"1579\":1,\"4457\":1},\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4490\":1}}],[\"资源\",{\"1\":{\"2581\":1,\"2891\":1,\"2992\":1,\"4116\":1,\"4217\":1,\"4914\":1}}],[\"资源已被永久转移\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"资源会在\",{\"1\":{\"260\":1,\"3545\":1}}],[\"范围请求的标识码\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"范围是namespace级别的\",{\"1\":{\"914\":1,\"3902\":1}}],[\"光是错误响应状态码就新增了\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"转到人工审核\",{\"1\":{\"3161\":1,\"5412\":1}}],[\"转账\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"转移到了主机\",{\"1\":{\"2172\":1,\"5225\":1}}],[\"转换成\",{\"1\":{\"738\":1,\"3726\":1}}],[\"转换成一个对象\",{\"1\":{\"737\":1,\"3725\":1}}],[\"终将收到主机\",{\"1\":{\"2162\":1,\"5215\":1}}],[\"终止状态\",{\"1\":{\"1025\":1,\"1193\":1,\"1361\":1,\"1529\":1,\"4407\":1}}],[\"响应分组只有一个目的地\",{\"1\":{\"2161\":1,\"5214\":1}}],[\"响应分组具有和\",{\"1\":{\"2161\":1,\"5214\":1}}],[\"响应分组\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"响应消息\",{\"1\":{\"1894\":1,\"1909\":1,\"1924\":1,\"1937\":1,\"1950\":1,\"1965\":1,\"5156\":1,\"5179\":1}}],[\"丢弃之\",{\"1\":{\"2159\":1,\"5212\":1}}],[\"另\",{\"1\":{\"3085\":1,\"5336\":1}}],[\"另一个是喜欢旅游和骑行的方式来放松\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"另一个面试官问看你简历有高并发系统的东西\",{\"1\":{\"3080\":1,\"5331\":1}}],[\"另一个作用是\",{\"1\":{\"2548\":1,\"4881\":1}}],[\"另一个拥有该间隙区间内的插入意向锁\",{\"1\":{\"2478\":1,\"4811\":1}}],[\"另一种是响应分组\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"另外还可以考虑延迟执行\",{\"1\":{\"2810\":1,\"4035\":1}}],[\"另外数组底层的存储是连续的\",{\"1\":{\"1013\":1}}],[\"另外它只是一个简单变量\",{\"1\":{\"1012\":1}}],[\"另外一个缓存用于存放半成品对象\",{\"1\":{\"804\":1,\"3792\":1}}],[\"另外\",{\"1\":{\"690\":1,\"717\":1,\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"1775\":1,\"1837\":1,\"2397\":1,\"2721\":1,\"2921\":1,\"3004\":1,\"3678\":1,\"3705\":1,\"4146\":1,\"4229\":1,\"4335\":1,\"4397\":1,\"4552\":1,\"4730\":1,\"5054\":1}}],[\"检索就结束了\",{\"1\":{\"2273\":1,\"4606\":1}}],[\"检索自己的\",{\"1\":{\"2156\":1,\"5209\":1}}],[\"检查该类是否已经加载过\",{\"1\":{\"227\":1,\"3510\":1}}],[\"寻址相同\",{\"1\":{\"2169\":1,\"5222\":1}}],[\"寻址\",{\"0\":{\"2152\":1,\"2164\":1,\"5205\":1,\"5217\":1},\"1\":{\"2150\":1,\"2166\":1,\"5203\":1,\"5219\":1}}],[\"物理上的下一个目的地\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"期间发生了什么\",{\"0\":{\"2128\":1,\"2222\":1,\"5181\":1}}],[\"期望寻找到主机\",{\"1\":{\"2173\":1,\"5226\":1}}],[\"期望寻找到目标路由器的本子网接口的\",{\"1\":{\"2167\":1,\"5220\":1}}],[\"期望\",{\"1\":{\"2016\":1}}],[\"键入网址到网页显示\",{\"0\":{\"2128\":1,\"2222\":1,\"5181\":1}}],[\"键和值都可以为null\",{\"1\":{\"389\":1}}],[\"号端口\",{\"1\":{\"2092\":2}}],[\"送给\",{\"1\":{\"2091\":1}}],[\"字节时\",{\"1\":{\"2630\":1,\"4963\":1}}],[\"字节\",{\"1\":{\"2607\":1,\"2622\":1,\"4940\":1,\"4955\":1}}],[\"字节流\",{\"1\":{\"2030\":1}}],[\"字符串不太一样\",{\"1\":{\"2596\":1,\"4929\":1}}],[\"字符串\",{\"0\":{\"2593\":1,\"4926\":1},\"1\":{\"2590\":1,\"4923\":1}}],[\"字符串类型的字段使用前缀索引代替普通索引\",{\"1\":{\"2351\":1,\"4684\":1}}],[\"字段中\",{\"1\":{\"3135\":1,\"5386\":1}}],[\"字段将其标记为已删除\",{\"1\":{\"2534\":1,\"4867\":1}}],[\"字段正好有索引\",{\"1\":{\"2327\":1,\"4660\":1}}],[\"字段知道该数据包是\",{\"1\":{\"2091\":1}}],[\"字段呢\",{\"1\":{\"2083\":1,\"2085\":1}}],[\"字段\",{\"1\":{\"2083\":1,\"2084\":1,\"2085\":1}}],[\"字段则会变长的\",{\"1\":{\"2066\":1}}],[\"字段时是\",{\"1\":{\"2066\":1}}],[\"首部长度\",{\"1\":{\"2083\":2}}],[\"首部长度较长\",{\"1\":{\"2066\":1}}],[\"首部只有\",{\"1\":{\"2067\":1}}],[\"首部在没有使用\",{\"1\":{\"2066\":1}}],[\"首部开销\",{\"1\":{\"2065\":1}}],[\"首先很感谢您给我的面试机会\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"首先切换到类的对应目录执行\",{\"1\":{\"2915\":1,\"4140\":1}}],[\"首先查看是否存在后继节点\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"首先通过子类判断是否获取了锁\",{\"1\":{\"2838\":1,\"4063\":1}}],[\"首先通过类加载器\",{\"1\":{\"180\":1,\"3463\":1}}],[\"首先将预期值a和内存地址v的实际值比较\",{\"1\":{\"2786\":1,\"4011\":1}}],[\"首先按照\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"首先也会给自己投票\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"首先毫无疑问的是剩下的两个\",{\"1\":{\"1805\":1,\"4365\":1}}],[\"首先它会比较\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"首先提供\",{\"1\":{\"1699\":1,\"4259\":1}}],[\"首先对分区按照分区id进行排序\",{\"1\":{\"946\":1,\"5093\":1}}],[\"首先计算元素的hashcode值\",{\"1\":{\"380\":1}}],[\"首先\",{\"1\":{\"227\":1,\"475\":1,\"645\":1,\"1095\":1,\"1263\":1,\"1431\":1,\"1599\":1,\"2410\":1,\"3510\":1,\"3633\":1,\"4477\":1,\"4743\":1}}],[\"流量控制\",{\"1\":{\"2062\":1}}],[\"流程图\",{\"0\":{\"87\":1,\"3375\":1}}],[\"拥塞控制\",{\"1\":{\"2062\":1}}],[\"约为\",{\"1\":{\"2048\":1}}],[\"端口号\",{\"1\":{\"2091\":1,\"2196\":1,\"5249\":1}}],[\"端口\",{\"1\":{\"2040\":1,\"2042\":1}}],[\"源代码等\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"源代码可以看出thread\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"源码\",{\"1\":{\"2940\":1,\"4165\":1}}],[\"源码对这部分代码进行改动下\",{\"1\":{\"814\":1,\"3802\":1}}],[\"源端口\",{\"1\":{\"2040\":1}}],[\"源地址\",{\"1\":{\"2039\":1}}],[\"窗口大小\",{\"1\":{\"2036\":1}}],[\"报文封装成链路层帧\",{\"1\":{\"2155\":1,\"5208\":1}}],[\"报文首部需要有长度字段以供计算\",{\"1\":{\"2086\":1}}],[\"报文会自动丢弃\",{\"1\":{\"2030\":1}}],[\"报文没有收到的时候\",{\"1\":{\"2030\":1}}],[\"报文是\",{\"1\":{\"2030\":1}}],[\"报文\",{\"1\":{\"2030\":2,\"2135\":1,\"2228\":1,\"5188\":1}}],[\"段\",{\"1\":{\"2021\":1}}],[\"段落\",{\"1\":{\"23\":1,\"24\":1,\"3311\":1,\"3312\":1}}],[\"累加\",{\"1\":{\"2015\":1}}],[\"序列化后的对象\",{\"1\":{\"2601\":1,\"4934\":1}}],[\"序列化存储相同内容的vector与arraylist\",{\"1\":{\"462\":1}}],[\"序列号和窗口大小称为连接\",{\"1\":{\"2032\":1}}],[\"序列号\",{\"1\":{\"2015\":1,\"2020\":1,\"2035\":1}}],[\"针对热点缓存失效的情况\",{\"1\":{\"2726\":1,\"5059\":1}}],[\"针对热点数据提前预热\",{\"1\":{\"2713\":1,\"5046\":1}}],[\"针对单个文件操作\",{\"1\":{\"2658\":1,\"4991\":1}}],[\"针对当前读\",{\"1\":{\"2525\":1,\"4858\":1}}],[\"针对快照读\",{\"1\":{\"2524\":1,\"4857\":1}}],[\"针对不同的隔离级别\",{\"1\":{\"2515\":1,\"4848\":1}}],[\"针对\",{\"1\":{\"2006\":1,\"2723\":1,\"5056\":1}}],[\"攻击者就可以通过穷举法反向查询出md5值\",{\"1\":{\"3239\":1}}],[\"攻击者创建了一个叫彩虹表的东西\",{\"1\":{\"3239\":1}}],[\"攻击\",{\"0\":{\"2104\":2},\"1\":{\"1989\":2}}],[\"头字段\",{\"1\":{\"2184\":2,\"5237\":2}}],[\"头\",{\"1\":{\"2184\":1,\"5237\":1}}],[\"头部压缩\",{\"1\":{\"2188\":1,\"5241\":1}}],[\"头部则没有\",{\"1\":{\"2085\":1}}],[\"头部长度则是不会变化的\",{\"1\":{\"2084\":1}}],[\"头部有\",{\"1\":{\"2083\":1,\"2085\":1}}],[\"头部没有\",{\"1\":{\"2083\":1}}],[\"头部格式\",{\"1\":{\"2051\":1}}],[\"头格式有哪些\",{\"0\":{\"2013\":1},\"1\":{\"1972\":1}}],[\"头节点和尾节点\",{\"1\":{\"339\":1}}],[\"截至2019年6月\",{\"1\":{\"1890\":1,\"1905\":1,\"1920\":1,\"1933\":1,\"1946\":1,\"1961\":1,\"5152\":1,\"5175\":1}}],[\"短短两年过去了\",{\"1\":{\"1889\":1,\"1904\":1,\"1919\":1,\"1932\":1,\"1945\":1,\"1960\":1,\"5151\":1,\"5174\":1}}],[\"短时间内\",{\"1\":{\"1752\":1,\"4312\":1}}],[\"真正被广泛使用起来要到2018年左右\",{\"1\":{\"1888\":1,\"1903\":1,\"1918\":1,\"1931\":1,\"1944\":1,\"1959\":1,\"5150\":1,\"5173\":1}}],[\"真正的栈\",{\"1\":{\"615\":1}}],[\"真正的继承关系中\",{\"1\":{\"588\":1}}],[\"真正的继承关系是很少的\",{\"1\":{\"588\":1}}],[\"辉煌不在\",{\"0\":{\"1886\":1,\"1901\":1,\"1916\":1,\"1929\":1,\"1942\":1,\"1957\":1,\"5148\":1,\"5171\":1}}],[\"任务模块是一个通用的模块\",{\"1\":{\"3176\":1,\"5427\":1}}],[\"任务会被保存在一个任务队列中\",{\"1\":{\"2997\":1,\"4222\":1}}],[\"任务队列最大长度为\",{\"1\":{\"3006\":1,\"3008\":1,\"4231\":1,\"4233\":1}}],[\"任务队列已经满了\",{\"1\":{\"2987\":1,\"4212\":1}}],[\"任务队列中存放的任务达到队列容量的时候\",{\"1\":{\"2962\":1,\"4187\":1}}],[\"任务队列未达到队列容量时\",{\"1\":{\"2961\":1,\"4186\":1}}],[\"任务可以不需要等到线程创建就能立即执行\",{\"1\":{\"2953\":1,\"4178\":1}}],[\"任务列表\",{\"0\":{\"73\":1,\"3361\":1}}],[\"任何需要延迟得任务都可以调用该服务\",{\"1\":{\"3172\":1,\"5423\":1}}],[\"任何线程对其进行操作都是在主内存中进行的\",{\"1\":{\"2859\":1,\"4084\":1}}],[\"任何查找都是从根节点到叶子节点的过程\",{\"1\":{\"2273\":1,\"4606\":1}}],[\"任何\",{\"1\":{\"2210\":1,\"5263\":1}}],[\"任何时候都有一个条件不满足\",{\"1\":{\"1881\":1,\"3958\":1}}],[\"防止密码被窃听\",{\"1\":{\"3224\":1}}],[\"防止线程长时间占用\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"防止局部指令重排序\",{\"1\":{\"2860\":1,\"4085\":1}}],[\"防止其他线程对这个表结构做了变更\",{\"1\":{\"2404\":1,\"4737\":1}}],[\"防止雪崩\",{\"1\":{\"1879\":1,\"3956\":1}}],[\"防雪崩利器\",{\"1\":{\"1755\":1,\"4315\":1}}],[\"预热\",{\"1\":{\"1879\":1,\"3956\":1}}],[\"冷机房新请求过来\",{\"0\":{\"1878\":1,\"3955\":1}}],[\"全文索引不适用于\",{\"1\":{\"2571\":1,\"4904\":1}}],[\"全文索引主要是为了检索大文本数据中的关键字的信息\",{\"1\":{\"2305\":1,\"4638\":1}}],[\"全文索引\",{\"1\":{\"2282\":1,\"2292\":1,\"2305\":1,\"4615\":1,\"4625\":1,\"4638\":1}}],[\"全称为\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"全称\",{\"1\":{\"2146\":1,\"5162\":1,\"5199\":1}}],[\"全球也仅有36\",{\"1\":{\"1890\":1,\"1905\":1,\"1920\":1,\"1933\":1,\"1946\":1,\"1961\":1,\"5152\":1,\"5175\":1}}],[\"全面使用只是个时间问题\",{\"1\":{\"1884\":1,\"1899\":1,\"1914\":1,\"1927\":1,\"1940\":1,\"1955\":1,\"5145\":1,\"5170\":1}}],[\"全部启动\",{\"1\":{\"3015\":1,\"4240\":1}}],[\"全部\",{\"1\":{\"1877\":1,\"3954\":1}}],[\"全局锁主要应用于做全库逻辑备份\",{\"1\":{\"2373\":1,\"4706\":1}}],[\"全局锁应用场景是什么\",{\"1\":{\"2372\":1,\"4705\":1}}],[\"全局锁\",{\"0\":{\"2364\":1,\"4697\":1}}],[\"全局数据\",{\"1\":{\"1876\":1,\"3953\":1}}],[\"全局单调递增的事务id\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"全局参数中配置开启二级缓存\",{\"1\":{\"900\":1,\"3888\":1}}],[\"给用户\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"给它起了个名字\",{\"1\":{\"1875\":1,\"3952\":1}}],[\"给自己投票为\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"阿里巴巴\",{\"1\":{\"3001\":1,\"3004\":1,\"4226\":1,\"4229\":1}}],[\"阿里巴巴java开发规约\",{\"1\":{\"415\":1}}],[\"阿里的\",{\"1\":{\"2250\":1,\"4583\":1}}],[\"阿里在实施这种方案时\",{\"1\":{\"1875\":1,\"3952\":1}}],[\"跨机房\",{\"1\":{\"1874\":1,\"3951\":1}}],[\"闭环\",{\"1\":{\"1874\":1,\"3951\":1}}],[\"各种特性也还不错\",{\"1\":{\"2238\":1,\"4571\":1}}],[\"各种中间件都要做改造\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"各自的端口号也相互独立\",{\"1\":{\"2092\":1}}],[\"各并发事务之间数据库是独立的\",{\"1\":{\"759\":1,\"3747\":1}}],[\"必要时增加中间表进行关联\",{\"1\":{\"2569\":1,\"4902\":1}}],[\"必然会有冲突\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"必须按照申请锁的时间顺序来依次获得锁\",{\"1\":{\"2741\":1,\"3966\":1}}],[\"必须使用\",{\"0\":{\"2575\":1,\"4908\":1}}],[\"必须要禁止其他节点的读写操作\",{\"1\":{\"1835\":1,\"4395\":1}}],[\"必须要按前后的顺序执行\",{\"1\":{\"984\":1,\"5131\":1}}],[\"必须依靠其他线程调用notify\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"必须指定事务应该如何传播\",{\"1\":{\"774\":1,\"3762\":1}}],[\"必须是已经注册到\",{\"1\":{\"742\":1,\"3730\":1}}],[\"必须逐个比较\",{\"1\":{\"342\":1}}],[\"必须从头或尾顺着链接找\",{\"1\":{\"341\":1}}],[\"切换机房的过程中\",{\"1\":{\"1872\":1,\"3949\":1}}],[\"迁移线程和用户线程同时执行\",{\"0\":{\"1866\":1,\"3943\":1}}],[\"经常应用到md5\",{\"1\":{\"3274\":1}}],[\"经常一起使用的列放到一个表中\",{\"0\":{\"2556\":1,\"4889\":1}}],[\"经常用于连接的字段可能是一些外键列\",{\"1\":{\"2340\":1,\"4673\":1}}],[\"经常查询的不变的数据\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"经得起实际考验的服务框架组合起来\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"库可以放到不同的实例上\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"库里的\",{\"1\":{\"1109\":1,\"1277\":1,\"1445\":1,\"1613\":1,\"4491\":1}}],[\"排行版的实现\",{\"1\":{\"1858\":1,\"3935\":1}}],[\"排行榜的实现\",{\"0\":{\"1857\":1,\"3934\":1}}],[\"虾皮\",{\"0\":{\"1857\":1,\"1860\":1,\"1862\":1,\"1864\":1,\"1866\":1,\"1868\":1,\"1871\":1,\"1878\":1,\"1880\":1,\"3934\":1,\"3937\":1,\"3939\":1,\"3941\":1,\"3943\":1,\"3945\":1,\"3948\":1,\"3955\":1,\"3957\":1}}],[\"清空购物车成功\",{\"1\":{\"1854\":1,\"3931\":1}}],[\"清除数据\",{\"1\":{\"929\":1,\"5076\":1}}],[\"订单创建成功\",{\"1\":{\"1851\":1,\"3928\":1}}],[\"订单系统\",{\"1\":{\"1848\":1,\"3925\":1}}],[\"订阅\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"订阅2个topic\",{\"1\":{\"952\":1,\"5099\":1}}],[\"怎么改变执行的机房\",{\"0\":{\"1880\":1,\"3957\":1}}],[\"怎么解决这个问题呢\",{\"1\":{\"2675\":1,\"5008\":1}}],[\"怎么解决\",{\"0\":{\"1866\":1,\"3943\":1}}],[\"怎么实现一个点赞功能\",{\"0\":{\"1845\":1,\"3922\":1}}],[\"怎么去做一个一个操作呢\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"怎么要有三级缓存呢\",{\"1\":{\"809\":1,\"3797\":1}}],[\"稳定自适应轻量级锁状态下\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"稳定的分布式数据一致性解决方案\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"甚至有些情况下会降低查询效率\",{\"1\":{\"2345\":1,\"4678\":1}}],[\"甚至有人建议\",{\"1\":{\"634\":1}}],[\"甚至高于lock\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"携程\",{\"0\":{\"1841\":1,\"3918\":1}}],[\"决定了\",{\"1\":{\"1832\":1,\"4392\":1}}],[\"决定了set中可以保存哪些元素\",{\"1\":{\"375\":1}}],[\"某个节点被设置为head之后\",{\"1\":{\"2827\":1,\"4052\":1}}],[\"某个时间点\",{\"1\":{\"2641\":1,\"4974\":1}}],[\"某个数据流发生丢包了\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"某个机房可能断电\",{\"0\":{\"1868\":1,\"3945\":1}}],[\"某些节点之间不连通了\",{\"1\":{\"1829\":1,\"4389\":1}}],[\"某一节点的网络出现异常会导致整个事务处于阻塞状态\",{\"1\":{\"1730\":1,\"4290\":1}}],[\"某一范围的键\",{\"1\":{\"435\":1}}],[\"某一值的邻近元素等\",{\"1\":{\"367\":1}}],[\"某一取值范围\",{\"1\":{\"367\":1}}],[\"仍然能够对外提供服务\",{\"1\":{\"1827\":1,\"4387\":1}}],[\"定时刷新\",{\"1\":{\"3110\":1,\"5361\":1}}],[\"定时任务这种\",{\"0\":{\"1880\":1,\"3957\":1}}],[\"定期删除+惰性\",{\"1\":{\"2673\":1,\"5006\":1}}],[\"定期删除对内存更加友好\",{\"1\":{\"2673\":1,\"5006\":1}}],[\"定期删除\",{\"1\":{\"2672\":1,\"5005\":1}}],[\"定格某一时刻的风景\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"定位到索引的节点\",{\"1\":{\"2311\":1,\"4644\":1}}],[\"定理\",{\"1\":{\"1824\":1,\"4384\":1}}],[\"定义一些策略\",{\"1\":{\"2972\":1,\"4197\":1}}],[\"定义这个的原因也是为了顺序性\",{\"1\":{\"1797\":1,\"4357\":1}}],[\"定义了java编译版本\",{\"1\":{\"864\":1,\"3852\":1}}],[\"定义中包括了如下几个表示传播行为的常量\",{\"1\":{\"774\":1,\"3762\":1}}],[\"定义⼀个静态变量指向⾃⼰类型\",{\"1\":{\"673\":1,\"3661\":1}}],[\"挂掉的\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"挂了那就麻烦了\",{\"1\":{\"1811\":1,\"4371\":1}}],[\"挂了一个也能工作\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"挂了一个我们还能正常工作\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"挂了两个我们就不能正常工作了\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"挂了\",{\"1\":{\"1796\":1,\"1804\":1,\"1810\":1,\"4356\":1,\"4364\":1,\"4370\":1}}],[\"却被自动提交了\",{\"1\":{\"3116\":1,\"5367\":1}}],[\"却在这个时候挂了\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"却为业务模块所共同调用的逻辑或责任\",{\"1\":{\"722\":1,\"3710\":1}}],[\"肯定比\",{\"1\":{\"1816\":1,\"4376\":1}}],[\"肯定会提交刚刚\",{\"1\":{\"1813\":1,\"4373\":1}}],[\"了另一个\",{\"1\":{\"2493\":1,\"4826\":1}}],[\"了\",{\"0\":{\"2124\":1},\"1\":{\"1816\":1,\"2009\":1,\"2674\":1,\"4376\":1,\"5007\":1}}],[\"了解问题的本质再分析问题\",{\"1\":{\"786\":1,\"3774\":1}}],[\"聪明的同学肯定会质疑\",{\"1\":{\"1816\":1,\"4376\":1}}],[\"忘了请看上面的消息广播模式\",{\"1\":{\"1813\":1,\"4373\":1}}],[\"跳过那些已经被丢弃的提案\",{\"1\":{\"1811\":1,\"4371\":1}}],[\"推荐\",{\"1\":{\"2956\":1,\"4181\":1}}],[\"推荐奇数个\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"推荐使用concurrenthashmap\",{\"1\":{\"389\":1}}],[\"推荐使用hashmap\",{\"1\":{\"389\":1}}],[\"确保写磁盘操作结束才会返回\",{\"1\":{\"2664\":1,\"4997\":1}}],[\"确保已经被leader提交的提案最终能够被所有的follower提交是什么意思呢\",{\"1\":{\"1812\":1,\"4372\":1}}],[\"确保已经被leader提交的提案最终能够被所有的follower提交\",{\"1\":{\"1811\":1,\"4371\":1}}],[\"确认应答\",{\"1\":{\"2018\":1}}],[\"确认应答号\",{\"1\":{\"2016\":1}}],[\"确定送给哪个应用程序处理\",{\"1\":{\"2091\":1}}],[\"确定\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"确实是麻烦点\",{\"1\":{\"991\":1,\"5138\":1}}],[\"收到顶级域名服务器的地址后\",{\"1\":{\"2216\":1,\"5269\":1}}],[\"收到来自本地\",{\"1\":{\"2215\":1,\"5268\":1}}],[\"收到的数据的序列号\",{\"1\":{\"2016\":1}}],[\"收到\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"收到了查询分组之后\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"收到了发现自己的投票已经超过半数就把自己设为\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"收到了\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"收到之后发现和自己的一样无需做更改\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"收到事件后通过\",{\"1\":{\"1143\":1,\"1158\":1,\"1176\":1,\"1311\":1,\"1326\":1,\"1344\":1,\"1479\":1,\"1494\":1,\"1512\":1,\"1647\":1,\"1662\":1,\"1680\":1,\"4525\":1,\"4540\":1,\"4558\":1}}],[\"发布文章集成添加延迟队列接口\",{\"1\":{\"3179\":1,\"5430\":1}}],[\"发布文章功能\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"发起请求问\",{\"1\":{\"2216\":1,\"5269\":1}}],[\"发过来的链路层帧\",{\"1\":{\"2171\":1,\"5224\":1}}],[\"发车\",{\"1\":{\"1969\":1}}],[\"发生了回滚\",{\"1\":{\"2496\":1,\"4829\":1}}],[\"发生冲突\",{\"1\":{\"2425\":1,\"4758\":1}}],[\"发生冲突了\",{\"1\":{\"1835\":2,\"4395\":2}}],[\"发生隐式转换\",{\"1\":{\"2360\":1,\"4693\":1}}],[\"发生在三次握手的哪一步\",{\"0\":{\"2123\":1},\"1\":{\"2008\":1}}],[\"发生连锁效应\",{\"1\":{\"1749\":1,\"4309\":1}}],[\"发送方和接收方必须商定好秘钥\",{\"1\":{\"3285\":1}}],[\"发送给目标接口\",{\"1\":{\"2170\":1,\"5223\":1}}],[\"发送给主机\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"发送一个广播问询分组\",{\"1\":{\"2166\":1,\"5219\":1}}],[\"发送一条半事务消息到mq服务器\",{\"1\":{\"1848\":1,\"3925\":1}}],[\"发送主机\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"发送和接受的\",{\"1\":{\"2161\":1,\"5214\":1}}],[\"发送和接收的\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"发送到下一跳上\",{\"1\":{\"2155\":1,\"5208\":1}}],[\"发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收\",{\"1\":{\"2016\":1}}],[\"发送rollback\",{\"1\":{\"1852\":1,\"3929\":1}}],[\"发送的\",{\"1\":{\"1813\":1,\"2158\":2,\"2161\":1,\"4373\":1,\"5211\":2,\"5214\":1}}],[\"发送\",{\"1\":{\"1813\":1,\"2134\":1,\"2153\":1,\"2227\":1,\"4373\":1,\"5187\":1,\"5206\":1}}],[\"发现预期值\",{\"1\":{\"2790\":1,\"4015\":1}}],[\"发现a不等于v的实际值\",{\"1\":{\"2786\":1,\"4011\":1}}],[\"发现被占用的锁是重量级锁\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"发现和前一次读到的记录数量不一样了\",{\"1\":{\"2506\":1,\"4839\":1}}],[\"发现共有\",{\"1\":{\"2504\":1,\"4837\":1}}],[\"发现后置是\",{\"1\":{\"2215\":1,\"5268\":1}}],[\"发现缓存没有\",{\"0\":{\"1878\":1,\"3955\":1}}],[\"发现\",{\"1\":{\"1802\":1,\"2156\":1,\"4362\":1,\"5209\":1}}],[\"发出的投票为\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"投票已经超过半数\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"投票内容为服务器的\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"投票给自己\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"投票也是为了进行写请求\",{\"1\":{\"1788\":1,\"4348\":1}}],[\"宕机需要重新选举\",{\"1\":{\"1800\":1,\"4360\":1}}],[\"低32位表示事务id\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"采用kafka作为消息服务中间件\",{\"1\":{\"3103\":1,\"5354\":1}}],[\"采用\",{\"1\":{\"2724\":1,\"5057\":1}}],[\"采用的是\",{\"1\":{\"2673\":1,\"5006\":1}}],[\"采用先进先出的方式发送消息\",{\"1\":{\"1795\":1,\"4355\":1}}],[\"采用互斥对象机制\",{\"1\":{\"1030\":1,\"1198\":1,\"1366\":1,\"1534\":1,\"4412\":1}}],[\"问异步调用后\",{\"1\":{\"3066\":1,\"5317\":1}}],[\"问了jdbc的防止sql注入\",{\"1\":{\"3052\":1,\"5303\":1}}],[\"问了三大范式\",{\"1\":{\"3051\":1,\"5302\":1}}],[\"问了建立索引的原则\",{\"1\":{\"3050\":1,\"5301\":1}}],[\"问了\",{\"1\":{\"3049\":1,\"5300\":1}}],[\"问了mysql的存储引擎\",{\"1\":{\"3048\":1,\"5299\":1}}],[\"问c\",{\"1\":{\"3046\":1,\"5297\":1}}],[\"问什么是\",{\"1\":{\"3044\":1,\"3045\":1,\"5295\":1,\"5296\":1}}],[\"问string\",{\"1\":{\"3047\":1,\"5298\":1}}],[\"问swagger用过么\",{\"1\":{\"3043\":1,\"5294\":1}}],[\"问springboot\",{\"1\":{\"3042\":1,\"5293\":1}}],[\"问springboot的起步依赖starter有哪些以及作用\",{\"1\":{\"3041\":1,\"5292\":1}}],[\"问springboot的核心配置文件以及它们的区别\",{\"1\":{\"3040\":1,\"5291\":1}}],[\"问springboot异常怎么处理\",{\"1\":{\"3039\":1,\"5290\":1}}],[\"问es了解吗\",{\"1\":{\"3038\":1,\"5289\":1}}],[\"问kafka的分区\",{\"1\":{\"3037\":1,\"5288\":1}}],[\"问我同步和异步怎么实现的\",{\"1\":{\"3065\":1,\"5316\":1}}],[\"问我生成器用过没\",{\"1\":{\"3061\":1,\"5312\":1}}],[\"问我熟悉哪些框架\",{\"1\":{\"3036\":1,\"5287\":1}}],[\"问我想听听你对加班什么看法\",{\"1\":{\"3031\":1,\"5282\":1}}],[\"问你的期望薪资多少\",{\"1\":{\"3030\":1,\"5281\":1}}],[\"问你能接受加班吗\",{\"1\":{\"3029\":1,\"5280\":1}}],[\"问啥时候能来实习\",{\"1\":{\"3028\":1,\"5279\":1}}],[\"问\",{\"1\":{\"2213\":1,\"5266\":1}}],[\"问询到该\",{\"1\":{\"2169\":1,\"5222\":1}}],[\"问问\",{\"1\":{\"1794\":1,\"4354\":1}}],[\"问题描述\",{\"1\":{\"3190\":1,\"5441\":1}}],[\"问题思路\",{\"1\":{\"3170\":1,\"5421\":1}}],[\"问题二\",{\"1\":{\"3019\":1,\"4244\":1}}],[\"问题一\",{\"1\":{\"3013\":1,\"4238\":1}}],[\"问题不大\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"问题的利器\",{\"1\":{\"1060\":1,\"1228\":1,\"1396\":1,\"1564\":1,\"4442\":1}}],[\"问题\",{\"0\":{\"2801\":1,\"4026\":1},\"1\":{\"800\":1,\"1073\":1,\"1241\":1,\"1409\":1,\"1577\":1,\"2193\":1,\"2818\":1,\"3788\":1,\"4043\":1,\"4455\":1,\"5246\":1}}],[\"问题体现\",{\"1\":{\"792\":1,\"3780\":1}}],[\"问题出在哪里\",{\"0\":{\"574\":1}}],[\"让线程进入阻塞状态\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"让用户决定如何去做\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"让其他线程可见\",{\"1\":{\"2865\":1,\"4090\":1}}],[\"让同一个用户的相关请求\",{\"1\":{\"1874\":1,\"3951\":1}}],[\"让\",{\"1\":{\"1794\":1,\"4354\":1}}],[\"让我们可以在运行时获取类的信息\",{\"1\":{\"294\":1,\"3571\":1}}],[\"广播问询\",{\"1\":{\"2174\":1,\"5227\":1}}],[\"广播通信\",{\"1\":{\"2081\":1}}],[\"广播\",{\"1\":{\"1794\":1,\"4354\":1}}],[\"唯一索引的属性列不能出现重复的数据\",{\"1\":{\"2302\":1,\"4635\":1}}],[\"唯一索引也是一种约束\",{\"1\":{\"2302\":1,\"4635\":1}}],[\"唯一索引\",{\"1\":{\"2289\":1,\"2300\":1,\"2302\":1,\"4622\":1,\"4633\":1,\"4635\":1}}],[\"唯一的写请求处理者\",{\"1\":{\"1788\":1,\"4348\":1}}],[\"唯独是\",{\"1\":{\"810\":1,\"3798\":1}}],[\"领导者\",{\"1\":{\"1787\":1,\"4347\":1}}],[\"架构呢\",{\"1\":{\"1835\":1,\"4395\":1}}],[\"架构也支持\",{\"1\":{\"1834\":1,\"4394\":1}}],[\"架构\",{\"0\":{\"1784\":1,\"4344\":1},\"1\":{\"1834\":5,\"4394\":5}}],[\"架构中的主体部分\",{\"1\":{\"1699\":1,\"4259\":1}}],[\"找到了\",{\"1\":{\"2265\":1,\"4598\":1}}],[\"找到\",{\"1\":{\"1783\":1,\"2531\":1,\"4343\":1,\"4864\":1}}],[\"找到处理器映射\",{\"1\":{\"730\":1,\"3718\":1}}],[\"崩溃退出与重启等异常情况时\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"崩溃恢复模式\",{\"0\":{\"1798\":1,\"4358\":1}}],[\"崩溃恢复\",{\"1\":{\"1782\":1,\"1785\":1,\"1791\":1,\"1808\":1,\"1814\":1,\"1819\":1,\"4342\":1,\"4345\":1,\"4351\":1,\"4368\":1,\"4374\":1,\"4379\":1}}],[\"崩溃恢复和消息广播\",{\"0\":{\"1780\":1,\"4340\":1}}],[\"协议运行在\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"协议实现的\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"协议实现可靠传输\",{\"1\":{\"2061\":1}}],[\"协议就是解决这一问题的\",{\"1\":{\"2154\":1,\"5207\":1}}],[\"协议就会退出恢复模式\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"协议就会进入恢复模式并选举产生新的\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"协议工作时有一个大前提\",{\"1\":{\"2147\":1,\"5200\":1}}],[\"协议解决了\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"协议号\",{\"1\":{\"2091\":1}}],[\"协议发展的\",{\"1\":{\"2086\":1}}],[\"协议传输时\",{\"1\":{\"2030\":1}}],[\"协议可以一个主机同时向多个主机发送消息\",{\"1\":{\"2028\":1}}],[\"协议来实现可靠的传输\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"协议来实现分布式数据一致性\",{\"1\":{\"1779\":1,\"4339\":1}}],[\"协议来获取主机\",{\"1\":{\"2155\":1,\"5208\":1}}],[\"协议来负责\",{\"1\":{\"2023\":1}}],[\"协议\",{\"0\":{\"2022\":1},\"1\":{\"1973\":1,\"2061\":1,\"2146\":1,\"2169\":1,\"2174\":1,\"2198\":1,\"5199\":1,\"5222\":1,\"5227\":1,\"5251\":1}}],[\"协议是一个广播问询\",{\"1\":{\"2163\":1,\"5216\":1}}],[\"协议是基于\",{\"1\":{\"2086\":1}}],[\"协议是如何处理写请求的\",{\"1\":{\"1793\":1,\"4353\":1}}],[\"协议是为分布式协调服务\",{\"1\":{\"1779\":1,\"4339\":1}}],[\"协议中对\",{\"1\":{\"1791\":1,\"4351\":1}}],[\"协议之前\",{\"1\":{\"1787\":1,\"4347\":1}}],[\"协议包括两种基本的模式\",{\"1\":{\"1781\":1,\"4341\":1}}],[\"协议两种基本的模式\",{\"0\":{\"1780\":1,\"4340\":1}}],[\"协议介绍\",{\"0\":{\"1778\":1,\"4338\":1}}],[\"协议的网站在搜索结果中可能会被优先显示\",{\"1\":{\"2199\":1,\"5252\":1}}],[\"协议的网站\",{\"1\":{\"2199\":1,\"5252\":1}}],[\"协议的特性\",{\"1\":{\"2192\":1,\"2193\":1,\"5245\":1,\"5246\":1}}],[\"协议的服务器启动后加入到集群中时\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"协议的\",{\"1\":{\"1776\":1,\"4336\":1,\"5162\":1}}],[\"协调各个微服务\",{\"1\":{\"1735\":1,\"4295\":1}}],[\"协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者\",{\"1\":{\"944\":1,\"5091\":1}}],[\"选项\",{\"1\":{\"2066\":2,\"2084\":1}}],[\"选\",{\"0\":{\"1830\":1,\"4390\":1},\"1\":{\"1832\":1,\"4392\":1}}],[\"选举方式之后我们再来了解一下\",{\"1\":{\"1808\":1,\"4368\":1}}],[\"选举可以分为两个不同的阶段\",{\"1\":{\"1800\":1,\"4360\":1}}],[\"选举算法\",{\"1\":{\"1799\":1,\"4359\":1}}],[\"选举\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"选择合适的字段创建索引\",{\"1\":{\"2335\":1,\"4668\":1}}],[\"选择一个适合的\",{\"1\":{\"742\":1,\"3730\":1}}],[\"选择一个合适的handleradapter\",{\"1\":{\"735\":1,\"3723\":1}}],[\"选择\",{\"0\":{\"1841\":1,\"3918\":1},\"1\":{\"635\":1,\"1836\":1,\"4396\":1}}],[\"集群\",{\"1\":{\"2724\":1,\"5057\":1}}],[\"集群中\",{\"1\":{\"1788\":1,\"4348\":1}}],[\"集群管理\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"集合\",{\"0\":{\"2612\":1,\"4945\":1},\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"2590\":1,\"4439\":1,\"4923\":1}}],[\"集合给内核\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"集合运算等功能\",{\"1\":{\"364\":1}}],[\"高\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"高性能\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"高可用主要体现在系统7x24不间断服务\",{\"1\":{\"1727\":1,\"4287\":1}}],[\"过度切换\",{\"1\":{\"3003\":1,\"4228\":1}}],[\"过期的数据的删除策略了解么\",{\"0\":{\"2668\":1,\"5001\":1}}],[\"过滤掉不符合条件的记录\",{\"1\":{\"2333\":1,\"4666\":1}}],[\"过滤器是对单个服务而言\",{\"1\":{\"1747\":1,\"4307\":1}}],[\"过滤器\",{\"1\":{\"669\":1,\"3657\":1}}],[\"过多有什么危害\",{\"0\":{\"2114\":1},\"1\":{\"1999\":1}}],[\"过程\",{\"1\":{\"1767\":1,\"4327\":1}}],[\"核心线程数默认是不会被回收的\",{\"1\":{\"3020\":1,\"4245\":1}}],[\"核心线程数会被回收吗\",{\"1\":{\"3019\":1,\"4244\":1}}],[\"核心线程外的线程不会立即销毁\",{\"1\":{\"2965\":1,\"4190\":1}}],[\"核心数多出来的一个线程是为了防止线程偶发的缺页中断\",{\"1\":{\"2992\":1,\"4217\":1}}],[\"核心数\",{\"1\":{\"2992\":1,\"4217\":1}}],[\"核心思想是\",{\"1\":{\"2831\":1,\"4056\":1}}],[\"核心\",{\"1\":{\"1877\":1,\"3954\":1}}],[\"核心就是通过一系列的封装和处理\",{\"1\":{\"1764\":1,\"4324\":1}}],[\"核心配置文件\",{\"0\":{\"837\":1,\"3825\":1}}],[\"成为正式标准\",{\"1\":{\"5162\":1}}],[\"成功则返回\",{\"1\":{\"2845\":1,\"2846\":1,\"2848\":1,\"4070\":1,\"4071\":1,\"4073\":1}}],[\"成功请求数等运行指标记录下来\",{\"1\":{\"1760\":1,\"4320\":1}}],[\"成多个的\",{\"1\":{\"2030\":1}}],[\"成年人的崩溃如此简单\",{\"1\":{\"290\":1,\"3567\":1}}],[\"正如其名\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"正数表示成功\",{\"1\":{\"2847\":1,\"4072\":1}}],[\"正在等待的线程可以选择放弃等待\",{\"1\":{\"2740\":1,\"3965\":1}}],[\"正在内存中\",{\"1\":{\"2542\":1,\"4875\":1}}],[\"正确使用索引的一些建议\",{\"0\":{\"2334\":1,\"4667\":1}}],[\"正确的程序在运行中\",{\"1\":{\"248\":1,\"3533\":1}}],[\"正常调用时\",{\"1\":{\"1752\":1,\"4312\":1}}],[\"半开状态\",{\"1\":{\"1752\":1,\"4312\":1}}],[\"达到压缩的目的\",{\"1\":{\"2659\":1,\"4992\":1}}],[\"达到一定的次数无法调用\",{\"1\":{\"1751\":1,\"4311\":1}}],[\"达到7的概率为0\",{\"1\":{\"531\":1,\"3620\":1}}],[\"打开状态\",{\"1\":{\"1751\":1,\"4311\":1}}],[\"打包groovy文件到jar\",{\"1\":{\"875\":1,\"3863\":1}}],[\"雪崩效应\",{\"1\":{\"1749\":1,\"4309\":1}}],[\"网络层\",{\"1\":{\"2154\":1,\"5207\":1}}],[\"网络分区\",{\"1\":{\"1829\":1,\"4389\":1}}],[\"网关过滤器解析token\",{\"1\":{\"3132\":1,\"3143\":1,\"5383\":1,\"5394\":1}}],[\"网关过滤器接收用户携带的token\",{\"1\":{\"3131\":1,\"3142\":1,\"5382\":1,\"5393\":1}}],[\"网关过滤器进行判断\",{\"1\":{\"3129\":1,\"3140\":1,\"5380\":1,\"5391\":1}}],[\"网关搭建\",{\"0\":{\"3138\":1,\"5389\":1},\"1\":{\"3097\":1,\"5348\":1}}],[\"网关是对所有服务的请求进行分析过滤\",{\"1\":{\"1747\":1,\"4307\":1}}],[\"网关与过滤器有什么区别\",{\"1\":{\"1746\":1,\"4306\":1}}],[\"网上文章不少说\",{\"1\":{\"1061\":1,\"1229\":1,\"1397\":1,\"1565\":1,\"4443\":1}}],[\"配合config仓库修改的一种stream实现\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"配置文件\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"配置文件中默认有此下配置\",{\"1\":{\"2642\":1,\"4975\":1}}],[\"配置管理\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"配置中心\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"配置监听器的方法\",{\"1\":{\"849\":1,\"3837\":1}}],[\"配置的所有相关的对象\",{\"1\":{\"734\":1,\"3722\":1}}],[\"配置项的相关说明详见\",{\"1\":{\"150\":1,\"154\":1,\"3438\":1}}],[\"配置\",{\"0\":{\"30\":1,\"3318\":1},\"1\":{\"2607\":2,\"2622\":2,\"4940\":2,\"4955\":2}}],[\"声明式服务调用本质上就是ribbon+hystrix\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"zhihu\",{\"1\":{\"2820\":1,\"4045\":1}}],[\"zhizhengguan\",{\"1\":{\"2733\":1,\"5066\":1}}],[\"zhuanlan\",{\"1\":{\"2820\":1,\"4045\":1}}],[\"zhengzhaoyang122\",{\"1\":{\"2749\":1,\"3974\":1}}],[\"ziplist\",{\"1\":{\"2607\":2,\"2622\":2,\"4940\":2,\"4955\":2}}],[\"zset数据类型的去重有序\",{\"1\":{\"3168\":1,\"5419\":1}}],[\"zset\",{\"0\":{\"2627\":1,\"4960\":1},\"1\":{\"2590\":1,\"2629\":1,\"2630\":1,\"2631\":1,\"4923\":1,\"4962\":1,\"4963\":1,\"4964\":1}}],[\"zrank\",{\"1\":{\"1859\":1,\"3936\":1}}],[\"zadd\",{\"1\":{\"1859\":1,\"3936\":1}}],[\"zab\",{\"0\":{\"1778\":1,\"1780\":1,\"1786\":1,\"4338\":1,\"4340\":1,\"4346\":1},\"1\":{\"1779\":2,\"1781\":1,\"1782\":2,\"1783\":1,\"1785\":1,\"1787\":2,\"1791\":1,\"1793\":1,\"1796\":1,\"1799\":1,\"1800\":1,\"1808\":1,\"4339\":2,\"4341\":1,\"4342\":2,\"4343\":1,\"4345\":1,\"4347\":2,\"4351\":1,\"4353\":1,\"4356\":1,\"4359\":1,\"4360\":1,\"4368\":1}}],[\"zab算法\",{\"0\":{\"1777\":1,\"4337\":1}}],[\"zxid\",{\"1\":{\"1796\":1,\"1797\":1,\"1801\":2,\"1802\":2,\"1805\":1,\"1806\":1,\"1816\":2,\"4356\":1,\"4357\":1,\"4361\":2,\"4362\":2,\"4365\":1,\"4366\":1,\"4376\":2}}],[\"zkserver\",{\"1\":{\"1791\":1,\"1795\":1,\"4351\":1,\"4355\":1}}],[\"zookeeper\",{\"0\":{\"1769\":1,\"1770\":1,\"1784\":1,\"4329\":1,\"4330\":1,\"4344\":1},\"1\":{\"1772\":1,\"1773\":2,\"1774\":1,\"1775\":1,\"1776\":2,\"1779\":4,\"1785\":2,\"1800\":1,\"1807\":2,\"1834\":1,\"3095\":1,\"4332\":1,\"4333\":2,\"4334\":1,\"4335\":1,\"4336\":2,\"4339\":4,\"4345\":2,\"4360\":1,\"4367\":2,\"4394\":1,\"5346\":1}}],[\"zuul\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"zero\",{\"1\":{\"1104\":1,\"1272\":1,\"1440\":1,\"1608\":1,\"4486\":1}}],[\"特点进行延迟\",{\"1\":{\"3168\":1,\"5419\":1}}],[\"特别是长事务而言\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"特别是对于返回结果集比较大的子查询\",{\"1\":{\"2581\":1,\"4914\":1}}],[\"特性有订阅发布\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"特性有服务降级\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"特性有区域亲和\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"特性有失效剔除\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"特有\",{\"1\":{\"724\":1,\"3712\":1}}],[\"治理成本高\",{\"1\":{\"1741\":1,\"4301\":1}}],[\"产生大量的慢查询\",{\"1\":{\"2581\":1,\"4914\":1}}],[\"产生影响\",{\"1\":{\"2199\":1,\"5252\":1}}],[\"产生消息\",{\"1\":{\"1848\":1,\"3925\":1}}],[\"产品迭代周期更短\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"产出于spring大家族\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"减少数据库的压力\",{\"1\":{\"2714\":1,\"5047\":1}}],[\"减少回表次数\",{\"1\":{\"2333\":1,\"4666\":1}}],[\"减少了网络开销\",{\"1\":{\"2188\":1,\"5241\":1}}],[\"减少了网络延迟和提高了性能\",{\"1\":{\"2186\":1,\"5239\":1}}],[\"减少了传输的数据量和带宽消耗\",{\"1\":{\"2187\":1,\"5240\":1}}],[\"减少了新人的学习成本\",{\"1\":{\"1722\":1,\"4282\":1}}],[\"减少了\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4487\":1}}],[\"减少了内核和用户空间大量的数据拷贝和内存分配\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"减轻团队的成本\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"耦合度比较低\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"遇到问题很容易找到解决方案\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"教程很丰富\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"社区活跃度很高\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"降低资源消耗\",{\"1\":{\"2952\":1,\"4177\":1}}],[\"降低开发成本\",{\"1\":{\"1724\":1,\"4284\":1}}],[\"降低模块间的耦合度\",{\"1\":{\"722\":1,\"3710\":1}}],[\"部署在不同的服务器上\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"部署在同一个服务器\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"微服务\",{\"0\":{\"5481\":1}}],[\"微服务之前架设的网关服务\",{\"1\":{\"3099\":1,\"5350\":1}}],[\"微服务过多\",{\"1\":{\"1741\":1,\"4301\":1}}],[\"微服务可以是跨平台的\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"微服务网关等\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"微服务在cap理论中采用的ap架构\",{\"1\":{\"1727\":1,\"4287\":1}}],[\"微服务是按照业务进行拆分的\",{\"1\":{\"1725\":1,\"4285\":1}}],[\"微服务是一个分布式系统\",{\"1\":{\"1720\":1,\"4280\":1}}],[\"微服务系统的微服务单元具有很强的横向拓展能力\",{\"1\":{\"1723\":1,\"4283\":1}}],[\"微服务的框架那么多比如\",{\"1\":{\"1737\":1,\"4297\":1}}],[\"微服务的复杂度\",{\"1\":{\"1729\":1,\"4289\":1}}],[\"微服务的不足\",{\"1\":{\"1728\":1,\"4288\":1}}],[\"微服务的修改和部署对其他服务没有影响\",{\"1\":{\"1726\":1,\"4286\":1}}],[\"微服务的每个服务单元是独立部署的\",{\"1\":{\"1726\":1,\"4286\":1}}],[\"微服务的优势\",{\"1\":{\"1721\":1,\"4281\":1}}],[\"微服务的特点\",{\"1\":{\"1713\":1,\"4273\":1}}],[\"微服务的概念\",{\"0\":{\"1710\":1,\"4270\":1}}],[\"微服务就是将工程根据不同的业务规则拆分成微服务\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"易部署和易维护的分布式系统开发工具包\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"断路器关闭\",{\"1\":{\"1752\":1,\"4312\":1}}],[\"断路器会将部分请求发给该服务\",{\"1\":{\"1752\":1,\"4312\":1}}],[\"断路器完全打开\",{\"1\":{\"1751\":1,\"4311\":1}}],[\"断路器有三种状态\",{\"1\":{\"1750\":1,\"4310\":1}}],[\"断路器等\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"断路器\",{\"1\":{\"1709\":1,\"1739\":1,\"4269\":1,\"4299\":1}}],[\"负数表示失败\",{\"1\":{\"2847\":1,\"4072\":1}}],[\"负载均衡层\",{\"1\":{\"1869\":1,\"3946\":1}}],[\"负载均衡\",{\"1\":{\"1709\":1,\"1773\":1,\"4269\":1,\"4333\":1}}],[\"负责监听和分发事件\",{\"1\":{\"1113\":1,\"1281\":1,\"1449\":1,\"1617\":1,\"4495\":1}}],[\"负责加载当前应用\",{\"1\":{\"208\":1,\"3491\":1}}],[\"智能路由\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"镜像和容器的相关操作\",{\"0\":{\"1705\":1,\"4265\":1}}],[\"属于密钥持有者\",{\"1\":{\"3279\":1}}],[\"属于行级别锁\",{\"1\":{\"2476\":1,\"4809\":1}}],[\"属于操作系统层面的虚拟化技术\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"属性\",{\"1\":{\"2626\":1,\"4959\":1}}],[\"属性记录了字符串长度\",{\"1\":{\"2598\":1,\"4931\":1}}],[\"属性的值而不是空字符来判断字符串是否结束\",{\"1\":{\"2597\":1,\"4930\":1}}],[\"属性实现的\",{\"1\":{\"2431\":1,\"4764\":1}}],[\"属性时\",{\"1\":{\"806\":1,\"3794\":1}}],[\"演进\",{\"1\":{\"1183\":1,\"1351\":1,\"1519\":1,\"1687\":1,\"4565\":1}}],[\"演示\",{\"1\":{\"29\":1,\"3317\":1}}],[\"父进程的双向通信\",{\"1\":{\"1168\":1,\"1336\":1,\"1504\":1,\"1672\":1,\"4550\":1}}],[\"父类大多是一个很抽象的概念\",{\"1\":{\"588\":1}}],[\"聊完单\",{\"1\":{\"1167\":1,\"1335\":1,\"1503\":1,\"1671\":1,\"4549\":1}}],[\"闻其名不如看其图\",{\"1\":{\"1155\":1,\"1173\":1,\"1323\":1,\"1341\":1,\"1491\":1,\"1509\":1,\"1659\":1,\"1677\":1,\"4537\":1,\"4555\":1}}],[\"性能不好\",{\"1\":{\"5166\":1}}],[\"性能调优实战\",{\"1\":{\"2969\":1,\"4194\":1}}],[\"性能下降明显\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"性能极高\",{\"1\":{\"2757\":1,\"3982\":1}}],[\"性能新版本\",{\"1\":{\"2739\":1,\"3964\":1}}],[\"性能\",{\"1\":{\"2641\":1,\"4974\":1}}],[\"性能非常高\",{\"1\":{\"2588\":1,\"4921\":1}}],[\"性能也越好\",{\"1\":{\"2562\":1,\"4895\":1}}],[\"性能效率就越低\",{\"1\":{\"2508\":1,\"4841\":1}}],[\"性能更牛皮了\",{\"1\":{\"2243\":1,\"4576\":1}}],[\"性能是不错的\",{\"1\":{\"1774\":1,\"4334\":1}}],[\"性能瓶颈不在\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4534\":1}}],[\"性能与数组长度成正比\",{\"1\":{\"335\":1}}],[\"业务只能读数据\",{\"1\":{\"2376\":1,\"4709\":1}}],[\"业务实现双活\",{\"1\":{\"1877\":1,\"3954\":1}}],[\"业务先实现双活\",{\"1\":{\"1877\":1,\"3954\":1}}],[\"业务处理主要是在内存中完成\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4534\":1}}],[\"业务处理\",{\"1\":{\"1141\":1,\"1146\":1,\"1179\":1,\"1309\":1,\"1314\":1,\"1347\":1,\"1477\":1,\"1482\":1,\"1515\":1,\"1645\":1,\"1650\":1,\"1683\":1,\"4523\":1,\"4528\":1,\"4561\":1}}],[\"业务逻辑\",{\"1\":{\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"4496\":1}}],[\"虚拟的双向队列即不存在队列实例\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"虚拟机\",{\"1\":{\"2920\":1,\"4145\":1}}],[\"虚拟机栈\",{\"1\":{\"2855\":1,\"4080\":1}}],[\"虚拟机如果检测不到某段代码被共享和竞争的可能性\",{\"1\":{\"2770\":1,\"3995\":1}}],[\"虚拟机中有很多线程\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"4516\":1}}],[\"虚拟机这个进程上面的\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"4516\":1}}],[\"虚拟内存管理\",{\"0\":{\"1004\":1,\"1048\":1,\"1216\":1,\"1384\":1,\"1552\":1,\"4430\":1}}],[\"剩下的\",{\"1\":{\"1124\":1,\"1292\":1,\"1460\":1,\"1628\":1,\"4506\":1}}],[\"理解为threadlocal\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"理解成一个数据快照\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"理解了linkedlist和arraylist的特点\",{\"1\":{\"345\":1}}],[\"理论上\",{\"1\":{\"2159\":1,\"5212\":1}}],[\"理论上就可以有\",{\"1\":{\"1118\":1,\"1286\":1,\"1454\":1,\"1622\":1,\"4500\":1}}],[\"理论中分区容错性\",{\"1\":{\"1833\":1,\"4393\":1}}],[\"理论诞生\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"灵活在于\",{\"1\":{\"1115\":1,\"1283\":1,\"1451\":1,\"1619\":1,\"4497\":1}}],[\"灵活性\",{\"1\":{\"690\":1,\"3678\":1}}],[\"版本后才引入\",{\"1\":{\"2796\":1,\"4021\":1}}],[\"版本后增加以下两种\",{\"1\":{\"2685\":1,\"5018\":1}}],[\"版本开始引入\",{\"1\":{\"2817\":1,\"4042\":1}}],[\"版本开始\",{\"1\":{\"2437\":1,\"4770\":1}}],[\"版本开始起\",{\"1\":{\"1099\":1,\"1267\":1,\"1435\":1,\"1603\":1,\"4481\":1}}],[\"版本中提供的一项索引优化功能\",{\"1\":{\"2333\":1,\"4666\":1}}],[\"版本之前\",{\"1\":{\"2573\":1,\"4906\":1}}],[\"版本之前采用的正是\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4534\":1}}],[\"版本之后\",{\"1\":{\"2239\":1,\"2609\":1,\"4572\":1,\"4942\":1}}],[\"版本的升级\",{\"1\":{\"718\":1,\"3706\":1}}],[\"技术栈的具体应用\",{\"1\":{\"3098\":1,\"5349\":1}}],[\"技术栈是什么\",{\"1\":{\"3069\":1,\"5320\":1}}],[\"技术的情况下\",{\"1\":{\"1099\":1,\"1267\":1,\"1435\":1,\"1603\":1,\"4481\":1}}],[\"技术\",{\"1\":{\"1098\":1,\"1104\":1,\"1108\":1,\"1266\":1,\"1272\":1,\"1276\":1,\"1434\":1,\"1440\":1,\"1444\":1,\"1602\":1,\"1608\":1,\"1612\":1,\"4480\":1,\"4486\":1,\"4490\":1}}],[\"次方\",{\"1\":{\"2048\":3}}],[\"次都是由\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4487\":1}}],[\"次的数据拷贝过程\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4487\":1}}],[\"次数据拷贝\",{\"1\":{\"1096\":1,\"1102\":1,\"1264\":1,\"1270\":1,\"1432\":1,\"1438\":1,\"1600\":1,\"1606\":1,\"4478\":1,\"4484\":1}}],[\"次\",{\"1\":{\"1090\":1,\"1258\":1,\"1426\":1,\"1594\":1,\"4472\":1}}],[\"次上下文切换和数据拷贝次数\",{\"1\":{\"1105\":2,\"1273\":2,\"1441\":2,\"1609\":2,\"4487\":2}}],[\"次上下文切换的开销\",{\"1\":{\"1095\":1,\"1263\":1,\"1431\":1,\"1599\":1,\"4477\":1}}],[\"次上下文切换\",{\"1\":{\"1090\":1,\"1096\":1,\"1258\":1,\"1264\":1,\"1426\":1,\"1432\":1,\"1594\":1,\"1600\":1,\"4472\":1,\"4478\":1}}],[\"搬运的\",{\"1\":{\"1088\":1,\"1256\":1,\"1424\":1,\"1592\":1,\"4470\":1}}],[\"拷贝到网卡的缓冲区里\",{\"1\":{\"1088\":1,\"1256\":1,\"1424\":1,\"1592\":1,\"4470\":1}}],[\"缓存击穿导致的原因主要是某个热点数据不存在与缓存中\",{\"1\":{\"2731\":1,\"5064\":1}}],[\"缓存击穿中\",{\"1\":{\"2710\":1,\"2717\":1,\"5043\":1,\"5050\":1}}],[\"缓存永不失效\",{\"1\":{\"2728\":1,\"5061\":1}}],[\"缓存服务宕机也会导致缓存雪崩现象\",{\"1\":{\"2721\":1,\"5054\":1}}],[\"缓存在同一时间大面积的失效\",{\"1\":{\"2720\":1,\"5053\":1}}],[\"缓存穿透中\",{\"1\":{\"2716\":1,\"5049\":1}}],[\"缓存穿透和缓存击穿有什么区别\",{\"0\":{\"2715\":1,\"5048\":1}}],[\"缓存穿透说简单点就是大量请求的\",{\"1\":{\"2692\":1,\"5025\":1}}],[\"缓存无效\",{\"1\":{\"2695\":1,\"5028\":1}}],[\"缓存雪崩和缓存击穿比较像\",{\"1\":{\"2731\":1,\"5064\":1}}],[\"缓存雪崩和缓存击穿有什么区别\",{\"0\":{\"2730\":1,\"5063\":1}}],[\"缓存雪崩描述的就是这样一个简单的场景\",{\"1\":{\"2720\":1,\"5053\":1}}],[\"缓存雪崩\",{\"0\":{\"2690\":1,\"5023\":1}}],[\"缓存机制\",{\"1\":{\"2183\":1,\"5236\":1}}],[\"缓存一致性解决\",{\"0\":{\"1839\":1,\"3916\":1}}],[\"缓存中获取数据将不再从数据库查询\",{\"1\":{\"900\":1,\"3888\":1}}],[\"缓冲区根据对应的持久化方式\",{\"1\":{\"2658\":1,\"4991\":1}}],[\"缓冲区的状态\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"缓冲区的数据写入到\",{\"1\":{\"2657\":1,\"4990\":1}}],[\"缓冲区的过程\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"缓冲区\",{\"1\":{\"1101\":1,\"1269\":1,\"1437\":1,\"1605\":1,\"2651\":1,\"4483\":1,\"4984\":1}}],[\"缓冲区描述符和数据长度传到\",{\"1\":{\"1101\":1,\"1269\":1,\"1437\":1,\"1605\":1,\"4483\":1}}],[\"缓冲区里\",{\"1\":{\"1090\":1,\"1096\":1,\"1258\":1,\"1264\":1,\"1426\":1,\"1432\":1,\"1594\":1,\"1600\":1,\"4472\":1,\"4478\":1}}],[\"缓冲区里的数据\",{\"1\":{\"1088\":1,\"1256\":1,\"1424\":1,\"1592\":1,\"4470\":1}}],[\"缓冲区中\",{\"1\":{\"1087\":1,\"1101\":1,\"1255\":1,\"1269\":1,\"1423\":1,\"1437\":1,\"1591\":1,\"1605\":1,\"2656\":1,\"4469\":1,\"4483\":1,\"4989\":1}}],[\"映射记录\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"映射\",{\"1\":{\"1083\":1,\"1251\":1,\"1419\":1,\"1587\":1,\"4465\":1}}],[\"种数据淘汰策略\",{\"1\":{\"2678\":1,\"5011\":1}}],[\"种持久化方式\",{\"1\":{\"2636\":1,\"4969\":1}}],[\"种特殊数据类型\",{\"1\":{\"2591\":1,\"4924\":1}}],[\"种基础数据类型\",{\"1\":{\"2590\":1,\"4923\":1}}],[\"种隔离级别\",{\"1\":{\"2521\":1,\"4854\":1}}],[\"种隔离级别的支持不一样\",{\"1\":{\"2521\":1,\"4854\":1}}],[\"种方案选择\",{\"1\":{\"1118\":1,\"1286\":1,\"1454\":1,\"1622\":1,\"4500\":1}}],[\"种\",{\"1\":{\"1076\":1,\"1244\":1,\"1412\":1,\"1580\":1,\"2182\":1,\"4458\":1,\"5235\":1}}],[\"万余额的账号个数就变为\",{\"1\":{\"2505\":1,\"4838\":1}}],[\"万的账号\",{\"1\":{\"2505\":1,\"4838\":1}}],[\"万的记录\",{\"1\":{\"2504\":1,\"2506\":1,\"4837\":1,\"4839\":1}}],[\"万个请求的问题\",{\"1\":{\"1073\":1,\"1241\":1,\"1409\":1,\"1577\":1,\"4455\":1}}],[\"万请求\",{\"1\":{\"1073\":1,\"1241\":1,\"1409\":1,\"1577\":1,\"4455\":1}}],[\"边缘触发的效率比水平触发的效率要高\",{\"1\":{\"1071\":1,\"1239\":1,\"1407\":1,\"1575\":1,\"4453\":1}}],[\"边缘触发模式一般和非阻塞\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"错误类型为\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"搭配使用\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"描述符上有可读事件发生时\",{\"1\":{\"1065\":1,\"1233\":1,\"1401\":1,\"1569\":1,\"4447\":1}}],[\"水平触发的意思是只要满足事件的条件\",{\"1\":{\"1068\":1,\"1236\":1,\"1404\":1,\"1572\":1,\"4450\":1}}],[\"水平触发\",{\"1\":{\"1063\":1,\"1231\":1,\"1399\":1,\"1567\":1,\"4445\":1}}],[\"函数\",{\"1\":{\"2357\":1,\"2658\":1,\"4690\":1,\"4991\":1}}],[\"函数形式如下\",{\"1\":{\"1092\":1,\"1260\":1,\"1428\":1,\"1596\":1,\"4474\":1}}],[\"函数读完才结束\",{\"1\":{\"1066\":1,\"1234\":1,\"1402\":1,\"1570\":1,\"4448\":1}}],[\"函数从内核读取数据\",{\"1\":{\"1065\":1,\"1233\":1,\"1401\":1,\"1569\":1,\"4447\":1}}],[\"函数时\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"函数加入内核中的红黑树里\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"增删改一般时间复杂度是\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"增加了轮询\",{\"1\":{\"2744\":1,\"3969\":1}}],[\"增加\",{\"1\":{\"546\":1,\"641\":1,\"849\":1,\"3629\":1,\"3837\":1}}],[\"增加的方式是\",{\"1\":{\"540\":1}}],[\"传递了变量值\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"传入一个\",{\"1\":{\"2748\":1,\"3973\":1}}],[\"传入的邮箱格式不对的时候直接返回错误消息给客户端等等\",{\"1\":{\"2694\":1,\"5027\":1}}],[\"传入参数\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"传输过程中即便请求被截获\",{\"1\":{\"3232\":1}}],[\"传输过程中一旦请求被截获\",{\"1\":{\"3226\":1}}],[\"传输协议\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"传输协议实现一个可靠的传输协议\",{\"1\":{\"2061\":1}}],[\"传输方式\",{\"1\":{\"2068\":1}}],[\"传输数据前先要建立连接\",{\"1\":{\"2054\":1}}],[\"传输层有两个传输协议分别是\",{\"1\":{\"2090\":1}}],[\"传输层的端口号的作用\",{\"1\":{\"2089\":1}}],[\"传输层\",{\"1\":{\"2023\":1}}],[\"传给内核\",{\"1\":{\"1053\":1,\"1221\":1,\"1389\":1,\"1557\":1,\"4435\":1}}],[\"传播行为\",{\"1\":{\"763\":1,\"3751\":1}}],[\"把\",{\"1\":{\"3183\":1,\"3187\":1,\"5434\":1,\"5438\":1}}],[\"把之前的异步调用修改为调用延迟任务\",{\"1\":{\"3180\":1,\"5431\":1}}],[\"把自媒体文章上下架放进消息队列\",{\"1\":{\"3103\":1,\"5354\":1}}],[\"把自己的应用放入容器\",{\"1\":{\"1694\":1,\"4254\":1}}],[\"把所有可能存在的请求的值都存放在布隆过滤器中\",{\"1\":{\"2699\":1,\"5032\":1}}],[\"把内核缓冲区里的数据拷贝到\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"把内核缓冲区的数据拷贝到\",{\"1\":{\"1090\":1,\"1258\":1,\"1426\":1,\"1594\":1,\"4472\":1}}],[\"把内核的\",{\"1\":{\"1088\":1,\"1256\":1,\"1424\":1,\"1592\":1,\"4470\":1}}],[\"把需要监控的\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"把时间拉长来看\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"把你绕蒙你这篇文章就白看了\",{\"1\":{\"287\":1,\"3564\":1}}],[\"秒内就可以处理上千个请求\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"毫秒以内\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"呢\",{\"0\":{\"2100\":1},\"1\":{\"1050\":1,\"1218\":1,\"1386\":1,\"1554\":1,\"1793\":1,\"1804\":1,\"1985\":1,\"2265\":1,\"4353\":1,\"4364\":1,\"4432\":1,\"4598\":1}}],[\"既不存在于缓存中\",{\"1\":{\"2716\":1,\"5049\":1}}],[\"既能提升并发性\",{\"1\":{\"2447\":1,\"4780\":1}}],[\"既然有更好的可以用\",{\"1\":{\"5167\":1}}],[\"既然备份数据库数据的时候\",{\"1\":{\"2377\":1,\"4710\":1}}],[\"既然哈希表这么快\",{\"1\":{\"2266\":1,\"4599\":1}}],[\"既然\",{\"1\":{\"1985\":1}}],[\"既然为每个请求分配一个进程\",{\"1\":{\"1050\":1,\"1218\":1,\"1386\":1,\"1554\":1,\"4432\":1}}],[\"既没有指定partition\",{\"1\":{\"939\":1,\"5086\":1}}],[\"套接字是支持\",{\"1\":{\"1047\":1,\"1215\":1,\"1383\":1,\"1551\":1,\"4429\":1}}],[\"套接字\",{\"1\":{\"1047\":1,\"1215\":1,\"1383\":1,\"1551\":1,\"4429\":1}}],[\"更强大\",{\"1\":{\"2744\":1,\"3969\":1}}],[\"更灵活\",{\"1\":{\"2744\":1,\"3969\":1}}],[\"更加友好\",{\"1\":{\"2673\":1,\"5006\":1}}],[\"更大的整型数据\",{\"1\":{\"2566\":1,\"4899\":1}}],[\"更新一个变量的时候\",{\"1\":{\"2792\":1,\"4017\":1}}],[\"更新了这条数据\",{\"1\":{\"2500\":1,\"4833\":1}}],[\"更新后的数据\",{\"1\":{\"2495\":1,\"4828\":1}}],[\"更新\",{\"1\":{\"2421\":1,\"3112\":1,\"4754\":1,\"5363\":1}}],[\"更新代价比聚簇索引要小\",{\"1\":{\"2320\":1,\"4653\":1}}],[\"更新代价大\",{\"1\":{\"2315\":1,\"4648\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"132\":1,\"3420\":1}}],[\"更新时间\",{\"1\":{\"16\":1,\"3304\":1}}],[\"更严谨的说法应该是一个接口\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"更复杂的情况是\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"更适合做\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"更有优势\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"比较\",{\"1\":{\"3269\":1}}],[\"比较频繁的话导致\",{\"1\":{\"3110\":1,\"5361\":1}}],[\"比较重要的主要有下面\",{\"1\":{\"2585\":1,\"4918\":1}}],[\"比较靠谱的原因\",{\"1\":{\"2086\":1}}],[\"比\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"2198\":1,\"2992\":1,\"4217\":1,\"4426\":1,\"5251\":1}}],[\"比如一个用户的用户名为18666666666\",{\"1\":{\"3226\":1}}],[\"比如数据库查询和业务运算\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"比如你刚刚消费完消息之后\",{\"1\":{\"3118\":1,\"5369\":1}}],[\"比如文章审核\",{\"1\":{\"3107\":1,\"5358\":1}}],[\"比如我们在同一个线程中声明了两个\",{\"1\":{\"2948\":1,\"4173\":1}}],[\"比如reentrantreadwritelock\",{\"1\":{\"2826\":1,\"4051\":1}}],[\"比如reentrantlock就是独占锁\",{\"1\":{\"2825\":1,\"4050\":1}}],[\"比如需要将\",{\"1\":{\"2812\":1,\"4037\":1}}],[\"比如查询的数据库\",{\"1\":{\"2694\":1,\"5027\":1}}],[\"比如图片\",{\"0\":{\"2558\":1,\"4891\":1},\"1\":{\"2560\":1,\"4893\":1}}],[\"比如下面这个顺序的场景\",{\"1\":{\"2409\":1,\"4742\":1}}],[\"比如下单清空购物车\",{\"0\":{\"1847\":1,\"3924\":1}}],[\"比如全文索引\",{\"1\":{\"2238\":1,\"4571\":1}}],[\"比如说\",{\"1\":{\"2182\":1,\"2652\":1,\"4985\":1,\"5235\":1}}],[\"比如说此时选\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"比如高考成绩排序\",{\"0\":{\"1857\":1,\"3934\":1}}],[\"比如对于需要确保强一致性的场景如银行一般会选择保证\",{\"1\":{\"1836\":1,\"4396\":1}}],[\"比如部分节点网络出了问题\",{\"1\":{\"1829\":1,\"4389\":1}}],[\"比如这里我们是三个\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"比如这个时候我们启动了\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"比如内核中有数据需要读\",{\"1\":{\"1068\":1,\"1236\":1,\"1404\":1,\"1572\":1,\"4450\":1}}],[\"比如上图中4个分区3个消费者的场景\",{\"1\":{\"950\":1,\"5097\":1}}],[\"比如健康状况\",{\"1\":{\"856\":1,\"3844\":1}}],[\"比如在方法执行前后做什么事情\",{\"1\":{\"707\":1,\"3695\":1}}],[\"比如在任何一个位置插入一个元素\",{\"1\":{\"616\":1}}],[\"比如接口一旦新增加方法\",{\"1\":{\"693\":1,\"3681\":1}}],[\"比如\",{\"1\":{\"564\":1,\"584\":1,\"588\":2,\"599\":1,\"621\":1,\"700\":1,\"1030\":1,\"1033\":1,\"1129\":1,\"1198\":1,\"1201\":1,\"1297\":1,\"1366\":1,\"1369\":1,\"1465\":1,\"1534\":1,\"1537\":1,\"1633\":1,\"1775\":1,\"1834\":1,\"1844\":1,\"2061\":1,\"2178\":1,\"2201\":1,\"2203\":1,\"2368\":1,\"2369\":1,\"2471\":1,\"2481\":1,\"2484\":1,\"2601\":1,\"3688\":1,\"3921\":1,\"4335\":1,\"4394\":1,\"4412\":1,\"4415\":1,\"4511\":1,\"4701\":1,\"4702\":1,\"4804\":1,\"4814\":1,\"4817\":1,\"4934\":1,\"5231\":1,\"5254\":1,\"5256\":1}}],[\"比如hashmap有hashset\",{\"1\":{\"369\":1}}],[\"比如它的属性\",{\"1\":{\"295\":1,\"3572\":1}}],[\"存放数据的\",{\"1\":{\"2948\":1,\"4173\":1}}],[\"存放在\",{\"1\":{\"2597\":1,\"3134\":1,\"4930\":1,\"5385\":1}}],[\"存放在内存中并由消息队列标识符标识\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"存储起来\",{\"1\":{\"3208\":1,\"5459\":1}}],[\"存储系统中的冷数据\",{\"1\":{\"3206\":1,\"5457\":1}}],[\"存储数据库中是一种数据安全的考虑\",{\"1\":{\"3172\":1,\"5423\":1}}],[\"存储\",{\"1\":{\"3153\":1,\"5404\":1}}],[\"存储技术选型优化\",{\"1\":{\"3120\":1,\"5371\":1}}],[\"存储到阿里云oss\",{\"1\":{\"3064\":1,\"5315\":1}}],[\"存储字节越小\",{\"1\":{\"2562\":1,\"4895\":1}}],[\"存储引擎为每行数据添加了三个\",{\"1\":{\"2533\":1,\"4866\":1}}],[\"存储引擎提供了个\",{\"1\":{\"2439\":1,\"4772\":1}}],[\"存储引擎提供了一种轻量级的锁来实现自增\",{\"1\":{\"2437\":1,\"4770\":1}}],[\"存储引擎默认的事务隔离级别正是可重复读\",{\"1\":{\"2381\":1,\"4714\":1}}],[\"存储引擎中\",{\"1\":{\"2325\":1,\"2549\":1,\"4658\":1,\"4882\":1}}],[\"存储引擎\",{\"1\":{\"2279\":1,\"4612\":1}}],[\"存在于数据库中\",{\"1\":{\"2710\":1,\"2717\":1,\"5043\":1,\"5050\":1}}],[\"存在于实际的磁盘介质或者文件系统\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"存在的话才会走下面的流程\",{\"1\":{\"2699\":1,\"5032\":1}}],[\"存在\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"存在tcp头部\",{\"1\":{\"2040\":1,\"2042\":1}}],[\"存在ip头部\",{\"1\":{\"2039\":1,\"2041\":1}}],[\"具有算法公开\",{\"1\":{\"3284\":1}}],[\"具有提交\",{\"1\":{\"2246\":1,\"4579\":1}}],[\"具有较低的连接和传输延迟\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"具有多个接口\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"具有高可用分区容错特点\",{\"1\":{\"1727\":1,\"4287\":1}}],[\"具有特定的格式\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"具体实现\",{\"1\":{\"3144\":1,\"5395\":1}}],[\"具体命令如下\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"具体值取决于写出的数据量和\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"具体方式如下\",{\"1\":{\"2423\":1,\"4756\":1}}],[\"具体可以参见这篇文章\",{\"1\":{\"2061\":1}}],[\"具体的计算方法是\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"具体的给面试官扯一扯\",{\"1\":{\"2027\":1}}],[\"具体的细节请移步\",{\"1\":{\"1896\":1,\"1911\":1,\"1952\":1,\"1967\":1,\"5158\":1,\"5160\":1}}],[\"具体的底层实现\",{\"1\":{\"607\":1}}],[\"具体分发给\",{\"1\":{\"1143\":1,\"1158\":1,\"1311\":1,\"1326\":1,\"1479\":1,\"1494\":1,\"1647\":1,\"1662\":1,\"4525\":1,\"4540\":1}}],[\"具体过程如下\",{\"1\":{\"1085\":1,\"1099\":1,\"1253\":1,\"1267\":1,\"1421\":1,\"1435\":1,\"1589\":1,\"1603\":1,\"4467\":1,\"4481\":1}}],[\"具体就是\",{\"1\":{\"894\":1,\"3882\":1}}],[\"具体地\",{\"1\":{\"543\":1}}],[\"具体为o\",{\"1\":{\"337\":1}}],[\"具体来说\",{\"1\":{\"336\":1,\"349\":1}}],[\"具体是这样做的\",{\"1\":{\"2699\":1,\"5032\":1}}],[\"具体是o\",{\"1\":{\"335\":1}}],[\"具体是哪个类加载器加载呢\",{\"1\":{\"220\":1,\"3503\":1}}],[\"匿名管道由于没有名字\",{\"1\":{\"1042\":1,\"1210\":1,\"1378\":1,\"1546\":1,\"4424\":1}}],[\"匿名管道\",{\"1\":{\"1041\":1,\"1209\":1,\"1377\":1,\"1545\":1,\"4423\":1}}],[\"管道只能承载无格式字\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"管道和消息队列的通信数据都是先进先出的原则\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"管道\",{\"1\":{\"1041\":1,\"1209\":1,\"1377\":1,\"1545\":1,\"4423\":1}}],[\"管理\",{\"1\":{\"726\":1,\"3714\":1}}],[\"操作可能无法感知到\",{\"1\":{\"2802\":1,\"4027\":1}}],[\"操作来加锁和解锁\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"操作的方式将创建的节点加入同步队列的尾部\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"操作的一个经典问题\",{\"1\":{\"2802\":1,\"4027\":1}}],[\"操作的记录只对事务本身可见\",{\"1\":{\"2550\":1,\"4883\":1}}],[\"操作的速度是很快的\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4534\":1}}],[\"操作中产生的\",{\"1\":{\"2550\":1,\"4883\":1}}],[\"操作在内部被视为更新\",{\"1\":{\"2534\":1,\"4867\":1}}],[\"操作时\",{\"1\":{\"2402\":1,\"2404\":1,\"4735\":1,\"4737\":1}}],[\"操作一次\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"操作\",{\"0\":{\"2579\":1,\"4912\":1},\"1\":{\"1038\":1,\"1070\":1,\"1206\":1,\"1238\":1,\"1374\":1,\"1406\":1,\"1542\":1,\"1574\":1,\"2311\":1,\"2406\":1,\"2415\":1,\"2550\":1,\"2672\":1,\"2790\":1,\"2796\":1,\"4015\":1,\"4021\":1,\"4420\":1,\"4452\":1,\"4644\":1,\"4739\":1,\"4748\":1,\"4883\":1,\"5005\":1}}],[\"操作系统直接将内核缓冲区的数据拷贝到\",{\"1\":{\"1087\":1,\"1255\":1,\"1423\":1,\"1591\":1,\"4469\":1}}],[\"操作系统内核与用户空间就不需要再进行任何的数据拷贝操作\",{\"1\":{\"1083\":1,\"1251\":1,\"1419\":1,\"1587\":1,\"4465\":1}}],[\"操作系统重启\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"操作系统必须提供实现进程协作的措施和方法\",{\"1\":{\"1036\":1,\"1204\":1,\"1372\":1,\"1540\":1,\"4418\":1}}],[\"操作系统\",{\"0\":{\"1016\":1,\"1017\":1,\"1184\":1,\"1185\":1,\"1352\":1,\"1353\":1,\"1520\":1,\"1521\":1,\"4398\":1,\"4399\":1,\"5482\":1}}],[\"屏障是一种同步原语\",{\"1\":{\"1033\":1,\"1201\":1,\"1369\":1,\"1537\":1,\"4415\":1}}],[\"屏障\",{\"1\":{\"1033\":1,\"1201\":1,\"1369\":1,\"1537\":1,\"4415\":1}}],[\"信息\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"信息容器\",{\"1\":{\"44\":1,\"3332\":1}}],[\"信号是一种比较复杂的通信方式\",{\"1\":{\"1043\":1,\"1211\":1,\"1379\":1,\"1547\":1,\"4425\":1}}],[\"信号\",{\"1\":{\"1043\":1,\"1211\":1,\"1379\":1,\"1547\":1,\"4425\":1}}],[\"信号量的意图在于进程间同步\",{\"1\":{\"1045\":1,\"1213\":1,\"1381\":1,\"1549\":1,\"4427\":1}}],[\"信号量是一个计数器\",{\"1\":{\"1045\":1,\"1213\":1,\"1381\":1,\"1549\":1,\"4427\":1}}],[\"信号量\",{\"1\":{\"1032\":1,\"1038\":1,\"1045\":1,\"1200\":1,\"1206\":1,\"1213\":1,\"1368\":1,\"1374\":1,\"1381\":1,\"1536\":1,\"1542\":1,\"1549\":1,\"4414\":1,\"4420\":1,\"4427\":1}}],[\"读多写少\",{\"1\":{\"2894\":1,\"4119\":1}}],[\"读操作并不会修改数据\",{\"1\":{\"2894\":1,\"4119\":1}}],[\"读提交\",{\"1\":{\"2510\":1,\"2517\":1,\"2520\":1,\"2529\":2,\"4843\":1,\"4850\":1,\"4853\":1,\"4862\":2}}],[\"读未提交\",{\"1\":{\"2509\":1,\"2516\":1,\"2527\":1,\"4842\":1,\"4849\":1,\"4860\":1}}],[\"读到\",{\"1\":{\"2493\":1,\"4826\":1}}],[\"读读是共享的\",{\"1\":{\"2900\":1,\"4125\":1}}],[\"读读\",{\"1\":{\"2411\":1,\"4744\":1}}],[\"读锁的共享锁可保证并发读是非常高效的\",{\"1\":{\"2897\":1,\"4122\":1}}],[\"读锁还在占用着\",{\"1\":{\"2412\":1,\"4745\":1}}],[\"读锁\",{\"0\":{\"2899\":1,\"4124\":1},\"1\":{\"2402\":1,\"2405\":2,\"2406\":1,\"2410\":1,\"2416\":1,\"4735\":1,\"4738\":2,\"4739\":1,\"4743\":1,\"4749\":1}}],[\"读从机房的方案\",{\"1\":{\"1876\":1,\"3953\":1}}],[\"读\",{\"1\":{\"1774\":2,\"4334\":2}}],[\"读取之前的版本数据\",{\"1\":{\"2548\":1,\"4881\":1}}],[\"读取到的余额数据是刚才事务\",{\"1\":{\"2495\":1,\"4828\":1}}],[\"读取到数据后\",{\"1\":{\"1162\":1,\"1330\":1,\"1498\":1,\"1666\":1,\"4544\":1}}],[\"读取meta\",{\"1\":{\"821\":1,\"3809\":1}}],[\"读写\",{\"1\":{\"2897\":1,\"2900\":1,\"4122\":1,\"4125\":1}}],[\"读写互斥\",{\"1\":{\"2426\":1,\"2453\":2,\"4759\":1,\"4786\":2}}],[\"读写事件\",{\"1\":{\"1113\":1,\"1281\":1,\"1449\":1,\"1617\":1,\"4495\":1}}],[\"读写锁\",{\"1\":{\"1031\":1,\"1199\":1,\"1367\":1,\"1535\":1,\"2901\":1,\"4126\":1,\"4413\":1}}],[\"互联网工程任务组正式将基于\",{\"1\":{\"5162\":1}}],[\"互斥锁\",{\"1\":{\"1030\":1,\"1198\":1,\"1366\":1,\"1534\":1,\"4412\":1}}],[\"互斥同步\",{\"0\":{\"1027\":1,\"1195\":1,\"1363\":1,\"1531\":1,\"4409\":1}}],[\"互相循环依赖\",{\"1\":{\"789\":1,\"3777\":1}}],[\"阻塞\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"阻塞后\",{\"1\":{\"2413\":1,\"4746\":1}}],[\"阻塞的情况分三种\",{\"1\":{\"1023\":1,\"1191\":1,\"1359\":1,\"1527\":1,\"4405\":1}}],[\"阻塞状态是线程因为某种原因放弃cpu使用权\",{\"1\":{\"1023\":1,\"1191\":1,\"1359\":1,\"1527\":1,\"4405\":1}}],[\"阻塞状态\",{\"1\":{\"1023\":1,\"1191\":1,\"1359\":1,\"1527\":1,\"4405\":1}}],[\"才需要去实现它\",{\"1\":{\"2844\":1,\"4069\":1}}],[\"才可以把子查询转化为关联查询进行优化\",{\"1\":{\"2580\":1,\"4913\":1}}],[\"才会正式对数据的冲突与否进行检测\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"才会将内存地址\",{\"1\":{\"2792\":1,\"4017\":1}}],[\"才会把\",{\"1\":{\"2434\":1,\"4767\":1}}],[\"才会停止匹配\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"才会进⼊同步块\",{\"1\":{\"674\":1,\"3662\":1}}],[\"才能继续执行\",{\"1\":{\"2512\":1,\"4845\":1}}],[\"才能连接\",{\"1\":{\"2028\":1}}],[\"才能得到处理\",{\"1\":{\"1797\":1,\"4357\":1}}],[\"才有机会转到运行状态\",{\"1\":{\"1023\":1,\"1191\":1,\"1359\":1,\"1527\":1,\"4405\":1}}],[\"直至联合索引中全部字段匹配完成\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"直到等待的时间超过了\",{\"1\":{\"2965\":1,\"4190\":1}}],[\"直到锁被另外一个线程释放为止\",{\"1\":{\"2923\":1,\"4148\":1}}],[\"直到锁被释放\",{\"1\":{\"2394\":1,\"4727\":1}}],[\"直到操作完成\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"直到拥有间隙锁的那个事务提交为止\",{\"1\":{\"2475\":1,\"4808\":1}}],[\"直到表结构变更完成\",{\"1\":{\"2406\":1,\"4739\":1}}],[\"直到执行完\",{\"1\":{\"2405\":1,\"4738\":1}}],[\"直到目的地\",{\"1\":{\"2175\":1,\"5228\":1}}],[\"直到系统调用\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"直到你取出了快递\",{\"1\":{\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"4449\":1}}],[\"直到内核缓冲区数据被\",{\"1\":{\"1066\":1,\"1234\":1,\"1402\":1,\"1570\":1,\"4448\":1}}],[\"直到所有线程都到达屏障后\",{\"1\":{\"1033\":1,\"1201\":1,\"1369\":1,\"1537\":1,\"4415\":1}}],[\"直到线程进入就绪状态\",{\"1\":{\"1023\":1,\"1191\":1,\"1359\":1,\"1527\":1,\"4405\":1}}],[\"直接发车\",{\"1\":{\"3273\":1}}],[\"直接打断说只介绍自己会的\",{\"1\":{\"3035\":1,\"5286\":1}}],[\"直接丢弃掉\",{\"1\":{\"2975\":1,\"4200\":1}}],[\"直接通过getmap\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"直接返回请求参数错误信息给客户端\",{\"1\":{\"2699\":1,\"5032\":1}}],[\"直接返回已创建的单例对象\",{\"1\":{\"674\":1,\"3662\":1}}],[\"直接查该表是否有意向独占锁\",{\"1\":{\"2428\":1,\"4761\":1}}],[\"直接找到\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"直接调用接口就行了\",{\"1\":{\"1762\":1,\"4322\":1}}],[\"直接就可以在子线程将处理结果发送给客户端\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4564\":1}}],[\"直接会将数据在缓存中的引用交给用户\",{\"1\":{\"905\":1,\"3893\":1}}],[\"直接在第⼀重判断就返回了单例\",{\"1\":{\"674\":1,\"3662\":1}}],[\"直接实例化对象\",{\"1\":{\"669\":1,\"3657\":1}}],[\"直接上菜\",{\"1\":{\"560\":1}}],[\"直接举例吧\",{\"1\":{\"287\":1,\"296\":1,\"3564\":1,\"3573\":1}}],[\"直接new对象就叫正射\",{\"1\":{\"284\":1,\"3561\":1}}],[\"直接生成的\",{\"1\":{\"199\":1,\"3482\":1}}],[\"暂时停止运行\",{\"1\":{\"1023\":1,\"1191\":1,\"1359\":1,\"1527\":1,\"4405\":1}}],[\"暂时只是做到这个份儿上\",{\"1\":{\"618\":1}}],[\"新生代和老年代数据是如何流动的\",{\"1\":{\"3088\":1,\"5339\":1}}],[\"新任务就会被存放在队列中\",{\"1\":{\"2963\":1,\"2979\":1,\"4188\":1,\"4204\":1}}],[\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数\",{\"1\":{\"2963\":1,\"2979\":1,\"4188\":1,\"4204\":1}}],[\"新写入操作会报错\",{\"1\":{\"2684\":1,\"5017\":1}}],[\"新增\",{\"1\":{\"2639\":1,\"4972\":1}}],[\"新增了\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"新的\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"新人只需要了解他所接管的服务的代码\",{\"1\":{\"1722\":1,\"4282\":1}}],[\"新创建了一个线程对象\",{\"1\":{\"1020\":1,\"1188\":1,\"1356\":1,\"1524\":1,\"4402\":1}}],[\"新建线程将会使当前运行的线程超出最大线程数\",{\"1\":{\"2988\":1,\"4213\":1}}],[\"新建状态\",{\"1\":{\"1020\":1,\"1188\":1,\"1356\":1,\"1524\":1,\"4402\":1}}],[\"新建一个springboot项目\",{\"1\":{\"863\":1,\"3851\":1}}],[\"七层模型\",{\"0\":{\"2138\":1,\"2231\":1,\"5191\":1},\"1\":{\"2139\":1,\"5192\":1}}],[\"七\",{\"0\":{\"1017\":1,\"1185\":1,\"1353\":1,\"1521\":1,\"4399\":1}}],[\"形成一系列的目录和子目录\",{\"1\":{\"1002\":1,\"3914\":1}}],[\"拆分多个queue\",{\"1\":{\"991\":1,\"5138\":1}}],[\"造成数据顺序错误\",{\"1\":{\"986\":1,\"5133\":1}}],[\"出来得太快了\",{\"1\":{\"5167\":1}}],[\"出一个子进程\",{\"1\":{\"2647\":1,\"4980\":1}}],[\"出现冲突后就会开始自旋操作\",{\"1\":{\"2809\":1,\"4034\":1}}],[\"出现问题的时候我们势必需要重新选举\",{\"1\":{\"1799\":1,\"4359\":1}}],[\"出现顺序错乱的场景\",{\"0\":{\"985\":1,\"5132\":1}}],[\"出去呀\",{\"1\":{\"1794\":1,\"4354\":1}}],[\"出队效率比较高\",{\"1\":{\"358\":1}}],[\"消耗更多的\",{\"1\":{\"2576\":1,\"4909\":1}}],[\"消耗过多存储空间\",{\"1\":{\"2559\":1,\"4892\":1}}],[\"消息中间件\",{\"0\":{\"5484\":1}}],[\"消息摘要算法又称为哈希算法\",{\"1\":{\"3214\":1}}],[\"消息摘要算法第五版\",{\"1\":{\"3213\":1}}],[\"消息积压的概率比较大\",{\"1\":{\"3188\":1,\"5439\":1}}],[\"消息实际上并没有被消费\",{\"1\":{\"3116\":1,\"5367\":1}}],[\"消息的边界\",{\"1\":{\"2030\":1}}],[\"消息可能会被操作系统\",{\"1\":{\"2030\":1}}],[\"消息广播模式\",{\"0\":{\"1792\":1,\"4352\":1}}],[\"消息广播\",{\"1\":{\"1783\":1,\"1791\":1,\"4343\":1,\"4351\":1}}],[\"消息分区\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"消息驱动\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"消息总线\",{\"1\":{\"1709\":1,\"1743\":1,\"4269\":1,\"4303\":1}}],[\"消息不一定要以先进先出的次序读取\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"消息队列克服了信号承载信息量少\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"消息队列可以实现消息的随机查询\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"消息队列是消息的链表\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"消息队列\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"2611\":1,\"4426\":1,\"4944\":1}}],[\"消息队列中的若干消息如果是对同一个数据进行操作\",{\"1\":{\"984\":1,\"5131\":1}}],[\"消费任务进行审核文章\",{\"1\":{\"3181\":1,\"5432\":1}}],[\"消费组\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"消费组的成员订阅它们感兴趣的topic并将这种订阅关系传递给作为订阅组协调者的broker\",{\"1\":{\"944\":1,\"5091\":1}}],[\"消费端会从分配到的partition里面去消费消息\",{\"1\":{\"975\":1,\"5122\":1}}],[\"消费者会自动提交了\",{\"1\":{\"3116\":1,\"5367\":1}}],[\"消费者丢失消息的情况\",{\"1\":{\"3114\":1,\"5365\":1}}],[\"消费者购买商品这个事务\",{\"1\":{\"2485\":1,\"4818\":1}}],[\"消费者的钱也没花出去\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"消费者消费完\",{\"1\":{\"1854\":1,\"3931\":1}}],[\"消费者还是会从之前没提交的offset位置开始消费\",{\"1\":{\"975\":1,\"5122\":1}}],[\"消费者之间分配到的分区数的差值不会超过1\",{\"1\":{\"957\":1,\"5104\":1}}],[\"消费者订阅的topic列表是相同的\",{\"1\":{\"957\":1,\"5104\":1}}],[\"消费者\",{\"0\":{\"941\":1,\"5088\":1}}],[\"利用她们的技术\",{\"1\":{\"3221\":1}}],[\"利用\",{\"1\":{\"2603\":1,\"4936\":1}}],[\"利用mysql的唯一键约束\",{\"1\":{\"980\":1,\"5127\":1}}],[\"利于集群数据的均衡\",{\"1\":{\"933\":1,\"5080\":1}}],[\"隔一段时间\",{\"1\":{\"975\":1,\"5122\":1}}],[\"隔离服务之间相互影响\",{\"1\":{\"1759\":1,\"4319\":1}}],[\"隔离级别是\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"隔离级别是在\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"隔离级别是可以解决幻读问题发生的\",{\"1\":{\"2246\":1,\"4579\":1}}],[\"隔离级别的事务来说\",{\"1\":{\"2527\":1,\"2528\":1,\"2529\":1,\"4860\":1,\"4861\":1,\"4862\":1}}],[\"隔离级别会影响性能\",{\"1\":{\"2522\":1,\"4855\":1}}],[\"隔离级别来避免幻读现象的发生\",{\"1\":{\"2522\":1,\"4855\":1}}],[\"隔离级别下\",{\"1\":{\"2516\":1,\"2517\":1,\"2518\":1,\"2519\":1,\"2522\":1,\"4849\":1,\"4850\":1,\"4851\":1,\"4852\":1,\"4855\":1}}],[\"隔离级别越高\",{\"1\":{\"2508\":1,\"4841\":1}}],[\"隔离级别\",{\"1\":{\"768\":2,\"3756\":2}}],[\"隔离性是通过\",{\"1\":{\"2490\":1,\"4823\":1}}],[\"隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致\",{\"1\":{\"2485\":1,\"4818\":1}}],[\"隔离性\",{\"1\":{\"759\":1,\"2485\":1,\"3747\":1,\"4818\":1}}],[\"变化不频繁的情况\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"变为了正常状态\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"变为\",{\"1\":{\"1802\":1,\"1805\":1,\"4362\":1,\"4365\":1}}],[\"变得可运行\",{\"1\":{\"1021\":1,\"1189\":1,\"1357\":1,\"1525\":1,\"4403\":1}}],[\"变动较小\",{\"1\":{\"971\":1,\"5118\":1}}],[\"变量符合我们上面提到的空间局部性\",{\"1\":{\"1013\":1}}],[\"变量\",{\"1\":{\"300\":1,\"2942\":1,\"2944\":1,\"3577\":1,\"4167\":1,\"4169\":1}}],[\"粘性的\",{\"1\":{\"963\":2,\"5110\":2}}],[\"节流以及缓冲区大小受限等缺点\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"节省因分区分配变化带来的开销\",{\"1\":{\"963\":1,\"5110\":1}}],[\"节点是红色或黑色\",{\"1\":{\"646\":1,\"3634\":1}}],[\"计数器\",{\"1\":{\"2885\":2,\"4110\":2}}],[\"计数比如用户单位时间的请求数\",{\"1\":{\"2602\":1,\"4935\":1}}],[\"计算量小\",{\"1\":{\"3284\":1}}],[\"计算后要修改后的新值b\",{\"1\":{\"2779\":1,\"4004\":1}}],[\"计算机网络基础\",{\"0\":{\"2221\":1}}],[\"计算机网络\",{\"0\":{\"2127\":1,\"5180\":1,\"5485\":1}}],[\"计算第i个消费者\",{\"1\":{\"949\":2,\"5096\":2}}],[\"计算平均分配后多出的分区数\",{\"1\":{\"949\":1,\"5096\":1}}],[\"计算平均每个消费者分配的分区数\",{\"1\":{\"949\":1,\"5096\":1}}],[\"计划\",{\"1\":{\"74\":1,\"75\":1,\"3362\":1,\"3363\":1}}],[\"路由器接口将对\",{\"1\":{\"2175\":1,\"5228\":1}}],[\"路由器接口如未能找到主机\",{\"1\":{\"2174\":1,\"5227\":1}}],[\"路由器接口查询\",{\"1\":{\"2173\":1,\"5226\":1}}],[\"路由器的多个接口都各自维护一个\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"路由器作为互联设备\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"路由到不同分区\",{\"1\":{\"940\":1,\"5087\":1}}],[\"路径导航\",{\"1\":{\"12\":1,\"129\":1,\"3300\":1,\"3417\":1}}],[\"疑问\",{\"1\":{\"940\":1,\"5087\":1}}],[\"生成数字签名\",{\"0\":{\"3270\":1}}],[\"生成一个\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"生成一个被代理对象的子类来作为代理\",{\"1\":{\"723\":1,\"3711\":1}}],[\"生产者执行本地事务\",{\"1\":{\"1851\":1,\"3928\":1}}],[\"生产者\",{\"0\":{\"931\":1,\"5078\":1},\"1\":{\"1848\":1,\"3925\":1}}],[\"天和\",{\"1\":{\"929\":1,\"5076\":1}}],[\"循环次数\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"循环时间\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"循环使用所有片段\",{\"1\":{\"928\":1,\"5075\":1}}],[\"循环依赖的本质是一样的\",{\"1\":{\"790\":1,\"3778\":1}}],[\"循环依赖的概念\",{\"1\":{\"787\":1,\"3775\":1}}],[\"循环依赖分为三种\",{\"1\":{\"789\":1,\"3777\":1}}],[\"keepalivetime才会被回收销毁\",{\"1\":{\"2965\":1,\"4190\":1}}],[\"keepalivetime\",{\"1\":{\"2959\":7,\"2965\":1,\"2966\":1,\"4184\":7,\"4190\":1,\"4191\":1}}],[\"keep\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"keyset\",{\"1\":{\"949\":1,\"5096\":1}}],[\"key不为空时\",{\"1\":{\"940\":1,\"5087\":1}}],[\"key为空时\",{\"1\":{\"940\":1,\"5087\":1}}],[\"keybytes\",{\"1\":{\"940\":4,\"5087\":4}}],[\"key\",{\"0\":{\"2467\":1,\"4800\":1},\"1\":{\"898\":1,\"940\":1,\"1859\":2,\"2246\":1,\"2264\":1,\"2265\":2,\"2271\":3,\"2275\":1,\"2276\":2,\"2279\":1,\"2302\":1,\"2458\":1,\"2468\":1,\"2469\":1,\"2470\":3,\"2471\":2,\"2474\":1,\"2525\":3,\"2603\":1,\"2626\":1,\"2669\":2,\"2671\":2,\"2672\":2,\"2674\":3,\"2682\":1,\"2687\":1,\"2692\":1,\"2695\":1,\"2696\":6,\"2698\":1,\"2710\":1,\"2716\":1,\"2717\":1,\"2946\":1,\"2948\":1,\"3195\":2,\"3196\":3,\"3886\":1,\"3936\":2,\"4171\":1,\"4173\":1,\"4579\":1,\"4597\":1,\"4598\":2,\"4604\":3,\"4608\":1,\"4609\":2,\"4612\":1,\"4635\":1,\"4791\":1,\"4801\":1,\"4802\":1,\"4803\":3,\"4804\":2,\"4807\":1,\"4858\":3,\"4936\":1,\"4959\":1,\"5002\":2,\"5004\":2,\"5005\":2,\"5007\":3,\"5015\":1,\"5020\":1,\"5025\":1,\"5028\":1,\"5029\":6,\"5031\":1,\"5043\":1,\"5049\":1,\"5050\":1,\"5087\":1,\"5446\":2,\"5447\":3}}],[\"kill\",{\"1\":{\"2416\":1,\"4749\":1}}],[\"kraft\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"kubernetes\",{\"1\":{\"1737\":1,\"4297\":1}}],[\"kafka容灾\",{\"1\":{\"1870\":1,\"3947\":1}}],[\"kafka有个offset的概念\",{\"1\":{\"975\":1,\"5122\":1}}],[\"kafka如何保证消息不被重复消费\",{\"0\":{\"973\":1,\"5120\":1}}],[\"kafka默认采用rangeassignor的分配算法\",{\"1\":{\"944\":1,\"5091\":1}}],[\"kafka提供了3种消费者分区分配策略\",{\"1\":{\"943\":1,\"5090\":1}}],[\"kafka权威指南\",{\"1\":{\"940\":1,\"5087\":1}}],[\"kafka\",{\"0\":{\"920\":1,\"5067\":1,\"5465\":1,\"5484\":1},\"1\":{\"922\":1,\"925\":1,\"929\":3,\"1108\":2,\"1109\":1,\"1276\":2,\"1277\":1,\"1444\":2,\"1445\":1,\"1612\":2,\"1613\":1,\"1776\":4,\"3095\":1,\"3115\":1,\"4336\":4,\"4490\":2,\"4491\":1,\"5069\":1,\"5072\":1,\"5076\":3,\"5346\":1,\"5366\":1}}],[\"安全散列\",{\"1\":{\"3281\":1}}],[\"安全性更高\",{\"1\":{\"3286\":1}}],[\"安全性得不到保证\",{\"1\":{\"3285\":1}}],[\"安全性没有\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"安全性和资源消耗\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"安全\",{\"1\":{\"905\":1,\"3893\":1}}],[\"安全的在\",{\"1\":{\"42\":1,\"3330\":1}}],[\"共同关注\",{\"1\":{\"2618\":1,\"4951\":1}}],[\"共同点\",{\"1\":{\"533\":1}}],[\"共享方式\",{\"1\":{\"2847\":1,\"2848\":1,\"4072\":1,\"4073\":1}}],[\"共享锁是指允许多个线程同时持有锁\",{\"1\":{\"2897\":1,\"4122\":1}}],[\"共享锁和独占锁的释放有一定区别\",{\"1\":{\"2827\":1,\"4052\":1}}],[\"共享锁\",{\"0\":{\"2896\":1,\"4121\":1},\"1\":{\"2419\":1,\"2453\":1,\"2826\":1,\"2894\":1,\"4051\":1,\"4119\":1,\"4752\":1,\"4786\":1}}],[\"共享表锁\",{\"1\":{\"2394\":1,\"4727\":1}}],[\"共享\",{\"1\":{\"1086\":1,\"1254\":1,\"1422\":1,\"1590\":1,\"4468\":1}}],[\"共享内存\",{\"1\":{\"1046\":1,\"1214\":1,\"1382\":1,\"1550\":1,\"4428\":1}}],[\"共享的\",{\"1\":{\"900\":1,\"3888\":1}}],[\"共3个consumer\",{\"1\":{\"952\":1,\"5099\":1}}],[\"拦截\",{\"1\":{\"893\":1,\"3881\":1}}],[\"拦截被代理类中的方法\",{\"1\":{\"714\":1,\"3702\":1}}],[\"举个生活中的例子\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"举个栗子\",{\"1\":{\"2494\":1,\"2499\":1,\"2503\":1,\"4827\":1,\"4832\":1,\"4836\":1}}],[\"举个例子\",{\"1\":{\"629\":1,\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"1835\":1,\"2977\":1,\"4202\":1,\"4395\":1,\"4449\":1}}],[\"举例\",{\"1\":{\"893\":1,\"3881\":1}}],[\"方便说一下是哪个公司吗\",{\"1\":{\"3084\":1,\"5335\":1}}],[\"方式二\",{\"1\":{\"2994\":1,\"4219\":1}}],[\"方式一\",{\"1\":{\"2956\":1,\"4181\":1}}],[\"方式的持久化\",{\"1\":{\"2649\":1,\"4982\":1}}],[\"方式解决了幻读\",{\"1\":{\"2524\":1,\"2525\":1,\"4857\":1,\"4858\":1}}],[\"方案详细说明如下\",{\"1\":{\"1175\":1,\"1343\":1,\"1511\":1,\"1679\":1,\"4557\":1}}],[\"方案的示意图如下\",{\"1\":{\"1155\":1,\"1323\":1,\"1491\":1,\"1659\":1,\"4537\":1}}],[\"方案的缺点\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4536\":1}}],[\"方案具体使用进程还是线程\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4510\":1}}],[\"方案\",{\"1\":{\"1123\":1,\"1131\":1,\"1291\":1,\"1299\":1,\"1459\":1,\"1467\":1,\"1627\":1,\"1635\":1,\"4505\":1,\"4513\":1}}],[\"方言\",{\"1\":{\"892\":1,\"3880\":1}}],[\"方法区和堆属于主内存区域\",{\"1\":{\"2854\":1,\"4079\":1}}],[\"方法将响应结果发送给\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4545\":1}}],[\"方法才能被唤醒\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"方法返回代理引用或者原始引用\",{\"1\":{\"810\":1,\"3798\":1}}],[\"方法可能继续在现有事务中运行\",{\"1\":{\"774\":1,\"3762\":1}}],[\"方法入参\",{\"1\":{\"714\":1,\"3702\":1}}],[\"方法中自定义处理逻辑\",{\"1\":{\"707\":1,\"3695\":1}}],[\"方法的参数\",{\"1\":{\"706\":1,\"3694\":1}}],[\"方法有下面三个参数\",{\"1\":{\"706\":1,\"3694\":1}}],[\"方法来获取默认值或将其值更改为当前线程所存的副本的值\",{\"1\":{\"2938\":1,\"4163\":1}}],[\"方法来调用\",{\"1\":{\"705\":1,\"3693\":1}}],[\"方法来返回一个线程安全的list\",{\"1\":{\"473\":1}}],[\"方法来加载类\",{\"1\":{\"231\":1,\"232\":1,\"3514\":1,\"3515\":1}}],[\"方法会传入一个期望的最小容量\",{\"1\":{\"469\":1}}],[\"方法要被调用\",{\"1\":{\"382\":1}}],[\"方法获取对应的构造器\",{\"1\":{\"316\":1,\"3593\":1}}],[\"方法指定获取指定参数类型的\",{\"1\":{\"315\":1,\"3592\":1}}],[\"方法头中使用关键字throws\",{\"1\":{\"254\":1,\"3539\":1}}],[\"方法即可\",{\"1\":{\"217\":1,\"3500\":1}}],[\"方法\",{\"1\":{\"216\":1,\"217\":1,\"295\":1,\"300\":1,\"310\":1,\"313\":1,\"483\":1,\"707\":1,\"713\":1,\"715\":1,\"735\":1,\"894\":1,\"895\":1,\"1021\":1,\"1024\":2,\"1025\":1,\"1109\":1,\"1144\":1,\"1159\":1,\"1189\":1,\"1192\":2,\"1193\":1,\"1277\":1,\"1312\":1,\"1327\":1,\"1357\":1,\"1360\":2,\"1361\":1,\"1445\":1,\"1480\":1,\"1495\":1,\"1525\":1,\"1528\":2,\"1529\":1,\"1613\":1,\"1648\":1,\"1663\":1,\"2925\":1,\"2942\":1,\"2943\":1,\"2988\":1,\"3499\":1,\"3500\":1,\"3572\":1,\"3577\":1,\"3587\":1,\"3590\":1,\"3695\":1,\"3701\":1,\"3703\":1,\"3723\":1,\"3882\":1,\"3883\":1,\"4150\":1,\"4167\":1,\"4168\":1,\"4213\":1,\"4403\":1,\"4406\":2,\"4407\":1,\"4491\":1,\"4526\":1,\"4541\":1}}],[\"方法而不是loadclass\",{\"1\":{\"216\":1,\"3499\":1}}],[\"方法解析该类\",{\"1\":{\"212\":1,\"3495\":1}}],[\"答案就是\",{\"1\":{\"2675\":1,\"5008\":1}}],[\"答案是有的\",{\"1\":{\"1050\":1,\"1218\":1,\"1386\":1,\"1554\":1,\"4432\":1}}],[\"答案是不可能\",{\"1\":{\"587\":1}}],[\"答\",{\"1\":{\"888\":1,\"3876\":1}}],[\"官网2\",{\"1\":{\"874\":1,\"875\":1,\"876\":1,\"3862\":1,\"3863\":1,\"3864\":1}}],[\"官方的推荐所建立的这个stack\",{\"1\":{\"617\":1}}],[\"官方推荐的创建栈的方式\",{\"1\":{\"624\":1}}],[\"官方推荐的方法声明的这个\",{\"1\":{\"615\":1}}],[\"官方推荐的写法\",{\"1\":{\"596\":1}}],[\"官方推荐的写法是这样的\",{\"1\":{\"565\":1}}],[\"官方推出了\",{\"1\":{\"609\":1}}],[\"官方也并没有将\",{\"1\":{\"594\":1}}],[\"官方可以做到的是\",{\"1\":{\"593\":1}}],[\"官方不想推出一个叫做\",{\"1\":{\"617\":1}}],[\"官方不愿意看到的\",{\"1\":{\"592\":1}}],[\"官方不能做接口设计层面的修改\",{\"1\":{\"592\":1}}],[\"官方不知道这个\",{\"0\":{\"591\":1}}],[\"官方当然知道这个实现不好\",{\"1\":{\"592\":1}}],[\"官方文档中的类关系\",{\"1\":{\"568\":1}}],[\"官方\",{\"1\":{\"214\":1,\"562\":1,\"3497\":1}}],[\"线程是稀缺资源\",{\"1\":{\"2954\":1,\"4179\":1}}],[\"线程是不会主动释放偏向锁的\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"线程池被创建后如果没有任务过来\",{\"1\":{\"3014\":1,\"4239\":1}}],[\"线程池被创建后里面有线程吗\",{\"1\":{\"3013\":1,\"4238\":1}}],[\"线程池的7大参数以及具体用法\",{\"1\":{\"3058\":1,\"5309\":1}}],[\"线程池的线程数量不确定\",{\"1\":{\"2998\":1,\"4223\":1}}],[\"线程池的饱和策略有哪些\",{\"1\":{\"2971\":1,\"4196\":1}}],[\"线程池中若有空闲线程\",{\"1\":{\"2996\":1,\"4221\":1}}],[\"线程池中的线程数量大于\",{\"1\":{\"2965\":1,\"4190\":1}}],[\"线程池处理任务的流程了解吗\",{\"1\":{\"2984\":1,\"4209\":1}}],[\"线程池常用的阻塞队列有哪些\",{\"1\":{\"2978\":1,\"4203\":1}}],[\"线程池各个参数的关系\",{\"1\":{\"2970\":1,\"4195\":1}}],[\"线程池\",{\"0\":{\"2949\":1,\"4174\":1}}],[\"线程试图获取锁也就是获取\",{\"1\":{\"2919\":1,\"4144\":1}}],[\"线程对变量的所有操作都在工作内存中进行\",{\"1\":{\"2857\":1,\"4082\":1}}],[\"线程对象创建后\",{\"1\":{\"1021\":1,\"1189\":1,\"1357\":1,\"1525\":1,\"4403\":1}}],[\"线程工作内存保存了变量在主内存中的副本\",{\"1\":{\"2857\":1,\"4082\":1}}],[\"线程工作内存\",{\"1\":{\"2855\":1,\"4080\":1}}],[\"线程获取锁\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"线程1进行compare\",{\"1\":{\"2790\":1,\"4015\":1}}],[\"线程1重新获取内存地址\",{\"1\":{\"2788\":1,\"4013\":1}}],[\"线程1开始提交更新\",{\"1\":{\"2786\":1,\"4011\":1}}],[\"线程1想要把内存地址为\",{\"1\":{\"2782\":1,\"4007\":1}}],[\"线程2捷足先登了\",{\"1\":{\"2784\":1,\"4009\":1}}],[\"线程执行的时候不会加锁\",{\"1\":{\"2776\":1,\"4001\":1}}],[\"线程执行完了或者因异常退出了run\",{\"1\":{\"1025\":1,\"1193\":1,\"1361\":1,\"1529\":1,\"4407\":1}}],[\"线程开始执行第一步就是获取锁\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"线程会判断此时持有锁的线程是否就是自己\",{\"1\":{\"2757\":1,\"3982\":1}}],[\"线程并不会主动释放偏向锁\",{\"1\":{\"2757\":1,\"3982\":1}}],[\"线程并发执行的过程中\",{\"1\":{\"1035\":1,\"1203\":1,\"1371\":1,\"1539\":1,\"4417\":1}}],[\"线程的挂起和唤醒\",{\"1\":{\"2767\":1,\"3992\":1}}],[\"线程的自旋超过了一定次数\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"线程的互斥同步方式有哪些\",{\"0\":{\"2736\":1,\"3961\":1}}],[\"线程的方案\",{\"1\":{\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"4554\":1}}],[\"线程的方式不合适\",{\"1\":{\"1050\":1,\"1218\":1,\"1386\":1,\"1554\":1,\"4432\":1}}],[\"线程模式后面会详细介绍到\",{\"1\":{\"2587\":1,\"4920\":1}}],[\"线程接近交替运行\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"线程方案的示意图如下\",{\"1\":{\"1173\":1,\"1341\":1,\"1509\":1,\"1677\":1,\"4555\":1}}],[\"线程\",{\"0\":{\"1132\":1,\"1171\":1,\"1300\":1,\"1339\":1,\"1468\":1,\"1507\":1,\"1636\":1,\"1675\":1,\"4514\":1,\"4553\":1},\"1\":{\"1117\":2,\"1119\":1,\"1120\":1,\"1121\":1,\"1122\":1,\"1123\":2,\"1125\":1,\"1127\":1,\"1285\":2,\"1287\":1,\"1288\":1,\"1289\":1,\"1290\":1,\"1291\":2,\"1293\":1,\"1295\":1,\"1453\":2,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":2,\"1461\":1,\"1463\":1,\"1621\":2,\"1623\":1,\"1624\":1,\"1625\":1,\"1626\":1,\"1627\":2,\"1629\":1,\"1631\":1,\"2410\":1,\"2411\":1,\"2412\":1,\"2790\":1,\"4015\":1,\"4499\":2,\"4501\":1,\"4502\":1,\"4503\":1,\"4504\":1,\"4505\":2,\"4507\":1,\"4509\":1,\"4743\":1,\"4744\":1,\"4745\":1}}],[\"线程同步\",{\"1\":{\"1039\":1,\"1207\":1,\"1375\":1,\"1543\":1,\"4421\":1}}],[\"线程同步是两个或多个共享关键资源的线程的并发执行\",{\"1\":{\"1028\":1,\"1196\":1,\"1364\":1,\"1532\":1,\"4410\":1}}],[\"线程互斥\",{\"1\":{\"1039\":1,\"1207\":1,\"1375\":1,\"1543\":1,\"4421\":1}}],[\"线程间正确的协作\",{\"1\":{\"1036\":1,\"1204\":1,\"1372\":1,\"1540\":1,\"4418\":1}}],[\"线程之间存在协作的关系\",{\"1\":{\"1035\":1,\"1203\":1,\"1371\":1,\"1539\":1,\"4417\":1}}],[\"线程重新转入就绪状态\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"线程信息等\",{\"1\":{\"856\":1,\"3844\":1}}],[\"线程安全\",{\"1\":{\"674\":1,\"3662\":1}}],[\"环境变量\",{\"1\":{\"856\":1,\"3844\":1}}],[\"环境下无法执行\",{\"1\":{\"592\":1}}],[\"引用没有变实际上包含的变量已经被修改\",{\"1\":{\"2803\":1,\"4028\":1}}],[\"引擎的默认隔离级别虽然是\",{\"1\":{\"2523\":1,\"4856\":1}}],[\"引擎的默认隔离级别\",{\"1\":{\"2511\":1,\"4844\":1}}],[\"引擎的表里对某些纪录加上\",{\"1\":{\"2420\":1,\"4753\":1}}],[\"引擎的表里对某些记录加上\",{\"1\":{\"2419\":1,\"4752\":1}}],[\"引擎的表使用表锁\",{\"1\":{\"2398\":1,\"4731\":1}}],[\"引擎的表的\",{\"1\":{\"2309\":1,\"4642\":1}}],[\"引擎通过什么技术来保证事务的这四个特性的呢\",{\"1\":{\"2487\":1,\"4820\":1}}],[\"引擎就不支持事务\",{\"1\":{\"2481\":1,\"4814\":1}}],[\"引擎它是支持事务的\",{\"1\":{\"2480\":1,\"4813\":1}}],[\"引擎并不支持行级锁\",{\"1\":{\"2449\":1,\"4782\":1}}],[\"引擎表来说\",{\"1\":{\"2309\":1,\"4642\":1}}],[\"引擎支持全文索引\",{\"1\":{\"2305\":1,\"4638\":1}}],[\"引擎\",{\"1\":{\"2285\":1,\"2317\":1,\"4618\":1,\"4650\":1}}],[\"引擎中\",{\"1\":{\"2259\":1,\"2275\":1,\"2276\":1,\"4592\":1,\"4608\":1,\"4609\":1}}],[\"引擎都是使用\",{\"1\":{\"2258\":1,\"2274\":1,\"4591\":1,\"4607\":1}}],[\"引擎和\",{\"1\":{\"2258\":1,\"2274\":1,\"4591\":1,\"4607\":1}}],[\"引擎是支持行级锁的\",{\"1\":{\"2449\":1,\"4782\":1}}],[\"引擎是\",{\"1\":{\"2237\":1,\"4570\":1}}],[\"引入了\",{\"1\":{\"2184\":1,\"5237\":1}}],[\"引入了基于\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"引入依赖并编写好配置之后\",{\"1\":{\"855\":1,\"3843\":1}}],[\"引导大家对循环依赖有一个整体的认识\",{\"1\":{\"813\":1,\"3801\":1}}],[\"统计和http追踪\",{\"1\":{\"856\":1,\"3844\":1}}],[\"统计网站的访问量\",{\"1\":{\"849\":1,\"3837\":1}}],[\"统计在线人数和在线用户\",{\"1\":{\"849\":1,\"3837\":1}}],[\"常规数据\",{\"1\":{\"2601\":1,\"4934\":1}}],[\"常见优化手段\",{\"0\":{\"2555\":1,\"4888\":1}}],[\"常见\",{\"1\":{\"2179\":1,\"5232\":1}}],[\"常见的非对称加密算法有\",{\"1\":{\"3279\":1}}],[\"常见的对称加密算法有\",{\"1\":{\"3277\":1}}],[\"常见的导致索引失效的情况有下面这些\",{\"1\":{\"2354\":1,\"4687\":1}}],[\"常见的设计模式\",{\"0\":{\"664\":1,\"3652\":1}}],[\"常见的有以下这几个\",{\"1\":{\"299\":1,\"3576\":1}}],[\"常考\",{\"1\":{\"1969\":1}}],[\"常常简单的表述为\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"常用口令\",{\"1\":{\"3241\":1}}],[\"常用的方法就是加锁\",{\"1\":{\"2774\":1,\"3999\":1}}],[\"常用的过期数据的删除策略就两个\",{\"1\":{\"2670\":1,\"5003\":1}}],[\"常用的命令\",{\"0\":{\"997\":1,\"3909\":1}}],[\"常用的\",{\"1\":{\"859\":1,\"3847\":1}}],[\"常用于系统加载时进行信息初始化\",{\"1\":{\"849\":1,\"3837\":1}}],[\"服务不可用的情况\",{\"1\":{\"2723\":1,\"5056\":1}}],[\"服务对象\",{\"1\":{\"2056\":1}}],[\"服务端检查\",{\"1\":{\"3132\":1,\"5383\":1}}],[\"服务端会返回已经签名的\",{\"1\":{\"3130\":1,\"5381\":1}}],[\"服务端最大并发\",{\"1\":{\"2049\":1}}],[\"服务端通常固定在某个本地端口上监听\",{\"1\":{\"2045\":1}}],[\"服务端推送等技术\",{\"1\":{\"1895\":1,\"1910\":1,\"1951\":1,\"1966\":1,\"5157\":1}}],[\"服务监控\",{\"1\":{\"1760\":1,\"4320\":1}}],[\"服务降级\",{\"1\":{\"1757\":1,\"4317\":1}}],[\"服务隔离\",{\"1\":{\"1755\":1,\"1759\":1,\"4315\":1,\"4319\":1}}],[\"服务熔断\",{\"1\":{\"1743\":1,\"1755\":1,\"1758\":1,\"4303\":1,\"4315\":1,\"4318\":1}}],[\"服务保护\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"服务注册中心\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"服务拆分粒度更细\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"服务发现\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"服务部署\",{\"1\":{\"1732\":1,\"4292\":1}}],[\"服务划分\",{\"1\":{\"1731\":1,\"4291\":1}}],[\"服务与服务之间通过http协议或其他消息传递机制通信\",{\"1\":{\"1729\":1,\"4289\":1}}],[\"服务与服务之间完全独立\",{\"1\":{\"1724\":1,\"4284\":1}}],[\"服务与服务之间采用http网络通信协议来通信\",{\"1\":{\"1724\":1,\"4284\":1}}],[\"服务与服务之间没有任何耦合\",{\"1\":{\"1723\":1,\"4283\":1}}],[\"服务集中化管理\",{\"1\":{\"1719\":1,\"4279\":1}}],[\"服务之间通过http协议相互通信\",{\"1\":{\"1715\":1,\"4275\":1}}],[\"服务之间相互调用\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"服务器查询后将对应的\",{\"1\":{\"2219\":1,\"5272\":1}}],[\"服务器地址\",{\"1\":{\"2213\":1,\"5266\":1}}],[\"服务器了\",{\"1\":{\"2210\":1,\"5263\":1}}],[\"服务器就都可以找到并访问根域\",{\"1\":{\"2210\":1,\"5263\":1}}],[\"服务器中\",{\"1\":{\"2209\":1,\"5262\":1}}],[\"服务器信息保存在互联网中所有的\",{\"1\":{\"2209\":1,\"5262\":1}}],[\"服务器推送\",{\"1\":{\"2189\":1,\"5242\":1}}],[\"服务器处理请求并返回\",{\"1\":{\"2135\":1,\"2228\":1,\"5188\":1}}],[\"服务器出现大量\",{\"1\":{\"2001\":1,\"2002\":1}}],[\"服务器出现网络中断\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"服务器在负责进行消息广播\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"服务器的地址\",{\"1\":{\"2217\":1,\"5270\":1}}],[\"服务器的状态同步\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"服务器的数据状态保持一致\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"服务器完成了和\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"服务器完成了状态同步之后\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"服务器\",{\"1\":{\"1782\":2,\"2206\":1,\"2207\":1,\"2208\":1,\"2211\":3,\"2213\":1,\"2218\":2,\"4342\":2,\"5259\":1,\"5260\":1,\"5261\":1,\"5264\":3,\"5266\":1,\"5271\":2}}],[\"服务器端不断地从\",{\"1\":{\"1066\":1,\"1234\":1,\"1402\":1,\"1570\":1,\"4448\":1}}],[\"服务器端只会从\",{\"1\":{\"1065\":1,\"1233\":1,\"1401\":1,\"1569\":1,\"4447\":1}}],[\"服务器自动调用监听器对象中的方法\",{\"1\":{\"849\":1,\"3837\":1}}],[\"服务于java的collection框架\",{\"1\":{\"331\":1}}],[\"销毁\",{\"1\":{\"849\":1,\"3837\":1}}],[\"监控等一些防止雪崩的技术\",{\"1\":{\"1755\":1,\"4315\":1}}],[\"监控连接建立事件\",{\"1\":{\"1176\":1,\"1344\":1,\"1512\":1,\"1680\":1,\"4558\":1}}],[\"监控器\",{\"0\":{\"853\":1,\"3841\":1}}],[\"监听事件\",{\"1\":{\"1143\":1,\"1158\":1,\"1311\":1,\"1326\":1,\"1479\":1,\"1494\":1,\"1647\":1,\"1662\":1,\"4525\":1,\"4540\":1}}],[\"监听器也叫listener\",{\"1\":{\"849\":1,\"3837\":1}}],[\"监听器\",{\"0\":{\"848\":1,\"3836\":1}}],[\"监视器和监听器\",{\"0\":{\"847\":1,\"3835\":1}}],[\"嵌入式tomcat\",{\"1\":{\"845\":1,\"3833\":1}}],[\"工作基本流程\",{\"1\":{\"2666\":1,\"4999\":1}}],[\"工作基本流程是怎样的\",{\"0\":{\"2654\":1,\"4987\":1}}],[\"工作流程图如下\",{\"1\":{\"2665\":1,\"4998\":1}}],[\"工作在哪一层\",{\"0\":{\"2022\":1},\"1\":{\"1973\":1}}],[\"工程师修炼之道\",{\"1\":{\"2274\":1,\"4607\":1}}],[\"工程任务组开发的路由选择协议\",{\"1\":{\"2130\":1,\"2223\":1,\"5183\":1}}],[\"工具来实现\",{\"1\":{\"845\":1,\"3833\":1}}],[\"工厂设计模式\",{\"1\":{\"746\":1,\"3734\":1}}],[\"工厂类可以应对各种新增的类\",{\"1\":{\"325\":1,\"3602\":1}}],[\"工厂模式\",{\"0\":{\"3663\":1},\"1\":{\"325\":1,\"3602\":1}}],[\"例子\",{\"1\":{\"834\":1,\"3822\":1}}],[\"例如获取同步状态\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"例如自旋锁等\",{\"1\":{\"2739\":1,\"3964\":1}}],[\"例如学生成绩的排名榜\",{\"1\":{\"2634\":1,\"4967\":1}}],[\"例如系统配置\",{\"1\":{\"1876\":1,\"3953\":1}}],[\"例如分布式事务\",{\"1\":{\"1872\":1,\"3949\":1}}],[\"例如搭建和配置开发环境\",{\"1\":{\"1693\":1,\"4253\":1}}],[\"例如有互斥\",{\"1\":{\"1035\":1,\"1203\":1,\"1371\":1,\"1539\":1,\"4417\":1}}],[\"例如事务处理\",{\"1\":{\"722\":1,\"3710\":1}}],[\"例如\",{\"1\":{\"711\":1,\"774\":1,\"1130\":1,\"1165\":1,\"1298\":1,\"1333\":1,\"1466\":1,\"1501\":1,\"1634\":1,\"1669\":1,\"1739\":1,\"3168\":1,\"3699\":1,\"3762\":1,\"4299\":1,\"4512\":1,\"4547\":1,\"5419\":1}}],[\"例如java\",{\"1\":{\"298\":1,\"3575\":1}}],[\"级别的异常\",{\"1\":{\"833\":1,\"3821\":1}}],[\"项目中常用技术一\",{\"0\":{\"3211\":1}}],[\"项目中任何需要延迟队列的地方\",{\"1\":{\"3176\":1,\"5427\":1}}],[\"项目中的技术栈\",{\"1\":{\"3035\":1,\"5286\":1}}],[\"项目重难点\",{\"1\":{\"3097\":1,\"5348\":1}}],[\"项目类似于今日头条\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"项目背景\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"项目\",{\"0\":{\"3094\":1,\"5345\":1,\"5487\":1}}],[\"项目拷打环节\",{\"1\":{\"3062\":1,\"5313\":1}}],[\"项目启动后扫描顺序\",{\"1\":{\"827\":1,\"3815\":1}}],[\"项目主页\",{\"0\":{\"151\":1}}],[\"项目主页配置\",{\"1\":{\"150\":1,\"154\":1,\"3438\":1}}],[\"步\",{\"1\":{\"817\":1,\"819\":1,\"821\":1,\"2655\":1,\"3805\":1,\"3807\":1,\"3809\":1,\"4988\":1}}],[\"步描述\",{\"1\":{\"732\":1,\"3720\":1}}],[\"回到\",{\"1\":{\"2796\":1,\"4021\":1}}],[\"回表\",{\"1\":{\"2323\":1,\"2325\":1,\"4656\":1,\"4658\":1}}],[\"回顾同一子网内的\",{\"1\":{\"2166\":1,\"5219\":1}}],[\"回顾\",{\"0\":{\"1892\":1,\"1907\":1,\"1922\":1,\"1935\":1,\"1948\":1,\"1963\":1,\"5154\":1,\"5177\":1}}],[\"回顾本文基本以实际操作的例子开始\",{\"1\":{\"813\":1,\"3801\":1}}],[\"回滚指针\",{\"1\":{\"2535\":1,\"4868\":1}}],[\"回滚日志\",{\"1\":{\"2489\":1,\"4822\":1}}],[\"回滚操作或者重新发送消息\",{\"1\":{\"1855\":1,\"3932\":1}}],[\"回滚规则\",{\"1\":{\"763\":1,\"3751\":1}}],[\"总共\",{\"1\":{\"2484\":3,\"4817\":3}}],[\"总是需要知道下一跳\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"总是能路由到固定的分区\",{\"1\":{\"940\":1,\"5087\":1}}],[\"总体来说分为以下几个过程\",{\"1\":{\"2131\":1,\"2224\":1,\"5184\":1}}],[\"总体来看\",{\"1\":{\"1106\":1,\"1274\":1,\"1442\":1,\"1610\":1,\"4488\":1}}],[\"总不能数据只在\",{\"1\":{\"1793\":1,\"4353\":1}}],[\"总结了下面的几点\",{\"1\":{\"5164\":1}}],[\"总结的来说\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"总结来说就是\",{\"1\":{\"2700\":1,\"5033\":1}}],[\"总结来说\",{\"1\":{\"2163\":1,\"5216\":1}}],[\"总结一句话\",{\"1\":{\"2026\":1}}],[\"总结一下\",{\"1\":{\"882\":1,\"3870\":1}}],[\"总结\",{\"0\":{\"909\":1,\"2815\":1,\"2849\":1,\"2929\":1,\"3897\":1,\"4040\":1,\"4074\":1,\"4154\":1},\"1\":{\"812\":1,\"2088\":1,\"2792\":1,\"3800\":1,\"4017\":1}}],[\"总之\",{\"1\":{\"658\":1,\"1874\":1,\"3646\":1,\"3951\":1}}],[\"总之它在你面前就没有隐私了\",{\"1\":{\"308\":1,\"3585\":1}}],[\"表明锁被释放\",{\"1\":{\"2923\":1,\"4148\":1}}],[\"表明有事务想在某个区间插入新记录\",{\"1\":{\"2475\":1,\"4808\":1}}],[\"表必须有个主键\",{\"0\":{\"2574\":1,\"4907\":1}}],[\"表里的主键通常都会设置成自增的\",{\"1\":{\"2431\":1,\"4764\":1}}],[\"表级别的独占锁\",{\"1\":{\"2392\":1,\"4725\":1}}],[\"表级别的共享锁\",{\"1\":{\"2392\":1,\"4725\":1}}],[\"表级锁\",{\"0\":{\"2383\":1,\"4716\":1}}],[\"表级锁和行锁三类\",{\"1\":{\"2362\":1,\"4695\":1}}],[\"表锁和行锁是满足读读共享\",{\"1\":{\"2426\":1,\"4759\":1}}],[\"表锁除了会限制别的线程的读写外\",{\"1\":{\"2393\":1,\"4726\":1}}],[\"表锁\",{\"0\":{\"2389\":1,\"4722\":1},\"1\":{\"2385\":1,\"4718\":1}}],[\"表数据文件本身就是主索引\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"表时\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"表中有一个范围\",{\"1\":{\"2465\":1,\"4798\":1}}],[\"表中只有一个\",{\"1\":{\"2287\":1,\"4620\":1}}],[\"表中\",{\"1\":{\"2162\":1,\"5215\":1}}],[\"表中构造一条主机\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"表中并无主机\",{\"1\":{\"2156\":1,\"5209\":1}}],[\"表记录了某些其他网络设备的\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"表\",{\"1\":{\"2147\":1,\"2148\":1,\"2156\":1,\"2165\":2,\"2167\":1,\"2173\":1,\"2263\":1,\"4596\":1,\"5200\":1,\"5201\":1,\"5209\":1,\"5218\":2,\"5220\":1,\"5226\":1}}],[\"表达式\",{\"1\":{\"809\":1,\"3797\":1}}],[\"表示审核成功存储到数据库\",{\"1\":{\"3066\":1,\"5317\":1}}],[\"表示成功\",{\"1\":{\"2847\":1,\"4072\":1}}],[\"表示最后一次插入或更新该行的事务\",{\"1\":{\"2534\":1,\"4867\":1}}],[\"表示今后不会再有数据发送\",{\"1\":{\"2021\":1}}],[\"表示希望建立连接\",{\"1\":{\"2020\":1}}],[\"表示\",{\"1\":{\"2019\":1,\"3115\":1,\"5366\":1}}],[\"表示hashmap满的程度\",{\"1\":{\"421\":1}}],[\"表示运行应用程序中出现了严重的错误\",{\"1\":{\"239\":1,\"3524\":1}}],[\"依次发生如下事件\",{\"1\":{\"2155\":1,\"5208\":1}}],[\"依赖于有序的数据\",{\"1\":{\"2314\":1,\"2322\":1,\"4647\":1,\"4655\":1}}],[\"依赖的可能是别的不提供自身报文长度或首部长度的网络层协议\",{\"1\":{\"2086\":1}}],[\"依赖隔离\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"依赖有源码例子\",{\"1\":{\"811\":1,\"3799\":1}}],[\"依赖了\",{\"1\":{\"809\":1,\"3797\":1}}],[\"依然是\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"依然不完美\",{\"1\":{\"617\":1}}],[\"依然有我们不需要的方法啊\",{\"1\":{\"616\":1}}],[\"继续进行监听\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4559\":1}}],[\"继续创建\",{\"1\":{\"806\":1,\"3794\":1}}],[\"继承\",{\"1\":{\"2746\":1,\"2909\":1,\"3971\":1,\"4134\":1}}],[\"继承自spring\",{\"1\":{\"866\":1,\"3854\":1}}],[\"继承关系把父类的所有方法都拿过来的问题\",{\"1\":{\"606\":1}}],[\"继承关系描述的是\",{\"1\":{\"577\":1}}],[\"继承使得子类继承了父类的所有公有方法\",{\"1\":{\"570\":1}}],[\"继承了\",{\"1\":{\"568\":1,\"571\":1,\"608\":1}}],[\"整体的吞吐效率会高点\",{\"1\":{\"2907\":1,\"4132\":1}}],[\"整体来说\",{\"1\":{\"588\":1}}],[\"整个数据库就处于只读状态了\",{\"1\":{\"2367\":1,\"4700\":1}}],[\"整个过程按照时间顺序发生的事件如下\",{\"1\":{\"2166\":1,\"5219\":1}}],[\"整个网络就分成了几块区域\",{\"1\":{\"1829\":1,\"4389\":1}}],[\"整个服务器就从\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"整个进程是无法处理其他连接的事件的\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4532\":1}}],[\"整个解决循环依赖的核心内容\",{\"1\":{\"795\":1,\"3783\":1}}],[\"往往更利于对问题有更深入的了解和研究\",{\"1\":{\"786\":1,\"3774\":1}}],[\"幻读\",{\"0\":{\"2501\":1,\"4834\":1},\"1\":{\"2502\":1,\"4835\":1}}],[\"幻读或不可重复读\",{\"1\":{\"769\":1,\"3757\":1}}],[\"幻灯片页\",{\"0\":{\"155\":1}}],[\"幻灯片\",{\"0\":{\"109\":1,\"3397\":1}}],[\"允许创建的线程数量为\",{\"1\":{\"3007\":1,\"4232\":1}}],[\"允许多个线程持有锁\",{\"1\":{\"2826\":1,\"4051\":1}}],[\"允许多个线程同时读取共享资源\",{\"1\":{\"1031\":1,\"1199\":1,\"1367\":1,\"1535\":1,\"4413\":1}}],[\"允许在第一次连接时发送数据\",{\"1\":{\"2192\":1,\"5245\":1}}],[\"允许在同一\",{\"1\":{\"2184\":1,\"5237\":1}}],[\"允许读取并发事务已经提交的数据\",{\"1\":{\"770\":1,\"3758\":1}}],[\"允许读取尚未提交的数据变更\",{\"1\":{\"769\":1,\"3757\":1}}],[\"允许我们在运行时对字节码进行修改和动态生成\",{\"1\":{\"711\":1,\"3699\":1}}],[\"超出阈值时\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"超过该时间\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"超过半数\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"超过临界值\",{\"1\":{\"419\":1}}],[\"超时\",{\"1\":{\"763\":1,\"2744\":1,\"3751\":1,\"3969\":1}}],[\"平衡\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"平衡的二叉树\",{\"1\":{\"643\":1,\"3631\":1}}],[\"平台\",{\"1\":{\"762\":1,\"3750\":1}}],[\"谈谈你对\",{\"0\":{\"754\":1,\"3742\":1}}],[\"适合使用自旋锁\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"适于互联网时代\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"适配器模式\",{\"1\":{\"752\":1,\"3740\":1}}],[\"适⽤于⼯⼚类负责创建对象较少的情况\",{\"1\":{\"678\":1,\"3666\":1}}],[\"事实上\",{\"1\":{\"1108\":1,\"1168\":1,\"1276\":1,\"1336\":1,\"1444\":1,\"1504\":1,\"1612\":1,\"1672\":1,\"4490\":1,\"4550\":1}}],[\"事件类型包含连接事件\",{\"1\":{\"1113\":1,\"1281\":1,\"1449\":1,\"1617\":1,\"4495\":1}}],[\"事件发生时只会通知一次\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"事件\",{\"1\":{\"1034\":1,\"1202\":1,\"1370\":1,\"1538\":1,\"4416\":1}}],[\"事件驱动模型就是观察者模式很经典的一个应用\",{\"1\":{\"751\":1,\"3739\":1}}],[\"事务执行过程中看到的数据\",{\"1\":{\"2524\":1,\"4857\":1}}],[\"事务\",{\"1\":{\"2495\":1,\"2500\":1,\"2504\":1,\"2505\":1,\"2538\":1,\"4828\":1,\"4833\":1,\"4837\":1,\"4838\":1,\"4871\":1}}],[\"事务处理结束后\",{\"1\":{\"2486\":1,\"4819\":1}}],[\"事务看起来感觉简单\",{\"1\":{\"2482\":1,\"4815\":1}}],[\"事务的能力\",{\"1\":{\"2246\":1,\"4579\":1}}],[\"事务的原子性确保动作要么全部完成\",{\"1\":{\"757\":1,\"3745\":1}}],[\"事务传播行为是为了解决业务层方法之间互相调用的事务问题\",{\"1\":{\"774\":1,\"3762\":1}}],[\"事务运行状态\",{\"1\":{\"764\":1,\"3752\":1}}],[\"事务隔离级别\",{\"1\":{\"763\":1,\"3751\":1}}],[\"事务定义信息\",{\"1\":{\"763\":1,\"3751\":1}}],[\"事务管理器\",{\"1\":{\"762\":1,\"3750\":1}}],[\"事务管理接口\",{\"1\":{\"761\":1,\"3749\":1}}],[\"事务是由\",{\"1\":{\"2480\":1,\"4813\":1}}],[\"事务是最小的执行单位\",{\"1\":{\"757\":1,\"3745\":1}}],[\"事务是逻辑上的一组操作\",{\"1\":{\"755\":1,\"3743\":1}}],[\"事务特性\",{\"1\":{\"756\":1,\"3744\":1}}],[\"事情可能就不一样了\",{\"1\":{\"583\":1}}],[\"执行本次操作\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"执行结束后在同步到主内存中去\",{\"1\":{\"2857\":1,\"4082\":1}}],[\"执行完同步代码块后\",{\"1\":{\"2757\":1,\"3982\":1}}],[\"执行完成后\",{\"1\":{\"741\":1,\"3729\":1}}],[\"执行删除过期\",{\"1\":{\"2672\":1,\"5005\":1}}],[\"执行后\",{\"1\":{\"2367\":1,\"4700\":1}}],[\"执行业务逻辑成功\",{\"1\":{\"1856\":1,\"3933\":1}}],[\"执行最终状态\",{\"1\":{\"1855\":1,\"3932\":1}}],[\"执行程序代码\",{\"1\":{\"1022\":1,\"1190\":1,\"1358\":1,\"1526\":1,\"4404\":1}}],[\"执行\",{\"1\":{\"898\":1,\"912\":1,\"1700\":1,\"3886\":1,\"3900\":1,\"4260\":1}}],[\"执行打包操作的配置\",{\"1\":{\"867\":1,\"3855\":1}}],[\"执行事务前后\",{\"1\":{\"758\":1,\"3746\":1}}],[\"执行引擎\",{\"1\":{\"178\":1,\"3461\":1}}],[\"格式等\",{\"1\":{\"740\":1,\"3728\":1}}],[\"长度\",{\"1\":{\"740\":1,\"3728\":1}}],[\"开头的\",{\"1\":{\"2358\":1,\"4691\":1}}],[\"开放最短路径优先协议\",{\"1\":{\"2130\":1,\"2223\":1,\"5183\":1}}],[\"开销较小\",{\"1\":{\"2067\":1}}],[\"开启\",{\"1\":{\"2651\":1,\"4984\":1}}],[\"开启kafka本身存在的幂等性\",{\"1\":{\"977\":1,\"5124\":1}}],[\"开启二级缓存后\",{\"1\":{\"905\":1,\"3893\":1}}],[\"开发了基于\",{\"1\":{\"5162\":1}}],[\"开发技术\",{\"1\":{\"3095\":1,\"5346\":1}}],[\"开发手册\",{\"1\":{\"2250\":1,\"3001\":1,\"3004\":1,\"4226\":1,\"4229\":1,\"4583\":1}}],[\"开发者要选出最佳的通信机制\",{\"1\":{\"1729\":1,\"4289\":1}}],[\"开发者可以选择合适的数据结构来定义\",{\"1\":{\"604\":1}}],[\"开发人员\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"开发人员可以重新加载\",{\"1\":{\"845\":1,\"3833\":1}}],[\"开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器\",{\"1\":{\"845\":1,\"3833\":1}}],[\"开始审核文章\",{\"1\":{\"3157\":1,\"5408\":1}}],[\"开始技术面试了\",{\"1\":{\"3076\":1,\"5327\":1}}],[\"开始提供了atomicreference\",{\"1\":{\"2814\":1,\"4039\":1}}],[\"开始提供了atomicstampedreference类\",{\"1\":{\"2807\":1,\"4032\":1}}],[\"开始填充时发现依赖于\",{\"1\":{\"795\":1,\"3783\":1}}],[\"开始执行handler\",{\"1\":{\"736\":1,\"3724\":1}}],[\"入参\",{\"1\":{\"736\":1,\"3724\":1}}],[\"入队和出队\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"入队\",{\"1\":{\"358\":1}}],[\"填充\",{\"1\":{\"736\":1,\"3724\":1}}],[\"附注\",{\"1\":{\"735\":1,\"3723\":1}}],[\"获得该\",{\"1\":{\"734\":1,\"3722\":1}}],[\"获取class对象\",{\"0\":{\"3578\":1}}],[\"获取当前请求的线程\",{\"1\":{\"2944\":1,\"4169\":1}}],[\"获取后将锁计数器设为\",{\"1\":{\"2922\":1,\"4147\":1}}],[\"获取不到\",{\"1\":{\"2906\":1,\"4131\":1}}],[\"获取锁\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"获取锁的操作\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"获取字符串长度的时间复杂度是\",{\"1\":{\"2598\":1,\"4931\":1}}],[\"获取到当前线程对象后\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"获取到主机\",{\"1\":{\"2174\":1,\"5227\":1}}],[\"获取到目标接口的\",{\"1\":{\"2170\":1,\"5223\":1}}],[\"获取连接\",{\"1\":{\"1144\":1,\"1159\":1,\"1176\":1,\"1312\":1,\"1327\":1,\"1344\":1,\"1480\":1,\"1495\":1,\"1512\":1,\"1648\":1,\"1663\":1,\"1680\":1,\"4526\":1,\"4541\":1,\"4558\":1}}],[\"获取一个自增的计数\",{\"1\":{\"940\":1,\"5087\":1}}],[\"获取需要自动装配的所有配置类\",{\"1\":{\"821\":1,\"3809\":1}}],[\"获取所有方法\",{\"1\":{\"321\":1,\"3598\":1}}],[\"获取类的所有信息\",{\"0\":{\"3594\":1}}],[\"获取类的构造器\",{\"1\":{\"322\":1,\"3599\":1}}],[\"获取类中被public修饰的所有方法\",{\"1\":{\"321\":1,\"3598\":1}}],[\"获取类中的方法\",{\"1\":{\"320\":1,\"3597\":1}}],[\"获取类中的变量\",{\"1\":{\"318\":1,\"3595\":1}}],[\"获取类中所有构造器\",{\"1\":{\"323\":1,\"3600\":1}}],[\"获取类中所有被public修饰的构造器\",{\"1\":{\"323\":1,\"3600\":1}}],[\"获取类中所有被public修饰的所有变量\",{\"1\":{\"319\":1,\"3596\":1}}],[\"获取类中所有的变量\",{\"1\":{\"319\":1,\"3596\":1}}],[\"获取类信息\",{\"1\":{\"308\":1,\"3585\":1}}],[\"获取属性\",{\"1\":{\"308\":1,\"3585\":1}}],[\"捕获\",{\"1\":{\"733\":1,\"3721\":1}}],[\"渲染数据\",{\"1\":{\"730\":1,\"3718\":1}}],[\"视频播放排名\",{\"1\":{\"2634\":1,\"4967\":1}}],[\"视频\",{\"1\":{\"2080\":1,\"2597\":1,\"4930\":1}}],[\"视图解析器进行解析\",{\"1\":{\"730\":1,\"3718\":1}}],[\"视情况而定\",{\"1\":{\"643\":1,\"3631\":1}}],[\"处理完后\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4545\":1}}],[\"处理资源池可以是单个进程\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4499\":1}}],[\"处理资源池负责处理事件\",{\"1\":{\"1114\":1,\"1282\":1,\"1450\":1,\"1618\":1,\"4496\":1}}],[\"处理可控异常\",{\"1\":{\"836\":1,\"3824\":1}}],[\"处理不可控异常\",{\"1\":{\"836\":1,\"3824\":1}}],[\"处理\",{\"1\":{\"833\":1,\"2091\":1,\"2184\":1,\"3821\":1,\"5237\":1}}],[\"处理全局异常\",{\"1\":{\"832\":1,\"3820\":1}}],[\"处理器返回一个模型视图\",{\"1\":{\"730\":1,\"3718\":1}}],[\"处理异常的小例子\",{\"1\":{\"271\":1,\"3548\":1}}],[\"客户端在注册或登录的时候\",{\"1\":{\"3226\":1,\"3232\":1}}],[\"客户端b执行代码完成\",{\"1\":{\"3201\":1,\"5452\":1}}],[\"客户端b在等待一段时间后再去请求设置key的值\",{\"1\":{\"3200\":1,\"5451\":1}}],[\"客户端b也去请求服务器设置key的值\",{\"1\":{\"3198\":1,\"5449\":1}}],[\"客户端a执行代码完成\",{\"1\":{\"3199\":1,\"5450\":1}}],[\"客户端a请求服务器设置key的值\",{\"1\":{\"3197\":1,\"5448\":1}}],[\"客户端和目标建立连接\",{\"1\":{\"2220\":1,\"5273\":1}}],[\"客户端和服务器端都无法验证对方的身份\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"客户端首先会发出一个\",{\"1\":{\"2213\":1,\"5266\":1}}],[\"客户端只要能够找到任意一台\",{\"1\":{\"2211\":1,\"5264\":1}}],[\"客户端的端口数最多为\",{\"1\":{\"2048\":1}}],[\"客户端的\",{\"1\":{\"2048\":1}}],[\"客户端\",{\"1\":{\"2046\":1}}],[\"客户端调用\",{\"1\":{\"2009\":1}}],[\"客户端容错保护\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"客户端负载均衡\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"客户端发送请求\",{\"1\":{\"730\":1,\"3718\":1}}],[\"客户端不需要关注创建逻辑\",{\"1\":{\"677\":1,\"3665\":1}}],[\"容易计算\",{\"1\":{\"3219\":1}}],[\"容易成为性能的瓶颈的地方\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"4552\":1}}],[\"容错\",{\"1\":{\"1741\":1,\"4301\":1}}],[\"容器运行资源或执行用户指令等操作时\",{\"1\":{\"1703\":1,\"4263\":1}}],[\"容器还可以进行版本管理\",{\"1\":{\"1694\":1,\"4254\":1}}],[\"容器中的\",{\"1\":{\"742\":1,\"3730\":1}}],[\"容器\",{\"1\":{\"727\":1,\"3715\":1}}],[\"容量为\",{\"1\":{\"2981\":1,\"4206\":1}}],[\"容量\",{\"1\":{\"402\":1}}],[\"反过来也成立\",{\"1\":{\"3277\":1}}],[\"反问环节\",{\"1\":{\"3067\":1,\"5318\":1}}],[\"反问\",{\"1\":{\"3053\":1,\"5304\":1}}],[\"反之\",{\"1\":{\"2406\":1,\"4739\":1}}],[\"反而被经常修改\",{\"1\":{\"2342\":1,\"4675\":1}}],[\"反序列化的技术克隆一份新的数据给你\",{\"1\":{\"905\":1,\"3893\":1}}],[\"反转\",{\"1\":{\"727\":1,\"3715\":1}}],[\"反射可以使得程序更加健壮\",{\"1\":{\"325\":1,\"3602\":1}}],[\"反射\",{\"0\":{\"3558\":1},\"1\":{\"325\":1,\"3602\":1}}],[\"反射的应用场景\",{\"1\":{\"324\":1,\"3601\":1}}],[\"反射是java的一种机制\",{\"1\":{\"294\":1,\"3571\":1}}],[\"控制分布式系统有序的去对共享资源进行操作\",{\"1\":{\"3193\":1,\"5444\":1}}],[\"控制位\",{\"1\":{\"2017\":1}}],[\"控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里\",{\"1\":{\"1101\":1,\"1269\":1,\"1437\":1,\"1605\":1,\"4483\":1}}],[\"控制器增强类\",{\"1\":{\"836\":1,\"3824\":1}}],[\"控制权交给外部环境\",{\"1\":{\"727\":1,\"3715\":1}}],[\"控制\",{\"1\":{\"726\":1,\"3714\":1}}],[\"交出给其它线程使用\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"交互\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"交互演示\",{\"0\":{\"105\":1,\"107\":1,\"3393\":1,\"3395\":1}}],[\"交由\",{\"1\":{\"724\":1,\"2624\":1,\"2632\":1,\"3712\":1,\"4957\":1,\"4965\":1}}],[\"去创建\",{\"1\":{\"3004\":1,\"4229\":1}}],[\"去创建代理对象\",{\"1\":{\"723\":1,\"3711\":1}}],[\"去resources下找配置文件\",{\"1\":{\"828\":1,\"3816\":1}}],[\"去resources下找cofnig文件夹下找配置文件\",{\"1\":{\"828\":1,\"3816\":1}}],[\"去进行代理了\",{\"1\":{\"723\":1,\"3711\":1}}],[\"去执行\",{\"1\":{\"180\":1,\"3463\":1}}],[\"四大隔离级别\",{\"0\":{\"2507\":1,\"4840\":1}}],[\"四大组件分别是\",{\"1\":{\"871\":1,\"3859\":1}}],[\"四层模型\",{\"0\":{\"2140\":1,\"2232\":1,\"5193\":1}}],[\"四元组包括如下\",{\"1\":{\"2038\":1}}],[\"四元组可以唯一的确定一个连接\",{\"1\":{\"2038\":1}}],[\"四次挥手过程是怎样的\",{\"0\":{\"2106\":1},\"1\":{\"1991\":1}}],[\"四次\",{\"0\":{\"2097\":1},\"1\":{\"1982\":1}}],[\"四\",{\"0\":{\"720\":1,\"3222\":1,\"3708\":1}}],[\"框架的工具类\",{\"1\":{\"2994\":1,\"4219\":1}}],[\"框架来管理\",{\"1\":{\"724\":1,\"3712\":1}}],[\"框架\",{\"0\":{\"719\":1,\"3707\":1},\"1\":{\"727\":1,\"3715\":1}}],[\"框架应该是两个不得不提的\",{\"1\":{\"698\":1,\"3686\":1}}],[\"随着网络技术的发展\",{\"1\":{\"5162\":1}}],[\"随着人们对加密强度需求的不断提高\",{\"1\":{\"3274\":1}}],[\"随着任务量的增大\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"随着\",{\"1\":{\"718\":1,\"2659\":1,\"3706\":1,\"4992\":1}}],[\"被拒绝的任务\",{\"1\":{\"2974\":1,\"4199\":1}}],[\"被\",{\"1\":{\"2435\":1,\"4768\":1}}],[\"被频繁更新的字段应该慎重建立索引\",{\"1\":{\"2341\":1,\"4674\":1}}],[\"被频繁查询的字段\",{\"1\":{\"2337\":1,\"4670\":1}}],[\"被经常频繁用于连接的字段\",{\"1\":{\"2340\":1,\"4673\":1}}],[\"被作为\",{\"1\":{\"2338\":1,\"4671\":1}}],[\"被作为条件查询的字段\",{\"1\":{\"2338\":1,\"4671\":1}}],[\"被称为解决\",{\"1\":{\"1060\":1,\"1228\":1,\"1396\":1,\"1564\":1,\"4442\":1}}],[\"被拦截的方法\",{\"1\":{\"714\":1,\"3702\":1}}],[\"被代理的对象\",{\"1\":{\"714\":1,\"3702\":1}}],[\"被代理类实现的一些接口\",{\"1\":{\"704\":1,\"3692\":1}}],[\"模式设计开发了一套高效的事件处理模型\",{\"1\":{\"2587\":1,\"4920\":1}}],[\"模式\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"模式的架构\",{\"1\":{\"1696\":1,\"4256\":1}}],[\"模式是灵活多变的\",{\"1\":{\"1115\":1,\"1283\":1,\"1451\":1,\"1619\":1,\"4497\":1}}],[\"模式主要由\",{\"1\":{\"1112\":1,\"1280\":1,\"1448\":1,\"1616\":1,\"4494\":1}}],[\"模块的报文根据\",{\"1\":{\"2091\":1}}],[\"模块各司其职\",{\"1\":{\"1696\":1,\"4256\":1}}],[\"模块完全满足开发人员的需求\",{\"1\":{\"845\":1,\"3833\":1}}],[\"模块\",{\"1\":{\"845\":1,\"3833\":1}}],[\"模块中\",{\"1\":{\"711\":1,\"3699\":1}}],[\"模板编写为freemarker\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"模板方法模式\",{\"1\":{\"749\":1,\"3737\":1}}],[\"模板\",{\"1\":{\"669\":1,\"3045\":1,\"3657\":1,\"5296\":1}}],[\"学会了动态代理之后\",{\"1\":{\"699\":1,\"3687\":1}}],[\"学习过程中\",{\"1\":{\"576\":1}}],[\"角度来说\",{\"1\":{\"697\":1,\"3685\":1}}],[\"层组装完数据\",{\"1\":{\"2073\":1}}],[\"层进行分片\",{\"1\":{\"2073\":1}}],[\"层是\",{\"1\":{\"2023\":1}}],[\"层还需要\",{\"0\":{\"2100\":1},\"1\":{\"1985\":1}}],[\"层会分片\",{\"0\":{\"2100\":1},\"1\":{\"1985\":1}}],[\"层面来说\",{\"1\":{\"694\":1,\"3682\":1}}],[\"层⾯\",{\"1\":{\"691\":1,\"3679\":1}}],[\"目前出现过的最大的事务\",{\"1\":{\"2540\":1,\"4873\":1}}],[\"目前只有\",{\"1\":{\"2282\":1,\"2292\":1,\"4615\":1,\"4625\":1}}],[\"目前大部分数据库系统及文件系统都采用\",{\"1\":{\"2269\":1,\"4602\":1}}],[\"目标接口接收到了主机\",{\"1\":{\"2171\":1,\"5224\":1}}],[\"目标路由器指的是\",{\"1\":{\"2168\":1,\"5221\":1}}],[\"目标\",{\"1\":{\"2161\":1,\"2175\":1,\"5214\":1,\"5228\":1}}],[\"目标主机收到后\",{\"1\":{\"2072\":1,\"2073\":1}}],[\"目标对象和代理对象都要进行修改\",{\"1\":{\"693\":1,\"3681\":1}}],[\"目的就是尽量使得明文密码的复杂度增加一些\",{\"1\":{\"3239\":1}}],[\"目的\",{\"1\":{\"2170\":2,\"5223\":2}}],[\"目的端口\",{\"1\":{\"2042\":1}}],[\"目的地址\",{\"1\":{\"2041\":1}}],[\"目的是保证对于提交的任务\",{\"1\":{\"2982\":1,\"4207\":1}}],[\"目的是为了解决可重复读隔离级别下幻读的现象\",{\"1\":{\"2464\":1,\"4797\":1}}],[\"目的是告诉我们有数据需要读取\",{\"1\":{\"1066\":1,\"1234\":1,\"1402\":1,\"1570\":1,\"4448\":1}}],[\"目的是在执行一次新的分配时\",{\"1\":{\"963\":1,\"5110\":1}}],[\"目录树由根目录\",{\"1\":{\"1002\":1,\"3914\":1}}],[\"目录结构\",{\"0\":{\"1001\":1,\"3913\":1}}],[\"目录下的\",{\"1\":{\"207\":1,\"3490\":1}}],[\"目录\",{\"0\":{\"2\":1,\"3290\":1}}],[\"⽽动态代理是在运⾏时动态⽣成类字节码\",{\"1\":{\"691\":1,\"3679\":1}}],[\"⽽是直接返回这个实例\",{\"1\":{\"674\":1,\"3662\":1}}],[\"⽂件\",{\"1\":{\"691\":1,\"3679\":1}}],[\"静态代理\",{\"0\":{\"3680\":1}}],[\"静态代理和动态代理的区别\",{\"0\":{\"3677\":1}}],[\"静态代理在编译时就将接口\",{\"1\":{\"694\":1,\"3682\":1}}],[\"静态代理在编译时就将接⼝\",{\"1\":{\"691\":1,\"3679\":1}}],[\"静态代理中\",{\"1\":{\"690\":1,\"693\":1,\"3678\":1,\"3681\":1}}],[\"⽬标对象和代理对象都要进⾏修改\",{\"1\":{\"690\":1,\"3678\":1}}],[\"⽬的是为了防⽌有多个线程同时调⽤时\",{\"1\":{\"674\":1,\"3662\":1}}],[\"且有剩余资源\",{\"1\":{\"2847\":1,\"4072\":1}}],[\"且子查询中为简单\",{\"1\":{\"2580\":1,\"4913\":1}}],[\"且\",{\"1\":{\"2359\":1,\"4692\":1}}],[\"且修改数据的操作效率也会提升\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"且修改索引时\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"且都有应用在实际的项目中\",{\"1\":{\"1124\":1,\"1292\":1,\"1460\":1,\"1628\":1,\"4506\":1}}],[\"且麻烦\",{\"1\":{\"693\":1,\"3681\":1}}],[\"且产品多的话会使⼯⼚类⽐较复杂\",{\"1\":{\"678\":1,\"3666\":1}}],[\"且内部属性已经被赋值\",{\"1\":{\"315\":1,\"3592\":1}}],[\"违背开闭原则\",{\"1\":{\"678\":1,\"3666\":1}}],[\"完成远程服务的http调用\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"完成后释放锁\",{\"1\":{\"674\":1,\"3662\":1}}],[\"完善\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"完全服从\",{\"1\":{\"772\":1,\"3760\":1}}],[\"完美解决了之前说的\",{\"1\":{\"606\":1}}],[\"锁队列的一个结点\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"锁消除指的是在某些情况下\",{\"1\":{\"2770\":1,\"3995\":1}}],[\"锁消除\",{\"0\":{\"2768\":1,\"3993\":1}}],[\"锁粗化就是告诉我们任何事情都有个度\",{\"1\":{\"2769\":1,\"3994\":1}}],[\"锁粗化\",{\"0\":{\"2768\":1,\"3993\":1}}],[\"锁优化技术\",{\"0\":{\"2768\":1,\"3993\":1}}],[\"锁定\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"锁定一个范围\",{\"1\":{\"2457\":1,\"2458\":1,\"2468\":1,\"4790\":1,\"4791\":1,\"4801\":1}}],[\"锁对象变成偏向锁\",{\"1\":{\"2755\":1,\"3980\":1}}],[\"锁升级\",{\"0\":{\"2750\":1,\"3975\":1}}],[\"锁绑定多个条件一个\",{\"1\":{\"2742\":1,\"3967\":1}}],[\"锁范围内插入了一条记录\",{\"1\":{\"2525\":1,\"4858\":1}}],[\"锁住的就是一个点\",{\"1\":{\"2477\":1,\"4810\":1}}],[\"锁住的是一条记录\",{\"1\":{\"2460\":1,\"4793\":1}}],[\"锁不兼容\",{\"1\":{\"2461\":1,\"2462\":2,\"4794\":1,\"4795\":2}}],[\"锁不是再一个事务提交后才释放\",{\"1\":{\"2433\":1,\"4766\":1}}],[\"锁兼容\",{\"1\":{\"2461\":1,\"4794\":1}}],[\"锁之分的\",{\"1\":{\"2460\":1,\"4793\":1}}],[\"锁和\",{\"1\":{\"2460\":1,\"4793\":1}}],[\"锁就会被释放\",{\"1\":{\"2452\":1,\"4785\":1}}],[\"锁再对大量数据进行插入的时候\",{\"1\":{\"2436\":1,\"4769\":1}}],[\"锁释放掉\",{\"1\":{\"2434\":1,\"4767\":1}}],[\"锁是特殊的表锁机制\",{\"1\":{\"2433\":1,\"4766\":1}}],[\"锁实现的\",{\"1\":{\"2432\":1,\"4765\":1}}],[\"锁的分类实现\",{\"0\":{\"2878\":1,\"4103\":1}}],[\"锁的实现synchronized\",{\"1\":{\"2738\":1,\"3963\":1}}],[\"锁的过程中\",{\"1\":{\"2435\":1,\"4768\":1}}],[\"锁的操作会形成一个队列\",{\"1\":{\"2415\":1,\"4748\":1}}],[\"锁的作用域就是从锁被获取到其被释放的时间\",{\"1\":{\"505\":1}}],[\"锁机制\",{\"0\":{\"2361\":1,\"4694\":1}}],[\"锁竞争小时\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"锁\",{\"0\":{\"2430\":1,\"4763\":1},\"1\":{\"1037\":1,\"1205\":1,\"1373\":1,\"1541\":1,\"2388\":1,\"2434\":1,\"2439\":1,\"2440\":1,\"4419\":1,\"4721\":1,\"4767\":1,\"4772\":1,\"4773\":1}}],[\"锁池\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"锁指的是\",{\"1\":{\"674\":1,\"3662\":1}}],[\"关闭状态\",{\"1\":{\"1753\":1,\"4313\":1}}],[\"关键看你的业务场景\",{\"1\":{\"3186\":1,\"5437\":1}}],[\"关键字类似\",{\"1\":{\"2744\":1,\"3969\":1}}],[\"关键字创建对象不是原⼦操作\",{\"1\":{\"673\":1,\"3661\":1}}],[\"关键是备份期间\",{\"1\":{\"2376\":1,\"4709\":1}}],[\"关键词和各种\",{\"1\":{\"1030\":1,\"1198\":1,\"1366\":1,\"1534\":1,\"4412\":1}}],[\"关于饱和策略下面单独介绍一下\",{\"1\":{\"2968\":1,\"4193\":1}}],[\"关于偏向锁的撤销\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"关于此将按照时间顺序\",{\"1\":{\"2155\":1,\"5208\":1}}],[\"关于http3\",{\"0\":{\"5159\":1}}],[\"关于http2\",{\"0\":{\"1915\":1,\"1928\":1,\"5147\":1}}],[\"关于http\",{\"1\":{\"1883\":1,\"1898\":1,\"1913\":1,\"1926\":1,\"1939\":1,\"1954\":1,\"5144\":1,\"5169\":1}}],[\"关于循环依赖的源码之前\",{\"1\":{\"786\":1,\"3774\":1}}],[\"关于内部的第⼆重空判断的作⽤\",{\"1\":{\"674\":1,\"3662\":1}}],[\"关于在面试中\",{\"1\":{\"635\":1}}],[\"关于继承关系和组合关系的区别\",{\"1\":{\"576\":1}}],[\"关于这些扩展\",{\"1\":{\"38\":1,\"3326\":1}}],[\"第三方技术阿里云oss\",{\"1\":{\"3095\":1,\"5346\":1}}],[\"第三方接口审核完后传来一个statuscode200\",{\"1\":{\"3066\":1,\"5317\":1}}],[\"第三次挥手丢失了\",{\"1\":{\"1995\":1}}],[\"第三次握手丢失了\",{\"1\":{\"1988\":1}}],[\"第四次挥手丢失了\",{\"1\":{\"1996\":1}}],[\"第二个密钥是私有密钥\",{\"1\":{\"3279\":1}}],[\"第二个缺点\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4532\":1}}],[\"第二\",{\"1\":{\"3147\":1,\"5398\":1}}],[\"第二次挥手丢失了\",{\"1\":{\"1994\":1}}],[\"第二次握手丢失了\",{\"1\":{\"1987\":1}}],[\"第二次会从\",{\"1\":{\"900\":1,\"3888\":1}}],[\"第二次会从缓存中获取\",{\"1\":{\"898\":1,\"3886\":1}}],[\"第二则是当\",{\"1\":{\"1800\":1,\"4360\":1}}],[\"第二步\",{\"1\":{\"1101\":1,\"1269\":1,\"1437\":1,\"1605\":1,\"4483\":1}}],[\"第二点\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"第二种方案\",{\"1\":{\"993\":1,\"5140\":1}}],[\"第二种情况\",{\"1\":{\"988\":1,\"5135\":1}}],[\"第一\",{\"1\":{\"3145\":1,\"5396\":1}}],[\"第一个是\",{\"1\":{\"2737\":1,\"3962\":1}}],[\"第一个是我们提到的\",{\"1\":{\"1800\":1,\"4360\":1}}],[\"第一个缺点\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4531\":1}}],[\"第一个目标是每个分配算法都尽量尝试去完成的\",{\"1\":{\"966\":1,\"5113\":1}}],[\"第一步肯定需要\",{\"1\":{\"1794\":1,\"4354\":1}}],[\"第一步\",{\"1\":{\"1100\":1,\"1268\":1,\"1436\":1,\"1604\":1,\"4482\":1}}],[\"第一点\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"第一种方案\",{\"1\":{\"991\":1,\"5138\":1}}],[\"第一种情况\",{\"1\":{\"986\":1,\"5133\":1}}],[\"第一次挥手丢失了\",{\"1\":{\"1993\":1}}],[\"第一次握手丢失了\",{\"1\":{\"1986\":1}}],[\"第一次调用时随机生成一个整数\",{\"1\":{\"939\":1,\"5086\":1}}],[\"第一次执行完毕会将数据库中查询的数据写到缓存\",{\"1\":{\"898\":1,\"900\":1,\"3886\":1,\"3888\":1}}],[\"第\",{\"1\":{\"817\":1,\"819\":1,\"821\":1,\"3805\":1,\"3807\":1,\"3809\":1}}],[\"第⼀重判断\",{\"1\":{\"674\":1,\"3662\":1}}],[\"第⼀重检查是否为\",{\"1\":{\"673\":1,\"3661\":1}}],[\"第⼆重检查是否为\",{\"1\":{\"673\":1,\"3661\":1}}],[\"使其再次尝试获取同步状态\",{\"1\":{\"2829\":1,\"4054\":1}}],[\"使得网页传输更加高效\",{\"1\":{\"5162\":1}}],[\"使得java\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"使得多个进程可以访问同一块内存空间\",{\"1\":{\"1046\":1,\"1214\":1,\"1382\":1,\"1550\":1,\"4428\":1}}],[\"使⽤者通过代理间接的访问服务提供者\",{\"1\":{\"688\":1,\"3676\":1}}],[\"使⽤简单⼯⼚模式\",{\"1\":{\"679\":1,\"3667\":1}}],[\"使⽤\",{\"1\":{\"673\":1,\"3661\":1}}],[\"使用fastdfs作为静态资源存储器\",{\"1\":{\"3205\":1,\"5456\":1}}],[\"使用版本号\",{\"1\":{\"3137\":1,\"5388\":1}}],[\"使用mongo存储用户历史记录数据\",{\"1\":{\"3106\":1,\"5357\":1}}],[\"使用mysql存储用户数据\",{\"1\":{\"3105\":1,\"5356\":1}}],[\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销\",{\"1\":{\"3003\":1,\"4228\":1}}],[\"使用线程池可以进行统一的分配\",{\"1\":{\"2954\":1,\"4179\":1}}],[\"使用调用者的线程来执行任务\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"使用volatile修饰的变量\",{\"1\":{\"2859\":1,\"4084\":1}}],[\"使用者继承\",{\"1\":{\"2843\":1,\"4068\":1}}],[\"使用布隆过滤器中的哈希函数对元素值进行计算\",{\"1\":{\"2703\":1,\"5036\":1}}],[\"使用哈希表作为\",{\"1\":{\"2616\":1,\"4949\":1}}],[\"使用全局锁会影响业务\",{\"1\":{\"2377\":1,\"4710\":1}}],[\"使用表中的多个字段创建索引\",{\"1\":{\"2329\":1,\"4662\":1}}],[\"使用的无界的延迟阻塞队列delayedworkqueue\",{\"1\":{\"3008\":1,\"4233\":1}}],[\"使用的都是非聚簇索引\",{\"1\":{\"2285\":1,\"2317\":1,\"4618\":1,\"4650\":1}}],[\"使用的是同步队列\",{\"1\":{\"3007\":1,\"4232\":1}}],[\"使用的是无界的\",{\"1\":{\"3006\":1,\"4231\":1}}],[\"使用的是线程\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4512\":1}}],[\"使用的是进程\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4512\":1}}],[\"使用的是共享内存的方式\",{\"1\":{\"1061\":1,\"1229\":1,\"1397\":1,\"1565\":1,\"4443\":1}}],[\"使用二进制帧进行数据传输\",{\"1\":{\"2187\":1,\"5240\":1}}],[\"使用零拷贝技术的项目\",{\"0\":{\"1107\":1,\"1275\":1,\"1443\":1,\"1611\":1,\"4489\":1}}],[\"使用水平触发模式时\",{\"1\":{\"1066\":1,\"1234\":1,\"1402\":1,\"1570\":1,\"4448\":1}}],[\"使用边缘触发模式时\",{\"1\":{\"1065\":1,\"1233\":1,\"1401\":1,\"1569\":1,\"4447\":1}}],[\"使用事件驱动的机制\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"使用一种称为目录树的层次结构来组织文件和目录\",{\"1\":{\"1002\":1,\"3914\":1}}],[\"使用availablepartitions呢\",{\"1\":{\"940\":1,\"5087\":1}}],[\"使用指定的partition\",{\"1\":{\"937\":1,\"5084\":1}}],[\"使用指南\",{\"1\":{\"118\":1,\"119\":1,\"3406\":1,\"3407\":1}}],[\"使用utf\",{\"1\":{\"865\":1,\"3853\":1}}],[\"使用spring\",{\"1\":{\"841\":1,\"3829\":1}}],[\"使用synchronizedlist的时候\",{\"1\":{\"515\":1}}],[\"使用后端数据库默认的隔离级别\",{\"1\":{\"768\":1,\"3756\":1}}],[\"使用到了适配器模式\",{\"1\":{\"752\":1,\"3740\":1}}],[\"使用工厂模式通过\",{\"1\":{\"746\":1,\"3734\":1}}],[\"使用了\",{\"1\":{\"624\":2}}],[\"使用老版本\",{\"1\":{\"592\":1}}],[\"使用自然语言描述\",{\"1\":{\"585\":1}}],[\"使用hashmap时就必须要自己增加同步处理\",{\"1\":{\"544\":1}}],[\"使用同步代码块的方式调用arraylist的add\",{\"1\":{\"483\":1}}],[\"使用方式也很相似\",{\"1\":{\"444\":1}}],[\"使用jdbc连接数据库时\",{\"1\":{\"325\":1,\"3602\":1}}],[\"使用javap来分析这段代码\",{\"1\":{\"273\":1,\"3550\":1}}],[\"使用\",{\"1\":{\"188\":1,\"596\":1,\"832\":1,\"889\":1,\"894\":1,\"1692\":1,\"2199\":1,\"2253\":1,\"2355\":1,\"2597\":1,\"2795\":1,\"3471\":1,\"3820\":1,\"3877\":1,\"3882\":1,\"4020\":1,\"4252\":1,\"4586\":1,\"4688\":1,\"4930\":1,\"5252\":1}}],[\"私有化构造⽅法\",{\"1\":{\"673\":1,\"3661\":1}}],[\"双活的重点\",{\"1\":{\"1877\":1,\"3954\":1}}],[\"双向同步\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"双重检查锁\",{\"1\":{\"672\":1,\"3660\":1}}],[\"双亲委派模型保证了\",{\"1\":{\"234\":1,\"3517\":1}}],[\"双亲委派模型的实现代码非常简单\",{\"1\":{\"226\":1,\"3509\":1}}],[\"双亲委派模型要求除了顶层的启动类加载器外\",{\"1\":{\"222\":1,\"3505\":1}}],[\"双亲委派模型\",{\"0\":{\"219\":1,\"3502\":1},\"1\":{\"224\":1,\"3507\":1}}],[\"⼀个单例类在任何情况下都只存在⼀个实例\",{\"1\":{\"671\":1,\"3659\":1}}],[\"访问量达到了44w+\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"访问标志来辨别一个方法是否声明为同步方法\",{\"1\":{\"2927\":1,\"4152\":1}}],[\"访问\",{\"1\":{\"1874\":1,\"3951\":1}}],[\"访问http\",{\"1\":{\"855\":1,\"3843\":1}}],[\"访问者模式\",{\"1\":{\"669\":1,\"3657\":1}}],[\"访问顺序经常用于实现lru缓存\",{\"1\":{\"440\":1}}],[\"策略\",{\"1\":{\"669\":1,\"2658\":1,\"3657\":1,\"4991\":1}}],[\"状态响应码\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"状态码\",{\"1\":{\"2179\":1,\"5232\":1}}],[\"状态码用于描述\",{\"1\":{\"2178\":1,\"5231\":1}}],[\"状态码有哪些\",{\"0\":{\"2177\":1,\"5230\":1}}],[\"状态的原因有哪些\",{\"0\":{\"2116\":1,\"2117\":1},\"1\":{\"2001\":1,\"2002\":1}}],[\"状态然后进行\",{\"1\":{\"1811\":1,\"4371\":1}}],[\"状态时\",{\"1\":{\"1803\":1,\"4363\":1}}],[\"状态超时\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"状态\",{\"0\":{\"2096\":1,\"2113\":1},\"1\":{\"669\":1,\"1801\":1,\"1805\":1,\"1981\":1,\"1998\":1,\"2835\":1,\"3657\":1,\"4060\":1,\"4361\":1,\"4365\":1}}],[\"观察者模式\",{\"1\":{\"751\":1,\"3739\":1}}],[\"观察者\",{\"1\":{\"669\":1,\"3657\":1}}],[\"迭代器\",{\"1\":{\"669\":1,\"3657\":1}}],[\"享元\",{\"1\":{\"669\":1,\"3657\":1}}],[\"外键对于维护数据一致性非常有帮助\",{\"1\":{\"2249\":1,\"4582\":1}}],[\"外观\",{\"1\":{\"669\":1,\"3657\":1}}],[\"外部节点\",{\"1\":{\"648\":2,\"3636\":2}}],[\"装饰器模式\",{\"0\":{\"3673\":1}}],[\"装饰器\",{\"1\":{\"669\":1,\"3657\":1}}],[\"装载因子\",{\"1\":{\"398\":1,\"400\":1}}],[\"桥接模式\",{\"1\":{\"669\":1,\"3657\":1}}],[\"结果发现面试官说错了\",{\"1\":{\"3273\":1}}],[\"结果面试官问我md5\",{\"1\":{\"3273\":1}}],[\"结果自己挂掉了\",{\"1\":{\"3118\":1,\"5369\":1}}],[\"结果如下\",{\"1\":{\"2804\":1,\"4029\":1}}],[\"结果集执行的内存分页\",{\"1\":{\"889\":1,\"3877\":1}}],[\"结构化面试+技术面\",{\"0\":{\"3071\":1,\"5322\":1}}],[\"结构里用\",{\"1\":{\"2598\":1,\"4931\":1}}],[\"结构层次鲜明\",{\"1\":{\"1002\":1,\"3914\":1}}],[\"结构型\",{\"1\":{\"669\":1,\"3657\":1}}],[\"结束后该\",{\"1\":{\"898\":1,\"3886\":1}}],[\"结尾的对数据库操作的类\",{\"1\":{\"749\":1,\"3737\":1}}],[\"结合\",{\"1\":{\"743\":1,\"3731\":1}}],[\"结合上面的源码\",{\"1\":{\"229\":1,\"3512\":1}}],[\"原理\",{\"0\":{\"2939\":1,\"4164\":1}}],[\"原语\",{\"1\":{\"2816\":1,\"4041\":1}}],[\"原语由若干指令组成\",{\"1\":{\"2795\":1,\"4020\":1}}],[\"原语属于操作系统用语\",{\"1\":{\"2795\":1,\"4020\":1}}],[\"原生的\",{\"1\":{\"2481\":1,\"4814\":1}}],[\"原子指令即可\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"原子指令\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"原子广播协议\",{\"1\":{\"1785\":1,\"4345\":1}}],[\"原子广播\",{\"1\":{\"1779\":1,\"4339\":1}}],[\"原子性是通过\",{\"1\":{\"2489\":1,\"4822\":1}}],[\"原子性\",{\"1\":{\"757\":1,\"2483\":1,\"3745\":1,\"4816\":1}}],[\"原因在于\",{\"1\":{\"2265\":1,\"4598\":1}}],[\"原因如下\",{\"1\":{\"1180\":1,\"1348\":1,\"1516\":1,\"1684\":1,\"4562\":1}}],[\"原因\",{\"0\":{\"974\":1,\"5121\":1,\"5163\":1},\"1\":{\"2023\":1,\"2084\":1}}],[\"原型模式\",{\"1\":{\"669\":1,\"3657\":1}}],[\"原文链接\",{\"1\":{\"519\":1,\"548\":1,\"3608\":1}}],[\"建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性\",{\"1\":{\"2302\":1,\"4635\":1}}],[\"建立通信\",{\"1\":{\"1698\":1,\"4258\":1}}],[\"建造者\",{\"1\":{\"669\":1,\"3657\":1}}],[\"建议将\",{\"1\":{\"3134\":1,\"5385\":1}}],[\"建议单张表索引不超过\",{\"1\":{\"2344\":1,\"4677\":1}}],[\"建议使用\",{\"1\":{\"2336\":1,\"4669\":1}}],[\"建议\",{\"1\":{\"216\":1,\"3499\":1}}],[\"单表不要包含过多字段\",{\"0\":{\"2568\":1,\"4901\":1}}],[\"单播发送\",{\"1\":{\"2175\":1,\"5228\":1}}],[\"单播响应\",{\"1\":{\"2174\":1,\"5227\":1}}],[\"单播响应协议\",{\"1\":{\"2163\":1,\"5216\":1}}],[\"单元化\",{\"1\":{\"1875\":1,\"3952\":1}}],[\"单元测试和集成测试\",{\"1\":{\"861\":1,\"3849\":1}}],[\"单个服务内部高度耦合\",{\"1\":{\"1724\":1,\"4284\":1}}],[\"单线程读写\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"单线程方案是一样的\",{\"1\":{\"1161\":1,\"1329\":1,\"1497\":1,\"1665\":1,\"4543\":1}}],[\"单线程\",{\"1\":{\"1134\":1,\"1154\":1,\"1302\":1,\"1322\":1,\"1470\":1,\"1490\":1,\"1638\":1,\"1658\":1,\"4516\":1,\"4536\":1}}],[\"单进程的方案不适用计算机密集型的场景\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4533\":1}}],[\"单进程的方案因为全部工作都在同一个进程内完成\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"4529\":1}}],[\"单进程\",{\"0\":{\"1132\":1,\"1300\":1,\"1468\":1,\"1636\":1,\"4514\":1},\"1\":{\"1119\":1,\"1121\":1,\"1123\":2,\"1125\":1,\"1133\":1,\"1135\":1,\"1142\":1,\"1152\":1,\"1287\":1,\"1289\":1,\"1291\":2,\"1293\":1,\"1301\":1,\"1303\":1,\"1310\":1,\"1320\":1,\"1455\":1,\"1457\":1,\"1459\":2,\"1461\":1,\"1469\":1,\"1471\":1,\"1478\":1,\"1488\":1,\"1623\":1,\"1625\":1,\"1627\":2,\"1629\":1,\"1637\":1,\"1639\":1,\"1646\":1,\"1656\":1,\"4501\":1,\"4503\":1,\"4505\":2,\"4507\":1,\"4515\":1,\"4517\":1,\"4524\":1,\"4534\":1}}],[\"单\",{\"0\":{\"1132\":1,\"1153\":1,\"1300\":1,\"1321\":1,\"1468\":1,\"1489\":1,\"1636\":1,\"1657\":1,\"4514\":1,\"4535\":1},\"1\":{\"1119\":1,\"1120\":1,\"1123\":1,\"1125\":1,\"1126\":1,\"1133\":1,\"1134\":1,\"1135\":1,\"1142\":1,\"1147\":1,\"1151\":1,\"1152\":1,\"1154\":1,\"1155\":1,\"1164\":1,\"1168\":1,\"1170\":1,\"1172\":2,\"1287\":1,\"1288\":1,\"1291\":1,\"1293\":1,\"1294\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1310\":1,\"1315\":1,\"1319\":1,\"1320\":1,\"1322\":1,\"1323\":1,\"1332\":1,\"1336\":1,\"1338\":1,\"1340\":2,\"1455\":1,\"1456\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1469\":1,\"1470\":1,\"1471\":1,\"1478\":1,\"1483\":1,\"1487\":1,\"1488\":1,\"1490\":1,\"1491\":1,\"1500\":1,\"1504\":1,\"1506\":1,\"1508\":2,\"1623\":1,\"1624\":1,\"1627\":1,\"1629\":1,\"1630\":1,\"1637\":1,\"1638\":1,\"1639\":1,\"1646\":1,\"1651\":1,\"1655\":1,\"1656\":1,\"1658\":1,\"1659\":1,\"1668\":1,\"1672\":1,\"1674\":1,\"1676\":2,\"4501\":1,\"4502\":1,\"4505\":1,\"4507\":1,\"4508\":1,\"4515\":1,\"4516\":1,\"4517\":1,\"4524\":1,\"4529\":1,\"4533\":1,\"4534\":1,\"4536\":1,\"4537\":1,\"4546\":1,\"4550\":1,\"4552\":1,\"4554\":2}}],[\"单例模式\",{\"0\":{\"3658\":1}}],[\"单例模式属于创建型模式\",{\"1\":{\"671\":1,\"3659\":1}}],[\"单例设计模式\",{\"1\":{\"748\":1,\"3736\":1}}],[\"单例\",{\"1\":{\"669\":1,\"3657\":1}}],[\"单词首字母缩写\",{\"1\":{\"1073\":1,\"1241\":1,\"1409\":1,\"1577\":1,\"4455\":1}}],[\"单词\",{\"1\":{\"65\":1,\"3353\":1}}],[\"抽象⼯⼚模式了解吗\",{\"0\":{\"3671\":1}}],[\"抽象⼯⼚模式通过在\",{\"1\":{\"684\":1,\"3672\":1}}],[\"抽象⼯⼚\",{\"1\":{\"669\":1,\"3657\":1}}],[\"创建新线程的时候会用到\",{\"1\":{\"2967\":1,\"4192\":1}}],[\"创建快照时会阻塞主线程吗\",{\"0\":{\"2644\":1,\"4977\":1}}],[\"创建快照之后\",{\"1\":{\"2641\":1,\"4974\":1}}],[\"创建时其他未提交的活跃事务\",{\"1\":{\"2542\":1,\"4875\":1}}],[\"创建该\",{\"1\":{\"2538\":1,\"2543\":1,\"4871\":1,\"4876\":1}}],[\"创建了组合索引\",{\"1\":{\"2356\":1,\"4689\":1}}],[\"创建远程接口的本地jdk\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"创建并配置\",{\"1\":{\"1702\":1,\"4262\":1}}],[\"创建网络环境时\",{\"1\":{\"1702\":1,\"4262\":1}}],[\"创建后填充属性时依赖\",{\"1\":{\"795\":1,\"3783\":1}}],[\"创建一个新的事务\",{\"1\":{\"780\":1,\"3768\":1}}],[\"创建\",{\"1\":{\"746\":1,\"2538\":1,\"2542\":1,\"3734\":1,\"4871\":1,\"4875\":1}}],[\"创建型\",{\"1\":{\"669\":1,\"3657\":1}}],[\"创建的半成品同样放到缓存中\",{\"1\":{\"806\":1,\"3794\":1}}],[\"创建的代理对象在调用方法的时候\",{\"1\":{\"707\":1,\"3695\":1}}],[\"创建的实例中\",{\"1\":{\"312\":1,\"3589\":1}}],[\"创建的\",{\"1\":{\"199\":1,\"3482\":1}}],[\"代替\",{\"1\":{\"2281\":1,\"2282\":1,\"2292\":1,\"4614\":1,\"4615\":1,\"4625\":1}}],[\"代表我已经消费过了\",{\"1\":{\"975\":1,\"5122\":1}}],[\"代表他的序号\",{\"1\":{\"975\":1,\"5122\":1}}],[\"代表了最佳的实践\",{\"1\":{\"667\":1,\"3655\":1}}],[\"代理设计模式\",{\"1\":{\"747\":1,\"3735\":1}}],[\"代理类这些都变成了一个个实际的\",{\"1\":{\"694\":1,\"3682\":1}}],[\"代理类这些都变成了⼀个个实际的\",{\"1\":{\"691\":1,\"3679\":1}}],[\"代理模式的本质是⼀个中间件\",{\"1\":{\"688\":1,\"3676\":1}}],[\"代理模式\",{\"0\":{\"3674\":1},\"1\":{\"669\":1,\"3657\":1}}],[\"代码如下\",{\"1\":{\"629\":1}}],[\"代码转换成字节码\",{\"1\":{\"180\":1,\"3463\":1}}],[\"代码演示\",{\"0\":{\"100\":1,\"3388\":1}}],[\"代码块执行后或异常处理后自动关闭\",{\"1\":{\"260\":1,\"3545\":1}}],[\"代码块\",{\"0\":{\"55\":1,\"3343\":1},\"1\":{\"2914\":1,\"4139\":1}}],[\"代码\",{\"1\":{\"44\":1,\"3332\":1}}],[\"个问题\",{\"1\":{\"3183\":1,\"5434\":1}}],[\"个最重要的参数\",{\"1\":{\"2960\":1,\"4185\":1}}],[\"个特性\",{\"1\":{\"2482\":1,\"4815\":1}}],[\"个\",{\"1\":{\"2192\":2,\"2344\":1,\"2607\":1,\"2615\":1,\"2622\":1,\"2630\":1,\"4677\":1,\"4940\":1,\"4948\":1,\"4955\":1,\"4963\":1,\"5245\":2}}],[\"个字节可以存储\",{\"1\":{\"2566\":1,\"4899\":1}}],[\"个字节\",{\"1\":{\"2066\":1,\"2067\":1}}],[\"个记录\",{\"1\":{\"1844\":2,\"3921\":2}}],[\"个缺点\",{\"1\":{\"1148\":1,\"1316\":1,\"1484\":1,\"1652\":1,\"4530\":1}}],[\"个方案都是比较经典的\",{\"1\":{\"1124\":1,\"1292\":1,\"1460\":1,\"1628\":1,\"4506\":1}}],[\"个参数\",{\"1\":{\"704\":1,\"3692\":1}}],[\"个连续的红色节点\",{\"1\":{\"651\":1,\"3639\":1}}],[\"个阶段的顺序如下图所示\",{\"1\":{\"189\":1,\"3472\":1}}],[\"个阶段\",{\"1\":{\"188\":1,\"3471\":1}}],[\"红色节点的父节点都是黑色\",{\"1\":{\"650\":1,\"3638\":1}}],[\"红色节点的子节点都是黑色\",{\"1\":{\"649\":1,\"3637\":1}}],[\"红黑树这种保存所有待检测的\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"红黑树旋转情况少于avl树\",{\"1\":{\"662\":1,\"3650\":1}}],[\"红黑树整体性能略优于avl树\",{\"1\":{\"662\":1,\"3650\":1}}],[\"红黑树和avl树的比较\",{\"1\":{\"659\":1,\"3647\":1}}],[\"红黑树的插入删除比avl树更便于控制操作\",{\"1\":{\"661\":1,\"3649\":1}}],[\"红黑树的优点就是对有序数据的查询操作不会慢到o\",{\"1\":{\"658\":1,\"3646\":1}}],[\"红黑树的查找\",{\"1\":{\"655\":1,\"3643\":1}}],[\"红黑树的效率\",{\"0\":{\"654\":1,\"3642\":1}}],[\"红黑树的特性\",{\"0\":{\"644\":1,\"3632\":1}}],[\"红黑树保证最长路径不超过最短路径的二倍\",{\"1\":{\"645\":1,\"3633\":1}}],[\"红黑树就出现了\",{\"1\":{\"643\":1,\"3631\":1}}],[\"红黑树具有良好的效率\",{\"1\":{\"641\":1,\"3629\":1}}],[\"红黑树允许局部很少的不完全平衡\",{\"1\":{\"526\":1,\"3615\":1}}],[\"红黑树与avll树\",{\"1\":{\"526\":1,\"3615\":1}}],[\"红黑树本质上是一棵二叉查找树\",{\"1\":{\"522\":1,\"3611\":1}}],[\"红黑树是个高效的数据结构\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"红黑树是一个二叉搜索树\",{\"1\":{\"645\":1,\"3633\":1}}],[\"红黑树是一种接近平衡的二叉树\",{\"1\":{\"643\":1,\"3631\":1}}],[\"红黑树是一种自平衡的二叉查找树\",{\"1\":{\"641\":1,\"3629\":1}}],[\"红黑树是一种平衡二叉查找树\",{\"1\":{\"381\":1}}],[\"红黑树是统计效率比较高的大致平衡的排序二叉树\",{\"1\":{\"434\":1}}],[\"红黑树\",{\"0\":{\"639\":1,\"3627\":1},\"1\":{\"366\":1}}],[\"黑色\",{\"1\":{\"648\":1,\"3636\":1}}],[\"空间是否满足要求\",{\"1\":{\"2599\":1,\"4932\":1}}],[\"空间函数等\",{\"1\":{\"2238\":1,\"4571\":1}}],[\"空间局部性是指一旦程序访问了某个存储单元\",{\"1\":{\"1008\":1}}],[\"空节点\",{\"1\":{\"648\":1,\"3636\":1}}],[\"空指针异常\",{\"1\":{\"242\":1,\"3527\":1}}],[\"根本没有经过缓存这一层\",{\"1\":{\"2692\":1,\"5025\":1}}],[\"根本没收到所以会丢弃\",{\"1\":{\"1813\":1,\"4373\":1}}],[\"根本不存在于缓存中\",{\"1\":{\"2692\":1,\"5025\":1}}],[\"根域名服务器是最高层次的\",{\"1\":{\"2214\":1,\"5267\":1}}],[\"根域的\",{\"1\":{\"2209\":1,\"5262\":1}}],[\"根域是在最顶层\",{\"1\":{\"2204\":1,\"5257\":1}}],[\"根\",{\"1\":{\"2206\":1,\"2215\":1,\"5259\":1,\"5268\":1}}],[\"根是黑色\",{\"1\":{\"647\":1,\"3635\":1}}],[\"根据得到的哈希值\",{\"1\":{\"2704\":1,\"5037\":1}}],[\"根据加锁的范围\",{\"1\":{\"2362\":1,\"4695\":1}}],[\"根据主键再回表查数据\",{\"1\":{\"2318\":1,\"4651\":1}}],[\"根据目的\",{\"1\":{\"2171\":1,\"5224\":1}}],[\"根据目的主机\",{\"1\":{\"2168\":1,\"5221\":1}}],[\"根据w3techs的数据\",{\"1\":{\"1890\":1,\"1905\":1,\"1920\":1,\"1933\":1,\"1946\":1,\"1961\":1,\"5152\":1,\"5175\":1}}],[\"根据类别分库分表\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"根据类的二进制名称来查找类\",{\"1\":{\"213\":1,\"3496\":1}}],[\"根据参数再应用到请求上\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"根据参数类型获取对应的构造器\",{\"1\":{\"323\":1,\"3600\":1}}],[\"根据参数类型获取类中某个构造器\",{\"1\":{\"323\":1,\"3600\":1}}],[\"根据返回的\",{\"1\":{\"742\":1,\"3730\":1}}],[\"根据你的配置\",{\"1\":{\"736\":1,\"3724\":1}}],[\"根据获得的\",{\"1\":{\"735\":1,\"3723\":1}}],[\"根据传⼊⼀个唯⼀的标识来获得\",{\"1\":{\"679\":1,\"3667\":1}}],[\"根据传入的条件来决定用hashmap还是linkedhashmap\",{\"1\":{\"290\":1,\"3567\":1}}],[\"根据\",{\"1\":{\"568\":1,\"892\":1,\"940\":1,\"3880\":1,\"5087\":1}}],[\"根据键保存\",{\"1\":{\"437\":1}}],[\"根据键保存和获取值的效率都很高\",{\"1\":{\"386\":1}}],[\"根据hash值就可以直接快速定位\",{\"1\":{\"386\":1}}],[\"根据实现方式不同主要分为两大类\",{\"1\":{\"377\":1}}],[\"根据值查找和删除元素的效率比较低\",{\"1\":{\"359\":1}}],[\"根据元素内容查找和删除的效率比较低\",{\"1\":{\"350\":1}}],[\"根据名字和参数类型获取对应方法\",{\"1\":{\"321\":2,\"3598\":2}}],[\"根据姓名获取类中的某个变量\",{\"1\":{\"319\":1,\"3596\":1}}],[\"根据变量名获取类中的一个变量\",{\"1\":{\"319\":1,\"3596\":1}}],[\"进而转化成真正的\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"进而提升整体的性能\",{\"1\":{\"643\":1,\"3631\":1}}],[\"进入这个状态后\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"进程会阻塞在读写函数那里\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"进程可以通过一个系统调用函数从内核中获取多个事件\",{\"1\":{\"1052\":1,\"1220\":1,\"1388\":1,\"1556\":1,\"4434\":1}}],[\"进程\",{\"1\":{\"1035\":1,\"1126\":1,\"1154\":1,\"1203\":1,\"1294\":1,\"1322\":1,\"1371\":1,\"1462\":1,\"1490\":1,\"1539\":1,\"1630\":1,\"1658\":1,\"4417\":1,\"4508\":1,\"4536\":1}}],[\"进程间通信\",{\"0\":{\"1026\":1,\"1040\":1,\"1194\":1,\"1208\":1,\"1362\":1,\"1376\":1,\"1530\":1,\"1544\":1,\"4408\":1,\"4422\":1}}],[\"进程间通信方式\",{\"0\":{\"1000\":1,\"3912\":1}}],[\"进程和线程管理\",{\"0\":{\"1018\":1,\"1186\":1,\"1354\":1,\"1522\":1,\"4400\":1}}],[\"进⾏锁竞争\",{\"1\":{\"674\":1,\"3662\":1}}],[\"进行加锁\",{\"1\":{\"2814\":1,\"4039\":1}}],[\"进行加密\",{\"1\":{\"209\":1,\"3492\":1}}],[\"进行\",{\"1\":{\"2790\":1,\"4015\":1}}],[\"进行了很多优化\",{\"1\":{\"2739\":1,\"3964\":1}}],[\"进行删除的呢\",{\"1\":{\"2669\":1,\"5002\":1}}],[\"进行查询\",{\"1\":{\"2355\":1,\"4688\":1}}],[\"进行搜索\",{\"1\":{\"2282\":1,\"2292\":1,\"4615\":1,\"4625\":1}}],[\"进行回滚或者提交\",{\"1\":{\"1872\":1,\"3949\":1}}],[\"进行聚合查询\",{\"0\":{\"1862\":1,\"3939\":1}}],[\"进行投票选举的时候会比较\",{\"1\":{\"1816\":1,\"4376\":1}}],[\"进行开发实现\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"进行发送\",{\"1\":{\"1165\":1,\"1333\":1,\"1501\":1,\"1669\":1,\"4547\":1}}],[\"进行分发\",{\"1\":{\"1143\":1,\"1158\":1,\"1311\":1,\"1326\":1,\"1479\":1,\"1494\":1,\"1647\":1,\"1662\":1,\"4525\":1,\"4540\":1}}],[\"进行解析\",{\"1\":{\"734\":1,\"3722\":1}}],[\"进行插入和删除操作\",{\"1\":{\"611\":1}}],[\"进行遍历时要手动进行同步处理\",{\"1\":{\"515\":1}}],[\"进行引用\",{\"1\":{\"123\":1,\"124\":1,\"3411\":1,\"3412\":1}}],[\"递增或者递减\",{\"1\":{\"643\":1,\"3631\":1}}],[\"简述java内存模型\",{\"0\":{\"2852\":1,\"4077\":1}}],[\"简言之\",{\"1\":{\"2767\":1,\"3992\":1}}],[\"简写\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"简而言之就是\",{\"1\":{\"1833\":1,\"4393\":1}}],[\"简化分布式系统开发\",{\"1\":{\"1735\":1,\"4295\":1}}],[\"简介\",{\"0\":{\"640\":1,\"1821\":1,\"3628\":1,\"4381\":1}}],[\"简单限流可以用到\",{\"1\":{\"2602\":1,\"4935\":1}}],[\"简单动态字符串\",{\"1\":{\"2595\":1,\"4928\":1}}],[\"简单的说就是通信的两方的一种约定\",{\"1\":{\"1047\":1,\"1215\":1,\"1383\":1,\"1551\":1,\"4429\":1}}],[\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象\",{\"1\":{\"684\":1,\"3672\":1}}],[\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例\",{\"1\":{\"677\":1,\"3665\":1}}],[\"简单翻译\",{\"1\":{\"564\":1}}],[\"简单说就是可以一步到位\",{\"1\":{\"334\":1}}],[\"简单总结一下双亲委派模型的执行流程\",{\"1\":{\"229\":1,\"3512\":1}}],[\"简单来说\",{\"1\":{\"200\":1,\"569\":1,\"730\":1,\"3483\":1,\"3718\":1}}],[\"面对消息挤压\",{\"1\":{\"3185\":1,\"5436\":1}}],[\"面试官竟然问md5是对称加密还是非对称加密\",{\"1\":{\"3281\":1}}],[\"面试官\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"面试官说看你简历都是java相关\",{\"1\":{\"3076\":1,\"5327\":1}}],[\"面试官说这有java和python\",{\"1\":{\"3069\":1,\"5320\":1}}],[\"面试官说了早上9\",{\"1\":{\"3068\":1,\"5319\":1}}],[\"面试官说不是\",{\"1\":{\"3061\":1,\"5312\":1}}],[\"面试官又给我打了过来\",{\"1\":{\"3065\":1,\"5316\":1}}],[\"面试官的态度极其恶心\",{\"1\":{\"3034\":1,\"5285\":1}}],[\"面试官狗叫\",{\"0\":{\"3033\":1,\"5284\":1}}],[\"面试官会怎么看\",{\"1\":{\"635\":1}}],[\"面试\",{\"0\":{\"3023\":1,\"3024\":1,\"5274\":1,\"5275\":1,\"5486\":1}}],[\"面试时可用下列\",{\"1\":{\"732\":1,\"3720\":1}}],[\"面向无连接\",{\"1\":{\"2078\":1}}],[\"面向连接\",{\"1\":{\"2028\":1}}],[\"面向切面编程\",{\"1\":{\"722\":1,\"3710\":1}}],[\"面向对象\",{\"1\":{\"590\":1}}],[\"面向我们用户的加载器\",{\"1\":{\"208\":1,\"3491\":1}}],[\"倍以上\",{\"1\":{\"633\":1}}],[\"慢慢往下看\",{\"1\":{\"2301\":1,\"4634\":1}}],[\"慢\",{\"1\":{\"633\":1}}],[\"基数统计\",{\"1\":{\"2591\":1,\"4924\":1}}],[\"基于内存\",{\"1\":{\"2586\":1,\"4919\":1}}],[\"基于字节流的传输层通信协议\",{\"1\":{\"2026\":1}}],[\"基于该协议\",{\"1\":{\"1779\":1,\"4339\":1}}],[\"基于\",{\"1\":{\"1692\":1,\"2246\":1,\"2587\":1,\"4252\":1,\"4579\":1,\"4920\":1}}],[\"基于链表的实现\",{\"1\":{\"626\":1}}],[\"基本原理\",{\"0\":{\"2793\":1,\"4018\":1}}],[\"基本数据类型\",{\"0\":{\"2589\":1,\"4922\":1}}],[\"基本一样\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"基本功能\",{\"0\":{\"1771\":1,\"4331\":1}}],[\"基本组件\",{\"0\":{\"999\":1,\"3911\":1}}],[\"基本的操作都是由hashmap底层实现的\",{\"1\":{\"380\":1}}],[\"基本概念\",{\"0\":{\"174\":1,\"3457\":1}}],[\"做了些什么\",{\"1\":{\"3066\":1,\"5317\":1}}],[\"做为\",{\"1\":{\"620\":1}}],[\"做成一个\",{\"1\":{\"612\":1}}],[\"做成了一个类\",{\"1\":{\"608\":1}}],[\"能不能将\",{\"1\":{\"3186\":1,\"5437\":1}}],[\"能最晚啥时候\",{\"1\":{\"3032\":1,\"5283\":1}}],[\"能让写入缓存中的最新数据更新写入主内存\",{\"1\":{\"2865\":1,\"4090\":1}}],[\"能告诉我\",{\"1\":{\"2214\":1,\"5267\":1}}],[\"能保证数据的可靠性交付\",{\"1\":{\"2075\":1}}],[\"能建立\",{\"0\":{\"2125\":1,\"2126\":1},\"1\":{\"2010\":1,\"2011\":1}}],[\"能处理写请求嘛\",{\"1\":{\"1793\":1,\"4353\":1}}],[\"能正常调用\",{\"1\":{\"1753\":1,\"4313\":1}}],[\"能在上一次分配的结果的基础上\",{\"1\":{\"963\":1,\"5110\":1}}],[\"能够命中前者的查询肯定是能够命中后者的\",{\"1\":{\"2350\":1,\"4683\":1}}],[\"能够命中索引\",{\"1\":{\"2350\":1,\"4683\":1}}],[\"能够提供更高的安全性和用户隐私保护\",{\"1\":{\"2199\":1,\"5252\":1}}],[\"能够把报文转发到\",{\"1\":{\"2168\":1,\"5221\":1}}],[\"能够同时保证\",{\"1\":{\"1837\":1,\"4397\":1}}],[\"能够同时监听的\",{\"1\":{\"1060\":1,\"1228\":1,\"1396\":1,\"1564\":1,\"4442\":1}}],[\"能够接收客户端的请求\",{\"1\":{\"1789\":1,\"4349\":1}}],[\"能够发起投票\",{\"1\":{\"1788\":1,\"4348\":1}}],[\"能够自动执行重复性任务\",{\"1\":{\"1693\":1,\"4253\":1}}],[\"能够将那些与业务无关\",{\"1\":{\"722\":1,\"3710\":1}}],[\"能够加快检索速率\",{\"1\":{\"522\":1,\"3611\":1}}],[\"能解决非平衡树问题\",{\"1\":{\"643\":1,\"3631\":1}}],[\"能更好吧\",{\"1\":{\"619\":1}}],[\"多版本并发控制\",{\"1\":{\"2490\":1,\"4823\":1}}],[\"多列值组成一个索引\",{\"1\":{\"2291\":1,\"4624\":1}}],[\"多路平衡查找树\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"多路复用接口\",{\"1\":{\"1143\":1,\"1158\":1,\"1311\":1,\"1326\":1,\"1479\":1,\"1494\":1,\"1647\":1,\"1662\":1,\"4525\":1,\"4540\":1}}],[\"多路复用技术\",{\"1\":{\"1050\":1,\"1218\":1,\"1386\":1,\"1554\":1,\"4432\":1}}],[\"多路复用\",{\"0\":{\"1049\":1,\"1217\":1,\"1385\":1,\"1553\":1,\"4431\":1},\"1\":{\"2186\":1,\"2587\":1,\"4920\":1,\"5239\":1}}],[\"多请求复用一个\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"多对多的交互通信\",{\"1\":{\"2058\":1}}],[\"多于\",{\"1\":{\"1774\":2,\"4334\":2}}],[\"多个线程不按照申请锁的顺序去获得锁\",{\"1\":{\"2906\":1,\"4131\":1}}],[\"多个线程按照申请锁的顺序去获得锁\",{\"1\":{\"2903\":1,\"4128\":1}}],[\"多个线程共享的内存\",{\"1\":{\"2854\":1,\"4079\":1}}],[\"多个线程竞争偏向锁导致偏向锁升级为轻量级锁\",{\"1\":{\"2763\":1,\"3988\":1}}],[\"多个字段在一个索引上\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"多个消费者\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"多个人给一个主播打赏怎么设计\",{\"0\":{\"1843\":1,\"3920\":1}}],[\"多个节点之前的网络本来是连通的\",{\"1\":{\"1829\":1,\"4389\":1}}],[\"多个模块\",{\"1\":{\"1711\":1,\"4271\":1}}],[\"多个请求复用了一个进程\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"多核\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4531\":1}}],[\"多线程并发操作\",{\"1\":{\"2909\":1,\"4134\":1}}],[\"多线程与高并发\",{\"0\":{\"2735\":1,\"3960\":1}}],[\"多线程和高并发\",{\"0\":{\"2734\":1,\"3959\":1,\"5480\":1}}],[\"多线程的实现机制\",{\"0\":{\"2732\":1,\"5065\":1}}],[\"多线程的方案要简单的多\",{\"1\":{\"1180\":1,\"1348\":1,\"1516\":1,\"1684\":1,\"4562\":1}}],[\"多线程的方案虽然看起来复杂的\",{\"1\":{\"1180\":1,\"1348\":1,\"1516\":1,\"1684\":1,\"4562\":1}}],[\"多线程的方案\",{\"1\":{\"1167\":1,\"1335\":1,\"1503\":1,\"1671\":1,\"4549\":1}}],[\"多线程的方案优势在于能够充分利用多核\",{\"1\":{\"1164\":1,\"1332\":1,\"1500\":1,\"1668\":1,\"4546\":1}}],[\"多线程实现起来很麻烦\",{\"1\":{\"1168\":1,\"1336\":1,\"1504\":1,\"1672\":1,\"4550\":1}}],[\"多线程\",{\"0\":{\"1153\":1,\"1321\":1,\"1489\":1,\"1657\":1,\"4535\":1},\"1\":{\"1126\":1,\"1154\":1,\"1155\":1,\"1294\":1,\"1322\":1,\"1323\":1,\"1462\":1,\"1490\":1,\"1491\":1,\"1630\":1,\"1658\":1,\"1659\":1,\"2957\":1,\"4182\":1,\"4508\":1,\"4536\":1,\"4537\":1}}],[\"多\",{\"0\":{\"1171\":1,\"1339\":1,\"1507\":1,\"1675\":1,\"4553\":1},\"1\":{\"1121\":1,\"1122\":1,\"1123\":1,\"1127\":1,\"1172\":2,\"1173\":1,\"1180\":1,\"1289\":1,\"1290\":1,\"1291\":1,\"1295\":1,\"1340\":2,\"1341\":1,\"1348\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1463\":1,\"1508\":2,\"1509\":1,\"1516\":1,\"1625\":1,\"1626\":1,\"1627\":1,\"1631\":1,\"1676\":2,\"1677\":1,\"1684\":1,\"4503\":1,\"4504\":1,\"4505\":1,\"4509\":1,\"4554\":2,\"4555\":1,\"4562\":1}}],[\"多进程的模式\",{\"1\":{\"1169\":1,\"1337\":1,\"1505\":1,\"1673\":1,\"4551\":1}}],[\"多进程的方案\",{\"1\":{\"1154\":1,\"1167\":1,\"1322\":1,\"1335\":1,\"1490\":1,\"1503\":1,\"1658\":1,\"1671\":1,\"4536\":1,\"4549\":1}}],[\"多进程相比单\",{\"1\":{\"1168\":1,\"1336\":1,\"1504\":1,\"1672\":1,\"4550\":1}}],[\"多进程\",{\"0\":{\"1153\":1,\"1171\":1,\"1321\":1,\"1339\":1,\"1489\":1,\"1507\":1,\"1657\":1,\"1675\":1,\"4535\":1,\"4553\":1},\"1\":{\"1120\":1,\"1122\":1,\"1127\":1,\"1154\":1,\"1172\":1,\"1173\":1,\"1288\":1,\"1290\":1,\"1295\":1,\"1322\":1,\"1340\":1,\"1341\":1,\"1456\":1,\"1458\":1,\"1463\":1,\"1490\":1,\"1508\":1,\"1509\":1,\"1624\":1,\"1626\":1,\"1631\":1,\"1658\":1,\"1676\":1,\"1677\":1,\"4502\":1,\"4504\":1,\"4509\":1,\"4536\":1,\"4554\":1,\"4555\":1}}],[\"多机器并发\",{\"1\":{\"935\":1,\"5082\":1}}],[\"多partition分布式存储\",{\"1\":{\"933\":1,\"5080\":1}}],[\"多组循环依赖\",{\"1\":{\"789\":1,\"3777\":1}}],[\"多研究一下如何处理这些历史遗留问题\",{\"1\":{\"619\":1}}],[\"多用组合\",{\"1\":{\"590\":1}}],[\"或轻量级锁\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"或锁机制来保证的\",{\"1\":{\"2490\":1,\"4823\":1}}],[\"或其变种\",{\"1\":{\"2269\":1,\"4602\":1}}],[\"或是当\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"或join\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"或notifyall\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"或\",{\"1\":{\"740\":1,\"817\":1,\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"2329\":1,\"2891\":1,\"3728\":1,\"3805\":1,\"4116\":1,\"4452\":1,\"4662\":1}}],[\"或许直接升级http\",{\"1\":{\"1891\":1,\"1906\":1,\"1921\":1,\"1934\":1,\"1947\":1,\"1962\":1,\"5153\":1,\"5176\":1}}],[\"或许\",{\"1\":{\"619\":1}}],[\"或者其它原因导致的任务暂停而带来的影响\",{\"1\":{\"2992\":1,\"4217\":1}}],[\"或者我们直接通过\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"或者反过来\",{\"1\":{\"2611\":1,\"4944\":1}}],[\"或者在执行过程中遇到范围查询\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"或者平时保持一定的流量\",{\"1\":{\"1879\":1,\"3956\":1}}],[\"或者说覆盖\",{\"1\":{\"2290\":1,\"2325\":1,\"4623\":1,\"4658\":1}}],[\"或者说短任务线程多\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"或者说我想要方便在中间插入和删除的同步的链表\",{\"1\":{\"512\":1}}],[\"或者一致性\",{\"1\":{\"1833\":1,\"4393\":1}}],[\"或者显式地删除一个消息队列时\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"或者i\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"或者发出了i\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"或者redis天然的set结构\",{\"1\":{\"980\":1,\"5127\":1}}],[\"或者\",{\"1\":{\"602\":1,\"605\":1,\"617\":1,\"1834\":1,\"2452\":1,\"4394\":1,\"4785\":1}}],[\"或者经常需要在中间进行插入和删除\",{\"1\":{\"353\":1}}],[\"没必要一次执行尽可能多的读写操作\",{\"1\":{\"1069\":1,\"1237\":1,\"1405\":1,\"1573\":1,\"4451\":1}}],[\"没错\",{\"1\":{\"617\":1}}],[\"没有给http\",{\"1\":{\"5167\":1}}],[\"没有保研吗\",{\"1\":{\"3081\":1,\"5332\":1}}],[\"没有容量\",{\"1\":{\"2982\":1,\"4207\":1}}],[\"没有抢到锁的线程将自旋\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"没有被删除\",{\"1\":{\"2671\":1,\"5004\":1}}],[\"没有开启\",{\"1\":{\"2649\":1,\"4982\":1}}],[\"没有使用其作为索引的数据结构呢\",{\"1\":{\"2266\":1,\"4599\":1}}],[\"没有边界\",{\"1\":{\"2069\":1}}],[\"没有\",{\"1\":{\"2010\":1,\"2011\":1,\"2184\":1,\"5237\":1}}],[\"没有定论\",{\"1\":{\"1836\":1,\"4396\":1}}],[\"没有数据可读写时\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"没有指明partition\",{\"1\":{\"938\":1,\"5085\":1}}],[\"没有用到红黑树特有的特性\",{\"1\":{\"656\":1,\"3644\":1}}],[\"没有同步方法\",{\"1\":{\"464\":1}}],[\"没有在多个线程之间共享同一个集合\",{\"1\":{\"448\":1}}],[\"没有顺序\",{\"1\":{\"363\":1}}],[\"没有重复元素\",{\"1\":{\"363\":1,\"367\":1}}],[\"没有索引位置的概念\",{\"1\":{\"351\":1}}],[\"破坏了封装性\",{\"1\":{\"616\":1}}],[\"毕竟也存在上下文的切换\",{\"1\":{\"1071\":1,\"1239\":1,\"1407\":1,\"1575\":1,\"4453\":1}}],[\"毕竟\",{\"1\":{\"616\":1,\"2256\":1,\"4589\":1}}],[\"毕竟继承关系看起来更\",{\"1\":{\"590\":1}}],[\"自媒体端发布文章后\",{\"1\":{\"3157\":1,\"5408\":1}}],[\"自媒体等微服务\",{\"1\":{\"3100\":1,\"5351\":1}}],[\"自我介绍\",{\"0\":{\"3209\":1,\"5460\":1},\"1\":{\"3035\":1,\"5286\":1}}],[\"自带的\",{\"1\":{\"2915\":1,\"4140\":1}}],[\"自旋长时间不能成功就会给\",{\"1\":{\"2809\":1,\"4034\":1}}],[\"自旋开销问题\",{\"0\":{\"2808\":1,\"4033\":1},\"1\":{\"2818\":1,\"4043\":1}}],[\"自旋锁缺点\",{\"1\":{\"2889\":1,\"4114\":1}}],[\"自旋锁只是将当前线程不停地执行循环体\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"自旋锁是采用让当前线程不停地在循环体内执行\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"自旋锁\",{\"0\":{\"2887\":1,\"4112\":1},\"1\":{\"2763\":1,\"3988\":1}}],[\"自己造缓存轮子的时候需要格外考虑的东西\",{\"1\":{\"2670\":1,\"5003\":1}}],[\"自增锁还是要等语句结束后才被释放\",{\"1\":{\"2444\":1,\"4777\":1}}],[\"自增锁在申请之后就马上释放\",{\"1\":{\"2443\":1,\"4776\":1}}],[\"自动提交的话会有一个问题\",{\"1\":{\"3116\":1,\"5367\":1}}],[\"自动化部署\",{\"1\":{\"1716\":1,\"4276\":1}}],[\"自动化的插件配置\",{\"1\":{\"869\":1,\"3857\":1}}],[\"自动化的资源过滤\",{\"1\":{\"868\":1,\"3856\":1}}],[\"自动配置类其实就是通过\",{\"1\":{\"816\":1,\"3804\":1}}],[\"自身提交了这个事务并且要发送给所有\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"自身创建的原则下\",{\"1\":{\"814\":1,\"3802\":1}}],[\"自身依赖于自身\",{\"1\":{\"789\":1,\"3777\":1}}],[\"自然也能在同一端进行插入和删除\",{\"1\":{\"612\":1}}],[\"自定义同步器在实现时候只需要实现共享资源state的获取和释放即可\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"自定义异常\",{\"1\":{\"836\":1,\"3824\":1}}],[\"自定义它们\",{\"1\":{\"138\":1,\"3426\":1}}],[\"自定义对齐\",{\"0\":{\"60\":1,\"3348\":1}}],[\"自定义标题\",{\"1\":{\"43\":1,\"46\":1,\"48\":1,\"50\":1,\"52\":1,\"3331\":1,\"3334\":1,\"3336\":1,\"3338\":1,\"3340\":1}}],[\"自定义容器\",{\"0\":{\"41\":1,\"3329\":1}}],[\"什么垃圾玩意\",{\"1\":{\"3034\":1,\"5285\":1}}],[\"什么是代理模式\",{\"0\":{\"3675\":1}}],[\"什么是设计模式\",{\"0\":{\"3654\":1}}],[\"什么是反射机制\",{\"0\":{\"3559\":1}}],[\"什么是md5\",{\"0\":{\"3212\":1}}],[\"什么是aqs\",{\"0\":{\"2821\":1,\"4046\":1}}],[\"什么是缓存雪崩\",{\"0\":{\"2718\":1,\"5051\":1}}],[\"什么是缓存击穿\",{\"0\":{\"2709\":1,\"5042\":1}}],[\"什么是缓存穿透\",{\"0\":{\"2691\":1,\"5024\":1}}],[\"什么是网络分区\",{\"1\":{\"1828\":1,\"4388\":1}}],[\"什么是feign\",{\"1\":{\"1761\":1,\"4321\":1}}],[\"什么是断路器\",{\"1\":{\"1748\":1,\"4308\":1}}],[\"什么是spring\",{\"0\":{\"857\":1,\"1708\":1,\"3845\":1,\"4268\":1}}],[\"什么是\",{\"0\":{\"610\":1,\"1690\":1,\"2640\":1,\"2648\":1,\"2777\":1,\"4002\":1,\"4250\":1,\"4973\":1,\"4981\":1},\"1\":{\"1754\":1,\"1974\":1,\"1975\":1,\"1989\":1,\"4314\":1}}],[\"什么时候执⾏\",{\"1\":{\"266\":1}}],[\"底层原理了解吗\",{\"1\":{\"2933\":1,\"4158\":1}}],[\"底层利用unsafe对象实现的\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"底层使用了模板方法模式\",{\"0\":{\"2842\":1,\"4067\":1}}],[\"底层会通过限制删除操作执行的时长和频率来减少删除操作对\",{\"1\":{\"2672\":1,\"5005\":1}}],[\"底层数据结构\",{\"0\":{\"2262\":1,\"4595\":1},\"1\":{\"2623\":1,\"4956\":1}}],[\"底层开发人员可以随意维护自己的\",{\"1\":{\"603\":1}}],[\"底层都是哈希算法\",{\"1\":{\"533\":1}}],[\"解锁时\",{\"1\":{\"2885\":1,\"4110\":1}}],[\"解锁\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"解锁操作\",{\"1\":{\"1037\":1,\"1205\":1,\"1373\":1,\"1541\":1,\"4419\":1}}],[\"解决办法\",{\"1\":{\"3111\":1,\"3117\":1,\"3125\":1,\"5362\":1,\"5368\":1,\"5376\":1}}],[\"解决资源不足的问题\",{\"1\":{\"3003\":1,\"4228\":1}}],[\"解决的方案有两种\",{\"1\":{\"2523\":1,\"4856\":1}}],[\"解决方案\",{\"0\":{\"976\":1,\"5123\":1},\"1\":{\"794\":1,\"2810\":1,\"3194\":1,\"3782\":1,\"4035\":1,\"5445\":1}}],[\"解码成java\",{\"1\":{\"1764\":1,\"4324\":1}}],[\"解密的场景\",{\"1\":{\"843\":1,\"3831\":1}}],[\"解释器\",{\"1\":{\"669\":1,\"3657\":1}}],[\"解耦了\",{\"1\":{\"602\":1}}],[\"解析请求对应的\",{\"1\":{\"730\":1,\"3718\":1}}],[\"解析\",{\"1\":{\"188\":1,\"2132\":1,\"2171\":1,\"2225\":1,\"3471\":1,\"5185\":1,\"5224\":1}}],[\"弃用\",{\"1\":{\"593\":1,\"594\":1}}],[\"少数消息就会再次消费一次\",{\"1\":{\"975\":1,\"5122\":1}}],[\"少打一些官司\",{\"1\":{\"619\":1}}],[\"少用继承\",{\"1\":{\"590\":1}}],[\"少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗\",{\"1\":{\"531\":1,\"3620\":1}}],[\"说⼀说简单⼯⼚模式\",{\"0\":{\"3664\":1}}],[\"说完他是干啥的以及插值表达式\",{\"1\":{\"3045\":1,\"5296\":1}}],[\"说明该元素不在布隆过滤器中\",{\"1\":{\"2707\":1,\"5040\":1}}],[\"说明查询分组已经到达了主机\",{\"1\":{\"2159\":1,\"5212\":1}}],[\"说说意向锁\",{\"1\":{\"2418\":1,\"4751\":1}}],[\"说\",{\"1\":{\"2215\":1,\"5268\":1}}],[\"说到业余爱好的话\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"说到崩溃恢复我们首先要提到\",{\"1\":{\"1799\":1,\"4359\":1}}],[\"说到动态代理\",{\"1\":{\"698\":1,\"3686\":1}}],[\"说白了就是\",{\"1\":{\"1793\":1,\"4353\":1}}],[\"说白了就是一个变量在程序运行过程中\",{\"1\":{\"1009\":1}}],[\"说出主要的组件\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"说它是接近平衡因为它并没有像avl树的平衡因子的概念\",{\"1\":{\"643\":1,\"3631\":1}}],[\"说得再绝对一些\",{\"1\":{\"590\":1}}],[\"说一下红黑树\",{\"1\":{\"3057\":1,\"5308\":1}}],[\"说一下\",{\"0\":{\"175\":1,\"3458\":1}}],[\"组织的一个索引结构\",{\"1\":{\"2259\":1,\"2276\":1,\"4592\":1,\"4609\":1}}],[\"组件丰富\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"组合在自定义同步组件的实现中\",{\"1\":{\"2843\":1,\"4068\":1}}],[\"组合索引\",{\"1\":{\"2329\":1,\"4662\":1}}],[\"组合\",{\"1\":{\"669\":1,\"3657\":1}}],[\"组合更常见\",{\"1\":{\"590\":1}}],[\"组成关系更常用\",{\"1\":{\"588\":1}}],[\"叫做\",{\"1\":{\"589\":1,\"1875\":1,\"3952\":1}}],[\"动态增加一张表\",{\"0\":{\"1864\":1,\"3941\":1}}],[\"动态生成的代理类\",{\"1\":{\"706\":1,\"3694\":1}}],[\"动态代理更优秀\",{\"1\":{\"718\":1,\"3706\":1}}],[\"动态代理更加灵活\",{\"1\":{\"690\":1,\"696\":1,\"3678\":1,\"3684\":1}}],[\"动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用\",{\"1\":{\"717\":1,\"3705\":1}}],[\"动态代理是在运行时动态生成类字节码\",{\"1\":{\"697\":1,\"3685\":1}}],[\"动态代理只能代理实现了接口的类或者直接代理接口\",{\"1\":{\"717\":1,\"3705\":1}}],[\"动态代理对比\",{\"0\":{\"716\":1,\"3704\":1}}],[\"动态代理和\",{\"0\":{\"716\":1,\"3704\":1}}],[\"动态代理有一个最致命的问题是其只能代理实现了接口的类\",{\"1\":{\"709\":1,\"3697\":1}}],[\"动态代理等等\",{\"1\":{\"700\":1,\"3688\":1}}],[\"动态代理\",{\"0\":{\"3683\":1},\"1\":{\"700\":1,\"711\":2,\"3688\":1,\"3699\":2}}],[\"动态代理的实现方式有很多种\",{\"1\":{\"700\":1,\"3688\":1}}],[\"动态代理在我们日常开发中使用的相对较少\",{\"1\":{\"699\":1,\"3687\":1}}],[\"动态代理机制来避免\",{\"1\":{\"710\":1,\"3698\":1}}],[\"动态代理机制中\",{\"1\":{\"702\":1,\"712\":1,\"3690\":1,\"3700\":1}}],[\"动态代理机制\",{\"0\":{\"701\":1,\"708\":1,\"3689\":1,\"3696\":1},\"1\":{\"696\":1,\"3684\":1}}],[\"动态数组是可以进行扩容操作的\",{\"1\":{\"625\":1}}],[\"动态扩展需要的内存分配以及数组复制开销可以被平摊\",{\"1\":{\"349\":1}}],[\"动物\",{\"1\":{\"588\":1}}],[\"人\",{\"1\":{\"588\":1,\"2698\":1,\"5031\":1}}],[\"人类很可能想不清楚\",{\"1\":{\"586\":1}}],[\"换句话说\",{\"1\":{\"587\":1}}],[\"判断是否有权限\",{\"1\":{\"3132\":1,\"3143\":1,\"5383\":1,\"5394\":1}}],[\"判断自动装配开关是否打开\",{\"1\":{\"817\":1,\"3805\":1}}],[\"判断一下\",{\"1\":{\"586\":1}}],[\"判断元素是否存在\",{\"1\":{\"363\":1,\"367\":1}}],[\"毛病不大\",{\"1\":{\"585\":1}}],[\"听起来似乎说\",{\"1\":{\"585\":1}}],[\"听过无数遍\",{\"1\":{\"576\":1}}],[\"显卡\",{\"1\":{\"582\":2}}],[\"车里有一台发动机\",{\"1\":{\"581\":1}}],[\"猫是一个动物\",{\"1\":{\"578\":1}}],[\"之所以没有使用\",{\"1\":{\"2596\":1,\"4929\":1}}],[\"之上的\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"之上\",{\"1\":{\"2198\":2,\"5251\":2}}],[\"之父也在\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"之后模板显示已经准备好的数据\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"之后已经默认是开启了\",{\"1\":{\"2649\":1,\"4982\":1}}],[\"之后可以在插入数据时\",{\"1\":{\"2432\":1,\"4765\":1}}],[\"之后才有\",{\"1\":{\"1832\":1,\"4392\":1}}],[\"之后server2\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"之后\",{\"1\":{\"1776\":1,\"2305\":1,\"2643\":3,\"4336\":1,\"4638\":1,\"4976\":3}}],[\"之后就不会再传递同样的事件了\",{\"1\":{\"1068\":1,\"1236\":1,\"1404\":1,\"1572\":1,\"4450\":1}}],[\"之后尽量均衡的将分区分配给消费者\",{\"1\":{\"946\":1,\"5093\":1}}],[\"之后的所有调⽤都不会进⼊同步块\",{\"1\":{\"674\":1,\"3662\":1}}],[\"之间\",{\"1\":{\"643\":1,\"3631\":1}}],[\"之间的关系\",{\"1\":{\"575\":1}}],[\"之前已经提交的修改和该事务本身做的修改\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"之前只有\",{\"1\":{\"2305\":1,\"4638\":1}}],[\"之前\",{\"1\":{\"2237\":1,\"2419\":1,\"2420\":1,\"4570\":1,\"4752\":1,\"4753\":1}}],[\"之前名为\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"之前说过\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"之前的比较都是基于我们将arraylist转成synchronizedlist\",{\"1\":{\"512\":1}}],[\"之前介绍的map接口的实现类都有一个对应的set接口的实现类\",{\"1\":{\"369\":1}}],[\"栈和动态数组之间的关系不应该是继承关系\",{\"1\":{\"587\":1}}],[\"栈和双端队列使用\",{\"1\":{\"339\":1}}],[\"栈不是一个动态数组\",{\"1\":{\"585\":1}}],[\"栈是一个动态数组\",{\"1\":{\"585\":1}}],[\"栈这种数据结构\",{\"1\":{\"584\":1}}],[\"栈\",{\"0\":{\"556\":1,\"3624\":1},\"1\":{\"635\":1}}],[\"链表的性能是远远低于动态数组的\",{\"1\":{\"627\":1}}],[\"链表呢\",{\"0\":{\"622\":1}}],[\"链表\",{\"0\":{\"555\":1,\"3623\":1}}],[\"链接\",{\"1\":{\"17\":1,\"44\":1,\"3305\":1,\"3332\":1}}],[\"后经提议\",{\"1\":{\"5162\":1}}],[\"后来\",{\"1\":{\"5162\":1}}],[\"后端先验证\",{\"1\":{\"3208\":1,\"5459\":1}}],[\"后端是一个松耦合架构\",{\"1\":{\"1696\":1,\"4256\":1}}],[\"后台管理微服务签发jwt\",{\"1\":{\"3141\":1,\"5392\":1}}],[\"后文会详细介绍到\",{\"1\":{\"3005\":1,\"4230\":1}}],[\"后继节点\",{\"1\":{\"2832\":1,\"2835\":1,\"4057\":1,\"4060\":1}}],[\"后续即使它们修改了记录行的值\",{\"1\":{\"2542\":1,\"4875\":1}}],[\"后续有对该表的\",{\"1\":{\"2413\":1,\"4746\":1}}],[\"后访问的事务必须等前一个事务执行完成\",{\"1\":{\"2512\":1,\"4845\":1}}],[\"后一级缓存也没有了\",{\"1\":{\"912\":1,\"3900\":1}}],[\"后重写为\",{\"1\":{\"893\":1,\"3881\":1}}],[\"后\",{\"1\":{\"735\":1,\"1086\":1,\"1254\":1,\"1422\":1,\"1590\":1,\"3723\":1,\"4468\":1}}],[\"后面会有答案的\",{\"1\":{\"2301\":1,\"4634\":1}}],[\"后面会具体演示代码\",{\"1\":{\"693\":1,\"3681\":1}}],[\"后面两个参数是源端的偏移量和复制数据的长度\",{\"1\":{\"1094\":1,\"1262\":1,\"1430\":1,\"1598\":1,\"4476\":1}}],[\"后面每次调用在这个整数上自增\",{\"1\":{\"939\":1,\"5086\":1}}],[\"后面接上要声明的异常\",{\"1\":{\"254\":1,\"3539\":1}}],[\"后进先出的栈相关的操作\",{\"1\":{\"564\":1}}],[\"后者不是线程安全的\",{\"1\":{\"551\":1}}],[\"虽然提高了效率\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"虽然有了合并索引的优化方式\",{\"1\":{\"2573\":1,\"4906\":1}}],[\"虽然支持\",{\"1\":{\"2521\":1,\"4854\":1}}],[\"虽然相同范围的间隙锁是多个事务相互兼容的\",{\"1\":{\"2472\":1,\"4805\":1}}],[\"虽然索引能带来查询上的效率\",{\"1\":{\"2342\":1,\"4675\":1}}],[\"虽然\",{\"1\":{\"2238\":1,\"2258\":1,\"4571\":1,\"4591\":1}}],[\"虽然http\",{\"1\":{\"1887\":1,\"1902\":1,\"1917\":1,\"1930\":1,\"1943\":1,\"1958\":1,\"5149\":1,\"5172\":1}}],[\"虽然hashmap不是线程安全的\",{\"1\":{\"544\":1}}],[\"虽然要额外考虑并发问题\",{\"1\":{\"1169\":1,\"1337\":1,\"1505\":1,\"1673\":1,\"4551\":1}}],[\"虽然如此\",{\"1\":{\"627\":1}}],[\"虽然变量名称是stack\",{\"1\":{\"615\":1}}],[\"虽然都是使用桶数组实现的\",{\"1\":{\"550\":1}}],[\"young\",{\"1\":{\"2957\":1,\"4182\":1}}],[\"youngxy\",{\"1\":{\"352\":1}}],[\"yes\",{\"1\":{\"2650\":1,\"4983\":1}}],[\"ydreferer=ahr0chm6ly9ibg9nlmnzzg4ubmv0l3uwmta2mjc4ndavyxj0awnszs9kzxrhawxzlzc2ndm1mzg1p3nwbt0xmdaxljixmdeumzawms42njuwljemdxrtx21lzgl1bt1kaxn0cmlidxrllnbjx3jlbgv2yw50lm5vbmutdgfzay1ibg9nltiln0vkzwzhdwx0jtdfq1rsteltvcu3rvjhdgutms03njqzntm4ns1ibg9nltexnzqxota1oc4ymzulnuv2mjglnuvwy19yzwxldmfudf90mf9kb3dubg9hzczkzxb0af8xlxv0bv9zb3vyy2u9zglzdhjpynv0zs5wy19yzwxldmfudc5ub25llxrhc2stymxvzy0yjtdfzgvmyxvsdcu3runuukxju1qln0vsyxrlltetnzy0mzuzodutymxvzy0xmtc0mtkwntgumjm1jtvfdji4jtvfcgnfcmvszxzhbnrfddbfzg93bmxvywqmdxrtx3jlbgv2yw50x2luzgv4pti\",{\"1\":{\"981\":1,\"5128\":1}}],[\"yml\",{\"1\":{\"817\":1,\"3805\":1}}],[\"yang13563758128\",{\"1\":{\"548\":1,\"3520\":1}}],[\"遍历支持fast\",{\"1\":{\"542\":1}}],[\"遍历方式的内部实现上不同\",{\"1\":{\"542\":1}}],[\"支持持久化\",{\"1\":{\"2636\":1,\"4969\":1}}],[\"支持\",{\"1\":{\"2248\":1,\"2252\":1,\"2255\":1,\"4581\":1,\"4585\":1,\"4588\":1}}],[\"支持行级锁\",{\"1\":{\"2242\":1,\"4575\":1}}],[\"支持服务器推送\",{\"1\":{\"2189\":1,\"5242\":1}}],[\"支持对header压缩\",{\"1\":{\"2188\":1,\"5241\":1}}],[\"支持body压缩\",{\"1\":{\"2188\":1,\"5241\":1}}],[\"支持长连接\",{\"1\":{\"2181\":1,\"5234\":1}}],[\"支持一对一\",{\"1\":{\"2058\":1}}],[\"支持切换机房写数据的时候\",{\"1\":{\"1869\":1,\"3946\":1}}],[\"支持本地仓库\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"支持两种事件触发模式\",{\"1\":{\"1063\":1,\"1231\":1,\"1399\":1,\"1567\":1,\"4445\":1}}],[\"支持当前事务的情况\",{\"1\":{\"775\":1,\"3763\":1}}],[\"支持fast\",{\"1\":{\"542\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"78\":1,\"3366\":1}}],[\"几乎是不可能事件\",{\"1\":{\"530\":1,\"3619\":1}}],[\"几乎不会有bin中链表长度会达到阈值\",{\"1\":{\"530\":1,\"3619\":1}}],[\"然而jdk又不能阻止用户实现这种不好的hash算法\",{\"1\":{\"530\":1,\"3619\":1}}],[\"然后他也说了你只是了解\",{\"1\":{\"3037\":1,\"5288\":1}}],[\"然后执行javap\",{\"1\":{\"2915\":1,\"4140\":1}}],[\"然后执行一条\",{\"1\":{\"2410\":1,\"4743\":1}}],[\"然后一个线程去读这个变量\",{\"1\":{\"2860\":1,\"4085\":1}}],[\"然后一起参与到消息广播流程中去\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"然后又修改为\",{\"1\":{\"2802\":1,\"4027\":1}}],[\"然后开始上厕所\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"然后线程将当前锁的持有者信息修改为自己\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"然后判断锁对象是否处于被锁定状态\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"然后就\",{\"1\":{\"2674\":1,\"5007\":1}}],[\"然后就挂了\",{\"1\":{\"1872\":1,\"3949\":1}}],[\"然后整个事务期间都在用这个\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"然后整个事务执行期间都在用这个\",{\"1\":{\"2378\":1,\"4711\":1}}],[\"然后事务\",{\"1\":{\"2504\":1,\"2506\":1,\"4837\":1,\"4839\":1}}],[\"然后继续执行代码逻辑处理\",{\"1\":{\"2500\":1,\"4833\":1}}],[\"然后给该字段赋值一个自增的值\",{\"1\":{\"2438\":1,\"4771\":1}}],[\"然后为被\",{\"1\":{\"2434\":1,\"4767\":1}}],[\"然后对读取的记录加独占锁\",{\"1\":{\"2424\":1,\"4757\":1}}],[\"然后对读取的记录加共享锁\",{\"1\":{\"2424\":1,\"4757\":1}}],[\"然后对该记录加独占锁\",{\"1\":{\"2421\":1,\"4754\":1}}],[\"然后对分区做取模得到分区编号\",{\"1\":{\"940\":1,\"5087\":1}}],[\"然后以\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"然后同步到另外一个机房\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"然后新表的数据\",{\"1\":{\"1865\":1,\"3942\":1}}],[\"然后加到sql里\",{\"1\":{\"1863\":1,\"3940\":1}}],[\"然后根据查询到的结果\",{\"1\":{\"1855\":1,\"3932\":1}}],[\"然后根据该\",{\"1\":{\"734\":1,\"3722\":1}}],[\"然后将已点赞的信息存入redis中\",{\"1\":{\"1846\":1,\"3923\":1}}],[\"然后将http的请求的响应结果\",{\"1\":{\"1764\":1,\"4324\":1}}],[\"然后要发给\",{\"1\":{\"1813\":1,\"4373\":1}}],[\"然后广播出去\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"然后广播给其他\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"然后也广播给其他\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"然后每个\",{\"1\":{\"1805\":1,\"4365\":1}}],[\"然后再写入到\",{\"1\":{\"2651\":1,\"4984\":1}}],[\"然后再执行更新操作\",{\"1\":{\"2495\":1,\"4828\":1}}],[\"然后再做表结构的变更\",{\"1\":{\"2416\":1,\"4749\":1}}],[\"然后再一路顺藤摸瓜找到位于下层的某台目标\",{\"1\":{\"2211\":1,\"5264\":1}}],[\"然后再广播出去\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"然后再分析他们的作用\",{\"1\":{\"393\":1}}],[\"然后\",{\"1\":{\"1768\":1,\"2411\":1,\"2708\":1,\"4328\":1,\"4744\":1,\"5041\":1}}],[\"然后分发给底层不同的worker来处理\",{\"1\":{\"993\":1,\"5140\":1}}],[\"然后这个consumer内部用内存队列做排队\",{\"1\":{\"993\":1,\"5140\":1}}],[\"然后consumer消费该数据之后\",{\"1\":{\"975\":1,\"5122\":1}}],[\"然后订阅这个topic的消费组的消费者再进行排序\",{\"1\":{\"946\":1,\"5093\":1}}],[\"然后在用户态中再处理这些连接对应的请求即可\",{\"1\":{\"1053\":1,\"1221\":1,\"1389\":1,\"1557\":1,\"4435\":1}}],[\"然后在对应的mapper\",{\"1\":{\"903\":1,\"3891\":1}}],[\"然后在给插件编写注解\",{\"1\":{\"895\":1,\"3883\":1}}],[\"然后重写\",{\"1\":{\"892\":1,\"3880\":1}}],[\"然后做出相应的响应处理\",{\"1\":{\"849\":1,\"3837\":1}}],[\"然后通过dubbo调用api来完成保存操作\",{\"1\":{\"1846\":1,\"3923\":1}}],[\"然后通过反射的方式打印capacity和size\",{\"1\":{\"407\":1}}],[\"然后通过扰动计算和按位与的方式计算出这个元素的存储位置\",{\"1\":{\"380\":1}}],[\"然后你得用treemap\",{\"1\":{\"292\":1,\"3569\":1}}],[\"然后你修改代码\",{\"1\":{\"288\":1,\"3565\":1}}],[\"效果等同于hash\",{\"1\":{\"528\":1,\"3617\":1}}],[\"效率问题\",{\"1\":{\"3174\":1,\"5425\":1}}],[\"效率不会大幅度降低\",{\"1\":{\"1060\":1,\"1228\":1,\"1396\":1,\"1564\":1,\"4442\":1}}],[\"效率较低\",{\"1\":{\"2281\":1,\"2282\":1,\"2292\":1,\"4614\":1,\"4615\":1,\"4625\":1}}],[\"效率较⾼缺点\",{\"1\":{\"674\":1,\"3662\":1}}],[\"效率较高\",{\"1\":{\"643\":1,\"3631\":1}}],[\"效率低\",{\"1\":{\"536\":1}}],[\"效率高\",{\"1\":{\"535\":1}}],[\"效率比较高\",{\"1\":{\"367\":1}}],[\"效率比较低\",{\"1\":{\"344\":1}}],[\"效率都为o\",{\"1\":{\"363\":1}}],[\"效率都比较低\",{\"1\":{\"342\":1}}],[\"效率为o\",{\"1\":{\"341\":1,\"342\":1,\"344\":1}}],[\"效率是o\",{\"1\":{\"334\":1}}],[\"冲突的元素\",{\"0\":{\"521\":1,\"3610\":1}}],[\"他妈的开始狗叫\",{\"1\":{\"3053\":1,\"5304\":1}}],[\"他妈的\",{\"1\":{\"3045\":1,\"5296\":1}}],[\"他问还有呢\",{\"1\":{\"3045\":1,\"5296\":1}}],[\"他就非得问springboot\",{\"1\":{\"3036\":1,\"5287\":1}}],[\"他保存这线程的引用threadid\",{\"1\":{\"2835\":1,\"4060\":1}}],[\"他说你了解的很少\",{\"1\":{\"3041\":1,\"5292\":1}}],[\"他说还是不够快\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"他说这个方案可以\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"他发送给了\",{\"1\":{\"1813\":1,\"4373\":1}}],[\"他们可以使用\",{\"1\":{\"2938\":1,\"4163\":1}}],[\"他们也会比较自己的投票和收到的投票\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"他们底层的实现都是一样的\",{\"1\":{\"475\":1}}],[\"他要求系统有大量的服务器集群\",{\"1\":{\"1727\":1,\"4287\":1}}],[\"他可以将所有的list的子类转成线程安全的类\",{\"1\":{\"514\":1}}],[\"凡事都有但是\",{\"1\":{\"510\":1}}],[\"||\",{\"1\":{\"484\":1,\"2959\":5,\"4184\":5}}],[\"同财务相关的金额类数据必须使用\",{\"0\":{\"2563\":1,\"4896\":1}}],[\"同时作为消息中间件异步消费任务\",{\"1\":{\"3104\":1,\"5355\":1}}],[\"同时这样对数据库性能开销影响也很大\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"同时阻塞该线程\",{\"1\":{\"2829\":1,\"4054\":1}}],[\"同时加\",{\"1\":{\"2812\":1,\"4037\":1}}],[\"同时\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"同时对\",{\"1\":{\"2030\":1}}],[\"同时还实现了二进制分帧\",{\"1\":{\"1895\":1,\"1910\":1,\"1951\":1,\"1966\":1,\"5157\":1}}],[\"同时集群中已经有过半的机器与该\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"同时设置了\",{\"1\":{\"929\":1,\"5076\":1}}],[\"同一局域网内的\",{\"0\":{\"2152\":1,\"5205\":1},\"1\":{\"2150\":1,\"5203\":1}}],[\"同一项目的不同模块不同功能互相抢占资源\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"同一端出\",{\"1\":{\"612\":1}}],[\"同学的看法\",{\"1\":{\"635\":1}}],[\"同样会降低查询性能\",{\"1\":{\"2346\":1,\"4679\":1}}],[\"同样作为一种特殊的线性数据结构\",{\"1\":{\"607\":1}}],[\"同样可以构造一个实例\",{\"1\":{\"315\":1,\"3592\":1}}],[\"同理\",{\"1\":{\"531\":1,\"3620\":1}}],[\"同步队列\",{\"1\":{\"2982\":1,\"4207\":1}}],[\"同步队列中\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"同步语句块的实现使用的是\",{\"1\":{\"2917\":1,\"2930\":1,\"4142\":1,\"4155\":1}}],[\"同步语句块的情况\",{\"0\":{\"2913\":1,\"4138\":1}}],[\"同步\",{\"1\":{\"2769\":1,\"3994\":1}}],[\"同步到到磁盘\",{\"1\":{\"2664\":1,\"4997\":1}}],[\"同步一次\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"同步硬盘操作通常依赖于系统调度机制\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"同步保存操作\",{\"1\":{\"2646\":1,\"4979\":1}}],[\"同步更新数据\",{\"1\":{\"1793\":1,\"4353\":1}}],[\"同步的关系\",{\"1\":{\"1035\":1,\"1203\":1,\"1371\":1,\"1539\":1,\"4417\":1}}],[\"同步阻塞\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"同步块的⽬的与之前相同\",{\"1\":{\"674\":1,\"3662\":1}}],[\"同步块可以更加精确的控制锁的作用域\",{\"1\":{\"505\":1}}],[\"同步方法的锁的作用域就是整个方法\",{\"1\":{\"505\":1}}],[\"同步代码块可以选择对哪个对象加锁\",{\"1\":{\"506\":1}}],[\"同步代码块在锁定的范围上可能比同步方法要小\",{\"1\":{\"504\":1}}],[\"同步代码块和同步方法的区别\",{\"1\":{\"502\":1}}],[\"同步处理\",{\"1\":{\"468\":1}}],[\"话不多说\",{\"1\":{\"453\":1,\"560\":1,\"1969\":1,\"3273\":1}}],[\"questions\",{\"1\":{\"2749\":1,\"2933\":1,\"3022\":1,\"3974\":1,\"4158\":1,\"4247\":1}}],[\"queuing\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"queue<integer>\",{\"1\":{\"600\":2,\"630\":2}}],[\"queue\",{\"1\":{\"450\":1,\"599\":1,\"603\":1,\"604\":1,\"605\":2,\"606\":2,\"607\":1,\"2959\":3,\"4184\":3}}],[\"quicklist\",{\"1\":{\"2609\":1,\"4942\":1}}],[\"quick\",{\"1\":{\"2191\":1,\"5162\":1,\"5244\":1}}],[\"quic\",{\"1\":{\"2061\":1,\"2191\":4,\"2192\":1,\"2193\":1,\"5162\":4,\"5244\":4,\"5245\":1,\"5246\":1}}],[\"quic成为http\",{\"1\":{\"1888\":1,\"1903\":1,\"1918\":1,\"1931\":1,\"1944\":1,\"1959\":1,\"5150\":1,\"5173\":1}}],[\"q8\",{\"0\":{\"622\":1}}],[\"q7\",{\"0\":{\"613\":1}}],[\"q6\",{\"0\":{\"610\":1}}],[\"q5\",{\"0\":{\"595\":1}}],[\"q4\",{\"0\":{\"591\":1}}],[\"q3\",{\"0\":{\"574\":1}}],[\"q2\",{\"0\":{\"567\":1},\"1\":{\"600\":1,\"601\":2,\"605\":1,\"630\":2}}],[\"q1\",{\"0\":{\"561\":1},\"1\":{\"600\":1,\"601\":2,\"605\":1,\"630\":2}}],[\"qq\",{\"1\":{\"326\":1,\"519\":1,\"831\":1,\"995\":1,\"2772\":1,\"2877\":1,\"3022\":1,\"3288\":1,\"3603\":1,\"3608\":1,\"3819\":1,\"3997\":1,\"4102\":1,\"4247\":1,\"5142\":1}}],[\"考虑treemap\",{\"1\":{\"438\":1}}],[\"查询条件中使用\",{\"1\":{\"2359\":1,\"4692\":1}}],[\"查询比如\",{\"1\":{\"2358\":1,\"4691\":1}}],[\"查询速度非常快\",{\"1\":{\"2311\":1,\"4644\":1}}],[\"查询转发表\",{\"1\":{\"2171\":1,\"5224\":1}}],[\"查询分组相同的构造\",{\"1\":{\"2161\":1,\"5214\":1}}],[\"查询分组将广播给该局域网内的所有设备\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"查询分组中\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"查询分组\",{\"1\":{\"2157\":1,\"5210\":1}}],[\"查询的时候\",{\"1\":{\"1865\":1,\"3942\":1}}],[\"查询\",{\"0\":{\"2575\":1,\"4908\":1},\"1\":{\"643\":1,\"2167\":1,\"3631\":1,\"5220\":1}}],[\"查找操作时\",{\"1\":{\"656\":1,\"3644\":1}}],[\"查找\",{\"1\":{\"437\":1}}],[\"查看是否有记录存在独占锁\",{\"1\":{\"2427\":1,\"4760\":1}}],[\"查看头部元素的效率很高\",{\"1\":{\"358\":1}}],[\"查看详情\",{\"1\":{\"54\":1,\"56\":1,\"59\":1,\"63\":1,\"66\":1,\"69\":1,\"72\":1,\"76\":1,\"79\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"93\":1,\"99\":1,\"101\":1,\"104\":1,\"106\":1,\"108\":1,\"110\":1,\"3342\":1,\"3344\":1,\"3347\":1,\"3351\":1,\"3354\":1,\"3357\":1,\"3360\":1,\"3364\":1,\"3367\":1,\"3370\":1,\"3372\":1,\"3374\":1,\"3376\":1,\"3378\":1,\"3381\":1,\"3387\":1,\"3389\":1,\"3392\":1,\"3394\":1,\"3396\":1,\"3398\":1}}],[\"邻近键等\",{\"1\":{\"435\":1}}],[\"两点建议\",{\"1\":{\"3133\":1,\"5384\":1}}],[\"两点原因\",{\"1\":{\"3059\":1,\"5310\":1}}],[\"两台主机所在的子网由一台路由器联通\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"两个操作能保证是原子性吗\",{\"1\":{\"2794\":1,\"4019\":1}}],[\"两个子类\",{\"1\":{\"2746\":1,\"3971\":1}}],[\"两个机房都能写入\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"两个机房\",{\"0\":{\"1868\":1,\"3945\":1}}],[\"两个变量\",{\"1\":{\"1012\":1}}],[\"两个数的乘积都是整数\",{\"1\":{\"421\":1}}],[\"两次执行相同\",{\"1\":{\"900\":1,\"3888\":1}}],[\"两者各有千秋\",{\"1\":{\"2673\":1,\"5006\":1}}],[\"两者的实现方式不太一样\",{\"1\":{\"2274\":1,\"4607\":1}}],[\"两者的add方法在扩容方面的差别也就是arraylist和vector的差别\",{\"1\":{\"487\":1}}],[\"两者的扩充数组容量方式不一样\",{\"1\":{\"487\":1}}],[\"两者中的值都不能重复\",{\"1\":{\"379\":1}}],[\"设置成功\",{\"1\":{\"3200\":1,\"5451\":1}}],[\"设置成0\",{\"1\":{\"421\":1}}],[\"设置\",{\"1\":{\"3196\":1,\"5447\":1}}],[\"设置指定的值\",{\"1\":{\"3195\":1,\"5446\":1}}],[\"设置二级缓存\",{\"1\":{\"2729\":1,\"5062\":1}}],[\"设置不同的失效时间比如随机设置缓存的失效时间\",{\"1\":{\"2727\":1,\"5060\":1}}],[\"设置热点数据永不过期或者过期时间比较长\",{\"1\":{\"2712\":1,\"5045\":1}}],[\"设置过期时间还是有问题的\",{\"1\":{\"2674\":1,\"5007\":1}}],[\"设置中填写的\",{\"1\":{\"2213\":1,\"5266\":1}}],[\"设计目标\",{\"1\":{\"1734\":1,\"4294\":1}}],[\"设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案\",{\"1\":{\"667\":1,\"3655\":1}}],[\"设计模式\",{\"1\":{\"667\":1,\"3655\":1}}],[\"设计的另一个不合理之处\",{\"1\":{\"607\":1}}],[\"设计中\",{\"1\":{\"590\":1}}],[\"设计原则\",{\"1\":{\"589\":1}}],[\"设计成16的好处主要是可以使用按位与替代取模来提升hash的效率\",{\"1\":{\"409\":1}}],[\"前驱结点\",{\"1\":{\"2835\":1,\"4060\":1}}],[\"前驱节点\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"前面部分是一致的\",{\"1\":{\"2827\":1,\"4052\":1}}],[\"前面也提到\",{\"1\":{\"2450\":1,\"4783\":1}}],[\"前面已经介绍了\",{\"1\":{\"2279\":1,\"4612\":1}}],[\"前面我们提到过\",{\"1\":{\"417\":1}}],[\"前缀匹配的范围查询\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"前缀索引仅限于字符串类型\",{\"1\":{\"2352\":1,\"4685\":1}}],[\"前缀索引是对文本的前几个字符创建索引\",{\"1\":{\"2304\":1,\"4637\":1}}],[\"前缀索引只适用于字符串类型的数据\",{\"1\":{\"2304\":1,\"4637\":1}}],[\"前缀索引\",{\"1\":{\"2304\":1,\"4637\":1}}],[\"前缀索引等索引属于二级索引\",{\"1\":{\"2300\":1,\"4633\":1}}],[\"前缀是\",{\"1\":{\"2197\":2,\"5250\":2}}],[\"前缀\",{\"1\":{\"2197\":1,\"5250\":1}}],[\"前一个\",{\"1\":{\"2030\":1}}],[\"前端查询时把id返回过来了\",{\"1\":{\"1863\":1,\"3940\":1}}],[\"前端控制servelt\",{\"1\":{\"733\":1,\"3721\":1}}],[\"前端控制器\",{\"1\":{\"730\":2,\"3718\":2}}],[\"前提条件\",{\"1\":{\"967\":1,\"5114\":1}}],[\"前置创建\",{\"1\":{\"809\":1,\"3797\":1}}],[\"前者线程安全的\",{\"1\":{\"551\":1}}],[\"前三个阶段可以统称为连接\",{\"1\":{\"188\":1,\"3471\":1}}],[\"尤其是面对大规模数据的时候\",{\"1\":{\"634\":1}}],[\"尤其是当你已知map中存放的元素个数时\",{\"1\":{\"415\":1}}],[\"尤其经常从两端进行操作\",{\"1\":{\"346\":1}}],[\"分数排序\",{\"1\":{\"3168\":1,\"5419\":1}}],[\"分为两种\",{\"1\":{\"2549\":1,\"4882\":1}}],[\"分为两个步骤\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"分为三大类\",{\"1\":{\"668\":1,\"3656\":1}}],[\"分钟后\",{\"1\":{\"2669\":1,\"5002\":1}}],[\"分钟\",{\"1\":{\"2148\":1,\"2669\":1,\"2696\":1,\"5002\":1,\"5029\":1,\"5201\":1}}],[\"分片不同\",{\"1\":{\"2071\":1}}],[\"分片的核心思路在于\",{\"1\":{\"1874\":1,\"3951\":1}}],[\"分组有两类\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"分组是一种特殊报文\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"分组\",{\"1\":{\"2030\":1}}],[\"分表的数据\",{\"0\":{\"1864\":1,\"3941\":1}}],[\"分多个线程分批\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"分批操作\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"分布式锁解决集群下的方法抢占执行\",{\"0\":{\"3189\":1,\"5440\":1},\"1\":{\"3097\":1,\"5348\":1}}],[\"分布式锁\",{\"1\":{\"2603\":1,\"3192\":1,\"4936\":1,\"5443\":1}}],[\"分布式锁和分布式队列等功能\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"分布式系统理论上不可能选择\",{\"1\":{\"1834\":1,\"4394\":1}}],[\"分布式系统中\",{\"1\":{\"1829\":1,\"4389\":1}}],[\"分布式系统出现网络分区的时候\",{\"1\":{\"1827\":1,\"4387\":1}}],[\"分布式系统开发的成本高\",{\"1\":{\"1741\":1,\"4301\":1}}],[\"分布式协调\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"分布式服务追踪\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"分布式配置中心\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"分布式事务等\",{\"1\":{\"1741\":1,\"4301\":1}}],[\"分布式事物\",{\"1\":{\"1730\":1,\"4290\":1}}],[\"分布式\",{\"0\":{\"5481\":1},\"1\":{\"1711\":1,\"4271\":1}}],[\"分享\",{\"1\":{\"1694\":1,\"4254\":1}}],[\"分配结果\",{\"1\":{\"950\":1,\"5097\":1}}],[\"分配到的分区数量\",{\"1\":{\"949\":1,\"5096\":1}}],[\"分配分区的起始位置\",{\"1\":{\"949\":1,\"5096\":1}}],[\"分配示意图如下\",{\"1\":{\"946\":1,\"5093\":1}}],[\"分配一个较大的初始值属于最佳实践\",{\"1\":{\"451\":1}}],[\"分区\",{\"1\":{\"1835\":1,\"3115\":2,\"4395\":1,\"5366\":2}}],[\"分区容忍性三者你只能同时达到其中两个\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"分区容错性\",{\"1\":{\"1822\":1,\"1827\":1,\"4382\":1,\"4387\":1}}],[\"分区容错也使得系统更加健壮\",{\"1\":{\"1727\":1,\"4287\":1}}],[\"分区的分配尽量的均衡\",{\"1\":{\"964\":1,\"5111\":1}}],[\"分区的原则\",{\"1\":{\"936\":1,\"5083\":1}}],[\"分区分配的算法如下\",{\"1\":{\"948\":1,\"5095\":1}}],[\"分区分配策略\",{\"1\":{\"942\":1,\"5089\":1}}],[\"分区策略使用一致性哈希\",{\"1\":{\"1865\":1,\"3942\":1}}],[\"分区策略\",{\"0\":{\"930\":1,\"5077\":1}}],[\"分区被划分为若干个片段\",{\"1\":{\"928\":1,\"5075\":1}}],[\"分页插件的基本原理是使用\",{\"1\":{\"892\":1,\"3880\":1}}],[\"分页插件的原理是什么\",{\"0\":{\"887\":1,\"3875\":1}}],[\"分析出\",{\"1\":{\"2168\":1,\"5221\":1}}],[\"分析\",{\"1\":{\"463\":1}}],[\"分别放到数据库中\",{\"1\":{\"3263\":1}}],[\"分别指向直接的的前驱节点和后继节点\",{\"1\":{\"2830\":1,\"4055\":1}}],[\"分别如下\",{\"1\":{\"2482\":1,\"4815\":1}}],[\"分别的应用场景是\",{\"0\":{\"2050\":1},\"1\":{\"1977\":1}}],[\"分别是\",{\"1\":{\"1781\":1,\"1791\":1,\"1811\":1,\"4341\":1,\"4351\":1,\"4371\":1}}],[\"分别是边缘触发\",{\"1\":{\"1063\":1,\"1231\":1,\"1399\":1,\"1567\":1,\"4445\":1}}],[\"分别介绍这三个经典的\",{\"1\":{\"1131\":1,\"1299\":1,\"1467\":1,\"1635\":1,\"4513\":1}}],[\"分别拥有1\",{\"1\":{\"959\":1,\"5106\":1}}],[\"分别到一个文本文件中去\",{\"1\":{\"462\":1}}],[\"分别输出\",{\"1\":{\"412\":1}}],[\"分别执行以上3段代码\",{\"1\":{\"412\":1}}],[\"分类为\",{\"1\":{\"118\":1,\"3406\":1}}],[\"900\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"9time\",{\"0\":{\"2114\":1}}],[\"9第三次握手丢失了\",{\"0\":{\"2103\":1}}],[\"95\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"99\",{\"1\":{\"1806\":2,\"4366\":2}}],[\"9\",{\"1\":{\"411\":1,\"413\":1,\"2566\":1,\"3043\":1,\"3080\":1,\"4899\":1,\"5294\":1,\"5331\":1}}],[\"桶中元素的插入只会在hash冲突时发生\",{\"1\":{\"524\":1,\"3613\":1}}],[\"桶\",{\"1\":{\"405\":1}}],[\"默认循环10次\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"默认使用非公平锁\",{\"1\":{\"2747\":1,\"3972\":1}}],[\"默认使用的是\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"默认使用的\",{\"1\":{\"2246\":1,\"4579\":1}}],[\"默认的文件名是\",{\"1\":{\"2653\":1,\"4986\":1}}],[\"默认的触发模式是水平触发\",{\"1\":{\"1072\":1,\"1240\":1,\"1408\":1,\"1576\":1,\"4454\":1}}],[\"默认选项\",{\"1\":{\"2647\":1,\"4980\":1}}],[\"默认为行级锁\",{\"1\":{\"2242\":1,\"4575\":1}}],[\"默认是非公平锁\",{\"1\":{\"2910\":1,\"4135\":1}}],[\"默认是\",{\"1\":{\"2196\":2,\"5249\":2}}],[\"默认没有开启二级缓存\",{\"1\":{\"900\":1,\"3888\":1}}],[\"默认开启一级缓存\",{\"1\":{\"898\":1,\"3886\":1}}],[\"默认都是有parent的\",{\"1\":{\"863\":1,\"3851\":1}}],[\"默认都是单例的\",{\"1\":{\"748\":1,\"3736\":1}}],[\"默认spring\",{\"1\":{\"817\":1,\"3805\":1}}],[\"默认采用的持久化方式\",{\"1\":{\"2642\":1,\"4975\":1}}],[\"默认采用的\",{\"1\":{\"768\":2,\"3756\":2}}],[\"默认初始容量和扩容机制\",{\"1\":{\"540\":1}}],[\"默认值\",{\"1\":{\"2607\":2,\"2615\":1,\"2622\":2,\"4940\":2,\"4948\":1,\"4955\":2}}],[\"默认值是16\",{\"1\":{\"431\":1}}],[\"默认值为0\",{\"1\":{\"421\":1}}],[\"默认情况下这两个变量都是\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"默认情况下也是非公平的\",{\"1\":{\"2741\":1,\"3966\":1}}],[\"默认情况下arraylist的初始容量非常小\",{\"1\":{\"451\":1}}],[\"默认情况下hashmap的容量是16\",{\"1\":{\"413\":1}}],[\"默认情况下\",{\"1\":{\"409\":1,\"422\":1,\"928\":1,\"2649\":1,\"4982\":1,\"5075\":1}}],[\"默认容量是16\",{\"1\":{\"402\":1}}],[\"默认实现是空方法\",{\"1\":{\"213\":1,\"3496\":1}}],[\"临界值\",{\"1\":{\"400\":1}}],[\"先做一个两分钟以内的自我介绍\",{\"1\":{\"3072\":1,\"5323\":1}}],[\"先判断头结点是不是signal状态\",{\"1\":{\"2827\":1,\"4052\":1}}],[\"先判断用户发来的请求的值是否存在于布隆过滤器中\",{\"1\":{\"2699\":1,\"5032\":1}}],[\"先比较当前锁标志位是否为\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"先获取互斥锁\",{\"1\":{\"2714\":1,\"5047\":1}}],[\"先开始从数据库查询账户余额大于\",{\"1\":{\"2504\":1,\"4837\":1}}],[\"先开始从数据库中读取小林的余额数据\",{\"1\":{\"2495\":1,\"2500\":1,\"4828\":1,\"4833\":1}}],[\"先会加上表级别的意向独占锁\",{\"1\":{\"2428\":1,\"4761\":1}}],[\"先表上加上意向独占锁\",{\"1\":{\"2424\":1,\"4757\":1}}],[\"先在表上加上意向共享锁\",{\"1\":{\"2424\":1,\"4757\":1}}],[\"先要看看数据库中的长事务\",{\"1\":{\"2416\":1,\"4749\":1}}],[\"先要了解下什么是循环依赖\",{\"1\":{\"786\":1,\"3774\":1}}],[\"先启用了事务\",{\"1\":{\"2410\":1,\"4743\":1}}],[\"先来先获取的公平性原则\",{\"1\":{\"2903\":1,\"4128\":1}}],[\"先来说说表锁\",{\"1\":{\"2390\":1,\"4723\":1}}],[\"先来看看\",{\"1\":{\"1155\":1,\"1323\":1,\"1491\":1,\"1659\":1,\"4537\":1}}],[\"先来看一下\",{\"1\":{\"391\":1}}],[\"先构造\",{\"1\":{\"2170\":1,\"5223\":1}}],[\"先给大家列出目录\",{\"1\":{\"1970\":1}}],[\"先查老的\",{\"1\":{\"1865\":1,\"3942\":1}}],[\"先查询数据库改用户是否进行点赞\",{\"1\":{\"1846\":1,\"3923\":1}}],[\"先查询成品缓存\",{\"1\":{\"810\":1,\"3798\":1}}],[\"先关注自己的开发\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"先把所有连接\",{\"1\":{\"1053\":1,\"1221\":1,\"1389\":1,\"1557\":1,\"4435\":1}}],[\"先进先出\",{\"1\":{\"1042\":1,\"1210\":1,\"1378\":1,\"1546\":1,\"4424\":1}}],[\"先去项目根目录找config文件夹下找配置文件件\",{\"1\":{\"828\":1,\"3816\":1}}],[\"先看一个简单的\",{\"1\":{\"271\":1,\"3548\":1}}],[\"扩容时可能会出现循环链表的情况\",{\"1\":{\"520\":1,\"3609\":1}}],[\"扩容之后\",{\"1\":{\"520\":1,\"3609\":1}}],[\"扩容的时候使用的arrays\",{\"1\":{\"469\":1}}],[\"扩容\",{\"0\":{\"390\":1}}],[\"扩展类加载器\",{\"1\":{\"207\":1,\"3490\":1}}],[\"扩展\",{\"0\":{\"34\":1,\"36\":1,\"3322\":1,\"3324\":1},\"1\":{\"38\":1,\"3326\":1}}],[\"构成一个高效可靠的原语集\",{\"1\":{\"1772\":1,\"4332\":1}}],[\"构建项目工程\",{\"1\":{\"3100\":1,\"5351\":1}}],[\"构建一个微服务比较复杂\",{\"1\":{\"1729\":1,\"4289\":1}}],[\"构建杰出的软件\",{\"1\":{\"1693\":1,\"4253\":1}}],[\"构建堆heapify的效率为o\",{\"1\":{\"358\":1}}],[\"构造类的实例化对象\",{\"0\":{\"3586\":1}}],[\"构造函数的方式\",{\"1\":{\"3004\":1,\"4229\":1}}],[\"构造映射信息\",{\"1\":{\"2162\":1,\"5215\":1}}],[\"构造的查询分组将在该局域网内广播\",{\"1\":{\"2159\":1,\"5212\":1}}],[\"构造⽅法必须是私有的\",{\"1\":{\"671\":1,\"3659\":1}}],[\"构造实例会调用默认无参构造器\",{\"1\":{\"312\":1,\"3589\":1}}],[\"构造器调用newinstance\",{\"1\":{\"313\":1,\"3590\":1}}],[\"构造器\",{\"1\":{\"295\":1,\"300\":1,\"3572\":1,\"3577\":1}}],[\"优化四\",{\"0\":{\"3123\":1,\"5374\":1}}],[\"优化三\",{\"0\":{\"3119\":1,\"5370\":1}}],[\"优化二\",{\"0\":{\"3113\":1,\"5364\":1}}],[\"优化一\",{\"0\":{\"3109\":1,\"5360\":1}}],[\"优化\",{\"0\":{\"3108\":1,\"5359\":1}}],[\"优化器生成执行计划的时间\",{\"1\":{\"2346\":1,\"4679\":1}}],[\"优化器在选择如何优化查询时\",{\"1\":{\"2346\":1,\"4679\":1}}],[\"优化了存储\",{\"1\":{\"464\":1}}],[\"优势在于范围查找\",{\"1\":{\"2281\":1,\"4614\":1}}],[\"优缺点\",{\"1\":{\"1736\":1,\"4296\":1}}],[\"优先选择符合存储需要的最小的数据类型\",{\"0\":{\"2561\":1,\"4894\":1}}],[\"优先保证第一个目标\",{\"1\":{\"966\":1,\"5113\":1}}],[\"优先考虑hashmap\",{\"1\":{\"438\":1}}],[\"优先级可以有相同的\",{\"1\":{\"357\":1}}],[\"优点\",{\"1\":{\"233\":1,\"674\":1,\"1738\":1,\"2310\":1,\"2319\":1,\"2904\":1,\"2907\":1,\"3516\":1,\"3662\":1,\"4129\":1,\"4132\":1,\"4298\":1,\"4643\":1,\"4652\":1}}],[\"即盐值salt\",{\"1\":{\"3256\":1}}],[\"即一种基于模板和要改变的数据\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"即一条连接只有两个端点\",{\"1\":{\"2057\":1}}],[\"即永远不会阻塞\",{\"1\":{\"2983\":1,\"4208\":1}}],[\"即将暂时获取不到锁的线程加入到队列中\",{\"1\":{\"2831\":1,\"4056\":1}}],[\"即队列同步器\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"即不存在多个线程的竞争时\",{\"1\":{\"2759\":1,\"3984\":1}}],[\"即在某个时间点上没有字节码正在执行时\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"即在就绪状态的进程除cpu之外\",{\"1\":{\"1021\":1,\"1189\":1,\"1357\":1,\"1525\":1,\"4403\":1}}],[\"即下一个将被分配的事务\",{\"1\":{\"2540\":1,\"4873\":1}}],[\"即便系统故障也不会丢失\",{\"1\":{\"2486\":1,\"4819\":1}}],[\"即能保护该记录\",{\"1\":{\"2469\":1,\"4802\":1}}],[\"即两个事务可以同时持有包含共同间隙范围的间隙锁\",{\"1\":{\"2466\":1,\"4799\":1}}],[\"即索引结构和数据分开存放的索引\",{\"1\":{\"2317\":1,\"4650\":1}}],[\"即索引结构和数据一起存放的索引\",{\"1\":{\"2308\":1,\"4641\":1}}],[\"即可快速取出对应的值\",{\"1\":{\"2264\":1,\"4597\":1}}],[\"即为主机\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"即刻传输数据\",{\"1\":{\"2055\":1}}],[\"即允许同时通过单一的http\",{\"1\":{\"1894\":1,\"1909\":1,\"1924\":1,\"1937\":1,\"1950\":1,\"1965\":1,\"5156\":1,\"5179\":1}}],[\"即拿到订单消息\",{\"1\":{\"1854\":1,\"3931\":1}}],[\"即删除消息\",{\"1\":{\"1853\":1,\"3930\":1}}],[\"即commit执行结果到mq服务器\",{\"1\":{\"1852\":1,\"3929\":1}}],[\"即上面我们说的三个角色的总称\",{\"1\":{\"1791\":1,\"4351\":1}}],[\"即上面提到的fast\",{\"1\":{\"464\":1}}],[\"即独立运行在某个进程中\",{\"1\":{\"1726\":1,\"4286\":1}}],[\"即服务单元\",{\"1\":{\"1714\":1,\"4274\":1}}],[\"即用户态和内核态都指向了就绪链表\",{\"1\":{\"1061\":1,\"1229\":1,\"1397\":1,\"1565\":1,\"4443\":1}}],[\"即确定哪个partition由哪个consumer来消费\",{\"1\":{\"943\":1,\"5090\":1}}],[\"即车中包含一个成员变量\",{\"1\":{\"581\":1}}],[\"即\",{\"1\":{\"577\":1,\"580\":1,\"672\":1,\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"3660\":1,\"4426\":1}}],[\"即list的size个数的elementdata\",{\"1\":{\"456\":1}}],[\"即相同元素在set中只会保留一份\",{\"1\":{\"375\":1}}],[\"即先放入的元素不一定排在前面\",{\"1\":{\"375\":1}}],[\"即先放入的元素排在前面\",{\"1\":{\"373\":1}}],[\"即排序中的第一个\",{\"1\":{\"356\":1}}],[\"即使中途有其他事务插入了一条数据\",{\"1\":{\"2524\":1,\"4857\":1}}],[\"即使没有提交事务\",{\"1\":{\"2495\":1,\"4828\":1}}],[\"即使没有用try\",{\"1\":{\"243\":1,\"3528\":1}}],[\"即使其他事务更新了表的数据\",{\"1\":{\"2379\":1,\"4712\":1}}],[\"即使网络非常拥堵了\",{\"1\":{\"2064\":1}}],[\"即使它先收到了后面的\",{\"1\":{\"2030\":1}}],[\"即使你一直没有去取\",{\"1\":{\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"4449\":1}}],[\"即使进程没有调用\",{\"1\":{\"1065\":1,\"1233\":1,\"1401\":1,\"1569\":1,\"4447\":1}}],[\"即使数据库发生故障也不应该对其有任何影响\",{\"1\":{\"760\":1,\"3748\":1}}],[\"即使\",{\"1\":{\"312\":1,\"3589\":1}}],[\"最大扩容可达\",{\"1\":{\"2983\":1,\"4208\":1}}],[\"最大可以同时运行的线程数量\",{\"1\":{\"2961\":1,\"4186\":1}}],[\"最大的改造就是使用了\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"最大的问题在于\",{\"1\":{\"570\":1}}],[\"最大的问题是\",{\"1\":{\"568\":1}}],[\"最基本的就是首先做好参数校验\",{\"1\":{\"2694\":1,\"5027\":1}}],[\"最友好\",{\"1\":{\"2671\":1,\"5004\":1}}],[\"最左前缀匹配原则指的是\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"最左前缀匹配原则\",{\"1\":{\"2330\":1,\"4663\":1}}],[\"最近一段时间以来\",{\"1\":{\"1883\":1,\"1898\":1,\"1913\":1,\"1926\":1,\"1939\":1,\"1954\":1,\"5144\":1,\"5169\":1}}],[\"最佳部署容器docker\",{\"1\":{\"1732\":1,\"4292\":1}}],[\"最好在创建主题的时候就把分区规划好\",{\"1\":{\"940\":1,\"5087\":1}}],[\"最终的变量是放在了当前线程的\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"最终的结果\",{\"1\":{\"631\":1}}],[\"最终结果都是\",{\"1\":{\"2806\":1,\"4031\":1}}],[\"最终还是要\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"最终转换成http的请求形式\",{\"1\":{\"1764\":1,\"4324\":1}}],[\"最终给开发者留出了一套简单易懂\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"最终它调用了\",{\"1\":{\"1109\":1,\"1277\":1,\"1445\":1,\"1613\":1,\"4491\":1}}],[\"最终加载meta\",{\"1\":{\"816\":1,\"3804\":1}}],[\"最终获取到以后调用\",{\"1\":{\"810\":1,\"3798\":1}}],[\"最终导致依赖创建失败\",{\"1\":{\"790\":1,\"3778\":1}}],[\"最高的隔离级别\",{\"1\":{\"772\":1,\"3760\":1}}],[\"最低的隔离级别\",{\"1\":{\"769\":1,\"3757\":1}}],[\"最长路径刚好是最短路径的两倍\",{\"1\":{\"645\":1,\"3633\":1}}],[\"最长路径就是一个红节点一个黑节点\",{\"1\":{\"645\":1,\"3633\":1}}],[\"最短路径就是全黑节点\",{\"1\":{\"645\":1,\"3633\":1}}],[\"最后问有offer吗\",{\"1\":{\"3084\":1,\"5335\":1}}],[\"最后问我啥时能来实习\",{\"1\":{\"3054\":1,\"5305\":1}}],[\"最后女的hr问看你成绩这么好\",{\"1\":{\"3081\":1,\"5332\":1}}],[\"最后让明天面试\",{\"1\":{\"3032\":1,\"5283\":1}}],[\"最后直到成功为止\",{\"1\":{\"2776\":1,\"4001\":1}}],[\"最后再根据持久化方式\",{\"1\":{\"2651\":1,\"4984\":1}}],[\"最后的结果是用户\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"最后在看看有没有单例工程类在三级缓存中\",{\"1\":{\"810\":1,\"3798\":1}}],[\"最后以\",{\"1\":{\"734\":1,\"3722\":1}}],[\"最后\",{\"1\":{\"513\":1,\"635\":1,\"1088\":1,\"1256\":1,\"1424\":1,\"1592\":1,\"1806\":1,\"4366\":1,\"4470\":1}}],[\"最后一个\",{\"1\":{\"367\":1,\"435\":1}}],[\"最多可以装多少元素\",{\"1\":{\"405\":1}}],[\"最先出队的总是优先级最高的\",{\"1\":{\"356\":1}}],[\"最顶层的加载类\",{\"1\":{\"206\":1,\"3489\":1}}],[\"有字母数字下划线大小写等乱七八糟各种要求\",{\"1\":{\"3239\":1}}],[\"有获得过奖学金吗\",{\"1\":{\"3083\":1,\"5334\":1}}],[\"有可能会造成系统创建大量同类线程而导致消耗完内存或者\",{\"1\":{\"3003\":1,\"4228\":1}}],[\"有可变长的\",{\"1\":{\"2084\":1}}],[\"有什么理由还升http\",{\"1\":{\"5167\":1}}],[\"有什么用\",{\"0\":{\"2935\":1,\"4160\":1}}],[\"有什么区别\",{\"0\":{\"2180\":1,\"2185\":1,\"2190\":1,\"2195\":1,\"2236\":1,\"4569\":1,\"5233\":1,\"5238\":1,\"5243\":1,\"5248\":1}}],[\"有什么区别呢\",{\"0\":{\"2050\":1},\"1\":{\"1977\":1}}],[\"有人可能要问了\",{\"1\":{\"2794\":1,\"4019\":1}}],[\"有人也并不建议使用\",{\"1\":{\"620\":1}}],[\"有公平锁\",{\"1\":{\"2746\":1,\"3971\":1}}],[\"有几个哈希函数得到几个哈希值\",{\"1\":{\"2703\":1,\"5036\":1}}],[\"有没有参加过团体活动\",{\"1\":{\"3074\":1,\"5325\":1}}],[\"有没有其他办法呢\",{\"1\":{\"2814\":1,\"4039\":1}}],[\"有没有感觉布隆过滤器就是我们想要找的那个\",{\"1\":{\"2698\":1,\"5031\":1}}],[\"有没有一种办法可以让你不修改代码呢\",{\"1\":{\"293\":1,\"3570\":1}}],[\"有哪些解决办法\",{\"0\":{\"2693\":1,\"2711\":1,\"2722\":1,\"5026\":1,\"5044\":1,\"5055\":1}}],[\"有哪些常用的\",{\"0\":{\"857\":1,\"3845\":1}}],[\"有\",{\"1\":{\"2484\":1,\"2814\":1,\"4039\":1,\"4817\":1}}],[\"有的数据库只实现了其中几种隔离级别\",{\"1\":{\"2521\":1,\"4854\":1}}],[\"有的\",{\"1\":{\"2378\":1,\"4711\":1}}],[\"有拥塞控制和流量控制机制\",{\"1\":{\"2063\":1}}],[\"有一批帖子\",{\"0\":{\"1860\":1,\"3937\":1}}],[\"有一个简单并且适用面比较广的公式\",{\"1\":{\"2991\":1,\"4216\":1}}],[\"有一个开发工具\",{\"1\":{\"845\":1,\"3833\":1}}],[\"有一个\",{\"1\":{\"580\":1,\"2044\":1,\"2092\":1}}],[\"有一个是支持传入initialcapacity的\",{\"1\":{\"410\":1}}],[\"有些情况下我们反而希望把很多次锁的请求合并成一个请求\",{\"1\":{\"2769\":1,\"3994\":1}}],[\"有些伙伴可能有疑惑\",{\"1\":{\"1856\":1,\"3933\":1}}],[\"有些场景下\",{\"1\":{\"375\":1}}],[\"有选举权和被选举权\",{\"1\":{\"1789\":1,\"4349\":1}}],[\"有恢复迹象\",{\"1\":{\"1752\":1,\"4312\":1}}],[\"有sink\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"有利于提高开发效率\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"有利于资源重复利用\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"有所不同\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"有事件发生时\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"有名管道以磁盘文件的方式存在\",{\"1\":{\"1042\":1,\"1210\":1,\"1378\":1,\"1546\":1,\"4424\":1}}],[\"有名管道严格遵循\",{\"1\":{\"1042\":1,\"1210\":1,\"1378\":1,\"1546\":1,\"4424\":1}}],[\"有名管道\",{\"1\":{\"1042\":1,\"1210\":1,\"1378\":1,\"1546\":1,\"4424\":1}}],[\"有多个consumer去消费\",{\"1\":{\"986\":1,\"5133\":1}}],[\"有3个consumer\",{\"1\":{\"969\":1,\"5116\":1}}],[\"有3个topic\",{\"1\":{\"959\":1,\"5106\":1}}],[\"有4个topic\",{\"1\":{\"968\":1,\"5115\":1}}],[\"有两种数据保存策略\",{\"1\":{\"922\":1,\"5069\":1}}],[\"有了彩虹表\",{\"1\":{\"3239\":1}}],[\"有了它\",{\"1\":{\"858\":1,\"3846\":1}}],[\"有了二级缓存都能解决\",{\"1\":{\"809\":1,\"3797\":1}}],[\"有了二级缓存其实这个事处理起来就容易了\",{\"1\":{\"804\":1,\"3792\":1}}],[\"有了同步块\",{\"1\":{\"674\":1,\"3662\":1}}],[\"有顺序\",{\"1\":{\"373\":1}}],[\"有序集合比较典型的使用场景就是排行榜\",{\"1\":{\"2634\":1,\"4967\":1}}],[\"有序集合\",{\"0\":{\"2627\":1,\"4960\":1},\"1\":{\"2590\":1,\"4923\":1}}],[\"有序的\",{\"1\":{\"2030\":1}}],[\"有序\",{\"1\":{\"367\":1}}],[\"有如下特点\",{\"1\":{\"355\":1,\"362\":1}}],[\"从原数据计算出md5值很容易\",{\"1\":{\"3219\":1}}],[\"从项目的整体架构到具体功能实现细节都说了\",{\"1\":{\"3063\":1,\"5314\":1}}],[\"从字面意思也能猜到个大概\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"从使用层面来说\",{\"1\":{\"2824\":1,\"4049\":1}}],[\"从数据集\",{\"1\":{\"2683\":1,\"5016\":1}}],[\"从已设置过期时间的数据集\",{\"1\":{\"2679\":1,\"2680\":1,\"2681\":1,\"2686\":1,\"5012\":1,\"5013\":1,\"5014\":1,\"5019\":1}}],[\"从句\",{\"1\":{\"2580\":1,\"4913\":1}}],[\"从库的自增值就是什么\",{\"1\":{\"2446\":1,\"4779\":1}}],[\"从左到右依次到查询条件中去匹配\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"从这个名字中我们也可以发现\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"从这个角度\",{\"1\":{\"607\":1}}],[\"从一个局域网到另一个局域网中的网络设备的寻址\",{\"1\":{\"2151\":1,\"5204\":1}}],[\"从上图可以看到\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"从上面thread类\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"从上面我们可以看出\",{\"1\":{\"2917\":1,\"4142\":1}}],[\"从上面的这段代码来看\",{\"1\":{\"1012\":1}}],[\"从上面两段代码中发现有两处不同\",{\"1\":{\"485\":1}}],[\"从下图你可以看到\",{\"1\":{\"1058\":1,\"1226\":1,\"1394\":1,\"1562\":1,\"4440\":1}}],[\"从下图可以看到这个文件的配置内容都被我们读取到了\",{\"1\":{\"823\":1,\"3811\":1}}],[\"从查询出来映射生成的\",{\"1\":{\"898\":1,\"3886\":1}}],[\"从而避免了线程安全问题\",{\"1\":{\"2938\":1,\"4163\":1}}],[\"从而避免了参数也作为条件的一部分\",{\"1\":{\"2553\":1,\"4886\":1}}],[\"从而执行相应的同步调用\",{\"1\":{\"2927\":1,\"4152\":1}}],[\"从而造成了可见性问题\",{\"1\":{\"2857\":1,\"4082\":1}}],[\"从而到底提高程序性能的目的\",{\"1\":{\"2770\":1,\"3995\":1}}],[\"从而消耗大量的系统资\",{\"1\":{\"2767\":1,\"3992\":1}}],[\"从而降低获取锁带来的消耗\",{\"1\":{\"2759\":1,\"3984\":1}}],[\"从而对\",{\"1\":{\"2199\":1,\"5252\":1}}],[\"从而减少了客户端的请求次数和延迟\",{\"1\":{\"2189\":1,\"5242\":1}}],[\"从而支持虚拟主机的功能\",{\"1\":{\"2184\":1,\"5237\":1}}],[\"从而提高系统的负载能力\",{\"1\":{\"1727\":1,\"4287\":1}}],[\"从而提高查询效率\",{\"1\":{\"898\":1,\"900\":1,\"3886\":1,\"3888\":1}}],[\"从而解放了开发人员以便他们专注在真正重要的事情上\",{\"1\":{\"1693\":1,\"4253\":1}}],[\"从而大幅提升了\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4490\":1}}],[\"从而导致\",{\"1\":{\"2982\":1,\"3006\":1,\"3007\":1,\"3008\":1,\"4207\":1,\"4231\":1,\"4232\":1,\"4233\":1}}],[\"从而导致消息重复消费\",{\"1\":{\"975\":1,\"5122\":1}}],[\"从而导致offset自动提交失败\",{\"1\":{\"975\":1,\"5122\":1}}],[\"从而保证共享变量的可见性\",{\"1\":{\"2859\":1,\"4084\":1}}],[\"从而保证插入数据时\",{\"1\":{\"2435\":1,\"4768\":1}}],[\"从而保证分布均匀\",{\"1\":{\"528\":1,\"3617\":1}}],[\"从而保证了红黑树的查找\",{\"1\":{\"522\":1,\"3611\":1}}],[\"从\",{\"1\":{\"694\":1,\"697\":1,\"1099\":1,\"1267\":1,\"1435\":1,\"1603\":1,\"1805\":1,\"2484\":1,\"2807\":1,\"2814\":1,\"3682\":1,\"3685\":1,\"4032\":1,\"4039\":1,\"4365\":1,\"4481\":1,\"4817\":1}}],[\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\",{\"1\":{\"652\":1,\"3640\":1}}],[\"从根节点到叶子节点的所有路径上不能有\",{\"1\":{\"651\":1,\"3639\":1}}],[\"从时间复杂度的角度\",{\"1\":{\"626\":1}}],[\"从他们的角度看\",{\"1\":{\"605\":1}}],[\"从用户的角度看\",{\"1\":{\"601\":1}}],[\"从内部实现机制来讲arraylist和vector都是使用数组\",{\"1\":{\"501\":1}}],[\"从remove方法中我们发现除了一个使用同步方法\",{\"1\":{\"495\":1}}],[\"从16扩容到32\",{\"1\":{\"417\":1}}],[\"从两端进行操作\",{\"1\":{\"353\":1}}],[\"从程序语法角度讲是必须进行处理的异常\",{\"1\":{\"245\":1,\"3530\":1}}],[\"数学建模比赛中遇到的最大困难\",{\"1\":{\"3075\":1,\"5326\":1}}],[\"数最多为\",{\"1\":{\"2048\":1}}],[\"数量越多的时候\",{\"1\":{\"1060\":1,\"1228\":1,\"1396\":1,\"1564\":1,\"4442\":1}}],[\"数组里的数据\",{\"1\":{\"2597\":1,\"4930\":1}}],[\"数组中的每个元素只访问一次\",{\"1\":{\"1013\":1}}],[\"数组\",{\"0\":{\"554\":1,\"3622\":1}}],[\"数组类没有对应的二进制字节流\",{\"1\":{\"199\":1,\"3482\":1}}],[\"数组类不是通过\",{\"1\":{\"199\":1,\"3482\":1}}],[\"数据满足完整性约束\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"数据表的主键列使用的就是主键索引\",{\"1\":{\"2294\":1,\"4627\":1}}],[\"数据类型底层数据结构就只由\",{\"1\":{\"2609\":1,\"4942\":1}}],[\"数据类型\",{\"1\":{\"2281\":1,\"4614\":1}}],[\"数据\",{\"1\":{\"2271\":1,\"2677\":1,\"4604\":1,\"5010\":1}}],[\"数据库\",{\"0\":{\"5483\":1}}],[\"数据库和缓存数据强一致场景\",{\"1\":{\"3112\":1,\"5363\":1}}],[\"数据库的压力可想而知\",{\"1\":{\"2720\":1,\"5053\":1}}],[\"数据库只存储文件地址信息\",{\"1\":{\"2560\":1,\"4893\":1}}],[\"数据库允许多个并发事务同时对其数据进行读写和修改的能力\",{\"1\":{\"2485\":1,\"4818\":1}}],[\"数据库保持一致性状态\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"数据库会自动给主键赋值递增的值\",{\"1\":{\"2432\":1,\"4765\":1}}],[\"数据库较难优化\",{\"1\":{\"2336\":1,\"4669\":1}}],[\"数据库重新启动的时候会保证数据库恢复到崩溃前的状态\",{\"1\":{\"2253\":1,\"4586\":1}}],[\"数据库控制台以更好地测试应用程序\",{\"1\":{\"845\":1,\"3833\":1}}],[\"数据报重新封装成链路层帧\",{\"1\":{\"2175\":1,\"5228\":1}}],[\"数据报转发到与主机\",{\"1\":{\"2171\":1,\"5224\":1}}],[\"数据报\",{\"1\":{\"2170\":1,\"5223\":1}}],[\"数据报文时\",{\"1\":{\"2154\":1,\"5207\":1}}],[\"数据报文\",{\"1\":{\"2153\":1,\"5206\":1}}],[\"数据报在物理上传输的过程中\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"数据包\",{\"1\":{\"2072\":1}}],[\"数据可以无差错\",{\"1\":{\"2060\":1}}],[\"数据字节数\",{\"1\":{\"2015\":1}}],[\"数据有更新时\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"数据存储+事件监听\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"数据监控等\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"数据拷贝\",{\"1\":{\"1079\":1,\"1247\":1,\"1415\":1,\"1583\":1,\"4461\":1}}],[\"数据保存的策略\",{\"0\":{\"921\":1,\"5068\":1}}],[\"数据保持一致\",{\"1\":{\"758\":1,\"3746\":1}}],[\"数据验证\",{\"1\":{\"740\":1,\"3728\":1}}],[\"数据格式化\",{\"1\":{\"739\":1,\"3727\":1}}],[\"数据转换\",{\"1\":{\"738\":1,\"3726\":1}}],[\"数据增长区别\",{\"1\":{\"499\":1}}],[\"数据结构来实现了\",{\"1\":{\"2624\":1,\"2632\":1,\"4957\":1,\"4965\":1}}],[\"数据结构及适用场景\",{\"0\":{\"2592\":1,\"4925\":1}}],[\"数据结构\",{\"0\":{\"553\":1,\"2594\":1,\"2605\":1,\"2613\":1,\"2620\":1,\"2628\":1,\"3621\":1,\"4927\":1,\"4938\":1,\"4946\":1,\"4953\":1,\"4961\":1},\"1\":{\"352\":1}}],[\"详细说一下这个方案\",{\"1\":{\"1157\":1,\"1325\":1,\"1493\":1,\"1661\":1,\"4539\":1}}],[\"详见\",{\"1\":{\"352\":1}}],[\"详情\",{\"0\":{\"159\":1,\"167\":1,\"3442\":1,\"3450\":1}}],[\"详情容器\",{\"1\":{\"53\":1,\"3341\":1}}],[\"删除锁\",{\"1\":{\"3199\":1,\"3201\":1,\"5450\":1,\"5452\":1}}],[\"删除文章功能\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"删除与淘汰策略\",{\"0\":{\"2667\":1,\"5000\":1}}],[\"删除操作\",{\"1\":{\"2421\":1,\"4754\":1}}],[\"删除操作比较多\",{\"1\":{\"346\":1}}],[\"删除等动作的发生\",{\"1\":{\"849\":1,\"3837\":1}}],[\"删除等操作\",{\"1\":{\"641\":1,\"3629\":1}}],[\"删除\",{\"1\":{\"546\":1,\"643\":1,\"3631\":1}}],[\"删除的时间复杂度最坏为o\",{\"1\":{\"522\":1,\"3611\":1}}],[\"删除的效率比较高\",{\"1\":{\"437\":1}}],[\"删除元素\",{\"1\":{\"344\":1,\"363\":1,\"367\":1}}],[\"删除元素的效率很高\",{\"1\":{\"343\":1,\"349\":1}}],[\"要启用http2必须使用openssl\",{\"1\":{\"5165\":1}}],[\"要考虑到数据量的问题\",{\"1\":{\"3176\":1,\"5427\":1}}],[\"要修改的新值b=2\",{\"1\":{\"2782\":1,\"4007\":1}}],[\"要加上\",{\"1\":{\"2452\":1,\"4785\":1}}],[\"要释放表锁\",{\"1\":{\"2395\":1,\"4728\":1}}],[\"要使用全局锁\",{\"1\":{\"2365\":1,\"4698\":1}}],[\"要\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"要解决幻读现象不建议将隔离级别升级到\",{\"1\":{\"2520\":1,\"4853\":1}}],[\"要解决不可重复读现象\",{\"1\":{\"2520\":1,\"4853\":1}}],[\"要解决脏读现象\",{\"1\":{\"2520\":1,\"4853\":1}}],[\"要解决这问题\",{\"1\":{\"2446\":1,\"4779\":1}}],[\"要解决\",{\"1\":{\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"4554\":1}}],[\"要避免多线程由于竞争共享资源而导致数据错乱的问题\",{\"1\":{\"1166\":1,\"1334\":1,\"1502\":1,\"1670\":1,\"4548\":1}}],[\"要把结果传递给主线程的\",{\"1\":{\"1165\":1,\"1333\":1,\"1501\":1,\"1669\":1,\"4547\":1}}],[\"要看使用的编程语言以及平台有关\",{\"1\":{\"1128\":1,\"1296\":1,\"1464\":1,\"1632\":1,\"4510\":1}}],[\"要么全部不完成\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"要么全部完成\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"要么保留到消息达到一定大小的字节数\",{\"1\":{\"925\":1,\"5072\":1}}],[\"要么保留一定时间\",{\"1\":{\"925\":1,\"5072\":1}}],[\"要么完全不起作用\",{\"1\":{\"757\":1,\"3745\":1}}],[\"要么都不执行\",{\"1\":{\"755\":1,\"3743\":1}}],[\"要么都执行\",{\"1\":{\"755\":1,\"3743\":1}}],[\"要么用throws子句声明抛出它\",{\"1\":{\"249\":1,\"3534\":1}}],[\"要么用try\",{\"1\":{\"249\":1,\"3534\":1}}],[\"要实现动态代理的话\",{\"1\":{\"705\":1,\"3693\":1}}],[\"要求排序\",{\"1\":{\"438\":1}}],[\"要先定位\",{\"1\":{\"344\":1}}],[\"按先入先出的顺序执行队列中的任务\",{\"1\":{\"2997\":1,\"4222\":1}}],[\"按隔离水平高低排序如下\",{\"1\":{\"2513\":1,\"4846\":1}}],[\"按序到达\",{\"1\":{\"2060\":1}}],[\"按业务划分为一个独立运行的程序\",{\"1\":{\"1714\":1,\"4274\":1}}],[\"按照应用维度划分\",{\"1\":{\"2286\":1,\"4619\":1}}],[\"按照底层存储方式角度划分\",{\"1\":{\"2283\":1,\"4616\":1}}],[\"按照数据结构维度划分\",{\"1\":{\"2278\":1,\"4611\":1}}],[\"按照注解的规则\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"按照存储的消息大小保留\",{\"1\":{\"924\":1,\"5071\":1}}],[\"按照过期时间保留\",{\"1\":{\"923\":1,\"5070\":1}}],[\"按照给定的事务规则来执行提交或者回滚操作\",{\"1\":{\"765\":1,\"3753\":1}}],[\"按照\",{\"1\":{\"617\":1}}],[\"按照索引位置访问效率比较低\",{\"1\":{\"341\":1}}],[\"按照索引位置进行访问效率很高\",{\"1\":{\"334\":1}}],[\"按键有序\",{\"1\":{\"435\":1}}],[\"按需分配空间\",{\"1\":{\"340\":1}}],[\"插队成功\",{\"1\":{\"2906\":1,\"4131\":1}}],[\"插队失败\",{\"1\":{\"2906\":1,\"4131\":1}}],[\"插个题外话\",{\"1\":{\"1061\":1,\"1229\":1,\"1397\":1,\"1565\":1,\"4443\":1}}],[\"插入了一条余额超过\",{\"1\":{\"2505\":1,\"4838\":1}}],[\"插入操作就会发生阻塞\",{\"1\":{\"2475\":1,\"4808\":1}}],[\"插入意向锁如果不在间隙锁区间内则是可以的\",{\"1\":{\"2478\":1,\"4811\":1}}],[\"插入意向锁与间隙锁的另一个非常重要的差别是\",{\"1\":{\"2478\":1,\"4811\":1}}],[\"插入意向锁确实是一种特殊的间隙锁\",{\"1\":{\"2477\":1,\"4810\":1}}],[\"插入意向锁名字虽然有意向锁\",{\"1\":{\"2476\":1,\"4809\":1}}],[\"插入意向锁\",{\"0\":{\"2473\":1,\"4806\":1},\"1\":{\"2477\":1,\"2478\":1,\"4810\":1,\"4811\":1}}],[\"插入或查找的速度肯定比较慢\",{\"1\":{\"2314\":1,\"4647\":1}}],[\"插入的时候优先插入到新的表\",{\"1\":{\"1865\":1,\"3942\":1}}],[\"插入和删除操作时\",{\"1\":{\"658\":1,\"3646\":1}}],[\"插入和删除操作\",{\"1\":{\"655\":1,\"3643\":1}}],[\"插入和删除元素的效率比较低\",{\"1\":{\"337\":1}}],[\"插入\",{\"1\":{\"522\":1,\"643\":1,\"3611\":1,\"3631\":1}}],[\"插入顺序经常用于处理键值对的数据\",{\"1\":{\"440\":1}}],[\"插件来实现\",{\"1\":{\"35\":1,\"3323\":1}}],[\"添加元素满了之后会自动扩容原来容量的\",{\"1\":{\"2983\":1,\"4208\":1}}],[\"添加元素的效率还可以\",{\"1\":{\"336\":1}}],[\"添加锁和释放锁的大部分操作实际上都是在\",{\"1\":{\"2746\":1,\"3971\":1}}],[\"添加唯一id\",{\"1\":{\"979\":1,\"5126\":1}}],[\"添加对应的物理分页语句和物理分页参数\",{\"1\":{\"892\":1,\"3880\":1}}],[\"添加\",{\"1\":{\"346\":1,\"367\":1,\"816\":1,\"3804\":1}}],[\"添加n个元素的效率为o\",{\"1\":{\"336\":1,\"349\":1}}],[\"重命名为\",{\"1\":{\"5162\":1}}],[\"重点是基于这几个public方法\",{\"1\":{\"3012\":1,\"4237\":1}}],[\"重量级锁是指当有一个线程获取锁之后\",{\"1\":{\"2767\":1,\"3992\":1}}],[\"重量级锁\",{\"0\":{\"2765\":1,\"3990\":1}}],[\"重要\",{\"1\":{\"2670\":1,\"5003\":1}}],[\"重要的内容\",{\"1\":{\"71\":1,\"3359\":1}}],[\"重启时\",{\"1\":{\"2660\":1,\"4993\":1}}],[\"重启加载\",{\"1\":{\"2660\":1,\"4993\":1}}],[\"重做日志\",{\"1\":{\"2488\":1,\"4821\":1}}],[\"重传等等\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"重复确认了好几遍哈哈哈哈哈哈哈\",{\"1\":{\"3061\":1,\"5312\":1}}],[\"重复\",{\"1\":{\"2030\":1}}],[\"重复数据等\",{\"1\":{\"1872\":1,\"3949\":1}}],[\"重试机制\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"重写简单\",{\"1\":{\"1725\":1,\"4285\":1}}],[\"重写writeobject来实现自定义的序列化\",{\"1\":{\"464\":1}}],[\"重新分配和复制数组的开销被平摊了\",{\"1\":{\"336\":1}}],[\"除非\",{\"1\":{\"3208\":1,\"5459\":1}}],[\"除非数据是被本身事务自己所修改\",{\"1\":{\"771\":1,\"3759\":1}}],[\"除非数组已排序\",{\"1\":{\"335\":1}}],[\"除此之外\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"除了以上这些重要成员变量外\",{\"1\":{\"401\":1}}],[\"除了第一个\",{\"1\":{\"357\":1}}],[\"除了runtimeexception及其子类以外\",{\"1\":{\"249\":1,\"3534\":1}}],[\"除了这三种类加载器之外\",{\"1\":{\"209\":1,\"3492\":1}}],[\"参数的时间单位\",{\"1\":{\"2966\":1,\"4191\":1}}],[\"参数的时候\",{\"1\":{\"2380\":1,\"4713\":1}}],[\"参数\",{\"1\":{\"2958\":1,\"4183\":1}}],[\"参数设置的\",{\"1\":{\"2653\":1,\"4986\":1}}],[\"参数开启\",{\"1\":{\"2649\":1,\"4982\":1}}],[\"参数不能为0\",{\"1\":{\"258\":1,\"3543\":1}}],[\"参考了\",{\"1\":{\"5162\":1}}],[\"参考\",{\"1\":{\"326\":1,\"636\":1,\"825\":1,\"886\":1,\"919\":1,\"972\":1,\"981\":1,\"995\":1,\"1074\":1,\"1183\":1,\"1242\":1,\"1351\":1,\"1410\":1,\"1519\":1,\"1578\":1,\"1687\":1,\"2554\":1,\"2877\":1,\"2911\":1,\"2933\":1,\"3022\":1,\"3288\":1,\"3603\":1,\"3813\":1,\"3874\":1,\"3907\":1,\"4102\":1,\"4136\":1,\"4158\":1,\"4247\":1,\"4456\":1,\"4565\":1,\"4887\":1,\"5119\":1,\"5128\":1,\"5142\":1}}],[\"指令和\",{\"1\":{\"2927\":1,\"2931\":1,\"4152\":1,\"4156\":1}}],[\"指令后\",{\"1\":{\"2923\":1,\"4148\":1}}],[\"指令来释放锁\",{\"1\":{\"2923\":1,\"4148\":1}}],[\"指令时\",{\"1\":{\"2919\":1,\"4144\":1}}],[\"指令以及两个\",{\"1\":{\"2918\":1,\"4143\":1}}],[\"指令则指明同步代码块的结束位置\",{\"1\":{\"2917\":1,\"2930\":1,\"4142\":1,\"4155\":1}}],[\"指令指向同步代码块的开始位置\",{\"1\":{\"2917\":1,\"2930\":1,\"4142\":1,\"4155\":1}}],[\"指令\",{\"1\":{\"2795\":1,\"2917\":1,\"2918\":1,\"2927\":1,\"2930\":1,\"2931\":1,\"4020\":1,\"4142\":1,\"4143\":1,\"4152\":1,\"4155\":1,\"4156\":1}}],[\"指在\",{\"1\":{\"2550\":1,\"4883\":1}}],[\"指向该行的\",{\"1\":{\"2535\":1,\"4868\":1}}],[\"指一个事务执行过程中看到的数据\",{\"1\":{\"2511\":1,\"4844\":1}}],[\"指一个事务提交之后\",{\"1\":{\"2510\":1,\"4843\":1}}],[\"指一个事务还没提交时\",{\"1\":{\"2509\":1,\"4842\":1}}],[\"指下一次\",{\"1\":{\"2016\":1}}],[\"指出对于一个分布式系统来说\",{\"1\":{\"1824\":1,\"4384\":1}}],[\"指明partition的情况下\",{\"1\":{\"937\":1,\"5084\":1}}],[\"指定要拦截哪一个接口的哪些方法即可\",{\"1\":{\"895\":1,\"3883\":1}}],[\"指定连接数据库的驱动类时用到反射加载驱动类\",{\"1\":{\"325\":1,\"3602\":1}}],[\"指的是对象创建\",{\"1\":{\"726\":1,\"3714\":1}}],[\"指南\",{\"0\":{\"139\":1,\"3427\":1}}],[\"无界队列\",{\"1\":{\"2981\":1,\"4206\":1}}],[\"无论\",{\"1\":{\"5162\":1}}],[\"无论读操作还是写操作\",{\"1\":{\"2893\":1,\"4118\":1}}],[\"无论的网络链路中出现了怎样的链路变化\",{\"1\":{\"2029\":1}}],[\"无锁并不会对资源锁定\",{\"1\":{\"2753\":1,\"3978\":1}}],[\"无锁\",{\"0\":{\"2752\":1,\"3977\":1}}],[\"无间隔\",{\"1\":{\"2024\":1}}],[\"无耦合\",{\"1\":{\"1724\":1,\"4284\":1}}],[\"无名管道\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"无需多一个字段去记录\",{\"1\":{\"2084\":1}}],[\"无需知道\",{\"1\":{\"605\":1}}],[\"无需关注工厂类\",{\"1\":{\"325\":1,\"3602\":1}}],[\"无顺序\",{\"1\":{\"375\":1}}],[\"无法使用覆盖索引\",{\"1\":{\"2577\":1,\"4910\":1}}],[\"无法成功插入\",{\"1\":{\"2525\":1,\"4858\":1}}],[\"无法实现虚拟主机\",{\"1\":{\"2184\":1,\"5237\":1}}],[\"无法充分利用\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4531\":1}}],[\"无法保证先读到消息的consumer一定先完成操作\",{\"1\":{\"986\":1,\"5133\":1}}],[\"无法获取继承下来的方法\",{\"1\":{\"321\":1,\"3598\":1}}],[\"无法获取继承下来的变量\",{\"1\":{\"319\":1,\"3596\":1}}],[\"无法被父类加载器加载的类最终会通过这个方法被加载\",{\"1\":{\"217\":1,\"3500\":1}}],[\"+1\",{\"1\":{\"2885\":1,\"2992\":1,\"4110\":1,\"4217\":1}}],[\"+\",{\"0\":{\"1080\":1,\"1248\":1,\"1416\":1,\"1584\":1,\"4462\":1},\"1\":{\"325\":1,\"406\":2,\"411\":3,\"424\":8,\"469\":1,\"470\":1,\"480\":4,\"484\":2,\"630\":2,\"949\":4,\"1011\":1,\"1077\":1,\"1245\":1,\"1413\":1,\"1581\":1,\"2287\":2,\"2289\":1,\"2458\":1,\"2468\":1,\"2611\":1,\"3095\":10,\"3128\":1,\"3602\":1,\"4459\":1,\"4620\":2,\"4622\":1,\"4791\":1,\"4801\":1,\"4944\":1,\"5096\":4,\"5346\":10,\"5379\":1}}],[\"++\",{\"1\":{\"269\":1}}],[\"<br>\",{\"1\":{\"2959\":4,\"4184\":4}}],[\"<字段列表>\",{\"0\":{\"2575\":1,\"4908\":1},\"1\":{\"2578\":1,\"4911\":1}}],[\"<=\",{\"1\":{\"2331\":1,\"2959\":2,\"4184\":2,\"4664\":1}}],[\"<ip\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"<sys\",{\"1\":{\"1093\":1,\"1261\":1,\"1429\":1,\"1597\":1,\"4475\":1}}],[\"<artifactid>spring\",{\"1\":{\"846\":1,\"3834\":1}}],[\"<groupid>org\",{\"1\":{\"846\":1,\"3834\":1}}],[\"<dependency>\",{\"1\":{\"846\":1,\"3834\":1}}],[\"<tt>object<\",{\"1\":{\"455\":1}}],[\"<tt>arraylist<\",{\"1\":{\"455\":2}}],[\"<<\",{\"1\":{\"402\":1}}],[\"<\",{\"1\":{\"321\":2,\"323\":2,\"484\":1,\"630\":2,\"846\":1,\"949\":1,\"1011\":1,\"1168\":1,\"1336\":1,\"1504\":1,\"1672\":1,\"2331\":1,\"2959\":6,\"3598\":2,\"3600\":2,\"3834\":1,\"4184\":6,\"4550\":1,\"4664\":1,\"5096\":1}}],[\"该项目由用户端和自媒体端组成\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池\",{\"1\":{\"2999\":1,\"4224\":1}}],[\"该方法返回一个可根据实际情况调整线程数量的线程池\",{\"1\":{\"2998\":1,\"4223\":1}}],[\"该方法返回一个只有一个线程的线程池\",{\"1\":{\"2997\":1,\"4222\":1}}],[\"该方法返回一个固定线程数量的线程池\",{\"1\":{\"2996\":1,\"4221\":1}}],[\"该方法必须被public修饰\",{\"1\":{\"321\":1,\"3598\":1}}],[\"该标识指明了该方法是一个同步方法\",{\"1\":{\"2927\":1,\"2931\":1,\"4152\":1,\"4156\":1}}],[\"该数据\",{\"1\":{\"2710\":1,\"2717\":1,\"5043\":1,\"5050\":1}}],[\"该情况\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"该表的索引\",{\"1\":{\"2309\":1,\"4642\":1}}],[\"该帧已经从主机\",{\"1\":{\"2172\":1,\"5225\":1}}],[\"该过程与同一局域网内的\",{\"1\":{\"2169\":1,\"5222\":1}}],[\"该分组的目的地只有一个\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"该查询分组对当前设备无效\",{\"1\":{\"2159\":1,\"5212\":1}}],[\"该\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"该条目将被丢弃\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"该映射关系以\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"该去往何处\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"该位为\",{\"1\":{\"2018\":1,\"2019\":1,\"2020\":1,\"2021\":1}}],[\"该提案n1最终需要被抛弃掉\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"该协议能够很好地支持\",{\"1\":{\"1785\":1,\"4345\":1}}],[\"该系统调用\",{\"1\":{\"1096\":1,\"1264\":1,\"1432\":1,\"1600\":1,\"4478\":1}}],[\"该消息队列才会被真正的删除\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"该线程池中的线程数量始终不变\",{\"1\":{\"2996\":1,\"4221\":1}}],[\"该线程对副本的操作\",{\"1\":{\"2857\":1,\"4082\":1}}],[\"该线程是否正在独占资源\",{\"1\":{\"2844\":1,\"4069\":1}}],[\"该线程结束生命周期\",{\"1\":{\"1025\":1,\"1193\":1,\"1361\":1,\"1529\":1,\"4407\":1}}],[\"该线程会释放占用的所有资源\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"该状态的线程位于\",{\"1\":{\"1021\":1,\"1189\":1,\"1357\":1,\"1525\":1,\"4403\":1}}],[\"该模块将在生产环境中被禁用\",{\"1\":{\"845\":1,\"3833\":1}}],[\"该文件里配置了所有需要被创建的spring容器中的bean\",{\"1\":{\"816\":1,\"3804\":1}}],[\"该级别可以防止脏读\",{\"1\":{\"772\":1,\"3760\":1}}],[\"该接口比list提供了更多的方法\",{\"1\":{\"450\":1}}],[\"该构造器必须被public修饰\",{\"1\":{\"323\":1,\"3600\":1}}],[\"该变量必须被public修饰\",{\"1\":{\"319\":1,\"3596\":1}}],[\"该类加载器才会尝试去加载\",{\"1\":{\"228\":1,\"3511\":1}}],[\"42992084\",{\"1\":{\"3288\":1}}],[\"4242\",{\"1\":{\"972\":1,\"5119\":1}}],[\"4对称加密和非对称加密有哪些优缺点\",{\"0\":{\"3283\":1}}],[\"443\",{\"1\":{\"2196\":1,\"5249\":1}}],[\"44901983\",{\"1\":{\"995\":1,\"5142\":1}}],[\"410\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"4163ms\",{\"1\":{\"632\":1}}],[\"409\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"4客户端调用\",{\"0\":{\"2124\":1}}],[\"4第二次挥手丢失了\",{\"0\":{\"2109\":1}}],[\"4为什么每次建立\",{\"0\":{\"2098\":1}}],[\"48\",{\"1\":{\"2048\":1}}],[\"4什么是\",{\"0\":{\"2031\":1}}],[\"4g数据找系统记录\",{\"0\":{\"1840\":1,\"3917\":1}}],[\"4e161a06a0afcae8d2c06603d676de4e\",{\"1\":{\"960\":1,\"5107\":1}}],[\"45161172\",{\"1\":{\"919\":1,\"3907\":1}}],[\"4动态代理\",{\"0\":{\"695\":1}}],[\"4工厂模式\",{\"0\":{\"675\":1}}],[\"4总结\",{\"0\":{\"430\":1}}],[\"4\",{\"0\":{\"354\":1,\"370\":1,\"383\":1,\"525\":1,\"654\":1,\"664\":1,\"665\":1,\"666\":1,\"670\":1,\"675\":1,\"676\":2,\"680\":2,\"683\":2,\"685\":1,\"686\":1,\"687\":1,\"689\":1,\"692\":1,\"695\":1,\"1882\":1,\"2120\":1,\"2121\":1,\"2122\":1,\"2123\":1,\"2124\":1,\"2125\":1,\"2126\":1,\"3123\":1,\"3223\":1,\"3270\":1,\"3642\":1,\"5374\":1},\"1\":{\"367\":1,\"402\":1,\"421\":1,\"740\":1,\"796\":1,\"812\":1,\"828\":1,\"876\":1,\"972\":1,\"1090\":1,\"1099\":1,\"1118\":1,\"1258\":1,\"1267\":1,\"1286\":1,\"1426\":1,\"1435\":1,\"1454\":1,\"1594\":1,\"1603\":1,\"1622\":1,\"2005\":1,\"2062\":1,\"2251\":1,\"2465\":1,\"2482\":1,\"2521\":2,\"2566\":1,\"2639\":1,\"2685\":1,\"2786\":1,\"3030\":1,\"3038\":1,\"3060\":1,\"3066\":1,\"3075\":1,\"3089\":1,\"3160\":1,\"3182\":1,\"3728\":1,\"3784\":1,\"3800\":1,\"3816\":1,\"3864\":1,\"4011\":1,\"4472\":1,\"4481\":1,\"4500\":1,\"4584\":1,\"4798\":1,\"4815\":1,\"4854\":2,\"4899\":1,\"4972\":1,\"5018\":1,\"5119\":1,\"5281\":1,\"5289\":1,\"5311\":1,\"5317\":1,\"5326\":1,\"5340\":1,\"5411\":1,\"5433\":1}}],[\"4获取类的所有信息\",{\"0\":{\"317\":1}}],[\"4java\",{\"0\":{\"259\":1}}],[\"嘤~\",{\"1\":{\"308\":1,\"3585\":1}}],[\"好羞羞\",{\"1\":{\"308\":1,\"3585\":1}}],[\"拿到\",{\"1\":{\"308\":1,\"3585\":1}}],[\"三次握手的延迟\",{\"1\":{\"2192\":1,\"5245\":1}}],[\"三次握手过程\",{\"1\":{\"2192\":1,\"5245\":1}}],[\"三次握手过程是怎样的\",{\"0\":{\"2095\":1},\"1\":{\"1980\":1}}],[\"三元组的形式存储\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"三级缓存\",{\"0\":{\"896\":1,\"906\":1,\"3884\":1,\"3894\":1}}],[\"三级缓存并不是非必须不可\",{\"1\":{\"814\":1,\"3802\":1}}],[\"三级缓存主要是解决\",{\"1\":{\"809\":1,\"3797\":1}}],[\"三级缓存解决什么\",{\"1\":{\"807\":1,\"3795\":1}}],[\"三种方法\",{\"1\":{\"302\":1,\"3579\":1}}],[\"三\",{\"0\":{\"2735\":1,\"3070\":1,\"3220\":1,\"3594\":1,\"3960\":1,\"5161\":1,\"5163\":1,\"5321\":1},\"1\":{\"300\":1,\"3577\":1}}],[\"只适合对少量数据进行加密\",{\"1\":{\"3287\":1}}],[\"只适用于业务处理非常快速的场景\",{\"1\":{\"1151\":1,\"1319\":1,\"1487\":1,\"1655\":1,\"4533\":1}}],[\"只适用于单体项目\",{\"1\":{\"907\":1,\"3895\":1}}],[\"只听他说md5是一个非对称加密算法\",{\"1\":{\"3273\":1}}],[\"只追加文件\",{\"1\":{\"2638\":1,\"4971\":1}}],[\"只不过会在记录头\",{\"1\":{\"2534\":1,\"4867\":1}}],[\"只不过在满足\",{\"1\":{\"814\":1,\"3802\":1}}],[\"只存在于可重复读隔离级别\",{\"1\":{\"2464\":1,\"4797\":1}}],[\"只存在于内存中的文件\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"只在一个机房内完成所有业务\",{\"1\":{\"1874\":1,\"3951\":1}}],[\"只是说在一个包里要继承一个异常的接口\",{\"1\":{\"3039\":1,\"5290\":1}}],[\"只是说该列涉及到表与表的关系\",{\"1\":{\"2340\":1,\"4673\":1}}],[\"只是在\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"只是在文档上注明\",{\"1\":{\"594\":1}}],[\"只是它那时没有其他的服务器了\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"只负责数据的接收和发送\",{\"1\":{\"1162\":1,\"1330\":1,\"1498\":1,\"1666\":1,\"4544\":1}}],[\"只进行了\",{\"1\":{\"1102\":1,\"1270\":1,\"1438\":1,\"1606\":1,\"4484\":1}}],[\"只会在取出\",{\"1\":{\"2671\":1,\"5004\":1}}],[\"只会和共享表锁\",{\"1\":{\"2425\":1,\"4758\":1}}],[\"只会返回有事件发生的文件描述符的个数\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"只会拦截那些指定需要拦截的方法\",{\"1\":{\"894\":1,\"3882\":1}}],[\"只有用到\",{\"1\":{\"2844\":1,\"4069\":1}}],[\"只有当前线程调用\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"只有当变量的预期值\",{\"1\":{\"2792\":1,\"4017\":1}}],[\"只有当父加载器反馈自己无法完成这个加载请求\",{\"1\":{\"232\":1,\"3515\":1}}],[\"只有同步到磁盘中才算持久化保存了\",{\"1\":{\"2652\":1,\"4985\":1}}],[\"只有叶子节点存储\",{\"1\":{\"2279\":1,\"4612\":1}}],[\"只有表级锁\",{\"1\":{\"2242\":1,\"4575\":1}}],[\"只有水平触发模式\",{\"1\":{\"1072\":1,\"1240\":1,\"1408\":1,\"1576\":1,\"4454\":1}}],[\"只有在内核重启\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"只有拥有互斥对象的线程才有访问公共资源的权限\",{\"1\":{\"1030\":1,\"1198\":1,\"1366\":1,\"1534\":1,\"4412\":1}}],[\"只等待获取cpu的使用权\",{\"1\":{\"1021\":1,\"1189\":1,\"1357\":1,\"1525\":1,\"4403\":1}}],[\"只读\",{\"1\":{\"763\":1,\"3751\":1}}],[\"只需要把未来几分钟要执行的数据存入缓存即可\",{\"1\":{\"3176\":1,\"5427\":1}}],[\"只需要传输丢失的这个分片\",{\"1\":{\"2072\":1}}],[\"只需要传入对应map的全限定名\",{\"1\":{\"298\":1,\"3575\":1}}],[\"只需要\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4487\":1}}],[\"只需提供传⼊⼯⼚的参数\",{\"1\":{\"677\":1,\"3665\":1}}],[\"只能有一个线程获得锁\",{\"1\":{\"2893\":1,\"4118\":1}}],[\"只能保证单个变量的原子性\",{\"0\":{\"2811\":1,\"4036\":1},\"1\":{\"2818\":1,\"4043\":1}}],[\"只能存活\",{\"1\":{\"2669\":1,\"5002\":1}}],[\"只能使用到一个表中的一个索引\",{\"1\":{\"2573\":1,\"4906\":1}}],[\"只能取一个\",{\"1\":{\"2266\":1,\"4599\":1}}],[\"只能是固定类别\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"只能重量级锁\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"只能选择\",{\"1\":{\"1834\":1,\"4394\":1}}],[\"只能满足可用性\",{\"1\":{\"1833\":1,\"4393\":1}}],[\"只能同时满足以下三点中的两个\",{\"1\":{\"1824\":1,\"4384\":1}}],[\"只能用来做微服务\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"只能用于亲缘关系的进程间通信\",{\"1\":{\"1042\":1,\"1210\":1,\"1378\":1,\"1546\":1,\"4424\":1}}],[\"只能在同一端做插入和删除操作\",{\"1\":{\"615\":1}}],[\"只能执行队列规定的方法\",{\"1\":{\"601\":1}}],[\"只定义了一个类应该满足哪些方法\",{\"1\":{\"598\":1}}],[\"只要没有显式地设置cacheenabled为false\",{\"1\":{\"915\":1,\"3903\":1}}],[\"只要是同一个接口的相同方法\",{\"1\":{\"914\":1,\"3902\":1}}],[\"只要是按照内容查找元素\",{\"1\":{\"342\":1}}],[\"只要能调用\",{\"1\":{\"605\":1}}],[\"只要他们满足\",{\"1\":{\"603\":1}}],[\"只要实现了map接口\",{\"1\":{\"298\":1,\"3575\":1}}],[\"注入到spring\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"注\",{\"1\":{\"979\":1,\"5126\":1}}],[\"注意是即时运算出来的值\",{\"1\":{\"3268\":1}}],[\"注意是很大程度避免\",{\"1\":{\"2522\":1,\"4855\":1}}],[\"注意避免冗余索引\",{\"1\":{\"2349\":1,\"4682\":1}}],[\"注意\",{\"1\":{\"312\":1,\"432\":1,\"451\":1,\"552\":1,\"905\":1,\"2657\":1,\"3589\":1,\"3893\":1,\"4990\":1}}],[\"注解\",{\"1\":{\"300\":1,\"3577\":1}}],[\"注解等\",{\"1\":{\"295\":1,\"3572\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"113\":1,\"3401\":1}}],[\"作为消息队列来使用\",{\"1\":{\"3186\":1,\"5437\":1}}],[\"作为索引结构\",{\"1\":{\"2258\":1,\"2269\":1,\"2274\":1,\"4591\":1,\"4602\":1,\"4607\":1}}],[\"作为一线开发者\",{\"1\":{\"1884\":1,\"1899\":1,\"1914\":1,\"1927\":1,\"1940\":1,\"1955\":1,\"5145\":1,\"5170\":1}}],[\"作为一个优秀高效且可靠的分布式协调框架\",{\"1\":{\"1785\":1,\"4345\":1}}],[\"作为\",{\"1\":{\"1699\":1,\"1813\":1,\"4259\":1,\"4373\":1}}],[\"作为起始点\",{\"1\":{\"1002\":1,\"3914\":1}}],[\"作为实现栈的接口\",{\"1\":{\"609\":1}}],[\"作为动态数组\",{\"1\":{\"571\":1}}],[\"作用域是同一个\",{\"1\":{\"898\":1,\"3886\":1}}],[\"作用\",{\"1\":{\"295\":1,\"3572\":1}}],[\"作者设置为\",{\"1\":{\"116\":1,\"3404\":1}}],[\"概念\",{\"1\":{\"294\":1,\"3571\":1}}],[\"概念啥的太虚幻我就不说了\",{\"1\":{\"287\":1,\"3564\":1}}],[\"于是转向问权威\",{\"1\":{\"2218\":1,\"5271\":1}}],[\"于是为了减少这一步开销\",{\"1\":{\"1081\":1,\"1249\":1,\"1417\":1,\"1585\":1,\"4463\":1}}],[\"于是\",{\"1\":{\"290\":1,\"1099\":1,\"1267\":1,\"1435\":1,\"1603\":1,\"3567\":1,\"4481\":1}}],[\"还没提交\",{\"1\":{\"3118\":1,\"5369\":1}}],[\"还没有提交事务\",{\"1\":{\"2495\":1,\"4828\":1}}],[\"还耐心给我解答了是用来循环遍历的\",{\"1\":{\"3061\":1,\"5312\":1}}],[\"还会降低系统的稳定性\",{\"1\":{\"2954\":1,\"4179\":1}}],[\"还可以将快照留在原地以便重启服务器的时候使用\",{\"1\":{\"2641\":1,\"4974\":1}}],[\"还可以保存二进制数据\",{\"1\":{\"2597\":1,\"4930\":1}}],[\"还可以方便的实现多线程优先级的比较操作\",{\"1\":{\"1034\":1,\"1202\":1,\"1370\":1,\"1538\":1,\"4416\":1}}],[\"还有\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"还有两种模式的定义\",{\"1\":{\"1791\":1,\"4351\":1}}],[\"还收到物理内存和其他因素影响\",{\"1\":{\"2049\":1}}],[\"还要看收到的事件类型\",{\"1\":{\"1143\":1,\"1158\":1,\"1311\":1,\"1326\":1,\"1479\":1,\"1494\":1,\"1647\":1,\"1662\":1,\"4525\":1,\"4540\":1}}],[\"还必须需要实现invocationhandler\",{\"1\":{\"705\":1,\"3693\":1}}],[\"还能继续执行\",{\"1\":{\"593\":1}}],[\"还能获取到类的所有信息\",{\"1\":{\"295\":1,\"3572\":1}}],[\"还是轻量级的锁\",{\"1\":{\"2439\":1,\"4772\":1}}],[\"还是前面三个\",{\"1\":{\"1804\":1,\"4364\":1}}],[\"还是没有创建完\",{\"1\":{\"801\":1,\"3789\":1}}],[\"还是\",{\"0\":{\"1841\":1,\"3918\":1},\"1\":{\"584\":1,\"1836\":1,\"4396\":1,\"5162\":1}}],[\"还是得改回去用hashmap\",{\"1\":{\"290\":1,\"3567\":1}}],[\"还实现了\",{\"1\":{\"450\":1}}],[\"还不会编写\",{\"1\":{\"29\":1,\"3317\":1}}],[\"接近\",{\"1\":{\"2264\":1,\"4597\":1}}],[\"接收的\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"接受顺序性也得到了保证\",{\"1\":{\"1795\":1,\"4355\":1}}],[\"接受客户端请求\",{\"1\":{\"730\":1,\"3718\":1}}],[\"接着构造一个\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"接着再传给传输层\",{\"1\":{\"2073\":1}}],[\"接着来看看单\",{\"1\":{\"1167\":1,\"1335\":1,\"1503\":1,\"1671\":1,\"4549\":1}}],[\"接着由\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4545\":1}}],[\"接着\",{\"1\":{\"1086\":1,\"1254\":1,\"1422\":1,\"1590\":1,\"1802\":1,\"2412\":1,\"2418\":1,\"4362\":1,\"4468\":1,\"4745\":1,\"4751\":1}}],[\"接着看上面的正射\",{\"1\":{\"288\":1,\"3565\":1}}],[\"接下来的步骤就开始不一样了\",{\"1\":{\"1161\":1,\"1329\":1,\"1497\":1,\"1665\":1,\"4543\":1}}],[\"接下来\",{\"1\":{\"1131\":1,\"1142\":1,\"1299\":1,\"1310\":1,\"1467\":1,\"1478\":1,\"1635\":1,\"1646\":1,\"2166\":1,\"2505\":1,\"4513\":1,\"4524\":1,\"4838\":1,\"5219\":1}}],[\"接下来还可以继续去检测它的状态\",{\"1\":{\"1069\":1,\"1237\":1,\"1405\":1,\"1573\":1,\"4451\":1}}],[\"接下来补充\",{\"1\":{\"805\":1,\"3793\":1}}],[\"接⼝⼀旦新增加⽅法\",{\"1\":{\"690\":1,\"3678\":1}}],[\"接口支持幂等即可\",{\"1\":{\"1856\":1,\"3933\":1}}],[\"接口调用失败就会进入调用接口提前定义好的一个熔断的方法\",{\"1\":{\"1758\":1,\"4318\":1}}],[\"接口调用失败就调用本地的方法返回一个空\",{\"1\":{\"1757\":1,\"4317\":1}}],[\"接口并复写\",{\"1\":{\"895\":1,\"3883\":1}}],[\"接口中定义了五个表示隔离级别的常量\",{\"1\":{\"767\":1,\"3755\":1}}],[\"接口类的\",{\"1\":{\"705\":1,\"3693\":1}}],[\"接口和\",{\"1\":{\"702\":1,\"712\":1,\"3690\":1,\"3700\":1}}],[\"接口的类的\",{\"1\":{\"707\":1,\"3695\":1}}],[\"接口的对象\",{\"1\":{\"704\":1,\"3692\":1}}],[\"接口的stack\",{\"1\":{\"616\":1}}],[\"接口的时候\",{\"1\":{\"606\":1}}],[\"接口的设计相当于做了访问限制\",{\"1\":{\"606\":1}}],[\"接口规定的规范\",{\"1\":{\"603\":1}}],[\"接口最大的意义之一\",{\"1\":{\"598\":1}}],[\"接口提供\",{\"1\":{\"564\":1}}],[\"接口\",{\"0\":{\"610\":1},\"1\":{\"260\":1,\"444\":1,\"450\":1,\"596\":1,\"609\":1,\"624\":1,\"2166\":1,\"2744\":1,\"3545\":1,\"3969\":1,\"5219\":1}}],[\"唱跳rap篮球\",{\"1\":{\"286\":1,\"289\":1,\"3563\":1,\"3566\":1}}],[\"蔡徐鸡\",{\"1\":{\"286\":1,\"289\":1,\"3563\":1,\"3566\":1}}],[\"应用非常广泛\",{\"1\":{\"2817\":1,\"4042\":1}}],[\"应用场景\",{\"0\":{\"2074\":1,\"2600\":1,\"2610\":1,\"2617\":1,\"2625\":1,\"2633\":1,\"4933\":1,\"4943\":1,\"4950\":1,\"4958\":1,\"4966\":1}}],[\"应用进程再调用\",{\"1\":{\"1087\":1,\"1255\":1,\"1423\":1,\"1591\":1,\"4469\":1}}],[\"应用进程跟操作系统内核\",{\"1\":{\"1086\":1,\"1254\":1,\"1422\":1,\"1590\":1,\"4468\":1}}],[\"应用进程调用了\",{\"1\":{\"1086\":1,\"1254\":1,\"1422\":1,\"1590\":1,\"4468\":1}}],[\"应用程序\",{\"1\":{\"860\":1,\"3848\":1}}],[\"应用程序类加载器\",{\"1\":{\"208\":1,\"3491\":1}}],[\"应该尽量只在需要对数据进行精确计算时才使用\",{\"1\":{\"2567\":1,\"4900\":1}}],[\"应该尽量指定其大小\",{\"1\":{\"415\":1}}],[\"应该被考虑建立索引\",{\"1\":{\"2338\":1,\"4671\":1}}],[\"应该被优先使用\",{\"1\":{\"353\":1}}],[\"应该发送怎样的查询分组呢\",{\"1\":{\"2166\":1,\"5219\":1}}],[\"应该如何\",{\"0\":{\"2121\":1},\"1\":{\"2006\":1}}],[\"应该同步线程以避免关键的资源使用冲突\",{\"1\":{\"1028\":1,\"1196\":1,\"1364\":1,\"1532\":1,\"4410\":1}}],[\"应该是组合关系\",{\"1\":{\"581\":1}}],[\"应该由\",{\"1\":{\"564\":1}}],[\"应该用哪一个呢\",{\"1\":{\"352\":1}}],[\"应该会有会心一笑\",{\"1\":{\"275\":1,\"3552\":1}}],[\"看你是院研副部长\",{\"1\":{\"3091\":1,\"5342\":1}}],[\"看你项目中用到了网关\",{\"1\":{\"3078\":1,\"5329\":1}}],[\"看我熟悉python\",{\"1\":{\"3061\":1,\"5312\":1}}],[\"看作是\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"看了大佬小林coding的文章\",{\"1\":{\"2014\":1}}],[\"看它是否依然可读或可写\",{\"1\":{\"1069\":1,\"1237\":1,\"1405\":1,\"1573\":1,\"4451\":1}}],[\"看过\",{\"1\":{\"1062\":1,\"1230\":1,\"1398\":1,\"1566\":1,\"4444\":1}}],[\"看上去分配已经尽量的保证均衡了\",{\"1\":{\"961\":1,\"5108\":1}}],[\"看到k神题解下的一个评论\",{\"1\":{\"558\":1}}],[\"看到上面的代码\",{\"1\":{\"275\":1,\"3552\":1}}],[\"看结果如何\",{\"1\":{\"410\":1}}],[\"看下它的背后\",{\"1\":{\"262\":1}}],[\"8为什么需要\",{\"0\":{\"2113\":1}}],[\"8第二次握手丢失了\",{\"0\":{\"2102\":1}}],[\"800\",{\"1\":{\"2484\":2,\"4817\":2}}],[\"80\",{\"1\":{\"2092\":2,\"2196\":1,\"5249\":1}}],[\"8080\",{\"1\":{\"855\":1,\"3226\":1,\"3232\":1,\"3843\":1}}],[\"8格式编码\",{\"1\":{\"865\":1,\"3853\":1}}],[\"8以前的版本\",{\"1\":{\"552\":1}}],[\"86655574\",{\"1\":{\"548\":1,\"3520\":1}}],[\"8采用红黑树存储\",{\"0\":{\"521\":1,\"3610\":1}}],[\"8从头插入改成尾插入元素的顺序不变\",{\"1\":{\"520\":1,\"3609\":1}}],[\"8中hashmap从头插入改成尾插入\",{\"0\":{\"518\":1,\"3607\":1}}],[\"8\",{\"0\":{\"549\":1},\"1\":{\"274\":1,\"412\":1,\"432\":1,\"732\":1,\"744\":1,\"1074\":1,\"1183\":1,\"1242\":1,\"1351\":1,\"1410\":1,\"1519\":1,\"1578\":1,\"1687\":1,\"1776\":1,\"2067\":1,\"3042\":1,\"3079\":1,\"3551\":1,\"3720\":1,\"3732\":1,\"4336\":1,\"4456\":1,\"4565\":1,\"5293\":1,\"5330\":1}}],[\"69916115\",{\"1\":{\"3288\":1}}],[\"6879c0ae9117b50074ce0a0d4c843060\",{\"1\":{\"3254\":1}}],[\"60\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"600\",{\"1\":{\"2484\":3,\"4817\":3}}],[\"6字节\",{\"1\":{\"2534\":1,\"2536\":1,\"4867\":1,\"4869\":1}}],[\"6byte\",{\"1\":{\"2296\":1,\"4629\":1}}],[\"6没有\",{\"0\":{\"2126\":1}}],[\"6第四次挥手丢失了\",{\"0\":{\"2111\":1}}],[\"6既然\",{\"0\":{\"2100\":1}}],[\"6udp\",{\"0\":{\"2050\":1}}],[\"6650\",{\"1\":{\"981\":1,\"5128\":1}}],[\"666\",{\"1\":{\"573\":1}}],[\"6代理模式\",{\"0\":{\"686\":1}}],[\"64\",{\"1\":{\"417\":1,\"2607\":1,\"2622\":1,\"2630\":1,\"4940\":1,\"4955\":1,\"4963\":1}}],[\"6\",{\"0\":{\"517\":1,\"529\":1,\"687\":1,\"689\":1,\"692\":1,\"695\":1,\"1843\":1,\"1925\":1,\"2052\":1,\"2074\":1,\"2732\":1,\"3920\":1,\"5065\":1},\"1\":{\"274\":2,\"742\":1,\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"2068\":1,\"2257\":1,\"2305\":2,\"2333\":1,\"2505\":1,\"2506\":1,\"2573\":2,\"2649\":1,\"2678\":1,\"2790\":1,\"3032\":1,\"3040\":1,\"3067\":1,\"3077\":1,\"3091\":1,\"3162\":1,\"3551\":2,\"3730\":1,\"4015\":1,\"4534\":1,\"4590\":1,\"4638\":2,\"4666\":1,\"4838\":1,\"4839\":1,\"4906\":2,\"4982\":1,\"5011\":1,\"5283\":1,\"5291\":1,\"5318\":1,\"5328\":1,\"5342\":1,\"5413\":1}}],[\"6异常的底层\",{\"0\":{\"270\":1}}],[\"gao\",{\"0\":{\"5472\":1}}],[\"gateway\",{\"1\":{\"3099\":1,\"5350\":1}}],[\"gather\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"gap\",{\"0\":{\"2463\":1,\"4796\":1},\"1\":{\"2457\":1,\"2458\":1,\"2464\":1,\"2468\":1,\"4790\":1,\"4791\":1,\"4797\":1,\"4801\":1}}],[\"git\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"given\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"give\",{\"1\":{\"940\":1,\"5087\":1}}],[\"greater\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"graph\",{\"1\":{\"1701\":1,\"4261\":1}}],[\"graphdriver\",{\"1\":{\"1701\":1,\"4261\":1}}],[\"group\",{\"1\":{\"2580\":1,\"4913\":1}}],[\"group中有多个consumer\",{\"1\":{\"943\":1,\"5090\":1}}],[\"groupid>\",{\"1\":{\"846\":1,\"3834\":1}}],[\"grow\",{\"1\":{\"480\":1}}],[\"gone\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"go\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"google\",{\"1\":{\"1692\":1,\"4252\":1,\"5162\":2}}],[\"goto\",{\"1\":{\"274\":1,\"3551\":1}}],[\"geospatial\",{\"1\":{\"2591\":1,\"4924\":1}}],[\"geometry\",{\"1\":{\"2281\":1,\"4614\":1}}],[\"generation\",{\"1\":{\"711\":1,\"3699\":1}}],[\"getsecuritymanager\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"getvalue\",{\"1\":{\"949\":1,\"5096\":1}}],[\"getkey\",{\"1\":{\"949\":1,\"5096\":1}}],[\"getandincrement\",{\"1\":{\"940\":1,\"5087\":1}}],[\"getapphttpcodeenum\",{\"1\":{\"835\":1,\"836\":1,\"3823\":1,\"3824\":1}}],[\"getobject\",{\"1\":{\"810\":1,\"3798\":1}}],[\"getinstance\",{\"1\":{\"673\":1,\"3661\":1}}],[\"get\",{\"1\":{\"406\":1,\"424\":6,\"940\":2,\"949\":3,\"2938\":1,\"2942\":1,\"4163\":1,\"4167\":1,\"5087\":2,\"5096\":3}}],[\"getdeclaredconstructor\",{\"1\":{\"323\":1,\"3600\":1}}],[\"getdeclaredconstructors\",{\"1\":{\"323\":1,\"3600\":1}}],[\"getdeclaredmethod\",{\"1\":{\"321\":1,\"406\":1,\"411\":3,\"424\":2,\"3598\":1}}],[\"getdeclaredmethods\",{\"1\":{\"321\":1,\"3598\":1}}],[\"getdeclaredfield\",{\"1\":{\"319\":1,\"406\":1,\"424\":6,\"3596\":1}}],[\"getdeclaredfields\",{\"1\":{\"319\":1,\"3596\":1}}],[\"getmessage\",{\"1\":{\"836\":1,\"3824\":1}}],[\"getmethod\",{\"1\":{\"321\":1,\"3598\":1}}],[\"getmethods\",{\"1\":{\"321\":1,\"3598\":1}}],[\"getmap\",{\"1\":{\"291\":1,\"297\":1,\"2944\":2,\"3568\":1,\"3574\":1,\"4169\":2}}],[\"getfield\",{\"1\":{\"319\":1,\"3596\":1}}],[\"getfields\",{\"1\":{\"319\":1,\"3596\":1}}],[\"getfindclasses\",{\"1\":{\"227\":1,\"3510\":1}}],[\"getfindclasstime\",{\"1\":{\"227\":1,\"3510\":1}}],[\"getcontext\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"getconstructors\",{\"1\":{\"323\":1,\"3600\":1}}],[\"getconstructor\",{\"1\":{\"297\":1,\"314\":1,\"315\":1,\"323\":1,\"3574\":1,\"3591\":1,\"3592\":1,\"3600\":1}}],[\"getclass\",{\"1\":{\"304\":1,\"305\":1,\"406\":1,\"411\":3,\"424\":1,\"3581\":1,\"3582\":1}}],[\"getclassloadinglock\",{\"1\":{\"227\":1,\"3510\":1}}],[\"getparentdelegationtime\",{\"1\":{\"227\":1,\"3510\":1}}],[\"gc\",{\"1\":{\"492\":1,\"494\":1}}],[\"3就横空出世了\",{\"1\":{\"5167\":1}}],[\"3就已经来了\",{\"1\":{\"1890\":1,\"1905\":1,\"1920\":1,\"1933\":1,\"1946\":1,\"1961\":1,\"5152\":1,\"5175\":1}}],[\"38c93c677124\",{\"1\":{\"3288\":1}}],[\"3md5是对称加密还是非对称加密\",{\"0\":{\"3280\":1}}],[\"30下班\",{\"1\":{\"3068\":1,\"5319\":1}}],[\"30上班\",{\"1\":{\"3068\":1,\"5319\":1}}],[\"30s\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"300\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"3001\",{\"1\":{\"548\":1,\"972\":1,\"981\":1,\"3520\":1,\"5119\":1,\"5128\":1}}],[\"3accept\",{\"0\":{\"2123\":1}}],[\"3第一次挥手丢失了\",{\"0\":{\"2108\":1}}],[\"3为什么是三次握手\",{\"0\":{\"2097\":1}}],[\"3什么是\",{\"0\":{\"2025\":1}}],[\"3是一个更加正确的选择\",{\"1\":{\"1891\":1,\"1906\":1,\"1921\":1,\"1934\":1,\"1947\":1,\"1962\":1,\"5153\":1,\"5176\":1}}],[\"3已经悄然而至了\",{\"1\":{\"1889\":1,\"1904\":1,\"1919\":1,\"1932\":1,\"1945\":1,\"1960\":1,\"5151\":1,\"5174\":1}}],[\"3已经是箭在弦上了\",{\"1\":{\"1884\":1,\"1899\":1,\"1914\":1,\"1927\":1,\"1940\":1,\"1955\":1,\"5145\":1,\"5170\":1}}],[\"3了\",{\"1\":{\"1883\":1,\"1884\":1,\"1898\":1,\"1899\":1,\"1913\":1,\"1914\":1,\"1926\":1,\"1927\":1,\"1939\":1,\"1940\":1,\"1954\":1,\"1955\":1,\"5144\":1,\"5145\":1,\"5169\":1,\"5170\":1}}],[\"3的新闻有很多\",{\"1\":{\"1883\":1,\"1898\":1,\"1913\":1,\"1926\":1,\"1939\":1,\"1954\":1,\"5144\":1,\"5169\":1}}],[\"3d\",{\"1\":{\"981\":1,\"5128\":1}}],[\"3个分区\",{\"1\":{\"959\":1,\"5106\":1}}],[\"3静态代理\",{\"0\":{\"692\":1}}],[\"3抽象⼯⼚模式了解吗\",{\"0\":{\"683\":1}}],[\"3单例模式\",{\"0\":{\"670\":1}}],[\"35590459\",{\"1\":{\"519\":1,\"3608\":1}}],[\"32位\",{\"1\":{\"2039\":1,\"2041\":1}}],[\"32\",{\"1\":{\"426\":1,\"2048\":1}}],[\"3loadfactor\",{\"0\":{\"416\":1}}],[\"33709582\",{\"1\":{\"326\":1,\"3603\":1}}],[\"3构造类的实例化对象\",{\"0\":{\"309\":1}}],[\"3\",{\"0\":{\"347\":1,\"360\":1,\"368\":1,\"439\":1,\"471\":1,\"477\":1,\"478\":1,\"488\":1,\"498\":1,\"523\":1,\"553\":1,\"644\":1,\"1830\":1,\"1843\":1,\"1953\":1,\"2105\":1,\"2106\":1,\"2107\":1,\"2108\":1,\"2109\":1,\"2110\":1,\"2111\":1,\"2112\":1,\"2113\":1,\"2114\":1,\"2115\":1,\"2116\":1,\"2117\":1,\"2118\":1,\"2119\":1,\"2190\":1,\"2232\":1,\"3119\":1,\"3632\":1,\"3920\":1,\"4390\":1,\"5243\":1,\"5370\":1},\"1\":{\"274\":3,\"306\":1,\"322\":1,\"325\":1,\"352\":1,\"363\":1,\"367\":1,\"673\":1,\"704\":1,\"739\":1,\"794\":1,\"807\":1,\"821\":1,\"828\":1,\"875\":1,\"891\":1,\"972\":1,\"1096\":1,\"1124\":1,\"1264\":1,\"1292\":1,\"1432\":1,\"1460\":1,\"1600\":1,\"1628\":1,\"1806\":1,\"1884\":1,\"1888\":1,\"1899\":1,\"1903\":1,\"1914\":1,\"1918\":1,\"1927\":1,\"1931\":1,\"1940\":1,\"1944\":1,\"1955\":1,\"1959\":1,\"1990\":1,\"2059\":1,\"2191\":3,\"2192\":2,\"2193\":1,\"2247\":1,\"2465\":1,\"2585\":1,\"2591\":1,\"2609\":1,\"2636\":1,\"2784\":1,\"2960\":1,\"3029\":1,\"3037\":1,\"3059\":1,\"3065\":1,\"3074\":1,\"3088\":1,\"3159\":1,\"3161\":1,\"3175\":1,\"3551\":3,\"3583\":1,\"3599\":1,\"3602\":1,\"3661\":1,\"3692\":1,\"3727\":1,\"3782\":1,\"3795\":1,\"3809\":1,\"3816\":1,\"3863\":1,\"3879\":1,\"4009\":1,\"4185\":1,\"4366\":1,\"4478\":1,\"4506\":1,\"4580\":1,\"4798\":1,\"4918\":1,\"4924\":1,\"4942\":1,\"4969\":1,\"5119\":1,\"5145\":1,\"5150\":1,\"5162\":1,\"5167\":2,\"5170\":1,\"5173\":1,\"5244\":3,\"5245\":2,\"5246\":1,\"5280\":1,\"5288\":1,\"5310\":1,\"5316\":1,\"5325\":1,\"5339\":1,\"5410\":1,\"5412\":1,\"5426\":1}}],[\"3throw和throws的区别\",{\"0\":{\"252\":1}}],[\"需要考虑数据持久化的问题\",{\"1\":{\"3172\":1,\"5423\":1}}],[\"需要调用下面的方法\",{\"1\":{\"3020\":1,\"4245\":1}}],[\"需要什么设置\",{\"1\":{\"3019\":1,\"4244\":1}}],[\"需要重点掌握\",{\"1\":{\"2800\":1,\"4025\":1}}],[\"需要等待全局安全点\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"需要定期对\",{\"1\":{\"2659\":1,\"4992\":1}}],[\"需要额外的空间和计算开销\",{\"1\":{\"2567\":1,\"4900\":1}}],[\"需要额外注意的一点是\",{\"1\":{\"456\":1}}],[\"需要判断插入位置是否已被其他事务加了间隙锁\",{\"1\":{\"2474\":1,\"4807\":1}}],[\"需要先下载才能审核\",{\"1\":{\"3160\":1,\"5411\":1}}],[\"需要先对表加上\",{\"1\":{\"2421\":1,\"4754\":1}}],[\"需要先在表级别加上一个\",{\"1\":{\"2419\":1,\"2420\":1,\"4752\":1,\"4753\":1}}],[\"需要先使用javac编译\",{\"1\":{\"273\":1,\"3550\":1}}],[\"需要注意的是布隆过滤器可能会存在误判的情况\",{\"1\":{\"2700\":1,\"5033\":1}}],[\"需要注意的是\",{\"1\":{\"2393\":1,\"4726\":1}}],[\"需要注意的是刚刚\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"需要查询\",{\"1\":{\"2327\":1,\"4660\":1}}],[\"需要查询主键\",{\"1\":{\"2327\":1,\"4660\":1}}],[\"需要经过经典的\",{\"1\":{\"2192\":1,\"5245\":1}}],[\"需要客户端自己发送请求来获取相关资源\",{\"1\":{\"2189\":1,\"5242\":1}}],[\"需要解决\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"需要有一定的策略\",{\"1\":{\"1872\":1,\"3949\":1}}],[\"需要有对应的迁移服务进行定时迁移\",{\"1\":{\"1865\":1,\"3942\":1}}],[\"需要刷新下缓存\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"需要补充说明的一点是\",{\"1\":{\"1837\":1,\"4397\":1}}],[\"需要搞清楚traceid和spanid以及抽样\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"需要在\",{\"1\":{\"900\":1,\"3888\":1}}],[\"需要增强的方法\",{\"1\":{\"714\":1,\"3702\":1}}],[\"需要增强的对象\",{\"1\":{\"714\":1,\"3702\":1}}],[\"需要对每个目标类都单独写一个代理类\",{\"1\":{\"693\":1,\"3681\":1}}],[\"需要说明的是\",{\"1\":{\"388\":1}}],[\"需要提前从class中调用getconstructor\",{\"1\":{\"316\":1,\"3593\":1}}],[\"需要进行处理\",{\"1\":{\"254\":1,\"3539\":1}}],[\"返回线程池对象的弊端如下\",{\"1\":{\"3005\":1,\"4230\":1}}],[\"返回值是实际复制数据的长度\",{\"1\":{\"1094\":1,\"1262\":1,\"1430\":1,\"1598\":1,\"4476\":1}}],[\"返回错误信息\",{\"1\":{\"1758\":1,\"4318\":1}}],[\"返回错误\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"返回时\",{\"1\":{\"1061\":1,\"1229\":1,\"1397\":1,\"1565\":1,\"4443\":1}}],[\"返回给dispatcherservlet\",{\"1\":{\"742\":1,\"3730\":1}}],[\"返回一个\",{\"1\":{\"741\":1,\"3729\":1}}],[\"返回一个视图对象\",{\"1\":{\"730\":1,\"3718\":1}}],[\"返回\",{\"1\":{\"269\":2}}],[\"返回顶部按钮\",{\"1\":{\"20\":1,\"137\":1,\"3308\":1,\"3425\":1}}],[\"测试它们的性能\",{\"1\":{\"629\":1}}],[\"测试\",{\"1\":{\"269\":2}}],[\"因而从这个角度来说\",{\"1\":{\"2477\":1,\"4810\":1}}],[\"因而\",{\"1\":{\"1060\":1,\"1228\":1,\"1396\":1,\"1564\":1,\"4442\":1}}],[\"因而近似平衡\",{\"1\":{\"645\":1,\"3633\":1}}],[\"因为md5可以被暴力破解\",{\"1\":{\"3221\":1}}],[\"因为md5是不可逆的\",{\"1\":{\"3221\":1}}],[\"因为每个线程都需要执行\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"因为还是可能存在定期删除和惰性删除漏掉了很多过期\",{\"1\":{\"2674\":1,\"5007\":1}}],[\"因为可以读到未提交事务修改的数据\",{\"1\":{\"2527\":1,\"4860\":1}}],[\"因为可重复读隔离级别下\",{\"1\":{\"2524\":1,\"4857\":1}}],[\"因为使用\",{\"1\":{\"2522\":1,\"4855\":1}}],[\"因为事务\",{\"1\":{\"2496\":1,\"4829\":1}}],[\"因为多个事务同时使用相同的数据时\",{\"1\":{\"2485\":1,\"4818\":1}}],[\"因为间隙锁的目的是防止插入幻影记录而提出的\",{\"1\":{\"2466\":1,\"4799\":1}}],[\"因为当执行\",{\"1\":{\"2525\":1,\"4858\":1}}],[\"因为当事务提交了\",{\"1\":{\"2452\":1,\"4785\":1}}],[\"因为当我们对数据库表进行操作时\",{\"1\":{\"2401\":1,\"4734\":1}}],[\"因为它属于快照读\",{\"1\":{\"2450\":1,\"4783\":1}}],[\"因为它是存在与我们的starter中的\",{\"1\":{\"872\":1,\"3860\":1}}],[\"因为另一个事务中的插入会被阻塞\",{\"1\":{\"2436\":1,\"4769\":1}}],[\"因为申请不到\",{\"1\":{\"2414\":1,\"4747\":1}}],[\"因为表锁的颗粒度太大\",{\"1\":{\"2398\":1,\"4731\":1}}],[\"因为索引是需要占用磁盘空间的\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"因为对于数据为\",{\"1\":{\"2336\":1,\"4669\":1}}],[\"因为二级索引的叶子节点就存放的是主键\",{\"1\":{\"2318\":1,\"4651\":1}}],[\"因为整个\",{\"1\":{\"2311\":1,\"4644\":1}}],[\"因为只取前几个字符\",{\"1\":{\"2304\":1,\"4637\":1}}],[\"因为只有一个进程\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4531\":1}}],[\"因为该分组的目的\",{\"1\":{\"2166\":1,\"5219\":1}}],[\"因为这正是我们要问询的\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"因为这涉及了具体的业务场景\",{\"1\":{\"1731\":1,\"4291\":1}}],[\"因为分表后\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"因为分区数可能无法被消费者数量整除\",{\"1\":{\"946\":1,\"5093\":1}}],[\"因为我这里是还要获取点赞数和评论数啥的\",{\"1\":{\"1846\":1,\"3923\":1}}],[\"因为我们一开始讲了在\",{\"1\":{\"1810\":1,\"4370\":1}}],[\"因为我们只有一个\",{\"1\":{\"1799\":1,\"4359\":1}}],[\"因为我们没有在内存层面去拷贝数据\",{\"1\":{\"1104\":1,\"1272\":1,\"1440\":1,\"1608\":1,\"4486\":1}}],[\"因为我们根据\",{\"1\":{\"615\":1}}],[\"因为重量级锁会频繁切换内核态与用户态\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"因为都是自旋\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"因为初始化所以\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"因为一个\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"2146\":1,\"4552\":1,\"5199\":1}}],[\"因为系统调用还是\",{\"1\":{\"1090\":1,\"1258\":1,\"1426\":1,\"1594\":1,\"4472\":1}}],[\"因为仍然需要通过\",{\"1\":{\"1090\":1,\"1258\":1,\"1426\":1,\"1594\":1,\"4472\":1}}],[\"因为边缘触发可以减少\",{\"1\":{\"1071\":1,\"1239\":1,\"1407\":1,\"1575\":1,\"4453\":1}}],[\"因为在可重复读的隔离级别下\",{\"1\":{\"2379\":1,\"4712\":1}}],[\"因为在内核维护了红黑树\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"因为在一个大文件里查找和删除消息是很费时的事\",{\"1\":{\"928\":1,\"5075\":1}}],[\"因为互斥对象只有一个\",{\"1\":{\"1030\":1,\"1198\":1,\"1366\":1,\"1534\":1,\"4412\":1}}],[\"因为某些消费者不参与一些topic的分配\",{\"1\":{\"957\":1,\"5104\":1}}],[\"因为此时二叉搜索树不是平衡树\",{\"1\":{\"657\":1,\"3645\":1}}],[\"因为要保持兼容性\",{\"1\":{\"592\":1}}],[\"因为concurrenthashmap使用了分段锁\",{\"1\":{\"544\":1}}],[\"因为数据均匀分布在每个bin中\",{\"1\":{\"530\":1,\"3619\":1}}],[\"因为他的底层结构就是使用数组实现的\",{\"1\":{\"512\":1}}],[\"因为synchronizedlist只是使用同步代码块包裹了arraylist的方法\",{\"1\":{\"507\":1}}],[\"因为你可以通过设置集合的初始化大小来避免不必要的资源开销\",{\"1\":{\"501\":1}}],[\"因为arraylist本质上就是一个数组\",{\"1\":{\"445\":1}}],[\"因为hash值是随机的\",{\"1\":{\"387\":1}}],[\"因为hashset底层是用hashmap存储数据的\",{\"1\":{\"380\":1}}],[\"因为需要移动元素\",{\"1\":{\"337\":1}}],[\"因为\",{\"1\":{\"312\":1,\"617\":1,\"801\":1,\"1133\":1,\"1134\":1,\"1152\":1,\"1301\":1,\"1302\":1,\"1320\":1,\"1469\":1,\"1470\":1,\"1488\":1,\"1637\":1,\"1638\":1,\"1656\":1,\"1774\":1,\"1813\":1,\"1816\":1,\"2024\":1,\"2199\":1,\"2314\":1,\"2346\":1,\"2411\":1,\"2550\":1,\"2596\":1,\"2597\":1,\"2598\":1,\"2599\":1,\"3589\":1,\"3789\":1,\"4334\":1,\"4373\":1,\"4376\":1,\"4515\":1,\"4516\":1,\"4534\":1,\"4647\":1,\"4679\":1,\"4744\":1,\"4883\":1,\"4929\":1,\"4930\":1,\"4931\":1,\"4932\":1,\"5252\":1}}],[\"因为终于看到了exception\",{\"1\":{\"275\":1,\"3552\":1}}],[\"因为return表⽰的是要整个⽅法体返回\",{\"1\":{\"267\":1}}],[\"因此如果你的密码很不幸被搜集在彩虹表里\",{\"1\":{\"3239\":1}}],[\"因此在\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"因此在操作数据时\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"因此fixedthreadpool最多只能创建核心线程数的线程\",{\"1\":{\"2981\":1,\"4206\":1}}],[\"因此这种策略会降低对于新任务提交速度\",{\"1\":{\"2974\":1,\"4199\":1}}],[\"因此乐观锁不会上锁\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"因此可以采用这种方式来备份数据库\",{\"1\":{\"2381\":1,\"4714\":1}}],[\"因此可以借助于\",{\"1\":{\"35\":1,\"3323\":1}}],[\"因此哈希表可以快速检索数据\",{\"1\":{\"2264\":1,\"4597\":1}}],[\"因此经常用于\",{\"1\":{\"2075\":1,\"2078\":1}}],[\"因此也称其为容器\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"因此实际应用中也看不到单\",{\"1\":{\"1169\":1,\"1337\":1,\"1505\":1,\"1673\":1,\"4551\":1}}],[\"因此实际中并没有应用\",{\"1\":{\"1123\":1,\"1291\":1,\"1459\":1,\"1627\":1,\"4505\":1}}],[\"因此我们程序要保证一次性将内核缓冲区的数据读取完\",{\"1\":{\"1065\":1,\"1233\":1,\"1401\":1,\"1569\":1,\"4447\":1}}],[\"因此不能代理声明为\",{\"1\":{\"717\":1,\"3705\":1}}],[\"因此就可能导致不均匀的数据分布\",{\"1\":{\"530\":1,\"3619\":1}}],[\"因此需要特定的命令解析器执行引擎\",{\"1\":{\"180\":1,\"3463\":1}}],[\"因此\",{\"1\":{\"26\":1,\"565\":1,\"571\":1,\"586\":1,\"626\":1,\"634\":1,\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"1834\":1,\"2046\":1,\"2086\":1,\"2092\":1,\"2165\":1,\"2211\":1,\"2249\":1,\"2276\":2,\"2437\":1,\"3314\":1,\"4394\":1,\"4452\":1,\"4582\":1,\"4609\":2,\"4770\":1,\"5218\":1,\"5264\":1}}],[\"⾥⾯的code会不会被执⾏\",{\"1\":{\"266\":1}}],[\"⾥⾯有⼀个return语句\",{\"1\":{\"266\":1}}],[\"所在子网相连的接口上\",{\"1\":{\"2171\":1,\"5224\":1}}],[\"所在子网的那个路由器\",{\"1\":{\"2168\":1,\"5221\":1}}],[\"所在子网内的所有设备\",{\"1\":{\"2166\":1,\"5219\":1}}],[\"所在的节点即可取出数据\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"所在的子网了\",{\"1\":{\"2172\":1,\"5225\":1}}],[\"所在的子网\",{\"1\":{\"2168\":1,\"2172\":1,\"5221\":1,\"5225\":1}}],[\"所在的服务器\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"所带来的三级缓存问题\",{\"1\":{\"811\":1,\"3799\":1}}],[\"所谓的长事务\",{\"1\":{\"2409\":1,\"4742\":1}}],[\"所谓的状态同步是指数据同步\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"所谓的双端队列\",{\"1\":{\"611\":1}}],[\"所谓事务管理\",{\"1\":{\"765\":1,\"3753\":1}}],[\"所有线程在当前任务执行完毕后\",{\"1\":{\"2998\":1,\"4223\":1}}],[\"所有线程都在队列里排队\",{\"1\":{\"2903\":1,\"4128\":1}}],[\"所有变量都需要存储在主内存中\",{\"1\":{\"2857\":1,\"4082\":1}}],[\"所有值小于\",{\"1\":{\"2622\":1,\"4955\":1}}],[\"所有需要查询的字段的值\",{\"1\":{\"2290\":1,\"2325\":1,\"4623\":1,\"4658\":1}}],[\"所有传输的内容都经过加密\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"所有传输的内容都是明文\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"所有节点访问同一份最新的数据副本\",{\"1\":{\"1825\":1,\"4385\":1}}],[\"所有consumer都订阅了这4个分区\",{\"1\":{\"969\":1,\"5116\":1}}],[\"所有\",{\"1\":{\"823\":1,\"3811\":1}}],[\"所有的线程都能得到资源\",{\"1\":{\"2904\":1,\"4129\":1}}],[\"所有的线程都可以访问并修改同一个资源\",{\"1\":{\"2753\":1,\"3978\":1}}],[\"所有的写命令会追加到\",{\"1\":{\"2656\":1,\"4989\":1}}],[\"所有的数据都是通过\",{\"1\":{\"1104\":1,\"1272\":1,\"1440\":1,\"1608\":1,\"4486\":1}}],[\"所有的事务依次逐个执行\",{\"1\":{\"772\":1,\"3760\":1}}],[\"所有的请求最终都会传送到顶层的启动类加载器\",{\"1\":{\"231\":1,\"3514\":1}}],[\"所有方法都实现了同步\",{\"1\":{\"465\":1}}],[\"所有属性值都是对应类型的初始值\",{\"1\":{\"312\":1,\"3589\":1}}],[\"所以还是需要等待催生http2不得不出的时机到来\",{\"1\":{\"5165\":1}}],[\"所以md5不再是安全的了\",{\"1\":{\"3221\":1}}],[\"所以md5是安全的\",{\"1\":{\"3221\":1}}],[\"所以mybatis\",{\"1\":{\"907\":1,\"3895\":1}}],[\"所以需要把工具类拷贝一份到网关微服务\",{\"1\":{\"3146\":1,\"5397\":1}}],[\"所以需要根据类别去分开查找\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"所以最多只能创建核心线程数的线程\",{\"1\":{\"2983\":1,\"4208\":1}}],[\"所以最后你获得的这个集合所占的空间总是比你实际需要的要大\",{\"1\":{\"501\":1}}],[\"所以响应速度更快\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"所以复杂度为\",{\"1\":{\"2598\":1,\"4931\":1}}],[\"所以获取长度的复杂度为\",{\"1\":{\"2598\":1,\"4931\":1}}],[\"所以查询性能会受到一定的影响\",{\"1\":{\"2581\":1,\"4914\":1}}],[\"所以直接读取最新的数据就好了\",{\"1\":{\"2527\":1,\"4860\":1}}],[\"所以大多数\",{\"1\":{\"2481\":1,\"4814\":1}}],[\"所以为了能安全的对表结构进行变更\",{\"1\":{\"2416\":1,\"4749\":1}}],[\"所以域名的层级关系类似一个树状结构\",{\"1\":{\"2205\":1,\"5258\":1}}],[\"所以上层保证相同数据到同一个机房即可\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"所以就很好了避免幻读问题\",{\"1\":{\"2524\":1,\"2525\":1,\"4857\":1,\"4858\":1}}],[\"所以就需要消费者消费成功\",{\"1\":{\"1856\":1,\"3933\":1}}],[\"所以就避免了内存拷贝消耗\",{\"1\":{\"1061\":1,\"1229\":1,\"1397\":1,\"1565\":1,\"4443\":1}}],[\"所以会消耗过多的\",{\"1\":{\"2581\":1,\"4914\":1}}],[\"所以会对动态表进行更新操作\",{\"1\":{\"1846\":1,\"3923\":1}}],[\"所以会出现死循环\",{\"1\":{\"801\":1,\"3789\":1}}],[\"所以其他\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"所以不会导致缓冲区溢出的问题\",{\"1\":{\"2599\":1,\"4932\":1}}],[\"所以不用担心后面的数据没接收到导致数据不一致性\",{\"1\":{\"1810\":1,\"4370\":1}}],[\"所以不能作为\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"所以无法进行投票等操作了\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"所以此时server1\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"所以当\",{\"1\":{\"1799\":1,\"4359\":1}}],[\"所以实现起来比较简单\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"4529\":1}}],[\"所以在使用这两条语句的时候\",{\"1\":{\"2452\":1,\"4785\":1}}],[\"所以在收到通知后应尽可能地读写数据\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"所以在收到通知后\",{\"1\":{\"1069\":1,\"1237\":1,\"1405\":1,\"1573\":1,\"4451\":1}}],[\"所以在锁定范围和锁的作用域上两者并无区别\",{\"1\":{\"507\":1}}],[\"所以只需要传入一个待检测的\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"所以也叫做时分多路复用\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"所以可以考虑使用前缀索引带替普通索引\",{\"1\":{\"2352\":1,\"4685\":1}}],[\"所以可以根据这个信息确定送给哪个模块\",{\"1\":{\"2091\":1}}],[\"所以可以保证公共资源不会被多个线程同时访问\",{\"1\":{\"1030\":1,\"1198\":1,\"1366\":1,\"1534\":1,\"4412\":1}}],[\"所以可以认为二叉搜索树的时间复杂度介于o\",{\"1\":{\"643\":1,\"3631\":1}}],[\"所以必然会涉及到partition的分配问题\",{\"1\":{\"943\":1,\"5090\":1}}],[\"所以对于主键索引来说\",{\"1\":{\"2315\":1,\"4648\":1}}],[\"所以对象之间两两不相等\",{\"1\":{\"913\":1,\"3901\":1}}],[\"所以对不同的操作具有不同的效率\",{\"1\":{\"444\":1}}],[\"所以我们一般认为\",{\"1\":{\"5162\":1}}],[\"所以我们可以看到\",{\"1\":{\"1012\":1}}],[\"所以我们的每个starter都是依赖autoconfigure的\",{\"1\":{\"872\":1,\"3860\":1}}],[\"所以我们在写依赖时才不需要写版本号\",{\"1\":{\"866\":1,\"3854\":1}}],[\"所以我们在分析\",{\"1\":{\"786\":1,\"3774\":1}}],[\"所以要存放到三级缓存中处理\",{\"1\":{\"809\":1,\"3797\":1}}],[\"所以如图按照\",{\"1\":{\"801\":1,\"3789\":1}}],[\"所以如果要使用key来映射分区\",{\"1\":{\"940\":1,\"5087\":1}}],[\"所以如果你要在集合中保存大量的数据那么使用vector有一些优势\",{\"1\":{\"501\":1}}],[\"所以如果可以预估数据量的话\",{\"1\":{\"451\":1}}],[\"所以它比普通的二叉搜索树效率要低一点\",{\"1\":{\"658\":1,\"3646\":1}}],[\"所以它也可以保持插入顺序\",{\"1\":{\"369\":1}}],[\"所以发动机这个类和车这个类之间\",{\"1\":{\"581\":1}}],[\"所以程序员这个类可以继承雇员类\",{\"1\":{\"579\":1}}],[\"所以猫这个类可以继承动物类\",{\"1\":{\"578\":1}}],[\"所以效率不如红黑树\",{\"1\":{\"526\":1,\"3615\":1}}],[\"所以这就导致原链表顺序为a\",{\"1\":{\"520\":1,\"3609\":1}}],[\"所以这里比较如下两个list1和list2的区别\",{\"1\":{\"475\":1}}],[\"所以说\",{\"1\":{\"510\":1,\"2198\":1,\"5251\":1}}],[\"所以保存相同内容的vector与arraylist\",{\"1\":{\"461\":1}}],[\"所以treeset中的元素要实现comparable接口\",{\"1\":{\"382\":1}}],[\"所以\",{\"1\":{\"264\":1,\"267\":1,\"375\":1,\"421\":1,\"513\":1,\"551\":1,\"559\":1,\"582\":1,\"587\":1,\"612\":1,\"617\":1,\"620\":1,\"791\":1,\"795\":1,\"926\":1,\"928\":1,\"1013\":1,\"1056\":1,\"1070\":1,\"1102\":1,\"1106\":1,\"1151\":1,\"1152\":1,\"1224\":1,\"1238\":1,\"1270\":1,\"1274\":1,\"1319\":1,\"1320\":1,\"1392\":1,\"1406\":1,\"1438\":1,\"1442\":1,\"1487\":1,\"1488\":1,\"1560\":1,\"1574\":1,\"1606\":1,\"1610\":1,\"1655\":1,\"1656\":1,\"1807\":1,\"1818\":1,\"1884\":1,\"1890\":1,\"1891\":1,\"1899\":1,\"1905\":1,\"1906\":1,\"1914\":1,\"1920\":1,\"1921\":1,\"1927\":1,\"1933\":1,\"1934\":1,\"1940\":1,\"1946\":1,\"1947\":1,\"1955\":1,\"1961\":1,\"1962\":1,\"2331\":1,\"2429\":1,\"2447\":1,\"2469\":1,\"2520\":1,\"2522\":1,\"2597\":1,\"2673\":1,\"3186\":1,\"3779\":1,\"3783\":1,\"4367\":1,\"4378\":1,\"4438\":1,\"4452\":1,\"4484\":1,\"4488\":1,\"4533\":1,\"4534\":1,\"4664\":1,\"4762\":1,\"4780\":1,\"4802\":1,\"4853\":1,\"4855\":1,\"4930\":1,\"5006\":1,\"5073\":1,\"5075\":1,\"5145\":1,\"5152\":1,\"5153\":1,\"5162\":2,\"5170\":1,\"5175\":1,\"5176\":1,\"5437\":1}}],[\"xian\",{\"0\":{\"5472\":1}}],[\"xiaolincoding\",{\"1\":{\"1074\":1,\"1183\":1,\"1242\":1,\"1351\":1,\"1410\":1,\"1519\":1,\"1578\":1,\"1687\":1,\"4456\":1,\"4565\":1}}],[\"xiaolegeaizy\",{\"1\":{\"886\":1,\"3874\":1}}],[\"x锁\",{\"1\":{\"2453\":1,\"4786\":1}}],[\"x\",{\"1\":{\"2219\":4,\"2460\":1,\"2461\":2,\"2462\":5,\"2466\":1,\"2470\":2,\"2471\":2,\"2472\":3,\"4793\":1,\"4794\":2,\"4795\":5,\"4799\":1,\"4803\":2,\"4804\":2,\"4805\":3,\"5272\":4}}],[\"xxxautoconfiguration的作用就是按需加载组件\",{\"1\":{\"823\":1,\"3811\":1}}],[\"xxx包实现起步依赖\",{\"1\":{\"816\":1,\"3804\":1}}],[\"xml里面加入配置\",{\"1\":{\"903\":1,\"3891\":1}}],[\"xml并解析出里面所有的标签实例化到ioc容器中\",{\"1\":{\"325\":1,\"3602\":1}}],[\"xml\",{\"1\":{\"263\":1,\"737\":1,\"3725\":1}}],[\"xbootclasspath参数指定的路径下的所有类\",{\"1\":{\"206\":1,\"3489\":1}}],[\"子进程执行\",{\"1\":{\"2647\":1,\"4980\":1}}],[\"子查询的结果集无法使用索引\",{\"1\":{\"2581\":1,\"4914\":1}}],[\"子查询性能差的原因\",{\"1\":{\"2581\":1,\"4914\":1}}],[\"子句中\",{\"1\":{\"2580\":1,\"4913\":1}}],[\"子句中打开资源\",{\"1\":{\"260\":1,\"3545\":1}}],[\"子线程无须返回数据\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4564\":1}}],[\"子线程负责完成后续的业务处理\",{\"1\":{\"1181\":1,\"1349\":1,\"1517\":1,\"1685\":1,\"4563\":1}}],[\"子线程中的\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4559\":1}}],[\"子线程完成业务处理后\",{\"1\":{\"1165\":1,\"1333\":1,\"1501\":1,\"1669\":1,\"4547\":1}}],[\"子线程里的\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4545\":1}}],[\"子加载器才会尝试自己去加载\",{\"1\":{\"232\":1,\"3515\":1}}],[\"大学时间我主要利用课外时间学习了\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"大致相同\",{\"1\":{\"2739\":1,\"3964\":1}}],[\"大致如下图所示\",{\"1\":{\"1764\":1,\"4324\":1}}],[\"大于等于这个\",{\"1\":{\"2538\":1,\"2540\":1,\"4871\":1,\"4873\":1}}],[\"大小\",{\"1\":{\"2072\":1,\"2073\":1}}],[\"大白话\",{\"1\":{\"2032\":1}}],[\"大量长任务\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"大量任务并发竞争时\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"大数据题\",{\"0\":{\"1840\":1,\"3917\":1}}],[\"大的优先\",{\"1\":{\"1806\":2,\"4366\":2}}],[\"大的优先作为\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"大的优先为\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"大大降低系统的性能\",{\"1\":{\"2894\":1,\"4119\":1}}],[\"大大降低数据库的性能\",{\"1\":{\"1730\":1,\"4290\":1}}],[\"大大简化了\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"大大提高了检测的效率\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"大家好\",{\"1\":{\"1969\":1}}],[\"大家应该都知道\",{\"1\":{\"625\":1}}],[\"大家可以把\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"大家可以看到\",{\"1\":{\"624\":1}}],[\"大家可以看一下这篇探讨\",{\"1\":{\"621\":1}}],[\"大家可以想象\",{\"1\":{\"612\":1}}],[\"大部分人解释这一定律时\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"大部分情况都是\",{\"1\":{\"718\":1,\"3706\":1}}],[\"大部分时间是单线程操作的\",{\"1\":{\"544\":1}}],[\"大部分类在具体用到的时候才会去加载\",{\"1\":{\"202\":1,\"3485\":1}}],[\"大功告成\",{\"1\":{\"292\":1,\"3569\":1}}],[\"大多数的\",{\"1\":{\"260\":1,\"3545\":1}}],[\"will\",{\"1\":{\"2959\":2,\"4184\":2}}],[\"with\",{\"0\":{\"259\":1,\"3544\":1},\"1\":{\"2366\":1,\"2959\":1,\"4184\":1,\"4699\":1}}],[\"watistatus\",{\"1\":{\"2835\":1,\"4060\":1}}],[\"waitstatus\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"wait\",{\"0\":{\"2112\":1,\"2113\":1,\"2114\":1,\"2115\":1,\"2116\":1,\"2117\":1},\"1\":{\"1034\":1,\"1057\":1,\"1061\":1,\"1065\":1,\"1066\":1,\"1071\":1,\"1202\":1,\"1225\":1,\"1229\":1,\"1233\":1,\"1234\":1,\"1239\":1,\"1370\":1,\"1393\":1,\"1397\":1,\"1401\":1,\"1402\":1,\"1407\":1,\"1538\":1,\"1561\":1,\"1565\":1,\"1569\":1,\"1570\":1,\"1575\":1,\"1997\":1,\"1998\":1,\"1999\":1,\"2000\":1,\"2001\":1,\"2002\":1,\"2921\":1,\"2959\":1,\"4146\":1,\"4184\":1,\"4416\":1,\"4439\":1,\"4443\":1,\"4447\":1,\"4448\":1,\"4453\":1}}],[\"word\",{\"1\":{\"2756\":2,\"3981\":2}}],[\"workqueue\",{\"1\":{\"2959\":6,\"2963\":1,\"4184\":6,\"4188\":1}}],[\"work\",{\"1\":{\"492\":1,\"494\":1}}],[\"wechat\",{\"1\":{\"3022\":1,\"4247\":1}}],[\"websockets\",{\"1\":{\"3044\":1,\"5295\":1}}],[\"web\",{\"1\":{\"858\":1,\"860\":2,\"3846\":1,\"3848\":2}}],[\"weixin\",{\"1\":{\"831\":1,\"919\":1,\"2554\":1,\"2772\":1,\"2877\":1,\"2911\":1,\"3022\":1,\"3819\":1,\"3907\":1,\"3997\":1,\"4102\":1,\"4136\":1,\"4247\":1,\"4887\":1}}],[\"write将数据写入到了系统内核缓冲区之后直接返回了\",{\"1\":{\"2657\":1,\"4990\":1}}],[\"writefields\",{\"1\":{\"458\":1}}],[\"writeint\",{\"1\":{\"455\":1}}],[\"write\",{\"0\":{\"1080\":1,\"1248\":1,\"1416\":1,\"1584\":1,\"4462\":1},\"1\":{\"455\":3,\"1031\":1,\"1070\":1,\"1077\":1,\"1082\":1,\"1087\":1,\"1095\":1,\"1199\":1,\"1238\":1,\"1245\":1,\"1250\":1,\"1255\":1,\"1263\":1,\"1367\":1,\"1406\":1,\"1413\":1,\"1418\":1,\"1423\":1,\"1431\":1,\"1535\":1,\"1574\":1,\"1581\":1,\"1586\":1,\"1591\":1,\"1599\":1,\"2392\":1,\"2425\":1,\"2657\":1,\"2663\":1,\"4413\":1,\"4452\":1,\"4459\":1,\"4464\":1,\"4469\":1,\"4477\":1,\"4725\":1,\"4758\":1,\"4990\":1,\"4996\":1}}],[\"writeobject\",{\"1\":{\"455\":2,\"458\":1}}],[\"www\",{\"1\":{\"352\":1,\"1074\":1,\"1183\":1,\"1242\":1,\"1351\":1,\"1410\":1,\"1519\":1,\"1578\":1,\"1687\":1,\"2201\":1,\"2203\":1,\"2213\":1,\"2214\":2,\"2215\":1,\"2216\":1,\"2217\":1,\"2218\":1,\"3288\":1,\"4456\":1,\"4565\":1,\"5254\":1,\"5256\":1,\"5266\":1,\"5267\":2,\"5268\":1,\"5269\":1,\"5270\":1,\"5271\":1}}],[\"when\",{\"1\":{\"2959\":3,\"4184\":3}}],[\"where\",{\"1\":{\"81\":1,\"2338\":1,\"3369\":1,\"4671\":1}}],[\"while\",{\"1\":{\"263\":1}}],[\"570da6d5277a646f6552b8832012f5dc\",{\"1\":{\"3250\":1}}],[\"543902719\",{\"1\":{\"2820\":1,\"4045\":1}}],[\"5分钟\",{\"0\":{\"3026\":1,\"5277\":1},\"1\":{\"2643\":1,\"4976\":1}}],[\"52258054\",{\"1\":{\"2554\":1,\"4887\":1}}],[\"5没有\",{\"0\":{\"2125\":1}}],[\"5第三次挥手丢失了\",{\"0\":{\"2110\":1}}],[\"5初始序列号\",{\"0\":{\"2099\":1}}],[\"5如何唯一确定一个\",{\"0\":{\"2037\":1}}],[\"58同城\",{\"0\":{\"1843\":1,\"3920\":1}}],[\"512\",{\"1\":{\"2607\":1,\"2615\":1,\"2622\":1,\"4940\":1,\"4948\":1,\"4955\":1}}],[\"51167384\",{\"1\":{\"981\":1,\"5128\":1}}],[\"51b27d00cf50d9aca86e0934ab42a565\",{\"1\":{\"958\":1,\"5105\":1}}],[\"5装饰器模式\",{\"0\":{\"685\":1}}],[\"5502\",{\"1\":{\"548\":1,\"3520\":1}}],[\"5倍\",{\"1\":{\"469\":2}}],[\"5finally和return的执行顺序\",{\"0\":{\"265\":1}}],[\"5\",{\"0\":{\"376\":1,\"441\":1,\"527\":1,\"1912\":1,\"3276\":1,\"3278\":1,\"3280\":1,\"3283\":1},\"1\":{\"258\":1,\"274\":1,\"633\":1,\"741\":1,\"1890\":1,\"1905\":1,\"1920\":1,\"1933\":1,\"1946\":1,\"1961\":1,\"2065\":1,\"2237\":2,\"2239\":2,\"2254\":1,\"2305\":1,\"2333\":1,\"2344\":1,\"2437\":1,\"2465\":1,\"2504\":2,\"2573\":2,\"2590\":1,\"2655\":1,\"2788\":1,\"2796\":1,\"2807\":1,\"2814\":1,\"2817\":1,\"3031\":1,\"3039\":1,\"3061\":1,\"3062\":1,\"3076\":1,\"3090\":1,\"3161\":1,\"3213\":1,\"3273\":1,\"3543\":1,\"3551\":1,\"3729\":1,\"4013\":1,\"4021\":1,\"4032\":1,\"4039\":1,\"4042\":1,\"4570\":2,\"4572\":2,\"4587\":1,\"4638\":1,\"4666\":1,\"4677\":1,\"4770\":1,\"4798\":1,\"4837\":2,\"4906\":2,\"4923\":1,\"4988\":1,\"5152\":1,\"5175\":1,\"5282\":1,\"5290\":1,\"5312\":1,\"5313\":1,\"5327\":1,\"5341\":1,\"5412\":1}}],[\"若所有线程均在工作\",{\"1\":{\"2998\":1,\"4223\":1}}],[\"若多余一个任务被提交到该线程池\",{\"1\":{\"2997\":1,\"4222\":1}}],[\"若没有\",{\"1\":{\"2996\":1,\"4221\":1}}],[\"若该记录被其他事务占用或当前版本对该事务不可见\",{\"1\":{\"2548\":1,\"4881\":1}}],[\"若该同步锁被别的线程占用\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"若系统出现\",{\"1\":{\"1835\":1,\"4395\":1}}],[\"若要重写某一业务代码\",{\"1\":{\"1725\":1,\"4285\":1}}],[\"若扩容后容量仍然小于最小容量\",{\"1\":{\"469\":1}}],[\"若声明多个异常\",{\"1\":{\"254\":1,\"3539\":1}}],[\"若方法中存在检查异常\",{\"1\":{\"254\":1,\"3539\":1}}],[\"那当前线程就要阻塞等待\",{\"1\":{\"2923\":1,\"4148\":1}}],[\"那多个线程之间并不会相互影响\",{\"1\":{\"2900\":1,\"4125\":1}}],[\"那这部分数据就算丢失了\",{\"1\":{\"2652\":1,\"4985\":1}}],[\"那在对表结构做变更操作的时候\",{\"1\":{\"2409\":1,\"4742\":1}}],[\"那如果数据库有一个长事务\",{\"1\":{\"2409\":1,\"4742\":1}}],[\"那它是在什么时候释放的\",{\"1\":{\"2407\":1,\"4740\":1}}],[\"那有什么其他方式可以避免\",{\"1\":{\"2377\":1,\"4710\":1}}],[\"那有没有可能只使用一个进程来维护多个\",{\"1\":{\"1050\":1,\"1218\":1,\"1386\":1,\"1554\":1,\"4432\":1}}],[\"那\",{\"1\":{\"2266\":1,\"4599\":1}}],[\"那时候http\",{\"1\":{\"1889\":1,\"1904\":1,\"1919\":1,\"1932\":1,\"1945\":1,\"1960\":1,\"5151\":1,\"5174\":1}}],[\"那数据是不是不一致啦\",{\"1\":{\"1856\":1,\"3933\":1}}],[\"那就意味着要准备数据在真实编程语言中来显示\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"那就自动重试嘛\",{\"1\":{\"1856\":1,\"3933\":1}}],[\"那就和\",{\"1\":{\"1835\":1,\"4395\":1}}],[\"那就是\",{\"1\":{\"1050\":1,\"1218\":1,\"1386\":1,\"1554\":1,\"2147\":1,\"4432\":1,\"5200\":1}}],[\"那就是插入的数据是有序的\",{\"1\":{\"643\":1,\"3631\":1}}],[\"那就是0\",{\"1\":{\"421\":1}}],[\"那怎么解决呢\",{\"1\":{\"1815\":1,\"4375\":1}}],[\"那也就意味着我们需要两台以上同意\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"那既然引入多线程\",{\"1\":{\"1164\":1,\"1332\":1,\"1500\":1,\"1668\":1,\"4546\":1}}],[\"那样轮询扫描整个\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"那后续很有可能会再被引用到\",{\"1\":{\"1009\":1}}],[\"那反射是啥\",{\"1\":{\"287\":1,\"3564\":1}}],[\"那么通过查表方式\",{\"1\":{\"3240\":1}}],[\"那么还是用专业的消息队列中间件吧\",{\"1\":{\"3188\":1,\"5439\":1}}],[\"那么访问这个变量的每个线程都会有这个变量的本地副本\",{\"1\":{\"2938\":1,\"4163\":1}}],[\"那么aqs会把当前线程以及等待状态封装成一个node节点加入到同步队列中\",{\"1\":{\"2829\":1,\"4054\":1}}],[\"那么会尝试使用doreleaseshared方法尝试唤醒节点\",{\"1\":{\"2827\":1,\"4052\":1}}],[\"那么该线程在后续访问时便会自动获得锁\",{\"1\":{\"2759\":1,\"3984\":1}}],[\"那么说明这个值在布隆过滤器中\",{\"1\":{\"2707\":1,\"5040\":1}}],[\"那么说完了\",{\"1\":{\"1808\":1,\"4368\":1}}],[\"那么这个消息理论上就会被消费两次\",{\"1\":{\"3118\":1,\"5369\":1}}],[\"那么这个写操作的结果一定对读的这个线程可见\",{\"1\":{\"2860\":1,\"4085\":1}}],[\"那么这个元素一定不在\",{\"1\":{\"2700\":1,\"5033\":1}}],[\"那么这个插入语句就会被阻塞\",{\"1\":{\"2525\":1,\"4858\":1}}],[\"那么这些个服务一定会出现失败的情况\",{\"1\":{\"1755\":1,\"4315\":1}}],[\"那么当前任务会被拒绝\",{\"1\":{\"2988\":1,\"4213\":1}}],[\"那么当事务\",{\"1\":{\"2500\":1,\"4833\":1}}],[\"那么当这个表的数据达到一个体量后\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"那么事务\",{\"1\":{\"2495\":1,\"2496\":1,\"4828\":1,\"4829\":1}}],[\"那么另外一个事务在获取相同范围的\",{\"1\":{\"2470\":1,\"2471\":1,\"4803\":1,\"4804\":1}}],[\"那么其他事务就无法插入\",{\"1\":{\"2465\":1,\"4798\":1}}],[\"那么有了\",{\"1\":{\"2428\":1,\"4761\":1}}],[\"那么有一些消费者就会多分配到一些分区\",{\"1\":{\"946\":1,\"5093\":1}}],[\"那么加密信息也就不安全了\",{\"1\":{\"3285\":1}}],[\"那么加\",{\"1\":{\"2427\":1,\"4760\":1}}],[\"那么在加\",{\"1\":{\"2428\":1,\"4761\":1}}],[\"那么在线程\",{\"1\":{\"2413\":1,\"4746\":1}}],[\"那么在备份数据库之前先开启事务\",{\"1\":{\"2378\":1,\"4711\":1}}],[\"那么将会被阻塞\",{\"1\":{\"2405\":1,\"4738\":1}}],[\"那么将会节约很大磁盘空间\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"那么本线程接下来如果要对学生表执行写操作的语句\",{\"1\":{\"2394\":1,\"4727\":1}}],[\"那么索引\",{\"1\":{\"2350\":1,\"4683\":1}}],[\"那么直接根据这个索引就可以查到数据\",{\"1\":{\"2327\":1,\"4660\":1}}],[\"那么直接根据该索引\",{\"1\":{\"2326\":1,\"4659\":1}}],[\"那么正好根据主键索引就可以查到主键\",{\"1\":{\"2327\":1,\"4660\":1}}],[\"那么对应的索引也将会被修改\",{\"1\":{\"2315\":1,\"4648\":1}}],[\"那么对比将失去意义\",{\"1\":{\"447\":1}}],[\"那么也不能扔给应用层去处理\",{\"1\":{\"2030\":1}}],[\"那么强一致性和可用性只能\",{\"1\":{\"1832\":1,\"4392\":1}}],[\"那么跳过那些已经被丢弃的提案又是什么意思呢\",{\"1\":{\"1817\":1,\"4377\":1}}],[\"那么肯定会产生数据不一致性\",{\"1\":{\"1813\":1,\"4373\":1}}],[\"那么整个集群会如何重新选举\",{\"1\":{\"1804\":1,\"4364\":1}}],[\"那么整个服务框架就可以进入消息广播模式了\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"那么新加入的服务器就会自觉地进入数据恢复模式\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"那么下次请求就不会请求到该服务\",{\"1\":{\"1751\":1,\"4311\":1}}],[\"那么自然就带来了多线程竞争资源的问题\",{\"1\":{\"1164\":1,\"1332\":1,\"1500\":1,\"1668\":1,\"4546\":1}}],[\"那么如果不对密码加密\",{\"1\":{\"3226\":1}}],[\"那么如果数据库里有很多数据\",{\"1\":{\"2376\":1,\"4709\":1}}],[\"那么如果文件描述符是阻塞的\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"那么如果我们想把linkedlist变成线程安全的\",{\"1\":{\"512\":1}}],[\"那么roundrobinassignor的分配结果如下\",{\"1\":{\"959\":1,\"5106\":1}}],[\"那么分配结果是不保证\",{\"1\":{\"957\":1,\"5104\":1}}],[\"那么分配结果是尽量均衡的\",{\"1\":{\"957\":1,\"5104\":1}}],[\"那么c0又会比c1\",{\"1\":{\"950\":1,\"5097\":1}}],[\"那么capacity就是这个桶\",{\"1\":{\"405\":1}}],[\"那么因为分区数变化\",{\"1\":{\"940\":1,\"5087\":1}}],[\"那么相应的pojo类必须实现serializable接口\",{\"1\":{\"913\":1,\"3901\":1}}],[\"那么二级缓存一样可以解决循环依赖问题\",{\"1\":{\"814\":1,\"3802\":1}}],[\"那么就代表加锁失败\",{\"1\":{\"3198\":1,\"5449\":1}}],[\"那么就把该任务放入到任务队列里等待执行\",{\"1\":{\"2986\":1,\"4211\":1}}],[\"那么就会新建一个线程来执行任务\",{\"1\":{\"2985\":1,\"4210\":1}}],[\"那么就会被阻塞\",{\"1\":{\"2406\":1,\"4739\":1}}],[\"那么就更不应该在这种字段上建立索引了\",{\"1\":{\"2342\":1,\"4675\":1}}],[\"那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制\",{\"1\":{\"2831\":1,\"4056\":1}}],[\"那么就需要在插入时排序\",{\"1\":{\"2314\":1,\"4647\":1}}],[\"那么就需要由上层\",{\"1\":{\"2023\":1}}],[\"那么就需要引入多线程\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4536\":1}}],[\"那么就造成响应的延迟\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4532\":1}}],[\"那么就去创建\",{\"1\":{\"795\":1,\"3783\":1}}],[\"那么就不再需要进⾏同步操作\",{\"1\":{\"674\":1,\"3662\":1}}],[\"那么红黑树的查询效率就比二叉搜索树要高了\",{\"1\":{\"657\":1,\"3645\":1}}],[\"那么为了应对这种极端情况\",{\"1\":{\"643\":1,\"3631\":1}}],[\"那么所有的节点都会在根节点的右侧或左侧\",{\"1\":{\"643\":1,\"3631\":1}}],[\"那么它就是接近平衡的二叉树\",{\"1\":{\"643\":1,\"3631\":1}}],[\"那么n\",{\"1\":{\"528\":1,\"3617\":1}}],[\"那么我们的\",{\"1\":{\"1793\":1,\"4353\":1}}],[\"那么我们也可以先来尝试下这样的依赖\",{\"1\":{\"791\":1,\"3779\":1}}],[\"那么我们尝试着设置一下\",{\"1\":{\"410\":1}}],[\"那么我可以将已有的linkedlist直接转成\",{\"1\":{\"512\":1}}],[\"那么锁定的也是this对象\",{\"1\":{\"509\":1}}],[\"那么锁定的就是用户传入的对象\",{\"1\":{\"509\":1}}],[\"那么mutex对象又是什么呢\",{\"1\":{\"509\":1}}],[\"那么容量就为传入的最小容量\",{\"1\":{\"469\":1}}],[\"那么使用arraylist是更好的选择\",{\"1\":{\"448\":1}}],[\"那么\",{\"1\":{\"418\":1,\"474\":1,\"723\":1,\"1110\":1,\"1278\":1,\"1446\":1,\"1614\":1,\"1884\":1,\"1899\":1,\"1914\":1,\"1927\":1,\"1940\":1,\"1955\":1,\"2166\":2,\"2435\":1,\"2477\":1,\"2669\":1,\"3274\":1,\"3711\":1,\"4492\":1,\"4768\":1,\"4810\":1,\"5002\":1,\"5145\":1,\"5170\":1,\"5219\":2}}],[\"那么hash会选择大于该数字的第一个2的幂作为容量\",{\"1\":{\"413\":1}}],[\"那么finally中的代码还是会执⾏\",{\"1\":{\"267\":1}}],[\"那么后⾯的finally\",{\"1\":{\"266\":1}}],[\"那么虚拟机是如何加载这些\",{\"1\":{\"192\":1,\"3475\":1}}],[\"那些我们没有做的关闭资源的操作\",{\"1\":{\"264\":1}}],[\"那必须在方法头中显式声明该异常\",{\"1\":{\"254\":1,\"3539\":1}}],[\"不够安全\",{\"1\":{\"3285\":1}}],[\"不建议直接使用md5\",{\"1\":{\"3221\":1}}],[\"不建议使用过长的字段作为主键\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"不建议使用\",{\"1\":{\"594\":1}}],[\"不存在则为\",{\"1\":{\"3196\":1,\"5447\":1}}],[\"不存在时\",{\"1\":{\"3195\":1,\"5446\":1}}],[\"不存在的话\",{\"1\":{\"2699\":1,\"5032\":1}}],[\"不存储元素\",{\"1\":{\"2982\":1,\"4207\":1}}],[\"不处理新任务\",{\"1\":{\"2975\":1,\"4200\":1}}],[\"不进行线程状态的改变\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"不停地循环判断锁是否能够被成功获取\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"不停服如何实现\",{\"0\":{\"1864\":1,\"3941\":1}}],[\"不行\",{\"1\":{\"2740\":1,\"3965\":1}}],[\"不太推荐\",{\"1\":{\"2728\":1,\"5061\":1}}],[\"不光能存放文本数据\",{\"1\":{\"2597\":1,\"4930\":1}}],[\"不光是这个依赖下的meta\",{\"1\":{\"823\":1,\"3811\":1}}],[\"不论是内存临时表还是磁盘临时表都不会存在索引\",{\"1\":{\"2581\":1,\"4914\":1}}],[\"不包含\",{\"1\":{\"2580\":1,\"4913\":1}}],[\"不包括当前事务自己和已提交的事务\",{\"1\":{\"2542\":1,\"4875\":1}}],[\"不为\",{\"1\":{\"2336\":1,\"4669\":1}}],[\"不做回表操作\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"不做双活\",{\"1\":{\"1876\":1,\"3953\":1}}],[\"不懂的同学可以暂存疑\",{\"1\":{\"2301\":1,\"4634\":1}}],[\"不管主键还是非主键\",{\"1\":{\"2285\":1,\"2317\":1,\"4618\":1,\"4650\":1}}],[\"不管列表是否已排序\",{\"1\":{\"342\":1}}],[\"不提供事务支持\",{\"1\":{\"2245\":1,\"4578\":1}}],[\"不在同一个子网中\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"不保证可靠交付数据\",{\"1\":{\"2061\":1}}],[\"不保证网络包的按序交付\",{\"1\":{\"2023\":1}}],[\"不重复\",{\"1\":{\"2060\":1}}],[\"不丢失\",{\"1\":{\"2060\":1}}],[\"不能小于\",{\"1\":{\"2694\":1,\"5027\":1}}],[\"不能重复\",{\"1\":{\"2295\":1,\"4628\":1}}],[\"不能像\",{\"1\":{\"2028\":1}}],[\"不能根据索引位置进行操作\",{\"1\":{\"351\":1}}],[\"不仅会消耗系统资源\",{\"1\":{\"2954\":1,\"4179\":1}}],[\"不仅可以保存文本数据\",{\"1\":{\"2597\":1,\"4930\":1}}],[\"不仅支持\",{\"1\":{\"1834\":1,\"4394\":1}}],[\"不仅复杂而且也没有性能优势\",{\"1\":{\"1123\":1,\"1291\":1,\"1459\":1,\"1627\":1,\"4505\":1}}],[\"不是像php那样成熟的编程语言\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"不是听狗叫的\",{\"1\":{\"3034\":1,\"5285\":1}}],[\"不是万能的\",{\"1\":{\"2799\":1,\"4024\":1}}],[\"不是\",{\"1\":{\"2130\":1,\"2223\":1,\"5183\":1}}],[\"不是两次\",{\"0\":{\"2097\":1},\"1\":{\"1982\":1}}],[\"不是所谓的\",{\"0\":{\"1830\":1,\"4390\":1}}],[\"不是错误或者超时的响应\",{\"1\":{\"1826\":1,\"4386\":1}}],[\"不是这么抽象的概念\",{\"1\":{\"588\":1}}],[\"不理解可以看前面的选举算法\",{\"1\":{\"1816\":1,\"4376\":1}}],[\"不再出现\",{\"1\":{\"1874\":1,\"3951\":1}}],[\"不再依赖\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"不再拷贝到用户态\",{\"1\":{\"1096\":1,\"1264\":1,\"1432\":1,\"1600\":1,\"4478\":1}}],[\"不利于维护系统\",{\"1\":{\"1741\":1,\"4301\":1}}],[\"不用关注其他人怎么开发\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"不需了解所有业务\",{\"1\":{\"1725\":1,\"4285\":1}}],[\"不需要将私钥给别人\",{\"1\":{\"3286\":1}}],[\"不需要进行\",{\"1\":{\"2550\":1,\"4883\":1}}],[\"不需要显示调用\",{\"1\":{\"2407\":1,\"4740\":1}}],[\"不需要自己构建http请求了\",{\"1\":{\"1762\":1,\"4322\":1}}],[\"不需要自己为它的方法实现同步\",{\"1\":{\"543\":1}}],[\"不需要考虑进程间通信\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"4529\":1}}],[\"不需要在进程中再创建线程\",{\"1\":{\"1133\":1,\"1301\":1,\"1469\":1,\"1637\":1,\"4515\":1}}],[\"不需要像\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"不需要必须实现接⼝\",{\"1\":{\"690\":1,\"3678\":1}}],[\"不需要预先分配很多空间\",{\"1\":{\"340\":1}}],[\"不均衡的问题会越来越严重\",{\"1\":{\"950\":1,\"5097\":1}}],[\"不安全\",{\"1\":{\"905\":1,\"3893\":1}}],[\"不会饿死在队列中\",{\"1\":{\"2904\":1,\"4129\":1}}],[\"不会产生副本\",{\"1\":{\"2859\":1,\"4084\":1}}],[\"不会影响最终结果\",{\"1\":{\"2803\":1,\"4028\":1}}],[\"不会立即同步到硬盘\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"不会阻塞\",{\"1\":{\"2647\":1,\"4980\":1}}],[\"不会相互干扰\",{\"1\":{\"2485\":1,\"4818\":1}}],[\"不会结束在中间某个环节\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"不会和行级的共享锁和独占锁发生冲突\",{\"1\":{\"2425\":1,\"4758\":1}}],[\"不会因为数据或表结构的更新\",{\"1\":{\"2373\":1,\"4706\":1}}],[\"不会修改数据\",{\"1\":{\"905\":1,\"3893\":1}}],[\"不会牵扯到扩容问题\",{\"1\":{\"626\":1}}],[\"不同于\",{\"1\":{\"2636\":1,\"4969\":1}}],[\"不同的线程池会选用不同的阻塞队列\",{\"1\":{\"2980\":1,\"4205\":1}}],[\"不同的字符串可能哈希出来的位置相同\",{\"1\":{\"2708\":1,\"5041\":1}}],[\"不同的数据库厂商对\",{\"1\":{\"2521\":1,\"4854\":1}}],[\"不同的地方\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"不同的是\",{\"1\":{\"2161\":1,\"5214\":1}}],[\"不同的是消息队列存放在内核中\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"不同局域网内的\",{\"0\":{\"2164\":1,\"5217\":1}}],[\"不同进程可以及时看到对方进程中对共享内存中数据的更新\",{\"1\":{\"1046\":1,\"1214\":1,\"1382\":1,\"1550\":1,\"4428\":1}}],[\"不同\",{\"1\":{\"900\":1,\"3888\":1}}],[\"不必再遍历所有的依赖包\",{\"1\":{\"858\":1,\"3846\":1}}],[\"不允许在应用中自行显式创建线程\",{\"1\":{\"3001\":1,\"4226\":1}}],[\"不允许分割\",{\"1\":{\"757\":1,\"3745\":1}}],[\"不允许放入\",{\"1\":{\"378\":1}}],[\"不使⽤\",{\"1\":{\"669\":1,\"3657\":1}}],[\"不应该使用链表\",{\"1\":{\"634\":1}}],[\"不应该是继承关系\",{\"1\":{\"575\":1}}],[\"不推荐使用\",{\"0\":{\"561\":1}}],[\"不支持事务和行级锁\",{\"1\":{\"2238\":1,\"4571\":1}}],[\"不支持当前事务的情况\",{\"1\":{\"779\":1,\"3767\":1}}],[\"不支持\",{\"1\":{\"542\":1,\"2248\":1,\"2252\":1,\"2255\":1,\"4581\":1,\"4585\":1,\"4588\":1}}],[\"不一直使用红黑树\",{\"0\":{\"523\":1,\"3612\":1}}],[\"不要求排序\",{\"1\":{\"438\":1}}],[\"不过最终没能通过\",{\"1\":{\"5162\":1}}],[\"不过我们需要加一个分布式锁来保证更新\",{\"1\":{\"3112\":1,\"5363\":1}}],[\"不过两者的本质都是对对象监视器\",{\"1\":{\"2932\":1,\"4157\":1}}],[\"不过并不是所有的引擎都能支持事务\",{\"1\":{\"2481\":1,\"4814\":1}}],[\"不过尽量避免在使用\",{\"1\":{\"2398\":1,\"4731\":1}}],[\"不过要注意\",{\"1\":{\"1762\":1,\"4322\":1}}],[\"不过可以发现c2承担了4个分区的消费而c1订阅了t1\",{\"1\":{\"961\":1,\"5108\":1}}],[\"不过考虑这种情况\",{\"1\":{\"959\":1,\"5106\":1}}],[\"不过时间复杂度仍然是o\",{\"1\":{\"658\":1,\"3646\":1}}],[\"不过理想情况下随机hashcode算法下所有bin中节点的分布频率会遵循泊松分布\",{\"1\":{\"530\":1,\"3619\":1}}],[\"不过\",{\"1\":{\"429\":1,\"724\":1,\"1776\":1,\"2423\":1,\"2567\":1,\"2744\":1,\"3712\":1,\"3969\":1,\"4336\":1,\"4756\":1,\"4900\":1,\"5162\":1}}],[\"不过需要注意的是\",{\"1\":{\"375\":1}}],[\"不可逆性\",{\"1\":{\"3217\":1}}],[\"不可以有\",{\"1\":{\"2287\":1,\"4620\":1}}],[\"不可以随机访问\",{\"1\":{\"341\":1}}],[\"不可靠\",{\"1\":{\"2023\":1}}],[\"不可能同时达到\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"不可能再提交这个提案n1了\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"不可重复读和幻读现象都不可能会发生\",{\"1\":{\"2519\":1,\"4852\":1}}],[\"不可重复读和幻读现象\",{\"1\":{\"2516\":1,\"4849\":1}}],[\"不可重复读\",{\"0\":{\"2497\":1,\"4830\":1},\"1\":{\"2498\":1,\"4831\":1}}],[\"不可重复读以及幻读\",{\"1\":{\"772\":1,\"3760\":1}}],[\"不可重复\",{\"1\":{\"375\":1}}],[\"不可查异常\",{\"1\":{\"250\":1,\"3535\":1}}],[\"不被篡改\",{\"1\":{\"234\":1,\"3517\":1}}],[\"否则表示密码错误\",{\"1\":{\"3269\":1}}],[\"否则新建一个线程来处理任务\",{\"1\":{\"2982\":1,\"4207\":1}}],[\"否则会抛出java\",{\"1\":{\"2921\":1,\"4146\":1}}],[\"否则在同步队列中不停的自旋等待获取同步状态\",{\"1\":{\"2840\":1,\"4065\":1}}],[\"否则在序列化的时候会报错\",{\"1\":{\"905\":1,\"3893\":1}}],[\"否则依然存在数据丢失的风险\",{\"1\":{\"2652\":1,\"4985\":1}}],[\"否则类似于字符串或\",{\"1\":{\"2314\":1,\"4647\":1}}],[\"否则就会造成数据异常\",{\"1\":{\"984\":1,\"5131\":1}}],[\"否则采用\",{\"1\":{\"711\":1,\"3699\":1}}],[\"否则继承的这个接⼝可以什么也不⼲\",{\"1\":{\"684\":1,\"3672\":1}}],[\"否则\",{\"1\":{\"592\":1,\"2159\":1,\"2296\":1,\"2882\":1,\"4107\":1,\"4629\":1,\"5212\":1}}],[\"否则应该是组合关系\",{\"1\":{\"586\":1}}],[\"否则找一个空位添加\",{\"1\":{\"380\":1}}],[\"否则按照内容查找元素效率比较低\",{\"1\":{\"335\":1}}],[\"否则编译不会通过\",{\"1\":{\"249\":1,\"3534\":1}}],[\"否则才会尝试加载\",{\"1\":{\"203\":1,\"230\":1,\"3486\":1,\"3513\":1}}],[\"但若有空闲线程可以复用\",{\"1\":{\"2998\":1,\"4223\":1}}],[\"但当线程数不断增加时\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"但没有剩余可用资源\",{\"1\":{\"2847\":1,\"4072\":1}}],[\"但没有特别的优化\",{\"1\":{\"388\":1}}],[\"但同时只有一个线程能修改成功\",{\"1\":{\"2753\":1,\"3978\":1}}],[\"但同样也会降低插入和更新的效率\",{\"1\":{\"2345\":1,\"4678\":1}}],[\"但缓存雪崩导致的原因是缓存中的大量或者所有数据失效\",{\"1\":{\"2731\":1,\"5064\":1}}],[\"但不修改持有锁的线程id\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"但不存在于缓存中\",{\"1\":{\"2710\":1,\"2717\":1,\"5043\":1,\"5050\":1}}],[\"但不负责具体的产品\",{\"1\":{\"682\":1,\"3670\":1}}],[\"但也不算差\",{\"1\":{\"5166\":1}}],[\"但也带来了数据丢失的风险\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"但也实现了deque接口\",{\"1\":{\"339\":1}}],[\"但用户\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"但两个事务却不能在同一时间内\",{\"1\":{\"2478\":1,\"4811\":1}}],[\"但对于记录锁\",{\"1\":{\"2472\":1,\"4805\":1}}],[\"但对称加密的密钥用服务器方的证书进行了非对称加密\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"但查询条件未遵守最左匹配原则\",{\"1\":{\"2356\":1,\"4689\":1}}],[\"但又避免不了为\",{\"1\":{\"2336\":1,\"4669\":1}}],[\"但二者实现方式不一样\",{\"1\":{\"2279\":1,\"4612\":1}}],[\"但能指明一条道路\",{\"1\":{\"2214\":1,\"5267\":1}}],[\"但接收的\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"但\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"但可能会丢包和乱序\",{\"1\":{\"2070\":1}}],[\"但保证顺序和可靠\",{\"1\":{\"2069\":1}}],[\"但其他\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"但其实仔细思考\",{\"1\":{\"585\":1}}],[\"但这个就要分为两种情况了\",{\"1\":{\"1811\":1,\"4371\":1}}],[\"但这还不是最理想的零拷贝\",{\"1\":{\"1090\":1,\"1258\":1,\"1426\":1,\"1594\":1,\"4472\":1}}],[\"但只有一个线程可以对共享资源进行写操作\",{\"1\":{\"1031\":1,\"1199\":1,\"1367\":1,\"1535\":1,\"4413\":1}}],[\"但只能放入一个null\",{\"1\":{\"379\":1}}],[\"但速度慢\",{\"1\":{\"905\":1,\"3893\":1}}],[\"但速度快\",{\"1\":{\"905\":1,\"3893\":1}}],[\"但此时\",{\"1\":{\"795\":1,\"1801\":1,\"3783\":1,\"4361\":1}}],[\"但我们互相没法解耦\",{\"1\":{\"790\":1,\"3778\":1}}],[\"但无论循环依赖的数量有多少\",{\"1\":{\"790\":1,\"3778\":1}}],[\"但无法获取继承下来的方法\",{\"1\":{\"321\":1,\"3598\":1}}],[\"但无法获取继承下来的变量\",{\"1\":{\"319\":1,\"3596\":1}}],[\"但幻读仍有可能发生\",{\"1\":{\"771\":1,\"3759\":1}}],[\"但如果是对象的引用类型包含了多个变量\",{\"1\":{\"2803\":1,\"4028\":1}}],[\"但如果插入的时候是有序数据\",{\"1\":{\"657\":1,\"3645\":1}}],[\"但如果深究进去\",{\"1\":{\"548\":1}}],[\"但整体平均时间复杂度\",{\"1\":{\"625\":1}}],[\"但至今为止\",{\"1\":{\"618\":1}}],[\"但它实际上是一个\",{\"1\":{\"615\":1}}],[\"但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡\",{\"1\":{\"522\":1,\"3611\":1}}],[\"但因为\",{\"1\":{\"608\":1}}],[\"但老版本的程序\",{\"1\":{\"593\":1}}],[\"但遇到更抽象的对象的时候\",{\"1\":{\"583\":1}}],[\"但省去了很多没有必要的调平衡操作\",{\"1\":{\"526\":1,\"3615\":1}}],[\"但红黑树不像avl树一样追求绝对的平衡\",{\"1\":{\"526\":1,\"3615\":1}}],[\"但方法并没有像arraylist一样进行优化存储\",{\"1\":{\"459\":1}}],[\"但属于强同步类\",{\"1\":{\"448\":1}}],[\"但在get与set方面弱于arraylist\",{\"1\":{\"446\":1}}],[\"但在一定程度上它的发生是可以预计的\",{\"1\":{\"248\":1,\"3533\":1}}],[\"但内部有一个双向链表以维护节点的顺序\",{\"1\":{\"440\":1}}],[\"但内部使用红黑树实现\",{\"1\":{\"434\":1}}],[\"但有序\",{\"1\":{\"366\":1}}],[\"但按优先级出队\",{\"1\":{\"355\":1}}],[\"但修改本身的效率很高\",{\"1\":{\"344\":1}}],[\"但最终还是要转成编译器认识的语言\",{\"1\":{\"264\":1}}],[\"但是2004年\",{\"1\":{\"3221\":1}}],[\"但是cas也有自己的问题\",{\"1\":{\"3079\":1,\"5330\":1}}],[\"但是consumer里面进行了多线程消费\",{\"1\":{\"988\":1,\"5135\":1}}],[\"但是小于最大线程数\",{\"1\":{\"2986\":1,\"4211\":1}}],[\"但是被volatile修饰的变量操作并非具有原子性\",{\"1\":{\"2876\":1,\"4101\":1}}],[\"但是如果要对多个共享变量进行操作时\",{\"1\":{\"2812\":1,\"4037\":1}}],[\"但是版本号改变了\",{\"1\":{\"2806\":1,\"4031\":1}}],[\"但是理想情况下竞争的程度很低\",{\"1\":{\"2761\":1,\"3986\":1}}],[\"但是也可以是公平的\",{\"1\":{\"2741\":1,\"3966\":1}}],[\"但是也是在2018年\",{\"1\":{\"1888\":1,\"1903\":1,\"1918\":1,\"1931\":1,\"1944\":1,\"1959\":1,\"5150\":1,\"5173\":1}}],[\"但是还是远远没有使用一个联合索引的查询方式好\",{\"1\":{\"2573\":1,\"4906\":1}}],[\"但是还是有区别\",{\"1\":{\"550\":1}}],[\"但是与sql\",{\"1\":{\"2521\":1,\"4854\":1}}],[\"但是要实现事务必须要遵守\",{\"1\":{\"2482\":1,\"4815\":1}}],[\"但是现在处于等待状态\",{\"1\":{\"2475\":1,\"4808\":1}}],[\"但是现在是单独一个表\",{\"0\":{\"1860\":1,\"3937\":1}}],[\"但是并没有什么区别\",{\"1\":{\"2466\":1,\"4799\":1}}],[\"但是并发量上升时锁撤销会大幅影响性能\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"但是当前运行的线程数是小于最大线程数的\",{\"1\":{\"2987\":1,\"4212\":1}}],[\"但是当搭配\",{\"1\":{\"2445\":1,\"4778\":1}}],[\"但是当我们直接kill进程了\",{\"1\":{\"975\":1,\"5122\":1}}],[\"但是一直不提交\",{\"1\":{\"2410\":1,\"4743\":1}}],[\"但是一直还没提交\",{\"1\":{\"2409\":1,\"4742\":1}}],[\"但是维护索引的成本也是不小的\",{\"1\":{\"2342\":1,\"4675\":1}}],[\"但是允许数据为\",{\"1\":{\"2302\":1,\"4635\":1}}],[\"但是两者的实现方式不太一样\",{\"1\":{\"2258\":1,\"4591\":1}}],[\"但是对性能有一定的损耗\",{\"1\":{\"2249\":1,\"4582\":1}}],[\"但是对于现在的计算机\",{\"1\":{\"660\":1,\"3648\":1}}],[\"但是我们可以加盐\",{\"1\":{\"3256\":1}}],[\"但是我们可以基于\",{\"1\":{\"2061\":1}}],[\"但是我们设计的大多数类\",{\"1\":{\"588\":1}}],[\"但是服务端的进程崩溃会发生什么\",{\"0\":{\"2119\":1},\"1\":{\"2004\":1}}],[\"但是客户端突然出现故障了怎么办\",{\"0\":{\"2118\":1},\"1\":{\"2003\":1}}],[\"但是为什么现在广泛使用的还是http1\",{\"1\":{\"1885\":1,\"1900\":1,\"1941\":1,\"1956\":1,\"5146\":1}}],[\"但是不可能脏读和不可重复读现象\",{\"1\":{\"2518\":1,\"4851\":1}}],[\"但是不可能发生脏读现象\",{\"1\":{\"2517\":1,\"4850\":1}}],[\"但是不可以对该记录加\",{\"1\":{\"2461\":1,\"4794\":1}}],[\"但是不包含记录本身\",{\"1\":{\"2457\":1,\"4790\":1}}],[\"但是不一定准\",{\"1\":{\"1863\":1,\"3940\":1}}],[\"但是不符合时间局部性\",{\"1\":{\"1013\":1}}],[\"但是冗余就比较大\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"但是有\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"但是有key的情况下\",{\"1\":{\"938\":1,\"5085\":1}}],[\"但是因为某些故障\",{\"1\":{\"1829\":1,\"4389\":1}}],[\"但是过了一会\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"但是挂了两个也不能正常工作了\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"但是实际实现时比单\",{\"1\":{\"1180\":1,\"1348\":1,\"1516\":1,\"1684\":1,\"4562\":1}}],[\"但是这远比进程间通信的复杂度低得多\",{\"1\":{\"1169\":1,\"1337\":1,\"1505\":1,\"1673\":1,\"4551\":1}}],[\"但是这还不是真正的零拷贝技术\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"但是这将严重影响程序的性能\",{\"1\":{\"772\":1,\"3760\":1}}],[\"但是可能会造成太多过期\",{\"1\":{\"2671\":1,\"5004\":1}}],[\"但是可能会出现一种极端的情况\",{\"1\":{\"643\":1,\"3631\":1}}],[\"但是可以根据应用场景设置为边缘触发模式\",{\"1\":{\"1072\":1,\"1240\":1,\"1408\":1,\"1576\":1,\"4454\":1}}],[\"但是处理每个请求的事件时\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"但是需要控制同一时刻访问此资源的最大线程数量\",{\"1\":{\"1032\":1,\"1200\":1,\"1368\":1,\"1536\":1,\"4414\":1}}],[\"但是它很大程度上避免幻读现象\",{\"1\":{\"2523\":1,\"4856\":1}}],[\"但是它并不是意向锁\",{\"1\":{\"2476\":1,\"4809\":1}}],[\"但是它不存在我们所说的空间局部性了\",{\"1\":{\"1012\":1}}],[\"但是它的效率比hashtable要高好多倍\",{\"1\":{\"544\":1}}],[\"但是它的效率会比hashtable要好很多\",{\"1\":{\"544\":1}}],[\"但是每个consumer的执行时间是不固定的\",{\"1\":{\"986\":1,\"5133\":1}}],[\"但是每个mapper的二级开关是默认关闭的\",{\"1\":{\"915\":1,\"3903\":1}}],[\"但是没来得及提交offset\",{\"1\":{\"975\":1,\"5122\":1}}],[\"但是销毁sqlsession后会将里面的缓存存到二级缓存中\",{\"1\":{\"912\":1,\"3900\":1}}],[\"但是幻读或不可重复读仍有可能发生\",{\"1\":{\"770\":1,\"3758\":1}}],[\"但是在\",{\"1\":{\"800\":1,\"2609\":1,\"3788\":1,\"4942\":1}}],[\"但是在框架中的几乎是必用的一门技术\",{\"1\":{\"699\":1,\"3687\":1}}],[\"但是在随机hashcode下\",{\"1\":{\"530\":1,\"3619\":1}}],[\"但是位运算比取余运算要高效的多\",{\"1\":{\"528\":1,\"3617\":1}}],[\"但是之后还有但是\",{\"1\":{\"511\":1}}],[\"但是vector却对该方法加了方法锁\",{\"1\":{\"510\":1}}],[\"但是静态方法只能给this对象加锁\",{\"1\":{\"506\":1}}],[\"但是聪明的你想到可以加个判断\",{\"1\":{\"290\":1,\"3567\":1}}],[\"但是return前执行的finally块内\",{\"1\":{\"268\":1}}],[\"但是\",{\"1\":{\"217\":1,\"413\":1,\"510\":1,\"511\":1,\"590\":1,\"592\":1,\"594\":1,\"601\":1,\"606\":1,\"615\":1,\"626\":1,\"1148\":1,\"1316\":1,\"1484\":1,\"1652\":1,\"1888\":1,\"1903\":1,\"1918\":1,\"1931\":1,\"1944\":1,\"1959\":1,\"2198\":1,\"2238\":1,\"2274\":1,\"2382\":1,\"2436\":1,\"2674\":1,\"2700\":1,\"2802\":1,\"3116\":1,\"3500\":1,\"4027\":1,\"4530\":1,\"4571\":1,\"4607\":1,\"4715\":1,\"4769\":1,\"5007\":1,\"5033\":1,\"5150\":1,\"5173\":1,\"5251\":1,\"5367\":1}}],[\"但是你需要使用相对链接\",{\"1\":{\"123\":1,\"3411\":1}}],[\"情理可容的异常状况\",{\"1\":{\"248\":1,\"3533\":1}}],[\"很明显\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"很明显需要继承\",{\"1\":{\"210\":1,\"3493\":1}}],[\"很好解决了\",{\"1\":{\"1055\":1,\"1223\":1,\"1391\":1,\"1559\":1,\"4437\":1}}],[\"很多短任务线程\",{\"0\":{\"1841\":1,\"3918\":1}}],[\"很多顶级的开源项目都用到了\",{\"1\":{\"1775\":1,\"4335\":1}}],[\"很多同学应该能马上反应过来了\",{\"1\":{\"614\":1}}],[\"很多人会更倾向于使用继承关系\",{\"1\":{\"590\":1}}],[\"很多时候\",{\"1\":{\"586\":1}}],[\"很容易出现的\",{\"1\":{\"248\":1,\"3533\":1}}],[\"可查的异常\",{\"0\":{\"3531\":1}}],[\"可查异常虽然是异常状况\",{\"1\":{\"248\":1,\"3533\":1}}],[\"可查异常\",{\"1\":{\"247\":1,\"3532\":1}}],[\"可随意发给期望同密钥持有者进行安全通信的人\",{\"1\":{\"3279\":1}}],[\"可见直接使用md5加密是不安全的\",{\"1\":{\"3256\":1}}],[\"可中断\",{\"1\":{\"2740\":1,\"3965\":1}}],[\"可由\",{\"1\":{\"2607\":2,\"2622\":2,\"4940\":2,\"4955\":2}}],[\"可减少表结构变更带来的影响\",{\"1\":{\"2578\":1,\"4911\":1}}],[\"可重入锁的一个好处是可一定程度避免死锁\",{\"1\":{\"2886\":1,\"4111\":1}}],[\"可重入锁\",{\"0\":{\"2883\":1,\"4108\":1},\"1\":{\"2884\":1,\"2886\":1,\"4109\":1,\"4111\":1}}],[\"可重复读\",{\"1\":{\"2511\":1,\"2518\":1,\"2520\":1,\"2522\":1,\"2523\":1,\"2529\":2,\"4844\":1,\"4851\":1,\"4853\":1,\"4855\":1,\"4856\":1,\"4862\":2}}],[\"可重复读隔离级别的事务\",{\"1\":{\"2380\":1,\"4713\":1}}],[\"可重读\",{\"1\":{\"2246\":1,\"4579\":1}}],[\"可谓是风光一时\",{\"1\":{\"2237\":1,\"4570\":1}}],[\"可靠性\",{\"1\":{\"2059\":1}}],[\"可靠的\",{\"1\":{\"2026\":1,\"2029\":1}}],[\"可用于存储比\",{\"1\":{\"2566\":1,\"4899\":1}}],[\"可用性\",{\"1\":{\"1822\":1,\"1826\":1,\"1831\":1,\"4382\":1,\"4386\":1,\"4391\":1}}],[\"可用消息的总量都不会超过配置参数所指定的大小\",{\"1\":{\"926\":1,\"5073\":1}}],[\"可运行线程池\",{\"1\":{\"1021\":1,\"1189\":1,\"1357\":1,\"1525\":1,\"4403\":1}}],[\"可在\",{\"1\":{\"817\":1,\"3805\":1}}],[\"可是实际上\",{\"1\":{\"627\":1}}],[\"可能堆积大量的请求\",{\"1\":{\"3006\":1,\"3008\":1,\"4231\":1,\"4233\":1}}],[\"可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁\",{\"1\":{\"2908\":1,\"4133\":1}}],[\"可能占用\",{\"1\":{\"2890\":1,\"4115\":1}}],[\"可能引发死锁\",{\"1\":{\"2890\":1,\"4115\":1}}],[\"可能直接就被这么多请求弄宕机了\",{\"1\":{\"2692\":1,\"2710\":1,\"2720\":1,\"5025\":1,\"5043\":1,\"5053\":1}}],[\"可能发生幻读现象\",{\"1\":{\"2518\":1,\"4851\":1}}],[\"可能发生不可重复读和幻读现象\",{\"1\":{\"2517\":1,\"4850\":1}}],[\"可能发生脏读\",{\"1\":{\"2516\":1,\"4849\":1}}],[\"可能发生异常的结束点\",{\"1\":{\"278\":1,\"3555\":1}}],[\"可能发生异常的起始点\",{\"1\":{\"277\":1,\"3554\":1}}],[\"可能还需要根据指针或主键再到数据文件或表中查询\",{\"1\":{\"2323\":1,\"4656\":1}}],[\"可能还没有到达叶子节点\",{\"1\":{\"2273\":1,\"4606\":1}}],[\"可能很多网站还没开始支持http\",{\"1\":{\"1890\":1,\"1905\":1,\"1920\":1,\"1933\":1,\"1946\":1,\"1961\":1,\"5152\":1,\"5175\":1}}],[\"可能存在数据丢失\",{\"1\":{\"1872\":1,\"3949\":1}}],[\"可能就执行了几步\",{\"1\":{\"1872\":1,\"3949\":1}}],[\"可能不是0了\",{\"1\":{\"1805\":1,\"4365\":1}}],[\"可能会创建大量线程\",{\"1\":{\"2982\":1,\"3007\":1,\"4207\":1,\"4232\":1}}],[\"可能会发生意想不到的事情\",{\"1\":{\"2409\":1,\"4742\":1}}],[\"可能会二次查询\",{\"1\":{\"2323\":1,\"4656\":1}}],[\"可能会导致脏读\",{\"1\":{\"769\":1,\"3757\":1}}],[\"可能会产生死锁等问题\",{\"1\":{\"544\":1}}],[\"可能看完了你还是有点蒙\",{\"1\":{\"403\":1}}],[\"可以选择移除等待队列中的最不常用的线程\",{\"1\":{\"3060\":1,\"5311\":1}}],[\"可以访问到该线程的threadlocalmap对象\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"可以理解为线程数是可以无限扩展的\",{\"1\":{\"2982\":1,\"4207\":1}}],[\"可以理解为只是threadlocalmap的封装\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"可以理解为分配结果是带\",{\"1\":{\"963\":1,\"5110\":1}}],[\"可以让高速缓存中的数据失效\",{\"1\":{\"2864\":1,\"4089\":1}}],[\"可以同时绑定多个\",{\"1\":{\"2742\":1,\"3967\":1}}],[\"可以适当增加位数组大小或者调整我们的哈希函数来降低概率\",{\"1\":{\"2708\":1,\"5041\":1}}],[\"可以加载\",{\"1\":{\"2660\":1,\"4993\":1}}],[\"可以通过添加读锁实现共享\",{\"1\":{\"2900\":1,\"4125\":1}}],[\"可以通过虚拟机参数更改\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"可以通过\",{\"1\":{\"2649\":1,\"4982\":1}}],[\"可以通过创建快照来获得存储在内存里面的数据在\",{\"1\":{\"2641\":1,\"4974\":1}}],[\"可以对快照进行备份\",{\"1\":{\"2641\":1,\"4974\":1}}],[\"可以把子查询优化为\",{\"0\":{\"2579\":1,\"4912\":1}}],[\"可以考虑限制自旋的次数\",{\"1\":{\"2810\":1,\"4035\":1}}],[\"可以考虑将其分解成多个表\",{\"1\":{\"2569\":1,\"4902\":1}}],[\"可以考虑建立索引\",{\"1\":{\"2340\":1,\"4673\":1}}],[\"可以很大程度上避免幻读现象的发生\",{\"1\":{\"2522\":1,\"4855\":1}}],[\"可以不指定主键的值\",{\"1\":{\"2432\":1,\"4765\":1}}],[\"可以不用通过http框架去封装http请求报文的方式\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"可以分为全局锁\",{\"1\":{\"2362\":1,\"4695\":1}}],[\"可以简单理解为每个索引都对应着一颗\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"可以将线程数设置为\",{\"1\":{\"2992\":1,\"4217\":1}}],[\"可以将threadlocal类形象的比喻成存放数据的盒子\",{\"1\":{\"2937\":1,\"4162\":1}}],[\"可以将快照复制到其他服务器从而创建具有相同数据的服务器副本\",{\"1\":{\"2641\":1,\"4974\":1}}],[\"可以将区分度高的字段放在最左边\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"可以将消息保留到不再使用他们为止\",{\"1\":{\"927\":1,\"5074\":1}}],[\"可以定位主键的位置\",{\"1\":{\"2299\":1,\"4632\":1}}],[\"可以有\",{\"1\":{\"2289\":1,\"4622\":1}}],[\"可以有效减少加锁操作\",{\"1\":{\"2256\":1,\"4589\":1}}],[\"可以避免\",{\"1\":{\"2192\":1,\"5245\":1}}],[\"可以避免类的重复加载\",{\"1\":{\"234\":1,\"3517\":1}}],[\"可以的\",{\"1\":{\"2088\":1,\"2794\":1,\"4019\":1}}],[\"可以再建一个分表\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"可以放到缓存里\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"可以放入\",{\"1\":{\"379\":1}}],[\"可以并行开发\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"可以更精准的制定优化服务方案\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"可以保证消息在分区内的顺序性\",{\"1\":{\"3115\":1,\"5366\":1}}],[\"可以保证每次出队的任务都是当前队列中执行时间最靠前的\",{\"1\":{\"2983\":1,\"4208\":1}}],[\"可以保证后续的更新\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"可以保存所有待检测的\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"可以用任何一种语言开发\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"可以用不同的存储技术\",{\"1\":{\"1718\":1,\"4278\":1}}],[\"可以用不同的编程语言\",{\"1\":{\"1717\":1,\"4277\":1}}],[\"可以用于监听web应用程序中某些对象的创建\",{\"1\":{\"849\":1,\"3837\":1}}],[\"可以应对不同的业务场景\",{\"1\":{\"1115\":1,\"1283\":1,\"1451\":1,\"1619\":1,\"4497\":1}}],[\"可以减少\",{\"1\":{\"2907\":1,\"4132\":1}}],[\"可以减少一次数据拷贝的过程\",{\"1\":{\"1089\":1,\"1257\":1,\"1425\":1,\"1593\":1,\"4471\":1}}],[\"可以减小树和链表之间频繁转化的可能性\",{\"1\":{\"531\":1,\"3620\":1}}],[\"可以说这是最有用的进程间通信方式\",{\"1\":{\"1046\":1,\"1214\":1,\"1382\":1,\"1550\":1,\"4428\":1}}],[\"可以实现本机任意两个进程通信\",{\"1\":{\"1042\":1,\"1210\":1,\"1378\":1,\"1546\":1,\"4424\":1}}],[\"可以实现健康检查\",{\"1\":{\"855\":1,\"3843\":1}}],[\"可以看作是行级锁的一个升级\",{\"1\":{\"2256\":1,\"4589\":1}}],[\"可以看作是\",{\"1\":{\"2186\":1,\"5239\":1}}],[\"可以看这篇文章\",{\"1\":{\"2093\":1}}],[\"可以看到进程里有\",{\"1\":{\"1137\":1,\"1305\":1,\"1473\":1,\"1641\":1,\"4519\":1}}],[\"可以看到只保存了非null的数组位置上的数据\",{\"1\":{\"456\":1}}],[\"可以看做是不同主机之间的进程进行双向通信的端点\",{\"1\":{\"1047\":1,\"1215\":1,\"1383\":1,\"1551\":1,\"4429\":1}}],[\"可以看出\",{\"1\":{\"971\":1,\"5118\":1}}],[\"可以使用callerrunspolicy\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"可以使用\",{\"1\":{\"2611\":1,\"2812\":1,\"4037\":1,\"4944\":1}}],[\"可以使用下面这两个方式\",{\"1\":{\"2450\":1,\"4783\":1}}],[\"可以使用下面这条命令\",{\"1\":{\"2395\":1,\"4728\":1}}],[\"可以使用下面的命令\",{\"1\":{\"2391\":1,\"4724\":1}}],[\"可以使用同一个端口吗\",{\"0\":{\"2087\":1},\"1\":{\"1978\":1,\"2093\":1}}],[\"可以使用hashset的一个子类linkedhashset\",{\"1\":{\"364\":1}}],[\"可以使分区分配的更均衡\",{\"1\":{\"959\":1,\"5106\":1}}],[\"可以被多个会话共享\",{\"1\":{\"914\":1,\"3902\":1}}],[\"可以在几个小时内就找到一个md5值对应的原文\",{\"1\":{\"3221\":1}}],[\"可以在事务提交后直接删除\",{\"1\":{\"2550\":1,\"4883\":1}}],[\"可以在非聚簇索引遍历过程中\",{\"1\":{\"2333\":1,\"4666\":1}}],[\"可以在客户端请求一个资源时\",{\"1\":{\"2189\":1,\"5242\":1}}],[\"可以在消费者内部采用多线程的方式去消费\",{\"1\":{\"991\":1,\"5138\":1}}],[\"可以在\",{\"1\":{\"890\":1,\"2091\":1,\"3878\":1}}],[\"可以在两段做插入和删除操作\",{\"1\":{\"615\":1}}],[\"可以进行调试\",{\"1\":{\"811\":1,\"3799\":1}}],[\"可以从半成品缓存中获取\",{\"1\":{\"806\":1,\"3794\":1}}],[\"可以正常创建\",{\"1\":{\"795\":1,\"3783\":1}}],[\"可以阻止脏读和不可重复读\",{\"1\":{\"771\":1,\"3759\":1}}],[\"可以阻止脏读\",{\"1\":{\"770\":1,\"3758\":1}}],[\"可以代理未实现任何接口的类\",{\"1\":{\"717\":1,\"3705\":1}}],[\"可以直接把内核缓冲区里的数据拷贝到\",{\"1\":{\"1096\":1,\"1264\":1,\"1432\":1,\"1600\":1,\"4478\":1}}],[\"可以直接代理实现类\",{\"1\":{\"690\":1,\"3678\":1}}],[\"可以直接使用hashtable\",{\"1\":{\"543\":1}}],[\"可以忽略性能差异\",{\"1\":{\"660\":1,\"3648\":1}}],[\"可以是red\",{\"1\":{\"645\":1,\"3633\":1}}],[\"可以满足在两段进行插入和删除\",{\"1\":{\"612\":1}}],[\"可以这么写\",{\"1\":{\"599\":1}}],[\"可以测试一下\",{\"1\":{\"462\":1}}],[\"可以提供弱一致性\",{\"1\":{\"456\":1}}],[\"可以方便地根据键的顺序进行查找\",{\"1\":{\"435\":1}}],[\"可以方便地根据顺序进行查找和操作\",{\"1\":{\"367\":1}}],[\"可以方便地按照键存取值\",{\"1\":{\"385\":1}}],[\"可以高效地添加\",{\"1\":{\"363\":1}}],[\"可以作为队列\",{\"1\":{\"339\":1}}],[\"可以随机访问\",{\"1\":{\"334\":1}}],[\"可以创建一个合适的异常类实例并抛出它\",{\"1\":{\"257\":1,\"3542\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"27\":1,\"3315\":1}}],[\"区域的权威\",{\"1\":{\"2217\":1,\"5270\":1}}],[\"区域管理\",{\"1\":{\"2215\":1,\"5268\":1}}],[\"区别\",{\"0\":{\"246\":1,\"2052\":1,\"3531\":1},\"1\":{\"466\":1,\"534\":1}}],[\"区分不同类的方式不仅仅根据类名\",{\"1\":{\"234\":1,\"3517\":1}}],[\"一面\",{\"0\":{\"3026\":1,\"3056\":1,\"3071\":1,\"5277\":1,\"5307\":1,\"5322\":1}}],[\"一定会出现这样一种情况\",{\"1\":{\"2708\":1,\"5041\":1}}],[\"一定是\",{\"1\":{\"2028\":1}}],[\"一直跟这个事务启动时看到的数据是一致的\",{\"1\":{\"2511\":1,\"2524\":1,\"4844\":1,\"4857\":1}}],[\"一直维护一个红黑树比链表耗费资源更多\",{\"1\":{\"524\":1,\"3613\":1}}],[\"一起使用的时候\",{\"1\":{\"2445\":1,\"4778\":1}}],[\"一旦数据库泄漏\",{\"1\":{\"3231\":1}}],[\"一旦任务暂停\",{\"1\":{\"2992\":1,\"4217\":1}}],[\"一旦获得锁\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"一旦有第二个线程加入锁竞争\",{\"1\":{\"2763\":1,\"3988\":1}}],[\"一旦出现\",{\"1\":{\"2415\":1,\"4748\":1}}],[\"一旦发生丢包\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"一张表允许创建多个普通索引\",{\"1\":{\"2303\":1,\"4636\":1}}],[\"一张表允许创建多个唯一索引\",{\"1\":{\"2302\":1,\"4635\":1}}],[\"一张数据表有只能有一个主键\",{\"1\":{\"2295\":1,\"4628\":1}}],[\"一次即可定位\",{\"1\":{\"2280\":1,\"4613\":1}}],[\"一次该\",{\"1\":{\"2015\":1}}],[\"一锁就是锁住了整张表\",{\"1\":{\"2243\":1,\"4576\":1}}],[\"一种是查询分组\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"一对多\",{\"1\":{\"2058\":1}}],[\"一对一\",{\"1\":{\"2028\":1}}],[\"一样也是在插入数据的时候\",{\"1\":{\"2438\":1,\"4771\":1}}],[\"一样\",{\"1\":{\"1787\":1,\"1794\":1,\"4347\":1,\"4354\":1}}],[\"一段时间内\",{\"1\":{\"1751\":1,\"4311\":1}}],[\"一级缓存sqlsession\",{\"1\":{\"912\":1,\"3900\":1}}],[\"一级缓存是默认开启的\",{\"1\":{\"911\":1,\"3899\":1}}],[\"一级缓存的作用域是一个sqlsession内\",{\"1\":{\"910\":1,\"3898\":1}}],[\"一级缓存内部存储使用一个\",{\"1\":{\"898\":1,\"3886\":1}}],[\"一级缓存也就不存在了\",{\"1\":{\"898\":1,\"3886\":1}}],[\"一级缓存\",{\"0\":{\"896\":1,\"897\":1,\"3884\":1,\"3885\":1}}],[\"一级缓存能解决吗\",{\"1\":{\"797\":1,\"3785\":1}}],[\"一致性则是通过持久性+原子性+隔离性来保证\",{\"1\":{\"2491\":1,\"4824\":1}}],[\"一致性就是要求上述步骤操作后\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"一致性\",{\"1\":{\"758\":1,\"1822\":1,\"1825\":1,\"1831\":1,\"2484\":1,\"3746\":1,\"4382\":1,\"4385\":1,\"4391\":1,\"4817\":1}}],[\"一致的\",{\"1\":{\"564\":1}}],[\"一类的接口名称\",{\"1\":{\"617\":1}}],[\"一些框架\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"一些不合法的参数请求直接抛出异常信息返回给客户端\",{\"1\":{\"2694\":1,\"5027\":1}}],[\"一些分布式的问题\",{\"1\":{\"1872\":1,\"3949\":1}}],[\"一些加密\",{\"1\":{\"843\":1,\"3831\":1}}],[\"一些固定的不能被覆盖的属性\",{\"1\":{\"842\":1,\"3830\":1}}],[\"一些\",{\"1\":{\"590\":1}}],[\"一般用在读锁上\",{\"1\":{\"2897\":1,\"4122\":1}}],[\"一般不会使用\",{\"1\":{\"2281\":1,\"2282\":1,\"2292\":1,\"4614\":1,\"4615\":1,\"4625\":1}}],[\"一般不建议修改loadfactor的值\",{\"1\":{\"429\":1}}],[\"一般是\",{\"1\":{\"2192\":1,\"5245\":1}}],[\"一般情况下\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"一般情况下不自定义检查异常\",{\"1\":{\"245\":1,\"3530\":1}}],[\"一般需要预热下\",{\"1\":{\"1879\":1,\"3956\":1}}],[\"一般使用redis的zset数据类型\",{\"1\":{\"1858\":1,\"3935\":1}}],[\"一般来说\",{\"1\":{\"1071\":1,\"1133\":1,\"1239\":1,\"1301\":1,\"1407\":1,\"1469\":1,\"1575\":1,\"1637\":1,\"4453\":1,\"4515\":1}}],[\"一般来说锁的范围大小和性能是成反比的\",{\"1\":{\"504\":1}}],[\"一般而言\",{\"1\":{\"353\":1}}],[\"一\",{\"0\":{\"1915\":1,\"1928\":1,\"3025\":1,\"3212\":1,\"3519\":1,\"3578\":1,\"5147\":1,\"5276\":1},\"1\":{\"300\":1,\"3577\":1}}],[\"一个线程每获得一次锁\",{\"1\":{\"2885\":1,\"4110\":1}}],[\"一个节点表示一个线程\",{\"1\":{\"2832\":1,\"2835\":1,\"4057\":1,\"4060\":1}}],[\"一个人进入厕所后首先把门锁上\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"一个\",{\"1\":{\"2573\":1,\"2942\":1,\"4167\":1,\"4906\":1}}],[\"一个事务中的所有操作\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"一个事务在插入一条记录的时候\",{\"1\":{\"2474\":1,\"4807\":1}}],[\"一个事务在持有\",{\"1\":{\"2435\":1,\"4768\":1}}],[\"一个事务持有了范围为\",{\"1\":{\"2471\":1,\"4804\":1}}],[\"一个事务被提交之后\",{\"1\":{\"760\":1,\"3748\":1}}],[\"一个索引包含\",{\"1\":{\"2290\":1,\"4623\":1}}],[\"一个连接建立多个不同的数据流\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"一个打赏就发一个消息\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"一个进程虽然任一时刻只能处理一个请求\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"一个变量被访问到过后\",{\"1\":{\"1009\":1}}],[\"一个queue对应一个consumer\",{\"1\":{\"988\":1,\"5135\":1}}],[\"一个queue\",{\"1\":{\"986\":1,\"5133\":1}}],[\"一个topic有多个partition\",{\"1\":{\"943\":1,\"5090\":1}}],[\"一个consumer\",{\"1\":{\"943\":1,\"5090\":1}}],[\"一个一个地添加到项目的依赖管理中\",{\"1\":{\"858\":1,\"3846\":1}}],[\"一个缓存用于存放成品对象\",{\"1\":{\"804\":1,\"3792\":1}}],[\"一个用户的事物不被其他事物所干扰\",{\"1\":{\"759\":1,\"3747\":1}}],[\"一个是比较喜欢通过博客整理分享自己所学知识\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"一个是\",{\"1\":{\"601\":2}}],[\"一个更加完整\",{\"1\":{\"564\":1}}],[\"一个使用了同步方法\",{\"1\":{\"497\":1}}],[\"一个使用同步代码块之外几乎无任何区别\",{\"1\":{\"495\":1}}],[\"一个hashmap的容量\",{\"1\":{\"409\":1}}],[\"一个类的完整生命周期\",{\"1\":{\"190\":1,\"3473\":1}}],[\"一个拥有间隙锁\",{\"1\":{\"2478\":1,\"4811\":1}}],[\"一个拥有\",{\"1\":{\"65\":1,\"3353\":1}}],[\"编程中我们通常不会直接使用到\",{\"1\":{\"2797\":1,\"4022\":1}}],[\"编程\",{\"0\":{\"2120\":1,\"2121\":1},\"1\":{\"2005\":1,\"2006\":1}}],[\"编译器都帮我们做了\",{\"1\":{\"264\":1}}],[\"编译器不要求强制处置的异常\",{\"1\":{\"250\":1,\"3535\":1}}],[\"编译器要求必须处置的异常\",{\"1\":{\"247\":1,\"3532\":1}}],[\"编译异常\",{\"1\":{\"244\":1,\"3529\":1}}],[\"编辑此页链接\",{\"1\":{\"15\":1,\"3303\":1}}],[\"非对称密钥也叫公开密钥加密\",{\"1\":{\"3279\":1}}],[\"非对称加密缺点\",{\"1\":{\"3287\":1}}],[\"非对称加密优点\",{\"1\":{\"3286\":1}}],[\"非对称加密\",{\"1\":{\"3274\":1}}],[\"非公平锁\",{\"0\":{\"2902\":1,\"4127\":1},\"1\":{\"2906\":1,\"4131\":1}}],[\"非精准浮点\",{\"1\":{\"2564\":1,\"4897\":1}}],[\"非叶子节点只有指针和\",{\"1\":{\"2279\":1,\"4612\":1}}],[\"非聚集索引\",{\"1\":{\"2275\":1,\"2285\":1,\"4608\":1,\"4618\":1}}],[\"非聚簇索引也依赖于有序的数据\",{\"1\":{\"2322\":1,\"4655\":1}}],[\"非聚簇索引的叶子节点是不存放数据的\",{\"1\":{\"2320\":1,\"4653\":1}}],[\"非聚簇索引的叶子节点并不一定存放数据的指针\",{\"1\":{\"2318\":1,\"4651\":1}}],[\"非聚簇索引的更新代价就没有聚簇索引那么大了\",{\"1\":{\"2320\":1,\"4653\":1}}],[\"非聚簇索引\",{\"0\":{\"2316\":1,\"4649\":1},\"1\":{\"2275\":1,\"2285\":1,\"2317\":1,\"4608\":1,\"4618\":1,\"4650\":1}}],[\"非冗余和按序的\",{\"1\":{\"2024\":1}}],[\"非故障的节点在合理的时间内返回合理的响应\",{\"1\":{\"1826\":1,\"4386\":1}}],[\"非常不灵活\",{\"1\":{\"693\":1,\"3681\":1}}],[\"非运行时异常\",{\"1\":{\"244\":1,\"3529\":1}}],[\"非空父类的类加载器无法找到相应的类\",{\"1\":{\"227\":1,\"3510\":1}}],[\"等插入语句执行完成后\",{\"1\":{\"2434\":1,\"4767\":1}}],[\"等语句\",{\"1\":{\"2369\":1,\"2525\":1,\"4702\":1,\"4858\":1}}],[\"等更多可供选择的缓存头来控制缓存策略\",{\"1\":{\"2183\":1,\"5236\":1}}],[\"等技术\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"等待时间越长就越先被唤醒\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"等待将来被唤醒\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"等待可中断当持有锁的线程长期不释放锁的时候\",{\"1\":{\"2740\":1,\"3965\":1}}],[\"等待客户端的连接请求\",{\"1\":{\"2045\":1}}],[\"等待的时间是\",{\"0\":{\"2112\":1},\"1\":{\"1997\":1}}],[\"等待线程终止或者超时\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"等待池\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"等待阻塞\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"等重启之后\",{\"1\":{\"975\":1,\"5122\":1}}],[\"等操作\",{\"1\":{\"898\":1,\"912\":1,\"3886\":1,\"3900\":1}}],[\"等以\",{\"1\":{\"749\":1,\"3737\":1}}],[\"等数据\",{\"1\":{\"737\":1,\"3725\":1}}],[\"等等\",{\"0\":{\"613\":1},\"1\":{\"605\":1}}],[\"等\",{\"1\":{\"242\":1,\"450\":1,\"738\":1,\"2079\":1,\"3527\":1,\"3726\":1}}],[\"都说cas要比synchronized好\",{\"1\":{\"3079\":1,\"5330\":1}}],[\"都将不会捕获该分组\",{\"1\":{\"2166\":1,\"5219\":1}}],[\"都要进行双写\",{\"1\":{\"1869\":1,\"3946\":1}}],[\"都为0\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"都可以调用这个接口\",{\"1\":{\"3176\":1,\"5427\":1}}],[\"都可以保证一个报文一定能够到达接收端\",{\"1\":{\"2029\":1}}],[\"都可以用spring\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"都可以进行共享\",{\"1\":{\"914\":1,\"3902\":1}}],[\"都不需要通过\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4487\":1}}],[\"都有一个offset\",{\"1\":{\"975\":1,\"5122\":1}}],[\"都会以处理二进制的方式来处理\",{\"1\":{\"2597\":1,\"4930\":1}}],[\"都会重新生成一个\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"都会被阻塞\",{\"1\":{\"2367\":1,\"4700\":1}}],[\"都会清空数据\",{\"1\":{\"929\":1,\"5076\":1}}],[\"都会使用cachingexector装饰基本的执行器\",{\"1\":{\"915\":1,\"3903\":1}}],[\"都会出现数据不一致问题\",{\"1\":{\"907\":1,\"3895\":1}}],[\"都会插入到新数组对应索引的链表头\",{\"1\":{\"520\":1,\"3609\":1}}],[\"都只是针对⼀类产品\",{\"1\":{\"684\":1,\"3672\":1}}],[\"都需要重新创建一个\",{\"1\":{\"628\":1}}],[\"都应该尽量扩展已有的索引而不是创建新索引\",{\"1\":{\"2350\":1,\"4683\":1}}],[\"都应该只是规定一系列操作的接口而已\",{\"1\":{\"607\":1}}],[\"都应该是组合关系\",{\"1\":{\"582\":1}}],[\"都是基于\",{\"1\":{\"5162\":1}}],[\"都是独享锁\",{\"1\":{\"2895\":1,\"4120\":1}}],[\"都是这种机制\",{\"1\":{\"1030\":1,\"1198\":1,\"1366\":1,\"1534\":1,\"4412\":1}}],[\"都是通过\",{\"1\":{\"1704\":1,\"2653\":1,\"2797\":1,\"4022\":1,\"4264\":1,\"4986\":1}}],[\"都是通过相同的方式来查找的\",{\"1\":{\"656\":1,\"3644\":1}}],[\"都是通过平衡来二分查找\",{\"1\":{\"526\":1,\"3615\":1}}],[\"都是\",{\"1\":{\"626\":1,\"648\":1,\"2886\":1,\"3636\":1,\"4111\":1}}],[\"都是一个队列\",{\"1\":{\"601\":1}}],[\"都是我们在生活中看得到摸得到的实体\",{\"1\":{\"583\":1}}],[\"都是双列集合\",{\"1\":{\"533\":1}}],[\"都是用来存储一组相同类型的元素的\",{\"1\":{\"371\":1}}],[\"都是runtimeexception类及其子类异常\",{\"1\":{\"242\":1,\"3527\":1}}],[\"都能够调用它的任意一个方法和属性\",{\"1\":{\"283\":1,\"3560\":1}}],[\"都能够知道这个类的所有属性和方法\",{\"1\":{\"283\":1,\"3560\":1}}],[\"都集中在\",{\"1\":{\"226\":1,\"3509\":1}}],[\"程序计数器属于线程独享的工作内存\",{\"1\":{\"2855\":1,\"4080\":1}}],[\"程序只是其中的一个线程而已\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"4516\":1}}],[\"程序是跑在\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"4516\":1}}],[\"程序会一直执行\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"程序就没办法继续往下执行\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"程序就不能编译通过\",{\"1\":{\"245\":1,\"3530\":1}}],[\"程序局部性原理表现为\",{\"1\":{\"1008\":1}}],[\"程序在判断需要创建哪些对象时更灵活\",{\"1\":{\"669\":1,\"3657\":1}}],[\"程序员是一个雇员\",{\"1\":{\"579\":1}}],[\"程序应该从逻辑角度尽可能避免这类异常的发生\",{\"1\":{\"242\":1,\"3527\":1}}],[\"程序中可以选择捕获处理\",{\"1\":{\"242\":1,\"3527\":1}}],[\"程序中无法处理的错误\",{\"1\":{\"239\":1,\"3524\":1}}],[\"程序本身可以捕获并且可以处理的异常\",{\"1\":{\"240\":1,\"3525\":1}}],[\"程序的稳定运行\",{\"1\":{\"234\":1,\"3517\":1}}],[\"语编写完的程序\",{\"1\":{\"1133\":1,\"1301\":1,\"1469\":1,\"1637\":1,\"4515\":1}}],[\"语言的字符串并不记录自身长度\",{\"1\":{\"2598\":1,\"4931\":1}}],[\"语言的字符串表示\",{\"1\":{\"2596\":1,\"4929\":1}}],[\"语言\",{\"1\":{\"1692\":1,\"2796\":1,\"4021\":1,\"4252\":1}}],[\"语言实现的\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4534\":1}}],[\"语言实现的是\",{\"1\":{\"1133\":1,\"1134\":1,\"1301\":1,\"1302\":1,\"1469\":1,\"1470\":1,\"1637\":1,\"1638\":1,\"4515\":1,\"4516\":1}}],[\"语言使用进程和线程都可以\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4512\":1}}],[\"语言一般使用线程\",{\"1\":{\"1129\":1,\"1297\":1,\"1465\":1,\"1633\":1,\"4511\":1}}],[\"语言中\",{\"0\":{\"561\":1},\"1\":{\"599\":1}}],[\"语言中所有错误与异常的超类\",{\"1\":{\"238\":1,\"3523\":1}}],[\"语句的时候\",{\"1\":{\"2525\":1,\"4858\":1}}],[\"语句的请求到来\",{\"1\":{\"2413\":1,\"4746\":1}}],[\"语句是不会对记录加锁的\",{\"1\":{\"2450\":1,\"4783\":1}}],[\"语句是利用\",{\"1\":{\"2422\":1,\"4755\":1}}],[\"语句执行结束后才释放锁\",{\"1\":{\"2440\":1,\"4773\":1}}],[\"语句且向\",{\"1\":{\"900\":1,\"3888\":1}}],[\"语句\",{\"1\":{\"898\":2,\"900\":1,\"2405\":2,\"2410\":1,\"2411\":1,\"2413\":1,\"2443\":1,\"2524\":1,\"3886\":2,\"3888\":1,\"4738\":2,\"4743\":1,\"4744\":1,\"4746\":1,\"4776\":1,\"4857\":1}}],[\"语法糖的作用就是方便程序员的使用\",{\"1\":{\"264\":1}}],[\"语法\",{\"0\":{\"91\":1,\"3379\":1},\"1\":{\"40\":1,\"3328\":1}}],[\"语法进行了扩展\",{\"1\":{\"37\":1,\"3325\":1}}],[\"语法扩展\",{\"1\":{\"35\":1,\"3323\":1}}],[\"也还有效\",{\"1\":{\"3208\":1,\"5459\":1}}],[\"也有人叫它排他锁\",{\"1\":{\"2893\":1,\"4118\":1}}],[\"也有很多问题\",{\"1\":{\"2799\":1,\"2818\":1,\"4024\":1,\"4043\":1}}],[\"也有这样的能力\",{\"1\":{\"571\":1}}],[\"也按相同的搜索条件也是查询出了\",{\"1\":{\"2504\":1,\"4837\":1}}],[\"也从数据库中读取小林的余额数据\",{\"1\":{\"2495\":1,\"4828\":1}}],[\"也正是这样\",{\"1\":{\"2481\":1,\"4814\":1}}],[\"也正是因为继承了这个依赖\",{\"1\":{\"866\":1,\"3854\":1}}],[\"也属于间隙锁\",{\"1\":{\"2478\":1,\"4811\":1}}],[\"也包含间隙锁\",{\"1\":{\"2474\":1,\"4807\":1}}],[\"也执行了同样的\",{\"1\":{\"2411\":1,\"4744\":1}}],[\"也叫做递归锁\",{\"1\":{\"2884\":1,\"4109\":1}}],[\"也叫\",{\"1\":{\"2329\":1,\"4662\":1}}],[\"也叫散列算法\",{\"1\":{\"2265\":1,\"4598\":1}}],[\"也无需回表\",{\"1\":{\"2327\":1,\"4660\":1}}],[\"也支持了全文索引\",{\"1\":{\"2305\":1,\"4638\":1}}],[\"也存放\",{\"1\":{\"2271\":1,\"4604\":1}}],[\"也同样在传输层组装\",{\"1\":{\"2072\":1}}],[\"也不是非对称加密算法\",{\"1\":{\"3281\":1}}],[\"也不是万能的\",{\"1\":{\"2818\":1,\"4043\":1}}],[\"也不会抛出异常\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"也不会影响备份数据库时的\",{\"1\":{\"2379\":1,\"4712\":1}}],[\"也不会影响\",{\"1\":{\"2064\":1}}],[\"也不存在于数据库中\",{\"1\":{\"2692\":1,\"2716\":1,\"5025\":1,\"5049\":1}}],[\"也不可以对该记录加\",{\"1\":{\"2462\":1,\"4795\":1}}],[\"也不建议使用非单调的字段作为主键\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"也不保证网络包中的数据的完整性\",{\"1\":{\"2023\":1}}],[\"也不用担心多进程竞争\",{\"1\":{\"1147\":1,\"1315\":1,\"1483\":1,\"1651\":1,\"4529\":1}}],[\"也随之变为\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"也会释放所有表锁\",{\"1\":{\"2397\":1,\"4730\":1}}],[\"也会限制本线程接下来的读写操作\",{\"1\":{\"2393\":1,\"4726\":1}}],[\"也会将自己服务器设置为\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"也会编译通过\",{\"1\":{\"243\":1,\"3528\":1}}],[\"也依然只苏醒一次\",{\"1\":{\"1065\":1,\"1233\":1,\"1401\":1,\"1569\":1,\"4447\":1}}],[\"也没有key的情况下\",{\"1\":{\"939\":1,\"5086\":1}}],[\"也没有用throws子句声明抛出它\",{\"1\":{\"243\":1,\"3528\":1}}],[\"也容易出错\",{\"1\":{\"928\":1,\"5075\":1}}],[\"也对它的解决方案可以上手的例子\",{\"1\":{\"813\":1,\"3801\":1}}],[\"也是可以对记录加共享锁和独占锁的\",{\"1\":{\"2423\":1,\"4756\":1}}],[\"也是明确规定禁止使用外键的\",{\"1\":{\"2250\":1,\"4583\":1}}],[\"也是一个完整对象了\",{\"1\":{\"806\":1,\"3794\":1}}],[\"也是面向对象讲解的重点\",{\"1\":{\"590\":1}}],[\"也创建完整了\",{\"1\":{\"795\":1,\"3783\":1}}],[\"也可能开启一个新事务\",{\"1\":{\"774\":1,\"3762\":1}}],[\"也可以通过构造器来显式的指定使用公平锁\",{\"1\":{\"2747\":1,\"3972\":1}}],[\"也可以用来存储对象以及购物车\",{\"1\":{\"2626\":1,\"4959\":1}}],[\"也可以自行搜索\",{\"1\":{\"2301\":1,\"4634\":1}}],[\"也可以有一个\",{\"1\":{\"2092\":1}}],[\"也可以有多个\",{\"1\":{\"1116\":1,\"1284\":1,\"1452\":1,\"1620\":1,\"4498\":1}}],[\"也可以是多个进程\",{\"1\":{\"1117\":1,\"1285\":1,\"1453\":1,\"1621\":1,\"4499\":1}}],[\"也可以是black\",{\"1\":{\"645\":1,\"3633\":1}}],[\"也可以按消息的类型读取\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"也可以使用分页插件来完成物理分页\",{\"1\":{\"891\":1,\"3879\":1}}],[\"也可以使用collections\",{\"1\":{\"473\":1}}],[\"也可以不处理\",{\"1\":{\"242\":1,\"3527\":1}}],[\"也就找到了对应的\",{\"1\":{\"2265\":1,\"4598\":1}}],[\"也就说\",{\"1\":{\"2243\":1,\"4576\":1}}],[\"也就说不需要保证\",{\"1\":{\"1837\":1,\"4397\":1}}],[\"也就无从知道主机\",{\"1\":{\"2156\":1,\"5209\":1}}],[\"也就减少了\",{\"1\":{\"1095\":1,\"1263\":1,\"1431\":1,\"1599\":1,\"4477\":1}}],[\"也就只能基于\",{\"1\":{\"608\":1}}],[\"也就是直接在调用execute方法的线程中运行\",{\"1\":{\"2974\":1,\"4199\":1}}],[\"也就是加密密钥能够从解密密钥中推算出来\",{\"1\":{\"3277\":1}}],[\"也就是加\",{\"1\":{\"2922\":1,\"4147\":1}}],[\"也就是fifo双向队列\",{\"1\":{\"2829\":1,\"4054\":1}}],[\"也就是我们常说的乐观锁\",{\"1\":{\"2753\":1,\"3978\":1}}],[\"也就是我们要研究的异常表\",{\"1\":{\"275\":1,\"3552\":1}}],[\"也就是它随时可能发生回滚操作\",{\"1\":{\"2496\":1,\"4829\":1}}],[\"也就是仅仅把一条记录锁上\",{\"1\":{\"2456\":1,\"4789\":1}}],[\"也就是写锁\",{\"1\":{\"2392\":1,\"4725\":1}}],[\"也就是读锁\",{\"1\":{\"2392\":1,\"4725\":1}}],[\"也就是要通过主键再查找一次\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"也就是客户端的\",{\"1\":{\"2213\":1,\"5266\":1}}],[\"也就是服务端单机最大\",{\"1\":{\"2048\":1}}],[\"也就是一对多是无法做到的\",{\"1\":{\"2028\":1}}],[\"也就是\",{\"1\":{\"1822\":1,\"2204\":1,\"2412\":1,\"2421\":1,\"3130\":1,\"4382\":1,\"4745\":1,\"4754\":1,\"5257\":1,\"5381\":1}}],[\"也就是经典的\",{\"1\":{\"1073\":1,\"1241\":1,\"1409\":1,\"1577\":1,\"4455\":1}}],[\"也就是常说的round\",{\"1\":{\"939\":1,\"5086\":1}}],[\"也就是定义⼀个抽象⼯⼚\",{\"1\":{\"682\":1,\"3670\":1}}],[\"也就是使用\",{\"1\":{\"633\":1}}],[\"也就是都需要进行一次\",{\"1\":{\"628\":1}}],[\"也就是基于动态数组的实现\",{\"1\":{\"624\":1}}],[\"也就是可以以此为基础\",{\"1\":{\"612\":1}}],[\"也就是说就算两个md5值非常相似\",{\"1\":{\"3218\":1}}],[\"也就是说当内存不足以容纳新写入数据时\",{\"1\":{\"2684\":1,\"5017\":1}}],[\"也就是说当网络分区之后\",{\"1\":{\"1832\":1,\"4392\":1}}],[\"也就是说如果本线程对学生表加了\",{\"1\":{\"2394\":1,\"4727\":1}}],[\"也就是说分区容错性\",{\"1\":{\"1832\":1,\"4392\":1}}],[\"也就是说全程没有通过\",{\"1\":{\"1104\":1,\"1272\":1,\"1440\":1,\"1608\":1,\"4486\":1}}],[\"也就是说\",{\"1\":{\"202\":1,\"203\":1,\"243\":1,\"249\":1,\"335\":1,\"413\":1,\"707\":1,\"772\":1,\"2158\":1,\"2161\":1,\"2299\":1,\"2485\":1,\"2515\":1,\"2795\":1,\"2982\":1,\"3485\":1,\"3486\":1,\"3528\":1,\"3534\":1,\"3695\":1,\"3760\":1,\"4020\":1,\"4207\":1,\"4632\":1,\"4818\":1,\"4848\":1,\"5211\":1,\"5214\":1}}],[\"也推荐使用\",{\"1\":{\"564\":1}}],[\"也能了解到不少知识\",{\"1\":{\"548\":1}}],[\"也经常用于键已经排好序的场景\",{\"1\":{\"440\":1}}],[\"也保证了\",{\"1\":{\"234\":1,\"3517\":1}}],[\"时为非公平锁\",{\"1\":{\"2748\":1,\"3973\":1}}],[\"时为公平锁\",{\"1\":{\"2748\":1,\"3973\":1}}],[\"时的活跃事务列表\",{\"1\":{\"2538\":1,\"4871\":1}}],[\"时加上\",{\"1\":{\"2380\":1,\"4713\":1}}],[\"时候参数\",{\"0\":{\"2122\":1},\"1\":{\"2007\":1}}],[\"时间上将大大减少\",{\"1\":{\"3240\":1}}],[\"时间戳作为score进行排序\",{\"1\":{\"3168\":1,\"5419\":1}}],[\"时间的影响\",{\"1\":{\"2672\":1,\"5005\":1}}],[\"时间局部性是指如果程序中的某条指令一旦执行\",{\"1\":{\"1008\":1}}],[\"时间局部性和空间局部性\",{\"1\":{\"1008\":1}}],[\"时间和大小不论那个满足条件\",{\"1\":{\"929\":1,\"5076\":1}}],[\"时间复杂度都是o\",{\"1\":{\"655\":1,\"3643\":1}}],[\"时间复杂度为o\",{\"1\":{\"643\":1,\"3631\":1}}],[\"时间复杂度是o\",{\"1\":{\"643\":1,\"3631\":1}}],[\"时间复杂度是\",{\"1\":{\"625\":1}}],[\"时间内完成查找\",{\"1\":{\"641\":1,\"3629\":1}}],[\"时就会触发扩容\",{\"1\":{\"422\":1}}],[\"时就会自动扩容\",{\"1\":{\"419\":1}}],[\"时传入构造方法参数的值\",{\"1\":{\"315\":1,\"3592\":1}}],[\"时\",{\"1\":{\"232\":1,\"810\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2021\":1,\"2427\":1,\"2428\":1,\"2447\":1,\"2470\":1,\"2471\":1,\"2580\":1,\"2882\":1,\"3515\":1,\"3798\":1,\"4107\":1,\"4760\":1,\"4761\":1,\"4780\":1,\"4803\":1,\"4804\":1,\"4913\":1}}],[\"它用来做什么\",{\"1\":{\"3043\":1,\"5294\":1}}],[\"它用来监视\",{\"1\":{\"856\":1,\"3844\":1}}],[\"它既不会抛弃任务\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"它保存着线程的引用\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"它做的变更才能被其他事务看到\",{\"1\":{\"2510\":1,\"4843\":1}}],[\"它做的变更就能被其他事务看到\",{\"1\":{\"2509\":1,\"4842\":1}}],[\"它解决的是网络层地址和链路层地址之间的转换问题\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"它能确保接收端接收的网络包是无损坏\",{\"1\":{\"2024\":1}}],[\"它能保证任何一个节点的左右子树的高度差不会超过较矮的那棵的一倍\",{\"1\":{\"381\":1}}],[\"它不是面向最终用户的\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"它不直接用于域名解析\",{\"1\":{\"2214\":1,\"5267\":1}}],[\"它不保证网络包的交付\",{\"1\":{\"2023\":1}}],[\"它不允许出现重复元素\",{\"1\":{\"382\":1}}],[\"它就会将自己的投票信息更改为\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"它就会不停地发短信通知你\",{\"1\":{\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"4449\":1}}],[\"它首先也会将投票选给自己\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"它首先不会自己去尝试加载这个类\",{\"1\":{\"231\":1,\"3514\":1}}],[\"它为每个其他的\",{\"1\":{\"1795\":1,\"4355\":1}}],[\"它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了\",{\"1\":{\"1762\":1,\"4322\":1}}],[\"它具有服务降级\",{\"1\":{\"1755\":1,\"4315\":1}}],[\"它只是将各家公司开发的比较成熟\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构\",{\"1\":{\"643\":1,\"3631\":1}}],[\"它利用spring\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"它俩负责的事情如下\",{\"1\":{\"1112\":1,\"1280\":1,\"1448\":1,\"1616\":1,\"4494\":1}}],[\"它才消停\",{\"1\":{\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"4449\":1}}],[\"它也不会再发送第二条短信提醒你\",{\"1\":{\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"4449\":1}}],[\"它也有一个对应的set接口的实现类linkedhashset\",{\"1\":{\"369\":1}}],[\"它还可以方便地实现进程\",{\"1\":{\"1039\":1,\"1207\":1,\"1375\":1,\"1543\":1,\"4421\":1}}],[\"它还提供\",{\"1\":{\"845\":1,\"3833\":1}}],[\"它会先暂停拥有偏向锁的线程\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"它会先将请求转发给父类加载器\",{\"1\":{\"228\":1,\"3511\":1}}],[\"它会反查生产者\",{\"1\":{\"1855\":1,\"3932\":1}}],[\"它会直接以\",{\"1\":{\"1803\":1,\"4363\":1}}],[\"它会首先\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"它会停止执行并等待其他线程到达屏障\",{\"1\":{\"1033\":1,\"1201\":1,\"1369\":1,\"1537\":1,\"4415\":1}}],[\"它允许同一时刻多个线程访问同一资源\",{\"1\":{\"1032\":1,\"1200\":1,\"1368\":1,\"1536\":1,\"4414\":1}}],[\"它有助于提高开发人员的生产力\",{\"1\":{\"845\":1,\"3833\":1}}],[\"它对数据库中数据的改变是持久的\",{\"1\":{\"760\":1,\"3748\":1}}],[\"它们都是\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"它们的区别在于创建\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"它们的实现都依赖了动态代理\",{\"1\":{\"698\":1,\"3686\":1}}],[\"它们是通过\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"它们是如何减少\",{\"1\":{\"1079\":1,\"1247\":1,\"1415\":1,\"1583\":1,\"4461\":1}}],[\"它们具有相同的格式\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"它们才会一起继续执行\",{\"1\":{\"1033\":1,\"1201\":1,\"1369\":1,\"1537\":1,\"4415\":1}}],[\"它们就使用到了模板模式\",{\"1\":{\"749\":1,\"3737\":1}}],[\"它和普通的相对平衡的二叉搜索树的效率相同\",{\"1\":{\"656\":1,\"3644\":1}}],[\"它同时满足以下特性\",{\"1\":{\"645\":1,\"3633\":1}}],[\"它在每个节点增加了一个存储位记录节点的颜色\",{\"1\":{\"645\":1,\"3633\":1}}],[\"它可以随时发送数据\",{\"1\":{\"2078\":1}}],[\"它可以替代前面的\",{\"1\":{\"1095\":1,\"1263\":1,\"1431\":1,\"1599\":1,\"4477\":1}}],[\"它可以帮助实现对程序内部运行情况的监控\",{\"1\":{\"856\":1,\"3844\":1}}],[\"它可以排序\",{\"1\":{\"364\":1}}],[\"它可在\",{\"1\":{\"641\":1,\"3629\":1}}],[\"它犯了面向对象设计领域的一个基本错误\",{\"1\":{\"575\":1}}],[\"它是消息摘要\",{\"1\":{\"3281\":1}}],[\"它是用两个数学相关的密钥对信息进行编码\",{\"1\":{\"3279\":1}}],[\"它是用来解决一级缓存不能跨会话共享数据的问题\",{\"1\":{\"914\":1,\"3902\":1}}],[\"它是简单的\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"它是指对数据修改时持保守态度\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"它是构建锁或者其他同步组件的基础框架\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"它是一个非常庞大的数据库\",{\"1\":{\"3239\":1}}],[\"它是一个64位long型\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"它是一条\",{\"1\":{\"2778\":1,\"4003\":1}}],[\"它是一种特殊的间隙锁\",{\"1\":{\"2476\":1,\"4809\":1}}],[\"它是域名解析结果的原出处\",{\"1\":{\"2218\":1,\"5271\":1}}],[\"它是针对\",{\"1\":{\"889\":1,\"3877\":1}}],[\"它是具备了某些特性的二叉搜索树\",{\"1\":{\"643\":1,\"3631\":1}}],[\"它是hashmap的子类\",{\"1\":{\"440\":1}}],[\"它是java最早实现的容器类之一\",{\"1\":{\"388\":1}}],[\"它内部通过synchronized实现了线程安全\",{\"1\":{\"388\":1}}],[\"它内部的map的实现类是linkedhashmap\",{\"1\":{\"369\":1}}],[\"它基于treemap实现\",{\"1\":{\"366\":1}}],[\"它包含有各种有关集合操作的静态多态方法\",{\"1\":{\"331\":1}}],[\"它提供了对集合对象进行基本操作的通用接口方法\",{\"1\":{\"329\":1}}],[\"它的下一层就是\",{\"1\":{\"2204\":1,\"5257\":1}}],[\"它的\",{\"1\":{\"2044\":1}}],[\"它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来\",{\"1\":{\"1772\":1,\"4332\":1}}],[\"它的前两个参数分别是目的端和源端的文件描述符\",{\"1\":{\"1094\":1,\"1262\":1,\"1430\":1,\"1598\":1,\"4476\":1}}],[\"它的时间复杂度o\",{\"1\":{\"657\":1,\"3645\":1}}],[\"它的操作效率就降低了\",{\"1\":{\"643\":1,\"3631\":1}}],[\"它的操作效率\",{\"1\":{\"643\":1,\"3631\":1}}],[\"它的每个方法中都加入了synchronize方法\",{\"1\":{\"543\":1}}],[\"它的特点是内部采用动态数组实现\",{\"1\":{\"333\":1}}],[\"它的搜索范围中没有找到所需的类\",{\"1\":{\"232\":1,\"3515\":1}}],[\"它的整个生命周期可以简单概括为\",{\"1\":{\"188\":1,\"3471\":1}}],[\"每台服务都会去执行refresh定时任务方法\",{\"1\":{\"3191\":1,\"5442\":1}}],[\"每隔一段时间抽取一批\",{\"1\":{\"2672\":1,\"5005\":1}}],[\"每\",{\"1\":{\"2566\":1,\"4899\":1}}],[\"每发送一次数据\",{\"1\":{\"2015\":1}}],[\"每一个设备都会收到该分组\",{\"1\":{\"2159\":1,\"5212\":1}}],[\"每一个模块都是一个单独的系统\",{\"1\":{\"1711\":1,\"4271\":1}}],[\"每一个queue一个consumer\",{\"1\":{\"991\":1,\"5138\":1}}],[\"每一项工作都是以一个\",{\"1\":{\"1700\":1,\"4260\":1}}],[\"每一次重分配的结果尽量与上一次分配结果保持一致\",{\"1\":{\"965\":1,\"5112\":1}}],[\"每一次分配变更相对上一次分配做最少的变动\",{\"1\":{\"963\":1,\"5110\":1}}],[\"每一次添加操作\",{\"1\":{\"626\":1}}],[\"每天打开一个新片段\",{\"1\":{\"928\":1,\"5075\":1}}],[\"每当执行接口对象的方法时\",{\"1\":{\"894\":1,\"3882\":1}}],[\"每当一个类加载器接收到加载请求时\",{\"1\":{\"228\":1,\"3511\":1}}],[\"每添加一个元素\",{\"1\":{\"628\":1}}],[\"每次在真正消费完消息之后再自己手动提交\",{\"1\":{\"3118\":1,\"5369\":1}}],[\"每次只能一个线程持有锁\",{\"1\":{\"2825\":1,\"4050\":1}}],[\"每次只能有⼀个线程调⽤访问同步块内容\",{\"1\":{\"674\":1,\"3662\":1}}],[\"每次变量更新了就把版本号加一\",{\"1\":{\"2804\":1,\"4029\":1}}],[\"每次构建不同的请求\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"每次\",{\"1\":{\"2266\":1,\"4599\":1}}],[\"每次操作时都传入整个\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"每次获取时+1\",{\"1\":{\"940\":1,\"5087\":1}}],[\"每次增长capacityincrement\",{\"1\":{\"470\":1}}],[\"每次扩容都是成倍的\",{\"1\":{\"431\":1}}],[\"每个thread中都具备一个threadlocalmap\",{\"1\":{\"2946\":1,\"4171\":1}}],[\"每个topic有2个分区\",{\"1\":{\"968\":1,\"5115\":1}}],[\"每个topic4个分区\",{\"1\":{\"952\":1,\"5099\":1}}],[\"每个topic仅需恢复一部分的数据\",{\"1\":{\"935\":1,\"5082\":1}}],[\"每个对象中都内置了一个\",{\"1\":{\"2920\":1,\"4145\":1}}],[\"每个线程独享的内存\",{\"1\":{\"2855\":1,\"4080\":1}}],[\"每个事务读到的数据版本可能是不一样的\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"每个事务都有一个完整的数据空间\",{\"1\":{\"2485\":1,\"4818\":1}}],[\"每个语句执行前\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"每个请求和响应都需要独立的连接\",{\"1\":{\"2186\":1,\"5239\":1}}],[\"每个接口同样也应该具备不重复的\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"每个网络设备都自己维护了一个\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"每个目录可以包含文件和其他子目录\",{\"1\":{\"1002\":1,\"3914\":1}}],[\"每个消费者都订阅了相同的topic\",{\"1\":{\"957\":1,\"5104\":1}}],[\"每个片段包含1g或者一周的数据\",{\"1\":{\"928\":1,\"5075\":1}}],[\"每个端点都可以启用和禁用\",{\"1\":{\"856\":1,\"3844\":1}}],[\"每个元素的rehash之后\",{\"1\":{\"520\":1,\"3609\":1}}],[\"每个单向链表往往只有一个或少数几个节点\",{\"1\":{\"386\":1}}],[\"每个父类加载器都会走一遍这个流程\",{\"1\":{\"230\":1,\"3513\":1}}],[\"每个\",{\"0\":{\"2574\":1,\"4907\":1},\"1\":{\"198\":1,\"1797\":1,\"3481\":1,\"4357\":1}}],[\"则需要在文章微服务中创建app端需要的文章\",{\"1\":{\"3162\":1,\"5413\":1}}],[\"则需要修改自媒体文章的状态\",{\"1\":{\"3161\":1,\"5412\":1}}],[\"则需要先取出主键的值\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"则放行\",{\"1\":{\"3132\":1,\"3143\":1,\"5383\":1,\"5394\":1}}],[\"则路由到后台管理微服务进行登录\",{\"1\":{\"3129\":1,\"3140\":1,\"5380\":1,\"5391\":1}}],[\"则新的任务会被暂存在一个任务队列中\",{\"1\":{\"2996\":1,\"4221\":1}}],[\"则立即执行\",{\"1\":{\"2996\":1,\"4221\":1}}],[\"则会创建新的线程处理任务\",{\"1\":{\"2998\":1,\"4223\":1}}],[\"则会优先使用可复用的线程\",{\"1\":{\"2998\":1,\"4223\":1}}],[\"则会丢弃该任务\",{\"1\":{\"2974\":1,\"4199\":1}}],[\"则会在\",{\"1\":{\"2073\":1}}],[\"则会在传输层进行分片\",{\"1\":{\"2072\":1}}],[\"则表示锁可以被获取\",{\"1\":{\"2922\":1,\"4147\":1}}],[\"则是互斥的\",{\"1\":{\"2900\":1,\"4125\":1}}],[\"则返回错误信息\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"则将当前请求资源的线程设置为有效的工作线程\",{\"1\":{\"2831\":1,\"4056\":1}}],[\"则将对象头设置成无锁状态\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"则以原子方式将该引用和该标志的值设置为给定的更新值\",{\"1\":{\"2807\":1,\"4032\":1}}],[\"则以非事务的方式继续运行\",{\"1\":{\"777\":1,\"3765\":1}}],[\"则直接将自己挂起\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"则可以通过\",{\"1\":{\"2548\":1,\"4881\":1}}],[\"则为空\",{\"1\":{\"2535\":1,\"4868\":1}}],[\"则商品在商家手中\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"则给商家付了钱\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"则要执行这条命令\",{\"1\":{\"2365\":1,\"2370\":1,\"4698\":1,\"4703\":1}}],[\"则就会使用该字段过滤一批数据\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"则选择该字段为默认的主键\",{\"1\":{\"2296\":1,\"4629\":1}}],[\"则取出其\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"则它直接返回\",{\"1\":{\"2214\":1,\"5267\":1}}],[\"则使用空闲线程来处理\",{\"1\":{\"2982\":1,\"4207\":1}}],[\"则使用文本格式的报文\",{\"1\":{\"2187\":1,\"5240\":1}}],[\"则使用串行方式\",{\"1\":{\"2186\":1,\"5239\":1}}],[\"则使用逗号分割\",{\"1\":{\"254\":1,\"3539\":1}}],[\"则引入了更多的缓存控制策略例如\",{\"1\":{\"2183\":1,\"5236\":1}}],[\"则没有\",{\"1\":{\"2064\":1}}],[\"则mq服务器会push消息给消费者\",{\"1\":{\"1854\":1,\"3931\":1}}],[\"则\",{\"1\":{\"1802\":1,\"2541\":1,\"2616\":1,\"4362\":1,\"4874\":1,\"4949\":1}}],[\"则通过数据行的\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"则通过\",{\"1\":{\"1703\":1,\"4263\":1}}],[\"则通过父类的loadclass来加载该类\",{\"1\":{\"227\":1,\"3510\":1}}],[\"则从\",{\"1\":{\"1701\":1,\"4261\":1}}],[\"则交由当前连接对应的\",{\"1\":{\"1145\":1,\"1160\":1,\"1313\":1,\"1328\":1,\"1481\":1,\"1496\":1,\"1649\":1,\"1664\":1,\"4527\":1,\"4542\":1}}],[\"则交由\",{\"1\":{\"1144\":1,\"1159\":1,\"1312\":1,\"1327\":1,\"1480\":1,\"1495\":1,\"1648\":1,\"1663\":1,\"4526\":1,\"4541\":1}}],[\"则jvm会把该线程放入\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"则不久之后\",{\"1\":{\"1008\":1}}],[\"则不久之后该数据可能再次被访问\",{\"1\":{\"1008\":1}}],[\"则不久之后该指令可能再次被执行\",{\"1\":{\"1008\":1}}],[\"则该取值等价于\",{\"1\":{\"784\":1,\"3772\":1}}],[\"则创建一个事务作为当前事务的嵌套事务来运行\",{\"1\":{\"784\":1,\"3772\":1}}],[\"则创建一个新的事务\",{\"1\":{\"776\":1,\"3764\":1}}],[\"则把当前事务挂起\",{\"1\":{\"780\":1,\"781\":1,\"3768\":1,\"3769\":1}}],[\"则加入该事务\",{\"1\":{\"776\":1,\"777\":1,\"778\":1,\"3764\":1,\"3765\":1,\"3766\":1}}],[\"则默认采用\",{\"1\":{\"711\":1,\"3699\":1}}],[\"则应该设计成继承关系\",{\"1\":{\"586\":1}}],[\"则应该选linkedlist\",{\"1\":{\"353\":1}}],[\"则用equals方法比较元素是否相等\",{\"1\":{\"380\":1}}],[\"则linkedlist是比较理想的选择\",{\"1\":{\"346\":1}}],[\"则调用findclass方法来加载该类\",{\"1\":{\"227\":1,\"3510\":1}}],[\"则调用启动类加载器来加载该类\",{\"1\":{\"227\":1,\"3510\":1}}],[\"则抛出异常\",{\"1\":{\"227\":1,\"778\":1,\"782\":1,\"3510\":1,\"3766\":1,\"3770\":1}}],[\"则说明该类没有被加载过\",{\"1\":{\"227\":1,\"3510\":1}}],[\"当作队列是完全可以的\",{\"1\":{\"3187\":1,\"5438\":1}}],[\"当作队列来使用时\",{\"1\":{\"3183\":1,\"5434\":1}}],[\"当消费者刚拿到这个消息准备进行真正消费的时候\",{\"1\":{\"3116\":1,\"5367\":1}}],[\"当消费者拉取到了分区的某个消息之后\",{\"1\":{\"3116\":1,\"5367\":1}}],[\"当消息达到设置的条件上限时\",{\"1\":{\"926\":1,\"5073\":1}}],[\"当任务到达时\",{\"1\":{\"2953\":1,\"4178\":1}}],[\"当执行\",{\"1\":{\"2919\":1,\"4144\":1}}],[\"当执行插入\",{\"1\":{\"2421\":1,\"4754\":1}}],[\"当循环的条件被其他线程改变时才能进入临界区\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"当头节点释放同步状态的时候\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"当线程在同步队列中不断的通过自旋去获取同步状态\",{\"1\":{\"2840\":1,\"4065\":1}}],[\"当线程抢占锁失败时候\",{\"1\":{\"2830\":1,\"4055\":1}}],[\"当线程第二次再执行同步代码块时\",{\"1\":{\"2757\":1,\"3982\":1}}],[\"当同步状态释放时\",{\"1\":{\"2829\":1,\"4054\":1}}],[\"当对一个共享变量执行操作时\",{\"1\":{\"2812\":1,\"4037\":1}}],[\"当后续线程尝试获取锁时\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"当关闭偏向锁功能时\",{\"1\":{\"2763\":1,\"3988\":1}}],[\"当用户\",{\"1\":{\"3208\":1,\"5459\":1}}],[\"当用户请求过来\",{\"1\":{\"2699\":1,\"5032\":1}}],[\"当用户调用\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"当内存不足以容纳新写入数据时\",{\"1\":{\"2682\":1,\"2687\":1,\"5015\":1,\"5020\":1}}],[\"当内核通知文件描述符可读写时\",{\"1\":{\"1069\":1,\"1237\":1,\"1405\":1,\"1573\":1,\"4451\":1}}],[\"当读取记录时\",{\"1\":{\"2548\":1,\"4881\":1}}],[\"当事务回滚时用于将数据恢复到修改前的样子\",{\"1\":{\"2547\":1,\"4880\":1}}],[\"当事务方法被另一个事务方法调用时\",{\"1\":{\"774\":1,\"3762\":1}}],[\"当有一个新的任务提交时\",{\"1\":{\"2996\":1,\"4221\":1}}],[\"当有线程对表结构进行变更\",{\"1\":{\"2406\":1,\"4739\":1}}],[\"当有线程在执行\",{\"1\":{\"2405\":1,\"4738\":1}}],[\"当有其它线程改变了hashmap的结构\",{\"1\":{\"546\":1}}],[\"当会话退出后\",{\"1\":{\"2397\":1,\"4730\":1}}],[\"当查到索引对应的指针或主键后\",{\"1\":{\"2323\":1,\"4656\":1}}],[\"当没有显示的指定表的主键时\",{\"1\":{\"2296\":1,\"4629\":1}}],[\"当主机发送\",{\"1\":{\"2154\":1,\"5207\":1}}],[\"当主机收到数据包后\",{\"1\":{\"2091\":1}}],[\"当通信结束希望断开连接时\",{\"1\":{\"2021\":1}}],[\"当发生网络分区的时候\",{\"1\":{\"1832\":1,\"4392\":1}}],[\"当设计读写操作时\",{\"1\":{\"1824\":1,\"4384\":1}}],[\"当集群中有机器挂了\",{\"1\":{\"1809\":1,\"4369\":1}}],[\"当集群中已经有过半的\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"当\",{\"1\":{\"1803\":1,\"2030\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2445\":1,\"2447\":1,\"2660\":1,\"4363\":1,\"4773\":1,\"4774\":1,\"4775\":1,\"4778\":1,\"4780\":1,\"4993\":1}}],[\"当系统出现崩溃影响最大应该是\",{\"1\":{\"1799\":1,\"4359\":1}}],[\"当一台同样遵守\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"当一个线程访问同步代码块并获取锁时\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"当一个线程到达屏障时\",{\"1\":{\"1033\":1,\"1201\":1,\"1369\":1,\"1537\":1,\"4415\":1}}],[\"当一个元素加入布隆过滤器中的时候\",{\"1\":{\"2702\":1,\"5035\":1}}],[\"当一个事务对一条记录加了\",{\"1\":{\"2461\":1,\"2462\":1,\"4794\":1,\"4795\":1}}],[\"当一个服务调用另一个服务由于网络原因或自身原因出现问题\",{\"1\":{\"1749\":1,\"4309\":1}}],[\"当一个\",{\"1\":{\"898\":1,\"1796\":1,\"3886\":1,\"4356\":1}}],[\"当选举产生了新的\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"当整个服务框架在启动过程中\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"当远程接口的方法被调用\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"当实际调用的时候\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"当实际kv个数超过threshold时\",{\"1\":{\"400\":1}}],[\"当服务一直处于正常状态\",{\"1\":{\"1753\":1,\"4313\":1}}],[\"当更多的服务请求到这些资源导致更多的请求等待\",{\"1\":{\"1749\":1,\"4309\":1}}],[\"当更多的元素加入到arraylist中时\",{\"1\":{\"445\":1}}],[\"当被监控的\",{\"1\":{\"1065\":1,\"1066\":1,\"1233\":1,\"1234\":1,\"1401\":1,\"1402\":1,\"1569\":1,\"1570\":1,\"4447\":1,\"4448\":1}}],[\"当某个\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"当某台机器挂了\",{\"1\":{\"935\":1,\"5082\":1}}],[\"当sleep\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"当每个消息被写进去后\",{\"1\":{\"975\":1,\"5122\":1}}],[\"当这两个目标发生冲突时\",{\"1\":{\"966\":1,\"5113\":1}}],[\"当所有片段都被写满时\",{\"1\":{\"928\":1,\"5075\":1}}],[\"当我需要构建一个web应用程序时\",{\"1\":{\"858\":1,\"3846\":1}}],[\"当我们不指定\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"当我们需要判断一个元素是否存在于布隆过滤器的时候\",{\"1\":{\"2705\":1,\"5038\":1}}],[\"当我们的动态代理对象调用一个方法时\",{\"1\":{\"705\":1,\"3693\":1}}],[\"当我们使用\",{\"1\":{\"606\":1}}],[\"当我们想要加载一个类的时候\",{\"1\":{\"220\":1,\"3503\":1}}],[\"当范围对象的状态发生变化时\",{\"1\":{\"849\":1,\"3837\":1}}],[\"当需要限制\",{\"1\":{\"1703\":1,\"4263\":1}}],[\"当需要为\",{\"1\":{\"1702\":1,\"4262\":1}}],[\"当需要容器镜像时\",{\"1\":{\"1701\":1,\"4261\":1}}],[\"当需要补全b的属性时\",{\"1\":{\"801\":1,\"3789\":1}}],[\"当需要多线程操作的时候可以使用线程安全的concurrenthashmap\",{\"1\":{\"544\":1}}],[\"当代理类调用方法的时候\",{\"1\":{\"715\":1,\"3703\":1}}],[\"当多个线程⼀起到达锁位置时\",{\"1\":{\"674\":1,\"3662\":1}}],[\"当第⼀个抢到锁的调⽤获取了实例之后\",{\"1\":{\"674\":1,\"3662\":1}}],[\"当从根节点到叶子节点的路径上黑色节点相同时\",{\"1\":{\"645\":1,\"3633\":1}}],[\"当数据量达到一定程度的时候\",{\"1\":{\"627\":1}}],[\"当hashcode离散性很好的时候\",{\"1\":{\"530\":1,\"3619\":1}}],[\"当hashmap中的元素个数达到13的时候\",{\"1\":{\"427\":1}}],[\"当你使用代理对象调用方法的时候实际会调用到这个方法\",{\"1\":{\"706\":1,\"3694\":1}}],[\"当你向这两种类型中增加元素的时候\",{\"1\":{\"501\":1}}],[\"当你在\",{\"1\":{\"260\":1,\"3545\":1}}],[\"当然由于fifo先进先出的特性\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"当然其他线程对学生表进行写操作时也会被阻塞\",{\"1\":{\"2394\":1,\"4727\":1}}],[\"当然了\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"当然前提是⼦⼯⼚⽀持⽣产该产品\",{\"1\":{\"684\":1,\"3672\":1}}],[\"当然\",{\"1\":{\"447\":1,\"894\":1,\"2049\":1,\"2478\":1,\"2818\":1,\"3882\":1,\"4043\":1,\"4811\":1}}],[\"当map中元素个数超过loadfactor\",{\"1\":{\"431\":1}}],[\"当其size大于12\",{\"1\":{\"422\":1}}],[\"当前消费到的\",{\"1\":{\"3115\":1,\"5366\":1}}],[\"当前可以同时运行的线程数量变为最大线程数\",{\"1\":{\"2962\":1,\"4187\":1}}],[\"当前节点在队列中的状态\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"当前锁是偏向锁\",{\"1\":{\"2761\":1,\"3986\":1}}],[\"当前对本事务不可见的其他活跃事务\",{\"1\":{\"2537\":1,\"4870\":1}}],[\"当前正在写入数据的片段叫活跃片段\",{\"1\":{\"928\":1,\"5075\":1}}],[\"当前\",{\"1\":{\"405\":1,\"706\":1,\"3694\":1}}],[\"当前执行的语句必属于某个方法\",{\"1\":{\"254\":1,\"3539\":1}}],[\"当向hashset中添加元素的时候\",{\"1\":{\"380\":1}}],[\"当程序启动时\",{\"1\":{\"325\":1,\"3602\":1}}],[\"当程序中可能出现这类异常\",{\"1\":{\"243\":1,\"249\":1,\"3528\":1,\"3534\":1}}],[\"当父类加载器无法加载时\",{\"1\":{\"227\":1,\"3510\":1}}],[\"当父类的加载器为空\",{\"1\":{\"227\":1,\"3510\":1}}],[\"当父类的加载器不为空\",{\"1\":{\"227\":1,\"3510\":1}}],[\"逻辑非常清晰\",{\"1\":{\"226\":1,\"3509\":1}}],[\"将返回线程池进行复用\",{\"1\":{\"2998\":1,\"4223\":1}}],[\"将抛出\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"将需要存储的值放入到这个哈希表中\",{\"1\":{\"2944\":1,\"4169\":1}}],[\"将锁计数器设为\",{\"1\":{\"2923\":1,\"4148\":1}}],[\"将多个变量操作合成一个变量操作\",{\"1\":{\"2814\":1,\"4039\":1}}],[\"将内存地址\",{\"1\":{\"2790\":1,\"4015\":1}}],[\"将轻量级锁升级为重量级锁\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期\",{\"1\":{\"2713\":1,\"5046\":1}}],[\"将其他相关资源一并推送给客户端\",{\"1\":{\"2189\":1,\"5242\":1}}],[\"将阻塞直到写入磁盘完成后返回\",{\"1\":{\"2658\":1,\"4991\":1}}],[\"将敏感字符进行转义\",{\"1\":{\"2552\":1,\"4885\":1}}],[\"将当前未提交事务\",{\"1\":{\"2542\":1,\"4875\":1}}],[\"将会自动创建一个\",{\"1\":{\"2296\":1,\"4629\":1}}],[\"将会抛出concurrentmodificationexception\",{\"1\":{\"546\":1}}],[\"将该\",{\"1\":{\"2171\":1,\"5224\":1}}],[\"将把这个链路层帧\",{\"1\":{\"2170\":1,\"5223\":1}}],[\"将采用\",{\"1\":{\"2169\":1,\"2174\":1,\"5222\":1,\"5227\":1}}],[\"将构造一个\",{\"1\":{\"2157\":1,\"5210\":1}}],[\"将不得不通过\",{\"1\":{\"2155\":1,\"5208\":1}}],[\"将消息持久化到存储系统\",{\"1\":{\"1849\":1,\"3926\":1}}],[\"将写请求\",{\"1\":{\"1794\":1,\"4354\":1}}],[\"将数据保存在内存中\",{\"1\":{\"1774\":1,\"4334\":1}}],[\"将这些本地proxy代理实例\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"将这个值与topic可用的partition数取余得到partition值\",{\"1\":{\"939\":1,\"5086\":1}}],[\"将这个类标志成\",{\"1\":{\"593\":1}}],[\"将请求模板化\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"将请求消息\",{\"1\":{\"737\":1,\"3725\":1}}],[\"将以java注解的方式定义的远程调用api接口\",{\"1\":{\"1764\":1,\"4324\":1}}],[\"将一个完整的系统拆分成很多个服务\",{\"1\":{\"1731\":1,\"4291\":1}}],[\"将一个复杂的业务拆分为若干小的业务\",{\"1\":{\"1722\":1,\"4282\":1}}],[\"将事物分成多阶段提交\",{\"1\":{\"1730\":1,\"4290\":1}}],[\"将复杂的业务简单化\",{\"1\":{\"1722\":1,\"4282\":1}}],[\"将下载镜像以\",{\"1\":{\"1701\":1,\"4261\":1}}],[\"将新的连接分配给某个子线程\",{\"1\":{\"1176\":1,\"1344\":1,\"1512\":1,\"1680\":1,\"4558\":1}}],[\"将结果发给主线程中的\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4545\":1}}],[\"将上面的两个因素排列组设一下\",{\"1\":{\"1118\":1,\"1286\":1,\"1454\":1,\"1622\":1,\"4500\":1}}],[\"将磁盘上的数据拷贝到内核缓冲区里\",{\"1\":{\"1100\":1,\"1268\":1,\"1436\":1,\"1604\":1,\"4482\":1}}],[\"将获取的唯一id存表\",{\"1\":{\"980\":1,\"5127\":1}}],[\"将key的hash值与topic的partition数进行取余得到partition值\",{\"1\":{\"938\":1,\"5085\":1}}],[\"将如何处理\",{\"1\":{\"929\":1,\"5076\":1}}],[\"将重新启动\",{\"1\":{\"845\":1,\"3833\":1}}],[\"将渲染结果返回给客户端\",{\"1\":{\"744\":1,\"3732\":1}}],[\"将字符串转换成格式化数字或格式化日期等\",{\"1\":{\"739\":1,\"3727\":1}}],[\"将字节码翻译成底层系统指令\",{\"1\":{\"180\":1,\"3463\":1}}],[\"将对象转换为指定的响应信息\",{\"1\":{\"737\":1,\"3725\":1}}],[\"将帮你做一些额外的工作\",{\"1\":{\"736\":1,\"3724\":1}}],[\"将得到视图对象返回给用户\",{\"1\":{\"730\":1,\"3718\":1}}],[\"将⽣产任务交给不同的派⽣类⼯⼚\",{\"1\":{\"682\":1,\"3670\":1}}],[\"将\",{\"1\":{\"602\":1,\"2657\":1,\"2843\":1,\"3263\":1,\"4068\":1,\"4990\":1}}],[\"将在新的\",{\"1\":{\"592\":1}}],[\"将搜索类或资源的任务委托给其父类加载器\",{\"1\":{\"223\":1,\"3506\":1}}],[\"其它都是api\",{\"1\":{\"3038\":1,\"5289\":1}}],[\"其它的运行所需资源都已全部获得\",{\"1\":{\"1021\":1,\"1189\":1,\"1357\":1,\"1525\":1,\"4403\":1}}],[\"其写锁是独享锁\",{\"1\":{\"2898\":1,\"4123\":1}}],[\"其读锁是共享锁\",{\"1\":{\"2898\":1,\"4123\":1}}],[\"其余所有等待获取该锁的线程都会处于阻塞状态\",{\"1\":{\"2767\":1,\"3992\":1}}],[\"其余的类加载器都应有自己的父类加载器\",{\"1\":{\"222\":1,\"3505\":1}}],[\"其对查询性能的影响也就越大\",{\"1\":{\"2581\":1,\"4914\":1}}],[\"其效率大于索引合并\",{\"1\":{\"2291\":1,\"4624\":1}}],[\"其本质可以看成是一种排序好的数据结构\",{\"1\":{\"2261\":1,\"4594\":1}}],[\"其表数据文件本身就是按\",{\"1\":{\"2259\":1,\"2276\":1,\"4592\":1,\"4609\":1}}],[\"其数据结构如下\",{\"1\":{\"2835\":1,\"4060\":1}}],[\"其数据文件本身就是索引文件\",{\"1\":{\"2259\":1,\"2276\":1,\"4592\":1,\"4609\":1}}],[\"其数据流不受影响\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"其理论值计算公式如下\",{\"1\":{\"2046\":1}}],[\"其次\",{\"1\":{\"1096\":1,\"1264\":1,\"1432\":1,\"1600\":1,\"4478\":1}}],[\"其附近的存储单元也将被访问\",{\"1\":{\"1008\":1}}],[\"其目标有两点\",{\"1\":{\"963\":1,\"5110\":1}}],[\"其作用域是\",{\"1\":{\"900\":1,\"3888\":1}}],[\"其定义了产品的⽣产接⼝\",{\"1\":{\"682\":1,\"3670\":1}}],[\"其大小将会动态地增长\",{\"1\":{\"445\":1}}],[\"其实并不是真正的破解\",{\"1\":{\"3221\":1}}],[\"其实主要就是\",{\"1\":{\"1809\":1,\"4369\":1}}],[\"其实和初始化选举差不多\",{\"1\":{\"1804\":1,\"4364\":1}}],[\"其实它们的区别还是很好理解的\",{\"1\":{\"1064\":1,\"1232\":1,\"1400\":1,\"1568\":1,\"4446\":1}}],[\"其实整体处理过程类似\",{\"1\":{\"810\":1,\"3798\":1}}],[\"其实我们在前面分析源码时也提到过\",{\"1\":{\"809\":1,\"3797\":1}}],[\"其实只有一级缓存并不是不能解决循环依赖\",{\"1\":{\"799\":1,\"3787\":1}}],[\"其实就是通过cas修改对象头里的锁标志位\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"其实就是\",{\"1\":{\"765\":1,\"3753\":1}}],[\"其实很简单\",{\"1\":{\"674\":1,\"3662\":1}}],[\"其实synchronizedlist有一个构造函数可以传入一个object\",{\"1\":{\"509\":1}}],[\"其实\",{\"1\":{\"419\":1,\"3281\":1}}],[\"其实背后的原理也很简单\",{\"1\":{\"264\":1}}],[\"其他都是了解\",{\"1\":{\"3036\":1,\"5287\":1}}],[\"其他用户长时间无法访问\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"其他人就可以进入了\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"其他的线程都会阻塞\",{\"1\":{\"2905\":1,\"4130\":1}}],[\"其他的线程进入后就会阻塞等待锁\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"其他的exception类及其子类都属于可查异常\",{\"1\":{\"249\":1,\"3534\":1}}],[\"其他事务既不可以对该记录加\",{\"1\":{\"2462\":1,\"4795\":1}}],[\"其他事务也可以继续对该记录加\",{\"1\":{\"2461\":1,\"4794\":1}}],[\"其他事务的如果要向该表插入语句都会被阻塞\",{\"1\":{\"2435\":1,\"4768\":1}}],[\"其他内节点只存放\",{\"1\":{\"2271\":1,\"4604\":1}}],[\"其他节点的读写操作正常的话\",{\"1\":{\"1835\":1,\"4395\":1}}],[\"其他角色都没有得到更新吧\",{\"1\":{\"1793\":1,\"4353\":1}}],[\"其他阻塞\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"其他线程可以尝试获取锁\",{\"1\":{\"2923\":1,\"4148\":1}}],[\"其他线程处于阻塞状态\",{\"1\":{\"2893\":1,\"4118\":1}}],[\"其他线程才有机会操作共享数据\",{\"1\":{\"1166\":1,\"1334\":1,\"1502\":1,\"1670\":1,\"4548\":1}}],[\"其他线程调用了该对象的start\",{\"1\":{\"1021\":1,\"1189\":1,\"1357\":1,\"1525\":1,\"4403\":1}}],[\"其他线程获取锁后就会被空判断拦截\",{\"1\":{\"674\":1,\"3662\":1}}],[\"其他\",{\"1\":{\"877\":1,\"3865\":1}}],[\"其他情况\",{\"1\":{\"783\":1,\"3771\":1}}],[\"其他没有特定顺序\",{\"1\":{\"357\":1}}],[\"其中一个密钥叫公开密钥\",{\"1\":{\"3279\":1}}],[\"其中源\",{\"1\":{\"2170\":2,\"5223\":2}}],[\"其中高32位表示\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"其中⼀个线程获取锁\",{\"1\":{\"674\":1,\"3662\":1}}],[\"其中有listiterator和\",{\"1\":{\"510\":1}}],[\"其中有一个是我们本文主要关注的\",{\"1\":{\"392\":1}}],[\"其中\",{\"1\":{\"188\":1,\"1123\":1,\"1141\":1,\"1291\":1,\"1309\":1,\"1459\":1,\"1477\":1,\"1627\":1,\"1645\":1,\"1782\":1,\"2148\":1,\"2917\":1,\"2930\":1,\"3471\":1,\"4142\":1,\"4155\":1,\"4342\":1,\"4505\":1,\"4523\":1,\"5201\":1}}],[\"就可能被破解掉\",{\"1\":{\"3239\":1}}],[\"就可以查到数据了\",{\"1\":{\"2326\":1,\"4659\":1}}],[\"就可以通过它找到根域\",{\"1\":{\"2211\":1,\"5264\":1}}],[\"就可以完成文件的传输\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4487\":1}}],[\"就读于陕西师范大学\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"就算数据库泄漏\",{\"1\":{\"3237\":1}}],[\"就算老子啥都不会也不去你这个垃圾公司\",{\"1\":{\"3034\":1,\"5285\":1}}],[\"就算再急也没用\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"就新建一个线程来执行任务\",{\"1\":{\"2987\":1,\"4212\":1}}],[\"就直接获取到锁\",{\"1\":{\"2906\":1,\"4131\":1}}],[\"就把其设为同步队列中的头节点\",{\"1\":{\"2840\":1,\"4065\":1}}],[\"就把这个轻量级锁释放了\",{\"1\":{\"2438\":1,\"4771\":1}}],[\"就要升级到\",{\"1\":{\"2520\":2,\"4853\":2}}],[\"就感觉发生了幻觉一样\",{\"1\":{\"2506\":1,\"4839\":1}}],[\"就意味着发生了\",{\"1\":{\"2493\":1,\"2498\":1,\"2502\":1,\"4826\":1,\"4831\":1,\"4835\":1}}],[\"就好比买一件商品\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"就好了\",{\"1\":{\"605\":1}}],[\"就采用轻量级锁\",{\"1\":{\"2441\":1,\"4774\":1}}],[\"就采用\",{\"1\":{\"2440\":1,\"4773\":1}}],[\"就都会被阻塞\",{\"1\":{\"2413\":1,\"4746\":1}}],[\"就无法申请到\",{\"1\":{\"2412\":1,\"4745\":1}}],[\"就无法使用\",{\"1\":{\"723\":1,\"3711\":1}}],[\"就肯定能命中索引\",{\"1\":{\"2350\":1,\"4683\":1}}],[\"就相当于定位到了数据\",{\"1\":{\"2311\":1,\"4644\":1}}],[\"就属于非聚簇索引\",{\"1\":{\"2285\":1,\"2317\":1,\"4618\":1,\"4650\":1}}],[\"就代表请求被成功处理\",{\"1\":{\"2178\":1,\"5231\":1}}],[\"就应答ack\",{\"1\":{\"1854\":1,\"3931\":1}}],[\"就变了\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"就利用了\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4490\":1}}],[\"就一直不断地把这个事件传递给用户\",{\"1\":{\"1068\":1,\"1236\":1,\"1404\":1,\"1572\":1,\"4450\":1}}],[\"就绪状态的线程获取了cpu\",{\"1\":{\"1022\":1,\"1190\":1,\"1358\":1,\"1526\":1,\"4404\":1}}],[\"就绪状态\",{\"1\":{\"1021\":1,\"1189\":1,\"1357\":1,\"1525\":1,\"4403\":1}}],[\"就关闭当前文件\",{\"1\":{\"928\":1,\"5075\":1}}],[\"就像相机拍照那样\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"就像这个事务从来没有执行过一样\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"就像管理普通的代码一样\",{\"1\":{\"1694\":1,\"4254\":1}}],[\"就像一棵倒立的树\",{\"1\":{\"1002\":1,\"3914\":1}}],[\"就像一个工具类\",{\"1\":{\"331\":1}}],[\"就像我们自己做的例子一样\",{\"1\":{\"799\":1,\"3787\":1}}],[\"就二者的效率来说\",{\"1\":{\"718\":1,\"3706\":1}}],[\"就\",{\"1\":{\"700\":1,\"2015\":1,\"3688\":1}}],[\"就⽐较难办了\",{\"1\":{\"684\":1,\"3672\":1}}],[\"就需要遍历表里所有记录\",{\"1\":{\"2427\":1,\"4760\":1}}],[\"就需要在操作共享资源前加上互斥锁\",{\"1\":{\"1166\":1,\"1334\":1,\"1502\":1,\"1670\":1,\"4548\":1}}],[\"就需要修改⼯⼚类的判断逻辑\",{\"1\":{\"678\":1,\"3666\":1}}],[\"就需要提及exception\",{\"1\":{\"271\":1,\"3548\":1}}],[\"就说\",{\"1\":{\"616\":1}}],[\"就会处于空闲状态\",{\"1\":{\"2992\":1,\"4217\":1}}],[\"就会将这段代码所属的同步锁消除掉\",{\"1\":{\"2770\":1,\"3995\":1}}],[\"就会将该命令写入到\",{\"1\":{\"2651\":1,\"4984\":1}}],[\"就会有大量的线程被阻塞住\",{\"1\":{\"2413\":1,\"4746\":1}}],[\"就会被阻塞\",{\"1\":{\"2412\":1,\"2471\":1,\"4745\":1,\"4804\":1}}],[\"就会在备份数据库之前先开启事务\",{\"1\":{\"2380\":1,\"4713\":1}}],[\"就会增加\",{\"1\":{\"2346\":1,\"4679\":1}}],[\"就会阻塞住所有的\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"就会导致雪崩\",{\"1\":{\"1755\":1,\"4315\":1}}],[\"就会触发kafka的rebalance机制\",{\"1\":{\"975\":1,\"5122\":1}}],[\"就会继续从上次消费到的offset来继续消费\",{\"1\":{\"975\":1,\"5122\":1}}],[\"就会删除一个最老的片段\",{\"1\":{\"928\":1,\"5075\":1}}],[\"就会进入拦截方法\",{\"1\":{\"894\":1,\"3882\":1}}],[\"就会变得非常麻烦\",{\"1\":{\"800\":1,\"3788\":1}}],[\"就会发现前后两次读到的数据是不一致的\",{\"1\":{\"2500\":1,\"4833\":1}}],[\"就会发现\",{\"1\":{\"585\":1}}],[\"就会看到如下标为蓝色的说明\",{\"1\":{\"563\":1}}],[\"就是密文传输密码http\",{\"1\":{\"3232\":1}}],[\"就是明文传输密码http\",{\"1\":{\"3226\":1}}],[\"就是一种\",{\"1\":{\"2901\":1,\"4126\":1}}],[\"就是一个很简单的数组元素求和\",{\"1\":{\"1012\":1}}],[\"就是一个queue对应一个consumer\",{\"1\":{\"993\":1,\"5140\":1}}],[\"就是一个完整对象了\",{\"1\":{\"806\":1,\"3794\":1}}],[\"就是一个接口\",{\"1\":{\"599\":1}}],[\"就是一个动态数组\",{\"1\":{\"569\":1}}],[\"就是采用自旋锁\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"就是所有的控制权都交给了操作系统\",{\"1\":{\"2767\":1,\"3992\":1}}],[\"就是开启了事务\",{\"1\":{\"2409\":1,\"4742\":1}}],[\"就是冗余索引\",{\"1\":{\"2350\":1,\"4683\":1}}],[\"就是我的域名我做主\",{\"1\":{\"2218\":1,\"5271\":1}}],[\"就是保存每个节点的表id给前端\",{\"1\":{\"1863\":1,\"3940\":1}}],[\"就是\",{\"1\":{\"1834\":2,\"2329\":1,\"2948\":2,\"4173\":2,\"4394\":2,\"4662\":1,\"5162\":1}}],[\"就是没有选举权和被选举权的\",{\"1\":{\"1790\":1,\"4350\":1}}],[\"就是将\",{\"1\":{\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"4554\":1}}],[\"就是单机同时处理\",{\"1\":{\"1073\":1,\"1241\":1,\"1409\":1,\"1577\":1,\"4455\":1}}],[\"就是多一些queue而已\",{\"1\":{\"991\":1,\"5138\":1}}],[\"就是把多个partition均衡的分配给多个消费者\",{\"1\":{\"975\":1,\"5122\":1}}],[\"就是你的完整创建依赖于我\",{\"1\":{\"790\":1,\"3778\":1}}],[\"就是基于动态代理的\",{\"1\":{\"723\":1,\"3711\":1}}],[\"就是能在线性数据结构的两段\",{\"1\":{\"611\":1}}],[\"就是做了更高层次的抽象\",{\"1\":{\"598\":1}}],[\"就是应该优先考虑组合关系\",{\"1\":{\"589\":1}}],[\"就是当达到扩容条件时会进行扩容\",{\"1\":{\"417\":1}}],[\"就将元素添加进去\",{\"1\":{\"380\":1}}],[\"就如数据库中的唯一约束\",{\"1\":{\"379\":1}}],[\"就能比较容易地进行选择了\",{\"1\":{\"345\":1}}],[\"就必须采取某种方式进行处理\",{\"1\":{\"248\":1,\"3533\":1}}],[\"就重写\",{\"1\":{\"217\":1,\"3500\":1}}],[\"就比如说\",{\"1\":{\"209\":1,\"3492\":1}}],[\"one\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"only\",{\"1\":{\"2638\":1,\"2649\":1,\"2959\":1,\"4184\":1,\"4971\":1,\"4982\":1}}],[\"oltp\",{\"1\":{\"2571\":1,\"4904\":1}}],[\"old\",{\"1\":{\"540\":1}}],[\"oldvalue\",{\"1\":{\"492\":2,\"494\":2}}],[\"oldcapacity\",{\"1\":{\"469\":2,\"470\":2}}],[\"open\",{\"1\":{\"2130\":1,\"2223\":1,\"5183\":1}}],[\"opsf\",{\"1\":{\"2130\":1,\"2223\":1,\"5183\":1}}],[\"observer\",{\"1\":{\"1790\":1,\"1793\":1,\"1794\":1,\"4350\":1,\"4353\":1,\"4354\":1}}],[\"observer观察者\",{\"1\":{\"1787\":1,\"4347\":1}}],[\"obj\",{\"1\":{\"480\":2,\"714\":2,\"3702\":2}}],[\"objectmonitor对象\",{\"1\":{\"2920\":1,\"4145\":1}}],[\"objectfactory<\",{\"1\":{\"809\":1,\"3797\":1}}],[\"objectoutputstream\",{\"1\":{\"455\":1,\"458\":2}}],[\"object\",{\"1\":{\"315\":2,\"458\":1,\"704\":1,\"706\":3,\"714\":3,\"940\":2,\"2946\":1,\"2947\":1,\"3592\":2,\"3692\":1,\"3694\":3,\"3702\":3,\"4171\":1,\"4172\":1,\"5087\":2}}],[\"osi\",{\"0\":{\"2138\":1,\"2231\":1,\"5191\":1},\"1\":{\"2139\":1,\"5192\":1}}],[\"ospf\",{\"1\":{\"2130\":3,\"2223\":3,\"5183\":3}}],[\"os\",{\"1\":{\"1074\":1,\"1183\":1,\"1242\":1,\"1351\":1,\"1410\":1,\"1519\":1,\"1578\":1,\"1687\":1,\"4456\":1,\"4565\":1}}],[\"o处理完毕时\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"o请求时\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"o\",{\"0\":{\"1049\":1,\"1217\":1,\"1385\":1,\"1553\":1,\"4431\":1,\"5467\":1},\"1\":{\"625\":2,\"626\":1,\"641\":1,\"1050\":1,\"1056\":1,\"1070\":3,\"1108\":1,\"1218\":1,\"1224\":1,\"1238\":3,\"1276\":1,\"1386\":1,\"1392\":1,\"1406\":3,\"1444\":1,\"1554\":1,\"1560\":1,\"1574\":3,\"1612\":1,\"2264\":1,\"2598\":3,\"2663\":1,\"2993\":4,\"3629\":1,\"4218\":4,\"4432\":1,\"4438\":1,\"4452\":3,\"4490\":1,\"4597\":1,\"4931\":3,\"4996\":1}}],[\"or\",{\"1\":{\"2359\":2,\"2959\":2,\"4184\":2,\"4692\":2}}],[\"oriented\",{\"1\":{\"722\":1,\"3710\":1}}],[\"oracle\",{\"1\":{\"619\":1,\"768\":1,\"3756\":1}}],[\"order\",{\"1\":{\"455\":2,\"2580\":1,\"4913\":1}}],[\"oom\",{\"1\":{\"2982\":1,\"3006\":1,\"3007\":1,\"3008\":1,\"4207\":1,\"4231\":1,\"4232\":1,\"4233\":1}}],[\"oop\",{\"1\":{\"589\":1,\"590\":1}}],[\"ood\",{\"1\":{\"576\":1}}],[\"over\",{\"1\":{\"589\":1,\"1888\":1,\"1903\":1,\"1918\":1,\"1931\":1,\"1944\":1,\"1959\":1,\"2191\":1,\"5150\":1,\"5162\":1,\"5173\":1,\"5244\":1}}],[\"overflow\",{\"1\":{\"480\":1}}],[\"override\",{\"1\":{\"215\":1,\"949\":1,\"3498\":1,\"5096\":1}}],[\"outofboundsmsg\",{\"1\":{\"484\":1}}],[\"out\",{\"1\":{\"263\":1,\"269\":2,\"406\":2,\"411\":3,\"424\":8,\"455\":3,\"630\":2,\"1042\":1,\"1093\":1,\"1210\":1,\"1261\":1,\"1378\":1,\"1429\":1,\"1546\":1,\"1597\":1,\"2674\":1,\"2914\":1,\"2925\":1,\"4139\":1,\"4150\":1,\"4424\":1,\"4475\":1,\"5007\":1}}],[\"offset\",{\"1\":{\"1093\":1,\"1261\":1,\"1429\":1,\"1597\":1,\"3115\":3,\"3116\":2,\"3118\":3,\"4475\":1,\"5366\":3,\"5367\":2,\"5369\":3}}],[\"off\",{\"1\":{\"1093\":1,\"1261\":1,\"1429\":1,\"1597\":1,\"4475\":1}}],[\"offer\",{\"1\":{\"450\":1,\"605\":1,\"630\":2}}],[\"of\",{\"1\":{\"215\":1,\"455\":3,\"458\":2,\"2193\":1,\"2674\":1,\"2959\":4,\"3498\":1,\"4184\":4,\"5007\":1,\"5246\":1}}],[\"实时记录用户数据\",{\"1\":{\"3103\":1,\"5354\":1}}],[\"实习生的日常工作安排\",{\"1\":{\"3068\":1,\"5319\":1}}],[\"实用性太差\",{\"1\":{\"2728\":1,\"5061\":1}}],[\"实际项目经验都是人工智能相关的\",{\"1\":{\"3080\":1,\"5331\":1}}],[\"实际项目是自学的\",{\"1\":{\"3080\":1,\"5331\":1}}],[\"实际调用的是\",{\"1\":{\"715\":1,\"3703\":1}}],[\"实际会调用到实现invocationhandler\",{\"1\":{\"707\":1,\"3695\":1}}],[\"实际应用场景非常非常少\",{\"1\":{\"693\":1,\"3681\":1}}],[\"实际上调用这两个方法的时候\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"实际上域名最后还有一个点\",{\"1\":{\"2203\":1,\"5256\":1}}],[\"实际上这是一个非常具有误导性质的说法\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"实际上最后就会使用到\",{\"1\":{\"1110\":1,\"1278\":1,\"1446\":1,\"1614\":1,\"4492\":1}}],[\"实际上\",{\"1\":{\"562\":1,\"575\":1,\"588\":1,\"2720\":1,\"5053\":1}}],[\"实际的文章内容\",{\"1\":{\"22\":1,\"3310\":1}}],[\"实现思路\",{\"1\":{\"3169\":1,\"5420\":1}}],[\"实现热数据的计算\",{\"1\":{\"3104\":1,\"5355\":1}}],[\"实现热部署的方式\",{\"0\":{\"844\":1,\"3832\":1}}],[\"实现app后端\",{\"1\":{\"3100\":1,\"5351\":1}}],[\"实现服务注册中的api请求路由\",{\"1\":{\"3099\":1,\"5350\":1}}],[\"实现共享状态的传播\",{\"1\":{\"2827\":1,\"4052\":1}}],[\"实现的\",{\"1\":{\"2737\":2,\"2738\":2,\"2831\":1,\"3962\":2,\"3963\":2,\"4056\":1}}],[\"实现的时候\",{\"1\":{\"469\":1}}],[\"实现一致性读\",{\"1\":{\"2422\":1,\"4755\":1}}],[\"实现成\",{\"1\":{\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"4554\":1}}],[\"实现方案相比\",{\"1\":{\"1123\":1,\"1291\":1,\"1459\":1,\"1627\":1,\"4505\":1}}],[\"实现自定义插件\",{\"1\":{\"892\":1,\"3880\":1}}],[\"实现全局异常处理\",{\"0\":{\"830\":1,\"3818\":1}}],[\"实现类\",{\"1\":{\"691\":1,\"694\":1,\"3679\":1,\"3682\":1}}],[\"实现较复杂\",{\"1\":{\"674\":1,\"3662\":1}}],[\"实现代码如下\",{\"1\":{\"672\":1,\"3660\":1}}],[\"实现\",{\"1\":{\"542\":1,\"575\":1,\"606\":1,\"895\":1,\"2279\":1,\"3177\":1,\"3883\":1,\"4612\":1,\"5428\":1}}],[\"实现语句是\",{\"1\":{\"459\":1}}],[\"实现原理与hashmap类似\",{\"1\":{\"388\":1}}],[\"实现原理上\",{\"1\":{\"339\":1,\"440\":1}}],[\"实现了自媒体管理员登录功能\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"实现了用户通过app端登录功能\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性\",{\"1\":{\"1779\":1,\"4339\":1}}],[\"实现了某个接口\",{\"1\":{\"723\":1,\"3711\":1}}],[\"实现了\",{\"1\":{\"704\":1,\"2246\":1,\"2609\":1,\"2744\":1,\"3692\":1,\"3969\":1,\"4579\":1,\"4942\":1}}],[\"实现了map接口\",{\"1\":{\"388\":1}}],[\"实现了优先级队列\",{\"1\":{\"356\":1}}],[\"实现了双亲委派机制\",{\"1\":{\"212\":1,\"3495\":1}}],[\"实例化\",{\"1\":{\"726\":1,\"3714\":1}}],[\"实例化对象\",{\"1\":{\"325\":1,\"3602\":1}}],[\"实例\",{\"1\":{\"304\":1,\"3581\":1}}],[\"实例会在试图亲自查找类或资源之前\",{\"1\":{\"223\":1,\"3506\":1}}],[\"用着也还行\",{\"1\":{\"5166\":1}}],[\"用了缓存的\",{\"1\":{\"1879\":1,\"3956\":1}}],[\"用来做流量控制\",{\"1\":{\"2036\":1}}],[\"用来解决乱序问题等\",{\"1\":{\"2035\":1}}],[\"用来解决丢包的问题\",{\"1\":{\"2016\":1}}],[\"用来解决网络包乱序问题\",{\"1\":{\"2015\":1}}],[\"用来保证集群中存在过半的机器能够和\",{\"1\":{\"1782\":1,\"4342\":1}}],[\"用来衡量hashmap满的程度\",{\"1\":{\"398\":1}}],[\"用套接字中的相关函数来完成通信过程\",{\"1\":{\"1047\":1,\"1215\":1,\"1383\":1,\"1551\":1,\"4429\":1}}],[\"用\",{\"1\":{\"542\":1}}],[\"用法上\",{\"1\":{\"339\":1}}],[\"用算法描述中的术语\",{\"1\":{\"334\":1}}],[\"用于完成某个功能的一个过程\",{\"1\":{\"2795\":1,\"4020\":1}}],[\"用于判断内存中某个值是否为预期值\",{\"1\":{\"2778\":1,\"4003\":1}}],[\"用于保证可靠性和流量控制维护的某些状态信息\",{\"1\":{\"2032\":1}}],[\"用于处理连接的响应事件\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4559\":1}}],[\"用于多进程对共享数据的访问\",{\"1\":{\"1045\":1,\"1213\":1,\"1381\":1,\"1549\":1,\"4427\":1}}],[\"用于通知接收进程某个事件已经发生\",{\"1\":{\"1043\":1,\"1211\":1,\"1379\":1,\"1547\":1,\"4425\":1}}],[\"用于具有亲缘关系的父子进程间或者兄弟进程之间的通信\",{\"1\":{\"1041\":1,\"1209\":1,\"1377\":1,\"1545\":1,\"4423\":1}}],[\"用于等待多个线程到达某个点再一起继续执行\",{\"1\":{\"1033\":1,\"1201\":1,\"1369\":1,\"1537\":1,\"4415\":1}}],[\"用于唯一标记一个消息\",{\"1\":{\"979\":1,\"5126\":1}}],[\"用于获取enableautoconfiguration注解中的\",{\"1\":{\"819\":1,\"3807\":1}}],[\"用于调用原始方法\",{\"1\":{\"714\":1,\"3702\":1}}],[\"用于拦截增强被代理类的方法\",{\"1\":{\"713\":1,\"3701\":1}}],[\"用于加载代理对象\",{\"1\":{\"704\":1,\"3692\":1}}],[\"用于统计类加载器相关的信息\",{\"1\":{\"227\":1,\"3510\":1}}],[\"用于实现类加载过程中的加载这一步\",{\"1\":{\"197\":1,\"3480\":1}}],[\"用户登录时\",{\"1\":{\"3264\":1}}],[\"用户登录成功\",{\"1\":{\"3141\":1,\"5392\":1}}],[\"用户密码\",{\"1\":{\"3261\":1}}],[\"用户输入的密码\",{\"1\":{\"3267\":1}}],[\"用户输入\",{\"1\":{\"3259\":1,\"3265\":1}}],[\"用户注册时\",{\"1\":{\"3258\":1}}],[\"用户的密码也不会被泄漏\",{\"1\":{\"3232\":1,\"3237\":1}}],[\"用户的密码就被泄漏了\",{\"1\":{\"3226\":1,\"3231\":1}}],[\"用户再次进入网关开始访问\",{\"1\":{\"3142\":1,\"5393\":1}}],[\"用户以后每次向后端发请求都在\",{\"1\":{\"3131\":1,\"5382\":1}}],[\"用户进入网关开始登陆\",{\"1\":{\"3129\":1,\"3140\":1,\"5380\":1,\"5391\":1}}],[\"用户向服务器发送用户名\",{\"1\":{\"3129\":1,\"5380\":1}}],[\"用户向服务器发送请求\",{\"1\":{\"733\":1,\"3721\":1}}],[\"用户历史记录功能\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"用户只能看到该事务创建\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"用户只能调用\",{\"1\":{\"606\":1}}],[\"用户\",{\"1\":{\"2484\":4,\"4817\":4}}],[\"用户消息通过\",{\"1\":{\"2030\":1}}],[\"用户是使用\",{\"1\":{\"1698\":1,\"4258\":1}}],[\"用户可以方便地创建和使用容器\",{\"1\":{\"1694\":1,\"4254\":1}}],[\"用户可通过覆写该方法\",{\"1\":{\"227\":1,\"3510\":1}}],[\"用户还可以加入自定义的类加载器来进行拓展\",{\"1\":{\"209\":1,\"3492\":1}}],[\"下午6\",{\"1\":{\"3068\":1,\"5319\":1}}],[\"下次我要是重启\",{\"1\":{\"975\":1,\"5122\":1}}],[\"下的\",{\"1\":{\"900\":1,\"3888\":1}}],[\"下的meta\",{\"1\":{\"823\":1,\"3811\":1}}],[\"下的所有\",{\"1\":{\"208\":1,\"3491\":1}}],[\"下图是它的总体架构图\",{\"1\":{\"1696\":1,\"4256\":1}}],[\"下图中的那些null节点才是叶子节点\",{\"1\":{\"648\":1,\"3636\":1}}],[\"下图展示的各种类加载器之间的层次关系被称为类加载器的\",{\"1\":{\"224\":1,\"3507\":1}}],[\"下面这张图可以加深你对线程池中各个参数的相互关系的理解\",{\"1\":{\"2969\":1,\"4194\":1}}],[\"下面的\",{\"1\":{\"2894\":1,\"4119\":1}}],[\"下面的内容整理自\",{\"1\":{\"2274\":1,\"4607\":1}}],[\"下面用一个小示例解释一下\",{\"1\":{\"2778\":1,\"4003\":1}}],[\"下面我先来介绍一下\",{\"1\":{\"1800\":1,\"4360\":1}}],[\"下面我们通过一段代码来看看局部性原理\",{\"1\":{\"1010\":1}}],[\"下面就谈一谈\",{\"1\":{\"1079\":1,\"1247\":1,\"1415\":1,\"1583\":1,\"4461\":1}}],[\"下面是几种常见的线程同步的方式\",{\"1\":{\"1029\":1,\"1197\":1,\"1365\":1,\"1533\":1,\"4411\":1}}],[\"下面举例来说明分配的效果\",{\"1\":{\"967\":1,\"5114\":1}}],[\"下面\",{\"1\":{\"596\":1}}],[\"下标越界异常\",{\"1\":{\"242\":1,\"3527\":1}}],[\"下一篇\",{\"1\":{\"17\":1,\"3305\":1}}],[\"以提升效率及节省成本\",{\"1\":{\"3107\":1,\"5358\":1}}],[\"以保证冷数据\",{\"1\":{\"3207\":1,\"5458\":1}}],[\"以保证用户热数据高扩展和高性能指标\",{\"1\":{\"3106\":1,\"5357\":1}}],[\"以保证上层数据查询的高性能\",{\"1\":{\"3105\":1,\"5356\":1}}],[\"以保证操作最大程度的独占性\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"以保证任意时间里只有一个线程在操作共享资源\",{\"1\":{\"1166\":1,\"1334\":1,\"1502\":1,\"1670\":1,\"4548\":1}}],[\"以降低短时间内大量锁请求\",{\"1\":{\"2769\":1,\"3994\":1}}],[\"以网络带宽资源\",{\"1\":{\"2576\":1,\"4909\":1}}],[\"以后\",{\"1\":{\"2573\":1,\"4906\":1}}],[\"以此实现非锁定读\",{\"1\":{\"2548\":1,\"4881\":1}}],[\"以\",{\"1\":{\"2358\":1,\"4691\":1}}],[\"以生成出一个最好的执行计划\",{\"1\":{\"2346\":1,\"4679\":1}}],[\"以单播的方式\",{\"1\":{\"2170\":1,\"5223\":1}}],[\"以前所有的代码都放在同一个工程中\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"以线程为例\",{\"1\":{\"1173\":1,\"1341\":1,\"1509\":1,\"1677\":1,\"4555\":1}}],[\"以免错失读写的机会\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"以上的隔离级别\",{\"1\":{\"2520\":1,\"4853\":1}}],[\"以上两个topic的情况\",{\"1\":{\"959\":1,\"5106\":1}}],[\"以上区别基于jdk1\",{\"1\":{\"552\":1}}],[\"以实现consumer之间的分区分配\",{\"1\":{\"944\":1,\"5091\":1}}],[\"以较小的那个为准\",{\"1\":{\"928\":1,\"5075\":1}}],[\"以及其他用户信息\",{\"1\":{\"3259\":1}}],[\"以及这些密码对应的md5值\",{\"1\":{\"3239\":1}}],[\"以及控制流速控制和熔断处理都是常用的架构手段\",{\"1\":{\"3099\":1,\"5350\":1}}],[\"以及\",{\"1\":{\"1692\":1,\"1704\":1,\"3210\":1,\"4252\":1,\"4264\":1,\"5461\":1}}],[\"以及actuator\",{\"1\":{\"871\":1,\"3859\":1}}],[\"以及被\",{\"1\":{\"206\":1,\"3489\":1}}],[\"以非事务方式运行\",{\"1\":{\"781\":1,\"782\":1,\"3769\":1,\"3770\":1}}],[\"以让新版本的开发者不再允许使用这个类\",{\"1\":{\"593\":1}}],[\"以下称为异常表\",{\"1\":{\"271\":1,\"3548\":1}}],[\"以满足自己的特殊需求\",{\"1\":{\"209\":1,\"3492\":1}}],[\"以便于告知方法调用者此方法有异常\",{\"1\":{\"254\":1,\"3539\":1}}],[\"以便\",{\"1\":{\"27\":1,\"3315\":1}}],[\"包的基石\",{\"1\":{\"2817\":1,\"4042\":1}}],[\"包头的\",{\"1\":{\"2091\":1}}],[\"包长度\",{\"1\":{\"2085\":2}}],[\"包总量较少的通信\",{\"1\":{\"2079\":1}}],[\"包之外该位必须设置为\",{\"1\":{\"2018\":1}}],[\"包传给接收端主机\",{\"1\":{\"2015\":1}}],[\"包装器设计模式\",{\"1\":{\"750\":1,\"3738\":1}}],[\"包括责任链\",{\"1\":{\"669\":1,\"3657\":1}}],[\"包括适配器\",{\"1\":{\"669\":1,\"3657\":1}}],[\"包括⼯⼚\",{\"1\":{\"669\":1,\"3657\":1}}],[\"包括\",{\"1\":{\"450\":1,\"734\":1,\"2032\":1,\"3722\":1}}],[\"包括运行时异常\",{\"1\":{\"251\":1,\"3536\":1}}],[\"包和类以及被\",{\"1\":{\"207\":1,\"3490\":1}}],[\"包和类\",{\"1\":{\"206\":1,\"208\":1,\"3489\":1,\"3491\":1}}],[\"包含三个东西\",{\"1\":{\"2033\":1}}],[\"包含\",{\"1\":{\"44\":1,\"3332\":1}}],[\"并用来生成输出文本\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"并从中获取用户相关信息\",{\"1\":{\"3132\":1,\"5383\":1}}],[\"并结合spring\",{\"1\":{\"3100\":1,\"5351\":1}}],[\"并调用其模板方法\",{\"1\":{\"2843\":1,\"4068\":1}}],[\"并重新计算想要修改的新值\",{\"1\":{\"2788\":1,\"4013\":1}}],[\"并重写指定的方法\",{\"1\":{\"2843\":1,\"4068\":1}}],[\"并重写\",{\"1\":{\"713\":1,\"3701\":1}}],[\"并撤销偏向锁\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"并把参数中的引号作为转义字符\",{\"1\":{\"2553\":1,\"4886\":1}}],[\"并提交了事务\",{\"1\":{\"2500\":1,\"2505\":1,\"4833\":1,\"4838\":1}}],[\"并允许数据重复和\",{\"1\":{\"2303\":1,\"4636\":1}}],[\"并检查查询分组的接收\",{\"1\":{\"2159\":1,\"5212\":1}}],[\"并将该节点设置为头结点\",{\"1\":{\"2827\":1,\"4052\":1}}],[\"并将其广播到所在的局域网中\",{\"1\":{\"2157\":1,\"5210\":1}}],[\"并将\",{\"1\":{\"2155\":1,\"5208\":1}}],[\"并将投票信息广播出去\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"并与其进行数据同步\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"并以一系列简单易用的接口提供给用户使用\",{\"1\":{\"1772\":1,\"4332\":1}}],[\"并解决网络服务差时带来的风险\",{\"1\":{\"1729\":1,\"4289\":1}}],[\"并有坚实的服务边界\",{\"1\":{\"1725\":1,\"4285\":1}}],[\"并有利于未来的可拓展性和可维护性\",{\"1\":{\"722\":1,\"3710\":1}}],[\"并通过镜像管理驱动\",{\"1\":{\"1701\":1,\"4261\":1}}],[\"并创建一个\",{\"1\":{\"1144\":1,\"1159\":1,\"1177\":1,\"1312\":1,\"1327\":1,\"1345\":1,\"1480\":1,\"1495\":1,\"1513\":1,\"1648\":1,\"1663\":1,\"1681\":1,\"4526\":1,\"4541\":1,\"4559\":1}}],[\"并发处理\",{\"1\":{\"3001\":1,\"4226\":1}}],[\"并发编程的艺术\",{\"1\":{\"2951\":1,\"4176\":1}}],[\"并发编程j\",{\"1\":{\"2817\":1,\"4042\":1}}],[\"并发包中的\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"并发访问共享资源\",{\"1\":{\"2826\":1,\"4051\":1}}],[\"并发访问数据库时\",{\"1\":{\"759\":1,\"3747\":1}}],[\"并发原语\",{\"1\":{\"2778\":1,\"4003\":1}}],[\"并发事务时可能发生的现象也会不同\",{\"1\":{\"2515\":1,\"4848\":1}}],[\"并发给本地\",{\"1\":{\"2213\":1,\"5266\":1}}],[\"并发送请求给后者\",{\"1\":{\"1698\":1,\"4258\":1}}],[\"并发\",{\"1\":{\"1073\":1,\"1241\":1,\"1409\":1,\"1577\":1,\"4455\":1}}],[\"并发多个进程\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"并发读写\",{\"1\":{\"934\":1,\"5081\":1}}],[\"并打开一个新文件\",{\"1\":{\"928\":1,\"5075\":1}}],[\"并做简单的配置即可\",{\"1\":{\"855\":1,\"3843\":1}}],[\"并在其\",{\"1\":{\"2020\":1}}],[\"并在自己的事务中运行\",{\"1\":{\"774\":1,\"3762\":1}}],[\"并在具体⼦⼯⼚中实现新加产品的创建\",{\"1\":{\"684\":1,\"3672\":1}}],[\"并处理相应的业务逻辑\",{\"1\":{\"730\":1,\"3718\":1}}],[\"并非\",{\"1\":{\"724\":1,\"3712\":1}}],[\"并加载到\",{\"1\":{\"691\":1,\"697\":1,\"3679\":1,\"3685\":1}}],[\"并没有收到它的\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"并没有严格的卡定某个平衡因子来维持绝对平衡\",{\"1\":{\"643\":1,\"3631\":1}}],[\"并没有做同步处理\",{\"1\":{\"510\":1}}],[\"并且双方都要保存好密钥\",{\"1\":{\"3285\":1}}],[\"并且在数学建模比赛中担任队长并获得了陕西省一等奖\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"并且在需要修改的时候拿到实例修改其参数即可\",{\"1\":{\"3012\":1,\"4237\":1}}],[\"并且不能接受数据丢失\",{\"1\":{\"3188\":1,\"5439\":1}}],[\"并且保持锁的时间段\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"并且将共享资源设置为锁定状态\",{\"1\":{\"2831\":1,\"4056\":1}}],[\"并且是\",{\"1\":{\"2817\":1,\"4042\":1}}],[\"并且是固定不变的\",{\"1\":{\"2067\":1}}],[\"并且当前标志是否等于预期标志\",{\"1\":{\"2807\":1,\"4032\":1}}],[\"并且原语的执行必须是连续的\",{\"1\":{\"2795\":1,\"4020\":1}}],[\"并且每个元素的值小于\",{\"1\":{\"2630\":1,\"4963\":1}}],[\"并且小数点要占用一个字节\",{\"1\":{\"2566\":1,\"4899\":1}}],[\"并且锁定记录本身\",{\"1\":{\"2458\":1,\"2468\":1,\"4791\":1,\"4801\":1}}],[\"并且主键不能为\",{\"1\":{\"2295\":1,\"4628\":1}}],[\"并且多数浏览器在2015年底就支持了\",{\"1\":{\"1887\":1,\"1902\":1,\"1917\":1,\"1930\":1,\"1943\":1,\"1958\":1,\"5149\":1,\"5172\":1}}],[\"并且多次监测没有恢复的迹象\",{\"1\":{\"1751\":1,\"4311\":1}}],[\"并且自己的\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"并且返回结果\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"并且父进程还得知道子进程要将数据发送给哪个客户端\",{\"1\":{\"1168\":1,\"1336\":1,\"1504\":1,\"1672\":1,\"4550\":1}}],[\"并且c0订阅t0\",{\"1\":{\"959\":1,\"5106\":1}}],[\"并且其缓存查询到的对象都是通过序列化或者反序列化克隆的\",{\"1\":{\"913\":1,\"3901\":1}}],[\"并且也不需要我们必须实现接口\",{\"1\":{\"696\":1,\"3684\":1}}],[\"并且可以不需要针对每个⽬标类都创建⼀个代理类\",{\"1\":{\"690\":1,\"3678\":1}}],[\"并且\",{\"1\":{\"564\":1,\"624\":1,\"2030\":1,\"2246\":1,\"2266\":1,\"2447\":1,\"2566\":1,\"2597\":1,\"2672\":1,\"4579\":1,\"4599\":1,\"4780\":1,\"4899\":1,\"4930\":1,\"5005\":1}}],[\"并且没有父级\",{\"1\":{\"206\":1,\"3489\":1}}],[\"并保持其输入顺序\",{\"1\":{\"440\":1}}],[\"并想其中put了一个元素\",{\"1\":{\"407\":1}}],[\"并维护了长度\",{\"1\":{\"339\":1}}],[\"并不存在互斥关系\",{\"1\":{\"2466\":1,\"4799\":1}}],[\"并不需要等语句执行后才释放\",{\"1\":{\"2441\":1,\"4774\":1}}],[\"并不冲突\",{\"1\":{\"2411\":1,\"4744\":1}}],[\"并不会使用\",{\"1\":{\"2522\":1,\"4855\":1}}],[\"并不会停止匹配\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"并不会一次性加载所有的类\",{\"1\":{\"202\":1,\"3485\":1}}],[\"并不清楚目的地的\",{\"1\":{\"2154\":1,\"5207\":1}}],[\"并不是存在\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"并不是彻底避免\",{\"1\":{\"2522\":1,\"4855\":1}}],[\"并不是一种单独的索引类型\",{\"1\":{\"2308\":1,\"2317\":1,\"4641\":1,\"4650\":1}}],[\"并不是\",{\"1\":{\"1877\":1,\"3954\":1}}],[\"并不对整个数据进行锁定\",{\"1\":{\"544\":1}}],[\"并不能直接交给底层操作系统去执行\",{\"1\":{\"180\":1,\"3463\":1}}],[\"n+1\",{\"1\":{\"2992\":1,\"4217\":1}}],[\"nginx\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4512\":1}}],[\"nio\",{\"1\":{\"1109\":1,\"1277\":1,\"1445\":1,\"1613\":1,\"4491\":1}}],[\"npe\",{\"1\":{\"800\":1,\"3788\":1}}],[\"nonfairsync\",{\"1\":{\"2746\":1,\"2748\":1,\"3971\":1,\"3973\":1}}],[\"none\",{\"1\":{\"972\":1,\"981\":2,\"2183\":1,\"5119\":1,\"5128\":2,\"5236\":1}}],[\"non\",{\"1\":{\"940\":1,\"2317\":1,\"4650\":1,\"5087\":1}}],[\"no\",{\"1\":{\"940\":1,\"2538\":1,\"2684\":1,\"4871\":1,\"5017\":1,\"5087\":1}}],[\"notify等方法\",{\"1\":{\"2921\":1,\"4146\":1}}],[\"notify等方法也依赖于monitor对象\",{\"1\":{\"2921\":1,\"4146\":1}}],[\"notify\",{\"1\":{\"1034\":1,\"1202\":1,\"1370\":1,\"1538\":1,\"4416\":1}}],[\"not\",{\"1\":{\"781\":1,\"3195\":1,\"3769\":1,\"5446\":1}}],[\"node\",{\"1\":{\"628\":1,\"2832\":1,\"2840\":3,\"4057\":1,\"4065\":3}}],[\"number\",{\"1\":{\"2538\":2,\"2959\":3,\"4184\":3,\"4871\":2}}],[\"numpartitionsperconsumer\",{\"1\":{\"949\":3,\"5096\":3}}],[\"numpartitionsfortopic\",{\"1\":{\"949\":5,\"5096\":5}}],[\"numpartitions\",{\"1\":{\"940\":3,\"5087\":3}}],[\"nummoved\",{\"1\":{\"492\":3,\"494\":3}}],[\"nullpointerexception\",{\"1\":{\"2959\":2,\"4184\":2}}],[\"null节点的父节点在红黑树里不将其看作叶子节点\",{\"1\":{\"648\":1,\"3636\":1}}],[\"null值\",{\"1\":{\"378\":1,\"379\":1}}],[\"null\",{\"1\":{\"206\":1,\"227\":4,\"263\":6,\"291\":1,\"492\":1,\"494\":1,\"673\":4,\"674\":1,\"940\":3,\"949\":1,\"2287\":1,\"2289\":1,\"2295\":1,\"2296\":1,\"2302\":1,\"2303\":1,\"2336\":4,\"2941\":2,\"2942\":1,\"2944\":1,\"2959\":6,\"3489\":1,\"3510\":4,\"3568\":1,\"3661\":4,\"3662\":1,\"4166\":2,\"4167\":1,\"4169\":1,\"4184\":6,\"4620\":1,\"4622\":1,\"4628\":1,\"4629\":1,\"4635\":1,\"4636\":1,\"4669\":4,\"5087\":3,\"5096\":1}}],[\"n为节点数\",{\"1\":{\"437\":1}}],[\"n为元素个数\",{\"1\":{\"367\":1}}],[\"n为数组内容长度\",{\"1\":{\"335\":1}}],[\"n\",{\"1\":{\"335\":1,\"336\":1,\"337\":1,\"341\":1,\"342\":1,\"344\":1,\"349\":1,\"350\":1,\"358\":2,\"359\":1,\"367\":1,\"437\":1,\"522\":1,\"528\":2,\"625\":1,\"630\":3,\"643\":2,\"657\":1,\"658\":1,\"949\":2,\"2598\":1,\"2992\":1,\"3611\":1,\"3617\":2,\"3631\":2,\"3645\":1,\"3646\":1,\"4217\":1,\"4931\":1,\"5096\":2}}],[\"next\",{\"0\":{\"2467\":1,\"4800\":1},\"1\":{\"2246\":1,\"2458\":1,\"2468\":1,\"2469\":1,\"2470\":3,\"2471\":2,\"2474\":1,\"2525\":3,\"2832\":1,\"2835\":1,\"4057\":1,\"4060\":1,\"4579\":1,\"4791\":1,\"4801\":1,\"4802\":1,\"4803\":3,\"4804\":2,\"4807\":1,\"4858\":3}}],[\"nextint\",{\"1\":{\"940\":1,\"5087\":1}}],[\"nextvalue\",{\"1\":{\"940\":5,\"5087\":5}}],[\"nested\",{\"1\":{\"784\":1,\"3772\":1}}],[\"never\",{\"1\":{\"782\":1,\"3770\":1}}],[\"netty\",{\"1\":{\"1129\":1,\"1297\":1,\"1465\":1,\"1633\":1,\"4511\":1}}],[\"networkdriver\",{\"1\":{\"1702\":1,\"1704\":1,\"4262\":1,\"4264\":1}}],[\"network\",{\"0\":{\"5470\":1},\"1\":{\"1074\":1,\"1183\":1,\"1242\":1,\"1351\":1,\"1410\":1,\"1519\":1,\"1578\":1,\"1687\":1,\"4456\":1,\"4565\":1}}],[\"net\",{\"1\":{\"326\":1,\"519\":1,\"548\":1,\"636\":1,\"886\":1,\"919\":1,\"972\":1,\"981\":1,\"995\":1,\"2554\":1,\"2733\":1,\"2749\":1,\"2911\":1,\"3288\":2,\"3520\":1,\"3603\":1,\"3608\":1,\"3874\":1,\"3907\":1,\"3974\":1,\"4136\":1,\"4887\":1,\"5066\":1,\"5119\":1,\"5128\":1,\"5142\":1}}],[\"newproxyinstance\",{\"1\":{\"703\":1,\"704\":1,\"707\":1,\"3691\":1,\"3692\":1,\"3695\":1}}],[\"newcapacity\",{\"1\":{\"469\":1,\"470\":1}}],[\"newinstance\",{\"1\":{\"297\":1,\"311\":1,\"312\":2,\"314\":2,\"315\":1,\"316\":1,\"3574\":1,\"3588\":1,\"3589\":2,\"3591\":2,\"3592\":1,\"3593\":1}}],[\"new\",{\"1\":{\"258\":1,\"261\":2,\"263\":2,\"269\":1,\"286\":1,\"289\":1,\"291\":2,\"305\":1,\"406\":1,\"411\":3,\"424\":1,\"455\":1,\"476\":2,\"480\":1,\"484\":1,\"494\":1,\"566\":1,\"573\":1,\"597\":1,\"600\":2,\"628\":1,\"630\":2,\"669\":1,\"673\":2,\"780\":1,\"793\":3,\"940\":1,\"949\":2,\"1020\":1,\"1188\":1,\"1356\":1,\"1524\":1,\"2748\":2,\"2957\":14,\"2959\":5,\"3543\":1,\"3546\":2,\"3563\":1,\"3566\":1,\"3568\":2,\"3582\":1,\"3657\":1,\"3661\":2,\"3768\":1,\"3781\":3,\"3973\":2,\"4182\":14,\"4184\":5,\"4402\":1,\"5087\":1,\"5096\":2}}],[\"nacos作为项目中的注册中心和配置中心\",{\"1\":{\"3101\":1,\"5352\":1}}],[\"nacos\",{\"1\":{\"1834\":1,\"4394\":1}}],[\"nanotime\",{\"1\":{\"227\":2,\"3510\":2}}],[\"named\",{\"1\":{\"1042\":1,\"1210\":1,\"1378\":1,\"1546\":1,\"4424\":1}}],[\"namespace\",{\"1\":{\"900\":2,\"1692\":1,\"3888\":2,\"4252\":1}}],[\"name\",{\"1\":{\"212\":2,\"213\":1,\"215\":1,\"216\":2,\"227\":6,\"319\":2,\"321\":2,\"2327\":2,\"2350\":2,\"3495\":2,\"3496\":1,\"3498\":1,\"3499\":2,\"3510\":6,\"3596\":2,\"3598\":2,\"4660\":2,\"4683\":2}}],[\"native\",{\"1\":{\"179\":1,\"180\":1,\"3462\":1,\"3463\":1}}],[\"通信双方的主机之间就可以相互交换\",{\"1\":{\"2021\":1}}],[\"通知\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"通篇全文下来大家也可以看到\",{\"1\":{\"814\":1,\"3802\":1}}],[\"通常是因为缓存中的那份数据已经过期\",{\"1\":{\"2710\":1,\"2717\":1,\"2731\":1,\"5043\":1,\"5050\":1,\"5064\":1}}],[\"通常子查询的结果集会被存储到临时表中\",{\"1\":{\"2581\":1,\"4914\":1}}],[\"通常子查询在\",{\"1\":{\"2580\":1,\"4913\":1}}],[\"通常使用搜索引擎如\",{\"1\":{\"2281\":1,\"2282\":1,\"2292\":1,\"4614\":1,\"4615\":1,\"4625\":1}}],[\"通常情况下\",{\"1\":{\"2249\":1,\"2936\":1,\"4161\":1,\"4582\":1}}],[\"通常情况下也不会用到该级别\",{\"1\":{\"772\":1,\"3760\":1}}],[\"通常被用于实现诸如数据发布\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"通常被有经验的⾯向对象的软件开发⼈员所采⽤\",{\"1\":{\"667\":1,\"3655\":1}}],[\"通常不会犯糊涂\",{\"1\":{\"583\":1}}],[\"通常表示为\",{\"1\":{\"206\":1,\"3489\":1}}],[\"通过互斥来保证数据的一致性\",{\"1\":{\"3193\":1,\"5444\":1}}],[\"通过偏移量\",{\"1\":{\"3115\":1,\"5366\":1}}],[\"通过kafkastream流式计算最新的数据\",{\"1\":{\"3103\":1,\"5354\":1}}],[\"通过key的hash对分区取模\",{\"1\":{\"940\":1,\"5087\":1}}],[\"通过用户的行为\",{\"1\":{\"3103\":1,\"5354\":1}}],[\"通过threadpoolexecutor构造函数来创建\",{\"1\":{\"2956\":1,\"4181\":1}}],[\"通过重复利用已创建的线程降低线程创建和销毁造成的消耗\",{\"1\":{\"2952\":1,\"4177\":1}}],[\"通过上面这些内容\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"通过该\",{\"1\":{\"2927\":1,\"4152\":1}}],[\"通过实现不同的方法\",{\"1\":{\"2897\":1,\"4122\":1}}],[\"通过实例化对象获取该实例的\",{\"1\":{\"304\":1,\"3581\":1}}],[\"通过线程创建节点加入同步队列的队尾\",{\"1\":{\"2839\":1,\"4064\":1}}],[\"通过自旋方式来获取锁\",{\"1\":{\"2761\":1,\"3986\":1}}],[\"通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中\",{\"1\":{\"2698\":1,\"5031\":1}}],[\"通过数据行的\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"通过加读写锁的方式来避免并行访问\",{\"1\":{\"2528\":1,\"4861\":1}}],[\"通过二级索引\",{\"1\":{\"2299\":1,\"4632\":1}}],[\"通过哈希算法\",{\"1\":{\"2265\":1,\"4598\":1}}],[\"通过键\",{\"1\":{\"2264\":1,\"4597\":1}}],[\"通过其\",{\"1\":{\"1797\":1,\"4357\":1}}],[\"通过feign以及java的动态代理机制\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"通过spring\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"通过网络管理驱动\",{\"1\":{\"1702\":1,\"4262\":1}}],[\"通过使用\",{\"1\":{\"1089\":1,\"1257\":1,\"1425\":1,\"1593\":1,\"4471\":1}}],[\"通过回调函数内核会将其加入到这个就绪事件列表中\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"通过两个方面\",{\"1\":{\"1055\":1,\"1223\":1,\"1391\":1,\"1559\":1,\"4437\":1}}],[\"通过通知操作的方式来保持多线程同步\",{\"1\":{\"1034\":1,\"1202\":1,\"1370\":1,\"1538\":1,\"4416\":1}}],[\"通过count来进行查询总条数的限制\",{\"1\":{\"884\":1,\"3872\":1}}],[\"通过class对象调用\",{\"1\":{\"316\":1,\"3593\":1}}],[\"通过page对象作为分页依据\",{\"1\":{\"883\":1,\"3871\":1}}],[\"通过这种依赖关系\",{\"1\":{\"845\":1,\"3833\":1}}],[\"通过继承方式实现代理\",{\"1\":{\"711\":1,\"3699\":1}}],[\"通过类之间不同通信⽅式实现不同⾏为\",{\"1\":{\"669\":1,\"3657\":1}}],[\"通过类和接⼝间的继承和引⽤实现创建复杂结构的对象\",{\"1\":{\"669\":1,\"3657\":1}}],[\"通过类的全限定名获取该类的\",{\"1\":{\"306\":1,\"3583\":1}}],[\"通过任意一条从根到叶子简单路径上颜色的约束\",{\"1\":{\"645\":1,\"3633\":1}}],[\"通过比较其他方法\",{\"1\":{\"497\":1}}],[\"通过构造器去实例化对象\",{\"1\":{\"316\":1,\"3593\":1}}],[\"通过反射消除工厂中的多个分支\",{\"1\":{\"325\":1,\"3602\":1}}],[\"通过反射构造一个类的实例方式有2种\",{\"1\":{\"310\":1,\"3587\":1}}],[\"通过反射\",{\"1\":{\"295\":1,\"3572\":1}}],[\"通过\",{\"1\":{\"31\":1,\"40\":1,\"312\":1,\"315\":1,\"816\":2,\"850\":1,\"1056\":1,\"1100\":1,\"1163\":1,\"1224\":1,\"1268\":1,\"1331\":1,\"1392\":1,\"1436\":1,\"1499\":1,\"1560\":1,\"1604\":1,\"1667\":1,\"1795\":1,\"2015\":1,\"2755\":1,\"2915\":1,\"2977\":1,\"2994\":1,\"3319\":1,\"3328\":1,\"3589\":1,\"3592\":1,\"3804\":2,\"3838\":1,\"3980\":1,\"4140\":1,\"4202\":1,\"4219\":1,\"4355\":1,\"4438\":1,\"4482\":1,\"4545\":1}}],[\"由inheritablethreadlocal类维护\",{\"1\":{\"2941\":1,\"4166\":1}}],[\"由threadlocal类维护\",{\"1\":{\"2941\":1,\"4166\":1}}],[\"由objectmonitor实现的\",{\"1\":{\"2920\":1,\"4145\":1}}],[\"由操作系统保证原子性\",{\"1\":{\"2816\":1,\"4041\":1}}],[\"由操作系统硬件来保证\",{\"1\":{\"2795\":1,\"4020\":1}}],[\"由操作系统来负责线程间的调度和线程的状态变更\",{\"1\":{\"2767\":1,\"3992\":1}}],[\"由proxy代理实例去完成真正的远程访问\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"由自己创建⼀个静态变量存储实例\",{\"1\":{\"671\":1,\"3659\":1}}],[\"由于图片存储到oss中\",{\"1\":{\"3160\":1,\"5411\":1}}],[\"由于队列永远不会被放满\",{\"1\":{\"2981\":1,\"4206\":1}}],[\"由于之前没有释放锁\",{\"1\":{\"2757\":1,\"3982\":1}}],[\"由于子查询会产生大量的临时表也没有索引\",{\"1\":{\"2581\":1,\"4914\":1}}],[\"由于在对记录加独占锁前\",{\"1\":{\"2428\":1,\"4761\":1}}],[\"由于目标接口与主机\",{\"1\":{\"2169\":1,\"5222\":1}}],[\"由于协议是\",{\"1\":{\"1795\":1,\"4355\":1}}],[\"由于微服务是分布式服务\",{\"1\":{\"1723\":1,\"4283\":1}}],[\"由于隔离的进程独立于宿主和其它的隔离的进程\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"由于红黑树的每次操作平均要旋转一次和变换颜色\",{\"1\":{\"658\":1,\"3646\":1}}],[\"由于\",{\"1\":{\"612\":1,\"2075\":1,\"2078\":1,\"2192\":1,\"2193\":1,\"2567\":1,\"4900\":1,\"5245\":1,\"5246\":1}}],[\"由开发者再做选择\",{\"1\":{\"607\":1}}],[\"由\",{\"1\":{\"206\":1,\"1087\":1,\"1255\":1,\"1423\":1,\"1591\":1,\"2034\":1,\"3489\":1,\"4469\":1}}],[\"启动两台heima\",{\"1\":{\"3191\":1,\"5442\":1}}],[\"启动事务时\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"启动发现集群没有处于\",{\"1\":{\"1803\":1,\"4363\":1}}],[\"启动了\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"启动时需要进行系统的\",{\"1\":{\"1800\":1,\"4360\":1}}],[\"启动项目\",{\"1\":{\"855\":1,\"3843\":1}}],[\"启动类加载器\",{\"1\":{\"206\":1,\"3489\":1}}],[\"启动的时候\",{\"1\":{\"202\":1,\"3485\":1}}],[\"bounds\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"boor\",{\"1\":{\"866\":1,\"3854\":1}}],[\"boot快速开发框架\",{\"1\":{\"3100\":1,\"5351\":1}}],[\"boot风格进行再封装屏蔽掉了复杂的配置和实现原理\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"boot的开发风格做到一键启动和部署\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"boot的开发便利性巧妙地简化了分布式系统基础设施的开发\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"boot的监控插件\",{\"1\":{\"878\":1,\"3866\":1}}],[\"boot的客户端工具\",{\"1\":{\"873\":1,\"3861\":1}}],[\"boot项目\",{\"1\":{\"876\":1,\"3864\":1}}],[\"boot项目的自动化配置\",{\"1\":{\"839\":1,\"3827\":1}}],[\"boot四大核心组件\",{\"0\":{\"870\":1,\"3858\":1}}],[\"boot提供的spring\",{\"1\":{\"856\":1,\"3844\":1}}],[\"boot自带监控组件\",{\"1\":{\"856\":1,\"3844\":1}}],[\"boot自动配置原理\",{\"0\":{\"815\":1,\"3803\":1}}],[\"boot<\",{\"1\":{\"846\":1,\"3834\":1}}],[\"bootstrap配置文件有以下几个应用场景\",{\"1\":{\"840\":1,\"3828\":1}}],[\"bootstrapclassloader\",{\"1\":{\"206\":1,\"231\":1,\"3489\":1,\"3514\":1}}],[\"boot\",{\"0\":{\"720\":1,\"826\":1,\"830\":1,\"857\":1,\"3708\":1,\"3814\":1,\"3818\":1,\"3845\":1},\"1\":{\"816\":2,\"817\":1,\"821\":3,\"823\":1,\"825\":1,\"845\":3,\"846\":1,\"855\":1,\"856\":1,\"858\":3,\"860\":1,\"861\":1,\"862\":1,\"863\":2,\"873\":1,\"3095\":1,\"3804\":2,\"3805\":1,\"3809\":3,\"3811\":1,\"3813\":1,\"3833\":3,\"3834\":1,\"3843\":1,\"3844\":1,\"3846\":3,\"3848\":1,\"3849\":1,\"3850\":1,\"3851\":2,\"3861\":1,\"5346\":1}}],[\"boolean\",{\"1\":{\"212\":1,\"216\":1,\"227\":1,\"2748\":2,\"3495\":1,\"3499\":1,\"3510\":1,\"3973\":2}}],[\"b=3\",{\"1\":{\"2788\":1,\"4013\":1}}],[\"bgsave\",{\"1\":{\"2647\":1,\"4980\":1}}],[\"bed128365216c019988915ed3add75fb\",{\"1\":{\"3248\":1}}],[\"bearer\",{\"1\":{\"3135\":1,\"5386\":1}}],[\"beans\",{\"1\":{\"856\":1,\"3844\":1}}],[\"bean加载情况\",{\"1\":{\"856\":1,\"3844\":1}}],[\"bean的生命周期\",{\"0\":{\"728\":1,\"3716\":1}}],[\"bean\",{\"1\":{\"679\":1,\"746\":1,\"748\":1,\"801\":1,\"809\":1,\"1764\":1,\"3667\":1,\"3734\":1,\"3736\":1,\"3789\":1,\"3797\":1,\"4324\":1}}],[\"beanfactory\",{\"1\":{\"679\":1,\"746\":1,\"3667\":1,\"3734\":1}}],[\"because\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"before\",{\"1\":{\"2959\":2,\"4184\":2}}],[\"before规则中的volatile变量规则规定了一个线程先去写一个volatile变量\",{\"1\":{\"2860\":1,\"4085\":1}}],[\"begin\",{\"1\":{\"2452\":1,\"4785\":1}}],[\"between\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"btree\",{\"1\":{\"2279\":2,\"4612\":2}}],[\"b+\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"b+树是多路平衡树\",{\"1\":{\"2314\":1,\"4647\":1}}],[\"b+树本身就是一颗多叉平衡树\",{\"1\":{\"2311\":1,\"4644\":1}}],[\"b+树的检索效率就很稳定了\",{\"1\":{\"2273\":1,\"4606\":1}}],[\"b+树的叶子节点有一条引用链指向与它相邻的叶子节点\",{\"1\":{\"2272\":1,\"4605\":1}}],[\"b+树只有叶子节点存放\",{\"1\":{\"2271\":1,\"4604\":1}}],[\"b+树两者有何异同呢\",{\"1\":{\"2270\":1,\"4603\":1}}],[\"b+树中的\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"b+树\",{\"1\":{\"2267\":1,\"2309\":1,\"2348\":1,\"4600\":1,\"4642\":1,\"4681\":1}}],[\"b+tree\",{\"1\":{\"2258\":1,\"2259\":1,\"2269\":1,\"2274\":1,\"2275\":2,\"2276\":1,\"2279\":1,\"4591\":1,\"4592\":1,\"4602\":1,\"4607\":1,\"4608\":2,\"4609\":1,\"4612\":1}}],[\"bus\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"buf\",{\"1\":{\"1082\":2,\"1250\":2,\"1418\":2,\"1586\":2,\"2597\":1,\"2651\":1,\"4464\":2,\"4930\":1,\"4984\":1}}],[\"bufferedreader\",{\"1\":{\"263\":2}}],[\"biz=mjm5njq5mti5oa==\",{\"1\":{\"3022\":1,\"4247\":1}}],[\"biz=mzaxnte2njeymw==\",{\"1\":{\"2877\":1,\"4102\":1}}],[\"biz=mzu0ote4mzyzmw==\",{\"1\":{\"2772\":1,\"3997\":1}}],[\"biz=mzg2ota0njk0oa==\",{\"1\":{\"831\":1,\"3819\":1}}],[\"bitmap\",{\"1\":{\"2591\":1,\"4924\":1}}],[\"bigint\",{\"1\":{\"2566\":1,\"4899\":1}}],[\"bing\",{\"0\":{\"5472\":1}}],[\"binlog\",{\"1\":{\"2445\":1,\"2446\":2,\"2447\":1,\"4778\":1,\"4779\":2,\"4780\":1}}],[\"binary\",{\"1\":{\"2187\":1,\"5240\":1}}],[\"bindingresult\",{\"1\":{\"740\":1,\"3728\":1}}],[\"b的成品创建又依赖于\",{\"1\":{\"801\":1,\"3789\":1}}],[\"b\",{\"1\":{\"793\":1,\"795\":4,\"801\":1,\"805\":1,\"806\":2,\"810\":1,\"2153\":1,\"2155\":1,\"2156\":2,\"2158\":2,\"2159\":1,\"2160\":2,\"2162\":1,\"2165\":1,\"2168\":3,\"2170\":1,\"2171\":1,\"2172\":1,\"2173\":1,\"2174\":2,\"2175\":1,\"2267\":1,\"2268\":5,\"2269\":1,\"2270\":1,\"2271\":1,\"2272\":1,\"2273\":1,\"2350\":1,\"2411\":1,\"2484\":6,\"2495\":3,\"2496\":1,\"2500\":2,\"2504\":2,\"2506\":1,\"2790\":1,\"2792\":1,\"2802\":1,\"3046\":1,\"3781\":1,\"3783\":4,\"3789\":1,\"3793\":1,\"3794\":2,\"3798\":1,\"4015\":1,\"4017\":1,\"4027\":1,\"4600\":1,\"4601\":5,\"4602\":1,\"4603\":1,\"4604\":1,\"4605\":1,\"4606\":1,\"4683\":1,\"4744\":1,\"4817\":6,\"4828\":3,\"4829\":1,\"4833\":2,\"4837\":2,\"4839\":1,\"5206\":1,\"5208\":1,\"5209\":2,\"5211\":2,\"5212\":1,\"5213\":2,\"5215\":1,\"5218\":1,\"5221\":3,\"5223\":1,\"5224\":1,\"5225\":1,\"5226\":1,\"5227\":2,\"5228\":1,\"5297\":1}}],[\"byte\",{\"1\":{\"940\":2,\"5087\":2}}],[\"by\",{\"1\":{\"455\":1,\"2580\":2,\"2959\":1,\"4184\":1,\"4913\":2}}],[\"blog\",{\"1\":{\"326\":1,\"519\":1,\"548\":1,\"621\":1,\"636\":1,\"886\":1,\"919\":1,\"972\":3,\"981\":5,\"995\":1,\"2554\":1,\"2733\":1,\"2749\":1,\"2911\":1,\"3288\":2,\"3520\":1,\"3603\":1,\"3608\":1,\"3874\":1,\"3907\":1,\"3974\":1,\"4136\":1,\"4887\":1,\"5066\":1,\"5119\":3,\"5128\":5,\"5142\":1}}],[\"blockingqueue<runnable>\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"blocking\",{\"1\":{\"2193\":2,\"5246\":2}}],[\"blocked\",{\"1\":{\"1023\":1,\"1191\":1,\"1359\":1,\"1527\":1,\"2959\":1,\"4184\":1,\"4405\":1}}],[\"block\",{\"1\":{\"263\":1}}],[\"broadcast\",{\"1\":{\"1779\":1,\"1785\":1,\"4339\":1,\"4345\":1}}],[\"broker\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"broker默认的消息保留策略是\",{\"1\":{\"925\":1,\"5072\":1}}],[\"break\",{\"1\":{\"263\":1}}],[\"br\",{\"1\":{\"263\":9}}],[\"balanced\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"balance机制\",{\"1\":{\"975\":1,\"5122\":1}}],[\"baidulandingword~default\",{\"1\":{\"972\":1,\"5119\":1}}],[\"batch\",{\"1\":{\"915\":1,\"3903\":1}}],[\"baddotrobot\",{\"1\":{\"621\":1}}],[\"backlog\",{\"0\":{\"2122\":1},\"1\":{\"2007\":1}}],[\"backward\",{\"1\":{\"592\":1}}],[\"backing\",{\"1\":{\"455\":1}}],[\"baz\",{\"0\":{\"162\":1,\"3445\":1},\"1\":{\"142\":1,\"160\":1,\"3430\":1,\"3443\":1}}],[\"barrier来说\",{\"1\":{\"2864\":1,\"2865\":1,\"4089\":1,\"4090\":1}}],[\"barrier即读屏障和写屏障\",{\"1\":{\"2863\":1,\"4088\":1}}],[\"barrier\",{\"1\":{\"1033\":1,\"1201\":1,\"1369\":1,\"1537\":1,\"2863\":1,\"2864\":1,\"2865\":1,\"4088\":1,\"4089\":1,\"4090\":1,\"4415\":1}}],[\"bar\",{\"0\":{\"141\":1,\"156\":1,\"3429\":1,\"3439\":1},\"1\":{\"158\":1,\"3441\":1}}],[\"相等则表示密码正确\",{\"1\":{\"3269\":1}}],[\"相等就不添加\",{\"1\":{\"380\":1}}],[\"相当的安全性\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"相反\",{\"1\":{\"1846\":1,\"3923\":1}}],[\"相反的\",{\"1\":{\"1013\":1}}],[\"相信大家在\",{\"1\":{\"576\":1}}],[\"相比效率上存在天然的劣势\",{\"1\":{\"5162\":1}}],[\"相比普通索引建立的数据更小\",{\"1\":{\"2304\":1,\"4637\":1}}],[\"相比\",{\"1\":{\"2259\":1,\"2276\":1,\"4592\":1,\"4609\":1}}],[\"相比于\",{\"1\":{\"2596\":1,\"4929\":1}}],[\"相比于非聚簇索引\",{\"1\":{\"2311\":1,\"4644\":1}}],[\"相比于之前rangeassignor的分配策略\",{\"1\":{\"959\":1,\"5106\":1}}],[\"相比于静态代理来说\",{\"1\":{\"696\":1,\"3684\":1}}],[\"相比vector来说\",{\"1\":{\"464\":1}}],[\"相比treemap效率更高\",{\"1\":{\"440\":1}}],[\"相同的\",{\"1\":{\"900\":1,\"3888\":1}}],[\"相同的类文件被不同的类加载器加载产生的是两个不同的类\",{\"1\":{\"234\":1,\"3517\":1}}],[\"相同二进制名称的类只会被加载一次\",{\"1\":{\"203\":1,\"3486\":1}}],[\"相关的方法\",{\"1\":{\"2796\":1,\"4021\":1}}],[\"相关的接口作用\",{\"1\":{\"1058\":1,\"1226\":1,\"1394\":1,\"1562\":1,\"4440\":1}}],[\"相关问题\",{\"1\":{\"2677\":1,\"5010\":1}}],[\"相关代码如下所示\",{\"1\":{\"226\":1,\"3509\":1}}],[\"相关信息\",{\"1\":{\"32\":1,\"328\":1,\"330\":1,\"414\":1,\"428\":1,\"467\":1,\"496\":1,\"500\":1,\"503\":1,\"1007\":1,\"3320\":1}}],[\"系统通过用户名找到与之对应的\",{\"1\":{\"3266\":1}}],[\"系统将\",{\"1\":{\"3261\":1,\"3267\":1}}],[\"系统为用户生成\",{\"1\":{\"3260\":1}}],[\"系统会用大部分的时间来处理\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"系统会首先判断当前类是否被加载过\",{\"1\":{\"203\":1,\"230\":1,\"3486\":1,\"3513\":1}}],[\"系统直接提供了一些函数用于对文件和设备进行访问和控制\",{\"1\":{\"2661\":1,\"4994\":1}}],[\"系统内核缓存区的数据还未同步\",{\"1\":{\"2652\":1,\"4985\":1}}],[\"系统中查看\",{\"0\":{\"2096\":1},\"1\":{\"1981\":1}}],[\"系统中的某个节点在进行写操作\",{\"1\":{\"1835\":1,\"4395\":1}}],[\"系统在绝大部分时候所处的状态\",{\"1\":{\"1837\":1,\"4397\":1}}],[\"系统支持\",{\"1\":{\"1110\":1,\"1278\":1,\"1446\":1,\"1614\":1,\"4492\":1}}],[\"系统调用再做一遍解释\",{\"1\":{\"2662\":1,\"4995\":1}}],[\"系统调用\",{\"1\":{\"1110\":1,\"1278\":1,\"1446\":1,\"1614\":1,\"2657\":1,\"2658\":1,\"2661\":1,\"4492\":1,\"4990\":1,\"4991\":1,\"4994\":1}}],[\"系统调用的过程发生了点变化\",{\"1\":{\"1099\":1,\"1267\":1,\"1435\":1,\"1603\":1,\"4481\":1}}],[\"系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里\",{\"1\":{\"1081\":1,\"1249\":1,\"1417\":1,\"1585\":1,\"4463\":1}}],[\"系统调用函数会直接把内核缓冲区里的数据\",{\"1\":{\"1083\":1,\"1251\":1,\"1419\":1,\"1587\":1,\"4465\":1}}],[\"系统调用函数\",{\"1\":{\"1081\":1,\"1110\":1,\"1249\":1,\"1278\":1,\"1417\":1,\"1446\":1,\"1585\":1,\"1614\":1,\"4463\":1,\"4492\":1}}],[\"系统调用也是有一定的开销的的\",{\"1\":{\"1071\":1,\"1239\":1,\"1407\":1,\"1575\":1,\"4453\":1}}],[\"系统变量所指定的路径下的所有类\",{\"1\":{\"207\":1,\"3490\":1}}],[\"系统加载\",{\"1\":{\"193\":1,\"3476\":1}}],[\"在数据传送前\",{\"1\":{\"3285\":1}}],[\"在数据库中存储文件会严重影响数据库性能\",{\"1\":{\"2559\":1,\"4892\":1}}],[\"在大多数对称算法中\",{\"1\":{\"3277\":1}}],[\"在大多数情况下\",{\"1\":{\"2350\":1,\"4683\":1}}],[\"在密码学的应用和研究中\",{\"1\":{\"3274\":1}}],[\"在计算机信息安全领域\",{\"1\":{\"3274\":1}}],[\"在计算时不会丢失精度\",{\"1\":{\"2566\":1,\"4899\":1}}],[\"在当时计算机的计算能力下\",{\"1\":{\"3221\":1}}],[\"在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"在添加zset数据的时候\",{\"1\":{\"3175\":1,\"5426\":1}}],[\"在添加和删除元素时具有比arraylist更好的性能\",{\"1\":{\"446\":1}}],[\"在文章审核成功以后需要在app的article库中新增文章数据\",{\"1\":{\"3163\":1,\"5414\":1}}],[\"在模板中\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"在网关微服务中新建全局过滤器\",{\"1\":{\"3148\":1,\"5399\":1}}],[\"在认证过滤器中需要用到jwt的解析\",{\"1\":{\"3146\":1,\"5397\":1}}],[\"在自媒体引导类中使用\",{\"1\":{\"3157\":1,\"5408\":1}}],[\"在自媒体端\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"在自动审核的方法上加上\",{\"1\":{\"3157\":1,\"5408\":1}}],[\"在自己的\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"在用户端\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"在那我俩喂喂喂了好几声\",{\"1\":{\"3065\":1,\"5316\":1}}],[\"在执行\",{\"1\":{\"2923\":1,\"4148\":1}}],[\"在执行monitorenter时\",{\"1\":{\"2922\":1,\"4147\":1}}],[\"在执行过程中不允许被中断\",{\"1\":{\"2795\":1,\"4020\":1}}],[\"在操作数据时非常乐观\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"在指令后插入store\",{\"1\":{\"2865\":1,\"4090\":1}}],[\"在指令前插入load\",{\"1\":{\"2864\":1,\"4089\":1}}],[\"在同步队列中的节点通过自旋的操作不断去获取同步状态\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"在同步队列中\",{\"1\":{\"2835\":1,\"4060\":1}}],[\"在同一连接上可以同时传输多个请求和响应\",{\"1\":{\"2186\":1,\"5239\":1}}],[\"在同一个事务中\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"在同一个子网内\",{\"1\":{\"2169\":1,\"5222\":1}}],[\"在同一个\",{\"1\":{\"898\":1,\"3886\":1}}],[\"在变量前加版本号\",{\"1\":{\"2804\":1,\"4029\":1}}],[\"在sun\",{\"1\":{\"2796\":1,\"4021\":1}}],[\"在spring程序main方法中\",{\"1\":{\"816\":1,\"3804\":1}}],[\"在线程1要提交更新之前\",{\"1\":{\"2784\":1,\"4009\":1}}],[\"在线程进入和退出同步块时不再通过\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"在轻量级锁状态下继续锁竞争\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"在位数组中把对应下标的值置为\",{\"1\":{\"2704\":1,\"5037\":1}}],[\"在键空间中\",{\"1\":{\"2682\":1,\"2687\":1,\"5015\":1,\"5020\":1}}],[\"在60秒\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"在300秒\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"在900秒\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"在拼接字符串之前会检查\",{\"1\":{\"2599\":1,\"4932\":1}}],[\"在多个事务对这条记录进行读写操作时\",{\"1\":{\"2512\":1,\"4845\":1}}],[\"在多线程并发的环境下\",{\"1\":{\"543\":1,\"544\":1}}],[\"在多线程的场景中可以直接使用vector类\",{\"1\":{\"473\":1}}],[\"在银行分别有\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"在此系统中\",{\"1\":{\"3279\":1}}],[\"在此期间会生成一个插入意向锁\",{\"1\":{\"2475\":1,\"4808\":1}}],[\"在此基础上\",{\"1\":{\"1833\":1,\"4393\":1}}],[\"在插入数据时\",{\"1\":{\"2434\":1,\"4767\":1}}],[\"在插件的拦截方法内拦截待执行的\",{\"1\":{\"892\":1,\"3880\":1}}],[\"在对表结构变更前\",{\"1\":{\"2416\":1,\"4749\":1}}],[\"在备份数据库时就要使用全局锁的方法\",{\"1\":{\"2382\":1,\"4715\":1}}],[\"在索引列上进行计算\",{\"1\":{\"2357\":1,\"4690\":1}}],[\"在索引检索的时候\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"在设计表的时候\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"在根据辅助索引查找时\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"在根据主索引搜索时\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"在业务代码中进行约束即可\",{\"1\":{\"2249\":1,\"4582\":1}}],[\"在并发编程中我们都知道i++操作是非线程安全的\",{\"1\":{\"2773\":1,\"3998\":1}}],[\"在并发写的时候\",{\"1\":{\"2243\":1,\"4576\":1}}],[\"在并发场景下\",{\"1\":{\"520\":1,\"3609\":1}}],[\"在域名中\",{\"1\":{\"2202\":1,\"5255\":1}}],[\"在一个事务内多次查询某个符合查询条件的\",{\"1\":{\"2502\":1,\"4835\":1}}],[\"在一个事务内多次读取同一个数据\",{\"1\":{\"2498\":1,\"4831\":1}}],[\"在一个局域网内\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"在一定程度上解决了队头阻塞\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"在其上实现热静态资源缓存\",{\"1\":{\"3205\":1,\"5456\":1}}],[\"在其基础上新增了很多功能比如加密\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"在其他语言中也有应用\",{\"1\":{\"724\":1,\"3712\":1}}],[\"在处理多个请求时更加高效\",{\"1\":{\"2186\":1,\"5239\":1}}],[\"在处理海量数据为什么这么快的原因之一\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4490\":1}}],[\"在请求大资源前的预热请求\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"在讨论\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"在该局域网内\",{\"1\":{\"2155\":1,\"5208\":1}}],[\"在建立连接时由计算机生成的随机数作为其初始值\",{\"1\":{\"2015\":1}}],[\"在空跑\",{\"1\":{\"1881\":1,\"3958\":1}}],[\"在理论计算机科学中\",{\"1\":{\"1824\":1,\"4384\":1}}],[\"在收到\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"在选举过程中会参与投票\",{\"1\":{\"1789\":1,\"4349\":1}}],[\"在介绍\",{\"1\":{\"1787\":1,\"4347\":1}}],[\"在解决分布式数据一致性问题时并没有直接使用\",{\"1\":{\"1785\":1,\"4345\":1}}],[\"在微服务启动时\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"在服务发生调用时\",{\"1\":{\"1760\":1,\"4320\":1}}],[\"在分布式系统\",{\"1\":{\"1755\":1,\"4315\":1}}],[\"在分布式服务或者微服务架构下\",{\"1\":{\"907\":1,\"3895\":1}}],[\"在面对瞬间高并发的场景时\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"4552\":1}}],[\"在前面我们知道\",{\"1\":{\"1081\":1,\"1249\":1,\"1417\":1,\"1585\":1,\"4463\":1}}],[\"在获取事件时\",{\"1\":{\"1053\":1,\"1221\":1,\"1389\":1,\"1557\":1,\"4435\":1}}],[\"在进程\",{\"1\":{\"1035\":1,\"1203\":1,\"1371\":1,\"1539\":1,\"4417\":1}}],[\"在每个volatile读操作的后面插入一个loadstore屏障\",{\"1\":{\"2872\":1,\"4097\":1}}],[\"在每个volatile读操作的后面插入一个loadload屏障\",{\"1\":{\"2871\":1,\"4096\":1}}],[\"在每个volatile写操作的后面插入一个storeload屏障\",{\"1\":{\"2870\":1,\"4095\":1}}],[\"在每个volatile写操作的前面插入一个storestore屏障\",{\"1\":{\"2869\":1,\"4094\":1}}],[\"在每个新的producer初始化时\",{\"1\":{\"979\":1,\"5126\":1}}],[\"在每次循环中都会用到\",{\"1\":{\"1012\":1}}],[\"在了解这部分知识之前\",{\"1\":{\"1006\":1}}],[\"在kafka中有一个partition\",{\"1\":{\"975\":1,\"5122\":1}}],[\"在broker往leader分区写入消息时\",{\"1\":{\"928\":1,\"5075\":1}}],[\"在任何时刻\",{\"1\":{\"926\":1,\"5073\":1}}],[\"在yml中添加以下代码\",{\"1\":{\"901\":1,\"3889\":1}}],[\"在配置文件中配置编写的插件\",{\"1\":{\"895\":1,\"3883\":1}}],[\"在使用\",{\"1\":{\"2380\":1,\"2419\":1,\"2420\":1,\"4713\":1,\"4752\":1,\"4753\":1}}],[\"在使用联合索引时\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"在使用之前需要引入`spring\",{\"1\":{\"855\":1,\"3843\":1}}],[\"在使用synchronizedlist进行遍历的时候要手动加锁\",{\"1\":{\"510\":1}}],[\"在方法上加\",{\"1\":{\"852\":1,\"3840\":1}}],[\"在方法中声明一个异常\",{\"1\":{\"254\":1,\"3539\":1}}],[\"在application\",{\"1\":{\"851\":1,\"3839\":1}}],[\"在发布它的第一个版本时没有这个功能\",{\"1\":{\"845\":1,\"3833\":1}}],[\"在补充对象的\",{\"1\":{\"806\":1,\"3794\":1}}],[\"在通过递归把\",{\"1\":{\"795\":1,\"3783\":1}}],[\"在创建半成品对象后存放到缓存中\",{\"1\":{\"805\":1,\"3793\":1}}],[\"在创建\",{\"1\":{\"795\":1,\"3783\":1}}],[\"在创建对象的同时隐藏创建逻辑\",{\"1\":{\"669\":1,\"3657\":1}}],[\"在填充属性\",{\"1\":{\"810\":1,\"3798\":1}}],[\"在填充\",{\"1\":{\"736\":1,\"3724\":1}}],[\"在实践中\",{\"1\":{\"634\":1}}],[\"在实际的工程应用上\",{\"1\":{\"620\":1}}],[\"在触发扩容的时候\",{\"1\":{\"625\":1}}],[\"在底层实现上\",{\"1\":{\"624\":1}}],[\"在上述实现中\",{\"1\":{\"601\":1}}],[\"在具体实践中\",{\"1\":{\"590\":1}}],[\"在真实的世界中\",{\"1\":{\"588\":1}}],[\"在这种饱和策略下\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"在这个时间差内\",{\"1\":{\"2857\":1,\"4082\":1}}],[\"在这个例子中\",{\"1\":{\"587\":1}}],[\"在这过程中如果事务\",{\"1\":{\"2500\":1,\"4833\":1}}],[\"在这里插入图片描述\",{\"1\":{\"829\":1,\"902\":1,\"904\":1,\"908\":1,\"918\":1,\"978\":1,\"1765\":1,\"3817\":1,\"3890\":1,\"3892\":1,\"3896\":1,\"3906\":1,\"4325\":1,\"5125\":1}}],[\"在这里\",{\"1\":{\"586\":1}}],[\"在\",{\"0\":{\"561\":1},\"1\":{\"572\":1,\"590\":1,\"599\":1,\"702\":1,\"712\":1,\"774\":1,\"1092\":1,\"1152\":1,\"1260\":1,\"1320\":1,\"1428\":1,\"1488\":1,\"1596\":1,\"1656\":1,\"1774\":1,\"1776\":1,\"1779\":1,\"1791\":1,\"1795\":1,\"1796\":1,\"1797\":1,\"2073\":1,\"2183\":1,\"2274\":1,\"2296\":1,\"2309\":1,\"2362\":1,\"2437\":1,\"2445\":1,\"2516\":1,\"2517\":1,\"2518\":1,\"2519\":1,\"2522\":1,\"2549\":1,\"2624\":1,\"2632\":1,\"2642\":1,\"2795\":1,\"2797\":1,\"2832\":1,\"2920\":1,\"3001\":1,\"3690\":1,\"3700\":1,\"3762\":1,\"4020\":1,\"4022\":1,\"4057\":1,\"4145\":1,\"4226\":1,\"4334\":1,\"4336\":1,\"4339\":1,\"4351\":1,\"4355\":1,\"4356\":1,\"4357\":1,\"4474\":1,\"4534\":1,\"4607\":1,\"4629\":1,\"4642\":1,\"4695\":1,\"4770\":1,\"4778\":1,\"4849\":1,\"4850\":1,\"4851\":1,\"4852\":1,\"4855\":1,\"4882\":1,\"4957\":1,\"4965\":1,\"4975\":1,\"5162\":1,\"5236\":1}}],[\"在jdk8及以后的版本中\",{\"1\":{\"547\":1}}],[\"在java语言中可以使用\",{\"1\":{\"2774\":1,\"3999\":1}}],[\"在java的set体系中\",{\"1\":{\"377\":1}}],[\"在java中\",{\"1\":{\"254\":1,\"3539\":1}}],[\"在我们的日常使用当中\",{\"1\":{\"544\":1}}],[\"在检索的时候效率差不多\",{\"1\":{\"526\":1,\"3615\":1}}],[\"在桶中元素量较小时没有这个必要\",{\"1\":{\"524\":1,\"3613\":1}}],[\"在锁定的对象区别上\",{\"1\":{\"508\":1}}],[\"在树平衡的情况下\",{\"1\":{\"437\":1}}],[\"在初始化hashmap的时候\",{\"1\":{\"415\":1}}],[\"在高并发的场景中\",{\"1\":{\"389\":1}}],[\"在不需要并发安全的场景中\",{\"1\":{\"389\":1}}],[\"在hashmap中\",{\"1\":{\"389\":1,\"420\":1}}],[\"在hashset中\",{\"1\":{\"380\":1}}],[\"在内存地址v中存储着变量值为\",{\"1\":{\"2780\":1,\"4005\":1}}],[\"在内存中生成一个代表该类的\",{\"1\":{\"200\":1,\"3483\":1}}],[\"在内部\",{\"1\":{\"2533\":1,\"4866\":1}}],[\"在内部实现中\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"在内部实现上\",{\"1\":{\"366\":1}}],[\"在内核中是两个完全独立的软件模块\",{\"1\":{\"2090\":1}}],[\"在内核里使用红黑树来跟踪进程所有待检测的文件描述字\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"在中间插入\",{\"1\":{\"344\":1}}],[\"在两端添加\",{\"1\":{\"343\":1,\"349\":1}}],[\"在运行时构造一个类的实例化对象\",{\"1\":{\"300\":1,\"3577\":1}}],[\"在运行时获取一个类的所有信息\",{\"1\":{\"300\":1,\"3577\":1}}],[\"在运行时获取一个类的\",{\"1\":{\"300\":1,\"3577\":1}}],[\"在父类加载器没有找到所请求的类的情况下\",{\"1\":{\"228\":1,\"3511\":1}}],[\"在加载时调用\",{\"1\":{\"212\":1,\"3495\":1}}],[\"在类加载的时候\",{\"1\":{\"203\":1,\"230\":1,\"3486\":1,\"3513\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"8\":1,\"3296\":1}}],[\"到备库执行的时候\",{\"1\":{\"2446\":1,\"4779\":1}}],[\"到此\",{\"1\":{\"2172\":1,\"5225\":1}}],[\"到用户空间\",{\"1\":{\"1083\":1,\"1251\":1,\"1419\":1,\"1587\":1,\"4465\":1}}],[\"到第五天的时候消息达到了\",{\"1\":{\"929\":1,\"5076\":1}}],[\"到底应该是\",{\"1\":{\"584\":1}}],[\"到底synchronizedlist和vector有没有区别\",{\"1\":{\"474\":1}}],[\"到\",{\"1\":{\"200\":1,\"3483\":1}}],[\">a\",{\"1\":{\"520\":1,\"3609\":1}}],[\">c\",{\"1\":{\"520\":1,\"3609\":1}}],[\">b\",{\"1\":{\"520\":2,\"3609\":2}}],[\">=\",{\"1\":{\"494\":1,\"2331\":1,\"4664\":1}}],[\">>\",{\"1\":{\"469\":1}}],[\">8\",{\"1\":{\"413\":1}}],[\">16\",{\"1\":{\"413\":1}}],[\">1\",{\"1\":{\"413\":1}}],[\">\",{\"1\":{\"212\":1,\"227\":1,\"307\":1,\"311\":1,\"314\":2,\"321\":2,\"323\":2,\"406\":1,\"411\":3,\"424\":1,\"470\":1,\"480\":3,\"484\":1,\"492\":1,\"494\":1,\"704\":1,\"730\":8,\"809\":1,\"940\":1,\"949\":1,\"1114\":2,\"1146\":2,\"1168\":1,\"1179\":2,\"1282\":2,\"1314\":2,\"1336\":1,\"1347\":2,\"1450\":2,\"1482\":2,\"1504\":1,\"1515\":2,\"1618\":2,\"1650\":2,\"1672\":1,\"1683\":2,\"2331\":1,\"2947\":1,\"3495\":1,\"3510\":1,\"3584\":1,\"3588\":1,\"3591\":2,\"3598\":2,\"3600\":2,\"3692\":1,\"3718\":8,\"3797\":1,\"4172\":1,\"4496\":2,\"4528\":2,\"4550\":1,\"4561\":2,\"4664\":1,\"5087\":1,\"5096\":1}}],[\">解析\",{\"1\":{\"193\":1,\"3476\":1}}],[\">准备\",{\"1\":{\"193\":1,\"3476\":1}}],[\">初始化\",{\"1\":{\"193\":1,\"3476\":1}}],[\">连接\",{\"1\":{\"193\":1,\"3476\":1}}],[\"这代表你将丢失对这个任务的处理\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"这整个操作就是cas\",{\"1\":{\"2792\":1,\"4017\":1}}],[\"这类大的二进制数据通常存储于文件服务器\",{\"1\":{\"2560\":1,\"4893\":1}}],[\"这类大的二进制数据\",{\"0\":{\"2558\":1,\"4891\":1}}],[\"这类服务依旧只能采用写主机房\",{\"1\":{\"1876\":1,\"3953\":1}}],[\"这四种隔离级别具体是如何实现的呢\",{\"1\":{\"2526\":1,\"4859\":1}}],[\"这四个隔离级别如下\",{\"1\":{\"2508\":1,\"4841\":1}}],[\"这条记录了\",{\"1\":{\"2465\":1,\"4798\":1}}],[\"这条消息的状态是待发送状态\",{\"1\":{\"1849\":1,\"3926\":1}}],[\"这主要是通过\",{\"1\":{\"2432\":1,\"4765\":1}}],[\"这意味着事务执行期间\",{\"1\":{\"2408\":1,\"4741\":1}}],[\"这也可以过滤更多数据\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"这也是threadlocal变量名的由来\",{\"1\":{\"2938\":1,\"4163\":1}}],[\"这也是和\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"这也是为什么很多场合我们输密码的时候\",{\"1\":{\"3239\":1}}],[\"这也是为什么\",{\"1\":{\"2243\":1,\"4576\":1}}],[\"这也是\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4490\":1}}],[\"这应该是非聚簇索引最大的缺点了\",{\"1\":{\"2323\":1,\"4656\":1}}],[\"这被称为\",{\"1\":{\"2275\":1,\"2276\":1,\"4608\":1,\"4609\":1}}],[\"这在并发写的情况下是多么滴憨憨啊\",{\"1\":{\"2243\":1,\"4576\":1}}],[\"这地方有个常见面试题\",{\"1\":{\"2043\":1}}],[\"这篇文章来一起看下tcp中那些烦人\",{\"1\":{\"1969\":1}}],[\"这无所谓\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"这不过这里的\",{\"1\":{\"1805\":1,\"4365\":1}}],[\"这端\",{\"1\":{\"1795\":1,\"4355\":1}}],[\"这使得\",{\"1\":{\"2186\":1,\"5239\":1}}],[\"这使得编写web服务客户端更容易\",{\"1\":{\"1762\":1,\"4322\":1}}],[\"这使得微服务可以采用任何的开发语言和技术来实现\",{\"1\":{\"1724\":1,\"4284\":1}}],[\"这三个单词首字母组合\",{\"1\":{\"1822\":1,\"4382\":1}}],[\"这三个对象\",{\"1\":{\"1137\":1,\"1305\":1,\"1473\":1,\"1641\":1,\"4519\":1}}],[\"这三者都实现了list\",{\"1\":{\"444\":1}}],[\"这一章节\",{\"1\":{\"3001\":1,\"4226\":1}}],[\"这一次没有其他线程改变地址\",{\"1\":{\"2790\":1,\"4015\":1}}],[\"这一步需要调用\",{\"1\":{\"2658\":1,\"4991\":1}}],[\"这一步需要调用write函数\",{\"1\":{\"2657\":1,\"4990\":1}}],[\"这一切都发生在内核态\",{\"1\":{\"1087\":1,\"1255\":1,\"1423\":1,\"1591\":1,\"4469\":1}}],[\"这一种固定的数据结构了\",{\"1\":{\"608\":1}}],[\"这两个事务同时在处理\",{\"1\":{\"2495\":1,\"2500\":1,\"2504\":1,\"4828\":1,\"4833\":1,\"4837\":1}}],[\"这两个索引就是冗余索引\",{\"1\":{\"2350\":1,\"4683\":1}}],[\"这两个系统调用\",{\"1\":{\"1095\":1,\"1263\":1,\"1431\":1,\"1599\":1,\"4477\":1}}],[\"这两个术语还挺抽象的\",{\"1\":{\"1064\":1,\"1232\":1,\"1400\":1,\"1568\":1,\"4446\":1}}],[\"这两个都可以方便地实现进程\",{\"1\":{\"1039\":1,\"1207\":1,\"1375\":1,\"1543\":1,\"4421\":1}}],[\"这会导致consumer有些消息处理了\",{\"1\":{\"975\":1,\"5122\":1}}],[\"这将消除每次手动部署更改的需要\",{\"1\":{\"845\":1,\"3833\":1}}],[\"这可以使用\",{\"1\":{\"845\":1,\"3833\":1}}],[\"这时就可以将\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"这时数据库的线程很快就会爆满了\",{\"1\":{\"2413\":1,\"4746\":1}}],[\"这时线程\",{\"1\":{\"2412\":1,\"4745\":1}}],[\"这时其他线程执行以下操作\",{\"1\":{\"2367\":1,\"4700\":1}}],[\"这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息\",{\"1\":{\"841\":1,\"3829\":1}}],[\"这时候\",{\"1\":{\"723\":1,\"3711\":1}}],[\"这时候不管你需要什么map\",{\"1\":{\"298\":1,\"3575\":1}}],[\"这时候反射就派上用场了\",{\"1\":{\"293\":1,\"3570\":1}}],[\"这⾥的双重检查是指两次⾮空判断\",{\"1\":{\"674\":1,\"3662\":1}}],[\"这难道不是重蹈了\",{\"1\":{\"616\":1}}],[\"这么多年了\",{\"1\":{\"594\":1}}],[\"这么难的逻辑都被你实现了\",{\"1\":{\"292\":1,\"3569\":1}}],[\"这里没听清发音\",{\"1\":{\"3061\":1,\"5312\":1}}],[\"这里借用\",{\"1\":{\"2951\":1,\"4176\":1}}],[\"这里必然会存在时间差\",{\"1\":{\"2857\":1,\"4082\":1}}],[\"这里不需要重新加锁\",{\"1\":{\"2757\":1,\"3982\":1}}],[\"这里对上面提到的一些\",{\"1\":{\"2662\":1,\"4995\":1}}],[\"这里的句点代表了不同层次之间的界限\",{\"1\":{\"2201\":1,\"5254\":1}}],[\"这里的叶子节点指的是最底层的空节点\",{\"1\":{\"648\":1,\"3636\":1}}],[\"这里说的网络设备\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"这里需要注意的是\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"这里还有一种情况\",{\"1\":{\"1876\":1,\"3953\":1}}],[\"这里回答的是单个表吧\",{\"1\":{\"1863\":1,\"3940\":1}}],[\"这里为了方便随便取个数字\",{\"1\":{\"1805\":1,\"4365\":1}}],[\"这里涉及共享数据的竞争\",{\"1\":{\"1165\":1,\"1333\":1,\"1501\":1,\"1669\":1,\"4547\":1}}],[\"这里我们主要看\",{\"1\":{\"1012\":1}}],[\"这里只能是尽量均衡\",{\"1\":{\"946\":1,\"5093\":1}}],[\"这里就那redis来说一下\",{\"1\":{\"907\":1,\"3895\":1}}],[\"这里面定义了依赖的版本\",{\"1\":{\"866\":1,\"3854\":1}}],[\"这里有两道常见面试题\",{\"1\":{\"2082\":1}}],[\"这里有问题\",{\"0\":{\"613\":1},\"1\":{\"614\":1}}],[\"这里有一个小建议\",{\"1\":{\"415\":1}}],[\"这里\",{\"1\":{\"483\":1}}],[\"这个我说就是了解\",{\"1\":{\"3080\":1,\"5331\":1}}],[\"这个熟\",{\"1\":{\"3058\":1,\"5309\":1}}],[\"这个离谱\",{\"1\":{\"3045\":1,\"5296\":1}}],[\"这个紧张忘了\",{\"1\":{\"3039\":1,\"5290\":1}}],[\"这个机制\",{\"1\":{\"2831\":1,\"4056\":1}}],[\"这个变量实际被修改过了\",{\"1\":{\"2802\":1,\"4027\":1}}],[\"这个变量所在的位置附近的位置很有可能在程序后续运行中被访问到\",{\"1\":{\"1009\":1}}],[\"这个重新尝试的过程被称为自旋\",{\"1\":{\"2788\":1,\"4013\":1}}],[\"这个应该没人使用吧\",{\"1\":{\"2684\":1,\"5017\":1}}],[\"这个是最常用的\",{\"1\":{\"2682\":1,\"5015\":1}}],[\"这个是无法更改的\",{\"1\":{\"512\":1}}],[\"这个索引的\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"这个对比有点废话\",{\"1\":{\"2256\":1,\"4589\":1}}],[\"这个恢复的过程依赖于\",{\"1\":{\"2253\":1,\"4586\":1}}],[\"这个域名归\",{\"1\":{\"2215\":1,\"5268\":1}}],[\"这个最后的一个点代表根域名\",{\"1\":{\"2203\":1,\"5256\":1}}],[\"这个怎么解决\",{\"0\":{\"1878\":1,\"3955\":1}}],[\"这个\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"这个开源项目\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4490\":1}}],[\"这个过程是原子的\",{\"1\":{\"2778\":1,\"4003\":1}}],[\"这个过程是由\",{\"1\":{\"1088\":1,\"1256\":1,\"1424\":1,\"1592\":1,\"4470\":1}}],[\"这个过程之中\",{\"1\":{\"1102\":1,\"1270\":1,\"1438\":1,\"1606\":1,\"4484\":1}}],[\"这个缓冲区\",{\"1\":{\"1086\":1,\"1254\":1,\"1422\":1,\"1590\":1,\"4468\":1}}],[\"这个就是水平触发的方式\",{\"1\":{\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"4449\":1}}],[\"这个方案\",{\"1\":{\"1142\":1,\"1310\":1,\"1478\":1,\"1646\":1,\"4524\":1}}],[\"这个方式就是边缘触发\",{\"1\":{\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"4449\":1}}],[\"这个方法的调用就会被转发到实现invocationhandler\",{\"1\":{\"705\":1,\"3693\":1}}],[\"这个方法一共有\",{\"1\":{\"704\":1,\"3692\":1}}],[\"这个方法主要用来生成一个代理对象\",{\"1\":{\"703\":1,\"3691\":1}}],[\"这个方法很重要\",{\"1\":{\"375\":1}}],[\"这个情况会越来越严重\",{\"1\":{\"950\":1,\"5097\":1}}],[\"这个时候可以使用\",{\"1\":{\"2814\":1,\"4039\":1}}],[\"这个时候对线程1来说\",{\"1\":{\"2782\":1,\"4007\":1}}],[\"这个时候有其他人来了只能在外面等\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"这个时候重新选举的时候我们如果把\",{\"1\":{\"1813\":1,\"4373\":1}}],[\"这个时候\",{\"1\":{\"929\":2,\"1806\":1,\"1816\":1,\"4366\":1,\"4376\":1,\"5076\":2}}],[\"这个parent就是spring\",{\"1\":{\"863\":1,\"3851\":1}}],[\"这个半成品对象已经存放在缓存到singletonobjects\",{\"1\":{\"795\":1,\"3783\":1}}],[\"这个优势更加明显\",{\"1\":{\"718\":1,\"3706\":1}}],[\"这个实例就会被创建\",{\"1\":{\"674\":1,\"3662\":1}}],[\"这个关键字被占据了\",{\"1\":{\"617\":1}}],[\"这个问题有人吐槽过\",{\"1\":{\"3281\":1}}],[\"这个问题至此已经无解了\",{\"1\":{\"617\":1}}],[\"这个问题看似简单\",{\"1\":{\"548\":1}}],[\"这个stack\",{\"1\":{\"615\":1}}],[\"这个概念不是我说的\",{\"1\":{\"589\":1}}],[\"这个类的\",{\"1\":{\"2807\":1,\"4032\":1}}],[\"这个类的若干我们不需要的方法\",{\"1\":{\"616\":1}}],[\"这个类的一大问题\",{\"1\":{\"616\":1}}],[\"这个类的覆辙\",{\"1\":{\"616\":1}}],[\"这个类\",{\"1\":{\"568\":1,\"635\":1}}],[\"这个不推荐不是某个技术专家或者某个企业的规范标准\",{\"1\":{\"562\":1}}],[\"这个扩容条件指的是什么呢\",{\"1\":{\"418\":1}}],[\"这决定了它有如下特点\",{\"1\":{\"339\":1,\"348\":1,\"366\":1,\"385\":1,\"434\":1}}],[\"这决定了以下几点\",{\"1\":{\"333\":1}}],[\"这种加锁的思路是\",{\"1\":{\"3196\":1,\"5447\":1}}],[\"这种任务应用起来\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"这种任务消耗的主要是\",{\"1\":{\"2992\":1,\"4217\":1}}],[\"这种结构每个数据都有两个指针\",{\"1\":{\"2830\":1,\"4055\":1}}],[\"这种现象就被称为幻读\",{\"1\":{\"2506\":1,\"4839\":1}}],[\"这种现象就被称为不可重复读\",{\"1\":{\"2500\":1,\"4833\":1}}],[\"这种现象就被称为脏读\",{\"1\":{\"2496\":1,\"4829\":1}}],[\"这种查询会加锁的语句称为锁定读\",{\"1\":{\"2450\":1,\"4783\":1}}],[\"这种不支持事务的引擎\",{\"1\":{\"2382\":1,\"4715\":1}}],[\"这种又长又难比较的数据\",{\"1\":{\"2314\":1,\"4647\":1}}],[\"这种方案并不能从根本上解决此问题\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"这种方案存在\",{\"1\":{\"1148\":1,\"1316\":1,\"1484\":1,\"1652\":1,\"4530\":1}}],[\"这种方式可以解决请求的\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"这种方式需要依靠某种同步操作\",{\"1\":{\"1046\":1,\"1214\":1,\"1382\":1,\"1550\":1,\"4428\":1}}],[\"这种方法只适用于支持\",{\"1\":{\"2380\":1,\"4713\":1}}],[\"这种思想很类似一个\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"这种通信方式主要用于解决与同步相关的问题并避免竞争条件\",{\"1\":{\"1045\":1,\"1213\":1,\"1381\":1,\"1549\":1,\"4427\":1}}],[\"这种分配方式明显的一个问题是随着消费者订阅的topic的数量的增加\",{\"1\":{\"950\":1,\"5097\":1}}],[\"这种模式让我们可以根据客户的需求能够动态切换不同的数据源\",{\"1\":{\"750\":1,\"3738\":1}}],[\"这种数据结构\",{\"1\":{\"564\":1,\"635\":1}}],[\"这种获取方式只有在编译前已经声明了该类的类型才能获取到\",{\"1\":{\"302\":1,\"3579\":1}}],[\"这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制\",{\"1\":{\"283\":1,\"3560\":1}}],[\"这种异常的特点是java编译器会检查它\",{\"1\":{\"249\":1,\"3534\":1}}],[\"这种异常又分为两类\",{\"1\":{\"240\":1,\"3525\":1}}],[\"这些并发工具类都在java\",{\"1\":{\"2797\":1,\"4022\":1}}],[\"这些函数被称为\",{\"1\":{\"2661\":1,\"4994\":1}}],[\"这些数据流之间独立互不影响\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"这些信息的组合\",{\"1\":{\"2032\":1}}],[\"这些信息包含如下\",{\"1\":{\"276\":1,\"3553\":1}}],[\"这些功能的实现主要依赖于\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"这些操作具有前后关系\",{\"1\":{\"984\":1,\"5131\":1}}],[\"这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的\",{\"1\":{\"667\":1,\"3655\":1}}],[\"这些类和电脑类之间的关系\",{\"1\":{\"582\":1}}],[\"这些对比都是指数据量很大或者操作很频繁的情况下的对比\",{\"1\":{\"447\":1}}],[\"这些异常一般是由程序逻辑错误引起的\",{\"1\":{\"242\":1,\"3527\":1}}],[\"这些异常是不检查异常\",{\"1\":{\"242\":1,\"3527\":1}}],[\"这就会造成大问题\",{\"1\":{\"2803\":1,\"4028\":1}}],[\"这就好比雪崩一样\",{\"1\":{\"2720\":1,\"5053\":1}}],[\"这就可能会导致瞬时大量的请求直接打到了数据库上\",{\"1\":{\"2710\":1,\"5043\":1}}],[\"这就导致这些请求直接到了数据库上\",{\"1\":{\"2692\":1,\"5025\":1}}],[\"这就和\",{\"1\":{\"1835\":1,\"4395\":1}}],[\"这就叫\",{\"1\":{\"1829\":1,\"4389\":1}}],[\"这就是我的自我介绍\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"这就是为什么只有在同步的块或者方法中才能调用wait\",{\"1\":{\"2921\":1,\"4146\":1}}],[\"这就是事务四大特性中的隔离性\",{\"1\":{\"2379\":1,\"4712\":1}}],[\"这就是所谓的零拷贝\",{\"1\":{\"1104\":1,\"1272\":1,\"1440\":1,\"1608\":1,\"4486\":1}}],[\"这就是两者的区别\",{\"1\":{\"1068\":1,\"1236\":1,\"1404\":1,\"1572\":1,\"4450\":1}}],[\"这就是多路复用\",{\"1\":{\"1051\":1,\"1219\":1,\"1387\":1,\"1555\":1,\"4433\":1}}],[\"这就是\",{\"1\":{\"617\":1}}],[\"这就是抛出异常\",{\"1\":{\"257\":1,\"3542\":1}}],[\"这就意味着\",{\"1\":{\"615\":1}}],[\"这就需要提到双亲委派模型了\",{\"1\":{\"220\":1,\"3503\":1}}],[\"这样会带来消息被重新消费的问题\",{\"1\":{\"3118\":1,\"5369\":1}}],[\"这样会影响缓存命中率\",{\"1\":{\"3110\":1,\"5361\":1}}],[\"这样会造成业务停滞\",{\"1\":{\"2376\":1,\"4709\":1}}],[\"这样会造成主索引频繁分裂\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"这样在\",{\"1\":{\"2446\":1,\"4779\":1}}],[\"这样在备份数据库期间\",{\"1\":{\"2373\":1,\"4706\":1}}],[\"这样的处理方式让写的同学更加明确线程池的运行规则\",{\"1\":{\"3004\":1,\"4229\":1}}],[\"这样的开销往往无法承受\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"这样的批量插入数据的语句\",{\"1\":{\"2444\":1,\"4777\":1}}],[\"这样的话\",{\"1\":{\"231\":1,\"3514\":1}}],[\"这样效率会很慢\",{\"1\":{\"2427\":1,\"4760\":1}}],[\"这样备份期间备份的数据一直是在开启事务时的数据\",{\"1\":{\"2379\":1,\"4712\":1}}],[\"这样查询可以利用索引的排序\",{\"1\":{\"2339\":1,\"4672\":1}}],[\"这样语义较为清晰的短值或短字符作为替代\",{\"1\":{\"2336\":1,\"4669\":1}}],[\"这样一来\",{\"1\":{\"2210\":1,\"5263\":1}}],[\"这样一个概念\",{\"1\":{\"602\":1}}],[\"这样网卡的\",{\"1\":{\"1101\":1,\"1269\":1,\"1437\":1,\"1605\":1,\"4483\":1}}],[\"这样就导致大量过期\",{\"1\":{\"2674\":1,\"5007\":1}}],[\"这样就有效的防止幻读现象的发生\",{\"1\":{\"2465\":1,\"4798\":1}}],[\"这样就不用去遍历表里的记录\",{\"1\":{\"2428\":1,\"4761\":1}}],[\"这样就产生了第\",{\"1\":{\"1172\":1,\"1340\":1,\"1508\":1,\"1676\":1,\"4554\":1}}],[\"这样就产生了单\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4536\":1}}],[\"这样就减少了一次数据拷贝\",{\"1\":{\"1101\":1,\"1269\":1,\"1437\":1,\"1605\":1,\"4483\":1}}],[\"这样就只有\",{\"1\":{\"1096\":1,\"1264\":1,\"1432\":1,\"1600\":1,\"4478\":1}}],[\"这样就可以减少一次系统调用\",{\"1\":{\"1095\":1,\"1263\":1,\"1431\":1,\"1599\":1,\"4477\":1}}],[\"这样就会比较慢\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"这样就会出现数据不一致性问题了\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"这样就会出现消息并没有按照顺序执行\",{\"1\":{\"986\":1,\"5133\":1}}],[\"这样就会造成顺序的错误\",{\"1\":{\"986\":1,\"5133\":1}}],[\"这样\",{\"1\":{\"1051\":1,\"1083\":1,\"1219\":1,\"1251\":1,\"1387\":1,\"1419\":1,\"1555\":1,\"1587\":1,\"4433\":1,\"4465\":1}}],[\"这样也会造成吞吐量下降\",{\"1\":{\"991\":1,\"5138\":1}}],[\"这样也会造成消息消费顺序错误\",{\"1\":{\"988\":1,\"5135\":1}}],[\"这样c0总共就比c1\",{\"1\":{\"950\":1,\"5097\":1}}],[\"这样事务之间就完全不可能产生干扰\",{\"1\":{\"772\":1,\"3760\":1}}],[\"这样不⽤通过指定类型来创建对象了\",{\"1\":{\"682\":1,\"3670\":1}}],[\"这样做\",{\"1\":{\"602\":1}}],[\"这样设计是合理的\",{\"1\":{\"544\":1}}],[\"这样对\",{\"1\":{\"2671\":1,\"5004\":1}}],[\"这样对后续的关于\",{\"1\":{\"813\":1,\"3801\":1}}],[\"这样对于效率影响不大\",{\"1\":{\"526\":1,\"3615\":1}}],[\"这样对内存更加友好\",{\"1\":{\"202\":1,\"3485\":1}}],[\"这样可以减少调整大小的开销\",{\"1\":{\"451\":1}}],[\"这\",{\"1\":{\"189\":1,\"3472\":1}}],[\"这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放\",{\"1\":{\"2918\":1,\"4143\":1}}],[\"这是面试高频考点\",{\"1\":{\"2800\":1,\"4025\":1}}],[\"这是通过对主键字段声明\",{\"1\":{\"2431\":1,\"4764\":1}}],[\"这是和三个一样的\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"这是错的\",{\"1\":{\"1062\":1,\"1230\":1,\"1398\":1,\"1566\":1,\"4444\":1}}],[\"这是springboot程序的监控系统\",{\"1\":{\"855\":1,\"3843\":1}}],[\"这是开发人员最需要的功能\",{\"1\":{\"845\":1,\"3833\":1}}],[\"这是⾮常麻烦的\",{\"1\":{\"690\":1,\"3678\":1}}],[\"这是因为申请\",{\"1\":{\"2415\":1,\"4748\":1}}],[\"这是因为\",{\"1\":{\"628\":1,\"2773\":1,\"3998\":1}}],[\"这是\",{\"1\":{\"592\":1}}],[\"这是项目主页的案例\",{\"1\":{\"148\":1,\"152\":1,\"3436\":1}}],[\"这是脚注内容\",{\"1\":{\"111\":1,\"3399\":1}}],[\"u\",{\"1\":{\"2817\":1,\"4042\":1}}],[\"up\",{\"1\":{\"2538\":1,\"2541\":2,\"4871\":1,\"4874\":2}}],[\"update等语句\",{\"1\":{\"2368\":1,\"4701\":1}}],[\"update\",{\"1\":{\"898\":1,\"912\":1,\"2424\":1,\"2451\":1,\"2525\":2,\"2549\":1,\"3886\":1,\"3900\":1,\"4757\":1,\"4784\":1,\"4858\":2,\"4882\":1}}],[\"uuid\",{\"1\":{\"2314\":1,\"4647\":1}}],[\"udp\",{\"0\":{\"2052\":1,\"2074\":1,\"2087\":1,\"2144\":1,\"5197\":1},\"1\":{\"1977\":1,\"1978\":1,\"2028\":1,\"2051\":1,\"2055\":1,\"2058\":1,\"2061\":3,\"2064\":2,\"2067\":1,\"2070\":1,\"2073\":1,\"2078\":2,\"2083\":1,\"2084\":2,\"2085\":1,\"2086\":2,\"2090\":1,\"2091\":3,\"2092\":2,\"2093\":1,\"2191\":2,\"5162\":3,\"5244\":2}}],[\"utm\",{\"1\":{\"972\":2,\"981\":3,\"5119\":2,\"5128\":3}}],[\"utils\",{\"1\":{\"940\":4,\"5087\":4}}],[\"util包中的一个类\",{\"1\":{\"472\":1}}],[\"util\",{\"1\":{\"298\":2,\"307\":1,\"311\":1,\"314\":1,\"472\":1,\"2797\":1,\"2957\":4,\"3575\":2,\"3584\":1,\"3588\":1,\"3591\":1,\"4022\":1,\"4182\":4}}],[\"uri\",{\"1\":{\"734\":2,\"3722\":2}}],[\"url\",{\"1\":{\"734\":1,\"2197\":3,\"3722\":1,\"5250\":3}}],[\"used\",{\"1\":{\"2679\":1,\"2682\":1,\"2686\":1,\"2687\":1,\"5012\":1,\"5015\":1,\"5019\":1,\"5020\":1}}],[\"username\",{\"1\":{\"3227\":1,\"3233\":1}}],[\"username=18666666666\",{\"1\":{\"3226\":1,\"3232\":1}}],[\"user就是这么做的\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"user\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"use\",{\"1\":{\"261\":1,\"2959\":3,\"3546\":1,\"4184\":3}}],[\"using\",{\"1\":{\"188\":1,\"3471\":1}}],[\"unless\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"unlock\",{\"1\":{\"2371\":1,\"2396\":1,\"4704\":1,\"4729\":1}}],[\"unloading\",{\"1\":{\"188\":1,\"3471\":1}}],[\"unsafe这个类中定义了\",{\"1\":{\"2796\":1,\"4021\":1}}],[\"undo\",{\"0\":{\"2545\":1,\"4878\":1},\"1\":{\"2489\":1,\"2531\":2,\"2535\":1,\"2538\":1,\"2546\":1,\"2548\":1,\"2549\":3,\"2550\":3,\"4822\":1,\"4864\":2,\"4868\":1,\"4871\":1,\"4879\":1,\"4881\":1,\"4882\":3,\"4883\":3}}],[\"unit\",{\"1\":{\"2959\":4,\"2966\":1,\"4184\":4,\"4191\":1}}],[\"union\",{\"1\":{\"2580\":1,\"4913\":1}}],[\"unionfs\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"unique\",{\"1\":{\"2302\":1,\"4635\":1}}],[\"unmodified\",{\"1\":{\"2183\":1,\"5236\":1}}],[\"uncommitted\",{\"1\":{\"769\":1,\"2509\":1,\"3757\":1,\"4842\":1}}],[\"unchecked\",{\"0\":{\"246\":1,\"3531\":1}}],[\"准备了一个\",{\"1\":{\"1795\":1,\"4355\":1}}],[\"准备\",{\"1\":{\"188\":1,\"3471\":1}}],[\"验证数据是否被篡改\",{\"1\":{\"3271\":1}}],[\"验证数据的有效性\",{\"1\":{\"740\":1,\"3728\":1}}],[\"验证是对自己的问询\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"验证结果存储到\",{\"1\":{\"740\":1,\"3728\":1}}],[\"验证代码如下\",{\"1\":{\"423\":1}}],[\"验证\",{\"1\":{\"188\":1,\"193\":1,\"3471\":1,\"3476\":1}}],[\"加盐流程\",{\"1\":{\"3257\":1}}],[\"加盐的目的也是为了尽量增强明文密码的复杂度\",{\"1\":{\"3256\":1}}],[\"加盐是指在密码的任意位置插入一些指定的字符串\",{\"1\":{\"3256\":1}}],[\"加盐sault\",{\"1\":{\"3255\":1}}],[\"加\",{\"1\":{\"2405\":1,\"2406\":1,\"3065\":1,\"4738\":1,\"4739\":1,\"5316\":1}}],[\"加的是\",{\"1\":{\"2402\":1,\"2403\":1,\"4735\":1,\"4736\":1}}],[\"加表锁\",{\"1\":{\"2391\":1,\"4724\":1}}],[\"加上全局锁\",{\"1\":{\"2375\":1,\"4708\":1}}],[\"加全局锁又会带来什么缺点呢\",{\"1\":{\"2374\":1,\"4707\":1}}],[\"加速查询\",{\"1\":{\"2287\":1,\"2289\":1,\"4620\":1,\"4622\":1}}],[\"加密和解密花费时间长\",{\"1\":{\"3287\":1}}],[\"加密效率高的特点\",{\"1\":{\"3284\":1}}],[\"加密速度快\",{\"1\":{\"3284\":1}}],[\"加密解密密钥是相同的\",{\"1\":{\"3277\":1}}],[\"加密\",{\"1\":{\"3154\":1,\"5405\":1}}],[\"加密采用对称加密\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"加密展示\",{\"1\":{\"6\":1,\"98\":1,\"3294\":1,\"3386\":1}}],[\"加入到自己的\",{\"1\":{\"2162\":1,\"5215\":1}}],[\"加开关\",{\"1\":{\"1881\":1,\"3958\":1}}],[\"加分布式锁\",{\"1\":{\"1867\":1,\"3944\":1}}],[\"加快排序查询时间\",{\"1\":{\"2339\":1,\"4672\":1}}],[\"加快数据恢复的速率\",{\"1\":{\"935\":1,\"5082\":1}}],[\"加快读写速度\",{\"1\":{\"934\":1,\"5081\":1}}],[\"加锁\",{\"1\":{\"673\":1,\"674\":1,\"1037\":1,\"1205\":1,\"1373\":1,\"1541\":1,\"3661\":1,\"3662\":1,\"4419\":1}}],[\"加载配置文件的优先级了解么\",{\"0\":{\"826\":1,\"3814\":1}}],[\"加载自动装配类\",{\"1\":{\"825\":1,\"3813\":1}}],[\"加载指定二进制名称的类\",{\"1\":{\"212\":1,\"3495\":1}}],[\"加载时再利用自定义的类加载器对其解密\",{\"1\":{\"209\":1,\"3492\":1}}],[\"加载\",{\"1\":{\"188\":1,\"193\":1,\"3471\":1,\"3476\":1}}],[\"70730532\",{\"1\":{\"2911\":1,\"4136\":1}}],[\"7字节\",{\"1\":{\"2535\":1,\"4868\":1}}],[\"7为什么\",{\"0\":{\"2112\":1}}],[\"7第一次握手丢失了\",{\"0\":{\"2101\":1}}],[\"7tcp\",{\"0\":{\"2087\":1}}],[\"76435385\",{\"1\":{\"981\":2,\"5128\":2}}],[\"76ms\",{\"1\":{\"632\":1}}],[\"7中扩容时\",{\"1\":{\"520\":1,\"3609\":1}}],[\"73\",{\"1\":{\"432\":1}}],[\"7540正式发表了\",{\"1\":{\"1887\":1,\"1902\":1,\"1917\":1,\"1930\":1,\"1943\":1,\"1958\":1,\"5149\":1,\"5172\":1}}],[\"75\",{\"1\":{\"422\":1,\"426\":2}}],[\"75正好是3\",{\"1\":{\"421\":1}}],[\"75有一个好处\",{\"1\":{\"421\":1}}],[\"75f\",{\"1\":{\"398\":2,\"421\":1}}],[\"7\",{\"0\":{\"259\":1,\"532\":1,\"1938\":1,\"3544\":1},\"1\":{\"188\":1,\"189\":1,\"274\":1,\"411\":1,\"413\":1,\"743\":1,\"929\":1,\"981\":3,\"2071\":1,\"2153\":2,\"2624\":1,\"2632\":1,\"3041\":1,\"3078\":1,\"3092\":1,\"3471\":1,\"3472\":1,\"3551\":1,\"3731\":1,\"4957\":1,\"4965\":1,\"5076\":1,\"5128\":3,\"5206\":2,\"5292\":1,\"5329\":1,\"5343\":1}}],[\"类内部的\",{\"1\":{\"2944\":1,\"4169\":1}}],[\"类实现的定制化的\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"类来保证引用对象之间的原子性\",{\"1\":{\"2814\":1,\"4039\":1}}],[\"类似\",{\"1\":{\"2444\":1,\"4777\":1}}],[\"类似键值对的形式\",{\"1\":{\"2280\":1,\"4613\":1}}],[\"类似于数据库的主键\",{\"1\":{\"979\":1,\"5126\":1}}],[\"类中可以通过thread\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"类中有一个\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"类中使用频率最高的方法是\",{\"1\":{\"703\":1,\"3691\":1}}],[\"类中的\",{\"1\":{\"217\":1,\"3500\":1}}],[\"类是核心\",{\"1\":{\"702\":1,\"712\":1,\"3690\":1,\"3700\":1}}],[\"类或者\",{\"1\":{\"603\":1}}],[\"类到底怎么了\",{\"0\":{\"567\":1}}],[\"类\",{\"0\":{\"561\":1},\"1\":{\"568\":1,\"603\":1}}],[\"类库中有很多具体的实现\",{\"1\":{\"329\":1}}],[\"类名\",{\"1\":{\"302\":1,\"3579\":1}}],[\"类型为精准浮点数\",{\"1\":{\"2566\":1,\"4899\":1}}],[\"类型\",{\"0\":{\"2563\":1,\"4896\":1}}],[\"类型转换等操作\",{\"1\":{\"2357\":1,\"4690\":1}}],[\"类型总结\",{\"0\":{\"2277\":1,\"4610\":1}}],[\"类型的变量\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"类型的底层数据结构是由压缩列表或跳表实现的\",{\"1\":{\"2629\":1,\"4962\":1}}],[\"类型的底层数据结构是由压缩列表或哈希表实现的\",{\"1\":{\"2621\":1,\"4954\":1}}],[\"类型的底层数据结构是由哈希表或整数集合实现的\",{\"1\":{\"2614\":1,\"4947\":1}}],[\"类型的底层数据结构是由双向链表或压缩列表实现的\",{\"1\":{\"2606\":1,\"4939\":1}}],[\"类型的底层数据结构\",{\"1\":{\"2607\":1,\"2608\":1,\"2615\":1,\"2616\":1,\"2622\":1,\"2630\":1,\"2631\":1,\"4940\":1,\"4941\":1,\"4948\":1,\"4949\":1,\"4955\":1,\"4963\":1,\"4964\":1}}],[\"类型的底层的数据结构实现主要是\",{\"1\":{\"2595\":1,\"4928\":1}}],[\"类型的\",{\"1\":{\"809\":1,\"2623\":1,\"2626\":1,\"3797\":1,\"4956\":1,\"4959\":1}}],[\"类型的类和方法\",{\"1\":{\"717\":1,\"3705\":1}}],[\"类型的文件主要三步\",{\"1\":{\"193\":1,\"3476\":1}}],[\"类型上都属于exception类及其子类\",{\"1\":{\"245\":1,\"3530\":1}}],[\"类及其子类\",{\"1\":{\"239\":1,\"3524\":1}}],[\"类使用委托模型来搜索类和资源\",{\"1\":{\"221\":1,\"3504\":1}}],[\"类有两个关键的方法\",{\"1\":{\"211\":1,\"3494\":1}}],[\"类的相关字节码信息\",{\"1\":{\"2915\":1,\"4140\":1}}],[\"类的\",{\"1\":{\"707\":1,\"1692\":1,\"2942\":1,\"3695\":1,\"4167\":1,\"4252\":1}}],[\"类的对象\",{\"1\":{\"628\":1}}],[\"类的实现不好吗\",{\"0\":{\"591\":1}}],[\"类的全限定名\",{\"1\":{\"306\":1,\"3583\":1}}],[\"类的字节码\",{\"1\":{\"200\":1,\"209\":1,\"3483\":1,\"3492\":1}}],[\"类的生命周期\",{\"0\":{\"187\":1,\"3470\":1}}],[\"类都有一个引用指向加载它的\",{\"1\":{\"198\":1,\"3481\":1}}],[\"类从被加载到虚拟机内存中开始到卸载出内存为止\",{\"1\":{\"188\":1,\"3471\":1}}],[\"类加载过程\",{\"0\":{\"191\":1,\"3474\":1},\"1\":{\"194\":1,\"3477\":1}}],[\"类加载机制\",{\"0\":{\"186\":1,\"3469\":1}}],[\"类加载器在进行类加载的时候\",{\"1\":{\"231\":1,\"3514\":1}}],[\"类加载器有很多种\",{\"1\":{\"220\":1,\"3503\":1}}],[\"类加载器层次关系图\",{\"1\":{\"218\":1,\"225\":1,\"3501\":1,\"3508\":1}}],[\"类加载器总结\",{\"0\":{\"204\":1,\"3487\":1}}],[\"类加载器加载规则\",{\"0\":{\"201\":1,\"3484\":1}}],[\"类加载器的主要作用就是加载\",{\"1\":{\"200\":1,\"3483\":1}}],[\"类加载器是一个负责加载类的对象\",{\"1\":{\"197\":1,\"3480\":1}}],[\"类加载器\",{\"0\":{\"195\":1,\"3478\":1},\"1\":{\"176\":1,\"704\":1,\"3459\":1,\"3692\":1}}],[\"垃圾收集器\",{\"0\":{\"185\":1,\"3468\":1}}],[\"垃圾回收算法\",{\"0\":{\"184\":1,\"3467\":1}}],[\"垃圾回收机制\",{\"0\":{\"182\":1,\"3465\":1}}],[\"如aes\",{\"1\":{\"3274\":1}}],[\"如reentrantlock\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"如不可见\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"如主键索引\",{\"1\":{\"2327\":1,\"4660\":1}}],[\"如今的\",{\"1\":{\"2086\":1}}],[\"如服务发现注册\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"如互斥锁和信号量等\",{\"1\":{\"1046\":1,\"1214\":1,\"1382\":1,\"1550\":1,\"4428\":1}}],[\"如何动态修改线程池的参数\",{\"0\":{\"3009\":1,\"4234\":1}}],[\"如何设定线程池的大小\",{\"1\":{\"2990\":1,\"4215\":1}}],[\"如何创建线程池\",{\"0\":{\"2955\":1,\"4180\":1}}],[\"如何解决\",{\"1\":{\"2804\":1,\"4029\":1}}],[\"如何解决深分页的问题\",{\"0\":{\"1862\":1,\"3939\":1}}],[\"如何比较和选择\",{\"0\":{\"2736\":1,\"3961\":1}}],[\"如何保证原子性呢\",{\"1\":{\"2774\":1,\"3999\":1}}],[\"如何保证\",{\"1\":{\"2677\":1,\"5010\":1}}],[\"如何保证消息的消费顺序\",{\"0\":{\"990\":1,\"5137\":1}}],[\"如何保证消息的顺序性\",{\"0\":{\"982\":1,\"5129\":1}}],[\"如何基于\",{\"1\":{\"2061\":1}}],[\"如何优化\",{\"1\":{\"2000\":1}}],[\"如何避免\",{\"0\":{\"2104\":1},\"1\":{\"1989\":1}}],[\"如何在\",{\"1\":{\"1981\":1}}],[\"如何唯一确定一个\",{\"1\":{\"1976\":1}}],[\"如何做多机房容灾\",{\"0\":{\"1868\":1,\"3945\":1}}],[\"如何提高搜索性能\",{\"0\":{\"1860\":1,\"3937\":1}}],[\"如何与elk整合\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"如何服务更多的用户\",{\"1\":{\"1074\":1,\"1242\":1,\"1410\":1,\"1578\":1,\"4456\":1}}],[\"如何使用\",{\"0\":{\"830\":1,\"3818\":1}}],[\"如何判断对象是否可回收\",{\"0\":{\"183\":1,\"3466\":1}}],[\"如\",{\"1\":{\"737\":1,\"738\":1,\"739\":1,\"1070\":1,\"1114\":1,\"1238\":1,\"1282\":1,\"1406\":1,\"1450\":1,\"1574\":1,\"1618\":1,\"2079\":1,\"2092\":1,\"2331\":1,\"2350\":1,\"3725\":1,\"3726\":1,\"3727\":1,\"4452\":1,\"4496\":1,\"4664\":1,\"4683\":1}}],[\"如第一个\",{\"1\":{\"367\":1,\"435\":1}}],[\"如下表\",{\"1\":{\"3240\":1}}],[\"如下图所示\",{\"1\":{\"2854\":1,\"2855\":1,\"2866\":1,\"3010\":1,\"4079\":1,\"4080\":1,\"4091\":1,\"4235\":1}}],[\"如下图\",{\"1\":{\"1096\":1,\"1102\":1,\"1264\":1,\"1270\":1,\"1432\":1,\"1438\":1,\"1600\":1,\"1606\":1,\"4478\":1,\"4484\":1}}],[\"如下\",{\"1\":{\"285\":1,\"3562\":1}}],[\"如下所示\",{\"1\":{\"254\":1,\"257\":1,\"568\":1,\"3539\":1,\"3542\":1}}],[\"如ioexception\",{\"1\":{\"245\":1,\"3530\":1}}],[\"如nullpointerexception\",{\"1\":{\"242\":1,\"3527\":1}}],[\"如果返回失败\",{\"1\":{\"3198\":1,\"5449\":1}}],[\"如果设置成功就表示加锁成功\",{\"1\":{\"3197\":1,\"5448\":1}}],[\"如果设计成继承关系的话\",{\"1\":{\"586\":1}}],[\"如果审核成功\",{\"1\":{\"3162\":1,\"5413\":1}}],[\"如果审核失败\",{\"1\":{\"3161\":1,\"5412\":1}}],[\"如果负责的活动和实验室科研冲突了怎么平衡\",{\"1\":{\"3091\":1,\"5342\":1}}],[\"如果向任务队列投放任务失败\",{\"1\":{\"2987\":1,\"4212\":1}}],[\"如果队列满了\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话\",{\"1\":{\"2974\":1,\"4199\":1}}],[\"如果执行程序已关闭\",{\"1\":{\"2974\":1,\"4199\":1}}],[\"如果执行失败\",{\"1\":{\"1852\":1,\"3929\":1}}],[\"如果这时没有新的任务提交\",{\"1\":{\"2965\":1,\"4190\":1}}],[\"如果这个位置为空\",{\"1\":{\"380\":1}}],[\"如果达到的话\",{\"1\":{\"2963\":1,\"2979\":1,\"4188\":1,\"4204\":1}}],[\"如果达到片段上限\",{\"1\":{\"928\":1,\"5075\":1}}],[\"如果无限制的创建\",{\"1\":{\"2954\":1,\"4179\":1}}],[\"如果获取对象锁失败\",{\"1\":{\"2923\":1,\"4148\":1}}],[\"如果获取了锁就\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"如果获取了锁\",{\"1\":{\"2840\":1,\"4065\":1}}],[\"如果获取了就什么也不干\",{\"1\":{\"2838\":1,\"4063\":1}}],[\"如果锁的计数器为\",{\"1\":{\"2922\":1,\"4147\":1}}],[\"如果能获取到\",{\"1\":{\"2906\":1,\"4131\":1}}],[\"如果对某个资源是读操作\",{\"1\":{\"2900\":1,\"4125\":1}}],[\"如果对索引列的数据被修改时\",{\"1\":{\"2315\":1,\"4648\":1}}],[\"如果读读之间互斥\",{\"1\":{\"2894\":1,\"4119\":1}}],[\"如果发现冲突了\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"如果发生了读写冲突的时候\",{\"1\":{\"2512\":1,\"4845\":1}}],[\"如果加锁的时间过长\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"如果存在就唤醒自己的后继节点\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"如果存在一个值不为\",{\"1\":{\"2707\":1,\"5040\":1}}],[\"如果没获取就创造一个节点通过compareandsettail\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"如果没有则返回未认证错误\",{\"1\":{\"3132\":1,\"3143\":1,\"5383\":1,\"5394\":1}}],[\"如果没有则new一个对象来一个一个set\",{\"1\":{\"1846\":1,\"3923\":1}}],[\"如果没有的话\",{\"1\":{\"3013\":1,\"4238\":1}}],[\"如果没有获取锁\",{\"1\":{\"2839\":1,\"4064\":1}}],[\"如果没有设置主键且该表没有唯一非空索引时\",{\"1\":{\"2536\":1,\"4869\":1}}],[\"如果没有\",{\"1\":{\"2214\":1,\"2427\":1,\"4760\":1,\"5267\":1}}],[\"如果没有创建\",{\"1\":{\"674\":1,\"3662\":1}}],[\"如果没有指定\",{\"1\":{\"509\":1}}],[\"如果被请求的共享资源被占用\",{\"1\":{\"2831\":1,\"4056\":1}}],[\"如果被请求的共享资源空闲\",{\"1\":{\"2831\":1,\"4056\":1}}],[\"如果被引用过一次\",{\"1\":{\"1009\":1}}],[\"如果它的后继节点是shared状态\",{\"1\":{\"2827\":1,\"4052\":1}}],[\"如果资源竞争非常激烈\",{\"1\":{\"2809\":1,\"4034\":1}}],[\"如果全部相等\",{\"1\":{\"2807\":1,\"4032\":1}}],[\"如果多次失败会有多次自旋\",{\"1\":{\"2788\":1,\"4013\":1}}],[\"如果因为冲突失败了就重试\",{\"1\":{\"2776\":1,\"4001\":1}}],[\"如果线程竞争不激烈\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"如果线程的竞争很激励\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"如果线程不处于活动状态\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"如果抢到锁\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"如果值都为\",{\"1\":{\"2707\":1,\"5040\":1}}],[\"如果非要用这种方式来解决穿透问题的话\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"如果黑客恶意攻击\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"如果缓存和数据库都查不到某个\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"如果缓存里的表格能找到\",{\"1\":{\"2214\":1,\"5267\":1}}],[\"如果假设你设置了一批\",{\"1\":{\"2669\":1,\"5002\":1}}],[\"如果至少有10000个key发生变化\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"如果至少有10个key发生变化\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"如果至少有1个key发生变化\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"如果哈希类型元素不满足上面条件\",{\"1\":{\"2623\":1,\"4956\":1}}],[\"如果哈希类型元素个数小于\",{\"1\":{\"2622\":1,\"4955\":1}}],[\"如果集合中的元素不满足上面条件\",{\"1\":{\"2616\":1,\"4949\":1}}],[\"如果集合中的元素都是整数且元素个数小于\",{\"1\":{\"2615\":1,\"4948\":1}}],[\"如果列表的元素不满足上面的条件\",{\"1\":{\"2608\":1,\"4941\":1}}],[\"如果列表的元素个数小于\",{\"1\":{\"2607\":1,\"4940\":1}}],[\"如果列表长度未知\",{\"1\":{\"346\":1}}],[\"如果空间不够会自动扩容\",{\"1\":{\"2599\":1,\"4932\":1}}],[\"如果该行未被更新\",{\"1\":{\"2535\":1,\"4868\":1}}],[\"如果该list是arraylist那么\",{\"1\":{\"497\":1}}],[\"如果出现前后两次查询到的记录数量不一样的情况\",{\"1\":{\"2502\":1,\"4835\":1}}],[\"如果出现前后两次读到的数据不一样的情况\",{\"1\":{\"2498\":1,\"4831\":1}}],[\"如果说间隙锁锁住的是一个区间\",{\"1\":{\"2477\":1,\"4810\":1}}],[\"如果可以考虑\",{\"1\":{\"2416\":1,\"4749\":1}}],[\"如果可能\",{\"1\":{\"586\":1}}],[\"如果同时有很多个索引都可以用于查询\",{\"1\":{\"2346\":1,\"4679\":1}}],[\"如果同时需要根据索引位置进行操作\",{\"1\":{\"353\":1}}],[\"如果字段频繁被查询\",{\"1\":{\"2336\":1,\"4669\":1}}],[\"如果查询条件中存在与联合索引中最左侧字段相匹配的字段\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"如果一方的密钥被泄露\",{\"1\":{\"3285\":1}}],[\"如果一个表包含过多字段的话\",{\"1\":{\"2569\":1,\"4902\":1}}],[\"如果一个表的字段过多\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"如果一个事务\",{\"1\":{\"2493\":1,\"4826\":1}}],[\"如果一个事务获取了\",{\"1\":{\"2470\":1,\"4803\":1}}],[\"如果一个字段不被经常查询\",{\"1\":{\"2342\":1,\"4675\":1}}],[\"如果一个索引包含\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"如果一条\",{\"1\":{\"2327\":2,\"4660\":2}}],[\"如果一阶段某一节点失败仍会导致数据不正确\",{\"1\":{\"1730\":1,\"4290\":1}}],[\"如果数据量特别大\",{\"1\":{\"3176\":1,\"5427\":1}}],[\"如果数据库的引擎支持的事务支持可重复读的隔离级别\",{\"1\":{\"2378\":1,\"4711\":1}}],[\"如果数据是整型还好\",{\"1\":{\"2314\":1,\"4647\":1}}],[\"如果数据和运算量很小\",{\"1\":{\"447\":1}}],[\"如果索引的数据不是有序的\",{\"1\":{\"2314\":1,\"4647\":1}}],[\"如果指定的\",{\"1\":{\"2275\":1,\"4608\":1}}],[\"如果主机\",{\"1\":{\"2166\":1,\"5219\":1}}],[\"如果中途丢失了一个分片\",{\"1\":{\"2072\":1}}],[\"如果接收方的程序如果不知道\",{\"1\":{\"2030\":1}}],[\"如果需要回收核心线程数\",{\"1\":{\"3020\":1,\"4245\":1}}],[\"如果需要预热的话可以调用下面的两个方法\",{\"1\":{\"3014\":1,\"4239\":1}}],[\"如果需要保障网络数据包的可靠性\",{\"1\":{\"2023\":1}}],[\"如果需要生产新的类\",{\"1\":{\"325\":1,\"3602\":1}}],[\"如果已经建立了连接\",{\"1\":{\"2003\":1,\"2004\":1}}],[\"如果已经点赞则抛出异常\",{\"1\":{\"1846\":1,\"3923\":1}}],[\"如果操作的是相同数据\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"如果操作的是各自的数据的话\",{\"1\":{\"1873\":1,\"3950\":1}}],[\"如果老数据没有动\",{\"1\":{\"1865\":1,\"3942\":1}}],[\"如果还有另一个重要的字段也需要查\",{\"1\":{\"1861\":1,\"3938\":1}}],[\"如果mq服务器长时间没有收到生产者的commit或者rollback\",{\"1\":{\"1855\":1,\"3932\":1}}],[\"如果消息状态更新为可发送\",{\"1\":{\"1854\":1,\"3931\":1}}],[\"如果消费者消费失败\",{\"1\":{\"1856\":1,\"3933\":1}}],[\"如果消费者消费失败怎么办呢\",{\"1\":{\"1856\":1,\"3933\":1}}],[\"如果消费者在默认的5分钟内没有处理完这一批消息\",{\"1\":{\"975\":1,\"5122\":1}}],[\"如果消费组内\",{\"1\":{\"957\":1,\"5104\":1}}],[\"如果本地事务执行成功\",{\"1\":{\"1852\":1,\"3929\":1}}],[\"如果网络分区正常的话\",{\"1\":{\"1837\":1,\"4397\":1}}],[\"如果网卡支持\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"如果只是\",{\"1\":{\"1810\":1,\"4370\":1}}],[\"如果只需要deque接口\",{\"1\":{\"353\":1}}],[\"如果相同那么就\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"如果相同则比较\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\",{\"1\":{\"2841\":1,\"4066\":1}}],[\"如果在上面这种情况事务\",{\"1\":{\"2496\":1,\"4829\":1}}],[\"如果在整个集群运行的过程中\",{\"1\":{\"1804\":1,\"4364\":1}}],[\"如果在调用的时候显示的传入一个对象\",{\"1\":{\"509\":1}}],[\"如果超过半数以上的同意那么就进行\",{\"1\":{\"1794\":1,\"4354\":1}}],[\"如果此时事务\",{\"1\":{\"2495\":1,\"4828\":1}}],[\"如果此时有大量该表的\",{\"1\":{\"2413\":1,\"4746\":1}}],[\"如果此时集群中已经存在一个\",{\"1\":{\"1783\":1,\"4343\":1}}],[\"如果此时再订阅一个分区数为4的topic\",{\"1\":{\"950\":1,\"5097\":1}}],[\"如果事物涉及的节点很多\",{\"1\":{\"1730\":1,\"4290\":1}}],[\"如果有一个预先计算好的常用口令和它们的\",{\"1\":{\"3240\":1}}],[\"如果有空闲线程\",{\"1\":{\"2982\":1,\"4207\":1}}],[\"如果有修改动作\",{\"1\":{\"2900\":1,\"4125\":1}}],[\"如果有序集合的元素不满足上面的条件\",{\"1\":{\"2631\":1,\"4964\":1}}],[\"如果有序集合的元素个数小于\",{\"1\":{\"2630\":1,\"4963\":1}}],[\"如果有其他事务在\",{\"1\":{\"2525\":1,\"4858\":1}}],[\"如果有其他线程执行了\",{\"1\":{\"2406\":1,\"4739\":1}}],[\"如果有其他线程要更改该表的结构\",{\"1\":{\"2405\":1,\"4738\":1}}],[\"如果有的话\",{\"1\":{\"2475\":1,\"4808\":1}}],[\"如果有就意味着表里已经有记录被加了独占锁\",{\"1\":{\"2428\":1,\"4761\":1}}],[\"如果有\",{\"1\":{\"2296\":1,\"3132\":1,\"3143\":1,\"4629\":1,\"5383\":1,\"5394\":1}}],[\"如果有多个表\",{\"0\":{\"1862\":1,\"3939\":1}}],[\"如果有新的事件发生时\",{\"1\":{\"1178\":1,\"1346\":1,\"1514\":1,\"1682\":1,\"4560\":1}}],[\"如果有同学需要使用\",{\"1\":{\"635\":1}}],[\"如果业务处理耗时比较长\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4532\":1}}],[\"如果使用了\",{\"1\":{\"2066\":1}}],[\"如果使用边缘触发模式\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"如果使用水平触发模式\",{\"1\":{\"1069\":1,\"1237\":1,\"1405\":1,\"1573\":1,\"4451\":1}}],[\"如果使用可用分区\",{\"1\":{\"940\":1,\"5087\":1}}],[\"如果快递箱发现你的快递没有被取出\",{\"1\":{\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"4449\":1}}],[\"如果快递箱只会通过短信通知你一次\",{\"1\":{\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"4449\":1}}],[\"如果某块数据被访问\",{\"1\":{\"1008\":1}}],[\"如果订阅的topic列表是不同的\",{\"1\":{\"957\":1,\"5104\":1}}],[\"如果配置的是7个片段\",{\"1\":{\"928\":1,\"5075\":1}}],[\"如果是登录\",{\"1\":{\"3129\":1,\"3140\":1,\"5380\":1,\"5391\":1}}],[\"如果是静态方法\",{\"1\":{\"2928\":1,\"4153\":1}}],[\"如果是实例方法\",{\"1\":{\"2928\":1,\"4153\":1}}],[\"如果是整型还好\",{\"1\":{\"2803\":1,\"4028\":1}}],[\"如果是则唤醒头节点的下一个节点\",{\"1\":{\"2827\":1,\"4052\":1}}],[\"如果是则更改为新的值\",{\"1\":{\"2778\":1,\"4003\":1}}],[\"如果是则将其设置为\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"如果是则正常往下执行\",{\"1\":{\"2757\":1,\"3982\":1}}],[\"如果是联合索引\",{\"1\":{\"2348\":1,\"4681\":1}}],[\"如果是\",{\"1\":{\"2159\":1,\"5212\":1}}],[\"如果是rollback\",{\"1\":{\"1853\":1,\"3930\":1}}],[\"如果是commit正常提交\",{\"1\":{\"1853\":1,\"3930\":1}}],[\"如果是写请求则要转发给\",{\"1\":{\"1789\":1,\"4349\":1}}],[\"如果是读请求则可以自己处理\",{\"1\":{\"1789\":1,\"4349\":1}}],[\"如果是连接建立的事件\",{\"1\":{\"1144\":1,\"1159\":1,\"1312\":1,\"1327\":1,\"1480\":1,\"1495\":1,\"1648\":1,\"1663\":1,\"4526\":1,\"4541\":1}}],[\"如果是我们自己处理的话该怎么解决\",{\"1\":{\"791\":1,\"3779\":1}}],[\"如果是第⼀次进⼊则为\",{\"1\":{\"674\":1,\"3662\":1}}],[\"如果当前运行的线程数已经等同于最大线程数了\",{\"1\":{\"2988\":1,\"4213\":1}}],[\"如果当前运行的线程数等于或大于核心线程数\",{\"1\":{\"2986\":1,\"4211\":1}}],[\"如果当前运行的线程数小于核心线程数\",{\"1\":{\"2985\":1,\"4210\":1}}],[\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时\",{\"1\":{\"2972\":1,\"4197\":1}}],[\"如果当前线程竞争锁失败\",{\"1\":{\"2829\":1,\"4054\":1}}],[\"如果当前没有事务\",{\"1\":{\"776\":1,\"777\":1,\"778\":1,\"784\":1,\"3764\":1,\"3765\":1,\"3766\":1,\"3772\":1}}],[\"如果当前存在事务\",{\"1\":{\"776\":1,\"777\":1,\"778\":1,\"780\":1,\"781\":1,\"782\":1,\"784\":1,\"3764\":1,\"3765\":1,\"3766\":1,\"3768\":1,\"3769\":1,\"3770\":1,\"3772\":1}}],[\"如果成功获得\",{\"1\":{\"735\":1,\"3723\":1}}],[\"如果目标对象实现了接口\",{\"1\":{\"711\":1,\"3699\":1}}],[\"如果要在查询时对记录加行锁\",{\"1\":{\"2450\":1,\"4783\":1}}],[\"如果要释放全局锁\",{\"1\":{\"2370\":1,\"4703\":1}}],[\"如果要克服\",{\"1\":{\"1154\":1,\"1322\":1,\"1490\":1,\"1658\":1,\"4536\":1}}],[\"如果要代理的对象\",{\"1\":{\"723\":1,\"3711\":1}}],[\"如果要⽣成另⼀种产品\",{\"1\":{\"684\":1,\"3672\":1}}],[\"如果要保持添加的顺序\",{\"1\":{\"364\":1}}],[\"如果实例已经存在\",{\"1\":{\"674\":1,\"3662\":1}}],[\"如果插入的数据是随机的\",{\"1\":{\"643\":1,\"3631\":1}}],[\"如果用户用户名\",{\"1\":{\"3130\":1,\"5381\":1}}],[\"如果用户通过构造函数指定了一个数字作为容量\",{\"1\":{\"413\":1}}],[\"如果用中文说\",{\"1\":{\"589\":1}}],[\"如果大家在\",{\"1\":{\"563\":1}}],[\"如果n为2次幂\",{\"1\":{\"528\":1,\"3617\":1}}],[\"如果元素的数目超出了内部数组目前的长度它们都需要扩展内部数组的长度\",{\"1\":{\"501\":1}}],[\"如果遍历输出\",{\"1\":{\"357\":1}}],[\"如果想实现每一个线程都有自己的专属本地变量该如何解决呢\",{\"1\":{\"2936\":1,\"4161\":1}}],[\"如果想通过显式构造方法构造实例\",{\"1\":{\"316\":1,\"3593\":1}}],[\"如果想打破双亲委派模型则需要重写\",{\"1\":{\"217\":1,\"3500\":1}}],[\"如果哪天你发现用linkedhashmap效果更好\",{\"1\":{\"288\":1,\"3565\":1}}],[\"如果try中有return语句\",{\"1\":{\"267\":1}}],[\"如果代码可能会引发某种错误\",{\"1\":{\"257\":1,\"3542\":1}}],[\"如果不使用线程池\",{\"1\":{\"3003\":1,\"4228\":1}}],[\"如果不想丢弃任务的话\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"如果不存在就获取等待时间最长的符合条件的线程\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"如果不好理解\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"如果不是主键索引\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"如果不是连接建立事件\",{\"1\":{\"1145\":1,\"1160\":1,\"1313\":1,\"1328\":1,\"1481\":1,\"1496\":1,\"1649\":1,\"1664\":1,\"4527\":1,\"4542\":1}}],[\"如果不指定\",{\"1\":{\"402\":1}}],[\"如果不为空\",{\"1\":{\"380\":1}}],[\"如果不对其捕获\",{\"1\":{\"254\":1,\"3539\":1}}],[\"如果不处理\",{\"1\":{\"245\":1,\"3530\":1}}],[\"如果\",{\"1\":{\"227\":1,\"612\":1,\"1110\":1,\"1278\":1,\"1446\":1,\"1614\":1,\"1811\":1,\"2541\":1,\"3196\":2,\"3510\":1,\"4371\":1,\"4492\":1,\"4874\":1,\"5447\":2}}],[\"如果我们想对学生表\",{\"1\":{\"2391\":1,\"4724\":1}}],[\"如果我们要继续服务\",{\"1\":{\"1832\":1,\"4392\":1}}],[\"如果我们要自定义自己的类加载器\",{\"1\":{\"210\":1,\"3493\":1}}],[\"如果我们不想打破双亲委派模型\",{\"1\":{\"217\":1,\"3500\":1}}],[\"如果为了保证\",{\"1\":{\"1835\":1,\"4395\":1}}],[\"如果为\",{\"1\":{\"212\":1,\"3495\":1}}],[\"如果你创建了一个threadlocal变量\",{\"1\":{\"2938\":1,\"4163\":1}}],[\"如果你追溯\",{\"1\":{\"1109\":1,\"1277\":1,\"1445\":1,\"1613\":1,\"4491\":1}}],[\"如果你可以下载\",{\"1\":{\"814\":1,\"3802\":1}}],[\"如果你想使用栈这种数据结构\",{\"1\":{\"565\":1}}],[\"如果你的业务有海量消息\",{\"1\":{\"3188\":1,\"5439\":1}}],[\"如果你的业务场景足够简单\",{\"1\":{\"3187\":1,\"5438\":1}}],[\"如果你的程序本身是线程安全的\",{\"1\":{\"448\":1}}],[\"如果你的资源实现了\",{\"1\":{\"260\":1,\"3545\":1}}],[\"如果你不了解它\",{\"1\":{\"33\":1,\"3321\":1}}],[\"如果你是一个新手\",{\"1\":{\"29\":1,\"3317\":1}}],[\"内置了多种优化过后的数据结构实现\",{\"1\":{\"2588\":1,\"4921\":1}}],[\"内核通常为\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"内核版本\",{\"1\":{\"1092\":1,\"1260\":1,\"1428\":1,\"1596\":1,\"4474\":1}}],[\"内核源码的都知道\",{\"1\":{\"1062\":1,\"1230\":1,\"1398\":1,\"1566\":1,\"4444\":1}}],[\"内核里维护了一个链表来记录就绪事件\",{\"1\":{\"1057\":1,\"1225\":1,\"1393\":1,\"1561\":1,\"4439\":1}}],[\"内核里没有类似\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"内核提供给用户态的多路复用系统调用\",{\"1\":{\"1052\":1,\"1220\":1,\"1388\":1,\"1556\":1,\"4434\":1}}],[\"内核\",{\"0\":{\"998\":1,\"3910\":1},\"1\":{\"1099\":1,\"1267\":1,\"1435\":1,\"1603\":1,\"1692\":1,\"4252\":1,\"4481\":1}}],[\"内直接书写带有物理分页的参数来完成物理分页功能\",{\"1\":{\"890\":1,\"3878\":1}}],[\"内存资源会紧张\",{\"1\":{\"3185\":1,\"5436\":1}}],[\"内存地址v\",{\"1\":{\"2779\":1,\"4004\":1}}],[\"内存淘汰机制了解么\",{\"0\":{\"2676\":1,\"5009\":1}}],[\"内存淘汰机制\",{\"1\":{\"2675\":1,\"5008\":1}}],[\"内存的访问速度是磁盘的上千倍\",{\"1\":{\"2586\":1,\"4919\":1}}],[\"内存管理\",{\"0\":{\"1003\":1}}],[\"内存\",{\"1\":{\"582\":2,\"898\":1,\"900\":1,\"3886\":1,\"3888\":1}}],[\"内存结构\",{\"0\":{\"181\":1,\"3464\":1}}],[\"内部采用的是\",{\"1\":{\"2983\":1,\"4208\":1}}],[\"内部做了非常多的性能优化\",{\"1\":{\"2585\":1,\"4918\":1}}],[\"内部的一系列工作\",{\"1\":{\"1700\":1,\"4260\":1}}],[\"内部的元素可以直接通过get与set方法进行访问\",{\"1\":{\"445\":1}}],[\"内部的核心类库\",{\"1\":{\"206\":1,\"3489\":1}}],[\"内部使用数组链表和哈希的方式进行实现\",{\"1\":{\"385\":1}}],[\"内部使用循环数组实现\",{\"1\":{\"348\":1}}],[\"内部实现利用了hashmap\",{\"1\":{\"362\":1}}],[\"内部元素不是完全有序的\",{\"1\":{\"357\":1}}],[\"内部是用堆实现的\",{\"1\":{\"355\":1}}],[\"内容\",{\"1\":{\"35\":1,\"3323\":1}}],[\"来看头条\",{\"0\":{\"3093\":1,\"5344\":1},\"1\":{\"3096\":1,\"5347\":1}}],[\"来看下以下代码\",{\"1\":{\"405\":1}}],[\"来创建\",{\"1\":{\"2994\":1,\"4219\":1}}],[\"来创建公平锁\",{\"1\":{\"2910\":1,\"4135\":1}}],[\"来处理\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"来保证原子性\",{\"1\":{\"2812\":1,\"4037\":1}}],[\"来保证的\",{\"1\":{\"2488\":1,\"2489\":1,\"4821\":1,\"4822\":1}}],[\"来生成聚簇索引\",{\"1\":{\"2536\":1,\"4869\":1}}],[\"来判断数据的可见性\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"来判断重复元素的\",{\"1\":{\"382\":1}}],[\"来做为缓存判断的标准\",{\"1\":{\"2183\":1,\"5236\":1}}],[\"来进行排序\",{\"1\":{\"1797\":1,\"4357\":1}}],[\"来进行网络通信的\",{\"1\":{\"1795\":1,\"4355\":1}}],[\"来进行传输的\",{\"1\":{\"1104\":1,\"1272\":1,\"1440\":1,\"1608\":1,\"4486\":1}}],[\"来头很大\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"来完成系统自动化功能\",{\"1\":{\"3107\":1,\"5358\":1}}],[\"来完成\",{\"1\":{\"1703\":1,\"4263\":1}}],[\"来搬运\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4487\":1}}],[\"来搬运数据\",{\"1\":{\"1087\":1,\"1104\":1,\"1255\":1,\"1272\":1,\"1423\":1,\"1440\":1,\"1591\":1,\"1608\":1,\"4469\":1,\"4486\":1}}],[\"来代替\",{\"1\":{\"1089\":1,\"1257\":1,\"1425\":1,\"1593\":1,\"4471\":1}}],[\"来渲染视图\",{\"1\":{\"743\":1,\"3731\":1}}],[\"来调用真正的处理器来处理请求\",{\"1\":{\"730\":1,\"3718\":1}}],[\"来自定义处理逻辑\",{\"1\":{\"705\":1,\"3693\":1}}],[\"来自定义类加载器\",{\"1\":{\"227\":1,\"3510\":1}}],[\"来说\",{\"1\":{\"700\":1,\"3688\":1}}],[\"来满足上层的业务需求\",{\"1\":{\"605\":1}}],[\"来实现独享或者共享\",{\"1\":{\"2897\":1,\"4122\":1}}],[\"来实现锁的分配\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"来实现具体对容器进行的操作\",{\"1\":{\"1704\":1,\"4264\":1}}],[\"来实现的\",{\"1\":{\"1692\":1,\"2529\":1,\"4252\":1,\"4862\":1}}],[\"来实现\",{\"1\":{\"564\":1}}],[\"来实现整个程序的功能\",{\"1\":{\"180\":1,\"3463\":1}}],[\"来控制集合中的对象\",{\"1\":{\"501\":1}}],[\"来初始化容量和装载因子\",{\"1\":{\"429\":1}}],[\"来解析\",{\"1\":{\"35\":1,\"3323\":1}}],[\"而如果我们使用了md5对密码加密\",{\"1\":{\"3232\":1}}],[\"而线程在处理\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"而在模板之外可以专注于要展示什么数据\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"而在这种情况下多出来的一个线程就可以充分利用\",{\"1\":{\"2992\":1,\"4217\":1}}],[\"而在hashtable中不可以\",{\"1\":{\"389\":1}}],[\"而threadlocalmap可以存储以threadlocal为\",{\"1\":{\"2946\":1,\"4171\":1}}],[\"而treemap是基于红黑树实现的\",{\"1\":{\"381\":1}}],[\"而treemap基于大致平衡的排序二叉树\",{\"1\":{\"366\":1}}],[\"而共享锁不一样\",{\"1\":{\"2827\":1,\"4052\":1}}],[\"而偏向锁只需要在置换\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"而另一个是\",{\"1\":{\"2737\":1,\"3962\":1}}],[\"而普通的\",{\"1\":{\"2422\":1,\"4755\":1}}],[\"而导致后续的申请读锁的查询操作也会被阻塞\",{\"1\":{\"2414\":1,\"4747\":1}}],[\"而出现备份文件的数据与预期的不一样\",{\"1\":{\"2373\":1,\"4706\":1}}],[\"而无需回表查询\",{\"1\":{\"2326\":1,\"4659\":1}}],[\"而无需重新启动服务器\",{\"1\":{\"845\":1,\"3833\":1}}],[\"而覆盖索引就是把要查询出的列和索引是对应的\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"而其余的索引都作为\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"而非一个路由器只维护一个\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"而非广播\",{\"1\":{\"2161\":1,\"5214\":1}}],[\"而非物理分页\",{\"1\":{\"889\":1,\"3877\":1}}],[\"而当年可能并非如此\",{\"1\":{\"2086\":1}}],[\"而此时正好事务\",{\"1\":{\"2495\":1,\"4828\":1}}],[\"而此时\",{\"1\":{\"1816\":1,\"4376\":1}}],[\"而三个比四个还少一个\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"而假设我们现在有四个\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"而低32位可以简单理解为递增的事务id\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"而多线程间可以共享数据\",{\"1\":{\"1169\":1,\"1337\":1,\"1505\":1,\"1673\":1,\"4551\":1}}],[\"而边缘触发的意思是只有第一次满足条件的时候才触发\",{\"1\":{\"1068\":1,\"1236\":1,\"1404\":1,\"1572\":1,\"4450\":1}}],[\"而信号量比锁的功能更强一些\",{\"1\":{\"1039\":1,\"1207\":1,\"1375\":1,\"1543\":1,\"4421\":1}}],[\"而rebalance之后\",{\"1\":{\"975\":1,\"5122\":1}}],[\"而第二个目标才真正体现出stickyassignor特性的\",{\"1\":{\"966\":1,\"5113\":1}}],[\"而spring\",{\"1\":{\"858\":1,\"3846\":1}}],[\"而size表示这个桶已经装了多少元素\",{\"1\":{\"405\":1}}],[\"而接下来像是递归操作一样\",{\"1\":{\"806\":1,\"3794\":1}}],[\"而我的完整创建也依赖于你\",{\"1\":{\"790\":1,\"3778\":1}}],[\"而不会出现用户\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"而不需要等待整个插入语句执行完后才释放锁\",{\"1\":{\"2438\":1,\"4771\":1}}],[\"而不能更新数据\",{\"1\":{\"2376\":1,\"4709\":1}}],[\"而不是忙等\",{\"1\":{\"2766\":1,\"3991\":1}}],[\"而不是为了查询效率\",{\"1\":{\"2302\":1,\"4635\":1}}],[\"而不是一个具体的技术实现\",{\"1\":{\"724\":1,\"3712\":1}}],[\"而不用改变他的底层数据结构\",{\"1\":{\"512\":1}}],[\"而对于没有实现接口的对象\",{\"1\":{\"723\":1,\"3711\":1}}],[\"而对内存的操作\",{\"1\":{\"628\":1}}],[\"而对具体的实现方式不做限制\",{\"1\":{\"598\":1}}],[\"而且消息积压概率比较小的情况下\",{\"1\":{\"3187\":1,\"5438\":1}}],[\"而且大部分的系统都是\",{\"1\":{\"2894\":1,\"4119\":1}}],[\"而且支持\",{\"1\":{\"2636\":1,\"4969\":1}}],[\"而且能保存图片\",{\"1\":{\"2597\":1,\"4930\":1}}],[\"而且事务在执行过程中发生错误\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"而且记录锁是有\",{\"1\":{\"2460\":1,\"4793\":1}}],[\"而且意向锁之间也不会发生冲突\",{\"1\":{\"2425\":1,\"4758\":1}}],[\"而且由于\",{\"1\":{\"2378\":1,\"4711\":1}}],[\"而且聚簇索引的叶子节点还存放着数据\",{\"1\":{\"2315\":1,\"4648\":1}}],[\"而且最大的缺陷就是崩溃后无法安全恢复\",{\"1\":{\"2238\":1,\"4571\":1}}],[\"而且没有任何已知的转发地址\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"而且在对传输速率要求不高的情况下\",{\"1\":{\"5165\":1}}],[\"而且在\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"而且挂的没超过半数的时候\",{\"1\":{\"1810\":1,\"4370\":1}}],[\"而且只在主线程中运行\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"4552\":1}}],[\"而且\",{\"1\":{\"1105\":1,\"1273\":1,\"1441\":1,\"1609\":1,\"4487\":1}}],[\"而且仍然需要\",{\"1\":{\"1090\":1,\"1258\":1,\"1426\":1,\"1594\":1,\"4472\":1}}],[\"而且我们不知道到底能读写多少数据\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"而且随着topic的增加\",{\"1\":{\"950\":1,\"5097\":1}}],[\"而且也可能会出现\",{\"1\":{\"800\":1,\"3788\":1}}],[\"而且不同的客户在每次访问中根据需要会去访问不同的数据库\",{\"1\":{\"750\":1,\"3738\":1}}],[\"而且这样做\",{\"1\":{\"606\":1}}],[\"而且一定是2的指数\",{\"1\":{\"540\":1}}],[\"而且一旦发生这种异常状况\",{\"1\":{\"248\":1,\"3533\":1}}],[\"而组合关系描述的是\",{\"1\":{\"580\":1}}],[\"而应该是组合关系\",{\"1\":{\"575\":1}}],[\"而hashmap并没有\",{\"1\":{\"550\":1}}],[\"而hash冲突发生的概率较小\",{\"1\":{\"524\":1,\"3613\":1}}],[\"而由于历史原因\",{\"1\":{\"542\":1,\"545\":1}}],[\"而选择8作为临界值\",{\"1\":{\"531\":1,\"3620\":1}}],[\"而一个bin中链表长度达到8个元素的概率为0\",{\"1\":{\"530\":1,\"3619\":1}}],[\"而jdk1\",{\"1\":{\"520\":1,\"3609\":1}}],[\"而这个表就叫做彩虹表\",{\"1\":{\"3240\":1}}],[\"而这个过程中需要调用其他语言的本地库接口\",{\"1\":{\"180\":1,\"3463\":1}}],[\"而这些功能gateway天然支持\",{\"1\":{\"3099\":1,\"5350\":1}}],[\"而这些模板方法会调用使用者重写的方法\",{\"1\":{\"2843\":1,\"4068\":1}}],[\"而这样会出现频繁地对线程运行状态的切换\",{\"1\":{\"2767\":1,\"3992\":1}}],[\"而这一点是vector无法做到的\",{\"1\":{\"512\":1}}],[\"而arraylist和vector中同名方法的方法体内容并无太大差异\",{\"1\":{\"507\":1}}],[\"而arraylist每次对size增长50\",{\"1\":{\"449\":1}}],[\"而vector没有\",{\"0\":{\"452\":1}}],[\"而\",{\"1\":{\"450\":1,\"571\":1,\"605\":1,\"717\":1,\"809\":1,\"1056\":2,\"1134\":1,\"1224\":2,\"1302\":1,\"1392\":2,\"1470\":1,\"1560\":2,\"1638\":1,\"1813\":1,\"2083\":1,\"2084\":1,\"2085\":1,\"2146\":1,\"2154\":1,\"2184\":1,\"2187\":1,\"2189\":1,\"2242\":1,\"2248\":1,\"2252\":1,\"2255\":1,\"2271\":1,\"2273\":1,\"2449\":1,\"2529\":1,\"2598\":1,\"2738\":1,\"2740\":1,\"2900\":1,\"2909\":1,\"3705\":1,\"3797\":1,\"3963\":1,\"3965\":1,\"4125\":1,\"4134\":1,\"4373\":1,\"4438\":2,\"4516\":1,\"4575\":1,\"4581\":1,\"4585\":1,\"4588\":1,\"4604\":1,\"4606\":1,\"4782\":1,\"4862\":1,\"4931\":1,\"5199\":1,\"5207\":1,\"5237\":1,\"5240\":1,\"5242\":1}}],[\"而capacity又是2的幂\",{\"1\":{\"421\":1}}],[\"而按照索引位置访问相对比较少\",{\"1\":{\"346\":1}}],[\"而是非常明显地加快了反向查询的速度\",{\"1\":{\"3221\":1}}],[\"而是一个java类库\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"而是一个特殊值\",{\"1\":{\"2158\":1,\"5211\":1}}],[\"而是通过\",{\"1\":{\"3004\":1,\"4229\":1}}],[\"而是会按照延迟的时间长短对任务进行排序\",{\"1\":{\"2983\":1,\"4208\":1}}],[\"而是会等待\",{\"1\":{\"2965\":1,\"4190\":1}}],[\"而是将任务回退给调用者\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"而是同时以插队方式直接尝试获取锁\",{\"1\":{\"2906\":1,\"4131\":1}}],[\"而是检测\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"而是再执行完插入语句后就会立即释放\",{\"1\":{\"2433\":1,\"4766\":1}}],[\"而是专门定制了一致性协议叫做\",{\"1\":{\"1785\":1,\"4345\":1}}],[\"而是只需要一个配置spring\",{\"1\":{\"858\":1,\"3846\":1}}],[\"而是自己再做一层封装\",{\"1\":{\"620\":1}}],[\"而是业界公认的\",{\"1\":{\"589\":1}}],[\"而是来自\",{\"1\":{\"562\":1}}],[\"而是把这个请求委派给父类加载器去完成\",{\"1\":{\"231\":1,\"3514\":1}}],[\"而是根据需要去动态加载\",{\"1\":{\"202\":1,\"3485\":1}}],[\"而字节码文件只是\",{\"1\":{\"180\":1,\"3463\":1}}],[\"再者服务器的数据库中也是密文存储密码\",{\"1\":{\"3232\":1}}],[\"再者服务器的数据库中也是明文存储密码\",{\"1\":{\"3226\":1}}],[\"再进入内层方法会自动获取锁\",{\"1\":{\"2884\":1,\"4109\":1}}],[\"再来说说元数据锁\",{\"1\":{\"2400\":1,\"4733\":1}}],[\"再如普通索引\",{\"1\":{\"2327\":1,\"4660\":1}}],[\"再走一遍主索引\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"再将\",{\"1\":{\"2220\":1,\"5273\":1}}],[\"再下面是\",{\"1\":{\"2204\":1,\"5257\":1}}],[\"再构造链路层帧\",{\"1\":{\"2170\":1,\"5223\":1}}],[\"再次进入网关开始访问\",{\"1\":{\"3131\":1,\"5382\":1}}],[\"再次提交更新\",{\"1\":{\"2790\":1,\"4015\":1}}],[\"再次查询账户余额大于\",{\"1\":{\"2506\":1,\"4839\":1}}],[\"再次读取该数据时\",{\"1\":{\"2500\":1,\"4833\":1}}],[\"再次强调\",{\"1\":{\"2154\":1,\"5207\":1}}],[\"再次印证了\",{\"1\":{\"264\":1}}],[\"再加上\",{\"1\":{\"2078\":1}}],[\"再插入新的\",{\"1\":{\"1865\":1,\"3942\":1}}],[\"再反馈ack嘛\",{\"1\":{\"1856\":1,\"3933\":1}}],[\"再由内核返回产生了事件的连接\",{\"1\":{\"1053\":1,\"1221\":1,\"1389\":1,\"1557\":1,\"4435\":1}}],[\"再访问一次后还会被继续访问到\",{\"1\":{\"1012\":1}}],[\"再重启\",{\"1\":{\"975\":1,\"5122\":1}}],[\"再去根目录下找配置文件\",{\"1\":{\"828\":1,\"3816\":1}}],[\"再查半成品缓存\",{\"1\":{\"810\":1,\"3798\":1}}],[\"再说一个小问题\",{\"1\":{\"623\":1}}],[\"再交由\",{\"1\":{\"180\":1,\"3463\":1}}],[\"再把字节码加载到内存中\",{\"1\":{\"180\":1,\"3463\":1}}],[\"jing\",{\"0\":{\"5469\":1}}],[\"jianshu\",{\"1\":{\"3288\":1}}],[\"jwt\",{\"1\":{\"3130\":1,\"3131\":1,\"3132\":1,\"3134\":1,\"3135\":1,\"3208\":3,\"5381\":1,\"5382\":1,\"5383\":1,\"5385\":1,\"5386\":1,\"5459\":3}}],[\"juc\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"j++\",{\"1\":{\"2813\":1,\"4038\":1}}],[\"j\",{\"0\":{\"5462\":1,\"5475\":1},\"1\":{\"2812\":1,\"4037\":1}}],[\"job\",{\"1\":{\"1700\":1,\"1701\":1,\"4260\":1,\"4261\":1}}],[\"join\",{\"0\":{\"2579\":1,\"4912\":1},\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"json\",{\"1\":{\"737\":1,\"3725\":1}}],[\"jdbc防止sql注入\",{\"0\":{\"2551\":1,\"4884\":1}}],[\"jdbctemplate\",{\"1\":{\"749\":1,\"3737\":1}}],[\"jdbc连接数据库\",{\"1\":{\"325\":1,\"3602\":1}}],[\"jdk原生线程池threadpoolexecutor提供了如下几个public的setter方法\",{\"1\":{\"3010\":1,\"4235\":1}}],[\"jdk8之前的版本中\",{\"1\":{\"547\":1}}],[\"jdk1\",{\"1\":{\"520\":1,\"535\":1,\"536\":1,\"2814\":1,\"2817\":1,\"3609\":1,\"4039\":1,\"4042\":1}}],[\"jdk\",{\"0\":{\"701\":1,\"716\":1,\"3689\":1,\"3704\":1},\"1\":{\"206\":1,\"700\":1,\"709\":1,\"711\":1,\"717\":1,\"718\":2,\"723\":2,\"894\":1,\"2737\":1,\"2738\":1,\"2796\":1,\"2797\":1,\"2807\":1,\"2915\":1,\"2937\":1,\"3489\":1,\"3688\":1,\"3697\":1,\"3699\":1,\"3705\":1,\"3706\":2,\"3711\":2,\"3882\":1,\"3962\":1,\"3963\":1,\"4021\":1,\"4022\":1,\"4032\":1,\"4140\":1,\"4162\":1}}],[\"jre\",{\"1\":{\"207\":1,\"3490\":1}}],[\"jar包内配置等模式\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"jar等\",{\"1\":{\"206\":1,\"3489\":1}}],[\"jar\",{\"1\":{\"206\":3,\"207\":1,\"208\":1,\"3489\":3,\"3490\":1,\"3491\":1}}],[\"java框架\",{\"0\":{\"5477\":1}}],[\"java异常类层次结构\",{\"0\":{\"3522\":1}}],[\"java基础\",{\"0\":{\"3518\":1,\"3519\":1,\"5476\":1}}],[\"javac\",{\"1\":{\"2915\":1,\"4140\":1}}],[\"java内存屏障类型把上述两种内存屏障两两组合\",{\"1\":{\"2866\":1,\"4091\":1}}],[\"java内存模型规定\",{\"1\":{\"2857\":1,\"4082\":1}}],[\"java内存模型分为主内存和线程工作内存两大类\",{\"1\":{\"2853\":1,\"4078\":1}}],[\"java语言从\",{\"1\":{\"2817\":1,\"4042\":1}}],[\"java里的进程有哪些状态\",{\"0\":{\"1019\":1,\"1187\":1,\"1355\":1,\"1523\":1,\"4401\":1}}],[\"javaguide\",{\"1\":{\"825\":1,\"2749\":1,\"2933\":1,\"3022\":1,\"3813\":1,\"3974\":1,\"4158\":1,\"4247\":1}}],[\"java高级\",{\"0\":{\"720\":1,\"3708\":1}}],[\"java中有的微服务有dubbo\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"java中还有一个类hashtable\",{\"1\":{\"388\":1}}],[\"java中反射的用法非常非常多\",{\"1\":{\"299\":1,\"3576\":1}}],[\"java官方推荐的实现方式\",{\"0\":{\"557\":1},\"1\":{\"352\":1}}],[\"java反射机制是在运行状态中\",{\"1\":{\"283\":1,\"3560\":1}}],[\"javap\",{\"1\":{\"274\":1,\"2915\":1,\"3551\":1,\"4140\":1}}],[\"java解释器调用main方法执行开始执行程序\",{\"1\":{\"254\":1,\"3539\":1}}],[\"java\",{\"0\":{\"561\":1,\"567\":1,\"591\":1,\"3544\":1,\"5463\":1,\"5464\":1},\"1\":{\"180\":1,\"198\":1,\"200\":1,\"206\":1,\"207\":1,\"209\":1,\"226\":1,\"234\":2,\"238\":1,\"260\":1,\"271\":1,\"274\":2,\"298\":1,\"307\":1,\"311\":1,\"314\":1,\"352\":1,\"455\":2,\"458\":3,\"562\":1,\"563\":1,\"565\":1,\"568\":2,\"572\":1,\"575\":1,\"592\":5,\"593\":1,\"594\":1,\"596\":1,\"599\":1,\"609\":1,\"615\":1,\"617\":3,\"618\":1,\"619\":1,\"624\":1,\"700\":1,\"702\":1,\"714\":1,\"845\":1,\"898\":1,\"1030\":1,\"1033\":1,\"1109\":1,\"1129\":1,\"1134\":4,\"1198\":1,\"1201\":1,\"1277\":1,\"1297\":1,\"1302\":4,\"1366\":1,\"1369\":1,\"1445\":1,\"1465\":1,\"1470\":4,\"1534\":1,\"1537\":1,\"1613\":1,\"1633\":1,\"1638\":4,\"2250\":1,\"2274\":1,\"2737\":1,\"2739\":1,\"2745\":1,\"2749\":2,\"2796\":1,\"2797\":1,\"2817\":1,\"2886\":1,\"2901\":1,\"2909\":1,\"2915\":1,\"2920\":1,\"2933\":2,\"2951\":1,\"2957\":4,\"2969\":1,\"3001\":1,\"3004\":1,\"3022\":2,\"3210\":1,\"3463\":1,\"3481\":1,\"3483\":1,\"3489\":1,\"3490\":1,\"3492\":1,\"3509\":1,\"3517\":2,\"3523\":1,\"3545\":1,\"3548\":1,\"3551\":2,\"3575\":1,\"3584\":1,\"3588\":1,\"3591\":1,\"3688\":1,\"3690\":1,\"3702\":1,\"3833\":1,\"3886\":1,\"3962\":1,\"3964\":1,\"3970\":1,\"3974\":2,\"4021\":1,\"4022\":1,\"4042\":1,\"4111\":1,\"4126\":1,\"4134\":1,\"4140\":1,\"4145\":1,\"4158\":2,\"4176\":1,\"4182\":4,\"4194\":1,\"4226\":1,\"4229\":1,\"4247\":2,\"4412\":1,\"4415\":1,\"4491\":1,\"4511\":1,\"4516\":4,\"4583\":1,\"4607\":1,\"5461\":1}}],[\"jvm会把该线程置为阻塞状态\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"jvm会把该线程放入\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"jvm\",{\"0\":{\"172\":1,\"173\":1,\"175\":1,\"3455\":1,\"3456\":1,\"3458\":1},\"1\":{\"180\":1,\"199\":1,\"200\":1,\"202\":1,\"205\":1,\"234\":1,\"691\":2,\"694\":1,\"697\":2,\"2737\":1,\"2738\":1,\"2770\":1,\"2927\":1,\"2928\":2,\"3463\":1,\"3482\":1,\"3483\":1,\"3485\":1,\"3488\":1,\"3517\":1,\"3679\":2,\"3682\":1,\"3685\":2,\"3962\":1,\"3963\":1,\"3995\":1,\"4152\":1,\"4153\":2}}],[\"会面临的\",{\"1\":{\"3183\":1,\"5434\":1}}],[\"会尝试获取当前\",{\"1\":{\"2928\":1,\"4153\":1}}],[\"会尝试获取实例对象的锁\",{\"1\":{\"2928\":1,\"4153\":1}}],[\"会尝试获取对象的锁\",{\"1\":{\"2922\":1,\"4147\":1}}],[\"会解决这个问题\",{\"1\":{\"2894\":1,\"4119\":1}}],[\"会占用cpu时间片\",{\"1\":{\"2888\":1,\"4113\":1}}],[\"会封装成node加入到aqs中去\",{\"1\":{\"2830\":1,\"4055\":1}}],[\"会在\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"会进入队列等待\",{\"1\":{\"2906\":1,\"4131\":1}}],[\"会进行哪些操作\",{\"1\":{\"2702\":1,\"2705\":1,\"5035\":1,\"5038\":1}}],[\"会进⾏单例对象的创建\",{\"1\":{\"674\":1,\"3662\":1}}],[\"会阻塞\",{\"1\":{\"2646\":1,\"4979\":1}}],[\"会阻塞后续该表的所有\",{\"1\":{\"2415\":1,\"4748\":1}}],[\"会加上\",{\"1\":{\"2525\":1,\"4858\":1}}],[\"会加一个表级别的\",{\"1\":{\"2434\":1,\"4767\":1}}],[\"会对记录加上读写锁\",{\"1\":{\"2512\":1,\"4845\":1}}],[\"会被回滚到事务开始前的状态\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"会被分配一个唯一的pid\",{\"1\":{\"979\":1,\"5126\":1}}],[\"会为被\",{\"1\":{\"2438\":1,\"4771\":1}}],[\"会影响插入性能\",{\"1\":{\"2436\":1,\"4769\":1}}],[\"会影响并发性能\",{\"1\":{\"2398\":1,\"4731\":1}}],[\"会自动给这个表加上\",{\"1\":{\"2401\":1,\"4734\":1}}],[\"会自动先检查表中是否有唯一索引且不允许存在\",{\"1\":{\"2296\":1,\"4629\":1}}],[\"会释放当前会话的所有表锁\",{\"1\":{\"2395\":1,\"4728\":1}}],[\"会先创建\",{\"1\":{\"2378\":1,\"4711\":1}}],[\"会去问它的根域名服务器\",{\"1\":{\"2214\":1,\"5267\":1}}],[\"会发生什么\",{\"0\":{\"2101\":1,\"2102\":1,\"2103\":1,\"2108\":1,\"2109\":1,\"2110\":1,\"2111\":1},\"1\":{\"1986\":1,\"1987\":1,\"1988\":1,\"1993\":1,\"1994\":1,\"1995\":1,\"1996\":1}}],[\"会有一定的开销\",{\"1\":{\"2066\":1}}],[\"会有比较大的延迟\",{\"1\":{\"1872\":1,\"3949\":1}}],[\"会有数据库不一致的问题\",{\"0\":{\"1866\":1,\"3943\":1}}],[\"会向初始化投票一样首先给自己投票\",{\"1\":{\"1805\":1,\"4365\":1}}],[\"会导致\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"会导致所有的服务器间同步状态\",{\"1\":{\"1774\":1,\"4334\":1}}],[\"会导致相同的key\",{\"1\":{\"940\":1,\"5087\":1}}],[\"会将自己的状态\",{\"1\":{\"1805\":1,\"4365\":1}}],[\"会将每秒请求数\",{\"1\":{\"1760\":1,\"4320\":1}}],[\"会将数据发给子线程里的\",{\"1\":{\"1162\":1,\"1330\":1,\"1498\":1,\"1666\":1,\"4544\":1}}],[\"会执行数据清除工作\",{\"1\":{\"929\":1,\"5076\":1}}],[\"会清除下一个分区片段的数据\",{\"1\":{\"928\":1,\"5075\":1}}],[\"会根据统一信息\",{\"1\":{\"2346\":1,\"4679\":1}}],[\"会根据联合索引中的字段顺序\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"会根据类别搜索\",{\"0\":{\"1860\":1,\"3937\":1}}],[\"会根据\",{\"1\":{\"730\":1,\"3718\":1}}],[\"会比使用\",{\"1\":{\"633\":1}}],[\"会触发扩容\",{\"1\":{\"431\":1}}],[\"会读取配置文件applicationcontext\",{\"1\":{\"325\":1,\"3602\":1}}],[\"会走默认无参构造方法\",{\"1\":{\"316\":1,\"3593\":1}}],[\"会把数据锁住\",{\"1\":{\"2880\":1,\"4105\":1}}],[\"会把数据库打挂\",{\"0\":{\"1878\":1,\"3955\":1}}],[\"会把首节点唤醒\",{\"1\":{\"2829\":1,\"4054\":1}}],[\"会把磁盘的数据拷贝到内核的缓冲区里\",{\"1\":{\"1086\":1,\"1254\":1,\"1422\":1,\"1590\":1,\"4468\":1}}],[\"会把自己消费过的消息的offset提交一下\",{\"1\":{\"975\":1,\"5122\":1}}],[\"会把\",{\"1\":{\"180\":1,\"3463\":1}}],[\"会使用跳表作为\",{\"1\":{\"2631\":1,\"4964\":1}}],[\"会使用哈希表作为\",{\"1\":{\"2623\":1,\"4956\":1}}],[\"会使用整数集合作为\",{\"1\":{\"2615\":1,\"4948\":1}}],[\"会使用双向链表作为\",{\"1\":{\"2608\":1,\"4941\":1}}],[\"会使用压缩列表作为\",{\"1\":{\"2607\":1,\"2622\":1,\"2630\":1,\"4940\":1,\"4955\":1,\"4963\":1}}],[\"会使用该\",{\"1\":{\"2536\":1,\"4869\":1}}],[\"会使用\",{\"1\":{\"35\":1,\"723\":2,\"3323\":1,\"3711\":2}}],[\"本地方法栈\",{\"1\":{\"2855\":1,\"4080\":1}}],[\"本地\",{\"1\":{\"2214\":1,\"2216\":1,\"2218\":1,\"2220\":1,\"5267\":1,\"5269\":1,\"5271\":1,\"5273\":1}}],[\"本地域名服务器收到客户端的请求后\",{\"1\":{\"2214\":1,\"5267\":1}}],[\"本地库接口\",{\"1\":{\"179\":1,\"3462\":1}}],[\"本质上是多路复用+轮询\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"本子网内不会有设备成功接收\",{\"1\":{\"2166\":1,\"5219\":1}}],[\"本身可能会丢数据\",{\"1\":{\"3184\":1,\"5435\":1}}],[\"本身却是\",{\"1\":{\"2909\":1,\"4134\":1}}],[\"本身去实现的\",{\"1\":{\"2909\":1,\"4134\":1}}],[\"本身没有实现任何接口\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"本身的处理既简单又高效\",{\"1\":{\"2078\":1}}],[\"本身提供了很多接口可以获取当前项目的各项运行状态指标\",{\"1\":{\"878\":1,\"3866\":1}}],[\"本身就是对方法的增强\",{\"1\":{\"809\":1,\"3797\":1}}],[\"本章节涉及到的\",{\"1\":{\"811\":1,\"3799\":1}}],[\"本页面就是一个示例\",{\"1\":{\"9\":1,\"3297\":1}}],[\"duo\",{\"0\":{\"5472\":1}}],[\"durability\",{\"1\":{\"2486\":1,\"4819\":1}}],[\"dubbo\",{\"1\":{\"1737\":1,\"4297\":1}}],[\"drop\",{\"1\":{\"2369\":1,\"4702\":1}}],[\"dns\",{\"0\":{\"2200\":1,\"5253\":1},\"1\":{\"2079\":1,\"2132\":1,\"2201\":1,\"2206\":1,\"2207\":1,\"2208\":1,\"2209\":2,\"2210\":2,\"2211\":3,\"2213\":3,\"2214\":1,\"2215\":2,\"2216\":1,\"2217\":1,\"2218\":3,\"2219\":2,\"2220\":1,\"2225\":1,\"5185\":1,\"5254\":1,\"5259\":1,\"5260\":1,\"5261\":1,\"5262\":2,\"5263\":2,\"5264\":3,\"5266\":3,\"5267\":1,\"5268\":2,\"5269\":1,\"5270\":1,\"5271\":3,\"5272\":2,\"5273\":1}}],[\"db\",{\"1\":{\"1869\":1,\"2531\":2,\"2534\":1,\"2535\":1,\"2536\":1,\"2679\":1,\"2680\":1,\"2681\":1,\"2683\":1,\"2686\":1,\"3112\":1,\"3946\":1,\"4864\":2,\"4867\":1,\"4868\":1,\"4869\":1,\"5012\":1,\"5013\":1,\"5014\":1,\"5016\":1,\"5019\":1,\"5363\":1}}],[\"dma\",{\"1\":{\"1086\":1,\"1088\":1,\"1098\":2,\"1099\":1,\"1100\":1,\"1101\":1,\"1104\":1,\"1105\":1,\"1254\":1,\"1256\":1,\"1266\":2,\"1267\":1,\"1268\":1,\"1269\":1,\"1272\":1,\"1273\":1,\"1422\":1,\"1424\":1,\"1434\":2,\"1435\":1,\"1436\":1,\"1437\":1,\"1440\":1,\"1441\":1,\"1590\":1,\"1592\":1,\"1602\":2,\"1603\":1,\"1604\":1,\"1605\":1,\"1608\":1,\"1609\":1,\"4468\":1,\"4470\":1,\"4480\":2,\"4481\":1,\"4482\":1,\"4483\":1,\"4486\":1,\"4487\":1}}],[\"daemon\",{\"1\":{\"1698\":1,\"1699\":1,\"4258\":1,\"4259\":1}}],[\"dao接口原理\",{\"0\":{\"879\":1,\"3867\":1}}],[\"database\",{\"0\":{\"5471\":1}}],[\"data\",{\"1\":{\"177\":1,\"180\":1,\"458\":4,\"460\":1,\"2259\":1,\"2271\":2,\"2275\":3,\"2276\":2,\"3460\":1,\"3463\":1,\"4592\":1,\"4604\":2,\"4608\":3,\"4609\":2}}],[\"digest\",{\"1\":{\"3213\":1}}],[\"distribution\",{\"0\":{\"5468\":1}}],[\"discardpolicy\",{\"1\":{\"2957\":1,\"2975\":1,\"4182\":1,\"4200\":1}}],[\"discardoldestpolicy\",{\"1\":{\"2957\":1,\"2976\":1,\"4182\":1,\"4201\":1}}],[\"dispatch\",{\"1\":{\"1141\":2,\"1143\":1,\"1158\":1,\"1309\":2,\"1311\":1,\"1326\":1,\"1477\":2,\"1479\":1,\"1494\":1,\"1645\":2,\"1647\":1,\"1662\":1,\"4523\":2,\"4525\":1,\"4540\":1}}],[\"dispatcherservlet\",{\"1\":{\"730\":2,\"733\":1,\"734\":1,\"735\":1,\"741\":1,\"3718\":2,\"3721\":1,\"3722\":1,\"3723\":1,\"3729\":1}}],[\"dict\",{\"1\":{\"2683\":1,\"5016\":1}}],[\"dir\",{\"1\":{\"2653\":1,\"4986\":1}}],[\"direct\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"dirs\",{\"1\":{\"207\":1,\"3490\":1}}],[\"dialect\",{\"1\":{\"892\":1,\"3880\":1}}],[\"dcl\",{\"1\":{\"672\":1,\"3660\":1}}],[\"dlgdlgd\",{\"1\":{\"636\":1}}],[\"docker容器网络环境\",{\"1\":{\"1702\":1,\"4262\":1}}],[\"docker的架构\",{\"0\":{\"1695\":1,\"4255\":1}}],[\"docker\",{\"0\":{\"1688\":1,\"1689\":1,\"1690\":1,\"4248\":1,\"4249\":1,\"4250\":1},\"1\":{\"1691\":1,\"1692\":1,\"1693\":1,\"1696\":1,\"1698\":2,\"1699\":4,\"1700\":2,\"1701\":1,\"1702\":1,\"1703\":1,\"3095\":1,\"4251\":1,\"4252\":1,\"4253\":1,\"4256\":1,\"4258\":2,\"4259\":4,\"4260\":2,\"4261\":1,\"4262\":1,\"4263\":1,\"5346\":1}}],[\"download\",{\"1\":{\"972\":1,\"981\":2,\"5119\":1,\"5128\":2}}],[\"do\",{\"1\":{\"492\":1,\"494\":1}}],[\"double\",{\"1\":{\"258\":1,\"672\":1,\"738\":1,\"2564\":1,\"3543\":1,\"3660\":1,\"3726\":1,\"4897\":1}}],[\"d\",{\"1\":{\"263\":1}}],[\"delayedworkqueue\",{\"1\":{\"2983\":3,\"4208\":3}}],[\"deleted\",{\"1\":{\"2534\":1,\"4867\":1}}],[\"delete\",{\"1\":{\"898\":1,\"912\":1,\"2368\":1,\"2534\":1,\"3886\":1,\"3900\":1,\"4701\":1,\"4867\":1}}],[\"delegation\",{\"1\":{\"224\":1,\"3507\":1}}],[\"decimal\",{\"0\":{\"2563\":1,\"4896\":1},\"1\":{\"2565\":1,\"2566\":2,\"2567\":2,\"4898\":1,\"4899\":2,\"4900\":2}}],[\"dead\",{\"1\":{\"1025\":1,\"1193\":1,\"1361\":1,\"1529\":1,\"4407\":1}}],[\"depth\",{\"1\":{\"981\":1,\"5128\":1}}],[\"dependencies\",{\"1\":{\"866\":1,\"3854\":1}}],[\"dependency>\",{\"1\":{\"846\":1,\"3834\":1}}],[\"deprecated\",{\"1\":{\"593\":1}}],[\"developer\",{\"1\":{\"1870\":1,\"3947\":1}}],[\"devtools<\",{\"1\":{\"846\":1,\"3834\":1}}],[\"devtools\",{\"1\":{\"845\":2,\"3833\":2}}],[\"dev\",{\"1\":{\"845\":1,\"3833\":1}}],[\"des\",{\"1\":{\"3274\":1,\"3277\":1}}],[\"design\",{\"1\":{\"667\":1,\"825\":1,\"3655\":1,\"3813\":1}}],[\"desc\",{\"1\":{\"81\":1,\"3369\":1}}],[\"defaultthreadfactory\",{\"1\":{\"2957\":1,\"4182\":1}}],[\"defaultcapacity\",{\"1\":{\"484\":1}}],[\"defaultwriteobject\",{\"1\":{\"455\":1}}],[\"default\",{\"1\":{\"392\":1,\"398\":1,\"402\":1,\"484\":1,\"768\":1,\"3756\":1}}],[\"deque<integer>\",{\"1\":{\"566\":1,\"597\":1}}],[\"deque\",{\"0\":{\"557\":1,\"610\":1},\"1\":{\"352\":1,\"564\":2,\"596\":1,\"609\":1,\"611\":1,\"612\":1,\"615\":1,\"616\":1,\"620\":1,\"621\":2,\"624\":1}}],[\"details\",{\"1\":{\"326\":1,\"519\":1,\"548\":1,\"636\":1,\"886\":1,\"919\":1,\"972\":1,\"981\":1,\"995\":1,\"2554\":1,\"2733\":1,\"2749\":1,\"2911\":1,\"3288\":2,\"3520\":1,\"3603\":1,\"3608\":1,\"3874\":1,\"3907\":1,\"3974\":1,\"4136\":1,\"4887\":1,\"5066\":1,\"5119\":1,\"5128\":1,\"5142\":1}}],[\"cs\",{\"0\":{\"5470\":1}}],[\"csrf\",{\"1\":{\"3134\":1,\"5385\":1}}],[\"csdn\",{\"1\":{\"326\":1,\"519\":1,\"548\":1,\"636\":1,\"886\":1,\"919\":1,\"972\":1,\"981\":1,\"995\":1,\"2554\":1,\"2733\":1,\"2749\":1,\"2911\":1,\"3288\":2,\"3520\":1,\"3603\":1,\"3608\":1,\"3874\":1,\"3907\":1,\"3974\":1,\"4136\":1,\"4887\":1,\"5066\":1,\"5119\":1,\"5128\":1,\"5142\":1}}],[\"cmpxchg\",{\"1\":{\"2795\":1,\"4020\":1}}],[\"creates\",{\"1\":{\"2959\":2,\"4184\":2}}],[\"createmap\",{\"1\":{\"2944\":1,\"4169\":1}}],[\"creator\",{\"1\":{\"2538\":1,\"2543\":1,\"4871\":1,\"4876\":1}}],[\"craig\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"crud\",{\"1\":{\"2402\":1,\"2404\":1,\"2406\":1,\"2415\":1,\"4735\":1,\"4737\":1,\"4739\":1,\"4748\":1}}],[\"city\",{\"1\":{\"2350\":1,\"4683\":1}}],[\"cp\",{\"1\":{\"1834\":3,\"1836\":2,\"4394\":3,\"4396\":2}}],[\"cpu达到100\",{\"1\":{\"3087\":1,\"5338\":1}}],[\"cpu太快\",{\"1\":{\"660\":1,\"3648\":1}}],[\"cpu\",{\"1\":{\"180\":1,\"582\":2,\"1051\":1,\"1087\":1,\"1090\":1,\"1098\":1,\"1104\":1,\"1105\":1,\"1149\":1,\"1152\":1,\"1164\":1,\"1219\":1,\"1255\":1,\"1258\":1,\"1266\":1,\"1272\":1,\"1273\":1,\"1317\":1,\"1320\":1,\"1332\":1,\"1387\":1,\"1423\":1,\"1426\":1,\"1434\":1,\"1440\":1,\"1441\":1,\"1485\":1,\"1488\":1,\"1500\":1,\"1555\":1,\"1591\":1,\"1594\":1,\"1602\":1,\"1608\":1,\"1609\":1,\"1653\":1,\"1656\":1,\"1668\":1,\"2576\":1,\"2581\":1,\"2671\":1,\"2672\":1,\"2673\":1,\"2778\":1,\"2795\":2,\"2809\":1,\"2810\":1,\"2816\":1,\"2890\":1,\"2891\":1,\"2905\":1,\"2907\":1,\"2992\":6,\"2993\":2,\"3463\":1,\"4003\":1,\"4020\":2,\"4034\":1,\"4035\":1,\"4041\":1,\"4115\":1,\"4116\":1,\"4130\":1,\"4132\":1,\"4217\":6,\"4218\":2,\"4433\":1,\"4469\":1,\"4472\":1,\"4480\":1,\"4486\":1,\"4487\":1,\"4531\":1,\"4534\":1,\"4546\":1,\"4909\":1,\"4914\":1,\"5004\":1,\"5005\":1,\"5006\":1}}],[\"cgroup\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"cglibcode\",{\"1\":{\"711\":1,\"3699\":1}}],[\"cglib\",{\"0\":{\"708\":1,\"716\":1,\"3696\":1,\"3704\":1},\"1\":{\"696\":1,\"700\":1,\"710\":1,\"711\":2,\"712\":1,\"717\":2,\"723\":1,\"3684\":1,\"3688\":1,\"3698\":1,\"3699\":2,\"3700\":1,\"3705\":2,\"3711\":1}}],[\"ctl\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"4438\":1}}],[\"cyclicbarrier\",{\"1\":{\"1033\":1,\"1201\":1,\"1369\":1,\"1537\":1,\"4415\":1}}],[\"c2订阅t0\",{\"1\":{\"959\":1,\"5106\":1}}],[\"c2\",{\"1\":{\"955\":1,\"959\":1,\"969\":1,\"5102\":1,\"5106\":1,\"5116\":1}}],[\"c2多分配两个分区了\",{\"1\":{\"950\":1,\"5097\":1}}],[\"c2多分配一个分区\",{\"1\":{\"950\":1,\"5097\":1}}],[\"c10k\",{\"1\":{\"1060\":1,\"1073\":3,\"1228\":1,\"1241\":3,\"1396\":1,\"1409\":3,\"1564\":1,\"1577\":3,\"4442\":1,\"4455\":3}}],[\"c1订阅t0和t1\",{\"1\":{\"959\":1,\"5106\":1}}],[\"c1\",{\"1\":{\"954\":1,\"959\":1,\"969\":1,\"5101\":1,\"5106\":1,\"5116\":1}}],[\"c0\",{\"1\":{\"953\":1,\"969\":1,\"5100\":1,\"5116\":1}}],[\"c0会多分配一个分区\",{\"1\":{\"950\":1,\"5097\":1}}],[\"currentthread\",{\"1\":{\"2944\":1,\"2945\":1,\"4169\":1,\"4170\":1}}],[\"currenttimemillis\",{\"1\":{\"630\":4}}],[\"currentcounter\",{\"1\":{\"940\":3,\"5087\":3}}],[\"current\",{\"1\":{\"940\":1,\"5087\":1}}],[\"customexception\",{\"1\":{\"835\":3,\"836\":2,\"3823\":3,\"3824\":2}}],[\"cn\",{\"1\":{\"825\":1,\"831\":1,\"2749\":1,\"2933\":1,\"3022\":1,\"3813\":1,\"3819\":1,\"3974\":1,\"4158\":1,\"4247\":1}}],[\"cache\",{\"1\":{\"3110\":1,\"3112\":2,\"5361\":1,\"5363\":2}}],[\"cachedthreadpool\",{\"1\":{\"2982\":2,\"2998\":1,\"3007\":1,\"4207\":2,\"4223\":1,\"4232\":1}}],[\"callerrunspolicy\",{\"1\":{\"2957\":1,\"2974\":1,\"2977\":1,\"4182\":1,\"4199\":1,\"4202\":1}}],[\"callback\",{\"1\":{\"714\":1,\"3702\":1}}],[\"cas操作\",{\"1\":{\"2850\":1,\"4075\":1}}],[\"cas有哪些问题\",{\"1\":{\"2800\":1,\"4025\":1}}],[\"cas机制当中使用了3个基本操作数\",{\"1\":{\"2779\":1,\"4004\":1}}],[\"cas是乐观锁\",{\"1\":{\"2776\":1,\"4001\":1}}],[\"cas\",{\"0\":{\"2771\":1,\"2777\":1,\"2793\":1,\"2798\":1,\"3996\":1,\"4002\":1,\"4018\":1,\"4023\":1},\"1\":{\"2755\":1,\"2756\":3,\"2766\":1,\"2778\":1,\"2794\":1,\"2795\":2,\"2796\":2,\"2797\":1,\"2799\":1,\"2802\":2,\"2809\":1,\"2812\":2,\"2816\":1,\"2817\":1,\"2818\":1,\"2891\":1,\"3980\":1,\"3981\":3,\"3991\":1,\"4003\":1,\"4019\":1,\"4020\":2,\"4021\":2,\"4022\":1,\"4024\":1,\"4027\":2,\"4034\":1,\"4037\":2,\"4041\":1,\"4042\":1,\"4043\":1,\"4116\":1}}],[\"cassandra\",{\"1\":{\"1834\":1,\"4394\":1}}],[\"ca\",{\"1\":{\"1834\":1,\"1835\":1,\"4394\":1,\"4395\":1}}],[\"capacities\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"capacityincrement来初始化的时候\",{\"1\":{\"470\":1}}],[\"capacityincrement\",{\"1\":{\"458\":2,\"470\":2}}],[\"capacity可以用threshold表示\",{\"1\":{\"431\":1}}],[\"capacity的值时\",{\"1\":{\"431\":1}}],[\"capacity表示当前hashmap的容量是多少\",{\"1\":{\"431\":1}}],[\"capacity就从16扩容到32了\",{\"1\":{\"427\":1}}],[\"capacity\",{\"0\":{\"404\":1},\"1\":{\"392\":1,\"401\":1,\"402\":1,\"406\":5,\"408\":1,\"409\":1,\"411\":15,\"412\":3,\"420\":1,\"424\":10,\"426\":2,\"484\":1}}],[\"cap\",{\"0\":{\"1820\":1,\"4380\":1},\"1\":{\"1822\":1,\"1824\":2,\"1831\":2,\"1833\":1,\"4382\":1,\"4384\":2,\"4391\":2,\"4393\":1}}],[\"catch语句捕获它\",{\"1\":{\"243\":1,\"249\":1,\"3528\":1,\"3534\":1}}],[\"catch\",{\"1\":{\"227\":1,\"261\":2,\"263\":3,\"272\":1,\"836\":2,\"3510\":1,\"3546\":2,\"3549\":1,\"3824\":2}}],[\"clh\",{\"1\":{\"2831\":1,\"2832\":3,\"2833\":1,\"4056\":1,\"4057\":3,\"4058\":1}}],[\"clustered\",{\"1\":{\"2308\":1,\"2317\":1,\"4641\":1,\"4650\":1}}],[\"cluster\",{\"1\":{\"940\":4,\"5087\":4}}],[\"client\",{\"1\":{\"1073\":1,\"1163\":1,\"1241\":1,\"1331\":1,\"1409\":1,\"1499\":1,\"1577\":1,\"1667\":1,\"1698\":1,\"1699\":1,\"4258\":1,\"4259\":1,\"4455\":1,\"4545\":1}}],[\"cli是一个命令行使用spring\",{\"1\":{\"873\":1,\"3861\":1}}],[\"cli\",{\"1\":{\"871\":1,\"3859\":1}}],[\"clear\",{\"1\":{\"492\":1}}],[\"cloud全家桶技术\",{\"1\":{\"3100\":1,\"5351\":1}}],[\"cloud你用过的组件\",{\"1\":{\"3076\":1,\"5327\":1}}],[\"cloud项目部署架构\",{\"1\":{\"1744\":1,\"4304\":1}}],[\"cloud的呢\",{\"1\":{\"1737\":1,\"4297\":1}}],[\"cloud的优缺点以及组件\",{\"0\":{\"1733\":1,\"4293\":1}}],[\"cloud并没有重复制造轮子\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"cloud是一系列框架的有序集合\",{\"1\":{\"1709\":1,\"4269\":1}}],[\"cloud\",{\"0\":{\"1706\":1,\"1707\":1,\"1708\":1,\"4266\":1,\"4267\":1,\"4268\":1,\"5468\":1,\"5481\":1},\"1\":{\"841\":1,\"1739\":2,\"1743\":9,\"1870\":1,\"3095\":1,\"3099\":1,\"3101\":1,\"3829\":1,\"3947\":1,\"4299\":2,\"4303\":9,\"5346\":1,\"5350\":1,\"5352\":1}}],[\"clone\",{\"1\":{\"458\":1,\"460\":1,\"461\":1}}],[\"close\",{\"0\":{\"2117\":1,\"2124\":1},\"1\":{\"263\":4,\"912\":1,\"2002\":1,\"2009\":1,\"3900\":1}}],[\"clazzb\",{\"1\":{\"793\":3,\"3781\":3}}],[\"clazza\",{\"1\":{\"793\":4,\"3781\":4}}],[\"clazz\",{\"1\":{\"297\":2,\"3574\":2}}],[\"classes配置\",{\"1\":{\"851\":1,\"3839\":1}}],[\"class对象就可以对它为所欲为了\",{\"1\":{\"308\":1,\"3585\":1}}],[\"classname\",{\"1\":{\"297\":2,\"3574\":2}}],[\"classnotfoundexception\",{\"1\":{\"227\":2,\"3510\":2}}],[\"class<hashmap>\",{\"1\":{\"303\":1,\"3580\":1}}],[\"class<\",{\"1\":{\"212\":1,\"227\":1,\"305\":1,\"307\":1,\"311\":1,\"314\":1,\"406\":1,\"411\":3,\"424\":1,\"704\":1,\"3495\":1,\"3510\":1,\"3582\":1,\"3584\":1,\"3588\":1,\"3591\":1,\"3692\":1}}],[\"classpath\",{\"1\":{\"208\":1,\"3491\":1}}],[\"class\",{\"1\":{\"192\":2,\"193\":1,\"200\":2,\"209\":1,\"212\":1,\"213\":1,\"227\":1,\"274\":1,\"297\":2,\"300\":1,\"302\":2,\"303\":1,\"304\":1,\"306\":2,\"307\":1,\"310\":1,\"311\":1,\"314\":1,\"321\":2,\"323\":2,\"673\":2,\"691\":1,\"694\":1,\"793\":3,\"835\":1,\"836\":3,\"2745\":1,\"2914\":1,\"2915\":2,\"2925\":1,\"2928\":1,\"2941\":1,\"2957\":1,\"3475\":2,\"3476\":1,\"3483\":2,\"3492\":1,\"3495\":1,\"3496\":1,\"3510\":1,\"3551\":1,\"3574\":2,\"3577\":1,\"3579\":2,\"3580\":1,\"3581\":1,\"3583\":2,\"3584\":1,\"3587\":1,\"3588\":1,\"3591\":1,\"3598\":2,\"3600\":2,\"3661\":2,\"3679\":1,\"3682\":1,\"3781\":3,\"3823\":1,\"3824\":3,\"3970\":1,\"4139\":1,\"4140\":2,\"4150\":1,\"4153\":1,\"4166\":1,\"4182\":1}}],[\"classloader的子类重写\",{\"1\":{\"216\":1,\"3499\":1}}],[\"classloader抽象类\",{\"1\":{\"210\":1,\"3493\":1}}],[\"classloader\",{\"1\":{\"176\":1,\"180\":1,\"198\":1,\"199\":1,\"203\":1,\"205\":1,\"211\":1,\"215\":1,\"217\":1,\"221\":1,\"223\":1,\"226\":1,\"704\":1,\"3459\":1,\"3463\":1,\"3481\":1,\"3482\":1,\"3486\":1,\"3488\":1,\"3494\":1,\"3498\":1,\"3500\":1,\"3504\":1,\"3506\":1,\"3509\":1,\"3692\":1}}],[\"cheng\",{\"0\":{\"5472\":1}}],[\"checked\",{\"0\":{\"246\":1,\"3531\":1},\"1\":{\"672\":1,\"3660\":1}}],[\"chang\",{\"0\":{\"5469\":1}}],[\"char\",{\"1\":{\"2282\":1,\"2292\":1,\"4615\":1,\"4625\":1}}],[\"charsets\",{\"1\":{\"206\":1,\"3489\":1}}],[\"chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c\",{\"1\":{\"3022\":1,\"4247\":1}}],[\"chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e\",{\"1\":{\"2877\":1,\"4102\":1}}],[\"chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1\",{\"1\":{\"2772\":1,\"3997\":1}}],[\"chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34\",{\"1\":{\"831\":1,\"3819\":1}}],[\"choose\",{\"1\":{\"940\":1,\"5087\":1}}],[\"c\",{\"1\":{\"212\":1,\"227\":9,\"274\":1,\"1073\":1,\"1130\":1,\"1133\":2,\"1152\":1,\"1241\":1,\"1298\":1,\"1301\":2,\"1320\":1,\"1409\":1,\"1466\":1,\"1469\":2,\"1488\":1,\"1577\":1,\"1634\":1,\"1637\":2,\"1656\":1,\"1696\":1,\"1832\":1,\"1833\":1,\"1835\":2,\"1837\":1,\"2412\":2,\"2413\":1,\"2414\":1,\"2596\":3,\"2598\":1,\"2817\":1,\"2915\":1,\"3495\":1,\"3510\":9,\"3551\":1,\"4042\":1,\"4140\":1,\"4256\":1,\"4392\":1,\"4393\":1,\"4395\":2,\"4397\":1,\"4455\":1,\"4512\":1,\"4515\":2,\"4534\":1,\"4745\":2,\"4746\":1,\"4747\":1,\"4929\":3,\"4931\":1}}],[\"c++实现的\",{\"1\":{\"2920\":1,\"4145\":1}}],[\"c++实现\",{\"1\":{\"206\":1,\"3489\":1}}],[\"cookie\",{\"1\":{\"3134\":1,\"5385\":1}}],[\"core\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"corepoolsize\",{\"1\":{\"2959\":8,\"2961\":1,\"2965\":1,\"4184\":8,\"4186\":1,\"4190\":1}}],[\"correctstack\",{\"1\":{\"617\":1}}],[\"covering\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"copy\",{\"1\":{\"1104\":1,\"1272\":1,\"1440\":1,\"1608\":1,\"4486\":1}}],[\"copyof方法最终调用native方法进行新数组创建和数据拷贝\",{\"1\":{\"469\":1}}],[\"com对应的ip是啥呀\",{\"1\":{\"2218\":1,\"5271\":1}}],[\"commit\",{\"1\":{\"898\":1,\"912\":1,\"1813\":2,\"1818\":2,\"2246\":1,\"3886\":1,\"3900\":1,\"4373\":2,\"4378\":2,\"4579\":1}}],[\"committed\",{\"1\":{\"768\":1,\"770\":1,\"2510\":1,\"3756\":1,\"3758\":1,\"4843\":1}}],[\"com\",{\"1\":{\"621\":1,\"831\":1,\"1074\":1,\"1183\":1,\"1242\":1,\"1351\":1,\"1410\":1,\"1519\":1,\"1578\":1,\"1687\":1,\"1870\":1,\"2201\":1,\"2203\":1,\"2204\":2,\"2207\":1,\"2208\":1,\"2213\":1,\"2214\":2,\"2215\":4,\"2216\":1,\"2217\":1,\"2218\":1,\"2772\":1,\"2820\":1,\"2877\":1,\"2957\":1,\"3022\":1,\"3288\":1,\"3819\":1,\"3947\":1,\"3997\":1,\"4045\":1,\"4102\":1,\"4182\":1,\"4247\":1,\"4456\":1,\"4565\":1,\"5254\":1,\"5256\":1,\"5257\":2,\"5260\":1,\"5261\":1,\"5266\":1,\"5267\":2,\"5268\":4,\"5269\":1,\"5270\":1,\"5271\":1}}],[\"compareandset\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"compareandse方法首先检查当前引用是否等于预期引用\",{\"1\":{\"2807\":1,\"4032\":1}}],[\"compare和swap\",{\"1\":{\"2794\":1,\"4019\":1}}],[\"compare\",{\"1\":{\"2778\":1,\"2786\":1,\"2816\":1,\"4003\":1,\"4011\":1,\"4041\":1}}],[\"compatibility\",{\"1\":{\"592\":1}}],[\"compression\",{\"1\":{\"2188\":1,\"5241\":1}}],[\"component把监听器加入spring容器中管理\",{\"1\":{\"850\":1,\"3838\":1}}],[\"composition\",{\"1\":{\"575\":1,\"589\":1}}],[\"condition\",{\"1\":{\"2333\":1,\"2742\":1,\"2844\":1,\"3967\":1,\"4069\":1,\"4666\":1}}],[\"conditional按需加载的配置类\",{\"1\":{\"816\":1,\"3804\":1}}],[\"connections\",{\"1\":{\"2191\":1,\"5162\":1,\"5244\":1}}],[\"conf\",{\"1\":{\"2642\":1,\"4975\":1}}],[\"conflict\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"config\",{\"1\":{\"1743\":1,\"3165\":1,\"4303\":1,\"5416\":1}}],[\"config配置中心时\",{\"1\":{\"841\":1,\"3829\":1}}],[\"content\",{\"1\":{\"2182\":1,\"3166\":1,\"5235\":1,\"5417\":1}}],[\"continue\",{\"1\":{\"949\":1,\"2182\":1,\"5096\":1,\"5235\":1}}],[\"controlleradvice\",{\"1\":{\"832\":1,\"836\":1,\"3820\":1,\"3824\":1}}],[\"controller\",{\"1\":{\"736\":1,\"752\":1,\"833\":1,\"3724\":1,\"3740\":1,\"3821\":1}}],[\"concurrent包中\",{\"1\":{\"2797\":1,\"4022\":1}}],[\"concurrent\",{\"1\":{\"2749\":2,\"2933\":2,\"2957\":4,\"3022\":2,\"3974\":2,\"4158\":2,\"4182\":4,\"4247\":2}}],[\"concurrenthashmap为什么用红黑树\",{\"1\":{\"3077\":1,\"5328\":1}}],[\"concurrenthashmap在每一个分段上都用锁进行了保护\",{\"1\":{\"551\":1}}],[\"concurrenthashmap对桶数组进行了分段\",{\"1\":{\"550\":1}}],[\"concurrenthashmap和hashmap的实现方式不一样\",{\"1\":{\"550\":1}}],[\"concurrenthashmap区别\",{\"0\":{\"549\":1}}],[\"concurrenthashmap虽然也是线程安全的\",{\"1\":{\"544\":1}}],[\"concurrentmodificationexception\",{\"1\":{\"455\":1}}],[\"consumer\",{\"1\":{\"3115\":1,\"5366\":1}}],[\"consumer从mq里面读取数据是有序的\",{\"1\":{\"986\":1,\"5133\":1}}],[\"consumerswithextrapartition\",{\"1\":{\"949\":3,\"5096\":3}}],[\"consumersfortopic\",{\"1\":{\"949\":6,\"5096\":6}}],[\"consumerspertopic\",{\"1\":{\"949\":3,\"5096\":3}}],[\"conscious\",{\"1\":{\"480\":1}}],[\"consistency\",{\"1\":{\"458\":1,\"1822\":1,\"1825\":1,\"2484\":1,\"4382\":1,\"4385\":1,\"4817\":1}}],[\"constuctor\",{\"1\":{\"323\":1,\"3600\":1}}],[\"constructor<\",{\"1\":{\"314\":1,\"3591\":1}}],[\"constructor\",{\"1\":{\"297\":3,\"313\":1,\"314\":3,\"315\":2,\"322\":1,\"323\":3,\"3574\":3,\"3590\":1,\"3591\":3,\"3592\":2,\"3599\":1,\"3600\":3}}],[\"const\",{\"1\":{\"45\":1,\"3333\":1}}],[\"countdownlatch等\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"counter\",{\"1\":{\"940\":6,\"5087\":6}}],[\"count\",{\"1\":{\"455\":1,\"1093\":1,\"1261\":1,\"1429\":1,\"1597\":1,\"4475\":1}}],[\"collections中的一个静态内部类\",{\"1\":{\"472\":1}}],[\"collections\",{\"1\":{\"331\":1,\"476\":1,\"949\":1,\"5096\":1}}],[\"collection接口在java\",{\"1\":{\"329\":1}}],[\"collection\",{\"1\":{\"329\":1}}],[\"color\",{\"1\":{\"81\":1,\"3369\":1}}],[\"code\",{\"1\":{\"274\":1,\"458\":1,\"480\":1,\"2959\":12,\"3551\":1,\"4184\":12}}],[\"及其作用\",{\"0\":{\"175\":1,\"3458\":1}}],[\"二面\",{\"0\":{\"3033\":1,\"5284\":1}}],[\"二级索引\",{\"0\":{\"2298\":1,\"4631\":1},\"1\":{\"2285\":1,\"2299\":1,\"2317\":1,\"4618\":1,\"4632\":1,\"4650\":1}}],[\"二级缓存的执行流程\",{\"1\":{\"917\":1,\"3905\":1}}],[\"二级缓存的生命周期和应用同步\",{\"1\":{\"914\":1,\"3902\":1}}],[\"二级缓存进行增删改操作也会刷新二级缓存\",{\"1\":{\"916\":1,\"3904\":1}}],[\"二级缓存总是默认开启的\",{\"1\":{\"915\":1,\"3903\":1}}],[\"二级缓存cache中readonly属性如果为false\",{\"1\":{\"913\":1,\"3901\":1}}],[\"二级缓存需要手动配置\",{\"1\":{\"911\":1,\"3899\":1}}],[\"二级缓存作用域是针对mapper进行缓存\",{\"1\":{\"910\":1,\"3898\":1}}],[\"二级缓存\",{\"0\":{\"896\":1,\"899\":1,\"3884\":1,\"3887\":1}}],[\"二级缓存能解决吗\",{\"1\":{\"802\":1,\"3790\":1}}],[\"二进制帧更加紧凑和高效\",{\"1\":{\"2187\":1,\"5240\":1}}],[\"二进制帧\",{\"1\":{\"2187\":1,\"5240\":1}}],[\"二者并不冲突\",{\"1\":{\"2092\":1}}],[\"二者跨度较大\",{\"1\":{\"531\":1,\"3620\":1}}],[\"二叉搜索树就变为了一个链表\",{\"1\":{\"643\":1,\"3631\":1}}],[\"二叉树\",{\"0\":{\"638\":1,\"3626\":1}}],[\"二\",{\"0\":{\"173\":1,\"3055\":1,\"3215\":1,\"3456\":1,\"3586\":1,\"5159\":1,\"5306\":1},\"1\":{\"300\":1,\"3577\":1}}],[\"功能有路由分发和过滤\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"功能齐全\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"功能和\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"功能的实现\",{\"1\":{\"747\":1,\"3735\":1}}],[\"功能详情\",{\"1\":{\"163\":1,\"171\":1,\"3446\":1,\"3454\":1}}],[\"功能\",{\"0\":{\"156\":1,\"164\":1,\"3439\":1,\"3447\":1},\"1\":{\"158\":1,\"166\":1,\"1773\":1,\"3441\":1,\"3449\":1,\"4333\":1}}],[\"功能亮点\",{\"0\":{\"140\":1,\"3428\":1}}],[\"写操作\",{\"1\":{\"3110\":1,\"5361\":1}}],[\"写写\",{\"1\":{\"2900\":1,\"4125\":1}}],[\"写写的则是互斥的\",{\"1\":{\"2897\":1,\"4122\":1}}],[\"写写互斥的\",{\"1\":{\"2426\":1,\"4759\":1}}],[\"写读\",{\"1\":{\"2897\":1,\"2900\":1,\"4122\":1,\"4125\":1}}],[\"写入系统内核缓冲区之后直接返回\",{\"1\":{\"2663\":1,\"4996\":1}}],[\"写锁等待\",{\"1\":{\"2415\":1,\"4748\":1}}],[\"写锁\",{\"0\":{\"2899\":1,\"4124\":1},\"1\":{\"2403\":1,\"2405\":1,\"2406\":2,\"2412\":1,\"2414\":1,\"2900\":1,\"4125\":1,\"4736\":1,\"4738\":1,\"4739\":2,\"4745\":1,\"4747\":1}}],[\"写\",{\"1\":{\"1774\":3,\"4334\":3}}],[\"写在前面\",{\"0\":{\"147\":1,\"3435\":1}}],[\"写作日期为\",{\"1\":{\"117\":1,\"3405\":1}}],[\"f30aa7a662c728b7407c54ae6bfd27d1\",{\"1\":{\"3244\":1}}],[\"ftl\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"ftp\",{\"1\":{\"2076\":1}}],[\"fsync用于强制刷新系统内核缓冲区\",{\"1\":{\"2664\":1,\"4997\":1}}],[\"fsync\",{\"1\":{\"2658\":5,\"2664\":1,\"4991\":5,\"4997\":1}}],[\"fsync策略\",{\"1\":{\"2651\":1,\"4984\":1}}],[\"flag\",{\"1\":{\"2534\":1,\"4867\":1}}],[\"flush\",{\"1\":{\"2366\":1,\"4699\":1}}],[\"float\",{\"1\":{\"398\":1,\"2564\":1,\"4897\":1}}],[\"full\",{\"1\":{\"2305\":1,\"4638\":1}}],[\"ff\",{\"1\":{\"2158\":6,\"5211\":6}}],[\"feignclient注解的接口\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"feign会进行包扫描\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"feign通过处理注解\",{\"1\":{\"1766\":1,\"4326\":1}}],[\"feign远程调用\",{\"1\":{\"1764\":1,\"4324\":1}}],[\"feign远程调用的基本流程\",{\"0\":{\"1763\":1,\"4323\":1},\"1\":{\"1764\":1,\"4324\":1}}],[\"feign\",{\"1\":{\"1743\":1,\"1762\":1,\"4303\":1,\"4322\":1}}],[\"fd\",{\"1\":{\"1093\":2,\"1261\":2,\"1429\":2,\"1597\":2,\"4475\":2}}],[\"f4108e1816b3087f38b546372e214958\",{\"1\":{\"947\":1,\"5094\":1}}],[\"freemarker\",{\"1\":{\"3045\":1,\"3151\":1,\"5296\":1,\"5402\":1}}],[\"frequently\",{\"1\":{\"2686\":1,\"2687\":1,\"5019\":1,\"5020\":1}}],[\"frame\",{\"0\":{\"5464\":1}}],[\"frames\",{\"1\":{\"2187\":1,\"5240\":1}}],[\"framework\",{\"1\":{\"825\":1,\"3813\":1}}],[\"from\",{\"1\":{\"274\":1,\"277\":1,\"893\":3,\"3551\":1,\"3554\":1,\"3881\":3}}],[\"front\",{\"1\":{\"149\":1,\"153\":1,\"3437\":1}}],[\"frontmatter\",{\"1\":{\"8\":1,\"31\":1,\"33\":2,\"115\":1,\"138\":1,\"3296\":1,\"3319\":1,\"3321\":2,\"3403\":1,\"3426\":1}}],[\"fa\",{\"0\":{\"5472\":1}}],[\"fair\",{\"1\":{\"2748\":2,\"3973\":2}}],[\"fairsync\",{\"1\":{\"2746\":1,\"2748\":1,\"3971\":1,\"3973\":1}}],[\"fail的\",{\"1\":{\"547\":1}}],[\"fail\",{\"1\":{\"542\":3,\"2882\":1,\"4107\":1}}],[\"fail机制的\",{\"1\":{\"547\":1}}],[\"fail机制\",{\"1\":{\"456\":1,\"464\":1}}],[\"fast迭代器\",{\"1\":{\"546\":1}}],[\"fast\",{\"1\":{\"542\":1,\"2882\":1,\"4107\":1}}],[\"factory\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"factories都会被读取到\",{\"1\":{\"823\":1,\"3811\":1}}],[\"factories被读取到\",{\"1\":{\"823\":1,\"3811\":1}}],[\"factories\",{\"1\":{\"821\":2,\"3809\":2}}],[\"factories中的自动配置类实现自动装配\",{\"1\":{\"816\":1,\"3804\":1}}],[\"factories文件\",{\"1\":{\"816\":1,\"3804\":1}}],[\"factor\",{\"1\":{\"398\":1}}],[\"factor和default\",{\"1\":{\"392\":1}}],[\"false\",{\"1\":{\"227\":1,\"2336\":1,\"2748\":1,\"2845\":1,\"2846\":1,\"2848\":1,\"3510\":1,\"3973\":1,\"4070\":1,\"4071\":1,\"4073\":1,\"4669\":1}}],[\"following\",{\"1\":{\"1802\":1,\"1805\":1,\"2959\":1,\"4184\":1,\"4362\":1,\"4365\":1}}],[\"followers\",{\"1\":{\"1794\":1,\"4354\":1}}],[\"follower跟随者\",{\"1\":{\"1787\":1,\"4347\":1}}],[\"follower\",{\"1\":{\"1783\":1,\"1789\":1,\"1790\":1,\"1793\":1,\"1794\":1,\"1802\":1,\"1803\":1,\"1805\":1,\"1806\":1,\"1810\":1,\"1818\":2,\"4343\":1,\"4349\":1,\"4350\":1,\"4353\":1,\"4354\":1,\"4362\":1,\"4363\":1,\"4365\":1,\"4366\":1,\"4370\":1,\"4378\":2}}],[\"followed\",{\"1\":{\"455\":1}}],[\"fork\",{\"1\":{\"2647\":1,\"4980\":1}}],[\"format\",{\"1\":{\"2447\":1,\"4780\":1}}],[\"for循环对订阅的多个topic分别进行处理\",{\"1\":{\"949\":1,\"5096\":1}}],[\"for\",{\"1\":{\"455\":1,\"630\":2,\"949\":3,\"1011\":1,\"2424\":1,\"2451\":1,\"2525\":2,\"2959\":3,\"4184\":3,\"4757\":1,\"4784\":1,\"4858\":2,\"5096\":3}}],[\"forname\",{\"1\":{\"297\":1,\"306\":1,\"307\":1,\"311\":1,\"314\":1,\"3574\":1,\"3583\":1,\"3584\":1,\"3588\":1,\"3591\":1}}],[\"foo\",{\"0\":{\"144\":1,\"164\":1,\"3432\":1,\"3447\":1},\"1\":{\"166\":1,\"3449\":1}}],[\"f2\",{\"1\":{\"269\":1}}],[\"f\",{\"1\":{\"269\":1}}],[\"fixedthreadpool\",{\"1\":{\"2981\":1,\"2996\":1,\"3006\":1,\"4206\":1,\"4221\":1,\"4231\":1}}],[\"fifo队列\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"fifo\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"firstvalue\",{\"1\":{\"2947\":1,\"4172\":1}}],[\"firstkey\",{\"1\":{\"2947\":1,\"4172\":1}}],[\"first\",{\"1\":{\"1042\":2,\"1210\":2,\"1378\":2,\"1546\":2,\"2130\":1,\"2223\":1,\"4424\":2,\"5183\":1}}],[\"fields\",{\"1\":{\"458\":4}}],[\"field\",{\"1\":{\"318\":1,\"319\":4,\"406\":1,\"424\":6,\"2626\":1,\"3595\":1,\"3596\":4,\"4959\":1}}],[\"fin\",{\"1\":{\"2021\":2}}],[\"final\",{\"1\":{\"398\":1,\"402\":1,\"458\":2,\"717\":1,\"3705\":1}}],[\"finally内的修改效果起了作用\",{\"1\":{\"269\":1}}],[\"finally内的修改效果不起作用\",{\"1\":{\"269\":1}}],[\"finally执行\",{\"1\":{\"269\":2}}],[\"finally\",{\"1\":{\"269\":2}}],[\"finally中的语句会在return之前执⾏\",{\"1\":{\"267\":1}}],[\"findbootstrapclassornull\",{\"1\":{\"227\":1,\"3510\":1}}],[\"findloadedclass\",{\"1\":{\"227\":1,\"3510\":1}}],[\"findclass\",{\"1\":{\"213\":1,\"215\":1,\"216\":1,\"217\":1,\"227\":1,\"232\":1,\"3496\":1,\"3498\":1,\"3499\":1,\"3500\":1,\"3510\":1,\"3515\":1}}],[\"filereader\",{\"1\":{\"263\":1}}],[\"fileinputstream\",{\"1\":{\"261\":2,\"3546\":2}}],[\"file\",{\"1\":{\"261\":5,\"1082\":1,\"1250\":1,\"1418\":1,\"1586\":1,\"2638\":1,\"2649\":1,\"3546\":5,\"4464\":1,\"4971\":1,\"4982\":1}}],[\"filenotfoundexception\",{\"1\":{\"255\":1,\"261\":1,\"3540\":1,\"3546\":1}}],[\"此人要仔细保存私有密钥\",{\"1\":{\"3279\":1}}],[\"此策略将丢弃最早的未处理的任务请求\",{\"1\":{\"2976\":1,\"4201\":1}}],[\"此过程是原子性\",{\"1\":{\"2764\":1,\"3989\":1}}],[\"此过程不需要将数据从操作系统内核缓冲区拷贝到\",{\"1\":{\"1101\":1,\"1269\":1,\"1437\":1,\"1605\":1,\"4483\":1}}],[\"此外\",{\"1\":{\"2534\":1,\"4867\":1}}],[\"此方法主要用于在客户端和服务器之间通过网络进行通信\",{\"1\":{\"1047\":1,\"1215\":1,\"1383\":1,\"1551\":1,\"4429\":1}}],[\"此时只能有一个线程获得锁\",{\"1\":{\"2900\":1,\"4125\":1}}],[\"此时对线程1来说\",{\"1\":{\"2788\":1,\"4013\":1}}],[\"此时有多个线程同时来竞争锁\",{\"1\":{\"2761\":1,\"3986\":1}}],[\"此时并没有同步到磁盘\",{\"1\":{\"2657\":1,\"4990\":1}}],[\"此时并不会阻塞\",{\"1\":{\"2411\":1,\"4744\":1}}],[\"此时还在系统内核缓存区为同步到磁盘\",{\"1\":{\"2651\":1,\"4984\":1}}],[\"此时还在选举阶段所以整个集群处于\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"此时查询到的记录数量有\",{\"1\":{\"2506\":1,\"4839\":1}}],[\"此时数据库超过\",{\"1\":{\"2505\":1,\"4838\":1}}],[\"此时由于线程\",{\"1\":{\"2412\":1,\"4745\":1}}],[\"此时就先对该表加上\",{\"1\":{\"2410\":1,\"4743\":1}}],[\"此时mq不会触发消息推送事件\",{\"1\":{\"1850\":1,\"3927\":1}}],[\"此时它肯定会作为\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"此时肯定要重新进行\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"此时同意了提案n1\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"此时会收到彼此的投票信息\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"此时将开始执行拦截器的\",{\"1\":{\"735\":1,\"3723\":1}}],[\"此时\",{\"1\":{\"643\":1,\"1801\":1,\"3631\":1,\"4361\":1}}],[\"此类不能实例化\",{\"1\":{\"331\":1}}],[\"此页面应当包含\",{\"1\":{\"128\":1,\"3416\":1}}],[\"此文字有脚注\",{\"1\":{\"68\":1,\"3356\":1}}],[\"徽章\",{\"1\":{\"126\":1,\"3414\":1}}],[\"徽章文字\",{\"1\":{\"126\":1,\"3414\":1}}],[\"标明要异步调用\",{\"1\":{\"3157\":1,\"5408\":1}}],[\"标识\",{\"1\":{\"2927\":1,\"2931\":1,\"4152\":1,\"4156\":1}}],[\"标志位为00\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"标志位为01\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"标准中规定的各级隔离级别允许发生的现象却有些出入\",{\"1\":{\"2521\":1,\"4854\":1}}],[\"标准中规定的\",{\"1\":{\"2521\":1,\"4854\":1}}],[\"标准提出了四种隔离级别来规避这些现象\",{\"1\":{\"2508\":1,\"4841\":1}}],[\"标准定义了四个隔离级别\",{\"1\":{\"2246\":1,\"4579\":1}}],[\"标准资源都继承了这个接口\",{\"1\":{\"260\":1,\"3545\":1}}],[\"标为\",{\"1\":{\"594\":1}}],[\"标题和页面信息\",{\"1\":{\"130\":1,\"3418\":1}}],[\"标签为\",{\"1\":{\"119\":1,\"3407\":1}}],[\"标记\",{\"0\":{\"70\":1,\"3358\":1}}],[\"日志格式要设置为\",{\"1\":{\"2446\":1,\"4779\":1}}],[\"日志信息\",{\"1\":{\"856\":1,\"3844\":1}}],[\"日志管理\",{\"1\":{\"722\":1,\"3710\":1}}],[\"日常开发几乎看不到使用静态代理的场景\",{\"1\":{\"693\":1,\"3681\":1}}],[\"日\",{\"1\":{\"117\":1,\"3405\":1}}],[\"月\",{\"1\":{\"117\":1,\"3405\":1}}],[\"年设计了基于\",{\"1\":{\"5162\":1}}],[\"年设计的\",{\"1\":{\"5162\":1}}],[\"年重写了之前的论文\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"年之后\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"年代\",{\"1\":{\"1796\":2,\"4356\":2}}],[\"年\",{\"1\":{\"117\":1,\"3405\":1,\"5162\":1}}],[\"↩︎\",{\"1\":{\"111\":1,\"3399\":1}}],[\"捐赠一杯咖啡\",{\"1\":{\"103\":1,\"3391\":1}}],[\"向硬盘做同步操作\",{\"1\":{\"2658\":1,\"4991\":1}}],[\"向下延伸\",{\"1\":{\"1002\":1,\"3914\":1}}],[\"向\",{\"1\":{\"103\":1,\"741\":1,\"3391\":1,\"3729\":1}}],[\"样式化\",{\"0\":{\"102\":1,\"3390\":1}}],[\"导致所有的请求都落到了数据库上\",{\"1\":{\"2721\":1,\"5054\":1}}],[\"导致大量的请求都直接落到了数据库上\",{\"1\":{\"2720\":1,\"5053\":1}}],[\"导致二级缓存失效\",{\"1\":{\"916\":1,\"3904\":1}}],[\"导致⽣成多个实例\",{\"1\":{\"674\":1,\"3662\":1}}],[\"导入文件\",{\"0\":{\"94\":1,\"3382\":1}}],[\"导航栏\",{\"1\":{\"10\":1,\"134\":1,\"3298\":1,\"3422\":1}}],[\"−1\",{\"1\":{\"92\":1,\"3380\":1}}],[\"rsa\",{\"1\":{\"3274\":1,\"3279\":1}}],[\"rst\",{\"1\":{\"2019\":1}}],[\"rpush+lpop\",{\"1\":{\"2611\":1,\"4944\":1}}],[\"rpop\",{\"1\":{\"2611\":1,\"4944\":1}}],[\"rpc\",{\"1\":{\"698\":1,\"3686\":1}}],[\"ribbon\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"run\",{\"1\":{\"2974\":1,\"4199\":1}}],[\"running\",{\"1\":{\"1022\":1,\"1190\":1,\"1358\":1,\"1526\":1,\"4404\":1}}],[\"runnable\",{\"1\":{\"1021\":1,\"1189\":1,\"1357\":1,\"1525\":1,\"2941\":1,\"2959\":1,\"4166\":1,\"4184\":1,\"4403\":1}}],[\"runtimeexception\",{\"1\":{\"835\":1,\"3823\":1}}],[\"runtimeexception与其子类\",{\"1\":{\"251\":1,\"3536\":1}}],[\"runtime\",{\"1\":{\"177\":1,\"180\":1,\"3460\":1,\"3463\":1}}],[\"roll\",{\"1\":{\"2531\":1,\"2535\":1,\"4864\":1,\"4868\":1}}],[\"rollback\",{\"1\":{\"2246\":1,\"4579\":1}}],[\"row\",{\"1\":{\"2242\":1,\"2446\":1,\"2447\":1,\"2536\":1,\"4575\":1,\"4779\":1,\"4780\":1,\"4869\":1}}],[\"rowbounds\",{\"1\":{\"889\":1,\"3877\":1}}],[\"roundrobinassignor的分配策略是将消费组内订阅的所有topic的分区及所有消费者进行排序后尽量均衡的分配\",{\"1\":{\"957\":1,\"5104\":1}}],[\"roundrobinassignor\",{\"1\":{\"943\":1,\"956\":1,\"5090\":1,\"5103\":1}}],[\"robin算法\",{\"1\":{\"939\":1,\"5086\":1}}],[\"rdb\",{\"0\":{\"2640\":1,\"2644\":1,\"4973\":1,\"4977\":1},\"1\":{\"2637\":1,\"2639\":1,\"2645\":1,\"2653\":1,\"4970\":1,\"4972\":1,\"4978\":1,\"4986\":1}}],[\"rd\",{\"1\":{\"831\":1,\"3819\":1}}],[\"register|login\",{\"1\":{\"3226\":1,\"3232\":1}}],[\"registry\",{\"1\":{\"1701\":1,\"4261\":1}}],[\"rejectedexecution\",{\"1\":{\"2988\":1,\"4213\":1}}],[\"rejectedexecutionexception\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"rejectedexecutionexception来拒绝新任务的处理\",{\"1\":{\"2973\":1,\"4198\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"2959\":1,\"2977\":1,\"4184\":1,\"4202\":1}}],[\"reentrantreadwritelock\",{\"1\":{\"2822\":1,\"2898\":1,\"2901\":1,\"4047\":1,\"4123\":1,\"4126\":1}}],[\"reentrantlock\",{\"0\":{\"2743\":1,\"3968\":1},\"1\":{\"2737\":1,\"2738\":1,\"2739\":1,\"2740\":1,\"2741\":1,\"2742\":1,\"2744\":2,\"2745\":1,\"2746\":1,\"2747\":1,\"2748\":1,\"2886\":1,\"2895\":1,\"2909\":1,\"2910\":1,\"3962\":1,\"3963\":1,\"3964\":1,\"3965\":1,\"3966\":1,\"3967\":1,\"3969\":2,\"3970\":1,\"3971\":1,\"3972\":1,\"3973\":1,\"4111\":1,\"4120\":1,\"4134\":1,\"4135\":1}}],[\"recently\",{\"1\":{\"2679\":1,\"2682\":1,\"5012\":1,\"5015\":1}}],[\"record\",{\"0\":{\"2459\":1,\"4792\":1},\"1\":{\"2456\":1,\"2458\":1,\"2460\":1,\"2468\":1,\"2534\":1,\"4789\":1,\"4791\":1,\"4793\":1,\"4801\":1,\"4867\":1}}],[\"rewrite\",{\"1\":{\"2659\":1,\"4992\":1}}],[\"redirect\",{\"1\":{\"3022\":1,\"4247\":1}}],[\"redis实现\",{\"1\":{\"3168\":1,\"5419\":1}}],[\"redis就会自动触发bgsave命令创建快照\",{\"1\":{\"2643\":3,\"4976\":3}}],[\"redis\",{\"0\":{\"2582\":1,\"2583\":1,\"2584\":1,\"2676\":1,\"2732\":1,\"4915\":1,\"4916\":1,\"4917\":1,\"5009\":1,\"5065\":1},\"1\":{\"1152\":4,\"1320\":4,\"1488\":4,\"1656\":4,\"1869\":1,\"2585\":1,\"2586\":1,\"2587\":2,\"2588\":1,\"2599\":1,\"2607\":1,\"2608\":1,\"2609\":1,\"2615\":1,\"2616\":1,\"2622\":1,\"2623\":1,\"2624\":1,\"2630\":1,\"2631\":1,\"2632\":1,\"2636\":2,\"2639\":1,\"2641\":4,\"2642\":2,\"2645\":1,\"2646\":1,\"2647\":1,\"2649\":2,\"2651\":2,\"2660\":1,\"2669\":1,\"2672\":1,\"2673\":1,\"2675\":1,\"2677\":2,\"2678\":1,\"2696\":2,\"2723\":1,\"2724\":1,\"3095\":1,\"3183\":1,\"3184\":1,\"3186\":1,\"3187\":1,\"3946\":1,\"4534\":4,\"4918\":1,\"4919\":1,\"4920\":2,\"4921\":1,\"4932\":1,\"4940\":1,\"4941\":1,\"4942\":1,\"4948\":1,\"4949\":1,\"4955\":1,\"4956\":1,\"4957\":1,\"4963\":1,\"4964\":1,\"4965\":1,\"4969\":2,\"4972\":1,\"4974\":4,\"4975\":2,\"4978\":1,\"4979\":1,\"4980\":1,\"4982\":2,\"4984\":2,\"4993\":1,\"5002\":1,\"5005\":1,\"5006\":1,\"5008\":1,\"5010\":2,\"5011\":1,\"5029\":2,\"5056\":1,\"5057\":1,\"5346\":1,\"5434\":1,\"5435\":1,\"5437\":1,\"5438\":1}}],[\"redo\",{\"1\":{\"2253\":1,\"2488\":1,\"4586\":1,\"4821\":1}}],[\"relevant\",{\"1\":{\"972\":3,\"981\":5,\"5119\":3,\"5128\":5}}],[\"reuse\",{\"1\":{\"915\":1,\"3903\":1}}],[\"resultset\",{\"1\":{\"889\":1,\"3877\":1}}],[\"restful\",{\"1\":{\"860\":1,\"3848\":1}}],[\"responseresult\",{\"1\":{\"836\":4,\"3824\":4}}],[\"responsebody\",{\"1\":{\"836\":2,\"3824\":2}}],[\"resource\",{\"0\":{\"259\":1,\"3544\":1}}],[\"resources\",{\"1\":{\"206\":1,\"821\":1,\"3489\":1,\"3809\":1}}],[\"resove\",{\"1\":{\"212\":1,\"3495\":1}}],[\"resolveclass\",{\"1\":{\"212\":1,\"227\":1,\"3495\":1,\"3510\":1}}],[\"resolve\",{\"1\":{\"212\":1,\"216\":1,\"227\":2,\"3495\":1,\"3499\":1,\"3510\":2}}],[\"resolution\",{\"1\":{\"188\":1,\"2146\":1,\"3471\":1,\"5199\":1}}],[\"requires\",{\"1\":{\"780\":1,\"3768\":1}}],[\"required\",{\"1\":{\"776\":1,\"784\":1,\"3764\":1,\"3772\":1}}],[\"request\",{\"1\":{\"736\":1,\"1766\":1,\"3724\":1,\"4326\":1}}],[\"repeatable\",{\"1\":{\"768\":1,\"771\":1,\"2246\":1,\"2511\":1,\"3756\":1,\"3759\":1,\"4579\":1,\"4844\":1}}],[\"reflect\",{\"1\":{\"714\":1,\"3702\":1}}],[\"reached\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"reactor\",{\"0\":{\"1111\":1,\"1132\":1,\"1153\":1,\"1171\":1,\"1279\":1,\"1300\":1,\"1321\":1,\"1339\":1,\"1447\":1,\"1468\":1,\"1489\":1,\"1507\":1,\"1615\":1,\"1636\":1,\"1657\":1,\"1675\":1,\"4493\":1,\"4514\":1,\"4535\":1,\"4553\":1},\"1\":{\"1112\":2,\"1113\":1,\"1115\":1,\"1116\":1,\"1119\":1,\"1120\":1,\"1121\":1,\"1122\":1,\"1123\":2,\"1125\":1,\"1126\":1,\"1127\":1,\"1131\":1,\"1133\":1,\"1134\":1,\"1135\":1,\"1137\":1,\"1138\":1,\"1142\":1,\"1143\":1,\"1147\":1,\"1151\":1,\"1152\":1,\"1154\":2,\"1155\":1,\"1158\":1,\"1161\":1,\"1167\":2,\"1168\":2,\"1169\":1,\"1170\":2,\"1172\":4,\"1173\":1,\"1180\":2,\"1183\":1,\"1280\":2,\"1281\":1,\"1283\":1,\"1284\":1,\"1287\":1,\"1288\":1,\"1289\":1,\"1290\":1,\"1291\":2,\"1293\":1,\"1294\":1,\"1295\":1,\"1299\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1305\":1,\"1306\":1,\"1310\":1,\"1311\":1,\"1315\":1,\"1319\":1,\"1320\":1,\"1322\":2,\"1323\":1,\"1326\":1,\"1329\":1,\"1335\":2,\"1336\":2,\"1337\":1,\"1338\":2,\"1340\":4,\"1341\":1,\"1348\":2,\"1351\":1,\"1448\":2,\"1449\":1,\"1451\":1,\"1452\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":2,\"1461\":1,\"1462\":1,\"1463\":1,\"1467\":1,\"1469\":1,\"1470\":1,\"1471\":1,\"1473\":1,\"1474\":1,\"1478\":1,\"1479\":1,\"1483\":1,\"1487\":1,\"1488\":1,\"1490\":2,\"1491\":1,\"1494\":1,\"1497\":1,\"1503\":2,\"1504\":2,\"1505\":1,\"1506\":2,\"1508\":4,\"1509\":1,\"1516\":2,\"1519\":1,\"1616\":2,\"1617\":1,\"1619\":1,\"1620\":1,\"1623\":1,\"1624\":1,\"1625\":1,\"1626\":1,\"1627\":2,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1639\":1,\"1641\":1,\"1642\":1,\"1646\":1,\"1647\":1,\"1651\":1,\"1655\":1,\"1656\":1,\"1658\":2,\"1659\":1,\"1662\":1,\"1665\":1,\"1671\":2,\"1672\":2,\"1673\":1,\"1674\":2,\"1676\":4,\"1677\":1,\"1684\":2,\"1687\":1,\"2587\":1,\"4494\":2,\"4495\":1,\"4497\":1,\"4498\":1,\"4501\":1,\"4502\":1,\"4503\":1,\"4504\":1,\"4505\":2,\"4507\":1,\"4508\":1,\"4509\":1,\"4513\":1,\"4515\":1,\"4516\":1,\"4517\":1,\"4519\":1,\"4520\":1,\"4524\":1,\"4525\":1,\"4529\":1,\"4533\":1,\"4534\":1,\"4536\":2,\"4537\":1,\"4540\":1,\"4543\":1,\"4549\":2,\"4550\":2,\"4551\":1,\"4552\":2,\"4554\":4,\"4555\":1,\"4562\":2,\"4565\":1,\"4920\":1}}],[\"reator\",{\"1\":{\"1164\":1,\"1332\":1,\"1500\":1,\"1668\":1,\"4546\":1}}],[\"realstack\",{\"1\":{\"617\":1}}],[\"readview主要是用来做可见性判断\",{\"1\":{\"2537\":1,\"4870\":1}}],[\"readonly\",{\"1\":{\"905\":1,\"3893\":1}}],[\"readline\",{\"1\":{\"263\":1}}],[\"read\",{\"1\":{\"261\":1,\"768\":2,\"769\":1,\"770\":1,\"771\":1,\"1031\":1,\"1065\":1,\"1066\":1,\"1070\":1,\"1081\":2,\"1089\":1,\"1095\":1,\"1114\":1,\"1141\":1,\"1146\":1,\"1162\":1,\"1179\":1,\"1199\":1,\"1233\":1,\"1234\":1,\"1238\":1,\"1249\":2,\"1257\":1,\"1263\":1,\"1282\":1,\"1309\":1,\"1314\":1,\"1330\":1,\"1347\":1,\"1367\":1,\"1401\":1,\"1402\":1,\"1406\":1,\"1417\":2,\"1425\":1,\"1431\":1,\"1450\":1,\"1477\":1,\"1482\":1,\"1498\":1,\"1515\":1,\"1535\":1,\"1569\":1,\"1570\":1,\"1574\":1,\"1585\":2,\"1593\":1,\"1599\":1,\"1618\":1,\"1645\":1,\"1650\":1,\"1666\":1,\"1683\":1,\"2246\":1,\"2366\":1,\"2378\":2,\"2379\":1,\"2392\":1,\"2425\":1,\"2509\":1,\"2510\":1,\"2511\":1,\"2529\":6,\"2531\":3,\"2538\":2,\"2542\":2,\"2543\":1,\"3546\":1,\"3756\":2,\"3757\":1,\"3758\":1,\"3759\":1,\"4413\":1,\"4447\":1,\"4448\":1,\"4452\":1,\"4463\":2,\"4471\":1,\"4477\":1,\"4496\":1,\"4523\":1,\"4528\":1,\"4544\":1,\"4561\":1,\"4579\":1,\"4699\":1,\"4711\":2,\"4712\":1,\"4725\":1,\"4758\":1,\"4842\":1,\"4843\":1,\"4844\":1,\"4862\":6,\"4864\":3,\"4871\":2,\"4875\":2,\"4876\":1}}],[\"rehash之后的链表可能为c\",{\"1\":{\"520\":1,\"3609\":1}}],[\"remove\",{\"1\":{\"490\":2,\"492\":1,\"494\":1}}],[\"ret++\",{\"1\":{\"269\":1}}],[\"ret\",{\"1\":{\"269\":5}}],[\"return\",{\"1\":{\"227\":1,\"258\":1,\"269\":2,\"274\":1,\"291\":1,\"297\":1,\"490\":1,\"492\":1,\"494\":1,\"673\":1,\"835\":1,\"836\":4,\"940\":4,\"949\":1,\"1011\":1,\"2944\":1,\"3510\":1,\"3543\":1,\"3551\":1,\"3568\":1,\"3574\":1,\"3661\":1,\"3823\":1,\"3824\":4,\"4169\":1,\"5087\":4,\"5096\":1}}],[\"random\",{\"1\":{\"2681\":1,\"2683\":1,\"5014\":1,\"5016\":1}}],[\"rangeassignor是针对单个topic的分区进行排序分配的\",{\"1\":{\"957\":1,\"5104\":1}}],[\"rangeassignor对每个topic进行独立的分区分配\",{\"1\":{\"946\":1,\"5093\":1}}],[\"rangeassignor\",{\"1\":{\"945\":1,\"5092\":1}}],[\"rangeassigor\",{\"1\":{\"943\":1,\"5090\":1}}],[\"rangecheck\",{\"1\":{\"492\":1}}],[\"rangecheckforadd\",{\"1\":{\"484\":2}}],[\"raft\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"rather\",{\"1\":{\"215\":1,\"3498\":1}}],[\"ray\",{\"0\":{\"170\":1,\"3453\":1},\"1\":{\"145\":1,\"168\":1,\"3433\":1,\"3451\":1}}],[\"rtree\",{\"1\":{\"2281\":1,\"4614\":1}}],[\"rtt\",{\"1\":{\"2192\":2,\"5245\":2}}],[\"rt\",{\"1\":{\"206\":1,\"3489\":1}}],[\"r−i​\",{\"1\":{\"92\":1,\"3380\":1}}],[\"r−i+1\",{\"1\":{\"92\":1,\"3380\":1}}],[\"r+i=1∑r​ωi\",{\"1\":{\"92\":1,\"3380\":1}}],[\"rgba\",{\"1\":{\"81\":1,\"3369\":1}}],[\"ωyω​\",{\"1\":{\"92\":2,\"3380\":2}}],[\"∂ωr∂r​\",{\"1\":{\"92\":1,\"3380\":1}}],[\"ecc\",{\"1\":{\"3279\":1}}],[\"ecc等\",{\"1\":{\"3274\":1}}],[\"echarts\",{\"0\":{\"85\":1,\"3373\":1}}],[\"e10adc3949ba59abbe56e057f20f883e\",{\"1\":{\"3236\":1}}],[\"even\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"event\",{\"1\":{\"1034\":1,\"1202\":1,\"1370\":1,\"1538\":1,\"4416\":1}}],[\"eventlistener注解\",{\"1\":{\"852\":1,\"3840\":1}}],[\"eviction\",{\"1\":{\"2684\":1,\"5017\":1}}],[\"es\",{\"1\":{\"1869\":1,\"3946\":1}}],[\"epoch\",{\"1\":{\"1796\":3,\"4356\":3}}],[\"epoll\",{\"0\":{\"1054\":1,\"1222\":1,\"1390\":1,\"1558\":1,\"4436\":1},\"1\":{\"1052\":1,\"1053\":1,\"1055\":1,\"1056\":4,\"1057\":2,\"1058\":1,\"1060\":2,\"1061\":2,\"1062\":1,\"1063\":1,\"1065\":1,\"1066\":1,\"1071\":1,\"1072\":1,\"1074\":1,\"1220\":1,\"1221\":1,\"1223\":1,\"1224\":4,\"1225\":2,\"1226\":1,\"1228\":2,\"1229\":2,\"1230\":1,\"1231\":1,\"1233\":1,\"1234\":1,\"1239\":1,\"1240\":1,\"1242\":1,\"1388\":1,\"1389\":1,\"1391\":1,\"1392\":4,\"1393\":2,\"1394\":1,\"1396\":2,\"1397\":2,\"1398\":1,\"1399\":1,\"1401\":1,\"1402\":1,\"1407\":1,\"1408\":1,\"1410\":1,\"1556\":1,\"1557\":1,\"1559\":1,\"1560\":4,\"1561\":2,\"1562\":1,\"1564\":2,\"1565\":2,\"1566\":1,\"1567\":1,\"1569\":1,\"1570\":1,\"1575\":1,\"1576\":1,\"1578\":1,\"4434\":1,\"4435\":1,\"4437\":1,\"4438\":4,\"4439\":2,\"4440\":1,\"4442\":2,\"4443\":2,\"4444\":1,\"4445\":1,\"4447\":1,\"4448\":1,\"4453\":1,\"4454\":1,\"4456\":1}}],[\"eureka\",{\"1\":{\"1743\":1,\"1834\":1,\"4303\":1,\"4394\":1}}],[\"ewouldblock\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"et\",{\"1\":{\"1063\":1,\"1231\":1,\"1399\":1,\"1567\":1,\"4445\":1}}],[\"edge\",{\"1\":{\"1063\":1,\"1231\":1,\"1399\":1,\"1567\":1,\"4445\":1}}],[\"eagain\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"easylife206\",{\"1\":{\"972\":1,\"5119\":1}}],[\"each\",{\"1\":{\"455\":1}}],[\"eb5597ed0b81b03c762e54ff3f909492\",{\"1\":{\"970\":1,\"5117\":1}}],[\"eff9adb5a086691e56b5d68bec68ffcf\",{\"1\":{\"951\":1,\"5098\":1}}],[\"empty\",{\"1\":{\"484\":1}}],[\"emitted\",{\"1\":{\"455\":1}}],[\"elasticsearch\",{\"1\":{\"2281\":1,\"2282\":1,\"2292\":1,\"3095\":1,\"4614\":1,\"4615\":1,\"4625\":1,\"5346\":1}}],[\"elementcount++\",{\"1\":{\"480\":1}}],[\"elementcount\",{\"1\":{\"458\":2,\"480\":4,\"494\":3}}],[\"elementdata\",{\"1\":{\"455\":2,\"458\":2,\"460\":1,\"480\":4,\"484\":5,\"492\":4,\"494\":4}}],[\"element\",{\"1\":{\"455\":1,\"480\":2,\"482\":2,\"484\":2}}],[\"elements\",{\"1\":{\"455\":2}}],[\"else\",{\"1\":{\"227\":1,\"263\":2,\"291\":1,\"940\":2,\"2944\":1,\"3510\":1,\"3568\":1,\"4169\":1,\"5087\":2}}],[\"equals\",{\"1\":{\"291\":2,\"3568\":2}}],[\"errorresult\",{\"1\":{\"836\":2,\"3824\":2}}],[\"error\",{\"1\":{\"239\":1,\"251\":1,\"261\":2,\"740\":1,\"836\":3,\"3524\":1,\"3536\":1,\"3546\":2,\"3728\":1,\"3824\":3}}],[\"e\",{\"0\":{\"5463\":1},\"1\":{\"227\":1,\"261\":4,\"272\":2,\"480\":2,\"482\":1,\"484\":1,\"490\":1,\"492\":2,\"494\":2,\"836\":8,\"3510\":1,\"3546\":4,\"3549\":2,\"3824\":8}}],[\"exists\",{\"1\":{\"3195\":1,\"5446\":1}}],[\"ex\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"expires\",{\"1\":{\"2183\":1,\"2679\":1,\"2680\":1,\"2681\":1,\"2686\":1,\"5012\":1,\"5013\":1,\"5014\":1,\"5019\":1,\"5236\":1}}],[\"expectedmodcount\",{\"1\":{\"455\":2}}],[\"executor\",{\"1\":{\"2959\":1,\"2967\":1,\"2994\":1,\"4184\":1,\"4192\":1,\"4219\":1}}],[\"executors\",{\"1\":{\"2957\":2,\"2994\":1,\"3004\":1,\"3005\":1,\"4182\":2,\"4219\":1,\"4229\":1,\"4230\":1}}],[\"execute\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"executed\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"execution\",{\"1\":{\"178\":1,\"180\":1,\"2959\":1,\"3461\":1,\"3463\":1,\"4184\":1}}],[\"execdriver\",{\"1\":{\"1703\":1,\"1704\":1,\"4263\":1,\"4264\":1}}],[\"excess\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"exceptioncatch\",{\"1\":{\"836\":2,\"3824\":2}}],[\"exceptionhandler\",{\"1\":{\"832\":1,\"833\":1,\"836\":2,\"3820\":1,\"3821\":1,\"3824\":2}}],[\"exceptions\",{\"0\":{\"246\":2,\"3531\":2}}],[\"exception\",{\"1\":{\"240\":2,\"263\":4,\"272\":1,\"274\":3,\"276\":1,\"836\":6,\"3525\":2,\"3549\":1,\"3551\":3,\"3553\":1,\"3824\":6}}],[\"excludename\",{\"1\":{\"819\":1,\"3807\":1}}],[\"exclude\",{\"1\":{\"819\":1,\"3807\":1}}],[\"extends\",{\"1\":{\"305\":1,\"714\":1,\"835\":1,\"3582\":1,\"3702\":1,\"3823\":1}}],[\"extensionclassloader\",{\"1\":{\"207\":1,\"3490\":1}}],[\"ext\",{\"1\":{\"207\":2,\"3490\":2}}],[\"enableasync注解开启异步调用\",{\"1\":{\"3157\":1,\"5408\":1}}],[\"enableautoconfiguration=true\",{\"1\":{\"817\":1,\"3805\":1}}],[\"enableautoconfiguration开启自动装配\",{\"1\":{\"816\":1,\"3804\":1}}],[\"enableautoconfiguration会自动去maven中读取每个starter中的spring\",{\"1\":{\"816\":1,\"3804\":1}}],[\"entries配置\",{\"1\":{\"2615\":1,\"4948\":1}}],[\"entries\",{\"1\":{\"2607\":1,\"2622\":1,\"4940\":1,\"4955\":1}}],[\"entryset\",{\"1\":{\"949\":1,\"5096\":1}}],[\"entry<string\",{\"1\":{\"949\":1,\"5096\":1}}],[\"entity\",{\"1\":{\"2183\":1,\"5236\":1}}],[\"endpoint\",{\"1\":{\"856\":1,\"3844\":1}}],[\"end2\",{\"1\":{\"630\":2}}],[\"end1\",{\"1\":{\"630\":2}}],[\"enumeration\",{\"1\":{\"542\":1}}],[\"ensureexplicitcapacity\",{\"1\":{\"484\":1}}],[\"ensurecapacityinternal\",{\"1\":{\"484\":2}}],[\"ensurecapacityhelper\",{\"1\":{\"480\":2}}],[\"ensure\",{\"1\":{\"458\":1}}],[\"encouraged\",{\"1\":{\"215\":1,\"3498\":1}}],[\"engine\",{\"1\":{\"178\":1,\"180\":1,\"1700\":1,\"3461\":1,\"3463\":1,\"4260\":1}}],[\"enhancer类来动态获取被代理类\",{\"1\":{\"715\":1,\"3703\":1}}],[\"enhancer\",{\"1\":{\"712\":1,\"3700\":1}}],[\"enhance\",{\"1\":{\"40\":1,\"3328\":1}}],[\"图解线程池实现原理\",{\"1\":{\"2989\":1,\"4214\":1}}],[\"图片来源\",{\"1\":{\"2969\":1,\"4194\":1}}],[\"图片的路径\",{\"1\":{\"2601\":1,\"4934\":1}}],[\"图片\",{\"1\":{\"2514\":1,\"2781\":1,\"2783\":1,\"2785\":1,\"2787\":1,\"2789\":1,\"2791\":1,\"2805\":1,\"2856\":1,\"2867\":1,\"2873\":1,\"2874\":1,\"3011\":1,\"3016\":1,\"3018\":1,\"3021\":1,\"4006\":1,\"4008\":1,\"4010\":1,\"4012\":1,\"4014\":1,\"4016\":1,\"4030\":1,\"4081\":1,\"4092\":1,\"4098\":1,\"4099\":1,\"4236\":1,\"4241\":1,\"4243\":1,\"4246\":1,\"4847\":1}}],[\"图片增强\",{\"0\":{\"77\":1,\"3365\":1}}],[\"图表\",{\"0\":{\"83\":1,\"3371\":1}}],[\"03\",{\"1\":{\"3022\":1,\"4247\":1}}],[\"02\",{\"1\":{\"2749\":1,\"2933\":1,\"3974\":1,\"4158\":1}}],[\"0连接发起多重的请求\",{\"1\":{\"1894\":1,\"1909\":1,\"1924\":1,\"1937\":1,\"1950\":1,\"1965\":1,\"5156\":1,\"5179\":1}}],[\"04\",{\"0\":{\"1841\":1,\"3918\":1}}],[\"01\",{\"1\":{\"621\":1}}],[\"0版本\",{\"1\":{\"536\":1}}],[\"00000094\",{\"1\":{\"531\":1,\"3620\":1}}],[\"00000006\",{\"1\":{\"530\":1,\"3619\":1}}],[\"00001316\",{\"1\":{\"531\":1,\"3620\":1}}],[\"0\",{\"0\":{\"2180\":1,\"2185\":1,\"2190\":2,\"2732\":1,\"5065\":1,\"5233\":1,\"5238\":1,\"5243\":2},\"1\":{\"81\":1,\"258\":2,\"269\":4,\"274\":4,\"398\":1,\"422\":1,\"426\":2,\"432\":1,\"470\":1,\"480\":1,\"484\":1,\"492\":1,\"494\":1,\"630\":2,\"893\":1,\"940\":1,\"949\":2,\"1011\":2,\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"1801\":1,\"1802\":2,\"2181\":1,\"2183\":1,\"2184\":1,\"2186\":2,\"2187\":1,\"2188\":1,\"2189\":1,\"2191\":3,\"2192\":3,\"2193\":2,\"2336\":1,\"2440\":1,\"2452\":1,\"2624\":1,\"2632\":1,\"2639\":1,\"2649\":1,\"2685\":1,\"2694\":1,\"2847\":1,\"2922\":1,\"2923\":1,\"2959\":6,\"3369\":1,\"3543\":2,\"3551\":4,\"3881\":1,\"4072\":1,\"4147\":1,\"4148\":1,\"4184\":6,\"4361\":1,\"4362\":2,\"4534\":1,\"4669\":1,\"4773\":1,\"4785\":1,\"4957\":1,\"4965\":1,\"4972\":1,\"4982\":1,\"5018\":1,\"5027\":1,\"5087\":1,\"5096\":2,\"5234\":1,\"5236\":1,\"5237\":1,\"5239\":2,\"5240\":1,\"5241\":1,\"5242\":1,\"5244\":3,\"5245\":3,\"5246\":2}}],[\"sm2\",{\"1\":{\"3279\":1}}],[\"sm1和sm4\",{\"1\":{\"3277\":1}}],[\"s模式\",{\"1\":{\"3046\":1,\"5297\":1}}],[\"swap\",{\"1\":{\"2778\":1,\"2790\":1,\"2816\":1,\"4003\":1,\"4015\":1,\"4041\":1}}],[\"sds\",{\"1\":{\"2595\":1,\"2596\":2,\"2597\":5,\"2598\":2,\"2599\":3,\"4928\":1,\"4929\":2,\"4930\":5,\"4931\":2,\"4932\":3}}],[\"s锁\",{\"1\":{\"2453\":1,\"4786\":1}}],[\"ssl加密协议\",{\"1\":{\"5165\":1}}],[\"ssl\",{\"1\":{\"2191\":1,\"2198\":2,\"5244\":1,\"5251\":2}}],[\"ssize\",{\"1\":{\"1093\":1,\"1261\":1,\"1429\":1,\"1597\":1,\"4475\":1}}],[\"sn=c50a434302cc06797828782970da190e\",{\"1\":{\"3022\":1,\"4247\":1}}],[\"sn=c5ba880fd0c5d82e39531fa42cb036ac\",{\"1\":{\"831\":1,\"3819\":1}}],[\"sn=8509d4aa61d08550c2b7668314da3582\",{\"1\":{\"2877\":1,\"4102\":1}}],[\"sn=a58a9ec9f805d0e109c4b09cd497c9ca\",{\"1\":{\"2772\":1,\"3997\":1}}],[\"snapshotting\",{\"1\":{\"2637\":1,\"4970\":1}}],[\"snmp\",{\"1\":{\"2079\":1}}],[\"schedule服务\",{\"1\":{\"3191\":1,\"5442\":1}}],[\"scheduledthreadpool\",{\"1\":{\"2983\":1,\"2999\":1,\"3008\":1,\"4208\":1,\"4224\":1,\"4233\":1}}],[\"scene=21\",{\"1\":{\"3022\":1,\"4247\":1}}],[\"scene=27\",{\"1\":{\"2772\":1,\"2877\":1,\"3997\":1,\"4102\":1}}],[\"score\",{\"1\":{\"1859\":2,\"3936\":2}}],[\"scatter\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"svn\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"svg\",{\"1\":{\"81\":1,\"3369\":1}}],[\"sg\",{\"1\":{\"1098\":1,\"1099\":1,\"1101\":1,\"1266\":1,\"1267\":1,\"1269\":1,\"1434\":1,\"1435\":1,\"1437\":1,\"1602\":1,\"1603\":1,\"1605\":1,\"4480\":1,\"4481\":1,\"4483\":1}}],[\"sha等加密算法占据着重要的位置\",{\"1\":{\"3274\":1}}],[\"sha\",{\"1\":{\"3239\":3,\"3256\":1}}],[\"share\",{\"1\":{\"2424\":1,\"2451\":1,\"4757\":1,\"4784\":1}}],[\"shared\",{\"1\":{\"1046\":1,\"1214\":1,\"1382\":1,\"1550\":1,\"4428\":1}}],[\"shutdown\",{\"1\":{\"2957\":1,\"4182\":1}}],[\"shutdown等\",{\"1\":{\"856\":1,\"3844\":1}}],[\"shouldparkafterfailedacquire\",{\"1\":{\"2840\":1,\"4065\":1}}],[\"shortest\",{\"1\":{\"2130\":1,\"2223\":1,\"5183\":1}}],[\"source\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"source=distribute\",{\"1\":{\"981\":1,\"5128\":1}}],[\"sockfd\",{\"1\":{\"1082\":1,\"1250\":1,\"1418\":1,\"1586\":1,\"4464\":1}}],[\"socket\",{\"0\":{\"2120\":1,\"2121\":1},\"1\":{\"1050\":1,\"1056\":5,\"1057\":2,\"1060\":2,\"1065\":1,\"1066\":1,\"1087\":1,\"1088\":1,\"1090\":1,\"1093\":1,\"1096\":1,\"1098\":1,\"1101\":2,\"1218\":1,\"1224\":5,\"1225\":2,\"1228\":2,\"1233\":1,\"1234\":1,\"1255\":1,\"1256\":1,\"1258\":1,\"1261\":1,\"1264\":1,\"1266\":1,\"1269\":2,\"1386\":1,\"1392\":5,\"1393\":2,\"1396\":2,\"1401\":1,\"1402\":1,\"1423\":1,\"1424\":1,\"1426\":1,\"1429\":1,\"1432\":1,\"1434\":1,\"1437\":2,\"1554\":1,\"1560\":5,\"1561\":2,\"1564\":2,\"1569\":1,\"1570\":1,\"1591\":1,\"1592\":1,\"1594\":1,\"1597\":1,\"1600\":1,\"1602\":1,\"1605\":2,\"2005\":1,\"2006\":1,\"2032\":1,\"2034\":1,\"4432\":1,\"4438\":5,\"4439\":2,\"4442\":2,\"4447\":1,\"4448\":1,\"4469\":1,\"4470\":1,\"4472\":1,\"4475\":1,\"4478\":1,\"4480\":1,\"4483\":2}}],[\"sockets\",{\"1\":{\"1047\":1,\"1215\":1,\"1383\":1,\"1551\":1,\"4429\":1}}],[\"sort\",{\"1\":{\"949\":1,\"5096\":1}}],[\"something\",{\"1\":{\"255\":1,\"3540\":1}}],[\"sqlsession\",{\"1\":{\"898\":5,\"900\":2,\"912\":1,\"3886\":5,\"3888\":2,\"3900\":1}}],[\"sql\",{\"1\":{\"890\":1,\"892\":2,\"893\":1,\"898\":1,\"900\":3,\"2246\":1,\"2327\":2,\"2508\":1,\"2521\":1,\"2573\":1,\"2580\":1,\"3878\":1,\"3880\":2,\"3881\":1,\"3886\":1,\"3888\":3,\"4579\":1,\"4660\":2,\"4841\":1,\"4854\":1,\"4906\":1,\"4913\":1}}],[\"sqlexception等以及用户自定义的exception异常\",{\"1\":{\"245\":1,\"3530\":1}}],[\"sleuth\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"slf4j\",{\"1\":{\"836\":1,\"3824\":1}}],[\"slide\",{\"0\":{\"0\":1}}],[\"src\",{\"1\":{\"821\":1,\"3809\":1}}],[\"spdy\",{\"1\":{\"5162\":7}}],[\"spm=1001\",{\"1\":{\"548\":1,\"972\":1,\"981\":1,\"3520\":1,\"5119\":1,\"5128\":1}}],[\"spring在企业级开发框架中无人能敌\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"springcloud中的组件有那些\",{\"1\":{\"1742\":1,\"4302\":1}}],[\"springcloud\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"springframework\",{\"1\":{\"846\":1,\"3834\":1}}],[\"springfactoriesloader\",{\"1\":{\"816\":1,\"3804\":1}}],[\"springboot的核心配置文件是application和bootstrap配置文件\",{\"1\":{\"838\":1,\"3826\":1}}],[\"springbootapplication或者\",{\"1\":{\"816\":1,\"3804\":1}}],[\"spring解决\",{\"1\":{\"796\":1,\"3784\":1}}],[\"spring如何解决循环依赖问题\",{\"0\":{\"785\":1,\"3773\":1}}],[\"spring事务机制\",{\"0\":{\"753\":1,\"3741\":1}}],[\"spring的设计模式\",{\"0\":{\"745\":1,\"3733\":1}}],[\"springmvc\",{\"0\":{\"720\":1,\"3708\":1},\"1\":{\"732\":1,\"752\":1,\"3720\":1,\"3740\":1}}],[\"spring\",{\"0\":{\"720\":2,\"754\":1,\"766\":1,\"773\":1,\"815\":1,\"826\":1,\"830\":1,\"870\":1,\"1706\":1,\"1707\":1,\"1733\":1,\"3708\":2,\"3742\":1,\"3754\":1,\"3761\":1,\"3803\":1,\"3814\":1,\"3818\":1,\"3858\":1,\"4266\":1,\"4267\":1,\"4293\":1,\"5468\":1,\"5481\":1},\"1\":{\"325\":2,\"679\":1,\"698\":1,\"711\":1,\"723\":3,\"724\":2,\"727\":1,\"733\":1,\"736\":1,\"742\":1,\"746\":1,\"747\":1,\"748\":1,\"749\":1,\"751\":1,\"752\":1,\"761\":1,\"786\":1,\"791\":1,\"800\":1,\"801\":1,\"809\":3,\"811\":1,\"813\":1,\"814\":2,\"816\":2,\"821\":5,\"823\":3,\"825\":2,\"845\":3,\"856\":2,\"858\":1,\"860\":1,\"861\":1,\"862\":1,\"863\":1,\"873\":1,\"1709\":2,\"1739\":2,\"1743\":9,\"1744\":1,\"2977\":1,\"3041\":1,\"3095\":2,\"3099\":1,\"3602\":2,\"3667\":1,\"3686\":1,\"3699\":1,\"3711\":3,\"3712\":2,\"3715\":1,\"3721\":1,\"3724\":1,\"3730\":1,\"3734\":1,\"3735\":1,\"3736\":1,\"3737\":1,\"3739\":1,\"3740\":1,\"3749\":1,\"3774\":1,\"3779\":1,\"3788\":1,\"3789\":1,\"3797\":3,\"3799\":1,\"3801\":1,\"3802\":2,\"3804\":2,\"3809\":5,\"3811\":3,\"3813\":2,\"3833\":3,\"3844\":2,\"3846\":1,\"3848\":1,\"3849\":1,\"3850\":1,\"3851\":1,\"3861\":1,\"4202\":1,\"4269\":2,\"4299\":2,\"4303\":9,\"4304\":1,\"5292\":1,\"5346\":2,\"5350\":1}}],[\"s\",{\"0\":{\"5463\":1,\"5467\":1},\"1\":{\"455\":4,\"458\":3,\"831\":1,\"1696\":1,\"2460\":1,\"2461\":5,\"2462\":2,\"2466\":1,\"2472\":1,\"2772\":1,\"2877\":1,\"2915\":1,\"3022\":1,\"3046\":1,\"3819\":1,\"3997\":1,\"4102\":1,\"4140\":1,\"4247\":1,\"4256\":1,\"4793\":1,\"4794\":5,\"4795\":2,\"4799\":1,\"4805\":1,\"5297\":1}}],[\"salt值\",{\"1\":{\"3260\":1,\"3261\":1,\"3263\":1,\"3266\":1,\"3267\":1}}],[\"save\",{\"1\":{\"455\":1,\"458\":1,\"2643\":3,\"2646\":1,\"4976\":3,\"4979\":1}}],[\"safe\",{\"1\":{\"448\":1}}],[\"sexnx\",{\"1\":{\"3195\":1,\"5446\":1}}],[\"secondary\",{\"1\":{\"2299\":1,\"4632\":1}}],[\"seo\",{\"1\":{\"2199\":2,\"5252\":2}}],[\"session\",{\"1\":{\"2601\":1,\"4934\":1}}],[\"ses\",{\"1\":{\"1861\":2,\"3938\":2}}],[\"send\",{\"1\":{\"1114\":1,\"1141\":1,\"1146\":1,\"1163\":1,\"1179\":1,\"1282\":1,\"1309\":1,\"1314\":1,\"1331\":1,\"1347\":1,\"1450\":1,\"1477\":1,\"1482\":1,\"1499\":1,\"1515\":1,\"1618\":1,\"1645\":1,\"1650\":1,\"1667\":1,\"1683\":1,\"4496\":1,\"4523\":1,\"4528\":1,\"4545\":1,\"4561\":1}}],[\"sendfile\",{\"0\":{\"1091\":1,\"1259\":1,\"1427\":1,\"1595\":1,\"4473\":1},\"1\":{\"1078\":1,\"1092\":1,\"1093\":1,\"1099\":1,\"1110\":2,\"1246\":1,\"1260\":1,\"1261\":1,\"1267\":1,\"1278\":2,\"1414\":1,\"1428\":1,\"1429\":1,\"1435\":1,\"1446\":2,\"1582\":1,\"1596\":1,\"1597\":1,\"1603\":1,\"1614\":2,\"4460\":1,\"4474\":1,\"4475\":1,\"4481\":1,\"4492\":2}}],[\"selete\",{\"1\":{\"1074\":1,\"1242\":1,\"1410\":1,\"1578\":1,\"4456\":1}}],[\"select\",{\"0\":{\"2575\":2,\"4908\":2},\"1\":{\"893\":3,\"1052\":1,\"1053\":1,\"1055\":1,\"1056\":2,\"1057\":1,\"1072\":1,\"1141\":1,\"1143\":1,\"1158\":1,\"1176\":1,\"1177\":1,\"1220\":1,\"1221\":1,\"1223\":1,\"1224\":2,\"1225\":1,\"1240\":1,\"1309\":1,\"1311\":1,\"1326\":1,\"1344\":1,\"1345\":1,\"1388\":1,\"1389\":1,\"1391\":1,\"1392\":2,\"1393\":1,\"1408\":1,\"1477\":1,\"1479\":1,\"1494\":1,\"1512\":1,\"1513\":1,\"1556\":1,\"1557\":1,\"1559\":1,\"1560\":2,\"1561\":1,\"1576\":1,\"1645\":1,\"1647\":1,\"1662\":1,\"1680\":1,\"1681\":1,\"2355\":1,\"2405\":2,\"2410\":1,\"2411\":1,\"2413\":2,\"2422\":2,\"2423\":1,\"2424\":2,\"2444\":1,\"2450\":1,\"2451\":2,\"2524\":1,\"2525\":2,\"2576\":1,\"2577\":1,\"2578\":1,\"3881\":3,\"4434\":1,\"4435\":1,\"4437\":1,\"4438\":2,\"4439\":1,\"4454\":1,\"4523\":1,\"4525\":1,\"4540\":1,\"4558\":1,\"4559\":1,\"4688\":1,\"4738\":2,\"4743\":1,\"4744\":1,\"4746\":2,\"4755\":2,\"4756\":1,\"4757\":2,\"4777\":1,\"4783\":1,\"4784\":2,\"4857\":1,\"4858\":2,\"4909\":1,\"4910\":1,\"4911\":1}}],[\"semaphores\",{\"1\":{\"1045\":1,\"1213\":1,\"1381\":1,\"1549\":1,\"4427\":1}}],[\"semaphore\",{\"1\":{\"1032\":1,\"1200\":1,\"1368\":1,\"1536\":1,\"2822\":1,\"4047\":1,\"4414\":1}}],[\"sequencenumber\",{\"1\":{\"979\":1,\"5126\":1}}],[\"server3\",{\"1\":{\"1803\":1,\"1806\":5,\"1813\":2,\"1816\":2,\"4363\":1,\"4366\":5,\"4373\":2,\"4376\":2}}],[\"server2\",{\"1\":{\"1802\":4,\"1804\":1,\"1813\":2,\"1818\":2,\"4362\":4,\"4364\":1,\"4373\":2,\"4378\":2}}],[\"server1也会\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"server1\",{\"1\":{\"1801\":3,\"1802\":2,\"1806\":5,\"1813\":3,\"1816\":3,\"1818\":1,\"4361\":3,\"4362\":2,\"4366\":5,\"4373\":3,\"4376\":3,\"4378\":1}}],[\"server\",{\"1\":{\"836\":1,\"1699\":1,\"1804\":1,\"1805\":1,\"1806\":2,\"1807\":1,\"1818\":2,\"2189\":1,\"2201\":1,\"2203\":1,\"2204\":1,\"2208\":1,\"2213\":1,\"2214\":2,\"2215\":1,\"2216\":1,\"2217\":1,\"2218\":2,\"2651\":1,\"2679\":1,\"2680\":1,\"2681\":1,\"2683\":1,\"2686\":1,\"3824\":1,\"4259\":1,\"4364\":1,\"4365\":1,\"4366\":2,\"4367\":1,\"4378\":2,\"4984\":1,\"5012\":1,\"5013\":1,\"5014\":1,\"5016\":1,\"5019\":1,\"5242\":1,\"5254\":1,\"5256\":1,\"5257\":1,\"5261\":1,\"5266\":1,\"5267\":2,\"5268\":1,\"5269\":1,\"5270\":1,\"5271\":2}}],[\"serializable\",{\"1\":{\"772\":1,\"2512\":1,\"2745\":1,\"3760\":1,\"3970\":1,\"4845\":1}}],[\"serialized\",{\"1\":{\"458\":1}}],[\"serialize\",{\"1\":{\"455\":1,\"458\":1}}],[\"serialdata\",{\"1\":{\"455\":1}}],[\"se\",{\"1\":{\"352\":1}}],[\"set或get方法时才创建它们\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"setnx\",{\"1\":{\"2603\":1,\"3196\":1,\"4936\":1,\"5447\":1}}],[\"setting\",{\"1\":{\"900\":1,\"3888\":1}}],[\"setter循环依赖注入解决方案\",{\"1\":{\"791\":1,\"3779\":1}}],[\"set如何保证元素不重复\",{\"0\":{\"376\":1}}],[\"set在元素插入时是要有一定的方法来判断元素是否重复的\",{\"1\":{\"375\":1}}],[\"set可以用来去重\",{\"1\":{\"375\":1}}],[\"set特点\",{\"1\":{\"374\":1}}],[\"set都是继承自collection接口\",{\"1\":{\"371\":1}}],[\"set和list区别\",{\"0\":{\"370\":1}}],[\"set还有一个重要的实现类treeset\",{\"1\":{\"364\":1}}],[\"set\",{\"0\":{\"360\":1,\"2612\":1,\"3605\":1,\"4945\":1},\"1\":{\"2452\":1,\"2590\":1,\"2614\":1,\"2615\":2,\"2616\":1,\"2696\":1,\"2938\":1,\"2942\":1,\"2944\":2,\"2959\":1,\"3195\":1,\"4163\":1,\"4167\":1,\"4169\":2,\"4184\":1,\"4785\":1,\"4923\":1,\"4947\":1,\"4948\":2,\"4949\":1,\"5029\":1,\"5446\":1}}],[\"set等的父接口\",{\"1\":{\"329\":1}}],[\"setaccessible\",{\"1\":{\"314\":1,\"406\":2,\"411\":3,\"424\":8,\"3591\":1}}],[\"singlethreadexecutor\",{\"1\":{\"2997\":1,\"3006\":1,\"4222\":1,\"4231\":1}}],[\"singlethreadexector\",{\"1\":{\"2981\":1,\"4206\":1}}],[\"singlethreadscheduledexecutor\",{\"1\":{\"2983\":1,\"3008\":1,\"4208\":1,\"4233\":1}}],[\"singleton\",{\"1\":{\"673\":6,\"3661\":6}}],[\"single\",{\"1\":{\"2380\":1,\"4713\":1}}],[\"since\",{\"1\":{\"2183\":2,\"5236\":2}}],[\"signal\",{\"1\":{\"1043\":1,\"1211\":1,\"1379\":1,\"1547\":1,\"4425\":1}}],[\"simple\",{\"1\":{\"915\":1,\"3903\":1}}],[\"simpletrycatch\",{\"1\":{\"272\":1,\"274\":1,\"3549\":1,\"3551\":1}}],[\"size++\",{\"1\":{\"484\":1}}],[\"size和capacity之间有啥关系\",{\"1\":{\"403\":1}}],[\"size\",{\"1\":{\"392\":1,\"395\":1,\"406\":5,\"408\":1,\"419\":1,\"424\":10,\"426\":2,\"484\":3,\"492\":2,\"940\":3,\"949\":3,\"1093\":1,\"1261\":1,\"1429\":1,\"1597\":1,\"4475\":1,\"5087\":3,\"5096\":3}}],[\"site\",{\"1\":{\"81\":2,\"3369\":2}}],[\"store\",{\"1\":{\"2863\":1,\"4088\":1}}],[\"sticky是\",{\"1\":{\"963\":1,\"5110\":1}}],[\"stickyassignor的分配策略\",{\"1\":{\"971\":1,\"5118\":1}}],[\"stickyassignor算法比较复杂\",{\"1\":{\"967\":1,\"5114\":1}}],[\"stickyassignor分区分配算法\",{\"1\":{\"963\":1,\"5110\":1}}],[\"stickyassignor\",{\"1\":{\"943\":1,\"962\":1,\"5090\":1,\"5109\":1}}],[\"stuent\",{\"1\":{\"2392\":1,\"4725\":1}}],[\"student\",{\"1\":{\"893\":2,\"2391\":1,\"2392\":1,\"3881\":2,\"4724\":1,\"4725\":1}}],[\"stuff\",{\"1\":{\"455\":1}}],[\"start\",{\"1\":{\"949\":3,\"2452\":1,\"4785\":1,\"5096\":3}}],[\"starter解决的是依赖管理配置复杂的问题\",{\"1\":{\"858\":1,\"3846\":1}}],[\"starter的目的也是简化配置\",{\"1\":{\"858\":1,\"3846\":1}}],[\"starter\",{\"0\":{\"857\":1,\"3845\":1},\"1\":{\"816\":1,\"823\":1,\"855\":1,\"858\":1,\"860\":1,\"861\":1,\"862\":1,\"863\":2,\"871\":1,\"3804\":1,\"3811\":1,\"3843\":1,\"3846\":1,\"3848\":1,\"3849\":1,\"3850\":1,\"3851\":2,\"3859\":1}}],[\"start2\",{\"1\":{\"630\":2}}],[\"start1\",{\"1\":{\"630\":2}}],[\"stack<>\",{\"1\":{\"573\":1}}],[\"stack<integer>\",{\"1\":{\"573\":1}}],[\"stack\",{\"0\":{\"561\":1,\"567\":1,\"591\":1},\"1\":{\"563\":1,\"566\":1,\"568\":1,\"571\":2,\"573\":4,\"575\":2,\"594\":1,\"597\":1,\"607\":2,\"608\":1,\"612\":2,\"615\":1,\"616\":2,\"617\":1,\"620\":1,\"621\":2,\"635\":1}}],[\"status\",{\"1\":{\"3161\":2,\"5412\":2}}],[\"statement\",{\"1\":{\"2445\":1,\"4778\":1}}],[\"statements\",{\"1\":{\"255\":1,\"3540\":1}}],[\"state\",{\"1\":{\"455\":1,\"458\":1}}],[\"static\",{\"1\":{\"255\":1,\"258\":1,\"263\":1,\"269\":2,\"272\":1,\"274\":1,\"398\":1,\"402\":1,\"673\":2,\"704\":1,\"793\":1,\"2957\":1,\"3540\":1,\"3543\":1,\"3549\":1,\"3551\":1,\"3661\":2,\"3692\":1,\"3781\":1,\"4182\":1}}],[\"stream\",{\"1\":{\"455\":1,\"458\":1,\"1743\":1,\"4303\":1}}],[\"stringbuffer\",{\"1\":{\"3047\":1,\"5298\":1}}],[\"stringbuilder\",{\"1\":{\"3047\":1,\"5298\":1}}],[\"string>\",{\"1\":{\"286\":1,\"289\":1,\"291\":2,\"297\":2,\"305\":1,\"406\":2,\"411\":6,\"424\":1,\"3563\":1,\"3566\":1,\"3568\":2,\"3574\":2,\"3582\":1}}],[\"string\",{\"0\":{\"2593\":1,\"4926\":1},\"1\":{\"212\":1,\"213\":1,\"215\":1,\"216\":2,\"227\":1,\"263\":2,\"291\":1,\"297\":1,\"319\":2,\"321\":2,\"738\":1,\"793\":1,\"940\":2,\"949\":2,\"2590\":1,\"2595\":1,\"2957\":1,\"3495\":1,\"3496\":1,\"3498\":1,\"3499\":2,\"3510\":1,\"3568\":1,\"3574\":1,\"3596\":2,\"3598\":2,\"3726\":1,\"3781\":1,\"4182\":1,\"4923\":1,\"4928\":1,\"5087\":2,\"5096\":2}}],[\"sum\",{\"1\":{\"1011\":5,\"1012\":3}}],[\"submitted\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"submit\",{\"1\":{\"2957\":8,\"4182\":8}}],[\"subreactor\",{\"1\":{\"1177\":1,\"1178\":1,\"1345\":1,\"1346\":1,\"1513\":1,\"1514\":1,\"1681\":1,\"1682\":1,\"4559\":1,\"4560\":1}}],[\"sublist\",{\"1\":{\"949\":1,\"5096\":1}}],[\"subscriptions\",{\"1\":{\"949\":3,\"5096\":3}}],[\"subscription>\",{\"1\":{\"949\":1,\"5096\":1}}],[\"subclasses\",{\"1\":{\"215\":1,\"3498\":1}}],[\"supported\",{\"1\":{\"781\":1,\"3769\":1}}],[\"supports\",{\"1\":{\"777\":1,\"3765\":1}}],[\"sun\",{\"1\":{\"227\":3,\"3510\":3}}],[\"syscall\",{\"1\":{\"2661\":1,\"4994\":1}}],[\"system\",{\"1\":{\"227\":2,\"263\":1,\"269\":2,\"406\":2,\"411\":3,\"424\":8,\"480\":1,\"484\":1,\"492\":1,\"494\":1,\"630\":6,\"825\":1,\"1074\":1,\"1183\":1,\"1242\":1,\"1351\":1,\"1410\":1,\"1519\":1,\"1578\":1,\"1687\":1,\"2914\":1,\"2925\":1,\"2959\":1,\"3510\":2,\"3813\":1,\"4139\":1,\"4150\":1,\"4184\":1,\"4456\":1,\"4565\":1}}],[\"synchronousqueue\",{\"1\":{\"2982\":2,\"3007\":1,\"4207\":2,\"4232\":1}}],[\"synchronization\",{\"1\":{\"458\":1}}],[\"synchronized关键字原理\",{\"1\":{\"2916\":1,\"2926\":1,\"4141\":1,\"4151\":1}}],[\"synchronizeddemo2\",{\"1\":{\"2925\":1,\"4150\":1}}],[\"synchronizeddemo\",{\"1\":{\"2914\":1,\"2915\":3,\"4139\":1,\"4140\":3}}],[\"synchronized原理\",{\"0\":{\"2912\":1,\"4137\":1}}],[\"synchronized是悲观锁\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"synchronized和cas实现加锁效果\",{\"1\":{\"2774\":1,\"3999\":1}}],[\"synchronized和lock效率没差\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"synchronized的效率会远小于lock\",{\"1\":{\"1842\":1,\"3919\":1}}],[\"synchronizedlist可以指定锁定的对象\",{\"1\":{\"516\":1}}],[\"synchronizedlist有很好的扩展和兼容功能\",{\"1\":{\"514\":1}}],[\"synchronizedlist和vector最主要的区别\",{\"1\":{\"513\":1}}],[\"synchronizedlist和vector的一个比较明显区别就是一个使用了同步代码块\",{\"1\":{\"497\":1}}],[\"synchronizedlist和vector的区别\",{\"0\":{\"471\":1}}],[\"synchronizedlist中实现的类并没有都使用synchronized同步代码块\",{\"1\":{\"510\":1}}],[\"synchronizedlist的同步代码块锁定的是mutex对象\",{\"1\":{\"508\":1}}],[\"synchronizedlist的实现\",{\"1\":{\"481\":1,\"489\":1}}],[\"synchronizedlist里面实现的方法几乎都是使用同步代码块包上list的方法\",{\"1\":{\"497\":1}}],[\"synchronizedlist使用同步代码块实现\",{\"1\":{\"486\":1}}],[\"synchronizedlist\",{\"1\":{\"473\":1,\"476\":1,\"512\":1}}],[\"synchronizedlist是java\",{\"1\":{\"472\":1}}],[\"synchronized\",{\"0\":{\"1841\":1,\"2913\":1,\"2924\":1,\"3918\":1,\"4138\":1,\"4149\":1},\"1\":{\"227\":1,\"458\":1,\"480\":1,\"482\":1,\"490\":1,\"494\":1,\"673\":2,\"674\":1,\"1030\":1,\"1198\":1,\"1366\":1,\"1534\":1,\"2737\":1,\"2739\":2,\"2740\":1,\"2741\":1,\"2744\":1,\"2814\":1,\"2886\":1,\"2895\":1,\"2914\":2,\"2917\":1,\"2925\":2,\"2927\":3,\"2930\":1,\"2931\":2,\"2933\":1,\"3510\":1,\"3661\":2,\"3662\":1,\"3962\":1,\"3964\":2,\"3965\":1,\"3966\":1,\"3969\":1,\"4039\":1,\"4111\":1,\"4120\":1,\"4139\":2,\"4142\":1,\"4150\":2,\"4152\":3,\"4155\":1,\"4156\":2,\"4158\":1,\"4412\":1}}],[\"sync\",{\"1\":{\"2746\":4,\"2748\":1,\"2909\":3,\"3971\":4,\"3973\":1,\"4134\":3}}],[\"syn\",{\"0\":{\"2104\":2},\"1\":{\"1989\":2,\"2015\":1,\"2018\":1,\"2020\":1}}],[\"l\",{\"1\":{\"2915\":1,\"4140\":1}}],[\"lfu\",{\"1\":{\"2686\":1,\"2687\":1,\"5019\":1,\"5020\":1}}],[\"lru\",{\"1\":{\"2679\":1,\"2682\":1,\"5012\":1,\"5015\":1}}],[\"lpush\",{\"1\":{\"2611\":1,\"4944\":1}}],[\"lt\",{\"1\":{\"1063\":1,\"1231\":1,\"1399\":1,\"1567\":1,\"4445\":1}}],[\"lk\",{\"1\":{\"635\":1}}],[\"leadnews\",{\"1\":{\"3191\":1,\"5442\":1}}],[\"leader\",{\"1\":{\"1782\":5,\"1783\":3,\"1787\":1,\"1788\":1,\"1789\":1,\"1793\":2,\"1794\":2,\"1795\":1,\"1796\":3,\"1797\":1,\"1799\":5,\"1800\":3,\"1801\":1,\"1802\":4,\"1804\":1,\"1806\":1,\"1808\":1,\"1810\":1,\"1811\":2,\"1813\":2,\"1816\":1,\"1818\":4,\"4342\":5,\"4343\":3,\"4347\":1,\"4348\":1,\"4349\":1,\"4353\":2,\"4354\":2,\"4355\":1,\"4356\":3,\"4357\":1,\"4359\":5,\"4360\":3,\"4361\":1,\"4362\":4,\"4364\":1,\"4366\":1,\"4368\":1,\"4370\":1,\"4371\":2,\"4373\":2,\"4376\":1,\"4378\":4}}],[\"least\",{\"1\":{\"2679\":1,\"2682\":1,\"2686\":1,\"2687\":1,\"5012\":1,\"5015\":1,\"5019\":1,\"5020\":1}}],[\"len\",{\"1\":{\"1082\":2,\"1250\":2,\"1418\":2,\"1586\":2,\"2597\":1,\"2598\":1,\"4464\":2,\"4930\":1,\"4931\":1}}],[\"length\",{\"1\":{\"455\":3,\"480\":1,\"949\":2,\"1011\":1,\"5096\":2}}],[\"level\",{\"1\":{\"1063\":1,\"1231\":1,\"1399\":1,\"1567\":1,\"2242\":2,\"4445\":1,\"4575\":2}}],[\"let\",{\"1\":{\"492\":1,\"494\":1}}],[\"landin\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"language\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"lang=zh\",{\"1\":{\"831\":1,\"3819\":1}}],[\"lang\",{\"1\":{\"226\":1,\"274\":2,\"714\":1,\"2921\":1,\"3509\":1,\"3551\":2,\"3702\":1,\"4146\":1}}],[\"lambda\",{\"1\":{\"809\":1,\"3797\":1}}],[\"label\",{\"1\":{\"263\":1}}],[\"low\",{\"1\":{\"2538\":2,\"2540\":1,\"2541\":1,\"4871\":2,\"4873\":1,\"4874\":1}}],[\"looking\",{\"1\":{\"1801\":1,\"1802\":1,\"1803\":1,\"1805\":1,\"1811\":1,\"4361\":1,\"4362\":1,\"4363\":1,\"4365\":1,\"4371\":1}}],[\"localstorage\",{\"1\":{\"3134\":1,\"5385\":1}}],[\"localhost\",{\"1\":{\"855\":1,\"3226\":1,\"3232\":1,\"3843\":1}}],[\"lock\",{\"0\":{\"1841\":1,\"2459\":1,\"2463\":1,\"2467\":1,\"3918\":1,\"4792\":1,\"4796\":1,\"4800\":1},\"1\":{\"1030\":1,\"1031\":1,\"1198\":1,\"1199\":1,\"1366\":1,\"1367\":1,\"1534\":1,\"1535\":1,\"2246\":1,\"2366\":1,\"2392\":2,\"2424\":1,\"2425\":2,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2445\":1,\"2447\":1,\"2451\":1,\"2456\":1,\"2457\":1,\"2458\":3,\"2460\":1,\"2464\":1,\"2468\":3,\"2469\":1,\"2470\":3,\"2471\":2,\"2474\":1,\"2525\":3,\"2744\":1,\"2745\":1,\"3969\":1,\"3970\":1,\"4412\":1,\"4413\":1,\"4579\":1,\"4699\":1,\"4725\":2,\"4757\":1,\"4758\":2,\"4772\":1,\"4773\":1,\"4774\":1,\"4775\":1,\"4778\":1,\"4780\":1,\"4784\":1,\"4789\":1,\"4790\":1,\"4791\":3,\"4793\":1,\"4797\":1,\"4801\":3,\"4802\":1,\"4803\":3,\"4804\":2,\"4807\":1,\"4858\":3}}],[\"locking\",{\"1\":{\"672\":1,\"2242\":2,\"3660\":1,\"4575\":2}}],[\"long\",{\"1\":{\"227\":2,\"630\":4,\"2959\":1,\"3510\":2,\"4184\":1}}],[\"loader\",{\"1\":{\"704\":2,\"3692\":2}}],[\"load\",{\"1\":{\"392\":1,\"398\":1,\"2660\":1,\"4993\":1}}],[\"loadfactor两个参数的方法\",{\"1\":{\"429\":1}}],[\"loadfactor是装载因子\",{\"1\":{\"421\":1,\"431\":1}}],[\"loadfactor和threshold又是干啥的\",{\"1\":{\"403\":1}}],[\"loadfactor的默认值为0\",{\"1\":{\"398\":1}}],[\"loadfactor\",{\"1\":{\"392\":1,\"397\":1,\"420\":1,\"424\":10,\"426\":2,\"431\":1}}],[\"loadclass\",{\"1\":{\"212\":1,\"217\":1,\"226\":1,\"227\":2,\"231\":1,\"3495\":1,\"3500\":1,\"3509\":1,\"3510\":2,\"3514\":1}}],[\"loading\",{\"1\":{\"188\":1,\"3471\":1}}],[\"logs\",{\"1\":{\"2538\":1,\"4871\":1}}],[\"logn\",{\"1\":{\"641\":1,\"643\":2,\"655\":1,\"658\":1,\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"3629\":1,\"3631\":2,\"3643\":1,\"3646\":1,\"4438\":1}}],[\"log2\",{\"1\":{\"358\":1,\"367\":1}}],[\"log\",{\"0\":{\"2545\":1,\"4878\":1},\"1\":{\"261\":2,\"522\":1,\"836\":2,\"2253\":1,\"2488\":1,\"2489\":1,\"2531\":2,\"2535\":1,\"2546\":1,\"2548\":1,\"2549\":3,\"2550\":3,\"3546\":2,\"3611\":1,\"3824\":2,\"4586\":1,\"4821\":1,\"4822\":1,\"4864\":2,\"4868\":1,\"4879\":1,\"4881\":1,\"4882\":3,\"4883\":3}}],[\"logy\",{\"1\":{\"92\":2,\"3380\":2}}],[\"logout\",{\"1\":{\"3208\":1,\"5459\":1}}],[\"logo\",{\"1\":{\"81\":2,\"3369\":2}}],[\"like\",{\"1\":{\"2331\":1,\"2358\":2,\"4664\":1,\"4691\":2}}],[\"limit\",{\"1\":{\"893\":1,\"2538\":3,\"2540\":1,\"2541\":3,\"2580\":1,\"3881\":1,\"4871\":3,\"4873\":1,\"4874\":3,\"4913\":1}}],[\"list和zset\",{\"1\":{\"3173\":1,\"5424\":1}}],[\"listpack\",{\"1\":{\"2624\":1,\"2632\":1,\"4957\":1,\"4965\":1}}],[\"listen\",{\"0\":{\"2126\":1},\"1\":{\"2007\":1,\"2011\":1}}],[\"listener\",{\"1\":{\"851\":1,\"3839\":1}}],[\"list<topicpartition>\",{\"1\":{\"949\":1,\"5096\":1}}],[\"list<topicpartition>>\",{\"1\":{\"949\":2,\"5096\":2}}],[\"list<partitioninfo>\",{\"1\":{\"940\":2,\"5087\":2}}],[\"list<string>>\",{\"1\":{\"949\":2,\"5096\":2}}],[\"list<string>\",{\"1\":{\"476\":1,\"949\":1,\"5096\":1}}],[\"listiterator\",{\"1\":{\"510\":1}}],[\"list1\",{\"1\":{\"476\":1}}],[\"list2\",{\"1\":{\"476\":1}}],[\"list主要有arraylist\",{\"1\":{\"443\":1}}],[\"list常见面试题\",{\"0\":{\"441\":1}}],[\"list特点\",{\"1\":{\"372\":1}}],[\"list\",{\"0\":{\"327\":1,\"2604\":1,\"3604\":1,\"4937\":1},\"1\":{\"371\":1,\"473\":2,\"476\":3,\"482\":1,\"490\":1,\"2590\":1,\"2606\":1,\"2607\":3,\"2608\":1,\"2609\":1,\"2611\":1,\"4923\":1,\"4939\":1,\"4940\":3,\"4941\":1,\"4942\":1,\"4944\":1}}],[\"linux如何给文件权限\",{\"1\":{\"3089\":1,\"5340\":1}}],[\"linux\",{\"0\":{\"2096\":1,\"5466\":1,\"5478\":1},\"1\":{\"1002\":1,\"1092\":1,\"1099\":1,\"1110\":1,\"1260\":1,\"1267\":1,\"1278\":1,\"1428\":1,\"1435\":1,\"1446\":1,\"1596\":1,\"1603\":1,\"1614\":1,\"1692\":1,\"1981\":1,\"2661\":1,\"2662\":1,\"2663\":1,\"3914\":1,\"4252\":1,\"4474\":1,\"4481\":1,\"4492\":1,\"4994\":1,\"4995\":1,\"4996\":1}}],[\"linux常用命令\",{\"0\":{\"996\":1,\"3908\":1}}],[\"line\",{\"1\":{\"263\":3,\"2193\":1,\"5246\":1}}],[\"linkedblockingqueue\",{\"1\":{\"2981\":1,\"3006\":1,\"4206\":1,\"4231\":1}}],[\"linkedhashset是hashset的子类\",{\"1\":{\"369\":1}}],[\"linkedhashset\",{\"0\":{\"368\":1}}],[\"linkedhashmap可以保持插入顺序或访问顺序\",{\"1\":{\"440\":1}}],[\"linkedhashmap也不例外\",{\"1\":{\"369\":1}}],[\"linkedhashmap\",{\"0\":{\"439\":1},\"1\":{\"291\":1,\"298\":1,\"3568\":1,\"3575\":1}}],[\"linkedhashmap<>\",{\"1\":{\"289\":1,\"291\":1,\"3566\":1,\"3568\":1}}],[\"linkedlist<>\",{\"1\":{\"600\":1,\"630\":1}}],[\"linkedlist与vector几种实现\",{\"1\":{\"443\":1}}],[\"linkedlist内部是一个双向链表\",{\"1\":{\"339\":1}}],[\"linkedlist是一个list\",{\"1\":{\"339\":1}}],[\"linkedlist\",{\"0\":{\"338\":1},\"1\":{\"446\":1,\"450\":1,\"601\":1,\"602\":1,\"603\":1,\"606\":2,\"633\":1}}],[\"linking\",{\"1\":{\"188\":1,\"3471\":1}}],[\"link\",{\"1\":{\"81\":1,\"3369\":1}}],[\"libcontainer\",{\"1\":{\"1704\":2,\"4264\":2}}],[\"library\",{\"1\":{\"711\":1,\"3699\":1}}],[\"lib\",{\"1\":{\"207\":1,\"3490\":1}}],[\"lib目录下的\",{\"1\":{\"206\":1,\"3489\":1}}],[\"light\",{\"1\":{\"81\":1,\"3369\":1}}],[\"tls\",{\"1\":{\"2191\":1,\"2198\":2,\"5244\":1,\"5251\":2}}],[\"ttl\",{\"1\":{\"2148\":1,\"2680\":1,\"5013\":1,\"5201\":1}}],[\"ttl>\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"tt>\",{\"1\":{\"455\":3}}],[\"tcp的最大连接数=客户端的ip数⋅客户端的端口数\",{\"1\":{\"2047\":1}}],[\"tcp四次挥手\",{\"0\":{\"2105\":1},\"1\":{\"1990\":1}}],[\"tcp三次握手\",{\"0\":{\"2094\":1},\"1\":{\"1979\":1}}],[\"tcp基础\",{\"0\":{\"2012\":1},\"1\":{\"1971\":1}}],[\"tcp和udp常见面试题\",{\"0\":{\"1968\":1}}],[\"tcp\",{\"0\":{\"2022\":2,\"2025\":1,\"2031\":1,\"2037\":1,\"2050\":1,\"2096\":1,\"2098\":1,\"2100\":1,\"2121\":1,\"2125\":1,\"2126\":1,\"2140\":1,\"2142\":1,\"2232\":1,\"5193\":1,\"5195\":1},\"1\":{\"1047\":1,\"1215\":1,\"1383\":1,\"1551\":1,\"1795\":1,\"1972\":1,\"1973\":2,\"1974\":1,\"1975\":1,\"1976\":1,\"1977\":1,\"1978\":1,\"1980\":1,\"1981\":1,\"1983\":1,\"1985\":1,\"1991\":1,\"2006\":1,\"2010\":1,\"2011\":1,\"2018\":1,\"2019\":1,\"2021\":1,\"2023\":1,\"2024\":1,\"2026\":1,\"2029\":1,\"2030\":6,\"2038\":1,\"2044\":1,\"2048\":1,\"2049\":1,\"2054\":1,\"2057\":1,\"2060\":1,\"2063\":1,\"2066\":1,\"2069\":1,\"2072\":2,\"2075\":1,\"2083\":1,\"2084\":1,\"2085\":1,\"2090\":1,\"2091\":3,\"2092\":2,\"2093\":1,\"2133\":1,\"2191\":1,\"2192\":2,\"2193\":1,\"2198\":2,\"2213\":1,\"2226\":1,\"4355\":1,\"4429\":1,\"5162\":4,\"5186\":1,\"5244\":1,\"5245\":2,\"5246\":1,\"5251\":2,\"5266\":1}}],[\"t3\",{\"1\":{\"968\":1,\"5115\":1}}],[\"t2\",{\"1\":{\"959\":2,\"968\":1,\"5106\":2,\"5115\":1}}],[\"t\",{\"1\":{\"893\":2,\"1093\":3,\"1261\":3,\"1429\":3,\"1597\":3,\"2391\":1,\"2392\":2,\"2538\":5,\"2944\":6,\"2945\":1,\"3881\":2,\"4169\":6,\"4170\":1,\"4475\":3,\"4724\":1,\"4725\":2,\"4871\":5}}],[\"timeunit\",{\"1\":{\"2957\":2,\"2959\":1,\"4182\":2,\"4184\":1}}],[\"time\",{\"0\":{\"2112\":1,\"2113\":1,\"2115\":1,\"2116\":1},\"1\":{\"625\":1,\"1997\":1,\"1998\":1,\"1999\":1,\"2000\":1,\"2001\":1,\"2959\":2,\"4184\":2}}],[\"title\",{\"1\":{\"81\":1,\"3369\":1}}],[\"type\",{\"1\":{\"274\":1,\"280\":1,\"3551\":1,\"3557\":1}}],[\"tag\",{\"1\":{\"2183\":1,\"5236\":1}}],[\"tasks\",{\"1\":{\"2959\":3,\"4184\":3}}],[\"task\",{\"1\":{\"972\":1,\"981\":2,\"5119\":1,\"5128\":2}}],[\"target\",{\"1\":{\"274\":1,\"279\":1,\"3551\":1,\"3556\":1}}],[\"tables\",{\"1\":{\"2366\":1,\"2371\":1,\"2392\":2,\"2396\":1,\"2425\":2,\"4699\":1,\"4704\":1,\"4725\":2,\"4729\":1,\"4758\":2}}],[\"table\",{\"1\":{\"271\":1,\"274\":1,\"275\":1,\"2242\":1,\"2369\":2,\"3548\":1,\"3551\":1,\"3552\":1,\"4575\":1,\"4702\":2}}],[\"terminating\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"tencent\",{\"1\":{\"1870\":1,\"3947\":1}}],[\"test\",{\"1\":{\"861\":1,\"3849\":1}}],[\"testnpe\",{\"1\":{\"272\":1,\"274\":1,\"3549\":1,\"3551\":1}}],[\"template\",{\"1\":{\"749\":1,\"3152\":1,\"3737\":1,\"5403\":1}}],[\"text\",{\"1\":{\"2282\":1,\"2292\":1,\"2305\":1,\"4615\":1,\"4625\":1,\"4638\":1}}],[\"tex\",{\"0\":{\"91\":1,\"3379\":1}}],[\"txt\",{\"1\":{\"261\":1,\"3546\":1}}],[\"tmp\",{\"1\":{\"261\":1,\"3546\":1}}],[\"t1p3\",{\"1\":{\"955\":1,\"5102\":1}}],[\"t1p2\",{\"1\":{\"954\":1,\"5101\":1}}],[\"t1p1\",{\"1\":{\"953\":1,\"5100\":1}}],[\"t1p0\",{\"1\":{\"953\":1,\"5100\":1}}],[\"t1\",{\"1\":{\"227\":3,\"959\":2,\"968\":1,\"3510\":3,\"5106\":2,\"5115\":1}}],[\"trx\",{\"1\":{\"2531\":1,\"2534\":1,\"2538\":5,\"2543\":1,\"4864\":1,\"4867\":1,\"4871\":5,\"4876\":1}}],[\"triggered\",{\"1\":{\"1063\":2,\"1231\":2,\"1399\":2,\"1567\":2,\"4445\":2}}],[\"trans\",{\"1\":{\"2544\":1,\"4877\":1}}],[\"transferto\",{\"1\":{\"1109\":1,\"1110\":1,\"1277\":1,\"1278\":1,\"1445\":1,\"1446\":1,\"1613\":1,\"1614\":1,\"4491\":1,\"4492\":1}}],[\"transaction\",{\"1\":{\"2380\":1,\"2452\":1,\"4713\":1,\"4785\":1}}],[\"transactionstatus\",{\"1\":{\"764\":1,\"3752\":1}}],[\"transactiondefinition\",{\"1\":{\"763\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":1,\"772\":1,\"774\":1,\"776\":1,\"777\":1,\"778\":1,\"780\":1,\"781\":1,\"782\":1,\"784\":2,\"3751\":1,\"3755\":1,\"3756\":1,\"3757\":1,\"3758\":1,\"3759\":1,\"3760\":1,\"3762\":1,\"3764\":1,\"3765\":1,\"3766\":1,\"3768\":1,\"3769\":1,\"3770\":1,\"3772\":2}}],[\"transient\",{\"1\":{\"263\":1,\"395\":1}}],[\"tree\",{\"1\":{\"2269\":1,\"4602\":1}}],[\"treemap要求键实现comparable接口或通过构造方法提供一个com\",{\"1\":{\"436\":1}}],[\"treemap同样实现了sortedmap和navigablemap接口\",{\"1\":{\"435\":1}}],[\"treemap同样实现了map接口\",{\"1\":{\"434\":1}}],[\"treemap与hashmap相比\",{\"1\":{\"434\":1}}],[\"treemap\",{\"0\":{\"433\":1}}],[\"treemap是按key排序的\",{\"1\":{\"382\":1}}],[\"treemap有treeset\",{\"1\":{\"369\":1}}],[\"treeset是用compareto\",{\"1\":{\"382\":1}}],[\"treeset作为一种set\",{\"1\":{\"382\":1}}],[\"treeset的底层是treemap的keyset\",{\"1\":{\"381\":1}}],[\"treeset中的数据是自动排好序的\",{\"1\":{\"378\":1}}],[\"treeset要求元素实现comparable接口或通过构造方法提供一个com\",{\"1\":{\"367\":1}}],[\"treeset同样实现了sortedset和navigatableset接口\",{\"1\":{\"367\":1}}],[\"treeset实现了set接口\",{\"1\":{\"366\":1}}],[\"treeset\",{\"0\":{\"365\":1},\"1\":{\"378\":1}}],[\"tryreleaseshared\",{\"1\":{\"2848\":1,\"4073\":1}}],[\"tryrelease\",{\"1\":{\"2846\":1,\"4071\":1}}],[\"tryacquireshared\",{\"1\":{\"2847\":1,\"4072\":1}}],[\"tryacquire\",{\"1\":{\"2838\":1,\"2845\":1,\"4063\":1,\"4070\":1}}],[\"try\",{\"0\":{\"259\":1,\"3544\":1},\"1\":{\"227\":1,\"260\":2,\"261\":1,\"263\":3,\"266\":1,\"269\":2,\"272\":1,\"3510\":1,\"3545\":2,\"3546\":1,\"3549\":1}}],[\"true\",{\"1\":{\"149\":1,\"153\":1,\"212\":1,\"314\":1,\"406\":2,\"411\":3,\"424\":8,\"2336\":1,\"2748\":1,\"2845\":1,\"2846\":1,\"2848\":1,\"2910\":1,\"3437\":1,\"3495\":1,\"3591\":1,\"3973\":1,\"4070\":1,\"4071\":1,\"4073\":1,\"4135\":1,\"4669\":1}}],[\"t0p3\",{\"1\":{\"955\":1,\"5102\":1}}],[\"t0p2\",{\"1\":{\"954\":1,\"5101\":1}}],[\"t0p1\",{\"1\":{\"953\":1,\"5100\":1}}],[\"t0p0\",{\"1\":{\"953\":1,\"5100\":1}}],[\"t0\",{\"1\":{\"227\":2,\"959\":1,\"968\":1,\"972\":1,\"981\":2,\"3510\":2,\"5106\":1,\"5115\":1,\"5119\":1,\"5128\":2}}],[\"that\",{\"1\":{\"455\":1,\"458\":1,\"2959\":1,\"4184\":1}}],[\"than\",{\"1\":{\"215\":1,\"2959\":1,\"3498\":1,\"4184\":1}}],[\"threallocal\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"threadfactory\",{\"1\":{\"2959\":7,\"2967\":1,\"4184\":7,\"4192\":1}}],[\"threads\",{\"1\":{\"2959\":4,\"4184\":4}}],[\"thread2\",{\"1\":{\"2957\":8,\"4182\":8}}],[\"threadpooltaskexecutor\",{\"1\":{\"2972\":1,\"2977\":1,\"4197\":1,\"4202\":1}}],[\"threadpool\",{\"1\":{\"2957\":1,\"4182\":1}}],[\"threadpoolexecutor其他常见参数\",{\"1\":{\"2964\":1,\"4189\":1}}],[\"threadpoolexecutor\",{\"1\":{\"2957\":17,\"2959\":2,\"2960\":1,\"2973\":1,\"2974\":1,\"2975\":1,\"2976\":1,\"2977\":2,\"2995\":1,\"3004\":1,\"4182\":17,\"4184\":2,\"4185\":1,\"4198\":1,\"4199\":1,\"4200\":1,\"4201\":1,\"4202\":2,\"4220\":1,\"4229\":1}}],[\"thread内部都是使用仅有的那个threadlocalmap\",{\"1\":{\"2948\":1,\"4173\":1}}],[\"threadlocal对象\",{\"1\":{\"2948\":1,\"4173\":1}}],[\"threadlocal<\",{\"1\":{\"2947\":1,\"4172\":1}}],[\"threadlocal类的set\",{\"1\":{\"2943\":1,\"4168\":1}}],[\"threadlocal类主要解决的就是让每个线程绑定自己的值\",{\"1\":{\"2937\":1,\"4162\":1}}],[\"threadlocals\",{\"1\":{\"2941\":1,\"2942\":1,\"2944\":2,\"4166\":1,\"4167\":1,\"4169\":2}}],[\"threadlocalmap的\",{\"1\":{\"2948\":1,\"4173\":1}}],[\"threadlocalmap\",{\"1\":{\"2941\":2,\"2942\":2,\"2944\":2,\"2945\":1,\"2947\":1,\"4166\":2,\"4167\":2,\"4169\":2,\"4170\":1,\"4172\":1}}],[\"threadlocal\",{\"0\":{\"2935\":1,\"4160\":1},\"1\":{\"2941\":2,\"2942\":1,\"2945\":2,\"2948\":2,\"4166\":2,\"4167\":1,\"4170\":2,\"4173\":2}}],[\"threadlocal原理\",{\"0\":{\"2934\":1,\"4159\":1}}],[\"threadlocalrandom\",{\"1\":{\"940\":1,\"5087\":1}}],[\"threadid\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"thread\",{\"1\":{\"448\":1,\"2832\":1,\"2941\":1,\"2944\":4,\"2945\":1,\"2959\":2,\"4057\":1,\"4166\":1,\"4169\":4,\"4170\":1,\"4184\":2}}],[\"threshold＝容量\",{\"1\":{\"400\":1}}],[\"threshold\",{\"0\":{\"416\":1},\"1\":{\"392\":1,\"399\":1,\"419\":1,\"420\":1,\"424\":10,\"426\":2}}],[\"throw和throws的区别\",{\"0\":{\"3537\":1}}],[\"throwable3\",{\"1\":{\"263\":2}}],[\"throwable1\",{\"1\":{\"263\":2}}],[\"throwable2\",{\"1\":{\"263\":3}}],[\"throwable\",{\"1\":{\"263\":11,\"706\":1,\"714\":1,\"3694\":1,\"3702\":1}}],[\"throwable是\",{\"1\":{\"238\":1,\"3523\":1}}],[\"throw\",{\"1\":{\"256\":1,\"258\":1,\"263\":2,\"455\":1,\"480\":1,\"484\":1,\"494\":1,\"2959\":2,\"3541\":1,\"3543\":1,\"4184\":2}}],[\"throws\",{\"1\":{\"227\":1,\"253\":1,\"255\":1,\"455\":1,\"458\":1,\"704\":1,\"706\":1,\"714\":1,\"2959\":2,\"3510\":1,\"3538\":1,\"3540\":1,\"3692\":1,\"3694\":1,\"3702\":1,\"4184\":2}}],[\"they\",{\"1\":{\"2959\":2,\"4184\":2}}],[\"theorem\",{\"1\":{\"1824\":1,\"4384\":1}}],[\"the\",{\"1\":{\"261\":1,\"455\":7,\"458\":4,\"940\":1,\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"2959\":18,\"3546\":1,\"4184\":18,\"4480\":1,\"5087\":1}}],[\"there\",{\"1\":{\"81\":2,\"3369\":2}}],[\"this\",{\"1\":{\"215\":1,\"458\":2,\"835\":1,\"2914\":1,\"2944\":1,\"2959\":9,\"3498\":1,\"3823\":1,\"4139\":1,\"4169\":1,\"4184\":9}}],[\"tonanos\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"token信息返回给用户\",{\"1\":{\"3141\":1,\"5392\":1}}],[\"token\",{\"1\":{\"2601\":1,\"3130\":1,\"3135\":1,\"4934\":1,\"5381\":1,\"5386\":1}}],[\"token=1729829670\",{\"1\":{\"831\":1,\"3819\":1}}],[\"tolerance\",{\"1\":{\"1822\":1,\"1827\":1,\"1832\":1,\"4382\":1,\"4387\":1,\"4392\":1}}],[\"topositive\",{\"1\":{\"940\":3,\"5087\":3}}],[\"topicentry\",{\"1\":{\"949\":3,\"5096\":3}}],[\"topiccountermap\",{\"1\":{\"940\":2,\"5087\":2}}],[\"topic\",{\"1\":{\"940\":7,\"949\":3,\"1776\":1,\"4336\":1,\"5087\":7,\"5096\":3}}],[\"topic可以配置自己的保留策略\",{\"1\":{\"927\":1,\"5074\":1}}],[\"top\",{\"1\":{\"352\":1}}],[\"to\",{\"1\":{\"215\":1,\"261\":1,\"274\":1,\"278\":1,\"455\":1,\"458\":2,\"492\":1,\"940\":1,\"2959\":5,\"3498\":1,\"3546\":1,\"3551\":1,\"3555\":1,\"4184\":5,\"5087\":1}}],[\"toc\",{\"1\":{\"131\":1,\"3419\":1}}],[\"hello123\",{\"1\":{\"3243\":1}}],[\"head\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"header不支持压缩\",{\"1\":{\"2188\":1,\"5241\":1}}],[\"header\",{\"1\":{\"2183\":1,\"2184\":1,\"2188\":1,\"2534\":1,\"3131\":1,\"3135\":1,\"4867\":1,\"5236\":1,\"5237\":1,\"5241\":1,\"5382\":1,\"5386\":1}}],[\"header压缩\",{\"1\":{\"1895\":1,\"1910\":1,\"1951\":1,\"1966\":1,\"5157\":1}}],[\"health\",{\"1\":{\"856\":1,\"3844\":1}}],[\"hw\",{\"1\":{\"3226\":1,\"3232\":1}}],[\"hr面\",{\"0\":{\"3026\":1,\"5277\":1}}],[\"hyperloglogs\",{\"1\":{\"2591\":1,\"4924\":1}}],[\"hystrix有四种防雪崩方式\",{\"1\":{\"1756\":1,\"4316\":1}}],[\"hystrix就是这样的一个工具\",{\"1\":{\"1755\":1,\"4315\":1}}],[\"hystrix\",{\"1\":{\"1743\":1,\"1754\":1,\"4303\":1,\"4314\":1}}],[\"h>\",{\"1\":{\"1093\":1,\"1261\":1,\"1429\":1,\"1597\":1,\"4475\":1}}],[\"h2\",{\"1\":{\"845\":1,\"3833\":1}}],[\"h2o\",{\"1\":{\"58\":1,\"3346\":1}}],[\"hibernatetemplate\",{\"1\":{\"749\":1,\"3737\":1}}],[\"hidden\",{\"1\":{\"455\":1}}],[\"h为log2\",{\"1\":{\"437\":1}}],[\"h为树的高度\",{\"1\":{\"437\":1}}],[\"h\",{\"1\":{\"437\":1,\"704\":2,\"3692\":2}}],[\"http1\",{\"1\":{\"5165\":1}}],[\"http历史\",{\"0\":{\"5161\":1}}],[\"http3协议\",{\"1\":{\"5160\":1}}],[\"http3常见面试题\",{\"0\":{\"1925\":1}}],[\"http2常见面试题\",{\"0\":{\"1912\":1}}],[\"http2协议\",{\"1\":{\"1896\":1,\"1911\":1,\"1952\":1,\"1967\":1,\"5158\":1}}],[\"http协议中为什么广泛使用的还是http1\",{\"0\":{\"1897\":1,\"5143\":1}}],[\"http常见面试题\",{\"0\":{\"1882\":1}}],[\"httptrace\",{\"1\":{\"856\":1,\"3844\":1}}],[\"httpmessageconveter\",{\"1\":{\"737\":1,\"3725\":1}}],[\"http\",{\"0\":{\"1886\":1,\"1892\":1,\"1901\":1,\"1907\":1,\"1916\":1,\"1922\":1,\"1929\":1,\"1935\":1,\"1942\":1,\"1948\":1,\"1957\":1,\"1963\":1,\"2176\":1,\"2177\":1,\"2180\":2,\"2185\":2,\"2190\":2,\"2195\":1,\"5148\":1,\"5154\":1,\"5168\":1,\"5171\":1,\"5177\":1,\"5229\":1,\"5230\":1,\"5233\":2,\"5238\":2,\"5243\":2,\"5248\":1},\"1\":{\"621\":1,\"1884\":1,\"1890\":1,\"1894\":2,\"1899\":1,\"1905\":1,\"1909\":2,\"1914\":1,\"1920\":1,\"1924\":2,\"1927\":1,\"1933\":1,\"1937\":2,\"1940\":1,\"1946\":1,\"1950\":2,\"1955\":1,\"1961\":1,\"1965\":2,\"2077\":1,\"2134\":1,\"2135\":1,\"2178\":2,\"2179\":1,\"2181\":2,\"2182\":1,\"2183\":2,\"2184\":2,\"2186\":4,\"2187\":2,\"2188\":2,\"2189\":2,\"2191\":5,\"2192\":2,\"2193\":3,\"2196\":1,\"2197\":2,\"2198\":4,\"2227\":1,\"2228\":1,\"3135\":1,\"5145\":1,\"5152\":1,\"5156\":2,\"5162\":7,\"5166\":1,\"5167\":3,\"5170\":1,\"5175\":1,\"5179\":2,\"5187\":1,\"5188\":1,\"5231\":2,\"5232\":1,\"5234\":2,\"5235\":1,\"5236\":2,\"5237\":2,\"5239\":4,\"5240\":2,\"5241\":2,\"5242\":2,\"5244\":5,\"5245\":2,\"5246\":3,\"5249\":1,\"5250\":2,\"5251\":4,\"5386\":1}}],[\"https常见面试题\",{\"0\":{\"1938\":1}}],[\"https\",{\"0\":{\"2194\":1,\"2195\":1,\"5247\":1,\"5248\":1},\"1\":{\"81\":2,\"326\":1,\"352\":1,\"519\":1,\"548\":1,\"636\":1,\"825\":1,\"831\":1,\"886\":1,\"919\":1,\"972\":1,\"981\":1,\"995\":1,\"1074\":1,\"1183\":1,\"1242\":1,\"1351\":1,\"1410\":1,\"1519\":1,\"1578\":1,\"1687\":1,\"1870\":1,\"2077\":1,\"2196\":1,\"2197\":2,\"2198\":3,\"2199\":3,\"2554\":1,\"2733\":1,\"2749\":2,\"2772\":1,\"2820\":1,\"2877\":1,\"2911\":1,\"2933\":1,\"3022\":2,\"3288\":3,\"3369\":2,\"3520\":1,\"3603\":1,\"3608\":1,\"3813\":1,\"3819\":1,\"3874\":1,\"3907\":1,\"3947\":1,\"3974\":2,\"3997\":1,\"4045\":1,\"4102\":1,\"4136\":1,\"4158\":1,\"4247\":2,\"4456\":1,\"4565\":1,\"4887\":1,\"5066\":1,\"5119\":1,\"5128\":1,\"5142\":1,\"5249\":1,\"5250\":2,\"5251\":3,\"5252\":3}}],[\"html网页\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"html\",{\"1\":{\"352\":1,\"825\":1,\"1074\":1,\"1183\":1,\"1242\":1,\"1351\":1,\"1410\":1,\"1519\":1,\"1578\":1,\"1687\":1,\"2749\":1,\"2933\":1,\"3022\":1,\"3813\":1,\"3974\":1,\"4158\":1,\"4247\":1,\"4456\":1,\"4565\":1}}],[\"happens\",{\"1\":{\"2860\":1,\"4085\":1}}],[\"hagersten\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"has\",{\"1\":{\"580\":1,\"584\":1,\"586\":1}}],[\"hash2值\",{\"1\":{\"3268\":1,\"3269\":1}}],[\"hash值\",{\"1\":{\"3266\":1}}],[\"hash1值\",{\"1\":{\"3262\":1,\"3263\":1,\"3269\":1}}],[\"hashcode+sqlid+sql\",{\"1\":{\"898\":1,\"3886\":1}}],[\"hashtable也是使用fast\",{\"1\":{\"547\":1}}],[\"hashtable的\",{\"1\":{\"542\":1}}],[\"hashtable还使用了enumeration的方式\",{\"1\":{\"542\":1,\"545\":1}}],[\"hashtable\",{\"1\":{\"542\":1,\"545\":1,\"3520\":1}}],[\"hashtable直接使用对象的hashcode\",{\"1\":{\"541\":1}}],[\"hashtable中的hash数组初始大小是11\",{\"1\":{\"540\":1}}],[\"hashtable是没有fast\",{\"1\":{\"547\":1}}],[\"hashtable是基于陈旧的dictionary类继承来的\",{\"1\":{\"539\":1}}],[\"hashtable是线程安全的\",{\"1\":{\"536\":1,\"543\":1}}],[\"hashtable不可以存储null键和null值\",{\"1\":{\"538\":1}}],[\"hash\",{\"0\":{\"521\":1,\"2619\":1,\"3610\":1,\"4952\":1},\"1\":{\"528\":1,\"940\":1,\"2263\":1,\"2266\":2,\"2590\":1,\"2621\":1,\"2622\":3,\"2623\":1,\"2626\":1,\"3617\":1,\"4596\":1,\"4599\":2,\"4923\":1,\"4954\":1,\"4955\":3,\"4956\":1,\"4959\":1,\"5087\":1}}],[\"hashset中的数据是无序的\",{\"1\":{\"379\":1}}],[\"hashset和treeset\",{\"1\":{\"377\":1}}],[\"hashset可以方便高效地实现去重\",{\"1\":{\"364\":1}}],[\"hashset实现了set接口\",{\"1\":{\"362\":1}}],[\"hashset\",{\"0\":{\"361\":1},\"1\":{\"379\":1}}],[\"hashmap没有锁机制\",{\"1\":{\"551\":1}}],[\"hashmap与hashtable的区别是面试中经常遇到的一个问题\",{\"1\":{\"548\":1}}],[\"hashmap把这部分操作解放出来了\",{\"1\":{\"544\":1}}],[\"hashmap都使用了\",{\"1\":{\"542\":1,\"545\":1}}],[\"hashmap重新计算hash值\",{\"1\":{\"541\":1}}],[\"hashmap继承的抽象类abstractmap实现了map接口\",{\"1\":{\"539\":1}}],[\"hashmap可以存储null键和null值\",{\"1\":{\"537\":1}}],[\"hashmap是线程不安全的\",{\"1\":{\"535\":1}}],[\"hashmap和hashtable的区别\",{\"0\":{\"532\":1}}],[\"hashmap还是treemap呢\",{\"1\":{\"438\":1}}],[\"hashmap的iterator是fail\",{\"1\":{\"546\":1}}],[\"hashmap的扩容条件就是当hashmap中的元素个数\",{\"1\":{\"419\":1}}],[\"hashmap的重载的构造函数中\",{\"1\":{\"410\":1}}],[\"hashmap有扩容机制\",{\"1\":{\"417\":1}}],[\"hashmap<string\",{\"1\":{\"406\":1,\"411\":3}}],[\"hashmap<>\",{\"1\":{\"286\":1,\"291\":1,\"305\":1,\"424\":1,\"949\":1,\"3563\":1,\"3568\":1,\"3582\":1,\"5096\":1}}],[\"hashmap就像一个\",{\"1\":{\"405\":1}}],[\"hashmap会将容量扩容\",{\"1\":{\"400\":1}}],[\"hashmap类中有以下主要成员变量\",{\"1\":{\"394\":1}}],[\"hashmap中hash数组的默认大小是16\",{\"1\":{\"540\":1}}],[\"hashmap中size表示当前共有多少个kv对\",{\"1\":{\"431\":1}}],[\"hashmap中还提供了一个支持传入initialcapacity\",{\"1\":{\"429\":1}}],[\"hashmap中还有一个和他们紧密相关的概念\",{\"1\":{\"401\":1}}],[\"hashmap中的size和capacity之间的区别其实解释起来也挺简单的\",{\"1\":{\"405\":1}}],[\"hashmap中的键值对没有顺序\",{\"1\":{\"387\":1}}],[\"hashmap中都定义了哪些成员变量\",{\"1\":{\"391\":1}}],[\"hashmap不是线程安全的\",{\"1\":{\"388\":1,\"544\":1}}],[\"hashmap实现了map接口\",{\"1\":{\"385\":1}}],[\"hashmap已经显式定义了构造方法\",{\"1\":{\"312\":1,\"3589\":1}}],[\"hashmapinstance\",{\"1\":{\"311\":1,\"3588\":1}}],[\"hashmapclass\",{\"1\":{\"305\":1,\"311\":2,\"314\":2,\"3582\":1,\"3588\":2,\"3591\":2}}],[\"hashmap=\",{\"1\":{\"303\":1,\"307\":1,\"3580\":1,\"3584\":1}}],[\"hashmap\",{\"0\":{\"384\":1,\"549\":1},\"1\":{\"291\":1,\"298\":1,\"303\":1,\"305\":2,\"307\":1,\"311\":3,\"314\":3,\"542\":1,\"898\":1,\"2942\":1,\"3520\":1,\"3568\":1,\"3575\":1,\"3580\":1,\"3582\":2,\"3584\":1,\"3588\":3,\"3591\":3,\"3886\":1,\"4167\":1}}],[\"handlerexecutionchain\",{\"1\":{\"734\":1,\"3722\":1}}],[\"handleradapter\",{\"1\":{\"730\":1,\"735\":1,\"3718\":1,\"3723\":1}}],[\"handlermapping\",{\"1\":{\"730\":1,\"734\":1,\"3718\":1,\"3722\":1}}],[\"handler\",{\"1\":{\"276\":1,\"730\":2,\"734\":3,\"735\":1,\"736\":2,\"741\":1,\"1137\":1,\"1140\":1,\"1143\":1,\"1144\":1,\"1145\":1,\"1146\":1,\"1150\":1,\"1158\":1,\"1159\":1,\"1160\":1,\"1162\":2,\"1163\":2,\"1165\":1,\"1177\":1,\"1178\":1,\"1179\":1,\"1305\":1,\"1308\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1314\":1,\"1318\":1,\"1326\":1,\"1327\":1,\"1328\":1,\"1330\":2,\"1331\":2,\"1333\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1473\":1,\"1476\":1,\"1479\":1,\"1480\":1,\"1481\":1,\"1482\":1,\"1486\":1,\"1494\":1,\"1495\":1,\"1496\":1,\"1498\":2,\"1499\":2,\"1501\":1,\"1513\":1,\"1514\":1,\"1515\":1,\"1641\":1,\"1644\":1,\"1647\":1,\"1648\":1,\"1649\":1,\"1650\":1,\"1654\":1,\"1662\":1,\"1663\":1,\"1664\":1,\"1666\":2,\"1667\":2,\"1669\":1,\"1681\":1,\"1682\":1,\"1683\":1,\"2959\":7,\"2968\":1,\"3553\":1,\"3718\":2,\"3722\":3,\"3723\":1,\"3724\":2,\"3729\":1,\"4184\":7,\"4193\":1,\"4519\":1,\"4522\":1,\"4525\":1,\"4526\":1,\"4527\":1,\"4528\":1,\"4532\":1,\"4540\":1,\"4541\":1,\"4542\":1,\"4544\":2,\"4545\":2,\"4547\":1,\"4559\":1,\"4560\":1,\"4561\":1}}],[\"hotspot\",{\"1\":{\"2920\":1,\"4145\":1}}],[\"hot100的时候\",{\"1\":{\"558\":1}}],[\"holds\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"hold\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"holding\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"hol\",{\"1\":{\"2193\":1,\"5246\":1}}],[\"hollis9\",{\"1\":{\"424\":1}}],[\"hollis8\",{\"1\":{\"424\":1}}],[\"hollis7\",{\"1\":{\"424\":1}}],[\"hollis6\",{\"1\":{\"424\":1}}],[\"hollis5\",{\"1\":{\"424\":1}}],[\"hollis4\",{\"1\":{\"424\":1}}],[\"hollis3\",{\"1\":{\"424\":1}}],[\"hollis2\",{\"1\":{\"424\":1}}],[\"hollis13\",{\"1\":{\"424\":1}}],[\"hollis12\",{\"1\":{\"424\":1}}],[\"hollis11\",{\"1\":{\"424\":1}}],[\"hollis10\",{\"1\":{\"424\":1}}],[\"hollis1\",{\"1\":{\"424\":1}}],[\"hollis\",{\"1\":{\"406\":1}}],[\"hollischuang\",{\"1\":{\"263\":1,\"406\":1,\"424\":13}}],[\"host\",{\"1\":{\"2184\":4,\"5237\":4}}],[\"home\",{\"1\":{\"149\":1,\"153\":1,\"206\":1,\"207\":1,\"3437\":1,\"3489\":1,\"3490\":1}}],[\"hope\",{\"1\":{\"81\":2,\"103\":1,\"116\":1,\"3369\":2,\"3391\":1,\"3404\":1}}],[\"卡片\",{\"0\":{\"80\":1,\"3368\":1}}],[\"脚注\",{\"0\":{\"67\":1,\"3355\":1}}],[\"的传输层协议\",{\"1\":{\"5162\":1}}],[\"的名为\",{\"1\":{\"5162\":1}}],[\"的前身\",{\"1\":{\"5162\":1}}],[\"的前后条件中有一个列没有索引\",{\"1\":{\"2359\":1,\"4692\":1}}],[\"的很多设计\",{\"1\":{\"5162\":1}}],[\"的很重要一点就是\",{\"1\":{\"2636\":1,\"4969\":1}}],[\"的制定过程\",{\"1\":{\"5162\":1}}],[\"的开发组全程参与了\",{\"1\":{\"5162\":1}}],[\"的开发组推动\",{\"1\":{\"5162\":1}}],[\"的通用工具\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"的常见做法是将其放在\",{\"1\":{\"3135\":1,\"5386\":1}}],[\"的所在的位置\",{\"1\":{\"3115\":1,\"5366\":1}}],[\"的所有\",{\"1\":{\"2597\":1,\"4930\":1}}],[\"的比较\",{\"1\":{\"3049\":1,\"5300\":1}}],[\"的区别\",{\"1\":{\"3047\":1,\"5298\":1}}],[\"的空闲时间\",{\"1\":{\"2992\":1,\"4217\":1}}],[\"的内部元素并不是按照放入的时间排序\",{\"1\":{\"2983\":1,\"4208\":1}}],[\"的内存操作\",{\"1\":{\"628\":1}}],[\"的最大线程数是\",{\"1\":{\"2982\":1,\"4207\":1}}],[\"的最大连接数是多少\",{\"1\":{\"2044\":1}}],[\"的构造函数创建线程池的时候\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"的键值对\",{\"1\":{\"2946\":1,\"4171\":1}}],[\"的获取\",{\"1\":{\"2932\":1,\"4157\":1}}],[\"的锁\",{\"1\":{\"2928\":1,\"4153\":1}}],[\"的持有权\",{\"1\":{\"2919\":1,\"4144\":1}}],[\"的实际值修改为\",{\"1\":{\"2790\":1,\"4015\":1}}],[\"的实现依赖于\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"的实现\",{\"1\":{\"620\":1}}],[\"的实现细节\",{\"1\":{\"605\":1}}],[\"的值\",{\"1\":{\"2790\":1,\"4015\":1}}],[\"的当前值\",{\"1\":{\"2788\":1,\"4013\":1}}],[\"的变量值增加1\",{\"1\":{\"2782\":1,\"4007\":1}}],[\"的变化而变化的\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"的状态\",{\"1\":{\"2758\":1,\"3983\":1}}],[\"的过期时间设置短一点比如\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"的情况\",{\"1\":{\"2674\":1,\"5007\":1}}],[\"的配置来决定何时将系统内核缓存区的数据同步到硬盘中的\",{\"1\":{\"2651\":1,\"4984\":1}}],[\"的混合持久化\",{\"1\":{\"2639\":1,\"4972\":1}}],[\"的结构相似\",{\"1\":{\"2626\":1,\"4959\":1}}],[\"的结构与对象的\",{\"1\":{\"2626\":1,\"4959\":1}}],[\"的缓存\",{\"1\":{\"2601\":1,\"4934\":1}}],[\"的原子指令\",{\"1\":{\"2795\":1,\"4020\":1}}],[\"的原生字符串\",{\"1\":{\"2596\":1,\"4929\":1}}],[\"的原则又不希望将此类类型的\",{\"1\":{\"809\":1,\"3797\":1}}],[\"的事务\",{\"1\":{\"2543\":1,\"4876\":1}}],[\"的事务id\",{\"1\":{\"2538\":1,\"4871\":1}}],[\"的事务均可见\",{\"1\":{\"2538\":1,\"4871\":1}}],[\"的事务均不可见\",{\"1\":{\"2538\":1,\"4871\":1}}],[\"的事务并没有提交\",{\"1\":{\"2412\":1,\"4745\":1}}],[\"的账户增加\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"的账户扣除\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"的引擎都是用\",{\"1\":{\"2481\":1,\"4814\":1}}],[\"的引擎来实现的\",{\"1\":{\"2480\":1,\"4813\":1}}],[\"的组合\",{\"1\":{\"2458\":1,\"2468\":1,\"4791\":1,\"4801\":1}}],[\"的日志格式是\",{\"1\":{\"2445\":1,\"4778\":1}}],[\"的系统变量\",{\"1\":{\"2439\":1,\"4772\":1}}],[\"的系统调用次数\",{\"1\":{\"1071\":1,\"1239\":1,\"1407\":1,\"1575\":1,\"4453\":1}}],[\"的期间\",{\"1\":{\"2405\":1,\"2406\":1,\"4738\":1,\"4739\":1}}],[\"的存储引擎\",{\"1\":{\"2380\":1,\"4713\":1}}],[\"的支持\",{\"1\":{\"2378\":1,\"4711\":1}}],[\"的每个非叶子节点存储索引\",{\"1\":{\"2309\":1,\"4642\":1}}],[\"的自增主键\",{\"1\":{\"2296\":1,\"4629\":1}}],[\"的表中\",{\"1\":{\"2296\":1,\"4629\":1}}],[\"的意思\",{\"1\":{\"2268\":1,\"4601\":1}}],[\"的意义\",{\"0\":{\"2122\":1},\"1\":{\"2007\":1}}],[\"的默认存储引擎\",{\"1\":{\"2237\":1,\"2239\":1,\"4570\":1,\"4572\":1}}],[\"的权威\",{\"1\":{\"2218\":1,\"5271\":1}}],[\"的权力\",{\"1\":{\"726\":1,\"3714\":1}}],[\"的升级版本\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"的响应分组\",{\"1\":{\"2162\":1,\"5215\":1}}],[\"的工作原理将分两种场景讨论\",{\"1\":{\"2149\":1,\"5202\":1}}],[\"的首部长度\",{\"1\":{\"2084\":1}}],[\"的发送速率\",{\"1\":{\"2064\":1}}],[\"的服务端监听了一个端口\",{\"1\":{\"2044\":1}}],[\"的字段\",{\"1\":{\"2336\":2,\"4669\":2}}],[\"的字段进行序列号初始值的设定\",{\"1\":{\"2020\":1}}],[\"的字段变为有效\",{\"1\":{\"2018\":1}}],[\"的大小\",{\"1\":{\"2015\":1}}],[\"的大了\",{\"1\":{\"1816\":1,\"4376\":1}}],[\"的面试题\",{\"1\":{\"1969\":1}}],[\"的网站支持了http\",{\"1\":{\"1890\":1,\"1905\":1,\"1920\":1,\"1933\":1,\"1946\":1,\"1961\":1,\"5152\":1,\"5175\":1}}],[\"的网络通信的基本操作单元\",{\"1\":{\"1047\":1,\"1215\":1,\"1383\":1,\"1551\":1,\"4429\":1}}],[\"的关键在于当前的业务场景\",{\"1\":{\"1836\":1,\"4396\":1}}],[\"的关系\",{\"1\":{\"577\":2,\"580\":2,\"584\":2,\"586\":1}}],[\"的选择\",{\"1\":{\"1832\":1,\"4392\":1}}],[\"的选举\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"的身份进入集群中\",{\"1\":{\"1818\":1,\"4378\":1}}],[\"的身份加入集群\",{\"1\":{\"1803\":1,\"4363\":1}}],[\"的话\",{\"1\":{\"1813\":1,\"2622\":1,\"3208\":1,\"4373\":1,\"4955\":1,\"5459\":1}}],[\"的重新选举\",{\"1\":{\"1811\":1,\"4371\":1}}],[\"的例子\",{\"1\":{\"1804\":1,\"4364\":1}}],[\"的投票结果后发现比自己的合适于是更改投票为\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"的投票发现没自己的合适故不变\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"的投票信息后会将投票信息与自己的作比较\",{\"1\":{\"1802\":1,\"4362\":1}}],[\"的投票仅为1\",{\"1\":{\"1801\":1,\"4361\":1}}],[\"的崩溃\",{\"1\":{\"1799\":1,\"4359\":1}}],[\"的更新\",{\"1\":{\"1794\":1,\"4354\":1}}],[\"的更上层使用者\",{\"1\":{\"605\":1}}],[\"的架构\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"的负载均衡等功能\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"的注册以及多个\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"的应用程序中尤其地高性能\",{\"1\":{\"1774\":1,\"4334\":1}}],[\"的形式存储\",{\"1\":{\"1701\":1,\"4261\":1}}],[\"的形式的存在\",{\"1\":{\"1700\":1,\"4260\":1}}],[\"的运行过程中\",{\"1\":{\"1701\":1,\"4261\":1}}],[\"的请求后\",{\"1\":{\"2215\":1,\"5268\":1}}],[\"的请求\",{\"1\":{\"1699\":1,\"1818\":1,\"4259\":1,\"4378\":1}}],[\"的功能使其可以接受\",{\"1\":{\"1699\":1,\"4259\":1}}],[\"的模式还有个问题\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"4552\":1}}],[\"的能力\",{\"1\":{\"1164\":1,\"1332\":1,\"1500\":1,\"1668\":1,\"4546\":1}}],[\"的性能还行\",{\"1\":{\"2238\":1,\"4571\":1}}],[\"的性能\",{\"1\":{\"1149\":1,\"1317\":1,\"1485\":1,\"1653\":1,\"4531\":1}}],[\"的流程来完成完整的业务流程\",{\"1\":{\"1146\":1,\"1179\":1,\"1314\":1,\"1347\":1,\"1482\":1,\"1515\":1,\"1650\":1,\"1683\":1,\"4528\":1,\"4561\":1}}],[\"的流程中\",{\"1\":{\"801\":1,\"3789\":1}}],[\"的方案示意图\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4517\":1}}],[\"的方案\",{\"1\":{\"1133\":1,\"1134\":1,\"1152\":1,\"1301\":1,\"1302\":1,\"1320\":1,\"1469\":1,\"1470\":1,\"1488\":1,\"1637\":1,\"1638\":1,\"1656\":1,\"4515\":1,\"4516\":1,\"4534\":1}}],[\"的方式即使监听的\",{\"1\":{\"1060\":1,\"1228\":1,\"1396\":1,\"1564\":1,\"4442\":1}}],[\"的吞吐率\",{\"1\":{\"1108\":1,\"1276\":1,\"1444\":1,\"1612\":1,\"4490\":1}}],[\"的次数\",{\"1\":{\"1079\":1,\"1247\":1,\"1415\":1,\"1583\":1,\"4461\":1}}],[\"的数据就写一个到\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"的数据\",{\"1\":{\"2677\":1,\"5010\":1}}],[\"的数据版本均可见\",{\"1\":{\"2541\":1,\"4874\":1}}],[\"的数据版本均不可见\",{\"1\":{\"2540\":1,\"4873\":1}}],[\"的数据库在异常崩溃后\",{\"1\":{\"2253\":1,\"4586\":1}}],[\"的数据大小如果大于\",{\"1\":{\"2072\":1,\"2073\":1}}],[\"的数据结构\",{\"1\":{\"1056\":1,\"1224\":1,\"1392\":1,\"1560\":1,\"2983\":1,\"4208\":1,\"4438\":1}}],[\"的数量可以只有一个\",{\"1\":{\"1116\":1,\"1284\":1,\"1452\":1,\"1620\":1,\"4498\":1}}],[\"的数目也非常的多了\",{\"1\":{\"1060\":1,\"1228\":1,\"1396\":1,\"1564\":1,\"4442\":1}}],[\"的问题\",{\"0\":{\"2798\":1,\"4023\":1},\"1\":{\"1055\":1,\"1172\":1,\"1223\":1,\"1340\":1,\"1391\":1,\"1508\":1,\"1559\":1,\"1676\":1,\"3003\":1,\"4228\":1,\"4437\":1,\"4554\":1}}],[\"的一个内部类\",{\"1\":{\"2909\":1,\"4134\":1}}],[\"的一级缓存与二级缓存\",{\"1\":{\"907\":1,\"3895\":1}}],[\"的一套指令集规范\",{\"1\":{\"180\":1,\"3463\":1}}],[\"的同一个\",{\"1\":{\"900\":1,\"3888\":1}}],[\"的动态代理\",{\"1\":{\"894\":1,\"3882\":1}}],[\"的特性\",{\"1\":{\"809\":1,\"3797\":1}}],[\"的属性\",{\"1\":{\"805\":1,\"3793\":1}}],[\"的成品创建依赖于\",{\"1\":{\"801\":1,\"3789\":1}}],[\"的隔离级别\",{\"1\":{\"772\":1,\"2520\":1,\"3760\":1,\"4853\":1}}],[\"的增强或通知\",{\"1\":{\"752\":1,\"3740\":1}}],[\"的入参过程中\",{\"1\":{\"736\":1,\"3724\":1}}],[\"的思想就是将原本在程序中手动创建对象的控制权\",{\"1\":{\"724\":1,\"3712\":1}}],[\"的时间段内不会占用\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"的时间过长\",{\"1\":{\"2890\":1,\"4115\":1}}],[\"的时间复杂度\",{\"1\":{\"658\":1,\"3646\":1}}],[\"的时机不同\",{\"1\":{\"2529\":1,\"4862\":1}}],[\"的时候都会分配一个特定的偏移量\",{\"1\":{\"3115\":1,\"5366\":1}}],[\"的时候不存在线程安全问题\",{\"1\":{\"3112\":1,\"5363\":1}}],[\"的时候同样更新\",{\"1\":{\"3112\":1,\"5363\":1}}],[\"的时候你如何排查问题\",{\"1\":{\"3087\":1,\"5338\":1}}],[\"的时候依赖一次\",{\"1\":{\"2756\":1,\"3981\":1}}],[\"的时候才对数据进行过期检查\",{\"1\":{\"2671\":1,\"5004\":1}}],[\"的时候\",{\"1\":{\"1837\":1,\"2965\":1,\"4190\":1,\"4397\":1}}],[\"的时候突然挂了\",{\"1\":{\"1813\":1,\"4373\":1}}],[\"的时候会把null值也拷贝\",{\"1\":{\"461\":1}}],[\"的文章\",{\"1\":{\"621\":1}}],[\"的文档\",{\"1\":{\"563\":1}}],[\"的历史遗留问题了\",{\"1\":{\"617\":1}}],[\"的定义是在同一端进\",{\"1\":{\"612\":1}}],[\"的相关方法\",{\"1\":{\"605\":1}}],[\"的底层具体实现不同\",{\"1\":{\"601\":1}}],[\"的程序\",{\"1\":{\"592\":1}}],[\"的信息\",{\"1\":{\"276\":1,\"3553\":1}}],[\"的核心\",{\"1\":{\"234\":1,\"3517\":1}}],[\"的主要组成部分\",{\"0\":{\"175\":1,\"3458\":1}}],[\"的\",{\"0\":{\"259\":1,\"3544\":1},\"1\":{\"65\":1,\"115\":1,\"226\":1,\"625\":1,\"626\":1,\"894\":1,\"895\":1,\"900\":1,\"957\":1,\"1816\":1,\"2021\":1,\"2023\":2,\"2030\":1,\"2048\":3,\"2155\":1,\"2156\":2,\"2158\":4,\"2160\":1,\"2168\":1,\"2170\":3,\"2173\":1,\"2174\":2,\"2175\":1,\"2197\":2,\"2213\":1,\"2214\":1,\"2216\":1,\"2285\":1,\"2296\":1,\"2317\":1,\"2471\":1,\"2538\":1,\"2599\":1,\"2795\":1,\"2981\":1,\"3135\":1,\"3353\":1,\"3403\":1,\"3509\":1,\"3882\":1,\"3883\":1,\"3888\":1,\"4020\":1,\"4206\":1,\"4376\":1,\"4618\":1,\"4629\":1,\"4650\":1,\"4804\":1,\"4871\":1,\"4932\":1,\"5104\":1,\"5162\":2,\"5208\":1,\"5209\":2,\"5211\":4,\"5213\":1,\"5221\":1,\"5223\":3,\"5226\":1,\"5227\":2,\"5228\":1,\"5250\":2,\"5266\":1,\"5267\":1,\"5269\":1,\"5386\":1}}],[\"illegalmonitorstateexception的异常的原因\",{\"1\":{\"2921\":1,\"4146\":1}}],[\"illegalargumentexception\",{\"1\":{\"704\":1,\"2959\":2,\"3692\":1,\"4184\":2}}],[\"ibd文件就包含了该表的索引和数据\",{\"1\":{\"2309\":1,\"4642\":1}}],[\"ipv4\",{\"1\":{\"2048\":1}}],[\"ip地址\",{\"1\":{\"2039\":1,\"2041\":1}}],[\"ip常见面试题\",{\"0\":{\"1953\":1}}],[\"ip\",{\"0\":{\"2100\":1,\"2140\":1,\"2143\":1,\"2232\":1,\"5193\":1,\"5196\":1},\"1\":{\"1047\":1,\"1215\":1,\"1383\":1,\"1551\":1,\"1985\":1,\"2023\":1,\"2034\":1,\"2044\":1,\"2046\":1,\"2048\":1,\"2073\":2,\"2086\":1,\"2091\":1,\"2146\":3,\"2148\":1,\"2153\":3,\"2154\":2,\"2155\":1,\"2156\":1,\"2158\":5,\"2159\":2,\"2160\":2,\"2161\":1,\"2162\":1,\"2165\":2,\"2166\":1,\"2168\":1,\"2170\":5,\"2171\":2,\"2175\":1,\"2184\":1,\"2213\":2,\"2214\":2,\"2216\":1,\"2219\":1,\"2220\":1,\"4429\":1,\"5199\":3,\"5201\":1,\"5206\":3,\"5207\":2,\"5208\":1,\"5209\":1,\"5211\":5,\"5212\":2,\"5213\":2,\"5214\":1,\"5215\":1,\"5218\":2,\"5219\":1,\"5221\":1,\"5223\":5,\"5224\":2,\"5228\":1,\"5237\":1,\"5266\":2,\"5267\":2,\"5269\":1,\"5272\":1,\"5273\":1}}],[\"import\",{\"1\":{\"2957\":4,\"4182\":4}}],[\"implements\",{\"1\":{\"2745\":1,\"2941\":1,\"3970\":1,\"4166\":1}}],[\"image\",{\"1\":{\"731\":1,\"1015\":1,\"3719\":1}}],[\"img\",{\"1\":{\"653\":1,\"788\":1,\"798\":1,\"803\":1,\"808\":1,\"818\":1,\"820\":1,\"822\":1,\"824\":1,\"881\":1,\"987\":1,\"989\":1,\"992\":1,\"994\":1,\"1059\":1,\"1084\":1,\"1097\":1,\"1103\":1,\"1136\":1,\"1156\":1,\"1174\":1,\"1227\":1,\"1252\":1,\"1265\":1,\"1271\":1,\"1304\":1,\"1324\":1,\"1342\":1,\"1395\":1,\"1420\":1,\"1433\":1,\"1439\":1,\"1472\":1,\"1492\":1,\"1510\":1,\"1563\":1,\"1588\":1,\"1601\":1,\"1607\":1,\"1640\":1,\"1660\":1,\"1678\":1,\"1697\":1,\"1745\":1,\"1823\":1,\"2129\":1,\"2141\":1,\"2297\":1,\"2306\":1,\"2363\":1,\"2454\":1,\"2751\":1,\"2834\":1,\"2836\":1,\"3641\":1,\"3776\":1,\"3786\":1,\"3791\":1,\"3796\":1,\"3806\":1,\"3808\":1,\"3810\":1,\"3812\":1,\"3869\":1,\"3976\":1,\"4059\":1,\"4061\":1,\"4257\":1,\"4305\":1,\"4383\":1,\"4441\":1,\"4466\":1,\"4479\":1,\"4485\":1,\"4518\":1,\"4538\":1,\"4556\":1,\"4630\":1,\"4639\":1,\"4696\":1,\"4787\":1,\"5134\":1,\"5136\":1,\"5139\":1,\"5141\":1,\"5182\":1,\"5194\":1}}],[\"i\",{\"0\":{\"1049\":1,\"1217\":1,\"1385\":1,\"1553\":1,\"4431\":1},\"1\":{\"455\":1,\"630\":5,\"949\":6,\"1011\":3,\"1050\":1,\"1070\":3,\"1108\":1,\"1218\":1,\"1238\":3,\"1276\":1,\"1386\":1,\"1406\":3,\"1444\":1,\"1554\":1,\"1574\":3,\"1612\":1,\"2663\":1,\"2679\":1,\"2680\":1,\"2681\":1,\"2683\":1,\"2686\":1,\"2812\":1,\"2993\":4,\"4037\":1,\"4218\":4,\"4432\":1,\"4452\":3,\"4490\":1,\"4996\":1,\"5012\":1,\"5013\":1,\"5014\":1,\"5016\":1,\"5019\":1,\"5096\":6}}],[\"i++操作不是原子操作\",{\"1\":{\"2773\":1,\"3998\":1}}],[\"i++\",{\"1\":{\"455\":1,\"630\":2,\"949\":1,\"1011\":1,\"2813\":1,\"4038\":1,\"5096\":1}}],[\"i<size\",{\"1\":{\"455\":1}}],[\"i=0\",{\"1\":{\"455\":1}}],[\"ioc容器中\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"ioc\",{\"1\":{\"724\":3,\"727\":1,\"3712\":3,\"3715\":1}}],[\"io\",{\"1\":{\"455\":2,\"458\":3,\"1143\":1,\"1158\":1,\"1311\":1,\"1326\":1,\"1479\":1,\"1494\":1,\"1647\":1,\"1662\":1,\"2186\":1,\"2266\":1,\"2311\":1,\"2576\":1,\"2581\":1,\"2587\":1,\"2745\":1,\"3970\":1,\"4525\":1,\"4540\":1,\"4599\":1,\"4644\":1,\"4909\":1,\"4914\":1,\"4920\":1,\"5239\":1}}],[\"ioexception\",{\"1\":{\"255\":1,\"261\":1,\"263\":3,\"455\":1,\"458\":1,\"3540\":1,\"3546\":1}}],[\"if\",{\"1\":{\"227\":4,\"258\":1,\"263\":4,\"291\":2,\"455\":1,\"480\":2,\"484\":2,\"492\":1,\"494\":2,\"673\":2,\"940\":4,\"949\":1,\"2183\":4,\"2944\":1,\"2959\":5,\"3195\":1,\"3510\":4,\"3543\":1,\"3568\":2,\"3661\":2,\"4169\":1,\"4184\":5,\"5087\":4,\"5096\":1,\"5236\":4,\"5446\":1}}],[\"inheritablethreadlocals\",{\"1\":{\"2941\":1,\"2942\":1,\"4166\":1,\"4167\":1}}],[\"inheritance\",{\"1\":{\"589\":1}}],[\"innodb\",{\"0\":{\"2236\":1,\"2574\":1,\"4569\":1,\"4907\":1},\"1\":{\"2239\":1,\"2242\":1,\"2243\":1,\"2246\":2,\"2248\":1,\"2252\":1,\"2253\":1,\"2255\":1,\"2258\":1,\"2259\":1,\"2274\":1,\"2276\":2,\"2279\":1,\"2284\":1,\"2296\":3,\"2305\":1,\"2308\":1,\"2309\":2,\"2325\":1,\"2381\":1,\"2398\":2,\"2419\":1,\"2420\":1,\"2437\":1,\"2439\":2,\"2440\":1,\"2441\":1,\"2442\":1,\"2445\":1,\"2447\":1,\"2449\":1,\"2480\":1,\"2481\":1,\"2487\":1,\"2511\":1,\"2523\":1,\"2531\":1,\"2533\":1,\"2536\":1,\"2549\":1,\"3049\":1,\"4572\":1,\"4575\":1,\"4576\":1,\"4579\":2,\"4581\":1,\"4585\":1,\"4586\":1,\"4588\":1,\"4591\":1,\"4592\":1,\"4607\":1,\"4609\":2,\"4612\":1,\"4617\":1,\"4629\":3,\"4638\":1,\"4641\":1,\"4642\":2,\"4658\":1,\"4714\":1,\"4731\":2,\"4752\":1,\"4753\":1,\"4770\":1,\"4772\":2,\"4773\":1,\"4774\":1,\"4775\":1,\"4778\":1,\"4780\":1,\"4782\":1,\"4813\":1,\"4814\":1,\"4820\":1,\"4844\":1,\"4856\":1,\"4864\":1,\"4866\":1,\"4869\":1,\"4882\":1,\"5300\":1}}],[\"innodb特性\",{\"0\":{\"2235\":1,\"4568\":1}}],[\"inc\",{\"0\":{\"2430\":1,\"4763\":1},\"1\":{\"2388\":1,\"2432\":1,\"2433\":1,\"2434\":2,\"2435\":1,\"2436\":1,\"2439\":1,\"2440\":1,\"4721\":1,\"4765\":1,\"4766\":1,\"4767\":2,\"4768\":1,\"4769\":1,\"4772\":1,\"4773\":1}}],[\"include\",{\"1\":{\"1093\":1,\"1261\":1,\"1429\":1,\"1597\":1,\"4475\":1}}],[\"increments\",{\"1\":{\"484\":1}}],[\"increment\",{\"1\":{\"227\":1,\"2431\":1,\"2434\":1,\"2435\":1,\"2438\":1,\"3510\":1,\"4764\":1,\"4767\":1,\"4768\":1,\"4771\":1}}],[\"info\",{\"1\":{\"856\":1,\"3844\":1}}],[\"info信息等\",{\"1\":{\"855\":1,\"3843\":1}}],[\"inf\",{\"1\":{\"816\":1,\"821\":2,\"823\":2,\"3804\":1,\"3809\":2,\"3811\":2}}],[\"invocationhandler\",{\"1\":{\"702\":1,\"704\":2,\"706\":1,\"894\":1,\"3690\":1,\"3692\":2,\"3694\":1,\"3882\":1}}],[\"invoke\",{\"1\":{\"406\":1,\"411\":3,\"424\":2,\"705\":1,\"706\":2,\"707\":2,\"894\":1,\"3693\":1,\"3694\":2,\"3695\":2,\"3882\":1}}],[\"invokevirtual\",{\"1\":{\"274\":1,\"3551\":1}}],[\"invokestatic\",{\"1\":{\"274\":1,\"3551\":1}}],[\"insert\",{\"1\":{\"898\":1,\"912\":1,\"2368\":1,\"2443\":1,\"2444\":1,\"2549\":1,\"2550\":3,\"3886\":1,\"3900\":1,\"4701\":1,\"4776\":1,\"4777\":1,\"4882\":1,\"4883\":3}}],[\"insertelementat\",{\"1\":{\"480\":2}}],[\"instance\",{\"1\":{\"455\":2,\"458\":1,\"673\":5,\"3661\":5}}],[\"index=8\",{\"1\":{\"981\":1,\"5128\":1}}],[\"index=7\",{\"1\":{\"972\":1,\"5119\":1}}],[\"index+1\",{\"1\":{\"492\":1,\"494\":1}}],[\"index\",{\"1\":{\"480\":9,\"482\":2,\"484\":10,\"490\":2,\"492\":5,\"494\":6,\"510\":1,\"2265\":2,\"2299\":1,\"2303\":1,\"2308\":1,\"2317\":1,\"2325\":1,\"2333\":1,\"4598\":2,\"4632\":1,\"4636\":1,\"4641\":1,\"4650\":1,\"4658\":1,\"4666\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"242\":1,\"484\":1,\"3527\":1}}],[\"in\",{\"1\":{\"455\":2,\"1042\":1,\"1093\":1,\"1210\":1,\"1261\":1,\"1378\":1,\"1429\":1,\"1546\":1,\"1597\":1,\"2424\":1,\"2451\":1,\"2580\":1,\"2959\":2,\"4184\":2,\"4424\":1,\"4475\":1,\"4757\":1,\"4784\":1,\"4913\":1}}],[\"initial\",{\"1\":{\"392\":1,\"402\":1,\"2959\":1,\"4184\":1}}],[\"initialization\",{\"1\":{\"188\":1,\"3471\":1}}],[\"inputstream\",{\"1\":{\"261\":2,\"3546\":2}}],[\"intel\",{\"1\":{\"2795\":1,\"4020\":1}}],[\"interview\",{\"0\":{\"5473\":1}}],[\"internet\",{\"1\":{\"2130\":1,\"2191\":1,\"2223\":1,\"5162\":1,\"5183\":1,\"5244\":1}}],[\"interceptor\",{\"1\":{\"895\":1,\"3883\":1}}],[\"intercept\",{\"1\":{\"713\":2,\"714\":1,\"715\":1,\"895\":1,\"3701\":2,\"3702\":1,\"3703\":1,\"3883\":1}}],[\"interfaces\",{\"1\":{\"704\":2,\"3692\":2}}],[\"interface\",{\"1\":{\"179\":1,\"180\":1,\"706\":1,\"714\":1,\"3462\":1,\"3463\":1,\"3694\":1,\"3702\":1}}],[\"integer>\",{\"1\":{\"949\":1,\"5096\":1}}],[\"integer\",{\"1\":{\"565\":1,\"738\":1,\"949\":1,\"2981\":1,\"2982\":1,\"2983\":1,\"3006\":1,\"3007\":1,\"3008\":1,\"3726\":1,\"4206\":1,\"4207\":1,\"4208\":1,\"4231\":1,\"4232\":1,\"4233\":1,\"5096\":1}}],[\"int\",{\"1\":{\"258\":1,\"269\":5,\"395\":1,\"399\":1,\"402\":1,\"455\":3,\"469\":1,\"470\":1,\"480\":3,\"482\":1,\"484\":3,\"490\":1,\"492\":2,\"494\":2,\"510\":1,\"630\":3,\"940\":5,\"949\":5,\"1011\":4,\"1093\":2,\"1261\":2,\"1429\":2,\"1597\":2,\"2595\":1,\"2845\":1,\"2846\":1,\"2847\":1,\"2848\":1,\"2959\":2,\"3543\":1,\"4070\":1,\"4071\":1,\"4072\":1,\"4073\":1,\"4184\":2,\"4475\":2,\"4928\":1,\"5087\":5,\"5096\":5}}],[\"ir⋯\",{\"1\":{\"92\":1,\"3380\":1}}],[\"isheldexclusively\",{\"1\":{\"2844\":1,\"4069\":1}}],[\"isn\",{\"0\":{\"2099\":1},\"1\":{\"1984\":1}}],[\"isolation\",{\"1\":{\"768\":1,\"769\":1,\"770\":1,\"771\":1,\"772\":1,\"2485\":1,\"3756\":1,\"3757\":1,\"3758\":1,\"3759\":1,\"3760\":1,\"4818\":1}}],[\"is\",{\"1\":{\"81\":2,\"455\":2,\"458\":1,\"577\":1,\"584\":1,\"586\":1,\"2959\":5,\"3369\":2,\"4184\":5}}],[\"idea\",{\"1\":{\"3277\":1}}],[\"idle\",{\"1\":{\"2959\":2,\"4184\":2}}],[\"idx=1\",{\"1\":{\"2877\":1,\"3022\":1,\"4102\":1,\"4247\":1}}],[\"idx=3\",{\"1\":{\"2772\":1,\"3997\":1}}],[\"idx=2\",{\"1\":{\"831\":1,\"3819\":1}}],[\"id+1\",{\"1\":{\"2540\":1,\"4873\":1}}],[\"ids\",{\"1\":{\"2538\":2,\"2541\":2,\"2542\":2,\"4871\":2,\"4874\":2,\"4875\":2}}],[\"id\",{\"1\":{\"65\":1,\"2465\":2,\"2531\":1,\"2534\":2,\"2536\":2,\"2538\":9,\"2540\":3,\"2541\":5,\"2542\":2,\"2543\":2,\"2694\":1,\"2756\":1,\"3353\":1,\"3981\":1,\"4798\":2,\"4864\":1,\"4867\":2,\"4869\":2,\"4871\":9,\"4873\":3,\"4874\":5,\"4875\":2,\"4876\":2,\"5027\":1}}],[\"iterator\",{\"1\":{\"542\":3,\"545\":1}}],[\"its\",{\"1\":{\"455\":1,\"492\":1,\"494\":1}}],[\"it\",{\"1\":{\"35\":2,\"455\":1,\"458\":1,\"3323\":2}}],[\"我就去总结md5相关的知识\",{\"1\":{\"3273\":1}}],[\"我就是了解\",{\"1\":{\"3037\":1,\"5288\":1}}],[\"我当时信以为真\",{\"1\":{\"3273\":1}}],[\"我当时一脸懵逼\",{\"1\":{\"3273\":1}}],[\"我叫杨路恒\",{\"1\":{\"3210\":1,\"5461\":1}}],[\"我都说了了解mysql\",{\"1\":{\"3041\":1,\"5292\":1}}],[\"我只是了解他是干啥的\",{\"1\":{\"3038\":1,\"5289\":1}}],[\"我发现缓存雪崩这名字起的有点意思\",{\"1\":{\"2719\":1,\"5052\":1}}],[\"我给你负责\",{\"1\":{\"2217\":1,\"5270\":1}}],[\"我给你\",{\"1\":{\"2215\":1,\"5268\":1}}],[\"我总结面试常考的也就是\",{\"1\":{\"2014\":1}}],[\"我默认大家对http\",{\"1\":{\"1893\":1,\"1908\":1,\"1923\":1,\"1936\":1,\"1949\":1,\"1964\":1,\"5155\":1,\"5178\":1}}],[\"我说了做的一些优化\",{\"1\":{\"3064\":1,\"5315\":1}}],[\"我说是生成随机数吗\",{\"1\":{\"3061\":1,\"5312\":1}}],[\"我说是一个高并发写的操作\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"我说实现自定义处理策略\",{\"1\":{\"3060\":1,\"5311\":1}}],[\"我说实习生的日常工作安排是什么\",{\"1\":{\"3053\":1,\"5304\":1}}],[\"我说只了解它是用来作为即时通讯的协议\",{\"1\":{\"3044\":1,\"5295\":1}}],[\"我说不了解\",{\"1\":{\"3042\":1,\"3052\":1,\"5293\":1,\"5303\":1}}],[\"我说不行\",{\"1\":{\"3032\":1,\"5283\":1}}],[\"我说spring\",{\"1\":{\"3036\":1,\"5287\":1}}],[\"我说如果在一个进程可以\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"我要先告诉大家一个常见的局部性原理\",{\"1\":{\"1006\":1}}],[\"我参考了网上的其博主的文章写的\",{\"1\":{\"635\":1}}],[\"我再提供一个简单的原则\",{\"1\":{\"586\":1}}],[\"我一个小白当然是去百度一下这个deque为啥java官方要推荐作为stack的实现呢\",{\"1\":{\"559\":1}}],[\"我先不说反射是啥\",{\"1\":{\"287\":1,\"3564\":1}}],[\"我们无法通过常规方式从md5值倒推出它的原文\",{\"1\":{\"3217\":1}}],[\"我们手动关闭自动提交\",{\"1\":{\"3118\":1,\"5369\":1}}],[\"我们只需要维护threadpoolexecutor的实例\",{\"1\":{\"3012\":1,\"4237\":1}}],[\"我们只需要使用preparedstatement解决\",{\"1\":{\"2552\":1,\"4885\":1}}],[\"我们足以通过猜测得出结论\",{\"1\":{\"2945\":1,\"4170\":1}}],[\"我们调用的是threadlocalmap类对应的\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"我们创建的变量是可以被任何一个线程访问并修改的\",{\"1\":{\"2936\":1,\"4161\":1}}],[\"我们创建索引的字段应该是查询操作非常频繁的字段\",{\"1\":{\"2337\":1,\"4670\":1}}],[\"我们操作锁大多时候都是基于\",{\"1\":{\"2909\":1,\"4134\":1}}],[\"我们称之为\",{\"1\":{\"2900\":1,\"4125\":1}}],[\"我们先来了解一下加密算法的基础北背景\",{\"1\":{\"3275\":1}}],[\"我们先来看一下\",{\"1\":{\"2702\":1,\"5035\":1}}],[\"我们先来简单解释一下这些参数的含义\",{\"1\":{\"393\":1}}],[\"我们还要从布隆过滤器的原理来说\",{\"1\":{\"2701\":1,\"5034\":1}}],[\"我们需要的就是判断\",{\"1\":{\"2698\":1,\"5031\":1}}],[\"我们讨论的\",{\"1\":{\"2521\":1,\"4854\":1}}],[\"我们常见的\",{\"1\":{\"2480\":1,\"4813\":1}}],[\"我们不需要显示的使用\",{\"1\":{\"2401\":1,\"4734\":1}}],[\"我们不需要针对每个目标类都单独创建一个代理类\",{\"1\":{\"696\":1,\"3684\":1}}],[\"我们在后端增加额外的处理逻辑比如将失效的\",{\"1\":{\"3208\":1,\"5459\":1}}],[\"我们在使用联合索引时\",{\"1\":{\"2331\":1,\"4664\":1}}],[\"我们在做类设计的时候\",{\"1\":{\"583\":1}}],[\"我们就称之为\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"我们说网络设备都有一个\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"我们也是时候了解下到底什么是http\",{\"1\":{\"1884\":1,\"1899\":1,\"1914\":1,\"1927\":1,\"1940\":1,\"1955\":1,\"5145\":1,\"5170\":1}}],[\"我们也能看出\",{\"1\":{\"607\":1}}],[\"我们是要考虑\",{\"1\":{\"2472\":1,\"4805\":1}}],[\"我们是不建议在实际生产项目中使用外键的\",{\"1\":{\"2249\":1,\"4582\":1}}],[\"我们是用的\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"我们是必须要实现的\",{\"1\":{\"1832\":1,\"4392\":1}}],[\"我们是否可能将栈当做一个动态数组使用\",{\"1\":{\"587\":1}}],[\"我们是否有可能把子类进行向上的父类转型\",{\"1\":{\"586\":1}}],[\"我们肯定需要先暂停服务变为\",{\"1\":{\"1811\":1,\"4371\":1}}],[\"我们整个集群如何保证数据一致性\",{\"1\":{\"1809\":1,\"4369\":1}}],[\"我们首先来了解一下在\",{\"1\":{\"1787\":1,\"4347\":1}}],[\"我们一定会依赖各种服务\",{\"1\":{\"1755\":1,\"4315\":1}}],[\"我们来看看\",{\"1\":{\"1135\":1,\"1303\":1,\"1471\":1,\"1639\":1,\"4517\":1}}],[\"我们写的\",{\"1\":{\"1134\":1,\"1302\":1,\"1470\":1,\"1638\":1,\"4516\":1}}],[\"我们会循环从文件描述符读写数据\",{\"1\":{\"1070\":1,\"1238\":1,\"1406\":1,\"1574\":1,\"4452\":1}}],[\"我们熟悉的\",{\"1\":{\"1052\":1,\"1220\":1,\"1388\":1,\"1556\":1,\"4434\":1}}],[\"我们去分析一级缓存这样存放成品\",{\"1\":{\"801\":1,\"3789\":1}}],[\"我们的项目需要连接多个数据库\",{\"1\":{\"750\":1,\"3738\":1}}],[\"我们对目标对象的每个方法的增强都是手动完成的\",{\"1\":{\"693\":1,\"3681\":1}}],[\"我们最开始分析\",{\"1\":{\"616\":1}}],[\"我们想实现一个队列\",{\"1\":{\"599\":1}}],[\"我们都知道\",{\"1\":{\"599\":1}}],[\"我们再来看一下\",{\"1\":{\"596\":1,\"2705\":1,\"5038\":1}}],[\"我们发现\",{\"1\":{\"497\":1}}],[\"我们定义了一个新的hashmap\",{\"1\":{\"407\":1}}],[\"我们知道消息在被追加到\",{\"1\":{\"3115\":1,\"5366\":1}}],[\"我们知道在\",{\"1\":{\"2325\":1,\"4658\":1}}],[\"我们知道vector和arraylist都是list的子类\",{\"1\":{\"475\":1}}],[\"我们知道\",{\"1\":{\"405\":1,\"410\":1,\"863\":1,\"1894\":1,\"1909\":1,\"1924\":1,\"1937\":1,\"1950\":1,\"1965\":1,\"3851\":1,\"5156\":1,\"5179\":1}}],[\"我们可以创建多种类型的\",{\"1\":{\"2995\":1,\"4220\":1}}],[\"我们可以多配置一些线程\",{\"1\":{\"2993\":1,\"4218\":1}}],[\"我们可以结合内置线程池来分析\",{\"1\":{\"2980\":1,\"4205\":1}}],[\"我们可以把\",{\"1\":{\"2942\":1,\"4167\":1}}],[\"我们可以在构造函数中传入\",{\"1\":{\"2910\":1,\"4135\":1}}],[\"我们可以在程序运行时动态创建对象\",{\"1\":{\"295\":1,\"3572\":1}}],[\"我们可以设置一个\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"我们可以快速找到\",{\"1\":{\"2265\":1,\"4598\":1}}],[\"我们可以进一步减少通过\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"我们可以得知\",{\"1\":{\"1089\":1,\"1257\":1,\"1425\":1,\"1593\":1,\"4471\":1}}],[\"我们可以看到输出的sql文是把整个参数用引号包起来\",{\"1\":{\"2553\":1,\"4886\":1}}],[\"我们可以看到\",{\"1\":{\"1012\":1}}],[\"我们可以集成很多三方中间件来做缓存\",{\"1\":{\"907\":1,\"3895\":1}}],[\"我们可以用\",{\"1\":{\"710\":1,\"1081\":1,\"1249\":1,\"1417\":1,\"1585\":1,\"3698\":1,\"4463\":1}}],[\"我们可以直接代理实现类\",{\"1\":{\"696\":1,\"3684\":1}}],[\"我们可以对\",{\"1\":{\"209\":1,\"3492\":1}}],[\"我们暂且不急于介绍异常表\",{\"1\":{\"271\":1,\"3548\":1}}],[\"我们支持\",{\"1\":{\"158\":1,\"166\":1,\"3441\":1,\"3449\":1}}],[\"我在右对齐\",{\"1\":{\"62\":1,\"3350\":1}}],[\"我是居中的\",{\"1\":{\"61\":1,\"3349\":1}}],[\"上传素材功能\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"上完厕所完事后把门打开\",{\"1\":{\"2775\":1,\"4000\":1}}],[\"上的副本\",{\"1\":{\"2641\":1,\"4974\":1}}],[\"上的更改\",{\"1\":{\"845\":1,\"3833\":1}}],[\"上图有一个错误\",{\"1\":{\"2130\":1,\"2223\":1,\"5183\":1}}],[\"上图用于辅助理解\",{\"1\":{\"732\":1,\"3720\":1}}],[\"上位的时候\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"上\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"2945\":1,\"4170\":1,\"4534\":1}}],[\"上下文切换\",{\"1\":{\"1079\":1,\"1247\":1,\"1415\":1,\"1583\":1,\"4461\":1}}],[\"上下角标\",{\"0\":{\"57\":1,\"3345\":1}}],[\"上有可读事件发生时\",{\"1\":{\"1066\":1,\"1234\":1,\"1402\":1,\"1570\":1,\"4448\":1}}],[\"上限就为系统定义的进程打开的最大文件描述符个数\",{\"1\":{\"1060\":1,\"1228\":1,\"1396\":1,\"1564\":1,\"4442\":1}}],[\"上面的字节码中包含一个\",{\"1\":{\"2918\":1,\"4143\":1}}],[\"上面的三个步骤和单\",{\"1\":{\"1161\":1,\"1329\":1,\"1497\":1,\"1665\":1,\"4543\":1}}],[\"上面这两条语句必须在一个事务中\",{\"1\":{\"2452\":1,\"4785\":1}}],[\"上面这些例子\",{\"1\":{\"583\":1}}],[\"上面我讲过了\",{\"1\":{\"1811\":1,\"4371\":1}}],[\"上面我们不是说只有\",{\"1\":{\"1793\":1,\"4353\":1}}],[\"上面我们是从实现和应用角度来说的静态代理\",{\"1\":{\"694\":1,\"3682\":1}}],[\"上面红色的箭头代表的是有变动的分区分配\",{\"1\":{\"971\":1,\"5118\":1}}],[\"上面是一张hashmap中主要的成员变量的图\",{\"1\":{\"392\":1}}],[\"上源码\",{\"1\":{\"453\":1}}],[\"上述from和to之前发生异常后的异常处理者的位置\",{\"1\":{\"279\":1,\"3556\":1}}],[\"上一篇\",{\"1\":{\"17\":1,\"3305\":1}}],[\"危险容器\",{\"1\":{\"51\":1,\"3339\":1}}],[\"警告容器\",{\"1\":{\"49\":1,\"3337\":1}}],[\"提升系统性能指标\",{\"1\":{\"3104\":1,\"5355\":1}}],[\"提到的来说一下使用线程池的好处\",{\"1\":{\"2951\":1,\"4176\":1}}],[\"提到jvm处理异常的机制\",{\"1\":{\"271\":1,\"3548\":1}}],[\"提前加载到缓存\",{\"1\":{\"1879\":1,\"3956\":1}}],[\"提前创建\",{\"1\":{\"814\":1,\"3802\":1}}],[\"提交更新\",{\"1\":{\"2882\":1,\"4107\":1}}],[\"提交失败\",{\"1\":{\"2786\":1,\"4011\":1}}],[\"提交事务消息\",{\"1\":{\"1851\":1,\"3928\":1}}],[\"提交后会清空缓存区域\",{\"1\":{\"898\":1,\"912\":1,\"3886\":1,\"3900\":1}}],[\"提高线程的可管理性\",{\"1\":{\"2954\":1,\"4179\":1}}],[\"提高响应速度\",{\"1\":{\"2953\":1,\"4178\":1}}],[\"提高多表连接查询的效率\",{\"1\":{\"2340\":1,\"4673\":1}}],[\"提高性能\",{\"1\":{\"2256\":1,\"4589\":1}}],[\"提高系统的可维护性\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"提高开发效率\",{\"1\":{\"1724\":1,\"4284\":1}}],[\"提出了有名管道\",{\"1\":{\"1042\":1,\"1210\":1,\"1378\":1,\"1546\":1,\"4424\":1}}],[\"提取出该分组中的\",{\"1\":{\"2162\":1,\"5215\":1}}],[\"提取查询分组中的\",{\"1\":{\"2160\":1,\"5213\":1}}],[\"提取\",{\"1\":{\"736\":1,\"3724\":1}}],[\"提供远程的feign接口\",{\"1\":{\"3178\":1,\"5429\":1}}],[\"提供事务支持\",{\"1\":{\"2246\":1,\"4579\":1}}],[\"提供与\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"提供\",{\"1\":{\"1776\":1,\"2678\":1,\"4336\":1,\"5011\":1}}],[\"提供的\",{\"1\":{\"1692\":1,\"1773\":1,\"4252\":1,\"4333\":1}}],[\"提供的插件接口\",{\"1\":{\"892\":1,\"3880\":1}}],[\"提供应用程序的信息\",{\"1\":{\"856\":1,\"3844\":1}}],[\"提供了两种锁机制来控制多个线程对共享资源的互斥访问\",{\"1\":{\"2737\":1,\"3962\":1}}],[\"提供了两个命令来生成\",{\"1\":{\"2645\":1,\"4978\":1}}],[\"提供了服务的发现\",{\"1\":{\"1712\":1,\"4272\":1}}],[\"提供了一个专门发送文件的系统调用函数\",{\"1\":{\"1092\":1,\"1260\":1,\"1428\":1,\"1596\":1,\"4474\":1}}],[\"提供了除了构造函数注入和原型注入外的\",{\"1\":{\"791\":1,\"3779\":1}}],[\"提供了fast\",{\"1\":{\"456\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"40\":1,\"3328\":1}}],[\"提示\",{\"1\":{\"122\":1,\"3410\":1}}],[\"提示容器\",{\"1\":{\"47\":1,\"3335\":1}}],[\"=>\",{\"1\":{\"874\":1,\"875\":1,\"876\":1,\"3862\":1,\"3863\":1,\"3864\":1}}],[\"==\",{\"1\":{\"227\":2,\"258\":1,\"484\":1,\"673\":2,\"940\":2,\"949\":1,\"2959\":4,\"3510\":2,\"3543\":1,\"3661\":2,\"4184\":4,\"5087\":2,\"5096\":1}}],[\"=\",{\"1\":{\"45\":1,\"92\":1,\"227\":7,\"261\":2,\"263\":9,\"269\":2,\"286\":1,\"289\":1,\"291\":3,\"297\":2,\"305\":2,\"311\":2,\"314\":3,\"398\":1,\"402\":1,\"406\":4,\"411\":9,\"420\":1,\"424\":10,\"455\":2,\"458\":2,\"460\":1,\"469\":1,\"470\":1,\"476\":3,\"480\":1,\"484\":2,\"492\":3,\"494\":3,\"528\":1,\"566\":1,\"573\":1,\"597\":1,\"600\":2,\"630\":9,\"673\":1,\"793\":2,\"835\":1,\"940\":10,\"949\":12,\"1011\":3,\"1082\":1,\"1250\":1,\"1418\":1,\"1586\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2445\":1,\"2447\":2,\"2452\":1,\"2465\":1,\"2748\":1,\"2941\":2,\"2944\":3,\"2957\":1,\"2959\":7,\"3333\":1,\"3380\":1,\"3510\":7,\"3546\":2,\"3563\":1,\"3566\":1,\"3568\":3,\"3574\":2,\"3582\":2,\"3588\":2,\"3591\":3,\"3617\":1,\"3661\":1,\"3781\":2,\"3823\":1,\"3973\":1,\"4166\":2,\"4169\":3,\"4182\":1,\"4184\":7,\"4464\":1,\"4773\":1,\"4774\":1,\"4775\":1,\"4778\":1,\"4780\":2,\"4785\":1,\"4798\":1,\"5087\":10,\"5096\":12}}],[\"aes\",{\"1\":{\"3277\":1}}],[\"a=2\",{\"1\":{\"2788\":1,\"4013\":1}}],[\"aqs队列内部维护的是一个双向链表\",{\"1\":{\"2830\":1,\"4055\":1}}],[\"aqs是依赖内部的同步队列实现\",{\"1\":{\"2829\":1,\"4054\":1}}],[\"aqs是一个抽象类\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"aqs内部实现\",{\"0\":{\"2828\":1,\"4053\":1}}],[\"aqs功能分为两种\",{\"1\":{\"2824\":1,\"4049\":1}}],[\"aqs的两种功能\",{\"0\":{\"2823\":1,\"4048\":1}}],[\"aqs在顶层已经定义好了\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"aqs解决了了之类实现同步器的大量细节问题\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"aqs\",{\"0\":{\"2819\":1,\"2842\":1,\"4044\":1,\"4067\":1},\"1\":{\"2746\":1,\"2822\":1,\"2831\":2,\"2832\":1,\"2843\":1,\"3971\":1,\"4047\":1,\"4056\":2,\"4057\":1,\"4068\":1}}],[\"aof\",{\"0\":{\"2648\":1,\"2654\":1,\"4981\":1,\"4987\":1},\"1\":{\"2638\":1,\"2639\":1,\"2649\":2,\"2651\":4,\"2653\":2,\"2655\":1,\"2656\":1,\"2657\":2,\"2658\":1,\"2659\":2,\"2660\":1,\"2665\":1,\"2666\":1,\"4971\":1,\"4972\":1,\"4982\":2,\"4984\":4,\"4986\":2,\"4988\":1,\"4989\":1,\"4990\":2,\"4991\":1,\"4992\":2,\"4993\":1,\"4998\":1,\"4999\":1}}],[\"aop和ioc概念\",{\"0\":{\"721\":1,\"3709\":1}}],[\"aop\",{\"1\":{\"698\":1,\"711\":1,\"722\":2,\"723\":3,\"747\":1,\"752\":1,\"809\":2,\"811\":2,\"814\":1,\"3686\":1,\"3699\":1,\"3710\":2,\"3711\":3,\"3735\":1,\"3740\":1,\"3797\":2,\"3799\":2,\"3802\":1}}],[\"authorization\",{\"1\":{\"3135\":2,\"5386\":2}}],[\"authorizedfilter\",{\"1\":{\"3128\":1,\"5379\":1}}],[\"author\",{\"1\":{\"2957\":1,\"4182\":1}}],[\"autoinc\",{\"1\":{\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2445\":1,\"2447\":1,\"4772\":1,\"4773\":1,\"4774\":1,\"4775\":1,\"4778\":1,\"4780\":1}}],[\"auto\",{\"0\":{\"2430\":1,\"4763\":1},\"1\":{\"825\":1,\"2388\":1,\"2431\":1,\"2432\":1,\"2433\":1,\"2434\":3,\"2435\":2,\"2436\":1,\"2438\":1,\"2439\":1,\"2440\":1,\"3813\":1,\"4721\":1,\"4764\":1,\"4765\":1,\"4766\":1,\"4767\":3,\"4768\":2,\"4769\":1,\"4771\":1,\"4772\":1,\"4773\":1}}],[\"autocommit\",{\"1\":{\"2452\":1,\"4785\":1}}],[\"autoconfigurationimportselector\",{\"1\":{\"825\":1,\"3813\":1}}],[\"autoconfigure在我们的开发中并不会被感知\",{\"1\":{\"872\":1,\"3860\":1}}],[\"autoconfigure\",{\"1\":{\"821\":1,\"871\":1,\"3809\":1,\"3859\":1}}],[\"autocloseable\",{\"1\":{\"260\":1,\"3545\":1}}],[\"automaticallycloseresource\",{\"1\":{\"261\":1,\"3546\":1}}],[\"aufs\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"atomicity\",{\"1\":{\"2483\":1,\"4816\":1}}],[\"atomicinteger\",{\"1\":{\"940\":3,\"5087\":3}}],[\"atomic\",{\"1\":{\"1779\":1,\"1785\":1,\"4339\":1,\"4345\":1}}],[\"attrs\",{\"0\":{\"64\":1,\"3352\":1}}],[\"availability\",{\"1\":{\"1822\":1,\"1826\":1,\"4382\":1,\"4386\":1}}],[\"available\",{\"1\":{\"940\":2,\"5087\":2}}],[\"availablepartitionsfortopic\",{\"1\":{\"940\":1,\"5087\":1}}],[\"availablepartitions\",{\"1\":{\"940\":4,\"5087\":4}}],[\"avl树的时间复杂度虽然优于红黑树\",{\"1\":{\"660\":1,\"3648\":1}}],[\"avl树调平衡有时候代价较大\",{\"1\":{\"526\":1,\"3615\":1}}],[\"acc\",{\"1\":{\"2927\":2,\"2931\":1,\"2959\":1,\"4152\":2,\"4156\":1,\"4184\":1}}],[\"accept\",{\"0\":{\"2125\":1},\"1\":{\"1141\":1,\"1144\":1,\"1159\":1,\"1176\":1,\"1309\":1,\"1312\":1,\"1327\":1,\"1344\":1,\"1477\":1,\"1480\":1,\"1495\":1,\"1512\":1,\"1645\":1,\"1648\":1,\"1663\":1,\"1680\":1,\"2008\":1,\"2010\":1,\"4523\":1,\"4526\":1,\"4541\":1,\"4558\":1}}],[\"acceptor\",{\"1\":{\"1137\":1,\"1139\":1,\"1143\":1,\"1144\":2,\"1158\":1,\"1159\":2,\"1176\":1,\"1305\":1,\"1307\":1,\"1311\":1,\"1312\":2,\"1326\":1,\"1327\":2,\"1344\":1,\"1473\":1,\"1475\":1,\"1479\":1,\"1480\":2,\"1494\":1,\"1495\":2,\"1512\":1,\"1641\":1,\"1643\":1,\"1647\":1,\"1648\":2,\"1662\":1,\"1663\":2,\"1680\":1,\"4519\":1,\"4521\":1,\"4525\":1,\"4526\":2,\"4540\":1,\"4541\":2,\"4558\":1}}],[\"accesscontroller\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"access\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"acquirequeued\",{\"1\":{\"2840\":1,\"4065\":1}}],[\"acquire方法流程总结\",{\"0\":{\"2837\":1,\"4062\":1}}],[\"ack\",{\"1\":{\"2018\":1}}],[\"actuator是spring\",{\"1\":{\"878\":1,\"3866\":1}}],[\"actuator组件中已经内置了非常多的endpoint\",{\"1\":{\"856\":1,\"3844\":1}}],[\"actuator的核心是端点\",{\"1\":{\"856\":1,\"3844\":1}}],[\"actuator轻松实现应用程序的监控治理\",{\"1\":{\"856\":1,\"3844\":1}}],[\"actuator`\",{\"1\":{\"855\":1,\"3843\":1}}],[\"actuator\",{\"1\":{\"854\":1,\"855\":1,\"856\":1,\"3842\":1,\"3843\":1,\"3844\":1}}],[\"acid事务\",{\"0\":{\"2479\":1,\"4812\":1}}],[\"acid\",{\"1\":{\"772\":1,\"3760\":1}}],[\"abortpolicy\",{\"1\":{\"2957\":1,\"2973\":1,\"2977\":1,\"4182\":1,\"4198\":1,\"4202\":1}}],[\"aba\",{\"0\":{\"2801\":1,\"4026\":1},\"1\":{\"2802\":1,\"2818\":1,\"4027\":1,\"4043\":1}}],[\"abc\",{\"1\":{\"2358\":1,\"4691\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"2746\":1,\"2822\":1,\"2843\":1,\"2909\":1,\"3971\":1,\"4047\":1,\"4068\":1,\"4134\":1}}],[\"abstractpartitionassignor\",{\"1\":{\"949\":1,\"5096\":1}}],[\"abstarctfactory\",{\"1\":{\"684\":1,\"3672\":1}}],[\"abtest\",{\"1\":{\"793\":1,\"3781\":1}}],[\"advice\",{\"1\":{\"752\":1,\"3740\":1}}],[\"addwaiter\",{\"1\":{\"2839\":1,\"4064\":1}}],[\"address\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"addall\",{\"1\":{\"949\":1,\"5096\":1}}],[\"add\",{\"1\":{\"480\":1,\"482\":2,\"484\":1,\"573\":1}}],[\"addsuppressed\",{\"1\":{\"263\":2}}],[\"addelapsedtimefrom\",{\"1\":{\"227\":1,\"3510\":1}}],[\"addtime\",{\"1\":{\"227\":1,\"3510\":1}}],[\"async注解\",{\"1\":{\"3065\":1,\"3157\":1,\"5316\":1,\"5408\":1}}],[\"assignment\",{\"1\":{\"949\":4,\"5096\":4}}],[\"assign\",{\"1\":{\"949\":1,\"5096\":1}}],[\"assembly\",{\"1\":{\"825\":1,\"3813\":1}}],[\"aspect\",{\"1\":{\"722\":1,\"3710\":1}}],[\"astore\",{\"1\":{\"274\":1,\"3551\":1}}],[\"amortized\",{\"1\":{\"625\":1}}],[\"any\",{\"1\":{\"455\":1}}],[\"and\",{\"1\":{\"455\":1,\"2778\":1,\"2816\":1,\"2832\":1,\"2959\":1,\"4003\":1,\"4041\":1,\"4057\":1,\"4184\":1}}],[\"an\",{\"1\":{\"455\":1}}],[\"algorithm\",{\"1\":{\"3213\":1}}],[\"aliyunoss\",{\"1\":{\"3122\":1,\"3153\":1,\"5373\":1,\"5404\":1}}],[\"alibaba\",{\"1\":{\"3101\":1,\"5352\":1}}],[\"alter\",{\"1\":{\"2369\":1,\"4702\":1}}],[\"allow\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"allowcorethreadtimeout\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"allkeys\",{\"1\":{\"2682\":1,\"2683\":1,\"2687\":1,\"5015\":1,\"5016\":1,\"5020\":1}}],[\"all\",{\"1\":{\"455\":2}}],[\"aload\",{\"1\":{\"274\":1,\"3551\":1}}],[\"argument\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"args\",{\"1\":{\"263\":1,\"706\":2,\"714\":2,\"793\":1,\"2957\":1,\"3694\":2,\"3702\":2,\"3781\":1,\"4182\":1}}],[\"arp\",{\"0\":{\"2145\":1,\"5198\":1},\"1\":{\"2146\":2,\"2147\":2,\"2148\":2,\"2149\":1,\"2154\":1,\"2155\":1,\"2156\":2,\"2157\":1,\"2158\":2,\"2160\":2,\"2161\":3,\"2162\":1,\"2163\":1,\"2165\":3,\"2167\":1,\"2169\":1,\"2173\":1,\"2174\":1,\"5199\":2,\"5200\":2,\"5201\":2,\"5202\":1,\"5207\":1,\"5208\":1,\"5209\":2,\"5210\":1,\"5211\":2,\"5213\":2,\"5214\":3,\"5215\":1,\"5216\":1,\"5218\":3,\"5220\":1,\"5222\":1,\"5226\":1,\"5227\":1}}],[\"artifactid>\",{\"1\":{\"846\":1,\"3834\":1}}],[\"article\",{\"1\":{\"326\":1,\"519\":1,\"548\":1,\"636\":1,\"886\":1,\"919\":1,\"972\":1,\"981\":1,\"995\":1,\"1870\":1,\"2554\":1,\"2733\":1,\"2749\":1,\"2911\":1,\"3164\":1,\"3165\":1,\"3166\":1,\"3288\":2,\"3520\":1,\"3603\":1,\"3608\":1,\"3874\":1,\"3907\":1,\"3947\":1,\"3974\":1,\"4136\":1,\"4887\":1,\"5066\":1,\"5119\":1,\"5128\":1,\"5142\":1,\"5415\":1,\"5416\":1,\"5417\":1}}],[\"arrayblockingqueue<>\",{\"1\":{\"2957\":1,\"4182\":1}}],[\"arrayblockingqueue\",{\"1\":{\"2957\":1,\"4182\":1}}],[\"arraycopy\",{\"1\":{\"480\":1,\"484\":1,\"492\":1,\"494\":1}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"480\":1,\"494\":1}}],[\"array\",{\"1\":{\"455\":2,\"501\":1,\"1011\":3,\"1012\":1,\"1013\":2}}],[\"arraydeque<>\",{\"1\":{\"600\":1,\"630\":1}}],[\"arraydeque<integer>\",{\"1\":{\"566\":1,\"597\":1}}],[\"arraydeque效率更高一些\",{\"1\":{\"353\":1}}],[\"arraydeque和linkedlist都实现了deque接口\",{\"1\":{\"352\":1}}],[\"arraydeque实现了双端队列\",{\"1\":{\"348\":1}}],[\"arraydeque\",{\"0\":{\"347\":1},\"1\":{\"564\":1,\"601\":1,\"602\":1,\"603\":1,\"624\":1,\"633\":1}}],[\"arraylist<topicpartition>\",{\"1\":{\"949\":1,\"5096\":1}}],[\"arraylist<string>\",{\"1\":{\"476\":1}}],[\"arraylist类的remove方法内容如下\",{\"1\":{\"491\":1}}],[\"arraylist自动扩大容量为原来的1\",{\"1\":{\"469\":1}}],[\"arraylist是原来的50\",{\"1\":{\"501\":1}}],[\"arraylist是0\",{\"1\":{\"469\":1}}],[\"arraylist是非同步实现的一个单线程下较为高效的数据结构\",{\"1\":{\"464\":1}}],[\"arraylist非同步\",{\"1\":{\"468\":1}}],[\"arraylist的add方法内容如下\",{\"1\":{\"483\":1}}],[\"arraylist的存储结构定义为transient\",{\"1\":{\"464\":1}}],[\"arraylist的实现\",{\"1\":{\"456\":1}}],[\"arraylist只通过一个修改记录字段提供弱一致性\",{\"1\":{\"464\":1}}],[\"arraylist需要135字节\",{\"1\":{\"462\":1}}],[\"arraylist实现了writeobject方法\",{\"1\":{\"456\":1}}],[\"arraylist使用了transient关键字进行存储优化\",{\"0\":{\"452\":1}}],[\"arraylist和linkedlist和vector的区别\",{\"0\":{\"442\":1}}],[\"arraylist\",{\"0\":{\"332\":1},\"1\":{\"445\":1,\"454\":1,\"469\":1}}],[\"arithmeticexception\",{\"1\":{\"258\":1,\"3543\":1}}],[\"are\",{\"1\":{\"215\":1,\"940\":1,\"2959\":3,\"3498\":1,\"4184\":3,\"5087\":1}}],[\"area\",{\"1\":{\"177\":1,\"180\":1,\"3460\":1,\"3463\":1}}],[\"ap\",{\"1\":{\"1834\":3,\"1836\":1,\"3164\":1,\"3165\":1,\"3166\":1,\"4394\":3,\"4396\":1,\"5415\":1,\"5416\":1,\"5417\":1}}],[\"appjwtutil\",{\"1\":{\"3128\":1,\"5379\":1}}],[\"appendonly\",{\"1\":{\"2649\":1,\"2650\":1,\"2653\":1,\"4982\":1,\"4983\":1,\"4986\":1}}],[\"append\",{\"1\":{\"2638\":1,\"2649\":1,\"2656\":1,\"4971\":1,\"4982\":1,\"4989\":1}}],[\"apphttpcodeenum\",{\"1\":{\"835\":8,\"836\":1,\"3823\":8,\"3824\":1}}],[\"application配置文件这个容易理解\",{\"1\":{\"839\":1,\"3827\":1}}],[\"application\",{\"1\":{\"817\":2,\"3805\":2}}],[\"applicationcontext\",{\"1\":{\"746\":1,\"3734\":1}}],[\"appclassloader\",{\"1\":{\"208\":1,\"3491\":1}}],[\"api服务网关\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"api要提供这两种线程安全的list的实现方式呢\",{\"1\":{\"474\":1}}],[\"api\",{\"1\":{\"214\":1,\"234\":1,\"2597\":1,\"2599\":1,\"3497\":1,\"3517\":1,\"4930\":1,\"4932\":1}}],[\"a\",{\"1\":{\"45\":1,\"261\":1,\"455\":1,\"458\":1,\"577\":1,\"580\":1,\"584\":2,\"586\":2,\"793\":1,\"795\":4,\"801\":3,\"805\":2,\"806\":2,\"810\":1,\"940\":2,\"1832\":1,\"1833\":1,\"1835\":2,\"1837\":1,\"2153\":1,\"2155\":1,\"2156\":1,\"2157\":1,\"2158\":2,\"2159\":1,\"2160\":3,\"2162\":1,\"2165\":1,\"2166\":3,\"2167\":1,\"2169\":2,\"2170\":4,\"2171\":1,\"2172\":1,\"2350\":3,\"2410\":1,\"2412\":1,\"2484\":6,\"2495\":4,\"2496\":2,\"2500\":3,\"2504\":2,\"2505\":1,\"2790\":1,\"2792\":1,\"2802\":2,\"2806\":1,\"2959\":2,\"3333\":1,\"3546\":1,\"3781\":1,\"3783\":4,\"3789\":3,\"3793\":2,\"3794\":2,\"3798\":1,\"4015\":1,\"4017\":1,\"4027\":2,\"4031\":1,\"4184\":2,\"4392\":1,\"4393\":1,\"4395\":2,\"4397\":1,\"4683\":3,\"4743\":1,\"4745\":1,\"4817\":6,\"4828\":4,\"4829\":2,\"4833\":3,\"4837\":2,\"4838\":1,\"5087\":2,\"5206\":1,\"5208\":1,\"5209\":1,\"5210\":1,\"5211\":2,\"5212\":1,\"5213\":3,\"5215\":1,\"5218\":1,\"5219\":3,\"5220\":1,\"5222\":2,\"5223\":4,\"5224\":1,\"5225\":1}}],[\"与客户端系统消息通知\",{\"1\":{\"3103\":1,\"5354\":1}}],[\"与此线程有关的inheritablethreadlocal值\",{\"1\":{\"2941\":1,\"4166\":1}}],[\"与此线程有关的threadlocal值\",{\"1\":{\"2941\":1,\"4166\":1}}],[\"与快照持久化相比\",{\"1\":{\"2649\":1,\"4982\":1}}],[\"与管道\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"4426\":1}}],[\"与代理类对象调用的方法相对应\",{\"1\":{\"706\":1,\"3694\":1}}],[\"与arraylist和linkedlist不同\",{\"1\":{\"351\":1}}],[\"与\",{\"1\":{\"44\":1,\"1698\":1,\"2739\":1,\"3332\":1,\"3964\":1,\"4258\":1,\"5162\":1}}],[\"v的实际值是相等的\",{\"1\":{\"2790\":1,\"4015\":1}}],[\"visible\",{\"1\":{\"2544\":1,\"4877\":1}}],[\"view时\",{\"1\":{\"2542\":1,\"4875\":1}}],[\"view\",{\"1\":{\"743\":1,\"2378\":2,\"2379\":1,\"2529\":6,\"2531\":3,\"2538\":2,\"2542\":1,\"2543\":1,\"3731\":1,\"4711\":2,\"4712\":1,\"4862\":6,\"4864\":3,\"4871\":2,\"4875\":1,\"4876\":1}}],[\"viewresolver\",{\"1\":{\"742\":2,\"743\":1,\"3730\":2,\"3731\":1}}],[\"volitile关键字原理\",{\"0\":{\"2851\":1,\"4076\":1}}],[\"volatile解决的是多线程共享变量可见性问题\",{\"1\":{\"2876\":1,\"4101\":1}}],[\"volatile总结\",{\"0\":{\"2875\":1,\"4100\":1}}],[\"volatile防止指令重排序具体步骤\",{\"1\":{\"2868\":1,\"4093\":1}}],[\"volatile是通过内存屏障来防止指令重排序的\",{\"1\":{\"2862\":1,\"4087\":1}}],[\"volatile如何防止指令重排序\",{\"0\":{\"2861\":1,\"4086\":1}}],[\"volatile的作用\",{\"0\":{\"2858\":1,\"4083\":1}}],[\"volatile\",{\"1\":{\"673\":1,\"2679\":1,\"2680\":1,\"2681\":1,\"2686\":1,\"3661\":1,\"5012\":1,\"5013\":1,\"5014\":1,\"5019\":1}}],[\"void\",{\"1\":{\"255\":1,\"261\":1,\"263\":1,\"272\":1,\"274\":1,\"455\":1,\"458\":1,\"480\":3,\"482\":1,\"484\":3,\"793\":1,\"2914\":1,\"2925\":1,\"2944\":1,\"2957\":1,\"3540\":1,\"3546\":1,\"3549\":1,\"3551\":1,\"3781\":1,\"4139\":1,\"4150\":1,\"4169\":1,\"4182\":1}}],[\"vs\",{\"1\":{\"621\":1}}],[\"vector锁定的是this对象\",{\"1\":{\"508\":1}}],[\"vector缺省情况下自动增长原来一倍的数组长度\",{\"1\":{\"501\":1}}],[\"vector缺省情况下增长原来一倍的数组长度\",{\"1\":{\"469\":1}}],[\"vector使用同步方法实现\",{\"1\":{\"486\":1}}],[\"vector的实现\",{\"1\":{\"479\":1,\"493\":1}}],[\"vector的占用的字节比arraylist要多\",{\"1\":{\"461\":1}}],[\"vector<string>\",{\"1\":{\"476\":2}}],[\"vector是java\",{\"1\":{\"472\":1}}],[\"vector是多线程环境下更为可靠的数据结构\",{\"1\":{\"465\":1}}],[\"vector指定了initialcapacity\",{\"1\":{\"470\":1}}],[\"vector同步\",{\"1\":{\"468\":1}}],[\"vector需要243字节\",{\"1\":{\"462\":1}}],[\"vector也实现了writeobject方法\",{\"1\":{\"459\":1}}],[\"vector每次请求其大小的双倍空间\",{\"1\":{\"449\":1}}],[\"vector和arraylist在更多元素添加进来时会请求更大的空间\",{\"1\":{\"449\":1}}],[\"vector\",{\"1\":{\"448\":1,\"457\":1,\"458\":1,\"470\":1,\"568\":1,\"569\":2,\"571\":2,\"575\":1,\"608\":2,\"616\":1}}],[\"verification\",{\"1\":{\"188\":1,\"3471\":1}}],[\"v\",{\"0\":{\"5462\":1,\"5475\":1},\"1\":{\"274\":2,\"1038\":1,\"1206\":1,\"1374\":1,\"1542\":1,\"2782\":1,\"2788\":1,\"2790\":2,\"2792\":2,\"2915\":1,\"3551\":2,\"4007\":1,\"4013\":1,\"4015\":2,\"4017\":2,\"4140\":1,\"4420\":1}}],[\"varchar\",{\"1\":{\"2282\":1,\"2292\":1,\"4615\":1,\"4625\":1}}],[\"variable\",{\"1\":{\"42\":1,\"3330\":1}}],[\"valuebytes\",{\"1\":{\"940\":1,\"5087\":1}}],[\"value\",{\"1\":{\"258\":3,\"898\":1,\"940\":1,\"2264\":1,\"2265\":2,\"2279\":1,\"2603\":1,\"2607\":1,\"2622\":1,\"2626\":1,\"2696\":1,\"2944\":3,\"2946\":1,\"2948\":1,\"2981\":1,\"2982\":1,\"2983\":1,\"3006\":1,\"3007\":1,\"3008\":1,\"3196\":1,\"3543\":3,\"3886\":1,\"4169\":3,\"4171\":1,\"4173\":1,\"4206\":1,\"4207\":1,\"4208\":1,\"4231\":1,\"4232\":1,\"4233\":1,\"4597\":1,\"4598\":2,\"4612\":1,\"4936\":1,\"4940\":1,\"4955\":1,\"4959\":1,\"5029\":1,\"5087\":1,\"5447\":1}}],[\"vue\",{\"0\":{\"107\":1,\"3395\":1}}],[\"vuepress\",{\"0\":{\"36\":1,\"3324\":1},\"1\":{\"26\":1,\"27\":1,\"31\":1,\"33\":1,\"35\":1,\"37\":1,\"38\":1,\"40\":1,\"124\":1,\"3314\":1,\"3315\":1,\"3319\":1,\"3321\":1,\"3323\":1,\"3325\":1,\"3326\":1,\"3328\":1,\"3412\":1}}],[\"m\",{\"0\":{\"5462\":1,\"5475\":1},\"1\":{\"2538\":5,\"2540\":1,\"2541\":5,\"2542\":2,\"2543\":1,\"4871\":5,\"4873\":1,\"4874\":5,\"4875\":2,\"4876\":1}}],[\"mvcc\",{\"0\":{\"2530\":1,\"4863\":1},\"1\":{\"2246\":1,\"2254\":1,\"2256\":1,\"2378\":1,\"2422\":1,\"2490\":1,\"2524\":1,\"2531\":1,\"2548\":1,\"4579\":1,\"4587\":1,\"4589\":1,\"4711\":1,\"4755\":1,\"4823\":1,\"4857\":1,\"4864\":1,\"4881\":1}}],[\"mvc的基本流程\",{\"0\":{\"729\":1,\"3717\":1}}],[\"mtu\",{\"1\":{\"2073\":1}}],[\"mq服务器更新消息状态为可发送\",{\"1\":{\"1853\":1,\"3930\":1}}],[\"mq服务器返回ack确认到生产者\",{\"1\":{\"1850\":1,\"3927\":1}}],[\"mq收到消息后\",{\"1\":{\"1849\":1,\"3926\":1}}],[\"mq\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"mmap\",{\"0\":{\"1080\":1,\"1248\":1,\"1416\":1,\"1584\":1,\"4462\":1},\"1\":{\"1077\":1,\"1081\":1,\"1082\":1,\"1083\":1,\"1086\":1,\"1089\":1,\"1245\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1254\":1,\"1257\":1,\"1413\":1,\"1417\":1,\"1418\":1,\"1419\":1,\"1422\":1,\"1425\":1,\"1581\":1,\"1585\":1,\"1586\":1,\"1587\":1,\"1590\":1,\"1593\":1,\"4459\":1,\"4463\":1,\"4464\":1,\"4465\":1,\"4468\":1,\"4471\":1}}],[\"m0\",{\"1\":{\"981\":1,\"3288\":1,\"5128\":1}}],[\"multiplexing\",{\"1\":{\"2186\":1,\"5239\":1}}],[\"murmur2\",{\"1\":{\"940\":1,\"5087\":1}}],[\"mutex\",{\"1\":{\"482\":1,\"490\":1,\"1030\":1,\"1198\":1,\"1366\":1,\"1534\":1,\"4412\":1}}],[\"mp\",{\"1\":{\"831\":1,\"2772\":1,\"2877\":1,\"3022\":1,\"3819\":1,\"3997\":1,\"4102\":1,\"4247\":1}}],[\"myisam\",{\"0\":{\"2236\":1,\"4569\":1},\"1\":{\"2237\":1,\"2238\":2,\"2242\":1,\"2243\":1,\"2245\":1,\"2248\":1,\"2252\":1,\"2255\":1,\"2256\":1,\"2258\":1,\"2259\":1,\"2274\":1,\"2275\":1,\"2276\":2,\"2279\":1,\"2285\":1,\"2305\":1,\"2317\":1,\"2382\":1,\"2449\":1,\"2481\":1,\"3049\":1,\"4570\":1,\"4571\":2,\"4575\":1,\"4576\":1,\"4578\":1,\"4581\":1,\"4585\":1,\"4588\":1,\"4589\":1,\"4591\":1,\"4592\":1,\"4607\":1,\"4608\":1,\"4609\":2,\"4612\":1,\"4618\":1,\"4638\":1,\"4650\":1,\"4715\":1,\"4782\":1,\"4814\":1,\"5300\":1}}],[\"myid\",{\"1\":{\"1801\":1,\"1802\":2,\"1806\":1,\"4361\":1,\"4362\":2,\"4366\":1}}],[\"mysqldump\",{\"1\":{\"2380\":2,\"4713\":2}}],[\"mysql5\",{\"1\":{\"2305\":1,\"4638\":1}}],[\"mysql\",{\"0\":{\"2233\":1,\"2234\":1,\"4566\":1,\"4567\":1},\"1\":{\"768\":1,\"2237\":2,\"2239\":2,\"2266\":1,\"2274\":1,\"2279\":1,\"2285\":1,\"2296\":1,\"2309\":1,\"2317\":1,\"2331\":1,\"2333\":1,\"2346\":2,\"2362\":1,\"2384\":1,\"2437\":1,\"2480\":1,\"2481\":2,\"2511\":1,\"2521\":1,\"2522\":2,\"2523\":1,\"2677\":1,\"3036\":1,\"3095\":1,\"3756\":1,\"4570\":2,\"4572\":2,\"4599\":1,\"4607\":1,\"4612\":1,\"4618\":1,\"4629\":1,\"4642\":1,\"4650\":1,\"4664\":1,\"4666\":1,\"4679\":2,\"4695\":1,\"4717\":1,\"4770\":1,\"4813\":1,\"4814\":2,\"4844\":1,\"4854\":1,\"4855\":2,\"4856\":1,\"5010\":1,\"5287\":1,\"5346\":1}}],[\"mybatisplus\",{\"1\":{\"3095\":1,\"5346\":1}}],[\"mybatis会利用序列化\",{\"1\":{\"905\":1,\"3893\":1}}],[\"mybatis觉得获取的数据可能会被修改\",{\"1\":{\"905\":1,\"3893\":1}}],[\"mybatis为了加快获取速度\",{\"1\":{\"905\":1,\"3893\":1}}],[\"mybatis认为所有从缓存中获取数据的操作都是只读操作\",{\"1\":{\"905\":1,\"3893\":1}}],[\"mybatis缓存机制\",{\"0\":{\"896\":1,\"3884\":1}}],[\"mybatis分页原理\",{\"0\":{\"880\":1,\"3868\":1}}],[\"mybatis\",{\"0\":{\"720\":1,\"879\":1,\"887\":1,\"3708\":1,\"3867\":1,\"3875\":1},\"1\":{\"889\":1,\"892\":1,\"894\":1,\"895\":1,\"898\":1,\"900\":1,\"907\":1,\"3877\":1,\"3880\":1,\"3882\":1,\"3883\":1,\"3886\":1,\"3888\":1,\"3895\":1}}],[\"mid=2651751537\",{\"1\":{\"3022\":1,\"4247\":1}}],[\"mid=2247483734\",{\"1\":{\"2877\":1,\"4102\":1}}],[\"mid=2247485568\",{\"1\":{\"831\":1,\"3819\":1}}],[\"mid=2247510278\",{\"1\":{\"2772\":1,\"3997\":1}}],[\"milliseconds\",{\"1\":{\"2957\":1,\"4182\":1}}],[\"mirror\",{\"1\":{\"1870\":1,\"3947\":1}}],[\"minio\",{\"1\":{\"3121\":1,\"5372\":1}}],[\"min\",{\"1\":{\"949\":1,\"5096\":1}}],[\"mincapacity\",{\"1\":{\"480\":3,\"484\":4}}],[\"missing\",{\"1\":{\"263\":1}}],[\"misc\",{\"1\":{\"227\":3,\"2796\":1,\"3510\":3,\"4021\":1}}],[\"mongodb\",{\"1\":{\"3095\":1,\"5346\":1}}],[\"monitor\",{\"1\":{\"2919\":1,\"2920\":1,\"2932\":1,\"4144\":1,\"4145\":1,\"4157\":1}}],[\"monitorexit\",{\"1\":{\"2917\":2,\"2918\":1,\"2923\":2,\"2927\":1,\"2930\":2,\"2931\":1,\"4142\":2,\"4143\":1,\"4148\":2,\"4152\":1,\"4155\":2,\"4156\":1}}],[\"monitorenter\",{\"1\":{\"2917\":2,\"2918\":1,\"2919\":1,\"2927\":1,\"2930\":2,\"2931\":1,\"4142\":2,\"4143\":1,\"4144\":1,\"4152\":1,\"4155\":2,\"4156\":1}}],[\"mode\",{\"1\":{\"2424\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2445\":1,\"2447\":1,\"2451\":1,\"4757\":1,\"4772\":1,\"4773\":1,\"4774\":1,\"4775\":1,\"4778\":1,\"4780\":1,\"4784\":1}}],[\"modelandview\",{\"1\":{\"730\":1,\"741\":1,\"742\":1,\"3718\":1,\"3729\":1,\"3730\":1}}],[\"model\",{\"1\":{\"224\":1,\"730\":1,\"743\":1,\"3507\":1,\"3718\":1,\"3731\":1}}],[\"modified\",{\"1\":{\"2183\":1,\"5236\":1}}],[\"modcount++\",{\"1\":{\"480\":1,\"492\":1,\"494\":1}}],[\"modcount\",{\"1\":{\"455\":2,\"484\":1}}],[\"more\",{\"1\":{\"113\":1,\"3401\":1}}],[\"member\",{\"1\":{\"1859\":3,\"3936\":3}}],[\"memberid\",{\"1\":{\"949\":2,\"5096\":2}}],[\"memcached\",{\"1\":{\"2636\":1,\"4969\":1}}],[\"memcache\",{\"1\":{\"1130\":1,\"1298\":1,\"1466\":1,\"1634\":1,\"4512\":1}}],[\"memory\",{\"1\":{\"1046\":1,\"1098\":1,\"1214\":1,\"1266\":1,\"1382\":1,\"1434\":1,\"1550\":1,\"1602\":1,\"2674\":1,\"4428\":1,\"4480\":1,\"5007\":1}}],[\"message\",{\"1\":{\"1044\":1,\"1212\":1,\"1380\":1,\"1548\":1,\"3213\":1,\"4426\":1}}],[\"medium=distribute\",{\"1\":{\"972\":1,\"981\":1,\"5119\":1,\"5128\":1}}],[\"metrics\",{\"1\":{\"856\":1,\"3844\":1}}],[\"meta\",{\"1\":{\"821\":1,\"3809\":1}}],[\"methodproxy\",{\"1\":{\"714\":1,\"3702\":1}}],[\"methodinterceptor\",{\"1\":{\"712\":1,\"713\":1,\"714\":1,\"715\":1,\"3700\":1,\"3701\":1,\"3702\":1,\"3703\":1}}],[\"method\",{\"1\":{\"215\":1,\"255\":1,\"258\":1,\"274\":2,\"320\":1,\"321\":4,\"406\":1,\"411\":3,\"424\":2,\"458\":1,\"706\":4,\"714\":3,\"2914\":1,\"2925\":1,\"2959\":1,\"3498\":1,\"3540\":1,\"3543\":1,\"3551\":2,\"3597\":1,\"3598\":4,\"3694\":4,\"3702\":3,\"4139\":1,\"4150\":1,\"4184\":1}}],[\"mermaid\",{\"0\":{\"89\":1,\"3377\":1}}],[\"mark\",{\"1\":{\"2756\":2,\"3981\":2}}],[\"markdown\",{\"0\":{\"25\":1,\"28\":1,\"30\":1,\"34\":1,\"3313\":1,\"3316\":1,\"3318\":1,\"3322\":1},\"1\":{\"3\":1,\"26\":1,\"27\":1,\"29\":3,\"31\":1,\"35\":3,\"37\":1,\"38\":1,\"40\":1,\"42\":1,\"95\":1,\"115\":1,\"121\":1,\"123\":1,\"3291\":1,\"3314\":1,\"3315\":1,\"3317\":3,\"3319\":1,\"3323\":3,\"3325\":1,\"3326\":1,\"3328\":1,\"3330\":1,\"3383\":1,\"3403\":1,\"3409\":1,\"3411\":1}}],[\"mac\",{\"0\":{\"2152\":1,\"2164\":1,\"5205\":1,\"5217\":1},\"1\":{\"2146\":2,\"2148\":2,\"2150\":1,\"2154\":1,\"2155\":1,\"2156\":1,\"2158\":6,\"2160\":2,\"2161\":2,\"2162\":1,\"2165\":2,\"2166\":1,\"2167\":1,\"2169\":3,\"2170\":5,\"2173\":1,\"2174\":2,\"2175\":2,\"5199\":2,\"5201\":2,\"5203\":1,\"5207\":1,\"5208\":1,\"5209\":1,\"5211\":6,\"5213\":2,\"5214\":2,\"5215\":1,\"5218\":2,\"5219\":1,\"5220\":1,\"5222\":3,\"5223\":5,\"5226\":1,\"5227\":2,\"5228\":2}}],[\"maker\",{\"1\":{\"1870\":1,\"3947\":1}}],[\"master\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"mandatory\",{\"1\":{\"778\":1,\"3766\":1}}],[\"maximum\",{\"1\":{\"2959\":2,\"4184\":2}}],[\"maximumpoolsize\",{\"1\":{\"2959\":8,\"2962\":1,\"4184\":8,\"4187\":1}}],[\"maxintset\",{\"1\":{\"2615\":1,\"4948\":1}}],[\"max\",{\"1\":{\"484\":1,\"2607\":2,\"2622\":2,\"2981\":1,\"2982\":1,\"2983\":1,\"3006\":1,\"3007\":1,\"3008\":1,\"4206\":1,\"4207\":1,\"4208\":1,\"4231\":1,\"4232\":1,\"4233\":1,\"4940\":2,\"4955\":2}}],[\"match\",{\"1\":{\"2183\":2,\"5236\":2}}],[\"math\",{\"1\":{\"484\":1,\"949\":1,\"5096\":1}}],[\"matter\",{\"1\":{\"149\":1,\"153\":1,\"3437\":1}}],[\"mapper\",{\"1\":{\"900\":1,\"3888\":1}}],[\"map常见面试题\",{\"0\":{\"517\":1}}],[\"maptype\",{\"1\":{\"406\":3,\"411\":6,\"424\":9}}],[\"map>\",{\"1\":{\"305\":1,\"3582\":1}}],[\"map\",{\"0\":{\"383\":1,\"3606\":1},\"1\":{\"286\":2,\"289\":2,\"291\":4,\"406\":5,\"411\":9,\"424\":23,\"949\":1,\"2944\":3,\"3563\":2,\"3566\":2,\"3568\":4,\"4169\":3,\"5096\":1}}],[\"map<string\",{\"1\":{\"286\":1,\"289\":1,\"291\":2,\"297\":2,\"305\":1,\"406\":1,\"411\":3,\"424\":1,\"949\":5,\"3563\":1,\"3566\":1,\"3568\":2,\"3574\":2,\"3582\":1,\"5096\":5}}],[\"mainreactor\",{\"1\":{\"1176\":1,\"1177\":1,\"1344\":1,\"1345\":1,\"1512\":1,\"1513\":1,\"1680\":1,\"1681\":1,\"4558\":1,\"4559\":1}}],[\"main\",{\"1\":{\"263\":1,\"274\":1,\"793\":1,\"821\":1,\"2957\":1,\"3551\":1,\"3781\":1,\"3809\":1,\"4182\":1}}],[\"mss\",{\"0\":{\"2100\":1},\"1\":{\"1985\":1,\"2072\":1}}],[\"ms\",{\"1\":{\"116\":1,\"630\":2,\"3404\":1}}],[\"mrhope\",{\"1\":{\"81\":2,\"3369\":2}}],[\"mr\",{\"1\":{\"81\":1,\"103\":1,\"3369\":1,\"3391\":1}}],[\"md5实际上既不是对称算法\",{\"1\":{\"3281\":1}}],[\"md5不是加密算法\",{\"1\":{\"3281\":1}}],[\"md5是对称加密还是非对称加密\",{\"1\":{\"3274\":1}}],[\"md5是是对称加密还是非对称加密\",{\"0\":{\"3272\":1}}],[\"md5是不可逆的\",{\"1\":{\"3217\":1}}],[\"md5可以用来生成数字签名\",{\"1\":{\"3271\":1}}],[\"md5可以用来对密码加密\",{\"1\":{\"3224\":1}}],[\"md5可以将任意长度的输入转化为128位长度的输出\",{\"1\":{\"3216\":1}}],[\"md5的对照表\",{\"1\":{\"3240\":1}}],[\"md5的应用场景\",{\"0\":{\"3222\":1}}],[\"md5的问题\",{\"0\":{\"3220\":1}}],[\"md5的特点\",{\"0\":{\"3215\":1}}],[\"md5值就会有巨大的变动\",{\"1\":{\"3218\":1}}],[\"md5\",{\"0\":{\"3211\":1},\"1\":{\"3213\":1,\"3242\":1}}],[\"mdl\",{\"1\":{\"2386\":1,\"2400\":1,\"2401\":2,\"2402\":1,\"2403\":1,\"2404\":1,\"2405\":3,\"2406\":3,\"2407\":1,\"2408\":2,\"2410\":1,\"2412\":2,\"2414\":1,\"2415\":2,\"2416\":1,\"4719\":1,\"4733\":1,\"4734\":2,\"4735\":1,\"4736\":1,\"4737\":1,\"4738\":3,\"4739\":3,\"4740\":1,\"4741\":2,\"4743\":1,\"4745\":2,\"4747\":1,\"4748\":2,\"4749\":1}}],[\"md\",{\"1\":{\"40\":1,\"3328\":1}}],[\"pool\",{\"1\":{\"2959\":2,\"4184\":2}}],[\"poll\",{\"1\":{\"450\":1,\"605\":1,\"1052\":1,\"1053\":1,\"1055\":1,\"1056\":2,\"1057\":1,\"1072\":1,\"1074\":1,\"1220\":1,\"1221\":1,\"1223\":1,\"1224\":2,\"1225\":1,\"1240\":1,\"1242\":1,\"1388\":1,\"1389\":1,\"1391\":1,\"1392\":2,\"1393\":1,\"1408\":1,\"1410\":1,\"1556\":1,\"1557\":1,\"1559\":1,\"1560\":2,\"1561\":1,\"1576\":1,\"1578\":1,\"4434\":1,\"4435\":1,\"4437\":1,\"4438\":2,\"4439\":1,\"4454\":1,\"4456\":1}}],[\"ptr\",{\"1\":{\"2531\":1,\"2535\":1,\"4864\":1,\"4868\":1}}],[\"ps\",{\"1\":{\"2301\":1,\"4634\":1}}],[\"pipes\",{\"1\":{\"1041\":1,\"1042\":1,\"1209\":1,\"1210\":1,\"1377\":1,\"1378\":1,\"1545\":1,\"1546\":1,\"4423\":1,\"4424\":1}}],[\"p\",{\"1\":{\"1038\":1,\"1206\":1,\"1374\":1,\"1542\":1,\"1832\":2,\"1833\":1,\"1837\":1,\"2820\":1,\"3288\":1,\"4045\":1,\"4392\":2,\"4393\":1,\"4397\":1,\"4420\":1}}],[\"pc\",{\"1\":{\"972\":1,\"981\":2,\"5119\":1,\"5128\":2}}],[\"png\",{\"1\":{\"947\":1,\"951\":1,\"958\":1,\"960\":1,\"970\":1,\"1015\":1,\"5094\":1,\"5098\":1,\"5105\":1,\"5107\":1,\"5117\":1}}],[\"plus作为持久层提升开发效率\",{\"1\":{\"3102\":1,\"5353\":1}}],[\"plugin\",{\"1\":{\"40\":1,\"3328\":1}}],[\"platformtransactionmanager\",{\"1\":{\"762\":1,\"3750\":1}}],[\"performs\",{\"1\":{\"458\":1}}],[\"perfcounter\",{\"1\":{\"227\":3,\"3510\":3}}],[\"peek\",{\"1\":{\"450\":1,\"605\":1}}],[\"purge\",{\"1\":{\"2538\":1,\"2550\":1,\"4871\":1,\"4883\":1}}],[\"pushdown\",{\"1\":{\"2333\":1,\"4666\":1}}],[\"push\",{\"1\":{\"573\":2,\"2189\":1,\"5242\":1}}],[\"putifabsent\",{\"1\":{\"940\":1,\"5087\":1}}],[\"putfields\",{\"1\":{\"458\":1}}],[\"putfield\",{\"1\":{\"458\":1}}],[\"put\",{\"1\":{\"286\":1,\"289\":1,\"406\":1,\"424\":13,\"458\":3,\"949\":1,\"3563\":1,\"3566\":1,\"5096\":1}}],[\"public\",{\"1\":{\"124\":1,\"255\":1,\"258\":1,\"261\":1,\"263\":1,\"272\":1,\"274\":1,\"291\":1,\"297\":1,\"480\":2,\"482\":1,\"484\":1,\"490\":1,\"492\":1,\"494\":1,\"673\":2,\"704\":1,\"706\":2,\"714\":2,\"793\":2,\"835\":3,\"836\":3,\"940\":1,\"949\":1,\"1011\":1,\"2745\":1,\"2748\":1,\"2914\":2,\"2925\":2,\"2941\":1,\"2944\":1,\"2957\":2,\"2959\":1,\"3412\":1,\"3540\":1,\"3543\":1,\"3546\":1,\"3549\":1,\"3551\":1,\"3568\":1,\"3574\":1,\"3661\":2,\"3692\":1,\"3694\":2,\"3702\":2,\"3781\":2,\"3823\":3,\"3824\":3,\"3970\":1,\"3973\":1,\"4139\":2,\"4150\":2,\"4166\":1,\"4169\":1,\"4182\":2,\"4184\":1,\"5087\":1,\"5096\":1}}],[\"passw0rd\",{\"1\":{\"3247\":1}}],[\"password=e10adc3949ba59abbe56e057f20f883e\",{\"1\":{\"3232\":1}}],[\"password=123456\",{\"1\":{\"3226\":1}}],[\"password\",{\"1\":{\"3228\":1,\"3234\":1}}],[\"package\",{\"1\":{\"2957\":1,\"4182\":1}}],[\"path\",{\"1\":{\"2130\":1,\"2223\":1,\"5183\":1}}],[\"pattern\",{\"1\":{\"667\":1,\"3655\":1}}],[\"paxos\",{\"1\":{\"1785\":1,\"1787\":1,\"1794\":1,\"4345\":1,\"4347\":1,\"4354\":1}}],[\"parkandcheckinterrupt\",{\"1\":{\"2840\":1,\"4065\":1}}],[\"partial\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"partitionassignor接口用于用户定义实现分区分配算法\",{\"1\":{\"944\":1,\"5091\":1}}],[\"partitionspertopic\",{\"1\":{\"949\":2,\"5096\":2}}],[\"partitionsfortopic\",{\"1\":{\"940\":1,\"5087\":1}}],[\"partitions\",{\"1\":{\"940\":3,\"949\":3,\"5087\":3,\"5096\":3}}],[\"partition\",{\"1\":{\"940\":4,\"1776\":1,\"1822\":1,\"1827\":1,\"1832\":1,\"3115\":2,\"4336\":1,\"4382\":1,\"4387\":1,\"4392\":1,\"5087\":4,\"5366\":2}}],[\"part\",{\"1\":{\"940\":2,\"5087\":2}}],[\"parator对象\",{\"1\":{\"367\":1,\"436\":1}}],[\"parameters\",{\"1\":{\"2959\":1,\"4184\":1}}],[\"paramvalues\",{\"1\":{\"315\":1,\"3592\":1}}],[\"paramtypes\",{\"1\":{\"315\":1,\"321\":2,\"323\":2,\"3592\":1,\"3598\":2,\"3600\":2}}],[\"param\",{\"1\":{\"291\":3,\"836\":2,\"2959\":7,\"3568\":3,\"3824\":2,\"4184\":7}}],[\"parent主要有如下作用\",{\"1\":{\"863\":1,\"3851\":1}}],[\"parent有什么作用\",{\"1\":{\"862\":1,\"3850\":1}}],[\"parent\",{\"1\":{\"227\":2,\"863\":1,\"3510\":2,\"3851\":1}}],[\"parents\",{\"1\":{\"224\":1,\"3507\":1}}],[\"page45理解\",{\"1\":{\"940\":1,\"5087\":1}}],[\"page\",{\"0\":{\"0\":1},\"1\":{\"352\":1}}],[\"pre\",{\"1\":{\"2835\":1,\"2840\":1,\"4060\":1,\"4065\":1}}],[\"prev\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"prefix\",{\"1\":{\"2304\":1,\"4637\":1}}],[\"prehandler\",{\"1\":{\"735\":1,\"3723\":1}}],[\"preparation\",{\"1\":{\"188\":1,\"3471\":1}}],[\"protocol\",{\"1\":{\"2146\":1,\"5199\":1}}],[\"protected\",{\"1\":{\"212\":1,\"213\":1,\"227\":1,\"3495\":1,\"3496\":1,\"3510\":1}}],[\"processor三种通道\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"processor\",{\"1\":{\"1162\":1,\"1163\":1,\"1330\":1,\"1331\":1,\"1498\":1,\"1499\":1,\"1666\":1,\"1667\":1,\"4544\":1,\"4545\":1}}],[\"producerid\",{\"1\":{\"979\":1,\"5126\":1}}],[\"project\",{\"0\":{\"5474\":1},\"1\":{\"821\":1,\"3809\":1}}],[\"proposal\",{\"1\":{\"1797\":1,\"4357\":1}}],[\"propagation\",{\"1\":{\"776\":1,\"777\":1,\"778\":1,\"780\":1,\"781\":1,\"782\":1,\"784\":2,\"3764\":1,\"3765\":1,\"3766\":1,\"3768\":1,\"3769\":1,\"3770\":1,\"3772\":2}}],[\"properties中添加context\",{\"1\":{\"851\":1,\"3839\":1}}],[\"properties\",{\"1\":{\"817\":1,\"3805\":1}}],[\"proper\",{\"1\":{\"455\":2}}],[\"programming\",{\"1\":{\"722\":1,\"3710\":1}}],[\"proxy代理实例\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"proxy\",{\"1\":{\"702\":1,\"703\":1,\"706\":2,\"714\":2,\"723\":2,\"3690\":1,\"3691\":1,\"3694\":2,\"3702\":2,\"3711\":2}}],[\"principles\",{\"1\":{\"825\":1,\"3813\":1}}],[\"printstacktrace\",{\"1\":{\"272\":1,\"274\":1,\"836\":1,\"3549\":1,\"3551\":1,\"3824\":1}}],[\"println\",{\"1\":{\"263\":1,\"269\":2,\"406\":2,\"411\":3,\"424\":8,\"630\":2,\"2914\":1,\"2925\":1,\"4139\":1,\"4150\":1}}],[\"private\",{\"1\":{\"455\":1,\"458\":1,\"480\":1,\"484\":2,\"673\":2,\"793\":2,\"835\":1,\"940\":1,\"3661\":2,\"3781\":2,\"3823\":1,\"5087\":1}}],[\"priorityqueue实现了队列接口queue\",{\"1\":{\"355\":1}}],[\"priorityqueue\",{\"0\":{\"354\":1}}],[\"主内存\",{\"1\":{\"2854\":1,\"4079\":1}}],[\"主库的自增值是什么\",{\"1\":{\"2446\":1,\"4779\":1}}],[\"主从复制\",{\"0\":{\"2688\":1,\"5021\":1}}],[\"主从复制的场景\",{\"1\":{\"2445\":1,\"4778\":1}}],[\"主从结构\",{\"1\":{\"2641\":1,\"4974\":1}}],[\"主从机房同步有什么问题呢\",{\"0\":{\"1871\":1,\"3948\":1}}],[\"主键一般都是不可被修改的\",{\"1\":{\"2315\":1,\"4648\":1}}],[\"主键索引\",{\"0\":{\"2293\":1,\"4626\":1},\"1\":{\"2287\":1,\"4620\":1}}],[\"主机\",{\"1\":{\"2155\":1,\"2156\":1,\"2157\":1,\"2159\":1,\"2160\":3,\"2162\":1,\"2166\":1,\"2167\":1,\"2169\":1,\"2170\":2,\"5208\":1,\"5209\":1,\"5210\":1,\"5212\":1,\"5213\":3,\"5215\":1,\"5219\":1,\"5220\":1,\"5222\":1,\"5223\":2}}],[\"主线程\",{\"1\":{\"2646\":1,\"2647\":1,\"4979\":1,\"4980\":1}}],[\"主线程只需要把新连接传给子线程\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4564\":1}}],[\"主线程只负责接收新连接\",{\"1\":{\"1181\":1,\"1349\":1,\"1517\":1,\"1685\":1,\"4563\":1}}],[\"主线程和子线程的交互很简单\",{\"1\":{\"1182\":1,\"1350\":1,\"1518\":1,\"1686\":1,\"4564\":1}}],[\"主线程和子线程分工明确\",{\"1\":{\"1181\":1,\"1349\":1,\"1517\":1,\"1685\":1,\"4563\":1}}],[\"主线程中的\",{\"1\":{\"1176\":1,\"1344\":1,\"1512\":1,\"1680\":1,\"4558\":1}}],[\"主题了解吗\",{\"1\":{\"3037\":1,\"5288\":1}}],[\"主题包含了一个自定义徽章可以使用\",{\"1\":{\"125\":1,\"3413\":1}}],[\"主题扩展了更多\",{\"1\":{\"40\":1,\"3328\":1}}],[\"主题扩展\",{\"0\":{\"39\":1,\"3327\":1}}],[\"主要包括两个操作\",{\"1\":{\"2794\":1,\"4019\":1}}],[\"主要有两个作用\",{\"1\":{\"2546\":1,\"4879\":1}}],[\"主要有以下字段\",{\"1\":{\"2539\":1,\"4872\":1}}],[\"主要是通过继承方式使用\",{\"1\":{\"2822\":1,\"4047\":1}}],[\"主要是单线程事件循环和\",{\"1\":{\"2587\":1,\"4920\":1}}],[\"主要是因为\",{\"1\":{\"2266\":1,\"4599\":1}}],[\"主要是为了解决http\",{\"1\":{\"1894\":1,\"1909\":1,\"1924\":1,\"1937\":1,\"1950\":1,\"1965\":1,\"5156\":1,\"5179\":1}}],[\"主要的流程解释下\",{\"1\":{\"1846\":1,\"3923\":1}}],[\"主要的方法有两种\",{\"1\":{\"1036\":1,\"1204\":1,\"1372\":1,\"1540\":1,\"4418\":1}}],[\"主要依赖\",{\"1\":{\"1779\":1,\"4339\":1}}],[\"主要为\",{\"1\":{\"1776\":1,\"4336\":1}}],[\"主要因为要考虑子进程\",{\"1\":{\"1168\":1,\"1336\":1,\"1504\":1,\"1672\":1,\"4550\":1}}],[\"主要功能如下\",{\"1\":{\"873\":1,\"3861\":1}}],[\"主要功能与配置演示\",{\"0\":{\"1\":1,\"3289\":1}}],[\"主要⽬的是解耦合服务提供者和使⽤者\",{\"1\":{\"688\":1,\"3676\":1}}],[\"主要用来提高\",{\"1\":{\"2641\":1,\"4974\":1}}],[\"主要用来加载\",{\"1\":{\"206\":1,\"3489\":1}}],[\"主要用于spring\",{\"1\":{\"839\":1,\"3827\":1}}],[\"主要用在迭代器里\",{\"1\":{\"464\":1}}],[\"主要区别在于因为实现方式的不同\",{\"1\":{\"444\":1}}],[\"主要负责加载\",{\"1\":{\"207\":1,\"3490\":1}}],[\"主要从\",{\"1\":{\"26\":1,\"3314\":1}}],[\"中带上这个\",{\"1\":{\"3131\":1,\"5382\":1}}],[\"中国邮政储蓄银行\",{\"0\":{\"3070\":1,\"5321\":1}}],[\"中午休息一小时\",{\"1\":{\"3068\":1,\"5319\":1}}],[\"中科全安\",{\"0\":{\"3025\":1,\"5276\":1}}],[\"中强制线程池不允许使用\",{\"1\":{\"3004\":1,\"4229\":1}}],[\"中自带的threadlocal类正是为了解决这样的问题\",{\"1\":{\"2937\":1,\"4162\":1}}],[\"中实现的\",{\"1\":{\"2746\":1,\"3971\":1}}],[\"中断\",{\"1\":{\"2744\":1,\"3969\":1}}],[\"中缓存大量无效的\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"中去并设置过期时间\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"中任意选择数据淘汰\",{\"1\":{\"2681\":1,\"2683\":1,\"5014\":1,\"5016\":1}}],[\"中挑选最不经常使用的数据淘汰\",{\"1\":{\"2686\":1,\"5019\":1}}],[\"中挑选最近最少使用的数据淘汰\",{\"1\":{\"2679\":1,\"5012\":1}}],[\"中挑选将要过期的数据淘汰\",{\"1\":{\"2680\":1,\"5013\":1}}],[\"中只存\",{\"1\":{\"2677\":1,\"5010\":1}}],[\"中最小的事务\",{\"1\":{\"2541\":1,\"4874\":1}}],[\"中会有\",{\"1\":{\"3134\":1,\"5385\":1}}],[\"中会发生数据不一致的问题\",{\"1\":{\"2445\":1,\"4778\":1}}],[\"中会维护队列\",{\"1\":{\"1810\":1,\"4370\":1}}],[\"中长链接的升级版本\",{\"1\":{\"2186\":1,\"5239\":1}}],[\"中主要使用\",{\"1\":{\"2183\":1,\"5236\":1}}],[\"中新加入了大量的状态码\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"中间件\",{\"1\":{\"1869\":1,\"3946\":1}}],[\"中生成后需要\",{\"1\":{\"1797\":1,\"4357\":1}}],[\"中还定义了一个\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"中更新了\",{\"1\":{\"1793\":1,\"4353\":1}}],[\"中三个主要的角色\",{\"1\":{\"1787\":1,\"4347\":1}}],[\"中下载镜像\",{\"1\":{\"1701\":1,\"4261\":1}}],[\"中苏醒\",{\"1\":{\"1066\":1,\"1234\":1,\"1402\":1,\"1570\":1,\"4448\":1}}],[\"中苏醒一次\",{\"1\":{\"1065\":1,\"1233\":1,\"1401\":1,\"1569\":1,\"4447\":1}}],[\"中传递参数也相同即最终执行\",{\"1\":{\"900\":1,\"3888\":1}}],[\"中两次执行相同的\",{\"1\":{\"898\":1,\"3886\":1}}],[\"中代码处理的流程\",{\"1\":{\"801\":1,\"3789\":1}}],[\"中如果像我们例子里那么处理\",{\"1\":{\"800\":1,\"3788\":1}}],[\"中了\",{\"1\":{\"795\":1,\"3783\":1}}],[\"中也是用到了适配器模式适配\",{\"1\":{\"752\":1,\"3740\":1}}],[\"中增加创建产品的接⼝\",{\"1\":{\"684\":1,\"3672\":1}}],[\"中介者\",{\"1\":{\"669\":1,\"3657\":1}}],[\"中定义的方法\",{\"1\":{\"606\":1}}],[\"中有很多方法\",{\"1\":{\"606\":1}}],[\"中是正确的\",{\"1\":{\"572\":1}}],[\"中查询\",{\"1\":{\"563\":1}}],[\"中内置了三个重要的\",{\"1\":{\"205\":1,\"3488\":1}}],[\"中\",{\"1\":{\"200\":1,\"203\":1,\"226\":1,\"231\":1,\"740\":1,\"749\":1,\"1021\":1,\"1024\":2,\"1092\":1,\"1189\":1,\"1192\":2,\"1260\":1,\"1357\":1,\"1360\":2,\"1428\":1,\"1525\":1,\"1528\":2,\"1596\":1,\"1779\":1,\"2274\":1,\"2309\":1,\"2624\":1,\"2632\":1,\"2651\":1,\"2795\":1,\"2920\":1,\"2945\":1,\"3134\":1,\"3483\":1,\"3486\":1,\"3509\":1,\"3514\":1,\"3728\":1,\"3737\":1,\"4020\":1,\"4145\":1,\"4170\":1,\"4339\":1,\"4403\":1,\"4406\":2,\"4474\":1,\"4607\":1,\"4642\":1,\"4957\":1,\"4965\":1,\"4984\":1,\"5385\":1}}],[\"中设置\",{\"1\":{\"149\":1,\"153\":1,\"817\":1,\"3437\":1,\"3805\":1}}],[\"中设置页面信息\",{\"1\":{\"115\":1,\"3403\":1}}],[\"中使用\",{\"1\":{\"42\":1,\"3330\":1}}],[\"中的监视器是什么\",{\"1\":{\"3042\":1,\"5293\":1}}],[\"中的实际值相同时\",{\"1\":{\"2792\":1,\"4017\":1}}],[\"中的锁是非公平的\",{\"1\":{\"2741\":1,\"3966\":1}}],[\"中的数据会被频繁被删除\",{\"1\":{\"3110\":1,\"5361\":1}}],[\"中的数据都是热点数据\",{\"1\":{\"2677\":1,\"5010\":1}}],[\"中的数据的命令\",{\"1\":{\"2651\":1,\"4984\":1}}],[\"中的历史版本\",{\"1\":{\"2531\":1,\"4864\":1}}],[\"中的主键索引就属于聚簇索引\",{\"1\":{\"2284\":1,\"2308\":1,\"4617\":1,\"4641\":1}}],[\"中的域名都是用句点来分隔的\",{\"1\":{\"2201\":1,\"5254\":1}}],[\"中的三个角色\",{\"0\":{\"1786\":1,\"4346\":1}}],[\"中的事物传播行为\",{\"0\":{\"773\":1,\"3761\":1}}],[\"中的事务隔离级别\",{\"0\":{\"766\":1,\"3754\":1}}],[\"中的事务的理解\",{\"0\":{\"754\":1,\"3742\":1}}],[\"中的模型数据\",{\"1\":{\"736\":1,\"3724\":1}}],[\"中的\",{\"0\":{\"567\":1},\"1\":{\"38\":1,\"568\":1,\"575\":1,\"679\":1,\"691\":1,\"697\":1,\"711\":1,\"715\":1,\"748\":1,\"898\":1,\"1030\":1,\"1033\":1,\"1198\":1,\"1201\":1,\"1366\":1,\"1369\":1,\"1534\":1,\"1537\":1,\"1799\":1,\"1808\":1,\"2534\":1,\"2886\":1,\"2895\":1,\"2901\":1,\"3326\":1,\"3667\":1,\"3679\":1,\"3685\":1,\"3699\":1,\"3703\":1,\"3736\":1,\"3886\":1,\"4111\":1,\"4120\":1,\"4126\":1,\"4359\":1,\"4368\":1,\"4412\":1,\"4415\":1,\"4867\":1}}],[\"中很重要的一个概念\",{\"1\":{\"33\":1,\"3321\":1}}],[\"请注意\",{\"1\":{\"1807\":1,\"2130\":1,\"2223\":1,\"4367\":1,\"5183\":1}}],[\"请求服务端并携带\",{\"1\":{\"3135\":1,\"5386\":1}}],[\"请求数据库写数据到缓存之前\",{\"1\":{\"2714\":1,\"5047\":1}}],[\"请求与当前资源的规定冲突\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"请求的\",{\"1\":{\"2710\":1,\"2716\":1,\"2717\":1,\"5043\":1,\"5049\":1,\"5050\":1}}],[\"请求的结果\",{\"1\":{\"2178\":1,\"5231\":1}}],[\"请求的提案\",{\"1\":{\"1813\":1,\"4373\":1}}],[\"请求\",{\"1\":{\"1766\":1,\"1813\":1,\"2134\":1,\"2193\":1,\"2213\":1,\"2227\":1,\"4326\":1,\"4373\":1,\"5187\":1,\"5246\":1,\"5266\":1}}],[\"请求合并\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"请求缓存\",{\"1\":{\"1743\":1,\"4303\":1}}],[\"请求被\",{\"1\":{\"733\":1,\"3721\":1}}],[\"请使用绝对链接\",{\"1\":{\"124\":1,\"3412\":1}}],[\"请阅读\",{\"1\":{\"38\":1,\"3326\":1}}],[\"请先阅读\",{\"1\":{\"29\":1,\"3317\":1}}],[\"对称性加密通常在消息发送方需要加密大量数据时使用\",{\"1\":{\"3284\":1}}],[\"对称密码算法又叫传统密码算法\",{\"1\":{\"3277\":1}}],[\"对称加密的缺点\",{\"1\":{\"3285\":1}}],[\"对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性\",{\"1\":{\"3284\":1}}],[\"对称加密优点\",{\"1\":{\"3284\":1}}],[\"对称加密和非对称加密有哪些优缺点\",{\"1\":{\"3274\":1}}],[\"对称加密\",{\"1\":{\"3274\":1}}],[\"对连接后的值进行散列\",{\"1\":{\"3262\":1,\"3268\":1}}],[\"对密码加密\",{\"0\":{\"3223\":1}}],[\"对安全性要求较高的场合\",{\"1\":{\"3221\":1}}],[\"对原文做一丁点儿改动\",{\"1\":{\"3218\":1}}],[\"对原sql通过limit来进行分页的效果\",{\"1\":{\"885\":1,\"3873\":1}}],[\"对冷数据\",{\"1\":{\"3207\":1,\"5458\":1}}],[\"对工作地点的看法\",{\"1\":{\"3073\":1,\"3086\":1,\"5324\":1,\"5337\":1}}],[\"对未来工作的看法\",{\"1\":{\"3072\":1,\"5323\":1}}],[\"对邮储的看法\",{\"1\":{\"3072\":1,\"5323\":1}}],[\"对给定元素再次进行相同的哈希计算\",{\"1\":{\"2706\":1,\"5039\":1}}],[\"对数据库造成了巨大的压力\",{\"1\":{\"2692\":1,\"2710\":1,\"2720\":1,\"5025\":1,\"5043\":1,\"5053\":1}}],[\"对数据的修改就是永久的\",{\"1\":{\"2486\":1,\"4819\":1}}],[\"对数据的修改效果对于引用类型和值类型会不同\",{\"1\":{\"268\":1}}],[\"对数据的增删改操作\",{\"1\":{\"2368\":1,\"4701\":1}}],[\"对其进行强制硬盘同步\",{\"1\":{\"2658\":1,\"4991\":1}}],[\"对其他事务不可见\",{\"1\":{\"2550\":1,\"4883\":1}}],[\"对其他并发事务是隔离的\",{\"1\":{\"2485\":1,\"4818\":1}}],[\"对读取的记录加独占锁\",{\"1\":{\"2451\":1,\"4784\":1}}],[\"对读取的记录加共享锁\",{\"1\":{\"2451\":1,\"4784\":1}}],[\"对一张表做结构变更操作的时候\",{\"1\":{\"2403\":1,\"4736\":1}}],[\"对一张表进行\",{\"1\":{\"2402\":1,\"4735\":1}}],[\"对一个记录频繁写\",{\"1\":{\"1844\":1,\"3921\":1}}],[\"对表结构的更改操作\",{\"1\":{\"2369\":1,\"4702\":1}}],[\"对每一个可以用到的索引来进行评估\",{\"1\":{\"2346\":1,\"4679\":1}}],[\"对索引中包含的字段先做判断\",{\"1\":{\"2333\":1,\"4666\":1}}],[\"对排序查找和范围查找优化\",{\"1\":{\"2312\":1,\"4645\":1}}],[\"对文本的内容进行分词\",{\"1\":{\"2282\":1,\"2292\":1,\"4615\":1,\"4625\":1}}],[\"对应的值修改为\",{\"1\":{\"2792\":1,\"4017\":1}}],[\"对应的是\",{\"1\":{\"2710\":1,\"2717\":1,\"5043\":1,\"5050\":1}}],[\"对应的\",{\"1\":{\"2265\":1,\"4598\":1}}],[\"对应的pojo一定要实现serializable\",{\"1\":{\"905\":1,\"3893\":1}}],[\"对加\",{\"1\":{\"1768\":1,\"4328\":1}}],[\"对团队挑战大\",{\"1\":{\"1741\":1,\"4301\":1}}],[\"对进程进行封装隔离\",{\"1\":{\"1692\":1,\"4252\":1}}],[\"对比roundrobinassignor\",{\"1\":{\"967\":1,\"5114\":1}}],[\"对消费者进行排序\",{\"1\":{\"949\":1,\"5096\":1}}],[\"对循环依赖的解决也就不会那么陌生了\",{\"1\":{\"813\":1,\"3801\":1}}],[\"对同一字段的多次读取结果都是一致的\",{\"1\":{\"771\":1,\"3759\":1}}],[\"对请求消息进行数据格式化\",{\"1\":{\"739\":1,\"3727\":1}}],[\"对请求消息进行数据转换\",{\"1\":{\"738\":1,\"3726\":1}}],[\"对请求\",{\"1\":{\"734\":1,\"3722\":1}}],[\"对外提供⼀个公共的⽅法获取实例\",{\"1\":{\"673\":1,\"3661\":1}}],[\"对外提供⼀个静态公有方法获取实例\",{\"1\":{\"671\":1,\"3659\":1}}],[\"对类进行link操作\",{\"1\":{\"227\":1,\"3510\":1}}],[\"对象存储可提供更好的数据保护\",{\"1\":{\"3154\":1,\"5405\":1}}],[\"对象调用set方法设置的值\",{\"1\":{\"2948\":1,\"4173\":1}}],[\"对象调用newinstance\",{\"1\":{\"310\":1,\"3587\":1}}],[\"对象为\",{\"1\":{\"2946\":1,\"4171\":1}}],[\"对象锁的的拥有者线程才可以执行\",{\"1\":{\"2923\":1,\"4148\":1}}],[\"对象锁或类锁内部有计数器\",{\"1\":{\"2885\":1,\"4110\":1}}],[\"对象监视器\",{\"1\":{\"2919\":1,\"4144\":1}}],[\"对象id\",{\"1\":{\"2626\":1,\"4959\":1}}],[\"对象会调用当前连接对应的\",{\"1\":{\"1178\":1,\"1346\":1,\"1514\":1,\"1682\":1,\"4560\":1}}],[\"对象会通过\",{\"1\":{\"1144\":1,\"1159\":1,\"1312\":1,\"1327\":1,\"1480\":1,\"1495\":1,\"1648\":1,\"1663\":1,\"4526\":1,\"4541\":1}}],[\"对象分配的连接加入\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4559\":1}}],[\"对象将\",{\"1\":{\"1177\":1,\"1345\":1,\"1513\":1,\"1681\":1,\"4559\":1}}],[\"对象中的\",{\"1\":{\"1176\":1,\"1344\":1,\"1512\":1,\"1680\":1,\"4558\":1}}],[\"对象中依赖\",{\"1\":{\"805\":1,\"3793\":1}}],[\"对象承担所有事件的监听和响应\",{\"1\":{\"1170\":1,\"1338\":1,\"1506\":1,\"1674\":1,\"4552\":1}}],[\"对象就进行业务处理\",{\"1\":{\"1163\":1,\"1331\":1,\"1499\":1,\"1667\":1,\"4545\":1}}],[\"对象不再负责业务处理\",{\"1\":{\"1162\":1,\"1330\":1,\"1498\":1,\"1666\":1,\"4544\":1}}],[\"对象在业务处理时\",{\"1\":{\"1150\":1,\"1318\":1,\"1486\":1,\"1654\":1,\"4532\":1}}],[\"对象来进行响应\",{\"1\":{\"1145\":1,\"1160\":1,\"1178\":1,\"1313\":1,\"1328\":1,\"1346\":1,\"1481\":1,\"1496\":1,\"1514\":1,\"1649\":1,\"1664\":1,\"1682\":1,\"4527\":1,\"4542\":1,\"4560\":1}}],[\"对象来处理后续的响应事件\",{\"1\":{\"1144\":1,\"1159\":1,\"1312\":1,\"1327\":1,\"1480\":1,\"1495\":1,\"1648\":1,\"1663\":1,\"4526\":1,\"4541\":1}}],[\"对象进行业务处理\",{\"1\":{\"1162\":1,\"1330\":1,\"1498\":1,\"1666\":1,\"4544\":1}}],[\"对象进行处理\",{\"1\":{\"1144\":1,\"1159\":1,\"1312\":1,\"1327\":1,\"1480\":1,\"1495\":1,\"1648\":1,\"1663\":1,\"4526\":1,\"4541\":1}}],[\"对象进行分页\",{\"1\":{\"889\":1,\"3877\":1}}],[\"对象还是\",{\"1\":{\"1143\":1,\"1158\":1,\"1311\":1,\"1326\":1,\"1479\":1,\"1494\":1,\"1647\":1,\"1662\":1,\"4525\":1,\"4540\":1}}],[\"对象通过\",{\"1\":{\"1143\":1,\"1146\":1,\"1158\":1,\"1162\":1,\"1176\":1,\"1179\":1,\"1311\":1,\"1314\":1,\"1326\":1,\"1330\":1,\"1344\":1,\"1347\":1,\"1479\":1,\"1482\":1,\"1494\":1,\"1498\":1,\"1512\":1,\"1515\":1,\"1647\":1,\"1650\":1,\"1662\":1,\"1666\":1,\"1680\":1,\"1683\":1,\"4525\":1,\"4528\":1,\"4540\":1,\"4544\":1,\"4558\":1,\"4561\":1}}],[\"对象里的\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4523\":1}}],[\"对象的话\",{\"1\":{\"2948\":1,\"4173\":1}}],[\"对象的作用是处理业务\",{\"1\":{\"1140\":1,\"1308\":1,\"1476\":1,\"1644\":1,\"4522\":1}}],[\"对象的作用是获取连接\",{\"1\":{\"1139\":1,\"1307\":1,\"1475\":1,\"1643\":1,\"4521\":1}}],[\"对象的作用是监听和分发事件\",{\"1\":{\"1138\":1,\"1306\":1,\"1474\":1,\"1642\":1,\"4520\":1}}],[\"对象的形式返回\",{\"1\":{\"734\":1,\"3722\":1}}],[\"对象保存到缓存中\",{\"1\":{\"814\":1,\"3802\":1}}],[\"对象对应的拦截器\",{\"1\":{\"734\":1,\"3722\":1}}],[\"对象以及\",{\"1\":{\"734\":1,\"3722\":1}}],[\"对象\",{\"1\":{\"200\":1,\"300\":1,\"302\":1,\"304\":1,\"306\":1,\"448\":1,\"679\":1,\"741\":1,\"746\":1,\"898\":1,\"1143\":1,\"1158\":1,\"1163\":1,\"1311\":1,\"1326\":1,\"1331\":1,\"1479\":1,\"1494\":1,\"1499\":1,\"1647\":1,\"1662\":1,\"1667\":1,\"2742\":1,\"3483\":1,\"3577\":1,\"3579\":1,\"3581\":1,\"3583\":1,\"3667\":1,\"3729\":1,\"3734\":1,\"3886\":1,\"3967\":1,\"4525\":1,\"4540\":1,\"4545\":1}}],[\"对于数据丢失不敏感\",{\"1\":{\"3187\":1,\"5438\":1}}],[\"对于变量存在多线程并发竞争\",{\"1\":{\"3124\":1,\"5375\":1}}],[\"对于store\",{\"1\":{\"2865\":1,\"4090\":1}}],[\"对于load\",{\"1\":{\"2864\":1,\"4089\":1}}],[\"对于其他线程是不见的\",{\"1\":{\"2857\":1,\"4082\":1}}],[\"对于当前事务也是不可见的\",{\"1\":{\"2542\":1,\"4875\":1}}],[\"对于频繁被连接查询的字段\",{\"1\":{\"2340\":1,\"4673\":1}}],[\"对于外键列并不一定要建立外键\",{\"1\":{\"2340\":1,\"4673\":1}}],[\"对于很多网站来说\",{\"1\":{\"1891\":1,\"1906\":1,\"1921\":1,\"1934\":1,\"1947\":1,\"1962\":1,\"5153\":1,\"5176\":1}}],[\"对于命令的处理是单进程的方案\",{\"1\":{\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"4534\":1}}],[\"对于支持网卡支持\",{\"1\":{\"1099\":1,\"1267\":1,\"1435\":1,\"1603\":1,\"4481\":1}}],[\"对于就绪的事件\",{\"1\":{\"1061\":1,\"1229\":1,\"1397\":1,\"1565\":1,\"4443\":1}}],[\"对于每个pid发送数据的每个topic都对应一个从0开始单调递增的sn值\",{\"1\":{\"979\":1,\"5126\":1}}],[\"对于每一个topic\",{\"1\":{\"946\":1,\"5093\":1}}],[\"对于我们理解和学习各种框架的原理也非常有帮助\",{\"1\":{\"699\":1,\"3687\":1}}],[\"对于二叉搜索树\",{\"1\":{\"643\":1,\"3631\":1}}],[\"对于队列\",{\"1\":{\"629\":1}}],[\"对于链表来说\",{\"1\":{\"628\":1}}],[\"对于已经正式发布的代码\",{\"1\":{\"592\":1}}],[\"对于已经加载的类会被放在\",{\"1\":{\"203\":1,\"3486\":1}}],[\"对于现实中并不存在的设计对象\",{\"1\":{\"586\":1}}],[\"对于一个默认的hashmap来说\",{\"1\":{\"422\":1}}],[\"对于一个类加载器来说\",{\"1\":{\"203\":1,\"3486\":1}}],[\"对于arraylist\",{\"1\":{\"333\":1}}],[\"对于任意一个对象\",{\"1\":{\"283\":1,\"3560\":1}}],[\"对于任意一个类\",{\"1\":{\"283\":1,\"3560\":1}}],[\"对于\",{\"1\":{\"124\":1,\"2309\":1,\"2331\":1,\"2382\":1,\"2527\":1,\"2528\":1,\"2529\":1,\"3412\":1,\"4642\":1,\"4664\":1,\"4715\":1,\"4860\":1,\"4861\":1,\"4862\":1}}],[\"对\",{\"1\":{\"37\":1,\"2048\":1,\"2739\":1,\"3325\":1,\"3964\":1}}],[\"为变量设置threadlocal\",{\"1\":{\"3126\":1,\"5377\":1}}],[\"为空\",{\"1\":{\"2541\":1,\"4874\":1}}],[\"为何能够通过\",{\"1\":{\"2265\":1,\"4598\":1}}],[\"为短连接\",{\"1\":{\"2181\":1,\"5234\":1}}],[\"为该映射关系的生存周期\",{\"1\":{\"2148\":1,\"5201\":1}}],[\"为啥叫权威呢\",{\"1\":{\"2218\":1,\"5271\":1}}],[\"为啥不可能选择\",{\"1\":{\"1835\":1,\"4395\":1}}],[\"为啥要定义这两个变量\",{\"1\":{\"403\":1}}],[\"为我们提供了高可用\",{\"1\":{\"1773\":1,\"4333\":1}}],[\"为我们提供了自定义缓存\",{\"1\":{\"907\":1,\"3895\":1}}],[\"为微服务架构提供了非常完整的支持\",{\"1\":{\"1739\":1,\"4299\":1}}],[\"为需要拦截的接口生成代理对象以实现接口方法拦截功能\",{\"1\":{\"894\":1,\"3882\":1}}],[\"为什么选用redis作为消息队列\",{\"1\":{\"3182\":1,\"5433\":1}}],[\"为什么redis中使用两种数据类型\",{\"1\":{\"3173\":1,\"5424\":1}}],[\"为什么任务需要存储在数据库中\",{\"1\":{\"3171\":1,\"5422\":1}}],[\"为什么呢\",{\"1\":{\"3002\":1,\"4227\":1}}],[\"为什么不需要预加载\",{\"1\":{\"3175\":1,\"5426\":1}}],[\"为什么不推荐使用内置线程池\",{\"0\":{\"3000\":1,\"4225\":1}}],[\"为什么不改\",{\"0\":{\"591\":1}}],[\"为什么会出现误判的情况呢\",{\"1\":{\"2701\":1,\"5034\":1}}],[\"为什么这么快\",{\"0\":{\"2584\":1,\"4917\":1}}],[\"为什么这里不像上面那样\",{\"1\":{\"940\":1,\"5087\":1}}],[\"为什么线程\",{\"1\":{\"2414\":1,\"4747\":1}}],[\"为什么挥手需要四次\",{\"1\":{\"1992\":1}}],[\"为什么每次建立\",{\"1\":{\"1983\":1}}],[\"为什么是三次握手\",{\"1\":{\"1982\":1}}],[\"为什么需要\",{\"1\":{\"1973\":1,\"1998\":1}}],[\"为什么需要http\",{\"1\":{\"1884\":1,\"1899\":1,\"1914\":1,\"1927\":1,\"1940\":1,\"1955\":1,\"5145\":1,\"5170\":1}}],[\"为什么需要红黑树\",{\"0\":{\"642\":1,\"3630\":1}}],[\"为什么就要使用spring\",{\"1\":{\"1737\":1,\"4297\":1}}],[\"为什么叫控制反转\",{\"1\":{\"725\":1,\"3713\":1}}],[\"为什么要对密码加密\",{\"1\":{\"3225\":1}}],[\"为什么要用线程池\",{\"0\":{\"2950\":1,\"4175\":1}}],[\"为什么要设置奇数个结点\",{\"1\":{\"1807\":1,\"4367\":1}}],[\"为什么要保证顺序\",{\"0\":{\"983\":1,\"5130\":1}}],[\"为什么要分区\",{\"1\":{\"932\":1,\"5079\":1}}],[\"为什么要进⾏双重判断\",{\"1\":{\"674\":1,\"3662\":1}}],[\"为什么要使用红黑树而不使用avl树\",{\"0\":{\"525\":1,\"3614\":1}}],[\"为什么使用接口\",{\"0\":{\"595\":1}}],[\"为什么单链表转为红黑树要求桶内的元素个数大于8\",{\"0\":{\"529\":1,\"3618\":1}}],[\"为什么数组容量必须是2次幂\",{\"0\":{\"527\":1,\"3616\":1}}],[\"为什么在长度小于8时使用链表\",{\"0\":{\"523\":1,\"3612\":1}}],[\"为什么jdk1\",{\"0\":{\"518\":1,\"521\":1,\"3607\":1,\"3610\":1}}],[\"为什么java\",{\"1\":{\"474\":1}}],[\"为什么\",{\"0\":{\"452\":1,\"2100\":1},\"1\":{\"624\":1,\"1985\":1,\"1997\":1,\"2083\":1,\"2085\":1,\"2266\":1,\"4599\":1}}],[\"为了防止阻塞\",{\"1\":{\"3176\":1,\"5427\":1}}],[\"为了达成这一目标\",{\"1\":{\"2155\":1,\"5208\":1}}],[\"为了检验对这些知识掌握的深度\",{\"1\":{\"1970\":1}}],[\"为了保证数据的并发安全\",{\"1\":{\"2900\":1,\"4125\":1}}],[\"为了保证\",{\"1\":{\"1835\":1,\"4395\":1}}],[\"为了保证相同的键\",{\"1\":{\"940\":1,\"5087\":1}}],[\"为了克服这个缺点\",{\"1\":{\"1042\":1,\"1210\":1,\"1378\":1,\"1546\":1,\"4424\":1}}],[\"为了实现进程\",{\"1\":{\"1036\":1,\"1204\":1,\"1372\":1,\"1540\":1,\"4418\":1}}],[\"为了解决这个问题\",{\"1\":{\"710\":1,\"3698\":1}}],[\"为了修正这个问题\",{\"1\":{\"609\":1}}],[\"为了按键有序\",{\"1\":{\"436\":1}}],[\"为了有序\",{\"1\":{\"367\":1}}],[\"为了丰富文档写作\",{\"1\":{\"37\":1,\"3325\":1}}],[\"为o\",{\"1\":{\"343\":1,\"344\":1,\"350\":1,\"358\":2,\"359\":1,\"367\":1,\"386\":1,\"437\":1}}],[\"为\",{\"1\":{\"227\":1,\"898\":2,\"1802\":1,\"1818\":1,\"2465\":1,\"2541\":1,\"3195\":1,\"3510\":1,\"3886\":2,\"4362\":1,\"4378\":1,\"4798\":1,\"4874\":1,\"5446\":1}}],[\"为类的二进制名称\",{\"1\":{\"212\":1,\"3495\":1}}],[\"为每个topic维护了一个atomicinteger对象\",{\"1\":{\"940\":1,\"5087\":1}}],[\"为每个\",{\"1\":{\"31\":1,\"3319\":1}}],[\"是怎么实现的\",{\"1\":{\"3078\":1,\"5329\":1}}],[\"是怎么对这批\",{\"1\":{\"2669\":1,\"5002\":1}}],[\"是cas操作的核心\",{\"1\":{\"2891\":1,\"4116\":1}}],[\"是指在同一个线程在调外层方法获取锁的时候\",{\"1\":{\"2884\":1,\"4109\":1}}],[\"是指事务操作前和操作后\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"是将每条请求共享资源的线程封装成一个\",{\"1\":{\"2832\":1,\"4057\":1}}],[\"是用\",{\"1\":{\"2831\":1,\"4056\":1}}],[\"是用来控制选择用\",{\"1\":{\"2439\":1,\"4772\":1}}],[\"是比较并交换的意思\",{\"1\":{\"2778\":1,\"4003\":1}}],[\"是安全的\",{\"1\":{\"2599\":1,\"4932\":1}}],[\"是查询不出来这条数据的\",{\"1\":{\"2524\":1,\"4857\":1}}],[\"是通过\",{\"1\":{\"2524\":1,\"2525\":1,\"4857\":1,\"4858\":1}}],[\"是还没提交事务的\",{\"1\":{\"2496\":1,\"4829\":1}}],[\"是包含间隙锁+记录锁的\",{\"1\":{\"2470\":1,\"4803\":1}}],[\"是性能最高的方式\",{\"1\":{\"2445\":1,\"4778\":1}}],[\"是无锁的\",{\"1\":{\"2422\":1,\"4755\":1}}],[\"是无法保证原子性的\",{\"1\":{\"2812\":1,\"4037\":1}}],[\"是无法读出一个有效的用户消息的\",{\"1\":{\"2030\":1}}],[\"是无法做数据分片的\",{\"1\":{\"1876\":1,\"3953\":1}}],[\"是在\",{\"1\":{\"2796\":1,\"4021\":1}}],[\"是在事务提交后才会释放\",{\"1\":{\"2408\":1,\"4741\":1}}],[\"是在return前还是return后\",{\"1\":{\"266\":1}}],[\"是为了保证当用户对表执行\",{\"1\":{\"2404\":1,\"4737\":1}}],[\"是为了区分同一个主机上不同应用程序的数据包\",{\"1\":{\"2089\":1}}],[\"是会被阻塞的\",{\"1\":{\"2394\":1,\"2470\":1,\"4727\":1,\"4803\":1}}],[\"是会根据\",{\"1\":{\"1796\":1,\"4356\":1}}],[\"是目前搜索引擎数据库使用的一种技术\",{\"1\":{\"2305\":1,\"4638\":1}}],[\"是因为二级索引的叶子节点存储的数据是主键\",{\"1\":{\"2299\":1,\"4632\":1}}],[\"是因理想情况下一个bin中元素个数达到6的概率是0\",{\"1\":{\"531\":1,\"3620\":1}}],[\"是数据表的主键\",{\"1\":{\"2276\":1,\"4609\":1}}],[\"是啥\",{\"1\":{\"2213\":1,\"5266\":1}}],[\"是运行在\",{\"1\":{\"2198\":1,\"5251\":1}}],[\"是基于\",{\"1\":{\"2191\":1,\"2920\":1,\"4145\":1,\"5244\":1}}],[\"是面向连接\",{\"1\":{\"2075\":1}}],[\"是面向连接的传输层协议\",{\"1\":{\"2054\":1}}],[\"是面向连接的\",{\"1\":{\"2026\":1}}],[\"是有边界的\",{\"1\":{\"2070\":1}}],[\"是有能力在数组中的任何位置添加或者删除元素的\",{\"1\":{\"571\":1}}],[\"是流式传输\",{\"1\":{\"2069\":1}}],[\"是尽最大努力交付\",{\"1\":{\"2061\":1}}],[\"是可靠交付数据的\",{\"1\":{\"2060\":1}}],[\"是要优先保证\",{\"1\":{\"1877\":1,\"3954\":1}}],[\"是前提\",{\"1\":{\"1832\":1,\"4392\":1}}],[\"是什么玩意\",{\"1\":{\"1808\":1,\"4368\":1}}],[\"是什么类\",{\"1\":{\"569\":1}}],[\"是否相等\",{\"1\":{\"3269\":1}}],[\"是否有效再进行处理\",{\"1\":{\"3208\":1,\"5459\":1}}],[\"是否有事务已经对表加上了\",{\"1\":{\"2416\":1,\"4749\":1}}],[\"是否合法\",{\"1\":{\"2698\":1,\"5031\":1}}],[\"是否支持\",{\"1\":{\"2254\":1,\"4587\":1}}],[\"是否支持数据库异常崩溃后的安全恢复\",{\"1\":{\"2251\":1,\"4584\":1}}],[\"是否支持外键\",{\"1\":{\"2247\":1,\"4580\":1}}],[\"是否支持事务\",{\"1\":{\"2244\":1,\"4577\":1}}],[\"是否支持行级锁\",{\"1\":{\"2241\":1,\"4574\":1}}],[\"是否同意更新\",{\"1\":{\"1794\":1,\"4354\":1}}],[\"是否只读\",{\"1\":{\"905\":1,\"3893\":1}}],[\"是协调服务的典型场景\",{\"1\":{\"1774\":1,\"4334\":1}}],[\"是世界领先的软件容器平台\",{\"1\":{\"1691\":1,\"4251\":1}}],[\"是分发事件操作\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4523\":1}}],[\"是需要完成的操作\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4523\":1}}],[\"是系统调用函数\",{\"1\":{\"1141\":1,\"1309\":1,\"1477\":1,\"1645\":1,\"4523\":1}}],[\"是如何随机产生的\",{\"0\":{\"2099\":1},\"1\":{\"1984\":1}}],[\"是如何进行初始化选举的\",{\"1\":{\"1800\":1,\"4360\":1}}],[\"是如何进行分页的\",{\"0\":{\"887\":1,\"3875\":1}}],[\"是如何获取网络事件的呢\",{\"1\":{\"1053\":1,\"1221\":1,\"1389\":1,\"1557\":1,\"4435\":1}}],[\"是这种机制\",{\"1\":{\"1033\":1,\"1201\":1,\"1369\":1,\"1537\":1,\"4415\":1}}],[\"是符合我们上面提到的时间局部性\",{\"1\":{\"1012\":1}}],[\"是不合理的\",{\"1\":{\"2692\":1,\"5025\":1}}],[\"是不影响其他消费者购买的\",{\"1\":{\"2485\":1,\"4818\":1}}],[\"是不会加行级锁的\",{\"1\":{\"2422\":1,\"4755\":1}}],[\"是不需要连接\",{\"1\":{\"2055\":1}}],[\"是不是也需要\",{\"1\":{\"1793\":1,\"4353\":1}}],[\"是不是把t1p1交给c1消费能更加的均衡呢\",{\"1\":{\"961\":1,\"5108\":1}}],[\"是不能自动唤醒的\",{\"1\":{\"1024\":1,\"1192\":1,\"1360\":1,\"1528\":1,\"4406\":1}}],[\"是不能解决循环依赖的问题的\",{\"1\":{\"801\":1,\"3789\":1}}],[\"是多个\",{\"1\":{\"900\":1,\"3888\":1}}],[\"是servlet的监听器\",{\"1\":{\"849\":1,\"3837\":1}}],[\"是必须的\",{\"1\":{\"814\":1,\"3802\":1}}],[\"是⼀种结构性模式\",{\"1\":{\"688\":1,\"3676\":1}}],[\"是非常慢的\",{\"1\":{\"628\":1}}],[\"是继承了\",{\"1\":{\"616\":1}}],[\"是双端队列的意思\",{\"1\":{\"611\":1}}],[\"是一款程序员可以嵌入他们所开发产品的组件\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"是一款模板引擎\",{\"1\":{\"3151\":1,\"5402\":1}}],[\"是一条\",{\"1\":{\"2795\":1,\"2816\":1,\"4020\":1,\"4041\":1}}],[\"是一直持有的\",{\"1\":{\"2408\":1,\"4741\":1}}],[\"是一对一的两点服务\",{\"1\":{\"2057\":1}}],[\"是一定要满足的\",{\"1\":{\"1833\":1,\"4393\":1}}],[\"是一件非常困难的事\",{\"1\":{\"1731\":1,\"4291\":1}}],[\"是一项独立的容器管理包\",{\"1\":{\"1704\":1,\"4264\":1}}],[\"是一种系统原语\",{\"1\":{\"2795\":1,\"4020\":1}}],[\"是一种设计思想\",{\"1\":{\"724\":1,\"3712\":1}}],[\"是一种高效的查找树\",{\"1\":{\"641\":1,\"3629\":1}}],[\"是一致的\",{\"1\":{\"601\":1}}],[\"是一个新闻资讯类项目\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"是一个可重入且独占式的锁\",{\"1\":{\"2744\":1,\"3969\":1}}],[\"是一个可改变大小的数组\",{\"1\":{\"445\":1}}],[\"是一个包一个包的发送\",{\"1\":{\"2070\":1}}],[\"是一个包装类\",{\"1\":{\"331\":1}}],[\"是一个工作在传输层的可靠数据传输的服务\",{\"1\":{\"2024\":1}}],[\"是一个开源的分布式协调服务\",{\"1\":{\"1772\":1,\"4332\":1}}],[\"是一个声明web服务客户端\",{\"1\":{\"1762\":1,\"4322\":1}}],[\"是一个\",{\"1\":{\"577\":1,\"1696\":1,\"4256\":1}}],[\"是一个双链表\",{\"1\":{\"446\":1}}],[\"是一个集合接口\",{\"1\":{\"329\":1}}],[\"是发动机这个类的对象\",{\"1\":{\"581\":1}}],[\"是被业界一直认为非常糟糕的实现\",{\"1\":{\"575\":1}}],[\"是的\",{\"1\":{\"562\":1}}],[\"是16\",{\"1\":{\"409\":1}}],[\"是哈希表实现的\",{\"1\":{\"379\":1}}],[\"是二叉树实现的\",{\"1\":{\"378\":1}}],[\"是list\",{\"1\":{\"329\":1}}],[\"是runtimeexception以外的异常\",{\"1\":{\"245\":1,\"3530\":1}}],[\"是由\",{\"1\":{\"199\":1,\"1152\":1,\"1320\":1,\"1488\":1,\"1656\":1,\"2130\":1,\"2223\":1,\"3482\":1,\"4534\":1,\"5183\":1}}],[\"是\",{\"1\":{\"33\":1,\"625\":1,\"809\":1,\"1073\":1,\"1241\":1,\"1409\":1,\"1577\":1,\"2130\":1,\"2170\":1,\"2223\":1,\"2239\":1,\"2268\":1,\"2333\":1,\"2468\":1,\"2738\":2,\"2802\":1,\"2816\":1,\"3061\":1,\"3321\":1,\"3797\":1,\"3963\":2,\"4027\":1,\"4041\":1,\"4455\":1,\"4572\":1,\"4601\":1,\"4666\":1,\"4801\":1,\"5183\":1,\"5223\":1,\"5312\":1}}],[\"和其他的几个策略不同\",{\"1\":{\"2977\":1,\"4202\":1}}],[\"和内存地址\",{\"1\":{\"2790\":1,\"2792\":1,\"4015\":1,\"4017\":1}}],[\"和非公平锁\",{\"1\":{\"2746\":1,\"3971\":1}}],[\"和我们认识的\",{\"1\":{\"2596\":1,\"4929\":1}}],[\"和用户\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"和独占表锁\",{\"1\":{\"2425\":1,\"4758\":1}}],[\"和回滚\",{\"1\":{\"2246\":1,\"4579\":1}}],[\"和表级锁\",{\"1\":{\"2242\":1,\"4575\":1}}],[\"和接收主机\",{\"1\":{\"2165\":1,\"5218\":1}}],[\"和端口是可变的\",{\"1\":{\"2046\":1}}],[\"和一开始选举一样\",{\"1\":{\"1806\":1,\"4366\":1}}],[\"和介绍\",{\"1\":{\"1787\":1,\"4347\":1}}],[\"和处理资源池这两个核心部分组成\",{\"1\":{\"1112\":1,\"1280\":1,\"1448\":1,\"1616\":1,\"4494\":1}}],[\"和普通的\",{\"1\":{\"1098\":1,\"1266\":1,\"1434\":1,\"1602\":1,\"4480\":1}}],[\"和自动配置一样\",{\"1\":{\"858\":1,\"3846\":1}}],[\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐\",{\"1\":{\"681\":1,\"3669\":1}}],[\"和o\",{\"1\":{\"643\":1,\"3631\":1}}],[\"和底层数据结构的具体实现\",{\"1\":{\"602\":1}}],[\"和动态数组这种数据结构之间\",{\"1\":{\"584\":1}}],[\"和arraylist类似\",{\"1\":{\"448\":1}}],[\"和错误\",{\"1\":{\"251\":1,\"3536\":1}}],[\"和不可查的异常\",{\"0\":{\"246\":1,\"3531\":1}}],[\"和卸载\",{\"1\":{\"188\":1,\"3471\":1}}],[\"和\",{\"0\":{\"404\":1,\"416\":1,\"2050\":1,\"2052\":1,\"2074\":1,\"2087\":1,\"2180\":1,\"2185\":1,\"2190\":1,\"2195\":1,\"2236\":1,\"4569\":1,\"5233\":1,\"5238\":1,\"5243\":1,\"5248\":1},\"1\":{\"29\":1,\"119\":1,\"575\":1,\"586\":1,\"601\":2,\"607\":1,\"621\":1,\"743\":1,\"819\":1,\"832\":1,\"860\":1,\"1012\":1,\"1063\":1,\"1070\":1,\"1079\":1,\"1095\":1,\"1096\":1,\"1141\":1,\"1231\":1,\"1238\":1,\"1247\":1,\"1263\":1,\"1264\":1,\"1309\":1,\"1399\":1,\"1406\":1,\"1415\":1,\"1431\":1,\"1432\":1,\"1477\":1,\"1567\":1,\"1574\":1,\"1583\":1,\"1599\":1,\"1600\":1,\"1645\":1,\"1776\":1,\"1791\":1,\"1793\":1,\"1794\":2,\"1801\":1,\"1806\":1,\"1811\":1,\"1816\":1,\"1832\":1,\"1837\":1,\"1977\":1,\"1978\":1,\"2090\":1,\"2093\":1,\"2246\":1,\"2271\":1,\"2279\":1,\"2350\":1,\"2484\":1,\"2495\":1,\"2500\":1,\"2504\":1,\"2529\":1,\"2531\":1,\"2549\":1,\"2576\":1,\"2581\":1,\"2595\":1,\"2639\":1,\"2744\":1,\"2812\":1,\"2863\":1,\"2886\":1,\"2895\":1,\"2917\":1,\"2930\":1,\"2938\":1,\"2942\":1,\"2981\":1,\"2983\":1,\"3006\":1,\"3008\":1,\"3049\":1,\"3259\":1,\"3261\":1,\"3263\":1,\"3265\":1,\"3266\":1,\"3267\":1,\"3269\":1,\"3317\":1,\"3407\":1,\"3731\":1,\"3807\":1,\"3820\":1,\"3848\":1,\"3969\":1,\"4037\":1,\"4088\":1,\"4111\":1,\"4120\":1,\"4142\":1,\"4155\":1,\"4163\":1,\"4167\":1,\"4206\":1,\"4208\":1,\"4231\":1,\"4233\":1,\"4336\":1,\"4351\":1,\"4353\":1,\"4354\":2,\"4361\":1,\"4366\":1,\"4371\":1,\"4376\":1,\"4392\":1,\"4397\":1,\"4445\":1,\"4452\":1,\"4461\":1,\"4477\":1,\"4478\":1,\"4523\":1,\"4579\":1,\"4604\":1,\"4612\":1,\"4683\":1,\"4817\":1,\"4828\":1,\"4833\":1,\"4837\":1,\"4862\":1,\"4864\":1,\"4882\":1,\"4909\":1,\"4914\":1,\"4928\":1,\"4972\":1,\"5300\":1}}],[\"介绍公司\",{\"1\":{\"3027\":1,\"5278\":1}}],[\"介绍下\",{\"1\":{\"1142\":1,\"1310\":1,\"1478\":1,\"1646\":1,\"4524\":1}}],[\"介绍\",{\"0\":{\"28\":1,\"157\":1,\"165\":1,\"196\":1,\"3316\":1,\"3440\":1,\"3448\":1,\"3479\":1},\"1\":{\"29\":1,\"33\":1,\"3317\":1,\"3321\":1}}],[\"你也不能想当然地认为它们俩对应的原文也非常相似\",{\"1\":{\"3218\":1}}],[\"你平常也这样扎头发吗\",{\"1\":{\"3092\":1,\"5343\":1}}],[\"你有实际的项目经验吗\",{\"1\":{\"3080\":1,\"5331\":1}}],[\"你来就是java\",{\"1\":{\"3069\":1,\"5320\":1}}],[\"你他妈的非得问\",{\"1\":{\"3041\":1,\"5292\":1}}],[\"你知道有什么方法对线程池进行预热吗\",{\"1\":{\"3013\":1,\"4238\":1}}],[\"你能说一下有哪些问题吗\",{\"1\":{\"3079\":1,\"5330\":1}}],[\"你能说出几个需要重写的方法吗\",{\"0\":{\"2842\":1,\"4067\":1}}],[\"你能告诉我\",{\"1\":{\"2216\":1,\"5269\":1}}],[\"你去问它应该能问到\",{\"1\":{\"2217\":1,\"5270\":1}}],[\"你去问问它吧\",{\"1\":{\"2215\":1,\"5268\":1}}],[\"你是如何设计的\",{\"0\":{\"1847\":1,\"3924\":1}}],[\"你会发现\",{\"1\":{\"1109\":1,\"1277\":1,\"1445\":1,\"1613\":1,\"4491\":1}}],[\"你的快递被放到了一个快递箱里\",{\"1\":{\"1067\":1,\"1235\":1,\"1403\":1,\"1571\":1,\"4449\":1}}],[\"你通过proxy\",{\"1\":{\"707\":1,\"3695\":1}}],[\"你都能通过getmap获得\",{\"1\":{\"298\":1,\"3575\":1}}],[\"你又要改代码\",{\"1\":{\"292\":1,\"3569\":1}}],[\"你需要自定义\",{\"1\":{\"713\":1,\"3701\":1}}],[\"你需要在页面\",{\"1\":{\"149\":1,\"153\":1,\"3437\":1}}],[\"你需要阅读\",{\"1\":{\"33\":1,\"3321\":1}}],[\"你应该创建和编写\",{\"1\":{\"27\":1,\"3315\":1}}],[\"你可以专注于如何展现数据\",{\"1\":{\"3152\":1,\"5403\":1}}],[\"你可以选择这个策略\",{\"1\":{\"2974\":1,\"4199\":1}}],[\"你可以把多个变量放在一个对象里来进行cas操作\",{\"1\":{\"2814\":1,\"4039\":1}}],[\"你可以将\",{\"1\":{\"2191\":1,\"5244\":1}}],[\"你可以将图片和\",{\"1\":{\"123\":1,\"3411\":1}}],[\"你可以使用这个语法\",{\"1\":{\"260\":1,\"3545\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"26\":1,\"3314\":1}}],[\"你可以通过\",{\"1\":{\"715\":1,\"3703\":1}}],[\"你可以通过主题选项和页面\",{\"1\":{\"138\":1,\"3426\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"8\":1,\"3296\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"121\":1,\"3409\":1}}],[\"你可以在这里放置你的主体内容\",{\"1\":{\"148\":1,\"152\":1,\"3436\":1}}],[\"你可以在\",{\"1\":{\"115\":1,\"707\":1,\"3403\":1,\"3695\":1}}],[\"你可以标记\",{\"1\":{\"71\":1,\"3359\":1}}],[\"文本内容和图片\",{\"1\":{\"3158\":1,\"5409\":1}}],[\"文章查询性能\",{\"1\":{\"3207\":1,\"5458\":1}}],[\"文章数据建立索引\",{\"1\":{\"3207\":1,\"5458\":1}}],[\"文章自动审核\",{\"1\":{\"3156\":1,\"5407\":1}}],[\"文章自动审核及延迟发布\",{\"0\":{\"3155\":1,\"5406\":1},\"1\":{\"3097\":1,\"5348\":1}}],[\"文章详情静态化\",{\"1\":{\"3150\":1,\"5401\":1}}],[\"文章详情静态化及存储\",{\"0\":{\"3149\":1,\"5400\":1},\"1\":{\"3097\":1,\"5348\":1}}],[\"文章内容审核功能\",{\"1\":{\"3096\":1,\"5347\":1}}],[\"文章标题列表\",{\"1\":{\"131\":1,\"3419\":1}}],[\"文中分析基于jdk1\",{\"1\":{\"432\":1}}],[\"文档中写到\",{\"1\":{\"214\":1,\"3497\":1}}],[\"文件进行数据恢复\",{\"1\":{\"2660\":1,\"4993\":1}}],[\"文件进行重写\",{\"1\":{\"2659\":1,\"4992\":1}}],[\"文件越来越大\",{\"1\":{\"2659\":1,\"4992\":1}}],[\"文件重写\",{\"1\":{\"2659\":1,\"4992\":1}}],[\"文件同步\",{\"1\":{\"2658\":1,\"4991\":1}}],[\"文件写入\",{\"1\":{\"2657\":1,\"4990\":1}}],[\"文件的位置相同\",{\"1\":{\"2653\":1,\"4986\":1}}],[\"文件的保存位置和\",{\"1\":{\"2653\":1,\"4986\":1}}],[\"文件中\",{\"1\":{\"2651\":1,\"2657\":1,\"4984\":1,\"4990\":1}}],[\"文件传输\",{\"1\":{\"2076\":1}}],[\"文件传输的代码\",{\"1\":{\"1109\":1,\"1277\":1,\"1445\":1,\"1613\":1,\"4491\":1}}],[\"文件描述符\",{\"1\":{\"1053\":1,\"1221\":1,\"1389\":1,\"1557\":1,\"4435\":1}}],[\"文件呢\",{\"1\":{\"192\":1,\"3475\":1}}],[\"文件需要加载到虚拟机中之后才能运行和使用\",{\"1\":{\"192\":1,\"3475\":1}}],[\"文件夹的图片\",{\"1\":{\"124\":1,\"3412\":1}}],[\"文件放置在一起\",{\"1\":{\"123\":1,\"3411\":1}}],[\"文件\",{\"1\":{\"27\":1,\"200\":1,\"209\":1,\"694\":1,\"2560\":1,\"2915\":1,\"3315\":1,\"3483\":1,\"3492\":1,\"3682\":1,\"4140\":1,\"4893\":1}}],[\"文件生成页面\",{\"1\":{\"26\":1,\"3314\":1}}],[\"文字结尾应该有深蓝色的\",{\"1\":{\"126\":1,\"3414\":1}}],[\"文字\",{\"1\":{\"23\":1,\"24\":1,\"3311\":1,\"3312\":1}}],[\"文字段落\",{\"1\":{\"23\":11,\"24\":13,\"3311\":11,\"3312\":13}}],[\"2呢\",{\"1\":{\"5167\":1}}],[\"2还没来得及全面推广\",{\"1\":{\"5167\":1}}],[\"2还是个新技术\",{\"1\":{\"1889\":1,\"1904\":1,\"1919\":1,\"1932\":1,\"1945\":1,\"1960\":1,\"5151\":1,\"5174\":1}}],[\"2留下发挥时间\",{\"1\":{\"5167\":1}}],[\"2非对称加密算法有哪些\",{\"0\":{\"3278\":1}}],[\"25d55ad283aa400af464c76d713c07ad\",{\"1\":{\"3246\":1}}],[\"253\",{\"1\":{\"81\":1,\"3369\":1}}],[\"2n\",{\"1\":{\"2993\":2,\"4218\":2}}],[\"22\",{\"1\":{\"2437\":1,\"4770\":1}}],[\"2xx\",{\"1\":{\"2178\":1,\"5231\":1}}],[\"2listen\",{\"0\":{\"2122\":1}}],[\"2为什么挥手需要四次\",{\"0\":{\"2107\":1}}],[\"2为什么需要\",{\"0\":{\"2022\":1}}],[\"2为什么需要虚拟内存\",{\"0\":{\"1014\":1}}],[\"2如何在\",{\"0\":{\"2096\":1}}],[\"2tcp\",{\"0\":{\"2074\":1}}],[\"2msl\",{\"0\":{\"2112\":1},\"1\":{\"1997\":1}}],[\"2中最核心的技术就是多路复用技术\",{\"1\":{\"1894\":1,\"1909\":1,\"1924\":1,\"1937\":1,\"1950\":1,\"1965\":1,\"5156\":1,\"5179\":1}}],[\"2的诞生\",{\"1\":{\"1894\":1,\"1909\":1,\"1924\":1,\"1937\":1,\"1950\":1,\"1965\":1,\"5156\":1,\"5179\":1}}],[\"2有了一定的基本了解\",{\"1\":{\"1893\":1,\"1908\":1,\"1923\":1,\"1936\":1,\"1949\":1,\"1964\":1,\"5155\":1,\"5178\":1}}],[\"2标准在2015年5月就以rfc\",{\"1\":{\"1887\":1,\"1902\":1,\"1917\":1,\"1930\":1,\"1943\":1,\"1958\":1,\"5149\":1,\"5172\":1}}],[\"2~default~blogcommendfrombaidu~rate\",{\"1\":{\"981\":2,\"5128\":2}}],[\"2~default~baidujs\",{\"1\":{\"972\":1,\"5119\":1}}],[\"2101\",{\"1\":{\"972\":1,\"981\":1,\"5119\":1,\"5128\":1}}],[\"23的主机\",{\"1\":{\"2153\":1,\"5206\":1}}],[\"235^v28^pc\",{\"1\":{\"972\":1,\"981\":2,\"5119\":1,\"5128\":2}}],[\"230\",{\"1\":{\"81\":1,\"3369\":1}}],[\"2静态代理和动态代理的区别\",{\"0\":{\"689\":1}}],[\"2⼯⼚⽅法模式了解吗\",{\"0\":{\"680\":1}}],[\"2什么是设计模式\",{\"0\":{\"666\":1}}],[\"20分钟\",{\"0\":{\"3071\":1,\"5322\":1}}],[\"20w\",{\"1\":{\"2677\":1,\"5010\":1}}],[\"2009\",{\"1\":{\"5162\":1}}],[\"2000w\",{\"1\":{\"2677\":1,\"5010\":1}}],[\"200\",{\"1\":{\"2484\":4,\"4817\":4}}],[\"206\",{\"1\":{\"2182\":1,\"5235\":1}}],[\"20\",{\"1\":{\"2066\":1,\"2148\":1,\"3054\":1,\"5201\":1,\"5305\":1}}],[\"2022\",{\"0\":{\"1841\":1,\"1843\":1,\"1857\":1,\"1860\":1,\"1862\":1,\"1864\":1,\"1866\":1,\"1868\":1,\"1871\":1,\"1878\":1,\"1880\":1,\"3918\":1,\"3920\":1,\"3934\":1,\"3937\":1,\"3939\":1,\"3941\":1,\"3943\":1,\"3945\":1,\"3948\":1,\"3955\":1,\"3957\":1}}],[\"20210608002334025\",{\"1\":{\"731\":1,\"3719\":1}}],[\"20201231\",{\"1\":{\"3253\":1}}],[\"2020\",{\"1\":{\"117\":1,\"3405\":1}}],[\"2018年的时候\",{\"1\":{\"1889\":1,\"1904\":1,\"1919\":1,\"1932\":1,\"1945\":1,\"1960\":1,\"5151\":1,\"5174\":1}}],[\"2012\",{\"1\":{\"1831\":1,\"4391\":1}}],[\"2013\",{\"1\":{\"621\":1,\"5162\":1}}],[\"2014\",{\"1\":{\"548\":1,\"3520\":1}}],[\"2+1\",{\"1\":{\"540\":1}}],[\"2版本\",{\"1\":{\"535\":1}}],[\"2区别分析\",{\"0\":{\"498\":1}}],[\"2remove方法\",{\"0\":{\"488\":1}}],[\"24\",{\"1\":{\"426\":1,\"2182\":1,\"5235\":1}}],[\"2size\",{\"0\":{\"404\":1}}],[\"2获取class对象\",{\"0\":{\"301\":1}}],[\"2反射\",{\"0\":{\"281\":1}}],[\"2可查的异常\",{\"0\":{\"246\":1}}],[\"2\",{\"0\":{\"282\":1,\"301\":1,\"309\":1,\"317\":1,\"327\":1,\"338\":1,\"365\":1,\"433\":1,\"452\":1,\"521\":1,\"642\":1,\"1014\":1,\"1830\":1,\"1886\":1,\"1892\":1,\"1901\":1,\"1907\":1,\"1916\":1,\"1922\":1,\"1929\":1,\"1935\":1,\"1942\":1,\"1948\":1,\"1957\":1,\"1963\":1,\"1968\":1,\"2094\":1,\"2095\":1,\"2096\":1,\"2097\":1,\"2098\":1,\"2099\":1,\"2100\":1,\"2101\":1,\"2102\":1,\"2103\":1,\"2104\":1,\"2185\":1,\"2190\":1,\"2231\":1,\"3113\":1,\"3270\":1,\"3630\":1,\"4390\":1,\"5148\":1,\"5154\":1,\"5171\":1,\"5177\":1,\"5238\":1,\"5243\":1,\"5364\":1},\"1\":{\"24\":14,\"75\":1,\"304\":1,\"313\":1,\"320\":1,\"325\":1,\"341\":1,\"363\":1,\"367\":1,\"379\":1,\"487\":1,\"573\":1,\"651\":1,\"673\":1,\"738\":1,\"792\":1,\"802\":1,\"819\":1,\"828\":1,\"890\":1,\"924\":1,\"959\":1,\"975\":1,\"1076\":1,\"1090\":1,\"1092\":1,\"1095\":1,\"1096\":1,\"1099\":1,\"1102\":1,\"1105\":4,\"1148\":1,\"1244\":1,\"1258\":1,\"1260\":1,\"1263\":1,\"1264\":1,\"1267\":1,\"1270\":1,\"1273\":4,\"1316\":1,\"1412\":1,\"1426\":1,\"1428\":1,\"1431\":1,\"1432\":1,\"1435\":1,\"1438\":1,\"1441\":4,\"1484\":1,\"1580\":1,\"1594\":1,\"1596\":1,\"1599\":1,\"1600\":1,\"1603\":1,\"1606\":1,\"1609\":4,\"1652\":1,\"1776\":1,\"1802\":2,\"1832\":1,\"1890\":2,\"1894\":1,\"1905\":2,\"1909\":1,\"1920\":2,\"1924\":1,\"1933\":2,\"1937\":1,\"1946\":2,\"1950\":1,\"1961\":2,\"1965\":1,\"1979\":1,\"2048\":3,\"2056\":1,\"2186\":2,\"2187\":1,\"2188\":1,\"2189\":1,\"2191\":1,\"2192\":1,\"2193\":1,\"2244\":1,\"2441\":1,\"2445\":1,\"2447\":1,\"2609\":1,\"2697\":1,\"2782\":1,\"2957\":3,\"2983\":1,\"3028\":1,\"3036\":1,\"3058\":1,\"3064\":1,\"3069\":1,\"3073\":1,\"3087\":1,\"3158\":1,\"3161\":1,\"3173\":1,\"3183\":1,\"3312\":14,\"3363\":1,\"3581\":1,\"3590\":1,\"3597\":1,\"3602\":1,\"3639\":1,\"3661\":1,\"3726\":1,\"3780\":1,\"3790\":1,\"3807\":1,\"3816\":1,\"3878\":1,\"4007\":1,\"4182\":3,\"4208\":1,\"4336\":1,\"4362\":2,\"4392\":1,\"4458\":1,\"4472\":1,\"4474\":1,\"4477\":1,\"4478\":1,\"4481\":1,\"4484\":1,\"4487\":4,\"4530\":1,\"4577\":1,\"4774\":1,\"4778\":1,\"4780\":1,\"4942\":1,\"5030\":1,\"5071\":1,\"5106\":1,\"5122\":1,\"5152\":2,\"5156\":1,\"5162\":3,\"5166\":1,\"5175\":2,\"5179\":1,\"5239\":2,\"5240\":1,\"5241\":1,\"5242\":1,\"5244\":1,\"5245\":1,\"5246\":1,\"5279\":1,\"5287\":1,\"5309\":1,\"5315\":1,\"5320\":1,\"5324\":1,\"5338\":1,\"5409\":1,\"5412\":1,\"5424\":1,\"5434\":1}}],[\"1完全可以hold住任何场景\",{\"1\":{\"5165\":1}}],[\"1对称加密算法有哪些\",{\"0\":{\"3276\":1}}],[\"1值等不被收集在彩虹表里\",{\"1\":{\"3239\":1,\"3256\":1}}],[\"1值等对应的原文\",{\"1\":{\"3239\":1}}],[\"1值等\",{\"1\":{\"3239\":1}}],[\"18666666666\",{\"1\":{\"3229\":1,\"3235\":1}}],[\"18\",{\"1\":{\"3052\":1,\"5303\":1}}],[\"17\",{\"1\":{\"3051\":1,\"5302\":1}}],[\"1分钟\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"14\",{\"1\":{\"3048\":1,\"5299\":1}}],[\"1400\",{\"1\":{\"2484\":2,\"4817\":2}}],[\"14主机\",{\"1\":{\"2153\":1,\"5206\":1}}],[\"14如果已经建立了连接\",{\"0\":{\"2119\":1}}],[\"1999\",{\"1\":{\"5162\":1}}],[\"19下午等了将近十多分钟面试官才进面试\",{\"1\":{\"3273\":1}}],[\"19700101\",{\"1\":{\"3249\":1}}],[\"19\",{\"1\":{\"3053\":1,\"5304\":1}}],[\"196\",{\"1\":{\"2153\":2,\"5206\":2}}],[\"19th\",{\"1\":{\"58\":1,\"3346\":1}}],[\"1针对\",{\"0\":{\"2121\":1}}],[\"1tcp\",{\"0\":{\"2013\":1,\"2052\":1,\"2095\":1,\"2106\":1}}],[\"1中的效率问题\",{\"1\":{\"1894\":1,\"1909\":1,\"1924\":1,\"1937\":1,\"1950\":1,\"1965\":1,\"5156\":1,\"5179\":1}}],[\"1局部性原理\",{\"0\":{\"1005\":1}}],[\"1什么是代理模式\",{\"0\":{\"687\":1}}],[\"1什么是反射机制\",{\"0\":{\"282\":1}}],[\"1说⼀说简单⼯⼚模式\",{\"0\":{\"676\":1}}],[\"1软件设计原则有哪些\",{\"0\":{\"665\":1}}],[\"10如何优化\",{\"0\":{\"2115\":1}}],[\"10什么是\",{\"0\":{\"2104\":1}}],[\"10086\",{\"1\":{\"2696\":1,\"5029\":1}}],[\"10000\",{\"1\":{\"2643\":1,\"4976\":1}}],[\"10000000\",{\"1\":{\"630\":1}}],[\"100\",{\"1\":{\"1844\":1,\"2182\":1,\"2504\":1,\"2505\":2,\"2506\":1,\"3921\":1,\"4837\":1,\"4838\":2,\"4839\":1,\"5235\":1}}],[\"10g\",{\"1\":{\"929\":2,\"5076\":2}}],[\"108461284\",{\"1\":{\"886\":1,\"3874\":1}}],[\"108988011\",{\"1\":{\"519\":1,\"3608\":1}}],[\"10\",{\"1\":{\"621\":1,\"893\":1,\"1844\":1,\"2471\":1,\"2643\":1,\"3044\":1,\"3081\":1,\"3881\":1,\"3921\":1,\"4804\":1,\"4976\":1,\"5295\":1,\"5332\":1}}],[\"1的低位就全是1\",{\"1\":{\"528\":1,\"3617\":1}}],[\"1add方法\",{\"0\":{\"478\":1}}],[\"1比较几个重要的方法\",{\"0\":{\"477\":1}}],[\"13如果已经建立了连接\",{\"0\":{\"2118\":1}}],[\"1358933\",{\"1\":{\"1870\":1,\"3947\":1}}],[\"13\",{\"1\":{\"426\":1,\"3047\":1,\"3084\":1,\"5298\":1,\"5335\":1}}],[\"138\",{\"1\":{\"81\":1,\"3369\":1}}],[\"126145847\",{\"1\":{\"3288\":1}}],[\"126875303\",{\"1\":{\"2911\":1,\"4136\":1}}],[\"12345678\",{\"1\":{\"3245\":1}}],[\"123456\",{\"1\":{\"3230\":1}}],[\"123416498\",{\"1\":{\"995\":1,\"5142\":1}}],[\"120627481\",{\"1\":{\"2733\":1,\"5066\":1}}],[\"1200\",{\"1\":{\"2484\":1,\"4817\":1}}],[\"12服务器出现大量\",{\"0\":{\"2117\":1}}],[\"124891266\",{\"1\":{\"2554\":1,\"4887\":1}}],[\"124349832\",{\"1\":{\"972\":1,\"5119\":1}}],[\"124580641\",{\"1\":{\"972\":2,\"5119\":2}}],[\"129526131\",{\"1\":{\"919\":1,\"3907\":1}}],[\"125768706\",{\"1\":{\"636\":1}}],[\"12\",{\"1\":{\"426\":2,\"1831\":1,\"3046\":1,\"3083\":1,\"4391\":1,\"5297\":1,\"5334\":1}}],[\"128106266\",{\"1\":{\"981\":3,\"5128\":3}}],[\"128\",{\"1\":{\"417\":1,\"2630\":1,\"4963\":1}}],[\"16分钟\",{\"0\":{\"3056\":1,\"5307\":1}}],[\"16位\",{\"1\":{\"2040\":1,\"2042\":1}}],[\"16\",{\"1\":{\"408\":1,\"412\":1,\"422\":1,\"426\":1,\"2048\":1,\"3050\":1,\"5301\":1}}],[\"1hashmap的容量\",{\"0\":{\"390\":1}}],[\"112252684\",{\"1\":{\"3288\":1}}],[\"110847701\",{\"1\":{\"2749\":1,\"3974\":1}}],[\"11服务器出现大量\",{\"0\":{\"2116\":1}}],[\"11月ietf给出了官方批准\",{\"1\":{\"1888\":1,\"1903\":1,\"1918\":1,\"1931\":1,\"1944\":1,\"1959\":1,\"5150\":1,\"5173\":1}}],[\"11\",{\"0\":{\"1841\":1,\"3918\":1},\"1\":{\"274\":2,\"3045\":1,\"3082\":1,\"3551\":2,\"5296\":1,\"5333\":1}}],[\"113550163\",{\"1\":{\"326\":1,\"3603\":1}}],[\"113\",{\"1\":{\"263\":1}}],[\"1java异常类层次结构\",{\"0\":{\"237\":1}}],[\"1异常\",{\"0\":{\"236\":1}}],[\"15分钟\",{\"0\":{\"3033\":1,\"5284\":1},\"1\":{\"2643\":1,\"4976\":1}}],[\"15\",{\"1\":{\"81\":1,\"3049\":1,\"3369\":1,\"5300\":1}}],[\"1\",{\"0\":{\"235\":1,\"236\":1,\"237\":2,\"246\":2,\"252\":2,\"259\":2,\"265\":2,\"270\":2,\"281\":1,\"282\":1,\"301\":1,\"309\":1,\"317\":1,\"332\":1,\"361\":1,\"384\":1,\"390\":1,\"404\":1,\"416\":1,\"430\":1,\"442\":1,\"478\":1,\"488\":1,\"518\":1,\"640\":1,\"1004\":1,\"1005\":1,\"1897\":1,\"2012\":1,\"2013\":1,\"2022\":1,\"2025\":1,\"2031\":1,\"2037\":1,\"2050\":1,\"2052\":1,\"2074\":1,\"2087\":1,\"2180\":3,\"2185\":2,\"2221\":1,\"2222\":1,\"3109\":1,\"3223\":1,\"3628\":1,\"5143\":1,\"5233\":3,\"5238\":2,\"5360\":1},\"1\":{\"23\":12,\"45\":1,\"68\":1,\"74\":1,\"117\":2,\"269\":1,\"302\":1,\"310\":1,\"318\":1,\"325\":1,\"334\":1,\"343\":1,\"344\":1,\"358\":1,\"363\":2,\"367\":1,\"378\":1,\"386\":1,\"402\":1,\"408\":1,\"411\":1,\"412\":1,\"413\":1,\"469\":1,\"480\":2,\"484\":2,\"486\":1,\"492\":1,\"494\":1,\"528\":1,\"573\":2,\"625\":1,\"626\":1,\"630\":1,\"673\":1,\"737\":1,\"787\":1,\"797\":1,\"817\":1,\"828\":1,\"874\":1,\"889\":1,\"923\":1,\"949\":2,\"975\":1,\"981\":1,\"1051\":2,\"1073\":2,\"1092\":1,\"1219\":2,\"1241\":2,\"1260\":1,\"1387\":2,\"1409\":2,\"1428\":1,\"1555\":2,\"1577\":2,\"1596\":1,\"1801\":1,\"1806\":2,\"1832\":1,\"1885\":1,\"1894\":1,\"1900\":1,\"1909\":1,\"1924\":1,\"1937\":1,\"1941\":1,\"1950\":1,\"1956\":1,\"1965\":1,\"1971\":1,\"2018\":2,\"2019\":1,\"2020\":1,\"2021\":2,\"2053\":1,\"2181\":3,\"2182\":2,\"2183\":3,\"2184\":3,\"2186\":4,\"2187\":2,\"2188\":2,\"2189\":2,\"2241\":1,\"2264\":1,\"2336\":1,\"2437\":1,\"2442\":1,\"2471\":1,\"2598\":2,\"2643\":1,\"2669\":2,\"2695\":1,\"2696\":1,\"2704\":1,\"2707\":3,\"2780\":2,\"2790\":1,\"2796\":1,\"2807\":1,\"2812\":1,\"2885\":1,\"2922\":2,\"2957\":1,\"2983\":1,\"3027\":1,\"3035\":1,\"3057\":1,\"3063\":1,\"3068\":1,\"3072\":1,\"3086\":1,\"3157\":1,\"3171\":1,\"3311\":12,\"3333\":1,\"3356\":1,\"3362\":1,\"3405\":2,\"3579\":1,\"3587\":1,\"3595\":1,\"3602\":1,\"3617\":1,\"3661\":1,\"3725\":1,\"3775\":1,\"3785\":1,\"3805\":1,\"3816\":1,\"3862\":1,\"3877\":1,\"4005\":2,\"4015\":1,\"4021\":1,\"4032\":1,\"4037\":1,\"4110\":1,\"4147\":2,\"4182\":1,\"4208\":1,\"4361\":1,\"4366\":2,\"4392\":1,\"4433\":2,\"4455\":2,\"4474\":1,\"4574\":1,\"4597\":1,\"4669\":1,\"4770\":1,\"4775\":1,\"4804\":1,\"4931\":2,\"4976\":1,\"5002\":2,\"5028\":1,\"5029\":1,\"5037\":1,\"5040\":3,\"5070\":1,\"5096\":2,\"5122\":1,\"5128\":1,\"5146\":1,\"5156\":1,\"5162\":2,\"5165\":1,\"5166\":2,\"5179\":1,\"5234\":3,\"5235\":2,\"5236\":3,\"5237\":3,\"5239\":4,\"5240\":2,\"5241\":2,\"5242\":2,\"5278\":1,\"5286\":1,\"5308\":1,\"5314\":1,\"5319\":1,\"5323\":1,\"5337\":1,\"5408\":1,\"5422\":1}}],[\"页脚\",{\"1\":{\"19\":1,\"136\":1,\"3307\":1,\"3424\":1}}],[\"页面单位时间的访问数\",{\"1\":{\"2602\":1,\"4935\":1}}],[\"页面结构\",{\"0\":{\"127\":1,\"3415\":1}}],[\"页面内容\",{\"0\":{\"120\":1,\"3408\":1}}],[\"页面配置\",{\"0\":{\"112\":1,\"3400\":1},\"1\":{\"119\":1,\"3407\":1}}],[\"页面引入配置\",{\"1\":{\"31\":1,\"3319\":1}}],[\"页面信息\",{\"0\":{\"114\":1,\"3402\":1},\"1\":{\"13\":1,\"3301\":1}}],[\"页面展示\",{\"1\":{\"4\":1,\"96\":1,\"3292\":1,\"3384\":1}}],[\"评论\",{\"1\":{\"18\":1,\"133\":1,\"3103\":1,\"3306\":1,\"3421\":1,\"5354\":1}}],[\"贡献者\",{\"1\":{\"14\":1,\"132\":1,\"3302\":1,\"3420\":1}}],[\"侧边栏\",{\"1\":{\"11\":1,\"135\":1,\"3299\":1,\"3423\":1}}],[\"展示\",{\"0\":{\"25\":1,\"3313\":1},\"1\":{\"3\":1,\"95\":1,\"3291\":1,\"3383\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,Et(t,{fields:[p.heading,p.text,p.customFields],storeFields:[p.heading,p.text,p.customFields]})]));self.onmessage=({data:{query:e,locale:t,options:s}})=>{self.postMessage(kt(e,vt[t],s))};
//# sourceMappingURL=index.js.map
