const it="ENTRIES",R="KEYS",q="VALUES",_="";class S{constructor(t,s){const n=t._tree,i=Array.from(n.keys());this.set=t,this._type=s,this._path=i.length>0?[{node:n,keys:i}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=x(this._path);if(x(s)===_)return{done:!1,value:this.result()};const n=t.get(x(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=x(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>x(t)).filter(t=>t!==_).join("")}value(){return x(this._path).node.get(_)}result(){switch(this._type){case q:return this.value();case R:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const x=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const i=t.length+1,u=i+s,o=new Uint8Array(u*i).fill(s+1);for(let r=0;r<i;++r)o[r]=r;for(let r=1;r<u;++r)o[r*i]=r;return P(e,t,s,n,o,1,i,""),n},P=(e,t,s,n,i,u,o,r)=>{const a=u*o;t:for(const c of e.keys())if(c===_){const d=i[a-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const m=c[l],F=o*d,f=F-o;let h=i[F];const g=Math.max(0,d-s-1),A=Math.min(o-1,d+s);for(let C=g;C<A;++C){const B=m!==t[C],b=i[f+C]+ +B,z=i[f+C+1]+1,D=i[F+C]+1,W=i[F+C+1]=Math.min(b,z,D);W<h&&(h=W)}if(h>s)continue t}P(e.get(c),t,s,n,i,d,o,r+c)}};let N=class v{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[i,u]=V(n);for(const o of i.keys())if(o!==_&&o.startsWith(u)){const r=new Map;return r.set(o.slice(u.length),i.get(o)),new v(r,t)}}return new v(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new S(this,it)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=j(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=j(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new S(this,R)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,L(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=L(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=L(this._tree,t);let i=n.get(_);return i===void 0&&n.set(_,i=s()),i}values(){return new S(this,q)}[Symbol.iterator](){return this.entries()}static from(t){const s=new v;for(const[n,i]of t)s.set(n,i);return s}static fromObject(t){return v.from(Object.entries(t))}};const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},j=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return j(e.get(s),t.slice(s.length))},L=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const o=Math.min(s-n,u.length);let r=1;for(;r<o&&t[n+r]===u[r];)++r;const a=e.get(u);if(r===u.length)e=a;else{const c=new Map;c.set(u.slice(r),a),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const i=new Map;return e.set(t.slice(n),i),i}return e},ot=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)G(n);else if(s.size===1){const[i,u]=s.entries().next().value;J(n,i,u)}}},G=e=>{if(e.length===0)return;const[t,s]=V(e);if(t.delete(s),t.size===0)G(e.slice(0,-1));else if(t.size===1){const[n,i]=t.entries().next().value;n!==_&&J(e.slice(0,-1),n,i)}},J=(e,t,s)=>{if(e.length===0)return;const[n,i]=V(e);n.set(i+t,s),n.delete(i)},V=e=>e[e.length-1],rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,T="or",U="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},H=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},ht=({score:e},{score:t})=>t-e,dt=()=>new Map,O=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},K=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,at={[T]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:i,terms:u,match:o}=t.get(s);n.score=n.score+i,n.match=Object.assign(n.match,o),H(n.terms,u)}}return e},[U]:(e,t)=>{const s=new Map;for(const n of t.keys()){const i=e.get(n);if(i==null)continue;const{score:u,terms:o,match:r}=t.get(n);H(i.terms,o),s.set(n,{score:i.score+u,terms:i.terms,match:Object.assign(i.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},ft=(e,t,s,n,i,u)=>{const{k:o,b:r,d:a}=u;return Math.log(1+(s-t+.5)/(t+.5))*(a+e*(o+1)/(e+o*(1-r+r*n/i)))},Ft=e=>(t,s,n)=>{const i=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:i,prefix:u}},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},X={combineWith:T,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:U,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={..._t,...Y};class At{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...X,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new N,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const i={};for(const[u,o]of n)i[u]=Object.fromEntries(o);t.push([s,i])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const Q=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},Z=(e,t,s,n)=>{for(const i of Object.keys(e._fieldIds))if(e._fieldIds[i]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${i}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},Ct=(e,t,s,n)=>{if(!e._index.has(n)){Z(e,s,t,n);return}const i=e._index.fetch(n,dt),u=i.get(t);u==null||u.get(s)==null?Z(e,s,t,n):u.get(s)<=1?u.size<=1?i.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},tt=(e,t=T)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(at[s])||new Map},$=(e,t,s,n,i,u,o,r,a=new Map)=>{if(i==null)return a;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],m=i.get(l);if(m==null)continue;let F=m.size;const f=e._avgFieldLength[l];for(const h of m.keys()){if(!e._documentIds.has(h)){Ct(e,l,h,s),F-=1;continue}const g=o?o(e._documentIds.get(h),s,e._storedFields.get(h)):1;if(!g)continue;const A=m.get(h),C=e._fieldLength.get(h)[l],B=ft(A,F,e._documentCount,C,f,r),b=n*d*g*B,z=a.get(h);if(z){z.score+=b,lt(z.terms,t);const D=K(z.match,s);D?D.push(c):z.match[s]=[c]}else a.set(h,{score:b,terms:[t],match:{[s]:[c]}})}}return a},zt=(e,t,s)=>{const n={...e._options.searchOptions,...s},i=(n.fields||e._options.fields).reduce((h,g)=>({...h,[g]:K(n.boost,g)||1}),{}),{boostDocument:u,weights:o,maxFuzzy:r,bm25:a}=n,{fuzzy:c,prefix:d}={...X.weights,...o},l=e._index.get(t.term),m=$(e,t.term,t.term,1,l,i,u,a);let F,f;if(t.prefix&&(F=e._index.atPrefix(t.term)),t.fuzzy){const h=t.fuzzy===!0?.2:t.fuzzy,g=h<1?Math.min(r,Math.round(t.term.length*h)):h;g&&(f=e._index.fuzzyGet(t.term,g))}if(F)for(const[h,g]of F){const A=h.length-t.term.length;if(!A)continue;f==null||f.delete(h);const C=d*h.length/(h.length+.3*A);$(e,t.term,h,C,g,i,u,a,m)}if(f)for(const h of f.keys()){const[g,A]=f.get(h);if(!A)continue;const C=c*h.length/(h.length+A);$(e,t.term,h,C,g,i,u,a,m)}return m},et=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(m=>et(e,m,d));return tt(l,d.combineWith)}const{tokenize:n,processTerm:i,searchOptions:u}=e._options,o={tokenize:n,processTerm:i,...u,...s},{tokenize:r,processTerm:a}=o,c=r(t).flatMap(d=>a(d)).filter(d=>!!d).map(Ft(o)).map(d=>zt(e,d,o));return tt(c,o.combineWith)},xt=(e,t,s={})=>{const n=et(e,t,s),i=[];for(const[u,{score:o,terms:r,match:a}]of n){const c=r.length,d={id:e._documentIds.get(u),score:o*c,terms:Object.keys(a),match:a};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&i.push(d)}return i.sort(ht),i},Et=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:i,fieldLength:u,averageFieldLength:o,storedFields:r,dirtCount:a,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new At(d);l._documentCount=t,l._nextId=s,l._documentIds=O(n),l._idToShortId=new Map,l._fieldIds=i,l._fieldLength=O(u),l._avgFieldLength=o,l._storedFields=O(r),l._dirtCount=a||0,l._index=new N;for(const[m,F]of l._documentIds)l._idToShortId.set(F,m);for(const[m,F]of e){const f=new Map;for(const h of Object.keys(F)){let g=F[h];c===1&&(g=g.ds),f.set(parseInt(h,10),O(g))}l._index.set(m,f)}return l},st=Object.entries,wt=Object.fromEntries,E=100,w=20,M=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),i=[];let u=0,o=0;const r=(c,d=!1)=>{let l="";o===0?l=c.length>w?`… ${c.slice(-w)}`:c:d?l=c.length+o>E?`${c.slice(0,E-o)}… `:c:l=c.length>w?`${c.slice(0,w)} … ${c.slice(-w)}`:c,l&&i.push(l),o+=l.length,d||(i.push(["mark",t]),o+=t.length,o>=E&&i.push(" …"))};let a=s.indexOf(n,u);if(a===-1)return null;for(;a>=0;){const c=a+n.length;if(r(e.slice(u,a)),u=c,o>E)break;a=s.indexOf(n,u)}return o<E&&r(e.slice(u),!0),i};var p=(e=>(e.heading="h",e.anchor="a",e.text="t",e.customFields="c",e))(p||{}),k=(e=>(e.title="t",e.heading="h",e.text="p",e.custom="c",e))(k||{}),y=(e=>(e.type="t",e.key="k",e.anchor="a",e.header="h",e.index="i",e.display="d",e))(y||{});const nt=/[\u4e00-\u9fa5]/g,kt=(e,t,s={})=>{const n={};return xt(t,e,{fuzzy:.2,prefix:!0,boost:{[p.heading]:2,[p.text]:1,[p.customFields]:4},processTerm:i=>{const u=i.match(nt)||[],o=i.replace(nt,"").toLowerCase();return o?[o,...u]:[...u]},...s}).forEach(i=>{const{id:u,terms:o,score:r}=i,a=u.includes("/"),c=!a&&u.includes("#"),d=u.includes("@"),[l,m]=u.split(/[#@]/),{contents:F}=n[l]??={title:"",contents:[]};if(c)F.push([{[y.type]:k.heading,[y.key]:l,[y.anchor]:i[p.anchor],[y.display]:o.map(f=>M(i[p.heading],f)).filter(f=>f!==null)},r]);else if(a){const[f]=m.split("/"),{[p.heading]:h="",[p.anchor]:g=""}=Q(t,`${l}#${f}`)||{};F.push([{[y.type]:k.text,[y.key]:l,[y.header]:h,[y.anchor]:g,[y.display]:o.map(A=>M(i[p.text],A)).filter(A=>A!==null)},r])}else d?F.push([{[y.type]:k.custom,[y.key]:l,[y.index]:m,[y.display]:o.map(f=>i[p.customFields].map(h=>M(h,f))).flat().filter(f=>f!==null)},r]):F.push([{[y.type]:k.title,[y.key]:l,[y.display]:o.map(f=>M(i[p.heading],f)).filter(f=>f!==null)},r])}),st(n).sort(([,i],[,u])=>u.contents.reduce((o,[,r])=>o+r,0)-i.contents.reduce((o,[,r])=>o+r,0)).map(([i,{title:u,contents:o}])=>{if(!u){const r=Q(t,i);r&&(u=r[p.heading])}return{title:u,contents:o.map(([r])=>r)}})},vt=wt(st(JSON.parse("{\"/\":{\"documentCount\":7315,\"nextId\":7315,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#0/0\",\"2\":\"v-2e3eac9e\",\"3\":\"v-1473bf53\",\"4\":\"v-1473bf53#1\",\"5\":\"v-1473bf53#1/0\",\"6\":\"v-1473bf53#1/1\",\"7\":\"v-1473bf53#1/2\",\"8\":\"v-1473bf53#1/3\",\"9\":\"v-4e65ec78\",\"10\":\"v-4e65ec78#0/0\",\"11\":\"v-4e65ec78#0/1\",\"12\":\"v-4e65ec78#0/2\",\"13\":\"v-4e65ec78#0/3\",\"14\":\"v-4e65ec78#0/4\",\"15\":\"v-4e65ec78#0/5\",\"16\":\"v-4e65ec78#0/6\",\"17\":\"v-4e65ec78#0/7\",\"18\":\"v-4e65ec78#0/8\",\"19\":\"v-4e65ec78#0/9\",\"20\":\"v-4e65ec78#0/10\",\"21\":\"v-4e65ec78#0/11\",\"22\":\"v-4e65ec78#0/12\",\"23\":\"v-c151bf32\",\"24\":\"v-c151bf32#0/0\",\"25\":\"v-c151bf32#0/1\",\"26\":\"v-c151bf32#0/2\",\"27\":\"v-438ffe52\",\"28\":\"v-438ffe52#0/0\",\"29\":\"v-438ffe52#0/1\",\"30\":\"v-438ffe52#1\",\"31\":\"v-438ffe52#1/0\",\"32\":\"v-438ffe52#2\",\"33\":\"v-438ffe52#2/0\",\"34\":\"v-438ffe52#2/1\",\"35\":\"v-438ffe52#2/2\",\"36\":\"v-438ffe52#3\",\"37\":\"v-438ffe52#3/0\",\"38\":\"v-438ffe52#4\",\"39\":\"v-438ffe52#4/0\",\"40\":\"v-438ffe52#4/1\",\"41\":\"v-438ffe52#5\",\"42\":\"v-438ffe52#5/0\",\"43\":\"v-438ffe52#6\",\"44\":\"v-438ffe52#6/0\",\"45\":\"v-438ffe52#6/1\",\"46\":\"v-438ffe52#6/2\",\"47\":\"v-438ffe52#6/3\",\"48\":\"v-438ffe52#6/4\",\"49\":\"v-438ffe52#6/5\",\"50\":\"v-438ffe52#6/6\",\"51\":\"v-438ffe52#6/7\",\"52\":\"v-438ffe52#6/8\",\"53\":\"v-438ffe52#6/9\",\"54\":\"v-438ffe52#6/10\",\"55\":\"v-438ffe52#6/11\",\"56\":\"v-438ffe52#6/12\",\"57\":\"v-438ffe52#7\",\"58\":\"v-438ffe52#7/0\",\"59\":\"v-438ffe52#8\",\"60\":\"v-438ffe52#8/0\",\"61\":\"v-438ffe52#8/1\",\"62\":\"v-438ffe52#9\",\"63\":\"v-438ffe52#9/0\",\"64\":\"v-438ffe52#9/1\",\"65\":\"v-438ffe52#9/2\",\"66\":\"v-438ffe52#10\",\"67\":\"v-438ffe52#10/0\",\"68\":\"v-438ffe52#10/1\",\"69\":\"v-438ffe52#11\",\"70\":\"v-438ffe52#11/0\",\"71\":\"v-438ffe52#11/1\",\"72\":\"v-438ffe52#12\",\"73\":\"v-438ffe52#12/0\",\"74\":\"v-438ffe52#12/1\",\"75\":\"v-438ffe52#13\",\"76\":\"v-438ffe52#13/0\",\"77\":\"v-438ffe52#13/1\",\"78\":\"v-438ffe52#13/2\",\"79\":\"v-438ffe52#14\",\"80\":\"v-438ffe52#14/0\",\"81\":\"v-438ffe52#14/1\",\"82\":\"v-438ffe52#15\",\"83\":\"v-438ffe52#15/0\",\"84\":\"v-438ffe52#15/1\",\"85\":\"v-438ffe52#16\",\"86\":\"v-438ffe52#16/0\",\"87\":\"v-438ffe52#17\",\"88\":\"v-438ffe52#17/0\",\"89\":\"v-438ffe52#18\",\"90\":\"v-438ffe52#18/0\",\"91\":\"v-438ffe52#19\",\"92\":\"v-438ffe52#19/0\",\"93\":\"v-438ffe52#20\",\"94\":\"v-438ffe52#20/0\",\"95\":\"v-438ffe52#20/1\",\"96\":\"v-438ffe52#21\",\"97\":\"v-438ffe52#21/0\",\"98\":\"v-438ffe52#21/1\",\"99\":\"v-438ffe52#21/2\",\"100\":\"v-438ffe52#21/3\",\"101\":\"v-438ffe52#21/4\",\"102\":\"v-438ffe52#22\",\"103\":\"v-438ffe52#22/0\",\"104\":\"v-438ffe52#23\",\"105\":\"v-438ffe52#23/0\",\"106\":\"v-438ffe52#23/1\",\"107\":\"v-438ffe52#24\",\"108\":\"v-438ffe52#24/0\",\"109\":\"v-438ffe52#25\",\"110\":\"v-438ffe52#25/0\",\"111\":\"v-438ffe52#26\",\"112\":\"v-438ffe52#26/0\",\"113\":\"v-438ffe52#26/1\",\"114\":\"v-6e19edb7\",\"115\":\"v-6e19edb7#0/0\",\"116\":\"v-6e19edb7#1\",\"117\":\"v-6e19edb7#1/0\",\"118\":\"v-6e19edb7#1/1\",\"119\":\"v-6e19edb7#1/2\",\"120\":\"v-6e19edb7#1/3\",\"121\":\"v-6e19edb7#1/4\",\"122\":\"v-6e19edb7#2\",\"123\":\"v-6e19edb7#2/0\",\"124\":\"v-6e19edb7#2/1\",\"125\":\"v-6e19edb7#2/2\",\"126\":\"v-6e19edb7#2/3\",\"127\":\"v-6e19edb7#2/4\",\"128\":\"v-6e19edb7#2/5\",\"129\":\"v-6e19edb7#3\",\"130\":\"v-6e19edb7#3/0\",\"131\":\"v-6e19edb7#3/1\",\"132\":\"v-6e19edb7#3/2\",\"133\":\"v-6e19edb7#3/3\",\"134\":\"v-6e19edb7#3/4\",\"135\":\"v-6e19edb7#3/5\",\"136\":\"v-6e19edb7#3/6\",\"137\":\"v-6e19edb7#3/7\",\"138\":\"v-6e19edb7#3/8\",\"139\":\"v-6e19edb7#3/9\",\"140\":\"v-6e19edb7#3/10\",\"141\":\"v-fffb8e28\",\"142\":\"v-fffb8e28#1\",\"143\":\"v-fffb8e28#2\",\"144\":\"v-fffb8e28#2/0\",\"145\":\"v-fffb8e28#2/1\",\"146\":\"v-fffb8e28#3\",\"147\":\"v-fffb8e28#3/0\",\"148\":\"v-fffb8e28#3/1\",\"149\":\"v-151af027\",\"150\":\"v-151af027#0/0\",\"151\":\"v-151af027#0/1\",\"152\":\"v-151af027#0/2\",\"153\":\"v-2d0ad528\",\"154\":\"v-2d0ad528#0/0\",\"155\":\"v-2d0ad528#0/1\",\"156\":\"v-2d0ad528#0/2\",\"157\":\"v-269ae70f\",\"158\":\"v-5d5c2d30\",\"159\":\"v-5d5c2d30#1\",\"160\":\"v-5d5c2d30#1/0\",\"161\":\"v-5d5c2d30#2\",\"162\":\"v-5d5c2d30#2/0\",\"163\":\"v-5d5c2d30#2/1\",\"164\":\"v-177e1f06\",\"165\":\"v-177e1f06#0/0\",\"166\":\"v-5d5821d6\",\"167\":\"v-5d5821d6#1\",\"168\":\"v-5d5821d6#1/0\",\"169\":\"v-5d5821d6#2\",\"170\":\"v-5d5821d6#2/0\",\"171\":\"v-5d5821d6#2/1\",\"172\":\"v-0b6fc5f8\",\"173\":\"v-0b6fc5f8#0/0\",\"174\":\"v-a4e90f26\",\"175\":\"v-a4e90f26#1\",\"176\":\"v-a4e90f26#2\",\"177\":\"v-a4e90f26#2/0\",\"178\":\"v-a4e90f26#2/1\",\"179\":\"v-a4e90f26#2/2\",\"180\":\"v-a4e90f26#2/3\",\"181\":\"v-a4e90f26#2/4\",\"182\":\"v-a4e90f26#3\",\"183\":\"v-a4e90f26#3/0\",\"184\":\"v-a4e90f26#3/1\",\"185\":\"v-a4e90f26#3/2\",\"186\":\"v-a4e90f26#3/3\",\"187\":\"v-a4e90f26#3/4\",\"188\":\"v-a4e90f26#4\",\"189\":\"v-a4e90f26#4/0\",\"190\":\"v-a4e90f26#4/1\",\"191\":\"v-a4e90f26#4/2\",\"192\":\"v-a4e90f26#4/3\",\"193\":\"v-a4e90f26#4/4\",\"194\":\"v-a4e90f26#4/5\",\"195\":\"v-a4e90f26#4/6\",\"196\":\"v-a4e90f26#4/7\",\"197\":\"v-a4e90f26#4/8\",\"198\":\"v-a4e90f26#4/9\",\"199\":\"v-a4e90f26#4/10\",\"200\":\"v-a4e90f26#4/11\",\"201\":\"v-a4e90f26#4/12\",\"202\":\"v-a4e90f26#5\",\"203\":\"v-a4e90f26#5/0\",\"204\":\"v-a4e90f26#5/1\",\"205\":\"v-a4e90f26#5/2\",\"206\":\"v-a4e90f26#5/3\",\"207\":\"v-a4e90f26#5/4\",\"208\":\"v-a4e90f26#5/5\",\"209\":\"v-a4e90f26#5/6\",\"210\":\"v-a4e90f26#5/7\",\"211\":\"v-a4e90f26#5/8\",\"212\":\"v-a4e90f26#5/9\",\"213\":\"v-a4e90f26#5/10\",\"214\":\"v-a4e90f26#5/11\",\"215\":\"v-a4e90f26#5/12\",\"216\":\"v-a4e90f26#5/13\",\"217\":\"v-a4e90f26#6\",\"218\":\"v-a4e90f26#6/0\",\"219\":\"v-a4e90f26#6/1\",\"220\":\"v-a4e90f26#6/2\",\"221\":\"v-a4e90f26#7\",\"222\":\"v-a4e90f26#7/0\",\"223\":\"v-a4e90f26#7/1\",\"224\":\"v-a4e90f26#7/2\",\"225\":\"v-a4e90f26#7/3\",\"226\":\"v-a4e90f26#7/4\",\"227\":\"v-a4e90f26#7/5\",\"228\":\"v-a4e90f26#7/6\",\"229\":\"v-a4e90f26#8\",\"230\":\"v-a4e90f26#8/0\",\"231\":\"v-a4e90f26#8/1\",\"232\":\"v-a4e90f26#8/2\",\"233\":\"v-a4e90f26#8/3\",\"234\":\"v-a4e90f26#8/4\",\"235\":\"v-a4e90f26#9\",\"236\":\"v-a4e90f26#9/0\",\"237\":\"v-a4e90f26#9/1\",\"238\":\"v-a4e90f26#10\",\"239\":\"v-a4e90f26#10/2\",\"240\":\"v-a4e90f26#10/3\",\"241\":\"v-a4e90f26#11\",\"242\":\"v-a4e90f26#11/0\",\"243\":\"v-a4e90f26#11/1\",\"244\":\"v-a4e90f26#11/2\",\"245\":\"v-a4e90f26#11/3\",\"246\":\"v-a4e90f26#11/4\",\"247\":\"v-a4e90f26#11/5\",\"248\":\"v-a4e90f26#11/6\",\"249\":\"v-a4e90f26#11/7\",\"250\":\"v-a4e90f26#11/8\",\"251\":\"v-a4e90f26#12\",\"252\":\"v-a4e90f26#12/9\",\"253\":\"v-a4e90f26#12/10\",\"254\":\"v-a4e90f26#12/11\",\"255\":\"v-a4e90f26#12/12\",\"256\":\"v-a4e90f26#12/13\",\"257\":\"v-a4e90f26#12/14\",\"258\":\"v-a4e90f26#12/15\",\"259\":\"v-a4e90f26#12/16\",\"260\":\"v-a4e90f26#13\",\"261\":\"v-a4e90f26#13/0\",\"262\":\"v-a4e90f26#13/1\",\"263\":\"v-a4e90f26#13/2\",\"264\":\"v-a4e90f26#13/3\",\"265\":\"v-a4e90f26#13/4\",\"266\":\"v-a4e90f26#13/5\",\"267\":\"v-a4e90f26#13/6\",\"268\":\"v-a4e90f26#13/7\",\"269\":\"v-a4e90f26#13/8\",\"270\":\"v-a4e90f26#14\",\"271\":\"v-a4e90f26#14/0\",\"272\":\"v-a4e90f26#14/1\",\"273\":\"v-a4e90f26#14/2\",\"274\":\"v-a4e90f26#14/3\",\"275\":\"v-a4e90f26#14/4\",\"276\":\"v-a4e90f26#15\",\"277\":\"v-a4e90f26#15/0\",\"278\":\"v-a4e90f26#16\",\"279\":\"v-a4e90f26#16/0\",\"280\":\"v-a4e90f26#16/1\",\"281\":\"v-a4e90f26#16/2\",\"282\":\"v-a4e90f26#16/3\",\"283\":\"v-a4e90f26#16/4\",\"284\":\"v-a4e90f26#17\",\"285\":\"v-a4e90f26#17/0\",\"286\":\"v-a4e90f26#17/1\",\"287\":\"v-a4e90f26#17/2\",\"288\":\"v-a4e90f26#17/3\",\"289\":\"v-a4e90f26#17/4\",\"290\":\"v-a4e90f26#17/5\",\"291\":\"v-a4e90f26#17/6\",\"292\":\"v-a4e90f26#17/7\",\"293\":\"v-a4e90f26#17/8\",\"294\":\"v-a4e90f26#18\",\"295\":\"v-a4e90f26#19\",\"296\":\"v-a4e90f26#20\",\"297\":\"v-a4e90f26#20/9\",\"298\":\"v-a4e90f26#20/10\",\"299\":\"v-a4e90f26#20/11\",\"300\":\"v-a4e90f26#21\",\"301\":\"v-a4e90f26#21/0\",\"302\":\"v-a4e90f26#21/1\",\"303\":\"v-a4e90f26#21/2\",\"304\":\"v-a4e90f26#21/3\",\"305\":\"v-a4e90f26#21/4\",\"306\":\"v-a4e90f26#21/5\",\"307\":\"v-a4e90f26#22\",\"308\":\"v-a4e90f26#22/0\",\"309\":\"v-a4e90f26#22/1\",\"310\":\"v-a4e90f26#22/2\",\"311\":\"v-a4e90f26#22/3\",\"312\":\"v-a4e90f26#22/4\",\"313\":\"v-a4e90f26#22/5\",\"314\":\"v-a4e90f26#22/6\",\"315\":\"v-a4e90f26#22/7\",\"316\":\"v-a4e90f26#22/8\",\"317\":\"v-a4e90f26#22/9\",\"318\":\"v-a4e90f26#22/10\",\"319\":\"v-a4e90f26#22/11\",\"320\":\"v-a4e90f26#22/12\",\"321\":\"v-a4e90f26#22/13\",\"322\":\"v-a4e90f26#23\",\"323\":\"v-a4e90f26#24\",\"324\":\"v-a4e90f26#24/0\",\"325\":\"v-a4e90f26#24/1\",\"326\":\"v-a4e90f26#24/2\",\"327\":\"v-a4e90f26#24/3\",\"328\":\"v-a4e90f26#25\",\"329\":\"v-a4e90f26#25/4\",\"330\":\"v-a4e90f26#26\",\"331\":\"v-a4e90f26#26/5\",\"332\":\"v-a4e90f26#26/6\",\"333\":\"v-a4e90f26#26/7\",\"334\":\"v-a4e90f26#26/8\",\"335\":\"v-a4e90f26#27\",\"336\":\"v-a4e90f26#27/9\",\"337\":\"v-a4e90f26#27/10\",\"338\":\"v-a4e90f26#27/11\",\"339\":\"v-a4e90f26#27/12\",\"340\":\"v-a4e90f26#28\",\"341\":\"v-a4e90f26#28/0\",\"342\":\"v-a4e90f26#28/1\",\"343\":\"v-a4e90f26#28/2\",\"344\":\"v-a4e90f26#29\",\"345\":\"v-a4e90f26#29/0\",\"346\":\"v-a4e90f26#29/1\",\"347\":\"v-a4e90f26#29/2\",\"348\":\"v-a4e90f26#29/3\",\"349\":\"v-a4e90f26#30\",\"350\":\"v-a4e90f26#30/0\",\"351\":\"v-a4e90f26#30/1\",\"352\":\"v-a4e90f26#30/2\",\"353\":\"v-a4e90f26#31\",\"354\":\"v-a4e90f26#31/0\",\"355\":\"v-a4e90f26#31/1\",\"356\":\"v-a4e90f26#32\",\"357\":\"v-a4e90f26#32/0\",\"358\":\"v-a4e90f26#33\",\"359\":\"v-a4e90f26#33/0\",\"360\":\"v-a4e90f26#34\",\"361\":\"v-a4e90f26#34/0\",\"362\":\"v-a4e90f26#34/1\",\"363\":\"v-a4e90f26#34/2\",\"364\":\"v-a4e90f26#34/3\",\"365\":\"v-a4e90f26#34/4\",\"366\":\"v-a4e90f26#34/5\",\"367\":\"v-a4e90f26#34/6\",\"368\":\"v-a4e90f26#34/7\",\"369\":\"v-a4e90f26#34/8\",\"370\":\"v-a4e90f26#34/9\",\"371\":\"v-a4e90f26#35\",\"372\":\"v-a4e90f26#35/0\",\"373\":\"v-a4e90f26#35/1\",\"374\":\"v-a4e90f26#35/2\",\"375\":\"v-a4e90f26#35/3\",\"376\":\"v-a4e90f26#35/4\",\"377\":\"v-a4e90f26#35/5\",\"378\":\"v-a4e90f26#35/6\",\"379\":\"v-a4e90f26#35/7\",\"380\":\"v-a4e90f26#35/8\",\"381\":\"v-a4e90f26#35/9\",\"382\":\"v-a4e90f26#35/10\",\"383\":\"v-a4e90f26#36\",\"384\":\"v-a4e90f26#36/0\",\"385\":\"v-a4e90f26#36/1\",\"386\":\"v-a4e90f26#37\",\"387\":\"v-a4e90f26#37/0\",\"388\":\"v-a4e90f26#37/1\",\"389\":\"v-a4e90f26#38\",\"390\":\"v-a4e90f26#38/0\",\"391\":\"v-a4e90f26#38/1\",\"392\":\"v-a4e90f26#38/2\",\"393\":\"v-a4e90f26#38/3\",\"394\":\"v-a4e90f26#38/4\",\"395\":\"v-a4e90f26#38/5\",\"396\":\"v-a4e90f26#38/6\",\"397\":\"v-a4e90f26#38/7\",\"398\":\"v-a4e90f26#38/8\",\"399\":\"v-a4e90f26#38/9\",\"400\":\"v-a4e90f26#38/10\",\"401\":\"v-a4e90f26#38/11\",\"402\":\"v-a4e90f26#38/12\",\"403\":\"v-a4e90f26#38/13\",\"404\":\"v-a4e90f26#38/14\",\"405\":\"v-a4e90f26#38/15\",\"406\":\"v-a4e90f26#38/16\",\"407\":\"v-a4e90f26#39\",\"408\":\"v-a4e90f26#40\",\"409\":\"v-a4e90f26#40/0\",\"410\":\"v-a4e90f26#40/1\",\"411\":\"v-a4e90f26#41\",\"412\":\"v-a4e90f26#41/2\",\"413\":\"v-a4e90f26#41/3\",\"414\":\"v-a4e90f26#42\",\"415\":\"v-a4e90f26#43\",\"416\":\"v-a4e90f26#43/4\",\"417\":\"v-a4e90f26#43/5\",\"418\":\"v-a4e90f26#43/6\",\"419\":\"v-a4e90f26#43/7\",\"420\":\"v-a4e90f26#44\",\"421\":\"v-a4e90f26#44/0\",\"422\":\"v-a4e90f26#44/1\",\"423\":\"v-a4e90f26#45\",\"424\":\"v-a4e90f26#45/0\",\"425\":\"v-a4e90f26#45/1\",\"426\":\"v-a4e90f26#45/2\",\"427\":\"v-a4e90f26#45/3\",\"428\":\"v-a4e90f26#45/4\",\"429\":\"v-a4e90f26#45/5\",\"430\":\"v-a4e90f26#45/6\",\"431\":\"v-a4e90f26#45/7\",\"432\":\"v-a4e90f26#45/8\",\"433\":\"v-a4e90f26#45/9\",\"434\":\"v-a4e90f26#45/10\",\"435\":\"v-a4e90f26#45/11\",\"436\":\"v-a4e90f26#45/12\",\"437\":\"v-a4e90f26#46\",\"438\":\"v-a4e90f26#46/13\",\"439\":\"v-a4e90f26#46/14\",\"440\":\"v-a4e90f26#46/15\",\"441\":\"v-a4e90f26#46/16\",\"442\":\"v-a4e90f26#46/17\",\"443\":\"v-a4e90f26#46/18\",\"444\":\"v-a4e90f26#46/19\",\"445\":\"v-a4e90f26#46/20\",\"446\":\"v-a4e90f26#46/21\",\"447\":\"v-a4e90f26#46/22\",\"448\":\"v-a4e90f26#46/23\",\"449\":\"v-a4e90f26#46/24\",\"450\":\"v-a4e90f26#46/25\",\"451\":\"v-a4e90f26#46/26\",\"452\":\"v-ce4d5100\",\"453\":\"v-ce4d5100#1\",\"454\":\"v-ce4d5100#2\",\"455\":\"v-ce4d5100#2/0\",\"456\":\"v-ce4d5100#2/1\",\"457\":\"v-ce4d5100#2/2\",\"458\":\"v-ce4d5100#2/3\",\"459\":\"v-ce4d5100#2/4\",\"460\":\"v-ce4d5100#2/5\",\"461\":\"v-ce4d5100#2/6\",\"462\":\"v-ce4d5100#2/7\",\"463\":\"v-ce4d5100#3\",\"464\":\"v-ce4d5100#3/8\",\"465\":\"v-ce4d5100#3/9\",\"466\":\"v-ce4d5100#3/10\",\"467\":\"v-ce4d5100#3/11\",\"468\":\"v-ce4d5100#3/12\",\"469\":\"v-ce4d5100#4\",\"470\":\"v-ce4d5100#4/0\",\"471\":\"v-ce4d5100#4/1\",\"472\":\"v-ce4d5100#4/2\",\"473\":\"v-ce4d5100#4/3\",\"474\":\"v-ce4d5100#4/4\",\"475\":\"v-ce4d5100#4/5\",\"476\":\"v-ce4d5100#5\",\"477\":\"v-ce4d5100#5/6\",\"478\":\"v-ce4d5100#5/7\",\"479\":\"v-ce4d5100#5/8\",\"480\":\"v-ce4d5100#5/9\",\"481\":\"v-ce4d5100#5/10\",\"482\":\"v-ce4d5100#6\",\"483\":\"v-ce4d5100#6/0\",\"484\":\"v-ce4d5100#6/1\",\"485\":\"v-ce4d5100#6/2\",\"486\":\"v-ce4d5100#6/3\",\"487\":\"v-ce4d5100#7\",\"488\":\"v-ce4d5100#7/4\",\"489\":\"v-ce4d5100#7/5\",\"490\":\"v-ce4d5100#7/6\",\"491\":\"v-ce4d5100#7/7\",\"492\":\"v-ce4d5100#7/8\",\"493\":\"v-ce4d5100#7/9\",\"494\":\"v-ce4d5100#7/10\",\"495\":\"v-ce4d5100#7/11\",\"496\":\"v-ce4d5100#7/12\",\"497\":\"v-ce4d5100#7/13\",\"498\":\"v-ce4d5100#8\",\"499\":\"v-ce4d5100#9\",\"500\":\"v-ce4d5100#9/0\",\"501\":\"v-ce4d5100#9/1\",\"502\":\"v-ce4d5100#9/2\",\"503\":\"v-ce4d5100#9/3\",\"504\":\"v-ce4d5100#9/4\",\"505\":\"v-ce4d5100#9/5\",\"506\":\"v-ce4d5100#9/6\",\"507\":\"v-ce4d5100#9/7\",\"508\":\"v-ce4d5100#9/8\",\"509\":\"v-ce4d5100#9/9\",\"510\":\"v-ce4d5100#9/10\",\"511\":\"v-ce4d5100#9/11\",\"512\":\"v-ce4d5100#9/12\",\"513\":\"v-ce4d5100#9/13\",\"514\":\"v-ce4d5100#9/14\",\"515\":\"v-ce4d5100#9/15\",\"516\":\"v-ce4d5100#9/16\",\"517\":\"v-ce4d5100#10\",\"518\":\"v-ce4d5100#10/17\",\"519\":\"v-ce4d5100#10/18\",\"520\":\"v-ce4d5100#10/19\",\"521\":\"v-ce4d5100#10/20\",\"522\":\"v-ce4d5100#10/21\",\"523\":\"v-ce4d5100#10/22\",\"524\":\"v-ce4d5100#10/23\",\"525\":\"v-ce4d5100#11\",\"526\":\"v-ce4d5100#11/0\",\"527\":\"v-ce4d5100#11/1\",\"528\":\"v-ce4d5100#11/2\",\"529\":\"v-ce4d5100#11/3\",\"530\":\"v-ce4d5100#11/4\",\"531\":\"v-ce4d5100#11/5\",\"532\":\"v-ce4d5100#11/6\",\"533\":\"v-ce4d5100#12\",\"534\":\"v-ce4d5100#12/0\",\"535\":\"v-ce4d5100#12/1\",\"536\":\"v-ce4d5100#12/2\",\"537\":\"v-ce4d5100#12/3\",\"538\":\"v-ce4d5100#12/4\",\"539\":\"v-ce4d5100#12/5\",\"540\":\"v-ce4d5100#12/6\",\"541\":\"v-ce4d5100#12/7\",\"542\":\"v-ce4d5100#12/8\",\"543\":\"v-ce4d5100#12/9\",\"544\":\"v-ce4d5100#12/10\",\"545\":\"v-ce4d5100#12/11\",\"546\":\"v-ce4d5100#12/12\",\"547\":\"v-ce4d5100#12/13\",\"548\":\"v-ce4d5100#12/14\",\"549\":\"v-ce4d5100#12/15\",\"550\":\"v-ce4d5100#12/16\",\"551\":\"v-ce4d5100#12/17\",\"552\":\"v-ce4d5100#12/18\",\"553\":\"v-ce4d5100#12/19\",\"554\":\"v-32ab3f8a\",\"555\":\"v-32ab3f8a#1\",\"556\":\"v-32ab3f8a#1/0\",\"557\":\"v-32ab3f8a#2\",\"558\":\"v-32ab3f8a#2/0\",\"559\":\"v-32ab3f8a#3\",\"560\":\"v-32ab3f8a#3/0\",\"561\":\"v-32ab3f8a#4\",\"562\":\"v-32ab3f8a#4/0\",\"563\":\"v-32ab3f8a#4/1\",\"564\":\"v-32ab3f8a#4/2\",\"565\":\"v-32ab3f8a#5\",\"566\":\"v-32ab3f8a#5/0\",\"567\":\"v-32ab3f8a#5/1\",\"568\":\"v-32ab3f8a#5/2\",\"569\":\"v-32ab3f8a#5/3\",\"570\":\"v-32ab3f8a#5/4\",\"571\":\"v-32ab3f8a#6\",\"572\":\"v-32ab3f8a#6/5\",\"573\":\"v-32ab3f8a#6/6\",\"574\":\"v-32ab3f8a#6/7\",\"575\":\"v-32ab3f8a#6/8\",\"576\":\"v-32ab3f8a#6/9\",\"577\":\"v-32ab3f8a#6/10\",\"578\":\"v-32ab3f8a#7\",\"579\":\"v-32ab3f8a#7/11\",\"580\":\"v-32ab3f8a#7/12\",\"581\":\"v-32ab3f8a#7/13\",\"582\":\"v-32ab3f8a#7/14\",\"583\":\"v-32ab3f8a#7/15\",\"584\":\"v-32ab3f8a#7/16\",\"585\":\"v-32ab3f8a#7/17\",\"586\":\"v-32ab3f8a#7/18\",\"587\":\"v-32ab3f8a#7/19\",\"588\":\"v-32ab3f8a#7/20\",\"589\":\"v-32ab3f8a#7/21\",\"590\":\"v-32ab3f8a#7/22\",\"591\":\"v-32ab3f8a#7/23\",\"592\":\"v-32ab3f8a#7/24\",\"593\":\"v-32ab3f8a#7/25\",\"594\":\"v-32ab3f8a#7/26\",\"595\":\"v-32ab3f8a#8\",\"596\":\"v-32ab3f8a#8/0\",\"597\":\"v-32ab3f8a#8/1\",\"598\":\"v-32ab3f8a#8/2\",\"599\":\"v-32ab3f8a#9\",\"600\":\"v-32ab3f8a#9/0\",\"601\":\"v-32ab3f8a#9/1\",\"602\":\"v-32ab3f8a#9/2\",\"603\":\"v-32ab3f8a#9/3\",\"604\":\"v-32ab3f8a#9/4\",\"605\":\"v-32ab3f8a#9/5\",\"606\":\"v-32ab3f8a#9/6\",\"607\":\"v-32ab3f8a#9/7\",\"608\":\"v-32ab3f8a#9/8\",\"609\":\"v-32ab3f8a#9/9\",\"610\":\"v-32ab3f8a#9/10\",\"611\":\"v-32ab3f8a#9/11\",\"612\":\"v-32ab3f8a#9/12\",\"613\":\"v-32ab3f8a#9/13\",\"614\":\"v-32ab3f8a#10\",\"615\":\"v-32ab3f8a#10/0\",\"616\":\"v-32ab3f8a#10/1\",\"617\":\"v-32ab3f8a#11\",\"618\":\"v-32ab3f8a#11/0\",\"619\":\"v-32ab3f8a#11/1\",\"620\":\"v-32ab3f8a#11/2\",\"621\":\"v-32ab3f8a#11/3\",\"622\":\"v-32ab3f8a#11/4\",\"623\":\"v-32ab3f8a#11/5\",\"624\":\"v-32ab3f8a#11/6\",\"625\":\"v-32ab3f8a#11/7\",\"626\":\"v-32ab3f8a#12\",\"627\":\"v-32ab3f8a#12/8\",\"628\":\"v-32ab3f8a#12/9\",\"629\":\"v-32ab3f8a#12/10\",\"630\":\"v-32ab3f8a#12/11\",\"631\":\"v-32ab3f8a#12/12\",\"632\":\"v-32ab3f8a#12/13\",\"633\":\"v-32ab3f8a#12/14\",\"634\":\"v-32ab3f8a#12/15\",\"635\":\"v-32ab3f8a#12/16\",\"636\":\"v-32ab3f8a#12/17\",\"637\":\"v-32ab3f8a#12/18\",\"638\":\"v-32ab3f8a#12/19\",\"639\":\"v-32ab3f8a#12/20\",\"640\":\"v-32ab3f8a#12/21\",\"641\":\"v-32ab3f8a#13\",\"642\":\"v-32ab3f8a#13/0\",\"643\":\"v-32ab3f8a#14\",\"644\":\"v-32ab3f8a#15\",\"645\":\"v-32ab3f8a#15/0\",\"646\":\"v-32ab3f8a#15/1\",\"647\":\"v-32ab3f8a#15/2\",\"648\":\"v-32ab3f8a#15/3\",\"649\":\"v-32ab3f8a#15/4\",\"650\":\"v-32ab3f8a#15/5\",\"651\":\"v-32ab3f8a#15/6\",\"652\":\"v-32ab3f8a#15/7\",\"653\":\"v-32ab3f8a#15/8\",\"654\":\"v-32ab3f8a#15/9\",\"655\":\"v-32ab3f8a#16\",\"656\":\"v-32ab3f8a#16/0\",\"657\":\"v-32ab3f8a#16/1\",\"658\":\"v-32ab3f8a#16/2\",\"659\":\"v-32ab3f8a#16/3\",\"660\":\"v-32ab3f8a#16/4\",\"661\":\"v-32ab3f8a#16/5\",\"662\":\"v-32ab3f8a#16/6\",\"663\":\"v-32ab3f8a#16/7\",\"664\":\"v-32ab3f8a#16/8\",\"665\":\"v-32ab3f8a#16/9\",\"666\":\"v-32ab3f8a#16/10\",\"667\":\"v-32ab3f8a#16/11\",\"668\":\"v-32ab3f8a#16/12\",\"669\":\"v-32ab3f8a#16/13\",\"670\":\"v-32ab3f8a#16/14\",\"671\":\"v-32ab3f8a#16/15\",\"672\":\"v-32ab3f8a#16/16\",\"673\":\"v-32ab3f8a#17\",\"674\":\"v-32ab3f8a#17/0\",\"675\":\"v-32ab3f8a#17/1\",\"676\":\"v-32ab3f8a#18\",\"677\":\"v-32ab3f8a#18/0\",\"678\":\"v-32ab3f8a#18/1\",\"679\":\"v-32ab3f8a#18/2\",\"680\":\"v-32ab3f8a#18/3\",\"681\":\"v-32ab3f8a#18/4\",\"682\":\"v-32ab3f8a#18/5\",\"683\":\"v-32ab3f8a#18/6\",\"684\":\"v-32ab3f8a#18/7\",\"685\":\"v-32ab3f8a#19\",\"686\":\"v-32ab3f8a#19/0\",\"687\":\"v-32ab3f8a#20\",\"688\":\"v-32ab3f8a#21\",\"689\":\"v-32ab3f8a#21/0\",\"690\":\"v-32ab3f8a#22\",\"691\":\"v-32ab3f8a#22/0\",\"692\":\"v-32ab3f8a#23\",\"693\":\"v-32ab3f8a#23/0\",\"694\":\"v-32ab3f8a#23/1\",\"695\":\"v-32ab3f8a#23/2\",\"696\":\"v-32ab3f8a#23/3\",\"697\":\"v-32ab3f8a#23/4\",\"698\":\"v-32ab3f8a#23/5\",\"699\":\"v-32ab3f8a#23/6\",\"700\":\"v-32ab3f8a#23/7\",\"701\":\"v-32ab3f8a#24\",\"702\":\"v-32ab3f8a#24/8\",\"703\":\"v-32ab3f8a#24/9\",\"704\":\"v-32ab3f8a#24/10\",\"705\":\"v-32ab3f8a#24/11\",\"706\":\"v-32ab3f8a#24/12\",\"707\":\"v-32ab3f8a#24/13\",\"708\":\"v-32ab3f8a#24/14\",\"709\":\"v-32ab3f8a#24/15\",\"710\":\"v-32ab3f8a#25\",\"711\":\"v-32ab3f8a#25/0\",\"712\":\"v-1ee00f36\",\"713\":\"v-1ee00f36#1\",\"714\":\"v-1ee00f36#1/0\",\"715\":\"v-1ee00f36#1/1\",\"716\":\"v-1ee00f36#1/2\",\"717\":\"v-1ee00f36#1/3\",\"718\":\"v-1ee00f36#1/4\",\"719\":\"v-1ee00f36#2\",\"720\":\"v-1ee00f36#2/0\",\"721\":\"v-1ee00f36#2/1\",\"722\":\"v-1ee00f36#2/2\",\"723\":\"v-1ee00f36#2/3\",\"724\":\"v-1ee00f36#2/4\",\"725\":\"v-1ee00f36#3\",\"726\":\"v-1ee00f36#3/0\",\"727\":\"v-1ee00f36#4\",\"728\":\"v-1ee00f36#4/0\",\"729\":\"v-1ee00f36#4/1\",\"730\":\"v-1ee00f36#4/2\",\"731\":\"v-1ee00f36#4/3\",\"732\":\"v-1ee00f36#4/4\",\"733\":\"v-1ee00f36#5\",\"734\":\"v-1ee00f36#5/0\",\"735\":\"v-1ee00f36#5/1\",\"736\":\"v-1ee00f36#5/2\",\"737\":\"v-1ee00f36#5/3\",\"738\":\"v-1ee00f36#5/4\",\"739\":\"v-1ee00f36#5/5\",\"740\":\"v-947319a4\",\"741\":\"v-947319a4#0/0\",\"742\":\"v-947319a4#0/1\",\"743\":\"v-947319a4#0/2\",\"744\":\"v-947319a4#0/3\",\"745\":\"v-947319a4#1\",\"746\":\"v-947319a4#1/4\",\"747\":\"v-947319a4#1/5\",\"748\":\"v-947319a4#1/6\",\"749\":\"v-947319a4#1/7\",\"750\":\"v-947319a4#1/8\",\"751\":\"v-947319a4#2\",\"752\":\"v-947319a4#2/0\",\"753\":\"v-947319a4#2/1\",\"754\":\"v-947319a4#2/2\",\"755\":\"v-947319a4#2/3\",\"756\":\"v-947319a4#2/4\",\"757\":\"v-947319a4#2/5\",\"758\":\"v-947319a4#2/6\",\"759\":\"v-947319a4#2/7\",\"760\":\"v-947319a4#3\",\"761\":\"v-947319a4#3/0\",\"762\":\"v-947319a4#3/1\",\"763\":\"v-947319a4#3/2\",\"764\":\"v-947319a4#3/3\",\"765\":\"v-947319a4#3/4\",\"766\":\"v-947319a4#3/5\",\"767\":\"v-947319a4#4\",\"768\":\"v-947319a4#4/0\",\"769\":\"v-947319a4#4/1\",\"770\":\"v-947319a4#4/2\",\"771\":\"v-947319a4#4/3\",\"772\":\"v-947319a4#4/4\",\"773\":\"v-1ef5aaba\",\"774\":\"v-1ef5aaba#1\",\"775\":\"v-1ef5aaba#1/0\",\"776\":\"v-1ef5aaba#1/1\",\"777\":\"v-1ef5aaba#1/2\",\"778\":\"v-1ef5aaba#1/3\",\"779\":\"v-1ef5aaba#1/4\",\"780\":\"v-1ef5aaba#1/5\",\"781\":\"v-1ef5aaba#1/6\",\"782\":\"v-1ef5aaba#1/7\",\"783\":\"v-1ef5aaba#1/8\",\"784\":\"v-1ef5aaba#2\",\"785\":\"v-1ef5aaba#2/0\",\"786\":\"v-1ef5aaba#2/1\",\"787\":\"v-1ef5aaba#2/2\",\"788\":\"v-1ef5aaba#2/3\",\"789\":\"v-1ef5aaba#2/4\",\"790\":\"v-1ef5aaba#2/5\",\"791\":\"v-1ef5aaba#2/6\",\"792\":\"v-1ef5aaba#2/7\",\"793\":\"v-1ef5aaba#2/8\",\"794\":\"v-1ef5aaba#2/9\",\"795\":\"v-1ef5aaba#2/10\",\"796\":\"v-1ef5aaba#2/11\",\"797\":\"v-1ef5aaba#2/12\",\"798\":\"v-1ef5aaba#2/13\",\"799\":\"v-1ef5aaba#2/14\",\"800\":\"v-1ef5aaba#2/15\",\"801\":\"v-1ef5aaba#2/16\",\"802\":\"v-1ef5aaba#2/17\",\"803\":\"v-1ef5aaba#3\",\"804\":\"v-1ef5aaba#3/0\",\"805\":\"v-1ef5aaba#3/1\",\"806\":\"v-1ef5aaba#3/2\",\"807\":\"v-1ef5aaba#3/3\",\"808\":\"v-1ef5aaba#3/4\",\"809\":\"v-1ef5aaba#4\",\"810\":\"v-1ef5aaba#5\",\"811\":\"v-1ef5aaba#5/5\",\"812\":\"v-1ef5aaba#5/6\",\"813\":\"v-1ef5aaba#5/7\",\"814\":\"v-1ef5aaba#5/8\",\"815\":\"v-1ef5aaba#5/9\",\"816\":\"v-1ef5aaba#5/10\",\"817\":\"v-1ef5aaba#5/11\",\"818\":\"v-1ef5aaba#5/12\",\"819\":\"v-1ef5aaba#5/13\",\"820\":\"v-1ef5aaba#6\",\"821\":\"v-1ef5aaba#6/0\",\"822\":\"v-1ef5aaba#6/1\",\"823\":\"v-1ef5aaba#6/2\",\"824\":\"v-1ef5aaba#6/3\",\"825\":\"v-1ef5aaba#6/4\",\"826\":\"v-1ef5aaba#6/5\",\"827\":\"v-1ef5aaba#6/6\",\"828\":\"v-1ef5aaba#6/7\",\"829\":\"v-1ef5aaba#6/8\",\"830\":\"v-1ef5aaba#7\",\"831\":\"v-1ef5aaba#7/0\",\"832\":\"v-1ef5aaba#7/1\",\"833\":\"v-1ef5aaba#7/2\",\"834\":\"v-1ef5aaba#7/3\",\"835\":\"v-1ef5aaba#7/4\",\"836\":\"v-1ef5aaba#7/5\",\"837\":\"v-1ef5aaba#7/6\",\"838\":\"v-1ef5aaba#7/7\",\"839\":\"v-1ef5aaba#7/8\",\"840\":\"v-1ef5aaba#7/9\",\"841\":\"v-1ef5aaba#7/10\",\"842\":\"v-1ef5aaba#7/11\",\"843\":\"v-1ef5aaba#7/12\",\"844\":\"v-1ef5aaba#7/13\",\"845\":\"v-1ef5aaba#7/14\",\"846\":\"v-1ef5aaba#7/15\",\"847\":\"v-1ef5aaba#7/16\",\"848\":\"v-1ef5aaba#7/17\",\"849\":\"v-5cfa3ff0\",\"850\":\"v-5cfa3ff0#1\",\"851\":\"v-5cfa3ff0#2\",\"852\":\"v-5cfa3ff0#2/0\",\"853\":\"v-5cfa3ff0#2/1\",\"854\":\"v-5cfa3ff0#2/2\",\"855\":\"v-5cfa3ff0#3\",\"856\":\"v-5cfa3ff0#3/0\",\"857\":\"v-5cfa3ff0#3/1\",\"858\":\"v-5cfa3ff0#3/2\",\"859\":\"v-5cfa3ff0#3/3\",\"860\":\"v-5cfa3ff0#4\",\"861\":\"v-5cfa3ff0#5\",\"862\":\"v-5cfa3ff0#5/0\",\"863\":\"v-5cfa3ff0#5/1\",\"864\":\"v-5cfa3ff0#5/2\",\"865\":\"v-5cfa3ff0#6\",\"866\":\"v-5cfa3ff0#6/0\",\"867\":\"v-5cfa3ff0#6/1\",\"868\":\"v-5cfa3ff0#7\",\"869\":\"v-5cfa3ff0#7/0\",\"870\":\"v-5cfa3ff0#8\",\"871\":\"v-5cfa3ff0#9\",\"872\":\"v-5cfa3ff0#9/0\",\"873\":\"v-5cfa3ff0#10\",\"874\":\"v-5cfa3ff0#10/0\",\"875\":\"v-5cfa3ff0#10/1\",\"876\":\"v-5cfa3ff0#11\",\"877\":\"v-5cfa3ff0#11/0\",\"878\":\"v-5cfa3ff0#11/1\",\"879\":\"v-5cfa3ff0#11/2\",\"880\":\"v-5cfa3ff0#11/3\",\"881\":\"v-5cfa3ff0#11/4\",\"882\":\"v-5cfa3ff0#11/5\",\"883\":\"v-5cfa3ff0#12\",\"884\":\"v-5cfa3ff0#13\",\"885\":\"v-5cfa3ff0#13/0\",\"886\":\"v-5cfa3ff0#14\",\"887\":\"v-5cfa3ff0#14/0\",\"888\":\"v-5cfa3ff0#14/1\",\"889\":\"v-5cfa3ff0#15\",\"890\":\"v-5cfa3ff0#15/0\",\"891\":\"v-5cfa3ff0#15/1\",\"892\":\"v-5cfa3ff0#16\",\"893\":\"v-5cfa3ff0#16/0\",\"894\":\"v-5cfa3ff0#16/1\",\"895\":\"v-5cfa3ff0#16/2\",\"896\":\"v-5cfa3ff0#16/3\",\"897\":\"v-5cfa3ff0#16/4\",\"898\":\"v-5cfa3ff0#17\",\"899\":\"v-5cfa3ff0#17/0\",\"900\":\"v-5cfa3ff0#17/1\",\"901\":\"v-5cfa3ff0#17/2\",\"902\":\"v-5cfa3ff0#17/3\",\"903\":\"v-5cfa3ff0#17/4\",\"904\":\"v-5cfa3ff0#17/5\",\"905\":\"v-5cfa3ff0#18\",\"906\":\"v-5cfa3ff0#18/0\",\"907\":\"v-5cfa3ff0#18/1\",\"908\":\"v-5cfa3ff0#18/2\",\"909\":\"v-5cfa3ff0#18/3\",\"910\":\"v-5cfa3ff0#18/4\",\"911\":\"v-5cfa3ff0#18/5\",\"912\":\"v-5cfa3ff0#18/6\",\"913\":\"v-5cfa3ff0#19\",\"914\":\"v-5cfa3ff0#19/0\",\"915\":\"v-5cfa3ff0#19/1\",\"916\":\"v-2867de92\",\"917\":\"v-2867de92#1\",\"918\":\"v-2867de92#1/0\",\"919\":\"v-2867de92#1/1\",\"920\":\"v-2867de92#2\",\"921\":\"v-2867de92#2/0\",\"922\":\"v-2867de92#3\",\"923\":\"v-2867de92#3/0\",\"924\":\"v-2867de92#4\",\"925\":\"v-2867de92#4/0\",\"926\":\"v-2867de92#5\",\"927\":\"v-2867de92#5/0\",\"928\":\"v-2867de92#6\",\"929\":\"v-2867de92#6/0\",\"930\":\"v-2867de92#6/1\",\"931\":\"v-2867de92#7\",\"932\":\"v-2867de92#7/0\",\"933\":\"v-2867de92#7/1\",\"934\":\"v-2867de92#7/2\",\"935\":\"v-2867de92#7/3\",\"936\":\"v-2867de92#7/4\",\"937\":\"v-2867de92#7/5\",\"938\":\"v-2867de92#7/6\",\"939\":\"v-2867de92#7/7\",\"940\":\"v-2867de92#7/8\",\"941\":\"v-2867de92#7/9\",\"942\":\"v-2867de92#7/10\",\"943\":\"v-2867de92#7/11\",\"944\":\"v-2867de92#7/12\",\"945\":\"v-2867de92#7/13\",\"946\":\"v-2867de92#7/14\",\"947\":\"v-2867de92#7/15\",\"948\":\"v-2867de92#8\",\"949\":\"v-2867de92#8/0\",\"950\":\"v-2867de92#8/1\",\"951\":\"v-2867de92#8/2\",\"952\":\"v-1cef86d5\",\"953\":\"v-1cef86d5#1\",\"954\":\"v-1cef86d5#1/0\",\"955\":\"v-1cef86d5#1/1\",\"956\":\"v-1cef86d5#1/2\",\"957\":\"v-1cef86d5#1/3\",\"958\":\"v-1cef86d5#1/4\",\"959\":\"v-1cef86d5#2\",\"960\":\"v-1cef86d5#2/0\",\"961\":\"v-1cef86d5#2/1\",\"962\":\"v-1cef86d5#2/2\",\"963\":\"v-1cef86d5#2/3\",\"964\":\"v-1cef86d5#2/4\",\"965\":\"v-1cef86d5#2/5\",\"966\":\"v-1cef86d5#2/6\",\"967\":\"v-1cef86d5#2/7\",\"968\":\"v-1cef86d5#2/8\",\"969\":\"v-1cef86d5#2/9\",\"970\":\"v-1cef86d5#2/10\",\"971\":\"v-1cef86d5#2/11\",\"972\":\"v-1cef86d5#2/12\",\"973\":\"v-1cef86d5#3\",\"974\":\"v-1cef86d5#3/0\",\"975\":\"v-1cef86d5#3/1\",\"976\":\"v-1cef86d5#3/2\",\"977\":\"v-1cef86d5#3/3\",\"978\":\"v-1cef86d5#3/4\",\"979\":\"v-1cef86d5#3/5\",\"980\":\"v-1cef86d5#3/6\",\"981\":\"v-1cef86d5#3/7\",\"982\":\"v-1cef86d5#3/8\",\"983\":\"v-1cef86d5#3/9\",\"984\":\"v-1cef86d5#3/10\",\"985\":\"v-1cef86d5#4\",\"986\":\"v-1cef86d5#4/0\",\"987\":\"v-1cef86d5#4/1\",\"988\":\"v-1cef86d5#4/2\",\"989\":\"v-1cef86d5#4/3\",\"990\":\"v-1cef86d5#4/4\",\"991\":\"v-1cef86d5#4/5\",\"992\":\"v-1cef86d5#4/6\",\"993\":\"v-1cef86d5#4/7\",\"994\":\"v-1cef86d5#4/8\",\"995\":\"v-1cef86d5#4/9\",\"996\":\"v-1cef86d5#4/10\",\"997\":\"v-1cef86d5#4/11\",\"998\":\"v-1cef86d5#4/12\",\"999\":\"v-1cef86d5#5\",\"1000\":\"v-1cef86d5#5/0\",\"1001\":\"v-1cef86d5#5/1\",\"1002\":\"v-1cef86d5#6\",\"1003\":\"v-1cef86d5#7\",\"1004\":\"v-1cef86d5#7/0\",\"1005\":\"v-1cef86d5#7/1\",\"1006\":\"v-1cef86d5#8\",\"1007\":\"v-1cef86d5#8/0\",\"1008\":\"v-1cef86d5#8/1\",\"1009\":\"v-1cef86d5#8/2\",\"1010\":\"v-1cef86d5#8/3\",\"1011\":\"v-1cef86d5#8/4\",\"1012\":\"v-1cef86d5#8/5\",\"1013\":\"v-1cef86d5#8/6\",\"1014\":\"v-1cef86d5#8/7\",\"1015\":\"v-1cef86d5#8/8\",\"1016\":\"v-1cef86d5#8/9\",\"1017\":\"v-1cef86d5#8/10\",\"1018\":\"v-1cef86d5#8/11\",\"1019\":\"v-1cef86d5#8/12\",\"1020\":\"v-1cef86d5#8/13\",\"1021\":\"v-1cef86d5#8/14\",\"1022\":\"v-1cef86d5#8/15\",\"1023\":\"v-1cef86d5#8/16\",\"1024\":\"v-1cef86d5#8/17\",\"1025\":\"v-1cef86d5#8/18\",\"1026\":\"v-1cef86d5#8/19\",\"1027\":\"v-1cef86d5#8/20\",\"1028\":\"v-1cef86d5#8/21\",\"1029\":\"v-1cef86d5#8/22\",\"1030\":\"v-1cef86d5#8/23\",\"1031\":\"v-1cef86d5#8/24\",\"1032\":\"v-1cef86d5#8/25\",\"1033\":\"v-1cef86d5#8/26\",\"1034\":\"v-1cef86d5#8/27\",\"1035\":\"v-1cef86d5#8/28\",\"1036\":\"v-1cef86d5#8/29\",\"1037\":\"v-1cef86d5#8/30\",\"1038\":\"v-1cef86d5#8/31\",\"1039\":\"v-1cef86d5#8/32\",\"1040\":\"v-1cef86d5#8/33\",\"1041\":\"v-1cef86d5#8/34\",\"1042\":\"v-1cef86d5#8/35\",\"1043\":\"v-1cef86d5#8/36\",\"1044\":\"v-1cef86d5#8/37\",\"1045\":\"v-1cef86d5#8/38\",\"1046\":\"v-1cef86d5#8/39\",\"1047\":\"v-1cef86d5#8/40\",\"1048\":\"v-1cef86d5#8/41\",\"1049\":\"v-1cef86d5#8/42\",\"1050\":\"v-1cef86d5#8/43\",\"1051\":\"v-1cef86d5#8/44\",\"1052\":\"v-1cef86d5#8/45\",\"1053\":\"v-1cef86d5#8/46\",\"1054\":\"v-1cef86d5#8/47\",\"1055\":\"v-1cef86d5#8/48\",\"1056\":\"v-1cef86d5#8/49\",\"1057\":\"v-1cef86d5#8/50\",\"1058\":\"v-1cef86d5#8/51\",\"1059\":\"v-1cef86d5#8/52\",\"1060\":\"v-1cef86d5#8/53\",\"1061\":\"v-1cef86d5#8/54\",\"1062\":\"v-1cef86d5#8/55\",\"1063\":\"v-1cef86d5#8/56\",\"1064\":\"v-1cef86d5#8/57\",\"1065\":\"v-1cef86d5#8/58\",\"1066\":\"v-1cef86d5#8/59\",\"1067\":\"v-1cef86d5#8/60\",\"1068\":\"v-1cef86d5#8/61\",\"1069\":\"v-1cef86d5#8/62\",\"1070\":\"v-1cef86d5#8/63\",\"1071\":\"v-1cef86d5#8/64\",\"1072\":\"v-1cef86d5#8/65\",\"1073\":\"v-1cef86d5#8/66\",\"1074\":\"v-1cef86d5#8/67\",\"1075\":\"v-1cef86d5#8/68\",\"1076\":\"v-1cef86d5#8/69\",\"1077\":\"v-1cef86d5#8/70\",\"1078\":\"v-1cef86d5#9\",\"1079\":\"v-1cef86d5#9/0\",\"1080\":\"v-1cef86d5#9/1\",\"1081\":\"v-1cef86d5#9/2\",\"1082\":\"v-1cef86d5#10\",\"1083\":\"v-1cef86d5#10/0\",\"1084\":\"v-1cef86d5#10/1\",\"1085\":\"v-1cef86d5#10/2\",\"1086\":\"v-1cef86d5#10/3\",\"1087\":\"v-1cef86d5#10/4\",\"1088\":\"v-1cef86d5#11\",\"1089\":\"v-1cef86d5#11/0\",\"1090\":\"v-27deaa0a\",\"1091\":\"v-27deaa0a#1\",\"1092\":\"v-27deaa0a#1/0\",\"1093\":\"v-27deaa0a#1/1\",\"1094\":\"v-27deaa0a#1/2\",\"1095\":\"v-27deaa0a#1/3\",\"1096\":\"v-27deaa0a#1/4\",\"1097\":\"v-27deaa0a#1/5\",\"1098\":\"v-27deaa0a#1/6\",\"1099\":\"v-27deaa0a#1/7\",\"1100\":\"v-27deaa0a#1/8\",\"1101\":\"v-27deaa0a#1/9\",\"1102\":\"v-27deaa0a#1/10\",\"1103\":\"v-27deaa0a#1/11\",\"1104\":\"v-27deaa0a#2\",\"1105\":\"v-27deaa0a#2/0\",\"1106\":\"v-27deaa0a#2/1\",\"1107\":\"v-27deaa0a#2/2\",\"1108\":\"v-27deaa0a#2/3\",\"1109\":\"v-27deaa0a#2/4\",\"1110\":\"v-27deaa0a#2/5\",\"1111\":\"v-27deaa0a#2/6\",\"1112\":\"v-27deaa0a#2/7\",\"1113\":\"v-27deaa0a#2/8\",\"1114\":\"v-27deaa0a#2/9\",\"1115\":\"v-27deaa0a#2/10\",\"1116\":\"v-27deaa0a#2/11\",\"1117\":\"v-27deaa0a#2/12\",\"1118\":\"v-27deaa0a#2/13\",\"1119\":\"v-27deaa0a#2/14\",\"1120\":\"v-27deaa0a#3\",\"1121\":\"v-27deaa0a#3/0\",\"1122\":\"v-27deaa0a#3/1\",\"1123\":\"v-27deaa0a#3/2\",\"1124\":\"v-27deaa0a#3/3\",\"1125\":\"v-27deaa0a#3/4\",\"1126\":\"v-27deaa0a#3/5\",\"1127\":\"v-27deaa0a#3/6\",\"1128\":\"v-27deaa0a#3/7\",\"1129\":\"v-27deaa0a#3/8\",\"1130\":\"v-27deaa0a#4\",\"1131\":\"v-27deaa0a#4/0\",\"1132\":\"v-27deaa0a#5\",\"1133\":\"v-27deaa0a#6\",\"1134\":\"v-27deaa0a#6/1\",\"1135\":\"v-27deaa0a#7\",\"1136\":\"v-27deaa0a#7/0\",\"1137\":\"v-27deaa0a#7/1\",\"1138\":\"v-27deaa0a#7/2\",\"1139\":\"v-27deaa0a#7/3\",\"1140\":\"v-27deaa0a#7/4\",\"1141\":\"v-27deaa0a#7/5\",\"1142\":\"v-27deaa0a#8\",\"1143\":\"v-27deaa0a#8/0\",\"1144\":\"v-27deaa0a#9\",\"1145\":\"v-27deaa0a#9/1\",\"1146\":\"v-27deaa0a#9/2\",\"1147\":\"v-27deaa0a#9/3\",\"1148\":\"v-27deaa0a#9/4\",\"1149\":\"v-27deaa0a#9/5\",\"1150\":\"v-27deaa0a#9/6\",\"1151\":\"v-27deaa0a#9/7\",\"1152\":\"v-27deaa0a#9/8\",\"1153\":\"v-27deaa0a#9/9\",\"1154\":\"v-211cd457\",\"1155\":\"v-211cd457#1\",\"1156\":\"v-211cd457#1/0\",\"1157\":\"v-211cd457#1/1\",\"1158\":\"v-211cd457#1/2\",\"1159\":\"v-211cd457#1/3\",\"1160\":\"v-211cd457#1/4\",\"1161\":\"v-211cd457#1/5\",\"1162\":\"v-211cd457#1/6\",\"1163\":\"v-211cd457#2\",\"1164\":\"v-211cd457#2/7\",\"1165\":\"v-211cd457#2/8\",\"1166\":\"v-211cd457#2/9\",\"1167\":\"v-211cd457#2/10\",\"1168\":\"v-211cd457#2/11\",\"1169\":\"v-211cd457#2/12\",\"1170\":\"v-211cd457#2/13\",\"1171\":\"v-211cd457#2/14\",\"1172\":\"v-211cd457#2/15\",\"1173\":\"v-211cd457#2/16\",\"1174\":\"v-211cd457#2/17\",\"1175\":\"v-211cd457#2/18\",\"1176\":\"v-211cd457#2/19\",\"1177\":\"v-211cd457#2/20\",\"1178\":\"v-211cd457#2/21\",\"1179\":\"v-211cd457#2/22\",\"1180\":\"v-211cd457#2/23\",\"1181\":\"v-211cd457#2/24\",\"1182\":\"v-211cd457#2/25\",\"1183\":\"v-211cd457#2/26\",\"1184\":\"v-211cd457#2/27\",\"1185\":\"v-211cd457#2/28\",\"1186\":\"v-211cd457#2/29\",\"1187\":\"v-211cd457#2/30\",\"1188\":\"v-211cd457#2/31\",\"1189\":\"v-211cd457#2/32\",\"1190\":\"v-211cd457#2/33\",\"1191\":\"v-211cd457#3\",\"1192\":\"v-211cd457#3/0\",\"1193\":\"v-211cd457#3/1\",\"1194\":\"v-211cd457#3/2\",\"1195\":\"v-211cd457#3/3\",\"1196\":\"v-211cd457#3/4\",\"1197\":\"v-211cd457#3/5\",\"1198\":\"v-211cd457#3/6\",\"1199\":\"v-211cd457#3/7\",\"1200\":\"v-211cd457#3/8\",\"1201\":\"v-211cd457#3/9\",\"1202\":\"v-211cd457#3/10\",\"1203\":\"v-211cd457#3/11\",\"1204\":\"v-211cd457#3/12\",\"1205\":\"v-211cd457#3/13\",\"1206\":\"v-211cd457#3/14\",\"1207\":\"v-211cd457#3/15\",\"1208\":\"v-211cd457#4\",\"1209\":\"v-211cd457#4/0\",\"1210\":\"v-211cd457#4/1\",\"1211\":\"v-211cd457#4/2\",\"1212\":\"v-211cd457#4/3\",\"1213\":\"v-211cd457#4/4\",\"1214\":\"v-211cd457#4/5\",\"1215\":\"v-211cd457#4/6\",\"1216\":\"v-211cd457#5\",\"1217\":\"v-211cd457#6\",\"1218\":\"v-211cd457#6/0\",\"1219\":\"v-211cd457#6/1\",\"1220\":\"v-211cd457#6/2\",\"1221\":\"v-211cd457#6/3\",\"1222\":\"v-211cd457#6/4\",\"1223\":\"v-211cd457#6/5\",\"1224\":\"v-211cd457#6/6\",\"1225\":\"v-211cd457#6/7\",\"1226\":\"v-211cd457#6/8\",\"1227\":\"v-211cd457#6/9\",\"1228\":\"v-211cd457#6/10\",\"1229\":\"v-211cd457#7\",\"1230\":\"v-211cd457#7/0\",\"1231\":\"v-211cd457#7/1\",\"1232\":\"v-211cd457#7/2\",\"1233\":\"v-211cd457#7/3\",\"1234\":\"v-211cd457#7/4\",\"1235\":\"v-211cd457#7/5\",\"1236\":\"v-211cd457#8\",\"1237\":\"v-211cd457#8/0\",\"1238\":\"v-211cd457#8/1\",\"1239\":\"v-211cd457#8/2\",\"1240\":\"v-211cd457#8/3\",\"1241\":\"v-211cd457#8/4\",\"1242\":\"v-211cd457#8/5\",\"1243\":\"v-211cd457#8/6\",\"1244\":\"v-211cd457#8/7\",\"1245\":\"v-211cd457#8/8\",\"1246\":\"v-211cd457#8/9\",\"1247\":\"v-211cd457#8/10\",\"1248\":\"v-211cd457#9\",\"1249\":\"v-211cd457#9/0\",\"1250\":\"v-211cd457#10\",\"1251\":\"v-211cd457#10/0\",\"1252\":\"v-211cd457#10/1\",\"1253\":\"v-211cd457#10/2\",\"1254\":\"v-211cd457#10/3\",\"1255\":\"v-211cd457#11\",\"1256\":\"v-211cd457#11/0\",\"1257\":\"v-211cd457#12\",\"1258\":\"v-211cd457#12/1\",\"1259\":\"v-211cd457#13\",\"1260\":\"v-211cd457#14\",\"1261\":\"v-211cd457#14/0\",\"1262\":\"v-211cd457#14/1\",\"1263\":\"v-211cd457#14/2\",\"1264\":\"v-211cd457#14/3\",\"1265\":\"v-211cd457#14/4\",\"1266\":\"v-211cd457#14/5\",\"1267\":\"v-211cd457#14/6\",\"1268\":\"v-211cd457#14/7\",\"1269\":\"v-211cd457#15\",\"1270\":\"v-211cd457#15/0\",\"1271\":\"v-211cd457#15/1\",\"1272\":\"v-211cd457#15/2\",\"1273\":\"v-211cd457#15/3\",\"1274\":\"v-211cd457#15/4\",\"1275\":\"v-211cd457#15/5\",\"1276\":\"v-211cd457#15/6\",\"1277\":\"v-211cd457#15/7\",\"1278\":\"v-211cd457#15/8\",\"1279\":\"v-211cd457#15/9\",\"1280\":\"v-211cd457#15/10\",\"1281\":\"v-211cd457#15/11\",\"1282\":\"v-211cd457#15/12\",\"1283\":\"v-211cd457#15/13\",\"1284\":\"v-211cd457#15/14\",\"1285\":\"v-211cd457#15/15\",\"1286\":\"v-211cd457#15/16\",\"1287\":\"v-211cd457#15/17\",\"1288\":\"v-5017d185\",\"1289\":\"v-5017d185#1\",\"1290\":\"v-5017d185#1/0\",\"1291\":\"v-5017d185#1/1\",\"1292\":\"v-5017d185#1/2\",\"1293\":\"v-5017d185#1/3\",\"1294\":\"v-5017d185#1/4\",\"1295\":\"v-5017d185#1/5\",\"1296\":\"v-5017d185#1/6\",\"1297\":\"v-5017d185#1/7\",\"1298\":\"v-5017d185#1/8\",\"1299\":\"v-5017d185#1/9\",\"1300\":\"v-5017d185#1/10\",\"1301\":\"v-5017d185#1/11\",\"1302\":\"v-5017d185#1/12\",\"1303\":\"v-5017d185#1/13\",\"1304\":\"v-5017d185#1/14\",\"1305\":\"v-5017d185#1/15\",\"1306\":\"v-5017d185#1/16\",\"1307\":\"v-5017d185#1/17\",\"1308\":\"v-5017d185#1/18\",\"1309\":\"v-5017d185#1/19\",\"1310\":\"v-5017d185#1/20\",\"1311\":\"v-5017d185#2\",\"1312\":\"v-5017d185#2/0\",\"1313\":\"v-5017d185#2/1\",\"1314\":\"v-5017d185#3\",\"1315\":\"v-5017d185#3/2\",\"1316\":\"v-5017d185#3/3\",\"1317\":\"v-5017d185#3/4\",\"1318\":\"v-5017d185#3/5\",\"1319\":\"v-5017d185#3/6\",\"1320\":\"v-5017d185#3/7\",\"1321\":\"v-5017d185#3/8\",\"1322\":\"v-5017d185#3/9\",\"1323\":\"v-5017d185#3/10\",\"1324\":\"v-5017d185#3/11\",\"1325\":\"v-5017d185#3/12\",\"1326\":\"v-5017d185#3/13\",\"1327\":\"v-5017d185#3/14\",\"1328\":\"v-5017d185#3/15\",\"1329\":\"v-5017d185#3/16\",\"1330\":\"v-5017d185#3/17\",\"1331\":\"v-5017d185#4\",\"1332\":\"v-5017d185#4/0\",\"1333\":\"v-5017d185#4/1\",\"1334\":\"v-5017d185#4/2\",\"1335\":\"v-5017d185#5\",\"1336\":\"v-5017d185#5/0\",\"1337\":\"v-5017d185#5/1\",\"1338\":\"v-5017d185#6\",\"1339\":\"v-5017d185#7\",\"1340\":\"v-5017d185#7/2\",\"1341\":\"v-5017d185#7/3\",\"1342\":\"v-5017d185#7/4\",\"1343\":\"v-5017d185#7/5\",\"1344\":\"v-5017d185#8\",\"1345\":\"v-5017d185#8/0\",\"1346\":\"v-5017d185#8/1\",\"1347\":\"v-5017d185#9\",\"1348\":\"v-5017d185#9/0\",\"1349\":\"v-5017d185#9/1\",\"1350\":\"v-5017d185#9/2\",\"1351\":\"v-5017d185#9/3\",\"1352\":\"v-5017d185#9/4\",\"1353\":\"v-5017d185#9/5\",\"1354\":\"v-5017d185#9/6\",\"1355\":\"v-5017d185#9/7\",\"1356\":\"v-5017d185#9/8\",\"1357\":\"v-5017d185#9/9\",\"1358\":\"v-5017d185#9/10\",\"1359\":\"v-5017d185#9/11\",\"1360\":\"v-5017d185#10\",\"1361\":\"v-5017d185#10/0\",\"1362\":\"v-5017d185#10/1\",\"1363\":\"v-5017d185#10/2\",\"1364\":\"v-5017d185#10/3\",\"1365\":\"v-5017d185#10/4\",\"1366\":\"v-5017d185#10/5\",\"1367\":\"v-5017d185#10/6\",\"1368\":\"v-5017d185#10/7\",\"1369\":\"v-5017d185#11\",\"1370\":\"v-5017d185#12\",\"1371\":\"v-5017d185#12/0\",\"1372\":\"v-5017d185#12/1\",\"1373\":\"v-5017d185#12/2\",\"1374\":\"v-5017d185#12/3\",\"1375\":\"v-5017d185#12/4\",\"1376\":\"v-5017d185#13\",\"1377\":\"v-5017d185#13/0\",\"1378\":\"v-5017d185#14\",\"1379\":\"v-5017d185#14/0\",\"1380\":\"v-5017d185#14/1\",\"1381\":\"v-5017d185#15\",\"1382\":\"v-5017d185#15/2\",\"1383\":\"v-5017d185#15/3\",\"1384\":\"v-5017d185#15/4\",\"1385\":\"v-5017d185#15/5\",\"1386\":\"v-5017d185#15/6\",\"1387\":\"v-5017d185#15/7\",\"1388\":\"v-5017d185#15/8\",\"1389\":\"v-5017d185#15/9\",\"1390\":\"v-5017d185#15/10\",\"1391\":\"v-5017d185#15/11\",\"1392\":\"v-5017d185#15/12\",\"1393\":\"v-5017d185#15/13\",\"1394\":\"v-5017d185#16\",\"1395\":\"v-5017d185#16/0\",\"1396\":\"v-5017d185#16/1\",\"1397\":\"v-5017d185#17\",\"1398\":\"v-5017d185#17/0\",\"1399\":\"v-5017d185#18\",\"1400\":\"v-5017d185#18/1\",\"1401\":\"v-5017d185#18/2\",\"1402\":\"v-5017d185#18/3\",\"1403\":\"v-5017d185#18/4\",\"1404\":\"v-240dba63\",\"1405\":\"v-240dba63#0/0\",\"1406\":\"v-240dba63#0/1\",\"1407\":\"v-240dba63#0/2\",\"1408\":\"v-240dba63#0/3\",\"1409\":\"v-240dba63#0/4\",\"1410\":\"v-240dba63#0/5\",\"1411\":\"v-240dba63#0/6\",\"1412\":\"v-240dba63#0/7\",\"1413\":\"v-240dba63#0/8\",\"1414\":\"v-240dba63#0/9\",\"1415\":\"v-240dba63#0/10\",\"1416\":\"v-240dba63#0/11\",\"1417\":\"v-240dba63#0/12\",\"1418\":\"v-240dba63#0/13\",\"1419\":\"v-240dba63#0/14\",\"1420\":\"v-240dba63#0/15\",\"1421\":\"v-240dba63#0/16\",\"1422\":\"v-240dba63#0/17\",\"1423\":\"v-240dba63#0/18\",\"1424\":\"v-240dba63#0/19\",\"1425\":\"v-240dba63#0/20\",\"1426\":\"v-240dba63#0/21\",\"1427\":\"v-240dba63#0/22\",\"1428\":\"v-240dba63#0/23\",\"1429\":\"v-240dba63#0/24\",\"1430\":\"v-240dba63#0/25\",\"1431\":\"v-240dba63#0/26\",\"1432\":\"v-240dba63#0/27\",\"1433\":\"v-240dba63#0/28\",\"1434\":\"v-240dba63#0/29\",\"1435\":\"v-240dba63#0/30\",\"1436\":\"v-240dba63#0/31\",\"1437\":\"v-240dba63#0/32\",\"1438\":\"v-240dba63#0/33\",\"1439\":\"v-240dba63#0/34\",\"1440\":\"v-240dba63#0/35\",\"1441\":\"v-240dba63#0/36\",\"1442\":\"v-240dba63#0/37\",\"1443\":\"v-240dba63#0/38\",\"1444\":\"v-240dba63#0/39\",\"1445\":\"v-240dba63#0/40\",\"1446\":\"v-240dba63#0/41\",\"1447\":\"v-240dba63#1\",\"1448\":\"v-240dba63#1/42\",\"1449\":\"v-240dba63#1/43\",\"1450\":\"v-240dba63#1/44\",\"1451\":\"v-240dba63#1/45\",\"1452\":\"v-240dba63#1/46\",\"1453\":\"v-240dba63#1/47\",\"1454\":\"v-240dba63#1/48\",\"1455\":\"v-240dba63#1/49\",\"1456\":\"v-240dba63#2\",\"1457\":\"v-240dba63#3\",\"1458\":\"v-240dba63#3/0\",\"1459\":\"v-240dba63#3/1\",\"1460\":\"v-240dba63#3/2\",\"1461\":\"v-240dba63#3/3\",\"1462\":\"v-240dba63#3/4\",\"1463\":\"v-240dba63#3/5\",\"1464\":\"v-240dba63#3/6\",\"1465\":\"v-240dba63#3/7\",\"1466\":\"v-240dba63#3/8\",\"1467\":\"v-240dba63#4\",\"1468\":\"v-240dba63#4/9\",\"1469\":\"v-240dba63#4/10\",\"1470\":\"v-240dba63#4/11\",\"1471\":\"v-240dba63#4/12\",\"1472\":\"v-240dba63#4/13\",\"1473\":\"v-240dba63#4/14\",\"1474\":\"v-240dba63#4/15\",\"1475\":\"v-240dba63#4/16\",\"1476\":\"v-240dba63#4/17\",\"1477\":\"v-240dba63#4/18\",\"1478\":\"v-240dba63#4/19\",\"1479\":\"v-240dba63#4/20\",\"1480\":\"v-240dba63#4/21\",\"1481\":\"v-240dba63#4/22\",\"1482\":\"v-240dba63#4/23\",\"1483\":\"v-240dba63#4/24\",\"1484\":\"v-240dba63#4/25\",\"1485\":\"v-240dba63#4/26\",\"1486\":\"v-240dba63#4/27\",\"1487\":\"v-240dba63#4/28\",\"1488\":\"v-240dba63#4/29\",\"1489\":\"v-240dba63#4/30\",\"1490\":\"v-240dba63#4/31\",\"1491\":\"v-240dba63#4/32\",\"1492\":\"v-240dba63#4/33\",\"1493\":\"v-240dba63#4/34\",\"1494\":\"v-240dba63#5\",\"1495\":\"v-240dba63#6\",\"1496\":\"v-240dba63#6/0\",\"1497\":\"v-240dba63#7\",\"1498\":\"v-240dba63#7/0\",\"1499\":\"v-240dba63#7/1\",\"1500\":\"v-240dba63#7/2\",\"1501\":\"v-240dba63#8\",\"1502\":\"v-240dba63#9\",\"1503\":\"v-240dba63#9/0\",\"1504\":\"v-240dba63#10\",\"1505\":\"v-240dba63#10/0\",\"1506\":\"v-240dba63#10/1\",\"1507\":\"v-240dba63#10/2\",\"1508\":\"v-240dba63#11\",\"1509\":\"v-240dba63#11/3\",\"1510\":\"v-240dba63#11/4\",\"1511\":\"v-240dba63#11/5\",\"1512\":\"v-240dba63#12\",\"1513\":\"v-240dba63#12/0\",\"1514\":\"v-240dba63#12/1\",\"1515\":\"v-240dba63#12/2\",\"1516\":\"v-240dba63#12/3\",\"1517\":\"v-240dba63#12/4\",\"1518\":\"v-240dba63#12/5\",\"1519\":\"v-240dba63#12/6\",\"1520\":\"v-240dba63#12/7\",\"1521\":\"v-240dba63#12/8\",\"1522\":\"v-240dba63#12/9\",\"1523\":\"v-240dba63#13\",\"1524\":\"v-240dba63#14\",\"1525\":\"v-240dba63#14/0\",\"1526\":\"v-240dba63#14/1\",\"1527\":\"v-240dba63#15\",\"1528\":\"v-240dba63#15/0\",\"1529\":\"v-240dba63#15/1\",\"1530\":\"v-240dba63#15/2\",\"1531\":\"v-240dba63#15/3\",\"1532\":\"v-240dba63#15/4\",\"1533\":\"v-240dba63#15/5\",\"1534\":\"v-240dba63#15/6\",\"1535\":\"v-240dba63#15/7\",\"1536\":\"v-240dba63#15/8\",\"1537\":\"v-240dba63#15/9\",\"1538\":\"v-240dba63#15/10\",\"1539\":\"v-240dba63#15/11\",\"1540\":\"v-240dba63#16\",\"1541\":\"v-240dba63#17\",\"1542\":\"v-240dba63#17/0\",\"1543\":\"v-240dba63#17/1\",\"1544\":\"v-240dba63#17/2\",\"1545\":\"v-240dba63#17/3\",\"1546\":\"v-240dba63#17/4\",\"1547\":\"v-240dba63#17/5\",\"1548\":\"v-240dba63#18\",\"1549\":\"v-240dba63#18/6\",\"1550\":\"v-240dba63#18/7\",\"1551\":\"v-240dba63#18/8\",\"1552\":\"v-240dba63#18/9\",\"1553\":\"v-240dba63#18/10\",\"1554\":\"v-240dba63#18/11\",\"1555\":\"v-240dba63#18/12\",\"1556\":\"v-240dba63#18/13\",\"1557\":\"v-240dba63#18/14\",\"1558\":\"v-240dba63#18/15\",\"1559\":\"v-240dba63#18/16\",\"1560\":\"v-240dba63#18/17\",\"1561\":\"v-240dba63#18/18\",\"1562\":\"v-240dba63#18/19\",\"1563\":\"v-240dba63#18/20\",\"1564\":\"v-240dba63#18/21\",\"1565\":\"v-240dba63#18/22\",\"1566\":\"v-240dba63#18/23\",\"1567\":\"v-240dba63#18/24\",\"1568\":\"v-240dba63#18/25\",\"1569\":\"v-240dba63#18/26\",\"1570\":\"v-240dba63#18/27\",\"1571\":\"v-240dba63#18/28\",\"1572\":\"v-240dba63#18/29\",\"1573\":\"v-240dba63#18/30\",\"1574\":\"v-240dba63#18/31\",\"1575\":\"v-240dba63#18/32\",\"1576\":\"v-240dba63#18/33\",\"1577\":\"v-240dba63#18/34\",\"1578\":\"v-240dba63#19\",\"1579\":\"v-240dba63#20\",\"1580\":\"v-240dba63#20/0\",\"1581\":\"v-240dba63#20/1\",\"1582\":\"v-240dba63#20/2\",\"1583\":\"v-240dba63#20/3\",\"1584\":\"v-240dba63#21\",\"1585\":\"v-240dba63#21/0\",\"1586\":\"v-240dba63#21/1\",\"1587\":\"v-240dba63#21/2\",\"1588\":\"v-240dba63#21/3\",\"1589\":\"v-240dba63#22\",\"1590\":\"v-240dba63#22/0\",\"1591\":\"v-240dba63#22/1\",\"1592\":\"v-240dba63#22/2\",\"1593\":\"v-240dba63#22/3\",\"1594\":\"v-240dba63#22/4\",\"1595\":\"v-240dba63#22/5\",\"1596\":\"v-240dba63#22/6\",\"1597\":\"v-240dba63#22/7\",\"1598\":\"v-240dba63#22/8\",\"1599\":\"v-240dba63#22/9\",\"1600\":\"v-240dba63#22/10\",\"1601\":\"v-240dba63#22/11\",\"1602\":\"v-240dba63#22/12\",\"1603\":\"v-240dba63#22/13\",\"1604\":\"v-240dba63#22/14\",\"1605\":\"v-240dba63#22/15\",\"1606\":\"v-240dba63#22/16\",\"1607\":\"v-240dba63#22/17\",\"1608\":\"v-240dba63#22/18\",\"1609\":\"v-240dba63#22/19\",\"1610\":\"v-240dba63#22/20\",\"1611\":\"v-240dba63#22/21\",\"1612\":\"v-240dba63#22/22\",\"1613\":\"v-240dba63#22/23\",\"1614\":\"v-240dba63#22/24\",\"1615\":\"v-240dba63#22/25\",\"1616\":\"v-240dba63#22/26\",\"1617\":\"v-240dba63#22/27\",\"1618\":\"v-6a58427d\",\"1619\":\"v-6a58427d#1\",\"1620\":\"v-6a58427d#1/0\",\"1621\":\"v-6a58427d#1/1\",\"1622\":\"v-6a58427d#1/2\",\"1623\":\"v-6a58427d#1/3\",\"1624\":\"v-6a58427d#1/4\",\"1625\":\"v-6a58427d#1/5\",\"1626\":\"v-6a58427d#1/6\",\"1627\":\"v-6a58427d#1/7\",\"1628\":\"v-6a58427d#2\",\"1629\":\"v-6a58427d#2/0\",\"1630\":\"v-6a58427d#2/1\",\"1631\":\"v-6a58427d#2/2\",\"1632\":\"v-6a58427d#2/3\",\"1633\":\"v-6a58427d#2/4\",\"1634\":\"v-6a58427d#2/5\",\"1635\":\"v-6a58427d#2/6\",\"1636\":\"v-6a58427d#2/7\",\"1637\":\"v-6a58427d#2/8\",\"1638\":\"v-6a58427d#2/9\",\"1639\":\"v-6a58427d#3\",\"1640\":\"v-6a58427d#3/0\",\"1641\":\"v-6a58427d#3/1\",\"1642\":\"v-6a58427d#3/2\",\"1643\":\"v-6a58427d#3/3\",\"1644\":\"v-6a58427d#3/4\",\"1645\":\"v-6a58427d#3/5\",\"1646\":\"v-6a58427d#3/6\",\"1647\":\"v-6a58427d#3/7\",\"1648\":\"v-6a58427d#3/8\",\"1649\":\"v-6a58427d#3/9\",\"1650\":\"v-6a58427d#3/10\",\"1651\":\"v-6a58427d#3/11\",\"1652\":\"v-6a58427d#3/12\",\"1653\":\"v-6a58427d#4\",\"1654\":\"v-6a58427d#4/0\",\"1655\":\"v-6a58427d#4/1\",\"1656\":\"v-6a58427d#4/2\",\"1657\":\"v-6a58427d#4/3\",\"1658\":\"v-6a58427d#4/4\",\"1659\":\"v-6a58427d#4/5\",\"1660\":\"v-6a58427d#4/6\",\"1661\":\"v-6a58427d#4/7\",\"1662\":\"v-6a58427d#5\",\"1663\":\"v-6a58427d#5/0\",\"1664\":\"v-6a58427d#5/1\",\"1665\":\"v-6a58427d#5/2\",\"1666\":\"v-6a58427d#5/3\",\"1667\":\"v-6a58427d#5/4\",\"1668\":\"v-6a58427d#5/5\",\"1669\":\"v-6a58427d#5/6\",\"1670\":\"v-6a58427d#6\",\"1671\":\"v-6a58427d#6/0\",\"1672\":\"v-6a58427d#6/1\",\"1673\":\"v-6a58427d#6/2\",\"1674\":\"v-6a58427d#6/3\",\"1675\":\"v-6a58427d#7\",\"1676\":\"v-6a58427d#7/0\",\"1677\":\"v-6a58427d#7/1\",\"1678\":\"v-6a58427d#7/2\",\"1679\":\"v-6a58427d#7/3\",\"1680\":\"v-6a58427d#7/4\",\"1681\":\"v-6a58427d#7/5\",\"1682\":\"v-6a58427d#7/6\",\"1683\":\"v-6a58427d#7/7\",\"1684\":\"v-6a58427d#7/8\",\"1685\":\"v-6a58427d#8\",\"1686\":\"v-6a58427d#8/0\",\"1687\":\"v-6a58427d#8/1\",\"1688\":\"v-6a58427d#8/2\",\"1689\":\"v-6a58427d#8/3\",\"1690\":\"v-6a58427d#8/4\",\"1691\":\"v-6a58427d#9\",\"1692\":\"v-6a58427d#10\",\"1693\":\"v-6a58427d#10/0\",\"1694\":\"v-6a58427d#10/1\",\"1695\":\"v-6a58427d#10/2\",\"1696\":\"v-6a58427d#11\",\"1697\":\"v-6a58427d#11/0\",\"1698\":\"v-6a58427d#12\",\"1699\":\"v-6a58427d#12/0\",\"1700\":\"v-6a58427d#13\",\"1701\":\"v-6a58427d#13/0\",\"1702\":\"v-6a58427d#13/1\",\"1703\":\"v-6a58427d#13/2\",\"1704\":\"v-6a58427d#13/3\",\"1705\":\"v-6a58427d#14\",\"1706\":\"v-6a58427d#14/0\",\"1707\":\"v-6a58427d#15\",\"1708\":\"v-6a58427d#15/0\",\"1709\":\"v-6a58427d#16\",\"1710\":\"v-6a58427d#16/0\",\"1711\":\"v-6a58427d#16/1\",\"1712\":\"v-6a58427d#16/2\",\"1713\":\"v-6a58427d#17\",\"1714\":\"v-6a58427d#17/0\",\"1715\":\"v-6a58427d#17/1\",\"1716\":\"v-6a58427d#17/2\",\"1717\":\"v-6a58427d#18\",\"1718\":\"v-6a58427d#18/0\",\"1719\":\"v-6a58427d#18/1\",\"1720\":\"v-6a58427d#18/2\",\"1721\":\"v-6a58427d#18/3\",\"1722\":\"v-6a58427d#18/4\",\"1723\":\"v-6a58427d#18/5\",\"1724\":\"v-6a58427d#18/6\",\"1725\":\"v-6a58427d#19\",\"1726\":\"v-6a58427d#19/0\",\"1727\":\"v-6a58427d#19/1\",\"1728\":\"v-6a58427d#19/2\",\"1729\":\"v-6a58427d#19/3\",\"1730\":\"v-6a58427d#20\",\"1731\":\"v-6a58427d#20/0\",\"1732\":\"v-6a58427d#21\",\"1733\":\"v-6a58427d#21/0\",\"1734\":\"v-6a58427d#21/1\",\"1735\":\"v-6a58427d#21/2\",\"1736\":\"v-6a58427d#21/3\",\"1737\":\"v-6a58427d#21/4\",\"1738\":\"v-6a58427d#22\",\"1739\":\"v-6a58427d#22/0\",\"1740\":\"v-6a58427d#22/1\",\"1741\":\"v-6a58427d#22/2\",\"1742\":\"v-6a58427d#22/3\",\"1743\":\"v-6a58427d#23\",\"1744\":\"v-6a58427d#23/0\",\"1745\":\"v-6a58427d#23/1\",\"1746\":\"v-6a58427d#24\",\"1747\":\"v-6a58427d#24/0\",\"1748\":\"v-6a58427d#24/1\",\"1749\":\"v-6a58427d#24/2\",\"1750\":\"v-6a58427d#24/3\",\"1751\":\"v-6a58427d#24/4\",\"1752\":\"v-6a58427d#24/5\",\"1753\":\"v-6a58427d#25\",\"1754\":\"v-6a58427d#25/0\",\"1755\":\"v-6a58427d#26\",\"1756\":\"v-6a58427d#26/0\",\"1757\":\"v-6a58427d#26/1\",\"1758\":\"v-6a58427d#27\",\"1759\":\"v-6a58427d#27/0\",\"1760\":\"v-6a58427d#28\",\"1761\":\"v-6a58427d#28/0\",\"1762\":\"v-6a58427d#29\",\"1763\":\"v-6a58427d#29/0\",\"1764\":\"v-6a58427d#29/1\",\"1765\":\"v-444699ba\",\"1766\":\"v-444699ba#1\",\"1767\":\"v-444699ba#2\",\"1768\":\"v-444699ba#2/0\",\"1769\":\"v-444699ba#2/1\",\"1770\":\"v-444699ba#2/2\",\"1771\":\"v-444699ba#2/3\",\"1772\":\"v-444699ba#2/4\",\"1773\":\"v-444699ba#3\",\"1774\":\"v-444699ba#3/0\",\"1775\":\"v-444699ba#3/1\",\"1776\":\"v-444699ba#3/2\",\"1777\":\"v-444699ba#3/3\",\"1778\":\"v-444699ba#3/4\",\"1779\":\"v-444699ba#3/5\",\"1780\":\"v-444699ba#3/6\",\"1781\":\"v-444699ba#4\",\"1782\":\"v-444699ba#4/0\",\"1783\":\"v-444699ba#4/1\",\"1784\":\"v-444699ba#4/2\",\"1785\":\"v-444699ba#5\",\"1786\":\"v-444699ba#5/0\",\"1787\":\"v-444699ba#5/1\",\"1788\":\"v-444699ba#5/2\",\"1789\":\"v-444699ba#5/3\",\"1790\":\"v-444699ba#5/4\",\"1791\":\"v-444699ba#5/5\",\"1792\":\"v-444699ba#5/6\",\"1793\":\"v-444699ba#5/7\",\"1794\":\"v-444699ba#5/8\",\"1795\":\"v-444699ba#6\",\"1796\":\"v-444699ba#6/0\",\"1797\":\"v-444699ba#6/1\",\"1798\":\"v-444699ba#6/2\",\"1799\":\"v-444699ba#6/3\",\"1800\":\"v-444699ba#6/4\",\"1801\":\"v-444699ba#6/5\",\"1802\":\"v-444699ba#6/6\",\"1803\":\"v-444699ba#6/7\",\"1804\":\"v-444699ba#6/8\",\"1805\":\"v-444699ba#6/9\",\"1806\":\"v-444699ba#6/10\",\"1807\":\"v-444699ba#6/11\",\"1808\":\"v-444699ba#6/12\",\"1809\":\"v-444699ba#7\",\"1810\":\"v-444699ba#7/0\",\"1811\":\"v-444699ba#7/1\",\"1812\":\"v-444699ba#7/2\",\"1813\":\"v-444699ba#8\",\"1814\":\"v-444699ba#9\",\"1815\":\"v-444699ba#9/0\",\"1816\":\"v-444699ba#9/1\",\"1817\":\"v-444699ba#9/2\",\"1818\":\"v-444699ba#9/3\",\"1819\":\"v-444699ba#9/4\",\"1820\":\"v-444699ba#9/5\",\"1821\":\"v-444699ba#9/6\",\"1822\":\"v-444699ba#9/7\",\"1823\":\"v-444699ba#9/8\",\"1824\":\"v-444699ba#9/9\",\"1825\":\"v-444699ba#9/10\",\"1826\":\"v-444699ba#9/11\",\"1827\":\"v-444699ba#9/12\",\"1828\":\"v-444699ba#9/13\",\"1829\":\"v-444699ba#9/14\",\"1830\":\"v-444699ba#9/15\",\"1831\":\"v-444699ba#9/16\",\"1832\":\"v-444699ba#10\",\"1833\":\"v-444699ba#10/0\",\"1834\":\"v-444699ba#10/1\",\"1835\":\"v-444699ba#10/2\",\"1836\":\"v-444699ba#10/3\",\"1837\":\"v-444699ba#10/4\",\"1838\":\"v-444699ba#10/5\",\"1839\":\"v-444699ba#10/6\",\"1840\":\"v-444699ba#10/7\",\"1841\":\"v-444699ba#11\",\"1842\":\"v-444699ba#11/0\",\"1843\":\"v-444699ba#11/1\",\"1844\":\"v-444699ba#11/2\",\"1845\":\"v-444699ba#11/3\",\"1846\":\"v-444699ba#11/4\",\"1847\":\"v-444699ba#11/5\",\"1848\":\"v-444699ba#11/6\",\"1849\":\"v-444699ba#11/7\",\"1850\":\"v-477bbf9a\",\"1851\":\"v-477bbf9a#1\",\"1852\":\"v-477bbf9a#2\",\"1853\":\"v-477bbf9a#2/0\",\"1854\":\"v-477bbf9a#2/1\",\"1855\":\"v-477bbf9a#2/2\",\"1856\":\"v-477bbf9a#2/3\",\"1857\":\"v-477bbf9a#2/4\",\"1858\":\"v-477bbf9a#2/5\",\"1859\":\"v-477bbf9a#3\",\"1860\":\"v-477bbf9a#3/0\",\"1861\":\"v-477bbf9a#3/1\",\"1862\":\"v-477bbf9a#3/2\",\"1863\":\"v-477bbf9a#3/3\",\"1864\":\"v-477bbf9a#3/4\",\"1865\":\"v-477bbf9a#3/5\",\"1866\":\"v-477bbf9a#3/6\",\"1867\":\"v-477bbf9a#3/7\",\"1868\":\"v-477bbf9a#3/8\",\"1869\":\"v-477bbf9a#3/9\",\"1870\":\"v-477bbf9a#3/10\",\"1871\":\"v-477bbf9a#3/11\",\"1872\":\"v-477bbf9a#3/12\",\"1873\":\"v-477bbf9a#3/13\",\"1874\":\"v-477bbf9a#3/14\",\"1875\":\"v-477bbf9a#3/15\",\"1876\":\"v-477bbf9a#4\",\"1877\":\"v-477bbf9a#4/0\",\"1878\":\"v-477bbf9a#4/1\",\"1879\":\"v-477bbf9a#4/2\",\"1880\":\"v-477bbf9a#4/3\",\"1881\":\"v-477bbf9a#5\",\"1882\":\"v-477bbf9a#6\",\"1883\":\"v-477bbf9a#6/0\",\"1884\":\"v-477bbf9a#6/1\",\"1885\":\"v-477bbf9a#6/2\",\"1886\":\"v-477bbf9a#6/3\",\"1887\":\"v-477bbf9a#6/4\",\"1888\":\"v-477bbf9a#6/5\",\"1889\":\"v-477bbf9a#6/6\",\"1890\":\"v-477bbf9a#7\",\"1891\":\"v-477bbf9a#7/0\",\"1892\":\"v-477bbf9a#7/1\",\"1893\":\"v-477bbf9a#7/2\",\"1894\":\"v-477bbf9a#7/3\",\"1895\":\"v-477bbf9a#7/4\",\"1896\":\"v-477bbf9a#7/5\",\"1897\":\"v-477bbf9a#7/6\",\"1898\":\"v-477bbf9a#8\",\"1899\":\"v-477bbf9a#8/0\",\"1900\":\"v-477bbf9a#8/1\",\"1901\":\"v-477bbf9a#8/2\",\"1902\":\"v-477bbf9a#8/3\",\"1903\":\"v-477bbf9a#8/4\",\"1904\":\"v-477bbf9a#8/5\",\"1905\":\"v-477bbf9a#8/6\",\"1906\":\"v-477bbf9a#8/7\",\"1907\":\"v-477bbf9a#8/8\",\"1908\":\"v-477bbf9a#8/9\",\"1909\":\"v-477bbf9a#8/10\",\"1910\":\"v-477bbf9a#8/11\",\"1911\":\"v-477bbf9a#9\",\"1912\":\"v-477bbf9a#10\",\"1913\":\"v-477bbf9a#10/0\",\"1914\":\"v-477bbf9a#10/1\",\"1915\":\"v-477bbf9a#10/2\",\"1916\":\"v-477bbf9a#11\",\"1917\":\"v-477bbf9a#11/0\",\"1918\":\"v-477bbf9a#11/1\",\"1919\":\"v-477bbf9a#12\",\"1920\":\"v-477bbf9a#12/0\",\"1921\":\"v-477bbf9a#12/1\",\"1922\":\"v-477bbf9a#12/2\",\"1923\":\"v-477bbf9a#13\",\"1924\":\"v-477bbf9a#13/0\",\"1925\":\"v-477bbf9a#13/1\",\"1926\":\"v-477bbf9a#13/2\",\"1927\":\"v-477bbf9a#14\",\"1928\":\"v-477bbf9a#14/0\",\"1929\":\"v-477bbf9a#14/1\",\"1930\":\"v-477bbf9a#14/2\",\"1931\":\"v-477bbf9a#14/3\",\"1932\":\"v-477bbf9a#14/4\",\"1933\":\"v-477bbf9a#14/5\",\"1934\":\"v-477bbf9a#14/6\",\"1935\":\"v-477bbf9a#15\",\"1936\":\"v-477bbf9a#15/0\",\"1937\":\"v-477bbf9a#15/1\",\"1938\":\"v-477bbf9a#15/2\",\"1939\":\"v-477bbf9a#15/3\",\"1940\":\"v-477bbf9a#15/4\",\"1941\":\"v-477bbf9a#15/5\",\"1942\":\"v-477bbf9a#15/6\",\"1943\":\"v-477bbf9a#16\",\"1944\":\"v-477bbf9a#16/0\",\"1945\":\"v-477bbf9a#17\",\"1946\":\"v-477bbf9a#17/0\",\"1947\":\"v-477bbf9a#17/1\",\"1948\":\"v-477bbf9a#17/2\",\"1949\":\"v-477bbf9a#17/3\",\"1950\":\"v-477bbf9a#17/4\",\"1951\":\"v-477bbf9a#17/5\",\"1952\":\"v-477bbf9a#17/6\",\"1953\":\"v-477bbf9a#17/7\",\"1954\":\"v-477bbf9a#17/8\",\"1955\":\"v-477bbf9a#17/9\",\"1956\":\"v-477bbf9a#18\",\"1957\":\"v-477bbf9a#18/0\",\"1958\":\"v-477bbf9a#18/1\",\"1959\":\"v-477bbf9a#19\",\"1960\":\"v-477bbf9a#19/0\",\"1961\":\"v-477bbf9a#20\",\"1962\":\"v-477bbf9a#20/0\",\"1963\":\"v-477bbf9a#20/1\",\"1964\":\"v-477bbf9a#20/2\",\"1965\":\"v-477bbf9a#20/3\",\"1966\":\"v-477bbf9a#20/4\",\"1967\":\"v-477bbf9a#20/5\",\"1968\":\"v-477bbf9a#20/6\",\"1969\":\"v-477bbf9a#20/7\",\"1970\":\"v-477bbf9a#20/8\",\"1971\":\"v-477bbf9a#20/9\",\"1972\":\"v-477bbf9a#20/10\",\"1973\":\"v-477bbf9a#20/11\",\"1974\":\"v-477bbf9a#20/12\",\"1975\":\"v-477bbf9a#20/13\",\"1976\":\"v-477bbf9a#21\",\"1977\":\"v-477bbf9a#21/0\",\"1978\":\"v-477bbf9a#21/1\",\"1979\":\"v-477bbf9a#21/2\",\"1980\":\"v-477bbf9a#21/3\",\"1981\":\"v-477bbf9a#21/4\",\"1982\":\"v-477bbf9a#21/5\",\"1983\":\"v-477bbf9a#21/6\",\"1984\":\"v-477bbf9a#21/7\",\"1985\":\"v-477bbf9a#21/8\",\"1986\":\"v-477bbf9a#21/9\",\"1987\":\"v-477bbf9a#21/10\",\"1988\":\"v-477bbf9a#21/11\",\"1989\":\"v-477bbf9a#21/12\",\"1990\":\"v-477bbf9a#22\",\"1991\":\"v-477bbf9a#22/0\",\"1992\":\"v-477bbf9a#22/1\",\"1993\":\"v-477bbf9a#22/2\",\"1994\":\"v-477bbf9a#22/3\",\"1995\":\"v-477bbf9a#22/4\",\"1996\":\"v-477bbf9a#23\",\"1997\":\"v-477bbf9a#23/0\",\"1998\":\"v-477bbf9a#23/1\",\"1999\":\"v-477bbf9a#23/2\",\"2000\":\"v-477bbf9a#23/3\",\"2001\":\"v-477bbf9a#23/4\",\"2002\":\"v-477bbf9a#23/5\",\"2003\":\"v-547bccc4\",\"2004\":\"v-547bccc4#1\",\"2005\":\"v-547bccc4#1/0\",\"2006\":\"v-547bccc4#2\",\"2007\":\"v-547bccc4#2/0\",\"2008\":\"v-547bccc4#2/1\",\"2009\":\"v-547bccc4#2/2\",\"2010\":\"v-547bccc4#2/3\",\"2011\":\"v-547bccc4#3\",\"2012\":\"v-547bccc4#3/0\",\"2013\":\"v-547bccc4#4\",\"2014\":\"v-547bccc4#5\",\"2015\":\"v-547bccc4#5/0\",\"2016\":\"v-547bccc4#5/1\",\"2017\":\"v-547bccc4#5/2\",\"2018\":\"v-547bccc4#5/3\",\"2019\":\"v-547bccc4#5/4\",\"2020\":\"v-547bccc4#5/5\",\"2021\":\"v-547bccc4#5/6\",\"2022\":\"v-547bccc4#5/7\",\"2023\":\"v-547bccc4#5/8\",\"2024\":\"v-547bccc4#5/9\",\"2025\":\"v-547bccc4#5/10\",\"2026\":\"v-547bccc4#5/11\",\"2027\":\"v-547bccc4#5/12\",\"2028\":\"v-547bccc4#5/13\",\"2029\":\"v-547bccc4#6\",\"2030\":\"v-547bccc4#6/0\",\"2031\":\"v-547bccc4#6/1\",\"2032\":\"v-547bccc4#6/2\",\"2033\":\"v-547bccc4#7\",\"2034\":\"v-547bccc4#7/0\",\"2035\":\"v-547bccc4#7/1\",\"2036\":\"v-547bccc4#7/2\",\"2037\":\"v-2d06a607\",\"2038\":\"v-2d06a607#1\",\"2039\":\"v-2d06a607#2\",\"2040\":\"v-2d06a607#3\",\"2041\":\"v-2d06a607#3/0\",\"2042\":\"v-2d06a607#4\",\"2043\":\"v-2d06a607#4/0\",\"2044\":\"v-2d06a607#5\",\"2045\":\"v-2d06a607#5/0\",\"2046\":\"v-2d06a607#6\",\"2047\":\"v-2d06a607#6/0\",\"2048\":\"v-2d06a607#6/1\",\"2049\":\"v-2d06a607#6/2\",\"2050\":\"v-2d06a607#6/3\",\"2051\":\"v-2d06a607#6/4\",\"2052\":\"v-2d06a607#6/5\",\"2053\":\"v-2d06a607#6/6\",\"2054\":\"v-2d06a607#6/7\",\"2055\":\"v-2d06a607#6/8\",\"2056\":\"v-2d06a607#7\",\"2057\":\"v-2d06a607#7/0\",\"2058\":\"v-2d06a607#7/1\",\"2059\":\"v-2d06a607#8\",\"2060\":\"v-2d06a607#8/0\",\"2061\":\"v-2d06a607#9\",\"2062\":\"v-2d06a607#9/0\",\"2063\":\"v-2d06a607#10\",\"2064\":\"v-2d06a607#10/0\",\"2065\":\"v-2d06a607#11\",\"2066\":\"v-2d06a607#11/0\",\"2067\":\"v-2d06a607#12\",\"2068\":\"v-2d06a607#12/0\",\"2069\":\"v-2d06a607#12/1\",\"2070\":\"v-2d06a607#13\",\"2071\":\"v-2d06a607#13/0\",\"2072\":\"v-2d06a607#13/1\",\"2073\":\"v-2d06a607#13/2\",\"2074\":\"v-2d06a607#13/3\",\"2075\":\"v-2d06a607#13/4\",\"2076\":\"v-2d06a607#13/5\",\"2077\":\"v-2d06a607#14\",\"2078\":\"v-2d06a607#14/0\",\"2079\":\"v-2d06a607#15\",\"2080\":\"v-2d06a607#15/0\",\"2081\":\"v-2d06a607#16\",\"2082\":\"v-2d06a607#17\",\"2083\":\"v-2d06a607#17/0\",\"2084\":\"v-2d06a607#17/1\",\"2085\":\"v-2d06a607#17/2\",\"2086\":\"v-2d06a607#17/3\",\"2087\":\"v-2d06a607#17/4\",\"2088\":\"v-2d06a607#17/5\",\"2089\":\"v-2d06a607#17/6\",\"2090\":\"v-2d06a607#17/7\",\"2091\":\"v-2d06a607#17/8\",\"2092\":\"v-2d06a607#17/9\",\"2093\":\"v-2d06a607#17/10\",\"2094\":\"v-2d06a607#17/11\",\"2095\":\"v-2d06a607#17/12\",\"2096\":\"v-2d06a607#17/13\",\"2097\":\"v-2d06a607#17/14\",\"2098\":\"v-2d06a607#17/15\",\"2099\":\"v-2d06a607#17/16\",\"2100\":\"v-2d06a607#17/17\",\"2101\":\"v-2d06a607#17/18\",\"2102\":\"v-2d06a607#17/19\",\"2103\":\"v-2d06a607#18\",\"2104\":\"v-2d06a607#18/0\",\"2105\":\"v-2d06a607#18/1\",\"2106\":\"v-2d06a607#18/2\",\"2107\":\"v-2d06a607#18/3\",\"2108\":\"v-2d06a607#18/4\",\"2109\":\"v-2d06a607#18/5\",\"2110\":\"v-2d06a607#18/6\",\"2111\":\"v-2d06a607#18/7\",\"2112\":\"v-2d06a607#18/8\",\"2113\":\"v-2d06a607#18/9\",\"2114\":\"v-2d06a607#19\",\"2115\":\"v-2d06a607#20\",\"2116\":\"v-2d06a607#20/0\",\"2117\":\"v-2d06a607#20/1\",\"2118\":\"v-2d06a607#20/2\",\"2119\":\"v-2d06a607#20/3\",\"2120\":\"v-2d06a607#21\",\"2121\":\"v-2d06a607#21/0\",\"2122\":\"v-2d06a607#22\",\"2123\":\"v-2d06a607#22/0\",\"2124\":\"v-2d06a607#22/1\",\"2125\":\"v-2d06a607#22/2\",\"2126\":\"v-2d06a607#22/3\",\"2127\":\"v-2d06a607#22/4\",\"2128\":\"v-2d06a607#22/5\",\"2129\":\"v-2d06a607#22/6\",\"2130\":\"v-2d06a607#22/7\",\"2131\":\"v-2d06a607#22/8\",\"2132\":\"v-2d06a607#22/9\",\"2133\":\"v-2d06a607#22/10\",\"2134\":\"v-2d06a607#22/11\",\"2135\":\"v-2d06a607#22/12\",\"2136\":\"v-2d06a607#22/13\",\"2137\":\"v-2d06a607#23\",\"2138\":\"v-2d06a607#23/0\",\"2139\":\"v-2d06a607#23/1\",\"2140\":\"v-2d06a607#23/2\",\"2141\":\"v-2d06a607#23/3\",\"2142\":\"v-2d06a607#23/4\",\"2143\":\"v-2d06a607#23/5\",\"2144\":\"v-2d06a607#23/6\",\"2145\":\"v-32737260\",\"2146\":\"v-32737260#1\",\"2147\":\"v-32737260#2\",\"2148\":\"v-32737260#2/0\",\"2149\":\"v-32737260#2/1\",\"2150\":\"v-32737260#2/2\",\"2151\":\"v-32737260#2/3\",\"2152\":\"v-32737260#2/4\",\"2153\":\"v-32737260#2/5\",\"2154\":\"v-32737260#2/6\",\"2155\":\"v-32737260#2/7\",\"2156\":\"v-32737260#2/8\",\"2157\":\"v-32737260#2/9\",\"2158\":\"v-32737260#2/10\",\"2159\":\"v-32737260#2/11\",\"2160\":\"v-32737260#2/12\",\"2161\":\"v-32737260#2/13\",\"2162\":\"v-32737260#2/14\",\"2163\":\"v-32737260#2/15\",\"2164\":\"v-32737260#3\",\"2165\":\"v-32737260#3/0\",\"2166\":\"v-32737260#3/1\",\"2167\":\"v-32737260#3/2\",\"2168\":\"v-32737260#3/3\",\"2169\":\"v-32737260#3/4\",\"2170\":\"v-32737260#3/5\",\"2171\":\"v-32737260#3/6\",\"2172\":\"v-32737260#4\",\"2173\":\"v-32737260#4/0\",\"2174\":\"v-32737260#4/1\",\"2175\":\"v-32737260#4/2\",\"2176\":\"v-32737260#4/3\",\"2177\":\"v-32737260#4/4\",\"2178\":\"v-32737260#4/5\",\"2179\":\"v-32737260#4/6\",\"2180\":\"v-32737260#5\",\"2181\":\"v-32737260#5/0\",\"2182\":\"v-32737260#5/1\",\"2183\":\"v-32737260#6\",\"2184\":\"v-32737260#6/2\",\"2185\":\"v-32737260#6/3\",\"2186\":\"v-32737260#6/4\",\"2187\":\"v-32737260#6/5\",\"2188\":\"v-32737260#6/6\",\"2189\":\"v-32737260#6/7\",\"2190\":\"v-544bf93a\",\"2191\":\"v-544bf93a#1\",\"2192\":\"v-544bf93a#1/0\",\"2193\":\"v-544bf93a#2\",\"2194\":\"v-544bf93a#2/0\",\"2195\":\"v-544bf93a#2/1\",\"2196\":\"v-544bf93a#2/2\",\"2197\":\"v-544bf93a#2/3\",\"2198\":\"v-544bf93a#2/4\",\"2199\":\"v-544bf93a#2/5\",\"2200\":\"v-544bf93a#2/6\",\"2201\":\"v-544bf93a#2/7\",\"2202\":\"v-544bf93a#2/8\",\"2203\":\"v-544bf93a#2/9\",\"2204\":\"v-544bf93a#2/10\",\"2205\":\"v-544bf93a#2/11\",\"2206\":\"v-544bf93a#2/12\",\"2207\":\"v-544bf93a#2/13\",\"2208\":\"v-544bf93a#2/14\",\"2209\":\"v-544bf93a#2/15\",\"2210\":\"v-544bf93a#2/16\",\"2211\":\"v-544bf93a#2/17\",\"2212\":\"v-544bf93a#2/18\",\"2213\":\"v-544bf93a#3\",\"2214\":\"v-544bf93a#3/19\",\"2215\":\"v-544bf93a#3/20\",\"2216\":\"v-544bf93a#3/21\",\"2217\":\"v-544bf93a#3/22\",\"2218\":\"v-544bf93a#4\",\"2219\":\"v-544bf93a#4/0\",\"2220\":\"v-544bf93a#4/1\",\"2221\":\"v-544bf93a#4/2\",\"2222\":\"v-544bf93a#4/3\",\"2223\":\"v-544bf93a#4/4\",\"2224\":\"v-544bf93a#4/5\",\"2225\":\"v-544bf93a#5\",\"2226\":\"v-544bf93a#5/0\",\"2227\":\"v-544bf93a#6\",\"2228\":\"v-544bf93a#6/0\",\"2229\":\"v-544bf93a#6/1\",\"2230\":\"v-544bf93a#6/2\",\"2231\":\"v-544bf93a#6/3\",\"2232\":\"v-544bf93a#6/4\",\"2233\":\"v-544bf93a#6/5\",\"2234\":\"v-544bf93a#6/6\",\"2235\":\"v-544bf93a#6/7\",\"2236\":\"v-544bf93a#6/8\",\"2237\":\"v-544bf93a#7\",\"2238\":\"v-544bf93a#7/0\",\"2239\":\"v-544bf93a#7/1\",\"2240\":\"v-544bf93a#7/2\",\"2241\":\"v-544bf93a#7/3\",\"2242\":\"v-544bf93a#7/4\",\"2243\":\"v-544bf93a#7/5\",\"2244\":\"v-544bf93a#7/6\",\"2245\":\"v-544bf93a#7/7\",\"2246\":\"v-544bf93a#7/8\",\"2247\":\"v-544bf93a#7/9\",\"2248\":\"v-544bf93a#7/10\",\"2249\":\"v-544bf93a#7/11\",\"2250\":\"v-544bf93a#7/12\",\"2251\":\"v-544bf93a#7/13\",\"2252\":\"v-544bf93a#7/14\",\"2253\":\"v-544bf93a#7/15\",\"2254\":\"v-544bf93a#7/16\",\"2255\":\"v-544bf93a#7/17\",\"2256\":\"v-544bf93a#7/18\",\"2257\":\"v-544bf93a#7/19\",\"2258\":\"v-544bf93a#7/20\",\"2259\":\"v-544bf93a#8\",\"2260\":\"v-544bf93a#8/0\",\"2261\":\"v-544bf93a#8/1\",\"2262\":\"v-544bf93a#8/2\",\"2263\":\"v-544bf93a#8/3\",\"2264\":\"v-544bf93a#8/4\",\"2265\":\"v-544bf93a#8/5\",\"2266\":\"v-544bf93a#8/6\",\"2267\":\"v-544bf93a#8/7\",\"2268\":\"v-544bf93a#8/8\",\"2269\":\"v-544bf93a#8/9\",\"2270\":\"v-544bf93a#9\",\"2271\":\"v-544bf93a#9/0\",\"2272\":\"v-544bf93a#9/1\",\"2273\":\"v-544bf93a#9/2\",\"2274\":\"v-544bf93a#9/3\",\"2275\":\"v-544bf93a#9/4\",\"2276\":\"v-544bf93a#9/5\",\"2277\":\"v-544bf93a#9/6\",\"2278\":\"v-544bf93a#9/7\",\"2279\":\"v-544bf93a#9/8\",\"2280\":\"v-544bf93a#9/9\",\"2281\":\"v-544bf93a#9/10\",\"2282\":\"v-544bf93a#9/11\",\"2283\":\"v-544bf93a#9/12\",\"2284\":\"v-544bf93a#9/13\",\"2285\":\"v-544bf93a#9/14\",\"2286\":\"v-544bf93a#9/15\",\"2287\":\"v-544bf93a#9/16\",\"2288\":\"v-544bf93a#9/17\",\"2289\":\"v-544bf93a#10\",\"2290\":\"v-544bf93a#10/0\",\"2291\":\"v-544bf93a#10/1\",\"2292\":\"v-544bf93a#10/2\",\"2293\":\"v-544bf93a#10/3\",\"2294\":\"v-544bf93a#10/4\",\"2295\":\"v-544bf93a#10/5\",\"2296\":\"v-544bf93a#10/6\",\"2297\":\"v-544bf93a#10/7\",\"2298\":\"v-544bf93a#10/8\",\"2299\":\"v-544bf93a#10/9\",\"2300\":\"v-544bf93a#10/10\",\"2301\":\"v-544bf93a#10/11\",\"2302\":\"v-544bf93a#10/12\",\"2303\":\"v-544bf93a#10/13\",\"2304\":\"v-544bf93a#10/14\",\"2305\":\"v-544bf93a#11\",\"2306\":\"v-544bf93a#11/0\",\"2307\":\"v-544bf93a#11/1\",\"2308\":\"v-544bf93a#11/2\",\"2309\":\"v-544bf93a#11/3\",\"2310\":\"v-544bf93a#12\",\"2311\":\"v-544bf93a#12/0\",\"2312\":\"v-544bf93a#12/1\",\"2313\":\"v-544bf93a#12/2\",\"2314\":\"v-544bf93a#12/3\",\"2315\":\"v-544bf93a#12/4\",\"2316\":\"v-544bf93a#12/5\",\"2317\":\"v-544bf93a#12/6\",\"2318\":\"v-544bf93a#12/7\",\"2319\":\"v-544bf93a#12/8\",\"2320\":\"v-544bf93a#12/9\",\"2321\":\"v-544bf93a#12/10\",\"2322\":\"v-544bf93a#12/11\",\"2323\":\"v-544bf93a#12/12\",\"2324\":\"v-544bf93a#12/13\",\"2325\":\"v-544bf93a#12/14\",\"2326\":\"v-544bf93a#12/15\",\"2327\":\"v-544bf93a#12/16\",\"2328\":\"v-544bf93a#12/17\",\"2329\":\"v-544bf93a#12/18\",\"2330\":\"v-544bf93a#12/19\",\"2331\":\"v-544bf93a#12/20\",\"2332\":\"v-544bf93a#12/21\",\"2333\":\"v-544bf93a#12/22\",\"2334\":\"v-544bf93a#12/23\",\"2335\":\"v-544bf93a#12/24\",\"2336\":\"v-544bf93a#12/25\",\"2337\":\"v-544bf93a#12/26\",\"2338\":\"v-544bf93a#12/27\",\"2339\":\"v-544bf93a#12/28\",\"2340\":\"v-544bf93a#12/29\",\"2341\":\"v-544bf93a#12/30\",\"2342\":\"v-544bf93a#12/31\",\"2343\":\"v-544bf93a#12/32\",\"2344\":\"v-544bf93a#13\",\"2345\":\"v-544bf93a#13/0\",\"2346\":\"v-2088cfe4\",\"2347\":\"v-2088cfe4#1\",\"2348\":\"v-2088cfe4#1/0\",\"2349\":\"v-2088cfe4#1/1\",\"2350\":\"v-2088cfe4#1/2\",\"2351\":\"v-2088cfe4#1/3\",\"2352\":\"v-2088cfe4#1/4\",\"2353\":\"v-2088cfe4#1/5\",\"2354\":\"v-2088cfe4#1/6\",\"2355\":\"v-2088cfe4#1/7\",\"2356\":\"v-2088cfe4#1/8\",\"2357\":\"v-2088cfe4#2\",\"2358\":\"v-2088cfe4#2/0\",\"2359\":\"v-2088cfe4#2/1\",\"2360\":\"v-2088cfe4#2/2\",\"2361\":\"v-2088cfe4#2/3\",\"2362\":\"v-2088cfe4#2/4\",\"2363\":\"v-2088cfe4#2/5\",\"2364\":\"v-2088cfe4#2/6\",\"2365\":\"v-2088cfe4#2/7\",\"2366\":\"v-2088cfe4#2/8\",\"2367\":\"v-2088cfe4#2/9\",\"2368\":\"v-2088cfe4#2/10\",\"2369\":\"v-2088cfe4#2/11\",\"2370\":\"v-2088cfe4#2/12\",\"2371\":\"v-2088cfe4#2/13\",\"2372\":\"v-1dff623b\",\"2373\":\"v-1dff623b#1\",\"2374\":\"v-1dff623b#1/0\",\"2375\":\"v-1dff623b#1/1\",\"2376\":\"v-1dff623b#2\",\"2377\":\"v-1dff623b#2/0\",\"2378\":\"v-1dff623b#3\",\"2379\":\"v-1dff623b#3/1\",\"2380\":\"v-1dff623b#3/2\",\"2381\":\"v-1dff623b#3/3\",\"2382\":\"v-1dff623b#3/4\",\"2383\":\"v-1dff623b#4\",\"2384\":\"v-1dff623b#4/0\",\"2385\":\"v-1dff623b#4/1\",\"2386\":\"v-1dff623b#4/2\",\"2387\":\"v-1dff623b#4/3\",\"2388\":\"v-1dff623b#4/4\",\"2389\":\"v-1dff623b#4/5\",\"2390\":\"v-1dff623b#4/6\",\"2391\":\"v-1dff623b#4/7\",\"2392\":\"v-1dff623b#4/8\",\"2393\":\"v-1dff623b#4/9\",\"2394\":\"v-1dff623b#4/10\",\"2395\":\"v-1dff623b#4/11\",\"2396\":\"v-1dff623b#4/12\",\"2397\":\"v-0daa9495\",\"2398\":\"v-0daa9495#0/0\",\"2399\":\"v-0daa9495#0/1\",\"2400\":\"v-0daa9495#0/2\",\"2401\":\"v-0daa9495#0/3\",\"2402\":\"v-0daa9495#0/4\",\"2403\":\"v-0daa9495#0/5\",\"2404\":\"v-0daa9495#0/6\",\"2405\":\"v-0daa9495#0/7\",\"2406\":\"v-0daa9495#0/8\",\"2407\":\"v-0daa9495#0/9\",\"2408\":\"v-0daa9495#0/10\",\"2409\":\"v-0daa9495#0/11\",\"2410\":\"v-0daa9495#0/12\",\"2411\":\"v-0daa9495#0/13\",\"2412\":\"v-0daa9495#0/14\",\"2413\":\"v-0daa9495#0/15\",\"2414\":\"v-0daa9495#0/16\",\"2415\":\"v-0daa9495#0/17\",\"2416\":\"v-0daa9495#0/18\",\"2417\":\"v-0daa9495#0/19\",\"2418\":\"v-0daa9495#0/20\",\"2419\":\"v-0daa9495#0/21\",\"2420\":\"v-0daa9495#0/22\",\"2421\":\"v-0daa9495#0/23\",\"2422\":\"v-0daa9495#0/24\",\"2423\":\"v-0daa9495#0/25\",\"2424\":\"v-0daa9495#0/26\",\"2425\":\"v-0daa9495#0/27\",\"2426\":\"v-0daa9495#0/28\",\"2427\":\"v-0daa9495#0/29\",\"2428\":\"v-0daa9495#0/30\",\"2429\":\"v-0daa9495#0/31\",\"2430\":\"v-0daa9495#0/32\",\"2431\":\"v-0daa9495#0/33\",\"2432\":\"v-0daa9495#0/34\",\"2433\":\"v-0daa9495#0/35\",\"2434\":\"v-0daa9495#0/36\",\"2435\":\"v-0daa9495#0/37\",\"2436\":\"v-0daa9495#0/38\",\"2437\":\"v-0daa9495#0/39\",\"2438\":\"v-0daa9495#0/40\",\"2439\":\"v-0daa9495#0/41\",\"2440\":\"v-0daa9495#0/42\",\"2441\":\"v-0daa9495#1\",\"2442\":\"v-0daa9495#2\",\"2443\":\"v-0daa9495#2/0\",\"2444\":\"v-0daa9495#2/1\",\"2445\":\"v-0daa9495#2/2\",\"2446\":\"v-0daa9495#2/3\",\"2447\":\"v-0daa9495#2/4\",\"2448\":\"v-0daa9495#2/5\",\"2449\":\"v-0daa9495#2/6\",\"2450\":\"v-0daa9495#2/7\",\"2451\":\"v-0daa9495#3\",\"2452\":\"v-0daa9495#3/0\",\"2453\":\"v-0daa9495#3/1\",\"2454\":\"v-0daa9495#4\",\"2455\":\"v-0daa9495#4/0\",\"2456\":\"v-0daa9495#4/1\",\"2457\":\"v-0daa9495#4/2\",\"2458\":\"v-0daa9495#4/3\",\"2459\":\"v-0daa9495#4/4\",\"2460\":\"v-0daa9495#5\",\"2461\":\"v-0daa9495#5/0\",\"2462\":\"v-0daa9495#5/1\",\"2463\":\"v-0daa9495#5/2\",\"2464\":\"v-0daa9495#5/3\",\"2465\":\"v-0daa9495#5/4\",\"2466\":\"v-0daa9495#6\",\"2467\":\"v-0daa9495#6/0\",\"2468\":\"v-0daa9495#6/1\",\"2469\":\"v-0daa9495#6/2\",\"2470\":\"v-0daa9495#6/3\",\"2471\":\"v-0daa9495#6/4\",\"2472\":\"v-0daa9495#6/5\",\"2473\":\"v-0daa9495#6/6\",\"2474\":\"v-0daa9495#6/7\",\"2475\":\"v-0daa9495#6/8\",\"2476\":\"v-0daa9495#6/9\",\"2477\":\"v-0daa9495#6/10\",\"2478\":\"v-0daa9495#6/11\",\"2479\":\"v-0daa9495#7\",\"2480\":\"v-0daa9495#7/0\",\"2481\":\"v-0daa9495#8\",\"2482\":\"v-0daa9495#8/0\",\"2483\":\"v-0daa9495#8/1\",\"2484\":\"v-0daa9495#8/2\",\"2485\":\"v-0daa9495#8/3\",\"2486\":\"v-0daa9495#8/4\",\"2487\":\"v-0daa9495#8/5\",\"2488\":\"v-0daa9495#8/6\",\"2489\":\"v-0daa9495#8/7\",\"2490\":\"v-0daa9495#8/8\",\"2491\":\"v-0daa9495#8/9\",\"2492\":\"v-0daa9495#8/10\",\"2493\":\"v-0daa9495#8/11\",\"2494\":\"v-0daa9495#8/12\",\"2495\":\"v-0daa9495#8/13\",\"2496\":\"v-0daa9495#8/14\",\"2497\":\"v-0daa9495#8/15\",\"2498\":\"v-0daa9495#8/16\",\"2499\":\"v-0daa9495#8/17\",\"2500\":\"v-0daa9495#8/18\",\"2501\":\"v-0daa9495#8/19\",\"2502\":\"v-0daa9495#8/20\",\"2503\":\"v-0daa9495#9\",\"2504\":\"v-0daa9495#9/0\",\"2505\":\"v-0daa9495#9/1\",\"2506\":\"v-0daa9495#9/2\",\"2507\":\"v-0daa9495#9/3\",\"2508\":\"v-0daa9495#9/4\",\"2509\":\"v-0daa9495#9/5\",\"2510\":\"v-0daa9495#9/6\",\"2511\":\"v-0daa9495#9/7\",\"2512\":\"v-0daa9495#9/8\",\"2513\":\"v-0daa9495#9/9\",\"2514\":\"v-0daa9495#9/10\",\"2515\":\"v-0daa9495#9/11\",\"2516\":\"v-0daa9495#10\",\"2517\":\"v-0daa9495#10/0\",\"2518\":\"v-0daa9495#10/1\",\"2519\":\"v-0daa9495#10/2\",\"2520\":\"v-0daa9495#10/3\",\"2521\":\"v-0daa9495#10/4\",\"2522\":\"v-0daa9495#10/5\",\"2523\":\"v-0daa9495#11\",\"2524\":\"v-0daa9495#12\",\"2525\":\"v-0daa9495#12/0\",\"2526\":\"v-0daa9495#12/1\",\"2527\":\"v-0daa9495#12/2\",\"2528\":\"v-0daa9495#12/3\",\"2529\":\"v-0daa9495#12/4\",\"2530\":\"v-0daa9495#12/5\",\"2531\":\"v-0daa9495#12/6\",\"2532\":\"v-0daa9495#12/7\",\"2533\":\"v-0daa9495#13\",\"2534\":\"v-0daa9495#13/0\",\"2535\":\"v-0daa9495#14\",\"2536\":\"v-0daa9495#14/0\",\"2537\":\"v-0daa9495#14/1\",\"2538\":\"v-0daa9495#14/2\",\"2539\":\"v-0daa9495#14/3\",\"2540\":\"v-0daa9495#14/4\",\"2541\":\"v-0daa9495#14/5\",\"2542\":\"v-0daa9495#14/6\",\"2543\":\"v-0daa9495#14/7\",\"2544\":\"v-0daa9495#14/8\",\"2545\":\"v-0daa9495#14/9\",\"2546\":\"v-0daa9495#14/10\",\"2547\":\"v-0daa9495#14/11\",\"2548\":\"v-0daa9495#14/12\",\"2549\":\"v-0daa9495#14/13\",\"2550\":\"v-0daa9495#14/14\",\"2551\":\"v-0daa9495#14/15\",\"2552\":\"v-0daa9495#14/16\",\"2553\":\"v-0daa9495#14/17\",\"2554\":\"v-0daa9495#14/18\",\"2555\":\"v-0daa9495#14/19\",\"2556\":\"v-0daa9495#14/20\",\"2557\":\"v-0daa9495#14/21\",\"2558\":\"v-0daa9495#14/22\",\"2559\":\"v-0daa9495#14/23\",\"2560\":\"v-0daa9495#15\",\"2561\":\"v-0daa9495#15/0\",\"2562\":\"v-0daa9495#15/1\",\"2563\":\"v-0daa9495#15/2\",\"2564\":\"v-0daa9495#16\",\"2565\":\"v-0daa9495#16/3\",\"2566\":\"v-0daa9495#17\",\"2567\":\"v-0daa9495#17/0\",\"2568\":\"v-0daa9495#17/1\",\"2569\":\"v-0daa9495#17/2\",\"2570\":\"v-0daa9495#18\",\"2571\":\"v-0daa9495#18/0\",\"2572\":\"v-0daa9495#19\",\"2573\":\"v-0daa9495#19/0\",\"2574\":\"v-0daa9495#19/1\",\"2575\":\"v-0daa9495#20\",\"2576\":\"v-0daa9495#20/0\",\"2577\":\"v-0daa9495#21\",\"2578\":\"v-0daa9495#21/0\",\"2579\":\"v-0daa9495#21/1\",\"2580\":\"v-0daa9495#21/2\",\"2581\":\"v-0daa9495#21/3\",\"2582\":\"v-0daa9495#21/4\",\"2583\":\"v-0daa9495#21/5\",\"2584\":\"v-0daa9495#21/6\",\"2585\":\"v-0daa9495#21/7\",\"2586\":\"v-0daa9495#21/8\",\"2587\":\"v-0daa9495#21/9\",\"2588\":\"v-0daa9495#21/10\",\"2589\":\"v-0daa9495#21/11\",\"2590\":\"v-0daa9495#21/12\",\"2591\":\"v-0daa9495#21/13\",\"2592\":\"v-0daa9495#22\",\"2593\":\"v-0daa9495#23\",\"2594\":\"v-0daa9495#23/0\",\"2595\":\"v-0daa9495#23/1\",\"2596\":\"v-0daa9495#23/2\",\"2597\":\"v-0daa9495#23/3\",\"2598\":\"v-0daa9495#23/4\",\"2599\":\"v-0daa9495#23/5\",\"2600\":\"v-0daa9495#23/6\",\"2601\":\"v-0daa9495#23/7\",\"2602\":\"v-0daa9495#23/8\",\"2603\":\"v-0daa9495#24\",\"2604\":\"v-0daa9495#24/0\",\"2605\":\"v-0daa9495#25\",\"2606\":\"v-0daa9495#25/0\",\"2607\":\"v-0daa9495#26\",\"2608\":\"v-0daa9495#26/0\",\"2609\":\"v-0daa9495#27\",\"2610\":\"v-0daa9495#27/0\",\"2611\":\"v-0daa9495#28\",\"2612\":\"v-0daa9495#28/0\",\"2613\":\"v-0daa9495#29\",\"2614\":\"v-0daa9495#29/0\",\"2615\":\"v-0daa9495#29/1\",\"2616\":\"v-0daa9495#30\",\"2617\":\"v-0daa9495#30/0\",\"2618\":\"v-0daa9495#30/1\",\"2619\":\"v-0daa9495#30/2\",\"2620\":\"v-0daa9495#30/3\",\"2621\":\"v-0daa9495#31\",\"2622\":\"v-0daa9495#31/0\",\"2623\":\"v-0daa9495#31/1\",\"2624\":\"v-0daa9495#31/2\",\"2625\":\"v-0daa9495#32\",\"2626\":\"v-0daa9495#32/0\",\"2627\":\"v-0daa9495#32/1\",\"2628\":\"v-0daa9495#32/2\",\"2629\":\"v-0daa9495#33\",\"2630\":\"v-0daa9495#33/0\",\"2631\":\"v-0daa9495#34\",\"2632\":\"v-0daa9495#34/0\",\"2633\":\"v-0daa9495#35\",\"2634\":\"v-0daa9495#35/0\",\"2635\":\"v-0daa9495#35/1\",\"2636\":\"v-0daa9495#36\",\"2637\":\"v-0daa9495#36/0\",\"2638\":\"v-0daa9495#37\",\"2639\":\"v-0daa9495#38\",\"2640\":\"v-0daa9495#38/0\",\"2641\":\"v-0daa9495#39\",\"2642\":\"v-0daa9495#39/0\",\"2643\":\"v-0daa9495#39/1\",\"2644\":\"v-0daa9495#40\",\"2645\":\"v-0daa9495#40/0\",\"2646\":\"v-0daa9495#40/1\",\"2647\":\"v-0daa9495#41\",\"2648\":\"v-0daa9495#42\",\"2649\":\"v-0daa9495#42/0\",\"2650\":\"v-0daa9495#42/1\",\"2651\":\"v-0daa9495#43\",\"2652\":\"v-0daa9495#43/0\",\"2653\":\"v-0daa9495#43/1\",\"2654\":\"v-0daa9495#43/2\",\"2655\":\"v-0daa9495#43/3\",\"2656\":\"v-0daa9495#43/4\",\"2657\":\"v-0daa9495#43/5\",\"2658\":\"v-0daa9495#44\",\"2659\":\"v-0daa9495#44/0\",\"2660\":\"v-0daa9495#44/1\",\"2661\":\"v-0daa9495#44/2\",\"2662\":\"v-0daa9495#45\",\"2663\":\"v-0daa9495#45/0\",\"2664\":\"v-0daa9495#45/1\",\"2665\":\"v-0daa9495#45/2\",\"2666\":\"v-0daa9495#45/3\",\"2667\":\"v-0daa9495#45/4\",\"2668\":\"v-0daa9495#45/5\",\"2669\":\"v-0daa9495#45/6\",\"2670\":\"v-0daa9495#45/7\",\"2671\":\"v-0daa9495#45/8\",\"2672\":\"v-0daa9495#45/9\",\"2673\":\"v-0daa9495#45/10\",\"2674\":\"v-0daa9495#45/11\",\"2675\":\"v-0daa9495#45/12\",\"2676\":\"v-0daa9495#45/13\",\"2677\":\"v-0daa9495#45/14\",\"2678\":\"v-0daa9495#45/15\",\"2679\":\"v-0daa9495#46\",\"2680\":\"v-0daa9495#46/0\",\"2681\":\"v-0daa9495#46/1\",\"2682\":\"v-0daa9495#46/2\",\"2683\":\"v-0daa9495#46/3\",\"2684\":\"v-0daa9495#46/4\",\"2685\":\"v-0daa9495#47\",\"2686\":\"v-0daa9495#47/0\",\"2687\":\"v-0daa9495#47/1\",\"2688\":\"v-0daa9495#47/2\",\"2689\":\"v-0daa9495#47/3\",\"2690\":\"v-0daa9495#48\",\"2691\":\"v-0daa9495#48/0\",\"2692\":\"v-0daa9495#48/1\",\"2693\":\"v-0daa9495#48/2\",\"2694\":\"v-0daa9495#48/3\",\"2695\":\"v-0daa9495#48/4\",\"2696\":\"v-0daa9495#48/5\",\"2697\":\"v-0daa9495#48/6\",\"2698\":\"v-0daa9495#48/7\",\"2699\":\"v-0daa9495#48/8\",\"2700\":\"v-0daa9495#48/9\",\"2701\":\"v-0daa9495#49\",\"2702\":\"v-0daa9495#49/0\",\"2703\":\"v-0daa9495#49/1\",\"2704\":\"v-0daa9495#49/2\",\"2705\":\"v-0daa9495#49/3\",\"2706\":\"v-0daa9495#49/4\",\"2707\":\"v-0daa9495#50\",\"2708\":\"v-0daa9495#50/5\",\"2709\":\"v-0daa9495#50/6\",\"2710\":\"v-0daa9495#51\",\"2711\":\"v-0daa9495#51/0\",\"2712\":\"v-0daa9495#51/1\",\"2713\":\"v-265d1e46\",\"2714\":\"v-265d1e46#1\",\"2715\":\"v-265d1e46#1/0\",\"2716\":\"v-265d1e46#1/1\",\"2717\":\"v-265d1e46#1/2\",\"2718\":\"v-265d1e46#1/3\",\"2719\":\"v-265d1e46#1/4\",\"2720\":\"v-265d1e46#1/5\",\"2721\":\"v-265d1e46#1/6\",\"2722\":\"v-265d1e46#1/7\",\"2723\":\"v-265d1e46#2\",\"2724\":\"v-265d1e46#3\",\"2725\":\"v-6703a744\",\"2726\":\"v-6703a744#1\",\"2727\":\"v-6703a744#2\",\"2728\":\"v-6703a744#2/0\",\"2729\":\"v-6703a744#2/1\",\"2730\":\"v-6703a744#2/2\",\"2731\":\"v-6703a744#2/3\",\"2732\":\"v-6703a744#2/4\",\"2733\":\"v-6703a744#2/5\",\"2734\":\"v-6703a744#2/6\",\"2735\":\"v-6703a744#2/7\",\"2736\":\"v-6703a744#2/8\",\"2737\":\"v-6703a744#2/9\",\"2738\":\"v-6703a744#2/10\",\"2739\":\"v-6703a744#2/11\",\"2740\":\"v-6703a744#2/12\",\"2741\":\"v-6703a744#2/13\",\"2742\":\"v-6703a744#2/14\",\"2743\":\"v-6703a744#2/15\",\"2744\":\"v-6703a744#2/16\",\"2745\":\"v-6703a744#2/17\",\"2746\":\"v-6703a744#2/18\",\"2747\":\"v-6703a744#2/19\",\"2748\":\"v-6703a744#2/20\",\"2749\":\"v-6703a744#2/21\",\"2750\":\"v-6703a744#2/22\",\"2751\":\"v-6703a744#3\",\"2752\":\"v-6703a744#3/0\",\"2753\":\"v-6703a744#4\",\"2754\":\"v-6703a744#4/0\",\"2755\":\"v-6703a744#4/1\",\"2756\":\"v-6703a744#4/2\",\"2757\":\"v-6703a744#4/3\",\"2758\":\"v-6703a744#4/4\",\"2759\":\"v-6703a744#4/5\",\"2760\":\"v-6703a744#4/6\",\"2761\":\"v-6703a744#4/7\",\"2762\":\"v-6703a744#4/8\",\"2763\":\"v-6703a744#4/9\",\"2764\":\"v-6703a744#4/10\",\"2765\":\"v-6703a744#4/11\",\"2766\":\"v-6703a744#4/12\",\"2767\":\"v-6703a744#4/13\",\"2768\":\"v-6703a744#5\",\"2769\":\"v-6703a744#5/0\",\"2770\":\"v-6703a744#5/1\",\"2771\":\"v-6703a744#5/2\",\"2772\":\"v-6703a744#5/3\",\"2773\":\"v-6703a744#5/4\",\"2774\":\"v-6703a744#5/5\",\"2775\":\"v-6703a744#5/6\",\"2776\":\"v-6703a744#5/7\",\"2777\":\"v-6703a744#5/8\",\"2778\":\"v-6703a744#5/9\",\"2779\":\"v-6703a744#5/10\",\"2780\":\"v-6703a744#5/11\",\"2781\":\"v-6703a744#5/12\",\"2782\":\"v-6703a744#5/13\",\"2783\":\"v-6703a744#5/14\",\"2784\":\"v-6703a744#6\",\"2785\":\"v-6703a744#6/0\",\"2786\":\"v-6703a744#6/1\",\"2787\":\"v-6703a744#6/2\",\"2788\":\"v-6703a744#7\",\"2789\":\"v-6703a744#7/0\",\"2790\":\"v-6703a744#7/1\",\"2791\":\"v-6703a744#7/2\",\"2792\":\"v-6703a744#7/3\",\"2793\":\"v-6703a744#7/4\",\"2794\":\"v-6703a744#7/5\",\"2795\":\"v-6703a744#8\",\"2796\":\"v-6703a744#8/0\",\"2797\":\"v-6703a744#8/1\",\"2798\":\"v-6703a744#8/2\",\"2799\":\"v-6703a744#8/3\",\"2800\":\"v-6703a744#8/4\",\"2801\":\"v-6703a744#8/5\",\"2802\":\"v-6703a744#8/6\",\"2803\":\"v-6703a744#8/7\",\"2804\":\"v-6703a744#9\",\"2805\":\"v-6703a744#9/0\",\"2806\":\"v-6703a744#9/1\",\"2807\":\"v-6703a744#9/2\",\"2808\":\"v-6703a744#9/3\",\"2809\":\"v-6703a744#9/4\",\"2810\":\"v-6703a744#9/5\",\"2811\":\"v-6703a744#9/6\",\"2812\":\"v-6703a744#10\",\"2813\":\"v-6703a744#10/0\",\"2814\":\"v-6703a744#10/1\",\"2815\":\"v-6703a744#10/2\",\"2816\":\"v-6703a744#11\",\"2817\":\"v-6703a744#11/0\",\"2818\":\"v-6703a744#11/1\",\"2819\":\"v-6703a744#11/2\",\"2820\":\"v-6703a744#11/3\",\"2821\":\"v-6703a744#11/4\",\"2822\":\"v-6703a744#12\",\"2823\":\"v-6703a744#12/0\",\"2824\":\"v-6703a744#12/1\",\"2825\":\"v-6703a744#12/2\",\"2826\":\"v-6703a744#12/3\",\"2827\":\"v-6703a744#12/4\",\"2828\":\"v-6703a744#12/5\",\"2829\":\"v-6703a744#12/6\",\"2830\":\"v-6703a744#12/7\",\"2831\":\"v-6703a744#12/8\",\"2832\":\"v-6703a744#12/9\",\"2833\":\"v-6703a744#12/10\",\"2834\":\"v-6703a744#12/11\",\"2835\":\"v-6703a744#12/12\",\"2836\":\"v-6703a744#12/13\",\"2837\":\"v-6703a744#12/14\",\"2838\":\"v-6703a744#12/15\",\"2839\":\"v-6703a744#12/16\",\"2840\":\"v-6703a744#12/17\",\"2841\":\"v-6703a744#12/18\",\"2842\":\"v-6703a744#12/19\",\"2843\":\"v-6703a744#12/20\",\"2844\":\"v-6703a744#12/21\",\"2845\":\"v-6703a744#12/22\",\"2846\":\"v-6703a744#12/23\",\"2847\":\"v-6703a744#12/24\",\"2848\":\"v-6703a744#12/25\",\"2849\":\"v-6703a744#13\",\"2850\":\"v-6703a744#13/0\",\"2851\":\"v-6703a744#13/1\",\"2852\":\"v-6703a744#14\",\"2853\":\"v-6703a744#14/0\",\"2854\":\"v-6703a744#14/1\",\"2855\":\"v-6703a744#14/2\",\"2856\":\"v-6703a744#14/3\",\"2857\":\"v-6703a744#14/4\",\"2858\":\"v-6703a744#14/5\",\"2859\":\"v-6703a744#14/6\",\"2860\":\"v-6703a744#14/7\",\"2861\":\"v-6703a744#14/8\",\"2862\":\"v-6703a744#14/9\",\"2863\":\"v-6703a744#14/10\",\"2864\":\"v-6703a744#14/11\",\"2865\":\"v-6703a744#14/12\",\"2866\":\"v-6703a744#14/13\",\"2867\":\"v-6703a744#14/14\",\"2868\":\"v-6703a744#14/15\",\"2869\":\"v-6703a744#14/16\",\"2870\":\"v-6703a744#14/17\",\"2871\":\"v-6703a744#15\",\"2872\":\"v-6703a744#15/0\",\"2873\":\"v-6703a744#15/1\",\"2874\":\"v-6703a744#15/2\",\"2875\":\"v-6703a744#15/3\",\"2876\":\"v-6703a744#15/4\",\"2877\":\"v-6703a744#16\",\"2878\":\"v-6703a744#16/0\",\"2879\":\"v-6703a744#16/1\",\"2880\":\"v-6703a744#16/2\",\"2881\":\"v-6703a744#16/3\",\"2882\":\"v-6703a744#16/4\",\"2883\":\"v-6703a744#16/5\",\"2884\":\"v-6703a744#16/6\",\"2885\":\"v-6703a744#16/7\",\"2886\":\"v-6703a744#16/8\",\"2887\":\"v-6703a744#17\",\"2888\":\"v-6703a744#17/0\",\"2889\":\"v-6703a744#17/1\",\"2890\":\"v-6703a744#17/2\",\"2891\":\"v-6703a744#17/3\",\"2892\":\"v-6703a744#17/4\",\"2893\":\"v-6703a744#17/5\",\"2894\":\"v-6703a744#17/6\",\"2895\":\"v-6703a744#17/7\",\"2896\":\"v-6703a744#17/8\",\"2897\":\"v-6703a744#17/9\",\"2898\":\"v-6703a744#17/10\",\"2899\":\"v-6703a744#17/11\",\"2900\":\"v-6703a744#17/12\",\"2901\":\"v-6703a744#17/13\",\"2902\":\"v-6703a744#17/14\",\"2903\":\"v-6703a744#17/15\",\"2904\":\"v-6703a744#17/16\",\"2905\":\"v-6703a744#18\",\"2906\":\"v-6703a744#18/0\",\"2907\":\"v-6703a744#18/1\",\"2908\":\"v-6703a744#18/2\",\"2909\":\"v-6703a744#18/3\",\"2910\":\"v-6703a744#18/4\",\"2911\":\"v-6703a744#18/5\",\"2912\":\"v-6703a744#18/6\",\"2913\":\"v-6703a744#18/7\",\"2914\":\"v-6703a744#18/8\",\"2915\":\"v-6703a744#18/9\",\"2916\":\"v-6703a744#18/10\",\"2917\":\"v-6703a744#18/11\",\"2918\":\"v-6703a744#19\",\"2919\":\"v-6703a744#19/0\",\"2920\":\"v-6703a744#19/1\",\"2921\":\"v-6703a744#19/2\",\"2922\":\"v-6703a744#19/3\",\"2923\":\"v-6703a744#19/4\",\"2924\":\"v-6703a744#19/5\",\"2925\":\"v-6703a744#19/6\",\"2926\":\"v-6703a744#19/7\",\"2927\":\"v-6703a744#19/8\",\"2928\":\"v-6703a744#19/9\",\"2929\":\"v-6703a744#19/10\",\"2930\":\"v-6703a744#19/11\",\"2931\":\"v-6703a744#19/12\",\"2932\":\"v-6703a744#19/13\",\"2933\":\"v-6703a744#19/14\",\"2934\":\"v-6703a744#19/15\",\"2935\":\"v-6703a744#19/16\",\"2936\":\"v-6703a744#20\",\"2937\":\"v-6703a744#20/0\",\"2938\":\"v-6703a744#20/1\",\"2939\":\"v-6703a744#20/2\",\"2940\":\"v-6703a744#20/3\",\"2941\":\"v-6703a744#20/4\",\"2942\":\"v-6703a744#20/5\",\"2943\":\"v-6703a744#20/6\",\"2944\":\"v-6703a744#20/7\",\"2945\":\"v-6703a744#20/8\",\"2946\":\"v-6703a744#20/9\",\"2947\":\"v-6703a744#21\",\"2948\":\"v-6703a744#21/0\",\"2949\":\"v-6703a744#21/1\",\"2950\":\"v-6703a744#21/2\",\"2951\":\"v-6703a744#22\",\"2952\":\"v-6703a744#22/0\",\"2953\":\"v-6703a744#22/1\",\"2954\":\"v-6703a744#22/2\",\"2955\":\"v-6703a744#23\",\"2956\":\"v-6703a744#23/0\",\"2957\":\"v-6703a744#23/1\",\"2958\":\"v-6703a744#23/2\",\"2959\":\"v-6703a744#23/3\",\"2960\":\"v-6703a744#23/4\",\"2961\":\"v-6703a744#24\",\"2962\":\"v-6703a744#24/0\",\"2963\":\"v-6703a744#24/1\",\"2964\":\"v-6703a744#24/2\",\"2965\":\"v-6703a744#24/3\",\"2966\":\"v-6703a744#24/4\",\"2967\":\"v-6703a744#25\",\"2968\":\"v-6703a744#25/0\",\"2969\":\"v-6703a744#25/1\",\"2970\":\"v-6703a744#25/2\",\"2971\":\"v-6703a744#25/3\",\"2972\":\"v-6703a744#25/4\",\"2973\":\"v-6703a744#25/5\",\"2974\":\"v-6703a744#25/6\",\"2975\":\"v-6703a744#25/7\",\"2976\":\"v-6703a744#25/8\",\"2977\":\"v-6703a744#25/9\",\"2978\":\"v-6703a744#25/10\",\"2979\":\"v-6703a744#25/11\",\"2980\":\"v-6703a744#26\",\"2981\":\"v-6703a744#26/0\",\"2982\":\"v-6703a744#26/1\",\"2983\":\"v-6703a744#26/2\",\"2984\":\"v-6703a744#26/3\",\"2985\":\"v-6703a744#27\",\"2986\":\"v-6703a744#27/0\",\"2987\":\"v-6703a744#27/1\",\"2988\":\"v-6703a744#27/2\",\"2989\":\"v-6703a744#28\",\"2990\":\"v-6703a744#28/0\",\"2991\":\"v-6703a744#28/1\",\"2992\":\"v-6703a744#28/2\",\"2993\":\"v-6703a744#28/3\",\"2994\":\"v-6703a744#28/4\",\"2995\":\"v-6703a744#29\",\"2996\":\"v-6703a744#29/0\",\"2997\":\"v-6703a744#29/1\",\"2998\":\"v-6703a744#29/2\",\"2999\":\"v-6703a744#29/3\",\"3000\":\"v-6703a744#29/4\",\"3001\":\"v-6703a744#29/5\",\"3002\":\"v-6703a744#29/6\",\"3003\":\"v-6703a744#29/7\",\"3004\":\"v-6703a744#29/8\",\"3005\":\"v-6703a744#29/9\",\"3006\":\"v-6703a744#29/10\",\"3007\":\"v-6703a744#29/11\",\"3008\":\"v-6703a744#29/12\",\"3009\":\"v-6703a744#29/13\",\"3010\":\"v-6703a744#29/14\",\"3011\":\"v-6703a744#29/15\",\"3012\":\"v-6703a744#29/16\",\"3013\":\"v-6703a744#29/17\",\"3014\":\"v-6703a744#29/18\",\"3015\":\"v-6703a744#29/19\",\"3016\":\"v-6703a744#29/20\",\"3017\":\"v-6703a744#29/21\",\"3018\":\"v-6703a744#30\",\"3019\":\"v-6703a744#30/0\",\"3020\":\"v-6703a744#30/1\",\"3021\":\"v-6703a744#30/2\",\"3022\":\"v-6703a744#30/3\",\"3023\":\"v-6703a744#30/4\",\"3024\":\"v-6703a744#30/5\",\"3025\":\"v-6703a744#30/6\",\"3026\":\"v-6703a744#31\",\"3027\":\"v-6703a744#31/0\",\"3028\":\"v-6703a744#31/1\",\"3029\":\"v-6703a744#31/2\",\"3030\":\"v-6703a744#31/3\",\"3031\":\"v-6703a744#31/4\",\"3032\":\"v-6703a744#31/5\",\"3033\":\"v-6703a744#31/6\",\"3034\":\"v-6703a744#31/7\",\"3035\":\"v-6703a744#31/8\",\"3036\":\"v-6703a744#31/9\",\"3037\":\"v-6703a744#32\",\"3038\":\"v-6703a744#32/0\",\"3039\":\"v-6703a744#32/1\",\"3040\":\"v-6703a744#32/2\",\"3041\":\"v-6703a744#32/3\",\"3042\":\"v-6703a744#32/4\",\"3043\":\"v-6703a744#33\",\"3044\":\"v-6703a744#33/5\",\"3045\":\"v-6703a744#33/6\",\"3046\":\"v-6703a744#33/7\",\"3047\":\"v-6703a744#33/8\",\"3048\":\"v-6703a744#33/9\",\"3049\":\"v-6703a744#34\",\"3050\":\"v-6703a744#34/0\",\"3051\":\"v-6703a744#34/1\",\"3052\":\"v-6703a744#34/2\",\"3053\":\"v-6703a744#34/3\",\"3054\":\"v-6703a744#34/4\",\"3055\":\"v-6703a744#34/5\",\"3056\":\"v-6703a744#34/6\",\"3057\":\"v-6703a744#34/7\",\"3058\":\"v-6703a744#34/8\",\"3059\":\"v-6703a744#34/9\",\"3060\":\"v-6703a744#35\",\"3061\":\"v-6703a744#35/0\",\"3062\":\"v-6703a744#35/1\",\"3063\":\"v-6703a744#35/2\",\"3064\":\"v-6703a744#36\",\"3065\":\"v-6703a744#36/0\",\"3066\":\"v-6703a744#36/1\",\"3067\":\"v-6703a744#36/2\",\"3068\":\"v-6703a744#36/3\",\"3069\":\"v-6703a744#36/4\",\"3070\":\"v-6703a744#36/5\",\"3071\":\"v-6703a744#36/6\",\"3072\":\"v-6703a744#36/7\",\"3073\":\"v-6703a744#36/8\",\"3074\":\"v-6703a744#36/9\",\"3075\":\"v-6703a744#36/10\",\"3076\":\"v-6703a744#36/11\",\"3077\":\"v-6703a744#36/12\",\"3078\":\"v-6703a744#36/13\",\"3079\":\"v-6703a744#36/14\",\"3080\":\"v-6703a744#36/15\",\"3081\":\"v-6703a744#36/16\",\"3082\":\"v-6703a744#36/17\",\"3083\":\"v-6703a744#36/18\",\"3084\":\"v-6703a744#36/19\",\"3085\":\"v-6703a744#36/20\",\"3086\":\"v-6703a744#36/21\",\"3087\":\"v-959e8c2a\",\"3088\":\"v-959e8c2a#1\",\"3089\":\"v-959e8c2a#1/0\",\"3090\":\"v-959e8c2a#1/1\",\"3091\":\"v-959e8c2a#1/2\",\"3092\":\"v-959e8c2a#1/3\",\"3093\":\"v-959e8c2a#2\",\"3094\":\"v-959e8c2a#2/0\",\"3095\":\"v-959e8c2a#2/1\",\"3096\":\"v-959e8c2a#3\",\"3097\":\"v-959e8c2a#4\",\"3098\":\"v-959e8c2a#5\",\"3099\":\"v-959e8c2a#5/0\",\"3100\":\"v-959e8c2a#5/1\",\"3101\":\"v-959e8c2a#5/2\",\"3102\":\"v-959e8c2a#5/3\",\"3103\":\"v-959e8c2a#5/4\",\"3104\":\"v-959e8c2a#6\",\"3105\":\"v-959e8c2a#6/0\",\"3106\":\"v-959e8c2a#6/1\",\"3107\":\"v-959e8c2a#6/2\",\"3108\":\"v-959e8c2a#7\",\"3109\":\"v-959e8c2a#8\",\"3110\":\"v-959e8c2a#8/0\",\"3111\":\"v-959e8c2a#8/1\",\"3112\":\"v-959e8c2a#8/2\",\"3113\":\"v-959e8c2a#8/3\",\"3114\":\"v-959e8c2a#9\",\"3115\":\"v-959e8c2a#9/0\",\"3116\":\"v-959e8c2a#10\",\"3117\":\"v-959e8c2a#11\",\"3118\":\"v-959e8c2a#11/0\",\"3119\":\"v-959e8c2a#11/1\",\"3120\":\"v-959e8c2a#11/2\",\"3121\":\"v-959e8c2a#12\",\"3122\":\"v-959e8c2a#12/0\",\"3123\":\"v-959e8c2a#13\",\"3124\":\"v-959e8c2a#14\",\"3125\":\"v-959e8c2a#14/0\",\"3126\":\"v-959e8c2a#14/1\",\"3127\":\"v-959e8c2a#14/2\",\"3128\":\"v-959e8c2a#14/3\",\"3129\":\"v-959e8c2a#15\",\"3130\":\"v-959e8c2a#15/0\",\"3131\":\"v-959e8c2a#16\",\"3132\":\"v-959e8c2a#17\",\"3133\":\"v-959e8c2a#17/0\",\"3134\":\"v-959e8c2a#17/1\",\"3135\":\"v-959e8c2a#17/2\",\"3136\":\"v-959e8c2a#17/3\",\"3137\":\"v-959e8c2a#18\",\"3138\":\"v-959e8c2a#18/0\",\"3139\":\"v-959e8c2a#19\",\"3140\":\"v-959e8c2a#19/0\",\"3141\":\"v-959e8c2a#19/1\",\"3142\":\"v-959e8c2a#19/2\",\"3143\":\"v-959e8c2a#19/3\",\"3144\":\"v-959e8c2a#20\",\"3145\":\"v-959e8c2a#20/0\",\"3146\":\"v-959e8c2a#20/1\",\"3147\":\"v-959e8c2a#20/2\",\"3148\":\"v-959e8c2a#21\",\"3149\":\"v-959e8c2a#21/3\",\"3150\":\"v-959e8c2a#21/4\",\"3151\":\"v-959e8c2a#21/5\",\"3152\":\"v-959e8c2a#22\",\"3153\":\"v-959e8c2a#22/0\",\"3154\":\"v-959e8c2a#22/1\",\"3155\":\"v-959e8c2a#22/2\",\"3156\":\"v-959e8c2a#22/3\",\"3157\":\"v-959e8c2a#22/4\",\"3158\":\"v-959e8c2a#23\",\"3159\":\"v-959e8c2a#23/0\",\"3160\":\"v-959e8c2a#23/1\",\"3161\":\"v-959e8c2a#23/2\",\"3162\":\"v-959e8c2a#23/3\",\"3163\":\"v-959e8c2a#23/4\",\"3164\":\"v-959e8c2a#23/5\",\"3165\":\"v-959e8c2a#23/6\",\"3166\":\"v-959e8c2a#23/7\",\"3167\":\"v-959e8c2a#23/8\",\"3168\":\"v-959e8c2a#23/9\",\"3169\":\"v-959e8c2a#24\",\"3170\":\"v-959e8c2a#25\",\"3171\":\"v-959e8c2a#25/0\",\"3172\":\"v-959e8c2a#25/1\",\"3173\":\"v-959e8c2a#25/2\",\"3174\":\"v-959e8c2a#25/3\",\"3175\":\"v-959e8c2a#25/4\",\"3176\":\"v-959e8c2a#25/5\",\"3177\":\"v-959e8c2a#25/6\",\"3178\":\"v-959e8c2a#26\",\"3179\":\"v-959e8c2a#26/0\",\"3180\":\"v-959e8c2a#26/1\",\"3181\":\"v-959e8c2a#26/2\",\"3182\":\"v-959e8c2a#26/3\",\"3183\":\"v-959e8c2a#26/4\",\"3184\":\"v-959e8c2a#26/5\",\"3185\":\"v-959e8c2a#26/6\",\"3186\":\"v-959e8c2a#26/7\",\"3187\":\"v-959e8c2a#26/8\",\"3188\":\"v-959e8c2a#26/9\",\"3189\":\"v-959e8c2a#26/10\",\"3190\":\"v-959e8c2a#27\",\"3191\":\"v-959e8c2a#28\",\"3192\":\"v-959e8c2a#28/0\",\"3193\":\"v-959e8c2a#28/1\",\"3194\":\"v-959e8c2a#28/2\",\"3195\":\"v-959e8c2a#28/3\",\"3196\":\"v-959e8c2a#28/4\",\"3197\":\"v-959e8c2a#28/5\",\"3198\":\"v-959e8c2a#28/6\",\"3199\":\"v-959e8c2a#28/7\",\"3200\":\"v-959e8c2a#28/8\",\"3201\":\"v-959e8c2a#28/9\",\"3202\":\"v-959e8c2a#28/10\",\"3203\":\"v-959e8c2a#28/11\",\"3204\":\"v-959e8c2a#28/12\",\"3205\":\"v-959e8c2a#28/13\",\"3206\":\"v-959e8c2a#28/14\",\"3207\":\"v-959e8c2a#28/15\",\"3208\":\"v-959e8c2a#28/16\",\"3209\":\"v-959e8c2a#28/17\",\"3210\":\"v-959e8c2a#28/18\",\"3211\":\"v-959e8c2a#28/19\",\"3212\":\"v-959e8c2a#28/20\",\"3213\":\"v-959e8c2a#28/21\",\"3214\":\"v-959e8c2a#28/22\",\"3215\":\"v-959e8c2a#28/23\",\"3216\":\"v-959e8c2a#28/24\",\"3217\":\"v-959e8c2a#28/25\",\"3218\":\"v-959e8c2a#28/26\",\"3219\":\"v-959e8c2a#28/27\",\"3220\":\"v-959e8c2a#28/28\",\"3221\":\"v-959e8c2a#28/29\",\"3222\":\"v-959e8c2a#28/30\",\"3223\":\"v-959e8c2a#28/31\",\"3224\":\"v-959e8c2a#28/32\",\"3225\":\"v-959e8c2a#28/33\",\"3226\":\"v-959e8c2a#28/34\",\"3227\":\"v-959e8c2a#29\",\"3228\":\"v-959e8c2a#29/35\",\"3229\":\"v-959e8c2a#29/36\",\"3230\":\"v-959e8c2a#29/37\",\"3231\":\"v-959e8c2a#30\",\"3232\":\"v-959e8c2a#30/0\",\"3233\":\"v-959e8c2a#30/1\",\"3234\":\"v-959e8c2a#30/2\",\"3235\":\"v-959e8c2a#30/3\",\"3236\":\"v-959e8c2a#30/4\",\"3237\":\"v-959e8c2a#31\",\"3238\":\"v-959e8c2a#31/5\",\"3239\":\"v-959e8c2a#31/6\",\"3240\":\"v-959e8c2a#31/7\",\"3241\":\"v-959e8c2a#31/8\",\"3242\":\"v-959e8c2a#31/9\",\"3243\":\"v-959e8c2a#31/10\",\"3244\":\"v-959e8c2a#31/11\",\"3245\":\"v-959e8c2a#32\",\"3246\":\"v-959e8c2a#33\",\"3247\":\"v-959e8c2a#33/12\",\"3248\":\"v-959e8c2a#34\",\"3249\":\"v-959e8c2a#34/0\",\"3250\":\"v-959e8c2a#34/1\",\"3251\":\"v-959e8c2a#34/2\",\"3252\":\"v-959e8c2a#34/3\",\"3253\":\"v-959e8c2a#34/4\",\"3254\":\"v-959e8c2a#34/5\",\"3255\":\"v-959e8c2a#34/6\",\"3256\":\"v-959e8c2a#34/7\",\"3257\":\"v-959e8c2a#34/8\",\"3258\":\"v-959e8c2a#34/9\",\"3259\":\"v-959e8c2a#34/10\",\"3260\":\"v-959e8c2a#34/11\",\"3261\":\"v-959e8c2a#34/12\",\"3262\":\"v-959e8c2a#34/13\",\"3263\":\"v-959e8c2a#34/14\",\"3264\":\"v-959e8c2a#35\",\"3265\":\"v-959e8c2a#35/0\",\"3266\":\"v-959e8c2a#36\",\"3267\":\"v-959e8c2a#36/0\",\"3268\":\"v-959e8c2a#36/1\",\"3269\":\"v-959e8c2a#36/2\",\"3270\":\"v-959e8c2a#37\",\"3271\":\"v-959e8c2a#37/0\",\"3272\":\"v-959e8c2a#37/1\",\"3273\":\"v-959e8c2a#38\",\"3274\":\"v-959e8c2a#38/0\",\"3275\":\"v-959e8c2a#38/1\",\"3276\":\"v-959e8c2a#38/2\",\"3277\":\"v-959e8c2a#39\",\"3278\":\"v-959e8c2a#39/0\",\"3279\":\"v-959e8c2a#39/1\",\"3280\":\"v-959e8c2a#39/2\",\"3281\":\"v-959e8c2a#39/3\",\"3282\":\"v-959e8c2a#39/4\",\"3283\":\"v-959e8c2a#39/5\",\"3284\":\"v-959e8c2a#39/6\",\"3285\":\"v-959e8c2a#40\",\"3286\":\"v-959e8c2a#40/0\",\"3287\":\"v-e62b6a34\",\"3288\":\"v-e62b6a34#1\",\"3289\":\"v-e62b6a34#1/0\",\"3290\":\"v-e62b6a34#1/1\",\"3291\":\"v-e62b6a34#1/2\",\"3292\":\"v-e62b6a34#1/3\",\"3293\":\"v-e62b6a34#1/4\",\"3294\":\"v-e62b6a34#1/5\",\"3295\":\"v-e62b6a34#1/6\",\"3296\":\"v-e62b6a34#1/7\",\"3297\":\"v-e62b6a34#2\",\"3298\":\"v-e62b6a34#2/8\",\"3299\":\"v-e62b6a34#2/9\",\"3300\":\"v-e62b6a34#2/10\",\"3301\":\"v-e62b6a34#2/11\",\"3302\":\"v-e62b6a34#2/12\",\"3303\":\"v-e62b6a34#2/13\",\"3304\":\"v-e62b6a34#2/14\",\"3305\":\"v-e62b6a34#2/15\",\"3306\":\"v-e62b6a34#3\",\"3307\":\"v-e62b6a34#3/0\",\"3308\":\"v-e62b6a34#4\",\"3309\":\"v-e62b6a34#5\",\"3310\":\"v-e62b6a34#5/1\",\"3311\":\"v-e62b6a34#5/2\",\"3312\":\"v-e62b6a34#5/3\",\"3313\":\"v-e62b6a34#6\",\"3314\":\"v-e62b6a34#6/0\",\"3315\":\"v-e62b6a34#7\",\"3316\":\"v-e62b6a34#7/0\",\"3317\":\"v-e62b6a34#8\",\"3318\":\"v-e62b6a34#8/0\",\"3319\":\"v-e62b6a34#8/1\",\"3320\":\"v-e62b6a34#9\",\"3321\":\"v-e62b6a34#9/2\",\"3322\":\"v-e62b6a34#9/3\",\"3323\":\"v-e62b6a34#9/4\",\"3324\":\"v-e62b6a34#9/5\",\"3325\":\"v-e62b6a34#10\",\"3326\":\"v-e62b6a34#10/0\",\"3327\":\"v-e62b6a34#10/1\",\"3328\":\"v-e62b6a34#10/2\",\"3329\":\"v-e62b6a34#10/3\",\"3330\":\"v-5def573a\",\"3331\":\"v-5def573a#1\",\"3332\":\"v-5def573a#1/0\",\"3333\":\"v-5def573a#1/1\",\"3334\":\"v-5def573a#1/2\",\"3335\":\"v-5def573a#1/3\",\"3336\":\"v-5def573a#1/4\",\"3337\":\"v-5def573a#2\",\"3338\":\"v-5def573a#2/0\",\"3339\":\"v-5def573a#3\",\"3340\":\"v-5def573a#3/1\",\"3341\":\"v-5def573a#3/2\",\"3342\":\"v-5def573a#3/3\",\"3343\":\"v-5def573a#4\",\"3344\":\"v-5def573a#4/0\",\"3345\":\"v-5def573a#4/1\",\"3346\":\"v-5def573a#4/2\",\"3347\":\"v-5def573a#4/3\",\"3348\":\"v-5def573a#4/4\",\"3349\":\"v-5def573a#4/5\",\"3350\":\"v-5def573a#4/6\",\"3351\":\"v-5def573a#4/7\",\"3352\":\"v-5def573a#4/8\",\"3353\":\"v-5def573a#4/9\",\"3354\":\"v-5def573a#5\",\"3355\":\"v-5def573a#5/0\",\"3356\":\"v-5def573a#5/1\",\"3357\":\"v-5def573a#5/2\",\"3358\":\"v-5def573a#5/3\",\"3359\":\"v-5def573a#5/4\",\"3360\":\"v-5def573a#5/5\",\"3361\":\"v-5def573a#5/6\",\"3362\":\"v-5def573a#6\",\"3363\":\"v-5def573a#6/0\",\"3364\":\"v-5def573a#7\",\"3365\":\"v-5def573a#7/0\",\"3366\":\"v-5def573a#7/1\",\"3367\":\"v-5def573a#7/2\",\"3368\":\"v-5def573a#7/3\",\"3369\":\"v-5def573a#7/4\",\"3370\":\"v-5def573a#8\",\"3371\":\"v-5def573a#8/0\",\"3372\":\"v-5def573a#8/1\",\"3373\":\"v-5def573a#8/2\",\"3374\":\"v-5def573a#8/3\",\"3375\":\"v-5def573a#9\",\"3376\":\"v-5def573a#9/0\",\"3377\":\"v-5def573a#9/1\",\"3378\":\"v-5def573a#10\",\"3379\":\"v-5def573a#10/0\",\"3380\":\"v-5def573a#10/1\",\"3381\":\"v-5def573a#11\",\"3382\":\"v-5def573a#11/0\",\"3383\":\"v-5def573a#11/1\",\"3384\":\"v-5def573a#11/2\",\"3385\":\"v-5def573a#11/3\",\"3386\":\"v-5def573a#11/4\",\"3387\":\"v-5def573a#11/5\",\"3388\":\"v-5def573a#11/6\",\"3389\":\"v-5def573a#11/7\",\"3390\":\"v-5def573a#11/8\",\"3391\":\"v-8e2bead0\",\"3392\":\"v-8e2bead0#1\",\"3393\":\"v-8e2bead0#2\",\"3394\":\"v-8e2bead0#2/0\",\"3395\":\"v-8e2bead0#2/1\",\"3396\":\"v-8e2bead0#2/2\",\"3397\":\"v-8e2bead0#2/3\",\"3398\":\"v-8e2bead0#2/4\",\"3399\":\"v-8e2bead0#2/5\",\"3400\":\"v-8e2bead0#2/6\",\"3401\":\"v-8e2bead0#2/7\",\"3402\":\"v-8e2bead0#2/8\",\"3403\":\"v-8e2bead0#2/9\",\"3404\":\"v-8e2bead0#2/10\",\"3405\":\"v-8e2bead0#2/11\",\"3406\":\"v-8e2bead0#2/12\",\"3407\":\"v-8e2bead0#2/13\",\"3408\":\"v-8e2bead0#2/14\",\"3409\":\"v-8e2bead0#3\",\"3410\":\"v-8e2bead0#3/15\",\"3411\":\"v-8e2bead0#3/16\",\"3412\":\"v-8e2bead0#4\",\"3413\":\"v-8e2bead0#4/17\",\"3414\":\"v-8e2bead0#5\",\"3415\":\"v-8e2bead0#5/18\",\"3416\":\"v-8e2bead0#6\",\"3417\":\"v-8e2bead0#6/19\",\"3418\":\"v-8e2bead0#7\",\"3419\":\"v-8e2bead0#7/20\",\"3420\":\"v-8e2bead0#8\",\"3421\":\"v-8e2bead0#8/21\",\"3422\":\"v-8e2bead0#8/22\",\"3423\":\"v-8e2bead0#9\",\"3424\":\"v-8e2bead0#9/23\",\"3425\":\"v-8e2bead0#10\",\"3426\":\"v-8e2bead0#10/24\",\"3427\":\"v-8e2bead0#11\",\"3428\":\"v-8e2bead0#11/25\",\"3429\":\"v-8e2bead0#11/26\",\"3430\":\"v-8e2bead0#11/27\",\"3431\":\"v-8e2bead0#11/28\",\"3432\":\"v-8e2bead0#11/29\",\"3433\":\"v-8e2bead0#11/30\",\"3434\":\"v-8e2bead0#11/31\",\"3435\":\"v-8e2bead0#11/32\",\"3436\":\"v-8e2bead0#11/33\",\"3437\":\"v-8e2bead0#11/34\",\"3438\":\"v-8e2bead0#11/35\",\"3439\":\"v-8e2bead0#11/36\",\"3440\":\"v-8e2bead0#11/37\",\"3441\":\"v-8e2bead0#12\",\"3442\":\"v-8e2bead0#12/0\",\"3443\":\"v-8e2bead0#12/1\",\"3444\":\"v-8e2bead0#12/2\",\"3445\":\"v-8e2bead0#12/3\",\"3446\":\"v-8e2bead0#12/4\",\"3447\":\"v-8e2bead0#12/5\",\"3448\":\"v-8e2bead0#12/6\",\"3449\":\"v-8e2bead0#12/7\",\"3450\":\"v-8e2bead0#12/8\",\"3451\":\"v-8e2bead0#12/9\",\"3452\":\"v-8e2bead0#12/10\",\"3453\":\"v-8e2bead0#12/11\",\"3454\":\"v-8e2bead0#12/12\",\"3455\":\"v-8e2bead0#12/13\",\"3456\":\"v-8e2bead0#12/14\",\"3457\":\"v-8e2bead0#12/15\",\"3458\":\"v-8e2bead0#12/16\",\"3459\":\"v-8e2bead0#13\",\"3460\":\"v-8e2bead0#13/0\",\"3461\":\"v-8e2bead0#13/1\",\"3462\":\"v-8e2bead0#13/2\",\"3463\":\"v-8e2bead0#13/3\",\"3464\":\"v-8e2bead0#13/4\",\"3465\":\"v-8e2bead0#13/5\",\"3466\":\"v-8e2bead0#13/6\",\"3467\":\"v-8e2bead0#13/7\",\"3468\":\"v-8e2bead0#13/8\",\"3469\":\"v-8e2bead0#13/9\",\"3470\":\"v-8e2bead0#13/10\",\"3471\":\"v-8e2bead0#13/11\",\"3472\":\"v-8e2bead0#13/12\",\"3473\":\"v-8e2bead0#13/13\",\"3474\":\"v-8e2bead0#13/14\",\"3475\":\"v-8e2bead0#14\",\"3476\":\"v-8e2bead0#14/0\",\"3477\":\"v-8e2bead0#14/1\",\"3478\":\"v-8e2bead0#14/2\",\"3479\":\"v-8e2bead0#14/3\",\"3480\":\"v-8e2bead0#14/4\",\"3481\":\"v-8e2bead0#14/5\",\"3482\":\"v-8e2bead0#14/6\",\"3483\":\"v-8e2bead0#14/7\",\"3484\":\"v-8e2bead0#14/8\",\"3485\":\"v-8e2bead0#14/9\",\"3486\":\"v-8e2bead0#14/10\",\"3487\":\"v-8e2bead0#14/11\",\"3488\":\"v-8e2bead0#14/12\",\"3489\":\"v-8e2bead0#14/13\",\"3490\":\"v-8e2bead0#14/14\",\"3491\":\"v-8e2bead0#14/15\",\"3492\":\"v-8e2bead0#14/16\",\"3493\":\"v-8e2bead0#14/17\",\"3494\":\"v-8e2bead0#14/18\",\"3495\":\"v-8e2bead0#14/19\",\"3496\":\"v-8e2bead0#14/20\",\"3497\":\"v-8e2bead0#14/21\",\"3498\":\"v-8e2bead0#14/22\",\"3499\":\"v-8e2bead0#14/23\",\"3500\":\"v-8e2bead0#14/24\",\"3501\":\"v-8e2bead0#14/25\",\"3502\":\"v-8e2bead0#14/26\",\"3503\":\"v-8e2bead0#14/27\",\"3504\":\"v-8e2bead0#14/28\",\"3505\":\"v-8e2bead0#14/29\",\"3506\":\"v-8e2bead0#14/30\",\"3507\":\"v-8e2bead0#14/31\",\"3508\":\"v-8e2bead0#14/32\",\"3509\":\"v-8e2bead0#14/33\",\"3510\":\"v-8e2bead0#14/34\",\"3511\":\"v-8e2bead0#15\",\"3512\":\"v-8e2bead0#15/0\",\"3513\":\"v-8e2bead0#15/1\",\"3514\":\"v-8e2bead0#15/2\",\"3515\":\"v-8e2bead0#16\",\"3516\":\"v-8e2bead0#17\",\"3517\":\"v-8e2bead0#17/0\",\"3518\":\"v-8e2bead0#17/1\",\"3519\":\"v-8e2bead0#17/2\",\"3520\":\"v-8e2bead0#18\",\"3521\":\"v-8e2bead0#18/0\",\"3522\":\"v-8e2bead0#18/1\",\"3523\":\"v-8e2bead0#19\",\"3524\":\"v-8e2bead0#19/2\",\"3525\":\"v-8e2bead0#19/3\",\"3526\":\"v-8e2bead0#20\",\"3527\":\"v-8e2bead0#20/4\",\"3528\":\"v-8e2bead0#20/5\",\"3529\":\"v-8e2bead0#21\",\"3530\":\"v-8e2bead0#21/0\",\"3531\":\"v-8e2bead0#21/1\",\"3532\":\"v-8e2bead0#21/2\",\"3533\":\"v-8e2bead0#21/3\",\"3534\":\"v-8e2bead0#21/4\",\"3535\":\"v-8e2bead0#21/5\",\"3536\":\"v-8e2bead0#22\",\"3537\":\"v-8e2bead0#23\",\"3538\":\"v-8e2bead0#23/0\",\"3539\":\"v-8e2bead0#24\",\"3540\":\"v-8e2bead0#24/0\",\"3541\":\"v-8e2bead0#24/1\",\"3542\":\"v-8e2bead0#25\",\"3543\":\"v-8e2bead0#26\",\"3544\":\"v-8e2bead0#26/2\",\"3545\":\"v-8e2bead0#26/3\",\"3546\":\"v-8e2bead0#26/4\",\"3547\":\"v-8e2bead0#27\",\"3548\":\"v-8e2bead0#27/0\",\"3549\":\"v-8e2bead0#27/1\",\"3550\":\"v-8e2bead0#27/2\",\"3551\":\"v-8e2bead0#27/3\",\"3552\":\"v-8e2bead0#27/4\",\"3553\":\"v-8e2bead0#27/5\",\"3554\":\"v-8e2bead0#27/6\",\"3555\":\"v-8e2bead0#27/7\",\"3556\":\"v-8e2bead0#27/8\",\"3557\":\"v-8e2bead0#27/9\",\"3558\":\"v-8e2bead0#27/10\",\"3559\":\"v-8e2bead0#27/11\",\"3560\":\"v-8e2bead0#27/12\",\"3561\":\"v-8e2bead0#27/13\",\"3562\":\"v-8e2bead0#28\",\"3563\":\"v-8e2bead0#28/0\",\"3564\":\"v-8e2bead0#28/1\",\"3565\":\"v-8e2bead0#28/2\",\"3566\":\"v-8e2bead0#28/3\",\"3567\":\"v-8e2bead0#28/4\",\"3568\":\"v-8e2bead0#28/5\",\"3569\":\"v-8e2bead0#28/6\",\"3570\":\"v-8e2bead0#28/7\",\"3571\":\"v-8e2bead0#28/8\",\"3572\":\"v-8e2bead0#28/9\",\"3573\":\"v-8e2bead0#28/10\",\"3574\":\"v-8e2bead0#28/11\",\"3575\":\"v-8e2bead0#28/12\",\"3576\":\"v-8e2bead0#28/13\",\"3577\":\"v-8e2bead0#28/14\",\"3578\":\"v-8e2bead0#28/15\",\"3579\":\"v-8e2bead0#28/16\",\"3580\":\"v-8e2bead0#28/17\",\"3581\":\"v-8e2bead0#28/18\",\"3582\":\"v-8e2bead0#28/19\",\"3583\":\"v-8e2bead0#29\",\"3584\":\"v-8e2bead0#30\",\"3585\":\"v-8e2bead0#30/0\",\"3586\":\"v-8e2bead0#30/1\",\"3587\":\"v-8e2bead0#30/2\",\"3588\":\"v-8e2bead0#30/3\",\"3589\":\"v-8e2bead0#30/4\",\"3590\":\"v-8e2bead0#30/5\",\"3591\":\"v-8e2bead0#30/6\",\"3592\":\"v-8e2bead0#31\",\"3593\":\"v-8e2bead0#31/0\",\"3594\":\"v-8e2bead0#31/1\",\"3595\":\"v-8e2bead0#31/2\",\"3596\":\"v-8e2bead0#31/3\",\"3597\":\"v-8e2bead0#31/4\",\"3598\":\"v-8e2bead0#31/5\",\"3599\":\"v-8e2bead0#31/6\",\"3600\":\"v-8e2bead0#31/7\",\"3601\":\"v-8e2bead0#31/8\",\"3602\":\"v-8e2bead0#31/9\",\"3603\":\"v-8e2bead0#31/10\",\"3604\":\"v-8e2bead0#31/11\",\"3605\":\"v-8e2bead0#31/12\",\"3606\":\"v-8e2bead0#31/13\",\"3607\":\"v-8e2bead0#31/14\",\"3608\":\"v-8e2bead0#31/15\",\"3609\":\"v-8e2bead0#31/16\",\"3610\":\"v-8e2bead0#31/17\",\"3611\":\"v-8e2bead0#31/18\",\"3612\":\"v-8e2bead0#31/19\",\"3613\":\"v-8e2bead0#31/20\",\"3614\":\"v-8e2bead0#31/21\",\"3615\":\"v-8e2bead0#31/22\",\"3616\":\"v-8e2bead0#31/23\",\"3617\":\"v-8e2bead0#31/24\",\"3618\":\"v-8e2bead0#32\",\"3619\":\"v-8e2bead0#32/0\",\"3620\":\"v-8e2bead0#33\",\"3621\":\"v-8e2bead0#33/0\",\"3622\":\"v-8e2bead0#33/1\",\"3623\":\"v-8e2bead0#34\",\"3624\":\"v-8e2bead0#34/0\",\"3625\":\"v-8e2bead0#34/1\",\"3626\":\"v-8e2bead0#34/2\",\"3627\":\"v-8e2bead0#35\",\"3628\":\"v-8e2bead0#35/0\",\"3629\":\"v-8e2bead0#35/1\",\"3630\":\"v-8e2bead0#35/2\",\"3631\":\"v-0d3f0005\",\"3632\":\"v-0d3f0005#1\",\"3633\":\"v-0d3f0005#1/0\",\"3634\":\"v-0d3f0005#2\",\"3635\":\"v-0d3f0005#2/0\",\"3636\":\"v-0d3f0005#2/1\",\"3637\":\"v-0d3f0005#2/2\",\"3638\":\"v-0d3f0005#2/3\",\"3639\":\"v-0d3f0005#3\",\"3640\":\"v-0d3f0005#3/0\",\"3641\":\"v-0d3f0005#3/1\",\"3642\":\"v-0d3f0005#3/2\",\"3643\":\"v-0d3f0005#3/3\",\"3644\":\"v-0d3f0005#3/4\",\"3645\":\"v-0d3f0005#3/5\",\"3646\":\"v-0d3f0005#4\",\"3647\":\"v-0d3f0005#4/6\",\"3648\":\"v-0d3f0005#4/7\",\"3649\":\"v-0d3f0005#4/8\",\"3650\":\"v-0d3f0005#4/9\",\"3651\":\"v-0d3f0005#5\",\"3652\":\"v-0d3f0005#5/0\",\"3653\":\"v-0d3f0005#5/1\",\"3654\":\"v-0d3f0005#5/2\",\"3655\":\"v-0d3f0005#5/3\",\"3656\":\"v-0d3f0005#5/4\",\"3657\":\"v-0d3f0005#5/5\",\"3658\":\"v-0d3f0005#6\",\"3659\":\"v-0d3f0005#6/0\",\"3660\":\"v-0d3f0005#6/1\",\"3661\":\"v-e2c4b49a\",\"3662\":\"v-e2c4b49a#0/0\",\"3663\":\"v-e2c4b49a#0/1\",\"3664\":\"v-e2c4b49a#0/2\",\"3665\":\"v-e2c4b49a#0/3\",\"3666\":\"v-e2c4b49a#1\",\"3667\":\"v-e2c4b49a#1/0\",\"3668\":\"v-e2c4b49a#1/1\",\"3669\":\"v-e2c4b49a#1/2\",\"3670\":\"v-e2c4b49a#1/3\",\"3671\":\"v-e2c4b49a#1/4\",\"3672\":\"v-e2c4b49a#1/5\",\"3673\":\"v-e2c4b49a#1/6\",\"3674\":\"v-e2c4b49a#1/7\",\"3675\":\"v-e2c4b49a#1/8\",\"3676\":\"v-e2c4b49a#2\",\"3677\":\"v-e2c4b49a#2/0\",\"3678\":\"v-e2c4b49a#2/1\",\"3679\":\"v-e2c4b49a#2/2\",\"3680\":\"v-e2c4b49a#2/3\",\"3681\":\"v-e2c4b49a#3\",\"3682\":\"v-e2c4b49a#3/0\",\"3683\":\"v-e2c4b49a#3/1\",\"3684\":\"v-e2c4b49a#4\",\"3685\":\"v-e2c4b49a#4/0\",\"3686\":\"v-e2c4b49a#4/1\",\"3687\":\"v-e2c4b49a#4/2\",\"3688\":\"v-e2c4b49a#4/3\",\"3689\":\"v-e2c4b49a#4/4\",\"3690\":\"v-e2c4b49a#4/5\",\"3691\":\"v-e2c4b49a#5\",\"3692\":\"v-e2c4b49a#5/0\",\"3693\":\"v-e2c4b49a#5/1\",\"3694\":\"v-e2c4b49a#6\",\"3695\":\"v-e2c4b49a#6/0\",\"3696\":\"v-e2c4b49a#6/1\",\"3697\":\"v-e2c4b49a#6/2\",\"3698\":\"v-e2c4b49a#7\",\"3699\":\"v-e2c4b49a#7/0\",\"3700\":\"v-e2c4b49a#7/1\",\"3701\":\"v-e2c4b49a#7/2\",\"3702\":\"v-e2c4b49a#7/3\",\"3703\":\"v-240aac38\",\"3704\":\"v-240aac38#1\",\"3705\":\"v-240aac38#2\",\"3706\":\"v-240aac38#2/0\",\"3707\":\"v-240aac38#2/1\",\"3708\":\"v-240aac38#2/2\",\"3709\":\"v-240aac38#2/3\",\"3710\":\"v-240aac38#3\",\"3711\":\"v-240aac38#3/0\",\"3712\":\"v-240aac38#3/1\",\"3713\":\"v-240aac38#3/2\",\"3714\":\"v-240aac38#4\",\"3715\":\"v-240aac38#4/0\",\"3716\":\"v-240aac38#4/1\",\"3717\":\"v-240aac38#4/2\",\"3718\":\"v-240aac38#4/3\",\"3719\":\"v-240aac38#4/4\",\"3720\":\"v-240aac38#4/5\",\"3721\":\"v-240aac38#4/6\",\"3722\":\"v-240aac38#4/7\",\"3723\":\"v-240aac38#4/8\",\"3724\":\"v-240aac38#4/9\",\"3725\":\"v-240aac38#5\",\"3726\":\"v-240aac38#5/10\",\"3727\":\"v-240aac38#5/11\",\"3728\":\"v-240aac38#6\",\"3729\":\"v-240aac38#6/0\",\"3730\":\"v-240aac38#6/1\",\"3731\":\"v-240aac38#6/2\",\"3732\":\"v-240aac38#6/3\",\"3733\":\"v-240aac38#7\",\"3734\":\"v-240aac38#7/0\",\"3735\":\"v-240aac38#7/1\",\"3736\":\"v-240aac38#7/2\",\"3737\":\"v-240aac38#7/3\",\"3738\":\"v-240aac38#7/4\",\"3739\":\"v-240aac38#7/5\",\"3740\":\"v-240aac38#7/6\",\"3741\":\"v-240aac38#7/7\",\"3742\":\"v-240aac38#7/8\",\"3743\":\"v-240aac38#7/9\",\"3744\":\"v-240aac38#8\",\"3745\":\"v-240aac38#8/0\",\"3746\":\"v-240aac38#8/1\",\"3747\":\"v-240aac38#8/2\",\"3748\":\"v-240aac38#8/3\",\"3749\":\"v-240aac38#9\",\"3750\":\"v-240aac38#9/0\",\"3751\":\"v-240aac38#9/1\",\"3752\":\"v-240aac38#9/2\",\"3753\":\"v-240aac38#9/3\",\"3754\":\"v-240aac38#10\",\"3755\":\"v-240aac38#11\",\"3756\":\"v-240aac38#11/0\",\"3757\":\"v-240aac38#11/1\",\"3758\":\"v-240aac38#11/2\",\"3759\":\"v-240aac38#11/3\",\"3760\":\"v-240aac38#12\",\"3761\":\"v-240aac38#12/0\",\"3762\":\"v-240aac38#12/1\",\"3763\":\"v-240aac38#12/2\",\"3764\":\"v-240aac38#12/3\",\"3765\":\"v-240aac38#12/4\",\"3766\":\"v-240aac38#12/5\",\"3767\":\"v-240aac38#12/6\",\"3768\":\"v-240aac38#12/7\",\"3769\":\"v-240aac38#12/8\",\"3770\":\"v-240aac38#13\",\"3771\":\"v-240aac38#13/0\",\"3772\":\"v-240aac38#13/1\",\"3773\":\"v-240aac38#13/2\",\"3774\":\"v-240aac38#13/3\",\"3775\":\"v-240aac38#13/4\",\"3776\":\"v-6fdd47f3\",\"3777\":\"v-6fdd47f3#1\",\"3778\":\"v-6fdd47f3#1/0\",\"3779\":\"v-6fdd47f3#1/1\",\"3780\":\"v-6fdd47f3#1/2\",\"3781\":\"v-6fdd47f3#1/3\",\"3782\":\"v-6fdd47f3#1/4\",\"3783\":\"v-6fdd47f3#1/5\",\"3784\":\"v-6fdd47f3#1/6\",\"3785\":\"v-6fdd47f3#1/7\",\"3786\":\"v-6fdd47f3#1/8\",\"3787\":\"v-6fdd47f3#1/9\",\"3788\":\"v-6fdd47f3#1/10\",\"3789\":\"v-6fdd47f3#1/11\",\"3790\":\"v-6fdd47f3#1/12\",\"3791\":\"v-6fdd47f3#2\",\"3792\":\"v-6fdd47f3#3\",\"3793\":\"v-6fdd47f3#3/0\",\"3794\":\"v-6fdd47f3#4\",\"3795\":\"v-6fdd47f3#4/0\",\"3796\":\"v-6fdd47f3#4/1\",\"3797\":\"v-6fdd47f3#4/2\",\"3798\":\"v-6fdd47f3#4/3\",\"3799\":\"v-6fdd47f3#4/4\",\"3800\":\"v-6fdd47f3#5\",\"3801\":\"v-6fdd47f3#5/0\",\"3802\":\"v-6fdd47f3#5/1\",\"3803\":\"v-6fdd47f3#5/2\",\"3804\":\"v-6fdd47f3#5/3\",\"3805\":\"v-6fdd47f3#5/4\",\"3806\":\"v-6fdd47f3#6\",\"3807\":\"v-6fdd47f3#6/0\",\"3808\":\"v-6fdd47f3#6/1\",\"3809\":\"v-6fdd47f3#7\",\"3810\":\"v-6fdd47f3#7/0\",\"3811\":\"v-6fdd47f3#7/1\",\"3812\":\"v-6fdd47f3#8\",\"3813\":\"v-6fdd47f3#9\",\"3814\":\"v-6fdd47f3#9/0\",\"3815\":\"v-6fdd47f3#10\",\"3816\":\"v-6fdd47f3#10/0\",\"3817\":\"v-6fdd47f3#11\",\"3818\":\"v-6fdd47f3#11/0\",\"3819\":\"v-6fdd47f3#11/1\",\"3820\":\"v-6fdd47f3#11/2\",\"3821\":\"v-6fdd47f3#12\",\"3822\":\"v-6fdd47f3#12/0\",\"3823\":\"v-6fdd47f3#12/1\",\"3824\":\"v-6fdd47f3#12/2\",\"3825\":\"v-6fdd47f3#12/3\",\"3826\":\"v-6fdd47f3#12/4\",\"3827\":\"v-6fdd47f3#12/5\",\"3828\":\"v-6fdd47f3#13\",\"3829\":\"v-6fdd47f3#13/0\",\"3830\":\"v-6fdd47f3#13/1\",\"3831\":\"v-6fdd47f3#13/2\",\"3832\":\"v-6fdd47f3#14\",\"3833\":\"v-6fdd47f3#14/0\",\"3834\":\"v-6fdd47f3#14/1\",\"3835\":\"v-6fdd47f3#15\",\"3836\":\"v-6fdd47f3#15/0\",\"3837\":\"v-6fdd47f3#15/1\",\"3838\":\"v-6fdd47f3#16\",\"3839\":\"v-6fdd47f3#16/0\",\"3840\":\"v-6fdd47f3#16/1\",\"3841\":\"v-6fdd47f3#16/2\",\"3842\":\"v-6fdd47f3#16/3\",\"3843\":\"v-6fdd47f3#16/4\",\"3844\":\"v-6fdd47f3#16/5\",\"3845\":\"v-6fdd47f3#16/6\",\"3846\":\"v-6fdd47f3#16/7\",\"3847\":\"v-7abcd9a0\",\"3848\":\"v-7abcd9a0#1\",\"3849\":\"v-7abcd9a0#1/0\",\"3850\":\"v-7abcd9a0#1/1\",\"3851\":\"v-7abcd9a0#1/2\",\"3852\":\"v-7abcd9a0#1/3\",\"3853\":\"v-7abcd9a0#2\",\"3854\":\"v-7abcd9a0#3\",\"3855\":\"v-7abcd9a0#3/0\",\"3856\":\"v-7abcd9a0#3/1\",\"3857\":\"v-7abcd9a0#3/2\",\"3858\":\"v-7abcd9a0#3/3\",\"3859\":\"v-7abcd9a0#3/4\",\"3860\":\"v-7abcd9a0#3/5\",\"3861\":\"v-7abcd9a0#3/6\",\"3862\":\"v-7abcd9a0#3/7\",\"3863\":\"v-7abcd9a0#3/8\",\"3864\":\"v-7abcd9a0#3/9\",\"3865\":\"v-7abcd9a0#3/10\",\"3866\":\"v-7abcd9a0#3/11\",\"3867\":\"v-7abcd9a0#3/12\",\"3868\":\"v-7abcd9a0#3/13\",\"3869\":\"v-7abcd9a0#3/14\",\"3870\":\"v-7abcd9a0#3/15\",\"3871\":\"v-7abcd9a0#3/16\",\"3872\":\"v-7abcd9a0#3/17\",\"3873\":\"v-7abcd9a0#3/18\",\"3874\":\"v-7abcd9a0#3/19\",\"3875\":\"v-7abcd9a0#3/20\",\"3876\":\"v-7abcd9a0#3/21\",\"3877\":\"v-7abcd9a0#3/22\",\"3878\":\"v-7abcd9a0#3/23\",\"3879\":\"v-7abcd9a0#3/24\",\"3880\":\"v-7abcd9a0#3/25\",\"3881\":\"v-7abcd9a0#3/26\",\"3882\":\"v-7abcd9a0#3/27\",\"3883\":\"v-7abcd9a0#3/28\",\"3884\":\"v-7abcd9a0#3/29\",\"3885\":\"v-7abcd9a0#3/30\",\"3886\":\"v-7abcd9a0#3/31\",\"3887\":\"v-7abcd9a0#3/32\",\"3888\":\"v-7abcd9a0#3/33\",\"3889\":\"v-7abcd9a0#3/34\",\"3890\":\"v-7abcd9a0#3/35\",\"3891\":\"v-7abcd9a0#3/36\",\"3892\":\"v-7abcd9a0#3/37\",\"3893\":\"v-7abcd9a0#3/38\",\"3894\":\"v-7abcd9a0#3/39\",\"3895\":\"v-7abcd9a0#3/40\",\"3896\":\"v-7abcd9a0#3/41\",\"3897\":\"v-7abcd9a0#3/42\",\"3898\":\"v-7abcd9a0#3/43\",\"3899\":\"v-7abcd9a0#4\",\"3900\":\"v-7abcd9a0#4/0\",\"3901\":\"v-7abcd9a0#4/1\",\"3902\":\"v-7abcd9a0#4/2\",\"3903\":\"v-7abcd9a0#4/3\",\"3904\":\"v-7abcd9a0#4/4\",\"3905\":\"v-7abcd9a0#5\",\"3906\":\"v-7abcd9a0#5/0\",\"3907\":\"v-7abcd9a0#5/1\",\"3908\":\"v-7abcd9a0#5/2\",\"3909\":\"v-7abcd9a0#5/3\",\"3910\":\"v-7abcd9a0#5/4\",\"3911\":\"v-7abcd9a0#5/5\",\"3912\":\"v-7abcd9a0#5/6\",\"3913\":\"v-7abcd9a0#5/7\",\"3914\":\"v-7abcd9a0#6\",\"3915\":\"v-7abcd9a0#6/0\",\"3916\":\"v-7abcd9a0#6/1\",\"3917\":\"v-7abcd9a0#6/2\",\"3918\":\"v-7abcd9a0#6/3\",\"3919\":\"v-7abcd9a0#6/4\",\"3920\":\"v-7abcd9a0#6/5\",\"3921\":\"v-7abcd9a0#6/6\",\"3922\":\"v-7abcd9a0#6/7\",\"3923\":\"v-7abcd9a0#7\",\"3924\":\"v-7abcd9a0#7/8\",\"3925\":\"v-7abcd9a0#7/9\",\"3926\":\"v-7abcd9a0#7/10\",\"3927\":\"v-7abcd9a0#7/11\",\"3928\":\"v-7abcd9a0#7/12\",\"3929\":\"v-7abcd9a0#7/13\",\"3930\":\"v-7abcd9a0#7/14\",\"3931\":\"v-171625bb\",\"3932\":\"v-171625bb#1\",\"3933\":\"v-171625bb#1/0\",\"3934\":\"v-171625bb#2\",\"3935\":\"v-171625bb#3\",\"3936\":\"v-171625bb#4\",\"3937\":\"v-171625bb#4/0\",\"3938\":\"v-171625bb#4/1\",\"3939\":\"v-171625bb#4/2\",\"3940\":\"v-171625bb#4/3\",\"3941\":\"v-171625bb#4/4\",\"3942\":\"v-171625bb#4/5\",\"3943\":\"v-171625bb#5\",\"3944\":\"v-171625bb#5/0\",\"3945\":\"v-171625bb#5/1\",\"3946\":\"v-171625bb#5/2\",\"3947\":\"v-171625bb#5/3\",\"3948\":\"v-171625bb#6\",\"3949\":\"v-171625bb#6/0\",\"3950\":\"v-171625bb#6/1\",\"3951\":\"v-171625bb#6/2\",\"3952\":\"v-171625bb#6/3\",\"3953\":\"v-171625bb#6/4\",\"3954\":\"v-171625bb#6/5\",\"3955\":\"v-171625bb#6/6\",\"3956\":\"v-171625bb#6/7\",\"3957\":\"v-171625bb#6/8\",\"3958\":\"v-171625bb#6/9\",\"3959\":\"v-171625bb#6/10\",\"3960\":\"v-171625bb#6/11\",\"3961\":\"v-171625bb#6/12\",\"3962\":\"v-171625bb#6/13\",\"3963\":\"v-171625bb#6/14\",\"3964\":\"v-171625bb#6/15\",\"3965\":\"v-171625bb#6/16\",\"3966\":\"v-171625bb#6/17\",\"3967\":\"v-171625bb#6/18\",\"3968\":\"v-171625bb#6/19\",\"3969\":\"v-171625bb#6/20\",\"3970\":\"v-171625bb#6/21\",\"3971\":\"v-171625bb#6/22\",\"3972\":\"v-171625bb#6/23\",\"3973\":\"v-171625bb#6/24\",\"3974\":\"v-171625bb#6/25\",\"3975\":\"v-171625bb#6/26\",\"3976\":\"v-171625bb#6/27\",\"3977\":\"v-171625bb#6/28\",\"3978\":\"v-171625bb#6/29\",\"3979\":\"v-171625bb#6/30\",\"3980\":\"v-171625bb#6/31\",\"3981\":\"v-171625bb#7\",\"3982\":\"v-171625bb#7/0\",\"3983\":\"v-171625bb#7/1\",\"3984\":\"v-171625bb#7/2\",\"3985\":\"v-171625bb#7/3\",\"3986\":\"v-171625bb#7/4\",\"3987\":\"v-171625bb#7/5\",\"3988\":\"v-171625bb#7/6\",\"3989\":\"v-171625bb#7/7\",\"3990\":\"v-171625bb#8\",\"3991\":\"v-171625bb#8/0\",\"3992\":\"v-171625bb#8/1\",\"3993\":\"v-171625bb#8/2\",\"3994\":\"v-171625bb#9\",\"3995\":\"v-171625bb#9/0\",\"3996\":\"v-171625bb#9/1\",\"3997\":\"v-171625bb#9/2\",\"3998\":\"v-171625bb#10\",\"3999\":\"v-171625bb#10/0\",\"4000\":\"v-171625bb#11\",\"4001\":\"v-171625bb#11/0\",\"4002\":\"v-171625bb#12\",\"4003\":\"v-171625bb#12/0\",\"4004\":\"v-171625bb#13\",\"4005\":\"v-171625bb#13/0\",\"4006\":\"v-171625bb#14\",\"4007\":\"v-171625bb#14/0\",\"4008\":\"v-171625bb#15\",\"4009\":\"v-171625bb#15/0\",\"4010\":\"v-171625bb#15/1\",\"4011\":\"v-171625bb#15/2\",\"4012\":\"v-171625bb#15/3\",\"4013\":\"v-171625bb#16\",\"4014\":\"v-171625bb#17\",\"4015\":\"v-171625bb#17/0\",\"4016\":\"v-171625bb#17/1\",\"4017\":\"v-171625bb#17/2\",\"4018\":\"v-171625bb#17/3\",\"4019\":\"v-171625bb#18\",\"4020\":\"v-171625bb#18/0\",\"4021\":\"v-171625bb#18/1\",\"4022\":\"v-171625bb#18/2\",\"4023\":\"v-171625bb#18/3\",\"4024\":\"v-171625bb#18/4\",\"4025\":\"v-171625bb#18/5\",\"4026\":\"v-171625bb#18/6\",\"4027\":\"v-171625bb#18/7\",\"4028\":\"v-171625bb#18/8\",\"4029\":\"v-171625bb#18/9\",\"4030\":\"v-171625bb#18/10\",\"4031\":\"v-171625bb#18/11\",\"4032\":\"v-171625bb#18/12\",\"4033\":\"v-171625bb#18/13\",\"4034\":\"v-171625bb#18/14\",\"4035\":\"v-171625bb#18/15\",\"4036\":\"v-171625bb#19\",\"4037\":\"v-171625bb#19/0\",\"4038\":\"v-171625bb#19/1\",\"4039\":\"v-171625bb#19/2\",\"4040\":\"v-171625bb#19/3\",\"4041\":\"v-171625bb#19/4\",\"4042\":\"v-171625bb#20\",\"4043\":\"v-171625bb#20/0\",\"4044\":\"v-171625bb#20/1\",\"4045\":\"v-171625bb#20/2\",\"4046\":\"v-171625bb#20/3\",\"4047\":\"v-171625bb#20/4\",\"4048\":\"v-171625bb#20/5\",\"4049\":\"v-171625bb#20/6\",\"4050\":\"v-171625bb#20/7\",\"4051\":\"v-171625bb#20/8\",\"4052\":\"v-171625bb#20/9\",\"4053\":\"v-171625bb#20/10\",\"4054\":\"v-171625bb#20/11\",\"4055\":\"v-171625bb#20/12\",\"4056\":\"v-171625bb#20/13\",\"4057\":\"v-171625bb#20/14\",\"4058\":\"v-171625bb#20/15\",\"4059\":\"v-171625bb#20/16\",\"4060\":\"v-171625bb#20/17\",\"4061\":\"v-171625bb#20/18\",\"4062\":\"v-171625bb#20/19\",\"4063\":\"v-171625bb#20/20\",\"4064\":\"v-171625bb#20/21\",\"4065\":\"v-171625bb#20/22\",\"4066\":\"v-171625bb#21\",\"4067\":\"v-171625bb#21/0\",\"4068\":\"v-171625bb#21/1\",\"4069\":\"v-171625bb#22\",\"4070\":\"v-171625bb#22/0\",\"4071\":\"v-171625bb#22/1\",\"4072\":\"v-171625bb#22/2\",\"4073\":\"v-171625bb#22/3\",\"4074\":\"v-171625bb#22/4\",\"4075\":\"v-171625bb#22/5\",\"4076\":\"v-171625bb#22/6\",\"4077\":\"v-171625bb#23\",\"4078\":\"v-171625bb#23/0\",\"4079\":\"v-171625bb#23/1\",\"4080\":\"v-171625bb#23/2\",\"4081\":\"v-171625bb#23/3\",\"4082\":\"v-171625bb#23/4\",\"4083\":\"v-171625bb#23/5\",\"4084\":\"v-171625bb#23/6\",\"4085\":\"v-171625bb#24\",\"4086\":\"v-171625bb#24/7\",\"4087\":\"v-171625bb#24/8\",\"4088\":\"v-171625bb#24/9\",\"4089\":\"v-171625bb#25\",\"4090\":\"v-171625bb#25/0\",\"4091\":\"v-171625bb#25/1\",\"4092\":\"v-171625bb#26\",\"4093\":\"v-171625bb#27\",\"4094\":\"v-171625bb#28\",\"4095\":\"v-171625bb#29\",\"4096\":\"v-171625bb#30\",\"4097\":\"v-171625bb#31\",\"4098\":\"v-171625bb#32\",\"4099\":\"v-171625bb#32/0\",\"4100\":\"v-171625bb#32/1\",\"4101\":\"v-171625bb#32/2\",\"4102\":\"v-171625bb#32/3\",\"4103\":\"v-171625bb#32/4\",\"4104\":\"v-171625bb#32/5\",\"4105\":\"v-171625bb#32/6\",\"4106\":\"v-171625bb#32/7\",\"4107\":\"v-171625bb#33\",\"4108\":\"v-171625bb#33/0\",\"4109\":\"v-171625bb#33/1\",\"4110\":\"v-171625bb#34\",\"4111\":\"v-12750349\",\"4112\":\"v-12750349#1\",\"4113\":\"v-12750349#1/0\",\"4114\":\"v-12750349#2\",\"4115\":\"v-12750349#2/0\",\"4116\":\"v-12750349#2/1\",\"4117\":\"v-12750349#2/2\",\"4118\":\"v-12750349#2/3\",\"4119\":\"v-12750349#3\",\"4120\":\"v-12750349#3/0\",\"4121\":\"v-12750349#3/1\",\"4122\":\"v-12750349#4\",\"4123\":\"v-12750349#4/0\",\"4124\":\"v-12750349#5\",\"4125\":\"v-12750349#5/1\",\"4126\":\"v-12750349#5/2\",\"4127\":\"v-12750349#6\",\"4128\":\"v-12750349#6/0\",\"4129\":\"v-12750349#7\",\"4130\":\"v-12750349#7/0\",\"4131\":\"v-12750349#7/1\",\"4132\":\"v-12750349#7/2\",\"4133\":\"v-12750349#7/3\",\"4134\":\"v-12750349#7/4\",\"4135\":\"v-12750349#7/5\",\"4136\":\"v-12750349#7/6\",\"4137\":\"v-12750349#7/7\",\"4138\":\"v-12750349#8\",\"4139\":\"v-12750349#8/0\",\"4140\":\"v-12750349#9\",\"4141\":\"v-12750349#9/0\",\"4142\":\"v-12750349#10\",\"4143\":\"v-12750349#10/0\",\"4144\":\"v-12750349#10/1\",\"4145\":\"v-12750349#10/2\",\"4146\":\"v-12750349#10/3\",\"4147\":\"v-12750349#10/4\",\"4148\":\"v-12750349#10/5\",\"4149\":\"v-12750349#10/6\",\"4150\":\"v-12750349#10/7\",\"4151\":\"v-12750349#10/8\",\"4152\":\"v-12750349#10/9\",\"4153\":\"v-12750349#10/10\",\"4154\":\"v-12750349#11\",\"4155\":\"v-12750349#11/0\",\"4156\":\"v-12750349#12\",\"4157\":\"v-12750349#12/0\",\"4158\":\"v-12750349#13\",\"4159\":\"v-12750349#13/0\",\"4160\":\"v-12750349#14\",\"4161\":\"v-12750349#14/0\",\"4162\":\"v-12750349#15\",\"4163\":\"v-12750349#15/0\",\"4164\":\"v-12750349#16\",\"4165\":\"v-12750349#16/0\",\"4166\":\"v-12750349#17\",\"4167\":\"v-12750349#17/0\",\"4168\":\"v-12750349#17/1\",\"4169\":\"v-12750349#17/2\",\"4170\":\"v-12750349#17/3\",\"4171\":\"v-12750349#17/4\",\"4172\":\"v-12750349#17/5\",\"4173\":\"v-12750349#17/6\",\"4174\":\"v-12750349#17/7\",\"4175\":\"v-12750349#18\",\"4176\":\"v-12750349#18/0\",\"4177\":\"v-12750349#19\",\"4178\":\"v-12750349#19/0\",\"4179\":\"v-12750349#20\",\"4180\":\"v-12750349#20/0\",\"4181\":\"v-12750349#20/1\",\"4182\":\"v-12750349#20/2\",\"4183\":\"v-12750349#21\",\"4184\":\"v-12750349#21/0\",\"4185\":\"v-12750349#22\",\"4186\":\"v-12750349#22/0\",\"4187\":\"v-12750349#22/1\",\"4188\":\"v-12750349#22/2\",\"4189\":\"v-12750349#23\",\"4190\":\"v-12750349#23/0\",\"4191\":\"v-12750349#23/1\",\"4192\":\"v-12750349#24\",\"4193\":\"v-12750349#24/0\",\"4194\":\"v-12750349#25\",\"4195\":\"v-12750349#25/0\",\"4196\":\"v-12750349#25/1\",\"4197\":\"v-12750349#25/2\",\"4198\":\"v-12750349#25/3\",\"4199\":\"v-12750349#26\",\"4200\":\"v-12750349#26/0\",\"4201\":\"v-12750349#27\",\"4202\":\"v-12750349#27/0\",\"4203\":\"v-12750349#27/1\",\"4204\":\"v-12750349#27/2\",\"4205\":\"v-12750349#27/3\",\"4206\":\"v-12750349#27/4\",\"4207\":\"v-63c908f6\",\"4208\":\"v-63c908f6#1\",\"4209\":\"v-63c908f6#1/0\",\"4210\":\"v-63c908f6#2\",\"4211\":\"v-63c908f6#3\",\"4212\":\"v-63c908f6#4\",\"4213\":\"v-63c908f6#5\",\"4214\":\"v-63c908f6#6\",\"4215\":\"v-63c908f6#7\",\"4216\":\"v-63c908f6#8\",\"4217\":\"v-63c908f6#8/0\",\"4218\":\"v-63c908f6#9\",\"4219\":\"v-63c908f6#9/0\",\"4220\":\"v-63c908f6#9/1\",\"4221\":\"v-63c908f6#10\",\"4222\":\"v-63c908f6#10/0\",\"4223\":\"v-63c908f6#10/1\",\"4224\":\"v-63c908f6#10/2\",\"4225\":\"v-63c908f6#10/3\",\"4226\":\"v-63c908f6#11\",\"4227\":\"v-63c908f6#11/0\",\"4228\":\"v-63c908f6#12\",\"4229\":\"v-63c908f6#12/0\",\"4230\":\"v-63c908f6#13\",\"4231\":\"v-63c908f6#13/0\",\"4232\":\"v-63c908f6#13/1\",\"4233\":\"v-63c908f6#13/2\",\"4234\":\"v-63c908f6#13/3\",\"4235\":\"v-63c908f6#13/4\",\"4236\":\"v-63c908f6#13/5\",\"4237\":\"v-63c908f6#13/6\",\"4238\":\"v-63c908f6#13/7\",\"4239\":\"v-63c908f6#13/8\",\"4240\":\"v-63c908f6#14\",\"4241\":\"v-63c908f6#14/0\",\"4242\":\"v-63c908f6#14/1\",\"4243\":\"v-63c908f6#14/2\",\"4244\":\"v-63c908f6#15\",\"4245\":\"v-63c908f6#15/0\",\"4246\":\"v-63c908f6#15/1\",\"4247\":\"v-63c908f6#15/2\",\"4248\":\"v-63c908f6#15/3\",\"4249\":\"v-63c908f6#15/4\",\"4250\":\"v-63c908f6#15/5\",\"4251\":\"v-63c908f6#16\",\"4252\":\"v-63c908f6#16/0\",\"4253\":\"v-63c908f6#17\",\"4254\":\"v-63c908f6#17/0\",\"4255\":\"v-63c908f6#17/1\",\"4256\":\"v-63c908f6#18\",\"4257\":\"v-63c908f6#18/0\",\"4258\":\"v-63c908f6#18/1\",\"4259\":\"v-63c908f6#18/2\",\"4260\":\"v-63c908f6#18/3\",\"4261\":\"v-63c908f6#18/4\",\"4262\":\"v-63c908f6#18/5\",\"4263\":\"v-63c908f6#18/6\",\"4264\":\"v-63c908f6#18/7\",\"4265\":\"v-63c908f6#18/8\",\"4266\":\"v-63c908f6#19\",\"4267\":\"v-63c908f6#19/0\",\"4268\":\"v-63c908f6#20\",\"4269\":\"v-63c908f6#20/0\",\"4270\":\"v-63c908f6#21\",\"4271\":\"v-63c908f6#21/0\",\"4272\":\"v-63c908f6#21/1\",\"4273\":\"v-63c908f6#21/2\",\"4274\":\"v-63c908f6#21/3\",\"4275\":\"v-63c908f6#21/4\",\"4276\":\"v-63bba594\",\"4277\":\"v-63bba594#1\",\"4278\":\"v-63bba594#2\",\"4279\":\"v-63bba594#3\",\"4280\":\"v-63bba594#3/0\",\"4281\":\"v-63bba594#3/1\",\"4282\":\"v-63bba594#3/2\",\"4283\":\"v-63bba594#3/3\",\"4284\":\"v-63bba594#3/4\",\"4285\":\"v-63bba594#3/5\",\"4286\":\"v-63bba594#4\",\"4287\":\"v-63bba594#4/0\",\"4288\":\"v-63bba594#4/1\",\"4289\":\"v-63bba594#4/2\",\"4290\":\"v-63bba594#4/3\",\"4291\":\"v-63bba594#4/4\",\"4292\":\"v-63bba594#4/5\",\"4293\":\"v-63bba594#4/6\",\"4294\":\"v-63bba594#4/7\",\"4295\":\"v-63bba594#4/8\",\"4296\":\"v-63bba594#4/9\",\"4297\":\"v-63bba594#4/10\",\"4298\":\"v-63bba594#4/11\",\"4299\":\"v-63bba594#4/12\",\"4300\":\"v-63bba594#4/13\",\"4301\":\"v-63bba594#4/14\",\"4302\":\"v-63bba594#4/15\",\"4303\":\"v-63bba594#4/16\",\"4304\":\"v-63bba594#4/17\",\"4305\":\"v-63bba594#4/18\",\"4306\":\"v-63bba594#4/19\",\"4307\":\"v-63bba594#4/20\",\"4308\":\"v-63bba594#5\",\"4309\":\"v-63bba594#6\",\"4310\":\"v-63bba594#6/0\",\"4311\":\"v-63bba594#6/1\",\"4312\":\"v-63bba594#6/2\",\"4313\":\"v-63bba594#6/3\",\"4314\":\"v-63bba594#6/4\",\"4315\":\"v-63bba594#6/5\",\"4316\":\"v-63bba594#6/6\",\"4317\":\"v-63bba594#6/7\",\"4318\":\"v-63bba594#6/8\",\"4319\":\"v-63bba594#6/9\",\"4320\":\"v-63bba594#6/10\",\"4321\":\"v-63bba594#6/11\",\"4322\":\"v-63bba594#6/12\",\"4323\":\"v-63bba594#7\",\"4324\":\"v-63bba594#8\",\"4325\":\"v-63bba594#8/0\",\"4326\":\"v-63bba594#8/1\",\"4327\":\"v-63bba594#8/2\",\"4328\":\"v-63bba594#8/3\",\"4329\":\"v-63bba594#8/4\",\"4330\":\"v-63bba594#8/5\",\"4331\":\"v-63bba594#8/6\",\"4332\":\"v-63bba594#8/7\",\"4333\":\"v-63bba594#8/8\",\"4334\":\"v-63bba594#8/9\",\"4335\":\"v-63bba594#8/10\",\"4336\":\"v-63bba594#8/11\",\"4337\":\"v-63bba594#8/12\",\"4338\":\"v-63bba594#8/13\",\"4339\":\"v-63bba594#8/14\",\"4340\":\"v-63bba594#8/15\",\"4341\":\"v-63bba594#8/16\",\"4342\":\"v-63bba594#8/17\",\"4343\":\"v-63bba594#8/18\",\"4344\":\"v-63bba594#8/19\",\"4345\":\"v-63bba594#8/20\",\"4346\":\"v-63bba594#9\",\"4347\":\"v-63bba594#10\",\"4348\":\"v-63bba594#10/0\",\"4349\":\"v-63bba594#10/1\",\"4350\":\"v-63bba594#10/2\",\"4351\":\"v-63bba594#10/3\",\"4352\":\"v-63bba594#10/4\",\"4353\":\"v-63bba594#10/5\",\"4354\":\"v-63bba594#10/6\",\"4355\":\"v-63bba594#10/7\",\"4356\":\"v-63bba594#10/8\",\"4357\":\"v-63bba594#11\",\"4358\":\"v-63bba594#12\",\"4359\":\"v-63bba594#12/0\",\"4360\":\"v-63bba594#12/1\",\"4361\":\"v-63bba594#12/2\",\"4362\":\"v-63bba594#12/3\",\"4363\":\"v-63bba594#12/4\",\"4364\":\"v-63bba594#12/5\",\"4365\":\"v-63bba594#12/6\",\"4366\":\"v-63bba594#12/7\",\"4367\":\"v-63bba594#12/8\",\"4368\":\"v-63bba594#12/9\",\"4369\":\"v-63bba594#13\",\"4370\":\"v-63bba594#13/0\",\"4371\":\"v-63bba594#13/1\",\"4372\":\"v-63bba594#13/2\",\"4373\":\"v-63bba594#13/3\",\"4374\":\"v-63bba594#13/4\",\"4375\":\"v-63bba594#13/5\",\"4376\":\"v-63bba594#13/6\",\"4377\":\"v-63bba594#13/7\",\"4378\":\"v-63bba594#13/8\",\"4379\":\"v-63bba594#13/9\",\"4380\":\"v-63bba594#14\",\"4381\":\"v-63bba594#14/0\",\"4382\":\"v-63bba594#14/1\",\"4383\":\"v-63bba594#14/2\",\"4384\":\"v-63bba594#14/3\",\"4385\":\"v-63bba594#14/4\",\"4386\":\"v-63bba594#14/5\",\"4387\":\"v-63bba594#14/6\",\"4388\":\"v-63bba594#14/7\",\"4389\":\"v-63bba594#14/8\",\"4390\":\"v-63bba594#14/9\",\"4391\":\"v-63bba594#14/10\",\"4392\":\"v-63bba594#14/11\",\"4393\":\"v-63bba594#14/12\",\"4394\":\"v-63bba594#14/13\",\"4395\":\"v-63bba594#15\",\"4396\":\"v-63bba594#16\",\"4397\":\"v-63bba594#16/0\",\"4398\":\"v-63bba594#16/1\",\"4399\":\"v-63bba594#16/2\",\"4400\":\"v-63bba594#16/3\",\"4401\":\"v-63bba594#16/4\",\"4402\":\"v-63bba594#16/5\",\"4403\":\"v-63bba594#16/6\",\"4404\":\"v-63bba594#16/7\",\"4405\":\"v-63bba594#16/8\",\"4406\":\"v-63bba594#16/9\",\"4407\":\"v-63bba594#16/10\",\"4408\":\"v-63bba594#16/11\",\"4409\":\"v-63bba594#16/12\",\"4410\":\"v-63bba594#16/13\",\"4411\":\"v-63bba594#16/14\",\"4412\":\"v-63bba594#16/15\",\"4413\":\"v-63bba594#16/16\",\"4414\":\"v-63bba594#16/17\",\"4415\":\"v-63bba594#16/18\",\"4416\":\"v-63bba594#16/19\",\"4417\":\"v-63bba594#16/20\",\"4418\":\"v-63bba594#16/21\",\"4419\":\"v-63bba594#16/22\",\"4420\":\"v-63bba594#16/23\",\"4421\":\"v-63bba594#16/24\",\"4422\":\"v-63bba594#16/25\",\"4423\":\"v-63bba594#16/26\",\"4424\":\"v-63bba594#16/27\",\"4425\":\"v-63bba594#16/28\",\"4426\":\"v-63bba594#17\",\"4427\":\"v-63bba594#17/0\",\"4428\":\"v-63bba594#17/1\",\"4429\":\"v-63bba594#17/2\",\"4430\":\"v-63bba594#17/3\",\"4431\":\"v-63bba594#17/4\",\"4432\":\"v-63bba594#17/5\",\"4433\":\"v-63bba594#17/6\",\"4434\":\"v-63bba594#17/7\",\"4435\":\"v-63bba594#17/8\",\"4436\":\"v-63bba594#17/9\",\"4437\":\"v-63bba594#17/10\",\"4438\":\"v-63bba594#17/11\",\"4439\":\"v-63bba594#17/12\",\"4440\":\"v-63bba594#18\",\"4441\":\"v-63bba594#18/0\",\"4442\":\"v-63bba594#18/1\",\"4443\":\"v-63bba594#18/2\",\"4444\":\"v-63bba594#18/3\",\"4445\":\"v-63bba594#18/4\",\"4446\":\"v-63bba594#18/5\",\"4447\":\"v-63bba594#18/6\",\"4448\":\"v-63bba594#18/7\",\"4449\":\"v-63bba594#19\",\"4450\":\"v-63bba594#19/0\",\"4451\":\"v-63bba594#19/1\",\"4452\":\"v-63bba594#19/2\",\"4453\":\"v-63bba594#19/3\",\"4454\":\"v-63bba594#19/4\",\"4455\":\"v-63bba594#19/5\",\"4456\":\"v-63bba594#19/6\",\"4457\":\"v-63bba594#19/7\",\"4458\":\"v-63bba594#19/8\",\"4459\":\"v-63bba594#19/9\",\"4460\":\"v-63bba594#19/10\",\"4461\":\"v-6e989a44\",\"4462\":\"v-6e989a44#1\",\"4463\":\"v-6e989a44#1/0\",\"4464\":\"v-6e989a44#2\",\"4465\":\"v-6e989a44#2/1\",\"4466\":\"v-6e989a44#2/2\",\"4467\":\"v-6e989a44#2/3\",\"4468\":\"v-6e989a44#2/4\",\"4469\":\"v-6e989a44#2/5\",\"4470\":\"v-6e989a44#2/6\",\"4471\":\"v-6e989a44#2/7\",\"4472\":\"v-6e989a44#2/8\",\"4473\":\"v-6e989a44#2/9\",\"4474\":\"v-6e989a44#2/10\",\"4475\":\"v-6e989a44#2/11\",\"4476\":\"v-6e989a44#2/12\",\"4477\":\"v-6e989a44#2/13\",\"4478\":\"v-6e989a44#2/14\",\"4479\":\"v-6e989a44#2/15\",\"4480\":\"v-6e989a44#2/16\",\"4481\":\"v-6e989a44#2/17\",\"4482\":\"v-6e989a44#2/18\",\"4483\":\"v-6e989a44#2/19\",\"4484\":\"v-6e989a44#2/20\",\"4485\":\"v-6e989a44#2/21\",\"4486\":\"v-6e989a44#2/22\",\"4487\":\"v-6e989a44#3\",\"4488\":\"v-6e989a44#3/0\",\"4489\":\"v-6e989a44#3/1\",\"4490\":\"v-6e989a44#3/2\",\"4491\":\"v-6e989a44#3/3\",\"4492\":\"v-6e989a44#3/4\",\"4493\":\"v-6e989a44#3/5\",\"4494\":\"v-6e989a44#3/6\",\"4495\":\"v-6e989a44#3/7\",\"4496\":\"v-6e989a44#3/8\",\"4497\":\"v-6e989a44#3/9\",\"4498\":\"v-6e989a44#3/10\",\"4499\":\"v-6e989a44#3/11\",\"4500\":\"v-6e989a44#3/12\",\"4501\":\"v-6e989a44#3/13\",\"4502\":\"v-6e989a44#3/14\",\"4503\":\"v-6e989a44#3/15\",\"4504\":\"v-6e989a44#3/16\",\"4505\":\"v-6e989a44#3/17\",\"4506\":\"v-6e989a44#3/18\",\"4507\":\"v-6e989a44#3/19\",\"4508\":\"v-6e989a44#3/20\",\"4509\":\"v-6e989a44#3/21\",\"4510\":\"v-6e989a44#3/22\",\"4511\":\"v-6e989a44#3/23\",\"4512\":\"v-6e989a44#3/24\",\"4513\":\"v-6e989a44#3/25\",\"4514\":\"v-6e989a44#3/26\",\"4515\":\"v-6e989a44#3/27\",\"4516\":\"v-6e989a44#3/28\",\"4517\":\"v-6e989a44#3/29\",\"4518\":\"v-6e989a44#3/30\",\"4519\":\"v-6e989a44#3/31\",\"4520\":\"v-6e989a44#3/32\",\"4521\":\"v-6e989a44#3/33\",\"4522\":\"v-6e989a44#3/34\",\"4523\":\"v-6e989a44#3/35\",\"4524\":\"v-6e989a44#3/36\",\"4525\":\"v-6e989a44#3/37\",\"4526\":\"v-6e989a44#3/38\",\"4527\":\"v-6e989a44#3/39\",\"4528\":\"v-6e989a44#3/40\",\"4529\":\"v-6e989a44#3/41\",\"4530\":\"v-6e989a44#3/42\",\"4531\":\"v-6e989a44#3/43\",\"4532\":\"v-6e989a44#3/44\",\"4533\":\"v-6e989a44#3/45\",\"4534\":\"v-6e989a44#3/46\",\"4535\":\"v-6e989a44#4\",\"4536\":\"v-6e989a44#4/0\",\"4537\":\"v-6e989a44#4/1\",\"4538\":\"v-6e989a44#4/2\",\"4539\":\"v-6e989a44#4/3\",\"4540\":\"v-6e989a44#5\",\"4541\":\"v-6e989a44#5/0\",\"4542\":\"v-6e989a44#5/1\",\"4543\":\"v-6e989a44#6\",\"4544\":\"v-6e989a44#6/0\",\"4545\":\"v-6e989a44#6/1\",\"4546\":\"v-6e989a44#6/2\",\"4547\":\"v-6e989a44#6/3\",\"4548\":\"v-6e989a44#6/4\",\"4549\":\"v-6e989a44#6/5\",\"4550\":\"v-6e989a44#7\",\"4551\":\"v-6e989a44#7/0\",\"4552\":\"v-6e989a44#7/1\",\"4553\":\"v-6e989a44#7/2\",\"4554\":\"v-6e989a44#7/3\",\"4555\":\"v-6e989a44#7/4\",\"4556\":\"v-6e989a44#7/5\",\"4557\":\"v-ef05de7a\",\"4558\":\"v-ef05de7a#1\",\"4559\":\"v-ef05de7a#1/0\",\"4560\":\"v-ef05de7a#1/1\",\"4561\":\"v-ef05de7a#1/2\",\"4562\":\"v-ef05de7a#1/3\",\"4563\":\"v-ef05de7a#1/4\",\"4564\":\"v-ef05de7a#1/5\",\"4565\":\"v-ef05de7a#1/6\",\"4566\":\"v-ef05de7a#1/7\",\"4567\":\"v-ef05de7a#1/8\",\"4568\":\"v-ef05de7a#1/9\",\"4569\":\"v-ef05de7a#1/10\",\"4570\":\"v-ef05de7a#2\",\"4571\":\"v-ef05de7a#3\",\"4572\":\"v-ef05de7a#4\",\"4573\":\"v-ef05de7a#4/0\",\"4574\":\"v-ef05de7a#4/1\",\"4575\":\"v-ef05de7a#4/2\",\"4576\":\"v-ef05de7a#4/3\",\"4577\":\"v-ef05de7a#4/4\",\"4578\":\"v-ef05de7a#5\",\"4579\":\"v-ef05de7a#5/0\",\"4580\":\"v-ef05de7a#5/1\",\"4581\":\"v-ef05de7a#5/2\",\"4582\":\"v-ef05de7a#5/3\",\"4583\":\"v-ef05de7a#6\",\"4584\":\"v-ef05de7a#6/0\",\"4585\":\"v-ef05de7a#6/1\",\"4586\":\"v-ef05de7a#6/2\",\"4587\":\"v-ef05de7a#6/3\",\"4588\":\"v-ef05de7a#6/4\",\"4589\":\"v-ef05de7a#6/5\",\"4590\":\"v-ef05de7a#6/6\",\"4591\":\"v-ef05de7a#7\",\"4592\":\"v-ef05de7a#8\",\"4593\":\"v-ef05de7a#8/0\",\"4594\":\"v-ef05de7a#8/1\",\"4595\":\"v-ef05de7a#8/2\",\"4596\":\"v-ef05de7a#8/3\",\"4597\":\"v-ef05de7a#8/4\",\"4598\":\"v-ef05de7a#8/5\",\"4599\":\"v-ef05de7a#8/6\",\"4600\":\"v-ef05de7a#8/7\",\"4601\":\"v-ef05de7a#9\",\"4602\":\"v-ef05de7a#9/0\",\"4603\":\"v-ef05de7a#9/1\",\"4604\":\"v-ef05de7a#9/2\",\"4605\":\"v-ef05de7a#9/3\",\"4606\":\"v-ef05de7a#9/4\",\"4607\":\"v-ef05de7a#9/5\",\"4608\":\"v-ef05de7a#9/6\",\"4609\":\"v-ef05de7a#9/7\",\"4610\":\"v-ef05de7a#9/8\",\"4611\":\"v-ef05de7a#10\",\"4612\":\"v-ef05de7a#11\",\"4613\":\"v-ef05de7a#11/0\",\"4614\":\"v-ef05de7a#11/1\",\"4615\":\"v-ef05de7a#11/2\",\"4616\":\"v-ef05de7a#11/3\",\"4617\":\"v-ef05de7a#11/4\",\"4618\":\"v-ef05de7a#11/5\",\"4619\":\"v-ef05de7a#11/6\",\"4620\":\"v-ef05de7a#11/7\",\"4621\":\"v-ef05de7a#11/8\",\"4622\":\"v-ef05de7a#12\",\"4623\":\"v-ef05de7a#12/0\",\"4624\":\"v-ef05de7a#12/1\",\"4625\":\"v-ef05de7a#12/2\",\"4626\":\"v-ef05de7a#13\",\"4627\":\"v-ef05de7a#13/0\",\"4628\":\"v-ef05de7a#14\",\"4629\":\"v-ef05de7a#14/1\",\"4630\":\"v-ef05de7a#14/2\",\"4631\":\"v-ef05de7a#14/3\",\"4632\":\"v-ef05de7a#14/4\",\"4633\":\"v-ef05de7a#14/5\",\"4634\":\"v-ef05de7a#14/6\",\"4635\":\"v-ef05de7a#15\",\"4636\":\"v-ef05de7a#16\",\"4637\":\"v-ef05de7a#16/0\",\"4638\":\"v-ef05de7a#16/1\",\"4639\":\"v-ef05de7a#16/2\",\"4640\":\"v-ef05de7a#16/3\",\"4641\":\"v-ef05de7a#16/4\",\"4642\":\"v-ef05de7a#16/5\",\"4643\":\"v-ef05de7a#16/6\",\"4644\":\"v-ef05de7a#17\",\"4645\":\"v-ef05de7a#17/0\",\"4646\":\"v-ef05de7a#17/1\",\"4647\":\"v-ef05de7a#17/2\",\"4648\":\"v-ef05de7a#17/3\",\"4649\":\"v-ef05de7a#17/4\",\"4650\":\"v-ef05de7a#17/5\",\"4651\":\"v-ef05de7a#17/6\",\"4652\":\"v-4072253d\",\"4653\":\"v-4072253d#1\",\"4654\":\"v-4072253d#1/0\",\"4655\":\"v-4072253d#1/1\",\"4656\":\"v-4072253d#1/2\",\"4657\":\"v-4072253d#1/3\",\"4658\":\"v-4072253d#1/4\",\"4659\":\"v-4072253d#1/5\",\"4660\":\"v-4072253d#1/6\",\"4661\":\"v-4072253d#1/7\",\"4662\":\"v-4072253d#1/8\",\"4663\":\"v-4072253d#1/9\",\"4664\":\"v-4072253d#1/10\",\"4665\":\"v-4072253d#1/11\",\"4666\":\"v-4072253d#1/12\",\"4667\":\"v-4072253d#2\",\"4668\":\"v-4072253d#3\",\"4669\":\"v-4072253d#3/0\",\"4670\":\"v-4072253d#3/1\",\"4671\":\"v-4072253d#3/2\",\"4672\":\"v-4072253d#4\",\"4673\":\"v-4072253d#4/0\",\"4674\":\"v-4072253d#4/1\",\"4675\":\"v-4072253d#4/2\",\"4676\":\"v-4072253d#4/3\",\"4677\":\"v-4072253d#4/4\",\"4678\":\"v-4072253d#4/5\",\"4679\":\"v-4072253d#5\",\"4680\":\"v-4072253d#6\",\"4681\":\"v-4072253d#6/0\",\"4682\":\"v-4072253d#6/1\",\"4683\":\"v-4072253d#6/2\",\"4684\":\"v-4072253d#6/3\",\"4685\":\"v-4072253d#6/4\",\"4686\":\"v-4072253d#6/5\",\"4687\":\"v-4072253d#6/6\",\"4688\":\"v-4072253d#6/7\",\"4689\":\"v-4072253d#6/8\",\"4690\":\"v-4072253d#6/9\",\"4691\":\"v-4072253d#6/10\",\"4692\":\"v-4072253d#6/11\",\"4693\":\"v-4072253d#6/12\",\"4694\":\"v-4072253d#6/13\",\"4695\":\"v-4072253d#6/14\",\"4696\":\"v-4072253d#6/15\",\"4697\":\"v-4072253d#6/16\",\"4698\":\"v-4072253d#6/17\",\"4699\":\"v-4072253d#6/18\",\"4700\":\"v-4072253d#6/19\",\"4701\":\"v-4072253d#6/20\",\"4702\":\"v-4072253d#6/21\",\"4703\":\"v-4072253d#6/22\",\"4704\":\"v-4072253d#6/23\",\"4705\":\"v-4072253d#6/24\",\"4706\":\"v-4072253d#6/25\",\"4707\":\"v-4072253d#6/26\",\"4708\":\"v-4072253d#6/27\",\"4709\":\"v-4072253d#6/28\",\"4710\":\"v-4072253d#6/29\",\"4711\":\"v-4072253d#6/30\",\"4712\":\"v-4072253d#6/31\",\"4713\":\"v-4072253d#6/32\",\"4714\":\"v-4072253d#6/33\",\"4715\":\"v-4072253d#6/34\",\"4716\":\"v-4072253d#6/35\",\"4717\":\"v-4072253d#6/36\",\"4718\":\"v-4072253d#6/37\",\"4719\":\"v-4072253d#6/38\",\"4720\":\"v-4072253d#6/39\",\"4721\":\"v-4072253d#6/40\",\"4722\":\"v-4072253d#6/41\",\"4723\":\"v-4072253d#6/42\",\"4724\":\"v-4072253d#6/43\",\"4725\":\"v-4072253d#6/44\",\"4726\":\"v-4072253d#6/45\",\"4727\":\"v-4072253d#6/46\",\"4728\":\"v-4072253d#6/47\",\"4729\":\"v-4072253d#6/48\",\"4730\":\"v-4072253d#6/49\",\"4731\":\"v-4072253d#6/50\",\"4732\":\"v-4072253d#6/51\",\"4733\":\"v-4072253d#6/52\",\"4734\":\"v-4072253d#6/53\",\"4735\":\"v-4072253d#6/54\",\"4736\":\"v-4072253d#6/55\",\"4737\":\"v-4072253d#6/56\",\"4738\":\"v-4072253d#6/57\",\"4739\":\"v-4072253d#7\",\"4740\":\"v-4072253d#7/0\",\"4741\":\"v-4072253d#7/1\",\"4742\":\"v-4072253d#7/2\",\"4743\":\"v-4072253d#7/3\",\"4744\":\"v-4072253d#7/4\",\"4745\":\"v-4072253d#7/5\",\"4746\":\"v-4072253d#7/6\",\"4747\":\"v-4072253d#7/7\",\"4748\":\"v-4072253d#7/8\",\"4749\":\"v-4072253d#7/9\",\"4750\":\"v-4072253d#7/10\",\"4751\":\"v-4072253d#7/11\",\"4752\":\"v-4072253d#7/12\",\"4753\":\"v-4072253d#7/13\",\"4754\":\"v-4072253d#7/14\",\"4755\":\"v-4072253d#7/15\",\"4756\":\"v-4072253d#7/16\",\"4757\":\"v-4072253d#8\",\"4758\":\"v-4072253d#8/0\",\"4759\":\"v-4072253d#8/1\",\"4760\":\"v-4072253d#8/2\",\"4761\":\"v-4072253d#8/3\",\"4762\":\"v-4072253d#8/4\",\"4763\":\"v-4072253d#8/5\",\"4764\":\"v-4072253d#8/6\",\"4765\":\"v-4072253d#8/7\",\"4766\":\"v-4072253d#8/8\",\"4767\":\"v-4072253d#8/9\",\"4768\":\"v-4072253d#8/10\",\"4769\":\"v-4072253d#8/11\",\"4770\":\"v-4072253d#8/12\",\"4771\":\"v-4072253d#8/13\",\"4772\":\"v-4072253d#8/14\",\"4773\":\"v-4072253d#8/15\",\"4774\":\"v-4072253d#8/16\",\"4775\":\"v-4072253d#8/17\",\"4776\":\"v-4072253d#8/18\",\"4777\":\"v-4072253d#8/19\",\"4778\":\"v-4072253d#8/20\",\"4779\":\"v-4072253d#8/21\",\"4780\":\"v-4072253d#8/22\",\"4781\":\"v-4072253d#8/23\",\"4782\":\"v-4072253d#8/24\",\"4783\":\"v-4072253d#8/25\",\"4784\":\"v-4072253d#8/26\",\"4785\":\"v-4072253d#8/27\",\"4786\":\"v-4072253d#8/28\",\"4787\":\"v-4072253d#8/29\",\"4788\":\"v-4072253d#8/30\",\"4789\":\"v-4072253d#8/31\",\"4790\":\"v-4072253d#8/32\",\"4791\":\"v-4072253d#8/33\",\"4792\":\"v-4072253d#8/34\",\"4793\":\"v-4072253d#8/35\",\"4794\":\"v-4072253d#8/36\",\"4795\":\"v-4072253d#8/37\",\"4796\":\"v-4072253d#8/38\",\"4797\":\"v-4072253d#8/39\",\"4798\":\"v-4072253d#8/40\",\"4799\":\"v-4072253d#8/41\",\"4800\":\"v-4072253d#8/42\",\"4801\":\"v-4072253d#8/43\",\"4802\":\"v-4072253d#8/44\",\"4803\":\"v-4072253d#8/45\",\"4804\":\"v-4072253d#9\",\"4805\":\"v-4072253d#9/0\",\"4806\":\"v-4072253d#9/1\",\"4807\":\"v-4072253d#9/2\",\"4808\":\"v-4072253d#10\",\"4809\":\"v-4072253d#10/0\",\"4810\":\"v-4072253d#10/1\",\"4811\":\"v-4072253d#10/2\",\"4812\":\"v-4072253d#10/3\",\"4813\":\"v-4072253d#10/4\",\"4814\":\"v-4072253d#10/5\",\"4815\":\"v-4072253d#10/6\",\"4816\":\"v-4072253d#10/7\",\"4817\":\"v-4072253d#10/8\",\"4818\":\"v-4072253d#10/9\",\"4819\":\"v-4072253d#10/10\",\"4820\":\"v-4072253d#10/11\",\"4821\":\"v-4072253d#10/12\",\"4822\":\"v-4072253d#10/13\",\"4823\":\"v-4072253d#10/14\",\"4824\":\"v-4072253d#10/15\",\"4825\":\"v-4072253d#10/16\",\"4826\":\"v-4072253d#10/17\",\"4827\":\"v-4072253d#11\",\"4828\":\"v-4072253d#11/18\",\"4829\":\"v-4072253d#11/19\",\"4830\":\"v-4072253d#11/20\",\"4831\":\"v-4072253d#11/21\",\"4832\":\"v-4072253d#11/22\",\"4833\":\"v-4072253d#11/23\",\"4834\":\"v-4072253d#11/24\",\"4835\":\"v-4072253d#11/25\",\"4836\":\"v-4072253d#11/26\",\"4837\":\"v-4072253d#11/27\",\"4838\":\"v-4072253d#12\",\"4839\":\"v-4072253d#12/0\",\"4840\":\"v-4072253d#12/1\",\"4841\":\"v-4072253d#12/2\",\"4842\":\"v-4072253d#12/3\",\"4843\":\"v-4072253d#12/4\",\"4844\":\"v-4072253d#13\",\"4845\":\"v-4072253d#14\",\"4846\":\"v-4072253d#14/5\",\"4847\":\"v-4072253d#14/6\",\"4848\":\"v-4072253d#14/7\",\"4849\":\"v-4072253d#14/8\",\"4850\":\"v-4072253d#14/9\",\"4851\":\"v-4072253d#14/10\",\"4852\":\"v-4072253d#14/11\",\"4853\":\"v-4072253d#14/12\",\"4854\":\"v-4072253d#14/13\",\"4855\":\"v-4072253d#14/14\",\"4856\":\"v-4072253d#14/15\",\"4857\":\"v-4072253d#14/16\",\"4858\":\"v-4072253d#14/17\",\"4859\":\"v-4072253d#14/18\",\"4860\":\"v-4072253d#14/19\",\"4861\":\"v-4072253d#15\",\"4862\":\"v-4072253d#15/20\",\"4863\":\"v-4072253d#15/21\",\"4864\":\"v-4072253d#15/22\",\"4865\":\"v-4072253d#15/23\",\"4866\":\"v-4072253d#15/24\",\"4867\":\"v-4072253d#15/25\",\"4868\":\"v-4072253d#15/26\",\"4869\":\"v-4072253d#15/27\",\"4870\":\"v-4072253d#15/28\",\"4871\":\"v-4072253d#15/29\",\"4872\":\"v-4072253d#15/30\",\"4873\":\"v-4072253d#15/31\",\"4874\":\"v-4072253d#15/32\",\"4875\":\"v-4072253d#15/33\",\"4876\":\"v-4072253d#15/34\",\"4877\":\"v-4072253d#15/35\",\"4878\":\"v-4072253d#15/36\",\"4879\":\"v-4072253d#15/37\",\"4880\":\"v-4072253d#15/38\",\"4881\":\"v-4072253d#15/39\",\"4882\":\"v-4072253d#15/40\",\"4883\":\"v-4072253d#15/41\",\"4884\":\"v-4072253d#15/42\",\"4885\":\"v-4072253d#15/43\",\"4886\":\"v-4072253d#15/44\",\"4887\":\"v-4072253d#15/45\",\"4888\":\"v-4072253d#15/46\",\"4889\":\"v-4072253d#15/47\",\"4890\":\"v-4072253d#15/48\",\"4891\":\"v-4072253d#15/49\",\"4892\":\"v-4072253d#15/50\",\"4893\":\"v-4072253d#15/51\",\"4894\":\"v-4072253d#15/52\",\"4895\":\"v-4072253d#15/53\",\"4896\":\"v-4072253d#15/54\",\"4897\":\"v-4072253d#16\",\"4898\":\"v-4072253d#16/0\",\"4899\":\"v-4072253d#16/1\",\"4900\":\"v-4072253d#16/2\",\"4901\":\"v-4072253d#16/3\",\"4902\":\"v-4072253d#16/4\",\"4903\":\"v-4072253d#16/5\",\"4904\":\"v-4072253d#16/6\",\"4905\":\"v-4072253d#16/7\",\"4906\":\"v-4072253d#16/8\",\"4907\":\"v-4072253d#16/9\",\"4908\":\"v-4072253d#16/10\",\"4909\":\"v-4072253d#16/11\",\"4910\":\"v-4072253d#16/12\",\"4911\":\"v-4072253d#17\",\"4912\":\"v-4072253d#17/13\",\"4913\":\"v-4072253d#18\",\"4914\":\"v-4072253d#18/14\",\"4915\":\"v-4072253d#18/15\",\"4916\":\"v-4072253d#18/16\",\"4917\":\"v-4072253d#18/17\",\"4918\":\"v-4072253d#18/18\",\"4919\":\"v-4072253d#18/19\",\"4920\":\"v-4072253d#18/20\",\"4921\":\"v-4072253d#18/21\",\"4922\":\"v-4072253d#18/22\",\"4923\":\"v-4072253d#18/23\",\"4924\":\"v-4072253d#18/24\",\"4925\":\"v-4072253d#18/25\",\"4926\":\"v-4072253d#18/26\",\"4927\":\"v-4072253d#19\",\"4928\":\"v-4072253d#19/27\",\"4929\":\"v-4072253d#19/28\",\"4930\":\"v-4072253d#19/29\",\"4931\":\"v-4072253d#19/30\",\"4932\":\"v-4072253d#19/31\",\"4933\":\"v-4072253d#19/32\",\"4934\":\"v-4072253d#19/33\",\"4935\":\"v-4072253d#19/34\",\"4936\":\"v-4072253d#20\",\"4937\":\"v-4072253d#20/35\",\"4938\":\"v-4072253d#20/36\",\"4939\":\"v-4072253d#20/37\",\"4940\":\"v-4072253d#20/38\",\"4941\":\"v-4072253d#20/39\",\"4942\":\"v-4072253d#20/40\",\"4943\":\"v-4072253d#20/41\",\"4944\":\"v-4072253d#20/42\",\"4945\":\"v-4072253d#20/43\",\"4946\":\"v-4072253d#20/44\",\"4947\":\"v-4072253d#20/45\",\"4948\":\"v-4072253d#20/46\",\"4949\":\"v-4072253d#20/47\",\"4950\":\"v-4072253d#20/48\",\"4951\":\"v-4072253d#20/49\",\"4952\":\"v-4072253d#20/50\",\"4953\":\"v-4072253d#20/51\",\"4954\":\"v-4072253d#20/52\",\"4955\":\"v-4072253d#20/53\",\"4956\":\"v-4072253d#20/54\",\"4957\":\"v-4072253d#20/55\",\"4958\":\"v-4072253d#20/56\",\"4959\":\"v-4072253d#20/57\",\"4960\":\"v-4072253d#20/58\",\"4961\":\"v-4072253d#20/59\",\"4962\":\"v-4072253d#20/60\",\"4963\":\"v-4072253d#20/61\",\"4964\":\"v-4072253d#20/62\",\"4965\":\"v-4072253d#20/63\",\"4966\":\"v-4072253d#21\",\"4967\":\"v-4072253d#21/0\",\"4968\":\"v-4072253d#21/1\",\"4969\":\"v-4072253d#21/2\",\"4970\":\"v-4072253d#21/3\",\"4971\":\"v-4072253d#21/4\",\"4972\":\"v-4072253d#21/5\",\"4973\":\"v-4072253d#21/6\",\"4974\":\"v-4072253d#21/7\",\"4975\":\"v-4072253d#21/8\",\"4976\":\"v-4072253d#21/9\",\"4977\":\"v-4072253d#22\",\"4978\":\"v-4072253d#22/0\",\"4979\":\"v-4072253d#22/1\",\"4980\":\"v-4072253d#22/2\",\"4981\":\"v-4072253d#22/3\",\"4982\":\"v-4072253d#23\",\"4983\":\"v-4072253d#23/4\",\"4984\":\"v-4072253d#23/5\",\"4985\":\"v-4072253d#23/6\",\"4986\":\"v-4072253d#23/7\",\"4987\":\"v-4072253d#24\",\"4988\":\"v-4072253d#24/8\",\"4989\":\"v-4072253d#24/9\",\"4990\":\"v-4072253d#24/10\",\"4991\":\"v-4072253d#24/11\",\"4992\":\"v-4072253d#24/12\",\"4993\":\"v-4072253d#24/13\",\"4994\":\"v-4072253d#24/14\",\"4995\":\"v-4072253d#24/15\",\"4996\":\"v-4072253d#24/16\",\"4997\":\"v-4072253d#24/17\",\"4998\":\"v-4072253d#24/18\",\"4999\":\"v-4072253d#24/19\",\"5000\":\"v-4072253d#24/20\",\"5001\":\"v-4072253d#24/21\",\"5002\":\"v-4072253d#24/22\",\"5003\":\"v-4072253d#24/23\",\"5004\":\"v-4072253d#24/24\",\"5005\":\"v-4072253d#25\",\"5006\":\"v-4072253d#25/0\",\"5007\":\"v-4072253d#25/1\",\"5008\":\"v-4072253d#25/2\",\"5009\":\"v-4072253d#25/3\",\"5010\":\"v-4072253d#25/4\",\"5011\":\"v-4072253d#25/5\",\"5012\":\"v-4072253d#25/6\",\"5013\":\"v-4072253d#25/7\",\"5014\":\"v-4072253d#25/8\",\"5015\":\"v-4072253d#25/9\",\"5016\":\"v-4072253d#25/10\",\"5017\":\"v-4072253d#25/11\",\"5018\":\"v-4072253d#25/12\",\"5019\":\"v-4072253d#25/13\",\"5020\":\"v-4072253d#25/14\",\"5021\":\"v-4072253d#25/15\",\"5022\":\"v-4072253d#25/16\",\"5023\":\"v-4072253d#26\",\"5024\":\"v-4072253d#26/17\",\"5025\":\"v-84651986\",\"5026\":\"v-84651986#1\",\"5027\":\"v-84651986#2\",\"5028\":\"v-84651986#2/0\",\"5029\":\"v-84651986#2/1\",\"5030\":\"v-84651986#3\",\"5031\":\"v-84651986#3/0\",\"5032\":\"v-84651986#3/1\",\"5033\":\"v-84651986#3/2\",\"5034\":\"v-84651986#3/3\",\"5035\":\"v-84651986#4\",\"5036\":\"v-84651986#4/0\",\"5037\":\"v-84651986#5\",\"5038\":\"v-84651986#6\",\"5039\":\"v-84651986#6/0\",\"5040\":\"v-84651986#6/1\",\"5041\":\"v-84651986#6/2\",\"5042\":\"v-84651986#6/3\",\"5043\":\"v-84651986#6/4\",\"5044\":\"v-84651986#6/5\",\"5045\":\"v-84651986#6/6\",\"5046\":\"v-84651986#6/7\",\"5047\":\"v-84651986#6/8\",\"5048\":\"v-84651986#6/9\",\"5049\":\"v-84651986#6/10\",\"5050\":\"v-84651986#6/11\",\"5051\":\"v-84651986#6/12\",\"5052\":\"v-84651986#6/13\",\"5053\":\"v-84651986#6/14\",\"5054\":\"v-84651986#6/15\",\"5055\":\"v-84651986#6/16\",\"5056\":\"v-84651986#6/17\",\"5057\":\"v-84651986#6/18\",\"5058\":\"v-84651986#6/19\",\"5059\":\"v-84651986#6/20\",\"5060\":\"v-84651986#6/21\",\"5061\":\"v-84651986#6/22\",\"5062\":\"v-84651986#6/23\",\"5063\":\"v-84651986#6/24\",\"5064\":\"v-84651986#6/25\",\"5065\":\"v-84651986#6/26\",\"5066\":\"v-84651986#6/27\",\"5067\":\"v-84651986#6/28\",\"5068\":\"v-84651986#6/29\",\"5069\":\"v-84651986#6/30\",\"5070\":\"v-84651986#6/31\",\"5071\":\"v-84651986#6/32\",\"5072\":\"v-84651986#6/33\",\"5073\":\"v-84651986#6/34\",\"5074\":\"v-84651986#6/35\",\"5075\":\"v-84651986#6/36\",\"5076\":\"v-84651986#6/37\",\"5077\":\"v-84651986#6/38\",\"5078\":\"v-84651986#6/39\",\"5079\":\"v-84651986#6/40\",\"5080\":\"v-84651986#6/41\",\"5081\":\"v-84651986#6/42\",\"5082\":\"v-84651986#6/43\",\"5083\":\"v-84651986#6/44\",\"5084\":\"v-84651986#6/45\",\"5085\":\"v-84651986#7\",\"5086\":\"v-84651986#7/0\",\"5087\":\"v-84651986#8\",\"5088\":\"v-84651986#8/1\",\"5089\":\"v-84651986#8/2\",\"5090\":\"v-84651986#8/3\",\"5091\":\"v-84651986#9\",\"5092\":\"v-84651986#9/0\",\"5093\":\"v-84651986#10\",\"5094\":\"v-84651986#10/0\",\"5095\":\"v-84651986#11\",\"5096\":\"v-84651986#11/0\",\"5097\":\"v-84651986#11/1\",\"5098\":\"v-84651986#12\",\"5099\":\"v-84651986#12/0\",\"5100\":\"v-84651986#12/1\",\"5101\":\"v-84651986#12/2\",\"5102\":\"v-84651986#12/3\",\"5103\":\"v-84651986#12/4\",\"5104\":\"v-84651986#13\",\"5105\":\"v-84651986#13/0\",\"5106\":\"v-84651986#13/1\",\"5107\":\"v-84651986#13/2\",\"5108\":\"v-84651986#13/3\",\"5109\":\"v-84651986#13/4\",\"5110\":\"v-84651986#13/5\",\"5111\":\"v-84651986#13/6\",\"5112\":\"v-84651986#13/7\",\"5113\":\"v-84651986#13/8\",\"5114\":\"v-84651986#13/9\",\"5115\":\"v-84651986#13/10\",\"5116\":\"v-2b64e284\",\"5117\":\"v-2b64e284#1\",\"5118\":\"v-2b64e284#1/0\",\"5119\":\"v-2b64e284#1/1\",\"5120\":\"v-2b64e284#1/2\",\"5121\":\"v-2b64e284#1/3\",\"5122\":\"v-c1942916\",\"5123\":\"v-c1942916#0/0\",\"5124\":\"v-c1942916#0/1\",\"5125\":\"v-c1942916#0/2\",\"5126\":\"v-c1942916#0/3\",\"5127\":\"v-c1942916#0/4\",\"5128\":\"v-c1942916#0/5\",\"5129\":\"v-c1942916#0/6\",\"5130\":\"v-c1942916#0/7\",\"5131\":\"v-c1942916#0/8\",\"5132\":\"v-c1942916#0/9\",\"5133\":\"v-c1942916#0/10\",\"5134\":\"v-c1942916#0/11\",\"5135\":\"v-c1942916#0/12\",\"5136\":\"v-65c00218\",\"5137\":\"v-65c00218#0/0\",\"5138\":\"v-65c00218#0/1\",\"5139\":\"v-65c00218#0/2\",\"5140\":\"v-36295574\",\"5141\":\"v-36295574#0/0\",\"5142\":\"v-36295574#0/1\",\"5143\":\"v-36295574#1\",\"5144\":\"v-36295574#1/0\",\"5145\":\"v-36295574#2\",\"5146\":\"v-36295574#2/0\",\"5147\":\"v-36295574#2/1\",\"5148\":\"v-36295574#2/2\",\"5149\":\"v-36295574#3\",\"5150\":\"v-36295574#3/0\",\"5151\":\"v-36295574#4\",\"5152\":\"v-36295574#4/0\",\"5153\":\"v-36295574#4/1\",\"5154\":\"v-36295574#5\",\"5155\":\"v-36295574#5/0\",\"5156\":\"v-36295574#6\",\"5157\":\"v-36295574#6/0\",\"5158\":\"v-36295574#6/1\",\"5159\":\"v-36295574#6/2\",\"5160\":\"v-36295574#6/3\",\"5161\":\"v-36295574#6/4\",\"5162\":\"v-36295574#6/5\",\"5163\":\"v-36295574#6/6\",\"5164\":\"v-36295574#6/7\",\"5165\":\"v-36295574#6/8\",\"5166\":\"v-36295574#6/9\",\"5167\":\"v-36295574#6/10\",\"5168\":\"v-36295574#6/11\",\"5169\":\"v-36295574#6/12\",\"5170\":\"v-36295574#7\",\"5171\":\"v-36295574#7/0\",\"5172\":\"v-36295574#8\",\"5173\":\"v-36295574#8/0\",\"5174\":\"v-36295574#8/1\",\"5175\":\"v-36295574#9\",\"5176\":\"v-36295574#9/0\",\"5177\":\"v-36295574#9/1\",\"5178\":\"v-36295574#9/2\",\"5179\":\"v-36295574#10\",\"5180\":\"v-36295574#10/0\",\"5181\":\"v-36295574#10/1\",\"5182\":\"v-36295574#11\",\"5183\":\"v-36295574#11/0\",\"5184\":\"v-36295574#11/1\",\"5185\":\"v-36295574#12\",\"5186\":\"v-36295574#12/0\",\"5187\":\"v-36295574#12/1\",\"5188\":\"v-36295574#13\",\"5189\":\"v-36295574#13/0\",\"5190\":\"v-36295574#13/1\",\"5191\":\"v-36295574#13/2\",\"5192\":\"v-36295574#14\",\"5193\":\"v-36295574#14/0\",\"5194\":\"v-36295574#14/1\",\"5195\":\"v-36295574#15\",\"5196\":\"v-36295574#15/0\",\"5197\":\"v-36295574#15/1\",\"5198\":\"v-36295574#16\",\"5199\":\"v-36295574#16/0\",\"5200\":\"v-36295574#17\",\"5201\":\"v-36295574#17/0\",\"5202\":\"v-36295574#18\",\"5203\":\"v-36295574#18/0\",\"5204\":\"v-36295574#19\",\"5205\":\"v-36295574#19/0\",\"5206\":\"v-36295574#20\",\"5207\":\"v-36295574#20/0\",\"5208\":\"v-36295574#20/1\",\"5209\":\"v-36295574#21\",\"5210\":\"v-36295574#21/0\",\"5211\":\"v-36295574#21/1\",\"5212\":\"v-36295574#21/2\",\"5213\":\"v-36295574#21/3\",\"5214\":\"v-36295574#21/4\",\"5215\":\"v-36295574#22\",\"5216\":\"v-36295574#22/0\",\"5217\":\"v-36295574#23\",\"5218\":\"v-36295574#23/0\",\"5219\":\"v-36295574#23/1\",\"5220\":\"v-36295574#24\",\"5221\":\"v-36295574#24/0\",\"5222\":\"v-36295574#25\",\"5223\":\"v-36295574#25/0\",\"5224\":\"v-36295574#26\",\"5225\":\"v-36295574#26/0\",\"5226\":\"v-36295574#26/1\",\"5227\":\"v-62ced1a6\",\"5228\":\"v-62ced1a6#0/0\",\"5229\":\"v-62ced1a6#1\",\"5230\":\"v-62ced1a6#1/0\",\"5231\":\"v-62ced1a6#1/1\",\"5232\":\"v-62ced1a6#1/2\",\"5233\":\"v-62ced1a6#1/3\",\"5234\":\"v-62ced1a6#1/4\",\"5235\":\"v-62ced1a6#2\",\"5236\":\"v-62ced1a6#2/0\",\"5237\":\"v-62ced1a6#2/1\",\"5238\":\"v-62ced1a6#2/2\",\"5239\":\"v-62ced1a6#2/3\",\"5240\":\"v-62ced1a6#2/4\",\"5241\":\"v-62ced1a6#2/5\",\"5242\":\"v-62ced1a6#3\",\"5243\":\"v-62ced1a6#3/0\",\"5244\":\"v-62ced1a6#3/1\",\"5245\":\"v-62ced1a6#3/2\",\"5246\":\"v-62ced1a6#3/3\",\"5247\":\"v-62ced1a6#3/4\",\"5248\":\"v-62ced1a6#3/5\",\"5249\":\"v-62ced1a6#3/6\",\"5250\":\"v-62ced1a6#3/7\",\"5251\":\"v-62ced1a6#3/8\",\"5252\":\"v-62ced1a6#3/9\",\"5253\":\"v-62ced1a6#3/10\",\"5254\":\"v-47357bdb\",\"5255\":\"v-47357bdb#1\",\"5256\":\"v-47357bdb#2\",\"5257\":\"v-47357bdb#2/0\",\"5258\":\"v-47357bdb#2/1\",\"5259\":\"v-47357bdb#3\",\"5260\":\"v-47357bdb#3/0\",\"5261\":\"v-47357bdb#3/1\",\"5262\":\"v-2c0c1358\",\"5263\":\"v-2c0c1358#0/0\",\"5264\":\"v-2c0c1358#0/1\",\"5265\":\"v-2c0c1358#0/2\",\"5266\":\"v-763c1cd7\",\"5267\":\"v-763c1cd7#1\",\"5268\":\"v-763c1cd7#1/0\",\"5269\":\"v-763c1cd7#2\",\"5270\":\"v-763c1cd7#2/0\",\"5271\":\"v-763c1cd7#2/1\",\"5272\":\"v-1e317375\",\"5273\":\"v-1e317375#0/0\",\"5274\":\"v-763e2284\",\"5275\":\"v-763e2284#1\",\"5276\":\"v-763e2284#1/0\",\"5277\":\"v-763e2284#2\",\"5278\":\"v-763e2284#2/0\",\"5279\":\"v-763e2284#2/1\",\"5280\":\"v-00fb7173\",\"5281\":\"v-00fb7173#0/0\",\"5282\":\"v-73f45a1e\",\"5283\":\"v-73f45a1e#1\",\"5284\":\"v-73f45a1e#2\",\"5285\":\"v-73f45a1e#3\",\"5286\":\"v-73f45a1e#3/0\",\"5287\":\"v-73f45a1e#3/1\",\"5288\":\"v-73f45a1e#3/2\",\"5289\":\"v-73f45a1e#3/3\",\"5290\":\"v-73f45a1e#3/4\",\"5291\":\"v-73f45a1e#4\",\"5292\":\"v-73f45a1e#5\",\"5293\":\"v-73f45a1e#6\",\"5294\":\"v-73f45a1e#7\",\"5295\":\"v-73f45a1e#8\",\"5296\":\"v-73f45a1e#9\",\"5297\":\"v-73f45a1e#10\",\"5298\":\"v-73f45a1e#10/0\",\"5299\":\"v-73f45a1e#10/1\",\"5300\":\"v-73f45a1e#10/2\",\"5301\":\"v-73f45a1e#11\",\"5302\":\"v-73f45a1e#11/0\",\"5303\":\"v-73f45a1e#11/1\",\"5304\":\"v-73f45a1e#11/2\",\"5305\":\"v-73f45a1e#12\",\"5306\":\"v-73f45a1e#13\",\"5307\":\"v-73f45a1e#13/0\",\"5308\":\"v-73f45a1e#13/1\",\"5309\":\"v-73f45a1e#13/2\",\"5310\":\"v-73f45a1e#13/3\",\"5311\":\"v-73f45a1e#14\",\"5312\":\"v-73f45a1e#14/0\",\"5313\":\"v-73f45a1e#14/1\",\"5314\":\"v-73f45a1e#15\",\"5315\":\"v-73f45a1e#15/0\",\"5316\":\"v-73f45a1e#15/1\",\"5317\":\"v-73f45a1e#15/2\",\"5318\":\"v-73f45a1e#15/3\",\"5319\":\"v-73f45a1e#15/4\",\"5320\":\"v-73f45a1e#15/5\",\"5321\":\"v-73f45a1e#15/6\",\"5322\":\"v-73f45a1e#15/7\",\"5323\":\"v-73f45a1e#15/8\",\"5324\":\"v-73f45a1e#15/9\",\"5325\":\"v-73f45a1e#15/10\",\"5326\":\"v-73f45a1e#15/11\",\"5327\":\"v-73f45a1e#15/12\",\"5328\":\"v-73f45a1e#15/13\",\"5329\":\"v-73f45a1e#16\",\"5330\":\"v-73f45a1e#16/0\",\"5331\":\"v-73f45a1e#16/1\",\"5332\":\"v-73f45a1e#16/2\",\"5333\":\"v-73f45a1e#16/3\",\"5334\":\"v-73f45a1e#16/4\",\"5335\":\"v-73f45a1e#16/5\",\"5336\":\"v-73f45a1e#16/6\",\"5337\":\"v-73f45a1e#16/7\",\"5338\":\"v-73f45a1e#16/8\",\"5339\":\"v-73f45a1e#16/9\",\"5340\":\"v-73f45a1e#16/10\",\"5341\":\"v-73f45a1e#16/11\",\"5342\":\"v-73f45a1e#16/12\",\"5343\":\"v-73f45a1e#16/13\",\"5344\":\"v-73f45a1e#16/14\",\"5345\":\"v-86e9843c\",\"5346\":\"v-86e9843c#1\",\"5347\":\"v-86e9843c#1/0\",\"5348\":\"v-86e9843c#2\",\"5349\":\"v-86e9843c#3\",\"5350\":\"v-86e9843c#3/0\",\"5351\":\"v-86e9843c#3/1\",\"5352\":\"v-86e9843c#3/2\",\"5353\":\"v-86e9843c#3/3\",\"5354\":\"v-86e9843c#3/4\",\"5355\":\"v-86e9843c#3/5\",\"5356\":\"v-86e9843c#3/6\",\"5357\":\"v-86e9843c#3/7\",\"5358\":\"v-86e9843c#4\",\"5359\":\"v-86e9843c#4/8\",\"5360\":\"v-86e9843c#4/9\",\"5361\":\"v-86e9843c#4/10\",\"5362\":\"v-86e9843c#4/11\",\"5363\":\"v-86e9843c#4/12\",\"5364\":\"v-86e9843c#5\",\"5365\":\"v-86e9843c#5/0\",\"5366\":\"v-86e9843c#5/1\",\"5367\":\"v-86e9843c#5/2\",\"5368\":\"v-86e9843c#5/3\",\"5369\":\"v-86e9843c#5/4\",\"5370\":\"v-86e9843c#5/5\",\"5371\":\"v-86e9843c#6\",\"5372\":\"v-86e9843c#6/6\",\"5373\":\"v-86e9843c#6/7\",\"5374\":\"v-86e9843c#7\",\"5375\":\"v-86e9843c#7/8\",\"5376\":\"v-86e9843c#7/9\",\"5377\":\"v-86e9843c#7/10\",\"5378\":\"v-86e9843c#7/11\",\"5379\":\"v-86e9843c#7/12\",\"5380\":\"v-86e9843c#7/13\",\"5381\":\"v-86e9843c#7/14\",\"5382\":\"v-86e9843c#7/15\",\"5383\":\"v-86e9843c#7/16\",\"5384\":\"v-86e9843c#7/17\",\"5385\":\"v-86e9843c#8\",\"5386\":\"v-86e9843c#9\",\"5387\":\"v-86e9843c#9/0\",\"5388\":\"v-86e9843c#9/1\",\"5389\":\"v-86e9843c#9/2\",\"5390\":\"v-86e9843c#9/3\",\"5391\":\"v-86e9843c#9/4\",\"5392\":\"v-86e9843c#9/5\",\"5393\":\"v-86e9843c#9/6\",\"5394\":\"v-86e9843c#9/7\",\"5395\":\"v-86e9843c#9/8\",\"5396\":\"v-86e9843c#9/9\",\"5397\":\"v-86e9843c#9/10\",\"5398\":\"v-86e9843c#9/11\",\"5399\":\"v-86e9843c#9/12\",\"5400\":\"v-86e9843c#9/13\",\"5401\":\"v-86e9843c#9/14\",\"5402\":\"v-86e9843c#9/15\",\"5403\":\"v-86e9843c#9/16\",\"5404\":\"v-86e9843c#9/17\",\"5405\":\"v-86e9843c#10\",\"5406\":\"v-86e9843c#10/0\",\"5407\":\"v-86e9843c#10/1\",\"5408\":\"v-86e9843c#10/2\",\"5409\":\"v-86e9843c#10/3\",\"5410\":\"v-86e9843c#10/4\",\"5411\":\"v-86e9843c#10/5\",\"5412\":\"v-86e9843c#10/6\",\"5413\":\"v-86e9843c#11\",\"5414\":\"v-86e9843c#11/0\",\"5415\":\"v-86e9843c#11/1\",\"5416\":\"v-86e9843c#11/2\",\"5417\":\"v-86e9843c#11/3\",\"5418\":\"v-86e9843c#11/4\",\"5419\":\"v-86e9843c#11/5\",\"5420\":\"v-86e9843c#11/6\",\"5421\":\"v-86e9843c#12\",\"5422\":\"v-86e9843c#12/0\",\"5423\":\"v-86e9843c#12/1\",\"5424\":\"v-86e9843c#12/2\",\"5425\":\"v-86e9843c#12/3\",\"5426\":\"v-86e9843c#12/4\",\"5427\":\"v-86e9843c#12/5\",\"5428\":\"v-86e9843c#12/6\",\"5429\":\"v-86e9843c#12/7\",\"5430\":\"v-86e9843c#12/8\",\"5431\":\"v-86e9843c#13\",\"5432\":\"v-86e9843c#14\",\"5433\":\"v-86e9843c#15\",\"5434\":\"v-86e9843c#16\",\"5435\":\"v-86e9843c#16/0\",\"5436\":\"v-86e9843c#16/1\",\"5437\":\"v-86e9843c#17\",\"5438\":\"v-86e9843c#17/0\",\"5439\":\"v-86e9843c#18\",\"5440\":\"v-86e9843c#18/0\",\"5441\":\"v-86e9843c#19\",\"5442\":\"v-86e9843c#19/0\",\"5443\":\"v-86e9843c#20\",\"5444\":\"v-86e9843c#20/0\",\"5445\":\"v-86e9843c#21\",\"5446\":\"v-86e9843c#21/0\",\"5447\":\"v-86e9843c#21/1\",\"5448\":\"v-86e9843c#22\",\"5449\":\"v-86e9843c#23\",\"5450\":\"v-86e9843c#24\",\"5451\":\"v-86e9843c#25\",\"5452\":\"v-86e9843c#26\",\"5453\":\"v-86e9843c#27\",\"5454\":\"v-86e9843c#28\",\"5455\":\"v-86e9843c#29\",\"5456\":\"v-86e9843c#29/0\",\"5457\":\"v-86e9843c#30\",\"5458\":\"v-86e9843c#30/0\",\"5459\":\"v-86e9843c#31\",\"5460\":\"v-86e9843c#31/0\",\"5461\":\"v-86e9843c#31/1\",\"5462\":\"v-86e9843c#31/2\",\"5463\":\"v-86e9843c#31/3\",\"5464\":\"v-86e9843c#31/4\",\"5465\":\"v-86e9843c#31/5\",\"5466\":\"v-86e9843c#31/6\",\"5467\":\"v-86e9843c#31/7\",\"5468\":\"v-86e9843c#31/8\",\"5469\":\"v-86e9843c#32\",\"5470\":\"v-86e9843c#32/0\",\"5471\":\"v-86e9843c#32/1\",\"5472\":\"v-86e9843c#32/2\",\"5473\":\"v-86e9843c#32/3\",\"5474\":\"v-86e9843c#32/4\",\"5475\":\"v-86e9843c#32/5\",\"5476\":\"v-86e9843c#32/6\",\"5477\":\"v-86e9843c#32/7\",\"5478\":\"v-86e9843c#33\",\"5479\":\"v-86e9843c#34\",\"5480\":\"v-86e9843c#35\",\"5481\":\"v-86e9843c#36\",\"5482\":\"v-86e9843c#36/0\",\"5483\":\"v-86e9843c#36/1\",\"5484\":\"v-86e9843c#36/2\",\"5485\":\"v-86e9843c#37\",\"5486\":\"v-86e9843c#37/0\",\"5487\":\"v-86e9843c#37/1\",\"5488\":\"v-86e9843c#37/2\",\"5489\":\"v-86e9843c#37/3\",\"5490\":\"v-86e9843c#38\",\"5491\":\"v-86e9843c#39\",\"5492\":\"v-86e9843c#39/0\",\"5493\":\"v-86e9843c#39/1\",\"5494\":\"v-86e9843c#39/2\",\"5495\":\"v-86e9843c#40\",\"5496\":\"v-86e9843c#40/0\",\"5497\":\"v-86e9843c#40/1\",\"5498\":\"v-86e9843c#41\",\"5499\":\"v-86e9843c#41/0\",\"5500\":\"v-86e9843c#42\",\"5501\":\"v-86e9843c#43\",\"5502\":\"v-86e9843c#44\",\"5503\":\"v-86e9843c#44/0\",\"5504\":\"v-86e9843c#45\",\"5505\":\"v-86e9843c#45/0\",\"5506\":\"v-86e9843c#45/1\",\"5507\":\"v-86e9843c#46\",\"5508\":\"v-86e9843c#46/0\",\"5509\":\"v-86e9843c#46/1\",\"5510\":\"v-86e9843c#47\",\"5511\":\"v-86e9843c#47/0\",\"5512\":\"v-86e9843c#47/1\",\"5513\":\"v-86e9843c#47/2\",\"5514\":\"v-86e9843c#47/3\",\"5515\":\"v-86e9843c#47/4\",\"5516\":\"v-86e9843c#48\",\"5517\":\"v-86e9843c#48/0\",\"5518\":\"v-86e9843c#48/1\",\"5519\":\"v-86e9843c#48/2\",\"5520\":\"v-86e9843c#48/3\",\"5521\":\"v-86e9843c#48/4\",\"5522\":\"v-86e9843c#48/5\",\"5523\":\"v-86e9843c#49\",\"5524\":\"v-86e9843c#49/0\",\"5525\":\"v-86e9843c#49/1\",\"5526\":\"v-86e9843c#49/2\",\"5527\":\"v-86e9843c#49/3\",\"5528\":\"v-86e9843c#49/4\",\"5529\":\"v-86e9843c#49/5\",\"5530\":\"v-86e9843c#49/6\",\"5531\":\"v-86e9843c#50\",\"5532\":\"v-86e9843c#50/0\",\"5533\":\"v-86e9843c#50/1\",\"5534\":\"v-692f37ea\",\"5535\":\"v-692f37ea#1\",\"5536\":\"v-692f37ea#2\",\"5537\":\"v-692f37ea#2/0\",\"5538\":\"v-692f37ea#2/1\",\"5539\":\"v-692f37ea#2/2\",\"5540\":\"v-692f37ea#2/3\",\"5541\":\"v-692f37ea#2/4\",\"5542\":\"v-692f37ea#2/5\",\"5543\":\"v-692f37ea#3\",\"5544\":\"v-692f37ea#4\",\"5545\":\"v-692f37ea#4/0\",\"5546\":\"v-692f37ea#4/1\",\"5547\":\"v-692f37ea#4/2\",\"5548\":\"v-692f37ea#4/3\",\"5549\":\"v-692f37ea#4/4\",\"5550\":\"v-692f37ea#4/5\",\"5551\":\"v-692f37ea#4/6\",\"5552\":\"v-692f37ea#4/7\",\"5553\":\"v-692f37ea#4/8\",\"5554\":\"v-692f37ea#4/9\",\"5555\":\"v-692f37ea#4/10\",\"5556\":\"v-692f37ea#4/11\",\"5557\":\"v-692f37ea#4/12\",\"5558\":\"v-692f37ea#4/13\",\"5559\":\"v-692f37ea#4/14\",\"5560\":\"v-692f37ea#5\",\"5561\":\"v-692f37ea#5/0\",\"5562\":\"v-692f37ea#5/1\",\"5563\":\"v-692f37ea#5/2\",\"5564\":\"v-692f37ea#5/3\",\"5565\":\"v-692f37ea#5/4\",\"5566\":\"v-692f37ea#5/5\",\"5567\":\"v-692f37ea#5/6\",\"5568\":\"v-692f37ea#6\",\"5569\":\"v-692f37ea#7\",\"5570\":\"v-692f37ea#7/0\",\"5571\":\"v-692f37ea#7/1\",\"5572\":\"v-692f37ea#7/2\",\"5573\":\"v-692f37ea#7/3\",\"5574\":\"v-692f37ea#7/4\",\"5575\":\"v-692f37ea#7/5\",\"5576\":\"v-692f37ea#7/6\",\"5577\":\"v-692f37ea#7/7\",\"5578\":\"v-692f37ea#7/8\",\"5579\":\"v-692f37ea#7/9\",\"5580\":\"v-692f37ea#7/10\",\"5581\":\"v-692f37ea#8\",\"5582\":\"v-692f37ea#8/0\",\"5583\":\"v-692f37ea#8/1\",\"5584\":\"v-692f37ea#8/2\",\"5585\":\"v-692f37ea#8/3\",\"5586\":\"v-692f37ea#8/4\",\"5587\":\"v-692f37ea#8/5\",\"5588\":\"v-692f37ea#9\",\"5589\":\"v-692f37ea#9/0\",\"5590\":\"v-692f37ea#9/1\",\"5591\":\"v-692f37ea#9/2\",\"5592\":\"v-692f37ea#9/3\",\"5593\":\"v-692f37ea#9/4\",\"5594\":\"v-692f37ea#9/5\",\"5595\":\"v-692f37ea#9/6\",\"5596\":\"v-692f37ea#9/7\",\"5597\":\"v-692f37ea#9/8\",\"5598\":\"v-692f37ea#9/9\",\"5599\":\"v-692f37ea#9/10\",\"5600\":\"v-692f37ea#10\",\"5601\":\"v-692f37ea#10/0\",\"5602\":\"v-692f37ea#10/1\",\"5603\":\"v-692f37ea#10/2\",\"5604\":\"v-692f37ea#10/3\",\"5605\":\"v-692f37ea#10/4\",\"5606\":\"v-692f37ea#10/5\",\"5607\":\"v-692f37ea#10/6\",\"5608\":\"v-692f37ea#10/7\",\"5609\":\"v-692f37ea#10/8\",\"5610\":\"v-692f37ea#10/9\",\"5611\":\"v-692f37ea#10/10\",\"5612\":\"v-692f37ea#10/11\",\"5613\":\"v-692f37ea#10/12\",\"5614\":\"v-692f37ea#10/13\",\"5615\":\"v-692f37ea#10/14\",\"5616\":\"v-692f37ea#10/15\",\"5617\":\"v-692f37ea#10/16\",\"5618\":\"v-692f37ea#10/17\",\"5619\":\"v-692f37ea#10/18\",\"5620\":\"v-692f37ea#10/19\",\"5621\":\"v-692f37ea#10/20\",\"5622\":\"v-692f37ea#10/21\",\"5623\":\"v-692f37ea#10/22\",\"5624\":\"v-692f37ea#10/23\",\"5625\":\"v-692f37ea#10/24\",\"5626\":\"v-692f37ea#10/25\",\"5627\":\"v-692f37ea#10/26\",\"5628\":\"v-692f37ea#10/27\",\"5629\":\"v-692f37ea#10/28\",\"5630\":\"v-692f37ea#11\",\"5631\":\"v-692f37ea#11/0\",\"5632\":\"v-692f37ea#11/1\",\"5633\":\"v-692f37ea#11/2\",\"5634\":\"v-692f37ea#11/3\",\"5635\":\"v-692f37ea#11/4\",\"5636\":\"v-692f37ea#11/5\",\"5637\":\"v-692f37ea#11/6\",\"5638\":\"v-692f37ea#11/7\",\"5639\":\"v-692f37ea#11/8\",\"5640\":\"v-692f37ea#11/9\",\"5641\":\"v-692f37ea#12\",\"5642\":\"v-692f37ea#12/0\",\"5643\":\"v-692f37ea#12/1\",\"5644\":\"v-692f37ea#12/2\",\"5645\":\"v-692f37ea#13\",\"5646\":\"v-692f37ea#13/0\",\"5647\":\"v-692f37ea#13/1\",\"5648\":\"v-692f37ea#13/2\",\"5649\":\"v-692f37ea#13/3\",\"5650\":\"v-692f37ea#13/4\",\"5651\":\"v-692f37ea#13/5\",\"5652\":\"v-692f37ea#14\",\"5653\":\"v-692f37ea#14/6\",\"5654\":\"v-692f37ea#14/7\",\"5655\":\"v-692f37ea#14/8\",\"5656\":\"v-692f37ea#14/9\",\"5657\":\"v-692f37ea#14/10\",\"5658\":\"v-692f37ea#14/11\",\"5659\":\"v-692f37ea#15\",\"5660\":\"v-692f37ea#15/0\",\"5661\":\"v-692f37ea#15/1\",\"5662\":\"v-692f37ea#16\",\"5663\":\"v-692f37ea#17\",\"5664\":\"v-692f37ea#17/2\",\"5665\":\"v-692f37ea#17/3\",\"5666\":\"v-692f37ea#17/4\",\"5667\":\"v-692f37ea#17/5\",\"5668\":\"v-692f37ea#18\",\"5669\":\"v-692f37ea#18/0\",\"5670\":\"v-692f37ea#18/1\",\"5671\":\"v-692f37ea#18/2\",\"5672\":\"v-692f37ea#19\",\"5673\":\"v-692f37ea#19/0\",\"5674\":\"v-692f37ea#19/1\",\"5675\":\"v-692f37ea#19/2\",\"5676\":\"v-692f37ea#19/3\",\"5677\":\"v-692f37ea#19/4\",\"5678\":\"v-692f37ea#19/5\",\"5679\":\"v-692f37ea#19/6\",\"5680\":\"v-692f37ea#19/7\",\"5681\":\"v-692f37ea#19/8\",\"5682\":\"v-692f37ea#19/9\",\"5683\":\"v-692f37ea#19/10\",\"5684\":\"v-692f37ea#19/11\",\"5685\":\"v-692f37ea#20\",\"5686\":\"v-692f37ea#20/0\",\"5687\":\"v-692f37ea#20/1\",\"5688\":\"v-692f37ea#20/2\",\"5689\":\"v-692f37ea#20/3\",\"5690\":\"v-692f37ea#20/4\",\"5691\":\"v-692f37ea#20/5\",\"5692\":\"v-692f37ea#20/6\",\"5693\":\"v-692f37ea#20/7\",\"5694\":\"v-692f37ea#21\",\"5695\":\"v-692f37ea#22\",\"5696\":\"v-692f37ea#22/0\",\"5697\":\"v-692f37ea#22/1\",\"5698\":\"v-692f37ea#22/2\",\"5699\":\"v-692f37ea#22/3\",\"5700\":\"v-692f37ea#22/4\",\"5701\":\"v-692f37ea#22/5\",\"5702\":\"v-692f37ea#23\",\"5703\":\"v-692f37ea#23/0\",\"5704\":\"v-692f37ea#23/1\",\"5705\":\"v-692f37ea#23/2\",\"5706\":\"v-692f37ea#23/3\",\"5707\":\"v-692f37ea#23/4\",\"5708\":\"v-692f37ea#23/5\",\"5709\":\"v-692f37ea#23/6\",\"5710\":\"v-692f37ea#23/7\",\"5711\":\"v-692f37ea#24\",\"5712\":\"v-692f37ea#25\",\"5713\":\"v-692f37ea#25/0\",\"5714\":\"v-692f37ea#26\",\"5715\":\"v-692f37ea#26/0\",\"5716\":\"v-692f37ea#26/1\",\"5717\":\"v-692f37ea#26/2\",\"5718\":\"v-692f37ea#26/3\",\"5719\":\"v-692f37ea#26/4\",\"5720\":\"v-692f37ea#26/5\",\"5721\":\"v-692f37ea#27\",\"5722\":\"v-692f37ea#27/0\",\"5723\":\"v-692f37ea#27/1\",\"5724\":\"v-692f37ea#28\",\"5725\":\"v-692f37ea#28/0\",\"5726\":\"v-692f37ea#28/1\",\"5727\":\"v-692f37ea#28/2\",\"5728\":\"v-692f37ea#28/3\",\"5729\":\"v-692f37ea#28/4\",\"5730\":\"v-692f37ea#28/5\",\"5731\":\"v-692f37ea#28/6\",\"5732\":\"v-692f37ea#28/7\",\"5733\":\"v-692f37ea#28/8\",\"5734\":\"v-692f37ea#28/9\",\"5735\":\"v-73f9cd72\",\"5736\":\"v-73f9cd72#1\",\"5737\":\"v-73f9cd72#2\",\"5738\":\"v-73f9cd72#3\",\"5739\":\"v-73f9cd72#4\",\"5740\":\"v-73f9cd72#5\",\"5741\":\"v-73f9cd72#5/0\",\"5742\":\"v-63f5528d\",\"5743\":\"v-63f5528d#1\",\"5744\":\"v-63f5528d#2\",\"5745\":\"v-63f5528d#3\",\"5746\":\"v-63f5528d#3/0\",\"5747\":\"v-63f5528d#4\",\"5748\":\"v-63f5528d#4/0\",\"5749\":\"v-63f5528d#5\",\"5750\":\"v-63f5528d#5/0\",\"5751\":\"v-63f5528d#6\",\"5752\":\"v-63f5528d#6/0\",\"5753\":\"v-63f5528d#6/1\",\"5754\":\"v-63f5528d#6/2\",\"5755\":\"v-63f5528d#6/3\",\"5756\":\"v-63f5528d#6/4\",\"5757\":\"v-63f5528d#6/5\",\"5758\":\"v-63f5528d#6/6\",\"5759\":\"v-63f5528d#6/7\",\"5760\":\"v-63f5528d#6/8\",\"5761\":\"v-63f5528d#7\",\"5762\":\"v-63f5528d#7/0\",\"5763\":\"v-63f5528d#7/1\",\"5764\":\"v-63f5528d#8\",\"5765\":\"v-63f5528d#8/2\",\"5766\":\"v-63f5528d#9\",\"5767\":\"v-63f5528d#9/0\",\"5768\":\"v-63f5528d#10\",\"5769\":\"v-63f5528d#10/0\",\"5770\":\"v-63f5528d#11\",\"5771\":\"v-63f5528d#11/0\",\"5772\":\"v-63f5528d#12\",\"5773\":\"v-63f5528d#12/0\",\"5774\":\"v-63f5528d#12/1\",\"5775\":\"v-63f5528d#13\",\"5776\":\"v-63f5528d#13/0\",\"5777\":\"v-63f5528d#13/1\",\"5778\":\"v-63f5528d#13/2\",\"5779\":\"v-63f5528d#13/3\",\"5780\":\"v-63f5528d#13/4\",\"5781\":\"v-63f5528d#13/5\",\"5782\":\"v-63f5528d#14\",\"5783\":\"v-63f5528d#14/0\",\"5784\":\"v-63f5528d#15\",\"5785\":\"v-63f5528d#15/0\",\"5786\":\"v-13d681f6\",\"5787\":\"v-13d681f6#1\",\"5788\":\"v-13d681f6#2\",\"5789\":\"v-13d681f6#2/0\",\"5790\":\"v-13d681f6#2/1\",\"5791\":\"v-13d681f6#2/2\",\"5792\":\"v-13d681f6#2/3\",\"5793\":\"v-13d681f6#2/4\",\"5794\":\"v-13d681f6#2/5\",\"5795\":\"v-13d681f6#3\",\"5796\":\"v-13d681f6#3/0\",\"5797\":\"v-13d681f6#3/1\",\"5798\":\"v-13d681f6#3/2\",\"5799\":\"v-13d681f6#3/3\",\"5800\":\"v-13d681f6#3/4\",\"5801\":\"v-13d681f6#3/5\",\"5802\":\"v-13d681f6#4\",\"5803\":\"v-13d681f6#4/0\",\"5804\":\"v-13d681f6#5\",\"5805\":\"v-13d681f6#5/0\",\"5806\":\"v-13d681f6#6\",\"5807\":\"v-13d681f6#6/0\",\"5808\":\"v-13d681f6#6/1\",\"5809\":\"v-13d681f6#6/2\",\"5810\":\"v-13d681f6#6/3\",\"5811\":\"v-13d681f6#6/4\",\"5812\":\"v-13d681f6#7\",\"5813\":\"v-13d681f6#7/0\",\"5814\":\"v-13d681f6#7/1\",\"5815\":\"v-13d681f6#7/2\",\"5816\":\"v-13d681f6#7/3\",\"5817\":\"v-13d681f6#8\",\"5818\":\"v-13d681f6#8/0\",\"5819\":\"v-13d681f6#8/1\",\"5820\":\"v-13d681f6#9\",\"5821\":\"v-13d681f6#9/0\",\"5822\":\"v-13d681f6#9/1\",\"5823\":\"v-13d681f6#10\",\"5824\":\"v-13d681f6#10/0\",\"5825\":\"v-13d681f6#10/1\",\"5826\":\"v-13d681f6#10/2\",\"5827\":\"v-13d681f6#10/3\",\"5828\":\"v-13d681f6#10/4\",\"5829\":\"v-13d681f6#11\",\"5830\":\"v-13d681f6#11/0\",\"5831\":\"v-13d681f6#11/1\",\"5832\":\"v-13d681f6#11/2\",\"5833\":\"v-13d681f6#11/3\",\"5834\":\"v-13d681f6#11/4\",\"5835\":\"v-13d681f6#11/5\",\"5836\":\"v-13d681f6#11/6\",\"5837\":\"v-13d681f6#11/7\",\"5838\":\"v-13d681f6#11/8\",\"5839\":\"v-13d681f6#11/9\",\"5840\":\"v-13d681f6#11/10\",\"5841\":\"v-13d681f6#11/11\",\"5842\":\"v-13d681f6#11/12\",\"5843\":\"v-13d681f6#11/13\",\"5844\":\"v-13d681f6#11/14\",\"5845\":\"v-13d681f6#12\",\"5846\":\"v-13d681f6#12/0\",\"5847\":\"v-13d681f6#12/1\",\"5848\":\"v-13d681f6#12/2\",\"5849\":\"v-13d681f6#12/3\",\"5850\":\"v-13d681f6#13\",\"5851\":\"v-13d681f6#13/0\",\"5852\":\"v-13d681f6#13/1\",\"5853\":\"v-13d681f6#14\",\"5854\":\"v-13d681f6#14/0\",\"5855\":\"v-13d681f6#14/1\",\"5856\":\"v-13d681f6#14/2\",\"5857\":\"v-13d681f6#14/3\",\"5858\":\"v-13d681f6#14/4\",\"5859\":\"v-13d681f6#14/5\",\"5860\":\"v-13d681f6#15\",\"5861\":\"v-13d681f6#15/0\",\"5862\":\"v-13d681f6#15/1\",\"5863\":\"v-13d681f6#16\",\"5864\":\"v-13d681f6#16/0\",\"5865\":\"v-13d681f6#16/1\",\"5866\":\"v-13d681f6#16/2\",\"5867\":\"v-13d681f6#17\",\"5868\":\"v-13d681f6#17/0\",\"5869\":\"v-13d681f6#17/1\",\"5870\":\"v-13d681f6#17/2\",\"5871\":\"v-13d681f6#18\",\"5872\":\"v-13d681f6#18/0\",\"5873\":\"v-13d681f6#19\",\"5874\":\"v-13d681f6#19/0\",\"5875\":\"v-13d681f6#20\",\"5876\":\"v-13d681f6#20/0\",\"5877\":\"v-13d681f6#20/1\",\"5878\":\"v-13d681f6#20/2\",\"5879\":\"v-13d681f6#20/3\",\"5880\":\"v-13d681f6#21\",\"5881\":\"v-13d681f6#21/0\",\"5882\":\"v-13d681f6#21/1\",\"5883\":\"v-13d681f6#21/2\",\"5884\":\"v-13d681f6#21/3\",\"5885\":\"v-13d681f6#21/4\",\"5886\":\"v-13d681f6#21/5\",\"5887\":\"v-13d681f6#21/6\",\"5888\":\"v-13d681f6#21/7\",\"5889\":\"v-13d681f6#22\",\"5890\":\"v-13d681f6#22/0\",\"5891\":\"v-13d681f6#22/1\",\"5892\":\"v-13d681f6#22/2\",\"5893\":\"v-13d681f6#22/3\",\"5894\":\"v-13d681f6#23\",\"5895\":\"v-13d681f6#23/0\",\"5896\":\"v-13d681f6#23/1\",\"5897\":\"v-13d681f6#23/2\",\"5898\":\"v-13d681f6#23/3\",\"5899\":\"v-13d681f6#23/4\",\"5900\":\"v-13d681f6#23/5\",\"5901\":\"v-13d681f6#24\",\"5902\":\"v-13d681f6#24/0\",\"5903\":\"v-13d681f6#25\",\"5904\":\"v-13d681f6#26\",\"5905\":\"v-13d681f6#26/0\",\"5906\":\"v-13d681f6#26/1\",\"5907\":\"v-13d681f6#26/2\",\"5908\":\"v-13d681f6#26/3\",\"5909\":\"v-13d681f6#26/4\",\"5910\":\"v-13d681f6#27\",\"5911\":\"v-13d681f6#27/0\",\"5912\":\"v-13d681f6#27/1\",\"5913\":\"v-13d681f6#28\",\"5914\":\"v-13d681f6#28/0\",\"5915\":\"v-13d681f6#28/1\",\"5916\":\"v-13d681f6#28/2\",\"5917\":\"v-13d681f6#28/3\",\"5918\":\"v-13d681f6#28/4\",\"5919\":\"v-13d681f6#28/5\",\"5920\":\"v-13d681f6#28/6\",\"5921\":\"v-13d681f6#28/7\",\"5922\":\"v-13d681f6#28/8\",\"5923\":\"v-13d681f6#28/9\",\"5924\":\"v-13d681f6#28/10\",\"5925\":\"v-13d681f6#28/11\",\"5926\":\"v-13d681f6#28/12\",\"5927\":\"v-13d681f6#29\",\"5928\":\"v-13d681f6#29/0\",\"5929\":\"v-13d681f6#29/1\",\"5930\":\"v-13d681f6#30\",\"5931\":\"v-13d681f6#31\",\"5932\":\"v-13d681f6#31/0\",\"5933\":\"v-13d681f6#32\",\"5934\":\"v-13d681f6#32/0\",\"5935\":\"v-13d681f6#33\",\"5936\":\"v-13d681f6#33/0\",\"5937\":\"v-13d681f6#33/1\",\"5938\":\"v-13d681f6#33/2\",\"5939\":\"v-13d681f6#34\",\"5940\":\"v-13d681f6#34/0\",\"5941\":\"v-13d681f6#34/1\",\"5942\":\"v-13d681f6#34/2\",\"5943\":\"v-13d681f6#34/3\",\"5944\":\"v-13d681f6#35\",\"5945\":\"v-13d681f6#35/0\",\"5946\":\"v-13d681f6#35/1\",\"5947\":\"v-13d681f6#35/2\",\"5948\":\"v-13d681f6#36\",\"5949\":\"v-13d681f6#36/0\",\"5950\":\"v-13d681f6#36/1\",\"5951\":\"v-13d681f6#37\",\"5952\":\"v-13d681f6#37/0\",\"5953\":\"v-13d681f6#37/1\",\"5954\":\"v-13d681f6#38\",\"5955\":\"v-13d681f6#38/0\",\"5956\":\"v-13d681f6#38/1\",\"5957\":\"v-13d681f6#38/2\",\"5958\":\"v-13d681f6#38/3\",\"5959\":\"v-13d681f6#38/4\",\"5960\":\"v-13d681f6#38/5\",\"5961\":\"v-13d681f6#38/6\",\"5962\":\"v-13d681f6#38/7\",\"5963\":\"v-13d681f6#38/8\",\"5964\":\"v-13d681f6#39\",\"5965\":\"v-13d681f6#40\",\"5966\":\"v-13d681f6#40/0\",\"5967\":\"v-13d681f6#40/1\",\"5968\":\"v-13d681f6#40/2\",\"5969\":\"v-13d681f6#40/3\",\"5970\":\"v-13d681f6#40/4\",\"5971\":\"v-13d681f6#40/5\",\"5972\":\"v-13d681f6#40/6\",\"5973\":\"v-13d681f6#40/7\",\"5974\":\"v-13d681f6#40/8\",\"5975\":\"v-13d681f6#40/9\",\"5976\":\"v-13d681f6#41\",\"5977\":\"v-13d681f6#41/0\",\"5978\":\"v-13d681f6#41/1\",\"5979\":\"v-13d681f6#41/2\",\"5980\":\"v-13d681f6#41/3\",\"5981\":\"v-13d681f6#42\",\"5982\":\"v-13d681f6#42/0\",\"5983\":\"v-13d681f6#42/1\",\"5984\":\"v-13d681f6#42/2\",\"5985\":\"v-13d681f6#42/3\",\"5986\":\"v-13d681f6#43\",\"5987\":\"v-13d681f6#44\",\"5988\":\"v-13d681f6#44/0\",\"5989\":\"v-13d681f6#44/1\",\"5990\":\"v-13d681f6#44/2\",\"5991\":\"v-13d681f6#45\",\"5992\":\"v-13d681f6#45/0\",\"5993\":\"v-13d681f6#45/1\",\"5994\":\"v-13d681f6#45/2\",\"5995\":\"v-13d681f6#45/3\",\"5996\":\"v-13d681f6#45/4\",\"5997\":\"v-13d681f6#45/5\",\"5998\":\"v-13d681f6#45/6\",\"5999\":\"v-13d681f6#45/7\",\"6000\":\"v-13d681f6#45/8\",\"6001\":\"v-13d681f6#46\",\"6002\":\"v-13d681f6#47\",\"6003\":\"v-13d681f6#47/0\",\"6004\":\"v-13d681f6#47/1\",\"6005\":\"v-13d681f6#47/2\",\"6006\":\"v-13d681f6#47/3\",\"6007\":\"v-13d681f6#48\",\"6008\":\"v-13d681f6#48/0\",\"6009\":\"v-13d681f6#48/1\",\"6010\":\"v-13d681f6#48/2\",\"6011\":\"v-13d681f6#48/3\",\"6012\":\"v-13d681f6#48/4\",\"6013\":\"v-13d681f6#48/5\",\"6014\":\"v-13d681f6#48/6\",\"6015\":\"v-13d681f6#48/7\",\"6016\":\"v-13d681f6#48/8\",\"6017\":\"v-13d681f6#48/9\",\"6018\":\"v-13d681f6#48/10\",\"6019\":\"v-13d681f6#48/11\",\"6020\":\"v-13d681f6#48/12\",\"6021\":\"v-13d681f6#48/13\",\"6022\":\"v-13d681f6#48/14\",\"6023\":\"v-13d681f6#48/15\",\"6024\":\"v-13d681f6#48/16\",\"6025\":\"v-13d681f6#48/17\",\"6026\":\"v-13d681f6#48/18\",\"6027\":\"v-13d681f6#48/19\",\"6028\":\"v-13d681f6#48/20\",\"6029\":\"v-13d681f6#48/21\",\"6030\":\"v-13d681f6#48/22\",\"6031\":\"v-13d681f6#48/23\",\"6032\":\"v-13d681f6#48/24\",\"6033\":\"v-13d681f6#48/25\",\"6034\":\"v-13d681f6#48/26\",\"6035\":\"v-13d681f6#48/27\",\"6036\":\"v-13d681f6#48/28\",\"6037\":\"v-13d681f6#48/29\",\"6038\":\"v-13d681f6#48/30\",\"6039\":\"v-13d681f6#48/31\",\"6040\":\"v-13d681f6#48/32\",\"6041\":\"v-13d681f6#48/33\",\"6042\":\"v-13d681f6#48/34\",\"6043\":\"v-13d681f6#48/35\",\"6044\":\"v-13d681f6#48/36\",\"6045\":\"v-13d681f6#48/37\",\"6046\":\"v-13d681f6#48/38\",\"6047\":\"v-13d681f6#48/39\",\"6048\":\"v-13d681f6#48/40\",\"6049\":\"v-13d681f6#48/41\",\"6050\":\"v-13d681f6#48/42\",\"6051\":\"v-13d681f6#48/43\",\"6052\":\"v-13d681f6#49\",\"6053\":\"v-13d681f6#49/0\",\"6054\":\"v-13d681f6#49/1\",\"6055\":\"v-13d681f6#49/2\",\"6056\":\"v-13d681f6#49/3\",\"6057\":\"v-13d681f6#49/4\",\"6058\":\"v-13d681f6#49/5\",\"6059\":\"v-13d681f6#49/6\",\"6060\":\"v-13d681f6#49/7\",\"6061\":\"v-13d681f6#50\",\"6062\":\"v-13d681f6#50/0\",\"6063\":\"v-13d681f6#50/1\",\"6064\":\"v-13d681f6#50/2\",\"6065\":\"v-13d681f6#50/3\",\"6066\":\"v-13d681f6#50/4\",\"6067\":\"v-13d681f6#50/5\",\"6068\":\"v-13d681f6#50/6\",\"6069\":\"v-13d681f6#50/7\",\"6070\":\"v-13d681f6#50/8\",\"6071\":\"v-13d681f6#50/9\",\"6072\":\"v-13d681f6#50/10\",\"6073\":\"v-13d681f6#50/11\",\"6074\":\"v-13d681f6#50/12\",\"6075\":\"v-709b2df2\",\"6076\":\"v-709b2df2#1\",\"6077\":\"v-709b2df2#2\",\"6078\":\"v-709b2df2#2/0\",\"6079\":\"v-709b2df2#2/1\",\"6080\":\"v-709b2df2#2/2\",\"6081\":\"v-709b2df2#2/3\",\"6082\":\"v-709b2df2#3\",\"6083\":\"v-709b2df2#3/0\",\"6084\":\"v-709b2df2#3/1\",\"6085\":\"v-709b2df2#3/2\",\"6086\":\"v-709b2df2#3/3\",\"6087\":\"v-709b2df2#3/4\",\"6088\":\"v-709b2df2#3/5\",\"6089\":\"v-709b2df2#3/6\",\"6090\":\"v-709b2df2#3/7\",\"6091\":\"v-709b2df2#3/8\",\"6092\":\"v-709b2df2#4\",\"6093\":\"v-54b55293\",\"6094\":\"v-54b55293#1\",\"6095\":\"v-54b55293#2\",\"6096\":\"v-54b55293#2/0\",\"6097\":\"v-54b55293#3\",\"6098\":\"v-54b55293#3/0\",\"6099\":\"v-54b55293#3/1\",\"6100\":\"v-54b55293#3/2\",\"6101\":\"v-54b55293#3/3\",\"6102\":\"v-54b55293#3/4\",\"6103\":\"v-54b55293#3/5\",\"6104\":\"v-54b55293#3/6\",\"6105\":\"v-54b55293#3/7\",\"6106\":\"v-54b55293#3/8\",\"6107\":\"v-54b55293#3/9\",\"6108\":\"v-54b55293#3/10\",\"6109\":\"v-54b55293#3/11\",\"6110\":\"v-54b55293#3/12\",\"6111\":\"v-54b55293#3/13\",\"6112\":\"v-54b55293#3/14\",\"6113\":\"v-54b55293#3/15\",\"6114\":\"v-54b55293#3/16\",\"6115\":\"v-54b55293#3/17\",\"6116\":\"v-54b55293#3/18\",\"6117\":\"v-54b55293#3/19\",\"6118\":\"v-54b55293#3/20\",\"6119\":\"v-54b55293#3/21\",\"6120\":\"v-54b55293#4\",\"6121\":\"v-54b55293#4/0\",\"6122\":\"v-54b55293#4/1\",\"6123\":\"v-54b55293#4/2\",\"6124\":\"v-54b55293#4/3\",\"6125\":\"v-54b55293#4/4\",\"6126\":\"v-54b55293#4/5\",\"6127\":\"v-54b55293#4/6\",\"6128\":\"v-54b55293#4/7\",\"6129\":\"v-54b55293#4/8\",\"6130\":\"v-54b55293#4/9\",\"6131\":\"v-54b55293#4/10\",\"6132\":\"v-54b55293#4/11\",\"6133\":\"v-54b55293#4/12\",\"6134\":\"v-54b55293#4/13\",\"6135\":\"v-54b55293#4/14\",\"6136\":\"v-54b55293#4/15\",\"6137\":\"v-54b55293#4/16\",\"6138\":\"v-54b55293#4/17\",\"6139\":\"v-54b55293#4/18\",\"6140\":\"v-54b55293#4/19\",\"6141\":\"v-54b55293#4/20\",\"6142\":\"v-54b55293#4/21\",\"6143\":\"v-54b55293#4/22\",\"6144\":\"v-54b55293#4/23\",\"6145\":\"v-54b55293#4/24\",\"6146\":\"v-54b55293#4/25\",\"6147\":\"v-54b55293#4/26\",\"6148\":\"v-54b55293#4/27\",\"6149\":\"v-54b55293#4/28\",\"6150\":\"v-54b55293#5\",\"6151\":\"v-54b55293#5/0\",\"6152\":\"v-54b55293#5/1\",\"6153\":\"v-54b55293#5/2\",\"6154\":\"v-54b55293#5/3\",\"6155\":\"v-54b55293#5/4\",\"6156\":\"v-4397b9d8\",\"6157\":\"v-4397b9d8#1\",\"6158\":\"v-4397b9d8#2\",\"6159\":\"v-4397b9d8#2/0\",\"6160\":\"v-4397b9d8#2/1\",\"6161\":\"v-4397b9d8#2/2\",\"6162\":\"v-4397b9d8#2/3\",\"6163\":\"v-4397b9d8#2/4\",\"6164\":\"v-4397b9d8#3\",\"6165\":\"v-4397b9d8#4\",\"6166\":\"v-4397b9d8#4/0\",\"6167\":\"v-4397b9d8#5\",\"6168\":\"v-4397b9d8#5/0\",\"6169\":\"v-4397b9d8#5/1\",\"6170\":\"v-4397b9d8#5/2\",\"6171\":\"v-4397b9d8#6\",\"6172\":\"v-4397b9d8#6/0\",\"6173\":\"v-4397b9d8#7\",\"6174\":\"v-4397b9d8#7/0\",\"6175\":\"v-4397b9d8#7/1\",\"6176\":\"v-4397b9d8#7/2\",\"6177\":\"v-4397b9d8#7/3\",\"6178\":\"v-4397b9d8#7/4\",\"6179\":\"v-4397b9d8#8\",\"6180\":\"v-4397b9d8#8/0\",\"6181\":\"v-4397b9d8#8/1\",\"6182\":\"v-4397b9d8#8/2\",\"6183\":\"v-4397b9d8#8/3\",\"6184\":\"v-4397b9d8#8/4\",\"6185\":\"v-4397b9d8#9\",\"6186\":\"v-4397b9d8#9/0\",\"6187\":\"v-4397b9d8#9/1\",\"6188\":\"v-4397b9d8#9/2\",\"6189\":\"v-4397b9d8#9/3\",\"6190\":\"v-4397b9d8#9/4\",\"6191\":\"v-4397b9d8#9/5\",\"6192\":\"v-4397b9d8#9/6\",\"6193\":\"v-4397b9d8#9/7\",\"6194\":\"v-4397b9d8#9/8\",\"6195\":\"v-4397b9d8#9/9\",\"6196\":\"v-4397b9d8#9/10\",\"6197\":\"v-4397b9d8#9/11\",\"6198\":\"v-4397b9d8#9/12\",\"6199\":\"v-4397b9d8#9/13\",\"6200\":\"v-4397b9d8#9/14\",\"6201\":\"v-4397b9d8#9/15\",\"6202\":\"v-4397b9d8#9/16\",\"6203\":\"v-4397b9d8#9/17\",\"6204\":\"v-4397b9d8#9/18\",\"6205\":\"v-4397b9d8#9/19\",\"6206\":\"v-4397b9d8#9/20\",\"6207\":\"v-4397b9d8#10\",\"6208\":\"v-4397b9d8#11\",\"6209\":\"v-4397b9d8#11/0\",\"6210\":\"v-4397b9d8#11/1\",\"6211\":\"v-4397b9d8#11/2\",\"6212\":\"v-4397b9d8#11/3\",\"6213\":\"v-4397b9d8#11/4\",\"6214\":\"v-4397b9d8#11/5\",\"6215\":\"v-4397b9d8#11/6\",\"6216\":\"v-4397b9d8#11/7\",\"6217\":\"v-4397b9d8#12\",\"6218\":\"v-4397b9d8#12/0\",\"6219\":\"v-4397b9d8#12/1\",\"6220\":\"v-4397b9d8#12/2\",\"6221\":\"v-4397b9d8#12/3\",\"6222\":\"v-4397b9d8#12/4\",\"6223\":\"v-4397b9d8#12/5\",\"6224\":\"v-4397b9d8#12/6\",\"6225\":\"v-6e0208bc\",\"6226\":\"v-6e0208bc#1\",\"6227\":\"v-6e0208bc#2\",\"6228\":\"v-6e0208bc#3\",\"6229\":\"v-6e0208bc#3/0\",\"6230\":\"v-6e0208bc#3/1\",\"6231\":\"v-6e0208bc#3/2\",\"6232\":\"v-6e0208bc#3/3\",\"6233\":\"v-6e0208bc#3/4\",\"6234\":\"v-6e0208bc#3/5\",\"6235\":\"v-6e0208bc#4\",\"6236\":\"v-6e0208bc#5\",\"6237\":\"v-6e0208bc#5/0\",\"6238\":\"v-6e0208bc#5/1\",\"6239\":\"v-6e0208bc#5/2\",\"6240\":\"v-6e0208bc#5/3\",\"6241\":\"v-6e0208bc#5/4\",\"6242\":\"v-6e0208bc#5/5\",\"6243\":\"v-6e0208bc#5/6\",\"6244\":\"v-6e0208bc#5/7\",\"6245\":\"v-6e0208bc#5/8\",\"6246\":\"v-6e0208bc#5/9\",\"6247\":\"v-6e0208bc#5/10\",\"6248\":\"v-6e0208bc#5/11\",\"6249\":\"v-6e0208bc#6\",\"6250\":\"v-6e0208bc#6/0\",\"6251\":\"v-6e0208bc#6/1\",\"6252\":\"v-6e0208bc#6/2\",\"6253\":\"v-6e0208bc#6/3\",\"6254\":\"v-6e0208bc#6/4\",\"6255\":\"v-6e0208bc#6/5\",\"6256\":\"v-6e0208bc#6/6\",\"6257\":\"v-6e0208bc#7\",\"6258\":\"v-6e0208bc#8\",\"6259\":\"v-6e0208bc#8/0\",\"6260\":\"v-6e0208bc#8/1\",\"6261\":\"v-6e0208bc#8/2\",\"6262\":\"v-6e0208bc#8/3\",\"6263\":\"v-6e0208bc#9\",\"6264\":\"v-6e0208bc#9/0\",\"6265\":\"v-6e0208bc#9/1\",\"6266\":\"v-6e0208bc#9/2\",\"6267\":\"v-6e0208bc#9/3\",\"6268\":\"v-6e0208bc#9/4\",\"6269\":\"v-6e0208bc#9/5\",\"6270\":\"v-6e0208bc#9/6\",\"6271\":\"v-6e0208bc#9/7\",\"6272\":\"v-6e0208bc#9/8\",\"6273\":\"v-6e0208bc#9/9\",\"6274\":\"v-6e0208bc#9/10\",\"6275\":\"v-6e0208bc#9/11\",\"6276\":\"v-6e0208bc#9/12\",\"6277\":\"v-6e0208bc#9/13\",\"6278\":\"v-6e0208bc#9/14\",\"6279\":\"v-6e0208bc#9/15\",\"6280\":\"v-6e0208bc#9/16\",\"6281\":\"v-6e0208bc#9/17\",\"6282\":\"v-6e0208bc#9/18\",\"6283\":\"v-6e0208bc#9/19\",\"6284\":\"v-6e0208bc#10\",\"6285\":\"v-6e0208bc#10/0\",\"6286\":\"v-6e0208bc#10/1\",\"6287\":\"v-6e0208bc#10/2\",\"6288\":\"v-6e0208bc#10/3\",\"6289\":\"v-6e0208bc#11\",\"6290\":\"v-6e0208bc#11/0\",\"6291\":\"v-6e0208bc#11/1\",\"6292\":\"v-6e0208bc#11/2\",\"6293\":\"v-6e0208bc#11/3\",\"6294\":\"v-6e0208bc#11/4\",\"6295\":\"v-6e0208bc#11/5\",\"6296\":\"v-6e0208bc#11/6\",\"6297\":\"v-6e0208bc#11/7\",\"6298\":\"v-6e0208bc#11/8\",\"6299\":\"v-6e0208bc#11/9\",\"6300\":\"v-6e0208bc#12\",\"6301\":\"v-6e0208bc#12/0\",\"6302\":\"v-6e0208bc#12/1\",\"6303\":\"v-6e0208bc#12/2\",\"6304\":\"v-6e0208bc#12/3\",\"6305\":\"v-6e0208bc#12/4\",\"6306\":\"v-6e0208bc#12/5\",\"6307\":\"v-6e0208bc#12/6\",\"6308\":\"v-6e0208bc#12/7\",\"6309\":\"v-6e0208bc#12/8\",\"6310\":\"v-6e0208bc#12/9\",\"6311\":\"v-6e0208bc#12/10\",\"6312\":\"v-6e0208bc#12/11\",\"6313\":\"v-6e0208bc#12/12\",\"6314\":\"v-6e0208bc#12/13\",\"6315\":\"v-6e0208bc#12/14\",\"6316\":\"v-6e0208bc#13\",\"6317\":\"v-6e0208bc#13/0\",\"6318\":\"v-6e0208bc#13/1\",\"6319\":\"v-6e0208bc#13/2\",\"6320\":\"v-6e0208bc#14\",\"6321\":\"v-6e0208bc#14/0\",\"6322\":\"v-6e0208bc#14/1\",\"6323\":\"v-6e0208bc#14/2\",\"6324\":\"v-6e0208bc#14/3\",\"6325\":\"v-6e0208bc#14/4\",\"6326\":\"v-6e0208bc#14/5\",\"6327\":\"v-6e0208bc#14/6\",\"6328\":\"v-6e0208bc#14/7\",\"6329\":\"v-6e0208bc#14/8\",\"6330\":\"v-6e0208bc#14/9\",\"6331\":\"v-6e0208bc#14/10\",\"6332\":\"v-6e0208bc#14/11\",\"6333\":\"v-6e0208bc#14/12\",\"6334\":\"v-6e0208bc#14/13\",\"6335\":\"v-6e0208bc#14/14\",\"6336\":\"v-6e0208bc#14/15\",\"6337\":\"v-6e0208bc#14/16\",\"6338\":\"v-6e0208bc#14/17\",\"6339\":\"v-6e0208bc#14/18\",\"6340\":\"v-6e0208bc#14/19\",\"6341\":\"v-6e0208bc#15\",\"6342\":\"v-6e0208bc#15/0\",\"6343\":\"v-6e0208bc#15/1\",\"6344\":\"v-6e0208bc#15/2\",\"6345\":\"v-6e0208bc#15/3\",\"6346\":\"v-6e0208bc#15/4\",\"6347\":\"v-6e0208bc#15/5\",\"6348\":\"v-6e0208bc#15/6\",\"6349\":\"v-6e0208bc#15/7\",\"6350\":\"v-6e0208bc#15/8\",\"6351\":\"v-6e0208bc#15/9\",\"6352\":\"v-6e0208bc#15/10\",\"6353\":\"v-6e0208bc#15/11\",\"6354\":\"v-6e0208bc#15/12\",\"6355\":\"v-6e0208bc#15/13\",\"6356\":\"v-6e0208bc#15/14\",\"6357\":\"v-6e0208bc#15/15\",\"6358\":\"v-6e0208bc#15/16\",\"6359\":\"v-6e0208bc#15/17\",\"6360\":\"v-6e0208bc#15/18\",\"6361\":\"v-6e0208bc#15/19\",\"6362\":\"v-6e0208bc#16\",\"6363\":\"v-6e0208bc#16/0\",\"6364\":\"v-6e0208bc#16/1\",\"6365\":\"v-6e0208bc#16/2\",\"6366\":\"v-6e0208bc#16/3\",\"6367\":\"v-6e0208bc#16/4\",\"6368\":\"v-6e0208bc#16/5\",\"6369\":\"v-6e0208bc#16/6\",\"6370\":\"v-6e0208bc#16/7\",\"6371\":\"v-6e0208bc#16/8\",\"6372\":\"v-6e0208bc#16/9\",\"6373\":\"v-6e0208bc#16/10\",\"6374\":\"v-6e0208bc#16/11\",\"6375\":\"v-6e0208bc#16/12\",\"6376\":\"v-6e0208bc#16/13\",\"6377\":\"v-6e0208bc#16/14\",\"6378\":\"v-6e0208bc#16/15\",\"6379\":\"v-6e0208bc#16/16\",\"6380\":\"v-6e0208bc#17\",\"6381\":\"v-6e0208bc#17/0\",\"6382\":\"v-6e0208bc#17/1\",\"6383\":\"v-6e0208bc#17/2\",\"6384\":\"v-6e0208bc#17/3\",\"6385\":\"v-6e0208bc#17/4\",\"6386\":\"v-6e0208bc#17/5\",\"6387\":\"v-6e0208bc#17/6\",\"6388\":\"v-6e0208bc#17/7\",\"6389\":\"v-6e0208bc#17/8\",\"6390\":\"v-6e0208bc#17/9\",\"6391\":\"v-6e0208bc#17/10\",\"6392\":\"v-6e0208bc#17/11\",\"6393\":\"v-4115de74\",\"6394\":\"v-4115de74#1\",\"6395\":\"v-4115de74#2\",\"6396\":\"v-4115de74#3\",\"6397\":\"v-4115de74#3/0\",\"6398\":\"v-4115de74#3/1\",\"6399\":\"v-4115de74#3/2\",\"6400\":\"v-4115de74#3/3\",\"6401\":\"v-4115de74#3/4\",\"6402\":\"v-4115de74#3/5\",\"6403\":\"v-4115de74#3/6\",\"6404\":\"v-4115de74#3/7\",\"6405\":\"v-4115de74#3/8\",\"6406\":\"v-4115de74#3/9\",\"6407\":\"v-4115de74#3/10\",\"6408\":\"v-4115de74#3/11\",\"6409\":\"v-4115de74#3/12\",\"6410\":\"v-4115de74#3/13\",\"6411\":\"v-4115de74#3/14\",\"6412\":\"v-4115de74#3/15\",\"6413\":\"v-4115de74#3/16\",\"6414\":\"v-4115de74#3/17\",\"6415\":\"v-4115de74#3/18\",\"6416\":\"v-4115de74#3/19\",\"6417\":\"v-4115de74#3/20\",\"6418\":\"v-4115de74#3/21\",\"6419\":\"v-4115de74#3/22\",\"6420\":\"v-4115de74#4\",\"6421\":\"v-4115de74#4/0\",\"6422\":\"v-4115de74#5\",\"6423\":\"v-4115de74#5/0\",\"6424\":\"v-4115de74#5/1\",\"6425\":\"v-4115de74#5/2\",\"6426\":\"v-4115de74#5/3\",\"6427\":\"v-4115de74#5/4\",\"6428\":\"v-4115de74#5/5\",\"6429\":\"v-4115de74#5/6\",\"6430\":\"v-4115de74#5/7\",\"6431\":\"v-4115de74#5/8\",\"6432\":\"v-4115de74#5/9\",\"6433\":\"v-4115de74#5/10\",\"6434\":\"v-4115de74#5/11\",\"6435\":\"v-4115de74#5/12\",\"6436\":\"v-4115de74#5/13\",\"6437\":\"v-4115de74#6\",\"6438\":\"v-4115de74#6/0\",\"6439\":\"v-4115de74#6/1\",\"6440\":\"v-4115de74#6/2\",\"6441\":\"v-4115de74#6/3\",\"6442\":\"v-4115de74#6/4\",\"6443\":\"v-4115de74#6/5\",\"6444\":\"v-4115de74#6/6\",\"6445\":\"v-4115de74#6/7\",\"6446\":\"v-4115de74#6/8\",\"6447\":\"v-4115de74#6/9\",\"6448\":\"v-4115de74#6/10\",\"6449\":\"v-4115de74#6/11\",\"6450\":\"v-4115de74#6/12\",\"6451\":\"v-4115de74#6/13\",\"6452\":\"v-4115de74#6/14\",\"6453\":\"v-4115de74#7\",\"6454\":\"v-4115de74#7/0\",\"6455\":\"v-4115de74#7/1\",\"6456\":\"v-4115de74#7/2\",\"6457\":\"v-4115de74#7/3\",\"6458\":\"v-4115de74#8\",\"6459\":\"v-4115de74#8/0\",\"6460\":\"v-4115de74#8/1\",\"6461\":\"v-4115de74#8/2\",\"6462\":\"v-4115de74#8/3\",\"6463\":\"v-4115de74#8/4\",\"6464\":\"v-4115de74#8/5\",\"6465\":\"v-4115de74#8/6\",\"6466\":\"v-4115de74#8/7\",\"6467\":\"v-4115de74#9\",\"6468\":\"v-4115de74#9/0\",\"6469\":\"v-4115de74#9/1\",\"6470\":\"v-4115de74#9/2\",\"6471\":\"v-4115de74#9/3\",\"6472\":\"v-4115de74#9/4\",\"6473\":\"v-4115de74#9/5\",\"6474\":\"v-4115de74#9/6\",\"6475\":\"v-4115de74#9/7\",\"6476\":\"v-4115de74#10\",\"6477\":\"v-4115de74#10/0\",\"6478\":\"v-4115de74#10/1\",\"6479\":\"v-4115de74#10/2\",\"6480\":\"v-4115de74#10/3\",\"6481\":\"v-4115de74#10/4\",\"6482\":\"v-4115de74#10/5\",\"6483\":\"v-4115de74#10/6\",\"6484\":\"v-4115de74#11\",\"6485\":\"v-4115de74#11/0\",\"6486\":\"v-4115de74#11/1\",\"6487\":\"v-4115de74#11/2\",\"6488\":\"v-4115de74#12\",\"6489\":\"v-4115de74#12/0\",\"6490\":\"v-4115de74#12/1\",\"6491\":\"v-4115de74#12/2\",\"6492\":\"v-4115de74#12/3\",\"6493\":\"v-4115de74#12/4\",\"6494\":\"v-4115de74#13\",\"6495\":\"v-4115de74#13/0\",\"6496\":\"v-4115de74#13/1\",\"6497\":\"v-4115de74#13/2\",\"6498\":\"v-4115de74#13/3\",\"6499\":\"v-4115de74#13/4\",\"6500\":\"v-4115de74#13/5\",\"6501\":\"v-4115de74#13/6\",\"6502\":\"v-4115de74#13/7\",\"6503\":\"v-4115de74#13/8\",\"6504\":\"v-4115de74#13/9\",\"6505\":\"v-4115de74#13/10\",\"6506\":\"v-4115de74#13/11\",\"6507\":\"v-4115de74#13/12\",\"6508\":\"v-4115de74#13/13\",\"6509\":\"v-4115de74#13/14\",\"6510\":\"v-4115de74#13/15\",\"6511\":\"v-4115de74#13/16\",\"6512\":\"v-4115de74#13/17\",\"6513\":\"v-4115de74#13/18\",\"6514\":\"v-4115de74#13/19\",\"6515\":\"v-4115de74#13/20\",\"6516\":\"v-4115de74#13/21\",\"6517\":\"v-4115de74#13/22\",\"6518\":\"v-4115de74#13/23\",\"6519\":\"v-4115de74#13/24\",\"6520\":\"v-4115de74#13/25\",\"6521\":\"v-4115de74#14\",\"6522\":\"v-4115de74#14/0\",\"6523\":\"v-4115de74#14/1\",\"6524\":\"v-4115de74#15\",\"6525\":\"v-4115de74#15/0\",\"6526\":\"v-4115de74#15/1\",\"6527\":\"v-4115de74#15/2\",\"6528\":\"v-4115de74#15/3\",\"6529\":\"v-4115de74#15/4\",\"6530\":\"v-4115de74#15/5\",\"6531\":\"v-4115de74#15/6\",\"6532\":\"v-4115de74#15/7\",\"6533\":\"v-4115de74#15/8\",\"6534\":\"v-4115de74#15/9\",\"6535\":\"v-4115de74#15/10\",\"6536\":\"v-4115de74#15/11\",\"6537\":\"v-4115de74#15/12\",\"6538\":\"v-4115de74#15/13\",\"6539\":\"v-4115de74#15/14\",\"6540\":\"v-4115de74#15/15\",\"6541\":\"v-4115de74#15/16\",\"6542\":\"v-4115de74#15/17\",\"6543\":\"v-4115de74#16\",\"6544\":\"v-4115de74#16/0\",\"6545\":\"v-4115de74#16/1\",\"6546\":\"v-4115de74#16/2\",\"6547\":\"v-4115de74#16/3\",\"6548\":\"v-4115de74#16/4\",\"6549\":\"v-4115de74#17\",\"6550\":\"v-4115de74#17/0\",\"6551\":\"v-4115de74#17/1\",\"6552\":\"v-4115de74#17/2\",\"6553\":\"v-4115de74#17/3\",\"6554\":\"v-4115de74#17/4\",\"6555\":\"v-4115de74#17/5\",\"6556\":\"v-4115de74#17/6\",\"6557\":\"v-4115de74#17/7\",\"6558\":\"v-4115de74#17/8\",\"6559\":\"v-4115de74#18\",\"6560\":\"v-4115de74#18/0\",\"6561\":\"v-4115de74#18/1\",\"6562\":\"v-4115de74#18/2\",\"6563\":\"v-4115de74#18/3\",\"6564\":\"v-4115de74#18/4\",\"6565\":\"v-4115de74#18/5\",\"6566\":\"v-4115de74#18/6\",\"6567\":\"v-4115de74#18/7\",\"6568\":\"v-4115de74#18/8\",\"6569\":\"v-4115de74#18/9\",\"6570\":\"v-4115de74#18/10\",\"6571\":\"v-4115de74#18/11\",\"6572\":\"v-4115de74#18/12\",\"6573\":\"v-4115de74#18/13\",\"6574\":\"v-4115de74#18/14\",\"6575\":\"v-4115de74#18/15\",\"6576\":\"v-4115de74#18/16\",\"6577\":\"v-4115de74#19\",\"6578\":\"v-4115de74#19/0\",\"6579\":\"v-4115de74#19/1\",\"6580\":\"v-4115de74#19/2\",\"6581\":\"v-4115de74#19/3\",\"6582\":\"v-4115de74#19/4\",\"6583\":\"v-4115de74#19/5\",\"6584\":\"v-4115de74#19/6\",\"6585\":\"v-4115de74#19/7\",\"6586\":\"v-4115de74#19/8\",\"6587\":\"v-4115de74#19/9\",\"6588\":\"v-4115de74#19/10\",\"6589\":\"v-4115de74#19/11\",\"6590\":\"v-4115de74#20\",\"6591\":\"v-4115de74#20/0\",\"6592\":\"v-4115de74#20/1\",\"6593\":\"v-4115de74#20/2\",\"6594\":\"v-4115de74#20/3\",\"6595\":\"v-4115de74#20/4\",\"6596\":\"v-4115de74#20/5\",\"6597\":\"v-4115de74#20/6\",\"6598\":\"v-4115de74#20/7\",\"6599\":\"v-4115de74#20/8\",\"6600\":\"v-4115de74#20/9\",\"6601\":\"v-4115de74#20/10\",\"6602\":\"v-4115de74#20/11\",\"6603\":\"v-4115de74#20/12\",\"6604\":\"v-4115de74#20/13\",\"6605\":\"v-4115de74#20/14\",\"6606\":\"v-4115de74#20/15\",\"6607\":\"v-4115de74#20/16\",\"6608\":\"v-4115de74#21\",\"6609\":\"v-4115de74#21/0\",\"6610\":\"v-4115de74#21/1\",\"6611\":\"v-4115de74#21/2\",\"6612\":\"v-4115de74#21/3\",\"6613\":\"v-4115de74#21/4\",\"6614\":\"v-4115de74#21/5\",\"6615\":\"v-4115de74#21/6\",\"6616\":\"v-4115de74#21/7\",\"6617\":\"v-4115de74#21/8\",\"6618\":\"v-4115de74#21/9\",\"6619\":\"v-4115de74#22\",\"6620\":\"v-4115de74#22/0\",\"6621\":\"v-4115de74#22/1\",\"6622\":\"v-4115de74#22/2\",\"6623\":\"v-4115de74#23\",\"6624\":\"v-4115de74#23/0\",\"6625\":\"v-4115de74#23/1\",\"6626\":\"v-4115de74#23/2\",\"6627\":\"v-4115de74#24\",\"6628\":\"v-4115de74#24/0\",\"6629\":\"v-4115de74#24/1\",\"6630\":\"v-4115de74#24/2\",\"6631\":\"v-4115de74#24/3\",\"6632\":\"v-4115de74#24/4\",\"6633\":\"v-4115de74#25\",\"6634\":\"v-4115de74#25/0\",\"6635\":\"v-4115de74#25/1\",\"6636\":\"v-4115de74#25/2\",\"6637\":\"v-4115de74#25/3\",\"6638\":\"v-4115de74#25/4\",\"6639\":\"v-4115de74#26\",\"6640\":\"v-4115de74#26/0\",\"6641\":\"v-4115de74#26/1\",\"6642\":\"v-4115de74#26/2\",\"6643\":\"v-4115de74#26/3\",\"6644\":\"v-4115de74#26/4\",\"6645\":\"v-4115de74#26/5\",\"6646\":\"v-4115de74#26/6\",\"6647\":\"v-4115de74#26/7\",\"6648\":\"v-4115de74#26/8\",\"6649\":\"v-4115de74#26/9\",\"6650\":\"v-4115de74#26/10\",\"6651\":\"v-4115de74#26/11\",\"6652\":\"v-4115de74#27\",\"6653\":\"v-4115de74#27/0\",\"6654\":\"v-4115de74#27/1\",\"6655\":\"v-4115de74#27/2\",\"6656\":\"v-4115de74#27/3\",\"6657\":\"v-4115de74#28\",\"6658\":\"v-4115de74#28/0\",\"6659\":\"v-4115de74#28/1\",\"6660\":\"v-4115de74#28/2\",\"6661\":\"v-4115de74#29\",\"6662\":\"v-4115de74#29/0\",\"6663\":\"v-4115de74#29/1\",\"6664\":\"v-4115de74#29/2\",\"6665\":\"v-4115de74#29/3\",\"6666\":\"v-4115de74#29/4\",\"6667\":\"v-4115de74#30\",\"6668\":\"v-4115de74#30/0\",\"6669\":\"v-4115de74#30/1\",\"6670\":\"v-4115de74#30/2\",\"6671\":\"v-4115de74#30/3\",\"6672\":\"v-4115de74#30/4\",\"6673\":\"v-4115de74#30/5\",\"6674\":\"v-4115de74#30/6\",\"6675\":\"v-4115de74#30/7\",\"6676\":\"v-4115de74#30/8\",\"6677\":\"v-4115de74#30/9\",\"6678\":\"v-4115de74#30/10\",\"6679\":\"v-4115de74#30/11\",\"6680\":\"v-4115de74#30/12\",\"6681\":\"v-4115de74#30/13\",\"6682\":\"v-4115de74#30/14\",\"6683\":\"v-4115de74#30/15\",\"6684\":\"v-4115de74#30/16\",\"6685\":\"v-4115de74#30/17\",\"6686\":\"v-4115de74#30/18\",\"6687\":\"v-4115de74#30/19\",\"6688\":\"v-4115de74#30/20\",\"6689\":\"v-4115de74#30/21\",\"6690\":\"v-4115de74#31\",\"6691\":\"v-4115de74#31/0\",\"6692\":\"v-4115de74#31/1\",\"6693\":\"v-4115de74#31/2\",\"6694\":\"v-4115de74#31/3\",\"6695\":\"v-4115de74#31/4\",\"6696\":\"v-4115de74#31/5\",\"6697\":\"v-4115de74#31/6\",\"6698\":\"v-4115de74#31/7\",\"6699\":\"v-4115de74#31/8\",\"6700\":\"v-4115de74#31/9\",\"6701\":\"v-4115de74#31/10\",\"6702\":\"v-4115de74#31/11\",\"6703\":\"v-4115de74#31/12\",\"6704\":\"v-4115de74#31/13\",\"6705\":\"v-4115de74#32\",\"6706\":\"v-4115de74#32/0\",\"6707\":\"v-4115de74#32/1\",\"6708\":\"v-4115de74#32/2\",\"6709\":\"v-4115de74#32/3\",\"6710\":\"v-4115de74#32/4\",\"6711\":\"v-4115de74#33\",\"6712\":\"v-4115de74#33/0\",\"6713\":\"v-4115de74#33/1\",\"6714\":\"v-4115de74#33/2\",\"6715\":\"v-4115de74#34\",\"6716\":\"v-4115de74#35\",\"6717\":\"v-4115de74#35/0\",\"6718\":\"v-4115de74#36\",\"6719\":\"v-4115de74#36/0\",\"6720\":\"v-4115de74#36/1\",\"6721\":\"v-4115de74#37\",\"6722\":\"v-4115de74#37/0\",\"6723\":\"v-4115de74#38\",\"6724\":\"v-4115de74#38/0\",\"6725\":\"v-4115de74#38/1\",\"6726\":\"v-4115de74#38/2\",\"6727\":\"v-4115de74#38/3\",\"6728\":\"v-4115de74#39\",\"6729\":\"v-4115de74#39/0\",\"6730\":\"v-4115de74#40\",\"6731\":\"v-4115de74#40/0\",\"6732\":\"v-4115de74#41\",\"6733\":\"v-4115de74#41/0\",\"6734\":\"v-4115de74#42\",\"6735\":\"v-4115de74#43\",\"6736\":\"v-4115de74#43/0\",\"6737\":\"v-4115de74#43/1\",\"6738\":\"v-4115de74#43/2\",\"6739\":\"v-4115de74#44\",\"6740\":\"v-4115de74#44/0\",\"6741\":\"v-4115de74#44/1\",\"6742\":\"v-e17a1dca\",\"6743\":\"v-e17a1dca#1\",\"6744\":\"v-e17a1dca#2\",\"6745\":\"v-e17a1dca#2/0\",\"6746\":\"v-e17a1dca#2/1\",\"6747\":\"v-e17a1dca#2/2\",\"6748\":\"v-e17a1dca#2/3\",\"6749\":\"v-e17a1dca#3\",\"6750\":\"v-e17a1dca#3/0\",\"6751\":\"v-e17a1dca#3/1\",\"6752\":\"v-e17a1dca#4\",\"6753\":\"v-e17a1dca#5\",\"6754\":\"v-e17a1dca#6\",\"6755\":\"v-e17a1dca#6/0\",\"6756\":\"v-e17a1dca#6/1\",\"6757\":\"v-e17a1dca#6/2\",\"6758\":\"v-e17a1dca#6/3\",\"6759\":\"v-e17a1dca#6/4\",\"6760\":\"v-e17a1dca#7\",\"6761\":\"v-e17a1dca#7/0\",\"6762\":\"v-e17a1dca#7/1\",\"6763\":\"v-e17a1dca#7/2\",\"6764\":\"v-e17a1dca#8\",\"6765\":\"v-e17a1dca#9\",\"6766\":\"v-e17a1dca#9/0\",\"6767\":\"v-e17a1dca#9/1\",\"6768\":\"v-e17a1dca#9/2\",\"6769\":\"v-e17a1dca#9/3\",\"6770\":\"v-e17a1dca#10\",\"6771\":\"v-e17a1dca#10/0\",\"6772\":\"v-e17a1dca#11\",\"6773\":\"v-e17a1dca#12\",\"6774\":\"v-e17a1dca#12/0\",\"6775\":\"v-e17a1dca#12/1\",\"6776\":\"v-e17a1dca#12/2\",\"6777\":\"v-e17a1dca#13\",\"6778\":\"v-e17a1dca#13/0\",\"6779\":\"v-e17a1dca#14\",\"6780\":\"v-e17a1dca#15\",\"6781\":\"v-e17a1dca#15/0\",\"6782\":\"v-e17a1dca#15/1\",\"6783\":\"v-e17a1dca#15/2\",\"6784\":\"v-e17a1dca#15/3\",\"6785\":\"v-e17a1dca#16\",\"6786\":\"v-e17a1dca#16/0\",\"6787\":\"v-e17a1dca#17\",\"6788\":\"v-e17a1dca#18\",\"6789\":\"v-e17a1dca#18/0\",\"6790\":\"v-e17a1dca#18/1\",\"6791\":\"v-e17a1dca#18/2\",\"6792\":\"v-e17a1dca#18/3\",\"6793\":\"v-e17a1dca#19\",\"6794\":\"v-e17a1dca#19/0\",\"6795\":\"v-e17a1dca#20\",\"6796\":\"v-e17a1dca#20/0\",\"6797\":\"v-e17a1dca#20/1\",\"6798\":\"v-e17a1dca#20/2\",\"6799\":\"v-e17a1dca#20/3\",\"6800\":\"v-e17a1dca#21\",\"6801\":\"v-e17a1dca#21/0\",\"6802\":\"v-e17a1dca#21/1\",\"6803\":\"v-e17a1dca#21/2\",\"6804\":\"v-e17a1dca#22\",\"6805\":\"v-e17a1dca#22/3\",\"6806\":\"v-e17a1dca#22/4\",\"6807\":\"v-e17a1dca#22/5\",\"6808\":\"v-e17a1dca#23\",\"6809\":\"v-e17a1dca#23/0\",\"6810\":\"v-e17a1dca#23/1\",\"6811\":\"v-e17a1dca#23/2\",\"6812\":\"v-e17a1dca#23/3\",\"6813\":\"v-e17a1dca#23/4\",\"6814\":\"v-e17a1dca#24\",\"6815\":\"v-e17a1dca#24/0\",\"6816\":\"v-e17a1dca#24/1\",\"6817\":\"v-e17a1dca#24/2\",\"6818\":\"v-e17a1dca#24/3\",\"6819\":\"v-e17a1dca#24/4\",\"6820\":\"v-e17a1dca#24/5\",\"6821\":\"v-e17a1dca#24/6\",\"6822\":\"v-e17a1dca#24/7\",\"6823\":\"v-e17a1dca#24/8\",\"6824\":\"v-e17a1dca#24/9\",\"6825\":\"v-e17a1dca#24/10\",\"6826\":\"v-e17a1dca#24/11\",\"6827\":\"v-e17a1dca#25\",\"6828\":\"v-e17a1dca#26\",\"6829\":\"v-e17a1dca#26/0\",\"6830\":\"v-e17a1dca#26/1\",\"6831\":\"v-e17a1dca#26/2\",\"6832\":\"v-e17a1dca#26/3\",\"6833\":\"v-e17a1dca#26/4\",\"6834\":\"v-e17a1dca#26/5\",\"6835\":\"v-e17a1dca#26/6\",\"6836\":\"v-e17a1dca#27\",\"6837\":\"v-e17a1dca#27/0\",\"6838\":\"v-e17a1dca#27/1\",\"6839\":\"v-e17a1dca#27/2\",\"6840\":\"v-e17a1dca#27/3\",\"6841\":\"v-e17a1dca#27/4\",\"6842\":\"v-e17a1dca#27/5\",\"6843\":\"v-e17a1dca#27/6\",\"6844\":\"v-e17a1dca#27/7\",\"6845\":\"v-e17a1dca#27/8\",\"6846\":\"v-e17a1dca#27/9\",\"6847\":\"v-e17a1dca#27/10\",\"6848\":\"v-e17a1dca#28\",\"6849\":\"v-e17a1dca#29\",\"6850\":\"v-e17a1dca#30\",\"6851\":\"v-e17a1dca#31\",\"6852\":\"v-e17a1dca#31/0\",\"6853\":\"v-e17a1dca#32\",\"6854\":\"v-e17a1dca#32/0\",\"6855\":\"v-e17a1dca#32/1\",\"6856\":\"v-e17a1dca#32/2\",\"6857\":\"v-e17a1dca#32/3\",\"6858\":\"v-e17a1dca#32/4\",\"6859\":\"v-e17a1dca#32/5\",\"6860\":\"v-e17a1dca#32/6\",\"6861\":\"v-e17a1dca#32/7\",\"6862\":\"v-e17a1dca#32/8\",\"6863\":\"v-e17a1dca#32/9\",\"6864\":\"v-e17a1dca#32/10\",\"6865\":\"v-e17a1dca#32/11\",\"6866\":\"v-e17a1dca#32/12\",\"6867\":\"v-e17a1dca#32/13\",\"6868\":\"v-e17a1dca#32/14\",\"6869\":\"v-e17a1dca#33\",\"6870\":\"v-e17a1dca#33/0\",\"6871\":\"v-e17a1dca#34\",\"6872\":\"v-e17a1dca#34/0\",\"6873\":\"v-e17a1dca#34/1\",\"6874\":\"v-e17a1dca#34/2\",\"6875\":\"v-e17a1dca#35\",\"6876\":\"v-e17a1dca#35/0\",\"6877\":\"v-e17a1dca#35/1\",\"6878\":\"v-e17a1dca#36\",\"6879\":\"v-e17a1dca#36/0\",\"6880\":\"v-e17a1dca#36/1\",\"6881\":\"v-e17a1dca#36/2\",\"6882\":\"v-e17a1dca#37\",\"6883\":\"v-e17a1dca#37/0\",\"6884\":\"v-e17a1dca#37/1\",\"6885\":\"v-e17a1dca#37/2\",\"6886\":\"v-e17a1dca#37/3\",\"6887\":\"v-e17a1dca#37/4\",\"6888\":\"v-e17a1dca#37/5\",\"6889\":\"v-e17a1dca#37/6\",\"6890\":\"v-e17a1dca#38\",\"6891\":\"v-e17a1dca#38/0\",\"6892\":\"v-e17a1dca#39\",\"6893\":\"v-e17a1dca#39/0\",\"6894\":\"v-6c315fa0\",\"6895\":\"v-6c315fa0#1\",\"6896\":\"v-6c315fa0#1/0\",\"6897\":\"v-6c315fa0#1/1\",\"6898\":\"v-6c315fa0#1/2\",\"6899\":\"v-6c315fa0#1/3\",\"6900\":\"v-6c315fa0#1/4\",\"6901\":\"v-6c315fa0#1/5\",\"6902\":\"v-6c315fa0#1/6\",\"6903\":\"v-6c315fa0#1/7\",\"6904\":\"v-6c315fa0#2\",\"6905\":\"v-6c315fa0#3\",\"6906\":\"v-6c315fa0#3/0\",\"6907\":\"v-6c315fa0#3/1\",\"6908\":\"v-6c315fa0#3/2\",\"6909\":\"v-6c315fa0#3/3\",\"6910\":\"v-6c315fa0#3/4\",\"6911\":\"v-6c315fa0#3/5\",\"6912\":\"v-6c315fa0#3/6\",\"6913\":\"v-6c315fa0#3/7\",\"6914\":\"v-6c315fa0#3/8\",\"6915\":\"v-6c315fa0#4\",\"6916\":\"v-6c315fa0#4/9\",\"6917\":\"v-6c315fa0#4/10\",\"6918\":\"v-6c315fa0#4/11\",\"6919\":\"v-6c315fa0#4/12\",\"6920\":\"v-6c315fa0#4/13\",\"6921\":\"v-6c315fa0#4/14\",\"6922\":\"v-6c315fa0#4/15\",\"6923\":\"v-6c315fa0#4/16\",\"6924\":\"v-6c315fa0#4/17\",\"6925\":\"v-6c315fa0#4/18\",\"6926\":\"v-6c315fa0#4/19\",\"6927\":\"v-6c315fa0#4/20\",\"6928\":\"v-6c315fa0#4/21\",\"6929\":\"v-6c315fa0#4/22\",\"6930\":\"v-6c315fa0#4/23\",\"6931\":\"v-6c315fa0#4/24\",\"6932\":\"v-6c315fa0#4/25\",\"6933\":\"v-6c315fa0#4/26\",\"6934\":\"v-6c315fa0#4/27\",\"6935\":\"v-6c315fa0#4/28\",\"6936\":\"v-6c315fa0#4/29\",\"6937\":\"v-6c315fa0#4/30\",\"6938\":\"v-6c315fa0#4/31\",\"6939\":\"v-6c315fa0#4/32\",\"6940\":\"v-6c315fa0#4/33\",\"6941\":\"v-6c315fa0#4/34\",\"6942\":\"v-6c315fa0#4/35\",\"6943\":\"v-6c315fa0#4/36\",\"6944\":\"v-6c315fa0#4/37\",\"6945\":\"v-6c315fa0#4/38\",\"6946\":\"v-6c315fa0#4/39\",\"6947\":\"v-6c315fa0#5\",\"6948\":\"v-6c315fa0#6\",\"6949\":\"v-6c315fa0#6/0\",\"6950\":\"v-6c315fa0#7\",\"6951\":\"v-6c315fa0#7/0\",\"6952\":\"v-6c315fa0#7/1\",\"6953\":\"v-6c315fa0#7/2\",\"6954\":\"v-6c315fa0#7/3\",\"6955\":\"v-6c315fa0#7/4\",\"6956\":\"v-6c315fa0#8\",\"6957\":\"v-6c315fa0#9\",\"6958\":\"v-6c315fa0#9/0\",\"6959\":\"v-6c315fa0#10\",\"6960\":\"v-6c315fa0#10/0\",\"6961\":\"v-6c315fa0#10/1\",\"6962\":\"v-6c315fa0#10/2\",\"6963\":\"v-6c315fa0#10/3\",\"6964\":\"v-6c315fa0#11\",\"6965\":\"v-6c315fa0#11/0\",\"6966\":\"v-6c315fa0#11/1\",\"6967\":\"v-6c315fa0#11/2\",\"6968\":\"v-6c315fa0#11/3\",\"6969\":\"v-6c315fa0#11/4\",\"6970\":\"v-359680c8\",\"6971\":\"v-359680c8#0/0\",\"6972\":\"v-359680c8#0/1\",\"6973\":\"v-359680c8#0/2\",\"6974\":\"v-359680c8#1\",\"6975\":\"v-359680c8#2\",\"6976\":\"v-359680c8#2/0\",\"6977\":\"v-359680c8#2/1\",\"6978\":\"v-359680c8#2/2\",\"6979\":\"v-359680c8#2/3\",\"6980\":\"v-359680c8#2/4\",\"6981\":\"v-359680c8#3\",\"6982\":\"v-359680c8#3/0\",\"6983\":\"v-359680c8#3/1\",\"6984\":\"v-359680c8#3/2\",\"6985\":\"v-359680c8#3/3\",\"6986\":\"v-359680c8#4\",\"6987\":\"v-359680c8#4/0\",\"6988\":\"v-359680c8#5\",\"6989\":\"v-359680c8#5/0\",\"6990\":\"v-359680c8#6\",\"6991\":\"v-359680c8#6/0\",\"6992\":\"v-359680c8#6/1\",\"6993\":\"v-359680c8#6/2\",\"6994\":\"v-359680c8#6/3\",\"6995\":\"v-76002cf8\",\"6996\":\"v-76002cf8#0/0\",\"6997\":\"v-76002cf8#0/1\",\"6998\":\"v-76002cf8#1\",\"6999\":\"v-76002cf8#1/0\",\"7000\":\"v-76002cf8#1/1\",\"7001\":\"v-76002cf8#1/2\",\"7002\":\"v-76002cf8#1/3\",\"7003\":\"v-76002cf8#1/4\",\"7004\":\"v-76002cf8#2\",\"7005\":\"v-76002cf8#2/0\",\"7006\":\"v-76002cf8#2/1\",\"7007\":\"v-27b3dbbc\",\"7008\":\"v-27b3dbbc#1\",\"7009\":\"v-27b3dbbc#1/0\",\"7010\":\"v-27b3dbbc#1/1\",\"7011\":\"v-27b3dbbc#1/2\",\"7012\":\"v-27b3dbbc#1/3\",\"7013\":\"v-27b3dbbc#1/4\",\"7014\":\"v-27b3dbbc#1/5\",\"7015\":\"v-27b3dbbc#1/6\",\"7016\":\"v-27b3dbbc#1/7\",\"7017\":\"v-27b3dbbc#1/8\",\"7018\":\"v-27b3dbbc#2\",\"7019\":\"v-27b3dbbc#2/0\",\"7020\":\"v-27b3dbbc#3\",\"7021\":\"v-27b3dbbc#3/0\",\"7022\":\"v-27b3dbbc#4\",\"7023\":\"v-27b3dbbc#5\",\"7024\":\"v-27b3dbbc#6\",\"7025\":\"v-27b3dbbc#7\",\"7026\":\"v-27b3dbbc#7/0\",\"7027\":\"v-27b3dbbc#7/1\",\"7028\":\"v-27b3dbbc#7/2\",\"7029\":\"v-27b3dbbc#7/3\",\"7030\":\"v-27b3dbbc#7/4\",\"7031\":\"v-27b3dbbc#7/5\",\"7032\":\"v-27b3dbbc#8\",\"7033\":\"v-27b3dbbc#8/0\",\"7034\":\"v-27b3dbbc#8/1\",\"7035\":\"v-27b3dbbc#8/2\",\"7036\":\"v-27b3dbbc#8/3\",\"7037\":\"v-27b3dbbc#8/4\",\"7038\":\"v-27b3dbbc#8/5\",\"7039\":\"v-27b3dbbc#8/6\",\"7040\":\"v-27b3dbbc#8/7\",\"7041\":\"v-27b3dbbc#8/8\",\"7042\":\"v-27b3dbbc#8/9\",\"7043\":\"v-27b3dbbc#8/10\",\"7044\":\"v-27b3dbbc#9\",\"7045\":\"v-27b3dbbc#9/0\",\"7046\":\"v-27b3dbbc#9/1\",\"7047\":\"v-27b3dbbc#9/2\",\"7048\":\"v-27b3dbbc#9/3\",\"7049\":\"v-27b3dbbc#9/4\",\"7050\":\"v-27b3dbbc#9/5\",\"7051\":\"v-27b3dbbc#9/6\",\"7052\":\"v-27b3dbbc#9/7\",\"7053\":\"v-27b3dbbc#9/8\",\"7054\":\"v-27b3dbbc#9/9\",\"7055\":\"v-27b3dbbc#9/10\",\"7056\":\"v-27b3dbbc#10\",\"7057\":\"v-27b3dbbc#11\",\"7058\":\"v-27b3dbbc#11/0\",\"7059\":\"v-27b3dbbc#11/1\",\"7060\":\"v-27b3dbbc#12\",\"7061\":\"v-27b3dbbc#12/0\",\"7062\":\"v-27b3dbbc#12/1\",\"7063\":\"v-27b3dbbc#12/2\",\"7064\":\"v-27b3dbbc#12/3\",\"7065\":\"v-27b3dbbc#13\",\"7066\":\"v-27b3dbbc#13/0\",\"7067\":\"v-27b3dbbc#13/1\",\"7068\":\"v-27b3dbbc#13/2\",\"7069\":\"v-27b3dbbc#13/3\",\"7070\":\"v-27b3dbbc#14\",\"7071\":\"v-27b3dbbc#14/0\",\"7072\":\"v-27b3dbbc#14/1\",\"7073\":\"v-27b3dbbc#14/2\",\"7074\":\"v-27b3dbbc#15\",\"7075\":\"v-27b3dbbc#16\",\"7076\":\"v-27b3dbbc#16/0\",\"7077\":\"v-27b3dbbc#16/1\",\"7078\":\"v-27b3dbbc#16/2\",\"7079\":\"v-27b3dbbc#16/3\",\"7080\":\"v-27b3dbbc#17\",\"7081\":\"v-27b3dbbc#17/0\",\"7082\":\"v-27b3dbbc#17/1\",\"7083\":\"v-27b3dbbc#17/2\",\"7084\":\"v-27b3dbbc#17/3\",\"7085\":\"v-27b3dbbc#17/4\",\"7086\":\"v-27b3dbbc#17/5\",\"7087\":\"v-27b3dbbc#17/6\",\"7088\":\"v-27b3dbbc#17/7\",\"7089\":\"v-27b3dbbc#17/8\",\"7090\":\"v-27b3dbbc#17/9\",\"7091\":\"v-27b3dbbc#17/10\",\"7092\":\"v-27b3dbbc#18\",\"7093\":\"v-27b3dbbc#18/0\",\"7094\":\"v-27b3dbbc#18/1\",\"7095\":\"v-27b3dbbc#18/2\",\"7096\":\"v-27b3dbbc#18/3\",\"7097\":\"v-27b3dbbc#18/4\",\"7098\":\"v-27b3dbbc#18/5\",\"7099\":\"v-27b3dbbc#18/6\",\"7100\":\"v-27b3dbbc#18/7\",\"7101\":\"v-09033722\",\"7102\":\"v-09033722#1\",\"7103\":\"v-09033722#2\",\"7104\":\"v-09033722#3\",\"7105\":\"v-09033722#3/0\",\"7106\":\"v-09033722#3/1\",\"7107\":\"v-09033722#3/2\",\"7108\":\"v-09033722#3/3\",\"7109\":\"v-09033722#3/4\",\"7110\":\"v-09033722#3/5\",\"7111\":\"v-09033722#4\",\"7112\":\"v-09033722#4/0\",\"7113\":\"v-09033722#4/1\",\"7114\":\"v-09033722#4/2\",\"7115\":\"v-09033722#4/3\",\"7116\":\"v-09033722#4/4\",\"7117\":\"v-09033722#4/5\",\"7118\":\"v-09033722#4/6\",\"7119\":\"v-09033722#4/7\",\"7120\":\"v-09033722#4/8\",\"7121\":\"v-09033722#4/9\",\"7122\":\"v-09033722#4/10\",\"7123\":\"v-09033722#4/11\",\"7124\":\"v-09033722#4/12\",\"7125\":\"v-09033722#4/13\",\"7126\":\"v-09033722#4/14\",\"7127\":\"v-09033722#4/15\",\"7128\":\"v-09033722#4/16\",\"7129\":\"v-09033722#4/17\",\"7130\":\"v-09033722#4/18\",\"7131\":\"v-09033722#4/19\",\"7132\":\"v-09033722#4/20\",\"7133\":\"v-09033722#5\",\"7134\":\"v-09033722#6\",\"7135\":\"v-09033722#6/0\",\"7136\":\"v-09033722#6/1\",\"7137\":\"v-09033722#6/2\",\"7138\":\"v-09033722#6/3\",\"7139\":\"v-09033722#6/4\",\"7140\":\"v-09033722#6/5\",\"7141\":\"v-09033722#6/6\",\"7142\":\"v-09033722#6/7\",\"7143\":\"v-09033722#6/8\",\"7144\":\"v-09033722#6/9\",\"7145\":\"v-09033722#6/10\",\"7146\":\"v-09033722#6/11\",\"7147\":\"v-09033722#6/12\",\"7148\":\"v-09033722#7\",\"7149\":\"v-09033722#8\",\"7150\":\"v-09033722#8/0\",\"7151\":\"v-09033722#8/1\",\"7152\":\"v-09033722#8/2\",\"7153\":\"v-09033722#8/3\",\"7154\":\"v-09033722#8/4\",\"7155\":\"v-09033722#8/5\",\"7156\":\"v-09033722#8/6\",\"7157\":\"v-09033722#8/7\",\"7158\":\"v-09033722#8/8\",\"7159\":\"v-09033722#8/9\",\"7160\":\"v-09033722#8/10\",\"7161\":\"v-09033722#8/11\",\"7162\":\"v-09033722#8/12\",\"7163\":\"v-09033722#8/13\",\"7164\":\"v-09033722#8/14\",\"7165\":\"v-09033722#8/15\",\"7166\":\"v-09033722#8/16\",\"7167\":\"v-09033722#8/17\",\"7168\":\"v-09033722#8/18\",\"7169\":\"v-09033722#8/19\",\"7170\":\"v-09033722#8/20\",\"7171\":\"v-f9616996\",\"7172\":\"v-f9616996#1\",\"7173\":\"v-f9616996#1/0\",\"7174\":\"v-f9616996#1/1\",\"7175\":\"v-f9616996#1/2\",\"7176\":\"v-f9616996#1/3\",\"7177\":\"v-f9616996#1/4\",\"7178\":\"v-f9616996#1/5\",\"7179\":\"v-f9616996#1/6\",\"7180\":\"v-f9616996#1/7\",\"7181\":\"v-f9616996#1/8\",\"7182\":\"v-f9616996#1/9\",\"7183\":\"v-f9616996#1/10\",\"7184\":\"v-f9616996#1/11\",\"7185\":\"v-f9616996#1/12\",\"7186\":\"v-f9616996#2\",\"7187\":\"v-f9616996#3\",\"7188\":\"v-f9616996#3/0\",\"7189\":\"v-f9616996#3/1\",\"7190\":\"v-f9616996#3/2\",\"7191\":\"v-f9616996#4\",\"7192\":\"v-f9616996#4/0\",\"7193\":\"v-f9616996#4/1\",\"7194\":\"v-f9616996#4/2\",\"7195\":\"v-f9616996#4/3\",\"7196\":\"v-f9616996#4/4\",\"7197\":\"v-f9616996#5\",\"7198\":\"v-f9616996#5/0\",\"7199\":\"v-f9616996#5/1\",\"7200\":\"v-f9616996#5/2\",\"7201\":\"v-f9616996#6\",\"7202\":\"v-f9616996#6/0\",\"7203\":\"v-f9616996#6/1\",\"7204\":\"v-f9616996#6/2\",\"7205\":\"v-f9616996#7\",\"7206\":\"v-f9616996#7/0\",\"7207\":\"v-f9616996#7/1\",\"7208\":\"v-f9616996#7/2\",\"7209\":\"v-f9616996#7/3\",\"7210\":\"v-f9616996#7/4\",\"7211\":\"v-f9616996#7/5\",\"7212\":\"v-f9616996#7/6\",\"7213\":\"v-f9616996#7/7\",\"7214\":\"v-f9616996#7/8\",\"7215\":\"v-f9616996#7/9\",\"7216\":\"v-f9616996#8\",\"7217\":\"v-f9616996#8/0\",\"7218\":\"v-f9616996#8/1\",\"7219\":\"v-f9616996#8/2\",\"7220\":\"v-f9616996#8/3\",\"7221\":\"v-f9616996#8/4\",\"7222\":\"v-f9616996#8/5\",\"7223\":\"v-f9616996#8/6\",\"7224\":\"v-f9616996#8/7\",\"7225\":\"v-f9616996#8/8\",\"7226\":\"v-f9616996#8/9\",\"7227\":\"v-f9616996#9\",\"7228\":\"v-f9616996#9/0\",\"7229\":\"v-f9616996#9/1\",\"7230\":\"v-f9616996#9/2\",\"7231\":\"v-f9616996#9/3\",\"7232\":\"v-f9616996#9/4\",\"7233\":\"v-f9616996#10\",\"7234\":\"v-f9616996#10/5\",\"7235\":\"v-f9616996#10/6\",\"7236\":\"v-f9616996#10/7\",\"7237\":\"v-f9616996#10/8\",\"7238\":\"v-f9616996#10/9\",\"7239\":\"v-f9616996#10/10\",\"7240\":\"v-f9616996#10/11\",\"7241\":\"v-f9616996#10/12\",\"7242\":\"v-f9616996#10/13\",\"7243\":\"v-f9616996#10/14\",\"7244\":\"v-f9616996#10/15\",\"7245\":\"v-f9616996#10/16\",\"7246\":\"v-f9616996#10/17\",\"7247\":\"v-f9616996#10/18\",\"7248\":\"v-f9616996#10/19\",\"7249\":\"v-f9616996#10/20\",\"7250\":\"v-f9616996#10/21\",\"7251\":\"v-f9616996#10/22\",\"7252\":\"v-f9616996#10/23\",\"7253\":\"v-f9616996#10/24\",\"7254\":\"v-f9616996#10/25\",\"7255\":\"v-f9616996#10/26\",\"7256\":\"v-f9616996#10/27\",\"7257\":\"v-f9616996#10/28\",\"7258\":\"v-f9616996#10/29\",\"7259\":\"v-f9616996#10/30\",\"7260\":\"v-f9616996#10/31\",\"7261\":\"v-f9616996#10/32\",\"7262\":\"v-f9616996#10/33\",\"7263\":\"v-f9616996#10/34\",\"7264\":\"v-f9616996#10/35\",\"7265\":\"v-f9616996#10/36\",\"7266\":\"v-f9616996#10/37\",\"7267\":\"v-f9616996#11\",\"7268\":\"v-f9616996#11/0\",\"7269\":\"v-f9616996#11/1\",\"7270\":\"v-f9616996#11/2\",\"7271\":\"v-f9616996#11/3\",\"7272\":\"v-f9616996#11/4\",\"7273\":\"v-f9616996#11/5\",\"7274\":\"v-f9616996#11/6\",\"7275\":\"v-f9616996#11/7\",\"7276\":\"v-f9616996#11/8\",\"7277\":\"v-f9616996#11/9\",\"7278\":\"v-f9616996#11/10\",\"7279\":\"v-f9616996#11/11\",\"7280\":\"v-f9616996#12\",\"7281\":\"v-f9616996#12/0\",\"7282\":\"v-f9616996#12/1\",\"7283\":\"v-f9616996#12/2\",\"7284\":\"v-f9616996#12/3\",\"7285\":\"v-f9616996#12/4\",\"7286\":\"v-f9616996#12/5\",\"7287\":\"v-f9616996#13\",\"7288\":\"v-f9616996#13/0\",\"7289\":\"v-306b7475\",\"7290\":\"v-0a98898e\",\"7291\":\"v-776e5b55\",\"7292\":\"v-74875e60\",\"7293\":\"v-09d1fd44\",\"7294\":\"v-e7ae8e10\",\"7295\":\"v-0500bc12\",\"7296\":\"v-03dc69cd\",\"7297\":\"v-0d889c5a\",\"7298\":\"v-595f8322\",\"7299\":\"v-96b8eb96\",\"7300\":\"v-643e3a36\",\"7301\":\"v-43de1d46\",\"7302\":\"v-56c59726\",\"7303\":\"v-79528dfd\",\"7304\":\"v-2b17cb0a\",\"7305\":\"v-7f7c299a\",\"7306\":\"v-1c49167e\",\"7307\":\"v-d388c4dc\",\"7308\":\"v-c48b8372\",\"7309\":\"v-443c1136\",\"7310\":\"v-787e4606\",\"7311\":\"v-4694ee4d\",\"7312\":\"v-78c5c555\",\"7313\":\"v-3e7dbf32\",\"7314\":\"v-df4e5736\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,2],\"2\":[2],\"3\":[1],\"4\":[1],\"5\":[null,2],\"6\":[null,1],\"7\":[null,1],\"8\":[null,1],\"9\":[1],\"10\":[null,4],\"11\":[null,3],\"12\":[null,1],\"13\":[null,1],\"14\":[null,1],\"15\":[null,1],\"16\":[null,1],\"17\":[null,1],\"18\":[null,1],\"19\":[null,3],\"20\":[null,1],\"21\":[null,1],\"22\":[null,1],\"23\":[1],\"24\":[null,2],\"25\":[null,5],\"26\":[null,5],\"27\":[2],\"28\":[null,7],\"29\":[null,7],\"30\":[2],\"31\":[null,8],\"32\":[2],\"33\":[null,7],\"34\":[null,1],\"35\":[null,8],\"36\":[2],\"37\":[null,11],\"38\":[2],\"39\":[null,6],\"40\":[null,7],\"41\":[1],\"42\":[null,10],\"43\":[1],\"44\":[null,5],\"45\":[null,1],\"46\":[null,6],\"47\":[null,5],\"48\":[null,1],\"49\":[null,1],\"50\":[null,1],\"51\":[null,1],\"52\":[null,1],\"53\":[null,1],\"54\":[null,1],\"55\":[null,1],\"56\":[null,1],\"57\":[1],\"58\":[null,1],\"59\":[1],\"60\":[null,2],\"61\":[null,1],\"62\":[1],\"63\":[null,1],\"64\":[null,1],\"65\":[null,1],\"66\":[1],\"67\":[null,5],\"68\":[null,1],\"69\":[1],\"70\":[null,3],\"71\":[null,1],\"72\":[1],\"73\":[null,3],\"74\":[null,1],\"75\":[1],\"76\":[null,3],\"77\":[null,3],\"78\":[null,1],\"79\":[1],\"80\":[null,1],\"81\":[null,1],\"82\":[1],\"83\":[null,23],\"84\":[null,1],\"85\":[1],\"86\":[null,1],\"87\":[1],\"88\":[null,1],\"89\":[1],\"90\":[null,1],\"91\":[1],\"92\":[null,1],\"93\":[2],\"94\":[null,10],\"95\":[null,1],\"96\":[1],\"97\":[null,2],\"98\":[null,1],\"99\":[null,1],\"100\":[null,1],\"101\":[null,1],\"102\":[1],\"103\":[null,1],\"104\":[1],\"105\":[null,5],\"106\":[null,1],\"107\":[1],\"108\":[null,1],\"109\":[2],\"110\":[null,1],\"111\":[1],\"112\":[null,1],\"113\":[null,2],\"114\":[1],\"115\":[null,3],\"116\":[1],\"117\":[null,6],\"118\":[null,4],\"119\":[null,6],\"120\":[null,3],\"121\":[null,5],\"122\":[1],\"123\":[null,3],\"124\":[null,1],\"125\":[null,6],\"126\":[null,7],\"127\":[null,2],\"128\":[null,4],\"129\":[1],\"130\":[null,2],\"131\":[null,1],\"132\":[null,1],\"133\":[null,3],\"134\":[null,2],\"135\":[null,1],\"136\":[null,1],\"137\":[null,1],\"138\":[null,1],\"139\":[null,1],\"140\":[null,4],\"141\":[1],\"142\":[1],\"143\":[1],\"144\":[null,1],\"145\":[null,1],\"146\":[1],\"147\":[null,1],\"148\":[null,1],\"149\":[1],\"150\":[null,3],\"151\":[null,8],\"152\":[null,3],\"153\":[1],\"154\":[null,3],\"155\":[null,8],\"156\":[null,3],\"157\":[1],\"158\":[2],\"159\":[1],\"160\":[null,4],\"161\":[1],\"162\":[null,1],\"163\":[null,1],\"164\":[1],\"165\":[null,2],\"166\":[2],\"167\":[1],\"168\":[null,4],\"169\":[1],\"170\":[null,1],\"171\":[null,1],\"172\":[1],\"173\":[null,2],\"174\":[1],\"175\":[2],\"176\":[6],\"177\":[null,3],\"178\":[null,5],\"179\":[null,4],\"180\":[null,4],\"181\":[null,26],\"182\":[4],\"183\":[null,2],\"184\":[null,1],\"185\":[null,7],\"186\":[null,4],\"187\":[null,7],\"188\":[2],\"189\":[null,5],\"190\":[null,2],\"191\":[null,3],\"192\":[null,5],\"193\":[null,2],\"194\":[null,8],\"195\":[null,2],\"196\":[null,3],\"197\":[null,6],\"198\":[null,13],\"199\":[null,6],\"200\":[null,1],\"201\":[null,5],\"202\":[2],\"203\":[null,7],\"204\":[null,7],\"205\":[null,1],\"206\":[null,2],\"207\":[null,10],\"208\":[null,7],\"209\":[null,4],\"210\":[null,5],\"211\":[null,4],\"212\":[null,5],\"213\":[null,4],\"214\":[null,4],\"215\":[null,1],\"216\":[null,1],\"217\":[2],\"218\":[null,4],\"219\":[null,4],\"220\":[null,1],\"221\":[2],\"222\":[null,8],\"223\":[null,6],\"224\":[null,3],\"225\":[null,4],\"226\":[null,9],\"227\":[null,1],\"228\":[null,20],\"229\":[6],\"230\":[null,17],\"231\":[null,3],\"232\":[null,6],\"233\":[null,6],\"234\":[null,6],\"235\":[6],\"236\":[null,10],\"237\":[null,7],\"238\":[3],\"239\":[null,9],\"240\":[null,10],\"241\":[4],\"242\":[null,11],\"243\":[null,6],\"244\":[null,6],\"245\":[null,7],\"246\":[null,7],\"247\":[null,4],\"248\":[null,4],\"249\":[null,4],\"250\":[null,32],\"251\":[3],\"252\":[null,4],\"253\":[null,9],\"254\":[null,4],\"255\":[null,6],\"256\":[null,8],\"257\":[null,6],\"258\":[null,7],\"259\":[null,5],\"260\":[3],\"261\":[null,9],\"262\":[null,3],\"263\":[null,8],\"264\":[null,3],\"265\":[null,7],\"266\":[null,6],\"267\":[null,4],\"268\":[null,7],\"269\":[null,7],\"270\":[6],\"271\":[null,8],\"272\":[null,8],\"273\":[null,8],\"274\":[null,5],\"275\":[null,6],\"276\":[3],\"277\":[null,12],\"278\":[2],\"279\":[null,8],\"280\":[null,10],\"281\":[null,23],\"282\":[null,20],\"283\":[null,13],\"284\":[3],\"285\":[null,6],\"286\":[null,2],\"287\":[null,9],\"288\":[null,6],\"289\":[null,6],\"290\":[null,12],\"291\":[null,8],\"292\":[null,3],\"293\":[null,10],\"294\":[2],\"295\":[3],\"296\":[3],\"297\":[null,8],\"298\":[null,5],\"299\":[null,5],\"300\":[3],\"301\":[null,7],\"302\":[null,8],\"303\":[null,1],\"304\":[null,1],\"305\":[null,1],\"306\":[null,1],\"307\":[3],\"308\":[null,3],\"309\":[null,1],\"310\":[null,2],\"311\":[null,4],\"312\":[null,1],\"313\":[null,2],\"314\":[null,4],\"315\":[null,1],\"316\":[null,3],\"317\":[null,4],\"318\":[null,1],\"319\":[null,5],\"320\":[null,2],\"321\":[null,4],\"322\":[2],\"323\":[4],\"324\":[null,3],\"325\":[null,2],\"326\":[null,2],\"327\":[null,3],\"328\":[4],\"329\":[null,3],\"330\":[3],\"331\":[null,5],\"332\":[null,2],\"333\":[null,17],\"334\":[null,18],\"335\":[3],\"336\":[null,4],\"337\":[null,2],\"338\":[null,2],\"339\":[null,6],\"340\":[2],\"341\":[null,7],\"342\":[null,4],\"343\":[null,11],\"344\":[3],\"345\":[null,4],\"346\":[null,3],\"347\":[null,7],\"348\":[null,10],\"349\":[3],\"350\":[null,4],\"351\":[null,11],\"352\":[null,8],\"353\":[4],\"354\":[null,4],\"355\":[null,6],\"356\":[4],\"357\":[null,7],\"358\":[4],\"359\":[null,5],\"360\":[3],\"361\":[null,7],\"362\":[null,2],\"363\":[null,12],\"364\":[null,9],\"365\":[null,4],\"366\":[null,3],\"367\":[null,4],\"368\":[null,2],\"369\":[null,6],\"370\":[null,8],\"371\":[3],\"372\":[null,12],\"373\":[null,6],\"374\":[null,17],\"375\":[null,3],\"376\":[null,8],\"377\":[null,5],\"378\":[null,13],\"379\":[null,12],\"380\":[null,2],\"381\":[null,14],\"382\":[null,10],\"383\":[2],\"384\":[null,3],\"385\":[null,4],\"386\":[3],\"387\":[null,1],\"388\":[null,3],\"389\":[3],\"390\":[null,1],\"391\":[null,1],\"392\":[null,3],\"393\":[null,1],\"394\":[null,1],\"395\":[null,3],\"396\":[null,3],\"397\":[null,1],\"398\":[null,13],\"399\":[null,1],\"400\":[null,5],\"401\":[null,3],\"402\":[null,9],\"403\":[null,2],\"404\":[null,5],\"405\":[null,1],\"406\":[null,8],\"407\":[2],\"408\":[2],\"409\":[null,22],\"410\":[null,4],\"411\":[2],\"412\":[null,5],\"413\":[null,11],\"414\":[2],\"415\":[4],\"416\":[null,3],\"417\":[null,5],\"418\":[null,8],\"419\":[null,13],\"420\":[3],\"421\":[null,8],\"422\":[null,11],\"423\":[3],\"424\":[null,4],\"425\":[null,23],\"426\":[null,14],\"427\":[null,9],\"428\":[null,12],\"429\":[null,4],\"430\":[null,3],\"431\":[null,20],\"432\":[null,8],\"433\":[null,4],\"434\":[null,15],\"435\":[null,10],\"436\":[null,12],\"437\":[3],\"438\":[null,5],\"439\":[null,3],\"440\":[null,3],\"441\":[null,4],\"442\":[null,6],\"443\":[null,11],\"444\":[null,61],\"445\":[null,5],\"446\":[null,3],\"447\":[null,6],\"448\":[null,11],\"449\":[null,8],\"450\":[null,2],\"451\":[null,12],\"452\":[2],\"453\":[2],\"454\":[3],\"455\":[null,4],\"456\":[null,5],\"457\":[null,5],\"458\":[null,1],\"459\":[null,12],\"460\":[null,8],\"461\":[null,3],\"462\":[null,9],\"463\":[8],\"464\":[null,3],\"465\":[null,8],\"466\":[null,10],\"467\":[null,3],\"468\":[null,5],\"469\":[3],\"470\":[null,3],\"471\":[null,15],\"472\":[null,10],\"473\":[null,3],\"474\":[null,5],\"475\":[null,17],\"476\":[8],\"477\":[null,13],\"478\":[null,24],\"479\":[null,2],\"480\":[null,44],\"481\":[null,8],\"482\":[2],\"483\":[null,7],\"484\":[null,6],\"485\":[null,3],\"486\":[null,25],\"487\":[3],\"488\":[null,9],\"489\":[null,11],\"490\":[null,3],\"491\":[null,35],\"492\":[null,6],\"493\":[null,5],\"494\":[null,2],\"495\":[null,2],\"496\":[null,2],\"497\":[null,2],\"498\":[2],\"499\":[3],\"500\":[null,7],\"501\":[null,2],\"502\":[null,2],\"503\":[null,10],\"504\":[null,8],\"505\":[null,10],\"506\":[null,7],\"507\":[null,19],\"508\":[null,5],\"509\":[null,3],\"510\":[null,4],\"511\":[null,9],\"512\":[null,2],\"513\":[null,16],\"514\":[null,10],\"515\":[null,3],\"516\":[null,13],\"517\":[2],\"518\":[null,7],\"519\":[null,5],\"520\":[null,6],\"521\":[null,12],\"522\":[null,6],\"523\":[null,9],\"524\":[null,9],\"525\":[2],\"526\":[null,5],\"527\":[null,12],\"528\":[null,10],\"529\":[null,4],\"530\":[null,16],\"531\":[null,13],\"532\":[null,8],\"533\":[2],\"534\":[null,4],\"535\":[null,3],\"536\":[null,6],\"537\":[null,4],\"538\":[null,6],\"539\":[null,4],\"540\":[null,3],\"541\":[null,9],\"542\":[null,4],\"543\":[null,9],\"544\":[null,4],\"545\":[null,4],\"546\":[null,7],\"547\":[null,3],\"548\":[null,6],\"549\":[null,1],\"550\":[null,6],\"551\":[null,9],\"552\":[null,3],\"553\":[null,10],\"554\":[2],\"555\":[2],\"556\":[null,10],\"557\":[2],\"558\":[null,10],\"559\":[2],\"560\":[null,10],\"561\":[3],\"562\":[null,4],\"563\":[null,3],\"564\":[null,3],\"565\":[10],\"566\":[null,7],\"567\":[null,7],\"568\":[null,14],\"569\":[null,7],\"570\":[null,6],\"571\":[8],\"572\":[null,12],\"573\":[null,5],\"574\":[null,3],\"575\":[null,9],\"576\":[null,5],\"577\":[null,11],\"578\":[5],\"579\":[null,14],\"580\":[null,6],\"581\":[null,7],\"582\":[null,3],\"583\":[null,3],\"584\":[null,7],\"585\":[null,6],\"586\":[null,8],\"587\":[null,7],\"588\":[null,10],\"589\":[null,8],\"590\":[null,18],\"591\":[null,7],\"592\":[null,13],\"593\":[null,11],\"594\":[null,15],\"595\":[9],\"596\":[null,16],\"597\":[null,9],\"598\":[null,10],\"599\":[5],\"600\":[null,8],\"601\":[null,6],\"602\":[null,5],\"603\":[null,10],\"604\":[null,8],\"605\":[null,14],\"606\":[null,10],\"607\":[null,9],\"608\":[null,3],\"609\":[null,18],\"610\":[null,14],\"611\":[null,11],\"612\":[null,8],\"613\":[null,7],\"614\":[7],\"615\":[null,6],\"616\":[null,13],\"617\":[6],\"618\":[null,3],\"619\":[null,14],\"620\":[null,17],\"621\":[null,18],\"622\":[null,4],\"623\":[null,7],\"624\":[null,9],\"625\":[null,17],\"626\":[5],\"627\":[null,2],\"628\":[null,12],\"629\":[null,13],\"630\":[null,11],\"631\":[null,5],\"632\":[null,12],\"633\":[null,5],\"634\":[null,29],\"635\":[null,2],\"636\":[null,3],\"637\":[null,8],\"638\":[null,6],\"639\":[null,13],\"640\":[null,9],\"641\":[2],\"642\":[null,10],\"643\":[2],\"644\":[2],\"645\":[null,9],\"646\":[null,5],\"647\":[null,11],\"648\":[null,5],\"649\":[null,2],\"650\":[null,6],\"651\":[null,2],\"652\":[null,1],\"653\":[null,1],\"654\":[null,9],\"655\":[2],\"656\":[null,3],\"657\":[null,1],\"658\":[null,1],\"659\":[null,5],\"660\":[null,2],\"661\":[null,7],\"662\":[null,8],\"663\":[null,4],\"664\":[null,3],\"665\":[null,4],\"666\":[null,3],\"667\":[null,2],\"668\":[null,1],\"669\":[null,2],\"670\":[null,3],\"671\":[null,3],\"672\":[null,3],\"673\":[2],\"674\":[null,7],\"675\":[null,1],\"676\":[2],\"677\":[null,7],\"678\":[null,5],\"679\":[null,6],\"680\":[null,5],\"681\":[null,10],\"682\":[null,9],\"683\":[null,7],\"684\":[null,6],\"685\":[2],\"686\":[null,13],\"687\":[2],\"688\":[2],\"689\":[null,10],\"690\":[3],\"691\":[null,34],\"692\":[2],\"693\":[null,14],\"694\":[null,1],\"695\":[null,1],\"696\":[null,8],\"697\":[null,2],\"698\":[null,2],\"699\":[null,3],\"700\":[null,1],\"701\":[2],\"702\":[null,5],\"703\":[null,5],\"704\":[null,6],\"705\":[null,10],\"706\":[null,2],\"707\":[null,4],\"708\":[null,1],\"709\":[null,3],\"710\":[2],\"711\":[null,10],\"712\":[2],\"713\":[2],\"714\":[null,4],\"715\":[null,2],\"716\":[null,6],\"717\":[null,2],\"718\":[null,7],\"719\":[2],\"720\":[null,8],\"721\":[null,2],\"722\":[null,9],\"723\":[null,8],\"724\":[null,4],\"725\":[2],\"726\":[null,9],\"727\":[3],\"728\":[null,4],\"729\":[null,4],\"730\":[null,3],\"731\":[null,4],\"732\":[null,12],\"733\":[3],\"734\":[null,4],\"735\":[null,6],\"736\":[null,9],\"737\":[null,13],\"738\":[null,5],\"739\":[null,9],\"740\":[2],\"741\":[null,1],\"742\":[null,8],\"743\":[null,1],\"744\":[null,7],\"745\":[2],\"746\":[null,4],\"747\":[null,7],\"748\":[null,8],\"749\":[null,6],\"750\":[null,5],\"751\":[2],\"752\":[null,11],\"753\":[null,3],\"754\":[null,7],\"755\":[null,7],\"756\":[null,5],\"757\":[null,10],\"758\":[null,3],\"759\":[null,7],\"760\":[2],\"761\":[null,4],\"762\":[null,7],\"763\":[null,4],\"764\":[null,4],\"765\":[null,16],\"766\":[null,9],\"767\":[2],\"768\":[null,5],\"769\":[null,4],\"770\":[null,6],\"771\":[null,9],\"772\":[null,4],\"773\":[2],\"774\":[2],\"775\":[null,3],\"776\":[null,6],\"777\":[null,7],\"778\":[null,5],\"779\":[null,5],\"780\":[null,10],\"781\":[null,4],\"782\":[null,12],\"783\":[null,6],\"784\":[5],\"785\":[null,3],\"786\":[null,2],\"787\":[null,65],\"788\":[null,9],\"789\":[null,2],\"790\":[null,46],\"791\":[null,3],\"792\":[null,5],\"793\":[null,5],\"794\":[null,6],\"795\":[null,2],\"796\":[null,11],\"797\":[null,3],\"798\":[null,2],\"799\":[null,1],\"800\":[null,4],\"801\":[null,19],\"802\":[null,13],\"803\":[2],\"804\":[null,6],\"805\":[null,7],\"806\":[null,5],\"807\":[null,5],\"808\":[null,12],\"809\":[2],\"810\":[4],\"811\":[null,2],\"812\":[null,34],\"813\":[null,2],\"814\":[null,11],\"815\":[null,5],\"816\":[null,40],\"817\":[null,2],\"818\":[null,4],\"819\":[null,4],\"820\":[3],\"821\":[null,2],\"822\":[null,10],\"823\":[null,2],\"824\":[null,29],\"825\":[null,2],\"826\":[null,31],\"827\":[null,3],\"828\":[null,1],\"829\":[null,7],\"830\":[2],\"831\":[null,1],\"832\":[null,1],\"833\":[null,11],\"834\":[null,1],\"835\":[null,1],\"836\":[null,3],\"837\":[null,4],\"838\":[null,3],\"839\":[null,4],\"840\":[null,4],\"841\":[null,7],\"842\":[null,12],\"843\":[null,3],\"844\":[null,10],\"845\":[null,4],\"846\":[null,3],\"847\":[null,3],\"848\":[null,2],\"849\":[2],\"850\":[3],\"851\":[3],\"852\":[null,8],\"853\":[null,2],\"854\":[null,35],\"855\":[2],\"856\":[null,6],\"857\":[null,8],\"858\":[null,27],\"859\":[null,37],\"860\":[2],\"861\":[3],\"862\":[null,4],\"863\":[null,6],\"864\":[null,8],\"865\":[3],\"866\":[null,3],\"867\":[null,6],\"868\":[3],\"869\":[null,11],\"870\":[2],\"871\":[3],\"872\":[null,6],\"873\":[2],\"874\":[null,4],\"875\":[null,18],\"876\":[2],\"877\":[null,3],\"878\":[null,4],\"879\":[null,3],\"880\":[null,4],\"881\":[null,3],\"882\":[null,10],\"883\":[2],\"884\":[3],\"885\":[null,6],\"886\":[3],\"887\":[null,11],\"888\":[null,11],\"889\":[3],\"890\":[null,11],\"891\":[null,10],\"892\":[3],\"893\":[null,8],\"894\":[null,7],\"895\":[null,7],\"896\":[null,5],\"897\":[null,10],\"898\":[4],\"899\":[null,8],\"900\":[null,5],\"901\":[null,22],\"902\":[null,9],\"903\":[null,18],\"904\":[null,13],\"905\":[4],\"906\":[null,3],\"907\":[null,5],\"908\":[null,17],\"909\":[null,8],\"910\":[null,7],\"911\":[null,26],\"912\":[null,9],\"913\":[7],\"914\":[null,11],\"915\":[null,8],\"916\":[2],\"917\":[3],\"918\":[null,10],\"919\":[null,17],\"920\":[6],\"921\":[null,9],\"922\":[4],\"923\":[null,5],\"924\":[3],\"925\":[null,10],\"926\":[3],\"927\":[null,13],\"928\":[3],\"929\":[null,13],\"930\":[null,10],\"931\":[2],\"932\":[null,4],\"933\":[null,2],\"934\":[null,4],\"935\":[null,4],\"936\":[null,1],\"937\":[null,1],\"938\":[null,3],\"939\":[null,8],\"940\":[null,4],\"941\":[null,16],\"942\":[null,7],\"943\":[null,16],\"944\":[null,6],\"945\":[null,8],\"946\":[null,7],\"947\":[null,18],\"948\":[3],\"949\":[null,6],\"950\":[null,6],\"951\":[null,4],\"952\":[2],\"953\":[2],\"954\":[null,5],\"955\":[null,6],\"956\":[null,3],\"957\":[null,9],\"958\":[null,8],\"959\":[3],\"960\":[null,3],\"961\":[null,11],\"962\":[null,3],\"963\":[null,2],\"964\":[null,4],\"965\":[null,1],\"966\":[null,2],\"967\":[null,13],\"968\":[null,3],\"969\":[null,5],\"970\":[null,4],\"971\":[null,14],\"972\":[null,5],\"973\":[4],\"974\":[null,10],\"975\":[null,28],\"976\":[null,5],\"977\":[null,4],\"978\":[null,6],\"979\":[null,6],\"980\":[null,24],\"981\":[null,7],\"982\":[null,12],\"983\":[null,1],\"984\":[null,6],\"985\":[4],\"986\":[null,7],\"987\":[null,3],\"988\":[null,7],\"989\":[null,6],\"990\":[null,13],\"991\":[null,8],\"992\":[null,2],\"993\":[null,42],\"994\":[null,2],\"995\":[null,12],\"996\":[null,3],\"997\":[null,1],\"998\":[null,6],\"999\":[2],\"1000\":[null,11],\"1001\":[null,5],\"1002\":[2],\"1003\":[4],\"1004\":[null,15],\"1005\":[null,15],\"1006\":[3],\"1007\":[null,11],\"1008\":[null,10],\"1009\":[null,14],\"1010\":[null,10],\"1011\":[null,22],\"1012\":[null,1],\"1013\":[null,3],\"1014\":[null,3],\"1015\":[null,5],\"1016\":[null,30],\"1017\":[null,19],\"1018\":[null,6],\"1019\":[null,1],\"1020\":[null,5],\"1021\":[null,9],\"1022\":[null,10],\"1023\":[null,5],\"1024\":[null,14],\"1025\":[null,5],\"1026\":[null,1],\"1027\":[null,4],\"1028\":[null,5],\"1029\":[null,11],\"1030\":[null,6],\"1031\":[null,14],\"1032\":[null,8],\"1033\":[null,6],\"1034\":[null,2],\"1035\":[null,12],\"1036\":[null,8],\"1037\":[null,21],\"1038\":[null,3],\"1039\":[null,6],\"1040\":[null,4],\"1041\":[null,3],\"1042\":[null,6],\"1043\":[null,1],\"1044\":[null,32],\"1045\":[null,5],\"1046\":[null,9],\"1047\":[null,18],\"1048\":[null,19],\"1049\":[null,11],\"1050\":[null,7],\"1051\":[null,1],\"1052\":[null,3],\"1053\":[null,5],\"1054\":[null,17],\"1055\":[null,5],\"1056\":[null,3],\"1057\":[null,3],\"1058\":[null,7],\"1059\":[null,7],\"1060\":[null,7],\"1061\":[null,5],\"1062\":[null,52],\"1063\":[null,14],\"1064\":[null,5],\"1065\":[null,20],\"1066\":[null,8],\"1067\":[null,10],\"1068\":[null,17],\"1069\":[null,22],\"1070\":[null,5],\"1071\":[null,6],\"1072\":[null,10],\"1073\":[null,4],\"1074\":[null,5],\"1075\":[null,5],\"1076\":[null,12],\"1077\":[null,12],\"1078\":[3],\"1079\":[null,17],\"1080\":[null,5],\"1081\":[null,12],\"1082\":[2],\"1083\":[null,6],\"1084\":[null,8],\"1085\":[null,3],\"1086\":[null,11],\"1087\":[null,6],\"1088\":[2],\"1089\":[null,10],\"1090\":[1],\"1091\":[3],\"1092\":[null,5],\"1093\":[null,9],\"1094\":[null,3],\"1095\":[null,8],\"1096\":[null,2],\"1097\":[null,16],\"1098\":[null,3],\"1099\":[null,4],\"1100\":[null,2],\"1101\":[null,2],\"1102\":[null,2],\"1103\":[null,10],\"1104\":[2],\"1105\":[null,4],\"1106\":[null,7],\"1107\":[null,6],\"1108\":[null,2],\"1109\":[null,1],\"1110\":[null,2],\"1111\":[null,1],\"1112\":[null,1],\"1113\":[null,5],\"1114\":[null,6],\"1115\":[null,2],\"1116\":[null,1],\"1117\":[null,1],\"1118\":[null,1],\"1119\":[null,9],\"1120\":[4],\"1121\":[null,2],\"1122\":[null,10],\"1123\":[null,5],\"1124\":[null,3],\"1125\":[null,12],\"1126\":[null,2],\"1127\":[null,11],\"1128\":[null,15],\"1129\":[null,11],\"1130\":[1],\"1131\":[null,14],\"1132\":[6],\"1133\":[3],\"1134\":[null,28],\"1135\":[3],\"1136\":[null,26],\"1137\":[null,2],\"1138\":[null,6],\"1139\":[null,3],\"1140\":[null,13],\"1141\":[null,20],\"1142\":[3],\"1143\":[null,7],\"1144\":[3],\"1145\":[null,3],\"1146\":[null,3],\"1147\":[null,13],\"1148\":[null,5],\"1149\":[null,7],\"1150\":[null,8],\"1151\":[null,3],\"1152\":[null,2],\"1153\":[null,10],\"1154\":[1],\"1155\":[2],\"1156\":[null,15],\"1157\":[null,17],\"1158\":[null,13],\"1159\":[null,2],\"1160\":[null,5],\"1161\":[null,7],\"1162\":[null,2],\"1163\":[2],\"1164\":[null,12],\"1165\":[null,16],\"1166\":[null,11],\"1167\":[null,5],\"1168\":[null,5],\"1169\":[null,4],\"1170\":[null,4],\"1171\":[null,4],\"1172\":[null,4],\"1173\":[null,3],\"1174\":[null,1],\"1175\":[null,15],\"1176\":[null,12],\"1177\":[null,12],\"1178\":[null,1],\"1179\":[null,14],\"1180\":[null,14],\"1181\":[null,14],\"1182\":[null,16],\"1183\":[null,13],\"1184\":[null,6],\"1185\":[null,12],\"1186\":[null,21],\"1187\":[null,15],\"1188\":[null,11],\"1189\":[null,2],\"1190\":[null,7],\"1191\":[2],\"1192\":[null,2],\"1193\":[null,21],\"1194\":[null,2],\"1195\":[null,7],\"1196\":[null,6],\"1197\":[null,19],\"1198\":[null,12],\"1199\":[null,14],\"1200\":[null,10],\"1201\":[null,10],\"1202\":[null,6],\"1203\":[null,11],\"1204\":[null,9],\"1205\":[null,10],\"1206\":[null,8],\"1207\":[null,3],\"1208\":[2],\"1209\":[null,9],\"1210\":[null,5],\"1211\":[null,6],\"1212\":[null,10],\"1213\":[null,5],\"1214\":[null,4],\"1215\":[null,10],\"1216\":[2],\"1217\":[5],\"1218\":[null,4],\"1219\":[null,1],\"1220\":[null,6],\"1221\":[null,4],\"1222\":[null,5],\"1223\":[null,5],\"1224\":[null,2],\"1225\":[null,4],\"1226\":[null,8],\"1227\":[null,3],\"1228\":[null,4],\"1229\":[4],\"1230\":[null,3],\"1231\":[null,12],\"1232\":[null,9],\"1233\":[null,8],\"1234\":[null,9],\"1235\":[null,15],\"1236\":[4],\"1237\":[null,11],\"1238\":[null,2],\"1239\":[null,8],\"1240\":[null,8],\"1241\":[null,8],\"1242\":[null,2],\"1243\":[null,8],\"1244\":[null,8],\"1245\":[null,7],\"1246\":[null,2],\"1247\":[null,9],\"1248\":[3],\"1249\":[null,7],\"1250\":[2],\"1251\":[null,1],\"1252\":[null,5],\"1253\":[null,7],\"1254\":[null,7],\"1255\":[2],\"1256\":[null,16],\"1257\":[2],\"1258\":[null,15],\"1259\":[2],\"1260\":[3],\"1261\":[null,2],\"1262\":[null,4],\"1263\":[null,8],\"1264\":[null,4],\"1265\":[null,5],\"1266\":[null,8],\"1267\":[null,3],\"1268\":[null,9],\"1269\":[3],\"1270\":[null,3],\"1271\":[null,1],\"1272\":[null,3],\"1273\":[null,8],\"1274\":[null,16],\"1275\":[null,3],\"1276\":[null,1],\"1277\":[null,4],\"1278\":[null,7],\"1279\":[null,12],\"1280\":[null,3],\"1281\":[null,1],\"1282\":[null,21],\"1283\":[null,13],\"1284\":[null,8],\"1285\":[null,3],\"1286\":[null,7],\"1287\":[null,13],\"1288\":[1],\"1289\":[3],\"1290\":[null,23],\"1291\":[null,14],\"1292\":[null,8],\"1293\":[null,9],\"1294\":[null,10],\"1295\":[null,13],\"1296\":[null,4],\"1297\":[null,2],\"1298\":[null,8],\"1299\":[null,2],\"1300\":[null,7],\"1301\":[null,2],\"1302\":[null,5],\"1303\":[null,2],\"1304\":[null,7],\"1305\":[null,2],\"1306\":[null,2],\"1307\":[null,5],\"1308\":[null,7],\"1309\":[null,4],\"1310\":[null,15],\"1311\":[5],\"1312\":[null,2],\"1313\":[null,8],\"1314\":[6],\"1315\":[null,3],\"1316\":[null,2],\"1317\":[null,2],\"1318\":[null,3],\"1319\":[null,3],\"1320\":[null,3],\"1321\":[null,4],\"1322\":[null,7],\"1323\":[null,2],\"1324\":[null,2],\"1325\":[null,23],\"1326\":[null,3],\"1327\":[null,7],\"1328\":[null,2],\"1329\":[null,12],\"1330\":[null,4],\"1331\":[2],\"1332\":[null,2],\"1333\":[null,4],\"1334\":[null,9],\"1335\":[2],\"1336\":[null,27],\"1337\":[null,12],\"1338\":[2],\"1339\":[2],\"1340\":[null,15],\"1341\":[null,3],\"1342\":[null,5],\"1343\":[null,3],\"1344\":[2],\"1345\":[null,13],\"1346\":[null,27],\"1347\":[6],\"1348\":[null,15],\"1349\":[null,2],\"1350\":[null,8],\"1351\":[null,5],\"1352\":[null,5],\"1353\":[null,10],\"1354\":[null,1],\"1355\":[null,2],\"1356\":[null,6],\"1357\":[null,1],\"1358\":[null,1],\"1359\":[null,1],\"1360\":[3],\"1361\":[null,6],\"1362\":[null,4],\"1363\":[null,6],\"1364\":[null,4],\"1365\":[null,4],\"1366\":[null,5],\"1367\":[null,4],\"1368\":[null,16],\"1369\":[2],\"1370\":[3],\"1371\":[null,10],\"1372\":[null,5],\"1373\":[null,27],\"1374\":[null,2],\"1375\":[null,9],\"1376\":[2],\"1377\":[null,7],\"1378\":[2],\"1379\":[null,5],\"1380\":[null,66],\"1381\":[3],\"1382\":[null,7],\"1383\":[null,11],\"1384\":[null,4],\"1385\":[null,6],\"1386\":[null,6],\"1387\":[null,4],\"1388\":[null,10],\"1389\":[null,3],\"1390\":[null,7],\"1391\":[null,4],\"1392\":[null,3],\"1393\":[null,9],\"1394\":[2],\"1395\":[null,13],\"1396\":[null,17],\"1397\":[2],\"1398\":[null,27],\"1399\":[2],\"1400\":[null,2],\"1401\":[null,3],\"1402\":[null,2],\"1403\":[null,4],\"1404\":[1],\"1405\":[null,2],\"1406\":[null,12],\"1407\":[null,16],\"1408\":[null,1],\"1409\":[null,4],\"1410\":[null,33],\"1411\":[null,8],\"1412\":[null,1],\"1413\":[null,19],\"1414\":[null,7],\"1415\":[null,1],\"1416\":[null,2],\"1417\":[null,34],\"1418\":[null,17],\"1419\":[null,10],\"1420\":[null,1],\"1421\":[null,16],\"1422\":[null,7],\"1423\":[null,2],\"1424\":[null,9],\"1425\":[null,8],\"1426\":[null,11],\"1427\":[null,23],\"1428\":[null,8],\"1429\":[null,1],\"1430\":[null,14],\"1431\":[null,7],\"1432\":[null,10],\"1433\":[null,14],\"1434\":[null,18],\"1435\":[null,10],\"1436\":[null,3],\"1437\":[null,8],\"1438\":[null,8],\"1439\":[null,11],\"1440\":[null,11],\"1441\":[null,10],\"1442\":[null,16],\"1443\":[null,22],\"1444\":[null,7],\"1445\":[null,17],\"1446\":[null,7],\"1447\":[2],\"1448\":[null,3],\"1449\":[null,1],\"1450\":[null,1],\"1451\":[null,5],\"1452\":[null,6],\"1453\":[null,3],\"1454\":[null,19],\"1455\":[null,13],\"1456\":[2],\"1457\":[3],\"1458\":[null,2],\"1459\":[null,3],\"1460\":[null,3],\"1461\":[null,5],\"1462\":[null,1],\"1463\":[null,3],\"1464\":[null,4],\"1465\":[null,8],\"1466\":[null,77],\"1467\":[3],\"1468\":[null,1],\"1469\":[null,10],\"1470\":[null,6],\"1471\":[null,1],\"1472\":[null,10],\"1473\":[null,2],\"1474\":[null,69],\"1475\":[null,13],\"1476\":[null,3],\"1477\":[null,6],\"1478\":[null,4],\"1479\":[null,4],\"1480\":[null,1],\"1481\":[null,13],\"1482\":[null,19],\"1483\":[null,4],\"1484\":[null,1],\"1485\":[null,11],\"1486\":[null,2],\"1487\":[null,2],\"1488\":[null,5],\"1489\":[null,5],\"1490\":[null,7],\"1491\":[null,6],\"1492\":[null,5],\"1493\":[null,28],\"1494\":[2],\"1495\":[2],\"1496\":[null,29],\"1497\":[2],\"1498\":[null,2],\"1499\":[null,7],\"1500\":[null,5],\"1501\":[3],\"1502\":[3],\"1503\":[null,5],\"1504\":[3],\"1505\":[null,10],\"1506\":[null,2],\"1507\":[null,4],\"1508\":[3],\"1509\":[null,3],\"1510\":[null,2],\"1511\":[null,10],\"1512\":[3],\"1513\":[null,1],\"1514\":[null,16],\"1515\":[null,21],\"1516\":[null,1],\"1517\":[null,18],\"1518\":[null,41],\"1519\":[null,1],\"1520\":[null,17],\"1521\":[null,21],\"1522\":[null,7],\"1523\":[2],\"1524\":[2],\"1525\":[null,7],\"1526\":[null,7],\"1527\":[4],\"1528\":[null,5],\"1529\":[null,3],\"1530\":[null,4],\"1531\":[null,4],\"1532\":[null,1],\"1533\":[null,5],\"1534\":[null,4],\"1535\":[null,3],\"1536\":[null,3],\"1537\":[null,3],\"1538\":[null,5],\"1539\":[null,6],\"1540\":[2],\"1541\":[2],\"1542\":[null,1],\"1543\":[null,6],\"1544\":[null,12],\"1545\":[null,1],\"1546\":[null,4],\"1547\":[null,23],\"1548\":[2],\"1549\":[null,1],\"1550\":[null,2],\"1551\":[null,9],\"1552\":[null,1],\"1553\":[null,1],\"1554\":[null,1],\"1555\":[null,1],\"1556\":[null,3],\"1557\":[null,3],\"1558\":[null,2],\"1559\":[null,1],\"1560\":[null,2],\"1561\":[null,1],\"1562\":[null,7],\"1563\":[null,2],\"1564\":[null,8],\"1565\":[null,1],\"1566\":[null,3],\"1567\":[null,2],\"1568\":[null,9],\"1569\":[null,1],\"1570\":[null,1],\"1571\":[null,1],\"1572\":[null,5],\"1573\":[null,1],\"1574\":[null,4],\"1575\":[null,1],\"1576\":[null,5],\"1577\":[null,5],\"1578\":[2],\"1579\":[2],\"1580\":[null,4],\"1581\":[null,1],\"1582\":[null,2],\"1583\":[null,3],\"1584\":[2],\"1585\":[null,2],\"1586\":[null,2],\"1587\":[null,2],\"1588\":[null,8],\"1589\":[2],\"1590\":[null,4],\"1591\":[null,6],\"1592\":[null,1],\"1593\":[null,3],\"1594\":[null,1],\"1595\":[null,2],\"1596\":[null,3],\"1597\":[null,2],\"1598\":[null,3],\"1599\":[null,3],\"1600\":[null,2],\"1601\":[null,1],\"1602\":[null,6],\"1603\":[null,4],\"1604\":[null,3],\"1605\":[null,1],\"1606\":[null,1],\"1607\":[null,4],\"1608\":[null,12],\"1609\":[null,5],\"1610\":[null,28],\"1611\":[null,2],\"1612\":[null,8],\"1613\":[null,39],\"1614\":[null,2],\"1615\":[null,9],\"1616\":[null,9],\"1617\":[null,32],\"1618\":[2],\"1619\":[2],\"1620\":[null,3],\"1621\":[null,1],\"1622\":[null,10],\"1623\":[null,6],\"1624\":[null,2],\"1625\":[null,14],\"1626\":[null,15],\"1627\":[null,8],\"1628\":[3],\"1629\":[null,3],\"1630\":[null,6],\"1631\":[null,3],\"1632\":[null,5],\"1633\":[null,5],\"1634\":[null,9],\"1635\":[null,2],\"1636\":[null,11],\"1637\":[null,7],\"1638\":[null,8],\"1639\":[2],\"1640\":[null,10],\"1641\":[null,3],\"1642\":[null,3],\"1643\":[null,2],\"1644\":[null,6],\"1645\":[null,6],\"1646\":[null,4],\"1647\":[null,2],\"1648\":[null,2],\"1649\":[null,3],\"1650\":[null,4],\"1651\":[null,6],\"1652\":[null,4],\"1653\":[2],\"1654\":[null,5],\"1655\":[null,10],\"1656\":[null,10],\"1657\":[null,4],\"1658\":[null,8],\"1659\":[null,7],\"1660\":[null,3],\"1661\":[null,7],\"1662\":[2],\"1663\":[null,18],\"1664\":[null,16],\"1665\":[null,7],\"1666\":[null,6],\"1667\":[null,6],\"1668\":[null,6],\"1669\":[null,6],\"1670\":[2],\"1671\":[null,5],\"1672\":[null,8],\"1673\":[null,12],\"1674\":[null,10],\"1675\":[2],\"1676\":[null,2],\"1677\":[null,3],\"1678\":[null,4],\"1679\":[null,4],\"1680\":[null,5],\"1681\":[null,2],\"1682\":[null,3],\"1683\":[null,3],\"1684\":[null,3],\"1685\":[3],\"1686\":[null,4],\"1687\":[null,13],\"1688\":[null,2],\"1689\":[null,8],\"1690\":[null,6],\"1691\":[3],\"1692\":[3],\"1693\":[null,5],\"1694\":[null,10],\"1695\":[null,11],\"1696\":[3],\"1697\":[null,16],\"1698\":[3],\"1699\":[null,7],\"1700\":[5],\"1701\":[null,10],\"1702\":[null,7],\"1703\":[null,7],\"1704\":[null,17],\"1705\":[5],\"1706\":[null,8],\"1707\":[3],\"1708\":[null,9],\"1709\":[5],\"1710\":[null,13],\"1711\":[null,8],\"1712\":[null,13],\"1713\":[4],\"1714\":[null,9],\"1715\":[null,10],\"1716\":[null,9],\"1717\":[2],\"1718\":[null,7],\"1719\":[null,2],\"1720\":[null,3],\"1721\":[null,3],\"1722\":[null,3],\"1723\":[null,3],\"1724\":[null,3],\"1725\":[2],\"1726\":[null,5],\"1727\":[null,7],\"1728\":[null,7],\"1729\":[null,5],\"1730\":[2],\"1731\":[null,5],\"1732\":[2],\"1733\":[null,8],\"1734\":[null,9],\"1735\":[null,9],\"1736\":[null,7],\"1737\":[null,6],\"1738\":[2],\"1739\":[null,6],\"1740\":[null,3],\"1741\":[null,6],\"1742\":[null,8],\"1743\":[2],\"1744\":[null,11],\"1745\":[null,9],\"1746\":[2],\"1747\":[null,2],\"1748\":[null,1],\"1749\":[null,1],\"1750\":[null,1],\"1751\":[null,1],\"1752\":[null,4],\"1753\":[2],\"1754\":[null,4],\"1755\":[2],\"1756\":[null,8],\"1757\":[null,3],\"1758\":[2],\"1759\":[null,8],\"1760\":[2],\"1761\":[null,14],\"1762\":[5],\"1763\":[null,11],\"1764\":[null,11],\"1765\":[2],\"1766\":[4],\"1767\":[3],\"1768\":[null,17],\"1769\":[null,17],\"1770\":[null,18],\"1771\":[null,11],\"1772\":[null,18],\"1773\":[2],\"1774\":[null,7],\"1775\":[null,25],\"1776\":[null,18],\"1777\":[null,11],\"1778\":[null,14],\"1779\":[null,13],\"1780\":[null,7],\"1781\":[2],\"1782\":[null,4],\"1783\":[null,3],\"1784\":[null,1],\"1785\":[4],\"1786\":[null,9],\"1787\":[null,8],\"1788\":[null,7],\"1789\":[null,2],\"1790\":[null,10],\"1791\":[null,10],\"1792\":[null,9],\"1793\":[null,7],\"1794\":[null,13],\"1795\":[2],\"1796\":[null,10],\"1797\":[null,16],\"1798\":[null,4],\"1799\":[null,11],\"1800\":[null,14],\"1801\":[null,19],\"1802\":[null,15],\"1803\":[null,5],\"1804\":[null,12],\"1805\":[null,7],\"1806\":[null,12],\"1807\":[null,14],\"1808\":[null,4],\"1809\":[2],\"1810\":[null,13],\"1811\":[null,11],\"1812\":[null,10],\"1813\":[2],\"1814\":[5],\"1815\":[null,12],\"1816\":[null,14],\"1817\":[null,6],\"1818\":[null,3],\"1819\":[null,3],\"1820\":[null,3],\"1821\":[null,13],\"1822\":[null,7],\"1823\":[null,16],\"1824\":[null,12],\"1825\":[null,5],\"1826\":[null,8],\"1827\":[null,7],\"1828\":[null,5],\"1829\":[null,7],\"1830\":[null,7],\"1831\":[null,6],\"1832\":[5],\"1833\":[null,12],\"1834\":[null,2],\"1835\":[null,16],\"1836\":[null,12],\"1837\":[null,5],\"1838\":[null,5],\"1839\":[null,10],\"1840\":[null,13],\"1841\":[5],\"1842\":[null,2],\"1843\":[null,12],\"1844\":[null,11],\"1845\":[null,6],\"1846\":[null,8],\"1847\":[null,7],\"1848\":[null,4],\"1849\":[null,5],\"1850\":[2],\"1851\":[2],\"1852\":[3],\"1853\":[null,4],\"1854\":[null,13],\"1855\":[null,5],\"1856\":[null,8],\"1857\":[null,31],\"1858\":[null,6],\"1859\":[2],\"1860\":[null,8],\"1861\":[null,8],\"1862\":[null,3],\"1863\":[null,2],\"1864\":[null,4],\"1865\":[null,4],\"1866\":[null,2],\"1867\":[null,10],\"1868\":[null,5],\"1869\":[null,2],\"1870\":[null,6],\"1871\":[null,3],\"1872\":[null,9],\"1873\":[null,5],\"1874\":[null,3],\"1875\":[null,2],\"1876\":[2],\"1877\":[null,3],\"1878\":[null,8],\"1879\":[null,3],\"1880\":[null,6],\"1881\":[2],\"1882\":[3],\"1883\":[null,3],\"1884\":[null,3],\"1885\":[null,11],\"1886\":[null,4],\"1887\":[null,2],\"1888\":[null,2],\"1889\":[null,5],\"1890\":[3],\"1891\":[null,2],\"1892\":[null,2],\"1893\":[null,2],\"1894\":[null,2],\"1895\":[null,2],\"1896\":[null,2],\"1897\":[null,8],\"1898\":[2],\"1899\":[null,2],\"1900\":[null,8],\"1901\":[null,4],\"1902\":[null,5],\"1903\":[null,2],\"1904\":[null,4],\"1905\":[null,9],\"1906\":[null,3],\"1907\":[null,9],\"1908\":[null,5],\"1909\":[null,4],\"1910\":[null,4],\"1911\":[2],\"1912\":[3],\"1913\":[null,7],\"1914\":[null,5],\"1915\":[null,9],\"1916\":[3],\"1917\":[null,9],\"1918\":[null,3],\"1919\":[3],\"1920\":[null,7],\"1921\":[null,3],\"1922\":[null,8],\"1923\":[3],\"1924\":[null,5],\"1925\":[null,8],\"1926\":[null,5],\"1927\":[3],\"1928\":[null,3],\"1929\":[null,5],\"1930\":[null,10],\"1931\":[null,3],\"1932\":[null,5],\"1933\":[null,5],\"1934\":[null,3],\"1935\":[3],\"1936\":[null,2],\"1937\":[null,5],\"1938\":[null,5],\"1939\":[null,3],\"1940\":[null,5],\"1941\":[null,7],\"1942\":[null,7],\"1943\":[2],\"1944\":[null,5],\"1945\":[2],\"1946\":[null,7],\"1947\":[null,6],\"1948\":[null,16],\"1949\":[null,7],\"1950\":[null,5],\"1951\":[null,8],\"1952\":[null,7],\"1953\":[null,5],\"1954\":[null,10],\"1955\":[null,14],\"1956\":[2],\"1957\":[null,12],\"1958\":[null,7],\"1959\":[2],\"1960\":[null,9],\"1961\":[2],\"1962\":[null,8],\"1963\":[null,4],\"1964\":[null,3],\"1965\":[null,14],\"1966\":[null,13],\"1967\":[null,6],\"1968\":[null,2],\"1969\":[null,5],\"1970\":[null,15],\"1971\":[null,5],\"1972\":[null,28],\"1973\":[null,7],\"1974\":[null,9],\"1975\":[null,11],\"1976\":[2],\"1977\":[null,3],\"1978\":[null,7],\"1979\":[null,2],\"1980\":[null,14],\"1981\":[null,7],\"1982\":[null,5],\"1983\":[null,14],\"1984\":[null,7],\"1985\":[null,7],\"1986\":[null,5],\"1987\":[null,4],\"1988\":[null,5],\"1989\":[null,6],\"1990\":[2],\"1991\":[null,2],\"1992\":[null,3],\"1993\":[null,18],\"1994\":[null,11],\"1995\":[null,5],\"1996\":[2],\"1997\":[null,4],\"1998\":[null,2],\"1999\":[null,13],\"2000\":[null,5],\"2001\":[null,7],\"2002\":[null,5],\"2003\":[1],\"2004\":[5],\"2005\":[null,9],\"2006\":[5],\"2007\":[null,16],\"2008\":[null,8],\"2009\":[null,3],\"2010\":[null,28],\"2011\":[4],\"2012\":[null,25],\"2013\":[2],\"2014\":[4],\"2015\":[null,7],\"2016\":[null,6],\"2017\":[null,6],\"2018\":[null,6],\"2019\":[null,2],\"2020\":[null,4],\"2021\":[null,8],\"2022\":[null,15],\"2023\":[null,4],\"2024\":[null,4],\"2025\":[null,17],\"2026\":[null,4],\"2027\":[null,11],\"2028\":[null,10],\"2029\":[4],\"2030\":[null,11],\"2031\":[null,5],\"2032\":[null,16],\"2033\":[3],\"2034\":[null,9],\"2035\":[null,18],\"2036\":[null,9],\"2037\":[1],\"2038\":[1],\"2039\":[3],\"2040\":[10],\"2041\":[null,18],\"2042\":[6],\"2043\":[null,18],\"2044\":[2],\"2045\":[null,11],\"2046\":[3],\"2047\":[null,4],\"2048\":[null,4],\"2049\":[null,2],\"2050\":[null,4],\"2051\":[null,5],\"2052\":[null,5],\"2053\":[null,8],\"2054\":[null,6],\"2055\":[null,10],\"2056\":[5],\"2057\":[null,3],\"2058\":[null,5],\"2059\":[8],\"2060\":[null,16],\"2061\":[6],\"2062\":[null,6],\"2063\":[6],\"2064\":[null,9],\"2065\":[6],\"2066\":[null,2],\"2067\":[6],\"2068\":[null,8],\"2069\":[null,10],\"2070\":[4],\"2071\":[null,10],\"2072\":[null,12],\"2073\":[null,9],\"2074\":[null,5],\"2075\":[null,9],\"2076\":[null,8],\"2077\":[7],\"2078\":[null,7],\"2079\":[5],\"2080\":[null,4],\"2081\":[1],\"2082\":[4],\"2083\":[null,7],\"2084\":[null,1],\"2085\":[null,5],\"2086\":[null,2],\"2087\":[null,9],\"2088\":[null,3],\"2089\":[null,1],\"2090\":[null,2],\"2091\":[null,15],\"2092\":[null,9],\"2093\":[null,11],\"2094\":[null,10],\"2095\":[null,3],\"2096\":[null,43],\"2097\":[null,2],\"2098\":[null,1],\"2099\":[null,9],\"2100\":[null,4],\"2101\":[null,2],\"2102\":[null,3],\"2103\":[4],\"2104\":[null,4],\"2105\":[null,2],\"2106\":[null,1],\"2107\":[null,2],\"2108\":[null,1],\"2109\":[null,3],\"2110\":[null,2],\"2111\":[null,39],\"2112\":[null,3],\"2113\":[null,3],\"2114\":[4],\"2115\":[3],\"2116\":[null,22],\"2117\":[null,13],\"2118\":[null,2],\"2119\":[null,13],\"2120\":[3],\"2121\":[null,27],\"2122\":[2],\"2123\":[null,3],\"2124\":[null,3],\"2125\":[null,1],\"2126\":[null,2],\"2127\":[null,3],\"2128\":[null,5],\"2129\":[null,10],\"2130\":[null,5],\"2131\":[null,8],\"2132\":[null,5],\"2133\":[null,3],\"2134\":[null,3],\"2135\":[null,3],\"2136\":[null,28],\"2137\":[3],\"2138\":[null,3],\"2139\":[null,7],\"2140\":[null,3],\"2141\":[null,4],\"2142\":[null,3],\"2143\":[null,13],\"2144\":[null,11],\"2145\":[1],\"2146\":[1],\"2147\":[1],\"2148\":[null,8],\"2149\":[null,16],\"2150\":[null,5],\"2151\":[null,2],\"2152\":[null,6],\"2153\":[null,2],\"2154\":[null,6],\"2155\":[null,2],\"2156\":[null,2],\"2157\":[null,2],\"2158\":[null,1],\"2159\":[null,1],\"2160\":[null,1],\"2161\":[null,1],\"2162\":[null,1],\"2163\":[null,2],\"2164\":[1],\"2165\":[null,17],\"2166\":[null,2],\"2167\":[null,4],\"2168\":[null,2],\"2169\":[null,4],\"2170\":[null,1],\"2171\":[null,11],\"2172\":[1],\"2173\":[null,1],\"2174\":[null,21],\"2175\":[null,6],\"2176\":[null,1],\"2177\":[null,56],\"2178\":[null,11],\"2179\":[null,9],\"2180\":[1],\"2181\":[null,2],\"2182\":[null,43],\"2183\":[1],\"2184\":[null,3],\"2185\":[null,50],\"2186\":[null,1],\"2187\":[null,5],\"2188\":[null,29],\"2189\":[null,10],\"2190\":[2],\"2191\":[4],\"2192\":[null,3],\"2193\":[4],\"2194\":[null,5],\"2195\":[null,4],\"2196\":[null,11],\"2197\":[null,12],\"2198\":[null,12],\"2199\":[null,7],\"2200\":[null,9],\"2201\":[null,8],\"2202\":[null,9],\"2203\":[null,10],\"2204\":[null,5],\"2205\":[null,6],\"2206\":[null,5],\"2207\":[null,6],\"2208\":[null,5],\"2209\":[null,11],\"2210\":[null,9],\"2211\":[null,7],\"2212\":[null,10],\"2213\":[4],\"2214\":[null,5],\"2215\":[null,7],\"2216\":[null,15],\"2217\":[null,7],\"2218\":[6],\"2219\":[null,2],\"2220\":[null,9],\"2221\":[null,7],\"2222\":[null,5],\"2223\":[null,18],\"2224\":[null,14],\"2225\":[4],\"2226\":[null,4],\"2227\":[4],\"2228\":[null,4],\"2229\":[null,8],\"2230\":[null,4],\"2231\":[null,3],\"2232\":[null,10],\"2233\":[null,2],\"2234\":[null,9],\"2235\":[null,10],\"2236\":[null,7],\"2237\":[4],\"2238\":[null,5],\"2239\":[null,2],\"2240\":[null,10],\"2241\":[null,5],\"2242\":[null,26],\"2243\":[null,10],\"2244\":[null,4],\"2245\":[null,17],\"2246\":[null,5],\"2247\":[null,23],\"2248\":[null,8],\"2249\":[null,4],\"2250\":[null,9],\"2251\":[null,3],\"2252\":[null,3],\"2253\":[null,12],\"2254\":[null,2],\"2255\":[null,6],\"2256\":[null,7],\"2257\":[null,10],\"2258\":[null,6],\"2259\":[4],\"2260\":[null,6],\"2261\":[null,1],\"2262\":[null,12],\"2263\":[null,1],\"2264\":[null,8],\"2265\":[null,8],\"2266\":[null,10],\"2267\":[null,13],\"2268\":[null,1],\"2269\":[null,12],\"2270\":[4],\"2271\":[null,8],\"2272\":[null,1],\"2273\":[null,10],\"2274\":[null,4],\"2275\":[null,9],\"2276\":[null,6],\"2277\":[null,6],\"2278\":[null,4],\"2279\":[null,8],\"2280\":[null,1],\"2281\":[null,7],\"2282\":[null,7],\"2283\":[null,1],\"2284\":[null,3],\"2285\":[null,7],\"2286\":[null,7],\"2287\":[null,7],\"2288\":[null,11],\"2289\":[4],\"2290\":[null,10],\"2291\":[null,1],\"2292\":[null,15],\"2293\":[null,11],\"2294\":[null,6],\"2295\":[null,1],\"2296\":[null,7],\"2297\":[null,9],\"2298\":[null,2],\"2299\":[null,7],\"2300\":[null,6],\"2301\":[null,8],\"2302\":[null,1],\"2303\":[null,7],\"2304\":[null,7],\"2305\":[6],\"2306\":[null,16],\"2307\":[null,15],\"2308\":[null,7],\"2309\":[null,7],\"2310\":[5],\"2311\":[null,4],\"2312\":[null,2],\"2313\":[null,3],\"2314\":[null,4],\"2315\":[null,7],\"2316\":[null,25],\"2317\":[null,3],\"2318\":[null,2],\"2319\":[null,6],\"2320\":[null,3],\"2321\":[null,8],\"2322\":[null,8],\"2323\":[null,6],\"2324\":[null,2],\"2325\":[null,6],\"2326\":[null,7],\"2327\":[null,8],\"2328\":[null,6],\"2329\":[null,3],\"2330\":[null,2],\"2331\":[null,6],\"2332\":[null,5],\"2333\":[null,7],\"2334\":[null,6],\"2335\":[null,6],\"2336\":[null,4],\"2337\":[null,11],\"2338\":[null,2],\"2339\":[null,9],\"2340\":[null,3],\"2341\":[null,6],\"2342\":[null,6],\"2343\":[null,13],\"2344\":[4],\"2345\":[null,8],\"2346\":[2],\"2347\":[7],\"2348\":[null,6],\"2349\":[null,6],\"2350\":[null,8],\"2351\":[null,5],\"2352\":[null,9],\"2353\":[null,3],\"2354\":[null,5],\"2355\":[null,2],\"2356\":[null,3],\"2357\":[5],\"2358\":[null,8],\"2359\":[null,7],\"2360\":[null,6],\"2361\":[null,4],\"2362\":[null,23],\"2363\":[null,4],\"2364\":[null,4],\"2365\":[null,19],\"2366\":[null,21],\"2367\":[null,3],\"2368\":[null,4],\"2369\":[null,5],\"2370\":[null,4],\"2371\":[null,8],\"2372\":[2],\"2373\":[3],\"2374\":[null,12],\"2375\":[null,15],\"2376\":[3],\"2377\":[null,12],\"2378\":[2],\"2379\":[null,9],\"2380\":[null,15],\"2381\":[null,10],\"2382\":[null,6],\"2383\":[2],\"2384\":[null,2],\"2385\":[null,3],\"2386\":[null,5],\"2387\":[null,6],\"2388\":[null,10],\"2389\":[null,17],\"2390\":[null,20],\"2391\":[null,15],\"2392\":[null,13],\"2393\":[null,10],\"2394\":[null,14],\"2395\":[null,8],\"2396\":[null,7],\"2397\":[2],\"2398\":[null,7],\"2399\":[null,3],\"2400\":[null,2],\"2401\":[null,3],\"2402\":[null,5],\"2403\":[null,3],\"2404\":[null,4],\"2405\":[null,4],\"2406\":[null,6],\"2407\":[null,5],\"2408\":[null,2],\"2409\":[null,3],\"2410\":[null,6],\"2411\":[null,4],\"2412\":[null,5],\"2413\":[null,4],\"2414\":[null,9],\"2415\":[null,3],\"2416\":[null,3],\"2417\":[null,3],\"2418\":[null,5],\"2419\":[null,2],\"2420\":[null,3],\"2421\":[null,2],\"2422\":[null,3],\"2423\":[null,3],\"2424\":[null,3],\"2425\":[null,3],\"2426\":[null,6],\"2427\":[null,5],\"2428\":[null,4],\"2429\":[null,4],\"2430\":[null,5],\"2431\":[null,5],\"2432\":[null,3],\"2433\":[null,3],\"2434\":[null,3],\"2435\":[null,6],\"2436\":[null,5],\"2437\":[null,3],\"2438\":[null,5],\"2439\":[null,6],\"2440\":[null,6],\"2441\":[2],\"2442\":[4],\"2443\":[null,3],\"2444\":[null,13],\"2445\":[null,7],\"2446\":[null,2],\"2447\":[null,11],\"2448\":[null,8],\"2449\":[null,9],\"2450\":[null,13],\"2451\":[6],\"2452\":[null,14],\"2453\":[null,7],\"2454\":[4],\"2455\":[null,6],\"2456\":[null,2],\"2457\":[null,9],\"2458\":[null,5],\"2459\":[null,24],\"2460\":[5],\"2461\":[null,7],\"2462\":[null,2],\"2463\":[null,4],\"2464\":[null,2],\"2465\":[null,2],\"2466\":[5],\"2467\":[null,4],\"2468\":[null,5],\"2469\":[null,5],\"2470\":[null,5],\"2471\":[null,5],\"2472\":[null,2],\"2473\":[null,7],\"2474\":[null,3],\"2475\":[null,6],\"2476\":[null,1],\"2477\":[null,17],\"2478\":[null,6],\"2479\":[7],\"2480\":[null,2],\"2481\":[7],\"2482\":[null,2],\"2483\":[null,4],\"2484\":[null,4],\"2485\":[null,2],\"2486\":[null,4],\"2487\":[null,4],\"2488\":[null,2],\"2489\":[null,7],\"2490\":[null,12],\"2491\":[null,3],\"2492\":[null,4],\"2493\":[null,6],\"2494\":[null,2],\"2495\":[null,11],\"2496\":[null,7],\"2497\":[null,2],\"2498\":[null,5],\"2499\":[null,5],\"2500\":[null,2],\"2501\":[null,11],\"2502\":[null,12],\"2503\":[7],\"2504\":[null,6],\"2505\":[null,3],\"2506\":[null,3],\"2507\":[null,8],\"2508\":[null,6],\"2509\":[null,3],\"2510\":[null,2],\"2511\":[null,2],\"2512\":[null,10],\"2513\":[null,11],\"2514\":[null,10],\"2515\":[null,11],\"2516\":[6],\"2517\":[null,3],\"2518\":[null,3],\"2519\":[null,6],\"2520\":[null,15],\"2521\":[null,11],\"2522\":[null,6],\"2523\":[2],\"2524\":[4],\"2525\":[null,2],\"2526\":[null,8],\"2527\":[null,22],\"2528\":[null,27],\"2529\":[null,20],\"2530\":[null,5],\"2531\":[null,4],\"2532\":[null,7],\"2533\":[7],\"2534\":[null,9],\"2535\":[5],\"2536\":[null,1],\"2537\":[null,7],\"2538\":[null,19],\"2539\":[null,3],\"2540\":[null,20],\"2541\":[null,2],\"2542\":[null,6],\"2543\":[null,15],\"2544\":[null,11],\"2545\":[null,5],\"2546\":[null,5],\"2547\":[null,10],\"2548\":[null,1],\"2549\":[null,7],\"2550\":[null,2],\"2551\":[null,2],\"2552\":[null,6],\"2553\":[null,20],\"2554\":[null,1],\"2555\":[null,15],\"2556\":[null,8],\"2557\":[null,6],\"2558\":[null,5],\"2559\":[null,4],\"2560\":[6],\"2561\":[null,2],\"2562\":[null,3],\"2563\":[null,5],\"2564\":[5],\"2565\":[null,2],\"2566\":[10],\"2567\":[null,6],\"2568\":[null,9],\"2569\":[null,16],\"2570\":[4],\"2571\":[null,6],\"2572\":[4],\"2573\":[null,6],\"2574\":[null,7],\"2575\":[4],\"2576\":[null,6],\"2577\":[6],\"2578\":[null,21],\"2579\":[null,7],\"2580\":[null,5],\"2581\":[null,5],\"2582\":[null,2],\"2583\":[null,7],\"2584\":[null,8],\"2585\":[null,10],\"2586\":[null,9],\"2587\":[null,5],\"2588\":[null,10],\"2589\":[null,5],\"2590\":[null,4],\"2591\":[null,4],\"2592\":[2],\"2593\":[4],\"2594\":[null,14],\"2595\":[null,9],\"2596\":[null,9],\"2597\":[null,9],\"2598\":[null,10],\"2599\":[null,8],\"2600\":[null,8],\"2601\":[null,7],\"2602\":[null,7],\"2603\":[3],\"2604\":[null,8],\"2605\":[4],\"2606\":[null,5],\"2607\":[4],\"2608\":[null,5],\"2609\":[4],\"2610\":[null,4],\"2611\":[4],\"2612\":[null,4],\"2613\":[7],\"2614\":[null,19],\"2615\":[null,19],\"2616\":[6],\"2617\":[null,2],\"2618\":[null,4],\"2619\":[null,4],\"2620\":[null,5],\"2621\":[5],\"2622\":[null,5],\"2623\":[null,7],\"2624\":[null,1],\"2625\":[5],\"2626\":[null,6],\"2627\":[null,10],\"2628\":[null,7],\"2629\":[6],\"2630\":[null,4],\"2631\":[6],\"2632\":[null,4],\"2633\":[4],\"2634\":[null,2],\"2635\":[null,13],\"2636\":[4],\"2637\":[null,10],\"2638\":[3],\"2639\":[4],\"2640\":[null,4],\"2641\":[7],\"2642\":[null,2],\"2643\":[null,12],\"2644\":[7],\"2645\":[null,2],\"2646\":[null,12],\"2647\":[2],\"2648\":[2],\"2649\":[null,10],\"2650\":[null,7],\"2651\":[2],\"2652\":[null,6],\"2653\":[null,8],\"2654\":[null,3],\"2655\":[null,3],\"2656\":[null,2],\"2657\":[null,3],\"2658\":[2],\"2659\":[null,3],\"2660\":[null,5],\"2661\":[null,9],\"2662\":[2],\"2663\":[null,7],\"2664\":[null,4],\"2665\":[null,11],\"2666\":[null,8],\"2667\":[null,6],\"2668\":[null,7],\"2669\":[null,4],\"2670\":[null,12],\"2671\":[null,4],\"2672\":[null,4],\"2673\":[null,4],\"2674\":[null,2],\"2675\":[null,1],\"2676\":[null,1],\"2677\":[null,1],\"2678\":[null,1],\"2679\":[3],\"2680\":[null,8],\"2681\":[null,3],\"2682\":[null,7],\"2683\":[null,7],\"2684\":[null,8],\"2685\":[3],\"2686\":[null,8],\"2687\":[null,4],\"2688\":[null,5],\"2689\":[null,4],\"2690\":[3],\"2691\":[null,2],\"2692\":[null,6],\"2693\":[null,5],\"2694\":[null,7],\"2695\":[null,2],\"2696\":[null,9],\"2697\":[null,10],\"2698\":[null,5],\"2699\":[null,4],\"2700\":[null,1],\"2701\":[3],\"2702\":[null,2],\"2703\":[null,9],\"2704\":[null,2],\"2705\":[null,7],\"2706\":[null,17],\"2707\":[6],\"2708\":[null,7],\"2709\":[null,15],\"2710\":[3],\"2711\":[null,2],\"2712\":[null,24],\"2713\":[2],\"2714\":[4],\"2715\":[null,15],\"2716\":[null,2],\"2717\":[null,2],\"2718\":[null,2],\"2719\":[null,3],\"2720\":[null,3],\"2721\":[null,1],\"2722\":[null,1],\"2723\":[3],\"2724\":[4],\"2725\":[1],\"2726\":[2],\"2727\":[6],\"2728\":[null,8],\"2729\":[null,11],\"2730\":[null,7],\"2731\":[null,2],\"2732\":[null,2],\"2733\":[null,12],\"2734\":[null,9],\"2735\":[null,2],\"2736\":[null,3],\"2737\":[null,23],\"2738\":[null,2],\"2739\":[null,6],\"2740\":[null,7],\"2741\":[null,5],\"2742\":[null,2],\"2743\":[null,6],\"2744\":[null,8],\"2745\":[null,3],\"2746\":[null,6],\"2747\":[null,10],\"2748\":[null,3],\"2749\":[null,9],\"2750\":[null,13],\"2751\":[2],\"2752\":[null,3],\"2753\":[3],\"2754\":[null,2],\"2755\":[null,10],\"2756\":[null,15],\"2757\":[null,15],\"2758\":[null,3],\"2759\":[null,15],\"2760\":[null,7],\"2761\":[null,4],\"2762\":[null,11],\"2763\":[null,4],\"2764\":[null,9],\"2765\":[null,15],\"2766\":[null,20],\"2767\":[null,37],\"2768\":[2],\"2769\":[null,2],\"2770\":[null,18],\"2771\":[null,4],\"2772\":[null,12],\"2773\":[null,14],\"2774\":[null,2],\"2775\":[null,6],\"2776\":[null,13],\"2777\":[null,2],\"2778\":[null,8],\"2779\":[null,3],\"2780\":[null,7],\"2781\":[null,5],\"2782\":[null,5],\"2783\":[null,14],\"2784\":[3],\"2785\":[null,2],\"2786\":[null,5],\"2787\":[null,16],\"2788\":[3],\"2789\":[null,9],\"2790\":[null,4],\"2791\":[null,11],\"2792\":[null,7],\"2793\":[null,7],\"2794\":[null,15],\"2795\":[3],\"2796\":[null,8],\"2797\":[null,13],\"2798\":[null,2],\"2799\":[null,12],\"2800\":[null,3],\"2801\":[null,2],\"2802\":[null,11],\"2803\":[null,8],\"2804\":[3],\"2805\":[null,16],\"2806\":[null,4],\"2807\":[null,2],\"2808\":[null,3],\"2809\":[null,2],\"2810\":[null,3],\"2811\":[null,6],\"2812\":[3],\"2813\":[null,19],\"2814\":[null,5],\"2815\":[null,12],\"2816\":[3],\"2817\":[null,8],\"2818\":[null,1],\"2819\":[null,25],\"2820\":[null,1],\"2821\":[null,14],\"2822\":[3],\"2823\":[null,2],\"2824\":[null,15],\"2825\":[null,3],\"2826\":[null,6],\"2827\":[null,5],\"2828\":[null,8],\"2829\":[null,2],\"2830\":[null,6],\"2831\":[null,2],\"2832\":[null,6],\"2833\":[null,4],\"2834\":[null,11],\"2835\":[null,2],\"2836\":[null,14],\"2837\":[null,2],\"2838\":[null,16],\"2839\":[null,2],\"2840\":[null,4],\"2841\":[null,2],\"2842\":[null,3],\"2843\":[null,4],\"2844\":[null,3],\"2845\":[null,4],\"2846\":[null,7],\"2847\":[null,6],\"2848\":[null,1],\"2849\":[2],\"2850\":[null,7],\"2851\":[null,1],\"2852\":[3],\"2853\":[null,3],\"2854\":[null,6],\"2855\":[null,5],\"2856\":[null,6],\"2857\":[null,7],\"2858\":[null,3],\"2859\":[null,3],\"2860\":[null,2],\"2861\":[null,5],\"2862\":[null,2],\"2863\":[null,3],\"2864\":[null,7],\"2865\":[null,4],\"2866\":[null,12],\"2867\":[null,8],\"2868\":[null,12],\"2869\":[null,4],\"2870\":[null,6],\"2871\":[3],\"2872\":[null,3],\"2873\":[null,2],\"2874\":[null,3],\"2875\":[null,2],\"2876\":[null,4],\"2877\":[3],\"2878\":[null,2],\"2879\":[null,6],\"2880\":[null,12],\"2881\":[null,4],\"2882\":[null,7],\"2883\":[null,4],\"2884\":[null,3],\"2885\":[null,4],\"2886\":[null,7],\"2887\":[3],\"2888\":[null,3],\"2889\":[null,5],\"2890\":[null,7],\"2891\":[null,5],\"2892\":[null,6],\"2893\":[null,14],\"2894\":[null,15],\"2895\":[null,4],\"2896\":[null,5],\"2897\":[null,8],\"2898\":[null,12],\"2899\":[null,11],\"2900\":[null,15],\"2901\":[null,12],\"2902\":[null,7],\"2903\":[null,10],\"2904\":[null,11],\"2905\":[3],\"2906\":[null,3],\"2907\":[null,8],\"2908\":[null,8],\"2909\":[null,8],\"2910\":[null,9],\"2911\":[null,5],\"2912\":[null,12],\"2913\":[null,11],\"2914\":[null,4],\"2915\":[null,9],\"2916\":[null,11],\"2917\":[null,3],\"2918\":[5],\"2919\":[null,6],\"2920\":[null,8],\"2921\":[null,6],\"2922\":[null,12],\"2923\":[null,11],\"2924\":[null,7],\"2925\":[null,10],\"2926\":[null,9],\"2927\":[null,13],\"2928\":[null,13],\"2929\":[null,11],\"2930\":[null,8],\"2931\":[null,5],\"2932\":[null,6],\"2933\":[null,17],\"2934\":[null,10],\"2935\":[null,16],\"2936\":[3],\"2937\":[null,6],\"2938\":[null,9],\"2939\":[null,10],\"2940\":[null,14],\"2941\":[null,8],\"2942\":[null,1],\"2943\":[null,2],\"2944\":[null,5],\"2945\":[null,6],\"2946\":[null,10],\"2947\":[3],\"2948\":[null,10],\"2949\":[null,11],\"2950\":[null,10],\"2951\":[3],\"2952\":[null,6],\"2953\":[null,13],\"2954\":[null,11],\"2955\":[4],\"2956\":[null,12],\"2957\":[null,7],\"2958\":[null,11],\"2959\":[null,14],\"2960\":[null,10],\"2961\":[2],\"2962\":[null,7],\"2963\":[null,8],\"2964\":[null,5],\"2965\":[null,7],\"2966\":[null,10],\"2967\":[2],\"2968\":[null,7],\"2969\":[null,11],\"2970\":[null,6],\"2971\":[null,17],\"2972\":[null,38],\"2973\":[null,12],\"2974\":[null,6],\"2975\":[null,3],\"2976\":[null,6],\"2977\":[null,6],\"2978\":[null,5],\"2979\":[null,2],\"2980\":[3],\"2981\":[null,8],\"2982\":[null,2],\"2983\":[null,17],\"2984\":[null,11],\"2985\":[3],\"2986\":[null,6],\"2987\":[null,2],\"2988\":[null,16],\"2989\":[3],\"2990\":[null,7],\"2991\":[null,2],\"2992\":[null,16],\"2993\":[null,11],\"2994\":[null,12],\"2995\":[2],\"2996\":[null,6],\"2997\":[null,6],\"2998\":[null,6],\"2999\":[null,9],\"3000\":[null,8],\"3001\":[null,2],\"3002\":[null,1],\"3003\":[null,4],\"3004\":[null,6],\"3005\":[null,6],\"3006\":[null,6],\"3007\":[null,6],\"3008\":[null,11],\"3009\":[null,13],\"3010\":[null,14],\"3011\":[null,7],\"3012\":[null,14],\"3013\":[null,20],\"3014\":[null,2],\"3015\":[null,6],\"3016\":[null,5],\"3017\":[null,24],\"3018\":[2],\"3019\":[null,26],\"3020\":[null,3],\"3021\":[null,1],\"3022\":[null,17],\"3023\":[null,1],\"3024\":[null,15],\"3025\":[null,7],\"3026\":[3],\"3027\":[null,5],\"3028\":[null,16],\"3029\":[null,10],\"3030\":[null,9],\"3031\":[null,4],\"3032\":[null,30],\"3033\":[null,10],\"3034\":[null,15],\"3035\":[null,16],\"3036\":[null,9],\"3037\":[4],\"3038\":[null,4],\"3039\":[null,1],\"3040\":[null,9],\"3041\":[null,10],\"3042\":[null,13],\"3043\":[3],\"3044\":[null,12],\"3045\":[null,26],\"3046\":[null,11],\"3047\":[null,13],\"3048\":[null,21],\"3049\":[3],\"3050\":[null,13],\"3051\":[null,23],\"3052\":[null,19],\"3053\":[null,25],\"3054\":[null,5],\"3055\":[null,9],\"3056\":[null,8],\"3057\":[null,5],\"3058\":[null,7],\"3059\":[null,18],\"3060\":[2],\"3061\":[null,3],\"3062\":[null,4],\"3063\":[null,10],\"3064\":[2],\"3065\":[null,1],\"3066\":[null,2],\"3067\":[null,3],\"3068\":[null,3],\"3069\":[null,5],\"3070\":[null,1],\"3071\":[null,4],\"3072\":[null,3],\"3073\":[null,3],\"3074\":[null,2],\"3075\":[null,14],\"3076\":[null,6],\"3077\":[null,1],\"3078\":[null,4],\"3079\":[null,1],\"3080\":[null,4],\"3081\":[null,1],\"3082\":[null,10],\"3083\":[null,5],\"3084\":[null,6],\"3085\":[null,2],\"3086\":[null,3],\"3087\":[1],\"3088\":[4],\"3089\":[null,6],\"3090\":[null,4],\"3091\":[null,9],\"3092\":[null,4],\"3093\":[2],\"3094\":[null,13],\"3095\":[null,9],\"3096\":[2],\"3097\":[5],\"3098\":[2],\"3099\":[null,7],\"3100\":[null,10],\"3101\":[null,21],\"3102\":[null,15],\"3103\":[null,12],\"3104\":[2],\"3105\":[null,8],\"3106\":[null,4],\"3107\":[null,7],\"3108\":[5],\"3109\":[2],\"3110\":[null,3],\"3111\":[null,19],\"3112\":[null,6],\"3113\":[null,11],\"3114\":[2],\"3115\":[null,10],\"3116\":[5],\"3117\":[2],\"3118\":[null,3],\"3119\":[null,12],\"3120\":[null,7],\"3121\":[2],\"3122\":[null,3],\"3123\":[5],\"3124\":[2],\"3125\":[null,3],\"3126\":[null,20],\"3127\":[null,7],\"3128\":[null,10],\"3129\":[2],\"3130\":[null,12],\"3131\":[5],\"3132\":[2],\"3133\":[null,3],\"3134\":[null,11],\"3135\":[null,6],\"3136\":[null,10],\"3137\":[2],\"3138\":[null,6],\"3139\":[2],\"3140\":[null,9],\"3141\":[null,4],\"3142\":[null,6],\"3143\":[null,9],\"3144\":[5],\"3145\":[null,12],\"3146\":[null,8],\"3147\":[null,19],\"3148\":[4],\"3149\":[null,5],\"3150\":[null,6],\"3151\":[null,9],\"3152\":[5],\"3153\":[null,17],\"3154\":[null,3],\"3155\":[null,18],\"3156\":[null,7],\"3157\":[null,11],\"3158\":[4],\"3159\":[null,5],\"3160\":[null,6],\"3161\":[null,13],\"3162\":[null,14],\"3163\":[null,9],\"3164\":[null,9],\"3165\":[null,6],\"3166\":[null,4],\"3167\":[null,16],\"3168\":[null,5],\"3169\":[2],\"3170\":[3],\"3171\":[null,11],\"3172\":[null,4],\"3173\":[null,10],\"3174\":[null,11],\"3175\":[null,11],\"3176\":[null,14],\"3177\":[null,5],\"3178\":[4],\"3179\":[null,12],\"3180\":[null,5],\"3181\":[null,12],\"3182\":[null,9],\"3183\":[null,9],\"3184\":[null,11],\"3185\":[null,9],\"3186\":[null,7],\"3187\":[null,4],\"3188\":[null,12],\"3189\":[null,10],\"3190\":[2],\"3191\":[2],\"3192\":[null,8],\"3193\":[null,2],\"3194\":[null,3],\"3195\":[null,4],\"3196\":[null,8],\"3197\":[null,6],\"3198\":[null,4],\"3199\":[null,6],\"3200\":[null,3],\"3201\":[null,19],\"3202\":[null,2],\"3203\":[null,2],\"3204\":[null,4],\"3205\":[null,3],\"3206\":[null,22],\"3207\":[null,8],\"3208\":[null,3],\"3209\":[null,2],\"3210\":[null,9],\"3211\":[null,5],\"3212\":[null,3],\"3213\":[null,5],\"3214\":[null,14],\"3215\":[null,3],\"3216\":[null,3],\"3217\":[null,5],\"3218\":[null,2],\"3219\":[null,1],\"3220\":[null,6],\"3221\":[null,2],\"3222\":[null,10],\"3223\":[null,2],\"3224\":[null,1],\"3225\":[null,4],\"3226\":[null,2],\"3227\":[2],\"3228\":[null,2],\"3229\":[null,4],\"3230\":[null,5],\"3231\":[3],\"3232\":[null,9],\"3233\":[null,38],\"3234\":[null,8],\"3235\":[null,34],\"3236\":[null,15],\"3237\":[3],\"3238\":[null,6],\"3239\":[null,17],\"3240\":[null,22],\"3241\":[null,7],\"3242\":[null,3],\"3243\":[null,8],\"3244\":[null,11],\"3245\":[4],\"3246\":[3],\"3247\":[null,10],\"3248\":[4],\"3249\":[null,8],\"3250\":[null,3],\"3251\":[null,24],\"3252\":[null,2],\"3253\":[null,8],\"3254\":[null,8],\"3255\":[null,8],\"3256\":[null,3],\"3257\":[null,4],\"3258\":[null,4],\"3259\":[null,4],\"3260\":[null,4],\"3261\":[null,2],\"3262\":[null,7],\"3263\":[null,5],\"3264\":[3],\"3265\":[null,13],\"3266\":[4],\"3267\":[null,2],\"3268\":[null,3],\"3269\":[null,5],\"3270\":[4],\"3271\":[null,6],\"3272\":[null,10],\"3273\":[3],\"3274\":[null,3],\"3275\":[null,10],\"3276\":[null,4],\"3277\":[4],\"3278\":[null,4],\"3279\":[null,5],\"3280\":[null,3],\"3281\":[null,2],\"3282\":[null,2],\"3283\":[null,4],\"3284\":[null,2],\"3285\":[4],\"3286\":[null,5],\"3287\":[1],\"3288\":[4],\"3289\":[null,3],\"3290\":[null,25],\"3291\":[null,6],\"3292\":[null,8],\"3293\":[null,2],\"3294\":[null,16],\"3295\":[null,19],\"3296\":[null,5],\"3297\":[2],\"3298\":[null,8],\"3299\":[null,8],\"3300\":[null,10],\"3301\":[null,8],\"3302\":[null,13],\"3303\":[null,8],\"3304\":[null,7],\"3305\":[null,8],\"3306\":[2],\"3307\":[null,61],\"3308\":[2],\"3309\":[2],\"3310\":[null,7],\"3311\":[null,9],\"3312\":[null,21],\"3313\":[5],\"3314\":[null,13],\"3315\":[4],\"3316\":[null,10],\"3317\":[6],\"3318\":[null,6],\"3319\":[null,19],\"3320\":[3],\"3321\":[null,3],\"3322\":[null,14],\"3323\":[null,6],\"3324\":[null,7],\"3325\":[5],\"3326\":[null,5],\"3327\":[null,5],\"3328\":[null,10],\"3329\":[null,11],\"3330\":[1],\"3331\":[2],\"3332\":[null,14],\"3333\":[null,4],\"3334\":[null,14],\"3335\":[null,7],\"3336\":[null,5],\"3337\":[3],\"3338\":[null,30],\"3339\":[5],\"3340\":[null,8],\"3341\":[null,13],\"3342\":[null,5],\"3343\":[4],\"3344\":[null,3],\"3345\":[null,5],\"3346\":[null,3],\"3347\":[null,5],\"3348\":[null,2],\"3349\":[null,5],\"3350\":[null,7],\"3351\":[null,2],\"3352\":[null,4],\"3353\":[null,3],\"3354\":[4],\"3355\":[null,11],\"3356\":[null,6],\"3357\":[null,4],\"3358\":[null,5],\"3359\":[null,13],\"3360\":[null,5],\"3361\":[null,25],\"3362\":[5],\"3363\":[null,9],\"3364\":[4],\"3365\":[null,4],\"3366\":[null,4],\"3367\":[null,6],\"3368\":[null,5],\"3369\":[null,5],\"3370\":[5],\"3371\":[null,5],\"3372\":[null,14],\"3373\":[null,3],\"3374\":[null,6],\"3375\":[3],\"3376\":[null,3],\"3377\":[null,10],\"3378\":[7],\"3379\":[null,2],\"3380\":[null,4],\"3381\":[3],\"3382\":[null,4],\"3383\":[null,5],\"3384\":[null,3],\"3385\":[null,3],\"3386\":[null,5],\"3387\":[null,3],\"3388\":[null,3],\"3389\":[null,4],\"3390\":[null,29],\"3391\":[1],\"3392\":[2],\"3393\":[2],\"3394\":[null,3],\"3395\":[null,11],\"3396\":[null,2],\"3397\":[null,3],\"3398\":[null,2],\"3399\":[null,8],\"3400\":[null,3],\"3401\":[null,10],\"3402\":[null,2],\"3403\":[null,21],\"3404\":[null,2],\"3405\":[null,3],\"3406\":[null,22],\"3407\":[null,2],\"3408\":[null,10],\"3409\":[2],\"3410\":[null,13],\"3411\":[null,22],\"3412\":[2],\"3413\":[null,16],\"3414\":[2],\"3415\":[null,23],\"3416\":[2],\"3417\":[null,21],\"3418\":[2],\"3419\":[null,36],\"3420\":[2],\"3421\":[null,2],\"3422\":[null,6],\"3423\":[2],\"3424\":[null,17],\"3425\":[2],\"3426\":[null,16],\"3427\":[2],\"3428\":[null,2],\"3429\":[null,7],\"3430\":[null,7],\"3431\":[null,8],\"3432\":[null,6],\"3433\":[null,2],\"3434\":[null,7],\"3435\":[null,13],\"3436\":[null,2],\"3437\":[null,9],\"3438\":[null,5],\"3439\":[null,4],\"3440\":[null,4],\"3441\":[2],\"3442\":[null,3],\"3443\":[null,12],\"3444\":[null,2],\"3445\":[null,16],\"3446\":[null,3],\"3447\":[null,22],\"3448\":[null,2],\"3449\":[null,23],\"3450\":[null,4],\"3451\":[null,16],\"3452\":[null,2],\"3453\":[null,5],\"3454\":[null,10],\"3455\":[null,2],\"3456\":[null,10],\"3457\":[null,2],\"3458\":[null,19],\"3459\":[2],\"3460\":[null,7],\"3461\":[null,6],\"3462\":[null,10],\"3463\":[null,8],\"3464\":[null,5],\"3465\":[null,13],\"3466\":[null,6],\"3467\":[null,2],\"3468\":[null,38],\"3469\":[null,19],\"3470\":[null,1],\"3471\":[null,17],\"3472\":[null,9],\"3473\":[null,8],\"3474\":[null,13],\"3475\":[2],\"3476\":[null,10],\"3477\":[null,3],\"3478\":[null,5],\"3479\":[null,4],\"3480\":[null,2],\"3481\":[null,3],\"3482\":[null,3],\"3483\":[null,3],\"3484\":[null,5],\"3485\":[null,3],\"3486\":[null,3],\"3487\":[null,12],\"3488\":[null,3],\"3489\":[null,18],\"3490\":[null,8],\"3491\":[null,10],\"3492\":[null,2],\"3493\":[null,3],\"3494\":[null,6],\"3495\":[null,4],\"3496\":[null,2],\"3497\":[null,5],\"3498\":[null,18],\"3499\":[null,10],\"3500\":[null,2],\"3501\":[null,2],\"3502\":[null,2],\"3503\":[null,2],\"3504\":[null,5],\"3505\":[null,3],\"3506\":[null,2],\"3507\":[null,2],\"3508\":[null,2],\"3509\":[null,2],\"3510\":[null,19],\"3511\":[2],\"3512\":[null,5],\"3513\":[null,2],\"3514\":[null,2],\"3515\":[3],\"3516\":[5],\"3517\":[null,9],\"3518\":[null,2],\"3519\":[null,7],\"3520\":[3],\"3521\":[null,2],\"3522\":[null,8],\"3523\":[3],\"3524\":[null,4],\"3525\":[null,6],\"3526\":[4],\"3527\":[null,97],\"3528\":[null,6],\"3529\":[3],\"3530\":[null,4],\"3531\":[null,2],\"3532\":[null,3],\"3533\":[null,3],\"3534\":[null,4],\"3535\":[null,11],\"3536\":[3],\"3537\":[5],\"3538\":[null,12],\"3539\":[6],\"3540\":[null,22],\"3541\":[null,3],\"3542\":[3],\"3543\":[3],\"3544\":[null,18],\"3545\":[null,20],\"3546\":[null,4],\"3547\":[3],\"3548\":[null,11],\"3549\":[null,5],\"3550\":[null,12],\"3551\":[null,2],\"3552\":[null,5],\"3553\":[null,16],\"3554\":[null,4],\"3555\":[null,5],\"3556\":[null,12],\"3557\":[null,5],\"3558\":[null,19],\"3559\":[null,8],\"3560\":[null,26],\"3561\":[null,8],\"3562\":[4],\"3563\":[null,17],\"3564\":[null,3],\"3565\":[null,7],\"3566\":[null,11],\"3567\":[null,16],\"3568\":[null,11],\"3569\":[null,3],\"3570\":[null,16],\"3571\":[null,13],\"3572\":[null,27],\"3573\":[null,3],\"3574\":[null,27],\"3575\":[null,10],\"3576\":[null,11],\"3577\":[null,6],\"3578\":[null,2],\"3579\":[null,12],\"3580\":[null,6],\"3581\":[null,20],\"3582\":[null,6],\"3583\":[2],\"3584\":[4],\"3585\":[null,5],\"3586\":[null,8],\"3587\":[null,10],\"3588\":[null,4],\"3589\":[null,5],\"3590\":[null,4],\"3591\":[null,13],\"3592\":[3],\"3593\":[null,4],\"3594\":[null,4],\"3595\":[null,3],\"3596\":[null,13],\"3597\":[null,21],\"3598\":[null,3],\"3599\":[null,3],\"3600\":[null,8],\"3601\":[null,3],\"3602\":[null,4],\"3603\":[null,6],\"3604\":[null,6],\"3605\":[null,2],\"3606\":[null,4],\"3607\":[null,6],\"3608\":[null,9],\"3609\":[null,14],\"3610\":[null,4],\"3611\":[null,4],\"3612\":[null,4],\"3613\":[null,4],\"3614\":[null,6],\"3615\":[null,4],\"3616\":[null,6],\"3617\":[null,4],\"3618\":[2],\"3619\":[null,15],\"3620\":[4],\"3621\":[null,8],\"3622\":[null,9],\"3623\":[6],\"3624\":[null,17],\"3625\":[null,30],\"3626\":[null,5],\"3627\":[3],\"3628\":[null,7],\"3629\":[null,9],\"3630\":[null,5],\"3631\":[1],\"3632\":[2],\"3633\":[null,21],\"3634\":[2],\"3635\":[null,3],\"3636\":[null,3],\"3637\":[null,4],\"3638\":[null,11],\"3639\":[2],\"3640\":[null,9],\"3641\":[null,6],\"3642\":[null,14],\"3643\":[null,25],\"3644\":[null,3],\"3645\":[null,11],\"3646\":[2],\"3647\":[null,3],\"3648\":[null,3],\"3649\":[null,11],\"3650\":[null,1],\"3651\":[5],\"3652\":[null,9],\"3653\":[null,6],\"3654\":[null,9],\"3655\":[null,9],\"3656\":[null,11],\"3657\":[null,9],\"3658\":[2],\"3659\":[null,14],\"3660\":[null,7],\"3661\":[1],\"3662\":[null,4],\"3663\":[null,5],\"3664\":[null,16],\"3665\":[null,6],\"3666\":[4],\"3667\":[null,13],\"3668\":[null,5],\"3669\":[null,4],\"3670\":[null,8],\"3671\":[null,5],\"3672\":[null,7],\"3673\":[null,11],\"3674\":[null,19],\"3675\":[null,12],\"3676\":[3],\"3677\":[null,7],\"3678\":[null,20],\"3679\":[null,15],\"3680\":[null,11],\"3681\":[3],\"3682\":[null,4],\"3683\":[null,5],\"3684\":[4],\"3685\":[null,13],\"3686\":[null,6],\"3687\":[null,6],\"3688\":[null,4],\"3689\":[null,11],\"3690\":[null,1],\"3691\":[2],\"3692\":[null,7],\"3693\":[null,6],\"3694\":[2],\"3695\":[null,13],\"3696\":[null,3],\"3697\":[null,13],\"3698\":[2],\"3699\":[null,10],\"3700\":[null,13],\"3701\":[null,10],\"3702\":[null,13],\"3703\":[3],\"3704\":[2],\"3705\":[3],\"3706\":[null,2],\"3707\":[null,5],\"3708\":[null,7],\"3709\":[null,11],\"3710\":[3],\"3711\":[null,6],\"3712\":[null,6],\"3713\":[null,7],\"3714\":[3],\"3715\":[null,2],\"3716\":[null,6],\"3717\":[null,7],\"3718\":[null,7],\"3719\":[null,3],\"3720\":[null,2],\"3721\":[null,2],\"3722\":[null,2],\"3723\":[null,2],\"3724\":[null,2],\"3725\":[3],\"3726\":[null,3],\"3727\":[null,13],\"3728\":[2],\"3729\":[null,2],\"3730\":[null,3],\"3731\":[null,7],\"3732\":[null,3],\"3733\":[4],\"3734\":[null,5],\"3735\":[null,12],\"3736\":[null,19],\"3737\":[null,11],\"3738\":[null,7],\"3739\":[null,7],\"3740\":[null,12],\"3741\":[null,9],\"3742\":[null,9],\"3743\":[null,13],\"3744\":[4],\"3745\":[null,5],\"3746\":[null,11],\"3747\":[null,16],\"3748\":[null,8],\"3749\":[3],\"3750\":[null,10],\"3751\":[null,12],\"3752\":[null,4],\"3753\":[null,18],\"3754\":[2],\"3755\":[4],\"3756\":[null,4],\"3757\":[null,6],\"3758\":[null,10],\"3759\":[null,6],\"3760\":[3],\"3761\":[null,2],\"3762\":[null,16],\"3763\":[null,26],\"3764\":[null,3],\"3765\":[null,34],\"3766\":[null,19],\"3767\":[null,8],\"3768\":[null,7],\"3769\":[null,12],\"3770\":[2],\"3771\":[null,2],\"3772\":[null,62],\"3773\":[null,25],\"3774\":[null,9],\"3775\":[null,27],\"3776\":[1],\"3777\":[4],\"3778\":[null,10],\"3779\":[null,8],\"3780\":[null,10],\"3781\":[null,9],\"3782\":[null,8],\"3783\":[null,6],\"3784\":[null,2],\"3785\":[null,16],\"3786\":[null,9],\"3787\":[null,14],\"3788\":[null,4],\"3789\":[null,16],\"3790\":[null,15],\"3791\":[2],\"3792\":[2],\"3793\":[null,5],\"3794\":[2],\"3795\":[null,7],\"3796\":[null,18],\"3797\":[null,11],\"3798\":[null,17],\"3799\":[null,5],\"3800\":[2],\"3801\":[null,7],\"3802\":[null,2],\"3803\":[null,1],\"3804\":[null,5],\"3805\":[null,13],\"3806\":[2],\"3807\":[null,15],\"3808\":[null,9],\"3809\":[5],\"3810\":[null,6],\"3811\":[null,6],\"3812\":[2],\"3813\":[3],\"3814\":[null,15],\"3815\":[3],\"3816\":[null,15],\"3817\":[3],\"3818\":[null,5],\"3819\":[null,7],\"3820\":[null,9],\"3821\":[3],\"3822\":[null,13],\"3823\":[null,2],\"3824\":[null,1],\"3825\":[null,3],\"3826\":[null,17],\"3827\":[null,21],\"3828\":[3],\"3829\":[null,6],\"3830\":[null,7],\"3831\":[null,7],\"3832\":[3],\"3833\":[null,8],\"3834\":[null,4],\"3835\":[4],\"3836\":[null,12],\"3837\":[null,6],\"3838\":[4],\"3839\":[null,5],\"3840\":[null,4],\"3841\":[null,7],\"3842\":[null,11],\"3843\":[null,6],\"3844\":[null,4],\"3845\":[null,17],\"3846\":[null,10],\"3847\":[1],\"3848\":[3],\"3849\":[null,5],\"3850\":[null,3],\"3851\":[null,4],\"3852\":[null,8],\"3853\":[3],\"3854\":[7],\"3855\":[null,38],\"3856\":[null,2],\"3857\":[null,104],\"3858\":[null,4],\"3859\":[null,4],\"3860\":[null,4],\"3861\":[null,5],\"3862\":[null,2],\"3863\":[null,10],\"3864\":[null,4],\"3865\":[null,4],\"3866\":[null,4],\"3867\":[null,5],\"3868\":[null,2],\"3869\":[null,4],\"3870\":[null,5],\"3871\":[null,13],\"3872\":[null,5],\"3873\":[null,4],\"3874\":[null,27],\"3875\":[null,2],\"3876\":[null,4],\"3877\":[null,3],\"3878\":[null,13],\"3879\":[null,19],\"3880\":[null,21],\"3881\":[null,2],\"3882\":[null,3],\"3883\":[null,4],\"3884\":[null,5],\"3885\":[null,7],\"3886\":[null,11],\"3887\":[null,1],\"3888\":[null,6],\"3889\":[null,2],\"3890\":[null,3],\"3891\":[null,2],\"3892\":[null,3],\"3893\":[null,2],\"3894\":[null,8],\"3895\":[null,2],\"3896\":[null,2],\"3897\":[null,17],\"3898\":[null,18],\"3899\":[8],\"3900\":[null,3],\"3901\":[null,11],\"3902\":[null,7],\"3903\":[null,11],\"3904\":[null,3],\"3905\":[3],\"3906\":[null,9],\"3907\":[null,2],\"3908\":[null,7],\"3909\":[null,13],\"3910\":[null,4],\"3911\":[null,13],\"3912\":[null,11],\"3913\":[null,12],\"3914\":[3],\"3915\":[null,3],\"3916\":[null,4],\"3917\":[null,5],\"3918\":[null,4],\"3919\":[null,2],\"3920\":[null,2],\"3921\":[null,4],\"3922\":[null,4],\"3923\":[2],\"3924\":[null,2],\"3925\":[null,16],\"3926\":[null,14],\"3927\":[null,15],\"3928\":[null,10],\"3929\":[null,12],\"3930\":[null,30],\"3931\":[1],\"3932\":[1],\"3933\":[null,22],\"3934\":[7],\"3935\":[4],\"3936\":[3],\"3937\":[null,5],\"3938\":[null,6],\"3939\":[null,6],\"3940\":[null,7],\"3941\":[null,4],\"3942\":[null,4],\"3943\":[4],\"3944\":[null,3],\"3945\":[null,4],\"3946\":[null,1],\"3947\":[null,4],\"3948\":[3],\"3949\":[null,1],\"3950\":[null,3],\"3951\":[null,1],\"3952\":[null,4],\"3953\":[null,1],\"3954\":[null,6],\"3955\":[null,1],\"3956\":[null,6],\"3957\":[null,1],\"3958\":[null,4],\"3959\":[null,1],\"3960\":[null,2],\"3961\":[null,9],\"3962\":[null,3],\"3963\":[null,17],\"3964\":[null,3],\"3965\":[null,23],\"3966\":[null,3],\"3967\":[null,18],\"3968\":[null,2],\"3969\":[null,1],\"3970\":[null,3],\"3971\":[null,1],\"3972\":[null,1],\"3973\":[null,1],\"3974\":[null,2],\"3975\":[null,29],\"3976\":[null,3],\"3977\":[null,15],\"3978\":[null,3],\"3979\":[null,19],\"3980\":[null,2],\"3981\":[3],\"3982\":[null,1],\"3983\":[null,10],\"3984\":[null,1],\"3985\":[null,8],\"3986\":[null,1],\"3987\":[null,8],\"3988\":[null,1],\"3989\":[null,6],\"3990\":[4],\"3991\":[null,7],\"3992\":[null,8],\"3993\":[null,5],\"3994\":[3],\"3995\":[null,7],\"3996\":[null,1],\"3997\":[null,1],\"3998\":[3],\"3999\":[null,1],\"4000\":[3],\"4001\":[null,1],\"4002\":[3],\"4003\":[null,2],\"4004\":[4],\"4005\":[null,1],\"4006\":[4],\"4007\":[null,1],\"4008\":[5],\"4009\":[null,4],\"4010\":[null,4],\"4011\":[null,2],\"4012\":[null,6],\"4013\":[3],\"4014\":[4],\"4015\":[null,6],\"4016\":[null,3],\"4017\":[null,2],\"4018\":[null,4],\"4019\":[3],\"4020\":[null,5],\"4021\":[null,6],\"4022\":[null,8],\"4023\":[null,6],\"4024\":[null,4],\"4025\":[null,7],\"4026\":[null,5],\"4027\":[null,4],\"4028\":[null,3],\"4029\":[null,13],\"4030\":[null,3],\"4031\":[null,22],\"4032\":[null,4],\"4033\":[null,4],\"4034\":[null,9],\"4035\":[null,3],\"4036\":[3],\"4037\":[null,4],\"4038\":[null,4],\"4039\":[null,3],\"4040\":[null,4],\"4041\":[null,4],\"4042\":[3],\"4043\":[null,9],\"4044\":[null,1],\"4045\":[null,5],\"4046\":[null,1],\"4047\":[null,6],\"4048\":[null,1],\"4049\":[null,3],\"4050\":[null,1],\"4051\":[null,3],\"4052\":[null,1],\"4053\":[null,4],\"4054\":[null,6],\"4055\":[null,6],\"4056\":[null,1],\"4057\":[null,4],\"4058\":[null,4],\"4059\":[null,2],\"4060\":[null,2],\"4061\":[null,1],\"4062\":[null,8],\"4063\":[null,4],\"4064\":[null,4],\"4065\":[null,5],\"4066\":[4],\"4067\":[null,4],\"4068\":[null,12],\"4069\":[5],\"4070\":[null,5],\"4071\":[null,5],\"4072\":[null,3],\"4073\":[null,5],\"4074\":[null,5],\"4075\":[null,3],\"4076\":[null,4],\"4077\":[3],\"4078\":[null,2],\"4079\":[null,3],\"4080\":[null,2],\"4081\":[null,2],\"4082\":[null,2],\"4083\":[null,5],\"4084\":[null,5],\"4085\":[3],\"4086\":[null,6],\"4087\":[null,7],\"4088\":[null,9],\"4089\":[3],\"4090\":[null,4],\"4091\":[null,1],\"4092\":[4],\"4093\":[3],\"4094\":[3],\"4095\":[4],\"4096\":[3],\"4097\":[3],\"4098\":[3],\"4099\":[null,6],\"4100\":[null,2],\"4101\":[null,2],\"4102\":[null,3],\"4103\":[null,2],\"4104\":[null,4],\"4105\":[null,4],\"4106\":[null,4],\"4107\":[3],\"4108\":[null,2],\"4109\":[null,7],\"4110\":[3],\"4111\":[1],\"4112\":[1],\"4113\":[null,21],\"4114\":[2],\"4115\":[null,6],\"4116\":[null,9],\"4117\":[null,8],\"4118\":[null,5],\"4119\":[3],\"4120\":[null,7],\"4121\":[null,4],\"4122\":[3],\"4123\":[null,19],\"4124\":[4],\"4125\":[null,6],\"4126\":[null,6],\"4127\":[5],\"4128\":[null,6],\"4129\":[2],\"4130\":[null,2],\"4131\":[null,2],\"4132\":[null,8],\"4133\":[null,3],\"4134\":[null,3],\"4135\":[null,2],\"4136\":[null,2],\"4137\":[null,2],\"4138\":[3],\"4139\":[null,4],\"4140\":[2],\"4141\":[null,14],\"4142\":[5],\"4143\":[null,1],\"4144\":[null,5],\"4145\":[null,11],\"4146\":[null,5],\"4147\":[null,1],\"4148\":[null,11],\"4149\":[null,7],\"4150\":[null,3],\"4151\":[null,15],\"4152\":[null,4],\"4153\":[null,14],\"4154\":[3],\"4155\":[null,2],\"4156\":[2],\"4157\":[null,3],\"4158\":[3],\"4159\":[null,2],\"4160\":[2],\"4161\":[null,1],\"4162\":[2],\"4163\":[null,4],\"4164\":[2],\"4165\":[null,10],\"4166\":[2],\"4167\":[null,2],\"4168\":[null,1],\"4169\":[null,1],\"4170\":[null,1],\"4171\":[null,1],\"4172\":[null,2],\"4173\":[null,1],\"4174\":[null,3],\"4175\":[2],\"4176\":[null,2],\"4177\":[4],\"4178\":[null,8],\"4179\":[2],\"4180\":[null,11],\"4181\":[null,2],\"4182\":[null,34],\"4183\":[3],\"4184\":[null,3],\"4185\":[3],\"4186\":[null,2],\"4187\":[null,8],\"4188\":[null,6],\"4189\":[2],\"4190\":[null,7],\"4191\":[null,5],\"4192\":[2],\"4193\":[null,3],\"4194\":[2],\"4195\":[null,5],\"4196\":[null,7],\"4197\":[null,4],\"4198\":[null,3],\"4199\":[2],\"4200\":[null,4],\"4201\":[3],\"4202\":[null,7],\"4203\":[null,3],\"4204\":[null,3],\"4205\":[null,2],\"4206\":[null,2],\"4207\":[1],\"4208\":[1],\"4209\":[null,21],\"4210\":[6],\"4211\":[4],\"4212\":[4],\"4213\":[3],\"4214\":[2],\"4215\":[4],\"4216\":[5],\"4217\":[null,6],\"4218\":[6],\"4219\":[null,5],\"4220\":[null,4],\"4221\":[5],\"4222\":[null,3],\"4223\":[null,3],\"4224\":[null,3],\"4225\":[null,2],\"4226\":[3],\"4227\":[null,2],\"4228\":[2],\"4229\":[null,2],\"4230\":[9],\"4231\":[null,5],\"4232\":[null,4],\"4233\":[null,5],\"4234\":[null,1],\"4235\":[null,5],\"4236\":[null,1],\"4237\":[null,3],\"4238\":[null,1],\"4239\":[null,4],\"4240\":[3],\"4241\":[null,2],\"4242\":[null,2],\"4243\":[null,2],\"4244\":[2],\"4245\":[null,1],\"4246\":[null,5],\"4247\":[null,5],\"4248\":[null,1],\"4249\":[null,3],\"4250\":[null,3],\"4251\":[3],\"4252\":[null,1],\"4253\":[2],\"4254\":[null,5],\"4255\":[null,1],\"4256\":[3],\"4257\":[null,2],\"4258\":[null,4],\"4259\":[null,4],\"4260\":[null,2],\"4261\":[null,4],\"4262\":[null,4],\"4263\":[null,2],\"4264\":[null,7],\"4265\":[null,4],\"4266\":[2],\"4267\":[null,2],\"4268\":[2],\"4269\":[null,2],\"4270\":[3],\"4271\":[null,5],\"4272\":[null,3],\"4273\":[null,2],\"4274\":[null,6],\"4275\":[null,5],\"4276\":[1],\"4277\":[1],\"4278\":[2],\"4279\":[5],\"4280\":[null,2],\"4281\":[null,2],\"4282\":[null,2],\"4283\":[null,2],\"4284\":[null,2],\"4285\":[null,6],\"4286\":[4],\"4287\":[null,6],\"4288\":[null,4],\"4289\":[null,8],\"4290\":[null,5],\"4291\":[null,5],\"4292\":[null,5],\"4293\":[null,2],\"4294\":[null,7],\"4295\":[null,5],\"4296\":[null,3],\"4297\":[null,5],\"4298\":[null,9],\"4299\":[null,5],\"4300\":[null,5],\"4301\":[null,2],\"4302\":[null,6],\"4303\":[null,2],\"4304\":[null,2],\"4305\":[null,4],\"4306\":[null,6],\"4307\":[null,4],\"4308\":[2],\"4309\":[3],\"4310\":[null,7],\"4311\":[null,5],\"4312\":[null,4],\"4313\":[null,5],\"4314\":[null,10],\"4315\":[null,2],\"4316\":[null,4],\"4317\":[null,4],\"4318\":[null,8],\"4319\":[null,6],\"4320\":[null,2],\"4321\":[null,9],\"4322\":[null,5],\"4323\":[2],\"4324\":[5],\"4325\":[null,5],\"4326\":[null,2],\"4327\":[null,2],\"4328\":[null,2],\"4329\":[null,5],\"4330\":[null,2],\"4331\":[null,3],\"4332\":[null,4],\"4333\":[null,7],\"4334\":[null,3],\"4335\":[null,2],\"4336\":[null,3],\"4337\":[null,3],\"4338\":[null,2],\"4339\":[null,2],\"4340\":[null,3],\"4341\":[null,2],\"4342\":[null,2],\"4343\":[null,2],\"4344\":[null,3],\"4345\":[null,2],\"4346\":[1],\"4347\":[5],\"4348\":[null,2],\"4349\":[null,2],\"4350\":[null,2],\"4351\":[null,10],\"4352\":[null,6],\"4353\":[null,4],\"4354\":[null,5],\"4355\":[null,3],\"4356\":[null,13],\"4357\":[6],\"4358\":[2],\"4359\":[null,2],\"4360\":[null,4],\"4361\":[null,6],\"4362\":[null,2],\"4363\":[null,3],\"4364\":[null,3],\"4365\":[null,3],\"4366\":[null,4],\"4367\":[null,4],\"4368\":[null,3],\"4369\":[2],\"4370\":[null,4],\"4371\":[null,4],\"4372\":[null,3],\"4373\":[null,6],\"4374\":[null,4],\"4375\":[null,4],\"4376\":[null,4],\"4377\":[null,3],\"4378\":[null,3],\"4379\":[null,3],\"4380\":[4],\"4381\":[null,4],\"4382\":[null,5],\"4383\":[null,7],\"4384\":[null,4],\"4385\":[null,3],\"4386\":[null,3],\"4387\":[null,5],\"4388\":[null,6],\"4389\":[null,3],\"4390\":[null,5],\"4391\":[null,4],\"4392\":[null,9],\"4393\":[null,9],\"4394\":[null,8],\"4395\":[6],\"4396\":[2],\"4397\":[null,2],\"4398\":[null,4],\"4399\":[null,3],\"4400\":[null,3],\"4401\":[null,3],\"4402\":[null,7],\"4403\":[null,5],\"4404\":[null,4],\"4405\":[null,5],\"4406\":[null,6],\"4407\":[null,3],\"4408\":[null,3],\"4409\":[null,5],\"4410\":[null,4],\"4411\":[null,5],\"4412\":[null,4],\"4413\":[null,9],\"4414\":[null,5],\"4415\":[null,4],\"4416\":[null,4],\"4417\":[null,10],\"4418\":[null,3],\"4419\":[null,3],\"4420\":[null,3],\"4421\":[null,8],\"4422\":[null,3],\"4423\":[null,9],\"4424\":[null,3],\"4425\":[null,13],\"4426\":[4],\"4427\":[null,7],\"4428\":[null,2],\"4429\":[null,3],\"4430\":[null,7],\"4431\":[null,5],\"4432\":[null,4],\"4433\":[null,6],\"4434\":[null,6],\"4435\":[null,6],\"4436\":[null,9],\"4437\":[null,7],\"4438\":[null,9],\"4439\":[null,4],\"4440\":[6],\"4441\":[null,6],\"4442\":[null,3],\"4443\":[null,2],\"4444\":[null,2],\"4445\":[null,2],\"4446\":[null,6],\"4447\":[null,2],\"4448\":[null,2],\"4449\":[10],\"4450\":[null,2],\"4451\":[null,6],\"4452\":[null,3],\"4453\":[null,3],\"4454\":[null,3],\"4455\":[null,3],\"4456\":[null,3],\"4457\":[null,3],\"4458\":[null,4],\"4459\":[null,3],\"4460\":[null,3],\"4461\":[2],\"4462\":[4],\"4463\":[null,21],\"4464\":[2],\"4465\":[null,4],\"4466\":[null,12],\"4467\":[null,2],\"4468\":[null,2],\"4469\":[null,1],\"4470\":[null,1],\"4471\":[null,1],\"4472\":[null,1],\"4473\":[null,1],\"4474\":[null,1],\"4475\":[null,1],\"4476\":[null,5],\"4477\":[null,4],\"4478\":[null,8],\"4479\":[null,6],\"4480\":[null,4],\"4481\":[null,7],\"4482\":[null,1],\"4483\":[null,6],\"4484\":[null,7],\"4485\":[null,4],\"4486\":[null,2],\"4487\":[3],\"4488\":[null,1],\"4489\":[null,3],\"4490\":[null,1],\"4491\":[null,6],\"4492\":[null,2],\"4493\":[null,5],\"4494\":[null,11],\"4495\":[null,5],\"4496\":[null,4],\"4497\":[null,2],\"4498\":[null,4],\"4499\":[null,2],\"4500\":[null,2],\"4501\":[null,2],\"4502\":[null,3],\"4503\":[null,4],\"4504\":[null,2],\"4505\":[null,6],\"4506\":[null,5],\"4507\":[null,8],\"4508\":[null,6],\"4509\":[null,9],\"4510\":[null,4],\"4511\":[null,10],\"4512\":[null,6],\"4513\":[null,6],\"4514\":[null,3],\"4515\":[null,1],\"4516\":[null,2],\"4517\":[null,3],\"4518\":[null,2],\"4519\":[null,6],\"4520\":[null,2],\"4521\":[null,2],\"4522\":[null,3],\"4523\":[null,2],\"4524\":[null,3],\"4525\":[null,11],\"4526\":[null,2],\"4527\":[null,2],\"4528\":[null,3],\"4529\":[null,2],\"4530\":[null,5],\"4531\":[null,2],\"4532\":[null,9],\"4533\":[null,2],\"4534\":[null,20],\"4535\":[2],\"4536\":[null,11],\"4537\":[null,15],\"4538\":[null,2],\"4539\":[null,15],\"4540\":[2],\"4541\":[null,10],\"4542\":[null,9],\"4543\":[4],\"4544\":[null,2],\"4545\":[null,13],\"4546\":[null,7],\"4547\":[null,4],\"4548\":[null,21],\"4549\":[null,3],\"4550\":[4],\"4551\":[null,3],\"4552\":[null,10],\"4553\":[null,3],\"4554\":[null,16],\"4555\":[null,4],\"4556\":[null,10],\"4557\":[1],\"4558\":[2],\"4559\":[null,6],\"4560\":[null,19],\"4561\":[null,12],\"4562\":[null,5],\"4563\":[null,25],\"4564\":[null,12],\"4565\":[null,2],\"4566\":[null,7],\"4567\":[null,6],\"4568\":[null,8],\"4569\":[null,4],\"4570\":[2],\"4571\":[2],\"4572\":[3],\"4573\":[null,7],\"4574\":[null,7],\"4575\":[null,3],\"4576\":[null,5],\"4577\":[null,4],\"4578\":[2],\"4579\":[null,4],\"4580\":[null,6],\"4581\":[null,5],\"4582\":[null,11],\"4583\":[2],\"4584\":[null,6],\"4585\":[null,4],\"4586\":[null,15],\"4587\":[null,11],\"4588\":[null,4],\"4589\":[null,12],\"4590\":[null,6],\"4591\":[2],\"4592\":[3],\"4593\":[null,19],\"4594\":[null,15],\"4595\":[null,4],\"4596\":[null,26],\"4597\":[null,15],\"4598\":[null,15],\"4599\":[null,21],\"4600\":[null,18],\"4601\":[2],\"4602\":[null,21],\"4603\":[null,11],\"4604\":[null,13],\"4605\":[null,11],\"4606\":[null,12],\"4607\":[null,7],\"4608\":[null,17],\"4609\":[null,18],\"4610\":[null,12],\"4611\":[2],\"4612\":[3],\"4613\":[null,7],\"4614\":[null,12],\"4615\":[null,25],\"4616\":[null,39],\"4617\":[null,9],\"4618\":[null,11],\"4619\":[null,16],\"4620\":[null,32],\"4621\":[null,19],\"4622\":[3],\"4623\":[null,22],\"4624\":[null,2],\"4625\":[null,15],\"4626\":[3],\"4627\":[null,33],\"4628\":[3],\"4629\":[null,12],\"4630\":[null,3],\"4631\":[null,7],\"4632\":[null,6],\"4633\":[null,8],\"4634\":[null,4],\"4635\":[2],\"4636\":[2],\"4637\":[null,11],\"4638\":[null,6],\"4639\":[null,3],\"4640\":[null,5],\"4641\":[null,6],\"4642\":[null,2],\"4643\":[null,9],\"4644\":[6],\"4645\":[null,16],\"4646\":[null,20],\"4647\":[null,11],\"4648\":[null,17],\"4649\":[null,17],\"4650\":[null,8],\"4651\":[null,12],\"4652\":[1],\"4653\":[2],\"4654\":[null,15],\"4655\":[null,16],\"4656\":[null,6],\"4657\":[null,2],\"4658\":[null,7],\"4659\":[null,8],\"4660\":[null,4],\"4661\":[null,2],\"4662\":[null,9],\"4663\":[null,5],\"4664\":[null,2],\"4665\":[null,2],\"4666\":[null,4],\"4667\":[2],\"4668\":[2],\"4669\":[null,8],\"4670\":[null,2],\"4671\":[null,8],\"4672\":[2],\"4673\":[null,3],\"4674\":[null,14],\"4675\":[null,11],\"4676\":[null,2],\"4677\":[null,9],\"4678\":[null,9],\"4679\":[2],\"4680\":[4],\"4681\":[null,1],\"4682\":[null,1],\"4683\":[null,1],\"4684\":[null,1],\"4685\":[null,1],\"4686\":[null,1],\"4687\":[null,1],\"4688\":[null,1],\"4689\":[null,1],\"4690\":[null,1],\"4691\":[null,1],\"4692\":[null,1],\"4693\":[null,1],\"4694\":[null,1],\"4695\":[null,1],\"4696\":[null,1],\"4697\":[null,1],\"4698\":[null,1],\"4699\":[null,1],\"4700\":[null,1],\"4701\":[null,1],\"4702\":[null,1],\"4703\":[null,4],\"4704\":[null,1],\"4705\":[null,1],\"4706\":[null,4],\"4707\":[null,1],\"4708\":[null,2],\"4709\":[null,1],\"4710\":[null,1],\"4711\":[null,2],\"4712\":[null,3],\"4713\":[null,3],\"4714\":[null,2],\"4715\":[null,1],\"4716\":[null,1],\"4717\":[null,1],\"4718\":[null,5],\"4719\":[null,1],\"4720\":[null,1],\"4721\":[null,3],\"4722\":[null,1],\"4723\":[null,1],\"4724\":[null,4],\"4725\":[null,1],\"4726\":[null,1],\"4727\":[null,3],\"4728\":[null,1],\"4729\":[null,1],\"4730\":[null,4],\"4731\":[null,3],\"4732\":[null,2],\"4733\":[null,1],\"4734\":[null,1],\"4735\":[null,1],\"4736\":[null,5],\"4737\":[null,1],\"4738\":[null,10],\"4739\":[4],\"4740\":[null,4],\"4741\":[null,2],\"4742\":[null,8],\"4743\":[null,2],\"4744\":[null,11],\"4745\":[null,3],\"4746\":[null,1],\"4747\":[null,4],\"4748\":[null,29],\"4749\":[null,2],\"4750\":[null,21],\"4751\":[null,2],\"4752\":[null,6],\"4753\":[null,6],\"4754\":[null,4],\"4755\":[null,18],\"4756\":[null,10],\"4757\":[4],\"4758\":[null,8],\"4759\":[null,7],\"4760\":[null,10],\"4761\":[null,14],\"4762\":[null,18],\"4763\":[null,10],\"4764\":[null,1],\"4765\":[null,1],\"4766\":[null,1],\"4767\":[null,1],\"4768\":[null,1],\"4769\":[null,1],\"4770\":[null,1],\"4771\":[null,1],\"4772\":[null,1],\"4773\":[null,1],\"4774\":[null,1],\"4775\":[null,1],\"4776\":[null,1],\"4777\":[null,1],\"4778\":[null,1],\"4779\":[null,1],\"4780\":[null,1],\"4781\":[null,1],\"4782\":[null,1],\"4783\":[null,1],\"4784\":[null,1],\"4785\":[null,1],\"4786\":[null,3],\"4787\":[null,3],\"4788\":[null,3],\"4789\":[null,3],\"4790\":[null,1],\"4791\":[null,3],\"4792\":[null,3],\"4793\":[null,2],\"4794\":[null,2],\"4795\":[null,2],\"4796\":[null,1],\"4797\":[null,1],\"4798\":[null,1],\"4799\":[null,2],\"4800\":[null,1],\"4801\":[null,3],\"4802\":[null,1],\"4803\":[null,4],\"4804\":[2],\"4805\":[null,2],\"4806\":[null,2],\"4807\":[null,2],\"4808\":[3],\"4809\":[null,4],\"4810\":[null,7],\"4811\":[null,7],\"4812\":[null,7],\"4813\":[null,9],\"4814\":[null,2],\"4815\":[null,11],\"4816\":[null,11],\"4817\":[null,2],\"4818\":[null,2],\"4819\":[null,2],\"4820\":[null,10],\"4821\":[null,6],\"4822\":[null,3],\"4823\":[null,4],\"4824\":[null,11],\"4825\":[null,3],\"4826\":[null,23],\"4827\":[3],\"4828\":[null,2],\"4829\":[null,4],\"4830\":[null,3],\"4831\":[null,2],\"4832\":[null,5],\"4833\":[null,2],\"4834\":[null,2],\"4835\":[null,3],\"4836\":[null,2],\"4837\":[null,2],\"4838\":[3],\"4839\":[null,2],\"4840\":[null,14],\"4841\":[null,15],\"4842\":[null,2],\"4843\":[null,4],\"4844\":[3],\"4845\":[2],\"4846\":[null,10],\"4847\":[null,4],\"4848\":[null,2],\"4849\":[null,4],\"4850\":[null,8],\"4851\":[null,4],\"4852\":[null,3],\"4853\":[null,4],\"4854\":[null,5],\"4855\":[null,5],\"4856\":[null,2],\"4857\":[null,280],\"4858\":[null,6],\"4859\":[null,9],\"4860\":[null,59],\"4861\":[2],\"4862\":[null,2],\"4863\":[null,6],\"4864\":[null,5],\"4865\":[null,5],\"4866\":[null,5],\"4867\":[null,6],\"4868\":[null,7],\"4869\":[null,2],\"4870\":[null,2],\"4871\":[null,3],\"4872\":[null,5],\"4873\":[null,4],\"4874\":[null,2],\"4875\":[null,4],\"4876\":[null,8],\"4877\":[null,2],\"4878\":[null,2],\"4879\":[null,1],\"4880\":[null,2],\"4881\":[null,1],\"4882\":[null,3],\"4883\":[null,7],\"4884\":[null,3],\"4885\":[null,3],\"4886\":[null,6],\"4887\":[null,7],\"4888\":[null,5],\"4889\":[null,2],\"4890\":[null,3],\"4891\":[null,7],\"4892\":[null,2],\"4893\":[null,7],\"4894\":[null,2],\"4895\":[null,50],\"4896\":[null,2],\"4897\":[3],\"4898\":[null,2],\"4899\":[null,4],\"4900\":[null,2],\"4901\":[null,3],\"4902\":[null,2],\"4903\":[null,11],\"4904\":[null,9],\"4905\":[null,2],\"4906\":[null,3],\"4907\":[null,2],\"4908\":[null,2],\"4909\":[null,2],\"4910\":[null,53],\"4911\":[3],\"4912\":[null,2],\"4913\":[2],\"4914\":[null,1],\"4915\":[null,4],\"4916\":[null,3],\"4917\":[null,2],\"4918\":[null,5],\"4919\":[null,19],\"4920\":[null,2],\"4921\":[null,11],\"4922\":[null,2],\"4923\":[null,21],\"4924\":[null,4],\"4925\":[null,3],\"4926\":[null,13],\"4927\":[1],\"4928\":[null,2],\"4929\":[null,29],\"4930\":[null,2],\"4931\":[null,39],\"4932\":[null,2],\"4933\":[null,51],\"4934\":[null,2],\"4935\":[null,58],\"4936\":[2],\"4937\":[null,3],\"4938\":[null,59],\"4939\":[null,19],\"4940\":[null,5],\"4941\":[null,10],\"4942\":[null,9],\"4943\":[null,9],\"4944\":[null,10],\"4945\":[null,18],\"4946\":[null,10],\"4947\":[null,5],\"4948\":[null,5],\"4949\":[null,5],\"4950\":[null,5],\"4951\":[null,3],\"4952\":[null,4],\"4953\":[null,14],\"4954\":[null,11],\"4955\":[null,13],\"4956\":[null,8],\"4957\":[null,7],\"4958\":[null,4],\"4959\":[null,8],\"4960\":[null,3],\"4961\":[null,8],\"4962\":[null,9],\"4963\":[null,9],\"4964\":[null,6],\"4965\":[null,13],\"4966\":[2],\"4967\":[null,10],\"4968\":[null,3],\"4969\":[null,6],\"4970\":[null,3],\"4971\":[null,4],\"4972\":[null,11],\"4973\":[null,3],\"4974\":[null,23],\"4975\":[null,7],\"4976\":[null,6],\"4977\":[2],\"4978\":[null,3],\"4979\":[null,70],\"4980\":[null,4],\"4981\":[null,66],\"4982\":[2],\"4983\":[null,3],\"4984\":[null,26],\"4985\":[null,3],\"4986\":[null,87],\"4987\":[2],\"4988\":[null,2],\"4989\":[null,2],\"4990\":[null,4],\"4991\":[null,2],\"4992\":[null,14],\"4993\":[null,2],\"4994\":[null,39],\"4995\":[null,3],\"4996\":[null,2],\"4997\":[null,40],\"4998\":[null,2],\"4999\":[null,162],\"5000\":[null,2],\"5001\":[null,5],\"5002\":[null,5],\"5003\":[null,7],\"5004\":[null,11],\"5005\":[4],\"5006\":[null,7],\"5007\":[null,2],\"5008\":[null,2],\"5009\":[null,4],\"5010\":[null,3],\"5011\":[null,14],\"5012\":[null,2],\"5013\":[null,12],\"5014\":[null,11],\"5015\":[null,3],\"5016\":[null,3],\"5017\":[null,12],\"5018\":[null,6],\"5019\":[null,11],\"5020\":[null,2],\"5021\":[null,13],\"5022\":[null,2],\"5023\":[2],\"5024\":[null,24],\"5025\":[2],\"5026\":[2],\"5027\":[3],\"5028\":[null,7],\"5029\":[null,5],\"5030\":[2],\"5031\":[null,3],\"5032\":[null,4],\"5033\":[null,6],\"5034\":[null,3],\"5035\":[2],\"5036\":[null,14],\"5037\":[2],\"5038\":[3],\"5039\":[null,3],\"5040\":[null,1],\"5041\":[null,14],\"5042\":[null,1],\"5043\":[null,1],\"5044\":[null,1],\"5045\":[null,1],\"5046\":[null,3],\"5047\":[null,12],\"5048\":[null,1],\"5049\":[null,1],\"5050\":[null,1],\"5051\":[null,1],\"5052\":[null,3],\"5053\":[null,1],\"5054\":[null,19],\"5055\":[null,7],\"5056\":[null,1],\"5057\":[null,1],\"5058\":[null,1],\"5059\":[null,1],\"5060\":[null,1],\"5061\":[null,1],\"5062\":[null,1],\"5063\":[null,1],\"5064\":[null,1],\"5065\":[null,1],\"5066\":[null,1],\"5067\":[null,1],\"5068\":[null,1],\"5069\":[null,1],\"5070\":[null,1],\"5071\":[null,9],\"5072\":[null,2],\"5073\":[null,1],\"5074\":[null,6],\"5075\":[null,3],\"5076\":[null,6],\"5077\":[null,4],\"5078\":[null,6],\"5079\":[null,1],\"5080\":[null,5],\"5081\":[null,5],\"5082\":[null,6],\"5083\":[null,5],\"5084\":[null,8],\"5085\":[4],\"5086\":[null,3],\"5087\":[3],\"5088\":[null,12],\"5089\":[null,18],\"5090\":[null,2],\"5091\":[4],\"5092\":[null,11],\"5093\":[4],\"5094\":[null,15],\"5095\":[4],\"5096\":[null,10],\"5097\":[null,2],\"5098\":[4],\"5099\":[null,9],\"5100\":[null,10],\"5101\":[null,6],\"5102\":[null,5],\"5103\":[null,18],\"5104\":[2],\"5105\":[null,3],\"5106\":[null,3],\"5107\":[null,6],\"5108\":[null,3],\"5109\":[null,3],\"5110\":[null,3],\"5111\":[null,4],\"5112\":[null,4],\"5113\":[null,2],\"5114\":[null,4],\"5115\":[null,9],\"5116\":[1],\"5117\":[1],\"5118\":[null,2],\"5119\":[null,1],\"5120\":[null,1],\"5121\":[null,1],\"5122\":[1],\"5123\":[null,4],\"5124\":[null,3],\"5125\":[null,1],\"5126\":[null,1],\"5127\":[null,1],\"5128\":[null,1],\"5129\":[null,1],\"5130\":[null,1],\"5131\":[null,1],\"5132\":[null,3],\"5133\":[null,1],\"5134\":[null,1],\"5135\":[null,1],\"5136\":[1],\"5137\":[null,2],\"5138\":[null,5],\"5139\":[null,5],\"5140\":[2],\"5141\":[null,7],\"5142\":[null,7],\"5143\":[2],\"5144\":[null,8],\"5145\":[2],\"5146\":[null,7],\"5147\":[null,1],\"5148\":[null,8],\"5149\":[2],\"5150\":[null,11],\"5151\":[2],\"5152\":[null,6],\"5153\":[null,7],\"5154\":[1],\"5155\":[null,10],\"5156\":[1],\"5157\":[null,5],\"5158\":[null,1],\"5159\":[null,6],\"5160\":[null,5],\"5161\":[null,1],\"5162\":[null,1],\"5163\":[null,1],\"5164\":[null,1],\"5165\":[null,1],\"5166\":[null,1],\"5167\":[null,1],\"5168\":[null,1],\"5169\":[null,1],\"5170\":[1],\"5171\":[null,1],\"5172\":[1],\"5173\":[null,2],\"5174\":[null,1],\"5175\":[1],\"5176\":[null,1],\"5177\":[null,1],\"5178\":[null,1],\"5179\":[1],\"5180\":[null,5],\"5181\":[null,1],\"5182\":[1],\"5183\":[null,3],\"5184\":[null,1],\"5185\":[1],\"5186\":[null,3],\"5187\":[null,1],\"5188\":[1],\"5189\":[null,3],\"5190\":[null,3],\"5191\":[null,1],\"5192\":[1],\"5193\":[null,1],\"5194\":[null,1],\"5195\":[1],\"5196\":[null,23],\"5197\":[null,1],\"5198\":[1],\"5199\":[null,1],\"5200\":[1],\"5201\":[null,1],\"5202\":[1],\"5203\":[null,1],\"5204\":[1],\"5205\":[null,1],\"5206\":[2],\"5207\":[null,10],\"5208\":[null,1],\"5209\":[1],\"5210\":[null,2],\"5211\":[null,1],\"5212\":[null,1],\"5213\":[null,1],\"5214\":[null,1],\"5215\":[1],\"5216\":[null,1],\"5217\":[1],\"5218\":[null,5],\"5219\":[null,1],\"5220\":[1],\"5221\":[null,1],\"5222\":[2],\"5223\":[null,1],\"5224\":[1],\"5225\":[null,1],\"5226\":[null,2],\"5227\":[1],\"5228\":[null,3],\"5229\":[1],\"5230\":[null,6],\"5231\":[null,4],\"5232\":[null,6],\"5233\":[null,3],\"5234\":[null,5],\"5235\":[1],\"5236\":[null,3],\"5237\":[null,1],\"5238\":[null,6],\"5239\":[null,7],\"5240\":[null,2],\"5241\":[null,4],\"5242\":[1],\"5243\":[null,2],\"5244\":[null,1],\"5245\":[null,1],\"5246\":[null,3],\"5247\":[null,2],\"5248\":[null,1],\"5249\":[null,1],\"5250\":[null,1],\"5251\":[null,1],\"5252\":[null,1],\"5253\":[null,4],\"5254\":[1],\"5255\":[1],\"5256\":[1],\"5257\":[null,1],\"5258\":[null,1],\"5259\":[1],\"5260\":[null,1],\"5261\":[null,1],\"5262\":[1],\"5263\":[null,3],\"5264\":[null,8],\"5265\":[null,3],\"5266\":[2],\"5267\":[1],\"5268\":[null,4],\"5269\":[1],\"5270\":[null,1],\"5271\":[null,1],\"5272\":[1],\"5273\":[null,2],\"5274\":[2],\"5275\":[1],\"5276\":[null,4],\"5277\":[1],\"5278\":[null,1],\"5279\":[null,1],\"5280\":[1],\"5281\":[null,2],\"5282\":[1],\"5283\":[2],\"5284\":[1],\"5285\":[5],\"5286\":[null,3],\"5287\":[null,5],\"5288\":[null,4],\"5289\":[null,4],\"5290\":[null,26],\"5291\":[3],\"5292\":[1],\"5293\":[2],\"5294\":[1],\"5295\":[1],\"5296\":[1],\"5297\":[1],\"5298\":[null,22],\"5299\":[null,4],\"5300\":[null,1],\"5301\":[1],\"5302\":[null,5],\"5303\":[null,11],\"5304\":[null,1],\"5305\":[1],\"5306\":[2],\"5307\":[null,3],\"5308\":[null,5],\"5309\":[null,8],\"5310\":[null,13],\"5311\":[1],\"5312\":[null,8],\"5313\":[null,11],\"5314\":[1],\"5315\":[null,4],\"5316\":[null,23],\"5317\":[null,14],\"5318\":[null,9],\"5319\":[null,12],\"5320\":[null,4],\"5321\":[null,3],\"5322\":[null,20],\"5323\":[null,8],\"5324\":[null,4],\"5325\":[null,15],\"5326\":[null,10],\"5327\":[null,12],\"5328\":[null,1],\"5329\":[1],\"5330\":[null,5],\"5331\":[null,3],\"5332\":[null,3],\"5333\":[null,4],\"5334\":[null,6],\"5335\":[null,1],\"5336\":[null,11],\"5337\":[null,61],\"5338\":[null,5],\"5339\":[null,3],\"5340\":[null,6],\"5341\":[null,11],\"5342\":[null,8],\"5343\":[null,2],\"5344\":[null,12],\"5345\":[1],\"5346\":[2],\"5347\":[null,14],\"5348\":[1],\"5349\":[2],\"5350\":[null,4],\"5351\":[null,5],\"5352\":[null,5],\"5353\":[null,1],\"5354\":[null,12],\"5355\":[null,8],\"5356\":[null,3],\"5357\":[null,9],\"5358\":[7],\"5359\":[null,3],\"5360\":[null,8],\"5361\":[null,10],\"5362\":[null,3],\"5363\":[null,5],\"5364\":[2],\"5365\":[null,3],\"5366\":[null,15],\"5367\":[null,10],\"5368\":[null,3],\"5369\":[null,5],\"5370\":[null,17],\"5371\":[7],\"5372\":[null,13],\"5373\":[null,24],\"5374\":[2],\"5375\":[null,9],\"5376\":[null,11],\"5377\":[null,3],\"5378\":[null,35],\"5379\":[null,6],\"5380\":[null,5],\"5381\":[null,2],\"5382\":[null,2],\"5383\":[null,2],\"5384\":[null,2],\"5385\":[1],\"5386\":[2],\"5387\":[null,7],\"5388\":[null,2],\"5389\":[null,2],\"5390\":[null,10],\"5391\":[null,5],\"5392\":[null,4],\"5393\":[null,10],\"5394\":[null,7],\"5395\":[null,19],\"5396\":[null,5],\"5397\":[null,3],\"5398\":[null,3],\"5399\":[null,9],\"5400\":[null,2],\"5401\":[null,16],\"5402\":[null,10],\"5403\":[null,3],\"5404\":[null,13],\"5405\":[2],\"5406\":[null,7],\"5407\":[null,5],\"5408\":[null,6],\"5409\":[null,12],\"5410\":[null,6],\"5411\":[null,9],\"5412\":[null,9],\"5413\":[2],\"5414\":[null,5],\"5415\":[null,12],\"5416\":[null,10],\"5417\":[null,4],\"5418\":[null,16],\"5419\":[null,13],\"5420\":[null,8],\"5421\":[2],\"5422\":[null,4],\"5423\":[null,15],\"5424\":[null,4],\"5425\":[null,18],\"5426\":[null,4],\"5427\":[null,17],\"5428\":[null,1],\"5429\":[null,20],\"5430\":[null,10],\"5431\":[1],\"5432\":[1],\"5433\":[1],\"5434\":[2],\"5435\":[null,10],\"5436\":[null,17],\"5437\":[5],\"5438\":[null,9],\"5439\":[3],\"5440\":[null,5],\"5441\":[2],\"5442\":[null,10],\"5443\":[2],\"5444\":[null,13],\"5445\":[2],\"5446\":[null,13],\"5447\":[null,10],\"5448\":[1],\"5449\":[1],\"5450\":[1],\"5451\":[1],\"5452\":[1],\"5453\":[1],\"5454\":[1],\"5455\":[2],\"5456\":[null,10],\"5457\":[3],\"5458\":[null,34],\"5459\":[2],\"5460\":[null,14],\"5461\":[null,1],\"5462\":[null,1],\"5463\":[null,8],\"5464\":[null,2],\"5465\":[null,2],\"5466\":[null,3],\"5467\":[null,1],\"5468\":[null,1],\"5469\":[2],\"5470\":[null,5],\"5471\":[null,5],\"5472\":[null,6],\"5473\":[null,10],\"5474\":[null,2],\"5475\":[null,4],\"5476\":[null,1],\"5477\":[null,3],\"5478\":[1],\"5479\":[1],\"5480\":[2],\"5481\":[2],\"5482\":[null,8],\"5483\":[null,2],\"5484\":[null,35],\"5485\":[1],\"5486\":[null,6],\"5487\":[null,8],\"5488\":[null,27],\"5489\":[null,37],\"5490\":[1],\"5491\":[2],\"5492\":[null,4],\"5493\":[null,6],\"5494\":[null,8],\"5495\":[2],\"5496\":[null,3],\"5497\":[null,6],\"5498\":[2],\"5499\":[null,11],\"5500\":[1],\"5501\":[1],\"5502\":[2],\"5503\":[null,6],\"5504\":[2],\"5505\":[null,11],\"5506\":[null,11],\"5507\":[2],\"5508\":[null,11],\"5509\":[null,10],\"5510\":[2],\"5511\":[null,8],\"5512\":[null,7],\"5513\":[null,7],\"5514\":[null,5],\"5515\":[null,10],\"5516\":[2],\"5517\":[null,8],\"5518\":[null,5],\"5519\":[null,22],\"5520\":[null,9],\"5521\":[null,18],\"5522\":[null,13],\"5523\":[2],\"5524\":[null,3],\"5525\":[null,5],\"5526\":[null,17],\"5527\":[null,8],\"5528\":[null,7],\"5529\":[null,26],\"5530\":[null,9],\"5531\":[5],\"5532\":[null,11],\"5533\":[null,8],\"5534\":[1],\"5535\":[6],\"5536\":[1],\"5537\":[null,15],\"5538\":[null,17],\"5539\":[null,13],\"5540\":[null,2],\"5541\":[null,5],\"5542\":[null,7],\"5543\":[1],\"5544\":[1],\"5545\":[null,22],\"5546\":[null,2],\"5547\":[null,7],\"5548\":[null,7],\"5549\":[null,19],\"5550\":[null,12],\"5551\":[null,14],\"5552\":[null,10],\"5553\":[null,10],\"5554\":[null,6],\"5555\":[null,11],\"5556\":[null,9],\"5557\":[null,10],\"5558\":[null,8],\"5559\":[null,3],\"5560\":[1],\"5561\":[null,9],\"5562\":[null,5],\"5563\":[null,6],\"5564\":[null,10],\"5565\":[null,5],\"5566\":[null,4],\"5567\":[null,10],\"5568\":[1],\"5569\":[4],\"5570\":[null,4],\"5571\":[null,1],\"5572\":[null,6],\"5573\":[null,4],\"5574\":[null,5],\"5575\":[null,5],\"5576\":[null,2],\"5577\":[null,4],\"5578\":[null,8],\"5579\":[null,3],\"5580\":[null,4],\"5581\":[3],\"5582\":[null,3],\"5583\":[null,12],\"5584\":[null,9],\"5585\":[null,8],\"5586\":[null,9],\"5587\":[null,15],\"5588\":[3],\"5589\":[null,11],\"5590\":[null,2],\"5591\":[null,8],\"5592\":[null,8],\"5593\":[null,8],\"5594\":[null,2],\"5595\":[null,8],\"5596\":[null,8],\"5597\":[null,7],\"5598\":[null,2],\"5599\":[null,9],\"5600\":[2],\"5601\":[null,7],\"5602\":[null,2],\"5603\":[null,1],\"5604\":[null,5],\"5605\":[null,7],\"5606\":[null,7],\"5607\":[null,2],\"5608\":[null,16],\"5609\":[null,2],\"5610\":[null,15],\"5611\":[null,2],\"5612\":[null,3],\"5613\":[null,1],\"5614\":[null,3],\"5615\":[null,8],\"5616\":[null,16],\"5617\":[null,3],\"5618\":[null,1],\"5619\":[null,4],\"5620\":[null,7],\"5621\":[null,12],\"5622\":[null,3],\"5623\":[null,1],\"5624\":[null,21],\"5625\":[null,13],\"5626\":[null,7],\"5627\":[null,3],\"5628\":[null,7],\"5629\":[null,13],\"5630\":[2],\"5631\":[null,22],\"5632\":[null,14],\"5633\":[null,1],\"5634\":[null,8],\"5635\":[null,1],\"5636\":[null,16],\"5637\":[null,1],\"5638\":[null,13],\"5639\":[null,1],\"5640\":[null,15],\"5641\":[4],\"5642\":[null,2],\"5643\":[null,8],\"5644\":[null,1],\"5645\":[5],\"5646\":[null,15],\"5647\":[null,5],\"5648\":[null,5],\"5649\":[null,2],\"5650\":[null,13],\"5651\":[null,29],\"5652\":[1],\"5653\":[null,2],\"5654\":[null,4],\"5655\":[null,2],\"5656\":[null,5],\"5657\":[null,2],\"5658\":[null,3],\"5659\":[1],\"5660\":[null,27],\"5661\":[null,12],\"5662\":[1],\"5663\":[1],\"5664\":[null,15],\"5665\":[null,3],\"5666\":[null,5],\"5667\":[null,3],\"5668\":[1],\"5669\":[null,1],\"5670\":[null,15],\"5671\":[null,27],\"5672\":[5],\"5673\":[null,15],\"5674\":[null,2],\"5675\":[null,8],\"5676\":[null,5],\"5677\":[null,5],\"5678\":[null,10],\"5679\":[null,1],\"5680\":[null,2],\"5681\":[null,6],\"5682\":[null,1],\"5683\":[null,1],\"5684\":[null,1],\"5685\":[2],\"5686\":[null,6],\"5687\":[null,4],\"5688\":[null,6],\"5689\":[null,4],\"5690\":[null,4],\"5691\":[null,5],\"5692\":[null,1],\"5693\":[null,4],\"5694\":[2],\"5695\":[1],\"5696\":[null,1],\"5697\":[null,2],\"5698\":[null,1],\"5699\":[null,1],\"5700\":[null,1],\"5701\":[null,9],\"5702\":[4],\"5703\":[null,2],\"5704\":[null,10],\"5705\":[null,5],\"5706\":[null,3],\"5707\":[null,12],\"5708\":[null,12],\"5709\":[null,15],\"5710\":[null,11],\"5711\":[5],\"5712\":[2],\"5713\":[null,34],\"5714\":[2],\"5715\":[null,28],\"5716\":[null,2],\"5717\":[null,1],\"5718\":[null,3],\"5719\":[null,1],\"5720\":[null,20],\"5721\":[2],\"5722\":[null,10],\"5723\":[null,1],\"5724\":[2],\"5725\":[null,3],\"5726\":[null,3],\"5727\":[null,13],\"5728\":[null,5],\"5729\":[null,7],\"5730\":[null,8],\"5731\":[null,3],\"5732\":[null,2],\"5733\":[null,1],\"5734\":[null,10],\"5735\":[1],\"5736\":[1],\"5737\":[1],\"5738\":[1],\"5739\":[1],\"5740\":[1],\"5741\":[null,10],\"5742\":[1],\"5743\":[1],\"5744\":[3],\"5745\":[10],\"5746\":[null,18],\"5747\":[6],\"5748\":[null,18],\"5749\":[2],\"5750\":[null,11],\"5751\":[3],\"5752\":[null,4],\"5753\":[null,4],\"5754\":[null,2],\"5755\":[null,4],\"5756\":[null,5],\"5757\":[null,5],\"5758\":[null,8],\"5759\":[null,6],\"5760\":[null,10],\"5761\":[5],\"5762\":[null,3],\"5763\":[null,6],\"5764\":[8],\"5765\":[null,16],\"5766\":[6],\"5767\":[null,6],\"5768\":[6],\"5769\":[null,9],\"5770\":[6],\"5771\":[null,2],\"5772\":[6],\"5773\":[null,8],\"5774\":[null,10],\"5775\":[4],\"5776\":[null,10],\"5777\":[null,12],\"5778\":[null,9],\"5779\":[null,5],\"5780\":[null,9],\"5781\":[null,8],\"5782\":[7],\"5783\":[null,7],\"5784\":[5],\"5785\":[null,4],\"5786\":[1],\"5787\":[2],\"5788\":[3],\"5789\":[null,10],\"5790\":[null,8],\"5791\":[null,10],\"5792\":[null,9],\"5793\":[null,8],\"5794\":[null,6],\"5795\":[2],\"5796\":[null,16],\"5797\":[null,9],\"5798\":[null,14],\"5799\":[null,4],\"5800\":[null,16],\"5801\":[null,15],\"5802\":[1],\"5803\":[null,1],\"5804\":[1],\"5805\":[null,5],\"5806\":[1],\"5807\":[null,7],\"5808\":[null,18],\"5809\":[null,11],\"5810\":[null,17],\"5811\":[null,5],\"5812\":[1],\"5813\":[null,7],\"5814\":[null,2],\"5815\":[null,6],\"5816\":[null,13],\"5817\":[1],\"5818\":[null,15],\"5819\":[null,9],\"5820\":[4],\"5821\":[null,6],\"5822\":[null,6],\"5823\":[1],\"5824\":[null,12],\"5825\":[null,4],\"5826\":[null,5],\"5827\":[null,16],\"5828\":[null,6],\"5829\":[3],\"5830\":[null,13],\"5831\":[null,5],\"5832\":[null,4],\"5833\":[null,1],\"5834\":[null,8],\"5835\":[null,1],\"5836\":[null,5],\"5837\":[null,1],\"5838\":[null,7],\"5839\":[null,1],\"5840\":[null,11],\"5841\":[null,1],\"5842\":[null,19],\"5843\":[null,1],\"5844\":[null,12],\"5845\":[2],\"5846\":[null,7],\"5847\":[null,20],\"5848\":[null,15],\"5849\":[null,11],\"5850\":[2],\"5851\":[null,4],\"5852\":[null,5],\"5853\":[3],\"5854\":[null,13],\"5855\":[null,6],\"5856\":[null,6],\"5857\":[null,1],\"5858\":[null,4],\"5859\":[null,11],\"5860\":[1],\"5861\":[null,7],\"5862\":[null,6],\"5863\":[1],\"5864\":[null,13],\"5865\":[null,3],\"5866\":[null,13],\"5867\":[1],\"5868\":[null,10],\"5869\":[null,13],\"5870\":[null,10],\"5871\":[1],\"5872\":[null,6],\"5873\":[1],\"5874\":[null,21],\"5875\":[1],\"5876\":[null,3],\"5877\":[null,3],\"5878\":[null,4],\"5879\":[null,11],\"5880\":[1],\"5881\":[null,9],\"5882\":[null,6],\"5883\":[null,14],\"5884\":[null,25],\"5885\":[null,3],\"5886\":[null,1],\"5887\":[null,11],\"5888\":[null,1],\"5889\":[1],\"5890\":[null,3],\"5891\":[null,3],\"5892\":[null,11],\"5893\":[null,1],\"5894\":[4],\"5895\":[null,9],\"5896\":[null,6],\"5897\":[null,9],\"5898\":[null,9],\"5899\":[null,11],\"5900\":[null,9],\"5901\":[1],\"5902\":[null,15],\"5903\":[1],\"5904\":[2],\"5905\":[null,2],\"5906\":[null,5],\"5907\":[null,7],\"5908\":[null,1],\"5909\":[null,11],\"5910\":[2],\"5911\":[null,6],\"5912\":[null,6],\"5913\":[2],\"5914\":[null,2],\"5915\":[null,6],\"5916\":[null,7],\"5917\":[null,7],\"5918\":[null,3],\"5919\":[null,1],\"5920\":[null,2],\"5921\":[null,2],\"5922\":[null,2],\"5923\":[null,2],\"5924\":[null,2],\"5925\":[null,1],\"5926\":[null,1],\"5927\":[2],\"5928\":[null,3],\"5929\":[null,13],\"5930\":[1],\"5931\":[2],\"5932\":[null,15],\"5933\":[2],\"5934\":[null,18],\"5935\":[2],\"5936\":[null,5],\"5937\":[null,7],\"5938\":[null,9],\"5939\":[2],\"5940\":[null,13],\"5941\":[null,2],\"5942\":[null,5],\"5943\":[null,17],\"5944\":[2],\"5945\":[null,6],\"5946\":[null,10],\"5947\":[null,7],\"5948\":[2],\"5949\":[null,9],\"5950\":[null,4],\"5951\":[3],\"5952\":[null,14],\"5953\":[null,7],\"5954\":[3],\"5955\":[null,5],\"5956\":[null,4],\"5957\":[null,6],\"5958\":[null,11],\"5959\":[null,6],\"5960\":[null,4],\"5961\":[null,11],\"5962\":[null,7],\"5963\":[null,10],\"5964\":[1],\"5965\":[3],\"5966\":[null,12],\"5967\":[null,19],\"5968\":[null,1],\"5969\":[null,11],\"5970\":[null,7],\"5971\":[null,8],\"5972\":[null,12],\"5973\":[null,9],\"5974\":[null,9],\"5975\":[null,13],\"5976\":[3],\"5977\":[null,11],\"5978\":[null,1],\"5979\":[null,16],\"5980\":[null,8],\"5981\":[2],\"5982\":[null,10],\"5983\":[null,12],\"5984\":[null,4],\"5985\":[null,11],\"5986\":[1],\"5987\":[3],\"5988\":[null,4],\"5989\":[null,6],\"5990\":[null,10],\"5991\":[2],\"5992\":[null,2],\"5993\":[null,16],\"5994\":[null,27],\"5995\":[null,3],\"5996\":[null,26],\"5997\":[null,19],\"5998\":[null,8],\"5999\":[null,7],\"6000\":[null,12],\"6001\":[1],\"6002\":[2],\"6003\":[null,5],\"6004\":[null,3],\"6005\":[null,4],\"6006\":[null,8],\"6007\":[2],\"6008\":[null,4],\"6009\":[null,38],\"6010\":[null,2],\"6011\":[null,104],\"6012\":[null,4],\"6013\":[null,4],\"6014\":[null,4],\"6015\":[null,5],\"6016\":[null,2],\"6017\":[null,10],\"6018\":[null,4],\"6019\":[null,4],\"6020\":[null,4],\"6021\":[null,5],\"6022\":[null,1],\"6023\":[null,2],\"6024\":[null,4],\"6025\":[null,5],\"6026\":[null,13],\"6027\":[null,5],\"6028\":[null,4],\"6029\":[null,26],\"6030\":[null,2],\"6031\":[null,4],\"6032\":[null,3],\"6033\":[null,13],\"6034\":[null,19],\"6035\":[null,21],\"6036\":[null,2],\"6037\":[null,3],\"6038\":[null,4],\"6039\":[null,5],\"6040\":[null,7],\"6041\":[null,1],\"6042\":[null,2],\"6043\":[null,2],\"6044\":[null,17],\"6045\":[null,18],\"6046\":[null,7],\"6047\":[null,3],\"6048\":[null,11],\"6049\":[null,7],\"6050\":[null,11],\"6051\":[null,3],\"6052\":[2],\"6053\":[null,9],\"6054\":[null,2],\"6055\":[null,7],\"6056\":[null,12],\"6057\":[null,4],\"6058\":[null,13],\"6059\":[null,11],\"6060\":[null,12],\"6061\":[2],\"6062\":[null,3],\"6063\":[null,1],\"6064\":[null,4],\"6065\":[null,5],\"6066\":[null,4],\"6067\":[null,2],\"6068\":[null,1],\"6069\":[null,2],\"6070\":[null,1],\"6071\":[null,4],\"6072\":[null,4],\"6073\":[null,1],\"6074\":[null,22],\"6075\":[1],\"6076\":[1],\"6077\":[3],\"6078\":[null,3],\"6079\":[null,25],\"6080\":[null,6],\"6081\":[null,8],\"6082\":[1],\"6083\":[null,9],\"6084\":[null,1],\"6085\":[null,8],\"6086\":[null,10],\"6087\":[null,8],\"6088\":[null,13],\"6089\":[null,8],\"6090\":[null,7],\"6091\":[null,8],\"6092\":[1],\"6093\":[2],\"6094\":[2],\"6095\":[3],\"6096\":[null,21],\"6097\":[1],\"6098\":[null,4],\"6099\":[null,12],\"6100\":[null,2],\"6101\":[null,2],\"6102\":[null,1],\"6103\":[null,1],\"6104\":[null,1],\"6105\":[null,1],\"6106\":[null,1],\"6107\":[null,1],\"6108\":[null,1],\"6109\":[null,5],\"6110\":[null,4],\"6111\":[null,8],\"6112\":[null,6],\"6113\":[null,4],\"6114\":[null,7],\"6115\":[null,1],\"6116\":[null,6],\"6117\":[null,7],\"6118\":[null,4],\"6119\":[null,2],\"6120\":[2],\"6121\":[null,1],\"6122\":[null,3],\"6123\":[null,1],\"6124\":[null,6],\"6125\":[null,2],\"6126\":[null,33],\"6127\":[null,2],\"6128\":[null,8],\"6129\":[null,2],\"6130\":[null,45],\"6131\":[null,3],\"6132\":[null,1],\"6133\":[null,2],\"6134\":[null,3],\"6135\":[null,1],\"6136\":[null,6],\"6137\":[null,1],\"6138\":[null,6],\"6139\":[null,6],\"6140\":[null,3],\"6141\":[null,3],\"6142\":[null,11],\"6143\":[null,2],\"6144\":[null,2],\"6145\":[null,3],\"6146\":[null,2],\"6147\":[null,5],\"6148\":[null,2],\"6149\":[null,9],\"6150\":[1],\"6151\":[null,11],\"6152\":[null,1],\"6153\":[null,15],\"6154\":[null,2],\"6155\":[null,15],\"6156\":[1],\"6157\":[1],\"6158\":[1],\"6159\":[null,6],\"6160\":[null,19],\"6161\":[null,12],\"6162\":[null,5],\"6163\":[null,25],\"6164\":[1],\"6165\":[2],\"6166\":[null,14],\"6167\":[3],\"6168\":[null,3],\"6169\":[null,18],\"6170\":[null,18],\"6171\":[2],\"6172\":[null,12],\"6173\":[2],\"6174\":[null,13],\"6175\":[null,6],\"6176\":[null,8],\"6177\":[null,4],\"6178\":[null,11],\"6179\":[1],\"6180\":[null,17],\"6181\":[null,17],\"6182\":[null,15],\"6183\":[null,21],\"6184\":[null,11],\"6185\":[1],\"6186\":[null,11],\"6187\":[null,12],\"6188\":[null,25],\"6189\":[null,39],\"6190\":[null,9],\"6191\":[null,11],\"6192\":[null,16],\"6193\":[null,32],\"6194\":[null,19],\"6195\":[null,8],\"6196\":[null,4],\"6197\":[null,9],\"6198\":[null,14],\"6199\":[null,2],\"6200\":[null,23],\"6201\":[null,1],\"6202\":[null,2],\"6203\":[null,17],\"6204\":[null,2],\"6205\":[null,34],\"6206\":[null,1],\"6207\":[1],\"6208\":[1],\"6209\":[null,11],\"6210\":[null,1],\"6211\":[null,8],\"6212\":[null,3],\"6213\":[null,5],\"6214\":[null,6],\"6215\":[null,2],\"6216\":[null,9],\"6217\":[5],\"6218\":[null,16],\"6219\":[null,20],\"6220\":[null,11],\"6221\":[null,17],\"6222\":[null,17],\"6223\":[null,8],\"6224\":[null,12],\"6225\":[1],\"6226\":[2],\"6227\":[1],\"6228\":[2],\"6229\":[null,4],\"6230\":[null,13],\"6231\":[null,5],\"6232\":[null,8],\"6233\":[null,31],\"6234\":[null,6],\"6235\":[1],\"6236\":[1],\"6237\":[null,3],\"6238\":[null,2],\"6239\":[null,14],\"6240\":[null,7],\"6241\":[null,5],\"6242\":[null,14],\"6243\":[null,7],\"6244\":[null,7],\"6245\":[null,5],\"6246\":[null,4],\"6247\":[null,5],\"6248\":[null,6],\"6249\":[1],\"6250\":[null,5],\"6251\":[null,15],\"6252\":[null,5],\"6253\":[null,28],\"6254\":[null,7],\"6255\":[null,9],\"6256\":[null,11],\"6257\":[1],\"6258\":[3],\"6259\":[null,11],\"6260\":[null,15],\"6261\":[null,7],\"6262\":[null,11],\"6263\":[1],\"6264\":[null,7],\"6265\":[null,26],\"6266\":[null,19],\"6267\":[null,4],\"6268\":[null,1],\"6269\":[null,13],\"6270\":[null,10],\"6271\":[null,6],\"6272\":[null,11],\"6273\":[null,3],\"6274\":[null,14],\"6275\":[null,13],\"6276\":[null,12],\"6277\":[null,7],\"6278\":[null,7],\"6279\":[null,29],\"6280\":[null,9],\"6281\":[null,7],\"6282\":[null,13],\"6283\":[null,14],\"6284\":[1],\"6285\":[null,4],\"6286\":[null,3],\"6287\":[null,1],\"6288\":[null,7],\"6289\":[3],\"6290\":[null,9],\"6291\":[null,8],\"6292\":[null,7],\"6293\":[null,1],\"6294\":[null,2],\"6295\":[null,10],\"6296\":[null,10],\"6297\":[null,9],\"6298\":[null,7],\"6299\":[null,13],\"6300\":[1],\"6301\":[null,10],\"6302\":[null,16],\"6303\":[null,4],\"6304\":[null,11],\"6305\":[null,14],\"6306\":[null,1],\"6307\":[null,19],\"6308\":[null,15],\"6309\":[null,5],\"6310\":[null,12],\"6311\":[null,7],\"6312\":[null,1],\"6313\":[null,12],\"6314\":[null,14],\"6315\":[null,4],\"6316\":[1],\"6317\":[null,13],\"6318\":[null,11],\"6319\":[null,10],\"6320\":[1],\"6321\":[null,5],\"6322\":[null,5],\"6323\":[null,7],\"6324\":[null,5],\"6325\":[null,4],\"6326\":[null,4],\"6327\":[null,5],\"6328\":[null,5],\"6329\":[null,5],\"6330\":[null,5],\"6331\":[null,5],\"6332\":[null,11],\"6333\":[null,5],\"6334\":[null,5],\"6335\":[null,5],\"6336\":[null,5],\"6337\":[null,3],\"6338\":[null,5],\"6339\":[null,8],\"6340\":[null,5],\"6341\":[4],\"6342\":[null,12],\"6343\":[null,14],\"6344\":[null,6],\"6345\":[null,1],\"6346\":[null,6],\"6347\":[null,3],\"6348\":[null,3],\"6349\":[null,3],\"6350\":[null,13],\"6351\":[null,7],\"6352\":[null,16],\"6353\":[null,12],\"6354\":[null,5],\"6355\":[null,8],\"6356\":[null,7],\"6357\":[null,5],\"6358\":[null,7],\"6359\":[null,7],\"6360\":[null,6],\"6361\":[null,21],\"6362\":[4],\"6363\":[null,12],\"6364\":[null,7],\"6365\":[null,1],\"6366\":[null,2],\"6367\":[null,16],\"6368\":[null,12],\"6369\":[null,5],\"6370\":[null,5],\"6371\":[null,10],\"6372\":[null,13],\"6373\":[null,8],\"6374\":[null,7],\"6375\":[null,6],\"6376\":[null,6],\"6377\":[null,11],\"6378\":[null,7],\"6379\":[null,10],\"6380\":[4],\"6381\":[null,11],\"6382\":[null,8],\"6383\":[null,1],\"6384\":[null,2],\"6385\":[null,12],\"6386\":[null,11],\"6387\":[null,6],\"6388\":[null,8],\"6389\":[null,7],\"6390\":[null,4],\"6391\":[null,5],\"6392\":[null,12],\"6393\":[1],\"6394\":[1],\"6395\":[1],\"6396\":[5],\"6397\":[null,8],\"6398\":[null,11],\"6399\":[null,7],\"6400\":[null,3],\"6401\":[null,2],\"6402\":[null,12],\"6403\":[null,9],\"6404\":[null,2],\"6405\":[null,3],\"6406\":[null,23],\"6407\":[null,2],\"6408\":[null,6],\"6409\":[null,7],\"6410\":[null,5],\"6411\":[null,2],\"6412\":[null,6],\"6413\":[null,8],\"6414\":[null,3],\"6415\":[null,6],\"6416\":[null,10],\"6417\":[null,3],\"6418\":[null,9],\"6419\":[null,13],\"6420\":[1],\"6421\":[null,3],\"6422\":[2],\"6423\":[null,2],\"6424\":[null,10],\"6425\":[null,15],\"6426\":[null,15],\"6427\":[null,3],\"6428\":[null,15],\"6429\":[null,7],\"6430\":[null,4],\"6431\":[null,11],\"6432\":[null,4],\"6433\":[null,9],\"6434\":[null,15],\"6435\":[null,20],\"6436\":[null,37],\"6437\":[1],\"6438\":[null,2],\"6439\":[null,18],\"6440\":[null,4],\"6441\":[null,12],\"6442\":[null,14],\"6443\":[null,2],\"6444\":[null,6],\"6445\":[null,13],\"6446\":[null,2],\"6447\":[null,8],\"6448\":[null,3],\"6449\":[null,7],\"6450\":[null,5],\"6451\":[null,5],\"6452\":[null,14],\"6453\":[2],\"6454\":[null,2],\"6455\":[null,5],\"6456\":[null,16],\"6457\":[null,1],\"6458\":[2],\"6459\":[null,9],\"6460\":[null,4],\"6461\":[null,6],\"6462\":[null,11],\"6463\":[null,7],\"6464\":[null,7],\"6465\":[null,15],\"6466\":[null,1],\"6467\":[2],\"6468\":[null,8],\"6469\":[null,13],\"6470\":[null,2],\"6471\":[null,12],\"6472\":[null,3],\"6473\":[null,2],\"6474\":[null,11],\"6475\":[null,8],\"6476\":[2],\"6477\":[null,16],\"6478\":[null,4],\"6479\":[null,2],\"6480\":[null,3],\"6481\":[null,2],\"6482\":[null,3],\"6483\":[null,6],\"6484\":[2],\"6485\":[null,19],\"6486\":[null,5],\"6487\":[null,12],\"6488\":[2],\"6489\":[null,8],\"6490\":[null,1],\"6491\":[null,25],\"6492\":[null,1],\"6493\":[null,14],\"6494\":[2],\"6495\":[null,2],\"6496\":[null,15],\"6497\":[null,3],\"6498\":[null,6],\"6499\":[null,5],\"6500\":[null,8],\"6501\":[null,2],\"6502\":[null,6],\"6503\":[null,2],\"6504\":[null,6],\"6505\":[null,4],\"6506\":[null,11],\"6507\":[null,2],\"6508\":[null,14],\"6509\":[null,2],\"6510\":[null,16],\"6511\":[null,2],\"6512\":[null,4],\"6513\":[null,2],\"6514\":[null,3],\"6515\":[null,4],\"6516\":[null,3],\"6517\":[null,4],\"6518\":[null,7],\"6519\":[null,6],\"6520\":[null,1],\"6521\":[1],\"6522\":[null,7],\"6523\":[null,1],\"6524\":[2],\"6525\":[null,3],\"6526\":[null,6],\"6527\":[null,5],\"6528\":[null,6],\"6529\":[null,7],\"6530\":[null,3],\"6531\":[null,3],\"6532\":[null,2],\"6533\":[null,5],\"6534\":[null,2],\"6535\":[null,3],\"6536\":[null,7],\"6537\":[null,4],\"6538\":[null,12],\"6539\":[null,8],\"6540\":[null,12],\"6541\":[null,4],\"6542\":[null,6],\"6543\":[2],\"6544\":[null,3],\"6545\":[null,2],\"6546\":[null,3],\"6547\":[null,2],\"6548\":[null,4],\"6549\":[1],\"6550\":[null,2],\"6551\":[null,6],\"6552\":[null,12],\"6553\":[null,4],\"6554\":[null,7],\"6555\":[null,4],\"6556\":[null,3],\"6557\":[null,4],\"6558\":[null,7],\"6559\":[1],\"6560\":[null,3],\"6561\":[null,5],\"6562\":[null,7],\"6563\":[null,5],\"6564\":[null,6],\"6565\":[null,14],\"6566\":[null,15],\"6567\":[null,4],\"6568\":[null,5],\"6569\":[null,8],\"6570\":[null,12],\"6571\":[null,11],\"6572\":[null,15],\"6573\":[null,12],\"6574\":[null,7],\"6575\":[null,10],\"6576\":[null,11],\"6577\":[1],\"6578\":[null,3],\"6579\":[null,8],\"6580\":[null,8],\"6581\":[null,8],\"6582\":[null,9],\"6583\":[null,5],\"6584\":[null,12],\"6585\":[null,11],\"6586\":[null,4],\"6587\":[null,9],\"6588\":[null,11],\"6589\":[null,3],\"6590\":[3],\"6591\":[null,6],\"6592\":[null,8],\"6593\":[null,6],\"6594\":[null,12],\"6595\":[null,11],\"6596\":[null,7],\"6597\":[null,10],\"6598\":[null,9],\"6599\":[null,13],\"6600\":[null,13],\"6601\":[null,11],\"6602\":[null,8],\"6603\":[null,5],\"6604\":[null,6],\"6605\":[null,17],\"6606\":[null,10],\"6607\":[null,16],\"6608\":[2],\"6609\":[null,6],\"6610\":[null,9],\"6611\":[null,10],\"6612\":[null,14],\"6613\":[null,8],\"6614\":[null,1],\"6615\":[null,2],\"6616\":[null,5],\"6617\":[null,6],\"6618\":[null,10],\"6619\":[2],\"6620\":[null,10],\"6621\":[null,11],\"6622\":[null,10],\"6623\":[2],\"6624\":[null,6],\"6625\":[null,13],\"6626\":[null,11],\"6627\":[3],\"6628\":[null,12],\"6629\":[null,7],\"6630\":[null,11],\"6631\":[null,14],\"6632\":[null,10],\"6633\":[1],\"6634\":[null,7],\"6635\":[null,8],\"6636\":[null,5],\"6637\":[null,7],\"6638\":[null,10],\"6639\":[1],\"6640\":[null,7],\"6641\":[null,11],\"6642\":[null,6],\"6643\":[null,17],\"6644\":[null,38],\"6645\":[null,12],\"6646\":[null,6],\"6647\":[null,3],\"6648\":[null,6],\"6649\":[null,6],\"6650\":[null,5],\"6651\":[null,2],\"6652\":[1],\"6653\":[null,8],\"6654\":[null,2],\"6655\":[null,17],\"6656\":[null,11],\"6657\":[1],\"6658\":[null,6],\"6659\":[null,2],\"6660\":[null,16],\"6661\":[1],\"6662\":[null,7],\"6663\":[null,2],\"6664\":[null,16],\"6665\":[null,11],\"6666\":[null,12],\"6667\":[1],\"6668\":[null,6],\"6669\":[null,6],\"6670\":[null,6],\"6671\":[null,9],\"6672\":[null,8],\"6673\":[null,2],\"6674\":[null,1],\"6675\":[null,4],\"6676\":[null,6],\"6677\":[null,6],\"6678\":[null,6],\"6679\":[null,6],\"6680\":[null,11],\"6681\":[null,13],\"6682\":[null,14],\"6683\":[null,7],\"6684\":[null,14],\"6685\":[null,20],\"6686\":[null,2],\"6687\":[null,6],\"6688\":[null,5],\"6689\":[null,24],\"6690\":[1],\"6691\":[null,25],\"6692\":[null,1],\"6693\":[null,5],\"6694\":[null,16],\"6695\":[null,10],\"6696\":[null,9],\"6697\":[null,4],\"6698\":[null,30],\"6699\":[null,2],\"6700\":[null,10],\"6701\":[null,15],\"6702\":[null,16],\"6703\":[null,9],\"6704\":[null,2],\"6705\":[2],\"6706\":[null,4],\"6707\":[null,1],\"6708\":[null,9],\"6709\":[null,10],\"6710\":[null,13],\"6711\":[1],\"6712\":[null,3],\"6713\":[null,4],\"6714\":[null,10],\"6715\":[1],\"6716\":[1],\"6717\":[null,2],\"6718\":[3],\"6719\":[null,3],\"6720\":[null,5],\"6721\":[1],\"6722\":[null,4],\"6723\":[3],\"6724\":[null,3],\"6725\":[null,2],\"6726\":[null,14],\"6727\":[null,6],\"6728\":[1],\"6729\":[null,4],\"6730\":[1],\"6731\":[null,4],\"6732\":[1],\"6733\":[null,10],\"6734\":[3],\"6735\":[5],\"6736\":[null,6],\"6737\":[null,2],\"6738\":[null,3],\"6739\":[4],\"6740\":[null,15],\"6741\":[null,15],\"6742\":[1],\"6743\":[1],\"6744\":[3],\"6745\":[null,6],\"6746\":[null,4],\"6747\":[null,9],\"6748\":[null,4],\"6749\":[1],\"6750\":[null,13],\"6751\":[null,9],\"6752\":[1],\"6753\":[3],\"6754\":[2],\"6755\":[null,7],\"6756\":[null,10],\"6757\":[null,21],\"6758\":[null,15],\"6759\":[null,12],\"6760\":[2],\"6761\":[null,8],\"6762\":[null,4],\"6763\":[null,7],\"6764\":[3],\"6765\":[2],\"6766\":[null,3],\"6767\":[null,19],\"6768\":[null,6],\"6769\":[null,11],\"6770\":[2],\"6771\":[null,10],\"6772\":[3],\"6773\":[2],\"6774\":[null,3],\"6775\":[null,12],\"6776\":[null,7],\"6777\":[2],\"6778\":[null,3],\"6779\":[3],\"6780\":[2],\"6781\":[null,3],\"6782\":[null,20],\"6783\":[null,7],\"6784\":[null,10],\"6785\":[2],\"6786\":[null,12],\"6787\":[3],\"6788\":[2],\"6789\":[null,3],\"6790\":[null,11],\"6791\":[null,6],\"6792\":[null,10],\"6793\":[2],\"6794\":[null,6],\"6795\":[1],\"6796\":[null,9],\"6797\":[null,4],\"6798\":[null,6],\"6799\":[null,9],\"6800\":[4],\"6801\":[null,12],\"6802\":[null,8],\"6803\":[null,19],\"6804\":[3],\"6805\":[null,5],\"6806\":[null,6],\"6807\":[null,9],\"6808\":[4],\"6809\":[null,17],\"6810\":[null,3],\"6811\":[null,18],\"6812\":[null,7],\"6813\":[null,11],\"6814\":[3],\"6815\":[null,5],\"6816\":[null,6],\"6817\":[null,13],\"6818\":[null,14],\"6819\":[null,9],\"6820\":[null,9],\"6821\":[null,6],\"6822\":[null,4],\"6823\":[null,16],\"6824\":[null,5],\"6825\":[null,3],\"6826\":[null,2],\"6827\":[1],\"6828\":[2],\"6829\":[null,11],\"6830\":[null,4],\"6831\":[null,10],\"6832\":[null,11],\"6833\":[null,11],\"6834\":[null,14],\"6835\":[null,5],\"6836\":[3],\"6837\":[null,12],\"6838\":[null,5],\"6839\":[null,12],\"6840\":[null,9],\"6841\":[null,9],\"6842\":[null,11],\"6843\":[null,9],\"6844\":[null,7],\"6845\":[null,4],\"6846\":[null,12],\"6847\":[null,10],\"6848\":[1],\"6849\":[1],\"6850\":[3],\"6851\":[2],\"6852\":[null,10],\"6853\":[2],\"6854\":[null,8],\"6855\":[null,3],\"6856\":[null,24],\"6857\":[null,2],\"6858\":[null,8],\"6859\":[null,8],\"6860\":[null,8],\"6861\":[null,3],\"6862\":[null,4],\"6863\":[null,4],\"6864\":[null,4],\"6865\":[null,4],\"6866\":[null,2],\"6867\":[null,7],\"6868\":[null,5],\"6869\":[2],\"6870\":[null,13],\"6871\":[2],\"6872\":[null,2],\"6873\":[null,3],\"6874\":[null,5],\"6875\":[2],\"6876\":[null,6],\"6877\":[null,10],\"6878\":[2],\"6879\":[null,3],\"6880\":[null,10],\"6881\":[null,4],\"6882\":[2],\"6883\":[null,4],\"6884\":[null,5],\"6885\":[null,3],\"6886\":[null,2],\"6887\":[null,2],\"6888\":[null,4],\"6889\":[null,2],\"6890\":[2],\"6891\":[null,5],\"6892\":[5],\"6893\":[null,8],\"6894\":[1],\"6895\":[1],\"6896\":[null,3],\"6897\":[null,2],\"6898\":[null,2],\"6899\":[null,5],\"6900\":[null,6],\"6901\":[null,3],\"6902\":[null,19],\"6903\":[null,13],\"6904\":[1],\"6905\":[2],\"6906\":[null,1],\"6907\":[null,3],\"6908\":[null,3],\"6909\":[null,5],\"6910\":[null,1],\"6911\":[null,3],\"6912\":[null,4],\"6913\":[null,8],\"6914\":[null,77],\"6915\":[2],\"6916\":[null,1],\"6917\":[null,10],\"6918\":[null,6],\"6919\":[null,1],\"6920\":[null,10],\"6921\":[null,2],\"6922\":[null,2],\"6923\":[null,69],\"6924\":[null,13],\"6925\":[null,2],\"6926\":[null,3],\"6927\":[null,6],\"6928\":[null,4],\"6929\":[null,4],\"6930\":[null,1],\"6931\":[null,13],\"6932\":[null,2],\"6933\":[null,19],\"6934\":[null,2],\"6935\":[null,4],\"6936\":[null,1],\"6937\":[null,11],\"6938\":[null,2],\"6939\":[null,2],\"6940\":[null,5],\"6941\":[null,5],\"6942\":[null,7],\"6943\":[null,6],\"6944\":[null,2],\"6945\":[null,5],\"6946\":[null,28],\"6947\":[1],\"6948\":[1],\"6949\":[null,29],\"6950\":[1],\"6951\":[null,2],\"6952\":[null,1],\"6953\":[null,10],\"6954\":[null,4],\"6955\":[null,32],\"6956\":[2],\"6957\":[2],\"6958\":[null,5],\"6959\":[2],\"6960\":[null,10],\"6961\":[null,1],\"6962\":[null,5],\"6963\":[null,1],\"6964\":[2],\"6965\":[null,8],\"6966\":[null,1],\"6967\":[null,5],\"6968\":[null,1],\"6969\":[null,10],\"6970\":[3],\"6971\":[null,6],\"6972\":[null,11],\"6973\":[null,3],\"6974\":[2],\"6975\":[4],\"6976\":[null,5],\"6977\":[null,9],\"6978\":[null,8],\"6979\":[null,11],\"6980\":[null,5],\"6981\":[3],\"6982\":[null,3],\"6983\":[null,12],\"6984\":[null,4],\"6985\":[null,2],\"6986\":[2],\"6987\":[null,2],\"6988\":[2],\"6989\":[null,52],\"6990\":[2],\"6991\":[null,3],\"6992\":[null,9],\"6993\":[null,7],\"6994\":[null,11],\"6995\":[1],\"6996\":[null,6],\"6997\":[null,11],\"6998\":[4],\"6999\":[null,5],\"7000\":[null,9],\"7001\":[null,8],\"7002\":[null,11],\"7003\":[null,5],\"7004\":[3],\"7005\":[null,3],\"7006\":[null,12],\"7007\":[1],\"7008\":[3],\"7009\":[null,1],\"7010\":[null,15],\"7011\":[null,2],\"7012\":[null,2],\"7013\":[null,2],\"7014\":[null,3],\"7015\":[null,3],\"7016\":[null,1],\"7017\":[null,1],\"7018\":[2],\"7019\":[null,2],\"7020\":[3],\"7021\":[null,1],\"7022\":[1],\"7023\":[1],\"7024\":[1],\"7025\":[1],\"7026\":[null,23],\"7027\":[null,5],\"7028\":[null,22],\"7029\":[null,3],\"7030\":[null,4],\"7031\":[null,2],\"7032\":[3],\"7033\":[null,13],\"7034\":[null,13],\"7035\":[null,18],\"7036\":[null,15],\"7037\":[null,7],\"7038\":[null,32],\"7039\":[null,16],\"7040\":[null,21],\"7041\":[null,16],\"7042\":[null,15],\"7043\":[null,5],\"7044\":[3],\"7045\":[null,29],\"7046\":[null,19],\"7047\":[null,9],\"7048\":[null,11],\"7049\":[null,14],\"7050\":[null,20],\"7051\":[null,13],\"7052\":[null,8],\"7053\":[null,9],\"7054\":[null,12],\"7055\":[null,12],\"7056\":[1],\"7057\":[3],\"7058\":[null,7],\"7059\":[null,3],\"7060\":[6],\"7061\":[null,7],\"7062\":[null,23],\"7063\":[null,21],\"7064\":[null,17],\"7065\":[7],\"7066\":[null,16],\"7067\":[null,13],\"7068\":[null,12],\"7069\":[null,14],\"7070\":[7],\"7071\":[null,30],\"7072\":[null,19],\"7073\":[null,28],\"7074\":[1],\"7075\":[5],\"7076\":[null,7],\"7077\":[null,9],\"7078\":[null,24],\"7079\":[null,12],\"7080\":[1],\"7081\":[null,8],\"7082\":[null,3],\"7083\":[null,7],\"7084\":[null,8],\"7085\":[null,2],\"7086\":[null,4],\"7087\":[null,5],\"7088\":[null,6],\"7089\":[null,5],\"7090\":[null,6],\"7091\":[null,7],\"7092\":[2],\"7093\":[null,17],\"7094\":[null,20],\"7095\":[null,15],\"7096\":[null,13],\"7097\":[null,10],\"7098\":[null,14],\"7099\":[null,8],\"7100\":[null,7],\"7101\":[1],\"7102\":[2],\"7103\":[2],\"7104\":[5],\"7105\":[null,2],\"7106\":[null,2],\"7107\":[null,2],\"7108\":[null,2],\"7109\":[null,2],\"7110\":[null,6],\"7111\":[4],\"7112\":[null,6],\"7113\":[null,4],\"7114\":[null,8],\"7115\":[null,5],\"7116\":[null,5],\"7117\":[null,5],\"7118\":[null,2],\"7119\":[null,7],\"7120\":[null,5],\"7121\":[null,3],\"7122\":[null,5],\"7123\":[null,9],\"7124\":[null,5],\"7125\":[null,5],\"7126\":[null,2],\"7127\":[null,6],\"7128\":[null,2],\"7129\":[null,2],\"7130\":[null,4],\"7131\":[null,6],\"7132\":[null,4],\"7133\":[2],\"7134\":[3],\"7135\":[null,7],\"7136\":[null,5],\"7137\":[null,4],\"7138\":[null,5],\"7139\":[null,10],\"7140\":[null,2],\"7141\":[null,4],\"7142\":[null,4],\"7143\":[null,8],\"7144\":[null,6],\"7145\":[null,2],\"7146\":[null,9],\"7147\":[null,5],\"7148\":[2],\"7149\":[5],\"7150\":[null,5],\"7151\":[null,2],\"7152\":[null,2],\"7153\":[null,2],\"7154\":[null,5],\"7155\":[null,2],\"7156\":[null,3],\"7157\":[null,4],\"7158\":[null,7],\"7159\":[null,3],\"7160\":[null,2],\"7161\":[null,3],\"7162\":[null,3],\"7163\":[null,2],\"7164\":[null,2],\"7165\":[null,3],\"7166\":[null,2],\"7167\":[null,2],\"7168\":[null,2],\"7169\":[null,3],\"7170\":[null,2],\"7171\":[1],\"7172\":[2],\"7173\":[null,15],\"7174\":[null,16],\"7175\":[null,7],\"7176\":[null,2],\"7177\":[null,7],\"7178\":[null,8],\"7179\":[null,4],\"7180\":[null,2],\"7181\":[null,9],\"7182\":[null,5],\"7183\":[null,2],\"7184\":[null,2],\"7185\":[null,4],\"7186\":[2],\"7187\":[3],\"7188\":[null,8],\"7189\":[null,2],\"7190\":[null,8],\"7191\":[3],\"7192\":[null,2],\"7193\":[null,14],\"7194\":[null,11],\"7195\":[null,2],\"7196\":[null,10],\"7197\":[3],\"7198\":[null,2],\"7199\":[null,2],\"7200\":[null,2],\"7201\":[3],\"7202\":[null,2],\"7203\":[null,2],\"7204\":[null,2],\"7205\":[2],\"7206\":[null,4],\"7207\":[null,7],\"7208\":[null,7],\"7209\":[null,7],\"7210\":[null,9],\"7211\":[null,2],\"7212\":[null,11],\"7213\":[null,11],\"7214\":[null,2],\"7215\":[null,2],\"7216\":[2],\"7217\":[null,2],\"7218\":[null,4],\"7219\":[null,3],\"7220\":[null,2],\"7221\":[null,5],\"7222\":[null,2],\"7223\":[null,2],\"7224\":[null,3],\"7225\":[null,2],\"7226\":[null,2],\"7227\":[2],\"7228\":[null,2],\"7229\":[null,14],\"7230\":[null,15],\"7231\":[null,2],\"7232\":[null,4],\"7233\":[2],\"7234\":[null,2],\"7235\":[null,10],\"7236\":[null,4],\"7237\":[null,2],\"7238\":[null,4],\"7239\":[null,8],\"7240\":[null,4],\"7241\":[null,3],\"7242\":[null,4],\"7243\":[null,5],\"7244\":[null,5],\"7245\":[null,2],\"7246\":[null,6],\"7247\":[null,2],\"7248\":[null,2],\"7249\":[null,3],\"7250\":[null,5],\"7251\":[null,4],\"7252\":[null,2],\"7253\":[null,4],\"7254\":[null,8],\"7255\":[null,2],\"7256\":[null,2],\"7257\":[null,1],\"7258\":[null,2],\"7259\":[null,1],\"7260\":[null,3],\"7261\":[null,7],\"7262\":[null,3],\"7263\":[null,3],\"7264\":[null,6],\"7265\":[null,7],\"7266\":[null,5],\"7267\":[2],\"7268\":[null,2],\"7269\":[null,4],\"7270\":[null,2],\"7271\":[null,3],\"7272\":[null,2],\"7273\":[null,11],\"7274\":[null,9],\"7275\":[null,2],\"7276\":[null,3],\"7277\":[null,2],\"7278\":[null,2],\"7279\":[null,2],\"7280\":[2],\"7281\":[null,2],\"7282\":[null,2],\"7283\":[null,5],\"7284\":[null,5],\"7285\":[null,7],\"7286\":[null,11],\"7287\":[2],\"7288\":[null,24],\"7289\":[3],\"7290\":[3],\"7291\":[2],\"7292\":[1],\"7293\":[2],\"7294\":[2],\"7295\":[2],\"7296\":[1],\"7297\":[2],\"7298\":[3],\"7299\":[1],\"7300\":[2],\"7301\":[1],\"7302\":[3],\"7303\":[1],\"7304\":[1],\"7305\":[1],\"7306\":[1],\"7307\":[1],\"7308\":[4],\"7309\":[1],\"7310\":[1],\"7311\":[2],\"7312\":[1],\"7313\":[1],\"7314\":[1]},\"averageFieldLength\":[1.9962542817745073,7.242827289622068],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"t\":\"花有重开日，人无再少年\"},\"2\":{\"h\":\"Slide page\"},\"3\":{\"h\":\"主要功能与配置演示\"},\"4\":{\"h\":\"目录\",\"a\":\"目录\"},\"5\":{\"t\":\"Markdown 展示\"},\"6\":{\"t\":\"页面展示\"},\"7\":{\"t\":\"禁用展示\"},\"8\":{\"t\":\"加密展示\"},\"9\":{\"h\":\"布局与功能禁用\"},\"10\":{\"t\":\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\"},\"11\":{\"t\":\"本页面就是一个示例，禁用了如下功能:\"},\"12\":{\"t\":\"导航栏\"},\"13\":{\"t\":\"侧边栏\"},\"14\":{\"t\":\"路径导航\"},\"15\":{\"t\":\"页面信息\"},\"16\":{\"t\":\"贡献者\"},\"17\":{\"t\":\"编辑此页链接\"},\"18\":{\"t\":\"更新时间\"},\"19\":{\"t\":\"上一篇/下一篇 链接\"},\"20\":{\"t\":\"评论\"},\"21\":{\"t\":\"页脚\"},\"22\":{\"t\":\"返回顶部按钮\"},\"23\":{\"h\":\"密码加密的文章\"},\"24\":{\"t\":\"实际的文章内容。\"},\"25\":{\"t\":\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\"},\"26\":{\"t\":\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"},\"27\":{\"h\":\"Markdown 展示\"},\"28\":{\"t\":\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\"},\"29\":{\"t\":\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"},\"30\":{\"h\":\"Markdown 介绍\",\"a\":\"markdown-介绍\"},\"31\":{\"t\":\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"},\"32\":{\"h\":\"Markdown 配置\",\"a\":\"markdown-配置\"},\"33\":{\"t\":\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\"},\"34\":{\"t\":\"相关信息\"},\"35\":{\"t\":\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"},\"36\":{\"h\":\"Markdown 扩展\",\"a\":\"markdown-扩展\"},\"37\":{\"t\":\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"},\"38\":{\"h\":\"VuePress 扩展\",\"a\":\"vuepress-扩展\"},\"39\":{\"t\":\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\"},\"40\":{\"t\":\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"},\"41\":{\"h\":\"主题扩展\",\"a\":\"主题扩展\"},\"42\":{\"t\":\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"},\"43\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"44\":{\"t\":\"安全的在 Markdown 中使用 {{ variable }}。\"},\"45\":{\"t\":\"自定义标题\"},\"46\":{\"t\":\"信息容器，包含 代码 与 链接。\"},\"47\":{\"t\":\"const a = 1; \"},\"48\":{\"t\":\"自定义标题\"},\"49\":{\"t\":\"提示容器\"},\"50\":{\"t\":\"自定义标题\"},\"51\":{\"t\":\"警告容器\"},\"52\":{\"t\":\"自定义标题\"},\"53\":{\"t\":\"危险容器\"},\"54\":{\"t\":\"自定义标题\"},\"55\":{\"t\":\"详情容器\"},\"56\":{\"t\":\"查看详情\"},\"57\":{\"h\":\"代码块\",\"a\":\"代码块\"},\"58\":{\"t\":\"查看详情\"},\"59\":{\"h\":\"上下角标\",\"a\":\"上下角标\"},\"60\":{\"t\":\"19th H2O\"},\"61\":{\"t\":\"查看详情\"},\"62\":{\"h\":\"自定义对齐\",\"a\":\"自定义对齐\"},\"63\":{\"t\":\"我是居中的\"},\"64\":{\"t\":\"我在右对齐\"},\"65\":{\"t\":\"查看详情\"},\"66\":{\"h\":\"Attrs\",\"a\":\"attrs\"},\"67\":{\"t\":\"一个拥有 ID 的 单词。\"},\"68\":{\"t\":\"查看详情\"},\"69\":{\"h\":\"脚注\",\"a\":\"脚注\"},\"70\":{\"t\":\"此文字有脚注[1].\"},\"71\":{\"t\":\"查看详情\"},\"72\":{\"h\":\"标记\",\"a\":\"标记\"},\"73\":{\"t\":\"你可以标记 重要的内容 。\"},\"74\":{\"t\":\"查看详情\"},\"75\":{\"h\":\"任务列表\",\"a\":\"任务列表\"},\"76\":{\"t\":\" 计划 1\"},\"77\":{\"t\":\" 计划 2\"},\"78\":{\"t\":\"查看详情\"},\"79\":{\"h\":\"图片增强\",\"a\":\"图片增强\"},\"80\":{\"t\":\"支持为图片设置颜色模式和大小\"},\"81\":{\"t\":\"查看详情\"},\"82\":{\"h\":\"卡片\",\"a\":\"卡片\"},\"83\":{\"t\":\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mrhope.site/logo.svg link: https://mrhope.site color: rgba(253, 230, 138, 0.15) \"},\"84\":{\"t\":\"查看详情\"},\"85\":{\"h\":\"图表\",\"a\":\"图表\"},\"86\":{\"t\":\"查看详情\"},\"87\":{\"h\":\"Echarts\",\"a\":\"echarts\"},\"88\":{\"t\":\"查看详情\"},\"89\":{\"h\":\"流程图\",\"a\":\"流程图\"},\"90\":{\"t\":\"查看详情\"},\"91\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"92\":{\"t\":\"查看详情\"},\"93\":{\"h\":\"Tex 语法\",\"a\":\"tex-语法\"},\"94\":{\"t\":\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\"},\"95\":{\"t\":\"查看详情\"},\"96\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"97\":{\"t\":\"Markdown 展示\"},\"98\":{\"t\":\"页面展示\"},\"99\":{\"t\":\"禁用展示\"},\"100\":{\"t\":\"加密展示\"},\"101\":{\"t\":\"查看详情\"},\"102\":{\"h\":\"代码演示\",\"a\":\"代码演示\"},\"103\":{\"t\":\"查看详情\"},\"104\":{\"h\":\"样式化\",\"a\":\"样式化\"},\"105\":{\"t\":\"向 Mr.Hope 捐赠一杯咖啡。 \"},\"106\":{\"t\":\"查看详情\"},\"107\":{\"h\":\"交互演示\",\"a\":\"交互演示\"},\"108\":{\"t\":\"查看详情\"},\"109\":{\"h\":\"Vue 交互演示\",\"a\":\"vue-交互演示\"},\"110\":{\"t\":\"查看详情\"},\"111\":{\"h\":\"幻灯片\",\"a\":\"幻灯片\"},\"112\":{\"t\":\"查看详情\"},\"113\":{\"t\":\"这是脚注内容 ↩︎\"},\"114\":{\"h\":\"页面配置\"},\"115\":{\"t\":\"more 注释之前的内容被视为文章摘要。\"},\"116\":{\"h\":\"页面信息\",\"a\":\"页面信息\"},\"117\":{\"t\":\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\"},\"118\":{\"t\":\"作者设置为 Ms.Hope。\"},\"119\":{\"t\":\"写作日期为 2020 年 1 月 1 日\"},\"120\":{\"t\":\"分类为 “使用指南”\"},\"121\":{\"t\":\"标签为 “页面配置” 和 “使用指南”\"},\"122\":{\"h\":\"页面内容\",\"a\":\"页面内容\"},\"123\":{\"t\":\"你可以自由在这里书写你的 Markdown。\"},\"124\":{\"t\":\"提示\"},\"125\":{\"t\":\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\"},\"126\":{\"t\":\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"},\"127\":{\"t\":\"主题包含了一个自定义徽章可以使用:\"},\"128\":{\"t\":\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"},\"129\":{\"h\":\"页面结构\",\"a\":\"页面结构\"},\"130\":{\"t\":\"此页面应当包含:\"},\"131\":{\"t\":\"路径导航\"},\"132\":{\"t\":\"标题和页面信息\"},\"133\":{\"t\":\"TOC (文章标题列表)\"},\"134\":{\"t\":\"贡献者、更新时间等页面元信息\"},\"135\":{\"t\":\"评论\"},\"136\":{\"t\":\"导航栏\"},\"137\":{\"t\":\"侧边栏\"},\"138\":{\"t\":\"页脚\"},\"139\":{\"t\":\"返回顶部按钮\"},\"140\":{\"t\":\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"},\"141\":{\"h\":\"指南\"},\"142\":{\"h\":\"功能亮点\",\"a\":\"功能亮点\"},\"143\":{\"h\":\"Bar\",\"a\":\"bar\"},\"144\":{\"t\":\"baz\"},\"145\":{\"t\":\"...\"},\"146\":{\"h\":\"Foo\",\"a\":\"foo\"},\"147\":{\"t\":\"ray\"},\"148\":{\"t\":\"...\"},\"149\":{\"h\":\"写在前面\"},\"150\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"151\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"152\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"153\":{\"h\":\"项目主页\"},\"154\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"155\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"156\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"157\":{\"h\":\"幻灯片页\"},\"158\":{\"h\":\"Bar 功能\"},\"159\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"160\":{\"t\":\"我们支持 bar 功能，...\"},\"161\":{\"h\":\"详情\",\"a\":\"详情\"},\"162\":{\"t\":\"baz\"},\"163\":{\"t\":\"...\"},\"164\":{\"h\":\"Baz\"},\"165\":{\"t\":\"功能详情...\"},\"166\":{\"h\":\"Foo 功能\"},\"167\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"168\":{\"t\":\"我们支持 foo 功能，...\"},\"169\":{\"h\":\"详情\",\"a\":\"详情\"},\"170\":{\"t\":\"ray\"},\"171\":{\"t\":\"...\"},\"172\":{\"h\":\"Ray\"},\"173\":{\"t\":\"功能详情...\"},\"174\":{\"h\":\"JVM\"},\"175\":{\"h\":\"1.基本概念\",\"a\":\"_1-基本概念\"},\"176\":{\"h\":\"1.1说一下 Jvm 的主要组成部分？及其作用？\",\"a\":\"_1-1说一下-jvm-的主要组成部分-及其作用\"},\"177\":{\"t\":\"类加载器（ClassLoader）\"},\"178\":{\"t\":\"运行时数据区（Runtime Data Area）\"},\"179\":{\"t\":\"执行引擎（Execution Engine）\"},\"180\":{\"t\":\"本地库接口（Native Interface）\"},\"181\":{\"t\":\"首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\"},\"182\":{\"h\":\"2.内存结构（运行时数据区）\",\"a\":\"_2-内存结构-运行时数据区\"},\"183\":{\"t\":\"JVM整体架构：\"},\"184\":{\"t\":\"JVM\"},\"185\":{\"t\":\"Java 虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程一一对应的数据区域会随着线程开始和结束而创建和销毁。\"},\"186\":{\"t\":\"线程私有：程序计数器、虚拟机栈、本地方法区\"},\"187\":{\"t\":\"线程共享：堆、方法区, 堆外内存（Java7的永久代或JDK8的元空间、代码缓存）\"},\"188\":{\"h\":\"2.1程序计数器\",\"a\":\"_2-1程序计数器\"},\"189\":{\"t\":\"PC 寄存器用来存储指向下一条指令的地址，即将要执行的指令代码。由执行引擎读取下一条指令。\"},\"190\":{\"t\":\"通过下面两个问题，理解下PC计数器\"},\"191\":{\"t\":\"使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？\"},\"192\":{\"t\":\"因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。\"},\"193\":{\"t\":\"PC寄存器为什么会被设定为线程私有的？\"},\"194\":{\"t\":\"多线程在一个特定的时间段内只会执行其中某一个线程方法，CPU会不停的做任务切换，这样必然会导致经常中断或恢复。为了能够准确的记录各个线程正在执行的当前字节码指令地址，所以为每个线程都分配了一个PC寄存器，每个线程都独立计算，不会互相影响。\"},\"195\":{\"t\":\"相关总结如下：\"},\"196\":{\"t\":\"它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域\"},\"197\":{\"t\":\"在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期一致\"},\"198\":{\"t\":\"任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。如果当前线程正在执行的是 Java 方法，程序计数器记录的是 JVM 字节码指令地址，如果是执行 native 方法，则是未指定值（undefined）\"},\"199\":{\"t\":\"它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成\"},\"200\":{\"t\":\"字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令\"},\"201\":{\"t\":\"它是唯一一个在 JVM 规范中没有规定任何 OutOfMemoryError 情况的区域\"},\"202\":{\"h\":\"2.2虚拟机栈\",\"a\":\"_2-2虚拟机栈\"},\"203\":{\"t\":\"主管 Java 程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。\"},\"204\":{\"t\":\"JVM 直接对虚拟机栈的操作只有两个：每个方法执行，伴随着入栈（进栈/压栈），方法执行结束出栈\"},\"205\":{\"t\":\"栈不存在垃圾回收问题\"},\"206\":{\"t\":\"栈中可能出现的异常：\"},\"207\":{\"t\":\"如果采用固定大小的 Java 虚拟机栈，那每个线程的 Java 虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过 Java 虚拟机栈允许的最大容量，Java 虚拟机将会抛出一个 StackOverflowError 异常\"},\"208\":{\"t\":\"如果 Java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚拟机将会抛出一个OutOfMemoryError异常\"},\"209\":{\"t\":\"可以通过参数-Xss来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。\"},\"210\":{\"t\":\"每个栈帧（Stack Frame）中存储着：\"},\"211\":{\"t\":\"局部变量表（Local Variables）\"},\"212\":{\"t\":\"操作数栈（Operand Stack）(或称为表达式栈)\"},\"213\":{\"t\":\"动态链接（Dynamic Linking）：指向运行时常量池的方法引用\"},\"214\":{\"t\":\"方法返回地址（Return Address）：方法正常退出或异常退出的地址\"},\"215\":{\"t\":\"一些附加信息\"},\"216\":{\"t\":\"栈帧\"},\"217\":{\"h\":\"2.3本地方法栈\",\"a\":\"_2-3本地方法栈\"},\"218\":{\"t\":\"本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区，它甚至可以直接使用本地处理器中的寄存器，直接从本地内存的堆中分配任意数量的内存。\"},\"219\":{\"t\":\"Java 虚拟机栈用于管理 Java 方法的调用，而本地方法栈用于管理本地方法的调用\"},\"220\":{\"t\":\"本地方法栈也是线程私有的\"},\"221\":{\"h\":\"2.4堆内存\",\"a\":\"_2-4堆内存\"},\"222\":{\"t\":\"对于大多数应用，Java 堆是 Java 虚拟机管理的内存中最大的一块，被所有线程共享。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数据都在这里分配内存。\"},\"223\":{\"t\":\"为了进行高效的垃圾回收，虚拟机把堆内存逻辑上划分成三块区域（分代的唯一理由就是优化 GC 性能）：\"},\"224\":{\"t\":\"新生带（年轻代）：新对象和没达到一定年龄的对象都在新生代\"},\"225\":{\"t\":\"老年代（养老区）：被长时间使用的对象，老年代的内存空间应该要比年轻代更大\"},\"226\":{\"t\":\"元空间（JDK1.8 之前叫永久代）：像一些方法中的操作临时对象等，JDK1.8 之前是占用 JVM 内存，JDK1.8 之后直接使用物理内存\"},\"227\":{\"t\":\"堆内存\"},\"228\":{\"t\":\"Java 虚拟机规范规定，Java 堆可以是处于物理上不连续的内存空间中，只要逻辑上是连续的即可，像磁盘空间一样。实现时，既可以是固定大小，也可以是可扩展的，主流虚拟机都是可扩展的（通过 -Xmx 和 -Xms 控制），如果堆中没有完成实例分配，并且堆无法再扩展时，就会抛出 OutOfMemoryError 异常。\"},\"229\":{\"h\":\"2.4.1年轻代 (Young Generation)\",\"a\":\"_2-4-1年轻代-young-generation\"},\"230\":{\"t\":\"年轻代是所有新对象创建的地方。当填充年轻代时，执行垃圾收集。这种垃圾收集称为 Minor GC。年轻一代被分为三个部分——伊甸园（Eden Memory）和两个幸存区（Survivor Memory，被称为from/to或s0/s1），默认比例是8:1:1\"},\"231\":{\"t\":\"大多数新创建的对象都位于 Eden 内存空间中\"},\"232\":{\"t\":\"当 Eden 空间被对象填充时，执行Minor GC，并将所有幸存者对象移动到一个幸存者空间中\"},\"233\":{\"t\":\"Minor GC 检查幸存者对象，并将它们移动到另一个幸存者空间。所以每次，一个幸存者空间总是空的\"},\"234\":{\"t\":\"经过多次 GC 循环后存活下来的对象被移动到老年代。通常，这是通过设置年轻一代对象的年龄阈值来实现的，然后他们才有资格提升到老一代\"},\"235\":{\"h\":\"2.4.2老年代(Old Generation)\",\"a\":\"_2-4-2老年代-old-generation\"},\"236\":{\"t\":\"旧的一代内存包含那些经过许多轮小型 GC 后仍然存活的对象。通常，垃圾收集是在老年代内存满时执行的。老年代垃圾收集称为 主GC（Major GC），通常需要更长的时间。\"},\"237\":{\"t\":\"大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在 Eden 区和两个Survivor 区之间发生大量的内存拷贝。\"},\"238\":{\"h\":\"2.4.3元空间\",\"a\":\"_2-4-3元空间\"},\"239\":{\"t\":\"不管是 JDK8 之前的永久代，还是 JDK8 及以后的元空间，都可以看作是 Java 虚拟机规范中方法区的实现。\"},\"240\":{\"t\":\"虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫 Non-Heap（非堆），目的应该是与 Java 堆区分开。\"},\"241\":{\"h\":\"2.4.4设置堆内存大小和 OOM\",\"a\":\"_2-4-4设置堆内存大小和-oom\"},\"242\":{\"t\":\"Java 堆用于存储 Java 对象实例，那么堆的大小在 JVM 启动的时候就确定了，我们可以通过 -Xmx 和 -Xms 来设定\"},\"243\":{\"t\":\"-Xms 用来表示堆的起始内存，等价于 -XX:InitialHeapSize\"},\"244\":{\"t\":\"-Xmx 用来表示堆的最大内存，等价于 -XX:MaxHeapSize\"},\"245\":{\"t\":\"如果堆的内存大小超过 -Xmx 设定的最大内存， 就会抛出 OutOfMemoryError 异常。\"},\"246\":{\"t\":\"我们通常会将 -Xmx 和 -Xms 两个参数配置为相同的值，其目的是为了能够在垃圾回收机制清理完堆区后不再需要重新分隔计算堆的大小，从而提高性能\"},\"247\":{\"t\":\"默认情况下，初始堆内存大小为：电脑内存大小/64\"},\"248\":{\"t\":\"默认情况下，最大堆内存大小为：电脑内存大小/4\"},\"249\":{\"t\":\"可以通过代码获取到我们的设置值，当然也可以模拟 OOM：\"},\"250\":{\"t\":\"public static void main(String[] args) { //返回 JVM 堆大小 long initalMemory = Runtime.getRuntime().totalMemory() / 1024 /1024; //返回 JVM 堆的最大内存 long maxMemory = Runtime.getRuntime().maxMemory() / 1024 /1024; System.out.println(\\\"-Xms : \\\"+initalMemory + \\\"M\\\"); System.out.println(\\\"-Xmx : \\\"+maxMemory + \\\"M\\\"); System.out.println(\\\"系统内存大小：\\\" + initalMemory * 64 / 1024 + \\\"G\\\"); System.out.println(\\\"系统内存大小：\\\" + maxMemory * 4 / 1024 + \\\"G\\\"); } \"},\"251\":{\"h\":\"2.4.5对象在堆中的生命周期\",\"a\":\"_2-4-5对象在堆中的生命周期\"},\"252\":{\"t\":\"在 JVM 内存模型的堆中，堆被划分为新生代和老年代\"},\"253\":{\"t\":\"新生代又被进一步划分为 Eden区 和 Survivor区，Survivor 区由 From Survivor 和 To Survivor 组成\"},\"254\":{\"t\":\"当创建一个对象时，对象会被优先分配到新生代的 Eden 区\"},\"255\":{\"t\":\"此时 JVM 会给对象定义一个对象年轻计数器（-XX:MaxTenuringThreshold）\"},\"256\":{\"t\":\"当 Eden 空间不足时，JVM 将执行新生代的垃圾回收（Minor GC）\"},\"257\":{\"t\":\"JVM 会把存活的对象转移到 Survivor 中，并且对象年龄 +1\"},\"258\":{\"t\":\"对象在 Survivor 中同样也会经历 Minor GC，每经历一次 Minor GC，对象年龄都会+1\"},\"259\":{\"t\":\"如果分配的对象超过了-XX:PetenureSizeThreshold，对象会直接被分配到老年代。\"},\"260\":{\"h\":\"2.4.6对象的分配过程\",\"a\":\"_2-4-6对象的分配过程\"},\"261\":{\"t\":\"为对象分配内存是一件非常严谨和复杂的任务，JVM 的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法和内存回收算法密切相关，所以还需要考虑 GC 执行完内存回收后是否会在内存空间中产生内存碎片。\"},\"262\":{\"t\":\"new 的对象先放在伊甸园区，此区有大小限制\"},\"263\":{\"t\":\"当伊甸园的空间填满时，程序又需要创建对象，JVM 的垃圾回收器将对伊甸园区进行垃圾回收（Minor GC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区\"},\"264\":{\"t\":\"然后将伊甸园中的剩余对象移动到幸存者 0 区\"},\"265\":{\"t\":\"如果再次触发垃圾回收，此时上次幸存下来的放到幸存者 0 区，如果没有回收，就会放到幸存者 1 区\"},\"266\":{\"t\":\"如果再次经历垃圾回收，此时会重新放回幸存者 0 区，接着再去幸存者 1 区\"},\"267\":{\"t\":\"什么时候才会去养老区呢？ 默认是 15 次回收标记\"},\"268\":{\"t\":\"在养老区，相对悠闲。当养老区内存不足时，再次触发 Major GC，进行养老区的内存清理\"},\"269\":{\"t\":\"若养老区执行了 Major GC 之后发现依然无法进行对象的保存，就会产生 OOM 异常\"},\"270\":{\"h\":\"2.4.7什么是 TLAB?为什么要有 TLAB ?\",\"a\":\"_2-4-7什么是-tlab-为什么要有-tlab\"},\"271\":{\"t\":\"TLAB(Thread Local Allocation Buffer)是Java虚拟机中的一块线程私有的内存空间,用于为线程快速分配对象而不需要加锁。\"},\"272\":{\"t\":\"从内存模型而不是垃圾回收的角度，对 Eden 区域继续进行划分，JVM 为每个线程分配了一个私有缓存区域，它包含在 Eden 空间内\"},\"273\":{\"t\":\"加速对象内存分配。如果没有TLAB,所有线程都需要竞争同一块内存资源,这会导致频繁加锁从而降低效率。TLAB为每个线程提供了一个私有的内存缓冲区,线程可以直接在自己的TLAB上分配内存,不需要加锁。\"},\"274\":{\"t\":\"减少垃圾回收开销。TLAB中的内存只被对应的线程使用,当线程结束时可以整个回收TLAB空间,比回收整个Java堆中的内存更快更高效。\"},\"275\":{\"t\":\"提高内存分配的局部性。TLAB为每个线程预先分配一块内存,新对象优先分配在TLAB上,使对象内存分配更加接近CPU缓存,提高访问效率。\"},\"276\":{\"h\":\"2.4.8堆是分配对象存储的唯一选择吗\",\"a\":\"_2-4-8堆是分配对象存储的唯一选择吗\"},\"277\":{\"t\":\"随着 JIT 编译期的发展和逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。 ——《深入理解 Java 虚拟机》\"},\"278\":{\"h\":\"2.5方法区\",\"a\":\"_2-5方法区\"},\"279\":{\"t\":\"方法区（Method Area）与 Java 堆一样，是所有线程共享的内存区域。\"},\"280\":{\"t\":\"虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫 Non-Heap（非堆），目的应该是与 Java 堆区分开。\"},\"281\":{\"t\":\"运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本/字段/方法/接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将类在加载后进入方法区的运行时常量池中存放。运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的是 String.intern()方法。受方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。\"},\"282\":{\"t\":\"方法区（method area）只是 JVM 规范中定义的一个概念，用于存储类信息、常量池、静态变量、JIT编译后的代码等数据，并没有规定如何去实现它，不同的厂商有不同的实现。而永久代（PermGen）是 Hotspot虚拟机特有的概念， Java8 的时候又被元空间取代了，永久代和元空间都可以理解为方法区的落地实现。\"},\"283\":{\"t\":\"永久代是堆的一部分，和新生代，老年代地址是连续的（受垃圾回收器管理），而元空间存在于本地内存（我们常说的堆外内存，不受垃圾回收器管理），这样就不受 JVM 限制了，也比较难发生OOM（都会有溢出异常）。\"},\"284\":{\"h\":\"2.5.1运行时常量池\",\"a\":\"_2-5-1运行时常量池\"},\"285\":{\"t\":\"常量池可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。\"},\"286\":{\"t\":\"在加载类和结构到虚拟机后，就会创建对应的运行时常量池\"},\"287\":{\"t\":\"常量池表（Constant Pool Table）是 Class 文件的一部分，用于存储编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中\"},\"288\":{\"t\":\"JVM 为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的\"},\"289\":{\"t\":\"运行时常量池中包含各种不同的常量，包括编译器就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或字段引用。此时不再是常量池中的符号地址了，这里换为真实地址 \"},\"290\":{\"t\":\"运行时常量池，相对于 Class 文件常量池的另一个重要特征是：动态性，Java 语言并不要求常量一定只有编译期间才能产生，运行期间也可以将新的常量放入池中，String 类的 intern() 方法就是这样的\"},\"291\":{\"t\":\"当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则 JVM 会抛出 OutOfMemoryError 异常。\"},\"292\":{\"t\":\"字符串常量池放在堆里，静态变量放在堆里。\"},\"293\":{\"t\":\"下图来自 JavaGuide：https://javaguide.cn/java/jvm/memory-area.html\"},\"294\":{\"h\":\"3.垃圾回收机制\",\"a\":\"_3-垃圾回收机制\"},\"295\":{\"h\":\"3.1如何判断对象是否可回收？\",\"a\":\"_3-1如何判断对象是否可回收\"},\"296\":{\"h\":\"3.1.1引用计数算法\",\"a\":\"_3-1-1引用计数算法\"},\"297\":{\"t\":\"给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。\"},\"298\":{\"t\":\"两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。\"},\"299\":{\"t\":\"正因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。\"},\"300\":{\"h\":\"3.1.2可达性分析算法\",\"a\":\"_3-1-2可达性分析算法\"},\"301\":{\"t\":\"通过 GC Roots 作为起始点进行搜索，能够到达到的对象都是存活的，不可达的对象可被回收。\"},\"302\":{\"t\":\"Java 虚拟机使用该算法来判断对象是否可被回收，在 Java 中 GC Roots 一般包含以下内容：\"},\"303\":{\"t\":\"虚拟机栈中引用的对象\"},\"304\":{\"t\":\"本地方法栈中引用的对象\"},\"305\":{\"t\":\"方法区中类静态属性引用的对象\"},\"306\":{\"t\":\"方法区中的常量引用的对象\"},\"307\":{\"h\":\"3.1.3引用类型\",\"a\":\"_3-1-3引用类型\"},\"308\":{\"t\":\"Java 具有四种强度不同的引用类型。\"},\"309\":{\"t\":\"强引用\"},\"310\":{\"t\":\"被强引用关联的对象不会被回收。\"},\"311\":{\"t\":\"使用 new 一个新对象的方式来创建强引用。\"},\"312\":{\"t\":\"软引用\"},\"313\":{\"t\":\"被软引用关联的对象只有在内存不够的情况下才会被回收。\"},\"314\":{\"t\":\"使用 SoftReference 类来创建软引用。\"},\"315\":{\"t\":\"弱引用\"},\"316\":{\"t\":\"被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。\"},\"317\":{\"t\":\"使用 WeakReference 类来实现弱引用。\"},\"318\":{\"t\":\"虚引用\"},\"319\":{\"t\":\"又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象。\"},\"320\":{\"t\":\"为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知。\"},\"321\":{\"t\":\"使用 PhantomReference 来实现虚引用。\"},\"322\":{\"h\":\"3.2垃圾回收算法\",\"a\":\"_3-2垃圾回收算法\"},\"323\":{\"h\":\"3.2.1标记 - 清除\",\"a\":\"_3-2-1标记-清除\"},\"324\":{\"t\":\"将存活的对象进行标记，然后清理掉未被标记的对象。\"},\"325\":{\"t\":\"不足:\"},\"326\":{\"t\":\"标记和清除过程效率都不高；\"},\"327\":{\"t\":\"会产生大量不连续的内存碎片，导致无法给大对象分配内存。\"},\"328\":{\"h\":\"3.2.2标记 - 整理\",\"a\":\"_3-2-2标记-整理\"},\"329\":{\"t\":\"让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。\"},\"330\":{\"h\":\"3.2.3复制\",\"a\":\"_3-2-3复制\"},\"331\":{\"t\":\"将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。\"},\"332\":{\"t\":\"主要不足是只使用了内存的一半。\"},\"333\":{\"t\":\"现在的商业虚拟机都采用这种收集算法来回收新生代，但是并不是将新生代划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和使用过的那一块 Survivor。\"},\"334\":{\"t\":\"HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。\"},\"335\":{\"h\":\"3.2.4分代收集\",\"a\":\"_3-2-4分代收集\"},\"336\":{\"t\":\"现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。\"},\"337\":{\"t\":\"一般将堆分为新生代和老年代。\"},\"338\":{\"t\":\"新生代使用: 复制算法\"},\"339\":{\"t\":\"老年代使用: 标记 - 清除 或者 标记 - 整理 算法\"},\"340\":{\"h\":\"3.3垃圾收集器\",\"a\":\"_3-3垃圾收集器\"},\"341\":{\"t\":\"以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。\"},\"342\":{\"t\":\"单线程与多线程: 单线程指的是垃圾收集器只使用一个线程进行收集，而多线程使用多个线程；\"},\"343\":{\"t\":\"串行与并行: 串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并形指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。\"},\"344\":{\"h\":\"3.3.1Serial 收集器\",\"a\":\"_3-3-1serial-收集器\"},\"345\":{\"t\":\"Serial 翻译为串行，也就是说它以串行的方式执行。\"},\"346\":{\"t\":\"它是单线程的收集器，只会使用一个线程进行垃圾收集工作。\"},\"347\":{\"t\":\"它的优点是简单高效，对于单个 CPU 环境来说，由于没有线程交互的开销，因此拥有最高的单线程收集效率。\"},\"348\":{\"t\":\"它是 Client 模式下的默认新生代收集器，因为在用户的桌面应用场景下，分配给虚拟机管理的内存一般来说不会很大。Serial 收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。\"},\"349\":{\"h\":\"3.3.2ParNew 收集器\",\"a\":\"_3-3-2parnew-收集器\"},\"350\":{\"t\":\"它是 Serial 收集器的多线程版本。\"},\"351\":{\"t\":\"是 Server 模式下的虚拟机首选新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。\"},\"352\":{\"t\":\"默认开启的线程数量与 CPU 数量相同，可以使用 -XX:ParallelGCThreads 参数来设置线程数。\"},\"353\":{\"h\":\"3.3.3Parallel Scavenge 收集器\",\"a\":\"_3-3-3parallel-scavenge-收集器\"},\"354\":{\"t\":\"与 ParNew 一样是多线程收集器。\"},\"355\":{\"t\":\"其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，它被称为“吞吐量优先”收集器。\"},\"356\":{\"h\":\"3.3.4Serial Old 收集器\",\"a\":\"_3-3-4serial-old-收集器\"},\"357\":{\"t\":\"是 Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。\"},\"358\":{\"h\":\"3.3.5Parallel Old 收集器\",\"a\":\"_3-3-5parallel-old-收集器\"},\"359\":{\"t\":\"是 Parallel Scavenge 收集器的老年代版本。\"},\"360\":{\"h\":\"3.3.6CMS 收集器\",\"a\":\"_3-3-6cms-收集器\"},\"361\":{\"t\":\"CMS(Concurrent Mark Sweep)，Mark Sweep 指的是标记 - 清除算法。\"},\"362\":{\"t\":\"分为以下四个流程:\"},\"363\":{\"t\":\"初始标记: 仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿 (STW, stop the world)。\"},\"364\":{\"t\":\"并发标记: 进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。\"},\"365\":{\"t\":\"重新标记: 为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。\"},\"366\":{\"t\":\"并发清除: 不需要停顿。\"},\"367\":{\"t\":\"在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。\"},\"368\":{\"t\":\"具有以下缺点:\"},\"369\":{\"t\":\"吞吐量低: 低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。\"},\"370\":{\"t\":\"标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。\"},\"371\":{\"h\":\"3.3.7G1 收集器\",\"a\":\"_3-3-7g1-收集器\"},\"372\":{\"t\":\"G1(Garbage-First)，它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。\"},\"373\":{\"t\":\"堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。\"},\"374\":{\"t\":\"G1 把堆划分成多个大小相等的独立区域(Region)，新生代和老年代不再物理隔离。通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间(这两个值是通过过去回收的经验获得)，并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。\"},\"375\":{\"t\":\"G1 收集器的运作大致可划分为以下几个步骤:\"},\"376\":{\"t\":\"初始标记：暂停所有的应用线程,并记录 GC Roots 可达的对象,这些对象被标记为存活对象。\"},\"377\":{\"t\":\"并发标记：GC 线程遍历对象图,找出存活对象并进行标记。\"},\"378\":{\"t\":\"最终标记: 为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。\"},\"379\":{\"t\":\"筛选回收: 首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。\"},\"380\":{\"t\":\"具备如下特点:\"},\"381\":{\"t\":\"空间整合: 整体来看是基于“标记 - 整理”算法实现的收集器，从局部(两个 Region 之间)上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。\"},\"382\":{\"t\":\"可预测的停顿: 能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。\"},\"383\":{\"h\":\"3.4MinorGC和FullGC触发条件\",\"a\":\"_3-4minorgc和fullgc触发条件\"},\"384\":{\"t\":\"MinorGC是发生在新生代的，这里主要使用的是复制算法。\"},\"385\":{\"t\":\"MajorGC/FullGC是发生在老年代的，老年代的主要使用标记清除或者标记整理算法。\"},\"386\":{\"h\":\"3.4.1MinorGC触发条件\",\"a\":\"_3-4-1minorgc触发条件\"},\"387\":{\"t\":\"Eden区域满\"},\"388\":{\"t\":\"新创建的对象大小 > Eden所剩空间\"},\"389\":{\"h\":\"3.4.2FullGC触发条件\",\"a\":\"_3-4-2fullgc触发条件\"},\"390\":{\"t\":\"老年代空间不足\"},\"391\":{\"t\":\"存在情况\"},\"392\":{\"t\":\"每次晋升到老年代的对象平均大小 > 老年代剩余空间\"},\"393\":{\"t\":\"MinorGC后存活的对象超过了老年代剩余空间\"},\"394\":{\"t\":\"优化策略\"},\"395\":{\"t\":\"调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组\"},\"396\":{\"t\":\"永久代(方法区)空间不足\"},\"397\":{\"t\":\"简介\"},\"398\":{\"t\":\"JVM规范中运行时数据区域中的方法区，在HotSpot虚拟机中又被习惯称为永久代，Permanet Generation中存放的为一些class的信息、常量、静态变量等数据，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下也会执行Full GC。\"},\"399\":{\"t\":\"解决方案\"},\"400\":{\"t\":\"避免Perm Gen占满造成FullGC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC\"},\"401\":{\"t\":\"System.gc()\"},\"402\":{\"t\":\"此方法的调用是建议JVM进行Full GC，虽然只是建议而非一定，但很多情况下它会触发Full GC，从而增加Full GC的频率，即增加了间歇性停顿的次数。强烈建议能不使用此方法就别使用。\"},\"403\":{\"t\":\"CMS GC异常\"},\"404\":{\"t\":\"MinorGC时，survivor空间放不下，对象只能放入老年代，而老年代也放不下造成。\"},\"405\":{\"t\":\"堆内存分配很大的对象\"},\"406\":{\"t\":\"所谓大对象，是指需要大量连续内存空间的java对象，例如很长的数组，此种对象会直接进入老年代，而老年代虽然有很大的剩余空间，但是无法找到足够大的连续空间来分配给当前对象，此种情况会触发JVM进行FullGC。\"},\"407\":{\"h\":\"4.类加载机制\",\"a\":\"_4-类加载机制\"},\"408\":{\"h\":\"4.1类的生命周期\",\"a\":\"_4-1类的生命周期\"},\"409\":{\"t\":\"类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，前三个阶段可以统称为连接（Linking）。\"},\"410\":{\"t\":\"这 7 个阶段的顺序如下图所示：\"},\"411\":{\"h\":\"4.2类加载过程\",\"a\":\"_4-2类加载过程\"},\"412\":{\"t\":\"Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？\"},\"413\":{\"t\":\"系统加载 Class 类型的文件主要三步：加载->连接->初始化。连接过程又可分为三步：验证->准备->解析。\"},\"414\":{\"h\":\"4.3类加载器\",\"a\":\"_4-3类加载器\"},\"415\":{\"h\":\"4.3.1介绍：\",\"a\":\"_4-3-1介绍\"},\"416\":{\"t\":\"类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。\"},\"417\":{\"t\":\"每个 Java 类都有一个引用指向加载它的 ClassLoader。\"},\"418\":{\"t\":\"数组类不是通过 ClassLoader 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。\"},\"419\":{\"t\":\"简单来说，类加载器的主要作用就是加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。\"},\"420\":{\"h\":\"4.3.2类加载器加载规则\",\"a\":\"_4-3-2类加载器加载规则\"},\"421\":{\"t\":\"JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。\"},\"422\":{\"t\":\"对于已经加载的类会被放在 ClassLoader 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。\"},\"423\":{\"h\":\"4.3.3类加载器总结\",\"a\":\"_4-3-3类加载器总结\"},\"424\":{\"t\":\"JVM 中内置了三个重要的 ClassLoader：\"},\"425\":{\"t\":\"BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ %JAVA_HOME%/lib目录下的 rt.jar 、resources.jar 、charsets.jar等 jar 包和类）以及被 -Xbootclasspath参数指定的路径下的所有类。\"},\"426\":{\"t\":\"ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类以及被 java.ext.dirs 系统变量所指定的路径下的所有类。\"},\"427\":{\"t\":\"AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。\"},\"428\":{\"t\":\"除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ .class 文件）进行加密，加载时再利用自定义的类加载器对其解密。\"},\"429\":{\"t\":\"如果我们要自定义自己的类加载器，很明显需要继承 ClassLoader抽象类。\"},\"430\":{\"t\":\"ClassLoader 类有两个关键的方法：\"},\"431\":{\"t\":\"protected Class loadClass(String name, boolean resolve)：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resove 如果为 true，在加载时调用 resolveClass(Class<?> c) 方法解析该类。\"},\"432\":{\"t\":\"protected Class findClass(String name)：根据类的二进制名称来查找类，默认实现是空方法。\"},\"433\":{\"t\":\"官方 API 文档中写到：\"},\"434\":{\"t\":\"Subclasses of ClassLoader are encouraged to override findClass(String name), rather than this method.\"},\"435\":{\"t\":\"建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。\"},\"436\":{\"t\":\"如果我们不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 loadClass() 方法。\"},\"437\":{\"h\":\"4.3.4双亲委派模型\",\"a\":\"_4-3-4双亲委派模型\"},\"438\":{\"t\":\"类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载呢？这就需要提到双亲委派模型了。\"},\"439\":{\"t\":\"ClassLoader 类使用委托模型来搜索类和资源。\"},\"440\":{\"t\":\"双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。\"},\"441\":{\"t\":\"ClassLoader 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。\"},\"442\":{\"t\":\"下图展示的各种类加载器之间的层次关系被称为类加载器的“双亲委派模型(Parents Delegation Model)”。\"},\"443\":{\"t\":\"双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在 java.lang.ClassLoader 的 loadClass() 中，相关代码如下所示。\"},\"444\":{\"t\":\"protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { //首先，检查该类是否已经加载过 Class c = findLoadedClass(name); if (c == null) { //如果 c 为 null，则说明该类没有被加载过 long t0 = System.nanoTime(); try { if (parent != null) { //当父类的加载器不为空，则通过父类的loadClass来加载该类 c = parent.loadClass(name, false); } else { //当父类的加载器为空，则调用启动类加载器来加载该类 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { //非空父类的类加载器无法找到相应的类，则抛出异常 } if (c == null) { //当父类加载器无法加载时，则调用findClass方法来加载该类 //用户可通过覆写该方法，来自定义类加载器 long t1 = System.nanoTime(); c = findClass(name); //用于统计类加载器相关的信息 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { //对类进行link操作 resolveClass(c); } return c; } } \"},\"445\":{\"t\":\"每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。\"},\"446\":{\"t\":\"结合上面的源码，简单总结一下双亲委派模型的执行流程：\"},\"447\":{\"t\":\"在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。\"},\"448\":{\"t\":\"类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 BootstrapClassLoader 中。\"},\"449\":{\"t\":\"只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 findClass() 方法来加载类）。\"},\"450\":{\"t\":\"优点：\"},\"451\":{\"t\":\"双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。\"},\"452\":{\"h\":\"一、异常和反射\"},\"453\":{\"h\":\"1.异常\",\"a\":\"_1-异常\"},\"454\":{\"h\":\"1.1Java异常类层次结构?\",\"a\":\"_1-1java异常类层次结构\"},\"455\":{\"t\":\"Throwable是 Java 语言中所有错误与异常的超类。\"},\"456\":{\"t\":\"Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。\"},\"457\":{\"t\":\"Exception 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。\"},\"458\":{\"t\":\"运行时异常\"},\"459\":{\"t\":\"都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。\"},\"460\":{\"t\":\"运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。\"},\"461\":{\"t\":\"非运行时异常 （编译异常）\"},\"462\":{\"t\":\"是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。\"},\"463\":{\"h\":\"1.2可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）区别？\",\"a\":\"_1-2可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions-区别\"},\"464\":{\"t\":\"可查异常（编译器要求必须处置的异常）：\"},\"465\":{\"t\":\"正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。\"},\"466\":{\"t\":\"除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。\"},\"467\":{\"t\":\"不可查异常(编译器不要求强制处置的异常)\"},\"468\":{\"t\":\"包括运行时异常（RuntimeException与其子类）和错误（Error）。\"},\"469\":{\"h\":\"1.3throw和throws的区别？\",\"a\":\"_1-3throw和throws的区别\"},\"470\":{\"t\":\"异常的申明(throws)\"},\"471\":{\"t\":\"在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：\"},\"472\":{\"t\":\"public static void method() throws IOException, FileNotFoundException{ //something statements } \"},\"473\":{\"t\":\"异常的抛出(throw)\"},\"474\":{\"t\":\"如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：\"},\"475\":{\"t\":\"public static double method(int value) { if(value == 0) { throw new ArithmeticException(\\\"参数不能为0\\\"); //抛出一个运行时异常 } return 5.0 / value; } \"},\"476\":{\"h\":\"1.4Java 7 的 try-with-resource?\",\"a\":\"_1-4java-7-的-try-with-resource\"},\"477\":{\"t\":\"如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。\"},\"478\":{\"t\":\"public void automaticallyCloseResource() { File file = new File(\\\"./tmp.txt\\\"); try (FileInputStream inputStream = new FileInputStream(file);) { // use the inputStream to read a file } catch (FileNotFoundException e) { log.error(e); } catch (IOException e) { log.error(e); } } \"},\"479\":{\"t\":\"看下它的背后：\"},\"480\":{\"t\":\"public static transient void main(String args[]) { BufferedReader br; Throwable throwable; br = new BufferedReader(new FileReader(\\\"d:\\\\\\\\ hollischuang.xml\\\")); throwable = null; String line; try { while((line = br.readLine()) != null) System.out.println(line); } catch(Throwable throwable2) { throwable = throwable2; throw throwable2; } if(br != null) if(throwable != null) try { br.close(); } catch(Throwable throwable1) { throwable.addSuppressed(throwable1); } else br.close(); break MISSING_BLOCK_LABEL_113; Exception exception; exception; if(br != null) if(throwable != null) try { br.close(); } catch(Throwable throwable3) { throwable.addSuppressed(throwable3); } else br.close(); throw exception; IOException ioexception; ioexception; } } \"},\"481\":{\"t\":\"其实背后的原理也很简单，那些我们没有做的关闭资源的操作，编译器都帮我们做了。所以，再次印证了，语法糖的作用就是方便程序员的使用，但最终还是要转成编译器认识的语言。\"},\"482\":{\"h\":\"1.5finally和return的执行顺序\",\"a\":\"_1-5finally和return的执行顺序\"},\"483\":{\"t\":\"try() ⾥⾯有⼀个return语句， 那么后⾯的finally{}⾥⾯的code会不会被执⾏， 什么时候执⾏， 是在return前还是return后?\"},\"484\":{\"t\":\"如果try中有return语句， 那么finally中的代码还是会执⾏。因为return表⽰的是要整个⽅法体返回， 所以，finally中的语句会在return之前执⾏。\"},\"485\":{\"t\":\"但是return前执行的finally块内，对数据的修改效果对于引用类型和值类型会不同：\"},\"486\":{\"t\":\"// 测试 修改值类型 static int f() { int ret = 0; try { return ret; // 返回 0，finally内的修改效果不起作用 } finally { ret++; System.out.println(\\\"finally执行\\\"); } } // 测试 修改引用类型 static int[] f2(){ int[] ret = new int[]{0}; try { return ret; // 返回 [1]，finally内的修改效果起了作用 } finally { ret[0]++; System.out.println(\\\"finally执行\\\"); } } \"},\"487\":{\"h\":\"1.6异常的底层？\",\"a\":\"_1-6异常的底层\"},\"488\":{\"t\":\"提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。\"},\"489\":{\"t\":\"public static void simpleTryCatch() { try { testNPE(); } catch (Exception e) { e.printStackTrace(); } } \"},\"490\":{\"t\":\"使用javap来分析这段代码（需要先使用javac编译）：\"},\"491\":{\"t\":\"//javap -c Main public static void simpleTryCatch(); Code: 0: invokestatic #3 // Method testNPE:()V 3: goto 11 6: astore_0 7: aload_0 8: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 11: return Exception table: from to target type 0 3 6 Class java/lang/Exception \"},\"492\":{\"t\":\"看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。\"},\"493\":{\"t\":\"异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下\"},\"494\":{\"t\":\"from 可能发生异常的起始点\"},\"495\":{\"t\":\"to 可能发生异常的结束点\"},\"496\":{\"t\":\"target 上述from和to之前发生异常后的异常处理者的位置\"},\"497\":{\"t\":\"type 异常处理者处理的异常的类信息\"},\"498\":{\"h\":\"2.反射\",\"a\":\"_2-反射\"},\"499\":{\"h\":\"2.1什么是反射机制?\",\"a\":\"_2-1什么是反射机制\"},\"500\":{\"t\":\"JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制。\"},\"501\":{\"t\":\"直接new对象就叫正射。\"},\"502\":{\"t\":\"如下:\"},\"503\":{\"t\":\"Map<String, String> map = new HashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"504\":{\"t\":\"那反射是啥？我先不说反射是啥，概念啥的太虚幻我就不说了，把你绕蒙你这篇文章就白看了，直接举例吧接着看上面的正射，如果哪天你发现用LinkedHashMap效果更好，然后你修改代码：\"},\"505\":{\"t\":\"Map<String, String> map = new LinkedHashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"506\":{\"t\":\"改完了编译运行没有bug然而过了两天你发现用LinkedHashMap会有隐患，还是得改回去用HashMap，成年人的崩溃如此简单，但是聪明的你想到可以加个判断，根据传入的条件来决定用HashMap还LinkedHashMap，于是：\"},\"507\":{\"t\":\"public Map<String, String> getMap(String param) { Map<String, String> map = null; if (param.equals(\\\"HashMap\\\")) { map = new HashMap<>(); } else if (param.equals(\\\"LinkedHashMap\\\")) { map = new LinkedHashMap<>(); } return map; } \"},\"508\":{\"t\":\"大功告成，这么难的逻辑都被你实现了，然后你得用TreeMap，你又要改代码。\"},\"509\":{\"t\":\"有没有一种办法可以让你不修改代码呢，这时候反射就派上用场了。\"},\"510\":{\"t\":\"概念：反射是Java的一种机制，让我们可以在运行时获取类的信息;\"},\"511\":{\"t\":\"作用：通过反射，我们可以在程序运行时动态创建对象，还能获取到类的所有信息，比如它的属性、构造器、方法、注解等；\"},\"512\":{\"t\":\"直接举例吧：\"},\"513\":{\"t\":\"public Map<String, String> getMap(String className) { Class clazz = Class.forName(className); Constructor constructor = clazz.getConstructor(); return (Map<String, String>) constructor.newInstance(); } \"},\"514\":{\"t\":\"这时候不管你需要什么Map，只要实现了Map接口，你都能通过getMap获得，只需要传入对应Map的全限定名，例如java.util.HashMap / java.util.LinkedHashMap。\"},\"515\":{\"t\":\"java中反射的用法非常非常多，常见的有以下这几个：\"},\"516\":{\"t\":\"一、在运行时获取一个类的 Class 对象 二、在运行时构造一个类的实例化对象 三、在运行时获取一个类的所有信息：变量、方法、构造器、注解 \"},\"517\":{\"h\":\"2.2获取class对象\",\"a\":\"_2-2获取class对象\"},\"518\":{\"t\":\"三种方法： 1、类名.class：这种获取方式只有在编译前已经声明了该类的类型才能获取到 Class 对象\"},\"519\":{\"t\":\"Class<HashMap> hashMap= HashMap.class; \"},\"520\":{\"t\":\"2、实例.getClass()：通过实例化对象获取该实例的 Class 对象\"},\"521\":{\"t\":\"Map<String, String> hashMap = new HashMap<>(); Class<? extends Map> hashMapClass = hashMap.getClass(); \"},\"522\":{\"t\":\"3、Class.forName(“类的全限定名”)：通过类的全限定名获取该类的 Class 对象\"},\"523\":{\"t\":\"Class<?> hashMap= Class.forName(\\\"java.util.HashMap\\\"); \"},\"524\":{\"t\":\"拿到 Class对象就可以对它为所欲为了：调用它的方法、获取属性、获取类信息，总之它在你面前就没有隐私了，好羞羞，嘤~。\"},\"525\":{\"h\":\"2.3构造类的实例化对象\",\"a\":\"_2-3构造类的实例化对象\"},\"526\":{\"t\":\"通过反射构造一个类的实例方式有2种： 1、Class 对象调用newInstance()方法\"},\"527\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); HashMap hashMapInstance = (HashMap) hashMapClass.newInstance(); \"},\"528\":{\"t\":\"注意：即使 HashMap已经显式定义了构造方法，通过 newInstance() 创建的实例中，所有属性值都是对应类型的初始值，因为 newInstance() 构造实例会调用默认无参构造器。\"},\"529\":{\"t\":\"2、Constructor 构造器调用newInstance()方法\"},\"530\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); Constructor<?> constructor = hashMapClass.getConstructor(); constructor.setAccessible(true); HashMap newInstance = (HashMap) constructor.newInstance(); \"},\"531\":{\"t\":\"通过 getConstructor(Object… paramTypes) 方法指定获取指定参数类型的 Constructor， Constructor 调用 newInstance(Object… paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。\"},\"532\":{\"t\":\"通过Class对象调用 newInstance() 会走默认无参构造方法，如果想通过显式构造方法构造实例，需要提前从Class中调用getConstructor()方法获取对应的构造器，通过构造器去实例化对象。\"},\"533\":{\"h\":\"2.4获取类的所有信息\",\"a\":\"_2-4获取类的所有信息\"},\"534\":{\"t\":\"1、获取类中的变量（Field）\"},\"535\":{\"t\":\"Field[] getFields()：获取类中所有被public修饰的所有变量\"},\"536\":{\"t\":\"Field getField(String name)：根据变量名获取类中的一个变量，该变量必须被public修饰\"},\"537\":{\"t\":\"Field[] getDeclaredFields()：获取类中所有的变量，但无法获取继承下来的变量\"},\"538\":{\"t\":\"Field getDeclaredField(String name)：根据姓名获取类中的某个变量，无法获取继承下来的变量\"},\"539\":{\"t\":\"2、获取类中的方法（Method）\"},\"540\":{\"t\":\"Method[] getMethods()：获取类中被public修饰的所有方法\"},\"541\":{\"t\":\"Method getMethod(String name, Class…<?>paramTypes)：根据名字和参数类型获取对应方法，该方法必须被public修饰\"},\"542\":{\"t\":\"Method[] getDeclaredMethods()：获取所有方法，但无法获取继承下来的方法\"},\"543\":{\"t\":\"Method getDeclaredMethod(String name, Class…<?>paramTypes)：根据名字和参数类型获取对应方法，无法获取继承下来的方法\"},\"544\":{\"t\":\"3、获取类的构造器（Constructor）\"},\"545\":{\"t\":\"Constuctor[] getConstructors()：获取类中所有被public修饰的构造器 Constructor\"},\"546\":{\"t\":\"getConstructor(Class…<?> paramTypes)：根据参数类型获取类中某个构造器，该构造器必须被public修饰\"},\"547\":{\"t\":\"Constructor[] getDeclaredConstructors()：获取类中所有构造器 Constructor\"},\"548\":{\"t\":\"getDeclaredConstructor(class…<?> paramTypes)：根据参数类型获取对应的构造器\"},\"549\":{\"t\":\"反射的应用场景\"},\"550\":{\"t\":\"Spring 实例化对象：当程序启动时，Spring 会读取配置文件applicationContext.xml并解析出里面所有的标签实例化到IOC容器中。\"},\"551\":{\"t\":\"反射 + 工厂模式：通过反射消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，反射可以使得程序更加健壮。\"},\"552\":{\"t\":\"JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的驱动类时用到反射加载驱动类\"},\"553\":{\"t\":\"参考：https://blog.csdn.net/qq_33709582/article/details/113550163\"},\"554\":{\"h\":\"七、数据结构\"},\"555\":{\"h\":\"1.数组\",\"a\":\"_1-数组\"},\"556\":{\"t\":\"同https://www.youngxy.top/page/Java-SE/二、List.html\"},\"557\":{\"h\":\"2.链表\",\"a\":\"_2-链表\"},\"558\":{\"t\":\"同https://www.youngxy.top/page/Java-SE/二、List.html\"},\"559\":{\"h\":\"3.栈\",\"a\":\"_3-栈\"},\"560\":{\"t\":\"同https://www.youngxy.top/page/Java-SE/二、List.html\"},\"561\":{\"h\":\"3.1Java官方推荐的实现方式：Deque\",\"a\":\"_3-1java官方推荐的实现方式-deque\"},\"562\":{\"t\":\"今日在刷LeetCode hot100的时候，看到K神题解下的一个评论：\"},\"563\":{\"t\":\"所以，我一个小白当然是去百度一下这个Deque为啥Java官方要推荐作为Stack的实现呢？\"},\"564\":{\"t\":\"话不多说，直接上菜！\"},\"565\":{\"h\":\"3.1.1Q1：在 Java 语言中，不推荐使用 Stack 类？\",\"a\":\"_3-1-1q1-在-java-语言中-不推荐使用-stack-类\"},\"566\":{\"t\":\"是的。实际上，这个不推荐不是某个技术专家或者某个企业的规范标准，而是来自 Java 官方。\"},\"567\":{\"t\":\"如果大家在 Java 中查询 Stack 的文档，就会看到如下标为蓝色的说明：\"},\"568\":{\"t\":\"简单翻译：一个更加完整，一致的，后进先出的栈相关的操作，应该由 Deque 接口提供。并且，也推荐使用 Deque 这种数据结构（比如 ArrayDeque）来实现。\"},\"569\":{\"t\":\"因此，如果你想使用栈这种数据结构，Java 官方推荐的写法是这样的（假设容器中的类型是 Integer）：\"},\"570\":{\"t\":\"Deque<Integer> stack = new ArrayDeque<Integer>(); \"},\"571\":{\"h\":\"3.1.2Q2：Java 中的 Stack 类到底怎么了？\",\"a\":\"_3-1-2q2-java-中的-stack-类到底怎么了\"},\"572\":{\"t\":\"Java 中的 Stack 类，最大的问题是，继承了 Vector 这个类。根据 Java 官方文档中的类关系，如下所示：\"},\"573\":{\"t\":\"Vector 是什么类？简单来说，Vector 就是一个动态数组。\"},\"574\":{\"t\":\"最大的问题在于，继承使得子类继承了父类的所有公有方法。\"},\"575\":{\"t\":\"而 Vector 作为动态数组，是有能力在数组中的任何位置添加或者删除元素的。因此，Stack 继承了 Vector，Stack 也有这样的能力！\"},\"576\":{\"t\":\"尝试如下的代码片段，在 Java 中是正确的：\"},\"577\":{\"t\":\"Stack<Integer> stack = new Stack<>(); stack.push(1); stack.push(2); stack.add(1, 666); \"},\"578\":{\"h\":\"3.1.3Q3：问题出在哪里？\",\"a\":\"_3-1-3q3-问题出在哪里\"},\"579\":{\"t\":\"Java 中的 Stack 实现，是被业界一直认为非常糟糕的实现。实际上，它犯了面向对象设计领域的一个基本错误：Stack 和 Vector 之间的关系，不应该是继承关系，而应该是组合关系（composition）。\"},\"580\":{\"t\":\"关于继承关系和组合关系的区别，相信大家在 OOD 学习过程中，听过无数遍。\"},\"581\":{\"t\":\"继承关系描述的是 is-a 的关系，即“是一个”的关系。\"},\"582\":{\"t\":\"猫是一个动物，所以猫这个类可以继承动物类；\"},\"583\":{\"t\":\"程序员是一个雇员，所以程序员这个类可以继承雇员类。\"},\"584\":{\"t\":\"而组合关系描述的是 has-a 的关系，即“有一个”的关系。\"},\"585\":{\"t\":\"车里有一台发动机，所以发动机这个类和车这个类之间，应该是组合关系，即车中包含一个成员变量，是发动机这个类的对象；\"},\"586\":{\"t\":\"电脑里有 CPU，内存，显卡。所以 CPU，内存，显卡，这些类和电脑类之间的关系，都应该是组合关系。\"},\"587\":{\"t\":\"上面这些例子，都是我们在生活中看得到摸得到的实体，我们在做类设计的时候，通常不会犯糊涂。但遇到更抽象的对象的时候，事情可能就不一样了。\"},\"588\":{\"t\":\"比如，栈这种数据结构，和动态数组这种数据结构之间，到底应该是 is-a 的关系？还是 has-a 的关系？\"},\"589\":{\"t\":\"使用自然语言描述，听起来似乎说：栈是一个动态数组，毛病不大。但其实仔细思考，就会发现，栈不是一个动态数组！\"},\"590\":{\"t\":\"因此，很多时候，对于现实中并不存在的设计对象，人类很可能想不清楚 is-a 和 has-a 的关系。在这里，我再提供一个简单的原则：判断一下，如果设计成继承关系的话，我们是否有可能把子类进行向上的父类转型？如果可能，则应该设计成继承关系，否则应该是组合关系。\"},\"591\":{\"t\":\"换句话说，在这个例子中，我们是否可能将栈当做一个动态数组使用？答案是不可能。所以，栈和动态数组之间的关系不应该是继承关系。\"},\"592\":{\"t\":\"实际上，在真实的世界中，真正的继承关系是很少的。真正的继承关系中，父类大多是一个很抽象的概念，比如“人”，比如“动物”。但是我们设计的大多数类，不是这么抽象的概念。整体来说，组成关系更常用。\"},\"593\":{\"t\":\"这个概念不是我说的，而是业界公认的 OOP 设计原则。叫做：Composition over inheritance。如果用中文说，就是应该优先考虑组合关系。\"},\"594\":{\"t\":\"在 OOP 设计中，很多人会更倾向于使用继承关系，毕竟继承关系看起来更“面向对象”一些，也是面向对象讲解的重点。但是，在具体实践中，组合更常见！说得再绝对一些：多用组合，少用继承！\"},\"595\":{\"h\":\"3.1.4Q4：Java 官方不知道这个 Stack 类的实现不好吗？为什么不改？\",\"a\":\"_3-1-4q4-java-官方不知道这个-stack-类的实现不好吗-为什么不改\"},\"596\":{\"t\":\"Java 官方当然知道这个实现不好。但是，因为要保持兼容性（backward compatibility），对于已经正式发布的代码，Java 官方不能做接口设计层面的修改。否则，使用老版本 Java 的程序，将在新的 Java 环境下无法执行，这是 Java 官方不愿意看到的。\"},\"597\":{\"t\":\"Java 官方可以做到的是，将这个类标志成“弃用”（deprecated），以让新版本的开发者不再允许使用这个类，但老版本的程序，还能继续执行。\"},\"598\":{\"t\":\"但是，这么多年了，Java 官方也并没有将 Stack 标为“弃用”，只是在文档上注明“不建议使用”。\"},\"599\":{\"h\":\"3.1.5Q5：为什么使用接口？\",\"a\":\"_3-1-5q5-为什么使用接口\"},\"600\":{\"t\":\"下面，我们再来看一下 Java 官方推荐的写法：使用 Deque 接口：\"},\"601\":{\"t\":\"Deque<Integer> stack = new ArrayDeque<Integer>(); \"},\"602\":{\"t\":\"接口最大的意义之一，就是做了更高层次的抽象：只定义了一个类应该满足哪些方法，而对具体的实现方式不做限制。\"},\"603\":{\"t\":\"比如，我们都知道，在 Java 语言中，Queue 就是一个接口。我们想实现一个队列，可以这么写：\"},\"604\":{\"t\":\" Queue<Integer> q1 = new ArrayDeque<>(); Queue<Integer> q2 = new LinkedList<>(); \"},\"605\":{\"t\":\"在上述实现中，q1 和 q2 的底层具体实现不同，一个是 LinkedList，一个是 ArrayDeque。但是，从用户的角度看，q1 和 q2 是一致的：都是一个队列，只能执行队列规定的方法。\"},\"606\":{\"t\":\"这样做，将“队列”这样一个概念，和底层数据结构的具体实现——LinkedList 或者 ArrayDeque 解耦了：\"},\"607\":{\"t\":\"底层开发人员可以随意维护自己的 LinkedList 类或者 ArrayDeque 类，只要他们满足 Queue 接口规定的规范；\"},\"608\":{\"t\":\"开发者可以选择合适的数据结构来定义 Queue；\"},\"609\":{\"t\":\"而 Queue 的更上层使用者，无需知道 q1 或者 q2 的实现细节，从他们的角度看，只要能调用 Queue 的相关方法：peek, poll, offer 等等，来满足上层的业务需求，就好了。\"},\"610\":{\"t\":\"而且这样做，完美解决了之前说的，继承关系把父类的所有方法都拿过来的问题。接口的设计相当于做了访问限制。LinkedList 中有很多方法，但是，当我们使用 LinkedList 实现 Queue 接口的时候，用户只能调用 Queue 中定义的方法。\"},\"611\":{\"t\":\"从这个角度，我们也能看出 Stack 设计的另一个不合理之处：Stack 和 Queue 同样作为一种特殊的线性数据结构，都应该只是规定一系列操作的接口而已，具体的底层实现，由开发者再做选择。\"},\"612\":{\"t\":\"但因为 Stack 做成了一个类，继承了 Vector，也就只能基于 Vector 这一种固定的数据结构了。\"},\"613\":{\"t\":\"为了修正这个问题，Java 官方推出了 Deque 接口，作为实现栈的接口。\"},\"614\":{\"h\":\"3.1.6Q6：什么是 Deque 接口？\",\"a\":\"_3-1-6q6-什么是-deque-接口\"},\"615\":{\"t\":\"Deque 是双端队列的意思。所谓的双端队列，就是能在线性数据结构的两段，进行插入和删除操作。\"},\"616\":{\"t\":\"大家可以想象，由于 Stack 的定义是在同一端进，同一端出。所以，如果 Deque 可以满足在两段进行插入和删除，自然也能在同一端进行插入和删除，也就是可以以此为基础，做成一个 Stack。\"},\"617\":{\"h\":\"3.1.7Q7：等等！这里有问题！\",\"a\":\"_3-1-7q7-等等-这里有问题\"},\"618\":{\"t\":\"很多同学应该能马上反应过来了。这里有问题！\"},\"619\":{\"t\":\"因为我们根据 Java 官方推荐的方法声明的这个 Stack，虽然变量名称是Stack，但它实际上是一个 Deque。这就意味着，这个Stack，可以在两段做插入和删除操作！但是，真正的栈，只能在同一端做插入和删除操作！\"},\"620\":{\"t\":\"这难道不是重蹈了 Stack 这个类的覆辙？毕竟，我们最开始分析，就说 Stack 这个类的一大问题，是继承了 Vector 这个类的若干我们不需要的方法，破坏了封装性，比如在任何一个位置插入一个元素。现在这个基于 Deque 接口的Stack，依然有我们不需要的方法啊！\"},\"621\":{\"t\":\"没错！这就是 Java 的历史遗留问题了。这个问题至此已经无解了。因为 Stack 这个关键字被占据了。Java 官方不想推出一个叫做 RealStack 或者 CorrectStack 一类的接口名称。所以，按照 Java 官方的推荐所建立的这个Stack，依然不完美。\"},\"622\":{\"t\":\"但至今为止，Java 暂时只是做到这个份儿上。\"},\"623\":{\"t\":\"或许，Oracle 少打一些官司，多研究一下如何处理这些历史遗留问题，Java 能更好吧。\"},\"624\":{\"t\":\"所以，在实际的工程应用上，有人也并不建议使用 Deque 做为 Stack 的实现，而是自己再做一层封装。\"},\"625\":{\"t\":\"比如，大家可以看一下这篇探讨 Stack 和 Deque 的文章：http://baddotrobot.com/blog/2013/01/10/stack-vs-deque/。\"},\"626\":{\"h\":\"3.1.8Q8：链表呢？\",\"a\":\"_3-1-8q8-链表呢\"},\"627\":{\"t\":\"再说一个小问题。\"},\"628\":{\"t\":\"大家可以看到，Java 官方推荐的创建栈的方式，使用了 Deque 接口。并且，在底层实现上，使用了 ArrayDeque，也就是基于动态数组的实现。为什么？\"},\"629\":{\"t\":\"大家应该都知道，动态数组是可以进行扩容操作的。在触发扩容的时候，时间复杂度是 O(n) 的，但整体平均时间复杂度（Amortized Time）是 O(1)。\"},\"630\":{\"t\":\"但是，基于链表的实现，不会牵扯到扩容问题，因此，每一次添加操作，从时间复杂度的角度，都是 O(1) 的。\"},\"631\":{\"t\":\"虽然如此，可是实际上，当数据量达到一定程度的时候，链表的性能是远远低于动态数组的。\"},\"632\":{\"t\":\"这是因为，对于链表来说，每添加一个元素，都需要重新创建一个 Node 类的对象，也就是都需要进行一次 new 的内存操作。而对内存的操作，是非常慢的。\"},\"633\":{\"t\":\"举个例子，对于队列，测试它们的性能。代码如下：\"},\"634\":{\"t\":\" Queue<Integer> q1 = new ArrayDeque<>(); Queue<Integer> q2 = new LinkedList<>(); int N = 10000000; long start1 = System.currentTimeMillis(); for (int i = 0; i < N; i++) { q1.offer(1); } long end1 = System.currentTimeMillis(); long start2 = System.currentTimeMillis(); for (int i = 0; i < N; i++) { q2.offer(i); } long end2 = System.currentTimeMillis(); System.out.println(end1 - start1 + \\\"ms\\\"); System.out.println(end2 - start2 + \\\"ms\\\"); \"},\"635\":{\"t\":\"最终的结果：\"},\"636\":{\"t\":\"76ms 4163ms \"},\"637\":{\"t\":\"也就是使用 LinkedList，会比使用 ArrayDeque 慢 5 倍以上！\"},\"638\":{\"t\":\"因此，甚至有人建议：在实践中，尤其是面对大规模数据的时候，不应该使用链表！\"},\"639\":{\"t\":\"最后，关于在面试中，如果有同学需要使用“栈”这种数据结构，选择 Stack 这个类，面试官会怎么看？我参考了网上的其博主的文章写的@lk 同学的看法：\"},\"640\":{\"t\":\"参考：https://blog.csdn.net/Dlgdlgd/article/details/125768706\"},\"641\":{\"h\":\"4.队列\",\"a\":\"_4-队列\"},\"642\":{\"t\":\"同https://www.youngxy.top/page/Java-SE/二、List.html\"},\"643\":{\"h\":\"5.二叉树\",\"a\":\"_5-二叉树\"},\"644\":{\"h\":\"5.1树的定义\",\"a\":\"_5-1树的定义\"},\"645\":{\"t\":\"定义：树(Tree)是n(n>=0)个结点的有限集T，T为空时称为空树，否则它满足如下两个条件：\"},\"646\":{\"t\":\"(1)有且仅有一个特定的称为根(Root)的结点；\"},\"647\":{\"t\":\"(2)其余的结点可分为m(m>=0)个互不相交的子集T1,T2,T3…Tm，其中每个子集又是一棵树，并称其为子树(Subtree)。\"},\"648\":{\"t\":\"要求子树都非空，使子树的个数（和树的结构）能有明确定义：\"},\"649\":{\"t\":\"结点个数为0 的树称为空树\"},\"650\":{\"t\":\"一棵树可以只有根但没有子树（m = 0），这是一棵单结点的树， 只包含一个根结点\"},\"651\":{\"t\":\"树是一种层次性结构：\"},\"652\":{\"t\":\"子树的根看作是树根的下一层元素\"},\"653\":{\"t\":\"一棵树里的元素可以根据这种关系分为一层层的元素\"},\"654\":{\"t\":\"一棵树（除树根外）可能有多棵子树，根据是否认为子树的排列顺序有意义，可以把树分为有序树和无序树两种概念。例如，普通的树一般是无序的，二叉搜索树BST是有序的。\"},\"655\":{\"h\":\"5.2树的基本术语\",\"a\":\"_5-2树的基本术语\"},\"656\":{\"t\":\"父结点和子结点（是相对定义的）：\"},\"657\":{\"t\":\"一棵树的根结点称为该树的子树的根结点的父结点\"},\"658\":{\"t\":\"子树的根是树根的子结点\"},\"659\":{\"t\":\"边：从父结点到子结点的连线（注意，边有方向）\"},\"660\":{\"t\":\"兄弟结点：父结点相同的结点互为兄弟结点\"},\"661\":{\"t\":\"树叶、分支结点：没有子结点的结点称为树叶，树中的其余结点称为分支结点（注意：分支结点可以只有一个分支）\"},\"662\":{\"t\":\"祖先和子孙：基于父结点/子结点关系和传递性，可以确定相应的传递 关系，称为祖先关系或子孙关系。由这两个关系决定了一个结点的祖先结点，或子孙结点\"},\"663\":{\"t\":\"度数：一个结点的子结点个数称为该结点的度数，显然树叶的度数为0 一棵树的度数就是它里面度数最大的结点的度数\"},\"664\":{\"t\":\"路径，路径长度：\"},\"665\":{\"t\":\"从一个祖先结点到其子孙结点的一系列边称为树中一条路径。显然，从一棵树的根到树中任一个结点都有路径，且路径唯一\"},\"666\":{\"t\":\"路径中边的条数称为路径长度，认为每个结点到自身有长0 的路径\"},\"667\":{\"t\":\"结点的层数：\"},\"668\":{\"t\":\"树根到结点的路径长度是该结点的层数\"},\"669\":{\"t\":\"结点都有层数，根所在的层为0\"},\"670\":{\"t\":\"高度（或深度）：\"},\"671\":{\"t\":\"树的高度或深度是树中结点的最大层数（最长路径的长度）加1\"},\"672\":{\"t\":\"是树的整体性质，空树高度为0，只有根结点的树高度为1\"},\"673\":{\"h\":\"5.3二叉树的定义\",\"a\":\"_5-3二叉树的定义\"},\"674\":{\"t\":\"在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”和“右子树”。\"},\"675\":{\"t\":\"二叉树\"},\"676\":{\"h\":\"5.4二叉树的性质\",\"a\":\"_5-4二叉树的性质\"},\"677\":{\"t\":\"性质1： 在二叉树的第i层上至多有2^(i-1)个结点(i>=1)。\"},\"678\":{\"t\":\"性质2：深度为k的二叉树至多有2^k－1个结点（k>=1)。\"},\"679\":{\"t\":\"性质3： 对任何一棵二叉树，如果其终端结点数为n0，度为2的结点数为n2，则n0＝n2＋1。\"},\"680\":{\"t\":\"性质4：具有n个结点的完全二叉树的深度为[log2n]＋1。\"},\"681\":{\"t\":\"性质5： 如果对一棵有n个结点的完全二叉树的结点按层序编号（从第1层到第【log2n】+1层，每层从左到右),则对任一结点i（1<=i<=n),有：\"},\"682\":{\"t\":\"（1）如果i＝1，则结点i无双亲，是二叉树的根；如果i>1，则其双亲是结点【i/2】。\"},\"683\":{\"t\":\"（2）如果2i>n，则结点i为叶子结点，无左孩子；否则，其左孩子是结点2i。\"},\"684\":{\"t\":\"（3）如果2i＋1>n，则结点i无右孩子；否则，其右孩子是结点2i＋1。\"},\"685\":{\"h\":\"5.5二叉树计算\",\"a\":\"_5-5二叉树计算\"},\"686\":{\"t\":\"方法：https://blog.csdn.net/yang13563758128/article/details/85109687?spm=1001.2014.3001.5502\"},\"687\":{\"h\":\"6.红黑树\",\"a\":\"_6-红黑树\"},\"688\":{\"h\":\"6.1简介\",\"a\":\"_6-1简介\"},\"689\":{\"t\":\"红黑树是一种自平衡的二叉查找树，是一种高效的查找树。红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作。\"},\"690\":{\"h\":\"6.2为什么需要红黑树？\",\"a\":\"_6-2为什么需要红黑树\"},\"691\":{\"t\":\"对于二叉搜索树，如果插入的数据是随机的，那么它就是接近平衡的二叉树，平衡的二叉树，它的操作效率（查询，插入，删除）效率较高，时间复杂度是O（logN）。但是可能会出现一种极端的情况，那就是插入的数据是有序的（递增或者递减），那么所有的节点都会在根节点的右侧或左侧，此时，二叉搜索树就变为了一个链表，它的操作效率就降低了，时间复杂度为O(N)，所以可以认为二叉搜索树的时间复杂度介于O（logN）和O(N)之间，视情况而定。那么为了应对这种极端情况，红黑树就出现了，它是具备了某些特性的二叉搜索树，能解决非平衡树问题，红黑树是一种接近平衡的二叉树（说它是接近平衡因为它并没有像AVL树的平衡因子的概念，它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构，进而提升整体的性能，并没有严格的卡定某个平衡因子来维持绝对平衡）。\"},\"692\":{\"h\":\"6.3红黑树的特性\",\"a\":\"_6-3红黑树的特性\"},\"693\":{\"t\":\"首先，红黑树是一个二叉搜索树，它在每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK；通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡（最短路径就是全黑节点，最长路径就是一个红节点一个黑节点，当从根节点到叶子节点的路径上黑色节点相同时，最长路径刚好是最短路径的两倍）。它同时满足以下特性：\"},\"694\":{\"t\":\"节点是红色或黑色\"},\"695\":{\"t\":\"根是黑色\"},\"696\":{\"t\":\"叶子节点（外部节点，空节点）都是**黑色，**这里的叶子节点指的是最底层的空节点（外部节点），下图中的那些null节点才是叶子节点，null节点的父节点在红黑树里不将其看作叶子节点\"},\"697\":{\"t\":\"红色节点的子节点都是黑色；\"},\"698\":{\"t\":\"红色节点的父节点都是黑色；\"},\"699\":{\"t\":\"从根节点到叶子节点的所有路径上不能有 2 个连续的红色节点\"},\"700\":{\"t\":\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\"},\"701\":{\"h\":\"6.4红黑树的效率\",\"a\":\"_6-4红黑树的效率\"},\"702\":{\"t\":\"红黑树的查找，插入和删除操作，时间复杂度都是O(logN)。\"},\"703\":{\"t\":\"查找操作时，它和普通的相对平衡的二叉搜索树的效率相同，都是通过相同的方式来查找的，没有用到红黑树特有的特性。\"},\"704\":{\"t\":\"但如果插入的时候是有序数据，那么红黑树的查询效率就比二叉搜索树要高了，因为此时二叉搜索树不是平衡树，它的时间复杂度O(N)。\"},\"705\":{\"t\":\"插入和删除操作时，由于红黑树的每次操作平均要旋转一次和变换颜色，所以它比普通的二叉搜索树效率要低一点，不过时间复杂度仍然是O(logN)。总之，红黑树的优点就是对有序数据的查询操作不会慢到O(N)的时间复杂度。\"},\"706\":{\"t\":\"红黑树和AVL树的比较：\"},\"707\":{\"t\":\"AVL树的时间复杂度虽然优于红黑树，但是对于现在的计算机，cpu太快，可以忽略性能差异\"},\"708\":{\"t\":\"红黑树的插入删除比AVL树更便于控制操作\"},\"709\":{\"t\":\"红黑树整体性能略优于AVL树（红黑树旋转情况少于AVL树）\"},\"710\":{\"h\":\"7.哈希表结构\",\"a\":\"_7-哈希表结构\"},\"711\":{\"t\":\"同https://www.youngxy.top/page/Java-SE/四、Map.html\"},\"712\":{\"h\":\"三、Set\"},\"713\":{\"h\":\"1.HashSet\",\"a\":\"_1-hashset\"},\"714\":{\"t\":\"HashSet实现了Set接口，内部实现利用了HashMap，有如下特点：\"},\"715\":{\"t\":\"没有重复元素；\"},\"716\":{\"t\":\"可以高效地添加、删除元素、判断元素是否存在，效率都为O(1)；\"},\"717\":{\"t\":\"没有顺序。\"},\"718\":{\"t\":\"HashSet可以方便高效地实现去重、集合运算等功能。如果要保持添加的顺序，可以使用HashSet的一个子类LinkedHashSet。Set还有一个重要的实现类TreeSet，它可以排序。\"},\"719\":{\"h\":\"2.TreeSet\",\"a\":\"_2-treeset\"},\"720\":{\"t\":\"TreeSet实现了Set接口，但有序。在内部实现上，它基于TreeMap实现，而TreeMap基于大致平衡的排序二叉树：红黑树，这决定了它有如下特点。\"},\"721\":{\"t\":\"没有重复元素。\"},\"722\":{\"t\":\"添加、删除元素、判断元素是否存在，效率比较高，为O(log2(N)), N为元素个数。\"},\"723\":{\"t\":\"有序，TreeSet同样实现了SortedSet和NavigatableSet接口，可以方便地根据顺序进行查找和操作，如第一个、最后一个、某一取值范围、某一值的邻近元素等。\"},\"724\":{\"t\":\"为了有序，TreeSet要求元素实现Comparable接口或通过构造方法提供一个Com-parator对象。\"},\"725\":{\"h\":\"3.LinkedHashSet\",\"a\":\"_3-linkedhashset\"},\"726\":{\"t\":\"之前介绍的Map接口的实现类都有一个对应的Set接口的实现类，比如HashMap有HashSet,TreeMap有TreeSet, LinkedHashMap也不例外，它也有一个对应的Set接口的实现类LinkedHashSet。LinkedHashSet是HashSet的子类，它内部的Map的实现类是LinkedHashMap，所以它也可以保持插入顺序。\"},\"727\":{\"h\":\"4.Set和List区别？\",\"a\":\"_4-set和list区别\"},\"728\":{\"t\":\"List,Set都是继承自Collection接口。都是用来存储一组相同类型的元素的。\"},\"729\":{\"t\":\"List特点：元素有放入顺序，元素可重复 。\"},\"730\":{\"t\":\"有顺序，即先放入的元素排在前面。\"},\"731\":{\"t\":\"Set特点：元素无放入顺序，元素不可重复。\"},\"732\":{\"t\":\"无顺序，即先放入的元素不一定排在前面。 不可重复，即相同元素在set中只会保留一份。所以，有些场景下，set可以用来去重。 不过需要注意的是，set在元素插入时是要有一定的方法来判断元素是否重复的。这个方法很重要，决定了set中可以保存哪些元素。\"},\"733\":{\"h\":\"5.Set如何保证元素不重复?\",\"a\":\"_5-set如何保证元素不重复\"},\"734\":{\"t\":\"在Java的Set体系中，根据实现方式不同主要分为两大类。HashSet和TreeSet。\"},\"735\":{\"t\":\"1、TreeSet 是二叉树实现的，TreeSet中的数据是自动排好序的，不允许放入 null值\"},\"736\":{\"t\":\"2、HashSet 是哈希表实现的，HashSet中的数据是无序的，可以放入 null值，但只能放入一个null，两者中的值都不能重复，就如数据库中的唯一约束\"},\"737\":{\"t\":\"在HashSet中，基本的操作都是由HashMap底层实现的，因为HashSet底层是用HashMap存储数据的。当向HashSet中添加元素的时候，首先计算元素的hashCode值，然后通过扰动计算和按位与的方式计算出这个元素的存储位置，如果这个位置为空，就将元素添加进去；如果不为空，则用equals方法比较元素是否相等，相等就不添加，否则找一个空位添加。\"},\"738\":{\"t\":\"TreeSet的底层是TreeMap的keySet()，而TreeMap是基于红黑树实现的，红黑树是一种平衡二叉查找树，它能保证任何一个节点的左右子树的高度差不会超过较矮的那棵的一倍。\"},\"739\":{\"t\":\"TreeMap是按key排序的，元素在插入TreeSet时compareTo()方法要被调用，所以TreeSet中的元素要实现Comparable接口。TreeSet作为一种Set，它不允许出现重复元素。TreeSet是用compareTo()来判断重复元素的。\"},\"740\":{\"h\":\"二、List\"},\"741\":{\"t\":\"相关信息\"},\"742\":{\"t\":\"Collection 是一个集合接口。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。是list，set等的父接口。\"},\"743\":{\"t\":\"相关信息\"},\"744\":{\"t\":\"Collections 是一个包装类。 它包含有各种有关集合操作的静态多态方法。此类不能实例化，就像一个工具类，服务于Java的Collection框架。\"},\"745\":{\"h\":\"1.ArrayList\",\"a\":\"_1-arraylist\"},\"746\":{\"t\":\"对于ArrayList，它的特点是内部采用动态数组实现，这决定了以下几点。\"},\"747\":{\"t\":\"可以随机访问，按照索引位置进行访问效率很高，用算法描述中的术语，效率是O(1)，简单说就是可以一步到位。\"},\"748\":{\"t\":\"除非数组已排序，否则按照内容查找元素效率比较低，具体是O(N), N为数组内容长度，也就是说，性能与数组长度成正比。\"},\"749\":{\"t\":\"添加元素的效率还可以，重新分配和复制数组的开销被平摊了，具体来说，添加N个元素的效率为O(N)。\"},\"750\":{\"t\":\"插入和删除元素的效率比较低，因为需要移动元素，具体为O(N)。\"},\"751\":{\"h\":\"2.LinkedList\",\"a\":\"_2-linkedlist\"},\"752\":{\"t\":\"用法上，LinkedList是一个List，但也实现了Deque接口，可以作为队列、栈和双端队列使用。实现原理上，LinkedList内部是一个双向链表，并维护了长度、头节点和尾节点，这决定了它有如下特点。\"},\"753\":{\"t\":\"按需分配空间，不需要预先分配很多空间。\"},\"754\":{\"t\":\"不可以随机访问，按照索引位置访问效率比较低，必须从头或尾顺着链接找，效率为O(N/2)。\"},\"755\":{\"t\":\"不管列表是否已排序，只要是按照内容查找元素，效率都比较低，必须逐个比较，效率为O(N)。\"},\"756\":{\"t\":\"在两端添加、删除元素的效率很高，为O(1)。\"},\"757\":{\"t\":\"在中间插入、删除元素，要先定位，效率比较低，为O(N)，但修改本身的效率很高，效率为O(1)。\"},\"758\":{\"t\":\"理解了LinkedList和ArrayList的特点，就能比较容易地进行选择了：\"},\"759\":{\"t\":\"如果列表长度未知，添加、删除操作比较多，尤其经常从两端进行操作，而按照索引位置访问相对比较少，则LinkedList是比较理想的选择。\"},\"760\":{\"h\":\"3.ArrayDeque\",\"a\":\"_3-arraydeque\"},\"761\":{\"t\":\"ArrayDeque实现了双端队列，内部使用循环数组实现，这决定了它有如下特点。\"},\"762\":{\"t\":\"在两端添加、删除元素的效率很高，动态扩展需要的内存分配以及数组复制开销可以被平摊，具体来说，添加N个元素的效率为O(N)。\"},\"763\":{\"t\":\"根据元素内容查找和删除的效率比较低，为O(N)。\"},\"764\":{\"t\":\"与ArrayList和LinkedList不同，没有索引位置的概念，不能根据索引位置进行操作。\"},\"765\":{\"t\":\"ArrayDeque和LinkedList都实现了Deque接口，应该用哪一个呢？（详见：https://www.youngxy.top/page/Java-SE/七、数据结构.html#java官方推荐的实现方式-deque）\"},\"766\":{\"t\":\"如果只需要Deque接口，从两端进行操作，一般而言，ArrayDeque效率更高一些，应该被优先使用；如果同时需要根据索引位置进行操作，或者经常需要在中间进行插入和删除，则应该选LinkedList。\"},\"767\":{\"h\":\"4.PriorityQueue\",\"a\":\"_4-priorityqueue\"},\"768\":{\"t\":\"PriorityQueue实现了队列接口Queue，但按优先级出队，内部是用堆实现的，有如下特点：\"},\"769\":{\"t\":\"实现了优先级队列，最先出队的总是优先级最高的，即排序中的第一个。\"},\"770\":{\"t\":\"优先级可以有相同的，内部元素不是完全有序的，如果遍历输出，除了第一个，其他没有特定顺序。\"},\"771\":{\"t\":\"查看头部元素的效率很高，为O(1)，入队、出队效率比较高，为O(log2(N))，构建堆heapify的效率为O(N)。\"},\"772\":{\"t\":\"根据值查找和删除元素的效率比较低，为O(N)。\"},\"773\":{\"h\":\"五、List常见面试题\"},\"774\":{\"h\":\"1.ArrayList和LinkedList和Vector的区别\",\"a\":\"_1-arraylist和linkedlist和vector的区别\"},\"775\":{\"t\":\"List主要有ArrayList、LinkedList与Vector几种实现。\"},\"776\":{\"t\":\"这三者都实现了List 接口，使用方式也很相似,主要区别在于因为实现方式的不同,所以对不同的操作具有不同的效率。\"},\"777\":{\"t\":\"ArrayList 是一个可改变大小的数组.当更多的元素加入到ArrayList中时,其大小将会动态地增长.内部的元素可以直接通过get与set方法进行访问,因为ArrayList本质上就是一个数组。\"},\"778\":{\"t\":\"LinkedList 是一个双链表,在添加和删除元素时具有比ArrayList更好的性能.但在get与set方面弱于ArrayList。\"},\"779\":{\"t\":\"当然,这些对比都是指数据量很大或者操作很频繁的情况下的对比,如果数据和运算量很小,那么对比将失去意义。\"},\"780\":{\"t\":\"Vector 和ArrayList类似,但属于强同步类。如果你的程序本身是线程安全的(thread-safe,没有在多个线程之间共享同一个集合/对象),那么使用ArrayList是更好的选择。\"},\"781\":{\"t\":\"Vector和ArrayList在更多元素添加进来时会请求更大的空间。Vector每次请求其大小的双倍空间，而ArrayList每次对size增长50%。\"},\"782\":{\"t\":\"而 LinkedList 还实现了 Queue 接口,该接口比List提供了更多的方法,包括 offer(),peek(),poll()等。\"},\"783\":{\"t\":\"注意: 默认情况下ArrayList的初始容量非常小,所以如果可以预估数据量的话,分配一个较大的初始值属于最佳实践,这样可以减少调整大小的开销。\"},\"784\":{\"h\":\"2.ArrayList使用了transient关键字进行存储优化，而Vector没有，为什么？\",\"a\":\"_2-arraylist使用了transient关键字进行存储优化-而vector没有-为什么\"},\"785\":{\"t\":\"话不多说，上源码：\"},\"786\":{\"t\":\"ArrayList：\"},\"787\":{\"t\":\"/** * Save the state of the <tt>ArrayList</tt> instance to a stream (that * is, serialize it). * * @serialData The length of the array backing the <tt>ArrayList</tt> * instance is emitted (int), followed by all of its elements * (each an <tt>Object</tt>) in the proper order. */ private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException{ // Write out element count, and any hidden stuff int expectedModCount = modCount; s.defaultWriteObject(); // Write out array length s.writeInt(elementData.length); // Write out all elements in the proper order. for (int i=0; i<size; i++) s.writeObject(elementData[i]); if (modCount != expectedModCount) { throw new ConcurrentModificationException(); } } \"},\"788\":{\"t\":\"ArrayList实现了writeObject方法，可以看到只保存了非null的数组位置上的数据。即list的size个数的elementData。需要额外注意的一点是，ArrayList的实现，提供了fast-fail机制，可以提供弱一致性。\"},\"789\":{\"t\":\"Vector：\"},\"790\":{\"t\":\"/** * Save the state of the {@code Vector} instance to a stream (that * is, serialize it). * This method performs synchronization to ensure the consistency * of the serialized data. */ private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException { final java.io.ObjectOutputStream.PutField fields = s.putFields(); final Object[] data; synchronized (this) { fields.put(\\\"capacityIncrement\\\", capacityIncrement); fields.put(\\\"elementCount\\\", elementCount); data = elementData.clone(); } fields.put(\\\"elementData\\\", data); s.writeFields(); } \"},\"791\":{\"t\":\"Vector也实现了writeObject方法，但方法并没有像ArrayList一样进行优化存储，实现语句是\"},\"792\":{\"t\":\"data = elementData.clone(); \"},\"793\":{\"t\":\"clone()的时候会把null值也拷贝。所以保存相同内容的Vector与ArrayList，Vector的占用的字节比ArrayList要多。\"},\"794\":{\"t\":\"可以测试一下，序列化存储相同内容的Vector与ArrayList，分别到一个文本文件中去。 Vector需要243字节， ArrayList需要135字节。\"},\"795\":{\"t\":\"分析：\"},\"796\":{\"t\":\"ArrayList是非同步实现的一个单线程下较为高效的数据结构（相比Vector来说）。 ArrayList只通过一个修改记录字段提供弱一致性，主要用在迭代器里。没有同步方法。 即上面提到的Fast-fail机制。ArrayList的存储结构定义为transient，重写writeObject来实现自定义的序列化，优化了存储。\"},\"797\":{\"t\":\"Vector是多线程环境下更为可靠的数据结构，所有方法都实现了同步。\"},\"798\":{\"t\":\"区别：\"},\"799\":{\"t\":\"相关信息\"},\"800\":{\"t\":\"同步处理：Vector同步，ArrayList非同步 。\"},\"801\":{\"t\":\"Vector缺省情况下增长原来一倍的数组长度，ArrayList是0.5倍。ArrayList: int newCapacity = oldCapacity + (oldCapacity >> 1); ArrayList自动扩大容量为原来的1.5倍（实现的时候，方法会传入一个期望的最小容量，若扩容后容量仍然小于最小容量，那么容量就为传入的最小容量。扩容的时候使用的Arrays.copyOf方法最终调用native方法进行新数组创建和数据拷贝）。\"},\"802\":{\"t\":\"Vector: int newCapacity = oldCapacity + ((capacityIncrement > 0) ? capacityIncrement : oldCapacity);Vector指定了initialCapacity，capacityIncrement来初始化的时候，每次增长capacityIncrement。\"},\"803\":{\"h\":\"3.SynchronizedList和Vector的区别\",\"a\":\"_3-synchronizedlist和vector的区别\"},\"804\":{\"t\":\"Vector是java.util包中的一个类。 SynchronizedList是java.util.Collections中的一个静态内部类。\"},\"805\":{\"t\":\"在多线程的场景中可以直接使用Vector类，也可以使用Collections.synchronizedList(List list)方法来返回一个线程安全的List。\"},\"806\":{\"t\":\"那么，到底SynchronizedList和Vector有没有区别，为什么java api要提供这两种线程安全的List的实现方式呢？\"},\"807\":{\"t\":\"首先，我们知道Vector和Arraylist都是List的子类，他们底层的实现都是一样的。所以这里比较如下两个list1和list2的区别：\"},\"808\":{\"t\":\"List<String> list = new ArrayList<String>(); List list2 = Collections.synchronizedList(list); Vector<String> list1 = new Vector<String>(); \"},\"809\":{\"h\":\"3.1比较几个重要的方法\",\"a\":\"_3-1比较几个重要的方法\"},\"810\":{\"h\":\"3.1.1add方法：\",\"a\":\"_3-1-1add方法\"},\"811\":{\"t\":\"Vector的实现：\"},\"812\":{\"t\":\"public void add(int index, E element) { insertElementAt(element, index); } public synchronized void insertElementAt(E obj, int index) { modCount++; if (index > elementCount) { throw new ArrayIndexOutOfBoundsException(index + \\\" > \\\" + elementCount); } ensureCapacityHelper(elementCount + 1); System.arraycopy(elementData, index, elementData, index + 1, elementCount - index); elementData[index] = obj; elementCount++; } private void ensureCapacityHelper(int minCapacity) { // overflow-conscious code if (minCapacity - elementData.length > 0) grow(minCapacity); } \"},\"813\":{\"t\":\"synchronizedList的实现：\"},\"814\":{\"t\":\"public void add(int index, E element) { synchronized (mutex) { list.add(index, element); } } \"},\"815\":{\"t\":\"这里，使用同步代码块的方式调用ArrayList的add()方法。ArrayList的add方法内容如下：\"},\"816\":{\"t\":\"public void add(int index, E element) { rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; } private void rangeCheckForAdd(int index) { if (index > size || index < 0) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } private void ensureCapacityInternal(int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); } ensureExplicitCapacity(minCapacity); } \"},\"817\":{\"t\":\"从上面两段代码中发现有两处不同：\"},\"818\":{\"t\":\"1.Vector使用同步方法实现，synchronizedList使用同步代码块实现。\"},\"819\":{\"t\":\"2.两者的扩充数组容量方式不一样（两者的add方法在扩容方面的差别也就是ArrayList和Vector的差别。）\"},\"820\":{\"h\":\"3.1.2remove方法\",\"a\":\"_3-1-2remove方法\"},\"821\":{\"t\":\"synchronizedList的实现：\"},\"822\":{\"t\":\"public E remove(int index) { synchronized (mutex) {return list.remove(index);} } \"},\"823\":{\"t\":\"ArrayList类的remove方法内容如下：\"},\"824\":{\"t\":\"public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; } \"},\"825\":{\"t\":\"Vector的实现：\"},\"826\":{\"t\":\"public synchronized E remove(int index) { modCount++; if (index >= elementCount) throw new ArrayIndexOutOfBoundsException(index); E oldValue = elementData(index); int numMoved = elementCount - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--elementCount] = null; // Let gc do its work return oldValue; } \"},\"827\":{\"t\":\"从remove方法中我们发现除了一个使用同步方法，一个使用同步代码块之外几乎无任何区别。\"},\"828\":{\"t\":\"相关信息\"},\"829\":{\"t\":\"通过比较其他方法，我们发现，SynchronizedList里面实现的方法几乎都是使用同步代码块包上List的方法。如果该List是ArrayList那么，SynchronizedList和Vector的一个比较明显区别就是一个使用了同步代码块，一个使用了同步方法。\"},\"830\":{\"h\":\"3.2区别分析\",\"a\":\"_3-2区别分析\"},\"831\":{\"t\":\"数据增长区别\"},\"832\":{\"t\":\"相关信息\"},\"833\":{\"t\":\"从内部实现机制来讲ArrayList和Vector都是使用数组(Array)来控制集合中的对象。当你向这两种类型中增加元素的时候，如果元素的数目超出了内部数组目前的长度它们都需要扩展内部数组的长度，Vector缺省情况下自动增长原来一倍的数组长度，ArrayList是原来的50%,所以最后你获得的这个集合所占的空间总是比你实际需要的要大。所以如果你要在集合中保存大量的数据那么使用Vector有一些优势，因为你可以通过设置集合的初始化大小来避免不必要的资源开销。\"},\"834\":{\"t\":\"同步代码块和同步方法的区别\"},\"835\":{\"t\":\"相关信息\"},\"836\":{\"t\":\"同步代码块在锁定的范围上可能比同步方法要小，一般来说锁的范围大小和性能是成反比的。\"},\"837\":{\"t\":\"同步块可以更加精确的控制锁的作用域（锁的作用域就是从锁被获取到其被释放的时间），同步方法的锁的作用域就是整个方法。\"},\"838\":{\"t\":\"同步代码块可以选择对哪个对象加锁，但是静态方法只能给this对象加锁。\"},\"839\":{\"t\":\"因为SynchronizedList只是使用同步代码块包裹了ArrayList的方法，而ArrayList和Vector中同名方法的方法体内容并无太大差异，所以在锁定范围和锁的作用域上两者并无区别。\"},\"840\":{\"t\":\"在锁定的对象区别上，SynchronizedList的同步代码块锁定的是mutex对象，Vector锁定的是this对象。\"},\"841\":{\"t\":\"那么mutex对象又是什么呢？ 其实SynchronizedList有一个构造函数可以传入一个Object,如果在调用的时候显示的传入一个对象，那么锁定的就是用户传入的对象。如果没有指定，那么锁定的也是this对象。\"},\"842\":{\"t\":\"但是，凡事都有但是。 SynchronizedList中实现的类并没有都使用synchronized同步代码块。其中有listIterator和**listIterator(int index)**并没有做同步处理。但是Vector却对该方法加了方法锁。 所以说，在使用SynchronizedList进行遍历的时候要手动加锁。\"},\"843\":{\"t\":\"但是，但是之后还有但是。\"},\"844\":{\"t\":\"之前的比较都是基于我们将ArrayList转成SynchronizedList。那么如果我们想把LinkedList变成线程安全的，或者说我想要方便在中间插入和删除的同步的链表，那么我可以将已有的LinkedList直接转成 SynchronizedList，而不用改变他的底层数据结构。而这一点是Vector无法做到的，因为他的底层结构就是使用数组实现的，这个是无法更改的。\"},\"845\":{\"t\":\"所以，最后，SynchronizedList和Vector最主要的区别：\"},\"846\":{\"t\":\"SynchronizedList有很好的扩展和兼容功能。他可以将所有的List的子类转成线程安全的类。\"},\"847\":{\"t\":\"使用SynchronizedList的时候，进行遍历时要手动进行同步处理。\"},\"848\":{\"t\":\"SynchronizedList可以指定锁定的对象。\"},\"849\":{\"h\":\"八、常见的设计模式\"},\"850\":{\"h\":\"1.软件设计原则有哪些？\",\"a\":\"_1-软件设计原则有哪些\"},\"851\":{\"h\":\"2.什么是设计模式？\",\"a\":\"_2-什么是设计模式\"},\"852\":{\"t\":\"设计模式（Design pattern）代表了最佳的实践，通常被有经验的⾯向对象的软件开发⼈员所采⽤。设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案。这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的。\"},\"853\":{\"t\":\"分为三大类：\"},\"854\":{\"t\":\"创建型： 在创建对象的同时隐藏创建逻辑，不使⽤ new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括⼯⼚/抽象⼯⼚/单例/建造者/原型模式。 结构型： 通过类和接⼝间的继承和引⽤实现创建复杂结构的对象。包括适配器/桥接模式/过滤器/组合/装饰器/外观/享元/代理模式。 行为型： 通过类之间不同通信⽅式实现不同⾏为。包括责任链/命名/解释器/迭代器/中介者/备忘录/观察者/状态/策略/模板/访问者模式。\"},\"855\":{\"h\":\"3.单例模式\",\"a\":\"_3-单例模式\"},\"856\":{\"t\":\"单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，构造⽅法必须是私有的、由自己创建⼀个静态变量存储实例，对外提供⼀个静态公有方法获取实例。\"},\"857\":{\"t\":\"双重检查锁（DCL， 即 double-checked locking） 实现代码如下：\"},\"858\":{\"t\":\"public class Singleton { // 1、私有化构造⽅法 private Singleton() { } // 2、定义⼀个静态变量指向⾃⼰类型 private volatile static Singleton instance; // 3、对外提供⼀个公共的⽅法获取实例 public static Singleton getInstance() { // 第⼀重检查是否为 null if (instance == null) { // 使⽤ synchronized 加锁 synchronized (Singleton.class) { // 第⼆重检查是否为 null if (instance == null) { // new 关键字创建对象不是原⼦操作 instance = new Singleton(); } } } return instance; } } \"},\"859\":{\"t\":\"优点：懒加载，线程安全，效率较⾼缺点：实现较复杂 这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单例。关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返回已创建的单例对象。\"},\"860\":{\"h\":\"4.工厂模式\",\"a\":\"_4-工厂模式\"},\"861\":{\"h\":\"4.1说⼀说简单⼯⼚模式：\",\"a\":\"_4-1说一说简单工厂模式\"},\"862\":{\"t\":\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数。\"},\"863\":{\"t\":\"适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较复杂。\"},\"864\":{\"t\":\"Spring 中的 BeanFactory 使⽤简单⼯⼚模式，根据传⼊⼀个唯⼀的标识来获得 Bean 对象。\"},\"865\":{\"h\":\"4.2⼯⼚⽅法模式了解吗：\",\"a\":\"_4-2工厂方法模式了解吗\"},\"866\":{\"t\":\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐，⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚。\"},\"867\":{\"t\":\"也就是定义⼀个抽象⼯⼚，其定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。这样不⽤通过指定类型来创建对象了。\"},\"868\":{\"h\":\"4.3抽象⼯⼚模式了解吗：\",\"a\":\"_4-3抽象工厂模式了解吗\"},\"869\":{\"t\":\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象，都只是针对⼀类产品，如果要⽣成另⼀种产品，就⽐较难办了！抽象⼯⼚模式通过在 AbstarctFactory 中增加创建产品的接⼝，并在具体⼦⼯⼚中实现新加产品的创建，当然前提是⼦⼯⼚⽀持⽣产该产品。否则继承的这个接⼝可以什么也不⼲。\"},\"870\":{\"h\":\"5.装饰器模式\",\"a\":\"_5-装饰器模式\"},\"871\":{\"h\":\"5.1什么是装饰器模式？\",\"a\":\"_5-1什么是装饰器模式\"},\"872\":{\"t\":\"定义：指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式。\"},\"873\":{\"h\":\"5.2装饰器模式结构\",\"a\":\"_5-2装饰器模式结构\"},\"874\":{\"t\":\"装饰（Decorator）模式中的角色：\"},\"875\":{\"t\":\"抽象构件（Component）角色 ：定义一个抽象接口以规范准备接收附加责任的对象。 具体构件（Concrete Component）角色 ：实现抽象构件，通过装饰角色为其添加一些职责。 抽象装饰（Decorator）角色 ： 继承或实现抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。 具体装饰（ConcreteDecorator）角色 ：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。\"},\"876\":{\"h\":\"5.3使用场景\",\"a\":\"_5-3使用场景\"},\"877\":{\"t\":\"当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。不能采用继承的情况主要有两类：\"},\"878\":{\"t\":\"第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；\"},\"879\":{\"t\":\"第二类是因为类定义不能继承（如final类）\"},\"880\":{\"t\":\"在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。\"},\"881\":{\"t\":\"当对象的功能要求可以动态地添加，也可以再动态地撤销时。\"},\"882\":{\"t\":\"参考：https://blog.csdn.net/weixin_64366370/article/details/130494769\"},\"883\":{\"h\":\"6.代理模式\",\"a\":\"_6-代理模式\"},\"884\":{\"h\":\"6.1什么是代理模式？\",\"a\":\"_6-1什么是代理模式\"},\"885\":{\"t\":\"代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制，是⼀种结构性模式。\"},\"886\":{\"h\":\"6.2静态代理和动态代理的区别：\",\"a\":\"_6-2静态代理和动态代理的区别\"},\"887\":{\"t\":\"灵活性 ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。另外，静态代理中，接⼝⼀旦新增加⽅法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！\"},\"888\":{\"t\":\"JVM 层⾯ ：静态代理在编译时就将接⼝、实现类、代理类这些都变成了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节码，并加载到 JVM 中的。\"},\"889\":{\"h\":\"6.3静态代理：\",\"a\":\"_6-3静态代理\"},\"890\":{\"t\":\"静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码），非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类）。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\"},\"891\":{\"t\":\"上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\"},\"892\":{\"h\":\"6.4动态代理：\",\"a\":\"_6-4动态代理\"},\"893\":{\"t\":\"相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类 CGLIB 动态代理机制。\"},\"894\":{\"t\":\"从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\"},\"895\":{\"t\":\"说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\"},\"896\":{\"t\":\"动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\"},\"897\":{\"t\":\"就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\"},\"898\":{\"h\":\"6.4.1JDK 动态代理机制\",\"a\":\"_6-4-1jdk-动态代理机制\"},\"899\":{\"t\":\"在 Java 动态代理机制中 InvocationHandler 接口和 Proxy 类是核心。\"},\"900\":{\"t\":\"Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\"},\"901\":{\"t\":\" public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException { ...... } 这个方法一共有 3 个参数： loader :类加载器，用于加载代理对象。 interfaces : 被代理类实现的一些接口； h : 实现了 InvocationHandler 接口的对象； \"},\"902\":{\"t\":\"要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\"},\"903\":{\"t\":\"public interface InvocationHandler { /** * 当你使用代理对象调用方法的时候实际会调用到这个方法 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; } invoke() 方法有下面三个参数： proxy :动态生成的代理类 method : 与代理类对象调用的方法相对应 args : 当前 method 方法的参数 \"},\"904\":{\"t\":\"也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\"},\"905\":{\"h\":\"6.4.2CGLIB 动态代理机制\",\"a\":\"_6-4-2cglib-动态代理机制\"},\"906\":{\"t\":\"JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。\"},\"907\":{\"t\":\"为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\"},\"908\":{\"t\":\"CGLIB(Code Generation Library)允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\"},\"909\":{\"t\":\"在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\"},\"910\":{\"t\":\"你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\"},\"911\":{\"t\":\"public interface MethodInterceptor extends Callback{ // 拦截被代理类中的方法 public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy) throws Throwable; } obj : 被代理的对象（需要增强的对象） method : 被拦截的方法（需要增强的方法） args : 方法入参 proxy : 用于调用原始方法 \"},\"912\":{\"t\":\"你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\"},\"913\":{\"h\":\"6.4.3JDK 动态代理和 CGLIB 动态代理对比：\",\"a\":\"_6-4-3jdk-动态代理和-cglib-动态代理对比\"},\"914\":{\"t\":\"JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\"},\"915\":{\"t\":\"就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\"},\"916\":{\"h\":\"六、Map常见面试题\"},\"917\":{\"h\":\"1.为什么JDK1.8中HashMap从头插入改成尾插入\",\"a\":\"_1-为什么jdk1-8中hashmap从头插入改成尾插入\"},\"918\":{\"t\":\"原文链接：https://blog.csdn.net/qq_35590459/article/details/108988011\"},\"919\":{\"t\":\"JDK1.7中扩容时，每个元素的rehash之后，都会插入到新数组对应索引的链表头，所以这就导致原链表顺序为A->B->C，扩容之后，rehash之后的链表可能为C->B->A，元素的顺序发生了变化。在并发场景下，扩容时可能会出现循环链表的情况。而JDK1.8从头插入改成尾插入元素的顺序不变，避免出现循环链表的情况。\"},\"920\":{\"h\":\"2.为什么JDK1.8采用红黑树存储 Hash 冲突的元素？\",\"a\":\"_2-为什么jdk1-8采用红黑树存储hash冲突的元素\"},\"921\":{\"t\":\"红黑树本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为O(log n)。能够加快检索速率。\"},\"922\":{\"h\":\"3.为什么在长度小于8时使用链表，不一直使用红黑树？\",\"a\":\"_3-为什么在长度小于8时使用链表-不一直使用红黑树\"},\"923\":{\"t\":\"桶中元素的插入只会在hash冲突时发生，而hash冲突发生的概率较小，一直维护一个红黑树比链表耗费资源更多，在桶中元素量较小时没有这个必要。\"},\"924\":{\"h\":\"4.为什么要使用红黑树而不使用AVL树？\",\"a\":\"_4-为什么要使用红黑树而不使用avl树\"},\"925\":{\"t\":\"红黑树与AVLl树，在检索的时候效率差不多，都是通过平衡来二分查找。但红黑树不像avl树一样追求绝对的平衡，红黑树允许局部很少的不完全平衡，这样对于效率影响不大，但省去了很多没有必要的调平衡操作，avl树调平衡有时候代价较大，所以效率不如红黑树。\"},\"926\":{\"h\":\"5.为什么数组容量必须是2次幂？\",\"a\":\"_5-为什么数组容量必须是2次幂\"},\"927\":{\"t\":\"索引计算公式为i = (n - 1) & hash，如果n为2次幂，那么n-1的低位就全是1，哈希值进行与操作时可以保证低位的值不变，从而保证分布均匀，效果等同于hash%n，但是位运算比取余运算要高效的多。\"},\"928\":{\"h\":\"6.为什么单链表转为红黑树要求桶内的元素个数大于8？\",\"a\":\"_6-为什么单链表转为红黑树要求桶内的元素个数大于8\"},\"929\":{\"t\":\"当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，而一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件。\"},\"930\":{\"t\":\"同理，少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗，而选择8作为临界值，是因理想情况下一个bin中元素个数达到6的概率是0.00001316，达到7的概率为0.00000094，二者跨度较大，可以减小树和链表之间频繁转化的可能性。\"},\"931\":{\"h\":\"7.HashMap和Hashtable的区别\",\"a\":\"_7-hashmap和hashtable的区别\"},\"932\":{\"t\":\"**共同点:**都是双列集合,底层都是哈希算法\"},\"933\":{\"t\":\"区别:\"},\"934\":{\"t\":\"HashMap是线程不安全的，效率高，JDK1.2版本\"},\"935\":{\"t\":\"Hashtable是线程安全的，效率低，JDK1.0版本\"},\"936\":{\"t\":\"HashMap可以存储null键和null值\"},\"937\":{\"t\":\"Hashtable不可以存储null键和null值\"},\"938\":{\"t\":\"HashTable是基于陈旧的Dictionary类继承来的。 HashMap继承的抽象类AbstractMap实现了Map接口。\"},\"939\":{\"t\":\"默认初始容量和扩容机制： HashTable中的hash数组初始大小是11，增加的方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。\"},\"940\":{\"t\":\"哈希值的使用不同 ： HashTable直接使用对象的hashCode。 HashMap重新计算hash值。\"},\"941\":{\"t\":\"遍历方式的内部实现上不同 ： Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式。HashMap 实现 Iterator，支持fast-fail，Hashtable的 Iterator 遍历支持fast-fail，用 Enumeration 不支持 fast-fail\"},\"942\":{\"t\":\"具体地，Hashtable是线程安全的，它的每个方法中都加入了Synchronize方法。在多线程并发的环境下，可以直接使用Hashtable，不需要自己为它的方法实现同步。\"},\"943\":{\"t\":\"HashMap不是线程安全的，在多线程并发的环境下，可能会产生死锁等问题。使用HashMap时就必须要自己增加同步处理。虽然HashMap不是线程安全的，但是它的效率会比Hashtable要好很多。这样设计是合理的。在我们的日常使用当中，大部分时间是单线程操作的。HashMap把这部分操作解放出来了。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。\"},\"944\":{\"t\":\"Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。\"},\"945\":{\"t\":\"HashMap的Iterator是fail-fast迭代器。当有其它线程改变了HashMap的结构（增加，删除，修改元素），将会抛出ConcurrentModificationException。\"},\"946\":{\"t\":\"JDK8之前的版本中，Hashtable是没有fast-fail机制的。在JDK8及以后的版本中 ，HashTable也是使用fast-fail的。\"},\"947\":{\"t\":\"HashMap与Hashtable的区别是面试中经常遇到的一个问题。这个问题看似简单，但如果深究进去，也能了解到不少知识。（原文链接：https://blog.csdn.net/yang13563758128/article/details/86655574?spm=1001.2014.3001.5502）\"},\"948\":{\"h\":\"8.HashMap、ConcurrentHashMap区别\",\"a\":\"_8-hashmap、concurrenthashmap区别\"},\"949\":{\"t\":\"ConcurrentHashMap和HashMap的实现方式不一样，虽然都是使用桶数组实现的，但是还是有区别，ConcurrentHashMap对桶数组进行了分段，而HashMap并没有。\"},\"950\":{\"t\":\"ConcurrentHashMap在每一个分段上都用锁进行了保护。HashMap没有锁机制。所以，前者线程安全的，后者不是线程安全的。\"},\"951\":{\"t\":\"注意：以上区别基于jdk1.8以前的版本。\"},\"952\":{\"h\":\"四、Map\"},\"953\":{\"h\":\"1.HashMap\",\"a\":\"_1-hashmap\"},\"954\":{\"t\":\"HashMap实现了Map接口，可以方便地按照键存取值，内部使用数组链表和哈希的方式进行实现，这决定了它有如下特点：\"},\"955\":{\"t\":\"根据键保存和获取值的效率都很高，为O(1)，每个单向链表往往只有一个或少数几个节点，根据hash值就可以直接快速定位；\"},\"956\":{\"t\":\"HashMap中的键值对没有顺序，因为hash值是随机的。\"},\"957\":{\"t\":\"需要说明的是，HashMap不是线程安全的，Java中还有一个类Hashtable，它是Java最早实现的容器类之一，实现了Map接口，实现原理与HashMap类似，但没有特别的优化，它内部通过synchronized实现了线程安全。\"},\"958\":{\"t\":\"在HashMap中，键和值都可以为null，而在Hashtable中不可以。在不需要并发安全的场景中，推荐使用HashMap。在高并发的场景中，推荐使用ConcurrentHashMap。\"},\"959\":{\"h\":\"1.1HashMap的容量、扩容\",\"a\":\"_1-1hashmap的容量、扩容\"},\"960\":{\"t\":\"先来看一下，HashMap中都定义了哪些成员变量。\"},\"961\":{\"t\":\"上面是一张HashMap中主要的成员变量的图，其中有一个是我们本文主要关注的： size、loadFactor、threshold、DEFAULT_LOAD_FACTOR和DEFAULT_INITIAL_CAPACITY。\"},\"962\":{\"t\":\"我们先来简单解释一下这些参数的含义，然后再分析他们的作用。\"},\"963\":{\"t\":\"HashMap类中有以下主要成员变量：\"},\"964\":{\"t\":\"transient int size; \"},\"965\":{\"t\":\"记录了Map中KV对的个数\"},\"966\":{\"t\":\"loadFactor \"},\"967\":{\"t\":\"装载因子，用来衡量HashMap满的程度。loadFactor的默认值为0.75f（static final float DEFAULT_LOAD_FACTOR = 0.75f;）。\"},\"968\":{\"t\":\"int threshold; \"},\"969\":{\"t\":\"临界值，当实际KV个数超过threshold时，HashMap会将容量扩容，threshold＝容量*装载因子\"},\"970\":{\"t\":\"除了以上这些重要成员变量外，HashMap中还有一个和他们紧密相关的概念：capacity \"},\"971\":{\"t\":\"容量，如果不指定，默认容量是16(static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;)\"},\"972\":{\"t\":\"可能看完了你还是有点蒙，size和capacity之间有啥关系？为啥要定义这两个变量。loadFactor和threshold又是干啥的？\"},\"973\":{\"h\":\"1.1.1size 和 capacity\",\"a\":\"_1-1-1size-和-capacity\"},\"974\":{\"t\":\"HashMap中的size和capacity之间的区别其实解释起来也挺简单的。我们知道，HashMap就像一个“桶”，那么capacity就是这个桶“当前”最多可以装多少元素，而size表示这个桶已经装了多少元素。来看下以下代码：\"},\"975\":{\"t\":\" Map<String, String> map = new HashMap<String, String>(); map.put(\\\"hollis\\\", \\\"hollischuang\\\"); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); \"},\"976\":{\"t\":\"我们定义了一个新的HashMap，并想其中put了一个元素，然后通过反射的方式打印capacity和size。输出结果为：\"},\"977\":{\"t\":\"capacity : 16、size : 1\"},\"978\":{\"t\":\"默认情况下，一个HashMap的容量（capacity）是16，设计成16的好处主要是可以使用按位与替代取模来提升hash的效率。\"},\"979\":{\"t\":\"我们知道，HashMap的重载的构造函数中，有一个是支持传入initialCapacity的，那么我们尝试着设置一下，看结果如何。\"},\"980\":{\"t\":\" Map<String, String> map = new HashMap<String, String>(1); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Map<String, String> map = new HashMap<String, String>(7); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Map<String, String> map = new HashMap<String, String>(9); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); \"},\"981\":{\"t\":\"分别执行以上3段代码，分别输出：capacity : 1、capacity : 8、capacity : 16。\"},\"982\":{\"t\":\"也就是说，默认情况下HashMap的容量是16，但是，如果用户通过构造函数指定了一个数字作为容量，那么Hash会选择大于该数字的第一个2的幂作为容量。(1->1、7->8、9->16)\"},\"983\":{\"t\":\"相关信息\"},\"984\":{\"t\":\"这里有一个小建议：在初始化HashMap的时候，应该尽量指定其大小。尤其是当你已知map中存放的元素个数时。（《阿里巴巴Java开发规约》）\"},\"985\":{\"h\":\"1.1.2loadFactor 和 threshold\",\"a\":\"_1-1-2loadfactor-和-threshold\"},\"986\":{\"t\":\"前面我们提到过，HashMap有扩容机制，就是当达到扩容条件时会进行扩容，从16扩容到32、64、128...\"},\"987\":{\"t\":\"那么，这个扩容条件指的是什么呢？\"},\"988\":{\"t\":\"其实，HashMap的扩容条件就是当HashMap中的元素个数（size）超过临界值（threshold）时就会自动扩容。\"},\"989\":{\"t\":\"在HashMap中，threshold = loadFactor * capacity。\"},\"990\":{\"t\":\"loadFactor是装载因子，表示HashMap满的程度，默认值为0.75f，设置成0.75有一个好处，那就是0.75正好是3/4，而capacity又是2的幂。所以，两个数的乘积都是整数。\"},\"991\":{\"t\":\"对于一个默认的HashMap来说，默认情况下，当其size大于12(16*0.75)时就会触发扩容。\"},\"992\":{\"t\":\"验证代码如下：\"},\"993\":{\"t\":\" Map<String, String> map = new HashMap<>(); map.put(\\\"hollis1\\\", \\\"hollischuang\\\"); map.put(\\\"hollis2\\\", \\\"hollischuang\\\"); map.put(\\\"hollis3\\\", \\\"hollischuang\\\"); map.put(\\\"hollis4\\\", \\\"hollischuang\\\"); map.put(\\\"hollis5\\\", \\\"hollischuang\\\"); map.put(\\\"hollis6\\\", \\\"hollischuang\\\"); map.put(\\\"hollis7\\\", \\\"hollischuang\\\"); map.put(\\\"hollis8\\\", \\\"hollischuang\\\"); map.put(\\\"hollis9\\\", \\\"hollischuang\\\"); map.put(\\\"hollis10\\\", \\\"hollischuang\\\"); map.put(\\\"hollis11\\\", \\\"hollischuang\\\"); map.put(\\\"hollis12\\\", \\\"hollischuang\\\"); Class<?> mapType = map.getClass(); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); Field threshold = mapType.getDeclaredField(\\\"threshold\\\"); threshold.setAccessible(true); System.out.println(\\\"threshold : \\\" + threshold.get(map)); Field loadFactor = mapType.getDeclaredField(\\\"loadFactor\\\"); loadFactor.setAccessible(true); System.out.println(\\\"loadFactor : \\\" + loadFactor.get(map)); map.put(\\\"hollis13\\\", \\\"hollischuang\\\"); Method capacity = mapType.getDeclaredMethod(\\\"capacity\\\"); capacity.setAccessible(true); System.out.println(\\\"capacity : \\\" + capacity.invoke(map)); Field size = mapType.getDeclaredField(\\\"size\\\"); size.setAccessible(true); System.out.println(\\\"size : \\\" + size.get(map)); Field threshold = mapType.getDeclaredField(\\\"threshold\\\"); threshold.setAccessible(true); System.out.println(\\\"threshold : \\\" + threshold.get(map)); Field loadFactor = mapType.getDeclaredField(\\\"loadFactor\\\"); loadFactor.setAccessible(true); System.out.println(\\\"loadFactor : \\\" + loadFactor.get(map)); \"},\"994\":{\"t\":\"输出结果：\"},\"995\":{\"t\":\"capacity : 16 size : 12 threshold : 12 loadFactor : 0.75 capacity : 32 size : 13 threshold : 24 loadFactor : 0.75 \"},\"996\":{\"t\":\"当HashMap中的元素个数达到13的时候，capacity就从16扩容到32了。\"},\"997\":{\"t\":\"相关信息\"},\"998\":{\"t\":\"HashMap中还提供了一个支持传入initialCapacity,loadFactor两个参数的方法，来初始化容量和装载因子。不过，一般不建议修改loadFactor的值。\"},\"999\":{\"h\":\"1.1.3总结\",\"a\":\"_1-1-3总结\"},\"1000\":{\"t\":\"HashMap中size表示当前共有多少个KV对，capacity表示当前HashMap的容量是多少，默认值是16，每次扩容都是成倍的。loadFactor是装载因子，当Map中元素个数超过loadFactor* capacity的值时，会触发扩容。loadFactor* capacity可以用threshold表示。\"},\"1001\":{\"t\":\"注意：文中分析基于JDK1.8.0_73\"},\"1002\":{\"h\":\"1.2HashMap中hash方法的原理\",\"a\":\"_1-2hashmap中hash方法的原理\"},\"1003\":{\"h\":\"1.2.1HashMap 的数据结构\",\"a\":\"_1-2-1hashmap-的数据结构\"},\"1004\":{\"t\":\"在Java中，保存数据有两种比较简单的数据结构：数组和链表。**数组的特点是：寻址容易，插入和删除困难；而链表的特点是：寻址困难，插入和删除容易。**上面我们提到过，常用的哈希函数的冲突解决办法中有一种方法叫做链地址法，其实就是将数组和链表组合在一起，发挥了两者的优势，我们可以将其理解为链表的数组。\"},\"1005\":{\"t\":\"我们可以从上图看到，左边很明显是个数组，数组的每个成员是一个链表。该数据结构所容纳的所有元素均包含一个指针，用于元素间的链接。我们根据元素的自身特征把元素分配到不同的链表中去，反过来我们也正是通过这些特征找到正确的链表，再从链表中找出正确的元素。其中，根据元素特征计算元素数组下标的方法就是哈希算法，即本文的主角hash()函数（当然，还包括indexOf()函数）。\"},\"1006\":{\"h\":\"1.2.2hash方法\",\"a\":\"_1-2-2hash方法\"},\"1007\":{\"t\":\"我们拿JDK 1.7的HashMap为例，其中定义了一个final int hash(Object k) 方法，其主要被以下方法引用。\"},\"1008\":{\"t\":\"上面的方法主要都是增加和删除方法，这不难理解，当我们要对一个链表数组中的某个元素进行增删的时候，首先要知道他应该保存在这个链表数组中的哪个位置，即他在这个数组中的下标。而hash()方法的功能就是根据Key来定位其在HashMap中的位置。HashTable、ConcurrentHashMap同理。\"},\"1009\":{\"t\":\"首先，在同一个版本的Jdk中，HashMap、HashTable以及ConcurrentHashMap里面的hash方法的实现是不同的。在不同的版本的JDK中（Java7 和 Java8）中也是有区别的。我会尽量全部介绍到。相信，看完这篇文章，你会彻底理解hash方法。\"},\"1010\":{\"t\":\"在上代码之前，我们先来做个简单分析。我们知道，hash方法的功能是根据Key来定位这个K-V在链表数组中的位置的。也就是hash方法的输入应该是个Object类型的Key，输出应该是个int类型的数组下标。如果让你设计这个方法，你会怎么做？\"},\"1011\":{\"t\":\"其实简单，我们只要调用Object对象的hashCode()方法，该方法会返回一个整数，然后用这个数对HashMap或者HashTable的容量进行取模就行了。没错，其实基本原理就是这个，只不过，在具体实现上，由两个方法int hash(Object k)和int indexFor(int h, int length)来实现。但是考虑到效率等问题，HashMap的实现会稍微复杂一点。\"},\"1012\":{\"t\":\"相关信息\"},\"1013\":{\"t\":\"hash ：该方法主要是将Object转换成一个整型。\"},\"1014\":{\"t\":\"indexFor ：该方法主要是将hash生成的整型转换成链表数组中的下标。\"},\"1015\":{\"t\":\"HashMap In Java 7：\"},\"1016\":{\"t\":\"final int hash(Object k) { int h = hashSeed; if (0 != h && k instanceof String) { return sun.misc.Hashing.stringHash32((String) k); } h ^= k.hashCode(); h ^= (h >>> 20) ^ (h >>> 12); return h ^ (h >>> 7) ^ (h >>> 4); } static int indexFor(int h, int length) { return h & (length-1); } \"},\"1017\":{\"t\":\"前面我说过，indexFor方法其实主要是将hash生成的整型转换成链表数组中的下标。那么return h & (length-1);是什么意思呢？其实，他就是取模。Java之所以使用位运算(&)来代替取模运算(%)，最主要的考虑就是效率。位运算(&)效率要比代替取模运算(%)高很多，主要原因是位运算直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快。\"},\"1018\":{\"t\":\"那么，为什么可以使用位运算(&)来实现取模运算(%)呢？这实现的原理如下：\"},\"1019\":{\"t\":\"相关信息\"},\"1020\":{\"t\":\"X % 2^n = X & (2^n - 1)\"},\"1021\":{\"t\":\"2n表示2的n次方，也就是说，一个数对2n取模 == 一个数和(2^n - 1)做按位与运算 。\"},\"1022\":{\"t\":\"假设n为3，则2^3 = 8，表示成2进制就是1000。2^3 -1 = 7 ，即0111。\"},\"1023\":{\"t\":\"此时X & (2^3 - 1) 就相当于取X的2进制的最后三位数。\"},\"1024\":{\"t\":\"从2进制角度来看，X / 8相当于 X >> 3，即把X右移3位，此时得到了X / 8的商，而被移掉的部分(后三位)，则是X % 8，也就是余数。\"},\"1025\":{\"t\":\"上面的解释不知道你有没有看懂，没看懂的话其实也没关系，你只需要记住这个技巧就可以了。或者你可以找几个例子试一下。\"},\"1026\":{\"t\":\"相关信息\"},\"1027\":{\"t\":\"6 % 8 = 6 ，6 & 7 = 6\"},\"1028\":{\"t\":\"10 & 8 = 2 ，10 & 7 = 2\"},\"1029\":{\"t\":\"所以，return h & (length-1);只要保证length的长度是2^n的话，就可以实现取模运算了。而HashMap中的length也确实是2的倍数，初始值是16，之后每次扩充为原来的2倍。\"},\"1030\":{\"t\":\"分析完indexFor方法后，我们接下来准备分析hash方法的具体原理和实现。在深入分析之前，至此，先做个总结。\"},\"1031\":{\"t\":\"HashMap的数据是存储在链表数组里面的。在对HashMap进行插入/删除等操作时，都需要根据K-V对的键值定位到他应该保存在数组的哪个下标中。而这个通过键值求取下标的操作就叫做哈希。HashMap的数组是有长度的，Java中规定这个长度只能是2的倍数，初始值为16。简单的做法是先求取出键值的hashcode，然后在将hashcode得到的int值对数组长度进行取模。为了考虑性能，Java总采用按位与操作实现取模操作。\"},\"1032\":{\"t\":\"接下来我们会发现，无论是用取模运算还是位运算都无法直接解决冲突较大的问题。比如：CA11 0000和0001 0000在对0000 1111进行按位与运算后的值是相等的。\"},\"1033\":{\"t\":\"两个不同的键值，在对数组长度进行按位与运算后得到的结果相同，这不就发生了冲突吗。那么如何解决这种冲突呢，来看下Java是如何做的。\"},\"1034\":{\"t\":\"其中的主要代码部分如下：\"},\"1035\":{\"t\":\"h ^= k.hashCode(); h ^= (h >>> 20) ^ (h >>> 12); return h ^ (h >>> 7) ^ (h >>> 4); \"},\"1036\":{\"t\":\"这段代码是为了对key的hashCode进行扰动计算，防止不同hashCode的高位不同但低位相同导致的hash冲突。简单点说，就是为了把高位的特征和低位的特征组合起来，降低哈希冲突的概率，也就是说，尽量做到任何一位的变化都能对最终得到的结果产生影响。\"},\"1037\":{\"t\":\"举个例子来说，我们现在想向一个HashMap中put一个K-V对，Key的值为“hollischuang”，经过简单的获取hashcode后，得到的值为“1011000110101110011111010011011”，如果当前HashTable的大小为16，即在不进行扰动计算的情况下，他最终得到的index结果值为11。由于15的二进制扩展到32位为“00000000000000000000000000001111”，所以，一个数字在和他进行按位与操作的时候，前28位无论是什么，计算结果都一样（因为0和任何数做与，结果都为0）。如下图所示。\"},\"1038\":{\"t\":\"640 (3)\"},\"1039\":{\"t\":\"可以看到，后面的两个hashcode经过位运算之后得到的值也是11 ，虽然我们不知道哪个key的hashcode是上面例子中的那两个，但是肯定存在这样的key，这就产生了冲突。\"},\"1040\":{\"t\":\"那么，接下来，我看看一下经过扰动的算法最终的计算结果会如何。\"},\"1041\":{\"t\":\"640 (4)\"},\"1042\":{\"t\":\"从上面图中可以看到，之前会产生冲突的两个hashcode，经过扰动计算之后，最终得到的index的值不一样了，这就很好的避免了冲突。\"},\"1043\":{\"t\":\"相关信息\"},\"1044\":{\"t\":\"其实，使用位运算代替取模运算，除了性能之外，还有一个好处就是可以很好的解决负数的问题。因为我们知道，hashcode的结果是int类型，而int的取值范围是-2^31 ~ 2^31 - 1，即[ -2147483648, 2147483647]；这里面是包含负数的，我们知道，对于一个负数取模还是有些麻烦的。如果使用二进制的位运算的话就可以很好的避免这个问题。首先，不管hashcode的值是正数还是负数。length-1这个值一定是个正数。那么，他的二进制的第一位一定是0（有符号数用最高位作为符号位，“0”代表“+”，“1”代表“-”），这样里两个数做按位与运算之后，第一位一定是个0，也就是，得到的结果一定是个正数。\"},\"1045\":{\"t\":\"HashTable In Java 7：\"},\"1046\":{\"t\":\"上面是Java 7中HashMap的hash方法以及indexOf方法的实现，那么接下来我们要看下，线程安全的HashTable是如何实现的，和HashMap有何不同，并试着分析下不同的原因。以下是Java 7中HashTable的hash方法的实现。\"},\"1047\":{\"t\":\"private int hash(Object k) { // hashSeed will be zero if alternative hashing is disabled. return hashSeed ^ k.hashCode(); } \"},\"1048\":{\"t\":\"我们可以发现，很简单，相当于只是对k做了个简单的hash，取了一下其hashCode。而HashTable中也没有indexOf方法，取而代之的是这段代码：int index = (hash & 0x7FFFFFFF) % tab.length;。也就是说，HashMap和HashTable对于计算数组下标这件事，采用了两种方法。HashMap采用的是位运算，而HashTable采用的是直接取模。\"},\"1049\":{\"t\":\"我们前面说过，HashMap之所以不用取模的原因是为了提高效率。有人认为，因为HashTable是个线程安全的类，本来就慢，所以Java并没有考虑效率问题，就直接使用取模算法了呢？但是其实并不完全是，Java这样设计还是有一定的考虑在的，虽然这样效率确实是会比HashMap慢一些。\"},\"1050\":{\"t\":\"其实，HashTable采用简单的取模是有一定的考虑在的。这就要涉及到HashTable的构造函数和扩容函数了。由于篇幅有限，这里就不贴代码了，直接给出结论：\"},\"1051\":{\"t\":\"相关信息\"},\"1052\":{\"t\":\"HashTable默认的初始大小为11，之后每次扩充为原来的2n+1。\"},\"1053\":{\"t\":\"也就是说，HashTable的链表数组的默认大小是一个素数、奇数。之后的每次扩充结果也都是奇数。\"},\"1054\":{\"t\":\"由于HashTable会尽量使用素数、奇数作为容量的大小。当哈希表的大小为素数时，简单的取模哈希的结果会更加均匀。（这个是可以证明出来的，由于不是本文重点，暂不详细介绍，可参考：http://zhaox.github.io/algorithm/2015/06/29/hash\"},\"1055\":{\"t\":\"至此，我们看完了Java 7中HashMap和HashTable中对于hash的实现，我们来做个简单的总结。\"},\"1056\":{\"t\":\"HashMap默认的初始化大小为16，之后每次扩充为原来的2倍。\"},\"1057\":{\"t\":\"HashTable默认的初始大小为11，之后每次扩充为原来的2n+1。\"},\"1058\":{\"t\":\"当哈希表的大小为素数时，简单的取模哈希的结果会更加均匀，所以单从这一点上看，HashTable的哈希表大小选择，似乎更高明些。因为hash结果越分散效果越好。\"},\"1059\":{\"t\":\"在取模计算时，如果模数是2的幂，那么我们可以直接使用位运算来得到结果，效率要大大高于做除法。所以从hash计算的效率上，又是HashMap更胜一筹。\"},\"1060\":{\"t\":\"但是，HashMap为了提高效率使用位运算代替哈希，这又引入了哈希分布不均匀的问题，所以HashMap为解决这问题，又对hash算法做了一些改进，进行了扰动计算。\"},\"1061\":{\"t\":\"ConcurrentHashMap In Java 7：\"},\"1062\":{\"t\":\"private int hash(Object k) { int h = hashSeed; if ((0 != h) && (k instanceof String)) { return sun.misc.Hashing.stringHash32((String) k); } h ^= k.hashCode(); // Spread bits to regularize both segment and index locations, // using variant of single-word Wang/Jenkins hash. h += (h << 15) ^ 0xffffcd7d; h ^= (h >>> 10); h += (h << 3); h ^= (h >>> 6); h += (h << 2) + (h << 14); return h ^ (h >>> 16); } int j = (hash >>> segmentShift) & segmentMask; \"},\"1063\":{\"t\":\"上面这段关于ConcurrentHashMap的hash实现其实和HashMap如出一辙。都是通过位运算代替取模，然后再对hashcode进行扰动。区别在于，ConcurrentHashMap 使用了一种变种的Wang/Jenkins 哈希算法，其主要目的也是为了把高位和低位组合在一起，避免发生冲突。至于为啥不和HashMap采用同样的算法进行扰动，我猜这只是程序员自由意志的选择吧。至少我目前没有办法证明哪个更优。\"},\"1064\":{\"t\":\"HashMap In Java 8：\"},\"1065\":{\"t\":\"在Java 8 之前，HashMap和其他基于map的类都是通过链地址法解决冲突，它们使用单向链表来存储相同索引值的元素。在最坏的情况下，这种方式会将HashMap的get方法的性能从O(1)降低到O(n)。为了解决在频繁冲突时hashmap性能降低的问题，Java 8中使用平衡树来替代链表存储冲突的元素。这意味着我们可以将最坏情况下的性能从O(n)提高到O(logn)。关于HashMap在Java 8中的优化，我后面会有文章继续深入介绍。\"},\"1066\":{\"t\":\"如果恶意程序知道我们用的是Hash算法，则在纯链表情况下，它能够发送大量请求导致哈希碰撞，然后不停访问这些key导致HashMap忙于进行线性查找，最终陷入瘫痪，即形成了拒绝服务攻击（DoS）。\"},\"1067\":{\"t\":\"关于Java 8中的hash函数，原理和Java 7中基本类似。Java 8中这一步做了优化，只做一次16位右位移异或混合，而不是四次，但原理是不变的。\"},\"1068\":{\"t\":\"static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } \"},\"1069\":{\"t\":\"在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h >>> 16)，主要是从速度、功效、质量来考虑的。以上方法得到的int的hash值，然后再通过h & (table.length -1)来得到该对象在数据中保存的位置。\"},\"1070\":{\"t\":\"HashTable In Java 8：\"},\"1071\":{\"t\":\"在Java 8的HashTable中，已经不再有hash方法了。但是哈希的操作还是在的，比如在put方法中就有如下实现：\"},\"1072\":{\"t\":\" int hash = key.hashCode(); int index = (hash & 0x7FFFFFFF) % tab.length; \"},\"1073\":{\"t\":\"这其实和Java 7中的实现几乎无差别，就不做过多的介绍了。\"},\"1074\":{\"t\":\"ConcurrentHashMap In Java 8：\"},\"1075\":{\"t\":\"Java 8 里面的求hash的方法从hash改为了spread。实现方式如下：\"},\"1076\":{\"t\":\"static final int spread(int h) { return (h ^ (h >>> 16)) & HASH_BITS; } \"},\"1077\":{\"t\":\"Java 8的ConcurrentHashMap同样是通过Key的哈希值与数组长度取模确定该Key在数组中的索引。同样为了避免不太好的Key的hashCode设计，它通过如下方法计算得到Key的最终哈希值。不同的是，Java 8的ConcurrentHashMap作者认为引入红黑树后，即使哈希冲突比较严重，寻址效率也足够高，所以作者并未在哈希值的计算上做过多设计，只是将Key的hashCode值与其高16位作异或并保证最高位为0（从而保证最终结果为正整数）。\"},\"1078\":{\"h\":\"1.2.3总结\",\"a\":\"_1-2-3总结\"},\"1079\":{\"t\":\"至此，我们已经分析完了HashMap、HashTable以及ConcurrentHashMap分别在Jdk 1.7 和 Jdk 1.8中的实现。我们可以发现，为了保证哈希的结果可以分散、为了提高哈希的效率，JDK在一个小小的hash方法上就有很多考虑，做了很多事情。当然，我希望我们不仅可以深入了解背后的原理，还要学会这种对代码精益求精的态度。\"},\"1080\":{\"t\":\"Jdk的源代码，每一行都很有意思，都值得花时间去钻研、推敲。\"},\"1081\":{\"t\":\"参考：https://hollischuang.gitee.io/tobetopjavaer/#/basics/java-basic/hash-in-hashmap\"},\"1082\":{\"h\":\"2.TreeMap\",\"a\":\"_2-treemap\"},\"1083\":{\"t\":\"TreeMap与HashMap相比，TreeMap同样实现了Map接口，但内部使用红黑树实现。红黑树是统计效率比较高的大致平衡的排序二叉树，这决定了它有如下特点：\"},\"1084\":{\"t\":\"按键有序，TreeMap同样实现了SortedMap和NavigableMap接口，可以方便地根据键的顺序进行查找，如第一个、最后一个、某一范围的键、邻近键等。\"},\"1085\":{\"t\":\"为了按键有序，TreeMap要求键实现Comparable接口或通过构造方法提供一个Comparator对象。\"},\"1086\":{\"t\":\"根据键保存、查找、删除的效率比较高，为O(h), h为树的高度，在树平衡的情况下，h为log2(N), N为节点数。\"},\"1087\":{\"t\":\"HashMap还是TreeMap呢：不要求排序，优先考虑HashMap，要求排序，考虑TreeMap。\"},\"1088\":{\"h\":\"3.LinkedHashMap\",\"a\":\"_3-linkedhashmap\"},\"1089\":{\"t\":\"LinkedHashMap可以保持插入顺序或访问顺序。插入顺序经常用于处理键值对的数据，并保持其输入顺序，也经常用于键已经排好序的场景，相比TreeMap效率更高；访问顺序经常用于实现LRU缓存。实现原理上，它是HashMap的子类，但内部有一个双向链表以维护节点的顺序。\"},\"1090\":{\"h\":\"MyBatis\"},\"1091\":{\"h\":\"1.MyBatis Dao接口原理\",\"a\":\"_1-mybatis-dao接口原理\"},\"1092\":{\"t\":\"MyBatis中的Dao接口,是对数据访问逻辑的抽象。Dao接口中定义了对数据库的抽象访问方法,而不包含任何实现逻辑。\"},\"1093\":{\"t\":\"MyBatis通过动态代理机制,实现了Dao接口的动态实现。MyBatis会为每个Dao接口生成一个代理对象,这个代理对象实现了Dao接口,并包含了SqlSession的引用。当调用Dao接口方法时,实际会调用SqlSession对应的方法,从而实现对数据库的访问。\"},\"1094\":{\"t\":\"例如,对于一个UserDao接口：\"},\"1095\":{\"t\":\"public interface UserDao { User getUser(int id); } \"},\"1096\":{\"t\":\"MyBatis会动态生成其实现类:\"},\"1097\":{\"t\":\"public class UserDaoImpl implements UserDao { private SqlSession sqlSession; public User getUser(int id) { return sqlSession.selectOne(\\\"namespace.getUser\\\", id); } } \"},\"1098\":{\"t\":\"这样在代码中注入UserDao接口,实际执行的就是SqlSession中对应的SQL映射逻辑。\"},\"1099\":{\"t\":\"总结一下,MyBatis Dao接口实现原理主要包括:\"},\"1100\":{\"t\":\"Dao接口仅定义抽象数据访问方法,不包含实现逻辑\"},\"1101\":{\"t\":\"MyBatis利用JDK动态代理,为每个Dao接口生成代理对象\"},\"1102\":{\"t\":\"代理对象内部包含SqlSession引用,实际执行SqlSession的数据库访问方法\"},\"1103\":{\"t\":\"这样做的好处是 hiding-entirely separating DAO implementation and data access logic\"},\"1104\":{\"h\":\"2.MyBatis分页原理\",\"a\":\"_2-mybatis分页原理\"},\"1105\":{\"t\":\"首先,MyBatis实现分页主要有两种机制:物理分页和逻辑分页。\"},\"1106\":{\"t\":\"物理分页是真正的数据库分页,它是通过数据库本身提供的分页功能来实现的,比如MySQL的LIMIT语句,Oracle的ROWNUM等。这种分页方式能够真正减少返回的数据量,速度较快。\"},\"1107\":{\"t\":\"MyBatis通过拦截器Interceptor来实现物理分页。拦截器会在SQL执行前动态修改SQL,加上分页语句,然后包装执行结果,返回容易处理的分页对象。\"},\"1108\":{\"t\":\"一个典型的物理分页拦截器流程是:\"},\"1109\":{\"t\":\"拦截待执行SQL\"},\"1110\":{\"t\":\"检查数据库类型,添加对应分页语法\"},\"1111\":{\"t\":\"执行修改后的SQL\"},\"1112\":{\"t\":\"封装结果到分页对象\"},\"1113\":{\"t\":\"而逻辑分页方式是通过在SQL中添加条件来实现的,这对数据库影响较小,但需要多次查询,效率低下。\"},\"1114\":{\"t\":\"总之,MyBatis分页实现的核心就在于这个动态SQL拦截机制。拦截器可以灵活适配不同数据库的分页语法,将SQL处理成数据库能识别的分页查询,这是非常巧妙的设计。\"},\"1115\":{\"t\":\"总结一下：\"},\"1116\":{\"t\":\"通过page对象作为分页依据\"},\"1117\":{\"t\":\"通过count来进行查询总条数的限制\"},\"1118\":{\"t\":\"对原sql通过limit来进行分页的效果\"},\"1119\":{\"t\":\"参考：https://blog.csdn.net/xiaolegeaizy/article/details/108461284\"},\"1120\":{\"h\":\"MyBatis 是如何进行分页的？分页插件的原理是什么？\",\"a\":\"mybatis-是如何进行分页的-分页插件的原理是什么\"},\"1121\":{\"t\":\"答：\"},\"1122\":{\"t\":\"(1) MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；\"},\"1123\":{\"t\":\"(2) 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能；\"},\"1124\":{\"t\":\"(3) 也可以使用分页插件来完成物理分页。\"},\"1125\":{\"t\":\"分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。\"},\"1126\":{\"t\":\"举例：\"},\"1127\":{\"t\":\"select _ from student 拦截 sql 后重写为： select t._ from （select \\\\* from student）t limit 0，10 \"},\"1128\":{\"t\":\"MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 invoke() 方法，当然，只会拦截那些指定需要拦截的方法。\"},\"1129\":{\"t\":\"实现 MyBatis 的 Interceptor 接口并复写 intercept() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，在配置文件中配置编写的插件。\"},\"1130\":{\"h\":\"MybatisPlus\",\"a\":\"mybatisplus\"},\"1131\":{\"t\":\"@Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); // 配置分页插件 interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; } \"},\"1132\":{\"h\":\"3.MyBatis缓存机制(一级缓存、二级缓存、三级缓存)\",\"a\":\"_3-mybatis缓存机制-一级缓存、二级缓存、三级缓存\"},\"1133\":{\"h\":\"3.1一级缓存：\",\"a\":\"_3-1一级缓存\"},\"1134\":{\"t\":\"作用域是同一个 SqlSession，在同一个sqlSession中两次执行相同的sql语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取,从而提高查询效率。当一个sqlSession 结束后该 sqlSession中的一级缓存也就不存在了。Mybatis 默认开启一级缓存。 一级缓存内部存储使用一个 HashMap，key 为 hashCode+sqlId+Sql 语句。value为从查询出来映射生成的 java 对象 。sqlSession执行insert、update、delete 等操作 commit 提交后会清空缓存区域。\"},\"1135\":{\"h\":\"3.2二级缓存：\",\"a\":\"_3-2二级缓存\"},\"1136\":{\"t\":\"是多个 SqlSession 共享的，其作用域是 mapper 的同一个 namespace，不同的sqlSession 两次执行相同 namespace 下的 sql 语句且向 sql 中传递参数也相同即最终执行 相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从 缓存中获取数据将不再从数据库查询，从而提高查询效率。Mybatis 默认没有开启二级缓存 需要在 setting 全局参数中配置开启二级缓存。\"},\"1137\":{\"t\":\"在yml中添加以下代码：\"},\"1138\":{\"t\":\"mybatis: configuration: cache-enabled: true \"},\"1139\":{\"t\":\"然后在对应的mapper.xml里面加入配置：\"},\"1140\":{\"t\":\"<cache eviction = \\\"FIFO\\\" flushInterval = \\\"6000\\\" readOnly = \\\"false\\\" size = \\\"50\\\"></cache> \"},\"1141\":{\"t\":\"注意：开启二级缓存后，对应的pojo一定要实现Serializable，否则在序列化的时候会报错。 readOnly：是否只读 。 值为true时，mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为了加快获取速度，直接会将数据在缓存中的引用交给用户，不安全，但速度快。 值为false时，mybatis觉得获取的数据可能会被修改，mybatis会利用序列化&反序列化的技术克隆一份新的数据给你，安全，但速度慢。\"},\"1142\":{\"h\":\"3.3三级缓存：\",\"a\":\"_3-3三级缓存\"},\"1143\":{\"t\":\"Mybatis 的一级缓存与二级缓存只适用于单体项目，在分布式服务或者微服务架构下都会出现数据不一致问题。所以Mybatis为我们提供了自定义缓存。我们可以集成很多三方中间件来做缓存。这里就Redis来说一下。\"},\"1144\":{\"h\":\"3.4总结：\",\"a\":\"_3-4总结\"},\"1145\":{\"t\":\"一级缓存的作用域是一个sqlsession内；二级缓存作用域是针对mapper进行缓存；\"},\"1146\":{\"t\":\"一级缓存是默认开启的；二级缓存需要手动配置；\"},\"1147\":{\"t\":\"一级缓存sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。sqlSession.close()后一级缓存也没有了。但是销毁sqlSession后会将里面的缓存存到二级缓存中；\"},\"1148\":{\"t\":\"二级缓存cache中readonly属性如果为false 那么相应的pojo类必须实现Serializable接口 并且其缓存查询到的对象都是通过序列化或者反序列化克隆的，所以对象之间两两不相等；\"},\"1149\":{\"t\":\"二级缓存的生命周期和应用同步，它是用来解决一级缓存不能跨会话共享数据的问题，范围是namespace级别的，可以被多个会话共享(只要是同一个接口的相同方法，都可以进行共享)。\"},\"1150\":{\"t\":\"只要没有显式地设置cacheEnabled为false，都会使用CachingExector装饰基本的执行器(SIMPLE、REUSE、BATCH)。 二级缓存总是默认开启的，但是每个Mapper的二级开关是默认关闭的。\"},\"1151\":{\"t\":\"二级缓存进行增删改操作也会刷新二级缓存，导致二级缓存失效；\"},\"1152\":{\"t\":\"二级缓存的执行流程：\"},\"1153\":{\"t\":\"参考：https://blog.csdn.net/weixin_45161172/article/details/129526131\"},\"1154\":{\"h\":\"Spring\"},\"1155\":{\"h\":\"1.AOP和IOC概念\",\"a\":\"_1-aop和ioc概念\"},\"1156\":{\"t\":\"AOP：AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。\"},\"1157\":{\"t\":\"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理。\"},\"1158\":{\"t\":\"IOC： 控制反转是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。\"},\"1159\":{\"t\":\"为什么叫控制反转？\"},\"1160\":{\"t\":\"控制 ：指的是对象创建（实例化、管理）的权力\"},\"1161\":{\"t\":\"反转 ：控制权交给外部环境（Spring 框架、IoC 容器）\"},\"1162\":{\"t\":\"IOC容器的整体功能：\"},\"1163\":{\"h\":\"2.Bean的生命周期\",\"a\":\"_2-bean的生命周期\"},\"1164\":{\"t\":\"Spring 容器可以管理 singleton 作用域 Bean 的生命周期，在此作用域下，Spring 能够精确地知道该 Bean 何时被创建，何时初始化完成，以及何时被销毁。\"},\"1165\":{\"t\":\"而对于 prototype 作用域的 Bean，Spring 只负责创建，当容器创建了 Bean 的实例后，Bean 的实例就交给客户端代码管理，Spring 容器将不再跟踪其生命周期。每次客户端请求 prototype 作用域的 Bean 时，Spring 容器都会创建一个新的实例，并且不会管那些被配置成 prototype 作用域的 Bean 的生命周期。\"},\"1166\":{\"t\":\"了解 Spring 生命周期的意义就在于，可以利用 Bean 在其存活期间的指定时刻完成一些相关操作。这种时刻可能有很多，但一般情况下，会在 Bean 被初始化后和被销毁前执行一些相关操作。\"},\"1167\":{\"t\":\"Spring 容器中 Bean 的生命周期流程：\"},\"1168\":{\"t\":\"如果 BeanFactoryPostProcessor和Bean关联, 则调用postProcessBeanFactory方法。(即首先尝试从Bean工厂中获取Bean)\"},\"1169\":{\"t\":\"如果 InstantiationAwareBeanPostProcessor和Bean关联，则调用postProcessBeforeInstantiation方法。\"},\"1170\":{\"t\":\"根据配置情况调用 Bean 构造方法实例化 Bean。\"},\"1171\":{\"t\":\"利用依赖注入完成 Bean 中所有属性值的配置注入。\"},\"1172\":{\"t\":\"如果 InstantiationAwareBeanPostProcessor和Bean关联，则调用postProcessAfterInstantiation方法和postProcessProperties。\"},\"1173\":{\"t\":\"调用xxxAware接口 (上图只是给了几个例子)\"},\"1174\":{\"t\":\"第一类Aware接口\"},\"1175\":{\"t\":\"（1）如果 Bean 实现了 BeanNameAware 接口，则 Spring 调用 Bean 的 setBeanName() 方法传入当前 Bean 的 id 值。\"},\"1176\":{\"t\":\"（2）如果 Bean 实现了 BeanClassLoaderAware 接口，则 Spring 调用 setBeanClassLoader() 方法传入classLoader的引用。\"},\"1177\":{\"t\":\"（3）如果 Bean 实现了 BeanFactoryAware 接口，则 Spring 调用 setBeanFactory() 方法传入当前工厂实例的引用。\"},\"1178\":{\"t\":\"第二类Aware接口\"},\"1179\":{\"t\":\"（1）如果 Bean 实现了 EnvironmentAware 接口，则 Spring 调用 setEnvironment() 方法传入当前 Environment 实例的引用。\"},\"1180\":{\"t\":\"（2）如果 Bean 实现了 EmbeddedValueResolverAware 接口，则 Spring 调用 setEmbeddedValueResolver() 方法传入当前 StringValueResolver 实例的引用。\"},\"1181\":{\"t\":\"（3）如果 Bean 实现了 ApplicationContextAware 接口，则 Spring 调用 setApplicationContext() 方法传入当前 ApplicationContext 实例的引用。\"},\"1182\":{\"t\":\"如果 BeanPostProcessor 和 Bean 关联，则 Spring 将调用该接口的预初始化方法 。postProcessBeforeInitialzation() 对 Bean 进行加工操作，此处非常重要，Spring 的 AOP 就是利用它实现的。\"},\"1183\":{\"t\":\"如果 Bean 实现了 InitializingBean 接口，则 Spring 将调用 afterPropertiesSet() 方法。(或者有执行@PostConstruct注解的方法)。\"},\"1184\":{\"t\":\"如果在配置文件中通过 init-method 属性指定了初始化方法，则调用该初始化方法。\"},\"1185\":{\"t\":\"如果 BeanPostProcessor 和 Bean 关联，则 Spring 将调用该接口的初始化方法 postProcessAfterInitialization()。此时，Bean 已经可以被应用系统使用了。\"},\"1186\":{\"t\":\"如果在 <bean> 中指定了该 Bean 的作用范围为 scope=\\\"singleton\\\"，则将该 Bean 放入 Spring IoC 的缓存池中，将触发 Spring 对该 Bean 的生命周期管理；如果在 <bean> 中指定了该 Bean 的作用范围为 scope=\\\"prototype\\\"，则将该 Bean 交给调用者，调用者管理该 Bean 的生命周期，Spring 不再管理该 Bean。\"},\"1187\":{\"t\":\"如果 Bean 实现了 DisposableBean 接口，则 Spring 会调用 destory() 方法将 Spring 中的 Bean 销毁；(或者有执行@PreDestroy注解的方法)。\"},\"1188\":{\"t\":\"如果在配置文件中通过 destory-method 属性指定了 Bean 的销毁方法，则 Spring 将调用该方法对 Bean 进行销毁。\"},\"1189\":{\"t\":\"简化版：\"},\"1190\":{\"t\":\"参考：https://zhuanlan.zhihu.com/p/562198754\"},\"1191\":{\"h\":\"3.MVC的基本流程\",\"a\":\"_3-mvc的基本流程\"},\"1192\":{\"t\":\"简单来说：\"},\"1193\":{\"t\":\"客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler -> HandlerAdapter 会根据 Handler 来调用真正的处理器来处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象 -> 前端控制器 DispatcherServlet 渲染数据（Model）-> 将得到视图对象返回给用户。\"},\"1194\":{\"t\":\"image-20210608002334025\"},\"1195\":{\"t\":\"上图用于辅助理解，面试时可用下列 8 步描述 SpringMVC 运行流程：\"},\"1196\":{\"t\":\"用户向服务器发送请求，请求被 Spring 前端DispatcherServlet 捕获；\"},\"1197\":{\"t\":\"DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 对象的形式返回；\"},\"1198\":{\"t\":\"DispatcherServlet 根据获得的 Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得 HandlerAdapter 后，此时将开始执行拦截器的 preHandler(…)方法）\"},\"1199\":{\"t\":\"提取 Request 中的模型数据，填充 Handler 入参，开始执行Handler（Controller)。在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\"},\"1200\":{\"t\":\"（1）HttpMessageConveter：将请求消息（如：Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息；\"},\"1201\":{\"t\":\"（2）数据转换：对请求消息进行数据转换。如：String 转换成 Integer、Double 等；\"},\"1202\":{\"t\":\"（3）数据格式化：对请求消息进行数据格式化。如：将字符串转换成格式化数字或格式化日期等；\"},\"1203\":{\"t\":\"（4）数据验证：验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中;\"},\"1204\":{\"t\":\"5.Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象；\"},\"1205\":{\"t\":\"6.根据返回的 ModelAndView，选择一个适合的 ViewResolver（必须是已经注册到 Spring 容器中的 ViewResolver)返回给DispatcherServlet；\"},\"1206\":{\"t\":\"7.ViewResolver 结合 Model 和 View，来渲染视图；\"},\"1207\":{\"t\":\"8.将渲染结果返回给客户端。\"},\"1208\":{\"h\":\"4.Spring的设计模式\",\"a\":\"_4-spring的设计模式\"},\"1209\":{\"t\":\"工厂设计模式 : Spring 使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象；\"},\"1210\":{\"t\":\"代理设计模式 : Spring AOP 功能的实现；\"},\"1211\":{\"t\":\"单例设计模式 : Spring 中的 Bean 默认都是单例的；\"},\"1212\":{\"t\":\"模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式；\"},\"1213\":{\"t\":\"包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源；\"},\"1214\":{\"t\":\"观察者模式：Spring 事件驱动模型就是观察者模式很经典的一个应用；\"},\"1215\":{\"t\":\"适配器模式：Spring AOP 的增强或通知(Advice)使用到了适配器模式、SpringMVC 中也是用到了适配器模式适配 Controller。\"},\"1216\":{\"h\":\"5.Spring事务机制\",\"a\":\"_5-spring事务机制\"},\"1217\":{\"h\":\"5.1谈谈你对 Spring 中的事务的理解？\",\"a\":\"_5-1谈谈你对-spring-中的事务的理解\"},\"1218\":{\"t\":\"事务是逻辑上的一组操作，要么都执行，要么都不执行。\"},\"1219\":{\"t\":\"事务特性\"},\"1220\":{\"t\":\"原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\"},\"1221\":{\"t\":\"一致性：执行事务前后，数据保持一致；\"},\"1222\":{\"t\":\"隔离性：并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\"},\"1223\":{\"t\":\"持久性: 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\"},\"1224\":{\"t\":\"Spring 事务管理接口\"},\"1225\":{\"t\":\"PlatformTransactionManager：（平台）事务管理器；\"},\"1226\":{\"t\":\"TransactionDefinition：事务定义信息（事务隔离级别、传播行为、超时、只读、回滚规则）；\"},\"1227\":{\"t\":\"TransactionStatus：事务运行状态；\"},\"1228\":{\"t\":\"所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。\"},\"1229\":{\"h\":\"5.2Spring 中的事务隔离级别？\",\"a\":\"_5-2spring-中的事务隔离级别\"},\"1230\":{\"t\":\"TransactionDefinition 接口中定义了五个表示隔离级别的常量：\"},\"1231\":{\"t\":\"TransactionDefinition.ISOLATION_DEFAULT：使用后端数据库默认的隔离级别，MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED 隔离级别；\"},\"1232\":{\"t\":\"TransactionDefinition.ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读；\"},\"1233\":{\"t\":\"TransactionDefinition.ISOLATION_READ_COMMITTED：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生；\"},\"1234\":{\"t\":\"TransactionDefinition.ISOLATION_REPEATABLE_READ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生；\"},\"1235\":{\"t\":\"TransactionDefinition.ISOLATION_SERIALIZABLE：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\"},\"1236\":{\"h\":\"5.3Spring 中的事物传播行为？\",\"a\":\"_5-3spring-中的事物传播行为\"},\"1237\":{\"t\":\"事务传播行为是为了解决业务层方法之间互相调用的事务问题。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在 TransactionDefinition 定义中包括了如下几个表示传播行为的常量：\"},\"1238\":{\"t\":\"支持当前事务的情况：\"},\"1239\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务；\"},\"1240\":{\"t\":\"TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行；\"},\"1241\":{\"t\":\"TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\"},\"1242\":{\"t\":\"不支持当前事务的情况：\"},\"1243\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起；\"},\"1244\":{\"t\":\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\"},\"1245\":{\"t\":\"TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\"},\"1246\":{\"t\":\"其他情况：\"},\"1247\":{\"t\":\"TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 TransactionDefinition.PROPAGATION_REQUIRED。\"},\"1248\":{\"h\":\"6.Spring如何解决循环依赖问题？\",\"a\":\"_6-spring如何解决循环依赖问题\"},\"1249\":{\"t\":\"了解问题的本质再分析问题，往往更利于对问题有更深入的了解和研究。所以我们在分析 Spring 关于循环依赖的源码之前，先要了解下什么是循环依赖。\"},\"1250\":{\"h\":\"6.1循环依赖的概念\",\"a\":\"_6-1循环依赖的概念\"},\"1251\":{\"t\":\"img\"},\"1252\":{\"t\":\"循环依赖分为三种，自身依赖于自身、互相循环依赖、多组循环依赖。\"},\"1253\":{\"t\":\"但无论循环依赖的数量有多少，循环依赖的本质是一样的。就是你的完整创建依赖于我，而我的完整创建也依赖于你，但我们互相没法解耦，最终导致依赖创建失败。\"},\"1254\":{\"t\":\"所以 Spring 提供了除了构造函数注入和原型注入外的，setter循环依赖注入解决方案。那么我们也可以先来尝试下这样的依赖，如果是我们自己处理的话该怎么解决。\"},\"1255\":{\"h\":\"6.2问题体现\",\"a\":\"_6-2问题体现\"},\"1256\":{\"t\":\"public class ABTest { public static void main(String[] args) { new ClazzA(); } } class ClazzA { private ClazzB b = new ClazzB(); } class ClazzB { private ClazzA a = new ClazzA(); } \"},\"1257\":{\"h\":\"6.3解决方案\",\"a\":\"_6-3解决方案\"},\"1258\":{\"t\":\"整个解决循环依赖的核心内容，A 创建后填充属性时依赖 B，那么就去创建 B，在创建 B 开始填充时发现依赖于 A，但此时 A 这个半成品对象已经存放在缓存到singletonObjects 中了，所以 B 可以正常创建，在通过递归把 A 也创建完整了。\"},\"1259\":{\"h\":\"6.4Spring解决\",\"a\":\"_6-4spring解决\"},\"1260\":{\"h\":\"6.4.1setter注入的方式\",\"a\":\"_6-4-1setter注入的方式\"},\"1261\":{\"t\":\"Spring默认是通过setter注入的方式来注入bean的依赖属性的。\"},\"1262\":{\"t\":\"在实例化一个bean时,Spring会先创建这个bean的实例,然后再通过set方法为其设置属性。\"},\"1263\":{\"t\":\"如果此时有循环依赖,例如A依赖B,B依赖A。Spring会先完成A和B两个bean的实例化,使其处于“半初始化”状态。\"},\"1264\":{\"t\":\"然后Spring会调用A的set方法设置其依赖的B的属性,此时B已实例化,可以被注入。\"},\"1265\":{\"t\":\"同样地,Spring又会调用B的set方法设置其依赖的A的属性,此时A也已实例化,可以被注入。\"},\"1266\":{\"t\":\"通过这种“提前实例化,推迟设置属性”的方式,Spring使得两个有循环依赖的bean都先实例化,然后再相互设置对方的属性,这样就巧妙地避免了循环依赖的问题。\"},\"1267\":{\"t\":\"所以Spring的setter注入方式可以很好的解决循环依赖,这也是Spring默认选择的注入方式。\"},\"1268\":{\"t\":\"所以,简单来说,Spring通过先实例化,再通过set方法设置属性的setter注入方式,实现了在实例化阶段就将bean初始化,而将属性填充推迟到后面,这样就可以顺利解决循环依赖的问题。这是Spring容器很关键的一个设计。\"},\"1269\":{\"h\":\"6.4.2三级缓存的方式\",\"a\":\"_6-4-2三级缓存的方式\"},\"1270\":{\"t\":\"（1）一级缓存能解决吗？\"},\"1271\":{\"t\":\"img\"},\"1272\":{\"t\":\"其实只有一级缓存并不是不能解决循环依赖，就像我们自己做的例子一样。\"},\"1273\":{\"t\":\"但是在 Spring 中如果像我们例子里那么处理，就会变得非常麻烦，而且也可能会出现 NPE 问题。\"},\"1274\":{\"t\":\"所以如图按照 Spring 中代码处理的流程，我们去分析一级缓存这样存放成品 Bean 的流程中，是不能解决循环依赖的问题的。因为 A 的成品创建依赖于 B，B的成品创建又依赖于 A，当需要补全B的属性时 A 还是没有创建完，所以会出现死循环。\"},\"1275\":{\"t\":\"（2） 二级缓存能解决吗？\"},\"1276\":{\"t\":\"img\"},\"1277\":{\"t\":\"有了二级缓存其实这个事处理起来就容易了，一个缓存用于存放成品对象，另外一个缓存用于存放半成品对象。\"},\"1278\":{\"t\":\"A 在创建半成品对象后存放到缓存中，接下来补充 A 对象中依赖 B 的属性。\"},\"1279\":{\"t\":\"B 继续创建，创建的半成品同样放到缓存中，在补充对象的 A 属性时，可以从半成品缓存中获取，现在 B 就是一个完整对象了，而接下来像是递归操作一样 A 也是一个完整对象了。\"},\"1280\":{\"t\":\"（3） 三级缓存解决什么？\"},\"1281\":{\"t\":\"img\"},\"1282\":{\"t\":\"有了二级缓存都能解决 Spring 依赖了，怎么要有三级缓存呢。其实我们在前面分析源码时也提到过，三级缓存主要是解决 Spring AOP 的特性。AOP 本身就是对方法的增强，是 ObjectFactory<?> 类型的 lambda 表达式，而 Spring 的原则又不希望将此类类型的 Bean 前置创建，所以要存放到三级缓存中处理。\"},\"1283\":{\"t\":\"其实整体处理过程类似，唯独是 B 在填充属性 A 时，先查询成品缓存、再查半成品缓存，最后在看看有没有单例工程类在三级缓存中。最终获取到以后调用 getObject 方法返回代理引用或者原始引用。\"},\"1284\":{\"t\":\"至此也就解决了 Spring AOP 所带来的三级缓存问题。本章节涉及到的 AOP 依赖有源码例子，可以进行调试。\"},\"1285\":{\"t\":\"（4）总结\"},\"1286\":{\"t\":\"回顾本文基本以实际操作的例子开始，引导大家对循环依赖有一个整体的认识，也对它的解决方案可以上手的例子，这样对后续的关于 Spring 对循环依赖的解决也就不会那么陌生了。\"},\"1287\":{\"t\":\"通篇全文下来大家也可以看到，三级缓存并不是非必须不可，只不过在满足 Spring 自身创建的原则下，是必须的。如果你可以下载 Spring 源码对这部分代码进行改动下，提前创建 AOP 对象保存到缓存中，那么二级缓存一样可以解决循环依赖问题。\"},\"1288\":{\"h\":\"SpringBoot\"},\"1289\":{\"h\":\"1.Spring Boot自动配置原理\",\"a\":\"_1-spring-boot自动配置原理\"},\"1290\":{\"t\":\"在Spring程序main方法中，添加**@SpringBootApplication或者@EnableAutoConfiguration会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建的Spring容器中的bean。Spring Boot 通过@EnableAutoConfiguration开启自动装配，通过 SpringFactoriesLoader 最终加载META-INF/spring.factories中的自动配置类实现自动装配，自动配置类其实就是通过@Conditional按需加载的配置类，想要其生效必须引入spring-boot-starter-xxx**包实现起步依赖。\"},\"1291\":{\"t\":\"第 1 步: 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true，可在 application.properties 或 application.yml 中设置。\"},\"1292\":{\"t\":\"第 2 步 ： 用于获取EnableAutoConfiguration注解中的 exclude 和 excludeName。\"},\"1293\":{\"t\":\"第 3 步： 获取需要自动装配的所有配置类，读取META-INF/spring.factories：\"},\"1294\":{\"t\":\"spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories\"},\"1295\":{\"t\":\"从下图可以看到这个文件的配置内容都被我们读取到了。XXXAutoConfiguration的作用就是按需加载组件。 不光是这个依赖下的META-INF/spring.factories被读取到，所有 Spring Boot Starter 下的META-INF/spring.factories都会被读取到。\"},\"1296\":{\"t\":\"自动配置作为Spring Boot的核心功能之一,其原理主要包含以下四点:\"},\"1297\":{\"t\":\"@SpringBootApplication注解\"},\"1298\":{\"t\":\"这个注解包含了@ComponentScan、@Configuration和@EnableAutoConfiguration,其中最关键的就是@EnableAutoConfiguration注解,它会根据classpath中的jar依赖为项目进行自动配置。\"},\"1299\":{\"t\":\"@EnableAutoConfiguration注解\"},\"1300\":{\"t\":\"该注解通过SpringFactoriesLoader会加载classpath下META-INF/spring.factories文件中配置的自动配置类。这些自动配置类可以帮助Spring Boot项目进行自动化设置。\"},\"1301\":{\"t\":\"启动引导程序Bootstrap Application\"},\"1302\":{\"t\":\"Spring Boot在启动时会通过一个引导程序进行项目初始化。该引导程序会先加载自动配置类和其它一些关键类,实现自动配置的预处理工作。\"},\"1303\":{\"t\":\"条件注解@Conditional\"},\"1304\":{\"t\":\"Spring Boot提供了各种条件注解如@ConditionalOnClass、@ConditionalOnMissingBean等,自动配置类可以通过这些注解来对配置进行定制化。只有满足条件的自动配置才会生效。\"},\"1305\":{\"t\":\"总体流程：\"},\"1306\":{\"t\":\"1、引入Starter组件\"},\"1307\":{\"t\":\"2、@EnableAutoConfiguration注解通过@Import注解导入AutoConfigurationImportSelector类（@Import注解可以导入配置类或者Bean到当前类中）。\"},\"1308\":{\"t\":\"3、SpringBoot基于约定去Starter组件的路径下（META-INF/spring.factories）去找配置类\"},\"1309\":{\"t\":\"4、SpringBoot使用AutoConfigurationImportSelector类中getCandidateConfigurations去导入这些配置类，并根据@Conditional动态加载配置类里面的Bean到容器\"},\"1310\":{\"t\":\"参考：https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html#autoconfigurationimportselector-加载自动装配类\"},\"1311\":{\"h\":\"2.Spring Boot 加载配置文件的优先级了解么？\",\"a\":\"_2-spring-boot-加载配置文件的优先级了解么\"},\"1312\":{\"t\":\"项目启动后扫描顺序：\"},\"1313\":{\"t\":\"1）先去项目根目录找config文件夹下找配置文件件 2）再去根目录下找配置文件 3）去resources下找cofnig文件夹下找配置文件 4）去resources下找配置文件\"},\"1314\":{\"h\":\"3.如何使用 Spring Boot 实现全局异常处理？\",\"a\":\"_3-如何使用-spring-boot-实现全局异常处理\"},\"1315\":{\"t\":\"创建一个全局异常处理类,实现HandlerExceptionResolver接口。\"},\"1316\":{\"t\":\"@ControllerAdvice注解标注该类是一个全局异常处理类。\"},\"1317\":{\"t\":\"@ExceptionHandler注解用来定义该方法处理的异常类型。\"},\"1318\":{\"t\":\"在处理方法中添加Exception类型的参数,可以获取异常对象信息。\"},\"1319\":{\"t\":\"处理方法中根据异常类型进行相应处理,比如返回指定的错误信息。\"},\"1320\":{\"t\":\"创建ResponseEntity对象封装返回的错误信息,设置状态码等信息。\"},\"1321\":{\"t\":\"在Spring Boot主类中使用@Bean注解注册全局异常处理类。\"},\"1322\":{\"t\":\"当 controller 抛出异常时,会被全局异常处理类自动捕获,并进行相应的处理,返回给用户统一的错误响应。\"},\"1323\":{\"t\":\"例子：\"},\"1324\":{\"t\":\"创建全局异常处理类:\"},\"1325\":{\"t\":\"@ControllerAdvice public class GlobalExceptionHandler implements HandlerExceptionResolver { @ExceptionHandler(Exception.class) @ResponseBody public ResponseEntity<String> handleException(Exception ex) { return new ResponseEntity<String>(\\\"服务器内部错误\\\", HttpStatus.INTERNAL_SERVER_ERROR); } @ExceptionHandler(BusinessException.class) @ResponseBody public ResponseEntity<String> handleBusinessException(BusinessException ex) { return new ResponseEntity<String>(ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR); } } \"},\"1326\":{\"t\":\"在Spring Boot启动类中注册:\"},\"1327\":{\"t\":\"@Bean public GlobalExceptionHandler getGlobalExceptionHandler() { return new GlobalExceptionHandler(); } \"},\"1328\":{\"t\":\"在Controller中抛出异常:\"},\"1329\":{\"t\":\"@RestController public class TestController { @GetMapping(\\\"/test\\\") public String test() { throw new BusinessException(\\\"业务异常\\\"); } } \"},\"1330\":{\"t\":\"访问/test接口会进入全局异常处理,返回业务异常信息。\"},\"1331\":{\"h\":\"4.核心配置文件\",\"a\":\"_4-核心配置文件\"},\"1332\":{\"t\":\"SpringBoot的核心配置文件是application和bootstrap配置文件。\"},\"1333\":{\"t\":\"application配置文件这个容易理解，主要用于Spring Boot项目的自动化配置。\"},\"1334\":{\"t\":\"bootstrap配置文件，该文件用于关联配置中心的配置,也可以配置一些初始化参数,会更早地加载。使用Spring Cloud Config配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；\"},\"1335\":{\"h\":\"5.实现热部署的方式\",\"a\":\"_5-实现热部署的方式\"},\"1336\":{\"t\":\"这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。\"},\"1337\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> </dependency> \"},\"1338\":{\"h\":\"6.监视器和监听器\",\"a\":\"_6-监视器和监听器\"},\"1339\":{\"h\":\"6.1监听器\",\"a\":\"_6-1监听器\"},\"1340\":{\"t\":\"监听器也叫listener，是servlet的监听器，可以用于监听web应用程序中某些对象的创建、销毁、增加、修改、删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化时，服务器自动调用监听器对象中的方法，常用于系统加载时进行信息初始化，统计在线人数和在线用户，统计网站的访问量。 配置监听器的方法：\"},\"1341\":{\"t\":\"通过@Component把监听器加入Spring容器中管理;\"},\"1342\":{\"t\":\"在application.properties中添加context.listener.classes配置;\"},\"1343\":{\"t\":\"在方法上加@EventListener注解;\"},\"1344\":{\"h\":\"6.2监控器\",\"a\":\"_6-2监控器\"},\"1345\":{\"t\":\"actuator：这是springboot程序的监控系统，可以实现健康检查，info信息等。在使用之前需要引入spring-boot-starter-actuator，并做简单的配置即可。 引入依赖并编写好配置之后，启动项目，访问http://localhost:8080/actuator\"},\"1346\":{\"t\":\"Spring Boot自带监控组件—Actuator，它可以帮助实现对程序内部运行情况的监控。Actuator轻松实现应用程序的监控治理，比如健康状况、审计、统计和HTTP追踪、Bean加载情况、环境变量、日志信息、线程信息等。 Actuator的核心是端点（Endpoint），它用来监视、提供应用程序的信息，Spring Boot提供的spring-boot-actuator组件中已经内置了非常多的Endpoint（health、info、beans、metrics、httptrace、shutdown等），每个端点都可以启用和禁用。\"},\"1347\":{\"h\":\"7.什么是Spring Boot Starter？有哪些常用的？\",\"a\":\"_7-什么是spring-boot-starter-有哪些常用的\"},\"1348\":{\"t\":\"和自动配置一样，Spring Boot Starter的目的也是简化配置，而Spring Boot Starter解决的是依赖管理配置复杂的问题，有了它，当我需要构建一个Web应用程序时，不必再遍历所有的依赖包，一个一个地添加到项目的依赖管理中，而是只需要一个配置spring-boot-starter-web。\"},\"1349\":{\"t\":\"常用的：\"},\"1350\":{\"t\":\"spring-boot-starter-web - Web 和 RESTful 应用程序\"},\"1351\":{\"t\":\"spring-boot-starter-test - 单元测试和集成测试\"},\"1352\":{\"t\":\"spring-boot-starter-parent有什么作用？\"},\"1353\":{\"t\":\"我们知道，新建一个SpringBoot项目，默认都是有parent的，这个parent就是spring-boot-starter-parent，spring-boot-starter-parent主要有如下作用：\"},\"1354\":{\"t\":\"定义了Java编译版本\"},\"1355\":{\"t\":\"使用UTF-8格式编码\"},\"1356\":{\"t\":\"继承自spring-boor-dependencies，这里面定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号\"},\"1357\":{\"t\":\"执行打包操作的配置\"},\"1358\":{\"t\":\"自动化的资源过滤\"},\"1359\":{\"t\":\"自动化的插件配置\"},\"1360\":{\"h\":\"8.Spring Boot四大核心组件\",\"a\":\"_8-spring-boot四大核心组件\"},\"1361\":{\"t\":\"四大组件分别是：starter， autoconfigure, CLI 以及actuator。\"},\"1362\":{\"t\":\"autoconfigure在我们的开发中并不会被感知，因为它是存在于我们的starter中的，所以我们的每个starter都是依赖autoconfigure的。\"},\"1363\":{\"t\":\"Spring Boot CLI是一个命令行使用Spring Boot的客户端工具；主要功能如下：\"},\"1364\":{\"t\":\"运行groovy脚本 => 官网2.1\"},\"1365\":{\"t\":\"打包groovy文件到jar => 官网2.3\"},\"1366\":{\"t\":\"初始化Spring Boot项目 => 官网2.4\"},\"1367\":{\"t\":\"actuator是Spring Boot的监控插件，本身提供了很多接口可以获取当前项目的各项运行状态指标。\"},\"1368\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485568&idx=2&sn=c5ba880fd0c5d82e39531fa42cb036ac&chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&token=1729829670&lang=zh_CN#rd\"},\"1369\":{\"h\":\"9.常用注解\",\"a\":\"_9-常用注解\"},\"1370\":{\"h\":\"@Async 注解\",\"a\":\"async-注解\"},\"1371\":{\"t\":\"对于异步方法调用，从Spring3开始提供了@Async注解，该注解可以被标注在方法上，以便异步地调用该方法。调用者将在调用时立即返回，方法的实际执行将提交给Spring TaskExecutor的任务中，由指定的线程池中的线程执行。\"},\"1372\":{\"t\":\"同步：同步就是整个处理过程顺序执行，当各个过程都执行完毕，并返回结果。\"},\"1373\":{\"t\":\"异步：异步调用则是只是发送了调用的指令，调用者无需等待被调用的方法完全执行完毕；而是继续执行下面的流程。例如， 在某个调用中，需要顺序调用 A, B, C三个过程方法；如他们都是同步调用，则需要将他们都顺序执行完毕之后，方算作过程执行完毕；如B为一个异步的调用方法，则在执行完A之后，调用B，并不等待B完成，而是执行开始调用C，待C执行完毕之后，就意味着这个过程执行完毕了。在Java中，一般在处理类似的场景之时，都是基于创建独立的线程去完成相应的异步调用逻辑，通过主线程和不同的业务子线程之间的执行流程，从而在启动独立的线程之后，主线程继续执行而不会产生停滞等待的情况。\"},\"1374\":{\"t\":\"异步的方法有：\"},\"1375\":{\"t\":\"1、 最简单的异步调用，返回值为void 2、 带参数的异步调用，异步方法可以传入参数 3、 存在返回值，常调用返回Future\"},\"1376\":{\"h\":\"@Async应用默认线程池\",\"a\":\"async应用默认线程池\"},\"1377\":{\"t\":\"Spring应用默认的线程池，指在@Async注解在使用时，不指定线程池的名称。查看源码，@Async的默认线程池为SimpleAsyncTaskExecutor。\"},\"1378\":{\"h\":\"@Async应用自定义线程池\",\"a\":\"async应用自定义线程池\"},\"1379\":{\"t\":\"自定义线程池，可对系统中线程池更加细粒度的控制，方便调整线程池大小配置，线程执行异常控制和处理。\"},\"1380\":{\"t\":\"@Configuration @EnableAsync public class ThreadPoolConfig { @Bean(\\\"taskExecutor\\\") public ThreadPoolTaskExecutor taskExecutor() { ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); // 设置核心线程数 executor.setCorePoolSize(10); // 设置最大线程数 executor.setMaxPoolSize(20); // 设置队列容量 executor.setQueueCapacity(100); // 设置线程名前缀 executor.setThreadNamePrefix(\\\"CrawlTaskExecutor-\\\"); executor.initialize(); return executor; } } @Component @Slf4j public class CrawlTaskConsumer { @Autowired private ThreadPoolCrawler threadPoolCrawler; @Async(\\\"taskExecutor\\\") @KafkaListener(topics = KAFKA_CONSTANTS.KAKFA_CONSTANTS_TOPIC, groupId = KAFKA_CONSTANTS.KAKFA_CONSTANTS_GROUP) public CompletableFuture<CrawlTask> consumeCrawlTask(ConsumerRecord<String, String> record, Consumer consumer) { CrawlTask crawlTask = JSON.parseObject(record.value(), CrawlTask.class); System.out.println(\\\"Received crawl task: \\\" + crawlTask.toString()); threadPoolCrawler.crawl(crawlTask); //手动提交偏移量 consumer.commitAsync(); return CompletableFuture.completedFuture(crawlTask); } } \"},\"1381\":{\"h\":\"10.SpringBoot的启动流程是怎样的？\",\"a\":\"_10-springboot的启动流程是怎样的\"},\"1382\":{\"t\":\"从spring.factories配置文件中加载**EventPublishingRunListener**对象，该对象拥有SimpleApplicationEventMulticaster属性，即在SpringBoot启动过程的不同阶段用来发射内置的生命周期事件;\"},\"1383\":{\"t\":\"准备环境变量，包括系统变量，环境变量，命令行参数，默认变量，servlet相关配置变量，随机值以及配置文件（比如application.properties）等;\"},\"1384\":{\"t\":\"控制台打印SpringBoot的**bannner**标志；\"},\"1385\":{\"t\":\"根据不同类型环境创建不同类型的**applicationcontext**容器，因为这里是servlet环境，所以创建的是AnnotationConfigServletWebServerApplicationContext容器对象；\"},\"1386\":{\"t\":\"从spring.factories配置文件中加载**FailureAnalyzers**对象,用来报告SpringBoot启动过程中的异常；\"},\"1387\":{\"t\":\"为刚创建的容器对象做一些初始化工作，准备一些容器属性值等，对ApplicationContext应用一些相关的后置处理和调用各个ApplicationContextInitializer的初始化方法来执行一些初始化逻辑等；\"},\"1388\":{\"t\":\"刷新容器，这一步至关重要。比如调用bean factory的后置处理器，注册BeanPostProcessor后置处理器，初始化事件广播器且广播事件，初始化剩下的单例bean和SpringBoot创建内嵌的Tomcat服务器等等重要且复杂的逻辑都在这里实现，主要步骤可见代码的注释，关于这里的逻辑会在以后的spring源码分析专题详细分析；\"},\"1389\":{\"t\":\"执行刷新容器后的后置处理逻辑，注意这里为空方法；\"},\"1390\":{\"t\":\"调用**ApplicationRunner**和**CommandLineRunner**的run方法，我们实现这两个接口可以在spring容器启动后需要的一些东西比如加载一些业务数据等;\"},\"1391\":{\"t\":\"报告启动异常，即若启动过程中抛出异常，此时用FailureAnalyzers来报告异常;\"},\"1392\":{\"t\":\"最终返回容器对象，这里调用方法没有声明对象来接收。\"},\"1393\":{\"t\":\"参考：https://blog.csdn.net/yuechuzhixing/article/details/124775218\"},\"1394\":{\"h\":\"11.WebMvcConfigurer\",\"a\":\"_11-webmvcconfigurer\"},\"1395\":{\"t\":\"WebMvcConfigurer配置类其实是Spring内部的一种配置方式，采用JavaBean的形式来代替传统的xml配置文件形式进行针对框架个性化定制，可以自定义一些Handler，Interceptor，ViewResolver，MessageConverter。基于java-based方式的spring mvc配置，需要创建一个配置类并实现**WebMvcConfigurer** 接口；\"},\"1396\":{\"t\":\"在Spring Boot 1.5版本都是靠重写WebMvcConfigurerAdapter的方法来添加自定义拦截器，消息转换器等。SpringBoot 2.0 后，该类被标记为@Deprecated（弃用）。官方推荐直接实现WebMvcConfigurer或者直接继承WebMvcConfigurationSupport，方式一实现WebMvcConfigurer接口（推荐），方式二继承WebMvcConfigurationSupport类。\"},\"1397\":{\"h\":\"常用的方法：\",\"a\":\"常用的方法\"},\"1398\":{\"t\":\" /* 拦截器配置 */ void addInterceptors(InterceptorRegistry var1); /* 视图跳转控制器 */ void addViewControllers(ViewControllerRegistry registry); /** *静态资源处理 **/ void addResourceHandlers(ResourceHandlerRegistry registry); /* 默认静态资源处理器 */ void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer); /** * 这里配置视图解析器 **/ void configureViewResolvers(ViewResolverRegistry registry); /* 配置内容裁决的一些选项*/ void configureContentNegotiation(ContentNegotiationConfigurer configurer); /** 解决跨域问题 **/ public void addCorsMappings(CorsRegistry registry) ; \"},\"1399\":{\"h\":\"addInterceptors：拦截器\",\"a\":\"addinterceptors-拦截器\"},\"1400\":{\"t\":\"addInterceptor：需要一个实现HandlerInterceptor接口的拦截器实例\"},\"1401\":{\"t\":\"addPathPatterns：用于设置拦截器的过滤路径规则；addPathPatterns(\\\"/**\\\")对所有请求都拦截\"},\"1402\":{\"t\":\"excludePathPatterns：用于设置不需要拦截的过滤规则\"},\"1403\":{\"t\":\"拦截器主要用途：进行用户登录状态的拦截，日志的拦截等。\"},\"1404\":{\"h\":\"Kafka\"},\"1405\":{\"t\":\"消息队列是什么？\"},\"1406\":{\"t\":\"消息队列是在消息的传输过程中保存消息的容器，简单点理解就是传递消息的队列，具备先进先出的特点，一般用于异步、解耦、流量削锋等问题，实现高性能、高可用、高扩展的架构。一个消息队列可以被一个或多个消费者消费，一般包含以下元素：\"},\"1407\":{\"t\":\"Producer：消息生产者，负责产生和发送消息到 Broker。 Broker：消息处理中心，负责消息存储、确认、重试等，一般其中会包含多个 Queue。 Consumer：消息消费者，负责从 Broker 中获取消息，并进行相应处理。\"},\"1408\":{\"t\":\"消息队列应用场景\"},\"1409\":{\"t\":\"常见的消息队列使用场景有 6 个：\"},\"1410\":{\"t\":\"应用解耦：消息队列减少了服务之间的耦合性，不同的服务可以通过消息队列进行通信，而不用关心彼此的实现细节。 异步处理：消息队列本身是异步的，它允许接收者在消息发送很长时间后再取回消息。 流量削锋：当上下游系统处理能力存在差距的时候，利用消息队列做一个通用的”载体”，在下游有能力处理的时候，再进行分发与处理。 日志处理：将消息队列用在日志处理中，比如 Kafka 的应用，解决大量日志传输的问题。 消息通讯：消息队列一般都内置了高效的通信机制，因此也可以用在纯消息通讯，比如实现聊天室等。 消息广播：如果没有消息队列，每当一个新业务方接入，都要接入一次新接口。有了消息队列，我们只需要关心消息是否送达了队列，至于谁订阅，是下游的事，无疑极大地减少了开发和联调的工作量。\"},\"1411\":{\"t\":\"比较核心的有 3 个：解耦、异步、削峰，下面着重讲下：\"},\"1412\":{\"t\":\"解耦\"},\"1413\":{\"t\":\"假设在没有消息队列的情况下，现在有上游服务 A 用来发布消息，下游服务 B、C 用来接收服务 A 的消息。但随着业务需要，现在有服务 D、E、F 需要接收服务 A 的消息，那么就出现问题了，每次新加入服务都要改一次代码，可想而知这是极大的工作量。\"},\"1414\":{\"t\":\"如果引入消息队列，那就好办了，只需要下游服务自己订阅消息队列，而无需改动服务 A 的代码。\"},\"1415\":{\"t\":\"异步\"},\"1416\":{\"t\":\"先来看没有消息队列的场景下。\"},\"1417\":{\"t\":\"服务 A 的某个接口接收到请求，分别需要在服务A、服务B、服务C、服务D进行写库。假设用户发起请求到服务 A 耗时 10ms，自己写库需要 50ms，在服务 B 写库需要 250ms，在服务 C 写库需要 300ms，在服务 D 写库需要400ms，在没有消息队列的情况下，也就是同步操作，总耗时会是 10 + 50ms + 250ms + 300ms + 400ms = 1.01s。用户发送个请求，结果感觉有点卡顿，响应的非常慢，任谁都是很难忍受的。 \"},\"1418\":{\"t\":\"如果使用了消息队列，那么服务 A 只需要把对服务A、B、C、D 进行写库的操作分别放进四个消息队列，假如用户发起请求到服务器耗时是10ms，发送消息到四个消息队列的耗时是10ms，那么总耗时就是 20 ms 。用户点击了按钮后立马返回，没有卡顿现象，体验效果就会有极大的提升了。\"},\"1419\":{\"t\":\"一般接口同步处理时间很长，不能通过水平扩容来解决，且业务场景允许异步，就可以使用异步解决，比如文件上传下载受限于用户的网络带宽因素，扩容也无用，以及上述同步操作耗时长等情况，都可以先放进消息队列，等服务再进行拉取消费。\"},\"1420\":{\"t\":\"削峰\"},\"1421\":{\"t\":\"在淘宝双十一活动日，特别是 0 点的秒杀活动高峰期时，接口流量会飙升，远远高于平时，就像一个山峰，没有做好处理的话，在高峰期数据库就可能被流量打死，从而导致整个服务奔溃。如果为了在高峰期能顶住流量而常备高流量设备，会有极大的成本浪费。如果是在要高峰期前进行临时服务扩容，很可能会出现许多扩容问题，没有那么简单。\"},\"1422\":{\"t\":\"使用消息队列的话，就可以将高峰期过多的流量请求放进消息队列，等高峰期过后，服务再慢慢进行处理，就不会出现峰值流量了，而是一个相对平稳的状态。\"},\"1423\":{\"t\":\"举个例子：\"},\"1424\":{\"t\":\"大量的用户在中午高峰期的时候，每秒有 4k 个请求，那么每秒就有 4k 个请求放到 MQ 里。\"},\"1425\":{\"t\":\"服务A 每秒只能处理 2k 个请求，因为 Mysql 每秒最多处理 2k 个请求。\"},\"1426\":{\"t\":\"服务A 就每秒从 MQ 拉取 2k 个请求进行处理，不会超过自己每秒能处理的最大请求量，所以高峰期服务 A 就不会挂掉。\"},\"1427\":{\"t\":\"对于MQ，每秒 4k 个请求进来，但是却只有 2k 个请求出去，导致在高峰期 1h 内可能有几十万的请求积压在 MQ 中。这个短暂的高峰期请求积压是可以接受的，因为过了这个时间点，每秒就 100 个请求进 MQ，但这时服务 A 还是会按照每秒 2k 的速度处理 MQ 积压的请求。\"},\"1428\":{\"t\":\"所以，高峰期一过，服务 A 就会快速的将 MQ 积压的消息处理掉。\"},\"1429\":{\"t\":\"消息队列对比\"},\"1430\":{\"t\":\"消息队列有 ActiveMQ、ZeroMQ、RabbitMQ、RocketMQ、Kafka，其中 ZeroMQ 太过轻量，主要用于学习，实际是不会应用到生产，所以主要对比 Kafka、RocketMQ、RabbitMQ、ActiveMQ 这四种 MQ。\"},\"1431\":{\"t\":\"Kafka 和 RocketMQ 都支持 10w 级别的高吞吐量。\"},\"1432\":{\"t\":\"Kafka 一开始的目的就是用于日志收集和传输，适合有大量数据产生的互联网业务，特别是大数据领域的实时计算、日志采集等场景，用 Kafka 绝对没错，社区活跃度高，业内标准。\"},\"1433\":{\"t\":\"RocketMQ 特别适用于金融互联网领域这类对于可靠性要求很高的场景，比如订单交易等，而且 RocketMQ 是阿里出品的，经历过那么多次淘宝双十一的考验，大品牌，在稳定性值得信赖。但如果阿里不再维护这个技术了，社区有可能突然黄掉的风险。因此如果公司对自己的技术实力有自信，基础架构研发实力较强，推荐用 RocketMQ。\"},\"1434\":{\"t\":\"RabbitMQ 适用于公司对外提供能力，可能会有很多主题接入的中台业务场景，毕竟它是百万级主题数的。它的时效性是毫秒级的，但实际毫秒级和微秒级在感知上没有什么太大的区别，所以它的这一大优点并不太会作为考量标准。同时，它的功能是比较完善的，开源社区活跃度高，能解决开发中遇到的bug，所以万级别数据量业务场景的小公司可以优先选择功能完善的RabbitMQ。它的缺点就是用 Erlang 语言编写，所以很多开发人员很难去看懂源码并进行二次开发和维护，也就是说对于公司来说可能处于不可控的状态。\"},\"1435\":{\"t\":\"ActiveMQ 现在很少有人用，没怎么经过大规模吞吐量场景的考验，社区不怎么活跃，官方社区现在对 ActiveMQ 5.x 维护也越来越少，所以不推荐使用。\"},\"1436\":{\"t\":\"Kafka 核心组件的基础概念：\"},\"1437\":{\"t\":\"1)Producer：即消息生产者，向 Kafka Broker 发消息的客户端。\"},\"1438\":{\"t\":\"2)Consumer：即消息消费者，从 Kafka Broker 读消息的客户端。\"},\"1439\":{\"t\":\"3)Consumer Group：即消费者组，由多个 Consumer 组成。消费者组内每个消费者负责消费不同分区的数据，以提高消费能力。一个分区只能由组内一个消费者消费，不同消费者组之间互不影响。\"},\"1440\":{\"t\":\"4)Broker：一台 Kafka 服务节点就是一个 Broker。一个集群是由1个或者多个 Broker 组成的，且一个 Broker 可以容纳多个 Topic。\"},\"1441\":{\"t\":\"5)Topic：一个逻辑上的概念，Topic 将消息分类，生产者和消费者面向的都是同一个 Topic, 同一个 Topic 下的 Partition 的消息内容是不相同的。\"},\"1442\":{\"t\":\"6)Partition：为了实现 Topic 扩展性，提高并发能力，一个非常大的 Topic 可以分布到多个 Broker 上，一个 Topic 可以分为多个 Partition 进行存储，且每个 Partition 是消息内容是有序的。\"},\"1443\":{\"t\":\"7)Replica：即副本，为实现数据备份的功能，保证集群中的某个节点发生故障时，该节点上的 Partition 数据不丢失，且 Kafka 仍然能够继续工作，为此 Kafka 提供了副本机制，一个 Topic 的每个 Partition 都有若干个副本，一个 Leader 副本和若干个 Follower 副本。\"},\"1444\":{\"t\":\"8)Leader：即每个分区多个副本的主副本，生产者发送数据的对象，以及消费者消费数据的对象，都是 Leader。\"},\"1445\":{\"t\":\"9)Follower：即每个分区多个副本的从副本，会实时从 Leader 副本中同步数据，并保持和 Leader 数据的同步。Leader 发生故障时，某个 Follower 还会被选举并成为新的 Leader , 且不能跟 Leader 在同一个 Broker 上, 防止崩溃数据可恢复。\"},\"1446\":{\"t\":\"10)Offset：消费者消费的位置信息，监控数据消费到什么位置，当消费者挂掉再重新恢复的时候，可以从消费位置继续消费。\"},\"1447\":{\"h\":\"1.数据保存的策略\",\"a\":\"_1-数据保存的策略\"},\"1448\":{\"t\":\"kafka 有两种数据保存策略:\"},\"1449\":{\"t\":\"按照过期时间保留\"},\"1450\":{\"t\":\"按照存储的消息大小保留\"},\"1451\":{\"t\":\"Kafka Broker默认的消息保留策略是：要么保留一定时间，要么保留到消息达到一定大小的字节数。\"},\"1452\":{\"t\":\"当消息达到设置的条件上限时，旧消息就会过期并被删除，所以，在任何时刻，可用消息的总量都不会超过配置参数所指定的大小。\"},\"1453\":{\"t\":\"topic可以配置自己的保留策略，可以将消息保留到不再使用他们为止。\"},\"1454\":{\"t\":\"因为在一个大文件里查找和删除消息是很费时的事，也容易出错，所以，分区被划分为若干个片段。默认情况下，每个片段包含1G或者一周的数据，以较小的那个为准。在broker往leader分区写入消息时，如果达到片段上限，就关闭当前文件，并打开一个新文件。当前正在写入数据的片段叫活跃片段。当所有片段都被写满时，会清除下一个分区片段的数据，如果配置的是7个片段，每天打开一个新片段，就会删除一个最老的片段，循环使用所有片段。\"},\"1455\":{\"t\":\"kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？ 这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。\"},\"1456\":{\"h\":\"2.分区策略\",\"a\":\"_2-分区策略\"},\"1457\":{\"h\":\"2.1生产者：\",\"a\":\"_2-1生产者\"},\"1458\":{\"t\":\"为什么要分区？\"},\"1459\":{\"t\":\"多Partition分布式存储，利于集群数据的均衡。\"},\"1460\":{\"t\":\"并发读写，加快读写速度。\"},\"1461\":{\"t\":\"加快数据恢复的速率：当某台机器挂了，每个Topic仅需恢复一部分的数据，多机器并发。\"},\"1462\":{\"t\":\"分区的原则\"},\"1463\":{\"t\":\"指明partition的情况下，使用指定的partition；\"},\"1464\":{\"t\":\"没有指明partition，但是有key的情况下，将key的hash值与topic的partition数进行取余得到partition值；\"},\"1465\":{\"t\":\"既没有指定partition，也没有key的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与topic可用的partition数取余得到partition值，也就是常说的round-robin算法。\"},\"1466\":{\"t\":\"public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) { List<PartitionInfo> partitions = cluster.partitionsForTopic(topic); int numPartitions = partitions.size(); if (keyBytes == null) { //key为空时，获取一个自增的计数，然后对分区做取模得到分区编号 int nextValue = nextValue(topic); List<PartitionInfo> availablePartitions = cluster.availablePartitionsForTopic(topic); if (availablePartitions.size() > 0) { int part = Utils.toPositive(nextValue) % availablePartitions.size(); return availablePartitions.get(part).partition(); } else { // no partitions are available, give a non-available partition return Utils.toPositive(nextValue) % numPartitions; } } else { // hash the keyBytes to choose a partition // key不为空时，通过key的hash对分区取模（疑问：为什么这里不像上面那样，使用availablePartitions呢？） // 根据《Kafka权威指南》Page45理解：为了保证相同的键，总是能路由到固定的分区，如果使用可用分区，那么因为分区数变化，会导致相同的key，路由到不同分区 // 所以如果要使用key来映射分区，最好在创建主题的时候就把分区规划好 return Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions; } } private int nextValue(String topic) { //为每个topic维护了一个AtomicInteger对象，每次获取时+1 AtomicInteger counter = topicCounterMap.get(topic); if (null == counter) { counter = new AtomicInteger(ThreadLocalRandom.current().nextInt()); AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter); if (currentCounter != null) { counter = currentCounter; } } return counter.getAndIncrement(); } \"},\"1467\":{\"h\":\"2.2消费者：\",\"a\":\"_2-2消费者\"},\"1468\":{\"t\":\"分区分配策略\"},\"1469\":{\"t\":\"一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及到partition的分配问题，即确定哪个partition由哪个consumer来消费。Kafka提供了3种消费者分区分配策略：RangeAssigor、RoundRobinAssignor、StickyAssignor。\"},\"1470\":{\"t\":\"PartitionAssignor接口用于用户定义实现分区分配算法，以实现Consumer之间的分区分配。消费组的成员订阅它们感兴趣的Topic并将这种订阅关系传递给作为订阅组协调者的Broker。协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者。Kafka默认采用RangeAssignor的分配算法。\"},\"1471\":{\"t\":\"RangeAssignor\"},\"1472\":{\"t\":\"RangeAssignor对每个Topic进行独立的分区分配。对于每一个Topic，首先对分区按照分区ID进行排序，然后订阅这个Topic的消费组的消费者再进行排序，之后尽量均衡的将分区分配给消费者。这里只能是尽量均衡，因为分区数可能无法被消费者数量整除，那么有一些消费者就会多分配到一些分区。分配示意图如下：\"},\"1473\":{\"t\":\"分区分配的算法如下：\"},\"1474\":{\"t\":\"@Override public Map<String, List<TopicPartition>> assign(Map<String, Integer> partitionsPerTopic, Map<String, Subscription> subscriptions) { Map<String, List<String>> consumersPerTopic = consumersPerTopic(subscriptions); Map<String, List<TopicPartition>> assignment = new HashMap<>(); for (String memberId : subscriptions.keySet()) assignment.put(memberId, new ArrayList<TopicPartition>()); //for循环对订阅的多个topic分别进行处理 for (Map.Entry<String, List<String>> topicEntry : consumersPerTopic.entrySet()) { String topic = topicEntry.getKey(); List<String> consumersForTopic = topicEntry.getValue(); Integer numPartitionsForTopic = partitionsPerTopic.get(topic); if (numPartitionsForTopic == null) continue; //对消费者进行排序 Collections.sort(consumersForTopic); //计算平均每个消费者分配的分区数 int numPartitionsPerConsumer = numPartitionsForTopic / consumersForTopic.size(); //计算平均分配后多出的分区数 int consumersWithExtraPartition = numPartitionsForTopic % consumersForTopic.size(); List<TopicPartition> partitions = AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic); for (int i = 0, n = consumersForTopic.size(); i < n; i++) { //计算第i个消费者，分配分区的起始位置 int start = numPartitionsPerConsumer * i + Math.min(i, consumersWithExtraPartition); //计算第i个消费者，分配到的分区数量 int length = numPartitionsPerConsumer + (i + 1 > consumersWithExtraPartition ? 0 : 1); assignment.get(consumersForTopic.get(i)).addAll(partitions.subList(start, start + length)); } } return assignment; } \"},\"1475\":{\"t\":\"这种分配方式明显的一个问题是随着消费者订阅的Topic的数量的增加，不均衡的问题会越来越严重，比如上图中4个分区3个消费者的场景，C0会多分配一个分区。如果此时再订阅一个分区数为4的Topic，那么C0又会比C1、C2多分配一个分区，这样C0总共就比C1、C2多分配两个分区了，而且随着Topic的增加，这个情况会越来越严重。分配结果：\"},\"1476\":{\"t\":\"订阅2个Topic，每个Topic4个分区，共3个Consumer\"},\"1477\":{\"t\":\"C0：[T0P0，T0P1，T1P0，T1P1]\"},\"1478\":{\"t\":\"C1：[T0P2，T1P2]\"},\"1479\":{\"t\":\"C2：[T0P3，T1P3]\"},\"1480\":{\"t\":\"RoundRobinAssignor\"},\"1481\":{\"t\":\"RoundRobinAssignor的分配策略是将消费组内订阅的所有Topic的分区及所有消费者进行排序后尽量均衡的分配（RangeAssignor是针对单个Topic的分区进行排序分配的）。如果消费组内，消费者订阅的Topic列表是相同的（每个消费者都订阅了相同的Topic），那么分配结果是尽量均衡的（消费者之间分配到的分区数的差值不会超过1）。如果订阅的Topic列表是不同的，那么分配结果是不保证“尽量均衡”的，因为某些消费者不参与一些Topic的分配。\"},\"1482\":{\"t\":\"以上两个topic的情况，相比于之前RangeAssignor的分配策略，可以使分区分配的更均衡。不过考虑这种情况，假设有三个消费者分别为C0、C1、C2，有3个Topic T0、T1、T2，分别拥有1、2、3个分区，并且C0订阅T0，C1订阅T0和T1，C2订阅T0、T1、T2，那么RoundRobinAssignor的分配结果如下：\"},\"1483\":{\"t\":\"看上去分配已经尽量的保证均衡了，不过可以发现C2承担了4个分区的消费而C1订阅了T1，是不是把T1的P1交给C1消费能更加的均衡呢？\"},\"1484\":{\"t\":\"StickyAssignor\"},\"1485\":{\"t\":\"StickyAssignor分区分配算法，目的是在执行一次新的分配时，能在上一次分配的结果的基础上，尽量少的调整分区分配的变动，节省因分区分配变化带来的开销。Sticky是“粘性的”，可以理解为分配结果是带“粘性的”——每一次分配变更相对上一次分配做最少的变动。其目标有两点：\"},\"1486\":{\"t\":\"分区的分配尽量的均衡。\"},\"1487\":{\"t\":\"每一次重分配的结果尽量与上一次分配结果保持一致。\"},\"1488\":{\"t\":\"当这两个目标发生冲突时，优先保证第一个目标。第一个目标是每个分配算法都尽量尝试去完成的，而第二个目标才真正体现出StickyAssignor特性的。\"},\"1489\":{\"t\":\"StickyAssignor算法比较复杂，下面举例来说明分配的效果（对比RoundRobinAssignor），前提条件：\"},\"1490\":{\"t\":\"有4个Topic：T0、T1、T2、T3，每个Topic有2个分区。\"},\"1491\":{\"t\":\"有3个Consumer：C0、C1、C2，所有Consumer都订阅了这4个分区。\"},\"1492\":{\"t\":\"上面红色的箭头代表的是有变动的分区分配，可以看出，StickyAssignor的分配策略，变动较小。\"},\"1493\":{\"t\":\"参考：https://blog.csdn.net/easylife206/article/details/124580641?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-124580641-blog-124349832.235^v28^pc_relevant_t0_download&spm=1001.2101.3001.4242.3&utm_relevant_index=7\"},\"1494\":{\"h\":\"3.kafka如何保证消息不被重复消费\",\"a\":\"_3-kafka如何保证消息不被重复消费\"},\"1495\":{\"h\":\"3.1原因\",\"a\":\"_3-1原因\"},\"1496\":{\"t\":\"（1）kafka有个offset的概念，当每个消息被写进去后，都有一个offset，代表他的序号，然后consumer消费该数据之后，隔一段时间，会把自己消费过的消息的offset提交一下，代表我已经消费过了。下次我要是重启，就会继续从上次消费到的offset来继续消费。但是当我们直接kill进程了，再重启。这会导致consumer有些消息处理了，但是没来得及提交offset。等重启之后，少数消息就会再次消费一次 （2）在Kafka中有一个Partition Balance机制，就是把多个Partition均衡的分配给多个消费者。消费端会从分配到的Partition里面去消费消息，如果消费者在默认的5分钟内没有处理完这一批消息。就会触发Kafka的Rebalance机制，从而导致offset自动提交失败。而Rebalance之后，消费者还是会从之前没提交的offset位置开始消费，从而导致消息重复消费。\"},\"1497\":{\"h\":\"3.2解决方案\",\"a\":\"_3-2解决方案\"},\"1498\":{\"t\":\"开启kafka本身存在的幂等性：\"},\"1499\":{\"t\":\"acks=all和enable.idempotence=true来保证幂等性,这样 Producer 在重试发送消息时,Broker端就可以过滤重复消息。\"},\"1500\":{\"t\":\"注： 添加唯一ID，类似于数据库的主键，用于唯一标记一个消息。\"},\"1501\":{\"h\":\"4.如何保证消息的顺序性?\",\"a\":\"_4-如何保证消息的顺序性\"},\"1502\":{\"h\":\"4.1为什么要保证顺序？\",\"a\":\"_4-1为什么要保证顺序\"},\"1503\":{\"t\":\"消息队列中的若干消息如果是对同一个数据进行操作, 这些操作具有前后关系, 必须要按前后的顺序执行, 否则就会造成数据异常。\"},\"1504\":{\"h\":\"4.2出现顺序错乱的场景：\",\"a\":\"_4-2出现顺序错乱的场景\"},\"1505\":{\"t\":\"第一种情况: 一个queue, 有多个consumer去消费, 这样就会造成顺序的错误, consumer从MQ里面读取数据是有序的, 但是每个consumer的执行时间是不固定的, 无法保证先读到消息的consumer一定先完成操作, 这样就会出现消息并没有按照顺序执行, 造成数据顺序错误。\"},\"1506\":{\"t\":\"第二种情况:\"},\"1507\":{\"t\":\"一个queue对应一个consumer, 但是consumer里面进行了多线程消费, 这样也会造成消息消费顺序错误。\"},\"1508\":{\"h\":\"4.3如何保证消息的消费顺序？\",\"a\":\"_4-3如何保证消息的消费顺序\"},\"1509\":{\"t\":\"第一种方案: 拆分多个queue, 每一个queue一个consumer\"},\"1510\":{\"t\":\"第二种方案: 一个queue对应一个consumer\"},\"1511\":{\"t\":\"参考：https://blog.csdn.net/qq_44901983/article/details/123416498\"},\"1512\":{\"h\":\"5.生产者有哪些发消息的模式?\",\"a\":\"_5-生产者有哪些发消息的模式\"},\"1513\":{\"t\":\"发后即忘发送模式\"},\"1514\":{\"t\":\"发后即忘模式「fire-and-forget」，它只管发送消息，并不需要关心消息是否发送成功。其本质上也是一种异步发送的方式，消息先存储在缓冲区中，达到设定条件后再批量进行发送。这是 kafka 吞吐量最高的方式，但同时也是消息最不可靠的方式，因为对于发送失败的消息并没有做任何处理，某些异常情况下会导致消息丢失。\"},\"1515\":{\"t\":\"ProducerRecord<k,v> record = new ProducerRecord<k,v>(\\\"this-topic\\\", key, value); try { //fire-and-forget 模式 producer.send(record); } catch (Exception e) { e.printStackTrace(); } \"},\"1516\":{\"t\":\"同步发送模式\"},\"1517\":{\"t\":\"同步发送模式 「sync」，调用 send() 方法会返回一个 Future 对象，再通过调用 Future 对象的 get() 方法，等待结果返回，根据返回的结果可以判断消息是否发送成功， 由于是同步发送会阻塞，只有当消息通过 get() 返回数据时，才会继续下一条消息的发送。\"},\"1518\":{\"t\":\"Properties props = new Properties(); props.put(\\\"bootstrap.servers\\\", \\\"broker1:9092,broker2:9092\\\"); Producer<String, String> producer = new KafkaProducer<>(props); ProducerRecord<String, String> record = new ProducerRecord<>(\\\"my-topic\\\", \\\"my-message\\\"); try { RecordMetadata metadata = producer.send(record).get(); // 同步发送 // 收到消息响应后处理结果 System.out.println(metadata.topic()+\\\":\\\"+metadata.partition()+\\\":\\\"+metadata.offset()); } catch (Exception e) { // 处理发送失败 System.out.println(\\\"Error sending message\\\"); } \"},\"1519\":{\"t\":\"异步发送模式\"},\"1520\":{\"t\":\"异步发送模式「async」，在调用 send() 方法的时候指定一个 callback 函数，当 Broker 接收到返回的时候，该 callback 函数会被触发执行，通过回调函数能够对异常情况进行处理，当调用了回调函数时，只有回调函数执行完毕生产者才会结束，否则一直会阻塞。\"},\"1521\":{\"t\":\"producer.send(record, new Callback() { public void onCompletion(RecordMetadata metadata, Exception exception) { if(exception != null) { // 消息发送失败处理 } else { // 消息发送成功,在callback中处理 } } }); // 发送端不需要等待callback返回 \"},\"1522\":{\"t\":\"参考：https://ost.51cto.com/posts/11148\"},\"1523\":{\"h\":\"6.kafka高可用设计\",\"a\":\"_6-kafka高可用设计\"},\"1524\":{\"h\":\"6.1集群\",\"a\":\"_6-1集群\"},\"1525\":{\"t\":\"Kafka 的服务器端由被称为 Broker 的服务进程构成，即一个 Kafka 集群由多个 Broker 组成\"},\"1526\":{\"t\":\"这样如果集群中某一台机器宕机，其他机器上的 Broker 也依然能够对外提供服务。这其实就是 Kafka 提供高可用的手段之一\"},\"1527\":{\"h\":\"6.2备份机制(Replication）\",\"a\":\"_6-2备份机制-replication\"},\"1528\":{\"t\":\"Kafka 中消息的备份又叫做 副本（Replica）\"},\"1529\":{\"t\":\"Kafka 定义了两类副本：\"},\"1530\":{\"t\":\"领导者副本（Leader Replica）\"},\"1531\":{\"t\":\"追随者副本（Follower Replica）\"},\"1532\":{\"t\":\"同步方式\"},\"1533\":{\"t\":\"ISR（in-sync replica）需要同步复制保存的follower\"},\"1534\":{\"t\":\"如果leader失效后，需要选出新的leader，选举的原则如下：\"},\"1535\":{\"t\":\"第一：选举时优先从ISR中选定，因为这个列表中follower的数据是与leader同步的\"},\"1536\":{\"t\":\"第二：如果ISR列表中的follower都不行了，就只能从其他follower中选取\"},\"1537\":{\"t\":\"极端情况，就是所有副本都失效了，这时有两种方案\"},\"1538\":{\"t\":\"第一：等待ISR中的一个活过来，选为Leader，数据可靠，但活过来的时间不确定\"},\"1539\":{\"t\":\"第二：选择第一个活过来的Replication，不一定是ISR中的，选为leader，以最快速度恢复可用性，但数据不一定完整\"},\"1540\":{\"h\":\"7.kafka生产者详解\",\"a\":\"_7-kafka生产者详解\"},\"1541\":{\"h\":\"7.1发送类型\",\"a\":\"_7-1发送类型\"},\"1542\":{\"t\":\"同步发送\"},\"1543\":{\"t\":\"使用send()方法发送，它会返回一个Future对象，调用get()方法进行等待，就可以知道消息是否发送成功\"},\"1544\":{\"t\":\"RecordMetadata recordMetadata = producer.send(kvProducerRecord).get(); System.out.println(recordMetadata.offset()); \"},\"1545\":{\"t\":\"异步发送\"},\"1546\":{\"t\":\"调用send()方法，并指定一个回调函数，服务器在返回响应时调用函数\"},\"1547\":{\"t\":\"//异步消息发送 producer.send(kvProducerRecord, new Callback() { @Override public void onCompletion(RecordMetadata recordMetadata, Exception e) { if(e != null){ System.out.println(\\\"记录异常信息到日志表中\\\"); } System.out.println(recordMetadata.offset()); } }); \"},\"1548\":{\"h\":\"7.2参数详解\",\"a\":\"_7-2参数详解\"},\"1549\":{\"t\":\"ack\"},\"1550\":{\"t\":\"代码的配置方式：\"},\"1551\":{\"t\":\"//ack配置 消息确认机制 prop.put(ProducerConfig.ACKS_CONFIG,\\\"all\\\"); \"},\"1552\":{\"t\":\"参数的选择说明\"},\"1553\":{\"t\":\"确认机制\"},\"1554\":{\"t\":\"说明\"},\"1555\":{\"t\":\"acks=0\"},\"1556\":{\"t\":\"生产者在成功写入消息之前不会等待任何来自服务器的响应,消息有丢失的风险，但是速度最快\"},\"1557\":{\"t\":\"acks=1（默认值）\"},\"1558\":{\"t\":\"只要集群首领节点收到消息，生产者就会收到一个来自服务器的成功响应\"},\"1559\":{\"t\":\"acks=all\"},\"1560\":{\"t\":\"只有当所有参与赋值的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应\"},\"1561\":{\"t\":\"retries\"},\"1562\":{\"t\":\"生产者从服务器收到的错误有可能是临时性错误，在这种情况下，retries参数的值决定了生产者可以重发消息的次数，如果达到这个次数，生产者会放弃重试返回错误，默认情况下，生产者会在每次重试之间等待100ms\"},\"1563\":{\"t\":\"代码中配置方式：\"},\"1564\":{\"t\":\"//重试次数 prop.put(ProducerConfig.RETRIES_CONFIG,10); \"},\"1565\":{\"t\":\"消息压缩\"},\"1566\":{\"t\":\"默认情况下， 消息发送时不会被压缩。\"},\"1567\":{\"t\":\"代码中配置方式：\"},\"1568\":{\"t\":\"//数据压缩 prop.put(ProducerConfig.COMPRESSION_TYPE_CONFIG,\\\"lz4\\\"); \"},\"1569\":{\"t\":\"压缩算法\"},\"1570\":{\"t\":\"说明\"},\"1571\":{\"t\":\"snappy\"},\"1572\":{\"t\":\"占用较少的 CPU， 却能提供较好的性能和相当可观的压缩比， 如果看重性能和网络带宽，建议采用\"},\"1573\":{\"t\":\"lz4\"},\"1574\":{\"t\":\"占用较少的 CPU， 压缩和解压缩速度较快，压缩比也很客观\"},\"1575\":{\"t\":\"gzip\"},\"1576\":{\"t\":\"占用较多的 CPU，但会提供更高的压缩比，网络带宽有限，可以使用这种算法\"},\"1577\":{\"t\":\"使用压缩可以降低网络传输开销和存储开销，而这往往是向 Kafka 发送消息的瓶颈所在。\"},\"1578\":{\"h\":\"8.kafka消费者详解\",\"a\":\"_8-kafka消费者详解\"},\"1579\":{\"h\":\"8.1消费者组\",\"a\":\"_8-1消费者组\"},\"1580\":{\"t\":\"消费者组（Consumer Group） ：指的就是由一个或多个消费者组成的群体\"},\"1581\":{\"t\":\"一个发布在Topic上消息被分发给此消费者组中的一个消费者\"},\"1582\":{\"t\":\"所有的消费者都在一个组中，那么这就变成了queue模型\"},\"1583\":{\"t\":\"所有的消费者都在不同的组中，那么就完全变成了发布-订阅模型\"},\"1584\":{\"h\":\"8.2消息有序性\",\"a\":\"_8-2消息有序性\"},\"1585\":{\"t\":\"应用场景：\"},\"1586\":{\"t\":\"即时消息中的单对单聊天和群聊，保证发送方消息发送顺序与接收方的顺序一致\"},\"1587\":{\"t\":\"充值转账两个渠道在同一个时间进行余额变更，短信通知必须要有顺序\"},\"1588\":{\"t\":\"topic分区中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证Topic的一个分区顺序处理，不能保证跨分区的消息先后处理顺序。 所以，如果你想要顺序的处理Topic的所有消息，那就只提供一个分区。\"},\"1589\":{\"h\":\"8.3提交和偏移量\",\"a\":\"_8-3提交和偏移量\"},\"1590\":{\"t\":\"kafka不会像其他JMS队列那样需要得到消费者的确认，消费者可以使用kafka来追踪消息在分区的位置（偏移量）\"},\"1591\":{\"t\":\"消费者会往一个叫做_consumer_offset的特殊主题发送消息，消息里包含了每个分区的偏移量。如果消费者发生崩溃或有新的消费者加入群组，就会触发再均衡\"},\"1592\":{\"t\":\"正常的情况\"},\"1593\":{\"t\":\"如果消费者2挂掉以后，会发生再均衡，消费者2负责的分区会被其他消费者进行消费\"},\"1594\":{\"t\":\"再均衡后不可避免会出现一些问题\"},\"1595\":{\"t\":\"问题一：\"},\"1596\":{\"t\":\"如果提交偏移量小于客户端处理的最后一个消息的偏移量，那么处于两个偏移量之间的消息就会被重复处理。\"},\"1597\":{\"t\":\"问题二：\"},\"1598\":{\"t\":\"如果提交的偏移量大于客户端的最后一个消息的偏移量，那么处于两个偏移量之间的消息将会丢失。\"},\"1599\":{\"t\":\"如果想要解决这些问题，还要知道目前kafka提交偏移量的方式：\"},\"1600\":{\"t\":\"提交偏移量的方式有两种，分别是自动提交偏移量和手动提交\"},\"1601\":{\"t\":\"自动提交偏移量\"},\"1602\":{\"t\":\"当enable.auto.commit被设置为true，提交方式就是让消费者自动提交偏移量，每隔5秒消费者会自动把从poll()方法接收的最大偏移量提交上去\"},\"1603\":{\"t\":\"手动提交 ，当enable.auto.commit被设置为false可以有以下三种提交方式\"},\"1604\":{\"t\":\"提交当前偏移量（同步提交）\"},\"1605\":{\"t\":\"异步提交\"},\"1606\":{\"t\":\"同步和异步组合提交\"},\"1607\":{\"t\":\"1.提交当前偏移量（同步提交）\"},\"1608\":{\"t\":\"把enable.auto.commit设置为false,让应用程序决定何时提交偏移量。使用commitSync()提交偏移量，commitSync()将会提交poll返回的最新的偏移量，所以在处理完所有记录后要确保调用了commitSync()方法。否则还是会有消息丢失的风险。\"},\"1609\":{\"t\":\"只要没有发生不可恢复的错误，commitSync()方法会一直尝试直至提交成功，如果提交失败也可以记录到错误日志里。\"},\"1610\":{\"t\":\"while (true){ ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord<String, String> record : records) { System.out.println(record.value()); System.out.println(record.key()); try { consumer.commitSync();//同步提交当前最新的偏移量 }catch (CommitFailedException e){ System.out.println(\\\"记录提交失败的异常：\\\"+e); } } } \"},\"1611\":{\"t\":\"2.异步提交\"},\"1612\":{\"t\":\"手动提交有一个缺点，那就是当发起提交调用时应用会阻塞。当然我们可以减少手动提交的频率，但这个会增加消息重复的概率（和自动提交一样）。另外一个解决办法是，使用异步提交的API。\"},\"1613\":{\"t\":\"while (true){ ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord<String, String> record : records) { System.out.println(record.value()); System.out.println(record.key()); } consumer.commitAsync(new OffsetCommitCallback() { @Override public void onComplete(Map<TopicPartition, OffsetAndMetadata> map, Exception e) { if(e!=null){ System.out.println(\\\"记录错误的提交偏移量：\\\"+ map+\\\",异常信息\\\"+e); } } }); } \"},\"1614\":{\"t\":\"3.同步和异步组合提交\"},\"1615\":{\"t\":\"异步提交也有个缺点，那就是如果服务器返回提交失败，异步提交不会进行重试。相比较起来，同步提交会进行重试直到成功或者最后抛出异常给应用。异步提交没有实现重试是因为，如果同时存在多个异步提交，进行重试可能会导致位移覆盖。\"},\"1616\":{\"t\":\"举个例子，假如我们发起了一个异步提交commitA，此时的提交位移为2000，随后又发起了一个异步提交commitB且位移为3000；commitA提交失败但commitB提交成功，此时commitA进行重试并成功的话，会将实际上将已经提交的位移从3000回滚到2000，导致消息重复消费。\"},\"1617\":{\"t\":\"try { while (true){ ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord<String, String> record : records) { System.out.println(record.value()); System.out.println(record.key()); } consumer.commitAsync(); } }catch (Exception e){+ e.printStackTrace(); System.out.println(\\\"记录错误信息：\\\"+e); }finally { try { consumer.commitSync(); }finally { consumer.close(); } } \"},\"1618\":{\"h\":\"2.内存管理\"},\"1619\":{\"h\":\"1.局部性原理\",\"a\":\"_1-局部性原理\"},\"1620\":{\"t\":\"在了解这部分知识之前，我要先告诉大家一个常见的局部性原理：\"},\"1621\":{\"t\":\"相关信息\"},\"1622\":{\"t\":\"程序局部性原理表现为：时间局部性和空间局部性。时间局部性是指如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某块数据被访问，则不久之后该数据可能再次被访问。空间局部性是指一旦程序访问了某个存储单元，则不久之后，其附近的存储单元也将被访问。\"},\"1623\":{\"t\":\"说白了就是一个变量在程序运行过程中，如果被引用过一次，那后续很有可能会再被引用到；一个变量被访问到过后，这个变量所在的位置附近的位置很有可能在程序后续运行中被访问到。\"},\"1624\":{\"t\":\"下面我们通过一段代码来看看局部性原理：\"},\"1625\":{\"t\":\"public int sum(int[] array) { int sum = 0; for (int i = 0; i < array.length; i++) { sum = sum + array[i]; } return sum; } \"},\"1626\":{\"t\":\"从上面的这段代码来看，就是一个很简单的数组元素求和，这里我们主要看 sum 和 array 两个变量，我们可以看到 sum 在每次循环中都会用到，另外它只是一个简单变量，所以我们可以看到，sum 是符合我们上面提到的时间局部性，再访问一次后还会被继续访问到，但是它不存在我们所说的空间局部性了。\"},\"1627\":{\"t\":\"相反的，array 数组中的每个元素只访问一次，另外数组底层的存储是连续的，所以 array 变量符合我们上面提到的空间局部性，但是不符合时间局部性。\"},\"1628\":{\"h\":\"2.为什么需要虚拟内存？\",\"a\":\"_2-为什么需要虚拟内存\"},\"1629\":{\"t\":\"操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。\"},\"1630\":{\"t\":\"如果程序要访问虚拟地址的时候，由操作系统转换成不同的物理地址，这样不同的进程运行的时候，写入的是不同的物理地址，这样就不会冲突了。\"},\"1631\":{\"t\":\"于是，这里就引出了两种地址的概念：\"},\"1632\":{\"t\":\"我们程序所使用的内存地址叫做虚拟内存地址（Virtual Memory Address）\"},\"1633\":{\"t\":\"实际存在硬件里面的空间地址叫物理内存地址（Physical Memory Address）。\"},\"1634\":{\"t\":\"操作系统引入了虚拟内存，进程持有的虚拟地址会通过 CPU 芯片中的内存管理单元（MMU）的映射关系，来转换变成物理地址，然后再通过物理地址访问内存。\"},\"1635\":{\"t\":\"虚拟内存有什么作用？\"},\"1636\":{\"t\":\"第一，虚拟内存可以使得进程对运行内存超过物理内存大小，因为程序运行符合局部性原理，CPU 访问内存会有很明显的重复访问的倾向性，对于那些没有被经常使用到的内存，我们可以把它换出到物理内存之外，比如硬盘上的 swap 区域。\"},\"1637\":{\"t\":\"第二，由于每个进程都有自己的页表，所以每个进程的虚拟内存空间就是相互独立的。进程也没有办法访问其他进程的页表，所以这些页表是私有的，这就解决了多进程之间地址冲突的问题。\"},\"1638\":{\"t\":\"第三，页表里的页表项中除了物理地址之外，还有一些标记属性的比特，比如控制一个页的读写权限，标记该页是否存在等。在内存访问方面，操作系统提供了更好的安全性。\"},\"1639\":{\"h\":\"3.内存分段\",\"a\":\"_3-内存分段\"},\"1640\":{\"t\":\"程序是由若干个逻辑分段组成的，如可由代码分段、数据分段、栈段、堆段组成。不同的段是有不同的属性的，所以就用分段（*Segmentation*）的形式把这些段分离出来。\"},\"1641\":{\"t\":\"分段机制下，虚拟地址和物理地址是如何映射的？\"},\"1642\":{\"t\":\"分段机制下的虚拟地址由两部分组成，段选择因子和段内偏移量。\"},\"1643\":{\"t\":\"段选择因子和段内偏移量：\"},\"1644\":{\"t\":\"段选择子就保存在段寄存器里面。段选择子里面最重要的是段号，用作段表的索引。段表里面保存的是这个段的基地址、段的界限和特权等级等。\"},\"1645\":{\"t\":\"虚拟地址中的段内偏移量应该位于 0 和段界限之间，如果段内偏移量是合法的，就将段基地址加上段内偏移量得到物理内存地址。\"},\"1646\":{\"t\":\"分段的办法很好，解决了程序本身不需要关心具体的物理内存地址的问题，但它也有一些不足之处：\"},\"1647\":{\"t\":\"第一个就是内存碎片的问题。\"},\"1648\":{\"t\":\"第二个就是内存交换的效率低的问题。\"},\"1649\":{\"t\":\"内存碎片主要分为，内部内存碎片和外部内存碎片。\"},\"1650\":{\"t\":\"内存分段管理可以做到段根据实际需求分配内存，所以有多少需求就分配多大的段，所以不会出现内部内存碎片。\"},\"1651\":{\"t\":\"但是由于每个段的长度不固定，所以多个段未必能恰好使用所有的内存空间，会产生了多个不连续的小物理内存，导致新的程序无法被装载，所以会出现外部内存碎片的问题。\"},\"1652\":{\"t\":\"解决「外部内存碎片」的问题就是内存交换。\"},\"1653\":{\"h\":\"4.内存分页\",\"a\":\"_4-内存分页\"},\"1654\":{\"t\":\"分段的好处就是能产生连续的内存空间，但是会出现「外部内存碎片和内存交换的空间太大」的问题。\"},\"1655\":{\"t\":\"要解决这些问题，那么就要想出能少出现一些内存碎片的办法。另外，当需要进行内存交换的时候，让需要交换写入或者从磁盘装载的数据更少一点，这样就可以解决问题了。这个办法，也就是内存分页（Paging）。\"},\"1656\":{\"t\":\"分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小。这样一个连续并且尺寸固定的内存空间，我们叫页（Page）。在 Linux 下，每一页的大小为 4KB。\"},\"1657\":{\"t\":\"分页是怎么解决分段的「外部内存碎片和内存交换效率低」的问题？\"},\"1658\":{\"t\":\"内存分页由于内存空间都是预先划分好的，也就不会像内存分段一样，在段与段之间会产生间隙非常小的内存，这正是分段会产生外部内存碎片的原因。而采用了分页，页与页之间是紧密排列的，所以不会有外部碎片。\"},\"1659\":{\"t\":\"但是，因为内存分页机制分配内存的最小单位是一页，即使程序不足一页大小，我们最少只能分配一个页，所以页内会出现内存浪费，所以针对内存分页机制会有内部内存碎片的现象。\"},\"1660\":{\"t\":\"分页机制下，虚拟地址和物理地址是如何映射的？\"},\"1661\":{\"t\":\"在分页机制下，虚拟地址分为两部分，页号和页内偏移。页号作为页表的索引，页表包含物理页每页所在物理内存的基地址，这个基地址与页内偏移的组合就形成了物理内存地址。\"},\"1662\":{\"h\":\"4.1多级页表\",\"a\":\"_4-1多级页表\"},\"1663\":{\"t\":\"在前面我们知道了，对于单页表的实现方式，在 32 位和页大小 4KB 的环境下，一个进程的页表需要装下 100 多万个「页表项」，并且每个页表项是占用 4 字节大小的，于是相当于每个页表需占用 4MB 大小的空间。\"},\"1664\":{\"t\":\"我们把这个 100 多万个「页表项」的单级页表再分页，将页表（一级页表）分为 1024 个页表（二级页表），每个表（二级页表）中包含 1024 个「页表项」，形成二级分页。\"},\"1665\":{\"t\":\"对于 64 位的系统，两级分页肯定不够了，就变成了四级目录，分别是：\"},\"1666\":{\"t\":\"全局页目录项 PGD（Page Global Directory）；\"},\"1667\":{\"t\":\"上层页目录项 PUD（Page Upper Directory）；\"},\"1668\":{\"t\":\"中间页目录项 PMD（Page Middle Directory）；\"},\"1669\":{\"t\":\"页表项 PTE（Page Table Entry）；\"},\"1670\":{\"h\":\"4.2TLB\",\"a\":\"_4-2tlb\"},\"1671\":{\"t\":\"多级页表虽然解决了空间上的问题，但是虚拟地址到物理地址的转换就多了几道转换的工序，这显然就降低了这俩地址转换的速度，也就是带来了时间上的开销。\"},\"1672\":{\"t\":\"TLB（Translation Lookaside Buffer） ，通常称为页表缓存、转址旁路缓存、快表等。\"},\"1673\":{\"t\":\"在 CPU 芯片里面，封装了内存管理单元（Memory Management Unit）芯片，它用来完成地址转换和 TLB 的访问与交互。\"},\"1674\":{\"t\":\"有了 TLB 后，那么 CPU 在寻址时，会先查 TLB，如果没找到，才会继续查常规的页表。\"},\"1675\":{\"h\":\"5.段页式内存管理\",\"a\":\"_5-段页式内存管理\"},\"1676\":{\"t\":\"段页式内存管理实现的方式：\"},\"1677\":{\"t\":\"先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；\"},\"1678\":{\"t\":\"接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页；\"},\"1679\":{\"t\":\"这样，地址结构就由段号、段内页号和页内位移三部分组成。\"},\"1680\":{\"t\":\"用于段页式地址变换的数据结构是每一个程序一张段表，每个段又建立一张页表，段表中的地址是页表的起始地址，而页表中的地址则为某页的物理页号。\"},\"1681\":{\"t\":\"段页式地址变换中要得到物理地址须经过三次内存访问：\"},\"1682\":{\"t\":\"第一次访问段表，得到页表起始地址；\"},\"1683\":{\"t\":\"第二次访问页表，得到物理页号；\"},\"1684\":{\"t\":\"第三次将物理页号与页内位移组合，得到物理地址。\"},\"1685\":{\"h\":\"6.Linux 内存布局\",\"a\":\"_6-linux-内存布局\"},\"1686\":{\"t\":\"Linux 内存主要采用的是页式内存管理，但同时也不可避免地涉及了段机制。\"},\"1687\":{\"t\":\"在 Linux 操作系统中，虚拟地址空间的内部又被分为内核空间和用户空间两部分，不同位数的系统，地址空间的范围也不同。比如最常见的 32 位和 64 位系统，如下所示：\"},\"1688\":{\"t\":\"通过这里可以看出：\"},\"1689\":{\"t\":\"32 位系统的内核空间占用 1G，位于最高处，剩下的 3G 是用户空间；\"},\"1690\":{\"t\":\"64 位系统的内核空间和用户空间都是 128T，分别占据整个内存空间的最高和最低处，剩下的中间部分是未定义的。\"},\"1691\":{\"h\":\"7.如何避免预读失效和缓存污染的问题？\",\"a\":\"_7-如何避免预读失效和缓存污染的问题\"},\"1692\":{\"h\":\"7.1预读失效会带来什么问题？\",\"a\":\"_7-1预读失效会带来什么问题\"},\"1693\":{\"t\":\"如果这些被提前加载进来的页，并没有被访问，相当于这个预读工作是白做了，这个就是预读失效。\"},\"1694\":{\"t\":\"如果使用传统的 LRU 算法，就会把「预读页」放到 LRU 链表头部，而当内存空间不够的时候，还需要把末尾的页淘汰掉。\"},\"1695\":{\"t\":\"如果这些「预读页」如果一直不会被访问到，就会出现一个很奇怪的问题，不会被访问的预读页却占用了 LRU 链表前排的位置，而末尾淘汰的页，可能是热点数据，这样就大大降低了缓存命中率 。\"},\"1696\":{\"h\":\"7.2缓存污染会带来什么问题？\",\"a\":\"_7-2缓存污染会带来什么问题\"},\"1697\":{\"t\":\"当我们在批量读取数据的时候，由于数据被访问了一次，这些大量数据都会被加入到「活跃 LRU 链表」里，然后之前缓存在活跃 LRU 链表（或者 young 区域）里的热点数据全部都被淘汰了，如果这些大量的数据在很长一段时间都不会被访问的话，那么整个活跃 LRU 链表（或者 young 区域）就被污染了。\"},\"1698\":{\"h\":\"7.3Linux 操作系统的缓存\",\"a\":\"_7-3linux-操作系统的缓存\"},\"1699\":{\"t\":\"在应用程序读取文件的数据的时候，Linux 操作系统是会对读取的文件数据进行缓存的，会缓存在文件系统中的 Page Cache。\"},\"1700\":{\"h\":\"7.3.1Linux 是如何避免预读失效带来的影响？\",\"a\":\"_7-3-1linux-是如何避免预读失效带来的影响\"},\"1701\":{\"t\":\"Linux 操作系统实现两个了 LRU 链表：活跃 LRU 链表（active_list）和非活跃 LRU 链表（inactive_list）。\"},\"1702\":{\"t\":\"active list 活跃内存页链表，这里存放的是最近被访问过（活跃）的内存页；\"},\"1703\":{\"t\":\"inactive list 不活跃内存页链表，这里存放的是很少被访问（非活跃）的内存页；\"},\"1704\":{\"t\":\"有了这两个 LRU 链表后，预读页就只需要加入到 inactive list 区域的头部，当页被真正访问的时候，才将页插入 active list 的头部。如果预读的页一直没有被访问，就会从 inactive list 移除，这样就不会影响 active list 中的热点数据。\"},\"1705\":{\"h\":\"7.3.2Linux 操作系统怎么避免缓存污染造成的影响？\",\"a\":\"_7-3-2linux-操作系统怎么避免缓存污染造成的影响\"},\"1706\":{\"t\":\"在内存页被访问第二次的时候，才将页从 inactive list 升级到 active list 里。\"},\"1707\":{\"h\":\"7.4MySQL 的缓存\",\"a\":\"_7-4mysql-的缓存\"},\"1708\":{\"t\":\"MySQL 的数据是存储在磁盘里的，为了提升数据库的读写性能，Innodb 存储引擎设计了一个缓冲池（Buffer Pool），Buffer Pool 属于内存空间里的数据。\"},\"1709\":{\"h\":\"7.4.1MySQL 是如何避免预读失效带来的影响？\",\"a\":\"_7-4-1mysql-是如何避免预读失效带来的影响\"},\"1710\":{\"t\":\"MySQL 的 Innodb 存储引擎是在一个 LRU 链表上划分来 2 个区域，young 区域 和 old 区域。\"},\"1711\":{\"t\":\"young 区域在 LRU 链表的前半部分，old 区域则是在后半部分，这两个区域都有各自的头和尾节点。\"},\"1712\":{\"t\":\"划分这两个区域后，预读的页就只需要加入到 old 区域的头部，当页被真正访问的时候，才将页插入 young 区域的头部。如果预读的页一直没有被访问，就会从 old 区域移除，这样就不会影响 young 区域中的热点数据。\"},\"1713\":{\"h\":\"7.4.2MySQL怎么避免缓存污染造成的影响？\",\"a\":\"_7-4-2mysql怎么避免缓存污染造成的影响\"},\"1714\":{\"t\":\"在内存页被访问第二次的时候，并不会马上将该页从 old 区域升级到 young 区域，因为还要进行停留在 old 区域的时间判断：\"},\"1715\":{\"t\":\"如果第二次的访问时间与第一次访问的时间在 1 秒内（默认值），那么该页就不会被从 old 区域升级到 young 区域；\"},\"1716\":{\"t\":\"如果第二次的访问时间与第一次访问的时间超过 1 秒，那么该页就会从 old 区域升级到 young 区域；\"},\"1717\":{\"h\":\"8.内存页面置换算法\",\"a\":\"_8-内存页面置换算法\"},\"1718\":{\"t\":\"页面置换算法的功能是，当出现缺页异常，需调入新页面而内存已满时，选择被置换的物理页面，也就是说选择一个物理页面换出到磁盘，然后把需要访问的页面换入到物理页。\"},\"1719\":{\"t\":\"常见的页面置换算法有如下几种：\"},\"1720\":{\"t\":\"最佳页面置换算法（OPT）\"},\"1721\":{\"t\":\"先进先出置换算法（FIFO）\"},\"1722\":{\"t\":\"最近最久未使用的置换算法（LRU）\"},\"1723\":{\"t\":\"时钟页面置换算法（Lock）\"},\"1724\":{\"t\":\"最不常用置换算法（LFU）\"},\"1725\":{\"h\":\"8.1最佳页面置换算法\",\"a\":\"_8-1最佳页面置换算法\"},\"1726\":{\"t\":\"最佳页面置换算法基本思路是，置换在「未来」最长时间不访问的页面。\"},\"1727\":{\"t\":\"所以，该算法实现需要计算内存中每个逻辑页面的「下一次」访问时间，然后比较，选择未来最长时间不访问的页面。\"},\"1728\":{\"t\":\"这很理想，但是实际系统中无法实现，因为程序访问页面时是动态的，我们是无法预知每个页面在「下一次」访问前的等待时间。\"},\"1729\":{\"t\":\"所以，最佳页面置换算法作用是为了衡量你的算法的效率，你的算法效率越接近该算法的效率，那么说明你的算法是高效的。\"},\"1730\":{\"h\":\"8.2先进先出置换算法\",\"a\":\"_8-2先进先出置换算法\"},\"1731\":{\"t\":\"选择在内存驻留时间很长的页面进行中置换，这个就是「先进先出置换」算法的思想。\"},\"1732\":{\"h\":\"8.3最近最久未使用的置换算法\",\"a\":\"_8-3最近最久未使用的置换算法\"},\"1733\":{\"t\":\"最近最久未使用（LRU）的置换算法的基本思路是，发生缺页时，选择最长时间没有被访问的页面进行置换，也就是说，该算法假设已经很久没有使用的页面很有可能在未来较长的一段时间内仍然不会被使用。\"},\"1734\":{\"t\":\"这种算法近似最优置换算法，最优置换算法是通过「未来」的使用情况来推测要淘汰的页面，而 LRU 则是通过「历史」的使用情况来推测要淘汰的页面。\"},\"1735\":{\"t\":\"虽然 LRU 在理论上是可以实现的，但代价很高。为了完全实现 LRU，需要在内存中维护一个所有页面的链表，最近最多使用的页面在表头，最近最少使用的页面在表尾。\"},\"1736\":{\"t\":\"困难的是，在每次访问内存时都必须要更新「整个链表」。在链表中找到一个页面，删除它，然后把它移动到表头是一个非常费时的操作。\"},\"1737\":{\"t\":\"所以，LRU 虽然看上去不错，但是由于开销比较大，实际应用中比较少使用。\"},\"1738\":{\"h\":\"8.4时钟页面置换算法\",\"a\":\"_8-4时钟页面置换算法\"},\"1739\":{\"t\":\"该算法的思路是，把所有的页面都保存在一个类似钟面的「环形链表」中，一个表针指向最老的页面。\"},\"1740\":{\"t\":\"当发生缺页中断时，算法首先检查表针指向的页面：\"},\"1741\":{\"t\":\"如果它的访问位位是 0 就淘汰该页面，并把新的页面插入这个位置，然后把表针前移一个位置；\"},\"1742\":{\"t\":\"如果访问位是 1 就清除访问位，并把表针前移一个位置，重复这个过程直到找到了一个访问位为 0 的页面为止；\"},\"1743\":{\"h\":\"8.5最不常用算法\",\"a\":\"_8-5最不常用算法\"},\"1744\":{\"t\":\"最不常用（LFU）算法，这名字听起来很调皮，但是它的意思不是指这个算法不常用，而是当发生缺页中断时，选择「访问次数」最少的那个页面，并将其淘汰。\"},\"1745\":{\"t\":\"它的实现方式是，对每个页面设置一个「访问计数器」，每当一个页面被访问时，该页面的访问计数器就累加 1。在发生缺页中断时，淘汰计数器值最小的那个页面。\"},\"1746\":{\"h\":\"9.磁盘调度算法\",\"a\":\"_9-磁盘调度算法\"},\"1747\":{\"t\":\"常见的磁盘调度算法有：\"},\"1748\":{\"t\":\"先来先服务算法\"},\"1749\":{\"t\":\"最短寻道时间优先算法\"},\"1750\":{\"t\":\"扫描算法\"},\"1751\":{\"t\":\"循环扫描算法\"},\"1752\":{\"t\":\"LOOK 与 C-LOOK 算法\"},\"1753\":{\"h\":\"9.1先来先服务\",\"a\":\"_9-1先来先服务\"},\"1754\":{\"t\":\"顾名思义，先到来的请求，先被服务。\"},\"1755\":{\"h\":\"9.2最短寻道时间优先\",\"a\":\"_9-2最短寻道时间优先\"},\"1756\":{\"t\":\"最短寻道时间优先（Shortest Seek First，SSF）算法的工作方式是，优先选择从当前磁头位置所需寻道时间最短的请求。\"},\"1757\":{\"t\":\"但这个算法可能存在某些请求的饥饿，这里产生饥饿的原因是磁头在一小块区域来回移动。\"},\"1758\":{\"h\":\"9.3扫描算法\",\"a\":\"_9-3扫描算法\"},\"1759\":{\"t\":\"磁头在一个方向上移动，访问所有未完成的请求，直到磁头到达该方向上的最后的磁道，才调换方向，这就是扫描（Scan）算法。\"},\"1760\":{\"h\":\"9.4循环扫描算法\",\"a\":\"_9-4循环扫描算法\"},\"1761\":{\"t\":\"循环扫描（Circular Scan, CSCAN ）规定：只有磁头朝某个特定方向移动时，才处理磁道访问请求，而返回时直接快速移动至最靠边缘的磁道，也就是复位磁头，这个过程是很快的，并且返回中途不处理任何请求，该算法的特点，就是磁道只响应一个方向上的请求。\"},\"1762\":{\"h\":\"9.5LOOK 与 C-LOOK算法\",\"a\":\"_9-5look-与-c-look算法\"},\"1763\":{\"t\":\"针对 SCAN 算法的优化则叫 LOOK 算法，它的工作方式，磁头在每个方向上仅仅移动到最远的请求位置，然后立即反向移动，而不需要移动到磁盘的最始端或最末端，反向移动的途中会响应请求。\"},\"1764\":{\"t\":\"针对 C-SCAN 算法的优化则叫 C-LOOK，它的工作方式，磁头在每个方向上仅仅移动到最远的请求位置，然后立即反向移动，而不需要移动到磁盘的最始端或最末端，反向移动的途中不会响应请求。\"},\"1765\":{\"h\":\"3.网络系统\"},\"1766\":{\"h\":\"1.I/O 多路复用\",\"a\":\"_1-i-o-多路复用\"},\"1767\":{\"h\":\"1.1select/poll\",\"a\":\"_1-1select-poll\"},\"1768\":{\"t\":\"select 实现多路复用的方式是，将已连接的 Socket 都放到一个文件描述符集合，然后调用 select 函数将文件描述符集合拷贝到内核里，让内核来检查是否有网络事件产生，检查的方式很粗暴，就是通过遍历文件描述符集合的方式，当检查到有事件产生后，将此 Socket 标记为可读或可写， 接着再把整个文件描述符集合拷贝回用户态里，然后用户态还需要再通过遍历的方法找到可读或可写的 Socket，然后再对其处理。\"},\"1769\":{\"t\":\"所以，对于 select 这种方式，需要进行 2 次「遍历」文件描述符集合，一次是在内核态里，一个次是在用户态里 ，而且还会发生 2 次「拷贝」文件描述符集合，先从用户空间传入内核空间，由内核修改后，再传出到用户空间中。\"},\"1770\":{\"t\":\"select 使用固定长度的 BitsMap，表示文件描述符集合，而且所支持的文件描述符的个数是有限制的，在 Linux 系统中，由内核中的 FD_SETSIZE 限制， 默认最大值为 1024，只能监听 0~1023 的文件描述符。\"},\"1771\":{\"t\":\"poll 不再用 BitsMap 来存储所关注的文件描述符，取而代之用动态数组，以链表形式来组织，突破了 select 的文件描述符个数限制，当然还会受到系统文件描述符限制。\"},\"1772\":{\"t\":\"但是 poll 和 select 并没有太大的本质区别，都是使用「线性结构」存储进程关注的 Socket 集合，因此都需要遍历文件描述符集合来找到可读或可写的 Socket，时间复杂度为 O(n)，而且也需要在用户态与内核态之间拷贝文件描述符集合，这种方式随着并发数上来，性能的损耗会呈指数级增长。\"},\"1773\":{\"h\":\"1.2epoll\",\"a\":\"_1-2epoll\"},\"1774\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题:\"},\"1775\":{\"t\":\"epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"1776\":{\"t\":\"epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"1777\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）:\"},\"1778\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"1779\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"1780\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"1781\":{\"h\":\"2.零拷贝\",\"a\":\"_2-零拷贝\"},\"1782\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"1783\":{\"t\":\"mmap + write\"},\"1784\":{\"t\":\"sendfile\"},\"1785\":{\"h\":\"2.1mmap + write\",\"a\":\"_2-1mmap-write\"},\"1786\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"1787\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"1788\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"1789\":{\"t\":\"具体过程如下：\"},\"1790\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"1791\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"1792\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"1793\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"1794\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"1795\":{\"h\":\"2.2sendfile\",\"a\":\"_2-2sendfile\"},\"1796\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"1797\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"1798\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"1799\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"1800\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"1801\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"1802\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"1803\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"1804\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"1805\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"1806\":{\"t\":\"这就是所谓的零拷贝（Zero-copy）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"1807\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"1808\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"1809\":{\"h\":\"2.3使用零拷贝技术的项目\",\"a\":\"_2-3使用零拷贝技术的项目\"},\"1810\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"1811\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"1812\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"1813\":{\"h\":\"3.Reactor\",\"a\":\"_3-reactor\"},\"1814\":{\"h\":\"3.1单 Reactor 单进程 / 线程\",\"a\":\"_3-1单-reactor-单进程-线程\"},\"1815\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"1816\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"1817\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"1818\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"1819\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"1820\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"1821\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"1822\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"1823\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1824\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1825\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1826\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1827\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"1828\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"1829\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"1830\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"1831\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"1832\":{\"h\":\"3.2单 Reactor 多线程 / 多进程\",\"a\":\"_3-2单-reactor-多线程-多进程\"},\"1833\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"1834\":{\"t\":\"详细说一下这个方案：\"},\"1835\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"1836\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"1837\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"1838\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"1839\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"1840\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"1841\":{\"h\":\"3.3多 Reactor 多进程 / 线程\",\"a\":\"_3-3多-reactor-多进程-线程\"},\"1842\":{\"t\":\"方案说明如下：\"},\"1843\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"1844\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"1845\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"1846\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"1847\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"1848\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"1849\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"1850\":{\"h\":\"1.进程和线程\"},\"1851\":{\"h\":\"1.进程管理\",\"a\":\"_1-进程管理\"},\"1852\":{\"h\":\"1.1Java里的进程有哪些状态？\",\"a\":\"_1-1java里的进程有哪些状态\"},\"1853\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"1854\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"1855\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"1856\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"1857\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"1858\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"1859\":{\"h\":\"1.2进程的控制结构\",\"a\":\"_1-2进程的控制结构\"},\"1860\":{\"t\":\"在操作系统中，是用进程控制块（process control block，PCB）数据结构来描述进程的。\"},\"1861\":{\"t\":\"PCB 是进程存在的唯一标识，这意味着一个进程的存在，必然会有一个 PCB，如果进程消失了，那么 PCB 也会随之消失。\"},\"1862\":{\"t\":\"PCB 具体包含:\"},\"1863\":{\"t\":\"进程描述信息：\"},\"1864\":{\"t\":\"进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符；\"},\"1865\":{\"t\":\"用户标识符：进程归属的用户，用户标识符主要为共享和保护服务；\"},\"1866\":{\"t\":\"进程控制和管理信息：\"},\"1867\":{\"t\":\"进程当前状态，如 new、ready、running、waiting 或 blocked 等；\"},\"1868\":{\"t\":\"进程优先级：进程抢占 CPU 时的优先级；\"},\"1869\":{\"t\":\"资源分配清单：\"},\"1870\":{\"t\":\"有关内存地址空间或虚拟地址空间的信息，所打开文件的列表和所使用的 I/O 设备信息。\"},\"1871\":{\"t\":\"CPU 相关信息：\"},\"1872\":{\"t\":\"CPU 中各个寄存器的值，当进程被切换时，CPU 的状态信息都会被保存在相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。\"},\"1873\":{\"t\":\"通常是通过链表的方式进行组织，把具有相同状态的进程链在一起，组成各种队列。比如：\"},\"1874\":{\"t\":\"将所有处于就绪状态的进程链在一起，称为就绪队列；\"},\"1875\":{\"t\":\"把所有因等待某事件而处于等待状态的进程链在一起就组成各种阻塞队列；\"},\"1876\":{\"h\":\"1.3进程的上下文切换\",\"a\":\"_1-3进程的上下文切换\"},\"1877\":{\"t\":\"一个进程切换到另一个进程运行，称为进程的上下文切换。\"},\"1878\":{\"t\":\"CPU 上下文切换:CPU 寄存器和程序计数是 CPU 在运行任何任务前，所必须依赖的环境，这些环境就叫做 CPU 上下文。\"},\"1879\":{\"t\":\"进程是由内核管理和调度的，所以进程的切换只能发生在内核态。\"},\"1880\":{\"t\":\"进程的上下文切换不仅包含了虚拟内存、栈、全局变量等用户空间的资源，还包括了内核堆栈、寄存器等内核空间的资源。\"},\"1881\":{\"h\":\"2.线程管理\",\"a\":\"_2-线程管理\"},\"1882\":{\"h\":\"2.1为什么使用线程？\",\"a\":\"_2-1为什么使用线程\"},\"1883\":{\"t\":\"多进程的这种方式，依然会存在问题：\"},\"1884\":{\"t\":\"进程之间如何通信，共享数据？\"},\"1885\":{\"t\":\"维护进程的系统开销较大，如创建进程时，分配资源、建立 PCB；终止进程时，回收资源、撤销 PCB；进程切换时，保存当前进程的状态信息；\"},\"1886\":{\"t\":\"那到底如何解决呢？需要有一种新的实体，满足以下特性：\"},\"1887\":{\"t\":\"实体之间可以并发运行；\"},\"1888\":{\"t\":\"实体之间共享相同的地址空间；\"},\"1889\":{\"t\":\"这个新的实体，就是线程( *Thread* )，线程之间可以并发运行且共享相同的地址空间。\"},\"1890\":{\"h\":\"2.2什么是线程？\",\"a\":\"_2-2什么是线程\"},\"1891\":{\"t\":\"线程是进程当中的一条执行流程。\"},\"1892\":{\"t\":\"线程的优点：\"},\"1893\":{\"t\":\"一个进程中可以同时存在多个线程；\"},\"1894\":{\"t\":\"各个线程之间可以并发执行；\"},\"1895\":{\"t\":\"各个线程之间可以共享地址空间和文件等资源；\"},\"1896\":{\"t\":\"线程的缺点：\"},\"1897\":{\"t\":\"当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃（这里是针对 C/C++ 语言，Java语言中的线程奔溃不会造成进程崩溃）\"},\"1898\":{\"h\":\"2.3线程与进程的比较\",\"a\":\"_2-3线程与进程的比较\"},\"1899\":{\"t\":\"线程与进程的比较如下：\"},\"1900\":{\"t\":\"进程是资源（包括内存、打开的文件等）分配的单位，线程是 CPU 调度的单位；\"},\"1901\":{\"t\":\"进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；\"},\"1902\":{\"t\":\"线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；\"},\"1903\":{\"t\":\"线程能减少并发执行的时间和空间开销；\"},\"1904\":{\"t\":\"对于，线程相比进程能减少开销，体现在：\"},\"1905\":{\"t\":\"线程的创建时间比进程快，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，而线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们；\"},\"1906\":{\"t\":\"线程的终止时间比进程快，因为线程释放的资源相比进程少很多；\"},\"1907\":{\"t\":\"同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的；\"},\"1908\":{\"t\":\"由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了；\"},\"1909\":{\"t\":\"所以，不管是时间效率，还是空间效率线程比进程都要高。\"},\"1910\":{\"t\":\"线程与进程最大的区别在于：线程是调度的基本单位，而进程则是资源拥有的基本单位。\"},\"1911\":{\"h\":\"2.4调度算法\",\"a\":\"_2-4调度算法\"},\"1912\":{\"h\":\"2.4.1先来先服务调度算法\",\"a\":\"_2-4-1先来先服务调度算法\"},\"1913\":{\"t\":\"顾名思义，先来后到，每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。\"},\"1914\":{\"t\":\"这似乎很公平，但是当一个长作业先运行了，那么后面的短作业等待的时间就会很长，不利于短作业。\"},\"1915\":{\"t\":\"FCFS 对长作业有利，适用于 CPU 繁忙型作业的系统，而不适用于 I/O 繁忙型作业的系统。\"},\"1916\":{\"h\":\"2.4.2最短作业优先调度算法\",\"a\":\"_2-4-2最短作业优先调度算法\"},\"1917\":{\"t\":\"最短作业优先（*Shortest Job First, SJF*）调度算法同样也是顾名思义，它会优先选择运行时间最短的进程来运行，这有助于提高系统的吞吐量。\"},\"1918\":{\"t\":\"这显然对长作业不利，很容易造成一种极端现象。\"},\"1919\":{\"h\":\"2.4.3高响应比优先调度算法\",\"a\":\"_2-4-3高响应比优先调度算法\"},\"1920\":{\"t\":\"每次进行进程调度时，先计算「响应比优先级」，然后把「响应比优先级」最高的进程投入运行，「响应比优先级」的计算公式：\"},\"1921\":{\"t\":\"很多人问怎么才能知道一个进程要求服务的时间？这不是不可预知的吗？\"},\"1922\":{\"t\":\"对的，这是不可预估的。所以，高响应比优先调度算法是「理想型」的调度算法，现实中是实现不了的。\"},\"1923\":{\"h\":\"2.4.4时间片轮转调度算法\",\"a\":\"_2-4-4时间片轮转调度算法\"},\"1924\":{\"t\":\"每个进程被分配一个时间段，称为时间片（*Quantum*），即允许该进程在该时间段中运行。\"},\"1925\":{\"t\":\"如果时间片用完，进程还在运行，那么将会把此进程从 CPU 释放出来，并把 CPU 分配给另外一个进程；\"},\"1926\":{\"t\":\"如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换；\"},\"1927\":{\"h\":\"2.4.5最高优先级调度算法\",\"a\":\"_2-4-5最高优先级调度算法\"},\"1928\":{\"t\":\"进程的优先级可以分为，静态优先级和动态优先级：\"},\"1929\":{\"t\":\"静态优先级：创建进程时候，就已经确定了优先级了，然后整个运行时间优先级都不会变化；\"},\"1930\":{\"t\":\"动态优先级：根据进程的动态变化调整优先级，比如如果进程运行时间增加，则降低其优先级，如果进程等待时间（就绪队列的等待时间）增加，则升高其优先级，也就是随着时间的推移增加等待进程的优先级。\"},\"1931\":{\"t\":\"该算法也有两种处理优先级高的方法，非抢占式和抢占式：\"},\"1932\":{\"t\":\"非抢占式：当就绪队列中出现优先级高的进程，运行完当前进程，再选择优先级高的进程。\"},\"1933\":{\"t\":\"抢占式：当就绪队列中出现优先级高的进程，当前进程挂起，调度优先级高的进程运行。\"},\"1934\":{\"t\":\"但是依然有缺点，可能会导致低优先级的进程永远不会运行。\"},\"1935\":{\"h\":\"2.4.6多级反馈队列调度算法\",\"a\":\"_2-4-6多级反馈队列调度算法\"},\"1936\":{\"t\":\"顾名思义：\"},\"1937\":{\"t\":\"「多级」表示有多个队列，每个队列优先级从高到低，同时优先级越高时间片越短。\"},\"1938\":{\"t\":\"「反馈」表示如果有新的进程加入优先级高的队列时，立刻停止当前正在运行的进程，转而去运行优先级高的队列；\"},\"1939\":{\"t\":\"来看看，它是如何工作的：\"},\"1940\":{\"t\":\"设置了多个队列，赋予每个队列不同的优先级，每个队列优先级从高到低，同时优先级越高时间片越短；\"},\"1941\":{\"t\":\"新的进程会被放入到第一级队列的末尾，按先来先服务的原则排队等待被调度，如果在第一级队列规定的时间片没运行完成，则将其转入到第二级队列的末尾，以此类推，直至完成；\"},\"1942\":{\"t\":\"当较高优先级的队列为空，才调度较低优先级的队列中的进程运行。如果进程运行时，有新进程进入较高优先级的队列，则停止当前运行的进程并将其移入到原队列末尾，接着让较高优先级的进程运行；\"},\"1943\":{\"h\":\"3.进程间通信\",\"a\":\"_3-进程间通信\"},\"1944\":{\"t\":\"每个进程的用户地址空间都是独立的，一般而言是不能互相访问的，但内核空间是每个进程都共享的，所以进程之间要通信必须通过内核。\"},\"1945\":{\"h\":\"3.1管道\",\"a\":\"_3-1管道\"},\"1946\":{\"t\":\"如果你学过 Linux 命令，那你肯定很熟悉「|」这个竖线。\"},\"1947\":{\"t\":\"ps auxf | grep mysql \"},\"1948\":{\"t\":\"上面命令行里的「|」竖线就是一个管道，它的功能是将前一个命令（ps auxf）的输出，作为后一个命令（grep mysql）的输入，从这功能描述，可以看出管道传输数据是单向的，如果想相互通信，我们需要创建两个管道才行。\"},\"1949\":{\"t\":\"同时，我们得知上面这种管道是没有名字，所以「|」表示的管道称为匿名管道，用完了就销毁。\"},\"1950\":{\"t\":\"管道还有另外一个类型是命名管道，也被叫做 FIFO，因为数据是先进先出的传输方式。\"},\"1951\":{\"t\":\"我们可以看出，管道这种通信方式效率低，不适合进程间频繁地交换数据。当然，它的好处，自然就是简单，同时也我们很容易得知管道里的数据已经被另一个进程读取了。\"},\"1952\":{\"t\":\"匿名管道的创建，需要通过下面这个系统调用：int pipe(int fd[2])。\"},\"1953\":{\"t\":\"注意，这个匿名管道是特殊的文件，只存在于内存，不存于文件系统中。\"},\"1954\":{\"t\":\"其实，所谓的管道，就是内核里面的一串缓存。从管道的一段写入的数据，实际上是缓存在内核中的，另一端读取，也就是从内核中读取这段数据。另外，管道传输的数据是无格式的流且大小受限。\"},\"1955\":{\"t\":\"在 shell 里面执行 A | B命令的时候，A 进程和 B 进程都是 shell 创建出来的子进程，A 和 B 之间不存在父子关系，它俩的父进程都是 shell。\"},\"1956\":{\"h\":\"3.2消息队列\",\"a\":\"_3-2消息队列\"},\"1957\":{\"t\":\"消息队列是保存在内核中的消息链表，在发送数据时，会分成一个一个独立的数据单元，也就是消息体（数据块），消息体是用户自定义的数据类型，消息的发送方和接收方要约定好消息体的数据类型，所以每个消息体都是固定大小的存储块，不像管道是无格式的字节流数据。如果进程从消息队列中读取了消息体，内核就会把这个消息体删除。\"},\"1958\":{\"t\":\"消息队列生命周期随内核，如果没有释放消息队列或者没有关闭操作系统，消息队列会一直存在，而前面提到的匿名管道的生命周期，是随进程的创建而建立，随进程的结束而销毁。\"},\"1959\":{\"h\":\"3.3共享内存\",\"a\":\"_3-3共享内存\"},\"1960\":{\"t\":\"共享内存的机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中。这样这个进程写入的东西，另外一个进程马上就能看到了，都不需要拷贝来拷贝去，传来传去，大大提高了进程间通信的速度。\"},\"1961\":{\"h\":\"3.4信号量\",\"a\":\"_3-4信号量\"},\"1962\":{\"t\":\"为了防止多进程竞争共享资源，而造成的数据错乱，所以需要保护机制，使得共享的资源，在任意时刻只能被一个进程访问。正好，信号量就实现了这一保护机制。\"},\"1963\":{\"t\":\"信号量其实是一个整型的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据。\"},\"1964\":{\"t\":\"信号量表示资源的数量，控制信号量的方式有两种原子操作：\"},\"1965\":{\"t\":\"一个是 P 操作，这个操作会把信号量减去 1，相减后如果信号量 < 0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量 >= 0，则表明还有资源可使用，进程可正常继续执行。\"},\"1966\":{\"t\":\"另一个是 V 操作，这个操作会把信号量加上 1，相加后如果信号量 <= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 > 0，则表明当前没有阻塞中的进程；\"},\"1967\":{\"t\":\"P 操作是用在进入共享资源之前，V 操作是用在离开共享资源之后，这两个操作是必须成对出现的。\"},\"1968\":{\"t\":\"通信方式：\"},\"1969\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"1970\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"1971\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"1972\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"1973\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"1974\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"1975\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"1976\":{\"h\":\"4.互斥同步\",\"a\":\"_4-互斥同步\"},\"1977\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"1978\":{\"t\":\"由于多线程执行操作共享变量的这段代码可能会导致竞争状态，因此我们将此段代码称为临界区（critical section），它是访问共享资源的代码片段，一定不能给多线程同时执行。\"},\"1979\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"1980\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"1981\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"1982\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"1983\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"1984\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"1985\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"1986\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"1987\":{\"t\":\"锁：加锁、解锁操作；\"},\"1988\":{\"t\":\"信号量：P、V 操作；\"},\"1989\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"1990\":{\"h\":\"4.1死锁的概念\",\"a\":\"_4-1死锁的概念\"},\"1991\":{\"t\":\"死锁只有同时满足以下四个条件才会发生：\"},\"1992\":{\"t\":\"互斥条件:互斥条件是指多个线程不能同时使用同一个资源。\"},\"1993\":{\"t\":\"持有并等待条件:持有并等待条件是指，当线程 A 已经持有了资源 1，又想申请资源 2，而资源 2 已经被线程 C 持有了，所以线程 A 就会处于等待状态，但是线程 A 在等待资源 2 的同时并不会释放自己已经持有的资源 1。\"},\"1994\":{\"t\":\"不可剥夺条件:不可剥夺条件是指，当线程已经持有了资源 ，在自己使用完之前不能被其他线程获取，线程 B 如果也想使用此资源，则只能在线程 A 使用完并释放后才能获取。\"},\"1995\":{\"t\":\"环路等待条件:环路等待条件指的是，在死锁发生的时候，两个线程获取资源的顺序构成了环形链。\"},\"1996\":{\"h\":\"4.2避免死锁问题的发生\",\"a\":\"_4-2避免死锁问题的发生\"},\"1997\":{\"t\":\"那么避免死锁问题就只需要破环其中一个条件就可以，最常见的并且可行的就是使用资源有序分配法，来破环环路等待条件。\"},\"1998\":{\"t\":\"那什么是资源有序分配法呢？\"},\"1999\":{\"t\":\"线程 A 和 线程 B 获取资源的顺序要一样，当线程 A 是先尝试获取资源 A，然后尝试获取资源 B 的时候，线程 B 同样也是先尝试获取资源 A，然后尝试获取资源 B。也就是说，线程 A 和 线程 B 总是以相同的顺序申请自己想要的资源。\"},\"2000\":{\"t\":\"我们使用资源有序分配法的方式来修改前面发生死锁的代码，我们可以不改动线程 A 的代码。\"},\"2001\":{\"t\":\"我们先要清楚线程 A 获取资源的顺序，它是先获取互斥锁 A，然后获取互斥锁 B。\"},\"2002\":{\"t\":\"所以我们只需将线程 B 改成以相同顺序的获取资源，就可以打破死锁了。\"},\"2003\":{\"h\":\"一致性哈希算法原理详解\"},\"2004\":{\"h\":\"普通 hash 算法 (取模算法)：\",\"a\":\"普通-hash-算法-取模算法\"},\"2005\":{\"t\":\"在了解一致性哈希算法之前，我们先了解一下缓存中的一个应用场景，了解了这个应用场景之后，再来理解一致性哈希算法，就容易多了，也更能体现出一致性哈希算法的优点，那么，我们先来描述一下这个经典的分布式缓存的应用场景。\"},\"2006\":{\"h\":\"普通 hash算法 与 使用场景描述：\",\"a\":\"普通-hash算法-与-使用场景描述\"},\"2007\":{\"t\":\"假设我们有三台缓存服务器，用于缓存图片，我们为这三台缓存服务器编号为 0号、1号、2号，现在有3万张图片需要缓存，我们希望这些图片被均匀的缓存到这3台服务器上，以便它们能够分摊缓存的压力。也就是说，我们希望每台服务器能够缓存1万张左右的图片，那么我们应该怎样做呢？常见的做法是对缓存项的键进行哈希，将hash后的结果对缓存服务器的数量进行取模操作，通过取模后的结果，决定缓存项将会缓存在哪一台服务器上\"},\"2008\":{\"t\":\"​ 我们举例说明，以刚才描述的场景为例，假设图片名称是不重复的，那我们就可以使用图片名称作为访问图片的key，使用如下公式，计算出图片应该存放在哪台服务器上。\"},\"2009\":{\"t\":\"hash（图片名称）% N\"},\"2010\":{\"t\":\"当我们对同一个图片名称做相同的哈希计算时，得出的结果应该是不变的，如果我们有3台服务器，使用哈希后的结果对3求余，那么余数一定是0、1或者2；如果求余的结果为0， 就把当前图片缓存在0号服务器上，如果余数为1，就缓存在1号服务器上，以此类推；同理，当我们访问任意图片时，只要再次对图片名称进行上述运算，即可得出图片应该存放在哪一台缓存服务器上，我们只要在这一台服务器上查找图片即可，如果图片在对应的服务器上不存在，则证明对应的图片没有被缓存，也不用再去遍历其他缓存服务器了，通过这样的方法，即可将3万张图片随机的分布到3台缓存服务器上了，而且下次访问某张图片时，直接能够判断出该图片应该存在于哪台缓存服务器上，我们暂时称上述算法为 HASH 算法或者取模算法，取模算法的过程可以用下图表示： \"},\"2011\":{\"h\":\"普通 hash 算法的缺陷：\",\"a\":\"普通-hash-算法的缺陷\"},\"2012\":{\"t\":\"上述HASH算法时，会出现一些缺陷：如果服务器已经不能满足缓存需求，就需要增加服务器数量，假设我们增加了一台缓存服务器，此时如果仍然使用上述方法对同一张图片进行缓存，那么这张图片所在的服务器编号必定与原来3台服务器时所在的服务器编号不同，因为除数由3变为了4，最终导致所有缓存的位置都要发生改变，也就是说，当服务器数量发生改变时，所有缓存在一定时间内是失效的，当应用无法从缓存中获取数据时，则会向后端服务器请求数据；同理，假设突然有一台缓存服务器出现了故障，那么我们则需要将故障机器移除，那么缓存服务器数量从3台变为2台，同样会导致大量缓存在同一时间失效，造成了缓存的雪崩，后端服务器将会承受巨大的压力，整个系统很有可能被压垮。为了解决这种情况，就有了一致性哈希算法。\"},\"2013\":{\"h\":\"一致性哈希算法：\",\"a\":\"一致性哈希算法\"},\"2014\":{\"h\":\"什么是一致性 hash 算法：\",\"a\":\"什么是一致性-hash-算法\"},\"2015\":{\"t\":\"一致性哈希算法也是使用取模的方法，但是取模算法是对服务器的数量进行取模，而一致性哈希算法是对 2^32 取模，具体步骤如下：\"},\"2016\":{\"t\":\"步骤一：一致性哈希算法将整个哈希值空间按照顺时针方向组织成一个虚拟的圆环，称为 Hash 环；\"},\"2017\":{\"t\":\"步骤二：接着将各个服务器使用 Hash 函数进行哈希，具体可以选择服务器的IP或主机名作为关键字进行哈希，从而确定每台机器在哈希环上的位置\"},\"2018\":{\"t\":\"步骤三：最后使用算法定位数据访问到相应服务器：将数据key使用相同的函数Hash计算出哈希值，并确定此数据在环上的位置，从此位置沿环顺时针寻找，第一台遇到的服务器就是其应该定位到的服务器\"},\"2019\":{\"t\":\"下面我们使用具体案例说明一下一致性哈希算法的具体流程：\"},\"2020\":{\"t\":\"（1）步骤一：哈希环的组织：\"},\"2021\":{\"t\":\"我们将 2^32 想象成一个圆，像钟表一样，钟表的圆可以理解成由60个点组成的圆，而此处我们把这个圆想象成由2^32个点组成的圆，示意图如下：\"},\"2022\":{\"t\":\"圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推，2、3、4、5、6……直到232-1,也就是说0点左侧的第一个点代表232-1，我们把这个由 2^32 个点组成的圆环称为hash环。\"},\"2023\":{\"t\":\"（2）步骤二：确定服务器在哈希环的位置：\"},\"2024\":{\"t\":\"哈希算法：hash（服务器的IP） % 2^32\"},\"2025\":{\"t\":\"​ 上述公式的计算结果一定是 0 到 2^32-1 之间的整数，那么上图中的 hash 环上必定有一个点与这个整数对应，所以我们可以使用这个整数代表服务器，也就是服务器就可以映射到这个环上，假设我们有 ABC 三台服务器，那么它们在哈希环上的示意图如下：\"},\"2026\":{\"t\":\"3）步骤三：将数据映射到哈希环上：\"},\"2027\":{\"t\":\"​ 我们还是使用图片的名称作为 key，所以我们使用下面算法将图片映射在哈希环上：hash（图片名称） % 2^32，假设我们有4张图片，映射后的示意图如下，其中橘黄色的点表示图片：\"},\"2028\":{\"t\":\"那么，怎么算出上图中的图片应该被缓存到哪一台服务上面呢？我们只要从图片的位置开始，沿顺时针方向遇到的第一个服务器就是图片存放的服务器了。最终，1号、2号图片将会被缓存到服务器A上，3号图片将会被缓存到服务器B上，4号图片将会被缓存到服务器C上。\"},\"2029\":{\"h\":\"一致性 hash 算法的优点：\",\"a\":\"一致性-hash-算法的优点\"},\"2030\":{\"t\":\"前面提到，如果简单对服务器数量进行取模，那么当服务器数量发生变化时，会产生缓存的雪崩，从而很有可能导致系统崩溃，而使用一致性哈希算法就可以很好的解决这个问题，因为一致性Hash算法对于节点的增减都只需重定位环空间中的一小部分数据，只有部分缓存会失效，不至于将所有压力都在同一时间集中到后端服务器上，具有较好的容错性和可扩展性。\"},\"2031\":{\"t\":\"​ 假设服务器B出现了故障，需要将服务器B移除，那么移除前后的示意图如下图所示：\"},\"2032\":{\"t\":\"在服务器B未移除时，图片3应该被缓存到服务器B中，可是当服务器B移除以后，按照之前描述的一致性哈希算法的规则，图片3应该被缓存到服务器C中，因为从图片3的位置出发，沿顺时针方向遇到的第一个缓存服务器节点就是服务器C，也就是说，如果服务器B出现故障被移除时，图片3的缓存位置会发生改变，但是，图片4仍然会被缓存到服务器C中，图片1与图片2仍然会被缓存到服务器A中，这与服务器B移除之前并没有任何区别，这就是一致性哈希算法的优点。\"},\"2033\":{\"h\":\"hash 环的倾斜与虚拟节点：\",\"a\":\"hash-环的倾斜与虚拟节点\"},\"2034\":{\"t\":\"**一致性哈希算法在服务节点太少的情况下，容易因为节点分部不均匀而造成数据倾斜问题，也就是被缓存的对象大部分集中缓存在某一台服务器上，从而出现数据分布不均匀的情况，这种情况就称为 hash 环的倾斜。**如下图所示：\"},\"2035\":{\"t\":\"hash 环的倾斜在极端情况下，仍然有可能引起系统的崩溃，**为了解决这种数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点，一个实际物理节点可以对应多个虚拟节点，虚拟节点越多，hash环上的节点就越多，缓存被均匀分布的概率就越大，hash环倾斜所带来的影响就越小，同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射。**具体做法可以在服务器ip或主机名的后面增加编号来实现，加入虚拟节点以后的hash环如下： \"},\"2036\":{\"t\":\"参考：https://blog.csdn.net/a745233700/article/details/120814088\"},\"2037\":{\"h\":\"场景问题\"},\"2038\":{\"h\":\"缓存一致性解决\",\"a\":\"缓存一致性解决\"},\"2039\":{\"h\":\"4G数据找系统记录(大数据题)\",\"a\":\"_4g数据找系统记录-大数据题\"},\"2040\":{\"h\":\"很多短任务线程，选择 synchronized 还是 lock（2022-04-11 携程）\",\"a\":\"很多短任务线程-选择-synchronized-还是-lock-2022-04-11-携程\"},\"2041\":{\"t\":\"锁竞争小时，synchronized和lock效率没差，偏向模式下（单线程读写）甚至高于lock，但是并发量上升时锁撤销会大幅影响性能，稳定自适应轻量级锁状态下，线程接近交替运行，或者说短任务线程多，基本一样，因为都是自旋，大量任务并发竞争时，随着任务量的增大，synchronized的效率会远小于lock，因为重量级锁会频繁切换内核态与用户态；大量长任务，只能重量级锁。\"},\"2042\":{\"h\":\"多个人给一个主播打赏怎么设计？（2022-6-3 58同城）\",\"a\":\"多个人给一个主播打赏怎么设计-2022-6-3-58同城\"},\"2043\":{\"t\":\"我说是一个高并发写的操作，对一个记录频繁写，分批操作，比如 10 个记录 操作一次。他说这个方案可以 但是有 100 个记录 怎么去做一个一个操作呢？我说如果在一个进程可以 分多个线程分批。他说还是不够快 我们是用的 MQ 多个消费者 一个打赏就发一个消息\"},\"2044\":{\"h\":\"怎么实现一个点赞功能？\",\"a\":\"怎么实现一个点赞功能\"},\"2045\":{\"t\":\"主要的流程解释下：先查询数据库改用户是否进行点赞，如果已经点赞则抛出异常，如果没有则new一个对象来一个一个Set，然后将已点赞的信息存入redis中，相反，取消点赞的操作就是删除redis中的数据即可，然后通过Dubbo调用API来完成保存操作，因为我这里是还要获取点赞数和评论数啥的，所以会对动态表进行更新操作。\"},\"2046\":{\"h\":\"比如下单清空购物车，你是如何设计的？\",\"a\":\"比如下单清空购物车-你是如何设计的\"},\"2047\":{\"t\":\"生产者（订单系统）产生消息，发送一条半事务消息到MQ服务器\"},\"2048\":{\"t\":\"MQ收到消息后，将消息持久化到存储系统，这条消息的状态是待发送状态。\"},\"2049\":{\"t\":\"MQ服务器返回ACK确认到生产者，此时MQ不会触发消息推送事件\"},\"2050\":{\"t\":\"生产者执行本地事务（订单创建成功，提交事务消息）\"},\"2051\":{\"t\":\"如果本地事务执行成功，即commit执行结果到MQ服务器；如果执行失败，发送rollback。\"},\"2052\":{\"t\":\"如果是commit正常提交，MQ服务器更新消息状态为可发送；如果是rollback，即删除消息。\"},\"2053\":{\"t\":\"如果消息状态更新为可发送，则MQ服务器会push消息给消费者（购物车系统）。消费者消费完（即拿到订单消息，清空购物车成功）就应答ACK。\"},\"2054\":{\"t\":\"如果MQ服务器长时间没有收到生产者的commit或者rollback，它会反查生产者，然后根据查询到的结果（回滚操作或者重新发送消息）执行最终状态。\"},\"2055\":{\"t\":\"有些伙伴可能有疑惑，如果消费者消费失败怎么办呢？那数据是不是不一致啦？所以就需要消费者消费成功，执行业务逻辑成功，再反馈ack嘛。如果消费者消费失败，那就自动重试嘛，接口支持幂等即可。\"},\"2056\":{\"h\":\"排行榜的实现，比如高考成绩排序（2022 虾皮）\",\"a\":\"排行榜的实现-比如高考成绩排序-2022-虾皮\"},\"2057\":{\"t\":\"排行版的实现，一般使用redis的zset数据类型。\"},\"2058\":{\"t\":\"zadd key score member [score member ...]，zrank key member\"},\"2059\":{\"h\":\"有一批帖子，会根据类别搜索，但是现在是单独一个表，现在查询非常慢，如何提高搜索性能？（2022 虾皮）\",\"a\":\"有一批帖子-会根据类别搜索-但是现在是单独一个表-现在查询非常慢-如何提高搜索性能-2022-虾皮\"},\"2060\":{\"t\":\"根据类别分库分表，库可以放到不同的实例上，经常查询的不变的数据]可以放到缓存里。 数据有更新时，需要刷新下缓存 因为分表后，只能是固定类别，所以需要根据类别去分开查找。 如果还有另一个重要的字段也需要查，可以再建一个分表，user-ses/ses-user就是这么做的，但是冗余就比较大。\"},\"2061\":{\"h\":\"如果有多个表，进行聚合查询，如何解决深分页的问题（2022 虾皮）\",\"a\":\"如果有多个表-进行聚合查询-如何解决深分页的问题-2022-虾皮\"},\"2062\":{\"t\":\"就是保存每个节点的表id给前端，前端查询时把id返回过来了，然后加到SQL里，但是不一定准。这里回答的是单个表吧。\"},\"2063\":{\"h\":\"分表的数据，动态增加一张表，不停服如何实现？（2022 虾皮）\",\"a\":\"分表的数据-动态增加一张表-不停服如何实现-2022-虾皮\"},\"2064\":{\"t\":\"分区策略使用一致性哈希 然后新表的数据，查询的时候，先查老的，再插入新的。如果老数据没有动，需要有对应的迁移服务进行定时迁移。插入的时候优先插入到新的表。\"},\"2065\":{\"h\":\"迁移线程和用户线程同时执行，会有数据库不一致的问题，怎么解决？（2022 虾皮）\",\"a\":\"迁移线程和用户线程同时执行-会有数据库不一致的问题-怎么解决-2022-虾皮\"},\"2066\":{\"t\":\"加分布式锁。\"},\"2067\":{\"h\":\"两个机房，某个机房可能断电，如何做多机房容灾（2022 虾皮）\",\"a\":\"两个机房-某个机房可能断电-如何做多机房容灾-2022-虾皮\"},\"2068\":{\"t\":\"负载均衡层，支持切换机房写数据的时候，中间件（db/redis/es）都要进行双写。\"},\"2069\":{\"t\":\"kafka容灾，mirror maker: https://cloud.tencent.com/developer/article/1358933\"},\"2070\":{\"h\":\"主从机房同步有什么问题呢？ （2022 虾皮）\",\"a\":\"主从机房同步有什么问题呢-2022-虾皮\"},\"2071\":{\"t\":\"会有比较大的延迟。 一些分布式的问题，例如分布式事务，可能就执行了几步，然后就挂了，需要有一定的策略，进行回滚或者提交。 切换机房的过程中，可能存在数据丢失，重复数据等\"},\"2072\":{\"t\":\"双向同步，两个机房都能写入，如果操作的是各自的数据的话，问题不大。如果操作的是相同数据，必然会有冲突，需要解决。所以上层保证相同数据到同一个机房即可，然后同步到另外一个机房，保证每个机房都有全量的数据。各种中间件都要做改造。\"},\"2073\":{\"t\":\"总之，分片的核心思路在于，让同一个用户的相关请求，只在一个机房内完成所有业务「闭环」，不再出现「跨机房」访问。\"},\"2074\":{\"t\":\"阿里在实施这种方案时，给它起了个名字，叫做「单元化」。\"},\"2075\":{\"t\":\"这里还有一种情况，是无法做数据分片的：全局数据。例如系统配置、商品库存这类需要强一致的数据，这类服务依旧只能采用写主机房，读从机房的方案，不做双活。\"},\"2076\":{\"t\":\"双活的重点，是要优先保证「核心」业务先实现双活，并不是「全部」业务实现双活。\"},\"2077\":{\"h\":\"冷机房新请求过来，发现缓存没有，会把数据库打挂，这个怎么解决？（2022 虾皮）\",\"a\":\"冷机房新请求过来-发现缓存没有-会把数据库打挂-这个怎么解决-2022-虾皮\"},\"2078\":{\"t\":\"预热，提前加载到缓存。 或者平时保持一定的流量。 用了缓存的，一般需要预热下，防止雪崩。\"},\"2079\":{\"h\":\"定时任务这种，怎么改变执行的机房（2022 虾皮）\",\"a\":\"定时任务这种-怎么改变执行的机房-2022-虾皮\"},\"2080\":{\"t\":\"加开关，任何时候都有一个条件不满足，在空跑。\"},\"2081\":{\"h\":\"自己\",\"a\":\"自己\"},\"2082\":{\"h\":\"1.上传文件时该如何构造请求报文？（科大讯飞）\",\"a\":\"_1-上传文件时该如何构造请求报文-科大讯飞\"},\"2083\":{\"t\":\"对于上传文件,客户端需要构造一个HTTP POST请求,请求体中包含要上传的文件数据。具体来说,可以这样构造:\"},\"2084\":{\"t\":\"请求方法为POST\"},\"2085\":{\"t\":\"请求URL为文件上传的接口地址,如https://example.com/upload\"},\"2086\":{\"t\":\"请求头部包含:\"},\"2087\":{\"t\":\"Content-Type: 表示文件类型,如 image/jpeg、application/pdf 等\"},\"2088\":{\"t\":\"Content-Length: 表示文件大小\"},\"2089\":{\"t\":\"请求体中包含文件二进制数据\"},\"2090\":{\"t\":\"例如：\"},\"2091\":{\"t\":\"POST /upload HTTP/1.1 Host: example.com Content-Type: image/jpeg Content-Length: [文件大小] [文件二进制数据] \"},\"2092\":{\"t\":\"其中 Content-Type 表示上传文件的 MIME 类型,Content-Length 表示文件的大小。\"},\"2093\":{\"t\":\"请求体中直接包含上传的文件数据,这属于原始的文件上传方式。也可以将文件数据放到表单字段中上传,这种情况下 Content-Type 为 multipart/form-data。\"},\"2094\":{\"t\":\"总之,构造文件上传的HTTP请求时,关键是请求体中包含文件二进制数据,并设置好 Content-Type 和 Content-Length 就可以了。\"},\"2095\":{\"t\":\"在Java中实现文件上传,可以使用以下代码构造HTTP请求:\"},\"2096\":{\"t\":\"// 上传的文件路径 String filePath = \\\"/path/to/file.jpg\\\"; // 创建请求体,包含文件数据 File file = new File(filePath); byte[] fileData = FileUtils.readFileToByteArray(file); // 构造请求参数 HttpPost uploadFile = new HttpPost(\\\"http://example.com/upload\\\"); uploadFile.setHeader(\\\"Content-Type\\\", \\\"image/jpeg\\\"); uploadFile.setHeader(\\\"Content-Length\\\", String.valueOf(fileData.length)); // 添加文件数据到请求体 ByteArrayEntity reqEntity = new ByteArrayEntity(fileData); uploadFile.setEntity(reqEntity); // 发送请求 HttpResponse response = HttpClientBuilder.create().build().execute(uploadFile); \"},\"2097\":{\"t\":\"主要步骤为:\"},\"2098\":{\"t\":\"获取上传文件的数据字节数组\"},\"2099\":{\"t\":\"创建 HttpPost 请求,设置请求头部信息,包括 Content-Type 和 Content-Length\"},\"2100\":{\"t\":\"将文件字节数组放到 ByteArrayEntity 中,添加到请求体\"},\"2101\":{\"t\":\"执行请求,上传文件\"},\"2102\":{\"t\":\"通过这种方式,就可以通过Java代码构造上传文件的HTTP请求了。\"},\"2103\":{\"h\":\"2.在下载文件时如何限制下载速率？（科大讯飞）\",\"a\":\"_2-在下载文件时如何限制下载速率-科大讯飞\"},\"2104\":{\"t\":\"在Java中下载文件时,可以通过限制读取文件的字节数来限制下载速率,主要步骤是:\"},\"2105\":{\"t\":\"使用URLConnection连接远程文件地址,获取InputStream\"},\"2106\":{\"t\":\"创建BufferedInputStream包装InputStream\"},\"2107\":{\"t\":\"读取文件时,每次只读取指定长度的字节数据\"},\"2108\":{\"t\":\"休眠一定的时间再读取下一个区块数据\"},\"2109\":{\"t\":\"重复第3、4步,直到读取完成\"},\"2110\":{\"t\":\"示例代码:\"},\"2111\":{\"t\":\"URL url = new URL(\\\"http://example.com/file.zip\\\"); //连接远程资源 URLConnection conn = url.openConnection(); //获取输入流 InputStream inStream = conn.getInputStream(); //创建缓冲输入流 BufferedInputStream bis = new BufferedInputStream(inStream); //设置单次读取字节数 int byteSize = 1024; //读取文件 byte[] buf = new byte[byteSize]; int len = 0; while ((len = bis.read(buf, 0, byteSize)) != -1) { //写入文件或进行其他处理 //休眠500毫秒 Thread.sleep(500); } bis.close(); inStream.close(); \"},\"2112\":{\"t\":\"通过调整每次读取的字节数byteSize和休眠时间,可以控制下载的速度。\"},\"2113\":{\"t\":\"这样通过控制读取文件数据的方式,可以实现限制Java中文件下载的速率。\"},\"2114\":{\"h\":\"3.线上项目OOM了怎么定位？（科大讯飞）\",\"a\":\"_3-线上项目oom了怎么定位-科大讯飞\"},\"2115\":{\"h\":\"3.1. OOM问题产生的原因\",\"a\":\"_3-1-oom问题产生的原因\"},\"2116\":{\"t\":\"所以在运行时能产生OOM问题的基本就是堆和栈了，其中在实际运行中最常见的就是堆内存溢出，我们这次产生的问题也是堆内存溢出导致，堆内存溢出原因主要是以下几种： （1）创建了一个超大对象，比较常见的是一个大数组，大集合 （2）对象引用没有释放，导致垃圾无法回收，产生内存泄漏，从而导致可用内存减少 （3）突然而来的高并发，导致流量飙升，资源占用迅速提升，服务器配置无法跟上实际使用 （4）重写finalize引发频繁GC，这个问题的典型案例是小米云的C++程序员重写finalize导致了线上OOM。在java里很少见\"},\"2117\":{\"t\":\"栈存储的是基础数据类型和堆对象的引用，这些数据理论上占用并不多，要达到内存溢出，那就是不断的叠加导致的这些数据暴增，《深入理解JAVA虚拟机》中给出的栈溢出的原因是线程请求的栈深度大于虚拟机允许的深度了，所谓的栈深度就是方法嵌套调用的次数，所以说的直白点就是嵌套循环调用次数太多，即考虑如下原因： （1）是否有递归调用 （2）是否有大量循环或死循环\"},\"2118\":{\"t\":\"如何定位是堆内存溢出还是栈内存溢出？\"},\"2119\":{\"t\":\"在java中出现堆内存溢出，可以在报错异常java.lang.OutOfMemoryError后明显看到\\\"java heap space\\\"的提示，即堆空间；而栈溢出可以看到StackOverflowError错误，一般这类错误在我们开发测试时就能暴露出来，所以通过报错内容的文字描述即可知道溢出位置。\"},\"2120\":{\"h\":\"3.2. 解决OOM问题思路\",\"a\":\"_3-2-解决oom问题思路\"},\"2121\":{\"t\":\"针对于栈内存溢出：一般通过日志找到报错的代码位置，针对性排查是否有循环调用、死循环的问题即可，针对堆内存溢出： （1）如果是调用量激增导致的内存不足，那么考虑增加机器或拓展内存资源 （2）机器资源充足，只是JVM分配的内存较小，考虑调大JVM内存，通过参数最大内存-Xmx 和最小内存-Xms （2）如果是超大对象，那么考虑业务场景，是否需要查询如此大的对象，考虑分步查出 （3）如果是对象引用没有释放，就排查代码逻辑，查看是否有没有正常释放对象引用的地方，比如ThreadLocal没有正常remove，导致对象一致引用。\"},\"2122\":{\"h\":\"3.3. 定位OOM报错\",\"a\":\"_3-3-定位oom报错\"},\"2123\":{\"t\":\"定位到服务器后，到对应服务器上通过top指令，查看是哪个进程占用内存资源较高\"},\"2124\":{\"t\":\"然后通过top -Hp 进程pid指令来查看是哪个线程占用的内存资源高\"},\"2125\":{\"t\":\"通过jmap指令导出堆日志\"},\"2126\":{\"t\":\"将dump文件下载到本地，利用各类工具进行分析\"},\"2127\":{\"t\":\"通过mat工具分析（推荐）\"},\"2128\":{\"t\":\"线上项目发生OOM(OutOfMemory)异常,可以从以下几个方面来定位:\"},\"2129\":{\"t\":\"查看OOM发生时JVM的堆内存使用情况,通过jmap、jstat等工具dump出堆转储快照,并使用MAT(Memory Analyzer Tool)等工具分析,看是哪部分对象使用内存过高。\"},\"2130\":{\"t\":\"检查代码中是否存在内存泄漏 - 分析堆转储快照找出suspicious的大对象,并跟踪它们的引用链,判断是否存在应用逻辑错误导致的内存泄漏。\"},\"2131\":{\"t\":\"分析GC(垃圾回收)日志,看Old Gen使用是否过高、GC效率是否低下等,可以判断是否存在不合理的对象分配或GC优化不足的情况。\"},\"2132\":{\"t\":\"使用 PROFILE 工具分析代码的内存分配情况,找出分配内存过多的代码热点。\"},\"2133\":{\"t\":\"检查线上是否存在代码或配置变更,导致应用对内存使用量增加。\"},\"2134\":{\"t\":\"检查虚拟机的内存参数设置是否合理,例如堆大小是否设置过小等。\"},\"2135\":{\"t\":\"排查是否存在其他组件比如数据库连接、缓存等内存消耗过高的情况。\"},\"2136\":{\"t\":\"参考：https://blog.csdn.net/qq_24950043/article/details/127174391?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-127174391-blog-77479344.235^v38^pc_relevant_yljh&spm=1001.2101.3001.4242.3&utm_relevant_index=7\"},\"2137\":{\"h\":\"4.线上项目卡顿有延迟如何找到哪地方的异常？\",\"a\":\"_4-线上项目卡顿有延迟如何找到哪地方的异常\"},\"2138\":{\"t\":\"线上项目出现卡顿或者延迟,可以通过以下思路和手段找到问题所在:\"},\"2139\":{\"t\":\"监控系统指标,比如CPU、内存、IO等,看是否有明显异常。这可以快速定位系统瓶颈所在。\"},\"2140\":{\"t\":\"通过打点统计接口响应时间变化,确定是否某条请求处理变慢。\"},\"2141\":{\"t\":\"对卡顿时间段dump线程栈,分析线程都在做什么,是否存在死锁或等待资源等。\"},\"2142\":{\"t\":\"对数据库SQL进行打点统计,找出慢SQL。\"},\"2143\":{\"t\":\"详情：https://www.youngxy.top/page/dev-tools/Linux.html#_6-1java-进程cpu飙升问题\"},\"2144\":{\"t\":\"参考：https://guoguocai.github.io/2022/09/12/JVM-常见线上问题的排查方法/\"},\"2145\":{\"h\":\"布隆过滤器\"},\"2146\":{\"h\":\"布隆过滤器\",\"a\":\"布隆过滤器\"},\"2147\":{\"h\":\"概述\",\"a\":\"概述\"},\"2148\":{\"t\":\"**布隆过滤器（Bloom Filter）**是一种空间高效的数据结构，用于判断一个元素是否在集合中。它由布隆在1970年提出，因此得名。\"},\"2149\":{\"t\":\"布隆过滤器的基本思想是，利用多个不同的哈希函数将一个元素映射到多个不同的位（或桶）上，并将这些位设置为1。当查询一个元素是否在布隆过滤器中时，将这个元素进行哈希操作，得到多个哈希值，并检查这些哈希值对应的位是否都为1。如果有任意一个位为0，则可以确定该元素不在布隆过滤器中；如果所有位都为1，则不能确定该元素一定在布隆过滤器中，因为可能存在哈希冲突，即不同的元素被映射到了相同的位上。\"},\"2150\":{\"t\":\"可以简单地将布隆过滤器理解为Set集合（其实他们之间差别还是很大的），可以向里边存放元素，然后判断元素是否存在。\"},\"2151\":{\"t\":\"布隆过滤器的优点：\"},\"2152\":{\"t\":\"时间复杂度低，增加和查询元素的时间复杂为O(N)，（N为哈希函数的个数，通常情况比较小）\"},\"2153\":{\"t\":\"保密性强，布隆过滤器不存储元素本身\"},\"2154\":{\"t\":\"存储空间小，如果允许存在一定的误判，布隆过滤器是非常节省空间的（相比其他数据结构如Set集合）（存在一种叠加）\"},\"2155\":{\"t\":\"布隆过滤器的缺点：\"},\"2156\":{\"t\":\"有一定的误判率，但是可以通过调整参数来降低\"},\"2157\":{\"t\":\"无法获取元素本身，只能判断是否存在\"},\"2158\":{\"t\":\"很难删除元素\"},\"2159\":{\"t\":\"适用场景\"},\"2160\":{\"t\":\"解决Redis缓存穿透问题\"},\"2161\":{\"t\":\"网络爬虫的网址去重\"},\"2162\":{\"t\":\"数据库中的数据查询优化\"},\"2163\":{\"t\":\"内容推荐，推荐过的不重复推荐\"},\"2164\":{\"h\":\"布隆过滤器的原理\",\"a\":\"布隆过滤器的原理\"},\"2165\":{\"t\":\"如上图，同一个数据经过三个不同的哈希函数获得不同的存储位置，然后将对应索引里的值改为1，只有三个索引对应的值都为1才能说明值已存在，有其中一个不为1都不行。可以试想，当哈市算法为1时，一个数据只对应一个索引，只要那个索引值为1就说明存在，由于哈希冲突的存在，出现误判的可能性是较大的，随着哈希函数数量增多，所需要的储存空间也越多，一个数值需要判断的索引也越多，自然出现误判的几率就小了。（存储01的为二进制数组）\"},\"2166\":{\"t\":\"当有多个数值存储时，就是下图的叠加情况\"},\"2167\":{\"t\":\"所以这也是为什么很难删除的原因，因为多个数值可能会用到同一索引，一旦删除其中一个就会导致严重误删。\"},\"2168\":{\"t\":\"小结：\"},\"2169\":{\"t\":\"哈希函数越多，所需存储空间越大，计算时间越长，误判率越低\"},\"2170\":{\"t\":\"空间计算\"},\"2171\":{\"t\":\"布隆过滤器提供两个参数，一个是预计存储元素个数n，一个是误判率。在添加元素之前，布隆过滤器有着初始的存储空间，也就是二进制数组的长度。当添加元素时，布隆过滤器会根据我们填入的这两个参数计算出二进制数组的大小以及hash函数的个数，既要满足我们的要求，又要使空间和计算量的开销都减到最小。\"},\"2172\":{\"h\":\"在SpringBoot中使用\",\"a\":\"在springboot中使用\"},\"2173\":{\"t\":\"添加依赖\"},\"2174\":{\"t\":\"<dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>30.1-jre</version> </dependency> <dependency> <groupId>com.github.mgunlogson.cuckoofilter</groupId> <artifactId>cuckoofilter</artifactId> <version>0.3.2</version> </dependency> \"},\"2175\":{\"t\":\"guava是Google开发的一个Java工具库，提供了许多实用的工具类和方法，包括布隆过滤器。cuckoofilter是一个开源的Java布隆过滤器实现。（cuckoofilter是布谷鸟过滤器）\"},\"2176\":{\"t\":\"创建布隆过滤器\"},\"2177\":{\"t\":\"import com.google.common.hash.Hashing; import com.google.common.hash.Funnels; import com.github.mgunlogson.cuckoofilter4j.CuckooFilter; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Component; import javax.annotation.PostConstruct; @Component public class BloomFilter { @Value(\\\"${bloomfilter.expectedInsertions}\\\") private int expectedInsertions; //期望插入数量 @Value(\\\"${bloomfilter.fpp}\\\") private double fpp; //误判率，这里都是在配置文件中配置了 private CuckooFilter<String> filter;//布谷鸟过滤器 @PostConstruct public void init() { filter = new CuckooFilter.Builder<>(Funnels.stringFunnel()) .withFalsePositiveProbability(fpp) .withExpectedInsertions(expectedInsertions) .build(); } //判断是否存在 public boolean mightContain(String element) { return filter.mightContain(element); } //添加元素 public void add(String element) { filter.put(element); } } \"},\"2178\":{\"t\":\"这里使用CuckooFilter实现了布隆过滤器（准确来说这里应该布叫谷鸟过滤器），使用guava提供的Hashing和Funnels类来计算元素的哈希值和将元素转换为字节数组。在init方法中，我们初始化了布隆过滤器，设置了期望的插入数量和误判率。在mightContain方法中，我们检查元素是否可能存在于布隆过滤器中。在add方法中，我们将元素添加到布隆过滤器中。\"},\"2179\":{\"t\":\"在使用布隆过滤器时，需要根据实际情况来选择合适的误判率和期望插入数量。误判率越低，布隆过滤器的大小就越大，且添加元素的时间也越长。期望插入数量越大，布隆过滤器的大小也就越大，但误判率会减小。\"},\"2180\":{\"h\":\"简单使用\",\"a\":\"简单使用\"},\"2181\":{\"t\":\"实现布隆过滤器的示例代码：\"},\"2182\":{\"t\":\"import com.google.common.hash.BloomFilter; import com.google.common.hash.Funnels; public class BloomFilterExample { public static void main(String[] args) { int expectedInsertions = 1000000;//期望插入元素数量 double fpp = 0.01;//期望误差率 BloomFilter<String> bloomFilter = BloomFilter.create(Funnels.stringFunnel(), expectedInsertions, fpp); // 添加元素到布隆过滤器中 bloomFilter.put(\\\"apple\\\"); bloomFilter.put(\\\"banana\\\"); bloomFilter.put(\\\"orange\\\"); // 判断元素是否在布隆过滤器中 System.out.println(bloomFilter.mightContain(\\\"apple\\\")); // true System.out.println(bloomFilter.mightContain(\\\"pear\\\")); // false System.out.println(bloomFilter.mightContain(\\\"banana\\\")); // true System.out.println(bloomFilter.mightContain(\\\"orange\\\")); // true } } \"},\"2183\":{\"h\":\"解决Redis缓存穿透逻辑\",\"a\":\"解决redis缓存穿透逻辑\"},\"2184\":{\"t\":\"创建布隆过滤器（布谷鸟过滤器）\"},\"2185\":{\"t\":\"import com.google.common.hash.Hashing; import com.google.common.hash.Funnels; import com.github.mgunlogson.cuckoofilter4j.CuckooFilter; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Component; import javax.annotation.PostConstruct; @Component public class BloomFilter { @Value(\\\"${bloomfilter.expectedInsertions}\\\") private int expectedInsertions; @Value(\\\"${bloomfilter.fpp}\\\") private double fpp; private CuckooFilter<String> filter; @PostConstruct public void init() { filter = new CuckooFilter.Builder<>(Funnels.stringFunnel()) .withFalsePositiveProbability(fpp) .withExpectedInsertions(expectedInsertions) .build(); } public boolean mightContain(String element) { return filter.mightContain(element); } public void add(String element) { filter.put(element); } } \"},\"2186\":{\"t\":\"缓存查询时的逻辑\"},\"2187\":{\"t\":\"在缓存查询时，我们首先使用布隆过滤器过滤掉不存在的数据，如果数据可能存在于缓存中，我们再去查询缓存。\"},\"2188\":{\"t\":\"@Autowired private RedisTemplate<String, Object> redisTemplate; @Autowired private BloomFilter bloomFilter; public Object getValue(String key) { // 先检查布隆过滤器中是否存在该key if (!bloomFilter.mightContain(key)) { return null; } // 查询缓存 ValueOperations<String, Object> ops = redisTemplate.opsForValue(); Object value = ops.get(key); // 如果缓存中不存在该key，将其添加到布隆过滤器中 if (value == null) { bloomFilter.add(key); } return value; } \"},\"2189\":{\"t\":\"参考：https://blog.csdn.net/2301_79205460/article/details/131916961\"},\"2190\":{\"h\":\"2.HTTP常见面试题\"},\"2191\":{\"h\":\"1.1HTTP 是什么？\",\"a\":\"_1-1http-是什么\"},\"2192\":{\"t\":\"HTTP 是超文本传输协议。\"},\"2193\":{\"h\":\"1.2HTTP 常见的状态码有哪些？\",\"a\":\"_1-2http-常见的状态码有哪些\"},\"2194\":{\"t\":\"1xx 类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。\"},\"2195\":{\"t\":\"2xx 类状态码表示服务器成功处理了客户端的请求，也是我们最愿意看到的状态。\"},\"2196\":{\"t\":\"「200 OK」是最常见的成功状态码，表示一切正常。如果是非 HEAD 请求，服务器返回的响应头都会有 body 数据。\"},\"2197\":{\"t\":\"「204 No Content」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。\"},\"2198\":{\"t\":\"「206 Partial Content」是应用于 HTTP 分块下载或断点续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。\"},\"2199\":{\"t\":\"3xx 类状态码表示客户端请求的资源发生了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向。\"},\"2200\":{\"t\":\"「301 Moved Permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。\"},\"2201\":{\"t\":\"「302 Found」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。\"},\"2202\":{\"t\":\"301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。\"},\"2203\":{\"t\":\"「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，也就是告诉客户端可以继续使用缓存资源，用于缓存控制。\"},\"2204\":{\"t\":\"4xx 类状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。\"},\"2205\":{\"t\":\"「400 Bad Request」表示客户端请求的报文有错误，但只是个笼统的错误。\"},\"2206\":{\"t\":\"「403 Forbidden」表示服务器禁止访问资源，并不是客户端的请求出错。\"},\"2207\":{\"t\":\"「404 Not Found」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。\"},\"2208\":{\"t\":\"5xx 类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。\"},\"2209\":{\"t\":\"「500 Internal Server Error」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。\"},\"2210\":{\"t\":\"「501 Not Implemented」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。\"},\"2211\":{\"t\":\"「502 Bad Gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。\"},\"2212\":{\"t\":\"「503 Service Unavailable」表示服务器当前很忙，暂时无法响应客户端，类似“网络服务正忙，请稍后重试”的意思。\"},\"2213\":{\"h\":\"1.3HTTP 常见字段有哪些？\",\"a\":\"_1-3http-常见字段有哪些\"},\"2214\":{\"t\":\"Host 字段：客户端发送请求时，用来指定服务器的域名。\"},\"2215\":{\"t\":\"Content-Length 字段：服务器在返回数据时，会有 Content-Length 字段，表明本次回应的数据长度。\"},\"2216\":{\"t\":\"Connection 字段：最常用于客户端要求服务器使用「HTTP 长连接」机制，以便其他请求复用。HTTP/1.1 版本的默认连接都是长连接，但为了兼容老版本的 HTTP，需要指定 Connection 首部字段的值为 Keep-Alive。\"},\"2217\":{\"t\":\"Content-Type 字段：用于服务器回应时，告诉客户端，本次数据是什么格式。\"},\"2218\":{\"h\":\"1.4GET 和 POST 有什么区别？\",\"a\":\"_1-4get-和-post-有什么区别\"},\"2219\":{\"t\":\"先说明下安全和幂等的概念：\"},\"2220\":{\"t\":\"在 HTTP 协议里，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。\"},\"2221\":{\"t\":\"所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。\"},\"2222\":{\"t\":\"GET 和 POST 方法都是安全和幂等的吗？\"},\"2223\":{\"t\":\"GET 方法就是安全且幂等的，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。所以，可以对 GET 请求的数据做缓存，这个缓存可以做到浏览器本身上（彻底避免浏览器发请求），也可以做到代理上（如nginx），而且在浏览器中 GET 请求可以保存为书签。\"},\"2224\":{\"t\":\"POST 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以不是幂等的。所以，浏览器一般不会缓存 POST 请求，也不能把 POST 请求保存为书签。\"},\"2225\":{\"h\":\"1.5HTTP 缓存有哪些实现方式？\",\"a\":\"_1-5http-缓存有哪些实现方式\"},\"2226\":{\"t\":\"HTTP 缓存有两种实现方式，分别是强制缓存和协商缓存。\"},\"2227\":{\"h\":\"1.5.1什么是强制缓存？\",\"a\":\"_1-5-1什么是强制缓存\"},\"2228\":{\"t\":\"强缓存指的是只要浏览器判断缓存没有过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在于浏览器这边。\"},\"2229\":{\"t\":\"强缓存是利用下面这两个 HTTP 响应头部（Response Header）字段实现的，它们都用来表示资源在客户端缓存的有效期：\"},\"2230\":{\"t\":\"Cache-Control， 是一个相对时间；\"},\"2231\":{\"t\":\"Expires，是一个绝对时间；\"},\"2232\":{\"t\":\"如果 HTTP 响应头部同时有 Cache-Control 和 Expires 字段的话，Cache-Control 的优先级高于 Expires 。\"},\"2233\":{\"t\":\"具体的实现流程如下：\"},\"2234\":{\"t\":\"当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在 Response 头部加上 Cache-Control，Cache-Control 中设置了过期时间大小；\"},\"2235\":{\"t\":\"浏览器再次请求访问服务器中的该资源时，会先通过请求资源的时间与 Cache-Control 中设置的过期时间大小，来计算出该资源是否过期，如果没有，则使用该缓存，否则重新请求服务器；\"},\"2236\":{\"t\":\"服务器再次收到请求后，会再次更新 Response 头部的 Cache-Control。\"},\"2237\":{\"h\":\"1.5.2什么是协商缓存？\",\"a\":\"_1-5-2什么是协商缓存\"},\"2238\":{\"t\":\"当我们在浏览器使用开发者工具的时候，你可能会看到过某些请求的响应码是 304，这个是告诉浏览器可以使用本地缓存的资源，通常这种通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存\"},\"2239\":{\"t\":\"协商缓存可以基于两种头部来实现。\"},\"2240\":{\"t\":\"第一种：请求头部中的 If-Modified-Since 字段与响应头部中的 Last-Modified 字段实现，这两个字段的意思是：\"},\"2241\":{\"t\":\"响应头部中的 Last-Modified：标示这个响应资源的最后修改时间；\"},\"2242\":{\"t\":\"请求头部中的 If-Modified-Since：当资源过期了，发现响应头中具有 Last-Modified 声明，则再次发起请求的时候带上 Last-Modified 的时间，服务器收到请求后发现有 If-Modified-Since 则与被请求资源的最后修改时间进行对比（Last-Modified），如果最后修改时间较新（大），说明资源又被改过，则返回最新资源，HTTP 200 OK；如果最后修改时间较旧（小），说明资源无新修改，响应 HTTP 304 走缓存。\"},\"2243\":{\"t\":\"第二种：请求头部中的 If-None-Match 字段与响应头部中的 ETag 字段，这两个字段的意思是：\"},\"2244\":{\"t\":\"响应头部中 Etag：唯一标识响应资源；\"},\"2245\":{\"t\":\"请求头部中的 If-None-Match：当资源过期时，浏览器发现响应头里有 Etag，则再次向服务器发起请求时，会将请求头 If-None-Match 值设置为 Etag 的值。服务器收到请求后进行比对，如果资源没有变化返回 304，如果资源变化了返回 200。\"},\"2246\":{\"t\":\"第一种实现方式是基于时间实现的，第二种实现方式是基于一个唯一标识实现的，相对来说后者可以更加准确地判断文件内容是否被修改，避免由于时间篡改导致的不可靠问题。\"},\"2247\":{\"t\":\"如果在第一次请求资源的时候，服务端返回的 HTTP 响应头部同时有 Etag 和 Last-Modified 字段，那么客户端再下一次请求的时候，如果带上了 ETag 和 Last-Modified 字段信息给服务端，这时 Etag 的优先级更高，也就是服务端先会判断 Etag 是否变化了，如果 Etag 有变化就不用在判断 Last-Modified 了，如果 Etag 没有变化，然后再看 Last-Modified。\"},\"2248\":{\"t\":\"注意，协商缓存这两个字段都需要配合强制缓存中 Cache-Control 字段来使用，只有在未能命中强制缓存的时候，才能发起带有协商缓存字段的请求。\"},\"2249\":{\"t\":\"当使用 ETag 字段实现的协商缓存的过程：\"},\"2250\":{\"t\":\"当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在 Response 头部加上 ETag 唯一标识，这个唯一标识的值是根据当前请求的资源生成的；\"},\"2251\":{\"t\":\"当浏览器再次请求访问服务器中的该资源时，首先会先检查强制缓存是否过期：\"},\"2252\":{\"t\":\"如果没有过期，则直接使用本地缓存；\"},\"2253\":{\"t\":\"如果缓存过期了，会在 Request 头部加上 If-None-Match 字段，该字段的值就是 ETag 唯一标识；\"},\"2254\":{\"t\":\"服务器再次收到请求后，\"},\"2255\":{\"t\":\"会根据请求中的 If-None-Match 值与当前请求的资源生成的唯一标识进行比较：\"},\"2256\":{\"t\":\"如果值相等，则返回 304 Not Modified，不会返回资源；\"},\"2257\":{\"t\":\"如果不相等，则返回 200 状态码和返回资源，并在 Response 头部加上新的 ETag 唯一标识；\"},\"2258\":{\"t\":\"如果浏览器收到 304 的请求响应状态码，则会从本地缓存中加载资源，否则更新资源。\"},\"2259\":{\"h\":\"1.6HTTP/1.1 的优点有哪些？\",\"a\":\"_1-6http-1-1-的优点有哪些\"},\"2260\":{\"t\":\"HTTP 最突出的优点是「简单、灵活和易于扩展、应用广泛和跨平台」。\"},\"2261\":{\"t\":\"简单\"},\"2262\":{\"t\":\"HTTP 基本的报文格式就是 header + body，头部信息也是 key-value 简单文本的形式，易于理解，降低了学习和使用的门槛。\"},\"2263\":{\"t\":\"灵活和易于扩展\"},\"2264\":{\"t\":\"HTTP 协议里的各类请求方法、URI/URL、状态码、头字段等每个组成要求都没有被固定死，都允许开发人员自定义和扩充。\"},\"2265\":{\"t\":\"同时 HTTP 由于是工作在应用层（ OSI 第七层），则它下层可以随意变化，比如：\"},\"2266\":{\"t\":\"HTTPS 就是在 HTTP 与 TCP 层之间增加了 SSL/TLS 安全传输层；\"},\"2267\":{\"t\":\"HTTP/1.1 和 HTTP/2.0 传输协议使用的是 TCP 协议，而到了 HTTP/3.0 传输协议改用了 UDP 协议。\"},\"2268\":{\"t\":\"应用广泛和跨平台\"},\"2269\":{\"t\":\"互联网发展至今，HTTP 的应用范围非常的广泛，从台式机的浏览器到手机上的各种 APP，从看新闻、刷贴吧到购物、理财、吃鸡，HTTP 的应用遍地开花，同时天然具有跨平台的优越性。\"},\"2270\":{\"h\":\"1.7HTTP/1.1 的缺点有哪些？\",\"a\":\"_1-7http-1-1-的缺点有哪些\"},\"2271\":{\"t\":\"HTTP 协议里有优缺点一体的双刃剑，分别是「无状态、明文传输」，同时还有一大缺点「不安全」。\"},\"2272\":{\"t\":\"无状态双刃剑\"},\"2273\":{\"t\":\"无状态的好处，因为服务器不会去记忆 HTTP 的状态，所以不需要额外的资源来记录状态信息，这能减轻服务器的负担，能够把更多的 CPU 和内存用来对外提供服务。\"},\"2274\":{\"t\":\"无状态的坏处，既然服务器没有记忆能力，它在完成有关联性的操作时会非常麻烦。\"},\"2275\":{\"t\":\"例如登录->添加购物车->下单->结算->支付，这系列操作都要知道用户的身份才行。但服务器不知道这些请求是有关联的，每次都要问一遍身份信息。\"},\"2276\":{\"t\":\"这样每操作一次，都要验证信息，这样的购物体验还能愉快吗？别问，问就是酸爽！\"},\"2277\":{\"t\":\"对于无状态的问题，解法方案有很多种，其中比较简单的方式用 Cookie 技术。\"},\"2278\":{\"t\":\"Cookie 通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。\"},\"2279\":{\"t\":\"相当于，在客户端第一次请求后，服务器会下发一个装有客户信息的「小贴纸」，后续客户端请求服务器的时候，带上「小贴纸」，服务器就能认得了了，\"},\"2280\":{\"t\":\"明文传输双刃剑\"},\"2281\":{\"t\":\"明文意味着在传输过程中的信息，是可方便阅读的，比如 Wireshark 抓包都可以直接肉眼查看，为我们调试工作带了极大的便利性。\"},\"2282\":{\"t\":\"但是这正是这样，HTTP 的所有信息都暴露在了光天化日下，相当于信息裸奔。在传输的漫长的过程中，信息的内容都毫无隐私可言。\"},\"2283\":{\"t\":\"不安全\"},\"2284\":{\"t\":\"HTTP 比较严重的缺点就是不安全：\"},\"2285\":{\"t\":\"通信使用明文（不加密），内容可能会被窃听。比如，账号信息容易泄漏，那你号没了。\"},\"2286\":{\"t\":\"不验证通信方的身份，因此有可能遭遇伪装。比如，访问假的淘宝、拼多多，那你钱没了。\"},\"2287\":{\"t\":\"无法证明报文的完整性，所以有可能已遭篡改。比如，网页上植入垃圾广告，视觉污染，眼没了。\"},\"2288\":{\"t\":\"HTTP 的安全问题，可以用 HTTPS 的方式解决，也就是通过引入 SSL/TLS 层，使得在安全上达到了极致。\"},\"2289\":{\"h\":\"1.8HTTP/1.1 的性能如何？\",\"a\":\"_1-8http-1-1-的性能如何\"},\"2290\":{\"t\":\"HTTP 协议是基于 TCP/IP，并且使用了「请求 - 应答」的通信模式，所以性能的关键就在这两点里。\"},\"2291\":{\"t\":\"长连接\"},\"2292\":{\"t\":\"早期 HTTP/1.0 性能上的一个很大的问题，那就是每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无谓的 TCP 连接建立和断开，增加了通信开销。\"},\"2293\":{\"t\":\"为了解决上述 TCP 连接问题，HTTP/1.1 提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。\"},\"2294\":{\"t\":\"持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。\"},\"2295\":{\"t\":\"管道网络传输\"},\"2296\":{\"t\":\"HTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。\"},\"2297\":{\"t\":\"即可在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。\"},\"2298\":{\"t\":\"但是服务器必须按照接收请求的顺序发送对这些管道化请求的响应。\"},\"2299\":{\"t\":\"如果服务端在处理 A 请求时耗时比较长，那么后续的请求的处理都会被阻塞住，这称为「队头堵塞」。\"},\"2300\":{\"t\":\"所以，HTTP/1.1 管道解决了请求的队头阻塞，但是没有解决响应的队头阻塞。\"},\"2301\":{\"t\":\"实际上 HTTP/1.1 管道化技术不是默认开启，而且浏览器基本都没有支持，大家知道有这个功能，但是没有被使用就行了。\"},\"2302\":{\"t\":\"队头阻塞\"},\"2303\":{\"t\":\"「请求 - 应答」的模式会造成 HTTP 的性能问题。为什么呢？\"},\"2304\":{\"t\":\"因为当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一同被阻塞了，会招致客户端一直请求不到数据，这也就是「队头阻塞」，好比上班的路上塞车。\"},\"2305\":{\"h\":\"1.9HTTP 与 HTTPS 有哪些区别？\",\"a\":\"_1-9http-与-https-有哪些区别\"},\"2306\":{\"t\":\"HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。\"},\"2307\":{\"t\":\"HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。\"},\"2308\":{\"t\":\"两者的默认端口不一样，HTTP 默认端口号是 80，HTTPS 默认端口号是 443。\"},\"2309\":{\"t\":\"HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。\"},\"2310\":{\"h\":\"1.10HTTPS 是如何建立连接的？其间交互了什么？\",\"a\":\"_1-10https-是如何建立连接的-其间交互了什么\"},\"2311\":{\"t\":\"SSL/TLS 协议基本流程：\"},\"2312\":{\"t\":\"客户端向服务器索要并验证服务器的公钥。\"},\"2313\":{\"t\":\"双方协商生产「会话秘钥」。\"},\"2314\":{\"t\":\"双方采用「会话秘钥」进行加密通信。\"},\"2315\":{\"t\":\"前两步也就是 SSL/TLS 的建立过程，也就是 TLS 握手阶段。\"},\"2316\":{\"t\":\"TLS 的「握手阶段」涉及四次通信，使用不同的密钥交换算法，TLS 握手流程也会不一样的，现在常用的密钥交换算法有两种：RSA 算法和 ECDHE。不过，基于 RSA 算法的 HTTPS 存在「前向安全」的问题：如果服务端的私钥泄漏了，过去被第三方截获的所有 TLS 通讯密文都会被破解。为了解决这个问题，后面就出现了 ECDHE 密钥协商算法，我们现在大多数网站使用的正是 ECDHE 密钥协商算法。\"},\"2317\":{\"t\":\"TLS 协议建立的详细流程：\"},\"2318\":{\"t\":\"1. ClientHello\"},\"2319\":{\"t\":\"首先，由客户端向服务器发起加密通信请求，也就是 ClientHello 请求。\"},\"2320\":{\"t\":\"在这一步，客户端主要向服务器发送以下信息：\"},\"2321\":{\"t\":\"（1）客户端支持的 TLS 协议版本，如 TLS 1.2 版本。\"},\"2322\":{\"t\":\"（2）客户端生产的随机数（Client Random），后面用于生成「会话秘钥」条件之一。\"},\"2323\":{\"t\":\"（3）客户端支持的密码套件列表，如 RSA 加密算法。\"},\"2324\":{\"t\":\"2. SeverHello\"},\"2325\":{\"t\":\"服务器收到客户端请求后，向客户端发出响应，也就是 SeverHello。服务器回应的内容有如下内容：\"},\"2326\":{\"t\":\"（1）确认 TLS 协议版本，如果浏览器不支持，则关闭加密通信。\"},\"2327\":{\"t\":\"（2）服务器生产的随机数（Server Random），也是后面用于生产「会话秘钥」条件之一。\"},\"2328\":{\"t\":\"（3）确认的密码套件列表，如 RSA 加密算法。\"},\"2329\":{\"t\":\"（4）服务器的数字证书。\"},\"2330\":{\"t\":\"3.客户端回应\"},\"2331\":{\"t\":\"客户端收到服务器的回应之后，首先通过浏览器或者操作系统中的 CA 公钥，确认服务器的数字证书的真实性。\"},\"2332\":{\"t\":\"如果证书没有问题，客户端会从数字证书中取出服务器的公钥，然后使用它加密报文，向服务器发送如下信息：\"},\"2333\":{\"t\":\"（1）一个随机数（pre-master key）。该随机数会被服务器公钥加密。\"},\"2334\":{\"t\":\"（2）加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信。\"},\"2335\":{\"t\":\"（3）客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供服务端校验。\"},\"2336\":{\"t\":\"上面第一项的随机数是整个握手阶段的第三个随机数，会发给服务端，所以这个随机数客户端和服务端都是一样的。\"},\"2337\":{\"t\":\"服务器和客户端有了这三个随机数（Client Random、Server Random、pre-master key），接着就用双方协商的加密算法，各自生成本次通信的「会话秘钥」。\"},\"2338\":{\"t\":\"4. 服务器的最后回应\"},\"2339\":{\"t\":\"服务器收到客户端的第三个随机数（pre-master key）之后，通过协商的加密算法，计算出本次通信的「会话秘钥」。\"},\"2340\":{\"t\":\"然后，向客户端发送最后的信息：\"},\"2341\":{\"t\":\"（1）加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信。\"},\"2342\":{\"t\":\"（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验。\"},\"2343\":{\"t\":\"至此，整个 TLS 的握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的 HTTP 协议，只不过用「会话秘钥」加密内容。\"},\"2344\":{\"h\":\"1.11HTTPS 一定安全可靠吗？\",\"a\":\"_1-11https-一定安全可靠吗\"},\"2345\":{\"t\":\"HTTPS 协议本身到目前为止还是没有任何漏洞的，即使你成功进行中间人攻击，本质上是利用了客户端的漏洞（用户点击继续访问或者被恶意导入伪造的根证书），并不是 HTTPS 不够安全。\"},\"2346\":{\"h\":\"3.HTTP演变\"},\"2347\":{\"h\":\"1.1HTTP/1.1 相比 HTTP/1.0 提高了什么性能？\",\"a\":\"_1-1http-1-1-相比-http-1-0-提高了什么性能\"},\"2348\":{\"t\":\"HTTP/1.1 相比 HTTP/1.0 性能上的改进：\"},\"2349\":{\"t\":\"使用长连接的方式改善了 HTTP/1.0 短连接造成的性能开销。\"},\"2350\":{\"t\":\"支持管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。\"},\"2351\":{\"t\":\"但 HTTP/1.1 还是有性能瓶颈：\"},\"2352\":{\"t\":\"请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 Body 的部分；\"},\"2353\":{\"t\":\"发送冗长的首部。每次互相发送相同的首部造成的浪费较多；\"},\"2354\":{\"t\":\"服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞；\"},\"2355\":{\"t\":\"没有请求优先级控制；\"},\"2356\":{\"t\":\"请求只能从客户端开始，服务器只能被动响应。\"},\"2357\":{\"h\":\"1.2HTTP/2 做了什么优化？\",\"a\":\"_1-2http-2-做了什么优化\"},\"2358\":{\"t\":\"HTTP/2 协议是基于 HTTPS 的，所以 HTTP/2 的安全性也是有保障的。\"},\"2359\":{\"t\":\"那 HTTP/2 相比 HTTP/1.1 性能上的改进：\"},\"2360\":{\"t\":\"头部压缩:如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你消除重复的部分。\"},\"2361\":{\"t\":\"二进制格式:采用了二进制格式，头信息和数据体都是二进制。\"},\"2362\":{\"t\":\"并发传输:引出了 Stream 概念，多个 Stream 复用在一条 TCP 连接。针对不同的 HTTP 请求用独一无二的 Stream ID 来区分，接收端可以通过 Stream ID 有序组装成 HTTP 消息，不同 Stream 的帧是可以乱序发送的，因此可以并发不同的 Stream ，也就是 HTTP/2 可以并行交错地发送请求和响应。\"},\"2363\":{\"t\":\"服务器主动推送资源:客户端和服务器双方都可以建立 Stream。\"},\"2364\":{\"t\":\"HTTP/2 有什么缺陷？\"},\"2365\":{\"t\":\"HTTP/2 通过 Stream 的并发能力，解决了 HTTP/1 队头阻塞的问题，看似很完美了，但是 HTTP/2 还是存在“队头阻塞”的问题，只不过问题不是在 HTTP 这一层面，而是在 TCP 这一层。\"},\"2366\":{\"t\":\"HTTP/2 是基于 TCP 协议来传输数据的，TCP 是字节流协议，TCP 层必须保证收到的字节数据是完整且连续的，这样内核才会将缓冲区里的数据返回给 HTTP 应用，那么当「前 1 个字节数据」没有到达时，后收到的字节数据只能存放在内核缓冲区里，只有等到这 1 个字节数据到达时，HTTP/2 应用层才能从内核中拿到数据，这就是 HTTP/2 队头阻塞问题。\"},\"2367\":{\"t\":\"为什么现在广泛使用的还是HTTP1.1？\"},\"2368\":{\"t\":\"HTTP1.1已经足够满足大多数网站和应用的需要。许多网站其实用不上HTTP2带来的全部优势。\"},\"2369\":{\"t\":\"HTTP2相对较新,2015年才正式发布。采用和部署HTTP2需要服务器和客户端同时支持。许多老旧系统需要升级才能使用。\"},\"2370\":{\"t\":\"HTTP2主要优势是在移动互联网和高负载下更好的性能。对于传统的网站改进不明显。采用HTTP2成本和收益不对等。\"},\"2371\":{\"t\":\"所以简单来说,HTTP1.1仍普遍使用是因为其成熟稳定、广泛兼容,且对许多网站来说HTTP2带来的优势还不够明显。但随着时间推移,HTTP2会被越来越多网站采用。\"},\"2372\":{\"h\":\"5.IP常见面试题\"},\"2373\":{\"h\":\"1.IP 地址的基础知识\",\"a\":\"_1-ip-地址的基础知识\"},\"2374\":{\"t\":\"IP 地址（IPv4 地址）由 32 位正整数来表示，IP 地址在计算机是以二进制的方式处理的。每 8 位作为一组，并用点分十进制的表示方式。\"},\"2375\":{\"t\":\"IPv6 的地址是 128 位的，这可分配的地址数量是大的惊人，说个段子 **IPv6 可以保证地球上的每粒沙子都能被分配到一个 IP 地址。**每 16 位作为一组，每组用冒号 「:」 隔开。\"},\"2376\":{\"h\":\"1.1IP 地址的分类\",\"a\":\"_1-1ip-地址的分类\"},\"2377\":{\"t\":\"IP 地址分类成了 5 种类型，分别是 A 类、B 类、C 类、D 类、E 类。\"},\"2378\":{\"h\":\"2.ARP协议\",\"a\":\"_2-arp协议\"},\"2379\":{\"t\":\"主机会通过广播发送 ARP 请求，这个包中包含了想要知道的 MAC 地址的主机 IP 地址。\"},\"2380\":{\"t\":\"当同个链路中的所有设备收到 ARP 请求时，会去拆开 ARP 请求包里的内容，如果 ARP 请求包中的目标 IP 地址与自己的 IP 地址一致，那么这个设备就将自己的 MAC 地址塞入 ARP 响应包返回给主机。\"},\"2381\":{\"t\":\"操作系统通常会把第一次通过 ARP 获取的 MAC 地址缓存起来，以便下次直接从缓存中找到对应 IP 地址的 MAC 地址。\"},\"2382\":{\"t\":\"不过，MAC 地址的缓存是有一定期限的，超过这个期限，缓存的内容将被清除。\"},\"2383\":{\"h\":\"3.DNS协议\",\"a\":\"_3-dns协议\"},\"2384\":{\"t\":\"域名的层级关系类似一个树状结构：\"},\"2385\":{\"t\":\"根 DNS 服务器\"},\"2386\":{\"t\":\"顶级域 DNS 服务器（com）\"},\"2387\":{\"t\":\"权威 DNS 服务器（server.com）\"},\"2388\":{\"t\":\"浏览器首先看一下自己的缓存里有没有，如果没有就向操作系统的缓存要，还没有就检查本机域名解析文件 hosts，如果还是没有，就会 DNS 服务器进行查询，查询的过程如下：\"},\"2389\":{\"t\":\"客户端首先会发出一个 DNS 请求，问 www.server.com 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。\"},\"2390\":{\"t\":\"本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 www.server.com，则它直接返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 www.server.com 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。\"},\"2391\":{\"t\":\"根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“www.server.com 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”\"},\"2392\":{\"t\":\"本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 www.server.com 的 IP 地址吗？”\"},\"2393\":{\"t\":\"顶级域名服务器说：“我给你负责 www.server.com 区域的权威 DNS 服务器的地址，你去问它应该能问到”。\"},\"2394\":{\"t\":\"本地 DNS 于是转向问权威 DNS 服务器：“老三，www.server.com对应的IP是啥呀？” server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。\"},\"2395\":{\"t\":\"权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。\"},\"2396\":{\"t\":\"本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。\"},\"2397\":{\"h\":\"4.TCP和UDP常见面试题\"},\"2398\":{\"t\":\"大家好，这篇文章来一起看下TCP中那些烦人（常考）的面试题，话不多说，发车！\"},\"2399\":{\"t\":\"为了检验对这些知识掌握的深度，先给大家列出目录：\"},\"2400\":{\"t\":\"1.TCP基础\"},\"2401\":{\"t\":\"TCP 头格式有哪些？\"},\"2402\":{\"t\":\"为什么需要 TCP 协议？ TCP 工作在哪一层？\"},\"2403\":{\"t\":\"什么是 TCP ？\"},\"2404\":{\"t\":\"什么是 TCP 连接？\"},\"2405\":{\"t\":\"如何唯一确定一个 TCP 连接呢？\"},\"2406\":{\"t\":\"UDP 和 TCP 有什么区别呢？分别的应用场景是？\"},\"2407\":{\"t\":\"TCP 和 UDP 可以使用同一个端口吗？\"},\"2408\":{\"t\":\"2.TCP三次握手\"},\"2409\":{\"t\":\"TCP 三次握手过程是怎样的？\"},\"2410\":{\"t\":\"如何在 Linux 系统中查看 TCP 状态？\"},\"2411\":{\"t\":\"为什么是三次握手？不是两次、四次？\"},\"2412\":{\"t\":\"为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？\"},\"2413\":{\"t\":\"初始序列号 ISN 是如何随机产生的？\"},\"2414\":{\"t\":\"既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？\"},\"2415\":{\"t\":\"第一次握手丢失了，会发生什么？\"},\"2416\":{\"t\":\"第二次握手丢失了，会发生什么？\"},\"2417\":{\"t\":\"第三次握手丢失了，会发生什么？\"},\"2418\":{\"t\":\"什么是 SYN 攻击？如何避免 SYN 攻击？\"},\"2419\":{\"t\":\"3.TCP四次挥手\"},\"2420\":{\"t\":\"TCP 四次挥手过程是怎样的？\"},\"2421\":{\"t\":\"为什么挥手需要四次？\"},\"2422\":{\"t\":\"第一次挥手丢失了，会发生什么？\"},\"2423\":{\"t\":\"第二次挥手丢失了，会发生什么？\"},\"2424\":{\"t\":\"第三次挥手丢失了，会发生什么？\"},\"2425\":{\"t\":\"第四次挥手丢失了，会发生什么？\"},\"2426\":{\"t\":\"为什么 TIME_WAIT 等待的时间是 2MSL？\"},\"2427\":{\"t\":\"为什么需要 TIME_WAIT 状态？\"},\"2428\":{\"t\":\"TIME_WAIT 过多有什么危害？\"},\"2429\":{\"t\":\"如何优化 TIME_WAIT？\"},\"2430\":{\"t\":\"服务器出现大量 TIME_WAIT 状态的原因有哪些？\"},\"2431\":{\"t\":\"服务器出现大量 CLOSE_WAIT 状态的原因有哪些？\"},\"2432\":{\"t\":\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"},\"2433\":{\"t\":\"如果已经建立了连接，但是服务端的进程崩溃会发生什么？\"},\"2434\":{\"t\":\"4.Socket 编程\"},\"2435\":{\"t\":\"针对 TCP 应该如何 Socket 编程？\"},\"2436\":{\"t\":\"listen 时候参数 backlog 的意义？\"},\"2437\":{\"t\":\"accept 发生在三次握手的哪一步？\"},\"2438\":{\"t\":\"客户端调用 close 了，连接是断开的流程是什么？\"},\"2439\":{\"t\":\"没有 accept，能建立 TCP 连接吗？\"},\"2440\":{\"t\":\"没有 listen，能建立 TCP 连接吗？\"},\"2441\":{\"h\":\"1.TCP基础\",\"a\":\"_1-tcp基础\"},\"2442\":{\"h\":\"1.1TCP 头格式有哪些？\",\"a\":\"_1-1tcp-头格式有哪些\"},\"2443\":{\"t\":\"看了大佬小林coding的文章，我总结面试常考的也就是：\"},\"2444\":{\"t\":\"序列号：在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就「累加」一次该「数据字节数」的大小。用来解决网络包乱序问题。\"},\"2445\":{\"t\":\"确认应答号：指下一次「期望」收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。用来解决丢包的问题。\"},\"2446\":{\"t\":\"控制位：\"},\"2447\":{\"t\":\"ACK：该位为 1 时，「确认应答」的字段变为有效，TCP 规定除了最初建立连接时的 SYN 包之外该位必须设置为 1 。\"},\"2448\":{\"t\":\"RST：该位为 1 时，表示 TCP 连接中出现异常必须强制断开连接。\"},\"2449\":{\"t\":\"SYN：该位为 1 时，表示希望建立连接，并在其「序列号」的字段进行序列号初始值的设定。\"},\"2450\":{\"t\":\"FIN：该位为 1 时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 FIN 位为 1 的 TCP 段。\"},\"2451\":{\"h\":\"1.2为什么需要 TCP 协议？ TCP 工作在哪一层？\",\"a\":\"_1-2为什么需要-tcp-协议-tcp-工作在哪一层\"},\"2452\":{\"t\":\"原因：IP 层是「不可靠」的，它不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据的完整性。如果需要保障网络数据包的可靠性，那么就需要由上层（传输层）的 TCP 协议来负责。\"},\"2453\":{\"t\":\"因为 TCP 是一个工作在传输层的可靠数据传输的服务，它能确保接收端接收的网络包是无损坏、无间隔、非冗余和按序的。\"},\"2454\":{\"h\":\"1.3什么是 TCP ？\",\"a\":\"_1-3什么是-tcp\"},\"2455\":{\"t\":\"总结一句话：TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。\"},\"2456\":{\"t\":\"具体的给面试官扯一扯：\"},\"2457\":{\"t\":\"面向连接：一定是「一对一」才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；\"},\"2458\":{\"t\":\"可靠的：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；\"},\"2459\":{\"t\":\"字节流：用户消息通过 TCP 协议传输时，消息可能会被操作系统「分组」成多个的 TCP 报文，如果接收方的程序如果不知道「消息的边界」，是无法读出一个有效的用户消息的。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。\"},\"2460\":{\"h\":\"1.4什么是 TCP 连接？\",\"a\":\"_1-4什么是-tcp-连接\"},\"2461\":{\"t\":\"大白话：用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括 Socket、序列号和窗口大小称为连接。\"},\"2462\":{\"t\":\"包含三个东西：\"},\"2463\":{\"t\":\"Socket：由 IP 地址和端口号组成\"},\"2464\":{\"t\":\"序列号：用来解决乱序问题等\"},\"2465\":{\"t\":\"窗口大小：用来做流量控制\"},\"2466\":{\"h\":\"1.5如何唯一确定一个 TCP 连接呢？\",\"a\":\"_1-5如何唯一确定一个-tcp-连接呢\"},\"2467\":{\"t\":\"TCP 四元组可以唯一的确定一个连接，四元组包括如下：\"},\"2468\":{\"t\":\"源地址（IP地址，32位，存在IP头部）\"},\"2469\":{\"t\":\"源端口（端口，16位，存在TCP头部）\"},\"2470\":{\"t\":\"目的地址（IP地址，32位，存在IP头部）\"},\"2471\":{\"t\":\"目的端口（端口，16位，存在TCP头部）\"},\"2472\":{\"t\":\"这地方有个常见面试题：\"},\"2473\":{\"t\":\"有一个 IP 的服务端监听了一个端口，它的 TCP 的最大连接数是多少？\"},\"2474\":{\"t\":\"服务端通常固定在某个本地端口上监听，等待客户端的连接请求。\"},\"2475\":{\"t\":\"因此，客户端 IP 和端口是可变的，其理论值计算公式如下:\"},\"2476\":{\"t\":\"TCP的最大连接数=客户端的IP数⋅客户端的端口数\"},\"2477\":{\"t\":\"对 IPv4，客户端的 IP 数最多为 2 的 32 次方，客户端的端口数最多为 2 的 16 次方，也就是服务端单机最大 TCP 连接数，约为 2 的 48 次方。\"},\"2478\":{\"t\":\"当然，服务端最大并发 TCP 连接数远不能达到理论上限，还收到物理内存和其他因素影响。\"},\"2479\":{\"h\":\"1.6UDP 和 TCP 有什么区别呢？分别的应用场景是？\",\"a\":\"_1-6udp-和-tcp-有什么区别呢-分别的应用场景是\"},\"2480\":{\"t\":\"UDP 头部格式\"},\"2481\":{\"h\":\"1.6.1TCP 和 UDP 区别：\",\"a\":\"_1-6-1tcp-和-udp-区别\"},\"2482\":{\"t\":\"1.连接\"},\"2483\":{\"t\":\"TCP 是面向连接的传输层协议，传输数据前先要建立连接。\"},\"2484\":{\"t\":\"UDP 是不需要连接，即刻传输数据。\"},\"2485\":{\"t\":\"2. 服务对象\"},\"2486\":{\"t\":\"TCP 是一对一的两点服务，即一条连接只有两个端点。\"},\"2487\":{\"t\":\"UDP 支持一对一、一对多、多对多的交互通信\"},\"2488\":{\"t\":\"3. 可靠性\"},\"2489\":{\"t\":\"TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按序到达。\"},\"2490\":{\"t\":\"UDP 是尽最大努力交付，不保证可靠交付数据。但是我们可以基于 UDP 传输协议实现一个可靠的传输协议，比如 QUIC 协议，具体可以参见这篇文章：如何基于 UDP 协议实现可靠传输？\"},\"2491\":{\"t\":\"4. 拥塞控制、流量控制\"},\"2492\":{\"t\":\"TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。\"},\"2493\":{\"t\":\"UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。\"},\"2494\":{\"t\":\"5. 首部开销\"},\"2495\":{\"t\":\"TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。\"},\"2496\":{\"t\":\"UDP 首部只有 8 个字节，并且是固定不变的，开销较小。\"},\"2497\":{\"t\":\"6. 传输方式\"},\"2498\":{\"t\":\"TCP 是流式传输，没有边界，但保证顺序和可靠。\"},\"2499\":{\"t\":\"UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。\"},\"2500\":{\"t\":\"7. 分片不同\"},\"2501\":{\"t\":\"TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。\"},\"2502\":{\"t\":\"UDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层。\"},\"2503\":{\"h\":\"1.6.2TCP 和 UDP 应用场景：\",\"a\":\"_1-6-2tcp-和-udp-应用场景\"},\"2504\":{\"t\":\"由于 TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：\"},\"2505\":{\"t\":\"FTP 文件传输；\"},\"2506\":{\"t\":\"HTTP / HTTPS；\"},\"2507\":{\"t\":\"由于 UDP 面向无连接，它可以随时发送数据，再加上 UDP 本身的处理既简单又高效，因此经常用于：\"},\"2508\":{\"t\":\"包总量较少的通信，如 DNS、SNMP 等；\"},\"2509\":{\"t\":\"视频、音频等多媒体通信；\"},\"2510\":{\"t\":\"广播通信；\"},\"2511\":{\"t\":\"这里有两道常见面试题：\"},\"2512\":{\"t\":\"为什么 UDP 头部没有「首部长度」字段，而 TCP 头部有「首部长度」字段呢？\"},\"2513\":{\"t\":\"原因： TCP 有可变长的「选项」字段，而 UDP 头部长度则是不会变化的，无需多一个字段去记录 UDP 的首部长度。\"},\"2514\":{\"t\":\"为什么 UDP 头部有「包长度」字段，而 TCP 头部则没有「包长度」字段呢？\"},\"2515\":{\"t\":\"比较靠谱的原因：如今的 UDP 协议是基于 IP 协议发展的，而当年可能并非如此，依赖的可能是别的不提供自身报文长度或首部长度的网络层协议，因此 UDP 报文首部需要有长度字段以供计算。\"},\"2516\":{\"h\":\"1.7TCP 和 UDP 可以使用同一个端口吗？\",\"a\":\"_1-7tcp-和-udp-可以使用同一个端口吗\"},\"2517\":{\"t\":\"总结：可以的。\"},\"2518\":{\"t\":\"传输层的端口号的作用，是为了区分同一个主机上不同应用程序的数据包。\"},\"2519\":{\"t\":\"传输层有两个传输协议分别是 TCP 和 UDP，在内核中是两个完全独立的软件模块。\"},\"2520\":{\"t\":\"当主机收到数据包后，可以在 IP 包头的「协议号」字段知道该数据包是 TCP/UDP，所以可以根据这个信息确定送给哪个模块（TCP/UDP）处理，送给 TCP/UDP 模块的报文根据「端口号」确定送给哪个应用程序处理。\"},\"2521\":{\"t\":\"因此，TCP/UDP 各自的端口号也相互独立，如 TCP 有一个 80 号端口，UDP 也可以有一个 80 号端口，二者并不冲突。\"},\"2522\":{\"t\":\"可以看这篇文章：TCP 和 UDP 可以使用同一个端口吗？\"},\"2523\":{\"h\":\"2.TCP三次握手\",\"a\":\"_2-tcp三次握手\"},\"2524\":{\"h\":\"2.1TCP 三次握手过程是怎样的？\",\"a\":\"_2-1tcp-三次握手过程是怎样的\"},\"2525\":{\"t\":\"三次握手的过程如下图：\"},\"2526\":{\"t\":\"一开始，客户端和服务端都处于 CLOSE 状态。先是服务端主动监听某个端口，处于 LISTEN 状态。\"},\"2527\":{\"t\":\"客户端会随机初始化序号（client_isn），将此序号置于 TCP 首部的「序号」字段中，同时把 SYN 标志位置为 1，表示 SYN 报文。接着把第一个 SYN 报文发送给服务端，表示向服务端发起连接，该报文不包含应用层数据，之后客户端处于 SYN-SENT 状态。\"},\"2528\":{\"t\":\"服务端收到客户端的 SYN 报文后，首先服务端也随机初始化自己的序号（server_isn），将此序号填入 TCP 首部的「序号」字段中，其次把 TCP 首部的「确认应答号」字段填入 client_isn + 1, 接着把 SYN 和 ACK 标志位置为 1。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于 SYN-RCVD 状态。\"},\"2529\":{\"t\":\"客户端收到服务端报文后，还要向服务端回应最后一个应答报文，首先该应答报文 TCP 首部 ACK 标志位置为 1 ，其次「确认应答号」字段填入 server_isn + 1 ，最后把报文发送给服务端，这次报文可以携带客户到服务端的数据，之后客户端处于 ESTABLISHED 状态。\"},\"2530\":{\"t\":\"服务端收到客户端的应答报文后，也进入 ESTABLISHED 状态。\"},\"2531\":{\"t\":\"从上面的过程可以发现第三次握手是可以携带数据的，前两次握手是不可以携带数据的，这也是面试常问的题。\"},\"2532\":{\"t\":\"一旦完成三次握手，双方都处于 ESTABLISHED 状态，此时连接就已建立完成，客户端和服务端就可以相互发送数据了。\"},\"2533\":{\"h\":\"2.2如何在 Linux 系统中查看 TCP 状态？\",\"a\":\"_2-2如何在-linux-系统中查看-tcp-状态\"},\"2534\":{\"t\":\"TCP 的连接状态查看，在 Linux 可以通过 netstat -napt 命令查看。\"},\"2535\":{\"h\":\"2.3为什么是三次握手？不是两次、四次？\",\"a\":\"_2-3为什么是三次握手-不是两次、四次\"},\"2536\":{\"t\":\"避免历史连接\"},\"2537\":{\"t\":\"我们来看看 RFC 793 指出的 TCP 连接使用三次握手的首要原因：\"},\"2538\":{\"t\":\"The principle reason for the three-way handshake is to prevent old duplicate connection initiations from causing confusion.\"},\"2539\":{\"t\":\"简单来说，三次握手的首要原因是为了防止旧的重复连接初始化造成混乱。\"},\"2540\":{\"t\":\"我们考虑一个场景，客户端先发送了 SYN（seq = 90）报文，然后客户端宕机了，而且这个 SYN 报文还被网络阻塞了，服务端并没有收到，接着客户端重启后，又重新向服务端建立连接，发送了 SYN（seq = 100）报文（注意！不是重传 SYN，重传的 SYN 的序列号是一样的）。\"},\"2541\":{\"t\":\"看看三次握手是如何阻止历史连接的：\"},\"2542\":{\"t\":\"客户端连续发送多次 SYN（都是同一个四元组）建立连接的报文，在网络拥堵情况下：\"},\"2543\":{\"t\":\"一个「旧 SYN 报文」比「最新的 SYN」 报文早到达了服务端，那么此时服务端就会回一个 SYN + ACK 报文给客户端，此报文中的确认号是 91（90+1）。\"},\"2544\":{\"t\":\"客户端收到后，发现自己期望收到的确认号应该是 100 + 1，而不是 90 + 1，于是就会回 RST 报文。\"},\"2545\":{\"t\":\"服务端收到 RST 报文后，就会释放连接。\"},\"2546\":{\"t\":\"后续最新的 SYN 抵达了服务端后，客户端与服务端就可以正常的完成三次握手了。\"},\"2547\":{\"t\":\"上述中的「旧 SYN 报文」称为历史连接，TCP 使用三次握手建立连接的最主要原因就是防止「历史连接」初始化了连接。\"},\"2548\":{\"t\":\"同步双方初始序列号\"},\"2549\":{\"t\":\"TCP 协议的通信双方， 都必须维护一个「序列号」， 序列号是可靠传输的一个关键因素，它的作用：\"},\"2550\":{\"t\":\"接收方可以去除重复的数据；\"},\"2551\":{\"t\":\"接收方可以根据数据包的序列号按序接收；\"},\"2552\":{\"t\":\"可以标识发送出去的数据包中， 哪些是已经被对方收到的（通过 ACK 报文中的序列号知道）；\"},\"2553\":{\"t\":\"可见，序列号在 TCP 连接中占据着非常重要的作用，所以当客户端发送携带「初始序列号」的 SYN 报文的时候，需要服务端回一个 ACK 应答报文，表示客户端的 SYN 报文已被服务端成功接收，那当服务端发送「初始序列号」给客户端的时候，依然也要得到客户端的应答回应，这样一来一回，才能确保双方的初始序列号能被可靠的同步。\"},\"2554\":{\"t\":\"避免资源浪费\"},\"2555\":{\"t\":\"如果只有「两次握手」，当客户端发生的 SYN 报文在网络中阻塞，客户端没有接收到 ACK 报文，就会重新发送 SYN ，由于没有第三次握手，服务端不清楚客户端是否收到了自己回复的 ACK 报文，所以服务端每收到一个 SYN 就只能先主动建立一个连接，这会造成什么情况呢？\"},\"2556\":{\"t\":\"如果客户端发送的 SYN 报文在网络中阻塞了，重复发送多次 SYN 报文，那么服务端在收到请求后就会建立多个冗余的无效链接，造成不必要的资源浪费。\"},\"2557\":{\"t\":\"不使用「两次握手」和「四次握手」的原因：\"},\"2558\":{\"t\":\"「两次握手」：无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号；\"},\"2559\":{\"t\":\"「四次握手」：三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数。\"},\"2560\":{\"h\":\"2.4为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？\",\"a\":\"_2-4为什么每次建立-tcp-连接时-初始化的序列号都要求不一样呢\"},\"2561\":{\"t\":\"主要原因有两个方面：\"},\"2562\":{\"t\":\"为了防止历史报文被下一个相同四元组的连接接收（主要方面）；\"},\"2563\":{\"t\":\"为了安全性，防止黑客伪造的相同序列号的 TCP 报文被对方接收；\"},\"2564\":{\"h\":\"2.5初始序列号 ISN 是如何随机产生的？\",\"a\":\"_2-5初始序列号-isn-是如何随机产生的\"},\"2565\":{\"t\":\"基于时钟的。\"},\"2566\":{\"h\":\"2.6既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？\",\"a\":\"_2-6既然-ip-层会分片-为什么-tcp-层还需要-mss-呢\"},\"2567\":{\"t\":\"MTU：一个网络包的最大长度，以太网中一般为 1500 字节；\"},\"2568\":{\"t\":\"MSS：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度；\"},\"2569\":{\"t\":\"达到最佳的传输效能 TCP 协议在建立连接的时候通常要协商双方的 MSS 值，当 TCP 层发现数据超过 MSS 时，则就先会进行分片，当然由它形成的 IP 包的长度也就不会大于 MTU ，自然也就不用 IP 分片了。\"},\"2570\":{\"h\":\"2.7第一次握手丢失了，会发生什么？\",\"a\":\"_2-7第一次握手丢失了-会发生什么\"},\"2571\":{\"t\":\"重传 SYN 报文，而且重传的 SYN 报文的序列号都是一样的。\"},\"2572\":{\"h\":\"2.8第二次握手丢失了，会发生什么？\",\"a\":\"_2-8第二次握手丢失了-会发生什么\"},\"2573\":{\"t\":\"重传 SYN 报文，而且重传的 SYN 报文的序列号都是一样的。\"},\"2574\":{\"t\":\"客户端就会触发超时重传机制，重传 SYN 报文。服务端这边会触发超时重传机制，重传 SYN-ACK 报文。\"},\"2575\":{\"h\":\"2.9第三次握手丢失了，会发生什么？\",\"a\":\"_2-9第三次握手丢失了-会发生什么\"},\"2576\":{\"t\":\"服务端这边会触发超时重传机制，重传 SYN-ACK 报文。\"},\"2577\":{\"h\":\"2.10什么是 SYN 攻击？如何避免 SYN 攻击？\",\"a\":\"_2-10什么是-syn-攻击-如何避免-syn-攻击\"},\"2578\":{\"t\":\"我们都知道 TCP 连接建立是需要三次握手，假设攻击者短时间伪造不同 IP 地址的 SYN 报文，服务端每接收到一个 SYN 报文，就进入SYN_RCVD 状态，但服务端发送出去的 ACK + SYN 报文，无法得到未知 IP 主机的 ACK 应答，久而久之就会占满服务端的半连接队列，使得服务端不能为正常用户服务。\"},\"2579\":{\"t\":\"在 TCP 三次握手的时候，Linux 内核会维护两个队列，分别是：\"},\"2580\":{\"t\":\"半连接队列，也称 SYN 队列；\"},\"2581\":{\"t\":\"全连接队列，也称 accept 队列；\"},\"2582\":{\"t\":\"正常流程：\"},\"2583\":{\"t\":\"当服务端接收到客户端的 SYN 报文时，会创建一个半连接的对象，然后将其加入到内核的「 SYN 队列」；\"},\"2584\":{\"t\":\"接着发送 SYN + ACK 给客户端，等待客户端回应 ACK 报文；\"},\"2585\":{\"t\":\"服务端接收到 ACK 报文后，从「 SYN 队列」取出一个半连接对象，然后创建一个新的连接对象放入到「 Accept 队列」；\"},\"2586\":{\"t\":\"应用通过调用 accpet() socket 接口，从「 Accept 队列」取出连接对象。\"},\"2587\":{\"t\":\"不管是半连接队列还是全连接队列，都有最大长度限制，超过限制时，默认情况都会丢弃报文。\"},\"2588\":{\"t\":\"SYN 攻击方式最直接的表现就会把 TCP 半连接队列打满，这样当 TCP 半连接队列满了，后续再在收到 SYN 报文就会丢弃，导致客户端无法和服务端建立连接。\"},\"2589\":{\"t\":\"避免 SYN 攻击方式，可以有以下四种方法：\"},\"2590\":{\"t\":\"增大 TCP 半连接队列；\"},\"2591\":{\"t\":\"开启 tcp_syncookies；\"},\"2592\":{\"h\":\"3.TCP四次挥手\",\"a\":\"_3-tcp四次挥手\"},\"2593\":{\"h\":\"3.1TCP 四次挥手过程是怎样的？\",\"a\":\"_3-1tcp-四次挥手过程是怎样的\"},\"2594\":{\"t\":\"客户端打算关闭连接，此时会发送一个 TCP 首部 FIN 标志位被置为 1 的报文，也即 FIN 报文，之后客户端进入 FIN_WAIT_1 状态。\"},\"2595\":{\"t\":\"服务端收到该报文后，就向客户端发送 ACK 应答报文，接着服务端进入 CLOSE_WAIT 状态。\"},\"2596\":{\"t\":\"客户端收到服务端的 ACK 应答报文后，之后进入 FIN_WAIT_2 状态。\"},\"2597\":{\"t\":\"等待服务端处理完数据后，也向客户端发送 FIN 报文，之后服务端进入 LAST_ACK 状态。\"},\"2598\":{\"t\":\"客户端收到服务端的 FIN 报文后，回一个 ACK 应答报文，之后进入 TIME_WAIT 状态\"},\"2599\":{\"t\":\"服务端收到了 ACK 应答报文后，就进入了 CLOSE 状态，至此服务端已经完成连接的关闭。\"},\"2600\":{\"t\":\"客户端在经过 2MSL 一段时间后，自动进入 CLOSE 状态，至此客户端也完成连接的关闭。\"},\"2601\":{\"t\":\"你可以看到，每个方向都需要一个 FIN 和一个 ACK，因此通常被称为四次挥手。\"},\"2602\":{\"t\":\"这里一点需要注意是：主动关闭连接的，才有 TIME_WAIT 状态。\"},\"2603\":{\"h\":\"3.2为什么挥手需要四次？\",\"a\":\"_3-2为什么挥手需要四次\"},\"2604\":{\"t\":\"服务端通常需要等待完成数据的发送和处理，所以服务端的 ACK 和 FIN 一般都会分开发送，因此是需要四次挥手。\"},\"2605\":{\"h\":\"3.3第一次挥手丢失了，会发生什么？\",\"a\":\"_3-3第一次挥手丢失了-会发生什么\"},\"2606\":{\"t\":\"触发超时重传机制，重传 FIN 报文。\"},\"2607\":{\"h\":\"3.4第二次挥手丢失了，会发生什么？\",\"a\":\"_3-4第二次挥手丢失了-会发生什么\"},\"2608\":{\"t\":\"客户端就会触发超时重传机制，重传 FIN 报文。\"},\"2609\":{\"h\":\"3.5第三次挥手丢失了，会发生什么？\",\"a\":\"_3-5第三次挥手丢失了-会发生什么\"},\"2610\":{\"t\":\"服务端就会重发 FIN 报文。\"},\"2611\":{\"h\":\"3.6第四次挥手丢失了，会发生什么？\",\"a\":\"_3-6第四次挥手丢失了-会发生什么\"},\"2612\":{\"t\":\"服务端就会重发 FIN 报文。\"},\"2613\":{\"h\":\"3.7为什么 TIME_WAIT 等待的时间是 2MSL？\",\"a\":\"_3-7为什么-time-wait-等待的时间是-2msl\"},\"2614\":{\"t\":\"网络中可能存在来自发送方的数据包，当这些发送方的数据包被接收方处理后又会向对方发送响应，所以一来一回需要等待 2 倍的时间。比如，如果被动关闭方没有收到断开连接的最后的 ACK 报文，就会触发超时重发 FIN 报文，另一方接收到 FIN 后，会重发 ACK 给被动关闭方， 一来一去正好 2 个 MSL。\"},\"2615\":{\"t\":\"可以看到 2MSL时长 这其实是相当于至少允许报文丢失一次。比如，若 ACK 在一个 MSL 内丢失，这样被动方重发的 FIN 会在第 2 个 MSL 内到达，TIME_WAIT 状态的连接可以应对。\"},\"2616\":{\"h\":\"3.8为什么需要 TIME_WAIT 状态？\",\"a\":\"_3-8为什么需要-time-wait-状态\"},\"2617\":{\"t\":\"防止历史连接中的数据，被后面相同四元组的连接错误的接收\"},\"2618\":{\"t\":\"让两个方向上的数据包都被丢弃，使得原来连接的数据包在网络中都自然消失，再出现的数据包一定都是新建立连接所产生的。\"},\"2619\":{\"t\":\"保证「被动关闭连接」的一方，能被正确的关闭\"},\"2620\":{\"t\":\"等待足够的时间以确保最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭。\"},\"2621\":{\"h\":\"3.9TIME_WAIT 过多有什么危害？\",\"a\":\"_3-9time-wait-过多有什么危害\"},\"2622\":{\"t\":\"过多的 TIME-WAIT 状态主要的危害有两种：\"},\"2623\":{\"t\":\"第一是占用系统资源，比如文件描述符、内存资源、CPU 资源、线程资源等；\"},\"2624\":{\"t\":\"第二是占用端口资源\"},\"2625\":{\"h\":\"3.10如何优化 TIME_WAIT？\",\"a\":\"_3-10如何优化-time-wait\"},\"2626\":{\"t\":\"这里给出优化 TIME-WAIT 的几个方式，都是有利有弊：\"},\"2627\":{\"t\":\"打开 net.ipv4.tcp_tw_reuse 和 net.ipv4.tcp_timestamps 选项；\"},\"2628\":{\"t\":\"程序中使用 SO_LINGER ，应用强制使用 RST 关闭。\"},\"2629\":{\"h\":\"3.11服务器出现大量 TIME_WAIT 状态的原因有哪些？\",\"a\":\"_3-11服务器出现大量-time-wait-状态的原因有哪些\"},\"2630\":{\"t\":\"服务器主动断开了很多 TCP 连接。\"},\"2631\":{\"h\":\"3.12服务器出现大量 CLOSE_WAIT 状态的原因有哪些？\",\"a\":\"_3-12服务器出现大量-close-wait-状态的原因有哪些\"},\"2632\":{\"t\":\"服务端的程序没有调用 close 函数关闭连接。\"},\"2633\":{\"h\":\"3.13如果已经建立了连接，但是客户端突然出现故障了怎么办？\",\"a\":\"_3-13如果已经建立了连接-但是客户端突然出现故障了怎么办\"},\"2634\":{\"t\":\"TCP保活机制：\"},\"2635\":{\"t\":\"定义一个时间段，在这个时间段内，如果没有任何连接相关的活动，TCP 保活机制会开始作用，每隔一个时间间隔，发送一个探测报文，该探测报文包含的数据非常少，如果连续几个探测报文都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序。\"},\"2636\":{\"h\":\"3.14如果已经建立了连接，但是服务端的进程崩溃会发生什么？\",\"a\":\"_3-14如果已经建立了连接-但是服务端的进程崩溃会发生什么\"},\"2637\":{\"t\":\"内核会发送第一次挥手 FIN 报文，后续的挥手过程也都是在内核完成，并不需要进程的参与，所以即使服务端的进程退出了，还是能与客户端完成 TCP 四次挥手的过程。\"},\"2638\":{\"h\":\"4.Socket 编程\",\"a\":\"_4-socket-编程\"},\"2639\":{\"h\":\"4.1accept 发生在三次握手的哪一步？\",\"a\":\"_4-1accept-发生在三次握手的哪一步\"},\"2640\":{\"t\":\"服务端 accept 成功返回是在三次握手成功之后。\"},\"2641\":{\"h\":\"4.2没有 accept，能建立 TCP 连接吗？\",\"a\":\"_4-2没有-accept-能建立-tcp-连接吗\"},\"2642\":{\"t\":\"可以的。\"},\"2643\":{\"t\":\"accpet 系统调用并不参与 TCP 三次握手过程，它只是负责从 TCP 全连接队列取出一个已经建立连接的 socket，用户层通过 accpet 系统调用拿到了已经建立连接的 socket，就可以对该 socket 进行读写操作了。\"},\"2644\":{\"h\":\"4.3没有 listen，能建立 TCP 连接吗？\",\"a\":\"_4-3没有-listen-能建立-tcp-连接吗\"},\"2645\":{\"t\":\"可以的。\"},\"2646\":{\"t\":\"客户端是可以自己连自己的形成连接（TCP自连接），也可以两个客户端同时向对方发出请求建立连接（TCP同时打开），这两个情况都有个共同点，就是没有服务端参与，也就是没有 listen，就能 TCP 建立连接。\"},\"2647\":{\"h\":\"5.TCP高级\",\"a\":\"_5-tcp高级\"},\"2648\":{\"h\":\"5.1重传机制\",\"a\":\"_5-1重传机制\"},\"2649\":{\"t\":\"超时重传:在发送数据时，设定一个定时器，当超过指定的时间后，没有收到对方的 ACK 确认应答报文，就会重发该数据，也就是我们常说的超时重传。\"},\"2650\":{\"t\":\"快速重传:当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。\"},\"2651\":{\"h\":\"5.2滑动窗口\",\"a\":\"_5-2滑动窗口\"},\"2652\":{\"t\":\"窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。\"},\"2653\":{\"t\":\"TCP 头里有一个字段叫 Window，也就是窗口大小。这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。\"},\"2654\":{\"t\":\"所以，通常窗口的大小是由接收方的窗口大小来决定的。\"},\"2655\":{\"t\":\"发送方发送的数据大小不能超过接收方的窗口大小，否则接收方就无法正常接收到数据。\"},\"2656\":{\"t\":\"接收窗口和发送窗口的大小是相等的吗？\"},\"2657\":{\"t\":\"并不是完全相等，接收窗口的大小是约等于发送窗口的大小的。\"},\"2658\":{\"h\":\"5.3流量控制\",\"a\":\"_5-3流量控制\"},\"2659\":{\"t\":\"发送方不能无脑的发数据给接收方，要考虑接收方处理能力。\"},\"2660\":{\"t\":\"如果一直无脑的发数据给对方，但对方处理不过来，那么就会导致触发重发机制，从而导致网络流量的无端的浪费。\"},\"2661\":{\"t\":\"为了解决这种现象发生，TCP 提供一种机制可以让「发送方」根据「接收方」的实际接收能力控制发送的数据量，这就是所谓的流量控制。\"},\"2662\":{\"h\":\"5.4拥塞控制\",\"a\":\"_5-4拥塞控制\"},\"2663\":{\"t\":\"流量控制是避免「发送方」的数据填满「接收方」的缓存，但是并不知道网络的中发生了什么。\"},\"2664\":{\"t\":\"一般来说，计算机网络都处在一个共享的环境。因此也有可能会因为其他主机之间的通信使得网络拥堵。\"},\"2665\":{\"t\":\"在网络出现拥堵时，如果继续发送大量数据包，可能会导致数据包时延、丢失等，这时 TCP 就会重传数据，但是一重传就会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，这个情况就会进入恶性循环被不断地放大....\"},\"2666\":{\"t\":\"所以，TCP 不能忽略网络上发生的事，它被设计成一个无私的协议，当网络发送拥塞时，TCP 会自我牺牲，降低发送的数据量。\"},\"2667\":{\"t\":\"于是，就有了拥塞控制，控制的目的就是避免「发送方」的数据填满整个网络。\"},\"2668\":{\"t\":\"为了在「发送方」调节所要发送数据的量，定义了一个叫做「拥塞窗口」的概念。\"},\"2669\":{\"t\":\"拥塞窗口 cwnd是发送方维护的一个的状态变量，它会根据网络的拥塞程度动态变化的。\"},\"2670\":{\"t\":\"我们在前面提到过发送窗口 swnd 和接收窗口 rwnd 是约等于的关系，那么由于加入了拥塞窗口的概念后，此时发送窗口的值是swnd = min(cwnd, rwnd)，也就是拥塞窗口和接收窗口中的最小值。\"},\"2671\":{\"t\":\"拥塞窗口 cwnd 变化的规则：\"},\"2672\":{\"t\":\"只要网络中没有出现拥塞，cwnd 就会增大；\"},\"2673\":{\"t\":\"但网络中出现了拥塞，cwnd 就减少；\"},\"2674\":{\"t\":\"拥塞控制主要是四个算法：\"},\"2675\":{\"t\":\"慢启动\"},\"2676\":{\"t\":\"拥塞避免\"},\"2677\":{\"t\":\"拥塞发生\"},\"2678\":{\"t\":\"快速恢复\"},\"2679\":{\"h\":\"5.4.1慢启动\",\"a\":\"_5-4-1慢启动\"},\"2680\":{\"t\":\"慢启动的算法记住一个规则就行：当发送方每收到一个 ACK，拥塞窗口 cwnd 的大小就会加 1。\"},\"2681\":{\"t\":\"慢启动算法，发包的个数是指数性的增长。\"},\"2682\":{\"t\":\"有一个叫慢启动门限 ssthresh （slow start threshold）状态变量。\"},\"2683\":{\"t\":\"当 cwnd < ssthresh 时，使用慢启动算法。\"},\"2684\":{\"t\":\"当 cwnd >= ssthresh 时，就会使用「拥塞避免算法」。\"},\"2685\":{\"h\":\"5.4.2拥塞避免算法\",\"a\":\"_5-4-2拥塞避免算法\"},\"2686\":{\"t\":\"它的规则是：每当收到一个 ACK 时，cwnd 增加 1/cwnd。\"},\"2687\":{\"t\":\"拥塞避免算法就是将原本慢启动算法的指数增长变成了线性增长，还是增长阶段，但是增长速度缓慢了一些。\"},\"2688\":{\"t\":\"就这么一直增长着后，网络就会慢慢进入了拥塞的状况了，于是就会出现丢包现象，这时就需要对丢失的数据包进行重传。\"},\"2689\":{\"t\":\"当触发了重传机制，也就进入了「拥塞发生算法」。\"},\"2690\":{\"h\":\"5.4.3拥塞发生\",\"a\":\"_5-4-3拥塞发生\"},\"2691\":{\"t\":\"发生超时重传的拥塞发生算法:\"},\"2692\":{\"t\":\"这个时候，ssthresh 和 cwnd 的值会发生变化：\"},\"2693\":{\"t\":\"ssthresh 设为 cwnd/2，\"},\"2694\":{\"t\":\"cwnd 重置为 1 （是恢复为 cwnd 初始化值，我这里假定 cwnd 初始化值 1）\"},\"2695\":{\"t\":\"发生快速重传的拥塞发生算法:\"},\"2696\":{\"t\":\"还有更好的方式，前面我们讲过「快速重传算法」。当接收方发现丢了一个中间包的时候，发送三次前一个包的 ACK，于是发送端就会快速地重传，不必等待超时再重传。\"},\"2697\":{\"t\":\"TCP 认为这种情况不严重，因为大部分没丢，只丢了一小部分，则 ssthresh 和 cwnd 变化如下：\"},\"2698\":{\"t\":\"cwnd = cwnd/2 ，也就是设置为原来的一半;\"},\"2699\":{\"t\":\"ssthresh = cwnd;\"},\"2700\":{\"t\":\"进入快速恢复算法\"},\"2701\":{\"h\":\"5.4.4快速恢复\",\"a\":\"_5-4-4快速恢复\"},\"2702\":{\"t\":\"快速恢复算法如下：\"},\"2703\":{\"t\":\"拥塞窗口 cwnd = ssthresh + 3 （ 3 的意思是确认有 3 个数据包被收到了）；\"},\"2704\":{\"t\":\"重传丢失的数据包；\"},\"2705\":{\"t\":\"如果再收到重复的 ACK，那么 cwnd 增加 1；\"},\"2706\":{\"t\":\"如果收到新数据的 ACK 后，把 cwnd 设置为第一步中的 ssthresh 的值，原因是该 ACK 确认了新的数据，说明从 duplicated ACK 时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态；\"},\"2707\":{\"h\":\"5.5TCP 和 UDP 可以使用同一个端口吗？\",\"a\":\"_5-5tcp-和-udp-可以使用同一个端口吗\"},\"2708\":{\"t\":\"可以的。传输层有两个传输协议分别是 TCP 和 UDP，在内核中是两个完全独立的软件模块。\"},\"2709\":{\"t\":\"当主机收到数据包后，可以在 IP 包头的「协议号」字段知道该数据包是 TCP/UDP，所以可以根据这个信息确定送给哪个模块（TCP/UDP）处理，送给 TCP/UDP 模块的报文根据「端口号」确定送给哪个应用程序处理。\"},\"2710\":{\"h\":\"5.6客户端的端口可以重复使用吗？\",\"a\":\"_5-6客户端的端口可以重复使用吗\"},\"2711\":{\"t\":\"可以。\"},\"2712\":{\"t\":\"TCP 连接是由四元组（源IP地址，源端口，目的IP地址，目的端口）唯一确认的，那么只要四元组中其中一个元素发生了变化，那么就表示不同的 TCP 连接的。所以如果客户端已使用端口 64992 与服务端 A 建立了连接，那么客户端要与服务端 B 建立连接，还是可以使用端口 64992 的，因为内核是通过四元祖信息来定位一个 TCP 连接的，并不会因为客户端的端口号相同，而导致连接冲突的问题。\"},\"2713\":{\"h\":\"1.计算机网络基础\"},\"2714\":{\"h\":\"1.键入网址到网页显示，期间发生了什么？\",\"a\":\"_1-键入网址到网页显示-期间发生了什么\"},\"2715\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"2716\":{\"t\":\"总体来说分为以下几个过程:\"},\"2717\":{\"t\":\"DNS 解析\"},\"2718\":{\"t\":\"TCP 连接\"},\"2719\":{\"t\":\"发送 HTTP 请求\"},\"2720\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"2721\":{\"t\":\"浏览器解析渲染页面\"},\"2722\":{\"t\":\"连接结束\"},\"2723\":{\"h\":\"2.OSI 七层模型\",\"a\":\"_2-osi-七层模型\"},\"2724\":{\"h\":\"3.TCP/IP 四层模型\",\"a\":\"_3-tcp-ip-四层模型\"},\"2725\":{\"h\":\"MySQL\"},\"2726\":{\"h\":\"1.InnoDB特性\",\"a\":\"_1-innodb特性\"},\"2727\":{\"h\":\"1.1MyISAM 和 InnoDB 有什么区别？\",\"a\":\"_1-1myisam-和-innodb-有什么区别\"},\"2728\":{\"t\":\"MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，可谓是风光一时。\"},\"2729\":{\"t\":\"虽然，MyISAM 的性能还行，各种特性也还不错（比如全文索引、压缩、空间函数等）。但是，MyISAM 不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。\"},\"2730\":{\"t\":\"MySQL 5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。\"},\"2731\":{\"t\":\"简单对比一下两者：\"},\"2732\":{\"t\":\"1.是否支持行级锁\"},\"2733\":{\"t\":\"MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。\"},\"2734\":{\"t\":\"也就说，MyISAM 一锁就是锁住了整张表，这在并发写的情况下是多么滴憨憨啊！这也是为什么 InnoDB 在并发写的时候，性能更牛皮了！\"},\"2735\":{\"t\":\"2.是否支持事务\"},\"2736\":{\"t\":\"MyISAM 不提供事务支持。\"},\"2737\":{\"t\":\"InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别，具有提交(commit)和回滚(rollback)事务的能力。并且，InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）。\"},\"2738\":{\"t\":\"3.是否支持外键\"},\"2739\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2740\":{\"t\":\"外键对于维护数据一致性非常有帮助，但是对性能有一定的损耗。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，在业务代码中进行约束即可！\"},\"2741\":{\"t\":\"阿里的《Java 开发手册》也是明确规定禁止使用外键的。\"},\"2742\":{\"t\":\"4.是否支持数据库异常崩溃后的安全恢复\"},\"2743\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2744\":{\"t\":\"使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 redo log 。\"},\"2745\":{\"t\":\"5.是否支持 MVCC\"},\"2746\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"2747\":{\"t\":\"讲真，这个对比有点废话，毕竟 MyISAM 连行级锁都不支持。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能。\"},\"2748\":{\"t\":\"6.索引实现不一样。\"},\"2749\":{\"t\":\"虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。\"},\"2750\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。\"},\"2751\":{\"h\":\"2.索引\",\"a\":\"_2-索引\"},\"2752\":{\"t\":\"索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。\"},\"2753\":{\"h\":\"2.1底层数据结构：\",\"a\":\"_2-1底层数据结构\"},\"2754\":{\"t\":\"Hash 表\"},\"2755\":{\"t\":\"哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。\"},\"2756\":{\"t\":\"为何能够通过 key 快速取出 value 呢？ 原因在于 哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。\"},\"2757\":{\"t\":\"既然哈希表这么快，为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。\"},\"2758\":{\"t\":\"B 树& B+树\"},\"2759\":{\"t\":\"B 树也称 B-树,全称为 多路平衡查找树 ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 Balanced （平衡）的意思。\"},\"2760\":{\"t\":\"目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。\"},\"2761\":{\"t\":\"B 树& B+树两者有何异同呢？\"},\"2762\":{\"t\":\"B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\"},\"2763\":{\"t\":\"B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。\"},\"2764\":{\"t\":\"B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\"},\"2765\":{\"t\":\"在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）\"},\"2766\":{\"t\":\"MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引（非聚集索引）”。\"},\"2767\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“聚簇索引（聚集索引）”，而其余的索引都作为 辅助索引 ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。\"},\"2768\":{\"h\":\"2.2类型总结\",\"a\":\"_2-2类型总结\"},\"2769\":{\"t\":\"按照数据结构维度划分：\"},\"2770\":{\"t\":\"BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。\"},\"2771\":{\"t\":\"哈希索引：类似键值对的形式，一次即可定位。\"},\"2772\":{\"t\":\"RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2773\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2774\":{\"t\":\"按照底层存储方式角度划分：\"},\"2775\":{\"t\":\"聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。\"},\"2776\":{\"t\":\"非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"2777\":{\"t\":\"按照应用维度划分：\"},\"2778\":{\"t\":\"主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。\"},\"2779\":{\"t\":\"普通索引：仅加速查询。\"},\"2780\":{\"t\":\"唯一索引：加速查询 + 列值唯一（可以有 NULL）。\"},\"2781\":{\"t\":\"覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。\"},\"2782\":{\"t\":\"联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。\"},\"2783\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"2784\":{\"h\":\"2.3主键索引：\",\"a\":\"_2-3主键索引\"},\"2785\":{\"t\":\"数据表的主键列使用的就是主键索引。\"},\"2786\":{\"t\":\"一张数据表有只能有一个主键，并且主键不能为 null，不能重复。\"},\"2787\":{\"t\":\"在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。\"},\"2788\":{\"h\":\"2.4二级索引：\",\"a\":\"_2-4二级索引\"},\"2789\":{\"t\":\"二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。\"},\"2790\":{\"t\":\"唯一索引，普通索引，前缀索引等索引属于二级索引。\"},\"2791\":{\"t\":\"唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。\"},\"2792\":{\"t\":\"普通索引(Index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。\"},\"2793\":{\"t\":\"前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。\"},\"2794\":{\"t\":\"全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。\"},\"2795\":{\"h\":\"2.5聚簇索引：\",\"a\":\"_2-5聚簇索引\"},\"2796\":{\"t\":\"聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。\"},\"2797\":{\"t\":\"在 MySQL 中，InnoDB 引擎的表的 .ibd文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。\"},\"2798\":{\"t\":\"优点 ：\"},\"2799\":{\"t\":\"查询速度非常快 ：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。\"},\"2800\":{\"t\":\"对排序查找和范围查找优化 ：聚簇索引对于主键的排序查找和范围查找速度非常快。\"},\"2801\":{\"t\":\"缺点 ：\"},\"2802\":{\"t\":\"依赖于有序的数据 ：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。\"},\"2803\":{\"t\":\"更新代价大 ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。\"},\"2804\":{\"h\":\"2.6非聚簇索引：\",\"a\":\"_2-6非聚簇索引\"},\"2805\":{\"t\":\"非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"2806\":{\"t\":\"非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。\"},\"2807\":{\"t\":\"优点 ：\"},\"2808\":{\"t\":\"更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的\"},\"2809\":{\"t\":\"缺点 ：\"},\"2810\":{\"t\":\"依赖于有序的数据 ：跟聚簇索引一样，非聚簇索引也依赖于有序的数据\"},\"2811\":{\"t\":\"可能会二次查询(回表) ：这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。\"},\"2812\":{\"h\":\"2.7覆盖索引：\",\"a\":\"_2-7覆盖索引\"},\"2813\":{\"t\":\"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 覆盖索引（Covering Index） 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！\"},\"2814\":{\"t\":\"覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。\"},\"2815\":{\"t\":\"如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。\"},\"2816\":{\"h\":\"2.8联合索引：\",\"a\":\"_2-8联合索引\"},\"2817\":{\"t\":\"使用表中的多个字段创建索引，就是 联合索引，也叫 组合索引 或 复合索引。\"},\"2818\":{\"t\":\"最左前缀匹配原则\"},\"2819\":{\"t\":\"最左前缀匹配原则指的是，在使用联合索引时，MySQL 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 >、<）才会停止匹配。对于 >=、<=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。\"},\"2820\":{\"t\":\"索引下推\"},\"2821\":{\"t\":\"索引下推（Index Condition Pushdown） 是 MySQL 5.6 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。\"},\"2822\":{\"h\":\"2.9正确使用索引的一些建议：\",\"a\":\"_2-9正确使用索引的一些建议\"},\"2823\":{\"t\":\"选择合适的字段创建索引：\"},\"2824\":{\"t\":\"不为 NULL 的字段 ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。\"},\"2825\":{\"t\":\"被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。\"},\"2826\":{\"t\":\"被作为条件查询的字段 ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。\"},\"2827\":{\"t\":\"频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。\"},\"2828\":{\"t\":\"被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。\"},\"2829\":{\"t\":\"被频繁更新的字段应该慎重建立索引：\"},\"2830\":{\"t\":\"虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。\"},\"2831\":{\"t\":\"限制每张表上的索引数量：\"},\"2832\":{\"t\":\"索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。\"},\"2833\":{\"t\":\"索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。\"},\"2834\":{\"t\":\"因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。\"},\"2835\":{\"t\":\"尽可能的考虑建立联合索引而不是单列索引：\"},\"2836\":{\"t\":\"因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。\"},\"2837\":{\"t\":\"注意避免冗余索引：\"},\"2838\":{\"t\":\"冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\"},\"2839\":{\"t\":\"字符串类型的字段使用前缀索引代替普通索引：\"},\"2840\":{\"t\":\"前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。\"},\"2841\":{\"t\":\"避免索引失效：\"},\"2842\":{\"t\":\"索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：\"},\"2843\":{\"t\":\"使用 SELECT * 进行查询;\"},\"2844\":{\"t\":\"创建了组合索引，但查询条件未遵守最左匹配原则;\"},\"2845\":{\"t\":\"在索引列上进行计算、函数、类型转换等操作;\"},\"2846\":{\"t\":\"以 % 开头的 LIKE 查询比如 like '%abc';\"},\"2847\":{\"t\":\"查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;\"},\"2848\":{\"t\":\"发生隐式转换\"},\"2849\":{\"h\":\"3.锁机制\",\"a\":\"_3-锁机制\"},\"2850\":{\"t\":\"在 MySQL 里，根据加锁的范围，可以分为全局锁、表级锁和行锁三类。\"},\"2851\":{\"t\":\"img\"},\"2852\":{\"h\":\"3.1全局锁：\",\"a\":\"_3-1全局锁\"},\"2853\":{\"t\":\"要使用全局锁，则要执行这条命令：\"},\"2854\":{\"t\":\"flush tables with read lock \"},\"2855\":{\"t\":\"执行后，整个数据库就处于只读状态了，这时其他线程执行以下操作，都会被阻塞：\"},\"2856\":{\"t\":\"对数据的增删改操作，比如 insert、delete、update等语句；\"},\"2857\":{\"t\":\"对表结构的更改操作，比如 alter table、drop table 等语句。\"},\"2858\":{\"t\":\"如果要释放全局锁，则要执行这条命令：\"},\"2859\":{\"t\":\"unlock tables \"},\"2860\":{\"t\":\"全局锁应用场景是什么？\"},\"2861\":{\"t\":\"全局锁主要应用于做全库逻辑备份，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。\"},\"2862\":{\"t\":\"加全局锁又会带来什么缺点呢？\"},\"2863\":{\"t\":\"加上全局锁，意味着整个数据库都是只读状态。\"},\"2864\":{\"t\":\"那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。\"},\"2865\":{\"t\":\"既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？\"},\"2866\":{\"t\":\"有的，如果数据库的引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。\"},\"2867\":{\"t\":\"因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。\"},\"2868\":{\"t\":\"备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 –single-transaction 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。\"},\"2869\":{\"t\":\"InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。\"},\"2870\":{\"t\":\"但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。\"},\"2871\":{\"h\":\"3.2表级锁：\",\"a\":\"_3-2表级锁\"},\"2872\":{\"t\":\"MySQL 里面表级别的锁有这几种：\"},\"2873\":{\"t\":\"表锁；\"},\"2874\":{\"t\":\"元数据锁（MDL）;\"},\"2875\":{\"t\":\"意向锁；\"},\"2876\":{\"t\":\"AUTO-INC 锁；\"},\"2877\":{\"h\":\"3.2.1表锁\",\"a\":\"_3-2-1表锁\"},\"2878\":{\"t\":\"先来说说表锁。\"},\"2879\":{\"t\":\"如果我们想对学生表（t_student）加表锁，可以使用下面的命令：\"},\"2880\":{\"t\":\"//表级别的共享锁，也就是读锁； lock tables t_student read; //表级别的独占锁，也就是写锁； lock tables t_stuent write; \"},\"2881\":{\"t\":\"需要注意的是，表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。\"},\"2882\":{\"t\":\"也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放。\"},\"2883\":{\"t\":\"要释放表锁，可以使用下面这条命令，会释放当前会话的所有表锁：\"},\"2884\":{\"t\":\"unlock tables \"},\"2885\":{\"t\":\"另外，当会话退出后，也会释放所有表锁。\"},\"2886\":{\"t\":\"不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁。\"},\"2887\":{\"h\":\"3.2.2元数据锁\",\"a\":\"_3-2-2元数据锁\"},\"2888\":{\"t\":\"再来说说元数据锁（MDL）。\"},\"2889\":{\"t\":\"我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：\"},\"2890\":{\"t\":\"对一张表进行 CRUD 操作时，加的是 MDL 读锁；\"},\"2891\":{\"t\":\"对一张表做结构变更操作的时候，加的是 MDL 写锁；\"},\"2892\":{\"t\":\"MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。\"},\"2893\":{\"t\":\"当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。\"},\"2894\":{\"t\":\"反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。\"},\"2895\":{\"t\":\"MDL 不需要显示调用，那它是在什么时候释放的?\"},\"2896\":{\"t\":\"MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。\"},\"2897\":{\"t\":\"那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），那在对表结构做变更操作的时候，可能会发生意想不到的事情，比如下面这个顺序的场景：\"},\"2898\":{\"t\":\"首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；\"},\"2899\":{\"t\":\"然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；\"},\"2900\":{\"t\":\"接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，\"},\"2901\":{\"t\":\"那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。\"},\"2902\":{\"t\":\"为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？\"},\"2903\":{\"t\":\"这是因为申请 MDL 锁的操作会形成一个队列，队列中写锁获取优先级高于读锁，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。\"},\"2904\":{\"t\":\"所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。\"},\"2905\":{\"h\":\"3.2.3意向锁\",\"a\":\"_3-2-3意向锁\"},\"2906\":{\"t\":\"接着，说说意向锁。\"},\"2907\":{\"t\":\"在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；\"},\"2908\":{\"t\":\"在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；\"},\"2909\":{\"t\":\"也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。\"},\"2910\":{\"t\":\"而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。\"},\"2911\":{\"t\":\"不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：\"},\"2912\":{\"t\":\"//先在表上加上意向共享锁，然后对读取的记录加共享锁 select ... lock in share mode; //先表上加上意向独占锁，然后对读取的记录加独占锁 select ... for update; \"},\"2913\":{\"t\":\"意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（lock tables ... read）和独占表锁（lock tables ... write）发生冲突。\"},\"2914\":{\"t\":\"表锁和行锁是满足读读共享、读写互斥、写写互斥的。\"},\"2915\":{\"t\":\"如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。\"},\"2916\":{\"t\":\"那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。\"},\"2917\":{\"t\":\"所以，意向锁的目的是为了快速判断表里是否有记录被加锁。\"},\"2918\":{\"h\":\"3.2.4AUTO-INC 锁\",\"a\":\"_3-2-4auto-inc-锁\"},\"2919\":{\"t\":\"表里的主键通常都会设置成自增的，这是通过对主键字段声明 AUTO_INCREMENT 属性实现的。\"},\"2920\":{\"t\":\"之后可以在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 AUTO-INC 锁实现的。\"},\"2921\":{\"t\":\"AUTO-INC 锁是特殊的表锁机制，锁不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放。\"},\"2922\":{\"t\":\"在插入数据时，会加一个表级别的 AUTO-INC 锁，然后为被 AUTO_INCREMENT 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。\"},\"2923\":{\"t\":\"那么，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 AUTO_INCREMENT 修饰的字段的值是连续递增的。\"},\"2924\":{\"t\":\"但是， AUTO-INC 锁对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。\"},\"2925\":{\"t\":\"因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种轻量级的锁来实现自增。\"},\"2926\":{\"t\":\"一样也是在插入数据的时候，会为被 AUTO_INCREMENT 修饰的字段加上轻量级锁，然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁。\"},\"2927\":{\"t\":\"InnoDB 存储引擎提供了个 innodb_autoinc_lock_mode 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。\"},\"2928\":{\"t\":\"当 innodb_autoinc_lock_mode = 0，就采用 AUTO-INC 锁，语句执行结束后才释放锁；\"},\"2929\":{\"t\":\"当 innodb_autoinc_lock_mode = 2，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。\"},\"2930\":{\"t\":\"当 innodb_autoinc_lock_mode = 1： \"},\"2931\":{\"t\":\"普通 insert 语句，自增锁在申请之后就马上释放；\"},\"2932\":{\"t\":\"类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；\"},\"2933\":{\"t\":\"当 innodb_autoinc_lock_mode = 2 是性能最高的方式，但是当搭配 binlog 的日志格式是 statement 一起使用的时候，在「主从复制的场景」中会发生数据不一致的问题。\"},\"2934\":{\"t\":\"要解决这问题，binlog 日志格式要设置为 row，这样在 binlog 里面记录的是主库分配的自增值，到备库执行的时候，主库的自增值是什么，从库的自增值就是什么。\"},\"2935\":{\"t\":\"所以，当 innodb_autoinc_lock_mode = 2 时，并且 binlog_format = row，既能提升并发性，又不会出现数据一致性问题。\"},\"2936\":{\"h\":\"3.3行级锁：\",\"a\":\"_3-3行级锁\"},\"2937\":{\"t\":\"InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。\"},\"2938\":{\"t\":\"前面也提到，普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为锁定读。\"},\"2939\":{\"t\":\"//对读取的记录加共享锁 select ... lock in share mode; //对读取的记录加独占锁 select ... for update; \"},\"2940\":{\"t\":\"上面这两条语句必须在一个事务中，因为当事务提交了，锁就会被释放，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。\"},\"2941\":{\"t\":\"共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。\"},\"2942\":{\"t\":\"img\"},\"2943\":{\"t\":\"行级锁的类型主要有三类：\"},\"2944\":{\"t\":\"Record Lock，记录锁，也就是仅仅把一条记录锁上；\"},\"2945\":{\"t\":\"Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"},\"2946\":{\"t\":\"Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"2947\":{\"h\":\"3.3.1Record Lock\",\"a\":\"_3-3-1record-lock\"},\"2948\":{\"t\":\"Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：\"},\"2949\":{\"t\":\"当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;\"},\"2950\":{\"t\":\"当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。\"},\"2951\":{\"h\":\"3.3.2Gap Lock\",\"a\":\"_3-3-2gap-lock\"},\"2952\":{\"t\":\"Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。\"},\"2953\":{\"t\":\"假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。\"},\"2954\":{\"t\":\"间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。\"},\"2955\":{\"h\":\"3.3.3Next-Key Lock\",\"a\":\"_3-3-3next-key-lock\"},\"2956\":{\"t\":\"Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"2957\":{\"t\":\"所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。\"},\"2958\":{\"t\":\"next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。\"},\"2959\":{\"t\":\"比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。\"},\"2960\":{\"t\":\"虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。\"},\"2961\":{\"h\":\"3.3.4插入意向锁\",\"a\":\"_3-3-4插入意向锁\"},\"2962\":{\"t\":\"一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。\"},\"2963\":{\"t\":\"如果有的话，插入操作就会发生阻塞，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个插入意向锁，表明有事务想在某个区间插入新记录，但是现在处于等待状态。\"},\"2964\":{\"t\":\"插入意向锁名字虽然有意向锁，但是它并不是意向锁，它是一种特殊的间隙锁，属于行级别锁。\"},\"2965\":{\"t\":\"如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。\"},\"2966\":{\"t\":\"插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。\"},\"2967\":{\"h\":\"3.4ACID事务\",\"a\":\"_3-4acid事务\"},\"2968\":{\"t\":\"事务是由 MySQL 的引擎来实现的，我们常见的 InnoDB 引擎它是支持事务的。\"},\"2969\":{\"t\":\"不过并不是所有的引擎都能支持事务，比如 MySQL 原生的 MyISAM 引擎就不支持事务，也正是这样，所以大多数 MySQL 的引擎都是用 InnoDB。\"},\"2970\":{\"t\":\"事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：\"},\"2971\":{\"t\":\"原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。\"},\"2972\":{\"t\":\"一致性（Consistency）：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。\"},\"2973\":{\"t\":\"隔离性（Isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。\"},\"2974\":{\"t\":\"持久性（Durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\"},\"2975\":{\"t\":\"InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？\"},\"2976\":{\"t\":\"持久性是通过 redo log （重做日志）来保证的；\"},\"2977\":{\"t\":\"原子性是通过 undo log（回滚日志） 来保证的；\"},\"2978\":{\"t\":\"隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；\"},\"2979\":{\"t\":\"一致性则是通过持久性+原子性+隔离性来保证；\"},\"2980\":{\"h\":\"3.4.1脏读\",\"a\":\"_3-4-1脏读\"},\"2981\":{\"t\":\"如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。\"},\"2982\":{\"t\":\"举个栗子。\"},\"2983\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后再执行更新操作，如果此时事务 A 还没有提交事务，而此时正好事务 B 也从数据库中读取小林的余额数据，那么事务 B 读取到的余额数据是刚才事务 A 更新后的数据，即使没有提交事务。\"},\"2984\":{\"t\":\"因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。\"},\"2985\":{\"h\":\"3.4.2不可重复读\",\"a\":\"_3-4-2不可重复读\"},\"2986\":{\"t\":\"在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。\"},\"2987\":{\"t\":\"举个栗子。\"},\"2988\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后继续执行代码逻辑处理，在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为不可重复读。\"},\"2989\":{\"h\":\"3.4.3幻读\",\"a\":\"_3-4-3幻读\"},\"2990\":{\"t\":\"在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。\"},\"2991\":{\"t\":\"举个栗子。\"},\"2992\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库查询账户余额大于 100 万的记录，发现共有 5 条，然后事务 B 也按相同的搜索条件也是查询出了 5 条记录。\"},\"2993\":{\"t\":\"接下来，事务 A 插入了一条余额超过 100 万的账号，并提交了事务，此时数据库超过 100 万余额的账号个数就变为 6。\"},\"2994\":{\"t\":\"然后事务 B 再次查询账户余额大于 100 万的记录，此时查询到的记录数量有 6 条，发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。\"},\"2995\":{\"h\":\"3.5四大隔离级别\",\"a\":\"_3-5四大隔离级别\"},\"2996\":{\"t\":\"SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：\"},\"2997\":{\"t\":\"读未提交（*read uncommitted*），指一个事务还没提交时，它做的变更就能被其他事务看到；\"},\"2998\":{\"t\":\"读提交（*read committed*），指一个事务提交之后，它做的变更才能被其他事务看到；\"},\"2999\":{\"t\":\"可重复读（*repeatable read*），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别；\"},\"3000\":{\"t\":\"串行化（*serializable* ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\"},\"3001\":{\"t\":\"按隔离水平高低排序如下：\"},\"3002\":{\"t\":\"图片\"},\"3003\":{\"t\":\"针对不同的隔离级别，并发事务时可能发生的现象也会不同。也就是说：\"},\"3004\":{\"t\":\"在「读未提交」隔离级别下，可能发生脏读、不可重复读和幻读现象；\"},\"3005\":{\"t\":\"在「读提交」隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；\"},\"3006\":{\"t\":\"在「可重复读」隔离级别下，可能发生幻读现象，但是不可能脏读和不可重复读现象；\"},\"3007\":{\"t\":\"在「串行化」隔离级别下，脏读、不可重复读和幻读现象都不可能会发生。\"},\"3008\":{\"t\":\"所以，要解决脏读现象，就要升级到「读提交」以上的隔离级别；要解决不可重复读现象，就要升级到「可重复读」的隔离级别，要解决幻读现象不建议将隔离级别升级到「串行化」。\"},\"3009\":{\"t\":\"不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，我们讨论的 MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入。\"},\"3010\":{\"t\":\"MySQL 在「可重复读」隔离级别下，可以很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能。\"},\"3011\":{\"t\":\"MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象，解决的方案有两种：\"},\"3012\":{\"t\":\"针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\"},\"3013\":{\"t\":\"针对当前读（select ... for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\"},\"3014\":{\"t\":\"这四种隔离级别具体是如何实现的呢？\"},\"3015\":{\"t\":\"对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；\"},\"3016\":{\"t\":\"对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；\"},\"3017\":{\"t\":\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View。\"},\"3018\":{\"h\":\"3.6MVCC\",\"a\":\"_3-6mvcc\"},\"3019\":{\"t\":\"MVCC 的实现依赖于：隐藏字段、Read View、undo log。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改。\"},\"3020\":{\"t\":\"什么是MySQL InnoDB下的当前读和快照读?\"},\"3021\":{\"t\":\"当前读\"},\"3022\":{\"t\":\"像select lock in share mode(共享锁), select for update ; update, insert ,delete(排他锁)这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁\"},\"3023\":{\"t\":\"快照读\"},\"3024\":{\"t\":\"像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本\"},\"3025\":{\"t\":\"说白了MVCC就是为了实现读-写冲突不加锁，而这个读指的就是快照读, 而非当前读，当前读实际上是一种加锁的操作，是悲观锁的实现。\"},\"3026\":{\"h\":\"3.6.1隐藏字段\",\"a\":\"_3-6-1隐藏字段\"},\"3027\":{\"t\":\"在内部，InnoDB 存储引擎为每行数据添加了三个 隐藏字段：\"},\"3028\":{\"t\":\"DB_TRX_ID（6字节）：表示最后一次插入或更新该行的事务 id。此外，delete 操作在内部被视为更新，只不过会在记录头 Record header 中的 deleted_flag 字段将其标记为已删除\"},\"3029\":{\"t\":\"DB_ROLL_PTR（7字节） 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空\"},\"3030\":{\"t\":\"DB_ROW_ID（6字节）：如果没有设置主键且该表没有唯一非空索引时，InnoDB 会使用该 id 来生成聚簇索引\"},\"3031\":{\"t\":\"ReadView主要是用来做可见性判断，里面保存了 “当前对本事务不可见的其他活跃事务”\"},\"3032\":{\"t\":\" trx_id_t m_low_limit_id; /* 大于等于这个 ID 的事务均不可见 */ trx_id_t m_up_limit_id; /* 小于这个 ID 的事务均可见 */ trx_id_t m_creator_trx_id; /* 创建该 Read View 的事务ID */ trx_id_t m_low_limit_no; /* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */ ids_t m_ids; /* 创建 Read View 时的活跃事务列表 */ \"},\"3033\":{\"t\":\"m_low_limit_id：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见\"},\"3034\":{\"t\":\"m_up_limit_id：活跃事务列表 m_ids 中最小的事务 ID，如果 m_ids 为空，则 m_up_limit_id 为 m_low_limit_id。小于这个 ID 的数据版本均可见\"},\"3035\":{\"t\":\"m_ids：Read View 创建时其他未提交的活跃事务 ID 列表。创建 Read View时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。m_ids 不包括当前事务自己和已提交的事务（正在内存中）\"},\"3036\":{\"t\":\"m_creator_trx_id：创建该 Read View 的事务 ID\"},\"3037\":{\"h\":\"3.6.2undo-log\",\"a\":\"_3-6-2undo-log\"},\"3038\":{\"t\":\"undo log 主要有两个作用：\"},\"3039\":{\"t\":\"当事务回滚时用于将数据恢复到修改前的样子\"},\"3040\":{\"t\":\"另一个作用是 MVCC ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 undo log 读取之前的版本数据，以此实现非锁定读\"},\"3041\":{\"t\":\"在 InnoDB 存储引擎中 undo log 分为两种： insert undo log 和 update undo log：\"},\"3042\":{\"t\":\"insert undo log ：指在 insert 操作中产生的 undo log。因为 insert 操作的记录只对事务本身可见，对其他事务不可见，故该 undo log 可以在事务提交后直接删除。不需要进行 purge 操作\"},\"3043\":{\"h\":\"3.6.3ReadView\",\"a\":\"_3-6-3readview\"},\"3044\":{\"t\":\"Read View就是事务进行快照读操作的时候生产的读视图(Read View)，在该事务执行的快照读的那一刻，会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的ID(当每个事务开启时，都会被分配一个ID, 这个ID是递增的，所以最新的事务，ID值越大)。\"},\"3045\":{\"t\":\"Read View遵循一个可见性算法，主要是将要被修改的数据的最新记录中的DB_TRX_ID（即当前事务ID）取出来，与系统当前其他活跃事务的ID去对比（由Read View维护），如果DB_TRX_ID跟Read View的属性做了某些比较，不符合可见性，那就通过DB_ROLL_PTR回滚指针去取出Undo Log中的DB_TRX_ID再比较，即遍历链表的DB_TRX_ID（从链首到链尾，即从最近的一次修改查起），直到找到满足特定条件的DB_TRX_ID, 那么这个DB_TRX_ID所在的旧记录就是当前事务能看见的最新老版本。\"},\"3046\":{\"t\":\"首先比较DB_TRX_ID < up_limit_id, 如果小于，则当前事务能看到DB_TRX_ID 所在的记录，如果大于等于进入下一个判断\"},\"3047\":{\"t\":\"接下来判断 DB_TRX_ID 大于等于 low_limit_id , 如果大于等于则代表DB_TRX_ID 所在的记录在Read View生成后才出现的，那对当前事务肯定不可见，如果小于则进入下一个判断\"},\"3048\":{\"t\":\"判断DB_TRX_ID 是否在活跃事务之中，trx_list.contains(DB_TRX_ID)，如果在，则代表我Read View生成时刻，你这个事务还在活跃，还没有Commit，你修改的数据，我当前事务也是看不见的；如果不在，则说明，你这个事务在Read View生成之前就已经Commit了，你修改的结果，我当前事务是能看见的\"},\"3049\":{\"h\":\"3.6.4整体流程\",\"a\":\"_3-6-4整体流程\"},\"3050\":{\"t\":\"当事务2对某行数据执行了快照读，数据库为该行数据生成一个Read View读视图，假设当前事务ID为2，此时还有事务1和事务3在活跃中，事务4在事务2快照读前一刻提交更新了，所以Read View记录了系统当前活跃事务1，3的ID，维护在一个列表上，假设我们称为trx_list。\"},\"3051\":{\"t\":\"Read View不仅仅会通过一个列表trx_list来维护事务2执行快照读那刻系统正活跃的事务ID，还会有两个属性up_limit_id（记录trx_list列表中事务ID最小的ID），low_limit_id(记录trx_list列表中下一个事务ID，也就是目前已出现过的事务ID的最大值+1)；所以在这里例子中up_limit_id就是1，low_limit_id就是4 + 1 = 5，trx_list集合的值是1,3，Read View如下图：\"},\"3052\":{\"t\":\"我们的例子中，只有事务4修改过该行记录，并在事务2执行快照读前，就提交了事务，所以当前该行当前数据的undo log如下图所示；我们的事务2在快照读该行记录的时候，就会拿该行记录的DB_TRX_ID去跟up_limit_id,low_limit_id和活跃事务ID列表(trx_list)进行比较，判断当前事务2能看到该记录的版本是哪个。\"},\"3053\":{\"t\":\"所以先拿该记录DB_TRX_ID字段记录的事务ID 4去跟Read View的的up_limit_id比较，看4是否小于up_limit_id(1)，所以不符合条件，继续判断 4 是否大于等于 low_limit_id(5)，也不符合条件，最后判断4是否处于trx_list中的活跃事务, 最后发现事务ID为4的事务不在当前活跃事务列表中, 符合可见性条件，所以事务4修改后提交的最新结果对事务2快照读时是可见的，所以事务2能读到的最新数据记录是事务4所提交的版本，而事务4提交的版本也是全局角度上最新的版本。\"},\"3054\":{\"t\":\"也正是Read View生成时机的不同，从而造成RC,RR级别下快照读的结果的不同。\"},\"3055\":{\"t\":\"在RR级别下的某个事务的对某条记录的第一次快照读会创建一个快照及Read View, 将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，还是使用的是同一个Read View，所以只要当前事务在其他事务提交更新之前使用过快照读，那么之后的快照读使用的都是同一个Read View，所以对之后的修改不可见；\"},\"3056\":{\"t\":\"即RR级别下，快照读生成Read View时，Read View会记录此时所有其他活动事务的快照，这些事务的修改对于当前事务都是不可见的。而早于Read View创建的事务所做的修改均是可见\"},\"3057\":{\"t\":\"而在RC级别下的，事务中，每次快照读都会新生成一个快照和Read View, 这就是我们在RC级别下的事务中可以看到别的事务提交的更新的原因\"},\"3058\":{\"t\":\"总之在RC隔离级别下，是每个快照读都会生成并获取最新的Read View；而在RR隔离级别下，则是同一个事务中的第一个快照读才会创建Read View, 之后的快照读获取的都是同一个Read View。\"},\"3059\":{\"t\":\"参考：https://pdai.tech/md/db/sql-mysql/sql-mysql-mvcc.html；https://blog.csdn.net/qq_41361506/article/details/108538702\"},\"3060\":{\"h\":\"3.7Jdbc防止sql注入\",\"a\":\"_3-7jdbc防止sql注入\"},\"3061\":{\"t\":\"我们只需要使用PreparedStatement解决 将敏感字符进行转义。\"},\"3062\":{\"t\":\"我们可以看到输出的SQL文是把整个参数用引号包起来，并把参数中的引号作为转义字符，从而避免了参数也作为条件的一部分。\"},\"3063\":{\"t\":\"参考：https://blog.csdn.net/weixin_52258054/article/details/124891266\"},\"3064\":{\"h\":\"4.常见优化手段\",\"a\":\"_4-常见优化手段\"},\"3065\":{\"t\":\"经常一起使用的列放到一个表中\"},\"3066\":{\"t\":\"避免更多的关联操作。\"},\"3067\":{\"t\":\"禁止在数据库中存储文件（比如图片）这类大的二进制数据\"},\"3068\":{\"t\":\"在数据库中存储文件会严重影响数据库性能，消耗过多存储空间。\"},\"3069\":{\"t\":\"文件（比如图片）这类大的二进制数据通常存储于文件服务器，数据库只存储文件地址信息。\"},\"3070\":{\"t\":\"优先选择符合存储需要的最小的数据类型\"},\"3071\":{\"t\":\"存储字节越小，占用也就空间越小，性能也越好。\"},\"3072\":{\"t\":\"同财务相关的金额类数据必须使用 decimal 类型\"},\"3073\":{\"t\":\"非精准浮点 ：float,double\"},\"3074\":{\"t\":\"精准浮点 ：decimal\"},\"3075\":{\"t\":\"decimal 类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节。并且，decimal 可用于存储比 bigint 更大的整型数据\"},\"3076\":{\"t\":\"不过， 由于 decimal 需要额外的空间和计算开销，应该尽量只在需要对数据进行精确计算时才使用 decimal 。\"},\"3077\":{\"t\":\"单表不要包含过多字段\"},\"3078\":{\"t\":\"如果一个表包含过多字段的话，可以考虑将其分解成多个表，必要时增加中间表进行关联。\"},\"3079\":{\"t\":\"禁止使用全文索引\"},\"3080\":{\"t\":\"全文索引不适用于 OLTP 场景。\"},\"3081\":{\"t\":\"禁止给表中的每一列都建立单独的索引\"},\"3082\":{\"t\":\"5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。\"},\"3083\":{\"t\":\"禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询\"},\"3084\":{\"t\":\"SELECT * 消耗更多的 CPU 和 IO 以网络带宽资源\"},\"3085\":{\"t\":\"SELECT * 无法使用覆盖索引\"},\"3086\":{\"t\":\"SELECT <字段列表> 可减少表结构变更带来的影响\"},\"3087\":{\"h\":\"Redis\"},\"3088\":{\"h\":\"1.Redis 为什么这么快？\",\"a\":\"_1-redis-为什么这么快\"},\"3089\":{\"t\":\"Redis 内部做了非常多的性能优化，比较重要的主要有下面 3 点：\"},\"3090\":{\"t\":\"Redis 基于内存，内存的访问速度是磁盘的上千倍；\"},\"3091\":{\"t\":\"Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；\"},\"3092\":{\"t\":\"Redis 内置了多种优化过后的数据结构实现，性能非常高。\"},\"3093\":{\"h\":\"2.基本数据类型\",\"a\":\"_2-基本数据类型\"},\"3094\":{\"t\":\"5 种基础数据类型 ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\"},\"3095\":{\"t\":\"3 种特殊数据类型 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。\"},\"3096\":{\"h\":\"2.1数据结构及适用场景\",\"a\":\"_2-1数据结构及适用场景\"},\"3097\":{\"h\":\"2.1.1String（字符串）：\",\"a\":\"_2-1-1string-字符串\"},\"3098\":{\"h\":\"数据结构：\",\"a\":\"数据结构\"},\"3099\":{\"t\":\"String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。\"},\"3100\":{\"t\":\"SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：\"},\"3101\":{\"t\":\"SDS 不仅可以保存文本数据，还可以保存二进制数据。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。\"},\"3102\":{\"t\":\"SDS 获取字符串长度的时间复杂度是 O(1)。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 len 属性记录了字符串长度，所以复杂度为 O(1)。\"},\"3103\":{\"t\":\"Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。\"},\"3104\":{\"h\":\"应用场景：\",\"a\":\"应用场景\"},\"3105\":{\"t\":\"常规数据（比如 session、token、序列化后的对象、图片的路径）的缓存；\"},\"3106\":{\"t\":\"计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；\"},\"3107\":{\"t\":\"分布式锁(利用 SETNX key value 命令可以实现一个最简易的分布式锁)；\"},\"3108\":{\"h\":\"2.1.2List（列表）：\",\"a\":\"_2-1-2list-列表\"},\"3109\":{\"h\":\"数据结构：\",\"a\":\"数据结构-1\"},\"3110\":{\"t\":\"List 类型的底层数据结构是由双向链表或压缩列表实现的：\"},\"3111\":{\"t\":\"如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用压缩列表作为 List 类型的底层数据结构；\"},\"3112\":{\"t\":\"如果列表的元素不满足上面的条件，Redis 会使用双向链表作为 List 类型的底层数据结构；\"},\"3113\":{\"t\":\"但是在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表。\"},\"3114\":{\"h\":\"应用场景：\",\"a\":\"应用场景-1\"},\"3115\":{\"t\":\"消息队列，List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列；\"},\"3116\":{\"h\":\"2.1.3Set（集合）：\",\"a\":\"_2-1-3set-集合\"},\"3117\":{\"h\":\"数据结构：\",\"a\":\"数据结构-2\"},\"3118\":{\"t\":\"Set 类型的底层数据结构是由哈希表或整数集合实现的：\"},\"3119\":{\"t\":\"如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用整数集合作为 Set 类型的底层数据结构；\"},\"3120\":{\"t\":\"如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构。\"},\"3121\":{\"h\":\"应用场景：\",\"a\":\"应用场景-2\"},\"3122\":{\"t\":\"点赞、共同关注；\"},\"3123\":{\"h\":\"2.1.4Hash（散列）：\",\"a\":\"_2-1-4hash-散列\"},\"3124\":{\"h\":\"数据结构：\",\"a\":\"数据结构-3\"},\"3125\":{\"t\":\"Hash 类型的底层数据结构是由压缩列表或哈希表实现的：\"},\"3126\":{\"t\":\"如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用压缩列表作为 Hash 类型的底层数据结构；\"},\"3127\":{\"t\":\"如果哈希类型元素不满足上面条件，Redis 会使用哈希表作为 Hash 类型的 底层数据结构。\"},\"3128\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"3129\":{\"h\":\"应用场景：\",\"a\":\"应用场景-3\"},\"3130\":{\"t\":\"Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象以及购物车；\"},\"3131\":{\"h\":\"2.1.5Zset（有序集合）：\",\"a\":\"_2-1-5zset-有序集合\"},\"3132\":{\"h\":\"数据结构：\",\"a\":\"数据结构-4\"},\"3133\":{\"t\":\"Zset 类型的底层数据结构是由压缩列表或跳表实现的：\"},\"3134\":{\"t\":\"如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构；\"},\"3135\":{\"t\":\"如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构；\"},\"3136\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"3137\":{\"h\":\"应用场景：\",\"a\":\"应用场景-4\"},\"3138\":{\"t\":\"有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。\"},\"3139\":{\"h\":\"3.持久化\",\"a\":\"_3-持久化\"},\"3140\":{\"t\":\"Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:\"},\"3141\":{\"t\":\"快照（snapshotting，RDB）\"},\"3142\":{\"t\":\"只追加文件（append-only file, AOF）\"},\"3143\":{\"t\":\"RDB 和 AOF 的混合持久化(Redis 4.0 新增)\"},\"3144\":{\"h\":\"3.1什么是 RDB 持久化？\",\"a\":\"_3-1什么是-rdb-持久化\"},\"3145\":{\"t\":\"Redis 可以通过创建快照来获得存储在内存里面的数据在 某个时间点 上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\"},\"3146\":{\"t\":\"快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\"},\"3147\":{\"t\":\"save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。 \"},\"3148\":{\"h\":\"3.2RDB 创建快照时会阻塞主线程吗？\",\"a\":\"_3-2rdb-创建快照时会阻塞主线程吗\"},\"3149\":{\"t\":\"Redis 提供了两个命令来生成 RDB 快照文件：\"},\"3150\":{\"t\":\"save : 同步保存操作，会阻塞 Redis 主线程；\"},\"3151\":{\"t\":\"bgsave : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。\"},\"3152\":{\"h\":\"3.3什么是 AOF 持久化？\",\"a\":\"_3-3什么是-aof-持久化\"},\"3153\":{\"t\":\"与快照持久化相比，AOF 持久化的实时性更好。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化（Redis 6.0 之后已经默认是开启了），可以通过 appendonly 参数开启：\"},\"3154\":{\"t\":\"appendonly yes \"},\"3155\":{\"t\":\"开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到 AOF 缓冲区 server.aof_buf 中，然后再写入到 AOF 文件中（此时还在系统内核缓存区为同步到磁盘），最后再根据持久化方式（ fsync策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中的。\"},\"3156\":{\"t\":\"只有同步到磁盘中才算持久化保存了，否则依然存在数据丢失的风险，比如说：系统内核缓存区的数据还未同步，磁盘机器就宕机了，那这部分数据就算丢失了。\"},\"3157\":{\"t\":\"AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\"},\"3158\":{\"h\":\"3.4AOF 工作基本流程是怎样的？\",\"a\":\"_3-4aof-工作基本流程是怎样的\"},\"3159\":{\"t\":\"AOF 持久化功能的实现可以简单分为 5 步：\"},\"3160\":{\"t\":\"命令追加（append） ：所有的写命令会追加到 AOF 缓冲区中。\"},\"3161\":{\"t\":\"文件写入（write） ：将 AOF 缓冲区的数据写入到 AOF 文件中。这一步需要调用write函数（系统调用），write将数据写入到了系统内核缓冲区之后直接返回了（延迟写）。注意！！！此时并没有同步到磁盘。\"},\"3162\":{\"t\":\"文件同步（fsync） ：AOF 缓冲区根据对应的持久化方式（ fsync 策略）向硬盘做同步操作。这一步需要调用 fsync 函数（系统调用）， fsync 针对单个文件操作，对其进行强制硬盘同步，fsync 将阻塞直到写入磁盘完成后返回，保证了数据持久化。\"},\"3163\":{\"t\":\"文件重写（rewrite） ：随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。\"},\"3164\":{\"t\":\"重启加载（load） ：当 Redis 重启时，可以加载 AOF 文件进行数据恢复。\"},\"3165\":{\"t\":\"Linux 系统直接提供了一些函数用于对文件和设备进行访问和控制，这些函数被称为 系统调用（syscall）。\"},\"3166\":{\"t\":\"这里对上面提到的一些 Linux 系统调用再做一遍解释：\"},\"3167\":{\"t\":\"write ：写入系统内核缓冲区之后直接返回（仅仅是写到缓冲区），不会立即同步到硬盘。虽然提高了效率，但也带来了数据丢失的风险。同步硬盘操作通常依赖于系统调度机制，Linux 内核通常为 30s 同步一次，具体值取决于写出的数据量和 I/O 缓冲区的状态。\"},\"3168\":{\"t\":\"fsync ： fsync用于强制刷新系统内核缓冲区（同步到到磁盘），确保写磁盘操作结束才会返回。\"},\"3169\":{\"h\":\"4.删除与淘汰策略\",\"a\":\"_4-删除与淘汰策略\"},\"3170\":{\"h\":\"4.1过期的数据的删除策略了解么？\",\"a\":\"_4-1过期的数据的删除策略了解么\"},\"3171\":{\"t\":\"如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？\"},\"3172\":{\"t\":\"常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：\"},\"3173\":{\"t\":\"惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。\"},\"3174\":{\"t\":\"定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。\"},\"3175\":{\"t\":\"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性/懒汉式删除 。\"},\"3176\":{\"t\":\"但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。\"},\"3177\":{\"t\":\"怎么解决这个问题呢？答案就是：Redis 内存淘汰机制。\"},\"3178\":{\"h\":\"4.2Redis 内存淘汰机制了解么？\",\"a\":\"_4-2redis-内存淘汰机制了解么\"},\"3179\":{\"t\":\"相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?\"},\"3180\":{\"t\":\"Redis 提供 6 种数据淘汰策略：\"},\"3181\":{\"t\":\"volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰。\"},\"3182\":{\"t\":\"volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰。\"},\"3183\":{\"t\":\"volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰。\"},\"3184\":{\"t\":\"allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。\"},\"3185\":{\"t\":\"allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰。\"},\"3186\":{\"t\":\"no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\"},\"3187\":{\"t\":\"4.0 版本后增加以下两种：\"},\"3188\":{\"t\":\"volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰。\"},\"3189\":{\"t\":\"allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。\"},\"3190\":{\"h\":\"5.主从复制\",\"a\":\"_5-主从复制\"},\"3191\":{\"h\":\"5.1哨兵\",\"a\":\"_5-1哨兵\"},\"3192\":{\"t\":\"Redis Sentinel，即Redis哨兵，在Redis 2.8版本开始引入。哨兵的核心功能是主节点的自动故障转移。\"},\"3193\":{\"t\":\"下图是一个典型的哨兵集群监控的逻辑图：\"},\"3194\":{\"t\":\"哨兵实现了什么功能呢？下面是Redis官方文档的描述：\"},\"3195\":{\"t\":\"监控（Monitoring）：哨兵会不断地检查主节点和从节点是否运作正常。\"},\"3196\":{\"t\":\"自动故障转移（Automatic failover）：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。\"},\"3197\":{\"t\":\"配置提供者（Configuration provider）：客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。\"},\"3198\":{\"t\":\"通知（Notification）：哨兵可以将故障转移的结果发送给客户端。\"},\"3199\":{\"t\":\"其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移；而配置提供者和通知功能，则需要在与客户端的交互中才能体现。\"},\"3200\":{\"t\":\"哨兵监控什么呢？怎么监控呢？\"},\"3201\":{\"t\":\"这是由哨兵向主库发送 INFO 命令来完成的。就像下图所示，哨兵 2 给主库发送 INFO 命令，主库接受到这个命令后，就会把从库列表返回给哨兵。接着，哨兵就可以根据从库列表中的连接信息，和每个从库建立连接，并在这个连接上持续地对从库进行监控。哨兵 1 和 3 可以通过相同的方法和从库建立连接。\"},\"3202\":{\"t\":\"哨兵如何判断主库已经下线了呢？\"},\"3203\":{\"t\":\"首先要理解两个概念：主观下线和客观下线\"},\"3204\":{\"t\":\"主观下线：任何一个哨兵都是可以监控探测，并作出Redis节点下线的判断；\"},\"3205\":{\"t\":\"客观下线：有哨兵集群共同决定Redis节点是否下线；\"},\"3206\":{\"t\":\"当某个哨兵（如下图中的哨兵2）判断主库“主观下线”后，就会给其他哨兵发送 is-master-down-by-addr 命令。接着，其他哨兵会根据自己和主库的连接情况，做出 Y 或 N 的响应，Y 相当于赞成票，N 相当于反对票。\"},\"3207\":{\"t\":\"如果赞成票数（这里是2）是大于等于哨兵配置文件中的 quorum 配置项（比如这里如果是quorum=2）, 则可以判定主库客观下线了。\"},\"3208\":{\"t\":\"判断完主库下线后，由哪个哨兵节点来执行主从切换呢？\"},\"3209\":{\"t\":\"这里就需要哨兵集群的选举机制了。\"},\"3210\":{\"t\":\"哨兵的选举机制其实很简单，就是一个Raft选举算法： 选举的票数大于等于num(sentinels)/2+1时，将成为领导者，如果没有超过，继续选举。\"},\"3211\":{\"t\":\"任何一个想成为 Leader 的哨兵，要满足两个条件： \"},\"3212\":{\"t\":\"第一，拿到半数以上的赞成票；\"},\"3213\":{\"t\":\"第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值。\"},\"3214\":{\"t\":\"以 3 个哨兵为例，假设此时的 quorum 设置为 2，那么，任何一个想成为 Leader 的哨兵只要拿到 2 张赞成票，就可以了。\"},\"3215\":{\"t\":\"主库既然判定客观下线了，那么如何从剩余的从库中选择一个新的主库呢？\"},\"3216\":{\"t\":\"过滤掉不健康的（下线或断线），没有回复过哨兵ping响应的从节点\"},\"3217\":{\"t\":\"选择salve-priority从节点优先级最高（redis.conf）的\"},\"3218\":{\"t\":\"选择复制偏移量最大，只复制最完整的从节点\"},\"3219\":{\"t\":\"故障的转移\"},\"3220\":{\"t\":\"假设根据我们一开始的图：（我们假设：判断主库客观下线了，同时选出sentinel 3是哨兵leader）。\"},\"3221\":{\"t\":\"故障转移流程如下：\"},\"3222\":{\"t\":\"将slave-1脱离原从节点（PS: 5.0 中应该是replicaof no one)，升级主节点，\"},\"3223\":{\"t\":\"将从节点slave-2指向新的主节点\"},\"3224\":{\"t\":\"通知客户端主节点已更换\"},\"3225\":{\"t\":\"将原主节点（oldMaster）变成从节点，指向新的主节点\"},\"3226\":{\"t\":\"转移之后：\"},\"3227\":{\"h\":\"5.2主从复制\",\"a\":\"_5-2主从复制\"},\"3228\":{\"t\":\"主从库之间采用的是读写分离的方式。\"},\"3229\":{\"t\":\"读操作：主库、从库都可以接收；\"},\"3230\":{\"t\":\"写操作：首先到主库执行，然后，主库将写操作同步给从库。\"},\"3231\":{\"h\":\"5.2.1全量复制\",\"a\":\"_5-2-1全量复制\"},\"3232\":{\"t\":\"第一阶段是主从库间建立连接、协商同步的过程，主要是为全量复制做准备。在这一步，从库和主库建立起连接，并告诉主库即将进行同步，主库确认回复后，主从库间就可以开始同步了。\"},\"3233\":{\"t\":\"具体来说，从库给主库发送 psync 命令，表示要进行数据同步，主库根据这个命令的参数来启动复制。psync 命令包含了主库的 runID 和复制进度 offset 两个参数。runID，是每个 Redis 实例启动时都会自动生成的一个随机 ID，用来唯一标记这个实例。当从库和主库第一次复制时，因为不知道主库的 runID，所以将 runID 设为“？”。offset，此时设为 -1，表示第一次复制。主库收到 psync 命令后，会用 FULLRESYNC 响应命令带上两个参数：主库 runID 和主库目前的复制进度 offset，返回给从库。从库收到响应后，会记录下这两个参数。这里有个地方需要注意，FULLRESYNC 响应表示第一次复制采用的全量复制，也就是说，主库会把当前所有的数据都复制给从库。\"},\"3234\":{\"t\":\"第二阶段，主库将所有数据同步给从库。从库收到数据后，在本地完成数据加载。这个过程依赖于内存快照生成的 RDB 文件。\"},\"3235\":{\"t\":\"具体来说，主库执行 bgsave 命令，生成 RDB 文件，接着将文件发给从库。从库接收到 RDB 文件后，会先清空当前数据库，然后加载 RDB 文件。这是因为从库在通过 replicaof 命令开始和主库同步前，可能保存了其他数据。为了避免之前数据的影响，从库需要先把当前数据库清空。在主库将数据同步给从库的过程中，主库不会被阻塞，仍然可以正常接收请求。否则，Redis 的服务就被中断了。但是，这些请求中的写操作并没有记录到刚刚生成的 RDB 文件中。为了保证主从库的数据一致性，主库会在内存中用专门的 replication buffer，记录 RDB 文件生成后收到的所有写操作。\"},\"3236\":{\"t\":\"第三个阶段，主库会把第二阶段执行过程中新收到的写命令，再发送给从库。具体的操作是，当主库完成 RDB 文件发送后，就会把此时 replication buffer 中的修改操作发给从库，从库再重新执行这些操作。这样一来，主从库就实现同步了。\"},\"3237\":{\"h\":\"5.2.2增量复制\",\"a\":\"_5-2-2增量复制\"},\"3238\":{\"t\":\"先看两个概念： replication buffer 和 repl_backlog_buffer\"},\"3239\":{\"t\":\"repl_backlog_buffer：它是为了从库断开之后，如何找到主从差异数据而设计的环形缓冲区，从而避免全量复制带来的性能开销。如果从库断开时间太久，repl_backlog_buffer环形缓冲区被主库的写命令覆盖了，那么从库连上主库后只能乖乖地进行一次全量复制，所以repl_backlog_buffer配置尽量大一些，可以降低主从断开后全量复制的概率。而在repl_backlog_buffer中找主从差异的数据后，如何发给从库呢？这就用到了replication buffer。\"},\"3240\":{\"t\":\"replication buffer：Redis和客户端通信也好，和从库通信也好，Redis都需要给分配一个 内存buffer进行数据交互，客户端是一个client，从库也是一个client，我们每个client连上Redis后，Redis都会分配一个client buffer，所有数据交互都是通过这个buffer进行的：Redis先把数据写到这个buffer中，然后再把buffer中的数据发到client socket中再通过网络发送出去，这样就完成了数据交互。所以主从在增量同步时，从库作为一个client，也会分配一个buffer，只不过这个buffer专门用来传播用户的写命令到从库，保证主从数据一致，我们通常把它叫做replication buffer。\"},\"3241\":{\"t\":\"如果在网络断开期间，repl_backlog_size环形缓冲区写满之后，从库是会丢失掉那部分被覆盖掉的数据，还是直接进行全量复制呢？\"},\"3242\":{\"t\":\"对于这个问题来说，有两个关键点：\"},\"3243\":{\"t\":\"一个从库如果和主库断连时间过长，造成它在主库repl_backlog_buffer的slave_repl_offset位置上的数据已经被覆盖掉了，此时从库和主库间将进行全量复制。\"},\"3244\":{\"t\":\"每个从库会记录自己的slave_repl_offset，每个从库的复制进度也不一定相同。在和主库重连进行恢复时，从库会通过psync命令把自己记录的slave_repl_offset发给主库，主库会根据从库各自的复制进度，来决定这个从库可以进行增量复制，还是全量复制。\"},\"3245\":{\"h\":\"6.缓存雪崩/击穿/穿透\",\"a\":\"_6-缓存雪崩-击穿-穿透\"},\"3246\":{\"h\":\"6.1什么是缓存穿透？\",\"a\":\"_6-1什么是缓存穿透\"},\"3247\":{\"t\":\"缓存穿透说简单点就是大量请求的 key 是不合理的，根本不存在于缓存中，也不存在于数据库中 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"3248\":{\"h\":\"6.1.1有哪些解决办法？\",\"a\":\"_6-1-1有哪些解决办法\"},\"3249\":{\"t\":\"最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。\"},\"3250\":{\"t\":\"1）缓存无效 key\"},\"3251\":{\"t\":\"如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： SET key value EX 10086 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。\"},\"3252\":{\"t\":\"2）布隆过滤器\"},\"3253\":{\"t\":\"布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。\"},\"3254\":{\"t\":\"具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\"},\"3255\":{\"t\":\"但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。\"},\"3256\":{\"t\":\"为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！\"},\"3257\":{\"t\":\"我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：\"},\"3258\":{\"t\":\"使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。\"},\"3259\":{\"t\":\"根据得到的哈希值，在位数组中把对应下标的值置为 1。\"},\"3260\":{\"t\":\"我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：\"},\"3261\":{\"t\":\"对给定元素再次进行相同的哈希计算；\"},\"3262\":{\"t\":\"得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。\"},\"3263\":{\"t\":\"然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）\"},\"3264\":{\"h\":\"6.2什么是缓存击穿？\",\"a\":\"_6-2什么是缓存击穿\"},\"3265\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"3266\":{\"h\":\"6.2.1有哪些解决办法？\",\"a\":\"_6-2-1有哪些解决办法\"},\"3267\":{\"t\":\"设置热点数据永不过期或者过期时间比较长。\"},\"3268\":{\"t\":\"针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。\"},\"3269\":{\"t\":\"请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。\"},\"3270\":{\"h\":\"6.2.2缓存穿透和缓存击穿有什么区别？\",\"a\":\"_6-2-2缓存穿透和缓存击穿有什么区别\"},\"3271\":{\"t\":\"缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。\"},\"3272\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。\"},\"3273\":{\"h\":\"6.3什么是缓存雪崩？\",\"a\":\"_6-3什么是缓存雪崩\"},\"3274\":{\"t\":\"我发现缓存雪崩这名字起的有点意思，哈哈。\"},\"3275\":{\"t\":\"实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。\"},\"3276\":{\"t\":\"另外，缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。\"},\"3277\":{\"h\":\"6.3.1有哪些解决办法？\",\"a\":\"_6-3-1有哪些解决办法\"},\"3278\":{\"t\":\"针对 Redis 服务不可用的情况：\"},\"3279\":{\"t\":\"采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。\"},\"3280\":{\"t\":\"限流，避免同时处理大量的请求。\"},\"3281\":{\"t\":\"针对热点缓存失效的情况：\"},\"3282\":{\"t\":\"设置不同的失效时间比如随机设置缓存的失效时间。\"},\"3283\":{\"t\":\"缓存永不失效（不太推荐，实用性太差）。\"},\"3284\":{\"t\":\"设置二级缓存。\"},\"3285\":{\"h\":\"6.3.2缓存雪崩和缓存击穿有什么区别？\",\"a\":\"_6-3-2缓存雪崩和缓存击穿有什么区别\"},\"3286\":{\"t\":\"缓存雪崩和缓存击穿比较像，但缓存雪崩导致的原因是缓存中的大量或者所有数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。\"},\"3287\":{\"h\":\"Docker\"},\"3288\":{\"h\":\"1.什么是 Docker?\",\"a\":\"_1-什么是-docker\"},\"3289\":{\"t\":\"Docker 是世界领先的软件容器平台。\"},\"3290\":{\"t\":\"Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 UnionFS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\"},\"3291\":{\"t\":\"Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。\"},\"3292\":{\"t\":\"用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\"},\"3293\":{\"t\":\"组成部分：\"},\"3294\":{\"t\":\"镜像（Image）：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像是静态的，不包含任何动态数据，其内容在构建之后也不会被改变。\"},\"3295\":{\"t\":\"容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\"},\"3296\":{\"t\":\"仓库（Repository）：仓库（Repository）类似Git的远程仓库，集中存放镜像文件。\"},\"3297\":{\"h\":\"2.Docker的架构\",\"a\":\"_2-docker的架构\"},\"3298\":{\"t\":\"Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，模块各司其职。\"},\"3299\":{\"t\":\"用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。\"},\"3300\":{\"t\":\"Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。\"},\"3301\":{\"t\":\"Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。\"},\"3302\":{\"t\":\"Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graphdriver 将下载镜像以 Graph 的形式存储。\"},\"3303\":{\"t\":\"当需要为 Docker 创建网络环境时，通过网络管理驱动 Networkdriver 创建并配置 Docker容器网络环境。\"},\"3304\":{\"t\":\"当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。\"},\"3305\":{\"t\":\"Libcontainer 是一项独立的容器管理包，Networkdriver 以及 Execdriver 都是通过 Libcontainer 来实现具体对容器进行的操作。\"},\"3306\":{\"h\":\"3.镜像和容器的相关操作\",\"a\":\"_3-镜像和容器的相关操作\"},\"3307\":{\"t\":\"#查看基本信息 docker version #查看 docker 的版本号，包括客户端、服务端等。 # 搜索镜像 docker search <image> # 在 docker index 中搜索 image # 下载镜像 docker pull <image> # 从 docker registry server 中下拉 image # 查看镜像 docker images： #列出 images docker images -a #列出所有的 images（包含历史） docker rmi <image ID>： #删除一个或多个 image # 使用镜像创建容器 docker run -i -t sauloal/ubuntu14.04 #查看容器 docker ps ：列出当前所有正在运行的 container # 再次启动容器 docker start/stop/restart <container> #：开启/停止/重启 container #进入正在运行的 docker 容器 docker exec -it [container_id] /bin/bash # 删除容器 docker rm <container...> #：删除一个或多个 container \"},\"3308\":{\"h\":\"4.Docker面试题\",\"a\":\"_4-docker面试题\"},\"3309\":{\"h\":\"4.1Docker与虚拟机的对比\",\"a\":\"_4-1docker与虚拟机的对比\"},\"3310\":{\"t\":\"下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统， 而虚拟机传统方式则是在硬件层面实现。\"},\"3311\":{\"t\":\"传统的虚拟机首先通过Hypervisor层对物理硬件进行虚拟化，然后在虚拟的硬件资源上安装从操作系统(guest os)，最后将相关应用运行在从操作系统上。其中APP+BINS/LIBS+Guest OS为虚拟机。\"},\"3312\":{\"t\":\"而docker不像虚拟机那样利用Hypervisor和guest os实现资源与环境的隔离，其仅通过一个dockerdaemon/engine来实现资源限制与环境隔离( 终极目标是app的隔离 )(主要利用 linux内核 本身支持的容器方式来实现这一功能)，其中APP+BINS/LIBS为容器(container)。 docker daemon/engine可以简单看成对Linux内核中的NameSpace、Cgroup、镜像管理文件系统操作的封装。 简单的说，docker利用namespace实现系统环境的隔离；利用Cgroup实现资源限制；利用镜像实现根目录环境的隔离。\"},\"3313\":{\"h\":\"4.2什么是 Docker 容器？\",\"a\":\"_4-2什么是-docker-容器\"},\"3314\":{\"t\":\"Docker容器在应用程序层创建抽象并将应用程序及其所有依赖项打包在一起。这使我们能够快速可靠地部署应用程序。容器不需要我们安装不同的操作系统。相反，它们使用底层系统的 CPU 和内存来执行任务。这意味着任何容器化应用程序都可以在任何平台上运行，而不管底层操作系统如何。我们也可以将容器视为 Docker 镜像的运行时实例。\"},\"3315\":{\"h\":\"4.3什么是 DockerFile？\",\"a\":\"_4-3什么是-dockerfile\"},\"3316\":{\"t\":\"Dockerfile 是一个文本文件，其中包含我们需要运行以构建 Docker 映像的所有命令。Docker 使用 Dockerfile 中的指令自动构建镜像。我们可以docker build用来创建按顺序执行多个命令行指令的自动构建。\"},\"3317\":{\"h\":\"4.4如何从 Docker 镜像创建 Docker 容器？\",\"a\":\"_4-4如何从-docker-镜像创建-docker-容器\"},\"3318\":{\"t\":\"为了从镜像创建容器，我们从 Docker 存储库中提取我们想要的镜像并创建一个容器。我们可以使用以下命令：\"},\"3319\":{\"t\":\"docker run -it -d <image_name> –detach -d 在后台运行容器，并且打印容器id。 –interactive -i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用。 –tty -t 分配一个伪tty，一般与 -i 连用。 \"},\"3320\":{\"h\":\"4.5停止和终止容器的区别？\",\"a\":\"_4-5停止和终止容器的区别\"},\"3321\":{\"t\":\"两个命令都是停止容器，不同之处在于：\"},\"3322\":{\"t\":\"docker stop: 先发 SIGTERM 信号给容器，允许其在一定时间（默认 10s）内进行一些操作，若这段时间内容器未停止，则发送 SIGKILL 信号强行杀掉容器；\"},\"3323\":{\"t\":\"docker kill: 直接发送 SIGKILL 信号杀掉容器。\"},\"3324\":{\"t\":\"这两个命令在实际使用时，通俗说法就是 stop 类似按关机键关机，kill 则相当于直接拔电源。\"},\"3325\":{\"h\":\"4.6解释 Docker 组件?\",\"a\":\"_4-6解释-docker-组件\"},\"3326\":{\"t\":\"三个架构组件包括 Docker 客户端、主机和注册表。\"},\"3327\":{\"t\":\"Docker 客户端：该组件执行构建和运行操作以与 Docker 主机通信。\"},\"3328\":{\"t\":\"Docker 主机：该组件包含 Docker 守护程序、Docker 镜像和 Docker 容器。守护进程建立到 Docker Registry 的连接。\"},\"3329\":{\"t\":\"Docker Registry：该组件存储 Docker 镜像。它可以是公共注册表，例如 Docker Hub 或 Docker Cloud，也可以是私有注册表。\"},\"3330\":{\"h\":\"Git\"},\"3331\":{\"h\":\"1.git的4个区域及转换\",\"a\":\"_1-git的4个区域及转换\"},\"3332\":{\"t\":\"Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：\"},\"3333\":{\"t\":\"Workspace：工作区，就是你平时存放项目代码的地方;\"},\"3334\":{\"t\":\"Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息,一般存放在 .git 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）;\"},\"3335\":{\"t\":\"Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本;\"},\"3336\":{\"t\":\"Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换;\"},\"3337\":{\"h\":\"2.列举工作中常用的几个git命令？\",\"a\":\"_2-列举工作中常用的几个git命令\"},\"3338\":{\"t\":\"远程仓库中clone代码到本地：git clone https://github.com/yangluheng/yangluheng.github.io 新增文件的命令：git add file或者git add . 提交文件的命令：git commit –m或者git commit –a 本地仓库提交到远程仓库：git push 查看工作区状况：git status –s 拉取合并远程分支的操作：git fetch/git merge或者git pull 查看提交记录命令：git reflog 切换到主分支： git checkout master \"},\"3339\":{\"h\":\"3.提交时发生冲突，你能解释冲突是如何产生的吗？你是如何解决的？\",\"a\":\"_3-提交时发生冲突-你能解释冲突是如何产生的吗-你是如何解决的\"},\"3340\":{\"t\":\"开发过程中，我们都有自己的特性分支，所以冲突发生的并不多，但也碰到过。诸如公共类的公共方法，我和别人同时修改同一个文件，他提交后我再提交就会报冲突的错误。\"},\"3341\":{\"t\":\"发生冲突，在IDE里面一般都是对比本地文件和远程分支的文件，然后把远程分支上文件的内容手工修改到本地文件，然后再提交冲突的文件使其保证与远程分支的文件一致，这样才会消除冲突，然后再提交自己修改的部分。特别要注意下，修改本地冲突文件使其与远程仓库的文件保持一致后，需要提交后才能消除冲突，否则无法继续提交。必要时可与同事交流，消除冲突。\"},\"3342\":{\"t\":\"通过git pull命令，拉取远程分支上的代码并合并到本地分支，目的是消除冲突。\"},\"3343\":{\"h\":\"4.如果本次提交误操作，如何撤销？\",\"a\":\"_4-如果本次提交误操作-如何撤销\"},\"3344\":{\"t\":\"1.使用git reset命令\"},\"3345\":{\"t\":\"可以通过git reset HEAD^来撤销最近的一次提交,将暂存区和工作目录回到上一次提交之后的状态。\"},\"3346\":{\"t\":\"2.使用git revert命令\"},\"3347\":{\"t\":\"git revert HEAD可以创建一个新的提交来撤销之前提交的内容,保留提交历史。\"},\"3348\":{\"t\":\"3.如果已经推送了提交到远程仓库\"},\"3349\":{\"t\":\"可以使用git revert在本地创建回滚提交,然后力推到远程,远程历史中会多出一次回滚提交。\"},\"3350\":{\"t\":\"或者通过git reset回退到旧提交,然后使用git push -f强制推送到远程,这种方式会改写远程仓库的提交历史。\"},\"3351\":{\"t\":\"4.如果误操作的是未提交的内容\"},\"3352\":{\"t\":\"可以使用git checkout .来撤销工作目录中所有未提交的修改。\"},\"3353\":{\"t\":\"5.使用GUI工具查看提交历史,以便确定需要回滚的提交\"},\"3354\":{\"h\":\"5.git add和git stage的区别\",\"a\":\"_5-git-add和git-stage的区别\"},\"3355\":{\"t\":\"在回答这个问题之前需要先了解 git 仓库的三个组成部分：工作区（Working Directory）、暂存区（Stage）和历史记录区（History）：\"},\"3356\":{\"t\":\"工作区：在 git 管理下的正常目录都算是工作区，我们平时的编辑工作都是在工作区完成。\"},\"3357\":{\"t\":\"暂存区：临时区域。里面存放将要提交文件的快照。\"},\"3358\":{\"t\":\"历史记录区：git commit 后的记录区。\"},\"3359\":{\"t\":\"然后我们就可以来说一下 git add 和 git stage 了。其实，他们两是同义的，所以，惊不惊喜，意不意外？这个问题竟然是个陷阱…\"},\"3360\":{\"t\":\"引入 git stage 的原因其实比较有趣：\"},\"3361\":{\"t\":\"是因为要跟 svn add 区分，两者的功能是完全不一样的，svn add 是将某个文件加入版本控制，而 git add 则是把某个文件加入暂存区，因为在 git 出来之前大家用 svn 比较多，所以为了避免误导，git 引入了git stage，然后把 git diff –staged 做为 git diff –cached 的相同命令。基于这个原因，我们建议使用 git stage 以及 git diff –staged。\"},\"3362\":{\"h\":\"6.git add . 和 git add * 区别\",\"a\":\"_6-git-add-和-git-add-区别\"},\"3363\":{\"t\":\"git add . 会把本地所有untrack的文件都加入暂存区，并且会根据.gitignore做过滤，但是git add * 会忽略.gitignore把任何文件都加入。\"},\"3364\":{\"h\":\"7.git add和git commit的区别\",\"a\":\"_7-git-add和git-commit的区别\"},\"3365\":{\"t\":\"git add把文件添加进去，实际上就是把文件修改添加到暂存区；\"},\"3366\":{\"t\":\"git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。\"},\"3367\":{\"t\":\"因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支。所以，git commit就是往master分支上提交更改。\"},\"3368\":{\"t\":\"你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\"},\"3369\":{\"t\":\"所以要想将修改提交到master中一定要先git add到暂存区中，再git commit到master分支。\"},\"3370\":{\"h\":\"8.能不能说一下git fetch和git pull命令之间的区别？\",\"a\":\"_8-能不能说一下git-fetch和git-pull命令之间的区别\"},\"3371\":{\"t\":\"git pull 命令从中央存储库中提取特定分支的新更改或提交，并更新本地存储库中的目标分支。\"},\"3372\":{\"t\":\"git fetch 也用于相同的目的，但它的工作方式略有不同。当你执行 git fetch 时，它会从所需的分支中提取所有新提交，并将其存储在本地存储库中的新分支中。如果要在目标分支中反映这些更改，必须在 git fetch 之后执行git merge。只有在对目标分支和获取的分支进行合并后才会更新目标分支。\"},\"3373\":{\"t\":\"为了方便起见，请记住以下等式：\"},\"3374\":{\"t\":\"git pull = git fetch + git merge\"},\"3375\":{\"h\":\"9.git跟其他版本控制器有啥区别？\",\"a\":\"_9-git跟其他版本控制器有啥区别\"},\"3376\":{\"t\":\"GIT是分布式版本控制系统，其他类似于SVN是集中式版本控制系统。\"},\"3377\":{\"t\":\"分布式区别于集中式在于：每个节点的地位都是平等，拥有自己的版本库，在没有网络的情况下，对工作空间内代码的修改可以提交到本地仓库，此时的本地仓库相当于集中式的远程仓库，可以基于本地仓库进行提交、撤销等常规操作，从而方便日常开发。\"},\"3378\":{\"h\":\"10.我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git status时都让这些文件显示出来，我们该如何操作？\",\"a\":\"_10-我们在本地工程常会修改一些配置文件-这些文件不需要被提交-而我们又不想每次执行git-status时都让这些文件显示出来-我们该如何操作\"},\"3379\":{\"t\":\"首先利用命令touch .gitignore新建文件\"},\"3380\":{\"t\":\"$ touch .gitignore 然后往文件中添加需要忽略哪些文件夹下的什么类型的文件\"},\"3381\":{\"h\":\"11.如何把本地仓库的内容推向一个空的远程仓库？\",\"a\":\"_11-如何把本地仓库的内容推向一个空的远程仓库\"},\"3382\":{\"t\":\"首先确保本地仓库与远程之间是连同的。如果提交失败，则需要进行下面的命令进行连通：\"},\"3383\":{\"t\":\"git remote add origin XXXX\"},\"3384\":{\"t\":\"注意：XXXX是你的远程仓库地址。\"},\"3385\":{\"t\":\"如果是第一次推送，则进行下面命令：\"},\"3386\":{\"t\":\"git push -u origin master\"},\"3387\":{\"t\":\"注意：-u 是指定origin为默认主分支\"},\"3388\":{\"t\":\"之后的提交，只需要下面的命令：\"},\"3389\":{\"t\":\"git push origin master\"},\"3390\":{\"t\":\"参考：https://blog.csdn.net/xushiyu1996818/article/details/120166824?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-120166824-blog-131392335.235^v38^pc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-120166824-blog-131392335.235^v38^pc_relevant_default_base&utm_relevant_index=7\"},\"3391\":{\"h\":\"Linux\"},\"3392\":{\"h\":\"1.常用的命令\",\"a\":\"_1-常用的命令\"},\"3393\":{\"h\":\"1.1文件与目录的基本操作\",\"a\":\"_1-1文件与目录的基本操作\"},\"3394\":{\"t\":\"列出文件或者目录的信息，目录的信息就是其中包含的文件。\"},\"3395\":{\"t\":\"ls [-aAdfFhilnrRSt] file|dir -a : 列出全部的文件 -d : 仅列出目录本身 -l : 以长数据串行列出，包含文件的属性与权限等等数据 \"},\"3396\":{\"t\":\"更换当前目录。\"},\"3397\":{\"t\":\"cd [相对路径或绝对路径] \"},\"3398\":{\"t\":\"创建目录。\"},\"3399\":{\"t\":\"mkdir [-mp] 目录名称 -m : 配置目录权限 -p : 递归创建目录 \"},\"3400\":{\"t\":\"删除，必须为空。\"},\"3401\":{\"t\":\"rmdir [-p] 目录名称 -p : 递归删除目录 rm [-fir] 文件或目录 -r : 递归删除 \"},\"3402\":{\"t\":\"更新文件时间或者建立新文件。\"},\"3403\":{\"t\":\"touch [-acdmt] filename -a : 更新 atime -c : 更新 ctime，若该文件不存在则不建立新文件 -m : 更新 mtime -d : 后面可以接更新日期而不使用当前日期，也可以使用 --date=\\\"日期或时间\\\" -t : 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm] \"},\"3404\":{\"t\":\"复制文件。\"},\"3405\":{\"t\":\"如果源文件有两个以上，则目的文件一定要是目录才行。\"},\"3406\":{\"t\":\"cp [-adfilprsu] source destination -a : 相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明 -d : 若来源文件为链接文件，则复制链接文件属性而非文件本身 -i : 若目标文件已经存在时，在覆盖前会先询问 -p : 连同文件的属性一起复制过去 -r : 递归持续复制 \"},\"3407\":{\"t\":\"移动文件。\"},\"3408\":{\"t\":\"mv [-fiu] source destination -f : force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖 \"},\"3409\":{\"h\":\"1.2修改权限\",\"a\":\"_1-2修改权限\"},\"3410\":{\"t\":\"可以将一组权限用数字来表示，此时一组权限的 3 个位当做二进制数字的位，从左到右每个位的权值为 4、2、1，即每个权限对应的数字权值为 r : 4、w : 2、x : 1。\"},\"3411\":{\"t\":\"chmod [-R] xyz dirname/filename #也可以使用符号来设定权限。 chmod [ugoa] [+-=] [rwx] dirname/filename - u: 拥有者 - g: 所属群组 - o: 其他人 - a: 所有人 - +: 添加权限 - -: 移除权限 - =: 设定权限 \"},\"3412\":{\"h\":\"1.3链接\",\"a\":\"_1-3链接\"},\"3413\":{\"t\":\"ln [-sf] source_filename dist_filename -s : 默认是 hard link，加 -s 为 symbolic link -f : 如果目标文件存在时，先删除目标文件 \"},\"3414\":{\"h\":\"1.4获取文件内容\",\"a\":\"_1-4获取文件内容\"},\"3415\":{\"t\":\"cat [-AbEnTv] filename -n : 打印出行号，连同空白行也会有行号，-b 不会 more：和 cat 不同的是它可以一页一页查看文件内容，比较适合大文件的查看。 less：和 more 类似，但是多了一个向前翻页的功能。 head [-n number] filename -n : 后面接数字，代表显示几行的意思 tail是 head 的反向操作，只是取得是后几行。 \"},\"3416\":{\"h\":\"1.5指令与文件搜索\",\"a\":\"_1-5指令与文件搜索\"},\"3417\":{\"t\":\"which [-a] command -a : 将所有指令列出，而不是只列第一个 whereis [-bmsu] dirname/filename locate [-ir] keyword -r: 正则表达式 find [basedir] [option] example: find . -name \\\"shadow*\\\" \"},\"3418\":{\"h\":\"1.6压缩与打包\",\"a\":\"_1-6压缩与打包\"},\"3419\":{\"t\":\"tar [-z|-j|-J] [cv] [-f 新建的 tar 文件] filename... ==打包压缩 tar [-z|-j|-J] [tv] [-f 已有的 tar 文件] ==查看 tar [-z|-j|-J] [xv] [-f 已有的 tar 文件] [-C 目录] ==解压缩 -z : 使用 zip； -j : 使用 bzip2； -J : 使用 xz； -c : 新建打包文件； -t : 查看打包文件里面有哪些文件； -x : 解打包或解压缩的功能； -v : 在压缩/解压缩的过程中，显示正在处理的文件名； -f : filename: 要处理的文件； -C 目录 : 在特定目录解压缩。 \"},\"3420\":{\"h\":\"1.7管道指令\",\"a\":\"_1-7管道指令\"},\"3421\":{\"t\":\"将一个命令的标准输出作为另一个命令的标准输入。\"},\"3422\":{\"t\":\"ls -al /etc | less \"},\"3423\":{\"h\":\"1.8正则表达式\",\"a\":\"_1-8正则表达式\"},\"3424\":{\"t\":\"grep [-acinv] [--color=auto] 搜寻字符串 filename -c : 统计个数 -i : 忽略大小写 -n : 输出行号 -v : 反向选择，也就是显示出没有 搜寻字符串 内容的那一行 --color=auto : 找到的关键字加颜色显示 \"},\"3425\":{\"h\":\"1.9查看进程\",\"a\":\"_1-9查看进程\"},\"3426\":{\"t\":\"查看自己的进程： ps -l 查看系统所有进程： ps aux 查看特定的进程 ps aux | grep threadx 实时显示进程信息 top 查看特定端口的进程 netstat -anp | grep port \"},\"3427\":{\"h\":\"2.内核\",\"a\":\"_2-内核\"},\"3428\":{\"t\":\"Linux内核的任务：\"},\"3429\":{\"t\":\"1.从技术层面讲，内核是硬件与软件之间的一个中间层。作用是将应用层序的请求传递给硬件，并充当底层驱动程序，对系统中的各种设备和组件进行寻址。\"},\"3430\":{\"t\":\"2.从应用程序的层面讲，应用程序与硬件没有联系，只与内核有联系，内核是应用程序知道的层次中的最底层。在实际工作中内核抽象了相关细节。\"},\"3431\":{\"t\":\"3.内核是一个资源管理程序。负责将可用的共享资源(CPU时间、磁盘空间、网络连接等)分配得到各个系统进程。\"},\"3432\":{\"t\":\"4.内核就像一个库，提供了一组面向系统的命令。系统调用对于应用程序来说，就像调用普通函数一样。\"},\"3433\":{\"t\":\"内核实现策略：\"},\"3434\":{\"t\":\"1.微内核。最基本的功能由中央内核（微内核）实现。所有其他的功能都委托给一些独立进程，这些进程通过明确定义的通信接口与中心内核通信。\"},\"3435\":{\"t\":\"2.宏内核。内核的所有代码，包括子系统（如内存管理、文件管理、设备驱动程序）都打包到一个文件中。内核中的每一个函数都可以访问到内核中所有其他部分。目前支持模块的动态装卸(裁剪)。Linux内核就是基于这个策略实现的。\"},\"3436\":{\"t\":\"哪些地方用到了内核机制？\"},\"3437\":{\"t\":\"1.进程（在cpu的虚拟内存中分配地址空间，各个进程的地址空间完全独立;同时执行的进程数最多不超过cpu数目）之间进行通 信，需要使用特定的内核机制。\"},\"3438\":{\"t\":\"2.进程间切换(同时执行的进程数最多不超过cpu数目)，也需要用到内核机制。\"},\"3439\":{\"t\":\"进程切换也需要像FreeRTOS任务切换一样保存状态，并将进程置于闲置状态/恢复状态。\"},\"3440\":{\"t\":\"3.进程的调度。确认哪个进程运行多长的时间。\"},\"3441\":{\"h\":\"3.基本组件\",\"a\":\"_3-基本组件\"},\"3442\":{\"t\":\"内核（Kernel）:\"},\"3443\":{\"t\":\"Linux 内核是操作系统的核心部分，负责管理和控制硬件资源，并提供基本的系统功能。它处理进程管理、内存管理、设备驱动程序、文件系统、网络协议栈等重要任务。Linux 内核具有模块化的设计，使得用户可以根据需要添加或删除特定的模块。\"},\"3444\":{\"t\":\"Shell：\"},\"3445\":{\"t\":\"Shell 是用户与操作系统交互的命令行解释器。它接受用户输入的命令，并将其传递给操作系统进行执行。Shell 还提供了脚本编程的能力，允许用户编写一系列的命令以自动化任务。常见的 Linux Shell 包括 Bash、Zsh 和 Fish 等，它们提供了丰富的命令和功能。\"},\"3446\":{\"t\":\"GNU 工具：\"},\"3447\":{\"t\":\"GNU 工具是一组由 GNU 项目开发的实用工具集合，用于完成各种任务。这些工具包括常见的命令行工具，如文本编辑器（例如 Emacs 和 Vim）、文件操作工具（例如 ls、cp 和 rm）、文本处理工具（例如 grep 和 sed）等。GNU 工具是 Linux 系统的重要组成部分。\"},\"3448\":{\"t\":\"系统库：\"},\"3449\":{\"t\":\"Linux 提供了广泛的系统库，用于应用程序开发。最常用的是 GNU C 库（glibc），它提供了 C 语言标准函数和系统调用的封装。此外，还有其他库，如 libstdc++（C++ 的标准库）、libpthread（线程库）、libm（数学函数库）等，它们为开发者提供了丰富的函数和功能。\"},\"3450\":{\"t\":\"X Window System：\"},\"3451\":{\"t\":\"X Window System 是 Linux 中常用的图形窗口系统，它提供了图形界面环境以及与图形硬件和输入设备的交互。X Window System 使用客户端-服务器模型，其中 X 服务器负责图形显示和输入设备控制。用户可以通过 X 客户端连接到 X 服务器，并在其上运行图形化应用程序。\"},\"3452\":{\"t\":\"桌面环境：\"},\"3453\":{\"t\":\"Linux 上有多个桌面环境可供选择，每个桌面环境都具有自己的外观、特性和工具集。\"},\"3454\":{\"t\":\"例如：GNOME 和 KDE 是两个最受欢迎的桌面环境，它们提供了完整的图形用户界面和一系列应用程序，包括文件管理器、文本编辑器、终端模拟器等。\"},\"3455\":{\"t\":\"文件系统：\"},\"3456\":{\"t\":\"Linux 支持多种文件系统，用于组织和管理存储设备上的文件和目录。常见的文件系统包括 EXT4、XFS 等。文件系统负责维护文件的元数据以及文件数据的物理存储位置。它还提供了对文件的访问和操作的接口。\"},\"3457\":{\"t\":\"网络协议栈：\"},\"3458\":{\"t\":\"Linux 内核支持各种网络协议，如 TCP/IP、UDP、HTTP、FTP 等。网络协议栈是在内核中实现的协议和算法的集合，它使得 Linux 能够进行网络通信。Linux 提供了丰富的网络工具和命令，如 ifconfig、ping、netstat 等，用于配置网络接口、测试连接和监控网络状态。\"},\"3459\":{\"h\":\"4.进程间通信方式\",\"a\":\"_4-进程间通信方式\"},\"3460\":{\"t\":\"管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。\"},\"3461\":{\"t\":\"有名管道 (named pipe) ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。\"},\"3462\":{\"t\":\"信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\"},\"3463\":{\"t\":\"消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。\"},\"3464\":{\"t\":\"信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。\"},\"3465\":{\"t\":\"共享内存( shared memory)：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。\"},\"3466\":{\"t\":\"套接字( socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。\"},\"3467\":{\"t\":\"这里主要比较一下高级通信的这三种方式的特点。\"},\"3468\":{\"t\":\"管道通信(PIPE)： 两个进程利用管道进行通信时．发送信息的进程称为写进程．接收信息的进程称为读进程。管道通信方式的中间介质就是文件．通常称这种文件为管道文件．它就像管道一样将一个写进程和一个读进程连接在一起，实现两个进程之间的通信。写进程通过写入端(发送端)往管道文件中写入信息；读进程通过读出端(接收端)从管道文件中读取信息。两个进程协调不断地进行写和读，便会构成双方通过管道传递信息的流水线。 利用系统调用PIPE()可以创建一个无名管道文件，通常称为无名管道或PIPE；利用系统调用MKNOD()可以创建一个有名管道文件．通常称为有名管道或FIFO。无名管道是一种非永久性的管道通信机构．当它访问的进程全部终止时，它也将随之被撤消。无名管道只能用在具有家族联系的进程之间。有名管道可以长期存在于系统之中．而且提供给任意关系的进程使用，但是使用不当容易导致出错．所以操作系统将命名管道的管理权交由系统来加以控制管道文件被创建后，可以通过系统调用WRITE()和READ()来实现对管道的读写操作；通信完后，可用CLOSE()将管道文件关闭。\"},\"3469\":{\"t\":\"消息缓冲通信(MESSAGE) 多个独立的进程之间可以通过消息缓冲机制来相互通信．这种通信的实现是以消息缓冲区为中间介质．通信双方的发送和接收操作均以消息为单位。在存储器中，消息缓冲区被组织成队列，通常称之为消息队列。消息队列一旦创建后即可由多进程共享．发送消息的进程可以在任意时刻发送任意个消息到指定的消息队列上，并检查是否有接收进程在等待它所发送的消息。若有则唤醒它：而接收消息的进程可以在需要消息的时候到指定的消息队列上获取消息．如果消息还没有到来．则转入睡眠状态等待。 共享内存通信(SHARED MEMORY)\"},\"3470\":{\"t\":\"共享内存\"},\"3471\":{\"t\":\"​ 这种通信方式允许多个进程在外部通信协议或同步，互斥机制的支持下使用同一个内存段(作为中间介质)进行通信．它是一种有效的数据通信方式，其特点是没有中间环节．直接将共享的内存页面通过附接．映射到相互通信的进程各自的虚拟地址空间中．从而使多个进程可以直接访问同一个物理内存页面．如同访问自己的私有空间一样(但实质上不是私有的而是共享的)。因此这种进程间通信方式是在同一个计算机系统中的诸进程间实现通信的快捷的方法．而它的局限性也在于此．即共享内存的诸进程必须共处同一个计算机系统．有物理内存可以共享才行。\"},\"3472\":{\"t\":\"三种方式的特点（优缺点）： 无名管道简单方便．但局限于单向通信的工作方式．并且只能在创建它的进程及其子孙进程之间实现管道的共享：有名管道虽然可以提供给任意关系的进程使用．但是由于其长期存在于系统之中，使用不当容易出错。\"},\"3473\":{\"t\":\"消息缓冲可以不再局限于父子进程．而允许任意进程通过共享消息队列来实现进程间通信．并由系统调用函数来实现消息发送和接收之间的同步．从而使得用户在使用消息缓冲进行通信时不再需要考虑同步问题．使用方便，但是信息的复制需要额外消耗CPU的时间．不适宜于信息量大或操作频繁的场合。\"},\"3474\":{\"t\":\"共享内存针对消息缓冲的缺点改而利用内存缓冲区直接交换信息，无须复制，快捷、信息量大是其优点。但是共享内存的通信方式是通过将共享的内存缓冲区直接附加到进程的虚拟地址空间中来实现的．因此，这些进程之间的读写操作的同步问题操作系统无法实现。必须由各进程利用其他同步工具解决。另外，由于内存实体存在于计算机系统中．所以只能由处于同一个计算机系统中的诸进程共享。不方便网络通信。\"},\"3475\":{\"h\":\"5.目录结构\",\"a\":\"_5-目录结构\"},\"3476\":{\"t\":\"Linux 使用一种称为目录树的层次结构来组织文件和目录。目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。每个目录可以包含文件和其他子目录。结构层次鲜明，就像一棵倒立的树。\"},\"3477\":{\"t\":\"inode 具体包含以下信息:\"},\"3478\":{\"t\":\"权限 (read/write/excute)；\"},\"3479\":{\"t\":\"拥有者与群组 (owner/group)；\"},\"3480\":{\"t\":\"容量；\"},\"3481\":{\"t\":\"建立或状态改变的时间 (ctime)；\"},\"3482\":{\"t\":\"最近一次的读取时间 (atime)；\"},\"3483\":{\"t\":\"最近修改的时间 (mtime)；\"},\"3484\":{\"t\":\"定义文件特性的旗标 (flag)，如 SetUID...；\"},\"3485\":{\"t\":\"该文件真正内容的指向 (pointer)。\"},\"3486\":{\"t\":\"inode 具有以下特点:\"},\"3487\":{\"t\":\"每个 inode 大小均固定为 128 bytes (新的 ext4 与 xfs 可设定到 256 bytes)；\"},\"3488\":{\"t\":\"每个文件都仅会占用一个 inode。\"},\"3489\":{\"t\":\"inode 中记录了文件内容所在的 block 编号，但是每个 block 非常小，一个大文件随便都需要几十万的 block。而一个 inode 大小有限，无法直接引用这么多 block 编号。因此引入了间接、双间接、三间接引用。间接引用是指，让 inode 记录的引用 block 块记录引用信息。\"},\"3490\":{\"t\":\"建立一个目录时，会分配一个 inode 与至少一个 block。block 记录的内容是目录下所有文件的 inode 编号以及文件名。\"},\"3491\":{\"t\":\"可以看出文件的 inode 本身不记录文件名，文件名记录在目录中，因此新增文件、删除文件、更改文件名这些操作与目录的 w 权限有关。\"},\"3492\":{\"t\":\"最基础的三个目录如下:\"},\"3493\":{\"t\":\"/ (root, 根目录)\"},\"3494\":{\"t\":\"/usr (unix software resource): 所有系统默认软件都会安装到这个目录；\"},\"3495\":{\"t\":\"/var (variable): 存放系统或程序运行过程中的数据文件。\"},\"3496\":{\"t\":\"文件属性：\"},\"3497\":{\"t\":\"用户分为三种: 文件拥有者、群组以及其它人，对不同的用户有不同的文件权限。\"},\"3498\":{\"t\":\"使用 ls 查看一个文件时，会显示一个文件的信息，例如 drwxr-xr-x. 3 root root 17 May 6 00:14 .config，对这个信息的解释如下:\"},\"3499\":{\"t\":\"drwxr-xr-x: 文件类型以及权限，第 1 位为文件类型字段，后 9 位为文件权限字段\"},\"3500\":{\"t\":\"3: 链接数\"},\"3501\":{\"t\":\"root: 文件拥有者\"},\"3502\":{\"t\":\"root: 所属群组\"},\"3503\":{\"t\":\"17: 文件大小\"},\"3504\":{\"t\":\"May 6 00:14: 文件最后被修改的时间\"},\"3505\":{\"t\":\".config: 文件名\"},\"3506\":{\"t\":\"常见的文件类型及其含义有:\"},\"3507\":{\"t\":\"d: 目录\"},\"3508\":{\"t\":\"-: 文件\"},\"3509\":{\"t\":\"l: 链接文件\"},\"3510\":{\"t\":\"9 位的文件权限字段中，每 3 个为一组，共 3 组，每一组分别代表对文件拥有者、所属群组以及其它人的文件权限。一组权限中的 3 位分别为 r、w、x 权限，表示可读、可写、可执行。\"},\"3511\":{\"h\":\"6.排查CPU占用过高\",\"a\":\"_6-排查cpu占用过高\"},\"3512\":{\"t\":\"如果我们项目在linux上部署成功并正常运行，但是发现linux的cpu飙升。这时就需要对cpu飙升问题进行排查。以下是排查方法。\"},\"3513\":{\"t\":\"Java 进程cpu飙升问题\"},\"3514\":{\"t\":\"Mysql 进程cup飙升\"},\"3515\":{\"h\":\"6.1Java 进程cpu飙升问题\",\"a\":\"_6-1java-进程cpu飙升问题\"},\"3516\":{\"h\":\"6.1.1使用 top 命令\",\"a\":\"_6-1-1使用-top-命令\"},\"3517\":{\"t\":\"示例：pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。 top命令可以动态地持续监听进程运行情况，默认情况下是按照cpu的使用率倒叙排序。所以我们直接看排在最前面的java进程就可以。\"},\"3518\":{\"t\":\"top \"},\"3519\":{\"t\":\"通过结果可以看出第一行的java进程cpu使用率最高，占比75.5%.这样我们就可以得到cpu占比高的进程ID。PID=13369. 我们也可以通过grep筛选java进程。\"},\"3520\":{\"h\":\"6.1.2使用ps命令查看cpu占比高的PID\",\"a\":\"_6-1-2使用ps命令查看cpu占比高的pid\"},\"3521\":{\"t\":\"我们通过ps命令查看该进程对应的哪个线程占用cpu资源比较高。\"},\"3522\":{\"t\":\"ps -mp 13369 -o THREAD,tid,time \"},\"3523\":{\"h\":\"6.1.3将对应的TID转换为16进制\",\"a\":\"_6-1-3将对应的tid转换为16进制\"},\"3524\":{\"t\":\"我们分析java线程会使用到jdk自带的jstack工具，该工具需要16进制的线程ID进行筛选，所以我们需要把需要分析的线程ID转换为16进制。\"},\"3525\":{\"t\":\"printf \\\"%x\\\\n\\\" 13370 343a \"},\"3526\":{\"h\":\"6.1.4使用jdk自带的命令jstack，拉出指定线程的堆栈信息\",\"a\":\"_6-1-4使用jdk自带的命令jstack-拉出指定线程的堆栈信息\"},\"3527\":{\"t\":\"jstack 13369 |grep 343a -A150 \\\"main\\\" #1 prio=5 os_prio=0 tid=0x00007f5dc0009800 nid=0x343a runnable [0x00007f5dc8457000] java.lang.Thread.State: RUNNABLE at java.io.FileOutputStream.writeBytes(Native Method) at java.io.FileOutputStream.write(FileOutputStream.java:326) at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140) - locked <0x00000006c7c27f50> (a java.io.BufferedOutputStream) at java.io.PrintStream.write(PrintStream.java:482) - locked <0x00000006c7c0c380> (a java.io.PrintStream) at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221) at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291) at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104) - locked <0x00000006c7c0b060> (a java.io.OutputStreamWriter) at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185) at java.io.PrintStream.newLine(PrintStream.java:546) - locked <0x00000006c7c0c380> (a java.io.PrintStream) at java.io.PrintStream.println(PrintStream.java:737) - locked <0x00000006c7c0c380> (a java.io.PrintStream) at WileDemo.main(WileDemo.java:8) \\\"VM Thread\\\" os_prio=0 tid=0x00007f5dc0081000 nid=0x3443 runnable \\\"GC task thread#0 (ParallelGC)\\\" os_prio=0 tid=0x00007f5dc001e800 nid=0x343b runnable \\\"GC task thread#1 (ParallelGC)\\\" os_prio=0 tid=0x00007f5dc0020800 nid=0x343c runnable \\\"GC task thread#2 (ParallelGC)\\\" os_prio=0 tid=0x00007f5dc0022800 nid=0x343d runnable \\\"GC task thread#3 (ParallelGC)\\\" os_prio=0 tid=0x00007f5dc0024000 nid=0x343e runnable \\\"GC task thread#4 (ParallelGC)\\\" os_prio=0 tid=0x00007f5dc0026000 nid=0x343f runnable \\\"GC task thread#5 (ParallelGC)\\\" os_prio=0 tid=0x00007f5dc0028000 nid=0x3440 runnable \\\"GC task thread#6 (ParallelGC)\\\" os_prio=0 tid=0x00007f5dc0029800 nid=0x3441 runnable \\\"GC task thread#7 (ParallelGC)\\\" os_prio=0 tid=0x00007f5dc002b800 nid=0x3442 runnable \\\"VM Periodic Task Thread\\\" os_prio=0 tid=0x00007f5dc00d1000 nid=0x344c waiting on condition JNI global references: 202 \"},\"3528\":{\"t\":\"该命令中 13369 代表着进程ID，343a代表着线程ID的16进制，-A150代表着列出最多150行堆栈信息。\"},\"3529\":{\"h\":\"6.1.5对显示的堆栈信息进行分析\",\"a\":\"_6-1-5对显示的堆栈信息进行分析\"},\"3530\":{\"t\":\"这一步是最难的一步，也是对研发人员要求最高的一部，需要研发人员有大量的经验。\"},\"3531\":{\"t\":\"每一个项目出现cpu占比过高的原因都不尽相同，在这里总结了常见的cpu飙升的原因\"},\"3532\":{\"t\":\"while死循环，或者循环次数超大的循环。\"},\"3533\":{\"t\":\"超大的运算，如超大的浮点运算。\"},\"3534\":{\"t\":\"频繁的Young GC。如大量的json数据转实体对象。\"},\"3535\":{\"t\":\"多线程连接池，线程频繁地切换。我们使用top命令时可以看到CPU(s)一行，如果us用户空间占比过高，则说明是程序线程计算高引起的，通过堆栈分析可以找到原因；如果sy内核空间占比过高，那么一般是由于线程上下文切换引起的。\"},\"3536\":{\"h\":\"6.2Mysql 执行过程\",\"a\":\"_6-2mysql-执行过程\"},\"3537\":{\"h\":\"6.2.1使用 top 命令\",\"a\":\"_6-2-1使用-top-命令\"},\"3538\":{\"t\":\"如 Java 执行过程一样，先使用 top 命令查看占比高的进程是不是 mysqld，如果是 mysqld 则表示 mysql 问题。\"},\"3539\":{\"h\":\"6.2.2使用 SHOW PROCESSLIST 语句\",\"a\":\"_6-2-2使用-show-processlist-语句\"},\"3540\":{\"t\":\"当 Mysql 的 CPU 使用率 过高的时候，不要盲目开启慢日志，开启慢日志可能会让 Mysql 推向崩溃。 一般是使用 SHOW PROCESSLIST 语句，定位大量存在的相同的 SQL 语句。对这些 SQL 语句进行针对性的分析。可能引起问题的原因通常是索引、锁、查询大量字段、大表等。\"},\"3541\":{\"t\":\"SHOW PROCESSLIST; \"},\"3542\":{\"h\":\"7.线上项目卡顿有延迟如何找到哪地方的异常？\",\"a\":\"_7-线上项目卡顿有延迟如何找到哪地方的异常\"},\"3543\":{\"h\":\"7.1CPU 飙高\",\"a\":\"_7-1cpu-飙高\"},\"3544\":{\"t\":\"造成 CPU 飙高的原因主要有两种： （1）内存溢出，然后引起系统频繁的进行 Full GC，而每次 Full GC 的停顿时间都较长，所以系统出现卡顿； （2）代码中有比较耗 CPU 的操作，导致 CPU 过高，所以系统变慢。\"},\"3545\":{\"t\":\"不管是哪个原因，都可以通过下文中介绍的两种排查思路去解决。两者的区别在于，如果是因为内存溢出导致的频繁 Full GC，那么通过 jstack（下文中有介绍）得到的线程栈信息中会包含大量的 VM Thread（代表垃圾回收线程）；而如果是因为代码中有比较耗 CPU 的计算，那么得到的就是一个业务线程的具体堆栈信息，包含用户自定义的类，从中可以直接找到问题代码的行数。\"},\"3546\":{\"t\":\"解决 CPU 飙高这个问题大致有两个思路：\"},\"3547\":{\"h\":\"7.1.1 第一个思路\",\"a\":\"_7-1-1-第一个思路\"},\"3548\":{\"t\":\"（1）先找到占用 CPU 高的进程； （2）再找到占用 CPU 高的线程； （3）最后找到占用 CPU 高的线程对应的业务代码。\"},\"3549\":{\"t\":\"（1）先找到占用 CPU 高的进程\"},\"3550\":{\"t\":\"执行「top」或「top -c」命令，显示进程运行信息列表，再键入大写 P，列表会按 CPU 使用率降序排列：\"},\"3551\":{\"t\":\"top \"},\"3552\":{\"t\":\"（2）再找到占用 CPU 高的线程\"},\"3553\":{\"t\":\"一个进程内有多个线程，执行「top -Hp 6」，显示进程 PID 为 6 的线程列表，键入大写的 P 后，列表会按 CPU 使用率降序排列：\"},\"3554\":{\"t\":\"top -Hp 6 \"},\"3555\":{\"t\":\"（3）最后找到占用 CPU 高的线程对应的业务代码\"},\"3556\":{\"t\":\"这里要进行一个转换，将线程的 PID（14）转为十六进制，因为在 jstack 打印出的线程栈信息中，线程的 PID 是用十六进制显示的。转换方法：\"},\"3557\":{\"t\":\"printf \\\"%x\\\\n\\\" 14 \"},\"3558\":{\"t\":\"获取到 14 的十六进制表示为 e。最后通过 jstack 检索进程（进程 PID = 6）中最耗 CPU 资源的线程（线程 PID = e）的线程栈信息，执行 jstack 命令：\"},\"3559\":{\"t\":\"jstack 6 | grep \\\"0xe\\\" -C5 --color \"},\"3560\":{\"t\":\"通过在线程栈信息中高亮显示的 0xe，我们可以快速找到对应的线程名称。比如在上图中，如果线程的十六进制 PID 是 531，那我们就可以找到线程 nid=0x531 对应的线程名称为 grpc-default-executor-200，这个线程名称是我们在业务代码中给线程取的名称。**因此，给线程取一个与业务处理相关的名称，对快速定位问题尤为重要。**如果只通过 jdk 生成的线程名称，以及只包含 jdk 代码的线程栈信息，是无法定位到业务代码的。\"},\"3561\":{\"t\":\"如果发现信息中包含文本「Full GC (System.gc())」，说明代码或第三方依赖包中有显式的 System.gc() 调用。\"},\"3562\":{\"h\":\"7.1.2 第二个思路\",\"a\":\"_7-1-2-第二个思路\"},\"3563\":{\"t\":\"（1）生成堆转储文件（也就是生成 heap dump，它是一个二进制文件，保存了某一时刻 JVM 堆内存中的对象使用情况；与之相似的还有 thread dump，用于记录 CPU 信息）； （2）分析堆转储文件。\"},\"3564\":{\"t\":\"（1）生成堆转储文件\"},\"3565\":{\"t\":\"生成堆内存转储文件主要用到命令 jmap， jmap 命令是 JDK 提供的用于查看或生成堆内存信息的工具。生成命令：\"},\"3566\":{\"t\":\"# 生成命令： jmap -dump:live,format=b,file=heap.hprof <pid> jmap -dump:live,format=b,file=heap.bin 6 \"},\"3567\":{\"t\":\"**live：**仅打印具有活动引用的对象，丢弃那些准备垃圾回收的对象，可选参数； **format=b：**以二进制格式转储； **file：**转储文件路径，文件后缀通常为 hprof 或 bin； **pid：**进程 id。\"},\"3568\":{\"t\":\"使用 jmap 命令有一点不好的地方是，内存溢出是某个时间点发生的事情，跟执行 jmap 命令的时候获取到的转储文件相比，存在时间差问题。所以这里再介绍一个 Java 虚拟机参数：\"},\"3569\":{\"t\":\"-XX:+HeapDumpOnOutOfMemoryError \"},\"3570\":{\"t\":\"设置了这个 Java 虚拟机参数之后，它就会在程序发生内存溢出的时候，自动生成一个二进制的堆转储文件，这个转储文件的后缀为 hprof，而且这个文件几乎是在发生内存溢出的同时生成的，故而会更准确些。这个文件的存储路径也可以通过参数指定：（如果不指定，则默认在当前工作目录下生成 java_pid.hprof 文件）\"},\"3571\":{\"t\":\"# 指定相对路径、绝对路径都可以，但要注意，就是必须确保文件路径事先已创建好，如果路径不存在，它不会自动创建 # -XX:HeapDumpPath=./ # -XX:HeapDumpPath=/data/tmp/ -XX:HeapDumpPath=/data/tmp/heapdump.hprof \"},\"3572\":{\"t\":\"建议提前添加 -XX:+HeapDumpOnOutOfMemoryError 参数，而不是用 jmap。有几点要注意，内存分析可能需要比对多个堆转储文件，除了在发生内存溢出时自动生成的堆转储文件外，我们在获取其他时间点的堆转储文件时一定要找准时机，避免得到一个没用的快照。另外，每次执行堆转储，都会对 JVM 进行「冻结」，所以在生产环境中不能执行太多次的 dump 操作，一旦系统缓慢或者卡死，麻烦就大了。（快照中也可能含有机密信息，例如密码等，这时候如果企业有安全限制，还需先获得在生产服务器上执行堆转储的权限）\"},\"3573\":{\"t\":\"（2）分析堆转储文件\"},\"3574\":{\"t\":\"分析堆内存转储文件主要用到命令 jhat，jhat 命令也是 JDK 自带的用于分析 heap dump 文件的工具。使用下面的命令可以将堆转储文件的分析结果以 HTML 网页的形式进行展示：（如果系统有可视化界面，也推荐用工具 MAT（Memory Analyzer Tools） 来分析，该工具既可以安装到 Eclipse 上使用，也可以独立运行使用，解压之后双击 MemoryAnalyzer.exe 即可）\"},\"3575\":{\"t\":\"# 分析命令：jhat <heap-dump-file> jhat heap.bin -J-Xmx8192m \"},\"3576\":{\"t\":\"参数 -J-Xmx8192m 用来设置命令使用的内存大小，当然首先要保证执行命令的物理机器有足够大的内存，因为堆转储文件往往很大，不加这个参数的话有可能会报内存溢出异常，导致分析失败。如果加了此参数仍然不行，可以尝试设置下环境变量：\"},\"3577\":{\"t\":\"JAVA_OPTS：-server -Xms4096m -Xmx4096m \"},\"3578\":{\"t\":\"执行成功后显示如下结果：\"},\"3579\":{\"t\":\"Snapshot resolved. Started HTTP server on port 7000 Server is ready. \"},\"3580\":{\"t\":\"这个时候访问 http://localhost:7000/ 就可以看到结果了：\"},\"3581\":{\"t\":\"那如何从这个 HTML 网页中找到我们想要的有价值的信息呢？需要拉到网页最底部，找到 Other Queries，然后选择 Show instance counts for all classes (excluding platform)，找除了 JDK 本身之外实例数最多的类。\"},\"3582\":{\"t\":\"看看排名最前的几个类，就可以找出可能会分配大量对象的代码，基本就能定位到问题代码的位置了，如果对整个系统非常熟悉，找到的速度会更快。\"},\"3583\":{\"h\":\"7.2内存溢出\",\"a\":\"_7-2内存溢出\"},\"3584\":{\"h\":\"7.2.1 排查思路\",\"a\":\"_7-2-1-排查思路\"},\"3585\":{\"t\":\"当 Java 应用消耗大量内存，导致出现异常：\"},\"3586\":{\"t\":\"java.lang.OutOfMemoryError: GC overhead limit exceeded \"},\"3587\":{\"t\":\"一般出于以下原因： （1）JVM 内存过小； （2）产生的垃圾过多，无法回收； （3）代码有漏洞：\"},\"3588\":{\"t\":\"对象、线程创建太多，且一直未释放；\"},\"3589\":{\"t\":\"进行 IO 操作后不关闭流，资源无法释放；\"},\"3590\":{\"t\":\"消费者速度慢，生产者速度快，任务队列中对象不断堆积。\"},\"3591\":{\"t\":\"大多数情况下，通过配置 JVM 启动参数或增大堆内存并不能从根本上解决这个问题，只能延长错误发生的时间。要解决内存溢出问题需清楚两点：哪些对象占用了最多内存？这些对象是在哪部分代码中分配的？终极的解决办法是找到占用内存大的地方，优化相关代码。怎么找呢？依然是通过堆转储文件去找。\"},\"3592\":{\"h\":\"7.2.2 命令介绍\",\"a\":\"_7-2-2-命令介绍\"},\"3593\":{\"t\":\"除直接分析堆转储文件外，还有一些值得学习的命令可以辅助我们排查问题，有时甚至只用这些命令就能定位到问题代码的位置。\"},\"3594\":{\"t\":\"（1）jmap -histo\"},\"3595\":{\"t\":\"如果想知道什么对象消耗内存最大，那么可以执行命令：\"},\"3596\":{\"t\":\"# 查看类的实例数量、占用的内存、类的名称：jmap -histo:live <pid> jmap -histo:live 6 | head -n 100 \"},\"3597\":{\"t\":\"结果会以表格的方式显示存活对象的信息，并按对象所占的 bytes 大小进行降序排列（比如 18874368 bytes = 18M，若要包含未存活的对象，则删掉「:live」，更多用法，可通过「man jmap」寻求帮助）。如果发现某类对象占用内存很大，比如达到了几个 G，那大概率有问题。\"},\"3598\":{\"t\":\"（2）pstree\"},\"3599\":{\"t\":\"如果想知道创建了多少线程，可以执行命令：\"},\"3600\":{\"t\":\"# pstree -p <pid> | wc -l pstree -p 6 | wc -l \"},\"3601\":{\"t\":\"结果会显示进程内的线程数，还有每个线程的线程栈内存。\"},\"3602\":{\"t\":\"（3）jmap -heap\"},\"3603\":{\"t\":\"如果想查看堆（新生代、老年代）内存分配大小及使用情况，可以执行命令：\"},\"3604\":{\"t\":\"# 查看堆的使用情况：jmap -heap <pid> jmap -heap 6 \"},\"3605\":{\"t\":\"可用来确认是不是整体内存分配太小。\"},\"3606\":{\"t\":\"（4）jstat -gc\"},\"3607\":{\"t\":\"如果想查看实时的新生代、老年代内存使用情况及 GC 情况，可以执行命令：\"},\"3608\":{\"t\":\"# 提供 GC 和类装载活动的信息: jstat -gc <pid> jstat -gc 6 1000 \"},\"3609\":{\"t\":\"其中，6 为进程ID，1000 为数据刷新间隔的毫秒数，更多的命令参数含义可通过「man jstat」寻求帮助。执行结果会显示各个区内存使用情况及 GC 的情况，结果列表表头含义：\"},\"3610\":{\"t\":\"EC：Eden 区容量；\"},\"3611\":{\"t\":\"EU：Eden 区已使用量；\"},\"3612\":{\"t\":\"OC：Old 区容量；\"},\"3613\":{\"t\":\"OU：Old 区已使用量；\"},\"3614\":{\"t\":\"YGC：YongGC 次数（当新生代被填满时执行一次，回收速度快）；\"},\"3615\":{\"t\":\"YGCT：YongGC 耗时；\"},\"3616\":{\"t\":\"FGC：FullGC 次数（当老年代被填满时执行一次，回收时应用程序会整个停下来直到回收完成）；\"},\"3617\":{\"t\":\"FGCT：FullGC 耗时。\"},\"3618\":{\"h\":\"7.3产品功能运行缓慢\",\"a\":\"_7-3产品功能运行缓慢\"},\"3619\":{\"t\":\"除了上文中一旦出现就很严重的两种情况外，还有三种情况，也会导致系统功能运行缓慢，但它的影响范围没那么大，出现问题后不会导致整个系统都不可用，最多只会让一个具体的功能变得很慢。跟上文中的情况不同的是，如果出现这三种问题，通过查看 CPU 和系统内存情况是无法排查出问题原因的，因为它们只是局部的阻塞，CPU 和系统内存使用率都不高，所以需要用一些其他的手段来排查。\"},\"3620\":{\"h\":\"7.3.1 代码中有阻塞性的操作\",\"a\":\"_7-3-1-代码中有阻塞性的操作\"},\"3621\":{\"t\":\"代码阻塞使用不当，会导致调用相关功能时比较耗时。比较典型的例子是，访问某个接口经常需要 2~3s 才能返回，而且是不定时出现。\"},\"3622\":{\"t\":\"定位这种问题的思路如下：首先找到该接口，通过压测工具不断加大访问力度，如果该接口中有某个位置比较耗时，由于访问的频率非常高，那么大多数的线程最终都将阻塞于该阻塞点，这样通过多个线程的堆栈日志，就可以定位到接口中耗时的代码位置。\"},\"3623\":{\"h\":\"7.3.2 某个线程进入 WAITING 状态\",\"a\":\"_7-3-2-某个线程进入-waiting-状态\"},\"3624\":{\"t\":\"如果某个线程进入 WAITING 状态，可能接着导致主线程也进入 WAITING 状态，这是比较少见的一种情况，且具有一定的不可复现性，在排查的时候是非常难以发现的。在 jstack 日志中，即使是在正常的情况下，也会有很多线程处于 TIMED_WAITING 状态，这与出现 WAITING 问题的线程状态一模一样，非常容易混淆我们的判断。\"},\"3625\":{\"t\":\"定位这种问题的思路如下：通过 grep 在 jstack 日志中找出所有处于 TIMED_WAITING 状态的线程，将其导出到某个文件中，如 log1.log，等待几分钟之后，再次对 jstack 日志进行 grep，将其导出到另一个文件，如 log2.log。重复上述操作，待导出 4、5 个文件之后，再对导出的文件进行对比，找出在这几个文件中一直都存在着的用户线程，基本上就能确定是哪里出问题了， 因为正常的请求线程是不会在 30s 之后还是处于等待状态的。\"},\"3626\":{\"t\":\"如果找到了多个，那么要排除掉框架自带的线程，找包含了用户自定义的线程名或者类的线程，再查看其堆栈信息即可。\"},\"3627\":{\"h\":\"7.3.3 死锁\",\"a\":\"_7-3-3-死锁\"},\"3628\":{\"t\":\"如果锁使用不当，就有可能造成死锁。定位死锁的思路很简单，直接用 jstack 命令即可：\"},\"3629\":{\"t\":\"# 检查死锁：jstack <pid> jstack 6 # 拉到末尾：Found 1 deadlock. \"},\"3630\":{\"t\":\"它自带检查死锁的功能，会在日志底部打印出代码中存在哪些死锁，以及每个死锁的线程堆栈信息，我们可以根据这些很容易定位到发生死锁的代码位置。\"},\"3631\":{\"h\":\"AQS\"},\"3632\":{\"h\":\"1.什么是AQS\",\"a\":\"_1-什么是aqs\"},\"3633\":{\"t\":\"AQS（AbstractQueuedSynchronizer），即队列同步器，它是构建锁或者其他同步组件的基础框架，如ReentrantLock、ReentrantReadWriteLock、Semaphore，CountDownLatch等。 AQS是一个抽象类，主要是通过继承方式使用，本身没有实现任何接口，仅仅是定义了同步状态的获取和释放的方法。AQS解决了实现同步器的大量细节问题，例如获取同步状态，FIFO队列，入队和出队。自定义同步器在实现时候只需要实现共享资源state的获取和释放即可，至于获取资源失败入队/唤醒出队等，AQS在顶层已经定义好了。\"},\"3634\":{\"h\":\"2.AQS的两种功能\",\"a\":\"_2-aqs的两种功能\"},\"3635\":{\"t\":\"从使用层面来说，AQS功能分为两种：独占和共享\"},\"3636\":{\"t\":\"独占锁，每次只能一个线程持有锁，比如ReentrantLock就是独占锁\"},\"3637\":{\"t\":\"共享锁，允许多个线程持有锁，并发访问共享资源，比如ReentrantReadWriteLock\"},\"3638\":{\"t\":\"共享锁和独占锁的释放有一定区别，前面部分是一致的，先判断头结点是不是signal状态，如果是则唤醒头节点的下一个节点，并将该节点设置为头结点。而共享锁不一样，某个节点被设置为head之后，如果它的后继节点是shared状态，那么会尝试使用doReleaseShared方法尝试唤醒节点，实现共享状态的传播。\"},\"3639\":{\"h\":\"3.AQS内部实现\",\"a\":\"_3-aqs内部实现\"},\"3640\":{\"t\":\"AQS是依赖内部的同步队列实现，也就是FIFO双向队列，如果当前线程竞争锁失败，那么AQS会把当前线程以及等待状态封装成一个Node节点加入到同步队列中，同时阻塞该线程，当同步状态释放时，会把首节点唤醒，使其再次尝试获取同步状态。\"},\"3641\":{\"t\":\"AQS队列内部维护的是一个双向链表，这种结构每个数据都有两个指针，分别指向直接的的前驱节点和后继节点，当线程抢占锁失败时候，会封装成Node加入到AQS中去。\"},\"3642\":{\"t\":\"AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁 实现的，即将暂时获取不到锁的线程加入到队列中。\"},\"3643\":{\"t\":\"CLH(Craig,Landin,and Hagersten) 队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。在 CLH 同步队列中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。\"},\"3644\":{\"t\":\"CLH 队列结构如下图所示：\"},\"3645\":{\"t\":\"在同步队列中，一个节点表示一个线程，他保存这线程的引用ThreadId，状态（watiStatus）,前驱结点（pre），后继节点（next），其数据结构如下：\"},\"3646\":{\"h\":\"4.acquire方法流程总结\",\"a\":\"_4-acquire方法流程总结\"},\"3647\":{\"t\":\"首先通过子类判断是否获取了锁，如果获取了就什么也不干。tryAcquire\"},\"3648\":{\"t\":\"如果没有获取锁、通过线程创建节点加入同步队列的队尾。addWaiter\"},\"3649\":{\"t\":\"当线程在同步队列中不断的通过自旋去获取同步状态，如果获取了锁，就把其设为同步队列中的头节点，否则在同步队列中不停的自旋等待获取同步状态 acquireQueued,shouldParkAfterFailedAcquire(Node pre,Node node),parkAndCheckInterrupt()\"},\"3650\":{\"t\":\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\"},\"3651\":{\"h\":\"5.AQS 底层使用了模板方法模式，你能说出几个需要重写的方法吗？\",\"a\":\"_5-aqs-底层使用了模板方法模式-你能说出几个需要重写的方法吗\"},\"3652\":{\"t\":\"使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。\"},\"3653\":{\"t\":\"isHeldExclusively() ：该线程是否正在独占资源。只有用到 condition 才需要去实现它。\"},\"3654\":{\"t\":\"tryAcquire(int) ：独占方式。尝试获取资源，成功则返回 true，失败则返回 false。\"},\"3655\":{\"t\":\"tryRelease(int) ：独占方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"3656\":{\"t\":\"tryAcquireShared(int) ：共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\"},\"3657\":{\"t\":\"tryReleaseShared(int) ：共享方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"3658\":{\"h\":\"6.总结\",\"a\":\"_6-总结\"},\"3659\":{\"t\":\"总结的来说：线程获取锁，如果获取了锁就保存当前获得锁的线程，如果没获取就创造一个节点通过compareAndSetTail(CAS操作)操作的方式将创建的节点加入同步队列的尾部，在同步队列中的节点通过自旋的操作不断去获取同步状态【当然由于FIFO先进先出的特性】等待时间越长就越先被唤醒。当头节点释放同步状态的时候，首先查看是否存在后继节点，如果存在就唤醒自己的后继节点，如果不存在就获取等待时间最长的符合条件的线程。\"},\"3660\":{\"t\":\"参考：https://zhuanlan.zhihu.com/p/543902719\"},\"3661\":{\"h\":\"CAS\"},\"3662\":{\"t\":\"在并发编程中我们都知道i++操作是非线程安全的，这是因为 i++操作不是原子操作。\"},\"3663\":{\"t\":\"如何保证原子性呢？常用的方法就是加锁。在Java语言中可以使用 Synchronized和CAS实现加锁效果。\"},\"3664\":{\"t\":\"Synchronized是悲观锁，线程开始执行第一步就是获取锁，一旦获得锁，其他的线程进入后就会阻塞等待锁。如果不好理解，举个生活中的例子：一个人进入厕所后首先把门锁上（获取锁），然后开始上厕所，这个时候有其他人来了只能在外面等（阻塞），就算再急也没用。上完厕所完事后把门打开（解锁），其他人就可以进入了。\"},\"3665\":{\"t\":\"CAS是乐观锁，线程执行的时候不会加锁，假设没有冲突去完成某项操作，如果因为冲突失败了就重试，最后直到成功为止。\"},\"3666\":{\"h\":\"1.什么是 CAS？\",\"a\":\"_1-什么是-cas\"},\"3667\":{\"t\":\"CAS（Compare-And-Swap）是比较并交换的意思，它是一条 CPU 并发原语，用于判断内存中某个值是否为预期值，如果是则更改为新的值，这个过程是原子的。下面用一个小示例解释一下。\"},\"3668\":{\"t\":\"CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，计算后要修改后的新值B。\"},\"3669\":{\"t\":\"（1）初始状态：在内存地址V中存储着变量值为 1。\"},\"3670\":{\"t\":\"（2）线程1想要把内存地址为 V 的变量值增加1。这个时候对线程1来说，旧的预期值A=1，要修改的新值B=2。\"},\"3671\":{\"t\":\"（3）在线程1要提交更新之前，线程2捷足先登了，已经把内存地址V中的变量值率先更新成了2。\"},\"3672\":{\"t\":\"（4）线程1开始提交更新，首先将预期值A和内存地址V的实际值比较（Compare），发现A不等于V的实际值，提交失败。\"},\"3673\":{\"t\":\"（5）线程1重新获取内存地址 V 的当前值，并重新计算想要修改的新值。此时对线程1来说，A=2，B=3。这个重新尝试的过程被称为自旋。如果多次失败会有多次自旋。\"},\"3674\":{\"t\":\"（6）线程 1 再次提交更新，这一次没有其他线程改变地址 V 的值。线程1进行Compare，发现预期值 A 和内存地址 V的实际值是相等的，进行 Swap 操作，将内存地址 V 的实际值修改为 B。\"},\"3675\":{\"t\":\"总结：更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 中的实际值相同时，才会将内存地址 V 对应的值修改为 B，这整个操作就是CAS。\"},\"3676\":{\"h\":\"2.CAS 基本原理\",\"a\":\"_2-cas-基本原理\"},\"3677\":{\"t\":\"CAS 主要包括两个操作：Compare和Swap，有人可能要问了：两个操作能保证是原子性吗？可以的。\"},\"3678\":{\"t\":\"CAS 是一种系统原语，原语属于操作系统用语，原语由若干指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，由操作系统硬件来保证。在 Intel 的 CPU 中，使用 cmpxchg 指令。\"},\"3679\":{\"t\":\"回到 Java 语言，JDK 是在 1.5 版本后才引入 CAS 操作，在sun.misc.Unsafe这个类中定义了 CAS 相关的方法。\"},\"3680\":{\"t\":\"在 Java 编程中我们通常不会直接使用到 CAS，都是通过 JDK 封装好的并发工具类来间接使用的，这些并发工具类都在java.util.concurrent包中。\"},\"3681\":{\"h\":\"3.CAS 的问题\",\"a\":\"_3-cas-的问题\"},\"3682\":{\"t\":\"CAS 不是万能的，也有很多问题。\"},\"3683\":{\"t\":\"敲黑板：CAS有哪些问题，这是面试高频考点，需要重点掌握。\"},\"3684\":{\"h\":\"3.1典型 ABA 问题\",\"a\":\"_3-1典型-aba-问题\"},\"3685\":{\"t\":\"ABA 是 CAS 操作的一个经典问题，假设有一个变量初始值为 A，修改为 B，然后又修改为 A，这个变量实际被修改过了，但是 CAS 操作可能无法感知到。\"},\"3686\":{\"t\":\"如果是整型还好，不会影响最终结果，但如果是对象的引用类型包含了多个变量，引用没有变实际上包含的变量已经被修改，这就会造成大问题。\"},\"3687\":{\"t\":\"如何解决？思路其实很简单，在变量前加版本号，每次变量更新了就把版本号加一，结果如下：\"},\"3688\":{\"t\":\"最终结果都是 A 但是版本号改变了。\"},\"3689\":{\"t\":\"从 JDK 1.5 开始提供了AtomicStampedReference类，这个类的 compareAndSe方法首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\"},\"3690\":{\"t\":\"​\"},\"3691\":{\"h\":\"3.2自旋开销问题\",\"a\":\"_3-2自旋开销问题\"},\"3692\":{\"t\":\"CAS 出现冲突后就会开始自旋操作，如果资源竞争非常激烈，自旋长时间不能成功就会给 CPU 带来非常大的开销。\"},\"3693\":{\"t\":\"解决方案：可以考虑限制自旋的次数，避免过度消耗 CPU；另外还可以考虑延迟执行。\"},\"3694\":{\"h\":\"3.3只能保证单个变量的原子性\",\"a\":\"_3-3只能保证单个变量的原子性\"},\"3695\":{\"t\":\"当对一个共享变量执行操作时，可以使用 CAS 来保证原子性，但是如果要对多个共享变量进行操作时，CAS 是无法保证原子性的，比如需要将 i 和 j 同时加 1：\"},\"3696\":{\"t\":\"i++；j++； \"},\"3697\":{\"t\":\"这个时候可以使用 synchronized 进行加锁，有没有其他办法呢？有，将多个变量操作合成一个变量操作。从 JDK1.5 开始提供了AtomicReference 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\"},\"3698\":{\"h\":\"3.4总结\",\"a\":\"_3-4总结\"},\"3699\":{\"t\":\"CAS 是 Compare And Swap，是一条 CPU 原语，由操作系统保证原子性。\"},\"3700\":{\"t\":\"Java语言从 JDK1.5 版本开始引入 CAS ， 并且是 Java 并发编程J.U.C 包的基石，应用非常广泛。\"},\"3701\":{\"t\":\"当然 CAS 也不是万能的，也有很多问题：典型 ABA 问题、自旋开销问题、只能保证单个变量的原子性。\"},\"3702\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&mid=2247510278&idx=3&sn=a58a9ec9f805d0e109c4b09cd497c9ca&chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1&scene=27\"},\"3703\":{\"h\":\"volitile、synchronized、ThreadLocal关键字\"},\"3704\":{\"h\":\"1.volitile关键字原理\",\"a\":\"_1-volitile关键字原理\"},\"3705\":{\"h\":\"1.1简述Java内存模型：\",\"a\":\"_1-1简述java内存模型\"},\"3706\":{\"t\":\"Java内存模型分为主内存和线程工作内存两大类。\"},\"3707\":{\"t\":\"主内存： 多个线程共享的内存。如下图所示，方法区和堆属于主内存区域。\"},\"3708\":{\"t\":\"线程工作内存：每个线程独享的内存。如下图所示，虚拟机栈、本地方法栈、程序计数器属于线程独享的工作内存。\"},\"3709\":{\"t\":\"Java内存模型规定：所有变量都需要存储在主内存中，线程工作内存保存了变量在主内存中的副本，线程对变量的所有操作都在工作内存中进行，执行结束后在同步到主内存中去。这里必然会存在时间差，在这个时间差内，该线程对副本的操作，对于其他线程是不见的，从而造成了可见性问题。\"},\"3710\":{\"h\":\"1.2volatile的作用：\",\"a\":\"_1-2volatile的作用\"},\"3711\":{\"t\":\"保证共享变量的可见性： 使用volatile修饰的变量，任何线程对其进行操作都是在主内存中进行的，不会产生副本，从而保证共享变量的可见性。\"},\"3712\":{\"t\":\"防止局部指令重排序： happens-before规则中的volatile变量规则规定了一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。\"},\"3713\":{\"t\":\"**保证原子性:单次读/写：**volatile不能保证完全的原子性，只能保证单次的读/写操作具有原子性。\"},\"3714\":{\"h\":\"1.3volatile如何防止指令重排序：\",\"a\":\"_1-3volatile如何防止指令重排序\"},\"3715\":{\"t\":\"volatile是通过内存屏障来防止指令重排序的。\"},\"3716\":{\"t\":\"硬件层面的内存屏障分为Load Barrier 和 Store Barrier即读屏障和写屏障。\"},\"3717\":{\"t\":\"对于Load Barrier来说，在指令前插入Load Barrier，可以让高速缓存中的数据失效，强制重新从主内存加载数据。\"},\"3718\":{\"t\":\"对于Store Barrier来说，在指令后插入Store Barrier，能让写入缓存中的最新数据更新写入主内存，让其他线程可见。\"},\"3719\":{\"t\":\"Java内存屏障类型把上述两种内存屏障两两组合，如下图所示：\"},\"3720\":{\"t\":\"volatile防止指令重排序具体步骤：\"},\"3721\":{\"t\":\"在每个volatile写操作的前面插入一个StoreStore屏障。\"},\"3722\":{\"t\":\"在每个volatile写操作的后面插入一个StoreLoad屏障。\"},\"3723\":{\"t\":\"在每个volatile读操作的后面插入一个LoadLoad屏障。\"},\"3724\":{\"t\":\"在每个volatile读操作的后面插入一个LoadStore屏障。\"},\"3725\":{\"h\":\"1.4volatile总结：\",\"a\":\"_1-4volatile总结\"},\"3726\":{\"t\":\"volatile解决的是多线程共享变量可见性问题，但是被volatile修饰的变量操作并非具有原子性。\"},\"3727\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=MzAxNTE2NjEyMw==&mid=2247483734&idx=1&sn=8509d4aa61d08550c2b7668314da3582&chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e&scene=27\"},\"3728\":{\"h\":\"2.synchronized原理\",\"a\":\"_2-synchronized原理\"},\"3729\":{\"t\":\"在应用Sychronized关键字时需要把握如下注意点：\"},\"3730\":{\"t\":\"一把锁只能同时被一个线程获取，没有获得锁的线程只能等待；\"},\"3731\":{\"t\":\"每个实例都对应有自己的一把锁(this),不同实例之间互不影响；例外：锁对象是*.class以及synchronized修饰的是static方法的时候，所有对象公用同一把锁\"},\"3732\":{\"t\":\"synchronized修饰的方法，无论方法正常执行完毕还是抛出异常，都会释放锁\"},\"3733\":{\"h\":\"2.1synchronized 同步语句块的情况:\",\"a\":\"_2-1synchronized-同步语句块的情况\"},\"3734\":{\"t\":\"代码块形式：手动指定锁定对象，可以是this,也可以是自定义的锁。\"},\"3735\":{\"t\":\"public class SynchronizedDemo { public void method() { synchronized (this) { System.out.println(\\\"synchronized 代码块\\\"); } } } \"},\"3736\":{\"t\":\"通过 JDK 自带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：首先切换到类的对应目录执行 javac SynchronizedDemo.java 命令生成编译后的 .class 文件，然后执行javap -c -s -v -l SynchronizedDemo.class。\"},\"3737\":{\"t\":\"从上面我们可以看出：synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"3738\":{\"t\":\"上面的字节码中包含一个 monitorenter 指令以及两个 monitorexit 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。\"},\"3739\":{\"t\":\"当执行 monitorenter 指令时，线程试图获取锁也就是获取对象监视器 monitor 的持有权。\"},\"3740\":{\"t\":\"在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由ObjectMonitor实现的。每个对象中都内置了一个 ObjectMonitor对象。\"},\"3741\":{\"t\":\"另外，wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。\"},\"3742\":{\"t\":\"在执行monitorenter时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。\"},\"3743\":{\"t\":\"对象锁的的拥有者线程才可以执行 monitorexit 指令来释放锁。在执行 monitorexit 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\"},\"3744\":{\"h\":\"2.2synchronized 修饰方法的的情况:\",\"a\":\"_2-2synchronized-修饰方法的的情况\"},\"3745\":{\"t\":\"方法锁形式：synchronized修饰普通方法，锁对象默认为this；synchronize修饰静态的方法或指定锁对象为Class对象。\"},\"3746\":{\"t\":\"public class SynchronizedDemo2 { public synchronized void method() { System.out.println(\\\"synchronized 方法\\\"); } } \"},\"3747\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\"},\"3748\":{\"t\":\"如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。\"},\"3749\":{\"h\":\"2.3总结:\",\"a\":\"_2-3总结\"},\"3750\":{\"t\":\"synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"3751\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。\"},\"3752\":{\"t\":\"不过两者的本质都是对对象监视器 monitor 的获取。\"},\"3753\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-底层原理了解吗；https://pdai.tech/md/java/thread/java-thread-x-key-synchronized.html#synchronized的使用\"},\"3754\":{\"h\":\"3.ThreadLocal原理\",\"a\":\"_3-threadlocal原理\"},\"3755\":{\"h\":\"3.1ThreadLocal 有什么用？\",\"a\":\"_3-1threadlocal-有什么用\"},\"3756\":{\"t\":\"通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？\"},\"3757\":{\"t\":\"JDK 中自带的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。\"},\"3758\":{\"t\":\"如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get() 和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\"},\"3759\":{\"t\":\"总结而言：ThreadLocal是一个将在多线程中为每一个线程创建单独的变量副本的类; 当使用ThreadLocal来维护变量时, ThreadLocal会为每个线程创建单独的变量副本, 避免因多线程操作共享变量而导致的数据不一致的情况。\"},\"3760\":{\"h\":\"3.2原理：\",\"a\":\"_3-2原理\"},\"3761\":{\"t\":\"源码：\"},\"3762\":{\"t\":\"public class Thread implements Runnable { //...... //与此线程有关的ThreadLocal值。由ThreadLocal类维护 ThreadLocal.ThreadLocalMap threadLocals = null; //与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护 ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; //...... } \"},\"3763\":{\"t\":\"从上面Thread类源代码可以看出Thread 类中有一个 threadLocals 和 一个 inheritableThreadLocals 变量，它们都是 ThreadLocalMap 类型的变量,我们可以把 ThreadLocalMap 理解为ThreadLocal 类实现的定制化的 HashMap。默认情况下这两个变量都是 null，只有当前线程调用 ThreadLocal 类的 set或get方法时才创建它们，实际上调用这两个方法的时候，我们调用的是ThreadLocalMap类对应的 get()、set()方法。\"},\"3764\":{\"t\":\"ThreadLocal类的set()方法：\"},\"3765\":{\"t\":\"public void set(T value) { //获取当前请求的线程 Thread t = Thread.currentThread(); //取出 Thread 类内部的 threadLocals 变量(哈希表结构) ThreadLocalMap map = getMap(t); if (map != null) // 将需要存储的值放入到这个哈希表中 map.set(this, value); else createMap(t, value); } public T get() { Thread t = Thread.currentThread(); ThreadLocalMap threadLocals = getMap(t); if (threadLocals != null) { ThreadLocalMap.Entry e = threadLocals.getEntry(this); if (e != null) { @SuppressWarnings(\\\"unchecked\\\") T result = (T)e.value; return result; } } return setInitialValue(); } ThreadLocalMap getMap(Thread t) { return t.threadLocals; } \"},\"3766\":{\"t\":\"通过上面这些内容，我们足以通过猜测得出结论：最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。ThrealLocal 类中可以通过Thread.currentThread()获取到当前线程对象后，直接通过getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。\"},\"3767\":{\"t\":\"每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为 key ，Object 对象为 value 的键值对。\"},\"3768\":{\"t\":\"ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) { //...... } \"},\"3769\":{\"t\":\"比如我们在同一个线程中声明了两个 ThreadLocal 对象的话， Thread内部都是使用仅有的那个ThreadLocalMap 存放数据的，ThreadLocalMap的 key 就是 ThreadLocal对象，value 就是 ThreadLocal 对象调用set方法设置的值。\"},\"3770\":{\"h\":\"3.3ThreadLocal造成内存泄露的问题\",\"a\":\"_3-3threadlocal造成内存泄露的问题\"},\"3771\":{\"t\":\"网上有这样一个例子：\"},\"3772\":{\"t\":\"import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; public class ThreadLocalDemo { static class LocalVariable { private Long[] a = new Long[1024 * 1024]; } // (1) final static ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(5, 5, 1, TimeUnit.MINUTES, new LinkedBlockingQueue<>()); // (2) final static ThreadLocal<LocalVariable> localVariable = new ThreadLocal<LocalVariable>(); public static void main(String[] args) throws InterruptedException { // (3) Thread.sleep(5000 * 4); for (int i = 0; i < 50; ++i) { poolExecutor.execute(new Runnable() { public void run() { // (4) localVariable.set(new LocalVariable()); // (5) System.out.println(\\\"use local varaible\\\" + localVariable.get()); localVariable.remove(); } }); } // (6) System.out.println(\\\"pool execute over\\\"); } } \"},\"3773\":{\"t\":\"如果用线程池来操作ThreadLocal 对象确实会造成内存泄露, 因为对于线程池里面不会销毁的线程, 里面总会存在着<ThreadLocal, LocalVariable>的强引用, 因为final static 修饰的 ThreadLocal 并不会释放, 而ThreadLocalMap 对于 Key 虽然是弱引用, 但是强引用不会释放, 弱引用当然也会一直有值, 同时创建的LocalVariable对象也不会释放, 就造成了内存泄露; 如果LocalVariable对象不是一个大对象的话, 其实泄露的并不严重, 泄露的内存 = 核心线程数 * LocalVariable对象的大小;\"},\"3774\":{\"t\":\"所以, 为了避免出现内存泄露的情况, ThreadLocal提供了一个清除线程中对象的方法, 即 remove, 其实内部实现就是调用 ThreadLocalMap 的remove方法:\"},\"3775\":{\"t\":\"private void remove(ThreadLocal<?> key) { Entry[] tab = table; int len = tab.length; int i = key.threadLocalHashCode & (len-1); for (Entry e = tab[i]; e != null; e = tab[i = nextIndex(i, len)]) { if (e.get() == key) { e.clear(); expungeStaleEntry(i); return; } } } \"},\"3776\":{\"h\":\"线程同步互斥和锁\"},\"3777\":{\"h\":\"1.线程的互斥同步方式有哪些? 如何比较和选择?\",\"a\":\"_1-线程的互斥同步方式有哪些-如何比较和选择\"},\"3778\":{\"t\":\"Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。\"},\"3779\":{\"t\":\"锁的实现synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。\"},\"3780\":{\"t\":\"性能新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。\"},\"3781\":{\"t\":\"等待可中断当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。\"},\"3782\":{\"t\":\"公平锁公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\"},\"3783\":{\"t\":\"锁绑定多个条件一个 ReentrantLock 可以同时绑定多个 Condition 对象。\"},\"3784\":{\"t\":\"ReentrantLock：\"},\"3785\":{\"t\":\"ReentrantLock 实现了 Lock 接口，是一个可重入且独占式的锁，和 synchronized 关键字类似。不过，ReentrantLock 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。\"},\"3786\":{\"t\":\"public class ReentrantLock implements Lock, java.io.Serializable {} \"},\"3787\":{\"t\":\"ReentrantLock 里面有一个内部类 Sync，Sync 继承 AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在 Sync 中实现的。Sync 有公平锁 FairSync 和非公平锁 NonfairSync 两个子类。\"},\"3788\":{\"t\":\"ReentrantLock 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。\"},\"3789\":{\"t\":\"// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁 public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } \"},\"3790\":{\"t\":\"https://blog.csdn.net/zhengzhaoyang122/article/details/110847701；https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html\"},\"3791\":{\"h\":\"2.锁升级\",\"a\":\"_2-锁升级\"},\"3792\":{\"h\":\"2.1无锁\",\"a\":\"_2-1无锁\"},\"3793\":{\"t\":\"无锁并不会对资源锁定，所有的线程都可以访问并修改同一个资源，但同时只有一个线程能修改成功。也就是我们常说的乐观锁。\"},\"3794\":{\"h\":\"2.2偏向锁\",\"a\":\"_2-2偏向锁\"},\"3795\":{\"t\":\"偏向于第一个访问锁的线程，初次执行synchronized代码块时，通过 CAS 修改对象头里的锁标志位，锁对象变成偏向锁。\"},\"3796\":{\"t\":\"当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。\"},\"3797\":{\"t\":\"执行完同步代码块后，线程并不会主动释放偏向锁。当线程第二次再执行同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里不需要重新加锁，偏向锁几乎没有额外开销，性能极高。\"},\"3798\":{\"t\":\"偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。\"},\"3799\":{\"t\":\"偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗。\"},\"3800\":{\"h\":\"2.3轻量级锁\",\"a\":\"_2-3轻量级锁\"},\"3801\":{\"t\":\"当前锁是偏向锁，此时有多个线程同时来竞争锁，偏向锁就会升级为轻量级锁。轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式来获取锁。\"},\"3802\":{\"t\":\"轻量级锁的获取有两种情况：\"},\"3803\":{\"t\":\"当关闭偏向锁功能时\"},\"3804\":{\"t\":\"多个线程竞争偏向锁导致偏向锁升级为轻量级锁。一旦有第二个线程加入锁竞争，偏向锁就升级为轻量级锁（自旋锁）\"},\"3805\":{\"t\":\"在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先比较当前锁标志位是否为“释放”，如果是则将其设置为“锁定”，此过程是原子性。如果抢到锁，然后线程将当前锁的持有者信息修改为自己。\"},\"3806\":{\"h\":\"2.4重量级锁\",\"a\":\"_2-4重量级锁\"},\"3807\":{\"t\":\"如果线程的竞争很激励，线程的自旋超过了一定次数（默认循环10次，可以通过虚拟机参数更改），将轻量级锁升级为重量级锁（依然是 CAS 修改锁标志位，但不修改持有锁的线程ID），当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。\"},\"3808\":{\"t\":\"重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资源。\"},\"3809\":{\"h\":\"2.5锁优化技术（锁粗化、锁消除）：\",\"a\":\"_2-5锁优化技术-锁粗化、锁消除\"},\"3810\":{\"t\":\"锁粗化就是告诉我们任何事情都有个度，有些情况下我们反而希望把很多次锁的请求合并成一个请求，以降低短时间内大量锁请求、同步、释放带来的性能损耗。\"},\"3811\":{\"t\":\"锁消除指的是在某些情况下，JVM 虚拟机如果检测不到某段代码被共享和竞争的可能性，就会将这段代码所属的同步锁消除掉，从而到底提高程序性能的目的。\"},\"3812\":{\"h\":\"3.锁的分类实现\",\"a\":\"_3-锁的分类实现\"},\"3813\":{\"h\":\"3.1悲观锁：\",\"a\":\"_3-1悲观锁\"},\"3814\":{\"t\":\"正如其名，它是指对数据修改时持保守态度，认为其他人也会修改数据。因此在操作数据时，会把数据锁住，直到操作完成。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是长事务而言，这样的开销往往无法承受。\"},\"3815\":{\"h\":\"3.2乐观锁：\",\"a\":\"_3-2乐观锁\"},\"3816\":{\"t\":\"乐观锁，从字面意思也能猜到个大概，在操作数据时非常乐观，认为别人不会同时修改数据，因此乐观锁不会上锁 只是在 提交更新 时，才会正式对数据的冲突与否进行检测。如果发现冲突了，则返回错误信息，让用户决定如何去做 。否则，执行本次操作。\"},\"3817\":{\"h\":\"3.3可重入锁：\",\"a\":\"_3-3可重入锁\"},\"3818\":{\"t\":\"可重入锁，也叫做递归锁，是指在同一个线程在调外层方法获取锁的时候，再进入内层方法会自动获取锁。\"},\"3819\":{\"t\":\"对象锁或类锁内部有计数器，一个线程每获得一次锁，计数器 +1；解锁时，计数器 -1。\"},\"3820\":{\"t\":\"JAVA 中的 ReentrantLock 和 synchronized 都是 可重入锁。可重入锁的一个好处是可一定程度避免死锁。\"},\"3821\":{\"h\":\"3.4自旋锁：\",\"a\":\"_3-4自旋锁\"},\"3822\":{\"t\":\"自旋锁是采用让当前线程不停地在循环体内执行，当循环的条件被其他线程改变时才能进入临界区。自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不断增加时，性能下降明显，因为每个线程都需要执行，会占用CPU时间片。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\"},\"3823\":{\"t\":\"自旋锁缺点：\"},\"3824\":{\"t\":\"可能引发死锁\"},\"3825\":{\"t\":\"可能占用 CPU 的时间过长\"},\"3826\":{\"t\":\"我们可以设置一个 循环时间 或 循环次数，超出阈值时，让线程进入阻塞状态，防止线程长时间占用 CPU 资源。JUC 并发包中的 CAS 就是采用自旋锁，compareAndswap 是CAS操作的核心，底层利用Unsafe对象实现的。\"},\"3827\":{\"t\":\"自适应自旋锁：在JDK 1.6中引入了自适应自旋锁。这就意味着自旋的时间不再固定了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的。如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行中，那么JVM会认为该锁自旋获取到锁的可能性很大，会自动增加等待时间。比如增加到100此循环。相反，如果对于某个锁，自旋很少成功获取锁。那再以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，JVM对程序的锁的状态预测会越来越准确，JVM也会越来越聪明。\"},\"3828\":{\"h\":\"3.5独享锁：\",\"a\":\"_3-5独享锁\"},\"3829\":{\"t\":\"独享锁，也有人叫它排他锁。无论读操作还是写操作，只能有一个线程获得锁，其他线程处于阻塞状态。\"},\"3830\":{\"t\":\"缺点：读操作并不会修改数据，而且大部分的系统都是读多写少，如果读读之间互斥，大大降低系统的性能。下面的共享锁会解决这个问题。\"},\"3831\":{\"t\":\"像JAVA 中的 ReentrantLock 和 synchronized 都是独享锁。\"},\"3832\":{\"h\":\"3.6共享锁：\",\"a\":\"_3-6共享锁\"},\"3833\":{\"t\":\"共享锁是指允许多个线程同时持有锁，一般用在读锁上。读锁的共享锁可保证并发读是非常高效的。读写，写读 ，写写的则是互斥的。独享锁与共享锁是通过AQS来实现的.\"},\"3834\":{\"t\":\"ReentrantReadWriteLock，其读锁是共享锁，其写锁是独享锁。\"},\"3835\":{\"h\":\"3.7读锁/写锁：\",\"a\":\"_3-7读锁-写锁\"},\"3836\":{\"t\":\"如果对某个资源是读操作，那多个线程之间并不会相互影响，可以通过添加读锁实现共享。如果有修改动作，为了保证数据的并发安全，此时只能有一个线程获得锁，我们称之为写锁。读读是共享的；而读写、写读 、写写则是互斥的。\"},\"3837\":{\"t\":\"像 JAVA 中的 ReentrantReadWriteLock 就是一种读写锁。\"},\"3838\":{\"h\":\"3.8公平锁/非公平锁：\",\"a\":\"_3-8公平锁-非公平锁\"},\"3839\":{\"t\":\"公平锁：多个线程按照申请锁的顺序去获得锁，所有线程都在队列里排队，先来先获取的公平性原则。\"},\"3840\":{\"t\":\"优点：所有的线程都能得到资源，不会饿死在队列中。\"},\"3841\":{\"t\":\"缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，CPU 唤醒下一个阻塞线程有系统开销。\"},\"3842\":{\"t\":\"**非公平锁：**多个线程不按照申请锁的顺序去获得锁，而是同时以插队方式直接尝试获取锁，获取不到（插队失败），会进入队列等待（失败则乖乖排队），如果能获取到（插队成功），就直接获取到锁。\"},\"3843\":{\"t\":\"**优点：**可以减少 CPU 唤醒线程的开销，整体的吞吐效率会高点。\"},\"3844\":{\"t\":\"**缺点：**可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁，活活饿死。\"},\"3845\":{\"t\":\"Java 多线程并发操作，我们操作锁大多时候都是基于 Sync 本身去实现的，而 Sync 本身却是 ReentrantLock 的一个内部类，Sync 继承 AbstractQueuedSynchronizer，像 ReentrantLock 默认是非公平锁，我们可以在构造函数中传入 true，来创建公平锁。\"},\"3846\":{\"t\":\"参考：https://blog.csdn.net/weixin_70730532/article/details/126875303\"},\"3847\":{\"h\":\"线程池\"},\"3848\":{\"h\":\"1.为什么要用线程池？\",\"a\":\"_1-为什么要用线程池\"},\"3849\":{\"t\":\"这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：\"},\"3850\":{\"t\":\"降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\"},\"3851\":{\"t\":\"提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。\"},\"3852\":{\"t\":\"提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\"},\"3853\":{\"h\":\"2.如何创建线程池？\",\"a\":\"_2-如何创建线程池\"},\"3854\":{\"h\":\"2.1方式一：通过 ThreadPoolExecutor 构造函数来创建（推荐）。\",\"a\":\"_2-1方式一-通过threadpoolexecutor构造函数来创建-推荐-。\"},\"3855\":{\"t\":\"package com.young.多线程; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.Executors; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * @author 杨路恒 */ public class ThreadPool { public static void main(String[] args) { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1,2, 2, TimeUnit.MILLISECONDS,new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(), // new ThreadPoolExecutor.AbortPolicy() // new ThreadPoolExecutor.CallerRunsPolicy() // new ThreadPoolExecutor.DiscardOldestPolicy() new ThreadPoolExecutor.DiscardPolicy() ); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.shutdown(); } } \"},\"3856\":{\"t\":\"参数：\"},\"3857\":{\"t\":\"/** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @param threadFactory the factory to use when the executor * creates a new thread * @param handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached * @throws IllegalArgumentException if one of the following holds:<br> * {@code corePoolSize < 0}<br> * {@code keepAliveTime < 0}<br> * {@code maximumPoolSize <= 0}<br> * {@code maximumPoolSize < corePoolSize} * @throws NullPointerException if {@code workQueue} * or {@code threadFactory} or {@code handler} is null */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; } \"},\"3858\":{\"t\":\"ThreadPoolExecutor 3 个最重要的参数：\"},\"3859\":{\"t\":\"corePoolSize : 任务队列未达到队列容量时，最大可以同时运行的线程数量。\"},\"3860\":{\"t\":\"maximumPoolSize : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\"},\"3861\":{\"t\":\"workQueue: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"3862\":{\"t\":\"ThreadPoolExecutor其他常见参数 :\"},\"3863\":{\"t\":\"keepAliveTime:线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；\"},\"3864\":{\"t\":\"unit : keepAliveTime 参数的时间单位。\"},\"3865\":{\"t\":\"threadFactory :executor 创建新线程的时候会用到。\"},\"3866\":{\"t\":\"handler :饱和策略。关于饱和策略下面单独介绍一下。\"},\"3867\":{\"t\":\"下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）：\"},\"3868\":{\"t\":\"线程池的饱和策略有哪些？\"},\"3869\":{\"t\":\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，ThreadPoolTaskExecutor 定义一些策略:\"},\"3870\":{\"t\":\"ThreadPoolExecutor.AbortPolicy： 抛出 RejectedExecutionException来拒绝新任务的处理。\"},\"3871\":{\"t\":\"ThreadPoolExecutor.CallerRunsPolicy： 调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。\"},\"3872\":{\"t\":\"ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。\"},\"3873\":{\"t\":\"ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。\"},\"3874\":{\"t\":\"举个例子：Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略来配置线程池的时候，默认使用的是 AbortPolicy。在这种饱和策略下，如果队列满了，ThreadPoolExecutor 将抛出 RejectedExecutionException 异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。如果不想丢弃任务的话，可以使用CallerRunsPolicy。CallerRunsPolicy 和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务。\"},\"3875\":{\"t\":\"线程池常用的阻塞队列有哪些？\"},\"3876\":{\"t\":\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"3877\":{\"t\":\"不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。\"},\"3878\":{\"t\":\"容量为 Integer.MAX_VALUE 的 LinkedBlockingQueue（无界队列）：FixedThreadPool 和 SingleThreadExector 。由于队列永远不会被放满，因此FixedThreadPool最多只能创建核心线程数的线程。\"},\"3879\":{\"t\":\"SynchronousQueue（同步队列） ：CachedThreadPool 。SynchronousQueue 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，CachedThreadPool 的最大线程数是 Integer.MAX_VALUE ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。\"},\"3880\":{\"t\":\"DelayedWorkQueue（延迟阻塞队列）：ScheduledThreadPool 和 SingleThreadScheduledExecutor 。DelayedWorkQueue 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。DelayedWorkQueue 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 Integer.MAX_VALUE，所以最多只能创建核心线程数的线程。\"},\"3881\":{\"t\":\"线程池处理任务的流程了解吗？\"},\"3882\":{\"t\":\"如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。\"},\"3883\":{\"t\":\"如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。\"},\"3884\":{\"t\":\"如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。\"},\"3885\":{\"t\":\"如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用RejectedExecutionHandler.rejectedExecution()方法。\"},\"3886\":{\"t\":\"其实java线程池的实现原理很简单，说白了就是一个线程集合workerSet和一个阻塞队列workQueue。当用户向线程池提交一个任务(也就是线程)时，线程池会先将任务放入workQueue中。workerSet中的线程会不断的从workQueue中获取线程然后执行。当workQueue中没有任务的时候，worker就会阻塞，直到队列中有任务了就取出来继续执行。\"},\"3887\":{\"t\":\"任务的执行\"},\"3888\":{\"t\":\"execute –> addWorker –>runworker (getTask)\"},\"3889\":{\"t\":\"关闭线程池：\"},\"3890\":{\"t\":\"遍历线程池中的所有线程，然后逐个调用线程的interrupt方法来中断线程。\"},\"3891\":{\"t\":\"关闭方式 - shutdown\"},\"3892\":{\"t\":\"将线程池里的线程状态设置成SHUTDOWN状态, 然后中断所有没有正在执行任务的线程。\"},\"3893\":{\"t\":\"关闭方式 - shutdownNow\"},\"3894\":{\"t\":\"将线程池里的线程状态设置成STOP状态, 然后停止所有正在执行或暂停任务的线程。只要调用这两个关闭方法中的任意一个, isShutDown() 返回true.。当所有任务都成功关闭了, isTerminated()返回true。\"},\"3895\":{\"t\":\"如何设定线程池的大小？\"},\"3896\":{\"t\":\"有一个简单并且适用面比较广的公式：\"},\"3897\":{\"t\":\"CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\"},\"3898\":{\"t\":\"I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\"},\"3899\":{\"h\":\"2.2方式二：通过 Executor 框架的工具类 Executors 来创建。\",\"a\":\"_2-2方式二-通过-executor-框架的工具类-executors-来创建。\"},\"3900\":{\"t\":\"我们可以创建多种类型的 ThreadPoolExecutor：\"},\"3901\":{\"t\":\"FixedThreadPool ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\"},\"3902\":{\"t\":\"SingleThreadExecutor： 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\"},\"3903\":{\"t\":\"CachedThreadPool： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。\"},\"3904\":{\"t\":\"ScheduledThreadPool ：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。\"},\"3905\":{\"h\":\"3.为什么不推荐使用内置线程池？\",\"a\":\"_3-为什么不推荐使用内置线程池\"},\"3906\":{\"t\":\"在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\"},\"3907\":{\"t\":\"为什么呢？\"},\"3908\":{\"t\":\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\"},\"3909\":{\"t\":\"另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\"},\"3910\":{\"t\":\"Executors 返回线程池对象的弊端如下(后文会详细介绍到)：\"},\"3911\":{\"t\":\"FixedThreadPool 和 SingleThreadExecutor ： 使用的是无界的 LinkedBlockingQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"3912\":{\"t\":\"CachedThreadPool ：使用的是同步队列 SynchronousQueue, 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。\"},\"3913\":{\"t\":\"ScheduledThreadPool 和 SingleThreadScheduledExecutor : 使用的无界的延迟阻塞队列DelayedWorkQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"3914\":{\"h\":\"4.如何动态修改线程池的参数？\",\"a\":\"_4-如何动态修改线程池的参数\"},\"3915\":{\"t\":\"JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：\"},\"3916\":{\"t\":\"重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。\"},\"3917\":{\"t\":\"问题一：线程池被创建后里面有线程吗？如果没有的话，你知道有什么方法对线程池进行预热吗？\"},\"3918\":{\"t\":\"线程池被创建后如果没有任务过来，里面是不会有线程的。如果需要预热的话可以调用下面的两个方法：\"},\"3919\":{\"t\":\"全部启动：\"},\"3920\":{\"t\":\"仅启动一个：\"},\"3921\":{\"t\":\"问题二：核心线程数会被回收吗？需要什么设置？\"},\"3922\":{\"t\":\"核心线程数默认是不会被回收的，如果需要回收核心线程数，需要调用下面的方法：\"},\"3923\":{\"h\":\"5.监控线程池的状态\",\"a\":\"_5-监控线程池的状态\"},\"3924\":{\"t\":\"可以使用ThreadPoolExecutor以下方法:\"},\"3925\":{\"t\":\"getTaskCount() Returns the approximate total number of tasks that have ever been scheduled for execution.\"},\"3926\":{\"t\":\"getCompletedTaskCount() Returns the approximate total number of tasks that have completed execution. 返回结果少于getTaskCount()。\"},\"3927\":{\"t\":\"getLargestPoolSize() Returns the largest number of threads that have ever simultaneously been in the pool. 返回结果小于等于maximumPoolSize\"},\"3928\":{\"t\":\"getPoolSize() Returns the current number of threads in the pool.\"},\"3929\":{\"t\":\"getActiveCount() Returns the approximate number of threads that are actively executing tasks\"},\"3930\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html；https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651751537&idx=1&sn=c50a434302cc06797828782970da190e&chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c&scene=21#wechat_redirect；https://pdai.tech/md/java/thread/java-thread-x-juc-executor-ThreadPoolExecutor.html\"},\"3931\":{\"h\":\"中邮消费金融面经\"},\"3932\":{\"h\":\"自我介绍\",\"a\":\"自我介绍\"},\"3933\":{\"t\":\"面试官，您好。我叫杨路恒，今年25岁，山东济宁人，就读于陕西师范大学，今年研三，软件工程专业，研究方向为知识图谱。大学时间到研究生期间的主要技术栈是Java 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。另外最近一段在联想实习的经历，主要在是对大模型进行开发应用。最近获得了研究生国家奖学金。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的访问量达到了49W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"3934\":{\"h\":\"1.介绍一个实习中项目，有什么收获，主要工作是什么，项目中遇到问题如何解决，如何处理协作问题？\",\"a\":\"_1-介绍一个实习中项目-有什么收获-主要工作是什么-项目中遇到问题如何解决-如何处理协作问题\"},\"3935\":{\"h\":\"2.问了遇到的最大难题，当前offer情况？\",\"a\":\"_2-问了遇到的最大难题-当前offer情况\"},\"3936\":{\"h\":\"3.java中用了哪些技术？\",\"a\":\"_3-java中用了哪些技术\"},\"3937\":{\"t\":\"面向对象技术 - java是一门纯面向对象的语言,支持封装、继承和多态等面向对象特性。\"},\"3938\":{\"t\":\"JVM技术 - java代码运行在JVM上,JVM负责内存管理、垃圾回收等,支持跨平台运行。\"},\"3939\":{\"t\":\"多线程技术 - java提供了线程机制,可以通过继承Thread类或实现Runnable接口来创建线程,还提供了线程同步、线程通信等功能。\"},\"3940\":{\"t\":\"集合框架 - java提供了丰富的集合类,如List、Set、Map等,大大简化了集合操作。\"},\"3941\":{\"t\":\"泛型技术 - 泛型提供了编译时的类型安全检测机制,可以在编译时发现问题。\"},\"3942\":{\"t\":\"反射技术 - 反射机制允许程序在运行时动态获取类的信息,创建对象等。\"},\"3943\":{\"h\":\"4.提高反射的性能 setAccessable？\",\"a\":\"_4-提高反射的性能-setaccessable\"},\"3944\":{\"t\":\"使用setAccessible(true)\"},\"3945\":{\"t\":\"通过setAccessible方法可以关闭Java语言访问检查,提高反射的效率。这个方法可以提高直接访问私有属性和方法的效率。\"},\"3946\":{\"t\":\"缓存反射对象\"},\"3947\":{\"t\":\"可以缓存反射调用的Method和Field对象,避免重复获取,因为获取反射对象的过程比较消耗性能。\"},\"3948\":{\"h\":\"5.静态代理与动态代理的区别？\",\"a\":\"_5-静态代理与动态代理的区别\"},\"3949\":{\"t\":\"实现时机不同\"},\"3950\":{\"t\":\"静态代理在编译时就已经实现了代理类,而动态代理是在运行时动态生成代理类。\"},\"3951\":{\"t\":\"实现方式不同\"},\"3952\":{\"t\":\"静态代理在编译时生成的代理类需要实现与目标对象相同的接口,然后在代理类中进行功能增强。动态代理是利用JDK的Proxy类或第三方库在运行时动态生成目标类的代理对象。\"},\"3953\":{\"t\":\"灵活性不同\"},\"3954\":{\"t\":\"静态代理的代理类只能为一个目标对象服务,如果要为多个目标对象服务需要定义不同的代理类。动态代理可以通过参数不同,为不同的目标对象生成代理实例,灵活性更高。\"},\"3955\":{\"t\":\"易用性不同\"},\"3956\":{\"t\":\"静态代理需要额外定义许多代理类,工作量大,不易管理。动态代理可以直接使用JDK的Proxy类或第三方框架,使用更加方便。\"},\"3957\":{\"t\":\"接口要求不同\"},\"3958\":{\"t\":\"静态代理要求目标对象必须实现接口,否则无法使用接口进行编程。动态代理的目标对象可以是类或者接口。\"},\"3959\":{\"t\":\"静态代理\"},\"3960\":{\"t\":\"定义接口:\"},\"3961\":{\"t\":\"java Copy code public interface IHello { void sayHello(); } \"},\"3962\":{\"t\":\"2.实现类:\"},\"3963\":{\"t\":\"java Copy code public class HelloImpl implements IHello { @Override public void sayHello() { System.out.println(\\\"Hello World!\\\"); } } \"},\"3964\":{\"t\":\"3.代理类:\"},\"3965\":{\"t\":\"java Copy code public class HelloProxy implements IHello { private HelloImpl helloImpl; public HelloProxy() { helloImpl = new HelloImpl(); } @Override public void sayHello() { //额外功能 System.out.println(\\\"开始代理\\\"); helloImpl.sayHello(); //额外功能 System.out.println(\\\"结束代理\\\"); } } \"},\"3966\":{\"t\":\"4.测试:\"},\"3967\":{\"t\":\"java Copy code public class ProxyTest { public static void main(String[] args) { IHello helloProxy = new HelloProxy(); helloProxy.sayHello(); } } \"},\"3968\":{\"t\":\"输出:\"},\"3969\":{\"t\":\"开始代理\"},\"3970\":{\"t\":\"Hello World!\"},\"3971\":{\"t\":\"结束代理\"},\"3972\":{\"t\":\"动态代理\"},\"3973\":{\"t\":\"定义与静态代理相同的接口IHello和实现类HelloImpl\"},\"3974\":{\"t\":\"代理处理器类:\"},\"3975\":{\"t\":\"java Copy code public class DynamicProxy implements InvocationHandler { private Object target; public DynamicProxy(Object target) { this.target = target; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\\"开始代理\\\"); Object result = method.invoke(target, args); System.out.println(\\\"结束代理\\\"); return result; } } \"},\"3976\":{\"t\":\"3.获取代理对象:\"},\"3977\":{\"t\":\"java Copy code IHello hello = (IHello) Proxy.newProxyInstance( HelloImpl.class.getClassLoader(), new Class[]{IHello.class}, new DynamicProxy(new HelloImpl())); \"},\"3978\":{\"t\":\"4.测试:\"},\"3979\":{\"t\":\"java Copy code public class ProxyTest { public static void main(String[] args) { IHello hello = getProxy(); hello.sayHello(); } private static IHello getProxy() { // 步骤3代码 } } \"},\"3980\":{\"t\":\"输出与静态代理相同。\"},\"3981\":{\"h\":\"6.是否会dubbo？\",\"a\":\"_6-是否会dubbo\"},\"3982\":{\"t\":\"Dubbo是什么\"},\"3983\":{\"t\":\"Dubbo是阿里巴巴开源的一个高性能、轻量级的Java RPC框架。其架构图主要包含:服务提供者、服务消费者、注册中心和监控中心四部分。利用Dubbo可以很方便地实现服务化,以及SOA服务治理架构。\"},\"3984\":{\"t\":\"Dubbo的工作原理\"},\"3985\":{\"t\":\"Dubbo的工作原理主要是基于RPC远程调用。服务提供者启动时会将自己提供的服务注册到注册中心,同时开启RPC服务器监听服务请求。服务消费者启动时会向注册中心订阅自己需要的服务,REGISTER中心会返回服务提供者的地址列表。然后服务消费者会基于RPC协议向提供者发送服务调用请求,提供者收到请求后执行服务并返回结果给消费者。\"},\"3986\":{\"t\":\"Dubbo的优点\"},\"3987\":{\"t\":\"Dubbo最大的优点是透明化、易用性强。采用全Spring配置方式,可以和Spring程序无缝集成。另外Dubbo实现了软负载均衡及故障容错机制,服务淘汰及自我保护机制,在大并发下保证系统可用性。\"},\"3988\":{\"t\":\"Dubbo的典型应用\"},\"3989\":{\"t\":\"Dubbo最典型的应用场景是跨系统的分布式服务调用。如电商系统中订单服务要调用用户服务获取用户信息,调用商品服务获取商品信息。Dubbo可以提供透明的跨系统调用,实现SOA服务治理。\"},\"3990\":{\"h\":\"7.排查full gc？\",\"a\":\"_7-排查full-gc\"},\"3991\":{\"t\":\"观察GC日志,注意full gc的次数、耗时以及再次full gc的间隔时间,如果过于频繁可能是内存溢出导致。\"},\"3992\":{\"t\":\"使用jstat -gc utilization工具观察老年代占用率,如果接近100%时就会引发full gc。可以适当提高老年代比例避免memory exhaustion。\"},\"3993\":{\"t\":\"生成heap dump进行脱机分析,查看对象存活数量及大小,找出是否存在存活时间过长的对象引发内存泄漏。\"},\"3994\":{\"h\":\"8.提高数据库查询性能？\",\"a\":\"_8-提高数据库查询性能\"},\"3995\":{\"t\":\"优化查询语句,使用Explain查看执行计划,避免全表扫描,使用索引进行查询。使用合理的条件过滤,避免返回大量无用数据。\"},\"3996\":{\"t\":\"索引\"},\"3997\":{\"t\":\"redis\"},\"3998\":{\"h\":\"9.大学中印象最深的课程？\",\"a\":\"_9-大学中印象最深的课程\"},\"3999\":{\"t\":\"操作系统\"},\"4000\":{\"h\":\"10.最熟悉的算法？\",\"a\":\"_10-最熟悉的算法\"},\"4001\":{\"t\":\"二分查找\"},\"4002\":{\"h\":\"11.平时学习技术的途径和方法？\",\"a\":\"_11-平时学习技术的途径和方法\"},\"4003\":{\"t\":\"网站、自学\"},\"4004\":{\"h\":\"12.对哪种数据结构印象深刻？Java里怎么用的？？\",\"a\":\"_12-对哪种数据结构印象深刻-java里怎么用的\"},\"4005\":{\"t\":\"HashMap\"},\"4006\":{\"h\":\"13.校园实践的收获？遇到过哪些问题？\",\"a\":\"_13-校园实践的收获-遇到过哪些问题\"},\"4007\":{\"t\":\"大一志愿服务\"},\"4008\":{\"h\":\"14.密码学：常见的对称加密和非对称加密算法？RSA为什么比DES效率高？\",\"a\":\"_14-密码学-常见的对称加密和非对称加密算法-rsa为什么比des效率高\"},\"4009\":{\"t\":\"常见的对称加密算法有DES、AES等,特点是加密和解密使用同一密钥。\"},\"4010\":{\"t\":\"常见的非对称加密算法有RSA、ECC等,特点是加密和解密使用不同的密钥。\"},\"4011\":{\"t\":\"RSA之所以效率高于DES:\"},\"4012\":{\"t\":\"​ RSA可以选择密钥长度,典型取1024或2048位,密钥越大加密强度越高。DES密钥仅56位。\"},\"4013\":{\"h\":\"15.为什么想来广州？\",\"a\":\"_15-为什么想来广州\"},\"4014\":{\"h\":\"16.项目是基于微服务架构，怎么分割不同的架构的？\",\"a\":\"_16-项目是基于微服务架构-怎么分割不同的架构的\"},\"4015\":{\"t\":\"按业务领域来拆分,不同业务领域的服务可以拆分出来,比如用户服务、订单服务、支付服务等。\"},\"4016\":{\"t\":\"按团队结构来拆分,不同的服务可以由不同的团队来负责。\"},\"4017\":{\"t\":\"将对外提供的开放API拆分为独立服务。\"},\"4018\":{\"t\":\"将一些通用能力如日志、配置、监控等拆分出基础服务。\"},\"4019\":{\"h\":\"17.spring框架，AOP\",\"a\":\"_17-spring框架-aop\"},\"4020\":{\"t\":\"AOP的概念 - 在程序运行期间,动态地将代码切入到方法或者函数的调用点上的这种编程方式,可以不修改源代码实现对程序功能的增强。\"},\"4021\":{\"t\":\"AOP的实现原理 - Spring AOP使用了动态代理,在运行时通过生成代理对象,实现对目标对象方法的拦截从而实现增强功能。\"},\"4022\":{\"t\":\"AOP的重要组件 - aspect、pointcut、advice等,分别用于声明切面、确定joinpoint、执行增强代码。\"},\"4023\":{\"t\":\"AOP的主要作用 - 日志记录、性能监控、安全控制、事务处理等方面对程序进行增强。\"},\"4024\":{\"t\":\"AOP和OOP的区别 - OOP是静态的代码封装和重用,而AOP是动态地通过代理方式实现运行期间的代码增强。\"},\"4025\":{\"t\":\"Spring AOP与 AspectJ AOP的区别 - Spring只支持方法级别的切入,而AspectJ通过修改字节码支持类和方法级别的切入。\"},\"4026\":{\"t\":\"AOP的典型应用 - Spring事务管理就是通过AOP实现的,转译了业务方法的调用过程,减少了重复代码。\"},\"4027\":{\"t\":\"如何优化AOP的性能 - 采用AspectJ编译时织入提高性能,只为Really需要的Joinpoint生成代理等。\"},\"4028\":{\"t\":\"1、定义一个接口及其实现类:\"},\"4029\":{\"t\":\"java Copy code public interface UserService { void addUser(); } public class UserServiceImpl implements UserService { public void addUser() { // 方法实现 } } \"},\"4030\":{\"t\":\"2、定义一个切面类:\"},\"4031\":{\"t\":\"java Copy code @Aspect public class LoggingAspect { @Before(\\\"execution(* com.example.UserServiceImpl.addUser(..))\\\") public void logBefore(JoinPoint joinPoint) { // 前置通知实现 } @AfterReturning(\\\"execution(* com.example.UserServiceImpl.addUser(..))\\\") public void logAfter(JoinPoint joinPoint) { // 后置通知实现 } } \"},\"4032\":{\"t\":\"这里通过@Before和@AfterReturning注解定义了前置通知和后置通知。\"},\"4033\":{\"t\":\"3、配置Spring AOP扫描该切面类:\"},\"4034\":{\"t\":\"java Copy code @EnableAspectJAutoProxy @Configuration public class AppConfig { } \"},\"4035\":{\"t\":\"4、调用UserService的addUser方法将自动触发前置通知和后置通知的执行。\"},\"4036\":{\"h\":\"18.拦截器底层协议是什么？\",\"a\":\"_18-拦截器底层协议是什么\"},\"4037\":{\"t\":\"拦截器的实现是基于Java的动态代理机制,Spring AOP与拦截器实现类似。\"},\"4038\":{\"t\":\"Spring MVC中的拦截器通过HandlerInterceptor接口实现请求拦截,底层是基于Servlet过滤器链。\"},\"4039\":{\"t\":\"拦截器链中的拦截器实例是以单例模式管理的,线程不安全需要注意。\"},\"4040\":{\"t\":\"拦截器只能拦截Controller请求,对静态资源没有效果。Filter过滤器可以处理更底层的请求信息。\"},\"4041\":{\"t\":\"拦截器的根本规范就是JSR-250,这可以看作是它的底层协议。\"},\"4042\":{\"h\":\"19.怎么保证单点登录？\",\"a\":\"_19-怎么保证单点登录\"},\"4043\":{\"t\":\"单点登录(Single Sign On,SSO)的核心理念是实现一次登录,处处可达。理解SSO的关键是:\"},\"4044\":{\"t\":\"单一认证系统\"},\"4045\":{\"t\":\"这是一个统一的认证系统(可基于服务或OAuth),所有其他应用依赖这个系统进行认证,不再各自实现认证机制。\"},\"4046\":{\"t\":\"认证信息共享\"},\"4047\":{\"t\":\"这个统一认证系统负责对用户进行认证,并提供认证信息(如授权令牌)给其他应用,以实现认证信息的共享。\"},\"4048\":{\"t\":\"认证信息有效性\"},\"4049\":{\"t\":\"认证信息需要在一定时间内保持有效,在有效期内访问其他应用都无需重新认证。\"},\"4050\":{\"t\":\"应用信任联盟\"},\"4051\":{\"t\":\"所有的应用都信任这个统一认证系统,并基于它提供的认证信息认可用户身份。\"},\"4052\":{\"t\":\"无缝切换\"},\"4053\":{\"t\":\"用户可以在一个应用进入另一个应用,没有认证界限,实现了真正的单点体验。\"},\"4054\":{\"t\":\"所以SSO的本质是:依赖统一认证,认证信息共享,实现一次登录多处受信,无需重复登录。\"},\"4055\":{\"t\":\"使用JWT(JSON Web Token)实现单点登录的流程如下:\"},\"4056\":{\"t\":\"用户使用用户名密码首次在认证服务器登录\"},\"4057\":{\"t\":\"认证服务器验证用户信息无误后,生成一个JWT,并将用户信息、权限等数据编码进JWT\"},\"4058\":{\"t\":\"客户端拿到JWT,保存到本地(比如浏览器localStorage)\"},\"4059\":{\"t\":\"访问其他需要权限验证的服务器时,客户端带上这个JWT\"},\"4060\":{\"t\":\"服务器通过校验JWT签名等信息,认证用户身份和权限\"},\"4061\":{\"t\":\"这样客户端在多个服务器之间就可以通过这个JWT实现统一的认证和鉴权\"},\"4062\":{\"t\":\"JWT自包含了用户认证信息,不同服务器可以共享解析,无需每个服务器单独认证,即实现了SSO(Single Sign On)。\"},\"4063\":{\"t\":\"JWT也可以设置过期时间,单点登录后一定时间内访问都无需重新登录,提升了用户体验。\"},\"4064\":{\"t\":\"当JWT过期时,需要重新获取新的JWT才能继续访问,以保证SSO的安全性。\"},\"4065\":{\"t\":\"所以基于JWT的单点登录,主要依赖于JWT作为用户身份令牌在多个系统中共享,省去重复认证的步骤,从而实现单点登录的效果。\"},\"4066\":{\"h\":\"20.项目用到了spring boot的什么API？\",\"a\":\"_20-项目用到了spring-boot的什么api\"},\"4067\":{\"t\":\"自动配置 - 说明使用了Spring Boot的自动配置功能。\"},\"4068\":{\"t\":\"Starter - 说明使用了哪些Spring Boot Starter模块,如spring-boot-starter-web、spring-boot-starter-jdbc等,快速引入需要的依赖。\"},\"4069\":{\"h\":\"21.mybatis 一级缓存二级缓存，#和$的区别？\",\"a\":\"_21-mybatis-一级缓存二级缓存-和-的区别\"},\"4070\":{\"t\":\"一级缓存是SqlSession级别的缓存,同一个SqlSession查询过的数据会被缓存,多次查询从缓存中直接获取,默认开启。\"},\"4071\":{\"t\":\"二级缓存是SqlSessionFactory级别,多个SqlSession可以共用二级缓存,需要手动配置开启和清空,效果更好。\"},\"4072\":{\"t\":\"主要区别是一级缓存仅在一个SqlSession内有效,二级缓存对整个MyBatis系统都有效。\"},\"4073\":{\"t\":\"#表示一个占位符,它可以限制变量的类型。#{name} 会限制name必须为字符串类型。\"},\"4074\":{\"t\":\"表示拼接SQL字符串,对变量类型不做限制。{{name}}可以接受任何类型的变量。\"},\"4075\":{\"t\":\"注意需要转义为{},并且外面要用一个字符串引起来。\"},\"4076\":{\"t\":\"一般来说为了安全性,尽量使用#参数占位符。\"},\"4077\":{\"h\":\"22.有没有在linux部署过项目？\",\"a\":\"_22-有没有在linux部署过项目\"},\"4078\":{\"t\":\"什么情况下打包为war包：\"},\"4079\":{\"t\":\"Java Web项目、不包含Tomcat依赖的项目\"},\"4080\":{\"t\":\"什么情况下打包为jar包：\"},\"4081\":{\"t\":\"SpringBoot项目、SpringCloud项目\"},\"4082\":{\"t\":\"打包, 将war包上传到云服务器的webapps目录\"},\"4083\":{\"t\":\"使用IDEA打包jar，直接将JAR 放入服务器 使用命令：\"},\"4084\":{\"t\":\"java -jar 使用后台运行进程 nohup java -jar \"},\"4085\":{\"h\":\"23.怎么想到用redis做限流的？\",\"a\":\"_23-怎么想到用redis做限流的\"},\"4086\":{\"t\":\"内存存储：Redis是一个内存数据库，它能够快速读取和写入数据，这使得它非常适合用于高速的限流决策。在Redis中执行限流操作比在传统数据库中更快速。\"},\"4087\":{\"t\":\"过期时间：Redis支持为存储的数据设置过期时间。这意味着你可以为每个令牌或限流规则设置一个超时时间，一旦时间到期，令牌将自动删除，从而不再占用内存。\"},\"4088\":{\"t\":\"数据结构：Redis提供了多种数据结构，如有序集合（sorted set）和列表，这些数据结构非常适合用于实现不同类型的限流算法，如令牌桶算法或漏桶算法。\"},\"4089\":{\"h\":\"24.怎么防sql注入？\",\"a\":\"_24-怎么防sql注入\"},\"4090\":{\"t\":\"PreparedStatement来执行参数化查询。用户输入通过setString方法绑定到查询的占位符位置，而不是直接将用户输入嵌入到SQL查询中。\"},\"4091\":{\"t\":\"使用ORM框架\"},\"4092\":{\"h\":\"25.JWT单点登陆，怎么理解单点？\",\"a\":\"_25-jwt单点登陆-怎么理解单点\"},\"4093\":{\"h\":\"26.在学校的经历？\",\"a\":\"_26-在学校的经历\"},\"4094\":{\"h\":\"27.最近读什么书？\",\"a\":\"_27-最近读什么书\"},\"4095\":{\"h\":\"28.了解Linux、Docker吗？\",\"a\":\"_28-了解linux、docker吗\"},\"4096\":{\"h\":\"29.平时如何学习新的知识？\",\"a\":\"_29-平时如何学习新的知识\"},\"4097\":{\"h\":\"30.竞赛获奖？\",\"a\":\"_30-竞赛获奖\"},\"4098\":{\"h\":\"31.Redis和MySQL数据一致性？\",\"a\":\"_31-redis和mysql数据一致性\"},\"4099\":{\"t\":\"Cache Aside Pattern 是我们平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景。\"},\"4100\":{\"t\":\"写 ：\"},\"4101\":{\"t\":\"先更新 DB\"},\"4102\":{\"t\":\"然后直接删除 cache 。\"},\"4103\":{\"t\":\"读 :\"},\"4104\":{\"t\":\"从 cache 中读取数据，读取到就直接返回\"},\"4105\":{\"t\":\"cache中读取不到的话，就从 DB 中读取数据返回\"},\"4106\":{\"t\":\"再把数据放到 cache 中。\"},\"4107\":{\"h\":\"32.职业规划？\",\"a\":\"_32-职业规划\"},\"4108\":{\"t\":\"成为一名软件架构师：\"},\"4109\":{\"t\":\"我计划不断深入学习关键技术。密切关注新兴技术趋势，包括人工智能和大数据处理。积累更多的项目经验。提高我的团队协作和领导技能，以便有效地传达架构决策和理念。\"},\"4110\":{\"h\":\"33.学习方式？\",\"a\":\"_33-学习方式\"},\"4111\":{\"h\":\"浪潮面经\"},\"4112\":{\"h\":\"自我介绍\",\"a\":\"自我介绍\"},\"4113\":{\"t\":\"面试官，您好。我叫杨路恒，今年24岁，山东济宁人，就读于陕西师范大学，今年研三，软件工程专业，研究方向为知识图谱。大学时间到研究生期间的主要技术栈是Java 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。另外最近一段在联想实习的经历，主要在是对大模型进行开发应用。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的访问量达到了44W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"4114\":{\"h\":\"1.mysql主键数值和字符的差别\",\"a\":\"_1-mysql主键数值和字符的差别\"},\"4115\":{\"t\":\"主键使用数值类型时通常会比使用字符类型更快。这是因为数值类型是直接储存在计算机内存中的，而字符类型需要转换为二进制码储存。在数据量较大时，这一差别会变得尤为明显。\"},\"4116\":{\"t\":\"此外，当主键使用数值类型时，排序和索引操作也会变得更加高效。排序时直接比较数值大小即可，而使用字符类型则需要进行字母表排序。索引操作时，数值类型同样是直接进行计算的，而字符类型则需要进行转换。\"},\"4117\":{\"t\":\"相反，如果使用字符类型为主键，就需要通过一些优化手段来提高查询效率。例如，在创建主键时添加前缀，这样能够缩小比较范围，从而提高效率。\"},\"4118\":{\"t\":\"综上所述，虽然MySQL中主键可以使用数值类型和字符类型，但为了提高数据检索和查询的效率，建议尽量使用数值类型作为主键。\"},\"4119\":{\"h\":\"2.实习工作内容，遇到什么技术难点\",\"a\":\"_2-实习工作内容-遇到什么技术难点\"},\"4120\":{\"t\":\"负责标书趋势分析平台和对话机器人测试平台的开发，都是内部平台。首先是mentor让写了用Java+kafka+线程池做一个爬虫demo，搭个框架出来。然后开始写python，学习数据分析的新技术以及前端技术。\"},\"4121\":{\"t\":\"遇到的技术难点就是Kafka如何保证消息的可靠性，然后还有python的生成器如何使用，以及新的前端技术。\"},\"4122\":{\"h\":\"3.spring boot平时用什么注解\",\"a\":\"_3-spring-boot平时用什么注解\"},\"4123\":{\"t\":\"@RestController：复合注解，@RestController注解= @ResponseBody+@Controller,效果是将方法返回的对象直接在浏览器上展示成json格式。 @RequestMapping()：将请求映射到控制器的处理方法上,提供路由信息，负责URL到Controller中的具体函数的映射。 @PostMapping()：将post请求映射到特定处理程序的方法注解。 @RequestBody：主要用来接收前端传递给后端的数据。 @GetMapping()：将get请求映射到特定处理程序的方法注解。 @PathVariable：获取url中的数据 \"},\"4124\":{\"h\":\"4.map，set 哪些是有序的\",\"a\":\"_4-map-set-哪些是有序的\"},\"4125\":{\"t\":\"TreeMap是有序的（二叉树），LinkedHashMap是有序的，hashMap用来保证存储的值键值对，list用来保证插入的顺序和存储的顺序一致。\"},\"4126\":{\"t\":\"TreeSet是有序的（二叉树），LinkedHashSet是有序的，其中haseSet用来保证数据唯一，List用来保证插入的顺序和存储的顺序一致。\"},\"4127\":{\"h\":\"5.你投的是浪潮信息，对这个公司有了解吗（浪潮有很多子公司）\",\"a\":\"_5-你投的是浪潮信息-对这个公司有了解吗-浪潮有很多子公司\"},\"4128\":{\"t\":\"印象中浪潮就是做电脑的，是一家做云计算、大数据的企业，旗下拥有浪潮信息、浪潮软件和浪潮国际三家上市公司。\"},\"4129\":{\"h\":\"6.spring中bean的生命周期\",\"a\":\"_6-spring中bean的生命周期\"},\"4130\":{\"t\":\"1.实例化Bean对象\"},\"4131\":{\"t\":\"2.设置Bean属性\"},\"4132\":{\"t\":\"3.如果通过各种Aware接口声明了依赖关系，则会注入Bean对容器基础设施层面的依赖。Aware接口集体包括BeanNameAware、BeanFactoryAware和ApplicationContextAware，分别注入Bean ID、BeanFactory和ApplicationContext\"},\"4133\":{\"t\":\"4.如果实现了BeanPostProcesser，调用BeanPostProcesser的前置初始化方法postProcessBeforeInitialization\"},\"4134\":{\"t\":\"5.如果实现了initializingBean接口，则会调用afterPropertiesSet方法\"},\"4135\":{\"t\":\"6.调用Bean自身定义的init方法\"},\"4136\":{\"t\":\"7.调用BeanPostProcesser的后置方法postProcessAfterInitializaiton\"},\"4137\":{\"t\":\"8.容器关闭前调用DisposableBean的destroy方法和自身的destroy方法\"},\"4138\":{\"h\":\"7.spring ioc了解过吗\",\"a\":\"_7-spring-ioc了解过吗\"},\"4139\":{\"t\":\"IOC： 控制反转是一种设计思想，而不是一个具体的技术实现。\"},\"4140\":{\"h\":\"8.nginx怎么样做到同一个用户发的请求可以命中同一个服务器\",\"a\":\"_8-nginx怎么样做到同一个用户发的请求可以命中同一个服务器\"},\"4141\":{\"t\":\"upstream 指令块中增加了 ip_hash 指令。该指令就是告诉 nginx 服务器，同一个 IP 地址客户端发送的请求都将分发到同一个 Tomcat 服务器进行处理。\"},\"4142\":{\"h\":\"9.缓存击穿，缓存雪崩，缓存穿透的先后顺序是怎么样的，各自对应的解决策略是什么\",\"a\":\"_9-缓存击穿-缓存雪崩-缓存穿透的先后顺序是怎么样的-各自对应的解决策略是什么\"},\"4143\":{\"t\":\"缓存雪崩\"},\"4144\":{\"t\":\"在使用缓存时，通常会对缓存设置过期时间，一方面目的是保持缓存与数据库数据的一致性，另一方面是减少冷缓存占用过多的内存空间。\"},\"4145\":{\"t\":\"但当缓存中大量热点缓存采用了相同的实效时间，就会导致缓存在某一个时刻同时实效，请求全部转发到数据库，从而导致数据库压力骤增，甚至宕机。从而形成一系列的连锁反应，造成系统崩溃等情况，这就是缓存雪崩（Cache Avalanche）。\"},\"4146\":{\"t\":\"解决方案是将key的过期时间后面加上一个随机数（比如随机1-5分钟），让key均匀的失效。\"},\"4147\":{\"t\":\"缓存击穿\"},\"4148\":{\"t\":\"缓存雪崩是指只大量热点key同时失效的情况，如果是单个热点key，在不停的扛着大并发，在这个key失效的瞬间，持续的大并发请求就会击破缓存，直接请求到数据库，好像蛮力击穿一样。这种情况就是缓存击穿（Cache Breakdown）。\"},\"4149\":{\"t\":\"从定义上可以看出，缓存击穿和缓存雪崩很类似，只不过是缓存击穿是一个热点key失效，而缓存雪崩是大量热点key失效。因此，可以将缓存击穿看作是缓存雪崩的一个子集。\"},\"4150\":{\"t\":\"解决方案：热点数据不设置过期时间。\"},\"4151\":{\"t\":\"缓存穿透（cache penetration）是用户访问的数据既不在缓存当中，也不在数据库中。出于容错的考虑，如果从底层数据库查询不到数据，则不写入缓存。这就导致每次请求都会到底层数据库进行查询，缓存也失去了意义。当高并发或有人利用不存在的Key频繁攻击时，数据库的压力骤增，甚至崩溃，这就是缓存穿透问题。\"},\"4152\":{\"t\":\"方案：缓存空值（null）或默认值\"},\"4153\":{\"t\":\"分析业务请求，如果是正常业务请求时发生缓存穿透现象，可针对相应的业务数据，在数据库查询不存在时，将其缓存为空值（null）或默认值。需要注意的是，针对空值的缓存失效时间不宜过长，一般设置为5分钟之内。当数据库被写入或更新该key的新数据时，缓存必须同时被刷新，避免数据不一致。\"},\"4154\":{\"h\":\"10.jvm内存了解过吗，简单说一下\",\"a\":\"_10-jvm内存了解过吗-简单说一下\"},\"4155\":{\"t\":\"jvm内存。\"},\"4156\":{\"h\":\"11.int和Integer对象分别放在jvm哪里\",\"a\":\"_11-int和integer对象分别放在jvm哪里\"},\"4157\":{\"t\":\"int放在jvm栈，Integer对象放在jvm堆。\"},\"4158\":{\"h\":\"12.int 128和Integer128相等吗\",\"a\":\"_12-int-128和integer128相等吗\"},\"4159\":{\"t\":\"相等。\"},\"4160\":{\"h\":\"13.mybatis分页方式\",\"a\":\"_13-mybatis分页方式\"},\"4161\":{\"t\":\"img\"},\"4162\":{\"h\":\"14.redis的主要应用\",\"a\":\"_14-redis的主要应用\"},\"4163\":{\"t\":\"缓存、分布式锁、消息队列、排行榜\"},\"4164\":{\"h\":\"15.数据库中的左连接和右连接\",\"a\":\"_15-数据库中的左连接和右连接\"},\"4165\":{\"t\":\"MySQL的左连接和右连接：左连接是先查询出左表（即以左表为主），然后查询右表，右表中满足条件的显示出来，不满足条件的显示NULL。右连接就是先把右表中所有记录都查询出来，然后左表满足条件的显示，不满足显示NULL。\"},\"4166\":{\"h\":\"16.索引分类\",\"a\":\"_16-索引分类\"},\"4167\":{\"t\":\"从索引字段特性分类：\"},\"4168\":{\"t\":\"主键索引\"},\"4169\":{\"t\":\"唯一索引\"},\"4170\":{\"t\":\"普通索引\"},\"4171\":{\"t\":\"前缀索引\"},\"4172\":{\"t\":\"从索引字段个数分类：\"},\"4173\":{\"t\":\"单列索引\"},\"4174\":{\"t\":\"联合索引（复合索引）\"},\"4175\":{\"h\":\"17.如何解决死锁\",\"a\":\"_17-如何解决死锁\"},\"4176\":{\"t\":\"破坏四个条件。\"},\"4177\":{\"h\":\"18.常见的设计模式（工厂模式的原理）\",\"a\":\"_18-常见的设计模式-工厂模式的原理\"},\"4178\":{\"t\":\"工厂模式提供了一种将对象的实例化过程封装在工厂类中的方式。通过使用工厂模式，可以将对象的创建与使用代码分离，提供一种统一的接口来创建不同类型的对象。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。\"},\"4179\":{\"h\":\"19.spring的aop\",\"a\":\"_19-spring的aop\"},\"4180\":{\"t\":\"一般称为面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。\"},\"4181\":{\"t\":\"SpringAop的工作过程：\"},\"4182\":{\"t\":\"1.Spring 创建IOC容器 先扫扫描包中的所有由@Service 和@Component修饰的类，并为它们创建对象，放在Spring IOC容器中。 2.寻找切面类 Spring在创建完对象后，开始寻找由 @Aspect 修饰的切面类并获取切面类中的所有方法。 3.寻找切面类的方法中带有表达式的部分 接下来，Spring找到所有由合法表达式修饰的方法 4.查找有相应方法的类 随后，Spring检查它所扫描到的所有类，并将上一步中找到的方法与所有类进行对照，找出有这个（些）方法的类（这个类就是被代理类）。 5.创建动态对象 最后，Spring根据上一步找到的被代理类以及切面类创建动态类的动态对象并放入Spring IOC容器中。\"},\"4183\":{\"h\":\"20.注册中心用什么做的，nacos和gateway怎么用的\",\"a\":\"_20-注册中心用什么做的-nacos和gateway怎么用的\"},\"4184\":{\"t\":\"nacos做，gateway实现鉴权。\"},\"4185\":{\"h\":\"21.项目中有做过压测吗，平时会看那些指标\",\"a\":\"_21-项目中有做过压测吗-平时会看那些指标\"},\"4186\":{\"t\":\"JeMeter。\"},\"4187\":{\"t\":\"并发用户数 （The Number Of Concurrent Users）：在同一时刻与服务器进行了交互的在线用户数量。\"},\"4188\":{\"t\":\"吞吐量 （Total Throughput）：单次业务中或一段时间内，客户端与服务器端进行的数据交互总量。\"},\"4189\":{\"h\":\"22.==和equals区别\",\"a\":\"_22-和equals区别\"},\"4190\":{\"t\":\"“==”是运算符，如果是基本数据类型，则比较存储的值；如果是引用数据类型，则比较所指向对象的地址值。\"},\"4191\":{\"t\":\"equals是Object的方法，比较的是所指向的对象的地址值，一般情况下，重写之后比较的是对象的值。\"},\"4192\":{\"h\":\"23.多线程共享变量用什么实现\",\"a\":\"_23-多线程共享变量用什么实现\"},\"4193\":{\"t\":\"使用volatile、synchronized。\"},\"4194\":{\"h\":\"24.JVM双亲委派机制\",\"a\":\"_24-jvm双亲委派机制\"},\"4195\":{\"t\":\"（1）当加载一个类时，先判断此类是否已经被加载，如果类已经被加载则返回；\"},\"4196\":{\"t\":\"（2）如果类没有被加载，则先委托父类加载（父类加载时会判断该类有没有被自己加载过），如果父类加载过则返回；如果没被加载过则继续向上委托；\"},\"4197\":{\"t\":\"（3）如果一直委托都无法加载，子类加载器才会尝试自己加载。\"},\"4198\":{\"t\":\"打破双亲委派需要重写findClass()方法。\"},\"4199\":{\"h\":\"25.HashMap多个key相同会怎么样\",\"a\":\"_25-hashmap多个key相同会怎么样\"},\"4200\":{\"t\":\"在HashMap中，相同key的value会被覆盖，即最后一次put进去的value会成为该key对应的值。\"},\"4201\":{\"h\":\"26.MySQL回表、索引失效\",\"a\":\"_26-mysql回表、索引失效\"},\"4202\":{\"t\":\"指的是在进行索引查询时，首先通过索引定位到对应页，然后再根据行的物理地址找到所需的数据行。换句话说，回表是指根据索引查询到的主键值再去访问主键索引，从而获取完整的数据记录。\"},\"4203\":{\"t\":\"查询条件中有or,即使有部分条件带索引也会失效。\"},\"4204\":{\"t\":\"like查询是以%开头。\"},\"4205\":{\"t\":\"索引列上参与计算会导致索引失效。\"},\"4206\":{\"t\":\"违背最左匹配原则。\"},\"4207\":{\"h\":\"科大讯飞面经\"},\"4208\":{\"h\":\"自我介绍\",\"a\":\"自我介绍\"},\"4209\":{\"t\":\"面试官，您好。我叫杨路恒，今年24岁，山东济宁人，就读于陕西师范大学，今年研三，软件工程专业，研究方向为知识图谱。大学时间到研究生期间的主要技术栈是Java 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。另外最近一段在联想实习的经历，主要在是对大模型进行开发应用。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的访问量达到了44W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"4210\":{\"h\":\"1.项目规模，主要负责啥，有没有写设计文档，怎么进行接口设计？\",\"a\":\"_1-项目规模-主要负责啥-有没有写设计文档-怎么进行接口设计\"},\"4211\":{\"h\":\"2.对前端了解吗？有自己写过代码吗？\",\"a\":\"_2-对前端了解吗-有自己写过代码吗\"},\"4212\":{\"h\":\"3.对JVM的理解（对堆的过程进行扩展）\",\"a\":\"_3-对jvm的理解-对堆的过程进行扩展\"},\"4213\":{\"h\":\"4.项目里有使用多线程并发操作吗？\",\"a\":\"_4-项目里有使用多线程并发操作吗\"},\"4214\":{\"h\":\"5.线程池的过程\",\"a\":\"_5-线程池的过程\"},\"4215\":{\"h\":\"6.TCP与UDP的了解，一般在什么场景下使用？\",\"a\":\"_6-tcp与udp的了解-一般在什么场景下使用\"},\"4216\":{\"h\":\"7.有一个服务中心，可能有上百万的连接，应该怎么设计，来能知晓每一个连接的主机是存在还是下线\",\"a\":\"_7-有一个服务中心-可能有上百万的连接-应该怎么设计-来能知晓每一个连接的主机是存在还是下线\"},\"4217\":{\"t\":\"使用心跳机制 - 每个连接的客户端定期向服务端发送心跳包表示仍然在线,服务端如果在一定时间内没有收到心跳包,则认为该连接已断开。可以设置不同的心跳间隔时间用于区分不同类型的连接。\"},\"4218\":{\"h\":\"8.有一台部署的服务器，之前一直是正常使用，突然有一天发现一个网页要10s左右才能打开，应该怎么去排查？可能有哪些问题\",\"a\":\"_8-有一台部署的服务器-之前一直是正常使用-突然有一天发现一个网页要10s左右才能打开-应该怎么去排查-可能有哪些问题\"},\"4219\":{\"t\":\"CPU使用率高 - 登录服务器top命令查看CPU使用率,是否有异常进程占用CPU。优化或隔离高CPU进程。\"},\"4220\":{\"t\":\"内存利用率高 - free命令查看内存使用情况,是否存在内存泄漏或溢出。\"},\"4221\":{\"h\":\"9.Mysql了解吧，可以行锁吗？行锁是怎么做的？\",\"a\":\"_9-mysql了解吧-可以行锁吗-行锁是怎么做的\"},\"4222\":{\"t\":\"MySQL InnoDB存储引擎是通过索引加锁的方式实现行级锁的。\"},\"4223\":{\"t\":\"InnoDB的行锁是在索引上实现的,不是直接在数据行上加锁。\"},\"4224\":{\"t\":\"对主键索引的加锁等同于对数据行的加锁。因此主键索引非常重要。\"},\"4225\":{\"t\":\"InnoDB行锁有共享锁和排他锁两种模式。\"},\"4226\":{\"h\":\"10.数据库的高级调优有做过嘛？除了explain\",\"a\":\"_10-数据库的高级调优有做过嘛-除了explain\"},\"4227\":{\"t\":\"show processlist\"},\"4228\":{\"h\":\"11.一条sql的执行流程\",\"a\":\"_11-一条sql的执行流程\"},\"4229\":{\"t\":\"image-20221011144626201\"},\"4230\":{\"h\":\"12.我们知道SpringBoot启动的时候是有一个@SpringBootApplication注解的，不用告诉我他包含了哪些注解内容，他在启动的时候做了什么，启动的时候它打的那些日志，是具体做了什么？有了解过吗？\",\"a\":\"_12-我们知道springboot启动的时候是有一个-springbootapplication注解的-不用告诉我他包含了哪些注解内容-他在启动的时候做了什么-启动的时候它打的那些日志-是具体做了什么-有了解过吗\"},\"4231\":{\"t\":\"当SpringBoot应用启动时,@SpringBootApplication注解起到核心作用,它触发了一系列自动配置的过程。从打印的启动日志可以看到主要做了以下工作:\"},\"4232\":{\"t\":\"加载META-INF/spring.factories中的自动配置类\"},\"4233\":{\"t\":\"这行日志表明SpringBoot读取了spring.factories配置文件,并加载了其中的自动配置类。这是SpringBoot实现自动配置的关键所在。\"},\"4234\":{\"t\":\"创建Web服务器工厂并进行自动配置\"},\"4235\":{\"t\":\"这行日志表示如果是Web应用,SpringBoot会创建嵌入式Web服务器工厂,比如Tomcat,并进行自动配置。\"},\"4236\":{\"t\":\"完成自动配置\"},\"4237\":{\"t\":\"这行日志最终标示自动配置完成,SpringBoot已经根据依赖的jar包和classpath对应用环境进行了自动配置。\"},\"4238\":{\"t\":\"启动completed\"},\"4239\":{\"t\":\"启动完成,表示SpringBoot启动过程结束,应用已启动并准备运行。\"},\"4240\":{\"h\":\"13.MySQL的事务隔离级别，会产生什么问题\",\"a\":\"_13-mysql的事务隔离级别-会产生什么问题\"},\"4241\":{\"t\":\"1.脏读\"},\"4242\":{\"t\":\"2.不可重复读\"},\"4243\":{\"t\":\"3.幻读\"},\"4244\":{\"h\":\"14.聚簇索引和非聚簇索引\",\"a\":\"_14-聚簇索引和非聚簇索引\"},\"4245\":{\"t\":\"数据存储方式不同\"},\"4246\":{\"t\":\"聚簇索引:索引项和数据行存储在一起,索引本身就是数据。索引项按照主键排序存储在表中。\"},\"4247\":{\"t\":\"非聚簇索引:索引项和数据行分开存储。索引项在索引中,数据行在表中。\"},\"4248\":{\"t\":\"Leaf节点不同\"},\"4249\":{\"t\":\"聚簇索引的叶子节点就是数据页面,包含了完整的数据记录。\"},\"4250\":{\"t\":\"非聚簇索引的叶子节点存储索引键值和行指针,指向具体的数据记录。\"},\"4251\":{\"h\":\"15.MVCC机制，解决什么问题\",\"a\":\"_15-mvcc机制-解决什么问题\"},\"4252\":{\"t\":\"解决可重复读隔离级别下幻读问题\"},\"4253\":{\"h\":\"16.索引失效的情况\",\"a\":\"_16-索引失效的情况\"},\"4254\":{\"t\":\"在索引列上做任何操作,会使索引失效,例如计算、函数、类型转换等\"},\"4255\":{\"t\":\"使用like查询以通配符开头\"},\"4256\":{\"h\":\"17.TCP/UDP区别\",\"a\":\"_17-tcp-udp区别\"},\"4257\":{\"t\":\"1.连接\"},\"4258\":{\"t\":\"TCP 是面向连接的传输层协议，传输数据前先要建立连接。\"},\"4259\":{\"t\":\"UDP 是不需要连接，即刻传输数据。\"},\"4260\":{\"t\":\"2. 服务对象\"},\"4261\":{\"t\":\"TCP 是一对一的两点服务，即一条连接只有两个端点。\"},\"4262\":{\"t\":\"UDP 支持一对一、一对多、多对多的交互通信\"},\"4263\":{\"t\":\"3. 可靠性\"},\"4264\":{\"t\":\"TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按序到达。\"},\"4265\":{\"t\":\"UDP 是尽最大努力交付，不保证可靠交付数据。\"},\"4266\":{\"h\":\"18.说几个基于TCP的协议\",\"a\":\"_18-说几个基于tcp的协议\"},\"4267\":{\"t\":\"Http、SSH\"},\"4268\":{\"h\":\"19.设计模式了解吗\",\"a\":\"_19-设计模式了解吗\"},\"4269\":{\"t\":\"单例模式、工厂模式\"},\"4270\":{\"h\":\"20.arraylist里存储person对象，对年龄排序怎么排\",\"a\":\"_20-arraylist里存储person对象-对年龄排序怎么排\"},\"4271\":{\"t\":\"使用Java的Collections.sort()结合Comparator来实现。具体步骤如下:\"},\"4272\":{\"t\":\"定义Person类,其中有属性name和age。\"},\"4273\":{\"t\":\"创建一个Person对象数组存入ArrayList中。\"},\"4274\":{\"t\":\"实现一个 Comparator,重写compare()方法,在方法中比较两个Person对象的age大小。\"},\"4275\":{\"t\":\"调用Collections.sort()方法,传入ArrayList对象及自定义的Comparator进行排序。\"},\"4276\":{\"h\":\"面试\"},\"4277\":{\"h\":\"实习\",\"a\":\"实习\"},\"4278\":{\"h\":\"一、中科全安\",\"a\":\"一、中科全安\"},\"4279\":{\"h\":\"一面：HR面，态度算好的（5分钟）\",\"a\":\"一面-hr面-态度算好的-5分钟\"},\"4280\":{\"t\":\"1.介绍公司\"},\"4281\":{\"t\":\"2.问啥时候能来实习\"},\"4282\":{\"t\":\"3.问你能接受加班吗\"},\"4283\":{\"t\":\"4.问你的期望薪资多少\"},\"4284\":{\"t\":\"5.问我想听听你对加班什么看法\"},\"4285\":{\"t\":\"6.最后让明天面试，我说不行，能最晚啥时候，她说最晚周五下午，电话面试\"},\"4286\":{\"h\":\"二面：面试官狗叫（15分钟 ）\",\"a\":\"二面-面试官狗叫-15分钟\"},\"4287\":{\"t\":\"面试官的态度极其恶心，什么垃圾玩意，老子是来面试的，不是听狗叫的，就算老子啥都不会也不去你这个垃圾公司。\"},\"4288\":{\"t\":\"1.自我介绍，直接打断说只介绍自己会的，项目中的技术栈\"},\"4289\":{\"t\":\"2.问我熟悉哪些框架，我说Spring、Mysql，其他都是了解，熟悉的是Java基础和Mysql，他就非得问SpringBoot，离谱\"},\"4290\":{\"t\":\"3.问Kafka的分区、主题了解吗，我就是了解，然后他也说了你只是了解\"},\"4291\":{\"t\":\"4.问ES了解吗（我只是了解他是干啥的，其它都是API）\"},\"4292\":{\"t\":\"5.问SpringBoot异常怎么处理（这个紧张忘了，只是说在一个包里要继承一个异常的接口）\"},\"4293\":{\"t\":\"6.问SpringBoot的核心配置文件以及它们的区别\"},\"4294\":{\"t\":\"7.问SpringBoot的起步依赖starter有哪些以及作用（他说你了解的很少，我都说了了解Mysql、Spring，你他妈的非得问）\"},\"4295\":{\"t\":\"8.问SpringBoot 中的监视器是什么（我说不了解）\"},\"4296\":{\"t\":\"9.问Swagger用过么、它用来做什么\"},\"4297\":{\"t\":\"10.问什么是 WebSockets（我说只了解它是用来作为即时通讯的协议）\"},\"4298\":{\"t\":\"11.问什么是 FreeMarker 模板（这个离谱，说完他是干啥的以及插值表达式，他问还有呢？他妈的）\"},\"4299\":{\"t\":\"12.问C/S 、B/S模式\"},\"4300\":{\"t\":\"13.问String、StringBuilder、StringBuffer 的区别\"},\"4301\":{\"t\":\"14.问了MySQL的存储引擎\"},\"4302\":{\"t\":\"15.问了 InnoDB 和 MyISAM 的比较\"},\"4303\":{\"t\":\"16.问了建立索引的原则\"},\"4304\":{\"t\":\"17.问了三大范式\"},\"4305\":{\"t\":\"18.问了Jdbc的防止sql注入（我说不了解）\"},\"4306\":{\"t\":\"19.反问（我说实习生的日常工作安排是什么，他妈的开始狗叫，想打他）\"},\"4307\":{\"t\":\"20.最后问我啥时能来实习（老子不去）\"},\"4308\":{\"h\":\"二、联想\",\"a\":\"二、联想\"},\"4309\":{\"h\":\"一面：（16分钟）\",\"a\":\"一面-16分钟\"},\"4310\":{\"t\":\"1.说一下红黑树（吧啦吧啦，讲了下红黑树的特性、又扯到HashMap底层用到了红黑树、突然说到MySQLB+树用到了红黑树）\"},\"4311\":{\"t\":\"2.讲一下线程池（这个熟，线程池的7大参数以及具体用法）\"},\"4312\":{\"t\":\"3.讲一下为什么用线程池（两点原因）\"},\"4313\":{\"t\":\"4.讲一下线程池参数MaxSize满了你会怎么做（我说实现自定义处理策略，可以选择移除等待队列中的最不常用的线程）\"},\"4314\":{\"t\":\"5.看我熟悉Python（这里没听清发音，重复确认了好几遍哈哈哈哈哈哈哈），问我生成器用过没（我说是生成随机数吗，面试官说不是，是，还耐心给我解答了是用来循环遍历的）\"},\"4315\":{\"t\":\"5.项目拷打环节\"},\"4316\":{\"t\":\"1）讲一下你的项目经验（从项目的整体架构到具体功能实现细节都说了）\"},\"4317\":{\"t\":\"2）我说了做的一些优化（存储到阿里云OSS）\"},\"4318\":{\"t\":\"3）突然电话断了，在那我俩喂喂喂了好几声，面试官又给我打了过来，问我同步和异步怎么实现的（加@Async注解）\"},\"4319\":{\"t\":\"4）问异步调用后，做了些什么（第三方接口审核完后传来一个statusCode200，表示审核成功存储到数据库）\"},\"4320\":{\"t\":\"6.反问环节\"},\"4321\":{\"t\":\"1）实习生的日常工作安排（面试官说了早上9：30上班，下午6：30下班，八小时工作制，中午休息一小时）\"},\"4322\":{\"t\":\"2）技术栈是什么（面试官说这有Java和Python，你来就是Java）\"},\"4323\":{\"h\":\"三、中国邮政储蓄银行\",\"a\":\"三、中国邮政储蓄银行\"},\"4324\":{\"h\":\"一面：结构化面试+技术面（20分钟，五个面试官）\",\"a\":\"一面-结构化面试-技术面-20分钟-五个面试官\"},\"4325\":{\"t\":\"1.先做一个两分钟以内的自我介绍（对邮储的看法，对未来工作的看法）\"},\"4326\":{\"t\":\"2.对工作地点的看法\"},\"4327\":{\"t\":\"3.有没有参加过团体活动\"},\"4328\":{\"t\":\"4.数学建模比赛中遇到的最大困难\"},\"4329\":{\"t\":\"5.开始技术面试了，面试官说看你简历都是Java相关，讲一下Spring Cloud你用过的组件\"},\"4330\":{\"t\":\"6.ConcurrentHashMap为什么用红黑树\"},\"4331\":{\"t\":\"7.看你项目中用到了网关，是怎么实现的\"},\"4332\":{\"t\":\"8.都说CAS要比synchronized好，但是CAS也有自己的问题，你能说一下有哪些问题吗\"},\"4333\":{\"t\":\"9.另一个面试官问看你简历有高并发系统的东西，你有实际的项目经验吗（这个我说就是了解，实际项目是自学的，实际项目经验都是人工智能相关的）\"},\"4334\":{\"t\":\"10.最后女的HR问看你成绩这么好，没有保研吗\"},\"4335\":{\"t\":\"11.讲一下研究生的论文成果\"},\"4336\":{\"t\":\"12.研究生的专业成绩排名，有获得过奖学金吗\"},\"4337\":{\"t\":\"13.最后问有offer吗，方便说一下是哪个公司吗\"},\"4338\":{\"t\":\"另：\"},\"4339\":{\"t\":\"1.对工作地点的看法\"},\"4340\":{\"t\":\"2.CPU达到100%的时候你如何排查问题\"},\"4341\":{\"t\":\"3.新生代和老年代数据是如何流动的\"},\"4342\":{\"t\":\"4.Linux如何给文件权限\"},\"4343\":{\"t\":\"5.想从实习中收获什么\"},\"4344\":{\"t\":\"6.看你是院研副部长，如果负责的活动和实验室科研冲突了怎么平衡\"},\"4345\":{\"t\":\"7.你平常也这样扎头发吗\"},\"4346\":{\"h\":\"秋招\",\"a\":\"秋招\"},\"4347\":{\"h\":\"一、海尔（提前批一面11min：经理技术面+HR面）：挂\",\"a\":\"一、海尔-提前批一面11min-经理技术面-hr面-挂\"},\"4348\":{\"t\":\"1.自我介绍\"},\"4349\":{\"t\":\"2.就关于应聘的软件开发岗位谈一下实际的开发\"},\"4350\":{\"t\":\"3.对于取得的最终效果讲一下\"},\"4351\":{\"t\":\"4.看了你去年做了一个博客社区的项目（？？？去年，博客社区？这个经理不太专业呀），你是用MD5做的，那么MD5它能够被破解吗（我说算力够的话能够被破解，对面不满意？？？）\"},\"4352\":{\"t\":\"5.那你熟悉这个加密算法吗？它属于对称加密还是非对称加密（凉了，直接说不熟悉）\"},\"4353\":{\"t\":\"6.我看到你用到了ThreadLocal，那你能简单说下ThreadLocal的原理吗？\"},\"4354\":{\"t\":\"7.那你什么时间把这个对象删除的呢？我看你为了防止内存泄漏，那你怎么判断它使用完了呢？\"},\"4355\":{\"t\":\"8.Token失效谁判断的？\"},\"4356\":{\"t\":\"9.说我python写得多，而他们用Java比较多，所以问我一个逻辑题：甲乙两个人，有2-6五张牌，甲乙各抽一张，你怎么判断谁大谁小？（离谱，我简历上都是Java，这是不想要我刷KPI呢）\"},\"4357\":{\"h\":\"二、浪潮（20min：技术面+HR面）9.20\",\"a\":\"二、浪潮-20min-技术面-hr面-9-20\"},\"4358\":{\"h\":\"HR面：\",\"a\":\"hr面\"},\"4359\":{\"t\":\"1.自我介绍\"},\"4360\":{\"t\":\"2.你家是山东的，是考研到这个学校的吗？\"},\"4361\":{\"t\":\"3.你对工作地点的选择，为什么？如果没有浪潮，你会选哪个地点？\"},\"4362\":{\"t\":\"4.你学习挺好研究生排名高\"},\"4363\":{\"t\":\"5.你还找了哪些公司？\"},\"4364\":{\"t\":\"6.其他地方的工作不考虑吗？\"},\"4365\":{\"t\":\"7.在西安你找了哪些公司？\"},\"4366\":{\"t\":\"8.你在联想实习是在天津实现吗？在北京没有考虑吗？\"},\"4367\":{\"t\":\"9.看你填了全国可长期出差，你有女朋友吗？\"},\"4368\":{\"t\":\"10.你想在研究生期间的地方找工作？\"},\"4369\":{\"h\":\"技术面：\",\"a\":\"技术面\"},\"4370\":{\"t\":\"1.看你写了博客，比的博客都是关于什么内容的？\"},\"4371\":{\"t\":\"2.你实习是在AI组，后面有没有转软件开发的可能？\"},\"4372\":{\"t\":\"3.你有没有做过项目？\"},\"4373\":{\"t\":\"4.听到你用了ThreadLocal，它是干啥的，咋用的，哪些变量用了？\"},\"4374\":{\"t\":\"5.看你熟悉线程池，你讲一下线程池？\"},\"4375\":{\"t\":\"6.线程池用了ThreadLocal，如何不让多个线程使用？\"},\"4376\":{\"t\":\"7.熟悉Mysql吗，说一下四大隔离级别？\"},\"4377\":{\"t\":\"8.你最喜欢用哪个隔离级别？\"},\"4378\":{\"t\":\"9.普通的select语句加不加锁？\"},\"4379\":{\"t\":\"10.你说一下什么是可重复读？\"},\"4380\":{\"h\":\"加面：20min 10.8\",\"a\":\"加面-20min-10-8\"},\"4381\":{\"t\":\"1.咱们就不问简单的技术了，看你简历上写的技术点挺多的，直接专业场景面试\"},\"4382\":{\"t\":\"2.你说一下List、Set、Map的区别？\"},\"4383\":{\"t\":\"3.来个场景题，List里面存的是学生类，那么怎么按照学生成绩排序，JDK1.7以前怎么用？\"},\"4384\":{\"t\":\"4.来个数据库的场景题，你说一下怎么查询某个学科下某个班级的成绩前五名？\"},\"4385\":{\"t\":\"5.数据库你都用过哪些？\"},\"4386\":{\"t\":\"6.你说一下单例模式和多例模式的区别？\"},\"4387\":{\"t\":\"7.你了解观察者模式模式吗？（不了解，没有使用过）\"},\"4388\":{\"t\":\"8.你了解算法吗？（我说我做的深度学习的算法，面试官说我也不会深度学习，相视一笑）\"},\"4389\":{\"t\":\"9.你说一下快速排序算法的思想？\"},\"4390\":{\"t\":\"10.你讲一下用户页面发起一个请求到调用数据库返回数据的流程，用到了哪些技术，越详细越好？\"},\"4391\":{\"t\":\"11.你熟悉linux吗？你说一下怎么查看文件？\"},\"4392\":{\"t\":\"12.来个场景题，现在有5个文件，怎么找到自己想要的内容（我说了grep，然后准备说怎么写命令，面试官说不用说了，剩下的百度就行）\"},\"4393\":{\"t\":\"13.你有什么想问我的吗？（我问我现在是调到了哪个部门？然后面试官说现在是国资委服务部门，需要出差。然后我问主要的技术栈和业务是啥，面试官说主要是Java，现在准备做大模型。）\"},\"4394\":{\"t\":\"14.面试官说你啥时候可以来实习，我说得到12月份，现在得写毕业论文。面试官说你可以来实习体验一下公司氛围，咱俩加了微信，你来的时候就微信聊。\"},\"4395\":{\"h\":\"三、科大讯飞（40min：技术面）9.22\",\"a\":\"三、科大讯飞-40min-技术面-9-22\"},\"4396\":{\"h\":\"技术一面：\",\"a\":\"技术一面\"},\"4397\":{\"t\":\"1.自我介绍\"},\"4398\":{\"t\":\"2.面试官说我问一下基础知识，你说一下抽象类和接口的区别？\"},\"4399\":{\"t\":\"3.你了解设计模式吗？\"},\"4400\":{\"t\":\"4.你了解代理模式吗？\"},\"4401\":{\"t\":\"5.你了解垃圾回收吗？\"},\"4402\":{\"t\":\"6.你知道什么时候进行young gc和full gc吗？（这个回答的full gc）\"},\"4403\":{\"t\":\"7.你有没有JVM调优或者CPU、内存调优经验，你是怎么调的？\"},\"4404\":{\"t\":\"8.我问一下题外话，你的发型是做的还是睡觉睡的？\"},\"4405\":{\"t\":\"9.没有别的意思，看你面试状态很好，你面了几家了？\"},\"4406\":{\"t\":\"10.你说了volitle，发音不准确没关系，我问这个怕你听不懂所以一开始没问，那你说一下和syschronized的区别？\"},\"4407\":{\"t\":\"11.你用过哪些中间件？\"},\"4408\":{\"t\":\"12.说一下浅拷贝和深拷贝？\"},\"4409\":{\"t\":\"13.你用过索引没有，为了加快检索，那么为什么能加快检索？\"},\"4410\":{\"t\":\"14.你刚才提到了消息中间件kafka，你说一下它？\"},\"4411\":{\"t\":\"15.你用过es没？（我只是说我照着api调的，面试官说没关系）\"},\"4412\":{\"t\":\"16.有一个进程PID，你怎么找到里面的线程？\"},\"4413\":{\"t\":\"17.你是怎么查看堆栈信息，假如有一万行的堆栈信息，你怎么查看？（这个我说一页一页的看，感觉不行问面试官咋看，面试官说jstack下载下来然后用专业的工具看，你不会没关系）\"},\"4414\":{\"t\":\"18.基础问完了，那么我们现在问一下，你用过哪些spring的注解？\"},\"4415\":{\"t\":\"19.spring里面重要的ioc控制反转和面向切面编程，你来给我讲一下面相切面编程？\"},\"4416\":{\"t\":\"20.你说一下spring boot启动的流程？\"},\"4417\":{\"t\":\"21.好了，专业知识问完了，咱们接下来聊一聊非专业的问题，看你是在联想实习，你怎么想到跑这么远？来回回学校不麻烦吗？（我说我科研做完了，就光写大论文了）\"},\"4418\":{\"t\":\"22.你的大论文是关于什么的？\"},\"4419\":{\"t\":\"23.你给我说一下你在公司里做的？\"},\"4420\":{\"t\":\"24.你调用了哪些大模型？\"},\"4421\":{\"t\":\"25.你在公司里写了多少行代码，你大概估计一下？（我说差不多上千行，我也记不清了，面试官说我问你这个问题就是想看你是偏技术调研的还是偏代码的，看来代码写的挺多的）\"},\"4422\":{\"t\":\"26.你用过讯飞星火大模型吗？\"},\"4423\":{\"t\":\"27.你用的最多的是文生文还是文生图？（这地方吹了一下星火比其他三家的好用，我说用的最多的是写代码，面试官说大家都是写代码，我还没体验过阿里的，一直没审核通过，过段时间讯飞大模型会升级）\"},\"4424\":{\"t\":\"28.你现在有学习什么新技术吗？\"},\"4425\":{\"t\":\"29.你有什么想问我的？（我问了面试官您是做什么，面试官说我是ai研发，整个ai流程都做，你做的大模型是比较简单的，我们更上层的开发，你面试通过的话也是在我们这边。我问面试官讯飞的数据集有没有开源，面试官说讯飞的开源相比其他厂商做的很差，没有开源，包括讯飞的大模型也没有开源）\"},\"4426\":{\"h\":\"技术二面：30min 10.20\",\"a\":\"技术二面-30min-10-20\"},\"4427\":{\"t\":\"垃圾面试官，迟到二十多分钟，上来板着脸问我几个场景题，四个都不会还让写代码，垃圾面试官显得自己很牛逼，太倒霉碰见这样的垃圾面试官。\"},\"4428\":{\"t\":\"1.自我介绍\"},\"4429\":{\"t\":\"2.你的项目是自己做的吗？\"},\"4430\":{\"t\":\"3.你的项目并发数达到2w，有这么高吗？（我说用JMeter测试，开了2w个线程，通过率80%）\"},\"4431\":{\"t\":\"4.你的时延多少？（我说忘了，垃圾问我这简历上没有的）\"},\"4432\":{\"t\":\"5.你在联想实习过，你说一下爬虫的收获？\"},\"4433\":{\"t\":\"6.在上传文件是该如何构造请求报文？（我说我没有构造过，他还问，垃圾）\"},\"4434\":{\"t\":\"7.在下载文件时如何限制下载速率？（我不会，他还问，垃圾）\"},\"4435\":{\"t\":\"8.线上项目OOM了怎么定位？（我说没有这方面经验，他还问，垃圾）\"},\"4436\":{\"t\":\"9.线上项目卡顿有延迟如何找到哪地方的异常？（我说没有这方面经验，他还问，就说用JMeter测试接口，看哪个接口异常，就去看这个接口，他还问，垃圾）\"},\"4437\":{\"t\":\"10.他让手撕两个代码，单例模式和密码验证逻辑，太垃圾，正则表达式我不会，还让写，垃圾面试官\"},\"4438\":{\"t\":\"11.他说行了，开始kpi了，让我讲一下遇到困难怎么解决？然后又问现在有要完成的任务，需要别的组来完成，但是别的组没时间，你该怎么做？\"},\"4439\":{\"t\":\"12.反问他是写什么语言的，他随口一句啥都有，垃圾面试官\"},\"4440\":{\"h\":\"四、比亚迪（15min：HR面）10.19\",\"a\":\"四、比亚迪-15min-hr面-10-19\"},\"4441\":{\"t\":\"比亚迪一面线下hr面，好多人排队，本来10:30的等到十一点半，问题都记不太清。\"},\"4442\":{\"t\":\"1.面试官是个女性，上来跟她打招呼她听口音以为我是南方人呢\"},\"4443\":{\"t\":\"2.自我介绍\"},\"4444\":{\"t\":\"3.问我是不是数学好\"},\"4445\":{\"t\":\"4.对工作地点有什么意向\"},\"4446\":{\"t\":\"5.说一下对比亚迪的认识（这个正好前几天比亚迪宣讲会上听了，开始扯了比亚迪的起家，业务以及销量）\"},\"4447\":{\"t\":\"6.意向岗位是不是系统开发\"},\"4448\":{\"t\":\"7.选择客车还是小轿车进行自动驾驶开发\"},\"4449\":{\"h\":\"五、中邮消费金融（10min：技术面 + HR面，一个面试官，另一个刚进来又走了）10.31\",\"a\":\"五、中邮消费金融-10min-技术面-hr面-一个面试官-另一个刚进来又走了-10-31\"},\"4450\":{\"t\":\"1.自我介绍\"},\"4451\":{\"t\":\"2.我看你在联想做的是AI相关的，为什么考虑转开发？（我说需求少，面试官笑了）\"},\"4452\":{\"t\":\"3.你在联想没有转正的原因你觉得是什么？\"},\"4453\":{\"t\":\"4.你用过哪些Java的框架？\"},\"4454\":{\"t\":\"5.你用过SpringMVC吗？\"},\"4455\":{\"t\":\"6.你了解Spring的事务吗？\"},\"4456\":{\"t\":\"7.你了解事物传播行为吗？\"},\"4457\":{\"t\":\"8.你学习了哪些新技术？\"},\"4458\":{\"t\":\"9.你学习Spring CLoud的感受？\"},\"4459\":{\"t\":\"10.你学习技术的途径？\"},\"4460\":{\"t\":\"11.你未来的职业规划？\"},\"4461\":{\"h\":\"Spring Cloud\"},\"4462\":{\"h\":\"1.什么是Spring Cloud？\",\"a\":\"_1-什么是spring-cloud\"},\"4463\":{\"t\":\"Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。\"},\"4464\":{\"h\":\"2.微服务的概念\",\"a\":\"_2-微服务的概念\"},\"4465\":{\"t\":\"分布式，多个模块，每一个模块都是一个单独的系统。\"},\"4466\":{\"t\":\"以前所有的代码都放在同一个工程中、部署在同一个服务器、同一项目的不同模块不同功能互相抢占资源，微服务就是将工程根据不同的业务规则拆分成微服务，部署在不同的服务器上，服务之间相互调用，java中有的微服务有dubbo(只能用来做微服务)、springcloud( 提供了服务的发现、断路器等)。\"},\"4467\":{\"t\":\"微服务的特点：\"},\"4468\":{\"t\":\"按业务划分为一个独立运行的程序，即服务单元\"},\"4469\":{\"t\":\"服务之间通过HTTP协议相互通信\"},\"4470\":{\"t\":\"自动化部署\"},\"4471\":{\"t\":\"可以用不同的编程语言\"},\"4472\":{\"t\":\"可以用不同的存储技术\"},\"4473\":{\"t\":\"服务集中化管理\"},\"4474\":{\"t\":\"微服务是一个分布式系统\"},\"4475\":{\"t\":\"微服务的优势\"},\"4476\":{\"t\":\"将一个复杂的业务拆分为若干小的业务，将复杂的业务简单化，新人只需要了解他所接管的服务的代码，减少了新人的学习成本。\"},\"4477\":{\"t\":\"由于微服务是分布式服务，服务与服务之间没有任何耦合。微服务系统的微服务单元具有很强的横向拓展能力。\"},\"4478\":{\"t\":\"服务与服务之间采用HTTP网络通信协议来通信，单个服务内部高度耦合，服务与服务之间完全独立，无耦合。这使得微服务可以采用任何的开发语言和技术来实现，提高开发效率、降低开发成本。\"},\"4479\":{\"t\":\"微服务是按照业务进行拆分的，并有坚实的服务边界，若要重写某一业务代码，不需了解所有业务，重写简单。\"},\"4480\":{\"t\":\"微服务的每个服务单元是独立部署的，即独立运行在某个进程中，微服务的修改和部署对其他服务没有影响。\"},\"4481\":{\"t\":\"微服务在CAP理论中采用的AP架构，具有高可用分区容错特点。高可用主要体现在系统7x24不间断服务，他要求系统有大量的服务器集群，从而提高系统的负载能力。分区容错也使得系统更加健壮。\"},\"4482\":{\"t\":\"微服务的不足\"},\"4483\":{\"t\":\"微服务的复杂度：构建一个微服务比较复杂，服务与服务之间通过HTTP协议或其他消息传递机制通信，开发者要选出最佳的通信机制，并解决网络服务差时带来的风险。\"},\"4484\":{\"t\":\"分布式事物：将事物分成多阶段提交，如果一阶段某一节点失败仍会导致数据不正确。如果事物涉及的节点很多，某一节点的网络出现异常会导致整个事务处于阻塞状态，大大降低数据库的性能。\"},\"4485\":{\"t\":\"服务划分：将一个完整的系统拆分成很多个服务，是一件非常困难的事，因为这涉及了具体的业务场景\"},\"4486\":{\"t\":\"服务部署：最佳部署容器Docker\"},\"4487\":{\"h\":\"3.Spring Cloud的优缺点以及组件\",\"a\":\"_3-spring-cloud的优缺点以及组件\"},\"4488\":{\"t\":\"设计目标\"},\"4489\":{\"t\":\"协调各个微服务，简化分布式系统开发。\"},\"4490\":{\"t\":\"优缺点\"},\"4491\":{\"t\":\"微服务的框架那么多比如：dubbo、Kubernetes，为什么就要使用Spring Cloud的呢？\"},\"4492\":{\"t\":\"优点：\"},\"4493\":{\"t\":\"产出于Spring大家族，Spring在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善\"},\"4494\":{\"t\":\"组件丰富，功能齐全。Spring Cloud 为微服务架构提供了非常完整的支持。例如、配置管理、服务发现、断路器、微服务网关等；、\"},\"4495\":{\"t\":\"Spring Cloud 社区活跃度很高，教程很丰富，遇到问题很容易找到解决方案\"},\"4496\":{\"t\":\"服务拆分粒度更细，耦合度比较低，有利于资源重复利用，有利于提高开发效率\"},\"4497\":{\"t\":\"可以更精准的制定优化服务方案，提高系统的可维护性\"},\"4498\":{\"t\":\"减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发\"},\"4499\":{\"t\":\"微服务可以是跨平台的，可以用任何一种语言开发\"},\"4500\":{\"t\":\"适于互联网时代，产品迭代周期更短\"},\"4501\":{\"t\":\"缺点：\"},\"4502\":{\"t\":\"微服务过多，治理成本高，不利于维护系统\"},\"4503\":{\"t\":\"分布式系统开发的成本高（容错，分布式事务等）对团队挑战大\"},\"4504\":{\"t\":\"springcloud中的组件有那些？\"},\"4505\":{\"t\":\"Spring Cloud Eureka,服务注册中心,特性有失效剔除、服务保护\"},\"4506\":{\"t\":\"Spring Cloud Zuul,API服务网关,功能有路由分发和过滤\"},\"4507\":{\"t\":\"Spring Cloud Config,分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式\"},\"4508\":{\"t\":\"Spring Cloud Ribbon,客户端负载均衡,特性有区域亲和,重试机制\"},\"4509\":{\"t\":\"Spring Cloud Hystrix,客户端容错保护,特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离\"},\"4510\":{\"t\":\"Spring Cloud Feign,声明式服务调用本质上就是Ribbon+Hystrix\"},\"4511\":{\"t\":\"Spring Cloud Stream,消息驱动,有Sink、Source、Processor三种通道,特性有订阅发布、消费组、消息分区\"},\"4512\":{\"t\":\"Spring Cloud Bus,消息总线,配合Config仓库修改的一种Stream实现，\"},\"4513\":{\"t\":\"Spring Cloud Sleuth,分布式服务追踪,需要搞清楚TraceID和SpanID以及抽样,如何与ELK整合\"},\"4514\":{\"t\":\"Spring Cloud项目部署架构？\"},\"4515\":{\"t\":\"img\"},\"4516\":{\"t\":\"网关与过滤器有什么区别？\"},\"4517\":{\"t\":\"网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。\"},\"4518\":{\"t\":\"什么是断路器？\"},\"4519\":{\"t\":\"当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）\"},\"4520\":{\"t\":\"断路器有三种状态：\"},\"4521\":{\"t\":\"打开状态：一段时间内达到一定的次数无法调用并且多次监测没有恢复的迹象断路器完全打开那么下次请求就不会请求到该服务\"},\"4522\":{\"t\":\"半开状态：短时间内有恢复迹象断路器会将部分请求发给该服务，正常调用时断路器关闭\"},\"4523\":{\"t\":\"关闭状态：当服务一直处于正常状态能正常调用\"},\"4524\":{\"t\":\"什么是 Hystrix？\"},\"4525\":{\"t\":\"在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等一些防止雪崩的技术。\"},\"4526\":{\"t\":\"Hystrix有四种防雪崩方式：\"},\"4527\":{\"t\":\"服务降级：接口调用失败就调用本地的方法返回一个空\"},\"4528\":{\"t\":\"服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息\"},\"4529\":{\"t\":\"服务隔离：隔离服务之间相互影响\"},\"4530\":{\"t\":\"服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。\"},\"4531\":{\"t\":\"什么是Feign？\"},\"4532\":{\"t\":\"Feign 是一个声明REST服务客户端，这使得编写web服务客户端更容易。它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。\"},\"4533\":{\"t\":\"什么是OpenFeign？\"},\"4534\":{\"t\":\"OpenFeign 是 Spring Cloud 对 Feign 的二次封装，它具有 Feign 的所有功能，并在 Feign 的基础上增加了对 Spring MVC 注解的支持，例如 @RequestMapping、@GetMapping 和 @PostMapping 等。\"},\"4535\":{\"h\":\"4.OpenFeign远程调用的基本流程\",\"a\":\"_4-openfeign远程调用的基本流程\"},\"4536\":{\"t\":\"OpenFeign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，放回给调用者。Feign远程调用的基本流程，大致如下图所示。\"},\"4537\":{\"t\":\"从上图可以看到，Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的 Request 请求。通过Feign以及JAVA的动态代理机制，使得Java 开发人员，可以不用通过HTTP框架去封装HTTP请求报文的方式，完成远程服务的HTTP调用。\"},\"4538\":{\"t\":\"过程：\"},\"4539\":{\"t\":\"在微服务启动时，Feign会进行包扫描，对加@FeignClient注解的接口，按照注解的规则，创建远程接口的本地JDK Proxy代理实例。然后，将这些本地Proxy代理实例，注入到Spring IOC容器中。当远程接口的方法被调用，由Proxy代理实例去完成真正的远程访问，并且返回结果。\"},\"4540\":{\"h\":\"4.1Feign与OpenFeign的区别\",\"a\":\"_4-1feign与openfeign的区别\"},\"4541\":{\"t\":\"Feign是Spring Cloud组件中一个轻量级RESTful的HTTP服务客户端，Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用接口，就可以调用服务注册中心的服务。\"},\"4542\":{\"t\":\"OpenFeign是Spring Cloud在Feign的基础上支持了SpringMVC的注解，如@RequestMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类。\"},\"4543\":{\"h\":\"4.2Spring Cloud OpenFeign使用教程\",\"a\":\"_4-2spring-cloud-openfeign使用教程\"},\"4544\":{\"t\":\"OpenFeignClient的pom依赖如下：\"},\"4545\":{\"t\":\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> \"},\"4546\":{\"t\":\"启动类上增加**@EnableFeignClients注解，告诉框架扫描所有使用注解@FeignClient**定义的feign客户端，并把feign客户端注册到IOC容器中。\"},\"4547\":{\"t\":\"需要使用@FeignClient来注解一个interface，如下所示：\"},\"4548\":{\"t\":\"@FeignClient(value = \\\"leadnews-article\\\",fallback = IArticleClientFallback.class) public interface IArticleClient { @PostMapping(\\\"/api/v1/article/save\\\") public ResponseResult saveArticle(@RequestBody ArticleDto articleDto);; } \"},\"4549\":{\"t\":\"其中@FeignClient中的value是要调用的服务的注册名。\"},\"4550\":{\"h\":\"5.什么是 Nacos？\",\"a\":\"_5-什么是-nacos\"},\"4551\":{\"t\":\"一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\"},\"4552\":{\"t\":\"整体架构分为用户层、业务层、内核层和插件，用户层主要解决用户使用的易用性问题，业务层主要解决服务发现和配置管理的功能问题，内核层解决分布式系统⼀致性、存储、高可用等核心问题，插件解决扩展性问题。\"},\"4553\":{\"t\":\"服务 (Service)\"},\"4554\":{\"t\":\"服务是指一个或一组软件功能（例如特定信息的检索或一组操作的执行），其目的是不同的客户端可以为不同的目的重用（例如通过跨进程的网络调用）。Nacos 支持主流的服务生态，如 Kubernetes Service、gRPC|Dubbo RPC Service 或者 Spring Cloud RESTful Service。\"},\"4555\":{\"t\":\"服务注册中心 (Service Registry)\"},\"4556\":{\"t\":\"服务注册中心，它是服务，其实例及元数据的数据库。服务实例在启动时注册到服务注册表，并在关闭时注销。服务和路由器的客户端查询服务注册表以查找服务的可用实例。服务注册中心可能会调用服务实例的健康检查 API 来验证它是否能够处理请求。\"},\"4557\":{\"h\":\"ZooKeeper\"},\"4558\":{\"h\":\"1.基本功能\",\"a\":\"_1-基本功能\"},\"4559\":{\"t\":\"ZooKeeper 是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\"},\"4560\":{\"t\":\"ZooKeeper 为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。这些功能的实现主要依赖于 ZooKeeper 提供的 数据存储+事件监听 功能。\"},\"4561\":{\"t\":\"ZooKeeper 将数据保存在内存中，性能是不错的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景）。\"},\"4562\":{\"t\":\"另外，很多顶级的开源项目都用到了 ZooKeeper，比如：\"},\"4563\":{\"t\":\"Kafka : ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。不过，在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构。\"},\"4564\":{\"t\":\"Kafka严重依赖于ZooKeeper集群。所有的broker在启动的时候都会往zookeeper进行注册，目的就是选举出一个controller，controller会读取注册上来的从节点的数据（通过监听机制），生成集群的元数据信息，之后把这些信息都分发给其他的服务器，让其他服务器能感知到集群中其它成员的存在 。通过这个方法让整个集群都得知这个分区方案，此时从节点就各自创建好目录等待创建分区副本即可。这也是整个集群的管理机制。\"},\"4565\":{\"t\":\"kafka已经取消了依赖zookeeper：\"},\"4566\":{\"t\":\"最新版的Kafka 2.8.0，移除了对Zookeeper的依赖，通过KRaft进行自己的集群管理。\"},\"4567\":{\"t\":\"Kafka作为一个消息队列，竟然要依赖一个重量级的协调系统ZooKeeper，不得不说是一个笑话。同样作为消息队列，人家RabbitMQ早早的就实现了自我管理。\"},\"4568\":{\"t\":\"Zookeeper非常笨重，还要求奇数个节点的集群配置，扩容和缩容也不方便。Zk的配置方式，也和kafka的完全不一样，要按照调优Kafka，竟然还要兼顾另外一个系统。\"},\"4569\":{\"t\":\"Kafka要想往轻量级，开箱即用的方向发展，就不得不干掉Zk。\"},\"4570\":{\"h\":\"2.Paxos协议\",\"a\":\"_2-paxos协议\"},\"4571\":{\"h\":\"3.Raft协议\",\"a\":\"_3-raft协议\"},\"4572\":{\"h\":\"3.1什么是分布式一致性 ？\",\"a\":\"_3-1什么是分布式一致性\"},\"4573\":{\"t\":\"分布式系统通常由异步网络连接的多个节点构成，每个节点有独立的计算和存储，节点之间通过网络通信进行协作。分布式一致性指多个节点对某一变量的取值达成一致，一旦达成一致，则变量的本次取值即被确定。\"},\"4574\":{\"t\":\"在大量客户端并发请求读/写的情况下，维护数据多副本的一致性无疑非常重要，且富有挑战。因此，分布式一致性在我们生产环境中显得尤为重要。\"},\"4575\":{\"t\":\"总结来讲，分布式一致性就是为了解决以下两个问题：\"},\"4576\":{\"t\":\"数据不能存在单个节点（主机）上，否则可能出现单点故障。\"},\"4577\":{\"t\":\"多个节点（主机）需要保证具有相同的数据。\"},\"4578\":{\"h\":\"3.2常见分布式一致性算法\",\"a\":\"_3-2常见分布式一致性算法\"},\"4579\":{\"t\":\"常见的一致性算法包括Paxos算法，Raft算法，ZAB算法等，\"},\"4580\":{\"t\":\"Paxos算法是Lamport宗师提出的一种基于消息传递的分布式一致性算法，使其获得2013年图灵奖。自Paxos问世以来就持续垄断了分布式一致性算法，Paxos这个名词几乎等同于分布式一致性, 很多分布式一致性算法都由Paxos演变而来。\"},\"4581\":{\"t\":\"Paxos是出了名的难懂，而Raft正是为了探索一种更易于理解的一致性算法而产生的。它的首要设计目的就是易于理解，所以在选主的冲突处理等方式上它都选择了非常简单明了的解决方案。\"},\"4582\":{\"t\":\"ZAB 协议全称：Zookeeper Atomic Broadcast（Zookeeper 原子广播协议）, 它应该是所有一致性协议中生产环境中应用最多的了。为什么呢？因为他是为 Zookeeper 设计的分布式一致性协议！\"},\"4583\":{\"h\":\"3.3Raft算法基础\",\"a\":\"_3-3raft算法基础\"},\"4584\":{\"t\":\"Raft算法和其他分布式一致算法一样，内部采用如下图所示的复制状态机模型，在这个模型中，会利用多台服务器构成一个集群，工作流程如下图所示：\"},\"4585\":{\"t\":\"Raft算法在具体实现中，将分布式一致性问题分解为了Leader选举、日志同步和安全性保证三大子问题。\"},\"4586\":{\"t\":\"Raft 正常工作时的流程如下图，也就是正常情况下日志复制的流程。Raft 中使用日志来记录所有操作，所有结点都有自己的日志列表来记录所有请求。算法将机器分成三种角色：Leader、Follower 和 Candidate。正常情况下只存在一个 Leader，其他均为 Follower，所有客户端都与 Leader 进行交互。\"},\"4587\":{\"t\":\"所有操作采用类似两阶段提交的方式，Leader 在收到来自客户端的请求后并不会执行，只是将其写入自己的日志列表中，然后将该操作发送给所有的 Follower。Follower 在收到请求后也只是写入自己的日志列表中然后回复 Leader，当有超过半数的结点写入后 Leader 才会提交该操作并返回给客户端，同时通知所有其他结点提交该操作。\"},\"4588\":{\"t\":\"通过这一流程保证了只要提交过后的操作一定在多数结点上留有记录（在日志列表中），从而保证了该数据不会丢失。\"},\"4589\":{\"t\":\"Raft 是一个非拜占庭的一致性算法，即所有通信是正确的而非伪造的。N个结点的情况下（N为奇数）可以最多容忍(N-1)/2个结点故障。如果更多的节点故障，后续的Leader选举和日志同步将无法进行。\"},\"4590\":{\"t\":\"参考：https://juejin.cn/post/7218915344130359351\"},\"4591\":{\"h\":\"3.ZAB协议\",\"a\":\"_3-zab协议\"},\"4592\":{\"h\":\"3.1ZAB 协议介绍\",\"a\":\"_3-1zab-协议介绍\"},\"4593\":{\"t\":\"ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。这里的主备系统架构模型，就是指只有一台客户端（Leader）负责处理外部的写事务请求，然后Leader客户端将数据同步到其他Follower节点。\"},\"4594\":{\"t\":\"客户端的读取流程：客户端会随机的链接到 zookeeper 集群中的一个节点，如果是读请求，就直接从当前节点中读取数据；如果是写请求，那么节点就会向 Leader 提交事务，Leader 接收到事务提交，会广播该事务，只要超过半数节点写入成功，该事务就会被提交。\"},\"4595\":{\"t\":\"ZAB 协议两种基本的模式：崩溃恢复和消息广播：\"},\"4596\":{\"t\":\"崩溃恢复 ：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致。说白了就是 ZAB 协议是如何处理写请求的。那么 Follower 和 Observer 也需要 同步更新数据 。\"},\"4597\":{\"t\":\"第一步 Leader 将写请求 广播 出去，让 Leader 问问 Followers 是否同意更新，如果超过半数以上的同意那么就进行 Follower 和 Observer 的更新。\"},\"4598\":{\"t\":\"在 Leader 这端，它为每个其他的 zkServer 准备了一个 队列 ，采用先进先出的方式发送消息。由于协议是 通过 TCP 来进行网络通信的，保证了消息的发送顺序性，接受顺序性也得到了保证。\"},\"4599\":{\"t\":\"除此之外，在 ZAB 中还定义了一个 全局单调递增的事务ID ZXID ，它是一个64位long型，其中高32位表示 epoch 年代，低32位表示事务id。epoch 是会根据 Leader 的变化而变化的，当一个 Leader 挂了，新的 Leader 上位的时候，年代（epoch）就变了。而低32位可以简单理解为递增的事务id。\"},\"4600\":{\"t\":\"消息广播 ：当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进入消息广播模式了。 当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\"},\"4601\":{\"h\":\"3.2消息广播\",\"a\":\"_3-2消息广播\"},\"4602\":{\"t\":\"Zookeeper集群中，存在以下三种角色的节点： Leader：Zookeeper集群的核心角色，在集群启动或崩溃恢复中通过Follower参与选举产生，为客户端提供读写服务，并对事务请求进行处理。 Follower：Zookeeper集群的核心角色，在集群启动或崩溃恢复中参加选举，没有被选上就是这个角色，为客户端提供读取服务，也就是处理非事务请求，Follower不能处理事务请求，对于收到的事务请求会转发给Leader。 Observer：观察者角色，不参加选举，为客户端提供读取服务，处理非事务请求，对于收到的事务请求会转发给Leader。使用Observer的目的是为了扩展系统，提高读取性能。\"},\"4603\":{\"t\":\"Leader 接收到消息请求后，将消息赋予一个全局唯一的 64 位自增 id，叫做：zxid，通过 zxid 的大小比较即可实现因果有序这一特性。\"},\"4604\":{\"t\":\"Leader 通过先进先出队列（通过 TCP 协议来实现，以此实现了全局有序这一特性）将带有 zxid 的消息作为一个提案（proposal）分发给所有 follower。\"},\"4605\":{\"t\":\"当 follower 接收到 proposal，先将 proposal 写到硬盘，写硬盘成功后再向 leader 回一个 ACK。\"},\"4606\":{\"t\":\"当 leader 接收到合法数量的 ACKs 后，leader 就向所有 follower 发送 COMMIT 命令，同时会在本地执行该消息。\"},\"4607\":{\"t\":\"当 follower 收到消息的 COMMIT 命令时，就会执行该消息。\"},\"4608\":{\"t\":\"相比于完整的二阶段提交，Zab 协议最大的区别就是不能终止事务，follower 要么回 ACK 给 leader，要么抛弃 leader，在某一时刻，leader 的状态与 follower 的状态很可能不一致，因此它不能处理 leader 挂掉的情况，所以 Zab 协议引入了恢复模式来处理这一问题。\"},\"4609\":{\"t\":\"从另一角度看，正因为 Zab 的广播过程不需要终止事务，也就是说不需要所有 follower 都返回 ACK 才能进行 COMMIT，而是只需要合法数量（2n+1 台服务器中的 n+1 台） 的follower，也提升了整体的性能。\"},\"4610\":{\"t\":\"Leader 服务器与每一个 Follower 服务器之间都维护了一个单独的 FIFO 消息队列进行收发消息，使用队列消息可以做到异步解耦。 Leader 和 Follower 之间只需要往队列中发消息即可。如果使用同步的方式会引起阻塞，性能要下降很多。\"},\"4611\":{\"h\":\"3.3崩溃恢复\",\"a\":\"_3-3崩溃恢复\"},\"4612\":{\"h\":\"3.3.1选举 Leader\",\"a\":\"_3-3-1选举-leader\"},\"4613\":{\"t\":\"当系统出现崩溃影响最大应该是 Leader 的崩溃，因为我们只有一个 Leader ，所以当 Leader 出现问题的时候我们势必需要重新选举 Leader 。\"},\"4614\":{\"t\":\"Leader 选举可以分为两个不同的阶段，第一个是我们提到的 Leader 宕机需要重新选举，第二则是当 Zookeeper 启动时需要进行系统的 Leader 初始化选举。下面我先来介绍一下 ZAB 是如何进行初始化选举的。\"},\"4615\":{\"t\":\"假设我们集群中有3台机器，那也就意味着我们需要两台以上同意（超过半数）。比如这个时候我们启动了 server1 ，它会首先 投票给自己 ，投票内容为服务器的 myid 和 ZXID ，因为初始化所以 ZXID 都为0，此时 server1 发出的投票为 (1,0)。但此时 server1 的投票仅为1，所以不能作为 Leader ，此时还在选举阶段所以整个集群处于 Looking 状态。\"},\"4616\":{\"t\":\"接着 server2 启动了，它首先也会将投票选给自己(2,0)，并将投票信息广播出去（server1也会，只是它那时没有其他的服务器了），server1 在收到 server2 的投票信息后会将投票信息与自己的作比较。首先它会比较 ZXID ，ZXID 大的优先为 Leader，如果相同则比较 myid，myid 大的优先作为 Leader。所以此时server1 发现 server2 更适合做 Leader，它就会将自己的投票信息更改为(2,0)然后再广播出去，之后server2 收到之后发现和自己的一样无需做更改，并且自己的 投票已经超过半数 ，则 确定 server2 为 Leader，server1 也会将自己服务器设置为 Following 变为 Follower。整个服务器就从 Looking 变为了正常状态。\"},\"4617\":{\"t\":\"当 server3 启动发现集群没有处于 Looking 状态时，它会直接以 Follower 的身份加入集群。\"},\"4618\":{\"t\":\"还是前面三个 server 的例子，如果在整个集群运行的过程中 server2 挂了，那么整个集群会如何重新选举 Leader 呢？其实和初始化选举差不多。\"},\"4619\":{\"t\":\"首先毫无疑问的是剩下的两个 Follower 会将自己的状态 从 Following 变为 Looking 状态 ，然后每个 server 会向初始化投票一样首先给自己投票（这不过这里的 zxid 可能不是0了，这里为了方便随便取个数字）。\"},\"4620\":{\"t\":\"假设 server1 给自己投票为(1,99)，然后广播给其他 server，server3 首先也会给自己投票(3,95)，然后也广播给其他 server。server1 和 server3 此时会收到彼此的投票信息，和一开始选举一样，他们也会比较自己的投票和收到的投票（zxid 大的优先，如果相同那么就 myid 大的优先）。这个时候 server1 收到了 server3 的投票发现没自己的合适故不变，server3 收到 server1 的投票结果后发现比自己的合适于是更改投票为(1,99)然后广播出去，最后 server1 收到了发现自己的投票已经超过半数就把自己设为 Leader，server3 也随之变为 Follower。\"},\"4621\":{\"t\":\"请注意 ZooKeeper 为什么要设置奇数个结点？比如这里我们是三个，挂了一个我们还能正常工作，挂了两个我们就不能正常工作了（已经没有超过半数的节点数了，所以无法进行投票等操作了）。而假设我们现在有四个，挂了一个也能工作，但是挂了两个也不能正常工作了，这是和三个一样的，而三个比四个还少一个，带来的效益是一样的，所以 Zookeeper 推荐奇数个 server 。\"},\"4622\":{\"h\":\"3.3.2确保已经被Leader提交的提案最终能够被所有的Follower提交：\",\"a\":\"_3-3-2确保已经被leader提交的提案最终能够被所有的follower提交\"},\"4623\":{\"t\":\"假设 Leader (server2) 发送 commit 请求，他发送给了 server3，然后要发给 server1 的时候突然挂了。这个时候重新选举的时候我们如果把 server1 作为 Leader 的话，那么肯定会产生数据不一致性，因为 server3 肯定会提交刚刚 server2 发送的 commit 请求的提案，而 server1 根本没收到所以会丢弃。\"},\"4624\":{\"t\":\"那怎么解决呢？\"},\"4625\":{\"t\":\"这个时候 server1 已经不可能成为 Leader 了，因为 server1 和 server3 进行投票选举的时候会比较 ZXID ，而此时 server3 的 **ZXID 肯定比 server1 的大了。\"},\"4626\":{\"h\":\"3.3.3跳过那些已经被丢弃的提案：\",\"a\":\"_3-3-3跳过那些已经被丢弃的提案\"},\"4627\":{\"t\":\"假设 Leader (server2) 此时同意了提案N1，自身提交了这个事务并且要发送给所有 Follower 要 commit 的请求，却在这个时候挂了，此时肯定要重新进行 Leader 的选举，比如说此时选 server1 为 Leader 。但是过了一会，这个 挂掉的 Leader 又重新恢复了 ，此时它肯定会作为 Follower 的身份进入集群中，需要注意的是刚刚 server2 已经同意提交了提案N1，但其他 server 并没有收到它的 commit 信息，所以其他 server 不可能再提交这个提案N1了，这样就会出现数据不一致性问题了，所以 该提案N1最终需要被抛弃掉 。\"},\"4628\":{\"h\":\"3.4Zookeeper 架构\",\"a\":\"_3-4zookeeper-架构\"},\"4629\":{\"t\":\"作为一个优秀高效且可靠的分布式协调框架，ZooKeeper 在解决分布式数据一致性问题时并没有直接使用 Paxos ，而是专门定制了一致性协议叫做 ZAB(ZooKeeper Atomic Broadcast) 原子广播协议，该协议能够很好地支持 崩溃恢复 。\"},\"4630\":{\"t\":\"ZAB 中的三个角色：\"},\"4631\":{\"t\":\"ZAB 中三个主要的角色，Leader 领导者、Follower跟随者、Observer观察者 。\"},\"4632\":{\"t\":\"Leader ：集群中 唯一的写请求处理者 ，能够发起投票（投票也是为了进行写请求）。\"},\"4633\":{\"t\":\"Follower：能够接收客户端的请求，如果是读请求则可以自己处理，如果是写请求则要转发给 Leader 。在选举过程中会参与投票，有选举权和被选举权 。\"},\"4634\":{\"t\":\"Observer ：就是没有选举权和被选举权的 Follower 。\"},\"4635\":{\"h\":\"4.CAP\",\"a\":\"_4-cap\"},\"4636\":{\"h\":\"4.1简介\",\"a\":\"_4-1简介\"},\"4637\":{\"t\":\"CAP 也就是 Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性） 这三个单词首字母组合。\"},\"4638\":{\"t\":\"在理论计算机科学中，CAP 定理指出对于一个分布式系统来说，当设计读写操作时，只能同时满足以下三点中的两个：\"},\"4639\":{\"t\":\"一致性（Consistency） : 所有节点访问同一份最新的数据副本\"},\"4640\":{\"t\":\"可用性（Availability）: 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\"},\"4641\":{\"t\":\"分区容错性（Partition Tolerance） : 分布式系统出现网络分区的时候，仍然能够对外提供服务。\"},\"4642\":{\"t\":\"什么是网络分区？\"},\"4643\":{\"t\":\"分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫 网络分区。\"},\"4644\":{\"h\":\"4.2不是所谓的“3 选 2”\",\"a\":\"_4-2不是所谓的-3-选-2\"},\"4645\":{\"t\":\"大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。\"},\"4646\":{\"t\":\"当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。\"},\"4647\":{\"t\":\"简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。\"},\"4648\":{\"t\":\"因此，分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。 比如 ZooKeeper 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。\"},\"4649\":{\"t\":\"为啥不可能选择 CA 架构呢？ 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。\"},\"4650\":{\"t\":\"选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。\"},\"4651\":{\"t\":\"另外，需要补充说明的一点是： 如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。\"},\"4652\":{\"h\":\"来看头条\"},\"4653\":{\"h\":\"1.项目介绍\",\"a\":\"_1-项目介绍\"},\"4654\":{\"t\":\"开发技术：Spring Cloud + Spring Boot + MybatisPlus + Redis + MySQL + Mongodb + Zookeeper + kafka + ElasticSearch + Docker + 第三方技术阿里云OSS;\"},\"4655\":{\"t\":\"项目背景：”来看头条“ 项目类似于今日头条，是一个新闻资讯类项目。该项目由用户端和自媒体端组成。在用户端，实现了用户通过app端登录功能、浏览文章功能、搜索文章功能、用户历史记录功能。在自媒体端，实现了自媒体管理员登录功能、发布文章功能、删除文章功能、上传素材功能、文章内容审核功能\"},\"4656\":{\"t\":\"项目重难点： 网关搭建；文章详情静态化及存储；文章自动审核及延迟发布；分布式锁解决集群下的方法抢占执行；热点文章实时计算\"},\"4657\":{\"t\":\"技术栈的具体应用：\"},\"4658\":{\"t\":\"Spring-Cloud-Gateway : 微服务之前架设的网关服务，实现服务注册中的API请求路由，以及控制流速控制和熔断处理都是常用的架构手段，而这些功能Gateway天然支持\"},\"4659\":{\"t\":\"运用Spring Boot快速开发框架，构建项目工程；并结合Spring Cloud全家桶技术，实现app后端、自媒体等微服务。\"},\"4660\":{\"t\":\"运用Spring Cloud Alibaba Nacos作为项目中的注册中心和配置中心\"},\"4661\":{\"t\":\"运用mybatis-plus作为持久层提升开发效率\"},\"4662\":{\"t\":\"采用kafka作为消息服务中间件，把自媒体文章上下架放进消息队列；通过用户的行为（点赞、评论、喜欢）实时记录用户数据，通过kafkaStream流式计算最新的数据；与客户端系统消息通知\"},\"4663\":{\"t\":\"运用Redis缓存技术，实现热数据的计算，提升系统性能指标，同时作为消息中间件异步消费任务。\"},\"4664\":{\"t\":\"使用Mysql存储用户数据，以保证数据查询的高性能\"},\"4665\":{\"t\":\"使用Mongodb存储用户历史记录数据，以保证用户热数据高扩展和高性能指标\"},\"4666\":{\"t\":\"运用AI技术，来完成系统自动化功能，以提升效率及节省成本,比如文章审核\"},\"4667\":{\"h\":\"2.优化\",\"a\":\"_2-优化\"},\"4668\":{\"h\":\"2.1优化一\",\"a\":\"_2-1优化一\"},\"4669\":{\"t\":\"**缺陷 ：**写操作（定时刷新）比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。\"},\"4670\":{\"t\":\"解决办法：\"},\"4671\":{\"t\":\"数据库和缓存数据强一致场景 ：更新 db 的时候同样更新 cache，不过我们需要加一个分布式锁来保证更新 cache 的时候不存在线程安全问题。\"},\"4672\":{\"h\":\"2.2优化二\",\"a\":\"_2-2优化二\"},\"4673\":{\"t\":\"**缺陷：**消费者丢失消息的情况\"},\"4674\":{\"t\":\"我们知道消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。偏移量（offset)表示 Consumer 当前消费到的 Partition(分区)的所在的位置。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。\"},\"4675\":{\"t\":\"当消费者拉取到了分区的某个消息之后，消费者会自动提交了 offset。自动提交的话会有一个问题，试想一下，当消费者刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。\"},\"4676\":{\"t\":\"解决办法:\"},\"4677\":{\"t\":\"我们手动关闭自动提交 offset，每次在真正消费完消息之后再自己手动提交 offset 。 但是这样会带来消息被重新消费的问题。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。\"},\"4678\":{\"t\":\"解决Kafka重复消费，开启kafka本身存在的幂等性。acks=all和enable.idempotence=true来保证幂等性,这样 Producer 在重试发送消息时,Broker端就可以过滤重复消息。\"},\"4679\":{\"h\":\"2.3优化三\",\"a\":\"_2-3优化三\"},\"4680\":{\"h\":\"2.3.1存储技术选型：\",\"a\":\"_2-3-1存储技术选型\"},\"4681\":{\"t\":\"功能\"},\"4682\":{\"t\":\"阿里云oss\"},\"4683\":{\"t\":\"minio\"},\"4684\":{\"t\":\"文件管理\"},\"4685\":{\"t\":\"√\"},\"4686\":{\"t\":\"√\"},\"4687\":{\"t\":\"文件管理权限策略\"},\"4688\":{\"t\":\"√\"},\"4689\":{\"t\":\"√\"},\"4690\":{\"t\":\"纠删码数据修复\"},\"4691\":{\"t\":\"√\"},\"4692\":{\"t\":\"√\"},\"4693\":{\"t\":\"持续备份\"},\"4694\":{\"t\":\"√\"},\"4695\":{\"t\":\"√\"},\"4696\":{\"t\":\"使用SDK管理资源\"},\"4697\":{\"t\":\"√\"},\"4698\":{\"t\":\"√\"},\"4699\":{\"t\":\"监控\"},\"4700\":{\"t\":\"√\"},\"4701\":{\"t\":\"√\"},\"4702\":{\"t\":\"版本控制\"},\"4703\":{\"t\":\"开启版本控制后，针对文件的覆盖和删除操作将会以历史版本的形式保存下来，在错误覆盖或者删除文件后，能够将存储空间中存储的文件恢复至任意时刻的历史版本\"},\"4704\":{\"t\":\"×\"},\"4705\":{\"t\":\"在指定时间内自动批量删除\"},\"4706\":{\"t\":\"支持生命周期规则，您可以通过生命周期规则定期将非热门数据转换为低频访问、归档存储或冷归档存储，并删除过期数据\"},\"4707\":{\"t\":\"×\"},\"4708\":{\"t\":\"提升数据上传、下载速率\"},\"4709\":{\"t\":\"支持传输加速服务\"},\"4710\":{\"t\":\"受限于服务器网卡带宽\"},\"4711\":{\"t\":\"高性能、高吞吐的数据访问服务\"},\"4712\":{\"t\":\"缓存OSS中的热点文件，并提供高性能、高吞吐量的数据访问服务\"},\"4713\":{\"t\":\"设置访问一个对象并下载下来进行缓存，那接下来的请求都会直接访问缓存磁盘上的对象，直至其过期失效\"},\"4714\":{\"t\":\"加密、保护敏感数据\"},\"4715\":{\"t\":\"√\"},\"4716\":{\"t\":\"×\"},\"4717\":{\"t\":\"防护DDoS攻击\"},\"4718\":{\"t\":\"当受保护的Bucket遭受大流量攻击时，OSS高防会将攻击流量牵引至高防集群进行清洗，并将正常访问流量回源到目标Bucket，确保业务的正常进行。\"},\"4719\":{\"t\":\"×\"},\"4720\":{\"t\":\"记录资源的访问信息\"},\"4721\":{\"t\":\"可以通过日志功能完成OSS的操作审计、访问统计、异常事件回溯和问题定位等工作\"},\"4722\":{\"t\":\"×\"},\"4723\":{\"t\":\"控制流量\"},\"4724\":{\"t\":\"在上传、下载、拷贝文件时进行流量控制，以保证您其他应用的网络带宽\"},\"4725\":{\"t\":\"×\"},\"4726\":{\"t\":\"对数据进行分析和处理\"},\"4727\":{\"t\":\"图片处理、视频截帧、智能媒体管理\"},\"4728\":{\"t\":\"×\"},\"4729\":{\"t\":\"使用工具管理资源\"},\"4730\":{\"t\":\"OSS支持图形化工具、命令行工具、文件挂载工具、FTP工具等方便您管理OSS资源\"},\"4731\":{\"t\":\"支持图形化工具、命令行工、各类SDK\"},\"4732\":{\"t\":\"同城容灾、异地容灾\"},\"4733\":{\"t\":\"√\"},\"4734\":{\"t\":\"×\"},\"4735\":{\"t\":\"数据合规保留\"},\"4736\":{\"t\":\"允许用户以“不可删除、不可篡改”方式保存和使用数据。\"},\"4737\":{\"t\":\"×\"},\"4738\":{\"t\":\"阿里云OSS是一个成熟的云服务,由阿里云提供技术支持和服务保障,使用方便,与其他阿里云服务集成度高。MinIO是开源软件,需要自行部署和维护。OSS有成熟的访问权限控制,安全性好。MinIO安全性取决于自行配置。\"},\"4739\":{\"h\":\"2.3.2数据库框架选型：\",\"a\":\"_2-3-2数据库框架选型\"},\"4740\":{\"t\":\"MyBatis和MyBatis-Plus都是Java语言中非常常用的ORM框架，二者有以下区别：\"},\"4741\":{\"t\":\"实现方式不同：\"},\"4742\":{\"t\":\"MyBatis是基于XML或注解方式进行数据库操作的持久化框架，它提供了简单的CRUD操作及动态SQL生成等功能。而MyBatis-Plus是在MyBatis框架上的封装，通过对于增强简化后的API更加方便地进行开发，并且在性能、效率和易用性上都有一定的优化。\"},\"4743\":{\"t\":\"编程风格有所差异：\"},\"4744\":{\"t\":\"MyBatis的编程风格更加传统，需要定义mapper.xml文件并根据传入的参数使用相应的SQL查询语句，需要实现 Mybatis 提供的各种方法；而MyBatis-Plus具有许多针对CRUD进行的简化方法，通过继承BaseMapper以及使用Lambda表达式，可以让我们像SpringDataJPA类似地使用接口编程方式进行数据库操作。\"},\"4745\":{\"t\":\"下面通过代码示例来演示一下MyBatis和MyBatis-Plus的区别：\"},\"4746\":{\"t\":\"MyBatis的实现\"},\"4747\":{\"t\":\"首先在Mybatis中需要配置sql mapper映射文件，如下所示：\"},\"4748\":{\"t\":\"<!-- userMapper.xml --> <mapper namespace=\\\"com.demo.dao.UserMapper\\\"> <select id=\\\"getUserById\\\" parameterType=\\\"java.lang.Integer\\\" resultType=\\\"com.demo.entity.User\\\"> select * from t_user where id=#{id} </select> </mapper> \"},\"4749\":{\"t\":\"然后通过Mybatis的SqlSession执行相关方法实现数据查询：\"},\"4750\":{\"t\":\"SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(configuration); SqlSession sqlSession = sessionFactory.openSession(); User user = sqlSession.selectOne(\\\"com.demo.dao.UserMapper.getUserById\\\", 1); sqlSession.close(); \"},\"4751\":{\"t\":\"MyBatis-Plus的实现\"},\"4752\":{\"t\":\"在MyBatis-Plus中则要比上述方式简单得多，并且提供了更加方便的CRUD操作。例如我们可以定义一个接口继承BaseMapper接口并调用其中提供的方法来操作数据库，如下所示：\"},\"4753\":{\"t\":\"public interface UserMapper extends BaseMapper<User> { } \"},\"4754\":{\"t\":\"以下是从数据库中根据ID查询数据时，可以在Service层直接调用BaseMapper中提供的selectById()方法：\"},\"4755\":{\"t\":\"@Service public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService { @Override public User getUserById(Long id) { return baseMapper.selectById(id); } } \"},\"4756\":{\"t\":\"参考：https://blog.csdn.net/qq_51447496/article/details/131166800\"},\"4757\":{\"h\":\"2.3.3 消息队列选型：\",\"a\":\"_2-3-3消息队列选型\"},\"4758\":{\"t\":\"详细请参考：https://www.youngxy.top/page/Kafka/Kafka.html\"},\"4759\":{\"t\":\"Kafka 和 RocketMQ 都支持 10w 级别的高吞吐量。\"},\"4760\":{\"t\":\"Kafka 一开始的目的就是用于日志收集和传输，适合有大量数据产生的互联网业务，特别是大数据领域的实时计算、日志采集等场景，用 Kafka 绝对没错，社区活跃度高，业内标准。\"},\"4761\":{\"t\":\"RocketMQ 特别适用于金融互联网领域这类对于可靠性要求很高的场景，比如订单交易等，而且 RocketMQ 是阿里出品的，经历过那么多次淘宝双十一的考验，大品牌，在稳定性值得信赖。但如果阿里不再维护这个技术了，社区有可能突然黄掉的风险。因此如果公司对自己的技术实力有自信，基础架构研发实力较强，推荐用 RocketMQ。\"},\"4762\":{\"t\":\"RabbitMQ 适用于公司对外提供能力，可能会有很多主题接入的中台业务场景，毕竟它是百万级主题数的。它的时效性是毫秒级的，但实际毫秒级和微秒级在感知上没有什么太大的区别，所以它的这一大优点并不太会作为考量标准。同时，它的功能是比较完善的，开源社区活跃度高，能解决开发中遇到的bug，所以万级别数据量业务场景的小公司可以优先选择功能完善的RabbitMQ。它的缺点就是用 Erlang 语言编写，所以很多开发人员很难去看懂源码并进行二次开发和维护，也就是说对于公司来说可能处于不可控的状态。\"},\"4763\":{\"t\":\"ActiveMQ 现在很少有人用，没怎么经过大规模吞吐量场景的考验，社区不怎么活跃，官方社区现在对 ActiveMQ 5.x 维护也越来越少，所以不推荐使用。\"},\"4764\":{\"t\":\"消息中间件对比\"},\"4765\":{\"t\":\"特性\"},\"4766\":{\"t\":\"ActiveMQ\"},\"4767\":{\"t\":\"RabbitMQ\"},\"4768\":{\"t\":\"RocketMQ\"},\"4769\":{\"t\":\"Kafka\"},\"4770\":{\"t\":\"开发语言\"},\"4771\":{\"t\":\"java\"},\"4772\":{\"t\":\"erlang\"},\"4773\":{\"t\":\"java\"},\"4774\":{\"t\":\"scala\"},\"4775\":{\"t\":\"单机吞吐量\"},\"4776\":{\"t\":\"万级\"},\"4777\":{\"t\":\"万级\"},\"4778\":{\"t\":\"10万级\"},\"4779\":{\"t\":\"100万级\"},\"4780\":{\"t\":\"时效性\"},\"4781\":{\"t\":\"ms\"},\"4782\":{\"t\":\"us\"},\"4783\":{\"t\":\"ms\"},\"4784\":{\"t\":\"ms级以内\"},\"4785\":{\"t\":\"可用性\"},\"4786\":{\"t\":\"高（主从）\"},\"4787\":{\"t\":\"高（主从）\"},\"4788\":{\"t\":\"非常高（分布式）\"},\"4789\":{\"t\":\"非常高（分布式）\"},\"4790\":{\"t\":\"功能特性\"},\"4791\":{\"t\":\"成熟的产品、较全的文档、各种协议支持好\"},\"4792\":{\"t\":\"并发能力强、性能好、延迟低\"},\"4793\":{\"t\":\"MQ功能比较完善，扩展性佳\"},\"4794\":{\"t\":\"只支持主要的MQ功能，主要应用于大数据领域\"},\"4795\":{\"t\":\"消息中间件对比-选择建议\"},\"4796\":{\"t\":\"消息中间件\"},\"4797\":{\"t\":\"建议\"},\"4798\":{\"t\":\"Kafka\"},\"4799\":{\"t\":\"追求高吞吐量，适合产生大量数据的互联网服务的数据收集业务\"},\"4800\":{\"t\":\"RocketMQ\"},\"4801\":{\"t\":\"可靠性要求很高的金融互联网领域,稳定性高，经历了多次阿里双11考验\"},\"4802\":{\"t\":\"RabbitMQ\"},\"4803\":{\"t\":\"性能较好，社区活跃度高，数据量没有那么大，优先选择功能比较完备的RabbitMQ\"},\"4804\":{\"h\":\"2.4优化四\",\"a\":\"_2-4优化四\"},\"4805\":{\"t\":\"缺陷：对于变量存在多线程并发竞争\"},\"4806\":{\"t\":\"解决办法：\"},\"4807\":{\"t\":\"为变量设置ThreadLocal。\"},\"4808\":{\"h\":\"2.5身份验证怎么做的？\",\"a\":\"_2-5身份验证怎么做的\"},\"4809\":{\"t\":\"AuthorizedFilter + AppJwtUtil \"},\"4810\":{\"t\":\"用户向服务器发送用户名、密码以及验证码用于登陆系统。用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录。\"},\"4811\":{\"t\":\"如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT。\"},\"4812\":{\"t\":\"用户以后每次向后端发请求都在 Header 中带上这个 JWT ，再次进入网关开始访问，网关过滤器接收用户携带的TOKEN。\"},\"4813\":{\"t\":\"服务端检查 JWT 并从中获取用户相关信息。网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误。\"},\"4814\":{\"t\":\"两点建议：\"},\"4815\":{\"t\":\"建议将 JWT 存放在 localStorage 中，放在 Cookie 中会有 CSRF 风险。\"},\"4816\":{\"t\":\"请求服务端并携带 JWT 的常见做法是将其放在 HTTP Header 的 Authorization 字段中（Authorization: Bearer Token）。\"},\"4817\":{\"t\":\"乐观锁：\"},\"4818\":{\"t\":\"使用版本号。\"},\"4819\":{\"t\":\"分布式id：\"},\"4820\":{\"t\":\"随着业务的增长，文章表可能要占用很大的物理存储空间，为了解决该问题，后期使用数据库分片技术。将一个数据库进行拆分，通过数据库中间件连接。如果数据库中该表选用ID自增策略，则可能产生重复的ID，此时应该使用分布式ID生成策略来生成ID。\"},\"4821\":{\"t\":\"文章端相关的表都使用雪花算法生成id,包括ap_article、 ap_article_config、 ap_article_content\"},\"4822\":{\"t\":\"mybatis-plus已经集成了雪花算法，完成以下两步即可在项目中集成雪花算法\"},\"4823\":{\"t\":\"第一：在实体类中的id上加入如下配置，指定类型为id_worker\"},\"4824\":{\"t\":\"@TableId(value = \\\"id\\\",type = IdType.ID_WORKER) private Long id; \"},\"4825\":{\"t\":\"第二：在application.yml文件中配置数据中心id和机器id\"},\"4826\":{\"t\":\"mybatis-plus: mapper-locations: classpath*:mapper/*.xml # 设置别名包扫描路径，通过该属性可以给包中的类注册别名 type-aliases-package: com.heima.model.article.pojos global-config: datacenter-id: 1 workerId: 1 \"},\"4827\":{\"h\":\"2.6网关搭建：\",\"a\":\"_2-6网关搭建\"},\"4828\":{\"t\":\"思路分析：\"},\"4829\":{\"t\":\"用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录\"},\"4830\":{\"t\":\"用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户\"},\"4831\":{\"t\":\"用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN\"},\"4832\":{\"t\":\"网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误\"},\"4833\":{\"t\":\"具体实现：\"},\"4834\":{\"t\":\"第一：\"},\"4835\":{\"t\":\"​ 在认证过滤器中需要用到jwt的解析，所以需要把工具类拷贝一份到网关微服务\"},\"4836\":{\"t\":\"第二：\"},\"4837\":{\"t\":\"​ 在网关微服务中新建全局过滤器\"},\"4838\":{\"h\":\"2.7文章详情静态化及存储：\",\"a\":\"_2-7文章详情静态化及存储\"},\"4839\":{\"t\":\"文章详情静态化：\"},\"4840\":{\"t\":\"​ FreeMarker 是一款模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。\"},\"4841\":{\"t\":\"​ 模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。\"},\"4842\":{\"t\":\"存储：AliyunOSS\"},\"4843\":{\"t\":\"对象存储可提供更好的数据保护，加密、保护敏感数据。\"},\"4844\":{\"h\":\"2.8文章自动审核及延迟发布：\",\"a\":\"_2-8文章自动审核及延迟发布\"},\"4845\":{\"h\":\"文章自动审核：\",\"a\":\"文章自动审核\"},\"4846\":{\"t\":\"1 自媒体端发布文章后，开始审核文章（异步线程的方式审核文章，在自动审核的方法上加上@Async注解（标明要异步调用），在自媒体引导类中使用@EnableAsync注解开启异步调用）\"},\"4847\":{\"t\":\"2 审核的主要是审核文章的内容（文本内容和图片）\"},\"4848\":{\"t\":\"3 借助第三方提供的接口审核文本\"},\"4849\":{\"t\":\"4 借助第三方提供的接口审核图片，由于图片存储到OSS中，需要先下载才能审核\"},\"4850\":{\"t\":\"5 如果审核失败，则需要修改自媒体文章的状态，status:2 审核失败 status:3 转到人工审核\"},\"4851\":{\"t\":\"6 如果审核成功，则需要在文章微服务中创建app端需要的文章：\"},\"4852\":{\"t\":\"​ 在文章审核成功以后需要在app的article库中新增文章数据：\"},\"4853\":{\"t\":\"​ 保存文章信息 ap_article\"},\"4854\":{\"t\":\"​ 保存文章配置信息 ap_article_config\"},\"4855\":{\"t\":\"​ 保存文章内容 ap_article_content\"},\"4856\":{\"t\":\"WmNewsAutoScanServiceImpl：\"},\"4857\":{\"t\":\"package com.xy.wemedia.service.impl; import com.alibaba.fastjson.JSONArray; import com.baomidou.mybatisplus.core.toolkit.Wrappers; import com.xy.common.aliyun.GreenImageScan; import com.xy.common.aliyun.GreenTextScan; import com.xy.common.aliyun.ImageScan; import com.xy.common.aliyun.TextScan; import com.xy.common.tess4j.Tess4jClient; import com.xy.file.service.FileStorageService; import com.xy.model.article.dtos.ArticleDto; import com.xy.model.common.dtos.ResponseResult; import com.xy.model.wemedia.pojos.WmChannel; import com.xy.model.wemedia.pojos.WmNews; import com.xy.model.wemedia.pojos.WmSensitive; import com.xy.model.wemedia.pojos.WmUser; import com.xy.utils.common.SensitiveWordUtil; import com.xy.wemedia.mapper.WmChannelMapper; import com.xy.wemedia.mapper.WmNewsMapper; import com.xy.wemedia.mapper.WmSensitiveMapper; import com.xy.wemedia.mapper.WmUserMapper; import com.xy.wemedia.service.WmNewsAutoScanService; import com.xy.apis.article.IArticleClient; import lombok.extern.slf4j.Slf4j; import net.sourceforge.tess4j.TesseractException; import org.apache.commons.lang3.StringUtils; import org.springframework.beans.BeanUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.scheduling.annotation.Async; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import java.util.*; import java.util.stream.Collectors; /** * @author 杨路恒 */ @Service //@Transactional @Slf4j public class WmNewsAutoScanServiceImpl implements WmNewsAutoScanService { @Autowired private WmNewsMapper wmNewsMapper; /** * 自媒体文章审核 * @param id 自媒体文章id */ @Override @Async //标明当前方法是一个异步方法 public void autoScanWmNews(Integer id) { //1.查询自媒体文章 WmNews wmNews = wmNewsMapper.selectById(id); if (wmNews == null){ throw new RuntimeException(\\\"WmNewsAutoScanServiceImpl-文章不存在\\\"); } if (wmNews.getStatus().equals(WmNews.Status.SUBMIT.getCode())){ //从内容中提取纯文本内容和图片 Map<String,Object> textAndImages = handleTextAndImages(wmNews); //自管理的敏感词过滤 boolean isSensitive = handleSensitiveScan((String) textAndImages.get(\\\"content\\\"), wmNews); if(!isSensitive){ return; } //2.审核文本内容 阿里云接口 boolean isTextScan = handleTextScan((String) textAndImages.get(\\\"content\\\"),wmNews); if (!isTextScan){ return; } //3.审核图片 阿里云接口 boolean isImageScan = handleImageScan((List<String>) textAndImages.get(\\\"images\\\"),wmNews); // isImageScan = true; if (!isImageScan){ return; } //4.审核成功，保存app端的相关的文章数据 ResponseResult responseResult = saveAppArticle(wmNews); if(!responseResult.getCode().equals(200)){ throw new RuntimeException(\\\"WmNewsAutoScanServiceImpl-文章审核，保存app端相关文章数据失败\\\"); } //回填article_id wmNews.setArticleId((Long) responseResult.getData()); updateWmNews(wmNews,(short) 9,\\\"审核成功\\\"); // saveAppArticle(wmNews); } } @Autowired private WmSensitiveMapper wmSensitiveMapper; /** * 自管理的敏感词审核 * @param content * @param wmNews * @return */ private boolean handleSensitiveScan(String content, WmNews wmNews) { boolean flag =true; //获取所有的敏感词 List<WmSensitive> wmSensitives = wmSensitiveMapper.selectList(Wrappers.<WmSensitive>lambdaQuery().select(WmSensitive::getSensitives)); List<String> sensitiveList = wmSensitives.stream().map(WmSensitive::getSensitives).collect(Collectors.toList()); //初始化敏感词库 SensitiveWordUtil.initMap(sensitiveList); //查看文章中是否包含敏感词 Map<String, Integer> map = SensitiveWordUtil.matchWords(content); if (map.size() > 0){ updateWmNews(wmNews, (short) 2,\\\"当前文章中存在违规内容\\\" + map); flag = false; } return flag; } @Autowired private IArticleClient iArticleClient; @Autowired private WmChannelMapper wmChannelMapper; @Autowired private WmUserMapper wmUserMapper; /** * 修改文章内容 * @param wmNews * @param i * @param reason */ private void updateWmNews(WmNews wmNews, short i, String reason) { wmNews.setStatus(i); wmNews.setReason(reason); wmNewsMapper.updateById(wmNews); } /** * 保存app端相关的文章数据 * @param wmNews * @return */ private ResponseResult saveAppArticle(WmNews wmNews) { ArticleDto articleDto = new ArticleDto(); //属性的拷贝 BeanUtils.copyProperties(wmNews,articleDto); //文章的布局 articleDto.setLayout(wmNews.getType()); //频道 WmChannel wmChannel = wmChannelMapper.selectById(wmNews.getChannelId()); if (wmChannel != null){ articleDto.setChannelName(wmChannel.getName()); } //作者 articleDto.setAuthorId(wmNews.getUserId().longValue()); WmUser wmUser = wmUserMapper.selectById(wmNews.getUserId()); if (wmUser != null){ articleDto.setAuthorName(wmUser.getName()); } //设置文章id if (wmNews.getArticleId() != null){ articleDto.setId(wmNews.getArticleId()); } articleDto.setCreatedTime(new Date()); System.out.println(articleDto.getId()); ResponseResult responseResult = iArticleClient.saveArticle(articleDto); return responseResult; } @Autowired private FileStorageService fileStorageService; @Autowired private GreenImageScan greenImageScan; @Autowired private Tess4jClient tess4jClient; @Autowired private ImageScan imageScan; /** * 审核图片 * @param images * @param wmNews * @return */ private boolean handleImageScan(List<String> images, WmNews wmNews) { boolean flag = true; if (images == null || images.size() == 0){ return flag; } //下载图片 minIO //图片去重 images = images.stream().distinct().collect(Collectors.toList()); // List<byte[]> imageList = new ArrayList<byte[]>(); // try { // for (String image : images) { // byte[] bytes = fileStorageService.downLoadFile(image); // ByteArrayInputStream in = new ByteArrayInputStream(bytes); // BufferedImage imageFile = ImageIO.read(in); // String result = tess4jClient.doOCR(imageFile); // boolean isSensitive = handleSensitiveScan(result, wmNews); // if (!isSensitive){ // return isSensitive; // } // imageList.add(bytes); // } // } catch (Exception e) { // e.printStackTrace(); // } List<String> imageList = images; //审核图片 try { // Map map = greenImageScan.imageScan(imageList); Map map = imageScan.imageScan(imageList); if (map != null){ //审核失败 if(map.get(\\\"suggestion\\\").equals(\\\"block\\\")){ flag = false; updateWmNews(wmNews, (short) 2, \\\"当前文章中存在违规内容\\\"); } //不确定信息 需要人工审核 else if (map.get(\\\"suggestion\\\").equals(\\\"review\\\")){ flag = false; updateWmNews(wmNews, (short)3,\\\"当前文章中存在不确定内容\\\"); } } } catch (Exception e) { flag = false; e.printStackTrace(); } return flag; } @Autowired private GreenTextScan greenTextScan; @Autowired private TextScan textScan; /** * 审核纯文本内容 * @param content * @param wmNews * @return */ private boolean handleTextScan(String content, WmNews wmNews) { boolean flag = true; if ((wmNews.getTitle() + \\\"-\\\" + content).length() == 0){ return flag; } try { Map map = textScan.greenTextScan(wmNews.getTitle() + \\\"-\\\" + content); if (map != null){ //审核失败 if(map.get(\\\"suggestion\\\").equals(\\\"block\\\")){ flag = false; updateWmNews(wmNews, (short) 2, \\\"当前文章中存在违规内容\\\"); } //不确定信息 需要人工审核 else if (map.get(\\\"suggestion\\\").equals(\\\"review\\\")){ flag = false; updateWmNews(wmNews, (short)3,\\\"当前文章中存在不确定内容\\\"); } } } catch (Exception e) { flag = false; e.printStackTrace(); } return flag; } /** * 1.从自媒体文章的内容中提取文本和图片 * 2.提取文章的封面图片 * @param wmNews * @return */ private Map<String, Object> handleTextAndImages(WmNews wmNews) { //存储纯文本内容 StringBuilder stringBuilder = new StringBuilder(); List<String> images = new ArrayList<>(); //1.从自媒体文章的内容中提取文本和图片 if (StringUtils.isNoneBlank(wmNews.getContent())){ List<Map> maps = JSONArray.parseArray(wmNews.getContent(), Map.class); for (Map map : maps) { if (map.get(\\\"type\\\").equals(\\\"text\\\")){ stringBuilder.append(map.get(\\\"value\\\")); } if (map.get(\\\"type\\\").equals(\\\"images\\\")){ images.add((String) map.get(\\\"value\\\")); } } } //2.提取文章的封面图片 if (StringUtils.isNoneBlank(wmNews.getImages())){ String[] split = wmNews.getImages().split(\\\",\\\"); images.addAll(Arrays.asList(split)); } Map<String,Object> resultMap = new HashMap<>(); resultMap.put(\\\"content\\\",stringBuilder.toString()); resultMap.put(\\\"images\\\",images); return resultMap; } } \"},\"4858\":{\"t\":\"在heima-leadnews-wemedia服务中已经依赖了heima-leadnews-feign-apis工程，只需要在自媒体的引导类中开启feign的远程调用即可\"},\"4859\":{\"t\":\"注解为：@EnableFeignClients(basePackages = \\\"com.heima.apis\\\") 需要指向apis这个包。\"},\"4860\":{\"t\":\"package com.xy.wemedia; import com.baomidou.mybatisplus.annotation.DbType; import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor; import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor; import org.mybatis.spring.annotation.MapperScan; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.openfeign.EnableFeignClients; import org.springframework.context.annotation.Bean; import org.springframework.scheduling.annotation.EnableAsync; import org.springframework.scheduling.annotation.EnableScheduling; /** * @author 杨路恒 */ @SpringBootApplication @EnableDiscoveryClient @MapperScan(\\\"com.xy.wemedia.mapper\\\") @EnableFeignClients(basePackages = \\\"com.xy.apis\\\") @EnableAsync //开启异步调用 @EnableScheduling //开启调度任务 public class WemediaApplication { public static void main(String[] args) { SpringApplication.run(WemediaApplication.class,args); } /** * 分页拦截器 * @return */ @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; } } \"},\"4861\":{\"h\":\"延迟发布：\",\"a\":\"延迟发布\"},\"4862\":{\"t\":\"有几个可能的原因项目中使用Redis而不是Kafka来实现延迟任务:\"},\"4863\":{\"t\":\"简单性。Redis相对于Kafka来说更简单,只需要一个Redis实例就可以实现延迟队列,而Kafka需要集群环境。Redis用起来更简单直接。\"},\"4864\":{\"t\":\"性能需求。如果项目对延迟任务的吞吐量要求不是很高,Redis完全可以满足需要。而Kafka更适合大吞吐量的场景。\"},\"4865\":{\"t\":\"资源消耗。Redis的资源消耗比较低,部署和运维成本较低。 Kafka的集群环境对资源要求较高。\"},\"4866\":{\"t\":\"已有Redis。如果项目已经使用了Redis,那么直接复用就可以实现延迟队列,无需引入额外的组件。\"},\"4867\":{\"t\":\"其他依赖。项目可能已经依赖了Redis的其他功能,比如缓存,消息等。那么直接复用Redis更加方便。\"},\"4868\":{\"t\":\"redis实现：zset数据类型的去重有序（分数排序）特点进行延迟。例如：时间戳作为score进行排序。\"},\"4869\":{\"t\":\"实现思路：\"},\"4870\":{\"t\":\"问题思路：\"},\"4871\":{\"t\":\"1.为什么任务需要存储在数据库中？\"},\"4872\":{\"t\":\"延迟任务是一个通用的服务，任何需要延迟得任务都可以调用该服务，需要考虑数据持久化的问题，存储数据库中是一种数据安全的考虑。\"},\"4873\":{\"t\":\"2.为什么redis中使用两种数据类型，list和zset？\"},\"4874\":{\"t\":\"效率问题，算法的时间复杂度\"},\"4875\":{\"t\":\"3.在添加zset数据的时候，为什么不需要预加载？\"},\"4876\":{\"t\":\"任务模块是一个通用的模块，项目中任何需要延迟队列的地方，都可以调用这个接口，要考虑到数据量的问题，如果数据量特别大，为了防止阻塞，只需要把未来几分钟要执行的数据存入缓存即可。\"},\"4877\":{\"t\":\"实现：\"},\"4878\":{\"t\":\"延迟队列服务提供对外接口：提供远程的feign接口\"},\"4879\":{\"t\":\"发布文章集成添加延迟队列接口\"},\"4880\":{\"t\":\"修改发布文章代码：把之前的异步调用修改为调用延迟任务\"},\"4881\":{\"t\":\"消费任务进行审核文章\"},\"4882\":{\"t\":\"4.为什么选用redis作为消息队列？\"},\"4883\":{\"t\":\"把 Redis 当作队列来使用时，会面临的 2 个问题：\"},\"4884\":{\"t\":\"Redis 本身可能会丢数据；\"},\"4885\":{\"t\":\"面对消息挤压，内存资源会紧张；\"},\"4886\":{\"t\":\"所以，能不能将 Redis 作为消息队列来使用，关键看你的业务场景：\"},\"4887\":{\"t\":\"如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。\"},\"4888\":{\"t\":\"如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。\"},\"4889\":{\"t\":\"5.未来数据定时刷新\"},\"4890\":{\"t\":\"方案1：keys 模糊匹配\"},\"4891\":{\"t\":\"keys的模糊匹配功能很方便也很强大，但是在生产环境需要慎用！开发中使用keys的模糊匹配却发现redis的CPU使用率极高，所以公司的redis生产环境将keys命令禁用了！redis是单线程，会被堵塞。\"},\"4892\":{\"t\":\"方案2：scan\"},\"4893\":{\"t\":\"SCAN 命令是一个基于游标的迭代器，SCAN命令每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为SCAN命令的游标参数， 以此来延续之前的迭代过程。\"},\"4894\":{\"t\":\"在TaskServiceImpl中添加方法：\"},\"4895\":{\"t\":\"/** * 未来数据定时刷新 */ @Scheduled(cron = \\\"0 */1 * * * ?\\\") @Override public void refresh() { String token = cacheService.tryLock(\\\"FUTURE_TASK_SYNC\\\", 1000 * 30); if (StringUtils.isNotBlank(token)){ log.info(\\\"未来数据定时刷新---定时任务\\\"); // 获取所有未来数据集合的key值 Set<String> futureKeys = cacheService.scan(ScheduleConstants.FUTURE + \\\"*\\\"); for (String futureKey : futureKeys) { String topicKey = ScheduleConstants.TOPIC + futureKey.split(ScheduleConstants.FUTURE)[1]; //获取该组key下当前需要消费的任务数据 Set<String> tasks = cacheService.zRangeByScore(futureKey, 0, System.currentTimeMillis()); if (!tasks.isEmpty()) { //将这些任务数据添加到消费者队列中 cacheService.refreshWithPipeline(futureKey,topicKey,tasks); System.out.println(\\\"成功的将\\\" + futureKey + \\\"下的当前需要执行的任务数据刷新到\\\" + topicKey + \\\"下\\\"); } } } } \"},\"4896\":{\"t\":\"使用refreshWithPipeline管道方法。\"},\"4897\":{\"h\":\"2.9分布式锁解决集群下的方法抢占执行：\",\"a\":\"_2-9分布式锁解决集群下的方法抢占执行\"},\"4898\":{\"t\":\"问题描述：\"},\"4899\":{\"t\":\"启动两台heima-leadnews-schedule服务，每台服务都会去执行refresh定时任务方法\"},\"4900\":{\"t\":\"分布式锁：\"},\"4901\":{\"t\":\"控制分布式系统有序的去对共享资源进行操作，通过互斥来保证数据的一致性。\"},\"4902\":{\"t\":\"解决方案：\"},\"4903\":{\"t\":\"sexnx （SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。\"},\"4904\":{\"t\":\"这种加锁的思路是，如果 key 不存在则为 key 设置 value，如果 key 已存在则 SETNX 命令不做任何操作\"},\"4905\":{\"t\":\"客户端A请求服务器设置key的值，如果设置成功就表示加锁成功\"},\"4906\":{\"t\":\"客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败\"},\"4907\":{\"t\":\"客户端A执行代码完成，删除锁\"},\"4908\":{\"t\":\"客户端B在等待一段时间后再去请求设置key的值，设置成功\"},\"4909\":{\"t\":\"客户端B执行代码完成，删除锁\"},\"4910\":{\"t\":\"/** * 加锁 * * @param name * @param expire * @return */ public String tryLock(String name, long expire) { name = name + \\\"_lock\\\"; String token = UUID.randomUUID().toString(); RedisConnectionFactory factory = stringRedisTemplate.getConnectionFactory(); RedisConnection conn = factory.getConnection(); try { //参考redis命令： //set key value [EX seconds] [PX milliseconds] [NX|XX] Boolean result = conn.set( name.getBytes(), token.getBytes(), Expiration.from(expire, TimeUnit.MILLISECONDS), RedisStringCommands.SetOption.SET_IF_ABSENT //NX ); if (result != null && result) { return token; } } finally { RedisConnectionUtils.releaseConnection(conn, factory,false); } return null; } \"},\"4911\":{\"h\":\"2.10热点文章实时计算：\",\"a\":\"_2-10热点文章实时计算\"},\"4912\":{\"t\":\"思路说明：\"},\"4913\":{\"h\":\"2.11服务降级处理\",\"a\":\"_2-11服务降级处理\"},\"4914\":{\"t\":\"​\"},\"4915\":{\"t\":\"服务降级是服务自我保护的一种方式，或者保护下游服务的一种方式，用于确保服务不会受请求突增影响变得不可用，确保服务不会崩溃\"},\"4916\":{\"t\":\"服务降级虽然会导致请求失败，但是不会导致阻塞。\"},\"4917\":{\"t\":\"实现步骤：\"},\"4918\":{\"t\":\"①：在heima-leadnews-feign-api编写降级逻辑\"},\"4919\":{\"t\":\"/** * feign失败配置 */ @Component public class IArticleClientFallback implements IArticleClient { @Override public ResponseResult saveArticle(ArticleDto dto) { return ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR,\\\"获取数据失败\\\"); } } \"},\"4920\":{\"t\":\"在自媒体微服务中添加类，扫描降级代码类的包\"},\"4921\":{\"t\":\"@Configuration @ComponentScan(\\\"com.heima.apis.article.fallback\\\") public class InitConfig { } \"},\"4922\":{\"t\":\"②：远程接口中指向降级代码\"},\"4923\":{\"t\":\"@FeignClient(value = \\\"leadnews-article\\\",fallback = IArticleClientFallback.class) public interface IArticleClient { @PostMapping(\\\"/api/v1/article/save\\\") public ResponseResult saveArticle(@RequestBody ArticleDto dto); } \"},\"4924\":{\"t\":\"③：客户端开启降级heima-leadnews-wemedia\"},\"4925\":{\"t\":\"在wemedia的nacos配置中心里添加如下内容，开启服务降级，也可以指定服务响应的超时的时间\"},\"4926\":{\"t\":\"feign: # 开启feign对hystrix熔断降级的支持 hystrix: enabled: true # 修改调用超时时间 client: config: default: connectTimeout: 2000 readTimeout: 2000 \"},\"4927\":{\"h\":\"openfeign的使用\",\"a\":\"openfeign的使用\"},\"4928\":{\"t\":\"IWemediaClient：\"},\"4929\":{\"t\":\"package com.xy.apis.wemedia; import com.xy.model.common.dtos.ResponseResult; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; @FeignClient(\\\"leadnews-wemedia\\\") public interface IWemediaClient { @GetMapping(\\\"/api/v1/channel/list\\\") public ResponseResult getChannels(); } \"},\"4930\":{\"t\":\"WemediaClient：\"},\"4931\":{\"t\":\"package com.xy.wemedia.feign; import com.xy.apis.wemedia.IWemediaClient; import com.xy.model.common.dtos.ResponseResult; import com.xy.wemedia.service.WmChannelService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class WemediaClient implements IWemediaClient { @Autowired private WmChannelService wmChannelService; @GetMapping(\\\"/api/v1/channel/list\\\") @Override public ResponseResult getChannels() { return wmChannelService.findAll(); } } \"},\"4932\":{\"t\":\"IScheduleClient：\"},\"4933\":{\"t\":\"package com.xy.apis.schedule; import com.xy.model.common.dtos.ResponseResult; import com.xy.model.schedule.dtos.Task; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; /** * @author 杨路恒 */ @FeignClient(\\\"leadnews-schedule\\\") public interface IScheduleClient { /** * 添加任务 * @param task 任务对象 * @return 任务id */ @PostMapping(\\\"/api/v1/task/add\\\") public ResponseResult addTask(@RequestBody Task task); /** * 取消任务 * @param taskId 任务id * @return 取消结果 */ @GetMapping(\\\"/api/v1/task/cancel/{taskId}\\\") public ResponseResult cancelTask(@PathVariable(\\\"taskId\\\") long taskId); /** * 按照类型和优先级来拉取任务 * @param type * @param priority * @return */ @GetMapping(\\\"/api/v1/task/pull/{type}/{priority}\\\") public ResponseResult pull(@PathVariable(\\\"type\\\") int type,@PathVariable(\\\"priority\\\") int priority); } \"},\"4934\":{\"t\":\"ScheduleClient：\"},\"4935\":{\"t\":\"package com.xy.schedule.feign; import com.xy.model.common.dtos.ResponseResult; import com.xy.model.schedule.dtos.Task; import com.xy.schedule.service.TaskService; import com.xy.apis.schedule.IScheduleClient; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.*; /** * @author 杨路恒 */ @RestController public class ScheduleClient implements IScheduleClient { @Autowired private TaskService taskService; /** * 添加任务 * @param task 任务对象 * @return */ @PostMapping(\\\"/api/v1/task/add\\\") public ResponseResult addTask(@RequestBody Task task) { return ResponseResult.okResult(taskService.addTask(task)); } /** * 取消任务 * @param taskId 任务id * @return */ @GetMapping(\\\"/api/v1/task/cancel/{taskId}\\\") public ResponseResult cancelTask(@PathVariable(\\\"taskId\\\") long taskId) { return ResponseResult.okResult(taskService.cancelTask(taskId)); } /** * 按照类型和优先级来拉取任务 * @param type * @param priority * @return */ @GetMapping(\\\"/api/v1/task/pull/{type}/{priority}\\\") public ResponseResult pull(@PathVariable(\\\"type\\\") int type,@PathVariable(\\\"priority\\\") int priority) { return ResponseResult.okResult(taskService.pull(type,priority)); } } \"},\"4936\":{\"h\":\"2.12素材列表查询\",\"a\":\"_2-12素材列表查询\"},\"4937\":{\"t\":\"在自媒体引导类中天mybatis-plus的分页拦截器：\"},\"4938\":{\"t\":\"package com.xy.wemedia; import com.baomidou.mybatisplus.annotation.DbType; import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor; import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor; import org.mybatis.spring.annotation.MapperScan; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.openfeign.EnableFeignClients; import org.springframework.context.annotation.Bean; import org.springframework.scheduling.annotation.EnableAsync; import org.springframework.scheduling.annotation.EnableScheduling; /** * @author 杨路恒 */ @SpringBootApplication @EnableDiscoveryClient @MapperScan(\\\"com.xy.wemedia.mapper\\\") @EnableFeignClients(basePackages = \\\"com.xy.apis\\\") @EnableAsync //开启异步调用 @EnableScheduling //开启调度任务 public class WemediaApplication { public static void main(String[] args) { SpringApplication.run(WemediaApplication.class,args); } /** * 分页拦截器 * @return */ @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; } } \"},\"4939\":{\"t\":\"MyBatis Plus 是一个基于 MyBatis 的增强工具，它提供了很多方便的功能来简化数据库访问和操作。MyBatis Plus Interceptor 是 MyBatis Plus 的一个重要组件，用于在 MyBatis 执行 SQL 语句前后进行拦截和增强，实现各种功能，如分页查询、多租户支持、性能分析、乐观锁、逻辑删除等。\"},\"4940\":{\"t\":\"MyBatis Plus Interceptor 的原理如下：\"},\"4941\":{\"t\":\"拦截器接口：MyBatis Plus Interceptor 是一个接口，它定义了两个核心方法：intercept 和 plugin。 \"},\"4942\":{\"t\":\"intercept 方法用于实现具体的拦截逻辑。在该方法中，你可以修改 SQL 语句、参数、执行结果等。\"},\"4943\":{\"t\":\"plugin 方法用于告诉 MyBatis Plus 该拦截器是否要拦截某个 Statement（SQL 语句执行对象）。\"},\"4944\":{\"t\":\"自定义拦截器：开发者可以自定义拦截器，实现 Interceptor 接口，然后将自定义的拦截器注册到 MyBatis Plus 中。\"},\"4945\":{\"t\":\"注册拦截器：在 MyBatis Plus 配置文件（通常是 XML 或 Java 配置类）中，你可以通过配置来注册自定义的拦截器。这样，当执行 SQL 语句时，拦截器会按照注册的顺序依次执行。\"},\"4946\":{\"t\":\"执行顺序：拦截器按照注册的顺序依次执行，首先执行第一个拦截器的 intercept 方法，然后将结果传递给下一个拦截器，直到所有拦截器都执行完毕。这允许多个拦截器协同工作，每个拦截器可以处理不同的任务。\"},\"4947\":{\"t\":\"功能增强：通过拦截器，你可以实现各种功能的增强，例如： \"},\"4948\":{\"t\":\"分页查询：拦截查询 SQL，添加分页参数。\"},\"4949\":{\"t\":\"多租户支持：拦截查询 SQL，添加租户信息过滤条件。\"},\"4950\":{\"t\":\"性能分析：记录 SQL 执行时间等性能数据。\"},\"4951\":{\"t\":\"乐观锁：在更新操作前检查版本号。\"},\"4952\":{\"t\":\"逻辑删除：在删除操作前标记数据为已删除状态，而不是物理删除。\"},\"4953\":{\"t\":\"MyBatis Plus Interceptor 的原理是基于 Java 动态代理和反射机制实现的，它可以在 SQL 执行前后，对 SQL 语句和参数进行修改，或者对查询结果进行处理，从而实现各种功能的增强和定制。\"},\"4954\":{\"t\":\"MyBatis Plus 的分页插件是一个用于实现分页查询的重要组件，它基于 MyBatis 原生的 SQL 进行分页操作，而无需手动编写复杂的分页 SQL 语句。分页插件的原理如下：\"},\"4955\":{\"t\":\"分页查询条件构建：在代码中，你可以使用 MyBatis Plus 提供的 Page 类来构建分页查询条件。这包括指定要查询的页码、每页记录数以及其他查询条件，例如排序条件、查询条件等。\"},\"4956\":{\"t\":\"分页查询拦截：当执行一个带有分页条件的查询时，MyBatis Plus 的分页插件会拦截该查询请求。这是通过 MyBatis 的拦截器机制实现的。\"},\"4957\":{\"t\":\"SQL 重写：分页插件会在拦截的时候对原始的 SQL 语句进行重写，以包含分页逻辑。这通常涉及到以下操作： \"},\"4958\":{\"t\":\"将原始的查询语句包装在一个外部查询中，该外部查询会限制结果集的范围，以满足分页条件。\"},\"4959\":{\"t\":\"添加 LIMIT 或 OFFSET 子句（具体取决于数据库的支持情况）来限制结果集的大小和偏移量。\"},\"4960\":{\"t\":\"修改查询语句中的排序条件，以确保结果的顺序正确。\"},\"4961\":{\"t\":\"SQL 参数处理：分页插件还会根据分页条件中的页码和每页记录数，计算出适当的偏移量和限制值，并将它们添加到 SQL 语句中。这确保了只返回分页查询条件指定的结果子集。\"},\"4962\":{\"t\":\"执行查询：经过 SQL 重写和参数处理后，MyBatis 执行修改后的 SQL 语句，从数据库中检索出分页结果集。\"},\"4963\":{\"t\":\"结果封装：查询结果被封装到一个 Page 对象中，该对象包括了查询的结果列表以及有关分页信息的元数据，如总记录数、总页数、当前页码等。\"},\"4964\":{\"t\":\"返回结果：分页查询的结果 Page 对象被返回给调用方，允许应用程序访问和操作分页数据。\"},\"4965\":{\"t\":\"总的来说，MyBatis Plus 分页插件的原理是在查询前拦截查询请求，重写 SQL 语句以包含分页逻辑，执行查询，将结果封装到一个 Page 对象中，最终返回给调用方。\"},\"4966\":{\"h\":\"2.13分布式id\",\"a\":\"_2-13分布式id\"},\"4967\":{\"t\":\"随着业务的增长，文章表可能要占用很大的物理存储空间，为了解决该问题，后期使用数据库分片技术。将一个数据库进行拆分，通过数据库中间件连接。如果数据库中该表选用ID自增策略，则可能产生重复的ID，此时应该使用分布式ID生成策略来生成ID。\"},\"4968\":{\"t\":\"snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。\"},\"4969\":{\"t\":\"文章端相关的表都使用雪花算法生成id,包括ap_article、 ap_article_config、 ap_article_content\"},\"4970\":{\"t\":\"mybatis-plus已经集成了雪花算法，完成以下两步即可在项目中集成雪花算法\"},\"4971\":{\"t\":\"第一：在实体类中的id上加入如下配置，指定类型为id_worker\"},\"4972\":{\"t\":\"@TableId(value = \\\"id\\\",type = IdType.ID_WORKER) private Long id; \"},\"4973\":{\"t\":\"第二：在application.yml文件中配置数据中心id和机器id\"},\"4974\":{\"t\":\"mybatis-plus: mapper-locations: classpath*:mapper/*.xml # 设置别名包扫描路径，通过该属性可以给包中的类注册别名 type-aliases-package: com.heima.model.article.pojos global-config: datacenter-id: 1 workerId: 1 \"},\"4975\":{\"t\":\"datacenter-id:数据中心id(取值范围：0-31)\"},\"4976\":{\"t\":\"workerId:机器id(取值范围：0-31)\"},\"4977\":{\"h\":\"2.14自媒体文章上下架\",\"a\":\"_2-14自媒体文章上下架\"},\"4978\":{\"t\":\"自媒体微服务发送消息，WmNewsServiceImpl：\"},\"4979\":{\"t\":\"public ResponseResult downOrUp(WmNewsDto wmNewsDto) { //1.检查参数 if (wmNewsDto.getId() == null){ return ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID); } //2.查询文章 WmNews wmNews = getById(wmNewsDto.getId()); if (wmNews == null){ return ResponseResult.errorResult(AppHttpCodeEnum.DATA_NOT_EXIST,\\\"文章不存在\\\"); } //3.判断文章是否已发布 if (!wmNews.getStatus().equals(WmNews.Status.PUBLISHED.getCode())){ return ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID,\\\"当前文章不是发布状态，不能上下架\\\"); } //4.修改文章enable if (wmNewsDto != null && wmNewsDto.getEnable() > -1 && wmNewsDto.getEnable() < 2){ update(Wrappers.<WmNews>lambdaUpdate().set(WmNews::getEnable,wmNewsDto.getEnable()).eq(WmNews::getId,wmNews.getId())); //发送消息，通知article端修改文章配置 if (wmNews.getArticleId() != null){ Map<String,Object> map = new HashMap<>(); map.put(\\\"articleId\\\",wmNews.getArticleId()); map.put(\\\"enable\\\",wmNews.getEnable()); kafkaTemplate.send(WmNewsMessageConstants.WM_NEWS_UP_OR_DOWN_TOPIC,JSON.toJSONString(map)); } } return ResponseResult.okResult(AppHttpCodeEnum.SUCCESS); } \"},\"4980\":{\"t\":\"在article端编写监听，接收数据， ArticleIsDownListener：\"},\"4981\":{\"t\":\"package com.xy.article.listener; import com.alibaba.fastjson.JSON; import com.xy.common.constants.WmNewsMessageConstants; import com.xy.article.service.ApArticleConfigService; import lombok.extern.slf4j.Slf4j; import org.apache.commons.lang3.StringUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.kafka.annotation.KafkaListener; import org.springframework.stereotype.Component; import java.util.Map; /** * @author 杨路恒 */ @Component @Slf4j public class ArticleIsDownListener { @Autowired private ApArticleConfigService apArticleConfigService; @KafkaListener(topics = WmNewsMessageConstants.WM_NEWS_UP_OR_DOWN_TOPIC) public void onMessage(String message) { if (StringUtils.isNoneBlank(message)){ Map map = JSON.parseObject(message, Map.class); apArticleConfigService.updateByMap(map); log.info(\\\"article端文章配置修改，articleId={}\\\",map.get(\\\"articleId\\\")); } } } \"},\"4982\":{\"h\":\"2.15es文章自动审核完成构建索引\",\"a\":\"_2-15es文章自动审核完成构建索引\"},\"4983\":{\"t\":\"文章微服务发送消息， ArticleFreemarkerServiceImpl：\"},\"4984\":{\"t\":\"private void createArticleESIndex(ApArticle apArticle, String content, String path) { SearchArticleVo vo = new SearchArticleVo(); BeanUtils.copyProperties(apArticle,vo); vo.setContent(content); vo.setStaticUrl(path); kafkaTemplate.send(ArticleConstants.ARTICLE_ES_SYNC_TOPIC, JSON.toJSONString(vo)); } \"},\"4985\":{\"t\":\"搜索微服务接收消息并创建索引， SyncArticleListener：\"},\"4986\":{\"t\":\"package com.xy.search.listener; import com.alibaba.fastjson.JSON; import com.xy.common.constants.ArticleConstants; import com.xy.model.search.vos.SearchArticleVo; import lombok.extern.slf4j.Slf4j; import org.apache.commons.lang3.StringUtils; import org.elasticsearch.action.index.IndexRequest; import org.elasticsearch.client.RequestOptions; import org.elasticsearch.client.RestHighLevelClient; import org.elasticsearch.common.xcontent.XContentType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.kafka.annotation.KafkaListener; import org.springframework.stereotype.Component; import java.io.IOException; /** * @author 杨路恒 */ @Component @Slf4j public class SyncArticleListener { @Autowired private RestHighLevelClient restHighLevelClient; @KafkaListener(topics = ArticleConstants.ARTICLE_ES_SYNC_TOPIC) public void onMessage(String message){ if(StringUtils.isNotBlank(message)){ log.info(\\\"SyncArticleListener,message={}\\\",message); SearchArticleVo searchArticleVo = JSON.parseObject(message, SearchArticleVo.class); IndexRequest indexRequest = new IndexRequest(\\\"app_info_article\\\"); indexRequest.id(searchArticleVo.getId().toString()); indexRequest.source(message, XContentType.JSON); try { restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT); } catch (IOException e) { e.printStackTrace(); log.error(\\\"sync es error={}\\\",e); } } } } \"},\"4987\":{\"h\":\"2.16xxljob热点文章定时任务\",\"a\":\"_2-16xxljob热点文章定时任务\"},\"4988\":{\"t\":\"实现思路：\"},\"4989\":{\"t\":\"频道列表远程接口准备：\"},\"4990\":{\"t\":\"计算完成新热数据后，需要给每个频道缓存一份数据，所以需要查询所有频道信息。\"},\"4991\":{\"t\":\"IWemediaClient：\"},\"4992\":{\"t\":\"package com.xy.article.service; /** * @author 杨路恒 */ public interface HotArticleService { /** * 计算热点文章 */ public void computeHotArticle(); } \"},\"4993\":{\"t\":\"WemediaClient：\"},\"4994\":{\"t\":\"package com.xy.wemedia.feign; import com.xy.apis.wemedia.IWemediaClient; import com.xy.model.common.dtos.ResponseResult; import com.xy.wemedia.service.WmChannelService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class WemediaClient implements IWemediaClient { @Autowired private WmChannelService wmChannelService; @GetMapping(\\\"/api/v1/channel/list\\\") @Override public ResponseResult getChannels() { return wmChannelService.findAll(); } } \"},\"4995\":{\"t\":\"定义业务层接口，在article微服务中新建任务类：\"},\"4996\":{\"t\":\"ComputeHotArticleJob：\"},\"4997\":{\"t\":\"package com.xy.article.job; import com.xy.article.service.HotArticleService; import com.xxl.job.core.handler.annotation.XxlJob; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; /** * @author 杨路恒 */ @Component @Slf4j public class ComputeHotArticleJob { @Autowired private HotArticleService hotArticleService; @XxlJob(\\\"computeHotArticleJob\\\") public void handle(){ log.info(\\\"热文章分值计算调度任务开始执行...\\\"); hotArticleService.computeHotArticle(); log.info(\\\"热文章分值计算调度任务结束...\\\"); } } \"},\"4998\":{\"t\":\"HotArticleServiceImpl：\"},\"4999\":{\"t\":\"package com.xy.article.service.impl; import com.alibaba.fastjson.JSON; import com.xy.common.constants.ArticleConstants; import com.xy.common.redis.CacheService; import com.xy.model.article.pojos.ApArticle; import com.xy.model.article.vos.HotArticleVo; import com.xy.model.common.dtos.ResponseResult; import com.xy.model.wemedia.pojos.WmChannel; import com.xy.apis.wemedia.IWemediaClient; import com.xy.article.mapper.ApArticleMapper; import com.xy.article.service.HotArticleService; import lombok.extern.slf4j.Slf4j; import org.joda.time.DateTime; import org.springframework.beans.BeanUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import java.util.ArrayList; import java.util.Comparator; import java.util.Date; import java.util.List; import java.util.stream.Collectors; /** * @author 杨路恒 */ @Service @Transactional @Slf4j public class HotArticleServiceImpl implements HotArticleService { @Autowired private ApArticleMapper apArticleMapper; /** * 计算热点文章 */ @Override public void computeHotArticle() { //1.查询前5天的文章数据 Date date = DateTime.now().minusDays(50).toDate(); List<ApArticle> articleListByLast5days = apArticleMapper.findArticleListByLast5days(date); //2.计算文章的分值 List<HotArticleVo> hotArticleVoList = computeHotArticle(articleListByLast5days); //3.为每个频道缓存30条分值较高的文章 cacheTagToRedis(hotArticleVoList); } @Autowired private IWemediaClient iWemediaClient; @Autowired private CacheService cacheService; /** * 为每个频道缓存30条分值较高的文章 * @param hotArticleVoList */ private void cacheTagToRedis(List<HotArticleVo> hotArticleVoList) { //为每个频道缓存30条分值较高的文章 ResponseResult responseResult = iWemediaClient.getChannels(); if (responseResult.getCode().equals(200)){ String jsonString = JSON.toJSONString(responseResult.getData()); List<WmChannel> wmChannels = JSON.parseArray(jsonString, WmChannel.class); //检索出每个频道的文章 if (wmChannels != null && wmChannels.size() > 0){ for (WmChannel wmChannel : wmChannels) { List<HotArticleVo> hotArticleVos = hotArticleVoList.stream().filter(x -> x.getChannelId().equals(wmChannel.getId())).collect(Collectors.toList()); //给文章进行排序，取30条分值较高的文章存入redis key：频道id value：30条分值较高的文章 sortAndCache(hotArticleVos, ArticleConstants.HOT_ARTICLE_FIRST_PAGE + wmChannel.getId()); } } } //设置推荐数据 //给文章进行排序，取30条分值较高的文章存入redis key：频道id value：30条分值较高的文章 sortAndCache(hotArticleVoList,ArticleConstants.HOT_ARTICLE_FIRST_PAGE + ArticleConstants.DEFAULT_TAG); } /** * 排序并且缓存数据 * @param hotArticleVos * @param s */ private void sortAndCache(List<HotArticleVo> hotArticleVos, String s) { hotArticleVos = hotArticleVos.stream().sorted(Comparator.comparing(HotArticleVo::getScore).reversed()).collect(Collectors.toList()); if (hotArticleVos.size() > 30) { hotArticleVos = hotArticleVos.subList(0,30); } cacheService.set(s,JSON.toJSONString(hotArticleVos)); } /** * 计算文章分值 * @param articleListByLast5days * @return */ private List<HotArticleVo> computeHotArticle(List<ApArticle> articleListByLast5days) { List<HotArticleVo> hotArticleVoList = new ArrayList<>(); if (articleListByLast5days != null && articleListByLast5days.size() > 0) { for (ApArticle apArticle : articleListByLast5days) { HotArticleVo hotArticleVo = new HotArticleVo(); BeanUtils.copyProperties(apArticle,hotArticleVo); Integer score = computeScore(apArticle); hotArticleVo.setScore(score); hotArticleVoList.add(hotArticleVo); } } return hotArticleVoList; } /** * 计算文章的具体分值 * @param apArticle * @return */ private Integer computeScore(ApArticle apArticle) { Integer score = 0; if (apArticle.getLikes() != null){ score += apArticle.getLikes() + ArticleConstants.HOT_ARTICLE_LIKE_WEIGHT; } if (apArticle.getViews() != null){ score += apArticle.getViews(); } if (apArticle.getComment() != null){ score += apArticle.getComment() + ArticleConstants.HOT_ARTICLE_COMMENT_WEIGHT; } if (apArticle.getCollection() != null){ score += apArticle.getCollection() + ArticleConstants.HOT_ARTICLE_COLLECTION_WEIGHT; } return score; } } \"},\"5000\":{\"t\":\"待优化：\"},\"5001\":{\"t\":\"使用FastDFS作为静态资源存储器，在其上实现热静态资源缓存、淘汰等功能（待优化）\"},\"5002\":{\"t\":\"运用Hbase技术，存储系统中的冷数据，保证系统数据的可靠性（待优化）\"},\"5003\":{\"t\":\"运用ES搜索技术，对冷数据、文章数据建立索引，以保证冷数据、文章查询性能（待优化）\"},\"5004\":{\"t\":\"当用户 Logout 的话，JWT 也还有效。除非，我们在后端增加额外的处理逻辑比如将失效的 JWT 存储起来，后端先验证 JWT 是否有效再进行处理。\"},\"5005\":{\"h\":\"3.QPS估算方法、性能测试：\",\"a\":\"_3-qps估算方法、性能测试\"},\"5006\":{\"t\":\"QPS（Query Per Second）：每秒请求数，就是说服务器在一秒的时间内处理了多少个请求。\"},\"5007\":{\"t\":\"怎么估出每秒钟能处理多少请求呢？\"},\"5008\":{\"t\":\"方式一:自己在接口里记录\"},\"5009\":{\"t\":\"这种方式指的是在你的接口里，日志记录了能体现该接口特性的，并具有唯一性的字符串！\"},\"5010\":{\"t\":\"例如，下面这一段代码：\"},\"5011\":{\"t\":\"@RestController @RequestMapping(\\\"/home\\\") public class IndexController { //省略 @RequestMapping(\\\"/index\\\") String index() { logger.info(\\\"渣渣烟\\\"); return \\\"index\\\"; } } \"},\"5012\":{\"t\":\"假设现在我要统计index这个接口的QPS！\"},\"5013\":{\"t\":\"OK，什么叫能体现该接口特性的字符串呢！就像上面的\\\"渣渣烟\\\"这个字符串，只在index这个接口里出现过，没在其他其他接口里出现过！因此，只要统计出\\\"渣渣烟\\\"这个字符串在日志里的出现次数，就能知道该接口的请求次数！\"},\"5014\":{\"t\":\"什么叫具有唯一性的字符串呢！所谓唯一性，指的是\\\"渣渣烟\\\"这个字符串，在这个接口的一次调用流程中，只出现一次！如果出现两次，就会导致到时候统计出来的次数会多一倍，所以尽量选择具有唯一性的字段！\"},\"5015\":{\"t\":\"方式二:利用tomcat的access log\"},\"5016\":{\"t\":\"tomcat自带的access log功能：\"},\"5017\":{\"t\":\"server.tomcat.accesslog.directory 设定log的目录，默认: logs server.tomcat.accesslog.enabled 是否开启access log，默认: false \"},\"5018\":{\"t\":\"此时，你访问一次/home/index地址，会有下面这样日志：\"},\"5019\":{\"t\":\"127.0.0.1 - - [xxx] \\\"POST /home/index HTTP/1.1\\\" 200 138 \"},\"5020\":{\"t\":\"执行一串命令：\"},\"5021\":{\"t\":\"cat xx.log |grep 'GET /mvc2'|cut -d ' ' -f4|uniq -c|sort -n -r \"},\"5022\":{\"t\":\"JMeter测试：\"},\"5023\":{\"h\":\"自我介绍：\",\"a\":\"自我介绍\"},\"5024\":{\"t\":\"面试官，您好，首先很感谢您给我的面试机会！我叫杨路恒，今年24岁，山东济宁人，就读于陕西师范大学，今年研二，软件工程专业，研究方向为知识图谱。大学时间我主要利用课外时间学习了 Java 以及 一些框架 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的粉丝数达到了3k+，访问量达到了44W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"5025\":{\"h\":\"项目中常用技术一：MD5\"},\"5026\":{\"h\":\"1.MD5\",\"a\":\"_1-md5\"},\"5027\":{\"h\":\"1.1什么是MD5？\",\"a\":\"_1-1什么是md5\"},\"5028\":{\"t\":\"MD5（Message Digest Algorithm 5），消息摘要算法第五版。\"},\"5029\":{\"t\":\"消息摘要算法又称为哈希算法、散列算法，输出的消息摘要又称为哈希值、散列值。\"},\"5030\":{\"h\":\"1.2MD5的特点\",\"a\":\"_1-2md5的特点\"},\"5031\":{\"t\":\"压缩性：MD5可以将任意长度的输入转化为128位长度的输出；\"},\"5032\":{\"t\":\"不可逆性：MD5是不可逆的，我们无法通过常规方式从MD5值倒推出它的原文；\"},\"5033\":{\"t\":\"抗修改性：对原文做一丁点儿改动，MD5值就会有巨大的变动，也就是说就算两个MD5值非常相似，你也不能想当然地认为它们俩对应的原文也非常相似。\"},\"5034\":{\"t\":\"容易计算：从原数据计算出MD5值很容易。\"},\"5035\":{\"h\":\"1.3MD5的问题\",\"a\":\"_1-3md5的问题\"},\"5036\":{\"t\":\"因为MD5是不可逆的，所以MD5是安全的。但是2004年，山东大学的王小云教授在美国加州举办的密码学会议上宣布破解了MD5，其实并不是真正的破解，而是非常明显地加快了反向查询的速度，在当时计算机的计算能力下，利用她们的技术，可以在几个小时内就找到一个MD5值对应的原文。因为MD5可以被暴力破解，所以MD5不再是安全的了，对安全性要求较高的场合，不建议直接使用MD5。\"},\"5037\":{\"h\":\"1.4MD5的应用场景\",\"a\":\"_1-4md5的应用场景\"},\"5038\":{\"h\":\"1.4.1 对密码加密\",\"a\":\"_1-4-1-对密码加密\"},\"5039\":{\"t\":\"MD5可以用来对密码加密，防止密码被窃听。\"},\"5040\":{\"t\":\"为什么要对密码加密\"},\"5041\":{\"t\":\"比如一个用户的用户名为18666666666，密码为123456，那么如果不对密码加密，客户端在注册或登录的时候，就是明文传输密码http://localhost:8080/hw/register|login?username=18666666666&password=123456，传输过程中一旦请求被截获，用户的密码就被泄漏了；再者服务器的数据库中也是明文存储密码\"},\"5042\":{\"t\":\"username\"},\"5043\":{\"t\":\"password\"},\"5044\":{\"t\":\"18666666666\"},\"5045\":{\"t\":\"123456\"},\"5046\":{\"t\":\"一旦数据库泄漏，用户的密码就被泄漏了。\"},\"5047\":{\"t\":\"而如果我们使用了MD5对密码加密，客户端在注册或登录的时候，就是密文传输密码http://localhost:8080/hw/register|login?username=18666666666&password=e10adc3949ba59abbe56e057f20f883e，传输过程中即便请求被截获，用户的密码也不会被泄漏；再者服务器的数据库中也是密文存储密码\"},\"5048\":{\"t\":\"username\"},\"5049\":{\"t\":\"password\"},\"5050\":{\"t\":\"18666666666\"},\"5051\":{\"t\":\"e10adc3949ba59abbe56e057f20f883e\"},\"5052\":{\"t\":\"就算数据库泄漏，用户的密码也不会被泄漏。\"},\"5053\":{\"t\":\"彩虹表\"},\"5054\":{\"t\":\"攻击者创建了一个叫彩虹表的东西，它是一个非常庞大的数据库，里面收集了所有常用的密码，以及这些密码对应的MD5值、SHA-1值等，现在主流的彩虹表记录数据约90万亿条，占用硬盘超过500TB。有了彩虹表，攻击者就可以通过穷举法反向查询出MD5值、SHA-1值等对应的原文，因此如果你的密码很不幸被搜集在彩虹表里，就可能被破解掉，这也是为什么很多场合我们输密码的时候，有字母数字下划线大小写等乱七八糟各种要求，目的就是尽量使得明文密码的复杂度增加一些，尽量使得明文密码及其MD5值、SHA-1值等不被收集在彩虹表里。\"},\"5055\":{\"t\":\"如果有一个预先计算好的常用口令和它们的 MD5的对照表（如下表），那么通过查表方式，时间上将大大减少，而这个表就叫做彩虹表：\"},\"5056\":{\"t\":\"常用口令\"},\"5057\":{\"t\":\"MD5\"},\"5058\":{\"t\":\"hello123\"},\"5059\":{\"t\":\"f30aa7a662c728b7407c54ae6bfd27d1\"},\"5060\":{\"t\":\"12345678\"},\"5061\":{\"t\":\"25d55ad283aa400af464c76d713c07ad\"},\"5062\":{\"t\":\"passw0rd\"},\"5063\":{\"t\":\"bed128365216c019988915ed3add75fb\"},\"5064\":{\"t\":\"19700101\"},\"5065\":{\"t\":\"570da6d5277a646f6552b8832012f5dc\"},\"5066\":{\"t\":\"…\"},\"5067\":{\"t\":\"…\"},\"5068\":{\"t\":\"20201231\"},\"5069\":{\"t\":\"6879c0ae9117b50074ce0a0d4c843060\"},\"5070\":{\"t\":\"加盐Sault\"},\"5071\":{\"t\":\"可见直接使用MD5加密是不安全的，但是我们可以加盐。加盐是指在密码的任意位置插入一些指定的字符串（即盐值salt），加盐的目的也是为了尽量增强明文密码的复杂度，尽量使得明文密码及其MD5值、SHA-1值等不被收集在彩虹表里。\"},\"5072\":{\"t\":\"加盐流程：\"},\"5073\":{\"t\":\"用户注册时\"},\"5074\":{\"t\":\"用户输入【账号】和【密码】（以及其他用户信息）；\"},\"5075\":{\"t\":\"系统为用户生成【Salt值】；\"},\"5076\":{\"t\":\"系统将【Salt值】和【用户密码】连接到一起；\"},\"5077\":{\"t\":\"对连接后的值进行散列，得到【Hash1值】；\"},\"5078\":{\"t\":\"将【Hash1值】和【Salt值】分别放到数据库中。\"},\"5079\":{\"t\":\"用户登录时\"},\"5080\":{\"t\":\"用户输入【账号】和【密码】；\"},\"5081\":{\"t\":\"系统通过用户名找到与之对应的【Hash值】和【Salt值】；\"},\"5082\":{\"t\":\"系统将【Salt值】和【用户输入的密码】连接到一起；\"},\"5083\":{\"t\":\"对连接后的值进行散列，得到【Hash2值】（注意是即时运算出来的值）；\"},\"5084\":{\"t\":\"比较【Hash1值】和【Hash2值】是否相等，相等则表示密码正确，否则表示密码错误。\"},\"5085\":{\"h\":\"1.4.2 生成数字签名\",\"a\":\"_1-4-2-生成数字签名\"},\"5086\":{\"t\":\"MD5可以用来生成数字签名，验证数据是否被篡改。\"},\"5087\":{\"h\":\"1.5MD5是是对称加密还是非对称加密？\",\"a\":\"_1-5md5是是对称加密还是非对称加密\"},\"5088\":{\"t\":\"小羊在昨天2023.5.19下午等了将近十多分钟面试官才进面试，结果面试官问我MD5，我当时一脸懵逼，只听他说MD5是一个非对称加密算法，我当时信以为真。我就去总结MD5相关的知识，结果发现面试官说错了。话不多说，直接发车！\"},\"5089\":{\"t\":\"在计算机信息安全领域，经常应用到MD5、对称加密、非对称加密。在密码学的应用和研究中，DES、RSA、SHA等加密算法占据着重要的位置。随着人们对加密强度需求的不断提高，近期出现了很多加密算法，如AES、ECC等。那么，哪些算法是对称加密，哪些是非对称加密；对称加密和非对称加密有哪些优缺点，MD5是对称加密还是非对称加密？\"},\"5090\":{\"t\":\"我们先来了解一下加密算法的基础北背景。\"},\"5091\":{\"h\":\"1.5.1对称加密算法有哪些？\",\"a\":\"_1-5-1对称加密算法有哪些\"},\"5092\":{\"t\":\"对称密码算法又叫传统密码算法，也就是加密密钥能够从解密密钥中推算出来，反过来也成立。在大多数对称算法中，加密解密密钥是相同的。常见的对称加密算法有：DES、IDEA、AES、SM1和SM4。\"},\"5093\":{\"h\":\"1.5.2非对称加密算法有哪些？\",\"a\":\"_1-5-2非对称加密算法有哪些\"},\"5094\":{\"t\":\"非对称密钥也叫公开密钥加密,它是用两个数学相关的密钥对信息进行编码。在此系统中，其中一个密钥叫公开密钥，可随意发给期望同密钥持有者进行安全通信的人。公开密钥用于对信息加密。第二个密钥是私有密钥，属于密钥持有者，此人要仔细保存私有密钥。密钥持有者用私有密钥对收到的信息进行解密。常见的非对称加密算法有：RSA、ECC、SM2。\"},\"5095\":{\"h\":\"1.5.3MD5是对称加密还是非对称加密？\",\"a\":\"_1-5-3md5是对称加密还是非对称加密\"},\"5096\":{\"t\":\"这个问题有人吐槽过，面试官竟然问MD5是对称加密还是非对称加密？其实，MD5不是加密算法，md5实际上既不是对称算法，也不是非对称加密算法。它是消息摘要（安全散列）算法。\"},\"5097\":{\"t\":\"俺也要吐槽一下。\"},\"5098\":{\"h\":\"1.5.4对称加密和非对称加密有哪些优缺点？\",\"a\":\"_1-5-4对称加密和非对称加密有哪些优缺点\"},\"5099\":{\"t\":\"对称加密优点：速度快，对称性加密通常在消息发送方需要加密大量数据时使用，具有算法公开、计算量小、加密速度快、加密效率高的特点。对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性。\"},\"5100\":{\"t\":\"对称加密的缺点：密钥的管理和分发非常困难，不够安全。在数据传送前，发送方和接收方必须商定好秘钥，并且双方都要保存好密钥，如果一方的密钥被泄露，那么加密信息也就不安全了，安全性得不到保证。\"},\"5101\":{\"t\":\"非对称加密优点：安全性更高，公钥是公开的，秘钥是自己保存的，不需要将私钥给别人。\"},\"5102\":{\"t\":\"非对称加密缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。\"},\"5103\":{\"t\":\"参考：https://www.jianshu.com/p/38c93c677124、https://blog.csdn.net/m0_69916115/article/details/126145847、https://blog.csdn.net/qq_42992084/article/details/112252684\"},\"5104\":{\"h\":\"2.BeanUtils\",\"a\":\"_2-beanutils\"},\"5105\":{\"t\":\"BeanUtils是深拷贝，还是浅拷贝?\"},\"5106\":{\"t\":\"BeanUtils.copyProperties是浅拷贝。\"},\"5107\":{\"t\":\"浅拷贝：只是调用子对象的set方法，并没有将所有属性拷贝。(也就是说，引用的一个内存地址)\"},\"5108\":{\"t\":\"浅拷贝对于基本数据类型就是直接进行值传递，在内存的另一个空间内存放，修改这个值不会影响到拷贝源的值\"},\"5109\":{\"t\":\"浅拷贝对于引用数据类型就是进行的是地址传递，并没有对该对象重新开辟一个内存空间进行存放，所以对于引用数据类型的浅拷贝就相当于两个引用指向了同一个内存地址\"},\"5110\":{\"t\":\"深拷贝：将子对象的属性也拷贝过去。\"},\"5111\":{\"t\":\"深拷贝就是将目标对象的属性全部复制一份给源对象，复制完之后他们就是隔开的，没有任何关系，无论操作源对象还是目标对象都对另一个没有影响\"},\"5112\":{\"t\":\"无论是浅拷贝还是深拷贝，对于基本类型和String来说都是没有影响的，有影响的只有引用类型数据。\"},\"5113\":{\"t\":\"什么情况适合用BeanUtils？\"},\"5114\":{\"t\":\"如果都是单一的属性，那么不涉及到深拷贝的问题，适合用BeanUtils。\"},\"5115\":{\"t\":\"参考：https://blog.csdn.net/Wushli77/article/details/132516671\"},\"5116\":{\"h\":\"主要功能与配置演示\"},\"5117\":{\"h\":\"目录\",\"a\":\"目录\"},\"5118\":{\"t\":\"Markdown 展示\"},\"5119\":{\"t\":\"页面展示\"},\"5120\":{\"t\":\"禁用展示\"},\"5121\":{\"t\":\"加密展示\"},\"5122\":{\"h\":\"布局与功能禁用\"},\"5123\":{\"t\":\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\"},\"5124\":{\"t\":\"本页面就是一个示例，禁用了如下功能:\"},\"5125\":{\"t\":\"导航栏\"},\"5126\":{\"t\":\"侧边栏\"},\"5127\":{\"t\":\"路径导航\"},\"5128\":{\"t\":\"页面信息\"},\"5129\":{\"t\":\"贡献者\"},\"5130\":{\"t\":\"编辑此页链接\"},\"5131\":{\"t\":\"更新时间\"},\"5132\":{\"t\":\"上一篇/下一篇 链接\"},\"5133\":{\"t\":\"评论\"},\"5134\":{\"t\":\"页脚\"},\"5135\":{\"t\":\"返回顶部按钮\"},\"5136\":{\"h\":\"密码加密的文章\"},\"5137\":{\"t\":\"实际的文章内容。\"},\"5138\":{\"t\":\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\"},\"5139\":{\"t\":\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"},\"5140\":{\"h\":\"Markdown 展示\"},\"5141\":{\"t\":\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\"},\"5142\":{\"t\":\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"},\"5143\":{\"h\":\"Markdown 介绍\",\"a\":\"markdown-介绍\"},\"5144\":{\"t\":\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"},\"5145\":{\"h\":\"Markdown 配置\",\"a\":\"markdown-配置\"},\"5146\":{\"t\":\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\"},\"5147\":{\"t\":\"相关信息\"},\"5148\":{\"t\":\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"},\"5149\":{\"h\":\"Markdown 扩展\",\"a\":\"markdown-扩展\"},\"5150\":{\"t\":\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"},\"5151\":{\"h\":\"VuePress 扩展\",\"a\":\"vuepress-扩展\"},\"5152\":{\"t\":\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\"},\"5153\":{\"t\":\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"},\"5154\":{\"h\":\"主题扩展\",\"a\":\"主题扩展\"},\"5155\":{\"t\":\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"},\"5156\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"5157\":{\"t\":\"安全的在 Markdown 中使用 {{ variable }}。\"},\"5158\":{\"t\":\"自定义标题\"},\"5159\":{\"t\":\"信息容器，包含 代码 与 链接。\"},\"5160\":{\"t\":\"const a = 1; \"},\"5161\":{\"t\":\"自定义标题\"},\"5162\":{\"t\":\"提示容器\"},\"5163\":{\"t\":\"自定义标题\"},\"5164\":{\"t\":\"警告容器\"},\"5165\":{\"t\":\"自定义标题\"},\"5166\":{\"t\":\"危险容器\"},\"5167\":{\"t\":\"自定义标题\"},\"5168\":{\"t\":\"详情容器\"},\"5169\":{\"t\":\"查看详情\"},\"5170\":{\"h\":\"代码块\",\"a\":\"代码块\"},\"5171\":{\"t\":\"查看详情\"},\"5172\":{\"h\":\"上下角标\",\"a\":\"上下角标\"},\"5173\":{\"t\":\"19th H2O\"},\"5174\":{\"t\":\"查看详情\"},\"5175\":{\"h\":\"自定义对齐\",\"a\":\"自定义对齐\"},\"5176\":{\"t\":\"我是居中的\"},\"5177\":{\"t\":\"我在右对齐\"},\"5178\":{\"t\":\"查看详情\"},\"5179\":{\"h\":\"Attrs\",\"a\":\"attrs\"},\"5180\":{\"t\":\"一个拥有 ID 的 单词。\"},\"5181\":{\"t\":\"查看详情\"},\"5182\":{\"h\":\"脚注\",\"a\":\"脚注\"},\"5183\":{\"t\":\"此文字有脚注[1].\"},\"5184\":{\"t\":\"查看详情\"},\"5185\":{\"h\":\"标记\",\"a\":\"标记\"},\"5186\":{\"t\":\"你可以标记 重要的内容 。\"},\"5187\":{\"t\":\"查看详情\"},\"5188\":{\"h\":\"任务列表\",\"a\":\"任务列表\"},\"5189\":{\"t\":\" 计划 1\"},\"5190\":{\"t\":\" 计划 2\"},\"5191\":{\"t\":\"查看详情\"},\"5192\":{\"h\":\"图片增强\",\"a\":\"图片增强\"},\"5193\":{\"t\":\"支持为图片设置颜色模式和大小\"},\"5194\":{\"t\":\"查看详情\"},\"5195\":{\"h\":\"卡片\",\"a\":\"卡片\"},\"5196\":{\"t\":\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mrhope.site/logo.svg link: https://mrhope.site color: rgba(253, 230, 138, 0.15) \"},\"5197\":{\"t\":\"查看详情\"},\"5198\":{\"h\":\"图表\",\"a\":\"图表\"},\"5199\":{\"t\":\"查看详情\"},\"5200\":{\"h\":\"Echarts\",\"a\":\"echarts\"},\"5201\":{\"t\":\"查看详情\"},\"5202\":{\"h\":\"流程图\",\"a\":\"流程图\"},\"5203\":{\"t\":\"查看详情\"},\"5204\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"5205\":{\"t\":\"查看详情\"},\"5206\":{\"h\":\"Tex 语法\",\"a\":\"tex-语法\"},\"5207\":{\"t\":\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\"},\"5208\":{\"t\":\"查看详情\"},\"5209\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"5210\":{\"t\":\"Markdown 展示\"},\"5211\":{\"t\":\"页面展示\"},\"5212\":{\"t\":\"禁用展示\"},\"5213\":{\"t\":\"加密展示\"},\"5214\":{\"t\":\"查看详情\"},\"5215\":{\"h\":\"代码演示\",\"a\":\"代码演示\"},\"5216\":{\"t\":\"查看详情\"},\"5217\":{\"h\":\"样式化\",\"a\":\"样式化\"},\"5218\":{\"t\":\"向 Mr.Hope 捐赠一杯咖啡。 \"},\"5219\":{\"t\":\"查看详情\"},\"5220\":{\"h\":\"交互演示\",\"a\":\"交互演示\"},\"5221\":{\"t\":\"查看详情\"},\"5222\":{\"h\":\"Vue 交互演示\",\"a\":\"vue-交互演示\"},\"5223\":{\"t\":\"查看详情\"},\"5224\":{\"h\":\"幻灯片\",\"a\":\"幻灯片\"},\"5225\":{\"t\":\"查看详情\"},\"5226\":{\"t\":\"这是脚注内容 ↩︎\"},\"5227\":{\"h\":\"页面配置\"},\"5228\":{\"t\":\"more 注释之前的内容被视为文章摘要。\"},\"5229\":{\"h\":\"页面信息\",\"a\":\"页面信息\"},\"5230\":{\"t\":\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\"},\"5231\":{\"t\":\"作者设置为 Ms.Hope。\"},\"5232\":{\"t\":\"写作日期为 2020 年 1 月 1 日\"},\"5233\":{\"t\":\"分类为 “使用指南”\"},\"5234\":{\"t\":\"标签为 “页面配置” 和 “使用指南”\"},\"5235\":{\"h\":\"页面内容\",\"a\":\"页面内容\"},\"5236\":{\"t\":\"你可以自由在这里书写你的 Markdown。\"},\"5237\":{\"t\":\"提示\"},\"5238\":{\"t\":\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\"},\"5239\":{\"t\":\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"},\"5240\":{\"t\":\"主题包含了一个自定义徽章可以使用:\"},\"5241\":{\"t\":\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"},\"5242\":{\"h\":\"页面结构\",\"a\":\"页面结构\"},\"5243\":{\"t\":\"此页面应当包含:\"},\"5244\":{\"t\":\"路径导航\"},\"5245\":{\"t\":\"标题和页面信息\"},\"5246\":{\"t\":\"TOC (文章标题列表)\"},\"5247\":{\"t\":\"贡献者、更新时间等页面元信息\"},\"5248\":{\"t\":\"评论\"},\"5249\":{\"t\":\"导航栏\"},\"5250\":{\"t\":\"侧边栏\"},\"5251\":{\"t\":\"页脚\"},\"5252\":{\"t\":\"返回顶部按钮\"},\"5253\":{\"t\":\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"},\"5254\":{\"h\":\"指南\"},\"5255\":{\"h\":\"功能亮点\",\"a\":\"功能亮点\"},\"5256\":{\"h\":\"Bar\",\"a\":\"bar\"},\"5257\":{\"t\":\"baz\"},\"5258\":{\"t\":\"...\"},\"5259\":{\"h\":\"Foo\",\"a\":\"foo\"},\"5260\":{\"t\":\"ray\"},\"5261\":{\"t\":\"...\"},\"5262\":{\"h\":\"写在前面\"},\"5263\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"5264\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"5265\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"5266\":{\"h\":\"Bar 功能\"},\"5267\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"5268\":{\"t\":\"我们支持 bar 功能，...\"},\"5269\":{\"h\":\"详情\",\"a\":\"详情\"},\"5270\":{\"t\":\"baz\"},\"5271\":{\"t\":\"...\"},\"5272\":{\"h\":\"Baz\"},\"5273\":{\"t\":\"功能详情...\"},\"5274\":{\"h\":\"Foo 功能\"},\"5275\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"5276\":{\"t\":\"我们支持 foo 功能，...\"},\"5277\":{\"h\":\"详情\",\"a\":\"详情\"},\"5278\":{\"t\":\"ray\"},\"5279\":{\"t\":\"...\"},\"5280\":{\"h\":\"Ray\"},\"5281\":{\"t\":\"功能详情...\"},\"5282\":{\"h\":\"JVM\"},\"5283\":{\"h\":\"二：JVM\",\"a\":\"二-jvm\"},\"5284\":{\"h\":\"基本概念\",\"a\":\"基本概念\"},\"5285\":{\"h\":\"说一下 Jvm 的主要组成部分？及其作用？\",\"a\":\"说一下-jvm-的主要组成部分-及其作用\"},\"5286\":{\"t\":\"类加载器（ClassLoader）\"},\"5287\":{\"t\":\"运行时数据区（Runtime Data Area）\"},\"5288\":{\"t\":\"执行引擎（Execution Engine）\"},\"5289\":{\"t\":\"本地库接口（Native Interface）\"},\"5290\":{\"t\":\"首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\"},\"5291\":{\"h\":\"内存结构（运行时数据区）\",\"a\":\"内存结构-运行时数据区\"},\"5292\":{\"h\":\"垃圾回收机制\",\"a\":\"垃圾回收机制\"},\"5293\":{\"h\":\"如何判断对象是否可回收？\",\"a\":\"如何判断对象是否可回收\"},\"5294\":{\"h\":\"垃圾回收算法\",\"a\":\"垃圾回收算法\"},\"5295\":{\"h\":\"垃圾收集器\",\"a\":\"垃圾收集器\"},\"5296\":{\"h\":\"类加载机制\",\"a\":\"类加载机制\"},\"5297\":{\"h\":\"类的生命周期\",\"a\":\"类的生命周期\"},\"5298\":{\"t\":\"类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，前三个阶段可以统称为连接（Linking）。\"},\"5299\":{\"t\":\"这 7 个阶段的顺序如下图所示：\"},\"5300\":{\"t\":\"一个类的完整生命周期\"},\"5301\":{\"h\":\"类加载过程\",\"a\":\"类加载过程\"},\"5302\":{\"t\":\"Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？\"},\"5303\":{\"t\":\"系统加载 Class 类型的文件主要三步：加载->连接->初始化。连接过程又可分为三步：验证->准备->解析。\"},\"5304\":{\"t\":\"类加载过程\"},\"5305\":{\"h\":\"类加载器\",\"a\":\"类加载器\"},\"5306\":{\"h\":\"介绍：\",\"a\":\"介绍\"},\"5307\":{\"t\":\"类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。\"},\"5308\":{\"t\":\"每个 Java 类都有一个引用指向加载它的 ClassLoader。\"},\"5309\":{\"t\":\"数组类不是通过 ClassLoader 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。\"},\"5310\":{\"t\":\"简单来说，类加载器的主要作用就是加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。\"},\"5311\":{\"h\":\"类加载器加载规则\",\"a\":\"类加载器加载规则\"},\"5312\":{\"t\":\"JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。\"},\"5313\":{\"t\":\"对于已经加载的类会被放在 ClassLoader 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。\"},\"5314\":{\"h\":\"类加载器总结\",\"a\":\"类加载器总结\"},\"5315\":{\"t\":\"JVM 中内置了三个重要的 ClassLoader：\"},\"5316\":{\"t\":\"BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ %JAVA_HOME%/lib目录下的 rt.jar 、resources.jar 、charsets.jar等 jar 包和类）以及被 -Xbootclasspath参数指定的路径下的所有类。\"},\"5317\":{\"t\":\"ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类以及被 java.ext.dirs 系统变量所指定的路径下的所有类。\"},\"5318\":{\"t\":\"AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。\"},\"5319\":{\"t\":\"除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ .class 文件）进行加密，加载时再利用自定义的类加载器对其解密。\"},\"5320\":{\"t\":\"如果我们要自定义自己的类加载器，很明显需要继承 ClassLoader抽象类。\"},\"5321\":{\"t\":\"ClassLoader 类有两个关键的方法：\"},\"5322\":{\"t\":\"protected Class loadClass(String name, boolean resolve)：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resove 如果为 true，在加载时调用 resolveClass(Class<?> c) 方法解析该类。\"},\"5323\":{\"t\":\"protected Class findClass(String name)：根据类的二进制名称来查找类，默认实现是空方法。\"},\"5324\":{\"t\":\"官方 API 文档中写到：\"},\"5325\":{\"t\":\"Subclasses of ClassLoader are encouraged to override findClass(String name), rather than this method.\"},\"5326\":{\"t\":\"建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。\"},\"5327\":{\"t\":\"如果我们不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 loadClass() 方法。\"},\"5328\":{\"t\":\"类加载器层次关系图\"},\"5329\":{\"h\":\"双亲委派模型\",\"a\":\"双亲委派模型\"},\"5330\":{\"t\":\"类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载呢？这就需要提到双亲委派模型了。\"},\"5331\":{\"t\":\"ClassLoader 类使用委托模型来搜索类和资源。\"},\"5332\":{\"t\":\"双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。\"},\"5333\":{\"t\":\"ClassLoader 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。\"},\"5334\":{\"t\":\"下图展示的各种类加载器之间的层次关系被称为类加载器的“双亲委派模型(Parents Delegation Model)”。\"},\"5335\":{\"t\":\"类加载器层次关系图\"},\"5336\":{\"t\":\"双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在 java.lang.ClassLoader 的 loadClass() 中，相关代码如下所示。\"},\"5337\":{\"t\":\"protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { //首先，检查该类是否已经加载过 Class c = findLoadedClass(name); if (c == null) { //如果 c 为 null，则说明该类没有被加载过 long t0 = System.nanoTime(); try { if (parent != null) { //当父类的加载器不为空，则通过父类的loadClass来加载该类 c = parent.loadClass(name, false); } else { //当父类的加载器为空，则调用启动类加载器来加载该类 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { //非空父类的类加载器无法找到相应的类，则抛出异常 } if (c == null) { //当父类加载器无法加载时，则调用findClass方法来加载该类 //用户可通过覆写该方法，来自定义类加载器 long t1 = System.nanoTime(); c = findClass(name); //用于统计类加载器相关的信息 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { //对类进行link操作 resolveClass(c); } return c; } } \"},\"5338\":{\"t\":\"每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。\"},\"5339\":{\"t\":\"结合上面的源码，简单总结一下双亲委派模型的执行流程：\"},\"5340\":{\"t\":\"在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。\"},\"5341\":{\"t\":\"类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 BootstrapClassLoader 中。\"},\"5342\":{\"t\":\"只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 findClass() 方法来加载类）。\"},\"5343\":{\"t\":\"优点：\"},\"5344\":{\"t\":\"双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。\"},\"5345\":{\"h\":\"Java基础\"},\"5346\":{\"h\":\"一：Java基础\",\"a\":\"一-java基础\"},\"5347\":{\"t\":\"HashMap、HashTable：https://blog.csdn.net/yang13563758128/article/details/86655574?spm=1001.2014.3001.5502\"},\"5348\":{\"h\":\"异常\",\"a\":\"异常\"},\"5349\":{\"h\":\"Java异常类层次结构?\",\"a\":\"java异常类层次结构\"},\"5350\":{\"t\":\"Throwable是 Java 语言中所有错误与异常的超类。 \"},\"5351\":{\"t\":\"Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。\"},\"5352\":{\"t\":\"Exception 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。\"},\"5353\":{\"t\":\"运行时异常\"},\"5354\":{\"t\":\"都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。\"},\"5355\":{\"t\":\"运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。\"},\"5356\":{\"t\":\"非运行时异常 （编译异常）\"},\"5357\":{\"t\":\"是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。\"},\"5358\":{\"h\":\"可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）区别？\",\"a\":\"可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions-区别\"},\"5359\":{\"t\":\"可查异常（编译器要求必须处置的异常）：\"},\"5360\":{\"t\":\"正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。\"},\"5361\":{\"t\":\"除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。\"},\"5362\":{\"t\":\"不可查异常(编译器不要求强制处置的异常)\"},\"5363\":{\"t\":\"包括运行时异常（RuntimeException与其子类）和错误（Error）。\"},\"5364\":{\"h\":\"throw和throws的区别？\",\"a\":\"throw和throws的区别\"},\"5365\":{\"t\":\"异常的申明(throws)\"},\"5366\":{\"t\":\"在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：\"},\"5367\":{\"t\":\"public static void method() throws IOException, FileNotFoundException{ //something statements } \"},\"5368\":{\"t\":\"异常的抛出(throw)\"},\"5369\":{\"t\":\"如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：\"},\"5370\":{\"t\":\"public static double method(int value) { if(value == 0) { throw new ArithmeticException(\\\"参数不能为0\\\"); //抛出一个运行时异常 } return 5.0 / value; } \"},\"5371\":{\"h\":\"Java 7 的 try-with-resource?\",\"a\":\"java-7-的-try-with-resource\"},\"5372\":{\"t\":\"如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。\"},\"5373\":{\"t\":\"public void automaticallyCloseResource() { File file = new File(\\\"./tmp.txt\\\"); try (FileInputStream inputStream = new FileInputStream(file);) { // use the inputStream to read a file } catch (FileNotFoundException e) { log.error(e); } catch (IOException e) { log.error(e); } } \"},\"5374\":{\"h\":\"异常的底层？\",\"a\":\"异常的底层\"},\"5375\":{\"t\":\"提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。\"},\"5376\":{\"t\":\"public static void simpleTryCatch() { try { testNPE(); } catch (Exception e) { e.printStackTrace(); } } \"},\"5377\":{\"t\":\"使用javap来分析这段代码（需要先使用javac编译）：\"},\"5378\":{\"t\":\"//javap -c Main public static void simpleTryCatch(); Code: 0: invokestatic #3 // Method testNPE:()V 3: goto 11 6: astore_0 7: aload_0 8: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 11: return Exception table: from to target type 0 3 6 Class java/lang/Exception \"},\"5379\":{\"t\":\"看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。\"},\"5380\":{\"t\":\"异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下\"},\"5381\":{\"t\":\"from 可能发生异常的起始点\"},\"5382\":{\"t\":\"to 可能发生异常的结束点\"},\"5383\":{\"t\":\"target 上述from和to之前发生异常后的异常处理者的位置\"},\"5384\":{\"t\":\"type 异常处理者处理的异常的类信息\"},\"5385\":{\"h\":\"反射\",\"a\":\"反射\"},\"5386\":{\"h\":\"什么是反射机制?\",\"a\":\"什么是反射机制\"},\"5387\":{\"t\":\"JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制。\"},\"5388\":{\"t\":\"直接new对象就叫正射。\"},\"5389\":{\"t\":\"如下:\"},\"5390\":{\"t\":\"Map<String, String> map = new HashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"5391\":{\"t\":\"那反射是啥？我先不说反射是啥，概念啥的太虚幻我就不说了，把你绕蒙你这篇文章就白看了，直接举例吧\"},\"5392\":{\"t\":\"接着看上面的正射，如果哪天你发现用LinkedHashMap效果更好，然后你修改代码：\"},\"5393\":{\"t\":\"Map<String, String> map = new LinkedHashMap<>(); map.put(\\\"蔡徐鸡\\\",\\\"唱跳rap篮球\\\"); \"},\"5394\":{\"t\":\"改完了编译运行没有bug然而过了两天你发现用LinkedHashMap会有隐患，还是得改回去用HashMap，成年人的崩溃如此简单，但是聪明的你想到可以加个判断，根据传入的条件来决定用HashMap还是LinkedHashMap，于是：\"},\"5395\":{\"t\":\"public Map<String, String> getMap(String param) { Map<String, String> map = null; if (param.equals(\\\"HashMap\\\")) { map = new HashMap<>(); } else if (param.equals(\\\"LinkedHashMap\\\")) { map = new LinkedHashMap<>(); } return map; } \"},\"5396\":{\"t\":\"大功告成，这么难的逻辑都被你实现了，然后你得用TreeMap，你又要改代码。\"},\"5397\":{\"t\":\"有没有一种办法可以让你不修改代码呢，这时候反射就派上用场了。\"},\"5398\":{\"t\":\"概念：反射是Java的一种机制，让我们可以在运行时获取类的信息\"},\"5399\":{\"t\":\"作用：通过反射，我们可以在程序运行时动态创建对象，还能获取到类的所有信息，比如它的属性、构造器、方法、注解等；\"},\"5400\":{\"t\":\"直接举例吧：\"},\"5401\":{\"t\":\"public Map<String, String> getMap(String className) { Class clazz = Class.forName(className); Constructor constructor = clazz.getConstructor(); return (Map<String, String>) constructor.newInstance(); } \"},\"5402\":{\"t\":\"这时候不管你需要什么Map，只要实现了Map接口，你都能通过getMap获得，只需要传入对应Map的全限定名，例如java.util.HashMap / java.util.LinkedHashMap。\"},\"5403\":{\"t\":\"java中反射的用法非常非常多，常见的有以下这几个：\"},\"5404\":{\"t\":\"一、在运行时获取一个类的 Class 对象 二、在运行时构造一个类的实例化对象 三、在运行时获取一个类的所有信息：变量、方法、构造器、注解 \"},\"5405\":{\"h\":\"一、获取class对象\",\"a\":\"一、获取class对象\"},\"5406\":{\"t\":\"三种方法 1、类名.class：这种获取方式只有在编译前已经声明了该类的类型才能获取到 Class 对象\"},\"5407\":{\"t\":\"Class<HashMap> hashMap= HashMap.class; \"},\"5408\":{\"t\":\"2、实例.getClass()：通过实例化对象获取该实例的 Class 对象\"},\"5409\":{\"t\":\"Map<String, String> hashMap = new HashMap<>(); Class<? extends Map> hashMapClass = hashMap.getClass(); \"},\"5410\":{\"t\":\"3、Class.forName(“类的全限定名”)：通过类的全限定名获取该类的 Class 对象\"},\"5411\":{\"t\":\"Class<?> hashMap= Class.forName(\\\"java.util.HashMap\\\"); \"},\"5412\":{\"t\":\"拿到 Class对象就可以对它为所欲为了：调用它的方法、获取属性、获取类信息，总之它在你面前就没有隐私了，好羞羞，嘤~。\"},\"5413\":{\"h\":\"二、构造类的实例化对象\",\"a\":\"二、构造类的实例化对象\"},\"5414\":{\"t\":\"通过反射构造一个类的实例方式有2种： 1、Class 对象调用newInstance()方法\"},\"5415\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); HashMap hashMapInstance = (HashMap) hashMapClass.newInstance(); \"},\"5416\":{\"t\":\"注意：即使 HashMap已经显式定义了构造方法，通过 newInstance() 创建的实例中，所有属性值都是对应类型的初始值，因为 newInstance() 构造实例会调用默认无参构造器。\"},\"5417\":{\"t\":\"2、Constructor 构造器调用newInstance()方法\"},\"5418\":{\"t\":\"Class<?> hashMapClass = Class.forName(\\\"java.util.HashMap\\\"); Constructor<?> constructor = hashMapClass.getConstructor(); constructor.setAccessible(true); HashMap newInstance = (HashMap) constructor.newInstance(); \"},\"5419\":{\"t\":\"通过 getConstructor(Object… paramTypes) 方法指定获取指定参数类型的 Constructor， Constructor 调用 newInstance(Object… paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。\"},\"5420\":{\"t\":\"通过Class对象调用 newInstance() 会走默认无参构造方法，如果想通过显式构造方法构造实例，需要提前从Class中调用getConstructor()方法获取对应的构造器，通过构造器去实例化对象。\"},\"5421\":{\"h\":\"三、获取类的所有信息\",\"a\":\"三、获取类的所有信息\"},\"5422\":{\"t\":\"1、获取类中的变量（Field）\"},\"5423\":{\"t\":\"Field[] getFields()：获取类中所有被public修饰的所有变量 Field getField(String name)：根据变量名获取类中的一个变量，该变量必须被public修饰 Field[] getDeclaredFields()：获取类中所有的变量，但无法获取继承下来的变量 Field getDeclaredField(String name)：根据姓名获取类中的某个变量，无法获取继承下来的变量 \"},\"5424\":{\"t\":\"2、获取类中的方法（Method）\"},\"5425\":{\"t\":\"Method[] getMethods()：获取类中被public修饰的所有方法 Method getMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，该方法必须被public修饰 Method[] getDeclaredMethods()：获取所有方法，但无法获取继承下来的方法 Method getDeclaredMethod(String name, Class…<?> paramTypes)：根据名字和参数类型获取对应方法，无法获取继承下来的方法 \"},\"5426\":{\"t\":\"3、获取类的构造器（Constructor）\"},\"5427\":{\"t\":\"Constuctor[] getConstructors()：获取类中所有被public修饰的构造器 Constructor getConstructor(Class…<?> paramTypes)：根据参数类型获取类中某个构造器，该构造器必须被public修饰 Constructor[] getDeclaredConstructors()：获取类中所有构造器 Constructor getDeclaredConstructor(class…<?> paramTypes)：根据参数类型获取对应的构造器 \"},\"5428\":{\"t\":\"反射的应用场景\"},\"5429\":{\"t\":\"1、Spring 实例化对象：当程序启动时，Spring 会读取配置文件applicationContext.xml并解析出里面所有的标签实例化到IOC容器中。 2、反射 + 工厂模式：通过反射消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，反射可以使得程序更加健壮。 3、JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的驱动类时用到反射加载驱动类 \"},\"5430\":{\"t\":\"参考：https://blog.csdn.net/qq_33709582/article/details/113550163\"},\"5431\":{\"h\":\"List\",\"a\":\"list\"},\"5432\":{\"h\":\"Set\",\"a\":\"set\"},\"5433\":{\"h\":\"Map\",\"a\":\"map\"},\"5434\":{\"h\":\"为什么JDK1.8中HashMap从头插入改成尾插入\",\"a\":\"为什么jdk1-8中hashmap从头插入改成尾插入\"},\"5435\":{\"t\":\"原文链接：https://blog.csdn.net/qq_35590459/article/details/108988011\"},\"5436\":{\"t\":\"JDK1.7中扩容时，每个元素的rehash之后，都会插入到新数组对应索引的链表头，所以这就导致原链表顺序为A->B->C，扩容之后，rehash之后的链表可能为C->B->A，元素的顺序发生了变化。在并发场景下，扩容时可能会出现循环链表的情况。而JDK1.8从头插入改成尾插入元素的顺序不变，避免出现循环链表的情况。\"},\"5437\":{\"h\":\"为什么JDK1.8采用红黑树存储 Hash 冲突的元素？\",\"a\":\"为什么jdk1-8采用红黑树存储hash冲突的元素\"},\"5438\":{\"t\":\"红黑树本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为O(log n)。能够加快检索速率。\"},\"5439\":{\"h\":\"为什么在长度小于8时使用链表，不一直使用红黑树？\",\"a\":\"为什么在长度小于8时使用链表-不一直使用红黑树\"},\"5440\":{\"t\":\"桶中元素的插入只会在hash冲突时发生，而hash冲突发生的概率较小，一直维护一个红黑树比链表耗费资源更多，在桶中元素量较小时没有这个必要。\"},\"5441\":{\"h\":\"为什么要使用红黑树而不使用AVL树？\",\"a\":\"为什么要使用红黑树而不使用avl树\"},\"5442\":{\"t\":\"红黑树与AVLl树，在检索的时候效率差不多，都是通过平衡来二分查找。但红黑树不像avl树一样追求绝对的平衡，红黑树允许局部很少的不完全平衡，这样对于效率影响不大，但省去了很多没有必要的调平衡操作，avl树调平衡有时候代价较大，所以效率不如红黑树。\"},\"5443\":{\"h\":\"为什么数组容量必须是2次幂？\",\"a\":\"为什么数组容量必须是2次幂\"},\"5444\":{\"t\":\"索引计算公式为i = (n - 1) & hash，如果n为2次幂，那么n-1的低位就全是1，哈希值进行与操作时可以保证低位的值不变，从而保证分布均匀，效果等同于hash%n，但是位运算比取余运算要高效的多。\"},\"5445\":{\"h\":\"为什么单链表转为红黑树要求桶内的元素个数大于8？\",\"a\":\"为什么单链表转为红黑树要求桶内的元素个数大于8\"},\"5446\":{\"t\":\"当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，而一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件。\"},\"5447\":{\"t\":\"同理，少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗，而选择8作为临界值，是因理想情况下一个bin中元素个数达到6的概率是0.00001316，达到7的概率为0.00000094，二者跨度较大，可以减小树和链表之间频繁转化的可能性。\"},\"5448\":{\"h\":\"数据结构\",\"a\":\"数据结构\"},\"5449\":{\"h\":\"数组\",\"a\":\"数组\"},\"5450\":{\"h\":\"链表\",\"a\":\"链表\"},\"5451\":{\"h\":\"栈\",\"a\":\"栈\"},\"5452\":{\"h\":\"队列\",\"a\":\"队列\"},\"5453\":{\"h\":\"二叉树\",\"a\":\"二叉树\"},\"5454\":{\"h\":\"红黑树\",\"a\":\"红黑树\"},\"5455\":{\"h\":\"1.简介\",\"a\":\"_1-简介\"},\"5456\":{\"t\":\"红黑树是一种自平衡的二叉查找树，是一种高效的查找树。红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作。\"},\"5457\":{\"h\":\"2.为什么需要红黑树？\",\"a\":\"_2-为什么需要红黑树\"},\"5458\":{\"t\":\"对于二叉搜索树，如果插入的数据是随机的，那么它就是接近平衡的二叉树，平衡的二叉树，它的操作效率（查询，插入，删除）效率较高，时间复杂度是O（logN）。但是可能会出现一种极端的情况，那就是插入的数据是有序的（递增或者递减），那么所有的节点都会在根节点的右侧或左侧，此时，二叉搜索树就变为了一个链表，它的操作效率就降低了，时间复杂度为O(N)，所以可以认为二叉搜索树的时间复杂度介于O（logN）和O(N)之间，视情况而定。那么为了应对这种极端情况，红黑树就出现了，它是具备了某些特性的二叉搜索树，能解决非平衡树问题，红黑树是一种接近平衡的二叉树（说它是接近平衡因为它并没有像AVL树的平衡因子的概念，它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构，进而提升整体的性能，并没有严格的卡定某个平衡因子来维持绝对平衡）。\"},\"5459\":{\"h\":\"3.红黑树的特性\",\"a\":\"_3-红黑树的特性\"},\"5460\":{\"t\":\"首先，红黑树是一个二叉搜索树，它在每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK；通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡（最短路径就是全黑节点，最长路径就是一个红节点一个黑节点，当从根节点到叶子节点的路径上黑色节点相同时，最长路径刚好是最短路径的两倍）。它同时满足以下特性：\"},\"5461\":{\"t\":\"节点是红色或黑色\"},\"5462\":{\"t\":\"根是黑色\"},\"5463\":{\"t\":\"叶子节点（外部节点，空节点）都是**黑色，**这里的叶子节点指的是最底层的空节点（外部节点），下图中的那些null节点才是叶子节点，null节点的父节点在红黑树里不将其看作叶子节点\"},\"5464\":{\"t\":\"红色节点的子节点都是黑色；\"},\"5465\":{\"t\":\"红色节点的父节点都是黑色；\"},\"5466\":{\"t\":\"从根节点到叶子节点的所有路径上不能有 2 个连续的红色节点\"},\"5467\":{\"t\":\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\"},\"5468\":{\"t\":\"img\"},\"5469\":{\"h\":\"4.红黑树的效率\",\"a\":\"_4-红黑树的效率\"},\"5470\":{\"t\":\"红黑树的查找，插入和删除操作，时间复杂度都是O(logN)。\"},\"5471\":{\"t\":\"查找操作时，它和普通的相对平衡的二叉搜索树的效率相同，都是通过相同的方式来查找的，没有用到红黑树特有的特性。\"},\"5472\":{\"t\":\"但如果插入的时候是有序数据，那么红黑树的查询效率就比二叉搜索树要高了，因为此时二叉搜索树不是平衡树，它的时间复杂度O(N)。\"},\"5473\":{\"t\":\"插入和删除操作时，由于红黑树的每次操作平均要旋转一次和变换颜色，所以它比普通的二叉搜索树效率要低一点，不过时间复杂度仍然是O(logN)。总之，红黑树的优点就是对有序数据的查询操作不会慢到O(N)的时间复杂度。\"},\"5474\":{\"t\":\"红黑树和AVL树的比较：\"},\"5475\":{\"t\":\"AVL树的时间复杂度虽然优于红黑树，但是对于现在的计算机，cpu太快，可以忽略性能差异\"},\"5476\":{\"t\":\"红黑树的插入删除比AVL树更便于控制操作\"},\"5477\":{\"t\":\"红黑树整体性能略优于AVL树（红黑树旋转情况少于AVL树）\"},\"5478\":{\"h\":\"哈希表结构\",\"a\":\"哈希表结构\"},\"5479\":{\"h\":\"常见的设计模式\",\"a\":\"常见的设计模式\"},\"5480\":{\"h\":\"软件设计原则有哪些？\",\"a\":\"软件设计原则有哪些\"},\"5481\":{\"h\":\"什么是设计模式？\",\"a\":\"什么是设计模式\"},\"5482\":{\"t\":\"设计模式（Design pattern）代表了最佳的实践，通常被有经验的⾯向对象的软件开发⼈员所采⽤。设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案。这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的。\"},\"5483\":{\"t\":\"分为三大类：\"},\"5484\":{\"t\":\"创建型： 在创建对象的同时隐藏创建逻辑，不使⽤ new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括⼯⼚/抽象⼯⼚/单例/建造者/原型模式。 结构型： 通过类和接⼝间的继承和引⽤实现创建复杂结构的对象。包括适配器/桥接模式/过滤器/组合/装饰器/外观/享元/代理模式。 行为型： 通过类之间不同通信⽅式实现不同⾏为。包括责任链/命名/解释器/迭代器/中介者/备忘录/观察者/状态/策略/模板/访问者模式。\"},\"5485\":{\"h\":\"单例模式\",\"a\":\"单例模式\"},\"5486\":{\"t\":\"单例模式属于创建型模式，⼀个单例类在任何情况下都只存在⼀个实例，构造⽅法必须是私有的、由自己创建⼀个静态变量存储实例，对外提供⼀个静态公有方法获取实例。\"},\"5487\":{\"t\":\"双重检查锁（DCL， 即 double-checked locking） 实现代码如下：\"},\"5488\":{\"t\":\"public class Singleton { // 1、私有化构造⽅法 private Singleton() { } // 2、定义⼀个静态变量指向⾃⼰类型 private volatile static Singleton instance; // 3、对外提供⼀个公共的⽅法获取实例 public static Singleton getInstance() { // 第⼀重检查是否为 null if (instance == null) { // 使⽤ synchronized 加锁 synchronized (Singleton.class) { // 第⼆重检查是否为 null if (instance == null) { // new 关键字创建对象不是原⼦操作 instance = new Singleton(); } } } return instance; } } \"},\"5489\":{\"t\":\"优点：懒加载，线程安全，效率较⾼缺点：实现较复杂 这⾥的双重检查是指两次⾮空判断，锁指的是 synchronized 加锁，为什么要进⾏双重判断，其实很简单，第⼀重判断，如果实例已经存在，那么就不再需要进⾏同步操作，⽽是直接返回这个实例，如果没有创建，才会进⼊同步块，同步块的⽬的与之前相同，⽬的是为了防⽌有多个线程同时调⽤时，导致⽣成多个实例，有了同步块，每次只能有⼀个线程调⽤访问同步块内容，当第⼀个抢到锁的调⽤获取了实例之后，这个实例就会被创建，之后的所有调⽤都不会进⼊同步块，直接在第⼀重判断就返回了单例。关于内部的第⼆重空判断的作⽤，当多个线程⼀起到达锁位置时，进⾏锁竞争，其中⼀个线程获取锁，如果是第⼀次进⼊则为 null，会进⾏单例对象的创建，完成后释放锁，其他线程获取锁后就会被空判断拦截，直接返回已创建的单例对象。\"},\"5490\":{\"h\":\"工厂模式\",\"a\":\"工厂模式\"},\"5491\":{\"h\":\"说⼀说简单⼯⼚模式：\",\"a\":\"说一说简单工厂模式\"},\"5492\":{\"t\":\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例，客户端不需要关注创建逻辑，只需提供传⼊⼯⼚的参数。\"},\"5493\":{\"t\":\"适⽤于⼯⼚类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改⼯⼚类的判断逻辑，违背开闭原则，且产品多的话会使⼯⼚类⽐较复杂。\"},\"5494\":{\"t\":\"Spring 中的 BeanFactory 使⽤简单⼯⼚模式，根据传⼊⼀个唯⼀的标识来获得 Bean 对象。\"},\"5495\":{\"h\":\"⼯⼚⽅法模式了解吗：\",\"a\":\"工厂方法模式了解吗\"},\"5496\":{\"t\":\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐，⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚。\"},\"5497\":{\"t\":\"也就是定义⼀个抽象⼯⼚，其定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。这样不⽤通过指定类型来创建对象了。\"},\"5498\":{\"h\":\"抽象⼯⼚模式了解吗：\",\"a\":\"抽象工厂模式了解吗\"},\"5499\":{\"t\":\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象，都只是针对⼀类产品，如果要⽣成另⼀种产品，就⽐较难办了！抽象⼯⼚模式通过在 AbstarctFactory 中增加创建产品的接⼝，并在具体⼦⼯⼚中实现新加产品的创建，当然前提是⼦⼯⼚⽀持⽣产该产品。否则继承的这个接⼝可以什么也不⼲。\"},\"5500\":{\"h\":\"装饰器模式\",\"a\":\"装饰器模式\"},\"5501\":{\"h\":\"代理模式\",\"a\":\"代理模式\"},\"5502\":{\"h\":\"什么是代理模式？\",\"a\":\"什么是代理模式\"},\"5503\":{\"t\":\"代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制，是⼀种结构性模式。\"},\"5504\":{\"h\":\"静态代理和动态代理的区别：\",\"a\":\"静态代理和动态代理的区别\"},\"5505\":{\"t\":\"灵活性 ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。另外，静态代理中，接⼝⼀旦新增加⽅法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！\"},\"5506\":{\"t\":\"JVM 层⾯ ：静态代理在编译时就将接⼝、实现类、代理类这些都变成了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节码，并加载到 JVM 中的。\"},\"5507\":{\"h\":\"静态代理：\",\"a\":\"静态代理\"},\"5508\":{\"t\":\"静态代理中，我们对目标对象的每个方法的增强都是手动完成的（*后面会具体演示代码*），非常不灵活（*比如接口一旦新增加方法，目标对象和代理对象都要进行修改*）且麻烦(*需要对每个目标类都单独写一个代理类*）。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\"},\"5509\":{\"t\":\"上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\"},\"5510\":{\"h\":\"动态代理：\",\"a\":\"动态代理\"},\"5511\":{\"t\":\"相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。\"},\"5512\":{\"t\":\"从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\"},\"5513\":{\"t\":\"说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\"},\"5514\":{\"t\":\"动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\"},\"5515\":{\"t\":\"就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\"},\"5516\":{\"h\":\"JDK 动态代理机制\",\"a\":\"jdk-动态代理机制\"},\"5517\":{\"t\":\"在 Java 动态代理机制中 InvocationHandler 接口和 Proxy 类是核心。\"},\"5518\":{\"t\":\"Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\"},\"5519\":{\"t\":\" public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException { ...... } 这个方法一共有 3 个参数： loader :类加载器，用于加载代理对象。 interfaces : 被代理类实现的一些接口； h : 实现了 InvocationHandler 接口的对象； \"},\"5520\":{\"t\":\"要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\"},\"5521\":{\"t\":\"public interface InvocationHandler { /** * 当你使用代理对象调用方法的时候实际会调用到这个方法 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; } invoke() 方法有下面三个参数： proxy :动态生成的代理类 method : 与代理类对象调用的方法相对应 args : 当前 method 方法的参数 \"},\"5522\":{\"t\":\"也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\"},\"5523\":{\"h\":\"CGLIB 动态代理机制\",\"a\":\"cglib-动态代理机制\"},\"5524\":{\"t\":\"JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。\"},\"5525\":{\"t\":\"为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\"},\"5526\":{\"t\":\"CGLIBCode Generation Library)允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\"},\"5527\":{\"t\":\"在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\"},\"5528\":{\"t\":\"你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\"},\"5529\":{\"t\":\"public interface MethodInterceptor extends Callback{ // 拦截被代理类中的方法 public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy) throws Throwable; } obj : 被代理的对象（需要增强的对象） method : 被拦截的方法（需要增强的方法） args : 方法入参 proxy : 用于调用原始方法 \"},\"5530\":{\"t\":\"你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\"},\"5531\":{\"h\":\"JDK 动态代理和 CGLIB 动态代理对比：\",\"a\":\"jdk-动态代理和-cglib-动态代理对比\"},\"5532\":{\"t\":\"JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\"},\"5533\":{\"t\":\"就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\"},\"5534\":{\"h\":\"框架\"},\"5535\":{\"h\":\"四：Java高级：Spring、SpringMVC、Spring Boot、MyBatis\",\"a\":\"四-java高级-spring、springmvc、spring-boot、mybatis\"},\"5536\":{\"h\":\"AOP和IOC概念\",\"a\":\"aop和ioc概念\"},\"5537\":{\"t\":\"AOP：AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。\"},\"5538\":{\"t\":\"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理。\"},\"5539\":{\"t\":\"IOC： 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。\"},\"5540\":{\"t\":\"为什么叫控制反转？\"},\"5541\":{\"t\":\"控制 ：指的是对象创建（实例化、管理）的权力\"},\"5542\":{\"t\":\"反转 ：控制权交给外部环境（Spring 框架、IoC 容器）\"},\"5543\":{\"h\":\"Bean的生命周期\",\"a\":\"bean的生命周期\"},\"5544\":{\"h\":\"MVC的基本流程\",\"a\":\"mvc的基本流程\"},\"5545\":{\"t\":\"简单来说：客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler -> HandlerAdapter 会根据 Handler 来调用真正的处理器来处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象 -> 前端控制器 DispatcherServlet 渲染数据（Model）-> 将得到视图对象返回给用户。\"},\"5546\":{\"t\":\"image-20210608002334025\"},\"5547\":{\"t\":\"上图用于辅助理解，面试时可用下列 8 步描述 SpringMVC 运行流程：\"},\"5548\":{\"t\":\"用户向服务器发送请求，请求被 Spring 前端控制Servelt DispatcherServlet 捕获；\"},\"5549\":{\"t\":\"DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 对象的形式返回；\"},\"5550\":{\"t\":\"DispatcherServlet 根据获得的 Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得 HandlerAdapter 后，此时将开始执行拦截器的 preHandler(…)方法）\"},\"5551\":{\"t\":\"提取 Request 中的模型数据，填充 Handler 入参，开始执行Handler（Controller)。在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\"},\"5552\":{\"t\":\"（1）HttpMessageConveter：将请求消息（如：Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息；\"},\"5553\":{\"t\":\"（2）数据转换：对请求消息进行数据转换。如：String 转换成 Integer、Double 等；\"},\"5554\":{\"t\":\"（3）数据格式化：对请求消息进行数据格式化。如：将字符串转换成格式化数字或格式化日期等；\"},\"5555\":{\"t\":\"（4）数据验证：验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中;\"},\"5556\":{\"t\":\"5.Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象；\"},\"5557\":{\"t\":\"6.根据返回的 ModelAndView，选择一个适合的 ViewResolver（必须是已经注册到 Spring 容器中的 ViewResolver)返回给DispatcherServlet；\"},\"5558\":{\"t\":\"7.ViewResolver 结合 Model 和 View，来渲染视图；\"},\"5559\":{\"t\":\"8.将渲染结果返回给客户端。\"},\"5560\":{\"h\":\"Spring的设计模式\",\"a\":\"spring的设计模式\"},\"5561\":{\"t\":\"工厂设计模式 : Spring 使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象；\"},\"5562\":{\"t\":\"代理设计模式 : Spring AOP 功能的实现；\"},\"5563\":{\"t\":\"单例设计模式 : Spring 中的 Bean 默认都是单例的；\"},\"5564\":{\"t\":\"模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式；\"},\"5565\":{\"t\":\"包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源；\"},\"5566\":{\"t\":\"观察者模式：Spring 事件驱动模型就是观察者模式很经典的一个应用；\"},\"5567\":{\"t\":\"适配器模式：Spring AOP 的增强或通知(Advice)使用到了适配器模式、SpringMVC 中也是用到了适配器模式适配 Controller。\"},\"5568\":{\"h\":\"Spring事务机制\",\"a\":\"spring事务机制\"},\"5569\":{\"h\":\"谈谈你对 Spring 中的事务的理解？\",\"a\":\"谈谈你对-spring-中的事务的理解\"},\"5570\":{\"t\":\"事务是逻辑上的一组操作，要么都执行，要么都不执行。\"},\"5571\":{\"t\":\"事务特性\"},\"5572\":{\"t\":\"原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\"},\"5573\":{\"t\":\"一致性：执行事务前后，数据保持一致；\"},\"5574\":{\"t\":\"隔离性：并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\"},\"5575\":{\"t\":\"持久性: 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\"},\"5576\":{\"t\":\"Spring 事务管理接口\"},\"5577\":{\"t\":\"PlatformTransactionManager：（平台）事务管理器；\"},\"5578\":{\"t\":\"TransactionDefinition：事务定义信息（事务隔离级别、传播行为、超时、只读、回滚规则）；\"},\"5579\":{\"t\":\"TransactionStatus：事务运行状态；\"},\"5580\":{\"t\":\"所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。\"},\"5581\":{\"h\":\"Spring 中的事务隔离级别？\",\"a\":\"spring-中的事务隔离级别\"},\"5582\":{\"t\":\"TransactionDefinition 接口中定义了五个表示隔离级别的常量：\"},\"5583\":{\"t\":\"TransactionDefinition.ISOLATION_DEFAULT：使用后端数据库默认的隔离级别，MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED 隔离级别；\"},\"5584\":{\"t\":\"TransactionDefinition.ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读；\"},\"5585\":{\"t\":\"TransactionDefinition.ISOLATION_READ_COMMITTED：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生；\"},\"5586\":{\"t\":\"TransactionDefinition.ISOLATION_REPEATABLE_READ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生；\"},\"5587\":{\"t\":\"TransactionDefinition.ISOLATION_SERIALIZABLE：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\"},\"5588\":{\"h\":\"Spring 中的事物传播行为？\",\"a\":\"spring-中的事物传播行为\"},\"5589\":{\"t\":\"事务传播行为是为了解决业务层方法之间互相调用的事务问题。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在 TransactionDefinition 定义中包括了如下几个表示传播行为的常量：\"},\"5590\":{\"t\":\"支持当前事务的情况：\"},\"5591\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务；\"},\"5592\":{\"t\":\"TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行；\"},\"5593\":{\"t\":\"TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\"},\"5594\":{\"t\":\"不支持当前事务的情况：\"},\"5595\":{\"t\":\"TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起；\"},\"5596\":{\"t\":\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\"},\"5597\":{\"t\":\"TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\"},\"5598\":{\"t\":\"其他情况：\"},\"5599\":{\"t\":\"TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 TransactionDefinition.PROPAGATION_REQUIRED。\"},\"5600\":{\"h\":\"Spring如何解决循环依赖问题？\",\"a\":\"spring如何解决循环依赖问题\"},\"5601\":{\"t\":\"了解问题的本质再分析问题，往往更利于对问题有更深入的了解和研究。所以我们在分析 Spring 关于循环依赖的源码之前，先要了解下什么是循环依赖。\"},\"5602\":{\"t\":\"1. 循环依赖的概念\"},\"5603\":{\"t\":\"img\"},\"5604\":{\"t\":\"循环依赖分为三种，自身依赖于自身、互相循环依赖、多组循环依赖。\"},\"5605\":{\"t\":\"但无论循环依赖的数量有多少，循环依赖的本质是一样的。就是你的完整创建依赖于我，而我的完整创建也依赖于你，但我们互相没法解耦，最终导致依赖创建失败。\"},\"5606\":{\"t\":\"所以 Spring 提供了除了构造函数注入和原型注入外的，setter循环依赖注入解决方案。那么我们也可以先来尝试下这样的依赖，如果是我们自己处理的话该怎么解决。\"},\"5607\":{\"t\":\"2. 问题体现\"},\"5608\":{\"t\":\"public class ABTest { public static void main(String[] args) { new ClazzA(); } } class ClazzA { private ClazzB b = new ClazzB(); } class ClazzB { private ClazzA a = new ClazzA(); } \"},\"5609\":{\"t\":\"3.解决方案\"},\"5610\":{\"t\":\"整个解决循环依赖的核心内容，A 创建后填充属性时依赖 B，那么就去创建 B，在创建 B 开始填充时发现依赖于 A，但此时 A 这个半成品对象已经存放在缓存到singletonObjects 中了，所以 B 可以正常创建，在通过递归把 A 也创建完整了。\"},\"5611\":{\"t\":\"4.Spring解决\"},\"5612\":{\"t\":\"（1）一级缓存能解决吗？\"},\"5613\":{\"t\":\"img\"},\"5614\":{\"t\":\"其实只有一级缓存并不是不能解决循环依赖，就像我们自己做的例子一样。\"},\"5615\":{\"t\":\"但是在 Spring 中如果像我们例子里那么处理，就会变得非常麻烦，而且也可能会出现 NPE 问题。\"},\"5616\":{\"t\":\"所以如图按照 Spring 中代码处理的流程，我们去分析一级缓存这样存放成品 Bean 的流程中，是不能解决循环依赖的问题的。因为 A 的成品创建依赖于 B，B的成品创建又依赖于 A，当需要补全B的属性时 A 还是没有创建完，所以会出现死循环。\"},\"5617\":{\"t\":\"（2） 二级缓存能解决吗？\"},\"5618\":{\"t\":\"img\"},\"5619\":{\"t\":\"有了二级缓存其实这个事处理起来就容易了，一个缓存用于存放成品对象，另外一个缓存用于存放半成品对象。\"},\"5620\":{\"t\":\"A 在创建半成品对象后存放到缓存中，接下来补充 A 对象中依赖 B 的属性。\"},\"5621\":{\"t\":\"B 继续创建，创建的半成品同样放到缓存中，在补充对象的 A 属性时，可以从半成品缓存中获取，现在 B 就是一个完整对象了，而接下来像是递归操作一样 A 也是一个完整对象了。\"},\"5622\":{\"t\":\"（3） 三级缓存解决什么？\"},\"5623\":{\"t\":\"img\"},\"5624\":{\"t\":\"有了二级缓存都能解决 Spring 依赖了，怎么要有三级缓存呢。其实我们在前面分析源码时也提到过，三级缓存主要是解决 Spring AOP 的特性。AOP 本身就是对方法的增强，是 ObjectFactory<?> 类型的 lambda 表达式，而 Spring 的原则又不希望将此类类型的 Bean 前置创建，所以要存放到三级缓存中处理。\"},\"5625\":{\"t\":\"其实整体处理过程类似，唯独是 B 在填充属性 A 时，先查询成品缓存、再查半成品缓存，最后在看看有没有单例工程类在三级缓存中。最终获取到以后调用 getObject 方法返回代理引用或者原始引用。\"},\"5626\":{\"t\":\"至此也就解决了 Spring AOP 所带来的三级缓存问题。本章节涉及到的 AOP 依赖有源码例子，可以进行调试\"},\"5627\":{\"t\":\"（4）总结\"},\"5628\":{\"t\":\"回顾本文基本以实际操作的例子开始，引导大家对循环依赖有一个整体的认识，也对它的解决方案可以上手的例子，这样对后续的关于 Spring 对循环依赖的解决也就不会那么陌生了。\"},\"5629\":{\"t\":\"通篇全文下来大家也可以看到，三级缓存并不是非必须不可，只不过在满足 Spring 自身创建的原则下，是必须的。如果你可以下载 Spring 源码对这部分代码进行改动下，提前创建 AOP 对象保存到缓存中，那么二级缓存一样可以解决循环依赖问题。\"},\"5630\":{\"h\":\"Spring Boot自动配置原理\",\"a\":\"spring-boot自动配置原理\"},\"5631\":{\"t\":\"在Spring程序main方法中，添加@SpringBootApplication或者@EnableAutoConfiguration会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建的Spring容器中的bean。Spring Boot 通过@EnableAutoConfiguration开启自动装配，通过 SpringFactoriesLoader 最终加载META-INF/spring.factories中的自动配置类实现自动装配，自动配置类其实就是通过@Conditional按需加载的配置类，想要其生效必须引入spring-boot-starter-xxx包实现起步依赖。\"},\"5632\":{\"t\":\"第 1 步: 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true，可在 application.properties 或 application.yml 中设置 \"},\"5633\":{\"t\":\"img\"},\"5634\":{\"t\":\"第 2 步 ： 用于获取EnableAutoConfiguration注解中的 exclude 和 excludeName。 \"},\"5635\":{\"t\":\"img\"},\"5636\":{\"t\":\"第 3 步： 获取需要自动装配的所有配置类，读取META-INF/spring.factories： spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories \"},\"5637\":{\"t\":\"img\"},\"5638\":{\"t\":\"从下图可以看到这个文件的配置内容都被我们读取到了。XXXAutoConfiguration的作用就是按需加载组件。 不光是这个依赖下的META-INF/spring.factories被读取到，所有 Spring Boot Starter 下的META-INF/spring.factories都会被读取到。 \"},\"5639\":{\"t\":\"img\"},\"5640\":{\"t\":\"参考：https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html#autoconfigurationimportselector-加载自动装配类\"},\"5641\":{\"h\":\"Spring Boot 加载配置文件的优先级了解么？\",\"a\":\"spring-boot-加载配置文件的优先级了解么\"},\"5642\":{\"t\":\"项目启动后扫描顺序：\"},\"5643\":{\"t\":\"1）先去项目根目录找config文件夹下找配置文件件 2）再去根目录下找配置文件 3）去resources下找cofnig文件夹下找配置文件 4）去resources下找配置文件\"},\"5644\":{\"t\":\"在这里插入图片描述\"},\"5645\":{\"h\":\"如何使用 Spring Boot 实现全局异常处理？\",\"a\":\"如何使用-spring-boot-实现全局异常处理\"},\"5646\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485568&idx=2&sn=c5ba880fd0c5d82e39531fa42cb036ac&chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&token=1729829670&lang=zh_CN#rd\"},\"5647\":{\"t\":\"使用 @ControllerAdvice 和 @ExceptionHandler 处理全局异常\"},\"5648\":{\"t\":\"@ExceptionHandler 处理 Controller 级别的异常\"},\"5649\":{\"t\":\"例子：\"},\"5650\":{\"t\":\"CustomException： public class CustomException extends RuntimeException { private AppHttpCodeEnum appHttpCodeEnum; public CustomException(AppHttpCodeEnum appHttpCodeEnum){ this.appHttpCodeEnum = appHttpCodeEnum; } public AppHttpCodeEnum getAppHttpCodeEnum() { return appHttpCodeEnum; } } \"},\"5651\":{\"t\":\"ExceptionCatch： @ControllerAdvice //控制器增强类 @Slf4j public class ExceptionCatch { /** * 处理不可控异常 * @param e * @return */ @ExceptionHandler(Exception.class) @ResponseBody public ResponseResult exception(Exception e){ e.printStackTrace(); log.error(\\\"catch exception:{}\\\",e.getMessage()); return ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR); } /** * 处理可控异常 自定义异常 * @param e * @return */ @ExceptionHandler(CustomException.class) @ResponseBody public ResponseResult exception(CustomException e){ log.error(\\\"catch exception:{}\\\",e); return ResponseResult.errorResult(e.getAppHttpCodeEnum()); } } \"},\"5652\":{\"h\":\"核心配置文件\",\"a\":\"核心配置文件\"},\"5653\":{\"t\":\"SpringBoot的核心配置文件是application和bootstrap配置文件。\"},\"5654\":{\"t\":\"application配置文件这个容易理解，主要用于Spring Boot项目的自动化配置。\"},\"5655\":{\"t\":\"bootstrap配置文件有以下几个应用场景：\"},\"5656\":{\"t\":\"使用Spring Cloud Config配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；\"},\"5657\":{\"t\":\"一些固定的不能被覆盖的属性；\"},\"5658\":{\"t\":\"一些加密/解密的场景；\"},\"5659\":{\"h\":\"实现热部署的方式\",\"a\":\"实现热部署的方式\"},\"5660\":{\"t\":\"这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。\"},\"5661\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> </dependency> \"},\"5662\":{\"h\":\"监视器和监听器\",\"a\":\"监视器和监听器\"},\"5663\":{\"h\":\"监听器\",\"a\":\"监听器\"},\"5664\":{\"t\":\"监听器也叫listener，是servlet的监听器，可以用于监听web应用程序中某些对象的创建、销毁、增加、修改、删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化时，服务器自动调用监听器对象中的方法，常用于系统加载时进行信息初始化，统计在线人数和在线用户，统计网站的访问量。 配置监听器的方法：\"},\"5665\":{\"t\":\"通过@Component把监听器加入Spring容器中管理;\"},\"5666\":{\"t\":\"在application.properties中添加context.listener.classes配置;\"},\"5667\":{\"t\":\"在方法上加@EventListener注解;\"},\"5668\":{\"h\":\"监控器\",\"a\":\"监控器\"},\"5669\":{\"t\":\"actuator\"},\"5670\":{\"t\":\" 这是springboot程序的监控系统，可以实现健康检查，info信息等。在使用之前需要引入`spring-boot-starter-actuator`，并做简单的配置即可。 引入依赖并编写好配置之后，启动项目，访问http://localhost:8080/actuator \"},\"5671\":{\"t\":\"Spring Boot自带监控组件—Actuator，它可以帮助实现对程序内部运行情况的监控。Actuator轻松实现应用程序的监控治理，比如健康状况、审计、统计和HTTP追踪、Bean加载情况、环境变量、日志信息、线程信息等。 Actuator的核心是端点（Endpoint），它用来监视、提供应用程序的信息，Spring Boot提供的spring-boot-actuator组件中已经内置了非常多的Endpoint（health、info、beans、metrics、httptrace、shutdown等），每个端点都可以启用和禁用。\"},\"5672\":{\"h\":\"什么是Spring Boot Starter？有哪些常用的？\",\"a\":\"什么是spring-boot-starter-有哪些常用的\"},\"5673\":{\"t\":\"和自动配置一样，Spring Boot Starter的目的也是简化配置，而Spring Boot Starter解决的是依赖管理配置复杂的问题，有了它，当我需要构建一个Web应用程序时，不必再遍历所有的依赖包，一个一个地添加到项目的依赖管理中，而是只需要一个配置spring-boot-starter-web。\"},\"5674\":{\"t\":\"常用的：\"},\"5675\":{\"t\":\"spring-boot-starter-web - Web 和 RESTful 应用程序\"},\"5676\":{\"t\":\"spring-boot-starter-test - 单元测试和集成测试\"},\"5677\":{\"t\":\"spring-boot-starter-parent有什么作用？\"},\"5678\":{\"t\":\"我们知道，新建一个SpringBoot项目，默认都是有parent的，这个parent就是spring-boot-starter-parent，spring-boot-starter-parent主要有如下作用：\"},\"5679\":{\"t\":\"定义了Java编译版本\"},\"5680\":{\"t\":\"使用UTF-8格式编码\"},\"5681\":{\"t\":\"继承自spring-boor-dependencies，这里面定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号\"},\"5682\":{\"t\":\"执行打包操作的配置\"},\"5683\":{\"t\":\"自动化的资源过滤\"},\"5684\":{\"t\":\"自动化的插件配置\"},\"5685\":{\"h\":\"Spring Boot四大核心组件\",\"a\":\"spring-boot四大核心组件\"},\"5686\":{\"t\":\"四大组件分别是：starter， autoconfigure, CLI 以及actuator。\"},\"5687\":{\"t\":\"autoconfigure在我们的开发中并不会被感知，因为它是存在与我们的starter中的。所以我们的每个starter都是依赖autoconfigure的。\"},\"5688\":{\"t\":\"Spring Boot CLI是一个命令行使用Spring Boot的客户端工具；主要功能如下：\"},\"5689\":{\"t\":\"运行groovy脚本 => 官网2.1\"},\"5690\":{\"t\":\"打包groovy文件到jar => 官网2.3\"},\"5691\":{\"t\":\"初始化Spring Boot项目 => 官网2.4\"},\"5692\":{\"t\":\"其他\"},\"5693\":{\"t\":\"actuator是Spring Boot的监控插件，本身提供了很多接口可以获取当前项目的各项运行状态指标。\"},\"5694\":{\"h\":\"MyBatis Dao接口原理\",\"a\":\"mybatis-dao接口原理\"},\"5695\":{\"h\":\"MyBatis分页原理\",\"a\":\"mybatis分页原理\"},\"5696\":{\"t\":\"img\"},\"5697\":{\"t\":\"总结一下：\"},\"5698\":{\"t\":\"通过page对象作为分页依据\"},\"5699\":{\"t\":\"通过count来进行查询总条数的限制\"},\"5700\":{\"t\":\"对原sql通过limit来进行分页的效果\"},\"5701\":{\"t\":\"参考：https://blog.csdn.net/xiaolegeaizy/article/details/108461284\"},\"5702\":{\"h\":\"MyBatis 是如何进行分页的？分页插件的原理是什么？\",\"a\":\"mybatis-是如何进行分页的-分页插件的原理是什么\"},\"5703\":{\"t\":\"答：\"},\"5704\":{\"t\":\"(1) MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；\"},\"5705\":{\"t\":\"(2) 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能；\"},\"5706\":{\"t\":\"(3) 也可以使用分页插件来完成物理分页。\"},\"5707\":{\"t\":\"分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。\"},\"5708\":{\"t\":\"举例： select _ from student ，拦截 sql 后重写为： select t._ from （select \\\\* from student）t limit 0，10 \"},\"5709\":{\"t\":\"MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 invoke() 方法，当然，只会拦截那些指定需要拦截的方法。\"},\"5710\":{\"t\":\"实现 MyBatis 的 Interceptor 接口并复写 intercept() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，在配置文件中配置编写的插件。\"},\"5711\":{\"h\":\"MyBatis缓存机制(一级缓存、二级缓存、三级缓存)\",\"a\":\"mybatis缓存机制-一级缓存、二级缓存、三级缓存\"},\"5712\":{\"h\":\"一级缓存：\",\"a\":\"一级缓存\"},\"5713\":{\"t\":\"作用域是同一个 SqlSession，在同一个 sqlSession 中两次执行相同的 sql 语句， 第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取,从而提高查询效率。当一个 sqlSession 结束后该 sqlSession 中的 一级缓存也就不存在了。Mybatis 默认开启一级缓存。 一级缓存内部存储使用一个 HashMap，key 为 hashCode+sqlId+Sql 语句。value 为 从查询出来映射生成的 java 对象 sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。\"},\"5714\":{\"h\":\"二级缓存：\",\"a\":\"二级缓存\"},\"5715\":{\"t\":\"是多个 SqlSession 共享的，其作用域是 mapper 的同一个 namespace，不同 的 sqlSession 两次执行相同 namespace 下的 sql 语句且向 sql 中传递参数也相同即最终执行 相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从 缓存中获取数据将不再从数据库查询，从而提高查询效率。Mybatis 默认没有开启二级缓存 需要在 setting 全局参数中配置开启二级缓存。\"},\"5716\":{\"t\":\"在yml中添加以下代码：\"},\"5717\":{\"t\":\"在这里插入图片描述\"},\"5718\":{\"t\":\"然后在对应的mapper.xml里面加入配置：\"},\"5719\":{\"t\":\"在这里插入图片描述\"},\"5720\":{\"t\":\"注意：开启二级缓存后，对应的pojo一定要实现Serializable，否则在序列化的时候会报错。 readOnly：是否只读 。 值为true时，mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为了加快获取速度，直接会将数据在缓存中的引用交给用户，不安全，但速度快。 值为false时，mybatis觉得获取的数据可能会被修改，mybatis会利用序列化&反序列化的技术克隆一份新的数据给你，安全，但速度慢。\"},\"5721\":{\"h\":\"三级缓存：\",\"a\":\"三级缓存\"},\"5722\":{\"t\":\"Mybatis 的一级缓存与二级缓存 只适用于单体项目，在分布式服务或者微服务架构下 都会出现数据不一致问题。所以Mybatis 为我们提供了自定义缓存 我们可以集成很多三方中间件来做缓存 这里就那Redis来说一下。\"},\"5723\":{\"t\":\"在这里插入图片描述\"},\"5724\":{\"h\":\"总结：\",\"a\":\"总结\"},\"5725\":{\"t\":\"一级缓存的作用域是一个sqlsession内；二级缓存作用域是针对mapper进行缓存；\"},\"5726\":{\"t\":\"一级缓存是默认开启的；二级缓存需要手动配置；\"},\"5727\":{\"t\":\"一级缓存sqlSession 执行 insert、update、delete 等操作 commit 提交后会清空缓存区域。sqlSession.close()后一级缓存也没有了。但是销毁sqlSession后会将里面的缓存存到二级缓存中；\"},\"5728\":{\"t\":\"二级缓存cache中readonly属性如果为false 那么相应的pojo类必须实现Serializable接口 并且其缓存查询到的对象都是通过序列化或者反序列化克隆的，所以对象之间两两不相等；\"},\"5729\":{\"t\":\"二级缓存的生命周期和应用同步，它是用来解决一级缓存不能跨会话共享数据的问题，范围是namespace级别的，可以被多个会话共享(只要是同一个接口的相同方法，都可以进行共享)。\"},\"5730\":{\"t\":\"只要没有显式地设置cacheEnabled为false，都会使用CachingExector装饰基本的执行器(SIMPLE、REUSE、BATCH)。 二级缓存总是默认开启的，但是每个Mapper的二级开关是默认关闭的。\"},\"5731\":{\"t\":\"二级缓存进行增删改操作也会刷新二级缓存，导致二级缓存失效；\"},\"5732\":{\"t\":\"二级缓存的执行流程：\"},\"5733\":{\"t\":\"在这里插入图片描述\"},\"5734\":{\"t\":\"参考：https://blog.csdn.net/weixin_45161172/article/details/129526131\"},\"5735\":{\"h\":\"Linux常用命令\"},\"5736\":{\"h\":\"常用的命令\",\"a\":\"常用的命令\"},\"5737\":{\"h\":\"内核\",\"a\":\"内核\"},\"5738\":{\"h\":\"基本组件\",\"a\":\"基本组件\"},\"5739\":{\"h\":\"进程间通信方式\",\"a\":\"进程间通信方式\"},\"5740\":{\"h\":\"目录结构\",\"a\":\"目录结构\"},\"5741\":{\"t\":\"Linux 使用一种称为目录树的层次结构来组织文件和目录。目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。每个目录可以包含文件和其他子目录。结构层次鲜明，就像一棵倒立的树。\"},\"5742\":{\"h\":\"场景问题\"},\"5743\":{\"h\":\"缓存一致性解决\",\"a\":\"缓存一致性解决\"},\"5744\":{\"h\":\"4G数据找系统记录(大数据题)\",\"a\":\"_4g数据找系统记录-大数据题\"},\"5745\":{\"h\":\"很多短任务线程，选择 synchronized 还是 lock（2022-04-11 携程）\",\"a\":\"很多短任务线程-选择-synchronized-还是-lock-2022-04-11-携程\"},\"5746\":{\"t\":\"锁竞争小时，synchronized和lock效率没差，偏向模式下（单线程读写）甚至高于lock，但是并发量上升时锁撤销会大幅影响性能，稳定自适应轻量级锁状态下，线程接近交替运行，或者说短任务线程多，基本一样，因为都是自旋，大量任务并发竞争时，随着任务量的增大，synchronized的效率会远小于lock，因为重量级锁会频繁切换内核态与用户态；大量长任务，只能重量级锁。\"},\"5747\":{\"h\":\"多个人给一个主播打赏怎么设计？（2022-6-3 58同城）\",\"a\":\"多个人给一个主播打赏怎么设计-2022-6-3-58同城\"},\"5748\":{\"t\":\"我说是一个高并发写的操作，对一个记录频繁写，分批操作，比如 10 个记录 操作一次。他说这个方案可以 但是有 100 个记录 怎么去做一个一个操作呢？我说如果在一个进程可以 分多个线程分批。他说还是不够快 我们是用的 MQ 多个消费者 一个打赏就发一个消息\"},\"5749\":{\"h\":\"怎么实现一个点赞功能？\",\"a\":\"怎么实现一个点赞功能\"},\"5750\":{\"t\":\"主要的流程解释下：先查询数据库改用户是否进行点赞，如果已经点赞则抛出异常，如果没有则new一个对象来一个一个Set，然后将已点赞的信息存入redis中，相反，取消点赞的操作就是删除redis中的数据即可，然后通过Dubbo调用API来完成保存操作，因为我这里是还要获取点赞数和评论数啥的，所以会对动态表进行更新操作。\"},\"5751\":{\"h\":\"比如下单清空购物车，你是如何设计的？\",\"a\":\"比如下单清空购物车-你是如何设计的\"},\"5752\":{\"t\":\"生产者（订单系统）产生消息，发送一条半事务消息到MQ服务器\"},\"5753\":{\"t\":\"MQ收到消息后，将消息持久化到存储系统，这条消息的状态是待发送状态。\"},\"5754\":{\"t\":\"MQ服务器返回ACK确认到生产者，此时MQ不会触发消息推送事件\"},\"5755\":{\"t\":\"生产者执行本地事务（订单创建成功，提交事务消息）\"},\"5756\":{\"t\":\"如果本地事务执行成功，即commit执行结果到MQ服务器；如果执行失败，发送rollback。\"},\"5757\":{\"t\":\"如果是commit正常提交，MQ服务器更新消息状态为可发送；如果是rollback，即删除消息。\"},\"5758\":{\"t\":\"如果消息状态更新为可发送，则MQ服务器会push消息给消费者（购物车系统）。消费者消费完（即拿到订单消息，清空购物车成功）就应答ACK。\"},\"5759\":{\"t\":\"如果MQ服务器长时间没有收到生产者的commit或者rollback，它会反查生产者，然后根据查询到的结果（回滚操作或者重新发送消息）执行最终状态。\"},\"5760\":{\"t\":\"有些伙伴可能有疑惑，如果消费者消费失败怎么办呢？那数据是不是不一致啦？所以就需要消费者消费成功，执行业务逻辑成功，再反馈ack嘛。如果消费者消费失败，那就自动重试嘛，接口支持幂等即可。\"},\"5761\":{\"h\":\"排行榜的实现，比如高考成绩排序（2022 虾皮）\",\"a\":\"排行榜的实现-比如高考成绩排序-2022-虾皮\"},\"5762\":{\"t\":\"排行版的实现，一般使用redis的zset数据类型。\"},\"5763\":{\"t\":\"zadd key score member [score member ...]，zrank key member \"},\"5764\":{\"h\":\"有一批帖子，会根据类别搜索，但是现在是单独一个表，现在查询非常慢，如何提高搜索性能？（2022 虾皮）\",\"a\":\"有一批帖子-会根据类别搜索-但是现在是单独一个表-现在查询非常慢-如何提高搜索性能-2022-虾皮\"},\"5765\":{\"t\":\"根据类别分库分表，库可以放到不同的实例上，经常查询的不变的数据]可以放到缓存里。 数据有更新时，需要刷新下缓存 因为分表后，只能是固定类别，所以需要根据类别去分开查找。 如果还有另一个重要的字段也需要查，可以再建一个分表，user-ses/ses-user就是这么做的，但是冗余就比较大。\"},\"5766\":{\"h\":\"如果有多个表，进行聚合查询，如何解决深分页的问题（2022 虾皮）\",\"a\":\"如果有多个表-进行聚合查询-如何解决深分页的问题-2022-虾皮\"},\"5767\":{\"t\":\"就是保存每个节点的表id给前端，前端查询时把id返回过来了，然后加到SQL里，但是不一定准。这里回答的是单个表吧。\"},\"5768\":{\"h\":\"分表的数据，动态增加一张表，不停服如何实现？（2022 虾皮）\",\"a\":\"分表的数据-动态增加一张表-不停服如何实现-2022-虾皮\"},\"5769\":{\"t\":\"分区策略使用一致性哈希 然后新表的数据，查询的时候，先查老的，再插入新的。如果老数据没有动，需要有对应的迁移服务进行定时迁移。插入的时候优先插入到新的表。\"},\"5770\":{\"h\":\"迁移线程和用户线程同时执行，会有数据库不一致的问题，怎么解决？（2022 虾皮）\",\"a\":\"迁移线程和用户线程同时执行-会有数据库不一致的问题-怎么解决-2022-虾皮\"},\"5771\":{\"t\":\"加分布式锁。\"},\"5772\":{\"h\":\"两个机房，某个机房可能断电，如何做多机房容灾（2022 虾皮）\",\"a\":\"两个机房-某个机房可能断电-如何做多机房容灾-2022-虾皮\"},\"5773\":{\"t\":\"负载均衡层，支持切换机房写数据的时候，中间件（db/redis/es）都要进行双写。\"},\"5774\":{\"t\":\"kafka容灾，mirror maker: https://cloud.tencent.com/developer/article/1358933\"},\"5775\":{\"h\":\"主从机房同步有什么问题呢？ （2022 虾皮）\",\"a\":\"主从机房同步有什么问题呢-2022-虾皮\"},\"5776\":{\"t\":\"会有比较大的延迟。 一些分布式的问题，例如分布式事务，可能就执行了几步，然后就挂了，需要有一定的策略，进行回滚或者提交。 切换机房的过程中，可能存在数据丢失，重复数据等\"},\"5777\":{\"t\":\"双向同步，两个机房都能写入，如果操作的是各自的数据的话，问题不大。如果操作的是相同数据，必然会有冲突，需要解决。所以上层保证相同数据到同一个机房即可，然后同步到另外一个机房，保证每个机房都有全量的数据。各种中间件都要做改造。\"},\"5778\":{\"t\":\"总之，分片的核心思路在于，让同一个用户的相关请求，只在一个机房内完成所有业务「闭环」，不再出现「跨机房」访问。\"},\"5779\":{\"t\":\"阿里在实施这种方案时，给它起了个名字，叫做「单元化」。\"},\"5780\":{\"t\":\"这里还有一种情况，是无法做数据分片的：全局数据。例如系统配置、商品库存这类需要强一致的数据，这类服务依旧只能采用写主机房，读从机房的方案，不做双活。\"},\"5781\":{\"t\":\"双活的重点，是要优先保证「核心」业务先实现双活，并不是「全部」业务实现双活。\"},\"5782\":{\"h\":\"冷机房新请求过来，发现缓存没有，会把数据库打挂，这个怎么解决？（2022 虾皮）\",\"a\":\"冷机房新请求过来-发现缓存没有-会把数据库打挂-这个怎么解决-2022-虾皮\"},\"5783\":{\"t\":\"预热，提前加载到缓存。 或者平时保持一定的流量。 用了缓存的，一般需要预热下，防止雪崩。\"},\"5784\":{\"h\":\"定时任务这种，怎么改变执行的机房（2022 虾皮）\",\"a\":\"定时任务这种-怎么改变执行的机房-2022-虾皮\"},\"5785\":{\"t\":\"加开关，任何时候都有一个条件不满足，在空跑。\"},\"5786\":{\"h\":\"多线程和高并发\"},\"5787\":{\"h\":\"三：多线程与高并发\",\"a\":\"三-多线程与高并发\"},\"5788\":{\"h\":\"线程的互斥同步方式有哪些? 如何比较和选择?\",\"a\":\"线程的互斥同步方式有哪些-如何比较和选择\"},\"5789\":{\"t\":\"Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。\"},\"5790\":{\"t\":\"锁的实现synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。\"},\"5791\":{\"t\":\"性能新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。\"},\"5792\":{\"t\":\"等待可中断当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。\"},\"5793\":{\"t\":\"公平锁公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\"},\"5794\":{\"t\":\"锁绑定多个条件一个 ReentrantLock 可以同时绑定多个 Condition 对象。\"},\"5795\":{\"h\":\"ReentrantLock：\",\"a\":\"reentrantlock\"},\"5796\":{\"t\":\"ReentrantLock 实现了 Lock 接口，是一个可重入且独占式的锁，和 synchronized 关键字类似。不过，ReentrantLock 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。\"},\"5797\":{\"t\":\"public class ReentrantLock implements Lock, java.io.Serializable {} \"},\"5798\":{\"t\":\"ReentrantLock 里面有一个内部类 Sync，Sync 继承 AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在 Sync 中实现的。Sync 有公平锁 FairSync 和非公平锁 NonfairSync 两个子类。\"},\"5799\":{\"t\":\"ReentrantLock 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。\"},\"5800\":{\"t\":\"// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁 public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } \"},\"5801\":{\"t\":\"https://blog.csdn.net/zhengzhaoyang122/article/details/110847701；https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html\"},\"5802\":{\"h\":\"锁升级\",\"a\":\"锁升级\"},\"5803\":{\"t\":\"img\"},\"5804\":{\"h\":\"无锁\",\"a\":\"无锁\"},\"5805\":{\"t\":\"无锁并不会对资源锁定，所有的线程都可以访问并修改同一个资源，但同时只有一个线程能修改成功。也就是我们常说的乐观锁。\"},\"5806\":{\"h\":\"偏向锁\",\"a\":\"偏向锁\"},\"5807\":{\"t\":\"偏向于第一个访问锁的线程，初次执行synchronized代码块时，通过 CAS 修改对象头里的锁标志位，锁对象变成偏向锁。\"},\"5808\":{\"t\":\"当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。\"},\"5809\":{\"t\":\"执行完同步代码块后，线程并不会主动释放偏向锁。当线程第二次再执行同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里不需要重新加锁，偏向锁几乎没有额外开销，性能极高。\"},\"5810\":{\"t\":\"偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。\"},\"5811\":{\"t\":\"偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗。 \"},\"5812\":{\"h\":\"轻量级锁\",\"a\":\"轻量级锁\"},\"5813\":{\"t\":\"当前锁是偏向锁，此时有多个线程同时来竞争锁，偏向锁就会升级为轻量级锁。轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式来获取锁。\"},\"5814\":{\"t\":\"轻量级锁的获取有两种情况：\"},\"5815\":{\"t\":\"当关闭偏向锁功能时 多个线程竞争偏向锁导致偏向锁升级为轻量级锁。一旦有第二个线程加入锁竞争，偏向锁就升级为轻量级锁（自旋锁） \"},\"5816\":{\"t\":\"在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先比较当前锁标志位是否为“释放”，如果是则将其设置为“锁定”，此过程是原子性。如果抢到锁，然后线程将当前锁的持有者信息修改为自己。\"},\"5817\":{\"h\":\"重量级锁\",\"a\":\"重量级锁\"},\"5818\":{\"t\":\"如果线程的竞争很激励，线程的自旋超过了一定次数（默认循环10次，可以通过虚拟机参数更改），将轻量级锁升级为重量级锁（依然是 CAS 修改锁标志位，但不修改持有锁的线程ID），当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。\"},\"5819\":{\"t\":\"重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资。\"},\"5820\":{\"h\":\"锁优化技术（锁粗化、锁消除）：\",\"a\":\"锁优化技术-锁粗化、锁消除\"},\"5821\":{\"t\":\"锁粗化就是告诉我们任何事情都有个度，有些情况下我们反而希望把很多次锁的请求合并成一个请求，以降低短时间内大量锁请求、同步、释放带来的性能损耗。\"},\"5822\":{\"t\":\"锁消除指的是在某些情况下，JVM 虚拟机如果检测不到某段代码被共享和竞争的可能性，就会将这段代码所属的同步锁消除掉，从而到底提高程序性能的目的。\"},\"5823\":{\"h\":\"CAS\",\"a\":\"cas\"},\"5824\":{\"t\":\"https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&mid=2247510278&idx=3&sn=a58a9ec9f805d0e109c4b09cd497c9ca&chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1&scene=27\"},\"5825\":{\"t\":\"在并发编程中我们都知道i++操作是非线程安全的，这是因为 i++操作不是原子操作。\"},\"5826\":{\"t\":\"如何保证原子性呢？常用的方法就是加锁。在Java语言中可以使用 Synchronized和CAS实现加锁效果。\"},\"5827\":{\"t\":\"Synchronized是悲观锁，线程开始执行第一步就是获取锁，一旦获得锁，其他的线程进入后就会阻塞等待锁。如果不好理解，举个生活中的例子：一个人进入厕所后首先把门锁上（获取锁），然后开始上厕所，这个时候有其他人来了只能在外面等（阻塞），就算再急也没用。上完厕所完事后把门打开（解锁），其他人就可以进入了。\"},\"5828\":{\"t\":\"CAS是乐观锁，线程执行的时候不会加锁，假设没有冲突去完成某项操作，如果因为冲突失败了就重试，最后直到成功为止。\"},\"5829\":{\"h\":\"什么是 CAS？\",\"a\":\"什么是-cas\"},\"5830\":{\"t\":\"CAS（Compare-And-Swap）是比较并交换的意思，它是一条 CPU 并发原语，用于判断内存中某个值是否为预期值，如果是则更改为新的值，这个过程是原子的。下面用一个小示例解释一下。\"},\"5831\":{\"t\":\"CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，计算后要修改后的新值B。\"},\"5832\":{\"t\":\"（1）初始状态：在内存地址V中存储着变量值为 1。\"},\"5833\":{\"t\":\"图片\"},\"5834\":{\"t\":\"（2）线程1想要把内存地址为 V 的变量值增加1。这个时候对线程1来说，旧的预期值A=1，要修改的新值B=2。\"},\"5835\":{\"t\":\"图片\"},\"5836\":{\"t\":\"（3）在线程1要提交更新之前，线程2捷足先登了，已经把内存地址V中的变量值率先更新成了2。\"},\"5837\":{\"t\":\"图片\"},\"5838\":{\"t\":\"（4）线程1开始提交更新，首先将预期值A和内存地址V的实际值比较（Compare），发现A不等于V的实际值，提交失败。\"},\"5839\":{\"t\":\"图片\"},\"5840\":{\"t\":\"（5）线程1重新获取内存地址 V 的当前值，并重新计算想要修改的新值。此时对线程1来说，A=2，B=3。这个重新尝试的过程被称为自旋。如果多次失败会有多次自旋。\"},\"5841\":{\"t\":\"图片\"},\"5842\":{\"t\":\"（6）线程 1 再次提交更新，这一次没有其他线程改变地址 V 的值。线程1进行Compare，发现预期值 A 和内存地址 V的实际值是相等的，进行 Swap 操作，将内存地址 V 的实际值修改为 B。\"},\"5843\":{\"t\":\"图片\"},\"5844\":{\"t\":\"总结：更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 中的实际值相同时，才会将内存地址 V 对应的值修改为 B，这整个操作就是CAS。\"},\"5845\":{\"h\":\"CAS 基本原理\",\"a\":\"cas-基本原理\"},\"5846\":{\"t\":\"CAS 主要包括两个操作：Compare和Swap，有人可能要问了：两个操作能保证是原子性吗？可以的。\"},\"5847\":{\"t\":\"CAS 是一种系统原语，原语属于操作系统用语，原语由若干指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，由操作系统硬件来保证。在 Intel 的 CPU 中，使用 cmpxchg 指令。\"},\"5848\":{\"t\":\"回到 Java 语言，JDK 是在 1.5 版本后才引入 CAS 操作，在sun.misc.Unsafe这个类中定义了 CAS 相关的方法。\"},\"5849\":{\"t\":\"在 Java 编程中我们通常不会直接使用到 CAS，都是通过 JDK 封装好的并发工具类来间接使用的，这些并发工具类都在java.util.concurrent包中。\"},\"5850\":{\"h\":\"CAS 的问题\",\"a\":\"cas-的问题\"},\"5851\":{\"t\":\"CAS 不是万能的，也有很多问题。\"},\"5852\":{\"t\":\"敲黑板：CAS有哪些问题，这是面试高频考点，需要重点掌握。\"},\"5853\":{\"h\":\"典型 ABA 问题\",\"a\":\"典型-aba-问题\"},\"5854\":{\"t\":\"ABA 是 CAS 操作的一个经典问题，假设有一个变量初始值为 A，修改为 B，然后又修改为 A，这个变量实际被修改过了，但是 CAS 操作可能无法感知到。\"},\"5855\":{\"t\":\"如果是整型还好，不会影响最终结果，但如果是对象的引用类型包含了多个变量，引用没有变实际上包含的变量已经被修改，这就会造成大问题。\"},\"5856\":{\"t\":\"如何解决？思路其实很简单，在变量前加版本号，每次变量更新了就把版本号加一，结果如下：\"},\"5857\":{\"t\":\"图片\"},\"5858\":{\"t\":\"最终结果都是 A 但是版本号改变了。\"},\"5859\":{\"t\":\"从 JDK 1.5 开始提供了AtomicStampedReference类，这个类的 compareAndSe方法首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\"},\"5860\":{\"h\":\"自旋开销问题\",\"a\":\"自旋开销问题\"},\"5861\":{\"t\":\"CAS 出现冲突后就会开始自旋操作，如果资源竞争非常激烈，自旋长时间不能成功就会给 CPU 带来非常大的开销。\"},\"5862\":{\"t\":\"解决方案：可以考虑限制自旋的次数，避免过度消耗 CPU；另外还可以考虑延迟执行。\"},\"5863\":{\"h\":\"只能保证单个变量的原子性\",\"a\":\"只能保证单个变量的原子性\"},\"5864\":{\"t\":\"当对一个共享变量执行操作时，可以使用 CAS 来保证原子性，但是如果要对多个共享变量进行操作时，CAS 是无法保证原子性的，比如需要将 i 和 j 同时加 1：\"},\"5865\":{\"t\":\"i++；j++； \"},\"5866\":{\"t\":\"这个时候可以使用 synchronized 进行加锁，有没有其他办法呢？有，将多个变量操作合成一个变量操作。从 JDK1.5 开始提供了AtomicReference 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\"},\"5867\":{\"h\":\"总结\",\"a\":\"总结\"},\"5868\":{\"t\":\"CAS 是 Compare And Swap，是一条 CPU 原语，由操作系统保证原子性。\"},\"5869\":{\"t\":\"Java语言从 JDK1.5 版本开始引入 CAS ， 并且是 Java 并发编程J.U.C 包的基石，应用非常广泛。\"},\"5870\":{\"t\":\"当然 CAS 也不是万能的，也有很多问题：典型 ABA 问题、自旋开销问题、只能保证单个变量的原子性。\"},\"5871\":{\"h\":\"AQS\",\"a\":\"aqs\"},\"5872\":{\"t\":\"https://zhuanlan.zhihu.com/p/543902719\"},\"5873\":{\"h\":\"什么是AQS\",\"a\":\"什么是aqs\"},\"5874\":{\"t\":\"AQS（AbstractQueuedSynchronizer），即队列同步器，它是构建锁或者其他同步组件的基础框架，如ReentrantLock、ReentrantReadWriteLock、Semaphore，CountDownLatch等。 AQS是一个抽象类，主要是通过继承方式使用，本身没有实现任何接口，仅仅是定义了同步状态的获取和释放的方法。AQS解决了了之类实现同步器的大量细节问题，例如获取同步状态，FIFO队列，入队和出队。自定义同步器在实现时候只需要实现共享资源state的获取和释放即可，至于获取资源失败入队/唤醒出队等，AQS在顶层已经定义好了。\"},\"5875\":{\"h\":\"AQS的两种功能\",\"a\":\"aqs的两种功能\"},\"5876\":{\"t\":\"从使用层面来说，AQS功能分为两种：独占和共享\"},\"5877\":{\"t\":\"独占锁，每次只能一个线程持有锁，比如ReentrantLock就是独占锁\"},\"5878\":{\"t\":\"共享锁，允许多个线程持有锁，并发访问共享资源，比如ReentrantReadWriteLock\"},\"5879\":{\"t\":\"共享锁和独占锁的释放有一定区别，前面部分是一致的，先判断头结点是不是signal状态，如果是则唤醒头节点的下一个节点，并将该节点设置为头结点。而共享锁不一样，某个节点被设置为head之后，如果它的后继节点是shared状态，那么会尝试使用doReleaseShared方法尝试唤醒节点，实现共享状态的传播。\"},\"5880\":{\"h\":\"AQS内部实现\",\"a\":\"aqs内部实现\"},\"5881\":{\"t\":\"AQS是依赖内部的同步队列实现，也就是FIFO双向队列，如果当前线程竞争锁失败，那么AQS会把当前线程以及等待状态封装成一个Node节点加入到同步队列中，同时阻塞该线程，当同步状态释放时，会把首节点唤醒，使其再次尝试获取同步状态。\"},\"5882\":{\"t\":\"AQS队列内部维护的是一个双向链表，这种结构每个数据都有两个指针，分别指向直接的的前驱节点和后继节点，当线程抢占锁失败时候，会封装成Node加入到AQS中去。\"},\"5883\":{\"t\":\"AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁 实现的，即将暂时获取不到锁的线程加入到队列中。\"},\"5884\":{\"t\":\"CLH(Craig,Landin,and Hagersten) 队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。在 CLH 同步队列中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。\"},\"5885\":{\"t\":\"CLH 队列结构如下图所示：\"},\"5886\":{\"t\":\"img\"},\"5887\":{\"t\":\"在同步队列中，一个节点表示一个线程，他保存这线程的引用ThreadId，状态（watiStatus）,前驱结点（pre），后继节点（next），其数据结构如下：\"},\"5888\":{\"t\":\"img\"},\"5889\":{\"h\":\"acquire方法流程总结\",\"a\":\"acquire方法流程总结\"},\"5890\":{\"t\":\"首先通过子类判断是否获取了锁，如果获取了就什么也不干。tryAcquire\"},\"5891\":{\"t\":\"如果没有获取锁、通过线程创建节点加入同步队列的队尾。addWaiter\"},\"5892\":{\"t\":\"当线程在同步队列中不断的通过自旋去获取同步状态，如果获取了锁，就把其设为同步队列中的头节点，否则在同步队列中不停的自旋等待获取同步状态 acquireQueued,shouldParkAfterFailedAcquire(Node pre,Node node),parkAndCheckInterrupt()\"},\"5893\":{\"t\":\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\"},\"5894\":{\"h\":\"AQS 底层使用了模板方法模式，你能说出几个需要重写的方法吗？\",\"a\":\"aqs-底层使用了模板方法模式-你能说出几个需要重写的方法吗\"},\"5895\":{\"t\":\"使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。\"},\"5896\":{\"t\":\"isHeldExclusively() ：该线程是否正在独占资源。只有用到 condition 才需要去实现它。\"},\"5897\":{\"t\":\"tryAcquire(int) ：独占方式。尝试获取资源，成功则返回 true，失败则返回 false。\"},\"5898\":{\"t\":\"tryRelease(int) ：独占方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"5899\":{\"t\":\"tryAcquireShared(int) ：共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\"},\"5900\":{\"t\":\"tryReleaseShared(int) ：共享方式。尝试释放资源，成功则返回 true，失败则返回 false。\"},\"5901\":{\"h\":\"总结\",\"a\":\"总结-1\"},\"5902\":{\"t\":\"总结的来说：线程获取锁，如果获取了锁就 保存当前获得锁的线程，如果没获取就创造一个节点通过compareAndSetTail(CAS操作)操作的方式将创建的节点加入同步队列的尾部，在同步队列中的节点通过自旋的操作不断去获取同步状态【当然由于FIFO先进先出的特性】等待时间越长就越先被唤醒。当头节点释放同步状态的时候，首先查看是否存在后继节点，如果存在就唤醒自己的后继节点，如果不存在就获取等待时间最长的符合条件的线程。\"},\"5903\":{\"h\":\"volitile关键字原理\",\"a\":\"volitile关键字原理\"},\"5904\":{\"h\":\"简述Java内存模型：\",\"a\":\"简述java内存模型\"},\"5905\":{\"t\":\"Java内存模型分为主内存和线程工作内存两大类。\"},\"5906\":{\"t\":\"主内存： **多个线程共享的内存。**如下图所示，方法区和堆属于主内存区域。\"},\"5907\":{\"t\":\"线程工作内存：每个线程独享的内存。如下图所示，虚拟机栈、本地方法栈、程序计数器属于线程独享的工作内存。\"},\"5908\":{\"t\":\"图片\"},\"5909\":{\"t\":\"Java内存模型规定：所有变量都需要存储在主内存中，线程工作内存保存了变量在主内存中的副本，线程对变量的所有操作都在工作内存中进行，执行结束后在同步到主内存中去。这里必然会存在时间差，在这个时间差内，该线程对副本的操作，对于其他线程是不见的，从而造成了可见性问题。\"},\"5910\":{\"h\":\"volatile的作用：\",\"a\":\"volatile的作用\"},\"5911\":{\"t\":\"保证共享变量的可见性： 使用volatile修饰的变量，任何线程对其进行操作都是在主内存中进行的，不会产生副本，从而保证共享变量的可见性。\"},\"5912\":{\"t\":\"防止局部指令重排序： happens-before规则中的volatile变量规则规定了一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。\"},\"5913\":{\"h\":\"volatile如何防止指令重排序：\",\"a\":\"volatile如何防止指令重排序\"},\"5914\":{\"t\":\"volatile是通过内存屏障来防止指令重排序的。\"},\"5915\":{\"t\":\"硬件层面的内存屏障分为Load Barrier 和 Store Barrier即读屏障和写屏障。\"},\"5916\":{\"t\":\"对于Load Barrier来说，在指令前插入Load Barrier，可以让高速缓存中的数据失效，强制从新从主内存加载数据。\"},\"5917\":{\"t\":\"对于Store Barrier来说，在指令后插入Store Barrier，能让写入缓存中的最新数据更新写入主内存，让其他线程可见。\"},\"5918\":{\"t\":\"Java内存屏障类型把上述两种内存屏障两两组合，如下图所示：\"},\"5919\":{\"t\":\"图片\"},\"5920\":{\"t\":\"volatile防止指令重排序具体步骤：\"},\"5921\":{\"t\":\"在每个volatile写操作的前面插入一个StoreStore屏障。\"},\"5922\":{\"t\":\"在每个volatile写操作的后面插入一个StoreLoad屏障。\"},\"5923\":{\"t\":\"在每个volatile读操作的后面插入一个LoadLoad屏障。\"},\"5924\":{\"t\":\"在每个volatile读操作的后面插入一个LoadStore屏障。\"},\"5925\":{\"t\":\"图片\"},\"5926\":{\"t\":\"图片\"},\"5927\":{\"h\":\"volatile总结：\",\"a\":\"volatile总结\"},\"5928\":{\"t\":\"volatile解决的是多线程共享变量可见性问题，但是被volatile修饰的变量操作并非具有原子性。\"},\"5929\":{\"t\":\"参考：https://mp.weixin.qq.com/s?__biz=MzAxNTE2NjEyMw==&mid=2247483734&idx=1&sn=8509d4aa61d08550c2b7668314da3582&chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e&scene=27\"},\"5930\":{\"h\":\"锁的分类实现\",\"a\":\"锁的分类实现\"},\"5931\":{\"h\":\"悲观锁：\",\"a\":\"悲观锁\"},\"5932\":{\"t\":\"正如其名，它是指对数据修改时持保守态度，认为其他人也会修改数据。因此在操作数据时，会把数据锁住，直到操作完成。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是长事务而言，这样的开销往往无法承受。\"},\"5933\":{\"h\":\"乐观锁：\",\"a\":\"乐观锁\"},\"5934\":{\"t\":\"乐观锁，从字面意思也能猜到个大概，在操作数据时非常乐观，认为别人不会同时修改数据，因此乐观锁不会上锁 只是在 提交更新 时，才会正式对数据的冲突与否进行检测。如果发现冲突了，则返回错误信息，让用户决定如何去做，fail-fast 机制 。否则，执行本次操作。\"},\"5935\":{\"h\":\"可重入锁：\",\"a\":\"可重入锁\"},\"5936\":{\"t\":\"可重入锁，也叫做递归锁，是指在同一个线程在调外层方法获取锁的时候，再进入内层方法会自动获取锁。\"},\"5937\":{\"t\":\"对象锁或类锁内部有计数器，一个线程每获得一次锁，计数器 +1；解锁时，计数器 -1。\"},\"5938\":{\"t\":\"JAVA 中的 ReentrantLock 和 synchronized 都是 可重入锁。可重入锁的一个好处是可一定程度避免死锁。\"},\"5939\":{\"h\":\"自旋锁：\",\"a\":\"自旋锁\"},\"5940\":{\"t\":\"自旋锁是采用让当前线程不停地在循环体内执行，当循环的条件被其他线程改变时才能进入临界区。自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不断增加时，性能下降明显，因为每个线程都需要执行，会占用CPU时间片。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\"},\"5941\":{\"t\":\"自旋锁缺点：\"},\"5942\":{\"t\":\"可能引发死锁 可能占用 CPU 的时间过长 \"},\"5943\":{\"t\":\"我们可以设置一个 循环时间 或 循环次数，超出阈值时，让线程进入阻塞状态，防止线程长时间占用 CPU 资源。JUC 并发包中的 CAS 就是采用自旋锁，compareAndSet 是CAS操作的核心，底层利用Unsafe对象实现的。\"},\"5944\":{\"h\":\"独享锁：\",\"a\":\"独享锁\"},\"5945\":{\"t\":\"独享锁，也有人叫它排他锁。无论读操作还是写操作，只能有一个线程获得锁，其他线程处于阻塞状态。\"},\"5946\":{\"t\":\"缺点：读操作并不会修改数据，而且大部分的系统都是 读多写少，如果读读之间互斥，大大降低系统的性能。下面的 共享锁 会解决这个问题。\"},\"5947\":{\"t\":\"像JAVA 中的 ReentrantLock 和 synchronized 都是独享锁。\"},\"5948\":{\"h\":\"共享锁：\",\"a\":\"共享锁\"},\"5949\":{\"t\":\"共享锁是指允许多个线程同时持有锁，一般用在读锁上。读锁的共享锁可保证并发读是非常高效的。读写，写读 ，写写的则是互斥的。独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享\"},\"5950\":{\"t\":\"ReentrantReadWriteLock，其读锁是共享锁，其写锁是独享锁。\"},\"5951\":{\"h\":\"读锁/写锁：\",\"a\":\"读锁-写锁\"},\"5952\":{\"t\":\"如果对某个资源是读操作，那多个线程之间并不会相互影响，可以通过添加读锁实现共享。如果有修改动作，为了保证数据的并发安全，此时只能有一个线程获得锁，我们称之为 写锁。读读是共享的；而 读写、写读 、写写 则是互斥的\"},\"5953\":{\"t\":\"像 JAVA 中的 ReentrantReadWriteLock 就是一种 读写锁 \"},\"5954\":{\"h\":\"公平锁/非公平锁：\",\"a\":\"公平锁-非公平锁\"},\"5955\":{\"t\":\"公平锁：多个线程按照申请锁的顺序去获得锁，所有线程都在队列里排队，先来先获取的公平性原则。\"},\"5956\":{\"t\":\"优点：所有的线程都能得到资源，不会饿死在队列中。\"},\"5957\":{\"t\":\"缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，CPU 唤醒下一个阻塞线程有系统开销\"},\"5958\":{\"t\":\"**非公平锁：**多个线程不按照申请锁的顺序去获得锁，而是同时以插队方式直接尝试获取锁，获取不到（插队失败），会进入队列等待（失败则乖乖排队），如果能获取到（插队成功），就直接获取到锁。\"},\"5959\":{\"t\":\"**优点：**可以减少 CPU 唤醒线程的开销，整体的吞吐效率会高点\"},\"5960\":{\"t\":\"**缺点：**可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁，活活饿死。\"},\"5961\":{\"t\":\"Java 多线程并发操作，我们操作锁大多时候都是基于 Sync 本身去实现的，而 Sync 本身却是 ReentrantLock 的一个内部类，Sync 继承 AbstractQueuedSynchronizer\"},\"5962\":{\"t\":\"像 ReentrantLock 默认是非公平锁，我们可以在构造函数中传入 true，来创建公平锁。\"},\"5963\":{\"t\":\"参考：https://blog.csdn.net/weixin_70730532/article/details/126875303\"},\"5964\":{\"h\":\"synchronized原理\",\"a\":\"synchronized原理\"},\"5965\":{\"h\":\"synchronized 同步语句块的情况:\",\"a\":\"synchronized-同步语句块的情况\"},\"5966\":{\"t\":\"public class SynchronizedDemo { public void method() { synchronized (this) { System.out.println(\\\"synchronized 代码块\\\"); } } } \"},\"5967\":{\"t\":\"通过 JDK 自带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：首先切换到类的对应目录执行 javac SynchronizedDemo.java 命令生成编译后的 .class 文件，然后执行javap -c -s -v -l SynchronizedDemo.class。\"},\"5968\":{\"t\":\"synchronized关键字原理\"},\"5969\":{\"t\":\"从上面我们可以看出：synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"5970\":{\"t\":\"上面的字节码中包含一个 monitorenter 指令以及两个 monitorexit 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。\"},\"5971\":{\"t\":\"当执行 monitorenter 指令时，线程试图获取锁也就是获取 对象监视器 monitor 的持有权。\"},\"5972\":{\"t\":\"在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由ObjectMonitor实现的。每个对象中都内置了一个 ObjectMonitor对象。\"},\"5973\":{\"t\":\"另外，wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。\"},\"5974\":{\"t\":\"在执行monitorenter时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。\"},\"5975\":{\"t\":\"对象锁的的拥有者线程才可以执行 monitorexit 指令来释放锁。在执行 monitorexit 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\"},\"5976\":{\"h\":\"synchronized 修饰方法的的情况:\",\"a\":\"synchronized-修饰方法的的情况\"},\"5977\":{\"t\":\"public class SynchronizedDemo2 { public synchronized void method() { System.out.println(\\\"synchronized 方法\\\"); } } \"},\"5978\":{\"t\":\"synchronized关键字原理\"},\"5979\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\"},\"5980\":{\"t\":\"如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。\"},\"5981\":{\"h\":\"总结:\",\"a\":\"总结-2\"},\"5982\":{\"t\":\"synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\"},\"5983\":{\"t\":\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。\"},\"5984\":{\"t\":\"不过两者的本质都是对对象监视器 monitor 的获取。\"},\"5985\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-底层原理了解吗\"},\"5986\":{\"h\":\"ThreadLocal原理\",\"a\":\"threadlocal原理\"},\"5987\":{\"h\":\"ThreadLocal 有什么用？\",\"a\":\"threadlocal-有什么用\"},\"5988\":{\"t\":\"通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？\"},\"5989\":{\"t\":\"JDK 中自带的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。\"},\"5990\":{\"t\":\"如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get() 和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\"},\"5991\":{\"h\":\"原理：\",\"a\":\"原理\"},\"5992\":{\"t\":\"源码：\"},\"5993\":{\"t\":\"public class Thread implements Runnable { //...... //与此线程有关的ThreadLocal值。由ThreadLocal类维护 ThreadLocal.ThreadLocalMap threadLocals = null; //与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护 ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; //...... } \"},\"5994\":{\"t\":\"从上面Thread类 源代码可以看出Thread 类中有一个 threadLocals 和 一个 inheritableThreadLocals 变量，它们都是 ThreadLocalMap 类型的变量,我们可以把 ThreadLocalMap 理解为ThreadLocal 类实现的定制化的 HashMap。默认情况下这两个变量都是 null，只有当前线程调用 ThreadLocal 类的 set或get方法时才创建它们，实际上调用这两个方法的时候，我们调用的是ThreadLocalMap类对应的 get()、set()方法。\"},\"5995\":{\"t\":\"ThreadLocal类的set()方法：\"},\"5996\":{\"t\":\"public void set(T value) { //获取当前请求的线程 Thread t = Thread.currentThread(); //取出 Thread 类内部的 threadLocals 变量(哈希表结构) ThreadLocalMap map = getMap(t); if (map != null) // 将需要存储的值放入到这个哈希表中 map.set(this, value); else createMap(t, value); } ThreadLocalMap getMap(Thread t) { return t.threadLocals; } \"},\"5997\":{\"t\":\"通过上面这些内容，我们足以通过猜测得出结论：最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。ThrealLocal 类中可以通过Thread.currentThread()获取到当前线程对象后，直接通过getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。\"},\"5998\":{\"t\":\"每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为 key ，Object 对象为 value 的键值对。\"},\"5999\":{\"t\":\"ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) { //...... } \"},\"6000\":{\"t\":\"比如我们在同一个线程中声明了两个 ThreadLocal 对象的话， Thread内部都是使用仅有的那个ThreadLocalMap 存放数据的，ThreadLocalMap的 key 就是 ThreadLocal对象，value 就是 ThreadLocal 对象调用set方法设置的值。\"},\"6001\":{\"h\":\"线程池\",\"a\":\"线程池\"},\"6002\":{\"h\":\"为什么要用线程池？\",\"a\":\"为什么要用线程池\"},\"6003\":{\"t\":\"这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：\"},\"6004\":{\"t\":\"降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\"},\"6005\":{\"t\":\"提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。\"},\"6006\":{\"t\":\"提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\"},\"6007\":{\"h\":\"如何创建线程池？\",\"a\":\"如何创建线程池\"},\"6008\":{\"t\":\"方式一：通过ThreadPoolExecutor构造函数来创建（推荐）。\"},\"6009\":{\"t\":\"package com.young.多线程; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.Executors; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * @author 杨路恒 */ public class ThreadPool { public static void main(String[] args) { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1,2, 2, TimeUnit.MILLISECONDS,new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(), // new ThreadPoolExecutor.AbortPolicy() // new ThreadPoolExecutor.CallerRunsPolicy() // new ThreadPoolExecutor.DiscardOldestPolicy() new ThreadPoolExecutor.DiscardPolicy() ); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.submit(new Thread2()); threadPoolExecutor.shutdown(); } } \"},\"6010\":{\"t\":\"参数：\"},\"6011\":{\"t\":\"/** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @param threadFactory the factory to use when the executor * creates a new thread * @param handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached * @throws IllegalArgumentException if one of the following holds:<br> * {@code corePoolSize < 0}<br> * {@code keepAliveTime < 0}<br> * {@code maximumPoolSize <= 0}<br> * {@code maximumPoolSize < corePoolSize} * @throws NullPointerException if {@code workQueue} * or {@code threadFactory} or {@code handler} is null */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; } \"},\"6012\":{\"t\":\"ThreadPoolExecutor 3 个最重要的参数：\"},\"6013\":{\"t\":\"corePoolSize : 任务队列未达到队列容量时，最大可以同时运行的线程数量。\"},\"6014\":{\"t\":\"maximumPoolSize : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\"},\"6015\":{\"t\":\"workQueue: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"6016\":{\"t\":\"ThreadPoolExecutor其他常见参数 :\"},\"6017\":{\"t\":\"keepAliveTime:线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；\"},\"6018\":{\"t\":\"unit : keepAliveTime 参数的时间单位。\"},\"6019\":{\"t\":\"threadFactory :executor 创建新线程的时候会用到。\"},\"6020\":{\"t\":\"handler :饱和策略。关于饱和策略下面单独介绍一下。\"},\"6021\":{\"t\":\"下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）：\"},\"6022\":{\"t\":\"线程池各个参数的关系\"},\"6023\":{\"t\":\"线程池的饱和策略有哪些？\"},\"6024\":{\"t\":\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，ThreadPoolTaskExecutor 定义一些策略:\"},\"6025\":{\"t\":\"ThreadPoolExecutor.AbortPolicy： 抛出 RejectedExecutionException来拒绝新任务的处理。\"},\"6026\":{\"t\":\"ThreadPoolExecutor.CallerRunsPolicy： 调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。\"},\"6027\":{\"t\":\"ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。\"},\"6028\":{\"t\":\"ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。\"},\"6029\":{\"t\":\"举个例子：Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略来配置线程池的时候，默认使用的是 AbortPolicy。在这种饱和策略下，如果队列满了，ThreadPoolExecutor 将抛出 RejectedExecutionException 异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。如果不想丢弃任务的话，可以使用CallerRunsPolicy。CallerRunsPolicy 和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务\"},\"6030\":{\"t\":\"线程池常用的阻塞队列有哪些？\"},\"6031\":{\"t\":\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\"},\"6032\":{\"t\":\"不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。\"},\"6033\":{\"t\":\"容量为 Integer.MAX_VALUE 的 LinkedBlockingQueue（无界队列）：FixedThreadPool 和 SingleThreadExector 。由于队列永远不会被放满，因此FixedThreadPool最多只能创建核心线程数的线程。\"},\"6034\":{\"t\":\"SynchronousQueue（同步队列） ：CachedThreadPool 。SynchronousQueue 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，CachedThreadPool 的最大线程数是 Integer.MAX_VALUE ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。\"},\"6035\":{\"t\":\"DelayedWorkQueue（延迟阻塞队列）：ScheduledThreadPool 和 SingleThreadScheduledExecutor 。DelayedWorkQueue 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。DelayedWorkQueue 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 Integer.MAX_VALUE，所以最多只能创建核心线程数的线程。\"},\"6036\":{\"t\":\"线程池处理任务的流程了解吗？\"},\"6037\":{\"t\":\"如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。\"},\"6038\":{\"t\":\"如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。\"},\"6039\":{\"t\":\"如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。\"},\"6040\":{\"t\":\"如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用RejectedExecutionHandler.rejectedExecution()方法。\"},\"6041\":{\"t\":\"图解线程池实现原理\"},\"6042\":{\"t\":\"如何设定线程池的大小？\"},\"6043\":{\"t\":\"有一个简单并且适用面比较广的公式：\"},\"6044\":{\"t\":\"CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\"},\"6045\":{\"t\":\"I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\"},\"6046\":{\"t\":\"方式二：通过 Executor 框架的工具类 Executors 来创建。\"},\"6047\":{\"t\":\"我们可以创建多种类型的 ThreadPoolExecutor：\"},\"6048\":{\"t\":\"FixedThreadPool ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\"},\"6049\":{\"t\":\"SingleThreadExecutor： 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\"},\"6050\":{\"t\":\"CachedThreadPool： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。\"},\"6051\":{\"t\":\"ScheduledThreadPool ：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。\"},\"6052\":{\"h\":\"为什么不推荐使用内置线程池？\",\"a\":\"为什么不推荐使用内置线程池\"},\"6053\":{\"t\":\"在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\"},\"6054\":{\"t\":\"为什么呢？\"},\"6055\":{\"t\":\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\"},\"6056\":{\"t\":\"另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险\"},\"6057\":{\"t\":\"Executors 返回线程池对象的弊端如下(后文会详细介绍到)：\"},\"6058\":{\"t\":\"FixedThreadPool 和 SingleThreadExecutor ： 使用的是无界的 LinkedBlockingQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"6059\":{\"t\":\"CachedThreadPool ：使用的是同步队列 SynchronousQueue, 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。\"},\"6060\":{\"t\":\"ScheduledThreadPool 和 SingleThreadScheduledExecutor : 使用的无界的延迟阻塞队列DelayedWorkQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\"},\"6061\":{\"h\":\"如何动态修改线程池的参数？\",\"a\":\"如何动态修改线程池的参数\"},\"6062\":{\"t\":\"JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：\"},\"6063\":{\"t\":\"图片\"},\"6064\":{\"t\":\"重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。\"},\"6065\":{\"t\":\"问题一：线程池被创建后里面有线程吗？如果没有的话，你知道有什么方法对线程池进行预热吗？\"},\"6066\":{\"t\":\"线程池被创建后如果没有任务过来，里面是不会有线程的。如果需要预热的话可以调用下面的两个方法：\"},\"6067\":{\"t\":\"全部启动：\"},\"6068\":{\"t\":\"图片\"},\"6069\":{\"t\":\"仅启动一个：\"},\"6070\":{\"t\":\"图片\"},\"6071\":{\"t\":\"问题二：核心线程数会被回收吗？需要什么设置？\"},\"6072\":{\"t\":\"核心线程数默认是不会被回收的，如果需要回收核心线程数，需要调用下面的方法：\"},\"6073\":{\"t\":\"图片\"},\"6074\":{\"t\":\"参考：https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html；https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651751537&idx=1&sn=c50a434302cc06797828782970da190e&chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c&scene=21#wechat_redirect\"},\"6075\":{\"h\":\"Docker\"},\"6076\":{\"h\":\"Docker\",\"a\":\"docker\"},\"6077\":{\"h\":\"什么是 Docker?\",\"a\":\"什么是-docker\"},\"6078\":{\"t\":\"Docker 是世界领先的软件容器平台。\"},\"6079\":{\"t\":\"Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 UnionFS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\"},\"6080\":{\"t\":\"Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。\"},\"6081\":{\"t\":\"用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\"},\"6082\":{\"h\":\"Docker的架构\",\"a\":\"docker的架构\"},\"6083\":{\"t\":\"Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，模块各司其职。下图是它的总体架构图：\"},\"6084\":{\"t\":\"img\"},\"6085\":{\"t\":\"用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。\"},\"6086\":{\"t\":\"Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。\"},\"6087\":{\"t\":\"Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。\"},\"6088\":{\"t\":\"Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graphdriver 将下载镜像以 Graph 的形式存储。\"},\"6089\":{\"t\":\"当需要为 Docker 创建网络环境时，通过网络管理驱动 Networkdriver 创建并配置 Docker容器网络环境。\"},\"6090\":{\"t\":\"当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。\"},\"6091\":{\"t\":\"Libcontainer 是一项独立的容器管理包，Networkdriver 以及 Execdriver 都是通过 Libcontainer 来实现具体对容器进行的操作。\"},\"6092\":{\"h\":\"镜像和容器的相关操作\",\"a\":\"镜像和容器的相关操作\"},\"6093\":{\"h\":\"Spring Cloud\"},\"6094\":{\"h\":\"Spring Cloud\",\"a\":\"spring-cloud\"},\"6095\":{\"h\":\"什么是Spring Cloud？\",\"a\":\"什么是spring-cloud\"},\"6096\":{\"t\":\"Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。\"},\"6097\":{\"h\":\"微服务的概念\",\"a\":\"微服务的概念\"},\"6098\":{\"t\":\"分布式，多个模块，每一个模块都是一个单独的系统。\"},\"6099\":{\"t\":\"以前所有的代码都放在同一个工程中、部署在同一个服务器、同一项目的不同模块不同功能互相抢占资源，微服务就是将工程根据不同的业务规则拆分成微服务，部署在不同的服务器上，服务之间相互调用，java中有的微服务有dubbo(只能用来做微服务)、springcloud( 提供了服务的发现、断路器等)。\"},\"6100\":{\"t\":\"微服务的特点：\"},\"6101\":{\"t\":\"按业务划分为一个独立运行的程序，即服务单元\"},\"6102\":{\"t\":\"服务之间通过HTTP协议相互通信\"},\"6103\":{\"t\":\"自动化部署\"},\"6104\":{\"t\":\"可以用不同的编程语言\"},\"6105\":{\"t\":\"可以用不同的存储技术\"},\"6106\":{\"t\":\"服务集中化管理\"},\"6107\":{\"t\":\"微服务是一个分布式系统\"},\"6108\":{\"t\":\"微服务的优势\"},\"6109\":{\"t\":\"将一个复杂的业务拆分为若干小的业务，将复杂的业务简单化，新人只需要了解他所接管的服务的代码，减少了新人的学习成本。\"},\"6110\":{\"t\":\"由于微服务是分布式服务，服务与服务之间没有任何耦合。微服务系统的微服务单元具有很强的横向拓展能力。\"},\"6111\":{\"t\":\"服务与服务之间采用HTTP网络通信协议来通信，单个服务内部高度耦合，服务与服务之间完全独立，无耦合。这使得微服务可以采用任何的开发语言和技术来实现，提高开发效率、降低开发成本。\"},\"6112\":{\"t\":\"微服务是按照业务进行拆分的，并有坚实的服务边界，若要重写某一业务代码，不需了解所有业务，重写简单。\"},\"6113\":{\"t\":\"微服务的每个服务单元是独立部署的，即独立运行在某个进程中，微服务的修改和部署对其他服务没有影响。\"},\"6114\":{\"t\":\"微服务在CAP理论中采用的AP架构，具有高可用分区容错特点。高可用主要体现在系统7x24不间断服务，他要求系统有大量的服务器集群，从而提高系统的负载能力。分区容错也使得系统更加健壮。\"},\"6115\":{\"t\":\"微服务的不足\"},\"6116\":{\"t\":\"微服务的复杂度：构建一个微服务比较复杂，服务与服务之间通过HTTP协议或其他消息传递机制通信，开发者要选出最佳的通信机制，并解决网络服务差时带来的风险。\"},\"6117\":{\"t\":\"分布式事物：将事物分成多阶段提交，如果一阶段某一节点失败仍会导致数据不正确。如果事物涉及的节点很多，某一节点的网络出现异常会导致整个事务处于阻塞状态，大大降低数据库的性能。\"},\"6118\":{\"t\":\"服务划分：将一个完整的系统拆分成很多个服务，是一件非常困难的事，因为这涉及了具体的业务场景\"},\"6119\":{\"t\":\"服务部署：最佳部署容器Docker\"},\"6120\":{\"h\":\"Spring Cloud的优缺点以及组件\",\"a\":\"spring-cloud的优缺点以及组件\"},\"6121\":{\"t\":\"设计目标\"},\"6122\":{\"t\":\"协调各个微服务，简化分布式系统开发。\"},\"6123\":{\"t\":\"优缺点\"},\"6124\":{\"t\":\"微服务的框架那么多比如：dubbo、Kubernetes，为什么就要使用Spring Cloud的呢？\"},\"6125\":{\"t\":\"优点：\"},\"6126\":{\"t\":\"产出于Spring大家族，Spring在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善 组件丰富，功能齐全。Spring Cloud 为微服务架构提供了非常完整的支持。例如、配置管理、服务发现、断路器、微服务网关等； Spring Cloud 社区活跃度很高，教程很丰富，遇到问题很容易找到解决方案 服务拆分粒度更细，耦合度比较低，有利于资源重复利用，有利于提高开发效率 可以更精准的制定优化服务方案，提高系统的可维护性 减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发 微服务可以是跨平台的，可以用任何一种语言开发 适于互联网时代，产品迭代周期更短 \"},\"6127\":{\"t\":\"缺点：\"},\"6128\":{\"t\":\"微服务过多，治理成本高，不利于维护系统 分布式系统开发的成本高（容错，分布式事务等）对团队挑战大 \"},\"6129\":{\"t\":\"springcloud中的组件有那些？\"},\"6130\":{\"t\":\"说出主要的组件： Spring Cloud Eureka,服务注册中心,特性有失效剔除、服务保护 Spring Cloud Zuul,API服务网关,功能有路由分发和过滤 Spring Cloud Config,分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式 Spring Cloud Ribbon,客户端负载均衡,特性有区域亲和,重试机制 Spring Cloud Hystrix,客户端容错保护,特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离 Spring Cloud Feign,声明式服务调用本质上就是Ribbon+Hystrix Spring Cloud Stream,消息驱动,有Sink、Source、Processor三种通道,特性有订阅发布、消费组、消息分区 Spring Cloud Bus,消息总线,配合Config仓库修改的一种Stream实现， Spring Cloud Sleuth,分布式服务追踪,需要搞清楚TraceID和SpanID以及抽样,如何与ELK整合 \"},\"6131\":{\"t\":\"Spring Cloud项目部署架构？\"},\"6132\":{\"t\":\"img\"},\"6133\":{\"t\":\"网关与过滤器有什么区别？\"},\"6134\":{\"t\":\"网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。\"},\"6135\":{\"t\":\"什么是断路器\"},\"6136\":{\"t\":\"当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）\"},\"6137\":{\"t\":\"断路器有三种状态\"},\"6138\":{\"t\":\"打开状态：一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务\"},\"6139\":{\"t\":\"半开状态：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭\"},\"6140\":{\"t\":\"关闭状态：当服务一直处于正常状态 能正常调用\"},\"6141\":{\"t\":\"什么是 Hystrix？\"},\"6142\":{\"t\":\"在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等一些防止雪崩的技术。\"},\"6143\":{\"t\":\"Hystrix有四种防雪崩方式:\"},\"6144\":{\"t\":\"服务降级：接口调用失败就调用本地的方法返回一个空\"},\"6145\":{\"t\":\"服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息\"},\"6146\":{\"t\":\"服务隔离：隔离服务之间相互影响\"},\"6147\":{\"t\":\"服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。\"},\"6148\":{\"t\":\"什么是Feign？\"},\"6149\":{\"t\":\"Feign 是一个声明web服务客户端，这使得编写web服务客户端更容易。它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。\"},\"6150\":{\"h\":\"Feign远程调用的基本流程\",\"a\":\"feign远程调用的基本流程\"},\"6151\":{\"t\":\"Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，放回给调用者。Feign远程调用的基本流程，大致如下图所示。\"},\"6152\":{\"t\":\"在这里插入图片描述\"},\"6153\":{\"t\":\"从上图可以看到，Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的 Request 请求。通过Feign以及JAVA的动态代理机制，使得Java 开发人员，可以不用通过HTTP框架去封装HTTP请求报文的方式，完成远程服务的HTTP调用。\"},\"6154\":{\"t\":\"过程：\"},\"6155\":{\"t\":\"在微服务启动时，Feign会进行包扫描，对加@FeignClient注解的接口，按照注解的规则，创建远程接口的本地JDK Proxy代理实例。然后，将这些本地Proxy代理实例，注入到Spring IOC容器中。当远程接口的方法被调用，由Proxy代理实例去完成真正的远程访问，并且返回结果。\"},\"6156\":{\"h\":\"ZooKeeper\"},\"6157\":{\"h\":\"ZooKeeper\",\"a\":\"zookeeper\"},\"6158\":{\"h\":\"基本功能\",\"a\":\"基本功能\"},\"6159\":{\"t\":\"ZooKeeper 是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\"},\"6160\":{\"t\":\"ZooKeeper 为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。这些功能的实现主要依赖于 ZooKeeper 提供的 数据存储+事件监听 功能。\"},\"6161\":{\"t\":\"ZooKeeper 将数据保存在内存中，性能是不错的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景）。\"},\"6162\":{\"t\":\"另外，很多顶级的开源项目都用到了 ZooKeeper，比如：\"},\"6163\":{\"t\":\"Kafka : ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。不过，在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构。\"},\"6164\":{\"h\":\"ZAB算法\",\"a\":\"zab算法\"},\"6165\":{\"h\":\"ZAB 协议介绍\",\"a\":\"zab-协议介绍\"},\"6166\":{\"t\":\"ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\"},\"6167\":{\"h\":\"ZAB 协议两种基本的模式：崩溃恢复和消息广播\",\"a\":\"zab-协议两种基本的模式-崩溃恢复和消息广播\"},\"6168\":{\"t\":\"ZAB 协议包括两种基本的模式，分别是\"},\"6169\":{\"t\":\"崩溃恢复 ：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致。\"},\"6170\":{\"t\":\"消息广播 ：当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进入消息广播模式了。 当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\"},\"6171\":{\"h\":\"Zookeeper 架构\",\"a\":\"zookeeper-架构\"},\"6172\":{\"t\":\"作为一个优秀高效且可靠的分布式协调框架，ZooKeeper 在解决分布式数据一致性问题时并没有直接使用 Paxos ，而是专门定制了一致性协议叫做 ZAB(ZooKeeper Atomic Broadcast) 原子广播协议，该协议能够很好地支持 崩溃恢复 。\"},\"6173\":{\"h\":\"ZAB 中的三个角色\",\"a\":\"zab-中的三个角色\"},\"6174\":{\"t\":\"和介绍 Paxos 一样，在介绍 ZAB 协议之前，我们首先来了解一下在 ZAB 中三个主要的角色，Leader 领导者、Follower跟随者、Observer观察者 。\"},\"6175\":{\"t\":\"Leader ：集群中 唯一的写请求处理者 ，能够发起投票（投票也是为了进行写请求）。\"},\"6176\":{\"t\":\"Follower：能够接收客户端的请求，如果是读请求则可以自己处理，如果是写请求则要转发给 Leader 。在选举过程中会参与投票，有选举权和被选举权 。\"},\"6177\":{\"t\":\"Observer ：就是没有选举权和被选举权的 Follower 。\"},\"6178\":{\"t\":\"在 ZAB 协议中对 zkServer(即上面我们说的三个角色的总称) 还有两种模式的定义，分别是 消息广播 和 崩溃恢复 。\"},\"6179\":{\"h\":\"消息广播模式\",\"a\":\"消息广播模式\"},\"6180\":{\"t\":\"说白了就是 ZAB 协议是如何处理写请求的，上面我们不是说只有 Leader 能处理写请求嘛？那么我们的 Follower 和 Observer 是不是也需要 同步更新数据 呢？总不能数据只在 Leader 中更新了，其他角色都没有得到更新吧？\"},\"6181\":{\"t\":\"第一步肯定需要 Leader 将写请求 广播 出去呀，让 Leader 问问 Followers 是否同意更新，如果超过半数以上的同意那么就进行 Follower 和 Observer 的更新（和 Paxos 一样）。\"},\"6182\":{\"t\":\"在 Leader 这端，它为每个其他的 zkServer 准备了一个 队列 ，采用先进先出的方式发送消息。由于协议是 通过 TCP 来进行网络通信的，保证了消息的发送顺序性，接受顺序性也得到了保证。\"},\"6183\":{\"t\":\"除此之外，在 ZAB 中还定义了一个 全局单调递增的事务ID ZXID ，它是一个64位long型，其中高32位表示 epoch 年代，低32位表示事务id。epoch 是会根据 Leader 的变化而变化的，当一个 Leader 挂了，新的 Leader 上位的时候，年代（epoch）就变了。而低32位可以简单理解为递增的事务id。\"},\"6184\":{\"t\":\"定义这个的原因也是为了顺序性，每个 proposal 在 Leader 中生成后需要 通过其 ZXID 来进行排序 ，才能得到处理。\"},\"6185\":{\"h\":\"崩溃恢复模式\",\"a\":\"崩溃恢复模式\"},\"6186\":{\"t\":\"说到崩溃恢复我们首先要提到 ZAB 中的 Leader 选举算法，当系统出现崩溃影响最大应该是 Leader 的崩溃，因为我们只有一个 Leader ，所以当 Leader 出现问题的时候我们势必需要重新选举 Leader 。\"},\"6187\":{\"t\":\"Leader 选举可以分为两个不同的阶段，第一个是我们提到的 Leader 宕机需要重新选举，第二则是当 Zookeeper 启动时需要进行系统的 Leader 初始化选举。下面我先来介绍一下 ZAB 是如何进行初始化选举的。\"},\"6188\":{\"t\":\"假设我们集群中有3台机器，那也就意味着我们需要两台以上同意（超过半数）。比如这个时候我们启动了 server1 ，它会首先 投票给自己 ，投票内容为服务器的 myid 和 ZXID ，因为初始化所以 ZXID 都为0，此时 server1 发出的投票为 (1,0)。但此时 server1 的投票仅为1，所以不能作为 Leader ，此时还在选举阶段所以整个集群处于 Looking 状态。\"},\"6189\":{\"t\":\"接着 server2 启动了，它首先也会将投票选给自己(2,0)，并将投票信息广播出去（server1也会，只是它那时没有其他的服务器了），server1 在收到 server2 的投票信息后会将投票信息与自己的作比较。首先它会比较 ZXID ，ZXID 大的优先为 Leader，如果相同则比较 myid，myid 大的优先作为 Leader。所以此时server1 发现 server2 更适合做 Leader，它就会将自己的投票信息更改为(2,0)然后再广播出去，之后server2 收到之后发现和自己的一样无需做更改，并且自己的 投票已经超过半数 ，则 确定 server2 为 Leader，server1 也会将自己服务器设置为 Following 变为 Follower。整个服务器就从 Looking 变为了正常状态。\"},\"6190\":{\"t\":\"当 server3 启动发现集群没有处于 Looking 状态时，它会直接以 Follower 的身份加入集群。\"},\"6191\":{\"t\":\"还是前面三个 server 的例子，如果在整个集群运行的过程中 server2 挂了，那么整个集群会如何重新选举 Leader 呢？其实和初始化选举差不多。\"},\"6192\":{\"t\":\"首先毫无疑问的是剩下的两个 Follower 会将自己的状态 从 Following 变为 Looking 状态 ，然后每个 server 会向初始化投票一样首先给自己投票（这不过这里的 zxid 可能不是0了，这里为了方便随便取个数字）。\"},\"6193\":{\"t\":\"假设 server1 给自己投票为(1,99)，然后广播给其他 server，server3 首先也会给自己投票(3,95)，然后也广播给其他 server。server1 和 server3 此时会收到彼此的投票信息，和一开始选举一样，他们也会比较自己的投票和收到的投票（zxid 大的优先，如果相同那么就 myid 大的优先）。这个时候 server1 收到了 server3 的投票发现没自己的合适故不变，server3 收到 server1 的投票结果后发现比自己的合适于是更改投票为(1,99)然后广播出去，最后 server1 收到了发现自己的投票已经超过半数就把自己设为 Leader，server3 也随之变为 Follower。\"},\"6194\":{\"t\":\"请注意 ZooKeeper 为什么要设置奇数个结点？比如这里我们是三个，挂了一个我们还能正常工作，挂了两个我们就不能正常工作了（已经没有超过半数的节点数了，所以无法进行投票等操作了）。而假设我们现在有四个，挂了一个也能工作，但是挂了两个也不能正常工作了，这是和三个一样的，而三个比四个还少一个，带来的效益是一样的，所以 Zookeeper 推荐奇数个 server 。\"},\"6195\":{\"t\":\"那么说完了 ZAB 中的 Leader 选举方式之后我们再来了解一下 崩溃恢复 是什么玩意？\"},\"6196\":{\"t\":\"其实主要就是 当集群中有机器挂了，我们整个集群如何保证数据一致性？\"},\"6197\":{\"t\":\"如果只是 Follower 挂了，而且挂的没超过半数的时候，因为我们一开始讲了在 Leader 中会维护队列，所以不用担心后面的数据没接收到导致数据不一致性。\"},\"6198\":{\"t\":\"如果 Leader 挂了那就麻烦了，我们肯定需要先暂停服务变为 Looking 状态然后进行 Leader 的重新选举（上面我讲过了），但这个就要分为两种情况了，分别是 确保已经被Leader提交的提案最终能够被所有的Follower提交 和 跳过那些已经被丢弃的提案 。\"},\"6199\":{\"t\":\"确保已经被Leader提交的提案最终能够被所有的Follower提交是什么意思呢？\"},\"6200\":{\"t\":\"假设 Leader (server2) 发送 commit 请求（忘了请看上面的消息广播模式），他发送给了 server3，然后要发给 server1 的时候突然挂了。这个时候重新选举的时候我们如果把 server1 作为 Leader 的话，那么肯定会产生数据不一致性，因为 server3 肯定会提交刚刚 server2 发送的 commit 请求的提案，而 server1 根本没收到所以会丢弃。\"},\"6201\":{\"t\":\"崩溃恢复\"},\"6202\":{\"t\":\"那怎么解决呢？\"},\"6203\":{\"t\":\"聪明的同学肯定会质疑，这个时候 server1 已经不可能成为 Leader 了，因为 server1 和 server3 进行投票选举的时候会比较 ZXID ，而此时 server3 的 ZXID 肯定比 server1 的大了。(不理解可以看前面的选举算法)\"},\"6204\":{\"t\":\"那么跳过那些已经被丢弃的提案又是什么意思呢？\"},\"6205\":{\"t\":\"假设 Leader (server2) 此时同意了提案N1，自身提交了这个事务并且要发送给所有 Follower 要 commit 的请求，却在这个时候挂了，此时肯定要重新进行 Leader 的选举，比如说此时选 server1 为 Leader （这无所谓）。但是过了一会，这个 挂掉的 Leader 又重新恢复了 ，此时它肯定会作为 Follower 的身份进入集群中，需要注意的是刚刚 server2 已经同意提交了提案N1，但其他 server 并没有收到它的 commit 信息，所以其他 server 不可能再提交这个提案N1了，这样就会出现数据不一致性问题了，所以 该提案N1最终需要被抛弃掉 。\"},\"6206\":{\"t\":\"崩溃恢复\"},\"6207\":{\"h\":\"CAP\",\"a\":\"cap\"},\"6208\":{\"h\":\"简介\",\"a\":\"简介\"},\"6209\":{\"t\":\"CAP 也就是 Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性） 这三个单词首字母组合。\"},\"6210\":{\"t\":\"img\"},\"6211\":{\"t\":\"在理论计算机科学中，CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能同时满足以下三点中的两个：\"},\"6212\":{\"t\":\"一致性（Consistency） : 所有节点访问同一份最新的数据副本\"},\"6213\":{\"t\":\"可用性（Availability）: 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\"},\"6214\":{\"t\":\"分区容错性（Partition Tolerance） : 分布式系统出现网络分区的时候，仍然能够对外提供服务。\"},\"6215\":{\"t\":\"什么是网络分区？\"},\"6216\":{\"t\":\"分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫 网络分区。\"},\"6217\":{\"h\":\"不是所谓的“3 选 2”\",\"a\":\"不是所谓的-3-选-2\"},\"6218\":{\"t\":\"大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。\"},\"6219\":{\"t\":\"当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。\"},\"6220\":{\"t\":\"简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。\"},\"6221\":{\"t\":\"因此，分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。 比如 ZooKeeper 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。\"},\"6222\":{\"t\":\"为啥不可能选择 CA 架构呢？ 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。\"},\"6223\":{\"t\":\"选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。\"},\"6224\":{\"t\":\"另外，需要补充说明的一点是： 如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。\"},\"6225\":{\"h\":\"操作系统\"},\"6226\":{\"h\":\"七：操作系统\",\"a\":\"七-操作系统\"},\"6227\":{\"h\":\"进程和线程管理\",\"a\":\"进程和线程管理\"},\"6228\":{\"h\":\"Java里的进程有哪些状态？\",\"a\":\"java里的进程有哪些状态\"},\"6229\":{\"t\":\"新建状态(New)：新创建了一个线程对象。\"},\"6230\":{\"t\":\"就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。\"},\"6231\":{\"t\":\"运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。\"},\"6232\":{\"t\":\"阻塞状态(Blocked)：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\"},\"6233\":{\"t\":\"等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒， 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。\"},\"6234\":{\"t\":\"终止状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。 \"},\"6235\":{\"h\":\"进程间通信\",\"a\":\"进程间通信\"},\"6236\":{\"h\":\"互斥同步\",\"a\":\"互斥同步\"},\"6237\":{\"t\":\"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。\"},\"6238\":{\"t\":\"下面是几种常见的线程同步的方式：\"},\"6239\":{\"t\":\"互斥锁(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。\"},\"6240\":{\"t\":\"读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。\"},\"6241\":{\"t\":\"信号量(Semaphore) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。\"},\"6242\":{\"t\":\"屏障（Barrier） ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。\"},\"6243\":{\"t\":\"事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。\"},\"6244\":{\"t\":\"在进程/线程并发执行的过程中，进程/线程之间存在协作的关系，例如有互斥、同步的关系。\"},\"6245\":{\"t\":\"为了实现进程/线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：\"},\"6246\":{\"t\":\"锁：加锁、解锁操作；\"},\"6247\":{\"t\":\"信号量：P、V 操作；\"},\"6248\":{\"t\":\"这两个都可以方便地实现进程/线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程/线程同步。\"},\"6249\":{\"h\":\"进程间通信\",\"a\":\"进程间通信-1\"},\"6250\":{\"t\":\"管道/匿名管道(Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。\"},\"6251\":{\"t\":\"有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。\"},\"6252\":{\"t\":\"信号(Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；\"},\"6253\":{\"t\":\"消息队列(Message Queuing) ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。\"},\"6254\":{\"t\":\"信号量(Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。\"},\"6255\":{\"t\":\"共享内存(Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。\"},\"6256\":{\"t\":\"套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。\"},\"6257\":{\"h\":\"虚拟内存管理\",\"a\":\"虚拟内存管理\"},\"6258\":{\"h\":\"I/O 多路复用\",\"a\":\"i-o-多路复用\"},\"6259\":{\"t\":\"既然为每个请求分配一个进程/线程的方式不合适，那有没有可能只使用一个进程来维护多个 Socket 呢？答案是有的，那就是 I/O 多路复用技术。\"},\"6260\":{\"t\":\"一个进程虽然任一时刻只能处理一个请求，但是处理每个请求的事件时，耗时控制在 1 毫秒以内，这样 1 秒内就可以处理上千个请求，把时间拉长来看，多个请求复用了一个进程，这就是多路复用，这种思想很类似一个 CPU 并发多个进程，所以也叫做时分多路复用。\"},\"6261\":{\"t\":\"我们熟悉的 select/poll/epoll 内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。\"},\"6262\":{\"t\":\"select/poll/epoll 是如何获取网络事件的呢？在获取事件时，先把所有连接（文件描述符）传给内核，再由内核返回产生了事件的连接，然后在用户态中再处理这些连接对应的请求即可。\"},\"6263\":{\"h\":\"epoll\",\"a\":\"epoll\"},\"6264\":{\"t\":\"epoll 通过两个方面，很好解决了 select/poll 的问题。\"},\"6265\":{\"t\":\"第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select/poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。\"},\"6266\":{\"t\":\"第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。\"},\"6267\":{\"t\":\"从下图你可以看到 epoll 相关的接口作用：\"},\"6268\":{\"t\":\"img\"},\"6269\":{\"t\":\"epoll 的方式即使监听的 Socket 数量越多的时候，效率不会大幅度降低，能够同时监听的 Socket 的数目也非常的多了，上限就为系统定义的进程打开的最大文件描述符个数。因而，epoll 被称为解决 C10K 问题的利器。\"},\"6270\":{\"t\":\"插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。\"},\"6271\":{\"t\":\"这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。\"},\"6272\":{\"t\":\"epoll 支持两种事件触发模式，分别是边缘触发（*edge-triggered，ET*）**和**水平触发（*level-triggered，LT*）。\"},\"6273\":{\"t\":\"这两个术语还挺抽象的，其实它们的区别还是很好理解的。\"},\"6274\":{\"t\":\"使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；\"},\"6275\":{\"t\":\"使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；\"},\"6276\":{\"t\":\"举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。\"},\"6277\":{\"t\":\"这就是两者的区别，水平触发的意思是只要满足事件的条件，比如内核中有数据需要读，就一直不断地把这个事件传递给用户；而边缘触发的意思是只有第一次满足条件的时候才触发，之后就不会再传递同样的事件了。\"},\"6278\":{\"t\":\"如果使用水平触发模式，当内核通知文件描述符可读写时，接下来还可以继续去检测它的状态，看它是否依然可读或可写。所以在收到通知后，没必要一次执行尽可能多的读写操作。\"},\"6279\":{\"t\":\"如果使用边缘触发模式，I/O 事件发生时只会通知一次，而且我们不知道到底能读写多少数据，所以在收到通知后应尽可能地读写数据，以免错失读写的机会。因此，我们会循环从文件描述符读写数据，那么如果文件描述符是阻塞的，没有数据可读写时，进程会阻塞在读写函数那里，程序就没办法继续往下执行。所以，边缘触发模式一般和非阻塞 I/O 搭配使用，程序会一直执行 I/O 操作，直到系统调用（如 read 和 write）返回错误，错误类型为 EAGAIN 或 EWOULDBLOCK。\"},\"6280\":{\"t\":\"一般来说，边缘触发的效率比水平触发的效率要高，因为边缘触发可以减少 epoll_wait 的系统调用次数，系统调用也是有一定的开销的的，毕竟也存在上下文的切换。\"},\"6281\":{\"t\":\"select/poll 只有水平触发模式，epoll 默认的触发模式是水平触发，但是可以根据应用场景设置为边缘触发模式。\"},\"6282\":{\"t\":\"C10K ：并发 1 万请求，也就是经典的 C10K 问题 ，C 是 Client 单词首字母缩写，C10K 就是单机同时处理 1 万个请求的问题。\"},\"6283\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/selete_poll_epoll.html#如何服务更多的用户\"},\"6284\":{\"h\":\"零拷贝\",\"a\":\"零拷贝\"},\"6285\":{\"t\":\"零拷贝技术实现的方式通常有 2 种：\"},\"6286\":{\"t\":\"mmap + write\"},\"6287\":{\"t\":\"sendfile\"},\"6288\":{\"t\":\"下面就谈一谈，它们是如何减少「上下文切换」和「数据拷贝」的次数。\"},\"6289\":{\"h\":\"mmap + write\",\"a\":\"mmap-write\"},\"6290\":{\"t\":\"在前面我们知道，read() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。\"},\"6291\":{\"t\":\"buf = mmap(file, len); write(sockfd, buf, len); \"},\"6292\":{\"t\":\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\"},\"6293\":{\"t\":\"img\"},\"6294\":{\"t\":\"具体过程如下：\"},\"6295\":{\"t\":\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\"},\"6296\":{\"t\":\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\"},\"6297\":{\"t\":\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\"},\"6298\":{\"t\":\"我们可以得知，通过使用 mmap() 来代替 read()， 可以减少一次数据拷贝的过程。\"},\"6299\":{\"t\":\"但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。\"},\"6300\":{\"h\":\"sendfile\",\"a\":\"sendfile\"},\"6301\":{\"t\":\"在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 sendfile()，函数形式如下：\"},\"6302\":{\"t\":\"#include <sys/socket.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \"},\"6303\":{\"t\":\"它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。\"},\"6304\":{\"t\":\"首先，它可以替代前面的 read() 和 write() 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。\"},\"6305\":{\"t\":\"其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：\"},\"6306\":{\"t\":\"img\"},\"6307\":{\"t\":\"但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（The Scatter-Gather Direct Memory Access）技术（和普通的 DMA 有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket 缓冲区的过程。\"},\"6308\":{\"t\":\"于是，从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\"},\"6309\":{\"t\":\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；\"},\"6310\":{\"t\":\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；\"},\"6311\":{\"t\":\"所以，这个过程之中，只进行了 2 次数据拷贝，如下图：\"},\"6312\":{\"t\":\"img\"},\"6313\":{\"t\":\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\"},\"6314\":{\"t\":\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\"},\"6315\":{\"t\":\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"},\"6316\":{\"h\":\"使用零拷贝技术的项目\",\"a\":\"使用零拷贝技术的项目\"},\"6317\":{\"t\":\"事实上，Kafka 这个开源项目，就利用了「零拷贝」技术，从而大幅提升了 I/O 的吞吐率，这也是 Kafka 在处理海量数据为什么这么快的原因之一。\"},\"6318\":{\"t\":\"如果你追溯 Kafka 文件传输的代码，你会发现，最终它调用了 Java NIO 库里的 transferTo 方法。\"},\"6319\":{\"t\":\"如果 Linux 系统支持 sendfile() 系统调用，那么 transferTo() 实际上最后就会使用到 sendfile() 系统调用函数。\"},\"6320\":{\"h\":\"Reactor\",\"a\":\"reactor\"},\"6321\":{\"t\":\"Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成，它俩负责的事情如下：\"},\"6322\":{\"t\":\"Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件；\"},\"6323\":{\"t\":\"处理资源池负责处理事件，如 read -> 业务逻辑 -> send；\"},\"6324\":{\"t\":\"Reactor 模式是灵活多变的，可以应对不同的业务场景，灵活在于：\"},\"6325\":{\"t\":\"Reactor 的数量可以只有一个，也可以有多个；\"},\"6326\":{\"t\":\"处理资源池可以是单个进程 / 线程，也可以是多个进程 /线程；\"},\"6327\":{\"t\":\"将上面的两个因素排列组设一下，理论上就可以有 4 种方案选择：\"},\"6328\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"6329\":{\"t\":\"单 Reactor 多进程 / 线程；\"},\"6330\":{\"t\":\"多 Reactor 单进程 / 线程；\"},\"6331\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"6332\":{\"t\":\"其中，「多 Reactor 单进程 / 线程」实现方案相比「单 Reactor 单进程 / 线程」方案，不仅复杂而且也没有性能优势，因此实际中并没有应用。\"},\"6333\":{\"t\":\"剩下的 3 个方案都是比较经典的，且都有应用在实际的项目中：\"},\"6334\":{\"t\":\"单 Reactor 单进程 / 线程；\"},\"6335\":{\"t\":\"单 Reactor 多线程 / 进程；\"},\"6336\":{\"t\":\"多 Reactor 多进程 / 线程；\"},\"6337\":{\"t\":\"方案具体使用进程还是线程，要看使用的编程语言以及平台有关：\"},\"6338\":{\"t\":\"Java 语言一般使用线程，比如 Netty;\"},\"6339\":{\"t\":\"C 语言使用进程和线程都可以，例如 Nginx 使用的是进程，Memcache 使用的是线程。\"},\"6340\":{\"t\":\"接下来，分别介绍这三个经典的 Reactor 方案。\"},\"6341\":{\"h\":\"单 Reactor 单进程 / 线程\",\"a\":\"单-reactor-单进程-线程\"},\"6342\":{\"t\":\"一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。\"},\"6343\":{\"t\":\"而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。\"},\"6344\":{\"t\":\"我们来看看「单 Reactor 单进程」的方案示意图：\"},\"6345\":{\"t\":\"img\"},\"6346\":{\"t\":\"可以看到进程里有 Reactor、Acceptor、Handler 这三个对象：\"},\"6347\":{\"t\":\"Reactor 对象的作用是监听和分发事件；\"},\"6348\":{\"t\":\"Acceptor 对象的作用是获取连接；\"},\"6349\":{\"t\":\"Handler 对象的作用是处理业务；\"},\"6350\":{\"t\":\"对象里的 select、accept、read、send 是系统调用函数，dispatch 和 「业务处理」是需要完成的操作，其中 dispatch 是分发事件操作。\"},\"6351\":{\"t\":\"接下来，介绍下「单 Reactor 单进程」这个方案：\"},\"6352\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"6353\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"6354\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"6355\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"6356\":{\"t\":\"单 Reactor 单进程的方案因为全部工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多进程竞争。\"},\"6357\":{\"t\":\"但是，这种方案存在 2 个缺点：\"},\"6358\":{\"t\":\"第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能；\"},\"6359\":{\"t\":\"第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；\"},\"6360\":{\"t\":\"所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。\"},\"6361\":{\"t\":\"Redis 是由 C 语言实现的，在 Redis 6.0 版本之前采用的正是「单 Reactor 单进程」的方案，因为 Redis 业务处理主要是在内存中完成，操作的速度是很快的，性能瓶颈不在 CPU 上，所以 Redis 对于命令的处理是单进程的方案。\"},\"6362\":{\"h\":\"单 Reactor 多线程 / 多进程\",\"a\":\"单-reactor-多线程-多进程\"},\"6363\":{\"t\":\"如果要克服「单 Reactor 单线程 / 进程」方案的缺点，那么就需要引入多线程 / 多进程，这样就产生了单 Reactor 多线程 / 多进程的方案。\"},\"6364\":{\"t\":\"闻其名不如看其图，先来看看「单 Reactor 多线程」方案的示意图如下：\"},\"6365\":{\"t\":\"img\"},\"6366\":{\"t\":\"详细说一下这个方案：\"},\"6367\":{\"t\":\"Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；\"},\"6368\":{\"t\":\"如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；\"},\"6369\":{\"t\":\"如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；\"},\"6370\":{\"t\":\"上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了：\"},\"6371\":{\"t\":\"Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理；\"},\"6372\":{\"t\":\"子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；\"},\"6373\":{\"t\":\"单 Reator 多线程的方案优势在于能够充分利用多核 CPU 的能力，那既然引入多线程，那么自然就带来了多线程竞争资源的问题。\"},\"6374\":{\"t\":\"例如，子线程完成业务处理后，要把结果传递给主线程的 Handler 进行发送，这里涉及共享数据的竞争。\"},\"6375\":{\"t\":\"要避免多线程由于竞争共享资源而导致数据错乱的问题，就需要在操作共享资源前加上互斥锁，以保证任意时间里只有一个线程在操作共享资源，待该线程操作完释放互斥锁后，其他线程才有机会操作共享数据。\"},\"6376\":{\"t\":\"聊完单 Reactor 多线程的方案，接着来看看单 Reactor 多进程的方案。\"},\"6377\":{\"t\":\"事实上，单 Reactor 多进程相比单 Reactor 多线程实现起来很麻烦，主要因为要考虑子进程 <-> 父进程的双向通信，并且父进程还得知道子进程要将数据发送给哪个客户端。\"},\"6378\":{\"t\":\"而多线程间可以共享数据，虽然要额外考虑并发问题，但是这远比进程间通信的复杂度低得多，因此实际应用中也看不到单 Reactor 多进程的模式。\"},\"6379\":{\"t\":\"另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\"},\"6380\":{\"h\":\"多 Reactor 多进程 / 线程\",\"a\":\"多-reactor-多进程-线程\"},\"6381\":{\"t\":\"要解决「单 Reactor」的问题，就是将「单 Reactor」实现成「多 Reactor」，这样就产生了第 多 Reactor 多进程 / 线程的方案。\"},\"6382\":{\"t\":\"老规矩，闻其名不如看其图。多 Reactor 多进程 / 线程方案的示意图如下（以线程为例）：\"},\"6383\":{\"t\":\"img\"},\"6384\":{\"t\":\"方案详细说明如下：\"},\"6385\":{\"t\":\"主线程中的 MainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 对象中的 accept 获取连接，将新的连接分配给某个子线程；\"},\"6386\":{\"t\":\"子线程中的 SubReactor 对象将 MainReactor 对象分配的连接加入 select 继续进行监听，并创建一个 Handler 用于处理连接的响应事件。\"},\"6387\":{\"t\":\"如果有新的事件发生时，SubReactor 对象会调用当前连接对应的 Handler 对象来进行响应。\"},\"6388\":{\"t\":\"Handler 对象通过 read -> 业务处理 -> send 的流程来完成完整的业务流程。\"},\"6389\":{\"t\":\"多 Reactor 多线程的方案虽然看起来复杂的，但是实际实现时比单 Reactor 多线程的方案要简单的多，原因如下：\"},\"6390\":{\"t\":\"主线程和子线程分工明确，主线程只负责接收新连接，子线程负责完成后续的业务处理。\"},\"6391\":{\"t\":\"主线程和子线程的交互很简单，主线程只需要把新连接传给子线程，子线程无须返回数据，直接就可以在子线程将处理结果发送给客户端。\"},\"6392\":{\"t\":\"参考：https://www.xiaolincoding.com/os/8_network_system/reactor.html#演进\"},\"6393\":{\"h\":\"MySQL\"},\"6394\":{\"h\":\"MySQL\",\"a\":\"mysql\"},\"6395\":{\"h\":\"InnoDB特性\",\"a\":\"innodb特性\"},\"6396\":{\"h\":\"MyISAM 和 InnoDB 有什么区别？\",\"a\":\"myisam-和-innodb-有什么区别\"},\"6397\":{\"t\":\"MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，可谓是风光一时。\"},\"6398\":{\"t\":\"虽然，MyISAM 的性能还行，各种特性也还不错（比如全文索引、压缩、空间函数等）。但是，MyISAM 不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。\"},\"6399\":{\"t\":\"MySQL 5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。\"},\"6400\":{\"t\":\"言归正传！咱们下面还是来简单对比一下两者：\"},\"6401\":{\"t\":\"1.是否支持行级锁\"},\"6402\":{\"t\":\"MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。\"},\"6403\":{\"t\":\"也就说，MyISAM 一锁就是锁住了整张表，这在并发写的情况下是多么滴憨憨啊！这也是为什么 InnoDB 在并发写的时候，性能更牛皮了！\"},\"6404\":{\"t\":\"2.是否支持事务\"},\"6405\":{\"t\":\"MyISAM 不提供事务支持。\"},\"6406\":{\"t\":\"InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别，具有提交(commit)和回滚(rollback)事务的能力。并且，InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）。\"},\"6407\":{\"t\":\"3.是否支持外键\"},\"6408\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"6409\":{\"t\":\"外键对于维护数据一致性非常有帮助，但是对性能有一定的损耗。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，在业务代码中进行约束即可！\"},\"6410\":{\"t\":\"阿里的《Java 开发手册》也是明确规定禁止使用外键的。\"},\"6411\":{\"t\":\"4.是否支持数据库异常崩溃后的安全恢复\"},\"6412\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"6413\":{\"t\":\"使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 redo log 。\"},\"6414\":{\"t\":\"5.是否支持 MVCC\"},\"6415\":{\"t\":\"MyISAM 不支持，而 InnoDB 支持。\"},\"6416\":{\"t\":\"讲真，这个对比有点废话，毕竟 MyISAM 连行级锁都不支持。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能。\"},\"6417\":{\"t\":\"6.索引实现不一样。\"},\"6418\":{\"t\":\"虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。\"},\"6419\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。\"},\"6420\":{\"h\":\"索引\",\"a\":\"索引\"},\"6421\":{\"t\":\"索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。\"},\"6422\":{\"h\":\"底层数据结构：\",\"a\":\"底层数据结构\"},\"6423\":{\"t\":\"Hash 表\"},\"6424\":{\"t\":\"哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。\"},\"6425\":{\"t\":\"为何能够通过 key 快速取出 value 呢？ 原因在于 哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。\"},\"6426\":{\"t\":\"既然哈希表这么快，为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。\"},\"6427\":{\"t\":\"B 树& B+树\"},\"6428\":{\"t\":\"B 树也称 B-树,全称为 多路平衡查找树 ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 Balanced （平衡）的意思。\"},\"6429\":{\"t\":\"目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。\"},\"6430\":{\"t\":\"B 树& B+树两者有何异同呢？\"},\"6431\":{\"t\":\"B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\"},\"6432\":{\"t\":\"B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。\"},\"6433\":{\"t\":\"B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\"},\"6434\":{\"t\":\"在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）\"},\"6435\":{\"t\":\"MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引（非聚集索引）”。\"},\"6436\":{\"t\":\"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“聚簇索引（聚集索引）”，而其余的索引都作为 辅助索引 ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。\"},\"6437\":{\"h\":\"类型总结\",\"a\":\"类型总结\"},\"6438\":{\"t\":\"按照数据结构维度划分：\"},\"6439\":{\"t\":\"BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。\"},\"6440\":{\"t\":\"哈希索引：类似键值对的形式，一次即可定位。\"},\"6441\":{\"t\":\"RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"6442\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"6443\":{\"t\":\"按照底层存储方式角度划分：\"},\"6444\":{\"t\":\"聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。\"},\"6445\":{\"t\":\"非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"6446\":{\"t\":\"按照应用维度划分：\"},\"6447\":{\"t\":\"主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。\"},\"6448\":{\"t\":\"普通索引：仅加速查询。\"},\"6449\":{\"t\":\"唯一索引：加速查询 + 列值唯一（可以有 NULL）。\"},\"6450\":{\"t\":\"覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。\"},\"6451\":{\"t\":\"联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。\"},\"6452\":{\"t\":\"全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。\"},\"6453\":{\"h\":\"主键索引：\",\"a\":\"主键索引\"},\"6454\":{\"t\":\"数据表的主键列使用的就是主键索引。\"},\"6455\":{\"t\":\"一张数据表有只能有一个主键，并且主键不能为 null，不能重复。\"},\"6456\":{\"t\":\"在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。\"},\"6457\":{\"t\":\"img\"},\"6458\":{\"h\":\"二级索引：\",\"a\":\"二级索引\"},\"6459\":{\"t\":\"二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。\"},\"6460\":{\"t\":\"唯一索引，普通索引，前缀索引等索引属于二级索引。\"},\"6461\":{\"t\":\"PS: 不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。\"},\"6462\":{\"t\":\"唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。\"},\"6463\":{\"t\":\"普通索引(Index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。\"},\"6464\":{\"t\":\"前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。\"},\"6465\":{\"t\":\"全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。\"},\"6466\":{\"t\":\"img\"},\"6467\":{\"h\":\"聚簇索引：\",\"a\":\"聚簇索引\"},\"6468\":{\"t\":\"聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。\"},\"6469\":{\"t\":\"在 MySQL 中，InnoDB 引擎的表的 .ibd文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。\"},\"6470\":{\"t\":\"优点 ：\"},\"6471\":{\"t\":\"查询速度非常快 ：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。\"},\"6472\":{\"t\":\"对排序查找和范围查找优化 ：聚簇索引对于主键的排序查找和范围查找速度非常快。\"},\"6473\":{\"t\":\"缺点 ：\"},\"6474\":{\"t\":\"依赖于有序的数据 ：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。\"},\"6475\":{\"t\":\"更新代价大 ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。\"},\"6476\":{\"h\":\"非聚簇索引：\",\"a\":\"非聚簇索引\"},\"6477\":{\"t\":\"非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。\"},\"6478\":{\"t\":\"非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。\"},\"6479\":{\"t\":\"优点 ：\"},\"6480\":{\"t\":\"更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的\"},\"6481\":{\"t\":\"缺点 ：\"},\"6482\":{\"t\":\"依赖于有序的数据 ：跟聚簇索引一样，非聚簇索引也依赖于有序的数据\"},\"6483\":{\"t\":\"可能会二次查询(回表) ：这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。\"},\"6484\":{\"h\":\"覆盖索引：\",\"a\":\"覆盖索引\"},\"6485\":{\"t\":\"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 覆盖索引（Covering Index） 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！\"},\"6486\":{\"t\":\"覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。\"},\"6487\":{\"t\":\"如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。\"},\"6488\":{\"h\":\"联合索引：\",\"a\":\"联合索引\"},\"6489\":{\"t\":\"使用表中的多个字段创建索引，就是 联合索引，也叫 组合索引 或 复合索引。\"},\"6490\":{\"t\":\"最左前缀匹配原则\"},\"6491\":{\"t\":\"最左前缀匹配原则指的是，在使用联合索引时，MySQL 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 >、<）才会停止匹配。对于 >=、<=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。\"},\"6492\":{\"t\":\"索引下推\"},\"6493\":{\"t\":\"索引下推（Index Condition Pushdown） 是 MySQL 5.6 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。\"},\"6494\":{\"h\":\"正确使用索引的一些建议：\",\"a\":\"正确使用索引的一些建议\"},\"6495\":{\"t\":\"选择合适的字段创建索引：\"},\"6496\":{\"t\":\"不为 NULL 的字段 ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。\"},\"6497\":{\"t\":\"被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。\"},\"6498\":{\"t\":\"被作为条件查询的字段 ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。\"},\"6499\":{\"t\":\"频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。\"},\"6500\":{\"t\":\"被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。\"},\"6501\":{\"t\":\"被频繁更新的字段应该慎重建立索引：\"},\"6502\":{\"t\":\"虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。\"},\"6503\":{\"t\":\"限制每张表上的索引数量：\"},\"6504\":{\"t\":\"索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。\"},\"6505\":{\"t\":\"索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。\"},\"6506\":{\"t\":\"因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。\"},\"6507\":{\"t\":\"尽可能的考虑建立联合索引而不是单列索引：\"},\"6508\":{\"t\":\"因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。\"},\"6509\":{\"t\":\"注意避免冗余索引：\"},\"6510\":{\"t\":\"冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\"},\"6511\":{\"t\":\"字符串类型的字段使用前缀索引代替普通索引：\"},\"6512\":{\"t\":\"前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。\"},\"6513\":{\"t\":\"避免索引失效：\"},\"6514\":{\"t\":\"索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：\"},\"6515\":{\"t\":\"使用 SELECT * 进行查询;\"},\"6516\":{\"t\":\"创建了组合索引，但查询条件未遵守最左匹配原则;\"},\"6517\":{\"t\":\"在索引列上进行计算、函数、类型转换等操作;\"},\"6518\":{\"t\":\"以 % 开头的 LIKE 查询比如 like '%abc';\"},\"6519\":{\"t\":\"查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;\"},\"6520\":{\"t\":\"发生隐式转换\"},\"6521\":{\"h\":\"锁机制\",\"a\":\"锁机制\"},\"6522\":{\"t\":\"在 MySQL 里，根据加锁的范围，可以分为全局锁、表级锁和行锁三类。\"},\"6523\":{\"t\":\"img\"},\"6524\":{\"h\":\"全局锁：\",\"a\":\"全局锁\"},\"6525\":{\"t\":\"要使用全局锁，则要执行这条命令：\"},\"6526\":{\"t\":\"flush tables with read lock \"},\"6527\":{\"t\":\"执行后，整个数据库就处于只读状态了，这时其他线程执行以下操作，都会被阻塞：\"},\"6528\":{\"t\":\"对数据的增删改操作，比如 insert、delete、update等语句；\"},\"6529\":{\"t\":\"对表结构的更改操作，比如 alter table、drop table 等语句。\"},\"6530\":{\"t\":\"如果要释放全局锁，则要执行这条命令：\"},\"6531\":{\"t\":\"unlock tables \"},\"6532\":{\"t\":\"全局锁应用场景是什么？\"},\"6533\":{\"t\":\"全局锁主要应用于做全库逻辑备份，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。\"},\"6534\":{\"t\":\"加全局锁又会带来什么缺点呢？\"},\"6535\":{\"t\":\"加上全局锁，意味着整个数据库都是只读状态。\"},\"6536\":{\"t\":\"那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。\"},\"6537\":{\"t\":\"既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？\"},\"6538\":{\"t\":\"有的，如果数据库的引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。\"},\"6539\":{\"t\":\"因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。\"},\"6540\":{\"t\":\"备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 –single-transaction 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。\"},\"6541\":{\"t\":\"InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。\"},\"6542\":{\"t\":\"但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。\"},\"6543\":{\"h\":\"表级锁：\",\"a\":\"表级锁\"},\"6544\":{\"t\":\"MySQL 里面表级别的锁有这几种：\"},\"6545\":{\"t\":\"表锁；\"},\"6546\":{\"t\":\"元数据锁（MDL）;\"},\"6547\":{\"t\":\"意向锁；\"},\"6548\":{\"t\":\"AUTO-INC 锁；\"},\"6549\":{\"h\":\"表锁\",\"a\":\"表锁\"},\"6550\":{\"t\":\"先来说说表锁。\"},\"6551\":{\"t\":\"如果我们想对学生表（t_student）加表锁，可以使用下面的命令：\"},\"6552\":{\"t\":\"//表级别的共享锁，也就是读锁； lock tables t_student read; //表级别的独占锁，也就是写锁； lock tables t_stuent write; \"},\"6553\":{\"t\":\"需要注意的是，表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。\"},\"6554\":{\"t\":\"也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放。\"},\"6555\":{\"t\":\"要释放表锁，可以使用下面这条命令，会释放当前会话的所有表锁：\"},\"6556\":{\"t\":\"unlock tables \"},\"6557\":{\"t\":\"另外，当会话退出后，也会释放所有表锁。\"},\"6558\":{\"t\":\"不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁。\"},\"6559\":{\"h\":\"元数据锁\",\"a\":\"元数据锁\"},\"6560\":{\"t\":\"再来说说元数据锁（MDL）。\"},\"6561\":{\"t\":\"我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：\"},\"6562\":{\"t\":\"对一张表进行 CRUD 操作时，加的是 MDL 读锁；\"},\"6563\":{\"t\":\"对一张表做结构变更操作的时候，加的是 MDL 写锁；\"},\"6564\":{\"t\":\"MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。\"},\"6565\":{\"t\":\"当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。\"},\"6566\":{\"t\":\"反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。\"},\"6567\":{\"t\":\"MDL 不需要显示调用，那它是在什么时候释放的?\"},\"6568\":{\"t\":\"MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。\"},\"6569\":{\"t\":\"那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），那在对表结构做变更操作的时候，可能会发生意想不到的事情，比如下面这个顺序的场景：\"},\"6570\":{\"t\":\"首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；\"},\"6571\":{\"t\":\"然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；\"},\"6572\":{\"t\":\"接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，\"},\"6573\":{\"t\":\"那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。\"},\"6574\":{\"t\":\"为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？\"},\"6575\":{\"t\":\"这是因为申请 MDL 锁的操作会形成一个队列，队列中写锁获取优先级高于读锁，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。\"},\"6576\":{\"t\":\"所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。\"},\"6577\":{\"h\":\"意向锁\",\"a\":\"意向锁\"},\"6578\":{\"t\":\"接着，说说意向锁。\"},\"6579\":{\"t\":\"在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；\"},\"6580\":{\"t\":\"在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；\"},\"6581\":{\"t\":\"也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。\"},\"6582\":{\"t\":\"而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。\"},\"6583\":{\"t\":\"不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：\"},\"6584\":{\"t\":\"//先在表上加上意向共享锁，然后对读取的记录加共享锁 select ... lock in share mode; //先表上加上意向独占锁，然后对读取的记录加独占锁 select ... for update; \"},\"6585\":{\"t\":\"意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables ... read*）和独占表锁（*lock tables ... write*）发生冲突。\"},\"6586\":{\"t\":\"表锁和行锁是满足读读共享、读写互斥、写写互斥的。\"},\"6587\":{\"t\":\"如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。\"},\"6588\":{\"t\":\"那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。\"},\"6589\":{\"t\":\"所以，意向锁的目的是为了快速判断表里是否有记录被加锁。\"},\"6590\":{\"h\":\"AUTO-INC 锁\",\"a\":\"auto-inc-锁\"},\"6591\":{\"t\":\"表里的主键通常都会设置成自增的，这是通过对主键字段声明 AUTO_INCREMENT 属性实现的。\"},\"6592\":{\"t\":\"之后可以在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 AUTO-INC 锁实现的。\"},\"6593\":{\"t\":\"AUTO-INC 锁是特殊的表锁机制，锁不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放。\"},\"6594\":{\"t\":\"在插入数据时，会加一个表级别的 AUTO-INC 锁，然后为被 AUTO_INCREMENT 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。\"},\"6595\":{\"t\":\"那么，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 AUTO_INCREMENT 修饰的字段的值是连续递增的。\"},\"6596\":{\"t\":\"但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。\"},\"6597\":{\"t\":\"因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种轻量级的锁来实现自增。\"},\"6598\":{\"t\":\"一样也是在插入数据的时候，会为被 AUTO_INCREMENT 修饰的字段加上轻量级锁，然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁。\"},\"6599\":{\"t\":\"InnoDB 存储引擎提供了个 innodb_autoinc_lock_mode 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。\"},\"6600\":{\"t\":\"当 innodb_autoinc_lock_mode = 0，就采用 AUTO-INC 锁，语句执行结束后才释放锁；\"},\"6601\":{\"t\":\"当 innodb_autoinc_lock_mode = 2，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。\"},\"6602\":{\"t\":\"当 innodb_autoinc_lock_mode = 1： \"},\"6603\":{\"t\":\"普通 insert 语句，自增锁在申请之后就马上释放；\"},\"6604\":{\"t\":\"类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；\"},\"6605\":{\"t\":\"当 innodb_autoinc_lock_mode = 2 是性能最高的方式，但是当搭配 binlog 的日志格式是 statement 一起使用的时候，在「主从复制的场景」中会发生数据不一致的问题。\"},\"6606\":{\"t\":\"要解决这问题，binlog 日志格式要设置为 row，这样在 binlog 里面记录的是主库分配的自增值，到备库执行的时候，主库的自增值是什么，从库的自增值就是什么。\"},\"6607\":{\"t\":\"所以，当 innodb_autoinc_lock_mode = 2 时，并且 binlog_format = row，既能提升并发性，又不会出现数据一致性问题。\"},\"6608\":{\"h\":\"行级锁：\",\"a\":\"行级锁\"},\"6609\":{\"t\":\"InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。\"},\"6610\":{\"t\":\"前面也提到，普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为锁定读。\"},\"6611\":{\"t\":\"//对读取的记录加共享锁 select ... lock in share mode; //对读取的记录加独占锁 select ... for update; \"},\"6612\":{\"t\":\"上面这两条语句必须在一个事务中，因为当事务提交了，锁就会被释放，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。\"},\"6613\":{\"t\":\"共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。\"},\"6614\":{\"t\":\"img\"},\"6615\":{\"t\":\"行级锁的类型主要有三类：\"},\"6616\":{\"t\":\"Record Lock，记录锁，也就是仅仅把一条记录锁上；\"},\"6617\":{\"t\":\"Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"},\"6618\":{\"t\":\"Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"6619\":{\"h\":\"Record Lock\",\"a\":\"record-lock\"},\"6620\":{\"t\":\"Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：\"},\"6621\":{\"t\":\"当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;\"},\"6622\":{\"t\":\"当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。\"},\"6623\":{\"h\":\"Gap Lock\",\"a\":\"gap-lock\"},\"6624\":{\"t\":\"Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。\"},\"6625\":{\"t\":\"假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。\"},\"6626\":{\"t\":\"间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。\"},\"6627\":{\"h\":\"Next-Key Lock\",\"a\":\"next-key-lock\"},\"6628\":{\"t\":\"Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"},\"6629\":{\"t\":\"所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。\"},\"6630\":{\"t\":\"next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。\"},\"6631\":{\"t\":\"比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。\"},\"6632\":{\"t\":\"虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。\"},\"6633\":{\"h\":\"插入意向锁\",\"a\":\"插入意向锁\"},\"6634\":{\"t\":\"一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。\"},\"6635\":{\"t\":\"如果有的话，插入操作就会发生阻塞，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个插入意向锁，表明有事务想在某个区间插入新记录，但是现在处于等待状态。\"},\"6636\":{\"t\":\"插入意向锁名字虽然有意向锁，但是它并不是意向锁，它是一种特殊的间隙锁，属于行级别锁。\"},\"6637\":{\"t\":\"如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。\"},\"6638\":{\"t\":\"插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。\"},\"6639\":{\"h\":\"ACID事务\",\"a\":\"acid事务\"},\"6640\":{\"t\":\"事务是由 MySQL 的引擎来实现的，我们常见的 InnoDB 引擎它是支持事务的。\"},\"6641\":{\"t\":\"不过并不是所有的引擎都能支持事务，比如 MySQL 原生的 MyISAM 引擎就不支持事务，也正是这样，所以大多数 MySQL 的引擎都是用 InnoDB。\"},\"6642\":{\"t\":\"事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：\"},\"6643\":{\"t\":\"原子性（Atomicity）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。\"},\"6644\":{\"t\":\"一致性（Consistency）：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。\"},\"6645\":{\"t\":\"隔离性（Isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。\"},\"6646\":{\"t\":\"持久性（Durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\"},\"6647\":{\"t\":\"InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？\"},\"6648\":{\"t\":\"持久性是通过 redo log （重做日志）来保证的；\"},\"6649\":{\"t\":\"原子性是通过 undo log（回滚日志） 来保证的；\"},\"6650\":{\"t\":\"隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；\"},\"6651\":{\"t\":\"一致性则是通过持久性+原子性+隔离性来保证；\"},\"6652\":{\"h\":\"脏读\",\"a\":\"脏读\"},\"6653\":{\"t\":\"如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。\"},\"6654\":{\"t\":\"举个栗子。\"},\"6655\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后再执行更新操作，如果此时事务 A 还没有提交事务，而此时正好事务 B 也从数据库中读取小林的余额数据，那么事务 B 读取到的余额数据是刚才事务 A 更新后的数据，即使没有提交事务。\"},\"6656\":{\"t\":\"因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。\"},\"6657\":{\"h\":\"不可重复读\",\"a\":\"不可重复读\"},\"6658\":{\"t\":\"在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。\"},\"6659\":{\"t\":\"举个栗子。\"},\"6660\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后继续执行代码逻辑处理，在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为不可重复读。\"},\"6661\":{\"h\":\"幻读\",\"a\":\"幻读\"},\"6662\":{\"t\":\"在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。\"},\"6663\":{\"t\":\"举个栗子。\"},\"6664\":{\"t\":\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库查询账户余额大于 100 万的记录，发现共有 5 条，然后事务 B 也按相同的搜索条件也是查询出了 5 条记录。\"},\"6665\":{\"t\":\"接下来，事务 A 插入了一条余额超过 100 万的账号，并提交了事务，此时数据库超过 100 万余额的账号个数就变为 6。\"},\"6666\":{\"t\":\"然后事务 B 再次查询账户余额大于 100 万的记录，此时查询到的记录数量有 6 条，发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。\"},\"6667\":{\"h\":\"四大隔离级别\",\"a\":\"四大隔离级别\"},\"6668\":{\"t\":\"SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：\"},\"6669\":{\"t\":\"读未提交（*read uncommitted*），指一个事务还没提交时，它做的变更就能被其他事务看到；\"},\"6670\":{\"t\":\"读提交（*read committed*），指一个事务提交之后，它做的变更才能被其他事务看到；\"},\"6671\":{\"t\":\"可重复读（*repeatable read*），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别；\"},\"6672\":{\"t\":\"串行化（*serializable* ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\"},\"6673\":{\"t\":\"按隔离水平高低排序如下：\"},\"6674\":{\"t\":\"图片\"},\"6675\":{\"t\":\"针对不同的隔离级别，并发事务时可能发生的现象也会不同。也就是说：\"},\"6676\":{\"t\":\"在「读未提交」隔离级别下，可能发生脏读、不可重复读和幻读现象；\"},\"6677\":{\"t\":\"在「读提交」隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；\"},\"6678\":{\"t\":\"在「可重复读」隔离级别下，可能发生幻读现象，但是不可能脏读和不可重复读现象；\"},\"6679\":{\"t\":\"在「串行化」隔离级别下，脏读、不可重复读和幻读现象都不可能会发生。\"},\"6680\":{\"t\":\"所以，要解决脏读现象，就要升级到「读提交」以上的隔离级别；要解决不可重复读现象，就要升级到「可重复读」的隔离级别，要解决幻读现象不建议将隔离级别升级到「串行化」。\"},\"6681\":{\"t\":\"不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，我们讨论的 MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入。\"},\"6682\":{\"t\":\"MySQL 在「可重复读」隔离级别下，可以很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能。\"},\"6683\":{\"t\":\"MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象，解决的方案有两种：\"},\"6684\":{\"t\":\"针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\"},\"6685\":{\"t\":\"针对当前读（select ... for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\"},\"6686\":{\"t\":\"这四种隔离级别具体是如何实现的呢？\"},\"6687\":{\"t\":\"对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；\"},\"6688\":{\"t\":\"对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；\"},\"6689\":{\"t\":\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View。\"},\"6690\":{\"h\":\"MVCC\",\"a\":\"mvcc\"},\"6691\":{\"t\":\"MVCC 的实现依赖于：隐藏字段、Read View、undo log。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改\"},\"6692\":{\"t\":\"隐藏字段\"},\"6693\":{\"t\":\"在内部，InnoDB 存储引擎为每行数据添加了三个 隐藏字段：\"},\"6694\":{\"t\":\"DB_TRX_ID（6字节）：表示最后一次插入或更新该行的事务 id。此外，delete 操作在内部被视为更新，只不过会在记录头 Record header 中的 deleted_flag 字段将其标记为已删除\"},\"6695\":{\"t\":\"DB_ROLL_PTR（7字节） 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空\"},\"6696\":{\"t\":\"DB_ROW_ID（6字节）：如果没有设置主键且该表没有唯一非空索引时，InnoDB 会使用该 id 来生成聚簇索引\"},\"6697\":{\"t\":\"ReadView主要是用来做可见性判断，里面保存了 “当前对本事务不可见的其他活跃事务”\"},\"6698\":{\"t\":\" trx_id_t m_low_limit_id; /* 大于等于这个 ID 的事务均不可见 */ trx_id_t m_up_limit_id; /* 小于这个 ID 的事务均可见 */ trx_id_t m_creator_trx_id; /* 创建该 Read View 的事务ID */ trx_id_t m_low_limit_no; /* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */ ids_t m_ids; /* 创建 Read View 时的活跃事务列表 */ \"},\"6699\":{\"t\":\"主要有以下字段：\"},\"6700\":{\"t\":\"m_low_limit_id：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见\"},\"6701\":{\"t\":\"m_up_limit_id：活跃事务列表 m_ids 中最小的事务 ID，如果 m_ids 为空，则 m_up_limit_id 为 m_low_limit_id。小于这个 ID 的数据版本均可见\"},\"6702\":{\"t\":\"m_ids：Read View 创建时其他未提交的活跃事务 ID 列表。创建 Read View时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。m_ids 不包括当前事务自己和已提交的事务（正在内存中）\"},\"6703\":{\"t\":\"m_creator_trx_id：创建该 Read View 的事务 ID\"},\"6704\":{\"t\":\"trans_visible\"},\"6705\":{\"h\":\"undo-log\",\"a\":\"undo-log\"},\"6706\":{\"t\":\"undo log 主要有两个作用：\"},\"6707\":{\"t\":\"当事务回滚时用于将数据恢复到修改前的样子\"},\"6708\":{\"t\":\"另一个作用是 MVCC ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 undo log 读取之前的版本数据，以此实现非锁定读\"},\"6709\":{\"t\":\"在 InnoDB 存储引擎中 undo log 分为两种： insert undo log 和 update undo log：\"},\"6710\":{\"t\":\"insert undo log ：指在 insert 操作中产生的 undo log。因为 insert 操作的记录只对事务本身可见，对其他事务不可见，故该 undo log 可以在事务提交后直接删除。不需要进行 purge 操作\"},\"6711\":{\"h\":\"Jdbc防止sql注入\",\"a\":\"jdbc防止sql注入\"},\"6712\":{\"t\":\"我们只需要使用PreparedStatement解决 将敏感字符进行转义。\"},\"6713\":{\"t\":\"我们可以看到输出的SQL文是把整个参数用引号包起来，并把参数中的引号作为转义字符，从而避免了参数也作为条件的一部分。\"},\"6714\":{\"t\":\"参考：https://blog.csdn.net/weixin_52258054/article/details/124891266\"},\"6715\":{\"h\":\"常见优化手段\",\"a\":\"常见优化手段\"},\"6716\":{\"h\":\"经常一起使用的列放到一个表中\",\"a\":\"经常一起使用的列放到一个表中\"},\"6717\":{\"t\":\"避免更多的关联操作。\"},\"6718\":{\"h\":\"禁止在数据库中存储文件（比如图片）这类大的二进制数据\",\"a\":\"禁止在数据库中存储文件-比如图片-这类大的二进制数据\"},\"6719\":{\"t\":\"在数据库中存储文件会严重影响数据库性能，消耗过多存储空间。\"},\"6720\":{\"t\":\"文件（比如图片）这类大的二进制数据通常存储于文件服务器，数据库只存储文件地址信息。\"},\"6721\":{\"h\":\"优先选择符合存储需要的最小的数据类型\",\"a\":\"优先选择符合存储需要的最小的数据类型\"},\"6722\":{\"t\":\"存储字节越小，占用也就空间越小，性能也越好。\"},\"6723\":{\"h\":\"同财务相关的金额类数据必须使用 decimal 类型\",\"a\":\"同财务相关的金额类数据必须使用-decimal-类型\"},\"6724\":{\"t\":\"非精准浮点 ：float,double\"},\"6725\":{\"t\":\"精准浮点 ：decimal\"},\"6726\":{\"t\":\"decimal 类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节。并且，decimal 可用于存储比 bigint 更大的整型数据\"},\"6727\":{\"t\":\"不过， 由于 decimal 需要额外的空间和计算开销，应该尽量只在需要对数据进行精确计算时才使用 decimal 。\"},\"6728\":{\"h\":\"单表不要包含过多字段\",\"a\":\"单表不要包含过多字段\"},\"6729\":{\"t\":\"如果一个表包含过多字段的话，可以考虑将其分解成多个表，必要时增加中间表进行关联。\"},\"6730\":{\"h\":\"禁止使用全文索引\",\"a\":\"禁止使用全文索引\"},\"6731\":{\"t\":\"全文索引不适用于 OLTP 场景。\"},\"6732\":{\"h\":\"禁止给表中的每一列都建立单独的索引\",\"a\":\"禁止给表中的每一列都建立单独的索引\"},\"6733\":{\"t\":\"5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。\"},\"6734\":{\"h\":\"每个 InnoDB 表必须有个主键\",\"a\":\"每个-innodb-表必须有个主键\"},\"6735\":{\"h\":\"禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询\",\"a\":\"禁止使用-select-必须使用-select-字段列表-查询\"},\"6736\":{\"t\":\"SELECT * 消耗更多的 CPU 和 IO 以网络带宽资源\"},\"6737\":{\"t\":\"SELECT * 无法使用覆盖索引\"},\"6738\":{\"t\":\"SELECT <字段列表> 可减少表结构变更带来的影响\"},\"6739\":{\"h\":\"避免使用子查询，可以把子查询优化为 join 操作\",\"a\":\"避免使用子查询-可以把子查询优化为-join-操作\"},\"6740\":{\"t\":\"通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。\"},\"6741\":{\"t\":\"子查询性能差的原因： 子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。\"},\"6742\":{\"h\":\"Redis\"},\"6743\":{\"h\":\"Redis\",\"a\":\"redis\"},\"6744\":{\"h\":\"Redis 为什么这么快？\",\"a\":\"redis-为什么这么快\"},\"6745\":{\"t\":\"Redis 内部做了非常多的性能优化，比较重要的主要有下面 3 点：\"},\"6746\":{\"t\":\"Redis 基于内存，内存的访问速度是磁盘的上千倍；\"},\"6747\":{\"t\":\"Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；\"},\"6748\":{\"t\":\"Redis 内置了多种优化过后的数据结构实现，性能非常高。\"},\"6749\":{\"h\":\"基本数据类型\",\"a\":\"基本数据类型\"},\"6750\":{\"t\":\"5 种基础数据类型 ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\"},\"6751\":{\"t\":\"3 种特殊数据类型 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。\"},\"6752\":{\"h\":\"数据结构及适用场景\",\"a\":\"数据结构及适用场景\"},\"6753\":{\"h\":\"String（字符串）：\",\"a\":\"string-字符串\"},\"6754\":{\"h\":\"数据结构：\",\"a\":\"数据结构\"},\"6755\":{\"t\":\"String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。\"},\"6756\":{\"t\":\"SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：\"},\"6757\":{\"t\":\"SDS 不仅可以保存文本数据，还可以保存二进制数据。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。\"},\"6758\":{\"t\":\"SDS 获取字符串长度的时间复杂度是 O(1)。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 len 属性记录了字符串长度，所以复杂度为 O(1)。\"},\"6759\":{\"t\":\"Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。\"},\"6760\":{\"h\":\"应用场景：\",\"a\":\"应用场景\"},\"6761\":{\"t\":\"常规数据（比如 session、token、序列化后的对象、图片的路径）的缓存；\"},\"6762\":{\"t\":\"计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；\"},\"6763\":{\"t\":\"分布式锁(利用 SETNX key value 命令可以实现一个最简易的分布式锁)；\"},\"6764\":{\"h\":\"List（列表）：\",\"a\":\"list-列表\"},\"6765\":{\"h\":\"数据结构：\",\"a\":\"数据结构-1\"},\"6766\":{\"t\":\"List 类型的底层数据结构是由双向链表或压缩列表实现的：\"},\"6767\":{\"t\":\"如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用压缩列表作为 List 类型的底层数据结构；\"},\"6768\":{\"t\":\"如果列表的元素不满足上面的条件，Redis 会使用双向链表作为 List 类型的底层数据结构；\"},\"6769\":{\"t\":\"但是在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表。\"},\"6770\":{\"h\":\"应用场景：\",\"a\":\"应用场景-1\"},\"6771\":{\"t\":\"消息队列，List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列；\"},\"6772\":{\"h\":\"Set（集合）：\",\"a\":\"set-集合\"},\"6773\":{\"h\":\"数据结构：\",\"a\":\"数据结构-2\"},\"6774\":{\"t\":\"Set 类型的底层数据结构是由哈希表或整数集合实现的：\"},\"6775\":{\"t\":\"如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用整数集合作为 Set 类型的底层数据结构；\"},\"6776\":{\"t\":\"如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构。\"},\"6777\":{\"h\":\"应用场景：\",\"a\":\"应用场景-2\"},\"6778\":{\"t\":\"点赞、共同关注；\"},\"6779\":{\"h\":\"Hash（散列）：\",\"a\":\"hash-散列\"},\"6780\":{\"h\":\"数据结构：\",\"a\":\"数据结构-3\"},\"6781\":{\"t\":\"Hash 类型的底层数据结构是由压缩列表或哈希表实现的：\"},\"6782\":{\"t\":\"如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用压缩列表作为 Hash 类型的底层数据结构；\"},\"6783\":{\"t\":\"如果哈希类型元素不满足上面条件，Redis 会使用哈希表作为 Hash 类型的 底层数据结构。\"},\"6784\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"6785\":{\"h\":\"应用场景：\",\"a\":\"应用场景-3\"},\"6786\":{\"t\":\"Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象以及购物车；\"},\"6787\":{\"h\":\"Zset（有序集合）：\",\"a\":\"zset-有序集合\"},\"6788\":{\"h\":\"数据结构：\",\"a\":\"数据结构-4\"},\"6789\":{\"t\":\"Zset 类型的底层数据结构是由压缩列表或跳表实现的：\"},\"6790\":{\"t\":\"如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构；\"},\"6791\":{\"t\":\"如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构；\"},\"6792\":{\"t\":\"在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。\"},\"6793\":{\"h\":\"应用场景：\",\"a\":\"应用场景-4\"},\"6794\":{\"t\":\"有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。\"},\"6795\":{\"h\":\"持久化\",\"a\":\"持久化\"},\"6796\":{\"t\":\"Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:\"},\"6797\":{\"t\":\"快照（snapshotting，RDB）\"},\"6798\":{\"t\":\"只追加文件（append-only file, AOF）\"},\"6799\":{\"t\":\"RDB 和 AOF 的混合持久化(Redis 4.0 新增)\"},\"6800\":{\"h\":\"什么是 RDB 持久化？\",\"a\":\"什么是-rdb-持久化\"},\"6801\":{\"t\":\"Redis 可以通过创建快照来获得存储在内存里面的数据在 某个时间点 上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\"},\"6802\":{\"t\":\"快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\"},\"6803\":{\"t\":\"save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。 save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。 \"},\"6804\":{\"h\":\"RDB 创建快照时会阻塞主线程吗？\",\"a\":\"rdb-创建快照时会阻塞主线程吗\"},\"6805\":{\"t\":\"Redis 提供了两个命令来生成 RDB 快照文件：\"},\"6806\":{\"t\":\"save : 同步保存操作，会阻塞 Redis 主线程；\"},\"6807\":{\"t\":\"bgsave : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。\"},\"6808\":{\"h\":\"什么是 AOF 持久化？\",\"a\":\"什么是-aof-持久化\"},\"6809\":{\"t\":\"与快照持久化相比，AOF 持久化的实时性更好。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化（Redis 6.0 之后已经默认是开启了），可以通过 appendonly 参数开启：\"},\"6810\":{\"t\":\"appendonly yes \"},\"6811\":{\"t\":\"开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到 AOF 缓冲区 server.aof_buf 中，然后再写入到 AOF 文件中（此时还在系统内核缓存区为同步到磁盘），最后再根据持久化方式（ fsync策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中的。\"},\"6812\":{\"t\":\"只有同步到磁盘中才算持久化保存了，否则依然存在数据丢失的风险，比如说：系统内核缓存区的数据还未同步，磁盘机器就宕机了，那这部分数据就算丢失了。\"},\"6813\":{\"t\":\"AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\"},\"6814\":{\"h\":\"AOF 工作基本流程是怎样的？\",\"a\":\"aof-工作基本流程是怎样的\"},\"6815\":{\"t\":\"AOF 持久化功能的实现可以简单分为 5 步：\"},\"6816\":{\"t\":\"命令追加（append） ：所有的写命令会追加到 AOF 缓冲区中。\"},\"6817\":{\"t\":\"文件写入（write） ：将 AOF 缓冲区的数据写入到 AOF 文件中。这一步需要调用write函数（系统调用），write将数据写入到了系统内核缓冲区之后直接返回了（延迟写）。注意！！！此时并没有同步到磁盘。\"},\"6818\":{\"t\":\"文件同步（fsync） ：AOF 缓冲区根据对应的持久化方式（ fsync 策略）向硬盘做同步操作。这一步需要调用 fsync 函数（系统调用）， fsync 针对单个文件操作，对其进行强制硬盘同步，fsync 将阻塞直到写入磁盘完成后返回，保证了数据持久化。\"},\"6819\":{\"t\":\"文件重写（rewrite） ：随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。\"},\"6820\":{\"t\":\"重启加载（load） ：当 Redis 重启时，可以加载 AOF 文件进行数据恢复。\"},\"6821\":{\"t\":\"Linux 系统直接提供了一些函数用于对文件和设备进行访问和控制，这些函数被称为 系统调用（syscall）。\"},\"6822\":{\"t\":\"这里对上面提到的一些 Linux 系统调用再做一遍解释：\"},\"6823\":{\"t\":\"write ：写入系统内核缓冲区之后直接返回（仅仅是写到缓冲区），不会立即同步到硬盘。虽然提高了效率，但也带来了数据丢失的风险。同步硬盘操作通常依赖于系统调度机制，Linux 内核通常为 30s 同步一次，具体值取决于写出的数据量和 I/O 缓冲区的状态。\"},\"6824\":{\"t\":\"fsync ： fsync用于强制刷新系统内核缓冲区（同步到到磁盘），确保写磁盘操作结束才会返回。\"},\"6825\":{\"t\":\"AOF 工作流程图如下：\"},\"6826\":{\"t\":\"AOF 工作基本流程\"},\"6827\":{\"h\":\"删除与淘汰策略\",\"a\":\"删除与淘汰策略\"},\"6828\":{\"h\":\"过期的数据的删除策略了解么？\",\"a\":\"过期的数据的删除策略了解么\"},\"6829\":{\"t\":\"如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？\"},\"6830\":{\"t\":\"常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：\"},\"6831\":{\"t\":\"惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。\"},\"6832\":{\"t\":\"定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。\"},\"6833\":{\"t\":\"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性/懒汉式删除 。\"},\"6834\":{\"t\":\"但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。\"},\"6835\":{\"t\":\"怎么解决这个问题呢？答案就是：Redis 内存淘汰机制。\"},\"6836\":{\"h\":\"Redis 内存淘汰机制了解么？\",\"a\":\"redis-内存淘汰机制了解么\"},\"6837\":{\"t\":\"相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?\"},\"6838\":{\"t\":\"Redis 提供 6 种数据淘汰策略：\"},\"6839\":{\"t\":\"volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰。\"},\"6840\":{\"t\":\"volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰。\"},\"6841\":{\"t\":\"volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰。\"},\"6842\":{\"t\":\"allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。\"},\"6843\":{\"t\":\"allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰。\"},\"6844\":{\"t\":\"no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\"},\"6845\":{\"t\":\"4.0 版本后增加以下两种：\"},\"6846\":{\"t\":\"volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰。\"},\"6847\":{\"t\":\"allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。\"},\"6848\":{\"h\":\"主从复制\",\"a\":\"主从复制\"},\"6849\":{\"h\":\"哨兵\",\"a\":\"哨兵\"},\"6850\":{\"h\":\"缓存雪崩/击穿/穿透\",\"a\":\"缓存雪崩-击穿-穿透\"},\"6851\":{\"h\":\"什么是缓存穿透？\",\"a\":\"什么是缓存穿透\"},\"6852\":{\"t\":\"缓存穿透说简单点就是大量请求的 key 是不合理的，根本不存在于缓存中，也不存在于数据库中 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"6853\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法\"},\"6854\":{\"t\":\"最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。\"},\"6855\":{\"t\":\"1）缓存无效 key\"},\"6856\":{\"t\":\"如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： SET key value EX 10086 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。\"},\"6857\":{\"t\":\"2）布隆过滤器\"},\"6858\":{\"t\":\"布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。\"},\"6859\":{\"t\":\"具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\"},\"6860\":{\"t\":\"但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。\"},\"6861\":{\"t\":\"为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！\"},\"6862\":{\"t\":\"我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：\"},\"6863\":{\"t\":\"使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。\"},\"6864\":{\"t\":\"根据得到的哈希值，在位数组中把对应下标的值置为 1。\"},\"6865\":{\"t\":\"我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：\"},\"6866\":{\"t\":\"对给定元素再次进行相同的哈希计算；\"},\"6867\":{\"t\":\"得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。\"},\"6868\":{\"t\":\"然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）\"},\"6869\":{\"h\":\"什么是缓存击穿？\",\"a\":\"什么是缓存击穿\"},\"6870\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。\"},\"6871\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-1\"},\"6872\":{\"t\":\"设置热点数据永不过期或者过期时间比较长。\"},\"6873\":{\"t\":\"针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。\"},\"6874\":{\"t\":\"请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。\"},\"6875\":{\"h\":\"缓存穿透和缓存击穿有什么区别？\",\"a\":\"缓存穿透和缓存击穿有什么区别\"},\"6876\":{\"t\":\"缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。\"},\"6877\":{\"t\":\"缓存击穿中，请求的 key 对应的是 热点数据 ，该数据 存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期） 。\"},\"6878\":{\"h\":\"什么是缓存雪崩？\",\"a\":\"什么是缓存雪崩\"},\"6879\":{\"t\":\"我发现缓存雪崩这名字起的有点意思，哈哈。\"},\"6880\":{\"t\":\"实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。\"},\"6881\":{\"t\":\"另外，缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。\"},\"6882\":{\"h\":\"有哪些解决办法？\",\"a\":\"有哪些解决办法-2\"},\"6883\":{\"t\":\"针对 Redis 服务不可用的情况：\"},\"6884\":{\"t\":\"采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。\"},\"6885\":{\"t\":\"限流，避免同时处理大量的请求。\"},\"6886\":{\"t\":\"针对热点缓存失效的情况：\"},\"6887\":{\"t\":\"设置不同的失效时间比如随机设置缓存的失效时间。\"},\"6888\":{\"t\":\"缓存永不失效（不太推荐，实用性太差）。\"},\"6889\":{\"t\":\"设置二级缓存。\"},\"6890\":{\"h\":\"缓存雪崩和缓存击穿有什么区别？\",\"a\":\"缓存雪崩和缓存击穿有什么区别\"},\"6891\":{\"t\":\"缓存雪崩和缓存击穿比较像，但缓存雪崩导致的原因是缓存中的大量或者所有数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。\"},\"6892\":{\"h\":\"redis 6.0 多线程的实现机制：\",\"a\":\"redis-6-0-多线程的实现机制\"},\"6893\":{\"t\":\"https://blog.csdn.net/zhizhengguan/article/details/120627481\"},\"6894\":{\"h\":\"Kafka\"},\"6895\":{\"h\":\"数据保存的策略\",\"a\":\"数据保存的策略\"},\"6896\":{\"t\":\"kafka 有两种数据保存策略:\"},\"6897\":{\"t\":\"1、按照过期时间保留\"},\"6898\":{\"t\":\"2、按照存储的消息大小保留\"},\"6899\":{\"t\":\"Kafka Broker默认的消息保留策略是：要么保留一定时间，要么保留到消息达到一定大小的字节数。\"},\"6900\":{\"t\":\"当消息达到设置的条件上限时，旧消息就会过期并被删除，所以，在任何时刻，可用消息的总量都不会超过配置参数所指定的大小。\"},\"6901\":{\"t\":\"topic可以配置自己的保留策略，可以将消息保留到不再使用他们为止。\"},\"6902\":{\"t\":\"因为在一个大文件里查找和删除消息是很费时的事，也容易出错，所以，分区被划分为若干个片段。默认情况下，每个片段包含1G或者一周的数据，以较小的那个为准。在broker往leader分区写入消息时，如果达到片段上限，就关闭当前文件，并打开一个新文件。当前正在写入数据的片段叫活跃片段。当所有片段都被写满时，会清除下一个分区片段的数据，如果配置的是7个片段，每天打开一个新片段，就会删除一个最老的片段，循环使用所有片段。\"},\"6903\":{\"t\":\"kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？ 这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。\"},\"6904\":{\"h\":\"分区策略\",\"a\":\"分区策略\"},\"6905\":{\"h\":\"生产者：\",\"a\":\"生产者\"},\"6906\":{\"t\":\"为什么要分区\"},\"6907\":{\"t\":\"多Partition分布式存储，利于集群数据的均衡。\"},\"6908\":{\"t\":\"并发读写，加快读写速度。\"},\"6909\":{\"t\":\"加快数据恢复的速率：当某台机器挂了，每个Topic仅需恢复一部分的数据，多机器并发。\"},\"6910\":{\"t\":\"分区的原则\"},\"6911\":{\"t\":\"指明partition的情况下，使用指定的partition；\"},\"6912\":{\"t\":\"没有指明partition，但是有key的情况下，将key的hash值与topic的partition数进行取余得到partition值；\"},\"6913\":{\"t\":\"既没有指定partition，也没有key的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与topic可用的partition数取余得到partition值，也就是常说的round-robin算法。\"},\"6914\":{\"t\":\"public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) { List<PartitionInfo> partitions = cluster.partitionsForTopic(topic); int numPartitions = partitions.size(); if (keyBytes == null) { //key为空时，获取一个自增的计数，然后对分区做取模得到分区编号 int nextValue = nextValue(topic); List<PartitionInfo> availablePartitions = cluster.availablePartitionsForTopic(topic); if (availablePartitions.size() > 0) { int part = Utils.toPositive(nextValue) % availablePartitions.size(); return availablePartitions.get(part).partition(); } else { // no partitions are available, give a non-available partition return Utils.toPositive(nextValue) % numPartitions; } } else { // hash the keyBytes to choose a partition // key不为空时，通过key的hash对分区取模（疑问：为什么这里不像上面那样，使用availablePartitions呢？） // 根据《Kafka权威指南》Page45理解：为了保证相同的键，总是能路由到固定的分区，如果使用可用分区，那么因为分区数变化，会导致相同的key，路由到不同分区 // 所以如果要使用key来映射分区，最好在创建主题的时候就把分区规划好 return Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions; } } private int nextValue(String topic) { //为每个topic维护了一个AtomicInteger对象，每次获取时+1 AtomicInteger counter = topicCounterMap.get(topic); if (null == counter) { counter = new AtomicInteger(ThreadLocalRandom.current().nextInt()); AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter); if (currentCounter != null) { counter = currentCounter; } } return counter.getAndIncrement(); } \"},\"6915\":{\"h\":\"消费者：\",\"a\":\"消费者\"},\"6916\":{\"t\":\"分区分配策略\"},\"6917\":{\"t\":\"一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及到partition的分配问题，即确定哪个partition由哪个consumer来消费。Kafka提供了3种消费者分区分配策略：RangeAssigor、RoundRobinAssignor、StickyAssignor。\"},\"6918\":{\"t\":\"PartitionAssignor接口用于用户定义实现分区分配算法，以实现Consumer之间的分区分配。消费组的成员订阅它们感兴趣的Topic并将这种订阅关系传递给作为订阅组协调者的Broker。协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者。Kafka默认采用RangeAssignor的分配算法。\"},\"6919\":{\"t\":\"RangeAssignor\"},\"6920\":{\"t\":\"RangeAssignor对每个Topic进行独立的分区分配。对于每一个Topic，首先对分区按照分区ID进行排序，然后订阅这个Topic的消费组的消费者再进行排序，之后尽量均衡的将分区分配给消费者。这里只能是尽量均衡，因为分区数可能无法被消费者数量整除，那么有一些消费者就会多分配到一些分区。分配示意图如下：\"},\"6921\":{\"t\":\"f4108e1816b3087f38b546372e214958.png\"},\"6922\":{\"t\":\"分区分配的算法如下：\"},\"6923\":{\"t\":\"@Override public Map<String, List<TopicPartition>> assign(Map<String, Integer> partitionsPerTopic, Map<String, Subscription> subscriptions) { Map<String, List<String>> consumersPerTopic = consumersPerTopic(subscriptions); Map<String, List<TopicPartition>> assignment = new HashMap<>(); for (String memberId : subscriptions.keySet()) assignment.put(memberId, new ArrayList<TopicPartition>()); //for循环对订阅的多个topic分别进行处理 for (Map.Entry<String, List<String>> topicEntry : consumersPerTopic.entrySet()) { String topic = topicEntry.getKey(); List<String> consumersForTopic = topicEntry.getValue(); Integer numPartitionsForTopic = partitionsPerTopic.get(topic); if (numPartitionsForTopic == null) continue; //对消费者进行排序 Collections.sort(consumersForTopic); //计算平均每个消费者分配的分区数 int numPartitionsPerConsumer = numPartitionsForTopic / consumersForTopic.size(); //计算平均分配后多出的分区数 int consumersWithExtraPartition = numPartitionsForTopic % consumersForTopic.size(); List<TopicPartition> partitions = AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic); for (int i = 0, n = consumersForTopic.size(); i < n; i++) { //计算第i个消费者，分配分区的起始位置 int start = numPartitionsPerConsumer * i + Math.min(i, consumersWithExtraPartition); //计算第i个消费者，分配到的分区数量 int length = numPartitionsPerConsumer + (i + 1 > consumersWithExtraPartition ? 0 : 1); assignment.get(consumersForTopic.get(i)).addAll(partitions.subList(start, start + length)); } } return assignment; } \"},\"6924\":{\"t\":\"这种分配方式明显的一个问题是随着消费者订阅的Topic的数量的增加，不均衡的问题会越来越严重，比如上图中4个分区3个消费者的场景，C0会多分配一个分区。如果此时再订阅一个分区数为4的Topic，那么C0又会比C1、C2多分配一个分区，这样C0总共就比C1、C2多分配两个分区了，而且随着Topic的增加，这个情况会越来越严重。分配结果：\"},\"6925\":{\"t\":\"eff9adb5a086691e56b5d68bec68ffcf.png\"},\"6926\":{\"t\":\"订阅2个Topic，每个Topic4个分区，共3个Consumer\"},\"6927\":{\"t\":\"C0：[T0P0，T0P1，T1P0，T1P1]\"},\"6928\":{\"t\":\"C1：[T0P2，T1P2]\"},\"6929\":{\"t\":\"C2：[T0P3，T1P3]\"},\"6930\":{\"t\":\"RoundRobinAssignor\"},\"6931\":{\"t\":\"RoundRobinAssignor的分配策略是将消费组内订阅的所有Topic的分区及所有消费者进行排序后尽量均衡的分配（RangeAssignor是针对单个Topic的分区进行排序分配的）。如果消费组内，消费者订阅的Topic列表是相同的（每个消费者都订阅了相同的Topic），那么分配结果是尽量均衡的（消费者之间分配到的分区数的差值不会超过1）。如果订阅的Topic列表是不同的，那么分配结果是不保证“尽量均衡”的，因为某些消费者不参与一些Topic的分配。\"},\"6932\":{\"t\":\"51b27d00cf50d9aca86e0934ab42a565.png\"},\"6933\":{\"t\":\"以上两个topic的情况，相比于之前RangeAssignor的分配策略，可以使分区分配的更均衡。不过考虑这种情况，假设有三个消费者分别为C0、C1、C2，有3个Topic T0、T1、T2，分别拥有1、2、3个分区，并且C0订阅T0，C1订阅T0和T1，C2订阅T0、T1、T2，那么RoundRobinAssignor的分配结果如下：\"},\"6934\":{\"t\":\"4e161a06a0afcae8d2c06603d676de4e.png\"},\"6935\":{\"t\":\"看上去分配已经尽量的保证均衡了，不过可以发现C2承担了4个分区的消费而C1订阅了T1，是不是把T1P1交给C1消费能更加的均衡呢？\"},\"6936\":{\"t\":\"StickyAssignor\"},\"6937\":{\"t\":\"StickyAssignor分区分配算法，目的是在执行一次新的分配时，能在上一次分配的结果的基础上，尽量少的调整分区分配的变动，节省因分区分配变化带来的开销。Sticky是“粘性的”，可以理解为分配结果是带“粘性的”——每一次分配变更相对上一次分配做最少的变动。其目标有两点：\"},\"6938\":{\"t\":\"分区的分配尽量的均衡。\"},\"6939\":{\"t\":\"每一次重分配的结果尽量与上一次分配结果保持一致。\"},\"6940\":{\"t\":\"当这两个目标发生冲突时，优先保证第一个目标。第一个目标是每个分配算法都尽量尝试去完成的，而第二个目标才真正体现出StickyAssignor特性的。\"},\"6941\":{\"t\":\"StickyAssignor算法比较复杂，下面举例来说明分配的效果（对比RoundRobinAssignor），前提条件：\"},\"6942\":{\"t\":\"有4个Topic：T0、T1、T2、T3，每个Topic有2个分区。\"},\"6943\":{\"t\":\"有3个Consumer：C0、C1、C2，所有Consumer都订阅了这4个分区。\"},\"6944\":{\"t\":\"eb5597ed0b81b03c762e54ff3f909492.png\"},\"6945\":{\"t\":\"上面红色的箭头代表的是有变动的分区分配，可以看出，StickyAssignor的分配策略，变动较小。\"},\"6946\":{\"t\":\"参考：https://blog.csdn.net/easylife206/article/details/124580641?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-124580641-blog-124349832.235^v28^pc_relevant_t0_download&spm=1001.2101.3001.4242.3&utm_relevant_index=7\"},\"6947\":{\"h\":\"kafka如何保证消息不被重复消费\",\"a\":\"kafka如何保证消息不被重复消费\"},\"6948\":{\"h\":\"原因\",\"a\":\"原因\"},\"6949\":{\"t\":\"（1）kafka有个offset的概念，当每个消息被写进去后，都有一个offset，代表他的序号，然后consumer消费该数据之后，隔一段时间，会把自己消费过的消息的offset提交一下，代表我已经消费过了。下次我要是重启，就会继续从上次消费到的offset来继续消费。但是当我们直接kill进程了，再重启。这会导致consumer有些消息处理了，但是没来得及提交offset。等重启之后，少数消息就会再次消费一次 （2）在Kafka中有一个Partition Balance机制，就是把多个Partition均衡的分配给多个消费者。消费端会从分配到的Partition里面去消费消息，如果消费者在默认的5分钟内没有处理完这一批消息。就会触发Kafka的Rebalance机制，从而导致offset自动提交失败。而Rebalance之后，消费者还是会从之前没提交的offset位置开始消费，从而导致消息重复消费。\"},\"6950\":{\"h\":\"解决方案\",\"a\":\"解决方案\"},\"6951\":{\"t\":\"开启kafka本身存在的幂等性：\"},\"6952\":{\"t\":\"在这里插入图片描述\"},\"6953\":{\"t\":\"注： 添加唯一ID，类似于数据库的主键，用于唯一标记一个消息。 ProducerID：#在每个新的Producer初始化时，会被分配一个唯一的PID SequenceNumber：#对于每个PID发送数据的每个Topic都对应一个从0开始单调递增的SN值。\"},\"6954\":{\"t\":\"将获取的唯一id存表，（利用mySQl的唯一键约束，或者redis天然的set结构）\"},\"6955\":{\"t\":\"参考：https://blog.csdn.net/m0_51167384/article/details/128106266?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128106266-blog-76435385.235^v28^pc_relevant_t0_download&utm_relevant_index=8&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2Mjc4NDAvYXJ0aWNsZS9kZXRhaWxzLzc2NDM1Mzg1P3NwbT0xMDAxLjIxMDEuMzAwMS42NjUwLjEmdXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RVJhdGUtMS03NjQzNTM4NS1ibG9nLTExNzQxOTA1OC4yMzUlNUV2MjglNUVwY19yZWxldmFudF90MF9kb3dubG9hZCZkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VSYXRlLTEtNzY0MzUzODUtYmxvZy0xMTc0MTkwNTguMjM1JTVFdjI4JTVFcGNfcmVsZXZhbnRfdDBfZG93bmxvYWQmdXRtX3JlbGV2YW50X2luZGV4PTI%3D\"},\"6956\":{\"h\":\"如何保证消息的顺序性?\",\"a\":\"如何保证消息的顺序性\"},\"6957\":{\"h\":\"为什么要保证顺序？\",\"a\":\"为什么要保证顺序\"},\"6958\":{\"t\":\"消息队列中的若干消息如果是对同一个数据进行操作, 这些操作具有前后关系, 必须要按前后的顺序执行, 否则就会造成数据异常.\"},\"6959\":{\"h\":\"出现顺序错乱的场景：\",\"a\":\"出现顺序错乱的场景\"},\"6960\":{\"t\":\"第一种情况: 一个queue, 有多个consumer去消费, 这样就会造成顺序的错误, consumer从MQ里面读取数据是有序的, 但是每个consumer的执行时间是不固定的, 无法保证先读到消息的consumer一定先完成操作, 这样就会出现消息并没有按照顺序执行, 造成数据顺序错误。 \"},\"6961\":{\"t\":\"img\"},\"6962\":{\"t\":\"第二种情况: 一个queue对应一个consumer, 但是consumer里面进行了多线程消费, 这样也会造成消息消费顺序错误。 \"},\"6963\":{\"t\":\"img\"},\"6964\":{\"h\":\"如何保证消息的消费顺序？\",\"a\":\"如何保证消息的消费顺序\"},\"6965\":{\"t\":\"第一种方案: 拆分多个queue, 每一个queue一个consumer, 就是多一些queue而已, 确实是麻烦点; 这样也会造成吞吐量下降, 可以在消费者内部采用多线程的方式去消费。 \"},\"6966\":{\"t\":\"img\"},\"6967\":{\"t\":\"第二种方案: 就是一个queue对应一个consumer, 然后这个consumer内部用内存队列做排队, 然后分发给底层不同的worker来处理。 \"},\"6968\":{\"t\":\"img\"},\"6969\":{\"t\":\"参考：https://blog.csdn.net/qq_44901983/article/details/123416498\"},\"6970\":{\"h\":\"HTTP协议中为什么广泛使用的还是HTTP1.1？\"},\"6971\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"6972\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"6973\":{\"t\":\"但是为什么现在广泛使用的还是HTTP1.1？\"},\"6974\":{\"h\":\"一、关于HTTP2\",\"a\":\"一、关于http2\"},\"6975\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"6976\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"6977\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"6978\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"6979\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"6980\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"6981\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"6982\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"6983\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"6984\":{\"t\":\"同时还实现了二进制分帧、header压缩、服务端推送等技术。\"},\"6985\":{\"t\":\"具体的细节请移步：HTTP2协议\"},\"6986\":{\"h\":\"二、关于HTTP3\",\"a\":\"二、关于http3\"},\"6987\":{\"t\":\"具体的细节请移步：HTTP3协议\"},\"6988\":{\"h\":\"三、HTTP历史\",\"a\":\"三、http历史\"},\"6989\":{\"t\":\"随着网络技术的发展，1999 年设计的 HTTP/1.1 已经不能满足需求，所以 Google 在 2009 年设计了基于 TCP 的 SPDY，后来 SPDY 的开发组推动 SPDY 成为正式标准，不过最终没能通过。不过 SPDY 的开发组全程参与了 HTTP/2 的制定过程，参考了 SPDY 的很多设计，所以我们一般认为 SPDY 就是 HTTP/2 的前身。无论 SPDY 还是 HTTP/2，都是基于 TCP 的，TCP 与 UDP 相比效率上存在天然的劣势，所以 2013 年 Google 开发了基于 UDP 的名为 QUIC 的传输层协议，QUIC 全称 Quick UDP Internet Connections，希望它能替代 TCP，使得网页传输更加高效。后经提议，互联网工程任务组正式将基于 QUIC 协议的 HTTP （HTTP over QUIC）重命名为 HTTP/3。\"},\"6990\":{\"h\":\"三、原因\",\"a\":\"三、原因\"},\"6991\":{\"t\":\"小羊看来网站上大家的讨论，总结了下面的几点。\"},\"6992\":{\"t\":\"1.至少目前来看，要启用http2必须使用OpenSSL/ssl加密协议，而且在对传输速率要求不高的情况下，HTTP1.1完全可以hold住任何场景。所以还是需要等待催生http2不得不出的时机到来。\"},\"6993\":{\"t\":\"2.HTTP 1.1 用着也还行，性能不好，但也不算差。\"},\"6994\":{\"t\":\"3.HTTP 3 出来得太快了，没有给HTTP 2留下发挥时间，HTTP 2还没来得及全面推广，HTTP 3就横空出世了，既然有更好的可以用，有什么理由还升HTTP 2呢？\"},\"6995\":{\"h\":\"HTTP\"},\"6996\":{\"t\":\"最近一段时间以来，关于HTTP/3的新闻有很多，越来越多的国际大公司已经开始使用HTTP/3了。\"},\"6997\":{\"t\":\"所以，HTTP/3已经是箭在弦上了，全面使用只是个时间问题，那么，作为一线开发者，我们也是时候了解下到底什么是HTTP/3，为什么需要HTTP/3了。\"},\"6998\":{\"h\":\"HTTP/2 辉煌不在？\",\"a\":\"http-2-辉煌不在\"},\"6999\":{\"t\":\"虽然HTTP/2标准在2015年5月就以RFC 7540正式发表了，并且多数浏览器在2015年底就支持了。\"},\"7000\":{\"t\":\"但是，真正被广泛使用起来要到2018年左右，但是也是在2018年，11月IETF给出了官方批准，认可HTTP-over-QUIC成为HTTP/3。\"},\"7001\":{\"t\":\"2018年的时候，那时候HTTP/2还是个新技术，刚刚开始有软件支持，短短两年过去了，现在HTTP/3已经悄然而至了。\"},\"7002\":{\"t\":\"**根据W3Techs的数据，截至2019年6月，全球也仅有36.5%的网站支持了HTTP/2。**所以，可能很多网站还没开始支持HTTP/2，HTTP/3就已经来了。\"},\"7003\":{\"t\":\"所以，对于很多网站来说，或许直接升级HTTP/3是一个更加正确的选择。\"},\"7004\":{\"h\":\"回顾 HTTP/2\",\"a\":\"回顾-http-2\"},\"7005\":{\"t\":\"我默认大家对HTTP/2有了一定的基本了解。\"},\"7006\":{\"t\":\"我们知道，HTTP/2的诞生，主要是为了解决HTTP/1.1中的效率问题，HTTP/2中最核心的技术就是多路复用技术，即允许同时通过单一的HTTP/2.0连接发起多重的请求-响应消息。 \"},\"7007\":{\"h\":\"计算机网络\"},\"7008\":{\"h\":\"键入网址到网页显示，期间发生了什么？\",\"a\":\"键入网址到网页显示-期间发生了什么\"},\"7009\":{\"t\":\"img\"},\"7010\":{\"t\":\"上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议\"},\"7011\":{\"t\":\"总体来说分为以下几个过程:\"},\"7012\":{\"t\":\"DNS 解析\"},\"7013\":{\"t\":\"TCP 连接\"},\"7014\":{\"t\":\"发送 HTTP 请求\"},\"7015\":{\"t\":\"服务器处理请求并返回 HTTP 报文\"},\"7016\":{\"t\":\"浏览器解析渲染页面\"},\"7017\":{\"t\":\"连接结束\"},\"7018\":{\"h\":\"OSI 七层模型\",\"a\":\"osi-七层模型\"},\"7019\":{\"t\":\"OSI 七层模型\"},\"7020\":{\"h\":\"TCP/IP 四层模型\",\"a\":\"tcp-ip-四层模型\"},\"7021\":{\"t\":\"img\"},\"7022\":{\"h\":\"TCP\",\"a\":\"tcp\"},\"7023\":{\"h\":\"IP\",\"a\":\"ip\"},\"7024\":{\"h\":\"UDP\",\"a\":\"udp\"},\"7025\":{\"h\":\"ARP\",\"a\":\"arp\"},\"7026\":{\"t\":\"ARP 协议，全称 地址解析协议（Address Resolution Protocol），它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。\"},\"7027\":{\"t\":\"ARP 协议工作时有一个大前提，那就是 ARP 表。\"},\"7028\":{\"t\":\"在一个局域网内，每个网络设备都自己维护了一个 ARP 表，ARP 表记录了某些其他网络设备的 IP 地址-MAC 地址映射关系，该映射关系以 <IP, MAC, TTL> 三元组的形式存储。其中，TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。\"},\"7029\":{\"t\":\"ARP 的工作原理将分两种场景讨论：\"},\"7030\":{\"t\":\"同一局域网内的 MAC 寻址；\"},\"7031\":{\"t\":\"从一个局域网到另一个局域网中的网络设备的寻址。\"},\"7032\":{\"h\":\"同一局域网内的 MAC 寻址\",\"a\":\"同一局域网内的-mac-寻址\"},\"7033\":{\"t\":\"假设当前有如下场景：IP 地址为137.196.7.23的主机 A，想要给同一局域网内的 IP 地址为137.196.7.14主机 B，发送 IP 数据报文。\"},\"7034\":{\"t\":\"再次强调，当主机发送 IP 数据报文时（网络层），仅知道目的地的 IP 地址，并不清楚目的地的 MAC 地址，而 ARP 协议就是解决这一问题的。\"},\"7035\":{\"t\":\"为了达成这一目标，主机 A 将不得不通过 ARP 协议来获取主机 B 的 MAC 地址，并将 IP 报文封装成链路层帧，发送到下一跳上。在该局域网内，关于此将按照时间顺序，依次发生如下事件：\"},\"7036\":{\"t\":\"主机 A 检索自己的 ARP 表，发现 ARP 表中并无主机 B 的 IP 地址对应的映射条目，也就无从知道主机 B 的 MAC 地址。\"},\"7037\":{\"t\":\"主机 A 将构造一个 ARP 查询分组，并将其广播到所在的局域网中。\"},\"7038\":{\"t\":\"ARP 分组是一种特殊报文，ARP 分组有两类，一种是查询分组，另一种是响应分组，它们具有相同的格式，均包含了发送和接收的 IP 地址、发送和接收的 MAC 地址。当然了，查询分组中，发送的 IP 地址，即为主机 A 的 IP 地址，接收的 IP 地址即为主机 B 的 IP 地址，发送的 MAC 地址也是主机 A 的 MAC 地址，但接收的 MAC 地址绝不会是主机 B 的 MAC 地址（因为这正是我们要问询的！），而是一个特殊值——FF-FF-FF-FF-FF-FF，之前说过，该 MAC 地址是广播地址，也就是说，查询分组将广播给该局域网内的所有设备。\"},\"7039\":{\"t\":\"主机 A 构造的查询分组将在该局域网内广播，理论上，每一个设备都会收到该分组，并检查查询分组的接收 IP 地址是否为自己的 IP 地址，如果是，说明查询分组已经到达了主机 B，否则，该查询分组对当前设备无效，丢弃之。\"},\"7040\":{\"t\":\"主机 B 收到了查询分组之后，验证是对自己的问询，接着构造一个 ARP 响应分组，该分组的目的地只有一个——主机 A，发送给主机 A。同时，主机 B 提取查询分组中的 IP 地址和 MAC 地址信息，在自己的 ARP 表中构造一条主机 A 的 IP-MAC 映射记录。\"},\"7041\":{\"t\":\"ARP 响应分组具有和 ARP 查询分组相同的构造，不同的是，发送和接受的 IP 地址恰恰相反，发送的 MAC 地址为发送者本身，目标 MAC 地址为查询分组的发送者，也就是说，ARP 响应分组只有一个目的地，而非广播。\"},\"7042\":{\"t\":\"主机 A 终将收到主机 B 的响应分组，提取出该分组中的 IP 地址和 MAC 地址后，构造映射信息，加入到自己的 ARP 表中。\"},\"7043\":{\"t\":\"总结来说，ARP 协议是一个广播问询，单播响应协议。\"},\"7044\":{\"h\":\"不同局域网内的 MAC 寻址\",\"a\":\"不同局域网内的-mac-寻址\"},\"7045\":{\"t\":\"更复杂的情况是，发送主机 A 和接收主机 B 不在同一个子网中，假设一个一般场景，两台主机所在的子网由一台路由器联通。这里需要注意的是，一般情况下，我们说网络设备都有一个 IP 地址和一个 MAC 地址，这里说的网络设备，更严谨的说法应该是一个接口。路由器作为互联设备，具有多个接口，每个接口同样也应该具备不重复的 IP 地址和 MAC 地址。因此，在讨论 ARP 表时，路由器的多个接口都各自维护一个 ARP 表，而非一个路由器只维护一个 ARP 表。\"},\"7046\":{\"t\":\"接下来，回顾同一子网内的 MAC 寻址，如果主机 A 发送一个广播问询分组，那么 A 所在子网内的所有设备（接口）都将不会捕获该分组，因为该分组的目的 IP 地址在另一个子网中，本子网内不会有设备成功接收。那么，主机 A 应该发送怎样的查询分组呢？整个过程按照时间顺序发生的事件如下：\"},\"7047\":{\"t\":\"主机 A 查询 ARP 表，期望寻找到目标路由器的本子网接口的 MAC 地址。\"},\"7048\":{\"t\":\"目标路由器指的是，根据目的主机 B 的 IP 地址，分析出 B 所在的子网，能够把报文转发到 B 所在子网的那个路由器。\"},\"7049\":{\"t\":\"主机 A 未能找到目标路由器的本子网接口的 MAC 地址，将采用 ARP 协议，问询到该 MAC 地址，由于目标接口与主机 A 在同一个子网内，该过程与同一局域网内的 MAC 寻址相同。\"},\"7050\":{\"t\":\"主机 A 获取到目标接口的 MAC 地址，先构造 IP 数据报，其中源 IP 是 A 的 IP 地址，目的 IP 地址是 B 的 IP 地址，再构造链路层帧，其中源 MAC 地址是 A 的 MAC 地址，目的 MAC 地址是本子网内与路由器连接的接口的 MAC 地址。主机 A 将把这个链路层帧，以单播的方式，发送给目标接口。\"},\"7051\":{\"t\":\"目标接口接收到了主机 A 发过来的链路层帧，解析，根据目的 IP 地址，查询转发表，将该 IP 数据报转发到与主机 B 所在子网相连的接口上。\"},\"7052\":{\"t\":\"到此，该帧已经从主机 A 所在的子网，转移到了主机 B 所在的子网了。\"},\"7053\":{\"t\":\"路由器接口查询 ARP 表，期望寻找到主机 B 的 MAC 地址。\"},\"7054\":{\"t\":\"路由器接口如未能找到主机 B 的 MAC 地址，将采用 ARP 协议，广播问询，单播响应，获取到主机 B 的 MAC 地址。\"},\"7055\":{\"t\":\"路由器接口将对 IP 数据报重新封装成链路层帧，目标 MAC 地址为主机 B 的 MAC 地址，单播发送，直到目的地。\"},\"7056\":{\"h\":\"HTTP\",\"a\":\"http\"},\"7057\":{\"h\":\"HTTP 状态码有哪些？\",\"a\":\"http-状态码有哪些\"},\"7058\":{\"t\":\"HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。\"},\"7059\":{\"t\":\"常见 HTTP 状态码\"},\"7060\":{\"h\":\"HTTP/1.0 和 HTTP/1.1 有什么区别？\",\"a\":\"http-1-0-和-http-1-1-有什么区别\"},\"7061\":{\"t\":\"连接方式 : HTTP/1.0 为短连接，HTTP/1.1 支持长连接。\"},\"7062\":{\"t\":\"状态响应码 : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，100 (Continue)——在请求大资源前的预热请求，206 (Partial Content)——范围请求的标识码，409 (Conflict)——请求与当前资源的规定冲突，410 (Gone)——资源已被永久转移，而且没有任何已知的转发地址。\"},\"7063\":{\"t\":\"缓存机制 : 在 HTTP/1.0 中主要使用 Header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP/1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。\"},\"7064\":{\"t\":\"Host 头（Host Header）处理 :HTTP/1.1 引入了 Host 头字段，允许在同一 IP 地址上托管多个域名，从而支持虚拟主机的功能。而 HTTP/1.0 没有 Host 头字段，无法实现虚拟主机。\"},\"7065\":{\"h\":\"HTTP/1.1 和 HTTP/2.0 有什么区别？\",\"a\":\"http-1-1-和-http-2-0-有什么区别\"},\"7066\":{\"t\":\"IO 多路复用（Multiplexing） ：HTTP/2.0 在同一连接上可以同时传输多个请求和响应（可以看作是 HTTP/1.1 中长链接的升级版本）。HTTP/1.1 则使用串行方式，每个请求和响应都需要独立的连接。这使得 HTTP/2.0 在处理多个请求时更加高效，减少了网络延迟和提高了性能。\"},\"7067\":{\"t\":\"二进制帧（Binary Frames） ：HTTP/2.0 使用二进制帧进行数据传输，而 HTTP/1.1 则使用文本格式的报文。二进制帧更加紧凑和高效，减少了传输的数据量和带宽消耗。\"},\"7068\":{\"t\":\"头部压缩（Header Compression） ：HTTP/1.1 支持Body压缩，Header不支持压缩。HTTP/2.0 支持对Header压缩，减少了网络开销。\"},\"7069\":{\"t\":\"服务器推送（Server Push）：HTTP/2.0 支持服务器推送，可以在客户端请求一个资源时，将其他相关资源一并推送给客户端，从而减少了客户端的请求次数和延迟。而 HTTP/1.1 需要客户端自己发送请求来获取相关资源。\"},\"7070\":{\"h\":\"HTTP/2.0 和 HTTP/3.0 有什么区别？\",\"a\":\"http-2-0-和-http-3-0-有什么区别\"},\"7071\":{\"t\":\"传输协议 ：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP/3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\"},\"7072\":{\"t\":\"连接建立 ：HTTP/2.0 需要经过经典的 TCP 三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP/3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。\"},\"7073\":{\"t\":\"队头阻塞 ：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。\"},\"7074\":{\"h\":\"HTTPS\",\"a\":\"https\"},\"7075\":{\"h\":\"HTTP 和 HTTPS 有什么区别？\",\"a\":\"http-和-https-有什么区别\"},\"7076\":{\"t\":\"端口号 ：HTTP 默认是 80，HTTPS 默认是 443。\"},\"7077\":{\"t\":\"URL 前缀 ：HTTP 的 URL 前缀是 http://，HTTPS 的 URL 前缀是 https://。\"},\"7078\":{\"t\":\"安全性和资源消耗 ： HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。\"},\"7079\":{\"t\":\"SEO（搜索引擎优化） ：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。\"},\"7080\":{\"h\":\"DNS\",\"a\":\"dns\"},\"7081\":{\"t\":\"DNS 中的域名都是用句点来分隔的，比如 www.server.com，这里的句点代表了不同层次之间的界限。\"},\"7082\":{\"t\":\"在域名中，越靠右的位置表示其层级越高。\"},\"7083\":{\"t\":\"实际上域名最后还有一个点，比如 www.server.com.，这个最后的一个点代表根域名。\"},\"7084\":{\"t\":\"也就是，. 根域是在最顶层，它的下一层就是 .com 顶级域，再下面是 server.com。\"},\"7085\":{\"t\":\"所以域名的层级关系类似一个树状结构：\"},\"7086\":{\"t\":\"根 DNS 服务器（.）\"},\"7087\":{\"t\":\"顶级域 DNS 服务器（.com）\"},\"7088\":{\"t\":\"权威 DNS 服务器（server.com）\"},\"7089\":{\"t\":\"根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。\"},\"7090\":{\"t\":\"这样一来，任何 DNS 服务器就都可以找到并访问根域 DNS 服务器了。\"},\"7091\":{\"t\":\"因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。\"},\"7092\":{\"h\":\"域名解析的工作流程：\",\"a\":\"域名解析的工作流程\"},\"7093\":{\"t\":\"客户端首先会发出一个 DNS 请求，问 www.server.com 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。\"},\"7094\":{\"t\":\"本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 www.server.com，则它直接返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 www.server.com 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。\"},\"7095\":{\"t\":\"根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“www.server.com 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”\"},\"7096\":{\"t\":\"本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 www.server.com 的 IP 地址吗？”\"},\"7097\":{\"t\":\"顶级域名服务器说：“我给你负责 www.server.com 区域的权威 DNS 服务器的地址，你去问它应该能问到”。\"},\"7098\":{\"t\":\"本地 DNS 于是转向问权威 DNS 服务器：“老三，www.server.com对应的IP是啥呀？” server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。\"},\"7099\":{\"t\":\"权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。\"},\"7100\":{\"t\":\"本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。\"},\"7101\":{\"h\":\"面试\"},\"7102\":{\"h\":\"面试：\",\"a\":\"面试\"},\"7103\":{\"h\":\"一、中科全安\",\"a\":\"一、中科全安\"},\"7104\":{\"h\":\"一面：HR面，态度算好的（5分钟）\",\"a\":\"一面-hr面-态度算好的-5分钟\"},\"7105\":{\"t\":\"1.介绍公司\"},\"7106\":{\"t\":\"2.问啥时候能来实习\"},\"7107\":{\"t\":\"3.问你能接受加班吗\"},\"7108\":{\"t\":\"4.问你的期望薪资多少\"},\"7109\":{\"t\":\"5.问我想听听你对加班什么看法\"},\"7110\":{\"t\":\"6.最后让明天面试，我说不行，能最晚啥时候，她说最晚周五下午，电话面试\"},\"7111\":{\"h\":\"二面：面试官狗叫（15分钟 ）\",\"a\":\"二面-面试官狗叫-15分钟\"},\"7112\":{\"t\":\"面试官的态度极其恶心，什么垃圾玩意，老子是来面试的，不是听狗叫的，就算老子啥都不会也不去你这个垃圾公司。\"},\"7113\":{\"t\":\"1.自我介绍，直接打断说只介绍自己会的，项目中的技术栈\"},\"7114\":{\"t\":\"2.问我熟悉哪些框架，我说Spring、Mysql，其他都是了解，熟悉的是Java基础和Mysql，他就非得问SpringBoot，离谱\"},\"7115\":{\"t\":\"3.问Kafka的分区、主题了解吗，我就是了解，然后他也说了你只是了解\"},\"7116\":{\"t\":\"4.问ES了解吗（我只是了解他是干啥的，其它都是API）\"},\"7117\":{\"t\":\"5.问SpringBoot异常怎么处理（这个紧张忘了，只是说在一个包里要继承一个异常的接口）\"},\"7118\":{\"t\":\"6.问SpringBoot的核心配置文件以及它们的区别\"},\"7119\":{\"t\":\"7.问SpringBoot的起步依赖starter有哪些以及作用（他说你了解的很少，我都说了了解Mysql、Spring，你他妈的非得问）\"},\"7120\":{\"t\":\"8.问SpringBoot 中的监视器是什么（我说不了解）\"},\"7121\":{\"t\":\"9.问Swagger用过么、它用来做什么\"},\"7122\":{\"t\":\"10.问什么是 WebSockets（我说只了解它是用来作为即时通讯的协议）\"},\"7123\":{\"t\":\"11.问什么是 FreeMarker 模板（这个离谱，说完他是干啥的以及插值表达式，他问还有呢？他妈的）\"},\"7124\":{\"t\":\"12.问C/S 、B/S模式\"},\"7125\":{\"t\":\"13.问String、StringBuilder、StringBuffer 的区别\"},\"7126\":{\"t\":\"14.问了MySQL的存储引擎\"},\"7127\":{\"t\":\"15.问了 InnoDB 和 MyISAM 的比较\"},\"7128\":{\"t\":\"16.问了建立索引的原则\"},\"7129\":{\"t\":\"17.问了三大范式\"},\"7130\":{\"t\":\"18.问了Jdbc的防止sql注入（我说不了解）\"},\"7131\":{\"t\":\"19.反问（我说实习生的日常工作安排是什么，他妈的开始狗叫，想打他）\"},\"7132\":{\"t\":\"20.最后问我啥时能来实习（老子不去）\"},\"7133\":{\"h\":\"二、联想\",\"a\":\"二、联想\"},\"7134\":{\"h\":\"一面：（16分钟）\",\"a\":\"一面-16分钟\"},\"7135\":{\"t\":\"1.说一下红黑树（吧啦吧啦，讲了下红黑树的特性、又扯到HashMap底层用到了红黑树、突然说到MySQLB+树用到了红黑树）\"},\"7136\":{\"t\":\"2.讲一下线程池（这个熟，线程池的7大参数以及具体用法）\"},\"7137\":{\"t\":\"3.讲一下为什么用线程池（两点原因）\"},\"7138\":{\"t\":\"4.讲一下线程池参数MaxSize满了你会怎么做（我说实现自定义处理策略，可以选择移除等待队列中的最不常用的线程）\"},\"7139\":{\"t\":\"5.看我熟悉Python（这里没听清发音，重复确认了好几遍哈哈哈哈哈哈哈），问我生成器用过没（我说是生成随机数吗，面试官说不是，是，还耐心给我解答了是用来循环遍历的）\"},\"7140\":{\"t\":\"5.项目拷打环节\"},\"7141\":{\"t\":\"1）讲一下你的项目经验（从项目的整体架构到具体功能实现细节都说了）\"},\"7142\":{\"t\":\"2）我说了做的一些优化（存储到阿里云OSS）\"},\"7143\":{\"t\":\"3）突然电话断了，在那我俩喂喂喂了好几声，面试官又给我打了过来，问我同步和异步怎么实现的（加@Async注解）\"},\"7144\":{\"t\":\"4）问异步调用后，做了些什么（第三方接口审核完后传来一个statusCode200，表示审核成功存储到数据库）\"},\"7145\":{\"t\":\"6.反问环节\"},\"7146\":{\"t\":\"1）实习生的日常工作安排（面试官说了早上9：30上班，下午6：30下班，八小时工作制，中午休息一小时）\"},\"7147\":{\"t\":\"2）技术栈是什么（面试官说这有Java和Python，你来就是Java）\"},\"7148\":{\"h\":\"三、中国邮政储蓄银行\",\"a\":\"三、中国邮政储蓄银行\"},\"7149\":{\"h\":\"一面：结构化面试+技术面（20分钟，五个面试官）\",\"a\":\"一面-结构化面试-技术面-20分钟-五个面试官\"},\"7150\":{\"t\":\"1.先做一个两分钟以内的自我介绍（对邮储的看法，对未来工作的看法）\"},\"7151\":{\"t\":\"2.对工作地点的看法\"},\"7152\":{\"t\":\"3.有没有参加过团体活动\"},\"7153\":{\"t\":\"4.数学建模比赛中遇到的最大困难\"},\"7154\":{\"t\":\"5.开始技术面试了，面试官说看你简历都是Java相关，讲一下Spring Cloud你用过的组件\"},\"7155\":{\"t\":\"6.ConcurrentHashMap为什么用红黑树\"},\"7156\":{\"t\":\"7.看你项目中用到了网关，是怎么实现的\"},\"7157\":{\"t\":\"8.都说CAS要比synchronized好，但是CAS也有自己的问题，你能说一下有哪些问题吗\"},\"7158\":{\"t\":\"9.另一个面试官问看你简历有高并发系统的东西，你有实际的项目经验吗（这个我说就是了解，实际项目是自学的，实际项目经验都是人工智能相关的）\"},\"7159\":{\"t\":\"10.最后女的HR问看你成绩这么好，没有保研吗\"},\"7160\":{\"t\":\"11.讲一下研究生的论文成果\"},\"7161\":{\"t\":\"12.研究生的专业成绩排名，有获得过奖学金吗\"},\"7162\":{\"t\":\"13.最后问有offer吗，方便说一下是哪个公司吗\"},\"7163\":{\"t\":\"另：\"},\"7164\":{\"t\":\"1.对工作地点的看法\"},\"7165\":{\"t\":\"2.CPU达到100%的时候你如何排查问题\"},\"7166\":{\"t\":\"3.新生代和老年代数据是如何流动的\"},\"7167\":{\"t\":\"4.Linux如何给文件权限\"},\"7168\":{\"t\":\"5.想从实习中收获什么\"},\"7169\":{\"t\":\"6.看你是院研副部长，如果负责的活动和实验室科研冲突了怎么平衡\"},\"7170\":{\"t\":\"7.你平常也这样扎头发吗\"},\"7171\":{\"h\":\"来看头条\"},\"7172\":{\"h\":\"十二：项目\",\"a\":\"十二-项目\"},\"7173\":{\"t\":\"开发技术：Spring Cloud + Spring Boot + MybatisPlus + Redis + mysql + Mongodb + Zookeeper + kafka + ElasticSearch + Docker + 第三方技术阿里云OSS;\"},\"7174\":{\"t\":\"项目背景：”来看头条“ 项目类似于今日头条，是一个新闻资讯类项目。该项目由用户端和自媒体端组成。在用户端，实现了用户通过app端登录功能、浏览文章功能、搜索文章功能、用户历史记录功能。在自媒体端，实现了自媒体管理员登录功能、发布文章功能、删除文章功能、上传素材功能、文章内容审核功能\"},\"7175\":{\"t\":\"**项目重难点：**网关搭建；文章详情静态化及存储；文章自动审核及延迟发布；分布式锁解决集群下的方法抢占执行；热点文章实时计算\"},\"7176\":{\"t\":\"技术栈的具体应用：\"},\"7177\":{\"t\":\"Spring-Cloud-Gateway : 微服务之前架设的网关服务，实现服务注册中的API请求路由，以及控制流速控制和熔断处理都是常用的架构手段，而这些功能Gateway天然支持\"},\"7178\":{\"t\":\"运用Spring Boot快速开发框架，构建项目工程；并结合Spring Cloud全家桶技术，实现app后端、自媒体等微服务。\"},\"7179\":{\"t\":\"运用Spring Cloud Alibaba Nacos作为项目中的注册中心和配置中心\"},\"7180\":{\"t\":\"运用mybatis-plus作为持久层提升开发效率\"},\"7181\":{\"t\":\"采用kafka作为消息服务中间件，把自媒体文章上下架放进消息队列；通过用户的行为（点赞、评论、喜欢）实时记录用户数据，通过kafkaStream流式计算最新的数据；与客户端系统消息通知\"},\"7182\":{\"t\":\"运用Redis缓存技术，实现热数据的计算，提升系统性能指标，同时作为消息中间件异步消费任务。\"},\"7183\":{\"t\":\"使用Mysql存储用户数据，以保证上层数据查询的高性能\"},\"7184\":{\"t\":\"使用Mongo存储用户历史记录数据，以保证用户热数据高扩展和高性能指标\"},\"7185\":{\"t\":\"运用AI技术，来完成系统自动化功能，以提升效率及节省成本。比如文章审核\"},\"7186\":{\"h\":\"优化：\",\"a\":\"优化\"},\"7187\":{\"h\":\"（1）优化一\",\"a\":\"_1-优化一\"},\"7188\":{\"t\":\"缺陷 ：写操作（定时刷新）比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。\"},\"7189\":{\"t\":\"解决办法：\"},\"7190\":{\"t\":\"数据库和缓存数据强一致场景 ：更新 db 的时候同样更新 cache，不过我们需要加一个分布式锁来保证更新 cache 的时候不存在线程安全问题。\"},\"7191\":{\"h\":\"（2）优化二\",\"a\":\"_2-优化二\"},\"7192\":{\"t\":\"缺陷：消费者丢失消息的情况\"},\"7193\":{\"t\":\"我们知道消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。偏移量（offset)表示 Consumer 当前消费到的 Partition(分区)的所在的位置。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。\"},\"7194\":{\"t\":\"当消费者拉取到了分区的某个消息之后，消费者会自动提交了 offset。自动提交的话会有一个问题，试想一下，当消费者刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。\"},\"7195\":{\"t\":\"解决办法:\"},\"7196\":{\"t\":\"我们手动关闭自动提交 offset，每次在真正消费完消息之后再自己手动提交 offset 。 细心的朋友一定会发现，这样会带来消息被重新消费的问题。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。\"},\"7197\":{\"h\":\"（3）优化三\",\"a\":\"_3-优化三\"},\"7198\":{\"t\":\"存储技术选型优化：\"},\"7199\":{\"t\":\"MinIO：\"},\"7200\":{\"t\":\"AliyunOSS：\"},\"7201\":{\"h\":\"（4）优化四\",\"a\":\"_4-优化四\"},\"7202\":{\"t\":\"缺陷：对于变量存在多线程并发竞争\"},\"7203\":{\"t\":\"解决办法：\"},\"7204\":{\"t\":\"为变量设置ThreadLocal。\"},\"7205\":{\"h\":\"身份验证怎么做的？\",\"a\":\"身份验证怎么做的\"},\"7206\":{\"t\":\"AuthorizedFilter + AppJwtUtil \"},\"7207\":{\"t\":\"用户向服务器发送用户名、密码以及验证码用于登陆系统。用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录。\"},\"7208\":{\"t\":\"如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT。\"},\"7209\":{\"t\":\"用户以后每次向后端发请求都在 Header 中带上这个 JWT ，再次进入网关开始访问，网关过滤器接收用户携带的TOKEN。\"},\"7210\":{\"t\":\"服务端检查 JWT 并从中获取用户相关信息。网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误。\"},\"7211\":{\"t\":\"两点建议：\"},\"7212\":{\"t\":\"建议将 JWT 存放在 localStorage 中，放在 Cookie 中会有 CSRF 风险。\"},\"7213\":{\"t\":\"请求服务端并携带 JWT 的常见做法是将其放在 HTTP Header 的 Authorization 字段中（Authorization: Bearer Token）。\"},\"7214\":{\"t\":\"乐观锁：\"},\"7215\":{\"t\":\"使用版本号。\"},\"7216\":{\"h\":\"网关搭建 ：\",\"a\":\"网关搭建\"},\"7217\":{\"t\":\"思路分析：\"},\"7218\":{\"t\":\"用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录\"},\"7219\":{\"t\":\"用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户\"},\"7220\":{\"t\":\"用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN\"},\"7221\":{\"t\":\"网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误\"},\"7222\":{\"t\":\"具体实现：\"},\"7223\":{\"t\":\"第一：\"},\"7224\":{\"t\":\"​ 在认证过滤器中需要用到jwt的解析，所以需要把工具类拷贝一份到网关微服务\"},\"7225\":{\"t\":\"第二：\"},\"7226\":{\"t\":\"​ 在网关微服务中新建全局过滤器\"},\"7227\":{\"h\":\"文章详情静态化及存储：\",\"a\":\"文章详情静态化及存储\"},\"7228\":{\"t\":\"文章详情静态化：\"},\"7229\":{\"t\":\"​ FreeMarker 是一款模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。\"},\"7230\":{\"t\":\"​ 模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。\"},\"7231\":{\"t\":\"存储：AliyunOSS\"},\"7232\":{\"t\":\"对象存储可提供更好的数据保护，加密、保护敏感数据。\"},\"7233\":{\"h\":\"文章自动审核及延迟发布：\",\"a\":\"文章自动审核及延迟发布\"},\"7234\":{\"t\":\"文章自动审核：\"},\"7235\":{\"t\":\"1 自媒体端发布文章后，开始审核文章（异步线程的方式审核文章，在自动审核的方法上加上@Async注解（标明要异步调用），在自媒体引导类中使用@EnableAsync注解开启异步调用）\"},\"7236\":{\"t\":\"2 审核的主要是审核文章的内容（文本内容和图片）\"},\"7237\":{\"t\":\"3 借助第三方提供的接口审核文本\"},\"7238\":{\"t\":\"4 借助第三方提供的接口审核图片，由于图片存储到OSS中，需要先下载才能审核\"},\"7239\":{\"t\":\"5 如果审核失败，则需要修改自媒体文章的状态，status:2 审核失败 status:3 转到人工审核\"},\"7240\":{\"t\":\"6 如果审核成功，则需要在文章微服务中创建app端需要的文章：\"},\"7241\":{\"t\":\"​ 在文章审核成功以后需要在app的article库中新增文章数据：\"},\"7242\":{\"t\":\"​ 保存文章信息 ap_article\"},\"7243\":{\"t\":\"​ 保存文章配置信息 ap_article_config\"},\"7244\":{\"t\":\"​ 保存文章内容 ap_article_content\"},\"7245\":{\"t\":\"延迟发布：\"},\"7246\":{\"t\":\"redis实现：zset数据类型的去重有序（分数排序）特点进行延迟。例如：时间戳作为score进行排序\"},\"7247\":{\"t\":\"实现思路：\"},\"7248\":{\"t\":\"问题思路：\"},\"7249\":{\"t\":\"1.为什么任务需要存储在数据库中？\"},\"7250\":{\"t\":\"延迟任务是一个通用的服务，任何需要延迟得任务都可以调用该服务，需要考虑数据持久化的问题，存储数据库中是一种数据安全的考虑。\"},\"7251\":{\"t\":\"2.为什么redis中使用两种数据类型，list和zset？\"},\"7252\":{\"t\":\"效率问题，算法的时间复杂度\"},\"7253\":{\"t\":\"3.在添加zset数据的时候，为什么不需要预加载？\"},\"7254\":{\"t\":\"任务模块是一个通用的模块，项目中任何需要延迟队列的地方，都可以调用这个接口，要考虑到数据量的问题，如果数据量特别大，为了防止阻塞，只需要把未来几分钟要执行的数据存入缓存即可。\"},\"7255\":{\"t\":\"实现：\"},\"7256\":{\"t\":\"延迟队列服务提供对外接口：提供远程的feign接口\"},\"7257\":{\"t\":\"发布文章集成添加延迟队列接口\"},\"7258\":{\"t\":\"修改发布文章代码：把之前的异步调用修改为调用延迟任务\"},\"7259\":{\"t\":\"消费任务进行审核文章\"},\"7260\":{\"t\":\"4.为什么选用redis作为消息队列？\"},\"7261\":{\"t\":\"把 Redis 当作队列来使用时，会面临的 2 个问题：\"},\"7262\":{\"t\":\"Redis 本身可能会丢数据；\"},\"7263\":{\"t\":\"面对消息挤压，内存资源会紧张；\"},\"7264\":{\"t\":\"所以，能不能将 Redis 作为消息队列来使用，关键看你的业务场景：\"},\"7265\":{\"t\":\"如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。\"},\"7266\":{\"t\":\"如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。\"},\"7267\":{\"h\":\"分布式锁解决集群下的方法抢占执行：\",\"a\":\"分布式锁解决集群下的方法抢占执行\"},\"7268\":{\"t\":\"问题描述：\"},\"7269\":{\"t\":\"启动两台heima-leadnews-schedule服务，每台服务都会去执行refresh定时任务方法\"},\"7270\":{\"t\":\"分布式锁：\"},\"7271\":{\"t\":\"控制分布式系统有序的去对共享资源进行操作，通过互斥来保证数据的一致性。\"},\"7272\":{\"t\":\"解决方案：\"},\"7273\":{\"t\":\"sexnx （SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。\"},\"7274\":{\"t\":\"这种加锁的思路是，如果 key 不存在则为 key 设置 value，如果 key 已存在则 SETNX 命令不做任何操作\"},\"7275\":{\"t\":\"客户端A请求服务器设置key的值，如果设置成功就表示加锁成功\"},\"7276\":{\"t\":\"客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败\"},\"7277\":{\"t\":\"客户端A执行代码完成，删除锁\"},\"7278\":{\"t\":\"客户端B在等待一段时间后再去请求设置key的值，设置成功\"},\"7279\":{\"t\":\"客户端B执行代码完成，删除锁\"},\"7280\":{\"h\":\"热点文章实时计算：\",\"a\":\"热点文章实时计算\"},\"7281\":{\"t\":\"思路说明：\"},\"7282\":{\"t\":\"待优化：\"},\"7283\":{\"t\":\"使用FastDFS作为静态资源存储器，在其上实现热静态资源缓存、淘汰等功能（待优化）\"},\"7284\":{\"t\":\"运用Hbase技术，存储系统中的冷数据，保证系统数据的可靠性（待优化）\"},\"7285\":{\"t\":\"运用ES搜索技术，对冷数据、文章数据建立索引，以保证冷数据、文章查询性能（待优化）\"},\"7286\":{\"t\":\"当用户 Logout 的话，JWT 也还有效。除非，我们在后端增加额外的处理逻辑比如将失效的 JWT 存储起来，后端先验证 JWT 是否有效再进行处理。\"},\"7287\":{\"h\":\"自我介绍：\",\"a\":\"自我介绍\"},\"7288\":{\"t\":\"面试官，您好，首先很感谢您给我的面试机会！我叫杨路恒，今年24岁，山东济宁人，就读于陕西师范大学，今年研二，软件工程专业，研究方向为知识图谱。大学时间我主要利用课外时间学习了 Java 以及 一些框架 。在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛，并且在数学建模比赛中担任队长并获得了陕西省一等奖。说到业余爱好的话，一个是比较喜欢通过博客整理分享自己所学知识，现在在CSDN上的粉丝数达到了3k+，访问量达到了44W+。 另一个是喜欢旅游和骑行的方式来放松。这就是我的自我介绍，感谢。\"},\"7289\":{\"h\":\"J V M\"},\"7290\":{\"h\":\"Java S E\"},\"7291\":{\"h\":\"Java Framework\"},\"7292\":{\"h\":\"Kafka\"},\"7293\":{\"h\":\"O S\"},\"7294\":{\"h\":\"Chang Jing\"},\"7295\":{\"h\":\"Cs Network\"},\"7296\":{\"h\":\"Database\"},\"7297\":{\"h\":\"Dev Tools\"},\"7298\":{\"h\":\"Duo Xian Cheng\"},\"7299\":{\"h\":\"Interview\"},\"7300\":{\"h\":\"Microservice Distribution\"},\"7301\":{\"h\":\"Project\"},\"7302\":{\"h\":\"J V M\"},\"7303\":{\"h\":\"Java基础\"},\"7304\":{\"h\":\"Java框架\"},\"7305\":{\"h\":\"Linux\"},\"7306\":{\"h\":\"场景问题\"},\"7307\":{\"h\":\"多线程和高并发\"},\"7308\":{\"h\":\"微服务 Spring Cloud、分布式\"},\"7309\":{\"h\":\"操作系统\"},\"7310\":{\"h\":\"数据库\"},\"7311\":{\"h\":\"消息中间件 Kafka\"},\"7312\":{\"h\":\"计算机网络\"},\"7313\":{\"h\":\"面试\"},\"7314\":{\"h\":\"项目\"}},\"dirtCount\":0,\"index\":[[\"身份验证怎么做的\",{\"0\":{\"7205\":1}}],[\"细心的朋友一定会发现\",{\"1\":{\"7196\":1}}],[\"十二\",{\"0\":{\"7172\":1}}],[\"零往返时间\",{\"1\":{\"7072\":1}}],[\"零拷贝技术可以把文件传输的性能提高至少一倍以上\",{\"1\":{\"1808\":1,\"6315\":1}}],[\"零拷贝技术的文件传输方式相比传统文件传输的方式\",{\"1\":{\"1807\":1,\"6314\":1}}],[\"零拷贝技术实现的方式通常有\",{\"1\":{\"1782\":1,\"6285\":1}}],[\"零拷贝\",{\"0\":{\"1781\":1,\"6284\":1},\"1\":{\"1810\":1,\"6317\":1}}],[\"范围请求的标识码\",{\"1\":{\"7062\":1}}],[\"范围是namespace级别的\",{\"1\":{\"1149\":1,\"5729\":1}}],[\"光是错误响应状态码就新增了\",{\"1\":{\"7062\":1}}],[\"物理上的下一个目的地\",{\"1\":{\"7026\":1}}],[\"物理分页是真正的数据库分页\",{\"1\":{\"1106\":1}}],[\"物理分页和逻辑分页\",{\"1\":{\"1105\":1}}],[\"希望它能替代\",{\"1\":{\"6989\":1}}],[\"希望断开连接\",{\"1\":{\"2450\":1}}],[\"截至2019年6月\",{\"1\":{\"6979\":1,\"7002\":1}}],[\"刚刚开始有软件支持\",{\"1\":{\"6978\":1,\"7001\":1}}],[\"刚才得到的数据就是过期的数据\",{\"1\":{\"2984\":1,\"6656\":1}}],[\"真正被广泛使用起来要到2018年左右\",{\"1\":{\"6977\":1,\"7000\":1}}],[\"真正的栈\",{\"1\":{\"619\":1}}],[\"真正的继承关系中\",{\"1\":{\"592\":1}}],[\"真正的继承关系是很少的\",{\"1\":{\"592\":1}}],[\"辉煌不在\",{\"0\":{\"6975\":1,\"6998\":1}}],[\"越靠右的位置表示其层级越高\",{\"1\":{\"7082\":1}}],[\"越来越多的国际大公司已经开始使用http\",{\"1\":{\"6971\":1,\"6996\":1}}],[\"越详细越好\",{\"1\":{\"4390\":1}}],[\"言归正传\",{\"1\":{\"6400\":1}}],[\"演进\",{\"1\":{\"6392\":1}}],[\"演示\",{\"1\":{\"31\":1,\"5144\":1}}],[\"聊完单\",{\"1\":{\"6376\":1}}],[\"闻其名不如看其图\",{\"1\":{\"6364\":1,\"6382\":1}}],[\"错误类型为\",{\"1\":{\"6279\":1}}],[\"搭配使用\",{\"1\":{\"6279\":1}}],[\"搭个框架出来\",{\"1\":{\"4120\":1}}],[\"聪明的同学肯定会质疑\",{\"1\":{\"6203\":1}}],[\"忘了请看上面的消息广播模式\",{\"1\":{\"6200\":1}}],[\"跳过那些已经被丢弃的提案\",{\"1\":{\"6198\":1}}],[\"跳转\",{\"1\":{\"199\":1}}],[\"悲观锁\",{\"0\":{\"5931\":1}}],[\"悲观锁大多数情况下依靠数据库的锁机制实现\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"级别的异常\",{\"1\":{\"5648\":1}}],[\"级别的高吞吐量\",{\"1\":{\"1431\":1,\"4759\":1}}],[\"谈谈你对\",{\"0\":{\"5569\":1}}],[\"⼯⼚⽅法模式了解吗\",{\"0\":{\"5495\":1}}],[\"⼯⼚⽅法模式将⽣成具体产品的任务分发给具体的产品⼯⼚\",{\"1\":{\"866\":1,\"5496\":1}}],[\"浅拷贝对于引用数据类型就是进行的是地址传递\",{\"1\":{\"5109\":1}}],[\"浅拷贝对于基本数据类型就是直接进行值传递\",{\"1\":{\"5108\":1}}],[\"浅拷贝\",{\"1\":{\"5107\":1}}],[\"秘钥是自己保存的\",{\"1\":{\"5101\":1}}],[\"俺也要吐槽一下\",{\"1\":{\"5097\":1}}],[\"近期出现了很多加密算法\",{\"1\":{\"5089\":1}}],[\"账号\",{\"1\":{\"5074\":1,\"5080\":1}}],[\"账号信息容易泄漏\",{\"1\":{\"2285\":1}}],[\"彩虹表\",{\"1\":{\"5053\":1}}],[\"山东大学的王小云教授在美国加州举办的密码学会议上宣布破解了md5\",{\"1\":{\"5036\":1}}],[\"山东济宁人\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"抗修改性\",{\"1\":{\"5033\":1}}],[\"渣渣烟\",{\"1\":{\"5011\":1,\"5013\":2,\"5014\":1}}],[\"省略\",{\"1\":{\"5011\":1}}],[\"省去重复认证的步骤\",{\"1\":{\"4065\":1}}],[\"淘汰等功能\",{\"1\":{\"5001\":1,\"7283\":1}}],[\"淘汰计数器值最小的那个页面\",{\"1\":{\"1745\":1}}],[\"热文章分值计算调度任务结束\",{\"1\":{\"4997\":1}}],[\"热文章分值计算调度任务开始执行\",{\"1\":{\"4997\":1}}],[\"热点文章实时计算\",{\"0\":{\"7280\":1},\"1\":{\"4656\":1,\"7175\":1}}],[\"热点数据不设置过期时间\",{\"1\":{\"4150\":1}}],[\"热点数据\",{\"1\":{\"3265\":1,\"3272\":1,\"6870\":1,\"6877\":1}}],[\"逻辑删除\",{\"1\":{\"4952\":1}}],[\"逻辑删除等\",{\"1\":{\"4939\":1}}],[\"逻辑非常清晰\",{\"1\":{\"443\":1,\"5336\":1}}],[\"③\",{\"1\":{\"4924\":1}}],[\"②\",{\"1\":{\"4922\":1}}],[\"扫描降级代码类的包\",{\"1\":{\"4920\":1}}],[\"扫描算法\",{\"1\":{\"1750\":1}}],[\"①\",{\"1\":{\"4918\":1}}],[\"频道id\",{\"1\":{\"4999\":2}}],[\"频道列表远程接口准备\",{\"1\":{\"4989\":1}}],[\"频道\",{\"1\":{\"4857\":1}}],[\"频繁的young\",{\"1\":{\"3534\":1}}],[\"频繁需要排序的字段\",{\"1\":{\"2827\":1,\"6499\":1}}],[\"借助第三方提供的接口审核图片\",{\"1\":{\"4849\":1,\"7238\":1}}],[\"借助第三方提供的接口审核文本\",{\"1\":{\"4848\":1,\"7237\":1}}],[\"审核纯文本内容\",{\"1\":{\"4857\":1}}],[\"审核成功\",{\"1\":{\"4857\":2}}],[\"审核图片\",{\"1\":{\"4857\":3}}],[\"审核文本内容\",{\"1\":{\"4857\":1}}],[\"审核失败\",{\"1\":{\"4850\":1,\"4857\":2,\"7239\":1}}],[\"审核的主要是审核文章的内容\",{\"1\":{\"4847\":1,\"7236\":1}}],[\"审计\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"思路说明\",{\"1\":{\"4912\":1,\"7281\":1}}],[\"思路分析\",{\"1\":{\"4828\":1,\"7217\":1}}],[\"思路其实很简单\",{\"1\":{\"3687\":1,\"5856\":1}}],[\"风险\",{\"1\":{\"4815\":1,\"7212\":1}}],[\"追求高吞吐量\",{\"1\":{\"4799\":1}}],[\"追随者副本\",{\"1\":{\"1531\":1}}],[\"较全的文档\",{\"1\":{\"4791\":1}}],[\"较普通索引会占用更小的空间\",{\"1\":{\"2840\":1,\"6512\":1}}],[\"智能媒体管理\",{\"1\":{\"4727\":1}}],[\"智能路由\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"归档存储或冷归档存储\",{\"1\":{\"4706\":1}}],[\"×\",{\"1\":{\"4704\":1,\"4707\":1,\"4716\":1,\"4719\":1,\"4722\":1,\"4725\":1,\"4728\":1,\"4734\":1,\"4737\":1}}],[\"纠删码数据修复\",{\"1\":{\"4690\":1}}],[\"√\",{\"1\":{\"4685\":1,\"4686\":1,\"4688\":1,\"4689\":1,\"4691\":1,\"4692\":1,\"4694\":1,\"4695\":1,\"4697\":1,\"4698\":1,\"4700\":1,\"4701\":1,\"4715\":1,\"4733\":1}}],[\"试想一下\",{\"1\":{\"4675\":1,\"7194\":1}}],[\"缺陷\",{\"1\":{\"4669\":1,\"4673\":1,\"4805\":1,\"7188\":1,\"7192\":1,\"7202\":1}}],[\"缺点\",{\"1\":{\"2801\":1,\"2809\":1,\"3830\":1,\"3841\":1,\"3844\":1,\"4501\":1,\"5946\":1,\"5957\":1,\"5960\":1,\"6127\":1,\"6473\":1,\"6481\":1}}],[\"缺点是如果要增加新产品\",{\"1\":{\"863\":1,\"5493\":1}}],[\"喜欢\",{\"1\":{\"4662\":1,\"7181\":1}}],[\"运用es搜索技术\",{\"1\":{\"5003\":1,\"7285\":1}}],[\"运用hbase技术\",{\"1\":{\"5002\":1,\"7284\":1}}],[\"运用ai技术\",{\"1\":{\"4666\":1,\"7185\":1}}],[\"运用redis缓存技术\",{\"1\":{\"4663\":1,\"7182\":1}}],[\"运用mybatis\",{\"1\":{\"4661\":1,\"7180\":1}}],[\"运用spring\",{\"1\":{\"4659\":1,\"4660\":1,\"7178\":1,\"7179\":1}}],[\"运行在\",{\"1\":{\"7078\":1}}],[\"运行完当前进程\",{\"1\":{\"1932\":1}}],[\"运行的线程执行sleep\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"运行的线程执行wait\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"运行的线程在获取对象的同步锁时\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"运行状态\",{\"1\":{\"1855\":1,\"6231\":1}}],[\"运行后就是一个独立的进程\",{\"1\":{\"1815\":1,\"6342\":1}}],[\"运行groovy脚本\",{\"1\":{\"1364\":1,\"5689\":1}}],[\"运行流程\",{\"1\":{\"1195\":1,\"5547\":1}}],[\"运行期间也可以将新的常量放入池中\",{\"1\":{\"290\":1}}],[\"运行期间也可能将新的常量放入池中\",{\"1\":{\"281\":1}}],[\"运行时异常的特点是java编译器不会检查它\",{\"1\":{\"460\":1,\"5355\":1}}],[\"运行时异常\",{\"1\":{\"458\":1,\"5353\":1}}],[\"运行时异常和编译时异常\",{\"1\":{\"457\":1,\"5352\":1}}],[\"运行时常量池中包含各种不同的常量\",{\"1\":{\"289\":1}}],[\"运行时常量池\",{\"1\":{\"281\":1,\"290\":1}}],[\"运行时数据区\",{\"0\":{\"182\":1,\"5291\":1},\"1\":{\"178\":1,\"181\":1,\"5287\":1,\"5290\":1}}],[\"浏览文章功能\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"浏览器解析渲染页面\",{\"1\":{\"2721\":1,\"7016\":1}}],[\"浏览器首先看一下自己的缓存里有没有\",{\"1\":{\"2388\":1}}],[\"浏览器发现响应头里有\",{\"1\":{\"2245\":1}}],[\"浏览器再次请求访问服务器中的该资源时\",{\"1\":{\"2235\":1}}],[\"浏览器一般不会缓存\",{\"1\":{\"2224\":1}}],[\"浏览器会自动重定向新的\",{\"1\":{\"2202\":1}}],[\"领导者\",{\"1\":{\"4631\":1,\"6174\":1}}],[\"领导者副本\",{\"1\":{\"1530\":1}}],[\"架构呢\",{\"1\":{\"4649\":1,\"6222\":1}}],[\"架构也支持\",{\"1\":{\"4648\":1,\"6221\":1}}],[\"架构\",{\"0\":{\"4628\":1,\"6171\":1},\"1\":{\"4648\":5,\"6221\":5}}],[\"架构中的主体部分\",{\"1\":{\"3300\":1,\"6086\":1}}],[\"肯定比\",{\"1\":{\"4625\":1,\"6203\":1}}],[\"肯定会提交刚刚\",{\"1\":{\"4623\":1,\"6200\":1}}],[\"投票也是为了进行写请求\",{\"1\":{\"4632\":1,\"6175\":1}}],[\"投票已经超过半数\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"投票内容为服务器的\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"投票给自己\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"宕机需要重新选举\",{\"1\":{\"4614\":1,\"6187\":1}}],[\"台\",{\"1\":{\"4609\":1}}],[\"台服务器中的\",{\"1\":{\"4609\":1}}],[\"低32位表示事务id\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"低停顿时间是以牺牲吞吐量为代价的\",{\"1\":{\"369\":1}}],[\"崩溃退出与重启等异常情况时\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"崩溃恢复模式\",{\"0\":{\"6185\":1}}],[\"崩溃恢复\",{\"1\":{\"4596\":1,\"4629\":1,\"6169\":1,\"6172\":1,\"6178\":1,\"6195\":1,\"6201\":1,\"6206\":1}}],[\"崩溃恢复和消息广播\",{\"0\":{\"6167\":1},\"1\":{\"4595\":1}}],[\"竟然还要兼顾另外一个系统\",{\"1\":{\"4568\":1}}],[\"竟然要依赖一个重量级的协调系统zookeeper\",{\"1\":{\"4567\":1}}],[\"稳定性高\",{\"1\":{\"4801\":1}}],[\"稳定的分布式数据一致性解决方案\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"稳定自适应轻量级锁状态下\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"防护ddos攻击\",{\"1\":{\"4717\":1}}],[\"防雪崩利器\",{\"1\":{\"4525\":1,\"6142\":1}}],[\"防止密码被窃听\",{\"1\":{\"5039\":1}}],[\"防止线程长时间占用\",{\"1\":{\"3826\":1,\"5943\":1}}],[\"防止局部指令重排序\",{\"1\":{\"3712\":1,\"5912\":1}}],[\"防止某进程正在访问共享资源时\",{\"1\":{\"3462\":1}}],[\"防止其他线程对这个表结构做了变更\",{\"1\":{\"2892\":1,\"6564\":1}}],[\"防止历史连接中的数据\",{\"1\":{\"2617\":1}}],[\"防止黑客伪造的相同序列号的\",{\"1\":{\"2563\":1}}],[\"防止雪崩\",{\"1\":{\"2078\":1,\"5783\":1}}],[\"防止崩溃数据可恢复\",{\"1\":{\"1445\":1}}],[\"防止不同hashcode的高位不同但低位相同导致的hash冲突\",{\"1\":{\"1036\":1}}],[\"雪崩效应\",{\"1\":{\"4519\":1,\"6136\":1}}],[\"治理成本高\",{\"1\":{\"4502\":1,\"6128\":1}}],[\"耦合度比较低\",{\"1\":{\"4496\":1,\"6126\":1}}],[\"教程很丰富\",{\"1\":{\"4495\":1,\"6126\":1}}],[\"产品迭代周期更短\",{\"1\":{\"4500\":1,\"6126\":1}}],[\"产出于spring大家族\",{\"1\":{\"4493\":1,\"6126\":1}}],[\"产生影响\",{\"1\":{\"7079\":1}}],[\"产生大量的慢查询\",{\"1\":{\"6741\":1}}],[\"产生的垃圾过多\",{\"1\":{\"3587\":1}}],[\"产生内存泄漏\",{\"1\":{\"2116\":1}}],[\"产生消息\",{\"1\":{\"2047\":1,\"5752\":1}}],[\"部署和运维成本较低\",{\"1\":{\"4865\":1}}],[\"部署在不同的服务器上\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"部署在同一个服务器\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"部分结果\",{\"1\":{\"203\":1}}],[\"微服务\",{\"0\":{\"7308\":1}}],[\"微服务之前架设的网关服务\",{\"1\":{\"4658\":1,\"7177\":1}}],[\"微服务过多\",{\"1\":{\"4502\":1,\"6128\":1}}],[\"微服务可以是跨平台的\",{\"1\":{\"4499\":1,\"6126\":1}}],[\"微服务网关等\",{\"1\":{\"4494\":1,\"6126\":1}}],[\"微服务在cap理论中采用的ap架构\",{\"1\":{\"4481\":1,\"6114\":1}}],[\"微服务是按照业务进行拆分的\",{\"1\":{\"4479\":1,\"6112\":1}}],[\"微服务是一个分布式系统\",{\"1\":{\"4474\":1,\"6107\":1}}],[\"微服务系统的微服务单元具有很强的横向拓展能力\",{\"1\":{\"4477\":1,\"6110\":1}}],[\"微服务的框架那么多比如\",{\"1\":{\"4491\":1,\"6124\":1}}],[\"微服务的复杂度\",{\"1\":{\"4483\":1,\"6116\":1}}],[\"微服务的不足\",{\"1\":{\"4482\":1,\"6115\":1}}],[\"微服务的修改和部署对其他服务没有影响\",{\"1\":{\"4480\":1,\"6113\":1}}],[\"微服务的每个服务单元是独立部署的\",{\"1\":{\"4480\":1,\"6113\":1}}],[\"微服务的优势\",{\"1\":{\"4475\":1,\"6108\":1}}],[\"微服务的特点\",{\"1\":{\"4467\":1,\"6100\":1}}],[\"微服务的概念\",{\"0\":{\"4464\":1,\"6097\":1}}],[\"微服务就是将工程根据不同的业务规则拆分成微服务\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"微内核\",{\"1\":{\"3434\":2}}],[\"断路器关闭\",{\"1\":{\"6139\":1}}],[\"断路器会将部分请求发给该服务\",{\"1\":{\"6139\":1}}],[\"断路器完全打开\",{\"1\":{\"6138\":1}}],[\"断路器有三种状态\",{\"1\":{\"4520\":1,\"6137\":1}}],[\"断路器等\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"断路器\",{\"1\":{\"4463\":1,\"4494\":1,\"6096\":1,\"6126\":1}}],[\"太垃圾\",{\"1\":{\"4437\":1}}],[\"太倒霉碰见这样的垃圾面试官\",{\"1\":{\"4427\":1}}],[\"太过轻量\",{\"1\":{\"1430\":1}}],[\"迟到二十多分钟\",{\"1\":{\"4427\":1}}],[\"专用的语言\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"专门设计的一种支持崩溃恢复的原子广播协议\",{\"1\":{\"4593\":1,\"6166\":1}}],[\"专门用于组合搜索\",{\"1\":{\"2782\":1,\"6451\":1}}],[\"专业知识问完了\",{\"1\":{\"4417\":1}}],[\"感觉不行问面试官咋看\",{\"1\":{\"4413\":1}}],[\"感谢\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"咱们下面还是来简单对比一下两者\",{\"1\":{\"6400\":1}}],[\"咱们接下来聊一聊非专业的问题\",{\"1\":{\"4417\":1}}],[\"咱们就不问简单的技术了\",{\"1\":{\"4381\":1}}],[\"咱俩加了微信\",{\"1\":{\"4394\":1}}],[\"熟悉mysql吗\",{\"1\":{\"4376\":1}}],[\"熟悉的是java基础和mysql\",{\"1\":{\"4289\":1,\"7114\":1}}],[\"咋用的\",{\"1\":{\"4373\":1}}],[\"甲乙各抽一张\",{\"1\":{\"4356\":1}}],[\"甲乙两个人\",{\"1\":{\"4356\":1}}],[\"凉了\",{\"1\":{\"4352\":1}}],[\"博客社区\",{\"1\":{\"4351\":1}}],[\"挂掉的\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"挂掉的情况\",{\"1\":{\"4608\":1}}],[\"挂了那就麻烦了\",{\"1\":{\"6198\":1}}],[\"挂了一个也能工作\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"挂了一个我们还能正常工作\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"挂了两个我们就不能正常工作了\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"挂了\",{\"1\":{\"4599\":1,\"4618\":1,\"6183\":1,\"6191\":1,\"6197\":1}}],[\"挂\",{\"0\":{\"4347\":1}}],[\"海尔\",{\"0\":{\"4347\":1}}],[\"秋招\",{\"0\":{\"4346\":1}}],[\"研究生的专业成绩排名\",{\"1\":{\"4336\":1,\"7161\":1}}],[\"研究方向为知识图谱\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"讲一下研究生的论文成果\",{\"1\":{\"4335\":1,\"7160\":1}}],[\"讲一下spring\",{\"1\":{\"4329\":1,\"7154\":1}}],[\"讲一下你的项目经验\",{\"1\":{\"4316\":1,\"7141\":1}}],[\"讲一下为什么用线程池\",{\"1\":{\"4312\":1,\"7137\":1}}],[\"讲一下线程池参数maxsize满了你会怎么做\",{\"1\":{\"4313\":1,\"7138\":1}}],[\"讲一下线程池\",{\"1\":{\"4311\":1,\"7136\":1}}],[\"讲了下红黑树的特性\",{\"1\":{\"4310\":1,\"7135\":1}}],[\"讲真\",{\"1\":{\"2747\":1,\"6416\":1}}],[\"吧啦吧啦\",{\"1\":{\"4310\":1,\"7135\":1}}],[\"联想\",{\"0\":{\"4308\":1,\"7133\":1}}],[\"联合索引\",{\"0\":{\"6488\":1},\"1\":{\"2782\":1,\"2817\":1,\"4174\":1,\"6451\":1,\"6489\":1}}],[\"离谱\",{\"1\":{\"4289\":1,\"4356\":1,\"7114\":1}}],[\"离散性可能会变差\",{\"1\":{\"929\":1,\"5446\":1}}],[\"她说最晚周五下午\",{\"1\":{\"4285\":1,\"7110\":1}}],[\"态度算好的\",{\"0\":{\"4279\":1,\"7104\":1}}],[\"登录服务器top命令查看cpu使用率\",{\"1\":{\"4219\":1}}],[\"违背最左匹配原则\",{\"1\":{\"4206\":1}}],[\"违背开闭原则\",{\"1\":{\"863\":1,\"5493\":1}}],[\"些\",{\"1\":{\"4182\":1}}],[\"切面\",{\"1\":{\"4180\":1}}],[\"切换到主分支\",{\"1\":{\"3338\":1}}],[\"切换机房的过程中\",{\"1\":{\"2071\":1,\"5776\":1}}],[\"切换的时候要把页表给切换掉\",{\"1\":{\"1907\":1}}],[\"抽取并封装为一个可重用的模块\",{\"1\":{\"4180\":1}}],[\"抽象装饰\",{\"1\":{\"875\":1}}],[\"抽象构件\",{\"1\":{\"875\":1}}],[\"抽象⼯⼚模式了解吗\",{\"0\":{\"5498\":1}}],[\"抽象⼯⼚模式通过在\",{\"1\":{\"869\":1,\"5499\":1}}],[\"抽象⼯⼚\",{\"1\":{\"854\":1,\"5484\":1}}],[\"右连接就是先把右表中所有记录都查询出来\",{\"1\":{\"4165\":1}}],[\"右表中满足条件的显示出来\",{\"1\":{\"4165\":1}}],[\"右子树\",{\"1\":{\"674\":1}}],[\"旗下拥有浪潮信息\",{\"1\":{\"4128\":1}}],[\"印象中浪潮就是做电脑的\",{\"1\":{\"4128\":1}}],[\"浪潮\",{\"0\":{\"4357\":1}}],[\"浪潮软件和浪潮国际三家上市公司\",{\"1\":{\"4128\":1}}],[\"浪潮有很多子公司\",{\"0\":{\"4127\":1}}],[\"浪潮面经\",{\"0\":{\"4111\":1}}],[\"遇到问题很容易找到解决方案\",{\"1\":{\"4495\":1,\"6126\":1}}],[\"遇到的技术难点就是kafka如何保证消息的可靠性\",{\"1\":{\"4121\":1}}],[\"遇到什么技术难点\",{\"0\":{\"4119\":1}}],[\"遇到过哪些问题\",{\"0\":{\"4006\":1}}],[\"综上所述\",{\"1\":{\"4118\":1}}],[\"积累更多的项目经验\",{\"1\":{\"4109\":1}}],[\"积压的消息处理掉\",{\"1\":{\"1428\":1}}],[\"积压的请求\",{\"1\":{\"1427\":1}}],[\"职业规划\",{\"0\":{\"4107\":1}}],[\"竞赛获奖\",{\"0\":{\"4097\":1}}],[\"令牌将自动删除\",{\"1\":{\"4087\":1}}],[\"认可http\",{\"1\":{\"6977\":1,\"7000\":1}}],[\"认证用户身份和权限\",{\"1\":{\"4060\":1}}],[\"认证服务器验证用户信息无误后\",{\"1\":{\"4057\":1}}],[\"认证信息需要在一定时间内保持有效\",{\"1\":{\"4049\":1}}],[\"认证信息有效性\",{\"1\":{\"4048\":1}}],[\"认证信息共享\",{\"1\":{\"4046\":1,\"4054\":1}}],[\"认为别人不会同时修改数据\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"认为其他人也会修改数据\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"认为这种情况不严重\",{\"1\":{\"2697\":1}}],[\"认为每个结点到自身有长0\",{\"1\":{\"666\":1}}],[\"支付服务等\",{\"1\":{\"4015\":1}}],[\"支持服务器推送\",{\"1\":{\"7069\":1}}],[\"支持对header压缩\",{\"1\":{\"7068\":1}}],[\"支持body压缩\",{\"1\":{\"7068\":1}}],[\"支持长连接\",{\"1\":{\"7061\":1}}],[\"支持图形化工具\",{\"1\":{\"4731\":1}}],[\"支持传输加速服务\",{\"1\":{\"4709\":1}}],[\"支持生命周期规则\",{\"1\":{\"4706\":1}}],[\"支持主流的服务生态\",{\"1\":{\"4554\":1}}],[\"支持本地仓库\",{\"1\":{\"4507\":1,\"6130\":1}}],[\"支持跨平台运行\",{\"1\":{\"3938\":1}}],[\"支持封装\",{\"1\":{\"3937\":1}}],[\"支持多种文件系统\",{\"1\":{\"3456\":1}}],[\"支持持久化\",{\"1\":{\"3140\":1,\"6796\":1}}],[\"支持\",{\"1\":{\"2739\":1,\"2743\":1,\"2746\":1,\"6408\":1,\"6412\":1,\"6415\":1}}],[\"支持行级锁\",{\"1\":{\"2733\":1,\"6402\":1}}],[\"支持一对一\",{\"1\":{\"2487\":1,\"4262\":1}}],[\"支持管道\",{\"1\":{\"2350\":1}}],[\"支持切换机房写数据的时候\",{\"1\":{\"2068\":1,\"5773\":1}}],[\"支持两种事件触发模式\",{\"1\":{\"1777\":1,\"6272\":1}}],[\"支持当前事务的情况\",{\"1\":{\"1238\":1,\"5590\":1}}],[\"支持fast\",{\"1\":{\"941\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"80\":1,\"5193\":1}}],[\"校园实践的收获\",{\"0\":{\"4006\":1}}],[\"观察gc日志\",{\"1\":{\"3991\":1}}],[\"观察者角色\",{\"1\":{\"4602\":1}}],[\"观察者模式\",{\"1\":{\"1214\":1,\"5566\":1}}],[\"观察者\",{\"1\":{\"854\":1,\"5484\":1}}],[\"轻量级的java\",{\"1\":{\"3983\":1}}],[\"轻量级锁\",{\"0\":{\"5812\":1}}],[\"轻量级锁的获取有两种情况\",{\"1\":{\"3802\":1,\"5814\":1}}],[\"轻量级锁的获取及释放依赖多次\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"轻量级锁认为虽然竞争是存在的\",{\"1\":{\"3801\":1,\"5813\":1}}],[\"额外功能\",{\"1\":{\"3965\":2}}],[\"易部署和易维护的分布式系统开发工具包\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"易用性强\",{\"1\":{\"3987\":1}}],[\"易用性不同\",{\"1\":{\"3955\":1}}],[\"易于理解\",{\"1\":{\"2262\":1}}],[\"泛型提供了编译时的类型安全检测机制\",{\"1\":{\"3941\":1}}],[\"泛型技术\",{\"1\":{\"3941\":1}}],[\"今年研二\",{\"1\":{\"5024\":1,\"7288\":1}}],[\"今年研三\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1}}],[\"今年24岁\",{\"1\":{\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"今年25岁\",{\"1\":{\"3933\":1}}],[\"今日在刷leetcode\",{\"1\":{\"562\":1}}],[\"您可以通过生命周期规则定期将非热门数据转换为低频访问\",{\"1\":{\"4706\":1}}],[\"您可以节省任何更改\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"您好\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"明确指出线程资源必须通过线程池提供\",{\"1\":{\"3906\":1,\"6053\":1}}],[\"明文意味着在传输过程中的信息\",{\"1\":{\"2281\":1}}],[\"明文传输双刃剑\",{\"1\":{\"2280\":1}}],[\"明文传输\",{\"1\":{\"2271\":1}}],[\"延迟队列服务提供对外接口\",{\"1\":{\"4878\":1,\"7256\":1}}],[\"延迟任务是一个通用的服务\",{\"1\":{\"4872\":1,\"7250\":1}}],[\"延迟发布\",{\"0\":{\"4861\":1},\"1\":{\"7245\":1}}],[\"延迟低\",{\"1\":{\"4792\":1}}],[\"延迟阻塞队列\",{\"1\":{\"3880\":1,\"6035\":1}}],[\"延迟写\",{\"1\":{\"3161\":1,\"6817\":1}}],[\"影响程序的整体性能\",{\"1\":{\"3871\":1,\"6026\":1}}],[\"影响程序的并发访问性\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"饱和策略会调用rejectedexecutionhandler\",{\"1\":{\"3885\":1,\"6040\":1}}],[\"饱和策略来配置线程池的时候\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"饱和策略\",{\"1\":{\"3866\":1,\"6020\":1}}],[\"杨路恒\",{\"1\":{\"3855\":1,\"4857\":1,\"4860\":1,\"4933\":1,\"4935\":1,\"4938\":1,\"4981\":1,\"4986\":1,\"4992\":1,\"4997\":1,\"4999\":1,\"6009\":1}}],[\"活活饿死\",{\"1\":{\"3844\":1,\"5960\":1}}],[\"活跃事务列表\",{\"1\":{\"3034\":1,\"6701\":1}}],[\"活跃内存页链表\",{\"1\":{\"1702\":1}}],[\"活跃\",{\"1\":{\"1697\":1,\"1701\":1,\"1702\":1}}],[\"失败则乖乖排队\",{\"1\":{\"3842\":1,\"5958\":1}}],[\"失败则返回\",{\"1\":{\"3654\":1,\"3655\":1,\"3657\":1,\"5897\":1,\"5898\":1,\"5900\":1}}],[\"唤醒线程的开销\",{\"1\":{\"3843\":1,\"5959\":1}}],[\"唤醒下一个阻塞线程有系统开销\",{\"1\":{\"3841\":1,\"5957\":1}}],[\"唤醒出队等\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"独享锁与共享锁也是通过aqs来实现的\",{\"1\":{\"5949\":1}}],[\"独享锁与共享锁是通过aqs来实现的\",{\"1\":{\"3833\":1}}],[\"独享锁\",{\"0\":{\"5944\":1},\"1\":{\"3829\":1,\"5945\":1}}],[\"独占方式\",{\"1\":{\"3654\":1,\"3655\":1,\"5897\":1,\"5898\":1}}],[\"独占和共享\",{\"1\":{\"3635\":1,\"5876\":1}}],[\"独占表锁\",{\"1\":{\"2915\":1,\"2916\":1,\"6587\":1,\"6588\":1}}],[\"独占锁\",{\"1\":{\"2908\":1,\"2941\":1,\"3636\":1,\"5877\":1,\"6580\":1,\"6613\":1}}],[\"乐观锁\",{\"0\":{\"5933\":1},\"1\":{\"3816\":1,\"4817\":1,\"4939\":1,\"4951\":1,\"5934\":1,\"7214\":1}}],[\"恢复到无锁\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"恢复状态\",{\"1\":{\"3439\":1}}],[\"初次执行synchronized代码块时\",{\"1\":{\"3795\":1,\"5807\":1}}],[\"初始状态\",{\"1\":{\"3669\":1,\"5832\":1}}],[\"初始序列号\",{\"1\":{\"2413\":1,\"2553\":2}}],[\"初始值为16\",{\"1\":{\"1031\":1}}],[\"初始值是16\",{\"1\":{\"1029\":1}}],[\"初始化敏感词库\",{\"1\":{\"4857\":1}}],[\"初始化选举\",{\"1\":{\"4614\":1,\"6187\":1}}],[\"初始化值\",{\"1\":{\"2694\":2}}],[\"初始化了连接\",{\"1\":{\"2547\":1}}],[\"初始化的序列号都要求不一样呢\",{\"0\":{\"2560\":1},\"1\":{\"2412\":1}}],[\"初始化剩下的单例bean和springboot创建内嵌的tomcat服务器等等重要且复杂的逻辑都在这里实现\",{\"1\":{\"1388\":1}}],[\"初始化事件广播器且广播事件\",{\"1\":{\"1388\":1}}],[\"初始化spring\",{\"1\":{\"1366\":1,\"5691\":1}}],[\"初始化\",{\"1\":{\"409\":1,\"5298\":1}}],[\"初始标记\",{\"1\":{\"363\":1,\"376\":1}}],[\"初始堆内存大小为\",{\"1\":{\"247\":1}}],[\"泄露的内存\",{\"1\":{\"3773\":1}}],[\"盒子中可以存储每个线程的私有数据\",{\"1\":{\"3757\":1,\"5989\":1}}],[\"手动指定锁定对象\",{\"1\":{\"3734\":1}}],[\"手动提交有一个缺点\",{\"1\":{\"1612\":1}}],[\"手动提交\",{\"1\":{\"1603\":1}}],[\"手动提交偏移量\",{\"1\":{\"1380\":1}}],[\"硬件层面的内存屏障分为load\",{\"1\":{\"3716\":1,\"5915\":1}}],[\"典型值为\",{\"1\":{\"7028\":1}}],[\"典型取1024或2048位\",{\"1\":{\"4012\":1}}],[\"典型\",{\"0\":{\"5853\":1},\"1\":{\"3701\":1,\"5870\":1}}],[\"敲黑板\",{\"1\":{\"3683\":1,\"5852\":1}}],[\"尝试释放资源\",{\"1\":{\"3655\":1,\"3657\":1,\"5898\":1,\"5900\":1}}],[\"尝试获取资源\",{\"1\":{\"3654\":1,\"3656\":1,\"5897\":1,\"5899\":1}}],[\"尝试如下的代码片段\",{\"1\":{\"576\":1}}],[\"待该线程操作完释放互斥锁后\",{\"1\":{\"6375\":1}}],[\"待优化\",{\"1\":{\"5000\":1,\"5001\":1,\"5002\":1,\"5003\":1,\"7282\":1,\"7283\":1,\"7284\":1,\"7285\":1}}],[\"待线程空闲\",{\"1\":{\"3902\":1,\"6049\":1}}],[\"待有线程空闲时\",{\"1\":{\"3901\":1,\"6048\":1}}],[\"待导出\",{\"1\":{\"3625\":1}}],[\"待c执行完毕之后\",{\"1\":{\"1373\":1}}],[\"寻找切面类的方法中带有表达式的部分\",{\"1\":{\"4182\":1}}],[\"寻找切面类\",{\"1\":{\"4182\":1}}],[\"寻求帮助\",{\"1\":{\"3597\":1,\"3609\":1}}],[\"寻址相同\",{\"1\":{\"7049\":1}}],[\"寻址\",{\"0\":{\"7032\":1,\"7044\":1},\"1\":{\"7030\":1,\"7046\":1}}],[\"寻址效率也足够高\",{\"1\":{\"1077\":1}}],[\"寻址困难\",{\"1\":{\"1004\":1}}],[\"寻址容易\",{\"1\":{\"1004\":1}}],[\"麻烦就大了\",{\"1\":{\"3572\":1}}],[\"冻结\",{\"1\":{\"3572\":1}}],[\"跟上文中的情况不同的是\",{\"1\":{\"3619\":1}}],[\"跟执行\",{\"1\":{\"3568\":1}}],[\"跟聚簇索引一样\",{\"1\":{\"2810\":1,\"6482\":1}}],[\"丢弃之\",{\"1\":{\"7039\":1}}],[\"丢弃那些准备垃圾回收的对象\",{\"1\":{\"3567\":1}}],[\"丢失等\",{\"1\":{\"2665\":1}}],[\"飙高这个问题大致有两个思路\",{\"1\":{\"3546\":1}}],[\"飙高的原因主要有两种\",{\"1\":{\"3544\":1}}],[\"飙高\",{\"0\":{\"3543\":1}}],[\"拉到末尾\",{\"1\":{\"3629\":1}}],[\"拉出指定线程的堆栈信息\",{\"0\":{\"3526\":1}}],[\"拉取远程分支上的代码并合并到本地分支\",{\"1\":{\"3342\":1}}],[\"拉取合并远程分支的操作\",{\"1\":{\"3338\":1}}],[\"拉取\",{\"1\":{\"1426\":1}}],[\"占比75\",{\"1\":{\"3519\":1}}],[\"占用硬盘超过500tb\",{\"1\":{\"5054\":1}}],[\"占用的内存\",{\"1\":{\"3596\":1}}],[\"占用空间由定义的宽度决定\",{\"1\":{\"3075\":1,\"6726\":1}}],[\"占用也就空间越小\",{\"1\":{\"3071\":1,\"6722\":1}}],[\"占用较多的\",{\"1\":{\"1576\":1}}],[\"占用较少的\",{\"1\":{\"1572\":1,\"1574\":1}}],[\"群组以及其它人\",{\"1\":{\"3497\":1}}],[\"块记录引用信息\",{\"1\":{\"3489\":1}}],[\"间接引用是指\",{\"1\":{\"3489\":1}}],[\"间隙锁之间是兼容的\",{\"1\":{\"2954\":1,\"6626\":1}}],[\"间隙锁虽然存在\",{\"1\":{\"2954\":1,\"6626\":1}}],[\"间隙锁\",{\"1\":{\"2945\":1,\"2953\":1,\"6617\":1,\"6625\":1}}],[\"形成一系列的目录和子目录\",{\"1\":{\"3476\":1,\"5741\":1}}],[\"形成二级分页\",{\"1\":{\"1664\":1}}],[\"便处理在任务队列中的任务\",{\"1\":{\"3901\":1,\"6048\":1}}],[\"便会构成双方通过管道传递信息的流水线\",{\"1\":{\"3468\":1}}],[\"便于减少系统的重复代码\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"便于后者的封装和控制\",{\"1\":{\"885\":1,\"5503\":1}}],[\"往管道文件中写入信息\",{\"1\":{\"3468\":1}}],[\"往往更利于对问题有更深入的了解和研究\",{\"1\":{\"1249\":1,\"5601\":1}}],[\"往往出现老年代空间剩余\",{\"1\":{\"370\":1}}],[\"套解口也是一种进程间通信机制\",{\"1\":{\"3466\":1}}],[\"套接字是支持\",{\"1\":{\"1975\":1,\"6256\":1}}],[\"套接字\",{\"1\":{\"1975\":1,\"3466\":1,\"6256\":1}}],[\"配合config仓库修改的一种stream实现\",{\"1\":{\"4512\":1,\"6130\":1}}],[\"配合使用\",{\"1\":{\"3465\":1}}],[\"配置类\",{\"1\":{\"4945\":1}}],[\"配置文件\",{\"1\":{\"4840\":1,\"4945\":1,\"7229\":1}}],[\"配置文件中默认有此下配置\",{\"1\":{\"3146\":1,\"6802\":1}}],[\"配置管理和服务管理平台\",{\"1\":{\"4551\":1}}],[\"配置管理\",{\"1\":{\"4494\":1,\"6126\":1}}],[\"配置中心\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"配置spring\",{\"1\":{\"4033\":1}}],[\"配置目录权限\",{\"1\":{\"3399\":1}}],[\"配置等文件外\",{\"1\":{\"3294\":1}}],[\"配置项\",{\"1\":{\"3207\":1}}],[\"配置项的相关说明详见\",{\"1\":{\"152\":1,\"156\":1,\"5265\":1}}],[\"配置提供者\",{\"1\":{\"3197\":1}}],[\"配置内容裁决的一些选项\",{\"1\":{\"1398\":1}}],[\"配置监听器的方法\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"配置的所有相关的对象\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"配置分页插件\",{\"1\":{\"1131\":1}}],[\"配置\",{\"0\":{\"32\":1,\"5145\":1},\"1\":{\"3111\":2,\"3126\":2,\"4018\":1,\"6767\":2,\"6782\":2}}],[\"桌面环境\",{\"1\":{\"3452\":1}}],[\"哪些算法是对称加密\",{\"1\":{\"5089\":1}}],[\"哪些变量用了\",{\"1\":{\"4373\":1}}],[\"哪些是非对称加密\",{\"1\":{\"5089\":1}}],[\"哪些是有序的\",{\"0\":{\"4124\":1}}],[\"哪些是已经被对方收到的\",{\"1\":{\"2552\":1}}],[\"哪些对象占用了最多内存\",{\"1\":{\"3591\":1}}],[\"哪些地方用到了内核机制\",{\"1\":{\"3436\":1}}],[\"裁剪\",{\"1\":{\"3435\":1}}],[\"宏内核\",{\"1\":{\"3435\":1}}],[\"忽略大小写\",{\"1\":{\"3424\":1}}],[\"搜寻字符串\",{\"1\":{\"3424\":2}}],[\"搜索引擎通常会更青睐使用\",{\"1\":{\"7079\":1}}],[\"搜索引擎优化\",{\"1\":{\"7079\":1}}],[\"搜索微服务接收消息并创建索引\",{\"1\":{\"4985\":1}}],[\"搜索文章功能\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"搜索镜像\",{\"1\":{\"3307\":1}}],[\"搜索算法搜索索引\",{\"1\":{\"2766\":1,\"6435\":1}}],[\"已存在则\",{\"1\":{\"4904\":1,\"7274\":1}}],[\"已有redis\",{\"1\":{\"4866\":1}}],[\"已有的\",{\"1\":{\"3419\":2}}],[\"已经同意提交了提案n1\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"已经不能满足需求\",{\"1\":{\"6989\":1}}],[\"已经不可能成为\",{\"1\":{\"4625\":1,\"6203\":1}}],[\"已经不再有hash方法了\",{\"1\":{\"1071\":1}}],[\"已经没有超过半数的节点数了\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"已经把内存地址v中的变量值率先更新成了2\",{\"1\":{\"3671\":1,\"5836\":1}}],[\"已经被线程\",{\"1\":{\"1993\":1}}],[\"已经被加载的类会直接返回\",{\"1\":{\"422\":1,\"447\":1,\"5313\":1,\"5340\":1}}],[\"已经持有了资源\",{\"1\":{\"1993\":1}}],[\"已经可以被应用系统使用了\",{\"1\":{\"1185\":1}}],[\"移动文件\",{\"1\":{\"3407\":1}}],[\"移除了对zookeeper的依赖\",{\"1\":{\"4566\":1}}],[\"移除权限\",{\"1\":{\"3411\":1}}],[\"移除最不经常使用的\",{\"1\":{\"3189\":1,\"6847\":1}}],[\"移除最近最少使用的\",{\"1\":{\"3184\":1,\"6842\":1}}],[\"移除\",{\"1\":{\"1704\":1}}],[\"格式为\",{\"1\":{\"3403\":1}}],[\"格式等\",{\"1\":{\"1203\":1,\"5555\":1}}],[\"递归持续复制\",{\"1\":{\"3406\":1}}],[\"递归删除\",{\"1\":{\"3401\":1}}],[\"递归删除目录\",{\"1\":{\"3401\":1}}],[\"递归创建目录\",{\"1\":{\"3399\":1}}],[\"递增或者递减\",{\"1\":{\"691\":1,\"5458\":1}}],[\"拥有者与群组\",{\"1\":{\"3479\":1}}],[\"拥有者\",{\"1\":{\"3411\":1}}],[\"拥有自己的版本库\",{\"1\":{\"3377\":1}}],[\"拥塞发生算法\",{\"1\":{\"2689\":1}}],[\"拥塞发生\",{\"1\":{\"2677\":1}}],[\"拥塞避免算法就是将原本慢启动算法的指数增长变成了线性增长\",{\"1\":{\"2687\":1}}],[\"拥塞避免算法\",{\"1\":{\"2684\":1}}],[\"拥塞避免\",{\"1\":{\"2676\":1}}],[\"拥塞窗口\",{\"1\":{\"2668\":1,\"2669\":1,\"2671\":1,\"2680\":1,\"2703\":1}}],[\"拥塞控制主要是四个算法\",{\"1\":{\"2674\":1}}],[\"拥塞控制\",{\"1\":{\"2491\":1}}],[\"惊不惊喜\",{\"1\":{\"3359\":1}}],[\"临时区域\",{\"1\":{\"3357\":1}}],[\"临界值\",{\"1\":{\"969\":1}}],[\"诸如公共类的公共方法\",{\"1\":{\"3340\":1}}],[\"托管代码的服务器\",{\"1\":{\"3336\":1}}],[\"远程接口中指向降级代码\",{\"1\":{\"4922\":1}}],[\"远程历史中会多出一次回滚提交\",{\"1\":{\"3349\":1}}],[\"远程仓库中clone代码到本地\",{\"1\":{\"3338\":1}}],[\"远程仓库\",{\"1\":{\"3336\":1}}],[\"远远高于平时\",{\"1\":{\"1421\":1}}],[\"守护进程建立到\",{\"1\":{\"3328\":1}}],[\"守护程序\",{\"1\":{\"3328\":1}}],[\"映像的所有命令\",{\"1\":{\"3316\":1}}],[\"映射记录\",{\"1\":{\"7040\":1}}],[\"映射到相互通信的进程各自的虚拟地址空间中\",{\"1\":{\"3471\":1}}],[\"映射到相同的物理内存中\",{\"1\":{\"1960\":1}}],[\"映射后的示意图如下\",{\"1\":{\"2027\":1}}],[\"映射\",{\"1\":{\"1788\":1,\"6292\":1}}],[\"终将收到主机\",{\"1\":{\"7042\":1}}],[\"终极的解决办法是找到占用内存大的地方\",{\"1\":{\"3591\":1}}],[\"终极目标是app的隔离\",{\"1\":{\"3312\":1}}],[\"终端模拟器等\",{\"1\":{\"3454\":1}}],[\"终止进程时\",{\"1\":{\"1885\":1}}],[\"终止状态\",{\"1\":{\"1858\":1,\"6234\":1}}],[\"仓库的三个组成部分\",{\"1\":{\"3355\":1}}],[\"仓库区\",{\"1\":{\"3335\":1}}],[\"仓库\",{\"1\":{\"3296\":2}}],[\"停止\",{\"1\":{\"3295\":1,\"3307\":1}}],[\"停顿时间来制定回收计划\",{\"1\":{\"379\":1}}],[\"镜像和\",{\"1\":{\"3328\":1}}],[\"镜像和容器的相关操作\",{\"0\":{\"3306\":1,\"6092\":1}}],[\"镜像创建\",{\"0\":{\"3317\":1}}],[\"镜像的运行时实例\",{\"1\":{\"3314\":1}}],[\"镜像管理文件系统操作的封装\",{\"1\":{\"3312\":1}}],[\"镜像是静态的定义\",{\"1\":{\"3295\":1}}],[\"镜像是静态的\",{\"1\":{\"3294\":1}}],[\"镜像是一个特殊的文件系统\",{\"1\":{\"3294\":1}}],[\"镜像\",{\"1\":{\"3294\":1,\"3295\":1,\"3329\":1}}],[\"公开密钥用于对信息加密\",{\"1\":{\"5094\":1}}],[\"公平锁\",{\"0\":{\"5954\":1},\"1\":{\"3839\":1,\"5955\":1}}],[\"公平锁和非公平锁等高级功能\",{\"1\":{\"3785\":1,\"5796\":1}}],[\"公平锁公平锁是指多个线程在等待同一个锁时\",{\"1\":{\"3782\":1,\"5793\":1}}],[\"公司推出的\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"公钥是公开的\",{\"1\":{\"5101\":1}}],[\"公钥\",{\"1\":{\"2331\":1}}],[\"限流\",{\"1\":{\"3280\":1,\"6885\":1}}],[\"限制每张表上的索引数量\",{\"1\":{\"2831\":1,\"6503\":1}}],[\"限制\",{\"1\":{\"1770\":1}}],[\"限制了\",{\"1\":{\"283\":1}}],[\"摧枯拉朽之势\",{\"1\":{\"3275\":1,\"6880\":1}}],[\"哈哈\",{\"1\":{\"3274\":1,\"6879\":1}}],[\"哈希索引\",{\"1\":{\"2771\":1,\"6440\":1}}],[\"哈希表是键值对的集合\",{\"1\":{\"2755\":1,\"6424\":1}}],[\"哈希表结构\",{\"0\":{\"710\":1,\"5478\":1},\"1\":{\"3765\":1,\"5996\":1}}],[\"哈希函数越多\",{\"1\":{\"2169\":1}}],[\"哈希环的组织\",{\"1\":{\"2020\":1}}],[\"哈希算法\",{\"1\":{\"1063\":1,\"2024\":1,\"2756\":1,\"6425\":1}}],[\"哈希值的使用不同\",{\"1\":{\"940\":1}}],[\"哈希值进行与操作时可以保证低位的值不变\",{\"1\":{\"927\":1,\"5444\":1}}],[\"穿透\",{\"0\":{\"3245\":1,\"6850\":1}}],[\"击穿\",{\"0\":{\"3245\":1,\"6850\":1}}],[\"升级主节点\",{\"1\":{\"3222\":1}}],[\"升级到\",{\"1\":{\"1706\":1}}],[\"故而会更准确些\",{\"1\":{\"3570\":1}}],[\"故障转移流程如下\",{\"1\":{\"3221\":1}}],[\"故障的转移\",{\"1\":{\"3219\":1}}],[\"故该\",{\"1\":{\"3042\":1,\"6710\":1}}],[\"张赞成票\",{\"1\":{\"3214\":1}}],[\"客观下线\",{\"1\":{\"3205\":1}}],[\"客户端只要能够找到任意一台\",{\"1\":{\"7091\":1}}],[\"客户端开启降级heima\",{\"1\":{\"4924\":1}}],[\"客户端b执行代码完成\",{\"1\":{\"4909\":1,\"7279\":1}}],[\"客户端b在等待一段时间后再去请求设置key的值\",{\"1\":{\"4908\":1,\"7278\":1}}],[\"客户端b也去请求服务器设置key的值\",{\"1\":{\"4906\":1,\"7276\":1}}],[\"客户端a执行代码完成\",{\"1\":{\"4907\":1,\"7277\":1}}],[\"客户端a请求服务器设置key的值\",{\"1\":{\"4905\":1,\"7275\":1}}],[\"客户端容错保护\",{\"1\":{\"4509\":1,\"6130\":1}}],[\"客户端负载均衡\",{\"1\":{\"4508\":1,\"6130\":1}}],[\"客户端带上这个jwt\",{\"1\":{\"4059\":1}}],[\"客户端拿到jwt\",{\"1\":{\"4058\":1}}],[\"客户端连接到\",{\"1\":{\"3451\":1}}],[\"客户端连续发送多次\",{\"1\":{\"2542\":1}}],[\"客户端是一个client\",{\"1\":{\"3240\":1}}],[\"客户端是可以自己连自己的形成连接\",{\"1\":{\"2646\":1}}],[\"客户端在注册或登录的时候\",{\"1\":{\"5041\":1,\"5047\":1}}],[\"客户端在初始化时\",{\"1\":{\"3197\":1}}],[\"客户端在经过\",{\"1\":{\"2600\":1}}],[\"客户端打算关闭连接\",{\"1\":{\"2594\":1}}],[\"客户端就会触发超时重传机制\",{\"1\":{\"2574\":1,\"2608\":1}}],[\"客户端没有接收到\",{\"1\":{\"2555\":1}}],[\"客户端与服务器端进行的数据交互总量\",{\"1\":{\"4188\":1}}],[\"客户端与服务器进入加密通信\",{\"1\":{\"2343\":1}}],[\"客户端与服务端就可以正常的完成三次握手了\",{\"1\":{\"2546\":1}}],[\"客户端收到后\",{\"1\":{\"2544\":1}}],[\"客户端收到服务端的\",{\"1\":{\"2596\":1,\"2598\":1}}],[\"客户端收到服务端报文后\",{\"1\":{\"2529\":1}}],[\"客户端收到服务器的回应之后\",{\"1\":{\"2331\":1}}],[\"客户端先发送了\",{\"1\":{\"2540\":1}}],[\"客户端会随机的链接到\",{\"1\":{\"4594\":1}}],[\"客户端会随机初始化序号\",{\"1\":{\"2527\":1}}],[\"客户端会从数字证书中取出服务器的公钥\",{\"1\":{\"2332\":1}}],[\"客户端的读取流程\",{\"1\":{\"4594\":1}}],[\"客户端的端口数最多为\",{\"1\":{\"2477\":1}}],[\"客户端的\",{\"1\":{\"2477\":1}}],[\"客户端\",{\"1\":{\"2475\":1,\"3326\":1,\"3327\":1}}],[\"客户端调用\",{\"1\":{\"2438\":1}}],[\"客户端和服务器端都无法验证对方的身份\",{\"1\":{\"7078\":1}}],[\"客户端和服务器双方都可以建立\",{\"1\":{\"2363\":1}}],[\"客户端和服务端就可以相互发送数据了\",{\"1\":{\"2532\":1}}],[\"客户端和服务端都处于\",{\"1\":{\"2526\":1}}],[\"客户端和目标建立连接\",{\"1\":{\"2396\":1,\"7100\":1}}],[\"客户端首先会发出一个\",{\"1\":{\"2389\":1,\"7093\":1}}],[\"客户端握手结束通知\",{\"1\":{\"2335\":1}}],[\"客户端回应\",{\"1\":{\"2330\":1}}],[\"客户端生产的随机数\",{\"1\":{\"2322\":1}}],[\"客户端支持的密码套件列表\",{\"1\":{\"2323\":1}}],[\"客户端支持的\",{\"1\":{\"2321\":1}}],[\"客户端主要向服务器发送以下信息\",{\"1\":{\"2320\":1}}],[\"客户端向服务器索要并验证服务器的公钥\",{\"1\":{\"2312\":1}}],[\"客户端可以发起多个请求\",{\"1\":{\"2297\":1}}],[\"客户端需要构造一个http\",{\"1\":{\"2083\":1}}],[\"客户端发送请求时\",{\"1\":{\"2214\":1}}],[\"客户端发送请求\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"客户端不需要关注创建逻辑\",{\"1\":{\"862\":1,\"5492\":1}}],[\"哨兵的选举机制其实很简单\",{\"1\":{\"3210\":1}}],[\"哨兵的核心功能是主节点的自动故障转移\",{\"1\":{\"3192\":1}}],[\"哨兵如何判断主库已经下线了呢\",{\"1\":{\"3202\":1}}],[\"哨兵就可以根据从库列表中的连接信息\",{\"1\":{\"3201\":1}}],[\"哨兵\",{\"0\":{\"6849\":1},\"1\":{\"3201\":2}}],[\"哨兵监控什么呢\",{\"1\":{\"3200\":1}}],[\"哨兵可以将故障转移的结果发送给客户端\",{\"1\":{\"3198\":1}}],[\"哨兵会开始自动故障转移操作\",{\"1\":{\"3196\":1}}],[\"哨兵会不断地检查主节点和从节点是否运作正常\",{\"1\":{\"3195\":1}}],[\"哨兵实现了什么功能呢\",{\"1\":{\"3194\":1}}],[\"懒汉式删除\",{\"1\":{\"3175\":1,\"6833\":1}}],[\"懒加载\",{\"1\":{\"859\":1,\"5489\":1}}],[\"惰性删除对\",{\"1\":{\"3175\":1,\"6833\":1}}],[\"惰性删除\",{\"1\":{\"3173\":1,\"6831\":1}}],[\"电子邮件\",{\"1\":{\"4840\":1,\"7229\":1}}],[\"电话面试\",{\"1\":{\"4285\":1,\"7110\":1}}],[\"电商系统中商品的销量排名等\",{\"1\":{\"3138\":1,\"6794\":1}}],[\"电脑里有\",{\"1\":{\"586\":1}}],[\"电脑内存大小\",{\"1\":{\"247\":1,\"248\":1}}],[\"游戏积分排行榜\",{\"1\":{\"3138\":1,\"6794\":1}}],[\"替代了双向链表和压缩列表\",{\"1\":{\"3113\":1,\"6769\":1}}],[\"替换\",{\"1\":{\"1786\":1,\"6290\":1}}],[\"拼接字符串不会造成缓冲区溢出\",{\"1\":{\"3103\":1,\"6759\":1}}],[\"拼多多\",{\"1\":{\"2286\":1}}],[\"音频\",{\"1\":{\"3101\":1,\"6757\":1}}],[\"音频等多媒体通信\",{\"1\":{\"2509\":1}}],[\"地理位置\",{\"1\":{\"3095\":1,\"6751\":1}}],[\"地址上托管多个域名\",{\"1\":{\"7064\":1}}],[\"地址在另一个子网中\",{\"1\":{\"7046\":1}}],[\"地址在计算机是以二进制的方式处理的\",{\"1\":{\"2374\":1}}],[\"地址后\",{\"1\":{\"7042\":1}}],[\"地址为主机\",{\"1\":{\"7055\":1}}],[\"地址为查询分组的发送者\",{\"1\":{\"7041\":1}}],[\"地址为发送者本身\",{\"1\":{\"7041\":1}}],[\"地址为137\",{\"1\":{\"7033\":2}}],[\"地址恰恰相反\",{\"1\":{\"7041\":1}}],[\"地址信息\",{\"1\":{\"7040\":1}}],[\"地址和一个\",{\"1\":{\"7045\":1}}],[\"地址和\",{\"1\":{\"7040\":1,\"7042\":1,\"7045\":1}}],[\"地址和端口号组成\",{\"1\":{\"2463\":1}}],[\"地址是本子网内与路由器连接的接口的\",{\"1\":{\"7050\":1}}],[\"地址是\",{\"1\":{\"7050\":2}}],[\"地址是否为自己的\",{\"1\":{\"7039\":1}}],[\"地址是广播地址\",{\"1\":{\"7038\":1}}],[\"地址绝不会是主机\",{\"1\":{\"7038\":1}}],[\"地址也是主机\",{\"1\":{\"7038\":1}}],[\"地址即为主机\",{\"1\":{\"7038\":1}}],[\"地址对应的映射条目\",{\"1\":{\"7036\":1}}],[\"地址映射关系\",{\"1\":{\"7028\":1}}],[\"地址转\",{\"1\":{\"7026\":1}}],[\"地址才是物理地址\",{\"1\":{\"7026\":1}}],[\"地址属于逻辑地址\",{\"1\":{\"7026\":1}}],[\"地址解析协议\",{\"1\":{\"7026\":1}}],[\"地址客户端发送的请求都将分发到同一个\",{\"1\":{\"4141\":1}}],[\"地址返回客户端\",{\"1\":{\"2396\":1,\"7100\":1}}],[\"地址吗\",{\"1\":{\"2390\":1,\"2392\":1,\"7094\":1,\"7096\":1}}],[\"地址缓存起来\",{\"1\":{\"2381\":1}}],[\"地址塞入\",{\"1\":{\"2380\":1}}],[\"地址一致\",{\"1\":{\"2380\":1}}],[\"地址与自己的\",{\"1\":{\"2380\":1}}],[\"地址分类成了\",{\"1\":{\"2377\":1}}],[\"地址的一些问题\",{\"1\":{\"7026\":1}}],[\"地址的缓存是有一定期限的\",{\"1\":{\"2382\":1}}],[\"地址的\",{\"1\":{\"2381\":1,\"2578\":1}}],[\"地址的主机\",{\"1\":{\"2379\":1}}],[\"地址的分类\",{\"0\":{\"2376\":1}}],[\"地址的基础知识\",{\"0\":{\"2373\":1}}],[\"地址\",{\"1\":{\"2374\":2,\"2375\":1,\"2379\":1,\"2381\":1,\"2390\":1,\"2395\":1,\"7028\":1,\"7034\":2,\"7035\":1,\"7036\":1,\"7038\":7,\"7039\":1,\"7045\":2,\"7047\":1,\"7048\":1,\"7049\":2,\"7050\":5,\"7051\":1,\"7053\":1,\"7054\":2,\"7055\":1,\"7094\":1,\"7099\":1}}],[\"地址空间的范围也不同\",{\"1\":{\"1687\":1}}],[\"地址结构就由段号\",{\"1\":{\"1679\":1}}],[\"散列值\",{\"1\":{\"5029\":1}}],[\"散列算法\",{\"1\":{\"5029\":1}}],[\"散列\",{\"0\":{\"3123\":1,\"6779\":1},\"1\":{\"3094\":1,\"6750\":1}}],[\"点赞\",{\"1\":{\"3122\":1,\"4662\":1,\"6778\":1,\"7181\":1}}],[\"点\",{\"1\":{\"3089\":1,\"6745\":1}}],[\"点的秒杀活动高峰期时\",{\"1\":{\"1421\":1}}],[\"场景\",{\"1\":{\"3080\":1,\"6731\":1}}],[\"场景问题\",{\"0\":{\"2037\":1,\"5742\":1,\"7306\":1}}],[\"精准浮点\",{\"1\":{\"3074\":1,\"6725\":1}}],[\"禁止驱逐数据\",{\"1\":{\"3186\":1,\"6844\":1}}],[\"禁止使用\",{\"0\":{\"6735\":1},\"1\":{\"3083\":1}}],[\"禁止使用全文索引\",{\"0\":{\"6730\":1},\"1\":{\"3079\":1}}],[\"禁止给表中的每一列都建立单独的索引\",{\"0\":{\"6732\":1},\"1\":{\"3081\":1}}],[\"禁止在数据库中存储文件\",{\"0\":{\"6718\":1},\"1\":{\"3067\":1}}],[\"禁用了如下功能\",{\"1\":{\"11\":1,\"5124\":1}}],[\"禁用展示\",{\"1\":{\"7\":1,\"99\":1,\"5120\":1,\"5212\":1}}],[\"符合可见性条件\",{\"1\":{\"3053\":1}}],[\"均包含了发送和接收的\",{\"1\":{\"7038\":1}}],[\"均可以被\",{\"1\":{\"3032\":1,\"6698\":1}}],[\"均为\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"隐藏字段\",{\"1\":{\"3019\":1,\"3027\":1,\"6691\":1,\"6692\":1,\"6693\":1}}],[\"万个请求的问题\",{\"1\":{\"6282\":1}}],[\"万请求\",{\"1\":{\"6282\":1}}],[\"万级\",{\"1\":{\"4776\":1,\"4777\":1}}],[\"万余额的账号个数就变为\",{\"1\":{\"2993\":1,\"6665\":1}}],[\"万的账号\",{\"1\":{\"2993\":1,\"6665\":1}}],[\"万的记录\",{\"1\":{\"2992\":1,\"2994\":1,\"6664\":1,\"6666\":1}}],[\"条记录\",{\"1\":{\"2992\":1,\"6664\":1}}],[\"条\",{\"1\":{\"2992\":1,\"2994\":1,\"6664\":1,\"6666\":1}}],[\"条件查询的字段\",{\"1\":{\"2826\":1,\"6498\":1}}],[\"条件之一\",{\"1\":{\"2322\":1,\"2327\":1}}],[\"条件注解\",{\"1\":{\"1303\":1}}],[\"脏读\",{\"0\":{\"6652\":1},\"1\":{\"2981\":1,\"3007\":1,\"4241\":1,\"6653\":1,\"6679\":1}}],[\"扣除了\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"商品到手\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"商品库存这类需要强一致的数据\",{\"1\":{\"2075\":1,\"5780\":1}}],[\"购买失败时\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"购买成功时\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"购物车系统\",{\"1\":{\"2053\":1,\"5758\":1}}],[\"型关系\",{\"1\":{\"2960\":1,\"6632\":1}}],[\"型的记录锁是冲突的\",{\"1\":{\"2960\":1,\"6632\":1}}],[\"型的记录锁与\",{\"1\":{\"2960\":1,\"6632\":1}}],[\"型的\",{\"1\":{\"2958\":2,\"2959\":2,\"6630\":2,\"6631\":2}}],[\"型间隙锁\",{\"1\":{\"2954\":1,\"6626\":1}}],[\"型间隙锁和\",{\"1\":{\"2954\":1,\"6626\":1}}],[\"型与\",{\"1\":{\"2949\":2,\"2950\":2,\"2960\":1,\"6621\":2,\"6622\":2,\"6632\":1}}],[\"型记录锁\",{\"1\":{\"2949\":2,\"2950\":2,\"6621\":2,\"6622\":2}}],[\"型记录锁后\",{\"1\":{\"2949\":1,\"2950\":1,\"6621\":1,\"6622\":1}}],[\"行级锁\",{\"0\":{\"6608\":1}}],[\"行级锁的类型主要有三类\",{\"1\":{\"2943\":1,\"6615\":1}}],[\"行锁是怎么做的\",{\"0\":{\"4221\":1}}],[\"行为型\",{\"1\":{\"854\":1,\"5484\":1}}],[\"满足写写互斥\",{\"1\":{\"2941\":1,\"6613\":1}}],[\"满足读读共享\",{\"1\":{\"2941\":1,\"6613\":1}}],[\"满足以下特性\",{\"1\":{\"1886\":1}}],[\"修饰的切面类并获取切面类中的所有方法\",{\"1\":{\"4182\":1}}],[\"修饰的\",{\"1\":{\"3773\":1}}],[\"修饰的方法并没有\",{\"1\":{\"3747\":1,\"3751\":1,\"5979\":1,\"5983\":1}}],[\"修饰的字段加上轻量级锁\",{\"1\":{\"2926\":1,\"6598\":1}}],[\"修饰的字段的值是连续递增的\",{\"1\":{\"2923\":1,\"6595\":1}}],[\"修饰的字段赋值递增的值\",{\"1\":{\"2922\":1,\"6594\":1}}],[\"修饰方法的的情况\",{\"0\":{\"3744\":1,\"5976\":1}}],[\"修改这个值不会影响到拷贝源的值\",{\"1\":{\"5108\":1}}],[\"修改文章enable\",{\"1\":{\"4979\":1}}],[\"修改文章内容\",{\"1\":{\"4857\":1}}],[\"修改查询语句中的排序条件\",{\"1\":{\"4960\":1}}],[\"修改调用超时时间\",{\"1\":{\"4926\":1}}],[\"修改发布文章代码\",{\"1\":{\"4880\":1,\"7258\":1}}],[\"修改锁标志位\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"修改对象头里的锁标志位\",{\"1\":{\"3795\":1,\"5807\":1}}],[\"修改为\",{\"1\":{\"3685\":1,\"5854\":1}}],[\"修改本地冲突文件使其与远程仓库的文件保持一致后\",{\"1\":{\"3341\":1}}],[\"修改了表字段\",{\"1\":{\"2900\":1,\"6572\":1}}],[\"修改代价肯定是较大的\",{\"1\":{\"2803\":1,\"6475\":1}}],[\"修改\",{\"1\":{\"1340\":1,\"3292\":1,\"5664\":1,\"6081\":1}}],[\"修改元素\",{\"1\":{\"945\":1}}],[\"修改引用类型\",{\"1\":{\"486\":1}}],[\"修改值类型\",{\"1\":{\"486\":1}}],[\"掉这个长事务\",{\"1\":{\"2904\":1,\"6576\":1}}],[\"释放带来的性能损耗\",{\"1\":{\"3810\":1,\"5821\":1}}],[\"释放间隙锁的时刻\",{\"1\":{\"2963\":1,\"6635\":1}}],[\"释放\",{\"1\":{\"2893\":1,\"2894\":1,\"3805\":1,\"5816\":1,\"6565\":1,\"6566\":1}}],[\"释放出来\",{\"1\":{\"1925\":1}}],[\"申请自增主键后就释放锁\",{\"1\":{\"2929\":1,\"6601\":1}}],[\"申请\",{\"1\":{\"2893\":1,\"2894\":1,\"6565\":1,\"6566\":1}}],[\"申请数字证书\",{\"1\":{\"2309\":1}}],[\"牛逼的地方在于实现了颗粒度更细的行级锁\",{\"1\":{\"2886\":1,\"6558\":1}}],[\"备份数据库的工具是\",{\"1\":{\"2868\":1,\"6540\":1}}],[\"备份期间业务依然可以对数据进行更新操作\",{\"1\":{\"2866\":1,\"6538\":1}}],[\"备份就会花费很多的时间\",{\"1\":{\"2864\":1,\"6536\":1}}],[\"备忘录\",{\"1\":{\"854\":1,\"5484\":1}}],[\"意不意外\",{\"1\":{\"3359\":1}}],[\"意向岗位是不是系统开发\",{\"1\":{\"4447\":1}}],[\"意向独占锁\",{\"1\":{\"2908\":1,\"2909\":1,\"6580\":1,\"6581\":1}}],[\"意向共享锁和意向独占锁是表级锁\",{\"1\":{\"2913\":1,\"6585\":1}}],[\"意向共享锁\",{\"1\":{\"2907\":1,\"6579\":1}}],[\"意向锁的目的是为了快速判断表里是否有记录被加锁\",{\"1\":{\"2917\":1,\"6589\":1}}],[\"意向锁\",{\"0\":{\"6577\":1},\"1\":{\"2875\":1,\"2915\":1,\"2916\":1,\"6547\":1,\"6587\":1,\"6588\":1}}],[\"意味着整个数据库都是只读状态\",{\"1\":{\"2863\":1,\"6535\":1}}],[\"意思是多次执行相同的操作\",{\"1\":{\"2221\":1}}],[\"涉及的索引都不会被使用到\",{\"1\":{\"2847\":1,\"6519\":1}}],[\"涉及四次通信\",{\"1\":{\"2316\":1}}],[\"冗余索引指的是索引的功能相同\",{\"1\":{\"2838\":1,\"6510\":1}}],[\"耗费更多服务器资源\",{\"1\":{\"7078\":1}}],[\"耗费的时间也是较多的\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"耗时控制在\",{\"1\":{\"6260\":1}}],[\"耗时以及再次full\",{\"1\":{\"3991\":1}}],[\"耗时\",{\"1\":{\"1417\":1,\"3615\":1,\"3617\":1}}],[\"尽管\",{\"1\":{\"2966\":1,\"6638\":1}}],[\"尽可能的考虑建立联合索引而不是单列索引\",{\"1\":{\"2835\":1,\"6507\":1}}],[\"尽量使得明文密码及其md5值\",{\"1\":{\"5054\":1,\"5071\":1}}],[\"尽量使用\",{\"1\":{\"4076\":1}}],[\"尽量将无效的\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"尽量少的调整分区分配的变动\",{\"1\":{\"1485\":1,\"6937\":1}}],[\"尽量均衡\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"尽量做到任何一位的变化都能对最终得到的结果产生影响\",{\"1\":{\"1036\":1}}],[\"覆盖索引即需要查询的字段正好是索引的字段\",{\"1\":{\"2814\":1,\"6486\":1}}],[\"覆盖索引\",{\"0\":{\"6484\":1},\"1\":{\"2781\":1,\"2813\":1,\"6450\":1,\"6485\":1}}],[\"列举工作中常用的几个git命令\",{\"0\":{\"3337\":1}}],[\"列出全部的文件\",{\"1\":{\"3395\":1}}],[\"列出文件或者目录的信息\",{\"1\":{\"3394\":1}}],[\"列出当前所有正在运行的\",{\"1\":{\"3307\":1}}],[\"列出所有的\",{\"1\":{\"3307\":1}}],[\"列出\",{\"1\":{\"3307\":1}}],[\"列表会按\",{\"1\":{\"3550\":1,\"3553\":1}}],[\"列表每个元素的值都小于\",{\"1\":{\"3111\":1,\"6767\":1}}],[\"列表\",{\"0\":{\"3108\":1,\"6764\":1},\"1\":{\"3035\":1,\"3094\":1,\"6702\":1,\"6750\":1}}],[\"列值唯一\",{\"1\":{\"2778\":1,\"2780\":1,\"6447\":1,\"6449\":1}}],[\"列上可以创建全文索引\",{\"1\":{\"2773\":1,\"2783\":1,\"6442\":1,\"6452\":1}}],[\"仅知道目的地的\",{\"1\":{\"7034\":1}}],[\"仅启动一个\",{\"1\":{\"3920\":1,\"6069\":1}}],[\"仅存在结点之间的关联关系\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"仅打印具有活动引用的对象\",{\"1\":{\"3567\":1}}],[\"仅列出目录本身\",{\"1\":{\"3395\":1}}],[\"仅仅是定义了同步状态的获取和释放的方法\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"仅仅是写到缓冲区\",{\"1\":{\"3167\":1,\"6823\":1}}],[\"仅仅通过给\",{\"1\":{\"3176\":1,\"6834\":1}}],[\"仅仅只是标记一下\",{\"1\":{\"363\":1}}],[\"仅加速查询\",{\"1\":{\"2779\":1,\"6448\":1}}],[\"仅支持\",{\"1\":{\"2772\":1,\"6441\":1}}],[\"辅助索引的\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"辅助索引\",{\"1\":{\"2767\":1,\"2776\":1,\"2805\":1,\"6436\":1,\"6445\":1,\"6477\":1}}],[\"聚集索引\",{\"1\":{\"2767\":1,\"2775\":1,\"6436\":1,\"6444\":1}}],[\"聚簇索引的叶子节点就是数据页面\",{\"1\":{\"4249\":1}}],[\"聚簇索引的查询速度非常的快\",{\"1\":{\"2799\":1,\"6471\":1}}],[\"聚簇索引和非聚簇索引\",{\"0\":{\"4244\":1}}],[\"聚簇索引对于主键的排序查找和范围查找速度非常快\",{\"1\":{\"2800\":1,\"6472\":1}}],[\"聚簇索引少了一次读取数据的\",{\"1\":{\"2799\":1,\"6471\":1}}],[\"聚簇索引\",{\"0\":{\"6467\":1},\"1\":{\"2767\":1,\"2775\":1,\"2796\":1,\"4246\":1,\"6436\":1,\"6444\":1,\"6468\":1}}],[\"叶节点的\",{\"1\":{\"2766\":1,\"6435\":1}}],[\"叶子节点存储的是主键+列值\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"叶子节点存储索引和索引对应的数据\",{\"1\":{\"2797\":1,\"6469\":1}}],[\"叶子节点也都是有序的\",{\"1\":{\"2799\":1,\"6471\":1}}],[\"叶子节点的顺序检索很明显\",{\"1\":{\"2764\":1,\"6433\":1}}],[\"叶子节点\",{\"1\":{\"696\":1,\"5463\":1}}],[\"检索自己的\",{\"1\":{\"7036\":1}}],[\"检索出每个频道的文章\",{\"1\":{\"4999\":1}}],[\"检索进程\",{\"1\":{\"3558\":1}}],[\"检索就结束了\",{\"1\":{\"2764\":1,\"6433\":1}}],[\"检查参数\",{\"1\":{\"4979\":1}}],[\"检查死锁\",{\"1\":{\"3629\":1}}],[\"检查虚拟机的内存参数设置是否合理\",{\"1\":{\"2134\":1}}],[\"检查线上是否存在代码或配置变更\",{\"1\":{\"2133\":1}}],[\"检查代码中是否存在内存泄漏\",{\"1\":{\"2130\":1}}],[\"检查的方式很粗暴\",{\"1\":{\"1768\":1}}],[\"检查数据库类型\",{\"1\":{\"1110\":1}}],[\"检查该类是否已经加载过\",{\"1\":{\"444\":1,\"5337\":1}}],[\"检查幸存者对象\",{\"1\":{\"233\":1}}],[\"域名解析的工作流程\",{\"0\":{\"7092\":1}}],[\"域名的层级关系类似一个树状结构\",{\"1\":{\"2384\":1}}],[\"域存储相应记录主键的值而不是地址\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"域存放的是数据记录的地址\",{\"1\":{\"2766\":1,\"6435\":1}}],[\"域的值为地址读取相应的数据记录\",{\"1\":{\"2766\":1,\"6435\":1}}],[\"域的值\",{\"1\":{\"2766\":1,\"6435\":1}}],[\"域保存了完整的数据记录\",{\"1\":{\"2750\":1,\"2767\":1,\"6419\":1,\"6436\":1}}],[\"索引项在索引中\",{\"1\":{\"4247\":1}}],[\"索引项和数据行分开存储\",{\"1\":{\"4247\":1}}],[\"索引项和数据行存储在一起\",{\"1\":{\"4246\":1}}],[\"索引项按照主键排序存储在表中\",{\"1\":{\"4246\":1}}],[\"索引本身就是数据\",{\"1\":{\"4246\":1}}],[\"索引列上参与计算会导致索引失效\",{\"1\":{\"4205\":1}}],[\"索引失效的情况\",{\"0\":{\"4253\":1}}],[\"索引失效\",{\"0\":{\"4201\":1}}],[\"索引失效也是慢查询的主要原因之一\",{\"1\":{\"2842\":1,\"6514\":1}}],[\"索引分类\",{\"0\":{\"4166\":1}}],[\"索引操作时\",{\"1\":{\"4116\":1}}],[\"索引占用的空间也是很多的\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"索引过多\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"索引可以增加查询效率\",{\"1\":{\"2833\":1,\"6505\":1}}],[\"索引可以提高效率同样可以降低效率\",{\"1\":{\"2832\":1,\"6504\":1}}],[\"索引可就不行了\",{\"1\":{\"2757\":1,\"6426\":1}}],[\"索引并不是越多越好\",{\"1\":{\"2832\":1,\"6504\":1}}],[\"索引已经排序\",{\"1\":{\"2827\":1,\"6499\":1}}],[\"索引字段的数据应该尽量不为\",{\"1\":{\"2824\":1,\"6496\":1}}],[\"索引下推\",{\"1\":{\"2820\":1,\"2821\":1,\"6492\":1,\"6493\":1}}],[\"索引结构和数据分开存放的索引\",{\"1\":{\"2776\":1,\"6445\":1}}],[\"索引结构和数据一起存放的索引\",{\"1\":{\"2775\":1,\"6444\":1}}],[\"索引都是使用\",{\"1\":{\"2770\":1,\"6439\":1}}],[\"索引不支持顺序和范围查询\",{\"1\":{\"2757\":1,\"6426\":1}}],[\"索引是一种用于快速查询和检索数据的数据结构\",{\"1\":{\"2752\":1,\"6421\":1}}],[\"索引\",{\"0\":{\"2751\":1,\"6420\":1},\"1\":{\"2770\":1,\"2772\":1,\"3996\":1,\"6439\":1,\"6441\":1}}],[\"索引文件和数据文件是分离的\",{\"1\":{\"2750\":1,\"2767\":1,\"6419\":1,\"6436\":1}}],[\"索引实现不一样\",{\"1\":{\"2748\":1,\"6417\":1}}],[\"索引计算公式为i\",{\"1\":{\"927\":1,\"5444\":1}}],[\"期间发生了什么\",{\"0\":{\"2714\":1,\"7008\":1}}],[\"期望寻找到主机\",{\"1\":{\"7053\":1}}],[\"期望寻找到目标路由器的本子网接口的\",{\"1\":{\"7047\":1}}],[\"期望\",{\"1\":{\"2445\":1}}],[\"期望误差率\",{\"1\":{\"2182\":1}}],[\"期望插入元素数量\",{\"1\":{\"2182\":1}}],[\"期望插入数量越大\",{\"1\":{\"2179\":1}}],[\"期望插入数量\",{\"1\":{\"2177\":1}}],[\"键入大写的\",{\"1\":{\"3553\":1}}],[\"键入网址到网页显示\",{\"0\":{\"2714\":1,\"7008\":1}}],[\"键和值都可以为null\",{\"1\":{\"958\":1}}],[\"窗口的实现实际上是操作系统开辟的一个缓存空间\",{\"1\":{\"2652\":1}}],[\"窗口大小\",{\"1\":{\"2465\":1}}],[\"快捷\",{\"1\":{\"3474\":1}}],[\"快照中也可能含有机密信息\",{\"1\":{\"3572\":1}}],[\"快照文件\",{\"1\":{\"3149\":1,\"6805\":1}}],[\"快照持久化是\",{\"1\":{\"3146\":1,\"6802\":1}}],[\"快照\",{\"1\":{\"3141\":1,\"6797\":1}}],[\"快照读生成read\",{\"1\":{\"3056\":1}}],[\"快照读的实现是基于多版本并发控制\",{\"1\":{\"3024\":1}}],[\"快照读的前提是隔离级别不是串行级别\",{\"1\":{\"3024\":1}}],[\"快照读\",{\"1\":{\"3023\":1}}],[\"快速引入需要的依赖\",{\"1\":{\"4068\":1}}],[\"快速取出\",{\"1\":{\"2756\":1,\"6425\":1}}],[\"快速恢复算法如下\",{\"1\":{\"2702\":1}}],[\"快速恢复\",{\"1\":{\"2678\":1}}],[\"快速重传算法\",{\"1\":{\"2696\":1}}],[\"快速重传\",{\"1\":{\"2650\":1}}],[\"快表等\",{\"1\":{\"1672\":1}}],[\"倍的时间\",{\"1\":{\"2614\":1}}],[\"倍以上\",{\"1\":{\"637\":1}}],[\"触发超时重传机制\",{\"1\":{\"2606\":1}}],[\"半开状态\",{\"1\":{\"4522\":1,\"6139\":1}}],[\"半连接队列满了\",{\"1\":{\"2588\":1}}],[\"半连接队列打满\",{\"1\":{\"2588\":1}}],[\"半连接队列\",{\"1\":{\"2580\":1,\"2590\":1}}],[\"半初始化\",{\"1\":{\"1263\":1}}],[\"久而久之就会占满服务端的半连接队列\",{\"1\":{\"2578\":1}}],[\"抵达了服务端后\",{\"1\":{\"2546\":1}}],[\"序号\",{\"1\":{\"2527\":1,\"2528\":1}}],[\"序列化后的对象\",{\"1\":{\"3105\":1,\"6761\":1}}],[\"序列化存储相同内容的vector与arraylist\",{\"1\":{\"794\":1}}],[\"序列号在\",{\"1\":{\"2553\":1}}],[\"序列号是可靠传输的一个关键因素\",{\"1\":{\"2549\":1}}],[\"序列号和窗口大小称为连接\",{\"1\":{\"2461\":1}}],[\"序列号\",{\"1\":{\"2444\":1,\"2449\":1,\"2464\":1,\"2549\":1}}],[\"处处可达\",{\"1\":{\"4043\":1}}],[\"处于\",{\"1\":{\"2526\":1}}],[\"处理资源池可以是单个进程\",{\"1\":{\"6326\":1}}],[\"处理资源池负责处理事件\",{\"1\":{\"6323\":1}}],[\"处理可控异常\",{\"1\":{\"5651\":1}}],[\"处理不可控异常\",{\"1\":{\"5651\":1}}],[\"处理全局异常\",{\"1\":{\"5647\":1}}],[\"处理非事务请求\",{\"1\":{\"4602\":1}}],[\"处理\",{\"1\":{\"2520\":1,\"2709\":1,\"5648\":1,\"7064\":1}}],[\"处理完后\",{\"1\":{\"1840\":1,\"6372\":1}}],[\"处理发送失败\",{\"1\":{\"1518\":1}}],[\"处理方法中根据异常类型进行相应处理\",{\"1\":{\"1319\":1}}],[\"处理器返回一个模型视图\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"处理异常的小例子\",{\"1\":{\"488\":1,\"5375\":1}}],[\"号端口\",{\"1\":{\"2521\":2}}],[\"送给\",{\"1\":{\"2520\":1,\"2709\":1}}],[\"广播问询\",{\"1\":{\"7054\":1}}],[\"广播\",{\"1\":{\"4597\":1,\"6181\":1}}],[\"广播通信\",{\"1\":{\"2510\":1}}],[\"广泛兼容\",{\"1\":{\"2371\":1}}],[\"约为\",{\"1\":{\"2477\":1}}],[\"端口号\",{\"1\":{\"2520\":1,\"2709\":1,\"7076\":1}}],[\"端口\",{\"1\":{\"2469\":1,\"2471\":1}}],[\"源代码可以看出thread\",{\"1\":{\"5994\":1}}],[\"源代码等\",{\"1\":{\"4840\":1,\"7229\":1}}],[\"源码\",{\"1\":{\"3761\":1,\"5992\":1}}],[\"源码对这部分代码进行改动下\",{\"1\":{\"1287\":1,\"5629\":1}}],[\"源ip地址\",{\"1\":{\"2712\":1}}],[\"源端口\",{\"1\":{\"2469\":1,\"2712\":1}}],[\"源地址\",{\"1\":{\"2468\":1}}],[\"报文封装成链路层帧\",{\"1\":{\"7035\":1}}],[\"报文就会丢弃\",{\"1\":{\"2588\":1}}],[\"报文时\",{\"1\":{\"2583\":1,\"2650\":1}}],[\"报文的序列号都是一样的\",{\"1\":{\"2571\":1,\"2573\":1}}],[\"报文的时候\",{\"1\":{\"2553\":1}}],[\"报文被对方接收\",{\"1\":{\"2563\":1}}],[\"报文在网络中阻塞了\",{\"1\":{\"2556\":1}}],[\"报文在网络中阻塞\",{\"1\":{\"2555\":1}}],[\"报文已被服务端成功接收\",{\"1\":{\"2553\":1}}],[\"报文中的序列号知道\",{\"1\":{\"2552\":1}}],[\"报文给客户端\",{\"1\":{\"2543\":1}}],[\"报文早到达了服务端\",{\"1\":{\"2543\":1}}],[\"报文还被网络阻塞了\",{\"1\":{\"2540\":1}}],[\"报文后\",{\"1\":{\"2528\":1,\"2545\":1,\"2585\":1,\"2598\":1}}],[\"报文发送给服务端\",{\"1\":{\"2527\":1}}],[\"报文首部需要有长度字段以供计算\",{\"1\":{\"2515\":1}}],[\"报文会自动丢弃\",{\"1\":{\"2459\":1}}],[\"报文没有收到的时候\",{\"1\":{\"2459\":1}}],[\"报文是\",{\"1\":{\"2459\":1}}],[\"报文\",{\"1\":{\"2459\":2,\"2527\":1,\"2540\":2,\"2543\":1,\"2544\":1,\"2547\":1,\"2555\":2,\"2556\":1,\"2571\":1,\"2573\":1,\"2574\":2,\"2576\":1,\"2578\":3,\"2584\":1,\"2594\":1,\"2597\":1,\"2606\":1,\"2608\":1,\"2610\":1,\"2612\":1,\"2614\":2,\"2637\":1,\"2720\":1,\"7015\":1}}],[\"报告启动异常\",{\"1\":{\"1391\":1}}],[\"成为正式标准\",{\"1\":{\"6989\":1}}],[\"成为一名软件架构师\",{\"1\":{\"4108\":1}}],[\"成熟的产品\",{\"1\":{\"4791\":1}}],[\"成功的将\",{\"1\":{\"4895\":1}}],[\"成功请求数等运行指标记录下来\",{\"1\":{\"4530\":1,\"6147\":1}}],[\"成功则返回\",{\"1\":{\"3654\":1,\"3655\":1,\"3657\":1,\"5897\":1,\"5898\":1,\"5900\":1}}],[\"成功返回是在三次握手成功之后\",{\"1\":{\"2640\":1}}],[\"成多个的\",{\"1\":{\"2459\":1}}],[\"成年人的崩溃如此简单\",{\"1\":{\"506\":1,\"5394\":1}}],[\"累加\",{\"1\":{\"2444\":1}}],[\"攻击者就可以通过穷举法反向查询出md5值\",{\"1\":{\"5054\":1}}],[\"攻击者创建了一个叫彩虹表的东西\",{\"1\":{\"5054\":1}}],[\"攻击方式\",{\"1\":{\"2589\":1}}],[\"攻击方式最直接的表现就会把\",{\"1\":{\"2588\":1}}],[\"攻击\",{\"0\":{\"2577\":2},\"1\":{\"2418\":2}}],[\"告诉框架扫描所有使用注解\",{\"1\":{\"4546\":1}}],[\"告诉本地\",{\"1\":{\"2395\":1,\"7099\":1}}],[\"告诉客户端\",{\"1\":{\"2217\":1}}],[\"老规矩\",{\"1\":{\"6382\":1}}],[\"老子不去\",{\"1\":{\"4307\":1,\"7132\":1}}],[\"老子是来面试的\",{\"1\":{\"4287\":1,\"7112\":1}}],[\"老三\",{\"1\":{\"2394\":1,\"7098\":1}}],[\"老二\",{\"1\":{\"2392\":1,\"7096\":1}}],[\"老大\",{\"1\":{\"2390\":1,\"7094\":1}}],[\"老年代内存使用情况及\",{\"1\":{\"3607\":1}}],[\"老年代剩余空间\",{\"1\":{\"392\":1}}],[\"老年代空间不足\",{\"1\":{\"390\":1}}],[\"老年代的主要使用标记清除或者标记整理算法\",{\"1\":{\"385\":1}}],[\"老年代的内存空间应该要比年轻代更大\",{\"1\":{\"225\":1}}],[\"老年代使用\",{\"1\":{\"339\":1}}],[\"老年代地址是连续的\",{\"1\":{\"283\":1}}],[\"老年代垃圾收集称为\",{\"1\":{\"236\":1}}],[\"老年代\",{\"1\":{\"225\":1,\"3603\":1}}],[\"权限等数据编码进jwt\",{\"1\":{\"4057\":1}}],[\"权限有关\",{\"1\":{\"3491\":1}}],[\"权限\",{\"1\":{\"3478\":1,\"3510\":1}}],[\"权限控制等\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"权威\",{\"1\":{\"2387\":1,\"2395\":1,\"7088\":1,\"7099\":1}}],[\"顶级域名服务器说\",{\"1\":{\"2393\":1,\"7097\":1}}],[\"顶级域名服务器地址给你\",{\"1\":{\"2391\":1,\"7095\":1}}],[\"顶级域\",{\"1\":{\"2386\":1,\"7084\":1,\"7087\":1}}],[\"许多老旧系统需要升级才能使用\",{\"1\":{\"2369\":1}}],[\"许多网站其实用不上http2带来的全部优势\",{\"1\":{\"2368\":1}}],[\"复合注解\",{\"1\":{\"4123\":1}}],[\"复合索引\",{\"1\":{\"2817\":1,\"4174\":1,\"6489\":1}}],[\"复用在一条\",{\"1\":{\"2362\":1}}],[\"复制完之后他们就是隔开的\",{\"1\":{\"5111\":1}}],[\"复制文件\",{\"1\":{\"3404\":1}}],[\"复制\",{\"1\":{\"381\":1,\"3292\":1,\"6081\":1}}],[\"复制算法\",{\"1\":{\"338\":1}}],[\"未能找到目标路由器的本子网接口的\",{\"1\":{\"7049\":1}}],[\"未提交事务修改过的数据\",{\"1\":{\"2981\":1,\"6653\":1}}],[\"未增加的情况\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"未经压缩就发送\",{\"1\":{\"2352\":1}}],[\"未来数据定时刷新\",{\"1\":{\"4889\":1,\"4895\":2}}],[\"未来\",{\"1\":{\"1726\":1,\"1734\":1}}],[\"短短两年过去了\",{\"1\":{\"6978\":1,\"7001\":1}}],[\"短时间内\",{\"1\":{\"6139\":1}}],[\"短时间内有恢复迹象断路器会将部分请求发给该服务\",{\"1\":{\"4522\":1}}],[\"短连接造成的性能开销\",{\"1\":{\"2349\":1}}],[\"短信通知必须要有顺序\",{\"1\":{\"1587\":1}}],[\"密切关注新兴技术趋势\",{\"1\":{\"4109\":1}}],[\"密钥的管理和分发非常困难\",{\"1\":{\"5100\":1}}],[\"密钥持有者用私有密钥对收到的信息进行解密\",{\"1\":{\"5094\":1}}],[\"密钥越大加密强度越高\",{\"1\":{\"4012\":1}}],[\"密钥协商算法\",{\"1\":{\"2316\":2}}],[\"密码\",{\"1\":{\"5074\":1,\"5080\":1}}],[\"密码为123456\",{\"1\":{\"5041\":1}}],[\"密码以及验证码校验正确的话\",{\"1\":{\"4811\":1,\"7208\":1}}],[\"密码以及验证码用于登陆系统\",{\"1\":{\"4810\":1,\"7207\":1}}],[\"密码学\",{\"0\":{\"4008\":1}}],[\"密码加密的文章\",{\"0\":{\"23\":1,\"5136\":1}}],[\"密集型任务的应用中\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"密集型任务\",{\"1\":{\"3897\":1,\"3898\":1,\"6044\":1,\"6045\":1}}],[\"过期的数据的删除策略了解么\",{\"0\":{\"6828\":1}}],[\"过期时间\",{\"1\":{\"4087\":1}}],[\"过程\",{\"1\":{\"4538\":1,\"6154\":1}}],[\"过段时间讯飞大模型会升级\",{\"1\":{\"4423\":1}}],[\"过度切换\",{\"1\":{\"3908\":1,\"6055\":1}}],[\"过高\",{\"1\":{\"3544\":1}}],[\"过高的时候\",{\"1\":{\"3540\":1}}],[\"过滤掉不健康的\",{\"1\":{\"3216\":1}}],[\"过滤掉不符合条件的记录\",{\"1\":{\"2821\":1,\"6493\":1}}],[\"过滤器是对单个服务而言\",{\"1\":{\"4517\":1,\"6134\":1}}],[\"过滤器\",{\"1\":{\"854\":1,\"5484\":1}}],[\"过多的\",{\"1\":{\"2622\":1}}],[\"过多有什么危害\",{\"0\":{\"2621\":1},\"1\":{\"2428\":1}}],[\"过去被第三方截获的所有\",{\"1\":{\"2316\":1}}],[\"握手流程也会不一样的\",{\"1\":{\"2316\":1}}],[\"握手阶段\",{\"1\":{\"2315\":1,\"2316\":1}}],[\"证书权威机构\",{\"1\":{\"2309\":1}}],[\"好多人排队\",{\"1\":{\"4441\":1}}],[\"好了\",{\"1\":{\"4417\":1}}],[\"好像蛮力击穿一样\",{\"1\":{\"4148\":1}}],[\"好比上班的路上塞车\",{\"1\":{\"2304\":1}}],[\"好羞羞\",{\"1\":{\"524\":1,\"5412\":1}}],[\"队头阻塞问题\",{\"1\":{\"2366\":1}}],[\"队头阻塞的问题\",{\"1\":{\"2365\":1}}],[\"队头阻塞\",{\"1\":{\"2302\":1,\"2304\":1,\"2365\":1,\"7073\":1}}],[\"队头堵塞\",{\"1\":{\"2299\":1}}],[\"队列里面除了第一个线程\",{\"1\":{\"3841\":1,\"5957\":1}}],[\"队列结构如下图所示\",{\"1\":{\"3644\":1,\"5885\":1}}],[\"队列是一个虚拟的双向队列\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"队列锁\",{\"1\":{\"3642\":1,\"5883\":1}}],[\"队列中写锁获取优先级高于读锁\",{\"1\":{\"2903\":1,\"6575\":1}}],[\"队列\",{\"0\":{\"641\":1,\"5452\":1},\"1\":{\"606\":1,\"2580\":1,\"2581\":1,\"2583\":1,\"2585\":2,\"2586\":1,\"4598\":1,\"6182\":1}}],[\"减轻团队的成本\",{\"1\":{\"4498\":1,\"6126\":1}}],[\"减轻了服务器端的负载\",{\"1\":{\"2293\":1}}],[\"减少系统中的重复代码\",{\"1\":{\"4180\":1}}],[\"减少数据库的压力\",{\"1\":{\"3269\":1,\"6874\":1}}],[\"减少回表次数\",{\"1\":{\"2821\":1,\"6493\":1}}],[\"减少了网络开销\",{\"1\":{\"7068\":1}}],[\"减少了网络延迟和提高了性能\",{\"1\":{\"7066\":1}}],[\"减少了传输的数据量和带宽消耗\",{\"1\":{\"7067\":1}}],[\"减少了新人的学习成本\",{\"1\":{\"4476\":1,\"6109\":1}}],[\"减少了重复代码\",{\"1\":{\"4026\":1}}],[\"减少了\",{\"1\":{\"1807\":1,\"6314\":1}}],[\"减少了内核和用户空间大量的数据拷贝和内存分配\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"减少垃圾回收开销\",{\"1\":{\"274\":1}}],[\"早期\",{\"1\":{\"2292\":1}}],[\"眼没了\",{\"1\":{\"2287\":1}}],[\"网上文章不少说\",{\"1\":{\"6270\":1}}],[\"网上有这样一个例子\",{\"1\":{\"3771\":1}}],[\"网关过滤器解析token\",{\"1\":{\"4813\":1,\"4832\":1,\"7210\":1,\"7221\":1}}],[\"网关过滤器接收用户携带的token\",{\"1\":{\"4812\":1,\"4831\":1,\"7209\":1,\"7220\":1}}],[\"网关过滤器进行判断\",{\"1\":{\"4810\":1,\"4829\":1,\"7207\":1,\"7218\":1}}],[\"网关搭建\",{\"0\":{\"7216\":1},\"1\":{\"4656\":1,\"7175\":1}}],[\"网关是对所有服务的请求进行分析过滤\",{\"1\":{\"4517\":1,\"6134\":1}}],[\"网关与过滤器有什么区别\",{\"1\":{\"4516\":1,\"6133\":1}}],[\"网站\",{\"1\":{\"4003\":1}}],[\"网页中找到我们想要的有价值的信息呢\",{\"1\":{\"3581\":1}}],[\"网页的形式进行展示\",{\"1\":{\"3574\":1}}],[\"网页上植入垃圾广告\",{\"1\":{\"2287\":1}}],[\"网络层\",{\"1\":{\"7034\":1}}],[\"网络层之间加入了\",{\"1\":{\"2306\":1}}],[\"网络分区\",{\"1\":{\"4643\":1,\"6216\":1}}],[\"网络协议栈是在内核中实现的协议和算法的集合\",{\"1\":{\"3458\":1}}],[\"网络协议栈\",{\"1\":{\"3457\":1}}],[\"网络协议栈等重要任务\",{\"1\":{\"3443\":1}}],[\"网络连接等\",{\"1\":{\"3431\":1}}],[\"网络就会慢慢进入了拥塞的状况了\",{\"1\":{\"2688\":1}}],[\"网络中可能存在来自发送方的数据包\",{\"1\":{\"2614\":1}}],[\"网络传输\",{\"1\":{\"2350\":1}}],[\"网络传输成为了可能\",{\"1\":{\"2296\":1}}],[\"网络服务正忙\",{\"1\":{\"2212\":1}}],[\"网络爬虫的网址去重\",{\"1\":{\"2161\":1}}],[\"网络系统\",{\"0\":{\"1765\":1}}],[\"网络带宽有限\",{\"1\":{\"1576\":1}}],[\"抓包都可以直接肉眼查看\",{\"1\":{\"2281\":1}}],[\"带来的效益是一样的\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"带来非常大的开销\",{\"1\":{\"3692\":1,\"5861\":1}}],[\"带上\",{\"1\":{\"2279\":1}}],[\"带参数的异步调用\",{\"1\":{\"1375\":1}}],[\"问询到该\",{\"1\":{\"7049\":1}}],[\"问问\",{\"1\":{\"4597\":1,\"6181\":1}}],[\"问异步调用后\",{\"1\":{\"4319\":1,\"7144\":1}}],[\"问了jdbc的防止sql注入\",{\"1\":{\"4305\":1,\"7130\":1}}],[\"问了三大范式\",{\"1\":{\"4304\":1,\"7129\":1}}],[\"问了建立索引的原则\",{\"1\":{\"4303\":1,\"7128\":1}}],[\"问了\",{\"1\":{\"4302\":1,\"7127\":1}}],[\"问了mysql的存储引擎\",{\"1\":{\"4301\":1,\"7126\":1}}],[\"问了遇到的最大难题\",{\"0\":{\"3935\":1}}],[\"问c\",{\"1\":{\"4299\":1,\"7124\":1}}],[\"问什么是\",{\"1\":{\"4297\":1,\"4298\":1,\"7122\":1,\"7123\":1}}],[\"问string\",{\"1\":{\"4300\":1,\"7125\":1}}],[\"问swagger用过么\",{\"1\":{\"4296\":1,\"7121\":1}}],[\"问springboot\",{\"1\":{\"4295\":1,\"7120\":1}}],[\"问springboot的起步依赖starter有哪些以及作用\",{\"1\":{\"4294\":1,\"7119\":1}}],[\"问springboot的核心配置文件以及它们的区别\",{\"1\":{\"4293\":1,\"7118\":1}}],[\"问springboot异常怎么处理\",{\"1\":{\"4292\":1,\"7117\":1}}],[\"问es了解吗\",{\"1\":{\"4291\":1,\"7116\":1}}],[\"问kafka的分区\",{\"1\":{\"4290\":1,\"7115\":1}}],[\"问我是不是数学好\",{\"1\":{\"4444\":1}}],[\"问我同步和异步怎么实现的\",{\"1\":{\"4318\":1,\"7143\":1}}],[\"问我生成器用过没\",{\"1\":{\"4314\":1,\"7139\":1}}],[\"问我熟悉哪些框架\",{\"1\":{\"4289\":1,\"7114\":1}}],[\"问我想听听你对加班什么看法\",{\"1\":{\"4284\":1,\"7109\":1}}],[\"问你的期望薪资多少\",{\"1\":{\"4283\":1,\"7108\":1}}],[\"问你能接受加班吗\",{\"1\":{\"4282\":1,\"7107\":1}}],[\"问啥时候能来实习\",{\"1\":{\"4281\":1,\"7106\":1}}],[\"问\",{\"1\":{\"2389\":1,\"7093\":1}}],[\"问就是酸爽\",{\"1\":{\"2276\":1}}],[\"问题的利器\",{\"1\":{\"6269\":1}}],[\"问题的线程状态一模一样\",{\"1\":{\"3624\":1}}],[\"问题体现\",{\"1\":{\"5607\":1}}],[\"问题描述\",{\"1\":{\"4898\":1,\"7268\":1}}],[\"问题思路\",{\"1\":{\"4870\":1,\"7248\":1}}],[\"问题都记不太清\",{\"1\":{\"4441\":1}}],[\"问题不大\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"问题二\",{\"1\":{\"1597\":1,\"3921\":1,\"6071\":1}}],[\"问题一\",{\"1\":{\"1595\":1,\"3917\":1,\"6065\":1}}],[\"问题\",{\"0\":{\"3684\":1,\"5853\":1},\"1\":{\"1273\":1,\"3538\":1,\"3701\":1,\"5615\":1,\"5870\":1,\"6282\":1,\"7073\":1}}],[\"问题出在哪里\",{\"0\":{\"578\":1}}],[\"别问\",{\"1\":{\"2276\":1}}],[\"吃鸡\",{\"1\":{\"2269\":1}}],[\"刷贴吧到购物\",{\"1\":{\"2269\":1}}],[\"刷新容器\",{\"1\":{\"1388\":1}}],[\"灵活在于\",{\"1\":{\"6324\":1}}],[\"灵活和易于扩展\",{\"1\":{\"2260\":1,\"2263\":1}}],[\"灵活性更高\",{\"1\":{\"3954\":1}}],[\"灵活性不同\",{\"1\":{\"3953\":1}}],[\"灵活性\",{\"1\":{\"887\":1,\"5505\":1}}],[\"唯一的写请求处理者\",{\"1\":{\"4632\":1,\"6175\":1}}],[\"唯一索引的属性列不能出现重复的数据\",{\"1\":{\"2791\":1,\"6462\":1}}],[\"唯一索引也是一种约束\",{\"1\":{\"2791\":1,\"6462\":1}}],[\"唯一索引\",{\"1\":{\"2780\":1,\"2790\":1,\"2791\":1,\"4169\":1,\"6449\":1,\"6460\":1,\"6462\":1}}],[\"唯一确认的\",{\"1\":{\"2712\":1}}],[\"唯一标识\",{\"1\":{\"2250\":1,\"2253\":1,\"2257\":1}}],[\"唯一标识响应资源\",{\"1\":{\"2244\":1}}],[\"唯独是\",{\"1\":{\"1283\":1,\"5625\":1}}],[\"走缓存\",{\"1\":{\"2242\":1}}],[\"小羊看来网站上大家的讨论\",{\"1\":{\"6991\":1}}],[\"小羊在昨天2023\",{\"1\":{\"5088\":1}}],[\"小概率会误判\",{\"1\":{\"3255\":1,\"6860\":1}}],[\"小于该\",{\"1\":{\"3032\":1,\"6698\":1}}],[\"小于这个\",{\"1\":{\"3032\":1,\"3034\":1,\"6698\":1,\"6701\":1}}],[\"小贴纸\",{\"1\":{\"2279\":2}}],[\"小\",{\"1\":{\"2242\":1}}],[\"小结\",{\"1\":{\"2168\":1}}],[\"声明式服务调用本质上就是ribbon+hystrix\",{\"1\":{\"4510\":1,\"6130\":1}}],[\"声明\",{\"1\":{\"2242\":1}}],[\"头字段\",{\"1\":{\"7064\":2}}],[\"头字段等每个组成要求都没有被固定死\",{\"1\":{\"2264\":1}}],[\"头\",{\"1\":{\"7064\":1}}],[\"头里有一个字段叫\",{\"1\":{\"2653\":1}}],[\"头格式有哪些\",{\"0\":{\"2442\":1},\"1\":{\"2401\":1}}],[\"头信息和数据体都是二进制\",{\"1\":{\"2361\":1}}],[\"头部之后\",{\"1\":{\"2568\":1}}],[\"头部则没有\",{\"1\":{\"2514\":1}}],[\"头部长度则是不会变化的\",{\"1\":{\"2513\":1}}],[\"头部有\",{\"1\":{\"2512\":1,\"2514\":1}}],[\"头部没有\",{\"1\":{\"2512\":1}}],[\"头部格式\",{\"1\":{\"2480\":1}}],[\"头部压缩\",{\"1\":{\"2360\":1,\"7068\":1}}],[\"头部信息也是\",{\"1\":{\"2262\":1}}],[\"头部的\",{\"1\":{\"2236\":1}}],[\"头部加上新的\",{\"1\":{\"2257\":1}}],[\"头部加上\",{\"1\":{\"2234\":1,\"2250\":1,\"2253\":1}}],[\"头节点和尾节点\",{\"1\":{\"752\":1}}],[\"彻底避免浏览器发请求\",{\"1\":{\"2223\":1}}],[\"幂等\",{\"1\":{\"2221\":1}}],[\"破坏四个条件\",{\"1\":{\"4176\":1}}],[\"破坏\",{\"1\":{\"2220\":1}}],[\"破坏了封装性\",{\"1\":{\"620\":1}}],[\"协调各个微服务\",{\"1\":{\"4489\":1,\"6122\":1}}],[\"协调者选择其中的一个消费者来执行这个消费组的分区分配并将分配结果转发给消费组内所有的消费者\",{\"1\":{\"1470\":1,\"6918\":1}}],[\"协商同步的过程\",{\"1\":{\"3232\":1}}],[\"协商缓存这两个字段都需要配合强制缓存中\",{\"1\":{\"2248\":1}}],[\"协商缓存可以基于两种头部来实现\",{\"1\":{\"2239\":1}}],[\"协议运行在\",{\"1\":{\"7078\":1}}],[\"协议实现的\",{\"1\":{\"7071\":1}}],[\"协议实现可靠传输\",{\"1\":{\"2490\":1}}],[\"协议就是解决这一问题的\",{\"1\":{\"7034\":1}}],[\"协议就会退出恢复模式\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"协议就会进入恢复模式并选举产生新的\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"协议工作时有一个大前提\",{\"1\":{\"7027\":1}}],[\"协议解决了\",{\"1\":{\"7026\":1}}],[\"协议中对\",{\"1\":{\"6178\":1}}],[\"协议之前\",{\"1\":{\"6174\":1}}],[\"协议包括两种基本的模式\",{\"1\":{\"6168\":1}}],[\"协议引入了恢复模式来处理这一问题\",{\"1\":{\"4608\":1}}],[\"协议最大的区别就是不能终止事务\",{\"1\":{\"4608\":1}}],[\"协议两种基本的模式\",{\"0\":{\"6167\":1},\"1\":{\"4595\":1}}],[\"协议是一个广播问询\",{\"1\":{\"7043\":1}}],[\"协议是如何处理写请求的\",{\"1\":{\"4596\":1,\"6180\":1}}],[\"协议是为分布式协调服务\",{\"1\":{\"4593\":1,\"6166\":1}}],[\"协议是基于\",{\"1\":{\"2290\":1,\"2358\":1,\"2515\":1}}],[\"协议介绍\",{\"0\":{\"4592\":1,\"6165\":1}}],[\"协议全称\",{\"1\":{\"4582\":1}}],[\"协议的网站在搜索结果中可能会被优先显示\",{\"1\":{\"7079\":1}}],[\"协议的网站\",{\"1\":{\"7079\":1}}],[\"协议的特性\",{\"1\":{\"7072\":1,\"7073\":1}}],[\"协议的服务器启动后加入到集群中时\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"协议的\",{\"1\":{\"4563\":1,\"6163\":1,\"6989\":1}}],[\"协议的通信双方\",{\"1\":{\"2549\":1}}],[\"协议在建立连接的时候通常要协商双方的\",{\"1\":{\"2569\":1}}],[\"协议号\",{\"1\":{\"2520\":1,\"2709\":1}}],[\"协议发展的\",{\"1\":{\"2515\":1}}],[\"协议传输时\",{\"1\":{\"2459\":1}}],[\"协议可以一个主机同时向多个主机发送消息\",{\"1\":{\"2457\":1}}],[\"协议来获取主机\",{\"1\":{\"7035\":1}}],[\"协议来实现可靠的传输\",{\"1\":{\"7071\":1}}],[\"协议来实现\",{\"1\":{\"4604\":1}}],[\"协议来实现分布式数据一致性\",{\"1\":{\"4593\":1,\"6166\":1}}],[\"协议来负责\",{\"1\":{\"2452\":1}}],[\"协议来传输数据的\",{\"1\":{\"2366\":1}}],[\"协议会帮你消除重复的部分\",{\"1\":{\"2360\":1}}],[\"协议本身到目前为止还是没有任何漏洞的\",{\"1\":{\"2345\":1}}],[\"协议版本\",{\"1\":{\"2321\":1,\"2326\":1}}],[\"协议建立的详细流程\",{\"1\":{\"2317\":1}}],[\"协议基本流程\",{\"1\":{\"2311\":1}}],[\"协议需要向\",{\"1\":{\"2309\":1}}],[\"协议\",{\"0\":{\"2451\":1},\"1\":{\"2267\":2,\"2343\":1,\"2402\":1,\"2490\":1,\"7026\":1,\"7049\":1,\"7054\":1,\"7078\":1}}],[\"协议里有优缺点一体的双刃剑\",{\"1\":{\"2271\":1}}],[\"协议里的各类请求方法\",{\"1\":{\"2264\":1}}],[\"协议里\",{\"1\":{\"2220\":1}}],[\"首部\",{\"1\":{\"2529\":1,\"2594\":1}}],[\"首部的\",{\"1\":{\"2527\":1,\"2528\":2}}],[\"首部长度\",{\"1\":{\"2512\":2}}],[\"首部长度较长\",{\"1\":{\"2495\":1}}],[\"首部只有\",{\"1\":{\"2496\":1}}],[\"首部在没有使用\",{\"1\":{\"2495\":1}}],[\"首部开销\",{\"1\":{\"2494\":1}}],[\"首部信息越多延迟越大\",{\"1\":{\"2352\":1}}],[\"首部字段的值为\",{\"1\":{\"2216\":1}}],[\"首先很感谢您给我的面试机会\",{\"1\":{\"5024\":1,\"7288\":1}}],[\"首先执行第一个拦截器的\",{\"1\":{\"4946\":1}}],[\"首先在mybatis中需要配置sql\",{\"1\":{\"4747\":1}}],[\"首先也会给自己投票\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"首先毫无疑问的是剩下的两个\",{\"1\":{\"4619\":1,\"6192\":1}}],[\"首先它会比较\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"首先是mentor让写了用java+kafka+线程池做一个爬虫demo\",{\"1\":{\"4120\":1}}],[\"首先切换到类的对应目录执行\",{\"1\":{\"3736\":1,\"5967\":1}}],[\"首先将预期值a和内存地址v的实际值比较\",{\"1\":{\"3672\":1,\"5838\":1}}],[\"首先查看是否存在后继节点\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"首先找到该接口\",{\"1\":{\"3622\":1}}],[\"首先确保本地仓库与远程之间是连同的\",{\"1\":{\"3382\":1}}],[\"首先利用命令touch\",{\"1\":{\"3379\":1}}],[\"首先提供\",{\"1\":{\"3300\":1,\"6086\":1}}],[\"首先到主库执行\",{\"1\":{\"3230\":1}}],[\"首先要理解两个概念\",{\"1\":{\"3203\":1}}],[\"首先要知道他应该保存在这个链表数组中的哪个位置\",{\"1\":{\"1008\":1}}],[\"首先比较db\",{\"1\":{\"3046\":1}}],[\"首先按照\",{\"1\":{\"2766\":1,\"6435\":1}}],[\"首先该应答报文\",{\"1\":{\"2529\":1}}],[\"首先服务端也随机初始化自己的序号\",{\"1\":{\"2528\":1}}],[\"首先通过索引定位到对应页\",{\"1\":{\"4202\":1}}],[\"首先通过子类判断是否获取了锁\",{\"1\":{\"3647\":1,\"5890\":1}}],[\"首先通过浏览器或者操作系统中的\",{\"1\":{\"2331\":1}}],[\"首先通过类加载器\",{\"1\":{\"181\":1,\"5290\":1}}],[\"首先会先检查强制缓存是否过期\",{\"1\":{\"2251\":1}}],[\"首先对分区按照分区id进行排序\",{\"1\":{\"1472\":1,\"6920\":1}}],[\"首先对各个\",{\"1\":{\"379\":1}}],[\"首先计算元素的hashcode值\",{\"1\":{\"737\":1}}],[\"首先\",{\"1\":{\"444\":1,\"693\":1,\"807\":1,\"1009\":1,\"1044\":1,\"1105\":1,\"1799\":1,\"2319\":1,\"2898\":1,\"5337\":1,\"5460\":1,\"6304\":1,\"6570\":1}}],[\"机器id\",{\"1\":{\"4976\":1}}],[\"机器资源充足\",{\"1\":{\"2121\":1}}],[\"机制\",{\"1\":{\"2216\":1,\"5934\":1}}],[\"长连接\",{\"1\":{\"2216\":1,\"2291\":1}}],[\"长度\",{\"1\":{\"1203\":1,\"5555\":1}}],[\"敬请期待\",{\"1\":{\"2210\":1}}],[\"准确来说这里应该布叫谷鸟过滤器\",{\"1\":{\"2178\":1}}],[\"准备了一个\",{\"1\":{\"4598\":1,\"6182\":1}}],[\"准备一些容器属性值等\",{\"1\":{\"1387\":1}}],[\"准备环境变量\",{\"1\":{\"1383\":1}}],[\"准备\",{\"1\":{\"409\":1,\"5298\":1}}],[\"误判率\",{\"1\":{\"2177\":1}}],[\"误判率越低\",{\"1\":{\"2169\":1,\"2179\":1}}],[\"$\",{\"1\":{\"2177\":2,\"2185\":2,\"3380\":1}}],[\"出来得太快了\",{\"1\":{\"6994\":1}}],[\"出来之前大家用\",{\"1\":{\"3361\":1}}],[\"出去呀\",{\"1\":{\"6181\":1}}],[\"出去\",{\"1\":{\"4597\":1}}],[\"出于容错的考虑\",{\"1\":{\"4151\":1}}],[\"出现顺序错乱的场景\",{\"0\":{\"6959\":1}}],[\"出现问题的时候我们势必需要重新选举\",{\"1\":{\"4613\":1,\"6186\":1}}],[\"出现问题后不会导致整个系统都不可用\",{\"1\":{\"3619\":1}}],[\"出现冲突后就会开始自旋操作\",{\"1\":{\"3692\":1,\"5861\":1}}],[\"出现误判的可能性是较大的\",{\"1\":{\"2165\":1}}],[\"出一个子进程\",{\"1\":{\"3151\":1,\"6807\":1}}],[\"出队效率比较高\",{\"1\":{\"771\":1}}],[\"概述\",{\"0\":{\"2147\":1}}],[\"概念\",{\"1\":{\"510\":1,\"2362\":1,\"5398\":1}}],[\"概念啥的太虚幻我就不说了\",{\"1\":{\"504\":1,\"5391\":1}}],[\"布谷鸟过滤器\",{\"1\":{\"2177\":1,\"2184\":1}}],[\"布隆过滤器说某个元素不在\",{\"1\":{\"3255\":1,\"6860\":1}}],[\"布隆过滤器说某个元素存在\",{\"1\":{\"3255\":1,\"6860\":1}}],[\"布隆过滤器是一个非常神奇的数据结构\",{\"1\":{\"3253\":1,\"6858\":1}}],[\"布隆过滤器是非常节省空间的\",{\"1\":{\"2154\":1}}],[\"布隆过滤器会根据我们填入的这两个参数计算出二进制数组的大小以及hash函数的个数\",{\"1\":{\"2171\":1}}],[\"布隆过滤器有着初始的存储空间\",{\"1\":{\"2171\":1}}],[\"布隆过滤器提供两个参数\",{\"1\":{\"2171\":1}}],[\"布隆过滤器不存储元素本身\",{\"1\":{\"2153\":1}}],[\"布隆过滤器的大小也就越大\",{\"1\":{\"2179\":1}}],[\"布隆过滤器的大小就越大\",{\"1\":{\"2179\":1}}],[\"布隆过滤器的原理\",{\"0\":{\"2164\":1}}],[\"布隆过滤器的缺点\",{\"1\":{\"2155\":1}}],[\"布隆过滤器的优点\",{\"1\":{\"2151\":1}}],[\"布隆过滤器的基本思想是\",{\"1\":{\"2149\":1}}],[\"布隆过滤器\",{\"0\":{\"2145\":1,\"2146\":1},\"1\":{\"2148\":1,\"3252\":1,\"6857\":1}}],[\"布局与功能禁用\",{\"0\":{\"9\":1,\"5122\":1}}],[\"排序并且缓存数据\",{\"1\":{\"4999\":1}}],[\"排序时直接比较数值大小即可\",{\"1\":{\"4116\":1}}],[\"排序和索引操作也会变得更加高效\",{\"1\":{\"4116\":1}}],[\"排查full\",{\"0\":{\"3990\":1}}],[\"排查思路\",{\"0\":{\"3584\":1}}],[\"排查cpu占用过高\",{\"0\":{\"3511\":1}}],[\"排查是否存在其他组件比如数据库连接\",{\"1\":{\"2135\":1}}],[\"排他锁\",{\"1\":{\"3022\":1}}],[\"排行榜\",{\"1\":{\"4163\":1}}],[\"排行榜的实现\",{\"0\":{\"2056\":1,\"5761\":1}}],[\"排行版的实现\",{\"1\":{\"2057\":1,\"5762\":1}}],[\"考虑分步查出\",{\"1\":{\"2121\":1}}],[\"考虑调大jvm内存\",{\"1\":{\"2121\":1}}],[\"考虑treemap\",{\"1\":{\"1087\":1}}],[\"死锁\",{\"0\":{\"3627\":1}}],[\"死锁只有同时满足以下四个条件才会发生\",{\"1\":{\"1991\":1}}],[\"死循环的问题即可\",{\"1\":{\"2121\":1}}],[\"突然挂掉了\",{\"1\":{\"4675\":1,\"7194\":1}}],[\"突然电话断了\",{\"1\":{\"4318\":1,\"7143\":1}}],[\"突然说到mysqlb+树用到了红黑树\",{\"1\":{\"4310\":1,\"7135\":1}}],[\"突然有一天发现一个网页要10s左右才能打开\",{\"0\":{\"4218\":1}}],[\"突然而来的高并发\",{\"1\":{\"2116\":1}}],[\"突破了\",{\"1\":{\"1771\":1}}],[\"休眠500毫秒\",{\"1\":{\"2111\":1}}],[\"休眠一定的时间再读取下一个区块数据\",{\"1\":{\"2108\":1}}],[\"示例\",{\"1\":{\"3517\":1}}],[\"示例代码\",{\"1\":{\"2110\":1}}],[\"示意图如下\",{\"1\":{\"2021\":1}}],[\"科大讯飞面经\",{\"0\":{\"4207\":1}}],[\"科大讯飞\",{\"0\":{\"2082\":1,\"2103\":1,\"2114\":1,\"4395\":1}}],[\"定理\",{\"1\":{\"6211\":1}}],[\"定理指出对于一个分布式系统来说\",{\"1\":{\"4638\":1}}],[\"定时任务\",{\"1\":{\"4895\":1}}],[\"定时任务这种\",{\"0\":{\"2079\":1,\"5784\":1}}],[\"定时刷新\",{\"1\":{\"4669\":1,\"7188\":1}}],[\"定期删除+惰性\",{\"1\":{\"3175\":1,\"6833\":1}}],[\"定期删除对内存更加友好\",{\"1\":{\"3175\":1,\"6833\":1}}],[\"定期删除\",{\"1\":{\"3174\":1,\"6832\":1}}],[\"定格某一时刻的风景\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"定位死锁的思路很简单\",{\"1\":{\"3628\":1}}],[\"定位这种问题的思路如下\",{\"1\":{\"3622\":1,\"3625\":1}}],[\"定位大量存在的相同的\",{\"1\":{\"3540\":1}}],[\"定位到索引的节点\",{\"1\":{\"2799\":1,\"6471\":1}}],[\"定位到服务器后\",{\"1\":{\"2123\":1}}],[\"定位oom报错\",{\"0\":{\"2122\":1}}],[\"定义这个的原因也是为了顺序性\",{\"1\":{\"6184\":1}}],[\"定义业务层接口\",{\"1\":{\"4995\":1}}],[\"定义的feign客户端\",{\"1\":{\"4546\":1}}],[\"定义person类\",{\"1\":{\"4272\":1}}],[\"定义与静态代理相同的接口ihello和实现类helloimpl\",{\"1\":{\"3973\":1}}],[\"定义接口\",{\"1\":{\"3960\":1}}],[\"定义一些策略\",{\"1\":{\"3869\":1,\"6024\":1}}],[\"定义一个切面类\",{\"1\":{\"4030\":1}}],[\"定义一个接口及其实现类\",{\"1\":{\"4028\":1}}],[\"定义一个时间段\",{\"1\":{\"2635\":1}}],[\"定义一个抽象接口以规范准备接收附加责任的对象\",{\"1\":{\"875\":1}}],[\"定义文件特性的旗标\",{\"1\":{\"3484\":1}}],[\"定义了一个叫做\",{\"1\":{\"2668\":1}}],[\"定义了两类副本\",{\"1\":{\"1529\":1}}],[\"定义了java编译版本\",{\"1\":{\"1354\":1,\"5679\":1}}],[\"定义中包括了如下几个表示传播行为的常量\",{\"1\":{\"1237\":1,\"5589\":1}}],[\"定义⼀个静态变量指向⾃⼰类型\",{\"1\":{\"858\":1,\"5488\":1}}],[\"定义\",{\"1\":{\"645\":1,\"872\":1}}],[\"预热\",{\"1\":{\"2078\":1,\"5783\":1}}],[\"预读的页就只需要加入到\",{\"1\":{\"1712\":1}}],[\"预读页就只需要加入到\",{\"1\":{\"1704\":1}}],[\"预读页\",{\"1\":{\"1694\":1,\"1695\":1}}],[\"冷机房新请求过来\",{\"0\":{\"2077\":1,\"5782\":1}}],[\"全称\",{\"1\":{\"6989\":1,\"7026\":1}}],[\"全称为\",{\"1\":{\"2759\":1,\"6428\":1}}],[\"全球也仅有36\",{\"1\":{\"6979\":1,\"7002\":1}}],[\"全面使用只是个时间问题\",{\"1\":{\"6972\":1,\"6997\":1}}],[\"全文索引不适用于\",{\"1\":{\"3080\":1,\"6731\":1}}],[\"全文索引主要是为了检索大文本数据中的关键字的信息\",{\"1\":{\"2794\":1,\"6465\":1}}],[\"全文索引\",{\"1\":{\"2773\":1,\"2783\":1,\"2794\":1,\"6442\":1,\"6452\":1,\"6465\":1}}],[\"全连接队列取出一个已经建立连接的\",{\"1\":{\"2643\":1}}],[\"全连接队列\",{\"1\":{\"2581\":1}}],[\"全部启动\",{\"1\":{\"3919\":1,\"6067\":1}}],[\"全部\",{\"1\":{\"2076\":1,\"5781\":1}}],[\"全局单调递增的事务id\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"全局锁\",{\"0\":{\"6524\":1}}],[\"全局锁主要应用于做全库逻辑备份\",{\"1\":{\"2861\":1,\"6533\":1}}],[\"全局锁应用场景是什么\",{\"1\":{\"2860\":1,\"6532\":1}}],[\"全局数据\",{\"1\":{\"2075\":1,\"5780\":1}}],[\"全局变量等用户空间的资源\",{\"1\":{\"1880\":1}}],[\"全局页目录项\",{\"1\":{\"1666\":1}}],[\"全局参数中配置开启二级缓存\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"给文章进行排序\",{\"1\":{\"4999\":2}}],[\"给自己投票为\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"给\",{\"1\":{\"4608\":1}}],[\"给其他应用\",{\"1\":{\"4047\":1}}],[\"给线程取一个与业务处理相关的名称\",{\"1\":{\"3560\":1}}],[\"给主库发送\",{\"1\":{\"3201\":1}}],[\"给用户\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"给被动关闭方\",{\"1\":{\"2614\":1}}],[\"给客户端\",{\"1\":{\"2584\":1}}],[\"给客户端的时候\",{\"1\":{\"2553\":1}}],[\"给它起了个名字\",{\"1\":{\"2074\":1,\"5779\":1}}],[\"给对象添加一个引用计数器\",{\"1\":{\"297\":1}}],[\"阿里云接口\",{\"1\":{\"4857\":2}}],[\"阿里云oss是一个成熟的云服务\",{\"1\":{\"4738\":1}}],[\"阿里云oss\",{\"1\":{\"4682\":1}}],[\"阿里巴巴\",{\"1\":{\"3906\":1,\"3909\":1,\"6053\":1,\"6056\":1}}],[\"阿里巴巴java开发规约\",{\"1\":{\"984\":1}}],[\"阿里的\",{\"1\":{\"2741\":1,\"6410\":1}}],[\"阿里在实施这种方案时\",{\"1\":{\"2074\":1,\"5779\":1}}],[\"跨机房\",{\"1\":{\"2073\":1,\"5778\":1}}],[\"闭环\",{\"1\":{\"2073\":1,\"5778\":1}}],[\"负载均衡\",{\"1\":{\"4463\":1,\"4560\":1,\"6096\":1,\"6160\":1}}],[\"负载均衡层\",{\"1\":{\"2068\":1,\"5773\":1}}],[\"负数表示失败\",{\"1\":{\"3656\":1,\"5899\":1}}],[\"负责监听和分发事件\",{\"1\":{\"6322\":1}}],[\"负责处理外部的写事务请求\",{\"1\":{\"4593\":1}}],[\"负责url到controller中的具体函数的映射\",{\"1\":{\"4123\":1}}],[\"负责标书趋势分析平台和对话机器人测试平台的开发\",{\"1\":{\"4120\":1}}],[\"负责管理和控制硬件资源\",{\"1\":{\"3443\":1}}],[\"负责将可用的共享资源\",{\"1\":{\"3431\":1}}],[\"负责从\",{\"1\":{\"1407\":1}}],[\"负责消息存储\",{\"1\":{\"1407\":1}}],[\"负责产生和发送消息到\",{\"1\":{\"1407\":1}}],[\"负责加载当前应用\",{\"1\":{\"427\":1,\"5318\":1}}],[\"迁移线程和用户线程同时执行\",{\"0\":{\"2065\":1,\"5770\":1}}],[\"库\",{\"1\":{\"3294\":1,\"3449\":1}}],[\"库可以放到不同的实例上\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"库里的\",{\"1\":{\"1811\":1,\"6318\":1}}],[\"虾皮\",{\"0\":{\"2056\":1,\"2059\":1,\"2061\":1,\"2063\":1,\"2065\":1,\"2067\":1,\"2070\":1,\"2077\":1,\"2079\":1,\"5761\":1,\"5764\":1,\"5766\":1,\"5768\":1,\"5770\":1,\"5772\":1,\"5775\":1,\"5782\":1,\"5784\":1}}],[\"清空购物车成功\",{\"1\":{\"2053\":1,\"5758\":1}}],[\"清除数据\",{\"1\":{\"1455\":1,\"6903\":1}}],[\"清除算法导致的空间碎片\",{\"1\":{\"370\":1}}],[\"清除算法\",{\"1\":{\"361\":1}}],[\"清除\",{\"0\":{\"323\":1},\"1\":{\"339\":1}}],[\"订单服务\",{\"1\":{\"4015\":1}}],[\"订单创建成功\",{\"1\":{\"2050\":1,\"5755\":1}}],[\"订单系统\",{\"1\":{\"2047\":1,\"5752\":1}}],[\"订阅\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"订阅模型\",{\"1\":{\"1583\":1}}],[\"订阅2个topic\",{\"1\":{\"1476\":1,\"6926\":1}}],[\"甚至崩溃\",{\"1\":{\"4151\":1}}],[\"甚至宕机\",{\"1\":{\"4145\":1}}],[\"甚至有些情况下会降低查询效率\",{\"1\":{\"2833\":1,\"6505\":1}}],[\"甚至有人建议\",{\"1\":{\"638\":1}}],[\"甚至高于lock\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"偏向锁\",{\"0\":{\"5806\":1}}],[\"偏向锁就升级为轻量级锁\",{\"1\":{\"3804\":1,\"5815\":1}}],[\"偏向锁就会升级为轻量级锁\",{\"1\":{\"3801\":1,\"5813\":1}}],[\"偏向锁是指当一段同步代码一直被同一个线程所访问时\",{\"1\":{\"3799\":1,\"5811\":1}}],[\"偏向锁只有遇到其他线程尝试竞争偏向锁时\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"偏向锁几乎没有额外开销\",{\"1\":{\"3797\":1,\"5809\":1}}],[\"偏向于第一个访问锁的线程\",{\"1\":{\"3795\":1,\"5807\":1}}],[\"偏向模式下\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"偏移量\",{\"1\":{\"1590\":1,\"4674\":1,\"7193\":1}}],[\"携程\",{\"0\":{\"2040\":1,\"5745\":1}}],[\"仍然能够对外提供服务\",{\"1\":{\"4641\":1,\"6214\":1}}],[\"仍然能够继续工作\",{\"1\":{\"1443\":1}}],[\"仍然可以正常接收请求\",{\"1\":{\"3235\":1}}],[\"仍然有可能引起系统的崩溃\",{\"1\":{\"2035\":1}}],[\"沿顺时针方向遇到的第一个缓存服务器节点就是服务器c\",{\"1\":{\"2032\":1}}],[\"沿顺时针方向遇到的第一个服务器就是图片存放的服务器了\",{\"1\":{\"2028\":1}}],[\"怎么估出每秒钟能处理多少请求呢\",{\"1\":{\"5007\":1}}],[\"怎么找到自己想要的内容\",{\"1\":{\"4392\":1}}],[\"怎么找呢\",{\"1\":{\"3591\":1}}],[\"怎么进行接口设计\",{\"0\":{\"4210\":1}}],[\"怎么理解单点\",{\"0\":{\"4092\":1}}],[\"怎么防sql注入\",{\"0\":{\"4089\":1}}],[\"怎么想到用redis做限流的\",{\"0\":{\"4085\":1}}],[\"怎么保证单点登录\",{\"0\":{\"4042\":1}}],[\"怎么分割不同的架构的\",{\"0\":{\"4014\":1}}],[\"怎么监控呢\",{\"1\":{\"3200\":1}}],[\"怎么改变执行的机房\",{\"0\":{\"2079\":1,\"5784\":1}}],[\"怎么解决这个问题呢\",{\"1\":{\"3177\":1,\"6835\":1}}],[\"怎么解决\",{\"0\":{\"2065\":1,\"5770\":1}}],[\"怎么实现一个点赞功能\",{\"0\":{\"2044\":1,\"5749\":1}}],[\"怎么去做一个一个操作呢\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"怎么算出上图中的图片应该被缓存到哪一台服务上面呢\",{\"1\":{\"2028\":1}}],[\"怎么要有三级缓存呢\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"确实是麻烦点\",{\"1\":{\"6965\":1}}],[\"确保已经被leader提交的提案最终能够被所有的follower提交是什么意思呢\",{\"1\":{\"6199\":1}}],[\"确保已经被leader提交的提案最终能够被所有的follower提交\",{\"1\":{\"6198\":1}}],[\"确保服务不会崩溃\",{\"1\":{\"4915\":1}}],[\"确保业务的正常进行\",{\"1\":{\"4718\":1}}],[\"确保写磁盘操作结束才会返回\",{\"1\":{\"3168\":1,\"6824\":1}}],[\"确定\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"确定joinpoint\",{\"1\":{\"4022\":1}}],[\"确定送给哪个应用程序处理\",{\"1\":{\"2520\":1,\"2709\":1}}],[\"确定是否某条请求处理变慢\",{\"1\":{\"2140\":1}}],[\"确定服务器在哈希环的位置\",{\"1\":{\"2023\":1}}],[\"确认哪个进程运行多长的时间\",{\"1\":{\"3440\":1}}],[\"确认了新的数据\",{\"1\":{\"2706\":1}}],[\"确认应答报文\",{\"1\":{\"2649\":1}}],[\"确认应答\",{\"1\":{\"2447\":1}}],[\"确认应答号\",{\"1\":{\"2445\":1,\"2528\":1,\"2529\":1}}],[\"确认服务器的数字证书的真实性\",{\"1\":{\"2331\":1}}],[\"确认的密码套件列表\",{\"1\":{\"2328\":1}}],[\"确认机制\",{\"1\":{\"1553\":1}}],[\"确认\",{\"1\":{\"1407\":1,\"2326\":1}}],[\"圆环的正上方的点代表0\",{\"1\":{\"2022\":1}}],[\"钟表的圆可以理解成由60个点组成的圆\",{\"1\":{\"2021\":1}}],[\"想从实习中收获什么\",{\"1\":{\"4343\":1,\"7168\":1}}],[\"想打他\",{\"1\":{\"4306\":1,\"7131\":1}}],[\"想象成一个圆\",{\"1\":{\"2021\":1}}],[\"想要给同一局域网内的\",{\"1\":{\"7033\":1}}],[\"想要其生效必须引入spring\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"想要使用此布局\",{\"1\":{\"151\":1,\"155\":1,\"5264\":1}}],[\"造成系统崩溃等情况\",{\"1\":{\"4145\":1}}],[\"造成\",{\"1\":{\"3544\":1}}],[\"造成它在主库repl\",{\"1\":{\"3243\":1}}],[\"造成不必要的资源浪费\",{\"1\":{\"2556\":1}}],[\"造成了缓存的雪崩\",{\"1\":{\"2012\":1}}],[\"造成数据顺序错误\",{\"1\":{\"1505\":1,\"6960\":1}}],[\"得出的结果应该是不变的\",{\"1\":{\"2010\":1}}],[\"得到\",{\"1\":{\"5077\":1,\"5083\":1}}],[\"得到值之后判断位数组中的每个元素是否都为\",{\"1\":{\"3262\":1,\"6867\":1}}],[\"得到哈希值\",{\"1\":{\"3258\":1,\"6863\":1}}],[\"得到多个哈希值\",{\"1\":{\"2149\":1}}],[\"得到物理地址\",{\"1\":{\"1684\":1}}],[\"得到物理页号\",{\"1\":{\"1683\":1}}],[\"得到页表起始地址\",{\"1\":{\"1682\":1}}],[\"得到请求资源标识符\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"得到的线程栈信息中会包含大量的\",{\"1\":{\"3545\":1}}],[\"得到的结果一定是个正数\",{\"1\":{\"1044\":1}}],[\"得到的值为\",{\"1\":{\"1037\":1}}],[\"​\",{\"1\":{\"2008\":1,\"2025\":1,\"2027\":1,\"2031\":1,\"3471\":1,\"3690\":1,\"4012\":1,\"4835\":1,\"4837\":1,\"4840\":1,\"4841\":1,\"4852\":1,\"4853\":1,\"4854\":1,\"4855\":1,\"4914\":1,\"7224\":1,\"7226\":1,\"7229\":1,\"7230\":1,\"7241\":1,\"7242\":1,\"7243\":1,\"7244\":1}}],[\"决定了\",{\"1\":{\"4646\":1,\"6219\":1}}],[\"决定了set中可以保存哪些元素\",{\"1\":{\"732\":1}}],[\"决定是否使用缓存的主动性在于浏览器这边\",{\"1\":{\"2228\":1}}],[\"决定缓存项将会缓存在哪一台服务器上\",{\"1\":{\"2007\":1}}],[\"普通的select语句加不加锁\",{\"1\":{\"4378\":1}}],[\"普通的\",{\"1\":{\"2910\":1,\"2938\":1,\"6582\":1,\"6610\":1}}],[\"普通的树一般是无序的\",{\"1\":{\"654\":1}}],[\"普通索引的唯一作用就是为了快速查询数据\",{\"1\":{\"2792\":1,\"6463\":1}}],[\"普通索引\",{\"1\":{\"2779\":1,\"2790\":1,\"2792\":1,\"4170\":1,\"6448\":1,\"6460\":1,\"6463\":1}}],[\"普通\",{\"0\":{\"2004\":1,\"2006\":1,\"2011\":1},\"1\":{\"2931\":1,\"3012\":1,\"6603\":1,\"6684\":1}}],[\"改为处理其他事情\",{\"1\":{\"3781\":1,\"5792\":1}}],[\"改成以相同顺序的获取资源\",{\"1\":{\"2002\":1}}],[\"改完了编译运行没有bug然而过了两天你发现用linkedhashmap会有隐患\",{\"1\":{\"506\":1,\"5394\":1}}],[\"持续备份\",{\"1\":{\"4693\":1}}],[\"持续的大并发请求就会击破缓存\",{\"1\":{\"4148\":1}}],[\"持久化功能的实现可以简单分为\",{\"1\":{\"3159\":1,\"6815\":1}}],[\"持久化后每执行一条会更改\",{\"1\":{\"3155\":1,\"6811\":1}}],[\"持久化的实时性更好\",{\"1\":{\"3153\":1,\"6809\":1}}],[\"持久化\",{\"0\":{\"3139\":1,\"3144\":1,\"3152\":1,\"6795\":1,\"6800\":1,\"6808\":1}}],[\"持久连接的特点是\",{\"1\":{\"2294\":1}}],[\"持久性是通过\",{\"1\":{\"2976\":1,\"6648\":1}}],[\"持久性\",{\"1\":{\"1223\":1,\"2974\":1,\"5575\":1,\"6646\":1}}],[\"持有偏向锁的线程才会释放锁\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"持有锁的线程id也在对象头里\",{\"1\":{\"3797\":1,\"5809\":1}}],[\"持有了\",{\"1\":{\"1993\":1}}],[\"持有并等待条件是指\",{\"1\":{\"1993\":1}}],[\"持有并等待条件\",{\"1\":{\"1993\":1}}],[\"屏障是一种同步原语\",{\"1\":{\"1983\":1,\"6242\":1}}],[\"屏障\",{\"1\":{\"1983\":1,\"6242\":1}}],[\"互联网工程任务组正式将基于\",{\"1\":{\"6989\":1}}],[\"互联网发展至今\",{\"1\":{\"2269\":1}}],[\"互斥机制的支持下使用同一个内存段\",{\"1\":{\"3471\":1}}],[\"互斥条件是指多个线程不能同时使用同一个资源\",{\"1\":{\"1992\":1}}],[\"互斥条件\",{\"1\":{\"1992\":1}}],[\"互斥锁\",{\"1\":{\"1980\":1,\"6239\":1}}],[\"互斥同步\",{\"0\":{\"1976\":1,\"6236\":1}}],[\"互相循环依赖\",{\"1\":{\"1252\":1,\"5604\":1}}],[\"更严谨的说法应该是一个接口\",{\"1\":{\"7045\":1}}],[\"更复杂的情况是\",{\"1\":{\"7045\":1}}],[\"更适合做\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"更强大\",{\"1\":{\"3785\":1,\"5796\":1}}],[\"更灵活\",{\"1\":{\"3785\":1,\"5796\":1}}],[\"更多的命令参数含义可通过\",{\"1\":{\"3609\":1}}],[\"更多用法\",{\"1\":{\"3597\":1}}],[\"更改文件名这些操作与目录的\",{\"1\":{\"3491\":1}}],[\"更换当前目录\",{\"1\":{\"3396\":1}}],[\"更加友好\",{\"1\":{\"3175\":1,\"6833\":1}}],[\"更大的整型数据\",{\"1\":{\"3075\":1,\"6726\":1}}],[\"更新一个变量的时候\",{\"1\":{\"3675\":1,\"5844\":1}}],[\"更新文件时间或者建立新文件\",{\"1\":{\"3402\":1}}],[\"更新了这条数据\",{\"1\":{\"2988\":1,\"6660\":1}}],[\"更新后的数据\",{\"1\":{\"2983\":1,\"6655\":1}}],[\"更新\",{\"1\":{\"2909\":1,\"3403\":3,\"4671\":1,\"6581\":1,\"7190\":1}}],[\"更新代价比聚簇索引要小\",{\"1\":{\"2808\":1,\"6480\":1}}],[\"更新代价大\",{\"1\":{\"2803\":1,\"6475\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"134\":1,\"5247\":1}}],[\"更新时间\",{\"1\":{\"18\":1,\"5131\":1}}],[\"更有优势\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"匿名管道由于没有名字\",{\"1\":{\"1970\":1,\"6251\":1}}],[\"匿名管道\",{\"1\":{\"1969\":1,\"6250\":1}}],[\"匿名管道的创建\",{\"1\":{\"1952\":1}}],[\"信\",{\"1\":{\"3437\":1}}],[\"信息\",{\"1\":{\"3563\":1,\"4627\":1,\"6205\":1}}],[\"信息量大是其优点\",{\"1\":{\"3474\":1}}],[\"信息是明文传输\",{\"1\":{\"2306\":1}}],[\"信息的内容都毫无隐私可言\",{\"1\":{\"2282\":1}}],[\"信息来控制客户端的状态\",{\"1\":{\"2278\":1}}],[\"信息容器\",{\"1\":{\"46\":1,\"5159\":1}}],[\"信号杀掉容器\",{\"1\":{\"3323\":1}}],[\"信号强行杀掉容器\",{\"1\":{\"3322\":1}}],[\"信号给容器\",{\"1\":{\"3322\":1}}],[\"信号是一种比较复杂的通信方式\",{\"1\":{\"1971\":1,\"3464\":1,\"6252\":1}}],[\"信号\",{\"1\":{\"1971\":1,\"3464\":1,\"6252\":1}}],[\"信号量的意图在于进程间同步\",{\"1\":{\"1973\":1,\"6254\":1}}],[\"信号量是一个计数器\",{\"1\":{\"1973\":1,\"3462\":1,\"6254\":1}}],[\"信号量\",{\"1\":{\"1973\":1,\"1982\":1,\"1988\":1,\"3462\":1,\"6241\":1,\"6247\":1,\"6254\":1}}],[\"信号量表示资源的数量\",{\"1\":{\"1964\":1}}],[\"信号量其实是一个整型的计数器\",{\"1\":{\"1963\":1}}],[\"信号量就实现了这一保护机制\",{\"1\":{\"1962\":1}}],[\"传给内核\",{\"1\":{\"6262\":1}}],[\"传入参数\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"传入arraylist对象及自定义的comparator进行排序\",{\"1\":{\"4275\":1}}],[\"传入一个\",{\"1\":{\"3789\":1,\"5800\":1}}],[\"传入的邮箱格式不对的时候直接返回错误消息给客户端等等\",{\"1\":{\"3249\":1,\"6854\":1}}],[\"传递了变量值\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"传统的虚拟机首先通过hypervisor层对物理硬件进行虚拟化\",{\"1\":{\"3311\":1}}],[\"传输过程中即便请求被截获\",{\"1\":{\"5047\":1}}],[\"传输过程中一旦请求被截获\",{\"1\":{\"5041\":1}}],[\"传输方式\",{\"1\":{\"2497\":1}}],[\"传输数据前先要建立连接\",{\"1\":{\"2483\":1,\"4258\":1}}],[\"传输层有两个传输协议分别是\",{\"1\":{\"2519\":1,\"2708\":1}}],[\"传输层的端口号的作用\",{\"1\":{\"2518\":1}}],[\"传输层\",{\"1\":{\"2452\":1}}],[\"传输协议\",{\"1\":{\"7071\":1}}],[\"传输协议实现一个可靠的传输协议\",{\"1\":{\"2490\":1}}],[\"传输协议改用了\",{\"1\":{\"2267\":1}}],[\"传输协议使用的是\",{\"1\":{\"2267\":1}}],[\"传来传去\",{\"1\":{\"1960\":1}}],[\"传播行为\",{\"1\":{\"1226\":1,\"5578\":1}}],[\"另\",{\"1\":{\"4338\":1,\"7163\":1}}],[\"另一种是响应分组\",{\"1\":{\"7038\":1}}],[\"另一方面是减少冷缓存占用过多的内存空间\",{\"1\":{\"4144\":1}}],[\"另一方接收到\",{\"1\":{\"2614\":1}}],[\"另一个刚进来又走了\",{\"0\":{\"4449\":1}}],[\"另一个面试官问看你简历有高并发系统的东西\",{\"1\":{\"4333\":1,\"7158\":1}}],[\"另一个作用是\",{\"1\":{\"3040\":1,\"6708\":1}}],[\"另一个拥有该间隙区间内的插入意向锁\",{\"1\":{\"2966\":1,\"6638\":1}}],[\"另一个是喜欢旅游和骑行的方式来放松\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"另一个是\",{\"1\":{\"1966\":1}}],[\"另一端读取\",{\"1\":{\"1954\":1}}],[\"另外dubbo实现了软负载均衡及故障容错机制\",{\"1\":{\"3987\":1}}],[\"另外最近一段在联想实习的经历\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1}}],[\"另外还可以考虑延迟执行\",{\"1\":{\"3693\":1,\"5862\":1}}],[\"另外数组底层的存储是连续的\",{\"1\":{\"1627\":1}}],[\"另外它只是一个简单变量\",{\"1\":{\"1626\":1}}],[\"另外一个进程马上就能看到了\",{\"1\":{\"1960\":1}}],[\"另外一个解决办法是\",{\"1\":{\"1612\":1}}],[\"另外一个缓存用于存放半成品对象\",{\"1\":{\"1277\":1,\"5619\":1}}],[\"另外一些则是与线程一一对应的\",{\"1\":{\"185\":1}}],[\"另外\",{\"1\":{\"887\":1,\"914\":1,\"1655\":1,\"1954\":1,\"2885\":1,\"3276\":1,\"3474\":1,\"3572\":1,\"3741\":1,\"3909\":1,\"4562\":1,\"4651\":1,\"5505\":1,\"5532\":1,\"5973\":1,\"6056\":1,\"6162\":1,\"6224\":1,\"6379\":1,\"6557\":1,\"6881\":1}}],[\"管道通信方式的中间介质就是文件\",{\"1\":{\"3468\":1}}],[\"管道通信\",{\"1\":{\"3468\":1}}],[\"管道是一种半双工的通信方式\",{\"1\":{\"3460\":1}}],[\"管道化技术不是默认开启\",{\"1\":{\"2301\":1}}],[\"管道解决了请求的队头阻塞\",{\"1\":{\"2300\":1}}],[\"管道网络传输\",{\"1\":{\"2295\":1}}],[\"管道只能承载无格式字节流以及缓冲区大小受限等缺点\",{\"1\":{\"3463\":1}}],[\"管道只能承载无格式字\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"管道和消息队列的通信数据都是先进先出的原则\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"管道\",{\"1\":{\"1969\":1,\"3460\":1,\"6250\":1}}],[\"管道传输的数据是无格式的流且大小受限\",{\"1\":{\"1954\":1}}],[\"管道这种通信方式效率低\",{\"1\":{\"1951\":1}}],[\"管道还有另外一个类型是命名管道\",{\"1\":{\"1950\":1}}],[\"管理下的正常目录都算是工作区\",{\"1\":{\"3356\":1}}],[\"管理\",{\"1\":{\"1160\":1,\"5541\":1}}],[\"竖线就是一个管道\",{\"1\":{\"1948\":1}}],[\"|cut\",{\"1\":{\"5021\":1}}],[\"|grep\",{\"1\":{\"3527\":1,\"5021\":1}}],[\"|\",{\"1\":{\"1946\":1,\"1947\":1,\"1948\":1,\"1949\":1,\"1955\":1,\"3422\":1,\"3426\":2,\"3559\":1,\"3596\":1,\"3600\":2}}],[\"||\",{\"1\":{\"816\":1,\"3857\":5,\"4857\":1,\"6011\":5}}],[\"赋予每个队列不同的优先级\",{\"1\":{\"1940\":1}}],[\"立刻停止当前正在运行的进程\",{\"1\":{\"1938\":1}}],[\"立即进行切换\",{\"1\":{\"1926\":1}}],[\"抢占式\",{\"1\":{\"1933\":1}}],[\"现象\",{\"1\":{\"2981\":1,\"2986\":1,\"2990\":1,\"6653\":1,\"6658\":1,\"6662\":1}}],[\"现实中是实现不了的\",{\"1\":{\"1922\":1}}],[\"现在http\",{\"1\":{\"6978\":1,\"7001\":1}}],[\"现在主流的彩虹表记录数据约90万亿条\",{\"1\":{\"5054\":1}}],[\"现在在csdn上的粉丝数达到了3k+\",{\"1\":{\"5024\":1,\"7288\":1}}],[\"现在在csdn上的访问量达到了44w+\",{\"1\":{\"4113\":1,\"4209\":1}}],[\"现在在csdn上的访问量达到了49w+\",{\"1\":{\"3933\":1}}],[\"现在得写毕业论文\",{\"1\":{\"4394\":1}}],[\"现在准备做大模型\",{\"1\":{\"4393\":1}}],[\"现在常用的密钥交换算法有两种\",{\"1\":{\"2316\":1}}],[\"现在查询非常慢\",{\"0\":{\"2059\":1,\"5764\":1}}],[\"现在很少有人用\",{\"1\":{\"1435\":1,\"4763\":1}}],[\"现在有5个文件\",{\"1\":{\"4392\":1}}],[\"现在有3万张图片需要缓存\",{\"1\":{\"2007\":1}}],[\"现在有服务\",{\"1\":{\"1413\":1}}],[\"现在有上游服务\",{\"1\":{\"1413\":1}}],[\"现在\",{\"1\":{\"1279\":1,\"5621\":1}}],[\"现在这个基于\",{\"1\":{\"620\":1}}],[\"现在的商业虚拟机采用分代收集算法\",{\"1\":{\"336\":1}}],[\"现在的商业虚拟机都采用这种收集算法来回收新生代\",{\"1\":{\"333\":1}}],[\"理论上\",{\"1\":{\"7039\":1}}],[\"理论上就可以有\",{\"1\":{\"6327\":1}}],[\"理论中分区容错性\",{\"1\":{\"4647\":1,\"6220\":1}}],[\"理论诞生\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"理财\",{\"1\":{\"2269\":1}}],[\"理想型\",{\"1\":{\"1922\":1}}],[\"理解sso的关键是\",{\"1\":{\"4043\":1}}],[\"理解为threadlocal\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"理解成一个数据快照\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"理解了linkedlist和arraylist的特点\",{\"1\":{\"758\":1}}],[\"理解下pc计数器\",{\"1\":{\"190\":1}}],[\"响应分组只有一个目的地\",{\"1\":{\"7041\":1}}],[\"响应分组具有和\",{\"1\":{\"7041\":1}}],[\"响应分组\",{\"1\":{\"7040\":1}}],[\"响应消息\",{\"1\":{\"6983\":1,\"7006\":1}}],[\"响应表示第一次复制采用的全量复制\",{\"1\":{\"3233\":1}}],[\"响应命令带上两个参数\",{\"1\":{\"3233\":1}}],[\"响应包返回给主机\",{\"1\":{\"2380\":1}}],[\"响应\",{\"1\":{\"2242\":1}}],[\"响应头部中\",{\"1\":{\"2244\":1}}],[\"响应头部中的\",{\"1\":{\"2241\":1}}],[\"响应头部同时有\",{\"1\":{\"2232\":1,\"2247\":1}}],[\"响应头部\",{\"1\":{\"2229\":1,\"2352\":1}}],[\"响应比优先级\",{\"1\":{\"1920\":3}}],[\"响应的非常慢\",{\"1\":{\"1417\":1}}],[\"繁忙型作业的系统\",{\"1\":{\"1915\":2}}],[\"体现在\",{\"1\":{\"1904\":1}}],[\"体验效果就会有极大的提升了\",{\"1\":{\"1418\":1}}],[\"打破双亲委派需要重写findclass\",{\"1\":{\"4198\":1}}],[\"打包\",{\"1\":{\"4082\":1}}],[\"打包groovy文件到jar\",{\"1\":{\"1365\":1,\"5690\":1}}],[\"打印出的线程栈信息中\",{\"1\":{\"3556\":1}}],[\"打印出行号\",{\"1\":{\"3415\":1}}],[\"打开状态\",{\"1\":{\"4521\":1,\"6138\":1}}],[\"打开\",{\"1\":{\"2627\":1}}],[\"打开的文件等\",{\"1\":{\"1900\":1}}],[\"各类sdk\",{\"1\":{\"4731\":1}}],[\"各个进程的地址空间完全独立\",{\"1\":{\"3437\":1}}],[\"各个线程之间可以共享地址空间和文件等资源\",{\"1\":{\"1895\":1}}],[\"各个线程之间可以并发执行\",{\"1\":{\"1894\":1}}],[\"各种协议支持好\",{\"1\":{\"4791\":1}}],[\"各种特性也还不错\",{\"1\":{\"2729\":1,\"6398\":1}}],[\"各种中间件都要做改造\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"各自对应的解决策略是什么\",{\"0\":{\"4142\":1}}],[\"各自的端口号也相互独立\",{\"1\":{\"2521\":1}}],[\"各自生成本次通信的\",{\"1\":{\"2337\":1}}],[\"各并发事务之间数据库是独立的\",{\"1\":{\"1222\":1,\"5574\":1}}],[\"撤销等常规操作\",{\"1\":{\"3377\":1}}],[\"撤销\",{\"1\":{\"1885\":1}}],[\"维护数据多副本的一致性无疑非常重要\",{\"1\":{\"4574\":1}}],[\"维护在一个列表上\",{\"1\":{\"3050\":1}}],[\"维护进程的系统开销较大\",{\"1\":{\"1885\":1}}],[\"维护也越来越少\",{\"1\":{\"1435\":1,\"4763\":1}}],[\"寄存器等内核空间的资源\",{\"1\":{\"1880\":1}}],[\"寄存器和程序计数是\",{\"1\":{\"1878\":1}}],[\"寄存器用来存储指向下一条指令的地址\",{\"1\":{\"189\":1}}],[\"称为临键锁\",{\"1\":{\"2956\":1,\"6628\":1}}],[\"称为间隙锁\",{\"1\":{\"2952\":1,\"6624\":1}}],[\"称为记录锁\",{\"1\":{\"2948\":1,\"6620\":1}}],[\"称为历史连接\",{\"1\":{\"2547\":1}}],[\"称为虚拟节点\",{\"1\":{\"2035\":1}}],[\"称为\",{\"1\":{\"2016\":1}}],[\"称为时间片\",{\"1\":{\"1924\":1}}],[\"称为进程的上下文切换\",{\"1\":{\"1877\":1}}],[\"称为就绪队列\",{\"1\":{\"1874\":1}}],[\"称为祖先关系或子孙关系\",{\"1\":{\"662\":1}}],[\"资源已被永久转移\",{\"1\":{\"7062\":1}}],[\"资源消耗\",{\"1\":{\"4865\":1}}],[\"资源无法释放\",{\"1\":{\"3589\":1}}],[\"资源的线程\",{\"1\":{\"3558\":1}}],[\"资源库\",{\"1\":{\"3332\":1}}],[\"资源\",{\"1\":{\"2623\":1,\"3294\":1,\"3826\":1,\"3897\":1,\"5943\":1,\"6044\":1,\"6741\":1}}],[\"资源占用迅速提升\",{\"1\":{\"2116\":1}}],[\"资源分配清单\",{\"1\":{\"1869\":1}}],[\"资源会在\",{\"1\":{\"477\":1,\"5372\":1}}],[\"必要时可与同事交流\",{\"1\":{\"3341\":1}}],[\"必要时增加中间表进行关联\",{\"1\":{\"3078\":1,\"6729\":1}}],[\"必然会有冲突\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"必然会有一个\",{\"1\":{\"1861\":1}}],[\"必须要禁止其他节点的读写操作\",{\"1\":{\"4649\":1,\"6222\":1}}],[\"必须要按前后的顺序执行\",{\"1\":{\"1503\":1,\"6958\":1}}],[\"必须按照申请锁的时间顺序来依次获得锁\",{\"1\":{\"3782\":1,\"5793\":1}}],[\"必须由各进程利用其他同步工具解决\",{\"1\":{\"3474\":1}}],[\"必须为空\",{\"1\":{\"3400\":1}}],[\"必须在\",{\"1\":{\"3372\":1}}],[\"必须在缓冲区中保留已发送的数据\",{\"1\":{\"2652\":1}}],[\"必须使用\",{\"0\":{\"6735\":1},\"1\":{\"3083\":1}}],[\"必须依靠其他线程调用notify\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"必须指定事务应该如何传播\",{\"1\":{\"1237\":1,\"5589\":1}}],[\"必须是已经注册到\",{\"1\":{\"1205\":1,\"5557\":1}}],[\"必须逐个比较\",{\"1\":{\"755\":1}}],[\"必须从头或尾顺着链接找\",{\"1\":{\"754\":1}}],[\"阻塞后\",{\"1\":{\"2901\":1,\"6573\":1}}],[\"阻塞\",{\"1\":{\"1902\":1,\"3664\":1,\"5827\":1}}],[\"阻塞的情况分三种\",{\"1\":{\"1856\":1,\"6232\":1}}],[\"阻塞状态是线程因为某种原因放弃cpu使用权\",{\"1\":{\"1856\":1,\"6232\":1}}],[\"阻塞状态\",{\"1\":{\"1856\":1,\"6232\":1}}],[\"版本控制\",{\"1\":{\"4702\":1}}],[\"版本后才引入\",{\"1\":{\"3679\":1,\"5848\":1}}],[\"版本后增加以下两种\",{\"1\":{\"3187\":1,\"6845\":1}}],[\"版本之前采用的正是\",{\"1\":{\"6361\":1}}],[\"版本之前\",{\"1\":{\"3082\":1,\"6733\":1}}],[\"版本之后\",{\"1\":{\"2730\":1,\"3113\":1,\"6399\":1,\"6769\":1}}],[\"版本开始引入\",{\"1\":{\"3700\":1,\"5869\":1}}],[\"版本开始\",{\"1\":{\"2925\":1,\"6597\":1}}],[\"版本开始起\",{\"1\":{\"1802\":1,\"6308\":1}}],[\"版本中提供的一项索引优化功能\",{\"1\":{\"2821\":1,\"6493\":1}}],[\"版本\",{\"1\":{\"2321\":1}}],[\"版本的默认连接都是长连接\",{\"1\":{\"2216\":1}}],[\"版本的升级\",{\"1\":{\"915\":1,\"5533\":1}}],[\"技术栈的具体应用\",{\"1\":{\"4657\":1,\"7176\":1}}],[\"技术栈是什么\",{\"1\":{\"4322\":1,\"7147\":1}}],[\"技术二面\",{\"0\":{\"4426\":1}}],[\"技术一面\",{\"0\":{\"4396\":1}}],[\"技术面\",{\"0\":{\"4369\":1,\"4395\":1,\"4449\":1}}],[\"技术面+hr面\",{\"0\":{\"4357\":1}}],[\"技术的情况下\",{\"1\":{\"1802\":1,\"6308\":1}}],[\"技术\",{\"1\":{\"1801\":1,\"1806\":1,\"1810\":1,\"2277\":1,\"6307\":1,\"6313\":1,\"6317\":1}}],[\"搬运的\",{\"1\":{\"1792\":1,\"6297\":1}}],[\"缓存机制\",{\"1\":{\"7063\":1}}],[\"缓存oss中的热点文件\",{\"1\":{\"4712\":1}}],[\"缓存\",{\"1\":{\"4163\":1}}],[\"缓存必须同时被刷新\",{\"1\":{\"4153\":1}}],[\"缓存空值\",{\"1\":{\"4152\":1}}],[\"缓存也失去了意义\",{\"1\":{\"4151\":1}}],[\"缓存反射对象\",{\"1\":{\"3946\":1}}],[\"缓存击穿和缓存雪崩很类似\",{\"1\":{\"4149\":1}}],[\"缓存击穿\",{\"0\":{\"4142\":1},\"1\":{\"4147\":1}}],[\"缓存击穿导致的原因主要是某个热点数据不存在与缓存中\",{\"1\":{\"3286\":1,\"6891\":1}}],[\"缓存击穿中\",{\"1\":{\"3265\":1,\"3272\":1,\"6870\":1,\"6877\":1}}],[\"缓存永不失效\",{\"1\":{\"3283\":1,\"6888\":1}}],[\"缓存服务宕机也会导致缓存雪崩现象\",{\"1\":{\"3276\":1,\"6881\":1}}],[\"缓存在同一时间大面积的失效\",{\"1\":{\"3275\":1,\"6880\":1}}],[\"缓存穿透和缓存击穿有什么区别\",{\"0\":{\"6875\":1}}],[\"缓存穿透\",{\"1\":{\"4151\":1}}],[\"缓存穿透的先后顺序是怎么样的\",{\"0\":{\"4142\":1}}],[\"缓存穿透中\",{\"1\":{\"3271\":1,\"6876\":1}}],[\"缓存穿透说简单点就是大量请求的\",{\"1\":{\"3247\":1,\"6852\":1}}],[\"缓存无效\",{\"1\":{\"3250\":1,\"6855\":1}}],[\"缓存雪崩和缓存击穿有什么区别\",{\"0\":{\"6890\":1}}],[\"缓存雪崩和缓存击穿比较像\",{\"1\":{\"3286\":1,\"6891\":1}}],[\"缓存雪崩是指只大量热点key同时失效的情况\",{\"1\":{\"4148\":1}}],[\"缓存雪崩描述的就是这样一个简单的场景\",{\"1\":{\"3275\":1,\"6880\":1}}],[\"缓存雪崩\",{\"0\":{\"3245\":1,\"4142\":1,\"6850\":1},\"1\":{\"4143\":1}}],[\"缓存的内容将被清除\",{\"1\":{\"2382\":1}}],[\"缓存有两种实现方式\",{\"1\":{\"2226\":1}}],[\"缓存有哪些实现方式\",{\"0\":{\"2225\":1}}],[\"缓存查询时的逻辑\",{\"1\":{\"2186\":1}}],[\"缓存等内存消耗过高的情况\",{\"1\":{\"2135\":1}}],[\"缓存一致性解决\",{\"0\":{\"2038\":1,\"5743\":1}}],[\"缓存被均匀分布的概率就越大\",{\"1\":{\"2035\":1}}],[\"缓存中获取数据将不再从数据库查询\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"缓冲区根据对应的持久化方式\",{\"1\":{\"3162\":1,\"6818\":1}}],[\"缓冲区的状态\",{\"1\":{\"3167\":1,\"6823\":1}}],[\"缓冲区的数据写入到\",{\"1\":{\"3161\":1,\"6817\":1}}],[\"缓冲区的过程\",{\"1\":{\"1801\":1,\"6307\":1}}],[\"缓冲区\",{\"1\":{\"1804\":1,\"3155\":1,\"6310\":1,\"6811\":1}}],[\"缓冲区描述符和数据长度传到\",{\"1\":{\"1804\":1,\"6310\":1}}],[\"缓冲区里\",{\"1\":{\"1794\":1,\"1800\":1,\"6299\":1,\"6305\":1}}],[\"缓冲区里的数据\",{\"1\":{\"1792\":1,\"6297\":1}}],[\"缓冲区中\",{\"1\":{\"1791\":1,\"1804\":1,\"3160\":1,\"6296\":1,\"6310\":1,\"6816\":1}}],[\"种方案选择\",{\"1\":{\"6327\":1}}],[\"种数据淘汰策略\",{\"1\":{\"3180\":1,\"6838\":1}}],[\"种持久化方式\",{\"1\":{\"3140\":1,\"6796\":1}}],[\"种特殊数据类型\",{\"1\":{\"3095\":1,\"6751\":1}}],[\"种基础数据类型\",{\"1\":{\"3094\":1,\"6750\":1}}],[\"种隔离级别\",{\"1\":{\"3009\":1,\"6681\":1}}],[\"种隔离级别的支持不一样\",{\"1\":{\"3009\":1,\"6681\":1}}],[\"种类型\",{\"1\":{\"2377\":1}}],[\"种\",{\"1\":{\"1782\":1,\"6285\":1,\"7062\":1}}],[\"描述符上有可读事件发生时\",{\"1\":{\"1778\":1,\"6274\":1}}],[\"水平触发的意思是只要满足事件的条件\",{\"1\":{\"6277\":1}}],[\"水平触发\",{\"1\":{\"1777\":1,\"6272\":1}}],[\"增大\",{\"1\":{\"2590\":1}}],[\"增删改一般时间复杂度是\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"增加了轮询\",{\"1\":{\"3785\":1,\"5796\":1}}],[\"增加了通信开销\",{\"1\":{\"2292\":1}}],[\"增加和查询元素的时间复杂为o\",{\"1\":{\"2152\":1}}],[\"增加的方式是\",{\"1\":{\"939\":1}}],[\"增加\",{\"1\":{\"689\":1,\"945\":1,\"1340\":1,\"1930\":1,\"2686\":1,\"2705\":1,\"5456\":1,\"5664\":1}}],[\"线上项目出现卡顿或者延迟\",{\"1\":{\"2138\":1}}],[\"线上项目卡顿有延迟如何找到哪地方的异常\",{\"0\":{\"2137\":1,\"3542\":1},\"1\":{\"4436\":1}}],[\"线上项目发生oom\",{\"1\":{\"2128\":1}}],[\"线上项目oom了怎么定位\",{\"0\":{\"2114\":1},\"1\":{\"4435\":1}}],[\"线性结构\",{\"1\":{\"1772\":1}}],[\"线程方案的示意图如下\",{\"1\":{\"6382\":1}}],[\"线程试图获取锁也就是获取\",{\"1\":{\"5971\":1}}],[\"线程试图获取锁也就是获取对象监视器\",{\"1\":{\"3739\":1}}],[\"线程不安全需要注意\",{\"1\":{\"4039\":1}}],[\"线程通信等功能\",{\"1\":{\"3939\":1}}],[\"线程池各个参数的关系\",{\"1\":{\"6022\":1}}],[\"线程池用了threadlocal\",{\"1\":{\"4375\":1}}],[\"线程池被创建后如果没有任务过来\",{\"1\":{\"3918\":1,\"6066\":1}}],[\"线程池被创建后里面有线程吗\",{\"1\":{\"3917\":1,\"6065\":1}}],[\"线程池的7大参数以及具体用法\",{\"1\":{\"4311\":1,\"7136\":1}}],[\"线程池的过程\",{\"0\":{\"4214\":1}}],[\"线程池的线程数量不确定\",{\"1\":{\"3903\":1,\"6050\":1}}],[\"线程池的饱和策略有哪些\",{\"1\":{\"3868\":1,\"6023\":1}}],[\"线程池中若有空闲线程\",{\"1\":{\"3901\":1,\"6048\":1}}],[\"线程池中的线程数量大于\",{\"1\":{\"3863\":1,\"6017\":1}}],[\"线程池会先将任务放入workqueue中\",{\"1\":{\"3886\":1}}],[\"线程池处理任务的流程了解吗\",{\"1\":{\"3881\":1,\"6036\":1}}],[\"线程池常用的阻塞队列有哪些\",{\"1\":{\"3875\":1,\"6030\":1}}],[\"线程池\",{\"0\":{\"3847\":1,\"6001\":1}}],[\"线程会判断此时持有锁的线程是否就是自己\",{\"1\":{\"3797\":1,\"5809\":1}}],[\"线程并不会主动释放偏向锁\",{\"1\":{\"3797\":1,\"5809\":1}}],[\"线程并发执行的过程中\",{\"1\":{\"1985\":1,\"6244\":1}}],[\"线程对变量的所有操作都在工作内存中进行\",{\"1\":{\"3709\":1,\"5909\":1}}],[\"线程对象创建后\",{\"1\":{\"1854\":1,\"6230\":1}}],[\"线程工作内存保存了变量在主内存中的副本\",{\"1\":{\"3709\":1,\"5909\":1}}],[\"线程工作内存\",{\"1\":{\"3708\":1,\"5907\":1}}],[\"线程1进行compare\",{\"1\":{\"3674\":1,\"5842\":1}}],[\"线程1重新获取内存地址\",{\"1\":{\"3673\":1,\"5840\":1}}],[\"线程1开始提交更新\",{\"1\":{\"3672\":1,\"5838\":1}}],[\"线程1想要把内存地址为\",{\"1\":{\"3670\":1,\"5834\":1}}],[\"线程2捷足先登了\",{\"1\":{\"3671\":1,\"5836\":1}}],[\"线程开始执行第一步就是获取锁\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"线程获取锁\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"线程创建太多\",{\"1\":{\"3588\":1}}],[\"线程频繁地切换\",{\"1\":{\"3535\":1}}],[\"线程库\",{\"1\":{\"3449\":1}}],[\"线程模式后面会详细介绍到\",{\"1\":{\"3091\":1,\"6747\":1}}],[\"线程资源等\",{\"1\":{\"2623\":1}}],[\"线程接近交替运行\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"线程互斥\",{\"1\":{\"1989\":1,\"6248\":1}}],[\"线程间正确的协作\",{\"1\":{\"1986\":1,\"6245\":1}}],[\"线程之间存在协作的关系\",{\"1\":{\"1985\":1,\"6244\":1}}],[\"线程之间可以并发运行且共享相同的地址空间\",{\"1\":{\"1889\":1}}],[\"线程同步互斥和锁\",{\"0\":{\"3776\":1}}],[\"线程同步\",{\"1\":{\"1989\":1,\"6248\":1}}],[\"线程同步是两个或多个共享关键资源的线程的并发执行\",{\"1\":{\"1977\":1,\"6237\":1}}],[\"线程同样具有就绪\",{\"1\":{\"1902\":1}}],[\"线程与进程最大的区别在于\",{\"1\":{\"1910\":1}}],[\"线程与进程的比较如下\",{\"1\":{\"1899\":1}}],[\"线程相比进程能减少开销\",{\"1\":{\"1904\":1}}],[\"线程能减少并发执行的时间和空间开销\",{\"1\":{\"1903\":1}}],[\"线程是稀缺资源\",{\"1\":{\"3852\":1,\"6006\":1}}],[\"线程是不会主动释放偏向锁的\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"线程是调度的基本单位\",{\"1\":{\"1910\":1}}],[\"线程是\",{\"1\":{\"1900\":1}}],[\"线程是进程当中的一条执行流程\",{\"1\":{\"1891\":1}}],[\"线程的方案\",{\"1\":{\"6381\":1}}],[\"线程的方式不合适\",{\"1\":{\"6259\":1}}],[\"线程的挂起和唤醒\",{\"1\":{\"3808\":1,\"5819\":1}}],[\"线程的自旋超过了一定次数\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"线程的互斥同步方式有哪些\",{\"0\":{\"3777\":1,\"5788\":1}}],[\"线程的\",{\"1\":{\"3556\":1}}],[\"线程的终止时间比进程快\",{\"1\":{\"1906\":1}}],[\"线程的创建时间比进程快\",{\"1\":{\"1905\":1}}],[\"线程的缺点\",{\"1\":{\"1896\":1}}],[\"线程的优点\",{\"1\":{\"1892\":1}}],[\"线程管理\",{\"0\":{\"1881\":1}}],[\"线程执行的时候不会加锁\",{\"1\":{\"3665\":1,\"5828\":1}}],[\"线程执行完了或者因异常退出了run\",{\"1\":{\"1858\":1,\"6234\":1}}],[\"线程执行异常控制和处理\",{\"1\":{\"1379\":1}}],[\"线程重新转入就绪状态\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"线程\",{\"0\":{\"1814\":1,\"1841\":1,\"6341\":1,\"6380\":1},\"1\":{\"1994\":1,\"1999\":5,\"2898\":1,\"2899\":1,\"2900\":1,\"3558\":1,\"3674\":1,\"5842\":1,\"6326\":2,\"6328\":1,\"6329\":1,\"6330\":1,\"6331\":1,\"6332\":2,\"6334\":1,\"6336\":1,\"6570\":1,\"6571\":1,\"6572\":1}}],[\"线程信息等\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"线程安全的hashtable是如何实现的\",{\"1\":{\"1046\":1}}],[\"线程安全\",{\"1\":{\"859\":1,\"5489\":1}}],[\"线程遍历对象图\",{\"1\":{\"377\":1}}],[\"线程可以直接在自己的tlab上分配内存\",{\"1\":{\"273\":1}}],[\"线程恢复等基础功能都需要依赖这个计数器来完成\",{\"1\":{\"199\":1}}],[\"线程共享\",{\"1\":{\"187\":1}}],[\"线程私有\",{\"1\":{\"186\":1}}],[\"拷贝文件时进行流量控制\",{\"1\":{\"4724\":1}}],[\"拷贝到网卡的缓冲区里\",{\"1\":{\"1792\":1,\"6297\":1}}],[\"拷贝\",{\"1\":{\"1769\":1}}],[\"次数\",{\"1\":{\"3614\":1,\"3616\":1}}],[\"次数据拷贝\",{\"1\":{\"1800\":1,\"1805\":1,\"6305\":1,\"6311\":1}}],[\"次方\",{\"1\":{\"2477\":3}}],[\"次都是由\",{\"1\":{\"1807\":1,\"6314\":1}}],[\"次的数据拷贝过程\",{\"1\":{\"1807\":1,\"6314\":1}}],[\"次上下文切换和数据拷贝次数\",{\"1\":{\"1807\":2,\"6314\":2}}],[\"次上下文切换的开销\",{\"1\":{\"1799\":1,\"6304\":1}}],[\"次上下文切换\",{\"1\":{\"1794\":1,\"1800\":1,\"6299\":1,\"6305\":1}}],[\"次\",{\"1\":{\"1769\":2,\"1794\":1,\"6299\":1}}],[\"次回收标记\",{\"1\":{\"267\":1}}],[\"针对文件的覆盖和删除操作将会以历史版本的形式保存下来\",{\"1\":{\"4703\":1}}],[\"针对空值的缓存失效时间不宜过长\",{\"1\":{\"4153\":1}}],[\"针对热点缓存失效的情况\",{\"1\":{\"3281\":1,\"6886\":1}}],[\"针对热点数据提前预热\",{\"1\":{\"3268\":1,\"6873\":1}}],[\"针对单个文件操作\",{\"1\":{\"3162\":1,\"6818\":1}}],[\"针对当前读\",{\"1\":{\"3013\":1,\"6685\":1}}],[\"针对快照读\",{\"1\":{\"3012\":1,\"6684\":1}}],[\"针对不同的隔离级别\",{\"1\":{\"3003\":1,\"6675\":1}}],[\"针对不同的\",{\"1\":{\"2362\":1}}],[\"针对堆内存溢出\",{\"1\":{\"2121\":1}}],[\"针对性排查是否有循环调用\",{\"1\":{\"2121\":1}}],[\"针对于栈内存溢出\",{\"1\":{\"2121\":1}}],[\"针对\",{\"1\":{\"1763\":1,\"1764\":1,\"2435\":1,\"3278\":1,\"6883\":1}}],[\"规避资源耗尽的风险\",{\"1\":{\"3909\":1,\"6056\":1}}],[\"规定除了最初建立连接时的\",{\"1\":{\"2447\":1}}],[\"规定\",{\"1\":{\"1761\":1}}],[\"规范中定义的一个概念\",{\"1\":{\"282\":1}}],[\"规范中没有规定任何\",{\"1\":{\"201\":1}}],[\"规范中\",{\"1\":{\"197\":1}}],[\"直至其过期失效\",{\"1\":{\"4713\":1}}],[\"直至联合索引中全部字段匹配完成\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"直至完成\",{\"1\":{\"1941\":1}}],[\"直到目的地\",{\"1\":{\"7055\":1}}],[\"直到系统调用\",{\"1\":{\"6279\":1}}],[\"直到你取出了快递\",{\"1\":{\"6276\":1}}],[\"直到所有拦截器都执行完毕\",{\"1\":{\"4946\":1}}],[\"直到所有线程都到达屏障后\",{\"1\":{\"1983\":1,\"6242\":1}}],[\"直到队列中有任务了就取出来继续执行\",{\"1\":{\"3886\":1}}],[\"直到等待的时间超过了\",{\"1\":{\"3863\":1,\"6017\":1}}],[\"直到操作完成\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"直到锁被另外一个线程释放为止\",{\"1\":{\"3743\":1,\"5975\":1}}],[\"直到锁被释放\",{\"1\":{\"2882\":1,\"6554\":1}}],[\"直到找到满足特定条件的db\",{\"1\":{\"3045\":1}}],[\"直到拥有间隙锁的那个事务提交为止\",{\"1\":{\"2963\":1,\"6635\":1}}],[\"直到表结构变更完成\",{\"1\":{\"2894\":1,\"6566\":1}}],[\"直到执行完\",{\"1\":{\"2893\":1,\"6565\":1}}],[\"直到读取完成\",{\"1\":{\"2109\":1}}],[\"直到232\",{\"1\":{\"2022\":1}}],[\"直到进程退出或被阻塞\",{\"1\":{\"1913\":1}}],[\"直到线程进入就绪状态\",{\"1\":{\"1856\":1,\"6232\":1}}],[\"直到内核缓冲区数据被\",{\"1\":{\"1779\":1,\"6275\":1}}],[\"直到磁头到达该方向上的最后的磁道\",{\"1\":{\"1759\":1}}],[\"直接发车\",{\"1\":{\"5088\":1}}],[\"直接发送\",{\"1\":{\"3323\":1}}],[\"直接调用接口就行了\",{\"1\":{\"4532\":1,\"6149\":1}}],[\"直接专业场景面试\",{\"1\":{\"4381\":1}}],[\"直接说不熟悉\",{\"1\":{\"4352\":1}}],[\"直接打断说只介绍自己会的\",{\"1\":{\"4288\":1,\"7113\":1}}],[\"直接请求到数据库\",{\"1\":{\"4148\":1}}],[\"直接将jar\",{\"1\":{\"4083\":1}}],[\"直接将共享的内存页面通过附接\",{\"1\":{\"3471\":1}}],[\"直接丢弃掉\",{\"1\":{\"3872\":1,\"6027\":1}}],[\"直接通过getmap\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"直接用\",{\"1\":{\"3628\":1}}],[\"直接复用本地主机的操作系统\",{\"1\":{\"3310\":1}}],[\"直接返回请求参数错误信息给客户端\",{\"1\":{\"3254\":1,\"6859\":1}}],[\"直接返回已创建的单例对象\",{\"1\":{\"859\":1,\"5489\":1}}],[\"直接查该表是否有意向独占锁\",{\"1\":{\"2916\":1,\"6588\":1}}],[\"直接找到\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"直接能够判断出该图片应该存在于哪台缓存服务器上\",{\"1\":{\"2010\":1}}],[\"直接就可以在子线程将处理结果发送给客户端\",{\"1\":{\"1849\":1,\"6391\":1}}],[\"直接会将数据在缓存中的引用交给用户\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"直接给出结论\",{\"1\":{\"1050\":1}}],[\"直接在第⼀重判断就返回了单例\",{\"1\":{\"859\":1,\"5489\":1}}],[\"直接实例化对象\",{\"1\":{\"854\":1,\"5484\":1}}],[\"直接上菜\",{\"1\":{\"564\":1}}],[\"直接举例吧\",{\"1\":{\"512\":1,\"5391\":1,\"5400\":1}}],[\"直接举例吧接着看上面的正射\",{\"1\":{\"504\":1}}],[\"直接new对象就叫正射\",{\"1\":{\"501\":1,\"5388\":1}}],[\"直接生成的\",{\"1\":{\"418\":1,\"5309\":1}}],[\"直接从本地内存的堆中分配任意数量的内存\",{\"1\":{\"218\":1}}],[\"直接对虚拟机栈的操作只有两个\",{\"1\":{\"204\":1}}],[\"磁盘空间\",{\"1\":{\"3431\":1}}],[\"磁盘机器就宕机了\",{\"1\":{\"3156\":1,\"6812\":1}}],[\"磁盘调度算法\",{\"0\":{\"1746\":1}}],[\"磁头在每个方向上仅仅移动到最远的请求位置\",{\"1\":{\"1763\":1,\"1764\":1}}],[\"磁头在一个方向上移动\",{\"1\":{\"1759\":1}}],[\"顾名思义\",{\"1\":{\"1754\":1,\"1913\":1,\"1936\":1}}],[\"环的倾斜在极端情况下\",{\"1\":{\"2035\":1}}],[\"环的倾斜\",{\"1\":{\"2034\":1}}],[\"环的倾斜与虚拟节点\",{\"0\":{\"2033\":1}}],[\"环上必定有一个点与这个整数对应\",{\"1\":{\"2025\":1}}],[\"环\",{\"1\":{\"2016\":1}}],[\"环路等待条件指的是\",{\"1\":{\"1995\":1}}],[\"环路等待条件\",{\"1\":{\"1995\":1}}],[\"环形链表\",{\"1\":{\"1739\":1}}],[\"环境变量\",{\"1\":{\"1346\":1,\"1383\":1,\"3294\":1,\"5671\":1}}],[\"环境下无法执行\",{\"1\":{\"596\":1}}],[\"环境来说\",{\"1\":{\"347\":1}}],[\"困难的是\",{\"1\":{\"1736\":1}}],[\"历史记录区\",{\"1\":{\"3358\":1}}],[\"历史连接\",{\"1\":{\"2547\":1}}],[\"历史\",{\"1\":{\"1734\":1}}],[\"置换在\",{\"1\":{\"1726\":1}}],[\"需改用新的\",{\"1\":{\"2200\":1}}],[\"需调入新页面而内存已满时\",{\"1\":{\"1718\":1}}],[\"需要经过经典的\",{\"1\":{\"7072\":1}}],[\"需要客户端自己发送请求来获取相关资源\",{\"1\":{\"7069\":1}}],[\"需要客户端用新的\",{\"1\":{\"2199\":1}}],[\"需要给每个频道缓存一份数据\",{\"1\":{\"4990\":1}}],[\"需要考虑数据持久化的问题\",{\"1\":{\"4872\":1,\"7250\":1}}],[\"需要指向apis这个包\",{\"1\":{\"4859\":1}}],[\"需要指定\",{\"1\":{\"2216\":1}}],[\"需要人工审核\",{\"1\":{\"4857\":2}}],[\"需要实现\",{\"1\":{\"4744\":1}}],[\"需要定义mapper\",{\"1\":{\"4744\":1}}],[\"需要定期对\",{\"1\":{\"3163\":1,\"6819\":1}}],[\"需要自行部署和维护\",{\"1\":{\"4738\":1}}],[\"需要补充说明的一点是\",{\"1\":{\"4651\":1,\"6224\":1}}],[\"需要保证具有相同的数据\",{\"1\":{\"4577\":1}}],[\"需要使用\",{\"1\":{\"4547\":1}}],[\"需要使用特定的内核机制\",{\"1\":{\"3437\":1}}],[\"需要搞清楚traceid和spanid以及抽样\",{\"1\":{\"4513\":1,\"6130\":1}}],[\"需要别的组来完成\",{\"1\":{\"4438\":1}}],[\"需要出差\",{\"1\":{\"4393\":1}}],[\"需要手动配置开启和清空\",{\"1\":{\"4071\":1}}],[\"需要重新获取新的jwt才能继续访问\",{\"1\":{\"4064\":1}}],[\"需要重点掌握\",{\"1\":{\"3683\":1,\"5852\":1}}],[\"需要调用下面的方法\",{\"1\":{\"3922\":1,\"6072\":1}}],[\"需要什么设置\",{\"1\":{\"3921\":1,\"6071\":1}}],[\"需要等待全局安全点\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"需要拉到网页最底部\",{\"1\":{\"3581\":1}}],[\"需要研发人员有大量的经验\",{\"1\":{\"3530\":1}}],[\"需要提交的文件修改通通放到暂存区\",{\"1\":{\"3368\":1}}],[\"需要提交后才能消除冲突\",{\"1\":{\"3341\":1}}],[\"需要提前从class中调用getconstructor\",{\"1\":{\"532\":1,\"5420\":1}}],[\"需要额外的空间和计算开销\",{\"1\":{\"3076\":1,\"6727\":1}}],[\"需要额外注意的一点是\",{\"1\":{\"788\":1}}],[\"需要判断插入位置是否已被其他事务加了间隙锁\",{\"1\":{\"2962\":1,\"6634\":1}}],[\"需要先下载才能审核\",{\"1\":{\"4849\":1,\"7238\":1}}],[\"需要先对表加上\",{\"1\":{\"2909\":1,\"6581\":1}}],[\"需要先在表级别加上一个\",{\"1\":{\"2907\":1,\"2908\":1,\"6579\":1,\"6580\":1}}],[\"需要先使用javac编译\",{\"1\":{\"490\":1,\"5377\":1}}],[\"需要注意的是刚刚\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"需要注意的是布隆过滤器可能会存在误判的情况\",{\"1\":{\"3255\":1,\"6860\":1}}],[\"需要注意的是\",{\"1\":{\"2881\":1,\"4153\":1,\"6553\":1}}],[\"需要查询\",{\"1\":{\"2815\":1,\"6487\":1}}],[\"需要查询主键\",{\"1\":{\"2815\":1,\"6487\":1}}],[\"需要服务端回一个\",{\"1\":{\"2553\":1}}],[\"需要根据实际情况来选择合适的误判率和期望插入数量\",{\"1\":{\"2179\":1}}],[\"需要解决\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"需要有一定的策略\",{\"1\":{\"2071\":1,\"5776\":1}}],[\"需要有一种新的实体\",{\"1\":{\"1886\":1}}],[\"需要有对应的迁移服务进行定时迁移\",{\"1\":{\"2064\":1,\"5769\":1}}],[\"需要刷新下缓存\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"需要将服务器b移除\",{\"1\":{\"2031\":1}}],[\"需要通过下面这个系统调用\",{\"1\":{\"1952\":1}}],[\"需要进行\",{\"1\":{\"1769\":1}}],[\"需要进行处理\",{\"1\":{\"471\":1,\"5366\":1}}],[\"需要选出新的leader\",{\"1\":{\"1534\":1}}],[\"需要同步复制保存的follower\",{\"1\":{\"1533\":1}}],[\"需要接收服务\",{\"1\":{\"1413\":1}}],[\"需要一个实现handlerinterceptor接口的拦截器实例\",{\"1\":{\"1400\":1}}],[\"需要创建一个配置类并实现\",{\"1\":{\"1395\":1}}],[\"需要顺序调用\",{\"1\":{\"1373\":1}}],[\"需要在内存中维护一个所有页面的链表\",{\"1\":{\"1735\":1}}],[\"需要在\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"需要说明的是\",{\"1\":{\"957\":1}}],[\"需要增强的方法\",{\"1\":{\"911\":1,\"5529\":1}}],[\"需要增强的对象\",{\"1\":{\"911\":1,\"5529\":1}}],[\"需要对每个目标类都单独写一个代理类\",{\"1\":{\"890\":1,\"5508\":1}}],[\"需要停顿\",{\"1\":{\"363\":1,\"365\":1}}],[\"秒\",{\"1\":{\"1716\":1}}],[\"秒内就可以处理上千个请求\",{\"1\":{\"6260\":1}}],[\"秒内\",{\"1\":{\"1715\":1}}],[\"划分这两个区域后\",{\"1\":{\"1712\":1}}],[\"属于密钥持有者\",{\"1\":{\"5094\":1}}],[\"属于操作系统层面的虚拟化技术\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"属于行级别锁\",{\"1\":{\"2964\":1,\"6636\":1}}],[\"属于服务器端的错误码\",{\"1\":{\"2208\":1}}],[\"属于内存空间里的数据\",{\"1\":{\"1708\":1}}],[\"属性的拷贝\",{\"1\":{\"4857\":1}}],[\"属性的值而不是空字符来判断字符串是否结束\",{\"1\":{\"3101\":1,\"6757\":1}}],[\"属性\",{\"1\":{\"3130\":1,\"6786\":1}}],[\"属性记录了字符串长度\",{\"1\":{\"3102\":1,\"6758\":1}}],[\"属性实现的\",{\"1\":{\"2919\":1,\"6591\":1}}],[\"属性时\",{\"1\":{\"1279\":1,\"5621\":1}}],[\"属性指定了\",{\"1\":{\"1188\":1}}],[\"属性指定了初始化方法\",{\"1\":{\"1184\":1}}],[\"存放数据的\",{\"1\":{\"3769\":1,\"6000\":1}}],[\"存放系统或程序运行过程中的数据文件\",{\"1\":{\"3495\":1}}],[\"存放在内核中并由消息队列标识符标识\",{\"1\":{\"3463\":1}}],[\"存放在内存中并由消息队列标识符标识\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"存放在\",{\"1\":{\"3101\":1,\"4815\":1,\"6757\":1,\"7212\":1}}],[\"存储技术选型优化\",{\"1\":{\"7198\":1}}],[\"存储起来\",{\"1\":{\"5004\":1,\"7286\":1}}],[\"存储系统中的冷数据\",{\"1\":{\"5002\":1,\"7284\":1}}],[\"存储数据库中是一种数据安全的考虑\",{\"1\":{\"4872\":1,\"7250\":1}}],[\"存储纯文本内容\",{\"1\":{\"4857\":1}}],[\"存储\",{\"1\":{\"4552\":1,\"4842\":1,\"7231\":1}}],[\"存储到阿里云oss\",{\"1\":{\"4317\":1,\"7142\":1}}],[\"存储库中提取我们想要的镜像并创建一个容器\",{\"1\":{\"3318\":1}}],[\"存储字节越小\",{\"1\":{\"3071\":1,\"6722\":1}}],[\"存储01的为二进制数组\",{\"1\":{\"2165\":1}}],[\"存储空间小\",{\"1\":{\"2154\":1}}],[\"存储进程关注的\",{\"1\":{\"1772\":1}}],[\"存储引擎为每行数据添加了三个\",{\"1\":{\"3027\":1,\"6693\":1}}],[\"存储引擎提供了个\",{\"1\":{\"2927\":1,\"6599\":1}}],[\"存储引擎提供了一种轻量级的锁来实现自增\",{\"1\":{\"2925\":1,\"6597\":1}}],[\"存储引擎默认的事务隔离级别正是可重复读\",{\"1\":{\"2869\":1,\"6541\":1}}],[\"存储引擎中\",{\"1\":{\"2813\":1,\"3041\":1,\"6485\":1,\"6709\":1}}],[\"存储引擎\",{\"1\":{\"2770\":1,\"6439\":1}}],[\"存储引擎是在一个\",{\"1\":{\"1710\":1}}],[\"存储引擎设计了一个缓冲池\",{\"1\":{\"1708\":1}}],[\"存在以下三种角色的节点\",{\"1\":{\"4602\":1}}],[\"存在时间差问题\",{\"1\":{\"3568\":1}}],[\"存在于数据库中\",{\"1\":{\"3265\":1,\"3272\":1,\"6870\":1,\"6877\":1}}],[\"存在于实际的磁盘介质或者文件系统\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"存在的话才会走下面的流程\",{\"1\":{\"3254\":1,\"6859\":1}}],[\"存在tcp头部\",{\"1\":{\"2469\":1,\"2471\":1}}],[\"存在ip头部\",{\"1\":{\"2468\":1,\"2470\":1}}],[\"存在\",{\"1\":{\"2316\":1,\"2766\":1,\"6435\":1}}],[\"存在安全风险的问题\",{\"1\":{\"2306\":1}}],[\"存在一种叠加\",{\"1\":{\"2154\":1}}],[\"存在返回值\",{\"1\":{\"1375\":1}}],[\"存在情况\",{\"1\":{\"391\":1}}],[\"才可以把子查询转化为关联查询进行优化\",{\"1\":{\"6740\":1}}],[\"才可进入加密报文传输\",{\"1\":{\"2307\":1}}],[\"才需要去实现它\",{\"1\":{\"3653\":1,\"5896\":1}}],[\"才有\",{\"1\":{\"2602\":1}}],[\"才有机会转到运行状态\",{\"1\":{\"1856\":1,\"6232\":1}}],[\"才能得到处理\",{\"1\":{\"6184\":1}}],[\"才能进行\",{\"1\":{\"4609\":1}}],[\"才能返回\",{\"1\":{\"3621\":1}}],[\"才能继续执行\",{\"1\":{\"3000\":1,\"6672\":1}}],[\"才能确保双方的初始序列号能被可靠的同步\",{\"1\":{\"2553\":1}}],[\"才能连接\",{\"1\":{\"2457\":1}}],[\"才能发起带有协商缓存字段的请求\",{\"1\":{\"2248\":1}}],[\"才调度较低优先级的队列中的进程运行\",{\"1\":{\"1942\":1}}],[\"才调换方向\",{\"1\":{\"1759\":1}}],[\"才处理磁道访问请求\",{\"1\":{\"1761\":1}}],[\"才将页从\",{\"1\":{\"1706\":1}}],[\"才将页插入\",{\"1\":{\"1704\":1,\"1712\":1}}],[\"才会提交该操作并返回给客户端\",{\"1\":{\"4587\":1}}],[\"才会正式对数据的冲突与否进行检测\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"才会将内存地址\",{\"1\":{\"3675\":1,\"5844\":1}}],[\"才会把\",{\"1\":{\"2922\":1,\"6594\":1}}],[\"才会停止匹配\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"才会继续从队列中选择第一个进程接着运行\",{\"1\":{\"1913\":1}}],[\"才会继续查常规的页表\",{\"1\":{\"1674\":1}}],[\"才会继续下一条消息的发送\",{\"1\":{\"1517\":1}}],[\"才会进⼊同步块\",{\"1\":{\"859\":1,\"5489\":1}}],[\"放在\",{\"1\":{\"4815\":1,\"7212\":1}}],[\"放在spring\",{\"1\":{\"4182\":1}}],[\"放回给调用者\",{\"1\":{\"4536\":1,\"6151\":1}}],[\"放到\",{\"1\":{\"1694\":1}}],[\"放入服务器\",{\"1\":{\"4083\":1}}],[\"放入\",{\"1\":{\"1186\":1}}],[\"剩下的百度就行\",{\"1\":{\"4392\":1}}],[\"剩下的中间部分是未定义的\",{\"1\":{\"1690\":1}}],[\"剩下的\",{\"1\":{\"1689\":1,\"6333\":1}}],[\"芯片\",{\"1\":{\"1673\":1}}],[\"芯片里面\",{\"1\":{\"1673\":1}}],[\"芯片中的内存管理单元\",{\"1\":{\"1634\":1}}],[\"转移到了主机\",{\"1\":{\"7052\":1}}],[\"转移之后\",{\"1\":{\"3226\":1}}],[\"转到人工审核\",{\"1\":{\"4850\":1,\"7239\":1}}],[\"转译了业务方法的调用过程\",{\"1\":{\"4026\":1}}],[\"转储文件路径\",{\"1\":{\"3567\":1}}],[\"转换方法\",{\"1\":{\"3556\":1}}],[\"转换成\",{\"1\":{\"1201\":1,\"5553\":1}}],[\"转换成一个对象\",{\"1\":{\"1200\":1,\"5552\":1}}],[\"转为十六进制\",{\"1\":{\"3556\":1}}],[\"转账\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"转而去运行优先级高的队列\",{\"1\":{\"1938\":1}}],[\"转址旁路缓存\",{\"1\":{\"1672\":1}}],[\"位自增\",{\"1\":{\"4603\":1}}],[\"位分别为\",{\"1\":{\"3510\":1}}],[\"位存储\",{\"1\":{\"3095\":1,\"6751\":1}}],[\"位数字\",{\"1\":{\"3075\":1,\"6726\":1}}],[\"位为文件权限字段\",{\"1\":{\"3499\":1}}],[\"位为文件类型字段\",{\"1\":{\"3499\":1}}],[\"位为\",{\"1\":{\"2450\":1}}],[\"位的文件权限字段中\",{\"1\":{\"3510\":1}}],[\"位的\",{\"1\":{\"2375\":1}}],[\"位的系统\",{\"1\":{\"1665\":1}}],[\"位作为一组\",{\"1\":{\"2374\":1,\"2375\":1}}],[\"位正整数来表示\",{\"1\":{\"2374\":1}}],[\"位于最高处\",{\"1\":{\"1689\":1}}],[\"位系统的内核空间和用户空间都是\",{\"1\":{\"1690\":1}}],[\"位系统的内核空间占用\",{\"1\":{\"1689\":1}}],[\"位系统\",{\"1\":{\"1687\":1}}],[\"位和\",{\"1\":{\"1687\":1}}],[\"位和页大小\",{\"1\":{\"1663\":1}}],[\"位运算\",{\"1\":{\"1017\":1}}],[\"段\",{\"1\":{\"2450\":1}}],[\"段页式地址变换中要得到物理地址须经过三次内存访问\",{\"1\":{\"1681\":1}}],[\"段页式内存管理实现的方式\",{\"1\":{\"1676\":1}}],[\"段页式内存管理\",{\"0\":{\"1675\":1}}],[\"段表中的地址是页表的起始地址\",{\"1\":{\"1680\":1}}],[\"段表里面保存的是这个段的基地址\",{\"1\":{\"1644\":1}}],[\"段内页号和页内位移三部分组成\",{\"1\":{\"1679\":1}}],[\"段的界限和特权等级等\",{\"1\":{\"1644\":1}}],[\"段选择子里面最重要的是段号\",{\"1\":{\"1644\":1}}],[\"段选择子就保存在段寄存器里面\",{\"1\":{\"1644\":1}}],[\"段选择因子和段内偏移量\",{\"1\":{\"1642\":1,\"1643\":1}}],[\"段落\",{\"1\":{\"25\":1,\"26\":1,\"5138\":1,\"5139\":1}}],[\"操作来加锁和解锁\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"操作可能无法感知到\",{\"1\":{\"3685\":1,\"5854\":1}}],[\"操作的速度是很快的\",{\"1\":{\"6361\":1}}],[\"操作的一个经典问题\",{\"1\":{\"3685\":1,\"5854\":1}}],[\"操作的方式将创建的节点加入同步队列的尾部\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"操作的记录只对事务本身可见\",{\"1\":{\"3042\":1,\"6710\":1}}],[\"操作后不关闭流\",{\"1\":{\"3589\":1}}],[\"操作中产生的\",{\"1\":{\"3042\":1,\"6710\":1}}],[\"操作在内部被视为更新\",{\"1\":{\"3028\":1,\"6694\":1}}],[\"操作时\",{\"1\":{\"2890\":1,\"2892\":1,\"6562\":1,\"6564\":1}}],[\"操作一次\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"操作是用在离开共享资源之后\",{\"1\":{\"1967\":1}}],[\"操作是用在进入共享资源之前\",{\"1\":{\"1967\":1}}],[\"操作\",{\"0\":{\"6739\":1},\"1\":{\"1965\":1,\"1966\":1,\"1988\":1,\"2223\":1,\"2799\":1,\"2894\":1,\"2903\":1,\"3042\":1,\"3174\":1,\"3572\":1,\"3674\":1,\"3679\":1,\"5842\":1,\"5848\":1,\"6247\":1,\"6279\":1,\"6471\":1,\"6566\":1,\"6575\":1,\"6710\":1,\"6832\":1}}],[\"操作系统\",{\"0\":{\"6225\":1,\"6226\":1,\"7309\":1},\"1\":{\"3999\":1}}],[\"操作系统通常会把第一次通过\",{\"1\":{\"2381\":1}}],[\"操作系统必须提供实现进程协作的措施和方法\",{\"1\":{\"1986\":1,\"6245\":1}}],[\"操作系统重启\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"操作系统直接将内核缓冲区的数据拷贝到\",{\"1\":{\"1791\":1,\"6296\":1}}],[\"操作系统内核与用户空间就不需要再进行任何的数据拷贝操作\",{\"1\":{\"1788\":1,\"6292\":1}}],[\"操作系统怎么避免缓存污染造成的影响\",{\"0\":{\"1705\":1}}],[\"操作系统实现两个了\",{\"1\":{\"1701\":1}}],[\"操作系统是会对读取的文件数据进行缓存的\",{\"1\":{\"1699\":1}}],[\"操作系统的缓存\",{\"0\":{\"1698\":1}}],[\"操作系统中\",{\"1\":{\"1687\":1}}],[\"操作系统提供了更好的安全性\",{\"1\":{\"1638\":1}}],[\"操作系统引入了虚拟内存\",{\"1\":{\"1634\":1}}],[\"操作系统会提供一种机制\",{\"1\":{\"1629\":1}}],[\"操作数栈\",{\"1\":{\"212\":1}}],[\"局部性原理\",{\"0\":{\"1619\":1}}],[\"局部变量表\",{\"1\":{\"211\":1}}],[\"充值转账两个渠道在同一个时间进行余额变更\",{\"1\":{\"1587\":1}}],[\"却被自动提交了\",{\"1\":{\"4675\":1,\"7194\":1}}],[\"却在这个时候挂了\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"却能提供较好的性能和相当可观的压缩比\",{\"1\":{\"1572\":1}}],[\"却为业务模块所共同调用的逻辑或责任\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"压根就没有使用共享内存这个玩意\",{\"1\":{\"6271\":1}}],[\"压缩性\",{\"1\":{\"5031\":1}}],[\"压缩列表数据结构已经废弃了\",{\"1\":{\"3128\":1,\"3136\":1,\"6784\":1,\"6792\":1}}],[\"压缩文件这样的二进制数据\",{\"1\":{\"3101\":1,\"6757\":1}}],[\"压缩\",{\"1\":{\"2729\":1,\"6398\":1}}],[\"压缩比也很客观\",{\"1\":{\"1574\":1}}],[\"压缩和解压缩速度较快\",{\"1\":{\"1574\":1}}],[\"压缩算法\",{\"1\":{\"1569\":1}}],[\"压栈\",{\"1\":{\"204\":1}}],[\"记录资源的访问信息\",{\"1\":{\"4720\":1}}],[\"记录的内容是目录下所有文件的\",{\"1\":{\"3490\":1}}],[\"记录的引用\",{\"1\":{\"3489\":1}}],[\"记录\",{\"1\":{\"3235\":1,\"4950\":1}}],[\"记录trx\",{\"1\":{\"3051\":2}}],[\"记录并维护系统当前活跃事务的id\",{\"1\":{\"3044\":1}}],[\"记录下来\",{\"1\":{\"3035\":1,\"6702\":1}}],[\"记录数量\",{\"1\":{\"2990\":1,\"6662\":1}}],[\"记录锁+间隙锁\",{\"1\":{\"3013\":1,\"6685\":1}}],[\"记录锁\",{\"1\":{\"2944\":1,\"6616\":1}}],[\"记录错误信息\",{\"1\":{\"1617\":1}}],[\"记录错误的提交偏移量\",{\"1\":{\"1613\":1}}],[\"记录提交失败的异常\",{\"1\":{\"1610\":1}}],[\"记录异常信息到日志表中\",{\"1\":{\"1547\":1}}],[\"记录了map中kv对的个数\",{\"1\":{\"965\":1}}],[\"极端情况\",{\"1\":{\"1537\":1}}],[\"选\",{\"0\":{\"4644\":1,\"6217\":1},\"1\":{\"4646\":1,\"6219\":1}}],[\"选项\",{\"1\":{\"2495\":2,\"2513\":1,\"2627\":1}}],[\"选为leader\",{\"1\":{\"1538\":1,\"1539\":1}}],[\"选举方式之后我们再来了解一下\",{\"1\":{\"6195\":1}}],[\"选举算法\",{\"1\":{\"6186\":1}}],[\"选举可以分为两个不同的阶段\",{\"1\":{\"4614\":1,\"6187\":1}}],[\"选举\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"选举的票数大于等于num\",{\"1\":{\"3210\":1}}],[\"选举的原则如下\",{\"1\":{\"1534\":1}}],[\"选举时优先从isr中选定\",{\"1\":{\"1535\":1}}],[\"选择建议\",{\"1\":{\"4795\":1}}],[\"选择客车还是小轿车进行自动驾驶开发\",{\"1\":{\"4448\":1}}],[\"选择复制偏移量最大\",{\"1\":{\"3218\":1}}],[\"选择salve\",{\"1\":{\"3217\":1}}],[\"选择合适的字段创建索引\",{\"1\":{\"2823\":1,\"6495\":1}}],[\"选择最长时间没有被访问的页面进行置换\",{\"1\":{\"1733\":1}}],[\"选择在内存驻留时间很长的页面进行中置换\",{\"1\":{\"1731\":1}}],[\"选择未来最长时间不访问的页面\",{\"1\":{\"1727\":1}}],[\"选择被置换的物理页面\",{\"1\":{\"1718\":1}}],[\"选择第一个活过来的replication\",{\"1\":{\"1539\":1}}],[\"选择一个适合的\",{\"1\":{\"1205\":1,\"5557\":1}}],[\"选择一个合适的handleradapter\",{\"1\":{\"1198\":1,\"5550\":1}}],[\"选择\",{\"0\":{\"2040\":1,\"5745\":1},\"1\":{\"639\":1,\"1744\":1,\"4650\":1,\"6223\":1}}],[\"集中存放镜像文件\",{\"1\":{\"3296\":1}}],[\"集群中\",{\"1\":{\"4632\":1,\"6175\":1}}],[\"集群中的一个节点\",{\"1\":{\"4594\":1}}],[\"集群管理\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"集群\",{\"1\":{\"3279\":1,\"6884\":1}}],[\"集群由多个\",{\"1\":{\"1525\":1}}],[\"集合框架\",{\"1\":{\"3940\":1}}],[\"集合给内核\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"集合\",{\"0\":{\"3116\":1,\"6772\":1},\"1\":{\"1772\":1,\"1776\":1,\"3094\":1,\"6266\":1,\"6750\":1}}],[\"集合运算等功能\",{\"1\":{\"718\":1}}],[\"收到\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"收到了查询分组之后\",{\"1\":{\"7040\":1}}],[\"收到了发现自己的投票已经超过半数就把自己设为\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"收到了\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"收到之后发现和自己的一样无需做更改\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"收到消息的\",{\"1\":{\"4607\":1}}],[\"收到消息响应后处理结果\",{\"1\":{\"1518\":1}}],[\"收到的数据的序列号\",{\"1\":{\"2445\":1}}],[\"收到顶级域名服务器的地址后\",{\"1\":{\"2392\":1,\"7096\":1}}],[\"收到来自本地\",{\"1\":{\"2391\":1,\"7095\":1}}],[\"收到事件后通过\",{\"1\":{\"1823\":1,\"1835\":1,\"1843\":1,\"6352\":1,\"6367\":1,\"6385\":1}}],[\"收集器线程都可以与用户线程一起工作\",{\"1\":{\"367\":1}}],[\"收集器的运作大致可划分为以下几个步骤\",{\"1\":{\"375\":1}}],[\"收集器的老年代版本\",{\"1\":{\"357\":1,\"359\":1}}],[\"收集器的多线程版本\",{\"1\":{\"350\":1}}],[\"收集器配合工作\",{\"1\":{\"351\":1}}],[\"收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内\",{\"1\":{\"348\":1}}],[\"收集器\",{\"0\":{\"344\":1,\"349\":1,\"353\":1,\"356\":1,\"358\":1,\"360\":1,\"371\":1},\"1\":{\"351\":1,\"355\":1,\"372\":1}}],[\"达到一定的次数无法调用\",{\"1\":{\"6138\":1}}],[\"达到压缩的目的\",{\"1\":{\"3163\":1,\"6819\":1}}],[\"达到最佳的传输效能\",{\"1\":{\"2569\":1}}],[\"达到设定条件后再批量进行发送\",{\"1\":{\"1514\":1}}],[\"达到7的概率为0\",{\"1\":{\"930\":1,\"5447\":1}}],[\"拆分多个queue\",{\"1\":{\"1509\":1,\"6965\":1}}],[\"隔开\",{\"1\":{\"2375\":1}}],[\"隔一段时间\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"隔离服务之间相互影响\",{\"1\":{\"4529\":1,\"6146\":1}}],[\"隔离级别是\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"隔离级别是在\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"隔离级别是可以解决幻读问题发生的\",{\"1\":{\"2737\":1,\"6406\":1}}],[\"隔离级别的事务来说\",{\"1\":{\"3015\":1,\"3016\":1,\"3017\":1,\"6687\":1,\"6688\":1,\"6689\":1}}],[\"隔离级别会影响性能\",{\"1\":{\"3010\":1,\"6682\":1}}],[\"隔离级别来避免幻读现象的发生\",{\"1\":{\"3010\":1,\"6682\":1}}],[\"隔离级别下\",{\"1\":{\"3004\":1,\"3005\":1,\"3006\":1,\"3007\":1,\"3010\":1,\"6676\":1,\"6677\":1,\"6678\":1,\"6679\":1,\"6682\":1}}],[\"隔离级别越高\",{\"1\":{\"2996\":1,\"6668\":1}}],[\"隔离级别\",{\"1\":{\"1231\":2,\"5583\":2}}],[\"隔离性是通过\",{\"1\":{\"2978\":1,\"6650\":1}}],[\"隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致\",{\"1\":{\"2973\":1,\"6645\":1}}],[\"隔离性\",{\"1\":{\"1222\":1,\"2973\":1,\"5574\":1,\"6645\":1}}],[\"变为了正常状态\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"变为\",{\"1\":{\"4616\":1,\"4619\":1,\"6189\":1,\"6192\":1}}],[\"变成从节点\",{\"1\":{\"3225\":1}}],[\"变化不频繁的情况\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"变化如下\",{\"1\":{\"2697\":1}}],[\"变化的规则\",{\"1\":{\"2671\":1}}],[\"变得可运行\",{\"1\":{\"1854\":1,\"6230\":1}}],[\"变动较小\",{\"1\":{\"1492\":1,\"6945\":1}}],[\"变量符合我们上面提到的空间局部性\",{\"1\":{\"1627\":1}}],[\"变量\",{\"1\":{\"516\":1,\"3763\":1,\"3765\":1,\"5404\":1,\"5994\":1,\"5996\":1}}],[\"粘性的\",{\"1\":{\"1485\":2,\"6937\":2}}],[\"节点之间通过网络通信进行协作\",{\"1\":{\"4573\":1}}],[\"节点是红色或黑色\",{\"1\":{\"694\":1,\"5461\":1}}],[\"节流以及缓冲区大小受限等缺点\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"节省因分区分配变化带来的开销\",{\"1\":{\"1485\":1,\"6937\":1}}],[\"路由器接口将对\",{\"1\":{\"7055\":1}}],[\"路由器接口如未能找到主机\",{\"1\":{\"7054\":1}}],[\"路由器接口查询\",{\"1\":{\"7053\":1}}],[\"路由器的多个接口都各自维护一个\",{\"1\":{\"7045\":1}}],[\"路由器作为互联设备\",{\"1\":{\"7045\":1}}],[\"路由到不同分区\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"路径中边的条数称为路径长度\",{\"1\":{\"666\":1}}],[\"路径长度\",{\"1\":{\"664\":1}}],[\"路径\",{\"1\":{\"664\":1}}],[\"路径导航\",{\"1\":{\"14\":1,\"131\":1,\"5127\":1,\"5244\":1}}],[\"疑问\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"既不存在于缓存中\",{\"1\":{\"3271\":1,\"6876\":1}}],[\"既能提升并发性\",{\"1\":{\"2935\":1,\"6607\":1}}],[\"既然有更好的可以用\",{\"1\":{\"6994\":1}}],[\"既然为每个请求分配一个进程\",{\"1\":{\"6259\":1}}],[\"既然是基于多版本\",{\"1\":{\"3024\":1}}],[\"既然备份数据库数据的时候\",{\"1\":{\"2865\":1,\"6537\":1}}],[\"既然哈希表这么快\",{\"1\":{\"2757\":1,\"6426\":1}}],[\"既然\",{\"1\":{\"2414\":1}}],[\"既然服务器没有记忆能力\",{\"1\":{\"2274\":1}}],[\"既要满足我们的要求\",{\"1\":{\"2171\":1}}],[\"既没有指定partition\",{\"1\":{\"1465\":1,\"6913\":1}}],[\"既可以是固定大小\",{\"1\":{\"228\":1}}],[\"利于集群数据的均衡\",{\"1\":{\"1459\":1,\"6907\":1}}],[\"利用mysql的唯一键约束\",{\"1\":{\"6954\":1}}],[\"利用她们的技术\",{\"1\":{\"5036\":1}}],[\"利用tomcat的access\",{\"1\":{\"5015\":1}}],[\"利用dubbo可以很方便地实现服务化\",{\"1\":{\"3983\":1}}],[\"利用系统调用mknod\",{\"1\":{\"3468\":1}}],[\"利用系统调用pipe\",{\"1\":{\"3468\":1}}],[\"利用镜像实现根目录环境的隔离\",{\"1\":{\"3312\":1}}],[\"利用cgroup实现资源限制\",{\"1\":{\"3312\":1}}],[\"利用\",{\"1\":{\"3107\":1,\"6763\":1}}],[\"利用多个不同的哈希函数将一个元素映射到多个不同的位\",{\"1\":{\"2149\":1}}],[\"利用各类工具进行分析\",{\"1\":{\"2126\":1}}],[\"利用消息队列做一个通用的\",{\"1\":{\"1410\":1}}],[\"利用依赖注入完成\",{\"1\":{\"1171\":1}}],[\"利用率不够高\",{\"1\":{\"369\":1}}],[\"天和\",{\"1\":{\"1455\":1,\"6903\":1}}],[\"旧的预期值a=1\",{\"1\":{\"3670\":1,\"5834\":1}}],[\"旧的预期值a\",{\"1\":{\"3668\":1,\"5831\":1}}],[\"旧的一代内存包含那些经过许多轮小型\",{\"1\":{\"236\":1}}],[\"旧\",{\"1\":{\"2543\":1,\"2547\":1}}],[\"旧消息就会过期并被删除\",{\"1\":{\"1452\":1,\"6900\":1}}],[\"某些节点之间不连通了\",{\"1\":{\"4643\":1,\"6216\":1}}],[\"某些异常情况下会导致消息丢失\",{\"1\":{\"1514\":1}}],[\"某个数据流发生丢包了\",{\"1\":{\"7073\":1}}],[\"某个节点被设置为head之后\",{\"1\":{\"3638\":1,\"5879\":1}}],[\"某个线程进入\",{\"0\":{\"3623\":1}}],[\"某个时间点\",{\"1\":{\"3145\":1,\"6801\":1}}],[\"某个机房可能断电\",{\"0\":{\"2067\":1,\"5772\":1}}],[\"某个\",{\"1\":{\"1445\":1}}],[\"某一节点的网络出现异常会导致整个事务处于阻塞状态\",{\"1\":{\"4484\":1,\"6117\":1}}],[\"某一范围的键\",{\"1\":{\"1084\":1}}],[\"某一值的邻近元素等\",{\"1\":{\"723\":1}}],[\"某一取值范围\",{\"1\":{\"723\":1}}],[\"副本中同步数据\",{\"1\":{\"1445\":1}}],[\"副本\",{\"1\":{\"1443\":1,\"1528\":1}}],[\"副本和若干个\",{\"1\":{\"1443\":1}}],[\"读多写少\",{\"1\":{\"5946\":1}}],[\"读\",{\"1\":{\"4103\":1,\"4561\":2,\"6161\":2}}],[\"读进程通过读出端\",{\"1\":{\"3468\":1}}],[\"读操作并不会修改数据\",{\"1\":{\"3830\":1,\"5946\":1}}],[\"读操作\",{\"1\":{\"3229\":1}}],[\"读提交\",{\"1\":{\"2998\":1,\"3005\":1,\"3008\":1,\"3017\":2,\"6670\":1,\"6677\":1,\"6680\":1,\"6689\":2}}],[\"读未提交\",{\"1\":{\"2997\":1,\"3004\":1,\"3015\":1,\"6669\":1,\"6676\":1,\"6687\":1}}],[\"读到\",{\"1\":{\"2981\":1,\"6653\":1}}],[\"读写事件\",{\"1\":{\"6322\":1}}],[\"读写\",{\"1\":{\"3833\":1,\"5949\":1,\"5952\":1}}],[\"读写互斥\",{\"1\":{\"2914\":1,\"2941\":2,\"6586\":1,\"6613\":2}}],[\"读写锁\",{\"1\":{\"1981\":1,\"5953\":1,\"6240\":1}}],[\"读读是共享的\",{\"1\":{\"3836\":1,\"5952\":1}}],[\"读读\",{\"1\":{\"2899\":1,\"6571\":1}}],[\"读锁的共享锁可保证并发读是非常高效的\",{\"1\":{\"3833\":1,\"5949\":1}}],[\"读锁还在占用着\",{\"1\":{\"2900\":1,\"6572\":1}}],[\"读锁\",{\"0\":{\"5951\":1},\"1\":{\"2890\":1,\"2893\":2,\"2894\":1,\"2898\":1,\"2904\":1,\"6562\":1,\"6565\":2,\"6566\":1,\"6570\":1,\"6576\":1}}],[\"读从机房的方案\",{\"1\":{\"2075\":1,\"5780\":1}}],[\"读取之前的版本数据\",{\"1\":{\"3040\":1,\"6708\":1}}],[\"读取时还要保证其他并发事务不能修改当前记录\",{\"1\":{\"3022\":1}}],[\"读取到就直接返回\",{\"1\":{\"4104\":1}}],[\"读取到的余额数据是刚才事务\",{\"1\":{\"2983\":1,\"6655\":1}}],[\"读取到数据后\",{\"1\":{\"1839\":1,\"6371\":1}}],[\"读取文件\",{\"1\":{\"2111\":1}}],[\"读取文件时\",{\"1\":{\"2107\":1}}],[\"读取meta\",{\"1\":{\"1293\":1,\"5636\":1}}],[\"读消息的客户端\",{\"1\":{\"1438\":1}}],[\"核心就是通过一系列的封装和处理\",{\"1\":{\"4536\":1,\"6151\":1}}],[\"核心数多出来的一个线程是为了防止线程偶发的缺页中断\",{\"1\":{\"3897\":1,\"6044\":1}}],[\"核心数\",{\"1\":{\"3897\":1,\"6044\":1}}],[\"核心线程外的线程不会立即销毁\",{\"1\":{\"3863\":1,\"6017\":1}}],[\"核心线程数默认是不会被回收的\",{\"1\":{\"3922\":1,\"6072\":1}}],[\"核心线程数会被回收吗\",{\"1\":{\"3921\":1,\"6071\":1}}],[\"核心线程数\",{\"1\":{\"3773\":1}}],[\"核心思想是\",{\"1\":{\"3642\":1,\"5883\":1}}],[\"核心\",{\"1\":{\"2076\":1,\"5781\":1}}],[\"核心组件的基础概念\",{\"1\":{\"1436\":1}}],[\"核心配置文件\",{\"0\":{\"1331\":1,\"5652\":1}}],[\"社区活跃度很高\",{\"1\":{\"4495\":1,\"6126\":1}}],[\"社区活跃度高\",{\"1\":{\"1432\":1,\"4760\":1,\"4803\":1}}],[\"社区不怎么活跃\",{\"1\":{\"1435\":1,\"4763\":1}}],[\"社区有可能突然黄掉的风险\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"经历了多次阿里双11考验\",{\"1\":{\"4801\":1}}],[\"经历过那么多次淘宝双十一的考验\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"经得起实际考验的服务框架组合起来\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"经理技术面+hr面\",{\"0\":{\"4347\":1}}],[\"经常应用到md5\",{\"1\":{\"5089\":1}}],[\"经常一起使用的列放到一个表中\",{\"0\":{\"6716\":1},\"1\":{\"3065\":1}}],[\"经常用于连接的字段可能是一些外键列\",{\"1\":{\"2828\":1,\"6500\":1}}],[\"经常查询的不变的数据\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"经过\",{\"1\":{\"4962\":1}}],[\"经过扰动计算之后\",{\"1\":{\"1042\":1}}],[\"经过简单的获取hashcode后\",{\"1\":{\"1037\":1}}],[\"经过多次\",{\"1\":{\"234\":1}}],[\"业务逻辑\",{\"1\":{\"6323\":1}}],[\"业务层主要解决服务发现和配置管理的功能问题\",{\"1\":{\"4552\":1}}],[\"业务层\",{\"1\":{\"4552\":1}}],[\"业务以及销量\",{\"1\":{\"4446\":1}}],[\"业务只能读数据\",{\"1\":{\"2864\":1,\"6536\":1}}],[\"业务实现双活\",{\"1\":{\"2076\":1,\"5781\":1}}],[\"业务先实现双活\",{\"1\":{\"2076\":1,\"5781\":1}}],[\"业务处理主要是在内存中完成\",{\"1\":{\"6361\":1}}],[\"业务处理\",{\"1\":{\"1821\":1,\"1826\":1,\"1846\":1,\"6350\":1,\"6355\":1,\"6388\":1}}],[\"业务异常\",{\"1\":{\"1329\":1}}],[\"业内标准\",{\"1\":{\"1432\":1,\"4760\":1}}],[\"里的\",{\"1\":{\"7063\":1}}],[\"里的热点数据全部都被淘汰了\",{\"1\":{\"1697\":1}}],[\"里是否存储着指向当前线程的偏向锁\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"里存储锁偏向的线程\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"里有\",{\"1\":{\"3179\":1,\"6837\":1}}],[\"里默认和最常用的索引类型\",{\"1\":{\"2770\":1,\"6439\":1}}],[\"里\",{\"1\":{\"1424\":1,\"1697\":1,\"1706\":1,\"2850\":1,\"6522\":1}}],[\"里面收集了所有常用的密码\",{\"1\":{\"5054\":1}}],[\"里面是不会有线程的\",{\"1\":{\"3918\":1,\"6066\":1}}],[\"里面有一个内部类\",{\"1\":{\"3787\":1,\"5798\":1}}],[\"里面总会存在着<threadlocal\",{\"1\":{\"3773\":1}}],[\"里面存放将要提交文件的快照\",{\"1\":{\"3357\":1}}],[\"里面保存了\",{\"1\":{\"3031\":1,\"6697\":1}}],[\"里面记录的是主库分配的自增值\",{\"1\":{\"2934\":1,\"6606\":1}}],[\"里面表级别的锁有这几种\",{\"1\":{\"2872\":1,\"6544\":1}}],[\"里面执行\",{\"1\":{\"1955\":1}}],[\"里面的求hash的方法从hash改为了spread\",{\"1\":{\"1075\":1}}],[\"里面\",{\"1\":{\"378\":1}}],[\"特点进行延迟\",{\"1\":{\"4868\":1,\"7246\":1}}],[\"特点是加密和解密使用不同的密钥\",{\"1\":{\"4010\":1}}],[\"特点是加密和解密使用同一密钥\",{\"1\":{\"4009\":1}}],[\"特性\",{\"1\":{\"4765\":1}}],[\"特性有订阅发布\",{\"1\":{\"4511\":1,\"6130\":1}}],[\"特性有服务降级\",{\"1\":{\"4509\":1,\"6130\":1}}],[\"特性有区域亲和\",{\"1\":{\"4508\":1,\"6130\":1}}],[\"特性有失效剔除\",{\"1\":{\"4505\":1,\"6130\":1}}],[\"特性和工具集\",{\"1\":{\"3453\":1}}],[\"特别要注意下\",{\"1\":{\"3341\":1}}],[\"特别适用于金融互联网领域这类对于可靠性要求很高的场景\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"特别是对于返回结果集比较大的子查询\",{\"1\":{\"6741\":1}}],[\"特别是长事务而言\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"特别是大数据领域的实时计算\",{\"1\":{\"1432\":1,\"4760\":1}}],[\"特别是\",{\"1\":{\"1421\":1}}],[\"特有\",{\"1\":{\"1158\":1,\"5539\":1}}],[\"发过来的链路层帧\",{\"1\":{\"7051\":1}}],[\"发布文章集成添加延迟队列接口\",{\"1\":{\"4879\":1,\"7257\":1}}],[\"发布文章功能\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"发出的投票为\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"发音不准确没关系\",{\"1\":{\"4406\":1}}],[\"发包的个数是指数性的增长\",{\"1\":{\"2681\":1}}],[\"发车\",{\"1\":{\"2398\":1}}],[\"发起请求问\",{\"1\":{\"2392\":1,\"7096\":1}}],[\"发现\",{\"1\":{\"4616\":1,\"6189\":1,\"7036\":1}}],[\"发现被占用的锁是重量级锁\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"发现预期值\",{\"1\":{\"3674\":1,\"5842\":1}}],[\"发现a不等于v的实际值\",{\"1\":{\"3672\":1,\"5838\":1}}],[\"发现和前一次读到的记录数量不一样了\",{\"1\":{\"2994\":1,\"6666\":1}}],[\"发现共有\",{\"1\":{\"2992\":1,\"6664\":1}}],[\"发现自己期望收到的确认号应该是\",{\"1\":{\"2544\":1}}],[\"发现后置是\",{\"1\":{\"2391\":1,\"7095\":1}}],[\"发现响应头中具有\",{\"1\":{\"2242\":1}}],[\"发现缓存没有\",{\"0\":{\"2077\":1,\"5782\":1}}],[\"发生连锁效应\",{\"1\":{\"4519\":1,\"6136\":1}}],[\"发生了回滚\",{\"1\":{\"2984\":1,\"6656\":1}}],[\"发生冲突了\",{\"1\":{\"4649\":2,\"6222\":2}}],[\"发生冲突\",{\"1\":{\"2913\":1,\"3341\":1,\"6585\":1}}],[\"发生隐式转换\",{\"1\":{\"2848\":1,\"6520\":1}}],[\"发生快速重传的拥塞发生算法\",{\"1\":{\"2695\":1}}],[\"发生超时重传的拥塞发生算法\",{\"1\":{\"2691\":1}}],[\"发生在三次握手的哪一步\",{\"0\":{\"2639\":1},\"1\":{\"2437\":1}}],[\"发生缺页时\",{\"1\":{\"1733\":1}}],[\"发生故障时\",{\"1\":{\"1445\":1}}],[\"发送给目标接口\",{\"1\":{\"7050\":1}}],[\"发送给主机\",{\"1\":{\"7040\":1}}],[\"发送主机\",{\"1\":{\"7045\":1}}],[\"发送和接受的\",{\"1\":{\"7041\":1}}],[\"发送和接收的\",{\"1\":{\"7038\":1}}],[\"发送到下一跳上\",{\"1\":{\"7035\":1}}],[\"发送的\",{\"1\":{\"4623\":1,\"6200\":1,\"7038\":2,\"7041\":1}}],[\"发送信息的进程称为写进程\",{\"1\":{\"3468\":1}}],[\"发送\",{\"1\":{\"2719\":1,\"4606\":1,\"4623\":1,\"6200\":1,\"7014\":1,\"7033\":1}}],[\"发送三次前一个包的\",{\"1\":{\"2696\":1}}],[\"发送方和接收方必须商定好秘钥\",{\"1\":{\"5100\":1}}],[\"发送方\",{\"1\":{\"2661\":1,\"2663\":1,\"2667\":1,\"2668\":1}}],[\"发送方不能无脑的发数据给接收方\",{\"1\":{\"2659\":1}}],[\"发送方发送的数据大小不能超过接收方的窗口大小\",{\"1\":{\"2655\":1}}],[\"发送方主机在等到确认应答返回之前\",{\"1\":{\"2652\":1}}],[\"发送一个广播问询分组\",{\"1\":{\"7046\":1}}],[\"发送一个探测报文\",{\"1\":{\"2635\":1}}],[\"发送一条半事务消息到mq服务器\",{\"1\":{\"2047\":1,\"5752\":1}}],[\"发送了\",{\"1\":{\"2540\":1}}],[\"发送端\",{\"1\":{\"3468\":1}}],[\"发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收\",{\"1\":{\"2445\":1}}],[\"发送端不需要等待callback返回\",{\"1\":{\"1521\":1}}],[\"发送冗长的首部\",{\"1\":{\"2353\":1}}],[\"发送请求\",{\"1\":{\"2096\":1}}],[\"发送rollback\",{\"1\":{\"2051\":1,\"5756\":1}}],[\"发送消息\",{\"1\":{\"4979\":1}}],[\"发送消息的进程可以在任意时刻发送任意个消息到指定的消息队列上\",{\"1\":{\"3469\":1}}],[\"发送消息的瓶颈所在\",{\"1\":{\"1577\":1}}],[\"发送消息到四个消息队列的耗时是10ms\",{\"1\":{\"1418\":1}}],[\"发后即忘模式\",{\"1\":{\"1514\":1}}],[\"发后即忘发送模式\",{\"1\":{\"1513\":1}}],[\"发消息的客户端\",{\"1\":{\"1437\":1}}],[\"发挥了两者的优势\",{\"1\":{\"1004\":1}}],[\"假如有一万行的堆栈信息\",{\"1\":{\"4413\":1}}],[\"假如我们要对表中的数据进行排序或者进行范围查询\",{\"1\":{\"2757\":1,\"6426\":1}}],[\"假如我们发起了一个异步提交commita\",{\"1\":{\"1616\":1}}],[\"假如用户发起请求到服务器耗时是10ms\",{\"1\":{\"1418\":1}}],[\"假设一个一般场景\",{\"1\":{\"7045\":1}}],[\"假设当前有如下场景\",{\"1\":{\"7033\":1}}],[\"假设当前事务id为2\",{\"1\":{\"3050\":1}}],[\"假设现在我要统计index这个接口的qps\",{\"1\":{\"5012\":1}}],[\"假设没有冲突去完成某项操作\",{\"1\":{\"3665\":1,\"5828\":1}}],[\"假设根据我们一开始的图\",{\"1\":{\"3220\":1}}],[\"假设此时的\",{\"1\":{\"3214\":1}}],[\"假设有一个变量初始值为\",{\"1\":{\"3685\":1,\"5854\":1}}],[\"假设有\",{\"1\":{\"2983\":1,\"2988\":1,\"2992\":1,\"6655\":1,\"6660\":1,\"6664\":1}}],[\"假设有三个消费者分别为c0\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"假设\",{\"1\":{\"2953\":1,\"4620\":1,\"4623\":1,\"4627\":1,\"6193\":1,\"6200\":1,\"6205\":1,\"6625\":1}}],[\"假设攻击者短时间伪造不同\",{\"1\":{\"2578\":1}}],[\"假设服务器b出现了故障\",{\"1\":{\"2031\":1}}],[\"假设突然有一台缓存服务器出现了故障\",{\"1\":{\"2012\":1}}],[\"假设我们集群中有3台机器\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"假设我们称为trx\",{\"1\":{\"3050\":1}}],[\"假设我们有4张图片\",{\"1\":{\"2027\":1}}],[\"假设我们有\",{\"1\":{\"2025\":1}}],[\"假设我们有三台缓存服务器\",{\"1\":{\"2007\":1}}],[\"假设我们增加了一台缓存服务器\",{\"1\":{\"2012\":1}}],[\"假设图片名称是不重复的\",{\"1\":{\"2008\":1}}],[\"假设用户发起请求到服务\",{\"1\":{\"1417\":1}}],[\"假设在没有消息队列的情况下\",{\"1\":{\"1413\":1}}],[\"假设n为3\",{\"1\":{\"1022\":1}}],[\"假设容器中的类型是\",{\"1\":{\"569\":1}}],[\"削峰\",{\"1\":{\"1411\":1,\"1420\":1}}],[\"载体\",{\"1\":{\"1410\":1}}],[\"流量控制是避免\",{\"1\":{\"2663\":1}}],[\"流量控制\",{\"1\":{\"2491\":1}}],[\"流量削锋\",{\"1\":{\"1410\":1}}],[\"流量削锋等问题\",{\"1\":{\"1406\":1}}],[\"流程图\",{\"0\":{\"89\":1,\"5202\":1}}],[\"消除冲突\",{\"1\":{\"3341\":1}}],[\"消耗更多的\",{\"1\":{\"3084\":1,\"6736\":1}}],[\"消耗过多存储空间\",{\"1\":{\"3068\":1,\"6719\":1}}],[\"消耗在\",{\"1\":{\"382\":1}}],[\"消费任务进行审核文章\",{\"1\":{\"4881\":1,\"7259\":1}}],[\"消费组\",{\"1\":{\"4511\":1,\"6130\":1}}],[\"消费组的成员订阅它们感兴趣的topic并将这种订阅关系传递给作为订阅组协调者的broker\",{\"1\":{\"1470\":1,\"6918\":1}}],[\"消费端会从分配到的partition里面去消费消息\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"消费者\",{\"0\":{\"6915\":1}}],[\"消费者会自动提交了\",{\"1\":{\"4675\":1,\"7194\":1}}],[\"消费者会往一个叫做\",{\"1\":{\"1591\":1}}],[\"消费者丢失消息的情况\",{\"1\":{\"4673\":1,\"7192\":1}}],[\"消费者速度慢\",{\"1\":{\"3590\":1}}],[\"消费者购买商品这个事务\",{\"1\":{\"2973\":1,\"6645\":1}}],[\"消费者的钱也没花出去\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"消费者消费完\",{\"1\":{\"2053\":1,\"5758\":1}}],[\"消费者消费的位置信息\",{\"1\":{\"1446\":1}}],[\"消费者2负责的分区会被其他消费者进行消费\",{\"1\":{\"1593\":1}}],[\"消费者可以使用kafka来追踪消息在分区的位置\",{\"1\":{\"1590\":1}}],[\"消费者组\",{\"1\":{\"1580\":1}}],[\"消费者组内每个消费者负责消费不同分区的数据\",{\"1\":{\"1439\":1}}],[\"消费者还是会从之前没提交的offset位置开始消费\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"消费者之间分配到的分区数的差值不会超过1\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"消费者订阅的topic列表是相同的\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"消息摘要算法又称为哈希算法\",{\"1\":{\"5029\":1}}],[\"消息摘要算法第五版\",{\"1\":{\"5028\":1}}],[\"消息积压的概率比较大\",{\"1\":{\"4888\":1,\"7266\":1}}],[\"消息等\",{\"1\":{\"4867\":1}}],[\"消息中间件\",{\"0\":{\"7311\":1},\"1\":{\"4796\":1}}],[\"消息中间件对比\",{\"1\":{\"4764\":1,\"4795\":1}}],[\"消息实际上并没有被消费\",{\"1\":{\"4675\":1,\"7194\":1}}],[\"消息分区\",{\"1\":{\"4511\":1,\"6130\":1}}],[\"消息驱动\",{\"1\":{\"4511\":1,\"6130\":1}}],[\"消息总线\",{\"1\":{\"4463\":1,\"4512\":1,\"6096\":1,\"6130\":1}}],[\"消息缓冲可以不再局限于父子进程\",{\"1\":{\"3473\":1}}],[\"消息缓冲区被组织成队列\",{\"1\":{\"3469\":1}}],[\"消息缓冲通信\",{\"1\":{\"3469\":1}}],[\"消息的边界\",{\"1\":{\"2459\":1}}],[\"消息的发送方和接收方要约定好消息体的数据类型\",{\"1\":{\"1957\":1}}],[\"消息可能会被操作系统\",{\"1\":{\"2459\":1}}],[\"消息\",{\"1\":{\"2362\":1}}],[\"消息不一定要以先进先出的次序读取\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"消息体是用户自定义的数据类型\",{\"1\":{\"1957\":1}}],[\"消息里包含了每个分区的偏移量\",{\"1\":{\"1591\":1}}],[\"消息压缩\",{\"1\":{\"1565\":1}}],[\"消息有丢失的风险\",{\"1\":{\"1556\":1}}],[\"消息确认机制\",{\"1\":{\"1551\":1}}],[\"消息发送时不会被压缩\",{\"1\":{\"1566\":1}}],[\"消息发送成功\",{\"1\":{\"1521\":1}}],[\"消息发送失败处理\",{\"1\":{\"1521\":1}}],[\"消息先存储在缓冲区中\",{\"1\":{\"1514\":1}}],[\"消息广播模式\",{\"0\":{\"6179\":1}}],[\"消息广播\",{\"1\":{\"1410\":1,\"4600\":1,\"6170\":1,\"6178\":1}}],[\"消息通讯\",{\"1\":{\"1410\":1}}],[\"消息队列选型\",{\"0\":{\"4757\":1}}],[\"消息队列进行收发消息\",{\"1\":{\"4610\":1}}],[\"消息队列一旦创建后即可由多进程共享\",{\"1\":{\"3469\":1}}],[\"消息队列一般都内置了高效的通信机制\",{\"1\":{\"1410\":1}}],[\"消息队列克服了信号传递信息少\",{\"1\":{\"3463\":1}}],[\"消息队列克服了信号承载信息量少\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"消息队列可以实现消息的随机查询\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"消息队列\",{\"1\":{\"1972\":1,\"3115\":1,\"3463\":1,\"4163\":1,\"6253\":1,\"6771\":1}}],[\"消息队列会一直存在\",{\"1\":{\"1958\":1}}],[\"消息队列生命周期随内核\",{\"1\":{\"1958\":1}}],[\"消息队列中的若干消息如果是对同一个数据进行操作\",{\"1\":{\"1503\":1,\"6958\":1}}],[\"消息队列有\",{\"1\":{\"1430\":1}}],[\"消息队列对比\",{\"1\":{\"1429\":1}}],[\"消息队列本身是异步的\",{\"1\":{\"1410\":1}}],[\"消息队列减少了服务之间的耦合性\",{\"1\":{\"1410\":1}}],[\"消息队列应用场景\",{\"1\":{\"1408\":1}}],[\"消息队列是由消息的链表\",{\"1\":{\"3463\":1}}],[\"消息队列是消息的链表\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"消息队列是保存在内核中的消息链表\",{\"1\":{\"1957\":1}}],[\"消息队列是在消息的传输过程中保存消息的容器\",{\"1\":{\"1406\":1}}],[\"消息队列是什么\",{\"1\":{\"1405\":1}}],[\"消息消费者\",{\"1\":{\"1407\":1}}],[\"消息处理中心\",{\"1\":{\"1407\":1}}],[\"消息生产者\",{\"1\":{\"1407\":1}}],[\"消息转换器等\",{\"1\":{\"1396\":1}}],[\"采用kafka作为消息服务中间件\",{\"1\":{\"4662\":1,\"7181\":1}}],[\"采用先进先出的方式发送消息\",{\"1\":{\"4598\":1,\"6182\":1}}],[\"采用aspectj编译时织入提高性能\",{\"1\":{\"4027\":1}}],[\"采用全spring配置方式\",{\"1\":{\"3987\":1}}],[\"采用\",{\"1\":{\"3279\":1,\"6884\":1}}],[\"采用的是\",{\"1\":{\"3175\":1,\"6833\":1}}],[\"采用http2成本和收益不对等\",{\"1\":{\"2370\":1}}],[\"采用和部署http2需要服务器和客户端同时支持\",{\"1\":{\"2369\":1}}],[\"采用了二进制格式\",{\"1\":{\"2361\":1}}],[\"采用了长连接的方式\",{\"1\":{\"2296\":1}}],[\"采用了两种方法\",{\"1\":{\"1048\":1}}],[\"采用互斥对象机制\",{\"1\":{\"1980\":1,\"6239\":1}}],[\"采用javabean的形式来代替传统的xml配置文件形式进行针对框架个性化定制\",{\"1\":{\"1395\":1}}],[\"随后\",{\"1\":{\"4182\":1}}],[\"随后又发起了一个异步提交commitb且位移为3000\",{\"1\":{\"1616\":1}}],[\"随进程的结束而销毁\",{\"1\":{\"1958\":1}}],[\"随机值以及配置文件\",{\"1\":{\"1383\":1}}],[\"随着网络技术的发展\",{\"1\":{\"6989\":1}}],[\"随着人们对加密强度需求的不断提高\",{\"1\":{\"5089\":1}}],[\"随着业务的增长\",{\"1\":{\"4820\":1,\"4967\":1}}],[\"随着哈希函数数量增多\",{\"1\":{\"2165\":1}}],[\"随着任务量的增大\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"随着\",{\"1\":{\"277\":1,\"915\":1,\"3163\":1,\"5533\":1,\"6819\":1}}],[\"随着虚拟机退出而销毁\",{\"1\":{\"185\":1}}],[\"命令不做任何操作\",{\"1\":{\"4904\":1,\"7274\":1}}],[\"命令在指定的\",{\"1\":{\"4903\":1,\"7273\":1}}],[\"命令行工\",{\"1\":{\"4731\":1}}],[\"命令行工具\",{\"1\":{\"4730\":1}}],[\"命令行参数\",{\"1\":{\"1383\":1}}],[\"命令时\",{\"1\":{\"4607\":1}}],[\"命令生成编译后的\",{\"1\":{\"3736\":1,\"5967\":1}}],[\"命令即可\",{\"1\":{\"3628\":1}}],[\"命令介绍\",{\"0\":{\"3592\":1}}],[\"命令也是\",{\"1\":{\"3574\":1}}],[\"命令的时候获取到的转储文件相比\",{\"1\":{\"3568\":1}}],[\"命令有一点不好的地方是\",{\"1\":{\"3568\":1}}],[\"命令是一个基于游标的迭代器\",{\"1\":{\"4893\":1}}],[\"命令是\",{\"1\":{\"3565\":1}}],[\"命令从中央存储库中提取特定分支的新更改或提交\",{\"1\":{\"3371\":1}}],[\"命令开始和主库同步前\",{\"1\":{\"3235\":1}}],[\"命令后\",{\"1\":{\"3233\":1}}],[\"命令包含了主库的\",{\"1\":{\"3233\":1}}],[\"命令来完成的\",{\"1\":{\"3201\":1}}],[\"命令追加\",{\"1\":{\"3160\":1,\"6816\":1}}],[\"命令实现消息队列\",{\"1\":{\"3115\":1,\"6771\":1}}],[\"命令可以实现一个最简易的分布式锁\",{\"1\":{\"3107\":1,\"6763\":1}}],[\"命令查看占比高的进程是不是\",{\"1\":{\"3538\":1}}],[\"命令查看\",{\"1\":{\"2534\":1,\"3736\":1,\"5967\":1}}],[\"命令\",{\"0\":{\"3516\":1,\"3537\":1},\"1\":{\"1946\":1,\"3201\":1,\"3206\":1,\"3233\":1,\"3235\":1,\"3550\":1,\"3558\":1,\"4606\":1}}],[\"命名服务\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"命名管道\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"命名\",{\"1\":{\"854\":1,\"5484\":1}}],[\"异地容灾\",{\"1\":{\"4732\":1}}],[\"异步线程的方式审核文章\",{\"1\":{\"4846\":1,\"7235\":1}}],[\"异步提交没有实现重试是因为\",{\"1\":{\"1615\":1}}],[\"异步提交不会进行重试\",{\"1\":{\"1615\":1}}],[\"异步提交也有个缺点\",{\"1\":{\"1615\":1}}],[\"异步提交\",{\"1\":{\"1605\":1,\"1611\":1}}],[\"异步消息发送\",{\"1\":{\"1547\":1}}],[\"异步发送\",{\"1\":{\"1545\":1}}],[\"异步发送模式\",{\"1\":{\"1519\":1,\"1520\":1}}],[\"异步处理\",{\"1\":{\"1410\":1}}],[\"异步方法可以传入参数\",{\"1\":{\"1375\":1}}],[\"异步的方法有\",{\"1\":{\"1374\":1}}],[\"异步调用则是只是发送了调用的指令\",{\"1\":{\"1373\":1}}],[\"异步\",{\"1\":{\"1373\":1,\"1411\":1,\"1415\":1}}],[\"异常事件回溯和问题定位等工作\",{\"1\":{\"4721\":1}}],[\"异常来拒绝新来的任务\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"异常信息\",{\"1\":{\"1613\":1}}],[\"异常表中包含了一个或多个异常处理者\",{\"1\":{\"493\":1,\"5380\":1}}],[\"异常的底层\",{\"0\":{\"5374\":1}}],[\"异常的抛出\",{\"1\":{\"473\":1,\"5368\":1}}],[\"异常的申明\",{\"1\":{\"470\":1,\"5365\":1}}],[\"异常和反射\",{\"0\":{\"452\":1}}],[\"异常\",{\"0\":{\"453\":1,\"5348\":1},\"1\":{\"207\":1,\"228\":1,\"245\":1,\"269\":1,\"281\":1,\"291\":1,\"2128\":1}}],[\"异常处理者处理的异常的类信息\",{\"1\":{\"497\":1,\"5384\":1}}],[\"异常处理\",{\"1\":{\"199\":1}}],[\"官网2\",{\"1\":{\"1364\":1,\"1365\":1,\"1366\":1,\"5689\":1,\"5690\":1,\"5691\":1}}],[\"官方社区现在对\",{\"1\":{\"1435\":1,\"4763\":1}}],[\"官方的推荐所建立的这个stack\",{\"1\":{\"621\":1}}],[\"官方推荐直接实现webmvcconfigurer或者直接继承webmvcconfigurationsupport\",{\"1\":{\"1396\":1}}],[\"官方推荐的创建栈的方式\",{\"1\":{\"628\":1}}],[\"官方推荐的方法声明的这个\",{\"1\":{\"619\":1}}],[\"官方推荐的写法\",{\"1\":{\"600\":1}}],[\"官方推荐的写法是这样的\",{\"1\":{\"569\":1}}],[\"官方推出了\",{\"1\":{\"613\":1}}],[\"官方也并没有将\",{\"1\":{\"598\":1}}],[\"官方可以做到的是\",{\"1\":{\"597\":1}}],[\"官方不想推出一个叫做\",{\"1\":{\"621\":1}}],[\"官方不愿意看到的\",{\"1\":{\"596\":1}}],[\"官方不能做接口设计层面的修改\",{\"1\":{\"596\":1}}],[\"官方不知道这个\",{\"0\":{\"595\":1}}],[\"官方当然知道这个实现不好\",{\"1\":{\"596\":1}}],[\"官方文档中的类关系\",{\"1\":{\"572\":1}}],[\"官方\",{\"1\":{\"433\":1,\"566\":1,\"5324\":1}}],[\"统计个数\",{\"1\":{\"3424\":1}}],[\"统计和http追踪\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"统计网站的访问量\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"统计在线人数和在线用户\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"监控器\",{\"0\":{\"5668\":1}}],[\"监控等一些防止雪崩的技术\",{\"1\":{\"4525\":1,\"6142\":1}}],[\"监控等拆分出基础服务\",{\"1\":{\"4018\":1}}],[\"监控线程池的状态\",{\"0\":{\"3923\":1}}],[\"监控和自动故障转移功能\",{\"1\":{\"3199\":1}}],[\"监控\",{\"1\":{\"3195\":1,\"4699\":1}}],[\"监控系统指标\",{\"1\":{\"2139\":1}}],[\"监控连接建立事件\",{\"1\":{\"1843\":1,\"6385\":1}}],[\"监控数据消费到什么位置\",{\"1\":{\"1446\":1}}],[\"监听器\",{\"0\":{\"5663\":1}}],[\"监听器也叫listener\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"监听事件\",{\"1\":{\"1823\":1,\"1835\":1,\"6352\":1,\"6367\":1}}],[\"监视器和监听器\",{\"0\":{\"1338\":1,\"5662\":1}}],[\"嵌入式tomcat\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"工作基本流程\",{\"1\":{\"6826\":1}}],[\"工作基本流程是怎样的\",{\"0\":{\"3158\":1,\"6814\":1}}],[\"工作流程图如下\",{\"1\":{\"6825\":1}}],[\"工作流程如下图所示\",{\"1\":{\"4584\":1}}],[\"工作量大\",{\"1\":{\"3956\":1}}],[\"工作区\",{\"1\":{\"3333\":1,\"3355\":1,\"3356\":1}}],[\"工作目录\",{\"1\":{\"3332\":1}}],[\"工作在哪一层\",{\"0\":{\"2451\":1},\"1\":{\"2402\":1}}],[\"工程师修炼之道\",{\"1\":{\"2765\":1,\"6434\":1}}],[\"工程任务组开发的路由选择协议\",{\"1\":{\"2715\":1,\"7010\":1}}],[\"工具是\",{\"1\":{\"3447\":1}}],[\"工具是一组由\",{\"1\":{\"3447\":1}}],[\"工具\",{\"1\":{\"3446\":1}}],[\"工具分析代码的内存分配情况\",{\"1\":{\"2132\":1}}],[\"工具来实现\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"工厂设计模式\",{\"1\":{\"1209\":1,\"5561\":1}}],[\"工厂类可以应对各种新增的类\",{\"1\":{\"551\":1,\"5429\":1}}],[\"工厂模式提供了一种将对象的实例化过程封装在工厂类中的方式\",{\"1\":{\"4178\":1}}],[\"工厂模式的原理\",{\"0\":{\"4177\":1}}],[\"工厂模式\",{\"0\":{\"860\":1,\"5490\":1},\"1\":{\"551\":1,\"4269\":1,\"5429\":1}}],[\"服务和路由器的客户端查询服务注册表以查找服务的可用实例\",{\"1\":{\"4556\":1}}],[\"服务实例在启动时注册到服务注册表\",{\"1\":{\"4556\":1}}],[\"服务是指一个或一组软件功能\",{\"1\":{\"4554\":1}}],[\"服务监控\",{\"1\":{\"4530\":1,\"6147\":1}}],[\"服务降级虽然会导致请求失败\",{\"1\":{\"4916\":1}}],[\"服务降级是服务自我保护的一种方式\",{\"1\":{\"4915\":1}}],[\"服务降级\",{\"1\":{\"4527\":1,\"6144\":1}}],[\"服务隔离\",{\"1\":{\"4525\":1,\"4529\":1,\"6142\":1,\"6146\":1}}],[\"服务熔断\",{\"1\":{\"4509\":1,\"4525\":1,\"4528\":1,\"6130\":1,\"6142\":1,\"6145\":1}}],[\"服务保护\",{\"1\":{\"4505\":1,\"6130\":1}}],[\"服务注册中心可能会调用服务实例的健康检查\",{\"1\":{\"4556\":1}}],[\"服务注册中心\",{\"1\":{\"4505\":1,\"4555\":1,\"4556\":1,\"6130\":1}}],[\"服务拆分粒度更细\",{\"1\":{\"4496\":1,\"6126\":1}}],[\"服务发现\",{\"1\":{\"4494\":1,\"6126\":1}}],[\"服务部署\",{\"1\":{\"4486\":1,\"6119\":1}}],[\"服务划分\",{\"1\":{\"4485\":1,\"6118\":1}}],[\"服务与服务之间通过http协议或其他消息传递机制通信\",{\"1\":{\"4483\":1,\"6116\":1}}],[\"服务与服务之间完全独立\",{\"1\":{\"4478\":1,\"6111\":1}}],[\"服务与服务之间采用http网络通信协议来通信\",{\"1\":{\"4478\":1,\"6111\":1}}],[\"服务与服务之间没有任何耦合\",{\"1\":{\"4477\":1,\"6110\":1}}],[\"服务集中化管理\",{\"1\":{\"4473\":1,\"6106\":1}}],[\"服务之间通过http协议相互通信\",{\"1\":{\"4469\":1,\"6102\":1}}],[\"服务之间相互调用\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"服务淘汰及自我保护机制\",{\"1\":{\"3987\":1}}],[\"服务消费者启动时会向注册中心订阅自己需要的服务\",{\"1\":{\"3985\":1}}],[\"服务消费者\",{\"1\":{\"3983\":1}}],[\"服务提供者启动时会将自己提供的服务注册到注册中心\",{\"1\":{\"3985\":1}}],[\"服务提供者\",{\"1\":{\"3983\":1}}],[\"服务不可用的情况\",{\"1\":{\"3278\":1,\"6883\":1}}],[\"服务对象\",{\"1\":{\"2485\":1,\"4260\":1}}],[\"服务端推送等技术\",{\"1\":{\"6984\":1}}],[\"服务端检查\",{\"1\":{\"4813\":1,\"7210\":1}}],[\"服务端会返回已经签名的\",{\"1\":{\"4811\":1,\"7208\":1}}],[\"服务端如果在一定时间内没有收到心跳包\",{\"1\":{\"4217\":1}}],[\"服务端等\",{\"1\":{\"3307\":1}}],[\"服务端\",{\"1\":{\"2640\":1}}],[\"服务端的程序没有调用\",{\"1\":{\"2632\":1}}],[\"服务端就会重发\",{\"1\":{\"2610\":1,\"2612\":1}}],[\"服务端通常需要等待完成数据的发送和处理\",{\"1\":{\"2604\":1}}],[\"服务端通常固定在某个本地端口上监听\",{\"1\":{\"2474\":1}}],[\"服务端接收到\",{\"1\":{\"2585\":1}}],[\"服务端每接收到一个\",{\"1\":{\"2578\":1}}],[\"服务端这边会触发超时重传机制\",{\"1\":{\"2574\":1,\"2576\":1}}],[\"服务端不清楚客户端是否收到了自己回复的\",{\"1\":{\"2555\":1}}],[\"服务端收到了\",{\"1\":{\"2599\":1}}],[\"服务端收到该报文后\",{\"1\":{\"2595\":1}}],[\"服务端收到\",{\"1\":{\"2545\":1}}],[\"服务端收到客户端的应答报文后\",{\"1\":{\"2530\":1}}],[\"服务端收到客户端的\",{\"1\":{\"2528\":1}}],[\"服务端并没有收到\",{\"1\":{\"2540\":1}}],[\"服务端最大并发\",{\"1\":{\"2478\":1}}],[\"服务端返回的\",{\"1\":{\"2247\":1}}],[\"服务节点就是一个\",{\"1\":{\"1440\":1}}],[\"服务a\",{\"1\":{\"1425\":1,\"1426\":1}}],[\"服务再慢慢进行处理\",{\"1\":{\"1422\":1}}],[\"服务d进行写库\",{\"1\":{\"1417\":1}}],[\"服务c\",{\"1\":{\"1417\":1}}],[\"服务b\",{\"1\":{\"1417\":1}}],[\"服务\",{\"1\":{\"1417\":1,\"1428\":1,\"4553\":1}}],[\"服务器了\",{\"1\":{\"7090\":1}}],[\"服务器就都可以找到并访问根域\",{\"1\":{\"7090\":1}}],[\"服务器就能认得了了\",{\"1\":{\"2279\":1}}],[\"服务器中\",{\"1\":{\"7089\":1}}],[\"服务器信息保存在互联网中所有的\",{\"1\":{\"7089\":1}}],[\"服务器推送\",{\"1\":{\"7069\":1}}],[\"服务器之间都维护了一个单独的\",{\"1\":{\"4610\":1}}],[\"服务器与每一个\",{\"1\":{\"4610\":1}}],[\"服务器在负责进行消息广播\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"服务器在返回数据时\",{\"1\":{\"2215\":1}}],[\"服务器在返回响应时调用函数\",{\"1\":{\"1546\":1}}],[\"服务器完成了和\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"服务器完成了状态同步之后\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"服务器出现网络中断\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"服务器出现大量\",{\"1\":{\"2430\":1,\"2431\":1}}],[\"服务器进行处理\",{\"1\":{\"4141\":1}}],[\"服务器进行查询\",{\"1\":{\"2388\":1}}],[\"服务器通过校验jwt签名等信息\",{\"1\":{\"4060\":1}}],[\"服务器负责图形显示和输入设备控制\",{\"1\":{\"3451\":1}}],[\"服务器模型\",{\"1\":{\"3451\":1}}],[\"服务器处理请求并返回\",{\"1\":{\"2720\":1,\"7015\":1}}],[\"服务器主动断开了很多\",{\"1\":{\"2630\":1}}],[\"服务器主动推送资源\",{\"1\":{\"2363\":1}}],[\"服务器查询后将对应的\",{\"1\":{\"2395\":1,\"7099\":1}}],[\"服务器地址\",{\"1\":{\"2389\":1,\"7093\":1}}],[\"服务器\",{\"1\":{\"2385\":1,\"2386\":1,\"2387\":1,\"2389\":1,\"2394\":2,\"3451\":1,\"4141\":1,\"4596\":2,\"6169\":2,\"7086\":1,\"7087\":1,\"7088\":1,\"7091\":3,\"7093\":1,\"7098\":2}}],[\"服务器只能被动响应\",{\"1\":{\"2356\":1}}],[\"服务器是按请求的顺序响应的\",{\"1\":{\"2354\":1}}],[\"服务器握手结束通知\",{\"1\":{\"2342\":1}}],[\"服务器和客户端有了这三个随机数\",{\"1\":{\"2337\":1}}],[\"服务器的状态同步\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"服务器的数据状态保持一致\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"服务器的数字证书\",{\"1\":{\"2329\":1}}],[\"服务器的地址\",{\"1\":{\"2393\":1,\"7097\":1}}],[\"服务器的最后回应\",{\"1\":{\"2338\":1}}],[\"服务器的ip\",{\"1\":{\"2024\":1}}],[\"服务器生产的随机数\",{\"1\":{\"2327\":1}}],[\"服务器回应的内容有如下内容\",{\"1\":{\"2325\":1}}],[\"服务器收到客户端的第三个随机数\",{\"1\":{\"2339\":1}}],[\"服务器收到客户端请求后\",{\"1\":{\"2325\":1}}],[\"服务器收到请求后进行比对\",{\"1\":{\"2245\":1}}],[\"服务器收到请求后发现有\",{\"1\":{\"2242\":1}}],[\"服务器会下发一个装有客户信息的\",{\"1\":{\"2279\":1}}],[\"服务器会在返回这个资源的同时\",{\"1\":{\"2234\":1,\"2250\":1}}],[\"服务器再次收到请求后\",{\"1\":{\"2236\":1,\"2254\":1}}],[\"服务器上的数据都是安全的\",{\"1\":{\"2223\":1}}],[\"服务器上的资源\",{\"1\":{\"2220\":1}}],[\"服务器发生了什么错误\",{\"1\":{\"2209\":1}}],[\"服务器无法处理\",{\"1\":{\"2204\":1}}],[\"服务器返回的响应头都会有\",{\"1\":{\"2196\":1}}],[\"服务器配置无法跟上实际使用\",{\"1\":{\"2116\":1}}],[\"服务器端不断地从\",{\"1\":{\"1779\":1,\"6275\":1}}],[\"服务器端只会从\",{\"1\":{\"1778\":1,\"6274\":1}}],[\"服务器自动调用监听器对象中的方法\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"服务器内部错误\",{\"1\":{\"1325\":1}}],[\"服务于java的collection框架\",{\"1\":{\"744\":1}}],[\"例外\",{\"1\":{\"3731\":1}}],[\"例子\",{\"1\":{\"1323\":1,\"5649\":1}}],[\"例如排序条件\",{\"1\":{\"4955\":1}}],[\"例如我们可以定义一个接口继承basemapper接口并调用其中提供的方法来操作数据库\",{\"1\":{\"4752\":1}}],[\"例如通过跨进程的网络调用\",{\"1\":{\"4554\":1}}],[\"例如特定信息的检索或一组操作的执行\",{\"1\":{\"4554\":1}}],[\"例如计算\",{\"1\":{\"4254\":1}}],[\"例如自旋锁等\",{\"1\":{\"3780\":1,\"5791\":1}}],[\"例如获取同步状态\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"例如密码等\",{\"1\":{\"3572\":1}}],[\"例如搭建和配置开发环境\",{\"1\":{\"3291\":1,\"6080\":1}}],[\"例如学生成绩的排名榜\",{\"1\":{\"3138\":1,\"6794\":1}}],[\"例如登录\",{\"1\":{\"2275\":1}}],[\"例如堆大小是否设置过小等\",{\"1\":{\"2134\":1}}],[\"例如系统配置\",{\"1\":{\"2075\":1,\"5780\":1}}],[\"例如分布式事务\",{\"1\":{\"2071\":1,\"5776\":1}}],[\"例如有互斥\",{\"1\":{\"1985\":1,\"6244\":1}}],[\"例如a依赖b\",{\"1\":{\"1263\":1}}],[\"例如事务处理\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"例如\",{\"1\":{\"654\":1,\"908\":1,\"1094\":1,\"1237\":1,\"1373\":1,\"2090\":1,\"3329\":1,\"3447\":3,\"3454\":1,\"3498\":1,\"4117\":1,\"4494\":1,\"4534\":1,\"4868\":1,\"4947\":1,\"5010\":1,\"5526\":1,\"5589\":1,\"6126\":1,\"6339\":1,\"6374\":1,\"7246\":1}}],[\"例如java\",{\"1\":{\"514\":1,\"5402\":1}}],[\"例如很长的数组\",{\"1\":{\"406\":1}}],[\"抛出\",{\"1\":{\"3870\":1,\"6025\":1}}],[\"抛出异常时\",{\"1\":{\"1322\":1}}],[\"抛出一个运行时异常\",{\"1\":{\"475\":1,\"5370\":1}}],[\"项目\",{\"0\":{\"7172\":1,\"7314\":1}}],[\"项目可能已经依赖了redis的其他功能\",{\"1\":{\"4867\":1}}],[\"项目重难点\",{\"1\":{\"4656\":1,\"7175\":1}}],[\"项目类似于今日头条\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"项目背景\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"项目介绍\",{\"0\":{\"4653\":1}}],[\"项目拷打环节\",{\"1\":{\"4315\":1,\"7140\":1}}],[\"项目里有使用多线程并发操作吗\",{\"0\":{\"4213\":1}}],[\"项目规模\",{\"0\":{\"4210\":1}}],[\"项目中常用技术一\",{\"0\":{\"5025\":1}}],[\"项目中任何需要延迟队列的地方\",{\"1\":{\"4876\":1,\"7254\":1}}],[\"项目中的技术栈\",{\"1\":{\"4288\":1,\"7113\":1}}],[\"项目中有做过压测吗\",{\"0\":{\"4185\":1}}],[\"项目中遇到问题如何解决\",{\"0\":{\"3934\":1}}],[\"项目用到了spring\",{\"0\":{\"4066\":1}}],[\"项目是基于微服务架构\",{\"0\":{\"4014\":1}}],[\"项目开发的实用工具集合\",{\"1\":{\"3447\":1}}],[\"项目启动后扫描顺序\",{\"1\":{\"1312\":1,\"5642\":1}}],[\"项目主页\",{\"0\":{\"153\":1}}],[\"项目主页配置\",{\"1\":{\"152\":1,\"156\":1,\"5265\":1}}],[\"步骤3代码\",{\"1\":{\"3979\":1}}],[\"步骤三\",{\"1\":{\"2018\":1,\"2026\":1}}],[\"步骤二\",{\"1\":{\"2017\":1,\"2023\":1}}],[\"步骤一\",{\"1\":{\"2016\":1,\"2020\":1}}],[\"步\",{\"1\":{\"1291\":1,\"1292\":1,\"1293\":1,\"3159\":1,\"5632\":1,\"5634\":1,\"5636\":1,\"6815\":1}}],[\"步描述\",{\"1\":{\"1195\":1,\"5547\":1}}],[\"引擎的默认隔离级别虽然是\",{\"1\":{\"3011\":1,\"6683\":1}}],[\"引擎的默认隔离级别\",{\"1\":{\"2999\":1,\"6671\":1}}],[\"引擎的表里对某些纪录加上\",{\"1\":{\"2908\":1,\"6580\":1}}],[\"引擎的表里对某些记录加上\",{\"1\":{\"2907\":1,\"6579\":1}}],[\"引擎的表使用表锁\",{\"1\":{\"2886\":1,\"6558\":1}}],[\"引擎的表的\",{\"1\":{\"2797\":1,\"6469\":1}}],[\"引擎通过什么技术来保证事务的这四个特性的呢\",{\"1\":{\"2975\":1,\"6647\":1}}],[\"引擎就不支持事务\",{\"1\":{\"2969\":1,\"6641\":1}}],[\"引擎它是支持事务的\",{\"1\":{\"2968\":1,\"6640\":1}}],[\"引擎并不支持行级锁\",{\"1\":{\"2937\":1,\"6609\":1}}],[\"引擎表来说\",{\"1\":{\"2797\":1,\"6469\":1}}],[\"引擎支持全文索引\",{\"1\":{\"2794\":1,\"6465\":1}}],[\"引擎\",{\"1\":{\"2776\":1,\"2805\":1,\"6445\":1,\"6477\":1}}],[\"引擎中\",{\"1\":{\"2750\":1,\"2766\":1,\"2767\":1,\"6419\":1,\"6435\":1,\"6436\":1}}],[\"引擎都是使用\",{\"1\":{\"2749\":1,\"2765\":1,\"6418\":1,\"6434\":1}}],[\"引擎和\",{\"1\":{\"2749\":1,\"2765\":1,\"6418\":1,\"6434\":1}}],[\"引擎是支持行级锁的\",{\"1\":{\"2937\":1,\"6609\":1}}],[\"引擎是\",{\"1\":{\"2728\":1,\"6397\":1}}],[\"引出了\",{\"1\":{\"2362\":1}}],[\"引入了\",{\"1\":{\"7064\":1}}],[\"引入了基于\",{\"1\":{\"4563\":1,\"6163\":1}}],[\"引入了git\",{\"1\":{\"3361\":1}}],[\"引入\",{\"1\":{\"3360\":1}}],[\"引入依赖并编写好配置之后\",{\"1\":{\"1345\":1,\"5670\":1}}],[\"引入starter组件\",{\"1\":{\"1306\":1}}],[\"引导大家对循环依赖有一个整体的认识\",{\"1\":{\"1286\":1,\"5628\":1}}],[\"引用的一个内存地址\",{\"1\":{\"5107\":1}}],[\"引用没有变实际上包含的变量已经被修改\",{\"1\":{\"3686\":1,\"5855\":1}}],[\"引用计数为\",{\"1\":{\"297\":1}}],[\"引用失效时计数器减\",{\"1\":{\"297\":1}}],[\"回顾同一子网内的\",{\"1\":{\"7046\":1}}],[\"回顾\",{\"0\":{\"6981\":1,\"7004\":1}}],[\"回顾本文基本以实际操作的例子开始\",{\"1\":{\"1286\":1,\"5628\":1}}],[\"回填article\",{\"1\":{\"4857\":1}}],[\"回到\",{\"1\":{\"3679\":1,\"5848\":1}}],[\"回收时应用程序会整个停下来直到回收完成\",{\"1\":{\"3616\":1}}],[\"回收速度快\",{\"1\":{\"3614\":1}}],[\"回收资源\",{\"1\":{\"1885\":1}}],[\"回表是指根据索引查询到的主键值再去访问主键索引\",{\"1\":{\"4202\":1}}],[\"回表\",{\"1\":{\"2811\":1,\"2813\":1,\"6483\":1,\"6485\":1}}],[\"回一个\",{\"1\":{\"2598\":1,\"4605\":1}}],[\"回滚指针\",{\"1\":{\"3029\":1,\"6695\":1}}],[\"回滚日志\",{\"1\":{\"2977\":1,\"6649\":1}}],[\"回滚操作或者重新发送消息\",{\"1\":{\"2054\":1,\"5759\":1}}],[\"回滚规则\",{\"1\":{\"1226\":1,\"5578\":1}}],[\"表时\",{\"1\":{\"7045\":1}}],[\"表记录了某些其他网络设备的\",{\"1\":{\"7028\":1}}],[\"表必须有个主键\",{\"0\":{\"6734\":1}}],[\"表明锁被释放\",{\"1\":{\"3743\":1,\"5975\":1}}],[\"表明有事务想在某个区间插入新记录\",{\"1\":{\"2963\":1,\"6635\":1}}],[\"表明本次回应的数据长度\",{\"1\":{\"2215\":1}}],[\"表中\",{\"1\":{\"7042\":1}}],[\"表中构造一条主机\",{\"1\":{\"7040\":1}}],[\"表中并无主机\",{\"1\":{\"7036\":1}}],[\"表中有一个范围\",{\"1\":{\"2953\":1,\"6625\":1}}],[\"表中只有一个\",{\"1\":{\"2778\":1,\"6447\":1}}],[\"表里的主键通常都会设置成自增的\",{\"1\":{\"2919\":1,\"6591\":1}}],[\"表级锁\",{\"0\":{\"6543\":1}}],[\"表级锁和行锁三类\",{\"1\":{\"2850\":1,\"6522\":1}}],[\"表级别的独占锁\",{\"1\":{\"2880\":1,\"6552\":1}}],[\"表级别的共享锁\",{\"1\":{\"2880\":1,\"6552\":1}}],[\"表锁和行锁是满足读读共享\",{\"1\":{\"2914\":1,\"6586\":1}}],[\"表锁除了会限制别的线程的读写外\",{\"1\":{\"2881\":1,\"6553\":1}}],[\"表锁\",{\"0\":{\"6549\":1},\"1\":{\"2873\":1,\"6545\":1}}],[\"表数据文件本身就是主索引\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"表\",{\"1\":{\"2754\":1,\"6423\":1,\"7027\":1,\"7028\":1,\"7036\":1,\"7045\":2,\"7047\":1,\"7053\":1}}],[\"表达式\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"表示审核成功存储到数据库\",{\"1\":{\"4319\":1,\"7144\":1}}],[\"表示springboot启动过程结束\",{\"1\":{\"4239\":1}}],[\"表示拼接sql字符串\",{\"1\":{\"4074\":1}}],[\"表示一个占位符\",{\"1\":{\"4073\":1}}],[\"表示一切正常\",{\"1\":{\"2196\":1}}],[\"表示成功\",{\"1\":{\"3656\":1,\"5899\":1}}],[\"表示成2进制就是1000\",{\"1\":{\"1022\":1}}],[\"表示可读\",{\"1\":{\"3510\":1}}],[\"表示第一次复制\",{\"1\":{\"3233\":1}}],[\"表示要进行数据同步\",{\"1\":{\"3233\":1}}],[\"表示最后一次插入或更新该行的事务\",{\"1\":{\"3028\":1,\"6694\":1}}],[\"表示向服务端发起连接\",{\"1\":{\"2527\":1}}],[\"表示今后不会再有数据发送\",{\"1\":{\"2450\":1}}],[\"表示希望建立连接\",{\"1\":{\"2449\":1}}],[\"表示\",{\"1\":{\"2448\":1,\"2527\":1,\"4674\":1,\"7193\":1}}],[\"表示客户端的\",{\"1\":{\"2553\":1}}],[\"表示客户端的握手阶段已经结束\",{\"1\":{\"2335\":1}}],[\"表示客户端请求的功能还不支持\",{\"1\":{\"2210\":1}}],[\"表示客户端请求的报文有错误\",{\"1\":{\"2205\":1}}],[\"表示随后的信息都将用\",{\"1\":{\"2334\":1,\"2341\":1}}],[\"表示服务器的握手阶段已经结束\",{\"1\":{\"2342\":1}}],[\"表示服务器当前很忙\",{\"1\":{\"2212\":1}}],[\"表示服务器自身工作正常\",{\"1\":{\"2211\":1}}],[\"表示服务器禁止访问资源\",{\"1\":{\"2206\":1}}],[\"表示请求的资源在服务器上不存在或未找到\",{\"1\":{\"2207\":1}}],[\"表示资源未修改\",{\"1\":{\"2203\":1}}],[\"表示临时重定向\",{\"1\":{\"2201\":1}}],[\"表示永久重定向\",{\"1\":{\"2200\":1}}],[\"表示响应返回的\",{\"1\":{\"2198\":1}}],[\"表示上传文件的\",{\"1\":{\"2092\":1}}],[\"表示文件的大小\",{\"1\":{\"2092\":1}}],[\"表示文件大小\",{\"1\":{\"2088\":1}}],[\"表示文件类型\",{\"1\":{\"2087\":1}}],[\"表示文件描述符集合\",{\"1\":{\"1770\":1}}],[\"表示的管道称为匿名管道\",{\"1\":{\"1949\":1}}],[\"表示如果有新的进程加入优先级高的队列时\",{\"1\":{\"1938\":1}}],[\"表示有多个队列\",{\"1\":{\"1937\":1}}],[\"表示hashmap满的程度\",{\"1\":{\"990\":1}}],[\"表示运行应用程序中出现了严重的错误\",{\"1\":{\"456\":1,\"5351\":1}}],[\"依次发生如下事件\",{\"1\":{\"7035\":1}}],[\"依赖隔离\",{\"1\":{\"4509\":1,\"6130\":1}}],[\"依赖统一认证\",{\"1\":{\"4054\":1}}],[\"依赖于有序的数据\",{\"1\":{\"2802\":1,\"2810\":1,\"6474\":1,\"6482\":1}}],[\"依赖的可能是别的不提供自身报文长度或首部长度的网络层协议\",{\"1\":{\"2515\":1}}],[\"依赖有源码例子\",{\"1\":{\"1284\":1,\"5626\":1}}],[\"依赖了\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"依然是\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"依然是通过堆转储文件去找\",{\"1\":{\"3591\":1}}],[\"依然也要得到客户端的应答回应\",{\"1\":{\"2553\":1}}],[\"依然会存在问题\",{\"1\":{\"1883\":1}}],[\"依然不完美\",{\"1\":{\"621\":1}}],[\"依然有我们不需要的方法啊\",{\"1\":{\"620\":1}}],[\"继续选举\",{\"1\":{\"3210\":1}}],[\"继续判断\",{\"1\":{\"3053\":1}}],[\"继续进行监听\",{\"1\":{\"1844\":1,\"6386\":1}}],[\"继续创建\",{\"1\":{\"1279\":1,\"5621\":1}}],[\"继承和多态等面向对象特性\",{\"1\":{\"3937\":1}}],[\"继承\",{\"1\":{\"3787\":1,\"3845\":1,\"5798\":1,\"5961\":1}}],[\"继承自spring\",{\"1\":{\"1356\":1,\"5681\":1}}],[\"继承或实现抽象构件\",{\"1\":{\"875\":1}}],[\"继承关系把父类的所有方法都拿过来的问题\",{\"1\":{\"610\":1}}],[\"继承关系描述的是\",{\"1\":{\"581\":1}}],[\"继承使得子类继承了父类的所有公有方法\",{\"1\":{\"574\":1}}],[\"继承了\",{\"1\":{\"572\":1,\"575\":1,\"612\":1}}],[\"幻读\",{\"0\":{\"6661\":1},\"1\":{\"2990\":1,\"4243\":1,\"6662\":1}}],[\"幻读或不可重复读\",{\"1\":{\"1232\":1,\"5584\":1}}],[\"幻灯片页\",{\"0\":{\"157\":1}}],[\"幻灯片\",{\"0\":{\"111\":1,\"5224\":1}}],[\"允许在第一次连接时发送数据\",{\"1\":{\"7072\":1}}],[\"允许在同一\",{\"1\":{\"7064\":1}}],[\"允许应用程序访问和操作分页数据\",{\"1\":{\"4964\":1}}],[\"允许用户以\",{\"1\":{\"4736\":1}}],[\"允许用户编写一系列的命令以自动化任务\",{\"1\":{\"3445\":1}}],[\"允许创建的线程数量为\",{\"1\":{\"3912\":1,\"6059\":1}}],[\"允许多个线程持有锁\",{\"1\":{\"3637\":1,\"5878\":1}}],[\"允许多个线程同时读取共享资源\",{\"1\":{\"1981\":1,\"6240\":1}}],[\"允许其在一定时间\",{\"1\":{\"3322\":1}}],[\"允许读取并发事务已经提交的数据\",{\"1\":{\"1233\":1,\"5585\":1}}],[\"允许读取尚未提交的数据变更\",{\"1\":{\"1232\":1,\"5584\":1}}],[\"允许我们在运行时对字节码进行修改和动态生成\",{\"1\":{\"908\":1,\"5526\":1}}],[\"超出阈值时\",{\"1\":{\"3826\":1,\"5943\":1}}],[\"超大的运算\",{\"1\":{\"3533\":1}}],[\"超过该时间\",{\"1\":{\"7028\":1}}],[\"超过半数\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"超过限制时\",{\"1\":{\"2587\":1}}],[\"超过这个期限\",{\"1\":{\"2382\":1}}],[\"超过临界值\",{\"1\":{\"988\":1}}],[\"超时重传\",{\"1\":{\"2649\":1}}],[\"超时\",{\"1\":{\"1226\":1,\"3785\":1,\"5578\":1,\"5796\":1}}],[\"平时会看那些指标\",{\"0\":{\"4185\":1}}],[\"平时如何学习新的知识\",{\"0\":{\"4096\":1}}],[\"平时学习技术的途径和方法\",{\"0\":{\"4002\":1}}],[\"平衡\",{\"1\":{\"2759\":1,\"6428\":1}}],[\"平衡的二叉树\",{\"1\":{\"691\":1,\"5458\":1}}],[\"平台\",{\"1\":{\"1225\":1,\"5577\":1}}],[\"适于互联网时代\",{\"1\":{\"4500\":1,\"6126\":1}}],[\"适合用beanutils\",{\"1\":{\"5114\":1}}],[\"适合产生大量数据的互联网服务的数据收集业务\",{\"1\":{\"4799\":1}}],[\"适合使用自旋锁\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"适合有大量数据产生的互联网业务\",{\"1\":{\"1432\":1,\"4760\":1}}],[\"适用场景\",{\"1\":{\"2159\":1}}],[\"适用于\",{\"1\":{\"1915\":1}}],[\"适用于公司对外提供能力\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"适配器模式\",{\"1\":{\"1215\":1,\"5567\":1}}],[\"适⽤于⼯⼚类负责创建对象较少的情况\",{\"1\":{\"863\":1,\"5493\":1}}],[\"事件类型包含连接事件\",{\"1\":{\"6322\":1}}],[\"事件发生时只会通知一次\",{\"1\":{\"6279\":1}}],[\"事件\",{\"1\":{\"1984\":1,\"6243\":1}}],[\"事件驱动模型就是观察者模式很经典的一个应用\",{\"1\":{\"1214\":1,\"5566\":1}}],[\"事实上它只是一个文件\",{\"1\":{\"3334\":1}}],[\"事实上\",{\"1\":{\"1810\":1,\"6317\":1,\"6377\":1}}],[\"事务处理等方面对程序进行增强\",{\"1\":{\"4023\":1}}],[\"事务处理结束后\",{\"1\":{\"2974\":1,\"6646\":1}}],[\"事务中\",{\"1\":{\"3057\":1}}],[\"事务4在事务2快照读前一刻提交更新了\",{\"1\":{\"3050\":1}}],[\"事务执行过程中看到的数据\",{\"1\":{\"3012\":1,\"6684\":1}}],[\"事务\",{\"1\":{\"2983\":1,\"2988\":1,\"2992\":1,\"2993\":1,\"3032\":1,\"6655\":1,\"6660\":1,\"6664\":1,\"6665\":1,\"6698\":1}}],[\"事务看起来感觉简单\",{\"1\":{\"2970\":1,\"6642\":1}}],[\"事务的能力\",{\"1\":{\"2737\":1,\"6406\":1}}],[\"事务的原子性确保动作要么全部完成\",{\"1\":{\"1220\":1,\"5572\":1}}],[\"事务传播行为是为了解决业务层方法之间互相调用的事务问题\",{\"1\":{\"1237\":1,\"5589\":1}}],[\"事务运行状态\",{\"1\":{\"1227\":1,\"5579\":1}}],[\"事务隔离级别\",{\"1\":{\"1226\":1,\"5578\":1}}],[\"事务定义信息\",{\"1\":{\"1226\":1,\"5578\":1}}],[\"事务管理器\",{\"1\":{\"1225\":1,\"5577\":1}}],[\"事务管理接口\",{\"1\":{\"1224\":1,\"5576\":1}}],[\"事务是由\",{\"1\":{\"2968\":1,\"6640\":1}}],[\"事务是最小的执行单位\",{\"1\":{\"1220\":1,\"5572\":1}}],[\"事务是逻辑上的一组操作\",{\"1\":{\"1218\":1,\"5570\":1}}],[\"事务特性\",{\"1\":{\"1219\":1,\"5571\":1}}],[\"事情可能就不一样了\",{\"1\":{\"587\":1}}],[\"入参\",{\"1\":{\"1199\":1,\"5551\":1}}],[\"入队和出队\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"入队\",{\"1\":{\"771\":1}}],[\"填充\",{\"1\":{\"1199\":1,\"5551\":1}}],[\"附注\",{\"1\":{\"1198\":1,\"5550\":1}}],[\"获得该\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"获取class对象\",{\"0\":{\"5405\":1}}],[\"获取数据失败\",{\"1\":{\"4919\":1}}],[\"获取该组key下当前需要消费的任务数据\",{\"1\":{\"4895\":1}}],[\"获取所有未来数据集合的key值\",{\"1\":{\"4895\":1}}],[\"获取所有的敏感词\",{\"1\":{\"4857\":1}}],[\"获取所有方法\",{\"1\":{\"542\":1,\"5425\":1}}],[\"获取url中的数据\",{\"1\":{\"4123\":1}}],[\"获取代理对象\",{\"1\":{\"3976\":1}}],[\"获取不到\",{\"1\":{\"3842\":1,\"5958\":1}}],[\"获取当前请求的线程\",{\"1\":{\"3765\":1,\"5996\":1}}],[\"获取后将锁计数器设为\",{\"1\":{\"3742\":1,\"5974\":1}}],[\"获取锁的操作\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"获取锁\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"获取到主机\",{\"1\":{\"7054\":1}}],[\"获取到目标接口的\",{\"1\":{\"7050\":1}}],[\"获取到当前线程对象后\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"获取到\",{\"1\":{\"3558\":1}}],[\"获取字符串长度的时间复杂度是\",{\"1\":{\"3102\":1,\"6758\":1}}],[\"获取的\",{\"1\":{\"2381\":1}}],[\"获取输入流\",{\"1\":{\"2111\":1}}],[\"获取inputstream\",{\"1\":{\"2105\":1}}],[\"获取上传文件的数据字节数组\",{\"1\":{\"2098\":1}}],[\"获取资源的顺序\",{\"1\":{\"2001\":1}}],[\"获取资源的顺序要一样\",{\"1\":{\"1999\":1}}],[\"获取连接\",{\"1\":{\"1824\":1,\"1836\":1,\"1843\":1,\"6353\":1,\"6368\":1,\"6385\":1}}],[\"获取一个自增的计数\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"获取需要自动装配的所有配置类\",{\"1\":{\"1293\":1,\"5636\":1}}],[\"获取类的所有信息\",{\"0\":{\"5421\":1}}],[\"获取类的构造器\",{\"1\":{\"544\":1,\"5426\":1}}],[\"获取类中被public修饰的所有方法\",{\"1\":{\"540\":1,\"5425\":1}}],[\"获取类中的方法\",{\"1\":{\"539\":1,\"5424\":1}}],[\"获取类中的变量\",{\"1\":{\"534\":1,\"5422\":1}}],[\"获取类中所有构造器\",{\"1\":{\"547\":1,\"5427\":1}}],[\"获取类中所有被public修饰的构造器\",{\"1\":{\"545\":1,\"5427\":1}}],[\"获取类中所有被public修饰的所有变量\",{\"1\":{\"535\":1,\"5423\":1}}],[\"获取类中所有的变量\",{\"1\":{\"537\":1,\"5423\":1}}],[\"获取类信息\",{\"1\":{\"524\":1,\"5412\":1}}],[\"获取属性\",{\"1\":{\"524\":1,\"5412\":1}}],[\"捕获\",{\"1\":{\"1196\":1,\"5548\":1}}],[\"渲染数据\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"视频截帧\",{\"1\":{\"4727\":1}}],[\"视频播放排名\",{\"1\":{\"3138\":1,\"6794\":1}}],[\"视频\",{\"1\":{\"2509\":1,\"3101\":1,\"6757\":1}}],[\"视觉污染\",{\"1\":{\"2287\":1}}],[\"视图跳转控制器\",{\"1\":{\"1398\":1}}],[\"视图解析器进行解析\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"视情况而定\",{\"1\":{\"691\":1,\"5458\":1}}],[\"找包含了用户自定义的线程名或者类的线程\",{\"1\":{\"3626\":1}}],[\"找除了\",{\"1\":{\"3581\":1}}],[\"找到的速度会更快\",{\"1\":{\"3582\":1}}],[\"找到的关键字加颜色显示\",{\"1\":{\"3424\":1}}],[\"找到\",{\"1\":{\"3019\":1,\"3581\":1,\"4600\":1,\"6170\":1,\"6691\":1}}],[\"找到了\",{\"1\":{\"2756\":1,\"6425\":1}}],[\"找到处理器映射\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"找出有这个\",{\"1\":{\"4182\":1}}],[\"找出是否存在存活时间过长的对象引发内存泄漏\",{\"1\":{\"3993\":1}}],[\"找出在这几个文件中一直都存在着的用户线程\",{\"1\":{\"3625\":1}}],[\"找出慢sql\",{\"1\":{\"2142\":1}}],[\"找出分配内存过多的代码热点\",{\"1\":{\"2132\":1}}],[\"找出存活对象并进行标记\",{\"1\":{\"377\":1}}],[\"销毁\",{\"1\":{\"1187\":1,\"1340\":1,\"5664\":1}}],[\"值的字段\",{\"1\":{\"2787\":1,\"6456\":1}}],[\"值与当前请求的资源生成的唯一标识进行比较\",{\"1\":{\"2255\":1}}],[\"值设置为\",{\"1\":{\"2245\":1}}],[\"值\",{\"1\":{\"1175\":1,\"2569\":1,\"3130\":1,\"3213\":1,\"3789\":1,\"5800\":1,\"6786\":1}}],[\"值为false时\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"值为true时\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"何时初始化完成\",{\"1\":{\"1164\":1}}],[\"何时被创建\",{\"1\":{\"1164\":1}}],[\"容易成为性能的瓶颈的地方\",{\"1\":{\"6379\":1}}],[\"容易计算\",{\"1\":{\"5034\":1}}],[\"容易因为节点分部不均匀而造成数据倾斜问题\",{\"1\":{\"2034\":1}}],[\"容错\",{\"1\":{\"4503\":1,\"6128\":1}}],[\"容器关闭前调用disposablebean的destroy方法和自身的destroy方法\",{\"1\":{\"4137\":1}}],[\"容器不需要我们安装不同的操作系统\",{\"1\":{\"3314\":1}}],[\"容器运行资源或执行用户指令等操作时\",{\"1\":{\"3304\":1,\"6090\":1}}],[\"容器可以被创建\",{\"1\":{\"3295\":1}}],[\"容器可以管理\",{\"1\":{\"1164\":1}}],[\"容器是镜像运行时的实体\",{\"1\":{\"3295\":1}}],[\"容器还可以进行版本管理\",{\"1\":{\"3292\":1,\"6081\":1}}],[\"容器中的\",{\"1\":{\"1205\":1,\"5557\":1}}],[\"容器中\",{\"1\":{\"1167\":1}}],[\"容器都会创建一个新的实例\",{\"1\":{\"1165\":1}}],[\"容器将不再跟踪其生命周期\",{\"1\":{\"1165\":1}}],[\"容器\",{\"0\":{\"3313\":1,\"3317\":1},\"1\":{\"1161\":1,\"1385\":1,\"3295\":1,\"3307\":1,\"3328\":1,\"5542\":1}}],[\"容量为\",{\"1\":{\"3878\":1,\"6033\":1}}],[\"容量\",{\"1\":{\"971\":1,\"3480\":1}}],[\"框架的工具类\",{\"0\":{\"3899\":1},\"1\":{\"6046\":1}}],[\"框架\",{\"0\":{\"5534\":1},\"1\":{\"1161\":1,\"5542\":1}}],[\"框架来管理\",{\"1\":{\"1158\":1,\"5539\":1}}],[\"框架应该是两个不得不提的\",{\"1\":{\"895\":1,\"5513\":1}}],[\"交出给其它线程使用\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"交互\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"交互演示\",{\"0\":{\"107\":1,\"109\":1,\"5220\":1,\"5222\":1}}],[\"交给调用者\",{\"1\":{\"1186\":1}}],[\"交由\",{\"1\":{\"1158\":1,\"3128\":1,\"3136\":1,\"5539\":1,\"6784\":1,\"6792\":1}}],[\"生成数字签名\",{\"0\":{\"5085\":1}}],[\"生成集群的元数据信息\",{\"1\":{\"4564\":1}}],[\"生成heap\",{\"1\":{\"3993\":1}}],[\"生成命令\",{\"1\":{\"3565\":1,\"3566\":1}}],[\"生成堆内存转储文件主要用到命令\",{\"1\":{\"3565\":1}}],[\"生成堆转储文件\",{\"1\":{\"3563\":1,\"3564\":1}}],[\"生成的线程名称\",{\"1\":{\"3560\":1}}],[\"生成\",{\"1\":{\"3235\":1}}],[\"生成一个jwt\",{\"1\":{\"4057\":1}}],[\"生成一个\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"生成一个被代理对象的子类来作为代理\",{\"1\":{\"1157\":1,\"5538\":1}}],[\"生产者速度快\",{\"1\":{\"3590\":1}}],[\"生产者执行本地事务\",{\"1\":{\"2050\":1,\"5755\":1}}],[\"生产者\",{\"0\":{\"6905\":1},\"1\":{\"2047\":1,\"5752\":1}}],[\"生产者会在每次重试之间等待100ms\",{\"1\":{\"1562\":1}}],[\"生产者会放弃重试返回错误\",{\"1\":{\"1562\":1}}],[\"生产者从服务器收到的错误有可能是临时性错误\",{\"1\":{\"1562\":1}}],[\"生产者才会收到一个来自服务器的成功响应\",{\"1\":{\"1560\":1}}],[\"生产者就会收到一个来自服务器的成功响应\",{\"1\":{\"1558\":1}}],[\"生产者在成功写入消息之前不会等待任何来自服务器的响应\",{\"1\":{\"1556\":1}}],[\"生产者有哪些发消息的模式\",{\"0\":{\"1512\":1}}],[\"生产者发送数据的对象\",{\"1\":{\"1444\":1}}],[\"生产者和消费者面向的都是同一个\",{\"1\":{\"1441\":1}}],[\"生命周期的意义就在于\",{\"1\":{\"1166\":1}}],[\"生命周期与线程的生命周期一致\",{\"1\":{\"197\":1}}],[\"去调用服务注册中心的服务\",{\"1\":{\"4541\":1}}],[\"去年\",{\"1\":{\"4351\":1}}],[\"去创建\",{\"1\":{\"3909\":1,\"6056\":1}}],[\"去创建代理对象\",{\"1\":{\"1157\":1,\"5538\":1}}],[\"去resources下找配置文件\",{\"1\":{\"1313\":1,\"5643\":1}}],[\"去resources下找cofnig文件夹下找配置文件\",{\"1\":{\"1313\":1,\"5643\":1}}],[\"去找配置类\",{\"1\":{\"1308\":1}}],[\"去进行代理了\",{\"1\":{\"1157\":1,\"5538\":1}}],[\"去执行\",{\"1\":{\"181\":1,\"5290\":1}}],[\"封装好的并发工具类来间接使用的\",{\"1\":{\"3680\":1,\"5849\":1}}],[\"封装了内存管理单元\",{\"1\":{\"1673\":1}}],[\"封装起来\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"封装结果到分页对象\",{\"1\":{\"1112\":1}}],[\"安全性没有\",{\"1\":{\"7078\":1}}],[\"安全性和资源消耗\",{\"1\":{\"7078\":1}}],[\"安全性更高\",{\"1\":{\"5101\":1}}],[\"安全性得不到保证\",{\"1\":{\"5100\":1}}],[\"安全性好\",{\"1\":{\"4738\":1}}],[\"安全散列\",{\"1\":{\"5096\":1}}],[\"安全控制\",{\"1\":{\"4023\":1}}],[\"安全协议\",{\"1\":{\"2306\":1}}],[\"安全传输层\",{\"1\":{\"2266\":1}}],[\"安全\",{\"1\":{\"1141\":1,\"2220\":1,\"5720\":1}}],[\"安全的在\",{\"1\":{\"44\":1,\"5157\":1}}],[\"开箱即用的方向发展\",{\"1\":{\"4569\":1}}],[\"开了2w个线程\",{\"1\":{\"4430\":1}}],[\"开头\",{\"1\":{\"4204\":1}}],[\"开头的\",{\"1\":{\"2846\":1,\"6518\":1}}],[\"开放最短路径优先协议\",{\"1\":{\"2715\":1,\"7010\":1}}],[\"开销较小\",{\"1\":{\"2496\":1}}],[\"开启feign对hystrix熔断降级的支持\",{\"1\":{\"4926\":1}}],[\"开启服务降级\",{\"1\":{\"4925\":1}}],[\"开启调度任务\",{\"1\":{\"4860\":1,\"4938\":1}}],[\"开启异步调用\",{\"1\":{\"4860\":1,\"4938\":1}}],[\"开启版本控制后\",{\"1\":{\"4703\":1}}],[\"开启慢日志可能会让\",{\"1\":{\"3540\":1}}],[\"开启\",{\"1\":{\"2591\":1,\"3155\":1,\"3307\":1,\"6811\":1}}],[\"开启kafka本身存在的幂等性\",{\"1\":{\"1498\":1,\"4678\":1,\"6951\":1}}],[\"开启二级缓存后\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"开源社区活跃度高\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"开始审核文章\",{\"1\":{\"4846\":1,\"7235\":1}}],[\"开始扯了比亚迪的起家\",{\"1\":{\"4446\":1}}],[\"开始kpi了\",{\"1\":{\"4438\":1}}],[\"开始技术面试了\",{\"1\":{\"4329\":1,\"7154\":1}}],[\"开始寻找由\",{\"1\":{\"4182\":1}}],[\"开始代理\",{\"1\":{\"3965\":1,\"3969\":1,\"3975\":1}}],[\"开始提供了atomicreference\",{\"1\":{\"3697\":1,\"5866\":1}}],[\"开始提供了atomicstampedreference类\",{\"1\":{\"3689\":1,\"5859\":1}}],[\"开始填充时发现依赖于\",{\"1\":{\"1258\":1,\"5610\":1}}],[\"开始执行handler\",{\"1\":{\"1199\":1,\"5551\":1}}],[\"开发了基于\",{\"1\":{\"6989\":1}}],[\"开发中使用keys的模糊匹配却发现redis的cpu使用率极高\",{\"1\":{\"4891\":1}}],[\"开发语言\",{\"1\":{\"4770\":1}}],[\"开发技术\",{\"1\":{\"4654\":1,\"7173\":1}}],[\"开发者可以自定义拦截器\",{\"1\":{\"4944\":1}}],[\"开发者可以选择合适的数据结构来定义\",{\"1\":{\"608\":1}}],[\"开发者要选出最佳的通信机制\",{\"1\":{\"4483\":1,\"6116\":1}}],[\"开发过程中\",{\"1\":{\"3340\":1}}],[\"开发手册\",{\"1\":{\"2741\":1,\"3906\":1,\"3909\":1,\"6053\":1,\"6056\":1,\"6410\":1}}],[\"开发人员\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"开发人员可以重新加载\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"开发团队赋予它的使命是未来可以替换掉\",{\"1\":{\"372\":1}}],[\"共\",{\"1\":{\"3510\":1}}],[\"共同关注\",{\"1\":{\"3122\":1,\"6778\":1}}],[\"共同点\",{\"1\":{\"932\":1}}],[\"共享方式\",{\"1\":{\"3656\":1,\"3657\":1,\"5899\":1,\"5900\":1}}],[\"共享锁是指允许多个线程同时持有锁\",{\"1\":{\"3833\":1,\"5949\":1}}],[\"共享锁和独占锁的释放有一定区别\",{\"1\":{\"3638\":1,\"5879\":1}}],[\"共享锁\",{\"0\":{\"5948\":1},\"1\":{\"2907\":1,\"2941\":1,\"3022\":1,\"3637\":1,\"5878\":1,\"5946\":1,\"6579\":1,\"6613\":1}}],[\"共享表锁\",{\"1\":{\"2882\":1,\"6554\":1}}],[\"共享内存针对消息缓冲的缺点改而利用内存缓冲区直接交换信息\",{\"1\":{\"3474\":1}}],[\"共享内存通信\",{\"1\":{\"3469\":1}}],[\"共享内存是快的ipc方式\",{\"1\":{\"3465\":1}}],[\"共享内存就是映射一段能被其他进程所访问的内存\",{\"1\":{\"3465\":1}}],[\"共享内存\",{\"1\":{\"1974\":1,\"3465\":1,\"3470\":1,\"6255\":1}}],[\"共享内存的机制\",{\"1\":{\"1960\":1}}],[\"共享数据\",{\"1\":{\"1884\":1}}],[\"共享\",{\"1\":{\"1790\":1,\"6295\":1}}],[\"共享的\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"共3个consumer\",{\"1\":{\"1476\":1,\"6926\":1}}],[\"举个生活中的例子\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"举个栗子\",{\"1\":{\"2982\":1,\"2987\":1,\"2991\":1,\"6654\":1,\"6659\":1,\"6663\":1}}],[\"举个例子来说\",{\"1\":{\"1037\":1}}],[\"举个例子\",{\"1\":{\"633\":1,\"1423\":1,\"1616\":1,\"3874\":1,\"4649\":1,\"6029\":1,\"6222\":1,\"6276\":1}}],[\"举例\",{\"1\":{\"1126\":1,\"5708\":1}}],[\"方便说一下是哪个公司吗\",{\"1\":{\"4337\":1,\"7162\":1}}],[\"方便调整线程池大小配置\",{\"1\":{\"1379\":1}}],[\"方案详细说明如下\",{\"1\":{\"6384\":1}}],[\"方案的示意图如下\",{\"1\":{\"6364\":1}}],[\"方案的缺点\",{\"1\":{\"1833\":1,\"6363\":1}}],[\"方案具体使用进程还是线程\",{\"1\":{\"6337\":1}}],[\"方案2\",{\"1\":{\"4892\":1}}],[\"方案1\",{\"1\":{\"4890\":1}}],[\"方案\",{\"1\":{\"4152\":1,\"6332\":1,\"6340\":1}}],[\"方案说明如下\",{\"1\":{\"1842\":1}}],[\"方式二\",{\"1\":{\"5015\":1,\"6046\":1}}],[\"方式二继承webmvcconfigurationsupport类\",{\"1\":{\"1396\":1}}],[\"方式一\",{\"1\":{\"5008\":1,\"6008\":1}}],[\"方式一实现webmvcconfigurer接口\",{\"1\":{\"1396\":1}}],[\"方式保存和使用数据\",{\"1\":{\"4736\":1}}],[\"方式的持久化\",{\"1\":{\"3153\":1,\"6809\":1}}],[\"方式解决了幻读\",{\"1\":{\"3012\":1,\"3013\":1,\"6684\":1,\"6685\":1}}],[\"方算作过程执行完毕\",{\"1\":{\"1373\":1}}],[\"方言\",{\"1\":{\"1125\":1,\"5707\":1}}],[\"方法用于告诉\",{\"1\":{\"4943\":1}}],[\"方法用于实现具体的拦截逻辑\",{\"1\":{\"4942\":1}}],[\"方法实现\",{\"1\":{\"4029\":1}}],[\"方法锁形式\",{\"1\":{\"3745\":1}}],[\"方法就是安全且幂等的\",{\"1\":{\"2223\":1}}],[\"方法就是这样的\",{\"1\":{\"290\":1}}],[\"方法都是安全和幂等的吗\",{\"1\":{\"2222\":1}}],[\"方法才能被唤醒\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"方法接收的最大偏移量提交上去\",{\"1\":{\"1602\":1}}],[\"方法进行等待\",{\"1\":{\"1543\":1}}],[\"方法发送\",{\"1\":{\"1543\":1}}],[\"方法会一直尝试直至提交成功\",{\"1\":{\"1609\":1}}],[\"方法会返回一个\",{\"1\":{\"1517\":1}}],[\"方法会传入一个期望的最小容量\",{\"1\":{\"801\":1}}],[\"方法返回代理引用或者原始引用\",{\"1\":{\"1283\":1,\"5625\":1}}],[\"方法返回地址\",{\"1\":{\"214\":1}}],[\"方法可能继续在现有事务中运行\",{\"1\":{\"1237\":1,\"5589\":1}}],[\"方法将响应结果发送给\",{\"1\":{\"1840\":1,\"6372\":1}}],[\"方法将\",{\"1\":{\"1187\":1}}],[\"方法传入classloader的引用\",{\"1\":{\"1176\":1}}],[\"方法传入当前工厂实例的引用\",{\"1\":{\"1177\":1}}],[\"方法传入当前\",{\"1\":{\"1175\":1,\"1179\":1,\"1180\":1,\"1181\":1}}],[\"方法入参\",{\"1\":{\"911\":1,\"5529\":1}}],[\"方法中自定义处理逻辑\",{\"1\":{\"904\":1,\"5522\":1}}],[\"方法的类\",{\"1\":{\"4182\":1}}],[\"方法的时候指定一个\",{\"1\":{\"1520\":1}}],[\"方法的实际执行将提交给spring\",{\"1\":{\"1371\":1}}],[\"方法的功能就是根据key来定位其在hashmap中的位置\",{\"1\":{\"1008\":1}}],[\"方法的参数\",{\"1\":{\"903\":1,\"5521\":1}}],[\"方法的调用\",{\"1\":{\"219\":1}}],[\"方法有下面三个参数\",{\"1\":{\"903\":1,\"5521\":1}}],[\"方法来获取默认值或将其值更改为当前线程所存的副本的值\",{\"1\":{\"3758\":1,\"5990\":1}}],[\"方法来调用\",{\"1\":{\"902\":1,\"5520\":1}}],[\"方法来返回一个线程安全的list\",{\"1\":{\"805\":1}}],[\"方法来加载类\",{\"1\":{\"448\":1,\"449\":1,\"5341\":1,\"5342\":1}}],[\"方法要被调用\",{\"1\":{\"739\":1}}],[\"方法获取对应的构造器\",{\"1\":{\"532\":1,\"5420\":1}}],[\"方法指定获取指定参数类型的\",{\"1\":{\"531\":1,\"5419\":1}}],[\"方法头中使用关键字throws\",{\"1\":{\"471\":1,\"5366\":1}}],[\"方法即可\",{\"1\":{\"436\":1,\"5327\":1}}],[\"方法而不是loadclass\",{\"1\":{\"435\":1,\"5326\":1}}],[\"方法解析该类\",{\"1\":{\"431\":1,\"5322\":1}}],[\"方法名\",{\"1\":{\"285\":1}}],[\"方法正常退出或异常退出的地址\",{\"1\":{\"214\":1}}],[\"方法执行结束出栈\",{\"1\":{\"204\":1}}],[\"方法\",{\"1\":{\"198\":2,\"281\":2,\"435\":1,\"436\":1,\"511\":1,\"516\":1,\"526\":1,\"529\":1,\"686\":1,\"815\":1,\"904\":1,\"910\":1,\"912\":1,\"1007\":1,\"1011\":1,\"1128\":1,\"1129\":1,\"1183\":1,\"1198\":1,\"1517\":1,\"1546\":1,\"1608\":1,\"1811\":1,\"1824\":1,\"1836\":1,\"1854\":1,\"1857\":2,\"1858\":1,\"3746\":1,\"3763\":1,\"3764\":1,\"3885\":1,\"4198\":1,\"4274\":1,\"4275\":1,\"4754\":1,\"4946\":1,\"5326\":1,\"5327\":1,\"5399\":1,\"5404\":1,\"5414\":1,\"5417\":1,\"5522\":1,\"5528\":1,\"5530\":1,\"5550\":1,\"5709\":1,\"5710\":1,\"5977\":1,\"5994\":1,\"5995\":1,\"6040\":1,\"6230\":1,\"6233\":2,\"6234\":1,\"6318\":1,\"6353\":1,\"6368\":1}}],[\"方法区和堆属于主内存区域\",{\"1\":{\"3707\":1,\"5906\":1}}],[\"方法区中的常量引用的对象\",{\"1\":{\"306\":1}}],[\"方法区中类静态属性引用的对象\",{\"1\":{\"305\":1}}],[\"方法区\",{\"1\":{\"187\":1,\"279\":1,\"282\":1,\"396\":1}}],[\"答案是有的\",{\"1\":{\"6259\":1}}],[\"答案是不可能\",{\"1\":{\"591\":1}}],[\"答案就是\",{\"1\":{\"3177\":1,\"6835\":1}}],[\"答\",{\"1\":{\"1121\":1,\"5703\":1}}],[\"拦截查询\",{\"1\":{\"4948\":1,\"4949\":1}}],[\"拦截\",{\"1\":{\"1127\":1,\"5708\":1}}],[\"拦截器按照注册的顺序依次执行\",{\"1\":{\"4946\":1}}],[\"拦截器会按照注册的顺序依次执行\",{\"1\":{\"4945\":1}}],[\"拦截器会在sql执行前动态修改sql\",{\"1\":{\"1107\":1}}],[\"拦截器接口\",{\"1\":{\"4941\":1}}],[\"拦截器的根本规范就是jsr\",{\"1\":{\"4041\":1}}],[\"拦截器的实现是基于java的动态代理机制\",{\"1\":{\"4037\":1}}],[\"拦截器只能拦截controller请求\",{\"1\":{\"4040\":1}}],[\"拦截器链中的拦截器实例是以单例模式管理的\",{\"1\":{\"4039\":1}}],[\"拦截器底层协议是什么\",{\"0\":{\"4036\":1}}],[\"拦截器主要用途\",{\"1\":{\"1403\":1}}],[\"拦截器\",{\"0\":{\"1399\":1}}],[\"拦截器配置\",{\"1\":{\"1398\":1}}],[\"拦截器可以灵活适配不同数据库的分页语法\",{\"1\":{\"1114\":1}}],[\"拦截待执行sql\",{\"1\":{\"1109\":1}}],[\"拦截被代理类中的方法\",{\"1\":{\"911\":1,\"5529\":1}}],[\"速度慢\",{\"1\":{\"5102\":1}}],[\"速度快\",{\"1\":{\"5099\":1}}],[\"速度较快\",{\"1\":{\"1106\":1}}],[\"速度很快\",{\"1\":{\"363\":1}}],[\"总不能数据只在\",{\"1\":{\"6180\":1}}],[\"总的来说\",{\"1\":{\"4965\":1}}],[\"总页数\",{\"1\":{\"4963\":1}}],[\"总共\",{\"1\":{\"2972\":3,\"6644\":3}}],[\"总是需要知道下一跳\",{\"1\":{\"7026\":1}}],[\"总是以相同的顺序申请自己想要的资源\",{\"1\":{\"1999\":1}}],[\"总是能路由到固定的分区\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"总体来说分为以下几个过程\",{\"1\":{\"2716\":1,\"7011\":1}}],[\"总体来看\",{\"1\":{\"1808\":1,\"6315\":1}}],[\"总体流程\",{\"1\":{\"1305\":1}}],[\"总耗时会是\",{\"1\":{\"1417\":1}}],[\"总结了下面的几点\",{\"1\":{\"6991\":1}}],[\"总结来说\",{\"1\":{\"7043\":1}}],[\"总结来说就是\",{\"1\":{\"3255\":1,\"6860\":1}}],[\"总结来讲\",{\"1\":{\"4575\":1}}],[\"总结而言\",{\"1\":{\"3759\":1}}],[\"总结的来说\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"总结一句话\",{\"1\":{\"2455\":1}}],[\"总结一下\",{\"1\":{\"1099\":1,\"1115\":1,\"5697\":1}}],[\"总结\",{\"0\":{\"3658\":1,\"5724\":1,\"5867\":1,\"5901\":1,\"5981\":1},\"1\":{\"1285\":1,\"2517\":1,\"3675\":1,\"5627\":1,\"5844\":1}}],[\"总之在rc隔离级别下\",{\"1\":{\"3058\":1}}],[\"总之\",{\"1\":{\"705\":1,\"1114\":1,\"2073\":1,\"2094\":1,\"5473\":1,\"5778\":1}}],[\"总之它在你面前就没有隐私了\",{\"1\":{\"524\":1,\"5412\":1}}],[\"访问量达到了44w+\",{\"1\":{\"5024\":1,\"7288\":1}}],[\"访问统计\",{\"1\":{\"4721\":1}}],[\"访问其他需要权限验证的服务器时\",{\"1\":{\"4059\":1}}],[\"访问标志来辨别一个方法是否声明为同步方法\",{\"1\":{\"3747\":1,\"5979\":1}}],[\"访问某个接口经常需要\",{\"1\":{\"3621\":1}}],[\"访问假的淘宝\",{\"1\":{\"2286\":1}}],[\"访问后端服务器发生了错误\",{\"1\":{\"2211\":1}}],[\"访问所有未完成的请求\",{\"1\":{\"1759\":1}}],[\"访问计数器\",{\"1\":{\"1745\":1}}],[\"访问次数\",{\"1\":{\"1744\":1}}],[\"访问前的等待时间\",{\"1\":{\"1728\":1}}],[\"访问时间\",{\"1\":{\"1727\":1}}],[\"访问内存会有很明显的重复访问的倾向性\",{\"1\":{\"1636\":1}}],[\"访问http\",{\"1\":{\"1345\":1,\"5670\":1}}],[\"访问\",{\"1\":{\"1330\":1,\"2073\":1,\"5778\":1}}],[\"访问顺序经常用于实现lru缓存\",{\"1\":{\"1089\":1}}],[\"访问者模式\",{\"1\":{\"854\":1,\"5484\":1}}],[\"邻近键等\",{\"1\":{\"1084\":1}}],[\"推向崩溃\",{\"1\":{\"3540\":1}}],[\"推荐奇数个\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"推荐过的不重复推荐\",{\"1\":{\"2163\":1}}],[\"推荐用\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"推荐\",{\"0\":{\"3854\":1},\"1\":{\"1396\":1,\"2127\":1,\"6008\":1}}],[\"推荐使用concurrenthashmap\",{\"1\":{\"958\":1}}],[\"推荐使用hashmap\",{\"1\":{\"958\":1}}],[\"推迟设置属性\",{\"1\":{\"1266\":1}}],[\"推敲\",{\"1\":{\"1080\":1}}],[\"质量来考虑的\",{\"1\":{\"1069\":1}}],[\"功效\",{\"1\":{\"1069\":1}}],[\"功能增强\",{\"1\":{\"4947\":1}}],[\"功能特性\",{\"1\":{\"4790\":1}}],[\"功能有路由分发和过滤\",{\"1\":{\"4506\":1,\"6130\":1}}],[\"功能齐全\",{\"1\":{\"4494\":1,\"6126\":1}}],[\"功能和\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"功能的实现\",{\"1\":{\"1210\":1,\"5562\":1}}],[\"功能详情\",{\"1\":{\"165\":1,\"173\":1,\"5273\":1,\"5281\":1}}],[\"功能\",{\"0\":{\"158\":1,\"166\":1,\"5266\":1,\"5274\":1},\"1\":{\"160\":1,\"168\":1,\"4560\":1,\"4681\":1,\"5268\":1,\"5276\":1,\"6160\":1}}],[\"功能亮点\",{\"0\":{\"142\":1,\"5255\":1}}],[\"降低开发成本\",{\"1\":{\"4478\":1,\"6111\":1}}],[\"降低资源消耗\",{\"1\":{\"3850\":1,\"6004\":1}}],[\"降低了模块间的耦合度\",{\"1\":{\"4180\":1}}],[\"降低了开销\",{\"1\":{\"3024\":1}}],[\"降低了学习和使用的门槛\",{\"1\":{\"2262\":1}}],[\"降低发送的数据量\",{\"1\":{\"2666\":1}}],[\"降低模块间的耦合度\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"降低到o\",{\"1\":{\"1065\":1}}],[\"降低哈希冲突的概率\",{\"1\":{\"1036\":1}}],[\"至少目前来看\",{\"1\":{\"6992\":1}}],[\"至少我目前没有办法证明哪个更优\",{\"1\":{\"1063\":1}}],[\"至于获取资源失败入队\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"至于\",{\"1\":{\"3406\":1}}],[\"至于谁订阅\",{\"1\":{\"1410\":1}}],[\"至于为啥不和hashmap采用同样的算法进行扰动\",{\"1\":{\"1063\":1}}],[\"至此客户端也完成连接的关闭\",{\"1\":{\"2600\":1}}],[\"至此服务端已经完成连接的关闭\",{\"1\":{\"2599\":1}}],[\"至此也就解决了\",{\"1\":{\"1284\":1,\"5626\":1}}],[\"至此\",{\"1\":{\"1030\":1,\"1055\":1,\"1079\":1,\"2343\":1}}],[\"又重新恢复了\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"又重新向服务端建立连接\",{\"1\":{\"2540\":1}}],[\"又扯到hashmap底层用到了红黑树\",{\"1\":{\"4310\":1,\"7135\":1}}],[\"又有新的任务提交\",{\"1\":{\"3903\":1,\"6050\":1}}],[\"又能阻止其他事务将新纪录插入到被保护记录前面的间隙中\",{\"1\":{\"2957\":1,\"6629\":1}}],[\"又不会出现数据一致性问题\",{\"1\":{\"2935\":1,\"6607\":1}}],[\"又称为辅助索引\",{\"1\":{\"2789\":1,\"6459\":1}}],[\"又称为幽灵引用或者幻影引用\",{\"1\":{\"319\":1}}],[\"又要使空间和计算量的开销都减到最小\",{\"1\":{\"2171\":1}}],[\"又想申请资源\",{\"1\":{\"1993\":1}}],[\"又对hash算法做了一些改进\",{\"1\":{\"1060\":1}}],[\"又是hashmap更胜一筹\",{\"1\":{\"1059\":1}}],[\"似乎更高明些\",{\"1\":{\"1058\":1}}],[\"zrangebyscore\",{\"1\":{\"4895\":1}}],[\"zrank\",{\"1\":{\"2058\":1,\"5763\":1}}],[\"zxid\",{\"1\":{\"4599\":1,\"4603\":2,\"4604\":1,\"4615\":2,\"4616\":2,\"4619\":1,\"4620\":1,\"4625\":2,\"6183\":1,\"6184\":1,\"6188\":2,\"6189\":2,\"6192\":1,\"6193\":1,\"6203\":2}}],[\"zkserver\",{\"1\":{\"4598\":1,\"6178\":1,\"6182\":1}}],[\"zk的配置方式\",{\"1\":{\"4568\":1}}],[\"zab算法\",{\"0\":{\"6164\":1}}],[\"zab算法等\",{\"1\":{\"4579\":1}}],[\"zab协议\",{\"0\":{\"4591\":1}}],[\"zab\",{\"0\":{\"6165\":1,\"6167\":1,\"6173\":1},\"1\":{\"4582\":1,\"4593\":2,\"4595\":1,\"4596\":3,\"4599\":1,\"4600\":1,\"4608\":2,\"4609\":1,\"4614\":1,\"4629\":1,\"4630\":1,\"4631\":1,\"6166\":2,\"6168\":1,\"6169\":2,\"6170\":1,\"6172\":1,\"6174\":2,\"6178\":1,\"6180\":1,\"6183\":1,\"6186\":1,\"6187\":1,\"6195\":1}}],[\"zadd\",{\"1\":{\"2058\":1,\"5763\":1}}],[\"zookeeper集群的核心角色\",{\"1\":{\"4602\":2}}],[\"zookeeper集群中\",{\"1\":{\"4602\":1}}],[\"zookeeper非常笨重\",{\"1\":{\"4568\":1}}],[\"zookeeper\",{\"0\":{\"4557\":1,\"6156\":1,\"6157\":1,\"6171\":1},\"1\":{\"4559\":1,\"4560\":2,\"4561\":1,\"4562\":1,\"4563\":2,\"4582\":3,\"4593\":4,\"4594\":1,\"4614\":1,\"4621\":2,\"4629\":2,\"4648\":1,\"4654\":1,\"6159\":1,\"6160\":2,\"6161\":1,\"6162\":1,\"6163\":2,\"6166\":4,\"6172\":2,\"6187\":1,\"6194\":2,\"6221\":1,\"7173\":1}}],[\"zuul\",{\"1\":{\"4506\":1,\"6130\":1}}],[\"zsh\",{\"1\":{\"3445\":1}}],[\"zset数据类型的去重有序\",{\"1\":{\"4868\":1,\"7246\":1}}],[\"zset\",{\"0\":{\"6787\":1},\"1\":{\"3094\":1,\"3133\":1,\"3134\":1,\"3135\":1,\"6750\":1,\"6789\":1,\"6790\":1,\"6791\":1}}],[\"z\",{\"1\":{\"3419\":1}}],[\"z|\",{\"1\":{\"3419\":3}}],[\"ziplist\",{\"1\":{\"3111\":2,\"3126\":2,\"6767\":2,\"6782\":2}}],[\"zip\",{\"1\":{\"2111\":1,\"3419\":1}}],[\"zhizhengguan\",{\"1\":{\"6893\":1}}],[\"zhihu\",{\"1\":{\"1190\":1,\"3660\":1,\"5872\":1}}],[\"zhengzhaoyang122\",{\"1\":{\"3790\":1,\"5801\":1}}],[\"zhuanlan\",{\"1\":{\"1190\":1,\"3660\":1,\"5872\":1}}],[\"zhaox\",{\"1\":{\"1054\":1}}],[\"zeromq\",{\"1\":{\"1430\":2}}],[\"zero\",{\"1\":{\"1047\":1,\"1806\":1,\"6313\":1}}],[\"奇数作为容量的大小\",{\"1\":{\"1054\":1}}],[\"奇数\",{\"1\":{\"1053\":1}}],[\"取30条分值较高的文章存入redis\",{\"1\":{\"4999\":2}}],[\"取值范围\",{\"1\":{\"4975\":1,\"4976\":1}}],[\"取消结果\",{\"1\":{\"4933\":1}}],[\"取消任务\",{\"1\":{\"4933\":1,\"4935\":1}}],[\"取消点赞的操作就是删除redis中的数据即可\",{\"1\":{\"2045\":1,\"5750\":1}}],[\"取得代之的确实是\",{\"1\":{\"3747\":1,\"3751\":1,\"5979\":1,\"5983\":1}}],[\"取出\",{\"1\":{\"3765\":1,\"5996\":1}}],[\"取出来\",{\"1\":{\"3045\":1}}],[\"取出连接对象\",{\"1\":{\"2586\":1}}],[\"取出一个半连接对象\",{\"1\":{\"2585\":1}}],[\"取模\",{\"1\":{\"2015\":1}}],[\"取模算法的过程可以用下图表示\",{\"1\":{\"2010\":1}}],[\"取模算法\",{\"0\":{\"2004\":1}}],[\"取而代之用动态数组\",{\"1\":{\"1771\":1}}],[\"取而代之的是这段代码\",{\"1\":{\"1048\":1}}],[\"取了一下其hashcode\",{\"1\":{\"1048\":1}}],[\"~\",{\"1\":{\"1044\":1}}],[\"计数器\",{\"1\":{\"3819\":2,\"5937\":2}}],[\"计数比如用户单位时间的请求数\",{\"1\":{\"3106\":1,\"6762\":1}}],[\"计算量小\",{\"1\":{\"5099\":1}}],[\"计算文章的具体分值\",{\"1\":{\"4999\":1}}],[\"计算文章的分值\",{\"1\":{\"4999\":1}}],[\"计算文章分值\",{\"1\":{\"4999\":1}}],[\"计算热点文章\",{\"1\":{\"4992\":1,\"4999\":1}}],[\"计算完成新热数据后\",{\"1\":{\"4990\":1}}],[\"计算后要修改后的新值b\",{\"1\":{\"3668\":1,\"5831\":1}}],[\"计算机网络\",{\"0\":{\"7007\":1,\"7312\":1}}],[\"计算机网络基础\",{\"0\":{\"2713\":1}}],[\"计算机网络都处在一个共享的环境\",{\"1\":{\"2664\":1}}],[\"计算出适当的偏移量和限制值\",{\"1\":{\"4961\":1}}],[\"计算出本次通信的\",{\"1\":{\"2339\":1}}],[\"计算出图片应该存放在哪台服务器上\",{\"1\":{\"2008\":1}}],[\"计算时间越长\",{\"1\":{\"2169\":1}}],[\"计算第i个消费者\",{\"1\":{\"1474\":2,\"6923\":2}}],[\"计算平均分配后多出的分区数\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"计算平均每个消费者分配的分区数\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"计算结果都一样\",{\"1\":{\"1037\":1}}],[\"计划\",{\"1\":{\"76\":1,\"77\":1,\"5189\":1,\"5190\":1}}],[\"呢\",{\"0\":{\"2566\":1},\"1\":{\"1018\":1,\"2414\":1,\"2756\":1,\"4618\":1,\"6180\":1,\"6191\":1,\"6259\":1,\"6425\":1}}],[\"高\",{\"1\":{\"4786\":1,\"4787\":1,\"7078\":1}}],[\"高吞吐量的数据访问服务\",{\"1\":{\"4712\":1}}],[\"高吞吐的数据访问服务\",{\"1\":{\"4711\":1}}],[\"高性能\",{\"1\":{\"4560\":1,\"4711\":1,\"6160\":1}}],[\"高的线程对应的业务代码\",{\"1\":{\"3548\":1,\"3555\":1}}],[\"高的线程\",{\"1\":{\"3548\":1,\"3552\":1}}],[\"高的进程\",{\"1\":{\"3548\":1,\"3549\":1}}],[\"高响应比优先调度算法是\",{\"1\":{\"1922\":1}}],[\"高峰期一过\",{\"1\":{\"1428\":1}}],[\"高扩展的架构\",{\"1\":{\"1406\":1}}],[\"高可用等核心问题\",{\"1\":{\"4552\":1}}],[\"高可用主要体现在系统7x24不间断服务\",{\"1\":{\"4481\":1,\"6114\":1}}],[\"高可用\",{\"1\":{\"1406\":1}}],[\"高很多\",{\"1\":{\"1017\":1}}],[\"高度\",{\"1\":{\"670\":1}}],[\"^\",{\"1\":{\"1016\":3,\"1035\":3,\"1047\":1,\"1062\":2,\"1068\":1,\"1069\":1,\"1076\":1}}],[\"^=\",{\"1\":{\"1016\":2,\"1035\":2,\"1062\":3}}],[\"输出的消息摘要又称为哈希值\",{\"1\":{\"5029\":1}}],[\"输出与静态代理相同\",{\"1\":{\"3980\":1}}],[\"输出\",{\"1\":{\"3968\":1}}],[\"输出行号\",{\"1\":{\"3424\":1}}],[\"输出应该是个int类型的数组下标\",{\"1\":{\"1010\":1}}],[\"输出结果\",{\"1\":{\"994\":1}}],[\"输出结果为\",{\"1\":{\"976\":1}}],[\"kraft\",{\"1\":{\"4563\":1,\"6163\":1}}],[\"kubernetes\",{\"1\":{\"4491\":1,\"4554\":1,\"6124\":1}}],[\"kde\",{\"1\":{\"3454\":1}}],[\"kill\",{\"1\":{\"2904\":1,\"3323\":1,\"3324\":1,\"6576\":1}}],[\"kernel\",{\"1\":{\"3442\":1}}],[\"keepalivetime才会被回收销毁\",{\"1\":{\"3863\":1,\"6017\":1}}],[\"keepalivetime\",{\"1\":{\"3857\":7,\"3863\":1,\"3864\":1,\"6011\":7,\"6017\":1,\"6018\":1}}],[\"keep\",{\"1\":{\"2216\":1,\"3857\":1,\"6011\":1}}],[\"keys的模糊匹配功能很方便也很强大\",{\"1\":{\"4891\":1}}],[\"keys\",{\"1\":{\"4890\":1}}],[\"keyset\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"keyword\",{\"1\":{\"3417\":1}}],[\"key不为空时\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"key为空时\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"keybytes\",{\"1\":{\"1466\":4,\"6914\":4}}],[\"key\",{\"0\":{\"2955\":1,\"6627\":1},\"1\":{\"1068\":3,\"1072\":1,\"1134\":1,\"1466\":1,\"1515\":1,\"1610\":1,\"1613\":1,\"1617\":1,\"2027\":1,\"2058\":2,\"2188\":4,\"2262\":1,\"2333\":1,\"2337\":1,\"2339\":1,\"2737\":1,\"2755\":1,\"2756\":2,\"2762\":3,\"2766\":1,\"2767\":2,\"2770\":1,\"2791\":1,\"2946\":1,\"2956\":1,\"2957\":1,\"2958\":3,\"2959\":2,\"2962\":1,\"3013\":3,\"3107\":1,\"3130\":1,\"3171\":2,\"3173\":2,\"3174\":2,\"3176\":3,\"3184\":1,\"3189\":1,\"3247\":1,\"3250\":1,\"3251\":6,\"3253\":1,\"3265\":1,\"3271\":1,\"3272\":1,\"3753\":1,\"3767\":1,\"3769\":1,\"3773\":1,\"3775\":3,\"4903\":2,\"4904\":3,\"4910\":1,\"4999\":2,\"5713\":1,\"5763\":2,\"5998\":1,\"6000\":1,\"6406\":1,\"6424\":1,\"6425\":2,\"6431\":3,\"6435\":1,\"6436\":2,\"6439\":1,\"6462\":1,\"6618\":1,\"6628\":1,\"6629\":1,\"6630\":3,\"6631\":2,\"6634\":1,\"6685\":3,\"6763\":1,\"6786\":1,\"6829\":2,\"6831\":2,\"6832\":2,\"6834\":3,\"6842\":1,\"6847\":1,\"6852\":1,\"6855\":1,\"6856\":6,\"6858\":1,\"6870\":1,\"6876\":1,\"6877\":1,\"6914\":1,\"7273\":2,\"7274\":3}}],[\"key的值为\",{\"1\":{\"1037\":1}}],[\"kvproducerrecord\",{\"1\":{\"1544\":1,\"1547\":1}}],[\"kakfa\",{\"1\":{\"1380\":2}}],[\"kafkatemplate\",{\"1\":{\"4979\":1,\"4984\":1}}],[\"kafka的集群环境对资源要求较高\",{\"1\":{\"4865\":1}}],[\"kafka要想往轻量级\",{\"1\":{\"4569\":1}}],[\"kafka作为一个消息队列\",{\"1\":{\"4567\":1}}],[\"kafka已经取消了依赖zookeeper\",{\"1\":{\"4565\":1}}],[\"kafka严重依赖于zookeeper集群\",{\"1\":{\"4564\":1}}],[\"kafka容灾\",{\"1\":{\"2069\":1,\"5774\":1}}],[\"kafka不会像其他jms队列那样需要得到消费者的确认\",{\"1\":{\"1590\":1}}],[\"kafka消费者详解\",{\"0\":{\"1578\":1}}],[\"kafka生产者详解\",{\"0\":{\"1540\":1}}],[\"kafka高可用设计\",{\"0\":{\"1523\":1}}],[\"kafkaproducer<>\",{\"1\":{\"1518\":1}}],[\"kafka有个offset的概念\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"kafka如何保证消息不被重复消费\",{\"0\":{\"1494\":1,\"6947\":1}}],[\"kafka默认采用rangeassignor的分配算法\",{\"1\":{\"1470\":1,\"6918\":1}}],[\"kafka提供了3种消费者分区分配策略\",{\"1\":{\"1469\":1,\"6917\":1}}],[\"kafka权威指南\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"kafka\",{\"0\":{\"1404\":1,\"6894\":1,\"7292\":1,\"7311\":1},\"1\":{\"1380\":2,\"1410\":1,\"1430\":2,\"1431\":1,\"1432\":2,\"1436\":1,\"1437\":1,\"1438\":1,\"1440\":1,\"1443\":2,\"1448\":1,\"1451\":1,\"1455\":3,\"1514\":1,\"1525\":2,\"1526\":1,\"1528\":1,\"1529\":1,\"1577\":1,\"1810\":2,\"1811\":1,\"4563\":4,\"4654\":1,\"4674\":1,\"4758\":2,\"4759\":1,\"4760\":2,\"4769\":1,\"4798\":1,\"4981\":1,\"4986\":1,\"6163\":4,\"6317\":2,\"6318\":1,\"6896\":1,\"6899\":1,\"6903\":3,\"7173\":1,\"7193\":1}}],[\"kafkalistener\",{\"1\":{\"1380\":1,\"4981\":2,\"4986\":2}}],[\"k\",{\"1\":{\"1007\":1,\"1011\":1,\"1016\":4,\"1035\":1,\"1047\":2,\"1062\":4,\"1069\":1}}],[\"k>=1\",{\"1\":{\"678\":1}}],[\"函数关闭连接\",{\"1\":{\"2632\":1}}],[\"函数进行哈希\",{\"1\":{\"2017\":1}}],[\"函数形式如下\",{\"1\":{\"1796\":1,\"6301\":1}}],[\"函数读完才结束\",{\"1\":{\"1779\":1,\"6275\":1}}],[\"函数从内核读取数据\",{\"1\":{\"1778\":1,\"6274\":1}}],[\"函数时\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"函数加入内核中的红黑树里\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"函数将文件描述符集合拷贝到内核里\",{\"1\":{\"1768\":1}}],[\"函数会被触发执行\",{\"1\":{\"1520\":1}}],[\"函数\",{\"1\":{\"1005\":2,\"1520\":1,\"2845\":1,\"3162\":1,\"4254\":1,\"6517\":1,\"6818\":1}}],[\"反过来也成立\",{\"1\":{\"5092\":1}}],[\"反过来我们也正是通过这些特征找到正确的链表\",{\"1\":{\"1005\":1}}],[\"反问他是写什么语言的\",{\"1\":{\"4439\":1}}],[\"反问环节\",{\"1\":{\"4320\":1,\"7145\":1}}],[\"反问\",{\"1\":{\"4306\":1,\"7131\":1}}],[\"反向选择\",{\"1\":{\"3424\":1}}],[\"反向移动的途中不会响应请求\",{\"1\":{\"1764\":1}}],[\"反向移动的途中会响应请求\",{\"1\":{\"1763\":1}}],[\"反之\",{\"1\":{\"2894\":1,\"6566\":1}}],[\"反而被经常修改\",{\"1\":{\"2830\":1,\"6502\":1}}],[\"反馈\",{\"1\":{\"1938\":1}}],[\"反转\",{\"1\":{\"1161\":1,\"5542\":1}}],[\"反序列化的技术克隆一份新的数据给你\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"反射机制允许程序在运行时动态获取类的信息\",{\"1\":{\"3942\":1}}],[\"反射技术\",{\"1\":{\"3942\":1}}],[\"反射可以使得程序更加健壮\",{\"1\":{\"551\":1,\"5429\":1}}],[\"反射的应用场景\",{\"1\":{\"549\":1,\"5428\":1}}],[\"反射的类和调用的方法较多时\",{\"1\":{\"398\":1}}],[\"反射是java的一种机制\",{\"1\":{\"510\":1,\"5398\":1}}],[\"反射\",{\"0\":{\"498\":1,\"5385\":1},\"1\":{\"551\":1,\"5429\":1}}],[\"左连接是先查询出左表\",{\"1\":{\"4165\":1}}],[\"左边很明显是个数组\",{\"1\":{\"1005\":1}}],[\"左子树\",{\"1\":{\"674\":1}}],[\"保护敏感数据\",{\"1\":{\"4714\":1,\"4843\":1,\"7232\":1}}],[\"保留提交历史\",{\"1\":{\"3347\":1}}],[\"保活机制会开始作用\",{\"1\":{\"2635\":1}}],[\"保密性强\",{\"1\":{\"2153\":1}}],[\"保存当前获得锁的线程\",{\"1\":{\"5902\":1}}],[\"保存当前进程的状态信息\",{\"1\":{\"1885\":1}}],[\"保存app端相关的文章数据\",{\"1\":{\"4857\":1}}],[\"保存app端相关文章数据失败\",{\"1\":{\"4857\":1}}],[\"保存app端的相关的文章数据\",{\"1\":{\"4857\":1}}],[\"保存文章内容\",{\"1\":{\"4855\":1,\"7244\":1}}],[\"保存文章配置信息\",{\"1\":{\"4854\":1,\"7243\":1}}],[\"保存文章信息\",{\"1\":{\"4853\":1,\"7242\":1}}],[\"保存到本地\",{\"1\":{\"4058\":1}}],[\"保存了某一时刻\",{\"1\":{\"3563\":1}}],[\"保存即将提交到文件列表信息\",{\"1\":{\"3334\":1}}],[\"保存数据有两种比较简单的数据结构\",{\"1\":{\"1004\":1}}],[\"保证系统数据的可靠性\",{\"1\":{\"5002\":1,\"7284\":1}}],[\"保证原子性\",{\"1\":{\"3713\":1}}],[\"保证共享变量的可见性\",{\"1\":{\"3711\":1,\"5911\":1}}],[\"保证只有一个请求会落到数据库上\",{\"1\":{\"3269\":1,\"6874\":1}}],[\"保证主从数据一致\",{\"1\":{\"3240\":1}}],[\"保证了消息的发送顺序性\",{\"1\":{\"4598\":1,\"6182\":1}}],[\"保证了数据持久化\",{\"1\":{\"3162\":1,\"6818\":1}}],[\"保证了内存的利用率达到\",{\"1\":{\"334\":1}}],[\"保证\",{\"1\":{\"2619\":1}}],[\"保证数据传输的安全性\",{\"1\":{\"2492\":1}}],[\"保证每个机房都有全量的数据\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"保证发送方消息发送顺序与接收方的顺序一致\",{\"1\":{\"1586\":1}}],[\"保证集群中的某个节点发生故障时\",{\"1\":{\"1443\":1}}],[\"9分布式锁解决集群下的方法抢占执行\",{\"0\":{\"4897\":1}}],[\"95\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"99\",{\"1\":{\"4620\":2,\"6193\":2}}],[\"9查看进程\",{\"0\":{\"3425\":1}}],[\"9正确使用索引的一些建议\",{\"0\":{\"2822\":1}}],[\"9time\",{\"0\":{\"2621\":1}}],[\"9第三次握手丢失了\",{\"0\":{\"2575\":1}}],[\"91\",{\"1\":{\"2543\":1}}],[\"9http\",{\"0\":{\"2305\":1}}],[\"9\",{\"0\":{\"1369\":1,\"1746\":1,\"1753\":1,\"1755\":1,\"1758\":1,\"1760\":1,\"1762\":1,\"3375\":1,\"3998\":1,\"4142\":1,\"4221\":1,\"4357\":1,\"4395\":1},\"1\":{\"980\":1,\"982\":1,\"1445\":1,\"3075\":1,\"3499\":1,\"3510\":1,\"4296\":1,\"4333\":1,\"4356\":1,\"4367\":1,\"4378\":1,\"4389\":1,\"4405\":1,\"4436\":1,\"4458\":1,\"4857\":1,\"6726\":1,\"7121\":1,\"7158\":1}}],[\"900\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"90+1\",{\"1\":{\"2543\":1}}],[\"9092\",{\"1\":{\"1518\":2}}],[\"90\",{\"1\":{\"334\":1,\"2540\":1,\"2544\":1}}],[\"桶\",{\"1\":{\"974\":1}}],[\"桶中元素的插入只会在hash冲突时发生\",{\"1\":{\"923\":1,\"5440\":1}}],[\"装载因子\",{\"1\":{\"967\":1,\"969\":1}}],[\"装饰\",{\"1\":{\"874\":1}}],[\"装饰器模式\",{\"0\":{\"870\":1,\"5500\":1}}],[\"装饰器\",{\"1\":{\"854\":1,\"5484\":1}}],[\"先构造\",{\"1\":{\"7050\":1}}],[\"先把所有连接\",{\"1\":{\"6262\":1}}],[\"先将\",{\"1\":{\"4605\":1}}],[\"先将程序划分为多个有逻辑意义的段\",{\"1\":{\"1677\":1}}],[\"先关注自己的开发\",{\"1\":{\"4498\":1,\"6126\":1}}],[\"先做一个两分钟以内的自我介绍\",{\"1\":{\"4325\":1,\"7150\":1}}],[\"先做个总结\",{\"1\":{\"1030\":1}}],[\"先扫扫描包中的所有由\",{\"1\":{\"4182\":1}}],[\"先更新\",{\"1\":{\"4101\":1}}],[\"先比较当前锁标志位是否为\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"先判断此类是否已经被加载\",{\"1\":{\"4195\":1}}],[\"先判断头结点是不是signal状态\",{\"1\":{\"3638\":1,\"5879\":1}}],[\"先判断用户发来的请求的值是否存在于布隆过滤器中\",{\"1\":{\"3254\":1,\"6859\":1}}],[\"先找到占用\",{\"1\":{\"3548\":1,\"3549\":1}}],[\"先使用\",{\"1\":{\"3538\":1}}],[\"先删除目标文件\",{\"1\":{\"3413\":1}}],[\"先发\",{\"1\":{\"3322\":1}}],[\"先获取互斥锁\",{\"1\":{\"3269\":1,\"6874\":1}}],[\"先看两个概念\",{\"1\":{\"3238\":1}}],[\"先看一个简单的\",{\"1\":{\"488\":1,\"5375\":1}}],[\"先开始从数据库查询账户余额大于\",{\"1\":{\"2992\":1,\"6664\":1}}],[\"先开始从数据库中读取小林的余额数据\",{\"1\":{\"2983\":1,\"2988\":1,\"6655\":1,\"6660\":1}}],[\"先会加上表级别的意向独占锁\",{\"1\":{\"2916\":1,\"6588\":1}}],[\"先表上加上意向独占锁\",{\"1\":{\"2912\":1,\"6584\":1}}],[\"先在表上加上意向共享锁\",{\"1\":{\"2912\":1,\"6584\":1}}],[\"先要看看数据库中的长事务\",{\"1\":{\"2904\":1,\"6576\":1}}],[\"先要了解下什么是循环依赖\",{\"1\":{\"1249\":1,\"5601\":1}}],[\"先启用了事务\",{\"1\":{\"2898\":1,\"6570\":1}}],[\"先是服务端主动监听某个端口\",{\"1\":{\"2526\":1}}],[\"先给大家列出目录\",{\"1\":{\"2399\":1}}],[\"先说明下安全和幂等的概念\",{\"1\":{\"2219\":1}}],[\"先检查布隆过滤器中是否存在该key\",{\"1\":{\"2188\":1}}],[\"先查老的\",{\"1\":{\"2064\":1,\"5769\":1}}],[\"先查询数据库改用户是否进行点赞\",{\"1\":{\"2045\":1,\"5750\":1}}],[\"先查询成品缓存\",{\"1\":{\"1283\":1,\"5625\":1}}],[\"先进先出\",{\"1\":{\"1970\":1,\"6251\":1}}],[\"先进先出置换\",{\"1\":{\"1731\":1}}],[\"先进先出置换算法\",{\"1\":{\"1721\":1}}],[\"先计算\",{\"1\":{\"1920\":1}}],[\"先从用户空间传入内核空间\",{\"1\":{\"1769\":1}}],[\"先被服务\",{\"1\":{\"1754\":1}}],[\"先到来的请求\",{\"1\":{\"1754\":1}}],[\"先来先获取的公平性原则\",{\"1\":{\"3839\":1,\"5955\":1}}],[\"先来先服务算法\",{\"1\":{\"1748\":1}}],[\"先来说说表锁\",{\"1\":{\"2878\":1,\"6550\":1}}],[\"先来后到\",{\"1\":{\"1913\":1}}],[\"先来看看\",{\"1\":{\"6364\":1}}],[\"先来看没有消息队列的场景下\",{\"1\":{\"1416\":1}}],[\"先来看一下\",{\"1\":{\"960\":1}}],[\"先去项目根目录找config文件夹下找配置文件件\",{\"1\":{\"1313\":1,\"5643\":1}}],[\"前置通知实现\",{\"1\":{\"4031\":1}}],[\"前置创建\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"前驱结点\",{\"1\":{\"3645\":1,\"5887\":1}}],[\"前驱节点\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"前缀是\",{\"1\":{\"7077\":2}}],[\"前缀\",{\"1\":{\"7077\":1}}],[\"前缀匹配的范围查询\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"前缀索引仅限于字符串类型\",{\"1\":{\"2840\":1,\"6512\":1}}],[\"前缀索引是对文本的前几个字符创建索引\",{\"1\":{\"2793\":1,\"6464\":1}}],[\"前缀索引只适用于字符串类型的数据\",{\"1\":{\"2793\":1,\"6464\":1}}],[\"前缀索引\",{\"1\":{\"2793\":1,\"4171\":1,\"6464\":1}}],[\"前缀索引等索引属于二级索引\",{\"1\":{\"2790\":1,\"6460\":1}}],[\"前两次握手是不可以携带数据的\",{\"1\":{\"2531\":1}}],[\"前两步也就是\",{\"1\":{\"2315\":1}}],[\"前一个\",{\"1\":{\"2459\":1}}],[\"前\",{\"1\":{\"2366\":1}}],[\"前向安全\",{\"1\":{\"2316\":1}}],[\"前面部分是一致的\",{\"1\":{\"3638\":1,\"5879\":1}}],[\"前面也提到\",{\"1\":{\"2938\":1,\"6610\":1}}],[\"前面已经介绍了\",{\"1\":{\"2770\":1,\"6439\":1}}],[\"前面提到\",{\"1\":{\"2030\":1}}],[\"前面我们讲过\",{\"1\":{\"2696\":1}}],[\"前面我们提到过\",{\"1\":{\"986\":1}}],[\"前面我说过\",{\"1\":{\"1017\":1}}],[\"前提条件\",{\"1\":{\"1489\":1,\"6941\":1}}],[\"前端控制servelt\",{\"1\":{\"5548\":1}}],[\"前端控制器\",{\"1\":{\"1193\":2,\"5545\":2}}],[\"前端查询时把id返回过来了\",{\"1\":{\"2062\":1,\"5767\":1}}],[\"前端dispatcherservlet\",{\"1\":{\"1196\":1}}],[\"前28位无论是什么\",{\"1\":{\"1037\":1}}],[\"前者线程安全的\",{\"1\":{\"950\":1}}],[\"前三个阶段可以统称为连接\",{\"1\":{\"409\":1,\"5298\":1}}],[\"遍历线程池中的所有线程\",{\"1\":{\"3890\":1}}],[\"遍历\",{\"1\":{\"1769\":1}}],[\"遍历支持fast\",{\"1\":{\"941\":1}}],[\"遍历方式的内部实现上不同\",{\"1\":{\"941\":1}}],[\"底层是基于servlet过滤器链\",{\"1\":{\"4038\":1}}],[\"底层利用unsafe对象实现的\",{\"1\":{\"3826\":1,\"5943\":1}}],[\"底层原理了解吗\",{\"1\":{\"3753\":1,\"5985\":1}}],[\"底层使用了模板方法模式\",{\"0\":{\"3651\":1,\"5894\":1}}],[\"底层会通过限制删除操作执行的时长和频率来减少删除操作对\",{\"1\":{\"3174\":1,\"6832\":1}}],[\"底层数据结构\",{\"0\":{\"6422\":1},\"1\":{\"3127\":1,\"6783\":1}}],[\"底层都是哈希算法\",{\"1\":{\"932\":1}}],[\"底层开发人员可以随意维护自己的\",{\"1\":{\"607\":1}}],[\"然而jdk又不能阻止用户实现这种不好的hash算法\",{\"1\":{\"929\":1,\"5446\":1}}],[\"然后分发给底层不同的worker来处理\",{\"1\":{\"6967\":1}}],[\"然后这个consumer内部用内存队列做排队\",{\"1\":{\"6967\":1}}],[\"然后要发给\",{\"1\":{\"4623\":1,\"6200\":1}}],[\"然后广播出去\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"然后广播给其他\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"然后也广播给其他\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"然后每个\",{\"1\":{\"4619\":1,\"6192\":1}}],[\"然后leader客户端将数据同步到其他follower节点\",{\"1\":{\"4593\":1}}],[\"然后又问现在有要完成的任务\",{\"1\":{\"4438\":1}}],[\"然后又修改为\",{\"1\":{\"3685\":1,\"5854\":1}}],[\"然后我问主要的技术栈和业务是啥\",{\"1\":{\"4393\":1}}],[\"然后我们就可以来说一下\",{\"1\":{\"3359\":1}}],[\"然后面试官说现在是国资委服务部门\",{\"1\":{\"4393\":1}}],[\"然后准备说怎么写命令\",{\"1\":{\"4392\":1}}],[\"然后他也说了你只是了解\",{\"1\":{\"4290\":1,\"7115\":1}}],[\"然后他们才有资格提升到老一代\",{\"1\":{\"234\":1}}],[\"然后左表满足条件的显示\",{\"1\":{\"4165\":1}}],[\"然后查询右表\",{\"1\":{\"4165\":1}}],[\"然后还有python的生成器如何使用\",{\"1\":{\"4121\":1}}],[\"然后开始写python\",{\"1\":{\"4120\":1}}],[\"然后开始上厕所\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"然后直接删除\",{\"1\":{\"4102\":1}}],[\"然后直接清理掉端边界以外的内存\",{\"1\":{\"329\":1}}],[\"然后服务消费者会基于rpc协议向提供者发送服务调用请求\",{\"1\":{\"3985\":1}}],[\"然后停止所有正在执行或暂停任务的线程\",{\"1\":{\"3894\":1}}],[\"然后中断所有没有正在执行任务的线程\",{\"1\":{\"3892\":1}}],[\"然后逐个调用线程的interrupt方法来中断线程\",{\"1\":{\"3890\":1}}],[\"然后线程将当前锁的持有者信息修改为自己\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"然后判断锁对象是否处于被锁定状态\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"然后判断元素是否存在\",{\"1\":{\"2150\":1}}],[\"然后执行javap\",{\"1\":{\"3736\":1,\"5967\":1}}],[\"然后执行一条\",{\"1\":{\"2898\":1,\"6570\":1}}],[\"然后一起参与到消息广播流程中去\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"然后一个线程去读这个变量\",{\"1\":{\"3712\":1,\"5912\":1}}],[\"然后一直运行\",{\"1\":{\"1913\":1}}],[\"然后选择\",{\"1\":{\"3581\":1}}],[\"然后引起系统频繁的进行\",{\"1\":{\"3544\":1}}],[\"然后往文件中添加需要忽略哪些文件夹下的什么类型的文件\",{\"1\":{\"3380\":1}}],[\"然后使用git\",{\"1\":{\"3350\":1}}],[\"然后使用它加密报文\",{\"1\":{\"2332\":1}}],[\"然后力推到远程\",{\"1\":{\"3349\":1}}],[\"然后加载\",{\"1\":{\"3235\":1}}],[\"然后加到sql里\",{\"1\":{\"2062\":1,\"5767\":1}}],[\"然后就\",{\"1\":{\"3176\":1,\"6834\":1}}],[\"然后就挂了\",{\"1\":{\"2071\":1,\"5776\":1}}],[\"然后事务\",{\"1\":{\"2992\":1,\"2994\":1,\"6664\":1,\"6666\":1}}],[\"然后继续执行代码逻辑处理\",{\"1\":{\"2988\":1,\"6660\":1}}],[\"然后给该字段赋值一个自增的值\",{\"1\":{\"2926\":1,\"6598\":1}}],[\"然后为被\",{\"1\":{\"2922\":1,\"6594\":1}}],[\"然后对读取的记录加独占锁\",{\"1\":{\"2912\":1,\"6584\":1}}],[\"然后对读取的记录加共享锁\",{\"1\":{\"2912\":1,\"6584\":1}}],[\"然后对该记录加独占锁\",{\"1\":{\"2909\":1,\"6581\":1}}],[\"然后对分区做取模得到分区编号\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"然后整个事务期间都在用这个\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"然后整个事务执行期间都在用这个\",{\"1\":{\"2866\":1,\"6538\":1}}],[\"然后整个运行时间优先级都不会变化\",{\"1\":{\"1929\":1}}],[\"然后以\",{\"1\":{\"2766\":1,\"6435\":1}}],[\"然后创建一个新的连接对象放入到\",{\"1\":{\"2585\":1}}],[\"然后客户端宕机了\",{\"1\":{\"2540\":1}}],[\"然后\",{\"1\":{\"2340\":1,\"2899\":1,\"3230\":1,\"3263\":1,\"3368\":1,\"4539\":1,\"6155\":1,\"6571\":1,\"6868\":1}}],[\"然后同步到另外一个机房\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"然后新表的数据\",{\"1\":{\"2064\":1,\"5769\":1}}],[\"然后根据查询到的结果\",{\"1\":{\"2054\":1,\"5759\":1}}],[\"然后根据该\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"然后将结果传递给下一个拦截器\",{\"1\":{\"4946\":1}}],[\"然后将自定义的拦截器注册到\",{\"1\":{\"4944\":1}}],[\"然后将该操作发送给所有的\",{\"1\":{\"4587\":1}}],[\"然后将http的请求的响应结果\",{\"1\":{\"4536\":1,\"6151\":1}}],[\"然后将其加入到内核的\",{\"1\":{\"2583\":1}}],[\"然后将对应索引里的值改为1\",{\"1\":{\"2165\":1}}],[\"然后将已点赞的信息存入redis中\",{\"1\":{\"2045\":1,\"5750\":1}}],[\"然后将伊甸园中的剩余对象移动到幸存者\",{\"1\":{\"264\":1}}],[\"然后获取互斥锁\",{\"1\":{\"2001\":1}}],[\"然后尝试获取资源\",{\"1\":{\"1999\":2}}],[\"然后用户态还需要再通过遍历的方法找到可读或可写的\",{\"1\":{\"1768\":1}}],[\"然后用这个数对hashmap或者hashtable的容量进行取模就行了\",{\"1\":{\"1011\":1}}],[\"然后调用\",{\"1\":{\"1768\":1}}],[\"然后立即反向移动\",{\"1\":{\"1763\":1,\"1764\":1}}],[\"然后把远程分支上文件的内容手工修改到本地文件\",{\"1\":{\"3341\":1}}],[\"然后把\",{\"1\":{\"1920\":1,\"3361\":1}}],[\"然后把表针前移一个位置\",{\"1\":{\"1741\":1}}],[\"然后把它移动到表头是一个非常费时的操作\",{\"1\":{\"1736\":1}}],[\"然后把需要访问的页面换入到物理页\",{\"1\":{\"1718\":1}}],[\"然后比较\",{\"1\":{\"1727\":1}}],[\"然后之前缓存在活跃\",{\"1\":{\"1697\":1}}],[\"然后consumer消费该数据之后\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"然后订阅这个topic的消费组的消费者再进行排序\",{\"1\":{\"1472\":1,\"6920\":1}}],[\"然后做出相应的响应处理\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"然后spring会调用a的set方法设置其依赖的b的属性\",{\"1\":{\"1264\":1}}],[\"然后在用户态中再处理这些连接对应的请求即可\",{\"1\":{\"6262\":1}}],[\"然后在代理类中进行功能增强\",{\"1\":{\"3952\":1}}],[\"然后在虚拟的硬件资源上安装从操作系统\",{\"1\":{\"3311\":1}}],[\"然后在对应的mapper\",{\"1\":{\"1139\":1,\"5718\":1}}],[\"然后在给插件编写注解\",{\"1\":{\"1129\":1,\"5710\":1}}],[\"然后在将hashcode得到的int值对数组长度进行取模\",{\"1\":{\"1031\":1}}],[\"然后重写\",{\"1\":{\"1125\":1,\"5707\":1}}],[\"然后包装执行结果\",{\"1\":{\"1107\":1}}],[\"然后不停访问这些key导致hashmap忙于进行线性查找\",{\"1\":{\"1066\":1}}],[\"然后通过mybatis的sqlsession执行相关方法实现数据查询\",{\"1\":{\"4749\":1}}],[\"然后通过top\",{\"1\":{\"2124\":1}}],[\"然后通过dubbo调用api来完成保存操作\",{\"1\":{\"2045\":1,\"5750\":1}}],[\"然后通过反射的方式打印capacity和size\",{\"1\":{\"976\":1}}],[\"然后通过扰动计算和按位与的方式计算出这个元素的存储位置\",{\"1\":{\"737\":1}}],[\"然后再一路顺藤摸瓜找到位于下层的某台目标\",{\"1\":{\"7091\":1}}],[\"然后再广播出去\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"然后再根据行的物理地址找到所需的数据行\",{\"1\":{\"4202\":1}}],[\"然后再提交自己修改的部分\",{\"1\":{\"3341\":1}}],[\"然后再提交冲突的文件使其保证与远程分支的文件一致\",{\"1\":{\"3341\":1}}],[\"然后再把buffer中的数据发到client\",{\"1\":{\"3240\":1}}],[\"然后再把使用过的内存空间进行一次清理\",{\"1\":{\"331\":1}}],[\"然后再写入到\",{\"1\":{\"3155\":1,\"6811\":1}}],[\"然后再执行更新操作\",{\"1\":{\"2983\":1,\"6655\":1}}],[\"然后再做表结构的变更\",{\"1\":{\"2904\":1,\"6576\":1}}],[\"然后再看\",{\"1\":{\"2247\":1}}],[\"然后再对其处理\",{\"1\":{\"1768\":1}}],[\"然后再对hashcode进行扰动\",{\"1\":{\"1063\":1}}],[\"然后再相互设置对方的属性\",{\"1\":{\"1266\":1}}],[\"然后再通过物理地址访问内存\",{\"1\":{\"1634\":1}}],[\"然后再通过set方法为其设置属性\",{\"1\":{\"1262\":1}}],[\"然后再通过h\",{\"1\":{\"1069\":1}}],[\"然后再分析他们的作用\",{\"1\":{\"962\":1}}],[\"然后你得用treemap\",{\"1\":{\"508\":1,\"5396\":1}}],[\"然后你修改代码\",{\"1\":{\"504\":1,\"5392\":1}}],[\"然后清理掉未被标记的对象\",{\"1\":{\"324\":1}}],[\"效果是将方法返回的对象直接在浏览器上展示成json格式\",{\"1\":{\"4123\":1}}],[\"效果更好\",{\"1\":{\"4071\":1}}],[\"效果等同于hash\",{\"1\":{\"927\":1,\"5444\":1}}],[\"效率不会大幅度降低\",{\"1\":{\"6269\":1}}],[\"效率问题\",{\"1\":{\"4874\":1,\"7252\":1}}],[\"效率和易用性上都有一定的优化\",{\"1\":{\"4742\":1}}],[\"效率要大大高于做除法\",{\"1\":{\"1059\":1}}],[\"效率要比代替取模运算\",{\"1\":{\"1017\":1}}],[\"效率低下\",{\"1\":{\"1113\":1}}],[\"效率低\",{\"1\":{\"935\":1}}],[\"效率高\",{\"1\":{\"934\":1}}],[\"效率较低\",{\"1\":{\"2772\":1,\"2773\":1,\"2783\":1,\"6441\":1,\"6442\":1,\"6452\":1}}],[\"效率较⾼缺点\",{\"1\":{\"859\":1,\"5489\":1}}],[\"效率较高\",{\"1\":{\"691\":1,\"5458\":1}}],[\"效率比较低\",{\"1\":{\"757\":1}}],[\"效率比较高\",{\"1\":{\"722\":1}}],[\"效率都比较低\",{\"1\":{\"755\":1}}],[\"效率都为o\",{\"1\":{\"716\":1}}],[\"效率为o\",{\"1\":{\"754\":1,\"755\":1,\"757\":1}}],[\"效率是o\",{\"1\":{\"747\":1}}],[\"冲突的元素\",{\"0\":{\"920\":1,\"5437\":1}}],[\"避免使用子查询\",{\"0\":{\"6739\":1}}],[\"避免数据不一致\",{\"1\":{\"4153\":1}}],[\"避免返回大量无用数据\",{\"1\":{\"3995\":1}}],[\"避免全表扫描\",{\"1\":{\"3995\":1}}],[\"避免重复获取\",{\"1\":{\"3947\":1}}],[\"避免因多线程操作共享变量而导致的数据不一致的情况\",{\"1\":{\"3759\":1}}],[\"避免过度消耗\",{\"1\":{\"3693\":1,\"5862\":1}}],[\"避免得到一个没用的快照\",{\"1\":{\"3572\":1}}],[\"避免同时处理大量的请求\",{\"1\":{\"3280\":1,\"6885\":1}}],[\"避免单机出现问题整个缓存服务都没办法使用\",{\"1\":{\"3279\":1,\"6884\":1}}],[\"避免更多的关联操作\",{\"1\":{\"3066\":1,\"6717\":1}}],[\"避免了加锁操作\",{\"1\":{\"3024\":1}}],[\"避免索引失效\",{\"1\":{\"2841\":1,\"6513\":1}}],[\"避免\",{\"1\":{\"2589\":1}}],[\"避免资源浪费\",{\"1\":{\"2554\":1}}],[\"避免历史连接\",{\"1\":{\"2536\":1}}],[\"避免由于时间篡改导致的不可靠问题\",{\"1\":{\"2246\":1}}],[\"避免发生冲突\",{\"1\":{\"1063\":1}}],[\"避免出现循环链表的情况\",{\"1\":{\"919\":1,\"5436\":1}}],[\"避免perm\",{\"1\":{\"400\":1}}],[\"原理\",{\"0\":{\"5991\":1}}],[\"原理和java\",{\"1\":{\"1067\":1}}],[\"原子广播\",{\"1\":{\"4593\":1,\"6166\":1}}],[\"原子广播协议\",{\"1\":{\"4582\":1,\"4629\":1,\"6172\":1}}],[\"原子指令即可\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"原子指令\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"原子性是通过\",{\"1\":{\"2977\":1,\"6649\":1}}],[\"原子性\",{\"1\":{\"1220\":1,\"2971\":1,\"5572\":1,\"6643\":1}}],[\"原语\",{\"1\":{\"3699\":1,\"5868\":1}}],[\"原语由若干指令组成\",{\"1\":{\"3678\":1,\"5847\":1}}],[\"原语属于操作系统用语\",{\"1\":{\"3678\":1,\"5847\":1}}],[\"原生的\",{\"1\":{\"2969\":1,\"4954\":1,\"6641\":1}}],[\"原因在于\",{\"1\":{\"2756\":1,\"6425\":1}}],[\"原因是该\",{\"1\":{\"2706\":1}}],[\"原因\",{\"0\":{\"6948\":1,\"6990\":1},\"1\":{\"2452\":1,\"2513\":1}}],[\"原因如下\",{\"1\":{\"1847\":1,\"6389\":1}}],[\"原文链接\",{\"1\":{\"918\":1,\"947\":1,\"5435\":1}}],[\"原型模式\",{\"1\":{\"854\":1,\"5484\":1}}],[\"六\",{\"0\":{\"916\":1}}],[\"学习数据分析的新技术以及前端技术\",{\"1\":{\"4120\":1}}],[\"学习方式\",{\"0\":{\"4110\":1}}],[\"学习过程中\",{\"1\":{\"580\":1}}],[\"学会了动态代理之后\",{\"1\":{\"896\":1,\"5514\":1}}],[\"角度来说\",{\"1\":{\"894\":1,\"5512\":1}}],[\"角色\",{\"1\":{\"875\":4}}],[\"层发现数据超过\",{\"1\":{\"2569\":1}}],[\"层组装完数据\",{\"1\":{\"2502\":1}}],[\"层进行分片\",{\"1\":{\"2502\":1}}],[\"层是\",{\"1\":{\"2452\":1}}],[\"层还需要\",{\"0\":{\"2566\":1},\"1\":{\"2414\":1}}],[\"层会分片\",{\"0\":{\"2566\":1},\"1\":{\"2414\":1}}],[\"层必须保证收到的字节数据是完整且连续的\",{\"1\":{\"2366\":1}}],[\"层\",{\"1\":{\"2288\":1}}],[\"层之间增加了\",{\"1\":{\"2266\":1}}],[\"层面来说\",{\"1\":{\"891\":1,\"5509\":1}}],[\"层⾯\",{\"1\":{\"888\":1,\"5506\":1}}],[\"⽽动态代理是在运⾏时动态⽣成类字节码\",{\"1\":{\"888\":1,\"5506\":1}}],[\"⽽是直接返回这个实例\",{\"1\":{\"859\":1,\"5489\":1}}],[\"⽂件\",{\"1\":{\"888\":1,\"5506\":1}}],[\"⽬标对象和代理对象都要进⾏修改\",{\"1\":{\"887\":1,\"5505\":1}}],[\"⽬的是为了防⽌有多个线程同时调⽤时\",{\"1\":{\"859\":1,\"5489\":1}}],[\"静态优先级\",{\"1\":{\"1929\":1}}],[\"静态优先级和动态优先级\",{\"1\":{\"1928\":1}}],[\"静态资源处理\",{\"1\":{\"1398\":1}}],[\"静态代理和动态代理的区别\",{\"0\":{\"5504\":1}}],[\"静态代理\",{\"0\":{\"5507\":1},\"1\":{\"3959\":1}}],[\"静态代理要求目标对象必须实现接口\",{\"1\":{\"3958\":1}}],[\"静态代理需要额外定义许多代理类\",{\"1\":{\"3956\":1}}],[\"静态代理的代理类只能为一个目标对象服务\",{\"1\":{\"3954\":1}}],[\"静态代理在编译时生成的代理类需要实现与目标对象相同的接口\",{\"1\":{\"3952\":1}}],[\"静态代理在编译时就已经实现了代理类\",{\"1\":{\"3950\":1}}],[\"静态代理在编译时就将接口\",{\"1\":{\"891\":1,\"5509\":1}}],[\"静态代理在编译时就将接⼝\",{\"1\":{\"888\":1,\"5506\":1}}],[\"静态代理与动态代理的区别\",{\"0\":{\"3948\":1}}],[\"静态代理中\",{\"1\":{\"887\":1,\"890\":1,\"5505\":1,\"5508\":1}}],[\"静态变量等数据\",{\"1\":{\"398\":1}}],[\"静态变量放在堆里\",{\"1\":{\"292\":1}}],[\"静态变量\",{\"1\":{\"282\":1}}],[\"透明的方式给单个对象添加职责\",{\"1\":{\"880\":1}}],[\"锁再对大量数据进行插入的时候\",{\"1\":{\"6596\":1}}],[\"锁优化技术\",{\"0\":{\"5820\":1}}],[\"锁消除指的是在某些情况下\",{\"1\":{\"3811\":1,\"5822\":1}}],[\"锁消除\",{\"0\":{\"3809\":1,\"5820\":1}}],[\"锁粗化就是告诉我们任何事情都有个度\",{\"1\":{\"3810\":1,\"5821\":1}}],[\"锁粗化\",{\"0\":{\"3809\":1,\"5820\":1}}],[\"锁定\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"锁定一个范围\",{\"1\":{\"2945\":1,\"2946\":1,\"2956\":1,\"6617\":1,\"6618\":1,\"6628\":1}}],[\"锁升级\",{\"0\":{\"3791\":1,\"5802\":1}}],[\"锁绑定多个条件一个\",{\"1\":{\"3783\":1,\"5794\":1}}],[\"锁对象变成偏向锁\",{\"1\":{\"3795\":1,\"5807\":1}}],[\"锁对象默认为this\",{\"1\":{\"3745\":1}}],[\"锁对象是\",{\"1\":{\"3731\":1}}],[\"锁对大量数据进行插入的时候\",{\"1\":{\"2924\":1}}],[\"锁队列的一个结点\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"锁范围内插入了一条记录\",{\"1\":{\"3013\":1,\"6685\":1}}],[\"锁住的就是一个点\",{\"1\":{\"2965\":1,\"6637\":1}}],[\"锁住的是一条记录\",{\"1\":{\"2948\":1,\"6620\":1}}],[\"锁不兼容\",{\"1\":{\"2949\":1,\"2950\":2,\"6621\":1,\"6622\":2}}],[\"锁不是再一个事务提交后才释放\",{\"1\":{\"2921\":1,\"6593\":1}}],[\"锁兼容\",{\"1\":{\"2949\":1,\"6621\":1}}],[\"锁之分的\",{\"1\":{\"2948\":1,\"6620\":1}}],[\"锁和\",{\"1\":{\"2948\":1,\"6620\":1}}],[\"锁就会被释放\",{\"1\":{\"2940\":1,\"6612\":1}}],[\"锁释放掉\",{\"1\":{\"2922\":1,\"6594\":1}}],[\"锁是特殊的表锁机制\",{\"1\":{\"2921\":1,\"6593\":1}}],[\"锁实现的\",{\"1\":{\"2920\":1,\"6592\":1}}],[\"锁的分类实现\",{\"0\":{\"3812\":1,\"5930\":1}}],[\"锁的实现synchronized\",{\"1\":{\"3779\":1,\"5790\":1}}],[\"锁的过程中\",{\"1\":{\"2923\":1,\"6595\":1}}],[\"锁的操作会形成一个队列\",{\"1\":{\"2903\":1,\"6575\":1}}],[\"锁的作用域就是从锁被获取到其被释放的时间\",{\"1\":{\"837\":1}}],[\"锁机制\",{\"0\":{\"2849\":1,\"6521\":1}}],[\"锁竞争小时\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"锁\",{\"0\":{\"2918\":1,\"6590\":1},\"1\":{\"1987\":1,\"2876\":1,\"2922\":1,\"2927\":1,\"2928\":1,\"3540\":1,\"6246\":1,\"6548\":1,\"6594\":1,\"6599\":1,\"6600\":1}}],[\"锁池\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"锁指的是\",{\"1\":{\"859\":1,\"5489\":1}}],[\"第四次挥手丢失了\",{\"1\":{\"2425\":1}}],[\"第七层\",{\"1\":{\"2265\":1}}],[\"第三方技术阿里云oss\",{\"1\":{\"4654\":1,\"7173\":1}}],[\"第三方接口审核完后传来一个statuscode200\",{\"1\":{\"4319\":1,\"7144\":1}}],[\"第三个阶段\",{\"1\":{\"3236\":1}}],[\"第三次挥手丢失了\",{\"1\":{\"2424\":1}}],[\"第三次握手丢失了\",{\"1\":{\"2417\":1}}],[\"第三次将物理页号与页内位移组合\",{\"1\":{\"1684\":1}}],[\"第三\",{\"1\":{\"1638\":1}}],[\"第\",{\"1\":{\"1291\":1,\"1292\":1,\"1293\":1,\"3499\":1,\"5632\":1,\"5634\":1,\"5636\":1}}],[\"第二点\",{\"1\":{\"6266\":1}}],[\"第二则是当\",{\"1\":{\"4614\":1,\"6187\":1}}],[\"第二阶段\",{\"1\":{\"3234\":1}}],[\"第二是占用端口资源\",{\"1\":{\"2624\":1}}],[\"第二个密钥是私有密钥\",{\"1\":{\"5094\":1}}],[\"第二个思路\",{\"0\":{\"3562\":1}}],[\"第二个缺点\",{\"1\":{\"1830\":1,\"6359\":1}}],[\"第二个就是内存交换的效率低的问题\",{\"1\":{\"1648\":1}}],[\"第二步\",{\"1\":{\"1804\":1,\"6310\":1}}],[\"第二次挥手丢失了\",{\"1\":{\"2423\":1}}],[\"第二次握手丢失了\",{\"1\":{\"2416\":1}}],[\"第二次访问页表\",{\"1\":{\"1683\":1}}],[\"第二次会从\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"第二次会从缓存中获取\",{\"1\":{\"1134\":1,\"5713\":1}}],[\"第二\",{\"1\":{\"1536\":1,\"1539\":1,\"1637\":1,\"3213\":1,\"4825\":1,\"4836\":1,\"4973\":1,\"7225\":1}}],[\"第二种实现方式是基于一个唯一标识实现的\",{\"1\":{\"2246\":1}}],[\"第二种\",{\"1\":{\"2243\":1}}],[\"第二种方案\",{\"1\":{\"1510\":1,\"6967\":1}}],[\"第二种情况\",{\"1\":{\"1506\":1,\"6962\":1}}],[\"第二类aware接口\",{\"1\":{\"1178\":1}}],[\"第二类是因为类定义不能继承\",{\"1\":{\"879\":1}}],[\"第一点\",{\"1\":{\"6265\":1}}],[\"第一阶段是主从库间建立连接\",{\"1\":{\"3232\":1}}],[\"第一是占用系统资源\",{\"1\":{\"2623\":1}}],[\"第一台遇到的服务器就是其应该定位到的服务器\",{\"1\":{\"2018\":1}}],[\"第一步肯定需要\",{\"1\":{\"6181\":1}}],[\"第一步\",{\"1\":{\"1803\":1,\"4597\":1,\"6309\":1}}],[\"第一个是我们提到的\",{\"1\":{\"4614\":1,\"6187\":1}}],[\"第一个是\",{\"1\":{\"3778\":1,\"5789\":1}}],[\"第一个思路\",{\"0\":{\"3547\":1}}],[\"第一个缺点\",{\"1\":{\"1829\":1,\"6358\":1}}],[\"第一个就是内存碎片的问题\",{\"1\":{\"1647\":1}}],[\"第一个目标是每个分配算法都尽量尝试去完成的\",{\"1\":{\"1488\":1,\"6940\":1}}],[\"第一\",{\"1\":{\"1535\":1,\"1538\":1,\"1636\":1,\"3212\":1,\"4823\":1,\"4834\":1,\"4971\":1,\"7223\":1}}],[\"第一种实现方式是基于时间实现的\",{\"1\":{\"2246\":1}}],[\"第一种\",{\"1\":{\"2240\":1}}],[\"第一种方案\",{\"1\":{\"1509\":1,\"6965\":1}}],[\"第一种情况\",{\"1\":{\"1505\":1,\"6960\":1}}],[\"第一次挥手丢失了\",{\"1\":{\"2422\":1}}],[\"第一次握手丢失了\",{\"1\":{\"2415\":1}}],[\"第一次访问段表\",{\"1\":{\"1682\":1}}],[\"第一次调用时随机生成一个整数\",{\"1\":{\"1465\":1,\"6913\":1}}],[\"第一次执行完毕会将数据库中查询的数据写到缓存\",{\"1\":{\"1134\":1,\"1136\":1,\"5713\":1,\"5715\":1}}],[\"第一类aware接口\",{\"1\":{\"1174\":1}}],[\"第一类是系统中存在大量独立的扩展\",{\"1\":{\"878\":1}}],[\"第一位一定是个0\",{\"1\":{\"1044\":1}}],[\"第⼀重判断\",{\"1\":{\"859\":1,\"5489\":1}}],[\"第⼀重检查是否为\",{\"1\":{\"858\":1,\"5488\":1}}],[\"第⼆重检查是否为\",{\"1\":{\"858\":1,\"5488\":1}}],[\"私有化构造⽅法\",{\"1\":{\"858\":1,\"5488\":1}}],[\"双间接\",{\"1\":{\"3489\":1}}],[\"双方都处于\",{\"1\":{\"2532\":1}}],[\"双方采用\",{\"1\":{\"2314\":1}}],[\"双方协商生产\",{\"1\":{\"2313\":1}}],[\"双活的重点\",{\"1\":{\"2076\":1,\"5781\":1}}],[\"双向同步\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"双重检查锁\",{\"1\":{\"857\":1,\"5487\":1}}],[\"双亲委派模型保证了\",{\"1\":{\"451\":1,\"5344\":1}}],[\"双亲委派模型的实现代码非常简单\",{\"1\":{\"443\":1,\"5336\":1}}],[\"双亲委派模型\",{\"0\":{\"5329\":1},\"1\":{\"442\":1,\"5334\":1}}],[\"双亲委派模型要求除了顶层的启动类加载器外\",{\"1\":{\"440\":1,\"5332\":1}}],[\"⼀个单例类在任何情况下都只存在⼀个实例\",{\"1\":{\"856\":1,\"5486\":1}}],[\"模糊匹配\",{\"1\":{\"4890\":1}}],[\"模块各司其职\",{\"1\":{\"3298\":1,\"6083\":1}}],[\"模块的报文根据\",{\"1\":{\"2520\":1,\"2709\":1}}],[\"模块完全满足开发人员的需求\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"模块\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"模块中\",{\"1\":{\"908\":1,\"5526\":1}}],[\"模式是灵活多变的\",{\"1\":{\"6324\":1}}],[\"模式主要由\",{\"1\":{\"6321\":1}}],[\"模式的架构\",{\"1\":{\"3298\":1,\"6083\":1}}],[\"模式设计开发了一套高效的事件处理模型\",{\"1\":{\"3091\":1,\"6747\":1}}],[\"模式\",{\"1\":{\"1515\":1,\"4563\":1,\"6163\":1}}],[\"模式中的角色\",{\"1\":{\"874\":1}}],[\"模式下的虚拟机使用\",{\"1\":{\"357\":1}}],[\"模式下的虚拟机首选新生代收集器\",{\"1\":{\"351\":1}}],[\"模式下的默认新生代收集器\",{\"1\":{\"348\":1}}],[\"模板编写为freemarker\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"模板方法模式\",{\"1\":{\"1212\":1,\"5564\":1}}],[\"模板\",{\"1\":{\"854\":1,\"4298\":1,\"5484\":1,\"7123\":1}}],[\"策略\",{\"1\":{\"854\":1,\"3162\":1,\"5484\":1,\"6818\":1}}],[\"状态响应码\",{\"1\":{\"7062\":1}}],[\"状态然后进行\",{\"1\":{\"6198\":1}}],[\"状态时\",{\"1\":{\"4617\":1,\"6190\":1}}],[\"状态变量\",{\"1\":{\"2682\":1}}],[\"状态主要的危害有两种\",{\"1\":{\"2622\":1}}],[\"状态的线程\",{\"1\":{\"3625\":1}}],[\"状态的连接可以应对\",{\"1\":{\"2615\":1}}],[\"状态的原因有哪些\",{\"0\":{\"2629\":1,\"2631\":1},\"1\":{\"2430\":1,\"2431\":1}}],[\"状态码用于描述\",{\"1\":{\"7058\":1}}],[\"状态码有哪些\",{\"0\":{\"7057\":1}}],[\"状态码\",{\"1\":{\"2264\":1,\"7059\":1}}],[\"状态码和返回资源\",{\"1\":{\"2257\":1}}],[\"状态超时\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"状态\",{\"0\":{\"2533\":1,\"2616\":1,\"3623\":1},\"1\":{\"854\":1,\"1263\":1,\"2410\":1,\"2427\":1,\"2526\":2,\"2527\":1,\"2528\":1,\"2529\":1,\"2530\":1,\"2532\":1,\"2578\":1,\"2594\":1,\"2595\":1,\"2596\":1,\"2597\":1,\"2598\":1,\"2599\":1,\"2600\":1,\"2602\":1,\"3624\":3,\"3645\":1,\"4615\":1,\"4619\":1,\"5484\":1,\"5887\":1,\"6188\":1,\"6192\":1}}],[\"迭代器\",{\"1\":{\"854\":1,\"5484\":1}}],[\"享元\",{\"1\":{\"854\":1,\"5484\":1}}],[\"外键对于维护数据一致性非常有帮助\",{\"1\":{\"2740\":1,\"6409\":1}}],[\"外部内存碎片和内存交换效率低\",{\"1\":{\"1657\":1}}],[\"外部内存碎片和内存交换的空间太大\",{\"1\":{\"1654\":1}}],[\"外部内存碎片\",{\"1\":{\"1652\":1}}],[\"外部节点\",{\"1\":{\"696\":2,\"5463\":2}}],[\"外观\",{\"1\":{\"854\":1,\"5484\":1}}],[\"桥接模式\",{\"1\":{\"854\":1,\"5484\":1}}],[\"建立一个目录时\",{\"1\":{\"3490\":1}}],[\"建立或状态改变的时间\",{\"1\":{\"3481\":1}}],[\"建立通信\",{\"1\":{\"3299\":1,\"6085\":1}}],[\"建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性\",{\"1\":{\"2791\":1,\"6462\":1}}],[\"建立了连接\",{\"1\":{\"2712\":1}}],[\"建立连接\",{\"1\":{\"2646\":1,\"2712\":1}}],[\"建立连接的报文\",{\"1\":{\"2542\":1}}],[\"建立\",{\"1\":{\"1885\":1}}],[\"建造者\",{\"1\":{\"854\":1,\"5484\":1}}],[\"建议将\",{\"1\":{\"4815\":1,\"7212\":1}}],[\"建议尽量使用数值类型作为主键\",{\"1\":{\"4118\":1}}],[\"建议提前添加\",{\"1\":{\"3572\":1}}],[\"建议单张表索引不超过\",{\"1\":{\"2832\":1,\"6504\":1}}],[\"建议使用\",{\"1\":{\"2824\":1,\"6496\":1}}],[\"建议采用\",{\"1\":{\"1572\":1}}],[\"建议\",{\"1\":{\"435\":1,\"4797\":1,\"5326\":1}}],[\"创建远程接口的本地jdk\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"创建web服务器工厂并进行自动配置\",{\"1\":{\"4234\":1}}],[\"创建动态对象\",{\"1\":{\"4182\":1}}],[\"创建ioc容器\",{\"1\":{\"4182\":1}}],[\"创建对象等\",{\"1\":{\"3942\":1}}],[\"创建新线程的时候会用到\",{\"1\":{\"3865\":1,\"6019\":1}}],[\"创建目录\",{\"1\":{\"3398\":1}}],[\"创建并配置\",{\"1\":{\"3303\":1,\"6089\":1}}],[\"创建网络环境时\",{\"1\":{\"3303\":1,\"6089\":1}}],[\"创建快照时会阻塞主线程吗\",{\"0\":{\"3148\":1,\"6804\":1}}],[\"创建快照之后\",{\"1\":{\"3145\":1,\"6801\":1}}],[\"创建时其他未提交的活跃事务\",{\"1\":{\"3035\":1,\"6702\":1}}],[\"创建该\",{\"1\":{\"3032\":1,\"3036\":1,\"6698\":1,\"6703\":1}}],[\"创建了组合索引\",{\"1\":{\"2844\":1,\"6516\":1}}],[\"创建了一个超大对象\",{\"1\":{\"2116\":1}}],[\"创建布隆过滤器\",{\"1\":{\"2176\":1,\"2184\":1}}],[\"创建缓冲输入流\",{\"1\":{\"2111\":1}}],[\"创建bufferedinputstream包装inputstream\",{\"1\":{\"2106\":1}}],[\"创建请求体\",{\"1\":{\"2096\":1}}],[\"创建出来的子进程\",{\"1\":{\"1955\":1}}],[\"创建进程时候\",{\"1\":{\"1929\":1}}],[\"创建全局异常处理类\",{\"1\":{\"1324\":1}}],[\"创建responseentity对象封装返回的错误信息\",{\"1\":{\"1320\":1}}],[\"创建一个person对象数组存入arraylist中\",{\"1\":{\"4273\":1}}],[\"创建一个全局异常处理类\",{\"1\":{\"1315\":1}}],[\"创建一个新的事务\",{\"1\":{\"1243\":1,\"5595\":1}}],[\"创建后填充属性时依赖\",{\"1\":{\"1258\":1,\"5610\":1}}],[\"创建\",{\"1\":{\"1209\":1,\"2099\":1,\"3032\":1,\"3035\":1,\"5561\":1,\"6698\":1,\"6702\":1}}],[\"创建型\",{\"1\":{\"854\":1,\"5484\":1}}],[\"创建的半成品同样放到缓存中\",{\"1\":{\"1279\":1,\"5621\":1}}],[\"创建的代理对象在调用方法的时候\",{\"1\":{\"904\":1,\"5522\":1}}],[\"创建的实例中\",{\"1\":{\"528\":1,\"5416\":1}}],[\"创建的\",{\"1\":{\"418\":1,\"5309\":1}}],[\"代替\",{\"1\":{\"2772\":1,\"2773\":1,\"2783\":1,\"6441\":1,\"6442\":1,\"6452\":1}}],[\"代表垃圾回收线程\",{\"1\":{\"3545\":1}}],[\"代表着进程id\",{\"1\":{\"3528\":1}}],[\"代表显示几行的意思\",{\"1\":{\"3415\":1}}],[\"代表我已经消费过了\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"代表他的序号\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"代表\",{\"1\":{\"1044\":2}}],[\"代表了最佳的实践\",{\"1\":{\"852\":1,\"5482\":1}}],[\"代理处理器类\",{\"1\":{\"3974\":1}}],[\"代理类\",{\"1\":{\"3964\":1}}],[\"代理类这些都变成了一个个实际的\",{\"1\":{\"891\":1,\"5509\":1}}],[\"代理类这些都变成了⼀个个实际的\",{\"1\":{\"888\":1,\"5506\":1}}],[\"代理设计模式\",{\"1\":{\"1210\":1,\"5562\":1}}],[\"代理对象内部包含sqlsession引用\",{\"1\":{\"1102\":1}}],[\"代理模式的本质是⼀个中间件\",{\"1\":{\"885\":1,\"5503\":1}}],[\"代理模式\",{\"0\":{\"883\":1,\"5501\":1},\"1\":{\"854\":1,\"5484\":1}}],[\"代码阻塞使用不当\",{\"1\":{\"3621\":1}}],[\"代码有漏洞\",{\"1\":{\"3587\":1}}],[\"代码的线程栈信息\",{\"1\":{\"3560\":1}}],[\"代码的配置方式\",{\"1\":{\"1550\":1}}],[\"代码中有阻塞性的操作\",{\"0\":{\"3620\":1}}],[\"代码中有比较耗\",{\"1\":{\"3544\":1}}],[\"代码中配置方式\",{\"1\":{\"1563\":1,\"1567\":1}}],[\"代码如下\",{\"1\":{\"633\":1}}],[\"代码缓存\",{\"1\":{\"187\":1}}],[\"代码转换成字节码\",{\"1\":{\"181\":1,\"5290\":1}}],[\"代码演示\",{\"0\":{\"102\":1,\"5215\":1}}],[\"代码块形式\",{\"1\":{\"3734\":1}}],[\"代码块执行后或异常处理后自动关闭\",{\"1\":{\"477\":1,\"5372\":1}}],[\"代码块\",{\"0\":{\"57\":1,\"5170\":1},\"1\":{\"3735\":1,\"5966\":1}}],[\"代码\",{\"1\":{\"46\":1,\"5159\":1}}],[\"软件工程专业\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"软件设计原则有哪些\",{\"0\":{\"850\":1,\"5480\":1}}],[\"软引用\",{\"1\":{\"312\":1}}],[\"八小时工作制\",{\"1\":{\"4321\":1,\"7146\":1}}],[\"八\",{\"0\":{\"849\":1}}],[\"他发送给了\",{\"1\":{\"4623\":1,\"6200\":1}}],[\"他要求系统有大量的服务器集群\",{\"1\":{\"4481\":1,\"6114\":1}}],[\"他随口一句啥都有\",{\"1\":{\"4439\":1}}],[\"他让手撕两个代码\",{\"1\":{\"4437\":1}}],[\"他还问\",{\"1\":{\"4433\":1,\"4434\":1,\"4435\":1,\"4436\":2}}],[\"他妈的开始狗叫\",{\"1\":{\"4306\":1,\"7131\":1}}],[\"他妈的\",{\"1\":{\"4298\":1,\"7123\":1}}],[\"他问还有呢\",{\"1\":{\"4298\":1,\"7123\":1}}],[\"他就非得问springboot\",{\"1\":{\"4289\":1,\"7114\":1}}],[\"他就是取模\",{\"1\":{\"1017\":1}}],[\"他在启动的时候做了什么\",{\"0\":{\"4230\":1}}],[\"他保存这线程的引用threadid\",{\"1\":{\"3645\":1,\"5887\":1}}],[\"他提交后我再提交就会报冲突的错误\",{\"1\":{\"3340\":1}}],[\"他们也会比较自己的投票和收到的投票\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"他们可以使用\",{\"1\":{\"3758\":1,\"5990\":1}}],[\"他们两是同义的\",{\"1\":{\"3359\":1}}],[\"他们的头是一样的或是相似的\",{\"1\":{\"2360\":1}}],[\"他们底层的实现都是一样的\",{\"1\":{\"807\":1}}],[\"他说行了\",{\"1\":{\"4438\":1}}],[\"他说你了解的很少\",{\"1\":{\"4294\":1,\"7119\":1}}],[\"他说还是不够快\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"他说这个方案可以\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"他的二进制的第一位一定是0\",{\"1\":{\"1044\":1}}],[\"他最终得到的index结果值为11\",{\"1\":{\"1037\":1}}],[\"他可以将所有的list的子类转成线程安全的类\",{\"1\":{\"846\":1}}],[\"凡事都有但是\",{\"1\":{\"842\":1}}],[\"扩容和缩容也不方便\",{\"1\":{\"4568\":1}}],[\"扩容也无用\",{\"1\":{\"1419\":1}}],[\"扩容\",{\"0\":{\"959\":1}}],[\"扩容时可能会出现循环链表的情况\",{\"1\":{\"919\":1,\"5436\":1}}],[\"扩容之后\",{\"1\":{\"919\":1,\"5436\":1}}],[\"扩容的时候使用的arrays\",{\"1\":{\"801\":1}}],[\"扩展性佳\",{\"1\":{\"4793\":1}}],[\"扩展性\",{\"1\":{\"1442\":1}}],[\"扩展类加载器\",{\"1\":{\"426\":1,\"5317\":1}}],[\"扩展\",{\"0\":{\"36\":1,\"38\":1,\"5149\":1,\"5151\":1},\"1\":{\"40\":1,\"5153\":1}}],[\"五个面试官\",{\"0\":{\"4324\":1,\"7149\":1}}],[\"五\",{\"0\":{\"773\":1,\"4449\":1}}],[\"构成一个高效可靠的原语集\",{\"1\":{\"4559\":1,\"6159\":1}}],[\"构建项目工程\",{\"1\":{\"4659\":1,\"7178\":1}}],[\"构建一个微服务比较复杂\",{\"1\":{\"4483\":1,\"6116\":1}}],[\"构建杰出的软件\",{\"1\":{\"3291\":1,\"6080\":1}}],[\"构建堆heapify的效率为o\",{\"1\":{\"771\":1}}],[\"构造映射信息\",{\"1\":{\"7042\":1}}],[\"构造的查询分组将在该局域网内广播\",{\"1\":{\"7039\":1}}],[\"构造类的实例化对象\",{\"0\":{\"5413\":1}}],[\"构造函数的方式\",{\"1\":{\"3909\":1,\"6056\":1}}],[\"构造函数来创建\",{\"0\":{\"3854\":1}}],[\"构造请求参数\",{\"1\":{\"2096\":1}}],[\"构造文件上传的http请求时\",{\"1\":{\"2094\":1}}],[\"构造方法实例化\",{\"1\":{\"1170\":1}}],[\"构造⽅法必须是私有的\",{\"1\":{\"856\":1,\"5486\":1}}],[\"构造实例会调用默认无参构造器\",{\"1\":{\"528\":1,\"5416\":1}}],[\"构造器调用newinstance\",{\"1\":{\"529\":1,\"5417\":1}}],[\"构造器\",{\"1\":{\"511\":1,\"516\":1,\"5399\":1,\"5404\":1}}],[\"详细请参考\",{\"1\":{\"4758\":1}}],[\"详细说一下这个方案\",{\"1\":{\"1834\":1,\"6366\":1}}],[\"详见\",{\"1\":{\"765\":1}}],[\"详情\",{\"0\":{\"161\":1,\"169\":1,\"5269\":1,\"5277\":1},\"1\":{\"2143\":1}}],[\"详情容器\",{\"1\":{\"55\":1,\"5168\":1}}],[\"尤其是当你已知map中存放的元素个数时\",{\"1\":{\"984\":1}}],[\"尤其是面对大规模数据的时候\",{\"1\":{\"638\":1}}],[\"尤其经常从两端进行操作\",{\"1\":{\"759\":1}}],[\"按业务划分为一个独立运行的程序\",{\"1\":{\"4468\":1,\"6101\":1}}],[\"按业务领域来拆分\",{\"1\":{\"4015\":1}}],[\"按团队结构来拆分\",{\"1\":{\"4016\":1}}],[\"按先入先出的顺序执行队列中的任务\",{\"1\":{\"3902\":1,\"6049\":1}}],[\"按先来先服务的原则排队等待被调度\",{\"1\":{\"1941\":1}}],[\"按隔离水平高低排序如下\",{\"1\":{\"3001\":1,\"6673\":1}}],[\"按序到达\",{\"1\":{\"2489\":1,\"4264\":1}}],[\"按键有序\",{\"1\":{\"1084\":1}}],[\"按需分配空间\",{\"1\":{\"753\":1}}],[\"按照类型和优先级来拉取任务\",{\"1\":{\"4933\":1,\"4935\":1}}],[\"按照注解的规则\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"按照应用维度划分\",{\"1\":{\"2777\":1,\"6446\":1}}],[\"按照底层存储方式角度划分\",{\"1\":{\"2774\":1,\"6443\":1}}],[\"按照数据结构维度划分\",{\"1\":{\"2769\":1,\"6438\":1}}],[\"按照之前描述的一致性哈希算法的规则\",{\"1\":{\"2032\":1}}],[\"按照存储的消息大小保留\",{\"1\":{\"1450\":1,\"6898\":1}}],[\"按照过期时间保留\",{\"1\":{\"1449\":1,\"6897\":1}}],[\"按照给定的事务规则来执行提交或者回滚操作\",{\"1\":{\"1228\":1,\"5580\":1}}],[\"按照索引位置访问效率比较低\",{\"1\":{\"754\":1}}],[\"按照索引位置进行访问效率很高\",{\"1\":{\"747\":1}}],[\"按照\",{\"1\":{\"621\":1}}],[\"两台主机所在的子网由一台路由器联通\",{\"1\":{\"7045\":1}}],[\"两点建议\",{\"1\":{\"4814\":1,\"7211\":1}}],[\"两点原因\",{\"1\":{\"4312\":1,\"7137\":1}}],[\"两次握手\",{\"1\":{\"2555\":1,\"2557\":1,\"2558\":1}}],[\"两次执行相同\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"两级分页肯定不够了\",{\"1\":{\"1665\":1}}],[\"两者各有千秋\",{\"1\":{\"3175\":1,\"6833\":1}}],[\"两者的区别在于\",{\"1\":{\"3545\":1}}],[\"两者的功能是完全不一样的\",{\"1\":{\"3361\":1}}],[\"两者的实现方式不太一样\",{\"1\":{\"2765\":1,\"6434\":1}}],[\"两者的默认端口不一样\",{\"1\":{\"2308\":1}}],[\"两者的add方法在扩容方面的差别也就是arraylist和vector的差别\",{\"1\":{\"819\":1}}],[\"两者的扩充数组容量方式不一样\",{\"1\":{\"819\":1}}],[\"两者中的值都不能重复\",{\"1\":{\"736\":1}}],[\"两个子类\",{\"1\":{\"3787\":1,\"5798\":1}}],[\"两个操作能保证是原子性吗\",{\"1\":{\"3677\":1,\"5846\":1}}],[\"两个进程协调不断地进行写和读\",{\"1\":{\"3468\":1}}],[\"两个进程利用管道进行通信时\",{\"1\":{\"3468\":1}}],[\"两个命令都是停止容器\",{\"1\":{\"3321\":1}}],[\"两个参数\",{\"1\":{\"3233\":1}}],[\"两个参数配置为相同的值\",{\"1\":{\"246\":1}}],[\"两个机房都能写入\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"两个机房\",{\"0\":{\"2067\":1,\"5772\":1}}],[\"两个线程获取资源的顺序构成了环形链\",{\"1\":{\"1995\":1}}],[\"两个变量\",{\"1\":{\"1626\":1}}],[\"两个不同的键值\",{\"1\":{\"1033\":1}}],[\"两个数的乘积都是整数\",{\"1\":{\"990\":1}}],[\"两个\",{\"1\":{\"381\":1}}],[\"两个对象出现循环引用的情况下\",{\"1\":{\"298\":1}}],[\"元\",{\"1\":{\"2972\":10,\"6644\":10}}],[\"元和对\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"元和\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"元数据锁\",{\"0\":{\"6559\":1},\"1\":{\"2874\":1,\"6546\":1}}],[\"元素的顺序发生了变化\",{\"1\":{\"919\":1,\"5436\":1}}],[\"元素在插入treeset时compareto\",{\"1\":{\"739\":1}}],[\"元素不可重复\",{\"1\":{\"731\":1}}],[\"元素无放入顺序\",{\"1\":{\"731\":1}}],[\"元素可重复\",{\"1\":{\"729\":1}}],[\"元素有放入顺序\",{\"1\":{\"729\":1}}],[\"元空间\",{\"1\":{\"226\":1}}],[\"添加租户信息过滤条件\",{\"1\":{\"4949\":1}}],[\"添加分页参数\",{\"1\":{\"4948\":1}}],[\"添加任务\",{\"1\":{\"4933\":1,\"4935\":1}}],[\"添加锁和释放锁的大部分操作实际上都是在\",{\"1\":{\"3787\":1,\"5798\":1}}],[\"添加权限\",{\"1\":{\"3411\":1}}],[\"添加元素满了之后会自动扩容原来容量的\",{\"1\":{\"3880\":1,\"6035\":1}}],[\"添加元素到布隆过滤器中\",{\"1\":{\"2182\":1}}],[\"添加元素\",{\"1\":{\"2177\":1}}],[\"添加元素的效率还可以\",{\"1\":{\"749\":1}}],[\"添加依赖\",{\"1\":{\"2173\":1}}],[\"添加到请求体\",{\"1\":{\"2100\":1}}],[\"添加文件数据到请求体\",{\"1\":{\"2096\":1}}],[\"添加唯一id\",{\"1\":{\"1500\":1,\"6953\":1}}],[\"添加对应的物理分页语句和物理分页参数\",{\"1\":{\"1125\":1,\"5707\":1}}],[\"添加对应分页语法\",{\"1\":{\"1110\":1}}],[\"添加n个元素的效率为o\",{\"1\":{\"749\":1,\"762\":1}}],[\"添加\",{\"1\":{\"722\":1,\"759\":1,\"1290\":1,\"4959\":1,\"5631\":1}}],[\"判断文章是否已发布\",{\"1\":{\"4979\":1}}],[\"判断是否有权限\",{\"1\":{\"4813\":1,\"4832\":1,\"7210\":1,\"7221\":1}}],[\"判断是否存在\",{\"1\":{\"2177\":1}}],[\"判断是否存在应用逻辑错误导致的内存泄漏\",{\"1\":{\"2130\":1}}],[\"判断完主库下线后\",{\"1\":{\"3208\":1}}],[\"判断主库客观下线了\",{\"1\":{\"3220\":1}}],[\"判断主库\",{\"1\":{\"3206\":1}}],[\"判断当前事务2能看到该记录的版本是哪个\",{\"1\":{\"3052\":1}}],[\"判断db\",{\"1\":{\"3048\":1}}],[\"判断元素是否在布隆过滤器中\",{\"1\":{\"2182\":1}}],[\"判断元素是否存在\",{\"1\":{\"716\":1,\"722\":1}}],[\"判断自动装配开关是否打开\",{\"1\":{\"1291\":1,\"5632\":1}}],[\"判断一下\",{\"1\":{\"590\":1}}],[\"四大隔离级别\",{\"0\":{\"6667\":1}}],[\"四大组件分别是\",{\"1\":{\"1361\":1,\"5686\":1}}],[\"四个都不会还让写代码\",{\"1\":{\"4427\":1}}],[\"四层模型\",{\"0\":{\"2724\":1,\"7020\":1}}],[\"四元组包括如下\",{\"1\":{\"2467\":1}}],[\"四元组可以唯一的确定一个连接\",{\"1\":{\"2467\":1}}],[\"四次挥手的过程\",{\"1\":{\"2637\":1}}],[\"四次挥手过程是怎样的\",{\"0\":{\"2593\":1},\"1\":{\"2420\":1}}],[\"四次握手\",{\"1\":{\"2557\":1,\"2559\":1}}],[\"四次\",{\"0\":{\"2535\":1},\"1\":{\"2411\":1}}],[\"四\",{\"0\":{\"952\":1,\"4440\":1,\"5535\":1},\"1\":{\"711\":1}}],[\"红色节点的父节点都是黑色\",{\"1\":{\"698\":1,\"5465\":1}}],[\"红色节点的子节点都是黑色\",{\"1\":{\"697\":1,\"5464\":1}}],[\"红黑树这种保存所有待检测的\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"红黑树是个高效的数据结构\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"红黑树是统计效率比较高的大致平衡的排序二叉树\",{\"1\":{\"1083\":1}}],[\"红黑树是一个二叉搜索树\",{\"1\":{\"693\":1,\"5460\":1}}],[\"红黑树是一种平衡二叉查找树\",{\"1\":{\"738\":1}}],[\"红黑树是一种接近平衡的二叉树\",{\"1\":{\"691\":1,\"5458\":1}}],[\"红黑树是一种自平衡的二叉查找树\",{\"1\":{\"689\":1,\"5456\":1}}],[\"红黑树允许局部很少的不完全平衡\",{\"1\":{\"925\":1,\"5442\":1}}],[\"红黑树与avll树\",{\"1\":{\"925\":1,\"5442\":1}}],[\"红黑树本质上是一棵二叉查找树\",{\"1\":{\"921\":1,\"5438\":1}}],[\"红黑树旋转情况少于avl树\",{\"1\":{\"709\":1,\"5477\":1}}],[\"红黑树整体性能略优于avl树\",{\"1\":{\"709\":1,\"5477\":1}}],[\"红黑树和avl树的比较\",{\"1\":{\"706\":1,\"5474\":1}}],[\"红黑树的效率\",{\"0\":{\"5469\":1}}],[\"红黑树的特性\",{\"0\":{\"5459\":1}}],[\"红黑树的插入删除比avl树更便于控制操作\",{\"1\":{\"708\":1,\"5476\":1}}],[\"红黑树的优点就是对有序数据的查询操作不会慢到o\",{\"1\":{\"705\":1,\"5473\":1}}],[\"红黑树的查找\",{\"1\":{\"702\":1,\"5470\":1}}],[\"红黑树保证最长路径不超过最短路径的二倍\",{\"1\":{\"693\":1,\"5460\":1}}],[\"红黑树就出现了\",{\"1\":{\"691\":1,\"5458\":1}}],[\"红黑树具有良好的效率\",{\"1\":{\"689\":1,\"5456\":1}}],[\"红黑树\",{\"0\":{\"687\":1,\"5454\":1},\"1\":{\"720\":1}}],[\"黑色\",{\"1\":{\"696\":1,\"5463\":1}}],[\"说出主要的组件\",{\"1\":{\"6130\":1}}],[\"说⼀说简单⼯⼚模式\",{\"0\":{\"5491\":1}}],[\"说一下\",{\"0\":{\"5285\":1}}],[\"说一下对比亚迪的认识\",{\"1\":{\"4446\":1}}],[\"说一下浅拷贝和深拷贝\",{\"1\":{\"4408\":1}}],[\"说一下四大隔离级别\",{\"1\":{\"4376\":1}}],[\"说一下红黑树\",{\"1\":{\"4310\":1,\"7135\":1}}],[\"说我python写得多\",{\"1\":{\"4356\":1}}],[\"说完他是干啥的以及插值表达式\",{\"1\":{\"4298\":1,\"7123\":1}}],[\"说几个基于tcp的协议\",{\"0\":{\"4266\":1}}],[\"说到崩溃恢复我们首先要提到\",{\"1\":{\"6186\":1}}],[\"说到业余爱好的话\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"说到动态代理\",{\"1\":{\"895\":1,\"5513\":1}}],[\"说白了就是\",{\"1\":{\"4596\":1,\"6180\":1}}],[\"说白了就是一个线程集合workerset和一个阻塞队列workqueue\",{\"1\":{\"3886\":1}}],[\"说白了就是一个变量在程序运行过程中\",{\"1\":{\"1623\":1}}],[\"说白了mvcc就是为了实现读\",{\"1\":{\"3025\":1}}],[\"说说意向锁\",{\"1\":{\"2906\":1,\"6578\":1}}],[\"说\",{\"1\":{\"2391\":1,\"7095\":1}}],[\"说个段子\",{\"1\":{\"2375\":1}}],[\"说明查询分组已经到达了主机\",{\"1\":{\"7039\":1}}],[\"说明使用了哪些spring\",{\"1\":{\"4068\":1}}],[\"说明使用了spring\",{\"1\":{\"4067\":1}}],[\"说明代码或第三方依赖包中有显式的\",{\"1\":{\"3561\":1}}],[\"说明该元素不在布隆过滤器中\",{\"1\":{\"3262\":1,\"6867\":1}}],[\"说明从\",{\"1\":{\"2706\":1}}],[\"说明资源无新修改\",{\"1\":{\"2242\":1}}],[\"说明资源又被改过\",{\"1\":{\"2242\":1}}],[\"说明请求的资源还在\",{\"1\":{\"2201\":1}}],[\"说明请求的资源已经不存在了\",{\"1\":{\"2200\":1}}],[\"说明\",{\"1\":{\"1554\":1,\"1570\":1}}],[\"说它是接近平衡因为它并没有像avl树的平衡因子的概念\",{\"1\":{\"691\":1,\"5458\":1}}],[\"说得再绝对一些\",{\"1\":{\"594\":1}}],[\"删除锁\",{\"1\":{\"4907\":1,\"4909\":1,\"7277\":1,\"7279\":1}}],[\"删除文章功能\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"删除文件\",{\"1\":{\"3491\":1}}],[\"删除容器\",{\"1\":{\"3307\":1}}],[\"删除一个或多个\",{\"1\":{\"3307\":2}}],[\"删除与淘汰策略\",{\"0\":{\"3169\":1,\"6827\":1}}],[\"删除操作\",{\"1\":{\"2909\":1,\"6581\":1}}],[\"删除操作比较多\",{\"1\":{\"759\":1}}],[\"删除它\",{\"1\":{\"1736\":1}}],[\"删除等动作的发生\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"删除等操作时\",{\"1\":{\"1031\":1}}],[\"删除等操作\",{\"1\":{\"689\":1,\"5456\":1}}],[\"删除的效率比较高\",{\"1\":{\"1086\":1}}],[\"删除的时间复杂度最坏为o\",{\"1\":{\"921\":1,\"5438\":1}}],[\"删除元素的效率很高\",{\"1\":{\"756\":1,\"762\":1}}],[\"删除元素\",{\"1\":{\"716\":1,\"722\":1,\"757\":1}}],[\"删除\",{\"1\":{\"691\":1,\"945\":1,\"3295\":1,\"3400\":1,\"5458\":1}}],[\"插个题外话\",{\"1\":{\"6270\":1}}],[\"插件解决扩展性问题\",{\"1\":{\"4552\":1}}],[\"插件来实现\",{\"1\":{\"37\":1,\"5150\":1}}],[\"插队成功\",{\"1\":{\"3842\":1,\"5958\":1}}],[\"插队失败\",{\"1\":{\"3842\":1,\"5958\":1}}],[\"插入了一条余额超过\",{\"1\":{\"2993\":1,\"6665\":1}}],[\"插入意向锁如果不在间隙锁区间内则是可以的\",{\"1\":{\"2966\":1,\"6638\":1}}],[\"插入意向锁与间隙锁的另一个非常重要的差别是\",{\"1\":{\"2966\":1,\"6638\":1}}],[\"插入意向锁确实是一种特殊的间隙锁\",{\"1\":{\"2965\":1,\"6637\":1}}],[\"插入意向锁\",{\"0\":{\"6633\":1},\"1\":{\"2965\":1,\"2966\":1,\"6637\":1,\"6638\":1}}],[\"插入意向锁名字虽然有意向锁\",{\"1\":{\"2964\":1,\"6636\":1}}],[\"插入操作就会发生阻塞\",{\"1\":{\"2963\":1,\"6635\":1}}],[\"插入或查找的速度肯定比较慢\",{\"1\":{\"2802\":1,\"6474\":1}}],[\"插入的时候优先插入到新的表\",{\"1\":{\"2064\":1,\"5769\":1}}],[\"插入顺序经常用于处理键值对的数据\",{\"1\":{\"1089\":1}}],[\"插入和删除容易\",{\"1\":{\"1004\":1}}],[\"插入和删除困难\",{\"1\":{\"1004\":1}}],[\"插入和删除元素的效率比较低\",{\"1\":{\"750\":1}}],[\"插入和删除操作时\",{\"1\":{\"705\":1,\"5473\":1}}],[\"插入和删除操作\",{\"1\":{\"702\":1,\"5470\":1}}],[\"插入\",{\"1\":{\"691\":1,\"921\":1,\"5438\":1,\"5458\":1}}],[\"查找有相应方法的类\",{\"1\":{\"4182\":1}}],[\"查找\",{\"1\":{\"1086\":1}}],[\"查找操作时\",{\"1\":{\"703\":1,\"5471\":1}}],[\"查看文章中是否包含敏感词\",{\"1\":{\"4857\":1}}],[\"查看对象存活数量及大小\",{\"1\":{\"3993\":1}}],[\"查看堆的使用情况\",{\"1\":{\"3604\":1}}],[\"查看类的实例数量\",{\"1\":{\"3596\":1}}],[\"查看一个文件时\",{\"1\":{\"3498\":1}}],[\"查看特定端口的进程\",{\"1\":{\"3426\":1}}],[\"查看特定的进程\",{\"1\":{\"3426\":1}}],[\"查看系统所有进程\",{\"1\":{\"3426\":1}}],[\"查看自己的进程\",{\"1\":{\"3426\":1}}],[\"查看打包文件里面有哪些文件\",{\"1\":{\"3419\":1}}],[\"查看提交记录命令\",{\"1\":{\"3338\":1}}],[\"查看工作区状况\",{\"1\":{\"3338\":1}}],[\"查看容器\",{\"1\":{\"3307\":1}}],[\"查看镜像\",{\"1\":{\"3307\":1}}],[\"查看\",{\"1\":{\"3307\":1}}],[\"查看基本信息\",{\"1\":{\"3307\":1}}],[\"查看oom发生时jvm的堆内存使用情况\",{\"1\":{\"2129\":1}}],[\"查看是否有记录存在独占锁\",{\"1\":{\"2915\":1,\"6587\":1}}],[\"查看是否有没有正常释放对象引用的地方\",{\"1\":{\"2121\":1}}],[\"查看是哪个进程占用内存资源较高\",{\"1\":{\"2123\":1}}],[\"查看源码\",{\"1\":{\"1377\":1}}],[\"查看头部元素的效率很高\",{\"1\":{\"771\":1}}],[\"查看详情\",{\"1\":{\"56\":1,\"58\":1,\"61\":1,\"65\":1,\"68\":1,\"71\":1,\"74\":1,\"78\":1,\"81\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"95\":1,\"101\":1,\"103\":1,\"106\":1,\"108\":1,\"110\":1,\"112\":1,\"5169\":1,\"5171\":1,\"5174\":1,\"5178\":1,\"5181\":1,\"5184\":1,\"5187\":1,\"5191\":1,\"5194\":1,\"5197\":1,\"5199\":1,\"5201\":1,\"5203\":1,\"5205\":1,\"5208\":1,\"5214\":1,\"5216\":1,\"5219\":1,\"5221\":1,\"5223\":1,\"5225\":1}}],[\"查询转发表\",{\"1\":{\"7051\":1}}],[\"查询分组相同的构造\",{\"1\":{\"7041\":1}}],[\"查询分组将广播给该局域网内的所有设备\",{\"1\":{\"7038\":1}}],[\"查询分组中\",{\"1\":{\"7038\":1}}],[\"查询分组\",{\"1\":{\"7037\":1}}],[\"查询前5天的文章数据\",{\"1\":{\"4999\":1}}],[\"查询文章\",{\"1\":{\"4979\":1}}],[\"查询结果被封装到一个\",{\"1\":{\"4963\":1}}],[\"查询条件等\",{\"1\":{\"4955\":1}}],[\"查询条件中有or\",{\"1\":{\"4203\":1}}],[\"查询条件中使用\",{\"1\":{\"2847\":1,\"6519\":1}}],[\"查询自媒体文章\",{\"1\":{\"4857\":1}}],[\"查询大量字段\",{\"1\":{\"3540\":1}}],[\"查询比如\",{\"1\":{\"2846\":1,\"6518\":1}}],[\"查询速度非常快\",{\"1\":{\"2799\":1,\"6471\":1}}],[\"查询的过程如下\",{\"1\":{\"2388\":1}}],[\"查询的时候\",{\"1\":{\"2064\":1,\"5769\":1}}],[\"查询缓存\",{\"1\":{\"2188\":1}}],[\"查询\",{\"0\":{\"6735\":1},\"1\":{\"691\":1,\"3083\":1,\"5458\":1,\"7047\":1}}],[\"ydreferer=ahr0chm6ly9ibg9nlmnzzg4ubmv0l3uwmta2mjc4ndavyxj0awnszs9kzxrhawxzlzc2ndm1mzg1p3nwbt0xmdaxljixmdeumzawms42njuwljemdxrtx21lzgl1bt1kaxn0cmlidxrllnbjx3jlbgv2yw50lm5vbmutdgfzay1ibg9nltiln0vkzwzhdwx0jtdfq1rsteltvcu3rvjhdgutms03njqzntm4ns1ibg9nltexnzqxota1oc4ymzulnuv2mjglnuvwy19yzwxldmfudf90mf9kb3dubg9hzczkzxb0af8xlxv0bv9zb3vyy2u9zglzdhjpynv0zs5wy19yzwxldmfudc5ub25llxrhc2stymxvzy0yjtdfzgvmyxvsdcu3runuukxju1qln0vsyxrlltetnzy0mzuzodutymxvzy0xmtc0mtkwntgumjm1jtvfdji4jtvfcgnfcmvszxzhbnrfddbfzg93bmxvywqmdxrtx3jlbgv2yw50x2luzgv4pti\",{\"1\":{\"6955\":1}}],[\"yonggc\",{\"1\":{\"3614\":1,\"3615\":1}}],[\"youngxy\",{\"1\":{\"556\":1,\"558\":1,\"560\":1,\"642\":1,\"711\":1,\"765\":1,\"2143\":1,\"4758\":1}}],[\"young\",{\"0\":{\"229\":1},\"1\":{\"1697\":2,\"1710\":1,\"1711\":1,\"1712\":2,\"1714\":1,\"1715\":1,\"1716\":1,\"3855\":1,\"6009\":1}}],[\"ygct\",{\"1\":{\"3615\":1}}],[\"ygc\",{\"1\":{\"3614\":1}}],[\"yyyymmddhhmm\",{\"1\":{\"3403\":1}}],[\"yangluheng\",{\"1\":{\"3338\":2}}],[\"yang13563758128\",{\"1\":{\"686\":1,\"947\":1,\"5347\":1}}],[\"y\",{\"1\":{\"3206\":2}}],[\"yes\",{\"1\":{\"3154\":1,\"6810\":1}}],[\"yljh\",{\"1\":{\"2136\":1}}],[\"yuechuzhixing\",{\"1\":{\"1393\":1}}],[\"yml文件中配置数据中心id和机器id\",{\"1\":{\"4825\":1,\"4973\":1}}],[\"yml\",{\"1\":{\"1291\":1,\"5632\":1}}],[\"＋1\",{\"1\":{\"680\":1}}],[\"度为2的结点数为n2\",{\"1\":{\"679\":1}}],[\"度数\",{\"1\":{\"663\":1}}],[\"深拷贝就是将目标对象的属性全部复制一份给源对象\",{\"1\":{\"5111\":1}}],[\"深拷贝\",{\"1\":{\"5110\":1}}],[\"深度为k的二叉树至多有2^k\",{\"1\":{\"678\":1}}],[\"深入理解java虚拟机\",{\"1\":{\"2117\":1}}],[\"深入理解\",{\"1\":{\"277\":1}}],[\"性质5\",{\"1\":{\"681\":1}}],[\"性质4\",{\"1\":{\"680\":1}}],[\"性质3\",{\"1\":{\"679\":1}}],[\"性质2\",{\"1\":{\"678\":1}}],[\"性质1\",{\"1\":{\"677\":1}}],[\"性能不好\",{\"1\":{\"6993\":1}}],[\"性能瓶颈不在\",{\"1\":{\"6361\":1}}],[\"性能测试\",{\"0\":{\"5005\":1}}],[\"性能分析\",{\"1\":{\"4939\":1,\"4950\":1}}],[\"性能需求\",{\"1\":{\"4864\":1}}],[\"性能较好\",{\"1\":{\"4803\":1}}],[\"性能好\",{\"1\":{\"4792\":1}}],[\"性能要下降很多\",{\"1\":{\"4610\":1}}],[\"性能是不错的\",{\"1\":{\"4561\":1,\"6161\":1}}],[\"性能监控\",{\"1\":{\"4023\":1}}],[\"性能调优实战\",{\"1\":{\"3867\":1,\"6021\":1}}],[\"性能下降明显\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"性能极高\",{\"1\":{\"3797\":1,\"5809\":1}}],[\"性能新版本\",{\"1\":{\"3780\":1,\"5791\":1}}],[\"性能非常高\",{\"1\":{\"3092\":1,\"6748\":1}}],[\"性能也越好\",{\"1\":{\"3071\":1,\"6722\":1}}],[\"性能效率就越低\",{\"1\":{\"2996\":1,\"6668\":1}}],[\"性能更牛皮了\",{\"1\":{\"2734\":1,\"6403\":1}}],[\"性能上的改进\",{\"1\":{\"2348\":1,\"2359\":1}}],[\"性能上的一个很大的问题\",{\"1\":{\"2292\":1}}],[\"性能的损耗会呈指数级增长\",{\"1\":{\"1772\":1}}],[\"性能与数组长度成正比\",{\"1\":{\"748\":1}}],[\"性能\",{\"1\":{\"223\":1,\"3145\":1,\"6801\":1}}],[\"根域的\",{\"1\":{\"7089\":1}}],[\"根域是在最顶层\",{\"1\":{\"7084\":1}}],[\"根域名服务器是最高层次的\",{\"1\":{\"2390\":1,\"7094\":1}}],[\"根目录\",{\"1\":{\"3493\":1}}],[\"根本没收到所以会丢弃\",{\"1\":{\"4623\":1,\"6200\":1}}],[\"根本没有经过缓存这一层\",{\"1\":{\"3247\":1,\"6852\":1}}],[\"根本不存在于缓存中\",{\"1\":{\"3247\":1,\"6852\":1}}],[\"根\",{\"1\":{\"2385\":1,\"2391\":1,\"7086\":1,\"7095\":1}}],[\"根是黑色\",{\"1\":{\"695\":1,\"5462\":1}}],[\"根所在的层为0\",{\"1\":{\"669\":1}}],[\"根据目的\",{\"1\":{\"7051\":1}}],[\"根据目的主机\",{\"1\":{\"7048\":1}}],[\"根据w3techs的数据\",{\"1\":{\"6979\":1,\"7002\":1}}],[\"根据参数再应用到请求上\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"根据参数类型获取对应的构造器\",{\"1\":{\"548\":1,\"5427\":1}}],[\"根据参数类型获取类中某个构造器\",{\"1\":{\"546\":1,\"5427\":1}}],[\"根据得到的哈希值\",{\"1\":{\"3259\":1,\"6864\":1}}],[\"根据加锁的范围\",{\"1\":{\"2850\":1,\"6522\":1}}],[\"根据主键再回表查数据\",{\"1\":{\"2806\":1,\"6478\":1}}],[\"根据类别分库分表\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"根据类的二进制名称来查找类\",{\"1\":{\"432\":1,\"5323\":1}}],[\"根据进程的动态变化调整优先级\",{\"1\":{\"1930\":1}}],[\"根据不同类型环境创建不同类型的\",{\"1\":{\"1385\":1}}],[\"根据返回的结果可以判断消息是否发送成功\",{\"1\":{\"1517\":1}}],[\"根据返回的\",{\"1\":{\"1205\":1,\"5557\":1}}],[\"根据你的配置\",{\"1\":{\"1199\":1,\"5551\":1}}],[\"根据获得的\",{\"1\":{\"1198\":1,\"5550\":1}}],[\"根据配置情况调用\",{\"1\":{\"1170\":1}}],[\"根据键保存\",{\"1\":{\"1086\":1}}],[\"根据键保存和获取值的效率都很高\",{\"1\":{\"955\":1}}],[\"根据元素特征计算元素数组下标的方法就是哈希算法\",{\"1\":{\"1005\":1}}],[\"根据元素内容查找和删除的效率比较低\",{\"1\":{\"763\":1}}],[\"根据hash值就可以直接快速定位\",{\"1\":{\"955\":1}}],[\"根据传入的条件来决定用hashmap还是linkedhashmap\",{\"1\":{\"5394\":1}}],[\"根据传入的条件来决定用hashmap还linkedhashmap\",{\"1\":{\"506\":1}}],[\"根据传⼊⼀个唯⼀的标识来获得\",{\"1\":{\"864\":1,\"5494\":1}}],[\"根据值查找和删除元素的效率比较低\",{\"1\":{\"772\":1}}],[\"根据实现方式不同主要分为两大类\",{\"1\":{\"734\":1}}],[\"根据是否认为子树的排列顺序有意义\",{\"1\":{\"654\":1}}],[\"根据\",{\"1\":{\"572\":1,\"1125\":1,\"1466\":1,\"2661\":1,\"5707\":1,\"6914\":1}}],[\"根据名字和参数类型获取对应方法\",{\"1\":{\"541\":1,\"543\":1,\"5425\":2}}],[\"根据姓名获取类中的某个变量\",{\"1\":{\"538\":1,\"5423\":1}}],[\"根据变量名获取类中的一个变量\",{\"1\":{\"536\":1,\"5423\":1}}],[\"根据用户所期望的\",{\"1\":{\"379\":1}}],[\"且子查询中为简单\",{\"1\":{\"6740\":1}}],[\"且都有应用在实际的项目中\",{\"1\":{\"6333\":1}}],[\"且富有挑战\",{\"1\":{\"4574\":1}}],[\"且有剩余资源\",{\"1\":{\"3656\":1,\"5899\":1}}],[\"且具有一定的不可复现性\",{\"1\":{\"3624\":1}}],[\"且一直未释放\",{\"1\":{\"3588\":1}}],[\"且一个\",{\"1\":{\"1440\":1}}],[\"且修改数据的操作效率也会提升\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"且修改索引时\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"且对许多网站来说http2带来的优势还不够明显\",{\"1\":{\"2371\":1}}],[\"且多次提交数据就会创建多个资源\",{\"1\":{\"2224\":1}}],[\"且每次的结果都是相同的\",{\"1\":{\"2223\":1}}],[\"且每个\",{\"1\":{\"1442\":1}}],[\"且添加元素的时间也越长\",{\"1\":{\"2179\":1}}],[\"且不能跟\",{\"1\":{\"1445\":1}}],[\"且\",{\"1\":{\"1443\":1,\"2847\":1,\"6519\":1}}],[\"且业务场景允许异步\",{\"1\":{\"1419\":1}}],[\"且麻烦\",{\"1\":{\"890\":1,\"5508\":1}}],[\"且产品多的话会使⼯⼚类⽐较复杂\",{\"1\":{\"863\":1,\"5493\":1}}],[\"且路径唯一\",{\"1\":{\"665\":1}}],[\"且内部属性已经被赋值\",{\"1\":{\"531\":1,\"5419\":1}}],[\"显示进程\",{\"1\":{\"3553\":1}}],[\"显示进程运行信息列表\",{\"1\":{\"3550\":1}}],[\"显示正在处理的文件名\",{\"1\":{\"3419\":1}}],[\"显然\",{\"1\":{\"665\":1}}],[\"显然树叶的度数为0\",{\"1\":{\"663\":1}}],[\"显卡\",{\"1\":{\"586\":2}}],[\"关闭状态\",{\"1\":{\"4523\":1,\"6140\":1}}],[\"关闭方式\",{\"1\":{\"3891\":1,\"3893\":1}}],[\"关闭线程池\",{\"1\":{\"3889\":1}}],[\"关闭\",{\"1\":{\"2628\":1}}],[\"关键看你的业务场景\",{\"1\":{\"4886\":1,\"7264\":1}}],[\"关键字类似\",{\"1\":{\"3785\":1,\"5796\":1}}],[\"关键字创建对象不是原⼦操作\",{\"1\":{\"858\":1,\"5488\":1}}],[\"关键是备份期间\",{\"1\":{\"2864\":1,\"6536\":1}}],[\"关键是请求体中包含文件二进制数据\",{\"1\":{\"2094\":1}}],[\"关键词和各种\",{\"1\":{\"1980\":1,\"6239\":1}}],[\"关联\",{\"1\":{\"1182\":1,\"1185\":1}}],[\"关系\",{\"1\":{\"662\":1}}],[\"关于此将按照时间顺序\",{\"1\":{\"7035\":1}}],[\"关于http3\",{\"0\":{\"6986\":1}}],[\"关于http2\",{\"0\":{\"6974\":1}}],[\"关于http\",{\"1\":{\"6971\":1,\"6996\":1}}],[\"关于hashmap在java\",{\"1\":{\"1065\":1}}],[\"关于饱和策略下面单独介绍一下\",{\"1\":{\"3866\":1,\"6020\":1}}],[\"关于偏向锁的撤销\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"关于这里的逻辑会在以后的spring源码分析专题详细分析\",{\"1\":{\"1388\":1}}],[\"关于这些扩展\",{\"1\":{\"40\":1,\"5153\":1}}],[\"关于循环依赖的源码之前\",{\"1\":{\"1249\":1,\"5601\":1}}],[\"关于java\",{\"1\":{\"1067\":1}}],[\"关于内部的第⼆重空判断的作⽤\",{\"1\":{\"859\":1,\"5489\":1}}],[\"关于在面试中\",{\"1\":{\"639\":1}}],[\"关于继承关系和组合关系的区别\",{\"1\":{\"580\":1}}],[\"祖先和子孙\",{\"1\":{\"662\":1}}],[\"没必要一次执行尽可能多的读写操作\",{\"1\":{\"6278\":1}}],[\"没在其他其他接口里出现过\",{\"1\":{\"5013\":1}}],[\"没怎么经过大规模吞吐量场景的考验\",{\"1\":{\"1435\":1,\"4763\":1}}],[\"没看懂的话其实也没关系\",{\"1\":{\"1025\":1}}],[\"没有给http\",{\"1\":{\"6994\":1}}],[\"没有数据可读写时\",{\"1\":{\"6279\":1}}],[\"没有任何关系\",{\"1\":{\"5111\":1}}],[\"没有定论\",{\"1\":{\"4650\":1,\"6223\":1}}],[\"没有被选上就是这个角色\",{\"1\":{\"4602\":1}}],[\"没有被删除\",{\"1\":{\"3173\":1,\"6831\":1}}],[\"没有开源\",{\"1\":{\"4425\":1}}],[\"没有开启\",{\"1\":{\"3153\":1,\"6809\":1}}],[\"没有别的意思\",{\"1\":{\"4405\":1}}],[\"没有使用过\",{\"1\":{\"4387\":1}}],[\"没有使用其作为索引的数据结构呢\",{\"1\":{\"2757\":1,\"6426\":1}}],[\"没有保研吗\",{\"1\":{\"4334\":1,\"7159\":1}}],[\"没有认证界限\",{\"1\":{\"4053\":1}}],[\"没有容量\",{\"1\":{\"3879\":1,\"6034\":1}}],[\"没有抢到锁的线程将自旋\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"没有获得锁的线程只能等待\",{\"1\":{\"3730\":1}}],[\"没有回复过哨兵ping响应的从节点\",{\"1\":{\"3216\":1}}],[\"没有收到对方的\",{\"1\":{\"2649\":1}}],[\"没有边界\",{\"1\":{\"2498\":1}}],[\"没有\",{\"1\":{\"2439\":1,\"2440\":1,\"7064\":1}}],[\"没有到达时\",{\"1\":{\"2366\":1}}],[\"没有请求优先级控制\",{\"1\":{\"2355\":1}}],[\"没有变化\",{\"1\":{\"2247\":1}}],[\"没有指明partition\",{\"1\":{\"1464\":1,\"6912\":1}}],[\"没有那么简单\",{\"1\":{\"1421\":1}}],[\"没有做好处理的话\",{\"1\":{\"1421\":1}}],[\"没有卡顿现象\",{\"1\":{\"1418\":1}}],[\"没有同步方法\",{\"1\":{\"796\":1}}],[\"没有在多个线程之间共享同一个集合\",{\"1\":{\"780\":1}}],[\"没有索引位置的概念\",{\"1\":{\"764\":1}}],[\"没有顺序\",{\"1\":{\"717\":1}}],[\"没有重复元素\",{\"1\":{\"715\":1,\"721\":1}}],[\"没有用到红黑树特有的特性\",{\"1\":{\"703\":1,\"5471\":1}}],[\"没有子结点的结点称为树叶\",{\"1\":{\"661\":1}}],[\"没错\",{\"1\":{\"621\":1,\"1011\":1}}],[\"兄弟结点\",{\"1\":{\"660\":1}}],[\"边缘触发的效率比水平触发的效率要高\",{\"1\":{\"6280\":1}}],[\"边缘触发模式一般和非阻塞\",{\"1\":{\"6279\":1}}],[\"边有方向\",{\"1\":{\"659\":1}}],[\"边\",{\"1\":{\"659\":1}}],[\"父进程的双向通信\",{\"1\":{\"6377\":1}}],[\"父类加载时会判断该类有没有被自己加载过\",{\"1\":{\"4196\":1}}],[\"父类大多是一个很抽象的概念\",{\"1\":{\"592\":1}}],[\"父结点相同的结点互为兄弟结点\",{\"1\":{\"660\":1}}],[\"父结点和子结点\",{\"1\":{\"656\":1}}],[\"除非\",{\"1\":{\"5004\":1,\"7286\":1}}],[\"除非数据是被本身事务自己所修改\",{\"1\":{\"1234\":1,\"5586\":1}}],[\"除非数组已排序\",{\"1\":{\"748\":1}}],[\"除此之外\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"除直接分析堆转储文件外\",{\"1\":{\"3593\":1}}],[\"除去\",{\"1\":{\"2568\":1}}],[\"除树根外\",{\"1\":{\"654\":1}}],[\"除了explain\",{\"0\":{\"4226\":1}}],[\"除了上文中一旦出现就很严重的两种情况外\",{\"1\":{\"3619\":1}}],[\"除了在发生内存溢出时自动生成的堆转储文件外\",{\"1\":{\"3572\":1}}],[\"除了提供容器运行时所需的程序\",{\"1\":{\"3294\":1}}],[\"除了性能之外\",{\"1\":{\"1044\":1}}],[\"除了性能原因外\",{\"1\":{\"351\":1}}],[\"除了以上这些重要成员变量外\",{\"1\":{\"970\":1}}],[\"除了第一个\",{\"1\":{\"770\":1}}],[\"除了runtimeexception及其子类以外\",{\"1\":{\"466\":1,\"5361\":1}}],[\"除了这三种类加载器之外\",{\"1\":{\"428\":1,\"5319\":1}}],[\"除了\",{\"1\":{\"343\":1}}],[\"结束代理\",{\"1\":{\"3965\":1,\"3971\":1,\"3975\":1}}],[\"结束后该\",{\"1\":{\"1134\":1,\"5713\":1}}],[\"结构化面试+技术面\",{\"0\":{\"4324\":1,\"7149\":1}}],[\"结构层次鲜明\",{\"1\":{\"3476\":1,\"5741\":1}}],[\"结构里用\",{\"1\":{\"3102\":1,\"6758\":1}}],[\"结构型\",{\"1\":{\"854\":1,\"5484\":1}}],[\"结尾的对数据库操作的类\",{\"1\":{\"1212\":1,\"5564\":1}}],[\"结合comparator来实现\",{\"1\":{\"4271\":1}}],[\"结合\",{\"1\":{\"1206\":1,\"5558\":1}}],[\"结合上面的源码\",{\"1\":{\"446\":1,\"5339\":1}}],[\"结果发现面试官说错了\",{\"1\":{\"5088\":1}}],[\"结果面试官问我md5\",{\"1\":{\"5088\":1}}],[\"结果是一个long型的id\",{\"1\":{\"4968\":1}}],[\"结果封装\",{\"1\":{\"4963\":1}}],[\"结果自己挂掉了\",{\"1\":{\"4677\":1,\"7196\":1}}],[\"结果如下\",{\"1\":{\"3687\":1,\"5856\":1}}],[\"结果列表表头含义\",{\"1\":{\"3609\":1}}],[\"结果会显示进程内的线程数\",{\"1\":{\"3601\":1}}],[\"结果会以表格的方式显示存活对象的信息\",{\"1\":{\"3597\":1}}],[\"结果都是\",{\"1\":{\"2221\":1}}],[\"结果都为0\",{\"1\":{\"1037\":1}}],[\"结果感觉有点卡顿\",{\"1\":{\"1417\":1}}],[\"结果集执行的内存分页\",{\"1\":{\"1122\":1,\"5704\":1}}],[\"结点都有层数\",{\"1\":{\"669\":1}}],[\"结点的层数\",{\"1\":{\"667\":1}}],[\"结点个数为0\",{\"1\":{\"649\":1}}],[\"要启用http2必须使用openssl\",{\"1\":{\"6992\":1}}],[\"要避免多线程由于竞争共享资源而导致数据错乱的问题\",{\"1\":{\"6375\":1}}],[\"要把结果传递给主线程的\",{\"1\":{\"6374\":1}}],[\"要看使用的编程语言以及平台有关\",{\"1\":{\"6337\":1}}],[\"要考虑到数据量的问题\",{\"1\":{\"4876\":1,\"7254\":1}}],[\"要考虑接收方处理能力\",{\"1\":{\"2659\":1}}],[\"要\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"要按照调优kafka\",{\"1\":{\"4568\":1}}],[\"要修改的新值b=2\",{\"1\":{\"3670\":1,\"5834\":1}}],[\"要处理的文件\",{\"1\":{\"3419\":1}}],[\"要满足两个条件\",{\"1\":{\"3211\":1}}],[\"要解决\",{\"1\":{\"6381\":1}}],[\"要解决内存溢出问题需清楚两点\",{\"1\":{\"3591\":1}}],[\"要解决幻读现象不建议将隔离级别升级到\",{\"1\":{\"3008\":1,\"6680\":1}}],[\"要解决不可重复读现象\",{\"1\":{\"3008\":1,\"6680\":1}}],[\"要解决脏读现象\",{\"1\":{\"3008\":1,\"6680\":1}}],[\"要解决这问题\",{\"1\":{\"2934\":1,\"6606\":1}}],[\"要解决这些问题\",{\"1\":{\"1655\":1}}],[\"要加上\",{\"1\":{\"2940\":1,\"6612\":1}}],[\"要释放表锁\",{\"1\":{\"2883\":1,\"6555\":1}}],[\"要使用全局锁\",{\"1\":{\"2853\":1,\"6525\":1}}],[\"要达到内存溢出\",{\"1\":{\"2117\":1}}],[\"要么抛弃\",{\"1\":{\"4608\":1}}],[\"要么回\",{\"1\":{\"4608\":1}}],[\"要么全部不完成\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"要么全部完成\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"要么保留到消息达到一定大小的字节数\",{\"1\":{\"1451\":1,\"6899\":1}}],[\"要么保留一定时间\",{\"1\":{\"1451\":1,\"6899\":1}}],[\"要么完全不起作用\",{\"1\":{\"1220\":1,\"5572\":1}}],[\"要么都不执行\",{\"1\":{\"1218\":1,\"5570\":1}}],[\"要么都执行\",{\"1\":{\"1218\":1,\"5570\":1}}],[\"要么用throws子句声明抛出它\",{\"1\":{\"466\":1,\"5361\":1}}],[\"要么用try\",{\"1\":{\"466\":1,\"5361\":1}}],[\"要求排序\",{\"1\":{\"1087\":1}}],[\"要求子树都非空\",{\"1\":{\"648\":1}}],[\"要实现动态代理的话\",{\"1\":{\"902\":1,\"5520\":1}}],[\"要先定位\",{\"1\":{\"757\":1}}],[\"树和\",{\"1\":{\"2759\":1,\"6428\":1}}],[\"树是\",{\"1\":{\"2759\":1,\"6428\":1}}],[\"树是一种层次性结构\",{\"1\":{\"651\":1}}],[\"树也称\",{\"1\":{\"2759\":1,\"6428\":1}}],[\"树的检索的过程相当于对范围内的每个节点的关键字做二分查找\",{\"1\":{\"2764\":1,\"6433\":1}}],[\"树的叶子节点都是独立的\",{\"1\":{\"2763\":1,\"6432\":1}}],[\"树的叶节点\",{\"1\":{\"2750\":1,\"2767\":1,\"6419\":1,\"6436\":1}}],[\"树的所有节点既存放键\",{\"1\":{\"2762\":1,\"6431\":1}}],[\"树的一种变体\",{\"1\":{\"2759\":1,\"6428\":1}}],[\"树的高度或深度是树中结点的最大层数\",{\"1\":{\"671\":1}}],[\"树型bin用到的概率非常小\",{\"1\":{\"929\":1,\"5446\":1}}],[\"树根到结点的路径长度是该结点的层数\",{\"1\":{\"668\":1}}],[\"树中的其余结点称为分支结点\",{\"1\":{\"661\":1}}],[\"树叶\",{\"1\":{\"661\":1}}],[\"树\",{\"1\":{\"645\":1,\"2758\":1,\"2759\":1,\"2761\":1,\"6427\":1,\"6428\":1,\"6430\":1}}],[\"面对消息挤压\",{\"1\":{\"4885\":1,\"7263\":1}}],[\"面试\",{\"0\":{\"4276\":1,\"7101\":1,\"7102\":1,\"7313\":1}}],[\"面试官竟然问md5是对称加密还是非对称加密\",{\"1\":{\"5096\":1}}],[\"面试官笑了\",{\"1\":{\"4451\":1}}],[\"面试官是个女性\",{\"1\":{\"4442\":1}}],[\"面试官说讯飞的开源相比其他厂商做的很差\",{\"1\":{\"4425\":1}}],[\"面试官说大家都是写代码\",{\"1\":{\"4423\":1}}],[\"面试官说jstack下载下来然后用专业的工具看\",{\"1\":{\"4413\":1}}],[\"面试官说没关系\",{\"1\":{\"4411\":1}}],[\"面试官说我是ai研发\",{\"1\":{\"4425\":1}}],[\"面试官说我问你这个问题就是想看你是偏技术调研的还是偏代码的\",{\"1\":{\"4421\":1}}],[\"面试官说我问一下基础知识\",{\"1\":{\"4398\":1}}],[\"面试官说我也不会深度学习\",{\"1\":{\"4388\":1}}],[\"面试官说你可以来实习体验一下公司氛围\",{\"1\":{\"4394\":1}}],[\"面试官说你啥时候可以来实习\",{\"1\":{\"4394\":1}}],[\"面试官说主要是java\",{\"1\":{\"4393\":1}}],[\"面试官说不用说了\",{\"1\":{\"4392\":1}}],[\"面试官说不是\",{\"1\":{\"4314\":1,\"7139\":1}}],[\"面试官说看你简历都是java相关\",{\"1\":{\"4329\":1,\"7154\":1}}],[\"面试官说这有java和python\",{\"1\":{\"4322\":1,\"7147\":1}}],[\"面试官说了早上9\",{\"1\":{\"4321\":1,\"7146\":1}}],[\"面试官又给我打了过来\",{\"1\":{\"4318\":1,\"7143\":1}}],[\"面试官的态度极其恶心\",{\"1\":{\"4287\":1,\"7112\":1}}],[\"面试官狗叫\",{\"0\":{\"4286\":1,\"7111\":1}}],[\"面试官\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"面试官会怎么看\",{\"1\":{\"639\":1}}],[\"面试时可用下列\",{\"1\":{\"1195\":1,\"5547\":1}}],[\"面向无连接\",{\"1\":{\"2507\":1}}],[\"面向连接\",{\"1\":{\"2457\":1}}],[\"面向切面编程\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"面向对象技术\",{\"1\":{\"3937\":1}}],[\"面向对象\",{\"1\":{\"594\":1}}],[\"面向我们用户的加载器\",{\"1\":{\"427\":1,\"5318\":1}}],[\"慢慢往下看\",{\"1\":{\"6461\":1}}],[\"慢启动算法\",{\"1\":{\"2681\":1}}],[\"慢启动的算法记住一个规则就行\",{\"1\":{\"2680\":1}}],[\"慢启动\",{\"1\":{\"2675\":1}}],[\"慢\",{\"1\":{\"637\":1}}],[\"基础问完了\",{\"1\":{\"4414\":1}}],[\"基础架构研发实力较强\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"基数统计\",{\"1\":{\"3095\":1,\"6751\":1}}],[\"基本功能\",{\"0\":{\"4558\":1,\"6158\":1}}],[\"基本原理\",{\"0\":{\"3676\":1,\"5845\":1}}],[\"基本上就能确定是哪里出问题了\",{\"1\":{\"3625\":1}}],[\"基本就能定位到问题代码的位置了\",{\"1\":{\"3582\":1}}],[\"基本组件\",{\"0\":{\"3441\":1,\"5738\":1}}],[\"基本数据类型\",{\"0\":{\"3093\":1,\"6749\":1}}],[\"基本的报文格式就是\",{\"1\":{\"2262\":1}}],[\"基本的操作都是由hashmap底层实现的\",{\"1\":{\"737\":1}}],[\"基本相同\",{\"1\":{\"2197\":1}}],[\"基本一样\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"基本概念\",{\"0\":{\"175\":1,\"5284\":1}}],[\"基于该协议\",{\"1\":{\"4593\":1,\"6166\":1}}],[\"基于这个原因\",{\"1\":{\"3361\":1}}],[\"基于内存\",{\"1\":{\"3090\":1,\"6746\":1}}],[\"基于时钟的\",{\"1\":{\"2565\":1}}],[\"基于字节流的传输层通信协议\",{\"1\":{\"2455\":1}}],[\"基于\",{\"1\":{\"2316\":1,\"2737\":1,\"3091\":1,\"3290\":1,\"6079\":1,\"6406\":1,\"6747\":1}}],[\"基于java\",{\"1\":{\"1395\":1}}],[\"基于父结点\",{\"1\":{\"662\":1}}],[\"基于链表的实现\",{\"1\":{\"630\":1}}],[\"做出\",{\"1\":{\"3206\":1}}],[\"做了些什么\",{\"1\":{\"4319\":1,\"7144\":1}}],[\"做了什么优化\",{\"0\":{\"2357\":1}}],[\"做了无谓的\",{\"1\":{\"2292\":1}}],[\"做了很多事情\",{\"1\":{\"1079\":1}}],[\"做按位与运算\",{\"1\":{\"1021\":1}}],[\"做为\",{\"1\":{\"624\":1,\"3361\":1}}],[\"做成一个\",{\"1\":{\"616\":1}}],[\"做成了一个类\",{\"1\":{\"612\":1}}],[\"少数消息就会再次消费一次\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"少于8就从红黑树转回单链表是为了节省维护一个树的资源消耗\",{\"1\":{\"930\":1,\"5447\":1}}],[\"少打一些官司\",{\"1\":{\"623\":1}}],[\"少用继承\",{\"1\":{\"594\":1}}],[\"暂存区\",{\"1\":{\"3332\":1,\"3334\":1,\"3355\":1,\"3357\":1}}],[\"暂停等\",{\"1\":{\"3295\":1}}],[\"暂停所有的应用线程\",{\"1\":{\"376\":1}}],[\"暂时无法响应客户端\",{\"1\":{\"2212\":1}}],[\"暂时停止运行\",{\"1\":{\"1856\":1,\"6232\":1}}],[\"暂时只是做到这个份儿上\",{\"1\":{\"622\":1}}],[\"暂不详细介绍\",{\"1\":{\"1054\":1}}],[\"毕竟也存在上下文的切换\",{\"1\":{\"6280\":1}}],[\"毕竟它是百万级主题数的\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"毕竟\",{\"1\":{\"620\":1,\"2747\":1,\"6416\":1}}],[\"毕竟继承关系看起来更\",{\"1\":{\"594\":1}}],[\"自管理的敏感词审核\",{\"1\":{\"4857\":1}}],[\"自管理的敏感词过滤\",{\"1\":{\"4857\":1}}],[\"自媒体微服务发送消息\",{\"1\":{\"4978\":1}}],[\"自媒体文章id\",{\"1\":{\"4857\":1}}],[\"自媒体文章审核\",{\"1\":{\"4857\":1}}],[\"自媒体端发布文章后\",{\"1\":{\"4846\":1,\"7235\":1}}],[\"自媒体等微服务\",{\"1\":{\"4659\":1,\"7178\":1}}],[\"自paxos问世以来就持续垄断了分布式一致性算法\",{\"1\":{\"4580\":1}}],[\"自学\",{\"1\":{\"4003\":1}}],[\"自我介绍\",{\"0\":{\"3932\":1,\"4112\":1,\"4208\":1,\"5023\":1,\"7287\":1},\"1\":{\"4288\":1,\"4348\":1,\"4359\":1,\"4397\":1,\"4428\":1,\"4443\":1,\"4450\":1,\"7113\":1}}],[\"自适应自旋锁\",{\"1\":{\"3827\":1}}],[\"自带的\",{\"1\":{\"3736\":1,\"5967\":1}}],[\"自带的用于分析\",{\"1\":{\"3574\":1}}],[\"自旋很少成功获取锁\",{\"1\":{\"3827\":1}}],[\"自旋等待刚刚成功获取过锁\",{\"1\":{\"3827\":1}}],[\"自旋锁缺点\",{\"1\":{\"3823\":1,\"5941\":1}}],[\"自旋锁只是将当前线程不停地执行循环体\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"自旋锁是采用让当前线程不停地在循环体内执行\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"自旋锁\",{\"0\":{\"5939\":1},\"1\":{\"3804\":1,\"5815\":1}}],[\"自旋开销问题\",{\"0\":{\"5860\":1},\"1\":{\"3701\":1,\"5870\":1}}],[\"自旋长时间不能成功就会给\",{\"1\":{\"3692\":1,\"5861\":1}}],[\"自增锁还是要等语句结束后才被释放\",{\"1\":{\"2932\":1,\"6604\":1}}],[\"自增锁在申请之后就马上释放\",{\"1\":{\"2931\":1,\"6603\":1}}],[\"自己在接口里记录\",{\"1\":{\"5008\":1}}],[\"自己造缓存轮子的时候需要格外考虑的东西\",{\"1\":{\"3172\":1,\"6830\":1}}],[\"自己\",{\"0\":{\"2081\":1}}],[\"自己写库需要\",{\"1\":{\"1417\":1}}],[\"自然也就不用\",{\"1\":{\"2569\":1}}],[\"自然也能在同一端进行插入和删除\",{\"1\":{\"616\":1}}],[\"自然出现误判的几率就小了\",{\"1\":{\"2165\":1}}],[\"自然就是简单\",{\"1\":{\"1951\":1}}],[\"自动提交的话会有一个问题\",{\"1\":{\"4675\":1,\"7194\":1}}],[\"自动提交偏移量\",{\"1\":{\"1601\":1}}],[\"自动化部署\",{\"1\":{\"4470\":1,\"6103\":1}}],[\"自动化的插件配置\",{\"1\":{\"1359\":1,\"5684\":1}}],[\"自动化的资源过滤\",{\"1\":{\"1358\":1,\"5683\":1}}],[\"自动生成一个二进制的堆转储文件\",{\"1\":{\"3570\":1}}],[\"自动故障转移\",{\"1\":{\"3196\":1}}],[\"自动进入\",{\"1\":{\"2600\":1}}],[\"自动配置\",{\"1\":{\"4067\":1}}],[\"自动配置类可以通过这些注解来对配置进行定制化\",{\"1\":{\"1304\":1}}],[\"自动配置类其实就是通过\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"自动配置作为spring\",{\"1\":{\"1296\":1}}],[\"自身提交了这个事务并且要发送给所有\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"自身创建的原则下\",{\"1\":{\"1287\":1,\"5629\":1}}],[\"自身依赖于自身\",{\"1\":{\"1252\":1,\"5604\":1}}],[\"自定义异常\",{\"1\":{\"5651\":1}}],[\"自定义拦截器\",{\"1\":{\"4944\":1}}],[\"自定义同步器在实现时候只需要实现共享资源state的获取和释放即可\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"自定义线程池\",{\"1\":{\"1379\":1}}],[\"自定义它们\",{\"1\":{\"140\":1,\"5253\":1}}],[\"自定义对齐\",{\"0\":{\"62\":1,\"5175\":1}}],[\"自定义标题\",{\"1\":{\"45\":1,\"48\":1,\"50\":1,\"52\":1,\"54\":1,\"5158\":1,\"5161\":1,\"5163\":1,\"5165\":1,\"5167\":1}}],[\"自定义容器\",{\"0\":{\"43\":1,\"5156\":1}}],[\"什么情况适合用beanutils\",{\"1\":{\"5113\":1}}],[\"什么情况下打包为jar包\",{\"1\":{\"4080\":1}}],[\"什么情况下打包为war包\",{\"1\":{\"4078\":1}}],[\"什么叫具有唯一性的字符串呢\",{\"1\":{\"5014\":1}}],[\"什么叫能体现该接口特性的字符串呢\",{\"1\":{\"5013\":1}}],[\"什么垃圾玩意\",{\"1\":{\"4287\":1,\"7112\":1}}],[\"什么是缓存雪崩\",{\"0\":{\"6878\":1}}],[\"什么是缓存击穿\",{\"0\":{\"6869\":1}}],[\"什么是缓存穿透\",{\"0\":{\"6851\":1}}],[\"什么是代理模式\",{\"0\":{\"5502\":1}}],[\"什么是反射机制\",{\"0\":{\"5386\":1}}],[\"什么是网络分区\",{\"1\":{\"4642\":1,\"6215\":1}}],[\"什么是openfeign\",{\"1\":{\"4533\":1}}],[\"什么是feign\",{\"1\":{\"4531\":1,\"6148\":1}}],[\"什么是断路器\",{\"1\":{\"4518\":1,\"6135\":1}}],[\"什么是aqs\",{\"0\":{\"3632\":1,\"5873\":1}}],[\"什么是mysql\",{\"1\":{\"3020\":1}}],[\"什么是一致性\",{\"0\":{\"2014\":1}}],[\"什么是spring\",{\"0\":{\"1347\":1,\"4462\":1,\"5672\":1,\"6095\":1}}],[\"什么是设计模式\",{\"0\":{\"851\":1,\"5481\":1}}],[\"什么是\",{\"0\":{\"614\":1,\"3288\":1,\"3666\":1,\"4550\":1,\"5829\":1,\"6077\":1,\"6800\":1,\"6808\":1},\"1\":{\"2403\":1,\"2404\":1,\"2418\":1,\"4524\":1,\"6141\":1}}],[\"什么时候执⾏\",{\"1\":{\"483\":1}}],[\"什么时候才会去养老区呢\",{\"1\":{\"267\":1}}],[\"完善\",{\"1\":{\"4493\":1,\"6126\":1}}],[\"完成以下两步即可在项目中集成雪花算法\",{\"1\":{\"4822\":1,\"4970\":1}}],[\"完成远程服务的http调用\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"完成自动配置\",{\"1\":{\"4236\":1}}],[\"完成后释放锁\",{\"1\":{\"859\":1,\"5489\":1}}],[\"完全服从\",{\"1\":{\"1235\":1,\"5587\":1}}],[\"完全不会对其生存时间构成影响\",{\"1\":{\"319\":1}}],[\"完美解决了之前说的\",{\"1\":{\"610\":1}}],[\"qps\",{\"1\":{\"5006\":1}}],[\"qps估算方法\",{\"0\":{\"5005\":1}}],[\"query\",{\"1\":{\"5006\":1}}],[\"queries\",{\"1\":{\"3581\":1}}],[\"questions\",{\"1\":{\"3753\":1,\"3790\":1,\"3930\":1,\"5801\":1,\"5985\":1,\"6074\":1}}],[\"queuing\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"queue<integer>\",{\"1\":{\"604\":2,\"634\":2}}],[\"queue\",{\"1\":{\"603\":1,\"607\":1,\"608\":1,\"609\":2,\"610\":2,\"611\":1,\"782\":1,\"1407\":1,\"3463\":1,\"3857\":3,\"6011\":3}}],[\"quorum\",{\"1\":{\"3207\":1,\"3213\":1,\"3214\":1}}],[\"quick\",{\"1\":{\"6989\":1,\"7071\":1}}],[\"quicklist\",{\"1\":{\"3113\":1,\"6769\":1}}],[\"quic成为http\",{\"1\":{\"6977\":1,\"7000\":1}}],[\"quic\",{\"1\":{\"2490\":1,\"6989\":4,\"7071\":4,\"7072\":1,\"7073\":1}}],[\"quantum\",{\"1\":{\"1924\":1}}],[\"q2\",{\"1\":{\"604\":1,\"605\":2,\"609\":1,\"634\":2}}],[\"q1\",{\"1\":{\"604\":1,\"605\":2,\"609\":1,\"634\":2}}],[\"qq\",{\"1\":{\"553\":1,\"918\":1,\"1368\":1,\"1511\":1,\"2136\":1,\"3059\":1,\"3702\":1,\"3727\":1,\"3930\":1,\"4756\":1,\"5103\":1,\"5430\":1,\"5435\":1,\"5646\":1,\"5824\":1,\"5929\":1,\"6074\":1,\"6969\":1}}],[\"弃用\",{\"1\":{\"597\":1,\"598\":1,\"1396\":1}}],[\"多请求复用一个\",{\"1\":{\"7073\":1}}],[\"多租户支持\",{\"1\":{\"4939\":1,\"4949\":1}}],[\"多于\",{\"1\":{\"4561\":2,\"6161\":2}}],[\"多次查询从缓存中直接获取\",{\"1\":{\"4070\":1}}],[\"多版本并发控制\",{\"1\":{\"2978\":1,\"6650\":1}}],[\"多列值组成一个索引\",{\"1\":{\"2782\":1,\"6451\":1}}],[\"多路平衡查找树\",{\"1\":{\"2759\":1,\"6428\":1}}],[\"多路复用技术\",{\"1\":{\"6259\":1}}],[\"多路复用接口\",{\"1\":{\"1823\":1,\"1835\":1,\"6352\":1,\"6367\":1}}],[\"多路复用\",{\"0\":{\"1766\":1,\"6258\":1},\"1\":{\"3091\":1,\"6747\":1,\"7066\":1}}],[\"多对多的交互通信\",{\"1\":{\"2487\":1,\"4262\":1}}],[\"多个请求复用了一个进程\",{\"1\":{\"6260\":1}}],[\"多个节点之前的网络本来是连通的\",{\"1\":{\"4643\":1,\"6216\":1}}],[\"多个节点\",{\"1\":{\"4577\":1}}],[\"多个模块\",{\"1\":{\"4465\":1,\"6098\":1}}],[\"多个sqlsession可以共用二级缓存\",{\"1\":{\"4071\":1}}],[\"多个线程不按照申请锁的顺序去获得锁\",{\"1\":{\"3842\":1,\"5958\":1}}],[\"多个线程按照申请锁的顺序去获得锁\",{\"1\":{\"3839\":1,\"5955\":1}}],[\"多个线程竞争偏向锁导致偏向锁升级为轻量级锁\",{\"1\":{\"3804\":1,\"5815\":1}}],[\"多个线程共享的内存\",{\"1\":{\"3707\":1,\"5906\":1}}],[\"多个独立的进程之间可以通过消息缓冲机制来相互通信\",{\"1\":{\"3469\":1}}],[\"多个字段在一个索引上\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"多个\",{\"1\":{\"2362\":1}}],[\"多个消费者\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"多个人给一个主播打赏怎么设计\",{\"0\":{\"2042\":1,\"5747\":1}}],[\"多级\",{\"1\":{\"1937\":1}}],[\"多级页表虽然解决了空间上的问题\",{\"1\":{\"1671\":1}}],[\"多\",{\"0\":{\"6380\":1},\"1\":{\"1847\":1,\"6330\":1,\"6331\":1,\"6332\":1,\"6336\":1,\"6381\":2,\"6382\":1,\"6389\":1}}],[\"多进程相比单\",{\"1\":{\"6377\":1}}],[\"多进程的模式\",{\"1\":{\"6378\":1}}],[\"多进程的这种方式\",{\"1\":{\"1883\":1}}],[\"多进程的方案\",{\"1\":{\"1833\":1,\"6363\":1,\"6376\":1}}],[\"多进程\",{\"0\":{\"1832\":1,\"1841\":1,\"6362\":1,\"6380\":1},\"1\":{\"1833\":1,\"6329\":1,\"6331\":1,\"6336\":1,\"6363\":1,\"6381\":1,\"6382\":1}}],[\"多线程的实现机制\",{\"0\":{\"6892\":1}}],[\"多线程的方案\",{\"1\":{\"6376\":1}}],[\"多线程的方案优势在于能够充分利用多核\",{\"1\":{\"6373\":1}}],[\"多线程的方案要简单的多\",{\"1\":{\"1847\":1,\"6389\":1}}],[\"多线程的方案虽然看起来复杂的\",{\"1\":{\"1847\":1,\"6389\":1}}],[\"多线程实现起来很麻烦\",{\"1\":{\"6377\":1}}],[\"多线程与高并发\",{\"0\":{\"5787\":1}}],[\"多线程和高并发\",{\"0\":{\"5786\":1,\"7307\":1}}],[\"多线程共享变量用什么实现\",{\"0\":{\"4192\":1}}],[\"多线程技术\",{\"1\":{\"3939\":1}}],[\"多线程并发操作\",{\"1\":{\"3845\":1,\"5961\":1}}],[\"多线程连接池\",{\"1\":{\"3535\":1}}],[\"多线程\",{\"0\":{\"1832\":1,\"6362\":1},\"1\":{\"1833\":1,\"3855\":1,\"6009\":1,\"6335\":1,\"6363\":1,\"6364\":1}}],[\"多线程在一个特定的时间段内只会执行其中某一个线程方法\",{\"1\":{\"194\":1}}],[\"多核\",{\"1\":{\"1829\":1,\"6358\":1}}],[\"多万个\",{\"1\":{\"1663\":1,\"1664\":1}}],[\"多机器并发\",{\"1\":{\"1461\":1,\"6909\":1}}],[\"多partition分布式存储\",{\"1\":{\"1459\":1,\"6907\":1}}],[\"多组循环依赖\",{\"1\":{\"1252\":1,\"5604\":1}}],[\"多研究一下如何处理这些历史遗留问题\",{\"1\":{\"623\":1}}],[\"多用组合\",{\"1\":{\"594\":1}}],[\"组\",{\"1\":{\"3510\":1}}],[\"组件丰富\",{\"1\":{\"4494\":1,\"6126\":1}}],[\"组件\",{\"0\":{\"3325\":1}}],[\"组织的一个索引结构\",{\"1\":{\"2750\":1,\"2767\":1,\"6419\":1,\"6436\":1}}],[\"组合在自定义同步组件的实现中\",{\"1\":{\"3652\":1,\"5895\":1}}],[\"组合索引\",{\"1\":{\"2817\":1,\"6489\":1}}],[\"组合\",{\"1\":{\"854\":1,\"5484\":1}}],[\"组合更常见\",{\"1\":{\"594\":1}}],[\"组成部分\",{\"1\":{\"3293\":1}}],[\"组成各种队列\",{\"1\":{\"1873\":1}}],[\"组成的\",{\"1\":{\"1440\":1}}],[\"组成关系更常用\",{\"1\":{\"592\":1}}],[\"组成\",{\"1\":{\"253\":1,\"1439\":1,\"1525\":1}}],[\"叫做\",{\"1\":{\"593\":1,\"2074\":1,\"4603\":1,\"5779\":1}}],[\"设备驱动程序\",{\"1\":{\"3435\":1,\"3443\":1}}],[\"设备信息\",{\"1\":{\"1870\":1}}],[\"设为\",{\"1\":{\"2693\":1,\"3233\":1}}],[\"设定log的目录\",{\"1\":{\"5017\":1}}],[\"设定权限\",{\"1\":{\"3411\":1}}],[\"设定一个定时器\",{\"1\":{\"2649\":1}}],[\"设定的最大内存\",{\"1\":{\"245\":1}}],[\"设置推荐数据\",{\"1\":{\"4999\":1}}],[\"设置成功\",{\"1\":{\"4908\":1,\"7278\":1}}],[\"设置成0\",{\"1\":{\"990\":1}}],[\"设置\",{\"1\":{\"4904\":1,\"7274\":1}}],[\"设置指定的值\",{\"1\":{\"4903\":1,\"7273\":1}}],[\"设置文章id\",{\"1\":{\"4857\":1}}],[\"设置别名包扫描路径\",{\"1\":{\"4826\":1,\"4974\":1}}],[\"设置访问一个对象并下载下来进行缓存\",{\"1\":{\"4713\":1}}],[\"设置bean属性\",{\"1\":{\"4131\":1}}],[\"设置二级缓存\",{\"1\":{\"3284\":1,\"6889\":1}}],[\"设置不同的失效时间比如随机设置缓存的失效时间\",{\"1\":{\"3282\":1,\"6887\":1}}],[\"设置热点数据永不过期或者过期时间比较长\",{\"1\":{\"3267\":1,\"6872\":1}}],[\"设置为\",{\"1\":{\"3214\":1}}],[\"设置为第一步中的\",{\"1\":{\"2706\":1}}],[\"设置过期时间还是有问题的\",{\"1\":{\"3176\":1,\"6834\":1}}],[\"设置中填写的\",{\"1\":{\"2389\":1,\"7093\":1}}],[\"设置了这个\",{\"1\":{\"3570\":1}}],[\"设置了期望的插入数量和误判率\",{\"1\":{\"2178\":1}}],[\"设置了多个队列\",{\"1\":{\"1940\":1}}],[\"设置单次读取字节数\",{\"1\":{\"2111\":1}}],[\"设置请求头部信息\",{\"1\":{\"2099\":1}}],[\"设置线程名前缀\",{\"1\":{\"1380\":1}}],[\"设置队列容量\",{\"1\":{\"1380\":1}}],[\"设置最大线程数\",{\"1\":{\"1380\":1}}],[\"设置核心线程数\",{\"1\":{\"1380\":1}}],[\"设置状态码等信息\",{\"1\":{\"1320\":1}}],[\"设计的分布式一致性协议\",{\"1\":{\"4582\":1}}],[\"设计的另一个不合理之处\",{\"1\":{\"611\":1}}],[\"设计目标\",{\"1\":{\"4488\":1,\"6121\":1}}],[\"设计成16的好处主要是可以使用按位与替代取模来提升hash的效率\",{\"1\":{\"978\":1}}],[\"设计模式了解吗\",{\"0\":{\"4268\":1}}],[\"设计模式是软件开发⼈员在软件开发过程中⾯临的⼀般问题的解决⽅案\",{\"1\":{\"852\":1,\"5482\":1}}],[\"设计模式\",{\"1\":{\"852\":1,\"5482\":1}}],[\"设计中\",{\"1\":{\"594\":1}}],[\"设计原则\",{\"1\":{\"593\":1}}],[\"动物\",{\"1\":{\"592\":1}}],[\"动态地将代码切入到方法或者函数的调用点上的这种编程方式\",{\"1\":{\"4020\":1}}],[\"动态地给该对象增加一些职责\",{\"1\":{\"872\":1}}],[\"动态增加一张表\",{\"0\":{\"2063\":1,\"5768\":1}}],[\"动态优先级\",{\"1\":{\"1930\":1}}],[\"动态生成的代理类\",{\"1\":{\"903\":1,\"5521\":1}}],[\"动态代理的目标对象可以是类或者接口\",{\"1\":{\"3958\":1}}],[\"动态代理的实现方式有很多种\",{\"1\":{\"897\":1,\"5515\":1}}],[\"动态代理可以直接使用jdk的proxy类或第三方框架\",{\"1\":{\"3956\":1}}],[\"动态代理可以通过参数不同\",{\"1\":{\"3954\":1}}],[\"动态代理更优秀\",{\"1\":{\"915\":1,\"5533\":1}}],[\"动态代理更加灵活\",{\"1\":{\"887\":1,\"893\":1,\"5505\":1,\"5511\":1}}],[\"动态代理是利用jdk的proxy类或第三方库在运行时动态生成目标类的代理对象\",{\"1\":{\"3952\":1}}],[\"动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用\",{\"1\":{\"914\":1,\"5532\":1}}],[\"动态代理是在运行时动态生成类字节码\",{\"1\":{\"894\":1,\"5512\":1}}],[\"动态代理只能代理实现了接口的类或者直接代理接口\",{\"1\":{\"914\":1,\"5532\":1}}],[\"动态代理对比\",{\"0\":{\"913\":1,\"5531\":1}}],[\"动态代理和反射机制实现的\",{\"1\":{\"4953\":1}}],[\"动态代理和\",{\"0\":{\"913\":1,\"5531\":1}}],[\"动态代理有一个最致命的问题是其只能代理实现了接口的类\",{\"1\":{\"906\":1,\"5524\":1}}],[\"动态代理等等\",{\"1\":{\"897\":1,\"5515\":1}}],[\"动态代理\",{\"0\":{\"5510\":1},\"1\":{\"897\":1,\"908\":2,\"3972\":1,\"5515\":1,\"5526\":2}}],[\"动态代理在我们日常开发中使用的相对较少\",{\"1\":{\"896\":1,\"5514\":1}}],[\"动态代理机制来避免\",{\"1\":{\"907\":1,\"5525\":1}}],[\"动态代理机制中\",{\"1\":{\"899\":1,\"909\":1,\"5517\":1,\"5527\":1}}],[\"动态代理机制\",{\"0\":{\"898\":1,\"905\":1,\"5516\":1,\"5523\":1},\"1\":{\"893\":1,\"5511\":1}}],[\"动态扩展需要的内存分配以及数组复制开销可以被平摊\",{\"1\":{\"762\":1}}],[\"动态数组是可以进行扩容操作的\",{\"1\":{\"629\":1}}],[\"动态性\",{\"1\":{\"290\":1}}],[\"动态链接\",{\"1\":{\"213\":1}}],[\"换句话说\",{\"1\":{\"591\":1,\"4202\":1}}],[\"人家rabbitmq早早的就实现了自我管理\",{\"1\":{\"4567\":1}}],[\"人\",{\"1\":{\"592\":1,\"3253\":1,\"6858\":1}}],[\"人类很可能想不清楚\",{\"1\":{\"590\":1}}],[\"人无再少年\",{\"1\":{\"1\":1}}],[\"毛病不大\",{\"1\":{\"589\":1}}],[\"听到你用了threadlocal\",{\"1\":{\"4373\":1}}],[\"听起来似乎说\",{\"1\":{\"589\":1}}],[\"听过无数遍\",{\"1\":{\"580\":1}}],[\"车里有一台发动机\",{\"1\":{\"585\":1}}],[\"有恢复迹象\",{\"1\":{\"6139\":1}}],[\"有影响的只有引用类型数据\",{\"1\":{\"5112\":1}}],[\"有字母数字下划线大小写等乱七八糟各种要求\",{\"1\":{\"5054\":1}}],[\"有选举权和被选举权\",{\"1\":{\"4633\":1,\"6176\":1}}],[\"有sink\",{\"1\":{\"4511\":1,\"6130\":1}}],[\"有利于提高开发效率\",{\"1\":{\"4496\":1,\"6126\":1}}],[\"有利于资源重复利用\",{\"1\":{\"4496\":1,\"6126\":1}}],[\"有这么高吗\",{\"1\":{\"4430\":1}}],[\"有2\",{\"1\":{\"4356\":1}}],[\"有获得过奖学金吗\",{\"1\":{\"4336\":1,\"7161\":1}}],[\"有自己写过代码吗\",{\"0\":{\"4211\":1}}],[\"有可能会造成系统创建大量同类线程而导致消耗完内存或者\",{\"1\":{\"3908\":1,\"6055\":1}}],[\"有可变长的\",{\"1\":{\"2513\":1}}],[\"有公平锁\",{\"1\":{\"3787\":1,\"5798\":1}}],[\"有时甚至只用这些命令就能定位到问题代码的位置\",{\"1\":{\"3593\":1}}],[\"有几个可能的原因项目中使用redis而不是kafka来实现延迟任务\",{\"1\":{\"4862\":1}}],[\"有几个哈希函数得到几个哈希值\",{\"1\":{\"3258\":1,\"6863\":1}}],[\"有几点要注意\",{\"1\":{\"3572\":1}}],[\"有物理内存可以共享才行\",{\"1\":{\"3471\":1}}],[\"有没有参加过团体活动\",{\"1\":{\"4327\":1,\"7152\":1}}],[\"有没有写设计文档\",{\"0\":{\"4210\":1}}],[\"有没有在linux部署过项目\",{\"0\":{\"4077\":1}}],[\"有没有其他办法呢\",{\"1\":{\"3697\":1,\"5866\":1}}],[\"有没有感觉布隆过滤器就是我们想要找的那个\",{\"1\":{\"3253\":1,\"6858\":1}}],[\"有没有一种办法可以让你不修改代码呢\",{\"1\":{\"509\":1,\"5397\":1}}],[\"有两个关键点\",{\"1\":{\"3242\":1}}],[\"有两种数据保存策略\",{\"1\":{\"1448\":1,\"6896\":1}}],[\"有哨兵集群共同决定redis节点是否下线\",{\"1\":{\"3205\":1}}],[\"有的数据库只实现了其中几种隔离级别\",{\"1\":{\"3009\":1,\"6681\":1}}],[\"有的\",{\"1\":{\"2866\":1,\"6538\":1}}],[\"有拥塞控制和流量控制机制\",{\"1\":{\"2492\":1}}],[\"有什么理由还升http\",{\"1\":{\"6994\":1}}],[\"有什么收获\",{\"0\":{\"3934\":1}}],[\"有什么用\",{\"0\":{\"3755\":1,\"5987\":1}}],[\"有什么缺陷\",{\"1\":{\"2364\":1}}],[\"有什么区别呢\",{\"0\":{\"2479\":1},\"1\":{\"2406\":1}}],[\"有什么区别\",{\"0\":{\"2218\":1,\"2727\":1,\"6396\":1,\"7060\":1,\"7065\":1,\"7070\":1,\"7075\":1}}],[\"有哪些解决办法\",{\"0\":{\"6853\":1,\"6871\":1,\"6882\":1}}],[\"有哪些区别\",{\"0\":{\"2305\":1}}],[\"有哪些常用的\",{\"0\":{\"1347\":1,\"5672\":1}}],[\"有变化就不用在判断\",{\"1\":{\"2247\":1}}],[\"有其中一个不为1都不行\",{\"1\":{\"2165\":1}}],[\"有一台部署的服务器\",{\"0\":{\"4218\":1}}],[\"有一定的误判率\",{\"1\":{\"2156\":1}}],[\"有一批帖子\",{\"0\":{\"2059\":1,\"5764\":1}}],[\"有一个进程pid\",{\"1\":{\"4412\":1}}],[\"有一个服务中心\",{\"0\":{\"4216\":1}}],[\"有一个简单并且适用面比较广的公式\",{\"1\":{\"3896\":1,\"6043\":1}}],[\"有一个叫慢启动门限\",{\"1\":{\"2682\":1}}],[\"有一个开发工具\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"有一个是支持传入initialcapacity的\",{\"1\":{\"979\":1}}],[\"有一个\",{\"1\":{\"584\":1,\"2473\":1,\"2521\":1}}],[\"有些情况下我们反而希望把很多次锁的请求合并成一个请求\",{\"1\":{\"3810\":1,\"5821\":1}}],[\"有些伙伴可能有疑惑\",{\"1\":{\"2055\":1,\"5760\":1}}],[\"有些场景下\",{\"1\":{\"732\":1}}],[\"有名管道虽然可以提供给任意关系的进程使用\",{\"1\":{\"3472\":1}}],[\"有名管道可以长期存在于系统之中\",{\"1\":{\"3468\":1}}],[\"有名管道也是半双工的通信方式\",{\"1\":{\"3461\":1}}],[\"有名管道以磁盘文件的方式存在\",{\"1\":{\"1970\":1,\"6251\":1}}],[\"有名管道严格遵循\",{\"1\":{\"1970\":1,\"6251\":1}}],[\"有名管道\",{\"1\":{\"1970\":1,\"3461\":1,\"6251\":1}}],[\"有新进程进入较高优先级的队列\",{\"1\":{\"1942\":1}}],[\"有关内存地址空间或虚拟地址空间的信息\",{\"1\":{\"1870\":1}}],[\"有所不同\",{\"1\":{\"1801\":1,\"6307\":1}}],[\"有事件发生时\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"有多个consumer去消费\",{\"1\":{\"1505\":1,\"6960\":1}}],[\"有3个consumer\",{\"1\":{\"1491\":1,\"6943\":1}}],[\"有3个topic\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"有4个topic\",{\"1\":{\"1490\":1,\"6942\":1}}],[\"有了彩虹表\",{\"1\":{\"5054\":1}}],[\"有了解过吗\",{\"0\":{\"4230\":1}}],[\"有了自适应自旋\",{\"1\":{\"3827\":1}}],[\"有了这两个\",{\"1\":{\"1704\":1}}],[\"有了\",{\"1\":{\"1674\":1}}],[\"有了消息队列\",{\"1\":{\"1410\":1}}],[\"有了它\",{\"1\":{\"1348\":1,\"5673\":1}}],[\"有了二级缓存都能解决\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"有了二级缓存其实这个事处理起来就容易了\",{\"1\":{\"1277\":1,\"5619\":1}}],[\"有了同步块\",{\"1\":{\"859\":1,\"5489\":1}}],[\"有人可能要问了\",{\"1\":{\"3677\":1,\"5846\":1}}],[\"有人认为\",{\"1\":{\"1049\":1}}],[\"有人也并不建议使用\",{\"1\":{\"624\":1}}],[\"有符号数用最高位作为符号位\",{\"1\":{\"1044\":1}}],[\"有顺序\",{\"1\":{\"730\":1}}],[\"有序集合比较典型的使用场景就是排行榜\",{\"1\":{\"3138\":1,\"6794\":1}}],[\"有序集合\",{\"0\":{\"3131\":1,\"6787\":1},\"1\":{\"3094\":1,\"6750\":1}}],[\"有序的\",{\"1\":{\"2459\":1}}],[\"有序组装成\",{\"1\":{\"2362\":1}}],[\"有序\",{\"1\":{\"723\":1}}],[\"有如下特点\",{\"1\":{\"714\":1,\"768\":1}}],[\"有\",{\"1\":{\"681\":1,\"2972\":1,\"3697\":1,\"5866\":1,\"6644\":1}}],[\"有且仅有一个特定的称为根\",{\"1\":{\"646\":1}}],[\"猫是一个动物\",{\"1\":{\"582\":1}}],[\"话不多说\",{\"1\":{\"564\":1,\"785\":1,\"2398\":1,\"5088\":1}}],[\"链表的前半部分\",{\"1\":{\"1711\":1}}],[\"链表的性能是远远低于动态数组的\",{\"1\":{\"631\":1}}],[\"链表上划分来\",{\"1\":{\"1710\":1}}],[\"链表后\",{\"1\":{\"1704\":1}}],[\"链表前排的位置\",{\"1\":{\"1695\":1}}],[\"链表头部\",{\"1\":{\"1694\":1}}],[\"链表呢\",{\"0\":{\"626\":1}}],[\"链表\",{\"0\":{\"557\":1,\"5450\":1},\"1\":{\"1697\":3,\"1701\":3}}],[\"链接文件\",{\"1\":{\"3509\":1}}],[\"链接数\",{\"1\":{\"3500\":1}}],[\"链接\",{\"1\":{\"19\":1,\"46\":1,\"5132\":1,\"5159\":1}}],[\"同城容灾\",{\"1\":{\"4732\":1}}],[\"同财务相关的金额类数据必须使用\",{\"0\":{\"6723\":1},\"1\":{\"3072\":1}}],[\"同一局域网内的\",{\"0\":{\"7032\":1},\"1\":{\"7030\":1}}],[\"同一项目的不同模块不同功能互相抢占资源\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"同一个sqlsession查询过的数据会被缓存\",{\"1\":{\"4070\":1}}],[\"同一个数据经过三个不同的哈希函数获得不同的存储位置\",{\"1\":{\"2165\":1}}],[\"同一个进程内的线程切换比进程切换快\",{\"1\":{\"1907\":1}}],[\"同一个\",{\"1\":{\"1441\":1,\"4141\":1}}],[\"同一端出\",{\"1\":{\"616\":1}}],[\"同时还实现了二进制分帧\",{\"1\":{\"6984\":1}}],[\"同时还有一大缺点\",{\"1\":{\"2271\":1}}],[\"同时作为消息中间件异步消费任务\",{\"1\":{\"4663\":1,\"7182\":1}}],[\"同时会在本地执行该消息\",{\"1\":{\"4606\":1}}],[\"同时集群中已经有过半的机器与该\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"同时通知所有其他结点提交该操作\",{\"1\":{\"4587\":1}}],[\"同时提高了系统的可维护性\",{\"1\":{\"4180\":1}}],[\"同时开启rpc服务器监听服务请求\",{\"1\":{\"3985\":1}}],[\"同时这样对数据库性能开销影响也很大\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"同时创建的localvariable对象也不会释放\",{\"1\":{\"3773\":1}}],[\"同时加\",{\"1\":{\"3695\":1,\"5864\":1}}],[\"同时阻塞该线程\",{\"1\":{\"3640\":1,\"5881\":1}}],[\"同时执行的进程数最多不超过cpu数目\",{\"1\":{\"3437\":1,\"3438\":1}}],[\"同时选出sentinel\",{\"1\":{\"3220\":1}}],[\"同时把\",{\"1\":{\"2527\":1}}],[\"同时对\",{\"1\":{\"2459\":1}}],[\"同时天然具有跨平台的优越性\",{\"1\":{\"2269\":1}}],[\"同时数据定位算法不变\",{\"1\":{\"2035\":1}}],[\"同时也我们很容易得知管道里的数据已经被另一个进程读取了\",{\"1\":{\"1951\":1}}],[\"同时优先级越高时间片越短\",{\"1\":{\"1937\":1,\"1940\":1}}],[\"同时设置了\",{\"1\":{\"1455\":1,\"6903\":1}}],[\"同时\",{\"1\":{\"1434\":1,\"1949\":1,\"2265\":1,\"4762\":1,\"7040\":1}}],[\"同理\",{\"1\":{\"930\":1,\"2010\":1,\"2012\":1,\"5447\":1}}],[\"同步更新数据\",{\"1\":{\"4596\":1,\"6180\":1}}],[\"同步队列\",{\"1\":{\"3879\":1,\"6034\":1}}],[\"同步队列中\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"同步语句块的实现使用的是\",{\"1\":{\"3737\":1,\"3750\":1,\"5969\":1,\"5982\":1}}],[\"同步语句块的情况\",{\"0\":{\"3733\":1,\"5965\":1}}],[\"同步到到磁盘\",{\"1\":{\"3168\":1,\"6824\":1}}],[\"同步一次\",{\"1\":{\"3167\":1,\"6823\":1}}],[\"同步硬盘操作通常依赖于系统调度机制\",{\"1\":{\"3167\":1,\"6823\":1}}],[\"同步保存操作\",{\"1\":{\"3150\":1,\"6806\":1}}],[\"同步双方初始序列号\",{\"1\":{\"2548\":1}}],[\"同步的关系\",{\"1\":{\"1985\":1,\"6244\":1}}],[\"同步阻塞\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"同步和异步组合提交\",{\"1\":{\"1606\":1,\"1614\":1}}],[\"同步提交会进行重试直到成功或者最后抛出异常给应用\",{\"1\":{\"1615\":1}}],[\"同步提交当前最新的偏移量\",{\"1\":{\"1610\":1}}],[\"同步提交\",{\"1\":{\"1604\":1,\"1607\":1}}],[\"同步方式\",{\"1\":{\"1532\":1}}],[\"同步方法的锁的作用域就是整个方法\",{\"1\":{\"837\":1}}],[\"同步发送\",{\"1\":{\"1518\":1,\"1542\":1}}],[\"同步发送模式\",{\"1\":{\"1516\":1,\"1517\":1}}],[\"同步就是整个处理过程顺序执行\",{\"1\":{\"1372\":1}}],[\"同步\",{\"1\":{\"1372\":1,\"3810\":1,\"5821\":1}}],[\"同步块的⽬的与之前相同\",{\"1\":{\"859\":1,\"5489\":1}}],[\"同步块可以更加精确的控制锁的作用域\",{\"1\":{\"837\":1}}],[\"同步代码块可以选择对哪个对象加锁\",{\"1\":{\"838\":1}}],[\"同步代码块在锁定的范围上可能比同步方法要小\",{\"1\":{\"836\":1}}],[\"同步代码块和同步方法的区别\",{\"1\":{\"834\":1}}],[\"同步处理\",{\"1\":{\"800\":1}}],[\"同学的看法\",{\"1\":{\"639\":1}}],[\"同样作为消息队列\",{\"1\":{\"4567\":1}}],[\"同样作为一种特殊的线性数据结构\",{\"1\":{\"611\":1}}],[\"同样会降低查询性能\",{\"1\":{\"2834\":1,\"6506\":1}}],[\"同样会导致大量缓存在同一时间失效\",{\"1\":{\"2012\":1}}],[\"同样也是先尝试获取资源\",{\"1\":{\"1999\":1}}],[\"同样具有状态之间的转换关系\",{\"1\":{\"1902\":1}}],[\"同样地\",{\"1\":{\"1265\":1}}],[\"同样为了避免不太好的key的hashcode设计\",{\"1\":{\"1077\":1}}],[\"同样可以构造一个实例\",{\"1\":{\"531\":1,\"5419\":1}}],[\"同https\",{\"1\":{\"556\":1,\"558\":1,\"560\":1,\"642\":1,\"711\":1}}],[\"七层模型\",{\"0\":{\"2723\":1,\"7018\":1},\"1\":{\"7019\":1}}],[\"七\",{\"0\":{\"554\":1,\"6226\":1},\"1\":{\"765\":1}}],[\"参考了\",{\"1\":{\"6989\":1}}],[\"参考redis命令\",{\"1\":{\"4910\":1}}],[\"参考\",{\"1\":{\"553\":1,\"640\":1,\"882\":1,\"1081\":1,\"1119\":1,\"1153\":1,\"1190\":1,\"1310\":1,\"1368\":1,\"1393\":1,\"1493\":1,\"1511\":1,\"1522\":1,\"2036\":1,\"2136\":1,\"2144\":1,\"2189\":1,\"3059\":1,\"3063\":1,\"3390\":1,\"3660\":1,\"3702\":1,\"3727\":1,\"3753\":1,\"3846\":1,\"3930\":1,\"4590\":1,\"4756\":1,\"5103\":1,\"5115\":1,\"5430\":1,\"5640\":1,\"5701\":1,\"5734\":1,\"5929\":1,\"5963\":1,\"5985\":1,\"6074\":1,\"6283\":1,\"6392\":1,\"6714\":1,\"6946\":1,\"6955\":1,\"6969\":1}}],[\"参数处理\",{\"1\":{\"4961\":1}}],[\"参数占位符\",{\"1\":{\"4076\":1}}],[\"参数\",{\"1\":{\"3572\":1,\"3576\":1,\"3856\":1,\"4942\":1,\"6010\":1}}],[\"参数设置的\",{\"1\":{\"3157\":1,\"6813\":1}}],[\"参数开启\",{\"1\":{\"3153\":1,\"6809\":1}}],[\"参数的时间单位\",{\"1\":{\"3864\":1,\"6018\":1}}],[\"参数的时候\",{\"1\":{\"2868\":1,\"6540\":1}}],[\"参数的选择说明\",{\"1\":{\"1552\":1}}],[\"参数不能为0\",{\"1\":{\"475\":1,\"5370\":1}}],[\"参数来设置线程数\",{\"1\":{\"352\":1}}],[\"参数类型\",{\"1\":{\"285\":1}}],[\"无锁\",{\"0\":{\"5804\":1}}],[\"无锁并不会对资源锁定\",{\"1\":{\"3793\":1,\"5805\":1}}],[\"无耦合\",{\"1\":{\"4478\":1,\"6111\":1}}],[\"无缝切换\",{\"1\":{\"4052\":1}}],[\"无界队列\",{\"1\":{\"3878\":1,\"6033\":1}}],[\"无须复制\",{\"1\":{\"3474\":1}}],[\"无间隔\",{\"1\":{\"2453\":1}}],[\"无状态的坏处\",{\"1\":{\"2274\":1}}],[\"无状态的好处\",{\"1\":{\"2273\":1}}],[\"无状态双刃剑\",{\"1\":{\"2272\":1}}],[\"无状态\",{\"1\":{\"2271\":1}}],[\"无论\",{\"1\":{\"6989\":1}}],[\"无论是浅拷贝还是深拷贝\",{\"1\":{\"5112\":1}}],[\"无论是用取模运算还是位运算都无法直接解决冲突较大的问题\",{\"1\":{\"1032\":1}}],[\"无论操作源对象还是目标对象都对另一个没有影响\",{\"1\":{\"5111\":1}}],[\"无论操作多少次\",{\"1\":{\"2223\":1}}],[\"无论读操作还是写操作\",{\"1\":{\"3829\":1,\"5945\":1}}],[\"无论方法正常执行完毕还是抛出异常\",{\"1\":{\"3732\":1}}],[\"无论的网络链路中出现了怎样的链路变化\",{\"1\":{\"2458\":1}}],[\"无名管道简单方便\",{\"1\":{\"3472\":1}}],[\"无名管道只能用在具有家族联系的进程之间\",{\"1\":{\"3468\":1}}],[\"无名管道是一种非永久性的管道通信机构\",{\"1\":{\"3468\":1}}],[\"无名管道\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"无疑极大地减少了开发和联调的工作量\",{\"1\":{\"1410\":1}}],[\"无顺序\",{\"1\":{\"732\":1}}],[\"无左孩子\",{\"1\":{\"683\":1}}],[\"无需引入额外的组件\",{\"1\":{\"4866\":1}}],[\"无需每个服务器单独认证\",{\"1\":{\"4062\":1}}],[\"无需重复登录\",{\"1\":{\"4054\":1}}],[\"无需多一个字段去记录\",{\"1\":{\"2513\":1}}],[\"无需知道\",{\"1\":{\"609\":1}}],[\"无需关注工厂类\",{\"1\":{\"551\":1,\"5429\":1}}],[\"无法实现虚拟主机\",{\"1\":{\"7064\":1}}],[\"无法回收\",{\"1\":{\"3587\":1}}],[\"无法直接引用这么多\",{\"1\":{\"3489\":1}}],[\"无法使用覆盖索引\",{\"1\":{\"3085\":1,\"6737\":1}}],[\"无法成功插入\",{\"1\":{\"3013\":1,\"6685\":1}}],[\"无法得到未知\",{\"1\":{\"2578\":1}}],[\"无法防止历史连接的建立\",{\"1\":{\"2558\":1}}],[\"无法证明报文的完整性\",{\"1\":{\"2287\":1}}],[\"无法获取元素本身\",{\"1\":{\"2157\":1}}],[\"无法获取继承下来的方法\",{\"1\":{\"543\":1,\"5425\":1}}],[\"无法获取继承下来的变量\",{\"1\":{\"538\":1,\"5423\":1}}],[\"无法充分利用\",{\"1\":{\"1829\":1,\"6358\":1}}],[\"无法保证先读到消息的consumer一定先完成操作\",{\"1\":{\"1505\":1,\"6960\":1}}],[\"无法被父类加载器加载的类最终会通过这个方法被加载\",{\"1\":{\"436\":1,\"5327\":1}}],[\"<ip\",{\"1\":{\"7028\":1}}],[\"<image\",{\"1\":{\"3307\":1,\"3319\":1}}],[\"<image>\",{\"1\":{\"3307\":2}}],[\"<wmnews>lambdaupdate\",{\"1\":{\"4979\":1}}],[\"<wmsensitive>lambdaquery\",{\"1\":{\"4857\":1}}],[\"<select\",{\"1\":{\"4748\":1}}],[\"<sys\",{\"1\":{\"1797\":1,\"6302\":1}}],[\"<mapper\",{\"1\":{\"4748\":1}}],[\"<br>\",{\"1\":{\"3857\":4,\"6011\":4}}],[\"<bean>\",{\"1\":{\"1186\":2}}],[\"<heap\",{\"1\":{\"3575\":1}}],[\"<pid>\",{\"1\":{\"3566\":1,\"3596\":1,\"3600\":1,\"3604\":1,\"3608\":1,\"3629\":1}}],[\"<0x00000006c7c0b060>\",{\"1\":{\"3527\":1}}],[\"<0x00000006c7c0c380>\",{\"1\":{\"3527\":3}}],[\"<0x00000006c7c27f50>\",{\"1\":{\"3527\":1}}],[\"<container\",{\"1\":{\"3307\":1}}],[\"<container>\",{\"1\":{\"3307\":1}}],[\"<cache\",{\"1\":{\"1140\":1}}],[\"<字段列表>\",{\"0\":{\"6735\":1},\"1\":{\"3083\":1,\"3086\":1,\"6738\":1}}],[\"<version>0\",{\"1\":{\"2174\":1}}],[\"<version>30\",{\"1\":{\"2174\":1}}],[\"<artifactid>cuckoofilter<\",{\"1\":{\"2174\":1}}],[\"<artifactid>guava<\",{\"1\":{\"2174\":1}}],[\"<artifactid>spring\",{\"1\":{\"1337\":1,\"4545\":1,\"5661\":1}}],[\"<groupid>com\",{\"1\":{\"2174\":2}}],[\"<groupid>org\",{\"1\":{\"1337\":1,\"4545\":1,\"5661\":1}}],[\"<=\",{\"1\":{\"1966\":1,\"2819\":1,\"3857\":2,\"6011\":2,\"6491\":1}}],[\"<dependency>\",{\"1\":{\"1337\":1,\"2174\":2,\"4545\":1,\"5661\":1}}],[\"<<\",{\"1\":{\"971\":1,\"1062\":4}}],[\"<tt>object<\",{\"1\":{\"787\":1}}],[\"<tt>arraylist<\",{\"1\":{\"787\":2}}],[\"<\",{\"1\":{\"541\":1,\"543\":1,\"546\":1,\"548\":1,\"634\":2,\"816\":1,\"1337\":1,\"1474\":1,\"1625\":1,\"1965\":1,\"2174\":2,\"2683\":1,\"2819\":1,\"3046\":1,\"3772\":1,\"3857\":6,\"4545\":1,\"4748\":3,\"4979\":1,\"5425\":2,\"5427\":2,\"5661\":1,\"6011\":6,\"6377\":1,\"6491\":1,\"6923\":1}}],[\"该帧已经从主机\",{\"1\":{\"7052\":1}}],[\"该过程与同一局域网内的\",{\"1\":{\"7049\":1}}],[\"该分组的目的地只有一个\",{\"1\":{\"7040\":1}}],[\"该查询分组对当前设备无效\",{\"1\":{\"7039\":1}}],[\"该条目将被丢弃\",{\"1\":{\"7028\":1}}],[\"该映射关系以\",{\"1\":{\"7028\":1}}],[\"该去往何处\",{\"1\":{\"7026\":1}}],[\"该对象包括了查询的结果列表以及有关分页信息的元数据\",{\"1\":{\"4963\":1}}],[\"该对象拥有simpleapplicationeventmulticaster属性\",{\"1\":{\"1382\":1}}],[\"该外部查询会限制结果集的范围\",{\"1\":{\"4958\":1}}],[\"该拦截器是否要拦截某个\",{\"1\":{\"4943\":1}}],[\"该项目由用户端和自媒体端组成\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"该协议能够很好地支持\",{\"1\":{\"4629\":1,\"6172\":1}}],[\"该提案n1最终需要被抛弃掉\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"该事务就会被提交\",{\"1\":{\"4594\":1}}],[\"该指令就是告诉\",{\"1\":{\"4141\":1}}],[\"该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池\",{\"1\":{\"3904\":1,\"6051\":1}}],[\"该标识指明了该方法是一个同步方法\",{\"1\":{\"3747\":1,\"3751\":1,\"5979\":1,\"5983\":1}}],[\"该命令中\",{\"1\":{\"3528\":1}}],[\"该工具既可以安装到\",{\"1\":{\"3574\":1}}],[\"该工具需要16进制的线程id进行筛选\",{\"1\":{\"3524\":1}}],[\"该工具是为了解决数据分析任务而创建的\",{\"1\":{\"3517\":1}}],[\"该组件存储\",{\"1\":{\"3329\":1}}],[\"该组件包含\",{\"1\":{\"3328\":1}}],[\"该组件执行构建和运行操作以与\",{\"1\":{\"3327\":1}}],[\"该数据\",{\"1\":{\"3265\":1,\"3272\":1,\"6870\":1,\"6877\":1}}],[\"该数据结构所容纳的所有元素均包含一个指针\",{\"1\":{\"1005\":1}}],[\"该情况\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"该表的索引\",{\"1\":{\"2797\":1,\"6469\":1}}],[\"该恢复过程已经结束\",{\"1\":{\"2706\":1}}],[\"该探测报文包含的数据非常少\",{\"1\":{\"2635\":1}}],[\"该报文也不包含应用层数据\",{\"1\":{\"2528\":1}}],[\"该报文不包含应用层数据\",{\"1\":{\"2527\":1}}],[\"该位为\",{\"1\":{\"2447\":1,\"2448\":1,\"2449\":1,\"2450\":1}}],[\"该随机数会被服务器公钥加密\",{\"1\":{\"2333\":1}}],[\"该字段的值就是\",{\"1\":{\"2253\":1}}],[\"该消息队列才会被真正的删除\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"该线程池中的线程数量始终不变\",{\"1\":{\"3901\":1,\"6048\":1}}],[\"该线程对副本的操作\",{\"1\":{\"3709\":1,\"5909\":1}}],[\"该线程是否正在独占资源\",{\"1\":{\"3653\":1,\"5896\":1}}],[\"该线程结束生命周期\",{\"1\":{\"1858\":1,\"6234\":1}}],[\"该线程会释放占用的所有资源\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"该状态的线程位于\",{\"1\":{\"1854\":1,\"6230\":1}}],[\"该系统调用\",{\"1\":{\"1800\":1,\"6305\":1}}],[\"该页面的访问计数器就累加\",{\"1\":{\"1745\":1}}],[\"该算法也有两种处理优先级高的方法\",{\"1\":{\"1931\":1}}],[\"该算法的特点\",{\"1\":{\"1761\":1}}],[\"该算法的思路是\",{\"1\":{\"1739\":1}}],[\"该算法假设已经很久没有使用的页面很有可能在未来较长的一段时间内仍然不会被使用\",{\"1\":{\"1733\":1}}],[\"该算法实现需要计算内存中每个逻辑页面的\",{\"1\":{\"1727\":1}}],[\"该\",{\"1\":{\"1520\":1,\"7038\":1}}],[\"该节点上的\",{\"1\":{\"1443\":1}}],[\"该类被标记为\",{\"1\":{\"1396\":1}}],[\"该类加载器才会尝试去加载\",{\"1\":{\"445\":1,\"5338\":1}}],[\"该注解可以被标注在方法上\",{\"1\":{\"1371\":1}}],[\"该注解通过springfactoriesloader会加载classpath下meta\",{\"1\":{\"1300\":1}}],[\"该模块将在生产环境中被禁用\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"该文件真正内容的指向\",{\"1\":{\"3485\":1}}],[\"该文件用于关联配置中心的配置\",{\"1\":{\"1334\":1}}],[\"该文件里配置了所有需要被创建的spring容器中的bean\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"该引导程序会先加载自动配置类和其它一些关键类\",{\"1\":{\"1302\":1}}],[\"该级别可以防止脏读\",{\"1\":{\"1235\":1,\"5587\":1}}],[\"该方法返回一个可根据实际情况调整线程数量的线程池\",{\"1\":{\"3903\":1,\"6050\":1}}],[\"该方法返回一个只有一个线程的线程池\",{\"1\":{\"3902\":1,\"6049\":1}}],[\"该方法返回一个固定线程数量的线程池\",{\"1\":{\"3901\":1,\"6048\":1}}],[\"该方法主要是将hash生成的整型转换成链表数组中的下标\",{\"1\":{\"1014\":1}}],[\"该方法主要是将object转换成一个整型\",{\"1\":{\"1013\":1}}],[\"该方法会返回一个整数\",{\"1\":{\"1011\":1}}],[\"该方法必须被public修饰\",{\"1\":{\"541\":1,\"5425\":1}}],[\"该接口比list提供了更多的方法\",{\"1\":{\"782\":1}}],[\"该构造器必须被public修饰\",{\"1\":{\"546\":1,\"5427\":1}}],[\"该变量必须被public修饰\",{\"1\":{\"536\":1,\"5423\":1}}],[\"嘤~\",{\"1\":{\"524\":1,\"5412\":1}}],[\"拿到的票数同时还需要大于等于哨兵配置文件中的\",{\"1\":{\"3213\":1}}],[\"拿到半数以上的赞成票\",{\"1\":{\"3212\":1}}],[\"拿到\",{\"1\":{\"524\":1,\"5412\":1}}],[\"三元组的形式存储\",{\"1\":{\"7028\":1}}],[\"三间接引用\",{\"1\":{\"3489\":1}}],[\"三种方式的特点\",{\"1\":{\"3472\":1}}],[\"三种方法\",{\"1\":{\"518\":1,\"5406\":1}}],[\"三个架构组件包括\",{\"1\":{\"3326\":1}}],[\"三次握手过程\",{\"1\":{\"2643\":1,\"7072\":1}}],[\"三次握手过程是怎样的\",{\"0\":{\"2524\":1},\"1\":{\"2409\":1}}],[\"三次握手就已经理论上最少可靠连接建立\",{\"1\":{\"2559\":1}}],[\"三次握手的延迟\",{\"1\":{\"7072\":1}}],[\"三次握手的时候\",{\"1\":{\"2579\":1}}],[\"三次握手的首要原因是为了防止旧的重复连接初始化造成混乱\",{\"1\":{\"2539\":1}}],[\"三次握手的过程如下图\",{\"1\":{\"2525\":1}}],[\"三次握手之后\",{\"1\":{\"2307\":1}}],[\"三次握手之后便可进行\",{\"1\":{\"2307\":1}}],[\"三次握手\",{\"1\":{\"2292\":1}}],[\"三台服务器\",{\"1\":{\"2025\":1}}],[\"三级缓存并不是非必须不可\",{\"1\":{\"1287\":1,\"5629\":1}}],[\"三级缓存主要是解决\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"三级缓存解决什么\",{\"1\":{\"1280\":1,\"5622\":1}}],[\"三级缓存\",{\"0\":{\"1132\":1,\"5711\":1,\"5721\":1}}],[\"三\",{\"0\":{\"712\":1,\"4323\":1,\"4395\":1,\"5421\":1,\"5787\":1,\"6988\":1,\"6990\":1,\"7148\":1},\"1\":{\"516\":1,\"5404\":1}}],[\"二进制帧更加紧凑和高效\",{\"1\":{\"7067\":1}}],[\"二进制帧\",{\"1\":{\"7067\":1}}],[\"二进制格式\",{\"1\":{\"2361\":1}}],[\"二面\",{\"0\":{\"4286\":1,\"7111\":1}}],[\"二分查找\",{\"1\":{\"4001\":1}}],[\"二者有以下区别\",{\"1\":{\"4740\":1}}],[\"二者并不冲突\",{\"1\":{\"2521\":1}}],[\"二者跨度较大\",{\"1\":{\"930\":1,\"5447\":1}}],[\"二级索引\",{\"0\":{\"6458\":1},\"1\":{\"2776\":1,\"2789\":1,\"2805\":1,\"6445\":1,\"6459\":1,\"6477\":1}}],[\"二级页表\",{\"1\":{\"1664\":2}}],[\"二级缓存对整个mybatis系统都有效\",{\"1\":{\"4072\":1}}],[\"二级缓存是sqlsessionfactory级别\",{\"1\":{\"4071\":1}}],[\"二级缓存能解决吗\",{\"1\":{\"1275\":1,\"5617\":1}}],[\"二级缓存的执行流程\",{\"1\":{\"1152\":1,\"5732\":1}}],[\"二级缓存的生命周期和应用同步\",{\"1\":{\"1149\":1,\"5729\":1}}],[\"二级缓存进行增删改操作也会刷新二级缓存\",{\"1\":{\"1151\":1,\"5731\":1}}],[\"二级缓存总是默认开启的\",{\"1\":{\"1150\":1,\"5730\":1}}],[\"二级缓存cache中readonly属性如果为false\",{\"1\":{\"1148\":1,\"5728\":1}}],[\"二级缓存需要手动配置\",{\"1\":{\"1146\":1,\"5726\":1}}],[\"二级缓存作用域是针对mapper进行缓存\",{\"1\":{\"1145\":1,\"5725\":1}}],[\"二级缓存\",{\"0\":{\"1132\":1,\"5711\":1,\"5714\":1}}],[\"二叉搜索树就变为了一个链表\",{\"1\":{\"691\":1,\"5458\":1}}],[\"二叉搜索树bst是有序的\",{\"1\":{\"654\":1}}],[\"二叉树是每个结点最多有两个子树的树结构\",{\"1\":{\"674\":1}}],[\"二叉树\",{\"0\":{\"643\":1,\"5453\":1},\"1\":{\"675\":1,\"4125\":1,\"4126\":1}}],[\"二\",{\"0\":{\"740\":1,\"4308\":1,\"4357\":1,\"5283\":1,\"5413\":1,\"6986\":1,\"7133\":1},\"1\":{\"516\":1,\"556\":1,\"558\":1,\"560\":1,\"642\":1,\"5404\":1}}],[\"常常简单的表述为\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"常规数据\",{\"1\":{\"3105\":1,\"6761\":1}}],[\"常考\",{\"1\":{\"2398\":1}}],[\"常见\",{\"1\":{\"7059\":1}}],[\"常见优化手段\",{\"0\":{\"3064\":1,\"6715\":1}}],[\"常见字段有哪些\",{\"0\":{\"2213\":1}}],[\"常见线上问题的排查方法\",{\"1\":{\"2144\":1}}],[\"常见的非对称加密算法有\",{\"1\":{\"5094\":1}}],[\"常见的非对称加密算法有rsa\",{\"1\":{\"4010\":1}}],[\"常见的一致性算法包括paxos算法\",{\"1\":{\"4579\":1}}],[\"常见的对称加密算法有\",{\"1\":{\"5092\":1}}],[\"常见的对称加密算法有des\",{\"1\":{\"4009\":1}}],[\"常见的对称加密和非对称加密算法\",{\"0\":{\"4008\":1}}],[\"常见的文件类型及其含义有\",{\"1\":{\"3506\":1}}],[\"常见的文件系统包括\",{\"1\":{\"3456\":1}}],[\"常见的\",{\"1\":{\"3445\":1}}],[\"常见的导致索引失效的情况有下面这些\",{\"1\":{\"2842\":1,\"6514\":1}}],[\"常见的状态码有哪些\",{\"0\":{\"2193\":1}}],[\"常见的做法是对缓存项的键进行哈希\",{\"1\":{\"2007\":1}}],[\"常见的磁盘调度算法有\",{\"1\":{\"1747\":1}}],[\"常见的页面置换算法有如下几种\",{\"1\":{\"1719\":1}}],[\"常见的消息队列使用场景有\",{\"1\":{\"1409\":1}}],[\"常见的设计模式\",{\"0\":{\"849\":1,\"4177\":1,\"5479\":1}}],[\"常见的有以下这几个\",{\"1\":{\"515\":1,\"5403\":1}}],[\"常调用返回future\",{\"1\":{\"1375\":1}}],[\"常用口令\",{\"1\":{\"5056\":1}}],[\"常用注解\",{\"0\":{\"1369\":1}}],[\"常用的命令\",{\"0\":{\"3392\":1,\"5736\":1}}],[\"常用的过期数据的删除策略就两个\",{\"1\":{\"3172\":1,\"6830\":1}}],[\"常用的方法就是加锁\",{\"1\":{\"3663\":1,\"5826\":1}}],[\"常用的方法\",{\"0\":{\"1397\":1}}],[\"常用的\",{\"1\":{\"1349\":1,\"5674\":1}}],[\"常用的哈希函数的冲突解决办法中有一种方法叫做链地址法\",{\"1\":{\"1004\":1}}],[\"常用于系统加载时进行信息初始化\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"常量\",{\"1\":{\"398\":1}}],[\"常量池表\",{\"1\":{\"287\":1}}],[\"常量池可以看作是一张表\",{\"1\":{\"285\":1}}],[\"常量池\",{\"1\":{\"282\":1}}],[\"注入到spring\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"注册拦截器\",{\"1\":{\"4945\":1}}],[\"注册中心用什么做的\",{\"0\":{\"4183\":1}}],[\"注册中心和监控中心四部分\",{\"1\":{\"3983\":1}}],[\"注册beanpostprocessor后置处理器\",{\"1\":{\"1388\":1}}],[\"注\",{\"1\":{\"1500\":1,\"6953\":1}}],[\"注意是即时运算出来的值\",{\"1\":{\"5083\":1}}],[\"注意是很大程度避免\",{\"1\":{\"3010\":1,\"6682\":1}}],[\"注意需要转义为\",{\"1\":{\"4075\":1}}],[\"注意full\",{\"1\":{\"3991\":1}}],[\"注意避免冗余索引\",{\"1\":{\"2837\":1,\"6509\":1}}],[\"注意这里为空方法\",{\"1\":{\"1389\":1}}],[\"注意\",{\"1\":{\"528\":1,\"659\":1,\"661\":1,\"783\":1,\"951\":1,\"1001\":1,\"1141\":1,\"1953\":1,\"2248\":1,\"2540\":1,\"3161\":1,\"3384\":1,\"3387\":1,\"5416\":1,\"5720\":1,\"6817\":1}}],[\"注解为\",{\"1\":{\"4859\":1}}],[\"注解的支持\",{\"1\":{\"4534\":1}}],[\"注解\",{\"0\":{\"1370\":1},\"1\":{\"516\":1,\"5404\":1}}],[\"注解等\",{\"1\":{\"511\":1,\"5399\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"115\":1,\"5228\":1}}],[\"比亚迪一面线下hr面\",{\"1\":{\"4441\":1}}],[\"比亚迪\",{\"0\":{\"4440\":1}}],[\"比的博客都是关于什么内容的\",{\"1\":{\"4370\":1}}],[\"比较\",{\"1\":{\"5084\":1}}],[\"比较频繁的话导致\",{\"1\":{\"4669\":1,\"7188\":1}}],[\"比较的是所指向的对象的地址值\",{\"1\":{\"4191\":1}}],[\"比较适合读请求比较多的场景\",{\"1\":{\"4099\":1}}],[\"比较适合大文件的查看\",{\"1\":{\"3415\":1}}],[\"比较典型的例子是\",{\"1\":{\"3621\":1}}],[\"比较多\",{\"1\":{\"3361\":1}}],[\"比较重要的主要有下面\",{\"1\":{\"3089\":1,\"6745\":1}}],[\"比较靠谱的原因\",{\"1\":{\"2515\":1}}],[\"比较严重的缺点就是不安全\",{\"1\":{\"2284\":1}}],[\"比较常见的是一个大数组\",{\"1\":{\"2116\":1}}],[\"比较核心的有\",{\"1\":{\"1411\":1}}],[\"比\",{\"1\":{\"1972\":1,\"2543\":1,\"3897\":1,\"6044\":1,\"6253\":1,\"7078\":1}}],[\"比如内核中有数据需要读\",{\"1\":{\"6277\":1}}],[\"比如内存管理信息\",{\"1\":{\"1905\":1}}],[\"比如一个用户的用户名为18666666666\",{\"1\":{\"5041\":1}}],[\"比如缓存\",{\"1\":{\"4867\":1}}],[\"比如数据库查询和业务运算\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"比如你刚刚消费完消息之后\",{\"1\":{\"4677\":1,\"7196\":1}}],[\"比如文章审核\",{\"1\":{\"4666\":1,\"7185\":1}}],[\"比如文件描述符\",{\"1\":{\"2623\":1}}],[\"比如文件上传下载受限于用户的网络带宽因素\",{\"1\":{\"1419\":1}}],[\"比如对于需要确保强一致性的场景如银行一般会选择保证\",{\"1\":{\"4650\":1,\"6223\":1}}],[\"比如部分节点网络出了问题\",{\"1\":{\"4643\":1,\"6216\":1}}],[\"比如这里我们是三个\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"比如这里如果是quorum=2\",{\"1\":{\"3207\":1}}],[\"比如这个时候我们启动了\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"比如tomcat\",{\"1\":{\"4235\":1}}],[\"比如threadlocal没有正常remove\",{\"1\":{\"2121\":1}}],[\"比如随机1\",{\"1\":{\"4146\":1}}],[\"比如浏览器localstorage\",{\"1\":{\"4058\":1}}],[\"比如用户服务\",{\"1\":{\"4015\":1}}],[\"比如增加到100此循环\",{\"1\":{\"3827\":1}}],[\"比如我们在同一个线程中声明了两个\",{\"1\":{\"3769\":1,\"6000\":1}}],[\"比如需要将\",{\"1\":{\"3695\":1,\"5864\":1}}],[\"比如reentrantreadwritelock\",{\"1\":{\"3637\":1,\"5878\":1}}],[\"比如reentrantlock就是独占锁\",{\"1\":{\"3636\":1,\"5877\":1}}],[\"比如达到了几个\",{\"1\":{\"3597\":1}}],[\"比如查询的数据库\",{\"1\":{\"3249\":1,\"6854\":1}}],[\"比如说此时选\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"比如说\",{\"1\":{\"3156\":1,\"6812\":1,\"7062\":1}}],[\"比如图片\",{\"0\":{\"6718\":1},\"1\":{\"3067\":1,\"3069\":1,\"6720\":1}}],[\"比如下面这个顺序的场景\",{\"1\":{\"2897\":1,\"6569\":1}}],[\"比如下单清空购物车\",{\"0\":{\"2046\":1,\"5751\":1}}],[\"比如全文索引\",{\"1\":{\"2729\":1,\"6398\":1}}],[\"比如cpu\",{\"1\":{\"2139\":1}}],[\"比如高考成绩排序\",{\"0\":{\"2056\":1,\"5761\":1}}],[\"比如如果进程运行时间增加\",{\"1\":{\"1930\":1}}],[\"比如最常见的\",{\"1\":{\"1687\":1}}],[\"比如控制一个页的读写权限\",{\"1\":{\"1638\":1}}],[\"比如硬盘上的\",{\"1\":{\"1636\":1}}],[\"比如上图中4个分区3个消费者的场景\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"比如订单交易等\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"比如实现聊天室等\",{\"1\":{\"1410\":1}}],[\"比如调用bean\",{\"1\":{\"1388\":1}}],[\"比如application\",{\"1\":{\"1383\":1}}],[\"比如健康状况\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"比如返回指定的错误信息\",{\"1\":{\"1319\":1}}],[\"比如mysql的limit语句\",{\"1\":{\"1106\":1}}],[\"比如在上图中\",{\"1\":{\"3560\":1}}],[\"比如在put方法中就有如下实现\",{\"1\":{\"1071\":1}}],[\"比如在方法执行前后做什么事情\",{\"1\":{\"904\":1,\"5522\":1}}],[\"比如在任何一个位置插入一个元素\",{\"1\":{\"620\":1}}],[\"比如接口一旦新增加方法\",{\"1\":{\"890\":1,\"5508\":1}}],[\"比如hashmap有hashset\",{\"1\":{\"726\":1}}],[\"比如\",{\"1\":{\"568\":1,\"588\":1,\"592\":2,\"603\":1,\"625\":1,\"897\":1,\"1032\":1,\"1410\":1,\"1873\":1,\"1980\":1,\"1983\":1,\"2043\":1,\"2265\":1,\"2281\":1,\"2285\":1,\"2286\":1,\"2287\":1,\"2490\":1,\"2614\":1,\"2615\":1,\"2856\":1,\"2857\":1,\"2959\":1,\"2969\":1,\"2972\":1,\"3105\":1,\"3597\":1,\"4562\":1,\"4648\":1,\"5515\":1,\"5748\":1,\"6162\":1,\"6221\":1,\"6239\":1,\"6242\":1,\"6338\":1,\"6528\":1,\"6529\":1,\"6631\":1,\"6641\":1,\"6644\":1,\"6761\":1,\"7058\":1,\"7081\":1,\"7083\":1}}],[\"比如它的属性\",{\"1\":{\"511\":1,\"5399\":1}}],[\"比回收整个java堆中的内存更快更高效\",{\"1\":{\"274\":1}}],[\"于是发送端就会快速地重传\",{\"1\":{\"2696\":1}}],[\"于是发送端就可以根据这个接收端的处理能力来发送数据\",{\"1\":{\"2653\":1}}],[\"于是就会出现丢包现象\",{\"1\":{\"2688\":1}}],[\"于是就会回\",{\"1\":{\"2544\":1}}],[\"于是会导致更大的延迟以及更多的丢包\",{\"1\":{\"2665\":1}}],[\"于是会将该进程唤醒运行\",{\"1\":{\"1966\":1}}],[\"于是转向问权威\",{\"1\":{\"2394\":1,\"7098\":1}}],[\"于是为了减少这一步开销\",{\"1\":{\"1786\":1,\"6290\":1}}],[\"于是相当于每个页表需占用\",{\"1\":{\"1663\":1}}],[\"于是\",{\"1\":{\"506\":1,\"1631\":1,\"1802\":1,\"2667\":1,\"5394\":1,\"6308\":1}}],[\"把时间拉长来看\",{\"1\":{\"6260\":1}}],[\"把之前的异步调用修改为调用延迟任务\",{\"1\":{\"4880\":1,\"7258\":1}}],[\"把自媒体文章上下架放进消息队列\",{\"1\":{\"4662\":1,\"7181\":1}}],[\"把自己的应用放入容器\",{\"1\":{\"3292\":1,\"6081\":1}}],[\"把\",{\"1\":{\"2706\":1,\"4883\":1,\"4887\":1,\"7261\":1,\"7265\":1}}],[\"把所有可能存在的请求的值都存放在布隆过滤器中\",{\"1\":{\"3254\":1,\"6859\":1}}],[\"把所有因等待某事件而处于等待状态的进程链在一起就组成各种阻塞队列\",{\"1\":{\"1875\":1}}],[\"把所有的页面都保存在一个类似钟面的\",{\"1\":{\"1739\":1}}],[\"把具有相同状态的进程链在一起\",{\"1\":{\"1873\":1}}],[\"把内核缓冲区里的数据拷贝到\",{\"1\":{\"1801\":1,\"6307\":1}}],[\"把内核缓冲区的数据拷贝到\",{\"1\":{\"1794\":1,\"6299\":1}}],[\"把内核的\",{\"1\":{\"1792\":1,\"6297\":1}}],[\"把需要监控的\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"把enable\",{\"1\":{\"1608\":1}}],[\"把你绕蒙你这篇文章就白看了\",{\"1\":{\"504\":1,\"5391\":1}}],[\"把堆划分成多个大小相等的独立区域\",{\"1\":{\"374\":1}}],[\"唱跳rap篮球\",{\"1\":{\"503\":1,\"505\":1,\"5390\":1,\"5393\":1}}],[\"蔡徐鸡\",{\"1\":{\"503\":1,\"505\":1,\"5390\":1,\"5393\":1}}],[\"应答报文后\",{\"1\":{\"2596\":1,\"2599\":1}}],[\"应答报文\",{\"1\":{\"2553\":1,\"2595\":1,\"2598\":1}}],[\"应答\",{\"1\":{\"2290\":1,\"2303\":1,\"2578\":1}}],[\"应用已启动并准备运行\",{\"1\":{\"4239\":1}}],[\"应用信任联盟\",{\"1\":{\"4050\":1}}],[\"应用非常广泛\",{\"1\":{\"3700\":1,\"5869\":1}}],[\"应用消耗大量内存\",{\"1\":{\"3585\":1}}],[\"应用强制使用\",{\"1\":{\"2628\":1}}],[\"应用通过调用\",{\"1\":{\"2586\":1}}],[\"应用层才能从内核中拿到数据\",{\"1\":{\"2366\":1}}],[\"应用\",{\"1\":{\"2366\":1}}],[\"应用广泛和跨平台\",{\"1\":{\"2260\":1,\"2268\":1}}],[\"应用进程再调用\",{\"1\":{\"1791\":1,\"6296\":1}}],[\"应用进程跟操作系统内核\",{\"1\":{\"1790\":1,\"6295\":1}}],[\"应用进程调用了\",{\"1\":{\"1790\":1,\"6295\":1}}],[\"应用场景\",{\"0\":{\"2503\":1,\"3104\":1,\"3114\":1,\"3121\":1,\"3129\":1,\"3137\":1,\"6760\":1,\"6770\":1,\"6777\":1,\"6785\":1,\"6793\":1},\"1\":{\"1585\":1}}],[\"应用解耦\",{\"1\":{\"1410\":1}}],[\"应用程序与硬件没有联系\",{\"1\":{\"3430\":1}}],[\"应用程序\",{\"1\":{\"1350\":1,\"5675\":1}}],[\"应用程序类加载器\",{\"1\":{\"427\":1,\"5318\":1}}],[\"应该发送怎样的查询分组呢\",{\"1\":{\"7046\":1}}],[\"应该怎么去排查\",{\"0\":{\"4218\":1}}],[\"应该怎么设计\",{\"0\":{\"4216\":1}}],[\"应该尽量只在需要对数据进行精确计算时才使用\",{\"1\":{\"3076\":1,\"6727\":1}}],[\"应该尽量指定其大小\",{\"1\":{\"984\":1}}],[\"应该被考虑建立索引\",{\"1\":{\"2826\":1,\"6498\":1}}],[\"应该被优先使用\",{\"1\":{\"766\":1}}],[\"应该如何\",{\"1\":{\"2435\":1}}],[\"应该同步线程以避免关键的资源使用冲突\",{\"1\":{\"1977\":1,\"6237\":1}}],[\"应该用哪一个呢\",{\"1\":{\"765\":1}}],[\"应该是组合关系\",{\"1\":{\"585\":1}}],[\"应该由\",{\"1\":{\"568\":1}}],[\"应该会有会心一笑\",{\"1\":{\"492\":1,\"5379\":1}}],[\"看作是\",{\"1\":{\"7071\":1}}],[\"看它是否依然可读或可写\",{\"1\":{\"6278\":1}}],[\"看过\",{\"1\":{\"6271\":1}}],[\"看哪个接口异常\",{\"1\":{\"4436\":1}}],[\"看来代码写的挺多的\",{\"1\":{\"4421\":1}}],[\"看了你去年做了一个博客社区的项目\",{\"1\":{\"4351\":1}}],[\"看了大佬小林coding的文章\",{\"1\":{\"2443\":1}}],[\"看你是在联想实习\",{\"1\":{\"4417\":1}}],[\"看你是院研副部长\",{\"1\":{\"4344\":1,\"7169\":1}}],[\"看你面试状态很好\",{\"1\":{\"4405\":1}}],[\"看你简历上写的技术点挺多的\",{\"1\":{\"4381\":1}}],[\"看你熟悉线程池\",{\"1\":{\"4374\":1}}],[\"看你写了博客\",{\"1\":{\"4370\":1}}],[\"看你填了全国可长期出差\",{\"1\":{\"4367\":1}}],[\"看你项目中用到了网关\",{\"1\":{\"4331\":1,\"7156\":1}}],[\"看我熟悉python\",{\"1\":{\"4314\":1,\"7139\":1}}],[\"看看排名最前的几个类\",{\"1\":{\"3582\":1}}],[\"看看三次握手是如何阻止历史连接的\",{\"1\":{\"2541\":1}}],[\"看4是否小于up\",{\"1\":{\"3053\":1}}],[\"看似很完美了\",{\"1\":{\"2365\":1}}],[\"看是否有明显异常\",{\"1\":{\"2139\":1}}],[\"看是哪部分对象使用内存过高\",{\"1\":{\"2129\":1}}],[\"看old\",{\"1\":{\"2131\":1}}],[\"看上去分配已经尽量的保证均衡了\",{\"1\":{\"1483\":1,\"6935\":1}}],[\"看完这篇文章\",{\"1\":{\"1009\":1}}],[\"看结果如何\",{\"1\":{\"979\":1}}],[\"看到k神题解下的一个评论\",{\"1\":{\"562\":1}}],[\"看到上面的代码\",{\"1\":{\"492\":1,\"5379\":1}}],[\"看下它的背后\",{\"1\":{\"479\":1}}],[\"测试连接和监控网络状态\",{\"1\":{\"3458\":1}}],[\"测试它们的性能\",{\"1\":{\"633\":1}}],[\"测试\",{\"1\":{\"486\":2,\"3966\":1,\"3978\":1}}],[\"⾥⾯的code会不会被执⾏\",{\"1\":{\"483\":1}}],[\"⾥⾯有⼀个return语句\",{\"1\":{\"483\":1}}],[\"子查询的结果集无法使用索引\",{\"1\":{\"6741\":1}}],[\"子查询性能差的原因\",{\"1\":{\"6741\":1}}],[\"子句中\",{\"1\":{\"6740\":1}}],[\"子句中打开资源\",{\"1\":{\"477\":1,\"5372\":1}}],[\"子句\",{\"1\":{\"4959\":1}}],[\"子类加载器才会尝试自己加载\",{\"1\":{\"4197\":1}}],[\"子进程执行\",{\"1\":{\"3151\":1,\"6807\":1}}],[\"子线程完成业务处理后\",{\"1\":{\"6374\":1}}],[\"子线程无须返回数据\",{\"1\":{\"1849\":1,\"6391\":1}}],[\"子线程负责完成后续的业务处理\",{\"1\":{\"1848\":1,\"6390\":1}}],[\"子线程中的\",{\"1\":{\"1844\":1,\"6386\":1}}],[\"子线程里的\",{\"1\":{\"1840\":1,\"6372\":1}}],[\"子结点关系和传递性\",{\"1\":{\"662\":1}}],[\"子树的根是树根的子结点\",{\"1\":{\"658\":1}}],[\"子树的根看作是树根的下一层元素\",{\"1\":{\"652\":1}}],[\"子加载器才会尝试自己去加载\",{\"1\":{\"449\":1,\"5342\":1}}],[\"后经提议\",{\"1\":{\"6989\":1}}],[\"后来\",{\"1\":{\"6989\":1}}],[\"后台管理微服务签发jwt\",{\"1\":{\"4830\":1,\"7219\":1}}],[\"后期使用数据库分片技术\",{\"1\":{\"4820\":1,\"4967\":1}}],[\"后置通知实现\",{\"1\":{\"4031\":1}}],[\"后文会详细介绍到\",{\"1\":{\"3910\":1,\"6057\":1}}],[\"后继节点\",{\"1\":{\"3643\":1,\"3645\":1,\"5884\":1,\"5887\":1}}],[\"后的记录区\",{\"1\":{\"3358\":1}}],[\"后端先验证\",{\"1\":{\"5004\":1,\"7286\":1}}],[\"后端是一个松耦合架构\",{\"1\":{\"3298\":1,\"6083\":1}}],[\"后端服务器将会承受巨大的压力\",{\"1\":{\"2012\":1}}],[\"后访问的事务必须等前一个事务执行完成\",{\"1\":{\"3000\":1,\"6672\":1}}],[\"后续的leader选举和日志同步将无法进行\",{\"1\":{\"4589\":1}}],[\"后续的挥手过程也都是在内核完成\",{\"1\":{\"2637\":1}}],[\"后续即使它们修改了记录行的值\",{\"1\":{\"3035\":1,\"6702\":1}}],[\"后续有对该表的\",{\"1\":{\"2901\":1,\"6573\":1}}],[\"后续再在收到\",{\"1\":{\"2588\":1}}],[\"后续最新的\",{\"1\":{\"2546\":1}}],[\"后续客户端请求服务器的时候\",{\"1\":{\"2279\":1}}],[\"后收到的字节数据只能存放在内核缓冲区里\",{\"1\":{\"2366\":1}}],[\"后\",{\"1\":{\"1198\":1,\"1396\":1,\"1674\":1,\"1790\":1,\"2614\":1,\"2706\":1,\"3206\":1,\"3499\":1,\"3553\":1,\"4606\":1,\"5550\":1,\"6295\":1}}],[\"后一级缓存也没有了\",{\"1\":{\"1147\":1,\"5727\":1}}],[\"后重写为\",{\"1\":{\"1127\":1,\"5708\":1}}],[\"后三位\",{\"1\":{\"1024\":1}}],[\"后者不是线程安全的\",{\"1\":{\"950\":1}}],[\"后面会有答案的\",{\"1\":{\"6461\":1}}],[\"后面会具体演示代码\",{\"1\":{\"890\":1,\"5508\":1}}],[\"后面有没有转软件开发的可能\",{\"1\":{\"4371\":1}}],[\"后面接数字\",{\"1\":{\"3415\":1}}],[\"后面接上要声明的异常\",{\"1\":{\"471\":1,\"5366\":1}}],[\"后面可以接更新时间而不使用当前时间\",{\"1\":{\"3403\":1}}],[\"后面可以接更新日期而不使用当前日期\",{\"1\":{\"3403\":1}}],[\"后面用于生成\",{\"1\":{\"2322\":1}}],[\"后面就出现了\",{\"1\":{\"2316\":1}}],[\"后面两个参数是源端的偏移量和复制数据的长度\",{\"1\":{\"1798\":1,\"6303\":1}}],[\"后面每次调用在这个整数上自增\",{\"1\":{\"1465\":1,\"6913\":1}}],[\"后面的两个hashcode经过位运算之后得到的值也是11\",{\"1\":{\"1039\":1}}],[\"后进先出的栈相关的操作\",{\"1\":{\"568\":1}}],[\"后仍然存活的对象\",{\"1\":{\"236\":1}}],[\"若系统出现\",{\"1\":{\"4649\":1,\"6222\":1}}],[\"若要重写某一业务代码\",{\"1\":{\"4479\":1,\"6112\":1}}],[\"若要包含未存活的对象\",{\"1\":{\"3597\":1}}],[\"若所有线程均在工作\",{\"1\":{\"3903\":1,\"6050\":1}}],[\"若多余一个任务被提交到该线程池\",{\"1\":{\"3902\":1,\"6049\":1}}],[\"若没有\",{\"1\":{\"3901\":1,\"6048\":1}}],[\"若有则唤醒它\",{\"1\":{\"3469\":1}}],[\"若目标文件已经存在时\",{\"1\":{\"3406\":1}}],[\"若来源文件为链接文件\",{\"1\":{\"3406\":1}}],[\"若这段时间内容器未停止\",{\"1\":{\"3322\":1}}],[\"若该文件不存在则不建立新文件\",{\"1\":{\"3403\":1}}],[\"若该记录被其他事务占用或当前版本对该事务不可见\",{\"1\":{\"3040\":1,\"6708\":1}}],[\"若该同步锁被别的线程占用\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"若\",{\"1\":{\"2615\":1}}],[\"若扩容后容量仍然小于最小容量\",{\"1\":{\"801\":1}}],[\"若声明多个异常\",{\"1\":{\"471\":1,\"5366\":1}}],[\"若方法中存在检查异常\",{\"1\":{\"471\":1,\"5366\":1}}],[\"若养老区执行了\",{\"1\":{\"269\":1}}],[\"否则表示密码错误\",{\"1\":{\"5084\":1}}],[\"否则可能出现单点故障\",{\"1\":{\"4576\":1}}],[\"否则无法使用接口进行编程\",{\"1\":{\"3958\":1}}],[\"否则无法继续提交\",{\"1\":{\"3341\":1}}],[\"否则新建一个线程来处理任务\",{\"1\":{\"3879\":1,\"6034\":1}}],[\"否则会抛出java\",{\"1\":{\"3741\":1,\"5973\":1}}],[\"否则在同步队列中不停的自旋等待获取同步状态\",{\"1\":{\"3649\":1,\"5892\":1}}],[\"否则在序列化的时候会报错\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"否则依然存在数据丢失的风险\",{\"1\":{\"3156\":1,\"6812\":1}}],[\"否则类似于字符串或\",{\"1\":{\"2802\":1,\"6474\":1}}],[\"否则接收方就无法正常接收到数据\",{\"1\":{\"2655\":1}}],[\"否则更新资源\",{\"1\":{\"2258\":1}}],[\"否则重新请求服务器\",{\"1\":{\"2235\":1}}],[\"否则还是会有消息丢失的风险\",{\"1\":{\"1608\":1}}],[\"否则一直会阻塞\",{\"1\":{\"1520\":1}}],[\"否则就会造成数据异常\",{\"1\":{\"1503\":1,\"6958\":1}}],[\"否则采用\",{\"1\":{\"908\":1,\"5526\":1}}],[\"否则继承的这个接⼝可以什么也不⼲\",{\"1\":{\"869\":1,\"5499\":1}}],[\"否则按照内容查找元素效率比较低\",{\"1\":{\"748\":1}}],[\"否则找一个空位添加\",{\"1\":{\"737\":1}}],[\"否则它满足如下两个条件\",{\"1\":{\"645\":1}}],[\"否则\",{\"1\":{\"596\":1,\"683\":1,\"684\":1,\"2787\":1,\"3235\":1,\"3816\":1,\"5934\":1,\"6456\":1,\"7039\":1}}],[\"否则应该是组合关系\",{\"1\":{\"590\":1}}],[\"否则编译不会通过\",{\"1\":{\"466\":1,\"5361\":1}}],[\"否则才会尝试加载\",{\"1\":{\"422\":1,\"447\":1,\"5313\":1,\"5340\":1}}],[\"情况\",{\"1\":{\"3607\":1}}],[\"情况的区域\",{\"1\":{\"201\":1}}],[\"情理可容的异常状况\",{\"1\":{\"465\":1,\"5360\":1}}],[\"很明显\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"很明显需要继承\",{\"1\":{\"429\":1,\"5320\":1}}],[\"很难删除元素\",{\"1\":{\"2158\":1}}],[\"很容易造成一种极端现象\",{\"1\":{\"1918\":1}}],[\"很容易出现的\",{\"1\":{\"465\":1,\"5360\":1}}],[\"很好解决了\",{\"1\":{\"1774\":1,\"6264\":1}}],[\"很可能会出现许多扩容问题\",{\"1\":{\"1421\":1}}],[\"很简单\",{\"1\":{\"1048\":1}}],[\"很多分布式一致性算法都由paxos演变而来\",{\"1\":{\"4580\":1}}],[\"很多顶级的开源项目都用到了\",{\"1\":{\"4562\":1,\"6162\":1}}],[\"很多短任务线程\",{\"0\":{\"2040\":1,\"5745\":1}}],[\"很多人问怎么才能知道一个进程要求服务的时间\",{\"1\":{\"1921\":1}}],[\"很多人会更倾向于使用继承关系\",{\"1\":{\"594\":1}}],[\"很多同学应该能马上反应过来了\",{\"1\":{\"618\":1}}],[\"很多时候\",{\"1\":{\"590\":1}}],[\"正确使用索引的一些建议\",{\"0\":{\"6494\":1}}],[\"正确的程序在运行中\",{\"1\":{\"465\":1,\"5360\":1}}],[\"正因为\",{\"1\":{\"4609\":1}}],[\"正因为循环引用的存在\",{\"1\":{\"299\":1}}],[\"正如其名\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"正在等待的线程可以选择放弃等待\",{\"1\":{\"3781\":1,\"5792\":1}}],[\"正在内存中\",{\"1\":{\"3035\":1,\"6702\":1}}],[\"正数表示成功\",{\"1\":{\"3656\":1,\"5899\":1}}],[\"正则表达式我不会\",{\"1\":{\"4437\":1}}],[\"正则表达式\",{\"1\":{\"3417\":1}}],[\"正常调用时\",{\"1\":{\"6139\":1}}],[\"正常调用时断路器关闭\",{\"1\":{\"4522\":1}}],[\"正常情况下只存在一个\",{\"1\":{\"4586\":1}}],[\"正常工作时的流程如下图\",{\"1\":{\"4586\":1}}],[\"正常流程\",{\"1\":{\"2582\":1}}],[\"正常的情况\",{\"1\":{\"1592\":1}}],[\"正好\",{\"1\":{\"1962\":1}}],[\"等更多可供选择的缓存头来控制缓存策略\",{\"1\":{\"7063\":1}}],[\"等技术\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"等插入语句执行完成后\",{\"1\":{\"2922\":1,\"6594\":1}}],[\"等语句\",{\"1\":{\"2857\":1,\"3013\":1,\"6529\":1,\"6685\":1}}],[\"等工具分析\",{\"1\":{\"2129\":1}}],[\"等待将来被唤醒\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"等待可中断当持有锁的线程长期不释放锁的时候\",{\"1\":{\"3781\":1,\"5792\":1}}],[\"等待时间越长就越先被唤醒\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"等待几分钟之后\",{\"1\":{\"3625\":1}}],[\"等待足够的时间以确保最后的\",{\"1\":{\"2620\":1}}],[\"等待服务端处理完数据后\",{\"1\":{\"2597\":1}}],[\"等待客户端回应\",{\"1\":{\"2584\":1}}],[\"等待客户端的连接请求\",{\"1\":{\"2474\":1}}],[\"等待的时间是\",{\"0\":{\"2613\":1},\"1\":{\"2426\":1}}],[\"等待线程终止或者超时\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"等待池\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"等待阻塞\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"等待isr中的一个活过来\",{\"1\":{\"1538\":1}}],[\"等待结果返回\",{\"1\":{\"1517\":1}}],[\"等重启之后\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"等高峰期过后\",{\"1\":{\"1422\":1}}],[\"等服务再进行拉取消费\",{\"1\":{\"1419\":1}}],[\"等以\",{\"1\":{\"1212\":1,\"5564\":1}}],[\"等数据\",{\"1\":{\"1200\":1,\"5552\":1}}],[\"等操作\",{\"1\":{\"1134\":1,\"1147\":1,\"5713\":1,\"5727\":1}}],[\"等等\",{\"0\":{\"617\":1},\"1\":{\"609\":1}}],[\"等\",{\"1\":{\"459\":1,\"782\":1,\"1201\":1,\"1383\":1,\"1867\":1,\"2087\":1,\"2508\":1,\"3445\":1,\"3447\":1,\"3449\":1,\"3456\":1,\"3458\":2,\"4534\":1,\"5354\":1,\"5553\":1}}],[\"等价于\",{\"1\":{\"243\":1,\"244\":1}}],[\"空节点\",{\"1\":{\"696\":1,\"5463\":1}}],[\"空树高度为0\",{\"1\":{\"672\":1}}],[\"空指针异常\",{\"1\":{\"459\":1,\"5354\":1}}],[\"空间是否满足要求\",{\"1\":{\"3103\":1,\"6759\":1}}],[\"空间函数等\",{\"1\":{\"2729\":1,\"6398\":1}}],[\"空间计算\",{\"1\":{\"2170\":1}}],[\"空间局部性是指一旦程序访问了某个存储单元\",{\"1\":{\"1622\":1}}],[\"空间不足\",{\"1\":{\"396\":1}}],[\"空间不足时\",{\"1\":{\"256\":1}}],[\"空间整合\",{\"1\":{\"381\":1}}],[\"空间就不够用了\",{\"1\":{\"334\":1}}],[\"空间上\",{\"1\":{\"333\":1}}],[\"空间和其中一块\",{\"1\":{\"333\":1}}],[\"空间和两块较小的\",{\"1\":{\"333\":1}}],[\"空间\",{\"1\":{\"333\":1}}],[\"空间内\",{\"1\":{\"272\":1}}],[\"空间被对象填充时\",{\"1\":{\"232\":1}}],[\"如aes\",{\"1\":{\"5089\":1}}],[\"如总记录数\",{\"1\":{\"4963\":1}}],[\"如分页查询\",{\"1\":{\"4939\":1}}],[\"如服务发现注册\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"如令牌桶算法或漏桶算法\",{\"1\":{\"4088\":1}}],[\"如有序集合\",{\"1\":{\"4088\":1}}],[\"如spring\",{\"1\":{\"4068\":1}}],[\"如授权令牌\",{\"1\":{\"4047\":1}}],[\"如电商系统中订单服务要调用用户服务获取用户信息\",{\"1\":{\"3989\":1}}],[\"如list\",{\"1\":{\"3940\":1}}],[\"如reentrantlock\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"如大量的json数据转实体对象\",{\"1\":{\"3534\":1}}],[\"如超大的浮点运算\",{\"1\":{\"3533\":1}}],[\"如同访问自己的私有空间一样\",{\"1\":{\"3471\":1}}],[\"如信号量\",{\"1\":{\"3465\":1}}],[\"如文本编辑器\",{\"1\":{\"3447\":1}}],[\"如内存管理\",{\"1\":{\"3435\":1}}],[\"如匿名卷\",{\"1\":{\"3294\":1}}],[\"如不可见\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"如主键索引\",{\"1\":{\"2815\":1,\"6487\":1}}],[\"如今的\",{\"1\":{\"2515\":1}}],[\"如nginx\",{\"1\":{\"2223\":1}}],[\"如nullpointerexception\",{\"1\":{\"459\":1,\"5354\":1}}],[\"如上图\",{\"1\":{\"2165\":1}}],[\"如https\",{\"1\":{\"2085\":1}}],[\"如互斥锁和信号量等\",{\"1\":{\"1974\":1,\"6255\":1}}],[\"如寄存器和栈\",{\"1\":{\"1901\":1}}],[\"如创建进程时\",{\"1\":{\"1885\":1}}],[\"如可由代码分段\",{\"1\":{\"1640\":1}}],[\"如何服务更多的用户\",{\"1\":{\"6283\":1}}],[\"如何判断对象是否可回收\",{\"0\":{\"5293\":1}}],[\"如何与elk整合\",{\"1\":{\"4513\":1,\"6130\":1}}],[\"如何不让多个线程使用\",{\"1\":{\"4375\":1}}],[\"如何处理协作问题\",{\"0\":{\"3934\":1}}],[\"如何动态修改线程池的参数\",{\"0\":{\"3914\":1,\"6061\":1}}],[\"如何设定线程池的大小\",{\"1\":{\"3895\":1,\"6042\":1}}],[\"如何创建线程池\",{\"0\":{\"3853\":1,\"6007\":1}}],[\"如何比较和选择\",{\"0\":{\"3777\":1,\"5788\":1}}],[\"如何解决死锁\",{\"0\":{\"4175\":1}}],[\"如何解决\",{\"1\":{\"3687\":1,\"5856\":1}}],[\"如何解决深分页的问题\",{\"0\":{\"2061\":1,\"5766\":1}}],[\"如何把本地仓库的内容推向一个空的远程仓库\",{\"0\":{\"3381\":1}}],[\"如何撤销\",{\"0\":{\"3343\":1}}],[\"如何发给从库呢\",{\"1\":{\"3239\":1}}],[\"如何找到主从差异数据而设计的环形缓冲区\",{\"1\":{\"3239\":1}}],[\"如何保证消息的消费顺序\",{\"0\":{\"6964\":1}}],[\"如何保证消息的顺序性\",{\"0\":{\"1501\":1,\"6956\":1}}],[\"如何保证原子性呢\",{\"1\":{\"3663\":1,\"5826\":1}}],[\"如何保证\",{\"1\":{\"3179\":1,\"6837\":1}}],[\"如何基于\",{\"1\":{\"2490\":1}}],[\"如何优化aop的性能\",{\"1\":{\"4027\":1}}],[\"如何优化\",{\"1\":{\"2429\":1}}],[\"如何避免\",{\"0\":{\"2577\":1},\"1\":{\"2418\":1}}],[\"如何避免预读失效和缓存污染的问题\",{\"0\":{\"1691\":1}}],[\"如何在\",{\"1\":{\"2410\":1}}],[\"如何唯一确定一个\",{\"1\":{\"2405\":1}}],[\"如何定位是堆内存溢出还是栈内存溢出\",{\"1\":{\"2118\":1}}],[\"如何做多机房容灾\",{\"0\":{\"2067\":1,\"5772\":1}}],[\"如何提高搜索性能\",{\"0\":{\"2059\":1,\"5764\":1}}],[\"如何使用\",{\"0\":{\"1314\":1,\"5645\":1}}],[\"如b为一个异步的调用方法\",{\"1\":{\"1373\":1}}],[\"如他们都是同步调用\",{\"1\":{\"1373\":1}}],[\"如\",{\"1\":{\"1200\":1,\"1201\":1,\"1202\":1,\"1867\":1,\"2087\":1,\"2321\":1,\"2323\":1,\"2328\":1,\"2508\":1,\"2521\":1,\"2819\":1,\"2838\":1,\"3449\":1,\"3458\":2,\"3484\":1,\"3538\":1,\"3625\":2,\"4542\":1,\"4554\":1,\"5552\":1,\"5553\":1,\"5554\":1,\"6279\":1,\"6323\":1,\"6491\":1,\"6510\":1}}],[\"如final类\",{\"1\":{\"879\":1}}],[\"如第一个\",{\"1\":{\"723\":1,\"1084\":1}}],[\"如下表\",{\"1\":{\"5055\":1}}],[\"如下图中的哨兵2\",{\"1\":{\"3206\":1}}],[\"如下图\",{\"1\":{\"1800\":1,\"1805\":1,\"6305\":1,\"6311\":1}}],[\"如下图所示\",{\"1\":{\"1037\":1,\"2034\":1,\"3707\":1,\"3708\":1,\"3719\":1,\"3915\":1,\"5906\":1,\"5907\":1,\"5918\":1,\"6062\":1}}],[\"如下\",{\"1\":{\"502\":1,\"5389\":1}}],[\"如下所示\",{\"1\":{\"471\":1,\"474\":1,\"572\":1,\"1687\":1,\"4547\":1,\"4747\":1,\"4752\":1,\"5366\":1,\"5369\":1}}],[\"如ioexception\",{\"1\":{\"462\":1,\"5357\":1}}],[\"如果主机\",{\"1\":{\"7046\":1}}],[\"如果快递箱发现你的快递没有被取出\",{\"1\":{\"6276\":1}}],[\"如果快递箱只会通过短信通知你一次\",{\"1\":{\"6276\":1}}],[\"如果都是单一的属性\",{\"1\":{\"5114\":1}}],[\"如果返回失败\",{\"1\":{\"4906\":1,\"7276\":1}}],[\"如果设置成功就表示加锁成功\",{\"1\":{\"4905\":1,\"7275\":1}}],[\"如果设计成继承关系的话\",{\"1\":{\"590\":1}}],[\"如果项目已经使用了redis\",{\"1\":{\"4866\":1}}],[\"如果项目对延迟任务的吞吐量要求不是很高\",{\"1\":{\"4864\":1}}],[\"如果审核成功\",{\"1\":{\"4851\":1,\"7240\":1}}],[\"如果审核失败\",{\"1\":{\"4850\":1,\"7239\":1}}],[\"如果网络分区正常的话\",{\"1\":{\"4651\":1,\"6224\":1}}],[\"如果网卡支持\",{\"1\":{\"1801\":1,\"6307\":1}}],[\"如果相同那么就\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"如果相同则比较\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"如果超过半数以上的同意那么就进行\",{\"1\":{\"4597\":1,\"6181\":1}}],[\"如果更多的节点故障\",{\"1\":{\"4589\":1}}],[\"如果事物涉及的节点很多\",{\"1\":{\"4484\":1,\"6117\":1}}],[\"如果负责的活动和实验室科研冲突了怎么平衡\",{\"1\":{\"4344\":1,\"7169\":1}}],[\"如果父类加载过则返回\",{\"1\":{\"4196\":1}}],[\"如果类没有被加载\",{\"1\":{\"4196\":1}}],[\"如果类已经被加载则返回\",{\"1\":{\"4195\":1}}],[\"如果从底层数据库查询不到数据\",{\"1\":{\"4151\":1}}],[\"如果从库断开时间太久\",{\"1\":{\"3239\":1}}],[\"如果实现了initializingbean接口\",{\"1\":{\"4134\":1}}],[\"如果实现了beanpostprocesser\",{\"1\":{\"4133\":1}}],[\"如果实例已经存在\",{\"1\":{\"859\":1,\"5489\":1}}],[\"如果通过各种aware接口声明了依赖关系\",{\"1\":{\"4132\":1}}],[\"如果接近100\",{\"1\":{\"3992\":1}}],[\"如果接收方的程序如果不知道\",{\"1\":{\"2459\":1}}],[\"如果过于频繁可能是内存溢出导致\",{\"1\":{\"3991\":1}}],[\"如果向任务队列投放任务失败\",{\"1\":{\"3884\":1,\"6039\":1}}],[\"如果队列满了\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话\",{\"1\":{\"3871\":1,\"6026\":1}}],[\"如果执行程序已关闭\",{\"1\":{\"3871\":1,\"6026\":1}}],[\"如果执行失败\",{\"1\":{\"2051\":1,\"5756\":1}}],[\"如果无限制的创建\",{\"1\":{\"3852\":1,\"6006\":1}}],[\"如果能获取到\",{\"1\":{\"3842\":1,\"5958\":1}}],[\"如果读读之间互斥\",{\"1\":{\"3830\":1,\"5946\":1}}],[\"如果加锁的时间过长\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"如果加了此参数仍然不行\",{\"1\":{\"3576\":1}}],[\"如果抢到锁\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"如果localvariable对象不是一个大对象的话\",{\"1\":{\"3773\":1}}],[\"如果leader失效后\",{\"1\":{\"1534\":1}}],[\"如果获取对象锁失败\",{\"1\":{\"3743\":1,\"5975\":1}}],[\"如果获取了锁就\",{\"1\":{\"5902\":1}}],[\"如果获取了锁就保存当前获得锁的线程\",{\"1\":{\"3659\":1}}],[\"如果获取了锁\",{\"1\":{\"3649\":1,\"5892\":1}}],[\"如果获取了就什么也不干\",{\"1\":{\"3647\":1,\"5890\":1}}],[\"如果锁的计数器为\",{\"1\":{\"3742\":1,\"5974\":1}}],[\"如果锁使用不当\",{\"1\":{\"3628\":1}}],[\"如果全部相等\",{\"1\":{\"3689\":1,\"5859\":1}}],[\"如果多次失败会有多次自旋\",{\"1\":{\"3673\":1,\"5840\":1}}],[\"如果因为冲突失败了就重试\",{\"1\":{\"3665\":1,\"5828\":1}}],[\"如果存在就唤醒自己的后继节点\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"如果存在一个值不为\",{\"1\":{\"3262\":1,\"6867\":1}}],[\"如果它的后继节点是shared状态\",{\"1\":{\"3638\":1,\"5879\":1}}],[\"如果它的访问位位是\",{\"1\":{\"1741\":1}}],[\"如果找到了多个\",{\"1\":{\"3626\":1}}],[\"如果某个线程进入\",{\"1\":{\"3624\":1}}],[\"如果某块数据被访问\",{\"1\":{\"1622\":1}}],[\"如果出现两次\",{\"1\":{\"5014\":1}}],[\"如果出现这三种问题\",{\"1\":{\"3619\":1}}],[\"如果出现前后两次查询到的记录数量不一样的情况\",{\"1\":{\"2990\":1,\"6662\":1}}],[\"如果出现前后两次读到的数据不一样的情况\",{\"1\":{\"2986\":1,\"6658\":1}}],[\"如果系统有可视化界面\",{\"1\":{\"3574\":1}}],[\"如果路径不存在\",{\"1\":{\"3571\":1}}],[\"如果发现冲突了\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"如果发现某类对象占用内存很大\",{\"1\":{\"3597\":1}}],[\"如果发现信息中包含文本\",{\"1\":{\"3561\":1}}],[\"如果发生了读写冲突的时候\",{\"1\":{\"3000\":1,\"6672\":1}}],[\"如果线程竞争不激烈\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"如果线程的竞争很激励\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"如果线程的十六进制\",{\"1\":{\"3560\":1}}],[\"如果线程不处于活动状态\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"如果线程请求分配的栈容量超过\",{\"1\":{\"207\":1}}],[\"如果sy内核空间占比过高\",{\"1\":{\"3535\":1}}],[\"如果us用户空间占比过高\",{\"1\":{\"3535\":1}}],[\"如果目标文件存在时\",{\"1\":{\"3413\":1}}],[\"如果目标文件已经存在\",{\"1\":{\"3408\":1}}],[\"如果目标对象实现了接口\",{\"1\":{\"908\":1,\"5526\":1}}],[\"如果源文件有两个以上\",{\"1\":{\"3405\":1}}],[\"如果误操作的是未提交的内容\",{\"1\":{\"3351\":1}}],[\"如果本次提交误操作\",{\"0\":{\"3343\":1}}],[\"如果本地事务执行成功\",{\"1\":{\"2051\":1,\"5756\":1}}],[\"如果值都为\",{\"1\":{\"3262\":1,\"6867\":1}}],[\"如果值相等\",{\"1\":{\"2256\":1}}],[\"如果非要用这种方式来解决穿透问题的话\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"如果黑客恶意攻击\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"如果赞成票数\",{\"1\":{\"3207\":1}}],[\"如果假设你设置了一批\",{\"1\":{\"3171\":1,\"6829\":1}}],[\"如果至少有10000个key发生变化\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"如果至少有10个key发生变化\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"如果至少有1个key发生变化\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"如果哈希类型元素不满足上面条件\",{\"1\":{\"3127\":1,\"6783\":1}}],[\"如果哈希类型元素个数小于\",{\"1\":{\"3126\":1,\"6782\":1}}],[\"如果集合中的元素不满足上面条件\",{\"1\":{\"3120\":1,\"6776\":1}}],[\"如果集合中的元素都是整数且元素个数小于\",{\"1\":{\"3119\":1,\"6775\":1}}],[\"如果列表的元素不满足上面的条件\",{\"1\":{\"3112\":1,\"6768\":1}}],[\"如果列表的元素个数小于\",{\"1\":{\"3111\":1,\"6767\":1}}],[\"如果列表长度未知\",{\"1\":{\"759\":1}}],[\"如果空间不够会自动扩容\",{\"1\":{\"3103\":1,\"6759\":1}}],[\"如果大于等于则代表db\",{\"1\":{\"3047\":1}}],[\"如果大于等于进入下一个判断\",{\"1\":{\"3046\":1}}],[\"如果大家在\",{\"1\":{\"567\":1}}],[\"如果小于则进入下一个判断\",{\"1\":{\"3047\":1}}],[\"如果小于\",{\"1\":{\"3046\":1}}],[\"如果db\",{\"1\":{\"3045\":1}}],[\"如果说间隙锁锁住的是一个区间\",{\"1\":{\"2965\":1,\"6637\":1}}],[\"如果可以考虑\",{\"1\":{\"2904\":1,\"6576\":1}}],[\"如果可能\",{\"1\":{\"590\":1}}],[\"如果字段频繁被查询\",{\"1\":{\"2824\":1,\"6496\":1}}],[\"如果查询条件中存在与联合索引中最左侧字段相匹配的字段\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"如果一方的密钥被泄露\",{\"1\":{\"5100\":1}}],[\"如果一阶段某一节点失败仍会导致数据不正确\",{\"1\":{\"4484\":1,\"6117\":1}}],[\"如果一个表包含过多字段的话\",{\"1\":{\"3078\":1,\"6729\":1}}],[\"如果一个表的字段过多\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"如果一个事务\",{\"1\":{\"2981\":1,\"6653\":1}}],[\"如果一个事务获取了\",{\"1\":{\"2958\":1,\"6630\":1}}],[\"如果一个字段不被经常查询\",{\"1\":{\"2830\":1,\"6502\":1}}],[\"如果一个索引包含\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"如果一条\",{\"1\":{\"2815\":2,\"6487\":2}}],[\"如果一直委托都无法加载\",{\"1\":{\"4197\":1}}],[\"如果一直无脑的发数据给对方\",{\"1\":{\"2660\":1}}],[\"如果一直不会被访问到\",{\"1\":{\"1695\":1}}],[\"如果对某个资源是读操作\",{\"1\":{\"3836\":1,\"5952\":1}}],[\"如果对于某个锁\",{\"1\":{\"3827\":1}}],[\"如果对整个系统非常熟悉\",{\"1\":{\"3582\":1}}],[\"如果对索引列的数据被修改时\",{\"1\":{\"2803\":1,\"6475\":1}}],[\"如果对一棵有n个结点的完全二叉树的结点按层序编号\",{\"1\":{\"681\":1}}],[\"如果索引的数据不是有序的\",{\"1\":{\"2802\":1,\"6474\":1}}],[\"如果指定的\",{\"1\":{\"2766\":1,\"6435\":1}}],[\"如果收到新数据的\",{\"1\":{\"2706\":1}}],[\"如果再收到重复的\",{\"1\":{\"2705\":1}}],[\"如果再次经历垃圾回收\",{\"1\":{\"266\":1}}],[\"如果再次触发垃圾回收\",{\"1\":{\"265\":1}}],[\"如果继续发送大量数据包\",{\"1\":{\"2665\":1}}],[\"如果按期收到确认应答\",{\"1\":{\"2652\":1}}],[\"如果连续几个探测报文都没有得到响应\",{\"1\":{\"2635\":1}}],[\"如果被请求的共享资源被占用\",{\"1\":{\"3642\":1,\"5883\":1}}],[\"如果被请求的共享资源空闲\",{\"1\":{\"3642\":1,\"5883\":1}}],[\"如果被动关闭方没有收到断开连接的最后的\",{\"1\":{\"2614\":1}}],[\"如果被引用过一次\",{\"1\":{\"1623\":1}}],[\"如果客户端发送的\",{\"1\":{\"2556\":1}}],[\"如果只是\",{\"1\":{\"6197\":1}}],[\"如果只通过\",{\"1\":{\"3560\":1}}],[\"如果只有\",{\"1\":{\"2555\":1}}],[\"如果只需要deque接口\",{\"1\":{\"766\":1}}],[\"如果中途丢失了一个分片\",{\"1\":{\"2501\":1}}],[\"如果需要回收核心线程数\",{\"1\":{\"3922\":1,\"6072\":1}}],[\"如果需要预热的话可以调用下面的两个方法\",{\"1\":{\"3918\":1,\"6066\":1}}],[\"如果需要保障网络数据包的可靠性\",{\"1\":{\"2452\":1}}],[\"如果需要生产新的类\",{\"1\":{\"551\":1,\"5429\":1}}],[\"如果已经推送了提交到远程仓库\",{\"1\":{\"3348\":1}}],[\"如果已经建立了连接\",{\"1\":{\"2432\":1,\"2433\":1}}],[\"如果已经点赞则抛出异常\",{\"1\":{\"2045\":1,\"5750\":1}}],[\"如果还是没有\",{\"1\":{\"2388\":1}}],[\"如果还有另一个重要的字段也需要查\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"如果证书没有问题\",{\"1\":{\"2332\":1}}],[\"如果浏览器不支持\",{\"1\":{\"2326\":1}}],[\"如果浏览器收到\",{\"1\":{\"2258\":1}}],[\"如果服务端的私钥泄漏了\",{\"1\":{\"2316\":1}}],[\"如果服务端在处理\",{\"1\":{\"2299\":1}}],[\"如果服务器响应慢\",{\"1\":{\"2354\":1}}],[\"如果服务器b出现故障被移除时\",{\"1\":{\"2032\":1}}],[\"如果服务器已经不能满足缓存需求\",{\"1\":{\"2012\":1}}],[\"如果缓存和数据库都查不到某个\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"如果缓存里的表格能找到\",{\"1\":{\"2390\":1,\"7094\":1}}],[\"如果缓存过期了\",{\"1\":{\"2253\":1}}],[\"如果缓存中不存在该key\",{\"1\":{\"2188\":1}}],[\"如果带上了\",{\"1\":{\"2247\":1}}],[\"如果资源竞争非常激烈\",{\"1\":{\"3692\":1,\"5861\":1}}],[\"如果资源变化了返回\",{\"1\":{\"2245\":1}}],[\"如果资源没有变化返回\",{\"1\":{\"2245\":1}}],[\"如果最后修改时间较旧\",{\"1\":{\"2242\":1}}],[\"如果最后修改时间较新\",{\"1\":{\"2242\":1}}],[\"如果数据量特别大\",{\"1\":{\"4876\":1,\"7254\":1}}],[\"如果数据库中该表选用id自增策略\",{\"1\":{\"4820\":1,\"4967\":1}}],[\"如果数据库的引擎支持的事务支持可重复读的隔离级别\",{\"1\":{\"2866\":1,\"6538\":1}}],[\"如果数据是整型还好\",{\"1\":{\"2802\":1,\"6474\":1}}],[\"如果数据可能存在于缓存中\",{\"1\":{\"2187\":1}}],[\"如果数据和运算量很小\",{\"1\":{\"779\":1}}],[\"如果允许存在一定的误判\",{\"1\":{\"2154\":1}}],[\"如果所有位都为1\",{\"1\":{\"2149\":1}}],[\"如果操作的是相同数据\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"如果操作的是各自的数据的话\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"如果老数据没有动\",{\"1\":{\"2064\":1,\"5769\":1}}],[\"如果mq服务器长时间没有收到生产者的commit或者rollback\",{\"1\":{\"2054\":1,\"5759\":1}}],[\"如果消息还没有到来\",{\"1\":{\"3469\":1}}],[\"如果消息状态更新为可发送\",{\"1\":{\"2053\":1,\"5758\":1}}],[\"如果消费者消费失败\",{\"1\":{\"2055\":1,\"5760\":1}}],[\"如果消费者消费失败怎么办呢\",{\"1\":{\"2055\":1,\"5760\":1}}],[\"如果消费者2挂掉以后\",{\"1\":{\"1593\":1}}],[\"如果消费者发生崩溃或有新的消费者加入群组\",{\"1\":{\"1591\":1}}],[\"如果消费者在默认的5分钟内没有处理完这一批消息\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"如果消费组内\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"如果简单对服务器数量进行取模\",{\"1\":{\"2030\":1}}],[\"如果图片在对应的服务器上不存在\",{\"1\":{\"2010\":1}}],[\"如果余数为1\",{\"1\":{\"2010\":1}}],[\"如果求余的结果为0\",{\"1\":{\"2010\":1}}],[\"如果也想使用此资源\",{\"1\":{\"1994\":1}}],[\"如果进程从消息队列中读取了消息体\",{\"1\":{\"1957\":1}}],[\"如果进程运行时\",{\"1\":{\"1942\":1}}],[\"如果进程等待时间\",{\"1\":{\"1930\":1}}],[\"如果进程消失了\",{\"1\":{\"1861\":1}}],[\"如果该接口中有某个位置比较耗时\",{\"1\":{\"3622\":1}}],[\"如果该行未被更新\",{\"1\":{\"3029\":1,\"6695\":1}}],[\"如果该进程在时间片结束前阻塞或结束\",{\"1\":{\"1926\":1}}],[\"如果该list是arraylist那么\",{\"1\":{\"829\":1}}],[\"如果时间片用完\",{\"1\":{\"1925\":1}}],[\"如果有一个预先计算好的常用口令和它们的\",{\"1\":{\"5055\":1}}],[\"如果有空闲线程\",{\"1\":{\"3879\":1,\"6034\":1}}],[\"如果有修改动作\",{\"1\":{\"3836\":1,\"5952\":1}}],[\"如果有序集合的元素不满足上面的条件\",{\"1\":{\"3135\":1,\"6791\":1}}],[\"如果有序集合的元素个数小于\",{\"1\":{\"3134\":1,\"6790\":1}}],[\"如果有其他事务在\",{\"1\":{\"3013\":1,\"6685\":1}}],[\"如果有其他线程执行了\",{\"1\":{\"2894\":1,\"6566\":1}}],[\"如果有其他线程要更改该表的结构\",{\"1\":{\"2893\":1,\"6565\":1}}],[\"如果有的话\",{\"1\":{\"2963\":1,\"6635\":1}}],[\"如果有就意味着表里已经有记录被加了独占锁\",{\"1\":{\"2916\":1,\"6588\":1}}],[\"如果有\",{\"1\":{\"2787\":1,\"4813\":1,\"4832\":1,\"6456\":1,\"7210\":1,\"7221\":1}}],[\"如果有任意一个位为0\",{\"1\":{\"2149\":1}}],[\"如果有多个表\",{\"0\":{\"2061\":1,\"5766\":1}}],[\"如果有新的事件发生时\",{\"1\":{\"1845\":1,\"6387\":1}}],[\"如果有同学需要使用\",{\"1\":{\"639\":1}}],[\"如果业务处理耗时比较长\",{\"1\":{\"1830\":1,\"6359\":1}}],[\"如果访问位是\",{\"1\":{\"1742\":1}}],[\"如果第二次的访问时间与第一次访问的时间超过\",{\"1\":{\"1716\":1}}],[\"如果第二次的访问时间与第一次访问的时间在\",{\"1\":{\"1715\":1}}],[\"如果预读的页一直没有被访问\",{\"1\":{\"1704\":1,\"1712\":1}}],[\"如果这时没有新的任务提交\",{\"1\":{\"3863\":1,\"6017\":1}}],[\"如果这些大量的数据在很长一段时间都不会被访问的话\",{\"1\":{\"1697\":1}}],[\"如果这些\",{\"1\":{\"1695\":1}}],[\"如果这些被提前加载进来的页\",{\"1\":{\"1693\":1}}],[\"如果这个位置为空\",{\"1\":{\"737\":1}}],[\"如果没被加载过则继续向上委托\",{\"1\":{\"4196\":1}}],[\"如果没获取就创造一个节点通过compareandsettail\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"如果没找到\",{\"1\":{\"1674\":1}}],[\"如果没有则返回未认证错误\",{\"1\":{\"4813\":1,\"4832\":1,\"7210\":1,\"7221\":1}}],[\"如果没有则new一个对象来一个一个set\",{\"1\":{\"2045\":1,\"5750\":1}}],[\"如果没有浪潮\",{\"1\":{\"4361\":1}}],[\"如果没有的话\",{\"1\":{\"3917\":1,\"6065\":1}}],[\"如果没有获取锁\",{\"1\":{\"3648\":1,\"5891\":1}}],[\"如果没有超过\",{\"1\":{\"3210\":1}}],[\"如果没有设置主键且该表没有唯一非空索引时\",{\"1\":{\"3030\":1,\"6696\":1}}],[\"如果没有任何连接相关的活动\",{\"1\":{\"2635\":1}}],[\"如果没有就向操作系统的缓存要\",{\"1\":{\"2388\":1}}],[\"如果没有过期\",{\"1\":{\"2252\":1}}],[\"如果没有\",{\"1\":{\"2235\":1,\"2390\":1,\"2915\":1,\"6587\":1,\"7094\":1}}],[\"如果没有释放消息队列或者没有关闭操作系统\",{\"1\":{\"1958\":1}}],[\"如果没有消息队列\",{\"1\":{\"1410\":1}}],[\"如果没有创建\",{\"1\":{\"859\":1,\"5489\":1}}],[\"如果没有指定\",{\"1\":{\"841\":1}}],[\"如果没有tlab\",{\"1\":{\"273\":1}}],[\"如果没有回收\",{\"1\":{\"265\":1}}],[\"如果段内偏移量是合法的\",{\"1\":{\"1645\":1}}],[\"如果程序要访问虚拟地址的时候\",{\"1\":{\"1630\":1}}],[\"如果同时有很多个索引都可以用于查询\",{\"1\":{\"2834\":1,\"6506\":1}}],[\"如果同时存在多个异步提交\",{\"1\":{\"1615\":1}}],[\"如果同时需要根据索引位置进行操作\",{\"1\":{\"766\":1}}],[\"如果提交失败\",{\"1\":{\"3382\":1}}],[\"如果提交失败也可以记录到错误日志里\",{\"1\":{\"1609\":1}}],[\"如果提交的偏移量大于客户端的最后一个消息的偏移量\",{\"1\":{\"1598\":1}}],[\"如果提交偏移量小于客户端处理的最后一个消息的偏移量\",{\"1\":{\"1596\":1}}],[\"如果看重性能和网络带宽\",{\"1\":{\"1572\":1}}],[\"如果达到的话\",{\"1\":{\"3861\":1,\"3876\":1,\"6015\":1,\"6031\":1}}],[\"如果达到这个次数\",{\"1\":{\"1562\":1}}],[\"如果达到片段上限\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"如果订阅的topic列表是不同的\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"如果此时集群中已经存在一个\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"如果此时事务\",{\"1\":{\"2983\":1,\"6655\":1}}],[\"如果此时有大量该表的\",{\"1\":{\"2901\":1,\"6573\":1}}],[\"如果此时有循环依赖\",{\"1\":{\"1263\":1}}],[\"如果此时再订阅一个分区数为4的topic\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"如果配置的是7个片段\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"如果使用边缘触发模式\",{\"1\":{\"6279\":1}}],[\"如果使用水平触发模式\",{\"1\":{\"6278\":1}}],[\"如果使用同步的方式会引起阻塞\",{\"1\":{\"4610\":1}}],[\"如果使用字符类型为主键\",{\"1\":{\"4117\":1}}],[\"如果使用了\",{\"1\":{\"2495\":1}}],[\"如果使用了消息队列\",{\"1\":{\"1418\":1}}],[\"如果使用传统的\",{\"1\":{\"1694\":1}}],[\"如果使用可用分区\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"如果使用二进制的位运算的话就可以很好的避免这个问题\",{\"1\":{\"1044\":1}}],[\"如果引入消息队列\",{\"1\":{\"1414\":1}}],[\"如果成功获得\",{\"1\":{\"1198\":1,\"5550\":1}}],[\"如果在整个集群运行的过程中\",{\"1\":{\"4618\":1,\"6191\":1}}],[\"如果在同一个锁对象上\",{\"1\":{\"3827\":1}}],[\"如果在获取同步状态的过程中被中断过最后自行调用interrupted方法进行中断操作\",{\"1\":{\"3650\":1,\"5893\":1}}],[\"如果在加上远程的git仓库\",{\"1\":{\"3332\":1}}],[\"如果在网络断开期间\",{\"1\":{\"3241\":1}}],[\"如果在上面这种情况事务\",{\"1\":{\"2984\":1,\"6656\":1}}],[\"如果在第一次请求资源的时候\",{\"1\":{\"2247\":1}}],[\"如果在第一级队列规定的时间片没运行完成\",{\"1\":{\"1941\":1}}],[\"如果在\",{\"1\":{\"1186\":2,\"3048\":1}}],[\"如果在配置文件中通过\",{\"1\":{\"1184\":1,\"1188\":1}}],[\"如果在调用的时候显示的传入一个对象\",{\"1\":{\"841\":1}}],[\"如果恶意程序知道我们用的是hash算法\",{\"1\":{\"1066\":1}}],[\"如果模数是2的幂\",{\"1\":{\"1059\":1}}],[\"如果当前运行的线程数已经等同于最大线程数了\",{\"1\":{\"3885\":1,\"6040\":1}}],[\"如果当前运行的线程数等于或大于核心线程数\",{\"1\":{\"3883\":1,\"6038\":1}}],[\"如果当前运行的线程数小于核心线程数\",{\"1\":{\"3882\":1,\"6037\":1}}],[\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时\",{\"1\":{\"3869\":1,\"6024\":1}}],[\"如果当前线程竞争锁失败\",{\"1\":{\"3640\":1,\"5881\":1}}],[\"如果当前线程正在执行的是\",{\"1\":{\"198\":1}}],[\"如果当前没有事务\",{\"1\":{\"1239\":1,\"1240\":1,\"1241\":1,\"1247\":1,\"5591\":1,\"5592\":1,\"5593\":1,\"5599\":1}}],[\"如果当前存在事务\",{\"1\":{\"1239\":1,\"1240\":1,\"1241\":1,\"1243\":1,\"1244\":1,\"1245\":1,\"1247\":1,\"5591\":1,\"5592\":1,\"5593\":1,\"5595\":1,\"5596\":1,\"5597\":1,\"5599\":1}}],[\"如果当前hashtable的大小为16\",{\"1\":{\"1037\":1}}],[\"如果让你设计这个方法\",{\"1\":{\"1010\":1}}],[\"如果用户用户名\",{\"1\":{\"4811\":1,\"7208\":1}}],[\"如果用户通过构造函数指定了一个数字作为容量\",{\"1\":{\"982\":1}}],[\"如果用线程池来操作threadlocal\",{\"1\":{\"3773\":1}}],[\"如果用中文说\",{\"1\":{\"593\":1}}],[\"如果n为2次幂\",{\"1\":{\"927\":1,\"5444\":1}}],[\"如果要为多个目标对象服务需要定义不同的代理类\",{\"1\":{\"3954\":1}}],[\"如果要在目标分支中反映这些更改\",{\"1\":{\"3372\":1}}],[\"如果要在查询时对记录加行锁\",{\"1\":{\"2938\":1,\"6610\":1}}],[\"如果要释放全局锁\",{\"1\":{\"2858\":1,\"6530\":1}}],[\"如果要克服\",{\"1\":{\"1833\":1,\"6363\":1}}],[\"如果要代理的对象\",{\"1\":{\"1157\":1,\"5538\":1}}],[\"如果要⽣成另⼀种产品\",{\"1\":{\"869\":1,\"5499\":1}}],[\"如果要保持添加的顺序\",{\"1\":{\"718\":1}}],[\"如果是登录\",{\"1\":{\"4810\":1,\"4829\":1,\"7207\":1,\"7218\":1}}],[\"如果是写请求则要转发给\",{\"1\":{\"4633\":1,\"6176\":1}}],[\"如果是写请求\",{\"1\":{\"4594\":1}}],[\"如果是读请求则可以自己处理\",{\"1\":{\"4633\":1,\"6176\":1}}],[\"如果是读请求\",{\"1\":{\"4594\":1}}],[\"如果是引用数据类型\",{\"1\":{\"4190\":1}}],[\"如果是基本数据类型\",{\"1\":{\"4190\":1}}],[\"如果是正常业务请求时发生缓存穿透现象\",{\"1\":{\"4153\":1}}],[\"如果是单个热点key\",{\"1\":{\"4148\":1}}],[\"如果是静态方法\",{\"1\":{\"3748\":1,\"5980\":1}}],[\"如果是实例方法\",{\"1\":{\"3748\":1,\"5980\":1}}],[\"如果是整型还好\",{\"1\":{\"3686\":1,\"5855\":1}}],[\"如果是则将其设置为\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"如果是则正常往下执行\",{\"1\":{\"3797\":1,\"5809\":1}}],[\"如果是则更改为新的值\",{\"1\":{\"3667\":1,\"5830\":1}}],[\"如果是则唤醒头节点的下一个节点\",{\"1\":{\"3638\":1,\"5879\":1}}],[\"如果是因为内存溢出导致的频繁\",{\"1\":{\"3545\":1}}],[\"如果是\",{\"1\":{\"3538\":1,\"7039\":1}}],[\"如果是第一次推送\",{\"1\":{\"3385\":1}}],[\"如果是第⼀次进⼊则为\",{\"1\":{\"859\":1,\"5489\":1}}],[\"如果是联合索引\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"如果是非\",{\"1\":{\"2196\":1}}],[\"如果是对象引用没有释放\",{\"1\":{\"2121\":1}}],[\"如果是超大对象\",{\"1\":{\"2121\":1}}],[\"如果是调用量激增导致的内存不足\",{\"1\":{\"2121\":1}}],[\"如果是rollback\",{\"1\":{\"2052\":1,\"5757\":1}}],[\"如果是commit正常提交\",{\"1\":{\"2052\":1,\"5757\":1}}],[\"如果是连接建立的事件\",{\"1\":{\"1824\":1,\"1836\":1,\"6353\":1,\"6368\":1}}],[\"如果是在要高峰期前进行临时服务扩容\",{\"1\":{\"1421\":1}}],[\"如果是我们自己处理的话该怎么解决\",{\"1\":{\"1254\":1,\"5606\":1}}],[\"如果是执行\",{\"1\":{\"198\":1}}],[\"如果元素的数目超出了内部数组目前的长度它们都需要扩展内部数组的长度\",{\"1\":{\"833\":1}}],[\"如果遍历输出\",{\"1\":{\"770\":1}}],[\"如果插入的数据是随机的\",{\"1\":{\"691\":1,\"5458\":1}}],[\"如果2i＋1>n\",{\"1\":{\"684\":1}}],[\"如果2i>n\",{\"1\":{\"683\":1}}],[\"如果isr列表中的follower都不行了\",{\"1\":{\"1536\":1}}],[\"如果i>1\",{\"1\":{\"682\":1}}],[\"如果i＝1\",{\"1\":{\"682\":1}}],[\"如果其终端结点数为n0\",{\"1\":{\"679\":1}}],[\"如果想实现每一个线程都有自己的专属本地变量该如何解决呢\",{\"1\":{\"3756\":1,\"5988\":1}}],[\"如果想查看实时的新生代\",{\"1\":{\"3607\":1}}],[\"如果想查看堆\",{\"1\":{\"3603\":1}}],[\"如果想知道创建了多少线程\",{\"1\":{\"3599\":1}}],[\"如果想知道什么对象消耗内存最大\",{\"1\":{\"3595\":1}}],[\"如果想相互通信\",{\"1\":{\"1948\":1}}],[\"如果想要解决这些问题\",{\"1\":{\"1599\":1}}],[\"如果想通过显式构造方法构造实例\",{\"1\":{\"532\":1,\"5420\":1}}],[\"如果想打破双亲委派模型则需要重写\",{\"1\":{\"436\":1,\"5327\":1}}],[\"如果哪天你发现用linkedhashmap效果更好\",{\"1\":{\"504\":1,\"5392\":1}}],[\"如果try中有return语句\",{\"1\":{\"484\":1}}],[\"如果代码可能会引发某种错误\",{\"1\":{\"474\":1,\"5369\":1}}],[\"如果不使用线程池\",{\"1\":{\"3908\":1,\"6055\":1}}],[\"如果不想丢弃任务的话\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"如果不好理解\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"如果不存在就获取等待时间最长的符合条件的线程\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"如果不在\",{\"1\":{\"3048\":1}}],[\"如果不是主键索引\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"如果不是连接建立事件\",{\"1\":{\"1825\":1,\"1837\":1,\"6354\":1,\"6369\":1}}],[\"如果不相等\",{\"1\":{\"2257\":1}}],[\"如果不指定\",{\"1\":{\"971\":1,\"3570\":1}}],[\"如果不为空\",{\"1\":{\"737\":1}}],[\"如果不对其捕获\",{\"1\":{\"471\":1,\"5366\":1}}],[\"如果不处理\",{\"1\":{\"462\":1,\"5357\":1}}],[\"如果我们要继续服务\",{\"1\":{\"4646\":1,\"6219\":1}}],[\"如果我们要自定义自己的类加载器\",{\"1\":{\"429\":1,\"5320\":1}}],[\"如果我们项目在linux上部署成功并正常运行\",{\"1\":{\"3512\":1}}],[\"如果我们想对学生表\",{\"1\":{\"2879\":1,\"6551\":1}}],[\"如果我们有3台服务器\",{\"1\":{\"2010\":1}}],[\"如果我们不想打破双亲委派模型\",{\"1\":{\"436\":1,\"5327\":1}}],[\"如果为了保证\",{\"1\":{\"4649\":1,\"6222\":1}}],[\"如果为了在高峰期能顶住流量而常备高流量设备\",{\"1\":{\"1421\":1}}],[\"如果为\",{\"1\":{\"431\":1,\"5322\":1}}],[\"如果每次回收有多于\",{\"1\":{\"334\":1}}],[\"如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值\",{\"1\":{\"291\":1}}],[\"如果分配的对象超过了\",{\"1\":{\"259\":1}}],[\"如果堆的内存大小超过\",{\"1\":{\"245\":1}}],[\"如果堆中没有完成实例分配\",{\"1\":{\"228\":1}}],[\"如果\",{\"1\":{\"208\":1,\"444\":1,\"616\":1,\"1168\":1,\"1169\":1,\"1172\":1,\"1175\":1,\"1176\":1,\"1177\":1,\"1179\":1,\"1180\":1,\"1181\":1,\"1182\":1,\"1183\":1,\"1185\":1,\"1187\":1,\"1812\":1,\"2232\":1,\"2247\":2,\"2380\":1,\"3034\":1,\"4904\":2,\"5337\":1,\"6198\":1,\"6319\":1,\"6701\":1,\"7274\":2}}],[\"如果采用固定大小的\",{\"1\":{\"207\":1}}],[\"如果你创建了一个threadlocal变量\",{\"1\":{\"3758\":1,\"5990\":1}}],[\"如果你同时发出多个请求\",{\"1\":{\"2360\":1}}],[\"如果你学过\",{\"1\":{\"1946\":1}}],[\"如果你追溯\",{\"1\":{\"1811\":1,\"6318\":1}}],[\"如果你想要顺序的处理topic的所有消息\",{\"1\":{\"1588\":1}}],[\"如果你想使用栈这种数据结构\",{\"1\":{\"569\":1}}],[\"如果你可以下载\",{\"1\":{\"1287\":1,\"5629\":1}}],[\"如果你的业务有海量消息\",{\"1\":{\"4888\":1,\"7266\":1}}],[\"如果你的业务场景足够简单\",{\"1\":{\"4887\":1,\"7265\":1}}],[\"如果你的程序本身是线程安全的\",{\"1\":{\"780\":1}}],[\"如果你的资源实现了\",{\"1\":{\"477\":1,\"5372\":1}}],[\"如果你不了解它\",{\"1\":{\"35\":1,\"5148\":1}}],[\"如果你是一个新手\",{\"1\":{\"31\":1,\"5144\":1}}],[\"时效性\",{\"1\":{\"4780\":1}}],[\"时为非公平锁\",{\"1\":{\"3789\":1,\"5800\":1}}],[\"时为公平锁\",{\"1\":{\"3789\":1,\"5800\":1}}],[\"时加上\",{\"1\":{\"2868\":1,\"6540\":1}}],[\"时的活跃事务列表\",{\"1\":{\"3032\":1,\"6698\":1}}],[\"时的数据都已收到\",{\"1\":{\"2706\":1}}],[\"时的优先级\",{\"1\":{\"1868\":1}}],[\"时候参数\",{\"1\":{\"2436\":1}}],[\"时钟页面置换算法\",{\"1\":{\"1723\":1}}],[\"时就会引发full\",{\"1\":{\"3992\":1}}],[\"时就会触发扩容\",{\"1\":{\"991\":1}}],[\"时就会自动扩容\",{\"1\":{\"988\":1}}],[\"时间上将大大减少\",{\"1\":{\"5055\":1}}],[\"时间戳作为score进行排序\",{\"1\":{\"4868\":1,\"7246\":1}}],[\"时间的影响\",{\"1\":{\"3174\":1,\"6832\":1}}],[\"时间局部性是指如果程序中的某条指令一旦执行\",{\"1\":{\"1622\":1}}],[\"时间局部性和空间局部性\",{\"1\":{\"1622\":1}}],[\"时间和大小不论那个满足条件\",{\"1\":{\"1455\":1,\"6903\":1}}],[\"时间复杂度低\",{\"1\":{\"2152\":1}}],[\"时间复杂度为\",{\"1\":{\"1772\":1}}],[\"时间复杂度为o\",{\"1\":{\"691\":1,\"5458\":1}}],[\"时间复杂度都是o\",{\"1\":{\"702\":1,\"5470\":1}}],[\"时间复杂度是o\",{\"1\":{\"691\":1,\"5458\":1}}],[\"时间复杂度是\",{\"1\":{\"629\":1}}],[\"时间内完成查找\",{\"1\":{\"689\":1,\"5456\":1}}],[\"时间是用户可控制的\",{\"1\":{\"379\":1}}],[\"时传入构造方法参数的值\",{\"1\":{\"531\":1,\"5419\":1}}],[\"时\",{\"1\":{\"449\":1,\"1165\":1,\"1283\":1,\"2447\":1,\"2448\":1,\"2449\":1,\"2450\":1,\"2569\":1,\"2683\":1,\"2684\":1,\"2686\":1,\"2915\":1,\"2916\":1,\"2935\":1,\"2958\":1,\"2959\":1,\"3372\":1,\"3816\":1,\"3886\":1,\"5342\":1,\"5625\":1,\"5934\":1,\"6587\":1,\"6588\":1,\"6607\":1,\"6630\":1,\"6631\":1,\"6740\":1}}],[\"调优和监控\",{\"1\":{\"3852\":1,\"6006\":1}}],[\"调优时应尽量做到让对象在minor\",{\"1\":{\"395\":1}}],[\"调节所要发送数据的量\",{\"1\":{\"2668\":1}}],[\"调度优先级高的进程运行\",{\"1\":{\"1933\":1}}],[\"调度算法同样也是顾名思义\",{\"1\":{\"1917\":1}}],[\"调度的单位\",{\"1\":{\"1900\":1}}],[\"调用接口\",{\"1\":{\"4541\":1}}],[\"调用方法要和本地抽象方法的签名完全一致\",{\"1\":{\"4532\":1,\"6149\":1}}],[\"调用collections\",{\"1\":{\"4275\":1}}],[\"调用userservice的adduser方法将自动触发前置通知和后置通知的执行\",{\"1\":{\"4035\":1}}],[\"调用商品服务获取商品信息\",{\"1\":{\"3989\":1}}],[\"调用执行自己的线程运行任务\",{\"1\":{\"3871\":1,\"6026\":1}}],[\"调用send\",{\"1\":{\"1546\":1}}],[\"调用get\",{\"1\":{\"1543\":1}}],[\"调用beanpostprocesser的后置方法postprocessafterinitializaiton\",{\"1\":{\"4136\":1}}],[\"调用beanpostprocesser的前置初始化方法postprocessbeforeinitialization\",{\"1\":{\"4133\":1}}],[\"调用bean自身定义的init方法\",{\"1\":{\"4135\":1}}],[\"调用b\",{\"1\":{\"1373\":1}}],[\"调用者就会等待被调用者的响应\",{\"1\":{\"4519\":1,\"6136\":1}}],[\"调用者无需等待被调用的方法完全执行完毕\",{\"1\":{\"1373\":1}}],[\"调用者将在调用时立即返回\",{\"1\":{\"1371\":1}}],[\"调用者管理该\",{\"1\":{\"1186\":1}}],[\"调用xxxaware接口\",{\"1\":{\"1173\":1}}],[\"调用\",{\"1\":{\"531\":1,\"1175\":1,\"1176\":1,\"1177\":1,\"1179\":1,\"1180\":1,\"1181\":1,\"1197\":1,\"1390\":1,\"1517\":1,\"3561\":1,\"5419\":1,\"5549\":1}}],[\"调用它的方法\",{\"1\":{\"524\":1,\"5412\":1}}],[\"调用自己的\",{\"1\":{\"449\":1,\"5342\":1}}],[\"调用父加载器\",{\"1\":{\"448\":1,\"5341\":1}}],[\"非对称密钥也叫公开密钥加密\",{\"1\":{\"5094\":1}}],[\"非对称加密缺点\",{\"1\":{\"5102\":1}}],[\"非对称加密优点\",{\"1\":{\"5101\":1}}],[\"非对称加密\",{\"1\":{\"5089\":1}}],[\"非故障的节点在合理的时间内返回合理的响应\",{\"1\":{\"4640\":1,\"6213\":1}}],[\"非公平锁\",{\"0\":{\"3838\":1,\"5954\":1},\"1\":{\"3842\":1,\"5958\":1}}],[\"非常高\",{\"1\":{\"4788\":1,\"4789\":1}}],[\"非常容易混淆我们的判断\",{\"1\":{\"3624\":1}}],[\"非常小\",{\"1\":{\"3489\":1}}],[\"非常不灵活\",{\"1\":{\"890\":1,\"5508\":1}}],[\"非精准浮点\",{\"1\":{\"3073\":1,\"6724\":1}}],[\"非叶子节点只有指针和\",{\"1\":{\"2770\":1,\"6439\":1}}],[\"非聚集索引\",{\"1\":{\"2766\":1,\"2776\":1,\"6435\":1,\"6445\":1}}],[\"非聚簇索引也依赖于有序的数据\",{\"1\":{\"2810\":1,\"6482\":1}}],[\"非聚簇索引的叶子节点存储索引键值和行指针\",{\"1\":{\"4250\":1}}],[\"非聚簇索引的叶子节点是不存放数据的\",{\"1\":{\"2808\":1,\"6480\":1}}],[\"非聚簇索引的叶子节点并不一定存放数据的指针\",{\"1\":{\"2806\":1,\"6478\":1}}],[\"非聚簇索引的更新代价就没有聚簇索引那么大了\",{\"1\":{\"2808\":1,\"6480\":1}}],[\"非聚簇索引\",{\"0\":{\"6476\":1},\"1\":{\"2766\":1,\"2776\":1,\"2805\":1,\"4247\":1,\"6435\":1,\"6445\":1,\"6477\":1}}],[\"非冗余和按序的\",{\"1\":{\"2453\":1}}],[\"非抢占式\",{\"1\":{\"1932\":1}}],[\"非抢占式和抢占式\",{\"1\":{\"1931\":1}}],[\"非活跃\",{\"1\":{\"1703\":1}}],[\"非运行时异常\",{\"1\":{\"461\":1,\"5356\":1}}],[\"非空父类的类加载器无法找到相应的类\",{\"1\":{\"444\":1,\"5337\":1}}],[\"非堆\",{\"1\":{\"240\":1,\"280\":1}}],[\"启动两台heima\",{\"1\":{\"4899\":1,\"7269\":1}}],[\"启动发现集群没有处于\",{\"1\":{\"4617\":1,\"6190\":1}}],[\"启动了\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"启动时需要进行系统的\",{\"1\":{\"4614\":1,\"6187\":1}}],[\"启动类上增加\",{\"1\":{\"4546\":1}}],[\"启动类加载器\",{\"1\":{\"425\":1,\"5316\":1}}],[\"启动完成\",{\"1\":{\"4239\":1}}],[\"启动completed\",{\"1\":{\"4238\":1}}],[\"启动参数或增大堆内存并不能从根本上解决这个问题\",{\"1\":{\"3591\":1}}],[\"启动\",{\"1\":{\"3295\":1}}],[\"启动事务时\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"启动项目\",{\"1\":{\"1345\":1,\"5670\":1}}],[\"启动引导程序bootstrap\",{\"1\":{\"1301\":1}}],[\"启动的时候它打的那些日志\",{\"0\":{\"4230\":1}}],[\"启动的时候\",{\"1\":{\"421\":1,\"5312\":1}}],[\"启动的时候就确定了\",{\"1\":{\"242\":1}}],[\"到此\",{\"1\":{\"7052\":1}}],[\"到备库执行的时候\",{\"1\":{\"2934\":1,\"6606\":1}}],[\"到对应服务器上通过top指令\",{\"1\":{\"2123\":1}}],[\"到用户空间\",{\"1\":{\"1788\":1,\"6292\":1}}],[\"到第五天的时候消息达到了\",{\"1\":{\"1455\":1,\"6903\":1}}],[\"到底synchronizedlist和vector有没有区别\",{\"1\":{\"806\":1}}],[\"到底应该是\",{\"1\":{\"588\":1}}],[\"到\",{\"1\":{\"419\":1,\"2025\":1,\"5310\":1}}],[\"简写\",{\"1\":{\"7073\":1}}],[\"简述java内存模型\",{\"0\":{\"5904\":1}}],[\"简而言之就是\",{\"1\":{\"4647\":1,\"6220\":1}}],[\"简化分布式系统开发\",{\"1\":{\"4489\":1,\"6122\":1}}],[\"简化版\",{\"1\":{\"1189\":1}}],[\"简言之\",{\"1\":{\"3808\":1,\"5819\":1}}],[\"简单性\",{\"1\":{\"4863\":1}}],[\"简单说一下\",{\"0\":{\"4154\":1}}],[\"简单说就是可以一步到位\",{\"1\":{\"747\":1}}],[\"简单限流可以用到\",{\"1\":{\"3106\":1,\"6762\":1}}],[\"简单动态字符串\",{\"1\":{\"3099\":1,\"6755\":1}}],[\"简单对比一下两者\",{\"1\":{\"2731\":1}}],[\"简单文本的形式\",{\"1\":{\"2262\":1}}],[\"简单\",{\"1\":{\"2260\":1,\"2261\":1}}],[\"简单使用\",{\"0\":{\"2180\":1}}],[\"简单点理解就是传递消息的队列\",{\"1\":{\"1406\":1}}],[\"简单点说\",{\"1\":{\"1036\":1}}],[\"简单的说\",{\"1\":{\"3312\":1}}],[\"简单的说就是通信的两方的一种约定\",{\"1\":{\"1975\":1,\"6256\":1}}],[\"简单的取模哈希的结果会更加均匀\",{\"1\":{\"1054\":1,\"1058\":1}}],[\"简单的做法是先求取出键值的hashcode\",{\"1\":{\"1031\":1}}],[\"简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象\",{\"1\":{\"869\":1,\"5499\":1}}],[\"简单⼯⼚模式指由⼀个⼯⼚对象来创建实例\",{\"1\":{\"862\":1,\"5492\":1}}],[\"简单翻译\",{\"1\":{\"568\":1}}],[\"简单总结一下双亲委派模型的执行流程\",{\"1\":{\"446\":1,\"5339\":1}}],[\"简单来说\",{\"1\":{\"419\":1,\"573\":1,\"1192\":1,\"1268\":1,\"2539\":1,\"5310\":1,\"5545\":1}}],[\"简介\",{\"0\":{\"5455\":1,\"6208\":1},\"1\":{\"397\":1}}],[\"数量越多的时候\",{\"1\":{\"6269\":1}}],[\"数量相同\",{\"1\":{\"352\":1}}],[\"数学建模比赛中遇到的最大困难\",{\"1\":{\"4328\":1,\"7153\":1}}],[\"数学函数库\",{\"1\":{\"3449\":1}}],[\"数值类型同样是直接进行计算的\",{\"1\":{\"4116\":1}}],[\"数最多为\",{\"1\":{\"2477\":1}}],[\"数据报重新封装成链路层帧\",{\"1\":{\"7055\":1}}],[\"数据报转发到与主机\",{\"1\":{\"7051\":1}}],[\"数据报\",{\"1\":{\"7050\":1}}],[\"数据报文时\",{\"1\":{\"7034\":1}}],[\"数据报文\",{\"1\":{\"7033\":1}}],[\"数据报在物理上传输的过程中\",{\"1\":{\"7026\":1}}],[\"数据拷贝\",{\"1\":{\"6288\":1}}],[\"数据中心id\",{\"1\":{\"4975\":1}}],[\"数据量没有那么大\",{\"1\":{\"4803\":1}}],[\"数据合规保留\",{\"1\":{\"4735\":1}}],[\"数据不能存在单个节点\",{\"1\":{\"4576\":1}}],[\"数据不丢失\",{\"1\":{\"1443\":1}}],[\"数据存储+事件监听\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"数据存储方式不同\",{\"1\":{\"4245\":1}}],[\"数据监控等\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"数据行在表中\",{\"1\":{\"4247\":1}}],[\"数据只能单向流动\",{\"1\":{\"3460\":1}}],[\"数据满足完整性约束\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"数据表的主键列使用的就是主键索引\",{\"1\":{\"2785\":1,\"6454\":1}}],[\"数据类型底层数据结构就只由\",{\"1\":{\"3113\":1,\"6769\":1}}],[\"数据类型\",{\"1\":{\"2772\":1,\"6441\":1}}],[\"数据的最大长度\",{\"1\":{\"2568\":1}}],[\"数据的同步\",{\"1\":{\"1445\":1}}],[\"数据包\",{\"1\":{\"2501\":1}}],[\"数据可以无差错\",{\"1\":{\"2489\":1,\"4264\":1}}],[\"数据可靠\",{\"1\":{\"1538\":1}}],[\"数据字节数\",{\"1\":{\"2444\":1}}],[\"数据并不是资源的全部\",{\"1\":{\"2198\":1}}],[\"数据\",{\"1\":{\"2196\":1,\"2197\":1,\"2762\":1,\"3179\":1,\"6431\":1,\"6837\":1}}],[\"数据库\",{\"0\":{\"7310\":1}}],[\"数据库和缓存数据强一致场景\",{\"1\":{\"4671\":1,\"7190\":1}}],[\"数据库你都用过哪些\",{\"1\":{\"4385\":1}}],[\"数据库的高级调优有做过嘛\",{\"0\":{\"4226\":1}}],[\"数据库的压力骤增\",{\"1\":{\"4151\":1}}],[\"数据库的压力可想而知\",{\"1\":{\"3275\":1,\"6880\":1}}],[\"数据库中的左连接和右连接\",{\"0\":{\"4164\":1}}],[\"数据库中的数据查询优化\",{\"1\":{\"2162\":1}}],[\"数据库只存储文件地址信息\",{\"1\":{\"3069\":1,\"6720\":1}}],[\"数据库为该行数据生成一个read\",{\"1\":{\"3050\":1}}],[\"数据库允许多个并发事务同时对其数据进行读写和修改的能力\",{\"1\":{\"2973\":1,\"6645\":1}}],[\"数据库保持一致性状态\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"数据库会自动给主键赋值递增的值\",{\"1\":{\"2920\":1,\"6592\":1}}],[\"数据库较难优化\",{\"1\":{\"2824\":1,\"6496\":1}}],[\"数据库重新启动的时候会保证数据库恢复到崩溃前的状态\",{\"1\":{\"2744\":1,\"6413\":1}}],[\"数据库控制台以更好地测试应用程序\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"数据有更新时\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"数据块\",{\"1\":{\"1957\":1}}],[\"数据分段\",{\"1\":{\"1640\":1}}],[\"数据压缩\",{\"1\":{\"1568\":1}}],[\"数据保存的策略\",{\"0\":{\"1447\":1,\"6895\":1}}],[\"数据保持一致\",{\"1\":{\"1221\":1,\"5573\":1}}],[\"数据验证\",{\"1\":{\"1203\":1,\"5555\":1}}],[\"数据格式化\",{\"1\":{\"1202\":1,\"5554\":1}}],[\"数据转换\",{\"1\":{\"1201\":1,\"5553\":1}}],[\"数据增长区别\",{\"1\":{\"831\":1}}],[\"数据结构及适用场景\",{\"0\":{\"6752\":1}}],[\"数据结构来实现了\",{\"1\":{\"3128\":1,\"3136\":1,\"6784\":1,\"6792\":1}}],[\"数据结构来描述进程的\",{\"1\":{\"1860\":1}}],[\"数据结构\",{\"0\":{\"554\":1,\"3098\":1,\"3109\":1,\"3117\":1,\"3124\":1,\"3132\":1,\"5448\":1,\"6754\":1,\"6765\":1,\"6773\":1,\"6780\":1,\"6788\":1},\"1\":{\"765\":1,\"4088\":1}}],[\"数组里的数据\",{\"1\":{\"3101\":1,\"6757\":1}}],[\"数组中的每个元素只访问一次\",{\"1\":{\"1627\":1}}],[\"数组的每个成员是一个链表\",{\"1\":{\"1005\":1}}],[\"数组的特点是\",{\"1\":{\"1004\":1}}],[\"数组和链表\",{\"1\":{\"1004\":1}}],[\"数组\",{\"0\":{\"555\":1,\"5449\":1}}],[\"数组类没有对应的二进制字节流\",{\"1\":{\"418\":1,\"5309\":1}}],[\"数组类不是通过\",{\"1\":{\"418\":1,\"5309\":1}}],[\"连同空白行也会有行号\",{\"1\":{\"3415\":1}}],[\"连同文件的属性一起复制过去\",{\"1\":{\"3406\":1}}],[\"连用\",{\"1\":{\"3319\":2}}],[\"连行级锁都不支持\",{\"1\":{\"2747\":1,\"6416\":1}}],[\"连接方式\",{\"1\":{\"7061\":1}}],[\"连接到一起\",{\"1\":{\"5076\":1,\"5082\":1}}],[\"连接结束\",{\"1\":{\"2722\":1,\"7017\":1}}],[\"连接的\",{\"1\":{\"2712\":2}}],[\"连接的重复建立和断开所造成的额外开销\",{\"1\":{\"2293\":1}}],[\"连接是由四元组\",{\"1\":{\"2712\":1}}],[\"连接是断开的流程是什么\",{\"1\":{\"2438\":1}}],[\"连接已经死亡\",{\"1\":{\"2635\":1}}],[\"连接中占据着非常重要的作用\",{\"1\":{\"2553\":1}}],[\"连接中出现异常必须强制断开连接\",{\"1\":{\"2448\":1}}],[\"连接使用三次握手的首要原因\",{\"1\":{\"2537\":1}}],[\"连接数远不能达到理论上限\",{\"1\":{\"2478\":1}}],[\"连接数\",{\"1\":{\"2477\":1}}],[\"连接吗\",{\"0\":{\"2641\":1,\"2644\":1},\"1\":{\"2439\":1,\"2440\":1}}],[\"连接时\",{\"0\":{\"2560\":1},\"1\":{\"2412\":1}}],[\"连接呢\",{\"0\":{\"2466\":1},\"1\":{\"2405\":1}}],[\"连接建立\",{\"1\":{\"7072\":1}}],[\"连接建立是需要三次握手\",{\"1\":{\"2578\":1}}],[\"连接建立相对简单\",{\"1\":{\"2307\":1}}],[\"连接建立和断开\",{\"1\":{\"2292\":1}}],[\"连接里面\",{\"1\":{\"2297\":1}}],[\"连接状态\",{\"1\":{\"2294\":1}}],[\"连接问题\",{\"1\":{\"2293\":1}}],[\"连接\",{\"0\":{\"2460\":1},\"1\":{\"2292\":1,\"2362\":1,\"2404\":1,\"2482\":1,\"2630\":1,\"2718\":1,\"4257\":1,\"7013\":1,\"7073\":1}}],[\"连接远程资源\",{\"1\":{\"2111\":1}}],[\"连接过程又可分为三步\",{\"1\":{\"413\":1,\"5303\":1}}],[\"连线表示垃圾收集器可以配合使用\",{\"1\":{\"341\":1}}],[\"系统通过用户名找到与之对应的\",{\"1\":{\"5081\":1}}],[\"系统将\",{\"1\":{\"5076\":1,\"5082\":1}}],[\"系统为用户生成\",{\"1\":{\"5075\":1}}],[\"系统在绝大部分时候所处的状态\",{\"1\":{\"4651\":1,\"6224\":1}}],[\"系统会用大部分的时间来处理\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"系统会首先判断当前类是否被加载过\",{\"1\":{\"422\":1,\"447\":1,\"5313\":1,\"5340\":1}}],[\"系统库\",{\"1\":{\"3448\":1}}],[\"系统的重要组成部分\",{\"1\":{\"3447\":1}}],[\"系统直接提供了一些函数用于对文件和设备进行访问和控制\",{\"1\":{\"3165\":1,\"6821\":1}}],[\"系统内核缓存区的数据还未同步\",{\"1\":{\"3156\":1,\"6812\":1}}],[\"系统内核将错误信息通知给上层应用程序\",{\"1\":{\"2635\":1}}],[\"系统内存大小\",{\"1\":{\"250\":2}}],[\"系统支持\",{\"1\":{\"1812\":1,\"6319\":1}}],[\"系统调用也是有一定的开销的的\",{\"1\":{\"6280\":1}}],[\"系统调用对于应用程序来说\",{\"1\":{\"3432\":1}}],[\"系统调用再做一遍解释\",{\"1\":{\"3166\":1,\"6822\":1}}],[\"系统调用拿到了已经建立连接的\",{\"1\":{\"2643\":1}}],[\"系统调用并不参与\",{\"1\":{\"2643\":1}}],[\"系统调用\",{\"1\":{\"1812\":1,\"3161\":1,\"3162\":1,\"3165\":1,\"6319\":1,\"6817\":1,\"6818\":1,\"6821\":1}}],[\"系统调用的过程发生了点变化\",{\"1\":{\"1802\":1,\"6308\":1}}],[\"系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里\",{\"1\":{\"1786\":1,\"6290\":1}}],[\"系统调用函数会直接把内核缓冲区里的数据\",{\"1\":{\"1788\":1,\"6292\":1}}],[\"系统调用函数\",{\"1\":{\"1786\":1,\"1812\":1,\"6290\":1,\"6319\":1}}],[\"系统中的某个节点在进行写操作\",{\"1\":{\"4649\":1,\"6222\":1}}],[\"系统中查看\",{\"0\":{\"2533\":1},\"1\":{\"2410\":1}}],[\"系统中\",{\"1\":{\"1770\":1}}],[\"系统变量所指定的路径下的所有类\",{\"1\":{\"426\":1,\"5317\":1}}],[\"系统加载\",{\"1\":{\"413\":1,\"5303\":1}}],[\"ugoa\",{\"1\":{\"3411\":1}}],[\"u\",{\"1\":{\"3386\":1,\"3387\":1,\"3411\":1,\"3700\":1,\"5869\":1}}],[\"ubuntu14\",{\"1\":{\"3307\":1}}],[\"uuid\",{\"1\":{\"2802\":1,\"4910\":1,\"6474\":1}}],[\"udp区别\",{\"0\":{\"4256\":1}}],[\"udp\",{\"0\":{\"2481\":1,\"2503\":1,\"2516\":1,\"2707\":1,\"7024\":1},\"1\":{\"2267\":1,\"2406\":1,\"2407\":1,\"2457\":1,\"2480\":1,\"2484\":1,\"2487\":1,\"2490\":3,\"2493\":2,\"2496\":1,\"2499\":1,\"2502\":1,\"2507\":2,\"2512\":1,\"2513\":2,\"2514\":1,\"2515\":2,\"2519\":1,\"2520\":3,\"2521\":2,\"2522\":1,\"2708\":1,\"2709\":3,\"3458\":1,\"4259\":1,\"4262\":1,\"4265\":1,\"6989\":3,\"7071\":2}}],[\"upstream\",{\"1\":{\"4141\":1}}],[\"up\",{\"1\":{\"3032\":1,\"3034\":2,\"3046\":1,\"4979\":1,\"4981\":1,\"6698\":1,\"6701\":2}}],[\"uploadfile\",{\"1\":{\"2096\":5}}],[\"upload\",{\"1\":{\"2085\":1,\"2091\":1,\"2096\":1}}],[\"upper\",{\"1\":{\"1667\":1}}],[\"updatebymap\",{\"1\":{\"4981\":1}}],[\"updatebyid\",{\"1\":{\"4857\":1}}],[\"updatewmnews\",{\"1\":{\"4857\":7}}],[\"update等语句\",{\"1\":{\"2856\":1,\"6528\":1}}],[\"update\",{\"1\":{\"1134\":1,\"1147\":1,\"2912\":1,\"2939\":1,\"3013\":2,\"3022\":2,\"3041\":1,\"4979\":1,\"5713\":1,\"5727\":1,\"6584\":1,\"6611\":1,\"6685\":2,\"6709\":1}}],[\"utm\",{\"1\":{\"1493\":2,\"2136\":2,\"3390\":3,\"6946\":2,\"6955\":3}}],[\"utilization工具观察老年代占用率\",{\"1\":{\"3992\":1}}],[\"utils\",{\"1\":{\"1466\":4,\"4857\":1,\"6914\":4}}],[\"util包中的一个类\",{\"1\":{\"804\":1}}],[\"util\",{\"1\":{\"514\":2,\"523\":1,\"527\":1,\"530\":1,\"804\":1,\"3680\":1,\"3772\":3,\"3855\":4,\"4857\":2,\"4981\":1,\"4999\":5,\"5402\":2,\"5411\":1,\"5415\":1,\"5418\":1,\"5849\":1,\"6009\":4}}],[\"uri\",{\"1\":{\"1197\":2,\"2264\":1,\"5549\":2}}],[\"urlconnection\",{\"1\":{\"2111\":1}}],[\"url\",{\"1\":{\"1197\":1,\"2111\":4,\"2199\":1,\"2200\":1,\"2201\":1,\"2202\":2,\"2264\":1,\"5549\":1,\"7077\":3}}],[\"us\",{\"1\":{\"4782\":1}}],[\"usr\",{\"1\":{\"3494\":1}}],[\"used\",{\"1\":{\"3181\":1,\"3184\":1,\"3188\":1,\"3189\":1,\"6839\":1,\"6842\":1,\"6846\":1,\"6847\":1}}],[\"username\",{\"1\":{\"5042\":1,\"5048\":1}}],[\"username=18666666666\",{\"1\":{\"5041\":1,\"5047\":1}}],[\"user>\",{\"1\":{\"4755\":1}}],[\"usermapper\",{\"1\":{\"4748\":2,\"4750\":1,\"4753\":1}}],[\"users\",{\"1\":{\"4187\":1}}],[\"userserviceimpl\",{\"1\":{\"4029\":1,\"4031\":2,\"4755\":1}}],[\"userservice\",{\"1\":{\"4029\":2,\"4755\":1}}],[\"user就是这么做的\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"user\",{\"1\":{\"1095\":1,\"1097\":1,\"2060\":1,\"4748\":2,\"4750\":2,\"4755\":1,\"5765\":1}}],[\"userdaoimpl\",{\"1\":{\"1097\":1}}],[\"userdao\",{\"1\":{\"1095\":1,\"1097\":1}}],[\"use\",{\"1\":{\"478\":1,\"3772\":1,\"3857\":3,\"5373\":1,\"6011\":3}}],[\"using\",{\"1\":{\"409\":1,\"1062\":1,\"5298\":1}}],[\"unmodified\",{\"1\":{\"7063\":1}}],[\"unless\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"unlock\",{\"1\":{\"2859\":1,\"2884\":1,\"6531\":1,\"6556\":1}}],[\"unloading\",{\"1\":{\"409\":1,\"5298\":1}}],[\"unsafe这个类中定义了\",{\"1\":{\"3679\":1,\"5848\":1}}],[\"undo\",{\"0\":{\"6705\":1},\"1\":{\"2977\":1,\"3019\":2,\"3029\":1,\"3032\":1,\"3038\":1,\"3040\":1,\"3041\":3,\"3042\":3,\"6649\":1,\"6691\":2,\"6695\":1,\"6698\":1,\"6706\":1,\"6708\":1,\"6709\":3,\"6710\":3}}],[\"undefined\",{\"1\":{\"198\":1}}],[\"union\",{\"1\":{\"6740\":1}}],[\"unionfs\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"unix\",{\"1\":{\"3494\":1}}],[\"unique\",{\"1\":{\"2791\":1,\"6462\":1}}],[\"unit\",{\"1\":{\"1673\":1,\"3857\":4,\"3864\":1,\"6011\":4,\"6018\":1}}],[\"unavailable\",{\"1\":{\"2212\":1}}],[\"uncommitted\",{\"1\":{\"1232\":1,\"2997\":1,\"5584\":1,\"6669\":1}}],[\"unchecked\",{\"0\":{\"463\":1,\"5358\":1},\"1\":{\"3765\":1}}],[\"解密的场景\",{\"1\":{\"5658\":1}}],[\"解码成java\",{\"1\":{\"4536\":1,\"6151\":1}}],[\"解锁时\",{\"1\":{\"3819\":1,\"5937\":1}}],[\"解锁\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"解锁操作\",{\"1\":{\"1987\":1,\"6246\":1}}],[\"解压之后双击\",{\"1\":{\"3574\":1}}],[\"解压缩的过程中\",{\"1\":{\"3419\":1}}],[\"解打包或解压缩的功能\",{\"1\":{\"3419\":1}}],[\"解法方案有很多种\",{\"1\":{\"2277\":1}}],[\"解耦\",{\"1\":{\"1406\":1,\"1411\":1,\"1412\":1}}],[\"解耦了\",{\"1\":{\"606\":1}}],[\"解决kafka重复消费\",{\"1\":{\"4678\":1}}],[\"解决办法\",{\"1\":{\"4670\":1,\"4676\":1,\"4806\":1,\"7189\":1,\"7195\":1,\"7203\":1}}],[\"解决可重复读隔离级别下幻读问题\",{\"1\":{\"4252\":1}}],[\"解决什么问题\",{\"0\":{\"4251\":1}}],[\"解决资源不足的问题\",{\"1\":{\"3908\":1,\"6055\":1}}],[\"解决的方案有两种\",{\"1\":{\"3011\":1,\"6683\":1}}],[\"解决了\",{\"1\":{\"2365\":1}}],[\"解决了程序本身不需要关心具体的物理内存地址的问题\",{\"1\":{\"1646\":1}}],[\"解决redis缓存穿透逻辑\",{\"0\":{\"2183\":1}}],[\"解决redis缓存穿透问题\",{\"1\":{\"2160\":1}}],[\"解决oom问题思路\",{\"0\":{\"2120\":1}}],[\"解决\",{\"1\":{\"1652\":1,\"3546\":1}}],[\"解决大量日志传输的问题\",{\"1\":{\"1410\":1}}],[\"解决跨域问题\",{\"1\":{\"1398\":1}}],[\"解决方案是将key的过期时间后面加上一个随机数\",{\"1\":{\"4146\":1}}],[\"解决方案\",{\"0\":{\"6950\":1},\"1\":{\"399\":1,\"3693\":1,\"4150\":1,\"4902\":1,\"5609\":1,\"5862\":1,\"7272\":1}}],[\"解释器\",{\"1\":{\"854\":1,\"5484\":1}}],[\"解析请求对应的\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"解析\",{\"1\":{\"409\":1,\"2717\":1,\"5298\":1,\"7012\":1,\"7051\":1}}],[\"验证是对自己的问询\",{\"1\":{\"7040\":1}}],[\"验证数据是否被篡改\",{\"1\":{\"5086\":1}}],[\"验证数据的有效性\",{\"1\":{\"1203\":1,\"5555\":1}}],[\"验证结果存储到\",{\"1\":{\"1203\":1,\"5555\":1}}],[\"验证代码如下\",{\"1\":{\"992\":1}}],[\"验证\",{\"1\":{\"409\":1,\"413\":1,\"5298\":1,\"5303\":1}}],[\"个方案都是比较经典的\",{\"1\":{\"6333\":1}}],[\"个问题\",{\"1\":{\"4883\":1,\"7261\":1}}],[\"个最重要的参数\",{\"1\":{\"3858\":1,\"6012\":1}}],[\"个文件之后\",{\"1\":{\"3625\":1}}],[\"个为一组\",{\"1\":{\"3510\":1}}],[\"个位当做二进制数字的位\",{\"1\":{\"3410\":1}}],[\"个哨兵为例\",{\"1\":{\"3214\":1}}],[\"个特性\",{\"1\":{\"2970\":1,\"6642\":1}}],[\"个数据包被收到了\",{\"1\":{\"2703\":1}}],[\"个字节可以存储\",{\"1\":{\"3075\":1,\"6726\":1}}],[\"个字节\",{\"1\":{\"2495\":1,\"2496\":1}}],[\"个字节数据到达时\",{\"1\":{\"2366\":1}}],[\"个字节数据\",{\"1\":{\"2366\":1}}],[\"个记录\",{\"1\":{\"2043\":2,\"5748\":2}}],[\"个点组成的圆环称为hash环\",{\"1\":{\"2022\":1}}],[\"个缺点\",{\"1\":{\"1828\":1,\"6357\":1}}],[\"个区域\",{\"1\":{\"1710\":1}}],[\"个页表\",{\"1\":{\"1664\":1}}],[\"个请求出去\",{\"1\":{\"1427\":1}}],[\"个请求进\",{\"1\":{\"1427\":1}}],[\"个请求进来\",{\"1\":{\"1427\":1}}],[\"个请求进行处理\",{\"1\":{\"1426\":1}}],[\"个请求放到\",{\"1\":{\"1424\":1}}],[\"个请求\",{\"1\":{\"1424\":1,\"1425\":2}}],[\"个\",{\"1\":{\"1409\":1,\"1411\":1,\"1664\":1,\"2614\":1,\"2615\":1,\"2832\":1,\"3111\":1,\"3119\":1,\"3126\":1,\"3134\":1,\"6504\":1,\"6767\":1,\"6775\":1,\"6782\":1,\"6790\":1,\"7072\":2}}],[\"个参数\",{\"1\":{\"901\":1,\"5519\":1}}],[\"个连续的红色节点\",{\"1\":{\"699\":1,\"5466\":1}}],[\"个结点\",{\"1\":{\"677\":1}}],[\"个结点的有限集t\",{\"1\":{\"645\":1}}],[\"个互不相交的子集t1\",{\"1\":{\"647\":1}}],[\"个阶段的顺序如下图所示\",{\"1\":{\"410\":1,\"5299\":1}}],[\"个阶段\",{\"1\":{\"409\":1,\"5298\":1}}],[\"个垃圾收集器\",{\"1\":{\"341\":1}}],[\"强制从新从主内存加载数据\",{\"1\":{\"5916\":1}}],[\"强制重新从主内存加载数据\",{\"1\":{\"3717\":1}}],[\"强制的意思\",{\"1\":{\"3408\":1}}],[\"强缓存是利用下面这两个\",{\"1\":{\"2229\":1}}],[\"强缓存指的是只要浏览器判断缓存没有过期\",{\"1\":{\"2228\":1}}],[\"强烈建议能不使用此方法就别使用\",{\"1\":{\"402\":1}}],[\"强引用\",{\"1\":{\"309\":1}}],[\"即为主机\",{\"1\":{\"7038\":1}}],[\"即允许同时通过单一的http\",{\"1\":{\"6983\":1,\"7006\":1}}],[\"即允许该进程在该时间段中运行\",{\"1\":{\"1924\":1}}],[\"即用户态和内核态都指向了就绪链表\",{\"1\":{\"6270\":1}}],[\"即上面我们说的三个角色的总称\",{\"1\":{\"6178\":1}}],[\"即上面提到的fast\",{\"1\":{\"796\":1}}],[\"即盐值salt\",{\"1\":{\"5071\":1}}],[\"即所有通信是正确的而非伪造的\",{\"1\":{\"4589\":1}}],[\"即独立运行在某个进程中\",{\"1\":{\"4480\":1,\"6113\":1}}],[\"即服务单元\",{\"1\":{\"4468\":1,\"6101\":1}}],[\"即最后一次put进去的value会成为该key对应的值\",{\"1\":{\"4200\":1}}],[\"即以左表为主\",{\"1\":{\"4165\":1}}],[\"即实现了sso\",{\"1\":{\"4062\":1}}],[\"即永远不会阻塞\",{\"1\":{\"3880\":1,\"6035\":1}}],[\"即队列同步器\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"即共享内存的诸进程必须共处同一个计算机系统\",{\"1\":{\"3471\":1}}],[\"即每个权限对应的数字权值为\",{\"1\":{\"3410\":1}}],[\"即每个分区多个副本的从副本\",{\"1\":{\"1445\":1}}],[\"即每个分区多个副本的主副本\",{\"1\":{\"1444\":1}}],[\"即redis哨兵\",{\"1\":{\"3192\":1}}],[\"即rr级别下\",{\"1\":{\"3056\":1}}],[\"即从最近的一次修改查起\",{\"1\":{\"3045\":1}}],[\"即遍历链表的db\",{\"1\":{\"3045\":1}}],[\"即当前事务id\",{\"1\":{\"3045\":1}}],[\"即下一个将被分配的事务\",{\"1\":{\"3033\":1,\"6700\":1}}],[\"即快照读可能读到的并不一定是数据的最新版本\",{\"1\":{\"3024\":1}}],[\"即mvcc\",{\"1\":{\"3024\":1}}],[\"即不存在多个线程的竞争时\",{\"1\":{\"3799\":1,\"5811\":1}}],[\"即不加锁的非阻塞读\",{\"1\":{\"3024\":1}}],[\"即不同的元素被映射到了相同的位上\",{\"1\":{\"2149\":1}}],[\"即便系统故障也不会丢失\",{\"1\":{\"2974\":1,\"6646\":1}}],[\"即能保护该记录\",{\"1\":{\"2957\":1,\"6629\":1}}],[\"即两个事务可以同时持有包含共同间隙范围的间隙锁\",{\"1\":{\"2954\":1,\"6626\":1}}],[\"即索引结构和数据分开存放的索引\",{\"1\":{\"2805\":1,\"6477\":1}}],[\"即索引结构和数据一起存放的索引\",{\"1\":{\"2796\":1,\"6468\":1}}],[\"即一种基于模板和要改变的数据\",{\"1\":{\"4840\":1,\"7229\":1}}],[\"即一条连接只有两个端点\",{\"1\":{\"2486\":1,\"4261\":1}}],[\"即一个\",{\"1\":{\"1525\":1}}],[\"即刻传输数据\",{\"1\":{\"2484\":1,\"4259\":1}}],[\"即将暂时获取不到锁的线程加入到队列中\",{\"1\":{\"3642\":1,\"5883\":1}}],[\"即将开业\",{\"1\":{\"2210\":1}}],[\"即将要执行的指令代码\",{\"1\":{\"189\":1}}],[\"即堆空间\",{\"1\":{\"2119\":1}}],[\"即考虑如下原因\",{\"1\":{\"2117\":1}}],[\"即拿到订单消息\",{\"1\":{\"2053\":1,\"5758\":1}}],[\"即删除消息\",{\"1\":{\"2052\":1,\"5757\":1}}],[\"即commit执行结果到mq服务器\",{\"1\":{\"2051\":1,\"5756\":1}}],[\"即对每一个服务节点计算多个哈希\",{\"1\":{\"2035\":1}}],[\"即可\",{\"1\":{\"3574\":1}}],[\"即可快速取出对应的值\",{\"1\":{\"2755\":1,\"6424\":1}}],[\"即可在同一个\",{\"1\":{\"2297\":1}}],[\"即可将3万张图片随机的分布到3台缓存服务器上了\",{\"1\":{\"2010\":1}}],[\"即可得出图片应该存放在哪一台缓存服务器上\",{\"1\":{\"2010\":1}}],[\"即时消息中的单对单聊天和群聊\",{\"1\":{\"1586\":1}}],[\"即确定哪个partition由哪个consumer来消费\",{\"1\":{\"1469\":1,\"6917\":1}}],[\"即副本\",{\"1\":{\"1443\":1}}],[\"即消费者组\",{\"1\":{\"1439\":1}}],[\"即消息消费者\",{\"1\":{\"1438\":1}}],[\"即消息生产者\",{\"1\":{\"1437\":1}}],[\"即若启动过程中抛出异常\",{\"1\":{\"1391\":1}}],[\"即在某个时间点上没有字节码正在执行时\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"即在就绪状态的进程除cpu之外\",{\"1\":{\"1854\":1,\"6230\":1}}],[\"即在springboot启动过程的不同阶段用来发射内置的生命周期事件\",{\"1\":{\"1382\":1}}],[\"即在不进行扰动计算的情况下\",{\"1\":{\"1037\":1}}],[\"即首先尝试从bean工厂中获取bean\",{\"1\":{\"1168\":1}}],[\"即形成了拒绝服务攻击\",{\"1\":{\"1066\":1}}],[\"即把x右移3位\",{\"1\":{\"1024\":1}}],[\"即0111\",{\"1\":{\"1022\":1}}],[\"即他在这个数组中的下标\",{\"1\":{\"1008\":1}}],[\"即本文的主角hash\",{\"1\":{\"1005\":1}}],[\"即增加其额外功能\",{\"1\":{\"872\":1}}],[\"即增加了间歇性停顿的次数\",{\"1\":{\"402\":1}}],[\"即list的size个数的elementdata\",{\"1\":{\"788\":1}}],[\"即排序中的第一个\",{\"1\":{\"769\":1}}],[\"即相同元素在set中只会保留一份\",{\"1\":{\"732\":1}}],[\"即先放入的元素不一定排在前面\",{\"1\":{\"732\":1}}],[\"即先放入的元素排在前面\",{\"1\":{\"730\":1}}],[\"即车中包含一个成员变量\",{\"1\":{\"585\":1}}],[\"即\",{\"1\":{\"581\":1,\"584\":1,\"857\":1,\"1044\":1,\"1972\":1,\"3774\":1,\"5487\":1,\"6253\":1}}],[\"即使你一直没有去取\",{\"1\":{\"6276\":1}}],[\"即使你成功进行中间人攻击\",{\"1\":{\"2345\":1}}],[\"即使有部分条件带索引也会失效\",{\"1\":{\"4203\":1}}],[\"即使是在正常的情况下\",{\"1\":{\"3624\":1}}],[\"即使中途有其他事务插入了一条数据\",{\"1\":{\"3012\":1,\"6684\":1}}],[\"即使没有连接\",{\"1\":{\"3319\":1}}],[\"即使没有提交事务\",{\"1\":{\"2983\":1,\"6655\":1}}],[\"即使没有用try\",{\"1\":{\"460\":1,\"5355\":1}}],[\"即使其他事务更新了表的数据\",{\"1\":{\"2867\":1,\"6539\":1}}],[\"即使网络非常拥堵了\",{\"1\":{\"2493\":1}}],[\"即使它先收到了后面的\",{\"1\":{\"2459\":1}}],[\"即使进程没有调用\",{\"1\":{\"1778\":1,\"6274\":1}}],[\"即使程序不足一页大小\",{\"1\":{\"1659\":1}}],[\"即使数据库发生故障也不应该对其有任何影响\",{\"1\":{\"1223\":1,\"5575\":1}}],[\"即使哈希冲突比较严重\",{\"1\":{\"1077\":1}}],[\"即使\",{\"1\":{\"528\":1,\"5416\":1}}],[\"让其他服务器能感知到集群中其它成员的存在\",{\"1\":{\"4564\":1}}],[\"让其他线程可见\",{\"1\":{\"3718\":1,\"5917\":1}}],[\"让我讲一下遇到困难怎么解决\",{\"1\":{\"4438\":1}}],[\"让我们可以在运行时获取类的信息\",{\"1\":{\"510\":1,\"5398\":1}}],[\"让key均匀的失效\",{\"1\":{\"4146\":1}}],[\"让线程进入阻塞状态\",{\"1\":{\"3826\":1,\"5943\":1}}],[\"让用户决定如何去做\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"让\",{\"1\":{\"3489\":1,\"4597\":1,\"6181\":1}}],[\"让两个方向上的数据包都被丢弃\",{\"1\":{\"2618\":1}}],[\"让同一个用户的相关请求\",{\"1\":{\"2073\":1,\"5778\":1}}],[\"让内核来检查是否有网络事件产生\",{\"1\":{\"1768\":1}}],[\"让需要交换写入或者从磁盘装载的数据更少一点\",{\"1\":{\"1655\":1}}],[\"让应用程序决定何时提交偏移量\",{\"1\":{\"1608\":1}}],[\"让对象在新生代多存活一段时间及不要创建过大的对象及数组\",{\"1\":{\"395\":1}}],[\"让所有存活的对象都向一端移动\",{\"1\":{\"329\":1}}],[\"优缺点\",{\"1\":{\"3472\":1,\"4490\":1,\"6123\":1}}],[\"优势在于范围查找\",{\"1\":{\"2772\":1,\"6441\":1}}],[\"优化四\",{\"0\":{\"7201\":1}}],[\"优化三\",{\"0\":{\"7197\":1}}],[\"优化二\",{\"0\":{\"7191\":1}}],[\"优化一\",{\"0\":{\"7187\":1}}],[\"优化\",{\"0\":{\"4667\":1,\"7186\":1}}],[\"优化或隔离高cpu进程\",{\"1\":{\"4219\":1}}],[\"优化查询语句\",{\"1\":{\"3995\":1}}],[\"优化相关代码\",{\"1\":{\"3591\":1}}],[\"优化器生成执行计划的时间\",{\"1\":{\"2834\":1,\"6506\":1}}],[\"优化器在选择如何优化查询时\",{\"1\":{\"2834\":1,\"6506\":1}}],[\"优化了高位运算的算法\",{\"1\":{\"1069\":1}}],[\"优化了存储\",{\"1\":{\"796\":1}}],[\"优化策略\",{\"1\":{\"394\":1}}],[\"优先选择功能比较完备的rabbitmq\",{\"1\":{\"4803\":1}}],[\"优先选择符合存储需要的最小的数据类型\",{\"0\":{\"6721\":1},\"1\":{\"3070\":1}}],[\"优先选择从当前磁头位置所需寻道时间最短的请求\",{\"1\":{\"1756\":1}}],[\"优先保证第一个目标\",{\"1\":{\"1488\":1,\"6940\":1}}],[\"优先考虑hashmap\",{\"1\":{\"1087\":1}}],[\"优先级可以有相同的\",{\"1\":{\"770\":1}}],[\"优先回收价值最大的\",{\"1\":{\"374\":1}}],[\"优点\",{\"1\":{\"450\":1,\"859\":1,\"2798\":1,\"2807\":1,\"3840\":1,\"3843\":1,\"4492\":1,\"5343\":1,\"5489\":1,\"5956\":1,\"5959\":1,\"6125\":1,\"6470\":1,\"6479\":1}}],[\">runworker\",{\"1\":{\"3888\":1}}],[\">支付\",{\"1\":{\"2275\":1}}],[\">结算\",{\"1\":{\"2275\":1}}],[\">下单\",{\"1\":{\"2275\":1}}],[\">添加购物车\",{\"1\":{\"2275\":1}}],[\"><\",{\"1\":{\"1140\":1}}],[\">8\",{\"1\":{\"982\":1}}],[\">16\",{\"1\":{\"982\":1}}],[\">1\",{\"1\":{\"982\":1}}],[\">a\",{\"1\":{\"919\":1,\"5436\":1}}],[\">c\",{\"1\":{\"919\":1,\"5436\":1}}],[\">b\",{\"1\":{\"919\":2,\"5436\":2}}],[\">=\",{\"1\":{\"826\":1,\"1965\":1,\"2684\":1,\"2819\":1,\"6491\":1}}],[\">>>\",{\"1\":{\"1016\":4,\"1035\":4,\"1062\":4,\"1068\":1,\"1069\":1,\"1076\":1}}],[\">>\",{\"1\":{\"801\":1,\"1024\":1}}],[\">paramtypes\",{\"1\":{\"541\":1,\"543\":1}}],[\">解析\",{\"1\":{\"413\":1,\"5303\":1}}],[\">准备\",{\"1\":{\"413\":1,\"5303\":1}}],[\">初始化\",{\"1\":{\"413\":1,\"5303\":1}}],[\">连接\",{\"1\":{\"413\":1,\"5303\":1}}],[\">\",{\"1\":{\"388\":1,\"392\":1,\"431\":1,\"444\":1,\"523\":1,\"527\":1,\"530\":2,\"546\":1,\"548\":1,\"802\":1,\"812\":3,\"816\":1,\"824\":1,\"826\":1,\"901\":1,\"975\":1,\"980\":3,\"993\":1,\"1193\":8,\"1282\":1,\"1466\":1,\"1474\":1,\"1826\":2,\"1846\":2,\"1966\":1,\"2819\":1,\"3307\":1,\"3768\":1,\"3775\":1,\"3888\":1,\"4748\":3,\"4857\":3,\"4979\":1,\"4999\":4,\"5322\":1,\"5337\":1,\"5411\":1,\"5415\":1,\"5418\":2,\"5425\":2,\"5427\":2,\"5519\":1,\"5545\":8,\"5624\":1,\"5999\":1,\"6323\":2,\"6355\":2,\"6377\":1,\"6388\":2,\"6491\":1,\"6914\":1,\"6923\":1}}],[\"毫秒以内\",{\"1\":{\"6260\":1}}],[\"毫秒\",{\"1\":{\"382\":1}}],[\"毫秒的时间片段内\",{\"1\":{\"382\":1}}],[\"整体架构分为用户层\",{\"1\":{\"4552\":1}}],[\"整体的吞吐效率会高点\",{\"1\":{\"3843\":1,\"5959\":1}}],[\"整体来说\",{\"1\":{\"592\":1}}],[\"整体来看是基于\",{\"1\":{\"381\":1}}],[\"整个过程按照时间顺序发生的事件如下\",{\"1\":{\"7046\":1}}],[\"整个网络就分成了几块区域\",{\"1\":{\"4643\":1,\"6216\":1}}],[\"整个服务器就从\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"整个ai流程都做\",{\"1\":{\"4425\":1}}],[\"整个数据库就处于只读状态了\",{\"1\":{\"2855\":1,\"6527\":1}}],[\"整个\",{\"1\":{\"2343\":1}}],[\"整个系统很有可能被压垮\",{\"1\":{\"2012\":1}}],[\"整个进程是无法处理其他连接的事件的\",{\"1\":{\"1830\":1,\"6359\":1}}],[\"整个链表\",{\"1\":{\"1736\":1}}],[\"整个解决循环依赖的核心内容\",{\"1\":{\"1258\":1,\"5610\":1}}],[\"整理\",{\"0\":{\"328\":1},\"1\":{\"339\":1,\"381\":1}}],[\"具备先进先出的特点\",{\"1\":{\"1406\":1}}],[\"具备如下特点\",{\"1\":{\"380\":1}}],[\"具体取决于数据库的支持情况\",{\"1\":{\"4959\":1}}],[\"具体实现\",{\"1\":{\"4833\":1,\"7222\":1}}],[\"具体命令如下\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"具体值取决于写出的数据量和\",{\"1\":{\"3167\":1,\"6823\":1}}],[\"具体方式如下\",{\"1\":{\"2911\":1,\"6583\":1}}],[\"具体可以参见这篇文章\",{\"1\":{\"2490\":1}}],[\"具体可以选择服务器的ip或主机名作为关键字进行哈希\",{\"1\":{\"2017\":1}}],[\"具体的细节请移步\",{\"1\":{\"6985\":1,\"6987\":1}}],[\"具体的计算方法是\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"具体的操作是\",{\"1\":{\"3236\":1}}],[\"具体的给面试官扯一扯\",{\"1\":{\"2456\":1}}],[\"具体的实现流程如下\",{\"1\":{\"2233\":1}}],[\"具体的底层实现\",{\"1\":{\"611\":1}}],[\"具体做法可以在服务器ip或主机名的后面增加编号来实现\",{\"1\":{\"2035\":1}}],[\"具体步骤如下\",{\"1\":{\"2015\":1,\"4271\":1}}],[\"具体包含以下信息\",{\"1\":{\"3477\":1}}],[\"具体包含\",{\"1\":{\"1862\":1}}],[\"具体分发给\",{\"1\":{\"1823\":1,\"1835\":1,\"6352\":1,\"6367\":1}}],[\"具体过程如下\",{\"1\":{\"1789\":1,\"1802\":1,\"6294\":1,\"6308\":1}}],[\"具体就是\",{\"1\":{\"1128\":1,\"5709\":1}}],[\"具体地\",{\"1\":{\"942\":1}}],[\"具体装饰\",{\"1\":{\"875\":1}}],[\"具体构件\",{\"1\":{\"875\":1}}],[\"具体为o\",{\"1\":{\"750\":1}}],[\"具体来说\",{\"1\":{\"749\":1,\"762\":1,\"2083\":1,\"3233\":1,\"3235\":1}}],[\"具体是这样做的\",{\"1\":{\"3254\":1,\"6859\":1}}],[\"具体是o\",{\"1\":{\"748\":1}}],[\"具体是哪个类加载器加载呢\",{\"1\":{\"438\":1,\"5330\":1}}],[\"具有较低的连接和传输延迟\",{\"1\":{\"7071\":1}}],[\"具有较好的容错性和可扩展性\",{\"1\":{\"2030\":1}}],[\"具有多个接口\",{\"1\":{\"7045\":1}}],[\"具有算法公开\",{\"1\":{\"5099\":1}}],[\"具有高可用分区容错特点\",{\"1\":{\"4481\":1,\"6114\":1}}],[\"具有以下特点\",{\"1\":{\"3486\":1}}],[\"具有以下缺点\",{\"1\":{\"368\":1}}],[\"具有提交\",{\"1\":{\"2737\":1,\"6406\":1}}],[\"具有特定的格式\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"具有n个结点的完全二叉树的深度为\",{\"1\":{\"680\":1}}],[\"具有四种强度不同的引用类型\",{\"1\":{\"308\":1}}],[\"筛选回收\",{\"1\":{\"379\":1}}],[\"可查的异常\",{\"0\":{\"5358\":1}}],[\"可查异常虽然是异常状况\",{\"1\":{\"465\":1,\"5360\":1}}],[\"可查异常\",{\"1\":{\"464\":1,\"5359\":1}}],[\"可随意发给期望同密钥持有者进行安全通信的人\",{\"1\":{\"5094\":1}}],[\"可针对相应的业务数据\",{\"1\":{\"4153\":1}}],[\"可基于服务或oauth\",{\"1\":{\"4045\":1}}],[\"可中断\",{\"1\":{\"3781\":1,\"5792\":1}}],[\"可通过\",{\"1\":{\"3597\":1}}],[\"可选参数\",{\"1\":{\"3567\":1}}],[\"可执行\",{\"1\":{\"3510\":1}}],[\"可写\",{\"1\":{\"3510\":1}}],[\"可设定到\",{\"1\":{\"3487\":1}}],[\"可由\",{\"1\":{\"3111\":2,\"3126\":2,\"6767\":2,\"6782\":2}}],[\"可减少表结构变更带来的影响\",{\"1\":{\"3086\":1,\"6738\":1}}],[\"可用性\",{\"1\":{\"4637\":1,\"4640\":1,\"4645\":1,\"4785\":1,\"6209\":1,\"6213\":1,\"6218\":1}}],[\"可用来确认是不是整体内存分配太小\",{\"1\":{\"3605\":1}}],[\"可用close\",{\"1\":{\"3468\":1}}],[\"可用于存储比\",{\"1\":{\"3075\":1,\"6726\":1}}],[\"可用消息的总量都不会超过配置参数所指定的大小\",{\"1\":{\"1452\":1,\"6900\":1}}],[\"可重入锁的一个好处是可一定程度避免死锁\",{\"1\":{\"3820\":1,\"5938\":1}}],[\"可重入锁\",{\"0\":{\"5935\":1},\"1\":{\"3818\":1,\"3820\":1,\"5936\":1,\"5938\":1}}],[\"可重复读\",{\"1\":{\"2999\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3011\":1,\"3017\":2,\"6671\":1,\"6678\":1,\"6680\":1,\"6682\":1,\"6683\":1,\"6689\":2}}],[\"可重复读隔离级别的事务\",{\"1\":{\"2868\":1,\"6540\":1}}],[\"可重读\",{\"1\":{\"2737\":1,\"6406\":1}}],[\"可谓是风光一时\",{\"1\":{\"2728\":1,\"6397\":1}}],[\"可见直接使用md5加密是不安全的\",{\"1\":{\"5071\":1}}],[\"可见容器是在操作系统层面上实现虚拟化\",{\"1\":{\"3310\":1}}],[\"可见\",{\"1\":{\"2553\":1}}],[\"可靠性要求很高的金融互联网领域\",{\"1\":{\"4801\":1}}],[\"可靠性\",{\"1\":{\"2488\":1,\"4263\":1}}],[\"可靠的\",{\"1\":{\"2455\":1,\"2458\":1}}],[\"可是当服务器b移除以后\",{\"1\":{\"2032\":1}}],[\"可是实际上\",{\"1\":{\"631\":1}}],[\"可运行线程池\",{\"1\":{\"1854\":1,\"6230\":1}}],[\"可想而知这是极大的工作量\",{\"1\":{\"1413\":1}}],[\"可对系统中线程池更加细粒度的控制\",{\"1\":{\"1379\":1}}],[\"可在\",{\"1\":{\"1291\":1,\"5632\":1}}],[\"可参考\",{\"1\":{\"1054\":1}}],[\"可能很多网站还没开始支持http\",{\"1\":{\"6979\":1,\"7002\":1}}],[\"可能不是0了\",{\"1\":{\"4619\":1,\"6192\":1}}],[\"可能有哪些问题\",{\"0\":{\"4218\":1}}],[\"可能有上百万的连接\",{\"0\":{\"4216\":1}}],[\"可能有多棵子树\",{\"1\":{\"654\":1}}],[\"可能堆积大量的请求\",{\"1\":{\"3911\":1,\"3913\":1,\"6058\":1,\"6060\":1}}],[\"可能导致队列中排队的线程一直获取不到锁或者长时间获取不到锁\",{\"1\":{\"3844\":1,\"5960\":1}}],[\"可能占用\",{\"1\":{\"3825\":1,\"5942\":1}}],[\"可能引发死锁\",{\"1\":{\"3824\":1,\"5942\":1}}],[\"可能引起问题的原因通常是索引\",{\"1\":{\"3540\":1}}],[\"可能接着导致主线程也进入\",{\"1\":{\"3624\":1}}],[\"可能直接就被这么多请求弄宕机了\",{\"1\":{\"3247\":1,\"3265\":1,\"3275\":1,\"6852\":1,\"6870\":1,\"6880\":1}}],[\"可能保存了其他数据\",{\"1\":{\"3235\":1}}],[\"可能发生幻读现象\",{\"1\":{\"3006\":1,\"6678\":1}}],[\"可能发生不可重复读和幻读现象\",{\"1\":{\"3005\":1,\"6677\":1}}],[\"可能发生脏读\",{\"1\":{\"3004\":1,\"6676\":1}}],[\"可能发生异常的结束点\",{\"1\":{\"495\":1,\"5382\":1}}],[\"可能发生异常的起始点\",{\"1\":{\"494\":1,\"5381\":1}}],[\"可能还需要根据指针或主键再到数据文件或表中查询\",{\"1\":{\"2811\":1,\"6483\":1}}],[\"可能还没有到达叶子节点\",{\"1\":{\"2764\":1,\"6433\":1}}],[\"可能存在数据丢失\",{\"1\":{\"2071\":1,\"5776\":1}}],[\"可能就执行了几步\",{\"1\":{\"2071\":1,\"5776\":1}}],[\"可能是热点数据\",{\"1\":{\"1695\":1}}],[\"可能会创建大量线程\",{\"1\":{\"3879\":1,\"3912\":1,\"6034\":1,\"6059\":1}}],[\"可能会发生意想不到的事情\",{\"1\":{\"2897\":1,\"6569\":1}}],[\"可能会二次查询\",{\"1\":{\"2811\":1,\"6483\":1}}],[\"可能会导致数据包时延\",{\"1\":{\"2665\":1}}],[\"可能会导致低优先级的进程永远不会运行\",{\"1\":{\"1934\":1}}],[\"可能会导致脏读\",{\"1\":{\"1232\":1,\"5584\":1}}],[\"可能会有很多主题接入的中台业务场景\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"可能会产生死锁等问题\",{\"1\":{\"943\":1}}],[\"可能看完了你还是有点蒙\",{\"1\":{\"972\":1}}],[\"可采用的方法为增大perm\",{\"1\":{\"400\":1}}],[\"可预测的停顿\",{\"1\":{\"382\":1}}],[\"可达的对象\",{\"1\":{\"376\":1}}],[\"可以避免\",{\"1\":{\"7072\":1}}],[\"可以避免类的重复加载\",{\"1\":{\"451\":1,\"5344\":1}}],[\"可以把子查询优化为\",{\"0\":{\"6739\":1}}],[\"可以把树分为有序树和无序树两种概念\",{\"1\":{\"654\":1}}],[\"可以应对不同的业务场景\",{\"1\":{\"6324\":1}}],[\"可以让我们像springdatajpa类似地使用接口编程方式进行数据库操作\",{\"1\":{\"4744\":1}}],[\"可以让高速缓存中的数据失效\",{\"1\":{\"3717\":1,\"5916\":1}}],[\"可以最多容忍\",{\"1\":{\"4589\":1}}],[\"可以并行开发\",{\"1\":{\"4498\":1,\"6126\":1}}],[\"可以并行交错地发送请求和响应\",{\"1\":{\"2362\":1}}],[\"可以更精准的制定优化服务方案\",{\"1\":{\"4497\":1,\"6126\":1}}],[\"可以选择移除等待队列中的最不常用的线程\",{\"1\":{\"4313\":1,\"7138\":1}}],[\"可以行锁吗\",{\"0\":{\"4221\":1}}],[\"可以设置不同的心跳间隔时间用于区分不同类型的连接\",{\"1\":{\"4217\":1}}],[\"可以接受任何类型的变量\",{\"1\":{\"4074\":1}}],[\"可以不用通过http框架去封装http请求报文的方式\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"可以不修改源代码实现对程序功能的增强\",{\"1\":{\"4020\":1}}],[\"可以不指定主键的值\",{\"1\":{\"2920\":1,\"6592\":1}}],[\"可以适当提高老年代比例避免memory\",{\"1\":{\"3992\":1}}],[\"可以适当增加位数组大小或者调整我们的哈希函数来降低概率\",{\"1\":{\"3263\":1,\"6868\":1}}],[\"可以和spring程序无缝集成\",{\"1\":{\"3987\":1}}],[\"可以缓存反射调用的method和field对象\",{\"1\":{\"3947\":1}}],[\"可以同时绑定多个\",{\"1\":{\"3783\":1,\"5794\":1}}],[\"可以访问到该线程的threadlocalmap对象\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"可以理解为线程数是可以无限扩展的\",{\"1\":{\"3879\":1,\"6034\":1}}],[\"可以理解为只是threadlocalmap的封装\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"可以理解为分配结果是带\",{\"1\":{\"1485\":1,\"6937\":1}}],[\"可以是this\",{\"1\":{\"3734\":1}}],[\"可以是red\",{\"1\":{\"693\":1,\"5460\":1}}],[\"可以执行命令\",{\"1\":{\"3599\":1,\"3603\":1,\"3607\":1}}],[\"可以尝试设置下环境变量\",{\"1\":{\"3576\":1}}],[\"可以创建一个有名管道文件\",{\"1\":{\"3468\":1}}],[\"可以创建一个无名管道文件\",{\"1\":{\"3468\":1}}],[\"可以创建一个合适的异常类实例并抛出它\",{\"1\":{\"474\":1,\"5369\":1}}],[\"可以基于本地仓库进行提交\",{\"1\":{\"3377\":1}}],[\"可以降低主从断开后全量复制的概率\",{\"1\":{\"3239\":1}}],[\"可以加载\",{\"1\":{\"3164\":1,\"6820\":1}}],[\"可以考虑限制自旋的次数\",{\"1\":{\"3693\":1,\"5862\":1}}],[\"可以考虑将其分解成多个表\",{\"1\":{\"3078\":1,\"6729\":1}}],[\"可以考虑建立索引\",{\"1\":{\"2828\":1,\"6500\":1}}],[\"可以认为mvcc是行锁的一个变种\",{\"1\":{\"3024\":1}}],[\"可以很大程度上避免幻读现象的发生\",{\"1\":{\"3010\":1,\"6682\":1}}],[\"可以简单的认为是你项目组中的一台电脑用于远程数据交换\",{\"1\":{\"3336\":1}}],[\"可以简单理解为每个索引都对应着一颗\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"可以简单地将布隆过滤器理解为set集合\",{\"1\":{\"2150\":1}}],[\"可以将对象的创建与使用代码分离\",{\"1\":{\"4178\":1}}],[\"可以将缓存击穿看作是缓存雪崩的一个子集\",{\"1\":{\"4149\":1}}],[\"可以将线程数设置为\",{\"1\":{\"3897\":1,\"6044\":1}}],[\"可以将threadlocal类形象的比喻成存放数据的盒子\",{\"1\":{\"3757\":1,\"5989\":1}}],[\"可以将一组权限用数字来表示\",{\"1\":{\"3410\":1}}],[\"可以将快照复制到其他服务器从而创建具有相同数据的服务器副本\",{\"1\":{\"3145\":1,\"6801\":1}}],[\"可以将区分度高的字段放在最左边\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"可以将消息保留到不再使用他们为止\",{\"1\":{\"1453\":1,\"6901\":1}}],[\"可以定位主键的位置\",{\"1\":{\"2789\":1,\"6459\":1}}],[\"可以有\",{\"1\":{\"2780\":1,\"6449\":1}}],[\"可以有效减少加锁操作\",{\"1\":{\"2747\":1,\"6416\":1}}],[\"可以有以下四种方法\",{\"1\":{\"2589\":1}}],[\"可以\",{\"1\":{\"2711\":1}}],[\"可以回到恢复之前的状态了\",{\"1\":{\"2706\":1}}],[\"可以标识发送出去的数据包中\",{\"1\":{\"2552\":1}}],[\"可以的\",{\"1\":{\"2517\":1,\"2642\":1,\"2645\":1,\"2708\":1,\"3677\":1,\"5846\":1}}],[\"可以保证消息在分区内的顺序性\",{\"1\":{\"4674\":1,\"7193\":1}}],[\"可以保证后续的更新\",{\"1\":{\"4493\":1,\"6126\":1}}],[\"可以保证每次出队的任务都是当前队列中执行时间最靠前的\",{\"1\":{\"3880\":1,\"6035\":1}}],[\"可以保证地球上的每粒沙子都能被分配到一个\",{\"1\":{\"2375\":1}}],[\"可以保存所有待检测的\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"可以用任何一种语言开发\",{\"1\":{\"4499\":1,\"6126\":1}}],[\"可以用不同的存储技术\",{\"1\":{\"4472\":1,\"6105\":1}}],[\"可以用不同的编程语言\",{\"1\":{\"4471\":1,\"6104\":1}}],[\"可以用来控制多个进程对共享资源的访问\",{\"1\":{\"3462\":1}}],[\"可以用\",{\"1\":{\"2288\":1}}],[\"可以用于监听web应用程序中某些对象的创建\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"可以对快照进行备份\",{\"1\":{\"3145\":1,\"6801\":1}}],[\"可以对\",{\"1\":{\"2223\":1}}],[\"可以试想\",{\"1\":{\"2165\":1}}],[\"可以向里边存放元素\",{\"1\":{\"2150\":1}}],[\"可以判断是否存在不合理的对象分配或gc优化不足的情况\",{\"1\":{\"2131\":1}}],[\"可以控制下载的速度\",{\"1\":{\"2112\":1}}],[\"可以这样构造\",{\"1\":{\"2083\":1}}],[\"可以这么写\",{\"1\":{\"603\":1}}],[\"可以再建一个分表\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"可以放到缓存里\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"可以放入\",{\"1\":{\"736\":1}}],[\"可以说这是最有用的进程间通信方式\",{\"1\":{\"1974\":1,\"6255\":1}}],[\"可以实现限制java中文件下载的速率\",{\"1\":{\"2113\":1}}],[\"可以实现本机任意两个进程通信\",{\"1\":{\"1970\":1,\"6251\":1}}],[\"可以实现健康检查\",{\"1\":{\"1345\":1,\"5670\":1}}],[\"可以减少\",{\"1\":{\"3843\":1,\"5959\":1}}],[\"可以减少整体的响应时间\",{\"1\":{\"2297\":1,\"2350\":1}}],[\"可以减少一次数据拷贝的过程\",{\"1\":{\"1793\":1,\"6298\":1}}],[\"可以减小树和链表之间频繁转化的可能性\",{\"1\":{\"930\":1,\"5447\":1}}],[\"可以看作是\",{\"1\":{\"7066\":1}}],[\"可以看作是行级锁的一个升级\",{\"1\":{\"2747\":1,\"6416\":1}}],[\"可以看这篇文章\",{\"1\":{\"2522\":1}}],[\"可以看做是不同主机之间的进程进行双向通信的端点\",{\"1\":{\"1975\":1,\"6256\":1}}],[\"可以看出文件的\",{\"1\":{\"3491\":1}}],[\"可以看出管道传输数据是单向的\",{\"1\":{\"1948\":1}}],[\"可以看出\",{\"1\":{\"1492\":1,\"6945\":1}}],[\"可以看到进程里有\",{\"1\":{\"1817\":1,\"6346\":1}}],[\"可以看到\",{\"1\":{\"1039\":1,\"2615\":1}}],[\"可以看到只保存了非null的数组位置上的数据\",{\"1\":{\"788\":1}}],[\"可以使分区分配的更均衡\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"可以使用threadpoolexecutor以下方法\",{\"1\":{\"3924\":1}}],[\"可以使用callerrunspolicy\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"可以使用git\",{\"1\":{\"3349\":1,\"3352\":1}}],[\"可以使用下面这两个方式\",{\"1\":{\"2938\":1,\"6610\":1}}],[\"可以使用下面这条命令\",{\"1\":{\"2883\":1,\"6555\":1}}],[\"可以使用下面的命令\",{\"1\":{\"2879\":1,\"6551\":1}}],[\"可以使用同一个端口吗\",{\"0\":{\"2516\":1,\"2707\":1},\"1\":{\"2407\":1,\"2522\":1}}],[\"可以使用以下代码构造http请求\",{\"1\":{\"2095\":1}}],[\"可以使用这种算法\",{\"1\":{\"1576\":1}}],[\"可以使用hashset的一个子类linkedhashset\",{\"1\":{\"718\":1}}],[\"可以使用\",{\"1\":{\"352\":1,\"3115\":1,\"3695\":1,\"5864\":1,\"6771\":1}}],[\"可以从以下几个方面来定位\",{\"1\":{\"2128\":1}}],[\"可以从消费位置继续消费\",{\"1\":{\"1446\":1}}],[\"可以从半成品缓存中获取\",{\"1\":{\"1279\":1,\"5621\":1}}],[\"可以分为全局锁\",{\"1\":{\"2850\":1,\"6522\":1}}],[\"可以分为多个\",{\"1\":{\"1442\":1}}],[\"可以分布到多个\",{\"1\":{\"1442\":1}}],[\"可以容纳多个\",{\"1\":{\"1440\":1}}],[\"可以自定义一些handler\",{\"1\":{\"1395\":1}}],[\"可以获取异常对象信息\",{\"1\":{\"1318\":1}}],[\"可以进行调试\",{\"1\":{\"1284\":1,\"5626\":1}}],[\"可以被注入\",{\"1\":{\"1264\":1,\"1265\":1}}],[\"可以被多个会话共享\",{\"1\":{\"1149\":1,\"5729\":1}}],[\"可以正常创建\",{\"1\":{\"1258\":1,\"5610\":1}}],[\"可以阻止脏读和不可重复读\",{\"1\":{\"1234\":1,\"5586\":1}}],[\"可以阻止脏读\",{\"1\":{\"1233\":1,\"5585\":1}}],[\"可以利用\",{\"1\":{\"1166\":1}}],[\"可以在客户端请求一个资源时\",{\"1\":{\"7069\":1}}],[\"可以在消费者内部采用多线程的方式去消费\",{\"1\":{\"6965\":1}}],[\"可以在几个小时内就找到一个md5值对应的原文\",{\"1\":{\"5036\":1}}],[\"可以在service层直接调用basemapper中提供的selectbyid\",{\"1\":{\"4754\":1}}],[\"可以在编译时发现问题\",{\"1\":{\"3941\":1}}],[\"可以在事务提交后直接删除\",{\"1\":{\"3042\":1,\"6710\":1}}],[\"可以在非聚簇索引遍历过程中\",{\"1\":{\"2821\":1,\"6493\":1}}],[\"可以在报错异常java\",{\"1\":{\"2119\":1}}],[\"可以在\",{\"1\":{\"1123\":1,\"2520\":1,\"2709\":1,\"5705\":1}}],[\"可以在两段做插入和删除操作\",{\"1\":{\"619\":1}}],[\"可以方便地根据键的顺序进行查找\",{\"1\":{\"1084\":1}}],[\"可以方便地根据顺序进行查找和操作\",{\"1\":{\"723\":1}}],[\"可以方便地按照键存取值\",{\"1\":{\"954\":1}}],[\"可以代理未实现任何接口的类\",{\"1\":{\"914\":1,\"5532\":1}}],[\"可以直接把内核缓冲区里的数据拷贝到\",{\"1\":{\"1800\":1,\"6305\":1}}],[\"可以直接使用hashtable\",{\"1\":{\"942\":1}}],[\"可以直接代理实现类\",{\"1\":{\"887\":1,\"5505\":1}}],[\"可以直接对新生代和老年代一起回收\",{\"1\":{\"373\":1}}],[\"可以测试一下\",{\"1\":{\"794\":1}}],[\"可以提供弱一致性\",{\"1\":{\"788\":1}}],[\"可以作为队列\",{\"1\":{\"752\":1}}],[\"可以随机访问\",{\"1\":{\"747\":1}}],[\"可以高效地添加\",{\"1\":{\"716\":1}}],[\"可以忽略性能差异\",{\"1\":{\"707\":1,\"5475\":1}}],[\"可以确定相应的传递\",{\"1\":{\"662\":1}}],[\"可以满足在两段进行插入和删除\",{\"1\":{\"616\":1}}],[\"可以通过日志功能完成oss的操作审计\",{\"1\":{\"4721\":1}}],[\"可以通过继承thread类或实现runnable接口来创建线程\",{\"1\":{\"3939\":1}}],[\"可以通过添加读锁实现共享\",{\"1\":{\"3836\":1,\"5952\":1}}],[\"可以通过虚拟机参数更改\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"可以通过系统调用write\",{\"1\":{\"3468\":1}}],[\"可以通过git\",{\"1\":{\"3345\":1}}],[\"可以通过相同的方法和从库建立连接\",{\"1\":{\"3201\":1}}],[\"可以通过创建快照来获得存储在内存里面的数据在\",{\"1\":{\"3145\":1,\"6801\":1}}],[\"可以通过\",{\"1\":{\"2534\":1,\"3153\":1,\"6809\":1}}],[\"可以通过以下思路和手段找到问题所在\",{\"1\":{\"2138\":1}}],[\"可以通过限制读取文件的字节数来限制下载速率\",{\"1\":{\"2104\":1}}],[\"可以通过其子类扩展具体构件的功能\",{\"1\":{\"875\":1}}],[\"可以通过代码获取到我们的设置值\",{\"1\":{\"249\":1}}],[\"可以通过参数\",{\"1\":{\"209\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"29\":1,\"5142\":1}}],[\"但接收的\",{\"1\":{\"7038\":1}}],[\"但其他\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"但其实仔细思考\",{\"1\":{\"589\":1}}],[\"但却对多个对象产生影响的公共行为和逻辑\",{\"1\":{\"4180\":1}}],[\"但当缓存中大量热点缓存采用了相同的实效时间\",{\"1\":{\"4145\":1}}],[\"但当线程数不断增加时\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"但为了提高数据检索和查询的效率\",{\"1\":{\"4118\":1}}],[\"但为了兼容老版本的\",{\"1\":{\"2216\":1}}],[\"但若有空闲线程可以复用\",{\"1\":{\"3903\":1,\"6050\":1}}],[\"但没有剩余可用资源\",{\"1\":{\"3656\":1,\"5899\":1}}],[\"但没有特别的优化\",{\"1\":{\"957\":1}}],[\"但要注意\",{\"1\":{\"3571\":1}}],[\"但局限于单向通信的工作方式\",{\"1\":{\"3472\":1}}],[\"但实质上不是私有的而是共享的\",{\"1\":{\"3471\":1}}],[\"但实际毫秒级和微秒级在感知上没有什么太大的区别\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"但多个进程都可以访问\",{\"1\":{\"3465\":1}}],[\"但缓存雪崩导致的原因是缓存中的大量或者所有数据失效\",{\"1\":{\"3286\":1,\"6891\":1}}],[\"但不修改持有锁的线程id\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"但不存在于缓存中\",{\"1\":{\"3265\":1,\"3272\":1,\"6870\":1,\"6877\":1}}],[\"但不负责具体的产品\",{\"1\":{\"867\":1,\"5497\":1}}],[\"但也不算差\",{\"1\":{\"6993\":1}}],[\"但也碰到过\",{\"1\":{\"3340\":1}}],[\"但也带来了数据丢失的风险\",{\"1\":{\"3167\":1,\"6823\":1}}],[\"但也实现了deque接口\",{\"1\":{\"752\":1}}],[\"但用户\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"但两个事务却不能在同一时间内\",{\"1\":{\"2966\":1,\"6638\":1}}],[\"但对称加密的密钥用服务器方的证书进行了非对称加密\",{\"1\":{\"7078\":1}}],[\"但对于记录锁\",{\"1\":{\"2960\":1,\"6632\":1}}],[\"但对方处理不过来\",{\"1\":{\"2660\":1}}],[\"但查询条件未遵守最左匹配原则\",{\"1\":{\"2844\":1,\"6516\":1}}],[\"但同时只有一个线程能修改成功\",{\"1\":{\"3793\":1,\"5805\":1}}],[\"但同时也不可避免地涉及了段机制\",{\"1\":{\"1686\":1}}],[\"但同时也是消息最不可靠的方式\",{\"1\":{\"1514\":1}}],[\"但同样也会降低插入和更新的效率\",{\"1\":{\"2833\":1,\"6505\":1}}],[\"但又避免不了为\",{\"1\":{\"2824\":1,\"6496\":1}}],[\"但二者实现方式不一样\",{\"1\":{\"2770\":1,\"6439\":1}}],[\"但网络中出现了拥塞\",{\"1\":{\"2673\":1}}],[\"但服务端发送出去的\",{\"1\":{\"2578\":1}}],[\"但服务器不知道这些请求是有关联的\",{\"1\":{\"2275\":1}}],[\"但可能会丢包和乱序\",{\"1\":{\"2499\":1}}],[\"但保证顺序和可靠\",{\"1\":{\"2498\":1}}],[\"但能指明一条道路\",{\"1\":{\"2390\":1,\"7094\":1}}],[\"但随着时间推移\",{\"1\":{\"2371\":1}}],[\"但随着业务需要\",{\"1\":{\"1413\":1}}],[\"但\",{\"1\":{\"2351\":1,\"7026\":1}}],[\"但暂时需要用另一个\",{\"1\":{\"2201\":1}}],[\"但响应头没有\",{\"1\":{\"2197\":1}}],[\"但误判率会减小\",{\"1\":{\"2179\":1}}],[\"但只是个笼统的错误\",{\"1\":{\"2205\":1}}],[\"但只有一个线程可以对共享资源进行写操作\",{\"1\":{\"1981\":1,\"6240\":1}}],[\"但只能放入一个null\",{\"1\":{\"736\":1}}],[\"但内核空间是每个进程都共享的\",{\"1\":{\"1944\":1}}],[\"但内部有一个双向链表以维护节点的顺序\",{\"1\":{\"1089\":1}}],[\"但内部使用红黑树实现\",{\"1\":{\"1083\":1}}],[\"但代价很高\",{\"1\":{\"1735\":1}}],[\"但这还不是最理想的零拷贝\",{\"1\":{\"1794\":1,\"6299\":1}}],[\"但这个就要分为两种情况了\",{\"1\":{\"6198\":1}}],[\"但这个算法可能存在某些请求的饥饿\",{\"1\":{\"1757\":1}}],[\"但这个会增加消息重复的概率\",{\"1\":{\"1612\":1}}],[\"但这时服务\",{\"1\":{\"1427\":1}}],[\"但会提供更高的压缩比\",{\"1\":{\"1576\":1}}],[\"但数据不一定完整\",{\"1\":{\"1539\":1}}],[\"但活过来的时间不确定\",{\"1\":{\"1538\":1}}],[\"但此时\",{\"1\":{\"1258\":1,\"4615\":1,\"5610\":1,\"6188\":1}}],[\"但我们互相没法解耦\",{\"1\":{\"1253\":1,\"5605\":1}}],[\"但无论循环依赖的数量有多少\",{\"1\":{\"1253\":1,\"5605\":1}}],[\"但无法获取继承下来的方法\",{\"1\":{\"542\":1,\"5425\":1}}],[\"但无法获取继承下来的变量\",{\"1\":{\"537\":1,\"5423\":1}}],[\"但无法找到足够大连续空间来分配当前对象\",{\"1\":{\"370\":1}}],[\"但幻读仍有可能发生\",{\"1\":{\"1234\":1,\"5586\":1}}],[\"但一般情况下\",{\"1\":{\"1166\":1}}],[\"但速度慢\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"但速度快\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"但需要多次查询\",{\"1\":{\"1113\":1}}],[\"但原理是不变的\",{\"1\":{\"1067\":1}}],[\"但如果是对象的引用类型包含了多个变量\",{\"1\":{\"3686\":1,\"5855\":1}}],[\"但如果阿里不再维护这个技术了\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"但如果深究进去\",{\"1\":{\"947\":1}}],[\"但如果插入的时候是有序数据\",{\"1\":{\"704\":1,\"5472\":1}}],[\"但省去了很多没有必要的调平衡操作\",{\"1\":{\"925\":1,\"5442\":1}}],[\"但红黑树不像avl树一样追求绝对的平衡\",{\"1\":{\"925\":1,\"5442\":1}}],[\"但它的影响范围没那么大\",{\"1\":{\"3619\":1}}],[\"但它的工作方式略有不同\",{\"1\":{\"3372\":1}}],[\"但它在很多情况下\",{\"1\":{\"3024\":1}}],[\"但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡\",{\"1\":{\"921\":1,\"5438\":1}}],[\"但它也有一些不足之处\",{\"1\":{\"1646\":1}}],[\"但它实际上是一个\",{\"1\":{\"619\":1}}],[\"但方法并没有像arraylist一样进行优化存储\",{\"1\":{\"791\":1}}],[\"但属于强同步类\",{\"1\":{\"780\":1}}],[\"但在get与set方面弱于arraylist\",{\"1\":{\"778\":1}}],[\"但在一定程度上它的发生是可以预计的\",{\"1\":{\"465\":1,\"5360\":1}}],[\"但按优先级出队\",{\"1\":{\"768\":1}}],[\"但修改本身的效率很高\",{\"1\":{\"757\":1}}],[\"但有序\",{\"1\":{\"720\":1}}],[\"但整体平均时间复杂度\",{\"1\":{\"629\":1}}],[\"但至今为止\",{\"1\":{\"622\":1}}],[\"但因为\",{\"1\":{\"612\":1}}],[\"但老版本的程序\",{\"1\":{\"597\":1}}],[\"但遇到更抽象的对象的时候\",{\"1\":{\"587\":1}}],[\"但最终还是要转成编译器认识的语言\",{\"1\":{\"481\":1}}],[\"但很多情况下它会触发full\",{\"1\":{\"402\":1}}],[\"但是也是在2018年\",{\"1\":{\"6977\":1,\"7000\":1}}],[\"但是也可以是公平的\",{\"1\":{\"3782\":1,\"5793\":1}}],[\"但是为什么现在广泛使用的还是http1\",{\"1\":{\"6973\":1}}],[\"但是处理每个请求的事件时\",{\"1\":{\"6260\":1}}],[\"但是2004年\",{\"1\":{\"5036\":1}}],[\"但是因为某些故障\",{\"1\":{\"4643\":1,\"6216\":1}}],[\"但是因为只回收一部分\",{\"1\":{\"379\":1}}],[\"但是过了一会\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"但是挂了两个也不能正常工作了\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"但是别的组没时间\",{\"1\":{\"4438\":1}}],[\"但是cas也有自己的问题\",{\"1\":{\"4332\":1,\"7157\":1}}],[\"但是consumer里面进行了多线程消费\",{\"1\":{\"1507\":1,\"6962\":1}}],[\"但是小于最大线程数\",{\"1\":{\"3883\":1,\"6038\":1}}],[\"但是理想情况下竞争的程度很低\",{\"1\":{\"3801\":1,\"5813\":1}}],[\"但是强引用不会释放\",{\"1\":{\"3773\":1}}],[\"但是被volatile修饰的变量操作并非具有原子性\",{\"1\":{\"3726\":1,\"5928\":1}}],[\"但是如果要对多个共享变量进行操作时\",{\"1\":{\"3695\":1,\"5864\":1}}],[\"但是版本号改变了\",{\"1\":{\"3688\":1,\"5858\":1}}],[\"但是发现linux的cpu飙升\",{\"1\":{\"3512\":1}}],[\"但是共享内存的通信方式是通过将共享的内存缓冲区直接附加到进程的虚拟地址空间中来实现的\",{\"1\":{\"3474\":1}}],[\"但是信息的复制需要额外消耗cpu的时间\",{\"1\":{\"3473\":1}}],[\"但是使用不当容易导致出错\",{\"1\":{\"3468\":1}}],[\"但是多了一个向前翻页的功能\",{\"1\":{\"3415\":1}}],[\"但是git\",{\"1\":{\"3363\":1}}],[\"但是还是远远没有使用一个联合索引的查询方式好\",{\"1\":{\"3082\":1,\"6733\":1}}],[\"但是还是有区别\",{\"1\":{\"949\":1}}],[\"但是与sql\",{\"1\":{\"3009\":1,\"6681\":1}}],[\"但是要实现事务必须要遵守\",{\"1\":{\"2970\":1,\"6642\":1}}],[\"但是现在处于等待状态\",{\"1\":{\"2963\":1,\"6635\":1}}],[\"但是现在是单独一个表\",{\"0\":{\"2059\":1,\"5764\":1}}],[\"但是一直不提交\",{\"1\":{\"2898\":1,\"6570\":1}}],[\"但是一直还没提交\",{\"1\":{\"2897\":1,\"6569\":1}}],[\"但是一重传就会导致网络的负担更重\",{\"1\":{\"2665\":1}}],[\"但是维护索引的成本也是不小的\",{\"1\":{\"2830\":1,\"6502\":1}}],[\"但是允许数据为\",{\"1\":{\"2791\":1,\"6462\":1}}],[\"但是两者的实现方式不太一样\",{\"1\":{\"2749\":1,\"6418\":1}}],[\"但是对性能有一定的损耗\",{\"1\":{\"2740\":1,\"6409\":1}}],[\"但是对于现在的计算机\",{\"1\":{\"707\":1,\"5475\":1}}],[\"但是增长速度缓慢了一些\",{\"1\":{\"2687\":1}}],[\"但是我们可以加盐\",{\"1\":{\"5071\":1}}],[\"但是我们可以基于\",{\"1\":{\"2490\":1}}],[\"但是我们设计的大多数类\",{\"1\":{\"592\":1}}],[\"但是服务端的进程崩溃会发生什么\",{\"0\":{\"2636\":1},\"1\":{\"2433\":1}}],[\"但是服务器必须按照接收请求的顺序发送对这些管道化请求的响应\",{\"1\":{\"2298\":1}}],[\"但是服务器处理时内部发生了错误\",{\"1\":{\"2208\":1}}],[\"但是客户端突然出现故障了怎么办\",{\"0\":{\"2633\":1},\"1\":{\"2432\":1}}],[\"但是没有被使用就行了\",{\"1\":{\"2301\":1}}],[\"但是没有解决响应的队头阻塞\",{\"1\":{\"2300\":1}}],[\"但是没来得及提交offset\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"但是不会导致阻塞\",{\"1\":{\"4916\":1}}],[\"但是不可能脏读和不可重复读现象\",{\"1\":{\"3006\":1,\"6678\":1}}],[\"但是不可能发生脏读现象\",{\"1\":{\"3005\":1,\"6677\":1}}],[\"但是不可以对该记录加\",{\"1\":{\"2949\":1,\"6621\":1}}],[\"但是不包含记录本身\",{\"1\":{\"2945\":1,\"6617\":1}}],[\"但是不一定准\",{\"1\":{\"2062\":1,\"5767\":1}}],[\"但是不符合时间局部性\",{\"1\":{\"1627\":1}}],[\"但是冗余就比较大\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"但是有\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"但是有key的情况下\",{\"1\":{\"1464\":1,\"6912\":1}}],[\"但是并没有什么区别\",{\"1\":{\"2954\":1,\"6626\":1}}],[\"但是并不知道网络的中发生了什么\",{\"1\":{\"2663\":1}}],[\"但是并不是将新生代划分为大小相等的两块\",{\"1\":{\"333\":1}}],[\"但是并发量上升时锁撤销会大幅影响性能\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"但是取模算法是对服务器的数量进行取模\",{\"1\":{\"2015\":1}}],[\"但是线程\",{\"1\":{\"1993\":1}}],[\"但是需要控制同一时刻访问此资源的最大线程数量\",{\"1\":{\"1982\":1,\"6241\":1}}],[\"但是依然有缺点\",{\"1\":{\"1934\":1}}],[\"但是当前运行的线程数是小于最大线程数的\",{\"1\":{\"3884\":1,\"6039\":1}}],[\"但是当搭配\",{\"1\":{\"2933\":1,\"6605\":1}}],[\"但是当一个长作业先运行了\",{\"1\":{\"1914\":1}}],[\"但是当我们直接kill进程了\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"但是实际实现时比单\",{\"1\":{\"1847\":1,\"6389\":1}}],[\"但是实际系统中无法实现\",{\"1\":{\"1728\":1}}],[\"但是这远比进程间通信的复杂度低得多\",{\"1\":{\"6378\":1}}],[\"但是这样会带来消息被重新消费的问题\",{\"1\":{\"4677\":1}}],[\"但是这正是这样\",{\"1\":{\"2282\":1}}],[\"但是这还不是真正的零拷贝技术\",{\"1\":{\"1801\":1,\"6307\":1}}],[\"但是这将严重影响程序的性能\",{\"1\":{\"1235\":1,\"5587\":1}}],[\"但是由于其长期存在于系统之中\",{\"1\":{\"3472\":1}}],[\"但是由于开销比较大\",{\"1\":{\"1737\":1}}],[\"但是由于每个段的长度不固定\",{\"1\":{\"1651\":1}}],[\"但是虚拟地址到物理地址的转换就多了几道转换的工序\",{\"1\":{\"1671\":1}}],[\"但是会出现\",{\"1\":{\"1654\":1}}],[\"但是速度最快\",{\"1\":{\"1556\":1}}],[\"但是每个\",{\"1\":{\"3489\":1}}],[\"但是每个consumer的执行时间是不固定的\",{\"1\":{\"1505\":1,\"6960\":1}}],[\"但是每个mapper的二级开关是默认关闭的\",{\"1\":{\"1150\":1,\"5730\":1}}],[\"但是却只有\",{\"1\":{\"1427\":1}}],[\"但是幻读或不可重复读仍有可能发生\",{\"1\":{\"1233\":1,\"5585\":1}}],[\"但是销毁sqlsession后会将里面的缓存存到二级缓存中\",{\"1\":{\"1147\":1,\"5727\":1}}],[\"但是哈希的操作还是在的\",{\"1\":{\"1071\":1}}],[\"但是其实并不完全是\",{\"1\":{\"1049\":1}}],[\"但是肯定存在这样的key\",{\"1\":{\"1039\":1}}],[\"但是考虑到效率等问题\",{\"1\":{\"1011\":1}}],[\"但是它允许无亲缘关系进程间的通信\",{\"1\":{\"3461\":1}}],[\"但是它很大程度上避免幻读现象\",{\"1\":{\"3011\":1,\"6683\":1}}],[\"但是它并不是意向锁\",{\"1\":{\"2964\":1,\"6636\":1}}],[\"但是它的意思不是指这个算法不常用\",{\"1\":{\"1744\":1}}],[\"但是它的效率比hashtable要高好多倍\",{\"1\":{\"943\":1}}],[\"但是它的效率会比hashtable要好很多\",{\"1\":{\"943\":1}}],[\"但是它不存在我们所说的空间局部性了\",{\"1\":{\"1626\":1}}],[\"但是它也仅仅是保证topic的一个分区顺序处理\",{\"1\":{\"1588\":1}}],[\"但是它却有一个别名叫\",{\"1\":{\"240\":1,\"280\":1}}],[\"但是在生产环境需要慎用\",{\"1\":{\"4891\":1}}],[\"但是在\",{\"1\":{\"1273\":1,\"3113\":1,\"5615\":1,\"6769\":1}}],[\"但是在随机hashcode下\",{\"1\":{\"929\":1,\"5446\":1}}],[\"但是在框架中的几乎是必用的一门技术\",{\"1\":{\"896\":1,\"5514\":1}}],[\"但是位运算比取余运算要高效的多\",{\"1\":{\"927\":1,\"5444\":1}}],[\"但是之后还有但是\",{\"1\":{\"843\":1}}],[\"但是vector却对该方法加了方法锁\",{\"1\":{\"842\":1}}],[\"但是静态方法只能给this对象加锁\",{\"1\":{\"838\":1}}],[\"但是可能会造成太多过期\",{\"1\":{\"3173\":1,\"6831\":1}}],[\"但是可能会出现一种极端的情况\",{\"1\":{\"691\":1,\"5458\":1}}],[\"但是可以通过调整参数来降低\",{\"1\":{\"2156\":1}}],[\"但是可以根据应用场景设置为边缘触发模式\",{\"1\":{\"1780\":1,\"6281\":1}}],[\"但是可并行执行\",{\"1\":{\"378\":1}}],[\"但是聪明的你想到可以加个判断\",{\"1\":{\"506\":1,\"5394\":1}}],[\"但是return前执行的finally块内\",{\"1\":{\"485\":1}}],[\"但是\",{\"1\":{\"436\":1,\"594\":1,\"596\":1,\"598\":1,\"605\":1,\"610\":1,\"619\":1,\"630\":1,\"842\":1,\"843\":1,\"982\":1,\"1060\":1,\"1659\":1,\"1772\":1,\"1828\":1,\"2032\":1,\"2365\":1,\"2729\":1,\"2765\":1,\"2870\":1,\"2924\":1,\"3176\":1,\"3235\":1,\"3255\":1,\"3685\":1,\"4675\":1,\"5327\":1,\"5854\":1,\"6357\":1,\"6398\":1,\"6434\":1,\"6542\":1,\"6596\":1,\"6834\":1,\"6860\":1,\"6977\":1,\"7000\":1,\"7078\":1,\"7194\":1}}],[\"但是无法找到足够大的连续空间来分配给当前对象\",{\"1\":{\"406\":1}}],[\"但是你需要使用相对链接\",{\"1\":{\"125\":1,\"5238\":1}}],[\"吞吐量\",{\"1\":{\"4188\":1}}],[\"吞吐量会下降很多\",{\"1\":{\"3841\":1,\"5957\":1}}],[\"吞吐量最高的方式\",{\"1\":{\"1514\":1}}],[\"吞吐量低\",{\"1\":{\"369\":1}}],[\"吞吐量优先\",{\"1\":{\"355\":1}}],[\"重命名为\",{\"1\":{\"6989\":1}}],[\"重量级锁\",{\"0\":{\"5817\":1}}],[\"重量级锁是指当有一个线程获取锁之后\",{\"1\":{\"3808\":1,\"5819\":1}}],[\"重点是基于这几个public方法\",{\"1\":{\"3916\":1,\"6064\":1}}],[\"重要\",{\"1\":{\"3172\":1,\"6830\":1}}],[\"重要的内容\",{\"1\":{\"73\":1,\"5186\":1}}],[\"重启\",{\"1\":{\"3307\":1}}],[\"重启时\",{\"1\":{\"3164\":1,\"6820\":1}}],[\"重启加载\",{\"1\":{\"3164\":1,\"6820\":1}}],[\"重做日志\",{\"1\":{\"2976\":1,\"6648\":1}}],[\"重置为\",{\"1\":{\"2694\":1}}],[\"重传等等\",{\"1\":{\"7071\":1}}],[\"重传丢失的数据包\",{\"1\":{\"2704\":1}}],[\"重传丢失的报文段\",{\"1\":{\"2650\":1}}],[\"重传\",{\"1\":{\"2571\":1,\"2573\":1,\"2574\":2,\"2576\":1,\"2606\":1,\"2608\":1}}],[\"重传的\",{\"1\":{\"2540\":1}}],[\"重定向已存在的缓冲文件\",{\"1\":{\"2203\":1}}],[\"重写和参数处理后\",{\"1\":{\"4962\":1}}],[\"重写\",{\"1\":{\"4957\":1,\"4965\":1}}],[\"重写简单\",{\"1\":{\"4479\":1,\"6112\":1}}],[\"重写compare\",{\"1\":{\"4274\":1}}],[\"重写之后比较的是对象的值\",{\"1\":{\"4191\":1}}],[\"重写finalize引发频繁gc\",{\"1\":{\"2116\":1}}],[\"重写writeobject来实现自定义的序列化\",{\"1\":{\"796\":1}}],[\"重复确认了好几遍哈哈哈哈哈哈哈\",{\"1\":{\"4314\":1,\"7139\":1}}],[\"重复上述操作\",{\"1\":{\"3625\":1}}],[\"重复发送多次\",{\"1\":{\"2556\":1}}],[\"重复\",{\"1\":{\"2459\":1}}],[\"重复第3\",{\"1\":{\"2109\":1}}],[\"重复数据等\",{\"1\":{\"2071\":1,\"5776\":1}}],[\"重复这个过程直到找到了一个访问位为\",{\"1\":{\"1742\":1}}],[\"重试机制\",{\"1\":{\"4508\":1,\"6130\":1}}],[\"重试次数\",{\"1\":{\"1564\":1}}],[\"重试等\",{\"1\":{\"1407\":1}}],[\"重新发送请求获取资源\",{\"1\":{\"2199\":1}}],[\"重新分配和复制数组的开销被平摊了\",{\"1\":{\"749\":1}}],[\"重新标记\",{\"1\":{\"365\":1}}],[\"能处理写请求嘛\",{\"1\":{\"6180\":1}}],[\"能正常调用\",{\"1\":{\"6140\":1}}],[\"能不能将\",{\"1\":{\"4886\":1,\"7264\":1}}],[\"能不能说一下git\",{\"0\":{\"3370\":1}}],[\"能最晚啥时候\",{\"1\":{\"4285\":1,\"7110\":1}}],[\"能让写入缓存中的最新数据更新写入主内存\",{\"1\":{\"3718\":1,\"5917\":1}}],[\"能让被动关闭方接收\",{\"1\":{\"2620\":1}}],[\"能让使用者明确指定在一个长度为\",{\"1\":{\"382\":1}}],[\"能被正确的关闭\",{\"1\":{\"2619\":1}}],[\"能保证数据的可靠性交付\",{\"1\":{\"2504\":1}}],[\"能建立\",{\"0\":{\"2641\":1,\"2644\":1},\"1\":{\"2439\":1,\"2440\":1}}],[\"能告诉我\",{\"1\":{\"2390\":1,\"7094\":1}}],[\"能从断点处继续执行\",{\"1\":{\"1872\":1}}],[\"能在上一次分配的结果的基础上\",{\"1\":{\"1485\":1,\"6937\":1}}],[\"能解决开发中遇到的bug\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"能解决非平衡树问题\",{\"1\":{\"691\":1,\"5458\":1}}],[\"能够提供更高的安全性和用户隐私保护\",{\"1\":{\"7079\":1}}],[\"能够把报文转发到\",{\"1\":{\"7048\":1}}],[\"能够把更多的\",{\"1\":{\"2273\":1}}],[\"能够同时监听的\",{\"1\":{\"6269\":1}}],[\"能够同时保证\",{\"1\":{\"4651\":1,\"6224\":1}}],[\"能够将存储空间中存储的文件恢复至任意时刻的历史版本\",{\"1\":{\"4703\":1}}],[\"能够将那些与业务无关\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"能够接收客户端的请求\",{\"1\":{\"4633\":1,\"6176\":1}}],[\"能够发起投票\",{\"1\":{\"4632\":1,\"6175\":1}}],[\"能够进行网络通信\",{\"1\":{\"3458\":1}}],[\"能够自动执行重复性任务\",{\"1\":{\"3291\":1,\"6080\":1}}],[\"能够命中前者的查询肯定是能够命中后者的\",{\"1\":{\"2838\":1,\"6510\":1}}],[\"能够命中索引\",{\"1\":{\"2838\":1,\"6510\":1}}],[\"能够精确地知道该\",{\"1\":{\"1164\":1}}],[\"能够加快检索速率\",{\"1\":{\"921\":1,\"5438\":1}}],[\"能够到达到的对象都是存活的\",{\"1\":{\"301\":1}}],[\"能有明确定义\",{\"1\":{\"648\":1}}],[\"能更好吧\",{\"1\":{\"623\":1}}],[\"能直接关联到的对象\",{\"1\":{\"363\":1}}],[\"由阿里云提供技术支持和服务保障\",{\"1\":{\"4738\":1}}],[\"由proxy代理实例去完成真正的远程访问\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"由inheritablethreadlocal类维护\",{\"1\":{\"3762\":1,\"5993\":1}}],[\"由threadlocal类维护\",{\"1\":{\"3762\":1,\"5993\":1}}],[\"由objectmonitor实现的\",{\"1\":{\"3740\":1,\"5972\":1}}],[\"由操作系统来负责线程间的调度和线程的状态变更\",{\"1\":{\"3808\":1,\"5819\":1}}],[\"由操作系统保证原子性\",{\"1\":{\"3699\":1,\"5868\":1}}],[\"由操作系统硬件来保证\",{\"1\":{\"3678\":1,\"5847\":1}}],[\"由操作系统转换成不同的物理地址\",{\"1\":{\"1630\":1}}],[\"由哪个哨兵节点来执行主从切换呢\",{\"1\":{\"3208\":1}}],[\"由read\",{\"1\":{\"3045\":1}}],[\"由客户端向服务器发起加密通信请求\",{\"1\":{\"2319\":1}}],[\"由内核中的\",{\"1\":{\"1770\":1}}],[\"由内核修改后\",{\"1\":{\"1769\":1}}],[\"由多个\",{\"1\":{\"1439\":1}}],[\"由指定的线程池中的线程执行\",{\"1\":{\"1371\":1}}],[\"由两个方法int\",{\"1\":{\"1011\":1}}],[\"由自己创建⼀个静态变量存储实例\",{\"1\":{\"856\":1,\"5486\":1}}],[\"由这两个关系决定了一个结点的祖先结点\",{\"1\":{\"662\":1}}],[\"由于目标接口与主机\",{\"1\":{\"7049\":1}}],[\"由于子查询会产生大量的临时表也没有索引\",{\"1\":{\"6741\":1}}],[\"由于图片存储到oss中\",{\"1\":{\"4849\":1,\"7238\":1}}],[\"由于协议是\",{\"1\":{\"4598\":1,\"6182\":1}}],[\"由于微服务是分布式服务\",{\"1\":{\"4477\":1,\"6110\":1}}],[\"由于队列永远不会被放满\",{\"1\":{\"3878\":1,\"6033\":1}}],[\"由于之前没有释放锁\",{\"1\":{\"3797\":1,\"5809\":1}}],[\"由于访问的频率非常高\",{\"1\":{\"3622\":1}}],[\"由于内存实体存在于计算机系统中\",{\"1\":{\"3474\":1}}],[\"由于隔离的进程独立于宿主和其它的隔离的进程\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"由于在对记录加独占锁前\",{\"1\":{\"2916\":1,\"6588\":1}}],[\"由于没有第三次握手\",{\"1\":{\"2555\":1}}],[\"由于没有线程交互的开销\",{\"1\":{\"347\":1}}],[\"由于是工作在应用层\",{\"1\":{\"2265\":1}}],[\"由于是同步发送会阻塞\",{\"1\":{\"1517\":1}}],[\"由于哈希冲突的存在\",{\"1\":{\"2165\":1}}],[\"由于多线程执行操作共享变量的这段代码可能会导致竞争状态\",{\"1\":{\"1978\":1}}],[\"由于同一进程的各线程间共享内存和文件资源\",{\"1\":{\"1908\":1}}],[\"由于数据被访问了一次\",{\"1\":{\"1697\":1}}],[\"由于每个进程都有自己的页表\",{\"1\":{\"1637\":1}}],[\"由于不是本文重点\",{\"1\":{\"1054\":1}}],[\"由于hashtable会尽量使用素数\",{\"1\":{\"1054\":1}}],[\"由于篇幅有限\",{\"1\":{\"1050\":1}}],[\"由于15的二进制扩展到32位为\",{\"1\":{\"1037\":1}}],[\"由于红黑树的每次操作平均要旋转一次和变换颜色\",{\"1\":{\"705\":1,\"5473\":1}}],[\"由于\",{\"1\":{\"616\":1,\"2504\":1,\"2507\":1,\"3076\":1,\"6727\":1,\"7072\":1,\"7073\":1}}],[\"由开发者再做选择\",{\"1\":{\"611\":1}}],[\"由\",{\"1\":{\"425\":1,\"1791\":1,\"2374\":1,\"2463\":1,\"5316\":1,\"6296\":1}}],[\"由执行引擎读取下一条指令\",{\"1\":{\"189\":1}}],[\"翻译为串行\",{\"1\":{\"345\":1}}],[\"串行级别下的快照读会退化成当前读\",{\"1\":{\"3024\":1}}],[\"串行化\",{\"1\":{\"3000\":1,\"3007\":1,\"3008\":1,\"3010\":2,\"3016\":1,\"6672\":1,\"6679\":1,\"6680\":1,\"6682\":2,\"6688\":1}}],[\"串行指的是垃圾收集器与用户程序交替执行\",{\"1\":{\"343\":1}}],[\"串行与并行\",{\"1\":{\"343\":1}}],[\"单播发送\",{\"1\":{\"7055\":1}}],[\"单播响应\",{\"1\":{\"7054\":1}}],[\"单播响应协议\",{\"1\":{\"7043\":1}}],[\"单机吞吐量\",{\"1\":{\"4775\":1}}],[\"单个服务内部高度耦合\",{\"1\":{\"4478\":1,\"6111\":1}}],[\"单次业务中或一段时间内\",{\"1\":{\"4188\":1}}],[\"单次读\",{\"1\":{\"3713\":1}}],[\"单列索引\",{\"1\":{\"4173\":1}}],[\"单一认证系统\",{\"1\":{\"4044\":1}}],[\"单点登录后一定时间内访问都无需重新登录\",{\"1\":{\"4063\":1}}],[\"单点登录\",{\"1\":{\"4043\":1}}],[\"单表不要包含过多字段\",{\"0\":{\"6728\":1},\"1\":{\"3077\":1}}],[\"单元化\",{\"1\":{\"2074\":1,\"5779\":1}}],[\"单元测试和集成测试\",{\"1\":{\"1351\":1,\"5676\":1}}],[\"单\",{\"0\":{\"6341\":1,\"6362\":1},\"1\":{\"1815\":1,\"1816\":1,\"1822\":1,\"1827\":1,\"1831\":1,\"1833\":1,\"6328\":1,\"6329\":1,\"6332\":1,\"6334\":1,\"6335\":1,\"6342\":1,\"6343\":1,\"6344\":1,\"6351\":1,\"6356\":1,\"6360\":1,\"6361\":1,\"6363\":1,\"6364\":1,\"6373\":1,\"6377\":1,\"6379\":1,\"6381\":2}}],[\"单进程的方案不适用计算机密集型的场景\",{\"1\":{\"1831\":1,\"6360\":1}}],[\"单进程的方案因为全部工作都在同一个进程内完成\",{\"1\":{\"1827\":1,\"6356\":1}}],[\"单进程\",{\"0\":{\"1814\":1,\"6341\":1},\"1\":{\"1815\":1,\"1822\":1,\"6328\":1,\"6330\":1,\"6332\":2,\"6334\":1,\"6342\":1,\"6344\":1,\"6351\":1,\"6361\":1}}],[\"单例设计模式\",{\"1\":{\"1211\":1,\"5563\":1}}],[\"单例模式和密码验证逻辑\",{\"1\":{\"4437\":1}}],[\"单例模式属于创建型模式\",{\"1\":{\"856\":1,\"5486\":1}}],[\"单例模式\",{\"0\":{\"855\":1,\"5485\":1},\"1\":{\"4269\":1}}],[\"单例\",{\"1\":{\"854\":1,\"5484\":1}}],[\"单线程读写\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"单线程方案是一样的\",{\"1\":{\"1838\":1,\"6370\":1}}],[\"单线程\",{\"1\":{\"1816\":1,\"1833\":1,\"6343\":1,\"6363\":1}}],[\"单线程指的是垃圾收集器只使用一个线程进行收集\",{\"1\":{\"342\":1}}],[\"单线程与多线程\",{\"1\":{\"342\":1}}],[\"单词首字母缩写\",{\"1\":{\"6282\":1}}],[\"单词\",{\"1\":{\"67\":1,\"5180\":1}}],[\"76435385\",{\"1\":{\"6955\":2}}],[\"76ms\",{\"1\":{\"636\":1}}],[\"7文章详情静态化及存储\",{\"0\":{\"4838\":1}}],[\"7218915344130359351\",{\"1\":{\"4590\":1}}],[\"7以前怎么用\",{\"1\":{\"4383\":1}}],[\"70730532\",{\"1\":{\"3846\":1,\"5963\":1}}],[\"7000\",{\"1\":{\"3579\":1,\"3580\":1}}],[\"7读锁\",{\"0\":{\"3835\":1}}],[\"7管道指令\",{\"0\":{\"3420\":1}}],[\"7jdbc防止sql注入\",{\"0\":{\"3060\":1}}],[\"7字节\",{\"1\":{\"3029\":1,\"6695\":1}}],[\"7覆盖索引\",{\"0\":{\"2812\":1}}],[\"7为什么\",{\"0\":{\"2613\":1}}],[\"7第一次握手丢失了\",{\"0\":{\"2570\":1}}],[\"793\",{\"1\":{\"2537\":1}}],[\"79205460\",{\"1\":{\"2189\":1}}],[\"7tcp\",{\"0\":{\"2516\":1}}],[\"7http\",{\"0\":{\"2270\":1}}],[\"77479344\",{\"1\":{\"2136\":1}}],[\"7中的实现几乎无差别\",{\"1\":{\"1073\":1}}],[\"7中基本类似\",{\"1\":{\"1067\":1}}],[\"7中hashmap和hashtable中对于hash的实现\",{\"1\":{\"1055\":1}}],[\"7中hashmap的hash方法以及indexof方法的实现\",{\"1\":{\"1046\":1}}],[\"7中hashtable的hash方法的实现\",{\"1\":{\"1046\":1}}],[\"7中扩容时\",{\"1\":{\"919\":1,\"5436\":1}}],[\"7的hashmap为例\",{\"1\":{\"1007\":1}}],[\"737\",{\"1\":{\"3527\":1}}],[\"73\",{\"1\":{\"1001\":1}}],[\"7540正式发表了\",{\"1\":{\"6976\":1,\"6999\":1}}],[\"75\",{\"1\":{\"991\":1,\"995\":2}}],[\"75正好是3\",{\"1\":{\"990\":1}}],[\"75有一个好处\",{\"1\":{\"990\":1}}],[\"75f\",{\"1\":{\"967\":2,\"990\":1}}],[\"7q7\",{\"0\":{\"617\":1}}],[\"7g1\",{\"0\":{\"371\":1}}],[\"7\",{\"0\":{\"476\":1,\"710\":1,\"931\":1,\"1347\":1,\"1540\":1,\"1541\":1,\"1548\":1,\"1691\":1,\"1692\":1,\"1696\":1,\"1698\":1,\"1700\":1,\"1705\":1,\"1707\":1,\"1709\":1,\"1713\":1,\"3364\":1,\"3542\":1,\"3543\":1,\"3547\":1,\"3562\":1,\"3583\":1,\"3584\":1,\"3592\":1,\"3618\":1,\"3620\":1,\"3623\":1,\"3627\":1,\"3990\":1,\"4138\":1,\"4216\":1,\"5371\":1},\"1\":{\"341\":1,\"409\":1,\"410\":1,\"491\":1,\"980\":1,\"982\":1,\"1015\":1,\"1016\":1,\"1022\":1,\"1027\":1,\"1028\":1,\"1035\":1,\"1045\":1,\"1061\":1,\"1079\":1,\"1206\":1,\"1443\":1,\"1455\":1,\"2500\":1,\"3128\":1,\"3136\":1,\"3527\":1,\"4136\":1,\"4294\":1,\"4331\":1,\"4345\":1,\"4354\":1,\"4365\":1,\"4376\":1,\"4387\":1,\"4403\":1,\"4434\":1,\"4448\":1,\"4456\":1,\"5298\":1,\"5299\":1,\"5378\":1,\"5558\":1,\"6784\":1,\"6792\":1,\"6903\":1,\"6955\":3,\"7033\":2,\"7119\":1,\"7156\":1,\"7170\":1}}],[\"7什么是\",{\"0\":{\"270\":1}}],[\"以单播的方式\",{\"1\":{\"7050\":1}}],[\"以线程为例\",{\"1\":{\"6382\":1}}],[\"以免错失读写的机会\",{\"1\":{\"6279\":1}}],[\"以确保结果的顺序正确\",{\"1\":{\"4960\":1}}],[\"以满足分页条件\",{\"1\":{\"4958\":1}}],[\"以满足自己的特殊需求\",{\"1\":{\"428\":1,\"5319\":1}}],[\"以包含分页逻辑\",{\"1\":{\"4957\":1}}],[\"以提升效率及节省成本\",{\"1\":{\"4666\":1,\"7185\":1}}],[\"以提高消费能力\",{\"1\":{\"1439\":1}}],[\"以前所有的代码都放在同一个工程中\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"以保证上层数据查询的高性能\",{\"1\":{\"7183\":1}}],[\"以保证任意时间里只有一个线程在操作共享资源\",{\"1\":{\"6375\":1}}],[\"以保证冷数据\",{\"1\":{\"5003\":1,\"7285\":1}}],[\"以保证您其他应用的网络带宽\",{\"1\":{\"4724\":1}}],[\"以保证用户热数据高扩展和高性能指标\",{\"1\":{\"4665\":1,\"7184\":1}}],[\"以保证数据查询的高性能\",{\"1\":{\"4664\":1}}],[\"以保证sso的安全性\",{\"1\":{\"4064\":1}}],[\"以保证操作最大程度的独占性\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"以实现认证信息的共享\",{\"1\":{\"4047\":1}}],[\"以实现consumer之间的分区分配\",{\"1\":{\"1470\":1,\"6918\":1}}],[\"以避免浪费处理器资源\",{\"1\":{\"3827\":1}}],[\"以降低短时间内大量锁请求\",{\"1\":{\"3810\":1,\"5821\":1}}],[\"以二进制格式转储\",{\"1\":{\"3567\":1}}],[\"以长数据串行列出\",{\"1\":{\"3395\":1}}],[\"以网络带宽资源\",{\"1\":{\"3084\":1,\"6736\":1}}],[\"以后\",{\"1\":{\"3082\":1,\"6733\":1}}],[\"以此来延续之前的迭代过程\",{\"1\":{\"4893\":1}}],[\"以此实现了全局有序这一特性\",{\"1\":{\"4604\":1}}],[\"以此实现非锁定读\",{\"1\":{\"3040\":1,\"6708\":1}}],[\"以此类推\",{\"1\":{\"1941\":1,\"2010\":1,\"2022\":1}}],[\"以\",{\"1\":{\"2846\":1,\"3214\":1,\"6518\":1}}],[\"以生成出一个最好的执行计划\",{\"1\":{\"2834\":1,\"6506\":1}}],[\"以太网中一般为\",{\"1\":{\"2567\":1}}],[\"以刚才描述的场景为例\",{\"1\":{\"2008\":1}}],[\"以链表形式来组织\",{\"1\":{\"1771\":1}}],[\"以最快速度恢复可用性\",{\"1\":{\"1539\":1}}],[\"以较小的那个为准\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"以非事务方式运行\",{\"1\":{\"1244\":1,\"1245\":1,\"5596\":1,\"5597\":1}}],[\"以及其他用户信息\",{\"1\":{\"5074\":1}}],[\"以及这些密码对应的md5值\",{\"1\":{\"5054\":1}}],[\"以及控制流速控制和熔断处理都是常用的架构手段\",{\"1\":{\"4658\":1,\"7177\":1}}],[\"以及新的前端技术\",{\"1\":{\"4121\":1}}],[\"以及soa服务治理架构\",{\"1\":{\"3983\":1}}],[\"以及每个死锁的线程堆栈信息\",{\"1\":{\"3630\":1}}],[\"以及只包含\",{\"1\":{\"3560\":1}}],[\"以及\",{\"1\":{\"3290\":1,\"3305\":1,\"3361\":1,\"5024\":1,\"6079\":1,\"6091\":1,\"7288\":1}}],[\"以及消费者消费数据的对象\",{\"1\":{\"1444\":1}}],[\"以及上述同步操作耗时长等情况\",{\"1\":{\"1419\":1}}],[\"以及actuator\",{\"1\":{\"1361\":1,\"5686\":1}}],[\"以及何时被销毁\",{\"1\":{\"1164\":1}}],[\"以及被\",{\"1\":{\"425\":1,\"5316\":1}}],[\"以下是从数据库中根据id查询数据时\",{\"1\":{\"4754\":1}}],[\"以下是排查方法\",{\"1\":{\"3512\":1}}],[\"以下是java\",{\"1\":{\"1046\":1}}],[\"以下称为异常表\",{\"1\":{\"488\":1,\"5375\":1}}],[\"以上的隔离级别\",{\"1\":{\"3008\":1,\"6680\":1}}],[\"以上两个topic的情况\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"以上方法得到的int的hash值\",{\"1\":{\"1069\":1}}],[\"以上区别基于jdk1\",{\"1\":{\"951\":1}}],[\"以上是\",{\"1\":{\"341\":1}}],[\"以动态\",{\"1\":{\"880\":1}}],[\"以让新版本的开发者不再允许使用这个类\",{\"1\":{\"597\":1}}],[\"以便有效地传达架构决策和理念\",{\"1\":{\"4109\":1}}],[\"以便确定需要回滚的提交\",{\"1\":{\"3353\":1}}],[\"以便下次直接从缓存中找到对应\",{\"1\":{\"2381\":1}}],[\"以便其他请求复用\",{\"1\":{\"2216\":1}}],[\"以便它们能够分摊缓存的压力\",{\"1\":{\"2007\":1}}],[\"以便进程重新执行时\",{\"1\":{\"1872\":1}}],[\"以便异步地调用该方法\",{\"1\":{\"1371\":1}}],[\"以便于告知方法调用者此方法有异常\",{\"1\":{\"471\":1,\"5366\":1}}],[\"以便\",{\"1\":{\"29\":1,\"5142\":1}}],[\"算法将机器分成三种角色\",{\"1\":{\"4586\":1}}],[\"算法和\",{\"1\":{\"2316\":1}}],[\"算法或者取模算法\",{\"1\":{\"2010\":1}}],[\"算法的时间复杂度\",{\"1\":{\"4874\":1,\"7252\":1}}],[\"算法的\",{\"1\":{\"2316\":1}}],[\"算法的优点\",{\"0\":{\"2029\":1}}],[\"算法的优化则叫\",{\"1\":{\"1763\":1,\"1764\":1}}],[\"算法的缺陷\",{\"0\":{\"2011\":1}}],[\"算法的工作方式是\",{\"1\":{\"1756\":1}}],[\"算法的思想\",{\"1\":{\"1731\":1}}],[\"算法首先检查表针指向的页面\",{\"1\":{\"1740\":1}}],[\"算法实现的\",{\"1\":{\"381\":1}}],[\"算法实现的收集器\",{\"1\":{\"381\":1}}],[\"算法\",{\"0\":{\"2004\":1,\"2014\":1},\"1\":{\"339\":1,\"1694\":1,\"1744\":1,\"1752\":1,\"1759\":1,\"1763\":1,\"5096\":1}}],[\"最新版的kafka\",{\"1\":{\"4566\":1}}],[\"最新的\",{\"1\":{\"2543\":1}}],[\"最佳部署容器docker\",{\"1\":{\"4486\":1,\"6119\":1}}],[\"最佳页面置换算法作用是为了衡量你的算法的效率\",{\"1\":{\"1729\":1}}],[\"最佳页面置换算法基本思路是\",{\"1\":{\"1726\":1}}],[\"最佳页面置换算法\",{\"1\":{\"1720\":1}}],[\"最熟悉的算法\",{\"0\":{\"4000\":1}}],[\"最多只会让一个具体的功能变得很慢\",{\"1\":{\"3619\":1}}],[\"最多可以装多少元素\",{\"1\":{\"974\":1}}],[\"最基础的三个目录如下\",{\"1\":{\"3492\":1}}],[\"最基本的功能由中央内核\",{\"1\":{\"3434\":1}}],[\"最基本的就是首先做好参数校验\",{\"1\":{\"3249\":1,\"6854\":1}}],[\"最近一段时间以来\",{\"1\":{\"6971\":1,\"6996\":1}}],[\"最近一次的读取时间\",{\"1\":{\"3482\":1}}],[\"最近读什么书\",{\"0\":{\"4094\":1}}],[\"最近获得了研究生国家奖学金\",{\"1\":{\"3933\":1}}],[\"最近修改的时间\",{\"1\":{\"3483\":1}}],[\"最近最少使用的页面在表尾\",{\"1\":{\"1735\":1}}],[\"最近最多使用的页面在表头\",{\"1\":{\"1735\":1}}],[\"最近最久未使用\",{\"1\":{\"1733\":1}}],[\"最近最久未使用的置换算法\",{\"1\":{\"1722\":1}}],[\"最友好\",{\"1\":{\"3173\":1,\"6831\":1}}],[\"最左前缀匹配原则指的是\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"最左前缀匹配原则\",{\"1\":{\"2818\":1,\"6490\":1}}],[\"最突出的优点是\",{\"1\":{\"2260\":1}}],[\"最常用的是\",{\"1\":{\"3449\":1}}],[\"最常用于客户端要求服务器使用\",{\"1\":{\"2216\":1}}],[\"最常见的并且可行的就是使用资源有序分配法\",{\"1\":{\"1997\":1}}],[\"最高的进程投入运行\",{\"1\":{\"1920\":1}}],[\"最高的隔离级别\",{\"1\":{\"1235\":1,\"5587\":1}}],[\"最短作业优先\",{\"1\":{\"1917\":1}}],[\"最短寻道时间优先\",{\"1\":{\"1756\":1}}],[\"最短寻道时间优先算法\",{\"1\":{\"1749\":1}}],[\"最短路径就是全黑节点\",{\"1\":{\"693\":1,\"5460\":1}}],[\"最少的那个页面\",{\"1\":{\"1744\":1}}],[\"最不常用\",{\"1\":{\"1744\":1}}],[\"最不常用置换算法\",{\"1\":{\"1724\":1}}],[\"最优置换算法是通过\",{\"1\":{\"1734\":1}}],[\"最长时间不访问的页面\",{\"1\":{\"1726\":1}}],[\"最长路径刚好是最短路径的两倍\",{\"1\":{\"693\":1,\"5460\":1}}],[\"最长路径就是一个红节点一个黑节点\",{\"1\":{\"693\":1,\"5460\":1}}],[\"最长路径的长度\",{\"1\":{\"671\":1}}],[\"最好在创建主题的时候就把分区规划好\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"最简单的异步调用\",{\"1\":{\"1375\":1}}],[\"最低的隔离级别\",{\"1\":{\"1232\":1,\"5584\":1}}],[\"最主要的考虑就是效率\",{\"1\":{\"1017\":1}}],[\"最先出队的总是优先级最高的\",{\"1\":{\"769\":1}}],[\"最后问有offer吗\",{\"1\":{\"4337\":1,\"7162\":1}}],[\"最后问我啥时能来实习\",{\"1\":{\"4307\":1,\"7132\":1}}],[\"最后女的hr问看你成绩这么好\",{\"1\":{\"4334\":1,\"7159\":1}}],[\"最后让明天面试\",{\"1\":{\"4285\":1,\"7110\":1}}],[\"最后直到成功为止\",{\"1\":{\"3665\":1,\"5828\":1}}],[\"最后通过\",{\"1\":{\"3558\":1}}],[\"最后找到占用\",{\"1\":{\"3548\":1,\"3555\":1}}],[\"最后将相关应用运行在从操作系统上\",{\"1\":{\"3311\":1}}],[\"最后再根据持久化方式\",{\"1\":{\"3155\":1,\"6811\":1}}],[\"最后发现事务id为4的事务不在当前活跃事务列表中\",{\"1\":{\"3053\":1}}],[\"最后判断4是否处于trx\",{\"1\":{\"3053\":1}}],[\"最后的结果是用户\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"最后把报文发送给服务端\",{\"1\":{\"2529\":1}}],[\"最后把该报文发给客户端\",{\"1\":{\"2528\":1}}],[\"最后使用算法定位数据访问到相应服务器\",{\"1\":{\"2018\":1}}],[\"最后在看看有没有单例工程类在三级缓存中\",{\"1\":{\"1283\":1,\"5625\":1}}],[\"最后以\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"最后一个\",{\"1\":{\"723\":1,\"1084\":1}}],[\"最后\",{\"1\":{\"639\":1,\"845\":1,\"1792\":1,\"4182\":1,\"4620\":1,\"6193\":1,\"6297\":1}}],[\"最后清理\",{\"1\":{\"333\":1}}],[\"最终返回给调用方\",{\"1\":{\"4965\":1}}],[\"最终返回容器对象\",{\"1\":{\"1392\":1}}],[\"最终转换成http的请求形式\",{\"1\":{\"4536\":1,\"6151\":1}}],[\"最终给开发者留出了一套简单易懂\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"最终的变量是放在了当前线程的\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"最终的结果\",{\"1\":{\"635\":1}}],[\"最终结果都是\",{\"1\":{\"3688\":1,\"5858\":1}}],[\"最终还是要\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"最终\",{\"1\":{\"2028\":1}}],[\"最终导致所有缓存的位置都要发生改变\",{\"1\":{\"2012\":1}}],[\"最终导致依赖创建失败\",{\"1\":{\"1253\":1,\"5605\":1}}],[\"最终它调用了\",{\"1\":{\"1811\":1,\"6318\":1}}],[\"最终加载meta\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"最终获取到以后调用\",{\"1\":{\"1283\":1,\"5625\":1}}],[\"最终陷入瘫痪\",{\"1\":{\"1066\":1}}],[\"最终得到的index的值不一样了\",{\"1\":{\"1042\":1}}],[\"最终标记阶段需要把\",{\"1\":{\"378\":1}}],[\"最终标记\",{\"1\":{\"378\":1}}],[\"最大的改造就是使用了\",{\"1\":{\"7071\":1}}],[\"最大的问题在于\",{\"1\":{\"574\":1}}],[\"最大的问题是\",{\"1\":{\"572\":1}}],[\"最大扩容可达\",{\"1\":{\"3880\":1,\"6035\":1}}],[\"最大可以同时运行的线程数量\",{\"1\":{\"3859\":1,\"6013\":1}}],[\"最大堆内存大小为\",{\"1\":{\"248\":1}}],[\"最顶层的加载类\",{\"1\":{\"425\":1,\"5316\":1}}],[\"虚拟的双向队列即不存在队列实例\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"虚拟节点越多\",{\"1\":{\"2035\":1}}],[\"虚拟地址空间的内部又被分为内核空间和用户空间两部分\",{\"1\":{\"1687\":1}}],[\"虚拟地址分为两部分\",{\"1\":{\"1661\":1}}],[\"虚拟地址中的段内偏移量应该位于\",{\"1\":{\"1645\":1}}],[\"虚拟地址和物理地址是如何映射的\",{\"1\":{\"1641\":1,\"1660\":1}}],[\"虚拟内存管理\",{\"0\":{\"6257\":1}}],[\"虚拟内存共享\",{\"1\":{\"1907\":1}}],[\"虚拟内存可以使得进程对运行内存超过物理内存大小\",{\"1\":{\"1636\":1}}],[\"虚拟内存有什么作用\",{\"1\":{\"1635\":1}}],[\"虚拟机如果检测不到某段代码被共享和竞争的可能性\",{\"1\":{\"3811\":1,\"5822\":1}}],[\"虚拟机参数之后\",{\"1\":{\"3570\":1}}],[\"虚拟机参数\",{\"1\":{\"3568\":1}}],[\"虚拟机中有很多线程\",{\"1\":{\"1816\":1,\"6343\":1}}],[\"虚拟机中的\",{\"1\":{\"341\":1}}],[\"虚拟机这个进程上面的\",{\"1\":{\"1816\":1,\"6343\":1}}],[\"虚拟机将这段时间对象变化记录在线程的\",{\"1\":{\"378\":1}}],[\"虚拟机将会抛出一个outofmemoryerror异常\",{\"1\":{\"208\":1}}],[\"虚拟机将会抛出一个\",{\"1\":{\"207\":1}}],[\"虚拟机的\",{\"1\":{\"334\":1}}],[\"虚拟机使用该算法来判断对象是否可被回收\",{\"1\":{\"302\":1}}],[\"虚拟机不使用引用计数算法\",{\"1\":{\"299\":1}}],[\"虚拟机指令根据这张常量表找到要执行的类名\",{\"1\":{\"285\":1}}],[\"虚拟机\",{\"1\":{\"277\":1,\"3740\":1,\"5972\":1}}],[\"虚拟机规范把方法区描述为堆的一个逻辑部分\",{\"1\":{\"240\":1,\"280\":1}}],[\"虚拟机规范中方法区的实现\",{\"1\":{\"239\":1}}],[\"虚拟机规范规定\",{\"1\":{\"228\":1}}],[\"虚拟机把堆内存逻辑上划分成三块区域\",{\"1\":{\"223\":1}}],[\"虚拟机管理的内存中最大的一块\",{\"1\":{\"222\":1}}],[\"虚拟机栈中引用的对象\",{\"1\":{\"303\":1}}],[\"虚拟机栈用于管理\",{\"1\":{\"219\":1}}],[\"虚拟机栈可以动态扩展\",{\"1\":{\"208\":1}}],[\"虚拟机栈允许的最大容量\",{\"1\":{\"207\":1}}],[\"虚拟机栈容量可以在线程创建的时候独立选定\",{\"1\":{\"207\":1}}],[\"虚拟机栈\",{\"1\":{\"186\":1,\"207\":1,\"3708\":1,\"5907\":1}}],[\"虚拟机定义了若干种程序运行期间会使用到的运行时数据区\",{\"1\":{\"185\":1}}],[\"虚引用\",{\"1\":{\"318\":1}}],[\"wushli77\",{\"1\":{\"5115\":1}}],[\"wm\",{\"1\":{\"4979\":1,\"4981\":1}}],[\"wmusermapper\",{\"1\":{\"4857\":4}}],[\"wmuser\",{\"1\":{\"4857\":5}}],[\"wmsensitives\",{\"1\":{\"4857\":2}}],[\"wmsensitivemapper\",{\"1\":{\"4857\":4}}],[\"wmsensitive\",{\"1\":{\"4857\":3}}],[\"wmnewsmessageconstants\",{\"1\":{\"4979\":1,\"4981\":2}}],[\"wmnewsmapper\",{\"1\":{\"4857\":5}}],[\"wmnewsdto\",{\"1\":{\"4979\":8}}],[\"wmnewsserviceimpl\",{\"1\":{\"4978\":1}}],[\"wmnewsautoscanservice\",{\"1\":{\"4857\":2}}],[\"wmnewsautoscanserviceimpl\",{\"1\":{\"4856\":1,\"4857\":3}}],[\"wmnews\",{\"1\":{\"4857\":54,\"4979\":11}}],[\"wmchannels\",{\"1\":{\"4999\":4}}],[\"wmchannelservice\",{\"1\":{\"4931\":4,\"4994\":4}}],[\"wmchannelmapper\",{\"1\":{\"4857\":4}}],[\"wmchannel\",{\"1\":{\"4857\":5,\"4999\":6}}],[\"wrappers\",{\"1\":{\"4857\":2,\"4979\":1}}],[\"writebytes\",{\"1\":{\"3527\":2}}],[\"write将数据写入到了系统内核缓冲区之后直接返回了\",{\"1\":{\"3161\":1,\"6817\":1}}],[\"writefields\",{\"1\":{\"790\":1}}],[\"writeint\",{\"1\":{\"787\":1}}],[\"write\",{\"0\":{\"1785\":1,\"6289\":1},\"1\":{\"787\":3,\"1783\":1,\"1787\":1,\"1791\":1,\"1799\":1,\"1981\":1,\"2880\":1,\"2913\":1,\"3161\":1,\"3167\":1,\"3478\":1,\"3527\":2,\"6240\":1,\"6279\":1,\"6286\":1,\"6291\":1,\"6296\":1,\"6304\":1,\"6552\":1,\"6585\":1,\"6817\":1,\"6823\":1}}],[\"writeobject\",{\"1\":{\"787\":2,\"790\":1}}],[\"wc\",{\"1\":{\"3600\":2}}],[\"w\",{\"1\":{\"3410\":1,\"3491\":1,\"3510\":1}}],[\"watistatus\",{\"1\":{\"3645\":1,\"5887\":1}}],[\"way\",{\"1\":{\"2538\":1}}],[\"waitstatus\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"waiting\",{\"0\":{\"3623\":1},\"1\":{\"1867\":1,\"3527\":1,\"3624\":4,\"3625\":1}}],[\"wait\",{\"0\":{\"2613\":1,\"2616\":1,\"2621\":1,\"2625\":1,\"2629\":1,\"2631\":1},\"1\":{\"1776\":1,\"1778\":1,\"1779\":1,\"1984\":1,\"2426\":1,\"2427\":1,\"2428\":1,\"2429\":1,\"2430\":1,\"2431\":1,\"2594\":1,\"2595\":1,\"2596\":1,\"2598\":1,\"2602\":1,\"2615\":1,\"2622\":1,\"2626\":1,\"3741\":1,\"3857\":1,\"5973\":1,\"6011\":1,\"6243\":1,\"6266\":1,\"6270\":1,\"6274\":1,\"6275\":1,\"6280\":1}}],[\"wang\",{\"1\":{\"1062\":1}}],[\"wiledemo\",{\"1\":{\"3527\":2}}],[\"will\",{\"1\":{\"1047\":1,\"3857\":2,\"6011\":2}}],[\"window\",{\"1\":{\"2653\":1,\"3450\":1,\"3451\":2}}],[\"wireshark\",{\"1\":{\"2281\":1}}],[\"withexpectedinsertions\",{\"1\":{\"2177\":1,\"2185\":1}}],[\"withfalsepositiveprobability\",{\"1\":{\"2177\":1,\"2185\":1}}],[\"with\",{\"0\":{\"476\":1,\"5371\":1},\"1\":{\"2854\":1,\"3857\":1,\"6011\":1,\"6526\":1}}],[\"weight\",{\"1\":{\"4999\":3}}],[\"weixin\",{\"1\":{\"882\":1,\"1153\":1,\"1368\":1,\"3063\":1,\"3702\":1,\"3727\":1,\"3846\":1,\"3930\":1,\"5646\":1,\"5734\":1,\"5824\":1,\"5929\":1,\"5963\":1,\"6074\":1,\"6714\":1}}],[\"wemediaclient\",{\"1\":{\"4930\":1,\"4931\":1,\"4993\":1,\"4994\":1}}],[\"wemediaapplication\",{\"1\":{\"4860\":2,\"4938\":2}}],[\"wemedia服务中已经依赖了heima\",{\"1\":{\"4858\":1}}],[\"wemedia\",{\"1\":{\"4857\":10,\"4860\":2,\"4924\":1,\"4929\":2,\"4931\":3,\"4938\":2,\"4994\":3,\"4999\":2}}],[\"wechat\",{\"1\":{\"3930\":1,\"6074\":1}}],[\"websockets\",{\"1\":{\"4297\":1,\"7122\":1}}],[\"web项目\",{\"1\":{\"4079\":1}}],[\"webmvcconfigurer配置类其实是spring内部的一种配置方式\",{\"1\":{\"1395\":1}}],[\"webmvcconfigurer\",{\"0\":{\"1394\":1},\"1\":{\"1395\":1}}],[\"web\",{\"1\":{\"1348\":1,\"1350\":2,\"4055\":1,\"4068\":1,\"4929\":1,\"4931\":2,\"4933\":4,\"4935\":1,\"4994\":2,\"5673\":1,\"5675\":2}}],[\"weakreference\",{\"1\":{\"317\":1}}],[\"word\",{\"1\":{\"1062\":1,\"3796\":2,\"5808\":2}}],[\"workerid\",{\"1\":{\"4826\":1,\"4974\":1,\"4976\":1}}],[\"worker\",{\"1\":{\"4823\":1,\"4824\":1,\"4971\":1,\"4972\":1}}],[\"worker就会阻塞\",{\"1\":{\"3886\":1}}],[\"workerset中的线程会不断的从workqueue中获取线程然后执行\",{\"1\":{\"3886\":1}}],[\"workqueue\",{\"1\":{\"3857\":6,\"3861\":1,\"6011\":6,\"6015\":1}}],[\"workspace\",{\"1\":{\"3333\":1}}],[\"working\",{\"1\":{\"3332\":1,\"3355\":1}}],[\"work\",{\"1\":{\"824\":1,\"826\":1}}],[\"world\",{\"1\":{\"363\":1,\"3963\":1,\"3970\":1}}],[\"www\",{\"1\":{\"556\":1,\"558\":1,\"560\":1,\"642\":1,\"711\":1,\"765\":1,\"2143\":1,\"2389\":1,\"2390\":2,\"2391\":1,\"2392\":1,\"2393\":1,\"2394\":1,\"4758\":1,\"5103\":1,\"6283\":1,\"6392\":1,\"7081\":1,\"7083\":1,\"7093\":1,\"7094\":2,\"7095\":1,\"7096\":1,\"7097\":1,\"7098\":1}}],[\"when\",{\"1\":{\"3857\":3,\"6011\":3}}],[\"whereis\",{\"1\":{\"3417\":1}}],[\"where\",{\"1\":{\"83\":1,\"2826\":1,\"4748\":1,\"5196\":1,\"6498\":1}}],[\"which\",{\"1\":{\"3417\":1}}],[\"while死循环\",{\"1\":{\"3532\":1}}],[\"while\",{\"1\":{\"480\":1,\"1610\":1,\"1613\":1,\"1617\":1,\"2111\":1}}],[\"弱引用当然也会一直有值\",{\"1\":{\"3773\":1}}],[\"弱引用\",{\"1\":{\"315\":1}}],[\"作者\",{\"1\":{\"4857\":1}}],[\"作者设置为\",{\"1\":{\"118\":1,\"5231\":1}}],[\"作为一线开发者\",{\"1\":{\"6972\":1,\"6997\":1}}],[\"作为一个优秀高效且可靠的分布式协调框架\",{\"1\":{\"4629\":1,\"6172\":1}}],[\"作为消息队列来使用\",{\"1\":{\"4886\":1,\"7264\":1}}],[\"作为起始点\",{\"1\":{\"3476\":1,\"5741\":1}}],[\"作为起始点进行搜索\",{\"1\":{\"301\":1}}],[\"作为中间介质\",{\"1\":{\"3471\":1}}],[\"作为\",{\"1\":{\"3300\":1,\"4623\":1,\"6086\":1,\"6200\":1}}],[\"作为索引结构\",{\"1\":{\"2749\":1,\"2760\":1,\"2765\":1,\"6418\":1,\"6429\":1,\"6434\":1}}],[\"作为后一个命令\",{\"1\":{\"1948\":1}}],[\"作为实现栈的接口\",{\"1\":{\"613\":1}}],[\"作为动态数组\",{\"1\":{\"575\":1}}],[\"作用是将应用层序的请求传递给硬件\",{\"1\":{\"3429\":1}}],[\"作用域的\",{\"1\":{\"1165\":3}}],[\"作用域\",{\"1\":{\"1164\":1}}],[\"作用域是同一个\",{\"1\":{\"1134\":1,\"5713\":1}}],[\"作用\",{\"1\":{\"511\":1,\"5399\":1}}],[\"垃圾收集器\",{\"0\":{\"5295\":1}}],[\"垃圾收集是在老年代内存满时执行的\",{\"1\":{\"236\":1}}],[\"垃圾\",{\"1\":{\"4433\":1,\"4434\":1,\"4435\":1,\"4436\":1}}],[\"垃圾问我这简历上没有的\",{\"1\":{\"4431\":1}}],[\"垃圾面试官显得自己很牛逼\",{\"1\":{\"4427\":1}}],[\"垃圾面试官\",{\"1\":{\"4427\":1,\"4437\":1,\"4439\":1}}],[\"垃圾回收算法\",{\"0\":{\"5294\":1}}],[\"垃圾回收等\",{\"1\":{\"3938\":1}}],[\"垃圾回收\",{\"1\":{\"2131\":1}}],[\"垃圾回收时间以及回收所获得的空间\",{\"1\":{\"374\":1}}],[\"垃圾回收机制\",{\"0\":{\"294\":1,\"5292\":1}}],[\"下载图片\",{\"1\":{\"4857\":1}}],[\"下载\",{\"1\":{\"4724\":1}}],[\"下载速率\",{\"1\":{\"4708\":1}}],[\"下载镜像\",{\"1\":{\"3307\":1}}],[\"下午6\",{\"1\":{\"4321\":1,\"7146\":1}}],[\"下文中有介绍\",{\"1\":{\"3545\":1}}],[\"下线或断线\",{\"1\":{\"3216\":1}}],[\"下一次\",{\"1\":{\"1727\":1,\"1728\":1}}],[\"下一篇\",{\"1\":{\"19\":1,\"5132\":1}}],[\"下\",{\"1\":{\"1656\":1,\"4895\":1}}],[\"下次我要是重启\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"下游服务\",{\"1\":{\"1413\":1}}],[\"下的当前需要执行的任务数据刷新到\",{\"1\":{\"4895\":1}}],[\"下的meta\",{\"1\":{\"1295\":1,\"5638\":1}}],[\"下的\",{\"1\":{\"1136\":1,\"1441\":1,\"5715\":1}}],[\"下的所有\",{\"1\":{\"427\":1,\"5318\":1}}],[\"下面就谈一谈\",{\"1\":{\"6288\":1}}],[\"下面这一段代码\",{\"1\":{\"5010\":1}}],[\"下面这张图可以加深你对线程池中各个参数的相互关系的理解\",{\"1\":{\"3867\":1,\"6021\":1}}],[\"下面通过代码示例来演示一下mybatis和mybatis\",{\"1\":{\"4745\":1}}],[\"下面我先来介绍一下\",{\"1\":{\"4614\":1,\"6187\":1}}],[\"下面我们使用具体案例说明一下一致性哈希算法的具体流程\",{\"1\":{\"2019\":1}}],[\"下面我们通过一段代码来看看局部性原理\",{\"1\":{\"1624\":1}}],[\"下面用一个小示例解释一下\",{\"1\":{\"3667\":1,\"5830\":1}}],[\"下面的\",{\"1\":{\"5946\":1}}],[\"下面的共享锁会解决这个问题\",{\"1\":{\"3830\":1}}],[\"下面的图片比较了\",{\"1\":{\"3310\":1}}],[\"下面的内容整理自\",{\"1\":{\"2765\":1,\"6434\":1}}],[\"下面是redis官方文档的描述\",{\"1\":{\"3194\":1}}],[\"下面是几种常见的线程同步的方式\",{\"1\":{\"1979\":1,\"6238\":1}}],[\"下面举例来说明分配的效果\",{\"1\":{\"1489\":1,\"6941\":1}}],[\"下面着重讲下\",{\"1\":{\"1411\":1}}],[\"下面\",{\"1\":{\"600\":1}}],[\"下标越界异常\",{\"1\":{\"459\":1,\"5354\":1}}],[\"下图是它的总体架构图\",{\"1\":{\"6083\":1}}],[\"下图是一个典型的哨兵集群监控的逻辑图\",{\"1\":{\"3193\":1}}],[\"下图中的那些null节点才是叶子节点\",{\"1\":{\"696\":1,\"5463\":1}}],[\"下图展示的各种类加载器之间的层次关系被称为类加载器的\",{\"1\":{\"442\":1,\"5334\":1}}],[\"下图来自\",{\"1\":{\"293\":1}}],[\"则引入了更多的缓存控制策略例如\",{\"1\":{\"7063\":1}}],[\"则可能产生重复的id\",{\"1\":{\"4820\":1,\"4967\":1}}],[\"则可以判定主库客观下线了\",{\"1\":{\"3207\":1}}],[\"则可以通过\",{\"1\":{\"3040\":1,\"6708\":1}}],[\"则可以确定该元素不在布隆过滤器中\",{\"1\":{\"2149\":1}}],[\"则放行\",{\"1\":{\"4813\":1,\"4832\":1,\"7210\":1,\"7221\":1}}],[\"则路由到后台管理微服务进行登录\",{\"1\":{\"4810\":1,\"4829\":1,\"7207\":1,\"7218\":1}}],[\"则变量的本次取值即被确定\",{\"1\":{\"4573\":1}}],[\"则认为该连接已断开\",{\"1\":{\"4217\":1}}],[\"则认为当前的\",{\"1\":{\"2635\":1}}],[\"则先委托父类加载\",{\"1\":{\"4196\":1}}],[\"则比较所指向对象的地址值\",{\"1\":{\"4190\":1}}],[\"则比较存储的值\",{\"1\":{\"4190\":1}}],[\"则新的任务会被暂存在一个任务队列中\",{\"1\":{\"3901\":1,\"6048\":1}}],[\"则立即执行\",{\"1\":{\"3901\":1,\"6048\":1}}],[\"则直接将自己挂起\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"则直接使用本地缓存\",{\"1\":{\"2252\":1}}],[\"则直接使用浏览器的本地缓存\",{\"1\":{\"2228\":1}}],[\"则以原子方式将该引用和该标志的值设置为给定的更新值\",{\"1\":{\"3689\":1,\"5859\":1}}],[\"则以非事务的方式继续运行\",{\"1\":{\"1240\":1,\"5592\":1}}],[\"则删掉\",{\"1\":{\"3597\":1}}],[\"则默认在当前工作目录下生成\",{\"1\":{\"3570\":1}}],[\"则默认采用\",{\"1\":{\"908\":1,\"5526\":1}}],[\"则表示锁可以被获取\",{\"1\":{\"3742\":1,\"5974\":1}}],[\"则表示\",{\"1\":{\"3538\":1}}],[\"则表明当前没有阻塞中的进程\",{\"1\":{\"1966\":1}}],[\"则表明当前有阻塞中的进程\",{\"1\":{\"1966\":1}}],[\"则表明还有资源可使用\",{\"1\":{\"1965\":1}}],[\"则表明资源已被占用\",{\"1\":{\"1965\":1}}],[\"则转入睡眠状态等待\",{\"1\":{\"3469\":1}}],[\"则复制链接文件属性而非文件本身\",{\"1\":{\"3406\":1}}],[\"则目的文件一定要是目录才行\",{\"1\":{\"3405\":1}}],[\"则进行下面命令\",{\"1\":{\"3385\":1}}],[\"则相当于直接拔电源\",{\"1\":{\"3324\":1}}],[\"则发送\",{\"1\":{\"3322\":1}}],[\"则从\",{\"1\":{\"3302\":1,\"6088\":1}}],[\"则说明是程序线程计算高引起的\",{\"1\":{\"3535\":1}}],[\"则说明\",{\"1\":{\"3048\":1}}],[\"则说明该类没有被加载过\",{\"1\":{\"444\":1,\"5337\":1}}],[\"则代表我read\",{\"1\":{\"3048\":1}}],[\"则当前事务能看到db\",{\"1\":{\"3046\":1}}],[\"则为空\",{\"1\":{\"3029\":1,\"6695\":1}}],[\"则通过\",{\"1\":{\"3304\":1,\"6090\":1}}],[\"则通过数据行的\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"则通过父类的loadclass来加载该类\",{\"1\":{\"444\":1,\"5337\":1}}],[\"则商品在商家手中\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"则给商家付了钱\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"则要执行这条命令\",{\"1\":{\"2853\":1,\"2858\":1,\"6525\":1,\"6530\":1}}],[\"则就会使用该字段过滤一批数据\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"则就先会进行分片\",{\"1\":{\"2569\":1}}],[\"则选择该字段为默认的主键\",{\"1\":{\"2787\":1,\"6456\":1}}],[\"则需要在文章微服务中创建app端需要的文章\",{\"1\":{\"4851\":1,\"7240\":1}}],[\"则需要在与客户端的交互中才能体现\",{\"1\":{\"3199\":1}}],[\"则需要修改自媒体文章的状态\",{\"1\":{\"4850\":1,\"7239\":1}}],[\"则需要进行下面的命令进行连通\",{\"1\":{\"3382\":1}}],[\"则需要先取出主键的值\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"则需要将他们都顺序执行完毕之后\",{\"1\":{\"1373\":1}}],[\"则取出其\",{\"1\":{\"2766\":1,\"6435\":1}}],[\"则没有\",{\"1\":{\"2493\":1}}],[\"则它直接返回\",{\"1\":{\"2390\":1,\"7094\":1}}],[\"则它下层可以随意变化\",{\"1\":{\"2265\":1}}],[\"则关闭加密通信\",{\"1\":{\"2326\":1}}],[\"则解决\",{\"1\":{\"2306\":1}}],[\"则保持\",{\"1\":{\"2294\":1}}],[\"则会调用afterpropertiesset方法\",{\"1\":{\"4134\":1}}],[\"则会注入bean对容器基础设施层面的依赖\",{\"1\":{\"4132\":1}}],[\"则会创建新的线程处理任务\",{\"1\":{\"3903\":1,\"6050\":1}}],[\"则会优先使用可复用的线程\",{\"1\":{\"3903\":1,\"6050\":1}}],[\"则会丢弃该任务\",{\"1\":{\"3871\":1,\"6026\":1}}],[\"则会在\",{\"1\":{\"2502\":1}}],[\"则会在传输层进行分片\",{\"1\":{\"2501\":1}}],[\"则会从本地缓存中加载资源\",{\"1\":{\"2258\":1}}],[\"则会向后端服务器请求数据\",{\"1\":{\"2012\":1}}],[\"则返回错误信息\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"则返回\",{\"1\":{\"2256\":1,\"2257\":1}}],[\"则返回最新资源\",{\"1\":{\"2242\":1}}],[\"则再次向服务器发起请求时\",{\"1\":{\"2245\":1}}],[\"则再次发起请求的时候带上\",{\"1\":{\"2242\":1}}],[\"则与被请求资源的最后修改时间进行对比\",{\"1\":{\"2242\":1}}],[\"则使用文本格式的报文\",{\"1\":{\"7067\":1}}],[\"则使用串行方式\",{\"1\":{\"7066\":1}}],[\"则使用空闲线程来处理\",{\"1\":{\"3879\":1,\"6034\":1}}],[\"则使用该缓存\",{\"1\":{\"2235\":1}}],[\"则使用逗号分割\",{\"1\":{\"471\":1,\"5366\":1}}],[\"则不写入缓存\",{\"1\":{\"4151\":1}}],[\"则不能确定该元素一定在布隆过滤器中\",{\"1\":{\"2149\":1}}],[\"则不久之后\",{\"1\":{\"1622\":1}}],[\"则不久之后该数据可能再次被访问\",{\"1\":{\"1622\":1}}],[\"则不久之后该指令可能再次被执行\",{\"1\":{\"1622\":1}}],[\"则mq服务器会push消息给消费者\",{\"1\":{\"2053\":1,\"5758\":1}}],[\"则证明对应的图片没有被缓存\",{\"1\":{\"2010\":1}}],[\"则只能在线程\",{\"1\":{\"1994\":1}}],[\"则停止当前运行的进程并将其移入到原队列末尾\",{\"1\":{\"1942\":1}}],[\"则将对象头设置成无锁状态\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"则将当前请求资源的线程设置为有效的工作线程\",{\"1\":{\"3642\":1,\"5883\":1}}],[\"则将其转入到第二级队列的末尾\",{\"1\":{\"1941\":1}}],[\"则将该\",{\"1\":{\"1186\":2}}],[\"则升高其优先级\",{\"1\":{\"1930\":1}}],[\"则降低其优先级\",{\"1\":{\"1930\":1}}],[\"则jvm会把该线程放入\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"则交由当前连接对应的\",{\"1\":{\"1825\":1,\"1837\":1,\"6354\":1,\"6369\":1}}],[\"则交由\",{\"1\":{\"1824\":1,\"1836\":1,\"6353\":1,\"6368\":1}}],[\"则在执行完a之后\",{\"1\":{\"1373\":1}}],[\"则在纯链表情况下\",{\"1\":{\"1066\":1}}],[\"则该取值等价于\",{\"1\":{\"1247\":1,\"5599\":1}}],[\"则创建一个事务作为当前事务的嵌套事务来运行\",{\"1\":{\"1247\":1,\"5599\":1}}],[\"则创建一个新的事务\",{\"1\":{\"1239\":1,\"5591\":1}}],[\"则把当前事务挂起\",{\"1\":{\"1243\":1,\"1244\":1,\"5595\":1,\"5596\":1}}],[\"则加入该事务\",{\"1\":{\"1239\":1,\"1240\":1,\"1241\":1,\"5591\":1,\"5592\":1,\"5593\":1}}],[\"则是互斥的\",{\"1\":{\"5952\":1}}],[\"则是把某个文件加入暂存区\",{\"1\":{\"3361\":1}}],[\"则是同一个事务中的第一个快照读才会创建read\",{\"1\":{\"3058\":1}}],[\"则是通过\",{\"1\":{\"1734\":1}}],[\"则是x\",{\"1\":{\"1024\":1}}],[\"则是未指定值\",{\"1\":{\"198\":1}}],[\"则2^3\",{\"1\":{\"1022\":1}}],[\"则应该选linkedlist\",{\"1\":{\"766\":1}}],[\"则应该设计成继承关系\",{\"1\":{\"590\":1}}],[\"则linkedlist是比较理想的选择\",{\"1\":{\"759\":1}}],[\"则用equals方法比较元素是否相等\",{\"1\":{\"737\":1}}],[\"则结点i无右孩子\",{\"1\":{\"684\":1}}],[\"则结点i无双亲\",{\"1\":{\"682\":1}}],[\"则结点i为叶子结点\",{\"1\":{\"683\":1}}],[\"则其双亲是结点\",{\"1\":{\"682\":1}}],[\"则对任一结点i\",{\"1\":{\"681\":1}}],[\"则n0＝n2＋1\",{\"1\":{\"679\":1}}],[\"则调用该初始化方法\",{\"1\":{\"1184\":1}}],[\"则调用postprocessafterinstantiation方法和postprocessproperties\",{\"1\":{\"1172\":1}}],[\"则调用postprocessbeforeinstantiation方法\",{\"1\":{\"1169\":1}}],[\"则调用postprocessbeanfactory方法\",{\"1\":{\"1168\":1}}],[\"则调用findclass方法来加载该类\",{\"1\":{\"444\":1,\"5337\":1}}],[\"则调用启动类加载器来加载该类\",{\"1\":{\"444\":1,\"5337\":1}}],[\"则抛出异常\",{\"1\":{\"444\":1,\"1241\":1,\"1245\":1,\"5337\":1,\"5593\":1,\"5597\":1}}],[\"则\",{\"1\":{\"291\":1,\"1175\":1,\"1176\":1,\"1177\":1,\"1179\":1,\"1180\":1,\"1181\":1,\"1182\":1,\"1183\":1,\"1185\":1,\"1187\":1,\"1188\":1,\"1926\":1,\"2697\":1,\"3034\":1,\"3120\":1,\"4616\":1,\"6189\":1,\"6701\":1,\"6776\":1}}],[\"语编写完的程序\",{\"1\":{\"1815\":1,\"6342\":1}}],[\"语句以包含分页逻辑\",{\"1\":{\"4965\":1}}],[\"语句中\",{\"1\":{\"4961\":1}}],[\"语句进行重写\",{\"1\":{\"4957\":1}}],[\"语句进行针对性的分析\",{\"1\":{\"3540\":1}}],[\"语句和参数进行修改\",{\"1\":{\"4953\":1}}],[\"语句时\",{\"1\":{\"4945\":1}}],[\"语句执行对象\",{\"1\":{\"4943\":1}}],[\"语句执行结束后才释放锁\",{\"1\":{\"2928\":1,\"6600\":1}}],[\"语句前后进行拦截和增强\",{\"1\":{\"4939\":1}}],[\"语句的时候\",{\"1\":{\"3013\":1,\"6685\":1}}],[\"语句的请求到来\",{\"1\":{\"2901\":1,\"6573\":1}}],[\"语句是不会对记录加锁的\",{\"1\":{\"2938\":1,\"6610\":1}}],[\"语句是利用\",{\"1\":{\"2910\":1,\"6582\":1}}],[\"语句且向\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"语句\",{\"0\":{\"3539\":1},\"1\":{\"1134\":1,\"1136\":1,\"2893\":2,\"2898\":1,\"2899\":1,\"2901\":1,\"2931\":1,\"3012\":1,\"3540\":2,\"4942\":1,\"4954\":1,\"4962\":1,\"5713\":2,\"5715\":1,\"6565\":2,\"6570\":1,\"6571\":1,\"6573\":1,\"6603\":1,\"6684\":1}}],[\"语言实现的\",{\"1\":{\"6361\":1}}],[\"语言实现的是\",{\"1\":{\"1815\":1,\"1816\":1,\"6342\":1,\"6343\":1}}],[\"语言使用进程和线程都可以\",{\"1\":{\"6339\":1}}],[\"语言一般使用线程\",{\"1\":{\"6338\":1}}],[\"语言标准函数和系统调用的封装\",{\"1\":{\"3449\":1}}],[\"语言的字符串并不记录自身长度\",{\"1\":{\"3102\":1,\"6758\":1}}],[\"语言的字符串表示\",{\"1\":{\"3100\":1,\"6756\":1}}],[\"语言\",{\"1\":{\"1897\":1,\"3290\":1,\"3679\":1,\"5848\":1,\"6079\":1}}],[\"语言编写\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"语言中\",{\"0\":{\"565\":1},\"1\":{\"603\":1}}],[\"语言中所有错误与异常的超类\",{\"1\":{\"455\":1,\"5350\":1}}],[\"语言并不要求常量一定只有编译期间才能产生\",{\"1\":{\"290\":1}}],[\"语法糖的作用就是方便程序员的使用\",{\"1\":{\"481\":1}}],[\"语法\",{\"0\":{\"93\":1,\"5206\":1},\"1\":{\"42\":1,\"5155\":1}}],[\"语法进行了扩展\",{\"1\":{\"39\":1,\"5152\":1}}],[\"语法扩展\",{\"1\":{\"37\":1,\"5150\":1}}],[\"包的基石\",{\"1\":{\"3700\":1,\"5869\":1}}],[\"包的长度也就不会大于\",{\"1\":{\"2569\":1}}],[\"包头的\",{\"1\":{\"2520\":1,\"2709\":1}}],[\"包长度\",{\"1\":{\"2514\":2}}],[\"包总量较少的通信\",{\"1\":{\"2508\":1}}],[\"包之外该位必须设置为\",{\"1\":{\"2447\":1}}],[\"包传给接收端主机\",{\"1\":{\"2444\":1}}],[\"包实现起步依赖\",{\"1\":{\"1290\":1}}],[\"包装器设计模式\",{\"1\":{\"1213\":1,\"5565\":1}}],[\"包括ap\",{\"1\":{\"4821\":1,\"4969\":1}}],[\"包括讯飞的大模型也没有开源\",{\"1\":{\"4425\":1}}],[\"包括人工智能和大数据处理\",{\"1\":{\"4109\":1}}],[\"包括文件管理器\",{\"1\":{\"3454\":1}}],[\"包括子系统\",{\"1\":{\"3435\":1}}],[\"包括客户端\",{\"1\":{\"3307\":1}}],[\"包括布隆过滤器\",{\"1\":{\"2175\":1}}],[\"包括内存\",{\"1\":{\"1900\":1}}],[\"包括系统变量\",{\"1\":{\"1383\":1}}],[\"包括责任链\",{\"1\":{\"854\":1,\"5484\":1}}],[\"包括适配器\",{\"1\":{\"854\":1,\"5484\":1}}],[\"包括⼯⼚\",{\"1\":{\"854\":1,\"5484\":1}}],[\"包括\",{\"1\":{\"782\":1,\"1197\":1,\"2099\":1,\"2461\":1,\"3445\":1,\"5549\":1}}],[\"包括运行时异常\",{\"1\":{\"468\":1,\"5363\":1}}],[\"包括编译器就已经明确的数值字面量\",{\"1\":{\"289\":1}}],[\"包和类以及被\",{\"1\":{\"426\":1,\"5317\":1}}],[\"包和类\",{\"1\":{\"425\":1,\"427\":1,\"5316\":1,\"5318\":1}}],[\"包含了完整的数据记录\",{\"1\":{\"4249\":1}}],[\"包含用户自定义的类\",{\"1\":{\"3545\":1}}],[\"包含文件的属性与权限等等数据\",{\"1\":{\"3395\":1}}],[\"包含文件数据\",{\"1\":{\"2096\":1}}],[\"包含历史\",{\"1\":{\"3307\":1}}],[\"包含三个东西\",{\"1\":{\"2462\":1}}],[\"包含\",{\"1\":{\"46\":1,\"5159\":1}}],[\"池中的数据项像数组项一样\",{\"1\":{\"288\":1}}],[\"类内部的\",{\"1\":{\"3765\":1,\"5996\":1}}],[\"类实现的定制化的\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"类似按关机键关机\",{\"1\":{\"3324\":1}}],[\"类似git的远程仓库\",{\"1\":{\"3296\":1}}],[\"类似键值对的形式\",{\"1\":{\"2771\":1,\"6440\":1}}],[\"类似\",{\"1\":{\"2210\":1,\"2212\":1,\"2932\":1,\"3415\":1,\"6604\":1}}],[\"类似于数据库的主键\",{\"1\":{\"1500\":1,\"6953\":1}}],[\"类状态码表示客户端请求报文正确\",{\"1\":{\"2208\":1}}],[\"类状态码表示客户端请求的资源发生了变动\",{\"1\":{\"2199\":1}}],[\"类状态码表示客户端发送的报文有误\",{\"1\":{\"2204\":1}}],[\"类状态码表示服务器成功处理了客户端的请求\",{\"1\":{\"2195\":1}}],[\"类状态码属于提示信息\",{\"1\":{\"2194\":1}}],[\"类中可以通过thread\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"类中有一个\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"类中使用频率最高的方法是\",{\"1\":{\"900\":1,\"5518\":1}}],[\"类中的\",{\"1\":{\"436\":1,\"5327\":1}}],[\"类是核心\",{\"1\":{\"899\":1,\"909\":1,\"5517\":1,\"5527\":1}}],[\"类库中有很多具体的实现\",{\"1\":{\"742\":1}}],[\"类或者\",{\"1\":{\"607\":1}}],[\"类或接口\",{\"1\":{\"288\":1}}],[\"类到底怎么了\",{\"0\":{\"571\":1}}],[\"类\",{\"0\":{\"565\":1},\"1\":{\"572\":1,\"607\":1,\"2377\":5,\"3295\":1}}],[\"类名\",{\"1\":{\"518\":1,\"5406\":1}}],[\"类型总结\",{\"0\":{\"6437\":1}}],[\"类型转换等\",{\"1\":{\"4254\":1}}],[\"类型转换等操作\",{\"1\":{\"2845\":1,\"6517\":1}}],[\"类型为精准浮点数\",{\"1\":{\"3075\":1,\"6726\":1}}],[\"类型\",{\"0\":{\"6723\":1},\"1\":{\"2092\":1,\"2209\":1,\"3072\":1}}],[\"类型的变量\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"类型的底层数据结构是由压缩列表或跳表实现的\",{\"1\":{\"3133\":1,\"6789\":1}}],[\"类型的底层数据结构是由压缩列表或哈希表实现的\",{\"1\":{\"3125\":1,\"6781\":1}}],[\"类型的底层数据结构是由哈希表或整数集合实现的\",{\"1\":{\"3118\":1,\"6774\":1}}],[\"类型的底层数据结构是由双向链表或压缩列表实现的\",{\"1\":{\"3110\":1,\"6766\":1}}],[\"类型的底层数据结构\",{\"1\":{\"3111\":1,\"3112\":1,\"3119\":1,\"3120\":1,\"3126\":1,\"3134\":1,\"3135\":1,\"6767\":1,\"6768\":1,\"6775\":1,\"6776\":1,\"6782\":1,\"6790\":1,\"6791\":1}}],[\"类型的底层的数据结构实现主要是\",{\"1\":{\"3099\":1,\"6755\":1}}],[\"类型的\",{\"1\":{\"1282\":1,\"3127\":1,\"3130\":1,\"5624\":1,\"6783\":1,\"6786\":1}}],[\"类型的类和方法\",{\"1\":{\"914\":1,\"5532\":1}}],[\"类型的文件主要三步\",{\"1\":{\"413\":1,\"5303\":1}}],[\"类型上都属于exception类及其子类\",{\"1\":{\"462\":1,\"5357\":1}}],[\"类及其子类\",{\"1\":{\"456\":1,\"5351\":1}}],[\"类使用委托模型来搜索类和资源\",{\"1\":{\"439\":1,\"5331\":1}}],[\"类有两个关键的方法\",{\"1\":{\"430\":1,\"5321\":1}}],[\"类都有一个引用指向加载它的\",{\"1\":{\"417\":1,\"5308\":1}}],[\"类从被加载到虚拟机内存中开始到卸载出内存为止\",{\"1\":{\"409\":1,\"5298\":1}}],[\"类加载过程\",{\"0\":{\"5301\":1},\"1\":{\"5304\":1}}],[\"类加载机制\",{\"0\":{\"407\":1,\"5296\":1}}],[\"类加载器层次关系图\",{\"1\":{\"5328\":1,\"5335\":1}}],[\"类加载器总结\",{\"0\":{\"5314\":1}}],[\"类加载器加载规则\",{\"0\":{\"5311\":1}}],[\"类加载器在进行类加载的时候\",{\"1\":{\"448\":1,\"5341\":1}}],[\"类加载器有很多种\",{\"1\":{\"438\":1,\"5330\":1}}],[\"类加载器的主要作用就是加载\",{\"1\":{\"419\":1,\"5310\":1}}],[\"类加载器是一个负责加载类的对象\",{\"1\":{\"416\":1,\"5307\":1}}],[\"类加载器\",{\"0\":{\"5305\":1},\"1\":{\"177\":1,\"901\":1,\"5286\":1,\"5519\":1}}],[\"类来构建分页查询条件\",{\"1\":{\"4955\":1}}],[\"类来保证引用对象之间的原子性\",{\"1\":{\"3697\":1,\"5866\":1}}],[\"类来实现弱引用\",{\"1\":{\"317\":1}}],[\"类来创建软引用\",{\"1\":{\"314\":1}}],[\"类的生命周期\",{\"0\":{\"5297\":1}}],[\"类的相关字节码信息\",{\"1\":{\"3736\":1,\"5967\":1}}],[\"类的名称\",{\"1\":{\"3596\":1}}],[\"类的对象\",{\"1\":{\"632\":1}}],[\"类的实现不好吗\",{\"0\":{\"595\":1}}],[\"类的全限定名\",{\"1\":{\"522\":1,\"5410\":1}}],[\"类的字节码\",{\"1\":{\"419\":1,\"428\":1,\"5310\":1,\"5319\":1}}],[\"类的\",{\"1\":{\"290\":1,\"904\":1,\"3290\":1,\"3763\":1,\"5522\":1,\"5994\":1,\"6079\":1}}],[\"都将不会捕获该分组\",{\"1\":{\"7046\":1}}],[\"都为0\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"都返回\",{\"1\":{\"4609\":1}}],[\"都说cas要比synchronized好\",{\"1\":{\"4332\":1,\"7157\":1}}],[\"都打包到一个文件中\",{\"1\":{\"3435\":1}}],[\"都必须维护一个\",{\"1\":{\"2549\":1}}],[\"都允许开发人员自定义和扩充\",{\"1\":{\"2264\":1}}],[\"都要新建一次\",{\"1\":{\"2292\":1}}],[\"都要验证信息\",{\"1\":{\"2276\":1}}],[\"都要进行双写\",{\"1\":{\"2068\":1,\"5773\":1}}],[\"都要接入一次新接口\",{\"1\":{\"1410\":1}}],[\"都不需要拷贝来拷贝去\",{\"1\":{\"1960\":1}}],[\"都不需要通过\",{\"1\":{\"1807\":1,\"6314\":1}}],[\"都放到一个文件描述符集合\",{\"1\":{\"1768\":1}}],[\"都有最大长度限制\",{\"1\":{\"2587\":1}}],[\"都有一个offset\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"都有若干个副本\",{\"1\":{\"1443\":1}}],[\"都支持\",{\"1\":{\"1431\":1,\"4759\":1}}],[\"都可以调用这个接口\",{\"1\":{\"4876\":1,\"7254\":1}}],[\"都可以用spring\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"都可以通过下文中介绍的两种排查思路去解决\",{\"1\":{\"3545\":1}}],[\"都可以保证一个报文一定能够到达接收端\",{\"1\":{\"2458\":1}}],[\"都可以先放进消息队列\",{\"1\":{\"1419\":1}}],[\"都可以进行共享\",{\"1\":{\"1149\":1,\"5729\":1}}],[\"都可以看作是\",{\"1\":{\"239\":1}}],[\"都值得花时间去钻研\",{\"1\":{\"1080\":1}}],[\"都需要根据k\",{\"1\":{\"1031\":1}}],[\"都需要重新创建一个\",{\"1\":{\"632\":1}}],[\"都会出现数据不一致问题\",{\"1\":{\"5722\":1}}],[\"都会向用户返回一个新的游标\",{\"1\":{\"4893\":1}}],[\"都会释放锁\",{\"1\":{\"3732\":1}}],[\"都会对\",{\"1\":{\"3572\":1}}],[\"都会以处理二进制的方式来处理\",{\"1\":{\"3101\":1,\"6757\":1}}],[\"都会被分配一个id\",{\"1\":{\"3044\":1}}],[\"都会被阻塞\",{\"1\":{\"2855\":1,\"6527\":1}}],[\"都会重新生成一个\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"都会在响应头里使用字段\",{\"1\":{\"2202\":1}}],[\"都会清空数据\",{\"1\":{\"1455\":1,\"6903\":1}}],[\"都会使用cachingexector装饰基本的执行器\",{\"1\":{\"1150\":1,\"5730\":1}}],[\"都会插入到新数组对应索引的链表头\",{\"1\":{\"919\":1,\"5436\":1}}],[\"都会有溢出异常\",{\"1\":{\"283\":1}}],[\"都只是针对⼀类产品\",{\"1\":{\"869\":1,\"5499\":1}}],[\"都应该尽量扩展已有的索引而不是创建新索引\",{\"1\":{\"2838\":1,\"6510\":1}}],[\"都应该只是规定一系列操作的接口而已\",{\"1\":{\"611\":1}}],[\"都应该是组合关系\",{\"1\":{\"586\":1}}],[\"都是基于\",{\"1\":{\"6989\":1}}],[\"都是基于创建独立的线程去完成相应的异步调用逻辑\",{\"1\":{\"1373\":1}}],[\"都是内部平台\",{\"1\":{\"4120\":1}}],[\"都是独享锁\",{\"1\":{\"3831\":1,\"5947\":1}}],[\"都是有利有弊\",{\"1\":{\"2626\":1}}],[\"都是同一个四元组\",{\"1\":{\"2542\":1}}],[\"都是这种机制\",{\"1\":{\"1980\":1,\"6239\":1}}],[\"都是使用\",{\"1\":{\"1772\":1}}],[\"都是双列集合\",{\"1\":{\"932\":1}}],[\"都是通过\",{\"1\":{\"3157\":1,\"3305\":1,\"3680\":1,\"5849\":1,\"6091\":1,\"6813\":1}}],[\"都是通过位运算代替取模\",{\"1\":{\"1063\":1}}],[\"都是通过平衡来二分查找\",{\"1\":{\"925\":1,\"5442\":1}}],[\"都是通过相同的方式来查找的\",{\"1\":{\"703\":1,\"5471\":1}}],[\"都是用来存储一组相同类型的元素的\",{\"1\":{\"728\":1}}],[\"都是\",{\"1\":{\"630\":1,\"696\":1,\"1444\":1,\"3820\":1,\"5463\":1,\"5938\":1}}],[\"都是一个队列\",{\"1\":{\"605\":1}}],[\"都是我们在生活中看得到摸得到的实体\",{\"1\":{\"587\":1}}],[\"都是runtimeexception类及其子类异常\",{\"1\":{\"459\":1,\"5354\":1}}],[\"都能够调用它的任意一个方法和属性\",{\"1\":{\"500\":1,\"5387\":1}}],[\"都能够知道这个类的所有属性和方法\",{\"1\":{\"500\":1,\"5387\":1}}],[\"都集中在\",{\"1\":{\"443\":1,\"5336\":1}}],[\"都维护一个常量池\",{\"1\":{\"288\":1}}],[\"受限于服务器网卡带宽\",{\"1\":{\"4710\":1}}],[\"受垃圾回收器管理\",{\"1\":{\"283\":1}}],[\"受方法区内存的限制\",{\"1\":{\"281\":1}}],[\"永久代\",{\"1\":{\"396\":1}}],[\"永久代是堆的一部分\",{\"1\":{\"283\":1}}],[\"永久代和元空间都可以理解为方法区的落地实现\",{\"1\":{\"282\":1}}],[\"只适用于单体项目\",{\"1\":{\"5722\":1}}],[\"只适用于业务处理非常快速的场景\",{\"1\":{\"1831\":1,\"6360\":1}}],[\"只适合对少量数据进行加密\",{\"1\":{\"5102\":1}}],[\"只听他说md5是一个非对称加密算法\",{\"1\":{\"5088\":1}}],[\"只出现一次\",{\"1\":{\"5014\":1}}],[\"只在index这个接口里出现过\",{\"1\":{\"5013\":1}}],[\"只在一个机房内完成所有业务\",{\"1\":{\"2073\":1,\"5778\":1}}],[\"只支持主要的mq功能\",{\"1\":{\"4794\":1}}],[\"只为really需要的joinpoint生成代理等\",{\"1\":{\"4027\":1}}],[\"只与内核有联系\",{\"1\":{\"3430\":1}}],[\"只复制最完整的从节点\",{\"1\":{\"3218\":1}}],[\"只追加文件\",{\"1\":{\"3142\":1,\"6798\":1}}],[\"只存在于可重复读隔离级别\",{\"1\":{\"2952\":1,\"6624\":1}}],[\"只存在于内存中的文件\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"只存在于内存\",{\"1\":{\"1953\":1}}],[\"只丢了一小部分\",{\"1\":{\"2697\":1}}],[\"只等待获取cpu的使用权\",{\"1\":{\"1854\":1,\"6230\":1}}],[\"只负责数据的接收和发送\",{\"1\":{\"1839\":1,\"6371\":1}}],[\"只负责创建\",{\"1\":{\"1165\":1}}],[\"只进行了\",{\"1\":{\"1805\":1,\"6311\":1}}],[\"只读\",{\"1\":{\"1226\":1,\"2223\":1,\"5578\":1}}],[\"只会在取出\",{\"1\":{\"3173\":1,\"6831\":1}}],[\"只会和共享表锁\",{\"1\":{\"2913\":1,\"6585\":1}}],[\"只会返回有事件发生的文件描述符的个数\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"只会拦截那些指定需要拦截的方法\",{\"1\":{\"1128\":1,\"5709\":1}}],[\"只会使用一个线程进行垃圾收集工作\",{\"1\":{\"346\":1}}],[\"只做一次16位右位移异或混合\",{\"1\":{\"1067\":1}}],[\"只不过是缓存击穿是一个热点key失效\",{\"1\":{\"4149\":1}}],[\"只不过这个buffer专门用来传播用户的写命令到从库\",{\"1\":{\"3240\":1}}],[\"只不过会在记录头\",{\"1\":{\"3028\":1,\"6694\":1}}],[\"只不过问题不是在\",{\"1\":{\"2365\":1}}],[\"只不过用\",{\"1\":{\"2343\":1}}],[\"只不过在满足\",{\"1\":{\"1287\":1,\"5629\":1}}],[\"只不过\",{\"1\":{\"1011\":1}}],[\"只需要把未来几分钟要执行的数据存入缓存即可\",{\"1\":{\"4876\":1,\"7254\":1}}],[\"只需要把对服务a\",{\"1\":{\"1418\":1}}],[\"只需要一个redis实例就可以实现延迟队列\",{\"1\":{\"4863\":1}}],[\"只需要在自媒体的引导类中开启feign的远程调用即可\",{\"1\":{\"4858\":1}}],[\"只需要下面的命令\",{\"1\":{\"3388\":1}}],[\"只需要下游服务自己订阅消息队列\",{\"1\":{\"1414\":1}}],[\"只需要传输丢失的这个分片\",{\"1\":{\"2501\":1}}],[\"只需要传入对应map的全限定名\",{\"1\":{\"514\":1,\"5402\":1}}],[\"只需要\",{\"1\":{\"1807\":1,\"6314\":1}}],[\"只需提供传⼊⼯⼚的参数\",{\"1\":{\"862\":1,\"5492\":1}}],[\"只包含一个根结点\",{\"1\":{\"650\":1}}],[\"只能选择\",{\"1\":{\"4648\":1,\"6221\":1}}],[\"只能满足可用性\",{\"1\":{\"4647\":1,\"6220\":1}}],[\"只能同时满足以下三点中的两个\",{\"1\":{\"4638\":1,\"6211\":1}}],[\"只能用来做微服务\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"只能用于亲缘关系的进程间通信\",{\"1\":{\"1970\":1,\"6251\":1}}],[\"只能有一个线程获得锁\",{\"1\":{\"3829\":1,\"5945\":1}}],[\"只能保证单次的读\",{\"1\":{\"3713\":1}}],[\"只能保证单个变量的原子性\",{\"0\":{\"5863\":1},\"1\":{\"3701\":1,\"5870\":1}}],[\"只能延长错误发生的时间\",{\"1\":{\"3591\":1}}],[\"只能存活\",{\"1\":{\"3171\":1,\"6829\":1}}],[\"只能使用到一个表中的一个索引\",{\"1\":{\"3082\":1,\"6733\":1}}],[\"只能取一个\",{\"1\":{\"2757\":1,\"6426\":1}}],[\"只能压缩\",{\"1\":{\"2352\":1}}],[\"只能判断是否存在\",{\"1\":{\"2157\":1}}],[\"只能是固定类别\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"只能重量级锁\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"只能监听\",{\"1\":{\"1770\":1}}],[\"只能在同一端做插入和删除操作\",{\"1\":{\"619\":1}}],[\"只能执行队列规定的方法\",{\"1\":{\"605\":1}}],[\"只定义了一个类应该满足哪些方法\",{\"1\":{\"602\":1}}],[\"只有用到\",{\"1\":{\"3653\":1,\"5896\":1}}],[\"只有同步到磁盘中才算持久化保存了\",{\"1\":{\"3156\":1,\"6812\":1}}],[\"只有事务4修改过该行记录\",{\"1\":{\"3052\":1}}],[\"只有叶子节点存储\",{\"1\":{\"2770\":1,\"6439\":1}}],[\"只有表级锁\",{\"1\":{\"2733\":1,\"6402\":1}}],[\"只有等到这\",{\"1\":{\"2366\":1}}],[\"只有在对目标分支和获取的分支进行合并后才会更新目标分支\",{\"1\":{\"3372\":1}}],[\"只有在未能命中强制缓存的时候\",{\"1\":{\"2248\":1}}],[\"只有在内核重启\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"只有三个索引对应的值都为1才能说明值已存在\",{\"1\":{\"2165\":1}}],[\"只有部分缓存会失效\",{\"1\":{\"2030\":1}}],[\"只有拥有互斥对象的线程才有访问公共资源的权限\",{\"1\":{\"1980\":1,\"6239\":1}}],[\"只有水平触发模式\",{\"1\":{\"1780\":1,\"6281\":1}}],[\"只有磁头朝某个特定方向移动时\",{\"1\":{\"1761\":1}}],[\"只有回调函数执行完毕生产者才会结束\",{\"1\":{\"1520\":1}}],[\"只有当前线程调用\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"只有当变量的预期值\",{\"1\":{\"3675\":1,\"5844\":1}}],[\"只有当所有参与赋值的节点全部收到消息时\",{\"1\":{\"1560\":1}}],[\"只有当消息通过\",{\"1\":{\"1517\":1}}],[\"只有当父加载器反馈自己无法完成这个加载请求\",{\"1\":{\"449\":1,\"5342\":1}}],[\"只有满足条件的自动配置才会生效\",{\"1\":{\"1304\":1}}],[\"只有根结点的树高度为1\",{\"1\":{\"672\":1}}],[\"只有它能与\",{\"1\":{\"351\":1}}],[\"只要统计出\",{\"1\":{\"5013\":1}}],[\"只要超过半数节点写入成功\",{\"1\":{\"4594\":1}}],[\"只要调用这两个关闭方法中的任意一个\",{\"1\":{\"3894\":1}}],[\"只要网络中没有出现拥塞\",{\"1\":{\"2672\":1}}],[\"只要第一个请求发出去了\",{\"1\":{\"2297\":1,\"2350\":1}}],[\"只要任意一端没有明确提出断开连接\",{\"1\":{\"2294\":1}}],[\"只要那个索引值为1就说明存在\",{\"1\":{\"2165\":1}}],[\"只要再次对图片名称进行上述运算\",{\"1\":{\"2010\":1}}],[\"只要没有发生不可恢复的错误\",{\"1\":{\"1609\":1}}],[\"只要没有显式地设置cacheenabled为false\",{\"1\":{\"1150\":1,\"5730\":1}}],[\"只要集群首领节点收到消息\",{\"1\":{\"1558\":1}}],[\"只要是同一个接口的相同方法\",{\"1\":{\"1149\":1,\"5729\":1}}],[\"只要是按照内容查找元素\",{\"1\":{\"755\":1}}],[\"只要保证length的长度是2^n的话\",{\"1\":{\"1029\":1}}],[\"只要能调用\",{\"1\":{\"609\":1}}],[\"只要他们满足\",{\"1\":{\"607\":1}}],[\"只要实现了map接口\",{\"1\":{\"514\":1,\"5402\":1}}],[\"只要不是太频繁\",{\"1\":{\"348\":1}}],[\"只要逻辑上是连续的即可\",{\"1\":{\"228\":1}}],[\"只是调用子对象的set方法\",{\"1\":{\"5107\":1}}],[\"只是它那时没有其他的服务器了\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"只是将其写入自己的日志列表中\",{\"1\":{\"4587\":1}}],[\"只是将key的hashcode值与其高16位作异或并保证最高位为0\",{\"1\":{\"1077\":1}}],[\"只是说在一个包里要继承一个异常的接口\",{\"1\":{\"4292\":1,\"7117\":1}}],[\"只是说该列涉及到表与表的关系\",{\"1\":{\"2828\":1,\"6500\":1}}],[\"只是在\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"只是在文档上注明\",{\"1\":{\"598\":1}}],[\"只是取得是后几行\",{\"1\":{\"3415\":1}}],[\"只是jvm分配的内存较小\",{\"1\":{\"2121\":1}}],[\"只是多了一步虚拟节点到实际节点的映射\",{\"1\":{\"2035\":1}}],[\"只是\",{\"1\":{\"282\":1}}],[\"接受顺序性也得到了保证\",{\"1\":{\"4598\":1,\"6182\":1}}],[\"接受客户端请求\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"接近\",{\"1\":{\"2755\":1,\"6424\":1}}],[\"接收的\",{\"1\":{\"7038\":1}}],[\"接收数据\",{\"1\":{\"4980\":1}}],[\"接收到合法数量的\",{\"1\":{\"4606\":1}}],[\"接收到\",{\"1\":{\"4605\":1}}],[\"接收到消息请求后\",{\"1\":{\"4603\":1}}],[\"接收到事务提交\",{\"1\":{\"4594\":1}}],[\"接收到返回的时候\",{\"1\":{\"1520\":1}}],[\"接收端\",{\"1\":{\"3468\":1}}],[\"接收端可以通过\",{\"1\":{\"2362\":1}}],[\"接收信息的进程称为读进程\",{\"1\":{\"3468\":1}}],[\"接收方\",{\"1\":{\"2661\":1,\"2663\":1}}],[\"接收方可以根据数据包的序列号按序接收\",{\"1\":{\"2551\":1}}],[\"接收方可以去除重复的数据\",{\"1\":{\"2550\":1}}],[\"接收窗口的大小是约等于发送窗口的大小的\",{\"1\":{\"2657\":1}}],[\"接收窗口和发送窗口的大小是相等的吗\",{\"1\":{\"2656\":1}}],[\"接着构造一个\",{\"1\":{\"7040\":1}}],[\"接着来看看单\",{\"1\":{\"6376\":1}}],[\"接着看上面的正射\",{\"1\":{\"5392\":1}}],[\"接着将文件发给从库\",{\"1\":{\"3235\":1}}],[\"接着将各个服务器使用\",{\"1\":{\"2017\":1}}],[\"接着服务端进入\",{\"1\":{\"2595\":1}}],[\"接着发送\",{\"1\":{\"2584\":1}}],[\"接着客户端重启后\",{\"1\":{\"2540\":1}}],[\"接着把\",{\"1\":{\"2528\":1}}],[\"接着把第一个\",{\"1\":{\"2527\":1}}],[\"接着就用双方协商的加密算法\",{\"1\":{\"2337\":1}}],[\"接着让较高优先级的进程运行\",{\"1\":{\"1942\":1}}],[\"接着由\",{\"1\":{\"1840\":1,\"6372\":1}}],[\"接着\",{\"1\":{\"1790\":1,\"2900\":1,\"2906\":1,\"3201\":1,\"3206\":1,\"4616\":1,\"6189\":1,\"6295\":1,\"6572\":1,\"6578\":1}}],[\"接着再传给传输层\",{\"1\":{\"2502\":1}}],[\"接着再把整个文件描述符集合拷贝回用户态里\",{\"1\":{\"1768\":1}}],[\"接着再把每个段划分为多个页\",{\"1\":{\"1678\":1}}],[\"接着再去幸存者\",{\"1\":{\"266\":1}}],[\"接下来还可以继续去检测它的状态\",{\"1\":{\"6278\":1}}],[\"接下来判断\",{\"1\":{\"3047\":1}}],[\"接下来的步骤就开始不一样了\",{\"1\":{\"1838\":1,\"6370\":1}}],[\"接下来补充\",{\"1\":{\"1278\":1,\"5620\":1}}],[\"接下来\",{\"1\":{\"1040\":1,\"1822\":1,\"2343\":1,\"2993\":1,\"4182\":1,\"6340\":1,\"6351\":1,\"6665\":1,\"7046\":1}}],[\"接下来我们会发现\",{\"1\":{\"1032\":1}}],[\"接⼝⼀旦新增加⽅法\",{\"1\":{\"887\":1,\"5505\":1}}],[\"接口调用失败就会进入调用接口提前定义好的一个熔断的方法\",{\"1\":{\"4528\":1,\"6145\":1}}],[\"接口调用失败就调用本地的方法返回一个空\",{\"1\":{\"4527\":1,\"6144\":1}}],[\"接口要求不同\",{\"1\":{\"3957\":1}}],[\"接口支持幂等即可\",{\"1\":{\"2055\":1,\"5760\":1}}],[\"接口流量会飙升\",{\"1\":{\"1421\":1}}],[\"接口中定义了五个表示隔离级别的常量\",{\"1\":{\"1230\":1,\"5582\":1}}],[\"接口并复写\",{\"1\":{\"1129\":1,\"5710\":1}}],[\"接口类的\",{\"1\":{\"902\":1,\"5520\":1}}],[\"接口和\",{\"1\":{\"899\":1,\"909\":1,\"5517\":1,\"5527\":1}}],[\"接口的类的\",{\"1\":{\"904\":1,\"5522\":1}}],[\"接口的对象\",{\"1\":{\"901\":1,\"5519\":1}}],[\"接口的stack\",{\"1\":{\"620\":1}}],[\"接口的时候\",{\"1\":{\"610\":1}}],[\"接口的设计相当于做了访问限制\",{\"1\":{\"610\":1}}],[\"接口规定的规范\",{\"1\":{\"607\":1}}],[\"接口最大的意义之一\",{\"1\":{\"602\":1}}],[\"接口提供\",{\"1\":{\"568\":1}}],[\"接口\",{\"0\":{\"614\":1},\"1\":{\"477\":1,\"600\":1,\"613\":1,\"628\":1,\"776\":1,\"782\":1,\"1175\":1,\"1176\":1,\"1177\":1,\"1179\":1,\"1180\":1,\"1181\":1,\"1183\":1,\"1187\":1,\"1395\":1,\"2586\":1,\"3785\":1,\"4944\":1,\"5372\":1,\"5796\":1,\"7046\":1}}],[\"接口等描述信息外\",{\"1\":{\"281\":1}}],[\"字符串不太一样\",{\"1\":{\"3100\":1,\"6756\":1}}],[\"字符串\",{\"0\":{\"3097\":1,\"6753\":1},\"1\":{\"3094\":1,\"6750\":1}}],[\"字符串类型的字段使用前缀索引代替普通索引\",{\"1\":{\"2839\":1,\"6511\":1}}],[\"字符串常量池放在堆里\",{\"1\":{\"292\":1}}],[\"字节时\",{\"1\":{\"3134\":1,\"6790\":1}}],[\"字节\",{\"1\":{\"2567\":1,\"3111\":1,\"3126\":1,\"6767\":1,\"6782\":1}}],[\"字节流\",{\"1\":{\"2459\":1}}],[\"字节大小的\",{\"1\":{\"1663\":1}}],[\"字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令\",{\"1\":{\"200\":1}}],[\"字节码指令地址\",{\"1\":{\"198\":1}}],[\"字面量等类型\",{\"1\":{\"285\":1}}],[\"字段将其标记为已删除\",{\"1\":{\"3028\":1,\"6694\":1}}],[\"字段正好有索引\",{\"1\":{\"2815\":1,\"6487\":1}}],[\"字段填入\",{\"1\":{\"2528\":1,\"2529\":1}}],[\"字段中\",{\"1\":{\"2527\":1,\"2528\":1,\"4816\":1,\"7213\":1}}],[\"字段知道该数据包是\",{\"1\":{\"2520\":1,\"2709\":1}}],[\"字段呢\",{\"1\":{\"2512\":1,\"2514\":1}}],[\"字段则会变长的\",{\"1\":{\"2495\":1}}],[\"字段时是\",{\"1\":{\"2495\":1}}],[\"字段来使用\",{\"1\":{\"2248\":1}}],[\"字段信息给服务端\",{\"1\":{\"2247\":1}}],[\"字段实现\",{\"1\":{\"2240\":1}}],[\"字段实现的协商缓存的过程\",{\"1\":{\"2249\":1}}],[\"字段实现的\",{\"1\":{\"2229\":1}}],[\"字段与响应头部中的\",{\"1\":{\"2240\":1,\"2243\":1}}],[\"字段的话\",{\"1\":{\"2232\":1}}],[\"字段\",{\"1\":{\"281\":1,\"2214\":1,\"2215\":2,\"2216\":1,\"2217\":1,\"2243\":1,\"2247\":1,\"2253\":1,\"2512\":1,\"2513\":1,\"2514\":1}}],[\"5md5是是对称加密还是非对称加密\",{\"0\":{\"5087\":1}}],[\"570da6d5277a646f6552b8832012f5dc\",{\"1\":{\"5065\":1}}],[\"5身份验证怎么做的\",{\"0\":{\"4808\":1}}],[\"5独享锁\",{\"0\":{\"3828\":1}}],[\"5锁优化技术\",{\"0\":{\"3809\":1}}],[\"543902719\",{\"1\":{\"3660\":1,\"5872\":1}}],[\"546\",{\"1\":{\"3527\":1}}],[\"531\",{\"1\":{\"3560\":1}}],[\"5对显示的堆栈信息进行分析\",{\"0\":{\"3529\":1}}],[\"5对象在堆中的生命周期\",{\"0\":{\"251\":1}}],[\"5指令与文件搜索\",{\"0\":{\"3416\":1}}],[\"5停止和终止容器的区别\",{\"0\":{\"3320\":1}}],[\"5分钟\",{\"0\":{\"4279\":1,\"7104\":1},\"1\":{\"3147\":1,\"4146\":1,\"6803\":1}}],[\"5zset\",{\"0\":{\"3131\":1}}],[\"51167384\",{\"1\":{\"6955\":1}}],[\"51b27d00cf50d9aca86e0934ab42a565\",{\"1\":{\"6932\":1}}],[\"51447496\",{\"1\":{\"4756\":1}}],[\"512\",{\"1\":{\"3111\":1,\"3119\":1,\"3126\":1,\"6767\":1,\"6775\":1,\"6782\":1}}],[\"51cto\",{\"1\":{\"1522\":1}}],[\"52258054\",{\"1\":{\"3063\":1,\"6714\":1}}],[\"5四大隔离级别\",{\"0\":{\"2995\":1}}],[\"5聚簇索引\",{\"0\":{\"2795\":1}}],[\"5tcp\",{\"0\":{\"2707\":1}}],[\"5第三次挥手丢失了\",{\"0\":{\"2609\":1}}],[\"5初始序列号\",{\"0\":{\"2564\":1}}],[\"5如何唯一确定一个\",{\"0\":{\"2466\":1}}],[\"5http\",{\"0\":{\"2225\":1}}],[\"5xx\",{\"1\":{\"2208\":1}}],[\"58同城\",{\"0\":{\"2042\":1,\"5747\":1}}],[\"5最高优先级调度算法\",{\"0\":{\"1927\":1}}],[\"5最不常用算法\",{\"0\":{\"1743\":1}}],[\"5look\",{\"0\":{\"1762\":1}}],[\"5版本都是靠重写webmvcconfigureradapter的方法来添加自定义拦截器\",{\"1\":{\"1396\":1}}],[\"562198754\",{\"1\":{\"1190\":1}}],[\"503\",{\"1\":{\"2212\":1}}],[\"502\",{\"1\":{\"2211\":1}}],[\"501\",{\"1\":{\"2210\":1}}],[\"5000\",{\"1\":{\"3772\":1}}],[\"500\",{\"1\":{\"2111\":1,\"2209\":1}}],[\"50ms\",{\"1\":{\"1417\":2}}],[\"50\",{\"1\":{\"1140\":1,\"3772\":1,\"4999\":1}}],[\"5倍\",{\"1\":{\"801\":2}}],[\"5502\",{\"1\":{\"686\":1,\"947\":1,\"5347\":1}}],[\"5二叉树计算\",{\"0\":{\"685\":1}}],[\"5q5\",{\"0\":{\"599\":1}}],[\"5finally和return的执行顺序\",{\"0\":{\"482\":1}}],[\"5parallel\",{\"0\":{\"358\":1}}],[\"5\",{\"0\":{\"284\":1,\"643\":1,\"644\":1,\"655\":1,\"673\":1,\"676\":1,\"685\":1,\"733\":1,\"870\":1,\"871\":1,\"873\":1,\"876\":1,\"926\":1,\"1216\":1,\"1217\":1,\"1229\":1,\"1236\":1,\"1335\":1,\"1512\":1,\"1675\":1,\"2227\":1,\"2237\":1,\"2372\":1,\"2647\":1,\"2648\":1,\"2651\":1,\"2658\":1,\"2662\":1,\"2679\":1,\"2685\":1,\"2690\":1,\"2701\":1,\"2707\":1,\"2710\":1,\"3190\":1,\"3191\":1,\"3227\":1,\"3231\":1,\"3237\":1,\"3354\":1,\"3475\":1,\"3651\":1,\"3923\":1,\"3948\":1,\"4127\":1,\"4214\":1,\"4550\":1,\"5091\":1,\"5093\":1,\"5095\":1,\"5098\":1},\"1\":{\"475\":1,\"491\":1,\"637\":1,\"1204\":1,\"1435\":1,\"1441\":1,\"2022\":1,\"2377\":1,\"2494\":1,\"2728\":2,\"2730\":2,\"2745\":1,\"2794\":1,\"2821\":1,\"2832\":1,\"2925\":1,\"2953\":1,\"2992\":2,\"3051\":1,\"3053\":1,\"3082\":2,\"3094\":1,\"3159\":1,\"3222\":1,\"3353\":1,\"3519\":1,\"3527\":1,\"3625\":1,\"3673\":1,\"3679\":1,\"3689\":1,\"3697\":1,\"3700\":1,\"3772\":3,\"4134\":1,\"4182\":1,\"4284\":1,\"4292\":1,\"4314\":1,\"4315\":1,\"4329\":1,\"4343\":1,\"4352\":1,\"4363\":1,\"4374\":1,\"4385\":1,\"4401\":1,\"4432\":1,\"4446\":1,\"4454\":1,\"4763\":1,\"4850\":1,\"4889\":1,\"5028\":1,\"5088\":1,\"5370\":1,\"5378\":1,\"5556\":1,\"5840\":1,\"5848\":1,\"5859\":1,\"5866\":1,\"5869\":1,\"6397\":2,\"6399\":2,\"6414\":1,\"6465\":1,\"6493\":1,\"6504\":1,\"6597\":1,\"6625\":1,\"6664\":2,\"6733\":2,\"6750\":1,\"6815\":1,\"6979\":1,\"7002\":1,\"7109\":1,\"7117\":1,\"7139\":1,\"7140\":1,\"7154\":1,\"7168\":1,\"7239\":1}}],[\"5方法区\",{\"0\":{\"278\":1}}],[\"了另一个\",{\"1\":{\"2981\":1,\"6653\":1}}],[\"了解linux\",{\"0\":{\"4095\":1}}],[\"了解了这个应用场景之后\",{\"1\":{\"2005\":1}}],[\"了解问题的本质再分析问题\",{\"1\":{\"1249\":1,\"5601\":1}}],[\"了解\",{\"1\":{\"1166\":1}}],[\"了\",{\"1\":{\"277\":1,\"2247\":1,\"2438\":1,\"3176\":1,\"3359\":1,\"4625\":1,\"6203\":1,\"6834\":1}}],[\"绝对路径都可以\",{\"1\":{\"3571\":1}}],[\"绝对没错\",{\"1\":{\"1432\":1,\"4760\":1}}],[\"绝对\",{\"1\":{\"277\":1}}],[\"编号以及文件名\",{\"1\":{\"3490\":1}}],[\"编号\",{\"1\":{\"3489\":2}}],[\"编程风格有所差异\",{\"1\":{\"4743\":1}}],[\"编程中我们通常不会直接使用到\",{\"1\":{\"3680\":1,\"5849\":1}}],[\"编程\",{\"0\":{\"2638\":1},\"1\":{\"2434\":1,\"2435\":1}}],[\"编译器都帮我们做了\",{\"1\":{\"481\":1}}],[\"编译器不要求强制处置的异常\",{\"1\":{\"467\":1,\"5362\":1}}],[\"编译器要求必须处置的异常\",{\"1\":{\"464\":1,\"5359\":1}}],[\"编译异常\",{\"1\":{\"461\":1,\"5356\":1}}],[\"编译期的发展和逃逸分析技术的逐渐成熟\",{\"1\":{\"277\":1}}],[\"编辑此页链接\",{\"1\":{\"17\":1,\"5130\":1}}],[\"使其获得2013年图灵奖\",{\"1\":{\"4580\":1}}],[\"使其再次尝试获取同步状态\",{\"1\":{\"3640\":1,\"5881\":1}}],[\"使其处于\",{\"1\":{\"1263\":1}}],[\"使⽤者通过代理间接的访问服务提供者\",{\"1\":{\"885\":1,\"5503\":1}}],[\"使⽤简单⼯⼚模式\",{\"1\":{\"864\":1,\"5494\":1}}],[\"使⽤\",{\"1\":{\"858\":1,\"5488\":1}}],[\"使子树的个数\",{\"1\":{\"648\":1}}],[\"使得网页传输更加高效\",{\"1\":{\"6989\":1}}],[\"使得java\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"使得用户可以根据需要添加或删除特定的模块\",{\"1\":{\"3443\":1}}],[\"使得哨兵可以及时发现主节点故障并完成转移\",{\"1\":{\"3199\":1}}],[\"使得原来连接的数据包在网络中都自然消失\",{\"1\":{\"2618\":1}}],[\"使得服务端不能为正常用户服务\",{\"1\":{\"2578\":1}}],[\"使得报文能够加密传输\",{\"1\":{\"2306\":1}}],[\"使得在安全上达到了极致\",{\"1\":{\"2288\":1}}],[\"使得多个进程可以访问同一块内存空间\",{\"1\":{\"1974\":1,\"6255\":1}}],[\"使得共享的资源\",{\"1\":{\"1962\":1}}],[\"使得子类数目呈爆炸性增长\",{\"1\":{\"878\":1}}],[\"使得可预测的停顿时间模型成为可能\",{\"1\":{\"374\":1}}],[\"使得每个小空间可以单独进行垃圾回收\",{\"1\":{\"374\":1}}],[\"使对象内存分配更加接近cpu缓存\",{\"1\":{\"275\":1}}],[\"使用二进制帧进行数据传输\",{\"1\":{\"7067\":1}}],[\"使用零拷贝技术的项目\",{\"0\":{\"6316\":1}}],[\"使用fastdfs作为静态资源存储器\",{\"1\":{\"5001\":1,\"7283\":1}}],[\"使用feign的注解定义接口\",{\"1\":{\"4541\":1}}],[\"使用refreshwithpipeline管道方法\",{\"1\":{\"4896\":1}}],[\"使用版本号\",{\"1\":{\"4818\":1,\"7215\":1}}],[\"使用工具管理资源\",{\"1\":{\"4729\":1}}],[\"使用工厂模式通过\",{\"1\":{\"1209\":1,\"5561\":1}}],[\"使用mongo存储用户历史记录数据\",{\"1\":{\"7184\":1}}],[\"使用mongodb存储用户历史记录数据\",{\"1\":{\"4665\":1}}],[\"使用mysql存储用户数据\",{\"1\":{\"4664\":1,\"7183\":1}}],[\"使用队列消息可以做到异步解耦\",{\"1\":{\"4610\":1}}],[\"使用observer的目的是为了扩展系统\",{\"1\":{\"4602\":1}}],[\"使用orm框架\",{\"1\":{\"4091\":1}}],[\"使用like查询以通配符开头\",{\"1\":{\"4255\":1}}],[\"使用心跳机制\",{\"1\":{\"4217\":1}}],[\"使用volatile\",{\"1\":{\"4193\":1}}],[\"使用volatile修饰的变量\",{\"1\":{\"3711\":1,\"5911\":1}}],[\"使用后台运行进程\",{\"1\":{\"4084\":1}}],[\"使用后端数据库默认的隔离级别\",{\"1\":{\"1231\":1,\"5583\":1}}],[\"使用命令\",{\"1\":{\"4083\":1}}],[\"使用idea打包jar\",{\"1\":{\"4083\":1}}],[\"使用合理的条件过滤\",{\"1\":{\"3995\":1}}],[\"使用索引进行查询\",{\"1\":{\"3995\":1}}],[\"使用explain查看执行计划\",{\"1\":{\"3995\":1}}],[\"使用更加方便\",{\"1\":{\"3956\":1}}],[\"使用的无界的延迟阻塞队列delayedworkqueue\",{\"1\":{\"3913\":1,\"6060\":1}}],[\"使用的是线程\",{\"1\":{\"6339\":1}}],[\"使用的是进程\",{\"1\":{\"6339\":1}}],[\"使用的是共享内存的方式\",{\"1\":{\"6270\":1}}],[\"使用的是同步队列\",{\"1\":{\"3912\":1,\"6059\":1}}],[\"使用的是无界的\",{\"1\":{\"3911\":1,\"6058\":1}}],[\"使用的都是非聚簇索引\",{\"1\":{\"2776\":1,\"2805\":1,\"6445\":1,\"6477\":1}}],[\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销\",{\"1\":{\"3908\":1,\"6055\":1}}],[\"使用线程池可以进行统一的分配\",{\"1\":{\"3852\":1,\"6006\":1}}],[\"使用调用者的线程来执行任务\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"使用者继承\",{\"1\":{\"3652\":1,\"5895\":1}}],[\"使用下面的命令可以将堆转储文件的分析结果以\",{\"1\":{\"3574\":1}}],[\"使用率降序排列\",{\"1\":{\"3550\":1,\"3553\":1}}],[\"使用率\",{\"1\":{\"3540\":1}}],[\"使用一种称为目录树的层次结构来组织文件和目录\",{\"1\":{\"3476\":1,\"5741\":1}}],[\"使用方便\",{\"1\":{\"3473\":1,\"4738\":1}}],[\"使用方式也很相似\",{\"1\":{\"776\":1}}],[\"使用不当容易出错\",{\"1\":{\"3472\":1}}],[\"使用不同的密钥交换算法\",{\"1\":{\"2316\":1}}],[\"使用客户端\",{\"1\":{\"3451\":1}}],[\"使用gui工具查看提交历史\",{\"1\":{\"3353\":1}}],[\"使用guava提供的hashing和funnels类来计算元素的哈希值和将元素转换为字节数组\",{\"1\":{\"2178\":1}}],[\"使用git\",{\"1\":{\"3344\":1,\"3346\":1}}],[\"使用镜像创建容器\",{\"1\":{\"3307\":1}}],[\"使用布隆过滤器中的哈希函数对元素值进行计算\",{\"1\":{\"3258\":1,\"6863\":1}}],[\"使用哈希表作为\",{\"1\":{\"3120\":1,\"6776\":1}}],[\"使用哈希后的结果对3求余\",{\"1\":{\"2010\":1}}],[\"使用全局锁会影响业务\",{\"1\":{\"2865\":1,\"6537\":1}}],[\"使用表中的多个字段创建索引\",{\"1\":{\"2817\":1,\"6489\":1}}],[\"使用慢启动算法\",{\"1\":{\"2683\":1}}],[\"使用三次握手建立连接的最主要原因就是防止\",{\"1\":{\"2547\":1}}],[\"使用长连接的方式改善了\",{\"1\":{\"2349\":1}}],[\"使用urlconnection连接远程文件地址\",{\"1\":{\"2105\":1}}],[\"使用utf\",{\"1\":{\"1355\":1,\"5680\":1}}],[\"使用如下公式\",{\"1\":{\"2008\":1}}],[\"使用场景描述\",{\"0\":{\"2006\":1}}],[\"使用完并释放后才能获取\",{\"1\":{\"1994\":1}}],[\"使用水平触发模式时\",{\"1\":{\"1779\":1,\"6275\":1}}],[\"使用边缘触发模式时\",{\"1\":{\"1778\":1,\"6274\":1}}],[\"使用事件驱动的机制\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"使用固定长度的\",{\"1\":{\"1770\":1}}],[\"使用异步提交的api\",{\"1\":{\"1612\":1}}],[\"使用commitsync\",{\"1\":{\"1608\":1}}],[\"使用压缩可以降低网络传输开销和存储开销\",{\"1\":{\"1577\":1}}],[\"使用availablepartitions呢\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"使用指定的partition\",{\"1\":{\"1463\":1,\"6911\":1}}],[\"使用指南\",{\"1\":{\"120\":1,\"121\":1,\"5233\":1,\"5234\":1}}],[\"使用消息队列的话\",{\"1\":{\"1422\":1}}],[\"使用sdk管理资源\",{\"1\":{\"4696\":1}}],[\"使用setaccessible\",{\"1\":{\"3944\":1}}],[\"使用send\",{\"1\":{\"1543\":1}}],[\"使用spring\",{\"1\":{\"1334\":1,\"5656\":1}}],[\"使用synchronizedlist的时候\",{\"1\":{\"847\":1}}],[\"使用到了适配器模式\",{\"1\":{\"1215\":1,\"5567\":1}}],[\"使用位运算代替取模运算\",{\"1\":{\"1044\":1}}],[\"使用hashmap时就必须要自己增加同步处理\",{\"1\":{\"943\":1}}],[\"使用同步代码块的方式调用arraylist的add\",{\"1\":{\"815\":1}}],[\"使用了一种变种的wang\",{\"1\":{\"1063\":1}}],[\"使用了\",{\"1\":{\"628\":2}}],[\"使用老版本\",{\"1\":{\"596\":1}}],[\"使用自然语言描述\",{\"1\":{\"589\":1}}],[\"使用java的collections\",{\"1\":{\"4271\":1}}],[\"使用javap来分析这段代码\",{\"1\":{\"490\":1,\"5377\":1}}],[\"使用jwt\",{\"1\":{\"4055\":1}}],[\"使用jstat\",{\"1\":{\"3992\":1}}],[\"使用jdbc连接数据库时\",{\"1\":{\"552\":1,\"5429\":1}}],[\"使用\",{\"1\":{\"311\":1,\"314\":1,\"317\":1,\"321\":1,\"409\":1,\"600\":1,\"1122\":1,\"1128\":1,\"2132\":1,\"2744\":1,\"2843\":1,\"3101\":1,\"3290\":1,\"3316\":1,\"3419\":3,\"3498\":1,\"3568\":1,\"3678\":1,\"5298\":1,\"5647\":1,\"5704\":1,\"5709\":1,\"5847\":1,\"6079\":1,\"6413\":1,\"6515\":1,\"6757\":1,\"7079\":1}}],[\"使用pc寄存器存储字节码指令地址有什么用呢\",{\"1\":{\"191\":1}}],[\"所在子网相连的接口上\",{\"1\":{\"7051\":1}}],[\"所在子网的那个路由器\",{\"1\":{\"7048\":1}}],[\"所在子网内的所有设备\",{\"1\":{\"7046\":1}}],[\"所在的子网了\",{\"1\":{\"7052\":1}}],[\"所在的子网\",{\"1\":{\"7048\":1,\"7052\":1}}],[\"所在的服务器\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"所在的记录在read\",{\"1\":{\"3047\":1}}],[\"所在的记录\",{\"1\":{\"3046\":1}}],[\"所在的节点即可取出数据\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"所属群组以及其它人的文件权限\",{\"1\":{\"3510\":1}}],[\"所属群组\",{\"1\":{\"3411\":1,\"3502\":1}}],[\"所需存储空间越大\",{\"1\":{\"2169\":1}}],[\"所需要的储存空间也越多\",{\"1\":{\"2165\":1}}],[\"所必须依赖的环境\",{\"1\":{\"1878\":1}}],[\"所打开文件的列表和所使用的\",{\"1\":{\"1870\":1}}],[\"所带来的三级缓存问题\",{\"1\":{\"1284\":1,\"5626\":1}}],[\"所谓唯一性\",{\"1\":{\"5014\":1}}],[\"所谓的状态同步是指数据同步\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"所谓的长事务\",{\"1\":{\"2897\":1,\"6569\":1}}],[\"所谓的\",{\"1\":{\"2220\":1,\"2221\":1}}],[\"所谓的栈深度就是方法嵌套调用的次数\",{\"1\":{\"2117\":1}}],[\"所谓的管道\",{\"1\":{\"1954\":1}}],[\"所谓的双端队列\",{\"1\":{\"615\":1}}],[\"所谓事务管理\",{\"1\":{\"1228\":1,\"5580\":1}}],[\"所谓大对象\",{\"1\":{\"406\":1}}],[\"所有传输的内容都经过加密\",{\"1\":{\"7078\":1}}],[\"所有传输的内容都是明文\",{\"1\":{\"7078\":1}}],[\"所有节点访问同一份最新的数据副本\",{\"1\":{\"4639\":1,\"6212\":1}}],[\"所有操作采用类似两阶段提交的方式\",{\"1\":{\"4587\":1}}],[\"所有客户端都与\",{\"1\":{\"4586\":1}}],[\"所有结点都有自己的日志列表来记录所有请求\",{\"1\":{\"4586\":1}}],[\"所有其他应用依赖这个系统进行认证\",{\"1\":{\"4045\":1}}],[\"所有其他的功能都委托给一些独立进程\",{\"1\":{\"3434\":1}}],[\"所有线程在当前任务执行完毕后\",{\"1\":{\"3903\":1,\"6050\":1}}],[\"所有线程都在队列里排队\",{\"1\":{\"3839\":1,\"5955\":1}}],[\"所有线程都需要竞争同一块内存资源\",{\"1\":{\"273\":1}}],[\"所有对象公用同一把锁\",{\"1\":{\"3731\":1}}],[\"所有变量都需要存储在主内存中\",{\"1\":{\"3709\":1,\"5909\":1}}],[\"所有系统默认软件都会安装到这个目录\",{\"1\":{\"3494\":1}}],[\"所有人\",{\"1\":{\"3411\":1}}],[\"所有数据交互都是通过这个buffer进行的\",{\"1\":{\"3240\":1}}],[\"所有值小于\",{\"1\":{\"3126\":1,\"6782\":1}}],[\"所有需要查询的字段的值\",{\"1\":{\"2781\":1,\"2813\":1,\"6450\":1,\"6485\":1}}],[\"所有缓存在一定时间内是失效的\",{\"1\":{\"2012\":1}}],[\"所有consumer都订阅了这4个分区\",{\"1\":{\"1491\":1,\"6943\":1}}],[\"所有\",{\"1\":{\"1295\":1,\"5638\":1}}],[\"所有方法都实现了同步\",{\"1\":{\"797\":1}}],[\"所有属性值都是对应类型的初始值\",{\"1\":{\"528\":1,\"5416\":1}}],[\"所有的broker在启动的时候都会往zookeeper进行注册\",{\"1\":{\"4564\":1}}],[\"所有的应用都信任这个统一认证系统\",{\"1\":{\"4051\":1}}],[\"所有的线程都能得到资源\",{\"1\":{\"3840\":1,\"5956\":1}}],[\"所有的线程都可以访问并修改同一个资源\",{\"1\":{\"3793\":1,\"5805\":1}}],[\"所有的写命令会追加到\",{\"1\":{\"3160\":1,\"6816\":1}}],[\"所有的数据都是通过\",{\"1\":{\"1806\":1,\"6313\":1}}],[\"所有的消费者都在不同的组中\",{\"1\":{\"1583\":1}}],[\"所有的消费者都在一个组中\",{\"1\":{\"1582\":1}}],[\"所有的事务依次逐个执行\",{\"1\":{\"1235\":1,\"5587\":1}}],[\"所有的请求最终都会传送到顶层的启动类加载器\",{\"1\":{\"448\":1,\"5341\":1}}],[\"所有的对象都分配到堆上也渐渐变得不那么\",{\"1\":{\"277\":1}}],[\"所以域名的层级关系类似一个树状结构\",{\"1\":{\"7085\":1}}],[\"所以还是需要等待催生http2不得不出的时机到来\",{\"1\":{\"6992\":1}}],[\"所以还需要考虑\",{\"1\":{\"261\":1}}],[\"所以查询性能会受到一定的影响\",{\"1\":{\"6741\":1}}],[\"所以也叫做时分多路复用\",{\"1\":{\"6260\":1}}],[\"所以mybatis\",{\"1\":{\"5722\":1}}],[\"所以mybatis为我们提供了自定义缓存\",{\"1\":{\"1143\":1}}],[\"所以md5不再是安全的了\",{\"1\":{\"5036\":1}}],[\"所以md5是安全的\",{\"1\":{\"5036\":1}}],[\"所以尽量选择具有唯一性的字段\",{\"1\":{\"5014\":1}}],[\"所以公司的redis生产环境将keys命令禁用了\",{\"1\":{\"4891\":1}}],[\"所以其他\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"所以无法进行投票等操作了\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"所以无法提供给客户端\",{\"1\":{\"2207\":1}}],[\"所以此时server1\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"所以问我一个逻辑题\",{\"1\":{\"4356\":1}}],[\"所以基于jwt的单点登录\",{\"1\":{\"4065\":1}}],[\"所以sso的本质是\",{\"1\":{\"4054\":1}}],[\"所以spring的setter注入方式可以很好的解决循环依赖\",{\"1\":{\"1267\":1}}],[\"所以响应速度更快\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"所以系统变慢\",{\"1\":{\"3544\":1}}],[\"所以系统出现卡顿\",{\"1\":{\"3544\":1}}],[\"所以操作系统将命名管道的管理权交由系统来加以控制管道文件被创建后\",{\"1\":{\"3468\":1}}],[\"所以要想将修改提交到master中一定要先git\",{\"1\":{\"3369\":1}}],[\"所以要存放到三级缓存中处理\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"所以冲突发生的并不多\",{\"1\":{\"3340\":1}}],[\"所以主从在增量同步时\",{\"1\":{\"3240\":1}}],[\"所以主要对比\",{\"1\":{\"1430\":1}}],[\"所以repl\",{\"1\":{\"3239\":1}}],[\"所以read\",{\"1\":{\"3050\":1}}],[\"所以将\",{\"1\":{\"3233\":1}}],[\"所以复杂度为\",{\"1\":{\"3102\":1,\"6758\":1}}],[\"所以获取长度的复杂度为\",{\"1\":{\"3102\":1,\"6758\":1}}],[\"所以只能由处于同一个计算机系统中的诸进程共享\",{\"1\":{\"3474\":1}}],[\"所以只要当前事务在其他事务提交更新之前使用过快照读\",{\"1\":{\"3055\":1}}],[\"所以只需要传入一个待检测的\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"所以事务2能读到的最新数据记录是事务4所提交的版本\",{\"1\":{\"3053\":1}}],[\"所以事务4修改后提交的最新结果对事务2快照读时是可见的\",{\"1\":{\"3053\":1}}],[\"所以先拿该记录db\",{\"1\":{\"3053\":1}}],[\"所以当\",{\"1\":{\"4613\":1,\"6186\":1}}],[\"所以当前该行当前数据的undo\",{\"1\":{\"3052\":1}}],[\"所以当客户端发送携带\",{\"1\":{\"2553\":1}}],[\"所以最多只能创建核心线程数的线程\",{\"1\":{\"3880\":1,\"6035\":1}}],[\"所以最新的事务\",{\"1\":{\"3044\":1}}],[\"所以最后你获得的这个集合所占的空间总是比你实际需要的要大\",{\"1\":{\"833\":1}}],[\"所以直接读取最新的数据就好了\",{\"1\":{\"3015\":1,\"6687\":1}}],[\"所以大多数\",{\"1\":{\"2969\":1,\"6641\":1}}],[\"所以为了避免误导\",{\"1\":{\"3361\":1}}],[\"所以为了能安全的对表结构进行变更\",{\"1\":{\"2904\":1,\"6576\":1}}],[\"所以为每个线程都分配了一个pc寄存器\",{\"1\":{\"194\":1}}],[\"所以即使服务端的进程退出了\",{\"1\":{\"2637\":1}}],[\"所以一来一回需要等待\",{\"1\":{\"2614\":1}}],[\"所以服务端的\",{\"1\":{\"2604\":1}}],[\"所以服务端每收到一个\",{\"1\":{\"2555\":1}}],[\"所以简单来说\",{\"1\":{\"2371\":1}}],[\"所以性能的关键就在这两点里\",{\"1\":{\"2290\":1}}],[\"所以有可能已遭篡改\",{\"1\":{\"2287\":1}}],[\"所以有多少需求就分配多大的段\",{\"1\":{\"1650\":1}}],[\"所以是不安全的\",{\"1\":{\"2224\":1}}],[\"所以通过报错内容的文字描述即可知道溢出位置\",{\"1\":{\"2119\":1}}],[\"所以上层保证相同数据到同一个机房即可\",{\"1\":{\"2072\":1,\"5777\":1}}],[\"所以需要查询所有频道信息\",{\"1\":{\"4990\":1}}],[\"所以需要把工具类拷贝一份到网关微服务\",{\"1\":{\"4835\":1,\"7224\":1}}],[\"所以需要用一些其他的手段来排查\",{\"1\":{\"3619\":1}}],[\"所以需要根据类别去分开查找\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"所以需要保护机制\",{\"1\":{\"1962\":1}}],[\"所以就避免了内存拷贝消耗\",{\"1\":{\"6270\":1}}],[\"所以就很好了避免幻读问题\",{\"1\":{\"3012\":1,\"3013\":1,\"6684\":1,\"6685\":1}}],[\"所以就需要消费者消费成功\",{\"1\":{\"2055\":1,\"5760\":1}}],[\"所以就用分段\",{\"1\":{\"1640\":1}}],[\"所以会消耗过多的\",{\"1\":{\"6741\":1}}],[\"所以会对动态表进行更新操作\",{\"1\":{\"2045\":1,\"5750\":1}}],[\"所以会出现外部内存碎片的问题\",{\"1\":{\"1651\":1}}],[\"所以会出现死循环\",{\"1\":{\"1274\":1,\"5616\":1}}],[\"所以线程\",{\"1\":{\"1993\":1}}],[\"所以可以考虑使用前缀索引带替普通索引\",{\"1\":{\"2840\":1,\"6512\":1}}],[\"所以可以根据这个信息确定送给哪个模块\",{\"1\":{\"2520\":1,\"2709\":1}}],[\"所以可以保证公共资源不会被多个线程同时访问\",{\"1\":{\"1980\":1,\"6239\":1}}],[\"所以可以认为二叉搜索树的时间复杂度介于o\",{\"1\":{\"691\":1,\"5458\":1}}],[\"所以进程之间要通信必须通过内核\",{\"1\":{\"1944\":1}}],[\"所以进程的切换只能发生在内核态\",{\"1\":{\"1879\":1}}],[\"所以实现起来比较简单\",{\"1\":{\"1827\":1,\"6356\":1}}],[\"所以针对内存分页机制会有内部内存碎片的现象\",{\"1\":{\"1659\":1}}],[\"所以页内会出现内存浪费\",{\"1\":{\"1659\":1}}],[\"所以多个段未必能恰好使用所有的内存空间\",{\"1\":{\"1651\":1}}],[\"所以不用担心后面的数据没接收到导致数据不一致性\",{\"1\":{\"6197\":1}}],[\"所以不能作为\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"所以不符合条件\",{\"1\":{\"3053\":1}}],[\"所以不需要使用更多的通信次数\",{\"1\":{\"2559\":1}}],[\"所以不需要额外的资源来记录状态信息\",{\"1\":{\"2273\":1}}],[\"所以不是幂等的\",{\"1\":{\"2224\":1}}],[\"所以不会导致缓冲区溢出的问题\",{\"1\":{\"3103\":1,\"6759\":1}}],[\"所以不会有外部碎片\",{\"1\":{\"1658\":1}}],[\"所以不会出现内部内存碎片\",{\"1\":{\"1650\":1}}],[\"所以不推荐使用\",{\"1\":{\"1435\":1,\"4763\":1}}],[\"所以每个消息体都是固定大小的存储块\",{\"1\":{\"1957\":1}}],[\"所以每个进程的虚拟内存空间就是相互独立的\",{\"1\":{\"1637\":1}}],[\"所以每次\",{\"1\":{\"233\":1}}],[\"所以在收到通知后应尽可能地读写数据\",{\"1\":{\"6279\":1}}],[\"所以在收到通知后\",{\"1\":{\"6278\":1}}],[\"所以在选主的冲突处理等方式上它都选择了非常简单明了的解决方案\",{\"1\":{\"4581\":1}}],[\"所以在生产环境中不能执行太多次的\",{\"1\":{\"3572\":1}}],[\"所以在这里例子中up\",{\"1\":{\"3051\":1}}],[\"所以在使用这两条语句的时候\",{\"1\":{\"2940\":1,\"6612\":1}}],[\"所以在运行时能产生oom问题的基本就是堆和栈了\",{\"1\":{\"2116\":1}}],[\"所以在处理完所有记录后要确保调用了commitsync\",{\"1\":{\"1608\":1}}],[\"所以在锁定范围和锁的作用域上两者并无区别\",{\"1\":{\"839\":1}}],[\"所以消息肯定是按照先后顺序进行处理的\",{\"1\":{\"1588\":1}}],[\"所以必然会涉及到partition的分配问题\",{\"1\":{\"1469\":1,\"6917\":1}}],[\"所以很多开发人员很难去看懂源码并进行二次开发和维护\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"所以万级别数据量业务场景的小公司可以优先选择功能完善的rabbitmq\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"所以高峰期服务\",{\"1\":{\"1426\":1}}],[\"所以创建的是annotationconfigservletwebserverapplicationcontext容器对象\",{\"1\":{\"1385\":1}}],[\"所以我们一般认为\",{\"1\":{\"6989\":1}}],[\"所以我们需要把需要分析的线程id转换为16进制\",{\"1\":{\"3524\":1}}],[\"所以我们直接看排在最前面的java进程就可以\",{\"1\":{\"3517\":1}}],[\"所以我们把暂存区有时也叫作索引\",{\"1\":{\"3334\":1}}],[\"所以我们使用下面算法将图片映射在哈希环上\",{\"1\":{\"2027\":1}}],[\"所以我们可以使用这个整数代表服务器\",{\"1\":{\"2025\":1}}],[\"所以我们可以看到\",{\"1\":{\"1626\":1}}],[\"所以我们只需将线程\",{\"1\":{\"2002\":1}}],[\"所以我们的每个starter都是依赖autoconfigure的\",{\"1\":{\"1362\":1,\"5687\":1}}],[\"所以我们在写依赖时才不需要写版本号\",{\"1\":{\"1356\":1,\"5681\":1}}],[\"所以我们在分析\",{\"1\":{\"1249\":1,\"5601\":1}}],[\"所以如图按照\",{\"1\":{\"1274\":1,\"5616\":1}}],[\"所以如果客户端已使用端口\",{\"1\":{\"2712\":1}}],[\"所以如果要使用key来映射分区\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"所以如果你要在集合中保存大量的数据那么使用vector有一些优势\",{\"1\":{\"833\":1}}],[\"所以如果可以预估数据量的话\",{\"1\":{\"783\":1}}],[\"所以对于引用数据类型的浅拷贝就相当于两个引用指向了同一个内存地址\",{\"1\":{\"5109\":1}}],[\"所以对于主键索引来说\",{\"1\":{\"2803\":1,\"6475\":1}}],[\"所以对之后的修改不可见\",{\"1\":{\"3055\":1}}],[\"所以对象之间两两不相等\",{\"1\":{\"1148\":1,\"5728\":1}}],[\"所以对不同的操作具有不同的效率\",{\"1\":{\"776\":1}}],[\"所以作者并未在哈希值的计算上做过多设计\",{\"1\":{\"1077\":1}}],[\"所以hashmap为解决这问题\",{\"1\":{\"1060\":1}}],[\"所以从hash计算的效率上\",{\"1\":{\"1059\":1}}],[\"所以单从这一点上看\",{\"1\":{\"1058\":1}}],[\"所以java并没有考虑效率问题\",{\"1\":{\"1049\":1}}],[\"所以效率不如红黑树\",{\"1\":{\"925\":1,\"5442\":1}}],[\"所以这里再介绍一个\",{\"1\":{\"3568\":1}}],[\"所以这里比较如下两个list1和list2的区别\",{\"1\":{\"807\":1}}],[\"所以这个随机数客户端和服务端都是一样的\",{\"1\":{\"2336\":1}}],[\"所以这也是为什么很难删除的原因\",{\"1\":{\"2167\":1}}],[\"所以这些页表是私有的\",{\"1\":{\"1637\":1}}],[\"所以这就导致原链表顺序为a\",{\"1\":{\"919\":1,\"5436\":1}}],[\"所以说的直白点就是嵌套循环调用次数太多\",{\"1\":{\"2117\":1}}],[\"所以说\",{\"1\":{\"842\":1,\"7078\":1}}],[\"所以保存相同内容的vector与arraylist\",{\"1\":{\"793\":1}}],[\"所以treeset中的元素要实现comparable接口\",{\"1\":{\"739\":1}}],[\"所以它的这一大优点并不太会作为考量标准\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"所以它也可以保持插入顺序\",{\"1\":{\"726\":1}}],[\"所以它比普通的二叉搜索树效率要低一点\",{\"1\":{\"705\":1,\"5473\":1}}],[\"所以发动机这个类和车这个类之间\",{\"1\":{\"585\":1}}],[\"所以程序员这个类可以继承雇员类\",{\"1\":{\"583\":1}}],[\"所以猫这个类可以继承动物类\",{\"1\":{\"582\":1}}],[\"所以\",{\"1\":{\"481\":1,\"484\":1,\"563\":1,\"586\":1,\"591\":1,\"616\":1,\"621\":1,\"624\":1,\"732\":1,\"845\":1,\"950\":1,\"990\":1,\"1029\":1,\"1037\":1,\"1254\":1,\"1258\":1,\"1268\":1,\"1428\":1,\"1452\":1,\"1454\":1,\"1588\":1,\"1627\":1,\"1727\":1,\"1729\":1,\"1737\":1,\"1769\":1,\"1775\":1,\"1805\":1,\"1808\":1,\"1831\":1,\"1909\":1,\"1922\":1,\"1949\":1,\"2223\":1,\"2224\":1,\"2300\":1,\"2358\":1,\"2654\":1,\"2666\":1,\"2819\":1,\"2917\":1,\"2935\":1,\"2957\":1,\"3008\":1,\"3010\":1,\"3101\":1,\"3175\":1,\"3359\":1,\"3367\":1,\"3774\":1,\"4608\":1,\"4621\":1,\"4627\":1,\"4886\":1,\"5606\":1,\"5610\":1,\"6194\":1,\"6205\":1,\"6265\":1,\"6279\":1,\"6311\":1,\"6315\":1,\"6360\":1,\"6361\":1,\"6491\":1,\"6589\":1,\"6607\":1,\"6629\":1,\"6680\":1,\"6682\":1,\"6757\":1,\"6833\":1,\"6900\":1,\"6902\":1,\"6972\":1,\"6979\":1,\"6980\":1,\"6989\":2,\"6997\":1,\"7002\":1,\"7003\":1,\"7264\":1}}],[\"加入到自己的\",{\"1\":{\"7042\":1}}],[\"加入虚拟节点以后的hash环如下\",{\"1\":{\"2035\":1}}],[\"加盐流程\",{\"1\":{\"5072\":1}}],[\"加盐的目的也是为了尽量增强明文密码的复杂度\",{\"1\":{\"5071\":1}}],[\"加盐是指在密码的任意位置插入一些指定的字符串\",{\"1\":{\"5071\":1}}],[\"加盐sault\",{\"1\":{\"5070\":1}}],[\"加面\",{\"0\":{\"4380\":1}}],[\"加\",{\"1\":{\"2893\":1,\"2894\":1,\"3413\":1,\"4318\":1,\"6565\":1,\"6566\":1,\"7143\":1}}],[\"加的是\",{\"1\":{\"2890\":1,\"2891\":1,\"6562\":1,\"6563\":1}}],[\"加表锁\",{\"1\":{\"2879\":1,\"6551\":1}}],[\"加上全局锁\",{\"1\":{\"2863\":1,\"6535\":1}}],[\"加上分页语句\",{\"1\":{\"1107\":1}}],[\"加全局锁又会带来什么缺点呢\",{\"1\":{\"2862\":1,\"6534\":1}}],[\"加速查询\",{\"1\":{\"2778\":1,\"2780\":1,\"6447\":1,\"6449\":1}}],[\"加速对象内存分配\",{\"1\":{\"273\":1}}],[\"加密采用对称加密\",{\"1\":{\"7078\":1}}],[\"加密和解密花费时间长\",{\"1\":{\"5102\":1}}],[\"加密效率高的特点\",{\"1\":{\"5099\":1}}],[\"加密速度快\",{\"1\":{\"5099\":1}}],[\"加密解密密钥是相同的\",{\"1\":{\"5092\":1}}],[\"加密\",{\"1\":{\"4714\":1,\"4843\":1,\"7232\":1}}],[\"加密内容\",{\"1\":{\"2343\":1}}],[\"加密通信\",{\"1\":{\"2334\":1,\"2341\":1}}],[\"加密通信算法改变通知\",{\"1\":{\"2334\":1,\"2341\":1}}],[\"加密算法\",{\"1\":{\"2323\":1,\"2328\":1}}],[\"加密展示\",{\"1\":{\"8\":1,\"100\":1,\"5121\":1,\"5213\":1}}],[\"加开关\",{\"1\":{\"2080\":1,\"5785\":1}}],[\"加分布式锁\",{\"1\":{\"2066\":1,\"5771\":1}}],[\"加快排序查询时间\",{\"1\":{\"2827\":1,\"6499\":1}}],[\"加快数据恢复的速率\",{\"1\":{\"1461\":1,\"6909\":1}}],[\"加快读写速度\",{\"1\":{\"1460\":1,\"6908\":1}}],[\"加锁\",{\"1\":{\"858\":1,\"859\":1,\"1987\":1,\"4910\":1,\"5488\":1,\"5489\":1,\"6246\":1}}],[\"加1\",{\"1\":{\"671\":1}}],[\"加载meta\",{\"1\":{\"4232\":1}}],[\"加载配置文件的优先级了解么\",{\"0\":{\"1311\":1,\"5641\":1}}],[\"加载自动装配类\",{\"1\":{\"1310\":1,\"5640\":1}}],[\"加载指定二进制名称的类\",{\"1\":{\"431\":1,\"5322\":1}}],[\"加载时再利用自定义的类加载器对其解密\",{\"1\":{\"428\":1,\"5319\":1}}],[\"加载\",{\"1\":{\"409\":1,\"413\":1,\"5298\":1,\"5303\":1}}],[\"从句\",{\"1\":{\"6740\":1}}],[\"从下图你可以看到\",{\"1\":{\"6267\":1}}],[\"从下图可以看到这个文件的配置内容都被我们读取到了\",{\"1\":{\"1295\":1,\"5638\":1}}],[\"从查询出来映射生成的\",{\"1\":{\"5713\":1}}],[\"从原数据计算出md5值很容易\",{\"1\":{\"5034\":1}}],[\"从数据库中检索出分页结果集\",{\"1\":{\"4962\":1}}],[\"从数据集\",{\"1\":{\"3185\":1,\"6843\":1}}],[\"从自媒体文章的内容中提取文本和图片\",{\"1\":{\"4857\":2}}],[\"从另一角度看\",{\"1\":{\"4609\":1}}],[\"从上图可以看到\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"从上面thread类\",{\"1\":{\"5994\":1}}],[\"从上面thread类源代码可以看出thread\",{\"1\":{\"3763\":1}}],[\"从上面我们可以看出\",{\"1\":{\"3737\":1,\"5969\":1}}],[\"从上面的过程可以发现第三次握手是可以携带数据的\",{\"1\":{\"2531\":1}}],[\"从上面的这段代码来看\",{\"1\":{\"1626\":1}}],[\"从上面图中可以看到\",{\"1\":{\"1042\":1}}],[\"从上面两段代码中发现有两处不同\",{\"1\":{\"817\":1}}],[\"从项目的整体架构到具体功能实现细节都说了\",{\"1\":{\"4316\":1,\"7141\":1}}],[\"从打印的启动日志可以看到主要做了以下工作\",{\"1\":{\"4231\":1}}],[\"从索引字段个数分类\",{\"1\":{\"4172\":1}}],[\"从索引字段特性分类\",{\"1\":{\"4167\":1}}],[\"从定义上可以看出\",{\"1\":{\"4149\":1}}],[\"从字面意思也能猜到个大概\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"从使用层面来说\",{\"1\":{\"3635\":1,\"5876\":1}}],[\"从中可以直接找到问题代码的行数\",{\"1\":{\"3545\":1}}],[\"从管道文件中读取信息\",{\"1\":{\"3468\":1}}],[\"从管道的一段写入的数据\",{\"1\":{\"1954\":1}}],[\"从应用程序的层面讲\",{\"1\":{\"3430\":1}}],[\"从技术层面讲\",{\"1\":{\"3429\":1}}],[\"从左到右每个位的权值为\",{\"1\":{\"3410\":1}}],[\"从左到右依次到查询条件中去匹配\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"从库会通过psync命令把自己记录的slave\",{\"1\":{\"3244\":1}}],[\"从库是会丢失掉那部分被覆盖掉的数据\",{\"1\":{\"3241\":1}}],[\"从库作为一个client\",{\"1\":{\"3240\":1}}],[\"从库也是一个client\",{\"1\":{\"3240\":1}}],[\"从库再重新执行这些操作\",{\"1\":{\"3236\":1}}],[\"从库需要先把当前数据库清空\",{\"1\":{\"3235\":1}}],[\"从库接收到\",{\"1\":{\"3235\":1}}],[\"从库收到数据后\",{\"1\":{\"3234\":1}}],[\"从库收到响应后\",{\"1\":{\"3233\":1}}],[\"从库给主库发送\",{\"1\":{\"3233\":1}}],[\"从库和主库建立起连接\",{\"1\":{\"3232\":1}}],[\"从库都可以接收\",{\"1\":{\"3229\":1}}],[\"从库的自增值就是什么\",{\"1\":{\"2934\":1,\"6606\":1}}],[\"从已设置过期时间的数据集\",{\"1\":{\"3181\":1,\"3182\":1,\"3183\":1,\"3188\":1,\"6839\":1,\"6840\":1,\"6841\":1,\"6846\":1}}],[\"从链首到链尾\",{\"1\":{\"3045\":1}}],[\"从看新闻\",{\"1\":{\"2269\":1}}],[\"从台式机的浏览器到手机上的各种\",{\"1\":{\"2269\":1}}],[\"从此位置沿环顺时针寻找\",{\"1\":{\"2018\":1}}],[\"从这个名字中我们也可以发现\",{\"1\":{\"7071\":1}}],[\"从这个角度\",{\"1\":{\"611\":1}}],[\"从这功能描述\",{\"1\":{\"1948\":1}}],[\"从spring\",{\"1\":{\"1382\":1,\"1386\":1}}],[\"从spring3开始提供了\",{\"1\":{\"1371\":1}}],[\"从2进制角度来看\",{\"1\":{\"1024\":1}}],[\"从16扩容到32\",{\"1\":{\"986\":1}}],[\"从\",{\"1\":{\"891\":1,\"894\":1,\"1438\":1,\"1802\":1,\"2585\":1,\"2586\":1,\"2972\":1,\"3307\":1,\"3689\":1,\"3697\":1,\"4104\":1,\"4619\":1,\"5509\":1,\"5512\":1,\"5859\":1,\"5866\":1,\"6192\":1,\"6308\":1,\"6644\":1}}],[\"从内容中提取纯文本内容和图片\",{\"1\":{\"4857\":1}}],[\"从内部实现机制来讲arraylist和vector都是使用数组\",{\"1\":{\"833\":1}}],[\"从内存模型而不是垃圾回收的角度\",{\"1\":{\"272\":1}}],[\"从remove方法中我们发现除了一个使用同步方法\",{\"1\":{\"827\":1}}],[\"从两端进行操作\",{\"1\":{\"766\":1}}],[\"从任一节点到叶子节点的所有路径都包含相同数目的黑色节点\",{\"1\":{\"700\":1,\"5467\":1}}],[\"从根节点到叶子节点的所有路径上不能有\",{\"1\":{\"699\":1,\"5466\":1}}],[\"从第1层到第\",{\"1\":{\"681\":1}}],[\"从一个局域网到另一个局域网中的网络设备的寻址\",{\"1\":{\"7031\":1}}],[\"从一个祖先结点到其子孙结点的一系列边称为树中一条路径\",{\"1\":{\"665\":1}}],[\"从一棵树的根到树中任一个结点都有路径\",{\"1\":{\"665\":1}}],[\"从父结点到子结点的连线\",{\"1\":{\"659\":1}}],[\"从时间复杂度的角度\",{\"1\":{\"630\":1}}],[\"从他们的角度看\",{\"1\":{\"609\":1}}],[\"从用户的角度看\",{\"1\":{\"605\":1}}],[\"从程序语法角度讲是必须进行处理的异常\",{\"1\":{\"462\":1,\"5357\":1}}],[\"从局部\",{\"1\":{\"381\":1}}],[\"从而对\",{\"1\":{\"7079\":1}}],[\"从而减少了客户端的请求次数和延迟\",{\"1\":{\"7069\":1}}],[\"从而支持虚拟主机的功能\",{\"1\":{\"7064\":1}}],[\"从而消耗大量的系统资\",{\"1\":{\"5819\":1}}],[\"从而消耗大量的系统资源\",{\"1\":{\"3808\":1}}],[\"从而获取完整的数据记录\",{\"1\":{\"4202\":1}}],[\"从而形成一系列的连锁反应\",{\"1\":{\"4145\":1}}],[\"从而不再占用内存\",{\"1\":{\"4087\":1}}],[\"从而实现各种功能的增强和定制\",{\"1\":{\"4953\":1}}],[\"从而实现单点登录的效果\",{\"1\":{\"4065\":1}}],[\"从而实现对数据库的访问\",{\"1\":{\"1093\":1}}],[\"从而到底提高程序性能的目的\",{\"1\":{\"3811\":1,\"5822\":1}}],[\"从而降低获取锁带来的消耗\",{\"1\":{\"3799\":1,\"5811\":1}}],[\"从而执行相应的同步调用\",{\"1\":{\"3747\":1,\"5979\":1}}],[\"从而造成了可见性问题\",{\"1\":{\"3709\":1,\"5909\":1}}],[\"从而造成rc\",{\"1\":{\"3054\":1}}],[\"从而使得用户在使用消息缓冲进行通信时不再需要考虑同步问题\",{\"1\":{\"3473\":1}}],[\"从而使多个进程可以直接访问同一个物理内存页面\",{\"1\":{\"3471\":1}}],[\"从而方便日常开发\",{\"1\":{\"3377\":1}}],[\"从而解放了开发人员以便他们专注在真正重要的事情上\",{\"1\":{\"3291\":1,\"6080\":1}}],[\"从而避免了线程安全问题\",{\"1\":{\"3758\":1,\"5990\":1}}],[\"从而避免了参数也作为条件的一部分\",{\"1\":{\"3062\":1,\"6713\":1}}],[\"从而避免全量复制带来的性能开销\",{\"1\":{\"3239\":1}}],[\"从而帮助其正常关闭\",{\"1\":{\"2620\":1}}],[\"从而出现数据分布不均匀的情况\",{\"1\":{\"2034\":1}}],[\"从而很有可能导致系统崩溃\",{\"1\":{\"2030\":1}}],[\"从而确定每台机器在哈希环上的位置\",{\"1\":{\"2017\":1}}],[\"从而大幅提升了\",{\"1\":{\"1810\":1,\"6317\":1}}],[\"从而导致数据库压力骤增\",{\"1\":{\"4145\":1}}],[\"从而导致\",{\"1\":{\"3879\":1,\"3911\":1,\"3912\":1,\"3913\":1,\"6034\":1,\"6058\":1,\"6059\":1,\"6060\":1}}],[\"从而导致网络流量的无端的浪费\",{\"1\":{\"2660\":1}}],[\"从而导致可用内存减少\",{\"1\":{\"2116\":1}}],[\"从而导致消息重复消费\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"从而导致offset自动提交失败\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"从而导致整个服务奔溃\",{\"1\":{\"1421\":1}}],[\"从而在启动独立的线程之后\",{\"1\":{\"1373\":1}}],[\"从而提高系统的负载能力\",{\"1\":{\"4481\":1,\"6114\":1}}],[\"从而提高效率\",{\"1\":{\"4117\":1}}],[\"从而提高查询效率\",{\"1\":{\"1134\":1,\"1136\":1,\"5713\":1,\"5715\":1}}],[\"从而提高性能\",{\"1\":{\"246\":1}}],[\"从而保证了该数据不会丢失\",{\"1\":{\"4588\":1}}],[\"从而保证了红黑树的查找\",{\"1\":{\"921\":1,\"5438\":1}}],[\"从而保证共享变量的可见性\",{\"1\":{\"3711\":1,\"5911\":1}}],[\"从而保证插入数据时\",{\"1\":{\"2923\":1,\"6595\":1}}],[\"从而保证最终结果为正整数\",{\"1\":{\"1077\":1}}],[\"从而保证分布均匀\",{\"1\":{\"927\":1,\"5444\":1}}],[\"从而增加full\",{\"1\":{\"402\":1}}],[\"从而将原来的一整块内存空间划分成多个的小空间\",{\"1\":{\"374\":1}}],[\"用着也还行\",{\"1\":{\"6993\":1}}],[\"用到了哪些技术\",{\"1\":{\"4390\":1}}],[\"用了缓存的\",{\"1\":{\"2078\":1,\"5783\":1}}],[\"用套接字中的相关函数来完成通信过程\",{\"1\":{\"1975\":1,\"6256\":1}}],[\"用完了就销毁\",{\"1\":{\"1949\":1}}],[\"用作段表的索引\",{\"1\":{\"1644\":1}}],[\"用来保证集群中存在过半的机器能够和\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"用来做客户端负载均衡\",{\"1\":{\"4541\":1}}],[\"用来做流量控制\",{\"1\":{\"2465\":1}}],[\"用来设置命令使用的内存大小\",{\"1\":{\"3576\":1}}],[\"用来唯一标记这个实例\",{\"1\":{\"3233\":1}}],[\"用来解决乱序问题等\",{\"1\":{\"2464\":1}}],[\"用来解决丢包的问题\",{\"1\":{\"2445\":1}}],[\"用来解决网络包乱序问题\",{\"1\":{\"2444\":1}}],[\"用来供客户端校验\",{\"1\":{\"2342\":1}}],[\"用来供服务端校验\",{\"1\":{\"2335\":1}}],[\"用来指定服务器的域名\",{\"1\":{\"2214\":1}}],[\"用来接收服务\",{\"1\":{\"1413\":1}}],[\"用来发布消息\",{\"1\":{\"1413\":1}}],[\"用来报告springboot启动过程中的异常\",{\"1\":{\"1386\":1}}],[\"用来衡量hashmap满的程度\",{\"1\":{\"967\":1}}],[\"用来表示堆的最大内存\",{\"1\":{\"244\":1}}],[\"用来表示堆的起始内存\",{\"1\":{\"243\":1}}],[\"用\",{\"1\":{\"941\":1,\"1432\":1,\"4760\":1}}],[\"用法上\",{\"1\":{\"752\":1}}],[\"用算法描述中的术语\",{\"1\":{\"747\":1}}],[\"用户登录时\",{\"1\":{\"5079\":1}}],[\"用户登录成功\",{\"1\":{\"4830\":1,\"7219\":1}}],[\"用户密码\",{\"1\":{\"5076\":1}}],[\"用户输入的密码\",{\"1\":{\"5082\":1}}],[\"用户输入\",{\"1\":{\"5074\":1,\"5080\":1}}],[\"用户输入通过setstring方法绑定到查询的占位符位置\",{\"1\":{\"4090\":1}}],[\"用户注册时\",{\"1\":{\"5073\":1}}],[\"用户的密码也不会被泄漏\",{\"1\":{\"5047\":1,\"5052\":1}}],[\"用户的密码就被泄漏了\",{\"1\":{\"5041\":1,\"5046\":1}}],[\"用户在下次迭代时需要使用这个新游标作为scan命令的游标参数\",{\"1\":{\"4893\":1}}],[\"用户再次进入网关开始访问\",{\"1\":{\"4831\":1,\"7220\":1}}],[\"用户以后每次向后端发请求都在\",{\"1\":{\"4812\":1,\"7209\":1}}],[\"用户进入网关开始登陆\",{\"1\":{\"4810\":1,\"4829\":1,\"7207\":1,\"7218\":1}}],[\"用户向服务器发送用户名\",{\"1\":{\"4810\":1,\"7207\":1}}],[\"用户向服务器发送请求\",{\"1\":{\"1196\":1,\"5548\":1}}],[\"用户历史记录功能\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"用户层主要解决用户使用的易用性问题\",{\"1\":{\"4552\":1}}],[\"用户层通过\",{\"1\":{\"2643\":1}}],[\"用户使用用户名密码首次在认证服务器登录\",{\"1\":{\"4056\":1}}],[\"用户分为三种\",{\"1\":{\"3497\":1}}],[\"用户是使用\",{\"1\":{\"3299\":1,\"6085\":1}}],[\"用户等\",{\"1\":{\"3294\":1}}],[\"用户可以在一个应用进入另一个应用\",{\"1\":{\"4053\":1}}],[\"用户可以通过\",{\"1\":{\"3451\":1}}],[\"用户可以方便地创建和使用容器\",{\"1\":{\"3292\":1,\"6081\":1}}],[\"用户可通过覆写该方法\",{\"1\":{\"444\":1,\"5337\":1}}],[\"用户只能看到该事务创建\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"用户只能调用\",{\"1\":{\"610\":1}}],[\"用户\",{\"1\":{\"2972\":4,\"6644\":4}}],[\"用户消息通过\",{\"1\":{\"2459\":1}}],[\"用户点击继续访问或者被恶意导入伪造的根证书\",{\"1\":{\"2345\":1}}],[\"用户点击了按钮后立马返回\",{\"1\":{\"1418\":1}}],[\"用户标识符主要为共享和保护服务\",{\"1\":{\"1865\":1}}],[\"用户标识符\",{\"1\":{\"1865\":1}}],[\"用户发送个请求\",{\"1\":{\"1417\":1}}],[\"用户还可以加入自定义的类加载器来进行拓展\",{\"1\":{\"428\":1,\"5319\":1}}],[\"用于在\",{\"1\":{\"4939\":1}}],[\"用于确保服务不会受请求突增影响变得不可用\",{\"1\":{\"4915\":1}}],[\"用于将那些与业务无关\",{\"1\":{\"4180\":1}}],[\"用于完成某个功能的一个过程\",{\"1\":{\"3678\":1,\"5847\":1}}],[\"用于完成各种任务\",{\"1\":{\"3447\":1}}],[\"用于判断内存中某个值是否为预期值\",{\"1\":{\"3667\":1,\"5830\":1}}],[\"用于判断一个元素是否在集合中\",{\"1\":{\"2148\":1}}],[\"用于记录\",{\"1\":{\"3563\":1}}],[\"用于配置网络接口\",{\"1\":{\"3458\":1}}],[\"用于组织和管理存储设备上的文件和目录\",{\"1\":{\"3456\":1}}],[\"用于应用程序开发\",{\"1\":{\"3449\":1}}],[\"用于临时存放你的改动\",{\"1\":{\"3334\":1}}],[\"用于保证可靠性和流量控制维护的某些状态信息\",{\"1\":{\"2461\":1}}],[\"用于服务器回应时\",{\"1\":{\"2217\":1}}],[\"用于缓存控制\",{\"1\":{\"2203\":1}}],[\"用于缓存图片\",{\"1\":{\"2007\":1}}],[\"用于等待多个线程到达某个点再一起继续执行\",{\"1\":{\"1983\":1,\"6242\":1}}],[\"用于多进程对共享数据的访问\",{\"1\":{\"1973\":1,\"6254\":1}}],[\"用于通知接收进程某个事件已经发生\",{\"1\":{\"1971\":1,\"3464\":1,\"6252\":1}}],[\"用于具有亲缘关系的父子进程间或者兄弟进程之间的通信\",{\"1\":{\"1969\":1,\"6250\":1}}],[\"用于处理连接的响应事件\",{\"1\":{\"1844\":1,\"6386\":1}}],[\"用于段页式地址变换的数据结构是每一个程序一张段表\",{\"1\":{\"1680\":1}}],[\"用于唯一标记一个消息\",{\"1\":{\"1500\":1,\"6953\":1}}],[\"用于设置不需要拦截的过滤规则\",{\"1\":{\"1402\":1}}],[\"用于设置拦截器的过滤路径规则\",{\"1\":{\"1401\":1}}],[\"用于获取enableautoconfiguration注解中的\",{\"1\":{\"1292\":1,\"5634\":1}}],[\"用于元素间的链接\",{\"1\":{\"1005\":1}}],[\"用于调用原始方法\",{\"1\":{\"911\":1,\"5529\":1}}],[\"用于拦截增强被代理类的方法\",{\"1\":{\"910\":1,\"5528\":1}}],[\"用于加载代理对象\",{\"1\":{\"901\":1,\"5519\":1}}],[\"用于统计类加载器相关的信息\",{\"1\":{\"444\":1,\"5337\":1}}],[\"用于实现类加载过程中的加载这一步\",{\"1\":{\"416\":1,\"5307\":1}}],[\"用于存储编译期生成的各种字面量和符号引用\",{\"1\":{\"287\":1}}],[\"用于存储类信息\",{\"1\":{\"282\":1}}],[\"用于存放编译期生成的各种字面量和符号引用\",{\"1\":{\"281\":1}}],[\"用于为线程快速分配对象而不需要加锁\",{\"1\":{\"271\":1}}],[\"b=3\",{\"1\":{\"3673\":1,\"5840\":1}}],[\"bzip2\",{\"1\":{\"3419\":1}}],[\"bmsu\",{\"1\":{\"3417\":1}}],[\"bgsave\",{\"1\":{\"3151\":1,\"3235\":1,\"6807\":1}}],[\"btree\",{\"1\":{\"2770\":2,\"6439\":2}}],[\"b+\",{\"1\":{\"2759\":1,\"6428\":1}}],[\"b+树是多路平衡树\",{\"1\":{\"2802\":1,\"6474\":1}}],[\"b+树本身就是一颗多叉平衡树\",{\"1\":{\"2799\":1,\"6471\":1}}],[\"b+树的检索效率就很稳定了\",{\"1\":{\"2764\":1,\"6433\":1}}],[\"b+树的叶子节点有一条引用链指向与它相邻的叶子节点\",{\"1\":{\"2763\":1,\"6432\":1}}],[\"b+树只有叶子节点存放\",{\"1\":{\"2762\":1,\"6431\":1}}],[\"b+树两者有何异同呢\",{\"1\":{\"2761\":1,\"6430\":1}}],[\"b+树中的\",{\"1\":{\"2759\":1,\"6428\":1}}],[\"b+树\",{\"1\":{\"2758\":1,\"2797\":1,\"2836\":1,\"6427\":1,\"6469\":1,\"6508\":1}}],[\"b+tree\",{\"1\":{\"2749\":1,\"2750\":1,\"2760\":1,\"2765\":1,\"2766\":2,\"2767\":1,\"2770\":1,\"6418\":1,\"6419\":1,\"6429\":1,\"6434\":1,\"6435\":2,\"6436\":1,\"6439\":1}}],[\"b命令的时候\",{\"1\":{\"1955\":1}}],[\"bus\",{\"1\":{\"4512\":1,\"6130\":1}}],[\"businessexception\",{\"1\":{\"1325\":2,\"1329\":1}}],[\"build用来创建按顺序执行多个命令行指令的自动构建\",{\"1\":{\"3316\":1}}],[\"builder<>\",{\"1\":{\"2177\":1,\"2185\":1}}],[\"build\",{\"1\":{\"2096\":1,\"2177\":1,\"2185\":1,\"4750\":1}}],[\"buf\",{\"1\":{\"1787\":2,\"2111\":2,\"3101\":1,\"3155\":1,\"6291\":2,\"6757\":1,\"6811\":1}}],[\"buffer的slave\",{\"1\":{\"3243\":1}}],[\"buffer中找主从差异的数据后\",{\"1\":{\"3239\":1}}],[\"buffer配置尽量大一些\",{\"1\":{\"3239\":1}}],[\"buffer环形缓冲区被主库的写命令覆盖了\",{\"1\":{\"3239\":1}}],[\"bufferedimage\",{\"1\":{\"4857\":1}}],[\"bufferedinputstream\",{\"1\":{\"2111\":2}}],[\"bufferedoutputstream\",{\"1\":{\"3527\":5}}],[\"bufferedreader\",{\"1\":{\"480\":2}}],[\"buffer\",{\"1\":{\"271\":1,\"1672\":1,\"1708\":2,\"3235\":1,\"3236\":1,\"3238\":2,\"3239\":2,\"3240\":3}}],[\"b的成品创建又依赖于\",{\"1\":{\"1274\":1,\"5616\":1}}],[\"b依赖a\",{\"1\":{\"1263\":1}}],[\"b\",{\"1\":{\"1256\":1,\"1258\":4,\"1274\":1,\"1278\":1,\"1279\":2,\"1283\":1,\"1373\":1,\"1413\":1,\"1417\":1,\"1418\":1,\"1955\":2,\"1994\":1,\"1999\":5,\"2001\":1,\"2002\":1,\"2377\":1,\"2712\":1,\"2758\":1,\"2759\":5,\"2760\":1,\"2761\":1,\"2762\":1,\"2763\":1,\"2764\":1,\"2838\":1,\"2899\":1,\"2972\":6,\"2983\":3,\"2984\":1,\"2988\":2,\"2992\":2,\"2994\":1,\"3415\":1,\"3674\":1,\"3675\":1,\"3685\":1,\"4299\":1,\"5608\":1,\"5610\":4,\"5616\":1,\"5620\":1,\"5621\":2,\"5625\":1,\"5842\":1,\"5844\":1,\"5854\":1,\"6427\":1,\"6428\":5,\"6429\":1,\"6430\":1,\"6431\":1,\"6432\":1,\"6433\":1,\"6510\":1,\"6571\":1,\"6644\":6,\"6655\":3,\"6656\":1,\"6660\":2,\"6664\":2,\"6666\":1,\"7033\":1,\"7035\":1,\"7036\":2,\"7038\":2,\"7039\":1,\"7040\":2,\"7042\":1,\"7045\":1,\"7048\":3,\"7050\":1,\"7051\":1,\"7052\":1,\"7053\":1,\"7054\":2,\"7055\":1,\"7124\":1}}],[\"biz=mjm5njq5mti5oa==\",{\"1\":{\"3930\":1,\"6074\":1}}],[\"biz=mzaxnte2njeymw==\",{\"1\":{\"3727\":1,\"5929\":1}}],[\"biz=mzu0ote4mzyzmw==\",{\"1\":{\"3702\":1,\"5824\":1}}],[\"biz=mzg2ota0njk0oa==\",{\"1\":{\"1368\":1,\"5646\":1}}],[\"bitmap\",{\"1\":{\"3095\":1,\"6751\":1}}],[\"bitsmap\",{\"1\":{\"1770\":1,\"1771\":1}}],[\"bits\",{\"1\":{\"1062\":1,\"1076\":1}}],[\"bigint\",{\"1\":{\"3075\":1,\"6726\":1}}],[\"binary\",{\"1\":{\"7067\":1}}],[\"bind\",{\"1\":{\"4929\":1,\"4931\":2,\"4933\":4,\"4935\":1,\"4994\":2}}],[\"bindingresult\",{\"1\":{\"1203\":1,\"5555\":1}}],[\"bin\",{\"1\":{\"3307\":1,\"3566\":1,\"3567\":1,\"3575\":1}}],[\"binlog\",{\"1\":{\"2933\":1,\"2934\":2,\"2935\":1,\"6605\":1,\"6606\":2,\"6607\":1}}],[\"bis\",{\"1\":{\"2111\":3}}],[\"bounds\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"body\",{\"1\":{\"2196\":1,\"2197\":1,\"2198\":1,\"2262\":1,\"2352\":1}}],[\"both\",{\"1\":{\"1062\":1}}],[\"boor\",{\"1\":{\"1356\":1,\"5681\":1}}],[\"boot快速开发框架\",{\"1\":{\"4659\":1,\"7178\":1}}],[\"boot风格进行再封装屏蔽掉了复杂的配置和实现原理\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"boot启动的流程\",{\"1\":{\"4416\":1}}],[\"boot启动类中注册\",{\"1\":{\"1326\":1}}],[\"boot平时用什么注解\",{\"0\":{\"4122\":1}}],[\"boot的开发风格做到一键启动和部署\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"boot的开发便利性巧妙地简化了分布式系统基础设施的开发\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"boot的自动配置功能\",{\"1\":{\"4067\":1}}],[\"boot的什么api\",{\"0\":{\"4066\":1}}],[\"boot的监控插件\",{\"1\":{\"1367\":1,\"5693\":1}}],[\"boot的客户端工具\",{\"1\":{\"1363\":1,\"5688\":1}}],[\"boot的核心功能之一\",{\"1\":{\"1296\":1}}],[\"boot四大核心组件\",{\"0\":{\"1360\":1,\"5685\":1}}],[\"boot提供的spring\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"boot提供了各种条件注解如\",{\"1\":{\"1304\":1}}],[\"boot自带监控组件\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"boot自动配置原理\",{\"0\":{\"1289\":1,\"5630\":1}}],[\"boot<\",{\"1\":{\"1337\":1,\"5661\":1}}],[\"bootstrap\",{\"1\":{\"1518\":1}}],[\"bootstrap配置文件有以下几个应用场景\",{\"1\":{\"5655\":1}}],[\"bootstrap配置文件\",{\"1\":{\"1334\":1}}],[\"bootstrapclassloader\",{\"1\":{\"425\":1,\"448\":1,\"5316\":1,\"5341\":1}}],[\"boot项目\",{\"1\":{\"1366\":1,\"5691\":1}}],[\"boot项目的自动化配置\",{\"1\":{\"1333\":1,\"5654\":1}}],[\"boot项目进行自动化设置\",{\"1\":{\"1300\":1}}],[\"boot主类中使用\",{\"1\":{\"1321\":1}}],[\"boot在启动时会通过一个引导程序进行项目初始化\",{\"1\":{\"1302\":1}}],[\"boot\",{\"0\":{\"1311\":1,\"1314\":1,\"1347\":1,\"5535\":1,\"5641\":1,\"5645\":1,\"5672\":1},\"1\":{\"1290\":2,\"1291\":1,\"1294\":3,\"1295\":1,\"1310\":1,\"1336\":3,\"1337\":1,\"1345\":1,\"1346\":1,\"1348\":3,\"1350\":1,\"1351\":1,\"1352\":1,\"1353\":2,\"1363\":1,\"1396\":1,\"4068\":3,\"4654\":1,\"4860\":2,\"4938\":2,\"5631\":2,\"5632\":1,\"5636\":3,\"5638\":1,\"5640\":1,\"5660\":3,\"5661\":1,\"5670\":1,\"5671\":1,\"5673\":3,\"5675\":1,\"5676\":1,\"5677\":1,\"5678\":2,\"5688\":1,\"7173\":1}}],[\"boolean\",{\"1\":{\"431\":1,\"435\":1,\"444\":1,\"2177\":1,\"2185\":1,\"3789\":2,\"4857\":10,\"4910\":1,\"5322\":1,\"5326\":1,\"5337\":1,\"5800\":2}}],[\"bed128365216c019988915ed3add75fb\",{\"1\":{\"5063\":1}}],[\"bearer\",{\"1\":{\"4816\":1,\"7213\":1}}],[\"beanutils是深拷贝\",{\"1\":{\"5105\":1}}],[\"beanutils\",{\"0\":{\"5104\":1},\"1\":{\"4857\":2,\"4984\":1,\"4999\":2,\"5106\":1}}],[\"beans\",{\"1\":{\"1346\":1,\"2177\":1,\"2185\":1,\"4857\":2,\"4931\":1,\"4935\":1,\"4981\":1,\"4986\":1,\"4994\":1,\"4997\":1,\"4999\":2,\"5671\":1}}],[\"bean加载情况\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"bean注解注册全局异常处理类\",{\"1\":{\"1321\":1}}],[\"beanpostprocessor\",{\"1\":{\"1182\":1,\"1185\":1}}],[\"beanclassloaderaware\",{\"1\":{\"1176\":1}}],[\"beannameaware\",{\"1\":{\"1175\":1}}],[\"bean的生命周期\",{\"0\":{\"1163\":1,\"5543\":1}}],[\"bean\",{\"1\":{\"864\":1,\"1131\":1,\"1164\":2,\"1165\":5,\"1166\":2,\"1167\":1,\"1170\":2,\"1171\":1,\"1175\":3,\"1176\":1,\"1177\":1,\"1179\":1,\"1180\":1,\"1181\":1,\"1182\":2,\"1183\":1,\"1185\":2,\"1186\":7,\"1187\":2,\"1188\":2,\"1209\":1,\"1211\":1,\"1274\":1,\"1282\":1,\"1327\":1,\"1380\":1,\"4536\":1,\"4860\":2,\"4938\":2,\"5494\":1,\"5561\":1,\"5563\":1,\"5616\":1,\"5624\":1,\"6151\":1}}],[\"beanfactory和applicationcontext\",{\"1\":{\"4132\":1}}],[\"beanfactoryaware和applicationcontextaware\",{\"1\":{\"4132\":1}}],[\"beanfactoryaware\",{\"1\":{\"1177\":1}}],[\"beanfactorypostprocessor和bean关联\",{\"1\":{\"1168\":1}}],[\"beanfactory\",{\"1\":{\"864\":1,\"1209\":1,\"5494\":1,\"5561\":1}}],[\"been\",{\"1\":{\"3925\":1,\"3927\":1}}],[\"because\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"before和\",{\"1\":{\"4032\":1}}],[\"before\",{\"1\":{\"3857\":2,\"4031\":1,\"6011\":2}}],[\"before规则中的volatile变量规则规定了一个线程先去写一个volatile变量\",{\"1\":{\"3712\":1,\"5912\":1}}],[\"begin\",{\"1\":{\"2940\":1,\"6612\":1}}],[\"between\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"be\",{\"1\":{\"1047\":1}}],[\"bytearrayinputstream\",{\"1\":{\"4857\":2}}],[\"bytearrayentity\",{\"1\":{\"2096\":2,\"2100\":1}}],[\"bytes\",{\"1\":{\"3487\":2,\"3597\":2,\"4857\":3}}],[\"bytesize\",{\"1\":{\"2111\":3}}],[\"byte\",{\"1\":{\"1466\":2,\"2096\":1,\"2111\":2,\"4857\":1,\"6914\":2}}],[\"by\",{\"1\":{\"787\":1,\"3206\":1,\"3857\":1,\"6011\":1,\"6740\":2}}],[\"bloomfilter<string>\",{\"1\":{\"2182\":1}}],[\"bloomfilterexample\",{\"1\":{\"2182\":1}}],[\"bloomfilter\",{\"1\":{\"2177\":3,\"2182\":10,\"2185\":3,\"2188\":4}}],[\"bloom\",{\"1\":{\"2148\":1}}],[\"blog\",{\"1\":{\"553\":1,\"625\":1,\"640\":1,\"686\":1,\"882\":1,\"918\":1,\"947\":1,\"1119\":1,\"1153\":1,\"1393\":1,\"1493\":3,\"1511\":1,\"2036\":1,\"2136\":3,\"2189\":1,\"3059\":1,\"3063\":1,\"3390\":5,\"3790\":1,\"3846\":1,\"4756\":1,\"5103\":2,\"5115\":1,\"5347\":1,\"5430\":1,\"5435\":1,\"5701\":1,\"5734\":1,\"5801\":1,\"5963\":1,\"6714\":1,\"6893\":1,\"6946\":3,\"6955\":5,\"6969\":1}}],[\"blocking\",{\"1\":{\"7073\":2}}],[\"blockingqueue<runnable>\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"blocked\",{\"1\":{\"1856\":1,\"1867\":1,\"3857\":1,\"6011\":1,\"6232\":1}}],[\"block\",{\"1\":{\"480\":1,\"1860\":1,\"3489\":5,\"3490\":2,\"4857\":2}}],[\"broadcast\",{\"1\":{\"4582\":1,\"4593\":1,\"4629\":1,\"6166\":1,\"6172\":1}}],[\"broker2\",{\"1\":{\"1518\":1}}],[\"broker1\",{\"1\":{\"1518\":1}}],[\"broker端就可以过滤重复消息\",{\"1\":{\"1499\":1,\"4678\":1}}],[\"broker默认的消息保留策略是\",{\"1\":{\"1451\":1,\"6899\":1}}],[\"broker\",{\"1\":{\"1407\":3,\"1437\":1,\"1438\":1,\"1440\":4,\"1442\":1,\"1445\":1,\"1520\":1,\"1525\":2,\"1526\":1,\"4563\":1,\"6163\":1}}],[\"breakdown\",{\"1\":{\"4148\":1}}],[\"break\",{\"1\":{\"480\":1}}],[\"br\",{\"1\":{\"480\":9}}],[\"baomidou\",{\"1\":{\"4857\":1,\"4860\":3,\"4938\":3}}],[\"balanced\",{\"1\":{\"2759\":1,\"6428\":1}}],[\"balance机制\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"bad\",{\"1\":{\"2205\":1,\"2211\":1}}],[\"baddotrobot\",{\"1\":{\"625\":1}}],[\"banana\",{\"1\":{\"2182\":2}}],[\"bannner\",{\"1\":{\"1384\":1}}],[\"baidulandingword~default\",{\"1\":{\"1493\":1,\"2136\":1,\"6946\":1}}],[\"basepackages\",{\"1\":{\"4859\":1,\"4860\":1,\"4938\":1}}],[\"basemapper\",{\"1\":{\"4755\":1}}],[\"basemapper<user>\",{\"1\":{\"4753\":1}}],[\"basedir\",{\"1\":{\"3417\":1}}],[\"based方式的spring\",{\"1\":{\"1395\":1}}],[\"base\",{\"1\":{\"3390\":2}}],[\"bash\",{\"1\":{\"3307\":1,\"3445\":1}}],[\"basic\",{\"1\":{\"1081\":1}}],[\"basics\",{\"1\":{\"1081\":1}}],[\"batch\",{\"1\":{\"1150\":1,\"5730\":1}}],[\"backlog\",{\"1\":{\"2436\":1,\"3238\":1,\"3239\":4,\"3241\":1,\"3243\":1}}],[\"backing\",{\"1\":{\"787\":1}}],[\"backward\",{\"1\":{\"596\":1}}],[\"baz\",{\"0\":{\"164\":1,\"5272\":1},\"1\":{\"144\":1,\"162\":1,\"5257\":1,\"5270\":1}}],[\"barrier来说\",{\"1\":{\"3717\":1,\"3718\":1,\"5916\":1,\"5917\":1}}],[\"barrier即读屏障和写屏障\",{\"1\":{\"3716\":1,\"5915\":1}}],[\"barrier\",{\"1\":{\"1983\":1,\"3716\":1,\"3717\":1,\"3718\":1,\"5915\":1,\"5916\":1,\"5917\":1,\"6242\":1}}],[\"bar\",{\"0\":{\"143\":1,\"158\":1,\"5256\":1,\"5266\":1},\"1\":{\"160\":1,\"5268\":1}}],[\"相当的安全性\",{\"1\":{\"7071\":1}}],[\"相当于反对票\",{\"1\":{\"3206\":1}}],[\"相当于赞成票\",{\"1\":{\"3206\":1}}],[\"相当于信息裸奔\",{\"1\":{\"2282\":1}}],[\"相当于\",{\"1\":{\"2279\":1,\"3406\":1}}],[\"相当于这个预读工作是白做了\",{\"1\":{\"1693\":1}}],[\"相当于只是对k做了个简单的hash\",{\"1\":{\"1048\":1}}],[\"相视一笑\",{\"1\":{\"4388\":1}}],[\"相等则表示密码正确\",{\"1\":{\"5084\":1}}],[\"相等\",{\"1\":{\"4159\":1}}],[\"相等就不添加\",{\"1\":{\"737\":1}}],[\"相反\",{\"1\":{\"2045\":1,\"3314\":1,\"3827\":1,\"4117\":1,\"5750\":1}}],[\"相反的\",{\"1\":{\"1627\":1}}],[\"相加后如果信号量\",{\"1\":{\"1966\":2}}],[\"相减后如果信号量\",{\"1\":{\"1965\":2}}],[\"相信\",{\"1\":{\"1009\":1}}],[\"相信大家在\",{\"1\":{\"580\":1}}],[\"相比效率上存在天然的劣势\",{\"1\":{\"6989\":1}}],[\"相比普通索引建立的数据更小\",{\"1\":{\"2793\":1,\"6464\":1}}],[\"相比\",{\"0\":{\"2347\":1},\"1\":{\"2348\":1,\"2359\":1,\"2750\":1,\"2767\":1,\"6419\":1,\"6436\":1}}],[\"相比其他数据结构如set集合\",{\"1\":{\"2154\":1}}],[\"相比较起来\",{\"1\":{\"1615\":1}}],[\"相比于完整的二阶段提交\",{\"1\":{\"4608\":1}}],[\"相比于\",{\"1\":{\"3100\":1,\"6756\":1}}],[\"相比于非聚簇索引\",{\"1\":{\"2799\":1,\"6471\":1}}],[\"相比于之前rangeassignor的分配策略\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"相比于静态代理来说\",{\"1\":{\"893\":1,\"5511\":1}}],[\"相比treemap效率更高\",{\"1\":{\"1089\":1}}],[\"相比vector来说\",{\"1\":{\"796\":1}}],[\"相同key的value会被覆盖\",{\"1\":{\"4200\":1}}],[\"相同\",{\"1\":{\"2221\":1}}],[\"相同的\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"相同的类文件被不同的类加载器加载产生的是两个不同的类\",{\"1\":{\"451\":1,\"5344\":1}}],[\"相同二进制名称的类只会被加载一次\",{\"1\":{\"422\":1,\"5313\":1}}],[\"相对路径或绝对路径\",{\"1\":{\"3397\":1}}],[\"相对来说后者可以更加准确地判断文件内容是否被修改\",{\"1\":{\"2246\":1}}],[\"相对于\",{\"1\":{\"290\":1}}],[\"相对悠闲\",{\"1\":{\"268\":1}}],[\"相关的接口作用\",{\"1\":{\"6267\":1}}],[\"相关的方法\",{\"1\":{\"3679\":1,\"5848\":1}}],[\"相关问题\",{\"1\":{\"3179\":1,\"6837\":1}}],[\"相关代码如下所示\",{\"1\":{\"443\":1,\"5336\":1}}],[\"相关总结如下\",{\"1\":{\"195\":1}}],[\"相关信息\",{\"1\":{\"34\":1,\"741\":1,\"743\":1,\"799\":1,\"828\":1,\"832\":1,\"835\":1,\"983\":1,\"997\":1,\"1012\":1,\"1019\":1,\"1026\":1,\"1043\":1,\"1051\":1,\"1621\":1,\"1871\":1,\"5147\":1}}],[\"69916115\",{\"1\":{\"5103\":1}}],[\"6879c0ae9117b50074ce0a0d4c843060\",{\"1\":{\"5069\":1}}],[\"6网关搭建\",{\"0\":{\"4827\":1}}],[\"6五张牌\",{\"1\":{\"4356\":1}}],[\"6共享锁\",{\"0\":{\"3832\":1}}],[\"6中引入了自适应自旋锁\",{\"1\":{\"3827\":1}}],[\"6压缩与打包\",{\"0\":{\"3418\":1}}],[\"6650\",{\"1\":{\"3390\":1,\"6955\":1}}],[\"666\",{\"1\":{\"577\":1}}],[\"6解释\",{\"0\":{\"3325\":1}}],[\"60\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"600\",{\"1\":{\"2972\":3,\"6644\":3}}],[\"6000\",{\"1\":{\"1140\":1}}],[\"6字节\",{\"1\":{\"3028\":1,\"3030\":1,\"6694\":1,\"6696\":1}}],[\"6mvcc\",{\"0\":{\"3018\":1}}],[\"6非聚簇索引\",{\"0\":{\"2804\":1}}],[\"6byte\",{\"1\":{\"2787\":1,\"6456\":1}}],[\"6客户端的端口可以重复使用吗\",{\"0\":{\"2710\":1}}],[\"6第四次挥手丢失了\",{\"0\":{\"2611\":1}}],[\"6既然\",{\"0\":{\"2566\":1}}],[\"6udp\",{\"0\":{\"2479\":1}}],[\"6http\",{\"0\":{\"2259\":1}}],[\"6多级反馈队列调度算法\",{\"0\":{\"1935\":1}}],[\"6q6\",{\"0\":{\"614\":1}}],[\"6\",{\"0\":{\"687\":1,\"688\":1,\"690\":1,\"692\":1,\"701\":1,\"883\":1,\"884\":1,\"886\":1,\"889\":1,\"892\":1,\"898\":1,\"905\":1,\"913\":1,\"928\":1,\"1248\":1,\"1250\":1,\"1255\":1,\"1257\":1,\"1259\":1,\"1260\":1,\"1269\":1,\"1338\":1,\"1339\":1,\"1344\":1,\"1523\":1,\"1524\":1,\"1527\":1,\"1685\":1,\"2042\":1,\"2481\":1,\"2503\":1,\"3026\":1,\"3037\":1,\"3043\":1,\"3049\":1,\"3245\":1,\"3246\":1,\"3248\":1,\"3264\":1,\"3266\":1,\"3270\":1,\"3273\":1,\"3277\":1,\"3285\":1,\"3362\":1,\"3511\":1,\"3515\":1,\"3516\":1,\"3520\":1,\"3523\":1,\"3526\":1,\"3529\":1,\"3536\":1,\"3537\":1,\"3539\":1,\"3658\":1,\"3981\":1,\"4129\":1,\"4215\":1,\"5747\":1,\"6892\":1},\"1\":{\"491\":2,\"1027\":4,\"1062\":1,\"1205\":1,\"1409\":1,\"1442\":1,\"2022\":1,\"2143\":1,\"2497\":1,\"2748\":1,\"2794\":2,\"2821\":1,\"2993\":1,\"2994\":1,\"3082\":2,\"3153\":1,\"3180\":1,\"3498\":1,\"3504\":1,\"3527\":1,\"3553\":2,\"3554\":1,\"3558\":1,\"3559\":1,\"3566\":1,\"3596\":1,\"3600\":1,\"3604\":1,\"3608\":1,\"3609\":1,\"3629\":1,\"3674\":1,\"3772\":1,\"4135\":1,\"4285\":1,\"4293\":1,\"4320\":1,\"4330\":1,\"4344\":1,\"4353\":1,\"4364\":1,\"4375\":1,\"4386\":1,\"4402\":1,\"4433\":1,\"4447\":1,\"4455\":1,\"4851\":1,\"5378\":2,\"5557\":1,\"5842\":1,\"6361\":1,\"6417\":1,\"6465\":2,\"6493\":1,\"6665\":1,\"6666\":1,\"6733\":2,\"6809\":1,\"6838\":1,\"7110\":1,\"7118\":1,\"7145\":1,\"7155\":1,\"7169\":1,\"7240\":1}}],[\"6异常的底层\",{\"0\":{\"487\":1}}],[\"6cms\",{\"0\":{\"360\":1}}],[\"6对象的分配过程\",{\"0\":{\"260\":1}}],[\"64992\",{\"1\":{\"2712\":2}}],[\"640\",{\"1\":{\"1038\":1,\"1041\":1}}],[\"64366370\",{\"1\":{\"882\":1}}],[\"64\",{\"1\":{\"247\":1,\"250\":1,\"986\":1,\"1665\":1,\"1687\":1,\"1690\":1,\"3111\":1,\"3126\":1,\"3134\":1,\"4603\":1,\"6767\":1,\"6782\":1,\"6790\":1}}],[\"每页记录数以及其他查询条件\",{\"1\":{\"4955\":1}}],[\"每台服务都会去执行refresh定时任务方法\",{\"1\":{\"4899\":1,\"7269\":1}}],[\"每隔一段时间抽取一批\",{\"1\":{\"3174\":1,\"6832\":1}}],[\"每隔一个时间间隔\",{\"1\":{\"2635\":1}}],[\"每隔5秒消费者会自动把从poll\",{\"1\":{\"1602\":1}}],[\"每发送一次数据\",{\"1\":{\"2444\":1}}],[\"每组用冒号\",{\"1\":{\"2375\":1}}],[\"每\",{\"1\":{\"2374\":1,\"2375\":1,\"3075\":1,\"3510\":1,\"6726\":1}}],[\"每天打开一个新片段\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"每秒请求数\",{\"1\":{\"5006\":1}}],[\"每秒就\",{\"1\":{\"1427\":1}}],[\"每秒\",{\"1\":{\"1427\":1}}],[\"每秒最多处理\",{\"1\":{\"1425\":1}}],[\"每秒只能处理\",{\"1\":{\"1425\":1}}],[\"每秒有\",{\"1\":{\"1424\":1}}],[\"每当收到一个\",{\"1\":{\"2686\":1}}],[\"每当一个页面被访问时\",{\"1\":{\"1745\":1}}],[\"每当一个新业务方接入\",{\"1\":{\"1410\":1}}],[\"每当一个类加载器接收到加载请求时\",{\"1\":{\"445\":1,\"5338\":1}}],[\"每当执行接口对象的方法时\",{\"1\":{\"1128\":1,\"5709\":1}}],[\"每一个设备都会收到该分组\",{\"1\":{\"7039\":1}}],[\"每一个模块都是一个单独的系统\",{\"1\":{\"4465\":1,\"6098\":1}}],[\"每一个项目出现cpu占比过高的原因都不尽相同\",{\"1\":{\"3531\":1}}],[\"每一个queue一个consumer\",{\"1\":{\"1509\":1,\"6965\":1}}],[\"每一组分别代表对文件拥有者\",{\"1\":{\"3510\":1}}],[\"每一项工作都是以一个\",{\"1\":{\"3301\":1,\"6087\":1}}],[\"每一页的大小为\",{\"1\":{\"1656\":1}}],[\"每一次重分配的结果尽量与上一次分配结果保持一致\",{\"1\":{\"1487\":1,\"6939\":1}}],[\"每一次分配变更相对上一次分配做最少的变动\",{\"1\":{\"1485\":1,\"6937\":1}}],[\"每一次添加操作\",{\"1\":{\"630\":1}}],[\"每一行都很有意思\",{\"1\":{\"1080\":1}}],[\"每层从左到右\",{\"1\":{\"681\":1}}],[\"每添加一个元素\",{\"1\":{\"632\":1}}],[\"每次在真正消费完消息之后再自己手动提交\",{\"1\":{\"4677\":1,\"7196\":1}}],[\"每次变量更新了就把版本号加一\",{\"1\":{\"3687\":1,\"5856\":1}}],[\"每次执行堆转储\",{\"1\":{\"3572\":1}}],[\"每次构建不同的请求\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"每次快照读都会新生成一个快照和read\",{\"1\":{\"3057\":1}}],[\"每次\",{\"1\":{\"2757\":1,\"6426\":1}}],[\"每次互相发送相同的首部造成的浪费较多\",{\"1\":{\"2353\":1}}],[\"每次都要问一遍身份信息\",{\"1\":{\"2275\":1}}],[\"每次进行进程调度时\",{\"1\":{\"1920\":1}}],[\"每次从就绪队列选择最先进入队列的进程\",{\"1\":{\"1913\":1}}],[\"每次操作时都传入整个\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"每次获取时+1\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"每次新加入服务都要改一次代码\",{\"1\":{\"1413\":1}}],[\"每次客户端请求\",{\"1\":{\"1165\":1}}],[\"每次扩容都是成倍的\",{\"1\":{\"1000\":1}}],[\"每次只能一个线程持有锁\",{\"1\":{\"3636\":1,\"5877\":1}}],[\"每次只能有⼀个线程调⽤访问同步块内容\",{\"1\":{\"859\":1,\"5489\":1}}],[\"每次只读取指定长度的字节数据\",{\"1\":{\"2107\":1}}],[\"每次只使用其中一块\",{\"1\":{\"331\":1}}],[\"每次增长capacityincrement\",{\"1\":{\"802\":1}}],[\"每次晋升到老年代的对象平均大小\",{\"1\":{\"392\":1}}],[\"每次根据允许的收集时间\",{\"1\":{\"374\":1}}],[\"每次使用\",{\"1\":{\"333\":1}}],[\"每经历一次\",{\"1\":{\"258\":1}}],[\"每个请求和响应都需要独立的连接\",{\"1\":{\"7066\":1}}],[\"每个接口同样也应该具备不重复的\",{\"1\":{\"7045\":1}}],[\"每个网络设备都自己维护了一个\",{\"1\":{\"7028\":1}}],[\"每个拦截器可以处理不同的任务\",{\"1\":{\"4946\":1}}],[\"每个节点有独立的计算和存储\",{\"1\":{\"4573\":1}}],[\"每个节点的地位都是平等\",{\"1\":{\"3377\":1}}],[\"每个连接的客户端定期向服务端发送心跳包表示仍然在线\",{\"1\":{\"4217\":1}}],[\"每个thread中都具备一个threadlocalmap\",{\"1\":{\"3767\":1,\"5998\":1}}],[\"每个topic有2个分区\",{\"1\":{\"1490\":1,\"6942\":1}}],[\"每个topic4个分区\",{\"1\":{\"1476\":1,\"6926\":1}}],[\"每个topic仅需恢复一部分的数据\",{\"1\":{\"1461\":1,\"6909\":1}}],[\"每个对象中都内置了一个\",{\"1\":{\"3740\":1,\"5972\":1}}],[\"每个实例都对应有自己的一把锁\",{\"1\":{\"3731\":1}}],[\"每个线程独享的内存\",{\"1\":{\"3708\":1,\"5907\":1}}],[\"每个线程都有它自己的程序计数器\",{\"1\":{\"197\":1}}],[\"每个线程都独立计算\",{\"1\":{\"194\":1}}],[\"每个文件都仅会占用一个\",{\"1\":{\"3488\":1}}],[\"每个目录可以包含文件和其他子目录\",{\"1\":{\"3476\":1,\"5741\":1}}],[\"每个桌面环境都具有自己的外观\",{\"1\":{\"3453\":1}}],[\"每个从库的复制进度也不一定相同\",{\"1\":{\"3244\":1}}],[\"每个从库会记录自己的slave\",{\"1\":{\"3244\":1}}],[\"每个事务读到的数据版本可能是不一样的\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"每个事务都有一个完整的数据空间\",{\"1\":{\"2973\":1,\"6645\":1}}],[\"每个语句执行前\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"每个方向都需要一个\",{\"1\":{\"2601\":1}}],[\"每个方法执行\",{\"1\":{\"204\":1}}],[\"每个计算结果位置都放置一个此服务节点\",{\"1\":{\"2035\":1}}],[\"每个队列优先级从高到低\",{\"1\":{\"1937\":1,\"1940\":1}}],[\"每个进程的用户地址空间都是独立的\",{\"1\":{\"1944\":1}}],[\"每个进程被分配一个时间段\",{\"1\":{\"1924\":1}}],[\"每个进程都有一个并且唯一的标识符\",{\"1\":{\"1864\":1}}],[\"每个段又建立一张页表\",{\"1\":{\"1680\":1}}],[\"每个表\",{\"1\":{\"1664\":1}}],[\"每个消费者都订阅了相同的topic\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"每个片段包含1g或者一周的数据\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"每个端点都可以启用和禁用\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"每个单向链表往往只有一个或少数几个节点\",{\"1\":{\"955\":1}}],[\"每个元素的rehash之后\",{\"1\":{\"919\":1,\"5436\":1}}],[\"每个父类加载器都会走一遍这个流程\",{\"1\":{\"447\":1,\"5340\":1}}],[\"每个\",{\"0\":{\"6734\":1},\"1\":{\"417\":1,\"3487\":1,\"5308\":1,\"6184\":1}}],[\"每个栈帧\",{\"1\":{\"210\":1}}],[\"将该\",{\"1\":{\"7051\":1}}],[\"将把这个链路层帧\",{\"1\":{\"7050\":1}}],[\"将采用\",{\"1\":{\"7049\":1,\"7054\":1}}],[\"将构造一个\",{\"1\":{\"7037\":1}}],[\"将不得不通过\",{\"1\":{\"7035\":1}}],[\"将不同进程的虚拟地址和不同内存的物理地址映射起来\",{\"1\":{\"1629\":1}}],[\"将获取的唯一id存表\",{\"1\":{\"6954\":1}}],[\"将上面的两个因素排列组设一下\",{\"1\":{\"6327\":1}}],[\"将子对象的属性也拷贝过去\",{\"1\":{\"5110\":1}}],[\"将结果封装到一个\",{\"1\":{\"4965\":1}}],[\"将结果发给主线程中的\",{\"1\":{\"1840\":1,\"6372\":1}}],[\"将原始的查询语句包装在一个外部查询中\",{\"1\":{\"4958\":1}}],[\"将原主节点\",{\"1\":{\"3225\":1}}],[\"将带有\",{\"1\":{\"4604\":1}}],[\"将写请求\",{\"1\":{\"4597\":1,\"6181\":1}}],[\"将分布式一致性问题分解为了leader选举\",{\"1\":{\"4585\":1}}],[\"将这些任务数据添加到消费者队列中\",{\"1\":{\"4895\":1}}],[\"将这些本地proxy代理实例\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"将这个元素进行哈希操作\",{\"1\":{\"2149\":1}}],[\"将这个值与topic可用的partition数取余得到partition值\",{\"1\":{\"1465\":1,\"6913\":1}}],[\"将这个类标志成\",{\"1\":{\"597\":1}}],[\"将以java注解的方式定义的远程调用api接口\",{\"1\":{\"4536\":1,\"6151\":1}}],[\"将事物分成多阶段提交\",{\"1\":{\"4484\":1,\"6117\":1}}],[\"将复杂的业务简单化\",{\"1\":{\"4476\":1,\"6109\":1}}],[\"将get请求映射到特定处理程序的方法注解\",{\"1\":{\"4123\":1}}],[\"将post请求映射到特定处理程序的方法注解\",{\"1\":{\"4123\":1}}],[\"将请求模板化\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"将请求映射到控制器的处理方法上\",{\"1\":{\"4123\":1}}],[\"将请求消息\",{\"1\":{\"1200\":1,\"5552\":1}}],[\"将war包上传到云服务器的webapps目录\",{\"1\":{\"4082\":1}}],[\"将一个数据库进行拆分\",{\"1\":{\"4820\":1,\"4967\":1}}],[\"将一个完整的系统拆分成很多个服务\",{\"1\":{\"4485\":1,\"6118\":1}}],[\"将一个复杂的业务拆分为若干小的业务\",{\"1\":{\"4476\":1,\"6109\":1}}],[\"将一个命令的标准输出作为另一个命令的标准输入\",{\"1\":{\"3421\":1}}],[\"将一些通用能力如日志\",{\"1\":{\"4018\":1}}],[\"将对外提供的开放api拆分为独立服务\",{\"1\":{\"4017\":1}}],[\"将对象转换为指定的响应信息\",{\"1\":{\"1200\":1,\"5552\":1}}],[\"将返回线程池进行复用\",{\"1\":{\"3903\":1,\"6050\":1}}],[\"将线程池里的线程状态设置成stop状态\",{\"1\":{\"3894\":1}}],[\"将线程池里的线程状态设置成shutdown状态\",{\"1\":{\"3892\":1}}],[\"将线程的\",{\"1\":{\"3556\":1}}],[\"将抛出\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"将轻量级锁升级为重量级锁\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"将需要存储的值放入到这个哈希表中\",{\"1\":{\"3765\":1,\"5996\":1}}],[\"将锁计数器设为\",{\"1\":{\"3743\":1,\"5975\":1}}],[\"将多个变量操作合成一个变量操作\",{\"1\":{\"3697\":1,\"5866\":1}}],[\"将内存地址\",{\"1\":{\"3674\":1,\"5842\":1}}],[\"将内存划分为大小相等的两块\",{\"1\":{\"331\":1}}],[\"将管道文件关闭\",{\"1\":{\"3468\":1}}],[\"将所有指令列出\",{\"1\":{\"3417\":1}}],[\"将所有处于就绪状态的进程链在一起\",{\"1\":{\"1874\":1}}],[\"将暂存区和工作目录回到上一次提交之后的状态\",{\"1\":{\"3345\":1}}],[\"将下载镜像以\",{\"1\":{\"3302\":1,\"6088\":1}}],[\"将其他相关资源一并推送给客户端\",{\"1\":{\"7069\":1}}],[\"将其缓存为空值\",{\"1\":{\"4153\":1}}],[\"将其导出到另一个文件\",{\"1\":{\"3625\":1}}],[\"将其导出到某个文件中\",{\"1\":{\"3625\":1}}],[\"将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期\",{\"1\":{\"3268\":1,\"6873\":1}}],[\"将其添加到布隆过滤器中\",{\"1\":{\"2188\":1}}],[\"将从节点slave\",{\"1\":{\"3223\":1}}],[\"将slave\",{\"1\":{\"3222\":1}}],[\"将sql处理成数据库能识别的分页查询\",{\"1\":{\"1114\":1}}],[\"将成为领导者\",{\"1\":{\"3210\":1}}],[\"将阻塞直到写入磁盘完成后返回\",{\"1\":{\"3162\":1,\"6818\":1}}],[\"将敏感字符进行转义\",{\"1\":{\"3061\":1,\"6712\":1}}],[\"将当前系统活跃的其他事务记录起来\",{\"1\":{\"3055\":1}}],[\"将当前未提交事务\",{\"1\":{\"3035\":1,\"6702\":1}}],[\"将dump文件下载到本地\",{\"1\":{\"2126\":1}}],[\"将文件字节数组放到\",{\"1\":{\"2100\":1}}],[\"将数据保存在内存中\",{\"1\":{\"4561\":1,\"6161\":1}}],[\"将数据映射到哈希环上\",{\"1\":{\"2026\":1}}],[\"将数据key使用相同的函数hash计算出哈希值\",{\"1\":{\"2018\":1}}],[\"将hash后的结果对缓存服务器的数量进行取模操作\",{\"1\":{\"2007\":1}}],[\"将新的连接分配给某个子线程\",{\"1\":{\"1843\":1,\"6385\":1}}],[\"将磁盘上的数据拷贝到内核缓冲区里\",{\"1\":{\"1803\":1,\"6309\":1}}],[\"将此序号填入\",{\"1\":{\"2528\":1}}],[\"将此序号置于\",{\"1\":{\"2527\":1}}],[\"将此\",{\"1\":{\"1768\":1}}],[\"将已连接的\",{\"1\":{\"1768\":1}}],[\"将页表\",{\"1\":{\"1664\":1}}],[\"将会自动创建一个\",{\"1\":{\"2787\":1,\"6456\":1}}],[\"将会提交poll返回的最新的偏移量\",{\"1\":{\"1608\":1}}],[\"将会抛出concurrentmodificationexception\",{\"1\":{\"945\":1}}],[\"将key的hash值与topic的partition数进行取余得到partition值\",{\"1\":{\"1464\":1,\"6912\":1}}],[\"将如何处理\",{\"1\":{\"1455\":1,\"6903\":1}}],[\"将消息赋予一个全局唯一的\",{\"1\":{\"4603\":1}}],[\"将消息持久化到存储系统\",{\"1\":{\"2048\":1,\"5753\":1}}],[\"将消息分类\",{\"1\":{\"1441\":1}}],[\"将消息队列用在日志处理中\",{\"1\":{\"1410\":1}}],[\"将重新启动\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"将渲染结果返回给客户端\",{\"1\":{\"1207\":1,\"5559\":1}}],[\"将字符串转换成格式化数字或格式化日期等\",{\"1\":{\"1202\":1,\"5554\":1}}],[\"将字节码翻译成底层系统指令\",{\"1\":{\"181\":1,\"5290\":1}}],[\"将帮你做一些额外的工作\",{\"1\":{\"1199\":1,\"5551\":1}}],[\"将得到视图对象返回给用户\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"将触发\",{\"1\":{\"1186\":1}}],[\"将调用该方法对\",{\"1\":{\"1188\":1}}],[\"将调用该接口的初始化方法\",{\"1\":{\"1185\":1}}],[\"将调用该接口的预初始化方法\",{\"1\":{\"1182\":1}}],[\"将调用\",{\"1\":{\"1183\":1}}],[\"将⽣产任务交给不同的派⽣类⼯⼚\",{\"1\":{\"867\":1,\"5497\":1}}],[\"将在新的\",{\"1\":{\"596\":1}}],[\"将搜索类或资源的任务委托给其父类加载器\",{\"1\":{\"441\":1,\"5333\":1}}],[\"将\",{\"1\":{\"333\":1,\"606\":1,\"3161\":1,\"3652\":1,\"5078\":1,\"5895\":1,\"6817\":1}}],[\"将存活的对象进行标记\",{\"1\":{\"324\":1}}],[\"将伊甸园区中的不再被其他对象所引用的对象进行销毁\",{\"1\":{\"263\":1}}],[\"将执行新生代的垃圾回收\",{\"1\":{\"256\":1}}],[\"+heapdumponoutofmemoryerror\",{\"1\":{\"3569\":1,\"3572\":1}}],[\"+e\",{\"1\":{\"1610\":1,\"1613\":1,\"1617\":1}}],[\"+metadata\",{\"1\":{\"1518\":2}}],[\"+maxmemory\",{\"1\":{\"250\":1}}],[\"+=\",{\"1\":{\"1062\":3,\"4999\":4}}],[\"++i\",{\"1\":{\"3772\":1}}],[\"++\",{\"1\":{\"486\":1}}],[\"+1层\",{\"1\":{\"681\":1}}],[\"+1\",{\"1\":{\"257\":1,\"3819\":1,\"3897\":1,\"5937\":1,\"6044\":1}}],[\"+\",{\"0\":{\"1785\":1,\"4449\":1,\"6289\":1},\"1\":{\"250\":6,\"551\":1,\"634\":2,\"801\":1,\"802\":1,\"812\":4,\"816\":2,\"975\":2,\"980\":3,\"993\":8,\"1044\":1,\"1062\":1,\"1380\":1,\"1417\":4,\"1474\":4,\"1518\":2,\"1613\":1,\"1617\":1,\"1625\":1,\"1783\":1,\"2262\":1,\"2528\":1,\"2529\":1,\"2543\":1,\"2544\":2,\"2578\":1,\"2584\":1,\"2703\":1,\"2778\":2,\"2780\":1,\"2946\":1,\"2956\":1,\"3051\":1,\"3115\":1,\"3374\":1,\"3411\":2,\"3772\":1,\"4654\":10,\"4809\":1,\"4857\":5,\"4895\":6,\"4910\":1,\"4999\":5,\"5429\":1,\"6286\":1,\"6447\":2,\"6449\":1,\"6618\":1,\"6628\":1,\"6771\":1,\"6923\":4,\"7173\":10,\"7206\":1}}],[\"+initalmemory\",{\"1\":{\"250\":1}}],[\"返回错误\",{\"1\":{\"6279\":1}}],[\"返回错误信息\",{\"1\":{\"4528\":1,\"6145\":1}}],[\"返回时\",{\"1\":{\"6270\":1}}],[\"返回结果\",{\"1\":{\"4964\":1}}],[\"返回结果小于等于maximumpoolsize\",{\"1\":{\"3927\":1}}],[\"返回结果少于gettaskcount\",{\"1\":{\"3926\":1}}],[\"返回线程池对象的弊端如下\",{\"1\":{\"3910\":1,\"6057\":1}}],[\"返回true\",{\"1\":{\"3894\":2}}],[\"返回值是实际复制数据的长度\",{\"1\":{\"1798\":1,\"6303\":1}}],[\"返回值为void\",{\"1\":{\"1375\":1}}],[\"返回数据时\",{\"1\":{\"1517\":1}}],[\"返回业务异常信息\",{\"1\":{\"1330\":1}}],[\"返回给从库\",{\"1\":{\"3233\":1}}],[\"返回给用户统一的错误响应\",{\"1\":{\"1322\":1}}],[\"返回给dispatcherservlet\",{\"1\":{\"1205\":1,\"5557\":1}}],[\"返回一个\",{\"1\":{\"1204\":1,\"5556\":1}}],[\"返回一个视图对象\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"返回容易处理的分页对象\",{\"1\":{\"1107\":1}}],[\"返回\",{\"1\":{\"250\":2,\"486\":2}}],[\"返回顶部按钮\",{\"1\":{\"22\":1,\"139\":1,\"5135\":1,\"5252\":1}}],[\"默认循环10次\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"默认使用非公平锁\",{\"1\":{\"3788\":1,\"5799\":1}}],[\"默认使用的是\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"默认使用的\",{\"1\":{\"2737\":1,\"6406\":1}}],[\"默认\",{\"1\":{\"3322\":1,\"5017\":2}}],[\"默认的文件名是\",{\"1\":{\"3157\":1,\"6813\":1}}],[\"默认的触发模式是水平触发\",{\"1\":{\"1780\":1,\"6281\":1}}],[\"默认选项\",{\"1\":{\"3151\":1,\"6807\":1}}],[\"默认为行级锁\",{\"1\":{\"2733\":1,\"6402\":1}}],[\"默认情况都会丢弃报文\",{\"1\":{\"2587\":1}}],[\"默认情况下也是非公平的\",{\"1\":{\"3782\":1,\"5793\":1}}],[\"默认情况下这两个变量都是\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"默认情况下是按照cpu的使用率倒叙排序\",{\"1\":{\"3517\":1}}],[\"默认情况下hashmap的容量是16\",{\"1\":{\"982\":1}}],[\"默认情况下arraylist的初始容量非常小\",{\"1\":{\"783\":1}}],[\"默认情况下\",{\"1\":{\"247\":1,\"248\":1,\"978\":1,\"991\":1,\"1454\":1,\"1562\":1,\"1566\":1,\"3153\":1,\"6809\":1,\"6902\":1}}],[\"默认端口号是\",{\"1\":{\"2308\":2}}],[\"默认最大值为\",{\"1\":{\"1770\":1}}],[\"默认静态资源处理器\",{\"1\":{\"1398\":1}}],[\"默认变量\",{\"1\":{\"1383\":1}}],[\"默认都是有parent的\",{\"1\":{\"1353\":1,\"5678\":1}}],[\"默认都是单例的\",{\"1\":{\"1211\":1,\"5563\":1}}],[\"默认spring\",{\"1\":{\"1291\":1,\"5632\":1}}],[\"默认采用的持久化方式\",{\"1\":{\"3146\":1,\"6802\":1}}],[\"默认采用的\",{\"1\":{\"1231\":2,\"5583\":2}}],[\"默认没有开启二级缓存\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"默认开启\",{\"1\":{\"4070\":1}}],[\"默认开启一级缓存\",{\"1\":{\"1134\":1,\"5713\":1}}],[\"默认开启的线程数量与\",{\"1\":{\"352\":1}}],[\"默认值\",{\"1\":{\"1557\":1,\"1715\":1,\"3111\":2,\"3119\":1,\"3126\":2,\"6767\":2,\"6775\":1,\"6782\":2}}],[\"默认值是16\",{\"1\":{\"1000\":1}}],[\"默认值为0\",{\"1\":{\"990\":1}}],[\"默认容量是16\",{\"1\":{\"971\":1}}],[\"默认初始容量和扩容机制\",{\"1\":{\"939\":1}}],[\"默认实现是空方法\",{\"1\":{\"432\":1,\"5323\":1}}],[\"默认是非公平锁\",{\"1\":{\"3845\":1,\"5962\":1}}],[\"默认是\",{\"1\":{\"267\":1,\"3413\":1,\"7076\":2}}],[\"默认比例是8\",{\"1\":{\"230\":1}}],[\"其对查询性能的影响也就越大\",{\"1\":{\"6741\":1}}],[\"其架构图主要包含\",{\"1\":{\"3983\":1}}],[\"其写锁是独享锁\",{\"1\":{\"3834\":1,\"5950\":1}}],[\"其读锁是共享锁\",{\"1\":{\"3834\":1,\"5950\":1}}],[\"其余所有等待获取该锁的线程都会处于阻塞状态\",{\"1\":{\"3808\":1,\"5819\":1}}],[\"其余的结点可分为m\",{\"1\":{\"647\":1}}],[\"其余的类加载器都应有自己的父类加载器\",{\"1\":{\"440\":1,\"5332\":1}}],[\"其数据流不受影响\",{\"1\":{\"7073\":1}}],[\"其数据结构如下\",{\"1\":{\"3645\":1,\"5887\":1}}],[\"其数据文件本身就是索引文件\",{\"1\":{\"2750\":1,\"2767\":1,\"6419\":1,\"6436\":1}}],[\"其特点是没有中间环节\",{\"1\":{\"3471\":1}}],[\"其仅通过一个dockerdaemon\",{\"1\":{\"3312\":1}}],[\"其内容在构建之后也不会被改变\",{\"1\":{\"3294\":1}}],[\"其效率大于索引合并\",{\"1\":{\"2782\":1,\"6451\":1}}],[\"其本质可以看成是一种排序好的数据结构\",{\"1\":{\"2752\":1,\"6421\":1}}],[\"其本质上也是一种异步发送的方式\",{\"1\":{\"1514\":1}}],[\"其表数据文件本身就是按\",{\"1\":{\"2750\":1,\"2767\":1,\"6419\":1,\"6436\":1}}],[\"其理论值计算公式如下\",{\"1\":{\"2475\":1}}],[\"其间交互了什么\",{\"0\":{\"2310\":1}}],[\"其次把\",{\"1\":{\"2528\":1}}],[\"其次\",{\"1\":{\"1800\":1,\"2529\":1,\"6305\":1}}],[\"其附近的存储单元也将被访问\",{\"1\":{\"1622\":1}}],[\"其目的是不同的客户端可以为不同的目的重用\",{\"1\":{\"4554\":1}}],[\"其目的是为了能够在垃圾回收机制清理完堆区后不再需要重新分隔计算堆的大小\",{\"1\":{\"246\":1}}],[\"其目标有两点\",{\"1\":{\"1485\":1,\"6937\":1}}],[\"其原理主要包含以下四点\",{\"1\":{\"1296\":1}}],[\"其作用域是\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"其主要目的也是为了把高位和低位组合在一起\",{\"1\":{\"1063\":1}}],[\"其主要被以下方法引用\",{\"1\":{\"1007\":1}}],[\"其定义了产品的⽣产接⼝\",{\"1\":{\"867\":1,\"5497\":1}}],[\"其实它们的区别还是很好理解的\",{\"1\":{\"6273\":1}}],[\"其实主要就是\",{\"1\":{\"6196\":1}}],[\"其实并不是真正的破解\",{\"1\":{\"5036\":1}}],[\"其实和初始化选举差不多\",{\"1\":{\"4618\":1,\"6191\":1}}],[\"其实例及元数据的数据库\",{\"1\":{\"4556\":1}}],[\"其实java线程池的实现原理很简单\",{\"1\":{\"3886\":1}}],[\"其实内部实现就是调用\",{\"1\":{\"3774\":1}}],[\"其实泄露的并不严重\",{\"1\":{\"3773\":1}}],[\"其实他们之间差别还是很大的\",{\"1\":{\"2150\":1}}],[\"其实整体处理过程类似\",{\"1\":{\"1283\":1,\"5625\":1}}],[\"其实我们在前面分析源码时也提到过\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"其实只有一级缓存并不是不能解决循环依赖\",{\"1\":{\"1272\":1,\"5614\":1}}],[\"其实就是通过cas修改对象头里的锁标志位\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"其实就是\",{\"1\":{\"1228\":1,\"5580\":1}}],[\"其实就是将数组和链表组合在一起\",{\"1\":{\"1004\":1}}],[\"其实基本原理就是这个\",{\"1\":{\"1011\":1}}],[\"其实简单\",{\"1\":{\"1011\":1}}],[\"其实\",{\"1\":{\"988\":1,\"1017\":1,\"1044\":1,\"1050\":1,\"1954\":1,\"3359\":1,\"5096\":1}}],[\"其实很简单\",{\"1\":{\"859\":1,\"5489\":1}}],[\"其实synchronizedlist有一个构造函数可以传入一个object\",{\"1\":{\"841\":1}}],[\"其实背后的原理也很简单\",{\"1\":{\"481\":1}}],[\"其大小将会动态地增长\",{\"1\":{\"777\":1}}],[\"其他角色都没有得到更新吧\",{\"1\":{\"6180\":1}}],[\"其他\",{\"1\":{\"5692\":1}}],[\"其他依赖\",{\"1\":{\"4867\":1}}],[\"其他节点的读写操作正常的话\",{\"1\":{\"4649\":1,\"6222\":1}}],[\"其他均为\",{\"1\":{\"4586\":1}}],[\"其他地方的工作不考虑吗\",{\"1\":{\"4364\":1}}],[\"其他都是了解\",{\"1\":{\"4289\":1,\"7114\":1}}],[\"其他用户长时间无法访问\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"其他的线程都会阻塞\",{\"1\":{\"3841\":1,\"5957\":1}}],[\"其他的线程进入后就会阻塞等待锁\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"其他的exception类及其子类都属于可查异常\",{\"1\":{\"466\":1,\"5361\":1}}],[\"其他进程也访问该资源\",{\"1\":{\"3462\":1}}],[\"其他人就可以进入了\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"其他人\",{\"1\":{\"3411\":1}}],[\"其他类似于svn是集中式版本控制系统\",{\"1\":{\"3376\":1}}],[\"其他哨兵会根据自己和主库的连接情况\",{\"1\":{\"3206\":1}}],[\"其他事务既不可以对该记录加\",{\"1\":{\"2950\":1,\"6622\":1}}],[\"其他事务也可以继续对该记录加\",{\"1\":{\"2949\":1,\"6621\":1}}],[\"其他事务的如果要向该表插入语句都会被阻塞\",{\"1\":{\"2923\":1,\"6595\":1}}],[\"其他内节点只存放\",{\"1\":{\"2762\":1,\"6431\":1}}],[\"其他阻塞\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"其他线程才有机会操作共享数据\",{\"1\":{\"6375\":1}}],[\"其他线程处于阻塞状态\",{\"1\":{\"3829\":1,\"5945\":1}}],[\"其他线程可以尝试获取锁\",{\"1\":{\"3743\":1,\"5975\":1}}],[\"其他线程调用了该对象的start\",{\"1\":{\"1854\":1,\"6230\":1}}],[\"其他线程获取锁后就会被空判断拦截\",{\"1\":{\"859\":1,\"5489\":1}}],[\"其他机器上的\",{\"1\":{\"1526\":1}}],[\"其他情况\",{\"1\":{\"1246\":1,\"5598\":1}}],[\"其他没有特定顺序\",{\"1\":{\"770\":1}}],[\"其右孩子是结点2i＋1\",{\"1\":{\"684\":1}}],[\"其左孩子是结点2i\",{\"1\":{\"683\":1}}],[\"其中源\",{\"1\":{\"7050\":2}}],[\"其中一个密钥叫公开密钥\",{\"1\":{\"5094\":1}}],[\"其中高32位表示\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"其中haseset用来保证数据唯一\",{\"1\":{\"4126\":1}}],[\"其中head指向最新放入仓库的版本\",{\"1\":{\"3335\":1}}],[\"其中包含我们需要运行以构建\",{\"1\":{\"3316\":1}}],[\"其中app+bins\",{\"1\":{\"3311\":1,\"3312\":1}}],[\"其中比较简单的方式用\",{\"1\":{\"2277\":1}}],[\"其中在实际运行中最常见的就是堆内存溢出\",{\"1\":{\"2116\":1}}],[\"其中橘黄色的点表示图片\",{\"1\":{\"2027\":1}}],[\"其中最关键的就是\",{\"1\":{\"1298\":1}}],[\"其中的主要代码部分如下\",{\"1\":{\"1034\":1}}],[\"其中定义了一个final\",{\"1\":{\"1007\":1}}],[\"其中⼀个线程获取锁\",{\"1\":{\"859\":1,\"5489\":1}}],[\"其中有属性name和age\",{\"1\":{\"4272\":1}}],[\"其中有一个是我们本文主要关注的\",{\"1\":{\"961\":1}}],[\"其中有一些会随着虚拟机启动而创建\",{\"1\":{\"185\":1}}],[\"其中有listiterator和\",{\"1\":{\"842\":1}}],[\"其中每个子集又是一棵树\",{\"1\":{\"647\":1}}],[\"其中\",{\"1\":{\"409\":1,\"1005\":1,\"1430\":1,\"1821\":1,\"2092\":1,\"3199\":1,\"3451\":1,\"3609\":1,\"3737\":1,\"3750\":1,\"4549\":1,\"4596\":1,\"5298\":1,\"5969\":1,\"5982\":1,\"6169\":1,\"6332\":1,\"6350\":1,\"7028\":1}}],[\"其它都是api\",{\"1\":{\"4291\":1,\"7116\":1}}],[\"其它的运行所需资源都已全部获得\",{\"1\":{\"1854\":1,\"6230\":1}}],[\"其它收集器进行收集的范围都是整个新生代或者老年代\",{\"1\":{\"373\":1}}],[\"其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间\",{\"1\":{\"355\":1}}],[\"其它垃圾收集器都是以串行的方式执行\",{\"1\":{\"343\":1}}],[\"目前支持模块的动态装卸\",{\"1\":{\"3435\":1}}],[\"目前出现过的最大的事务\",{\"1\":{\"3033\":1,\"6700\":1}}],[\"目前只有\",{\"1\":{\"2773\":1,\"2783\":1,\"6442\":1,\"6452\":1}}],[\"目前大部分数据库系统及文件系统都采用\",{\"1\":{\"2760\":1,\"6429\":1}}],[\"目标接口接收到了主机\",{\"1\":{\"7051\":1}}],[\"目标路由器指的是\",{\"1\":{\"7048\":1}}],[\"目标\",{\"1\":{\"7041\":1,\"7055\":1}}],[\"目标主机收到后\",{\"1\":{\"2501\":1,\"2502\":1}}],[\"目标对象和代理对象都要进行修改\",{\"1\":{\"890\":1,\"5508\":1}}],[\"目的\",{\"1\":{\"7050\":2}}],[\"目的就是尽量使得明文密码的复杂度增加一些\",{\"1\":{\"5054\":1}}],[\"目的就是选举出一个controller\",{\"1\":{\"4564\":1}}],[\"目的ip地址\",{\"1\":{\"2712\":1}}],[\"目的端口\",{\"1\":{\"2471\":1,\"2712\":1}}],[\"目的地址\",{\"1\":{\"2470\":1}}],[\"目的是保证对于提交的任务\",{\"1\":{\"3879\":1,\"6034\":1}}],[\"目的是消除冲突\",{\"1\":{\"3342\":1}}],[\"目的是为了解决可重复读隔离级别下幻读的现象\",{\"1\":{\"2952\":1,\"6624\":1}}],[\"目的是告诉我们有数据需要读取\",{\"1\":{\"1779\":1,\"6275\":1}}],[\"目的是在执行一次新的分配时\",{\"1\":{\"1485\":1,\"6937\":1}}],[\"目的应该是与\",{\"1\":{\"240\":1,\"280\":1}}],[\"目录树由根目录\",{\"1\":{\"3476\":1,\"5741\":1}}],[\"目录结构\",{\"0\":{\"3475\":1,\"5740\":1}}],[\"目录名称\",{\"1\":{\"3399\":1,\"3401\":1}}],[\"目录的信息就是其中包含的文件\",{\"1\":{\"3394\":1}}],[\"目录下的\",{\"1\":{\"426\":1,\"3334\":1,\"5317\":1}}],[\"目录\",{\"0\":{\"4\":1,\"5117\":1},\"1\":{\"3419\":2,\"3507\":1}}],[\"nx\",{\"1\":{\"4910\":1}}],[\"nx|xx\",{\"1\":{\"4910\":1}}],[\"n个结点的情况下\",{\"1\":{\"4589\":1}}],[\"nginx\",{\"1\":{\"4141\":1,\"6339\":1}}],[\"nginx怎么样做到同一个用户发的请求可以命中同一个服务器\",{\"0\":{\"4140\":1}}],[\"n+1\",{\"1\":{\"3897\":1,\"4609\":1,\"6044\":1}}],[\"nid=0x531\",{\"1\":{\"3560\":1}}],[\"nid=0x344c\",{\"1\":{\"3527\":1}}],[\"nid=0x3442\",{\"1\":{\"3527\":1}}],[\"nid=0x3441\",{\"1\":{\"3527\":1}}],[\"nid=0x3440\",{\"1\":{\"3527\":1}}],[\"nid=0x3443\",{\"1\":{\"3527\":1}}],[\"nid=0x343f\",{\"1\":{\"3527\":1}}],[\"nid=0x343e\",{\"1\":{\"3527\":1}}],[\"nid=0x343d\",{\"1\":{\"3527\":1}}],[\"nid=0x343c\",{\"1\":{\"3527\":1}}],[\"nid=0x343b\",{\"1\":{\"3527\":1}}],[\"nid=0x343a\",{\"1\":{\"3527\":1}}],[\"nio\",{\"1\":{\"1811\":1,\"3527\":3,\"6318\":1}}],[\"npe\",{\"1\":{\"1273\":1,\"5615\":1}}],[\"number\",{\"1\":{\"3032\":2,\"3415\":1,\"3857\":3,\"3925\":1,\"3926\":1,\"3927\":1,\"3928\":1,\"3929\":1,\"4187\":1,\"6011\":3,\"6698\":2}}],[\"numpartitionsperconsumer\",{\"1\":{\"1474\":3,\"6923\":3}}],[\"numpartitionsfortopic\",{\"1\":{\"1474\":5,\"6923\":5}}],[\"numpartitions\",{\"1\":{\"1466\":3,\"6914\":3}}],[\"nummoved\",{\"1\":{\"824\":3,\"826\":3}}],[\"nullpointerexception\",{\"1\":{\"3857\":2,\"6011\":2}}],[\"null值\",{\"1\":{\"735\":1,\"736\":1}}],[\"null节点的父节点在红黑树里不将其看作叶子节点\",{\"1\":{\"696\":1,\"5463\":1}}],[\"null\",{\"1\":{\"425\":1,\"444\":4,\"480\":6,\"507\":1,\"824\":1,\"826\":1,\"858\":4,\"859\":1,\"1068\":1,\"1466\":3,\"1474\":1,\"1521\":1,\"1547\":1,\"2188\":2,\"2778\":1,\"2780\":1,\"2786\":1,\"2787\":1,\"2791\":1,\"2792\":1,\"2824\":4,\"3762\":2,\"3763\":1,\"3765\":3,\"3775\":1,\"3857\":6,\"4152\":1,\"4153\":1,\"4857\":7,\"4910\":2,\"4979\":4,\"4999\":6,\"5316\":1,\"5337\":4,\"5395\":1,\"5488\":4,\"5489\":1,\"5993\":2,\"5994\":1,\"5996\":1,\"6011\":6,\"6447\":1,\"6449\":1,\"6455\":1,\"6456\":1,\"6462\":1,\"6463\":1,\"6496\":4,\"6914\":3,\"6923\":1}}],[\"n为奇数\",{\"1\":{\"4589\":1}}],[\"n为哈希函数的个数\",{\"1\":{\"2152\":1}}],[\"n为节点数\",{\"1\":{\"1086\":1}}],[\"n为数组内容长度\",{\"1\":{\"748\":1}}],[\"n为元素个数\",{\"1\":{\"722\":1}}],[\"n>=0\",{\"1\":{\"645\":1}}],[\"now\",{\"1\":{\"4999\":1}}],[\"nohup\",{\"1\":{\"4084\":1}}],[\"no\",{\"1\":{\"1466\":1,\"2197\":1,\"3032\":1,\"3186\":1,\"3222\":1,\"6698\":1,\"6844\":1,\"6914\":1}}],[\"notification\",{\"1\":{\"3198\":1}}],[\"notify等方法\",{\"1\":{\"3741\":1,\"5973\":1}}],[\"notify等方法也依赖于monitor对象\",{\"1\":{\"3741\":1,\"5973\":1}}],[\"notify\",{\"1\":{\"1984\":1,\"6243\":1}}],[\"not\",{\"1\":{\"1244\":1,\"2203\":1,\"2207\":1,\"2210\":1,\"2256\":1,\"4903\":1,\"4979\":1,\"5596\":1,\"7273\":1}}],[\"node\",{\"1\":{\"632\":1,\"3643\":1,\"3649\":3,\"5884\":1,\"5892\":3}}],[\"nonfairsync\",{\"1\":{\"3787\":1,\"3789\":1,\"5798\":1,\"5800\":1}}],[\"none\",{\"1\":{\"1493\":1,\"2136\":1,\"2243\":1,\"2245\":2,\"2253\":1,\"2255\":1,\"3390\":2,\"6946\":1,\"6955\":2,\"7063\":1}}],[\"non\",{\"1\":{\"240\":1,\"280\":1,\"1466\":1,\"2805\":1,\"6477\":1,\"6914\":1}}],[\"nextindex\",{\"1\":{\"3775\":1}}],[\"nextint\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"next\",{\"0\":{\"6627\":1},\"1\":{\"2737\":1,\"2946\":1,\"2956\":1,\"2957\":1,\"2958\":3,\"2959\":2,\"2962\":1,\"3013\":3,\"3643\":1,\"3645\":1,\"5884\":1,\"5887\":1,\"6406\":1,\"6618\":1,\"6628\":1,\"6629\":1,\"6630\":3,\"6631\":2,\"6634\":1,\"6685\":3}}],[\"nextvalue\",{\"1\":{\"1466\":5,\"6914\":5}}],[\"nested\",{\"1\":{\"1247\":1,\"5599\":1}}],[\"never\",{\"1\":{\"1245\":1,\"5597\":1}}],[\"netty\",{\"1\":{\"6338\":1}}],[\"network\",{\"0\":{\"7295\":1},\"1\":{\"6283\":1,\"6392\":1}}],[\"networkdriver\",{\"1\":{\"3303\":1,\"3305\":1,\"6089\":1,\"6091\":1}}],[\"netstat\",{\"1\":{\"2534\":1,\"3426\":1,\"3458\":1}}],[\"net\",{\"1\":{\"553\":1,\"640\":1,\"686\":1,\"882\":1,\"918\":1,\"947\":1,\"1119\":1,\"1153\":1,\"1393\":1,\"1493\":1,\"1511\":1,\"2036\":1,\"2136\":1,\"2189\":1,\"2627\":2,\"3059\":1,\"3063\":1,\"3390\":1,\"3790\":1,\"3846\":1,\"4756\":1,\"4857\":1,\"5103\":2,\"5115\":1,\"5347\":1,\"5430\":1,\"5435\":1,\"5701\":1,\"5734\":1,\"5801\":1,\"5963\":1,\"6714\":1,\"6893\":1,\"6946\":1,\"6955\":1,\"6969\":1}}],[\"news\",{\"1\":{\"4979\":1,\"4981\":1}}],[\"newline\",{\"1\":{\"3527\":1}}],[\"newproxyinstance\",{\"1\":{\"900\":1,\"901\":1,\"904\":1,\"3977\":1,\"5518\":1,\"5519\":1,\"5522\":1}}],[\"newcapacity\",{\"1\":{\"801\":1,\"802\":1}}],[\"newinstance\",{\"1\":{\"513\":1,\"527\":1,\"528\":2,\"530\":2,\"531\":1,\"532\":1,\"5401\":1,\"5415\":1,\"5416\":2,\"5418\":2,\"5419\":1,\"5420\":1}}],[\"new\",{\"1\":{\"262\":1,\"311\":1,\"475\":1,\"478\":2,\"480\":2,\"486\":1,\"503\":1,\"505\":1,\"507\":2,\"521\":1,\"570\":1,\"577\":1,\"601\":1,\"604\":2,\"632\":1,\"634\":2,\"787\":1,\"808\":2,\"812\":1,\"816\":1,\"826\":1,\"854\":1,\"858\":2,\"975\":1,\"980\":3,\"993\":1,\"1131\":2,\"1243\":1,\"1256\":3,\"1325\":2,\"1327\":1,\"1329\":1,\"1380\":1,\"1466\":1,\"1474\":2,\"1515\":1,\"1518\":3,\"1521\":1,\"1547\":1,\"1613\":1,\"1853\":1,\"1867\":1,\"2096\":3,\"2111\":3,\"2177\":1,\"2185\":1,\"3772\":6,\"3789\":2,\"3855\":14,\"3857\":5,\"3965\":1,\"3967\":1,\"3977\":3,\"4750\":1,\"4857\":9,\"4860\":2,\"4938\":2,\"4979\":1,\"4984\":1,\"4986\":1,\"4999\":2,\"5370\":1,\"5373\":2,\"5390\":1,\"5393\":1,\"5395\":2,\"5409\":1,\"5484\":1,\"5488\":2,\"5595\":1,\"5608\":3,\"5800\":2,\"6009\":14,\"6011\":5,\"6229\":1,\"6914\":1,\"6923\":2}}],[\"nacos作为项目中的注册中心和配置中心\",{\"1\":{\"4660\":1,\"7179\":1}}],[\"nacos\",{\"0\":{\"4550\":1},\"1\":{\"4554\":1,\"4648\":1,\"6221\":1}}],[\"nacos做\",{\"1\":{\"4184\":1}}],[\"nacos和gateway怎么用的\",{\"0\":{\"4183\":1}}],[\"napt\",{\"1\":{\"2534\":1}}],[\"nanotime\",{\"1\":{\"444\":2,\"5337\":2}}],[\"name>\",{\"1\":{\"3319\":1}}],[\"named\",{\"1\":{\"1970\":1,\"3461\":1,\"6251\":1}}],[\"namespace=\",{\"1\":{\"4748\":1}}],[\"namespace\",{\"1\":{\"1097\":1,\"1136\":2,\"3290\":1,\"5715\":2,\"6079\":1}}],[\"name\",{\"1\":{\"431\":2,\"432\":1,\"434\":1,\"435\":2,\"444\":6,\"536\":1,\"538\":1,\"541\":1,\"543\":1,\"2815\":2,\"2838\":2,\"3417\":1,\"4073\":1,\"4074\":1,\"4910\":5,\"5322\":2,\"5323\":1,\"5325\":1,\"5326\":2,\"5337\":6,\"5423\":2,\"5425\":2,\"6487\":2,\"6510\":2}}],[\"native\",{\"1\":{\"180\":1,\"181\":1,\"198\":1,\"3527\":1,\"5289\":1,\"5290\":1}}],[\"n\",{\"1\":{\"382\":1,\"629\":1,\"634\":3,\"691\":2,\"704\":1,\"705\":1,\"722\":1,\"748\":1,\"749\":1,\"750\":1,\"754\":1,\"755\":1,\"757\":1,\"762\":1,\"763\":1,\"771\":2,\"772\":1,\"921\":1,\"927\":2,\"1065\":2,\"1086\":1,\"1474\":2,\"1772\":1,\"2009\":1,\"2152\":1,\"3102\":1,\"3206\":2,\"3415\":3,\"3424\":1,\"3525\":1,\"3557\":1,\"3596\":1,\"3897\":1,\"4589\":1,\"5021\":1,\"5438\":1,\"5444\":2,\"5458\":2,\"5472\":1,\"5473\":1,\"6044\":1,\"6758\":1,\"6923\":2}}],[\"虽然http\",{\"1\":{\"6976\":1,\"6999\":1}}],[\"虽然hashmap不是线程安全的\",{\"1\":{\"943\":1}}],[\"虽然要额外考虑并发问题\",{\"1\":{\"6378\":1}}],[\"虽然mysql中主键可以使用数值类型和字符类型\",{\"1\":{\"4118\":1}}],[\"虽然是弱引用\",{\"1\":{\"3773\":1}}],[\"虽然提高了效率\",{\"1\":{\"3167\":1,\"6823\":1}}],[\"虽然有了合并索引的优化方式\",{\"1\":{\"3082\":1,\"6733\":1}}],[\"虽然支持\",{\"1\":{\"3009\":1,\"6681\":1}}],[\"虽然相同范围的间隙锁是多个事务相互兼容的\",{\"1\":{\"2960\":1,\"6632\":1}}],[\"虽然索引能带来查询上的效率\",{\"1\":{\"2830\":1,\"6502\":1}}],[\"虽然看上去不错\",{\"1\":{\"1737\":1}}],[\"虽然这样效率确实是会比hashmap慢一些\",{\"1\":{\"1049\":1}}],[\"虽然我们不知道哪个key的hashcode是上面例子中的那两个\",{\"1\":{\"1039\":1}}],[\"虽然都是使用桶数组实现的\",{\"1\":{\"949\":1}}],[\"虽然如此\",{\"1\":{\"631\":1}}],[\"虽然变量名称是stack\",{\"1\":{\"619\":1}}],[\"虽然只是建议而非一定\",{\"1\":{\"402\":1}}],[\"虽然\",{\"1\":{\"240\":1,\"280\":1,\"1735\":1,\"2729\":1,\"2749\":1,\"6398\":1,\"6418\":1}}],[\"及以后的元空间\",{\"1\":{\"239\":1}}],[\"及其作用\",{\"0\":{\"176\":1,\"5285\":1}}],[\"还没提交\",{\"1\":{\"4677\":1,\"7196\":1}}],[\"还没有commit\",{\"1\":{\"3048\":1}}],[\"还没有提交事务\",{\"1\":{\"2983\":1,\"6655\":1}}],[\"还没有就检查本机域名解析文件\",{\"1\":{\"2388\":1}}],[\"还让写\",{\"1\":{\"4437\":1}}],[\"还耐心给我解答了是用来循环遍历的\",{\"1\":{\"4314\":1,\"7139\":1}}],[\"还提供了线程同步\",{\"1\":{\"3939\":1}}],[\"还提供了脚本编程的能力\",{\"1\":{\"3445\":1}}],[\"还包含了一些为运行时准备的一些配置参数\",{\"1\":{\"3294\":1}}],[\"还包括了内核堆栈\",{\"1\":{\"1880\":1}}],[\"还包括indexof\",{\"1\":{\"1005\":1}}],[\"还可以将快照留在原地以便重启服务器的时候使用\",{\"1\":{\"3145\":1,\"6801\":1}}],[\"还可以保存二进制数据\",{\"1\":{\"3101\":1,\"6757\":1}}],[\"还可以方便的实现多线程优先级的比较操作\",{\"1\":{\"1984\":1,\"6243\":1}}],[\"还会降低系统的稳定性\",{\"1\":{\"3852\":1,\"6006\":1}}],[\"还会有两个属性up\",{\"1\":{\"3051\":1}}],[\"还会被选举并成为新的\",{\"1\":{\"1445\":1}}],[\"还有两种模式的定义\",{\"1\":{\"6178\":1}}],[\"还有三种情况\",{\"1\":{\"3619\":1}}],[\"还有每个线程的线程栈内存\",{\"1\":{\"3601\":1}}],[\"还有其他库\",{\"1\":{\"3449\":1}}],[\"还有\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"还有更好的方式\",{\"1\":{\"2696\":1}}],[\"还有一些值得学习的命令可以辅助我们排查问题\",{\"1\":{\"3593\":1}}],[\"还有一些标记属性的比特\",{\"1\":{\"1638\":1}}],[\"还有一个好处就是可以很好的解决负数的问题\",{\"1\":{\"1044\":1}}],[\"还有一项信息是常量池\",{\"1\":{\"281\":1}}],[\"还收到物理内存和其他因素影响\",{\"1\":{\"2478\":1}}],[\"还需先获得在生产服务器上执行堆转储的权限\",{\"1\":{\"3572\":1}}],[\"还需进行\",{\"1\":{\"2307\":1}}],[\"还需要资源管理信息\",{\"1\":{\"1905\":1}}],[\"还需要把末尾的页淘汰掉\",{\"1\":{\"1694\":1}}],[\"还要求奇数个节点的集群配置\",{\"1\":{\"4568\":1}}],[\"还要向服务端回应最后一个应答报文\",{\"1\":{\"2529\":1}}],[\"还要看收到的事件类型\",{\"1\":{\"1823\":1,\"1835\":1,\"6352\":1,\"6367\":1}}],[\"还要知道目前kafka提交偏移量的方式\",{\"1\":{\"1599\":1}}],[\"还要学会这种对代码精益求精的态度\",{\"1\":{\"1079\":1}}],[\"还必须需要实现invocationhandler\",{\"1\":{\"902\":1,\"5520\":1}}],[\"还实现了\",{\"1\":{\"782\":1}}],[\"还能继续执行\",{\"1\":{\"597\":1}}],[\"还能获取到类的所有信息\",{\"1\":{\"511\":1,\"5399\":1}}],[\"还是浅拷贝\",{\"1\":{\"5105\":1}}],[\"还是前面三个\",{\"1\":{\"4618\":1,\"6191\":1}}],[\"还是全量复制\",{\"1\":{\"3244\":1}}],[\"还是直接进行全量复制呢\",{\"1\":{\"3241\":1}}],[\"还是使用的是同一个read\",{\"1\":{\"3055\":1}}],[\"还是轻量级的锁\",{\"1\":{\"2927\":1,\"6599\":1}}],[\"还是可以使用端口\",{\"1\":{\"2712\":1}}],[\"还是增长阶段\",{\"1\":{\"2687\":1}}],[\"还是能与客户端完成\",{\"1\":{\"2637\":1}}],[\"还是存在\",{\"1\":{\"2365\":1}}],[\"还是有性能瓶颈\",{\"1\":{\"2351\":1}}],[\"还是空间效率线程比进程都要高\",{\"1\":{\"1909\":1}}],[\"还是会按照每秒\",{\"1\":{\"1427\":1}}],[\"还是没有创建完\",{\"1\":{\"1274\":1,\"5616\":1}}],[\"还是得改回去用hashmap\",{\"1\":{\"506\":1,\"5394\":1}}],[\"还是\",{\"0\":{\"2040\":1,\"5745\":1},\"1\":{\"239\":1,\"588\":1,\"4650\":1,\"6223\":1,\"6989\":1}}],[\"还不会编写\",{\"1\":{\"31\":1,\"5144\":1}}],[\"不在同一个子网中\",{\"1\":{\"7045\":1}}],[\"不论是内存临时表还是磁盘临时表都不会存在索引\",{\"1\":{\"6741\":1}}],[\"不懂的同学可以暂存疑\",{\"1\":{\"6461\":1}}],[\"不理解可以看前面的选举算法\",{\"1\":{\"6203\":1}}],[\"不建议直接使用md5\",{\"1\":{\"5036\":1}}],[\"不建议使用过长的字段作为主键\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"不建议使用\",{\"1\":{\"598\":1}}],[\"不确定信息\",{\"1\":{\"4857\":2}}],[\"不参加选举\",{\"1\":{\"4602\":1}}],[\"不得不说是一个笑话\",{\"1\":{\"4567\":1}}],[\"不得不提前触发一次\",{\"1\":{\"370\":1}}],[\"不利于维护系统\",{\"1\":{\"4502\":1,\"6128\":1}}],[\"不利于短作业\",{\"1\":{\"1914\":1}}],[\"不用关注其他人怎么开发\",{\"1\":{\"4498\":1,\"6126\":1}}],[\"不用告诉我他包含了哪些注解内容\",{\"0\":{\"4230\":1}}],[\"不需了解所有业务\",{\"1\":{\"4479\":1,\"6112\":1}}],[\"不需要将私钥给别人\",{\"1\":{\"5101\":1}}],[\"不需要自己构建http请求了\",{\"1\":{\"4532\":1,\"6149\":1}}],[\"不需要自己为它的方法实现同步\",{\"1\":{\"942\":1}}],[\"不需要进行\",{\"1\":{\"3042\":1,\"6710\":1}}],[\"不需要进行停顿\",{\"1\":{\"367\":1}}],[\"不需要显示调用\",{\"1\":{\"2895\":1,\"6567\":1}}],[\"不需要考虑进程间通信\",{\"1\":{\"1827\":1,\"6356\":1}}],[\"不需要在进程中再创建线程\",{\"1\":{\"1815\":1,\"6342\":1}}],[\"不需要像\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"不需要转成十进制\",{\"1\":{\"1017\":1}}],[\"不需要必须实现接⼝\",{\"1\":{\"887\":1,\"5505\":1}}],[\"不需要预先分配很多空间\",{\"1\":{\"753\":1}}],[\"不需要停顿\",{\"1\":{\"364\":1,\"366\":1}}],[\"不需要加锁\",{\"1\":{\"273\":1}}],[\"不了解\",{\"1\":{\"4387\":1}}],[\"不满足显示null\",{\"1\":{\"4165\":1}}],[\"不满足条件的显示null\",{\"1\":{\"4165\":1}}],[\"不易管理\",{\"1\":{\"3956\":1}}],[\"不处理新任务\",{\"1\":{\"3872\":1,\"6027\":1}}],[\"不仅复杂而且也没有性能优势\",{\"1\":{\"6332\":1}}],[\"不仅支持\",{\"1\":{\"4648\":1,\"6221\":1}}],[\"不仅会消耗系统资源\",{\"1\":{\"3852\":1,\"6006\":1}}],[\"不仅可以保存文本数据\",{\"1\":{\"3101\":1,\"6757\":1}}],[\"不进行线程状态的改变\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"不停地循环判断锁是否能够被成功获取\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"不停服如何实现\",{\"0\":{\"2063\":1,\"5768\":1}}],[\"不行\",{\"1\":{\"3781\":1,\"5792\":1}}],[\"不加这个参数的话有可能会报内存溢出异常\",{\"1\":{\"3576\":1}}],[\"不加密\",{\"1\":{\"2285\":1}}],[\"不要盲目开启慢日志\",{\"1\":{\"3540\":1}}],[\"不要求排序\",{\"1\":{\"1087\":1}}],[\"不方便网络通信\",{\"1\":{\"3474\":1}}],[\"不适宜于信息量大或操作频繁的场合\",{\"1\":{\"3473\":1}}],[\"不适合进程间频繁地交换数据\",{\"1\":{\"1951\":1}}],[\"不太推荐\",{\"1\":{\"3283\":1,\"6888\":1}}],[\"不存在则为\",{\"1\":{\"4904\":1,\"7274\":1}}],[\"不存在时\",{\"1\":{\"4903\":1,\"7273\":1}}],[\"不存在的话\",{\"1\":{\"3254\":1,\"6859\":1}}],[\"不存储元素\",{\"1\":{\"3879\":1,\"6034\":1}}],[\"不存于文件系统中\",{\"1\":{\"1953\":1}}],[\"不光能存放文本数据\",{\"1\":{\"3101\":1,\"6757\":1}}],[\"不光是这个依赖下的meta\",{\"1\":{\"1295\":1,\"5638\":1}}],[\"不符合可见性\",{\"1\":{\"3045\":1}}],[\"不包含\",{\"1\":{\"6740\":1}}],[\"不包含tomcat依赖的项目\",{\"1\":{\"4079\":1}}],[\"不包含任何动态数据\",{\"1\":{\"3294\":1}}],[\"不包含实现逻辑\",{\"1\":{\"1100\":1}}],[\"不包括当前事务自己和已提交的事务\",{\"1\":{\"3035\":1,\"6702\":1}}],[\"不为\",{\"1\":{\"2824\":1,\"6496\":1}}],[\"不做回表操作\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"不做双活\",{\"1\":{\"2075\":1,\"5780\":1}}],[\"不提供事务支持\",{\"1\":{\"2736\":1,\"6405\":1}}],[\"不使用\",{\"1\":{\"2557\":1}}],[\"不使⽤\",{\"1\":{\"854\":1,\"5484\":1}}],[\"不保证可靠交付数据\",{\"1\":{\"2490\":1,\"4265\":1}}],[\"不保证网络包的按序交付\",{\"1\":{\"2452\":1}}],[\"不重复\",{\"1\":{\"2489\":1,\"4264\":1}}],[\"不丢失\",{\"1\":{\"2489\":1,\"4264\":1}}],[\"不是所谓的\",{\"0\":{\"6217\":1}}],[\"不是像php那样成熟的编程语言\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"不是错误或者超时的响应\",{\"1\":{\"4640\":1,\"6213\":1}}],[\"不是听狗叫的\",{\"1\":{\"4287\":1,\"7112\":1}}],[\"不是直接在数据行上加锁\",{\"1\":{\"4223\":1}}],[\"不是万能的\",{\"1\":{\"3682\":1,\"5851\":1}}],[\"不是\",{\"1\":{\"2715\":1,\"7010\":1}}],[\"不是重传\",{\"1\":{\"2540\":1}}],[\"不是两次\",{\"0\":{\"2535\":1},\"1\":{\"2411\":1}}],[\"不是这么抽象的概念\",{\"1\":{\"592\":1}}],[\"不够安全\",{\"1\":{\"2345\":1,\"5100\":1}}],[\"不必等待超时再重传\",{\"1\":{\"2696\":1}}],[\"不必等其回来\",{\"1\":{\"2297\":1,\"2350\":1}}],[\"不必再遍历所有的依赖包\",{\"1\":{\"1348\":1,\"5673\":1}}],[\"不验证通信方的身份\",{\"1\":{\"2286\":1}}],[\"不具有跳转的含义\",{\"1\":{\"2203\":1}}],[\"不至于将所有压力都在同一时间集中到后端服务器上\",{\"1\":{\"2030\":1}}],[\"不像管道是无格式的字节流数据\",{\"1\":{\"1957\":1}}],[\"不再依赖\",{\"1\":{\"4563\":1,\"6163\":1}}],[\"不再各自实现认证机制\",{\"1\":{\"4045\":1}}],[\"不再出现\",{\"1\":{\"2073\":1,\"5778\":1}}],[\"不再拷贝到用户态\",{\"1\":{\"1800\":1,\"6305\":1}}],[\"不再用\",{\"1\":{\"1771\":1}}],[\"不再管理该\",{\"1\":{\"1186\":1}}],[\"不活跃内存页链表\",{\"1\":{\"1703\":1}}],[\"不一定是isr中的\",{\"1\":{\"1539\":1}}],[\"不一直使用红黑树\",{\"0\":{\"922\":1,\"5439\":1}}],[\"不均衡的问题会越来越严重\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"不指定线程池的名称\",{\"1\":{\"1377\":1}}],[\"不允许在应用中自行显式创建线程\",{\"1\":{\"3906\":1,\"6053\":1}}],[\"不允许分割\",{\"1\":{\"1220\":1,\"5572\":1}}],[\"不允许放入\",{\"1\":{\"735\":1}}],[\"不安全的缺陷\",{\"1\":{\"2306\":1}}],[\"不安全\",{\"1\":{\"1141\":1,\"2271\":1,\"2283\":1,\"5720\":1}}],[\"不支持事务和行级锁\",{\"1\":{\"2729\":1,\"6398\":1}}],[\"不支持当前事务的情况\",{\"1\":{\"1242\":1,\"5594\":1}}],[\"不支持\",{\"1\":{\"941\":1,\"2739\":1,\"2743\":1,\"2746\":1,\"6408\":1,\"6412\":1,\"6415\":1}}],[\"不能上下架\",{\"1\":{\"4979\":1}}],[\"不能小于\",{\"1\":{\"3249\":1,\"6854\":1}}],[\"不能重复\",{\"1\":{\"2786\":1,\"6455\":1}}],[\"不能忽略网络上发生的事\",{\"1\":{\"2666\":1}}],[\"不能像\",{\"1\":{\"2457\":1}}],[\"不能保证跨分区的消息先后处理顺序\",{\"1\":{\"1588\":1}}],[\"不能通过水平扩容来解决\",{\"1\":{\"1419\":1}}],[\"不能采用继承的情况主要有两类\",{\"1\":{\"877\":1}}],[\"不能根据索引位置进行操作\",{\"1\":{\"764\":1}}],[\"不管主键还是非主键\",{\"1\":{\"2776\":1,\"2805\":1,\"6445\":1,\"6477\":1}}],[\"不管hashcode的值是正数还是负数\",{\"1\":{\"1044\":1}}],[\"不管列表是否已排序\",{\"1\":{\"755\":1}}],[\"不管是哪个原因\",{\"1\":{\"3545\":1}}],[\"不管是半连接队列还是全连接队列\",{\"1\":{\"2587\":1}}],[\"不管是时间效率\",{\"1\":{\"1909\":1}}],[\"不管是\",{\"1\":{\"239\":1}}],[\"不过最终没能通过\",{\"1\":{\"6989\":1}}],[\"不过我们需要加一个分布式锁来保证更新\",{\"1\":{\"4671\":1,\"7190\":1}}],[\"不过要注意\",{\"1\":{\"4532\":1,\"6149\":1}}],[\"不过两者的本质都是对对象监视器\",{\"1\":{\"3752\":1,\"5984\":1}}],[\"不过并不是所有的引擎都能支持事务\",{\"1\":{\"2969\":1,\"6641\":1}}],[\"不过尽量避免在使用\",{\"1\":{\"2886\":1,\"6558\":1}}],[\"不过可以发现c2承担了4个分区的消费而c1订阅了t1\",{\"1\":{\"1483\":1,\"6935\":1}}],[\"不过考虑这种情况\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"不过\",{\"1\":{\"998\":1,\"1158\":1,\"2316\":1,\"2382\":1,\"2911\":1,\"3076\":1,\"3785\":1,\"4563\":1,\"5539\":1,\"5796\":1,\"6163\":1,\"6583\":1,\"6727\":1,\"6989\":1}}],[\"不过理想情况下随机hashcode算法下所有bin中节点的分布频率会遵循泊松分布\",{\"1\":{\"929\":1,\"5446\":1}}],[\"不过需要注意的是\",{\"1\":{\"732\":1}}],[\"不过时间复杂度仍然是o\",{\"1\":{\"705\":1,\"5473\":1}}],[\"不应该使用链表\",{\"1\":{\"638\":1}}],[\"不应该是继承关系\",{\"1\":{\"579\":1}}],[\"不会饿死在队列中\",{\"1\":{\"3840\":1,\"5956\":1}}],[\"不会产生副本\",{\"1\":{\"3711\":1,\"5911\":1}}],[\"不会影响最终结果\",{\"1\":{\"3686\":1,\"5855\":1}}],[\"不会\",{\"1\":{\"3415\":1}}],[\"不会询问而直接覆盖\",{\"1\":{\"3408\":1}}],[\"不会立即同步到硬盘\",{\"1\":{\"3167\":1,\"6823\":1}}],[\"不会阻塞\",{\"1\":{\"3151\":1,\"6807\":1}}],[\"不会相互干扰\",{\"1\":{\"2973\":1,\"6645\":1}}],[\"不会结束在中间某个环节\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"不会和行级的共享锁和独占锁发生冲突\",{\"1\":{\"2913\":1,\"6585\":1}}],[\"不会因为数据或表结构的更新\",{\"1\":{\"2861\":1,\"6533\":1}}],[\"不会返回资源\",{\"1\":{\"2256\":1}}],[\"不会涉及这些资源管理信息\",{\"1\":{\"1905\":1}}],[\"不会被访问的预读页却占用了\",{\"1\":{\"1695\":1}}],[\"不会超过自己每秒能处理的最大请求量\",{\"1\":{\"1426\":1}}],[\"不会修改数据\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"不会牵扯到扩容问题\",{\"1\":{\"630\":1}}],[\"不会互相影响\",{\"1\":{\"194\":1}}],[\"不推荐使用\",{\"0\":{\"565\":1}}],[\"不可逆性\",{\"1\":{\"5032\":1}}],[\"不可篡改\",{\"1\":{\"4736\":1}}],[\"不可删除\",{\"1\":{\"4736\":1}}],[\"不可能同时达到\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"不可能再提交这个提案n1了\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"不可以有\",{\"1\":{\"2778\":1,\"6447\":1}}],[\"不可以随机访问\",{\"1\":{\"754\":1}}],[\"不可靠\",{\"1\":{\"2452\":1}}],[\"不可剥夺条件是指\",{\"1\":{\"1994\":1}}],[\"不可剥夺条件\",{\"1\":{\"1994\":1}}],[\"不可重复读和幻读现象都不可能会发生\",{\"1\":{\"3007\":1,\"6679\":1}}],[\"不可重复读和幻读现象\",{\"1\":{\"3004\":1,\"6676\":1}}],[\"不可重复读\",{\"0\":{\"6657\":1},\"1\":{\"2986\":1,\"4242\":1,\"6658\":1}}],[\"不可重复读以及幻读\",{\"1\":{\"1235\":1,\"5587\":1}}],[\"不可重复\",{\"1\":{\"732\":1}}],[\"不可查异常\",{\"1\":{\"467\":1,\"5362\":1}}],[\"不可达的对象可被回收\",{\"1\":{\"301\":1}}],[\"不被篡改\",{\"1\":{\"451\":1,\"5344\":1}}],[\"不同局域网内的\",{\"0\":{\"7044\":1}}],[\"不同服务器可以共享解析\",{\"1\":{\"4062\":1}}],[\"不同业务领域的服务可以拆分出来\",{\"1\":{\"4015\":1}}],[\"不同实例之间互不影响\",{\"1\":{\"3731\":1}}],[\"不同之处在于\",{\"1\":{\"3321\":1}}],[\"不同于\",{\"1\":{\"3140\":1,\"6796\":1}}],[\"不同\",{\"1\":{\"2362\":1,\"5715\":1}}],[\"不同进程可以及时看到对方进程中对共享内存中数据的更新\",{\"1\":{\"1974\":1,\"6255\":1}}],[\"不同位数的系统\",{\"1\":{\"1687\":1}}],[\"不同消费者组之间互不影响\",{\"1\":{\"1439\":1}}],[\"不同的服务可以由不同的团队来负责\",{\"1\":{\"4016\":1}}],[\"不同的服务可以通过消息队列进行通信\",{\"1\":{\"1410\":1}}],[\"不同的线程池会选用不同的阻塞队列\",{\"1\":{\"3877\":1,\"6032\":1}}],[\"不同的字符串可能哈希出来的位置相同\",{\"1\":{\"3263\":1,\"6868\":1}}],[\"不同的数据库厂商对\",{\"1\":{\"3009\":1,\"6681\":1}}],[\"不同的地方\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"不同的段是有不同的属性的\",{\"1\":{\"1640\":1}}],[\"不同的sqlsession\",{\"1\":{\"1136\":1}}],[\"不同的是它可以一页一页查看文件内容\",{\"1\":{\"3415\":1}}],[\"不同的是消息队列存放在内核中\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"不同的是\",{\"1\":{\"1077\":1,\"7041\":1}}],[\"不同的厂商有不同的实现\",{\"1\":{\"282\":1}}],[\"不同块采用适当的收集算法\",{\"1\":{\"336\":1}}],[\"不足\",{\"1\":{\"325\":1}}],[\"不受垃圾回收器管理\",{\"1\":{\"283\":1}}],[\"3就横空出世了\",{\"1\":{\"6994\":1}}],[\"3就已经来了\",{\"1\":{\"6979\":1,\"7002\":1}}],[\"3是一个更加正确的选择\",{\"1\":{\"6980\":1,\"7003\":1}}],[\"3是哨兵leader\",{\"1\":{\"3220\":1}}],[\"3已经悄然而至了\",{\"1\":{\"6978\":1,\"7001\":1}}],[\"3已经是箭在弦上了\",{\"1\":{\"6972\":1,\"6997\":1}}],[\"3了\",{\"1\":{\"6971\":1,\"6972\":1,\"6996\":1,\"6997\":1}}],[\"3的新闻有很多\",{\"1\":{\"6971\":1,\"6996\":1}}],[\"3的id\",{\"1\":{\"3050\":1}}],[\"3d\",{\"1\":{\"6955\":1}}],[\"38c93c677124\",{\"1\":{\"5103\":1}}],[\"3md5是对称加密还是非对称加密\",{\"0\":{\"5095\":1}}],[\"3md5的问题\",{\"0\":{\"5035\":1}}],[\"3优化三\",{\"0\":{\"4679\":1}}],[\"3跳过那些已经被丢弃的提案\",{\"0\":{\"4626\":1}}],[\"3崩溃恢复\",{\"0\":{\"4611\":1}}],[\"3raft算法基础\",{\"0\":{\"4583\":1}}],[\"3readview\",{\"0\":{\"3043\":1}}],[\"33\",{\"0\":{\"4110\":1}}],[\"33709582\",{\"1\":{\"553\":1,\"5430\":1}}],[\"31\",{\"0\":{\"4098\":1,\"4449\":1},\"1\":{\"4975\":1,\"4976\":1}}],[\"3可重入锁\",{\"0\":{\"3817\":1}}],[\"3轻量级锁\",{\"0\":{\"3800\":1}}],[\"3threadlocal造成内存泄露的问题\",{\"0\":{\"3770\":1}}],[\"3throw和throws的区别\",{\"0\":{\"469\":1}}],[\"3volatile如何防止指令重排序\",{\"0\":{\"3714\":1}}],[\"3只能保证单个变量的原子性\",{\"0\":{\"3694\":1}}],[\"3产品功能运行缓慢\",{\"0\":{\"3618\":1}}],[\"343a代表着线程id的16进制\",{\"1\":{\"3528\":1}}],[\"343a\",{\"1\":{\"3525\":1,\"3527\":1}}],[\"3将对应的tid转换为16进制\",{\"0\":{\"3523\":1}}],[\"3链接\",{\"0\":{\"3412\":1}}],[\"3set\",{\"0\":{\"3116\":1}}],[\"3spring\",{\"0\":{\"1236\":1}}],[\"3幻读\",{\"0\":{\"2989\":1}}],[\"3next\",{\"0\":{\"2955\":1}}],[\"3行级锁\",{\"0\":{\"2936\":1}}],[\"3意向锁\",{\"0\":{\"2905\":1}}],[\"3主键索引\",{\"0\":{\"2784\":1}}],[\"3拥塞发生\",{\"0\":{\"2690\":1}}],[\"3流量控制\",{\"0\":{\"2658\":1}}],[\"3没有\",{\"0\":{\"2644\":1}}],[\"3第一次挥手丢失了\",{\"0\":{\"2605\":1}}],[\"3为什么是三次握手\",{\"0\":{\"2535\":1}}],[\"3什么是缓存雪崩\",{\"0\":{\"3273\":1}}],[\"3什么是\",{\"0\":{\"2454\":1,\"3152\":1,\"3315\":1}}],[\"3http\",{\"0\":{\"2213\":1}}],[\"30条分值较高的文章\",{\"1\":{\"4999\":2}}],[\"30的等到十一点半\",{\"1\":{\"4441\":1}}],[\"30min\",{\"0\":{\"4426\":1}}],[\"30下班\",{\"1\":{\"4321\":1,\"7146\":1}}],[\"30上班\",{\"1\":{\"4321\":1,\"7146\":1}}],[\"30\",{\"0\":{\"4097\":1},\"1\":{\"4895\":1,\"4999\":2}}],[\"30s\",{\"1\":{\"3167\":1,\"3625\":1,\"6823\":1}}],[\"304\",{\"1\":{\"2203\":1,\"2238\":1,\"2242\":1,\"2245\":1,\"2256\":1,\"2258\":1}}],[\"302\",{\"1\":{\"2201\":1,\"2202\":1}}],[\"301\",{\"1\":{\"2200\":1,\"2202\":1}}],[\"300\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"300ms\",{\"1\":{\"1417\":2}}],[\"3001\",{\"1\":{\"686\":1,\"947\":1,\"1493\":1,\"2136\":1,\"3390\":1,\"5347\":1,\"6946\":1,\"6955\":1}}],[\"3xx\",{\"1\":{\"2199\":1}}],[\"3号图片将会被缓存到服务器b上\",{\"1\":{\"2028\":1}}],[\"3共享内存\",{\"0\":{\"1959\":1}}],[\"3高响应比优先调度算法\",{\"0\":{\"1919\":1}}],[\"3线程与进程的比较\",{\"0\":{\"1898\":1}}],[\"3进程的上下文切换\",{\"0\":{\"1876\":1}}],[\"3多\",{\"0\":{\"1841\":1}}],[\"3使用零拷贝技术的项目\",{\"0\":{\"1809\":1}}],[\"3使用场景\",{\"0\":{\"876\":1}}],[\"3扫描算法\",{\"0\":{\"1758\":1}}],[\"3最近最久未使用的置换算法\",{\"0\":{\"1732\":1}}],[\"3linux\",{\"0\":{\"1698\":1}}],[\"3g\",{\"1\":{\"1689\":1}}],[\"3提交和偏移量\",{\"0\":{\"1589\":1}}],[\"3如何保证消息的消费顺序\",{\"0\":{\"1508\":1}}],[\"3个分区\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"3解决方案\",{\"0\":{\"1257\":1}}],[\"3三级缓存\",{\"0\":{\"1142\":1}}],[\"3总结\",{\"0\":{\"999\":1,\"1078\":1,\"3749\":1}}],[\"326\",{\"1\":{\"3527\":1}}],[\"32位\",{\"1\":{\"2468\":1,\"2470\":1}}],[\"32\",{\"0\":{\"4107\":1},\"1\":{\"995\":1,\"1663\":1,\"1687\":1,\"1689\":1,\"2374\":1,\"2477\":1}}],[\"35590459\",{\"1\":{\"918\":1,\"5435\":1}}],[\"3jdk\",{\"0\":{\"913\":1}}],[\"3静态代理\",{\"0\":{\"889\":1}}],[\"3抽象⼯⼚模式了解吗\",{\"0\":{\"868\":1}}],[\"3红黑树的特性\",{\"0\":{\"692\":1}}],[\"3二叉树的定义\",{\"0\":{\"673\":1}}],[\"3q3\",{\"0\":{\"578\":1}}],[\"3构造类的实例化对象\",{\"0\":{\"525\":1}}],[\"3类加载器总结\",{\"0\":{\"423\":1}}],[\"3类加载器\",{\"0\":{\"414\":1}}],[\"3parallel\",{\"0\":{\"353\":1}}],[\"3垃圾收集器\",{\"0\":{\"340\":1}}],[\"3复制\",{\"0\":{\"330\":1}}],[\"3引用类型\",{\"0\":{\"307\":1}}],[\"3\",{\"0\":{\"294\":1,\"295\":1,\"296\":1,\"300\":1,\"307\":1,\"322\":1,\"323\":1,\"328\":1,\"330\":1,\"335\":1,\"340\":1,\"344\":2,\"349\":2,\"353\":2,\"356\":2,\"358\":2,\"360\":2,\"371\":2,\"383\":1,\"386\":1,\"389\":1,\"415\":1,\"420\":1,\"423\":1,\"437\":1,\"559\":1,\"561\":1,\"565\":1,\"571\":1,\"578\":1,\"595\":1,\"599\":1,\"614\":1,\"617\":1,\"626\":1,\"725\":1,\"760\":1,\"803\":1,\"809\":1,\"810\":1,\"820\":1,\"830\":1,\"855\":1,\"922\":1,\"1088\":1,\"1132\":1,\"1133\":1,\"1135\":1,\"1142\":1,\"1144\":1,\"1191\":1,\"1314\":1,\"1494\":1,\"1495\":1,\"1497\":1,\"1639\":1,\"1700\":1,\"1705\":1,\"1765\":1,\"1813\":1,\"1814\":1,\"1832\":1,\"1841\":1,\"1943\":1,\"1945\":1,\"1956\":1,\"1959\":1,\"1961\":1,\"2042\":1,\"2114\":1,\"2115\":1,\"2120\":1,\"2122\":2,\"2346\":1,\"2383\":1,\"2592\":1,\"2593\":1,\"2603\":1,\"2605\":1,\"2607\":1,\"2609\":1,\"2611\":1,\"2613\":1,\"2616\":1,\"2621\":1,\"2625\":1,\"2629\":1,\"2631\":1,\"2633\":1,\"2636\":1,\"2724\":1,\"2849\":1,\"2852\":1,\"2871\":1,\"2877\":1,\"2887\":1,\"2905\":1,\"2918\":1,\"2936\":1,\"2947\":2,\"2951\":2,\"2955\":2,\"2961\":2,\"2967\":1,\"2980\":1,\"2985\":1,\"2989\":1,\"2995\":1,\"3018\":1,\"3026\":1,\"3037\":1,\"3043\":1,\"3049\":1,\"3060\":1,\"3139\":1,\"3144\":1,\"3148\":1,\"3152\":1,\"3158\":1,\"3277\":1,\"3285\":1,\"3306\":1,\"3339\":1,\"3441\":1,\"3620\":1,\"3623\":1,\"3627\":2,\"3639\":1,\"3681\":1,\"3684\":1,\"3691\":1,\"3694\":1,\"3698\":1,\"3754\":1,\"3755\":1,\"3760\":1,\"3770\":1,\"3812\":1,\"3813\":1,\"3815\":1,\"3817\":1,\"3821\":1,\"3828\":1,\"3832\":1,\"3835\":1,\"3838\":1,\"3905\":1,\"3936\":1,\"4122\":1,\"4212\":1,\"4487\":1,\"4571\":1,\"4572\":1,\"4578\":1,\"4583\":1,\"4591\":1,\"4592\":1,\"4601\":1,\"4611\":1,\"4612\":2,\"4622\":2,\"4626\":2,\"4628\":1,\"4644\":1,\"4680\":1,\"4739\":1,\"4757\":2,\"5005\":1,\"5459\":1,\"5747\":1,\"6217\":1,\"7070\":1,\"7197\":1},\"1\":{\"491\":3,\"522\":1,\"544\":1,\"684\":1,\"858\":1,\"901\":1,\"1024\":1,\"1038\":1,\"1062\":1,\"1124\":1,\"1177\":1,\"1181\":1,\"1202\":1,\"1280\":1,\"1293\":1,\"1308\":1,\"1313\":1,\"1365\":1,\"1375\":1,\"1411\":1,\"1439\":1,\"1493\":1,\"1614\":1,\"1800\":1,\"2022\":1,\"2026\":1,\"2116\":1,\"2121\":1,\"2136\":1,\"2174\":1,\"2267\":1,\"2323\":1,\"2328\":1,\"2330\":1,\"2335\":1,\"2419\":1,\"2488\":1,\"2703\":3,\"2738\":1,\"2953\":1,\"3051\":1,\"3089\":1,\"3095\":1,\"3113\":1,\"3140\":1,\"3201\":1,\"3214\":1,\"3348\":1,\"3410\":1,\"3431\":1,\"3440\":1,\"3498\":1,\"3500\":1,\"3510\":3,\"3527\":1,\"3548\":1,\"3555\":1,\"3587\":1,\"3602\":1,\"3671\":1,\"3772\":1,\"3858\":1,\"3964\":1,\"3976\":1,\"4033\":1,\"4132\":1,\"4182\":1,\"4197\":1,\"4243\":1,\"4263\":1,\"4282\":1,\"4290\":1,\"4312\":1,\"4318\":1,\"4327\":1,\"4341\":1,\"4350\":1,\"4361\":1,\"4372\":1,\"4383\":1,\"4399\":1,\"4430\":1,\"4444\":1,\"4452\":1,\"4620\":1,\"4848\":1,\"4850\":1,\"4857\":3,\"4875\":1,\"4979\":1,\"4999\":1,\"5378\":3,\"5410\":1,\"5426\":1,\"5429\":1,\"5488\":1,\"5519\":1,\"5554\":1,\"5609\":1,\"5622\":1,\"5636\":1,\"5643\":1,\"5690\":1,\"5706\":1,\"5836\":1,\"6012\":1,\"6193\":1,\"6305\":1,\"6333\":1,\"6407\":1,\"6625\":1,\"6745\":1,\"6751\":1,\"6769\":1,\"6796\":1,\"6946\":1,\"6972\":1,\"6977\":1,\"6989\":1,\"6994\":2,\"6997\":1,\"7000\":1,\"7071\":3,\"7072\":2,\"7073\":1,\"7107\":1,\"7115\":1,\"7137\":1,\"7143\":1,\"7152\":1,\"7166\":1,\"7237\":1,\"7239\":1,\"7253\":1}}],[\"3元空间\",{\"0\":{\"238\":1}}],[\"3本地方法栈\",{\"0\":{\"217\":1}}],[\"区已使用量\",{\"1\":{\"3611\":1,\"3613\":1}}],[\"区容量\",{\"1\":{\"3610\":1,\"3612\":1}}],[\"区分\",{\"1\":{\"3361\":1}}],[\"区分不同类的方式不仅仅根据类名\",{\"1\":{\"451\":1,\"5344\":1}}],[\"区域管理\",{\"1\":{\"2391\":1,\"7095\":1}}],[\"区域的权威\",{\"1\":{\"2393\":1,\"7097\":1}}],[\"区域的时间判断\",{\"1\":{\"1714\":1}}],[\"区域的头部\",{\"1\":{\"1704\":1,\"1712\":2}}],[\"区域升级到\",{\"1\":{\"1714\":1,\"1715\":1,\"1716\":1}}],[\"区域中的热点数据\",{\"1\":{\"1712\":1}}],[\"区域移除\",{\"1\":{\"1712\":1}}],[\"区域则是在后半部分\",{\"1\":{\"1711\":1}}],[\"区域在\",{\"1\":{\"1711\":1}}],[\"区域\",{\"1\":{\"1636\":1,\"1697\":2,\"1710\":2,\"1714\":1,\"1715\":1,\"1716\":1}}],[\"区域继续进行划分\",{\"1\":{\"272\":1}}],[\"区别在于\",{\"1\":{\"1063\":1}}],[\"区别\",{\"0\":{\"463\":1,\"2481\":1,\"3362\":1,\"5358\":1},\"1\":{\"798\":1,\"933\":1}}],[\"区\",{\"1\":{\"254\":1,\"264\":1,\"265\":2,\"266\":2}}],[\"区由\",{\"1\":{\"253\":1}}],[\"区之间发生大量的内存拷贝\",{\"1\":{\"237\":1}}],[\"区和两个survivor\",{\"1\":{\"237\":1}}],[\"大的优先\",{\"1\":{\"4620\":2,\"6193\":2}}],[\"大的优先作为\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"大的优先为\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"大致如下图所示\",{\"1\":{\"4536\":1,\"6151\":1}}],[\"大致相同\",{\"1\":{\"3780\":1,\"5791\":1}}],[\"大数据的企业\",{\"1\":{\"4128\":1}}],[\"大数据题\",{\"0\":{\"2039\":1,\"5744\":1}}],[\"大一志愿服务\",{\"1\":{\"4007\":1}}],[\"大学时间我主要利用课外时间学习了\",{\"1\":{\"5024\":1,\"7288\":1}}],[\"大学时间到研究生期间的主要技术栈是java\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1}}],[\"大学中印象最深的课程\",{\"0\":{\"3998\":1}}],[\"大大简化了\",{\"1\":{\"4563\":1,\"6163\":1}}],[\"大大简化了集合操作\",{\"1\":{\"3940\":1}}],[\"大大降低数据库的性能\",{\"1\":{\"4484\":1,\"6117\":1}}],[\"大大降低系统的性能\",{\"1\":{\"3830\":1,\"5946\":1}}],[\"大大提高了进程间通信的速度\",{\"1\":{\"1960\":1}}],[\"大大提高了检测的效率\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"大表等\",{\"1\":{\"3540\":1}}],[\"大于等于\",{\"1\":{\"3047\":1}}],[\"大于等于这个\",{\"1\":{\"3032\":1,\"3033\":1,\"6698\":1,\"6700\":1}}],[\"大小进行降序排列\",{\"1\":{\"3597\":1}}],[\"大小有限\",{\"1\":{\"3489\":1}}],[\"大小均固定为\",{\"1\":{\"3487\":1}}],[\"大小\",{\"1\":{\"2501\":1,\"2502\":1}}],[\"大小的空间\",{\"1\":{\"1663\":1}}],[\"大白话\",{\"1\":{\"2461\":1}}],[\"大\",{\"1\":{\"2242\":1}}],[\"大集合\",{\"1\":{\"2116\":1}}],[\"大量长任务\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"大量任务并发竞争时\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"大量的用户在中午高峰期的时候\",{\"1\":{\"1424\":1}}],[\"大品牌\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"大部分人解释这一定律时\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"大部分时间是单线程操作的\",{\"1\":{\"943\":1}}],[\"大部分情况都是\",{\"1\":{\"915\":1,\"5533\":1}}],[\"大部分类在具体用到的时候才会去加载\",{\"1\":{\"421\":1,\"5312\":1}}],[\"大家好\",{\"1\":{\"2398\":1}}],[\"大家知道有这个功能\",{\"1\":{\"2301\":1}}],[\"大家应该都知道\",{\"1\":{\"629\":1}}],[\"大家可以把\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"大家可以看到\",{\"1\":{\"628\":1}}],[\"大家可以看一下这篇探讨\",{\"1\":{\"625\":1}}],[\"大家可以想象\",{\"1\":{\"616\":1}}],[\"大功告成\",{\"1\":{\"508\":1,\"5396\":1}}],[\"大多数情况下\",{\"1\":{\"3591\":1}}],[\"大多数的\",{\"1\":{\"477\":1,\"5372\":1}}],[\"大多数新创建的对象都位于\",{\"1\":{\"231\":1}}],[\"大对象是指需要大量连续内存空间的对象\",{\"1\":{\"237\":1}}],[\"大对象直接进入老年代\",{\"1\":{\"237\":1}}],[\"通俗说法就是\",{\"1\":{\"3324\":1}}],[\"通知article端修改文章配置\",{\"1\":{\"4979\":1}}],[\"通知客户端主节点已更换\",{\"1\":{\"3224\":1}}],[\"通知\",{\"1\":{\"3198\":1,\"4560\":1,\"6160\":1}}],[\"通讯密文都会被破解\",{\"1\":{\"2316\":1}}],[\"通信双方的发送和接收操作均以消息为单位\",{\"1\":{\"3469\":1}}],[\"通信双方的主机之间就可以相互交换\",{\"1\":{\"2450\":1}}],[\"通信完后\",{\"1\":{\"3468\":1}}],[\"通信使用明文\",{\"1\":{\"2285\":1}}],[\"通信方式\",{\"1\":{\"1968\":1}}],[\"通篇全文下来大家也可以看到\",{\"1\":{\"1287\":1,\"5629\":1}}],[\"通常子查询的结果集会被存储到临时表中\",{\"1\":{\"6741\":1}}],[\"通常子查询在\",{\"1\":{\"6740\":1}}],[\"通常子树被称作\",{\"1\":{\"674\":1}}],[\"通常被用于实现诸如数据发布\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"通常被有经验的⾯向对象的软件开发⼈员所采⽤\",{\"1\":{\"852\":1,\"5482\":1}}],[\"通常会对缓存设置过期时间\",{\"1\":{\"4144\":1}}],[\"通常称之为消息队列\",{\"1\":{\"3469\":1}}],[\"通常称为有名管道或fifo\",{\"1\":{\"3468\":1}}],[\"通常称为无名管道或pipe\",{\"1\":{\"3468\":1}}],[\"通常称为页表缓存\",{\"1\":{\"1672\":1}}],[\"通常称这种文件为管道文件\",{\"1\":{\"3468\":1}}],[\"通常使用搜索引擎如\",{\"1\":{\"2772\":1,\"2773\":1,\"2783\":1,\"6441\":1,\"6442\":1,\"6452\":1}}],[\"通常窗口的大小是由接收方的窗口大小来决定的\",{\"1\":{\"2654\":1}}],[\"通常这种通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存\",{\"1\":{\"2238\":1}}],[\"通常是\",{\"1\":{\"4945\":1}}],[\"通常是因为缓存中的那份数据已经过期\",{\"1\":{\"3265\":1,\"3272\":1,\"3286\":1,\"6870\":1,\"6877\":1,\"6891\":1}}],[\"通常是服务器作为网关或代理时返回的错误码\",{\"1\":{\"2211\":1}}],[\"通常是通过链表的方式进行组织\",{\"1\":{\"1873\":1}}],[\"通常情况下\",{\"1\":{\"2740\":1,\"3756\":1,\"5988\":1,\"6409\":1}}],[\"通常情况下也不会用到该级别\",{\"1\":{\"1235\":1,\"5587\":1}}],[\"通常情况比较小\",{\"1\":{\"2152\":1}}],[\"通常不会犯糊涂\",{\"1\":{\"587\":1}}],[\"通常表示为\",{\"1\":{\"425\":1,\"5316\":1}}],[\"通常需要更长的时间\",{\"1\":{\"236\":1}}],[\"通常\",{\"1\":{\"234\":1,\"236\":1}}],[\"通过其\",{\"1\":{\"6184\":1}}],[\"通过threadpoolexecutor构造函数来创建\",{\"1\":{\"6008\":1}}],[\"通过实现不同的方法\",{\"1\":{\"5949\":1}}],[\"通过实例化对象获取该实例的\",{\"1\":{\"520\":1,\"5408\":1}}],[\"通过拦截器\",{\"1\":{\"4947\":1}}],[\"通过互斥来保证数据的一致性\",{\"1\":{\"4901\":1,\"7271\":1}}],[\"通过数据库中间件连接\",{\"1\":{\"4820\":1,\"4967\":1}}],[\"通过数据行的\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"通过继承basemapper以及使用lambda表达式\",{\"1\":{\"4744\":1}}],[\"通过继承方式实现代理\",{\"1\":{\"908\":1,\"5526\":1}}],[\"通过对于增强简化后的api更加方便地进行开发\",{\"1\":{\"4742\":1}}],[\"通过偏移量\",{\"1\":{\"4674\":1,\"7193\":1}}],[\"通过用户的行为\",{\"1\":{\"4662\":1,\"7181\":1}}],[\"通过先进先出队列\",{\"1\":{\"4604\":1}}],[\"通过kafkastream流式计算最新的数据\",{\"1\":{\"4662\":1,\"7181\":1}}],[\"通过kraft进行自己的集群管理\",{\"1\":{\"4566\":1}}],[\"通过key的hash对分区取模\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"通过监听机制\",{\"1\":{\"4564\":1}}],[\"通过feign以及java的动态代理机制\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"通过spring\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"通过setaccessible方法可以关闭java语言访问检查\",{\"1\":{\"3945\":1}}],[\"通过率80\",{\"1\":{\"4430\":1}}],[\"通过重复利用已创建的线程降低线程创建和销毁造成的消耗\",{\"1\":{\"3850\":1,\"6004\":1}}],[\"通过自旋方式来获取锁\",{\"1\":{\"3801\":1,\"5813\":1}}],[\"通过上面这些内容\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"通过该属性可以给包中的类注册别名\",{\"1\":{\"4826\":1,\"4974\":1}}],[\"通过该\",{\"1\":{\"3747\":1,\"5979\":1}}],[\"通过线程创建节点加入同步队列的队尾\",{\"1\":{\"3648\":1,\"5891\":1}}],[\"通过压测工具不断加大访问力度\",{\"1\":{\"3622\":1}}],[\"通过查看\",{\"1\":{\"3619\":1}}],[\"通过配置\",{\"1\":{\"3591\":1}}],[\"通过在线程栈信息中高亮显示的\",{\"1\":{\"3560\":1}}],[\"通过在请求和响应报文中写入\",{\"1\":{\"2278\":1}}],[\"通过堆栈分析可以找到原因\",{\"1\":{\"3535\":1}}],[\"通过结果可以看出第一行的java进程cpu使用率最高\",{\"1\":{\"3519\":1}}],[\"通过git\",{\"1\":{\"3342\":1}}],[\"通过网络管理驱动\",{\"1\":{\"3303\":1,\"6089\":1}}],[\"通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中\",{\"1\":{\"3253\":1,\"6858\":1}}],[\"通过连接哨兵来获得当前redis服务的主节点地址\",{\"1\":{\"3197\":1}}],[\"通过加读写锁的方式来避免并行访问\",{\"1\":{\"3016\":1,\"6688\":1}}],[\"通过二级索引\",{\"1\":{\"2789\":1,\"6459\":1}}],[\"通过哈希算法\",{\"1\":{\"2756\":1,\"6425\":1}}],[\"通过键\",{\"1\":{\"2755\":1,\"6424\":1}}],[\"通过协商的加密算法\",{\"1\":{\"2339\":1}}],[\"通过打点统计接口响应时间变化\",{\"1\":{\"2140\":1}}],[\"通过jmap\",{\"1\":{\"2129\":1}}],[\"通过jmap指令导出堆日志\",{\"1\":{\"2125\":1}}],[\"通过mat工具分析\",{\"1\":{\"2127\":1}}],[\"通过参数最大内存\",{\"1\":{\"2121\":1}}],[\"通过调整每次读取的字节数bytesize和休眠时间\",{\"1\":{\"2112\":1}}],[\"通过取模后的结果\",{\"1\":{\"2007\":1}}],[\"通过通知操作的方式来保持多线程同步\",{\"1\":{\"1984\":1,\"6243\":1}}],[\"通过使用工厂模式\",{\"1\":{\"4178\":1}}],[\"通过使用\",{\"1\":{\"1793\":1,\"6298\":1}}],[\"通过回调函数内核会将其加入到这个就绪事件列表中\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"通过回调函数能够对异常情况进行处理\",{\"1\":{\"1520\":1}}],[\"通过两个方面\",{\"1\":{\"1774\":1,\"6264\":1}}],[\"通过这一流程保证了只要提交过后的操作一定在多数结点上留有记录\",{\"1\":{\"4588\":1}}],[\"通过这个方法让整个集群都得知这个分区方案\",{\"1\":{\"4564\":1}}],[\"通过这样的方法\",{\"1\":{\"2010\":1}}],[\"通过这里可以看出\",{\"1\":{\"1688\":1}}],[\"通过这种方式\",{\"1\":{\"2102\":1}}],[\"通过这种依赖关系\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"通过这种\",{\"1\":{\"1266\":1}}],[\"通过主线程和不同的业务子线程之间的执行流程\",{\"1\":{\"1373\":1}}],[\"通过count来进行查询总条数的限制\",{\"1\":{\"1117\":1,\"5699\":1}}],[\"通过class对象调用\",{\"1\":{\"532\":1,\"5420\":1}}],[\"通过page对象作为分页依据\",{\"1\":{\"1116\":1,\"5698\":1}}],[\"通过hashcode\",{\"1\":{\"1069\":1}}],[\"通过装饰角色为其添加一些职责\",{\"1\":{\"875\":1}}],[\"通过类之间不同通信⽅式实现不同⾏为\",{\"1\":{\"854\":1,\"5484\":1}}],[\"通过类和接⼝间的继承和引⽤实现创建复杂结构的对象\",{\"1\":{\"854\":1,\"5484\":1}}],[\"通过类的全限定名获取该类的\",{\"1\":{\"522\":1,\"5410\":1}}],[\"通过比较其他方法\",{\"1\":{\"829\":1}}],[\"通过任意一条从根到叶子简单路径上颜色的约束\",{\"1\":{\"693\":1,\"5460\":1}}],[\"通过构造器去实例化对象\",{\"1\":{\"532\":1,\"5420\":1}}],[\"通过反射消除工厂中的多个分支\",{\"1\":{\"551\":1,\"5429\":1}}],[\"通过反射构造一个类的实例方式有2种\",{\"1\":{\"526\":1,\"5414\":1}}],[\"通过反射\",{\"1\":{\"511\":1,\"5399\":1}}],[\"通过记录每个\",{\"1\":{\"374\":1}}],[\"通过引入\",{\"1\":{\"374\":1}}],[\"通过下面两个问题\",{\"1\":{\"190\":1}}],[\"通过\",{\"0\":{\"3854\":1,\"3899\":1},\"1\":{\"33\":1,\"42\":1,\"228\":1,\"301\":1,\"528\":1,\"531\":1,\"1290\":2,\"1341\":1,\"1775\":1,\"1803\":1,\"1840\":1,\"2365\":1,\"2444\":1,\"2552\":1,\"3625\":1,\"3736\":1,\"3795\":1,\"3874\":1,\"4598\":1,\"4603\":1,\"4604\":1,\"5146\":1,\"5155\":1,\"5416\":1,\"5419\":1,\"5631\":2,\"5665\":1,\"5807\":1,\"5967\":1,\"6029\":1,\"6046\":1,\"6182\":1,\"6265\":1,\"6309\":1,\"6372\":1}}],[\"当内核通知文件描述符可读写时\",{\"1\":{\"6278\":1}}],[\"当内存不足以容纳新写入数据时\",{\"1\":{\"3184\":1,\"3189\":1,\"6842\":1,\"6847\":1}}],[\"当集群中有机器挂了\",{\"1\":{\"6196\":1}}],[\"当集群中已经有过半的\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"当作队列是完全可以的\",{\"1\":{\"4887\":1,\"7265\":1}}],[\"当作队列来使用时\",{\"1\":{\"4883\":1,\"7261\":1}}],[\"当受保护的bucket遭受大流量攻击时\",{\"1\":{\"4718\":1}}],[\"当设计读写操作时\",{\"1\":{\"4638\":1,\"6211\":1}}],[\"当系统出现崩溃影响最大应该是\",{\"1\":{\"4613\":1,\"6186\":1}}],[\"当系统中要加载的类\",{\"1\":{\"398\":1}}],[\"当一台同样遵守\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"当一个\",{\"1\":{\"4599\":1,\"5713\":1,\"6183\":1}}],[\"当一个服务调用另一个服务由于网络原因或自身原因出现问题\",{\"1\":{\"4519\":1,\"6136\":1}}],[\"当一个线程访问同步代码块并获取锁时\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"当一个线程到达屏障时\",{\"1\":{\"1983\":1,\"6242\":1}}],[\"当一个元素加入布隆过滤器中的时候\",{\"1\":{\"3257\":1,\"6862\":1}}],[\"当一个事务对一条记录加了\",{\"1\":{\"2949\":1,\"2950\":1,\"6621\":1,\"6622\":1}}],[\"当一个sqlsession\",{\"1\":{\"1134\":1}}],[\"当选举产生了新的\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"当整个服务框架在启动过程中\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"当远程接口的方法被调用\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"当实际调用的时候\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"当实际kv个数超过threshold时\",{\"1\":{\"969\":1}}],[\"当更多的服务请求到这些资源导致更多的请求等待\",{\"1\":{\"4519\":1,\"6136\":1}}],[\"当更多的元素加入到arraylist中时\",{\"1\":{\"777\":1}}],[\"当springboot应用启动时\",{\"1\":{\"4231\":1}}],[\"当sleep\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"当加载一个类时\",{\"1\":{\"4195\":1}}],[\"当数据库被写入或更新该key的新数据时\",{\"1\":{\"4153\":1}}],[\"当数据量达到一定程度的时候\",{\"1\":{\"631\":1}}],[\"当高并发或有人利用不存在的key频繁攻击时\",{\"1\":{\"4151\":1}}],[\"当jwt过期时\",{\"1\":{\"4064\":1}}],[\"当所有任务都成功关闭了\",{\"1\":{\"3894\":1}}],[\"当所有片段都被写满时\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"当workqueue中没有任务的时候\",{\"1\":{\"3886\":1}}],[\"当任务到达时\",{\"1\":{\"3851\":1,\"6005\":1}}],[\"当循环的条件被其他线程改变时才能进入临界区\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"当后续线程尝试获取锁时\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"当关闭偏向锁功能时\",{\"1\":{\"3803\":1,\"5815\":1}}],[\"当执行一个带有分页条件的查询时\",{\"1\":{\"4956\":1}}],[\"当执行\",{\"1\":{\"3739\":1,\"4945\":1,\"5971\":1}}],[\"当执行插入\",{\"1\":{\"2909\":1,\"6581\":1}}],[\"当对一个共享变量执行操作时\",{\"1\":{\"3695\":1,\"5864\":1}}],[\"当对象的功能要求可以动态地添加\",{\"1\":{\"881\":1}}],[\"当对象增加一个引用时计数器加\",{\"1\":{\"297\":1}}],[\"当头节点释放同步状态的时候\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"当同步状态释放时\",{\"1\":{\"3640\":1,\"5881\":1}}],[\"当同个链路中的所有设备收到\",{\"1\":{\"2380\":1}}],[\"当老年代被填满时执行一次\",{\"1\":{\"3616\":1}}],[\"当新生代被填满时执行一次\",{\"1\":{\"3614\":1}}],[\"当它访问的进程全部终止时\",{\"1\":{\"3468\":1}}],[\"当用户\",{\"1\":{\"5004\":1,\"7286\":1}}],[\"当用户向线程池提交一个任务\",{\"1\":{\"3886\":1}}],[\"当用户请求过来\",{\"1\":{\"3254\":1,\"6859\":1}}],[\"当用户调用\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"当从库和主库第一次复制时\",{\"1\":{\"3233\":1}}],[\"当从根节点到叶子节点的路径上黑色节点相同时\",{\"1\":{\"693\":1,\"5460\":1}}],[\"当主机发送\",{\"1\":{\"7034\":1}}],[\"当主机收到数据包后\",{\"1\":{\"2520\":1,\"2709\":1}}],[\"当主键使用数值类型时\",{\"1\":{\"4116\":1}}],[\"当主库完成\",{\"1\":{\"3236\":1}}],[\"当主节点不能正常工作时\",{\"1\":{\"3196\":1}}],[\"当每个事务开启时\",{\"1\":{\"3044\":1}}],[\"当每个消息被写进去后\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"当读取记录时\",{\"1\":{\"3040\":1,\"6708\":1}}],[\"当事务2对某行数据执行了快照读\",{\"1\":{\"3050\":1}}],[\"当事务回滚时用于将数据恢复到修改前的样子\",{\"1\":{\"3039\":1,\"6707\":1}}],[\"当事务方法被另一个事务方法调用时\",{\"1\":{\"1237\":1,\"5589\":1}}],[\"当会话退出后\",{\"1\":{\"2885\":1,\"6557\":1}}],[\"当查到索引对应的指针或主键后\",{\"1\":{\"2811\":1,\"6483\":1}}],[\"当查询一个元素是否在布隆过滤器中时\",{\"1\":{\"2149\":1}}],[\"当没有显示的指定表的主键时\",{\"1\":{\"2787\":1,\"6456\":1}}],[\"当接收方发现丢了一个中间包的时候\",{\"1\":{\"2696\":1}}],[\"当触发了重传机制\",{\"1\":{\"2689\":1}}],[\"当发生网络分区的时候\",{\"1\":{\"4646\":1,\"6219\":1}}],[\"当发生缺页中断时\",{\"1\":{\"1740\":1}}],[\"当发送方每收到一个\",{\"1\":{\"2680\":1}}],[\"当网络发送拥塞时\",{\"1\":{\"2666\":1}}],[\"当收到三个相同的\",{\"1\":{\"2650\":1}}],[\"当超过指定的时间后\",{\"1\":{\"2649\":1}}],[\"当服务一直处于正常状态\",{\"1\":{\"6140\":1}}],[\"当服务一直处于正常状态能正常调用\",{\"1\":{\"4523\":1}}],[\"当服务端接收到客户端的\",{\"1\":{\"2583\":1}}],[\"当服务器数量发生改变时\",{\"1\":{\"2012\":1}}],[\"当客户端发生的\",{\"1\":{\"2555\":1}}],[\"当通信结束希望断开连接时\",{\"1\":{\"2450\":1}}],[\"当浏览器再次请求访问服务器中的该资源时\",{\"1\":{\"2251\":1}}],[\"当浏览器第一次请求访问服务器资源时\",{\"1\":{\"2234\":1,\"2250\":1}}],[\"当使用threadlocal来维护变量时\",{\"1\":{\"3759\":1}}],[\"当使用\",{\"1\":{\"2249\":1}}],[\"当资源过期时\",{\"1\":{\"2245\":1}}],[\"当资源过期了\",{\"1\":{\"2242\":1}}],[\"当添加元素时\",{\"1\":{\"2171\":1}}],[\"当有超过半数的结点写入后\",{\"1\":{\"4587\":1}}],[\"当有一个新的任务提交时\",{\"1\":{\"3901\":1,\"6048\":1}}],[\"当有线程对表结构进行变更\",{\"1\":{\"2894\":1,\"6566\":1}}],[\"当有线程在执行\",{\"1\":{\"2893\":1,\"6565\":1}}],[\"当有多个数值存储时\",{\"1\":{\"2166\":1}}],[\"当有其它线程改变了hashmap的结构\",{\"1\":{\"945\":1}}],[\"当哈市算法为1时\",{\"1\":{\"2165\":1}}],[\"当哈希表的大小为素数时\",{\"1\":{\"1054\":1,\"1058\":1}}],[\"当应用无法从缓存中获取数据时\",{\"1\":{\"2012\":1}}],[\"当线程第二次再执行同步代码块时\",{\"1\":{\"3797\":1,\"5809\":1}}],[\"当线程在同步队列中不断的通过自旋去获取同步状态\",{\"1\":{\"3649\":1,\"5892\":1}}],[\"当线程抢占锁失败时候\",{\"1\":{\"3641\":1,\"5882\":1}}],[\"当线程已经持有了资源\",{\"1\":{\"1994\":1}}],[\"当线程\",{\"1\":{\"1993\":1,\"1999\":1}}],[\"当线程结束时可以整个回收tlab空间\",{\"1\":{\"274\":1}}],[\"当较高优先级的队列为空\",{\"1\":{\"1942\":1}}],[\"当就绪队列中出现优先级高的进程\",{\"1\":{\"1932\":1,\"1933\":1}}],[\"当进程中的一个线程崩溃时\",{\"1\":{\"1897\":1}}],[\"当进程被切换时\",{\"1\":{\"1872\":1}}],[\"当被监控的\",{\"1\":{\"1778\":1,\"1779\":1,\"6274\":1,\"6275\":1}}],[\"当某个哨兵\",{\"1\":{\"3206\":1}}],[\"当某个\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"当某台机器挂了\",{\"1\":{\"1461\":1,\"6909\":1}}],[\"当检查到有事件产生后\",{\"1\":{\"1768\":1}}],[\"当出现缺页异常\",{\"1\":{\"1718\":1}}],[\"当页被真正访问的时候\",{\"1\":{\"1704\":1,\"1712\":1}}],[\"当enable\",{\"1\":{\"1602\":1,\"1603\":1}}],[\"当调用了回调函数时\",{\"1\":{\"1520\":1}}],[\"当调用dao接口方法时\",{\"1\":{\"1093\":1}}],[\"当这些发送方的数据包被接收方处理后又会向对方发送响应\",{\"1\":{\"2614\":1}}],[\"当这两个目标发生冲突时\",{\"1\":{\"1488\":1,\"6940\":1}}],[\"当这一块内存用完了就将还存活的对象复制到另一块上面\",{\"1\":{\"331\":1}}],[\"当消费者刚拿到这个消息准备进行真正消费的时候\",{\"1\":{\"4675\":1,\"7194\":1}}],[\"当消费者拉取到了分区的某个消息之后\",{\"1\":{\"4675\":1,\"7194\":1}}],[\"当消费者挂掉再重新恢复的时候\",{\"1\":{\"1446\":1}}],[\"当消息达到设置的条件上限时\",{\"1\":{\"1452\":1,\"6900\":1}}],[\"当上下游系统处理能力存在差距的时候\",{\"1\":{\"1410\":1}}],[\"当各个过程都执行完毕\",{\"1\":{\"1372\":1}}],[\"当我需要构建一个web应用程序时\",{\"1\":{\"1348\":1,\"5673\":1}}],[\"当我们不指定\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"当我们需要判断一个元素是否存在于布隆过滤器的时候\",{\"1\":{\"3260\":1,\"6865\":1}}],[\"当我们在浏览器使用开发者工具的时候\",{\"1\":{\"2238\":1}}],[\"当我们在批量读取数据的时候\",{\"1\":{\"1697\":1}}],[\"当我们访问任意图片时\",{\"1\":{\"2010\":1}}],[\"当我们对同一个图片名称做相同的哈希计算时\",{\"1\":{\"2010\":1}}],[\"当我们要对一个链表数组中的某个元素进行增删的时候\",{\"1\":{\"1008\":1}}],[\"当我们的动态代理对象调用一个方法时\",{\"1\":{\"902\":1,\"5520\":1}}],[\"当我们使用\",{\"1\":{\"610\":1}}],[\"当我们想要加载一个类的时候\",{\"1\":{\"438\":1,\"5330\":1}}],[\"当范围对象的状态发生变化时\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"当需要限制\",{\"1\":{\"3304\":1,\"6090\":1}}],[\"当需要为\",{\"1\":{\"3303\":1,\"6089\":1}}],[\"当需要容器镜像时\",{\"1\":{\"3302\":1,\"6088\":1}}],[\"当需要进行内存交换的时候\",{\"1\":{\"1655\":1}}],[\"当需要补全b的属性时\",{\"1\":{\"1274\":1,\"5616\":1}}],[\"当需要多线程操作的时候可以使用线程安全的concurrenthashmap\",{\"1\":{\"943\":1}}],[\"当容器创建了\",{\"1\":{\"1165\":1}}],[\"当map中元素个数超过loadfactor\",{\"1\":{\"1000\":1}}],[\"当hashmap中的元素个数达到13的时候\",{\"1\":{\"996\":1}}],[\"当hashcode离散性很好的时候\",{\"1\":{\"929\":1,\"5446\":1}}],[\"当其size大于12\",{\"1\":{\"991\":1}}],[\"当代理类调用方法的时候\",{\"1\":{\"912\":1,\"5530\":1}}],[\"当前文章不是发布状态\",{\"1\":{\"4979\":1}}],[\"当前文章中存在不确定内容\",{\"1\":{\"4857\":2}}],[\"当前文章中存在违规内容\",{\"1\":{\"4857\":3}}],[\"当前页码等\",{\"1\":{\"4963\":1}}],[\"当前消费到的\",{\"1\":{\"4674\":1,\"7193\":1}}],[\"当前offer情况\",{\"0\":{\"3935\":1}}],[\"当前可以同时运行的线程数量变为最大线程数\",{\"1\":{\"3860\":1,\"6014\":1}}],[\"当前锁是偏向锁\",{\"1\":{\"3801\":1,\"5813\":1}}],[\"当前节点在队列中的状态\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"当前对本事务不可见的其他活跃事务\",{\"1\":{\"3031\":1,\"6697\":1}}],[\"当前读实际上是一种加锁的操作\",{\"1\":{\"3025\":1}}],[\"当前读\",{\"1\":{\"3021\":1}}],[\"当前进程挂起\",{\"1\":{\"1933\":1}}],[\"当前正在写入数据的片段叫活跃片段\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"当前\",{\"1\":{\"903\":1,\"974\":1,\"5521\":1}}],[\"当前执行的语句必属于某个方法\",{\"1\":{\"471\":1,\"5366\":1}}],[\"当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时\",{\"1\":{\"877\":1}}],[\"当多个线程⼀起到达锁位置时\",{\"1\":{\"859\":1,\"5489\":1}}],[\"当第⼀个抢到锁的调⽤获取了实例之后\",{\"1\":{\"859\":1,\"5489\":1}}],[\"当你执行\",{\"1\":{\"3372\":1}}],[\"当你使用代理对象调用方法的时候实际会调用到这个方法\",{\"1\":{\"903\":1,\"5521\":1}}],[\"当你向这两种类型中增加元素的时候\",{\"1\":{\"833\":1}}],[\"当你在\",{\"1\":{\"477\":1,\"5372\":1}}],[\"当然了\",{\"1\":{\"7038\":1}}],[\"当然由于fifo先进先出的特性\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"当然由它形成的\",{\"1\":{\"2569\":1}}],[\"当然首先要保证执行命令的物理机器有足够大的内存\",{\"1\":{\"3576\":1}}],[\"当然其他线程对学生表进行写操作时也会被阻塞\",{\"1\":{\"2882\":1,\"6554\":1}}],[\"当然还会受到系统文件描述符限制\",{\"1\":{\"1771\":1}}],[\"当然我们可以减少手动提交的频率\",{\"1\":{\"1612\":1}}],[\"当然前提是⼦⼯⼚⽀持⽣产该产品\",{\"1\":{\"869\":1,\"5499\":1}}],[\"当然\",{\"1\":{\"779\":1,\"1005\":1,\"1079\":1,\"1128\":1,\"1951\":1,\"2478\":1,\"2966\":1,\"3701\":1,\"5709\":1,\"5870\":1,\"6638\":1}}],[\"当然也可以模拟\",{\"1\":{\"249\":1}}],[\"当向hashset中添加元素的时候\",{\"1\":{\"737\":1}}],[\"当程序启动时\",{\"1\":{\"550\":1,\"5429\":1}}],[\"当程序中可能出现这类异常\",{\"1\":{\"460\":1,\"466\":1,\"5355\":1,\"5361\":1}}],[\"当父类加载器无法加载时\",{\"1\":{\"444\":1,\"5337\":1}}],[\"当父类的加载器为空\",{\"1\":{\"444\":1,\"5337\":1}}],[\"当父类的加载器不为空\",{\"1\":{\"444\":1,\"5337\":1}}],[\"当创建类或接口的运行时常量池时\",{\"1\":{\"291\":1}}],[\"当创建一个对象时\",{\"1\":{\"254\":1}}],[\"当常量池无法再申请到内存时会抛出\",{\"1\":{\"281\":1}}],[\"当养老区内存不足时\",{\"1\":{\"268\":1}}],[\"当伊甸园的空间填满时\",{\"1\":{\"263\":1}}],[\"当\",{\"1\":{\"232\":1,\"256\":1,\"1322\":1,\"1520\":1,\"2459\":1,\"2569\":1,\"2683\":1,\"2684\":1,\"2928\":1,\"2929\":1,\"2930\":1,\"2933\":1,\"2935\":1,\"3164\":1,\"3540\":1,\"3585\":1,\"4605\":1,\"4606\":1,\"4607\":1,\"4617\":1,\"6190\":1,\"6600\":1,\"6601\":1,\"6602\":1,\"6605\":1,\"6607\":1,\"6820\":1}}],[\"当填充年轻代时\",{\"1\":{\"230\":1}}],[\"伊甸园\",{\"1\":{\"230\":1}}],[\"执行一串命令\",{\"1\":{\"5020\":1}}],[\"执行修改后的\",{\"1\":{\"4962\":1}}],[\"执行修改后的sql\",{\"1\":{\"1111\":1}}],[\"执行查询\",{\"1\":{\"4962\":1,\"4965\":1}}],[\"执行前后\",{\"1\":{\"4953\":1}}],[\"执行时间等性能数据\",{\"1\":{\"4950\":1}}],[\"执行顺序\",{\"1\":{\"4946\":1}}],[\"执行增强代码\",{\"1\":{\"4022\":1}}],[\"执行本次操作\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"执行结果等\",{\"1\":{\"4942\":1}}],[\"执行结果会显示各个区内存使用情况及\",{\"1\":{\"3609\":1}}],[\"执行结束后在同步到主内存中去\",{\"1\":{\"3709\":1,\"5909\":1}}],[\"执行成功后显示如下结果\",{\"1\":{\"3578\":1}}],[\"执行过程一样\",{\"1\":{\"3538\":1}}],[\"执行过程\",{\"0\":{\"3536\":1}}],[\"执行删除过期\",{\"1\":{\"3174\":1,\"6832\":1}}],[\"执行后\",{\"1\":{\"2855\":1,\"6527\":1}}],[\"执行请求\",{\"1\":{\"2101\":1}}],[\"执行业务逻辑成功\",{\"1\":{\"2055\":1,\"5760\":1}}],[\"执行最终状态\",{\"1\":{\"2054\":1,\"5759\":1}}],[\"执行三种基本状态\",{\"1\":{\"1902\":1}}],[\"执行程序代码\",{\"1\":{\"1855\":1,\"6231\":1}}],[\"执行刷新容器后的后置处理逻辑\",{\"1\":{\"1389\":1}}],[\"执行打包操作的配置\",{\"1\":{\"1357\":1,\"5682\":1}}],[\"执行事务前后\",{\"1\":{\"1221\":1,\"5573\":1}}],[\"执行完同步代码块后\",{\"1\":{\"3797\":1,\"5809\":1}}],[\"执行完成后\",{\"1\":{\"1204\":1,\"5556\":1}}],[\"执行完内存回收后是否会在内存空间中产生内存碎片\",{\"1\":{\"261\":1}}],[\"执行\",{\"1\":{\"1147\":1,\"3301\":1,\"3550\":1,\"3553\":1,\"3558\":1,\"4939\":1,\"5713\":1,\"5727\":1,\"6087\":1}}],[\"执行minor\",{\"1\":{\"232\":1}}],[\"执行垃圾收集\",{\"1\":{\"230\":1}}],[\"执行引擎\",{\"1\":{\"179\":1,\"5288\":1}}],[\"gnome\",{\"1\":{\"3454\":1}}],[\"gnu\",{\"1\":{\"3446\":1,\"3447\":3,\"3449\":1}}],[\"glibc\",{\"1\":{\"3449\":1}}],[\"global\",{\"1\":{\"1666\":1,\"3527\":1,\"4826\":1,\"4974\":1}}],[\"globalexceptionhandler\",{\"1\":{\"1325\":1,\"1327\":2}}],[\"guest\",{\"1\":{\"3311\":1}}],[\"guava是google开发的一个java工具库\",{\"1\":{\"2175\":1}}],[\"guava<\",{\"1\":{\"2174\":1}}],[\"guoguocai\",{\"1\":{\"2144\":1}}],[\"gone\",{\"1\":{\"7062\":1}}],[\"go\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"google\",{\"1\":{\"2174\":1,\"2177\":2,\"2182\":2,\"2185\":2,\"3290\":1,\"6079\":1,\"6989\":2}}],[\"goto\",{\"1\":{\"491\":1,\"5378\":1}}],[\"greentextscan\",{\"1\":{\"4857\":4}}],[\"greenimagescan\",{\"1\":{\"4857\":4}}],[\"greater\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"grep\",{\"1\":{\"1947\":1,\"1948\":1,\"3424\":1,\"3426\":2,\"3447\":1,\"3559\":1,\"3625\":2}}],[\"grpc|dubbo\",{\"1\":{\"4554\":1}}],[\"grpc\",{\"1\":{\"3560\":1}}],[\"graph\",{\"1\":{\"3302\":1,\"6088\":1}}],[\"graphdriver\",{\"1\":{\"3302\":1,\"6088\":1}}],[\"group中有多个consumer\",{\"1\":{\"1469\":1,\"6917\":1}}],[\"group\",{\"1\":{\"1380\":1,\"1439\":1,\"1580\":1,\"3479\":1,\"6740\":1}}],[\"groupid\",{\"1\":{\"1380\":1}}],[\"groupid>\",{\"1\":{\"1337\":1,\"2174\":2,\"4545\":1,\"5661\":1}}],[\"grow\",{\"1\":{\"812\":1}}],[\"gap\",{\"0\":{\"6623\":1},\"1\":{\"2945\":1,\"2946\":1,\"2952\":1,\"2956\":1,\"6617\":1,\"6618\":1,\"6624\":1,\"6628\":1}}],[\"gateway实现鉴权\",{\"1\":{\"4184\":1}}],[\"gateway\",{\"1\":{\"2211\":1,\"4658\":1,\"7177\":1}}],[\"gather\",{\"1\":{\"1801\":1,\"6307\":1}}],[\"garbage\",{\"1\":{\"372\":1}}],[\"gzip\",{\"1\":{\"1575\":1}}],[\"given\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"give\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"git是分布式版本控制系统\",{\"1\":{\"3376\":1}}],[\"git跟其他版本控制器有啥区别\",{\"0\":{\"3375\":1}}],[\"git自动为我们创建了唯一一个master分支\",{\"1\":{\"3367\":1}}],[\"gitignore\",{\"1\":{\"3380\":1}}],[\"gitignore新建文件\",{\"1\":{\"3379\":1}}],[\"gitignore把任何文件都加入\",{\"1\":{\"3363\":1}}],[\"gitignore做过滤\",{\"1\":{\"3363\":1}}],[\"git本地有三个工作区域\",{\"1\":{\"3332\":1}}],[\"git的4个区域及转换\",{\"0\":{\"3331\":1}}],[\"git\",{\"0\":{\"3330\":1,\"3354\":1,\"3362\":2,\"3364\":1},\"1\":{\"3334\":2,\"3338\":9,\"3347\":1,\"3355\":1,\"3356\":1,\"3358\":1,\"3359\":2,\"3360\":1,\"3361\":7,\"3363\":1,\"3365\":1,\"3366\":1,\"3367\":1,\"3371\":1,\"3372\":3,\"3374\":3,\"3383\":1,\"3386\":1,\"3389\":1,\"4507\":1,\"6130\":1}}],[\"gitee\",{\"1\":{\"1081\":1}}],[\"github\",{\"1\":{\"1054\":1,\"2144\":1,\"2174\":1,\"2177\":1,\"2185\":1,\"3338\":2}}],[\"g1\",{\"1\":{\"343\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1}}],[\"g\",{\"1\":{\"250\":2,\"3411\":1,\"3597\":1}}],[\"geospatial\",{\"1\":{\"3095\":1,\"6751\":1}}],[\"geometry\",{\"1\":{\"2772\":1,\"6441\":1}}],[\"getviews\",{\"1\":{\"4999\":2}}],[\"getvalue\",{\"1\":{\"1474\":1,\"2188\":1,\"6923\":1}}],[\"getlikes\",{\"1\":{\"4999\":2}}],[\"getlargestpoolsize\",{\"1\":{\"3927\":1}}],[\"getenable\",{\"1\":{\"4979\":5}}],[\"getentry\",{\"1\":{\"3765\":1}}],[\"getbyid\",{\"1\":{\"4979\":1}}],[\"getbytes\",{\"1\":{\"4910\":2}}],[\"getimages\",{\"1\":{\"4857\":2}}],[\"getid\",{\"1\":{\"4857\":1,\"4979\":4,\"4986\":1,\"4999\":2}}],[\"getinputstream\",{\"1\":{\"2111\":1}}],[\"getinstance\",{\"1\":{\"858\":1,\"5488\":1}}],[\"getname\",{\"1\":{\"4857\":2}}],[\"gettitle\",{\"1\":{\"4857\":2}}],[\"gettype\",{\"1\":{\"4857\":1}}],[\"gettaskcount\",{\"1\":{\"3925\":1}}],[\"gettask\",{\"1\":{\"3888\":1}}],[\"getdata\",{\"1\":{\"4857\":1,\"4999\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"548\":1,\"5427\":1}}],[\"getdeclaredconstructors\",{\"1\":{\"547\":1,\"5427\":1}}],[\"getdeclaredmethod\",{\"1\":{\"543\":1,\"975\":1,\"980\":3,\"993\":2,\"5425\":1}}],[\"getdeclaredmethods\",{\"1\":{\"542\":1,\"5425\":1}}],[\"getdeclaredfield\",{\"1\":{\"538\":1,\"975\":1,\"993\":6,\"5423\":1}}],[\"getdeclaredfields\",{\"1\":{\"537\":1,\"5423\":1}}],[\"getscore\",{\"1\":{\"4999\":1}}],[\"getsensitives\",{\"1\":{\"4857\":2}}],[\"getsecuritymanager\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"getstatus\",{\"1\":{\"4857\":1,\"4979\":1}}],[\"getapphttpcodeenum\",{\"1\":{\"5650\":1,\"5651\":1}}],[\"getarticleid\",{\"1\":{\"4857\":2,\"4979\":2}}],[\"getactivecount\",{\"1\":{\"3929\":1}}],[\"getandincrement\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"getproxy\",{\"1\":{\"3979\":2}}],[\"getpoolsize\",{\"1\":{\"3928\":1}}],[\"getparentdelegationtime\",{\"1\":{\"444\":1,\"5337\":1}}],[\"getkey\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"getglobalexceptionhandler\",{\"1\":{\"1327\":1}}],[\"getobject\",{\"1\":{\"1283\":1,\"5625\":1}}],[\"getuserid\",{\"1\":{\"4857\":2}}],[\"getuserbyid\",{\"1\":{\"4748\":1,\"4750\":1,\"4755\":1}}],[\"getuser\",{\"1\":{\"1095\":1,\"1097\":2}}],[\"get\",{\"1\":{\"975\":1,\"993\":6,\"1466\":2,\"1474\":3,\"1517\":2,\"1518\":1,\"1544\":1,\"2188\":1,\"2222\":1,\"2223\":3,\"3758\":1,\"3763\":1,\"3765\":1,\"3772\":1,\"3775\":1,\"4857\":11,\"4981\":1,\"5021\":1,\"5990\":1,\"5994\":1,\"6914\":2,\"6923\":3}}],[\"getmessage\",{\"1\":{\"1325\":1,\"5651\":1}}],[\"getmethod\",{\"1\":{\"541\":1,\"5425\":1}}],[\"getmethods\",{\"1\":{\"540\":1,\"5425\":1}}],[\"getmapping\",{\"1\":{\"1329\":1,\"4123\":1,\"4534\":1,\"4929\":2,\"4931\":2,\"4933\":3,\"4935\":2,\"4994\":2}}],[\"getmap\",{\"1\":{\"507\":1,\"513\":1,\"3765\":3,\"5395\":1,\"5401\":1,\"5996\":2}}],[\"getfield\",{\"1\":{\"536\":1,\"5423\":1}}],[\"getfields\",{\"1\":{\"535\":1,\"5423\":1}}],[\"getfindclasses\",{\"1\":{\"444\":1,\"5337\":1}}],[\"getfindclasstime\",{\"1\":{\"444\":1,\"5337\":1}}],[\"getchannels\",{\"1\":{\"4929\":1,\"4931\":1,\"4994\":1,\"4999\":1}}],[\"getchannelid\",{\"1\":{\"4857\":1,\"4999\":1}}],[\"getcollection\",{\"1\":{\"4999\":2}}],[\"getcomment\",{\"1\":{\"4999\":2}}],[\"getcompletedtaskcount\",{\"1\":{\"3926\":1}}],[\"getcode\",{\"1\":{\"4857\":2,\"4979\":1,\"4999\":1}}],[\"getconnection\",{\"1\":{\"4910\":1}}],[\"getconnectionfactory\",{\"1\":{\"4910\":1}}],[\"getcontent\",{\"1\":{\"4857\":2}}],[\"getcontext\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"getconstructors\",{\"1\":{\"545\":1,\"5427\":1}}],[\"getconstructor\",{\"1\":{\"513\":1,\"530\":1,\"531\":1,\"546\":1,\"5401\":1,\"5418\":1,\"5419\":1,\"5427\":1}}],[\"getclassloader\",{\"1\":{\"3977\":1}}],[\"getclassloadinglock\",{\"1\":{\"444\":1,\"5337\":1}}],[\"getclass\",{\"1\":{\"520\":1,\"521\":1,\"975\":1,\"980\":3,\"993\":1,\"5408\":1,\"5409\":1}}],[\"getruntime\",{\"1\":{\"250\":2}}],[\"gen使用是否过高\",{\"1\":{\"2131\":1}}],[\"gen空间或转为使用cms\",{\"1\":{\"400\":1}}],[\"gen占满造成fullgc现象\",{\"1\":{\"400\":1}}],[\"generation可能会被占满\",{\"1\":{\"398\":1}}],[\"generation中存放的为一些class的信息\",{\"1\":{\"398\":1}}],[\"generation\",{\"0\":{\"229\":1,\"235\":1},\"1\":{\"908\":1,\"5526\":1}}],[\"gc吗\",{\"1\":{\"4402\":1}}],[\"gc和full\",{\"1\":{\"4402\":1}}],[\"gc效率是否低下等\",{\"1\":{\"2131\":1}}],[\"gc异常\",{\"1\":{\"403\":1}}],[\"gc的间隔时间\",{\"1\":{\"3991\":1}}],[\"gc的次数\",{\"1\":{\"3991\":1}}],[\"gc的频率\",{\"1\":{\"402\":1}}],[\"gc的情况下也会执行full\",{\"1\":{\"398\":1}}],[\"gc阶段被回收\",{\"1\":{\"395\":1}}],[\"gc\",{\"0\":{\"3990\":1},\"1\":{\"223\":1,\"230\":1,\"232\":1,\"233\":1,\"234\":1,\"236\":2,\"256\":1,\"258\":2,\"261\":1,\"263\":1,\"268\":1,\"269\":1,\"301\":1,\"302\":1,\"363\":1,\"364\":1,\"370\":1,\"376\":1,\"377\":1,\"379\":1,\"382\":1,\"398\":1,\"400\":1,\"401\":1,\"402\":2,\"824\":1,\"826\":1,\"3527\":8,\"3534\":1,\"3544\":2,\"3545\":1,\"3561\":3,\"3586\":1,\"3606\":1,\"3607\":1,\"3608\":3,\"3609\":1,\"3992\":2,\"4402\":1}}],[\"4e161a06a0afcae8d2c06603d676de4e\",{\"1\":{\"6934\":1}}],[\"42992084\",{\"1\":{\"5103\":1}}],[\"4242\",{\"1\":{\"1493\":1,\"2136\":1,\"6946\":1}}],[\"4对称加密和非对称加密有哪些优缺点\",{\"0\":{\"5098\":1}}],[\"4优化四\",{\"0\":{\"4804\":1}}],[\"4zookeeper\",{\"0\":{\"4628\":1}}],[\"4自旋锁\",{\"0\":{\"3821\":1}}],[\"4重量级锁\",{\"0\":{\"3806\":1}}],[\"4volatile总结\",{\"0\":{\"3725\":1}}],[\"4使用jdk自带的命令jstack\",{\"0\":{\"3526\":1}}],[\"4获取文件内容\",{\"0\":{\"3414\":1}}],[\"4获取类的所有信息\",{\"0\":{\"533\":1}}],[\"4如何从\",{\"0\":{\"3317\":1}}],[\"4hash\",{\"0\":{\"3123\":1}}],[\"410\",{\"1\":{\"7062\":1}}],[\"41361506\",{\"1\":{\"3059\":1}}],[\"4163ms\",{\"1\":{\"636\":1}}],[\"4去跟read\",{\"1\":{\"3053\":1}}],[\"4整体流程\",{\"0\":{\"3049\":1}}],[\"4aof\",{\"0\":{\"3158\":1}}],[\"4acid事务\",{\"0\":{\"2967\":1}}],[\"4auto\",{\"0\":{\"2918\":1}}],[\"4插入意向锁\",{\"0\":{\"2961\":1}}],[\"4二级索引\",{\"0\":{\"2788\":1}}],[\"4二叉树的性质\",{\"0\":{\"676\":1}}],[\"4快速恢复\",{\"0\":{\"2701\":1}}],[\"4拥塞控制\",{\"0\":{\"2662\":1}}],[\"4第二次挥手丢失了\",{\"0\":{\"2607\":1}}],[\"4为什么每次建立\",{\"0\":{\"2560\":1}}],[\"482\",{\"1\":{\"3527\":1}}],[\"48\",{\"1\":{\"2477\":1}}],[\"4什么是\",{\"0\":{\"2460\":1}}],[\"443\",{\"1\":{\"2308\":1,\"7076\":1}}],[\"44901983\",{\"1\":{\"1511\":1,\"6969\":1}}],[\"4get\",{\"0\":{\"2218\":1}}],[\"4g数据找系统记录\",{\"0\":{\"2039\":1,\"5744\":1}}],[\"409\",{\"1\":{\"7062\":1}}],[\"40min\",{\"0\":{\"4395\":1}}],[\"404\",{\"1\":{\"2207\":1}}],[\"403\",{\"1\":{\"2206\":1}}],[\"400\",{\"1\":{\"2205\":1,\"2209\":1}}],[\"400ms\",{\"1\":{\"1417\":1}}],[\"4xx\",{\"1\":{\"2204\":1}}],[\"4步\",{\"1\":{\"2109\":1}}],[\"4号图片将会被缓存到服务器c上\",{\"1\":{\"2028\":1}}],[\"4信号量\",{\"0\":{\"1961\":1}}],[\"4时间片轮转调度算法\",{\"0\":{\"1923\":1}}],[\"4时钟页面置换算法\",{\"0\":{\"1738\":1}}],[\"4调度算法\",{\"0\":{\"1911\":1}}],[\"4循环扫描算法\",{\"0\":{\"1760\":1}}],[\"4md5的应用场景\",{\"0\":{\"5037\":1}}],[\"4mysql\",{\"0\":{\"1707\":1}}],[\"4mb\",{\"1\":{\"1663\":1}}],[\"4minorgc和fullgc触发条件\",{\"0\":{\"383\":1}}],[\"4kb\",{\"1\":{\"1656\":1,\"1663\":1}}],[\"4k\",{\"1\":{\"1424\":2,\"1427\":1}}],[\"4spring解决\",{\"0\":{\"1259\":1}}],[\"4serial\",{\"0\":{\"356\":1}}],[\"45161172\",{\"1\":{\"1153\":1,\"5734\":1}}],[\"4总结\",{\"0\":{\"1144\":1,\"3698\":1}}],[\"4动态代理\",{\"0\":{\"892\":1}}],[\"4红黑树的效率\",{\"0\":{\"701\":1}}],[\"4q4\",{\"0\":{\"595\":1}}],[\"4java\",{\"0\":{\"476\":1}}],[\"4双亲委派模型\",{\"0\":{\"437\":1}}],[\"4分代收集\",{\"0\":{\"335\":1}}],[\"4设置堆内存大小和\",{\"0\":{\"241\":1}}],[\"4\",{\"0\":{\"229\":1,\"235\":1,\"238\":1,\"241\":1,\"251\":1,\"260\":1,\"270\":1,\"276\":1,\"386\":1,\"389\":1,\"407\":1,\"408\":1,\"411\":1,\"414\":1,\"415\":1,\"420\":1,\"423\":1,\"437\":1,\"641\":1,\"727\":1,\"767\":1,\"860\":1,\"861\":1,\"865\":1,\"868\":1,\"898\":1,\"905\":1,\"913\":1,\"924\":1,\"1208\":1,\"1260\":1,\"1269\":1,\"1331\":1,\"1501\":1,\"1502\":1,\"1504\":1,\"1508\":1,\"1653\":1,\"1662\":1,\"1670\":1,\"1709\":1,\"1713\":1,\"1912\":1,\"1916\":1,\"1919\":1,\"1923\":1,\"1927\":1,\"1935\":1,\"1976\":1,\"1990\":1,\"1996\":1,\"2137\":1,\"2397\":1,\"2638\":1,\"2639\":1,\"2641\":1,\"2644\":1,\"2679\":1,\"2685\":1,\"2690\":1,\"2701\":1,\"2980\":1,\"2985\":1,\"2989\":1,\"3064\":1,\"3169\":1,\"3170\":1,\"3178\":1,\"3308\":1,\"3309\":1,\"3313\":1,\"3315\":1,\"3317\":1,\"3320\":1,\"3325\":1,\"3343\":1,\"3459\":1,\"3646\":1,\"3914\":1,\"3943\":1,\"4124\":1,\"4213\":1,\"4535\":1,\"4540\":1,\"4543\":1,\"4635\":1,\"4636\":1,\"4644\":1,\"5038\":1,\"5085\":1,\"5469\":1,\"7201\":1},\"1\":{\"248\":1,\"250\":1,\"971\":1,\"990\":1,\"1016\":1,\"1035\":1,\"1041\":1,\"1203\":1,\"1285\":1,\"1309\":1,\"1313\":1,\"1366\":1,\"1440\":1,\"1493\":1,\"1663\":1,\"1794\":1,\"1802\":1,\"2022\":1,\"2116\":1,\"2136\":1,\"2329\":1,\"2338\":1,\"2434\":1,\"2491\":1,\"2742\":1,\"2953\":1,\"2970\":1,\"3009\":2,\"3053\":1,\"3075\":1,\"3143\":1,\"3187\":1,\"3351\":1,\"3390\":3,\"3410\":2,\"3432\":1,\"3527\":1,\"3606\":1,\"3625\":1,\"3672\":1,\"3772\":2,\"3966\":1,\"3978\":1,\"4035\":1,\"4133\":1,\"4182\":1,\"4283\":1,\"4291\":1,\"4313\":1,\"4319\":1,\"4328\":1,\"4342\":1,\"4351\":1,\"4362\":1,\"4373\":1,\"4384\":1,\"4400\":1,\"4431\":1,\"4445\":1,\"4453\":1,\"4849\":1,\"4857\":1,\"4882\":1,\"4979\":1,\"5555\":1,\"5611\":1,\"5627\":1,\"5643\":1,\"5691\":1,\"5838\":1,\"6299\":1,\"6308\":1,\"6327\":1,\"6411\":1,\"6625\":1,\"6642\":1,\"6681\":2,\"6726\":1,\"6799\":1,\"6845\":1,\"6946\":1,\"7108\":1,\"7116\":1,\"7138\":1,\"7144\":1,\"7153\":1,\"7167\":1,\"7238\":1,\"7260\":1}}],[\"4堆内存\",{\"0\":{\"221\":1}}],[\"就代表请求被成功处理\",{\"1\":{\"7058\":1}}],[\"就一直不断地把这个事件传递给用户\",{\"1\":{\"6277\":1}}],[\"就可能被破解掉\",{\"1\":{\"5054\":1}}],[\"就可以通过它找到根域\",{\"1\":{\"7091\":1}}],[\"就可以通过java代码构造上传文件的http请求了\",{\"1\":{\"2102\":1}}],[\"就可以调用服务注册中心的服务\",{\"1\":{\"4541\":1}}],[\"就可以定位到接口中耗时的代码位置\",{\"1\":{\"3622\":1}}],[\"就可以找出可能会分配大量对象的代码\",{\"1\":{\"3582\":1}}],[\"就可以看到结果了\",{\"1\":{\"3580\":1}}],[\"就可以分为四个工作区域\",{\"1\":{\"3332\":1}}],[\"就可以查到数据了\",{\"1\":{\"2814\":1,\"6486\":1}}],[\"就可以对该\",{\"1\":{\"2643\":1}}],[\"就可以发第二个请求出去\",{\"1\":{\"2297\":1,\"2350\":1}}],[\"就可以了\",{\"1\":{\"2094\":1,\"3214\":1}}],[\"就可以打破死锁了\",{\"1\":{\"2002\":1}}],[\"就可以完成文件的传输\",{\"1\":{\"1807\":1,\"6314\":1}}],[\"就可以知道消息是否发送成功\",{\"1\":{\"1543\":1}}],[\"就可以将高峰期过多的流量请求放进消息队列\",{\"1\":{\"1422\":1}}],[\"就可以使用异步解决\",{\"1\":{\"1419\":1}}],[\"就可以实现取模运算了\",{\"1\":{\"1029\":1}}],[\"就向所有\",{\"1\":{\"4606\":1}}],[\"就向客户端发送\",{\"1\":{\"2595\":1}}],[\"就变了\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"就变成了四级目录\",{\"1\":{\"1665\":1}}],[\"就去看这个接口\",{\"1\":{\"4436\":1}}],[\"就光写大论文了\",{\"1\":{\"4417\":1}}],[\"就关于应聘的软件开发岗位谈一下实际的开发\",{\"1\":{\"4349\":1}}],[\"就关闭当前文件\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"就算数据库泄漏\",{\"1\":{\"5052\":1}}],[\"就算老子啥都不会也不去你这个垃圾公司\",{\"1\":{\"4287\":1,\"7112\":1}}],[\"就算再急也没用\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"就从\",{\"1\":{\"4105\":1}}],[\"就读于陕西师范大学\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"就新建一个线程来执行任务\",{\"1\":{\"3884\":1,\"6039\":1}}],[\"就直接从当前节点中读取数据\",{\"1\":{\"4594\":1}}],[\"就直接获取到锁\",{\"1\":{\"3842\":1,\"5958\":1}}],[\"就直接使用取模算法了呢\",{\"1\":{\"1049\":1}}],[\"就造成了内存泄露\",{\"1\":{\"3773\":1}}],[\"就有可能造成死锁\",{\"1\":{\"3628\":1}}],[\"就有了拥塞控制\",{\"1\":{\"2667\":1}}],[\"就有了一致性哈希算法\",{\"1\":{\"2012\":1}}],[\"就提交了事务\",{\"1\":{\"3052\":1}}],[\"就要升级到\",{\"1\":{\"3008\":2,\"6680\":2}}],[\"就感觉发生了幻觉一样\",{\"1\":{\"2994\":1,\"6666\":1}}],[\"就意味着发生了\",{\"1\":{\"2981\":1,\"2986\":1,\"2990\":1,\"6653\":1,\"6658\":1,\"6662\":1}}],[\"就意味着这个过程执行完毕了\",{\"1\":{\"1373\":1}}],[\"就好比买一件商品\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"就好了\",{\"1\":{\"609\":1}}],[\"就采用轻量级锁\",{\"1\":{\"2929\":1,\"6601\":1}}],[\"就采用\",{\"1\":{\"2928\":1,\"6600\":1}}],[\"就把其设为同步队列中的头节点\",{\"1\":{\"3649\":1,\"5892\":1}}],[\"就把这个轻量级锁释放了\",{\"1\":{\"2926\":1,\"6598\":1}}],[\"就把当前图片缓存在0号服务器上\",{\"1\":{\"2010\":1}}],[\"就都会被阻塞\",{\"1\":{\"2901\":1,\"6573\":1}}],[\"就无法申请到\",{\"1\":{\"2900\":1,\"6572\":1}}],[\"就无法使用\",{\"1\":{\"1157\":1,\"5538\":1}}],[\"就肯定能命中索引\",{\"1\":{\"2838\":1,\"6510\":1}}],[\"就相当于定位到了数据\",{\"1\":{\"2799\":1,\"6471\":1}}],[\"就相当于取x的2进制的最后三位数\",{\"1\":{\"1023\":1}}],[\"就属于非聚簇索引\",{\"1\":{\"2776\":1,\"2805\":1,\"6445\":1,\"6477\":1}}],[\"就这么一直增长着后\",{\"1\":{\"2688\":1}}],[\"就减少\",{\"1\":{\"2673\":1}}],[\"就能知道该接口的请求次数\",{\"1\":{\"5013\":1}}],[\"就能\",{\"1\":{\"2646\":1}}],[\"就能比较容易地进行选择了\",{\"1\":{\"758\":1}}],[\"就进入了\",{\"1\":{\"2599\":1}}],[\"就进入syn\",{\"1\":{\"2578\":1}}],[\"就只能先主动建立一个连接\",{\"1\":{\"2555\":1}}],[\"就只能从其他follower中选取\",{\"1\":{\"1536\":1}}],[\"就完全是使用普通的\",{\"1\":{\"2343\":1}}],[\"就排查代码逻辑\",{\"1\":{\"2121\":1}}],[\"就应答ack\",{\"1\":{\"2053\":1,\"5758\":1}}],[\"就缓存在1号服务器上\",{\"1\":{\"2010\":1}}],[\"就容易多了\",{\"1\":{\"2005\":1}}],[\"就绪队列的等待时间\",{\"1\":{\"1930\":1}}],[\"就绪状态的线程获取了cpu\",{\"1\":{\"1855\":1,\"6231\":1}}],[\"就绪状态\",{\"1\":{\"1854\":1,\"6230\":1}}],[\"就已经确定了优先级了\",{\"1\":{\"1929\":1}}],[\"就利用了\",{\"1\":{\"1810\":1,\"6317\":1}}],[\"就清除访问位\",{\"1\":{\"1742\":1}}],[\"就淘汰该页面\",{\"1\":{\"1741\":1}}],[\"就被污染了\",{\"1\":{\"1697\":1}}],[\"就将段基地址加上段内偏移量得到物理内存地址\",{\"1\":{\"1645\":1}}],[\"就将元素添加进去\",{\"1\":{\"737\":1}}],[\"就每秒从\",{\"1\":{\"1426\":1}}],[\"就不得不干掉zk\",{\"1\":{\"4569\":1}}],[\"就不需要经过内核了\",{\"1\":{\"1908\":1}}],[\"就不会挂掉\",{\"1\":{\"1426\":1}}],[\"就不会出现峰值流量了\",{\"1\":{\"1422\":1}}],[\"就不做过多的介绍了\",{\"1\":{\"1073\":1}}],[\"就像上面的\",{\"1\":{\"5013\":1}}],[\"就像一棵倒立的树\",{\"1\":{\"3476\":1,\"5741\":1}}],[\"就像一个山峰\",{\"1\":{\"1421\":1}}],[\"就像一个工具类\",{\"1\":{\"744\":1}}],[\"就像调用普通函数一样\",{\"1\":{\"3432\":1}}],[\"就像是面向对象程序设计中的\",{\"1\":{\"3295\":1}}],[\"就像管理普通的代码一样\",{\"1\":{\"3292\":1,\"6081\":1}}],[\"就像下图所示\",{\"1\":{\"3201\":1}}],[\"就像相机拍照那样\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"就像这个事务从来没有执行过一样\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"就像我们自己做的例子一样\",{\"1\":{\"1272\":1,\"5614\":1}}],[\"就二者的效率来说\",{\"1\":{\"915\":1,\"5533\":1}}],[\"就\",{\"1\":{\"897\":1,\"2444\":1,\"5515\":1}}],[\"就⽐较难办了\",{\"1\":{\"869\":1,\"5499\":1}}],[\"就需要在操作共享资源前加上互斥锁\",{\"1\":{\"6375\":1}}],[\"就需要通过一些优化手段来提高查询效率\",{\"1\":{\"4117\":1}}],[\"就需要遍历表里所有记录\",{\"1\":{\"2915\":1,\"6587\":1}}],[\"就需要增加服务器数量\",{\"1\":{\"2012\":1}}],[\"就需要修改⼯⼚类的判断逻辑\",{\"1\":{\"863\":1,\"5493\":1}}],[\"就需要提及exception\",{\"1\":{\"488\":1,\"5375\":1}}],[\"就如数据库中的唯一约束\",{\"1\":{\"736\":1}}],[\"就说用jmeter测试接口\",{\"1\":{\"4436\":1}}],[\"就说\",{\"1\":{\"620\":1}}],[\"就是多一些queue而已\",{\"1\":{\"6965\":1}}],[\"就是将\",{\"1\":{\"6381\":1}}],[\"就是单机同时处理\",{\"1\":{\"6282\":1}}],[\"就是密文传输密码http\",{\"1\":{\"5047\":1}}],[\"就是明文传输密码http\",{\"1\":{\"5041\":1}}],[\"就是说服务器在一秒的时间内处理了多少个请求\",{\"1\":{\"5006\":1}}],[\"就是没有选举权和被选举权的\",{\"1\":{\"4634\":1,\"6177\":1}}],[\"就是没有服务端参与\",{\"1\":{\"2646\":1}}],[\"就是指只有一台客户端\",{\"1\":{\"4593\":1}}],[\"就是一种\",{\"1\":{\"5953\":1}}],[\"就是一种读写锁\",{\"1\":{\"3837\":1}}],[\"就是一个queue对应一个consumer\",{\"1\":{\"6967\":1}}],[\"就是一个raft选举算法\",{\"1\":{\"3210\":1}}],[\"就是一个很简单的数组元素求和\",{\"1\":{\"1626\":1}}],[\"就是一个完整对象了\",{\"1\":{\"1279\":1,\"5621\":1}}],[\"就是一个接口\",{\"1\":{\"603\":1}}],[\"就是一个动态数组\",{\"1\":{\"573\":1}}],[\"就是采用自旋锁\",{\"1\":{\"3826\":1,\"5943\":1}}],[\"就是所有的控制权都交给了操作系统\",{\"1\":{\"3808\":1,\"5819\":1}}],[\"就是所有副本都失效了\",{\"1\":{\"1537\":1}}],[\"就是必须确保文件路径事先已创建好\",{\"1\":{\"3571\":1}}],[\"就是安全存放数据的位置\",{\"1\":{\"3335\":1}}],[\"就是你平时存放项目代码的地方\",{\"1\":{\"3333\":1}}],[\"就是你的完整创建依赖于我\",{\"1\":{\"1253\":1,\"5605\":1}}],[\"就是它读取的是记录的最新版本\",{\"1\":{\"3022\":1}}],[\"就是开启了事务\",{\"1\":{\"2897\":1,\"6569\":1}}],[\"就是冗余索引\",{\"1\":{\"2838\":1,\"6510\":1}}],[\"就是\",{\"1\":{\"2817\":1,\"3769\":2,\"4648\":2,\"6000\":2,\"6221\":2,\"6489\":1,\"6989\":1}}],[\"就是我的域名我做主\",{\"1\":{\"2394\":1,\"7098\":1}}],[\"就是在\",{\"1\":{\"2266\":1}}],[\"就是下图的叠加情况\",{\"1\":{\"2166\":1}}],[\"就是保存每个节点的表id给前端\",{\"1\":{\"2062\":1,\"5767\":1}}],[\"就是拿出一块虚拟地址空间来\",{\"1\":{\"1960\":1}}],[\"就是内核里面的一串缓存\",{\"1\":{\"1954\":1}}],[\"就是线程\",{\"1\":{\"1889\":1}}],[\"就是通过遍历文件描述符集合的方式\",{\"1\":{\"1768\":1}}],[\"就是磁道只响应一个方向上的请求\",{\"1\":{\"1761\":1}}],[\"就是把多个partition均衡的分配给多个消费者\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"就是利用它实现的\",{\"1\":{\"1182\":1}}],[\"就是基于动态代理的\",{\"1\":{\"1157\":1,\"5538\":1}}],[\"就是为了把高位的特征和低位的特征组合起来\",{\"1\":{\"1036\":1}}],[\"就是当达到扩容条件时会进行扩容\",{\"1\":{\"986\":1}}],[\"就是能在线性数据结构的两段\",{\"1\":{\"615\":1}}],[\"就是做了更高层次的抽象\",{\"1\":{\"602\":1}}],[\"就是应该优先考虑组合关系\",{\"1\":{\"593\":1}}],[\"就必须采取某种方式进行处理\",{\"1\":{\"465\":1,\"5360\":1}}],[\"就重写\",{\"1\":{\"436\":1,\"5327\":1}}],[\"就比如说\",{\"1\":{\"428\":1,\"5319\":1}}],[\"就会阻塞住所有的\",{\"1\":{\"7073\":1}}],[\"就会执行该消息\",{\"1\":{\"4607\":1}}],[\"就会导致到时候统计出来的次数会多一倍\",{\"1\":{\"5014\":1}}],[\"就会导致雪崩\",{\"1\":{\"4525\":1,\"6142\":1}}],[\"就会导致缓存在某一个时刻同时实效\",{\"1\":{\"4145\":1}}],[\"就会处于空闲状态\",{\"1\":{\"3897\":1,\"6044\":1}}],[\"就会处于等待状态\",{\"1\":{\"1993\":1}}],[\"就会将这段代码所属的同步锁消除掉\",{\"1\":{\"3811\":1,\"5822\":1}}],[\"就会将该命令写入到\",{\"1\":{\"3155\":1,\"6811\":1}}],[\"就会给其他哨兵发送\",{\"1\":{\"3206\":1}}],[\"就会拿该行记录的db\",{\"1\":{\"3052\":1}}],[\"就会有大量的线程被阻塞住\",{\"1\":{\"2901\":1,\"6573\":1}}],[\"就会被阻塞\",{\"1\":{\"2900\":1,\"2959\":1,\"6572\":1,\"6631\":1}}],[\"就会在备份数据库之前先开启事务\",{\"1\":{\"2868\":1,\"6540\":1}}],[\"就会增加\",{\"1\":{\"2834\":1,\"6506\":1}}],[\"就会增大\",{\"1\":{\"2672\":1}}],[\"就会使用\",{\"1\":{\"2684\":1}}],[\"就会重传数据\",{\"1\":{\"2665\":1}}],[\"就会重发该数据\",{\"1\":{\"2649\":1}}],[\"就会重新发送\",{\"1\":{\"2555\":1}}],[\"就会释放连接\",{\"1\":{\"2545\":1}}],[\"就会\",{\"1\":{\"2388\":1}}],[\"就会从\",{\"1\":{\"1704\":1,\"1712\":1}}],[\"就会出现一个很奇怪的问题\",{\"1\":{\"1695\":1}}],[\"就会把此时\",{\"1\":{\"3236\":1}}],[\"就会把从库列表返回给哨兵\",{\"1\":{\"3201\":1}}],[\"就会把\",{\"1\":{\"1694\":1}}],[\"就会触发超时重发\",{\"1\":{\"2614\":1}}],[\"就会触发再均衡\",{\"1\":{\"1591\":1}}],[\"就会触发kafka的rebalance机制\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"就会继续从上次消费到的offset来继续消费\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"就会删除一个最老的片段\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"就会快速的将\",{\"1\":{\"1428\":1}}],[\"就会变得非常麻烦\",{\"1\":{\"1273\":1,\"5615\":1}}],[\"就会进入拦截方法\",{\"1\":{\"1128\":1,\"5709\":1}}],[\"就会发现前后两次读到的数据是不一致的\",{\"1\":{\"2988\":1,\"6660\":1}}],[\"就会发现\",{\"1\":{\"589\":1}}],[\"就会看到如下标为蓝色的说明\",{\"1\":{\"567\":1}}],[\"就会创建对应的运行时常量池\",{\"1\":{\"286\":1}}],[\"就会产生\",{\"1\":{\"269\":1}}],[\"就会放到幸存者\",{\"1\":{\"265\":1}}],[\"就会抛出\",{\"1\":{\"228\":1,\"245\":1}}],[\"就得知道接着从哪开始继续执行\",{\"1\":{\"192\":1}}],[\"控制器增强类\",{\"1\":{\"5651\":1}}],[\"控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里\",{\"1\":{\"1804\":1,\"6310\":1}}],[\"控制分布式系统有序的去对共享资源进行操作\",{\"1\":{\"4901\":1,\"7271\":1}}],[\"控制流量\",{\"1\":{\"4723\":1}}],[\"控制的目的就是避免\",{\"1\":{\"2667\":1}}],[\"控制位\",{\"1\":{\"2446\":1}}],[\"控制信号量的方式有两种原子操作\",{\"1\":{\"1964\":1}}],[\"控制台打印springboot的\",{\"1\":{\"1384\":1}}],[\"控制权交给外部环境\",{\"1\":{\"1161\":1,\"5542\":1}}],[\"控制反转是一种设计思想\",{\"1\":{\"1158\":1,\"4139\":1}}],[\"控制\",{\"1\":{\"228\":1,\"1160\":1,\"5541\":1}}],[\"xian\",{\"0\":{\"7298\":1}}],[\"xiaolincoding\",{\"1\":{\"6283\":1,\"6392\":1}}],[\"xiaolegeaizy\",{\"1\":{\"1119\":1,\"5701\":1}}],[\"xcontenttype\",{\"1\":{\"4986\":2}}],[\"xcontent\",{\"1\":{\"4986\":1}}],[\"xy\",{\"1\":{\"4857\":20,\"4860\":3,\"4929\":2,\"4931\":4,\"4933\":3,\"4935\":5,\"4938\":3,\"4981\":3,\"4986\":3,\"4992\":1,\"4994\":4,\"4997\":2,\"4999\":10}}],[\"xyz\",{\"1\":{\"3411\":1}}],[\"xr\",{\"1\":{\"3498\":1,\"3499\":1}}],[\"xfs\",{\"1\":{\"3456\":1,\"3487\":1}}],[\"xz\",{\"1\":{\"3419\":1}}],[\"xv\",{\"1\":{\"3419\":1}}],[\"xushiyu1996818\",{\"1\":{\"3390\":1}}],[\"x锁\",{\"1\":{\"2941\":1,\"6613\":1}}],[\"x\",{\"1\":{\"1020\":2,\"1024\":2,\"1435\":1,\"2395\":4,\"2948\":1,\"2949\":2,\"2950\":5,\"2954\":1,\"2958\":2,\"2959\":2,\"2960\":3,\"3410\":1,\"3419\":1,\"3450\":1,\"3451\":5,\"3498\":1,\"3499\":1,\"3510\":1,\"3525\":1,\"3557\":1,\"3753\":1,\"3930\":1,\"4763\":1,\"4999\":2,\"6620\":1,\"6621\":2,\"6622\":5,\"6626\":1,\"6630\":2,\"6631\":2,\"6632\":3,\"7099\":4}}],[\"xbootclasspath参数指定的路径下的所有类\",{\"1\":{\"425\":1,\"5316\":1}}],[\"xxljob\",{\"1\":{\"4997\":2}}],[\"xxl\",{\"1\":{\"4997\":1}}],[\"xxx包实现起步依赖\",{\"1\":{\"5631\":1}}],[\"xxxx是你的远程仓库地址\",{\"1\":{\"3384\":1}}],[\"xxxx\",{\"1\":{\"3383\":1}}],[\"xxxautoconfiguration的作用就是按需加载组件\",{\"1\":{\"1295\":1,\"5638\":1}}],[\"xxx\",{\"1\":{\"1290\":1,\"5019\":1}}],[\"xx\",{\"1\":{\"243\":1,\"244\":1,\"255\":1,\"259\":1,\"352\":1,\"3569\":1,\"3571\":3,\"3572\":1,\"5021\":1}}],[\"xml文件并根据传入的参数使用相应的sql查询语句\",{\"1\":{\"4744\":1}}],[\"xml里面加入配置\",{\"1\":{\"1139\":1,\"5718\":1}}],[\"xml并解析出里面所有的标签实例化到ioc容器中\",{\"1\":{\"550\":1,\"5429\":1}}],[\"xml\",{\"1\":{\"480\":1,\"1200\":1,\"4748\":1,\"4826\":1,\"4945\":1,\"4974\":1,\"5552\":1}}],[\"xms4096m\",{\"1\":{\"3577\":1}}],[\"xms\",{\"1\":{\"228\":1,\"242\":1,\"243\":1,\"246\":1,\"250\":1,\"2121\":1}}],[\"xmx4096m\",{\"1\":{\"3577\":1}}],[\"xmx8192m\",{\"1\":{\"3575\":1,\"3576\":1}}],[\"xmx\",{\"1\":{\"228\":1,\"242\":1,\"244\":1,\"245\":1,\"246\":1,\"250\":1,\"2121\":1}}],[\"xss来设置线程的最大栈空间\",{\"1\":{\"209\":1}}],[\"实时记录用户数据\",{\"1\":{\"4662\":1,\"7181\":1}}],[\"实时显示进程信息\",{\"1\":{\"3426\":1}}],[\"实习生的日常工作安排\",{\"1\":{\"4321\":1,\"7146\":1}}],[\"实习\",{\"0\":{\"4277\":1}}],[\"实习工作内容\",{\"0\":{\"4119\":1}}],[\"实用性太差\",{\"1\":{\"3283\":1,\"6888\":1}}],[\"实体之间共享相同的地址空间\",{\"1\":{\"1888\":1}}],[\"实体之间可以并发运行\",{\"1\":{\"1887\":1}}],[\"实际项目经验都是人工智能相关的\",{\"1\":{\"4333\":1,\"7158\":1}}],[\"实际项目是自学的\",{\"1\":{\"4333\":1,\"7158\":1}}],[\"实际用到的比较少\",{\"1\":{\"2194\":1}}],[\"实际应用中比较少使用\",{\"1\":{\"1737\":1}}],[\"实际应用场景非常非常少\",{\"1\":{\"890\":1,\"5508\":1}}],[\"实际存在硬件里面的空间地址叫物理内存地址\",{\"1\":{\"1633\":1}}],[\"实际是不会应用到生产\",{\"1\":{\"1430\":1}}],[\"实际执行sqlsession的数据库访问方法\",{\"1\":{\"1102\":1}}],[\"实际执行的就是sqlsession中对应的sql映射逻辑\",{\"1\":{\"1098\":1}}],[\"实际会调用sqlsession对应的方法\",{\"1\":{\"1093\":1}}],[\"实际会调用到实现invocationhandler\",{\"1\":{\"904\":1,\"5522\":1}}],[\"实际调用的是\",{\"1\":{\"912\":1,\"5530\":1}}],[\"实际上域名最后还有一个点\",{\"1\":{\"7083\":1}}],[\"实际上这是一个非常具有误导性质的说法\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"实际上调用这两个方法的时候\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"实际上就是把暂存区的所有内容提交到当前分支\",{\"1\":{\"3366\":1}}],[\"实际上就是把文件修改添加到暂存区\",{\"1\":{\"3365\":1}}],[\"实际上是缓存在内核中的\",{\"1\":{\"1954\":1}}],[\"实际上最后就会使用到\",{\"1\":{\"1812\":1,\"6319\":1}}],[\"实际上\",{\"1\":{\"566\":1,\"579\":1,\"592\":1,\"2301\":1,\"3275\":1,\"6880\":1}}],[\"实际的文章内容\",{\"1\":{\"24\":1,\"5137\":1}}],[\"实例启动时都会自动生成的一个随机\",{\"1\":{\"3233\":1}}],[\"实例的引用\",{\"1\":{\"1179\":1,\"1180\":1,\"1181\":1}}],[\"实例化bean对象\",{\"1\":{\"4130\":1}}],[\"实例化\",{\"1\":{\"1160\":1,\"5541\":1}}],[\"实例化对象\",{\"1\":{\"550\":1,\"5429\":1}}],[\"实例\",{\"1\":{\"520\":1,\"3295\":1,\"5408\":1}}],[\"实例会在试图亲自查找类或资源之前\",{\"1\":{\"441\":1,\"5333\":1}}],[\"实现成\",{\"1\":{\"6381\":1}}],[\"实现方案相比\",{\"1\":{\"6332\":1}}],[\"实现方式不同\",{\"1\":{\"3951\":1,\"4741\":1}}],[\"实现方式如下\",{\"1\":{\"1075\":1}}],[\"实现各种功能\",{\"1\":{\"4939\":1}}],[\"实现步骤\",{\"1\":{\"4917\":1}}],[\"实现思路\",{\"1\":{\"4869\":1,\"4988\":1,\"7247\":1}}],[\"实现热数据的计算\",{\"1\":{\"4663\":1,\"7182\":1}}],[\"实现热部署的方式\",{\"0\":{\"1335\":1,\"5659\":1}}],[\"实现app后端\",{\"1\":{\"4659\":1,\"7178\":1}}],[\"实现服务注册中的api请求路由\",{\"1\":{\"4658\":1,\"7177\":1}}],[\"实现单点登录的流程如下\",{\"1\":{\"4055\":1}}],[\"实现一个\",{\"1\":{\"4274\":1}}],[\"实现一次登录多处受信\",{\"1\":{\"4054\":1}}],[\"实现一致性读\",{\"1\":{\"2910\":1,\"6582\":1}}],[\"实现对目标对象方法的拦截从而实现增强功能\",{\"1\":{\"4021\":1}}],[\"实现soa服务治理\",{\"1\":{\"3989\":1}}],[\"实现的\",{\"1\":{\"3642\":1,\"3778\":2,\"3779\":2,\"5789\":2,\"5790\":2,\"5883\":1}}],[\"实现的时候\",{\"1\":{\"801\":1}}],[\"实现共享状态的传播\",{\"1\":{\"3638\":1,\"5879\":1}}],[\"实现两个进程之间的通信\",{\"1\":{\"3468\":1}}],[\"实现布隆过滤器的示例代码\",{\"1\":{\"2181\":1}}],[\"实现多路复用的方式是\",{\"1\":{\"1768\":1}}],[\"实现高性能\",{\"1\":{\"1406\":1}}],[\"实现handlerexceptionresolver接口\",{\"1\":{\"1315\":1}}],[\"实现全局异常处理\",{\"0\":{\"1314\":1,\"5645\":1}}],[\"实现自动配置的预处理工作\",{\"1\":{\"1302\":1}}],[\"实现自定义插件\",{\"1\":{\"1125\":1,\"5707\":1}}],[\"实现原理与hashmap类似\",{\"1\":{\"957\":1}}],[\"实现原理上\",{\"1\":{\"752\":1,\"1089\":1}}],[\"实现类\",{\"1\":{\"888\":1,\"891\":1,\"3962\":1,\"5506\":1,\"5509\":1}}],[\"实现抽象装饰的相关方法\",{\"1\":{\"875\":1}}],[\"实现抽象构件\",{\"1\":{\"875\":1}}],[\"实现较复杂\",{\"1\":{\"859\":1,\"5489\":1}}],[\"实现代码如下\",{\"1\":{\"857\":1,\"5487\":1}}],[\"实现语句是\",{\"1\":{\"791\":1}}],[\"实现了自媒体管理员登录功能\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"实现了用户通过app端登录功能\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性\",{\"1\":{\"4593\":1,\"6166\":1}}],[\"实现了真正的单点体验\",{\"1\":{\"4053\":1}}],[\"实现了在实例化阶段就将bean初始化\",{\"1\":{\"1268\":1}}],[\"实现了某个接口\",{\"1\":{\"1157\":1,\"5538\":1}}],[\"实现了dao接口的动态实现\",{\"1\":{\"1093\":1}}],[\"实现了map接口\",{\"1\":{\"957\":1}}],[\"实现了\",{\"1\":{\"901\":1,\"1175\":1,\"1176\":1,\"1177\":1,\"1179\":1,\"1180\":1,\"1181\":1,\"1183\":1,\"1187\":1,\"2737\":1,\"3113\":1,\"3785\":1,\"5519\":1,\"5796\":1,\"6406\":1,\"6769\":1}}],[\"实现了优先级队列\",{\"1\":{\"769\":1}}],[\"实现了双亲委派机制\",{\"1\":{\"431\":1,\"5322\":1}}],[\"实现\",{\"1\":{\"579\":1,\"610\":1,\"941\":1,\"1129\":1,\"2770\":1,\"3434\":1,\"4877\":1,\"4944\":1,\"5710\":1,\"6439\":1,\"7255\":1}}],[\"实现时机不同\",{\"1\":{\"3949\":1}}],[\"实现时\",{\"1\":{\"228\":1}}],[\"像\",{\"1\":{\"3837\":1,\"3845\":1,\"5953\":1,\"5962\":1}}],[\"像java\",{\"1\":{\"3831\":1,\"5947\":1}}],[\"像不加锁的select操作就是快照读\",{\"1\":{\"3024\":1}}],[\"像select\",{\"1\":{\"3022\":1}}],[\"像钟表一样\",{\"1\":{\"2021\":1}}],[\"像磁盘空间一样\",{\"1\":{\"228\":1}}],[\"像一些方法中的操作临时对象等\",{\"1\":{\"226\":1}}],[\"之上的\",{\"1\":{\"7078\":1}}],[\"之上\",{\"1\":{\"7078\":2}}],[\"之父也在\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"之所以没有使用\",{\"1\":{\"3100\":1,\"6756\":1}}],[\"之所以出现快照读的情况\",{\"1\":{\"3024\":1}}],[\"之间只需要往队列中发消息即可\",{\"1\":{\"4610\":1}}],[\"之间进行通\",{\"1\":{\"3437\":1}}],[\"之间的整数\",{\"1\":{\"2025\":1}}],[\"之间的关系\",{\"1\":{\"579\":1}}],[\"之间不存在父子关系\",{\"1\":{\"1955\":1}}],[\"之间\",{\"1\":{\"381\":1,\"691\":1,\"5458\":1}}],[\"之外\",{\"1\":{\"343\":1}}],[\"之后就不会再传递同样的事件了\",{\"1\":{\"6277\":1}}],[\"之后模板显示已经准备好的数据\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"之后才有\",{\"1\":{\"4646\":1,\"6219\":1}}],[\"之后server2\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"之后把这些信息都分发给其他的服务器\",{\"1\":{\"4564\":1}}],[\"之后还是处于等待状态的\",{\"1\":{\"3625\":1}}],[\"之后执行git\",{\"1\":{\"3372\":1}}],[\"之后已经默认是开启了\",{\"1\":{\"3153\":1,\"6809\":1}}],[\"之后可以在插入数据时\",{\"1\":{\"2920\":1,\"6592\":1}}],[\"之后服务端进入\",{\"1\":{\"2597\":1}}],[\"之后服务端处于\",{\"1\":{\"2528\":1}}],[\"之后进入\",{\"1\":{\"2596\":1,\"2598\":1}}],[\"之后客户端进入\",{\"1\":{\"2594\":1}}],[\"之后客户端处于\",{\"1\":{\"2527\":1,\"2529\":1}}],[\"之后\",{\"1\":{\"2339\":1,\"2794\":1,\"3147\":3,\"4563\":1,\"6163\":1,\"6465\":1,\"6803\":3}}],[\"之后尽量均衡的将分区分配给消费者\",{\"1\":{\"1472\":1,\"6920\":1}}],[\"之后的提交\",{\"1\":{\"3388\":1}}],[\"之后的快照读获取的都是同一个read\",{\"1\":{\"3058\":1}}],[\"之后的每次扩充结果也都是奇数\",{\"1\":{\"1053\":1}}],[\"之后的所有调⽤都不会进⼊同步块\",{\"1\":{\"859\":1,\"5489\":1}}],[\"之后每次扩充为原来的2n+1\",{\"1\":{\"1052\":1,\"1057\":1}}],[\"之后每次扩充为原来的2倍\",{\"1\":{\"1029\":1,\"1056\":1}}],[\"之后发现依然无法进行对象的保存\",{\"1\":{\"269\":1}}],[\"之后直接使用物理内存\",{\"1\":{\"226\":1}}],[\"之前名为\",{\"1\":{\"7071\":1}}],[\"之前说过\",{\"1\":{\"7038\":1}}],[\"之前一直是正常使用\",{\"0\":{\"4218\":1}}],[\"之前已经提交的修改和该事务本身做的修改\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"之前只有\",{\"1\":{\"2794\":1,\"6465\":1}}],[\"之前\",{\"1\":{\"1065\":1,\"2728\":1,\"2907\":1,\"2908\":1,\"6397\":1,\"6579\":1,\"6580\":1}}],[\"之前会产生冲突的两个hashcode\",{\"1\":{\"1042\":1}}],[\"之前的比较都是基于我们将arraylist转成synchronizedlist\",{\"1\":{\"844\":1}}],[\"之前的永久代\",{\"1\":{\"239\":1}}],[\"之前介绍的map接口的实现类都有一个对应的set接口的实现类\",{\"1\":{\"726\":1}}],[\"之前是占用\",{\"1\":{\"226\":1}}],[\"之前叫永久代\",{\"1\":{\"226\":1}}],[\"8文章自动审核及延迟发布\",{\"0\":{\"4844\":1}}],[\"8公平锁\",{\"0\":{\"3838\":1}}],[\"82\",{\"1\":{\"3527\":1}}],[\"8正则表达式\",{\"0\":{\"3423\":1}}],[\"8版本开始引入\",{\"1\":{\"3192\":1}}],[\"8联合索引\",{\"0\":{\"2816\":1}}],[\"8为什么需要\",{\"0\":{\"2616\":1}}],[\"8第二次握手丢失了\",{\"0\":{\"2572\":1}}],[\"800\",{\"1\":{\"2972\":2,\"6644\":2}}],[\"80\",{\"1\":{\"2308\":1,\"2521\":2,\"7076\":1}}],[\"8080\",{\"1\":{\"1345\":1,\"5041\":1,\"5047\":1,\"5670\":1}}],[\"8http\",{\"0\":{\"2289\":1}}],[\"8格式编码\",{\"1\":{\"1355\":1,\"5680\":1}}],[\"8的concurrenthashmap作者认为引入红黑树后\",{\"1\":{\"1077\":1}}],[\"8的concurrenthashmap同样是通过key的哈希值与数组长度取模确定该key在数组中的索引\",{\"1\":{\"1077\":1}}],[\"8的hashtable中\",{\"1\":{\"1071\":1}}],[\"8的实现中\",{\"1\":{\"1069\":1}}],[\"8的商\",{\"1\":{\"1024\":1}}],[\"8中这一步做了优化\",{\"1\":{\"1067\":1}}],[\"8中的实现\",{\"1\":{\"1079\":1}}],[\"8中的hash函数\",{\"1\":{\"1067\":1}}],[\"8中的优化\",{\"1\":{\"1065\":1}}],[\"8中使用平衡树来替代链表存储冲突的元素\",{\"1\":{\"1065\":1}}],[\"8中hashmap从头插入改成尾插入\",{\"0\":{\"917\":1,\"5434\":1}}],[\"8相当于\",{\"1\":{\"1024\":1}}],[\"8以前的版本\",{\"1\":{\"951\":1}}],[\"86655574\",{\"1\":{\"947\":1,\"5347\":1}}],[\"8采用红黑树存储\",{\"0\":{\"920\":1,\"5437\":1}}],[\"8从头插入改成尾插入元素的顺序不变\",{\"1\":{\"919\":1,\"5436\":1}}],[\"85109687\",{\"1\":{\"686\":1}}],[\"8q8\",{\"0\":{\"626\":1}}],[\"8堆是分配对象存储的唯一选择吗\",{\"0\":{\"276\":1}}],[\"8\",{\"0\":{\"948\":1,\"1360\":1,\"1578\":1,\"1579\":1,\"1584\":1,\"1589\":1,\"1717\":1,\"1725\":1,\"1730\":1,\"1732\":1,\"1738\":1,\"1743\":1,\"3370\":1,\"3994\":1,\"4140\":1,\"4218\":1,\"4380\":1},\"1\":{\"226\":3,\"334\":1,\"491\":1,\"981\":1,\"1001\":1,\"1022\":1,\"1024\":1,\"1027\":1,\"1028\":1,\"1064\":1,\"1065\":1,\"1070\":1,\"1074\":1,\"1075\":1,\"1195\":1,\"1207\":1,\"1444\":1,\"2374\":1,\"2496\":1,\"3527\":1,\"4137\":1,\"4295\":1,\"4332\":1,\"4355\":1,\"4366\":1,\"4377\":1,\"4388\":1,\"4404\":1,\"4435\":1,\"4457\":1,\"4563\":1,\"4566\":1,\"5378\":1,\"5547\":1,\"5559\":1,\"6163\":1,\"6283\":1,\"6392\":1,\"7120\":1,\"7157\":1}}],[\"被称为解决\",{\"1\":{\"6269\":1}}],[\"被称为from\",{\"1\":{\"230\":1}}],[\"被拒绝的任务\",{\"1\":{\"3871\":1,\"6026\":1}}],[\"被\",{\"1\":{\"2923\":1,\"6595\":1}}],[\"被频繁更新的字段应该慎重建立索引\",{\"1\":{\"2829\":1,\"6501\":1}}],[\"被频繁查询的字段\",{\"1\":{\"2825\":1,\"6497\":1}}],[\"被经常频繁用于连接的字段\",{\"1\":{\"2828\":1,\"6500\":1}}],[\"被作为\",{\"1\":{\"2826\":1,\"6498\":1}}],[\"被作为条件查询的字段\",{\"1\":{\"2826\":1,\"6498\":1}}],[\"被动关闭连接\",{\"1\":{\"2619\":1}}],[\"被后面相同四元组的连接错误的接收\",{\"1\":{\"2617\":1}}],[\"被初始化后和被销毁前执行一些相关操作\",{\"1\":{\"1166\":1}}],[\"被拦截的方法\",{\"1\":{\"911\":1,\"5529\":1}}],[\"被代理的对象\",{\"1\":{\"911\":1,\"5529\":1}}],[\"被代理类实现的一些接口\",{\"1\":{\"901\":1,\"5519\":1}}],[\"被弱引用关联的对象一定会被回收\",{\"1\":{\"316\":1}}],[\"被软引用关联的对象只有在内存不够的情况下才会被回收\",{\"1\":{\"313\":1}}],[\"被强引用关联的对象不会被回收\",{\"1\":{\"310\":1}}],[\"被长时间使用的对象\",{\"1\":{\"225\":1}}],[\"被所有线程共享\",{\"1\":{\"222\":1}}],[\"养老区\",{\"1\":{\"225\":1}}],[\"新人只需要了解他所接管的服务的代码\",{\"1\":{\"4476\":1,\"6109\":1}}],[\"新任务就会被存放在队列中\",{\"1\":{\"3861\":1,\"3876\":1,\"6015\":1,\"6031\":1}}],[\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数\",{\"1\":{\"3861\":1,\"3876\":1,\"6015\":1,\"6031\":1}}],[\"新的\",{\"1\":{\"3487\":1,\"4599\":1,\"6183\":1}}],[\"新的进程会被放入到第一级队列的末尾\",{\"1\":{\"1941\":1}}],[\"新写入操作会报错\",{\"1\":{\"3186\":1,\"6844\":1}}],[\"新增了\",{\"1\":{\"7071\":1}}],[\"新增文件的命令\",{\"1\":{\"3338\":1}}],[\"新增\",{\"1\":{\"3143\":1,\"6799\":1}}],[\"新增或提交数据\",{\"1\":{\"2224\":1}}],[\"新创建了一个线程对象\",{\"1\":{\"1853\":1,\"6229\":1}}],[\"新创建的对象大小\",{\"1\":{\"388\":1}}],[\"新建线程将会使当前运行的线程超出最大线程数\",{\"1\":{\"3885\":1,\"6040\":1}}],[\"新建打包文件\",{\"1\":{\"3419\":1}}],[\"新建的\",{\"1\":{\"3419\":1}}],[\"新建状态\",{\"1\":{\"1853\":1,\"6229\":1}}],[\"新建一个springboot项目\",{\"1\":{\"1353\":1,\"5678\":1}}],[\"新对象优先分配在tlab上\",{\"1\":{\"275\":1}}],[\"新对象和没达到一定年龄的对象都在新生代\",{\"1\":{\"224\":1}}],[\"新生代和老年代数据是如何流动的\",{\"1\":{\"4341\":1,\"7166\":1}}],[\"新生代和老年代不再物理隔离\",{\"1\":{\"374\":1}}],[\"新生代\",{\"1\":{\"3603\":1}}],[\"新生代使用\",{\"1\":{\"338\":1}}],[\"新生代又被进一步划分为\",{\"1\":{\"253\":1}}],[\"新生带\",{\"1\":{\"224\":1}}],[\"几乎是不可能事件\",{\"1\":{\"929\":1,\"5446\":1}}],[\"几乎不会有bin中链表长度会达到阈值\",{\"1\":{\"929\":1,\"5446\":1}}],[\"几乎所有的对象实例以及数据都在这里分配内存\",{\"1\":{\"222\":1}}],[\"几乎可以忽略不计\",{\"1\":{\"196\":1}}],[\"一种是查询分组\",{\"1\":{\"7038\":1}}],[\"一段时间内\",{\"1\":{\"6138\":1}}],[\"一段时间内达到一定的次数无法调用并且多次监测没有恢复的迹象断路器完全打开那么下次请求就不会请求到该服务\",{\"1\":{\"4521\":1}}],[\"一段时间后\",{\"1\":{\"2600\":1}}],[\"一面\",{\"0\":{\"4279\":1,\"4309\":1,\"4324\":1,\"7104\":1,\"7134\":1,\"7149\":1}}],[\"一条sql的执行流程\",{\"0\":{\"4228\":1}}],[\"一方面目的是保持缓存与数据库数据的一致性\",{\"1\":{\"4144\":1}}],[\"一把锁只能同时被一个线程获取\",{\"1\":{\"3730\":1}}],[\"一行\",{\"1\":{\"3535\":1}}],[\"一组权限中的\",{\"1\":{\"3510\":1}}],[\"一直没审核通过\",{\"1\":{\"4423\":1}}],[\"一直跟这个事务启动时看到的数据是一致的\",{\"1\":{\"2999\":1,\"3012\":1,\"6671\":1,\"6684\":1}}],[\"一直维护一个红黑树比链表耗费资源更多\",{\"1\":{\"923\":1,\"5440\":1}}],[\"一起使用的时候\",{\"1\":{\"2933\":1,\"6605\":1}}],[\"一样\",{\"1\":{\"3295\":1,\"6174\":1,\"6181\":1}}],[\"一样也是在插入数据的时候\",{\"1\":{\"2926\":1,\"6598\":1}}],[\"一样是多线程收集器\",{\"1\":{\"354\":1}}],[\"一张表允许创建多个普通索引\",{\"1\":{\"2792\":1,\"6463\":1}}],[\"一张表允许创建多个唯一索引\",{\"1\":{\"2791\":1,\"6462\":1}}],[\"一张数据表有只能有一个主键\",{\"1\":{\"2786\":1,\"6455\":1}}],[\"一锁就是锁住了整张表\",{\"1\":{\"2734\":1,\"6403\":1}}],[\"一来一去正好\",{\"1\":{\"2614\":1}}],[\"一旦发生丢包\",{\"1\":{\"7073\":1}}],[\"一旦数据库泄漏\",{\"1\":{\"5046\":1}}],[\"一旦达成一致\",{\"1\":{\"4573\":1}}],[\"一旦时间到期\",{\"1\":{\"4087\":1}}],[\"一旦任务暂停\",{\"1\":{\"3897\":1,\"6044\":1}}],[\"一旦有第二个线程加入锁竞争\",{\"1\":{\"3804\":1,\"5815\":1}}],[\"一旦获得锁\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"一旦系统缓慢或者卡死\",{\"1\":{\"3572\":1}}],[\"一旦出现\",{\"1\":{\"2903\":1,\"6575\":1}}],[\"一旦完成三次握手\",{\"1\":{\"2532\":1}}],[\"一旦删除其中一个就会导致严重误删\",{\"1\":{\"2167\":1}}],[\"一开始\",{\"1\":{\"2526\":1}}],[\"一开始的目的就是用于日志收集和传输\",{\"1\":{\"1432\":1,\"4760\":1}}],[\"一对多\",{\"1\":{\"2487\":1,\"4262\":1}}],[\"一对一\",{\"1\":{\"2457\":1}}],[\"一次性提交暂存区的所有修改\",{\"1\":{\"3368\":1}}],[\"一次即可定位\",{\"1\":{\"2771\":1,\"6440\":1}}],[\"一次该\",{\"1\":{\"2444\":1}}],[\"一次是在内核态里\",{\"1\":{\"1769\":1}}],[\"一定会出现这样一种情况\",{\"1\":{\"3263\":1,\"6868\":1}}],[\"一定是\",{\"1\":{\"2457\":1}}],[\"一定安全可靠吗\",{\"0\":{\"2344\":1}}],[\"一定不能给多线程同时执行\",{\"1\":{\"1978\":1}}],[\"一级页表\",{\"1\":{\"1664\":1}}],[\"一级缓存也就不存在了\",{\"1\":{\"5713\":1}}],[\"一级缓存是sqlsession级别的缓存\",{\"1\":{\"4070\":1}}],[\"一级缓存是默认开启的\",{\"1\":{\"1146\":1,\"5726\":1}}],[\"一级缓存二级缓存\",{\"0\":{\"4069\":1}}],[\"一级缓存能解决吗\",{\"1\":{\"1270\":1,\"5612\":1}}],[\"一级缓存sqlsession\",{\"1\":{\"1147\":1,\"5727\":1}}],[\"一级缓存的作用域是一个sqlsession内\",{\"1\":{\"1145\":1,\"5725\":1}}],[\"一级缓存内部存储使用一个\",{\"1\":{\"1134\":1,\"5713\":1}}],[\"一级缓存\",{\"0\":{\"1132\":1,\"5711\":1,\"5712\":1}}],[\"一台\",{\"1\":{\"1440\":1}}],[\"一致性则是通过持久性+原子性+隔离性来保证\",{\"1\":{\"2979\":1,\"6651\":1}}],[\"一致性就是要求上述步骤操作后\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"一致性哈希算法引入了虚拟节点机制\",{\"1\":{\"2035\":1}}],[\"一致性哈希算法在服务节点太少的情况下\",{\"1\":{\"2034\":1}}],[\"一致性哈希算法将整个哈希值空间按照顺时针方向组织成一个虚拟的圆环\",{\"1\":{\"2016\":1}}],[\"一致性哈希算法也是使用取模的方法\",{\"1\":{\"2015\":1}}],[\"一致性哈希算法\",{\"0\":{\"2013\":1}}],[\"一致性哈希算法原理详解\",{\"0\":{\"2003\":1}}],[\"一致性\",{\"0\":{\"2029\":1},\"1\":{\"1221\":1,\"2972\":1,\"4637\":1,\"4639\":1,\"4645\":1,\"5573\":1,\"6209\":1,\"6212\":1,\"6218\":1,\"6644\":1}}],[\"一致的\",{\"1\":{\"568\":1}}],[\"一棵树的度数就是它里面度数最大的结点的度数\",{\"1\":{\"663\":1}}],[\"一棵树的根结点称为该树的子树的根结点的父结点\",{\"1\":{\"657\":1}}],[\"一棵树\",{\"1\":{\"654\":1}}],[\"一棵树里的元素可以根据这种关系分为一层层的元素\",{\"1\":{\"653\":1}}],[\"一棵树可以只有根但没有子树\",{\"1\":{\"650\":1}}],[\"一类的接口名称\",{\"1\":{\"621\":1}}],[\"一些加密\",{\"1\":{\"5658\":1}}],[\"一些固定的不能被覆盖的属性\",{\"1\":{\"5657\":1}}],[\"一些框架\",{\"1\":{\"5024\":1,\"7288\":1}}],[\"一些不合法的参数请求直接抛出异常信息返回给客户端\",{\"1\":{\"3249\":1,\"6854\":1}}],[\"一些分布式的问题\",{\"1\":{\"2071\":1,\"5776\":1}}],[\"一些\",{\"1\":{\"594\":1}}],[\"一些附加信息\",{\"1\":{\"215\":1}}],[\"一\",{\"0\":{\"452\":1,\"4278\":1,\"4347\":1,\"5346\":1,\"5405\":1,\"6974\":1,\"7103\":1},\"1\":{\"516\":1,\"5404\":1}}],[\"一般是\",{\"1\":{\"7072\":1}}],[\"一般是使用\",{\"1\":{\"3540\":1}}],[\"一般在什么场景下使用\",{\"0\":{\"4215\":1}}],[\"一般在处理类似的场景之时\",{\"1\":{\"1373\":1}}],[\"一般情况下\",{\"1\":{\"4191\":1,\"7045\":1}}],[\"一般情况下不自定义检查异常\",{\"1\":{\"462\":1,\"5357\":1}}],[\"一般称为面向切面编程\",{\"1\":{\"4180\":1}}],[\"一般设置为5分钟之内\",{\"1\":{\"4153\":1}}],[\"一般用在读锁上\",{\"1\":{\"3833\":1,\"5949\":1}}],[\"一般用于异步\",{\"1\":{\"1406\":1}}],[\"一般出于以下原因\",{\"1\":{\"3587\":1}}],[\"一般存放在\",{\"1\":{\"3334\":1}}],[\"一般与\",{\"1\":{\"3319\":2}}],[\"一般不会使用\",{\"1\":{\"2772\":1,\"2773\":1,\"2783\":1,\"6441\":1,\"6442\":1,\"6452\":1}}],[\"一般不建议修改loadfactor的值\",{\"1\":{\"998\":1}}],[\"一般都会分开发送\",{\"1\":{\"2604\":1}}],[\"一般通过日志找到报错的代码位置\",{\"1\":{\"2121\":1}}],[\"一般这类错误在我们开发测试时就能暴露出来\",{\"1\":{\"2119\":1}}],[\"一般需要预热下\",{\"1\":{\"2078\":1,\"5783\":1}}],[\"一般使用redis的zset数据类型\",{\"1\":{\"2057\":1,\"5762\":1}}],[\"一般来说为了安全性\",{\"1\":{\"4076\":1}}],[\"一般来说\",{\"1\":{\"1815\":1,\"2664\":1,\"6280\":1,\"6342\":1}}],[\"一般来说锁的范围大小和性能是成反比的\",{\"1\":{\"836\":1}}],[\"一般接口同步处理时间很长\",{\"1\":{\"1419\":1}}],[\"一般其中会包含多个\",{\"1\":{\"1407\":1}}],[\"一般包含以下元素\",{\"1\":{\"1406\":1}}],[\"一般包含以下内容\",{\"1\":{\"302\":1}}],[\"一般而言是不能互相访问的\",{\"1\":{\"1944\":1}}],[\"一般而言\",{\"1\":{\"766\":1}}],[\"一般将堆分为新生代和老年代\",{\"1\":{\"337\":1}}],[\"一个连接建立多个不同的数据流\",{\"1\":{\"7073\":1}}],[\"一个类的完整生命周期\",{\"1\":{\"5300\":1}}],[\"一个更易于构建云原生应用的动态服务发现\",{\"1\":{\"4551\":1}}],[\"一个更加完整\",{\"1\":{\"568\":1}}],[\"一个面试官\",{\"0\":{\"4449\":1}}],[\"一个线程每获得一次锁\",{\"1\":{\"3819\":1,\"5937\":1}}],[\"一个人进入厕所后首先把门锁上\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"一个节点表示一个线程\",{\"1\":{\"3643\":1,\"3645\":1,\"5884\":1,\"5887\":1}}],[\"一个大文件随便都需要几十万的\",{\"1\":{\"3489\":1}}],[\"一个从库如果和主库断连时间过长\",{\"1\":{\"3243\":1}}],[\"一个事务中的所有操作\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"一个事务在插入一条记录的时候\",{\"1\":{\"2962\":1,\"6634\":1}}],[\"一个事务在持有\",{\"1\":{\"2923\":1,\"6595\":1}}],[\"一个事务持有了范围为\",{\"1\":{\"2959\":1,\"6631\":1}}],[\"一个事务被提交之后\",{\"1\":{\"1223\":1,\"5575\":1}}],[\"一个索引包含\",{\"1\":{\"2781\":1,\"6450\":1}}],[\"一个网络包所能容纳的\",{\"1\":{\"2568\":1}}],[\"一个网络包的最大长度\",{\"1\":{\"2567\":1}}],[\"一个随机数\",{\"1\":{\"2333\":1}}],[\"一个打赏就发一个消息\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"一个实际物理节点可以对应多个虚拟节点\",{\"1\":{\"2035\":1}}],[\"一个进程虽然任一时刻只能处理一个请求\",{\"1\":{\"6260\":1}}],[\"一个进程内有多个线程\",{\"1\":{\"3553\":1}}],[\"一个进程中可以同时存在多个线程\",{\"1\":{\"1893\":1}}],[\"一个进程切换到另一个进程运行\",{\"1\":{\"1877\":1}}],[\"一个进程的页表需要装下\",{\"1\":{\"1663\":1}}],[\"一个次是在用户态里\",{\"1\":{\"1769\":1}}],[\"一个表针指向最老的页面\",{\"1\":{\"1739\":1}}],[\"一个变量被访问到过后\",{\"1\":{\"1623\":1}}],[\"一个发布在topic上消息被分发给此消费者组中的一个消费者\",{\"1\":{\"1581\":1}}],[\"一个queue对应一个consumer\",{\"1\":{\"1507\":1,\"1510\":1,\"6962\":1}}],[\"一个queue\",{\"1\":{\"1505\":1,\"6960\":1}}],[\"一个topic有多个partition\",{\"1\":{\"1469\":1,\"6917\":1}}],[\"一个consumer\",{\"1\":{\"1469\":1,\"6917\":1}}],[\"一个\",{\"1\":{\"1442\":1,\"1443\":2,\"2543\":1,\"3082\":1,\"3763\":1,\"5994\":1,\"6733\":1}}],[\"一个非常大的\",{\"1\":{\"1442\":1}}],[\"一个逻辑上的概念\",{\"1\":{\"1441\":1}}],[\"一个集群是由1个或者多个\",{\"1\":{\"1440\":1}}],[\"一个分区只能由组内一个消费者消费\",{\"1\":{\"1439\":1}}],[\"一个消息队列可以被一个或多个消费者消费\",{\"1\":{\"1406\":1}}],[\"一个一个地添加到项目的依赖管理中\",{\"1\":{\"1348\":1,\"5673\":1}}],[\"一个缓存用于存放成品对象\",{\"1\":{\"1277\":1,\"5619\":1}}],[\"一个用户的事物不被其他事物所干扰\",{\"1\":{\"1222\":1,\"5574\":1}}],[\"一个典型的物理分页拦截器流程是\",{\"1\":{\"1108\":1}}],[\"一个数值需要判断的索引也越多\",{\"1\":{\"2165\":1}}],[\"一个数据只对应一个索引\",{\"1\":{\"2165\":1}}],[\"一个数字在和他进行按位与操作的时候\",{\"1\":{\"1037\":1}}],[\"一个数和\",{\"1\":{\"1021\":1}}],[\"一个数对2n取模\",{\"1\":{\"1021\":1}}],[\"一个hashmap的容量\",{\"1\":{\"978\":1}}],[\"一个使用了同步方法\",{\"1\":{\"829\":1}}],[\"一个使用同步代码块之外几乎无任何区别\",{\"1\":{\"827\":1}}],[\"一个结点的子结点个数称为该结点的度数\",{\"1\":{\"663\":1}}],[\"一个是比较喜欢通过博客整理分享自己所学知识\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"一个是误判率\",{\"1\":{\"2171\":1}}],[\"一个是预计存储元素个数n\",{\"1\":{\"2171\":1}}],[\"一个是\",{\"1\":{\"605\":2,\"1965\":1}}],[\"一个对象是否有虚引用的存在\",{\"1\":{\"319\":1}}],[\"一个新对象的方式来创建强引用\",{\"1\":{\"311\":1}}],[\"一个幸存者空间总是空的\",{\"1\":{\"233\":1}}],[\"一个拥有间隙锁\",{\"1\":{\"2966\":1,\"6638\":1}}],[\"一个拥有\",{\"1\":{\"67\":1,\"5180\":1}}],[\"指出对于一个分布式系统来说\",{\"1\":{\"6211\":1}}],[\"指出的\",{\"1\":{\"2537\":1}}],[\"指令块中增加了\",{\"1\":{\"4141\":1}}],[\"指令和\",{\"1\":{\"3747\":1,\"3751\":1,\"5979\":1,\"5983\":1}}],[\"指令后\",{\"1\":{\"3743\":1,\"5975\":1}}],[\"指令来释放锁\",{\"1\":{\"3743\":1,\"5975\":1}}],[\"指令时\",{\"1\":{\"3739\":1,\"5971\":1}}],[\"指令以及两个\",{\"1\":{\"3738\":1,\"5970\":1}}],[\"指令则指明同步代码块的结束位置\",{\"1\":{\"3737\":1,\"3750\":1,\"5969\":1,\"5982\":1}}],[\"指令指向同步代码块的开始位置\",{\"1\":{\"3737\":1,\"3750\":1,\"5969\":1,\"5982\":1}}],[\"指令\",{\"1\":{\"3678\":1,\"3737\":1,\"3738\":1,\"3747\":1,\"3750\":1,\"3751\":1,\"4141\":1,\"5847\":1,\"5969\":1,\"5970\":1,\"5979\":1,\"5982\":1,\"5983\":1}}],[\"指向具体的数据记录\",{\"1\":{\"4250\":1}}],[\"指向新的主节点\",{\"1\":{\"3225\":1}}],[\"指向该行的\",{\"1\":{\"3029\":1,\"6695\":1}}],[\"指向运行时常量池的方法引用\",{\"1\":{\"213\":1}}],[\"指一个事务执行过程中看到的数据\",{\"1\":{\"2999\":1,\"6671\":1}}],[\"指一个事务提交之后\",{\"1\":{\"2998\":1,\"6670\":1}}],[\"指一个事务还没提交时\",{\"1\":{\"2997\":1,\"6669\":1}}],[\"指下一次\",{\"1\":{\"2445\":1}}],[\"指明后续要跳转的\",{\"1\":{\"2202\":1}}],[\"指明partition的情况下\",{\"1\":{\"1463\":1,\"6911\":1}}],[\"指的就是由一个或多个消费者组成的群体\",{\"1\":{\"1580\":1}}],[\"指的是\",{\"1\":{\"5014\":1}}],[\"指的是在进行索引查询时\",{\"1\":{\"4202\":1}}],[\"指的是对象创建\",{\"1\":{\"1160\":1,\"5541\":1}}],[\"指的是标记\",{\"1\":{\"361\":1}}],[\"指在\",{\"1\":{\"1377\":1,\"3042\":1,\"6710\":1}}],[\"指在不改变现有对象结构的情况下\",{\"1\":{\"872\":1}}],[\"指定类型为id\",{\"1\":{\"4823\":1,\"4971\":1}}],[\"指定相对路径\",{\"1\":{\"3571\":1}}],[\"指定要拦截哪一个接口的哪些方法即可\",{\"1\":{\"1129\":1,\"5710\":1}}],[\"指定连接数据库的驱动类时用到反射加载驱动类\",{\"1\":{\"552\":1,\"5429\":1}}],[\"指南\",{\"0\":{\"141\":1,\"5254\":1}}],[\"或是当\",{\"1\":{\"4596\":1,\"6169\":1}}],[\"或默认值\",{\"1\":{\"4152\":1,\"4153\":1}}],[\"或轻量级锁\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"或本地仓库\",{\"1\":{\"3335\":1}}],[\"或锁机制来保证的\",{\"1\":{\"2978\":1,\"6650\":1}}],[\"或其变种\",{\"1\":{\"2760\":1,\"6429\":1}}],[\"或桶\",{\"1\":{\"2149\":1}}],[\"或join\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"或notifyall\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"或\",{\"1\":{\"1203\":1,\"1291\":1,\"1867\":1,\"2817\":1,\"3206\":1,\"3329\":1,\"3550\":1,\"3567\":1,\"3826\":1,\"4945\":1,\"4959\":1,\"5555\":1,\"5632\":1,\"5943\":1,\"6279\":1,\"6489\":1}}],[\"或深度\",{\"1\":{\"670\":1}}],[\"或子孙结点\",{\"1\":{\"662\":1}}],[\"或许直接升级http\",{\"1\":{\"6980\":1,\"7003\":1}}],[\"或许\",{\"1\":{\"623\":1}}],[\"或者redis天然的set结构\",{\"1\":{\"6954\":1}}],[\"或者对查询结果进行处理\",{\"1\":{\"4953\":1}}],[\"或者保护下游服务的一种方式\",{\"1\":{\"4915\":1}}],[\"或者一致性\",{\"1\":{\"4647\":1,\"6220\":1}}],[\"或者其它原因导致的任务暂停而带来的影响\",{\"1\":{\"3897\":1,\"6044\":1}}],[\"或者我们直接通过\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"或者循环次数超大的循环\",{\"1\":{\"3532\":1}}],[\"或者通过git\",{\"1\":{\"3350\":1}}],[\"或者反过来\",{\"1\":{\"3115\":1,\"6771\":1}}],[\"或者在执行过程中遇到范围查询\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈\",{\"1\":{\"208\":1}}],[\"或者平时保持一定的流量\",{\"1\":{\"2078\":1,\"5783\":1}}],[\"或者说覆盖\",{\"1\":{\"2781\":1,\"2813\":1,\"6450\":1,\"6485\":1}}],[\"或者说短任务线程多\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"或者说我想要方便在中间插入和删除的同步的链表\",{\"1\":{\"844\":1}}],[\"或者显式地删除一个消息队列时\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"或者i\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"或者发出了i\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"或者有执行\",{\"1\":{\"1183\":1,\"1187\":1}}],[\"或者你可以找几个例子试一下\",{\"1\":{\"1025\":1}}],[\"或者经常需要在中间进行插入和删除\",{\"1\":{\"766\":1}}],[\"或者\",{\"1\":{\"339\":1,\"606\":1,\"609\":1,\"621\":1,\"1697\":2,\"2940\":1,\"4554\":1,\"4648\":1,\"6221\":1,\"6612\":1}}],[\"或称为表达式栈\",{\"1\":{\"212\":1}}],[\"observer观察者\",{\"1\":{\"4631\":1,\"6174\":1}}],[\"observer\",{\"1\":{\"4596\":1,\"4597\":1,\"4602\":1,\"4634\":1,\"6177\":1,\"6180\":1,\"6181\":1}}],[\"obj\",{\"1\":{\"812\":2,\"911\":2,\"5529\":2}}],[\"objectmonitor对象\",{\"1\":{\"3740\":1,\"5972\":1}}],[\"object>\",{\"1\":{\"2188\":2,\"4857\":3,\"4979\":1}}],[\"objectfactory<\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"objectoutputstream\",{\"1\":{\"787\":1,\"790\":2}}],[\"object\",{\"1\":{\"531\":2,\"790\":1,\"901\":1,\"903\":3,\"911\":3,\"1007\":1,\"1011\":1,\"1016\":1,\"1047\":1,\"1062\":1,\"1068\":1,\"1466\":2,\"2188\":2,\"3767\":1,\"3768\":1,\"3975\":6,\"5419\":2,\"5519\":1,\"5521\":3,\"5529\":3,\"5998\":1,\"5999\":1,\"6914\":2}}],[\"ou\",{\"1\":{\"3613\":1}}],[\"outputstreamwriter\",{\"1\":{\"3527\":3}}],[\"outofmemory\",{\"1\":{\"2128\":1}}],[\"outofmemoryerror后明显看到\",{\"1\":{\"2119\":1}}],[\"outofmemoryerror\",{\"1\":{\"201\":1,\"228\":1,\"245\":1,\"281\":1,\"291\":1,\"3586\":1}}],[\"outofboundsmsg\",{\"1\":{\"816\":1}}],[\"out\",{\"1\":{\"250\":4,\"480\":1,\"486\":2,\"634\":2,\"787\":3,\"975\":2,\"980\":3,\"993\":8,\"1380\":1,\"1518\":2,\"1544\":1,\"1547\":2,\"1610\":3,\"1613\":3,\"1617\":3,\"1797\":1,\"1970\":1,\"2182\":4,\"3176\":1,\"3735\":1,\"3746\":1,\"3772\":2,\"3963\":1,\"3965\":2,\"3975\":2,\"4857\":1,\"4895\":1,\"5966\":1,\"5977\":1,\"6251\":1,\"6302\":1,\"6834\":1}}],[\"oc\",{\"1\":{\"3612\":1}}],[\"other\",{\"1\":{\"3581\":1}}],[\"owner\",{\"1\":{\"3479\":1}}],[\"onmessage\",{\"1\":{\"4981\":1,\"4986\":1}}],[\"on\",{\"1\":{\"3527\":1,\"3579\":1,\"4043\":1,\"4062\":1}}],[\"one\",{\"1\":{\"3222\":1,\"3857\":1,\"6011\":1}}],[\"only\",{\"1\":{\"3142\":1,\"3153\":1,\"3857\":1,\"6011\":1,\"6798\":1,\"6809\":1}}],[\"oncomplete\",{\"1\":{\"1613\":1}}],[\"oncompletion\",{\"1\":{\"1521\":1,\"1547\":1}}],[\"oltp\",{\"1\":{\"3080\":1,\"6731\":1}}],[\"oldmaster\",{\"1\":{\"3225\":1}}],[\"oldvalue\",{\"1\":{\"824\":2,\"826\":2}}],[\"oldcapacity\",{\"1\":{\"801\":2,\"802\":2}}],[\"old\",{\"0\":{\"235\":1,\"356\":1,\"358\":1},\"1\":{\"939\":1,\"1710\":1,\"1711\":1,\"1712\":2,\"1714\":2,\"1715\":1,\"1716\":1,\"2538\":1,\"3612\":1,\"3613\":1}}],[\"oss有成熟的访问权限控制\",{\"1\":{\"4738\":1}}],[\"oss支持图形化工具\",{\"1\":{\"4730\":1}}],[\"oss高防会将攻击流量牵引至高防集群进行清洗\",{\"1\":{\"4718\":1}}],[\"os实现资源与环境的隔离\",{\"1\":{\"3312\":1}}],[\"os为虚拟机\",{\"1\":{\"3311\":1}}],[\"os\",{\"1\":{\"3311\":1,\"3527\":11,\"6283\":1,\"6392\":1}}],[\"ospf\",{\"1\":{\"2715\":3,\"7010\":3}}],[\"osi\",{\"0\":{\"2723\":1,\"7018\":1},\"1\":{\"2265\":1,\"7019\":1}}],[\"ost\",{\"1\":{\"1522\":1}}],[\"okresult\",{\"1\":{\"4935\":3,\"4979\":1}}],[\"ok\",{\"1\":{\"2196\":1,\"2197\":1,\"2242\":1,\"5013\":1}}],[\"o处理完毕时\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"o请求时\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"opsf\",{\"1\":{\"2715\":1,\"7010\":1}}],[\"opsforvalue\",{\"1\":{\"2188\":1}}],[\"ops\",{\"1\":{\"2188\":2}}],[\"opensession\",{\"1\":{\"4750\":1}}],[\"openfeign<\",{\"1\":{\"4545\":1}}],[\"openfeignclient的pom依赖如下\",{\"1\":{\"4544\":1}}],[\"openfeign使用教程\",{\"0\":{\"4543\":1}}],[\"openfeign的使用\",{\"0\":{\"4927\":1}}],[\"openfeign的\",{\"1\":{\"4542\":1}}],[\"openfeign是spring\",{\"1\":{\"4542\":1}}],[\"openfeign远程调用\",{\"1\":{\"4536\":1}}],[\"openfeign远程调用的基本流程\",{\"0\":{\"4535\":1}}],[\"openfeign\",{\"1\":{\"4534\":1,\"4860\":1,\"4929\":1,\"4933\":1,\"4938\":1}}],[\"open\",{\"1\":{\"2715\":1,\"7010\":1}}],[\"openconnection\",{\"1\":{\"2111\":1}}],[\"operand\",{\"1\":{\"212\":1}}],[\"opts\",{\"1\":{\"3577\":1}}],[\"option\",{\"1\":{\"3417\":1}}],[\"opt\",{\"1\":{\"1720\":1}}],[\"origin\",{\"1\":{\"3383\":1,\"3386\":1,\"3389\":1}}],[\"oriented\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"or\",{\"1\":{\"2847\":2,\"3857\":2,\"4979\":1,\"4981\":1,\"6011\":2,\"6519\":2}}],[\"orange\",{\"1\":{\"2182\":2}}],[\"oracle的rownum等\",{\"1\":{\"1106\":1}}],[\"oracle\",{\"1\":{\"623\":1,\"1231\":1,\"5583\":1}}],[\"org\",{\"1\":{\"2177\":2,\"2185\":2,\"4857\":6,\"4860\":8,\"4929\":2,\"4931\":3,\"4933\":5,\"4935\":2,\"4938\":8,\"4981\":4,\"4986\":8,\"4994\":3,\"4997\":2,\"4999\":5}}],[\"order\",{\"1\":{\"787\":2,\"6740\":1}}],[\"o\",{\"0\":{\"1766\":1,\"6258\":1,\"7293\":1},\"1\":{\"629\":2,\"630\":1,\"689\":1,\"1772\":1,\"1775\":1,\"1810\":1,\"1870\":1,\"1915\":1,\"2755\":1,\"3102\":3,\"3167\":1,\"3411\":1,\"3522\":1,\"3898\":4,\"5456\":1,\"6045\":4,\"6259\":1,\"6265\":1,\"6279\":3,\"6317\":1,\"6424\":1,\"6758\":3,\"6823\":1}}],[\"overhead\",{\"1\":{\"3586\":1}}],[\"overflow\",{\"1\":{\"812\":1}}],[\"over\",{\"1\":{\"593\":1,\"3772\":1,\"6977\":1,\"6989\":1,\"7000\":1,\"7071\":1}}],[\"override\",{\"1\":{\"434\":1,\"1474\":1,\"1547\":1,\"1613\":1,\"3963\":1,\"3965\":1,\"3975\":1,\"4755\":1,\"4857\":1,\"4895\":1,\"4919\":1,\"4931\":1,\"4994\":1,\"4999\":1,\"5325\":1,\"6923\":1}}],[\"oop是静态的代码封装和重用\",{\"1\":{\"4024\":1}}],[\"oop\",{\"1\":{\"593\":1,\"594\":1}}],[\"ood\",{\"1\":{\"580\":1}}],[\"oom问题产生的原因\",{\"0\":{\"2115\":1}}],[\"oom\",{\"0\":{\"241\":1},\"1\":{\"249\":1,\"269\":1,\"3879\":1,\"3911\":1,\"3912\":1,\"3913\":1,\"6034\":1,\"6058\":1,\"6059\":1,\"6060\":1}}],[\"ofmillis\",{\"1\":{\"1610\":1,\"1613\":1,\"1617\":1}}],[\"off\",{\"1\":{\"1797\":1,\"6302\":1}}],[\"offset发给主库\",{\"1\":{\"3244\":1}}],[\"offset位置上的数据已经被覆盖掉了\",{\"1\":{\"3243\":1}}],[\"offsetandmetadata>\",{\"1\":{\"1613\":1}}],[\"offsetcommitcallback\",{\"1\":{\"1613\":1}}],[\"offset的特殊主题发送消息\",{\"1\":{\"1591\":1}}],[\"offset\",{\"1\":{\"1446\":1,\"1518\":1,\"1544\":1,\"1547\":1,\"1797\":1,\"3233\":3,\"3244\":1,\"4674\":3,\"4675\":2,\"4677\":3,\"4959\":1,\"6302\":1,\"7193\":3,\"7194\":2,\"7196\":3}}],[\"offer\",{\"1\":{\"609\":1,\"634\":2,\"782\":1}}],[\"of\",{\"1\":{\"434\":1,\"787\":3,\"790\":2,\"1062\":1,\"3176\":1,\"3857\":4,\"3925\":1,\"3926\":1,\"3927\":1,\"3928\":1,\"3929\":1,\"4187\":1,\"5325\":1,\"6011\":4,\"6834\":1,\"7073\":1}}],[\"那时候http\",{\"1\":{\"6978\":1,\"7001\":1}}],[\"那既然引入多线程\",{\"1\":{\"6373\":1}}],[\"那有没有可能只使用一个进程来维护多个\",{\"1\":{\"6259\":1}}],[\"那有什么其他方式可以避免\",{\"1\":{\"2865\":1,\"6537\":1}}],[\"那接下来的请求都会直接访问缓存磁盘上的对象\",{\"1\":{\"4713\":1}}],[\"那怎么解决呢\",{\"1\":{\"4624\":1,\"6202\":1}}],[\"那也就意味着我们需要两台以上同意\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"那多个线程之间并不会相互影响\",{\"1\":{\"3836\":1,\"5952\":1}}],[\"那再以后要获取这个锁时将可能省略掉自旋过程\",{\"1\":{\"3827\":1}}],[\"那当前线程就要阻塞等待\",{\"1\":{\"3743\":1,\"5975\":1}}],[\"那当服务端发送\",{\"1\":{\"2553\":1}}],[\"那大概率有问题\",{\"1\":{\"3597\":1}}],[\"那如何从这个\",{\"1\":{\"3581\":1}}],[\"那如果数据库有一个长事务\",{\"1\":{\"2897\":1,\"6569\":1}}],[\"那我们就可以找到线程\",{\"1\":{\"3560\":1}}],[\"那我们就可以使用图片名称作为访问图片的key\",{\"1\":{\"2008\":1}}],[\"那这部分数据就算丢失了\",{\"1\":{\"3156\":1,\"6812\":1}}],[\"那对当前事务肯定不可见\",{\"1\":{\"3047\":1}}],[\"那在对表结构做变更操作的时候\",{\"1\":{\"2897\":1,\"6569\":1}}],[\"那它是在什么时候释放的\",{\"1\":{\"2895\":1,\"6567\":1}}],[\"那你说一下和syschronized的区别\",{\"1\":{\"4406\":1}}],[\"那你怎么判断它使用完了呢\",{\"1\":{\"4354\":1}}],[\"那你什么时间把这个对象删除的呢\",{\"1\":{\"4354\":1}}],[\"那你能简单说下threadlocal的原理吗\",{\"1\":{\"4353\":1}}],[\"那你熟悉这个加密算法吗\",{\"1\":{\"4352\":1}}],[\"那你钱没了\",{\"1\":{\"2286\":1}}],[\"那你号没了\",{\"1\":{\"2285\":1}}],[\"那你肯定很熟悉\",{\"1\":{\"1946\":1}}],[\"那数据是不是不一致啦\",{\"1\":{\"2055\":1,\"5760\":1}}],[\"那什么是资源有序分配法呢\",{\"1\":{\"1998\":1}}],[\"那到底如何解决呢\",{\"1\":{\"1886\":1}}],[\"那样轮询扫描整个\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"那后续很有可能会再被引用到\",{\"1\":{\"1623\":1}}],[\"那就意味着要准备数据在真实编程语言中来显示\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"那就和\",{\"1\":{\"4649\":1,\"6222\":1}}],[\"那就通过db\",{\"1\":{\"3045\":1}}],[\"那就自动重试嘛\",{\"1\":{\"2055\":1,\"5760\":1}}],[\"那就只提供一个分区\",{\"1\":{\"1588\":1}}],[\"那就好办了\",{\"1\":{\"1414\":1}}],[\"那就是\",{\"1\":{\"6259\":1,\"7027\":1}}],[\"那就是每发起一个请求\",{\"1\":{\"2292\":1}}],[\"那就是不断的叠加导致的这些数据暴增\",{\"1\":{\"2117\":1}}],[\"那就是如果服务器返回提交失败\",{\"1\":{\"1615\":1}}],[\"那就是当发起提交调用时应用会阻塞\",{\"1\":{\"1612\":1}}],[\"那就是0\",{\"1\":{\"990\":1}}],[\"那就是插入的数据是有序的\",{\"1\":{\"691\":1,\"5458\":1}}],[\"那反射是啥\",{\"1\":{\"504\":1,\"5391\":1}}],[\"那些我们没有做的关闭资源的操作\",{\"1\":{\"481\":1}}],[\"那必须在方法头中显式声明该异常\",{\"1\":{\"471\":1,\"5366\":1}}],[\"那么自然就带来了多线程竞争资源的问题\",{\"1\":{\"6373\":1}}],[\"那么跳过那些已经被丢弃的提案又是什么意思呢\",{\"1\":{\"6204\":1}}],[\"那么说完了\",{\"1\":{\"6195\":1}}],[\"那么说明这个值在布隆过滤器中\",{\"1\":{\"3262\":1,\"6867\":1}}],[\"那么说明你的算法是高效的\",{\"1\":{\"1729\":1}}],[\"那么下次请求就不会请求到该服务\",{\"1\":{\"6138\":1}}],[\"那么不涉及到深拷贝的问题\",{\"1\":{\"5114\":1}}],[\"那么还是用专业的消息队列中间件吧\",{\"1\":{\"4888\":1,\"7266\":1}}],[\"那么直接复用redis更加方便\",{\"1\":{\"4867\":1}}],[\"那么直接复用就可以实现延迟队列\",{\"1\":{\"4866\":1}}],[\"那么直接根据这个索引就可以查到数据\",{\"1\":{\"2815\":1,\"6487\":1}}],[\"那么直接根据该索引\",{\"1\":{\"2814\":1,\"6486\":1}}],[\"那么强一致性和可用性只能\",{\"1\":{\"4646\":1,\"6219\":1}}],[\"那么肯定会产生数据不一致性\",{\"1\":{\"4623\":1,\"6200\":1}}],[\"那么新加入的服务器就会自觉地进入数据恢复模式\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"那么整个集群会如何重新选举\",{\"1\":{\"4618\":1,\"6191\":1}}],[\"那么整个服务框架就可以进入消息广播模式了\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"那么整个活跃\",{\"1\":{\"1697\":1}}],[\"那么节点就会向\",{\"1\":{\"4594\":1}}],[\"那么为什么能加快检索\",{\"1\":{\"4409\":1}}],[\"那么为了应对这种极端情况\",{\"1\":{\"691\":1,\"5458\":1}}],[\"那么怎么按照学生成绩排序\",{\"1\":{\"4383\":1}}],[\"那么md5它能够被破解吗\",{\"1\":{\"4351\":1}}],[\"那么mutex对象又是什么呢\",{\"1\":{\"841\":1}}],[\"那么jvm会认为该锁自旋获取到锁的可能性很大\",{\"1\":{\"3827\":1}}],[\"那么该线程在后续访问时便会自动获得锁\",{\"1\":{\"3799\":1,\"5811\":1}}],[\"那么该页就会从\",{\"1\":{\"1716\":1}}],[\"那么该页就不会被从\",{\"1\":{\"1715\":1}}],[\"那么访问这个变量的每个线程都会有这个变量的本地副本\",{\"1\":{\"3758\":1,\"5990\":1}}],[\"那么aqs会把当前线程以及等待状态封装成一个node节点加入到同步队列中\",{\"1\":{\"3640\":1,\"5881\":1}}],[\"那么会尝试使用doreleaseshared方法尝试唤醒节点\",{\"1\":{\"3638\":1,\"5879\":1}}],[\"那么要排除掉框架自带的线程\",{\"1\":{\"3626\":1}}],[\"那么大多数的线程最终都将阻塞于该阻塞点\",{\"1\":{\"3622\":1}}],[\"那么可以执行命令\",{\"1\":{\"3595\":1}}],[\"那么得到的就是一个业务线程的具体堆栈信息\",{\"1\":{\"3545\":1}}],[\"那么通过查表方式\",{\"1\":{\"5055\":1}}],[\"那么通过\",{\"1\":{\"3545\":1}}],[\"那么一般是由于线程上下文切换引起的\",{\"1\":{\"3535\":1}}],[\"那么一块\",{\"1\":{\"334\":1}}],[\"那么从库连上主库后只能乖乖地进行一次全量复制\",{\"1\":{\"3239\":1}}],[\"那么之后的快照读使用的都是同一个read\",{\"1\":{\"3055\":1}}],[\"那么事务\",{\"1\":{\"2983\":1,\"2984\":1,\"6655\":1,\"6656\":1}}],[\"那么另外一个事务在获取相同范围的\",{\"1\":{\"2958\":1,\"2959\":1,\"6630\":1,\"6631\":1}}],[\"那么其他事务就无法插入\",{\"1\":{\"2953\":1,\"6625\":1}}],[\"那么有了\",{\"1\":{\"2916\":1,\"6588\":1}}],[\"那么有一些消费者就会多分配到一些分区\",{\"1\":{\"1472\":1,\"6920\":1}}],[\"那么加密信息也就不安全了\",{\"1\":{\"5100\":1}}],[\"那么加\",{\"1\":{\"2915\":1,\"6587\":1}}],[\"那么本线程接下来如果要对学生表执行写操作的语句\",{\"1\":{\"2882\":1,\"6554\":1}}],[\"那么索引\",{\"1\":{\"2838\":1,\"6510\":1}}],[\"那么将会被阻塞\",{\"1\":{\"2893\":1,\"6565\":1}}],[\"那么将会节约很大磁盘空间\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"那么将会把此进程从\",{\"1\":{\"1925\":1}}],[\"那么正好根据主键索引就可以查到主键\",{\"1\":{\"2815\":1,\"6487\":1}}],[\"那么对应的索引也将会被修改\",{\"1\":{\"2803\":1,\"6475\":1}}],[\"那么对比将失去意义\",{\"1\":{\"779\":1}}],[\"那么客户端要与服务端\",{\"1\":{\"2712\":1}}],[\"那么客户端再下一次请求的时候\",{\"1\":{\"2247\":1}}],[\"那么只要四元组中其中一个元素发生了变化\",{\"1\":{\"2712\":1}}],[\"那么由于加入了拥塞窗口的概念后\",{\"1\":{\"2670\":1}}],[\"那么此时服务端就会回一个\",{\"1\":{\"2543\":1}}],[\"那么也不能扔给应用层去处理\",{\"1\":{\"2459\":1}}],[\"那么当前任务会被拒绝\",{\"1\":{\"3885\":1,\"6040\":1}}],[\"那么当事务\",{\"1\":{\"2988\":1,\"6660\":1}}],[\"那么当这个表的数据达到一个体量后\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"那么当\",{\"1\":{\"2366\":1}}],[\"那么当服务器数量发生变化时\",{\"1\":{\"2030\":1}}],[\"那么考虑业务场景\",{\"1\":{\"2121\":1}}],[\"那么考虑增加机器或拓展内存资源\",{\"1\":{\"2121\":1}}],[\"那么移除前后的示意图如下图所示\",{\"1\":{\"2031\":1}}],[\"那么它们在哈希环上的示意图如下\",{\"1\":{\"2025\":1}}],[\"那么它就是接近平衡的二叉树\",{\"1\":{\"691\":1,\"5458\":1}}],[\"那么上图中的\",{\"1\":{\"2025\":1}}],[\"那么缓存服务器数量从3台变为2台\",{\"1\":{\"2012\":1}}],[\"那么这些个服务一定会出现失败的情况\",{\"1\":{\"4525\":1,\"6142\":1}}],[\"那么这个消息理论上就会被消费两次\",{\"1\":{\"4677\":1,\"7196\":1}}],[\"那么这个写操作的结果一定对读的这个线程可见\",{\"1\":{\"3712\":1,\"5912\":1}}],[\"那么这个元素一定不在\",{\"1\":{\"3255\":1,\"6860\":1}}],[\"那么这个db\",{\"1\":{\"3045\":1}}],[\"那么这个插入语句就会被阻塞\",{\"1\":{\"3013\":1,\"6685\":1}}],[\"那么这个设备就将自己的\",{\"1\":{\"2380\":1}}],[\"那么这张图片所在的服务器编号必定与原来3台服务器时所在的服务器编号不同\",{\"1\":{\"2012\":1}}],[\"那么这就变成了queue模型\",{\"1\":{\"1582\":1}}],[\"那么余数一定是0\",{\"1\":{\"2010\":1}}],[\"那么避免死锁问题就只需要破环其中一个条件就可以\",{\"1\":{\"1997\":1}}],[\"那么后续的请求的处理都会被阻塞住\",{\"1\":{\"2299\":1}}],[\"那么后面的短作业等待的时间就会很长\",{\"1\":{\"1914\":1}}],[\"那么后⾯的finally\",{\"1\":{\"483\":1}}],[\"那么在加\",{\"1\":{\"2916\":1,\"6588\":1}}],[\"那么在线程\",{\"1\":{\"2901\":1,\"6573\":1}}],[\"那么在线程之间数据传递的时候\",{\"1\":{\"1908\":1}}],[\"那么在备份数据库之前先开启事务\",{\"1\":{\"2866\":1,\"6538\":1}}],[\"那么在切换的时候不需要切换页表\",{\"1\":{\"1907\":1}}],[\"那么处于两个偏移量之间的消息将会丢失\",{\"1\":{\"1598\":1}}],[\"那么处于两个偏移量之间的消息就会被重复处理\",{\"1\":{\"1596\":1}}],[\"那么roundrobinassignor的分配结果如下\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"那么return\",{\"1\":{\"1017\":1}}],[\"那么分配结果是不保证\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"那么分配结果是尽量均衡的\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"那么c0又会比c1\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"那么capacity就是这个桶\",{\"1\":{\"974\":1}}],[\"那么因为分区数变化\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"那么每秒就有\",{\"1\":{\"1424\":1}}],[\"那么总耗时就是\",{\"1\":{\"1418\":1}}],[\"那么服务端在收到请求后就会建立多个冗余的无效链接\",{\"1\":{\"2556\":1}}],[\"那么服务\",{\"1\":{\"1418\":1}}],[\"那么二级缓存一样可以解决循环依赖问题\",{\"1\":{\"1287\":1,\"5629\":1}}],[\"那么就代表加锁失败\",{\"1\":{\"4906\":1,\"7276\":1}}],[\"那么就把该任务放入到任务队列里等待执行\",{\"1\":{\"3883\":1,\"6038\":1}}],[\"那么就会新建一个线程来执行任务\",{\"1\":{\"3882\":1,\"6037\":1}}],[\"那么就会被阻塞\",{\"1\":{\"2894\":1,\"6566\":1}}],[\"那么就会导致触发重发机制\",{\"1\":{\"2660\":1}}],[\"那么就更不应该在这种字段上建立索引了\",{\"1\":{\"2830\":1,\"6502\":1}}],[\"那么就表示不同的\",{\"1\":{\"2712\":1}}],[\"那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制\",{\"1\":{\"3642\":1,\"5883\":1}}],[\"那么就需要在插入时排序\",{\"1\":{\"2802\":1,\"6474\":1}}],[\"那么就需要由上层\",{\"1\":{\"2452\":1}}],[\"那么就需要引入多线程\",{\"1\":{\"1833\":1,\"6363\":1}}],[\"那么就造成响应的延迟\",{\"1\":{\"1830\":1,\"6359\":1}}],[\"那么就要想出能少出现一些内存碎片的办法\",{\"1\":{\"1655\":1}}],[\"那么就完全变成了发布\",{\"1\":{\"1583\":1}}],[\"那么就出现问题了\",{\"1\":{\"1413\":1}}],[\"那么就去创建\",{\"1\":{\"1258\":1,\"5610\":1}}],[\"那么就不再需要进⾏同步操作\",{\"1\":{\"859\":1,\"5489\":1}}],[\"那么相应的pojo类必须实现serializable接口\",{\"1\":{\"1148\":1,\"5728\":1}}],[\"那么接下来我们要看下\",{\"1\":{\"1046\":1}}],[\"那么如何从剩余的从库中选择一个新的主库呢\",{\"1\":{\"3215\":1}}],[\"那么如何解决这种冲突呢\",{\"1\":{\"1033\":1}}],[\"那么如果文件描述符是阻塞的\",{\"1\":{\"6279\":1}}],[\"那么如果不对密码加密\",{\"1\":{\"5041\":1}}],[\"那么如果数据库里有很多数据\",{\"1\":{\"2864\":1,\"6536\":1}}],[\"那么如果我们想把linkedlist变成线程安全的\",{\"1\":{\"844\":1}}],[\"那么hash会选择大于该数字的第一个2的幂作为容量\",{\"1\":{\"982\":1}}],[\"那么我们的\",{\"1\":{\"6180\":1}}],[\"那么我们现在问一下\",{\"1\":{\"4414\":1}}],[\"那么我们则需要将故障机器移除\",{\"1\":{\"2012\":1}}],[\"那么我们应该怎样做呢\",{\"1\":{\"2007\":1}}],[\"那么我们也可以先来尝试下这样的依赖\",{\"1\":{\"1254\":1,\"5606\":1}}],[\"那么我们可以直接使用位运算来得到结果\",{\"1\":{\"1059\":1}}],[\"那么我们尝试着设置一下\",{\"1\":{\"979\":1}}],[\"那么我可以将已有的linkedlist直接转成\",{\"1\":{\"844\":1}}],[\"那么n\",{\"1\":{\"927\":1,\"5444\":1}}],[\"那么锁定的也是this对象\",{\"1\":{\"841\":1}}],[\"那么锁定的就是用户传入的对象\",{\"1\":{\"841\":1}}],[\"那么\",{\"1\":{\"806\":1,\"987\":1,\"1018\":1,\"1040\":1,\"1044\":1,\"1157\":1,\"1674\":1,\"1812\":1,\"1861\":1,\"2005\":1,\"2028\":1,\"2360\":1,\"2705\":1,\"2923\":1,\"2965\":1,\"3171\":1,\"3214\":1,\"4596\":1,\"5089\":1,\"5538\":1,\"6319\":1,\"6595\":1,\"6637\":1,\"6829\":1,\"6972\":1,\"6997\":1,\"7046\":2}}],[\"那么容量就为传入的最小容量\",{\"1\":{\"801\":1}}],[\"那么使用arraylist是更好的选择\",{\"1\":{\"780\":1}}],[\"那么红黑树的查询效率就比二叉搜索树要高了\",{\"1\":{\"704\":1,\"5472\":1}}],[\"那么所有的节点都会在根节点的右侧或左侧\",{\"1\":{\"691\":1,\"5458\":1}}],[\"那么finally中的代码还是会执⾏\",{\"1\":{\"484\":1}}],[\"那么虚拟机是如何加载这些\",{\"1\":{\"412\":1,\"5302\":1}}],[\"那么堆的大小在\",{\"1\":{\"242\":1}}],[\"那\",{\"1\":{\"208\":1,\"2359\":1,\"2757\":1,\"6426\":1}}],[\"那每个线程的\",{\"1\":{\"207\":1}}],[\"栈存储的是基础数据类型和堆对象的引用\",{\"1\":{\"2117\":1}}],[\"栈段\",{\"1\":{\"1640\":1}}],[\"栈和双端队列使用\",{\"1\":{\"752\":1}}],[\"栈和动态数组之间的关系不应该是继承关系\",{\"1\":{\"591\":1}}],[\"栈不是一个动态数组\",{\"1\":{\"589\":1}}],[\"栈不存在垃圾回收问题\",{\"1\":{\"205\":1}}],[\"栈是一个动态数组\",{\"1\":{\"589\":1}}],[\"栈这种数据结构\",{\"1\":{\"588\":1}}],[\"栈\",{\"0\":{\"559\":1,\"5451\":1},\"1\":{\"639\":1,\"1880\":1}}],[\"栈上分配\",{\"1\":{\"277\":1}}],[\"栈帧\",{\"1\":{\"216\":1}}],[\"栈的大小直接决定了函数调用的最大可达深度\",{\"1\":{\"209\":1}}],[\"栈中可能出现的异常\",{\"1\":{\"206\":1}}],[\"进而转化成真正的\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"进而提升整体的性能\",{\"1\":{\"691\":1,\"5458\":1}}],[\"进入正在运行的\",{\"1\":{\"3307\":1}}],[\"进入快速恢复算法\",{\"1\":{\"2700\":1}}],[\"进入这个状态后\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"进程会阻塞在读写函数那里\",{\"1\":{\"6279\":1}}],[\"进程可以通过一个系统调用函数从内核中获取多个事件\",{\"1\":{\"6261\":1}}],[\"进程可正常继续执行\",{\"1\":{\"1965\":1}}],[\"进程cup飙升\",{\"1\":{\"3514\":1}}],[\"进程cpu飙升问题\",{\"0\":{\"3515\":1},\"1\":{\"2143\":1,\"3513\":1}}],[\"进程切换也需要像freertos任务切换一样保存状态\",{\"1\":{\"3439\":1}}],[\"进程切换时\",{\"1\":{\"1885\":1}}],[\"进程间切换\",{\"1\":{\"3438\":1}}],[\"进程间通信方式\",{\"0\":{\"3459\":1,\"5739\":1}}],[\"进程间通信\",{\"0\":{\"1943\":1,\"6235\":1,\"6249\":1}}],[\"进程pid指令来查看是哪个线程占用的内存资源高\",{\"1\":{\"2124\":1}}],[\"进程需阻塞等待\",{\"1\":{\"1965\":1}}],[\"进程都是\",{\"1\":{\"1955\":1}}],[\"进程和\",{\"1\":{\"1955\":1}}],[\"进程和线程管理\",{\"0\":{\"6227\":1}}],[\"进程和线程\",{\"0\":{\"1850\":1}}],[\"进程的亲缘关系通常是指父子进程关系\",{\"1\":{\"3460\":1}}],[\"进程的调度\",{\"1\":{\"3440\":1}}],[\"进程的优先级可以分为\",{\"1\":{\"1928\":1}}],[\"进程的上下文切换不仅包含了虚拟内存\",{\"1\":{\"1880\":1}}],[\"进程还在运行\",{\"1\":{\"1925\":1}}],[\"进程拥有一个完整的资源平台\",{\"1\":{\"1901\":1}}],[\"进程是资源\",{\"1\":{\"1900\":1}}],[\"进程是由内核管理和调度的\",{\"1\":{\"1879\":1}}],[\"进程之间如何通信\",{\"1\":{\"1884\":1}}],[\"进程抢占\",{\"1\":{\"1868\":1}}],[\"进程优先级\",{\"1\":{\"1868\":1}}],[\"进程当前状态\",{\"1\":{\"1867\":1}}],[\"进程控制和管理信息\",{\"1\":{\"1866\":1}}],[\"进程归属的用户\",{\"1\":{\"1865\":1}}],[\"进程标识符\",{\"1\":{\"1864\":1}}],[\"进程描述信息\",{\"1\":{\"1863\":1}}],[\"进程管理\",{\"0\":{\"1851\":1}}],[\"进程\",{\"1\":{\"1833\":1,\"1985\":1,\"3437\":1,\"3558\":1,\"3567\":1,\"6244\":1,\"6335\":1,\"6363\":1}}],[\"进程也没有办法访问其他进程的页表\",{\"1\":{\"1637\":1}}],[\"进程持有的虚拟地址会通过\",{\"1\":{\"1634\":1}}],[\"进⾏锁竞争\",{\"1\":{\"859\":1,\"5489\":1}}],[\"进行发送\",{\"1\":{\"6374\":1}}],[\"进行分页操作\",{\"1\":{\"4954\":1}}],[\"进行分发\",{\"1\":{\"1823\":1,\"1835\":1,\"6352\":1,\"6367\":1}}],[\"进行投票选举的时候会比较\",{\"1\":{\"4625\":1,\"6203\":1}}],[\"进行交互\",{\"1\":{\"4586\":1}}],[\"进行了很多优化\",{\"1\":{\"3780\":1,\"5791\":1}}],[\"进行了扰动计算\",{\"1\":{\"1060\":1}}],[\"进行通信\",{\"1\":{\"3471\":1}}],[\"进行开发实现\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"进行删除的呢\",{\"1\":{\"3171\":1,\"6829\":1}}],[\"进行比较\",{\"1\":{\"3052\":1}}],[\"进行查询\",{\"1\":{\"2843\":1,\"6515\":1}}],[\"进行搜索\",{\"1\":{\"2773\":1,\"2783\":1,\"6442\":1,\"6452\":1}}],[\"进行读写操作了\",{\"1\":{\"2643\":1}}],[\"进行回滚或者提交\",{\"1\":{\"2071\":1,\"5776\":1}}],[\"进行聚合查询\",{\"0\":{\"2061\":1,\"5766\":1}}],[\"进行重试可能会导致位移覆盖\",{\"1\":{\"1615\":1}}],[\"进行存储\",{\"1\":{\"1442\":1}}],[\"进行写库的操作分别放进四个消息队列\",{\"1\":{\"1418\":1}}],[\"进行用户登录状态的拦截\",{\"1\":{\"1403\":1}}],[\"进行解析\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"进行销毁\",{\"1\":{\"1188\":1}}],[\"进行加锁\",{\"1\":{\"3697\":1,\"5866\":1}}],[\"进行加工操作\",{\"1\":{\"1182\":1}}],[\"进行加密通信\",{\"1\":{\"2314\":1}}],[\"进行加密\",{\"1\":{\"428\":1,\"5319\":1}}],[\"进行遍历时要手动进行同步处理\",{\"1\":{\"847\":1}}],[\"进行插入和删除操作\",{\"1\":{\"615\":1}}],[\"进行\",{\"1\":{\"364\":1,\"3572\":1,\"3589\":1,\"3674\":1,\"5842\":1}}],[\"进行养老区的内存清理\",{\"1\":{\"268\":1}}],[\"进行引用\",{\"1\":{\"125\":1,\"126\":1,\"5238\":1,\"5239\":1}}],[\"进栈\",{\"1\":{\"204\":1}}],[\"伴随着入栈\",{\"1\":{\"204\":1}}],[\"并具有唯一性的字符串\",{\"1\":{\"5009\":1}}],[\"并用来生成输出文本\",{\"1\":{\"4840\":1,\"7229\":1}}],[\"并用点分十进制的表示方式\",{\"1\":{\"2374\":1}}],[\"并从中获取用户相关信息\",{\"1\":{\"4813\":1,\"7210\":1}}],[\"并删除过期数据\",{\"1\":{\"4706\":1}}],[\"并结合spring\",{\"1\":{\"4659\":1,\"7178\":1}}],[\"并对事务请求进行处理\",{\"1\":{\"4602\":1}}],[\"并与其进行数据同步\",{\"1\":{\"4600\":1,\"6170\":1}}],[\"并以一系列简单易用的接口提供给用户使用\",{\"1\":{\"4559\":1,\"6159\":1}}],[\"并通过动态代理的方式产生实现类\",{\"1\":{\"4542\":1}}],[\"并通过镜像管理驱动\",{\"1\":{\"3302\":1,\"6088\":1}}],[\"并解决网络服务差时带来的风险\",{\"1\":{\"4483\":1,\"6116\":1}}],[\"并有坚实的服务边界\",{\"1\":{\"4479\":1,\"6112\":1}}],[\"并有利于未来的可拓展性和可维护性\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"并进行自动配置\",{\"1\":{\"4235\":1}}],[\"并进行相应处理\",{\"1\":{\"1407\":1}}],[\"并进行相应的处理\",{\"1\":{\"1322\":1}}],[\"并加载了其中的自动配置类\",{\"1\":{\"4233\":1}}],[\"并加载到\",{\"1\":{\"888\":1,\"894\":1,\"5506\":1,\"5512\":1}}],[\"并为它们创建对象\",{\"1\":{\"4182\":1}}],[\"并基于它提供的认证信息认可用户身份\",{\"1\":{\"4051\":1}}],[\"并撤销偏向锁\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"并重新计算想要修改的新值\",{\"1\":{\"3673\":1,\"5840\":1}}],[\"并重写指定的方法\",{\"1\":{\"3652\":1,\"5895\":1}}],[\"并重写\",{\"1\":{\"910\":1,\"5528\":1}}],[\"并调用其模板方法\",{\"1\":{\"3652\":1,\"5895\":1}}],[\"并按对象所占的\",{\"1\":{\"3597\":1}}],[\"并由系统调用函数来实现消息发送和接收之间的同步\",{\"1\":{\"3473\":1}}],[\"并检查查询分组的接收\",{\"1\":{\"7039\":1}}],[\"并检查是否有接收进程在等待它所发送的消息\",{\"1\":{\"3469\":1}}],[\"并检查这些哈希值对应的位是否都为1\",{\"1\":{\"2149\":1}}],[\"并提供高性能\",{\"1\":{\"4712\":1}}],[\"并提供认证信息\",{\"1\":{\"4047\":1}}],[\"并提供基本的系统功能\",{\"1\":{\"3443\":1}}],[\"并提交了事务\",{\"1\":{\"2988\":1,\"2993\":1,\"6660\":1,\"6665\":1}}],[\"并充当底层驱动程序\",{\"1\":{\"3429\":1}}],[\"并更新本地存储库中的目标分支\",{\"1\":{\"3371\":1}}],[\"并告诉主库即将进行同步\",{\"1\":{\"3232\":1}}],[\"并作出redis节点下线的判断\",{\"1\":{\"3204\":1}}],[\"并让其他从节点改为复制新的主节点\",{\"1\":{\"3196\":1}}],[\"并允许数据重复和\",{\"1\":{\"2792\":1,\"6463\":1}}],[\"并跟踪它们的引用链\",{\"1\":{\"2130\":1}}],[\"并使用mat\",{\"1\":{\"2129\":1}}],[\"并设置好\",{\"1\":{\"2094\":1}}],[\"并确定此数据在环上的位置\",{\"1\":{\"2018\":1}}],[\"并创建一个\",{\"1\":{\"1824\":1,\"1836\":1,\"1844\":1,\"6353\":1,\"6368\":1,\"6386\":1}}],[\"并把feign客户端注册到ioc容器中\",{\"1\":{\"4546\":1}}],[\"并把参数中的引号作为转义字符\",{\"1\":{\"3062\":1,\"6713\":1}}],[\"并把\",{\"1\":{\"1925\":1}}],[\"并把表针前移一个位置\",{\"1\":{\"1742\":1}}],[\"并把新的页面插入这个位置\",{\"1\":{\"1741\":1}}],[\"并指定一个回调函数\",{\"1\":{\"1546\":1}}],[\"并打开一个新文件\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"并保持和\",{\"1\":{\"1445\":1}}],[\"并保持其输入顺序\",{\"1\":{\"1089\":1}}],[\"并返回结果\",{\"1\":{\"1372\":1}}],[\"并做简单的配置即可\",{\"1\":{\"1345\":1,\"5670\":1}}],[\"并根据\",{\"1\":{\"1309\":1}}],[\"并在关闭时注销\",{\"1\":{\"4556\":1}}],[\"并在这个连接上持续地对从库进行监控\",{\"1\":{\"3201\":1}}],[\"并在事务2执行快照读前\",{\"1\":{\"3052\":1}}],[\"并在其上运行图形化应用程序\",{\"1\":{\"3451\":1}}],[\"并在其\",{\"1\":{\"2449\":1}}],[\"并在\",{\"1\":{\"2257\":1,\"4534\":1}}],[\"并在自己的事务中运行\",{\"1\":{\"1237\":1,\"5589\":1}}],[\"并在具体⼦⼯⼚中实现新加产品的创建\",{\"1\":{\"869\":1,\"5499\":1}}],[\"并处理相应的业务逻辑\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"并非\",{\"1\":{\"1158\":1,\"5539\":1}}],[\"并包含了sqlsession的引用\",{\"1\":{\"1093\":1}}],[\"并包含具体构件的实例\",{\"1\":{\"875\":1}}],[\"并试着分析下不同的原因\",{\"1\":{\"1046\":1}}],[\"并想其中put了一个元素\",{\"1\":{\"976\":1}}],[\"并给具体构件对象添加附加的责任\",{\"1\":{\"875\":1}}],[\"并维护了长度\",{\"1\":{\"752\":1}}],[\"并维护一个优先列表\",{\"1\":{\"374\":1}}],[\"并没有对该对象重新开辟一个内存空间进行存放\",{\"1\":{\"5109\":1}}],[\"并没有将所有属性拷贝\",{\"1\":{\"5107\":1}}],[\"并没有收到它的\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"并没有太大的本质区别\",{\"1\":{\"1772\":1}}],[\"并没有被访问\",{\"1\":{\"1693\":1}}],[\"并没有做同步处理\",{\"1\":{\"842\":1}}],[\"并没有严格的卡定某个平衡因子来维持绝对平衡\",{\"1\":{\"691\":1,\"5458\":1}}],[\"并没有规定如何去实现它\",{\"1\":{\"282\":1}}],[\"并称其为子树\",{\"1\":{\"647\":1}}],[\"并不清楚目的地的\",{\"1\":{\"7034\":1}}],[\"并不存在互斥关系\",{\"1\":{\"2954\":1,\"6626\":1}}],[\"并不冲突\",{\"1\":{\"2899\":1,\"6571\":1}}],[\"并不需要等语句执行后才释放\",{\"1\":{\"2929\":1,\"6601\":1}}],[\"并不需要进程的参与\",{\"1\":{\"2637\":1}}],[\"并不需要关心消息是否发送成功\",{\"1\":{\"1514\":1}}],[\"并不是存在\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"并不是彻底避免\",{\"1\":{\"3010\":1,\"6682\":1}}],[\"并不是一种单独的索引类型\",{\"1\":{\"2796\":1,\"2805\":1,\"6468\":1,\"6477\":1}}],[\"并不是完全相等\",{\"1\":{\"2657\":1}}],[\"并不是客户端的请求出错\",{\"1\":{\"2206\":1}}],[\"并不是\",{\"1\":{\"2076\":1,\"2345\":1,\"5781\":1}}],[\"并不会释放\",{\"1\":{\"3773\":1}}],[\"并不会使用\",{\"1\":{\"3010\":1,\"6682\":1}}],[\"并不会停止匹配\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"并不会因为客户端的端口号相同\",{\"1\":{\"2712\":1}}],[\"并不会马上将该页从\",{\"1\":{\"1714\":1}}],[\"并不会一次性加载所有的类\",{\"1\":{\"421\":1,\"5312\":1}}],[\"并不等待b完成\",{\"1\":{\"1373\":1}}],[\"并不对整个数据进行锁定\",{\"1\":{\"943\":1}}],[\"并不能直接交给底层操作系统去执行\",{\"1\":{\"181\":1,\"5290\":1}}],[\"并记录\",{\"1\":{\"376\":1}}],[\"并发\",{\"1\":{\"6282\":1}}],[\"并发多个进程\",{\"1\":{\"6260\":1}}],[\"并发能力强\",{\"1\":{\"4792\":1}}],[\"并发用户数\",{\"1\":{\"4187\":1}}],[\"并发处理\",{\"1\":{\"3906\":1,\"6053\":1}}],[\"并发编程的艺术\",{\"1\":{\"3849\":1,\"6003\":1}}],[\"并发编程j\",{\"1\":{\"3700\":1,\"5869\":1}}],[\"并发包中的\",{\"1\":{\"3826\":1,\"5943\":1}}],[\"并发原语\",{\"1\":{\"3667\":1,\"5830\":1}}],[\"并发访问共享资源\",{\"1\":{\"3637\":1,\"5878\":1}}],[\"并发访问数据库时\",{\"1\":{\"1222\":1,\"5574\":1}}],[\"并发送请求给后者\",{\"1\":{\"3299\":1,\"6085\":1}}],[\"并发事务时可能发生的现象也会不同\",{\"1\":{\"3003\":1,\"6675\":1}}],[\"并发给本地\",{\"1\":{\"2389\":1,\"7093\":1}}],[\"并发传输\",{\"1\":{\"2362\":1}}],[\"并发读写\",{\"1\":{\"1460\":1,\"6908\":1}}],[\"并发清除\",{\"1\":{\"366\":1}}],[\"并发标记\",{\"1\":{\"364\":1,\"377\":1}}],[\"并形指的是垃圾收集器和用户程序同时执行\",{\"1\":{\"343\":1}}],[\"并将\",{\"1\":{\"7035\":1}}],[\"并将它们添加到\",{\"1\":{\"4961\":1}}],[\"并将它们移动到另一个幸存者空间\",{\"1\":{\"233\":1}}],[\"并将正常访问流量回源到目标bucket\",{\"1\":{\"4718\":1}}],[\"并将投票信息广播出去\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"并将上一步中找到的方法与所有类进行对照\",{\"1\":{\"4182\":1}}],[\"并将用户信息\",{\"1\":{\"4057\":1}}],[\"并将该节点设置为头结点\",{\"1\":{\"3638\":1,\"5879\":1}}],[\"并将进程置于闲置状态\",{\"1\":{\"3439\":1}}],[\"并将其广播到所在的局域网中\",{\"1\":{\"7037\":1}}],[\"并将其传递给操作系统进行执行\",{\"1\":{\"3445\":1}}],[\"并将其存储在本地存储库中的新分支中\",{\"1\":{\"3372\":1}}],[\"并将其淘汰\",{\"1\":{\"1744\":1}}],[\"并将这些位设置为1\",{\"1\":{\"2149\":1}}],[\"并将所有幸存者对象移动到一个幸存者空间中\",{\"1\":{\"232\":1}}],[\"并且多数浏览器在2015年底就支持了\",{\"1\":{\"6976\":1,\"6999\":1}}],[\"并且多次监测没有恢复的迹象\",{\"1\":{\"6138\":1}}],[\"并且父进程还得知道子进程要将数据发送给哪个客户端\",{\"1\":{\"6377\":1}}],[\"并且双方都要保存好密钥\",{\"1\":{\"5100\":1}}],[\"并且不能接受数据丢失\",{\"1\":{\"4888\":1,\"7266\":1}}],[\"并且不会管那些被配置成\",{\"1\":{\"1165\":1}}],[\"并且提供了更加方便的crud操作\",{\"1\":{\"4752\":1}}],[\"并且自己的\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"并且返回结果\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"并且返回中途不处理任何请求\",{\"1\":{\"1761\":1}}],[\"并且外面要用一个字符串引起来\",{\"1\":{\"4075\":1}}],[\"并且在性能\",{\"1\":{\"4742\":1}}],[\"并且在数学建模比赛中担任队长并获得了陕西省一等奖\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"并且在需要修改的时候拿到实例修改其参数即可\",{\"1\":{\"3916\":1,\"6064\":1}}],[\"并且在尝试扩展的时候无法申请到足够的内存\",{\"1\":{\"208\":1}}],[\"并且持有锁的线程正在运行中\",{\"1\":{\"3827\":1}}],[\"并且保持锁的时间段\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"并且是通过使用一个共同的接口来指向新创建的对象\",{\"1\":{\"4178\":1}}],[\"并且是\",{\"1\":{\"3700\":1,\"5869\":1}}],[\"并且是固定不变的\",{\"1\":{\"2496\":1}}],[\"并且当前标志是否等于预期标志\",{\"1\":{\"3689\":1,\"5859\":1}}],[\"并且原语的执行必须是连续的\",{\"1\":{\"3678\":1,\"5847\":1}}],[\"并且将共享资源设置为锁定状态\",{\"1\":{\"3642\":1,\"5883\":1}}],[\"并且只能在创建它的进程及其子孙进程之间实现管道的共享\",{\"1\":{\"3472\":1}}],[\"并且会根据\",{\"1\":{\"3363\":1}}],[\"并且打印容器id\",{\"1\":{\"3319\":1}}],[\"并且每个元素的值小于\",{\"1\":{\"3134\":1,\"6790\":1}}],[\"并且每个页表项是占用\",{\"1\":{\"1663\":1}}],[\"并且小数点要占用一个字节\",{\"1\":{\"3075\":1,\"6726\":1}}],[\"并且锁定记录本身\",{\"1\":{\"2946\":1,\"2956\":1,\"6618\":1,\"6628\":1}}],[\"并且主键不能为\",{\"1\":{\"2786\":1,\"6455\":1}}],[\"并且使用了\",{\"1\":{\"2290\":1}}],[\"并且c0订阅t0\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"并且其缓存查询到的对象都是通过序列化或者反序列化克隆的\",{\"1\":{\"1148\":1,\"5728\":1}}],[\"并且也不需要我们必须实现接口\",{\"1\":{\"893\":1,\"5511\":1}}],[\"并且可以不需要针对每个⽬标类都创建⼀个代理类\",{\"1\":{\"887\":1,\"5505\":1}}],[\"并且\",{\"1\":{\"568\":1,\"628\":1,\"2459\":1,\"2737\":1,\"2757\":1,\"2935\":1,\"3075\":1,\"3101\":1,\"3174\":1,\"6406\":1,\"6426\":1,\"6607\":1,\"6726\":1,\"6757\":1,\"6832\":1}}],[\"并且没有父级\",{\"1\":{\"425\":1,\"5316\":1}}],[\"并且由于内存分配算法和内存回收算法密切相关\",{\"1\":{\"261\":1}}],[\"并且对象年龄\",{\"1\":{\"257\":1}}],[\"并且堆无法再扩展时\",{\"1\":{\"228\":1}}],[\"并参与方法的调用和返回\",{\"1\":{\"203\":1}}],[\"它解决的是网络层地址和链路层地址之间的转换问题\",{\"1\":{\"7026\":1}}],[\"它俩负责的事情如下\",{\"1\":{\"6321\":1}}],[\"它俩的父进程都是\",{\"1\":{\"1955\":1}}],[\"它才消停\",{\"1\":{\"6276\":1}}],[\"它基于\",{\"1\":{\"4954\":1}}],[\"它基于treemap实现\",{\"1\":{\"720\":1}}],[\"它定义了两个核心方法\",{\"1\":{\"4941\":1}}],[\"它首先也会将投票选给自己\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"它首先不会自己去尝试加载这个类\",{\"1\":{\"448\":1,\"5341\":1}}],[\"它为每个其他的\",{\"1\":{\"4598\":1,\"6182\":1}}],[\"它应该是所有一致性协议中生产环境中应用最多的了\",{\"1\":{\"4582\":1}}],[\"它具有\",{\"1\":{\"4534\":1}}],[\"它具有服务降级\",{\"1\":{\"4525\":1,\"6142\":1}}],[\"它将我们需要调用的服务方法定义成抽象方法保存在本地就可以了\",{\"1\":{\"4532\":1,\"6149\":1}}],[\"它利用spring\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"它属于对称加密还是非对称加密\",{\"1\":{\"4352\":1}}],[\"它触发了一系列自动配置的过程\",{\"1\":{\"4231\":1}}],[\"它既不会抛弃任务\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"它保存着线程的引用\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"它保存方法的局部变量\",{\"1\":{\"203\":1}}],[\"它自带检查死锁的功能\",{\"1\":{\"3630\":1}}],[\"它就会不停地发短信通知你\",{\"1\":{\"6276\":1}}],[\"它就会将自己的投票信息更改为\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"它就会在程序发生内存溢出的时候\",{\"1\":{\"3570\":1}}],[\"它就像管道一样将一个写进程和一个读进程连接在一起\",{\"1\":{\"3468\":1}}],[\"它也不会再发送第二条短信提醒你\",{\"1\":{\"6276\":1}}],[\"它也将随之被撤消\",{\"1\":{\"3468\":1}}],[\"它也有一个对应的set接口的实现类linkedhashset\",{\"1\":{\"726\":1}}],[\"它往往与其他通信机制\",{\"1\":{\"3465\":1}}],[\"它常作为一种锁机制\",{\"1\":{\"3462\":1}}],[\"它使得\",{\"1\":{\"3458\":1}}],[\"它提供了很多方便的功能来简化数据库访问和操作\",{\"1\":{\"4939\":1}}],[\"它提供了简单的crud操作及动态sql生成等功能\",{\"1\":{\"4742\":1}}],[\"它提供了图形界面环境以及与图形硬件和输入设备的交互\",{\"1\":{\"3451\":1}}],[\"它提供了\",{\"1\":{\"3449\":1}}],[\"它提供了对集合对象进行基本操作的通用接口方法\",{\"1\":{\"742\":1}}],[\"它接受用户输入的命令\",{\"1\":{\"3445\":1}}],[\"它处理进程管理\",{\"1\":{\"3443\":1}}],[\"它做的变更才能被其他事务看到\",{\"1\":{\"2998\":1,\"6670\":1}}],[\"它做的变更就能被其他事务看到\",{\"1\":{\"2997\":1,\"6669\":1}}],[\"它被设计成一个无私的协议\",{\"1\":{\"2666\":1}}],[\"它被称为\",{\"1\":{\"355\":1}}],[\"它不是面向最终用户的\",{\"1\":{\"4840\":1,\"7229\":1}}],[\"它不会自动创建\",{\"1\":{\"3571\":1}}],[\"它不保证网络包的交付\",{\"1\":{\"2452\":1}}],[\"它不直接用于域名解析\",{\"1\":{\"2390\":1,\"7094\":1}}],[\"它不允许出现重复元素\",{\"1\":{\"739\":1}}],[\"它由布隆在1970年提出\",{\"1\":{\"2148\":1}}],[\"它还可以方便地实现进程\",{\"1\":{\"1989\":1,\"6248\":1}}],[\"它还提供了对文件的访问和操作的接口\",{\"1\":{\"3456\":1}}],[\"它还提供\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"它允许同一时刻多个线程访问同一资源\",{\"1\":{\"1982\":1,\"6241\":1}}],[\"它允许接收者在消息发送很长时间后再取回消息\",{\"1\":{\"1410\":1}}],[\"它用来做什么\",{\"1\":{\"4296\":1,\"7121\":1}}],[\"它用来完成地址转换和\",{\"1\":{\"1673\":1}}],[\"它用来监视\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"它只是将各家公司开发的比较成熟\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"它只是负责从\",{\"1\":{\"2643\":1}}],[\"它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构\",{\"1\":{\"691\":1,\"5458\":1}}],[\"它只管发送消息\",{\"1\":{\"1514\":1}}],[\"它有助于提高开发人员的生产力\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"它会直接以\",{\"1\":{\"4617\":1,\"6190\":1}}],[\"它会首先\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"它会先暂停拥有偏向锁的线程\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"它会先将请求转发给父类加载器\",{\"1\":{\"445\":1,\"5338\":1}}],[\"它会从所需的分支中提取所有新提交\",{\"1\":{\"3372\":1}}],[\"它会将失效主节点的其中一个从节点升级为新的主节点\",{\"1\":{\"3196\":1}}],[\"它会根据网络的拥塞程度动态变化的\",{\"1\":{\"2669\":1}}],[\"它会根据classpath中的jar依赖为项目进行自动配置\",{\"1\":{\"1298\":1}}],[\"它会反查生产者\",{\"1\":{\"2054\":1,\"5759\":1}}],[\"它会停止执行并等待其他线程到达屏障\",{\"1\":{\"1983\":1,\"6242\":1}}],[\"它会优先选择运行时间最短的进程来运行\",{\"1\":{\"1917\":1}}],[\"它会返回一个future对象\",{\"1\":{\"1543\":1}}],[\"它对数据库中数据的改变是持久的\",{\"1\":{\"1223\":1,\"5575\":1}}],[\"它通过如下方法计算得到key的最终哈希值\",{\"1\":{\"1077\":1}}],[\"它能够快速读取和写入数据\",{\"1\":{\"4086\":1}}],[\"它能够发送大量请求导致哈希碰撞\",{\"1\":{\"1066\":1}}],[\"它能确保接收端接收的网络包是无损坏\",{\"1\":{\"2453\":1}}],[\"它能保证任何一个节点的左右子树的高度差不会超过较矮的那棵的一倍\",{\"1\":{\"738\":1}}],[\"它们具有相同的格式\",{\"1\":{\"7038\":1}}],[\"它们是如何减少\",{\"1\":{\"6288\":1}}],[\"它们是通过\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"它们都是\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"它们都用来表示资源在客户端缓存的有效期\",{\"1\":{\"2229\":1}}],[\"它们提供了完整的图形用户界面和一系列应用程序\",{\"1\":{\"3454\":1}}],[\"它们提供了丰富的命令和功能\",{\"1\":{\"3445\":1}}],[\"它们为开发者提供了丰富的函数和功能\",{\"1\":{\"3449\":1}}],[\"它们使用底层系统的\",{\"1\":{\"3314\":1}}],[\"它们使用单向链表来存储相同索引值的元素\",{\"1\":{\"1065\":1}}],[\"它们的区别在于创建\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"它们的实现都依赖了动态代理\",{\"1\":{\"895\":1,\"5513\":1}}],[\"它们才会一起继续执行\",{\"1\":{\"1983\":1,\"6242\":1}}],[\"它们就使用到了模板模式\",{\"1\":{\"1212\":1,\"5564\":1}}],[\"它内部通过synchronized实现了线程安全\",{\"1\":{\"957\":1}}],[\"它内部的map的实现类是linkedhashmap\",{\"1\":{\"726\":1}}],[\"它包含有各种有关集合操作的静态多态方法\",{\"1\":{\"744\":1}}],[\"它包含在\",{\"1\":{\"272\":1}}],[\"它可用于不同及其间的进程通信\",{\"1\":{\"3466\":1}}],[\"它可以在\",{\"1\":{\"4953\":1}}],[\"它可以限制变量的类型\",{\"1\":{\"4073\":1}}],[\"它可以是公共注册表\",{\"1\":{\"3329\":1}}],[\"它可以随时发送数据\",{\"1\":{\"2507\":1}}],[\"它可以替代前面的\",{\"1\":{\"1799\":1,\"6304\":1}}],[\"它可以帮助实现对程序内部运行情况的监控\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"它可以排序\",{\"1\":{\"718\":1}}],[\"它可在\",{\"1\":{\"689\":1,\"5456\":1}}],[\"它和普通的相对平衡的二叉搜索树的效率相同\",{\"1\":{\"703\":1,\"5471\":1}}],[\"它同时满足以下特性\",{\"1\":{\"693\":1,\"5460\":1}}],[\"它在完成有关联性的操作时会非常麻烦\",{\"1\":{\"2274\":1}}],[\"它在每个节点增加了一个存储位记录节点的颜色\",{\"1\":{\"693\":1,\"5460\":1}}],[\"它在整个回收过程中耗时最长\",{\"1\":{\"364\":1}}],[\"它犯了面向对象设计领域的一个基本错误\",{\"1\":{\"579\":1}}],[\"它的下一层就是\",{\"1\":{\"7084\":1}}],[\"它的首要设计目的就是易于理解\",{\"1\":{\"4581\":1}}],[\"它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来\",{\"1\":{\"4559\":1,\"6159\":1}}],[\"它的规则是\",{\"1\":{\"2686\":1}}],[\"它的作用\",{\"1\":{\"2549\":1}}],[\"它的\",{\"1\":{\"2473\":1}}],[\"它的好处\",{\"1\":{\"1951\":1}}],[\"它的功能是将前一个命令\",{\"1\":{\"1948\":1}}],[\"它的功能是比较完善的\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"它的前两个参数分别是目的端和源端的文件描述符\",{\"1\":{\"1798\":1,\"6303\":1}}],[\"它的工作方式\",{\"1\":{\"1763\":1,\"1764\":1}}],[\"它的实现方式是\",{\"1\":{\"1745\":1}}],[\"它的缺点就是用\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"它的时效性是毫秒级的\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"它的时间复杂度o\",{\"1\":{\"704\":1,\"5472\":1}}],[\"它的每个方法中都加入了synchronize方法\",{\"1\":{\"942\":1}}],[\"它的特点是内部采用动态数组实现\",{\"1\":{\"746\":1}}],[\"它的操作效率就降低了\",{\"1\":{\"691\":1,\"5458\":1}}],[\"它的操作效率\",{\"1\":{\"691\":1,\"5458\":1}}],[\"它的搜索范围中没有找到所需的类\",{\"1\":{\"449\":1,\"5342\":1}}],[\"它的整个生命周期可以简单概括为\",{\"1\":{\"409\":1,\"5298\":1}}],[\"它的优点是简单高效\",{\"1\":{\"347\":1}}],[\"它根据对象存活周期将内存划分为几块\",{\"1\":{\"336\":1}}],[\"它甚至可以直接使用本地处理器中的寄存器\",{\"1\":{\"218\":1}}],[\"它是消息摘要\",{\"1\":{\"5096\":1}}],[\"它是用两个数学相关的密钥对信息进行编码\",{\"1\":{\"5094\":1}}],[\"它是用来解决一级缓存不能跨会话共享数据的问题\",{\"1\":{\"1149\":1,\"5729\":1}}],[\"它是简单的\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"它是服务\",{\"1\":{\"4556\":1}}],[\"它是干啥的\",{\"1\":{\"4373\":1}}],[\"它是指对数据修改时持保守态度\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"它是构建锁或者其他同步组件的基础框架\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"它是为了从库断开之后\",{\"1\":{\"3239\":1}}],[\"它是域名解析结果的原出处\",{\"1\":{\"2394\":1,\"7098\":1}}],[\"它是先获取互斥锁\",{\"1\":{\"2001\":1}}],[\"它是访问共享资源的代码片段\",{\"1\":{\"1978\":1}}],[\"它是如何工作的\",{\"1\":{\"1939\":1}}],[\"它是针对其他进程间通信方式运行效率低而专门设计的\",{\"1\":{\"3465\":1}}],[\"它是针对\",{\"1\":{\"1122\":1,\"5704\":1}}],[\"它是通过数据库本身提供的分页功能来实现的\",{\"1\":{\"1106\":1}}],[\"它是hashmap的子类\",{\"1\":{\"1089\":1}}],[\"它是java最早实现的容器类之一\",{\"1\":{\"957\":1}}],[\"它是具备了某些特性的二叉搜索树\",{\"1\":{\"691\":1,\"5458\":1}}],[\"它是一个非常庞大的数据库\",{\"1\":{\"5054\":1}}],[\"它是一个64位long型\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"它是一个二进制文件\",{\"1\":{\"3563\":1}}],[\"它是一条\",{\"1\":{\"3667\":1,\"5830\":1}}],[\"它是一种有效的数据通信方式\",{\"1\":{\"3471\":1}}],[\"它是一种特殊的间隙锁\",{\"1\":{\"2964\":1,\"6636\":1}}],[\"它是一款面向服务端应用的垃圾收集器\",{\"1\":{\"372\":1}}],[\"它是一块很小的内存空间\",{\"1\":{\"196\":1}}],[\"它是\",{\"1\":{\"348\":1,\"350\":1}}],[\"它是单线程的收集器\",{\"1\":{\"346\":1}}],[\"它是唯一一个在\",{\"1\":{\"201\":1}}],[\"它是程序控制流的指示器\",{\"1\":{\"199\":1}}],[\"程序会一直执行\",{\"1\":{\"6279\":1}}],[\"程序就没办法继续往下执行\",{\"1\":{\"6279\":1}}],[\"程序就不能编译通过\",{\"1\":{\"462\":1,\"5357\":1}}],[\"程序只是其中的一个线程而已\",{\"1\":{\"1816\":1,\"6343\":1}}],[\"程序是跑在\",{\"1\":{\"1816\":1,\"6343\":1}}],[\"程序是由若干个逻辑分段组成的\",{\"1\":{\"1640\":1}}],[\"程序局部性原理表现为\",{\"1\":{\"1622\":1}}],[\"程序在判断需要创建哪些对象时更灵活\",{\"1\":{\"854\":1,\"5484\":1}}],[\"程序员是一个雇员\",{\"1\":{\"583\":1}}],[\"程序应该从逻辑角度尽可能避免这类异常的发生\",{\"1\":{\"459\":1,\"5354\":1}}],[\"程序中使用\",{\"1\":{\"2628\":1}}],[\"程序中可以选择捕获处理\",{\"1\":{\"459\":1,\"5354\":1}}],[\"程序中无法处理的错误\",{\"1\":{\"456\":1,\"5351\":1}}],[\"程序本身可以捕获并且可以处理的异常\",{\"1\":{\"457\":1,\"5352\":1}}],[\"程序的稳定运行\",{\"1\":{\"451\":1,\"5344\":1}}],[\"程序的运行\",{\"1\":{\"203\":1}}],[\"程序又需要创建对象\",{\"1\":{\"263\":1}}],[\"程序计数器属于线程独享的工作内存\",{\"1\":{\"3708\":1,\"5907\":1}}],[\"程序计数器记录的是\",{\"1\":{\"198\":1}}],[\"程序计数器\",{\"1\":{\"186\":1}}],[\"循环次数\",{\"1\":{\"3826\":1,\"5943\":1}}],[\"循环时间\",{\"1\":{\"3826\":1,\"5943\":1}}],[\"循环扫描\",{\"1\":{\"1761\":1}}],[\"循环扫描算法\",{\"1\":{\"1751\":1}}],[\"循环使用所有片段\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"循环依赖的概念\",{\"1\":{\"5602\":1}}],[\"循环依赖的本质是一样的\",{\"1\":{\"1253\":1,\"5605\":1}}],[\"循环依赖分为三种\",{\"1\":{\"1252\":1,\"5604\":1}}],[\"循环后存活下来的对象被移动到老年代\",{\"1\":{\"234\":1}}],[\"循环\",{\"1\":{\"199\":1}}],[\"分数排序\",{\"1\":{\"4868\":1,\"7246\":1}}],[\"分发给所有\",{\"1\":{\"4604\":1}}],[\"分布式id\",{\"1\":{\"4819\":1}}],[\"分布式一致性就是为了解决以下两个问题\",{\"1\":{\"4575\":1}}],[\"分布式一致性在我们生产环境中显得尤为重要\",{\"1\":{\"4574\":1}}],[\"分布式一致性指多个节点对某一变量的取值达成一致\",{\"1\":{\"4573\":1}}],[\"分布式系统理论上不可能选择\",{\"1\":{\"4648\":1,\"6221\":1}}],[\"分布式系统中\",{\"1\":{\"4643\":1,\"6216\":1}}],[\"分布式系统出现网络分区的时候\",{\"1\":{\"4641\":1,\"6214\":1}}],[\"分布式系统通常由异步网络连接的多个节点构成\",{\"1\":{\"4573\":1}}],[\"分布式系统开发的成本高\",{\"1\":{\"4503\":1,\"6128\":1}}],[\"分布式协调\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"分布式服务追踪\",{\"1\":{\"4513\":1,\"6130\":1}}],[\"分布式配置中心\",{\"1\":{\"4507\":1,\"6130\":1}}],[\"分布式事务等\",{\"1\":{\"4503\":1,\"6128\":1}}],[\"分布式事物\",{\"1\":{\"4484\":1,\"6117\":1}}],[\"分布式\",{\"0\":{\"7308\":1},\"1\":{\"4465\":1,\"4788\":1,\"4789\":1,\"6098\":1}}],[\"分布式区别于集中式在于\",{\"1\":{\"3377\":1}}],[\"分布式锁解决集群下的方法抢占执行\",{\"0\":{\"7267\":1},\"1\":{\"4656\":1,\"7175\":1}}],[\"分布式锁和分布式队列等功能\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"分布式锁\",{\"1\":{\"3107\":1,\"4163\":1,\"4900\":1,\"6763\":1,\"7270\":1}}],[\"分享\",{\"1\":{\"3292\":1,\"6081\":1}}],[\"分钟后\",{\"1\":{\"3171\":1,\"6829\":1}}],[\"分钟\",{\"1\":{\"3171\":1,\"3251\":1,\"6829\":1,\"6856\":1,\"7028\":1}}],[\"分片了\",{\"1\":{\"2569\":1}}],[\"分片不同\",{\"1\":{\"2500\":1}}],[\"分片的核心思路在于\",{\"1\":{\"2073\":1,\"5778\":1}}],[\"分组有两类\",{\"1\":{\"7038\":1}}],[\"分组是一种特殊报文\",{\"1\":{\"7038\":1}}],[\"分组\",{\"1\":{\"2459\":1}}],[\"分块下载或断点续传\",{\"1\":{\"2198\":1}}],[\"分表的数据\",{\"0\":{\"2063\":1,\"5768\":1}}],[\"分多个线程分批\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"分批操作\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"分页插件还会根据分页条件中的页码和每页记录数\",{\"1\":{\"4961\":1}}],[\"分页插件会在拦截的时候对原始的\",{\"1\":{\"4957\":1}}],[\"分页插件的原理是在查询前拦截查询请求\",{\"1\":{\"4965\":1}}],[\"分页插件的原理是什么\",{\"0\":{\"1120\":1,\"5702\":1}}],[\"分页插件的原理如下\",{\"1\":{\"4954\":1}}],[\"分页插件的基本原理是使用\",{\"1\":{\"1125\":1,\"5707\":1}}],[\"分页查询的结果\",{\"1\":{\"4964\":1}}],[\"分页查询拦截\",{\"1\":{\"4956\":1}}],[\"分页查询条件构建\",{\"1\":{\"4955\":1}}],[\"分页查询\",{\"1\":{\"4948\":1}}],[\"分页拦截器\",{\"1\":{\"4860\":1,\"4938\":1}}],[\"分页机制下\",{\"1\":{\"1660\":1}}],[\"分页是怎么解决分段的\",{\"1\":{\"1657\":1}}],[\"分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小\",{\"1\":{\"1656\":1}}],[\"分段的好处就是能产生连续的内存空间\",{\"1\":{\"1654\":1}}],[\"分段的办法很好\",{\"1\":{\"1646\":1}}],[\"分段机制下的虚拟地址由两部分组成\",{\"1\":{\"1642\":1}}],[\"分段机制下\",{\"1\":{\"1641\":1}}],[\"分区\",{\"1\":{\"4649\":1,\"4674\":2,\"6222\":1,\"7193\":2}}],[\"分区容忍性三者你只能同时达到其中两个\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"分区容错性\",{\"1\":{\"4637\":1,\"4641\":1,\"6209\":1,\"6214\":1}}],[\"分区容错也使得系统更加健壮\",{\"1\":{\"4481\":1,\"6114\":1}}],[\"分区的分配尽量的均衡\",{\"1\":{\"1486\":1,\"6938\":1}}],[\"分区的原则\",{\"1\":{\"1462\":1,\"6910\":1}}],[\"分区分配的算法如下\",{\"1\":{\"1473\":1,\"6922\":1}}],[\"分区分配策略\",{\"1\":{\"1468\":1,\"6916\":1}}],[\"分区策略使用一致性哈希\",{\"1\":{\"2064\":1,\"5769\":1}}],[\"分区策略\",{\"0\":{\"1456\":1,\"6904\":1}}],[\"分区被划分为若干个片段\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"分别介绍这三个经典的\",{\"1\":{\"6340\":1}}],[\"分别放到数据库中\",{\"1\":{\"5078\":1}}],[\"分别注入bean\",{\"1\":{\"4132\":1}}],[\"分别用于声明切面\",{\"1\":{\"4022\":1}}],[\"分别指向直接的的前驱节点和后继节点\",{\"1\":{\"3641\":1,\"5882\":1}}],[\"分别如下\",{\"1\":{\"2970\":1,\"6642\":1}}],[\"分别的应用场景是\",{\"0\":{\"2479\":1},\"1\":{\"2406\":1}}],[\"分别占据整个内存空间的最高和最低处\",{\"1\":{\"1690\":1}}],[\"分别是强制缓存和协商缓存\",{\"1\":{\"2226\":1}}],[\"分别是边缘触发\",{\"1\":{\"1777\":1,\"6272\":1}}],[\"分别是\",{\"1\":{\"1665\":1,\"2271\":1,\"2377\":1,\"2579\":1,\"6168\":1,\"6178\":1,\"6198\":1}}],[\"分别是自动提交偏移量和手动提交\",{\"1\":{\"1600\":1}}],[\"分别拥有1\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"分别需要在服务a\",{\"1\":{\"1417\":1}}],[\"分别输出\",{\"1\":{\"981\":1}}],[\"分别执行以上3段代码\",{\"1\":{\"981\":1}}],[\"分别到一个文本文件中去\",{\"1\":{\"794\":1}}],[\"分为两种\",{\"1\":{\"3041\":1,\"6709\":1}}],[\"分为两个步骤\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"分为\",{\"1\":{\"1664\":1}}],[\"分为三大类\",{\"1\":{\"853\":1,\"5483\":1}}],[\"分为以下四个流程\",{\"1\":{\"362\":1}}],[\"分析出\",{\"1\":{\"7048\":1}}],[\"分析业务请求\",{\"1\":{\"4153\":1}}],[\"分析命令\",{\"1\":{\"3575\":1}}],[\"分析堆内存转储文件主要用到命令\",{\"1\":{\"3574\":1}}],[\"分析堆转储文件\",{\"1\":{\"3563\":1,\"3573\":1}}],[\"分析堆转储快照找出suspicious的大对象\",{\"1\":{\"2130\":1}}],[\"分析线程都在做什么\",{\"1\":{\"2141\":1}}],[\"分析gc\",{\"1\":{\"2131\":1}}],[\"分析完indexfor方法后\",{\"1\":{\"1030\":1}}],[\"分析\",{\"1\":{\"795\":1}}],[\"分配得到各个系统进程\",{\"1\":{\"3431\":1}}],[\"分配一个伪tty\",{\"1\":{\"3319\":1}}],[\"分配一个较大的初始值属于最佳实践\",{\"1\":{\"783\":1}}],[\"分配给另外一个进程\",{\"1\":{\"1925\":1}}],[\"分配给虚拟机管理的内存一般来说不会很大\",{\"1\":{\"348\":1}}],[\"分配的单位\",{\"1\":{\"1900\":1}}],[\"分配资源\",{\"1\":{\"1885\":1}}],[\"分配结果\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"分配到的分区数量\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"分配分区的起始位置\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"分配示意图如下\",{\"1\":{\"1472\":1,\"6920\":1}}],[\"分代的唯一理由就是优化\",{\"1\":{\"223\":1}}],[\"分支结点可以只有一个分支\",{\"1\":{\"661\":1}}],[\"分支结点\",{\"1\":{\"661\":1}}],[\"分支\",{\"1\":{\"199\":1}}],[\"分类为\",{\"1\":{\"120\":1,\"5233\":1}}],[\"也还有效\",{\"1\":{\"5004\":1,\"7286\":1}}],[\"也随之变为\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"也提升了整体的性能\",{\"1\":{\"4609\":1}}],[\"也需要\",{\"1\":{\"4596\":1}}],[\"也需要用到内核机制\",{\"1\":{\"3438\":1}}],[\"也和kafka的完全不一样\",{\"1\":{\"4568\":1}}],[\"也有人叫它排他锁\",{\"1\":{\"3829\":1,\"5945\":1}}],[\"也有很多问题\",{\"1\":{\"3682\":1,\"3701\":1,\"5851\":1,\"5870\":1}}],[\"也有这样的能力\",{\"1\":{\"575\":1}}],[\"也推荐用工具\",{\"1\":{\"3574\":1}}],[\"也推荐使用\",{\"1\":{\"568\":1}}],[\"也用于相同的目的\",{\"1\":{\"3372\":1}}],[\"也要保持标准输入保持打开状态\",{\"1\":{\"3319\":1}}],[\"也按相同的搜索条件也是查询出了\",{\"1\":{\"2992\":1,\"6664\":1}}],[\"也从数据库中读取小林的余额数据\",{\"1\":{\"2983\":1,\"6655\":1}}],[\"也正是read\",{\"1\":{\"3054\":1}}],[\"也正是这样\",{\"1\":{\"2969\":1,\"6641\":1}}],[\"也正是因为继承了这个依赖\",{\"1\":{\"1356\":1,\"5681\":1}}],[\"也属于间隙锁\",{\"1\":{\"2966\":1,\"6638\":1}}],[\"也包含间隙锁\",{\"1\":{\"2962\":1,\"6634\":1}}],[\"也包括到运行期解析后才能够获得的方法或字段引用\",{\"1\":{\"289\":1}}],[\"也执行了同样的\",{\"1\":{\"2899\":1,\"6571\":1}}],[\"也无需回表\",{\"1\":{\"2815\":1,\"6487\":1}}],[\"也无法可靠的同步双方序列号\",{\"1\":{\"2558\":1}}],[\"也无法通过虚引用取得一个对象\",{\"1\":{\"319\":1}}],[\"也支持了全文索引\",{\"1\":{\"2794\":1,\"6465\":1}}],[\"也存放\",{\"1\":{\"2762\":1,\"6431\":1}}],[\"也叫做递归锁\",{\"1\":{\"3818\":1,\"5936\":1}}],[\"也叫\",{\"1\":{\"2817\":1,\"6489\":1}}],[\"也叫散列算法\",{\"1\":{\"2756\":1,\"6425\":1}}],[\"也叫持久连接\",{\"1\":{\"2293\":1}}],[\"也向客户端发送\",{\"1\":{\"2597\":1}}],[\"也即再次进入拥塞避免状态\",{\"1\":{\"2706\":1}}],[\"也即\",{\"1\":{\"2594\":1}}],[\"也称\",{\"1\":{\"2580\":1,\"2581\":1}}],[\"也称缓存重定向\",{\"1\":{\"2203\":1}}],[\"也进入\",{\"1\":{\"2530\":1}}],[\"也同样在传输层组装\",{\"1\":{\"2501\":1}}],[\"也不是非对称加密算法\",{\"1\":{\"5096\":1}}],[\"也不是万能的\",{\"1\":{\"3701\":1,\"5870\":1}}],[\"也不在数据库中\",{\"1\":{\"4151\":1}}],[\"也不会抛出异常\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"也不会影响备份数据库时的\",{\"1\":{\"2867\":1,\"6539\":1}}],[\"也不会影响\",{\"1\":{\"2493\":1}}],[\"也不存在于数据库中\",{\"1\":{\"3247\":1,\"3271\":1,\"6852\":1,\"6876\":1}}],[\"也不符合条件\",{\"1\":{\"3053\":1}}],[\"也不可以对该记录加\",{\"1\":{\"2950\":1,\"6622\":1}}],[\"也不建议使用非单调的字段作为主键\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"也不保证网络包中的数据的完整性\",{\"1\":{\"2452\":1}}],[\"也不能把\",{\"1\":{\"2224\":1}}],[\"也不用再去遍历其他缓存服务器了\",{\"1\":{\"2010\":1}}],[\"也不用担心多进程竞争\",{\"1\":{\"1827\":1,\"6356\":1}}],[\"也更能体现出一致性哈希算法的优点\",{\"1\":{\"2005\":1}}],[\"也被叫做\",{\"1\":{\"1950\":1}}],[\"也会将自己服务器设置为\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"也会有很多线程处于\",{\"1\":{\"3624\":1}}],[\"也会导致系统功能运行缓慢\",{\"1\":{\"3619\":1}}],[\"也会分配一个buffer\",{\"1\":{\"3240\":1}}],[\"也会释放所有表锁\",{\"1\":{\"2885\":1,\"6557\":1}}],[\"也会限制本线程接下来的读写操作\",{\"1\":{\"2881\":1,\"6553\":1}}],[\"也会随之消失\",{\"1\":{\"1861\":1}}],[\"也会编译通过\",{\"1\":{\"460\":1,\"5355\":1}}],[\"也依然只苏醒一次\",{\"1\":{\"1778\":1,\"6274\":1}}],[\"也依然能够对外提供服务\",{\"1\":{\"1526\":1}}],[\"也没有key的情况下\",{\"1\":{\"1465\":1,\"6913\":1}}],[\"也没有用throws子句声明抛出它\",{\"1\":{\"460\":1,\"5355\":1}}],[\"也容易出错\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"也对它的解决方案可以上手的例子\",{\"1\":{\"1286\":1,\"5628\":1}}],[\"也创建完整了\",{\"1\":{\"1258\":1,\"5610\":1}}],[\"也可能开启一个新事务\",{\"1\":{\"1237\":1,\"5589\":1}}],[\"也可以自行搜索\",{\"1\":{\"6461\":1}}],[\"也可以有多个\",{\"1\":{\"6325\":1}}],[\"也可以有一个\",{\"1\":{\"2521\":1}}],[\"也可以指定服务响应的超时的时间\",{\"1\":{\"4925\":1}}],[\"也可以通过构造器来显式的指定使用公平锁\",{\"1\":{\"3788\":1,\"5799\":1}}],[\"也可以独立运行使用\",{\"1\":{\"3574\":1}}],[\"也可以用来存储对象以及购物车\",{\"1\":{\"3130\":1,\"6786\":1}}],[\"也可以两个客户端同时向对方发出请求建立连接\",{\"1\":{\"2646\":1}}],[\"也可以做到代理上\",{\"1\":{\"2223\":1}}],[\"也可以将文件数据放到表单字段中上传\",{\"1\":{\"2093\":1}}],[\"也可以按消息的类型读取\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"也可以配置一些初始化参数\",{\"1\":{\"1334\":1}}],[\"也可以使用符号来设定权限\",{\"1\":{\"3411\":1}}],[\"也可以使用\",{\"1\":{\"3403\":1}}],[\"也可以使用分页插件来完成物理分页\",{\"1\":{\"1124\":1,\"5706\":1}}],[\"也可以使用collections\",{\"1\":{\"805\":1}}],[\"也可以再动态地撤销时\",{\"1\":{\"881\":1}}],[\"也可以是多个进程\",{\"1\":{\"6326\":1}}],[\"也可以是自定义的锁\",{\"1\":{\"3734\":1}}],[\"也可以是私有注册表\",{\"1\":{\"3329\":1}}],[\"也可以是black\",{\"1\":{\"693\":1,\"5460\":1}}],[\"也可以是可扩展的\",{\"1\":{\"228\":1}}],[\"也可以不处理\",{\"1\":{\"459\":1,\"5354\":1}}],[\"也经常用于键已经排好序的场景\",{\"1\":{\"1089\":1}}],[\"也能了解到不少知识\",{\"1\":{\"947\":1}}],[\"也就无从知道主机\",{\"1\":{\"7036\":1}}],[\"也就找到了对应的\",{\"1\":{\"2756\":1,\"6425\":1}}],[\"也就说不需要保证\",{\"1\":{\"4651\":1,\"6224\":1}}],[\"也就说\",{\"1\":{\"2734\":1,\"6403\":1}}],[\"也就进入了\",{\"1\":{\"2689\":1}}],[\"也就减少了\",{\"1\":{\"1799\":1,\"6304\":1}}],[\"也就不会像内存分段一样\",{\"1\":{\"1658\":1}}],[\"也就只能基于\",{\"1\":{\"612\":1}}],[\"也就是经典的\",{\"1\":{\"6282\":1}}],[\"也就是处理非事务请求\",{\"1\":{\"4602\":1}}],[\"也就是正常情况下日志复制的流程\",{\"1\":{\"4586\":1}}],[\"也就是线程\",{\"1\":{\"3886\":1}}],[\"也就是直接在调用execute方法的线程中运行\",{\"1\":{\"3871\":1,\"6026\":1}}],[\"也就是加密密钥能够从解密密钥中推算出来\",{\"1\":{\"5092\":1}}],[\"也就是加\",{\"1\":{\"3742\":1,\"5974\":1}}],[\"也就是fifo双向队列\",{\"1\":{\"3640\":1,\"5881\":1}}],[\"也就是生成\",{\"1\":{\"3563\":1}}],[\"也就是显示出没有\",{\"1\":{\"3424\":1}}],[\"也就是目前已出现过的事务id的最大值+1\",{\"1\":{\"3051\":1}}],[\"也就是它随时可能发生回滚操作\",{\"1\":{\"2984\":1,\"6656\":1}}],[\"也就是仅仅把一条记录锁上\",{\"1\":{\"2944\":1,\"6616\":1}}],[\"也就是写锁\",{\"1\":{\"2880\":1,\"6552\":1}}],[\"也就是读锁\",{\"1\":{\"2880\":1,\"6552\":1}}],[\"也就是要通过主键再查找一次\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"也就是设置为原来的一半\",{\"1\":{\"2698\":1}}],[\"也就是拥塞窗口和接收窗口中的最小值\",{\"1\":{\"2670\":1}}],[\"也就是窗口大小\",{\"1\":{\"2653\":1}}],[\"也就是我们常说的乐观锁\",{\"1\":{\"3793\":1,\"5805\":1}}],[\"也就是我们常说的超时重传\",{\"1\":{\"2649\":1}}],[\"也就是我们要研究的异常表\",{\"1\":{\"492\":1,\"5379\":1}}],[\"也就是没有\",{\"1\":{\"2646\":1}}],[\"也就是一对多是无法做到的\",{\"1\":{\"2457\":1}}],[\"也就是客户端的\",{\"1\":{\"2389\":1,\"7093\":1}}],[\"也就是队头阻塞\",{\"1\":{\"2354\":1}}],[\"也就是通过引入\",{\"1\":{\"2288\":1}}],[\"也就是服务端单机最大\",{\"1\":{\"2477\":1}}],[\"也就是服务端先会判断\",{\"1\":{\"2247\":1}}],[\"也就是服务器就可以映射到这个环上\",{\"1\":{\"2025\":1}}],[\"也就是错误码的含义\",{\"1\":{\"2204\":1}}],[\"也就是告诉客户端可以继续使用缓存资源\",{\"1\":{\"2203\":1}}],[\"也就是重定向\",{\"1\":{\"2199\":1}}],[\"也就是二进制数组的长度\",{\"1\":{\"2171\":1}}],[\"也就是被缓存的对象大部分集中缓存在某一台服务器上\",{\"1\":{\"2034\":1}}],[\"也就是消息体\",{\"1\":{\"1957\":1}}],[\"也就是从内核中读取这段数据\",{\"1\":{\"1954\":1}}],[\"也就是随着时间的推移增加等待进程的优先级\",{\"1\":{\"1930\":1}}],[\"也就是复位磁头\",{\"1\":{\"1761\":1}}],[\"也就是对分段划分出来的连续空间\",{\"1\":{\"1678\":1}}],[\"也就是前面提到的分段机制\",{\"1\":{\"1677\":1}}],[\"也就是带来了时间上的开销\",{\"1\":{\"1671\":1}}],[\"也就是内存分页\",{\"1\":{\"1655\":1}}],[\"也就是常说的round\",{\"1\":{\"1465\":1,\"6913\":1}}],[\"也就是同步操作\",{\"1\":{\"1417\":1}}],[\"也就是\",{\"1\":{\"1044\":1,\"2315\":1,\"2319\":1,\"2325\":1,\"2362\":1,\"2900\":1,\"2909\":1,\"4637\":1,\"4811\":1,\"6209\":1,\"6572\":1,\"6581\":1,\"7084\":1,\"7208\":1}}],[\"也就是余数\",{\"1\":{\"1024\":1}}],[\"也就是hash方法的输入应该是个object类型的key\",{\"1\":{\"1010\":1}}],[\"也就是定义⼀个抽象⼯⼚\",{\"1\":{\"867\":1,\"5497\":1}}],[\"也就是使用\",{\"1\":{\"637\":1}}],[\"也就是都需要进行一次\",{\"1\":{\"632\":1}}],[\"也就是基于动态数组的实现\",{\"1\":{\"628\":1}}],[\"也就是可以以此为基础\",{\"1\":{\"616\":1}}],[\"也就是说就算两个md5值非常相似\",{\"1\":{\"5033\":1}}],[\"也就是说分区容错性\",{\"1\":{\"4646\":1,\"6219\":1}}],[\"也就是说当网络分区之后\",{\"1\":{\"4646\":1,\"6219\":1}}],[\"也就是说当内存不足以容纳新写入数据时\",{\"1\":{\"3186\":1,\"6844\":1}}],[\"也就是说不需要所有\",{\"1\":{\"4609\":1}}],[\"也就是说如果本线程对学生表加了\",{\"1\":{\"2882\":1,\"6554\":1}}],[\"也就是说0点左侧的第一个点代表232\",{\"1\":{\"2022\":1}}],[\"也就是说全程没有通过\",{\"1\":{\"1806\":1,\"6313\":1}}],[\"也就是说选择一个物理页面换出到磁盘\",{\"1\":{\"1718\":1}}],[\"也就是说对于公司来说可能处于不可控的状态\",{\"1\":{\"1434\":1,\"4762\":1}}],[\"也就是说\",{\"1\":{\"421\":1,\"422\":1,\"460\":1,\"466\":1,\"748\":1,\"904\":1,\"982\":1,\"1021\":1,\"1036\":1,\"1048\":1,\"1053\":1,\"1235\":1,\"1733\":1,\"1999\":1,\"2007\":1,\"2012\":1,\"2032\":1,\"2789\":1,\"2973\":1,\"3003\":1,\"3233\":1,\"3678\":1,\"3879\":1,\"5107\":1,\"5312\":1,\"5313\":1,\"5355\":1,\"5361\":1,\"5522\":1,\"5587\":1,\"5847\":1,\"6034\":1,\"6459\":1,\"6645\":1,\"6675\":1,\"7038\":1,\"7041\":1}}],[\"也就是说它以串行的方式执行\",{\"1\":{\"345\":1}}],[\"也就是说它只能存活到下一次垃圾回收发生之前\",{\"1\":{\"316\":1}}],[\"也就是借用老年代的空间存储放不下的对象\",{\"1\":{\"334\":1}}],[\"也就是所谓的当前方法\",{\"1\":{\"198\":1}}],[\"也保证了\",{\"1\":{\"451\":1,\"5344\":1}}],[\"也是对研发人员要求最高的一部\",{\"1\":{\"3530\":1}}],[\"也是可以对记录加共享锁和独占锁的\",{\"1\":{\"2911\":1,\"6583\":1}}],[\"也是明确规定禁止使用外键的\",{\"1\":{\"2741\":1,\"6410\":1}}],[\"也是后面用于生产\",{\"1\":{\"2327\":1}}],[\"也是服务器处理成功的状态\",{\"1\":{\"2198\":1}}],[\"也是常见的成功状态码\",{\"1\":{\"2197\":1}}],[\"也是我们最愿意看到的状态\",{\"1\":{\"2195\":1}}],[\"也是一个完整对象了\",{\"1\":{\"1279\":1,\"5621\":1}}],[\"也是面向对象讲解的重点\",{\"1\":{\"594\":1}}],[\"也是给\",{\"1\":{\"357\":1}}],[\"也是运行速度最快的存储区域\",{\"1\":{\"196\":1}}],[\"也比较难发生oom\",{\"1\":{\"283\":1}}],[\"任务id\",{\"1\":{\"4933\":2,\"4935\":1}}],[\"任务对象\",{\"1\":{\"4933\":1,\"4935\":1}}],[\"任务模块是一个通用的模块\",{\"1\":{\"4876\":1,\"7254\":1}}],[\"任务会被保存在一个任务队列中\",{\"1\":{\"3902\":1,\"6049\":1}}],[\"任务的执行\",{\"1\":{\"3887\":1}}],[\"任务队列最大长度为\",{\"1\":{\"3911\":1,\"3913\":1,\"6058\":1,\"6060\":1}}],[\"任务队列已经满了\",{\"1\":{\"3884\":1,\"6039\":1}}],[\"任务队列中存放的任务达到队列容量的时候\",{\"1\":{\"3860\":1,\"6014\":1}}],[\"任务队列中对象不断堆积\",{\"1\":{\"3590\":1}}],[\"任务队列未达到队列容量时\",{\"1\":{\"3859\":1,\"6013\":1}}],[\"任务可以不需要等到线程创建就能立即执行\",{\"1\":{\"3851\":1,\"6005\":1}}],[\"任务列表\",{\"0\":{\"75\":1,\"5188\":1}}],[\"任何\",{\"1\":{\"7090\":1}}],[\"任何需要延迟得任务都可以调用该服务\",{\"1\":{\"4872\":1,\"7250\":1}}],[\"任何线程对其进行操作都是在主内存中进行的\",{\"1\":{\"3711\":1,\"5911\":1}}],[\"任何一个想成为\",{\"1\":{\"3211\":1,\"3214\":1}}],[\"任何一个哨兵都是可以监控探测\",{\"1\":{\"3204\":1}}],[\"任何查找都是从根节点到叶子节点的过程\",{\"1\":{\"2764\":1,\"6433\":1}}],[\"任何时候都有一个条件不满足\",{\"1\":{\"2080\":1,\"5785\":1}}],[\"任何时间一个线程都只有一个方法在执行\",{\"1\":{\"198\":1}}],[\"任谁都是很难忍受的\",{\"1\":{\"1417\":1}}],[\"在域名中\",{\"1\":{\"7082\":1}}],[\"在一定程度上解决了队头阻塞\",{\"1\":{\"7073\":1}}],[\"在一个局域网内\",{\"1\":{\"7028\":1}}],[\"在一个事务内多次查询某个符合查询条件的\",{\"1\":{\"2990\":1,\"6662\":1}}],[\"在一个事务内多次读取同一个数据\",{\"1\":{\"2986\":1,\"6658\":1}}],[\"在一个\",{\"1\":{\"2615\":1}}],[\"在请求大资源前的预热请求\",{\"1\":{\"7062\":1}}],[\"在讨论\",{\"1\":{\"7045\":1}}],[\"在面对瞬间高并发的场景时\",{\"1\":{\"6379\":1}}],[\"在获取事件时\",{\"1\":{\"6262\":1}}],[\"在介绍\",{\"1\":{\"6174\":1}}],[\"在密码学的应用和研究中\",{\"1\":{\"5089\":1}}],[\"在当时计算机的计算能力下\",{\"1\":{\"5036\":1}}],[\"在代码中\",{\"1\":{\"4955\":1}}],[\"在删除操作前标记数据为已删除状态\",{\"1\":{\"4952\":1}}],[\"在更新操作前检查版本号\",{\"1\":{\"4951\":1}}],[\"在该局域网内\",{\"1\":{\"7035\":1}}],[\"在该方法中\",{\"1\":{\"4942\":1}}],[\"在该事务执行的快照读的那一刻\",{\"1\":{\"3044\":1}}],[\"在wemedia的nacos配置中心里添加如下内容\",{\"1\":{\"4925\":1}}],[\"在taskserviceimpl中添加方法\",{\"1\":{\"4894\":1}}],[\"在文章审核成功以后需要在app的article库中新增文章数据\",{\"1\":{\"4852\":1,\"7241\":1}}],[\"在模板中\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"在网关微服务中新建全局过滤器\",{\"1\":{\"4837\":1,\"7226\":1}}],[\"在网络出现拥堵时\",{\"1\":{\"2665\":1}}],[\"在网络拥堵情况下\",{\"1\":{\"2542\":1}}],[\"在认证过滤器中需要用到jwt的解析\",{\"1\":{\"4835\":1,\"7224\":1}}],[\"在mybatis\",{\"1\":{\"4752\":1}}],[\"在mightcontain方法中\",{\"1\":{\"2178\":1}}],[\"在指定时间内自动批量删除\",{\"1\":{\"4705\":1}}],[\"在指令后插入store\",{\"1\":{\"3718\":1,\"5917\":1}}],[\"在指令前插入load\",{\"1\":{\"3717\":1,\"5916\":1}}],[\"在错误覆盖或者删除文件后\",{\"1\":{\"4703\":1}}],[\"在自己的\",{\"1\":{\"7040\":1}}],[\"在自己使用完之前不能被其他线程获取\",{\"1\":{\"1994\":1}}],[\"在自媒体引导类中天mybatis\",{\"1\":{\"4937\":1}}],[\"在自媒体引导类中使用\",{\"1\":{\"4846\":1,\"7235\":1}}],[\"在自媒体微服务中添加类\",{\"1\":{\"4920\":1}}],[\"在自媒体端\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"在自动审核的方法上加上\",{\"1\":{\"4846\":1,\"7235\":1}}],[\"在用户端\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"在理论计算机科学中\",{\"1\":{\"4638\":1,\"6211\":1}}],[\"在理论上是可以实现的\",{\"1\":{\"1735\":1}}],[\"在选举过程中会参与投票\",{\"1\":{\"4633\":1,\"6176\":1}}],[\"在解决分布式数据一致性问题时并没有直接使用\",{\"1\":{\"4629\":1,\"6172\":1}}],[\"在某一时刻\",{\"1\":{\"4608\":1}}],[\"在某个调用中\",{\"1\":{\"1373\":1}}],[\"在集群启动或崩溃恢复中参加选举\",{\"1\":{\"4602\":1}}],[\"在集群启动或崩溃恢复中通过follower参与选举产生\",{\"1\":{\"4602\":1}}],[\"在日志列表中\",{\"1\":{\"4588\":1}}],[\"在收到\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"在收到请求后也只是写入自己的日志列表中然后回复\",{\"1\":{\"4587\":1}}],[\"在收到来自客户端的请求后并不会执行\",{\"1\":{\"4587\":1}}],[\"在微服务启动时\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"在北京没有考虑吗\",{\"1\":{\"4366\":1}}],[\"在西安你找了哪些公司\",{\"1\":{\"4365\":1}}],[\"在那我俩喂喂喂了好几声\",{\"1\":{\"4318\":1,\"7143\":1}}],[\"在工厂模式中\",{\"1\":{\"4178\":1}}],[\"在数据传送前\",{\"1\":{\"5100\":1}}],[\"在数据库查询不存在时\",{\"1\":{\"4153\":1}}],[\"在数据库中存储文件会严重影响数据库性能\",{\"1\":{\"3068\":1,\"6719\":1}}],[\"在数据量较大时\",{\"1\":{\"4115\":1}}],[\"在学校的经历\",{\"0\":{\"4093\":1}}],[\"在有效期内访问其他应用都无需重新认证\",{\"1\":{\"4049\":1}}],[\"在程序运行期间\",{\"1\":{\"4020\":1}}],[\"在大多数对称算法中\",{\"1\":{\"5092\":1}}],[\"在大多数情况下\",{\"1\":{\"2838\":1,\"6510\":1}}],[\"在大量客户端并发请求读\",{\"1\":{\"4574\":1}}],[\"在大并发下保证系统可用性\",{\"1\":{\"3987\":1}}],[\"在校期间参与了全国大学生数学建模竞赛和全国大学生英语竞赛\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"在操作数据时非常乐观\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"在操作系统中\",{\"1\":{\"1860\":1}}],[\"在轻量级锁状态下继续锁竞争\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"在线程进入和退出同步块时不再通过\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"在线程1要提交更新之前\",{\"1\":{\"3671\":1,\"5836\":1}}],[\"在执行\",{\"1\":{\"3743\":1,\"5975\":1}}],[\"在执行monitorenter时\",{\"1\":{\"3742\":1,\"5974\":1}}],[\"在执行过程中不允许被中断\",{\"1\":{\"3678\":1,\"5847\":1}}],[\"在应用sychronized关键字时需要把握如下注意点\",{\"1\":{\"3729\":1}}],[\"在应用程序读取文件的数据的时候\",{\"1\":{\"1699\":1}}],[\"在每个新的producer初始化时\",{\"1\":{\"6953\":1}}],[\"在每个volatile读操作的后面插入一个loadstore屏障\",{\"1\":{\"3724\":1,\"5924\":1}}],[\"在每个volatile读操作的后面插入一个loadload屏障\",{\"1\":{\"3723\":1,\"5923\":1}}],[\"在每个volatile写操作的后面插入一个storeload屏障\",{\"1\":{\"3722\":1,\"5922\":1}}],[\"在每个volatile写操作的前面插入一个storestore屏障\",{\"1\":{\"3721\":1,\"5921\":1}}],[\"在每次访问内存时都必须要更新\",{\"1\":{\"1736\":1}}],[\"在每次循环中都会用到\",{\"1\":{\"1626\":1}}],[\"在变量前加版本号\",{\"1\":{\"3687\":1,\"5856\":1}}],[\"在sun\",{\"1\":{\"3679\":1,\"5848\":1}}],[\"在springboot中使用\",{\"0\":{\"2172\":1}}],[\"在spring\",{\"1\":{\"1321\":1,\"1326\":1,\"1396\":1}}],[\"在spring程序main方法中\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"在同一连接上可以同时传输多个请求和响应\",{\"1\":{\"7066\":1}}],[\"在同一时刻与服务器进行了交互的在线用户数量\",{\"1\":{\"4187\":1}}],[\"在同一个子网内\",{\"1\":{\"7049\":1}}],[\"在同一个事务中\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"在同一个\",{\"1\":{\"1445\":1,\"5713\":1}}],[\"在同一个sqlsession中两次执行相同的sql语句\",{\"1\":{\"1134\":1}}],[\"在同一个版本的jdk中\",{\"1\":{\"1009\":1}}],[\"在同步队列中的节点通过自旋的操作不断去获取同步状态\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"在同步队列中\",{\"1\":{\"3645\":1,\"5887\":1}}],[\"在排查的时候是非常难以发现的\",{\"1\":{\"3624\":1}}],[\"在存储器中\",{\"1\":{\"3469\":1}}],[\"在特定目录解压缩\",{\"1\":{\"3419\":1}}],[\"在压缩\",{\"1\":{\"3419\":1}}],[\"在覆盖前会先询问\",{\"1\":{\"3406\":1}}],[\"在没有网络的情况下\",{\"1\":{\"3377\":1}}],[\"在没有消息队列的情况下\",{\"1\":{\"1417\":1}}],[\"在回答这个问题之前需要先了解\",{\"1\":{\"3355\":1}}],[\"在回收时\",{\"1\":{\"333\":1}}],[\"在ide里面一般都是对比本地文件和远程分支的文件\",{\"1\":{\"3341\":1}}],[\"在init方法中\",{\"1\":{\"2178\":1}}],[\"在后台运行容器\",{\"1\":{\"3319\":1}}],[\"在后面排队的所有请求也一同被阻塞了\",{\"1\":{\"2304\":1}}],[\"在位数组中把对应下标的值置为\",{\"1\":{\"3259\":1,\"6864\":1}}],[\"在和主库重连进行恢复时\",{\"1\":{\"3244\":1}}],[\"在主库将数据同步给从库的过程中\",{\"1\":{\"3235\":1}}],[\"在本地完成数据加载\",{\"1\":{\"3234\":1}}],[\"在redis中执行限流操作比在传统数据库中更快速\",{\"1\":{\"4086\":1}}],[\"在redis\",{\"1\":{\"3192\":1}}],[\"在rr级别下的某个事务的对某条记录的第一次快照读会创建一个快照及read\",{\"1\":{\"3055\":1}}],[\"在键空间中\",{\"1\":{\"3184\":1,\"3189\":1,\"6842\":1,\"6847\":1}}],[\"在60秒\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"在300秒\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"在900秒\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"在拼接字符串之前会检查\",{\"1\":{\"3103\":1,\"6759\":1}}],[\"在计算机信息安全领域\",{\"1\":{\"5089\":1}}],[\"在计算机科学中\",{\"1\":{\"674\":1}}],[\"在计算时不会丢失精度\",{\"1\":{\"3075\":1,\"6726\":1}}],[\"在银行分别有\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"在此系统中\",{\"1\":{\"5094\":1}}],[\"在此基础上\",{\"1\":{\"4647\":1,\"6220\":1}}],[\"在此期间会生成一个插入意向锁\",{\"1\":{\"2963\":1,\"6635\":1}}],[\"在此作用域下\",{\"1\":{\"1164\":1}}],[\"在插入数据时\",{\"1\":{\"2922\":1,\"6594\":1}}],[\"在插件的拦截方法内拦截待执行的\",{\"1\":{\"1125\":1,\"5707\":1}}],[\"在备份数据库时就要使用全局锁的方法\",{\"1\":{\"2870\":1,\"6542\":1}}],[\"在索引列上做任何操作\",{\"1\":{\"4254\":1}}],[\"在索引列上进行计算\",{\"1\":{\"2845\":1,\"6517\":1}}],[\"在索引检索的时候\",{\"1\":{\"2766\":1,\"6435\":1}}],[\"在设计表的时候\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"在根据辅助索引查找时\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"在根据主索引搜索时\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"在业务代码中进行约束即可\",{\"1\":{\"2740\":1,\"6409\":1}}],[\"在并发编程中我们都知道i++操作是非线程安全的\",{\"1\":{\"3662\":1,\"5825\":1}}],[\"在并发写的时候\",{\"1\":{\"2734\":1,\"6403\":1}}],[\"在并发场景下\",{\"1\":{\"919\":1,\"5436\":1}}],[\"在建立连接时由计算机生成的随机数作为其初始值\",{\"1\":{\"2444\":1}}],[\"在传输的漫长的过程中\",{\"1\":{\"2282\":1}}],[\"在客户端第一次请求后\",{\"1\":{\"2279\":1}}],[\"在缓存查询时\",{\"1\":{\"2187\":1}}],[\"在article微服务中新建任务类\",{\"1\":{\"4995\":1}}],[\"在article端编写监听\",{\"1\":{\"4980\":1}}],[\"在add方法中\",{\"1\":{\"2178\":1}}],[\"在application\",{\"1\":{\"1342\":1,\"4825\":1,\"4973\":1,\"5666\":1}}],[\"在添加zset数据的时候\",{\"1\":{\"4875\":1,\"7253\":1}}],[\"在添加元素之前\",{\"1\":{\"2171\":1}}],[\"在添加和删除元素时具有比arraylist更好的性能\",{\"1\":{\"778\":1}}],[\"在下载文件时如何限制下载速率\",{\"0\":{\"2103\":1},\"1\":{\"4434\":1}}],[\"在下游有能力处理的时候\",{\"1\":{\"1410\":1}}],[\"在空跑\",{\"1\":{\"2080\":1,\"5785\":1}}],[\"在了解一致性哈希算法之前\",{\"1\":{\"2005\":1}}],[\"在了解这部分知识之前\",{\"1\":{\"1620\":1}}],[\"在死锁发生的时候\",{\"1\":{\"1995\":1}}],[\"在等待资源\",{\"1\":{\"1993\":1}}],[\"在进程\",{\"1\":{\"1985\":1,\"6244\":1}}],[\"在任意时刻只能被一个进程访问\",{\"1\":{\"1962\":1}}],[\"在任何时刻\",{\"1\":{\"1452\":1,\"6900\":1}}],[\"在运行任何任务前\",{\"1\":{\"1878\":1}}],[\"在运行时通过生成代理对象\",{\"1\":{\"4021\":1}}],[\"在运行时构造一个类的实例化对象\",{\"1\":{\"516\":1,\"5404\":1}}],[\"在运行时获取一个类的所有信息\",{\"1\":{\"516\":1,\"5404\":1}}],[\"在运行时获取一个类的\",{\"1\":{\"516\":1,\"5404\":1}}],[\"在处理多个请求时更加高效\",{\"1\":{\"7066\":1}}],[\"在处理海量数据为什么这么快的原因之一\",{\"1\":{\"1810\":1,\"6317\":1}}],[\"在处理方法中添加exception类型的参数\",{\"1\":{\"1318\":1}}],[\"在前面我们知道\",{\"1\":{\"1786\":1,\"6290\":1}}],[\"在前面我们知道了\",{\"1\":{\"1663\":1}}],[\"在发送数据时\",{\"1\":{\"1957\":1,\"2649\":1}}],[\"在发生缺页中断时\",{\"1\":{\"1745\":1}}],[\"在发布它的第一个版本时没有这个功能\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"在链表中找到一个页面\",{\"1\":{\"1736\":1}}],[\"在寻址时\",{\"1\":{\"1674\":1}}],[\"在分布式服务或者微服务架构下\",{\"1\":{\"5722\":1}}],[\"在分布式服务或者微服务架构下都会出现数据不一致问题\",{\"1\":{\"1143\":1}}],[\"在分布式系统\",{\"1\":{\"4525\":1,\"6142\":1}}],[\"在分页机制下\",{\"1\":{\"1661\":1}}],[\"在段与段之间会产生间隙非常小的内存\",{\"1\":{\"1658\":1}}],[\"在cpu的虚拟内存中分配地址空间\",{\"1\":{\"3437\":1}}],[\"在callback中处理\",{\"1\":{\"1521\":1}}],[\"在controller中抛出异常\",{\"1\":{\"1328\":1}}],[\"在调用\",{\"1\":{\"1520\":1}}],[\"在重试发送消息时\",{\"1\":{\"1499\":1,\"4678\":1}}],[\"在kafka中有一个partition\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"在broker往leader分区写入消息时\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"在稳定性值得信赖\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"在高峰期数据库就可能被流量打死\",{\"1\":{\"1421\":1}}],[\"在高并发的场景中\",{\"1\":{\"958\":1}}],[\"在淘宝双十一活动日\",{\"1\":{\"1421\":1}}],[\"在服务发生调用时\",{\"1\":{\"4530\":1,\"6147\":1}}],[\"在服务器b未移除时\",{\"1\":{\"2032\":1}}],[\"在服务\",{\"1\":{\"1417\":3}}],[\"在使用之前需要引入`spring\",{\"1\":{\"5670\":1}}],[\"在使用之前需要引入spring\",{\"1\":{\"1345\":1}}],[\"在使用缓存时\",{\"1\":{\"4144\":1}}],[\"在使用\",{\"1\":{\"2868\":1,\"2907\":1,\"2908\":1,\"6540\":1,\"6579\":1,\"6580\":1}}],[\"在使用联合索引时\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"在使用布隆过滤器时\",{\"1\":{\"2179\":1}}],[\"在使用synchronizedlist进行遍历的时候要手动加锁\",{\"1\":{\"842\":1}}],[\"在方法中比较两个person对象的age大小\",{\"1\":{\"4274\":1}}],[\"在方法中声明一个异常\",{\"1\":{\"471\":1,\"5366\":1}}],[\"在方法上加\",{\"1\":{\"1343\":1,\"5667\":1}}],[\"在补充对象的\",{\"1\":{\"1279\":1,\"5621\":1}}],[\"在通过递归把\",{\"1\":{\"1258\":1,\"5610\":1}}],[\"在创建主键时添加前缀\",{\"1\":{\"4117\":1}}],[\"在创建半成品对象后存放到缓存中\",{\"1\":{\"1278\":1,\"5620\":1}}],[\"在创建\",{\"1\":{\"1258\":1,\"5610\":1}}],[\"在创建对象的同时隐藏创建逻辑\",{\"1\":{\"854\":1,\"5484\":1}}],[\"在填充属性\",{\"1\":{\"1283\":1,\"5625\":1}}],[\"在填充\",{\"1\":{\"1199\":1,\"5551\":1}}],[\"在其基础上新增了很多功能比如加密\",{\"1\":{\"7071\":1}}],[\"在其上实现热静态资源缓存\",{\"1\":{\"5001\":1,\"7283\":1}}],[\"在其存活期间的指定时刻完成一些相关操作\",{\"1\":{\"1166\":1}}],[\"在其他语言中也有应用\",{\"1\":{\"1158\":1,\"5539\":1}}],[\"在yml中添加以下代码\",{\"1\":{\"1137\":1,\"5716\":1}}],[\"在配置文件中配置编写的插件\",{\"1\":{\"1129\":1,\"5710\":1}}],[\"在树平衡的情况下\",{\"1\":{\"1086\":1}}],[\"在最坏的情况下\",{\"1\":{\"1065\":1}}],[\"在取模计算时\",{\"1\":{\"1059\":1}}],[\"在对表结构变更前\",{\"1\":{\"2904\":1,\"6576\":1}}],[\"在对数组长度进行按位与运算后得到的结果相同\",{\"1\":{\"1033\":1}}],[\"在对hashmap进行插入\",{\"1\":{\"1031\":1}}],[\"在深入分析之前\",{\"1\":{\"1030\":1}}],[\"在具体实现上\",{\"1\":{\"1011\":1}}],[\"在具体实践中\",{\"1\":{\"594\":1}}],[\"在上传\",{\"1\":{\"4724\":1}}],[\"在上传文件是该如何构造请求报文\",{\"1\":{\"4433\":1}}],[\"在上代码之前\",{\"1\":{\"1010\":1}}],[\"在上述实现中\",{\"1\":{\"605\":1}}],[\"在初始化hashmap的时候\",{\"1\":{\"984\":1}}],[\"在不停的扛着大并发\",{\"1\":{\"4148\":1}}],[\"在不同的版本的jdk中\",{\"1\":{\"1009\":1}}],[\"在不需要并发安全的场景中\",{\"1\":{\"958\":1}}],[\"在不影响其他对象的情况下\",{\"1\":{\"880\":1}}],[\"在jdk\",{\"1\":{\"3827\":1}}],[\"在jdk1\",{\"1\":{\"1069\":1}}],[\"在jdk8及以后的版本中\",{\"1\":{\"946\":1}}],[\"在java语言中可以使用\",{\"1\":{\"3663\":1,\"5826\":1}}],[\"在java里很少见\",{\"1\":{\"2116\":1}}],[\"在java\",{\"1\":{\"1065\":1,\"1071\":1}}],[\"在java的set体系中\",{\"1\":{\"734\":1}}],[\"在java中出现堆内存溢出\",{\"1\":{\"2119\":1}}],[\"在java中下载文件时\",{\"1\":{\"2104\":1}}],[\"在java中实现文件上传\",{\"1\":{\"2095\":1}}],[\"在java中\",{\"1\":{\"471\":1,\"1004\":1,\"1373\":1,\"5366\":1}}],[\"在我们的日常使用当中\",{\"1\":{\"943\":1}}],[\"在检索的时候效率差不多\",{\"1\":{\"925\":1,\"5442\":1}}],[\"在桶中元素量较小时没有这个必要\",{\"1\":{\"923\":1,\"5440\":1}}],[\"在锁定的对象区别上\",{\"1\":{\"840\":1}}],[\"在中间插入\",{\"1\":{\"757\":1}}],[\"在两端添加\",{\"1\":{\"756\":1,\"762\":1}}],[\"在heima\",{\"1\":{\"4858\":1,\"4918\":1}}],[\"在hashmap中\",{\"1\":{\"958\":1,\"989\":1,\"4200\":1}}],[\"在hashset中\",{\"1\":{\"737\":1}}],[\"在hotspot虚拟机中又被习惯称为永久代\",{\"1\":{\"398\":1}}],[\"在内部\",{\"1\":{\"3027\":1,\"6693\":1}}],[\"在内部实现中\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"在内部实现上\",{\"1\":{\"720\":1}}],[\"在内核中是两个完全独立的软件模块\",{\"1\":{\"2519\":1,\"2708\":1}}],[\"在内核里使用红黑树来跟踪进程所有待检测的文件描述字\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"在内存的另一个空间内存放\",{\"1\":{\"5108\":1}}],[\"在内存地址v中存储着变量值为\",{\"1\":{\"3669\":1,\"5832\":1}}],[\"在内存页被访问第二次的时候\",{\"1\":{\"1706\":1,\"1714\":1}}],[\"在内存访问方面\",{\"1\":{\"1638\":1}}],[\"在内存中生成一个代表该类的\",{\"1\":{\"419\":1,\"5310\":1}}],[\"在二叉树的第i层上至多有2^\",{\"1\":{\"677\":1}}],[\"在实体类中的id上加入如下配置\",{\"1\":{\"4823\":1,\"4971\":1}}],[\"在实际工作中内核抽象了相关细节\",{\"1\":{\"3430\":1}}],[\"在实际的工程应用上\",{\"1\":{\"624\":1}}],[\"在实例化一个bean时\",{\"1\":{\"1262\":1}}],[\"在实践中\",{\"1\":{\"638\":1}}],[\"在触发扩容的时候\",{\"1\":{\"629\":1}}],[\"在底层实现上\",{\"1\":{\"628\":1}}],[\"在真实的世界中\",{\"1\":{\"592\":1}}],[\"在这种饱和策略下\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"在这种情况下\",{\"1\":{\"1562\":1}}],[\"在这过程中如果事务\",{\"1\":{\"2988\":1,\"6660\":1}}],[\"在这个接口的一次调用流程中\",{\"1\":{\"5014\":1}}],[\"在这个模型中\",{\"1\":{\"4584\":1}}],[\"在这个key失效的瞬间\",{\"1\":{\"4148\":1}}],[\"在这个时间差内\",{\"1\":{\"3709\":1,\"5909\":1}}],[\"在这个时间段内\",{\"1\":{\"2635\":1}}],[\"在这个例子中\",{\"1\":{\"591\":1}}],[\"在这一步\",{\"1\":{\"2320\":1,\"3232\":1}}],[\"在这里插入图片描述\",{\"1\":{\"5644\":1,\"5717\":1,\"5719\":1,\"5723\":1,\"5733\":1,\"6152\":1,\"6952\":1}}],[\"在这里总结了常见的cpu飙升的原因\",{\"1\":{\"3531\":1}}],[\"在这里\",{\"1\":{\"590\":1}}],[\"在父类加载器没有找到所请求的类的情况下\",{\"1\":{\"445\":1,\"5338\":1}}],[\"在加载时调用\",{\"1\":{\"431\":1,\"5322\":1}}],[\"在加载类和结构到虚拟机后\",{\"1\":{\"286\":1}}],[\"在类加载的时候\",{\"1\":{\"422\":1,\"447\":1,\"5313\":1,\"5340\":1}}],[\"在未配置为采用cms\",{\"1\":{\"398\":1}}],[\"在多个事务对这条记录进行读写操作时\",{\"1\":{\"3000\":1,\"6672\":1}}],[\"在多线程并发的环境下\",{\"1\":{\"942\":1,\"943\":1}}],[\"在多线程的场景中可以直接使用vector类\",{\"1\":{\"805\":1}}],[\"在多\",{\"1\":{\"372\":1}}],[\"在整个过程中耗时最长的并发标记和并发清除过程中\",{\"1\":{\"367\":1}}],[\"在养老区\",{\"1\":{\"268\":1}}],[\"在哪里分配等问题\",{\"1\":{\"261\":1}}],[\"在\",{\"0\":{\"565\":1},\"1\":{\"197\":1,\"252\":1,\"302\":1,\"576\":1,\"594\":1,\"603\":1,\"899\":1,\"909\":1,\"1237\":1,\"1656\":1,\"1663\":1,\"1673\":1,\"1687\":1,\"1770\":1,\"1796\":1,\"1955\":1,\"2220\":1,\"2234\":1,\"2250\":1,\"2306\":1,\"2307\":1,\"2502\":1,\"2534\":1,\"2579\":1,\"2765\":1,\"2787\":1,\"2797\":1,\"2850\":1,\"2925\":1,\"2933\":1,\"3004\":1,\"3005\":1,\"3006\":1,\"3007\":1,\"3010\":1,\"3041\":1,\"3128\":1,\"3136\":1,\"3146\":1,\"3307\":1,\"3356\":1,\"3624\":1,\"3625\":1,\"3643\":1,\"3678\":1,\"3680\":1,\"3740\":1,\"3906\":1,\"4561\":1,\"4563\":1,\"4593\":1,\"4598\":1,\"4599\":1,\"4945\":1,\"5517\":1,\"5527\":1,\"5589\":1,\"5847\":1,\"5849\":1,\"5884\":1,\"5972\":1,\"6053\":1,\"6161\":1,\"6163\":1,\"6166\":1,\"6178\":1,\"6182\":1,\"6183\":1,\"6184\":1,\"6301\":1,\"6361\":1,\"6434\":1,\"6456\":1,\"6469\":1,\"6522\":1,\"6597\":1,\"6605\":1,\"6676\":1,\"6677\":1,\"6678\":1,\"6679\":1,\"6682\":1,\"6709\":1,\"6784\":1,\"6792\":1,\"6802\":1,\"6989\":1,\"7063\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"10\":1,\"5123\":1}}],[\"因而\",{\"1\":{\"6269\":1}}],[\"因而从这个角度来说\",{\"1\":{\"2965\":1,\"6637\":1}}],[\"因而近似平衡\",{\"1\":{\"693\":1,\"5460\":1}}],[\"因为该分组的目的\",{\"1\":{\"7046\":1}}],[\"因为一个\",{\"1\":{\"6379\":1,\"7026\":1}}],[\"因为一致性hash算法对于节点的增减都只需重定位环空间中的一小部分数据\",{\"1\":{\"2030\":1}}],[\"因为边缘触发可以减少\",{\"1\":{\"6280\":1}}],[\"因为md5可以被暴力破解\",{\"1\":{\"5036\":1}}],[\"因为md5是不可逆的\",{\"1\":{\"5036\":1}}],[\"因为初始化所以\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"因为他是为\",{\"1\":{\"4582\":1}}],[\"因为他的底层结构就是使用数组实现的\",{\"1\":{\"844\":1}}],[\"因为获取反射对象的过程比较消耗性能\",{\"1\":{\"3947\":1}}],[\"因为每个线程都需要执行\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"因为final\",{\"1\":{\"3773\":1}}],[\"因为正常的请求线程是不会在\",{\"1\":{\"3625\":1}}],[\"因为堆转储文件往往很大\",{\"1\":{\"3576\":1}}],[\"因为不知道主库的\",{\"1\":{\"3233\":1}}],[\"因为还是可能存在定期删除和惰性删除漏掉了很多过期\",{\"1\":{\"3176\":1,\"6834\":1}}],[\"因为还要进行停留在\",{\"1\":{\"1714\":1}}],[\"因为可以读到未提交事务修改的数据\",{\"1\":{\"3015\":1,\"6687\":1}}],[\"因为可重复读隔离级别下\",{\"1\":{\"3012\":1,\"6684\":1}}],[\"因为可能存在哈希冲突\",{\"1\":{\"2149\":1}}],[\"因为使用\",{\"1\":{\"3010\":1,\"6682\":1}}],[\"因为事务\",{\"1\":{\"2984\":1,\"6656\":1}}],[\"因为多个事务同时使用相同的数据时\",{\"1\":{\"2973\":1,\"6645\":1}}],[\"因为多个数值可能会用到同一索引\",{\"1\":{\"2167\":1}}],[\"因为间隙锁的目的是防止插入幻影记录而提出的\",{\"1\":{\"2954\":1,\"6626\":1}}],[\"因为它们只是局部的阻塞\",{\"1\":{\"3619\":1}}],[\"因为它属于快照读\",{\"1\":{\"2938\":1,\"6610\":1}}],[\"因为它是存在与我们的starter中的\",{\"1\":{\"5687\":1}}],[\"因为它是存在于我们的starter中的\",{\"1\":{\"1362\":1}}],[\"因为它是\",{\"1\":{\"2223\":1}}],[\"因为另一个事务中的插入会被阻塞\",{\"1\":{\"2924\":1,\"6596\":1}}],[\"因为申请不到\",{\"1\":{\"2902\":1,\"6574\":1}}],[\"因为当执行\",{\"1\":{\"3013\":1,\"6685\":1}}],[\"因为当事务提交了\",{\"1\":{\"2940\":1,\"6612\":1}}],[\"因为当我们对数据库表进行操作时\",{\"1\":{\"2889\":1,\"6561\":1}}],[\"因为当顺序发送的请求序列中的一个请求因为某种原因被阻塞时\",{\"1\":{\"2304\":1}}],[\"因为表锁的颗粒度太大\",{\"1\":{\"2886\":1,\"6558\":1}}],[\"因为索引是需要占用磁盘空间的\",{\"1\":{\"2836\":1,\"6508\":1}}],[\"因为对于线程池里面不会销毁的线程\",{\"1\":{\"3773\":1}}],[\"因为对于数据为\",{\"1\":{\"2824\":1,\"6496\":1}}],[\"因为对于发送失败的消息并没有做任何处理\",{\"1\":{\"1514\":1}}],[\"因为二级索引的叶子节点就存放的是主键\",{\"1\":{\"2806\":1,\"6478\":1}}],[\"因为整个\",{\"1\":{\"2799\":1,\"6471\":1}}],[\"因为只取前几个字符\",{\"1\":{\"2793\":1,\"6464\":1}}],[\"因为只有一个进程\",{\"1\":{\"1829\":1,\"6358\":1}}],[\"因为内核是通过四元祖信息来定位一个\",{\"1\":{\"2712\":1}}],[\"因为内存分页机制分配内存的最小单位是一页\",{\"1\":{\"1659\":1}}],[\"因为大部分没丢\",{\"1\":{\"2697\":1}}],[\"因为服务器不会去记忆\",{\"1\":{\"2273\":1}}],[\"因为是\",{\"1\":{\"2224\":1}}],[\"因为分表后\",{\"1\":{\"2060\":1,\"5765\":1}}],[\"因为分区数可能无法被消费者数量整除\",{\"1\":{\"1472\":1,\"6920\":1}}],[\"因为我这里是还要获取点赞数和评论数啥的\",{\"1\":{\"2045\":1,\"5750\":1}}],[\"因为我们一开始讲了在\",{\"1\":{\"6197\":1}}],[\"因为我们只有一个\",{\"1\":{\"4613\":1,\"6186\":1}}],[\"因为我们创建git版本库时\",{\"1\":{\"3367\":1}}],[\"因为我们没有在内存层面去拷贝数据\",{\"1\":{\"1806\":1,\"6313\":1}}],[\"因为我们知道\",{\"1\":{\"1044\":1}}],[\"因为我们根据\",{\"1\":{\"619\":1}}],[\"因为重量级锁会频繁切换内核态与用户态\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"因为都是自旋\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"因为从图片3的位置出发\",{\"1\":{\"2032\":1}}],[\"因为除数由3变为了4\",{\"1\":{\"2012\":1}}],[\"因为互斥对象只有一个\",{\"1\":{\"1980\":1,\"6239\":1}}],[\"因为数据是先进先出的传输方式\",{\"1\":{\"1950\":1}}],[\"因为数据均匀分布在每个bin中\",{\"1\":{\"929\":1,\"5446\":1}}],[\"因为线程具有相同的地址空间\",{\"1\":{\"1907\":1}}],[\"因为线程释放的资源相比进程少很多\",{\"1\":{\"1906\":1}}],[\"因为进程在创建的过程中\",{\"1\":{\"1905\":1}}],[\"因为系统调用还是\",{\"1\":{\"1794\":1,\"6299\":1}}],[\"因为仍然需要通过\",{\"1\":{\"1794\":1,\"6299\":1}}],[\"因为程序访问页面时是动态的\",{\"1\":{\"1728\":1}}],[\"因为程序运行符合局部性原理\",{\"1\":{\"1636\":1}}],[\"因为这正是我们要问询的\",{\"1\":{\"7038\":1}}],[\"因为这涉及了具体的业务场景\",{\"1\":{\"4485\":1,\"6118\":1}}],[\"因为这个列表中follower的数据是与leader同步的\",{\"1\":{\"1535\":1}}],[\"因为这里是servlet环境\",{\"1\":{\"1385\":1}}],[\"因为某些消费者不参与一些topic的分配\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"因为在\",{\"1\":{\"3361\":1,\"3556\":1}}],[\"因为在可重复读的隔离级别下\",{\"1\":{\"2867\":1,\"6539\":1}}],[\"因为在内核维护了红黑树\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"因为在一个大文件里查找和删除消息是很费时的事\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"因为在用户的桌面应用场景下\",{\"1\":{\"348\":1}}],[\"因为过了这个时间点\",{\"1\":{\"1427\":1}}],[\"因为0和任何数做与\",{\"1\":{\"1037\":1}}],[\"因为hash结果越分散效果越好\",{\"1\":{\"1058\":1}}],[\"因为hashtable是个线程安全的类\",{\"1\":{\"1049\":1}}],[\"因为hash值是随机的\",{\"1\":{\"956\":1}}],[\"因为hashset底层是用hashmap存储数据的\",{\"1\":{\"737\":1}}],[\"因为concurrenthashmap使用了分段锁\",{\"1\":{\"943\":1}}],[\"因为cpu需要不停的切换各个线程\",{\"1\":{\"192\":1}}],[\"因为synchronizedlist只是使用同步代码块包裹了arraylist的方法\",{\"1\":{\"839\":1}}],[\"因为你可以通过设置集合的初始化大小来避免不必要的资源开销\",{\"1\":{\"833\":1}}],[\"因为arraylist本质上就是一个数组\",{\"1\":{\"777\":1}}],[\"因为需要移动元素\",{\"1\":{\"750\":1}}],[\"因为此时二叉搜索树不是平衡树\",{\"1\":{\"704\":1,\"5472\":1}}],[\"因为要保持兼容性\",{\"1\":{\"596\":1}}],[\"因为\",{\"1\":{\"528\":1,\"621\":1,\"1274\":1,\"1425\":1,\"1815\":1,\"1816\":1,\"2453\":1,\"2802\":1,\"2834\":1,\"2899\":1,\"3042\":1,\"3100\":1,\"3101\":1,\"3102\":1,\"3103\":1,\"4561\":1,\"4623\":1,\"4625\":1,\"5416\":1,\"5616\":1,\"6161\":1,\"6200\":1,\"6203\":1,\"6342\":1,\"6343\":1,\"6361\":1,\"6474\":1,\"6506\":1,\"6571\":1,\"6710\":1,\"6756\":1,\"6757\":1,\"6758\":1,\"6759\":1,\"7079\":1}}],[\"因为终于看到了exception\",{\"1\":{\"492\":1,\"5379\":1}}],[\"因为return表⽰的是要整个⽅法体返回\",{\"1\":{\"484\":1}}],[\"因此实际应用中也看不到单\",{\"1\":{\"6378\":1}}],[\"因此实际中并没有应用\",{\"1\":{\"6332\":1}}],[\"因此如果你的密码很不幸被搜集在彩虹表里\",{\"1\":{\"5054\":1}}],[\"因此如果公司对自己的技术实力有自信\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"因此它不能处理\",{\"1\":{\"4608\":1}}],[\"因此主键索引非常重要\",{\"1\":{\"4224\":1}}],[\"因此在\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"因此在操作数据时\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"因此fixedthreadpool最多只能创建核心线程数的线程\",{\"1\":{\"3878\":1,\"6033\":1}}],[\"因此这种策略会降低对于新任务提交速度\",{\"1\":{\"3871\":1,\"6026\":1}}],[\"因此这种进程间通信方式是在同一个计算机系统中的诸进程间实现通信的快捷的方法\",{\"1\":{\"3471\":1}}],[\"因此乐观锁不会上锁\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"因此新增文件\",{\"1\":{\"3491\":1}}],[\"因此引入了间接\",{\"1\":{\"3489\":1}}],[\"因此哈希表可以快速检索数据\",{\"1\":{\"2755\":1,\"6424\":1}}],[\"因此也称其为容器\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"因此也有可能会因为其他主机之间的通信使得网络拥堵\",{\"1\":{\"2664\":1}}],[\"因此也可以用在纯消息通讯\",{\"1\":{\"1410\":1}}],[\"因此是需要四次挥手\",{\"1\":{\"2604\":1}}],[\"因此通常被称为四次挥手\",{\"1\":{\"2601\":1}}],[\"因此经常用于\",{\"1\":{\"2504\":1,\"2507\":1}}],[\"因此可以采用这种方式来备份数据库\",{\"1\":{\"2869\":1,\"6541\":1}}],[\"因此可以并发不同的\",{\"1\":{\"2362\":1}}],[\"因此可以借助于\",{\"1\":{\"37\":1,\"5150\":1}}],[\"因此有可能遭遇伪装\",{\"1\":{\"2286\":1}}],[\"因此得名\",{\"1\":{\"2148\":1}}],[\"因此我们将此段代码称为临界区\",{\"1\":{\"1978\":1}}],[\"因此我们程序要保证一次性将内核缓冲区的数据读取完\",{\"1\":{\"1778\":1,\"6274\":1}}],[\"因此都需要遍历文件描述符集合来找到可读或可写的\",{\"1\":{\"1772\":1}}],[\"因此处理速度非常快\",{\"1\":{\"1017\":1}}],[\"因此就可能导致不均匀的数据分布\",{\"1\":{\"929\":1,\"5446\":1}}],[\"因此不能代理声明为\",{\"1\":{\"914\":1,\"5532\":1}}],[\"因此拥有最高的单线程收集效率\",{\"1\":{\"347\":1}}],[\"因此需要特定的命令解析器执行引擎\",{\"1\":{\"181\":1,\"5290\":1}}],[\"因此\",{\"1\":{\"28\":1,\"299\":1,\"569\":1,\"575\":1,\"590\":1,\"630\":1,\"638\":1,\"2475\":1,\"2515\":1,\"2521\":1,\"2740\":1,\"2767\":2,\"2925\":1,\"3462\":1,\"3474\":1,\"3560\":1,\"4149\":1,\"4574\":1,\"4648\":1,\"5013\":1,\"5141\":1,\"6221\":1,\"6279\":1,\"6409\":1,\"6436\":2,\"6597\":1,\"7045\":1,\"7091\":1}}],[\"堆积在内存里\",{\"1\":{\"3176\":1,\"6834\":1}}],[\"堆段组成\",{\"1\":{\"1640\":1}}],[\"堆被分为新生代和老年代\",{\"1\":{\"373\":1}}],[\"堆被划分为新生代和老年代\",{\"1\":{\"252\":1}}],[\"堆一样\",{\"1\":{\"279\":1}}],[\"堆的最大内存\",{\"1\":{\"250\":1}}],[\"堆大小\",{\"1\":{\"250\":1}}],[\"堆用于存储\",{\"1\":{\"242\":1}}],[\"堆区分开\",{\"1\":{\"240\":1,\"280\":1}}],[\"堆可以是处于物理上不连续的内存空间中\",{\"1\":{\"228\":1}}],[\"堆内存中的对象使用情况\",{\"1\":{\"3563\":1}}],[\"堆内存溢出原因主要是以下几种\",{\"1\":{\"2116\":1}}],[\"堆内存分配很大的对象\",{\"1\":{\"405\":1}}],[\"堆内存\",{\"1\":{\"227\":1}}],[\"堆是\",{\"1\":{\"222\":1}}],[\"堆外内存\",{\"1\":{\"187\":1}}],[\"堆\",{\"1\":{\"187\":1,\"3880\":1,\"6035\":1}}],[\"这无所谓\",{\"1\":{\"6205\":1}}],[\"这确保了只返回分页查询条件指定的结果子集\",{\"1\":{\"4961\":1}}],[\"这通常涉及到以下操作\",{\"1\":{\"4957\":1}}],[\"这包括指定要查询的页码\",{\"1\":{\"4955\":1}}],[\"这允许多个拦截器协同工作\",{\"1\":{\"4946\":1}}],[\"这端\",{\"1\":{\"4598\":1,\"6182\":1}}],[\"这地方吹了一下星火比其他三家的好用\",{\"1\":{\"4423\":1}}],[\"这地方有个常见面试题\",{\"1\":{\"2472\":1}}],[\"这行日志最终标示自动配置完成\",{\"1\":{\"4237\":1}}],[\"这行日志表示如果是web应用\",{\"1\":{\"4235\":1}}],[\"这行日志表明springboot读取了spring\",{\"1\":{\"4233\":1}}],[\"这代表你将丢失对这个任务的处理\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"这整个操作就是cas\",{\"1\":{\"3675\":1,\"5844\":1}}],[\"这与出现\",{\"1\":{\"3624\":1}}],[\"这与服务器b移除之前并没有任何区别\",{\"1\":{\"2032\":1}}],[\"这段共享内存由一个进程创建\",{\"1\":{\"3465\":1}}],[\"这段代码是为了对key的hashcode进行扰动计算\",{\"1\":{\"1036\":1}}],[\"这使得\",{\"1\":{\"7066\":1}}],[\"这使得编写web服务客户端更容易\",{\"1\":{\"4532\":1,\"6149\":1}}],[\"这使得微服务可以采用任何的开发语言和技术来实现\",{\"1\":{\"4478\":1,\"6111\":1}}],[\"这使得它非常适合用于高速的限流决策\",{\"1\":{\"4086\":1}}],[\"这使得管道\",{\"1\":{\"2296\":1}}],[\"这使我们能够快速可靠地部署应用程序\",{\"1\":{\"3314\":1}}],[\"这类大的二进制数据通常存储于文件服务器\",{\"1\":{\"3069\":1,\"6720\":1}}],[\"这类大的二进制数据\",{\"0\":{\"6718\":1},\"1\":{\"3067\":1}}],[\"这类服务依旧只能采用写主机房\",{\"1\":{\"2075\":1,\"5780\":1}}],[\"这四个隔离级别如下\",{\"1\":{\"2996\":1,\"6668\":1}}],[\"这四种隔离级别具体是如何实现的呢\",{\"1\":{\"3014\":1,\"6686\":1}}],[\"这四种\",{\"1\":{\"1430\":1}}],[\"这条记录了\",{\"1\":{\"2953\":1,\"6625\":1}}],[\"这条消息的状态是待发送状态\",{\"1\":{\"2048\":1,\"5753\":1}}],[\"这主要是通过\",{\"1\":{\"2920\":1,\"6592\":1}}],[\"这应该是非聚簇索引最大的缺点了\",{\"1\":{\"2811\":1,\"6483\":1}}],[\"这被称为\",{\"1\":{\"2766\":1,\"2767\":1,\"6435\":1,\"6436\":1}}],[\"这在并发写的情况下是多么滴憨憨啊\",{\"1\":{\"2734\":1,\"6403\":1}}],[\"这会造成什么情况呢\",{\"1\":{\"2555\":1}}],[\"这会导致consumer有些消息处理了\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"这会导致频繁加锁从而降低效率\",{\"1\":{\"273\":1}}],[\"这次报文可以携带客户到服务端的数据\",{\"1\":{\"2529\":1}}],[\"这篇文章来一起看下tcp中那些烦人\",{\"1\":{\"2398\":1}}],[\"这可分配的地址数量是大的惊人\",{\"1\":{\"2375\":1}}],[\"这可以看作是它的底层协议\",{\"1\":{\"4041\":1}}],[\"这可以快速定位系统瓶颈所在\",{\"1\":{\"2139\":1}}],[\"这可以使用\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"这也可以过滤更多数据\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"这也就是\",{\"1\":{\"2304\":1}}],[\"这也是整个集群的管理机制\",{\"1\":{\"4564\":1}}],[\"这也是threadlocal变量名的由来\",{\"1\":{\"3758\":1,\"5990\":1}}],[\"这也是和\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"这也是为什么很多场合我们输密码的时候\",{\"1\":{\"5054\":1}}],[\"这也是为什么\",{\"1\":{\"2734\":1,\"6403\":1}}],[\"这也是面试常问的题\",{\"1\":{\"2531\":1}}],[\"这也是\",{\"1\":{\"1810\":1,\"6317\":1}}],[\"这也是spring默认选择的注入方式\",{\"1\":{\"1267\":1}}],[\"这称为\",{\"1\":{\"2299\":1}}],[\"这系列操作都要知道用户的身份才行\",{\"1\":{\"2275\":1}}],[\"这能减轻服务器的负担\",{\"1\":{\"2273\":1}}],[\"这属于原始的文件上传方式\",{\"1\":{\"2093\":1}}],[\"这显然对长作业不利\",{\"1\":{\"1918\":1}}],[\"这显然就降低了这俩地址转换的速度\",{\"1\":{\"1671\":1}}],[\"这有助于提高系统的吞吐量\",{\"1\":{\"1917\":1}}],[\"这似乎很公平\",{\"1\":{\"1914\":1}}],[\"这三个单词首字母组合\",{\"1\":{\"4637\":1,\"6209\":1}}],[\"这三个对象\",{\"1\":{\"1817\":1,\"6346\":1}}],[\"这三者都实现了list\",{\"1\":{\"776\":1}}],[\"这名字听起来很调皮\",{\"1\":{\"1744\":1}}],[\"这很理想\",{\"1\":{\"1728\":1}}],[\"这两个术语还挺抽象的\",{\"1\":{\"6273\":1}}],[\"这两个命令在实际使用时\",{\"1\":{\"3324\":1}}],[\"这两个事务同时在处理\",{\"1\":{\"2983\":1,\"2988\":1,\"2992\":1,\"6655\":1,\"6660\":1,\"6664\":1}}],[\"这两个索引就是冗余索引\",{\"1\":{\"2838\":1,\"6510\":1}}],[\"这两个情况都有个共同点\",{\"1\":{\"2646\":1}}],[\"这两个字段的意思是\",{\"1\":{\"2240\":1,\"2243\":1}}],[\"这两个都可以方便地实现进程\",{\"1\":{\"1989\":1,\"6248\":1}}],[\"这两个操作是必须成对出现的\",{\"1\":{\"1967\":1}}],[\"这两个系统调用\",{\"1\":{\"1799\":1,\"6304\":1}}],[\"这两个区域都有各自的头和尾节点\",{\"1\":{\"1711\":1}}],[\"这两个值是通过过去回收的经验获得\",{\"1\":{\"374\":1}}],[\"这正是分段会产生外部内存碎片的原因\",{\"1\":{\"1658\":1}}],[\"这其实是相当于至少允许报文丢失一次\",{\"1\":{\"2615\":1}}],[\"这其实就是\",{\"1\":{\"1526\":1}}],[\"这其实和java\",{\"1\":{\"1073\":1}}],[\"这一差别会变得尤为明显\",{\"1\":{\"4115\":1}}],[\"这一章节\",{\"1\":{\"3906\":1,\"6053\":1}}],[\"这一次没有其他线程改变地址\",{\"1\":{\"3674\":1,\"5842\":1}}],[\"这一步是最难的一步\",{\"1\":{\"3530\":1}}],[\"这一步需要调用\",{\"1\":{\"3162\":1,\"6818\":1}}],[\"这一步需要调用write函数\",{\"1\":{\"3161\":1,\"6817\":1}}],[\"这一步至关重要\",{\"1\":{\"1388\":1}}],[\"这一层\",{\"1\":{\"2365\":1}}],[\"这一层面\",{\"1\":{\"2365\":1}}],[\"这一项同时把之前所有内容的发生的数据做个摘要\",{\"1\":{\"2335\":1,\"2342\":1}}],[\"这一切都发生在内核态\",{\"1\":{\"1791\":1,\"6296\":1}}],[\"这一种固定的数据结构了\",{\"1\":{\"612\":1}}],[\"这将消除每次手动部署更改的需要\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"这时就可以将\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"这时就需要对cpu飙升问题进行排查\",{\"1\":{\"3512\":1}}],[\"这时就需要对丢失的数据包进行重传\",{\"1\":{\"2688\":1}}],[\"这时数据库的线程很快就会爆满了\",{\"1\":{\"2901\":1,\"6573\":1}}],[\"这时线程\",{\"1\":{\"2900\":1,\"6572\":1}}],[\"这时其他线程执行以下操作\",{\"1\":{\"2855\":1,\"6527\":1}}],[\"这时\",{\"1\":{\"2247\":1,\"2665\":1}}],[\"这时有两种方案\",{\"1\":{\"1537\":1}}],[\"这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息\",{\"1\":{\"1334\":1,\"5656\":1}}],[\"这时候如果企业有安全限制\",{\"1\":{\"3572\":1}}],[\"这时候\",{\"1\":{\"1157\":1,\"5538\":1}}],[\"这时候不管你需要什么map\",{\"1\":{\"514\":1,\"5402\":1}}],[\"这时候反射就派上用场了\",{\"1\":{\"509\":1,\"5397\":1}}],[\"这时候切换回来以后\",{\"1\":{\"192\":1}}],[\"这对数据库影响较小\",{\"1\":{\"1113\":1}}],[\"这又引入了哈希分布不均匀的问题\",{\"1\":{\"1060\":1}}],[\"这不过这里的\",{\"1\":{\"4619\":1,\"6192\":1}}],[\"这不是不可预知的吗\",{\"1\":{\"1921\":1}}],[\"这不就发生了冲突吗\",{\"1\":{\"1033\":1}}],[\"这不难理解\",{\"1\":{\"1008\":1}}],[\"这实现的原理如下\",{\"1\":{\"1018\":1}}],[\"这⾥的双重检查是指两次⾮空判断\",{\"1\":{\"859\":1,\"5489\":1}}],[\"这决定了以下几点\",{\"1\":{\"746\":1}}],[\"这决定了它有如下特点\",{\"1\":{\"720\":1,\"752\":1,\"761\":1,\"954\":1,\"1083\":1}}],[\"这难道不是重蹈了\",{\"1\":{\"620\":1}}],[\"这么多年了\",{\"1\":{\"598\":1}}],[\"这么难的逻辑都被你实现了\",{\"1\":{\"508\":1,\"5396\":1}}],[\"这个最后的一个点代表根域名\",{\"1\":{\"7083\":1}}],[\"这个字符串在日志里的出现次数\",{\"1\":{\"5013\":1}}],[\"这个字符串\",{\"1\":{\"5013\":1,\"5014\":1}}],[\"这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据\",{\"1\":{\"2653\":1}}],[\"这个\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"这个正好前几天比亚迪宣讲会上听了\",{\"1\":{\"4446\":1}}],[\"这个我说一页一页的看\",{\"1\":{\"4413\":1}}],[\"这个我说就是了解\",{\"1\":{\"4333\":1,\"7158\":1}}],[\"这个回答的full\",{\"1\":{\"4402\":1}}],[\"这个经理不太专业呀\",{\"1\":{\"4351\":1}}],[\"这个熟\",{\"1\":{\"4311\":1,\"7136\":1}}],[\"这个离谱\",{\"1\":{\"4298\":1,\"7123\":1}}],[\"这个紧张忘了\",{\"1\":{\"4292\":1,\"7117\":1}}],[\"这个模块被命名为\",{\"1\":{\"4180\":1}}],[\"这个统一认证系统负责对用户进行认证\",{\"1\":{\"4047\":1}}],[\"这个变量实际被修改过了\",{\"1\":{\"3685\":1,\"5854\":1}}],[\"这个变量所在的位置附近的位置很有可能在程序后续运行中被访问到\",{\"1\":{\"1623\":1}}],[\"这个重新尝试的过程被称为自旋\",{\"1\":{\"3673\":1,\"5840\":1}}],[\"这个机制\",{\"1\":{\"3642\":1,\"5883\":1}}],[\"这个文件的存储路径也可以通过参数指定\",{\"1\":{\"3570\":1}}],[\"这个转储文件的后缀为\",{\"1\":{\"3570\":1}}],[\"这个线程名称是我们在业务代码中给线程取的名称\",{\"1\":{\"3560\":1}}],[\"这个应该没人使用吧\",{\"1\":{\"3186\":1,\"6844\":1}}],[\"这个id是递增的\",{\"1\":{\"3044\":1}}],[\"这个索引的\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"这个对比有点废话\",{\"1\":{\"2747\":1,\"6416\":1}}],[\"这个恢复的过程依赖于\",{\"1\":{\"2744\":1,\"6413\":1}}],[\"这个情况就会进入恶性循环被不断地放大\",{\"1\":{\"2665\":1}}],[\"这个情况会越来越严重\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"这个域名归\",{\"1\":{\"2391\":1,\"7095\":1}}],[\"这个包中包含了想要知道的\",{\"1\":{\"2379\":1}}],[\"这个唯一标识的值是根据当前请求的资源生成的\",{\"1\":{\"2250\":1}}],[\"这个缓存可以做到浏览器本身上\",{\"1\":{\"2223\":1}}],[\"这个缓冲区\",{\"1\":{\"1790\":1,\"6295\":1}}],[\"这个怎么解决\",{\"0\":{\"2077\":1,\"5782\":1}}],[\"这个操作会把信号量加上\",{\"1\":{\"1966\":1}}],[\"这个操作会把信号量减去\",{\"1\":{\"1965\":1}}],[\"这个匿名管道是特殊的文件\",{\"1\":{\"1953\":1}}],[\"这个竖线\",{\"1\":{\"1946\":1}}],[\"这个新的实体\",{\"1\":{\"1889\":1}}],[\"这个方式就是边缘触发\",{\"1\":{\"6276\":1}}],[\"这个方案\",{\"1\":{\"1822\":1,\"6351\":1}}],[\"这个方法可以提高直接访问私有属性和方法的效率\",{\"1\":{\"3945\":1}}],[\"这个方法的调用就会被转发到实现invocationhandler\",{\"1\":{\"902\":1,\"5520\":1}}],[\"这个方法一共有\",{\"1\":{\"901\":1,\"5519\":1}}],[\"这个方法主要用来生成一个代理对象\",{\"1\":{\"900\":1,\"5518\":1}}],[\"这个方法很重要\",{\"1\":{\"732\":1}}],[\"这个开源项目\",{\"1\":{\"1810\":1,\"6317\":1}}],[\"这个过程依赖于内存快照生成的\",{\"1\":{\"3234\":1}}],[\"这个过程之中\",{\"1\":{\"1805\":1,\"6311\":1}}],[\"这个过程是原子的\",{\"1\":{\"3667\":1,\"5830\":1}}],[\"这个过程是由\",{\"1\":{\"1792\":1,\"6297\":1}}],[\"这个过程是很快的\",{\"1\":{\"1761\":1}}],[\"这个就是水平触发的方式\",{\"1\":{\"6276\":1}}],[\"这个就是\",{\"1\":{\"1731\":1}}],[\"这个就是预读失效\",{\"1\":{\"1693\":1}}],[\"这个基地址与页内偏移的组合就形成了物理内存地址\",{\"1\":{\"1661\":1}}],[\"这个办法\",{\"1\":{\"1655\":1}}],[\"这个时候重新选举的时候我们如果把\",{\"1\":{\"4623\":1,\"6200\":1}}],[\"这个时候可以使用\",{\"1\":{\"3697\":1,\"5866\":1}}],[\"这个时候对线程1来说\",{\"1\":{\"3670\":1,\"5834\":1}}],[\"这个时候有其他人来了只能在外面等\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"这个时候访问\",{\"1\":{\"3580\":1}}],[\"这个时候\",{\"1\":{\"1455\":2,\"2692\":1,\"4620\":1,\"4625\":1,\"6193\":1,\"6203\":1,\"6903\":2}}],[\"这个短暂的高峰期请求积压是可以接受的\",{\"1\":{\"1427\":1}}],[\"这个parent就是spring\",{\"1\":{\"1353\":1,\"5678\":1}}],[\"这个注解包含了\",{\"1\":{\"1298\":1}}],[\"这个半成品对象已经存放在缓存到singletonobjects\",{\"1\":{\"1258\":1,\"5610\":1}}],[\"这个代理对象实现了dao接口\",{\"1\":{\"1093\":1}}],[\"这个是最常用的\",{\"1\":{\"3184\":1,\"6842\":1}}],[\"这个是告诉浏览器可以使用本地缓存的资源\",{\"1\":{\"2238\":1}}],[\"这个是可以证明出来的\",{\"1\":{\"1054\":1}}],[\"这个是无法更改的\",{\"1\":{\"844\":1}}],[\"这个扩容条件指的是什么呢\",{\"1\":{\"987\":1}}],[\"这个问题有人吐槽过\",{\"1\":{\"5096\":1}}],[\"这个问题竟然是个陷阱\",{\"1\":{\"3359\":1}}],[\"这个问题的典型案例是小米云的c++程序员重写finalize导致了线上oom\",{\"1\":{\"2116\":1}}],[\"这个问题看似简单\",{\"1\":{\"947\":1}}],[\"这个问题至此已经无解了\",{\"1\":{\"621\":1}}],[\"这个优势更加明显\",{\"1\":{\"915\":1,\"5533\":1}}],[\"这个实例就会被创建\",{\"1\":{\"859\":1,\"5489\":1}}],[\"这个关键字被占据了\",{\"1\":{\"621\":1}}],[\"这个stack\",{\"1\":{\"619\":1}}],[\"这个概念不是我说的\",{\"1\":{\"593\":1}}],[\"这个类就是被代理类\",{\"1\":{\"4182\":1}}],[\"这个类的\",{\"1\":{\"3689\":1,\"5859\":1}}],[\"这个类的若干我们不需要的方法\",{\"1\":{\"620\":1}}],[\"这个类的一大问题\",{\"1\":{\"620\":1}}],[\"这个类的覆辙\",{\"1\":{\"620\":1}}],[\"这个类\",{\"1\":{\"572\":1,\"639\":1}}],[\"这个不推荐不是某个技术专家或者某个企业的规范标准\",{\"1\":{\"566\":1}}],[\"这就和\",{\"1\":{\"4649\":1,\"6222\":1}}],[\"这就叫\",{\"1\":{\"4643\":1,\"6216\":1}}],[\"这就导致每次请求都会到底层数据库进行查询\",{\"1\":{\"4151\":1}}],[\"这就导致这些请求直接到了数据库上\",{\"1\":{\"3247\":1,\"6852\":1}}],[\"这就会造成大问题\",{\"1\":{\"3686\":1,\"5855\":1}}],[\"这就好比雪崩一样\",{\"1\":{\"3275\":1,\"6880\":1}}],[\"这就可能会导致瞬时大量的请求直接打到了数据库上\",{\"1\":{\"3265\":1,\"6870\":1}}],[\"这就用到了replication\",{\"1\":{\"3239\":1}}],[\"这就使得线程之间的数据交互效率更高了\",{\"1\":{\"1908\":1}}],[\"这就解决了多进程之间地址冲突的问题\",{\"1\":{\"1637\":1}}],[\"这就要涉及到hashtable的构造函数和扩容函数了\",{\"1\":{\"1050\":1}}],[\"这就很好的避免了冲突\",{\"1\":{\"1042\":1}}],[\"这就产生了冲突\",{\"1\":{\"1039\":1}}],[\"这就是两者的区别\",{\"1\":{\"6277\":1}}],[\"这就是多路复用\",{\"1\":{\"6260\":1}}],[\"这就是缓存穿透问题\",{\"1\":{\"4151\":1}}],[\"这就是缓存雪崩\",{\"1\":{\"4145\":1}}],[\"这就是我的自我介绍\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"这就是我们在rc级别下的事务中可以看到别的事务提交的更新的原因\",{\"1\":{\"3057\":1}}],[\"这就是为什么只有在同步的块或者方法中才能调用wait\",{\"1\":{\"3741\":1,\"5973\":1}}],[\"这就是事务四大特性中的隔离性\",{\"1\":{\"2867\":1,\"6539\":1}}],[\"这就是所谓的流量控制\",{\"1\":{\"2661\":1}}],[\"这就是所谓的零拷贝\",{\"1\":{\"1806\":1,\"6313\":1}}],[\"这就是一致性哈希算法的优点\",{\"1\":{\"2032\":1}}],[\"这就是扫描\",{\"1\":{\"1759\":1}}],[\"这就是\",{\"1\":{\"621\":1,\"2366\":1}}],[\"这就是抛出异常\",{\"1\":{\"474\":1,\"5369\":1}}],[\"这就意味着自旋的时间不再固定了\",{\"1\":{\"3827\":1}}],[\"这就意味着\",{\"1\":{\"619\":1}}],[\"这就需要提到双亲委派模型了\",{\"1\":{\"438\":1,\"5330\":1}}],[\"这\",{\"1\":{\"410\":1,\"5299\":1}}],[\"这里说的网络设备\",{\"1\":{\"7045\":1}}],[\"这里需要注意的是\",{\"1\":{\"7045\":1}}],[\"这里涉及共享数据的竞争\",{\"1\":{\"6374\":1}}],[\"这里为了方便随便取个数字\",{\"1\":{\"4619\":1,\"6192\":1}}],[\"这里的句点代表了不同层次之间的界限\",{\"1\":{\"7081\":1}}],[\"这里的主备系统架构模型\",{\"1\":{\"4593\":1}}],[\"这里的叶子节点指的是最底层的空节点\",{\"1\":{\"696\":1,\"5463\":1}}],[\"这里没听清发音\",{\"1\":{\"4314\":1,\"7139\":1}}],[\"这里通过\",{\"1\":{\"4032\":1}}],[\"这里借用\",{\"1\":{\"3849\":1,\"6003\":1}}],[\"这里不需要重新加锁\",{\"1\":{\"3797\":1,\"5809\":1}}],[\"这里必然会存在时间差\",{\"1\":{\"3709\":1,\"5909\":1}}],[\"这里要进行一个转换\",{\"1\":{\"3556\":1}}],[\"这里主要比较一下高级通信的这三种方式的特点\",{\"1\":{\"3467\":1}}],[\"这里主要使用的是复制算法\",{\"1\":{\"384\":1}}],[\"这里是2\",{\"1\":{\"3207\":1}}],[\"这里是针对\",{\"1\":{\"1897\":1}}],[\"这里对上面提到的一些\",{\"1\":{\"3166\":1,\"6822\":1}}],[\"这里给出优化\",{\"1\":{\"2626\":1}}],[\"这里一点需要注意是\",{\"1\":{\"2602\":1}}],[\"这里使用cuckoofilter实现了布隆过滤器\",{\"1\":{\"2178\":1}}],[\"这里都是在配置文件中配置了\",{\"1\":{\"2177\":1}}],[\"这里还有一种情况\",{\"1\":{\"2075\":1,\"5780\":1}}],[\"这里回答的是单个表吧\",{\"1\":{\"2062\":1,\"5767\":1}}],[\"这里产生饥饿的原因是磁头在一小块区域来回移动\",{\"1\":{\"1757\":1}}],[\"这里存放的是很少被访问\",{\"1\":{\"1703\":1}}],[\"这里存放的是最近被访问过\",{\"1\":{\"1702\":1}}],[\"这里我们主要看\",{\"1\":{\"1626\":1}}],[\"这里只能是尽量均衡\",{\"1\":{\"1472\":1,\"6920\":1}}],[\"这里配置视图解析器\",{\"1\":{\"1398\":1}}],[\"这里调用方法没有声明对象来接收\",{\"1\":{\"1392\":1}}],[\"这里面有你提交到所有版本的数据\",{\"1\":{\"3335\":1}}],[\"这里面定义了依赖的版本\",{\"1\":{\"1356\":1,\"5681\":1}}],[\"这里面是包含负数的\",{\"1\":{\"1044\":1}}],[\"这里就那redis来说一下\",{\"1\":{\"5722\":1}}],[\"这里就需要哨兵集群的选举机制了\",{\"1\":{\"3209\":1}}],[\"这里就引出了两种地址的概念\",{\"1\":{\"1631\":1}}],[\"这里就redis来说一下\",{\"1\":{\"1143\":1}}],[\"这里就不贴代码了\",{\"1\":{\"1050\":1}}],[\"这里有个地方需要注意\",{\"1\":{\"3233\":1}}],[\"这里有两道常见面试题\",{\"1\":{\"2511\":1}}],[\"这里有一个小建议\",{\"1\":{\"984\":1}}],[\"这里有问题\",{\"0\":{\"617\":1},\"1\":{\"618\":1}}],[\"这里\",{\"1\":{\"815\":1}}],[\"这里换为真实地址\",{\"1\":{\"289\":1}}],[\"这意味着你可以为每个令牌或限流规则设置一个超时时间\",{\"1\":{\"4087\":1}}],[\"这意味着任何容器化应用程序都可以在任何平台上运行\",{\"1\":{\"3314\":1}}],[\"这意味着事务执行期间\",{\"1\":{\"2896\":1,\"6568\":1}}],[\"这意味着同一个进程的线程都具有同一个页表\",{\"1\":{\"1907\":1}}],[\"这意味着一个进程的存在\",{\"1\":{\"1861\":1}}],[\"这意味着我们可以将最坏情况下的性能从o\",{\"1\":{\"1065\":1}}],[\"这意味着运行期间不会产生内存空间碎片\",{\"1\":{\"381\":1}}],[\"这意味着在执行垃圾收集的时候需要停顿用户程序\",{\"1\":{\"343\":1}}],[\"这阶段需要停顿线程\",{\"1\":{\"378\":1}}],[\"这些功能的实现主要依赖于\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"这些数据流之间独立互不影响\",{\"1\":{\"7073\":1}}],[\"这些数据结构非常适合用于实现不同类型的限流算法\",{\"1\":{\"4088\":1}}],[\"这些数据理论上占用并不多\",{\"1\":{\"2117\":1}}],[\"这些并发工具类都在java\",{\"1\":{\"3680\":1,\"5849\":1}}],[\"这些进程之间的读写操作的同步问题操作系统无法实现\",{\"1\":{\"3474\":1}}],[\"这些进程通过明确定义的通信接口与中心内核通信\",{\"1\":{\"3434\":1}}],[\"这些工具包括常见的命令行工具\",{\"1\":{\"3447\":1}}],[\"这些文件不需要被提交\",{\"0\":{\"3378\":1}}],[\"这些请求中的写操作并没有记录到刚刚生成的\",{\"1\":{\"3235\":1}}],[\"这些函数被称为\",{\"1\":{\"3165\":1,\"6821\":1}}],[\"这些事务的修改对于当前事务都是不可见的\",{\"1\":{\"3056\":1}}],[\"这些操作都是一种当前读\",{\"1\":{\"3022\":1}}],[\"这些操作具有前后关系\",{\"1\":{\"1503\":1,\"6958\":1}}],[\"这些信息的组合\",{\"1\":{\"2461\":1}}],[\"这些信息包含如下\",{\"1\":{\"493\":1,\"5380\":1}}],[\"这些环境就叫做\",{\"1\":{\"1878\":1}}],[\"这些大量数据都会被加入到\",{\"1\":{\"1697\":1}}],[\"这些自动配置类可以帮助spring\",{\"1\":{\"1300\":1}}],[\"这些解决⽅案是众多软件开发⼈员经过相当⻓的⼀段时间的试验和错误总结出来的\",{\"1\":{\"852\":1,\"5482\":1}}],[\"这些对象是在哪部分代码中分配的\",{\"1\":{\"3591\":1}}],[\"这些对象被标记为存活对象\",{\"1\":{\"376\":1}}],[\"这些对比都是指数据量很大或者操作很频繁的情况下的对比\",{\"1\":{\"779\":1}}],[\"这些类和电脑类之间的关系\",{\"1\":{\"586\":1}}],[\"这些异常一般是由程序逻辑错误引起的\",{\"1\":{\"459\":1,\"5354\":1}}],[\"这些异常是不检查异常\",{\"1\":{\"459\":1,\"5354\":1}}],[\"这些与线程一一对应的数据区域会随着线程开始和结束而创建和销毁\",{\"1\":{\"185\":1}}],[\"这点停顿是可以接受的\",{\"1\":{\"348\":1}}],[\"这部分内容将在类加载后存放到方法区的运行时常量池中\",{\"1\":{\"287\":1}}],[\"这部分内容将类在加载后进入方法区的运行时常量池中存放\",{\"1\":{\"281\":1}}],[\"这种思想很类似一个\",{\"1\":{\"6260\":1}}],[\"这种加锁的思路是\",{\"1\":{\"4904\":1,\"7274\":1}}],[\"这种任务应用起来\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"这种任务消耗的主要是\",{\"1\":{\"3897\":1,\"6044\":1}}],[\"这种结构每个数据都有两个指针\",{\"1\":{\"3641\":1,\"5882\":1}}],[\"这种通信方式允许多个进程在外部通信协议或同步\",{\"1\":{\"3471\":1}}],[\"这种通信方式主要用于解决与同步相关的问题并避免竞争条件\",{\"1\":{\"1973\":1,\"6254\":1}}],[\"这种通信的实现是以消息缓冲区为中间介质\",{\"1\":{\"3469\":1}}],[\"这种现象就被称为幻读\",{\"1\":{\"2994\":1,\"6666\":1}}],[\"这种现象就被称为不可重复读\",{\"1\":{\"2988\":1,\"6660\":1}}],[\"这种现象就被称为脏读\",{\"1\":{\"2984\":1,\"6656\":1}}],[\"这种查询会加锁的语句称为锁定读\",{\"1\":{\"2938\":1,\"6610\":1}}],[\"这种不支持事务的引擎\",{\"1\":{\"2870\":1,\"6542\":1}}],[\"这种又长又难比较的数据\",{\"1\":{\"2802\":1,\"6474\":1}}],[\"这种情况就是缓存击穿\",{\"1\":{\"4148\":1}}],[\"这种情况就称为\",{\"1\":{\"2034\":1}}],[\"这种情况下\",{\"1\":{\"2093\":1}}],[\"这种方案并不能从根本上解决此问题\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"这种方案存在\",{\"1\":{\"1828\":1,\"6357\":1}}],[\"这种方法只适用于支持\",{\"1\":{\"2868\":1,\"6540\":1}}],[\"这种方式指的是在你的接口里\",{\"1\":{\"5009\":1}}],[\"这种方式会改写远程仓库的提交历史\",{\"1\":{\"3350\":1}}],[\"这种方式会将hashmap的get方法的性能从o\",{\"1\":{\"1065\":1}}],[\"这种方式可以解决请求的\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"这种方式的好处在于减少了\",{\"1\":{\"2293\":1}}],[\"这种方式需要依靠某种同步操作\",{\"1\":{\"1974\":1,\"6255\":1}}],[\"这种方式随着并发数上来\",{\"1\":{\"1772\":1}}],[\"这种方式\",{\"1\":{\"1769\":1}}],[\"这种算法近似最优置换算法\",{\"1\":{\"1734\":1}}],[\"这种分配方式明显的一个问题是随着消费者订阅的topic的数量的增加\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"这种分页方式能够真正减少返回的数据量\",{\"1\":{\"1106\":1}}],[\"这种模式让我们可以根据客户的需求能够动态切换不同的数据源\",{\"1\":{\"1213\":1,\"5565\":1}}],[\"这种时刻可能有很多\",{\"1\":{\"1166\":1}}],[\"这种数据结构\",{\"1\":{\"568\":1,\"639\":1}}],[\"这种获取方式只有在编译前已经声明了该类的类型才能获取到\",{\"1\":{\"518\":1,\"5406\":1}}],[\"这种动态获取的信息以及动态调用对象的法的功能称为java语言的反射机制\",{\"1\":{\"500\":1,\"5387\":1}}],[\"这种异常的特点是java编译器会检查它\",{\"1\":{\"466\":1,\"5361\":1}}],[\"这种异常又分为两类\",{\"1\":{\"457\":1,\"5352\":1}}],[\"这种划分方法带来了很大的灵活性\",{\"1\":{\"374\":1}}],[\"这种特性被开发人员利用得比较多的是\",{\"1\":{\"281\":1}}],[\"这种垃圾收集称为\",{\"1\":{\"230\":1}}],[\"这样也会造成吞吐量下降\",{\"1\":{\"6965\":1}}],[\"这样也会造成消息消费顺序错误\",{\"1\":{\"1507\":1,\"6962\":1}}],[\"这样会带来消息被重新消费的问题\",{\"1\":{\"7196\":1}}],[\"这样会影响缓存命中率\",{\"1\":{\"4669\":1,\"7188\":1}}],[\"这样会造成业务停滞\",{\"1\":{\"2864\":1,\"6536\":1}}],[\"这样会造成主索引频繁分裂\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"这样能够缩小比较范围\",{\"1\":{\"4117\":1}}],[\"这样客户端在多个服务器之间就可以通过这个jwt实现统一的认证和鉴权\",{\"1\":{\"4061\":1}}],[\"这样通过多个线程的堆栈日志\",{\"1\":{\"3622\":1}}],[\"这样通过控制读取文件数据的方式\",{\"1\":{\"2113\":1}}],[\"这样我们就可以得到cpu占比高的进程id\",{\"1\":{\"3519\":1}}],[\"这样才会消除冲突\",{\"1\":{\"3341\":1}}],[\"这样效率会很慢\",{\"1\":{\"2915\":1,\"6587\":1}}],[\"这样备份期间备份的数据一直是在开启事务时的数据\",{\"1\":{\"2867\":1,\"6539\":1}}],[\"这样在\",{\"1\":{\"2934\":1,\"6606\":1}}],[\"这样在备份数据库期间\",{\"1\":{\"2861\":1,\"6533\":1}}],[\"这样在代码中注入userdao接口\",{\"1\":{\"1098\":1}}],[\"这样查询可以利用索引的排序\",{\"1\":{\"2827\":1,\"6499\":1}}],[\"这样语义较为清晰的短值或短字符作为替代\",{\"1\":{\"2824\":1,\"6496\":1}}],[\"这样被动方重发的\",{\"1\":{\"2615\":1}}],[\"这样当\",{\"1\":{\"2588\":1}}],[\"这样一来\",{\"1\":{\"3236\":1,\"7090\":1}}],[\"这样一来一回\",{\"1\":{\"2553\":1}}],[\"这样一个连续并且尺寸固定的内存空间\",{\"1\":{\"1656\":1}}],[\"这样一个概念\",{\"1\":{\"606\":1}}],[\"这样内核才会将缓冲区里的数据返回给\",{\"1\":{\"2366\":1}}],[\"这样的处理方式让写的同学更加明确线程池的运行规则\",{\"1\":{\"3909\":1,\"6056\":1}}],[\"这样的开销往往无法承受\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"这样的批量插入数据的语句\",{\"1\":{\"2932\":1,\"6604\":1}}],[\"这样的购物体验还能愉快吗\",{\"1\":{\"2276\":1}}],[\"这样的话\",{\"1\":{\"448\":1,\"5341\":1}}],[\"这样每操作一次\",{\"1\":{\"2276\":1}}],[\"这样这个进程写入的东西\",{\"1\":{\"1960\":1}}],[\"这样网卡的\",{\"1\":{\"1804\":1,\"6310\":1}}],[\"这样不同的进程运行的时候\",{\"1\":{\"1630\":1}}],[\"这样不⽤通过指定类型来创建对象了\",{\"1\":{\"867\":1,\"5497\":1}}],[\"这样如果集群中某一台机器宕机\",{\"1\":{\"1526\":1}}],[\"这样\",{\"1\":{\"1499\":1,\"1679\":1,\"1788\":1,\"4678\":1,\"4945\":1,\"6260\":1,\"6292\":1}}],[\"这样c0总共就比c1\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"这样就产生了第\",{\"1\":{\"6381\":1}}],[\"这样就产生了单\",{\"1\":{\"1833\":1,\"6363\":1}}],[\"这样就完成了数据交互\",{\"1\":{\"3240\":1}}],[\"这样就导致大量过期\",{\"1\":{\"3176\":1,\"6834\":1}}],[\"这样就有效的防止幻读现象的发生\",{\"1\":{\"2953\":1,\"6625\":1}}],[\"这样就减少了一次数据拷贝\",{\"1\":{\"1804\":1,\"6310\":1}}],[\"这样就只有\",{\"1\":{\"1800\":1,\"6305\":1}}],[\"这样就大大降低了缓存命中率\",{\"1\":{\"1695\":1}}],[\"这样就可以减少一次系统调用\",{\"1\":{\"1799\":1,\"6304\":1}}],[\"这样就可以解决问题了\",{\"1\":{\"1655\":1}}],[\"这样就可以顺利解决循环依赖的问题\",{\"1\":{\"1268\":1}}],[\"这样就不用去遍历表里的记录\",{\"1\":{\"2916\":1,\"6588\":1}}],[\"这样就不会影响\",{\"1\":{\"1704\":1,\"1712\":1}}],[\"这样就不会冲突了\",{\"1\":{\"1630\":1}}],[\"这样就不受\",{\"1\":{\"283\":1}}],[\"这样就会出现数据不一致性问题了\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"这样就会出现消息并没有按照顺序执行\",{\"1\":{\"1505\":1,\"6960\":1}}],[\"这样就会比较慢\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"这样就会造成顺序的错误\",{\"1\":{\"1505\":1,\"6960\":1}}],[\"这样就巧妙地避免了循环依赖的问题\",{\"1\":{\"1266\":1}}],[\"这样事务之间就完全不可能产生干扰\",{\"1\":{\"1235\":1,\"5587\":1}}],[\"这样里两个数做按位与运算之后\",{\"1\":{\"1044\":1}}],[\"这样设计是合理的\",{\"1\":{\"943\":1}}],[\"这样对\",{\"1\":{\"3173\":1,\"6831\":1}}],[\"这样对后续的关于\",{\"1\":{\"1286\":1,\"5628\":1}}],[\"这样对于效率影响不大\",{\"1\":{\"925\":1,\"5442\":1}}],[\"这样对内存更加友好\",{\"1\":{\"421\":1,\"5312\":1}}],[\"这样可以减少调整大小的开销\",{\"1\":{\"783\":1}}],[\"这样做的好处是\",{\"1\":{\"1103\":1}}],[\"这样做的目的是避免在\",{\"1\":{\"237\":1}}],[\"这样做\",{\"1\":{\"606\":1}}],[\"这样必然会导致经常中断或恢复\",{\"1\":{\"194\":1}}],[\"这是错的\",{\"1\":{\"6271\":1}}],[\"这是和三个一样的\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"这是不想要我刷kpi呢\",{\"1\":{\"4356\":1}}],[\"这是不可预估的\",{\"1\":{\"1922\":1}}],[\"这是一个统一的认证系统\",{\"1\":{\"4045\":1}}],[\"这是一棵单结点的树\",{\"1\":{\"650\":1}}],[\"这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放\",{\"1\":{\"3738\":1,\"5970\":1}}],[\"这是面试高频考点\",{\"1\":{\"3683\":1,\"5852\":1}}],[\"这是比较少见的一种情况\",{\"1\":{\"3624\":1}}],[\"这是由哨兵向主库发送\",{\"1\":{\"3201\":1}}],[\"这是通过\",{\"1\":{\"4956\":1}}],[\"这是通过对主键字段声明\",{\"1\":{\"2919\":1,\"6591\":1}}],[\"这是通过设置年轻一代对象的年龄阈值来实现的\",{\"1\":{\"234\":1}}],[\"这是springboot实现自动配置的关键所在\",{\"1\":{\"4233\":1}}],[\"这是springboot程序的监控系统\",{\"1\":{\"1345\":1,\"5670\":1}}],[\"这是spring容器很关键的一个设计\",{\"1\":{\"1268\":1}}],[\"这是开发人员最需要的功能\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"这是非常巧妙的设计\",{\"1\":{\"1114\":1}}],[\"这是⾮常麻烦的\",{\"1\":{\"887\":1,\"5505\":1}}],[\"这是因为数值类型是直接储存在计算机内存中的\",{\"1\":{\"4115\":1}}],[\"这是因为从库在通过\",{\"1\":{\"3235\":1}}],[\"这是因为申请\",{\"1\":{\"2903\":1,\"6575\":1}}],[\"这是因为\",{\"1\":{\"632\":1,\"3662\":1,\"5825\":1}}],[\"这是\",{\"1\":{\"596\":1,\"1514\":1}}],[\"这是项目主页的案例\",{\"1\":{\"150\":1,\"154\":1,\"5263\":1}}],[\"这是脚注内容\",{\"1\":{\"113\":1,\"5226\":1}}],[\"内进行一些操作\",{\"1\":{\"3322\":1}}],[\"内置了多种优化过后的数据结构实现\",{\"1\":{\"3092\":1,\"6748\":1}}],[\"内到达\",{\"1\":{\"2615\":1}}],[\"内丢失\",{\"1\":{\"2615\":1}}],[\"内核源码的都知道\",{\"1\":{\"6271\":1}}],[\"内核提供给用户态的多路复用系统调用\",{\"1\":{\"6261\":1}}],[\"内核层解决分布式系统⼀致性\",{\"1\":{\"4552\":1}}],[\"内核层和插件\",{\"1\":{\"4552\":1}}],[\"内核支持各种网络协议\",{\"1\":{\"3458\":1}}],[\"内核具有模块化的设计\",{\"1\":{\"3443\":1}}],[\"内核中的每一个函数都可以访问到内核中所有其他部分\",{\"1\":{\"3435\":1}}],[\"内核的所有代码\",{\"1\":{\"3435\":1}}],[\"内核实现策略\",{\"1\":{\"3433\":1}}],[\"内核就像一个库\",{\"1\":{\"3432\":1}}],[\"内核就会把这个消息体删除\",{\"1\":{\"1957\":1}}],[\"内核是操作系统的核心部分\",{\"1\":{\"3443\":1}}],[\"内核是一个资源管理程序\",{\"1\":{\"3431\":1}}],[\"内核是应用程序知道的层次中的最底层\",{\"1\":{\"3430\":1}}],[\"内核是硬件与软件之间的一个中间层\",{\"1\":{\"3429\":1}}],[\"内核通常为\",{\"1\":{\"3167\":1,\"6823\":1}}],[\"内核会发送第一次挥手\",{\"1\":{\"2637\":1}}],[\"内核会维护两个队列\",{\"1\":{\"2579\":1}}],[\"内核\",{\"0\":{\"3427\":1,\"5737\":1},\"1\":{\"1802\":1,\"3290\":1,\"3442\":1,\"6079\":1,\"6308\":1}}],[\"内核版本\",{\"1\":{\"1796\":1,\"6301\":1}}],[\"内核里维护了一个链表来记录就绪事件\",{\"1\":{\"1776\":1,\"6266\":1}}],[\"内核里没有类似\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"内可能有几十万的请求积压在\",{\"1\":{\"1427\":1}}],[\"内直接书写带有物理分页的参数来完成物理分页功能\",{\"1\":{\"1123\":1,\"5705\":1}}],[\"内部采用如下图所示的复制状态机模型\",{\"1\":{\"4584\":1}}],[\"内部采用的是\",{\"1\":{\"3880\":1,\"6035\":1}}],[\"内部做了非常多的性能优化\",{\"1\":{\"3089\":1,\"6745\":1}}],[\"内部内存碎片和外部内存碎片\",{\"1\":{\"1649\":1}}],[\"内部使用数组链表和哈希的方式进行实现\",{\"1\":{\"954\":1}}],[\"内部使用循环数组实现\",{\"1\":{\"761\":1}}],[\"内部的一系列工作\",{\"1\":{\"3301\":1,\"6087\":1}}],[\"内部的元素可以直接通过get与set方法进行访问\",{\"1\":{\"777\":1}}],[\"内部的核心类库\",{\"1\":{\"425\":1,\"5316\":1}}],[\"内部元素不是完全有序的\",{\"1\":{\"770\":1}}],[\"内部是用堆实现的\",{\"1\":{\"768\":1}}],[\"内部实现利用了hashmap\",{\"1\":{\"714\":1}}],[\"内存调优经验\",{\"1\":{\"4403\":1}}],[\"内存利用率高\",{\"1\":{\"4220\":1}}],[\"内存存储\",{\"1\":{\"4086\":1}}],[\"内存地址v\",{\"1\":{\"3668\":1,\"5831\":1}}],[\"内存过小\",{\"1\":{\"3587\":1}}],[\"内存溢出是某个时间点发生的事情\",{\"1\":{\"3568\":1}}],[\"内存溢出\",{\"1\":{\"3544\":1}}],[\"内存buffer进行数据交互\",{\"1\":{\"3240\":1}}],[\"内存淘汰机制了解么\",{\"0\":{\"3178\":1,\"6836\":1}}],[\"内存淘汰机制\",{\"1\":{\"3177\":1,\"6835\":1}}],[\"内存的访问速度是磁盘的上千倍\",{\"1\":{\"3090\":1,\"6746\":1}}],[\"内存资源会紧张\",{\"1\":{\"4885\":1,\"7263\":1}}],[\"内存资源\",{\"1\":{\"2623\":1}}],[\"内存页面置换算法\",{\"0\":{\"1717\":1}}],[\"内存主要采用的是页式内存管理\",{\"1\":{\"1686\":1}}],[\"内存布局\",{\"0\":{\"1685\":1}}],[\"内存分配大小及使用情况\",{\"1\":{\"3603\":1}}],[\"内存分析可能需要比对多个堆转储文件\",{\"1\":{\"3572\":1}}],[\"内存分页由于内存空间都是预先划分好的\",{\"1\":{\"1658\":1}}],[\"内存分页\",{\"0\":{\"1653\":1}}],[\"内存分段管理可以做到段根据实际需求分配内存\",{\"1\":{\"1650\":1}}],[\"内存分段\",{\"0\":{\"1639\":1}}],[\"内存碎片主要分为\",{\"1\":{\"1649\":1}}],[\"内存管理\",{\"0\":{\"1618\":1},\"1\":{\"3443\":1}}],[\"内存模型的堆中\",{\"1\":{\"252\":1}}],[\"内存空间中\",{\"1\":{\"231\":1}}],[\"内存\",{\"1\":{\"226\":1,\"586\":2,\"1134\":1,\"1136\":1,\"2139\":1,\"5713\":1,\"5715\":1}}],[\"内存结构\",{\"0\":{\"182\":1,\"5291\":1}}],[\"内容的那一行\",{\"1\":{\"3424\":1}}],[\"内容可能会被窃听\",{\"1\":{\"2285\":1}}],[\"内容推荐\",{\"1\":{\"2163\":1}}],[\"内容\",{\"1\":{\"37\":1,\"5150\":1}}],[\"来做为缓存判断的标准\",{\"1\":{\"7063\":1}}],[\"来限制结果集的大小和偏移量\",{\"1\":{\"4959\":1}}],[\"来进行排序\",{\"1\":{\"6184\":1}}],[\"来进行网络通信的\",{\"1\":{\"4598\":1,\"6182\":1}}],[\"来进行传输的\",{\"1\":{\"1806\":1,\"6313\":1}}],[\"来验证它是否能够处理请求\",{\"1\":{\"4556\":1}}],[\"来头很大\",{\"1\":{\"4493\":1,\"6126\":1}}],[\"来回回学校不麻烦吗\",{\"1\":{\"4417\":1}}],[\"来个数据库的场景题\",{\"1\":{\"4384\":1}}],[\"来个场景题\",{\"1\":{\"4383\":1,\"4392\":1}}],[\"来能知晓每一个连接的主机是存在还是下线\",{\"0\":{\"4216\":1}}],[\"来创建\",{\"0\":{\"3899\":1},\"1\":{\"6046\":1}}],[\"来创建公平锁\",{\"1\":{\"3845\":1,\"5962\":1}}],[\"来处理\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"来分析\",{\"1\":{\"3574\":1}}],[\"来撤销工作目录中所有未提交的修改\",{\"1\":{\"3352\":1}}],[\"来完成系统自动化功能\",{\"1\":{\"4666\":1,\"7185\":1}}],[\"来完成\",{\"1\":{\"3304\":1,\"6090\":1}}],[\"来决定这个从库可以进行增量复制\",{\"1\":{\"3244\":1}}],[\"来生成聚簇索引\",{\"1\":{\"3030\":1,\"6696\":1}}],[\"来判断数据的可见性\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"来判断重复元素的\",{\"1\":{\"739\":1}}],[\"来保证原子性\",{\"1\":{\"3695\":1,\"5864\":1}}],[\"来保证的\",{\"1\":{\"2976\":1,\"2977\":1,\"6648\":1,\"6649\":1}}],[\"来保证服务器的身份是可信的\",{\"1\":{\"2309\":1}}],[\"来区分\",{\"1\":{\"2362\":1}}],[\"来计算出该资源是否过期\",{\"1\":{\"2235\":1}}],[\"来访问\",{\"1\":{\"2201\":1}}],[\"来破环环路等待条件\",{\"1\":{\"1997\":1}}],[\"来看头条\",{\"0\":{\"4652\":1,\"7171\":1},\"1\":{\"4655\":1,\"7174\":1}}],[\"来看看\",{\"1\":{\"1939\":1}}],[\"来看下java是如何做的\",{\"1\":{\"1033\":1}}],[\"来看下以下代码\",{\"1\":{\"974\":1}}],[\"来搬运\",{\"1\":{\"1807\":1,\"6314\":1}}],[\"来搬运数据\",{\"1\":{\"1791\":1,\"1806\":1,\"6296\":1,\"6313\":1}}],[\"来代替\",{\"1\":{\"1793\":1,\"6298\":1}}],[\"来代替取模运算\",{\"1\":{\"1017\":1}}],[\"来存储所关注的文件描述符\",{\"1\":{\"1771\":1}}],[\"来转换变成物理地址\",{\"1\":{\"1634\":1}}],[\"来渲染视图\",{\"1\":{\"1206\":1,\"5558\":1}}],[\"来调用真正的处理器来处理请求\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"来得到该对象在数据中保存的位置\",{\"1\":{\"1069\":1}}],[\"来初始化容量和装载因子\",{\"1\":{\"998\":1}}],[\"来自定义处理逻辑\",{\"1\":{\"902\":1,\"5520\":1}}],[\"来自定义类加载器\",{\"1\":{\"444\":1,\"5337\":1}}],[\"来说\",{\"1\":{\"897\":1,\"5515\":1}}],[\"来控制集合中的对象\",{\"1\":{\"833\":1}}],[\"来满足上层的业务需求\",{\"1\":{\"609\":1}}],[\"来实现独享或者共享\",{\"1\":{\"5949\":1}}],[\"来实现锁的分配\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"来实现对管道的读写操作\",{\"1\":{\"3468\":1}}],[\"来实现进程间的同步和通信\",{\"1\":{\"3465\":1}}],[\"来实现具体对容器进行的操作\",{\"1\":{\"3305\":1,\"6091\":1}}],[\"来实现的\",{\"1\":{\"3017\":1,\"3290\":1,\"6079\":1,\"6689\":1}}],[\"来实现取模运算\",{\"1\":{\"1018\":1}}],[\"来实现\",{\"1\":{\"568\":1,\"1011\":1}}],[\"来实现虚引用\",{\"1\":{\"321\":1}}],[\"来实现整个程序的功能\",{\"1\":{\"181\":1,\"5290\":1}}],[\"来设定\",{\"1\":{\"242\":1}}],[\"来解析\",{\"1\":{\"37\":1,\"5150\":1}}],[\"而多线程间可以共享数据\",{\"1\":{\"6378\":1}}],[\"而多线程使用多个线程\",{\"1\":{\"342\":1}}],[\"而边缘触发的意思是只有第一次满足条件的时候才触发\",{\"1\":{\"6277\":1}}],[\"而如果我们使用了md5对密码加密\",{\"1\":{\"5047\":1}}],[\"而如果是因为代码中有比较耗\",{\"1\":{\"3545\":1}}],[\"而kafka更适合大吞吐量的场景\",{\"1\":{\"4864\":1}}],[\"而kafka需要集群环境\",{\"1\":{\"4863\":1}}],[\"而mybatis\",{\"1\":{\"4742\":1,\"4744\":1}}],[\"而三个比四个还少一个\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"而假设我们现在有四个\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"而低32位可以简单理解为递增的事务id\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"而raft正是为了探索一种更易于理解的一致性算法而产生的\",{\"1\":{\"4581\":1}}],[\"而rebalance之后\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"而他们用java比较多\",{\"1\":{\"4356\":1}}],[\"而缓存雪崩是大量热点key失效\",{\"1\":{\"4149\":1}}],[\"而使用字符类型则需要进行字母表排序\",{\"1\":{\"4116\":1}}],[\"而使用一致性哈希算法就可以很好的解决这个问题\",{\"1\":{\"2030\":1}}],[\"而字符类型则需要进行转换\",{\"1\":{\"4116\":1}}],[\"而字符类型需要转换为二进制码储存\",{\"1\":{\"4115\":1}}],[\"而字节码文件只是\",{\"1\":{\"181\":1,\"5290\":1}}],[\"而aspectj通过修改字节码支持类和方法级别的切入\",{\"1\":{\"4025\":1}}],[\"而aop是动态地通过代理方式实现运行期间的代码增强\",{\"1\":{\"4024\":1}}],[\"而arraylist和vector中同名方法的方法体内容并无太大差异\",{\"1\":{\"839\":1}}],[\"而arraylist每次对size增长50\",{\"1\":{\"781\":1}}],[\"而动态代理是在运行时动态生成代理类\",{\"1\":{\"3950\":1}}],[\"而读写\",{\"1\":{\"3836\":1}}],[\"而偏向锁只需要在置换\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"而另一个是\",{\"1\":{\"3778\":1,\"5789\":1}}],[\"而threadlocalmap\",{\"1\":{\"3773\":1}}],[\"而threadlocalmap可以存储以threadlocal为\",{\"1\":{\"3767\":1,\"5998\":1}}],[\"而treemap是基于红黑树实现的\",{\"1\":{\"738\":1}}],[\"而treemap基于大致平衡的排序二叉树\",{\"1\":{\"720\":1}}],[\"而共享锁不一样\",{\"1\":{\"3638\":1,\"5879\":1}}],[\"而每次\",{\"1\":{\"3544\":1}}],[\"而允许任意进程通过共享消息队列来实现进程间通信\",{\"1\":{\"3473\":1}}],[\"而它的局限性也在于此\",{\"1\":{\"3471\":1}}],[\"而它的目标是达到一个可控制的吞吐量\",{\"1\":{\"355\":1}}],[\"而接收消息的进程可以在需要消息的时候到指定的消息队列上获取消息\",{\"1\":{\"3469\":1}}],[\"而接下来像是递归操作一样\",{\"1\":{\"1279\":1,\"5621\":1}}],[\"而我们又不想每次执行git\",{\"0\":{\"3378\":1}}],[\"而我的完整创建也依赖于你\",{\"1\":{\"1253\":1,\"5605\":1}}],[\"而docker不像虚拟机那样利用hypervisor和guest\",{\"1\":{\"3312\":1}}],[\"而虚拟机传统方式则是在硬件层面实现\",{\"1\":{\"3310\":1}}],[\"而配置提供者和通知功能\",{\"1\":{\"3199\":1}}],[\"而在模板之外可以专注于要展示什么数据\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"而在这种情况下多出来的一个线程就可以充分利用\",{\"1\":{\"3897\":1,\"6044\":1}}],[\"而在repl\",{\"1\":{\"3239\":1}}],[\"而在rr隔离级别下\",{\"1\":{\"3058\":1}}],[\"而在rc级别下的\",{\"1\":{\"3057\":1}}],[\"而在hashtable中不可以\",{\"1\":{\"958\":1}}],[\"而早于read\",{\"1\":{\"3056\":1}}],[\"而事务4提交的版本也是全局角度上最新的版本\",{\"1\":{\"3053\":1}}],[\"而非一个路由器只维护一个\",{\"1\":{\"7045\":1}}],[\"而非广播\",{\"1\":{\"7041\":1}}],[\"而非当前读\",{\"1\":{\"3025\":1}}],[\"而非物理分页\",{\"1\":{\"1122\":1,\"5704\":1}}],[\"而有可能是之前的历史版本\",{\"1\":{\"3024\":1}}],[\"而此时\",{\"1\":{\"4625\":1,\"6203\":1}}],[\"而此时正好事务\",{\"1\":{\"2983\":1,\"6655\":1}}],[\"而此处我们把这个圆想象成由2^32个点组成的圆\",{\"1\":{\"2021\":1}}],[\"而普通的\",{\"1\":{\"2910\":1,\"6582\":1}}],[\"而导致后续的申请读锁的查询操作也会被阻塞\",{\"1\":{\"2902\":1,\"6574\":1}}],[\"而导致连接冲突的问题\",{\"1\":{\"2712\":1}}],[\"而出现备份文件的数据与预期的不一样\",{\"1\":{\"2861\":1,\"6533\":1}}],[\"而覆盖索引就是把要查询出的列和索引是对应的\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"而其余的索引都作为\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"而当年可能并非如此\",{\"1\":{\"2515\":1}}],[\"而当内存空间不够的时候\",{\"1\":{\"1694\":1}}],[\"而到了\",{\"1\":{\"2267\":1}}],[\"而栈溢出可以看到stackoverflowerror错误\",{\"1\":{\"2119\":1}}],[\"而一个\",{\"1\":{\"3489\":1}}],[\"而一个bin中链表长度达到8个元素的概率为0\",{\"1\":{\"929\":1,\"5446\":1}}],[\"而一致性哈希算法是对\",{\"1\":{\"2015\":1}}],[\"而资源\",{\"1\":{\"1993\":1}}],[\"而信号量比锁的功能更强一些\",{\"1\":{\"1989\":1,\"6248\":1}}],[\"而造成的数据错乱\",{\"1\":{\"1962\":1}}],[\"而前面提到的匿名管道的生命周期\",{\"1\":{\"1958\":1}}],[\"而进程则是资源拥有的基本单位\",{\"1\":{\"1910\":1}}],[\"而页表的切换过程开销是比较大的\",{\"1\":{\"1907\":1}}],[\"而页表中的地址则为某页的物理页号\",{\"1\":{\"1680\":1}}],[\"而线程在处理\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"而线程在创建的过程中\",{\"1\":{\"1905\":1}}],[\"而线程只独享必不可少的资源\",{\"1\":{\"1901\":1}}],[\"而返回时直接快速移动至最靠边缘的磁道\",{\"1\":{\"1761\":1}}],[\"而末尾淘汰的页\",{\"1\":{\"1695\":1}}],[\"而采用了分页\",{\"1\":{\"1658\":1}}],[\"而第二个目标才真正体现出stickyassignor特性的\",{\"1\":{\"1488\":1,\"6940\":1}}],[\"而无需手动编写复杂的分页\",{\"1\":{\"4954\":1}}],[\"而无需回表查询\",{\"1\":{\"2814\":1,\"6486\":1}}],[\"而无需改动服务\",{\"1\":{\"1414\":1}}],[\"而无需重新启动服务器\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"而spring\",{\"1\":{\"1348\":1,\"5673\":1}}],[\"而size表示这个桶已经装了多少元素\",{\"1\":{\"974\":1}}],[\"而将属性填充推迟到后面\",{\"1\":{\"1268\":1}}],[\"而逻辑分页方式是通过在sql中添加条件来实现的\",{\"1\":{\"1113\":1}}],[\"而不管底层操作系统如何\",{\"1\":{\"3314\":1}}],[\"而不会出现用户\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"而不会导致接收端处理不过来\",{\"1\":{\"2653\":1}}],[\"而不需要等待整个插入语句执行完后才释放锁\",{\"1\":{\"2926\":1,\"6598\":1}}],[\"而不需要移动到磁盘的最始端或最末端\",{\"1\":{\"1763\":1,\"1764\":1}}],[\"而不能更新数据\",{\"1\":{\"2864\":1,\"6536\":1}}],[\"而不适用于\",{\"1\":{\"1915\":1}}],[\"而不用关心彼此的实现细节\",{\"1\":{\"1410\":1}}],[\"而不用改变他的底层数据结构\",{\"1\":{\"844\":1}}],[\"而不是物理删除\",{\"1\":{\"4952\":1}}],[\"而不是直接将用户输入嵌入到sql查询中\",{\"1\":{\"4090\":1}}],[\"而不是忙等\",{\"1\":{\"3807\":1,\"5818\":1}}],[\"而不是用\",{\"1\":{\"3572\":1}}],[\"而不是用于缓存进程间通信的数据\",{\"1\":{\"1963\":1}}],[\"而不是只列第一个\",{\"1\":{\"3417\":1}}],[\"而不是为了查询效率\",{\"1\":{\"2791\":1,\"6462\":1}}],[\"而不是\",{\"1\":{\"2544\":1}}],[\"而不是一个具体的技术实现\",{\"1\":{\"1158\":1,\"4139\":1,\"5539\":1}}],[\"而不是四次\",{\"1\":{\"1067\":1}}],[\"而不包含任何实现逻辑\",{\"1\":{\"1092\":1}}],[\"而int的取值范围是\",{\"1\":{\"1044\":1}}],[\"而被移掉的部分\",{\"1\":{\"1024\":1}}],[\"而链表的特点是\",{\"1\":{\"1004\":1}}],[\"而capacity又是2的幂\",{\"1\":{\"990\":1}}],[\"而hashtable采用的是直接取模\",{\"1\":{\"1048\":1}}],[\"而hashtable中也没有indexof方法\",{\"1\":{\"1048\":1}}],[\"而hashmap中的length也确实是2的倍数\",{\"1\":{\"1029\":1}}],[\"而hashmap并没有\",{\"1\":{\"949\":1}}],[\"而hash\",{\"1\":{\"1008\":1}}],[\"而hash冲突发生的概率较小\",{\"1\":{\"923\":1,\"5440\":1}}],[\"而由于历史原因\",{\"1\":{\"941\":1,\"944\":1}}],[\"而选择8作为临界值\",{\"1\":{\"930\":1,\"5447\":1}}],[\"而jdk1\",{\"1\":{\"919\":1,\"5436\":1}}],[\"而这些功能gateway天然支持\",{\"1\":{\"4658\":1,\"7177\":1}}],[\"而这些模板方法会调用使用者重写的方法\",{\"1\":{\"3652\":1,\"5895\":1}}],[\"而这样会出现频繁地对线程运行状态的切换\",{\"1\":{\"3808\":1,\"5819\":1}}],[\"而这往往是向\",{\"1\":{\"1577\":1}}],[\"而这个表就叫做彩虹表\",{\"1\":{\"5055\":1}}],[\"而这个读指的就是快照读\",{\"1\":{\"3025\":1}}],[\"而这个通过键值求取下标的操作就叫做哈希\",{\"1\":{\"1031\":1}}],[\"而这个过程中需要调用其他语言的本地库接口\",{\"1\":{\"181\":1,\"5290\":1}}],[\"而这一点是vector无法做到的\",{\"1\":{\"844\":1}}],[\"而vector没有\",{\"0\":{\"784\":1}}],[\"而按照索引位置访问相对比较少\",{\"1\":{\"759\":1}}],[\"而对于进程之间的切换\",{\"1\":{\"1907\":1}}],[\"而对于\",{\"1\":{\"1165\":1}}],[\"而对于没有实现接口的对象\",{\"1\":{\"1157\":1,\"5538\":1}}],[\"而对内存的操作\",{\"1\":{\"632\":1}}],[\"而对具体的实现方式不做限制\",{\"1\":{\"602\":1}}],[\"而组合关系描述的是\",{\"1\":{\"584\":1}}],[\"而应该是组合关系\",{\"1\":{\"579\":1}}],[\"而且没有任何已知的转发地址\",{\"1\":{\"7062\":1}}],[\"而且只在主线程中运行\",{\"1\":{\"6379\":1}}],[\"而且只能在具有亲缘关系的进程间使用\",{\"1\":{\"3460\":1}}],[\"而且我们不知道到底能读写多少数据\",{\"1\":{\"6279\":1}}],[\"而且挂的没超过半数的时候\",{\"1\":{\"6197\":1}}],[\"而且大部分的系统都是\",{\"1\":{\"5946\":1}}],[\"而且大部分的系统都是读多写少\",{\"1\":{\"3830\":1}}],[\"而且消息积压概率比较小的情况下\",{\"1\":{\"4887\":1,\"7265\":1}}],[\"而且在对传输速率要求不高的情况下\",{\"1\":{\"6992\":1}}],[\"而且在\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"而且在浏览器中\",{\"1\":{\"2223\":1}}],[\"而且是不定时出现\",{\"1\":{\"3621\":1}}],[\"而且是串行请求\",{\"1\":{\"2292\":1}}],[\"而且提供给任意关系的进程使用\",{\"1\":{\"3468\":1}}],[\"而且支持\",{\"1\":{\"3140\":1,\"6796\":1}}],[\"而且能保存图片\",{\"1\":{\"3101\":1,\"6757\":1}}],[\"而且事务在执行过程中发生错误\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"而且记录锁是有\",{\"1\":{\"2948\":1,\"6620\":1}}],[\"而且意向锁之间也不会发生冲突\",{\"1\":{\"2913\":1,\"6585\":1}}],[\"而且由于\",{\"1\":{\"2866\":1,\"6538\":1}}],[\"而且聚簇索引的叶子节点还存放着数据\",{\"1\":{\"2803\":1,\"6475\":1}}],[\"而且最大的缺陷就是崩溃后无法安全恢复\",{\"1\":{\"2729\":1,\"6398\":1}}],[\"而且重传的\",{\"1\":{\"2571\":1,\"2573\":1}}],[\"而且这个文件几乎是在发生内存溢出的同时生成的\",{\"1\":{\"3570\":1}}],[\"而且这个\",{\"1\":{\"2540\":1}}],[\"而且这样做\",{\"1\":{\"610\":1}}],[\"而且浏览器基本都没有支持\",{\"1\":{\"2301\":1}}],[\"而且下次访问某张图片时\",{\"1\":{\"2010\":1}}],[\"而且仍然需要\",{\"1\":{\"1794\":1,\"6299\":1}}],[\"而且也需要在用户态与内核态之间拷贝文件描述符集合\",{\"1\":{\"1772\":1}}],[\"而且也可能会出现\",{\"1\":{\"1273\":1,\"5615\":1}}],[\"而且所支持的文件描述符的个数是有限制的\",{\"1\":{\"1770\":1}}],[\"而且还会发生\",{\"1\":{\"1769\":1}}],[\"而且随着topic的增加\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"而且\",{\"1\":{\"1433\":1,\"1807\":1,\"4761\":1,\"6314\":1}}],[\"而且不同的客户在每次访问中根据需要会去访问不同的数据库\",{\"1\":{\"1213\":1,\"5565\":1}}],[\"而且一定是2的指数\",{\"1\":{\"939\":1}}],[\"而且一旦发生这种异常状况\",{\"1\":{\"465\":1,\"5360\":1}}],[\"而且停顿用户线程将大幅度提高收集效率\",{\"1\":{\"379\":1}}],[\"而是非常明显地加快了反向查询的速度\",{\"1\":{\"5036\":1}}],[\"而是一个特殊值\",{\"1\":{\"7038\":1}}],[\"而是一个java类库\",{\"1\":{\"4840\":1,\"7229\":1}}],[\"而是一个相对平稳的状态\",{\"1\":{\"1422\":1}}],[\"而是专门定制了一致性协议叫做\",{\"1\":{\"4629\":1,\"6172\":1}}],[\"而是只需要合法数量\",{\"1\":{\"4609\":1}}],[\"而是只需要一个配置spring\",{\"1\":{\"1348\":1,\"5673\":1}}],[\"而是通过\",{\"1\":{\"3909\":1,\"6056\":1}}],[\"而是会按照延迟的时间长短对任务进行排序\",{\"1\":{\"3880\":1,\"6035\":1}}],[\"而是会等待\",{\"1\":{\"3863\":1,\"6017\":1}}],[\"而是将任务回退给调用者\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"而是同时以插队方式直接尝试获取锁\",{\"1\":{\"3842\":1,\"5958\":1}}],[\"而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的\",{\"1\":{\"3827\":1}}],[\"而是检测\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"而是再执行完插入语句后就会立即释放\",{\"1\":{\"2921\":1,\"6593\":1}}],[\"而是在\",{\"1\":{\"2365\":1}}],[\"而是其中的一部分\",{\"1\":{\"2198\":1}}],[\"而是共享它们\",{\"1\":{\"1905\":1}}],[\"而是当发生缺页中断时\",{\"1\":{\"1744\":1}}],[\"而是执行开始调用c\",{\"1\":{\"1373\":1}}],[\"而是继续执行下面的流程\",{\"1\":{\"1373\":1}}],[\"而是自己再做一层封装\",{\"1\":{\"624\":1}}],[\"而是业界公认的\",{\"1\":{\"593\":1}}],[\"而是来自\",{\"1\":{\"566\":1}}],[\"而是把这个请求委派给父类加载器去完成\",{\"1\":{\"448\":1,\"5341\":1}}],[\"而是根据需要去动态加载\",{\"1\":{\"421\":1,\"5312\":1}}],[\"而是分为一块较大的\",{\"1\":{\"333\":1}}],[\"而老年代虽然有很大的剩余空间\",{\"1\":{\"406\":1}}],[\"而老年代也放不下造成\",{\"1\":{\"404\":1}}],[\"而\",{\"1\":{\"373\":1,\"575\":1,\"609\":1,\"782\":1,\"914\":1,\"1282\":1,\"1734\":1,\"1775\":2,\"1816\":1,\"2307\":1,\"2512\":1,\"2513\":1,\"2514\":1,\"2733\":1,\"2739\":1,\"2743\":1,\"2746\":1,\"2762\":1,\"2764\":1,\"2937\":1,\"3017\":1,\"3102\":1,\"3361\":1,\"3779\":1,\"3781\":1,\"3845\":1,\"4623\":1,\"5532\":1,\"5624\":1,\"5790\":1,\"5792\":1,\"5952\":1,\"5961\":1,\"6200\":1,\"6265\":2,\"6343\":1,\"6402\":1,\"6408\":1,\"6412\":1,\"6415\":1,\"6431\":1,\"6433\":1,\"6609\":1,\"6689\":1,\"6758\":1,\"7026\":1,\"7034\":1,\"7064\":1,\"7067\":1,\"7069\":1}}],[\"而元空间存在于本地内存\",{\"1\":{\"283\":1}}],[\"而永久代\",{\"1\":{\"282\":1}}],[\"而本地方法栈用于管理本地方法的调用\",{\"1\":{\"219\":1}}],[\"再下面是\",{\"1\":{\"7084\":1}}],[\"再构造链路层帧\",{\"1\":{\"7050\":1}}],[\"再由内核返回产生了事件的连接\",{\"1\":{\"6262\":1}}],[\"再者服务器的数据库中也是密文存储密码\",{\"1\":{\"5047\":1}}],[\"再者服务器的数据库中也是明文存储密码\",{\"1\":{\"5041\":1}}],[\"再把数据放到\",{\"1\":{\"4106\":1}}],[\"再把字节码加载到内存中\",{\"1\":{\"181\":1,\"5290\":1}}],[\"再进入内层方法会自动获取锁\",{\"1\":{\"3818\":1,\"5936\":1}}],[\"再进行分发与处理\",{\"1\":{\"1410\":1}}],[\"再查看其堆栈信息即可\",{\"1\":{\"3626\":1}}],[\"再查半成品缓存\",{\"1\":{\"1283\":1,\"5625\":1}}],[\"再对导出的文件进行对比\",{\"1\":{\"3625\":1}}],[\"再键入大写\",{\"1\":{\"3550\":1}}],[\"再找到占用\",{\"1\":{\"3548\":1,\"3552\":1}}],[\"再git\",{\"1\":{\"3369\":1}}],[\"再发送给从库\",{\"1\":{\"3236\":1}}],[\"再来说说元数据锁\",{\"1\":{\"2888\":1,\"6560\":1}}],[\"再来理解一致性哈希算法\",{\"1\":{\"2005\":1}}],[\"再如普通索引\",{\"1\":{\"2815\":1,\"6487\":1}}],[\"再走一遍主索引\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"再出现的数据包一定都是新建立连接所产生的\",{\"1\":{\"2618\":1}}],[\"再加上\",{\"1\":{\"2507\":1}}],[\"再加载新的对象放到伊甸园区\",{\"1\":{\"263\":1}}],[\"再将\",{\"1\":{\"2396\":1,\"7100\":1}}],[\"再插入新的\",{\"1\":{\"2064\":1,\"5769\":1}}],[\"再反馈ack嘛\",{\"1\":{\"2055\":1,\"5760\":1}}],[\"再选择优先级高的进程\",{\"1\":{\"1932\":1}}],[\"再传出到用户空间中\",{\"1\":{\"1769\":1}}],[\"再划分固定大小的页\",{\"1\":{\"1678\":1}}],[\"再访问一次后还会被继续访问到\",{\"1\":{\"1626\":1}}],[\"再均衡后不可避免会出现一些问题\",{\"1\":{\"1594\":1}}],[\"再通过调用\",{\"1\":{\"1517\":1}}],[\"再通过set方法设置属性的setter注入方式\",{\"1\":{\"1268\":1}}],[\"再重启\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"再去根目录下找配置文件\",{\"1\":{\"1313\":1,\"5643\":1}}],[\"再从链表中找出正确的元素\",{\"1\":{\"1005\":1}}],[\"再说一个小问题\",{\"1\":{\"627\":1}}],[\"再次强调\",{\"1\":{\"7034\":1}}],[\"再次进入网关开始访问\",{\"1\":{\"4812\":1,\"7209\":1}}],[\"再次提交更新\",{\"1\":{\"3674\":1,\"5842\":1}}],[\"再次对\",{\"1\":{\"3625\":1}}],[\"再次启动容器\",{\"1\":{\"3307\":1}}],[\"再次查询账户余额大于\",{\"1\":{\"2994\":1,\"6666\":1}}],[\"再次读取该数据时\",{\"1\":{\"2988\":1,\"6660\":1}}],[\"再次访问\",{\"1\":{\"2200\":1}}],[\"再次印证了\",{\"1\":{\"481\":1}}],[\"再次触发\",{\"1\":{\"268\":1}}],[\"再交由\",{\"1\":{\"181\":1,\"5290\":1}}],[\"jing\",{\"0\":{\"7294\":1}}],[\"jianshu\",{\"1\":{\"5103\":1}}],[\"jit编译后的代码等数据\",{\"1\":{\"282\":1}}],[\"jit\",{\"1\":{\"277\":1}}],[\"jmeter测试\",{\"1\":{\"5022\":1}}],[\"jmap\",{\"1\":{\"3565\":2,\"3566\":2,\"3568\":2,\"3572\":1,\"3594\":1,\"3596\":2,\"3597\":1,\"3602\":1,\"3604\":2}}],[\"juejin\",{\"1\":{\"4590\":1}}],[\"juc\",{\"1\":{\"3826\":1,\"3930\":1,\"5943\":1}}],[\"jemeter\",{\"1\":{\"4186\":1}}],[\"jenkins\",{\"1\":{\"1062\":1,\"1063\":1}}],[\"jwt\",{\"1\":{\"4811\":1,\"4812\":1,\"4813\":1,\"4815\":1,\"4816\":1,\"5004\":3,\"7208\":1,\"7209\":1,\"7210\":1,\"7212\":1,\"7213\":1,\"7286\":3}}],[\"jwt单点登陆\",{\"0\":{\"4092\":1}}],[\"jwt也可以设置过期时间\",{\"1\":{\"4063\":1}}],[\"jwt自包含了用户认证信息\",{\"1\":{\"4062\":1}}],[\"j++\",{\"1\":{\"3696\":1,\"5865\":1}}],[\"jhat\",{\"1\":{\"3574\":2,\"3575\":2}}],[\"jni\",{\"1\":{\"3527\":1}}],[\"j|\",{\"1\":{\"3419\":3}}],[\"jstat\",{\"1\":{\"3606\":1,\"3608\":2,\"3609\":1}}],[\"jstat等工具dump出堆转储快照\",{\"1\":{\"2129\":1}}],[\"jstack\",{\"1\":{\"3527\":1,\"3545\":1,\"3556\":1,\"3558\":2,\"3559\":1,\"3624\":1,\"3625\":2,\"3628\":1,\"3629\":2}}],[\"jsonstring\",{\"1\":{\"4999\":2}}],[\"jsonarray\",{\"1\":{\"4857\":2}}],[\"json\",{\"1\":{\"1200\":1,\"1380\":1,\"4055\":1,\"4979\":1,\"4981\":2,\"4984\":1,\"4986\":3,\"4999\":4,\"5552\":1}}],[\"jpg\",{\"1\":{\"2096\":1}}],[\"jpeg\",{\"1\":{\"2087\":1,\"2091\":1,\"2096\":1}}],[\"joda\",{\"1\":{\"4999\":1}}],[\"job\",{\"1\":{\"1917\":1,\"3301\":1,\"3302\":1,\"4997\":2,\"6087\":1,\"6088\":1}}],[\"joinpoint\",{\"1\":{\"4031\":4}}],[\"join\",{\"0\":{\"6739\":1},\"1\":{\"1857\":1,\"6233\":1}}],[\"j\",{\"0\":{\"7289\":1,\"7302\":1},\"1\":{\"1062\":1,\"3419\":5,\"3575\":1,\"3576\":1,\"3695\":1,\"5864\":1}}],[\"jdbc防止sql注入\",{\"0\":{\"6711\":1}}],[\"jdbc等\",{\"1\":{\"4068\":1}}],[\"jdbctemplate\",{\"1\":{\"1212\":1,\"5564\":1}}],[\"jdbc连接数据库\",{\"1\":{\"552\":1,\"5429\":1}}],[\"jdk原生线程池threadpoolexecutor提供了如下几个public的setter方法\",{\"1\":{\"3915\":1,\"6062\":1}}],[\"jdk的源代码\",{\"1\":{\"1080\":1}}],[\"jdk在一个小小的hash方法上就有很多考虑\",{\"1\":{\"1079\":1}}],[\"jdk\",{\"0\":{\"5516\":1,\"5531\":1},\"1\":{\"425\":1,\"897\":1,\"906\":1,\"908\":1,\"914\":1,\"915\":2,\"1079\":1,\"1128\":1,\"1157\":2,\"3560\":2,\"3565\":1,\"3574\":1,\"3581\":1,\"3679\":1,\"3680\":1,\"3689\":1,\"3736\":1,\"3757\":1,\"3778\":1,\"3779\":1,\"5316\":1,\"5515\":1,\"5524\":1,\"5526\":1,\"5532\":1,\"5533\":2,\"5538\":2,\"5709\":1,\"5789\":1,\"5790\":1,\"5848\":1,\"5849\":1,\"5859\":1,\"5967\":1,\"5989\":1}}],[\"jdk8之前的版本中\",{\"1\":{\"946\":1}}],[\"jdk8\",{\"1\":{\"239\":2}}],[\"jdk1\",{\"1\":{\"226\":3,\"919\":1,\"934\":1,\"935\":1,\"3697\":1,\"3700\":1,\"4383\":1,\"5436\":1,\"5866\":1,\"5869\":1}}],[\"jre<\",{\"1\":{\"2174\":1}}],[\"jre\",{\"1\":{\"426\":1,\"5317\":1}}],[\"jar包内配置等模式\",{\"1\":{\"4507\":1,\"6130\":1}}],[\"jar等\",{\"1\":{\"425\":1,\"5316\":1}}],[\"jar\",{\"1\":{\"425\":3,\"426\":1,\"427\":1,\"4084\":2,\"5316\":3,\"5317\":1,\"5318\":1}}],[\"java框架\",{\"0\":{\"7304\":1}}],[\"java里的进程有哪些状态\",{\"0\":{\"6228\":1}}],[\"java里怎么用的\",{\"0\":{\"4004\":1}}],[\"java高级\",{\"0\":{\"5535\":1}}],[\"java异常类层次结构\",{\"0\":{\"5349\":1}}],[\"java基础\",{\"0\":{\"5345\":1,\"5346\":1,\"7303\":1}}],[\"java提供了丰富的集合类\",{\"1\":{\"3940\":1}}],[\"java提供了线程机制\",{\"1\":{\"3939\":1}}],[\"java代码运行在jvm上\",{\"1\":{\"3938\":1}}],[\"java是一门纯面向对象的语言\",{\"1\":{\"3937\":1}}],[\"javac\",{\"1\":{\"3736\":1,\"5967\":1}}],[\"java内存屏障类型把上述两种内存屏障两两组合\",{\"1\":{\"3719\":1,\"5918\":1}}],[\"java内存模型规定\",{\"1\":{\"3709\":1,\"5909\":1}}],[\"java内存模型分为主内存和线程工作内存两大类\",{\"1\":{\"3706\":1,\"5905\":1}}],[\"java语言从\",{\"1\":{\"3700\":1,\"5869\":1}}],[\"java语言中的线程奔溃不会造成进程崩溃\",{\"1\":{\"1897\":1}}],[\"javax\",{\"1\":{\"2177\":1,\"2185\":1}}],[\"java这样设计还是有一定的考虑在的\",{\"1\":{\"1049\":1}}],[\"java总采用按位与操作实现取模操作\",{\"1\":{\"1031\":1}}],[\"java之所以使用位运算\",{\"1\":{\"1017\":1}}],[\"java7\",{\"1\":{\"1009\":1}}],[\"java7的永久代或jdk8的元空间\",{\"1\":{\"187\":1}}],[\"java中有的微服务有dubbo\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"java中用了哪些技术\",{\"0\":{\"3936\":1}}],[\"java中规定这个长度只能是2的倍数\",{\"1\":{\"1031\":1}}],[\"java中还有一个类hashtable\",{\"1\":{\"957\":1}}],[\"java中反射的用法非常非常多\",{\"1\":{\"515\":1,\"5403\":1}}],[\"java官方推荐的实现方式\",{\"1\":{\"765\":1}}],[\"java反射机制是在运行状态中\",{\"1\":{\"500\":1,\"5387\":1}}],[\"javap\",{\"1\":{\"491\":1,\"3736\":1,\"5378\":1,\"5967\":1}}],[\"java解释器调用main方法执行开始执行程序\",{\"1\":{\"471\":1,\"5366\":1}}],[\"javaguide\",{\"1\":{\"293\":2,\"1310\":1,\"3753\":1,\"3790\":1,\"3930\":1,\"5640\":1,\"5801\":1,\"5985\":1,\"6074\":1}}],[\"java8\",{\"1\":{\"282\":1,\"1009\":1}}],[\"java\",{\"0\":{\"565\":1,\"571\":1,\"595\":1,\"5371\":1,\"7290\":1,\"7291\":1},\"1\":{\"181\":1,\"185\":1,\"198\":1,\"203\":1,\"207\":4,\"208\":2,\"219\":2,\"222\":2,\"228\":2,\"239\":1,\"240\":2,\"242\":2,\"277\":1,\"279\":1,\"280\":2,\"290\":1,\"293\":1,\"299\":1,\"302\":2,\"308\":1,\"417\":1,\"419\":1,\"425\":1,\"426\":1,\"428\":1,\"443\":1,\"451\":2,\"455\":1,\"477\":1,\"488\":1,\"491\":2,\"514\":1,\"523\":1,\"527\":1,\"530\":1,\"556\":1,\"558\":1,\"560\":1,\"566\":1,\"567\":1,\"569\":1,\"572\":2,\"576\":1,\"579\":1,\"596\":5,\"597\":1,\"598\":1,\"600\":1,\"603\":1,\"613\":1,\"619\":1,\"621\":3,\"622\":1,\"623\":1,\"628\":1,\"642\":1,\"711\":1,\"765\":1,\"787\":2,\"790\":3,\"897\":1,\"899\":1,\"911\":1,\"1015\":1,\"1045\":1,\"1061\":1,\"1064\":1,\"1065\":1,\"1067\":1,\"1070\":1,\"1074\":1,\"1075\":1,\"1077\":2,\"1081\":1,\"1134\":1,\"1336\":1,\"1811\":1,\"1816\":4,\"1980\":1,\"1983\":1,\"2119\":1,\"2741\":1,\"2765\":1,\"3513\":1,\"3527\":25,\"3538\":1,\"3568\":1,\"3570\":2,\"3577\":1,\"3585\":1,\"3586\":1,\"3679\":1,\"3680\":1,\"3700\":1,\"3736\":1,\"3740\":1,\"3753\":4,\"3772\":3,\"3778\":1,\"3780\":1,\"3786\":1,\"3790\":2,\"3820\":1,\"3837\":1,\"3845\":1,\"3849\":1,\"3855\":4,\"3867\":1,\"3906\":1,\"3909\":1,\"3930\":4,\"3961\":1,\"3963\":1,\"3965\":1,\"3967\":1,\"3975\":1,\"3977\":1,\"3979\":1,\"4029\":1,\"4031\":1,\"4034\":1,\"4079\":1,\"4084\":2,\"4748\":1,\"4771\":1,\"4773\":1,\"4857\":2,\"4945\":1,\"4953\":1,\"4981\":1,\"4986\":1,\"4999\":5,\"5024\":1,\"5290\":1,\"5308\":1,\"5310\":1,\"5316\":1,\"5317\":1,\"5319\":1,\"5336\":1,\"5344\":2,\"5350\":1,\"5372\":1,\"5375\":1,\"5378\":2,\"5402\":1,\"5411\":1,\"5415\":1,\"5418\":1,\"5515\":1,\"5517\":1,\"5529\":1,\"5660\":1,\"5713\":1,\"5789\":1,\"5791\":1,\"5797\":1,\"5801\":2,\"5848\":1,\"5849\":1,\"5869\":1,\"5938\":1,\"5953\":1,\"5961\":1,\"5967\":1,\"5972\":1,\"5985\":2,\"6003\":1,\"6009\":4,\"6021\":1,\"6053\":1,\"6056\":1,\"6074\":2,\"6239\":1,\"6242\":1,\"6318\":1,\"6338\":1,\"6343\":4,\"6410\":1,\"6434\":1,\"7288\":1}}],[\"jvm双亲委派机制\",{\"0\":{\"4194\":1}}],[\"jvm内存\",{\"1\":{\"4155\":1}}],[\"jvm内存了解过吗\",{\"0\":{\"4154\":1}}],[\"jvm负责内存管理\",{\"1\":{\"3938\":1}}],[\"jvm技术\",{\"1\":{\"3938\":1}}],[\"jvm也会越来越聪明\",{\"1\":{\"3827\":1}}],[\"jvm对程序的锁的状态预测会越来越准确\",{\"1\":{\"3827\":1}}],[\"jvm会把该线程置为阻塞状态\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"jvm会把该线程放入\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"jvm规范中运行时数据区域中的方法区\",{\"1\":{\"398\":1}}],[\"jvm的字节码解释器就需要通过改变pc寄存器的值来明确下一条应该执行什么样的字节码指令\",{\"1\":{\"192\":1}}],[\"jvm整体架构\",{\"1\":{\"183\":1}}],[\"jvm\",{\"0\":{\"174\":1,\"176\":1,\"5282\":1,\"5283\":1,\"5285\":1},\"1\":{\"181\":1,\"184\":1,\"197\":1,\"198\":1,\"201\":1,\"204\":1,\"226\":1,\"242\":1,\"250\":2,\"252\":1,\"255\":1,\"256\":1,\"257\":1,\"261\":1,\"263\":1,\"272\":1,\"282\":1,\"283\":1,\"288\":1,\"291\":1,\"293\":1,\"418\":1,\"419\":1,\"421\":1,\"424\":1,\"451\":1,\"888\":2,\"891\":1,\"894\":2,\"2144\":1,\"3563\":1,\"3572\":1,\"3587\":1,\"3591\":1,\"3747\":1,\"3748\":2,\"3778\":1,\"3779\":1,\"3811\":1,\"5290\":1,\"5309\":1,\"5310\":1,\"5312\":1,\"5315\":1,\"5344\":1,\"5506\":2,\"5509\":1,\"5512\":2,\"5789\":1,\"5790\":1,\"5822\":1,\"5979\":1,\"5980\":2}}],[\"会解决这个问题\",{\"1\":{\"5946\":1}}],[\"会面临的\",{\"1\":{\"4883\":1,\"7261\":1}}],[\"会向初始化投票一样首先给自己投票\",{\"1\":{\"4619\":1,\"6192\":1}}],[\"会广播该事务\",{\"1\":{\"4594\":1}}],[\"会利用多台服务器构成一个集群\",{\"1\":{\"4584\":1}}],[\"会使索引失效\",{\"1\":{\"4254\":1}}],[\"会使用跳表作为\",{\"1\":{\"3135\":1,\"6791\":1}}],[\"会使用哈希表作为\",{\"1\":{\"3127\":1,\"6783\":1}}],[\"会使用整数集合作为\",{\"1\":{\"3119\":1,\"6775\":1}}],[\"会使用双向链表作为\",{\"1\":{\"3112\":1,\"6768\":1}}],[\"会使用压缩列表作为\",{\"1\":{\"3111\":1,\"3126\":1,\"3134\":1,\"6767\":1,\"6782\":1,\"6790\":1}}],[\"会使用该\",{\"1\":{\"3030\":1,\"6696\":1}}],[\"会使用\",{\"1\":{\"37\":1,\"1157\":2,\"5150\":1,\"5538\":2}}],[\"会限制name必须为字符串类型\",{\"1\":{\"4073\":1}}],[\"会占用cpu时间片\",{\"1\":{\"3822\":1,\"5940\":1}}],[\"会尝试获取当前\",{\"1\":{\"3748\":1,\"5980\":1}}],[\"会尝试获取实例对象的锁\",{\"1\":{\"3748\":1,\"5980\":1}}],[\"会尝试获取对象的锁\",{\"1\":{\"3742\":1,\"5974\":1}}],[\"会封装成node加入到aqs中去\",{\"1\":{\"3641\":1,\"5882\":1}}],[\"会显示一个文件的信息\",{\"1\":{\"3498\":1}}],[\"会分配一个\",{\"1\":{\"3490\":1}}],[\"会分成一个一个独立的数据单元\",{\"1\":{\"1957\":1}}],[\"会忽略\",{\"1\":{\"3363\":1}}],[\"会进入队列等待\",{\"1\":{\"3842\":1,\"5958\":1}}],[\"会进行哪些操作\",{\"1\":{\"3257\":1,\"3260\":1,\"6862\":1,\"6865\":1}}],[\"会进⾏单例对象的创建\",{\"1\":{\"859\":1,\"5489\":1}}],[\"会记录下这两个参数\",{\"1\":{\"3233\":1}}],[\"会用\",{\"1\":{\"3233\":1}}],[\"会阻塞\",{\"1\":{\"3150\":1,\"6806\":1}}],[\"会阻塞后续该表的所有\",{\"1\":{\"2903\":1,\"6575\":1}}],[\"会生成数据库系统当前的一个快照\",{\"1\":{\"3044\":1}}],[\"会对读取的记录进行加锁\",{\"1\":{\"3022\":1}}],[\"会对记录加上读写锁\",{\"1\":{\"3000\":1,\"6672\":1}}],[\"会加上\",{\"1\":{\"3013\":1,\"6685\":1}}],[\"会加一个表级别的\",{\"1\":{\"2922\":1,\"6594\":1}}],[\"会被分配一个唯一的pid\",{\"1\":{\"6953\":1}}],[\"会被堵塞\",{\"1\":{\"4891\":1}}],[\"会被回滚到事务开始前的状态\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"会被全局异常处理类自动捕获\",{\"1\":{\"1322\":1}}],[\"会为被\",{\"1\":{\"2926\":1,\"6598\":1}}],[\"会影响插入性能\",{\"1\":{\"2924\":1,\"6596\":1}}],[\"会影响并发性能\",{\"1\":{\"2886\":1,\"6558\":1}}],[\"会释放当前会话的所有表锁\",{\"1\":{\"2883\":1,\"6555\":1}}],[\"会自动增加等待时间\",{\"1\":{\"3827\":1}}],[\"会自动给这个表加上\",{\"1\":{\"2889\":1,\"6561\":1}}],[\"会自动先检查表中是否有唯一索引且不允许存在\",{\"1\":{\"2787\":1,\"6456\":1}}],[\"会自我牺牲\",{\"1\":{\"2666\":1}}],[\"会重发\",{\"1\":{\"2614\":1}}],[\"会创建一个半连接的对象\",{\"1\":{\"2583\":1}}],[\"会造成双方资源的浪费\",{\"1\":{\"2558\":1}}],[\"会去问它的根域名服务器\",{\"1\":{\"2390\":1,\"7094\":1}}],[\"会去拆开\",{\"1\":{\"2380\":1}}],[\"会发生什么\",{\"0\":{\"2570\":1,\"2572\":1,\"2575\":1,\"2605\":1,\"2607\":1,\"2609\":1,\"2611\":1},\"1\":{\"2415\":1,\"2416\":1,\"2417\":1,\"2422\":1,\"2423\":1,\"2424\":1,\"2425\":1}}],[\"会发生再均衡\",{\"1\":{\"1593\":1}}],[\"会发给服务端\",{\"1\":{\"2336\":1}}],[\"会话秘钥\",{\"1\":{\"2313\":1,\"2314\":1,\"2322\":1,\"2327\":1,\"2334\":1,\"2337\":1,\"2339\":1,\"2341\":1,\"2343\":1}}],[\"会招致客户端一直请求不到数据\",{\"1\":{\"2304\":1,\"2354\":1}}],[\"会再次更新\",{\"1\":{\"2236\":1}}],[\"会先清空当前数据库\",{\"1\":{\"3235\":1}}],[\"会先创建\",{\"1\":{\"2866\":1,\"6538\":1}}],[\"会先通过请求资源的时间与\",{\"1\":{\"2235\":1}}],[\"会先查\",{\"1\":{\"1674\":1}}],[\"会修改服务器上的资源\",{\"1\":{\"2224\":1}}],[\"会有下面这样日志\",{\"1\":{\"5018\":1}}],[\"会有一定的开销\",{\"1\":{\"2495\":1}}],[\"会有\",{\"1\":{\"2215\":1}}],[\"会有比较大的延迟\",{\"1\":{\"2071\":1,\"5776\":1}}],[\"会有数据库不一致的问题\",{\"0\":{\"2065\":1,\"5770\":1}}],[\"会有极大的成本浪费\",{\"1\":{\"1421\":1}}],[\"会出现一些缺陷\",{\"1\":{\"2012\":1}}],[\"会导致所有的服务器间同步状态\",{\"1\":{\"4561\":1,\"6161\":1}}],[\"会导致调用相关功能时比较耗时\",{\"1\":{\"3621\":1}}],[\"会导致\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"会导致其所属进程的所有线程崩溃\",{\"1\":{\"1897\":1}}],[\"会导致相同的key\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"会将自己的状态\",{\"1\":{\"4619\":1,\"6192\":1}}],[\"会将每秒请求数\",{\"1\":{\"4530\":1,\"6147\":1}}],[\"会将请求头\",{\"1\":{\"2245\":1}}],[\"会将数据发给子线程里的\",{\"1\":{\"1839\":1,\"6371\":1}}],[\"会将实际上将已经提交的位移从3000回滚到2000\",{\"1\":{\"1616\":1}}],[\"会缓存在文件系统中的\",{\"1\":{\"1699\":1}}],[\"会产生什么问题\",{\"0\":{\"4240\":1}}],[\"会产生缓存的雪崩\",{\"1\":{\"2030\":1}}],[\"会产生了多个不连续的小物理内存\",{\"1\":{\"1651\":1}}],[\"会产生大量不连续的内存碎片\",{\"1\":{\"327\":1}}],[\"会执行数据清除工作\",{\"1\":{\"1455\":1,\"6903\":1}}],[\"会清除下一个分区片段的数据\",{\"1\":{\"1454\":1,\"6902\":1}}],[\"会实时从\",{\"1\":{\"1445\":1}}],[\"会更早地加载\",{\"1\":{\"1334\":1}}],[\"会根据统一信息\",{\"1\":{\"2834\":1,\"6506\":1}}],[\"会根据联合索引中的字段顺序\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"会根据请求中的\",{\"1\":{\"2255\":1}}],[\"会根据类别搜索\",{\"0\":{\"2059\":1,\"5764\":1}}],[\"会根据\",{\"1\":{\"1193\":1,\"5545\":1}}],[\"会调用\",{\"1\":{\"1187\":1}}],[\"会在日志底部打印出代码中存在哪些死锁\",{\"1\":{\"3630\":1}}],[\"会在定时器过期之前\",{\"1\":{\"2650\":1}}],[\"会在第\",{\"1\":{\"2615\":1}}],[\"会在\",{\"1\":{\"1166\":1,\"2253\":1,\"3796\":1,\"5808\":1}}],[\"会触发扩容\",{\"1\":{\"1000\":1}}],[\"会比使用\",{\"1\":{\"637\":1}}],[\"会读取配置文件applicationcontext\",{\"1\":{\"550\":1,\"5429\":1}}],[\"会走默认无参构造方法\",{\"1\":{\"532\":1,\"5420\":1}}],[\"会抛出\",{\"1\":{\"291\":1}}],[\"会给对象定义一个对象年轻计数器\",{\"1\":{\"255\":1}}],[\"会把数据锁住\",{\"1\":{\"3814\":1,\"5932\":1}}],[\"会把数据库打挂\",{\"0\":{\"2077\":1,\"5782\":1}}],[\"会把首节点唤醒\",{\"1\":{\"3640\":1,\"5881\":1}}],[\"会把本地所有untrack的文件都加入暂存区\",{\"1\":{\"3363\":1}}],[\"会把磁盘的数据拷贝到内核的缓冲区里\",{\"1\":{\"1790\":1,\"6295\":1}}],[\"会把自己消费过的消息的offset提交一下\",{\"1\":{\"1496\":1,\"6949\":1}}],[\"会把存活的对象转移到\",{\"1\":{\"257\":1}}],[\"会把\",{\"1\":{\"181\":1,\"5290\":1}}],[\"本质上是多路复用+轮询\",{\"1\":{\"7073\":1}}],[\"本质上是利用了客户端的漏洞\",{\"1\":{\"2345\":1}}],[\"本子网内不会有设备成功接收\",{\"1\":{\"7046\":1}}],[\"本来10\",{\"1\":{\"4441\":1}}],[\"本来就慢\",{\"1\":{\"1049\":1}}],[\"本次数据是什么格式\",{\"1\":{\"2217\":1}}],[\"本身可能会丢数据\",{\"1\":{\"4884\":1,\"7262\":1}}],[\"本身却是\",{\"1\":{\"3845\":1,\"5961\":1}}],[\"本身去实现的\",{\"1\":{\"3845\":1,\"5961\":1}}],[\"本身没有实现任何接口\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"本身之外实例数最多的类\",{\"1\":{\"3581\":1}}],[\"本身不记录文件名\",{\"1\":{\"3491\":1}}],[\"本身支持的容器方式来实现这一功能\",{\"1\":{\"3312\":1}}],[\"本身的处理既简单又高效\",{\"1\":{\"2507\":1}}],[\"本身提供了很多接口可以获取当前项目的各项运行状态指标\",{\"1\":{\"1367\":1,\"5693\":1}}],[\"本身就是对方法的增强\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"本章节涉及到的\",{\"1\":{\"1284\":1,\"5626\":1}}],[\"本地仓库提交到远程仓库\",{\"1\":{\"3338\":1}}],[\"本地\",{\"1\":{\"2390\":1,\"2392\":1,\"2394\":1,\"2396\":1,\"7094\":1,\"7096\":1,\"7098\":1,\"7100\":1}}],[\"本地域名服务器收到客户端的请求后\",{\"1\":{\"2390\":1,\"7094\":1}}],[\"本地方法栈\",{\"1\":{\"3708\":1,\"5907\":1}}],[\"本地方法栈中引用的对象\",{\"1\":{\"304\":1}}],[\"本地方法栈也是线程私有的\",{\"1\":{\"220\":1}}],[\"本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区\",{\"1\":{\"218\":1}}],[\"本地方法区\",{\"1\":{\"186\":1}}],[\"本地库接口\",{\"1\":{\"180\":1,\"5289\":1}}],[\"本页面就是一个示例\",{\"1\":{\"11\":1,\"5124\":1}}],[\"dto\",{\"1\":{\"4919\":1,\"4923\":1}}],[\"dtos\",{\"1\":{\"4857\":2,\"4929\":1,\"4931\":1,\"4933\":2,\"4935\":2,\"4994\":1,\"4999\":1}}],[\"drwxr\",{\"1\":{\"3498\":1,\"3499\":1}}],[\"dr\",{\"1\":{\"3406\":2}}],[\"drop\",{\"1\":{\"2857\":1,\"6529\":1}}],[\"duo\",{\"0\":{\"7298\":1}}],[\"dubbo\",{\"1\":{\"4491\":1,\"6124\":1}}],[\"dubbo可以提供透明的跨系统调用\",{\"1\":{\"3989\":1}}],[\"dubbo最典型的应用场景是跨系统的分布式服务调用\",{\"1\":{\"3989\":1}}],[\"dubbo最大的优点是透明化\",{\"1\":{\"3987\":1}}],[\"dubbo的典型应用\",{\"1\":{\"3988\":1}}],[\"dubbo的优点\",{\"1\":{\"3986\":1}}],[\"dubbo的工作原理主要是基于rpc远程调用\",{\"1\":{\"3985\":1}}],[\"dubbo的工作原理\",{\"1\":{\"3984\":1}}],[\"dubbo是阿里巴巴开源的一个高性能\",{\"1\":{\"3983\":1}}],[\"dubbo是什么\",{\"1\":{\"3982\":1}}],[\"dump进行脱机分析\",{\"1\":{\"3993\":1}}],[\"dump\",{\"1\":{\"3563\":2,\"3566\":2,\"3572\":1,\"3574\":1,\"3575\":1}}],[\"durability\",{\"1\":{\"2974\":1,\"6646\":1}}],[\"duration\",{\"1\":{\"1610\":1,\"1613\":1,\"1617\":1}}],[\"duplicated\",{\"1\":{\"2706\":1}}],[\"duplicate\",{\"1\":{\"2538\":1}}],[\"dns\",{\"0\":{\"7080\":1},\"1\":{\"2385\":1,\"2386\":1,\"2387\":1,\"2388\":1,\"2389\":3,\"2390\":1,\"2391\":2,\"2392\":1,\"2393\":1,\"2394\":3,\"2395\":2,\"2396\":1,\"2508\":1,\"2717\":1,\"7012\":1,\"7081\":1,\"7086\":1,\"7087\":1,\"7088\":1,\"7089\":2,\"7090\":2,\"7091\":3,\"7093\":3,\"7094\":1,\"7095\":2,\"7096\":1,\"7097\":1,\"7098\":3,\"7099\":2,\"7100\":1}}],[\"dns协议\",{\"0\":{\"2383\":1}}],[\"db\",{\"1\":{\"2068\":1,\"3019\":2,\"3028\":1,\"3029\":1,\"3030\":1,\"3047\":1,\"3048\":1,\"3059\":1,\"3181\":1,\"3182\":1,\"3183\":1,\"3185\":1,\"3188\":1,\"4101\":1,\"4105\":1,\"4671\":1,\"5773\":1,\"6691\":2,\"6694\":1,\"6695\":1,\"6696\":1,\"6839\":1,\"6840\":1,\"6841\":1,\"6843\":1,\"6846\":1,\"7190\":1}}],[\"dbtype\",{\"1\":{\"1131\":1,\"4860\":2,\"4938\":2}}],[\"dma\",{\"1\":{\"1790\":1,\"1792\":1,\"1801\":2,\"1802\":1,\"1803\":1,\"1804\":1,\"1806\":1,\"1807\":1,\"6295\":1,\"6297\":1,\"6307\":2,\"6308\":1,\"6309\":1,\"6310\":1,\"6313\":1,\"6314\":1}}],[\"datetime\",{\"1\":{\"4999\":2}}],[\"date\",{\"1\":{\"4857\":1,\"4999\":4}}],[\"date=\",{\"1\":{\"3403\":1}}],[\"database\",{\"0\":{\"7296\":1}}],[\"datacenter\",{\"1\":{\"4826\":1,\"4974\":1,\"4975\":1}}],[\"data\",{\"1\":{\"178\":1,\"181\":1,\"790\":4,\"792\":1,\"1103\":1,\"2093\":1,\"2750\":1,\"2762\":2,\"2766\":3,\"2767\":2,\"3571\":2,\"4979\":1,\"5287\":1,\"5290\":1,\"6419\":1,\"6431\":2,\"6435\":3,\"6436\":2}}],[\"daemon\",{\"1\":{\"3299\":1,\"3300\":1,\"3312\":1,\"6085\":1,\"6086\":1}}],[\"dao\",{\"1\":{\"1103\":1,\"4748\":1,\"4750\":1}}],[\"dao接口仅定义抽象数据访问方法\",{\"1\":{\"1100\":1}}],[\"dao接口实现原理主要包括\",{\"1\":{\"1099\":1}}],[\"dao接口中定义了对数据库的抽象访问方法\",{\"1\":{\"1092\":1}}],[\"dao接口原理\",{\"0\":{\"1091\":1,\"5694\":1}}],[\"digest\",{\"1\":{\"5028\":1}}],[\"diff\",{\"1\":{\"3361\":3}}],[\"dict\",{\"1\":{\"3185\":1,\"6843\":1}}],[\"dirname\",{\"1\":{\"3411\":2,\"3417\":1}}],[\"dir\",{\"1\":{\"3157\":1,\"6813\":1}}],[\"direct\",{\"1\":{\"1801\":1,\"6307\":1}}],[\"directory\",{\"1\":{\"1666\":1,\"1667\":1,\"1668\":1,\"3332\":3,\"3355\":1,\"5017\":1}}],[\"dirs\",{\"1\":{\"426\":1,\"5317\":1}}],[\"discovery\",{\"1\":{\"4860\":1,\"4938\":1}}],[\"discardpolicy\",{\"1\":{\"3855\":1,\"3872\":1,\"6009\":1,\"6027\":1}}],[\"discardoldestpolicy\",{\"1\":{\"3855\":1,\"3873\":1,\"6009\":1,\"6028\":1}}],[\"distribution\",{\"0\":{\"7300\":1}}],[\"distinct\",{\"1\":{\"4857\":1}}],[\"dist\",{\"1\":{\"3413\":1}}],[\"dispatch\",{\"1\":{\"1821\":2,\"1823\":1,\"1835\":1,\"6350\":2,\"6352\":1,\"6367\":1}}],[\"dispatcherservlet\",{\"1\":{\"1193\":2,\"1197\":1,\"1198\":1,\"1204\":1,\"5545\":2,\"5548\":1,\"5549\":1,\"5550\":1,\"5556\":1}}],[\"disposablebean\",{\"1\":{\"1187\":1}}],[\"disabled\",{\"1\":{\"1047\":1}}],[\"dialect\",{\"1\":{\"1125\":1,\"5707\":1}}],[\"dcl\",{\"1\":{\"857\":1,\"5487\":1}}],[\"doocr\",{\"1\":{\"4857\":1}}],[\"docker吗\",{\"0\":{\"4095\":1}}],[\"dockerfile\",{\"0\":{\"3315\":1},\"1\":{\"3316\":2}}],[\"docker容器在应用程序层创建抽象并将应用程序及其所有依赖项打包在一起\",{\"1\":{\"3314\":1}}],[\"docker容器网络环境\",{\"1\":{\"3303\":1,\"6089\":1}}],[\"docker利用namespace实现系统环境的隔离\",{\"1\":{\"3312\":1}}],[\"docker面试题\",{\"0\":{\"3308\":1}}],[\"docker的架构\",{\"0\":{\"3297\":1,\"6082\":1}}],[\"docker\",{\"0\":{\"3287\":1,\"3288\":1,\"3313\":1,\"3317\":2,\"3325\":1,\"6075\":1,\"6076\":1,\"6077\":1},\"1\":{\"3289\":1,\"3290\":1,\"3291\":1,\"3294\":1,\"3298\":1,\"3299\":2,\"3300\":4,\"3301\":2,\"3302\":1,\"3303\":1,\"3304\":1,\"3307\":15,\"3310\":1,\"3312\":1,\"3314\":1,\"3316\":2,\"3318\":1,\"3319\":1,\"3322\":1,\"3323\":1,\"3326\":1,\"3327\":2,\"3328\":5,\"3329\":4,\"4654\":1,\"6078\":1,\"6079\":1,\"6080\":1,\"6083\":1,\"6085\":2,\"6086\":4,\"6087\":2,\"6088\":1,\"6089\":1,\"6090\":1,\"7173\":1}}],[\"downorup\",{\"1\":{\"4979\":1}}],[\"down\",{\"1\":{\"3206\":1,\"4979\":1,\"4981\":1}}],[\"downloadfile\",{\"1\":{\"4857\":1}}],[\"download\",{\"1\":{\"1493\":1,\"6946\":1,\"6955\":2}}],[\"dos\",{\"1\":{\"1066\":1}}],[\"do\",{\"1\":{\"824\":1,\"826\":1}}],[\"double\",{\"1\":{\"475\":1,\"857\":1,\"1201\":1,\"2177\":1,\"2182\":1,\"2185\":1,\"3073\":1,\"5370\":1,\"5487\":1,\"5553\":1,\"6724\":1}}],[\"dlgdlgd\",{\"1\":{\"640\":1}}],[\"d\",{\"1\":{\"480\":1,\"1413\":1,\"1417\":1,\"1418\":1,\"2377\":1,\"3319\":2,\"3395\":1,\"3403\":1,\"3406\":1,\"3507\":1,\"5021\":1}}],[\"demo\",{\"1\":{\"4748\":2,\"4750\":1}}],[\"delayedworkqueue\",{\"1\":{\"3880\":3,\"6035\":3}}],[\"deleted\",{\"1\":{\"3028\":1,\"6694\":1}}],[\"delete\",{\"1\":{\"1134\":1,\"1147\":1,\"2856\":1,\"3022\":1,\"3028\":1,\"5713\":1,\"5727\":1,\"6528\":1,\"6694\":1}}],[\"delegation\",{\"1\":{\"442\":1,\"5334\":1}}],[\"detach\",{\"1\":{\"3319\":1}}],[\"details\",{\"1\":{\"553\":1,\"640\":1,\"686\":1,\"882\":1,\"918\":1,\"947\":1,\"1119\":1,\"1153\":1,\"1393\":1,\"1493\":1,\"1511\":1,\"2036\":1,\"2136\":1,\"2189\":1,\"3059\":1,\"3063\":1,\"3390\":1,\"3790\":1,\"3846\":1,\"4756\":1,\"5103\":2,\"5115\":1,\"5347\":1,\"5430\":1,\"5435\":1,\"5701\":1,\"5734\":1,\"5801\":1,\"5963\":1,\"6714\":1,\"6893\":1,\"6946\":1,\"6955\":1,\"6969\":1}}],[\"decimal\",{\"0\":{\"6723\":1},\"1\":{\"3072\":1,\"3074\":1,\"3075\":2,\"3076\":2,\"6725\":1,\"6726\":2,\"6727\":2}}],[\"decorator\",{\"1\":{\"874\":1,\"875\":1}}],[\"deadlock\",{\"1\":{\"3629\":1}}],[\"dead\",{\"1\":{\"1858\":1,\"6234\":1}}],[\"depth\",{\"1\":{\"3390\":1,\"6955\":1}}],[\"dependencies\",{\"1\":{\"1356\":1,\"5681\":1}}],[\"dependency>\",{\"1\":{\"1337\":1,\"2174\":2,\"4545\":1,\"5661\":1}}],[\"deprecated\",{\"1\":{\"597\":1,\"1396\":1}}],[\"developer\",{\"1\":{\"2069\":1,\"5774\":1}}],[\"devtools<\",{\"1\":{\"1337\":1,\"5661\":1}}],[\"devtools\",{\"1\":{\"1336\":2,\"5660\":2}}],[\"dev\",{\"0\":{\"7297\":1},\"1\":{\"1336\":1,\"2143\":1,\"5660\":1}}],[\"des\",{\"1\":{\"5089\":1,\"5092\":1}}],[\"des密钥仅56位\",{\"1\":{\"4012\":1}}],[\"destination\",{\"1\":{\"3406\":1,\"3408\":1}}],[\"destory\",{\"1\":{\"1187\":1,\"1188\":1}}],[\"design\",{\"1\":{\"852\":1,\"1310\":1,\"5482\":1,\"5640\":1}}],[\"desc\",{\"1\":{\"83\":1,\"5196\":1}}],[\"defaultthreadfactory\",{\"1\":{\"3855\":1,\"6009\":1}}],[\"defaultservlethandlerconfigurer\",{\"1\":{\"1398\":1}}],[\"default\",{\"1\":{\"816\":1,\"961\":1,\"967\":1,\"971\":1,\"1231\":1,\"3390\":2,\"3560\":1,\"4926\":1,\"4986\":1,\"4999\":1,\"5583\":1}}],[\"defaultcapacity\",{\"1\":{\"816\":1}}],[\"defaultwriteobject\",{\"1\":{\"787\":1}}],[\"deque<integer>\",{\"1\":{\"570\":1,\"601\":1}}],[\"deque\",{\"0\":{\"561\":1,\"614\":1},\"1\":{\"568\":2,\"600\":1,\"613\":1,\"615\":1,\"616\":1,\"619\":1,\"620\":1,\"624\":1,\"625\":2,\"628\":1,\"765\":1}}],[\"dynamicproxy\",{\"1\":{\"3975\":2,\"3977\":1}}],[\"dynamic\",{\"1\":{\"213\":1}}],[\"c|sort\",{\"1\":{\"5021\":1}}],[\"cmpxchg\",{\"1\":{\"3678\":1,\"5847\":1}}],[\"cms\",{\"1\":{\"343\":1,\"351\":1,\"361\":1,\"372\":1,\"403\":1}}],[\"c5\",{\"1\":{\"3559\":1}}],[\"cv\",{\"1\":{\"3419\":1}}],[\"cp\",{\"1\":{\"3406\":1,\"3447\":1,\"4648\":3,\"4650\":2,\"6221\":3,\"6223\":2}}],[\"cpu达到100\",{\"1\":{\"4340\":1,\"7165\":1}}],[\"cpu使用率高\",{\"1\":{\"4219\":1}}],[\"cpu时间\",{\"1\":{\"3431\":1}}],[\"cpu太快\",{\"1\":{\"707\":1,\"5475\":1}}],[\"cpu会不停的做任务切换\",{\"1\":{\"194\":1}}],[\"cpu\",{\"1\":{\"181\":1,\"347\":1,\"352\":1,\"369\":1,\"372\":1,\"586\":2,\"1572\":1,\"1574\":1,\"1576\":1,\"1634\":1,\"1636\":1,\"1673\":1,\"1674\":1,\"1791\":1,\"1794\":1,\"1801\":1,\"1806\":1,\"1807\":1,\"1829\":1,\"1868\":1,\"1871\":1,\"1872\":2,\"1878\":4,\"1900\":1,\"1915\":1,\"1925\":2,\"1926\":1,\"2273\":1,\"2623\":1,\"3084\":1,\"3173\":1,\"3174\":1,\"3175\":1,\"3314\":1,\"3540\":1,\"3544\":3,\"3545\":1,\"3546\":1,\"3548\":3,\"3549\":1,\"3550\":1,\"3552\":1,\"3553\":1,\"3555\":1,\"3558\":1,\"3563\":1,\"3619\":2,\"3667\":1,\"3678\":2,\"3692\":1,\"3693\":1,\"3699\":1,\"3825\":1,\"3826\":1,\"3841\":1,\"3843\":1,\"3897\":6,\"3898\":2,\"5290\":1,\"5830\":1,\"5847\":2,\"5861\":1,\"5862\":1,\"5868\":1,\"5942\":1,\"5943\":1,\"5957\":1,\"5959\":1,\"6044\":6,\"6045\":2,\"6260\":1,\"6296\":1,\"6299\":1,\"6307\":1,\"6313\":1,\"6314\":1,\"6358\":1,\"6361\":1,\"6373\":1,\"6736\":1,\"6741\":1,\"6831\":1,\"6832\":1,\"6833\":1}}],[\"ctime\",{\"1\":{\"3403\":1,\"3481\":1}}],[\"ctl\",{\"1\":{\"1775\":1,\"6265\":1}}],[\"cd\",{\"1\":{\"3397\":1}}],[\"cgroup\",{\"1\":{\"3290\":1,\"3312\":1,\"6079\":1}}],[\"cglibcode\",{\"1\":{\"5526\":1}}],[\"cglib\",{\"0\":{\"913\":1,\"5523\":1,\"5531\":1},\"1\":{\"893\":1,\"897\":1,\"907\":1,\"908\":3,\"909\":1,\"914\":2,\"1157\":1,\"5511\":1,\"5515\":1,\"5525\":1,\"5526\":2,\"5527\":1,\"5532\":2,\"5538\":1}}],[\"city\",{\"1\":{\"2838\":1,\"6510\":1}}],[\"circular\",{\"1\":{\"1761\":1}}],[\"cwnd\",{\"1\":{\"2670\":1,\"2671\":1,\"2672\":1,\"2673\":1,\"2680\":1,\"2683\":1,\"2684\":1,\"2686\":2,\"2692\":1,\"2693\":1,\"2694\":3,\"2697\":1,\"2698\":2,\"2699\":1,\"2703\":1,\"2705\":1,\"2706\":1}}],[\"cwnd是发送方维护的一个的状态变量\",{\"1\":{\"2669\":1}}],[\"customexception\",{\"1\":{\"5650\":3,\"5651\":2}}],[\"cuckoofilter\",{\"1\":{\"2177\":2,\"2185\":2}}],[\"cuckoofilter4j\",{\"1\":{\"2177\":1,\"2185\":1}}],[\"cuckoofilter是布谷鸟过滤器\",{\"1\":{\"2175\":1}}],[\"cuckoofilter是一个开源的java布隆过滤器实现\",{\"1\":{\"2175\":1}}],[\"cuckoofilter<string>\",{\"1\":{\"2177\":1,\"2185\":1}}],[\"cuckoofilter<\",{\"1\":{\"2174\":1}}],[\"currentthread\",{\"1\":{\"3765\":2,\"3766\":1,\"5996\":1,\"5997\":1}}],[\"currenttimemillis\",{\"1\":{\"634\":4,\"4895\":1}}],[\"currentcounter\",{\"1\":{\"1466\":3,\"6914\":3}}],[\"current\",{\"1\":{\"1466\":1,\"3928\":1,\"6914\":1}}],[\"cyclicbarrier\",{\"1\":{\"1983\":1,\"6242\":1}}],[\"cron\",{\"1\":{\"4895\":1}}],[\"craig\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"crawl\",{\"1\":{\"1380\":2}}],[\"crawltask\",{\"1\":{\"1380\":6}}],[\"crawltaskconsumer\",{\"1\":{\"1380\":1}}],[\"crawltaskexecutor\",{\"1\":{\"1380\":1}}],[\"creator\",{\"1\":{\"3032\":1,\"3036\":1,\"6698\":1,\"6703\":1}}],[\"createarticleesindex\",{\"1\":{\"4984\":1}}],[\"creates\",{\"1\":{\"3857\":2,\"6011\":2}}],[\"createmap\",{\"1\":{\"3765\":1,\"5996\":1}}],[\"create\",{\"1\":{\"2096\":1,\"2182\":1}}],[\"crud\",{\"1\":{\"2890\":1,\"2892\":1,\"2894\":1,\"2903\":1,\"6562\":1,\"6564\":1,\"6566\":1,\"6575\":1}}],[\"critical\",{\"1\":{\"1978\":1}}],[\"c++\",{\"1\":{\"1897\":1,\"3449\":1}}],[\"c++实现的\",{\"1\":{\"3740\":1,\"5972\":1}}],[\"c++实现\",{\"1\":{\"425\":1,\"5316\":1}}],[\"csrf\",{\"1\":{\"4815\":1,\"7212\":1}}],[\"cs\",{\"0\":{\"7295\":1},\"1\":{\"3527\":3}}],[\"cscan\",{\"1\":{\"1761\":1}}],[\"csdn\",{\"1\":{\"553\":1,\"640\":1,\"686\":1,\"882\":1,\"918\":1,\"947\":1,\"1119\":1,\"1153\":1,\"1393\":1,\"1493\":1,\"1511\":1,\"2036\":1,\"2136\":1,\"2189\":1,\"3059\":1,\"3063\":1,\"3390\":1,\"3790\":1,\"3846\":1,\"4756\":1,\"5103\":2,\"5115\":1,\"5347\":1,\"5430\":1,\"5435\":1,\"5701\":1,\"5734\":1,\"5801\":1,\"5963\":1,\"6714\":1,\"6893\":1,\"6946\":1,\"6955\":1,\"6969\":1}}],[\"c2订阅t0\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"c2\",{\"1\":{\"1479\":1,\"1482\":1,\"1491\":1,\"6929\":1,\"6933\":1,\"6943\":1}}],[\"c2多分配两个分区了\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"c2多分配一个分区\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"c10k\",{\"1\":{\"6269\":1,\"6282\":3}}],[\"c1订阅t0和t1\",{\"1\":{\"1482\":1,\"6933\":1}}],[\"c1\",{\"1\":{\"1478\":1,\"1482\":1,\"1491\":1,\"6928\":1,\"6933\":1,\"6943\":1}}],[\"c0\",{\"1\":{\"1477\":1,\"1491\":1,\"6927\":1,\"6943\":1}}],[\"c0会多分配一个分区\",{\"1\":{\"1475\":1,\"6924\":1}}],[\"c三个过程方法\",{\"1\":{\"1373\":1}}],[\"canceltask\",{\"1\":{\"4933\":1,\"4935\":2}}],[\"cancel\",{\"1\":{\"4933\":1,\"4935\":1}}],[\"candidate\",{\"1\":{\"4586\":1}}],[\"cap\",{\"0\":{\"4635\":1,\"6207\":1},\"1\":{\"4637\":1,\"4638\":1,\"4645\":2,\"4647\":1,\"6209\":1,\"6211\":2,\"6218\":2,\"6220\":1}}],[\"capacities\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"capacity可以用threshold表示\",{\"1\":{\"1000\":1}}],[\"capacity的值时\",{\"1\":{\"1000\":1}}],[\"capacity表示当前hashmap的容量是多少\",{\"1\":{\"1000\":1}}],[\"capacity就从16扩容到32了\",{\"1\":{\"996\":1}}],[\"capacity\",{\"0\":{\"973\":1},\"1\":{\"816\":1,\"961\":1,\"970\":1,\"971\":1,\"975\":5,\"977\":1,\"978\":1,\"980\":15,\"981\":3,\"989\":1,\"993\":10,\"995\":2}}],[\"capacityincrement来初始化的时候\",{\"1\":{\"802\":1}}],[\"capacityincrement\",{\"1\":{\"790\":2,\"802\":2}}],[\"callerrunspolicy\",{\"1\":{\"3855\":1,\"3871\":1,\"3874\":1,\"6009\":1,\"6026\":1,\"6029\":1}}],[\"callback\",{\"1\":{\"911\":1,\"1520\":2,\"1521\":1,\"1547\":1,\"5529\":1}}],[\"cassandra\",{\"1\":{\"4648\":1,\"6221\":1}}],[\"cas有哪些问题\",{\"1\":{\"3683\":1,\"5852\":1}}],[\"cas机制当中使用了3个基本操作数\",{\"1\":{\"3668\":1,\"5831\":1}}],[\"cas是乐观锁\",{\"1\":{\"3665\":1,\"5828\":1}}],[\"cas\",{\"0\":{\"3661\":1,\"3666\":1,\"3676\":1,\"3681\":1,\"5823\":1,\"5829\":1,\"5845\":1,\"5850\":1},\"1\":{\"3667\":1,\"3677\":1,\"3678\":2,\"3679\":2,\"3680\":1,\"3682\":1,\"3685\":2,\"3692\":1,\"3695\":2,\"3699\":1,\"3700\":1,\"3701\":1,\"3795\":1,\"3796\":3,\"3807\":1,\"3826\":1,\"5807\":1,\"5808\":3,\"5818\":1,\"5830\":1,\"5846\":1,\"5847\":2,\"5848\":2,\"5849\":1,\"5851\":1,\"5854\":2,\"5861\":1,\"5864\":2,\"5868\":1,\"5869\":1,\"5870\":1,\"5943\":1}}],[\"cas操作\",{\"1\":{\"3659\":1,\"5902\":1}}],[\"cat\",{\"1\":{\"3415\":2,\"5021\":1}}],[\"catch语句捕获它\",{\"1\":{\"460\":1,\"466\":1,\"5355\":1,\"5361\":1}}],[\"catch\",{\"1\":{\"444\":1,\"478\":2,\"480\":3,\"489\":1,\"1515\":1,\"1518\":1,\"1610\":1,\"1617\":1,\"4857\":3,\"4986\":1,\"5337\":1,\"5373\":2,\"5376\":1,\"5651\":2}}],[\"causing\",{\"1\":{\"2538\":1}}],[\"ca\",{\"1\":{\"2309\":1,\"2331\":1,\"4648\":1,\"4649\":1,\"6221\":1,\"6222\":1}}],[\"cachetagtoredis\",{\"1\":{\"4999\":2}}],[\"cacheservice\",{\"1\":{\"4895\":4,\"4999\":4}}],[\"cache中读取不到的话\",{\"1\":{\"4105\":1}}],[\"cachedthreadpool\",{\"1\":{\"3879\":2,\"3903\":1,\"3912\":1,\"6034\":2,\"6050\":1,\"6059\":1}}],[\"cached\",{\"1\":{\"3361\":1}}],[\"cache>\",{\"1\":{\"1140\":1}}],[\"cache\",{\"1\":{\"1138\":1,\"1699\":1,\"2230\":1,\"2232\":2,\"2234\":2,\"2235\":1,\"2236\":1,\"2248\":1,\"4099\":1,\"4102\":1,\"4104\":1,\"4106\":1,\"4145\":1,\"4148\":1,\"4151\":1,\"4669\":1,\"4671\":2,\"7188\":1,\"7190\":2}}],[\"ca11\",{\"1\":{\"1032\":1}}],[\"cheng\",{\"0\":{\"7298\":1}}],[\"checkout\",{\"1\":{\"3338\":1,\"3352\":1}}],[\"checked\",{\"0\":{\"463\":1,\"5358\":1},\"1\":{\"857\":1,\"5487\":1}}],[\"chang\",{\"0\":{\"7294\":1}}],[\"channel\",{\"1\":{\"4929\":1,\"4931\":1,\"4994\":1}}],[\"char\",{\"1\":{\"2773\":1,\"2783\":1,\"6442\":1,\"6452\":1}}],[\"charsets\",{\"1\":{\"425\":1,\"5316\":1}}],[\"chksm=bd125d3c8a65d42aaf58999c89b6a4749f092441335f3c96067d2d361b9af69ad4ff1b73504c\",{\"1\":{\"3930\":1,\"6074\":1}}],[\"chksm=9b897e92acfef7846cd7dcac24d46c05ef0fabe5187befa0216b986f232d681c948b9deba26e\",{\"1\":{\"3727\":1,\"5929\":1}}],[\"chksm=fbb120f8ccc6a9eecd9a0cc3aff335b12c88b3e9fa041008c1d970fe5f0bf564ca94e37946c1\",{\"1\":{\"3702\":1,\"5824\":1}}],[\"chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34\",{\"1\":{\"1368\":1,\"5646\":1}}],[\"chmod\",{\"1\":{\"3411\":2}}],[\"choose\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"c\",{\"0\":{\"1762\":1},\"1\":{\"431\":1,\"444\":9,\"491\":1,\"1413\":1,\"1417\":1,\"1418\":1,\"1752\":1,\"1764\":2,\"1815\":2,\"1897\":1,\"1993\":1,\"2377\":1,\"2900\":2,\"2901\":1,\"2902\":1,\"3100\":3,\"3102\":1,\"3298\":1,\"3403\":1,\"3419\":3,\"3424\":1,\"3449\":2,\"3550\":1,\"3700\":1,\"3736\":1,\"4646\":1,\"4647\":1,\"4649\":2,\"4651\":1,\"5322\":1,\"5337\":9,\"5378\":1,\"5869\":1,\"5967\":1,\"6083\":1,\"6219\":1,\"6220\":1,\"6222\":2,\"6224\":1,\"6282\":1,\"6339\":1,\"6342\":2,\"6361\":1,\"6572\":2,\"6573\":1,\"6574\":1,\"6756\":3,\"6758\":1}}],[\"clh\",{\"1\":{\"3642\":1,\"3643\":3,\"3644\":1,\"5883\":1,\"5884\":3,\"5885\":1}}],[\"clustered\",{\"1\":{\"2796\":1,\"2805\":1,\"6468\":1,\"6477\":1}}],[\"cluster\",{\"1\":{\"1466\":4,\"6914\":4}}],[\"cli是一个命令行使用spring\",{\"1\":{\"1363\":1,\"5688\":1}}],[\"cli\",{\"1\":{\"1361\":1,\"5686\":1}}],[\"clienthello\",{\"1\":{\"2318\":1,\"2319\":1}}],[\"client\",{\"1\":{\"348\":1,\"357\":1,\"1840\":1,\"2322\":1,\"2337\":1,\"2527\":1,\"2528\":1,\"3299\":1,\"3300\":1,\"4860\":1,\"4926\":1,\"4938\":1,\"4986\":2,\"6085\":1,\"6086\":1,\"6282\":1,\"6372\":1}}],[\"clear\",{\"1\":{\"824\":1,\"3775\":1}}],[\"cloud全家桶技术\",{\"1\":{\"4659\":1,\"7178\":1}}],[\"cloud<\",{\"1\":{\"4545\":1}}],[\"cloud在feign的基础上支持了springmvc的注解\",{\"1\":{\"4542\":1}}],[\"cloud组件中一个轻量级restful的http服务客户端\",{\"1\":{\"4541\":1}}],[\"cloud项目部署架构\",{\"1\":{\"4514\":1,\"6131\":1}}],[\"cloud的呢\",{\"1\":{\"4491\":1,\"6124\":1}}],[\"cloud的优缺点以及组件\",{\"0\":{\"4487\":1,\"6120\":1}}],[\"cloud的感受\",{\"1\":{\"4458\":1}}],[\"cloud并没有重复制造轮子\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"cloud是一系列框架的有序集合\",{\"1\":{\"4463\":1,\"6096\":1}}],[\"cloud你用过的组件\",{\"1\":{\"4329\":1,\"7154\":1}}],[\"cloud\",{\"0\":{\"4461\":1,\"4462\":1,\"4543\":1,\"6093\":1,\"6094\":1,\"6095\":1,\"7308\":1},\"1\":{\"1334\":1,\"2069\":1,\"3329\":1,\"4494\":1,\"4495\":1,\"4505\":1,\"4506\":1,\"4507\":1,\"4508\":1,\"4509\":1,\"4510\":1,\"4511\":1,\"4512\":1,\"4513\":1,\"4534\":1,\"4545\":1,\"4554\":1,\"4654\":1,\"4658\":1,\"4660\":1,\"4860\":2,\"4929\":1,\"4933\":1,\"4938\":2,\"5656\":1,\"5774\":1,\"6126\":2,\"6130\":9,\"7173\":1,\"7177\":1,\"7179\":1}}],[\"clone\",{\"1\":{\"790\":1,\"792\":1,\"793\":1,\"3338\":1}}],[\"close\",{\"0\":{\"2631\":1},\"1\":{\"480\":4,\"1147\":1,\"1617\":1,\"2111\":2,\"2431\":1,\"2438\":1,\"2526\":1,\"2595\":1,\"2599\":1,\"2600\":1,\"2632\":1,\"4750\":1,\"5727\":1}}],[\"clazzb\",{\"1\":{\"1256\":3,\"5608\":3}}],[\"clazza\",{\"1\":{\"1256\":4,\"5608\":4}}],[\"clazz\",{\"1\":{\"513\":2,\"5401\":2}}],[\"class以及synchronized修饰的是static方法的时候\",{\"1\":{\"3731\":1}}],[\"classes\",{\"1\":{\"3581\":1}}],[\"classes配置\",{\"1\":{\"1342\":1,\"5666\":1}}],[\"class对象就可以对它为所欲为了\",{\"1\":{\"524\":1,\"5412\":1}}],[\"classname\",{\"1\":{\"513\":2,\"5401\":2}}],[\"classnotfoundexception\",{\"1\":{\"444\":2,\"5337\":2}}],[\"class<hashmap>\",{\"1\":{\"519\":1,\"5407\":1}}],[\"class<\",{\"1\":{\"431\":1,\"444\":1,\"521\":1,\"523\":1,\"527\":1,\"530\":1,\"901\":1,\"975\":1,\"980\":3,\"993\":1,\"5322\":1,\"5337\":1,\"5409\":1,\"5411\":1,\"5415\":1,\"5418\":1,\"5519\":1}}],[\"classpath\",{\"1\":{\"427\":1,\"4826\":1,\"4974\":1,\"5318\":1}}],[\"class\",{\"1\":{\"281\":1,\"287\":1,\"290\":1,\"412\":2,\"413\":1,\"419\":2,\"428\":1,\"431\":1,\"432\":1,\"444\":1,\"491\":1,\"513\":2,\"516\":1,\"518\":2,\"519\":1,\"520\":1,\"522\":2,\"523\":1,\"526\":1,\"527\":1,\"530\":1,\"541\":1,\"543\":1,\"546\":1,\"548\":1,\"858\":2,\"888\":1,\"891\":1,\"1097\":1,\"1256\":3,\"1325\":3,\"1329\":1,\"1380\":3,\"2177\":1,\"2182\":1,\"2185\":1,\"3735\":1,\"3736\":2,\"3746\":1,\"3748\":1,\"3762\":1,\"3772\":2,\"3786\":1,\"3855\":1,\"3963\":1,\"3965\":1,\"3967\":1,\"3975\":1,\"3977\":3,\"3979\":1,\"4029\":1,\"4031\":1,\"4034\":1,\"4548\":1,\"4755\":1,\"4857\":2,\"4860\":2,\"4919\":1,\"4921\":1,\"4923\":1,\"4931\":1,\"4935\":1,\"4938\":2,\"4981\":2,\"4986\":2,\"4994\":1,\"4997\":1,\"4999\":2,\"5011\":1,\"5302\":2,\"5303\":1,\"5310\":2,\"5319\":1,\"5322\":1,\"5323\":1,\"5337\":1,\"5378\":1,\"5401\":2,\"5404\":1,\"5406\":2,\"5407\":1,\"5408\":1,\"5410\":2,\"5411\":1,\"5414\":1,\"5415\":1,\"5418\":1,\"5425\":2,\"5427\":2,\"5488\":2,\"5506\":1,\"5509\":1,\"5608\":3,\"5650\":1,\"5651\":3,\"5797\":1,\"5966\":1,\"5967\":2,\"5977\":1,\"5980\":1,\"5993\":1,\"6009\":1}}],[\"classloader的子类重写\",{\"1\":{\"435\":1,\"5326\":1}}],[\"classloader抽象类\",{\"1\":{\"429\":1,\"5320\":1}}],[\"classloader\",{\"1\":{\"177\":1,\"181\":1,\"417\":1,\"418\":1,\"422\":1,\"424\":1,\"430\":1,\"434\":1,\"436\":1,\"439\":1,\"441\":1,\"443\":1,\"901\":1,\"5286\":1,\"5290\":1,\"5308\":1,\"5309\":1,\"5313\":1,\"5315\":1,\"5321\":1,\"5325\":1,\"5327\":1,\"5331\":1,\"5333\":1,\"5336\":1,\"5519\":1}}],[\"cn\",{\"1\":{\"293\":1,\"1310\":1,\"1368\":1,\"3753\":1,\"3790\":1,\"3930\":1,\"4590\":1,\"5640\":1,\"5646\":1,\"5801\":1,\"5985\":1,\"6074\":1}}],[\"covering\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"cookie\",{\"1\":{\"2277\":1,\"2278\":2,\"4815\":1,\"7212\":1}}],[\"copyproperties是浅拷贝\",{\"1\":{\"5106\":1}}],[\"copyproperties\",{\"1\":{\"4857\":1,\"4984\":1,\"4999\":1}}],[\"copy\",{\"1\":{\"1806\":1,\"3961\":1,\"3963\":1,\"3965\":1,\"3967\":1,\"3975\":1,\"3977\":1,\"3979\":1,\"4029\":1,\"4031\":1,\"4034\":1,\"6313\":1}}],[\"copyof方法最终调用native方法进行新数组创建和数据拷贝\",{\"1\":{\"801\":1}}],[\"core\",{\"1\":{\"3857\":1,\"4857\":1,\"4997\":1,\"6011\":1}}],[\"corepoolsize\",{\"1\":{\"3857\":8,\"3859\":1,\"3863\":1,\"6011\":8,\"6013\":1,\"6017\":1}}],[\"corsregistry\",{\"1\":{\"1398\":1}}],[\"correctstack\",{\"1\":{\"621\":1}}],[\"countdownlatch等\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"counts\",{\"1\":{\"3581\":1}}],[\"counter\",{\"1\":{\"1466\":6,\"6914\":6}}],[\"count\",{\"1\":{\"787\":1,\"1797\":1,\"6302\":1}}],[\"collect\",{\"1\":{\"4857\":2,\"4999\":2}}],[\"collectors\",{\"1\":{\"4857\":3,\"4999\":3}}],[\"collections中的一个静态内部类\",{\"1\":{\"804\":1}}],[\"collections\",{\"1\":{\"744\":1,\"808\":1,\"1474\":1,\"6923\":1}}],[\"collection接口在java\",{\"1\":{\"742\":1}}],[\"collection\",{\"1\":{\"742\":1,\"4999\":1}}],[\"color=auto\",{\"1\":{\"3424\":2}}],[\"color\",{\"1\":{\"83\":1,\"3559\":1,\"5196\":1}}],[\"com对应的ip是啥呀\",{\"1\":{\"2394\":1,\"7098\":1}}],[\"comment\",{\"1\":{\"4999\":1}}],[\"command\",{\"1\":{\"3417\":1}}],[\"commandlinerunner\",{\"1\":{\"1390\":1}}],[\"commons\",{\"1\":{\"4857\":1,\"4981\":1,\"4986\":1}}],[\"common\",{\"1\":{\"2177\":2,\"2182\":2,\"2185\":2,\"4857\":7,\"4929\":1,\"4931\":1,\"4933\":1,\"4935\":1,\"4981\":1,\"4986\":2,\"4994\":1,\"4999\":3}}],[\"commit到master分支\",{\"1\":{\"3369\":1}}],[\"commit就是往master分支上提交更改\",{\"1\":{\"3367\":1}}],[\"commit提交更改\",{\"1\":{\"3366\":1}}],[\"commit的区别\",{\"0\":{\"3364\":1}}],[\"commita提交失败但commitb提交成功\",{\"1\":{\"1616\":1}}],[\"commitasync\",{\"1\":{\"1380\":1,\"1613\":1,\"1617\":1}}],[\"commitfailedexception\",{\"1\":{\"1610\":1}}],[\"commitsync\",{\"1\":{\"1608\":1,\"1609\":1,\"1610\":1,\"1617\":1}}],[\"commit设置为false\",{\"1\":{\"1608\":1}}],[\"commit被设置为false可以有以下三种提交方式\",{\"1\":{\"1603\":1}}],[\"commit被设置为true\",{\"1\":{\"1602\":1}}],[\"committed\",{\"1\":{\"1231\":1,\"1233\":1,\"2998\":1,\"5583\":1,\"5585\":1,\"6670\":1}}],[\"commit\",{\"1\":{\"1134\":1,\"1147\":1,\"2737\":1,\"3338\":2,\"3358\":1,\"4606\":1,\"4607\":1,\"4609\":1,\"4623\":2,\"4627\":2,\"5713\":1,\"5727\":1,\"6200\":2,\"6205\":2,\"6406\":1}}],[\"com\",{\"1\":{\"625\":1,\"1190\":1,\"1368\":1,\"1522\":1,\"2069\":1,\"2085\":1,\"2091\":1,\"2096\":1,\"2111\":1,\"2177\":3,\"2182\":2,\"2185\":3,\"2386\":1,\"2387\":1,\"2389\":1,\"2390\":2,\"2391\":4,\"2392\":1,\"2393\":1,\"2394\":1,\"3338\":1,\"3660\":1,\"3702\":1,\"3727\":1,\"3855\":1,\"3930\":1,\"4031\":2,\"4748\":2,\"4750\":1,\"4826\":1,\"4857\":22,\"4859\":1,\"4860\":6,\"4921\":1,\"4929\":2,\"4931\":4,\"4933\":3,\"4935\":5,\"4938\":6,\"4974\":1,\"4981\":4,\"4986\":4,\"4992\":1,\"4994\":4,\"4997\":3,\"4999\":11,\"5103\":1,\"5646\":1,\"5774\":1,\"5824\":1,\"5872\":1,\"5929\":1,\"6009\":1,\"6074\":1,\"6283\":1,\"6392\":1,\"7081\":1,\"7083\":1,\"7084\":2,\"7087\":1,\"7088\":1,\"7093\":1,\"7094\":2,\"7095\":4,\"7096\":1,\"7097\":1,\"7098\":1}}],[\"computescore\",{\"1\":{\"4999\":2}}],[\"computehotarticlejob\",{\"1\":{\"4996\":1,\"4997\":2}}],[\"computehotarticle\",{\"1\":{\"4992\":1,\"4997\":1,\"4999\":3}}],[\"comparing\",{\"1\":{\"4999\":1}}],[\"comparator\",{\"1\":{\"4274\":1,\"4999\":2}}],[\"compareandset\",{\"1\":{\"5943\":1}}],[\"compareandse方法首先检查当前引用是否等于预期引用\",{\"1\":{\"3689\":1,\"5859\":1}}],[\"compareandswap\",{\"1\":{\"3826\":1}}],[\"compare和swap\",{\"1\":{\"3677\":1,\"5846\":1}}],[\"compare\",{\"1\":{\"3667\":1,\"3672\":1,\"3699\":1,\"5830\":1,\"5838\":1,\"5868\":1}}],[\"compatibility\",{\"1\":{\"596\":1}}],[\"compression\",{\"1\":{\"1568\":1,\"7068\":1}}],[\"completed\",{\"1\":{\"3926\":1}}],[\"completedfuture\",{\"1\":{\"1380\":1}}],[\"completablefuture\",{\"1\":{\"1380\":1}}],[\"completablefuture<crawltask>\",{\"1\":{\"1380\":1}}],[\"component修饰的类\",{\"1\":{\"4182\":1}}],[\"component把监听器加入spring容器中管理\",{\"1\":{\"1341\":1,\"5665\":1}}],[\"componentscan\",{\"1\":{\"1298\":1,\"4921\":1}}],[\"component\",{\"1\":{\"875\":2,\"1380\":1,\"2177\":2,\"2185\":2,\"4919\":1,\"4981\":2,\"4986\":2,\"4997\":2}}],[\"composition\",{\"1\":{\"579\":1,\"593\":1}}],[\"code\",{\"1\":{\"491\":1,\"790\":1,\"812\":1,\"908\":1,\"3857\":12,\"3961\":1,\"3963\":1,\"3965\":1,\"3967\":1,\"3975\":1,\"3977\":1,\"3979\":1,\"4029\":1,\"4031\":1,\"4034\":1,\"5378\":1,\"6011\":12}}],[\"condition\",{\"1\":{\"2821\":1,\"3527\":1,\"3653\":1,\"3783\":1,\"5794\":1,\"5896\":1,\"6493\":1}}],[\"conditional动态加载配置类里面的bean到容器\",{\"1\":{\"1309\":1}}],[\"conditionalonmissingbean等\",{\"1\":{\"1304\":1}}],[\"conditionalonclass\",{\"1\":{\"1304\":1}}],[\"conditional\",{\"1\":{\"1303\":1}}],[\"conditional按需加载的配置类\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"conflict\",{\"1\":{\"7062\":1}}],[\"conf\",{\"1\":{\"3146\":1,\"3217\":1,\"6802\":1}}],[\"confusion\",{\"1\":{\"2538\":1}}],[\"config\",{\"1\":{\"1551\":1,\"1564\":1,\"1568\":1,\"3498\":1,\"3505\":1,\"4507\":1,\"4821\":1,\"4826\":1,\"4854\":1,\"4926\":1,\"4969\":1,\"4974\":1,\"6130\":1,\"7243\":1}}],[\"configurecontentnegotiation\",{\"1\":{\"1398\":1}}],[\"configureviewresolvers\",{\"1\":{\"1398\":1}}],[\"configurer\",{\"1\":{\"1398\":2}}],[\"configuredefaultservlethandling\",{\"1\":{\"1398\":1}}],[\"configuration和\",{\"1\":{\"1298\":1}}],[\"configuration\",{\"1\":{\"1138\":1,\"1380\":1,\"3197\":1,\"4034\":1,\"4750\":1,\"4921\":1}}],[\"config配置中心时\",{\"1\":{\"1334\":1,\"5656\":1}}],[\"connecttimeout\",{\"1\":{\"4926\":1}}],[\"connections\",{\"1\":{\"6989\":1,\"7071\":1}}],[\"connection\",{\"1\":{\"2216\":2,\"2538\":1}}],[\"conn\",{\"1\":{\"2111\":2,\"4910\":3}}],[\"context\",{\"1\":{\"4860\":1,\"4938\":1}}],[\"content\",{\"1\":{\"2087\":1,\"2088\":1,\"2091\":2,\"2092\":2,\"2093\":1,\"2094\":2,\"2096\":2,\"2099\":2,\"2197\":1,\"2198\":1,\"2215\":2,\"2217\":1,\"4821\":1,\"4855\":1,\"4857\":10,\"4969\":1,\"4984\":2,\"7062\":1,\"7244\":1}}],[\"contentnegotiationconfigurer\",{\"1\":{\"1398\":1}}],[\"container\",{\"1\":{\"3295\":2,\"3307\":4,\"3312\":1}}],[\"contains\",{\"1\":{\"3048\":1}}],[\"control\",{\"1\":{\"1860\":1,\"2230\":1,\"2232\":2,\"2234\":2,\"2235\":1,\"2236\":1,\"2248\":1}}],[\"controller会读取注册上来的从节点的数据\",{\"1\":{\"4564\":1}}],[\"controlleradvice\",{\"1\":{\"1325\":1,\"5647\":1,\"5651\":1}}],[\"controlleradvice注解标注该类是一个全局异常处理类\",{\"1\":{\"1316\":1}}],[\"controller\",{\"1\":{\"1199\":1,\"1215\":1,\"1322\":1,\"4123\":1,\"5551\":1,\"5567\":1,\"5648\":1}}],[\"continue\",{\"1\":{\"1474\":1,\"6923\":1,\"7062\":1}}],[\"concretedecorator\",{\"1\":{\"875\":1}}],[\"concrete\",{\"1\":{\"875\":1}}],[\"concurrent包中\",{\"1\":{\"3680\":1,\"5849\":1}}],[\"concurrenthashmap为什么用红黑树\",{\"1\":{\"4330\":1,\"7155\":1}}],[\"concurrenthashmap\",{\"1\":{\"1061\":1,\"1063\":1,\"1074\":1}}],[\"concurrenthashmap同理\",{\"1\":{\"1008\":1}}],[\"concurrenthashmap在每一个分段上都用锁进行了保护\",{\"1\":{\"950\":1}}],[\"concurrenthashmap对桶数组进行了分段\",{\"1\":{\"949\":1}}],[\"concurrenthashmap和hashmap的实现方式不一样\",{\"1\":{\"949\":1}}],[\"concurrenthashmap区别\",{\"0\":{\"948\":1}}],[\"concurrenthashmap虽然也是线程安全的\",{\"1\":{\"943\":1}}],[\"concurrentmodificationexception\",{\"1\":{\"787\":1}}],[\"concurrent\",{\"1\":{\"361\":1,\"3753\":2,\"3772\":3,\"3790\":2,\"3855\":4,\"3930\":2,\"4187\":1,\"5801\":2,\"5985\":2,\"6009\":4,\"6074\":2}}],[\"consumerrecords<string\",{\"1\":{\"1610\":1,\"1613\":1,\"1617\":1}}],[\"consumerrecord<string\",{\"1\":{\"1380\":1,\"1610\":1,\"1613\":1,\"1617\":1}}],[\"consumer从mq里面读取数据是有序的\",{\"1\":{\"1505\":1,\"6960\":1}}],[\"consumerswithextrapartition\",{\"1\":{\"1474\":3,\"6923\":3}}],[\"consumersfortopic\",{\"1\":{\"1474\":6,\"6923\":6}}],[\"consumerspertopic\",{\"1\":{\"1474\":3,\"6923\":3}}],[\"consumer\",{\"1\":{\"1380\":3,\"1407\":1,\"1438\":1,\"1439\":2,\"1580\":1,\"1591\":1,\"1610\":2,\"1613\":2,\"1617\":4,\"4674\":1,\"7193\":1}}],[\"consumecrawltask\",{\"1\":{\"1380\":1}}],[\"conscious\",{\"1\":{\"812\":1}}],[\"consistency\",{\"1\":{\"790\":1,\"2972\":1,\"4637\":1,\"4639\":1,\"6209\":1,\"6212\":1,\"6644\":1}}],[\"constuctor\",{\"1\":{\"545\":1,\"5427\":1}}],[\"constructor<\",{\"1\":{\"530\":1,\"5418\":1}}],[\"constructor\",{\"1\":{\"513\":3,\"529\":1,\"530\":3,\"531\":2,\"544\":1,\"545\":1,\"547\":2,\"5401\":3,\"5417\":1,\"5418\":3,\"5419\":2,\"5426\":1,\"5427\":3}}],[\"constants\",{\"1\":{\"1380\":4,\"4981\":1,\"4986\":1,\"4999\":1}}],[\"constant\",{\"1\":{\"281\":2,\"287\":1}}],[\"const\",{\"1\":{\"47\":1,\"5160\":1}}],[\"写硬盘成功后再向\",{\"1\":{\"4605\":1}}],[\"写到硬盘\",{\"1\":{\"4605\":1}}],[\"写的情况下\",{\"1\":{\"4574\":1}}],[\"写写\",{\"1\":{\"5952\":1}}],[\"写写则是互斥的\",{\"1\":{\"3836\":1}}],[\"写写的则是互斥的\",{\"1\":{\"3833\":1,\"5949\":1}}],[\"写写互斥的\",{\"1\":{\"2914\":1,\"6586\":1}}],[\"写读\",{\"1\":{\"3833\":1,\"3836\":1,\"5949\":1,\"5952\":1}}],[\"写\",{\"1\":{\"3713\":1,\"4100\":1,\"4561\":3,\"6161\":3}}],[\"写进程通过写入端\",{\"1\":{\"3468\":1}}],[\"写操作具有原子性\",{\"1\":{\"3713\":1}}],[\"写操作\",{\"1\":{\"3230\":1,\"4669\":1,\"7188\":1}}],[\"写冲突不加锁\",{\"1\":{\"3025\":1}}],[\"写锁等待\",{\"1\":{\"2903\":1,\"6575\":1}}],[\"写锁\",{\"0\":{\"3835\":1,\"5951\":1},\"1\":{\"2891\":1,\"2893\":1,\"2894\":2,\"2900\":1,\"2902\":1,\"5952\":1,\"6563\":1,\"6565\":1,\"6566\":2,\"6572\":1,\"6574\":1}}],[\"写入系统内核缓冲区之后直接返回\",{\"1\":{\"3167\":1,\"6823\":1}}],[\"写入文件或进行其他处理\",{\"1\":{\"2111\":1}}],[\"写入的是不同的物理地址\",{\"1\":{\"1630\":1}}],[\"写库需要400ms\",{\"1\":{\"1417\":1}}],[\"写库需要\",{\"1\":{\"1417\":2}}],[\"写在前面\",{\"0\":{\"149\":1,\"5262\":1}}],[\"写作日期为\",{\"1\":{\"119\":1,\"5232\":1}}],[\"ff\",{\"1\":{\"7038\":6}}],[\"f4108e1816b3087f38b546372e214958\",{\"1\":{\"6921\":1}}],[\"f4|uniq\",{\"1\":{\"5021\":1}}],[\"f30aa7a662c728b7407c54ae6bfd27d1\",{\"1\":{\"5059\":1}}],[\"ftl\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"ftp工具等方便您管理oss资源\",{\"1\":{\"4730\":1}}],[\"ftp\",{\"1\":{\"2505\":1,\"3458\":1}}],[\"feign远程调用\",{\"1\":{\"6151\":1}}],[\"feign远程调用的基本流程\",{\"0\":{\"6150\":1},\"1\":{\"4536\":1,\"6151\":1}}],[\"feign失败配置\",{\"1\":{\"4919\":1}}],[\"feignclient中的value是要调用的服务的注册名\",{\"1\":{\"4549\":1}}],[\"feignclient来注解一个interface\",{\"1\":{\"4547\":1}}],[\"feignclient\",{\"1\":{\"4546\":1,\"4548\":1,\"4923\":1,\"4929\":2,\"4933\":2}}],[\"feignclient可以解析springmvc的\",{\"1\":{\"4542\":1}}],[\"feignclient注解的接口\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"feign的使用方式是\",{\"1\":{\"4541\":1}}],[\"feign内置了ribbon\",{\"1\":{\"4541\":1}}],[\"feign是spring\",{\"1\":{\"4541\":1}}],[\"feign会进行包扫描\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"feign通过处理注解\",{\"1\":{\"4537\":1,\"6153\":1}}],[\"feign\",{\"1\":{\"4510\":1,\"4532\":1,\"4534\":3,\"4858\":1,\"4918\":1,\"4926\":1,\"4931\":1,\"4935\":1,\"4994\":1,\"6130\":1,\"6149\":1}}],[\"fetch和git\",{\"0\":{\"3370\":1}}],[\"fetch\",{\"1\":{\"3338\":1,\"3372\":3,\"3374\":1}}],[\"fgct\",{\"1\":{\"3617\":1}}],[\"fgc\",{\"1\":{\"3616\":1}}],[\"f强制推送到远程\",{\"1\":{\"3350\":1}}],[\"fsync用于强制刷新系统内核缓冲区\",{\"1\":{\"3168\":1,\"6824\":1}}],[\"fsync\",{\"1\":{\"3162\":5,\"3168\":1,\"6818\":5,\"6824\":1}}],[\"fsync策略\",{\"1\":{\"3155\":1,\"6811\":1}}],[\"fpp\",{\"1\":{\"2177\":3,\"2182\":2,\"2185\":3}}],[\"fcfs\",{\"1\":{\"1915\":1}}],[\"fd\",{\"1\":{\"1770\":1,\"1797\":2,\"1952\":1,\"6302\":2}}],[\"funnels\",{\"1\":{\"2177\":2,\"2182\":2,\"2185\":2}}],[\"futurekey\",{\"1\":{\"4895\":5}}],[\"futurekeys\",{\"1\":{\"4895\":2}}],[\"future\",{\"1\":{\"1517\":2,\"4895\":3}}],[\"fullgc\",{\"1\":{\"3616\":1,\"3617\":1}}],[\"fullgc是发生在老年代的\",{\"1\":{\"385\":1}}],[\"fullresync\",{\"1\":{\"3233\":2}}],[\"full\",{\"1\":{\"370\":1,\"2794\":1,\"3544\":2,\"3545\":1,\"3561\":1,\"6465\":1}}],[\"flag\",{\"1\":{\"3028\":1,\"3484\":1,\"4857\":15,\"6694\":1}}],[\"flushbuffer\",{\"1\":{\"3527\":3}}],[\"flush\",{\"1\":{\"2854\":1,\"3527\":1,\"6526\":1}}],[\"flushinterval\",{\"1\":{\"1140\":1}}],[\"float\",{\"1\":{\"967\":1,\"3073\":1,\"6724\":1}}],[\"fallback\",{\"1\":{\"4548\":1,\"4921\":1,\"4923\":1}}],[\"false\",{\"1\":{\"444\":1,\"1140\":1,\"2182\":1,\"2824\":1,\"3654\":1,\"3655\":1,\"3657\":1,\"3789\":1,\"4857\":7,\"4910\":1,\"5017\":1,\"5337\":1,\"5800\":1,\"5897\":1,\"5898\":1,\"5900\":1,\"6496\":1}}],[\"fair\",{\"1\":{\"3789\":2,\"5800\":2}}],[\"fairsync\",{\"1\":{\"3787\":1,\"3789\":1,\"5798\":1,\"5800\":1}}],[\"failover\",{\"1\":{\"3196\":1}}],[\"failureanalyzers\",{\"1\":{\"1386\":1}}],[\"fail的\",{\"1\":{\"946\":1}}],[\"fail\",{\"1\":{\"941\":3,\"5934\":1}}],[\"fail机制的\",{\"1\":{\"946\":1}}],[\"fail机制\",{\"1\":{\"788\":1,\"796\":1}}],[\"factory\",{\"1\":{\"2177\":1,\"2185\":1,\"3857\":1,\"4857\":1,\"4910\":3,\"4931\":1,\"4935\":1,\"4981\":1,\"4986\":1,\"4994\":1,\"4997\":1,\"4999\":1,\"6011\":1}}],[\"factory的后置处理器\",{\"1\":{\"1388\":1}}],[\"factories配置文件\",{\"1\":{\"4233\":1}}],[\"factories配置文件中加载\",{\"1\":{\"1382\":1,\"1386\":1}}],[\"factories中的自动配置类\",{\"1\":{\"4232\":1}}],[\"factories中的自动配置类实现自动装配\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"factories都会被读取到\",{\"1\":{\"1295\":1,\"5638\":1}}],[\"factories被读取到\",{\"1\":{\"1295\":1,\"5638\":1}}],[\"factories\",{\"1\":{\"1293\":1,\"1294\":1,\"1308\":1,\"5636\":2}}],[\"factories文件中配置的自动配置类\",{\"1\":{\"1300\":1}}],[\"factories文件\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"factor\",{\"1\":{\"967\":1}}],[\"factor和default\",{\"1\":{\"961\":1}}],[\"fastjson\",{\"1\":{\"4857\":1,\"4981\":1,\"4986\":1,\"4999\":1}}],[\"fast迭代器\",{\"1\":{\"945\":1}}],[\"fast\",{\"1\":{\"941\":1,\"5934\":1}}],[\"following\",{\"1\":{\"3857\":1,\"4616\":1,\"4619\":1,\"6011\":1,\"6189\":1,\"6192\":1}}],[\"follower跟随者\",{\"1\":{\"4631\":1,\"6174\":1}}],[\"follower不能处理事务请求\",{\"1\":{\"4602\":1}}],[\"followers\",{\"1\":{\"4597\":1,\"6181\":1}}],[\"follower\",{\"1\":{\"1443\":1,\"1445\":2,\"1531\":1,\"4586\":2,\"4587\":2,\"4596\":1,\"4597\":1,\"4600\":1,\"4602\":1,\"4604\":1,\"4605\":1,\"4606\":1,\"4607\":1,\"4608\":2,\"4609\":1,\"4610\":2,\"4616\":1,\"4617\":1,\"4619\":1,\"4620\":1,\"4627\":2,\"4633\":1,\"4634\":1,\"6170\":1,\"6176\":1,\"6177\":1,\"6180\":1,\"6181\":1,\"6189\":1,\"6190\":1,\"6192\":1,\"6193\":1,\"6197\":1,\"6205\":2}}],[\"followed\",{\"1\":{\"787\":1}}],[\"found\",{\"1\":{\"2201\":1,\"2207\":1,\"3629\":1}}],[\"force\",{\"1\":{\"3408\":1}}],[\"fork\",{\"1\":{\"3151\":1,\"6807\":1}}],[\"forbidden\",{\"1\":{\"2206\":1}}],[\"format=b\",{\"1\":{\"3566\":2,\"3567\":1}}],[\"format\",{\"1\":{\"2935\":1,\"6607\":1}}],[\"form\",{\"1\":{\"2093\":1}}],[\"forget\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"for循环对订阅的多个topic分别进行处理\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"for\",{\"1\":{\"634\":2,\"787\":1,\"1474\":3,\"1610\":1,\"1613\":1,\"1617\":1,\"1625\":1,\"2538\":1,\"2912\":1,\"2939\":1,\"3013\":2,\"3022\":1,\"3581\":1,\"3772\":1,\"3775\":1,\"3857\":3,\"3925\":1,\"4857\":2,\"4895\":1,\"4999\":2,\"6011\":3,\"6584\":1,\"6611\":1,\"6685\":2,\"6923\":3}}],[\"forname\",{\"1\":{\"513\":1,\"522\":1,\"523\":1,\"527\":1,\"530\":1,\"5401\":1,\"5410\":1,\"5411\":1,\"5415\":1,\"5418\":1}}],[\"foo\",{\"0\":{\"146\":1,\"166\":1,\"5259\":1,\"5274\":1},\"1\":{\"168\":1,\"5276\":1}}],[\"f2\",{\"1\":{\"486\":1}}],[\"f\",{\"1\":{\"486\":1,\"1413\":1,\"3408\":1,\"3413\":1,\"3419\":4}}],[\"fixedthreadpool\",{\"1\":{\"3878\":1,\"3901\":1,\"3911\":1,\"6033\":1,\"6048\":1,\"6058\":1}}],[\"fish\",{\"1\":{\"3445\":1}}],[\"fiu\",{\"1\":{\"3408\":1}}],[\"filter过滤器可以处理更底层的请求信息\",{\"1\":{\"4040\":1}}],[\"filter\",{\"1\":{\"2148\":1,\"2177\":4,\"2185\":4,\"4999\":1}}],[\"filestorageservice\",{\"1\":{\"4857\":4}}],[\"file>\",{\"1\":{\"3575\":1}}],[\"file=heap\",{\"1\":{\"3566\":2}}],[\"fileoutputstream\",{\"1\":{\"3527\":3}}],[\"filename\",{\"1\":{\"3403\":1,\"3411\":2,\"3413\":2,\"3415\":2,\"3417\":1,\"3419\":2,\"3424\":1}}],[\"filenotfoundexception\",{\"1\":{\"472\":1,\"478\":1,\"5367\":1,\"5373\":1}}],[\"file|dir\",{\"1\":{\"3395\":1}}],[\"file或者git\",{\"1\":{\"3338\":1}}],[\"fileutils\",{\"1\":{\"2096\":1}}],[\"filedata\",{\"1\":{\"2096\":3}}],[\"filepath\",{\"1\":{\"2096\":2}}],[\"filereader\",{\"1\":{\"480\":1}}],[\"fileinputstream\",{\"1\":{\"478\":2,\"5373\":2}}],[\"file\",{\"1\":{\"478\":5,\"1787\":1,\"2096\":5,\"2111\":1,\"3142\":1,\"3153\":1,\"3567\":1,\"4857\":1,\"5373\":5,\"6291\":1,\"6798\":1,\"6809\":1}}],[\"fir\",{\"1\":{\"3401\":1}}],[\"fire\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"firstvalue\",{\"1\":{\"3768\":1,\"5999\":1}}],[\"firstkey\",{\"1\":{\"3768\":1,\"5999\":1}}],[\"first\",{\"1\":{\"372\":1,\"1756\":1,\"1917\":1,\"1970\":2,\"2715\":1,\"4999\":2,\"6251\":2,\"7010\":1}}],[\"fifo队列\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"fifo\",{\"1\":{\"1140\":1,\"1721\":1,\"1950\":1,\"1972\":1,\"4610\":1,\"6253\":1}}],[\"fields\",{\"1\":{\"790\":4}}],[\"field\",{\"1\":{\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"975\":1,\"993\":6,\"3130\":1,\"5422\":1,\"5423\":4,\"6786\":1}}],[\"fin\",{\"1\":{\"2450\":2,\"2594\":3,\"2596\":1,\"2597\":1,\"2598\":1,\"2601\":1,\"2604\":1,\"2606\":1,\"2608\":1,\"2610\":1,\"2612\":1,\"2614\":2,\"2615\":1,\"2637\":1}}],[\"final\",{\"1\":{\"790\":2,\"914\":1,\"967\":1,\"971\":1,\"1016\":1,\"1068\":1,\"1076\":1,\"3772\":2,\"5532\":1}}],[\"finally内的修改效果起了作用\",{\"1\":{\"486\":1}}],[\"finally内的修改效果不起作用\",{\"1\":{\"486\":1}}],[\"finally执行\",{\"1\":{\"486\":2}}],[\"finally\",{\"1\":{\"486\":2,\"1617\":2,\"4910\":1}}],[\"finally中的语句会在return之前执⾏\",{\"1\":{\"484\":1}}],[\"findarticlelistbylast5days\",{\"1\":{\"4999\":1}}],[\"findall\",{\"1\":{\"4931\":1,\"4994\":1}}],[\"find\",{\"1\":{\"3417\":2}}],[\"findbootstrapclassornull\",{\"1\":{\"444\":1,\"5337\":1}}],[\"findloadedclass\",{\"1\":{\"444\":1,\"5337\":1}}],[\"findclass\",{\"1\":{\"432\":1,\"434\":1,\"435\":1,\"436\":1,\"444\":1,\"449\":1,\"5323\":1,\"5325\":1,\"5326\":1,\"5327\":1,\"5337\":1,\"5342\":1}}],[\"freemarker\",{\"1\":{\"4298\":1,\"4840\":1,\"7123\":1,\"7229\":1}}],[\"free命令查看内存使用情况\",{\"1\":{\"4220\":1}}],[\"frequently\",{\"1\":{\"3188\":1,\"3189\":1,\"6846\":1,\"6847\":1}}],[\"from\",{\"1\":{\"253\":1,\"491\":1,\"494\":1,\"1127\":3,\"2538\":1,\"4748\":1,\"4910\":1,\"5378\":1,\"5381\":1,\"5708\":3}}],[\"front\",{\"1\":{\"151\":1,\"155\":1,\"5264\":1}}],[\"frontmatter\",{\"1\":{\"10\":1,\"33\":1,\"35\":2,\"117\":1,\"140\":1,\"5123\":1,\"5146\":1,\"5148\":2,\"5230\":1,\"5253\":1}}],[\"frames\",{\"1\":{\"7067\":1}}],[\"framework\",{\"0\":{\"7291\":1},\"1\":{\"1310\":1,\"5640\":1}}],[\"frame\",{\"1\":{\"210\":1}}],[\"此人要仔细保存私有密钥\",{\"1\":{\"5094\":1}}],[\"此策略将丢弃最早的未处理的任务请求\",{\"1\":{\"3873\":1,\"6028\":1}}],[\"此过程是原子性\",{\"1\":{\"3805\":1,\"5816\":1}}],[\"此过程不需要将数据从操作系统内核缓冲区拷贝到\",{\"1\":{\"1804\":1,\"6310\":1}}],[\"此后在调用快照读的时候\",{\"1\":{\"3055\":1}}],[\"此外\",{\"1\":{\"3028\":1,\"3449\":1,\"4116\":1,\"6694\":1}}],[\"此报文中的确认号是\",{\"1\":{\"2543\":1}}],[\"此方法主要用于在客户端和服务器之间通过网络进行通信\",{\"1\":{\"1975\":1,\"6256\":1}}],[\"此方法的调用是建议jvm进行full\",{\"1\":{\"402\":1}}],[\"此处非常重要\",{\"1\":{\"1182\":1}}],[\"此类不能实例化\",{\"1\":{\"744\":1}}],[\"此种情况会触发jvm进行fullgc\",{\"1\":{\"406\":1}}],[\"此种对象会直接进入老年代\",{\"1\":{\"406\":1}}],[\"此阶段其实也可以做到与用户程序一起并发执行\",{\"1\":{\"379\":1}}],[\"此区有大小限制\",{\"1\":{\"262\":1}}],[\"此时应该使用分布式id生成策略来生成id\",{\"1\":{\"4820\":1,\"4967\":1}}],[\"此时它肯定会作为\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"此时肯定要重新进行\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"此时同意了提案n1\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"此时从节点就各自创建好目录等待创建分区副本即可\",{\"1\":{\"4564\":1}}],[\"此时从库和主库间将进行全量复制\",{\"1\":{\"3243\":1}}],[\"此时只能有一个线程获得锁\",{\"1\":{\"3836\":1,\"5952\":1}}],[\"此时有多个线程同时来竞争锁\",{\"1\":{\"3801\":1,\"5813\":1}}],[\"此时对线程1来说\",{\"1\":{\"3673\":1,\"5840\":1}}],[\"此时一组权限的\",{\"1\":{\"3410\":1}}],[\"此时的本地仓库相当于集中式的远程仓库\",{\"1\":{\"3377\":1}}],[\"此时的提交位移为2000\",{\"1\":{\"1616\":1}}],[\"此时设为\",{\"1\":{\"3233\":1}}],[\"此时并没有同步到磁盘\",{\"1\":{\"3161\":1,\"6817\":1}}],[\"此时并不会阻塞\",{\"1\":{\"2899\":1,\"6571\":1}}],[\"此时还在选举阶段所以整个集群处于\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"此时还在系统内核缓存区为同步到磁盘\",{\"1\":{\"3155\":1,\"6811\":1}}],[\"此时还有事务1和事务3在活跃中\",{\"1\":{\"3050\":1}}],[\"此时查询到的记录数量有\",{\"1\":{\"2994\":1,\"6666\":1}}],[\"此时数据库超过\",{\"1\":{\"2993\":1,\"6665\":1}}],[\"此时数据就可以从缓存区清除\",{\"1\":{\"2652\":1}}],[\"此时由于线程\",{\"1\":{\"2900\":1,\"6572\":1}}],[\"此时就先对该表加上\",{\"1\":{\"2898\":1,\"6570\":1}}],[\"此时发送窗口的值是swnd\",{\"1\":{\"2670\":1}}],[\"此时会收到彼此的投票信息\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"此时会发送一个\",{\"1\":{\"2594\":1}}],[\"此时会重新放回幸存者\",{\"1\":{\"266\":1}}],[\"此时连接就已建立完成\",{\"1\":{\"2532\":1}}],[\"此时mq不会触发消息推送事件\",{\"1\":{\"2049\":1,\"5754\":1}}],[\"此时如果仍然使用上述方法对同一张图片进行缓存\",{\"1\":{\"2012\":1}}],[\"此时commita进行重试并成功的话\",{\"1\":{\"1616\":1}}],[\"此时用failureanalyzers来报告异常\",{\"1\":{\"1391\":1}}],[\"此时a也已实例化\",{\"1\":{\"1265\":1}}],[\"此时b已实例化\",{\"1\":{\"1264\":1}}],[\"此时将开始执行拦截器的\",{\"1\":{\"1198\":1,\"5550\":1}}],[\"此时得到了x\",{\"1\":{\"1024\":1}}],[\"此时x\",{\"1\":{\"1023\":1}}],[\"此时需要依赖于老年代进行分配担保\",{\"1\":{\"334\":1}}],[\"此时引用计数器永远不为\",{\"1\":{\"298\":1}}],[\"此时不再是常量池中的符号地址了\",{\"1\":{\"289\":1}}],[\"此时上次幸存下来的放到幸存者\",{\"1\":{\"265\":1}}],[\"此时\",{\"1\":{\"255\":1,\"691\":1,\"1185\":1,\"4615\":1,\"5018\":1,\"5458\":1,\"6188\":1}}],[\"此内存区域的唯一目的就是存放对象实例\",{\"1\":{\"222\":1}}],[\"此页面应当包含\",{\"1\":{\"130\":1,\"5243\":1}}],[\"此文字有脚注\",{\"1\":{\"70\":1,\"5183\":1}}],[\"徽章\",{\"1\":{\"128\":1,\"5241\":1}}],[\"徽章文字\",{\"1\":{\"128\":1,\"5241\":1}}],[\"标明当前方法是一个异步方法\",{\"1\":{\"4857\":1}}],[\"标明要异步调用\",{\"1\":{\"4846\":1,\"7235\":1}}],[\"标识\",{\"1\":{\"3747\":1,\"3751\":1,\"5979\":1,\"5983\":1}}],[\"标识各个进程\",{\"1\":{\"1864\":1}}],[\"标准中规定的各级隔离级别允许发生的现象却有些出入\",{\"1\":{\"3009\":1,\"6681\":1}}],[\"标准中规定的\",{\"1\":{\"3009\":1,\"6681\":1}}],[\"标准提出了四种隔离级别来规避这些现象\",{\"1\":{\"2996\":1,\"6668\":1}}],[\"标准定义了四个隔离级别\",{\"1\":{\"2737\":1,\"6406\":1}}],[\"标准资源都继承了这个接口\",{\"1\":{\"477\":1,\"5372\":1}}],[\"标示这个响应资源的最后修改时间\",{\"1\":{\"2241\":1}}],[\"标志位为00\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"标志位为01\",{\"1\":{\"3798\":1,\"5810\":1}}],[\"标志位被置为\",{\"1\":{\"2594\":1}}],[\"标志位置为\",{\"1\":{\"2527\":1,\"2528\":1,\"2529\":1}}],[\"标志\",{\"1\":{\"1384\":1}}],[\"标为\",{\"1\":{\"598\":1}}],[\"标量替换优化技术将会导致一些微妙的变化\",{\"1\":{\"277\":1}}],[\"标题和页面信息\",{\"1\":{\"132\":1,\"5245\":1}}],[\"标签为\",{\"1\":{\"121\":1,\"5234\":1}}],[\"标记为可读或可写\",{\"1\":{\"1768\":1}}],[\"标记该页是否存在等\",{\"1\":{\"1638\":1}}],[\"标记和清除过程效率都不高\",{\"1\":{\"326\":1}}],[\"标记\",{\"0\":{\"72\":1,\"5185\":1},\"1\":{\"339\":2,\"370\":1,\"381\":1}}],[\"日期或时间\",{\"1\":{\"3403\":1}}],[\"日志同步和安全性保证三大子问题\",{\"1\":{\"4585\":1}}],[\"日志记录了能体现该接口特性的\",{\"1\":{\"5009\":1}}],[\"日志记录\",{\"1\":{\"4023\":1}}],[\"日志进行\",{\"1\":{\"3625\":1}}],[\"日志中找出所有处于\",{\"1\":{\"3625\":1}}],[\"日志中\",{\"1\":{\"3624\":1}}],[\"日志格式要设置为\",{\"1\":{\"2934\":1,\"6606\":1}}],[\"日志\",{\"1\":{\"2131\":1}}],[\"日志采集等场景\",{\"1\":{\"1432\":1,\"4760\":1}}],[\"日志处理\",{\"1\":{\"1410\":1}}],[\"日志的拦截等\",{\"1\":{\"1403\":1}}],[\"日志信息\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"日志管理\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"日常开发几乎看不到使用静态代理的场景\",{\"1\":{\"890\":1,\"5508\":1}}],[\"日\",{\"1\":{\"119\":1,\"5232\":1}}],[\"月\",{\"1\":{\"119\":1,\"5232\":1}}],[\"年设计了基于\",{\"1\":{\"6989\":1}}],[\"年设计的\",{\"1\":{\"6989\":1}}],[\"年重写了之前的论文\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"年之后\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"年代\",{\"1\":{\"4599\":2,\"6183\":2}}],[\"年轻一代被分为三个部分\",{\"1\":{\"230\":1}}],[\"年轻代是所有新对象创建的地方\",{\"1\":{\"230\":1}}],[\"年轻代\",{\"1\":{\"224\":1}}],[\"年\",{\"1\":{\"119\":1,\"5232\":1,\"6989\":1}}],[\"↩︎\",{\"1\":{\"113\":1,\"5226\":1}}],[\"捐赠一杯咖啡\",{\"1\":{\"105\":1,\"5218\":1}}],[\"向下延伸\",{\"1\":{\"3476\":1,\"5741\":1}}],[\"向硬盘做同步操作\",{\"1\":{\"3162\":1,\"6818\":1}}],[\"向客户端发送最后的信息\",{\"1\":{\"2340\":1}}],[\"向客户端发出响应\",{\"1\":{\"2325\":1}}],[\"向服务器发送如下信息\",{\"1\":{\"2332\":1}}],[\"向\",{\"1\":{\"105\":1,\"1204\":1,\"1437\":1,\"5218\":1,\"5556\":1}}],[\"样式化\",{\"0\":{\"104\":1,\"5217\":1}}],[\"导致出现异常\",{\"1\":{\"3585\":1}}],[\"导致分析失败\",{\"1\":{\"3576\":1}}],[\"导致所有的请求都落到了数据库上\",{\"1\":{\"3276\":1,\"6881\":1}}],[\"导致大量的请求都直接落到了数据库上\",{\"1\":{\"3275\":1,\"6880\":1}}],[\"导致客户端无法和服务端建立连接\",{\"1\":{\"2588\":1}}],[\"导致应用对内存使用量增加\",{\"1\":{\"2133\":1}}],[\"导致对象一致引用\",{\"1\":{\"2121\":1}}],[\"导致流量飙升\",{\"1\":{\"2116\":1}}],[\"导致垃圾无法回收\",{\"1\":{\"2116\":1}}],[\"导致新的程序无法被装载\",{\"1\":{\"1651\":1}}],[\"导致消息重复消费\",{\"1\":{\"1616\":1}}],[\"导致在高峰期\",{\"1\":{\"1427\":1}}],[\"导致二级缓存失效\",{\"1\":{\"1151\":1,\"5731\":1}}],[\"导致⽣成多个实例\",{\"1\":{\"859\":1,\"5489\":1}}],[\"导致\",{\"1\":{\"369\":1,\"3544\":1}}],[\"导致无法给大对象分配内存\",{\"1\":{\"327\":1}}],[\"导致无法对它们进行回收\",{\"1\":{\"298\":1}}],[\"导入文件\",{\"0\":{\"96\":1,\"5209\":1}}],[\"导航栏\",{\"1\":{\"12\":1,\"136\":1,\"5125\":1,\"5249\":1}}],[\"−1\",{\"1\":{\"94\":1,\"5207\":1}}],[\"ribbon\",{\"1\":{\"4508\":1,\"6130\":1}}],[\"rwx\",{\"1\":{\"3411\":1}}],[\"rwnd\",{\"1\":{\"2670\":2}}],[\"r\",{\"1\":{\"3401\":1,\"3406\":1,\"3410\":1,\"3411\":1,\"3417\":1,\"3510\":1,\"5021\":1}}],[\"rmdir\",{\"1\":{\"3401\":1}}],[\"rm\",{\"1\":{\"3307\":1,\"3401\":1,\"3447\":1}}],[\"rmi\",{\"1\":{\"3307\":1}}],[\"rpush+lpop\",{\"1\":{\"3115\":1,\"6771\":1}}],[\"rpop\",{\"1\":{\"3115\":1,\"6771\":1}}],[\"rpc框架\",{\"1\":{\"3983\":1}}],[\"rpc\",{\"1\":{\"895\":1,\"4554\":1,\"5513\":1}}],[\"rr级别下快照读的结果的不同\",{\"1\":{\"3054\":1}}],[\"rfc\",{\"1\":{\"2537\":1}}],[\"rcvd\",{\"1\":{\"2528\":1,\"2578\":1}}],[\"rst\",{\"1\":{\"2448\":1,\"2544\":1,\"2545\":1,\"2628\":1}}],[\"rsa可以选择密钥长度\",{\"1\":{\"4012\":1}}],[\"rsa之所以效率高于des\",{\"1\":{\"4011\":1}}],[\"rsa为什么比des效率高\",{\"0\":{\"4008\":1}}],[\"rsa\",{\"1\":{\"2316\":2,\"2323\":1,\"2328\":1,\"5089\":1,\"5094\":1}}],[\"run\",{\"1\":{\"3307\":1,\"3319\":1,\"3772\":1,\"3871\":1,\"4860\":1,\"4938\":1,\"6026\":1}}],[\"runid\",{\"1\":{\"3233\":5}}],[\"running\",{\"1\":{\"1855\":1,\"1867\":1,\"6231\":1}}],[\"runnable\",{\"1\":{\"1854\":1,\"3527\":11,\"3762\":1,\"3772\":1,\"3857\":1,\"5993\":1,\"6011\":1,\"6230\":1}}],[\"runtimeexception\",{\"1\":{\"4857\":2,\"5650\":1}}],[\"runtimeexception与其子类\",{\"1\":{\"468\":1,\"5363\":1}}],[\"runtime\",{\"1\":{\"178\":1,\"181\":1,\"250\":2,\"281\":1,\"5287\":1,\"5290\":1}}],[\"rdb\",{\"0\":{\"3144\":1,\"6800\":1,\"6804\":1},\"1\":{\"3141\":1,\"3143\":1,\"3149\":1,\"3157\":1,\"3234\":1,\"3235\":5,\"3236\":1,\"6797\":1,\"6799\":1,\"6805\":1,\"6813\":1}}],[\"rd\",{\"1\":{\"1368\":1,\"5646\":1}}],[\"roll\",{\"1\":{\"3019\":1,\"3029\":1,\"3045\":1,\"6691\":1,\"6695\":1}}],[\"rollback\",{\"1\":{\"2737\":1,\"6406\":1}}],[\"row\",{\"1\":{\"2733\":1,\"2934\":1,\"2935\":1,\"3030\":1,\"6402\":1,\"6606\":1,\"6607\":1,\"6696\":1}}],[\"rowbounds\",{\"1\":{\"1122\":1,\"5704\":1}}],[\"roundrobinassignor的分配策略是将消费组内订阅的所有topic的分区及所有消费者进行排序后尽量均衡的分配\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"roundrobinassignor\",{\"1\":{\"1469\":1,\"1480\":1,\"6917\":1,\"6930\":1}}],[\"robin算法\",{\"1\":{\"1465\":1,\"6913\":1}}],[\"rocketmq\",{\"1\":{\"1430\":2,\"1431\":1,\"1433\":3,\"4759\":1,\"4761\":3,\"4768\":1,\"4800\":1}}],[\"root\",{\"1\":{\"646\":1,\"3493\":1,\"3498\":2,\"3501\":1,\"3502\":1}}],[\"roots\",{\"1\":{\"301\":1,\"302\":1,\"363\":1,\"364\":1,\"376\":1}}],[\"raft算法在具体实现中\",{\"1\":{\"4585\":1}}],[\"raft算法和其他分布式一致算法一样\",{\"1\":{\"4584\":1}}],[\"raft算法\",{\"1\":{\"4579\":1}}],[\"raft协议\",{\"0\":{\"4571\":1}}],[\"raft\",{\"1\":{\"4563\":1,\"4586\":2,\"4589\":1,\"6163\":1}}],[\"randomuuid\",{\"1\":{\"4910\":1}}],[\"random\",{\"1\":{\"2322\":1,\"2327\":1,\"2337\":2,\"3183\":1,\"3185\":1,\"6841\":1,\"6843\":1}}],[\"rangeassignor是针对单个topic的分区进行排序分配的\",{\"1\":{\"1481\":1,\"6931\":1}}],[\"rangeassignor对每个topic进行独立的分区分配\",{\"1\":{\"1472\":1,\"6920\":1}}],[\"rangeassignor\",{\"1\":{\"1471\":1,\"6919\":1}}],[\"rangeassigor\",{\"1\":{\"1469\":1,\"6917\":1}}],[\"rangecheck\",{\"1\":{\"824\":1}}],[\"rangecheckforadd\",{\"1\":{\"816\":2}}],[\"rabbitmq\",{\"1\":{\"1430\":2,\"1434\":1,\"4762\":1,\"4767\":1,\"4802\":1}}],[\"rather\",{\"1\":{\"434\":1,\"5325\":1}}],[\"ray\",{\"0\":{\"172\":1,\"5280\":1},\"1\":{\"147\":1,\"170\":1,\"5260\":1,\"5278\":1}}],[\"rtt\",{\"1\":{\"7072\":2}}],[\"rtree\",{\"1\":{\"2772\":1,\"6441\":1}}],[\"rt\",{\"1\":{\"425\":1,\"5316\":1}}],[\"releaseconnection\",{\"1\":{\"4910\":1}}],[\"relevant\",{\"1\":{\"1493\":3,\"2136\":3,\"3390\":5,\"6946\":3,\"6955\":5}}],[\"reversed\",{\"1\":{\"4999\":1}}],[\"revert在本地创建回滚提交\",{\"1\":{\"3349\":1}}],[\"revert\",{\"1\":{\"3347\":1}}],[\"revert命令\",{\"1\":{\"3346\":1}}],[\"review\",{\"1\":{\"4857\":2}}],[\"rejectedexecution\",{\"1\":{\"3885\":1,\"6040\":1}}],[\"rejectedexecutionexception\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"rejectedexecutionexception来拒绝新任务的处理\",{\"1\":{\"3870\":1,\"6025\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"3857\":1,\"3874\":1,\"6011\":1,\"6029\":1}}],[\"reentrantlock\",{\"0\":{\"5795\":1},\"1\":{\"3778\":1,\"3779\":1,\"3780\":1,\"3781\":1,\"3782\":1,\"3783\":1,\"3784\":1,\"3785\":2,\"3786\":1,\"3787\":1,\"3788\":1,\"3789\":1,\"3820\":1,\"3831\":1,\"3845\":2,\"5789\":1,\"5790\":1,\"5791\":1,\"5792\":1,\"5793\":1,\"5794\":1,\"5796\":2,\"5797\":1,\"5798\":1,\"5799\":1,\"5800\":1,\"5938\":1,\"5947\":1,\"5961\":1,\"5962\":1}}],[\"reentrantreadwritelock\",{\"1\":{\"3633\":1,\"3834\":1,\"3837\":1,\"5874\":1,\"5950\":1,\"5953\":1}}],[\"refreshwithpipeline\",{\"1\":{\"4895\":1}}],[\"refresh\",{\"1\":{\"4895\":1}}],[\"references\",{\"1\":{\"3527\":1}}],[\"reflog\",{\"1\":{\"3338\":1}}],[\"reflect\",{\"1\":{\"911\":1,\"5529\":1}}],[\"rewrite\",{\"1\":{\"3163\":1,\"6819\":1}}],[\"redirect\",{\"1\":{\"3930\":1,\"6074\":1}}],[\"redisstringcommands\",{\"1\":{\"4910\":1}}],[\"redisconnectionutils\",{\"1\":{\"4910\":1}}],[\"redisconnection\",{\"1\":{\"4910\":1}}],[\"redisconnectionfactory\",{\"1\":{\"4910\":1}}],[\"redis是单线程\",{\"1\":{\"4891\":1}}],[\"redis是一个内存数据库\",{\"1\":{\"4086\":1}}],[\"redis实现\",{\"1\":{\"4868\":1,\"7246\":1}}],[\"redis的资源消耗比较低\",{\"1\":{\"4865\":1}}],[\"redis的主要应用\",{\"0\":{\"4162\":1}}],[\"redis完全可以满足需要\",{\"1\":{\"4864\":1}}],[\"redis用起来更简单直接\",{\"1\":{\"4863\":1}}],[\"redis相对于kafka来说更简单\",{\"1\":{\"4863\":1}}],[\"redis和mysql数据一致性\",{\"0\":{\"4098\":1}}],[\"redis和客户端通信也好\",{\"1\":{\"3240\":1}}],[\"redis提供了多种数据结构\",{\"1\":{\"4088\":1}}],[\"redis支持为存储的数据设置过期时间\",{\"1\":{\"4087\":1}}],[\"redis先把数据写到这个buffer中\",{\"1\":{\"3240\":1}}],[\"redis都会分配一个client\",{\"1\":{\"3240\":1}}],[\"redis都需要给分配一个\",{\"1\":{\"3240\":1}}],[\"redis就会自动触发bgsave命令创建快照\",{\"1\":{\"3147\":3,\"6803\":3}}],[\"redistemplate\",{\"1\":{\"2188\":2}}],[\"redistemplate<string\",{\"1\":{\"2188\":1}}],[\"redis\",{\"0\":{\"3087\":1,\"3088\":1,\"6742\":1,\"6743\":1,\"6744\":1,\"6836\":1,\"6892\":1},\"1\":{\"2068\":1,\"3089\":1,\"3090\":1,\"3091\":2,\"3092\":1,\"3103\":1,\"3111\":1,\"3112\":1,\"3113\":1,\"3119\":1,\"3120\":1,\"3126\":1,\"3127\":1,\"3128\":1,\"3134\":1,\"3135\":1,\"3136\":1,\"3140\":2,\"3143\":1,\"3145\":4,\"3146\":2,\"3149\":1,\"3150\":1,\"3151\":1,\"3153\":2,\"3155\":2,\"3164\":1,\"3171\":1,\"3174\":1,\"3175\":1,\"3177\":1,\"3179\":2,\"3180\":1,\"3192\":1,\"3217\":1,\"3233\":1,\"3235\":1,\"3251\":2,\"3278\":1,\"3279\":1,\"3997\":1,\"4654\":1,\"4883\":1,\"4884\":1,\"4886\":1,\"4887\":1,\"4999\":1,\"5773\":1,\"6361\":4,\"6745\":1,\"6746\":1,\"6747\":2,\"6748\":1,\"6759\":1,\"6767\":1,\"6768\":1,\"6769\":1,\"6775\":1,\"6776\":1,\"6782\":1,\"6783\":1,\"6784\":1,\"6790\":1,\"6791\":1,\"6792\":1,\"6796\":2,\"6799\":1,\"6801\":4,\"6802\":2,\"6805\":1,\"6806\":1,\"6807\":1,\"6809\":2,\"6811\":2,\"6820\":1,\"6829\":1,\"6832\":1,\"6833\":1,\"6835\":1,\"6837\":2,\"6838\":1,\"6856\":2,\"6883\":1,\"6884\":1,\"7173\":1,\"7261\":1,\"7262\":1,\"7264\":1,\"7265\":1}}],[\"redo\",{\"1\":{\"2744\":1,\"2976\":1,\"6413\":1,\"6648\":1}}],[\"reqentity\",{\"1\":{\"2096\":2}}],[\"requires\",{\"1\":{\"1243\":1,\"5595\":1}}],[\"required\",{\"1\":{\"1239\":1,\"1247\":1,\"5591\":1,\"5599\":1}}],[\"requestoptions\",{\"1\":{\"4986\":2}}],[\"requestbody\",{\"1\":{\"4123\":1,\"4548\":1,\"4923\":1,\"4933\":2,\"4935\":1}}],[\"requestmapping注解下的接口\",{\"1\":{\"4542\":1}}],[\"requestmapping等等\",{\"1\":{\"4542\":1}}],[\"requestmapping\",{\"1\":{\"4123\":1,\"4534\":1,\"5011\":2}}],[\"request\",{\"1\":{\"1199\":1,\"2205\":1,\"2253\":1,\"4537\":1,\"5551\":1,\"6153\":1}}],[\"repository或git\",{\"1\":{\"3332\":1}}],[\"repository\",{\"1\":{\"3296\":2,\"3335\":1}}],[\"repl\",{\"1\":{\"3238\":1,\"3239\":2,\"3241\":1,\"3243\":1,\"3244\":2}}],[\"replicaof\",{\"1\":{\"3235\":1}}],[\"replication\",{\"0\":{\"1527\":1},\"1\":{\"3235\":1,\"3236\":1,\"3238\":1,\"3240\":1}}],[\"replica\",{\"1\":{\"1443\":1,\"1528\":1,\"1530\":1,\"1531\":1,\"1533\":1}}],[\"repeatable\",{\"1\":{\"1231\":1,\"1234\":1,\"2737\":1,\"2999\":1,\"5583\":1,\"5586\":1,\"6406\":1,\"6671\":1}}],[\"recently\",{\"1\":{\"3181\":1,\"3184\":1,\"6839\":1,\"6842\":1}}],[\"received\",{\"1\":{\"1380\":1}}],[\"records\",{\"1\":{\"1610\":2,\"1613\":2,\"1617\":2}}],[\"recordmetadata\",{\"1\":{\"1518\":1,\"1521\":1,\"1544\":3,\"1547\":3}}],[\"record\",{\"0\":{\"6619\":1},\"1\":{\"1380\":2,\"1515\":2,\"1518\":2,\"1521\":1,\"1610\":3,\"1613\":3,\"1617\":3,\"2944\":1,\"2946\":1,\"2948\":1,\"2956\":1,\"3028\":1,\"6616\":1,\"6618\":1,\"6620\":1,\"6628\":1,\"6694\":1}}],[\"reuse\",{\"1\":{\"1150\":1,\"2627\":1,\"5730\":1}}],[\"resultmap\",{\"1\":{\"4857\":4}}],[\"resulttype=\",{\"1\":{\"4748\":1}}],[\"result\",{\"1\":{\"3765\":2,\"3975\":2,\"4857\":2,\"4910\":3}}],[\"resultset\",{\"1\":{\"1122\":1,\"5704\":1}}],[\"reset回退到旧提交\",{\"1\":{\"3350\":1}}],[\"reset\",{\"1\":{\"3345\":1}}],[\"reset命令\",{\"1\":{\"3344\":1}}],[\"resthighlevelclient\",{\"1\":{\"4986\":4}}],[\"restart\",{\"1\":{\"3307\":1}}],[\"restful\",{\"1\":{\"1350\":1,\"4554\":1,\"5675\":1}}],[\"restcontroller注解=\",{\"1\":{\"4123\":1}}],[\"restcontroller\",{\"1\":{\"1329\":1,\"4123\":1,\"4931\":2,\"4935\":1,\"4994\":2,\"5011\":1}}],[\"responseresult\",{\"1\":{\"4548\":1,\"4857\":9,\"4919\":2,\"4923\":1,\"4929\":2,\"4931\":2,\"4933\":4,\"4935\":7,\"4979\":5,\"4994\":2,\"4999\":5,\"5651\":4}}],[\"response\",{\"1\":{\"2096\":1,\"2229\":1,\"2234\":1,\"2236\":1,\"2250\":1,\"2257\":1}}],[\"responseentity<string>\",{\"1\":{\"1325\":4}}],[\"responsebody+\",{\"1\":{\"4123\":1}}],[\"responsebody\",{\"1\":{\"1325\":2,\"5651\":2}}],[\"resourcehandlerregistry\",{\"1\":{\"1398\":1}}],[\"resource\",{\"0\":{\"476\":1,\"5371\":1},\"1\":{\"3494\":1}}],[\"resources\",{\"1\":{\"425\":1,\"1294\":1,\"5316\":1,\"5636\":1}}],[\"resove\",{\"1\":{\"431\":1,\"5322\":1}}],[\"resolved\",{\"1\":{\"3579\":1}}],[\"resolveclass\",{\"1\":{\"431\":1,\"444\":1,\"5322\":1,\"5337\":1}}],[\"resolve\",{\"1\":{\"431\":1,\"435\":1,\"444\":2,\"5322\":1,\"5326\":1,\"5337\":2}}],[\"resolution\",{\"1\":{\"409\":1,\"5298\":1,\"7026\":1}}],[\"register|login\",{\"1\":{\"5041\":1,\"5047\":1}}],[\"register中心会返回服务提供者的地址列表\",{\"1\":{\"3985\":1}}],[\"registry\",{\"1\":{\"1398\":4,\"3302\":1,\"3307\":1,\"3328\":1,\"3329\":1,\"4555\":1,\"6088\":1}}],[\"region\",{\"1\":{\"374\":4,\"379\":2,\"381\":1}}],[\"regularize\",{\"1\":{\"1062\":1}}],[\"rehash之后的链表可能为c\",{\"1\":{\"919\":1,\"5436\":1}}],[\"remote\",{\"1\":{\"3332\":1,\"3336\":1,\"3383\":1}}],[\"remove\",{\"1\":{\"822\":2,\"824\":1,\"826\":1,\"3772\":1,\"3774\":1,\"3775\":1}}],[\"remembered\",{\"1\":{\"378\":3}}],[\"reator\",{\"1\":{\"6373\":1}}],[\"reached\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"reactor\",{\"0\":{\"1813\":1,\"1814\":1,\"1832\":1,\"1841\":1,\"6320\":1,\"6341\":1,\"6362\":1,\"6380\":1},\"1\":{\"1815\":1,\"1816\":1,\"1817\":1,\"1818\":1,\"1822\":1,\"1823\":1,\"1827\":1,\"1831\":1,\"1833\":2,\"1835\":1,\"1838\":1,\"1847\":2,\"3091\":1,\"6321\":2,\"6322\":1,\"6324\":1,\"6325\":1,\"6328\":1,\"6329\":1,\"6330\":1,\"6331\":1,\"6332\":2,\"6334\":1,\"6335\":1,\"6336\":1,\"6340\":1,\"6342\":1,\"6343\":1,\"6344\":1,\"6346\":1,\"6347\":1,\"6351\":1,\"6352\":1,\"6356\":1,\"6360\":1,\"6361\":1,\"6363\":2,\"6364\":1,\"6367\":1,\"6370\":1,\"6376\":2,\"6377\":2,\"6378\":1,\"6379\":2,\"6381\":4,\"6382\":1,\"6389\":2,\"6392\":1,\"6747\":1}}],[\"reason\",{\"1\":{\"2538\":1,\"4857\":3}}],[\"realstack\",{\"1\":{\"621\":1}}],[\"readtimeout\",{\"1\":{\"4926\":1}}],[\"readview主要是用来做可见性判断\",{\"1\":{\"3031\":1,\"6697\":1}}],[\"readfiletobytearray\",{\"1\":{\"2096\":1}}],[\"ready\",{\"1\":{\"1867\":1,\"3579\":1}}],[\"readonly\",{\"1\":{\"1140\":1,\"1141\":1,\"5720\":1}}],[\"readline\",{\"1\":{\"480\":1}}],[\"read\",{\"1\":{\"478\":1,\"1231\":2,\"1232\":1,\"1233\":1,\"1234\":1,\"1778\":1,\"1779\":1,\"1786\":2,\"1793\":1,\"1799\":1,\"1821\":1,\"1826\":1,\"1839\":1,\"1846\":1,\"1981\":1,\"2111\":1,\"2737\":1,\"2854\":1,\"2866\":2,\"2867\":1,\"2880\":1,\"2913\":1,\"2997\":1,\"2998\":1,\"2999\":1,\"3017\":6,\"3019\":3,\"3032\":2,\"3035\":2,\"3036\":1,\"3044\":2,\"3045\":1,\"3051\":2,\"3056\":1,\"3478\":1,\"4857\":1,\"5373\":1,\"5583\":2,\"5584\":1,\"5585\":1,\"5586\":1,\"6240\":1,\"6274\":1,\"6275\":1,\"6279\":1,\"6290\":2,\"6298\":1,\"6304\":1,\"6323\":1,\"6350\":1,\"6355\":1,\"6371\":1,\"6388\":1,\"6406\":1,\"6526\":1,\"6538\":2,\"6539\":1,\"6552\":1,\"6585\":1,\"6669\":1,\"6670\":1,\"6671\":1,\"6689\":6,\"6691\":3,\"6698\":2,\"6702\":2,\"6703\":1}}],[\"retries参数的值决定了生产者可以重发消息的次数\",{\"1\":{\"1562\":1}}],[\"retries\",{\"1\":{\"1561\":1,\"1564\":1}}],[\"ret++\",{\"1\":{\"486\":1}}],[\"ret\",{\"1\":{\"486\":5}}],[\"returns\",{\"1\":{\"3925\":1,\"3926\":1,\"3927\":1,\"3928\":1,\"3929\":1}}],[\"return\",{\"1\":{\"214\":1,\"444\":1,\"475\":1,\"486\":2,\"491\":1,\"507\":1,\"513\":1,\"822\":1,\"824\":1,\"826\":1,\"858\":1,\"1016\":3,\"1029\":1,\"1035\":1,\"1047\":1,\"1062\":2,\"1068\":1,\"1076\":1,\"1097\":1,\"1131\":1,\"1325\":2,\"1327\":1,\"1380\":2,\"1466\":4,\"1474\":1,\"1625\":1,\"2177\":1,\"2185\":1,\"2188\":2,\"3765\":3,\"3775\":1,\"3975\":1,\"4755\":1,\"4857\":16,\"4860\":2,\"4910\":3,\"4919\":1,\"4931\":1,\"4933\":3,\"4935\":6,\"4938\":2,\"4979\":4,\"4994\":1,\"4999\":4,\"5011\":1,\"5337\":1,\"5370\":1,\"5378\":1,\"5395\":1,\"5401\":1,\"5488\":1,\"5650\":1,\"5651\":4,\"5996\":1,\"6914\":4,\"6923\":1}}],[\"r−i​\",{\"1\":{\"94\":1,\"5207\":1}}],[\"r−i+1\",{\"1\":{\"94\":1,\"5207\":1}}],[\"r+i=1∑r​ωi\",{\"1\":{\"94\":1,\"5207\":1}}],[\"rgba\",{\"1\":{\"83\":1,\"5196\":1}}],[\"ωyω​\",{\"1\":{\"94\":2,\"5207\":2}}],[\"∂ωr∂r​\",{\"1\":{\"94\":1,\"5207\":1}}],[\"eb5597ed0b81b03c762e54ff3f909492\",{\"1\":{\"6944\":1}}],[\"eff9adb5a086691e56b5d68bec68ffcf\",{\"1\":{\"6925\":1}}],[\"ewouldblock\",{\"1\":{\"6279\":1}}],[\"e10adc3949ba59abbe56e057f20f883e\",{\"1\":{\"5051\":1}}],[\"eq\",{\"1\":{\"4979\":1}}],[\"equals是object的方法\",{\"1\":{\"4191\":1}}],[\"equals\",{\"1\":{\"507\":2,\"4857\":8,\"4979\":1,\"4999\":2,\"5395\":2}}],[\"epoch\",{\"1\":{\"4599\":3,\"6183\":3}}],[\"epoll\",{\"0\":{\"6263\":1},\"1\":{\"1774\":1,\"1775\":4,\"1776\":2,\"1777\":1,\"1778\":1,\"1779\":1,\"1780\":1,\"6261\":1,\"6262\":1,\"6264\":1,\"6265\":4,\"6266\":2,\"6267\":1,\"6269\":2,\"6270\":2,\"6271\":1,\"6272\":1,\"6274\":1,\"6275\":1,\"6280\":1,\"6281\":1,\"6283\":1}}],[\"eureka\",{\"1\":{\"4505\":1,\"4648\":1,\"6130\":1,\"6221\":1}}],[\"eu\",{\"1\":{\"3611\":1}}],[\"ecc\",{\"1\":{\"5094\":1}}],[\"ecc等\",{\"1\":{\"4010\":1,\"5089\":1}}],[\"ec\",{\"1\":{\"3610\":1}}],[\"eclipse\",{\"1\":{\"3574\":1}}],[\"ecdhe\",{\"1\":{\"2316\":3}}],[\"echarts\",{\"0\":{\"87\":1,\"5200\":1}}],[\"established\",{\"1\":{\"2529\":1,\"2530\":1,\"2532\":1}}],[\"es\",{\"1\":{\"2068\":1,\"4984\":1,\"4986\":2,\"5773\":1}}],[\"etc\",{\"1\":{\"3422\":1}}],[\"etag\",{\"1\":{\"2243\":1,\"2244\":1,\"2245\":2,\"2247\":6,\"2249\":1,\"2250\":1,\"2253\":1,\"2257\":1}}],[\"et\",{\"1\":{\"1777\":1,\"6272\":1}}],[\"edge\",{\"1\":{\"1777\":1,\"6272\":1}}],[\"eden所剩空间\",{\"1\":{\"388\":1}}],[\"eden区域满\",{\"1\":{\"387\":1}}],[\"eden区\",{\"1\":{\"253\":1}}],[\"eden\",{\"1\":{\"230\":1,\"231\":1,\"232\":1,\"237\":1,\"254\":1,\"256\":1,\"272\":2,\"333\":4,\"334\":1,\"3610\":1,\"3611\":1}}],[\"eagain\",{\"1\":{\"6279\":1}}],[\"easylife206\",{\"1\":{\"1493\":1,\"6946\":1}}],[\"each\",{\"1\":{\"787\":1}}],[\"erlang\",{\"1\":{\"1434\":1,\"4762\":1,\"4772\":1}}],[\"error=\",{\"1\":{\"4986\":1}}],[\"errorresult\",{\"1\":{\"4919\":1,\"4979\":3,\"5651\":2}}],[\"error\",{\"1\":{\"456\":1,\"468\":1,\"478\":2,\"1203\":1,\"1325\":2,\"1518\":1,\"2209\":1,\"4919\":1,\"4986\":1,\"5351\":1,\"5363\":1,\"5373\":2,\"5555\":1,\"5651\":3}}],[\"ever\",{\"1\":{\"3925\":1,\"3927\":1}}],[\"even\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"event\",{\"1\":{\"1984\":1,\"6243\":1}}],[\"eventpublishingrunlistener\",{\"1\":{\"1382\":1}}],[\"eventlistener注解\",{\"1\":{\"1343\":1,\"5667\":1}}],[\"eviction\",{\"1\":{\"1140\":1,\"3186\":1,\"6844\":1}}],[\"emacs\",{\"1\":{\"3447\":1}}],[\"embeddedvalueresolveraware\",{\"1\":{\"1180\":1}}],[\"empty\",{\"1\":{\"816\":1}}],[\"emitted\",{\"1\":{\"787\":1}}],[\"elasticsearch\",{\"1\":{\"2772\":1,\"2773\":1,\"2783\":1,\"4654\":1,\"4986\":4,\"6441\":1,\"6442\":1,\"6452\":1,\"7173\":1}}],[\"elementcount++\",{\"1\":{\"812\":1}}],[\"elementcount\",{\"1\":{\"790\":2,\"812\":4,\"826\":3}}],[\"elementdata\",{\"1\":{\"787\":2,\"790\":2,\"792\":1,\"812\":4,\"816\":5,\"824\":4,\"826\":4}}],[\"element\",{\"1\":{\"787\":1,\"812\":2,\"814\":2,\"816\":2,\"2177\":4,\"2185\":4}}],[\"elements\",{\"1\":{\"787\":2}}],[\"else\",{\"1\":{\"444\":1,\"480\":2,\"507\":1,\"1466\":2,\"1521\":1,\"3765\":1,\"4857\":2,\"5337\":1,\"5395\":1,\"5996\":1,\"6914\":2}}],[\"e\",{\"0\":{\"7290\":1},\"1\":{\"444\":1,\"478\":4,\"489\":2,\"812\":2,\"814\":1,\"816\":1,\"822\":1,\"824\":2,\"826\":2,\"1413\":1,\"1515\":2,\"1518\":1,\"1547\":2,\"1610\":1,\"1613\":2,\"1617\":2,\"2377\":1,\"3558\":2,\"3765\":3,\"3775\":5,\"4857\":6,\"4986\":3,\"5337\":1,\"5373\":4,\"5376\":2,\"5651\":8}}],[\"exist\",{\"1\":{\"4979\":1}}],[\"exists\",{\"1\":{\"4903\":1,\"7273\":1}}],[\"exhaustion\",{\"1\":{\"3992\":1}}],[\"exe\",{\"1\":{\"3574\":1}}],[\"exec\",{\"1\":{\"3307\":1}}],[\"execdriver\",{\"1\":{\"3304\":1,\"3305\":1,\"6090\":1,\"6091\":1}}],[\"executing\",{\"1\":{\"3929\":1}}],[\"execution\",{\"1\":{\"179\":1,\"181\":1,\"3857\":1,\"3925\":1,\"3926\":1,\"4031\":2,\"5288\":1,\"5290\":1,\"6011\":1}}],[\"executed\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"execute\",{\"1\":{\"2096\":1,\"3772\":2,\"3857\":1,\"3888\":1,\"6011\":1}}],[\"executors\",{\"0\":{\"3899\":1},\"1\":{\"3855\":2,\"3909\":1,\"3910\":1,\"6009\":2,\"6046\":1,\"6056\":1,\"6057\":1}}],[\"executor\",{\"0\":{\"3899\":1},\"1\":{\"1380\":7,\"3560\":1,\"3857\":1,\"3865\":1,\"3930\":1,\"6011\":1,\"6019\":1,\"6046\":1}}],[\"expiration\",{\"1\":{\"4910\":1}}],[\"expire\",{\"1\":{\"4910\":3}}],[\"expires\",{\"1\":{\"2231\":1,\"2232\":2,\"3181\":1,\"3182\":1,\"3183\":1,\"3188\":1,\"6839\":1,\"6840\":1,\"6841\":1,\"6846\":1,\"7063\":1}}],[\"expungestaleentry\",{\"1\":{\"3775\":1}}],[\"expectedinsertions\",{\"1\":{\"2177\":3,\"2182\":2,\"2185\":3}}],[\"expectedmodcount\",{\"1\":{\"787\":2}}],[\"example\",{\"1\":{\"2085\":1,\"2091\":1,\"2096\":1,\"2111\":1,\"3417\":1,\"4031\":2}}],[\"ex\",{\"1\":{\"1325\":3,\"3251\":1,\"4910\":1,\"6856\":1}}],[\"excess\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"exceeded\",{\"1\":{\"3586\":1}}],[\"exceptioncatch\",{\"1\":{\"5651\":2}}],[\"exceptionhandler\",{\"1\":{\"1325\":2,\"5647\":1,\"5648\":1,\"5651\":2}}],[\"exceptionhandler注解用来定义该方法处理的异常类型\",{\"1\":{\"1317\":1}}],[\"exceptions\",{\"0\":{\"463\":2,\"5358\":2}}],[\"exception\",{\"1\":{\"457\":2,\"480\":4,\"489\":1,\"491\":3,\"493\":1,\"1325\":2,\"1515\":1,\"1518\":1,\"1521\":3,\"1547\":1,\"1613\":1,\"1617\":1,\"4857\":3,\"5352\":2,\"5376\":1,\"5378\":3,\"5380\":1,\"5651\":6}}],[\"excluding\",{\"1\":{\"3581\":1}}],[\"excludepathpatterns\",{\"1\":{\"1402\":1}}],[\"excludename\",{\"1\":{\"1292\":1,\"5634\":1}}],[\"exclude\",{\"1\":{\"1292\":1,\"5634\":1}}],[\"excute\",{\"1\":{\"3478\":1}}],[\"extern\",{\"1\":{\"4857\":1,\"4981\":1,\"4986\":1,\"4997\":1,\"4999\":1}}],[\"extension\",{\"1\":{\"4860\":2,\"4938\":2}}],[\"extensionclassloader\",{\"1\":{\"426\":1,\"5317\":1}}],[\"extends\",{\"1\":{\"521\":1,\"911\":1,\"4753\":1,\"4755\":1,\"5409\":1,\"5529\":1,\"5650\":1}}],[\"ext4\",{\"1\":{\"3456\":1,\"3487\":1}}],[\"ext\",{\"1\":{\"426\":2,\"5317\":2}}],[\"entity\",{\"1\":{\"4748\":1,\"7063\":1}}],[\"entirely\",{\"1\":{\"1103\":1}}],[\"entries配置\",{\"1\":{\"3119\":1,\"6775\":1}}],[\"entries\",{\"1\":{\"3111\":1,\"3126\":1,\"6767\":1,\"6782\":1}}],[\"entry\",{\"1\":{\"1669\":1,\"3765\":1,\"3775\":2}}],[\"entryset\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"entry<string\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"enable\",{\"1\":{\"4979\":1}}],[\"enablescheduling\",{\"1\":{\"4860\":2,\"4938\":2}}],[\"enablefeignclients\",{\"1\":{\"4859\":1,\"4860\":2,\"4938\":2}}],[\"enablefeignclients注解\",{\"1\":{\"4546\":1}}],[\"enableaspectjautoproxy\",{\"1\":{\"4034\":1}}],[\"enableasync注解开启异步调用\",{\"1\":{\"4846\":1,\"7235\":1}}],[\"enableasync\",{\"1\":{\"1380\":1,\"4860\":2,\"4938\":2}}],[\"enableautoconfiguration注解通过\",{\"1\":{\"1307\":1}}],[\"enableautoconfiguration注解\",{\"1\":{\"1298\":1,\"1299\":1}}],[\"enableautoconfiguration\",{\"1\":{\"1298\":1}}],[\"enableautoconfiguration=true\",{\"1\":{\"1291\":1,\"5632\":1}}],[\"enableautoconfiguration开启自动装配\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"enableautoconfiguration会自动去maven中读取每个starter中的spring\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"enablediscoveryclient\",{\"1\":{\"4860\":2,\"4938\":2}}],[\"enabled\",{\"1\":{\"1138\":1,\"4926\":1,\"5017\":1}}],[\"environment\",{\"1\":{\"1179\":1}}],[\"environmentaware\",{\"1\":{\"1179\":1}}],[\"enumeration\",{\"1\":{\"941\":1}}],[\"ensureexplicitcapacity\",{\"1\":{\"816\":1}}],[\"ensurecapacityinternal\",{\"1\":{\"816\":2}}],[\"ensurecapacityhelper\",{\"1\":{\"812\":2}}],[\"ensure\",{\"1\":{\"790\":1}}],[\"endpoint\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"end2\",{\"1\":{\"634\":2}}],[\"end1\",{\"1\":{\"634\":2}}],[\"encouraged\",{\"1\":{\"434\":1,\"5325\":1}}],[\"engine可以简单看成对linux内核中的namespace\",{\"1\":{\"3312\":1}}],[\"engine来实现资源限制与环境隔离\",{\"1\":{\"3312\":1}}],[\"engine\",{\"1\":{\"179\":1,\"181\":1,\"3301\":1,\"5288\":1,\"5290\":1,\"6087\":1}}],[\"enhancer类来动态获取被代理类\",{\"1\":{\"912\":1,\"5530\":1}}],[\"enhancer\",{\"1\":{\"909\":1,\"5527\":1}}],[\"enhance\",{\"1\":{\"42\":1,\"5155\":1}}],[\"图解线程池实现原理\",{\"1\":{\"6041\":1}}],[\"图片去重\",{\"1\":{\"4857\":1}}],[\"图片处理\",{\"1\":{\"4727\":1}}],[\"图片来源\",{\"1\":{\"3867\":1,\"6021\":1}}],[\"图片的路径\",{\"1\":{\"3105\":1,\"6761\":1}}],[\"图片\",{\"1\":{\"3002\":1,\"5833\":1,\"5835\":1,\"5837\":1,\"5839\":1,\"5841\":1,\"5843\":1,\"5857\":1,\"5908\":1,\"5919\":1,\"5925\":1,\"5926\":1,\"6063\":1,\"6068\":1,\"6070\":1,\"6073\":1,\"6674\":1}}],[\"图片1与图片2仍然会被缓存到服务器a中\",{\"1\":{\"2032\":1}}],[\"图片4仍然会被缓存到服务器c中\",{\"1\":{\"2032\":1}}],[\"图片3的缓存位置会发生改变\",{\"1\":{\"2032\":1}}],[\"图片3应该被缓存到服务器c中\",{\"1\":{\"2032\":1}}],[\"图片3应该被缓存到服务器b中\",{\"1\":{\"2032\":1}}],[\"图片名称\",{\"1\":{\"2009\":1,\"2027\":1}}],[\"图片增强\",{\"0\":{\"79\":1,\"5192\":1}}],[\"图表\",{\"0\":{\"85\":1,\"5198\":1}}],[\"0连接发起多重的请求\",{\"1\":{\"6983\":1,\"7006\":1}}],[\"03\",{\"1\":{\"3930\":1,\"6074\":1}}],[\"02\",{\"1\":{\"3753\":1,\"3790\":1,\"5801\":1,\"5985\":1}}],[\"00\",{\"1\":{\"3498\":1,\"3504\":1}}],[\"0000在对0000\",{\"1\":{\"1032\":1}}],[\"0000和0001\",{\"1\":{\"1032\":1}}],[\"00000000000000000000000000001111\",{\"1\":{\"1037\":1}}],[\"00000006\",{\"1\":{\"929\":1,\"5446\":1}}],[\"00000094\",{\"1\":{\"930\":1,\"5447\":1}}],[\"00001316\",{\"1\":{\"930\":1,\"5447\":1}}],[\"09\",{\"1\":{\"2144\":1}}],[\"04\",{\"0\":{\"2040\":1,\"5745\":1},\"1\":{\"3307\":1}}],[\"0点右侧的第一个点代表1\",{\"1\":{\"2022\":1}}],[\"0号\",{\"1\":{\"2007\":1}}],[\"0~1023\",{\"1\":{\"1770\":1}}],[\"0xe\",{\"1\":{\"3559\":1,\"3560\":1}}],[\"0x00007f5dc8457000\",{\"1\":{\"3527\":1}}],[\"0xffffcd7d\",{\"1\":{\"1062\":1}}],[\"0x7fffffff\",{\"1\":{\"1048\":1,\"1072\":1}}],[\"06\",{\"1\":{\"1054\":1}}],[\"0版本\",{\"1\":{\"935\":1}}],[\"01s\",{\"1\":{\"1417\":1}}],[\"01\",{\"1\":{\"625\":1,\"2182\":1}}],[\"0\",{\"0\":{\"2347\":1,\"6892\":1,\"7060\":1,\"7065\":1,\"7070\":2},\"1\":{\"83\":1,\"264\":1,\"265\":1,\"266\":1,\"297\":1,\"298\":1,\"475\":2,\"486\":4,\"491\":4,\"634\":2,\"650\":1,\"802\":1,\"812\":1,\"816\":1,\"824\":1,\"826\":1,\"967\":1,\"991\":1,\"995\":2,\"1001\":1,\"1016\":1,\"1044\":1,\"1062\":1,\"1068\":1,\"1127\":1,\"1396\":1,\"1421\":1,\"1466\":1,\"1474\":2,\"1625\":2,\"1645\":1,\"1741\":1,\"1742\":1,\"1965\":2,\"1966\":2,\"2025\":1,\"2111\":2,\"2182\":1,\"2267\":2,\"2292\":1,\"2348\":1,\"2349\":1,\"2824\":1,\"2928\":1,\"2940\":1,\"3128\":1,\"3136\":1,\"3143\":1,\"3153\":1,\"3187\":1,\"3222\":1,\"3249\":1,\"3527\":1,\"3656\":1,\"3742\":1,\"3743\":1,\"3772\":1,\"3857\":6,\"4566\":1,\"4615\":1,\"4616\":2,\"4857\":3,\"4895\":2,\"4975\":1,\"4976\":1,\"4999\":4,\"5019\":2,\"5196\":1,\"5370\":2,\"5378\":4,\"5708\":1,\"5899\":1,\"5974\":1,\"5975\":1,\"6011\":6,\"6188\":1,\"6189\":2,\"6361\":1,\"6496\":1,\"6600\":1,\"6612\":1,\"6784\":1,\"6792\":1,\"6799\":1,\"6809\":1,\"6845\":1,\"6854\":1,\"6914\":1,\"6923\":2,\"7061\":1,\"7063\":1,\"7064\":1,\"7066\":2,\"7067\":1,\"7068\":1,\"7069\":1,\"7071\":3,\"7072\":3,\"7073\":2}}],[\"sm2\",{\"1\":{\"5094\":1}}],[\"sm1和sm4\",{\"1\":{\"5092\":1}}],[\"s模式\",{\"1\":{\"4299\":1,\"7124\":1}}],[\"sf\",{\"1\":{\"3413\":1}}],[\"svn\",{\"1\":{\"3361\":3,\"4507\":1,\"6130\":1}}],[\"svg\",{\"1\":{\"83\":1,\"5196\":1}}],[\"sds\",{\"1\":{\"3099\":1,\"3100\":2,\"3101\":5,\"3102\":2,\"3103\":3,\"6755\":1,\"6756\":2,\"6757\":5,\"6758\":2,\"6759\":3}}],[\"s锁\",{\"1\":{\"2941\":1,\"6613\":1}}],[\"sjf\",{\"1\":{\"1917\":1}}],[\"sg\",{\"1\":{\"1801\":1,\"1802\":1,\"1804\":1,\"6307\":1,\"6308\":1,\"6310\":1}}],[\"ssh\",{\"1\":{\"4267\":1}}],[\"sso\",{\"1\":{\"4043\":1}}],[\"ssthresh\",{\"1\":{\"2682\":1,\"2683\":1,\"2684\":1,\"2692\":1,\"2693\":1,\"2697\":1,\"2699\":1,\"2703\":1,\"2706\":1}}],[\"ssl加密协议\",{\"1\":{\"6992\":1}}],[\"ssl\",{\"1\":{\"2266\":1,\"2288\":1,\"2306\":1,\"2307\":1,\"2311\":1,\"2315\":1,\"7071\":1,\"7078\":2}}],[\"ssize\",{\"1\":{\"1797\":1,\"6302\":1}}],[\"ssf\",{\"1\":{\"1756\":1}}],[\"shutdownnow\",{\"1\":{\"3893\":1}}],[\"shutdown\",{\"1\":{\"3855\":1,\"3891\":1,\"6009\":1}}],[\"shutdown等\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"short\",{\"1\":{\"4857\":7}}],[\"shortest\",{\"1\":{\"1756\":1,\"1917\":1,\"2715\":1,\"7010\":1}}],[\"shouldparkafterfailedacquire\",{\"1\":{\"3649\":1,\"5892\":1}}],[\"show\",{\"0\":{\"3539\":1},\"1\":{\"3540\":1,\"3541\":1,\"3581\":1,\"4227\":1}}],[\"sha等加密算法占据着重要的位置\",{\"1\":{\"5089\":1}}],[\"sha\",{\"1\":{\"5054\":3,\"5071\":1}}],[\"shadow\",{\"1\":{\"3417\":1}}],[\"share\",{\"1\":{\"2912\":1,\"2939\":1,\"3022\":1,\"6584\":1,\"6611\":1}}],[\"shared\",{\"1\":{\"1974\":1,\"3465\":1,\"3469\":1,\"6255\":1}}],[\"shell\",{\"1\":{\"1955\":3,\"3444\":1,\"3445\":3}}],[\"swnd\",{\"1\":{\"2670\":1}}],[\"swap\",{\"1\":{\"1636\":1,\"3667\":1,\"3674\":1,\"3699\":1,\"5830\":1,\"5842\":1,\"5868\":1}}],[\"sweep\",{\"1\":{\"361\":2}}],[\"snowflake是twitter开源的分布式id生成算法\",{\"1\":{\"4968\":1}}],[\"sn=c50a434302cc06797828782970da190e\",{\"1\":{\"3930\":1,\"6074\":1}}],[\"sn=c5ba880fd0c5d82e39531fa42cb036ac\",{\"1\":{\"1368\":1,\"5646\":1}}],[\"sn=8509d4aa61d08550c2b7668314da3582\",{\"1\":{\"3727\":1,\"5929\":1}}],[\"sn=a58a9ec9f805d0e109c4b09cd497c9ca\",{\"1\":{\"3702\":1,\"5824\":1}}],[\"snapshot\",{\"1\":{\"3579\":1}}],[\"snapshotting\",{\"1\":{\"3141\":1,\"6797\":1}}],[\"snappy\",{\"1\":{\"1571\":1}}],[\"snmp\",{\"1\":{\"2508\":1}}],[\"sleuth\",{\"1\":{\"4513\":1,\"6130\":1}}],[\"sleep\",{\"1\":{\"2111\":1,\"3772\":1}}],[\"slow\",{\"1\":{\"2682\":1}}],[\"slf4j\",{\"1\":{\"1380\":1,\"4857\":3,\"4981\":3,\"4986\":3,\"4997\":3,\"4999\":3,\"5651\":1}}],[\"slide\",{\"0\":{\"2\":1}}],[\"src\",{\"1\":{\"1294\":1,\"5636\":1}}],[\"scheduleclient\",{\"1\":{\"4934\":1,\"4935\":1}}],[\"scheduleconstants\",{\"1\":{\"4895\":3}}],[\"schedule\",{\"1\":{\"4933\":3,\"4935\":4}}],[\"schedule服务\",{\"1\":{\"4899\":1,\"7269\":1}}],[\"scheduled\",{\"1\":{\"3925\":1,\"4895\":1}}],[\"scheduledthreadpool\",{\"1\":{\"3880\":1,\"3904\":1,\"3913\":1,\"6035\":1,\"6051\":1,\"6060\":1}}],[\"scheduling\",{\"1\":{\"4857\":1,\"4860\":2,\"4938\":2}}],[\"scene=21\",{\"1\":{\"3930\":1,\"6074\":1}}],[\"scene=27\",{\"1\":{\"3702\":1,\"3727\":1,\"5824\":1,\"5929\":1}}],[\"score\",{\"1\":{\"2058\":2,\"4999\":8,\"5763\":2}}],[\"scope=\",{\"1\":{\"1186\":2}}],[\"scala\",{\"1\":{\"4774\":1}}],[\"scatter\",{\"1\":{\"1801\":1,\"6307\":1}}],[\"scan命令每次被调用之后\",{\"1\":{\"4893\":1}}],[\"scan\",{\"1\":{\"1759\":1,\"1761\":1,\"1763\":1,\"1764\":1,\"4892\":1,\"4893\":1,\"4895\":1}}],[\"scavenge\",{\"0\":{\"353\":1},\"1\":{\"359\":1}}],[\"sql\",{\"1\":{\"1123\":1,\"1125\":2,\"1127\":1,\"1136\":3,\"2737\":1,\"2815\":2,\"2996\":1,\"3009\":1,\"3059\":2,\"3082\":1,\"3540\":2,\"4939\":1,\"4942\":1,\"4943\":1,\"4945\":1,\"4948\":1,\"4949\":1,\"4950\":1,\"4953\":2,\"4954\":2,\"4957\":2,\"4961\":2,\"4962\":2,\"4965\":1,\"5705\":1,\"5707\":2,\"5708\":1,\"5713\":1,\"5715\":3,\"6406\":1,\"6487\":2,\"6668\":1,\"6681\":1,\"6733\":1,\"6740\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"4750\":1}}],[\"sqlsessionfactory\",{\"1\":{\"4750\":1}}],[\"sqlsession执行insert\",{\"1\":{\"1134\":1}}],[\"sqlsession中的一级缓存也就不存在了\",{\"1\":{\"1134\":1}}],[\"sqlsession\",{\"1\":{\"1097\":3,\"1134\":1,\"1136\":1,\"1147\":1,\"4750\":4,\"5713\":5,\"5715\":2,\"5727\":1}}],[\"sqlexception等以及用户自定义的exception异常\",{\"1\":{\"462\":1,\"5357\":1}}],[\"s\",{\"0\":{\"7290\":1,\"7293\":1},\"1\":{\"787\":4,\"790\":3,\"1368\":1,\"2948\":1,\"2949\":5,\"2950\":2,\"2954\":1,\"2960\":1,\"3298\":1,\"3338\":1,\"3413\":2,\"3535\":1,\"3702\":1,\"3727\":1,\"3736\":1,\"3930\":1,\"4299\":1,\"4999\":3,\"5646\":1,\"5824\":1,\"5929\":1,\"5967\":1,\"6074\":1,\"6083\":1,\"6620\":1,\"6621\":5,\"6622\":2,\"6626\":1,\"6632\":1,\"7124\":1}}],[\"salt值\",{\"1\":{\"5075\":1,\"5076\":1,\"5078\":1,\"5081\":1,\"5082\":1}}],[\"sayhello\",{\"1\":{\"3961\":1,\"3963\":1,\"3965\":2,\"3967\":1,\"3979\":1}}],[\"sauloal\",{\"1\":{\"3307\":1}}],[\"saveapparticle\",{\"1\":{\"4857\":3}}],[\"savearticle\",{\"1\":{\"4548\":1,\"4857\":1,\"4919\":1,\"4923\":1}}],[\"save\",{\"1\":{\"787\":1,\"790\":1,\"3147\":3,\"3150\":1,\"4548\":1,\"4923\":1,\"6803\":3,\"6806\":1}}],[\"safe\",{\"1\":{\"780\":1}}],[\"spdy\",{\"1\":{\"6989\":7}}],[\"split\",{\"1\":{\"4857\":3,\"4895\":1}}],[\"space\",{\"1\":{\"2119\":1}}],[\"spread\",{\"1\":{\"1062\":1,\"1076\":1}}],[\"spring解决\",{\"1\":{\"5611\":1}}],[\"springapplication\",{\"1\":{\"4860\":2,\"4938\":2}}],[\"springaop的工作过程\",{\"1\":{\"4181\":1}}],[\"spring在企业级开发框架中无人能敌\",{\"1\":{\"4493\":1,\"6126\":1}}],[\"spring在创建完对象后\",{\"1\":{\"4182\":1}}],[\"springcloud中的组件有那些\",{\"1\":{\"4504\":1,\"6129\":1}}],[\"springcloud\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"springcloud项目\",{\"1\":{\"4081\":1}}],[\"spring里面重要的ioc控制反转和面向切面编程\",{\"1\":{\"4415\":1}}],[\"spring根据上一步找到的被代理类以及切面类创建动态类的动态对象并放入spring\",{\"1\":{\"4182\":1}}],[\"spring检查它所扫描到的所有类\",{\"1\":{\"4182\":1}}],[\"spring找到所有由合法表达式修饰的方法\",{\"1\":{\"4182\":1}}],[\"spring的aop\",{\"0\":{\"4179\":1}}],[\"spring的设计模式\",{\"0\":{\"1208\":1,\"5560\":1}}],[\"spring中bean的生命周期\",{\"0\":{\"4129\":1}}],[\"spring事务管理就是通过aop实现的\",{\"1\":{\"4026\":1}}],[\"spring事务机制\",{\"0\":{\"1216\":1,\"5568\":1}}],[\"spring只支持方法级别的切入\",{\"1\":{\"4025\":1}}],[\"spring框架\",{\"0\":{\"4019\":1}}],[\"spring应用默认的线程池\",{\"1\":{\"1377\":1}}],[\"springframework\",{\"1\":{\"1337\":1,\"2177\":2,\"2185\":2,\"4545\":1,\"4857\":5,\"4860\":7,\"4929\":2,\"4931\":3,\"4933\":5,\"4935\":2,\"4938\":7,\"4981\":3,\"4986\":3,\"4994\":3,\"4997\":2,\"4999\":4,\"5661\":1}}],[\"springfactoriesloader\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"springboot已经根据依赖的jar包和classpath对应用环境进行了自动配置\",{\"1\":{\"4237\":1}}],[\"springboot会创建嵌入式web服务器工厂\",{\"1\":{\"4235\":1}}],[\"springboot项目\",{\"1\":{\"4081\":1}}],[\"springboot的启动流程是怎样的\",{\"0\":{\"1381\":1}}],[\"springboot的核心配置文件是application和bootstrap配置文件\",{\"1\":{\"1332\":1,\"5653\":1}}],[\"springboot使用autoconfigurationimportselector类中getcandidateconfigurations去导入这些配置类\",{\"1\":{\"1309\":1}}],[\"springboot基于约定去starter组件的路径下\",{\"1\":{\"1308\":1}}],[\"springbootapplication\",{\"1\":{\"4860\":2,\"4938\":2}}],[\"springbootapplication注解起到核心作用\",{\"1\":{\"4231\":1}}],[\"springbootapplication注解的\",{\"0\":{\"4230\":1}}],[\"springbootapplication注解\",{\"1\":{\"1297\":1}}],[\"springbootapplication或者\",{\"1\":{\"1290\":1,\"5631\":1}}],[\"springboot\",{\"0\":{\"1288\":1},\"1\":{\"1396\":1}}],[\"spring通过先实例化\",{\"1\":{\"1268\":1}}],[\"spring使得两个有循环依赖的bean都先实例化\",{\"1\":{\"1266\":1}}],[\"spring又会调用b的set方法设置其依赖的a的属性\",{\"1\":{\"1265\":1}}],[\"spring会先完成a和b两个bean的实例化\",{\"1\":{\"1263\":1}}],[\"spring会先创建这个bean的实例\",{\"1\":{\"1262\":1}}],[\"spring默认是通过setter注入的方式来注入bean的依赖属性的\",{\"1\":{\"1261\":1}}],[\"spring如何解决循环依赖问题\",{\"0\":{\"1248\":1,\"5600\":1}}],[\"springmvc\",{\"0\":{\"5535\":1},\"1\":{\"1195\":1,\"1215\":1,\"5547\":1,\"5567\":1}}],[\"spring\",{\"0\":{\"1154\":1,\"1217\":1,\"1289\":1,\"1311\":1,\"1314\":1,\"1360\":1,\"4122\":1,\"4138\":1,\"4461\":1,\"4487\":1,\"5535\":2,\"5569\":1,\"5581\":1,\"5588\":1,\"5630\":1,\"5641\":1,\"5645\":1,\"5685\":1,\"6093\":1,\"6094\":1,\"6120\":1,\"7308\":1},\"1\":{\"550\":2,\"864\":1,\"895\":1,\"908\":1,\"1157\":3,\"1158\":2,\"1161\":1,\"1164\":2,\"1165\":3,\"1166\":1,\"1167\":1,\"1175\":1,\"1176\":1,\"1177\":1,\"1179\":1,\"1180\":1,\"1181\":1,\"1182\":2,\"1183\":1,\"1185\":1,\"1186\":3,\"1187\":2,\"1188\":1,\"1196\":1,\"1199\":1,\"1205\":1,\"1209\":1,\"1210\":1,\"1211\":1,\"1212\":1,\"1214\":1,\"1215\":1,\"1224\":1,\"1249\":1,\"1254\":1,\"1273\":1,\"1274\":1,\"1282\":3,\"1284\":1,\"1286\":1,\"1287\":2,\"1290\":2,\"1293\":1,\"1294\":4,\"1295\":3,\"1300\":1,\"1302\":1,\"1304\":1,\"1308\":1,\"1310\":2,\"1336\":3,\"1346\":2,\"1348\":1,\"1350\":1,\"1351\":1,\"1352\":1,\"1353\":1,\"1363\":1,\"3874\":1,\"4021\":1,\"4025\":1,\"4037\":1,\"4038\":1,\"4068\":1,\"4182\":1,\"4232\":1,\"4294\":1,\"4463\":2,\"4494\":1,\"4495\":1,\"4505\":1,\"4506\":1,\"4507\":1,\"4508\":1,\"4509\":1,\"4510\":1,\"4511\":1,\"4512\":1,\"4513\":1,\"4514\":1,\"4534\":2,\"4554\":1,\"4654\":2,\"4658\":1,\"4860\":1,\"4938\":1,\"5429\":2,\"5494\":1,\"5513\":1,\"5526\":1,\"5538\":3,\"5539\":2,\"5542\":1,\"5548\":1,\"5551\":1,\"5557\":1,\"5561\":1,\"5562\":1,\"5563\":1,\"5564\":1,\"5566\":1,\"5567\":1,\"5576\":1,\"5601\":1,\"5606\":1,\"5615\":1,\"5616\":1,\"5624\":3,\"5626\":1,\"5628\":1,\"5629\":2,\"5631\":2,\"5636\":5,\"5638\":3,\"5640\":2,\"5660\":3,\"5671\":2,\"5673\":1,\"5675\":1,\"5676\":1,\"5677\":1,\"5678\":1,\"5688\":1,\"6029\":1,\"6096\":2,\"6126\":2,\"6130\":9,\"6131\":1,\"7119\":1,\"7173\":2,\"7177\":1}}],[\"spm=1001\",{\"1\":{\"686\":1,\"947\":1,\"1493\":1,\"2136\":1,\"3390\":1,\"5347\":1,\"6946\":1,\"6955\":1}}],[\"simultaneously\",{\"1\":{\"3927\":1}}],[\"simple\",{\"1\":{\"1150\":1,\"5730\":1}}],[\"simpletrycatch\",{\"1\":{\"489\":1,\"491\":1,\"5376\":1,\"5378\":1}}],[\"sign\",{\"1\":{\"4043\":1,\"4062\":1}}],[\"signal\",{\"1\":{\"1971\":1,\"6252\":1}}],[\"sigkill\",{\"1\":{\"3322\":1,\"3323\":1}}],[\"sigterm\",{\"1\":{\"3322\":1}}],[\"sinal\",{\"1\":{\"3464\":1}}],[\"since\",{\"1\":{\"2240\":1,\"2242\":2,\"7063\":2}}],[\"singlethreadexecutor\",{\"1\":{\"3902\":1,\"3911\":1,\"6049\":1,\"6058\":1}}],[\"singlethreadexector\",{\"1\":{\"3878\":1,\"6033\":1}}],[\"singlethreadscheduledexecutor\",{\"1\":{\"3880\":1,\"3913\":1,\"6035\":1,\"6060\":1}}],[\"singleton\",{\"1\":{\"858\":6,\"1164\":1,\"1186\":1,\"5488\":6}}],[\"single\",{\"1\":{\"1062\":1,\"2868\":1,\"4043\":1,\"4062\":1,\"6540\":1}}],[\"size环形缓冲区写满之后\",{\"1\":{\"3241\":1}}],[\"size和capacity之间有啥关系\",{\"1\":{\"972\":1}}],[\"size++\",{\"1\":{\"816\":1}}],[\"size\",{\"1\":{\"816\":3,\"824\":2,\"961\":1,\"964\":1,\"975\":5,\"977\":1,\"988\":1,\"993\":10,\"995\":2,\"1140\":1,\"1466\":3,\"1474\":3,\"1797\":1,\"4857\":2,\"4999\":3,\"6302\":1,\"6914\":3,\"6923\":3}}],[\"site\",{\"1\":{\"83\":2,\"5196\":2}}],[\"software\",{\"1\":{\"3494\":1}}],[\"softreference\",{\"1\":{\"314\":1}}],[\"sourceforge\",{\"1\":{\"4857\":1}}],[\"source\",{\"1\":{\"3406\":1,\"3408\":1,\"3413\":1,\"4511\":1,\"4986\":1,\"6130\":1}}],[\"source=distribute\",{\"1\":{\"3390\":1,\"6955\":1}}],[\"so\",{\"1\":{\"2628\":1}}],[\"sockfd\",{\"1\":{\"1787\":1,\"6291\":1}}],[\"socket中再通过网络发送出去\",{\"1\":{\"3240\":1}}],[\"sockets\",{\"1\":{\"1975\":1,\"6256\":1}}],[\"socket\",{\"0\":{\"2638\":1},\"1\":{\"1768\":3,\"1772\":2,\"1775\":5,\"1776\":2,\"1778\":1,\"1779\":1,\"1791\":1,\"1792\":1,\"1794\":1,\"1797\":1,\"1800\":1,\"1801\":1,\"1804\":2,\"2434\":1,\"2435\":1,\"2461\":1,\"2463\":1,\"2586\":1,\"2643\":3,\"3466\":1,\"6259\":1,\"6265\":5,\"6266\":2,\"6269\":2,\"6274\":1,\"6275\":1,\"6296\":1,\"6297\":1,\"6299\":1,\"6302\":1,\"6305\":1,\"6307\":1,\"6310\":2}}],[\"sortandcache\",{\"1\":{\"4999\":3}}],[\"sorted\",{\"1\":{\"4088\":1,\"4999\":1}}],[\"sort\",{\"1\":{\"1474\":1,\"4271\":1,\"4275\":1,\"6923\":1}}],[\"something\",{\"1\":{\"472\":1,\"5367\":1}}],[\"symbolic\",{\"1\":{\"3413\":1}}],[\"syscall\",{\"1\":{\"3165\":1,\"6821\":1}}],[\"system\",{\"1\":{\"250\":4,\"401\":1,\"444\":2,\"480\":1,\"486\":2,\"634\":6,\"812\":1,\"816\":1,\"824\":1,\"826\":1,\"975\":2,\"980\":3,\"993\":8,\"1310\":1,\"1380\":1,\"1518\":2,\"1544\":1,\"1547\":2,\"1610\":3,\"1613\":3,\"1617\":3,\"2182\":4,\"3450\":1,\"3451\":2,\"3561\":2,\"3735\":1,\"3746\":1,\"3772\":2,\"3857\":1,\"3963\":1,\"3965\":2,\"3975\":2,\"4857\":1,\"4895\":2,\"5337\":2,\"5640\":1,\"5966\":1,\"5977\":1,\"6011\":1,\"6283\":1,\"6392\":1}}],[\"syn\",{\"0\":{\"2577\":2},\"1\":{\"2418\":2,\"2444\":1,\"2447\":1,\"2449\":1,\"2527\":4,\"2528\":3,\"2540\":5,\"2542\":1,\"2543\":3,\"2546\":1,\"2547\":1,\"2553\":2,\"2555\":3,\"2556\":2,\"2571\":2,\"2573\":2,\"2574\":2,\"2576\":1,\"2578\":3,\"2580\":1,\"2583\":2,\"2584\":1,\"2585\":1,\"2588\":2,\"2589\":1}}],[\"syncarticlelistener\",{\"1\":{\"4985\":1,\"4986\":2}}],[\"synchronousqueue\",{\"1\":{\"3879\":2,\"3912\":1,\"6034\":2,\"6059\":1}}],[\"synchronize修饰静态的方法或指定锁对象为class对象\",{\"1\":{\"3745\":1}}],[\"synchronized关键字原理\",{\"1\":{\"5968\":1,\"5978\":1}}],[\"synchronized的使用\",{\"1\":{\"3753\":1}}],[\"synchronized的效率会远小于lock\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"synchronized修饰普通方法\",{\"1\":{\"3745\":1}}],[\"synchronized修饰的方法\",{\"1\":{\"3732\":1}}],[\"synchronizeddemo2\",{\"1\":{\"3746\":1,\"5977\":1}}],[\"synchronizeddemo\",{\"1\":{\"3735\":1,\"3736\":3,\"5966\":1,\"5967\":3}}],[\"synchronized原理\",{\"0\":{\"3728\":1,\"5964\":1}}],[\"synchronized是悲观锁\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"synchronized和cas实现加锁效果\",{\"1\":{\"3663\":1,\"5826\":1}}],[\"synchronized和lock效率没差\",{\"1\":{\"2041\":1,\"5746\":1}}],[\"synchronizedlist可以指定锁定的对象\",{\"1\":{\"848\":1}}],[\"synchronizedlist有很好的扩展和兼容功能\",{\"1\":{\"846\":1}}],[\"synchronizedlist和vector最主要的区别\",{\"1\":{\"845\":1}}],[\"synchronizedlist和vector的一个比较明显区别就是一个使用了同步代码块\",{\"1\":{\"829\":1}}],[\"synchronizedlist和vector的区别\",{\"0\":{\"803\":1}}],[\"synchronizedlist中实现的类并没有都使用synchronized同步代码块\",{\"1\":{\"842\":1}}],[\"synchronizedlist的同步代码块锁定的是mutex对象\",{\"1\":{\"840\":1}}],[\"synchronizedlist的实现\",{\"1\":{\"813\":1,\"821\":1}}],[\"synchronizedlist里面实现的方法几乎都是使用同步代码块包上list的方法\",{\"1\":{\"829\":1}}],[\"synchronizedlist使用同步代码块实现\",{\"1\":{\"818\":1}}],[\"synchronizedlist\",{\"1\":{\"805\":1,\"808\":1,\"844\":1}}],[\"synchronizedlist是java\",{\"1\":{\"804\":1}}],[\"synchronized\",{\"0\":{\"2040\":1,\"3703\":1,\"5745\":1,\"5965\":1,\"5976\":1},\"1\":{\"444\":1,\"790\":1,\"812\":1,\"814\":1,\"822\":1,\"826\":1,\"858\":2,\"859\":1,\"1980\":1,\"3697\":1,\"3735\":2,\"3737\":1,\"3746\":2,\"3747\":3,\"3750\":1,\"3751\":2,\"3753\":2,\"3778\":1,\"3780\":2,\"3781\":1,\"3782\":1,\"3785\":1,\"3820\":1,\"3831\":1,\"4193\":1,\"5337\":1,\"5488\":2,\"5489\":1,\"5789\":1,\"5791\":2,\"5792\":1,\"5793\":1,\"5796\":1,\"5866\":1,\"5938\":1,\"5947\":1,\"5966\":2,\"5969\":1,\"5977\":2,\"5979\":3,\"5982\":1,\"5983\":2,\"5985\":1,\"6239\":1}}],[\"synchronization\",{\"1\":{\"790\":1}}],[\"syncookies\",{\"1\":{\"2591\":1}}],[\"sync\",{\"1\":{\"1517\":1,\"1533\":1,\"3787\":4,\"3789\":1,\"3845\":3,\"4895\":1,\"4984\":1,\"4986\":2,\"5798\":4,\"5800\":1,\"5961\":3}}],[\"success\",{\"1\":{\"4979\":1}}],[\"suggestion\",{\"1\":{\"4857\":4}}],[\"suppresswarnings\",{\"1\":{\"3765\":1}}],[\"supported\",{\"1\":{\"1244\":1,\"5596\":1}}],[\"supports\",{\"1\":{\"1240\":1,\"5592\":1}}],[\"sum\",{\"1\":{\"1625\":5,\"1626\":3}}],[\"submitted\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"submit\",{\"1\":{\"3855\":8,\"4857\":1,\"6009\":8}}],[\"subreactor\",{\"1\":{\"1844\":1,\"1845\":1,\"6386\":1,\"6387\":1}}],[\"sublist\",{\"1\":{\"1474\":1,\"4999\":1,\"6923\":1}}],[\"subscriptions\",{\"1\":{\"1474\":3,\"6923\":3}}],[\"subscription>\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"subtree\",{\"1\":{\"647\":1}}],[\"subclasses\",{\"1\":{\"434\":1,\"5325\":1}}],[\"sun\",{\"1\":{\"444\":3,\"1016\":1,\"1062\":1,\"3527\":3,\"5337\":3}}],[\"survivor空间放不下\",{\"1\":{\"404\":1}}],[\"survivor区\",{\"1\":{\"253\":1}}],[\"survivor\",{\"1\":{\"230\":1,\"253\":3,\"257\":1,\"258\":1,\"333\":5,\"334\":2}}],[\"seo\",{\"1\":{\"7079\":2}}],[\"selete\",{\"1\":{\"6283\":1}}],[\"selectlist\",{\"1\":{\"4857\":1}}],[\"selectbyid\",{\"1\":{\"4755\":1,\"4857\":3}}],[\"select>\",{\"1\":{\"4748\":1}}],[\"select\",{\"0\":{\"6735\":2},\"1\":{\"1127\":3,\"1768\":2,\"1769\":1,\"1770\":1,\"1771\":1,\"1772\":1,\"1774\":1,\"1775\":2,\"1776\":1,\"1780\":1,\"1821\":1,\"1823\":1,\"1835\":1,\"1843\":1,\"1844\":1,\"2843\":1,\"2893\":2,\"2898\":1,\"2899\":1,\"2901\":2,\"2910\":2,\"2911\":1,\"2912\":2,\"2932\":1,\"2938\":1,\"2939\":2,\"3012\":1,\"3013\":2,\"3022\":1,\"3083\":2,\"3084\":1,\"3085\":1,\"3086\":1,\"4748\":1,\"4857\":1,\"5708\":3,\"6261\":1,\"6262\":1,\"6264\":1,\"6265\":2,\"6266\":1,\"6281\":1,\"6350\":1,\"6352\":1,\"6367\":1,\"6385\":1,\"6386\":1,\"6515\":1,\"6565\":2,\"6570\":1,\"6571\":1,\"6573\":2,\"6582\":2,\"6583\":1,\"6584\":2,\"6604\":1,\"6610\":1,\"6611\":2,\"6684\":1,\"6685\":2,\"6736\":1,\"6737\":1,\"6738\":1}}],[\"selectone\",{\"1\":{\"1097\":1,\"4750\":1}}],[\"sexnx\",{\"1\":{\"4903\":1,\"7273\":1}}],[\"semophore\",{\"1\":{\"3462\":1}}],[\"semaphore\",{\"1\":{\"1982\":1,\"3633\":1,\"5874\":1,\"6241\":1}}],[\"semaphores\",{\"1\":{\"1973\":1,\"6254\":1}}],[\"sed\",{\"1\":{\"3447\":1}}],[\"searcharticlevo\",{\"1\":{\"4984\":2,\"4986\":5}}],[\"search\",{\"1\":{\"3307\":1,\"4986\":2}}],[\"second\",{\"1\":{\"5006\":1}}],[\"seconds\",{\"1\":{\"4910\":1}}],[\"secondary\",{\"1\":{\"2789\":1,\"6459\":1}}],[\"section\",{\"1\":{\"1978\":1}}],[\"sequencenumber\",{\"1\":{\"6953\":1}}],[\"seq\",{\"1\":{\"2540\":2}}],[\"sensitivelist\",{\"1\":{\"4857\":2}}],[\"sensitivewordutil\",{\"1\":{\"4857\":3}}],[\"sentinels\",{\"1\":{\"3210\":1}}],[\"sentinel\",{\"1\":{\"3192\":1}}],[\"sent\",{\"1\":{\"2527\":1}}],[\"sendfile\",{\"0\":{\"6300\":1},\"1\":{\"1784\":1,\"1796\":1,\"1797\":1,\"1802\":1,\"1812\":2,\"6287\":1,\"6301\":1,\"6302\":1,\"6308\":1,\"6319\":2}}],[\"sending\",{\"1\":{\"1518\":1}}],[\"send\",{\"1\":{\"1515\":1,\"1517\":1,\"1518\":1,\"1520\":1,\"1521\":1,\"1544\":1,\"1547\":1,\"1821\":1,\"1826\":1,\"1840\":1,\"1846\":1,\"4979\":1,\"4984\":1,\"6323\":1,\"6350\":1,\"6355\":1,\"6372\":1,\"6388\":1}}],[\"severhello\",{\"1\":{\"2324\":1,\"2325\":1}}],[\"sessionfactory\",{\"1\":{\"4750\":2}}],[\"session\",{\"1\":{\"3105\":1,\"6761\":1}}],[\"ses\",{\"1\":{\"2060\":2,\"5765\":2}}],[\"seek\",{\"1\":{\"1756\":1}}],[\"separating\",{\"1\":{\"1103\":1}}],[\"segmentation\",{\"1\":{\"1640\":1}}],[\"segmentmask\",{\"1\":{\"1062\":1}}],[\"segmentshift\",{\"1\":{\"1062\":1}}],[\"segment\",{\"1\":{\"1062\":1}}],[\"se\",{\"1\":{\"556\":1,\"558\":1,\"560\":1,\"642\":1,\"711\":1,\"765\":1}}],[\"setoption\",{\"1\":{\"4910\":1}}],[\"set<string>\",{\"1\":{\"4895\":2}}],[\"setid\",{\"1\":{\"4857\":1}}],[\"setinitialvalue\",{\"1\":{\"3765\":1}}],[\"setcontent\",{\"1\":{\"4984\":1}}],[\"setcorepoolsize\",{\"1\":{\"1380\":1}}],[\"setcreatedtime\",{\"1\":{\"4857\":1}}],[\"setchannelname\",{\"1\":{\"4857\":1}}],[\"setlayout\",{\"1\":{\"4857\":1}}],[\"setreason\",{\"1\":{\"4857\":1}}],[\"setscore\",{\"1\":{\"4999\":1}}],[\"setstaticurl\",{\"1\":{\"4984\":1}}],[\"setstatus\",{\"1\":{\"4857\":1}}],[\"setsize\",{\"1\":{\"1770\":1}}],[\"set或get方法时才创建它们\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"setuid\",{\"1\":{\"3484\":1}}],[\"setnx\",{\"1\":{\"3107\":1,\"4904\":1,\"6763\":1,\"7274\":1}}],[\"setheader\",{\"1\":{\"2096\":2}}],[\"setqueuecapacity\",{\"1\":{\"1380\":1}}],[\"setmaxpoolsize\",{\"1\":{\"1380\":1}}],[\"setthreadnameprefix\",{\"1\":{\"1380\":1}}],[\"setter循环依赖注入解决方案\",{\"1\":{\"1254\":1,\"5606\":1}}],[\"setting\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"setauthorname\",{\"1\":{\"4857\":1}}],[\"setauthorid\",{\"1\":{\"4857\":1}}],[\"setarticleid\",{\"1\":{\"4857\":1}}],[\"setaccessable\",{\"0\":{\"3943\":1}}],[\"setaccessible\",{\"1\":{\"530\":1,\"975\":2,\"980\":3,\"993\":8,\"5418\":1}}],[\"setapplicationcontext\",{\"1\":{\"1181\":1}}],[\"setentity\",{\"1\":{\"2096\":1}}],[\"setenvironment\",{\"1\":{\"1179\":1}}],[\"setembeddedvalueresolver\",{\"1\":{\"1180\":1}}],[\"setbeanfactory\",{\"1\":{\"1177\":1}}],[\"setbeanclassloader\",{\"1\":{\"1176\":1}}],[\"setbeanname\",{\"1\":{\"1175\":1}}],[\"set等的父接口\",{\"1\":{\"742\":1}}],[\"set如何保证元素不重复\",{\"0\":{\"733\":1}}],[\"set在元素插入时是要有一定的方法来判断元素是否重复的\",{\"1\":{\"732\":1}}],[\"set可以用来去重\",{\"1\":{\"732\":1}}],[\"set特点\",{\"1\":{\"731\":1}}],[\"set都是继承自collection接口\",{\"1\":{\"728\":1}}],[\"set和list区别\",{\"0\":{\"727\":1}}],[\"set还有一个重要的实现类treeset\",{\"1\":{\"718\":1}}],[\"set\",{\"0\":{\"712\":1,\"4124\":1,\"5432\":1,\"6772\":1},\"1\":{\"378\":3,\"2940\":1,\"3094\":1,\"3118\":1,\"3119\":2,\"3120\":1,\"3251\":1,\"3758\":1,\"3763\":1,\"3765\":2,\"3772\":1,\"3857\":1,\"3940\":1,\"4088\":1,\"4382\":1,\"4903\":1,\"4910\":3,\"4979\":1,\"4999\":1,\"5990\":1,\"5994\":1,\"5996\":2,\"6011\":1,\"6612\":1,\"6750\":1,\"6774\":1,\"6775\":2,\"6776\":1,\"6856\":1,\"7273\":1}}],[\"serviceimpl<usermapper\",{\"1\":{\"4755\":1}}],[\"service\",{\"1\":{\"2212\":1,\"4182\":1,\"4553\":1,\"4554\":3,\"4555\":1,\"4755\":1,\"4857\":5,\"4931\":1,\"4935\":1,\"4981\":1,\"4992\":1,\"4994\":1,\"4997\":1,\"4999\":4}}],[\"servlet相关配置变量\",{\"1\":{\"1383\":1}}],[\"server3\",{\"1\":{\"4617\":1,\"4620\":5,\"4623\":2,\"4625\":2,\"6190\":1,\"6193\":5,\"6200\":2,\"6203\":2}}],[\"server2\",{\"1\":{\"4616\":4,\"4618\":1,\"4623\":2,\"4627\":2,\"6189\":4,\"6191\":1,\"6200\":2,\"6205\":2}}],[\"server1也会\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"server1\",{\"1\":{\"4615\":3,\"4616\":2,\"4620\":5,\"4623\":3,\"4625\":3,\"4627\":1,\"6188\":3,\"6189\":2,\"6193\":5,\"6200\":3,\"6203\":3,\"6205\":1}}],[\"servers\",{\"1\":{\"1518\":1}}],[\"server\",{\"1\":{\"351\":1,\"1325\":2,\"2209\":1,\"2327\":1,\"2337\":1,\"2387\":1,\"2389\":1,\"2390\":2,\"2391\":1,\"2392\":1,\"2393\":1,\"2394\":2,\"2528\":1,\"2529\":1,\"3155\":1,\"3181\":1,\"3182\":1,\"3183\":1,\"3185\":1,\"3188\":1,\"3300\":1,\"3307\":1,\"3577\":1,\"3579\":2,\"4618\":1,\"4619\":1,\"4620\":2,\"4621\":1,\"4627\":2,\"4919\":1,\"5017\":2,\"5651\":1,\"6086\":1,\"6191\":1,\"6192\":1,\"6193\":2,\"6194\":1,\"6205\":2,\"6811\":1,\"6839\":1,\"6840\":1,\"6841\":1,\"6843\":1,\"6846\":1,\"7069\":1,\"7081\":1,\"7083\":1,\"7084\":1,\"7088\":1,\"7093\":1,\"7094\":2,\"7095\":1,\"7096\":1,\"7097\":1,\"7098\":2}}],[\"serializable\",{\"1\":{\"1235\":1,\"3000\":1,\"3786\":1,\"5587\":1,\"5797\":1,\"6672\":1}}],[\"serialized\",{\"1\":{\"790\":1}}],[\"serialize\",{\"1\":{\"787\":1,\"790\":1}}],[\"serialdata\",{\"1\":{\"787\":1}}],[\"serial\",{\"1\":{\"345\":1,\"348\":1,\"350\":1,\"351\":1,\"357\":1}}],[\"store\",{\"1\":{\"3716\":1,\"5915\":1}}],[\"stop\",{\"1\":{\"363\":1,\"3307\":1,\"3322\":1,\"3324\":1}}],[\"stereotype\",{\"1\":{\"2177\":1,\"2185\":1,\"4857\":1,\"4981\":1,\"4986\":1,\"4997\":1,\"4999\":1}}],[\"sticky是\",{\"1\":{\"1485\":1,\"6937\":1}}],[\"stickyassignor的分配策略\",{\"1\":{\"1492\":1,\"6945\":1}}],[\"stickyassignor算法比较复杂\",{\"1\":{\"1489\":1,\"6941\":1}}],[\"stickyassignor分区分配算法\",{\"1\":{\"1485\":1,\"6937\":1}}],[\"stickyassignor\",{\"1\":{\"1469\":1,\"1484\":1,\"6917\":1,\"6936\":1}}],[\"stuent\",{\"1\":{\"2880\":1,\"6552\":1}}],[\"student\",{\"1\":{\"1127\":2,\"2879\":1,\"2880\":1,\"5708\":2,\"6551\":1,\"6552\":1}}],[\"stuff\",{\"1\":{\"787\":1}}],[\"streamencoder\",{\"1\":{\"3527\":6}}],[\"stream\",{\"1\":{\"787\":1,\"790\":1,\"2362\":6,\"2363\":1,\"2365\":1,\"4511\":1,\"4857\":3,\"4999\":3,\"6130\":1}}],[\"stringredistemplate\",{\"1\":{\"4910\":1}}],[\"stringutils\",{\"1\":{\"4857\":3,\"4895\":1,\"4981\":2,\"4986\":2}}],[\"stringbuffer\",{\"1\":{\"4300\":1,\"7125\":1}}],[\"stringbuilder\",{\"1\":{\"4300\":1,\"4857\":5,\"7125\":1}}],[\"stringfunnel\",{\"1\":{\"2177\":1,\"2182\":1,\"2185\":1}}],[\"stringvalueresolver\",{\"1\":{\"1180\":1}}],[\"stringhash32\",{\"1\":{\"1016\":1,\"1062\":1}}],[\"string>\",{\"1\":{\"503\":1,\"505\":1,\"507\":2,\"513\":2,\"521\":1,\"975\":2,\"980\":6,\"993\":1,\"1380\":1,\"1518\":2,\"1610\":2,\"1613\":2,\"1617\":2,\"5390\":1,\"5393\":1,\"5395\":2,\"5401\":2,\"5409\":1}}],[\"string\",{\"0\":{\"6753\":1},\"1\":{\"250\":1,\"281\":1,\"290\":1,\"431\":1,\"432\":1,\"434\":1,\"435\":2,\"444\":1,\"480\":2,\"507\":1,\"513\":1,\"536\":1,\"538\":1,\"541\":1,\"543\":1,\"1016\":2,\"1062\":2,\"1201\":1,\"1256\":1,\"1329\":1,\"1466\":2,\"1474\":2,\"2096\":2,\"2177\":2,\"2182\":1,\"2185\":2,\"2188\":1,\"3094\":1,\"3099\":1,\"3772\":1,\"3855\":1,\"3967\":1,\"3979\":1,\"4857\":9,\"4860\":1,\"4895\":3,\"4910\":3,\"4938\":1,\"4981\":1,\"4984\":2,\"4986\":1,\"4999\":2,\"5011\":1,\"5322\":1,\"5323\":1,\"5325\":1,\"5326\":2,\"5337\":1,\"5395\":1,\"5401\":1,\"5423\":2,\"5425\":2,\"5553\":1,\"5608\":1,\"6009\":1,\"6750\":1,\"6755\":1,\"6914\":2,\"6923\":2}}],[\"stw\",{\"1\":{\"363\":1}}],[\"staged\",{\"1\":{\"3361\":2}}],[\"stage的区别\",{\"0\":{\"3354\":1}}],[\"stage\",{\"1\":{\"3332\":1,\"3334\":1,\"3355\":1,\"3359\":1,\"3360\":1,\"3361\":2}}],[\"started\",{\"1\":{\"3579\":1}}],[\"starter模块\",{\"1\":{\"4068\":1}}],[\"starter解决的是依赖管理配置复杂的问题\",{\"1\":{\"1348\":1,\"5673\":1}}],[\"starter的目的也是简化配置\",{\"1\":{\"1348\":1,\"5673\":1}}],[\"starter\",{\"0\":{\"1347\":1,\"5672\":1},\"1\":{\"1290\":1,\"1295\":1,\"1345\":1,\"1348\":1,\"1350\":1,\"1351\":1,\"1352\":1,\"1353\":2,\"1361\":1,\"4068\":3,\"4545\":1,\"5631\":1,\"5638\":1,\"5670\":1,\"5673\":1,\"5675\":1,\"5676\":1,\"5677\":1,\"5678\":2,\"5686\":1}}],[\"start\",{\"1\":{\"1474\":3,\"2682\":1,\"2940\":1,\"3307\":1,\"6612\":1,\"6923\":3}}],[\"start2\",{\"1\":{\"634\":2}}],[\"start1\",{\"1\":{\"634\":2}}],[\"status时都让这些文件显示出来\",{\"0\":{\"3378\":1}}],[\"status\",{\"1\":{\"3338\":1,\"4850\":2,\"4857\":1,\"4979\":1,\"7239\":2}}],[\"statement\",{\"1\":{\"2933\":1,\"4943\":1,\"6605\":1}}],[\"statements\",{\"1\":{\"472\":1,\"5367\":1}}],[\"state\",{\"1\":{\"787\":1,\"790\":1,\"3527\":1}}],[\"static\",{\"1\":{\"250\":1,\"472\":1,\"475\":1,\"480\":1,\"486\":2,\"489\":1,\"491\":1,\"858\":2,\"901\":1,\"967\":1,\"971\":1,\"1016\":1,\"1068\":1,\"1076\":1,\"1256\":1,\"2182\":1,\"3772\":4,\"3773\":1,\"3855\":1,\"3967\":1,\"3979\":2,\"4860\":1,\"4938\":1,\"5367\":1,\"5370\":1,\"5376\":1,\"5378\":1,\"5488\":2,\"5519\":1,\"5608\":1,\"6009\":1}}],[\"stack<>\",{\"1\":{\"577\":1}}],[\"stack<integer>\",{\"1\":{\"577\":1}}],[\"stack\",{\"0\":{\"565\":1,\"571\":1,\"595\":1},\"1\":{\"210\":1,\"212\":1,\"567\":1,\"570\":1,\"572\":1,\"575\":2,\"577\":4,\"579\":2,\"598\":1,\"601\":1,\"611\":2,\"612\":1,\"616\":2,\"619\":1,\"620\":2,\"621\":1,\"624\":1,\"625\":2,\"639\":1}}],[\"stackoverflowerror\",{\"1\":{\"207\":1}}],[\"s1\",{\"1\":{\"230\":1}}],[\"ln\",{\"1\":{\"3413\":1}}],[\"l\",{\"1\":{\"3395\":1,\"3426\":1,\"3509\":1,\"3600\":2,\"3736\":1,\"5967\":1}}],[\"ls\",{\"1\":{\"3395\":1,\"3422\":1,\"3447\":1,\"3498\":1}}],[\"lpush\",{\"1\":{\"3115\":1,\"6771\":1}}],[\"lt\",{\"1\":{\"1777\":1,\"6272\":1}}],[\"lfu\",{\"1\":{\"1724\":1,\"1744\":1,\"3188\":1,\"3189\":1,\"6846\":1,\"6847\":1}}],[\"lru\",{\"1\":{\"1694\":2,\"1695\":1,\"1697\":3,\"1701\":3,\"1704\":1,\"1710\":1,\"1711\":1,\"1722\":1,\"1733\":1,\"1734\":1,\"1735\":2,\"1737\":1,\"3181\":1,\"3184\":1,\"6839\":1,\"6842\":1}}],[\"lz4\",{\"1\":{\"1568\":1,\"1573\":1}}],[\"less\",{\"1\":{\"3415\":1,\"3422\":1}}],[\"leadnews\",{\"1\":{\"4548\":1,\"4858\":2,\"4899\":1,\"4918\":1,\"4923\":1,\"4924\":1,\"4929\":1,\"4933\":1,\"7269\":1}}],[\"leader\",{\"0\":{\"4612\":1},\"1\":{\"1443\":1,\"1444\":2,\"1445\":5,\"1530\":1,\"3211\":1,\"3214\":1,\"4586\":3,\"4587\":3,\"4593\":1,\"4594\":2,\"4596\":5,\"4597\":2,\"4598\":1,\"4599\":3,\"4600\":3,\"4602\":1,\"4603\":1,\"4604\":1,\"4605\":1,\"4606\":2,\"4608\":4,\"4610\":2,\"4613\":4,\"4614\":3,\"4615\":1,\"4616\":4,\"4618\":1,\"4620\":1,\"4623\":2,\"4625\":1,\"4627\":4,\"4631\":1,\"4632\":1,\"4633\":1,\"6169\":5,\"6170\":3,\"6174\":1,\"6175\":1,\"6176\":1,\"6180\":2,\"6181\":2,\"6182\":1,\"6183\":3,\"6184\":1,\"6186\":5,\"6187\":3,\"6188\":1,\"6189\":4,\"6191\":1,\"6193\":1,\"6195\":1,\"6197\":1,\"6198\":2,\"6200\":2,\"6203\":1,\"6205\":4}}],[\"leaf节点不同\",{\"1\":{\"4248\":1}}],[\"least\",{\"1\":{\"3181\":1,\"3184\":1,\"3188\":1,\"3189\":1,\"6839\":1,\"6842\":1,\"6846\":1,\"6847\":1}}],[\"len\",{\"1\":{\"1787\":2,\"2111\":2,\"3101\":1,\"3102\":1,\"3775\":3,\"6291\":2,\"6757\":1,\"6758\":1}}],[\"length\",{\"1\":{\"787\":3,\"812\":1,\"1011\":1,\"1016\":2,\"1017\":1,\"1029\":1,\"1044\":1,\"1048\":1,\"1069\":1,\"1072\":1,\"1474\":2,\"1625\":1,\"2088\":1,\"2091\":1,\"2092\":1,\"2094\":1,\"2096\":2,\"2099\":1,\"2215\":2,\"3775\":1,\"4857\":1,\"6923\":2}}],[\"level\",{\"1\":{\"1777\":1,\"2733\":2,\"6272\":1,\"6402\":2}}],[\"let\",{\"1\":{\"824\":1,\"826\":1}}],[\"lk\",{\"1\":{\"639\":1}}],[\"largest\",{\"1\":{\"3927\":1}}],[\"landin\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"lang3\",{\"1\":{\"4857\":1,\"4981\":1,\"4986\":1}}],[\"language\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"lang=zh\",{\"1\":{\"1368\":1,\"5646\":1}}],[\"lang\",{\"1\":{\"443\":1,\"491\":2,\"911\":1,\"2119\":1,\"3527\":1,\"3586\":1,\"3741\":1,\"4748\":1,\"5336\":1,\"5378\":2,\"5529\":1,\"5973\":1}}],[\"last\",{\"1\":{\"2240\":1,\"2241\":1,\"2242\":3,\"2247\":4,\"2597\":1}}],[\"lambda\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"label\",{\"1\":{\"480\":1}}],[\"lombok\",{\"1\":{\"4857\":1,\"4981\":1,\"4986\":1,\"4997\":1,\"4999\":1}}],[\"low\",{\"1\":{\"3032\":2,\"3033\":1,\"3034\":1,\"3047\":1,\"3051\":2,\"3052\":1,\"3053\":1,\"6698\":2,\"6700\":1,\"6701\":1}}],[\"looking\",{\"1\":{\"4615\":1,\"4616\":1,\"4617\":1,\"4619\":1,\"6188\":1,\"6189\":1,\"6190\":1,\"6192\":1,\"6198\":1}}],[\"look算法\",{\"0\":{\"1762\":1}}],[\"look\",{\"1\":{\"1752\":2,\"1763\":1,\"1764\":1}}],[\"lookaside\",{\"1\":{\"1672\":1}}],[\"locked\",{\"1\":{\"3527\":5}}],[\"lock\",{\"0\":{\"2040\":1,\"2947\":1,\"2951\":1,\"2955\":1,\"5745\":1,\"6619\":1,\"6623\":1,\"6627\":1},\"1\":{\"1723\":1,\"1980\":1,\"1981\":1,\"2737\":1,\"2854\":1,\"2880\":2,\"2912\":1,\"2913\":2,\"2927\":1,\"2928\":1,\"2929\":1,\"2930\":1,\"2933\":1,\"2935\":1,\"2939\":1,\"2944\":1,\"2945\":1,\"2946\":3,\"2948\":1,\"2952\":1,\"2956\":3,\"2957\":1,\"2958\":3,\"2959\":2,\"2962\":1,\"3013\":3,\"3022\":1,\"3785\":1,\"3786\":1,\"4910\":1,\"5796\":1,\"5797\":1,\"6239\":1,\"6240\":1,\"6406\":1,\"6526\":1,\"6552\":2,\"6584\":1,\"6585\":2,\"6599\":1,\"6600\":1,\"6601\":1,\"6602\":1,\"6605\":1,\"6607\":1,\"6611\":1,\"6616\":1,\"6617\":1,\"6618\":3,\"6620\":1,\"6624\":1,\"6628\":3,\"6629\":1,\"6630\":3,\"6631\":2,\"6634\":1,\"6685\":3}}],[\"locking\",{\"1\":{\"857\":1,\"2733\":2,\"5487\":1,\"6402\":2}}],[\"locate\",{\"1\":{\"3417\":1}}],[\"location\",{\"1\":{\"2202\":1}}],[\"locations\",{\"1\":{\"1062\":1,\"4826\":1,\"4974\":1}}],[\"localstorage\",{\"1\":{\"4815\":1,\"7212\":1}}],[\"localvariable对象的大小\",{\"1\":{\"3773\":1}}],[\"localvariable>的强引用\",{\"1\":{\"3773\":1}}],[\"localvariable\",{\"1\":{\"3772\":6}}],[\"localhost\",{\"1\":{\"1345\":1,\"3580\":1,\"5041\":1,\"5047\":1,\"5670\":1}}],[\"local\",{\"1\":{\"211\":1,\"271\":1,\"3772\":1}}],[\"load\",{\"1\":{\"961\":1,\"967\":1,\"3164\":1,\"6820\":1}}],[\"loadfactor两个参数的方法\",{\"1\":{\"998\":1}}],[\"loadfactor是装载因子\",{\"1\":{\"990\":1,\"1000\":1}}],[\"loadfactor和threshold又是干啥的\",{\"1\":{\"972\":1}}],[\"loadfactor的默认值为0\",{\"1\":{\"967\":1}}],[\"loadfactor\",{\"1\":{\"961\":1,\"966\":1,\"989\":1,\"993\":10,\"995\":2,\"1000\":1}}],[\"loader\",{\"1\":{\"901\":2,\"5519\":2}}],[\"loadclass\",{\"1\":{\"431\":1,\"436\":1,\"443\":1,\"444\":2,\"448\":1,\"5322\":1,\"5327\":1,\"5336\":1,\"5337\":2,\"5341\":1}}],[\"loading\",{\"1\":{\"409\":1,\"5298\":1}}],[\"longvalue\",{\"1\":{\"4857\":1}}],[\"long\",{\"1\":{\"250\":2,\"444\":2,\"634\":4,\"3772\":2,\"3857\":1,\"4755\":1,\"4824\":1,\"4857\":1,\"4910\":1,\"4933\":1,\"4935\":1,\"4972\":1,\"5337\":2,\"6011\":1}}],[\"log功能\",{\"1\":{\"5016\":1}}],[\"logger\",{\"1\":{\"5011\":1}}],[\"loggingaspect\",{\"1\":{\"4031\":1}}],[\"logafter\",{\"1\":{\"4031\":1}}],[\"logbefore\",{\"1\":{\"4031\":1}}],[\"log1\",{\"1\":{\"3625\":1}}],[\"log如下图所示\",{\"1\":{\"3052\":1}}],[\"log中的db\",{\"1\":{\"3045\":1}}],[\"logic\",{\"1\":{\"1103\":1}}],[\"log2\",{\"1\":{\"722\":1,\"771\":1,\"3625\":1}}],[\"log2n\",{\"1\":{\"680\":1,\"681\":1}}],[\"logn\",{\"1\":{\"689\":1,\"691\":2,\"702\":1,\"705\":1,\"1065\":1,\"1775\":1,\"5456\":1,\"5458\":2,\"5470\":1,\"5473\":1,\"6265\":1}}],[\"log\",{\"0\":{\"3037\":1,\"6705\":1},\"1\":{\"478\":2,\"921\":1,\"2744\":1,\"2976\":1,\"2977\":1,\"3019\":2,\"3029\":1,\"3038\":1,\"3040\":1,\"3041\":3,\"3042\":3,\"3625\":2,\"4895\":1,\"4981\":1,\"4986\":2,\"4997\":2,\"5015\":1,\"5017\":1,\"5021\":1,\"5373\":2,\"5438\":1,\"5651\":2,\"6413\":1,\"6648\":1,\"6649\":1,\"6691\":2,\"6695\":1,\"6706\":1,\"6708\":1,\"6709\":3,\"6710\":3}}],[\"logs\",{\"1\":{\"378\":2,\"3032\":1,\"5017\":1,\"6698\":1}}],[\"logy\",{\"1\":{\"94\":2,\"5207\":2}}],[\"logout\",{\"1\":{\"5004\":1,\"7286\":1}}],[\"logo\",{\"1\":{\"83\":2,\"5196\":2}}],[\"live\",{\"1\":{\"3566\":2,\"3567\":1,\"3596\":2,\"3597\":1}}],[\"like查询是以\",{\"1\":{\"4204\":1}}],[\"like\",{\"1\":{\"2819\":1,\"2846\":2,\"4999\":1,\"6491\":1,\"6518\":2}}],[\"limit\",{\"1\":{\"1127\":1,\"3032\":3,\"3033\":1,\"3034\":3,\"3046\":1,\"3047\":1,\"3051\":4,\"3052\":2,\"3053\":3,\"3586\":1,\"4959\":1,\"5708\":1,\"6698\":3,\"6700\":1,\"6701\":3,\"6740\":1}}],[\"list和zset\",{\"1\":{\"4873\":1,\"7251\":1}}],[\"list里面存的是学生类\",{\"1\":{\"4383\":1}}],[\"list用来保证插入的顺序和存储的顺序一致\",{\"1\":{\"4125\":1,\"4126\":1}}],[\"listpack\",{\"1\":{\"3128\":1,\"3136\":1,\"6784\":1,\"6792\":1}}],[\"list中的活跃事务\",{\"1\":{\"3053\":1}}],[\"list集合的值是1\",{\"1\":{\"3051\":1}}],[\"list列表中下一个事务id\",{\"1\":{\"3051\":1}}],[\"list列表中事务id最小的id\",{\"1\":{\"3051\":1}}],[\"list来维护事务2执行快照读那刻系统正活跃的事务id\",{\"1\":{\"3051\":1}}],[\"listen\",{\"0\":{\"2644\":1},\"1\":{\"2436\":1,\"2440\":1,\"2526\":1,\"2646\":1}}],[\"listener\",{\"1\":{\"1342\":1,\"4981\":1,\"4986\":1,\"5666\":1}}],[\"list<wmchannel>\",{\"1\":{\"4999\":1}}],[\"list<wmsensitive>\",{\"1\":{\"4857\":1}}],[\"list<hotarticlevo>\",{\"1\":{\"4999\":6}}],[\"list<aparticle>\",{\"1\":{\"4999\":2}}],[\"list<map>\",{\"1\":{\"4857\":1}}],[\"list<byte\",{\"1\":{\"4857\":1}}],[\"list<topicpartition>\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"list<topicpartition>>\",{\"1\":{\"1474\":2,\"6923\":2}}],[\"list<partitioninfo>\",{\"1\":{\"1466\":2,\"6914\":2}}],[\"list<string>>\",{\"1\":{\"1474\":2,\"6923\":2}}],[\"list<string>\",{\"1\":{\"808\":1,\"1474\":1,\"4857\":5,\"6923\":1}}],[\"listiterator\",{\"1\":{\"842\":1}}],[\"list1\",{\"1\":{\"808\":1}}],[\"list2\",{\"1\":{\"808\":1}}],[\"list主要有arraylist\",{\"1\":{\"775\":1}}],[\"list常见面试题\",{\"0\":{\"773\":1}}],[\"list特点\",{\"1\":{\"729\":1}}],[\"list\",{\"0\":{\"740\":1,\"5431\":1,\"6764\":1},\"1\":{\"556\":1,\"558\":1,\"560\":1,\"642\":1,\"728\":1,\"805\":2,\"808\":3,\"814\":1,\"822\":1,\"1701\":2,\"1702\":1,\"1703\":1,\"1704\":4,\"1706\":2,\"3048\":1,\"3050\":1,\"3052\":1,\"3094\":1,\"3110\":1,\"3111\":3,\"3112\":1,\"3113\":1,\"3115\":1,\"4929\":1,\"4931\":1,\"4994\":1,\"4999\":1,\"6750\":1,\"6766\":1,\"6767\":3,\"6768\":1,\"6769\":1,\"6771\":1}}],[\"linger\",{\"1\":{\"2628\":1}}],[\"linux常用命令\",{\"0\":{\"5735\":1}}],[\"linux如何给文件权限\",{\"1\":{\"4342\":1,\"7167\":1}}],[\"linux内核就是基于这个策略实现的\",{\"1\":{\"3435\":1}}],[\"linux内核的任务\",{\"1\":{\"3428\":1}}],[\"linux内核\",{\"1\":{\"3312\":1}}],[\"linux\",{\"0\":{\"1685\":1,\"2533\":1,\"3391\":1,\"7305\":1},\"1\":{\"1656\":1,\"1686\":1,\"1687\":1,\"1699\":1,\"1701\":1,\"1770\":1,\"1796\":1,\"1802\":1,\"1812\":1,\"1946\":1,\"2143\":1,\"2410\":1,\"2534\":1,\"2579\":1,\"3165\":1,\"3166\":1,\"3167\":1,\"3290\":1,\"3443\":2,\"3445\":1,\"3447\":1,\"3449\":1,\"3451\":1,\"3453\":1,\"3456\":1,\"3458\":3,\"3476\":1,\"5741\":1,\"6079\":1,\"6301\":1,\"6308\":1,\"6319\":1,\"6821\":1,\"6822\":1,\"6823\":1}}],[\"line\",{\"1\":{\"480\":3,\"7073\":1}}],[\"linkedblockingqueue<>\",{\"1\":{\"3772\":1}}],[\"linkedblockingqueue\",{\"1\":{\"3772\":1,\"3878\":1,\"3911\":1,\"6033\":1,\"6058\":1}}],[\"linkedhashset是有序的\",{\"1\":{\"4126\":1}}],[\"linkedhashset是hashset的子类\",{\"1\":{\"726\":1}}],[\"linkedhashset\",{\"0\":{\"725\":1}}],[\"linkedhashmap是有序的\",{\"1\":{\"4125\":1}}],[\"linkedhashmap可以保持插入顺序或访问顺序\",{\"1\":{\"1089\":1}}],[\"linkedhashmap也不例外\",{\"1\":{\"726\":1}}],[\"linkedhashmap\",{\"0\":{\"1088\":1},\"1\":{\"507\":1,\"514\":1,\"5395\":1,\"5402\":1}}],[\"linkedhashmap<>\",{\"1\":{\"505\":1,\"507\":1,\"5393\":1,\"5395\":1}}],[\"linkedlist与vector几种实现\",{\"1\":{\"775\":1}}],[\"linkedlist内部是一个双向链表\",{\"1\":{\"752\":1}}],[\"linkedlist是一个list\",{\"1\":{\"752\":1}}],[\"linkedlist\",{\"0\":{\"751\":1},\"1\":{\"605\":1,\"606\":1,\"607\":1,\"610\":2,\"637\":1,\"778\":1,\"782\":1}}],[\"linkedlist<>\",{\"1\":{\"604\":1,\"634\":1}}],[\"linking\",{\"1\":{\"213\":1,\"409\":1,\"5298\":1}}],[\"link\",{\"1\":{\"83\":1,\"3413\":2,\"5196\":1}}],[\"libm\",{\"1\":{\"3449\":1}}],[\"libpthread\",{\"1\":{\"3449\":1}}],[\"libstdc++\",{\"1\":{\"3449\":1}}],[\"libs为容器\",{\"1\":{\"3312\":1}}],[\"libs+guest\",{\"1\":{\"3311\":1}}],[\"libcontainer\",{\"1\":{\"3305\":2,\"6091\":2}}],[\"library\",{\"1\":{\"908\":1,\"5526\":1}}],[\"lib\",{\"1\":{\"426\":1,\"5317\":1}}],[\"lib目录下的\",{\"1\":{\"425\":1,\"5316\":1}}],[\"light\",{\"1\":{\"83\":1,\"5196\":1}}],[\"tv\",{\"1\":{\"3419\":1}}],[\"tty\",{\"1\":{\"3319\":1}}],[\"ttl>\",{\"1\":{\"7028\":1}}],[\"ttl\",{\"1\":{\"3182\":1,\"6840\":1,\"7028\":1}}],[\"tt>\",{\"1\":{\"787\":3}}],[\"tw\",{\"1\":{\"2627\":1}}],[\"tcp与udp的了解\",{\"0\":{\"4215\":1}}],[\"tcp高级\",{\"0\":{\"2647\":1}}],[\"tcp同时打开\",{\"1\":{\"2646\":1}}],[\"tcp自连接\",{\"1\":{\"2646\":1}}],[\"tcp保活机制\",{\"1\":{\"2634\":1}}],[\"tcp的最大连接数=客户端的ip数⋅客户端的端口数\",{\"1\":{\"2476\":1}}],[\"tcp四次挥手\",{\"0\":{\"2592\":1},\"1\":{\"2419\":1}}],[\"tcp三次握手\",{\"0\":{\"2523\":1},\"1\":{\"2408\":1}}],[\"tcp基础\",{\"0\":{\"2441\":1},\"1\":{\"2400\":1}}],[\"tcp和udp常见面试题\",{\"0\":{\"2397\":1}}],[\"tcp\",{\"0\":{\"2451\":2,\"2454\":1,\"2460\":1,\"2466\":1,\"2479\":1,\"2533\":1,\"2560\":1,\"2566\":1,\"2641\":1,\"2644\":1,\"2724\":1,\"4256\":1,\"7020\":1,\"7022\":1},\"1\":{\"1975\":1,\"2266\":1,\"2267\":1,\"2290\":1,\"2292\":2,\"2293\":2,\"2294\":1,\"2297\":1,\"2306\":1,\"2307\":2,\"2362\":1,\"2365\":1,\"2366\":3,\"2389\":1,\"2401\":1,\"2402\":2,\"2403\":1,\"2404\":1,\"2405\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2412\":1,\"2414\":1,\"2420\":1,\"2435\":1,\"2439\":1,\"2440\":1,\"2447\":1,\"2448\":1,\"2450\":1,\"2452\":1,\"2453\":1,\"2455\":1,\"2458\":1,\"2459\":6,\"2467\":1,\"2473\":1,\"2477\":1,\"2478\":1,\"2483\":1,\"2486\":1,\"2489\":1,\"2492\":1,\"2495\":1,\"2498\":1,\"2501\":2,\"2504\":1,\"2512\":1,\"2513\":1,\"2514\":1,\"2519\":1,\"2520\":3,\"2521\":2,\"2522\":1,\"2527\":1,\"2528\":2,\"2529\":1,\"2534\":1,\"2537\":1,\"2547\":1,\"2549\":1,\"2553\":1,\"2563\":1,\"2568\":2,\"2569\":2,\"2578\":1,\"2579\":1,\"2588\":2,\"2590\":1,\"2591\":1,\"2594\":1,\"2627\":2,\"2630\":1,\"2635\":2,\"2637\":1,\"2643\":2,\"2646\":1,\"2653\":1,\"2661\":1,\"2665\":1,\"2666\":2,\"2697\":1,\"2708\":1,\"2709\":3,\"2712\":3,\"2718\":1,\"3458\":1,\"4258\":1,\"4261\":1,\"4264\":1,\"4598\":1,\"4604\":1,\"6182\":1,\"6256\":1,\"6989\":4,\"7013\":1,\"7071\":1,\"7072\":2,\"7073\":1,\"7078\":2,\"7093\":1}}],[\"tls\",{\"1\":{\"2266\":1,\"2288\":1,\"2306\":1,\"2307\":1,\"2311\":1,\"2315\":2,\"2316\":3,\"2317\":1,\"2321\":2,\"2326\":1,\"2343\":1,\"7071\":1,\"7078\":2}}],[\"tlb\",{\"1\":{\"1672\":1,\"1673\":1,\"1674\":2}}],[\"tlab为每个线程预先分配一块内存\",{\"1\":{\"275\":1}}],[\"tlab为每个线程提供了一个私有的内存缓冲区\",{\"1\":{\"273\":1}}],[\"tlab中的内存只被对应的线程使用\",{\"1\":{\"274\":1}}],[\"tlab\",{\"0\":{\"270\":2},\"1\":{\"271\":1}}],[\"t\",{\"1\":{\"1127\":2,\"1797\":3,\"2879\":1,\"2880\":2,\"3032\":5,\"3307\":1,\"3319\":2,\"3403\":1,\"3419\":1,\"3765\":11,\"3766\":1,\"4748\":1,\"5708\":2,\"5996\":6,\"5997\":1,\"6302\":3,\"6551\":1,\"6552\":2,\"6698\":5}}],[\"tm\",{\"1\":{\"647\":1}}],[\"tmp\",{\"1\":{\"478\":1,\"3571\":2,\"5373\":1}}],[\"t3\",{\"1\":{\"647\":1,\"1490\":1,\"6942\":1}}],[\"t2\",{\"1\":{\"647\":1,\"1482\":2,\"1490\":1,\"6933\":2,\"6942\":1}}],[\"t为空时称为空树\",{\"1\":{\"645\":1}}],[\"tid=0x00007f5dc00d1000\",{\"1\":{\"3527\":1}}],[\"tid=0x00007f5dc002b800\",{\"1\":{\"3527\":1}}],[\"tid=0x00007f5dc0029800\",{\"1\":{\"3527\":1}}],[\"tid=0x00007f5dc0028000\",{\"1\":{\"3527\":1}}],[\"tid=0x00007f5dc0026000\",{\"1\":{\"3527\":1}}],[\"tid=0x00007f5dc0024000\",{\"1\":{\"3527\":1}}],[\"tid=0x00007f5dc0022800\",{\"1\":{\"3527\":1}}],[\"tid=0x00007f5dc0020800\",{\"1\":{\"3527\":1}}],[\"tid=0x00007f5dc001e800\",{\"1\":{\"3527\":1}}],[\"tid=0x00007f5dc0081000\",{\"1\":{\"3527\":1}}],[\"tid=0x00007f5dc0009800\",{\"1\":{\"3527\":1}}],[\"tid\",{\"1\":{\"3522\":1}}],[\"timeunit\",{\"1\":{\"3772\":2,\"3855\":2,\"3857\":1,\"4910\":1,\"6009\":2,\"6011\":1}}],[\"timed\",{\"1\":{\"3624\":1,\"3625\":1}}],[\"timestamps\",{\"1\":{\"2627\":1}}],[\"time\",{\"0\":{\"2613\":1,\"2616\":1,\"2625\":1,\"2629\":1},\"1\":{\"629\":1,\"2426\":1,\"2427\":1,\"2428\":1,\"2429\":1,\"2430\":1,\"2598\":1,\"2602\":1,\"2615\":1,\"2622\":1,\"2626\":1,\"3522\":1,\"3857\":2,\"4999\":1,\"6011\":2}}],[\"title\",{\"1\":{\"83\":1,\"5196\":1}}],[\"type\",{\"1\":{\"491\":1,\"497\":1,\"1568\":1,\"2087\":1,\"2091\":1,\"2092\":1,\"2093\":1,\"2094\":1,\"2096\":1,\"2099\":1,\"2217\":1,\"4824\":1,\"4826\":1,\"4857\":2,\"4933\":4,\"4935\":5,\"4972\":1,\"4974\":1,\"5378\":1,\"5384\":1}}],[\"tag\",{\"1\":{\"4999\":1,\"7063\":1}}],[\"tar\",{\"1\":{\"3419\":6}}],[\"target\",{\"1\":{\"491\":1,\"496\":1,\"3975\":5,\"5378\":1,\"5383\":1}}],[\"tail是\",{\"1\":{\"3415\":1}}],[\"taskid\",{\"1\":{\"4933\":4,\"4935\":5}}],[\"taskservice\",{\"1\":{\"4935\":6}}],[\"tasks\",{\"1\":{\"3857\":3,\"3925\":1,\"3926\":1,\"3929\":1,\"4895\":3,\"6011\":3}}],[\"task\",{\"1\":{\"1380\":1,\"1493\":1,\"2136\":1,\"3390\":2,\"3527\":9,\"4895\":1,\"4933\":7,\"4935\":8,\"6946\":1,\"6955\":2}}],[\"taskexecutor\",{\"1\":{\"1380\":3}}],[\"taskexecutor的任务中\",{\"1\":{\"1371\":1}}],[\"tab\",{\"1\":{\"1048\":1,\"1072\":1,\"3775\":4}}],[\"tableid\",{\"1\":{\"4824\":1,\"4972\":1}}],[\"tables\",{\"1\":{\"2854\":1,\"2859\":1,\"2880\":2,\"2884\":1,\"2913\":2,\"6526\":1,\"6531\":1,\"6552\":2,\"6556\":1,\"6585\":2}}],[\"table\",{\"1\":{\"281\":1,\"287\":1,\"488\":1,\"491\":1,\"492\":1,\"1069\":1,\"1669\":1,\"2733\":1,\"2857\":2,\"3775\":1,\"5375\":1,\"5378\":1,\"5379\":1,\"6402\":1,\"6529\":2}}],[\"tesseractexception\",{\"1\":{\"4857\":1}}],[\"tess4jclient\",{\"1\":{\"4857\":4}}],[\"tess4j\",{\"1\":{\"4857\":2}}],[\"test接口会进入全局异常处理\",{\"1\":{\"1330\":1}}],[\"test\",{\"1\":{\"1329\":2,\"1351\":1,\"5676\":1}}],[\"testcontroller\",{\"1\":{\"1329\":1}}],[\"testnpe\",{\"1\":{\"489\":1,\"491\":1,\"5376\":1,\"5378\":1}}],[\"terminating\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"tech\",{\"1\":{\"3059\":1,\"3753\":1,\"3930\":1}}],[\"tencent\",{\"1\":{\"2069\":1,\"5774\":1}}],[\"template\",{\"1\":{\"1212\":1,\"4841\":1,\"5564\":1,\"7230\":1}}],[\"textandimages\",{\"1\":{\"4857\":4}}],[\"textscan\",{\"1\":{\"4857\":4}}],[\"text\",{\"1\":{\"2773\":1,\"2783\":1,\"2794\":1,\"4857\":1,\"6442\":1,\"6452\":1,\"6465\":1}}],[\"tex\",{\"0\":{\"93\":1,\"5206\":1}}],[\"txt\",{\"1\":{\"478\":1,\"5373\":1}}],[\"t1p3\",{\"1\":{\"1479\":1,\"6929\":1}}],[\"t1p2\",{\"1\":{\"1478\":1,\"6928\":1}}],[\"t1p1\",{\"1\":{\"1477\":1,\"6927\":1}}],[\"t1p0\",{\"1\":{\"1477\":1,\"6927\":1}}],[\"t1\",{\"1\":{\"444\":3,\"1482\":2,\"1490\":1,\"5337\":3,\"6933\":2,\"6942\":1}}],[\"t0p3\",{\"1\":{\"1479\":1,\"6929\":1}}],[\"t0p2\",{\"1\":{\"1478\":1,\"6928\":1}}],[\"t0p1\",{\"1\":{\"1477\":1,\"6927\":1}}],[\"t0p0\",{\"1\":{\"1477\":1,\"6927\":1}}],[\"t0\",{\"1\":{\"444\":2,\"1482\":1,\"1490\":1,\"1493\":1,\"5337\":2,\"6933\":1,\"6942\":1,\"6946\":1,\"6955\":2}}],[\"trx\",{\"1\":{\"3019\":1,\"3028\":1,\"3032\":5,\"3036\":1,\"3045\":6,\"3046\":2,\"3047\":2,\"3048\":3,\"3051\":1,\"3052\":2,\"3053\":1,\"6691\":1,\"6694\":1,\"6698\":5,\"6703\":1}}],[\"triggered\",{\"1\":{\"1777\":2,\"6272\":2}}],[\"treemap是有序的\",{\"1\":{\"4125\":1}}],[\"treemap是按key排序的\",{\"1\":{\"739\":1}}],[\"treemap要求键实现comparable接口或通过构造方法提供一个comparator对象\",{\"1\":{\"1085\":1}}],[\"treemap同样实现了sortedmap和navigablemap接口\",{\"1\":{\"1084\":1}}],[\"treemap同样实现了map接口\",{\"1\":{\"1083\":1}}],[\"treemap与hashmap相比\",{\"1\":{\"1083\":1}}],[\"treemap\",{\"0\":{\"1082\":1}}],[\"treemap有treeset\",{\"1\":{\"726\":1}}],[\"treeset是有序的\",{\"1\":{\"4126\":1}}],[\"treeset是用compareto\",{\"1\":{\"739\":1}}],[\"treeset作为一种set\",{\"1\":{\"739\":1}}],[\"treeset的底层是treemap的keyset\",{\"1\":{\"738\":1}}],[\"treeset中的数据是自动排好序的\",{\"1\":{\"735\":1}}],[\"treeset要求元素实现comparable接口或通过构造方法提供一个com\",{\"1\":{\"724\":1}}],[\"treeset同样实现了sortedset和navigatableset接口\",{\"1\":{\"723\":1}}],[\"treeset实现了set接口\",{\"1\":{\"720\":1}}],[\"treeset\",{\"0\":{\"719\":1},\"1\":{\"735\":1}}],[\"tree\",{\"1\":{\"645\":1,\"2760\":1,\"6429\":1}}],[\"trans\",{\"1\":{\"6704\":1}}],[\"transferto\",{\"1\":{\"1811\":1,\"1812\":1,\"6318\":1,\"6319\":1}}],[\"translation\",{\"1\":{\"1672\":1}}],[\"transactional\",{\"1\":{\"4857\":2,\"4999\":2}}],[\"transaction\",{\"1\":{\"2868\":1,\"2940\":1,\"4857\":1,\"4999\":1,\"6540\":1,\"6612\":1}}],[\"transactionstatus\",{\"1\":{\"1227\":1,\"5579\":1}}],[\"transactiondefinition\",{\"1\":{\"1226\":1,\"1230\":1,\"1231\":1,\"1232\":1,\"1233\":1,\"1234\":1,\"1235\":1,\"1237\":1,\"1239\":1,\"1240\":1,\"1241\":1,\"1243\":1,\"1244\":1,\"1245\":1,\"1247\":2,\"5578\":1,\"5582\":1,\"5583\":1,\"5584\":1,\"5585\":1,\"5586\":1,\"5587\":1,\"5589\":1,\"5591\":1,\"5592\":1,\"5593\":1,\"5595\":1,\"5596\":1,\"5597\":1,\"5599\":2}}],[\"transient\",{\"1\":{\"480\":1,\"964\":1}}],[\"tracing\",{\"1\":{\"364\":1}}],[\"trylock\",{\"1\":{\"4895\":1,\"4910\":1}}],[\"tryreleaseshared\",{\"1\":{\"3657\":1,\"5900\":1}}],[\"tryrelease\",{\"1\":{\"3655\":1,\"5898\":1}}],[\"tryacquireshared\",{\"1\":{\"3656\":1,\"5899\":1}}],[\"tryacquire\",{\"1\":{\"3647\":1,\"3654\":1,\"5890\":1,\"5897\":1}}],[\"try\",{\"0\":{\"476\":1,\"5371\":1},\"1\":{\"444\":1,\"477\":2,\"478\":1,\"480\":3,\"483\":1,\"486\":2,\"489\":1,\"1515\":1,\"1518\":1,\"1610\":1,\"1617\":2,\"4857\":3,\"4910\":1,\"4986\":1,\"5337\":1,\"5372\":2,\"5373\":1,\"5376\":1}}],[\"true\",{\"1\":{\"151\":1,\"155\":1,\"431\":1,\"530\":1,\"975\":2,\"980\":3,\"993\":8,\"1138\":1,\"1610\":1,\"1613\":1,\"1617\":1,\"2182\":3,\"2824\":1,\"3654\":1,\"3655\":1,\"3657\":1,\"3789\":1,\"3845\":1,\"3944\":1,\"4857\":3,\"4926\":1,\"5264\":1,\"5322\":1,\"5418\":1,\"5800\":1,\"5897\":1,\"5898\":1,\"5900\":1,\"5962\":1,\"6496\":1}}],[\"that\",{\"1\":{\"787\":1,\"790\":1,\"3857\":1,\"3925\":1,\"3926\":1,\"3927\":1,\"3929\":1,\"6011\":1}}],[\"than\",{\"1\":{\"434\":1,\"3857\":1,\"5325\":1,\"6011\":1}}],[\"throughput\",{\"1\":{\"4188\":1}}],[\"throw和throws的区别\",{\"0\":{\"5364\":1}}],[\"throwable3\",{\"1\":{\"480\":2}}],[\"throwable1\",{\"1\":{\"480\":2}}],[\"throwable2\",{\"1\":{\"480\":3}}],[\"throwable\",{\"1\":{\"480\":11,\"903\":1,\"911\":1,\"3975\":1,\"5521\":1,\"5529\":1}}],[\"throwable是\",{\"1\":{\"455\":1,\"5350\":1}}],[\"throw\",{\"1\":{\"473\":1,\"475\":1,\"480\":2,\"787\":1,\"812\":1,\"816\":1,\"826\":1,\"1329\":1,\"3857\":2,\"4857\":2,\"5368\":1,\"5370\":1,\"6011\":2}}],[\"throws\",{\"1\":{\"444\":1,\"470\":1,\"472\":1,\"787\":1,\"790\":1,\"901\":1,\"903\":1,\"911\":1,\"3772\":1,\"3857\":2,\"3975\":1,\"5337\":1,\"5365\":1,\"5367\":1,\"5519\":1,\"5521\":1,\"5529\":1,\"6011\":2}}],[\"threallocal\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"threadfactory\",{\"1\":{\"3857\":7,\"3865\":1,\"6011\":7,\"6019\":1}}],[\"threads\",{\"1\":{\"3857\":4,\"3927\":1,\"3928\":1,\"3929\":1,\"6011\":4}}],[\"thread2\",{\"1\":{\"3855\":8,\"6009\":8}}],[\"threadid\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"thread内部都是使用仅有的那个threadlocalmap\",{\"1\":{\"3769\":1,\"6000\":1}}],[\"threadlocalhashcode\",{\"1\":{\"3775\":1}}],[\"threadlocal提供了一个清除线程中对象的方法\",{\"1\":{\"3774\":1}}],[\"threadlocaldemo\",{\"1\":{\"3772\":1}}],[\"threadlocal对象\",{\"1\":{\"3769\":1,\"6000\":1}}],[\"threadlocal<localvariable>\",{\"1\":{\"3772\":2}}],[\"threadlocal<\",{\"1\":{\"3768\":1,\"3775\":1,\"5999\":1}}],[\"threadlocal类的set\",{\"1\":{\"3764\":1,\"5995\":1}}],[\"threadlocal类主要解决的就是让每个线程绑定自己的值\",{\"1\":{\"3757\":1,\"5989\":1}}],[\"threadlocals\",{\"1\":{\"3762\":1,\"3763\":1,\"3765\":5,\"5993\":1,\"5994\":1,\"5996\":2}}],[\"threadlocalmap的\",{\"1\":{\"3769\":1,\"6000\":1}}],[\"threadlocalmap\",{\"1\":{\"3762\":2,\"3763\":2,\"3765\":4,\"3766\":1,\"3768\":1,\"3774\":1,\"5993\":2,\"5994\":2,\"5996\":2,\"5997\":1,\"5999\":1}}],[\"threadlocal\",{\"0\":{\"5987\":1},\"1\":{\"3762\":2,\"3763\":1,\"3766\":2,\"3769\":2,\"3773\":1,\"5993\":2,\"5994\":1,\"5997\":2,\"6000\":2}}],[\"threadlocal会为每个线程创建单独的变量副本\",{\"1\":{\"3759\":1}}],[\"threadlocal是一个将在多线程中为每一个线程创建单独的变量副本的类\",{\"1\":{\"3759\":1}}],[\"threadlocal原理\",{\"0\":{\"3754\":1,\"5986\":1}}],[\"threadlocal关键字\",{\"0\":{\"3703\":1}}],[\"threadlocalrandom\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"threadx\",{\"1\":{\"3426\":1}}],[\"threadpool\",{\"1\":{\"3855\":1,\"6009\":1}}],[\"threadpoolexecutor其他常见参数\",{\"1\":{\"3862\":1,\"6016\":1}}],[\"threadpoolexecutor\",{\"0\":{\"3854\":1},\"1\":{\"3772\":3,\"3855\":17,\"3857\":2,\"3858\":1,\"3870\":1,\"3871\":1,\"3872\":1,\"3873\":1,\"3874\":2,\"3900\":1,\"3909\":1,\"3930\":1,\"6009\":17,\"6011\":2,\"6012\":1,\"6025\":1,\"6026\":1,\"6027\":1,\"6028\":1,\"6029\":2,\"6047\":1,\"6056\":1}}],[\"threadpoolcrawler\",{\"1\":{\"1380\":3}}],[\"threadpoolconfig\",{\"1\":{\"1380\":1}}],[\"threadpooltaskexecutor\",{\"1\":{\"1380\":3,\"3869\":1,\"3874\":1,\"6024\":1,\"6029\":1}}],[\"thread\",{\"1\":{\"271\":1,\"780\":1,\"1889\":1,\"2111\":1,\"3522\":1,\"3527\":11,\"3545\":1,\"3563\":1,\"3643\":1,\"3753\":2,\"3762\":1,\"3765\":6,\"3766\":1,\"3772\":1,\"3857\":2,\"3930\":2,\"5884\":1,\"5993\":1,\"5996\":4,\"5997\":1,\"6011\":2}}],[\"three\",{\"1\":{\"2538\":1}}],[\"threshold＝容量\",{\"1\":{\"969\":1}}],[\"threshold\",{\"0\":{\"985\":1},\"1\":{\"961\":1,\"968\":1,\"988\":1,\"989\":1,\"993\":10,\"995\":2,\"2682\":1}}],[\"this\",{\"1\":{\"434\":1,\"790\":2,\"1515\":1,\"3731\":1,\"3735\":1,\"3765\":2,\"3857\":9,\"3975\":1,\"5325\":1,\"5650\":1,\"5966\":1,\"5996\":1,\"6011\":9}}],[\"theorem\",{\"1\":{\"6211\":1}}],[\"they\",{\"1\":{\"3857\":2,\"6011\":2}}],[\"the\",{\"1\":{\"363\":1,\"478\":1,\"787\":7,\"790\":4,\"1466\":1,\"1801\":1,\"2538\":2,\"3857\":18,\"3925\":1,\"3926\":1,\"3927\":2,\"3928\":2,\"3929\":1,\"4187\":1,\"5373\":1,\"6011\":18,\"6307\":1,\"6914\":1}}],[\"there\",{\"1\":{\"83\":2,\"5196\":2}}],[\"todate\",{\"1\":{\"4999\":1}}],[\"tojsonstring\",{\"1\":{\"4979\":1,\"4984\":1,\"4999\":2}}],[\"tolist\",{\"1\":{\"4857\":2,\"4999\":2}}],[\"tolerance\",{\"1\":{\"4637\":1,\"4641\":1,\"4646\":1,\"6209\":1,\"6214\":1,\"6219\":1}}],[\"tomcat自带的access\",{\"1\":{\"5016\":1}}],[\"tomcat\",{\"1\":{\"4141\":1,\"5017\":2}}],[\"total\",{\"1\":{\"3925\":1,\"3926\":1,\"4188\":1}}],[\"totalmemory\",{\"1\":{\"250\":1}}],[\"tonanos\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"touch\",{\"1\":{\"3380\":1,\"3403\":1}}],[\"token信息返回给用户\",{\"1\":{\"4830\":1,\"7219\":1}}],[\"token失效谁判断的\",{\"1\":{\"4355\":1}}],[\"token\",{\"1\":{\"3105\":1,\"4055\":1,\"4811\":1,\"4816\":1,\"4895\":2,\"4910\":3,\"6761\":1,\"7208\":1,\"7213\":1}}],[\"token=1729829670\",{\"1\":{\"1368\":1,\"5646\":1}}],[\"toolkit\",{\"1\":{\"4857\":1}}],[\"tools\",{\"0\":{\"7297\":1},\"1\":{\"2143\":1,\"3574\":1}}],[\"tool\",{\"1\":{\"2129\":1}}],[\"tostring\",{\"1\":{\"1380\":1,\"4857\":1,\"4910\":1,\"4986\":1}}],[\"tobetopjavaer\",{\"1\":{\"1081\":1}}],[\"top命令可以动态地持续监听进程运行情况\",{\"1\":{\"3517\":1}}],[\"topositive\",{\"1\":{\"1466\":3,\"6914\":3}}],[\"topickey\",{\"1\":{\"4895\":3}}],[\"topic分区中消息只能由消费者组中的唯一一个消费者处理\",{\"1\":{\"1588\":1}}],[\"topicentry\",{\"1\":{\"1474\":3,\"6923\":3}}],[\"topiccountermap\",{\"1\":{\"1466\":2,\"6914\":2}}],[\"topic可以配置自己的保留策略\",{\"1\":{\"1453\":1,\"6901\":1}}],[\"topic\",{\"1\":{\"1380\":1,\"1440\":1,\"1441\":4,\"1442\":3,\"1443\":1,\"1466\":7,\"1474\":3,\"1515\":1,\"1518\":2,\"4563\":1,\"4895\":1,\"4979\":1,\"4981\":1,\"4984\":1,\"4986\":1,\"6163\":1,\"6914\":7,\"6923\":3}}],[\"topics\",{\"1\":{\"1380\":1,\"4981\":1,\"4986\":1}}],[\"top\",{\"0\":{\"3516\":1,\"3537\":1},\"1\":{\"556\":1,\"558\":1,\"560\":1,\"642\":1,\"711\":1,\"765\":1,\"2143\":1,\"3426\":1,\"3518\":1,\"3538\":1,\"3550\":2,\"3551\":1,\"3553\":1,\"3554\":1,\"4758\":1}}],[\"to\",{\"1\":{\"253\":1,\"434\":1,\"478\":1,\"491\":1,\"495\":1,\"787\":1,\"790\":2,\"824\":1,\"1062\":1,\"1466\":1,\"2096\":1,\"2538\":1,\"3857\":5,\"5325\":1,\"5373\":1,\"5378\":1,\"5382\":1,\"6011\":5,\"6914\":1}}],[\"to或s0\",{\"1\":{\"230\":1}}],[\"toc\",{\"1\":{\"133\":1,\"5246\":1}}],[\"hw\",{\"1\":{\"5041\":1,\"5047\":1}}],[\"hystrix有四种防雪崩方式\",{\"1\":{\"4526\":1,\"6143\":1}}],[\"hystrix就是这样的一个工具\",{\"1\":{\"4525\":1,\"6142\":1}}],[\"hystrix\",{\"1\":{\"4509\":1,\"4524\":1,\"4926\":1,\"6130\":1,\"6141\":1}}],[\"hyperloglogs\",{\"1\":{\"3095\":1,\"6751\":1}}],[\"hr面\",{\"0\":{\"4279\":1,\"4358\":1,\"4440\":1,\"4449\":1,\"7104\":1}}],[\"heima\",{\"1\":{\"4826\":1,\"4859\":1,\"4921\":1,\"4974\":1}}],[\"hello123\",{\"1\":{\"5058\":1}}],[\"helloproxy\",{\"1\":{\"3965\":2,\"3967\":3}}],[\"hello\",{\"1\":{\"3963\":1,\"3970\":1,\"3977\":1,\"3979\":2}}],[\"helloimpl\",{\"1\":{\"3963\":1,\"3965\":5,\"3977\":2}}],[\"head可以创建一个新的提交来撤销之前提交的内容\",{\"1\":{\"3347\":1}}],[\"head^来撤销最近的一次提交\",{\"1\":{\"3345\":1}}],[\"header不支持压缩\",{\"1\":{\"7068\":1}}],[\"header压缩\",{\"1\":{\"6984\":1}}],[\"header\",{\"1\":{\"2229\":1,\"2262\":1,\"2352\":1,\"3028\":1,\"4812\":1,\"4816\":1,\"6694\":1,\"7063\":1,\"7064\":1,\"7068\":1,\"7209\":1,\"7213\":1}}],[\"head\",{\"1\":{\"2196\":1,\"3415\":2,\"3596\":1,\"7073\":1}}],[\"health\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"heapdump\",{\"1\":{\"3571\":1}}],[\"heapdumppath=\",{\"1\":{\"3571\":3}}],[\"heap\",{\"1\":{\"240\":1,\"280\":1,\"2119\":1,\"3563\":1,\"3574\":1,\"3575\":1,\"3602\":1,\"3604\":2}}],[\"hub\",{\"1\":{\"3329\":1}}],[\"hprof\",{\"1\":{\"3566\":1,\"3567\":1,\"3570\":2,\"3571\":1}}],[\"hp\",{\"1\":{\"2124\":1,\"3553\":1,\"3554\":1}}],[\"h>\",{\"1\":{\"1797\":1,\"6302\":1}}],[\"h2\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"h2o\",{\"1\":{\"60\":1,\"5173\":1}}],[\"histo\",{\"1\":{\"3594\":1,\"3596\":2}}],[\"history\",{\"1\":{\"3355\":1}}],[\"hibernatetemplate\",{\"1\":{\"1212\":1,\"5564\":1}}],[\"hiding\",{\"1\":{\"1103\":1}}],[\"hidden\",{\"1\":{\"787\":1}}],[\"h为log2\",{\"1\":{\"1086\":1}}],[\"h为树的高度\",{\"1\":{\"1086\":1}}],[\"h\",{\"1\":{\"901\":2,\"1011\":1,\"1016\":11,\"1017\":1,\"1029\":1,\"1035\":7,\"1062\":16,\"1068\":3,\"1069\":2,\"1076\":3,\"1086\":1,\"5519\":2}}],[\"have\",{\"1\":{\"3925\":1,\"3926\":1,\"3927\":1}}],[\"happens\",{\"1\":{\"3712\":1,\"5912\":1}}],[\"hagersten\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"hard\",{\"1\":{\"3413\":1}}],[\"handshake\",{\"1\":{\"2538\":1}}],[\"handle\",{\"1\":{\"4997\":1}}],[\"handleimagescan\",{\"1\":{\"4857\":2}}],[\"handletextscan\",{\"1\":{\"4857\":2}}],[\"handletextandimages\",{\"1\":{\"4857\":2}}],[\"handlesensitivescan\",{\"1\":{\"4857\":3}}],[\"handlebusinessexception\",{\"1\":{\"1325\":1}}],[\"handleexception\",{\"1\":{\"1325\":1}}],[\"handlerexceptionresolver\",{\"1\":{\"1325\":1}}],[\"handlerexecutionchain\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"handleradapter\",{\"1\":{\"1193\":1,\"1198\":1,\"5545\":1,\"5550\":1}}],[\"handlermapping\",{\"1\":{\"1193\":1,\"1197\":1,\"5545\":1,\"5549\":1}}],[\"handler\",{\"1\":{\"493\":1,\"1193\":2,\"1197\":3,\"1198\":1,\"1199\":2,\"1204\":1,\"1817\":1,\"1820\":1,\"1823\":1,\"1824\":1,\"1825\":1,\"1826\":1,\"1830\":1,\"1835\":1,\"1836\":1,\"1837\":1,\"1839\":2,\"1840\":2,\"1844\":1,\"1845\":1,\"1846\":1,\"3857\":7,\"3866\":1,\"4997\":1,\"5380\":1,\"5545\":2,\"5549\":3,\"5550\":1,\"5551\":2,\"5556\":1,\"6011\":7,\"6020\":1,\"6346\":1,\"6349\":1,\"6352\":1,\"6353\":1,\"6354\":1,\"6355\":1,\"6359\":1,\"6367\":1,\"6368\":1,\"6369\":1,\"6371\":2,\"6372\":2,\"6374\":1,\"6386\":1,\"6387\":1,\"6388\":1}}],[\"hash2值\",{\"1\":{\"5083\":1,\"5084\":1}}],[\"hash值\",{\"1\":{\"5081\":1}}],[\"hash1值\",{\"1\":{\"5077\":1,\"5078\":1,\"5084\":1}}],[\"hash环倾斜所带来的影响就越小\",{\"1\":{\"2035\":1}}],[\"hash环上的节点就越多\",{\"1\":{\"2035\":1}}],[\"hash算法\",{\"0\":{\"2006\":1}}],[\"hashcode+sqlid+sql\",{\"1\":{\"1134\":1,\"5713\":1}}],[\"hashcode的结果是int类型\",{\"1\":{\"1044\":1}}],[\"hashcode\",{\"1\":{\"1016\":1,\"1035\":1,\"1047\":1,\"1062\":1,\"1068\":1,\"1069\":1,\"1072\":1}}],[\"hashing\",{\"1\":{\"1016\":1,\"1047\":1,\"1062\":1,\"2177\":1,\"2185\":1}}],[\"hashseed\",{\"1\":{\"1016\":1,\"1047\":2,\"1062\":1}}],[\"hashset中的数据是无序的\",{\"1\":{\"736\":1}}],[\"hashset和treeset\",{\"1\":{\"734\":1}}],[\"hashset可以方便高效地实现去重\",{\"1\":{\"718\":1}}],[\"hashset实现了set接口\",{\"1\":{\"714\":1}}],[\"hashset\",{\"0\":{\"713\":1},\"1\":{\"736\":1}}],[\"hash方法的功能是根据key来定位这个k\",{\"1\":{\"1010\":1}}],[\"hashtable以及concurrenthashmap分别在jdk\",{\"1\":{\"1079\":1}}],[\"hashtable以及concurrenthashmap里面的hash方法的实现是不同的\",{\"1\":{\"1009\":1}}],[\"hashtable默认的初始大小为11\",{\"1\":{\"1052\":1,\"1057\":1}}],[\"hashtable采用简单的取模是有一定的考虑在的\",{\"1\":{\"1050\":1}}],[\"hashtable也是使用fast\",{\"1\":{\"946\":1}}],[\"hashtable的哈希表大小选择\",{\"1\":{\"1058\":1}}],[\"hashtable的链表数组的默认大小是一个素数\",{\"1\":{\"1053\":1}}],[\"hashtable的\",{\"1\":{\"941\":1}}],[\"hashtable还使用了enumeration的方式\",{\"1\":{\"941\":1,\"944\":1}}],[\"hashtable\",{\"1\":{\"941\":1,\"944\":1,\"1008\":1,\"1045\":1,\"1070\":1,\"5347\":1}}],[\"hashtable直接使用对象的hashcode\",{\"1\":{\"940\":1}}],[\"hashtable中的hash数组初始大小是11\",{\"1\":{\"939\":1}}],[\"hashtable是没有fast\",{\"1\":{\"946\":1}}],[\"hashtable是基于陈旧的dictionary类继承来的\",{\"1\":{\"938\":1}}],[\"hashtable是线程安全的\",{\"1\":{\"935\":1,\"942\":1}}],[\"hashtable不可以存储null键和null值\",{\"1\":{\"937\":1}}],[\"hash\",{\"0\":{\"920\":1,\"2004\":1,\"2011\":1,\"2014\":1,\"2029\":1,\"2033\":1,\"5437\":1,\"6779\":1},\"1\":{\"927\":1,\"1007\":1,\"1011\":1,\"1013\":1,\"1016\":1,\"1047\":1,\"1048\":1,\"1054\":1,\"1062\":3,\"1068\":1,\"1072\":2,\"1076\":1,\"1081\":1,\"1466\":1,\"2009\":1,\"2010\":1,\"2016\":1,\"2017\":1,\"2024\":1,\"2025\":1,\"2027\":1,\"2034\":1,\"2035\":1,\"2177\":2,\"2182\":2,\"2185\":2,\"2754\":1,\"2757\":2,\"3094\":1,\"3125\":1,\"3126\":3,\"3127\":1,\"3130\":1,\"4141\":1,\"5444\":1,\"6423\":1,\"6426\":2,\"6750\":1,\"6781\":1,\"6782\":3,\"6783\":1,\"6786\":1,\"6914\":1}}],[\"hashmap多个key相同会怎么样\",{\"0\":{\"4199\":1}}],[\"hashmap用来保证存储的值键值对\",{\"1\":{\"4125\":1}}],[\"hashmap还是treemap呢\",{\"1\":{\"1087\":1}}],[\"hashmap和其他基于map的类都是通过链地址法解决冲突\",{\"1\":{\"1065\":1}}],[\"hashmap和hashtable对于计算数组下标这件事\",{\"1\":{\"1048\":1}}],[\"hashmap和hashtable的区别\",{\"0\":{\"931\":1}}],[\"hashmap为了提高效率使用位运算代替哈希\",{\"1\":{\"1060\":1}}],[\"hashmap默认的初始化大小为16\",{\"1\":{\"1056\":1}}],[\"hashmap之所以不用取模的原因是为了提高效率\",{\"1\":{\"1049\":1}}],[\"hashmap采用的是位运算\",{\"1\":{\"1048\":1}}],[\"hashmap有扩容机制\",{\"1\":{\"986\":1}}],[\"hashmap的数组是有长度的\",{\"1\":{\"1031\":1}}],[\"hashmap的数据是存储在链表数组里面的\",{\"1\":{\"1031\":1}}],[\"hashmap的实现会稍微复杂一点\",{\"1\":{\"1011\":1}}],[\"hashmap的扩容条件就是当hashmap中的元素个数\",{\"1\":{\"988\":1}}],[\"hashmap的重载的构造函数中\",{\"1\":{\"979\":1}}],[\"hashmap的iterator是fail\",{\"1\":{\"945\":1}}],[\"hashmap<string\",{\"1\":{\"975\":1,\"980\":3}}],[\"hashmap<>\",{\"1\":{\"503\":1,\"507\":1,\"521\":1,\"993\":1,\"1474\":1,\"4857\":1,\"4979\":1,\"5390\":1,\"5395\":1,\"5409\":1,\"6923\":1}}],[\"hashmap就像一个\",{\"1\":{\"974\":1}}],[\"hashmap会将容量扩容\",{\"1\":{\"969\":1}}],[\"hashmap类中有以下主要成员变量\",{\"1\":{\"963\":1}}],[\"hashmap中size表示当前共有多少个kv对\",{\"1\":{\"1000\":1}}],[\"hashmap中还提供了一个支持传入initialcapacity\",{\"1\":{\"998\":1}}],[\"hashmap中还有一个和他们紧密相关的概念\",{\"1\":{\"970\":1}}],[\"hashmap中的size和capacity之间的区别其实解释起来也挺简单的\",{\"1\":{\"974\":1}}],[\"hashmap中的键值对没有顺序\",{\"1\":{\"956\":1}}],[\"hashmap中都定义了哪些成员变量\",{\"1\":{\"960\":1}}],[\"hashmap中hash数组的默认大小是16\",{\"1\":{\"939\":1}}],[\"hashmap实现了map接口\",{\"1\":{\"954\":1}}],[\"hashmap没有锁机制\",{\"1\":{\"950\":1}}],[\"hashmap与hashtable的区别是面试中经常遇到的一个问题\",{\"1\":{\"947\":1}}],[\"hashmap把这部分操作解放出来了\",{\"1\":{\"943\":1}}],[\"hashmap不是线程安全的\",{\"1\":{\"943\":1,\"957\":1}}],[\"hashmap都使用了\",{\"1\":{\"941\":1,\"944\":1}}],[\"hashmap重新计算hash值\",{\"1\":{\"940\":1}}],[\"hashmap继承的抽象类abstractmap实现了map接口\",{\"1\":{\"938\":1}}],[\"hashmap可以存储null键和null值\",{\"1\":{\"936\":1}}],[\"hashmap是线程不安全的\",{\"1\":{\"934\":1}}],[\"hashmap已经显式定义了构造方法\",{\"1\":{\"528\":1,\"5416\":1}}],[\"hashmapinstance\",{\"1\":{\"527\":1,\"5415\":1}}],[\"hashmapclass\",{\"1\":{\"521\":1,\"527\":2,\"530\":2,\"5409\":1,\"5415\":2,\"5418\":2}}],[\"hashmap=\",{\"1\":{\"519\":1,\"523\":1,\"5407\":1,\"5411\":1}}],[\"hashmap\",{\"0\":{\"948\":1,\"953\":1},\"1\":{\"507\":1,\"514\":1,\"519\":1,\"521\":2,\"523\":1,\"527\":3,\"530\":3,\"941\":1,\"1009\":1,\"1015\":1,\"1064\":1,\"1081\":1,\"1134\":1,\"3763\":1,\"4005\":1,\"5347\":1,\"5395\":1,\"5402\":1,\"5407\":1,\"5409\":2,\"5411\":1,\"5415\":3,\"5418\":3,\"5713\":1,\"5994\":1}}],[\"has\",{\"1\":{\"584\":1,\"588\":1,\"590\":1}}],[\"http历史\",{\"0\":{\"6988\":1}}],[\"http3协议\",{\"1\":{\"6987\":1}}],[\"http协议中为什么广泛使用的还是http1\",{\"0\":{\"6970\":1}}],[\"http2协议\",{\"1\":{\"6985\":1}}],[\"http2会被越来越多网站采用\",{\"1\":{\"2371\":1}}],[\"http2主要优势是在移动互联网和高负载下更好的性能\",{\"1\":{\"2370\":1}}],[\"http2相对较新\",{\"1\":{\"2369\":1}}],[\"http1\",{\"1\":{\"2368\":1,\"2371\":1,\"6992\":1}}],[\"http演变\",{\"0\":{\"2346\":1}}],[\"http常见面试题\",{\"0\":{\"2190\":1}}],[\"httpclientbuilder\",{\"1\":{\"2096\":1}}],[\"httpresponse\",{\"1\":{\"2096\":1}}],[\"httppost\",{\"1\":{\"2096\":2,\"2099\":1}}],[\"httptrace\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"httpmessageconveter\",{\"1\":{\"1200\":1,\"5552\":1}}],[\"http\",{\"0\":{\"2347\":1,\"6975\":1,\"6981\":1,\"6995\":1,\"6998\":1,\"7004\":1,\"7056\":1,\"7057\":1,\"7060\":2,\"7065\":2,\"7070\":2,\"7075\":1},\"1\":{\"625\":1,\"1054\":1,\"2091\":1,\"2096\":1,\"2111\":1,\"2192\":1,\"2198\":1,\"2216\":3,\"2220\":1,\"2226\":1,\"2229\":1,\"2232\":1,\"2242\":2,\"2247\":1,\"2260\":1,\"2262\":1,\"2264\":1,\"2265\":1,\"2266\":1,\"2267\":3,\"2269\":2,\"2271\":1,\"2273\":1,\"2282\":1,\"2284\":1,\"2288\":1,\"2290\":1,\"2292\":1,\"2293\":1,\"2296\":1,\"2300\":1,\"2301\":1,\"2303\":1,\"2306\":3,\"2307\":2,\"2308\":1,\"2343\":1,\"2348\":2,\"2349\":1,\"2351\":1,\"2358\":2,\"2359\":2,\"2362\":3,\"2364\":1,\"2365\":4,\"2366\":4,\"2506\":1,\"2719\":1,\"2720\":1,\"3458\":1,\"3579\":1,\"3580\":1,\"4267\":1,\"4816\":1,\"5019\":1,\"6972\":1,\"6979\":1,\"6983\":2,\"6989\":7,\"6993\":1,\"6994\":3,\"6997\":1,\"7002\":1,\"7006\":2,\"7014\":1,\"7015\":1,\"7058\":2,\"7059\":1,\"7061\":2,\"7062\":1,\"7063\":2,\"7064\":2,\"7066\":4,\"7067\":2,\"7068\":2,\"7069\":2,\"7071\":5,\"7072\":2,\"7073\":3,\"7076\":1,\"7077\":2,\"7078\":4,\"7213\":1}}],[\"httpstatus\",{\"1\":{\"1325\":2}}],[\"https\",{\"0\":{\"2305\":1,\"7074\":1,\"7075\":1},\"1\":{\"83\":2,\"293\":1,\"553\":1,\"640\":1,\"686\":1,\"765\":1,\"882\":1,\"918\":1,\"947\":1,\"1081\":1,\"1119\":1,\"1153\":1,\"1190\":1,\"1310\":1,\"1368\":1,\"1393\":1,\"1493\":1,\"1511\":1,\"1522\":1,\"2036\":1,\"2069\":1,\"2136\":1,\"2143\":1,\"2144\":1,\"2189\":1,\"2266\":1,\"2288\":1,\"2306\":1,\"2307\":1,\"2308\":1,\"2309\":1,\"2316\":1,\"2345\":2,\"2358\":1,\"2506\":1,\"3059\":2,\"3063\":1,\"3338\":1,\"3390\":1,\"3660\":1,\"3702\":1,\"3727\":1,\"3753\":2,\"3790\":2,\"3846\":1,\"3930\":3,\"4590\":1,\"4756\":1,\"4758\":1,\"5103\":3,\"5115\":1,\"5196\":2,\"5347\":1,\"5430\":1,\"5435\":1,\"5640\":1,\"5646\":1,\"5701\":1,\"5734\":1,\"5774\":1,\"5801\":2,\"5824\":1,\"5872\":1,\"5929\":1,\"5963\":1,\"5985\":1,\"6074\":2,\"6283\":1,\"6392\":1,\"6714\":1,\"6893\":1,\"6946\":1,\"6955\":1,\"6969\":1,\"7076\":1,\"7077\":2,\"7078\":3,\"7079\":3}}],[\"html网页\",{\"1\":{\"4840\":1,\"7229\":1}}],[\"html\",{\"1\":{\"293\":1,\"556\":1,\"558\":1,\"560\":1,\"642\":1,\"711\":1,\"765\":1,\"1310\":1,\"2143\":1,\"3059\":1,\"3574\":1,\"3581\":1,\"3753\":2,\"3790\":1,\"3930\":2,\"4758\":1,\"5640\":1,\"5801\":1,\"5985\":1,\"6074\":1,\"6283\":1,\"6392\":1}}],[\"hol\",{\"1\":{\"7073\":1}}],[\"holds\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"hold\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"holding\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"hollis9\",{\"1\":{\"993\":1}}],[\"hollis8\",{\"1\":{\"993\":1}}],[\"hollis7\",{\"1\":{\"993\":1}}],[\"hollis6\",{\"1\":{\"993\":1}}],[\"hollis5\",{\"1\":{\"993\":1}}],[\"hollis4\",{\"1\":{\"993\":1}}],[\"hollis3\",{\"1\":{\"993\":1}}],[\"hollis2\",{\"1\":{\"993\":1}}],[\"hollis13\",{\"1\":{\"993\":1}}],[\"hollis12\",{\"1\":{\"993\":1}}],[\"hollis11\",{\"1\":{\"993\":1}}],[\"hollis10\",{\"1\":{\"993\":1}}],[\"hollis1\",{\"1\":{\"993\":1}}],[\"hollis\",{\"1\":{\"975\":1}}],[\"hollischuang\",{\"1\":{\"480\":1,\"975\":1,\"993\":13,\"1037\":1,\"1081\":1}}],[\"hosts\",{\"1\":{\"2388\":1}}],[\"host\",{\"1\":{\"2091\":1,\"2214\":1,\"7064\":4}}],[\"hot\",{\"1\":{\"4999\":5}}],[\"hotarticlevos\",{\"1\":{\"4999\":10}}],[\"hotarticlevolist\",{\"1\":{\"4999\":9}}],[\"hotarticlevo\",{\"1\":{\"4999\":8}}],[\"hotarticleserviceimpl\",{\"1\":{\"4998\":1,\"4999\":1}}],[\"hotarticleservice\",{\"1\":{\"4992\":1,\"4997\":4,\"4999\":2}}],[\"hot100的时候\",{\"1\":{\"562\":1}}],[\"hotspot\",{\"1\":{\"334\":1,\"341\":1,\"372\":1,\"3740\":1,\"5972\":1}}],[\"hotspot虚拟机特有的概念\",{\"1\":{\"282\":1}}],[\"home\",{\"1\":{\"151\":1,\"155\":1,\"425\":1,\"426\":1,\"5011\":1,\"5018\":1,\"5019\":1,\"5264\":1,\"5316\":1,\"5317\":1}}],[\"hope\",{\"1\":{\"83\":2,\"105\":1,\"118\":1,\"5196\":2,\"5218\":1,\"5231\":1}}],[\"卡片\",{\"0\":{\"82\":1,\"5195\":1}}],[\"脚注\",{\"0\":{\"69\":1,\"5182\":1}}],[\"的升级版本\",{\"1\":{\"7071\":1}}],[\"的工作原理将分两种场景讨论\",{\"1\":{\"7029\":1}}],[\"的传输层协议\",{\"1\":{\"6989\":1}}],[\"的名为\",{\"1\":{\"6989\":1}}],[\"的前身\",{\"1\":{\"6989\":1}}],[\"的前后条件中有一个列没有索引\",{\"1\":{\"2847\":1,\"6519\":1}}],[\"的很多设计\",{\"1\":{\"6989\":1}}],[\"的很重要一点就是\",{\"1\":{\"3140\":1,\"6796\":1}}],[\"的制定过程\",{\"1\":{\"6989\":1}}],[\"的开发组全程参与了\",{\"1\":{\"6989\":1}}],[\"的开发组推动\",{\"1\":{\"6989\":1}}],[\"的网站支持了http\",{\"1\":{\"6979\":1,\"7002\":1}}],[\"的网络通信的基本操作单元\",{\"1\":{\"1975\":1,\"6256\":1}}],[\"的能力\",{\"1\":{\"6373\":1}}],[\"的次数\",{\"1\":{\"6288\":1}}],[\"的系统调用次数\",{\"1\":{\"6280\":1}}],[\"的系统变量\",{\"1\":{\"2927\":1,\"6599\":1}}],[\"的数量可以只有一个\",{\"1\":{\"6325\":1}}],[\"的数目也非常的多了\",{\"1\":{\"6269\":1}}],[\"的数据就写一个到\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"的数据\",{\"1\":{\"3179\":1,\"6837\":1}}],[\"的数据版本均可见\",{\"1\":{\"3034\":1,\"6701\":1}}],[\"的数据版本均不可见\",{\"1\":{\"3033\":1,\"6700\":1}}],[\"的数据库在异常崩溃后\",{\"1\":{\"2744\":1,\"6413\":1}}],[\"的数据填满整个网络\",{\"1\":{\"2667\":1}}],[\"的数据填满\",{\"1\":{\"2663\":1}}],[\"的数据大小如果大于\",{\"1\":{\"2501\":1,\"2502\":1}}],[\"的数据是存储在磁盘里的\",{\"1\":{\"1708\":1}}],[\"的数据结构\",{\"0\":{\"1003\":1},\"1\":{\"1775\":1,\"3880\":1,\"6035\":1,\"6265\":1}}],[\"的数据合并到\",{\"1\":{\"378\":1}}],[\"的重新选举\",{\"1\":{\"6198\":1}}],[\"的拦截器机制实现的\",{\"1\":{\"4956\":1}}],[\"的分页插件会拦截该查询请求\",{\"1\":{\"4956\":1}}],[\"的分页插件是一个用于实现分页查询的重要组件\",{\"1\":{\"4954\":1}}],[\"的增强工具\",{\"1\":{\"4939\":1}}],[\"的增强或通知\",{\"1\":{\"1215\":1,\"5567\":1}}],[\"的通用工具\",{\"1\":{\"4840\":1,\"7229\":1}}],[\"的通信模式\",{\"1\":{\"2290\":1}}],[\"的常见做法是将其放在\",{\"1\":{\"4816\":1,\"7213\":1}}],[\"的所在的位置\",{\"1\":{\"4674\":1,\"7193\":1}}],[\"的所有功能\",{\"1\":{\"4534\":1}}],[\"的所有\",{\"1\":{\"3101\":1,\"6757\":1}}],[\"的所有信息都暴露在了光天化日下\",{\"1\":{\"2282\":1}}],[\"的关键在于当前的业务场景\",{\"1\":{\"4650\":1,\"6223\":1}}],[\"的关系\",{\"1\":{\"581\":2,\"584\":2,\"588\":2,\"590\":1,\"3295\":1}}],[\"的选择\",{\"1\":{\"4646\":1,\"6219\":1}}],[\"的选举\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"的身份进入集群中\",{\"1\":{\"4627\":1,\"6205\":1}}],[\"的身份加入集群\",{\"1\":{\"4617\":1,\"6190\":1}}],[\"的大了\",{\"1\":{\"4625\":1,\"6203\":1}}],[\"的大小比较即可实现因果有序这一特性\",{\"1\":{\"4603\":1}}],[\"的大小比例默认为\",{\"1\":{\"334\":1}}],[\"的大小就会加\",{\"1\":{\"2680\":1}}],[\"的大小\",{\"1\":{\"2444\":1}}],[\"的例子\",{\"1\":{\"4618\":1,\"6191\":1}}],[\"的投票结果后发现比自己的合适于是更改投票为\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"的投票发现没自己的合适故不变\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"的投票信息后会将投票信息与自己的作比较\",{\"1\":{\"4616\":1,\"6189\":1}}],[\"的投票仅为1\",{\"1\":{\"4615\":1,\"6188\":1}}],[\"的崩溃\",{\"1\":{\"4613\":1,\"6186\":1}}],[\"的follower\",{\"1\":{\"4609\":1}}],[\"的广播过程不需要终止事务\",{\"1\":{\"4609\":1}}],[\"的变化而变化的\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"的变量值增加1\",{\"1\":{\"3670\":1,\"5834\":1}}],[\"的更新\",{\"1\":{\"4597\":1,\"6181\":1}}],[\"的更上层使用者\",{\"1\":{\"609\":1}}],[\"的架构\",{\"1\":{\"4563\":1,\"6163\":1}}],[\"的负载均衡等功能\",{\"1\":{\"4563\":1,\"6163\":1}}],[\"的注册以及多个\",{\"1\":{\"4563\":1,\"6163\":1}}],[\"的基础上增加了对\",{\"1\":{\"4534\":1}}],[\"的二次封装\",{\"1\":{\"4534\":1}}],[\"的比较\",{\"1\":{\"4302\":1,\"7127\":1}}],[\"的区别\",{\"1\":{\"4300\":1,\"7125\":1}}],[\"的空闲时间\",{\"1\":{\"3897\":1,\"6044\":1}}],[\"的内部元素并不是按照放入的时间排序\",{\"1\":{\"3880\":1,\"6035\":1}}],[\"的内存页\",{\"1\":{\"1702\":1,\"1703\":1}}],[\"的内存操作\",{\"1\":{\"632\":1}}],[\"的最大线程数是\",{\"1\":{\"3879\":1,\"6034\":1}}],[\"的最大连接数是多少\",{\"1\":{\"2473\":1}}],[\"的构造函数创建线程池的时候\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"的remove方法\",{\"1\":{\"3774\":1}}],[\"的run方法\",{\"1\":{\"1390\":1}}],[\"的键值对\",{\"1\":{\"3767\":1,\"5998\":1}}],[\"的获取\",{\"1\":{\"3752\":1,\"5984\":1}}],[\"的锁\",{\"1\":{\"3748\":1,\"5980\":1}}],[\"的持有权\",{\"1\":{\"3739\":1,\"5971\":1}}],[\"的当前值\",{\"1\":{\"3673\":1,\"5840\":1}}],[\"的线程栈信息\",{\"1\":{\"3558\":1}}],[\"的线程列表\",{\"1\":{\"3553\":1}}],[\"的十六进制表示为\",{\"1\":{\"3558\":1}}],[\"的计算\",{\"1\":{\"3545\":1}}],[\"的计算公式\",{\"1\":{\"1920\":1}}],[\"的停顿时间都较长\",{\"1\":{\"3544\":1}}],[\"的标准库\",{\"1\":{\"3449\":1}}],[\"的反向操作\",{\"1\":{\"3415\":1}}],[\"的相同命令\",{\"1\":{\"3361\":1}}],[\"的相关方法\",{\"1\":{\"609\":1}}],[\"的连接\",{\"1\":{\"3328\":1}}],[\"的连接状态查看\",{\"1\":{\"2534\":1}}],[\"的版本号\",{\"1\":{\"3307\":1}}],[\"的运行过程中\",{\"1\":{\"3302\":1,\"6088\":1}}],[\"的形式存储\",{\"1\":{\"3302\":1,\"6088\":1}}],[\"的形式的存在\",{\"1\":{\"3301\":1,\"6087\":1}}],[\"的形式把这些段分离出来\",{\"1\":{\"1640\":1}}],[\"的功能使其可以接受\",{\"1\":{\"3300\":1,\"6086\":1}}],[\"的过期时间设置短一点比如\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"的过程\",{\"1\":{\"364\":1}}],[\"的哨兵只要拿到\",{\"1\":{\"3214\":1}}],[\"的哨兵\",{\"1\":{\"3211\":1}}],[\"的响应分组\",{\"1\":{\"7042\":1}}],[\"的响应\",{\"1\":{\"3206\":1}}],[\"的情况\",{\"1\":{\"3176\":1,\"3609\":1,\"6834\":1}}],[\"的配置来决定何时将系统内核缓存区的数据同步到硬盘中的\",{\"1\":{\"3155\":1,\"6811\":1}}],[\"的混合持久化\",{\"1\":{\"3143\":1,\"6799\":1}}],[\"的结构相似\",{\"1\":{\"3130\":1,\"6786\":1}}],[\"的结构与对象的\",{\"1\":{\"3130\":1,\"6786\":1}}],[\"的结点\",{\"1\":{\"646\":1}}],[\"的话\",{\"1\":{\"3126\":1,\"4623\":1,\"5004\":1,\"6200\":1,\"6782\":1,\"7286\":1}}],[\"的事务\",{\"1\":{\"3036\":1,\"6703\":1}}],[\"的事务id\",{\"1\":{\"3032\":1,\"6698\":1}}],[\"的事务均可见\",{\"1\":{\"3032\":1,\"6698\":1}}],[\"的事务均不可见\",{\"1\":{\"3032\":1,\"6698\":1}}],[\"的事务并没有提交\",{\"1\":{\"2900\":1,\"6572\":1}}],[\"的账户增加\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"的账户扣除\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"的引擎都是用\",{\"1\":{\"2969\":1,\"6641\":1}}],[\"的引擎来实现的\",{\"1\":{\"2968\":1,\"6640\":1}}],[\"的组合\",{\"1\":{\"2946\":1,\"2956\":1,\"6618\":1,\"6628\":1}}],[\"的日志格式是\",{\"1\":{\"2933\":1,\"6605\":1}}],[\"的期间\",{\"1\":{\"2893\":1,\"2894\":1,\"6565\":1,\"6566\":1}}],[\"的存储引擎\",{\"1\":{\"2868\":1,\"6540\":1}}],[\"的支持\",{\"1\":{\"2866\":1,\"6538\":1}}],[\"的自增主键\",{\"1\":{\"2787\":1,\"6456\":1}}],[\"的表中\",{\"1\":{\"2787\":1,\"6456\":1}}],[\"的默认存储引擎\",{\"1\":{\"2728\":1,\"2730\":1,\"6397\":1,\"6399\":1}}],[\"的几个方式\",{\"1\":{\"2626\":1}}],[\"的报文\",{\"1\":{\"2594\":1}}],[\"的报文传输\",{\"1\":{\"2307\":1}}],[\"的原理是基于\",{\"1\":{\"4953\":1}}],[\"的原理如下\",{\"1\":{\"4940\":1}}],[\"的原子指令\",{\"1\":{\"3678\":1,\"5847\":1}}],[\"的原生字符串\",{\"1\":{\"3100\":1,\"6756\":1}}],[\"的原因其实比较有趣\",{\"1\":{\"3360\":1}}],[\"的原因\",{\"1\":{\"2557\":1}}],[\"的原则又不希望将此类类型的\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"的序列号是一样的\",{\"1\":{\"2540\":1}}],[\"的首部长度\",{\"1\":{\"2513\":1}}],[\"的发送速率\",{\"1\":{\"2493\":1}}],[\"的字段\",{\"1\":{\"2824\":2,\"6496\":2}}],[\"的字段进行序列号初始值的设定\",{\"1\":{\"2449\":1}}],[\"的字段变为有效\",{\"1\":{\"2447\":1}}],[\"的意义\",{\"1\":{\"2436\":1}}],[\"的意思是确认有\",{\"1\":{\"2703\":1}}],[\"的意思\",{\"1\":{\"2210\":1,\"2212\":1,\"2759\":1,\"3406\":1,\"6428\":1}}],[\"的面试题\",{\"1\":{\"2398\":1}}],[\"的权威\",{\"1\":{\"2394\":1,\"7098\":1}}],[\"的权力\",{\"1\":{\"1160\":1,\"5541\":1}}],[\"的请求\",{\"1\":{\"3300\":1,\"4627\":1,\"6086\":1,\"6205\":1}}],[\"的请求后\",{\"1\":{\"2391\":1,\"7095\":1}}],[\"的请求响应状态码\",{\"1\":{\"2258\":1}}],[\"的地址是\",{\"1\":{\"2375\":1}}],[\"的并发能力\",{\"1\":{\"2365\":1}}],[\"的帧是可以乱序发送的\",{\"1\":{\"2362\":1}}],[\"的安全性也是有保障的\",{\"1\":{\"2358\":1}}],[\"的安全问题\",{\"1\":{\"2288\":1}}],[\"的部分\",{\"1\":{\"2352\":1}}],[\"的握手阶段全部结束\",{\"1\":{\"2343\":1}}],[\"的握手过程\",{\"1\":{\"2307\":1}}],[\"的建立过程\",{\"1\":{\"2315\":1}}],[\"的状态很可能不一致\",{\"1\":{\"4608\":1}}],[\"的状态与\",{\"1\":{\"4608\":1}}],[\"的状态\",{\"1\":{\"2273\":1,\"3798\":1,\"5810\":1}}],[\"的状态信息都会被保存在相应的\",{\"1\":{\"1872\":1}}],[\"的缺点有哪些\",{\"0\":{\"2270\":1}}],[\"的优点有哪些\",{\"0\":{\"2259\":1}}],[\"的优先级更高\",{\"1\":{\"2247\":1}}],[\"的优先级高于\",{\"1\":{\"2232\":1}}],[\"的值会发生变化\",{\"1\":{\"2692\":1}}],[\"的值\",{\"1\":{\"2245\":1,\"2706\":1,\"3674\":1,\"5842\":1}}],[\"的操作\",{\"1\":{\"2224\":1,\"3544\":1}}],[\"的提示\",{\"1\":{\"2119\":1}}],[\"的同时并不会释放自己已经持有的资源\",{\"1\":{\"1993\":1}}],[\"的同一个\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"的输入\",{\"1\":{\"1948\":1}}],[\"的输出\",{\"1\":{\"1948\":1}}],[\"的调度算法\",{\"1\":{\"1922\":1}}],[\"的性能还行\",{\"1\":{\"2729\":1,\"6398\":1}}],[\"的性能问题\",{\"1\":{\"2303\":1}}],[\"的性能如何\",{\"0\":{\"2289\":1}}],[\"的性能\",{\"1\":{\"1829\":1,\"6358\":1}}],[\"的流程来完成完整的业务流程\",{\"1\":{\"1826\":1,\"1846\":1,\"6355\":1,\"6388\":1}}],[\"的流程中\",{\"1\":{\"1274\":1,\"5616\":1}}],[\"的方案示意图\",{\"1\":{\"6344\":1}}],[\"的方案\",{\"1\":{\"1815\":1,\"1816\":1,\"6342\":1,\"6343\":1,\"6361\":1}}],[\"的方式即使监听的\",{\"1\":{\"6269\":1}}],[\"的方式解决\",{\"1\":{\"2288\":1}}],[\"的方式\",{\"1\":{\"1266\":1}}],[\"的吞吐率\",{\"1\":{\"1810\":1,\"6317\":1}}],[\"的页面为止\",{\"1\":{\"1742\":1}}],[\"的使用情况来推测要淘汰的页面\",{\"1\":{\"1734\":2}}],[\"的置换算法的基本思路是\",{\"1\":{\"1733\":1}}],[\"的缓存\",{\"0\":{\"1707\":1},\"1\":{\"2663\":1,\"3105\":1,\"6761\":1}}],[\"的缓存池中\",{\"1\":{\"1186\":1}}],[\"的头部\",{\"1\":{\"1704\":1}}],[\"的访问与交互\",{\"1\":{\"1673\":1}}],[\"的单级页表再分页\",{\"1\":{\"1664\":1}}],[\"的环境下\",{\"1\":{\"1663\":1}}],[\"的问题\",{\"0\":{\"3681\":1,\"5850\":1},\"1\":{\"1654\":1,\"1657\":1,\"1774\":1,\"2316\":1,\"2365\":1,\"3908\":1,\"6055\":1,\"6264\":1,\"6381\":1}}],[\"的问题就是内存交换\",{\"1\":{\"1652\":1}}],[\"的映射关系\",{\"1\":{\"1634\":1}}],[\"的服务就被中断了\",{\"1\":{\"3235\":1}}],[\"的服务端监听了一个端口\",{\"1\":{\"2473\":1}}],[\"的服务进程构成\",{\"1\":{\"1525\":1}}],[\"的服务器端由被称为\",{\"1\":{\"1525\":1}}],[\"的每个非叶子节点存储索引\",{\"1\":{\"2797\":1,\"6469\":1}}],[\"的每个\",{\"1\":{\"1443\":1}}],[\"的速度处理\",{\"1\":{\"1427\":1}}],[\"的某个接口接收到请求\",{\"1\":{\"1417\":1}}],[\"的代码\",{\"1\":{\"1414\":1,\"2000\":1}}],[\"的消息作为一个提案\",{\"1\":{\"4604\":1}}],[\"的消息内容是不相同的\",{\"1\":{\"1441\":1}}],[\"的消息\",{\"1\":{\"1413\":2}}],[\"的应用程序中尤其地高性能\",{\"1\":{\"4561\":1,\"6161\":1}}],[\"的应用遍地开花\",{\"1\":{\"2269\":1}}],[\"的应用范围非常的广泛\",{\"1\":{\"2269\":1}}],[\"的应用\",{\"1\":{\"1410\":1}}],[\"的特性\",{\"1\":{\"1282\":1,\"5624\":1}}],[\"的属性\",{\"1\":{\"1278\":1,\"5620\":1}}],[\"的成品创建依赖于\",{\"1\":{\"1274\":1,\"5616\":1}}],[\"的隔离级别\",{\"1\":{\"1235\":1,\"3008\":1,\"5587\":1,\"6680\":1}}],[\"的入参过程中\",{\"1\":{\"1199\":1,\"5551\":1}}],[\"的销毁方法\",{\"1\":{\"1188\":1}}],[\"的作用范围为\",{\"1\":{\"1186\":2}}],[\"的实际值修改为\",{\"1\":{\"3674\":1,\"5842\":1}}],[\"的实际接收能力控制发送的数据量\",{\"1\":{\"2661\":1}}],[\"的实例就交给客户端代码管理\",{\"1\":{\"1165\":1}}],[\"的实例后\",{\"1\":{\"1165\":1}}],[\"的实现依赖于\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"的实现\",{\"1\":{\"624\":1}}],[\"的实现细节\",{\"1\":{\"609\":1}}],[\"的生命周期管理\",{\"1\":{\"1186\":1}}],[\"的生命周期流程\",{\"1\":{\"1167\":1}}],[\"的生命周期\",{\"1\":{\"1164\":1,\"1165\":1,\"1186\":1}}],[\"的思想就是将原本在程序中手动创建对象的控制权\",{\"1\":{\"1158\":1,\"5539\":1}}],[\"的一级缓存与二级缓存\",{\"1\":{\"5722\":1}}],[\"的一级缓存与二级缓存只适用于单体项目\",{\"1\":{\"1143\":1}}],[\"的一个重要组件\",{\"1\":{\"4939\":1}}],[\"的一个内部类\",{\"1\":{\"3845\":1,\"5961\":1}}],[\"的一种工具\",{\"1\":{\"3517\":1}}],[\"的一方\",{\"1\":{\"2619\":1}}],[\"的一套指令集规范\",{\"1\":{\"181\":1,\"5290\":1}}],[\"的动态代理\",{\"1\":{\"1128\":1,\"5709\":1}}],[\"的高16位异或低16位实现的\",{\"1\":{\"1069\":1}}],[\"的模式还有个问题\",{\"1\":{\"6379\":1}}],[\"的模式会造成\",{\"1\":{\"2303\":1}}],[\"的模式\",{\"1\":{\"872\":1}}],[\"的时机不同\",{\"1\":{\"3017\":1,\"6689\":1}}],[\"的时间段内不会占用\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"的时间过长\",{\"1\":{\"3825\":1,\"5942\":1}}],[\"的时间\",{\"1\":{\"2242\":1}}],[\"的时间复杂度\",{\"1\":{\"705\":1,\"5473\":1}}],[\"的时候都会分配一个特定的偏移量\",{\"1\":{\"4674\":1,\"7193\":1}}],[\"的时候不存在线程安全问题\",{\"1\":{\"4671\":1,\"7190\":1}}],[\"的时候同样更新\",{\"1\":{\"4671\":1,\"7190\":1}}],[\"的时候突然挂了\",{\"1\":{\"4623\":1,\"6200\":1}}],[\"的时候你如何排查问题\",{\"1\":{\"4340\":1,\"7165\":1}}],[\"的时候依赖一次\",{\"1\":{\"3796\":1,\"5808\":1}}],[\"的时候才对数据进行过期检查\",{\"1\":{\"3173\":1,\"6831\":1}}],[\"的时候\",{\"1\":{\"1999\":1,\"3863\":1,\"4651\":1,\"6017\":1,\"6224\":1}}],[\"的时候会把null值也拷贝\",{\"1\":{\"793\":1}}],[\"的时候又被元空间取代了\",{\"1\":{\"282\":1}}],[\"的路径\",{\"1\":{\"666\":1}}],[\"的树称为空树\",{\"1\":{\"649\":1}}],[\"的文件描述符个数限制\",{\"1\":{\"1771\":1}}],[\"的文件描述符\",{\"1\":{\"1770\":1}}],[\"的文章\",{\"1\":{\"625\":1}}],[\"的文档\",{\"1\":{\"567\":1}}],[\"的历史遗留问题了\",{\"1\":{\"621\":1}}],[\"的定义是在同一端进\",{\"1\":{\"616\":1}}],[\"的底层具体实现不同\",{\"1\":{\"605\":1}}],[\"的程序\",{\"1\":{\"596\":1}}],[\"的信息\",{\"1\":{\"493\":1,\"5380\":1}}],[\"的核心理念是实现一次登录\",{\"1\":{\"4043\":1}}],[\"的核心\",{\"1\":{\"451\":1,\"5344\":1}}],[\"的概念\",{\"1\":{\"374\":1,\"2668\":1}}],[\"的对象存活\",{\"1\":{\"334\":1}}],[\"的对象可被回收\",{\"1\":{\"297\":1}}],[\"的对象先放在伊甸园区\",{\"1\":{\"262\":1}}],[\"的垃圾回收器将对伊甸园区进行垃圾回收\",{\"1\":{\"263\":1}}],[\"的设计者们不仅需要考虑内存如何分配\",{\"1\":{\"261\":1}}],[\"的主要组成部分\",{\"0\":{\"176\":1,\"5285\":1}}],[\"的\",{\"0\":{\"476\":1,\"5371\":1},\"1\":{\"67\":1,\"117\":1,\"443\":1,\"629\":1,\"630\":1,\"1128\":1,\"1129\":1,\"1175\":2,\"1182\":1,\"1481\":1,\"1710\":1,\"2221\":1,\"2316\":1,\"2358\":1,\"2389\":1,\"2390\":1,\"2392\":1,\"2450\":1,\"2452\":2,\"2459\":1,\"2477\":3,\"2553\":1,\"2712\":1,\"2776\":1,\"2787\":1,\"2805\":1,\"2959\":1,\"3032\":1,\"3103\":1,\"3217\":1,\"3540\":1,\"3678\":1,\"3878\":1,\"4625\":1,\"4816\":1,\"5180\":1,\"5230\":1,\"5336\":1,\"5709\":1,\"5710\":1,\"5715\":1,\"5847\":1,\"6033\":1,\"6203\":1,\"6445\":1,\"6456\":1,\"6477\":1,\"6631\":1,\"6698\":1,\"6759\":1,\"6931\":1,\"6989\":2,\"7035\":1,\"7036\":2,\"7038\":4,\"7040\":1,\"7048\":1,\"7050\":3,\"7053\":1,\"7054\":2,\"7055\":1,\"7077\":2,\"7093\":1,\"7094\":1,\"7096\":1,\"7213\":1}}],[\"iwemediaclient\",{\"1\":{\"4928\":1,\"4929\":1,\"4931\":2,\"4991\":1,\"4994\":2,\"4999\":4}}],[\"iarticleclient\",{\"1\":{\"4548\":1,\"4857\":4,\"4919\":1,\"4923\":1}}],[\"iarticleclientfallback\",{\"1\":{\"4548\":1,\"4919\":1,\"4923\":1}}],[\"ihello\",{\"1\":{\"3961\":1,\"3963\":1,\"3965\":1,\"3967\":1,\"3977\":3,\"3979\":2}}],[\"illegalmonitorstateexception的异常的原因\",{\"1\":{\"3741\":1,\"5973\":1}}],[\"illegalargumentexception\",{\"1\":{\"901\":1,\"3857\":2,\"5519\":1,\"6011\":2}}],[\"ir\",{\"1\":{\"3417\":1}}],[\"ir⋯\",{\"1\":{\"94\":1,\"5207\":1}}],[\"ibd文件就包含了该表的索引和数据\",{\"1\":{\"2797\":1,\"6469\":1}}],[\"ip地址\",{\"1\":{\"2468\":1,\"2470\":1}}],[\"ipv6\",{\"1\":{\"2375\":2}}],[\"ipv4\",{\"1\":{\"2374\":1,\"2477\":1,\"2627\":2}}],[\"ip常见面试题\",{\"0\":{\"2372\":1}}],[\"ip\",{\"0\":{\"2373\":1,\"2566\":1,\"2724\":1,\"7020\":1,\"7023\":1},\"1\":{\"1975\":1,\"2290\":1,\"2374\":2,\"2375\":1,\"2377\":1,\"2379\":1,\"2380\":2,\"2381\":1,\"2389\":2,\"2390\":2,\"2392\":1,\"2395\":1,\"2396\":1,\"2414\":1,\"2452\":1,\"2463\":1,\"2473\":1,\"2475\":1,\"2477\":1,\"2502\":2,\"2515\":1,\"2520\":1,\"2568\":1,\"2569\":2,\"2578\":2,\"2709\":1,\"3458\":1,\"4141\":2,\"6256\":1,\"7026\":3,\"7028\":1,\"7033\":3,\"7034\":2,\"7035\":1,\"7036\":1,\"7038\":5,\"7039\":2,\"7040\":2,\"7041\":1,\"7042\":1,\"7045\":2,\"7046\":1,\"7048\":1,\"7050\":5,\"7051\":2,\"7055\":1,\"7064\":1,\"7093\":2,\"7094\":2,\"7096\":1,\"7099\":1,\"7100\":1}}],[\"impl\",{\"1\":{\"4857\":1,\"4999\":1}}],[\"implflushbuffer\",{\"1\":{\"3527\":1}}],[\"implemented\",{\"1\":{\"2210\":1}}],[\"implementation\",{\"1\":{\"1103\":1}}],[\"implements\",{\"1\":{\"1097\":1,\"1325\":1,\"3762\":1,\"3786\":1,\"3963\":1,\"3965\":1,\"3975\":1,\"4029\":1,\"4755\":1,\"4857\":1,\"4919\":1,\"4931\":1,\"4935\":1,\"4994\":1,\"4999\":1,\"5797\":1,\"5993\":1}}],[\"import\",{\"1\":{\"2177\":6,\"2182\":2,\"2185\":6,\"3772\":3,\"3855\":4,\"4857\":31,\"4860\":11,\"4929\":3,\"4931\":6,\"4933\":7,\"4935\":6,\"4938\":11,\"4981\":9,\"4986\":13,\"4994\":6,\"4997\":5,\"4999\":21,\"6009\":4}}],[\"import注解可以导入配置类或者bean到当前类中\",{\"1\":{\"1307\":1}}],[\"import注解导入autoconfigurationimportselector类\",{\"1\":{\"1307\":1}}],[\"img\",{\"1\":{\"1251\":1,\"1271\":1,\"1276\":1,\"1281\":1,\"2851\":1,\"2942\":1,\"4161\":1,\"4515\":1,\"5468\":1,\"5603\":1,\"5613\":1,\"5618\":1,\"5623\":1,\"5633\":1,\"5635\":1,\"5637\":1,\"5639\":1,\"5696\":1,\"5803\":1,\"5886\":1,\"5888\":1,\"6084\":1,\"6132\":1,\"6210\":1,\"6268\":1,\"6293\":1,\"6306\":1,\"6312\":1,\"6345\":1,\"6365\":1,\"6383\":1,\"6457\":1,\"6466\":1,\"6523\":1,\"6614\":1,\"6961\":1,\"6963\":1,\"6966\":1,\"6968\":1,\"7009\":1,\"7021\":1}}],[\"imageio\",{\"1\":{\"4857\":1}}],[\"imagefile\",{\"1\":{\"4857\":2}}],[\"imagelist\",{\"1\":{\"4857\":5}}],[\"imagescan\",{\"1\":{\"4857\":6}}],[\"images\",{\"1\":{\"3307\":4,\"4857\":15}}],[\"image\",{\"1\":{\"1194\":1,\"2087\":1,\"2091\":1,\"2096\":1,\"3294\":1,\"3295\":1,\"3307\":3,\"4229\":1,\"4857\":2,\"5546\":1}}],[\"i<size\",{\"1\":{\"787\":1}}],[\"i=0\",{\"1\":{\"787\":1}}],[\"io等\",{\"1\":{\"2139\":1}}],[\"ioc容器中\",{\"1\":{\"4182\":2,\"4539\":1,\"6155\":1}}],[\"ioc容器的整体功能\",{\"1\":{\"1162\":1}}],[\"ioc了解过吗\",{\"0\":{\"4138\":1}}],[\"ioc\",{\"1\":{\"1158\":3,\"1161\":1,\"1186\":1,\"4139\":1,\"5539\":3,\"5542\":1}}],[\"io\",{\"1\":{\"787\":2,\"790\":3,\"1054\":1,\"1081\":1,\"1823\":1,\"1835\":1,\"2144\":1,\"2757\":1,\"2799\":1,\"3084\":1,\"3091\":1,\"3338\":1,\"3527\":13,\"3589\":1,\"3786\":1,\"4986\":1,\"5797\":1,\"6352\":1,\"6367\":1,\"6426\":1,\"6471\":1,\"6736\":1,\"6741\":1,\"6747\":1,\"7066\":1}}],[\"ioexception\",{\"1\":{\"472\":1,\"478\":1,\"480\":3,\"787\":1,\"790\":1,\"4986\":2,\"5367\":1,\"5373\":1}}],[\"i>=1\",{\"1\":{\"677\":1}}],[\"i++操作不是原子操作\",{\"1\":{\"3662\":1,\"5825\":1}}],[\"i++\",{\"1\":{\"634\":2,\"787\":1,\"1474\":1,\"1625\":1,\"3696\":1,\"5865\":1,\"6923\":1}}],[\"i\",{\"0\":{\"1766\":1,\"6258\":1},\"1\":{\"634\":5,\"677\":1,\"682\":1,\"787\":1,\"1474\":6,\"1625\":3,\"1810\":1,\"1870\":1,\"1915\":1,\"3167\":1,\"3181\":1,\"3182\":1,\"3183\":1,\"3185\":1,\"3188\":1,\"3307\":1,\"3319\":2,\"3406\":1,\"3424\":1,\"3695\":1,\"3772\":2,\"3775\":5,\"3898\":4,\"4857\":3,\"5864\":1,\"6045\":4,\"6259\":1,\"6279\":3,\"6317\":1,\"6823\":1,\"6839\":1,\"6840\":1,\"6841\":1,\"6843\":1,\"6846\":1,\"6923\":6}}],[\"ifconfig\",{\"1\":{\"3458\":1}}],[\"if\",{\"1\":{\"444\":4,\"475\":1,\"480\":4,\"507\":2,\"787\":1,\"812\":2,\"816\":2,\"824\":1,\"826\":2,\"858\":2,\"1016\":1,\"1047\":1,\"1062\":1,\"1466\":4,\"1474\":1,\"1521\":1,\"1547\":1,\"1613\":1,\"2188\":2,\"2240\":1,\"2242\":2,\"2243\":1,\"2245\":2,\"2253\":1,\"2255\":1,\"3765\":3,\"3775\":1,\"3857\":5,\"4857\":23,\"4895\":2,\"4903\":1,\"4910\":2,\"4979\":5,\"4981\":1,\"4986\":1,\"4999\":8,\"5337\":4,\"5370\":1,\"5395\":2,\"5488\":2,\"5996\":1,\"6011\":5,\"6914\":4,\"6923\":1,\"7063\":4,\"7273\":1}}],[\"invalid\",{\"1\":{\"4979\":2}}],[\"invocationhandler\",{\"1\":{\"899\":1,\"901\":2,\"903\":1,\"1128\":1,\"3975\":1,\"5517\":1,\"5519\":2,\"5521\":1,\"5709\":1}}],[\"invoke\",{\"1\":{\"902\":1,\"903\":2,\"904\":2,\"975\":1,\"980\":3,\"993\":2,\"1128\":1,\"3975\":2,\"5520\":1,\"5521\":2,\"5522\":2,\"5709\":1}}],[\"invokevirtual\",{\"1\":{\"491\":1,\"5378\":1}}],[\"invokestatic\",{\"1\":{\"491\":1,\"5378\":1}}],[\"inner\",{\"1\":{\"4860\":1,\"4938\":1}}],[\"innodb行锁有共享锁和排他锁两种模式\",{\"1\":{\"4225\":1}}],[\"innodb的行锁是在索引上实现的\",{\"1\":{\"4223\":1}}],[\"innodb存储引擎是通过索引加锁的方式实现行级锁的\",{\"1\":{\"4222\":1}}],[\"innodb下的当前读和快照读\",{\"1\":{\"3020\":1}}],[\"innodb特性\",{\"0\":{\"2726\":1,\"6395\":1}}],[\"innodb\",{\"0\":{\"2727\":1,\"6396\":1,\"6734\":1},\"1\":{\"1708\":1,\"1710\":1,\"2730\":1,\"2733\":1,\"2734\":1,\"2737\":2,\"2739\":1,\"2743\":1,\"2744\":1,\"2746\":1,\"2749\":1,\"2750\":1,\"2765\":1,\"2767\":2,\"2770\":1,\"2775\":1,\"2787\":3,\"2794\":1,\"2796\":1,\"2797\":2,\"2813\":1,\"2869\":1,\"2886\":2,\"2907\":1,\"2908\":1,\"2925\":1,\"2927\":2,\"2928\":1,\"2929\":1,\"2930\":1,\"2933\":1,\"2935\":1,\"2937\":1,\"2968\":1,\"2969\":1,\"2975\":1,\"2999\":1,\"3011\":1,\"3019\":1,\"3027\":1,\"3030\":1,\"3041\":1,\"4302\":1,\"6399\":1,\"6402\":1,\"6403\":1,\"6406\":2,\"6408\":1,\"6412\":1,\"6413\":1,\"6415\":1,\"6418\":1,\"6419\":1,\"6434\":1,\"6436\":2,\"6439\":1,\"6444\":1,\"6456\":3,\"6465\":1,\"6468\":1,\"6469\":2,\"6485\":1,\"6541\":1,\"6558\":2,\"6579\":1,\"6580\":1,\"6597\":1,\"6599\":2,\"6600\":1,\"6601\":1,\"6602\":1,\"6605\":1,\"6607\":1,\"6609\":1,\"6640\":1,\"6641\":1,\"6647\":1,\"6671\":1,\"6683\":1,\"6691\":1,\"6693\":1,\"6696\":1,\"6709\":1,\"7127\":1}}],[\"inheritablethreadlocals\",{\"1\":{\"3762\":1,\"3763\":1,\"5993\":1,\"5994\":1}}],[\"inheritance\",{\"1\":{\"593\":1}}],[\"inode\",{\"1\":{\"3477\":1,\"3486\":1,\"3487\":1,\"3488\":1,\"3489\":3,\"3490\":2,\"3491\":1}}],[\"inc\",{\"0\":{\"2918\":1,\"6590\":1},\"1\":{\"2876\":1,\"2920\":1,\"2921\":1,\"2922\":2,\"2923\":1,\"2924\":1,\"2927\":1,\"2928\":1,\"6548\":1,\"6592\":1,\"6593\":1,\"6594\":2,\"6595\":1,\"6596\":1,\"6599\":1,\"6600\":1}}],[\"include\",{\"1\":{\"1797\":1,\"6302\":1}}],[\"increments\",{\"1\":{\"816\":1}}],[\"increment\",{\"1\":{\"444\":1,\"2919\":1,\"2922\":1,\"2923\":1,\"2926\":1,\"5337\":1,\"6591\":1,\"6594\":1,\"6595\":1,\"6598\":1}}],[\"inactive\",{\"1\":{\"1701\":1,\"1703\":1,\"1704\":2,\"1706\":1}}],[\"info\",{\"1\":{\"1346\":1,\"3201\":2,\"4895\":1,\"4981\":1,\"4986\":2,\"4997\":2,\"5011\":1,\"5671\":1}}],[\"info信息等\",{\"1\":{\"1345\":1,\"5670\":1}}],[\"inf\",{\"1\":{\"1290\":1,\"1293\":1,\"1294\":1,\"1295\":2,\"1300\":1,\"1308\":1,\"4232\":1,\"5631\":1,\"5636\":2,\"5638\":2}}],[\"instream\",{\"1\":{\"2111\":3}}],[\"instantiationawarebeanpostprocessor和bean关联\",{\"1\":{\"1169\":1,\"1172\":1}}],[\"instanceof\",{\"1\":{\"1016\":1,\"1062\":1}}],[\"instance\",{\"1\":{\"787\":2,\"790\":1,\"858\":5,\"3581\":1,\"5488\":5}}],[\"insert\",{\"1\":{\"1147\":1,\"2856\":1,\"2931\":1,\"2932\":1,\"3022\":1,\"3041\":1,\"3042\":3,\"5713\":1,\"5727\":1,\"6528\":1,\"6603\":1,\"6604\":1,\"6709\":1,\"6710\":3}}],[\"insertelementat\",{\"1\":{\"812\":2}}],[\"index=8\",{\"1\":{\"6955\":1}}],[\"index=7\",{\"1\":{\"1493\":1,\"2136\":1,\"3390\":1,\"6946\":1}}],[\"index地址\",{\"1\":{\"5018\":1}}],[\"indexcontroller\",{\"1\":{\"5011\":1}}],[\"indexrequest\",{\"1\":{\"4986\":7}}],[\"indexfor方法其实主要是将hash生成的整型转换成链表数组中的下标\",{\"1\":{\"1017\":1}}],[\"indexfor\",{\"1\":{\"1011\":1,\"1014\":1,\"1016\":1}}],[\"index+1\",{\"1\":{\"824\":1,\"826\":1}}],[\"index\",{\"1\":{\"812\":9,\"814\":2,\"816\":10,\"822\":2,\"824\":5,\"826\":6,\"842\":1,\"1048\":1,\"1062\":1,\"1072\":1,\"2756\":2,\"2789\":1,\"2792\":1,\"2796\":1,\"2805\":1,\"2813\":1,\"2821\":1,\"3307\":1,\"3332\":1,\"3334\":4,\"4986\":2,\"5011\":3,\"5019\":1,\"6425\":2,\"6459\":1,\"6463\":1,\"6468\":1,\"6477\":1,\"6485\":1,\"6493\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"459\":1,\"816\":1,\"5354\":1}}],[\"in\",{\"1\":{\"787\":2,\"1015\":1,\"1045\":1,\"1061\":1,\"1064\":1,\"1070\":1,\"1074\":1,\"1081\":1,\"1533\":1,\"1797\":1,\"1970\":1,\"2912\":1,\"2939\":1,\"3022\":1,\"3857\":2,\"3927\":1,\"3928\":1,\"4857\":2,\"6011\":2,\"6251\":1,\"6302\":1,\"6584\":1,\"6611\":1,\"6740\":1}}],[\"inputstream\",{\"1\":{\"478\":2,\"2111\":1,\"5373\":2}}],[\"int放在jvm栈\",{\"1\":{\"4157\":1}}],[\"int和integer对象分别放在jvm哪里\",{\"0\":{\"4156\":1}}],[\"intel\",{\"1\":{\"3678\":1,\"5847\":1}}],[\"integer对象放在jvm堆\",{\"1\":{\"4157\":1}}],[\"integer>\",{\"1\":{\"1474\":1,\"4857\":1,\"6923\":1}}],[\"integer\",{\"1\":{\"569\":1,\"1201\":1,\"1474\":1,\"3878\":1,\"3879\":1,\"3880\":1,\"3911\":1,\"3912\":1,\"3913\":1,\"4748\":1,\"4857\":1,\"4999\":3,\"5553\":1,\"6033\":1,\"6034\":1,\"6035\":1,\"6058\":1,\"6059\":1,\"6060\":1,\"6923\":1}}],[\"interview\",{\"0\":{\"7299\":1}}],[\"interruptedexception\",{\"1\":{\"3772\":1}}],[\"interactive\",{\"1\":{\"3319\":1}}],[\"interceptorregistry\",{\"1\":{\"1398\":1}}],[\"interceptor\",{\"1\":{\"1129\":1,\"1131\":3,\"1395\":1,\"4860\":3,\"4938\":3,\"4939\":1,\"4940\":1,\"4941\":1,\"4944\":1,\"4953\":1,\"5710\":1}}],[\"intercept\",{\"1\":{\"910\":2,\"911\":1,\"912\":1,\"1129\":1,\"4941\":1,\"4942\":1,\"4946\":1,\"5528\":2,\"5529\":1,\"5530\":1,\"5710\":1}}],[\"internet\",{\"1\":{\"2715\":1,\"6989\":1,\"7010\":1,\"7071\":1}}],[\"internal\",{\"1\":{\"1325\":2,\"2209\":1}}],[\"intern\",{\"1\":{\"281\":1,\"290\":1}}],[\"interfaces\",{\"1\":{\"901\":2,\"5519\":2}}],[\"interface\",{\"1\":{\"180\":1,\"181\":1,\"903\":1,\"911\":1,\"1095\":1,\"3961\":1,\"4029\":1,\"4548\":1,\"4753\":1,\"4923\":1,\"4929\":1,\"4933\":1,\"4992\":1,\"5289\":1,\"5290\":1,\"5521\":1,\"5529\":1}}],[\"int\",{\"0\":{\"4158\":1},\"1\":{\"475\":1,\"486\":5,\"634\":3,\"787\":3,\"801\":1,\"802\":1,\"812\":3,\"814\":1,\"816\":3,\"822\":1,\"824\":2,\"826\":2,\"842\":1,\"964\":1,\"968\":1,\"971\":1,\"1007\":1,\"1011\":2,\"1016\":5,\"1047\":1,\"1048\":1,\"1062\":3,\"1068\":2,\"1072\":2,\"1076\":2,\"1095\":1,\"1097\":1,\"1466\":5,\"1474\":5,\"1625\":4,\"1797\":2,\"1952\":2,\"2111\":2,\"2177\":1,\"2182\":1,\"2185\":1,\"3099\":1,\"3654\":1,\"3655\":1,\"3656\":1,\"3657\":1,\"3772\":1,\"3775\":2,\"3857\":2,\"4933\":2,\"4935\":2,\"5370\":1,\"5897\":1,\"5898\":1,\"5899\":1,\"5900\":1,\"6011\":2,\"6302\":2,\"6755\":1,\"6914\":5,\"6923\":5}}],[\"initconfig\",{\"1\":{\"4921\":1}}],[\"initmap\",{\"1\":{\"4857\":1}}],[\"initiations\",{\"1\":{\"2538\":1}}],[\"initialize\",{\"1\":{\"1380\":1}}],[\"initializingbean\",{\"1\":{\"1183\":1}}],[\"initialization\",{\"1\":{\"409\":1,\"5298\":1}}],[\"initial\",{\"1\":{\"961\":1,\"971\":1,\"3857\":1,\"6011\":1}}],[\"initialheapsize\",{\"1\":{\"243\":1}}],[\"init\",{\"1\":{\"1184\":1,\"2177\":1,\"2185\":1}}],[\"initalmemory\",{\"1\":{\"250\":2}}],[\"ischeduleclient\",{\"1\":{\"4932\":1,\"4933\":1,\"4935\":2}}],[\"isempty\",{\"1\":{\"4895\":1}}],[\"isimagescan\",{\"1\":{\"4857\":3}}],[\"istextscan\",{\"1\":{\"4857\":2}}],[\"isterminated\",{\"1\":{\"3894\":1}}],[\"issensitive\",{\"1\":{\"4857\":5}}],[\"isshutdown\",{\"1\":{\"3894\":1}}],[\"isheldexclusively\",{\"1\":{\"3653\":1,\"5896\":1}}],[\"isnotblank\",{\"1\":{\"4895\":1,\"4986\":1}}],[\"isnoneblank\",{\"1\":{\"4857\":2,\"4981\":1}}],[\"isn\",{\"0\":{\"2564\":1},\"1\":{\"2413\":1,\"2527\":1,\"2528\":2,\"2529\":1}}],[\"isr\",{\"1\":{\"1533\":1}}],[\"isolation\",{\"1\":{\"1231\":1,\"1232\":1,\"1233\":1,\"1234\":1,\"1235\":1,\"2973\":1,\"5583\":1,\"5584\":1,\"5585\":1,\"5586\":1,\"5587\":1,\"6645\":1}}],[\"is\",{\"1\":{\"83\":2,\"581\":1,\"588\":1,\"590\":1,\"787\":2,\"790\":1,\"1047\":1,\"2538\":1,\"3206\":1,\"3579\":1,\"3857\":5,\"5196\":2,\"6011\":5}}],[\"idea\",{\"1\":{\"5092\":1}}],[\"idempotence=true来保证幂等性\",{\"1\":{\"1499\":1,\"4678\":1}}],[\"idtype\",{\"1\":{\"4824\":1,\"4972\":1}}],[\"id=\",{\"1\":{\"4748\":2}}],[\"idle\",{\"1\":{\"3857\":2,\"6011\":2}}],[\"idx=1\",{\"1\":{\"3727\":1,\"3930\":1,\"5929\":1,\"6074\":1}}],[\"idx=3\",{\"1\":{\"3702\":1,\"5824\":1}}],[\"idx=2\",{\"1\":{\"1368\":1,\"5646\":1}}],[\"id>\",{\"1\":{\"3307\":1}}],[\"id比较\",{\"1\":{\"3053\":1}}],[\"id字段记录的事务id\",{\"1\":{\"3053\":1}}],[\"id和活跃事务id列表\",{\"1\":{\"3052\":1}}],[\"id去跟up\",{\"1\":{\"3052\":1}}],[\"id就是4\",{\"1\":{\"3051\":1}}],[\"id就是1\",{\"1\":{\"3051\":1}}],[\"id所在的旧记录就是当前事务能看见的最新老版本\",{\"1\":{\"3045\":1}}],[\"id再比较\",{\"1\":{\"3045\":1}}],[\"id跟read\",{\"1\":{\"3045\":1}}],[\"id值越大\",{\"1\":{\"3044\":1}}],[\"id+1\",{\"1\":{\"3033\":1,\"6700\":1}}],[\"ids\",{\"1\":{\"3032\":2,\"3034\":2,\"3035\":2,\"6698\":2,\"6701\":2,\"6702\":2}}],[\"id\",{\"1\":{\"67\":1,\"1095\":1,\"1097\":2,\"1175\":1,\"2362\":2,\"2953\":2,\"3019\":1,\"3028\":2,\"3030\":2,\"3032\":9,\"3033\":3,\"3034\":5,\"3035\":2,\"3036\":2,\"3045\":3,\"3046\":3,\"3047\":3,\"3048\":2,\"3051\":2,\"3052\":1,\"3053\":2,\"3233\":1,\"3249\":1,\"3307\":1,\"3567\":1,\"3796\":1,\"4132\":1,\"4603\":1,\"4748\":1,\"4755\":2,\"4824\":3,\"4826\":1,\"4857\":4,\"4972\":3,\"4974\":1,\"4975\":1,\"4986\":1,\"5180\":1,\"5808\":1,\"6625\":2,\"6691\":1,\"6694\":2,\"6696\":2,\"6698\":9,\"6700\":3,\"6701\":5,\"6702\":2,\"6703\":2,\"6854\":1}}],[\"iterator\",{\"1\":{\"941\":3,\"944\":1}}],[\"its\",{\"1\":{\"787\":1,\"824\":1,\"826\":1}}],[\"it\",{\"1\":{\"37\":2,\"787\":1,\"790\":1,\"3307\":1,\"3319\":1,\"5150\":2}}],[\"我默认大家对http\",{\"1\":{\"6982\":1,\"7005\":1}}],[\"我就去总结md5相关的知识\",{\"1\":{\"5088\":1}}],[\"我就是了解\",{\"1\":{\"4290\":1,\"7115\":1}}],[\"我当时信以为真\",{\"1\":{\"5088\":1}}],[\"我当时一脸懵逼\",{\"1\":{\"5088\":1}}],[\"我当前事务是能看见的\",{\"1\":{\"3048\":1}}],[\"我当前事务也是看不见的\",{\"1\":{\"3048\":1}}],[\"我不会\",{\"1\":{\"4434\":1}}],[\"我还没体验过阿里的\",{\"1\":{\"4423\":1}}],[\"我也记不清了\",{\"1\":{\"4421\":1}}],[\"我只是说我照着api调的\",{\"1\":{\"4411\":1}}],[\"我只是了解他是干啥的\",{\"1\":{\"4291\":1,\"7116\":1}}],[\"我问面试官讯飞的数据集有没有开源\",{\"1\":{\"4425\":1}}],[\"我问了面试官您是做什么\",{\"1\":{\"4425\":1}}],[\"我问这个怕你听不懂所以一开始没问\",{\"1\":{\"4406\":1}}],[\"我问一下题外话\",{\"1\":{\"4404\":1}}],[\"我问我现在是调到了哪个部门\",{\"1\":{\"4393\":1}}],[\"我简历上都是java\",{\"1\":{\"4356\":1}}],[\"我看你在联想做的是ai相关的\",{\"1\":{\"4451\":1}}],[\"我看你为了防止内存泄漏\",{\"1\":{\"4354\":1}}],[\"我看到你用到了threadlocal\",{\"1\":{\"4353\":1}}],[\"我看看一下经过扰动的算法最终的计算结果会如何\",{\"1\":{\"1040\":1}}],[\"我都说了了解mysql\",{\"1\":{\"4294\":1,\"7119\":1}}],[\"我计划不断深入学习关键技术\",{\"1\":{\"4109\":1}}],[\"我叫杨路恒\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1,\"5024\":1,\"7288\":1}}],[\"我和别人同时修改同一个文件\",{\"1\":{\"3340\":1}}],[\"我发现缓存雪崩这名字起的有点意思\",{\"1\":{\"3274\":1,\"6879\":1}}],[\"我这里假定\",{\"1\":{\"2694\":1}}],[\"我总结面试常考的也就是\",{\"1\":{\"2443\":1}}],[\"我给你负责\",{\"1\":{\"2393\":1,\"7097\":1}}],[\"我给你\",{\"1\":{\"2391\":1,\"7095\":1}}],[\"我说需求少\",{\"1\":{\"4451\":1}}],[\"我说没有这方面经验\",{\"1\":{\"4435\":1,\"4436\":1}}],[\"我说忘了\",{\"1\":{\"4431\":1}}],[\"我说用jmeter测试\",{\"1\":{\"4430\":1}}],[\"我说用的最多的是写代码\",{\"1\":{\"4423\":1}}],[\"我说差不多上千行\",{\"1\":{\"4421\":1}}],[\"我说我没有构造过\",{\"1\":{\"4433\":1}}],[\"我说我科研做完了\",{\"1\":{\"4417\":1}}],[\"我说我做的深度学习的算法\",{\"1\":{\"4388\":1}}],[\"我说得到12月份\",{\"1\":{\"4394\":1}}],[\"我说了grep\",{\"1\":{\"4392\":1}}],[\"我说了做的一些优化\",{\"1\":{\"4317\":1,\"7142\":1}}],[\"我说算力够的话能够被破解\",{\"1\":{\"4351\":1}}],[\"我说是生成随机数吗\",{\"1\":{\"4314\":1,\"7139\":1}}],[\"我说是一个高并发写的操作\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"我说实现自定义处理策略\",{\"1\":{\"4313\":1,\"7138\":1}}],[\"我说实习生的日常工作安排是什么\",{\"1\":{\"4306\":1,\"7131\":1}}],[\"我说只了解它是用来作为即时通讯的协议\",{\"1\":{\"4297\":1,\"7122\":1}}],[\"我说不了解\",{\"1\":{\"4295\":1,\"4305\":1,\"7120\":1,\"7130\":1}}],[\"我说不行\",{\"1\":{\"4285\":1,\"7110\":1}}],[\"我说spring\",{\"1\":{\"4289\":1,\"7114\":1}}],[\"我说如果在一个进程可以\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"我要先告诉大家一个常见的局部性原理\",{\"1\":{\"1620\":1}}],[\"我希望我们不仅可以深入了解背后的原理\",{\"1\":{\"1079\":1}}],[\"我后面会有文章继续深入介绍\",{\"1\":{\"1065\":1}}],[\"我猜这只是程序员自由意志的选择吧\",{\"1\":{\"1063\":1}}],[\"我会尽量全部介绍到\",{\"1\":{\"1009\":1}}],[\"我参考了网上的其博主的文章写的\",{\"1\":{\"639\":1}}],[\"我再提供一个简单的原则\",{\"1\":{\"590\":1}}],[\"我一个小白当然是去百度一下这个deque为啥java官方要推荐作为stack的实现呢\",{\"1\":{\"563\":1}}],[\"我先不说反射是啥\",{\"1\":{\"504\":1,\"5391\":1}}],[\"我们说网络设备都有一个\",{\"1\":{\"7045\":1}}],[\"我们会循环从文件描述符读写数据\",{\"1\":{\"6279\":1}}],[\"我们熟悉的\",{\"1\":{\"6261\":1}}],[\"我们肯定需要先暂停服务变为\",{\"1\":{\"6198\":1}}],[\"我们整个集群如何保证数据一致性\",{\"1\":{\"6196\":1}}],[\"我们首先来了解一下在\",{\"1\":{\"6174\":1}}],[\"我们首先使用布隆过滤器过滤掉不存在的数据\",{\"1\":{\"2187\":1}}],[\"我们称之为\",{\"1\":{\"5952\":1}}],[\"我们称之为写锁\",{\"1\":{\"3836\":1}}],[\"我们无法通过常规方式从md5值倒推出它的原文\",{\"1\":{\"5032\":1}}],[\"我们手动关闭自动提交\",{\"1\":{\"4677\":1,\"7196\":1}}],[\"我们一定会依赖各种服务\",{\"1\":{\"4525\":1,\"6142\":1}}],[\"我们更上层的开发\",{\"1\":{\"4425\":1}}],[\"我们操作锁大多时候都是基于\",{\"1\":{\"3845\":1,\"5961\":1}}],[\"我们足以通过猜测得出结论\",{\"1\":{\"3766\":1,\"5997\":1}}],[\"我们调用的是threadlocalmap类对应的\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"我们创建的变量是可以被任何一个线程访问并修改的\",{\"1\":{\"3756\":1,\"5988\":1}}],[\"我们创建索引的字段应该是查询操作非常频繁的字段\",{\"1\":{\"2825\":1,\"6497\":1}}],[\"我们使用top命令时可以看到cpu\",{\"1\":{\"3535\":1}}],[\"我们使用资源有序分配法的方式来修改前面发生死锁的代码\",{\"1\":{\"2000\":1}}],[\"我们分析java线程会使用到jdk自带的jstack工具\",{\"1\":{\"3524\":1}}],[\"我们通过ps命令查看该进程对应的哪个线程占用cpu资源比较高\",{\"1\":{\"3521\":1}}],[\"我们通常把它叫做replication\",{\"1\":{\"3240\":1}}],[\"我们通常会将\",{\"1\":{\"246\":1}}],[\"我们该如何操作\",{\"0\":{\"3378\":1}}],[\"我们建议使用\",{\"1\":{\"3361\":1}}],[\"我们平时的编辑工作都是在工作区完成\",{\"1\":{\"3356\":1}}],[\"我们都有自己的特性分支\",{\"1\":{\"3340\":1}}],[\"我们都知道\",{\"1\":{\"603\":1,\"2578\":1}}],[\"我们从\",{\"1\":{\"3318\":1}}],[\"我们也是时候了解下到底什么是http\",{\"1\":{\"6972\":1,\"6997\":1}}],[\"我们也可以通过grep筛选java进程\",{\"1\":{\"3519\":1}}],[\"我们也可以将容器视为\",{\"1\":{\"3314\":1}}],[\"我们也能看出\",{\"1\":{\"611\":1}}],[\"我们还要从布隆过滤器的原理来说\",{\"1\":{\"3256\":1,\"6861\":1}}],[\"我们还是使用图片的名称作为\",{\"1\":{\"2027\":1}}],[\"我们需要的就是判断\",{\"1\":{\"3253\":1,\"6858\":1}}],[\"我们需要创建两个管道才行\",{\"1\":{\"1948\":1}}],[\"我们每个client连上redis后\",{\"1\":{\"3240\":1}}],[\"我们假设\",{\"1\":{\"3220\":1}}],[\"我们的事务2在快照读该行记录的时候\",{\"1\":{\"3052\":1}}],[\"我们的例子中\",{\"1\":{\"3052\":1}}],[\"我们的项目需要连接多个数据库\",{\"1\":{\"1213\":1,\"5565\":1}}],[\"我们讨论的\",{\"1\":{\"3009\":1,\"6681\":1}}],[\"我们常见的\",{\"1\":{\"2968\":1,\"6640\":1}}],[\"我们常说的堆外内存\",{\"1\":{\"283\":1}}],[\"我们不需要显示的使用\",{\"1\":{\"2889\":1,\"6561\":1}}],[\"我们不需要针对每个目标类都单独创建一个代理类\",{\"1\":{\"893\":1,\"5511\":1}}],[\"我们就称之为\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"我们在后端增加额外的处理逻辑比如将失效的\",{\"1\":{\"5004\":1,\"7286\":1}}],[\"我们在创建对象时不会对客户端暴露创建逻辑\",{\"1\":{\"4178\":1}}],[\"我们在获取其他时间点的堆转储文件时一定要找准时机\",{\"1\":{\"3572\":1}}],[\"我们在本地工程常会修改一些配置文件\",{\"0\":{\"3378\":1}}],[\"我们在使用联合索引时\",{\"1\":{\"2819\":1,\"6491\":1}}],[\"我们在前面提到过发送窗口\",{\"1\":{\"2670\":1}}],[\"我们在做类设计的时候\",{\"1\":{\"587\":1}}],[\"我们考虑一个场景\",{\"1\":{\"2540\":1}}],[\"我们来看看\",{\"1\":{\"2537\":1,\"6344\":1}}],[\"我们来做个简单的总结\",{\"1\":{\"1055\":1}}],[\"我们现在大多数网站使用的正是\",{\"1\":{\"2316\":1}}],[\"我们现在想向一个hashmap中put一个k\",{\"1\":{\"1037\":1}}],[\"我们并不知道\",{\"1\":{\"2209\":1}}],[\"我们再去查询缓存\",{\"1\":{\"2187\":1}}],[\"我们再来看一下\",{\"1\":{\"600\":1,\"3260\":1,\"6865\":1}}],[\"我们检查元素是否可能存在于布隆过滤器中\",{\"1\":{\"2178\":1}}],[\"我们初始化了布隆过滤器\",{\"1\":{\"2178\":1}}],[\"我们这次产生的问题也是堆内存溢出导致\",{\"1\":{\"2116\":1}}],[\"我们将元素添加到布隆过滤器中\",{\"1\":{\"2178\":1}}],[\"我们将\",{\"1\":{\"2021\":1}}],[\"我们暂时称上述算法为\",{\"1\":{\"2010\":1}}],[\"我们暂且不急于介绍异常表\",{\"1\":{\"488\":1,\"5375\":1}}],[\"我们举例说明\",{\"1\":{\"2008\":1}}],[\"我们希望每台服务器能够缓存1万张左右的图片\",{\"1\":{\"2007\":1}}],[\"我们希望这些图片被均匀的缓存到这3台服务器上\",{\"1\":{\"2007\":1}}],[\"我们为这三台缓存服务器编号为\",{\"1\":{\"2007\":1}}],[\"我们先了解一下缓存中的一个应用场景\",{\"1\":{\"2005\":1}}],[\"我们先要清楚线程\",{\"1\":{\"2001\":1}}],[\"我们先来了解一下加密算法的基础北背景\",{\"1\":{\"5090\":1}}],[\"我们先来看一下\",{\"1\":{\"3257\":1,\"6862\":1}}],[\"我们先来描述一下这个经典的分布式缓存的应用场景\",{\"1\":{\"2005\":1}}],[\"我们先来做个简单分析\",{\"1\":{\"1010\":1}}],[\"我们先来简单解释一下这些参数的含义\",{\"1\":{\"962\":1}}],[\"我们得知上面这种管道是没有名字\",{\"1\":{\"1949\":1}}],[\"我们写的\",{\"1\":{\"1816\":1,\"6343\":1}}],[\"我们是必须要实现的\",{\"1\":{\"4646\":1,\"6219\":1}}],[\"我们是要考虑\",{\"1\":{\"2960\":1,\"6632\":1}}],[\"我们是不建议在实际生产项目中使用外键的\",{\"1\":{\"2740\":1,\"6409\":1}}],[\"我们是用的\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"我们是无法预知每个页面在\",{\"1\":{\"1728\":1}}],[\"我们是否可能将栈当做一个动态数组使用\",{\"1\":{\"591\":1}}],[\"我们是否有可能把子类进行向上的父类转型\",{\"1\":{\"590\":1}}],[\"我们把这个由\",{\"1\":{\"2022\":1}}],[\"我们把这个\",{\"1\":{\"1664\":1}}],[\"我们最少只能分配一个页\",{\"1\":{\"1659\":1}}],[\"我们最开始分析\",{\"1\":{\"620\":1}}],[\"我们叫页\",{\"1\":{\"1656\":1}}],[\"我们程序所使用的内存地址叫做虚拟内存地址\",{\"1\":{\"1632\":1}}],[\"我们只需要维护threadpoolexecutor的实例\",{\"1\":{\"3916\":1,\"6064\":1}}],[\"我们只需要使用preparedstatement解决\",{\"1\":{\"3061\":1,\"6712\":1}}],[\"我们只需要关心消息是否送达了队列\",{\"1\":{\"1410\":1}}],[\"我们只要从图片的位置开始\",{\"1\":{\"2028\":1}}],[\"我们只要在这一台服务器上查找图片即可\",{\"1\":{\"2010\":1}}],[\"我们只要调用object对象的hashcode\",{\"1\":{\"1011\":1}}],[\"我们实现这两个接口可以在spring容器启动后需要的一些东西比如加载一些业务数据等\",{\"1\":{\"1390\":1}}],[\"我们去分析一级缓存这样存放成品\",{\"1\":{\"1274\":1,\"5616\":1}}],[\"我们已经分析完了hashmap\",{\"1\":{\"1079\":1}}],[\"我们看完了java\",{\"1\":{\"1055\":1}}],[\"我们前面说过\",{\"1\":{\"1049\":1}}],[\"我们接下来准备分析hash方法的具体原理和实现\",{\"1\":{\"1030\":1}}],[\"我们拿jdk\",{\"1\":{\"1007\":1}}],[\"我们根据元素的自身特征把元素分配到不同的链表中去\",{\"1\":{\"1005\":1}}],[\"我们定义了一个新的hashmap\",{\"1\":{\"976\":1}}],[\"我们知道消息在被追加到\",{\"1\":{\"4674\":1,\"7193\":1}}],[\"我们知道springboot启动的时候是有一个\",{\"0\":{\"4230\":1}}],[\"我们知道在\",{\"1\":{\"2813\":1,\"6485\":1}}],[\"我们知道\",{\"1\":{\"974\":1,\"979\":1,\"1010\":1,\"1044\":1,\"1353\":1,\"5678\":1,\"6983\":1,\"7006\":1}}],[\"我们知道vector和arraylist都是list的子类\",{\"1\":{\"807\":1}}],[\"我们对目标对象的每个方法的增强都是手动完成的\",{\"1\":{\"890\":1,\"5508\":1}}],[\"我们发现\",{\"1\":{\"829\":1}}],[\"我们想实现一个队列\",{\"1\":{\"603\":1}}],[\"我们可以创建多种类型的\",{\"1\":{\"3900\":1,\"6047\":1}}],[\"我们可以多配置一些线程\",{\"1\":{\"3898\":1,\"6045\":1}}],[\"我们可以结合内置线程池来分析\",{\"1\":{\"3877\":1,\"6032\":1}}],[\"我们可以在构造函数中传入\",{\"1\":{\"3845\":1,\"5962\":1}}],[\"我们可以在程序运行时动态创建对象\",{\"1\":{\"511\":1,\"5399\":1}}],[\"我们可以设置一个\",{\"1\":{\"3826\":1,\"5943\":1}}],[\"我们可以把\",{\"1\":{\"3763\":1,\"5994\":1}}],[\"我们可以把它换出到物理内存之外\",{\"1\":{\"1636\":1}}],[\"我们可以根据这些很容易定位到发生死锁的代码位置\",{\"1\":{\"3630\":1}}],[\"我们可以使用以下命令\",{\"1\":{\"3318\":1}}],[\"我们可以docker\",{\"1\":{\"3316\":1}}],[\"我们可以快速找到对应的线程名称\",{\"1\":{\"3560\":1}}],[\"我们可以快速找到\",{\"1\":{\"2756\":1,\"6425\":1}}],[\"我们可以不改动线程\",{\"1\":{\"2000\":1}}],[\"我们可以看出\",{\"1\":{\"1951\":1}}],[\"我们可以看到输出的sql文是把整个参数用引号包起来\",{\"1\":{\"3062\":1,\"6713\":1}}],[\"我们可以看到\",{\"1\":{\"1626\":1}}],[\"我们可以进一步减少通过\",{\"1\":{\"1801\":1,\"6307\":1}}],[\"我们可以得知\",{\"1\":{\"1793\":1,\"6298\":1}}],[\"我们可以集成很多三方中间件来做缓存\",{\"1\":{\"1143\":1,\"5722\":1}}],[\"我们可以发现\",{\"1\":{\"1048\":1,\"1079\":1}}],[\"我们可以从上图看到\",{\"1\":{\"1005\":1}}],[\"我们可以将其理解为链表的数组\",{\"1\":{\"1004\":1}}],[\"我们可以用\",{\"1\":{\"907\":1,\"1786\":1,\"5525\":1,\"6290\":1}}],[\"我们可以直接代理实现类\",{\"1\":{\"893\":1,\"5511\":1}}],[\"我们可以对\",{\"1\":{\"428\":1,\"5319\":1}}],[\"我们可以通过\",{\"1\":{\"242\":1}}],[\"我们支持\",{\"1\":{\"160\":1,\"168\":1,\"5268\":1,\"5276\":1}}],[\"我在右对齐\",{\"1\":{\"64\":1,\"5177\":1}}],[\"我是居中的\",{\"1\":{\"63\":1,\"5176\":1}}],[\"上限就为系统定义的进程打开的最大文件描述符个数\",{\"1\":{\"6269\":1}}],[\"上位的时候\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"上来跟她打招呼她听口音以为我是南方人呢\",{\"1\":{\"4442\":1}}],[\"上来板着脸问我几个场景题\",{\"1\":{\"4427\":1}}],[\"上来看是基于\",{\"1\":{\"381\":1}}],[\"上完厕所完事后把门打开\",{\"1\":{\"3664\":1,\"5827\":1}}],[\"上使用\",{\"1\":{\"3574\":1}}],[\"上有多个桌面环境可供选择\",{\"1\":{\"3453\":1}}],[\"上有可读事件发生时\",{\"1\":{\"1779\":1,\"6275\":1}}],[\"上传素材功能\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"上传文件\",{\"1\":{\"2101\":1}}],[\"上传文件时该如何构造请求报文\",{\"0\":{\"2082\":1}}],[\"上传的文件路径\",{\"1\":{\"2096\":1}}],[\"上述中的\",{\"1\":{\"2547\":1}}],[\"上述公式的计算结果一定是\",{\"1\":{\"2025\":1}}],[\"上述hash算法时\",{\"1\":{\"2012\":1}}],[\"上述from和to之前发生异常后的异常处理者的位置\",{\"1\":{\"496\":1,\"5383\":1}}],[\"上下文\",{\"1\":{\"1878\":1}}],[\"上下文切换\",{\"1\":{\"1878\":1,\"6288\":1}}],[\"上下角标\",{\"0\":{\"59\":1,\"5172\":1}}],[\"上层页目录项\",{\"1\":{\"1667\":1}}],[\"上\",{\"1\":{\"1442\":1,\"1445\":1,\"2149\":1,\"3766\":1,\"4576\":1,\"5997\":1,\"6361\":1}}],[\"上的副本\",{\"1\":{\"3145\":1,\"6801\":1}}],[\"上的更改\",{\"1\":{\"1336\":1,\"5660\":1}}],[\"上的时间不得超过\",{\"1\":{\"382\":1}}],[\"上图有一个错误\",{\"1\":{\"2715\":1,\"7010\":1}}],[\"上图用于辅助理解\",{\"1\":{\"1195\":1,\"5547\":1}}],[\"上图只是给了几个例子\",{\"1\":{\"1173\":1}}],[\"上面我讲过了\",{\"1\":{\"6198\":1}}],[\"上面我们不是说只有\",{\"1\":{\"6180\":1}}],[\"上面我们提到过\",{\"1\":{\"1004\":1}}],[\"上面我们是从实现和应用角度来说的静态代理\",{\"1\":{\"891\":1,\"5509\":1}}],[\"上面第一项的随机数是整个握手阶段的第三个随机数\",{\"1\":{\"2336\":1}}],[\"上面命令行里的\",{\"1\":{\"1948\":1}}],[\"上面红色的箭头代表的是有变动的分区分配\",{\"1\":{\"1492\":1,\"6945\":1}}],[\"上面这两条语句必须在一个事务中\",{\"1\":{\"2940\":1,\"6612\":1}}],[\"上面这段关于concurrenthashmap的hash实现其实和hashmap如出一辙\",{\"1\":{\"1063\":1}}],[\"上面这些例子\",{\"1\":{\"587\":1}}],[\"上面是java\",{\"1\":{\"1046\":1}}],[\"上面是一张hashmap中主要的成员变量的图\",{\"1\":{\"961\":1}}],[\"上面的字节码中包含一个\",{\"1\":{\"3738\":1,\"5970\":1}}],[\"上面的三个步骤和单\",{\"1\":{\"1838\":1,\"6370\":1}}],[\"上面的解释不知道你有没有看懂\",{\"1\":{\"1025\":1}}],[\"上面的方法主要都是增加和删除方法\",{\"1\":{\"1008\":1}}],[\"上源码\",{\"1\":{\"785\":1}}],[\"上一篇\",{\"1\":{\"19\":1,\"5132\":1}}],[\"危险容器\",{\"1\":{\"53\":1,\"5166\":1}}],[\"警告容器\",{\"1\":{\"51\":1,\"5164\":1}}],[\"提升数据上传\",{\"1\":{\"4708\":1}}],[\"提升系统性能指标\",{\"1\":{\"4663\":1,\"7182\":1}}],[\"提升了用户体验\",{\"1\":{\"4063\":1}}],[\"提到的来说一下使用线程池的好处\",{\"1\":{\"3849\":1,\"6003\":1}}],[\"提到jvm处理异常的机制\",{\"1\":{\"488\":1,\"5375\":1}}],[\"提出了长连接的通信方式\",{\"1\":{\"2293\":1}}],[\"提出了有名管道\",{\"1\":{\"1970\":1,\"6251\":1}}],[\"提交事务\",{\"1\":{\"4594\":1}}],[\"提交事务消息\",{\"1\":{\"2050\":1,\"5755\":1}}],[\"提交更新\",{\"1\":{\"3816\":1,\"5934\":1}}],[\"提交失败\",{\"1\":{\"3672\":1,\"5838\":1}}],[\"提交时发生冲突\",{\"0\":{\"3339\":1}}],[\"提交文件的命令\",{\"1\":{\"3338\":1}}],[\"提交偏移量\",{\"1\":{\"1608\":1}}],[\"提交偏移量的方式有两种\",{\"1\":{\"1600\":1}}],[\"提交当前偏移量\",{\"1\":{\"1604\":1,\"1607\":1}}],[\"提交方式就是让消费者自动提交偏移量\",{\"1\":{\"1602\":1}}],[\"提交后会清空缓存区域\",{\"1\":{\"1134\":1,\"1147\":1,\"5713\":1,\"5727\":1}}],[\"提前批一面11min\",{\"0\":{\"4347\":1}}],[\"提前加载到缓存\",{\"1\":{\"2078\":1,\"5783\":1}}],[\"提前创建\",{\"1\":{\"1287\":1,\"5629\":1}}],[\"提前实例化\",{\"1\":{\"1266\":1}}],[\"提取出该分组中的\",{\"1\":{\"7042\":1}}],[\"提取查询分组中的\",{\"1\":{\"7040\":1}}],[\"提取文章的封面图片\",{\"1\":{\"4857\":2}}],[\"提取\",{\"1\":{\"1199\":1,\"5551\":1}}],[\"提供与\",{\"1\":{\"7071\":1}}],[\"提供远程的feign接口\",{\"1\":{\"4878\":1,\"7256\":1}}],[\"提供一种统一的接口来创建不同类型的对象\",{\"1\":{\"4178\":1}}],[\"提供一种机制可以让\",{\"1\":{\"2661\":1}}],[\"提供路由信息\",{\"1\":{\"4123\":1}}],[\"提供者收到请求后执行服务并返回结果给消费者\",{\"1\":{\"3985\":1}}],[\"提供的各种方法\",{\"1\":{\"4744\":1}}],[\"提供的用于查看或生成堆内存信息的工具\",{\"1\":{\"3565\":1}}],[\"提供的\",{\"1\":{\"3290\":1,\"4560\":1,\"4955\":1,\"6079\":1,\"6160\":1}}],[\"提供的插件接口\",{\"1\":{\"1125\":1,\"5707\":1}}],[\"提供\",{\"1\":{\"3180\":1,\"3608\":1,\"4563\":1,\"6163\":1,\"6838\":1}}],[\"提供事务支持\",{\"1\":{\"2737\":1,\"6406\":1}}],[\"提供高可用的手段之一\",{\"1\":{\"1526\":1}}],[\"提供应用程序的信息\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"提供了服务的发现\",{\"1\":{\"4466\":1,\"6099\":1}}],[\"提供了两种锁机制来控制多个线程对共享资源的互斥访问\",{\"1\":{\"3778\":1,\"5789\":1}}],[\"提供了两个命令来生成\",{\"1\":{\"3149\":1,\"6805\":1}}],[\"提供了丰富的网络工具和命令\",{\"1\":{\"3458\":1}}],[\"提供了广泛的系统库\",{\"1\":{\"3449\":1}}],[\"提供了一组面向系统的命令\",{\"1\":{\"3432\":1}}],[\"提供了一个专门发送文件的系统调用函数\",{\"1\":{\"1796\":1,\"6301\":1}}],[\"提供了许多实用的工具类和方法\",{\"1\":{\"2175\":1}}],[\"提供了副本机制\",{\"1\":{\"1443\":1}}],[\"提供了除了构造函数注入和原型注入外的\",{\"1\":{\"1254\":1,\"5606\":1}}],[\"提供了fast\",{\"1\":{\"788\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"42\":1,\"5155\":1}}],[\"提高读取性能\",{\"1\":{\"4602\":1}}],[\"提高系统的可维护性\",{\"1\":{\"4497\":1,\"6126\":1}}],[\"提高开发效率\",{\"1\":{\"4478\":1,\"6111\":1}}],[\"提高我的团队协作和领导技能\",{\"1\":{\"4109\":1}}],[\"提高数据库查询性能\",{\"0\":{\"3994\":1}}],[\"提高反射的效率\",{\"1\":{\"3945\":1}}],[\"提高反射的性能\",{\"0\":{\"3943\":1}}],[\"提高线程的可管理性\",{\"1\":{\"3852\":1,\"6006\":1}}],[\"提高响应速度\",{\"1\":{\"3851\":1,\"6005\":1}}],[\"提高多表连接查询的效率\",{\"1\":{\"2828\":1,\"6500\":1}}],[\"提高性能\",{\"1\":{\"2747\":1,\"6416\":1}}],[\"提高了什么性能\",{\"0\":{\"2347\":1}}],[\"提高并发能力\",{\"1\":{\"1442\":1}}],[\"提高到o\",{\"1\":{\"1065\":1}}],[\"提高访问效率\",{\"1\":{\"275\":1}}],[\"提高内存分配的局部性\",{\"1\":{\"275\":1}}],[\"提示\",{\"1\":{\"124\":1,\"5237\":1}}],[\"提示容器\",{\"1\":{\"49\":1,\"5162\":1}}],[\"=true\",{\"1\":{\"4857\":1}}],[\"=null\",{\"1\":{\"1613\":1}}],[\"=>\",{\"1\":{\"1364\":1,\"1365\":1,\"1366\":1,\"5689\":1,\"5690\":1,\"5691\":1}}],[\"==和equals区别\",{\"0\":{\"4189\":1}}],[\"==解压缩\",{\"1\":{\"3419\":1}}],[\"==查看\",{\"1\":{\"3419\":1}}],[\"==打包压缩\",{\"1\":{\"3419\":1}}],[\"==\",{\"1\":{\"444\":2,\"475\":1,\"816\":1,\"858\":2,\"1021\":1,\"1068\":1,\"1466\":2,\"1474\":1,\"2188\":1,\"3775\":1,\"3857\":4,\"4190\":1,\"4857\":4,\"4979\":2,\"5337\":2,\"5370\":1,\"5488\":2,\"6011\":4,\"6914\":2,\"6923\":1}}],[\"=\",{\"1\":{\"47\":1,\"94\":1,\"250\":2,\"444\":7,\"478\":2,\"480\":9,\"486\":2,\"503\":1,\"505\":1,\"507\":3,\"513\":2,\"521\":2,\"527\":2,\"530\":3,\"570\":1,\"577\":1,\"601\":1,\"604\":2,\"634\":9,\"650\":1,\"787\":2,\"790\":2,\"792\":1,\"801\":1,\"802\":1,\"808\":3,\"812\":1,\"816\":2,\"824\":3,\"826\":3,\"858\":1,\"927\":1,\"967\":1,\"971\":1,\"975\":4,\"980\":9,\"989\":1,\"993\":10,\"1016\":2,\"1020\":1,\"1022\":2,\"1027\":2,\"1028\":2,\"1048\":1,\"1062\":3,\"1068\":1,\"1069\":1,\"1072\":2,\"1131\":1,\"1140\":4,\"1256\":2,\"1380\":4,\"1417\":1,\"1466\":10,\"1474\":12,\"1515\":1,\"1518\":4,\"1521\":1,\"1544\":1,\"1547\":1,\"1610\":1,\"1613\":1,\"1617\":1,\"1625\":3,\"1787\":1,\"2096\":6,\"2111\":9,\"2177\":1,\"2182\":3,\"2185\":1,\"2188\":2,\"2540\":2,\"2670\":1,\"2698\":1,\"2699\":1,\"2703\":1,\"2928\":1,\"2929\":1,\"2930\":1,\"2933\":1,\"2935\":2,\"2940\":1,\"2953\":1,\"3051\":1,\"3374\":1,\"3411\":2,\"3558\":2,\"3597\":1,\"3762\":2,\"3765\":9,\"3772\":4,\"3773\":1,\"3775\":7,\"3789\":1,\"3855\":1,\"3857\":7,\"3965\":1,\"3967\":1,\"3975\":2,\"3977\":1,\"3979\":1,\"4548\":2,\"4750\":3,\"4824\":2,\"4857\":44,\"4859\":1,\"4860\":2,\"4895\":5,\"4910\":6,\"4923\":2,\"4938\":2,\"4972\":2,\"4979\":4,\"4981\":2,\"4984\":1,\"4986\":3,\"4999\":19,\"5160\":1,\"5207\":1,\"5337\":7,\"5373\":2,\"5390\":1,\"5393\":1,\"5395\":3,\"5401\":2,\"5409\":2,\"5415\":2,\"5418\":3,\"5444\":1,\"5488\":1,\"5608\":2,\"5650\":1,\"5800\":1,\"5993\":2,\"5996\":3,\"6009\":1,\"6011\":7,\"6291\":1,\"6600\":1,\"6601\":1,\"6602\":1,\"6605\":1,\"6607\":2,\"6612\":1,\"6625\":1,\"6914\":10,\"6923\":12}}],[\"aes\",{\"1\":{\"5092\":1}}],[\"aes等\",{\"1\":{\"4009\":1}}],[\"aware接口集体包括beannameaware\",{\"1\":{\"4132\":1}}],[\"afterreturning注解定义了前置通知和后置通知\",{\"1\":{\"4032\":1}}],[\"afterreturning\",{\"1\":{\"4031\":1}}],[\"afterpropertiesset\",{\"1\":{\"1183\":1}}],[\"a=2\",{\"1\":{\"3673\":1,\"5840\":1}}],[\"aqs解决了了之类实现同步器的大量细节问题\",{\"1\":{\"5874\":1}}],[\"aqs解决了实现同步器的大量细节问题\",{\"1\":{\"3633\":1}}],[\"aqs队列内部维护的是一个双向链表\",{\"1\":{\"3641\":1,\"5882\":1}}],[\"aqs是依赖内部的同步队列实现\",{\"1\":{\"3640\":1,\"5881\":1}}],[\"aqs是一个抽象类\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"aqs内部实现\",{\"0\":{\"3639\":1,\"5880\":1}}],[\"aqs功能分为两种\",{\"1\":{\"3635\":1,\"5876\":1}}],[\"aqs的两种功能\",{\"0\":{\"3634\":1,\"5875\":1}}],[\"aqs在顶层已经定义好了\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"aqs\",{\"0\":{\"3631\":1,\"3651\":1,\"5871\":1,\"5894\":1},\"1\":{\"3633\":1,\"3642\":2,\"3643\":1,\"3652\":1,\"3787\":1,\"5798\":1,\"5874\":1,\"5883\":2,\"5884\":1,\"5895\":1}}],[\"a150代表着列出最多150行堆栈信息\",{\"1\":{\"3528\":1}}],[\"a150\",{\"1\":{\"3527\":1}}],[\"aadffhilnrrst\",{\"1\":{\"3395\":1}}],[\"aof\",{\"0\":{\"3152\":1,\"6808\":1,\"6814\":1},\"1\":{\"3142\":1,\"3143\":1,\"3153\":2,\"3155\":4,\"3157\":2,\"3159\":1,\"3160\":1,\"3161\":2,\"3162\":1,\"3163\":2,\"3164\":1,\"6798\":1,\"6799\":1,\"6809\":2,\"6811\":4,\"6813\":2,\"6815\":1,\"6816\":1,\"6817\":2,\"6818\":1,\"6819\":2,\"6820\":1,\"6825\":1,\"6826\":1}}],[\"aop扫描该切面类\",{\"1\":{\"4033\":1}}],[\"aop与拦截器实现类似\",{\"1\":{\"4037\":1}}],[\"aop与\",{\"1\":{\"4025\":1}}],[\"aop和oop的区别\",{\"1\":{\"4024\":1}}],[\"aop和ioc概念\",{\"0\":{\"1155\":1,\"5536\":1}}],[\"aop使用了动态代理\",{\"1\":{\"4021\":1}}],[\"aop的典型应用\",{\"1\":{\"4026\":1}}],[\"aop的区别\",{\"1\":{\"4025\":1}}],[\"aop的主要作用\",{\"1\":{\"4023\":1}}],[\"aop的重要组件\",{\"1\":{\"4022\":1}}],[\"aop的实现原理\",{\"1\":{\"4021\":1}}],[\"aop的概念\",{\"1\":{\"4020\":1}}],[\"aop\",{\"0\":{\"4019\":1},\"1\":{\"895\":1,\"908\":1,\"1156\":2,\"1157\":3,\"1182\":1,\"1210\":1,\"1215\":1,\"1282\":2,\"1284\":2,\"1287\":1,\"5513\":1,\"5526\":1,\"5537\":2,\"5538\":3,\"5562\":1,\"5567\":1,\"5624\":2,\"5626\":2,\"5629\":1}}],[\"a745233700\",{\"1\":{\"2036\":1}}],[\"authorization\",{\"1\":{\"4816\":2,\"7213\":2}}],[\"authorizedfilter\",{\"1\":{\"4809\":1,\"7206\":1}}],[\"author\",{\"1\":{\"3855\":1,\"4857\":1,\"4860\":1,\"4933\":1,\"4935\":1,\"4938\":1,\"4981\":1,\"4986\":1,\"4992\":1,\"4997\":1,\"4999\":1,\"6009\":1}}],[\"autoscanwmnews\",{\"1\":{\"4857\":1}}],[\"automatic\",{\"1\":{\"3196\":1}}],[\"automaticallycloseresource\",{\"1\":{\"478\":1,\"5373\":1}}],[\"autoinc\",{\"1\":{\"2927\":1,\"2928\":1,\"2929\":1,\"2930\":1,\"2933\":1,\"2935\":1,\"6599\":1,\"6600\":1,\"6601\":1,\"6602\":1,\"6605\":1,\"6607\":1}}],[\"autowired\",{\"1\":{\"1380\":1,\"2188\":2,\"4857\":12,\"4931\":2,\"4935\":2,\"4981\":2,\"4986\":2,\"4994\":2,\"4997\":2,\"4999\":4}}],[\"auto\",{\"0\":{\"6590\":1},\"1\":{\"1310\":1,\"1602\":1,\"1603\":1,\"1608\":1,\"2876\":1,\"2919\":1,\"2920\":1,\"2921\":1,\"2922\":3,\"2923\":2,\"2924\":1,\"2926\":1,\"2927\":1,\"2928\":1,\"5640\":1,\"6548\":1,\"6591\":1,\"6592\":1,\"6593\":1,\"6594\":3,\"6595\":2,\"6596\":1,\"6598\":1,\"6599\":1,\"6600\":1}}],[\"autocommit\",{\"1\":{\"2940\":1,\"6612\":1}}],[\"autoconfigurationimportselector\",{\"1\":{\"1310\":1,\"5640\":1}}],[\"autoconfigure在我们的开发中并不会被感知\",{\"1\":{\"1362\":1,\"5687\":1}}],[\"autoconfigure\",{\"1\":{\"1294\":1,\"1361\":1,\"4860\":1,\"4938\":1,\"5636\":1,\"5686\":1}}],[\"autocloseable\",{\"1\":{\"477\":1,\"5372\":1}}],[\"aux\",{\"1\":{\"3426\":2}}],[\"auxf\",{\"1\":{\"1947\":1,\"1948\":1}}],[\"aufs\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"atomic\",{\"1\":{\"4582\":1,\"4593\":1,\"4629\":1,\"6166\":1,\"6172\":1}}],[\"atomicity\",{\"1\":{\"2971\":1,\"6643\":1}}],[\"atomicinteger\",{\"1\":{\"1466\":3,\"6914\":3}}],[\"at\",{\"1\":{\"3527\":12}}],[\"atime\",{\"1\":{\"3403\":1,\"3482\":1}}],[\"attrs\",{\"0\":{\"66\":1,\"5179\":1}}],[\"availability\",{\"1\":{\"4637\":1,\"4640\":1,\"6209\":1,\"6213\":1}}],[\"available\",{\"1\":{\"1466\":2,\"6914\":2}}],[\"availablepartitionsfortopic\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"availablepartitions\",{\"1\":{\"1466\":4,\"6914\":4}}],[\"avalanche\",{\"1\":{\"4145\":1}}],[\"avl树调平衡有时候代价较大\",{\"1\":{\"925\":1,\"5442\":1}}],[\"avl树的时间复杂度虽然优于红黑树\",{\"1\":{\"707\":1,\"5475\":1}}],[\"absent\",{\"1\":{\"4910\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"3633\":1,\"3652\":1,\"3787\":1,\"3845\":1,\"5798\":1,\"5874\":1,\"5895\":1,\"5961\":1}}],[\"abstractpartitionassignor\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"abstarctfactory\",{\"1\":{\"869\":1,\"5499\":1}}],[\"abortpolicy\",{\"1\":{\"3855\":1,\"3870\":1,\"3874\":1,\"6009\":1,\"6025\":1,\"6029\":1}}],[\"aba\",{\"0\":{\"3684\":1,\"5853\":1},\"1\":{\"3685\":1,\"3701\":1,\"5854\":1,\"5870\":1}}],[\"abentv\",{\"1\":{\"3415\":1}}],[\"abc\",{\"1\":{\"2025\":1,\"2846\":1,\"6518\":1}}],[\"abtest\",{\"1\":{\"1256\":1,\"5608\":1}}],[\"acquirequeued\",{\"1\":{\"3649\":1,\"5892\":1}}],[\"acquire方法流程总结\",{\"0\":{\"3646\":1,\"5889\":1}}],[\"acinv\",{\"1\":{\"3424\":1}}],[\"acid事务\",{\"0\":{\"6639\":1}}],[\"acid\",{\"1\":{\"1235\":1,\"5587\":1}}],[\"acdmt\",{\"1\":{\"3403\":1}}],[\"acc\",{\"1\":{\"3747\":2,\"3751\":1,\"3857\":1,\"5979\":2,\"5983\":1,\"6011\":1}}],[\"accpet\",{\"1\":{\"2586\":1,\"2643\":2}}],[\"accept\",{\"0\":{\"2641\":1},\"1\":{\"1821\":1,\"1824\":1,\"1836\":1,\"1843\":1,\"2437\":1,\"2439\":1,\"2581\":1,\"2585\":1,\"2586\":1,\"2640\":1,\"6350\":1,\"6353\":1,\"6368\":1,\"6385\":1}}],[\"acceptor\",{\"1\":{\"1817\":1,\"1819\":1,\"1823\":1,\"1824\":2,\"1835\":1,\"1836\":2,\"1843\":1,\"6346\":1,\"6348\":1,\"6352\":1,\"6353\":2,\"6367\":1,\"6368\":2,\"6385\":1}}],[\"accesslog\",{\"1\":{\"5017\":2}}],[\"accesscontroller\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"access\",{\"1\":{\"1103\":1,\"1801\":1,\"6307\":1}}],[\"acks=all\",{\"1\":{\"1559\":1}}],[\"acks=all和enable\",{\"1\":{\"1499\":1,\"4678\":1}}],[\"acks=1\",{\"1\":{\"1557\":1}}],[\"acks=0\",{\"1\":{\"1555\":1}}],[\"acks\",{\"1\":{\"1551\":1,\"4606\":1}}],[\"ack配置\",{\"1\":{\"1551\":1}}],[\"ack\",{\"1\":{\"1549\":1,\"2447\":1,\"2528\":1,\"2529\":1,\"2543\":1,\"2552\":1,\"2553\":1,\"2555\":2,\"2574\":1,\"2576\":1,\"2578\":2,\"2584\":2,\"2585\":1,\"2595\":1,\"2596\":1,\"2597\":1,\"2598\":1,\"2599\":1,\"2601\":1,\"2604\":1,\"2614\":2,\"2615\":1,\"2620\":1,\"2649\":1,\"2650\":1,\"2680\":1,\"2686\":1,\"2696\":1,\"2705\":1,\"2706\":3,\"4605\":1,\"4608\":1,\"4609\":1}}],[\"action\",{\"1\":{\"4986\":1}}],[\"actively\",{\"1\":{\"3929\":1}}],[\"active\",{\"1\":{\"1701\":1,\"1702\":1,\"1704\":2,\"1706\":1}}],[\"activemq\",{\"1\":{\"1430\":2,\"1435\":2,\"4763\":2,\"4766\":1}}],[\"actuator`\",{\"1\":{\"5670\":1}}],[\"actuator是spring\",{\"1\":{\"1367\":1,\"5693\":1}}],[\"actuator组件中已经内置了非常多的endpoint\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"actuator的核心是端点\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"actuator轻松实现应用程序的监控治理\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"actuator\",{\"1\":{\"1345\":3,\"1346\":1,\"5669\":1,\"5670\":1,\"5671\":1}}],[\"adfilprsu\",{\"1\":{\"3406\":1}}],[\"advice等\",{\"1\":{\"4022\":1}}],[\"advice\",{\"1\":{\"1215\":1,\"5567\":1}}],[\"addtask\",{\"1\":{\"4933\":1,\"4935\":2}}],[\"addtime\",{\"1\":{\"444\":1,\"5337\":1}}],[\"adduser\",{\"1\":{\"4029\":2,\"4031\":2}}],[\"addworker\",{\"1\":{\"3888\":1}}],[\"addwaiter\",{\"1\":{\"3648\":1,\"5891\":1}}],[\"add到暂存区中\",{\"1\":{\"3369\":1}}],[\"add把文件添加进去\",{\"1\":{\"3365\":1}}],[\"add和git\",{\"0\":{\"3354\":1,\"3364\":1}}],[\"addr\",{\"1\":{\"3206\":1}}],[\"addresourcehandlers\",{\"1\":{\"1398\":1}}],[\"address\",{\"1\":{\"214\":1,\"1632\":1,\"1633\":1,\"7026\":1}}],[\"addall\",{\"1\":{\"1474\":1,\"4857\":1,\"6923\":1}}],[\"addpathpatterns\",{\"1\":{\"1401\":2}}],[\"addcorsmappings\",{\"1\":{\"1398\":1}}],[\"addviewcontrollers\",{\"1\":{\"1398\":1}}],[\"addinterceptor\",{\"1\":{\"1400\":1}}],[\"addinterceptors\",{\"0\":{\"1399\":1},\"1\":{\"1398\":1}}],[\"addinnerinterceptor\",{\"1\":{\"1131\":1,\"4860\":1,\"4938\":1}}],[\"add\",{\"0\":{\"3362\":2},\"1\":{\"577\":1,\"812\":1,\"814\":2,\"816\":1,\"2177\":1,\"2185\":1,\"2188\":1,\"3338\":2,\"3359\":1,\"3361\":3,\"3363\":2,\"3383\":1,\"4857\":2,\"4933\":1,\"4935\":1,\"4999\":1}}],[\"addsuppressed\",{\"1\":{\"480\":2}}],[\"addelapsedtimefrom\",{\"1\":{\"444\":1,\"5337\":1}}],[\"aslist\",{\"1\":{\"4857\":1}}],[\"aside\",{\"1\":{\"4099\":1}}],[\"assignment\",{\"1\":{\"1474\":4,\"6923\":4}}],[\"assign\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"assembly\",{\"1\":{\"1310\":1,\"5640\":1}}],[\"async应用自定义线程池\",{\"0\":{\"1378\":1}}],[\"async应用默认线程池\",{\"0\":{\"1376\":1}}],[\"async的默认线程池为simpleasynctaskexecutor\",{\"1\":{\"1377\":1}}],[\"async注解在使用时\",{\"1\":{\"1377\":1}}],[\"async注解\",{\"1\":{\"1371\":1,\"4318\":1,\"4846\":1,\"7143\":1,\"7235\":1}}],[\"async\",{\"0\":{\"1370\":1},\"1\":{\"1380\":1,\"1520\":1,\"4857\":2}}],[\"aspectj\",{\"1\":{\"4025\":1}}],[\"aspect\",{\"1\":{\"1156\":1,\"4022\":1,\"4031\":1,\"4180\":1,\"4182\":1,\"5537\":1}}],[\"astore\",{\"1\":{\"491\":1,\"5378\":1}}],[\"anp\",{\"1\":{\"3426\":1}}],[\"annotation\",{\"1\":{\"2177\":2,\"2185\":2,\"4857\":3,\"4860\":5,\"4929\":1,\"4931\":3,\"4933\":4,\"4935\":2,\"4938\":5,\"4981\":2,\"4986\":2,\"4994\":3,\"4997\":2,\"4999\":2}}],[\"analyzer\",{\"1\":{\"2129\":1,\"3574\":1}}],[\"any\",{\"1\":{\"787\":1}}],[\"and\",{\"1\":{\"787\":1,\"1062\":1,\"1103\":1,\"1514\":1,\"1515\":1,\"3643\":1,\"3667\":1,\"3699\":1,\"3857\":1,\"5830\":1,\"5868\":1,\"5884\":1,\"6011\":1}}],[\"an\",{\"1\":{\"787\":1}}],[\"amortized\",{\"1\":{\"629\":1}}],[\"aliyun\",{\"1\":{\"4857\":4}}],[\"aliyunoss\",{\"1\":{\"4842\":1,\"7200\":1,\"7231\":1}}],[\"aliases\",{\"1\":{\"4826\":1,\"4974\":1}}],[\"alibaba\",{\"1\":{\"4660\":1,\"4857\":1,\"4981\":1,\"4986\":1,\"4999\":1,\"7179\":1}}],[\"alive\",{\"1\":{\"2216\":1}}],[\"al\",{\"1\":{\"3422\":1}}],[\"alter\",{\"1\":{\"2857\":1,\"6529\":1}}],[\"alternative\",{\"1\":{\"1047\":1}}],[\"algorithm\",{\"1\":{\"1054\":1,\"5028\":1}}],[\"allow\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"allowcorethreadtimeout\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"allocation\",{\"1\":{\"271\":1}}],[\"allkeys\",{\"1\":{\"3184\":1,\"3185\":1,\"3189\":1,\"6842\":1,\"6843\":1,\"6847\":1}}],[\"all\",{\"1\":{\"787\":2,\"1551\":1,\"3581\":1}}],[\"aload\",{\"1\":{\"491\":1,\"5378\":1}}],[\"aparticlemapper\",{\"1\":{\"4999\":4}}],[\"aparticle\",{\"1\":{\"4984\":3,\"4999\":16}}],[\"aparticleconfigservice\",{\"1\":{\"4981\":4}}],[\"apache\",{\"1\":{\"4857\":1,\"4981\":1,\"4986\":1}}],[\"ap\",{\"1\":{\"4648\":3,\"4650\":1,\"4821\":2,\"4853\":1,\"4854\":1,\"4855\":1,\"4969\":2,\"6221\":3,\"6223\":1,\"7242\":1,\"7243\":1,\"7244\":1}}],[\"apphttpcodeenum\",{\"1\":{\"4919\":1,\"4979\":4,\"5650\":8,\"5651\":1}}],[\"appjwtutil\",{\"1\":{\"4809\":1,\"7206\":1}}],[\"appconfig\",{\"1\":{\"4034\":1}}],[\"appclassloader\",{\"1\":{\"427\":1,\"5318\":1}}],[\"approximate\",{\"1\":{\"3925\":1,\"3926\":1,\"3929\":1}}],[\"appendonly\",{\"1\":{\"3153\":1,\"3154\":1,\"3157\":1,\"6809\":1,\"6810\":1,\"6813\":1}}],[\"append\",{\"1\":{\"3142\":1,\"3153\":1,\"3160\":1,\"4857\":1,\"6798\":1,\"6809\":1,\"6816\":1}}],[\"app\",{\"1\":{\"2269\":1,\"4986\":1}}],[\"apple\",{\"1\":{\"2182\":2}}],[\"applicationrunner\",{\"1\":{\"1390\":1}}],[\"application配置文件这个容易理解\",{\"1\":{\"1333\":1,\"5654\":1}}],[\"application\",{\"1\":{\"1291\":2,\"1301\":1,\"2087\":1,\"5632\":2}}],[\"applicationcontext\",{\"1\":{\"1181\":1,\"1209\":1,\"1385\":1,\"5561\":1}}],[\"applicationcontextaware\",{\"1\":{\"1181\":1}}],[\"api编写降级逻辑\",{\"1\":{\"4918\":1}}],[\"apis工程\",{\"1\":{\"4858\":1}}],[\"apis\",{\"1\":{\"4857\":1,\"4859\":1,\"4860\":1,\"4921\":1,\"4929\":1,\"4931\":1,\"4933\":1,\"4935\":1,\"4938\":1,\"4994\":1,\"4999\":1}}],[\"api服务网关\",{\"1\":{\"4506\":1,\"6130\":1}}],[\"api要提供这两种线程安全的list的实现方式呢\",{\"1\":{\"806\":1}}],[\"api\",{\"1\":{\"433\":1,\"451\":1,\"3101\":1,\"3103\":1,\"4548\":1,\"4556\":1,\"4923\":1,\"4929\":1,\"4931\":1,\"4933\":3,\"4935\":3,\"4994\":1,\"5324\":1,\"5344\":1,\"6757\":1,\"6759\":1}}],[\"argument\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"args\",{\"1\":{\"250\":1,\"480\":1,\"903\":2,\"911\":2,\"1256\":1,\"2182\":1,\"3772\":1,\"3855\":1,\"3967\":1,\"3975\":2,\"3979\":1,\"4860\":2,\"4938\":2,\"5521\":2,\"5529\":2,\"5608\":1,\"6009\":1}}],[\"arp\",{\"0\":{\"7025\":1},\"1\":{\"2379\":1,\"2380\":4,\"2381\":1,\"7026\":2,\"7027\":2,\"7028\":2,\"7029\":1,\"7034\":1,\"7035\":1,\"7036\":2,\"7037\":1,\"7038\":2,\"7040\":2,\"7041\":3,\"7042\":1,\"7043\":1,\"7045\":3,\"7047\":1,\"7049\":1,\"7053\":1,\"7054\":1}}],[\"arp协议\",{\"0\":{\"2378\":1}}],[\"artifactid>\",{\"1\":{\"1337\":1,\"2174\":2,\"4545\":1,\"5661\":1}}],[\"articlelistbylast5days\",{\"1\":{\"4999\":7}}],[\"articleconstants\",{\"1\":{\"4984\":1,\"4986\":2,\"4999\":7}}],[\"articlefreemarkerserviceimpl\",{\"1\":{\"4983\":1}}],[\"article端文章配置修改\",{\"1\":{\"4981\":1}}],[\"articleisdownlistener\",{\"1\":{\"4980\":1,\"4981\":1}}],[\"articleid=\",{\"1\":{\"4981\":1}}],[\"articleid\",{\"1\":{\"4979\":1,\"4981\":1}}],[\"articledto\",{\"1\":{\"4548\":2,\"4857\":13,\"4919\":1,\"4923\":1}}],[\"article\",{\"1\":{\"553\":1,\"640\":1,\"686\":1,\"882\":1,\"918\":1,\"947\":1,\"1119\":1,\"1153\":1,\"1393\":1,\"1493\":1,\"1511\":1,\"2036\":1,\"2069\":1,\"2136\":1,\"2189\":1,\"3059\":1,\"3063\":1,\"3390\":1,\"3790\":1,\"3846\":1,\"4548\":2,\"4756\":1,\"4821\":3,\"4826\":1,\"4853\":1,\"4854\":1,\"4855\":1,\"4857\":2,\"4921\":1,\"4923\":2,\"4969\":3,\"4974\":1,\"4981\":2,\"4984\":1,\"4986\":2,\"4992\":1,\"4997\":2,\"4999\":10,\"5103\":2,\"5115\":1,\"5347\":1,\"5430\":1,\"5435\":1,\"5701\":1,\"5734\":1,\"5774\":1,\"5801\":1,\"5963\":1,\"6714\":1,\"6893\":1,\"6946\":1,\"6955\":1,\"6969\":1,\"7242\":1,\"7243\":1,\"7244\":1}}],[\"arrays\",{\"1\":{\"4857\":1}}],[\"arrayblockingqueue<>\",{\"1\":{\"3855\":1,\"6009\":1}}],[\"arrayblockingqueue\",{\"1\":{\"3855\":1,\"6009\":1}}],[\"arraycopy\",{\"1\":{\"812\":1,\"816\":1,\"824\":1,\"826\":1}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"812\":1,\"826\":1}}],[\"array\",{\"1\":{\"787\":2,\"833\":1,\"1625\":3,\"1626\":1,\"1627\":2}}],[\"arraylist里存储person对象\",{\"0\":{\"4270\":1}}],[\"arraylist<>\",{\"1\":{\"4857\":1,\"4999\":1}}],[\"arraylist<byte\",{\"1\":{\"4857\":1}}],[\"arraylist<topicpartition>\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"arraylist<string>\",{\"1\":{\"808\":1}}],[\"arraylist类的remove方法内容如下\",{\"1\":{\"823\":1}}],[\"arraylist自动扩大容量为原来的1\",{\"1\":{\"801\":1}}],[\"arraylist是原来的50\",{\"1\":{\"833\":1}}],[\"arraylist是0\",{\"1\":{\"801\":1}}],[\"arraylist是非同步实现的一个单线程下较为高效的数据结构\",{\"1\":{\"796\":1}}],[\"arraylist非同步\",{\"1\":{\"800\":1}}],[\"arraylist的add方法内容如下\",{\"1\":{\"815\":1}}],[\"arraylist的存储结构定义为transient\",{\"1\":{\"796\":1}}],[\"arraylist的实现\",{\"1\":{\"788\":1}}],[\"arraylist只通过一个修改记录字段提供弱一致性\",{\"1\":{\"796\":1}}],[\"arraylist需要135字节\",{\"1\":{\"794\":1}}],[\"arraylist实现了writeobject方法\",{\"1\":{\"788\":1}}],[\"arraylist使用了transient关键字进行存储优化\",{\"0\":{\"784\":1}}],[\"arraylist和linkedlist和vector的区别\",{\"0\":{\"774\":1}}],[\"arraylist\",{\"0\":{\"745\":1},\"1\":{\"777\":1,\"786\":1,\"801\":1,\"4999\":1}}],[\"arraydeque效率更高一些\",{\"1\":{\"766\":1}}],[\"arraydeque和linkedlist都实现了deque接口\",{\"1\":{\"765\":1}}],[\"arraydeque实现了双端队列\",{\"1\":{\"761\":1}}],[\"arraydeque<>\",{\"1\":{\"604\":1,\"634\":1}}],[\"arraydeque<integer>\",{\"1\":{\"570\":1,\"601\":1}}],[\"arraydeque\",{\"0\":{\"760\":1},\"1\":{\"568\":1,\"605\":1,\"606\":1,\"607\":1,\"628\":1,\"637\":1}}],[\"arithmeticexception\",{\"1\":{\"475\":1,\"5370\":1}}],[\"are\",{\"1\":{\"434\":1,\"1466\":1,\"3857\":3,\"3929\":1,\"5325\":1,\"6011\":3,\"6914\":1}}],[\"area\",{\"1\":{\"178\":1,\"181\":1,\"279\":1,\"282\":1,\"293\":1,\"5287\":1,\"5290\":1}}],[\"a\",{\"1\":{\"47\":1,\"478\":1,\"581\":1,\"584\":1,\"588\":2,\"590\":2,\"787\":1,\"790\":1,\"1256\":1,\"1258\":4,\"1274\":3,\"1278\":2,\"1279\":2,\"1283\":1,\"1373\":1,\"1413\":3,\"1414\":1,\"1417\":2,\"1418\":1,\"1426\":1,\"1427\":1,\"1428\":1,\"1466\":2,\"1955\":3,\"1993\":3,\"1994\":1,\"1999\":5,\"2000\":1,\"2001\":2,\"2299\":1,\"2377\":1,\"2712\":1,\"2838\":3,\"2898\":1,\"2900\":1,\"2972\":6,\"2983\":4,\"2984\":2,\"2988\":3,\"2992\":2,\"2993\":1,\"3307\":1,\"3338\":1,\"3395\":1,\"3403\":1,\"3406\":1,\"3411\":1,\"3417\":2,\"3527\":5,\"3674\":1,\"3675\":1,\"3685\":2,\"3688\":1,\"3772\":1,\"3857\":2,\"4646\":1,\"4647\":1,\"4649\":2,\"4651\":1,\"5160\":1,\"5373\":1,\"5608\":1,\"5610\":4,\"5616\":3,\"5620\":2,\"5621\":2,\"5625\":1,\"5842\":1,\"5844\":1,\"5854\":2,\"5858\":1,\"6011\":2,\"6219\":1,\"6220\":1,\"6222\":2,\"6224\":1,\"6510\":3,\"6570\":1,\"6572\":1,\"6644\":6,\"6655\":4,\"6656\":2,\"6660\":3,\"6664\":2,\"6665\":1,\"6914\":2,\"7033\":1,\"7035\":1,\"7036\":1,\"7037\":1,\"7038\":2,\"7039\":1,\"7040\":3,\"7042\":1,\"7045\":1,\"7046\":3,\"7047\":1,\"7049\":2,\"7050\":4,\"7051\":1,\"7052\":1}}],[\"与其他阿里云服务集成度高\",{\"1\":{\"4738\":1}}],[\"与其他通信机制不同的是\",{\"1\":{\"3466\":1}}],[\"与客户端系统消息通知\",{\"1\":{\"4662\":1,\"7181\":1}}],[\"与此线程有关的inheritablethreadlocal值\",{\"1\":{\"3762\":1,\"5993\":1}}],[\"与此线程有关的threadlocal值\",{\"1\":{\"3762\":1,\"5993\":1}}],[\"与之相似的还有\",{\"1\":{\"3563\":1}}],[\"与至少一个\",{\"1\":{\"3490\":1}}],[\"与快照持久化相比\",{\"1\":{\"3153\":1,\"6809\":1}}],[\"与系统当前其他活跃事务的id去对比\",{\"1\":{\"3045\":1}}],[\"与服务端\",{\"1\":{\"2712\":1}}],[\"与管道\",{\"1\":{\"1972\":1,\"6253\":1}}],[\"与代理类对象调用的方法相对应\",{\"1\":{\"903\":1,\"5521\":1}}],[\"与arraylist和linkedlist不同\",{\"1\":{\"764\":1}}],[\"与\",{\"0\":{\"1762\":1,\"2006\":1,\"2305\":1},\"1\":{\"46\":1,\"279\":1,\"354\":1,\"1752\":1,\"2197\":1,\"2209\":1,\"2266\":1,\"3299\":1,\"3487\":1,\"3780\":1,\"5159\":1,\"5791\":1,\"6085\":1,\"6989\":1}}],[\"v1\",{\"1\":{\"4548\":1,\"4923\":1,\"4929\":1,\"4931\":1,\"4933\":3,\"4935\":3,\"4994\":1}}],[\"v的实际值是相等的\",{\"1\":{\"3674\":1,\"5842\":1}}],[\"vm\",{\"1\":{\"3527\":2,\"3545\":1}}],[\"visible\",{\"1\":{\"6704\":1}}],[\"vim\",{\"1\":{\"3447\":1}}],[\"virtual\",{\"1\":{\"1632\":1}}],[\"view创建的事务所做的修改均是可见\",{\"1\":{\"3056\":1}}],[\"view会记录此时所有其他活动事务的快照\",{\"1\":{\"3056\":1}}],[\"view的的up\",{\"1\":{\"3053\":1}}],[\"view的属性做了某些比较\",{\"1\":{\"3045\":1}}],[\"view如下图\",{\"1\":{\"3051\":1}}],[\"view不仅仅会通过一个列表trx\",{\"1\":{\"3051\":1}}],[\"view记录了系统当前活跃事务1\",{\"1\":{\"3050\":1}}],[\"view读视图\",{\"1\":{\"3050\":1}}],[\"view生成时机的不同\",{\"1\":{\"3054\":1}}],[\"view生成时刻\",{\"1\":{\"3048\":1}}],[\"view生成之前就已经commit了\",{\"1\":{\"3048\":1}}],[\"view生成后才出现的\",{\"1\":{\"3047\":1}}],[\"view维护\",{\"1\":{\"3045\":1}}],[\"view遵循一个可见性算法\",{\"1\":{\"3045\":1}}],[\"view就是事务进行快照读操作的时候生产的读视图\",{\"1\":{\"3044\":1}}],[\"view时\",{\"1\":{\"3035\":1,\"3056\":1,\"6702\":1}}],[\"viewcontrollerregistry\",{\"1\":{\"1398\":1}}],[\"view\",{\"1\":{\"1206\":1,\"2866\":2,\"2867\":1,\"3017\":6,\"3019\":3,\"3032\":2,\"3035\":1,\"3036\":1,\"3044\":1,\"3055\":3,\"3057\":1,\"3058\":3,\"5558\":1,\"6538\":2,\"6539\":1,\"6689\":6,\"6691\":3,\"6698\":2,\"6702\":1,\"6703\":1}}],[\"viewresolverregistry\",{\"1\":{\"1398\":1}}],[\"viewresolver\",{\"1\":{\"1205\":2,\"1206\":1,\"1395\":1,\"5557\":2,\"5558\":1}}],[\"v>\",{\"1\":{\"1515\":2}}],[\"v对\",{\"1\":{\"1037\":1}}],[\"v对的键值定位到他应该保存在数组的哪个下标中\",{\"1\":{\"1031\":1}}],[\"v在链表数组中的位置的\",{\"1\":{\"1010\":1}}],[\"vos\",{\"1\":{\"4986\":1,\"4999\":1}}],[\"vo\",{\"1\":{\"4984\":5}}],[\"volitile关键字原理\",{\"0\":{\"3704\":1,\"5903\":1}}],[\"volitile\",{\"0\":{\"3703\":1}}],[\"volatile总结\",{\"0\":{\"5927\":1}}],[\"volatile如何防止指令重排序\",{\"0\":{\"5913\":1}}],[\"volatile的作用\",{\"0\":{\"5910\":1}}],[\"volatile解决的是多线程共享变量可见性问题\",{\"1\":{\"3726\":1,\"5928\":1}}],[\"volatile防止指令重排序具体步骤\",{\"1\":{\"3720\":1,\"5920\":1}}],[\"volatile是通过内存屏障来防止指令重排序的\",{\"1\":{\"3715\":1,\"5914\":1}}],[\"volatile不能保证完全的原子性\",{\"1\":{\"3713\":1}}],[\"volatile\",{\"1\":{\"858\":1,\"3181\":1,\"3182\":1,\"3183\":1,\"3188\":1,\"5488\":1,\"6839\":1,\"6840\":1,\"6841\":1,\"6846\":1}}],[\"void\",{\"1\":{\"250\":1,\"472\":1,\"478\":1,\"480\":1,\"489\":1,\"491\":1,\"787\":1,\"790\":1,\"812\":3,\"814\":1,\"816\":3,\"1256\":1,\"1398\":7,\"1521\":1,\"1547\":1,\"1613\":1,\"2177\":2,\"2182\":1,\"2185\":2,\"3735\":1,\"3746\":1,\"3765\":1,\"3772\":2,\"3775\":1,\"3855\":1,\"3961\":1,\"3963\":1,\"3965\":1,\"3967\":1,\"3979\":1,\"4029\":2,\"4031\":2,\"4857\":2,\"4860\":1,\"4895\":1,\"4938\":1,\"4981\":1,\"4984\":1,\"4986\":1,\"4992\":1,\"4997\":1,\"4999\":3,\"5367\":1,\"5373\":1,\"5376\":1,\"5378\":1,\"5608\":1,\"5966\":1,\"5977\":1,\"5996\":1,\"6009\":1}}],[\"vs\",{\"1\":{\"625\":1}}],[\"version\",{\"1\":{\"3307\":1}}],[\"version>\",{\"1\":{\"2174\":2}}],[\"verification\",{\"1\":{\"409\":1,\"5298\":1}}],[\"vector锁定的是this对象\",{\"1\":{\"840\":1}}],[\"vector缺省情况下自动增长原来一倍的数组长度\",{\"1\":{\"833\":1}}],[\"vector缺省情况下增长原来一倍的数组长度\",{\"1\":{\"801\":1}}],[\"vector使用同步方法实现\",{\"1\":{\"818\":1}}],[\"vector的实现\",{\"1\":{\"811\":1,\"825\":1}}],[\"vector的占用的字节比arraylist要多\",{\"1\":{\"793\":1}}],[\"vector<string>\",{\"1\":{\"808\":2}}],[\"vector是java\",{\"1\":{\"804\":1}}],[\"vector是多线程环境下更为可靠的数据结构\",{\"1\":{\"797\":1}}],[\"vector指定了initialcapacity\",{\"1\":{\"802\":1}}],[\"vector同步\",{\"1\":{\"800\":1}}],[\"vector需要243字节\",{\"1\":{\"794\":1}}],[\"vector也实现了writeobject方法\",{\"1\":{\"791\":1}}],[\"vector每次请求其大小的双倍空间\",{\"1\":{\"781\":1}}],[\"vector和arraylist在更多元素添加进来时会请求更大的空间\",{\"1\":{\"781\":1}}],[\"vector\",{\"1\":{\"572\":1,\"573\":2,\"575\":2,\"579\":1,\"612\":2,\"620\":1,\"780\":1,\"789\":1,\"790\":1,\"802\":1}}],[\"v\",{\"0\":{\"7289\":1,\"7302\":1},\"1\":{\"491\":2,\"1966\":1,\"1967\":1,\"1988\":1,\"3419\":1,\"3424\":1,\"3670\":1,\"3673\":1,\"3674\":2,\"3675\":2,\"3736\":1,\"5378\":2,\"5834\":1,\"5840\":1,\"5842\":2,\"5844\":2,\"5967\":1,\"6247\":1}}],[\"varaible\",{\"1\":{\"3772\":1}}],[\"var\",{\"1\":{\"3495\":1}}],[\"varchar\",{\"1\":{\"2773\":1,\"2783\":1,\"6442\":1,\"6452\":1}}],[\"var1\",{\"1\":{\"1398\":1}}],[\"variant\",{\"1\":{\"1062\":1}}],[\"variables\",{\"1\":{\"211\":1}}],[\"variable\",{\"1\":{\"44\":1,\"3495\":1,\"5157\":1}}],[\"valueoperations<string\",{\"1\":{\"2188\":1}}],[\"valueof\",{\"1\":{\"2096\":1}}],[\"valuebytes\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"value为从查询出来映射生成的\",{\"1\":{\"1134\":1}}],[\"value\",{\"1\":{\"475\":3,\"1380\":1,\"1466\":1,\"1515\":1,\"1610\":1,\"1613\":1,\"1617\":1,\"2177\":3,\"2185\":3,\"2188\":3,\"2262\":1,\"2755\":1,\"2756\":2,\"2770\":1,\"3107\":1,\"3111\":1,\"3126\":1,\"3130\":1,\"3251\":1,\"3765\":4,\"3767\":1,\"3769\":1,\"3878\":1,\"3879\":1,\"3880\":1,\"3911\":1,\"3912\":1,\"3913\":1,\"4548\":1,\"4824\":1,\"4857\":2,\"4904\":1,\"4910\":1,\"4923\":1,\"4972\":1,\"4999\":2,\"5370\":3,\"5713\":1,\"5996\":3,\"5998\":1,\"6000\":1,\"6033\":1,\"6034\":1,\"6035\":1,\"6058\":1,\"6059\":1,\"6060\":1,\"6424\":1,\"6425\":2,\"6439\":1,\"6763\":1,\"6767\":1,\"6782\":1,\"6786\":1,\"6856\":1,\"6914\":1,\"7274\":1}}],[\"vue\",{\"0\":{\"109\":1,\"5222\":1}}],[\"vuepress\",{\"0\":{\"38\":1,\"5151\":1},\"1\":{\"28\":1,\"29\":1,\"33\":1,\"35\":1,\"37\":1,\"39\":1,\"40\":1,\"42\":1,\"126\":1,\"5141\":1,\"5142\":1,\"5146\":1,\"5148\":1,\"5150\":1,\"5152\":1,\"5153\":1,\"5155\":1,\"5239\":1}}],[\"m0\",{\"1\":{\"5103\":1,\"6955\":1}}],[\"mv\",{\"1\":{\"3408\":1}}],[\"mvc2\",{\"1\":{\"5021\":1}}],[\"mvc\",{\"1\":{\"4534\":1}}],[\"mvc中的拦截器通过handlerinterceptor接口实现请求拦截\",{\"1\":{\"4038\":1}}],[\"mvcc机制\",{\"0\":{\"4251\":1}}],[\"mvcc\",{\"0\":{\"6690\":1},\"1\":{\"2737\":1,\"2745\":1,\"2747\":1,\"2866\":1,\"2910\":1,\"2978\":1,\"3012\":1,\"3019\":1,\"3040\":1,\"3059\":1,\"6406\":1,\"6414\":1,\"6416\":1,\"6538\":1,\"6582\":1,\"6650\":1,\"6684\":1,\"6691\":1,\"6708\":1}}],[\"mvc配置\",{\"1\":{\"1395\":1}}],[\"mvc的基本流程\",{\"0\":{\"1191\":1,\"5544\":1}}],[\"mtime\",{\"1\":{\"3403\":1,\"3483\":1}}],[\"mtu\",{\"1\":{\"2502\":1,\"2567\":1,\"2569\":1}}],[\"mkdir\",{\"1\":{\"3399\":1}}],[\"m或者git\",{\"1\":{\"3338\":1}}],[\"mgunlogson\",{\"1\":{\"2174\":1,\"2177\":1,\"2185\":1}}],[\"mmap\",{\"0\":{\"6289\":1},\"1\":{\"1783\":1,\"1786\":1,\"1787\":1,\"1788\":1,\"1790\":1,\"1793\":1,\"6286\":1,\"6290\":1,\"6291\":1,\"6292\":1,\"6295\":1,\"6298\":1}}],[\"mmu\",{\"1\":{\"1634\":1}}],[\"multiplexing\",{\"1\":{\"7066\":1}}],[\"multipart\",{\"1\":{\"2093\":1}}],[\"murmur2\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"mutex\",{\"1\":{\"814\":1,\"822\":1,\"1980\":1,\"6239\":1}}],[\"mq功能比较完善\",{\"1\":{\"4793\":1}}],[\"mq服务器更新消息状态为可发送\",{\"1\":{\"2052\":1,\"5757\":1}}],[\"mq服务器返回ack确认到生产者\",{\"1\":{\"2049\":1,\"5754\":1}}],[\"mq收到消息后\",{\"1\":{\"2048\":1,\"5753\":1}}],[\"mq\",{\"1\":{\"1424\":1,\"1426\":1,\"1427\":3,\"1428\":1,\"1430\":1,\"2043\":1,\"5748\":1}}],[\"mp\",{\"1\":{\"1368\":1,\"3399\":1,\"3522\":1,\"3702\":1,\"3727\":1,\"3930\":1,\"5646\":1,\"5824\":1,\"5929\":1,\"6074\":1}}],[\"myid\",{\"1\":{\"4615\":1,\"4616\":2,\"4620\":1,\"6188\":1,\"6189\":2,\"6193\":1}}],[\"myisam\",{\"0\":{\"6396\":1},\"1\":{\"2728\":1,\"2729\":2,\"2733\":1,\"2734\":1,\"2736\":1,\"2739\":1,\"2743\":1,\"2746\":1,\"2747\":1,\"2749\":1,\"2750\":1,\"2765\":1,\"2766\":1,\"2767\":2,\"2770\":1,\"2776\":1,\"2794\":1,\"2805\":1,\"2870\":1,\"2937\":1,\"2969\":1,\"4302\":1,\"6397\":1,\"6398\":2,\"6402\":1,\"6403\":1,\"6405\":1,\"6408\":1,\"6412\":1,\"6415\":1,\"6416\":1,\"6418\":1,\"6419\":1,\"6434\":1,\"6435\":1,\"6436\":2,\"6439\":1,\"6445\":1,\"6465\":1,\"6477\":1,\"6542\":1,\"6609\":1,\"6641\":1,\"7127\":1}}],[\"my\",{\"1\":{\"1518\":2}}],[\"mysql的事务隔离级别\",{\"0\":{\"4240\":1}}],[\"mysql的左连接和右连接\",{\"1\":{\"4165\":1}}],[\"mysql了解吧\",{\"0\":{\"4221\":1}}],[\"mysql回表\",{\"0\":{\"4201\":1}}],[\"mysql主键数值和字符的差别\",{\"0\":{\"4114\":1}}],[\"mysqld\",{\"1\":{\"3538\":2}}],[\"mysqldump\",{\"1\":{\"2868\":2,\"6540\":2}}],[\"mysql5\",{\"1\":{\"2794\":1,\"6465\":1}}],[\"mysql\",{\"0\":{\"2725\":1,\"6393\":1,\"6394\":1},\"1\":{\"1131\":1,\"1231\":1,\"1425\":1,\"1708\":1,\"1710\":1,\"1947\":1,\"1948\":1,\"2728\":2,\"2730\":2,\"2757\":1,\"2765\":1,\"2770\":1,\"2776\":1,\"2787\":1,\"2797\":1,\"2805\":1,\"2819\":1,\"2821\":1,\"2834\":2,\"2850\":1,\"2872\":1,\"2925\":1,\"2968\":1,\"2969\":2,\"2999\":1,\"3009\":1,\"3010\":2,\"3011\":1,\"3059\":2,\"3179\":1,\"3514\":1,\"3538\":1,\"3540\":2,\"4222\":1,\"4289\":1,\"4654\":1,\"4860\":1,\"4938\":1,\"5583\":1,\"6397\":2,\"6399\":2,\"6426\":1,\"6434\":1,\"6439\":1,\"6445\":1,\"6456\":1,\"6469\":1,\"6477\":1,\"6491\":1,\"6493\":1,\"6506\":2,\"6522\":1,\"6544\":1,\"6597\":1,\"6640\":1,\"6641\":2,\"6671\":1,\"6681\":1,\"6682\":2,\"6683\":1,\"6837\":1,\"7114\":1,\"7173\":1}}],[\"mybatis的实现\",{\"1\":{\"4746\":1}}],[\"mybatis的编程风格更加传统\",{\"1\":{\"4744\":1}}],[\"mybatis是基于xml或注解方式进行数据库操作的持久化框架\",{\"1\":{\"4742\":1}}],[\"mybatis和mybatis\",{\"1\":{\"4740\":1}}],[\"mybatis觉得获取的数据可能会被修改\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"mybatis为了加快获取速度\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"mybatis认为所有从缓存中获取数据的操作都是只读操作\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"mybatis缓存机制\",{\"0\":{\"1132\":1,\"5711\":1}}],[\"mybatisplusinterceptor\",{\"1\":{\"1131\":4,\"4860\":5,\"4938\":5}}],[\"mybatisplus\",{\"0\":{\"1130\":1},\"1\":{\"4654\":1,\"4857\":1,\"4860\":3,\"4938\":3,\"7173\":1}}],[\"mybatis分页方式\",{\"0\":{\"4160\":1}}],[\"mybatis分页实现的核心就在于这个动态sql拦截机制\",{\"1\":{\"1114\":1}}],[\"mybatis分页原理\",{\"0\":{\"1104\":1,\"5695\":1}}],[\"mybatis通过拦截器interceptor来实现物理分页\",{\"1\":{\"1107\":1}}],[\"mybatis通过动态代理机制\",{\"1\":{\"1093\":1}}],[\"mybatis实现分页主要有两种机制\",{\"1\":{\"1105\":1}}],[\"mybatis利用jdk动态代理\",{\"1\":{\"1101\":1}}],[\"mybatis会利用序列化\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"mybatis会动态生成其实现类\",{\"1\":{\"1096\":1}}],[\"mybatis会为每个dao接口生成一个代理对象\",{\"1\":{\"1093\":1}}],[\"mybatis中的dao接口\",{\"1\":{\"1092\":1}}],[\"mybatis\",{\"0\":{\"1090\":1,\"1091\":1,\"1120\":1,\"4069\":1,\"5535\":1,\"5694\":1,\"5702\":1},\"1\":{\"1099\":1,\"1122\":1,\"1125\":1,\"1128\":1,\"1129\":1,\"1134\":1,\"1136\":1,\"1138\":1,\"1143\":1,\"4744\":1,\"4751\":1,\"4822\":1,\"4826\":1,\"4860\":1,\"4938\":1,\"4939\":5,\"4940\":1,\"4941\":1,\"4943\":1,\"4944\":1,\"4945\":1,\"4953\":1,\"4954\":2,\"4955\":1,\"4956\":2,\"4962\":1,\"4965\":1,\"4970\":1,\"4974\":1,\"5704\":1,\"5707\":1,\"5709\":1,\"5710\":1,\"5713\":1,\"5715\":1,\"5722\":1}}],[\"m>=0\",{\"1\":{\"647\":1}}],[\"microservice\",{\"0\":{\"7300\":1}}],[\"milliseconds\",{\"1\":{\"3855\":1,\"4910\":2,\"6009\":1}}],[\"mightcontain\",{\"1\":{\"2177\":2,\"2182\":4,\"2185\":2,\"2188\":1}}],[\"mime\",{\"1\":{\"2092\":1}}],[\"mirror\",{\"1\":{\"2069\":1,\"5774\":1}}],[\"mid=2651751537\",{\"1\":{\"3930\":1,\"6074\":1}}],[\"mid=2247483734\",{\"1\":{\"3727\":1,\"5929\":1}}],[\"mid=2247485568\",{\"1\":{\"1368\":1,\"5646\":1}}],[\"mid=2247510278\",{\"1\":{\"3702\":1,\"5824\":1}}],[\"middle\",{\"1\":{\"1668\":1}}],[\"minusdays\",{\"1\":{\"4999\":1}}],[\"minutes\",{\"1\":{\"3772\":1}}],[\"minio安全性取决于自行配置\",{\"1\":{\"4738\":1}}],[\"minio是开源软件\",{\"1\":{\"4738\":1}}],[\"minio\",{\"1\":{\"4683\":1,\"4857\":1,\"7199\":1}}],[\"min\",{\"1\":{\"1474\":1,\"2670\":1,\"6923\":1}}],[\"mincapacity\",{\"1\":{\"812\":3,\"816\":4}}],[\"minorgc时\",{\"1\":{\"404\":1}}],[\"minorgc后存活的对象超过了老年代剩余空间\",{\"1\":{\"393\":1}}],[\"minorgc是发生在新生代的\",{\"1\":{\"384\":1}}],[\"minor\",{\"1\":{\"230\":1,\"233\":1,\"256\":1,\"258\":2,\"263\":1}}],[\"missing\",{\"1\":{\"480\":1}}],[\"misc\",{\"1\":{\"444\":3,\"1016\":1,\"1062\":1,\"3679\":1,\"5337\":3,\"5848\":1}}],[\"mongodb\",{\"1\":{\"4654\":1,\"7173\":1}}],[\"monitor\",{\"1\":{\"3739\":1,\"3740\":1,\"3752\":1,\"5971\":1,\"5972\":1,\"5984\":1}}],[\"monitorexit\",{\"1\":{\"3737\":2,\"3738\":1,\"3743\":2,\"3747\":1,\"3750\":2,\"3751\":1,\"5969\":2,\"5970\":1,\"5975\":2,\"5979\":1,\"5982\":2,\"5983\":1}}],[\"monitorenter\",{\"1\":{\"3737\":2,\"3738\":1,\"3739\":1,\"3747\":1,\"3750\":2,\"3751\":1,\"5969\":2,\"5970\":1,\"5971\":1,\"5979\":1,\"5982\":2,\"5983\":1}}],[\"monitoring\",{\"1\":{\"3195\":1}}],[\"moved\",{\"1\":{\"2200\":1}}],[\"mode\",{\"1\":{\"2912\":1,\"2927\":1,\"2928\":1,\"2929\":1,\"2930\":1,\"2933\":1,\"2935\":1,\"2939\":1,\"3022\":1,\"6584\":1,\"6599\":1,\"6600\":1,\"6601\":1,\"6602\":1,\"6605\":1,\"6607\":1,\"6611\":1}}],[\"modelandview\",{\"1\":{\"1193\":1,\"1204\":1,\"1205\":1,\"5545\":1,\"5556\":1,\"5557\":1}}],[\"model\",{\"1\":{\"442\":1,\"1193\":1,\"1206\":1,\"4826\":1,\"4857\":6,\"4929\":1,\"4931\":1,\"4933\":2,\"4935\":2,\"4974\":1,\"4986\":1,\"4994\":1,\"4999\":4,\"5334\":1,\"5545\":1,\"5558\":1}}],[\"modified\",{\"1\":{\"2203\":1,\"2240\":2,\"2241\":1,\"2242\":5,\"2247\":4,\"2256\":1,\"7063\":1}}],[\"modcount++\",{\"1\":{\"812\":1,\"824\":1,\"826\":1}}],[\"modcount\",{\"1\":{\"787\":2,\"816\":1}}],[\"more\",{\"1\":{\"115\":1,\"3415\":2,\"5228\":1}}],[\"m\",{\"0\":{\"7289\":1,\"7302\":1},\"1\":{\"250\":2,\"382\":1,\"650\":1,\"3032\":5,\"3033\":1,\"3034\":5,\"3035\":2,\"3036\":1,\"3399\":1,\"3403\":1,\"6698\":5,\"6700\":1,\"6701\":5,\"6702\":2,\"6703\":1}}],[\"merge\",{\"1\":{\"3372\":1,\"3374\":1}}],[\"merge或者git\",{\"1\":{\"3338\":1}}],[\"mermaid\",{\"0\":{\"91\":1,\"5204\":1}}],[\"message=\",{\"1\":{\"4986\":1}}],[\"message\",{\"1\":{\"1518\":2,\"1972\":1,\"3463\":1,\"3469\":1,\"4981\":3,\"4986\":5,\"5028\":1,\"6253\":1}}],[\"messageconverter\",{\"1\":{\"1395\":1}}],[\"medium=distribute\",{\"1\":{\"1493\":1,\"2136\":1,\"3390\":1,\"6946\":1,\"6955\":1}}],[\"memcache\",{\"1\":{\"6339\":1}}],[\"memcached\",{\"1\":{\"3140\":1,\"6796\":1}}],[\"member\",{\"1\":{\"2058\":3,\"5763\":3}}],[\"memberid\",{\"1\":{\"1474\":2,\"6923\":2}}],[\"memoryanalyzer\",{\"1\":{\"3574\":1}}],[\"memory\",{\"1\":{\"230\":2,\"293\":1,\"1632\":1,\"1633\":1,\"1673\":1,\"1801\":1,\"1974\":1,\"2129\":1,\"3176\":1,\"3465\":1,\"3469\":1,\"3574\":1,\"6255\":1,\"6307\":1,\"6834\":1}}],[\"metrics\",{\"1\":{\"1346\":1,\"5671\":1}}],[\"metadata\",{\"1\":{\"1518\":2,\"1521\":1}}],[\"meta\",{\"1\":{\"1294\":1,\"1308\":1,\"5636\":1}}],[\"methodproxy\",{\"1\":{\"911\":1,\"5529\":1}}],[\"methodinterceptor\",{\"1\":{\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"5527\":1,\"5528\":1,\"5529\":1,\"5530\":1}}],[\"method\",{\"1\":{\"279\":1,\"282\":1,\"434\":1,\"472\":1,\"475\":1,\"491\":2,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"790\":1,\"903\":4,\"911\":3,\"975\":1,\"980\":3,\"993\":2,\"1184\":1,\"1188\":1,\"3527\":1,\"3735\":1,\"3746\":1,\"3857\":1,\"3975\":3,\"5325\":1,\"5367\":1,\"5370\":1,\"5378\":2,\"5424\":1,\"5425\":4,\"5521\":4,\"5529\":3,\"5966\":1,\"5977\":1,\"6011\":1}}],[\"may\",{\"1\":{\"3498\":1,\"3504\":1}}],[\"mac\",{\"0\":{\"7032\":1,\"7044\":1},\"1\":{\"2379\":1,\"2380\":1,\"2381\":2,\"2382\":1,\"7026\":2,\"7028\":2,\"7030\":1,\"7034\":1,\"7035\":1,\"7036\":1,\"7038\":6,\"7040\":2,\"7041\":2,\"7042\":1,\"7045\":2,\"7046\":1,\"7047\":1,\"7049\":3,\"7050\":5,\"7053\":1,\"7054\":2,\"7055\":2}}],[\"master\",{\"1\":{\"2333\":1,\"2337\":1,\"2339\":1,\"3206\":1,\"3338\":1,\"3386\":1,\"3389\":1,\"4560\":1,\"6160\":1}}],[\"maker\",{\"1\":{\"2069\":1,\"5774\":1}}],[\"man\",{\"1\":{\"3597\":1,\"3609\":1}}],[\"management\",{\"1\":{\"1673\":1}}],[\"mandatory\",{\"1\":{\"1241\":1,\"5593\":1}}],[\"mat\",{\"1\":{\"3574\":1}}],[\"matchwords\",{\"1\":{\"4857\":1}}],[\"match\",{\"1\":{\"2243\":1,\"2245\":2,\"2253\":1,\"2255\":1,\"7063\":2}}],[\"math\",{\"1\":{\"816\":1,\"1474\":1,\"6923\":1}}],[\"matter\",{\"1\":{\"151\":1,\"155\":1,\"5264\":1}}],[\"maps\",{\"1\":{\"4857\":2}}],[\"map的区别\",{\"1\":{\"4382\":1}}],[\"map等\",{\"1\":{\"3940\":1}}],[\"map+\",{\"1\":{\"1613\":1}}],[\"map<topicpartition\",{\"1\":{\"1613\":1}}],[\"map<string\",{\"1\":{\"503\":1,\"505\":1,\"507\":2,\"513\":2,\"521\":1,\"975\":1,\"980\":3,\"993\":1,\"1474\":5,\"4857\":4,\"4979\":1,\"5390\":1,\"5393\":1,\"5395\":2,\"5401\":2,\"5409\":1,\"6923\":5}}],[\"mapperscan\",{\"1\":{\"4860\":2,\"4938\":2}}],[\"mapper>\",{\"1\":{\"4748\":1}}],[\"mapper映射文件\",{\"1\":{\"4747\":1}}],[\"mapper\",{\"1\":{\"1136\":1,\"4826\":2,\"4857\":4,\"4860\":1,\"4938\":1,\"4974\":2,\"4999\":1,\"5715\":1}}],[\"maptype\",{\"1\":{\"975\":3,\"980\":6,\"993\":9}}],[\"map常见面试题\",{\"0\":{\"916\":1}}],[\"map>\",{\"1\":{\"521\":1,\"5409\":1}}],[\"map\",{\"0\":{\"952\":1,\"4124\":1,\"5433\":1},\"1\":{\"503\":2,\"505\":2,\"507\":4,\"711\":1,\"975\":5,\"980\":9,\"993\":23,\"1474\":1,\"1613\":1,\"3765\":3,\"4857\":23,\"4979\":4,\"4981\":6,\"5390\":2,\"5393\":2,\"5395\":4,\"5996\":3,\"6923\":1}}],[\"mark\",{\"1\":{\"361\":2,\"3796\":2,\"5808\":2}}],[\"markdown\",{\"0\":{\"27\":1,\"30\":1,\"32\":1,\"36\":1,\"5140\":1,\"5143\":1,\"5145\":1,\"5149\":1},\"1\":{\"5\":1,\"28\":1,\"29\":1,\"31\":3,\"33\":1,\"37\":3,\"39\":1,\"40\":1,\"42\":1,\"44\":1,\"97\":1,\"117\":1,\"123\":1,\"125\":1,\"5118\":1,\"5141\":1,\"5142\":1,\"5144\":3,\"5146\":1,\"5150\":3,\"5152\":1,\"5153\":1,\"5155\":1,\"5157\":1,\"5210\":1,\"5230\":1,\"5236\":1,\"5238\":1}}],[\"maximum\",{\"1\":{\"3857\":2,\"6011\":2}}],[\"maximumpoolsize\",{\"1\":{\"3857\":8,\"3860\":1,\"6011\":8,\"6014\":1}}],[\"maxintset\",{\"1\":{\"3119\":1,\"6775\":1}}],[\"max\",{\"1\":{\"816\":1,\"3111\":2,\"3126\":2,\"3878\":1,\"3879\":1,\"3880\":1,\"3911\":1,\"3912\":1,\"3913\":1,\"6033\":1,\"6034\":1,\"6035\":1,\"6058\":1,\"6059\":1,\"6060\":1,\"6767\":2,\"6782\":2}}],[\"maxtenuringthreshold\",{\"1\":{\"255\":1}}],[\"maxmemory\",{\"1\":{\"250\":3}}],[\"maxheapsize\",{\"1\":{\"244\":1}}],[\"mainreactor\",{\"1\":{\"1843\":1,\"1844\":1,\"6385\":1,\"6386\":1}}],[\"main\",{\"1\":{\"250\":1,\"480\":1,\"491\":1,\"1256\":1,\"1294\":1,\"2182\":1,\"3527\":2,\"3772\":1,\"3855\":1,\"3967\":1,\"3979\":1,\"4860\":1,\"4938\":1,\"5378\":1,\"5608\":1,\"5636\":1,\"6009\":1}}],[\"majorgc\",{\"1\":{\"385\":1}}],[\"major\",{\"1\":{\"236\":1,\"268\":1,\"269\":1}}],[\"ms级以内\",{\"1\":{\"4784\":1}}],[\"msl\",{\"1\":{\"2614\":1,\"2615\":2}}],[\"mss\",{\"0\":{\"2566\":1},\"1\":{\"2414\":1,\"2501\":1,\"2568\":1,\"2569\":2}}],[\"ms\",{\"1\":{\"118\":1,\"634\":2,\"1418\":1,\"4781\":1,\"4783\":1,\"5231\":1}}],[\"mrhope\",{\"1\":{\"83\":2,\"5196\":2}}],[\"mr\",{\"1\":{\"83\":1,\"105\":1,\"5196\":1,\"5218\":1}}],[\"md5实际上既不是对称算法\",{\"1\":{\"5096\":1}}],[\"md5不是加密算法\",{\"1\":{\"5096\":1}}],[\"md5是对称加密还是非对称加密\",{\"1\":{\"5089\":1}}],[\"md5是不可逆的\",{\"1\":{\"5032\":1}}],[\"md5的对照表\",{\"1\":{\"5055\":1}}],[\"md5可以用来生成数字签名\",{\"1\":{\"5086\":1}}],[\"md5可以用来对密码加密\",{\"1\":{\"5039\":1}}],[\"md5可以将任意长度的输入转化为128位长度的输出\",{\"1\":{\"5031\":1}}],[\"md5值就会有巨大的变动\",{\"1\":{\"5033\":1}}],[\"md5\",{\"0\":{\"5025\":1,\"5026\":1},\"1\":{\"5028\":1,\"5057\":1}}],[\"mdl\",{\"1\":{\"2874\":1,\"2888\":1,\"2889\":2,\"2890\":1,\"2891\":1,\"2892\":1,\"2893\":3,\"2894\":3,\"2895\":1,\"2896\":2,\"2898\":1,\"2900\":2,\"2902\":1,\"2903\":2,\"2904\":1,\"6546\":1,\"6560\":1,\"6561\":2,\"6562\":1,\"6563\":1,\"6564\":1,\"6565\":3,\"6566\":3,\"6567\":1,\"6568\":2,\"6570\":1,\"6572\":2,\"6574\":1,\"6575\":2,\"6576\":1}}],[\"md\",{\"1\":{\"42\":1,\"3059\":1,\"3753\":1,\"3930\":1,\"5155\":1}}],[\"png\",{\"1\":{\"6921\":1,\"6925\":1,\"6932\":1,\"6934\":1,\"6944\":1}}],[\"px\",{\"1\":{\"4910\":1}}],[\"pid\",{\"1\":{\"3553\":1,\"3556\":2,\"3558\":2,\"3560\":1,\"3567\":1,\"3570\":1}}],[\"pid=13369\",{\"1\":{\"3519\":1}}],[\"ping\",{\"1\":{\"3458\":1}}],[\"pipeline\",{\"1\":{\"2296\":1,\"2350\":1}}],[\"pipes\",{\"1\":{\"1969\":1,\"1970\":1,\"6250\":1,\"6251\":1}}],[\"pipe\",{\"1\":{\"1952\":1,\"3460\":1,\"3461\":1,\"3468\":1}}],[\"pdai\",{\"1\":{\"3059\":1,\"3753\":1,\"3930\":1}}],[\"pdf\",{\"1\":{\"2087\":1}}],[\"ptr回滚指针去取出undo\",{\"1\":{\"3045\":1}}],[\"ptr\",{\"1\":{\"3019\":1,\"3029\":1,\"6691\":1,\"6695\":1}}],[\"pte\",{\"1\":{\"1669\":1}}],[\"pstree\",{\"1\":{\"3598\":1,\"3600\":2}}],[\"psync\",{\"1\":{\"3233\":3}}],[\"ps\",{\"1\":{\"1947\":1,\"1948\":1,\"3222\":1,\"3307\":1,\"3426\":3,\"3522\":1,\"6461\":1}}],[\"pmd\",{\"1\":{\"1668\":1}}],[\"pgd\",{\"1\":{\"1666\":1}}],[\"physical\",{\"1\":{\"1633\":1}}],[\"phantomreference\",{\"1\":{\"321\":1}}],[\"plus\",{\"1\":{\"4826\":1,\"4939\":3,\"4940\":1,\"4941\":1,\"4943\":1,\"4944\":1,\"4945\":1,\"4953\":1,\"4954\":1,\"4955\":1,\"4956\":1,\"4965\":1,\"4974\":1}}],[\"plus已经集成了雪花算法\",{\"1\":{\"4822\":1,\"4970\":1}}],[\"plus中则要比上述方式简单得多\",{\"1\":{\"4752\":1}}],[\"plus的分页拦截器\",{\"1\":{\"4937\":1}}],[\"plus的实现\",{\"1\":{\"4751\":1}}],[\"plus的区别\",{\"1\":{\"4745\":1}}],[\"plus具有许多针对crud进行的简化方法\",{\"1\":{\"4744\":1}}],[\"plus是在mybatis框架上的封装\",{\"1\":{\"4742\":1}}],[\"plus都是java语言中非常常用的orm框架\",{\"1\":{\"4740\":1}}],[\"plus作为持久层提升开发效率\",{\"1\":{\"4661\":1,\"7180\":1}}],[\"plugins\",{\"1\":{\"4860\":2,\"4938\":2}}],[\"plugin\",{\"1\":{\"42\":1,\"4941\":1,\"4943\":1,\"5155\":1}}],[\"platform\",{\"1\":{\"3581\":1}}],[\"platformtransactionmanager\",{\"1\":{\"1225\":1,\"5577\":1}}],[\"p\",{\"1\":{\"1190\":1,\"1965\":1,\"1967\":1,\"1988\":1,\"3399\":1,\"3401\":2,\"3406\":1,\"3550\":1,\"3553\":1,\"3600\":2,\"3660\":1,\"4646\":2,\"4647\":1,\"4651\":1,\"5103\":1,\"5872\":1,\"6219\":2,\"6220\":1,\"6224\":1,\"6247\":1}}],[\"pojos\",{\"1\":{\"4826\":1,\"4857\":4,\"4974\":1,\"4999\":2}}],[\"pointcut\",{\"1\":{\"4022\":1}}],[\"pointer\",{\"1\":{\"3485\":1}}],[\"port\",{\"1\":{\"3426\":1,\"3579\":1}}],[\"postmapping\",{\"1\":{\"4123\":1,\"4534\":1,\"4548\":1,\"4923\":1,\"4933\":2,\"4935\":1}}],[\"postconstruct\",{\"1\":{\"2177\":2,\"2185\":2}}],[\"postconstruct注解的方法\",{\"1\":{\"1183\":1}}],[\"post\",{\"0\":{\"2218\":1},\"1\":{\"2091\":1,\"2222\":1,\"2224\":3,\"4590\":1,\"5019\":1}}],[\"post请求\",{\"1\":{\"2083\":1}}],[\"posts\",{\"1\":{\"1522\":1}}],[\"postprocessafterinitialization\",{\"1\":{\"1185\":1}}],[\"postprocessbeforeinitialzation\",{\"1\":{\"1182\":1}}],[\"poll\",{\"0\":{\"1767\":1},\"1\":{\"609\":1,\"782\":1,\"1610\":1,\"1613\":1,\"1617\":1,\"1771\":1,\"1772\":1,\"1774\":1,\"1775\":2,\"1776\":1,\"1780\":1,\"6261\":1,\"6262\":1,\"6264\":1,\"6265\":2,\"6266\":1,\"6281\":1,\"6283\":1}}],[\"poolexecutor\",{\"1\":{\"3772\":2}}],[\"pool\",{\"1\":{\"281\":2,\"287\":1,\"1708\":2,\"3772\":1,\"3857\":2,\"3927\":1,\"3928\":1,\"6011\":2}}],[\"published\",{\"1\":{\"4979\":1}}],[\"public\",{\"1\":{\"126\":1,\"250\":1,\"472\":1,\"475\":1,\"478\":1,\"480\":1,\"489\":1,\"491\":1,\"507\":1,\"513\":1,\"812\":2,\"814\":1,\"816\":1,\"822\":1,\"824\":1,\"826\":1,\"858\":2,\"901\":1,\"903\":2,\"911\":2,\"1095\":1,\"1097\":2,\"1131\":1,\"1256\":2,\"1325\":3,\"1327\":1,\"1329\":2,\"1380\":4,\"1398\":1,\"1466\":1,\"1474\":1,\"1521\":1,\"1547\":1,\"1613\":1,\"1625\":1,\"2177\":4,\"2182\":2,\"2185\":4,\"2188\":1,\"3735\":2,\"3746\":2,\"3762\":1,\"3765\":2,\"3772\":3,\"3786\":1,\"3789\":1,\"3855\":2,\"3857\":1,\"3961\":1,\"3963\":2,\"3965\":3,\"3967\":2,\"3975\":3,\"3979\":2,\"4029\":3,\"4031\":3,\"4034\":1,\"4548\":2,\"4753\":1,\"4755\":2,\"4857\":2,\"4860\":3,\"4895\":1,\"4910\":1,\"4919\":2,\"4921\":1,\"4923\":2,\"4929\":2,\"4931\":2,\"4933\":4,\"4935\":4,\"4938\":3,\"4979\":1,\"4981\":2,\"4986\":2,\"4992\":2,\"4994\":2,\"4997\":2,\"4999\":2,\"5011\":1,\"5239\":1,\"5367\":1,\"5370\":1,\"5373\":1,\"5376\":1,\"5378\":1,\"5395\":1,\"5401\":1,\"5488\":2,\"5519\":1,\"5521\":2,\"5529\":2,\"5608\":2,\"5650\":3,\"5651\":3,\"5797\":1,\"5800\":1,\"5966\":2,\"5977\":2,\"5993\":1,\"5996\":1,\"6009\":2,\"6011\":1,\"6914\":1,\"6923\":1}}],[\"pull命令之间的区别\",{\"0\":{\"3370\":1}}],[\"pull命令\",{\"1\":{\"3342\":1}}],[\"pull\",{\"1\":{\"3307\":1,\"3338\":1,\"3371\":1,\"3374\":1,\"4933\":2,\"4935\":3}}],[\"purge\",{\"1\":{\"3032\":1,\"3042\":1,\"6698\":1,\"6710\":1}}],[\"pud\",{\"1\":{\"1667\":1}}],[\"pushdown\",{\"1\":{\"2821\":1,\"6493\":1}}],[\"push\",{\"1\":{\"577\":2,\"3338\":1,\"3350\":1,\"3386\":1,\"3389\":1,\"7069\":1}}],[\"putifabsent\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"putfields\",{\"1\":{\"790\":1}}],[\"putfield\",{\"1\":{\"790\":1}}],[\"put\",{\"1\":{\"503\":1,\"505\":1,\"790\":3,\"975\":1,\"993\":13,\"1474\":1,\"1518\":1,\"1551\":1,\"1564\":1,\"1568\":1,\"2177\":1,\"2182\":3,\"2185\":1,\"4857\":2,\"4979\":2,\"5390\":1,\"5393\":1,\"6923\":1}}],[\"preparedstatement来执行参数化查询\",{\"1\":{\"4090\":1}}],[\"preparation\",{\"1\":{\"409\":1,\"5298\":1}}],[\"prev\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"prevent\",{\"1\":{\"2538\":1}}],[\"preserve=all\",{\"1\":{\"3406\":1}}],[\"prefix\",{\"1\":{\"2793\":1,\"6464\":1}}],[\"pre\",{\"1\":{\"2333\":1,\"2337\":1,\"2339\":1,\"3645\":1,\"3649\":1,\"5887\":1,\"5892\":1}}],[\"prehandler\",{\"1\":{\"1198\":1,\"5550\":1}}],[\"predestroy注解的方法\",{\"1\":{\"1187\":1}}],[\"provider\",{\"1\":{\"3197\":1}}],[\"profile\",{\"1\":{\"2132\":1}}],[\"processlist\",{\"0\":{\"3539\":1},\"1\":{\"3540\":1,\"3541\":1,\"4227\":1}}],[\"process\",{\"1\":{\"1860\":1}}],[\"processor三种通道\",{\"1\":{\"4511\":1,\"6130\":1}}],[\"processor\",{\"1\":{\"1839\":1,\"1840\":1,\"6371\":1,\"6372\":1}}],[\"producerid\",{\"1\":{\"6953\":1}}],[\"producerconfig\",{\"1\":{\"1551\":1,\"1564\":1,\"1568\":1}}],[\"producerrecord<>\",{\"1\":{\"1518\":1}}],[\"producerrecord<string\",{\"1\":{\"1518\":1}}],[\"producerrecord<k\",{\"1\":{\"1515\":2}}],[\"producer<string\",{\"1\":{\"1518\":1}}],[\"producer\",{\"1\":{\"1407\":1,\"1437\":1,\"1499\":1,\"1515\":1,\"1518\":2,\"1521\":1,\"1544\":1,\"1547\":1,\"4678\":1}}],[\"project\",{\"0\":{\"7301\":1},\"1\":{\"1294\":1,\"5636\":1}}],[\"proposal\",{\"1\":{\"4604\":1,\"4605\":2,\"6184\":1}}],[\"prop\",{\"1\":{\"1551\":1,\"1564\":1,\"1568\":1}}],[\"props\",{\"1\":{\"1518\":3}}],[\"propagation\",{\"1\":{\"1239\":1,\"1240\":1,\"1241\":1,\"1243\":1,\"1244\":1,\"1245\":1,\"1247\":2,\"5591\":1,\"5592\":1,\"5593\":1,\"5595\":1,\"5596\":1,\"5597\":1,\"5599\":2}}],[\"properties中添加context\",{\"1\":{\"1342\":1,\"5666\":1}}],[\"properties\",{\"1\":{\"1291\":1,\"1383\":1,\"1518\":2,\"5632\":1}}],[\"proper\",{\"1\":{\"787\":2}}],[\"protocol\",{\"1\":{\"7026\":1}}],[\"prototype\",{\"1\":{\"1165\":3,\"1186\":1}}],[\"protected\",{\"1\":{\"431\":1,\"432\":1,\"444\":1,\"5322\":1,\"5323\":1,\"5337\":1}}],[\"programming\",{\"1\":{\"1156\":1,\"5537\":1}}],[\"proxy代理实例\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"proxytest\",{\"1\":{\"3967\":1,\"3979\":1}}],[\"proxy\",{\"1\":{\"899\":1,\"900\":1,\"903\":2,\"911\":2,\"1157\":2,\"3975\":1,\"3977\":1,\"5517\":1,\"5518\":1,\"5521\":2,\"5529\":2,\"5538\":2}}],[\"prio=0\",{\"1\":{\"3527\":11}}],[\"prio=5\",{\"1\":{\"3527\":1}}],[\"priority\",{\"1\":{\"4933\":4,\"4935\":5}}],[\"priority从节点优先级最高\",{\"1\":{\"3217\":1}}],[\"priorityqueue实现了队列接口queue\",{\"1\":{\"768\":1}}],[\"priorityqueue\",{\"0\":{\"767\":1}}],[\"principle\",{\"1\":{\"2538\":1}}],[\"principles\",{\"1\":{\"1310\":1,\"5640\":1}}],[\"printstream\",{\"1\":{\"3527\":9}}],[\"printstacktrace\",{\"1\":{\"489\":1,\"491\":1,\"1515\":1,\"1617\":1,\"4857\":3,\"4986\":1,\"5376\":1,\"5378\":1,\"5651\":1}}],[\"printf\",{\"1\":{\"3525\":1,\"3557\":1}}],[\"println\",{\"1\":{\"250\":4,\"480\":1,\"486\":2,\"634\":2,\"975\":2,\"980\":3,\"993\":8,\"1380\":1,\"1518\":2,\"1544\":1,\"1547\":2,\"1610\":3,\"1613\":3,\"1617\":3,\"2182\":4,\"3527\":1,\"3735\":1,\"3746\":1,\"3772\":2,\"3963\":1,\"3965\":2,\"3975\":2,\"4857\":1,\"4895\":1,\"5966\":1,\"5977\":1}}],[\"private\",{\"1\":{\"787\":1,\"790\":1,\"812\":1,\"816\":2,\"858\":2,\"1047\":1,\"1062\":1,\"1097\":1,\"1256\":2,\"1380\":1,\"1466\":1,\"2177\":3,\"2185\":3,\"2188\":2,\"3772\":1,\"3775\":1,\"3965\":1,\"3975\":1,\"3979\":1,\"4824\":1,\"4857\":17,\"4931\":1,\"4935\":1,\"4972\":1,\"4981\":1,\"4984\":1,\"4986\":1,\"4994\":1,\"4997\":1,\"4999\":7,\"5488\":2,\"5608\":2,\"5650\":1,\"6914\":1}}],[\"passw0rd\",{\"1\":{\"5062\":1}}],[\"password=e10adc3949ba59abbe56e057f20f883e\",{\"1\":{\"5047\":1}}],[\"password=123456\",{\"1\":{\"5041\":1}}],[\"password\",{\"1\":{\"5043\":1,\"5049\":1}}],[\"paxos\",{\"1\":{\"4629\":1,\"6172\":1,\"6174\":1,\"6181\":1}}],[\"paxos是出了名的难懂\",{\"1\":{\"4581\":1}}],[\"paxos这个名词几乎等同于分布式一致性\",{\"1\":{\"4580\":1}}],[\"paxos算法是lamport宗师提出的一种基于消息传递的分布式一致性算法\",{\"1\":{\"4580\":1}}],[\"paxos协议\",{\"0\":{\"4570\":1}}],[\"package\",{\"1\":{\"3855\":1,\"4826\":1,\"4857\":1,\"4860\":1,\"4929\":1,\"4931\":1,\"4933\":1,\"4935\":1,\"4938\":1,\"4974\":1,\"4981\":1,\"4986\":1,\"4992\":1,\"4994\":1,\"4997\":1,\"4999\":1,\"6009\":1}}],[\"pandas\",{\"1\":{\"3517\":1}}],[\"pathvariable\",{\"1\":{\"4123\":1,\"4933\":4,\"4935\":3}}],[\"path\",{\"1\":{\"2096\":1,\"2715\":1,\"4984\":2,\"7010\":1}}],[\"pattern\",{\"1\":{\"852\":1,\"4099\":1,\"5482\":1}}],[\"paging\",{\"1\":{\"1655\":1}}],[\"paginationinnerinterceptor\",{\"1\":{\"1131\":1,\"4860\":2,\"4938\":2}}],[\"page45理解\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"page\",{\"0\":{\"2\":1},\"1\":{\"556\":1,\"558\":1,\"560\":1,\"642\":1,\"711\":1,\"765\":1,\"1656\":1,\"1666\":1,\"1667\":1,\"1668\":1,\"1669\":1,\"1699\":1,\"2143\":1,\"4758\":1,\"4955\":1,\"4963\":1,\"4964\":1,\"4965\":1,\"4999\":2}}],[\"parsearray\",{\"1\":{\"4857\":1,\"4999\":1}}],[\"parseobject\",{\"1\":{\"1380\":1,\"4981\":1,\"4986\":1}}],[\"parkandcheckinterrupt\",{\"1\":{\"3649\":1,\"5892\":1}}],[\"partial\",{\"1\":{\"2198\":1,\"7062\":1}}],[\"partitionassignor接口用于用户定义实现分区分配算法\",{\"1\":{\"1470\":1,\"6918\":1}}],[\"partitionspertopic\",{\"1\":{\"1474\":2,\"6923\":2}}],[\"partitionsfortopic\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"partitions\",{\"1\":{\"1466\":3,\"1474\":3,\"6914\":3,\"6923\":3}}],[\"partition\",{\"1\":{\"1441\":1,\"1442\":3,\"1443\":2,\"1466\":4,\"1518\":1,\"4563\":1,\"4637\":1,\"4641\":1,\"4646\":1,\"4674\":2,\"6163\":1,\"6209\":1,\"6214\":1,\"6219\":1,\"6914\":4,\"7193\":2}}],[\"part\",{\"1\":{\"1466\":2,\"6914\":2}}],[\"parator对象\",{\"1\":{\"724\":1}}],[\"parametertype=\",{\"1\":{\"4748\":1}}],[\"parameters\",{\"1\":{\"3857\":1,\"6011\":1}}],[\"paramvalues\",{\"1\":{\"531\":1,\"5419\":1}}],[\"paramtypes\",{\"1\":{\"531\":1,\"546\":1,\"548\":1,\"5419\":1,\"5425\":2,\"5427\":2}}],[\"param\",{\"1\":{\"507\":3,\"3857\":7,\"4857\":12,\"4910\":2,\"4933\":4,\"4935\":4,\"4979\":2,\"4999\":5,\"5395\":3,\"5651\":2,\"6011\":7}}],[\"parallelgc\",{\"1\":{\"3527\":8}}],[\"parallelgcthreads\",{\"1\":{\"352\":1}}],[\"parallel\",{\"1\":{\"359\":1}}],[\"parent主要有如下作用\",{\"1\":{\"1353\":1,\"5678\":1}}],[\"parent有什么作用\",{\"1\":{\"1352\":1,\"5677\":1}}],[\"parent\",{\"1\":{\"444\":2,\"1353\":1,\"5337\":2,\"5678\":1}}],[\"parents\",{\"1\":{\"442\":1,\"5334\":1}}],[\"parnew\",{\"1\":{\"354\":1}}],[\"penetration\",{\"1\":{\"4151\":1}}],[\"pear\",{\"1\":{\"2182\":1}}],[\"peek\",{\"1\":{\"609\":1,\"782\":1}}],[\"per\",{\"1\":{\"5006\":1}}],[\"periodic\",{\"1\":{\"3527\":1}}],[\"performs\",{\"1\":{\"790\":1}}],[\"perfcounter\",{\"1\":{\"444\":3,\"5337\":3}}],[\"permanently\",{\"1\":{\"2200\":1}}],[\"permanet\",{\"1\":{\"398\":2}}],[\"permgen\",{\"1\":{\"282\":1}}],[\"petenuresizethreshold\",{\"1\":{\"259\":1}}],[\"pcb\",{\"1\":{\"1860\":1,\"1861\":3,\"1862\":1,\"1872\":1,\"1885\":2}}],[\"pc寄存器为什么会被设定为线程私有的\",{\"1\":{\"193\":1}}],[\"pc\",{\"1\":{\"189\":1,\"1493\":1,\"2136\":1,\"3390\":2,\"6946\":1,\"6955\":2}}],[\"中长链接的升级版本\",{\"1\":{\"7066\":1}}],[\"中主要使用\",{\"1\":{\"7063\":1}}],[\"中新加入了大量的状态码\",{\"1\":{\"7062\":1}}],[\"中生成后需要\",{\"1\":{\"6184\":1}}],[\"中更新了\",{\"1\":{\"6180\":1}}],[\"中两次执行相同的\",{\"1\":{\"5713\":1}}],[\"中会维护队列\",{\"1\":{\"6197\":1}}],[\"中会有\",{\"1\":{\"4815\":1,\"7212\":1}}],[\"中会发生数据不一致的问题\",{\"1\":{\"2933\":1,\"6605\":1}}],[\"中带上这个\",{\"1\":{\"4812\":1,\"7209\":1}}],[\"中三个主要的角色\",{\"1\":{\"4631\":1,\"6174\":1}}],[\"中还定义了一个\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"中还存活着的对象一次性复制到另一块\",{\"1\":{\"333\":1}}],[\"中邮消费金融\",{\"0\":{\"4449\":1}}],[\"中邮消费金融面经\",{\"0\":{\"3931\":1}}],[\"中国邮政储蓄银行\",{\"0\":{\"4323\":1,\"7148\":1}}],[\"中午休息一小时\",{\"1\":{\"4321\":1,\"7146\":1}}],[\"中科全安\",{\"0\":{\"4278\":1,\"7103\":1}}],[\"中读取数据返回\",{\"1\":{\"4105\":1}}],[\"中读取数据\",{\"1\":{\"4104\":1}}],[\"中强制线程池不允许使用\",{\"1\":{\"3909\":1,\"6056\":1}}],[\"中实现的\",{\"1\":{\"3787\":1,\"5798\":1}}],[\"中断\",{\"1\":{\"3785\":1,\"5796\":1}}],[\"中自带的threadlocal类正是为了解决这样的问题\",{\"1\":{\"3757\":1,\"5989\":1}}],[\"中最耗\",{\"1\":{\"3558\":1}}],[\"中最小的事务\",{\"1\":{\"3034\":1,\"6701\":1}}],[\"中记录了文件内容所在的\",{\"1\":{\"3489\":1}}],[\"中常用的图形窗口系统\",{\"1\":{\"3451\":1}}],[\"中下拉\",{\"1\":{\"3307\":1}}],[\"中下载镜像\",{\"1\":{\"3302\":1,\"6088\":1}}],[\"中搜索\",{\"1\":{\"3307\":1}}],[\"中缓存大量无效的\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"中去并设置过期时间\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"中应该是replicaof\",{\"1\":{\"3222\":1}}],[\"中任意选择数据淘汰\",{\"1\":{\"3183\":1,\"3185\":1,\"6841\":1,\"6843\":1}}],[\"中挑选最不经常使用的数据淘汰\",{\"1\":{\"3188\":1,\"6846\":1}}],[\"中挑选最近最少使用的数据淘汰\",{\"1\":{\"3181\":1,\"6839\":1}}],[\"中挑选将要过期的数据淘汰\",{\"1\":{\"3182\":1,\"6840\":1}}],[\"中只存\",{\"1\":{\"3179\":1,\"6837\":1}}],[\"中给出的栈溢出的原因是线程请求的栈深度大于虚拟机允许的深度了\",{\"1\":{\"2117\":1}}],[\"中间件\",{\"1\":{\"2068\":1,\"5773\":1}}],[\"中间页目录项\",{\"1\":{\"1668\":1}}],[\"中各个寄存器的值\",{\"1\":{\"1872\":1}}],[\"中苏醒\",{\"1\":{\"1779\":1,\"6275\":1}}],[\"中苏醒一次\",{\"1\":{\"1778\":1,\"6274\":1}}],[\"中包含\",{\"1\":{\"1664\":1}}],[\"中消息的备份又叫做\",{\"1\":{\"1528\":1}}],[\"中获取消息\",{\"1\":{\"1407\":1}}],[\"中代码处理的流程\",{\"1\":{\"1274\":1,\"5616\":1}}],[\"中如果像我们例子里那么处理\",{\"1\":{\"1273\":1,\"5615\":1}}],[\"中了\",{\"1\":{\"1258\":1,\"5610\":1}}],[\"中也是用到了适配器模式适配\",{\"1\":{\"1215\":1,\"5567\":1}}],[\"中也是有区别的\",{\"1\":{\"1009\":1}}],[\"中指定了该\",{\"1\":{\"1186\":2}}],[\"中所有属性值的配置注入\",{\"1\":{\"1171\":1}}],[\"中传递参数也相同即最终执行\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"中增加创建产品的接⼝\",{\"1\":{\"869\":1,\"5499\":1}}],[\"中介者\",{\"1\":{\"854\":1,\"5484\":1}}],[\"中定义的方法\",{\"1\":{\"610\":1}}],[\"中有很多方法\",{\"1\":{\"610\":1}}],[\"中是正确的\",{\"1\":{\"576\":1}}],[\"中查询\",{\"1\":{\"567\":1}}],[\"中内置了三个重要的\",{\"1\":{\"424\":1,\"5315\":1}}],[\"中同样也会经历\",{\"1\":{\"258\":1}}],[\"中\",{\"1\":{\"257\":1,\"302\":1,\"378\":1,\"419\":1,\"422\":1,\"443\":1,\"448\":1,\"1203\":1,\"1212\":1,\"1427\":1,\"1739\":1,\"1796\":1,\"1854\":1,\"1857\":2,\"1872\":1,\"2100\":1,\"2765\":1,\"2797\":1,\"3128\":1,\"3136\":1,\"3155\":1,\"3334\":1,\"3678\":1,\"3740\":1,\"3766\":1,\"4106\":1,\"4593\":1,\"4815\":1,\"4944\":1,\"4945\":1,\"5310\":1,\"5313\":1,\"5336\":1,\"5341\":1,\"5555\":1,\"5564\":1,\"5847\":1,\"5972\":1,\"5997\":1,\"6166\":1,\"6230\":1,\"6233\":2,\"6301\":1,\"6434\":1,\"6469\":1,\"6784\":1,\"6792\":1,\"6811\":1,\"7212\":1}}],[\"中存储着\",{\"1\":{\"210\":1}}],[\"中设置的过期时间大小\",{\"1\":{\"2235\":1}}],[\"中设置了过期时间大小\",{\"1\":{\"2234\":1}}],[\"中设置\",{\"1\":{\"151\":1,\"155\":1,\"1291\":1,\"5264\":1,\"5632\":1}}],[\"中设置页面信息\",{\"1\":{\"117\":1,\"5230\":1}}],[\"中使用日志来记录所有操作\",{\"1\":{\"4586\":1}}],[\"中使用\",{\"1\":{\"44\":1,\"5157\":1}}],[\"中的域名都是用句点来分隔的\",{\"1\":{\"7081\":1}}],[\"中的三个角色\",{\"0\":{\"6173\":1},\"1\":{\"4630\":1}}],[\"中的监视器是什么\",{\"1\":{\"4295\":1,\"7120\":1}}],[\"中的锁是非公平的\",{\"1\":{\"3782\":1,\"5793\":1}}],[\"中的实际值相同时\",{\"1\":{\"3675\":1,\"5844\":1}}],[\"中的指令自动构建镜像\",{\"1\":{\"3316\":1}}],[\"中的修改操作发给从库\",{\"1\":{\"3236\":1}}],[\"中的数据会被频繁被删除\",{\"1\":{\"4669\":1,\"7188\":1}}],[\"中的数据都是热点数据\",{\"1\":{\"3179\":1,\"6837\":1}}],[\"中的数据的命令\",{\"1\":{\"3155\":1,\"6811\":1}}],[\"中的历史版本\",{\"1\":{\"3019\":1,\"6691\":1}}],[\"中的主键索引就属于聚簇索引\",{\"1\":{\"2775\":1,\"2796\":1,\"6444\":1,\"6468\":1}}],[\"中的热点数据\",{\"1\":{\"1704\":1}}],[\"中的事物传播行为\",{\"0\":{\"1236\":1,\"5588\":1}}],[\"中的事务隔离级别\",{\"0\":{\"1229\":1,\"5581\":1}}],[\"中的事务的理解\",{\"0\":{\"1217\":1,\"5569\":1}}],[\"中的模型数据\",{\"1\":{\"1199\":1,\"5551\":1}}],[\"中的回收价值和成本进行排序\",{\"1\":{\"379\":1}}],[\"中的\",{\"0\":{\"571\":1},\"1\":{\"40\":1,\"572\":1,\"579\":1,\"864\":1,\"888\":1,\"894\":1,\"908\":1,\"912\":1,\"1187\":1,\"1211\":1,\"1980\":1,\"1983\":1,\"3028\":1,\"3820\":1,\"3831\":1,\"3837\":1,\"5153\":1,\"5494\":1,\"5506\":1,\"5512\":1,\"5526\":1,\"5530\":1,\"5563\":1,\"5713\":1,\"5938\":1,\"5947\":1,\"5953\":1,\"6186\":1,\"6195\":1,\"6239\":1,\"6242\":1,\"6694\":1}}],[\"中很重要的一个概念\",{\"1\":{\"35\":1,\"5148\":1}}],[\"请参考下列说明\",{\"1\":{\"3406\":1}}],[\"请记住以下等式\",{\"1\":{\"3373\":1}}],[\"请注意\",{\"1\":{\"2715\":1,\"4621\":1,\"6194\":1,\"7010\":1}}],[\"请稍后重试\",{\"1\":{\"2212\":1}}],[\"请求与当前资源的规定冲突\",{\"1\":{\"7062\":1}}],[\"请求服务端并携带\",{\"1\":{\"4816\":1,\"7213\":1}}],[\"请求合并\",{\"1\":{\"4509\":1,\"6130\":1}}],[\"请求缓存\",{\"1\":{\"4509\":1,\"6130\":1}}],[\"请求全部转发到数据库\",{\"1\":{\"4145\":1}}],[\"请求数据库写数据到缓存之前\",{\"1\":{\"3269\":1,\"6874\":1}}],[\"请求的结果\",{\"1\":{\"7058\":1}}],[\"请求的提案\",{\"1\":{\"4623\":1,\"6200\":1}}],[\"请求的\",{\"1\":{\"3265\":1,\"3271\":1,\"3272\":1,\"6870\":1,\"6876\":1,\"6877\":1}}],[\"请求的数据做缓存\",{\"1\":{\"2223\":1}}],[\"请求包中的目标\",{\"1\":{\"2380\":1}}],[\"请求包里的内容\",{\"1\":{\"2380\":1}}],[\"请求时\",{\"1\":{\"2380\":1}}],[\"请求时耗时比较长\",{\"1\":{\"2299\":1}}],[\"请求用独一无二的\",{\"1\":{\"2362\":1}}],[\"请求只能从客户端开始\",{\"1\":{\"2356\":1}}],[\"请求头部中的\",{\"1\":{\"2240\":1,\"2242\":1,\"2243\":1,\"2245\":1}}],[\"请求头部包含\",{\"1\":{\"2086\":1}}],[\"请求保存为书签\",{\"1\":{\"2224\":1}}],[\"请求可以保存为书签\",{\"1\":{\"2223\":1}}],[\"请求\",{\"1\":{\"2099\":1,\"2196\":1,\"2224\":1,\"2290\":1,\"2303\":1,\"2319\":1,\"2352\":1,\"2379\":1,\"2389\":1,\"2719\":1,\"4537\":1,\"4623\":1,\"6153\":1,\"6200\":1,\"7014\":1,\"7073\":1,\"7093\":1}}],[\"请求体中直接包含上传的文件数据\",{\"1\":{\"2093\":1}}],[\"请求体中包含文件二进制数据\",{\"1\":{\"2089\":1}}],[\"请求体中包含要上传的文件数据\",{\"1\":{\"2083\":1}}],[\"请求url为文件上传的接口地址\",{\"1\":{\"2085\":1}}],[\"请求方法为post\",{\"1\":{\"2084\":1}}],[\"请求被\",{\"1\":{\"1196\":1,\"5548\":1}}],[\"请使用绝对链接\",{\"1\":{\"126\":1,\"5239\":1}}],[\"请阅读\",{\"1\":{\"40\":1,\"5153\":1}}],[\"请先阅读\",{\"1\":{\"31\":1,\"5144\":1}}],[\"对称性加密通常在消息发送方需要加密大量数据时使用\",{\"1\":{\"5099\":1}}],[\"对称密码算法又叫传统密码算法\",{\"1\":{\"5092\":1}}],[\"对称加密的缺点\",{\"1\":{\"5100\":1}}],[\"对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性\",{\"1\":{\"5099\":1}}],[\"对称加密优点\",{\"1\":{\"5099\":1}}],[\"对称加密和非对称加密有哪些优缺点\",{\"1\":{\"5089\":1}}],[\"对称加密\",{\"1\":{\"5089\":1}}],[\"对连接后的值进行散列\",{\"1\":{\"5077\":1,\"5083\":1}}],[\"对密码加密\",{\"0\":{\"5038\":1}}],[\"对安全性要求较高的场合\",{\"1\":{\"5036\":1}}],[\"对原文做一丁点儿改动\",{\"1\":{\"5033\":1}}],[\"对原sql通过limit来进行分页的效果\",{\"1\":{\"1118\":1,\"5700\":1}}],[\"对冷数据\",{\"1\":{\"5003\":1,\"7285\":1}}],[\"对加\",{\"1\":{\"4539\":1,\"6155\":1}}],[\"对团队挑战大\",{\"1\":{\"4503\":1,\"6128\":1}}],[\"对面不满意\",{\"1\":{\"4351\":1}}],[\"对工作地点有什么意向\",{\"1\":{\"4445\":1}}],[\"对工作地点的看法\",{\"1\":{\"4326\":1,\"4339\":1,\"7151\":1,\"7164\":1}}],[\"对工作空间内代码的修改可以提交到本地仓库\",{\"1\":{\"3377\":1}}],[\"对未来工作的看法\",{\"1\":{\"4325\":1,\"7150\":1}}],[\"对邮储的看法\",{\"1\":{\"4325\":1,\"7150\":1}}],[\"对年龄排序怎么排\",{\"0\":{\"4270\":1}}],[\"对主键索引的加锁等同于对数据行的加锁\",{\"1\":{\"4224\":1}}],[\"对堆的过程进行扩展\",{\"0\":{\"4212\":1}}],[\"对jvm的理解\",{\"0\":{\"4212\":1}}],[\"对前端了解吗\",{\"0\":{\"4211\":1}}],[\"对变量类型不做限制\",{\"1\":{\"4074\":1}}],[\"对静态资源没有效果\",{\"1\":{\"4040\":1}}],[\"对哪种数据结构印象深刻\",{\"0\":{\"4004\":1}}],[\"对快速定位问题尤为重要\",{\"1\":{\"3560\":1}}],[\"对这个公司有了解吗\",{\"0\":{\"4127\":1}}],[\"对这个信息的解释如下\",{\"1\":{\"3498\":1}}],[\"对这些\",{\"1\":{\"3540\":1}}],[\"对不同的用户有不同的文件权限\",{\"1\":{\"3497\":1}}],[\"对系统中的各种设备和组件进行寻址\",{\"1\":{\"3429\":1}}],[\"对进程进行封装隔离\",{\"1\":{\"3290\":1,\"6079\":1}}],[\"对给定元素再次进行相同的哈希计算\",{\"1\":{\"3261\":1,\"6866\":1}}],[\"对其进行强制硬盘同步\",{\"1\":{\"3162\":1,\"6818\":1}}],[\"对其他事务不可见\",{\"1\":{\"3042\":1,\"6710\":1}}],[\"对其他并发事务是隔离的\",{\"1\":{\"2973\":1,\"6645\":1}}],[\"对读取的记录加独占锁\",{\"1\":{\"2939\":1,\"6611\":1}}],[\"对读取的记录加共享锁\",{\"1\":{\"2939\":1,\"6611\":1}}],[\"对一张表做结构变更操作的时候\",{\"1\":{\"2891\":1,\"6563\":1}}],[\"对一张表进行\",{\"1\":{\"2890\":1,\"6562\":1}}],[\"对一个记录频繁写\",{\"1\":{\"2043\":1,\"5748\":1}}],[\"对表结构的更改操作\",{\"1\":{\"2857\":1,\"6529\":1}}],[\"对每一个可以用到的索引来进行评估\",{\"1\":{\"2834\":1,\"6506\":1}}],[\"对每个页面设置一个\",{\"1\":{\"1745\":1}}],[\"对索引中包含的字段先做判断\",{\"1\":{\"2821\":1,\"6493\":1}}],[\"对排序查找和范围查找优化\",{\"1\":{\"2800\":1,\"6472\":1}}],[\"对文本的内容进行分词\",{\"1\":{\"2773\":1,\"2783\":1,\"6442\":1,\"6452\":1}}],[\"对应的值修改为\",{\"1\":{\"3675\":1,\"5844\":1}}],[\"对应的线程名称为\",{\"1\":{\"3560\":1}}],[\"对应的是\",{\"1\":{\"3265\":1,\"3272\":1,\"6870\":1,\"6877\":1}}],[\"对应的\",{\"1\":{\"2756\":1,\"6425\":1}}],[\"对应的pojo一定要实现serializable\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"对数据进行分析和处理\",{\"1\":{\"4726\":1}}],[\"对数据库造成了巨大的压力\",{\"1\":{\"3247\":1,\"3265\":1,\"3275\":1,\"6852\":1,\"6870\":1,\"6880\":1}}],[\"对数据库sql进行打点统计\",{\"1\":{\"2142\":1}}],[\"对数据的修改就是永久的\",{\"1\":{\"2974\":1,\"6646\":1}}],[\"对数据的修改效果对于引用类型和值类型会不同\",{\"1\":{\"485\":1}}],[\"对数据的增删改操作\",{\"1\":{\"2856\":1,\"6528\":1}}],[\"对卡顿时间段dump线程栈\",{\"1\":{\"2141\":1}}],[\"对的\",{\"1\":{\"1922\":1}}],[\"对长作业有利\",{\"1\":{\"1915\":1}}],[\"对比roundrobinassignor\",{\"1\":{\"1489\":1,\"6941\":1}}],[\"对消费者进行排序\",{\"1\":{\"1474\":1,\"6923\":1}}],[\"对所有请求都拦截\",{\"1\":{\"1401\":1}}],[\"对applicationcontext应用一些相关的后置处理和调用各个applicationcontextinitializer的初始化方法来执行一些初始化逻辑等\",{\"1\":{\"1387\":1}}],[\"对循环依赖的解决也就不会那么陌生了\",{\"1\":{\"1286\":1,\"5628\":1}}],[\"对同一字段的多次读取结果都是一致的\",{\"1\":{\"1234\":1,\"5586\":1}}],[\"对请求消息进行数据格式化\",{\"1\":{\"1202\":1,\"5554\":1}}],[\"对请求消息进行数据转换\",{\"1\":{\"1201\":1,\"5553\":1}}],[\"对请求\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"对该\",{\"1\":{\"1186\":1}}],[\"对外提供⼀个公共的⽅法获取实例\",{\"1\":{\"858\":1,\"5488\":1}}],[\"对外提供⼀个静态公有方法获取实例\",{\"1\":{\"856\":1,\"5486\":1}}],[\"对任何一棵二叉树\",{\"1\":{\"679\":1}}],[\"对类进行link操作\",{\"1\":{\"444\":1,\"5337\":1}}],[\"对象承担所有事件的监听和响应\",{\"1\":{\"6379\":1}}],[\"对象监视器\",{\"1\":{\"5971\":1}}],[\"对象被返回给调用方\",{\"1\":{\"4964\":1}}],[\"对象存储可提供更好的数据保护\",{\"1\":{\"4843\":1,\"7232\":1}}],[\"对象锁或类锁内部有计数器\",{\"1\":{\"3819\":1,\"5937\":1}}],[\"对象锁的的拥有者线程才可以执行\",{\"1\":{\"3743\":1,\"5975\":1}}],[\"对象确实会造成内存泄露\",{\"1\":{\"3773\":1}}],[\"对象调用set方法设置的值\",{\"1\":{\"3769\":1,\"6000\":1}}],[\"对象调用newinstance\",{\"1\":{\"526\":1,\"5414\":1}}],[\"对象为\",{\"1\":{\"3767\":1,\"5998\":1}}],[\"对象id\",{\"1\":{\"3130\":1,\"6786\":1}}],[\"对象引用没有释放\",{\"1\":{\"2116\":1}}],[\"对象分配的连接加入\",{\"1\":{\"1844\":1,\"6386\":1}}],[\"对象将\",{\"1\":{\"1844\":1,\"6386\":1}}],[\"对象中\",{\"1\":{\"4963\":1,\"4965\":1}}],[\"对象中的\",{\"1\":{\"1843\":1,\"6385\":1}}],[\"对象中依赖\",{\"1\":{\"1278\":1,\"5620\":1}}],[\"对象就进行业务处理\",{\"1\":{\"1840\":1,\"6372\":1}}],[\"对象不再负责业务处理\",{\"1\":{\"1839\":1,\"6371\":1}}],[\"对象来进行响应\",{\"1\":{\"1825\":1,\"1837\":1,\"1845\":1,\"6354\":1,\"6369\":1,\"6387\":1}}],[\"对象来处理后续的响应事件\",{\"1\":{\"1824\":1,\"1836\":1,\"6353\":1,\"6368\":1}}],[\"对象进行业务处理\",{\"1\":{\"1839\":1,\"6371\":1}}],[\"对象进行处理\",{\"1\":{\"1824\":1,\"1836\":1,\"6353\":1,\"6368\":1}}],[\"对象进行分页\",{\"1\":{\"1122\":1,\"5704\":1}}],[\"对象还是\",{\"1\":{\"1823\":1,\"1835\":1,\"6352\":1,\"6367\":1}}],[\"对象通过\",{\"1\":{\"1823\":1,\"1826\":1,\"1835\":1,\"1839\":1,\"1843\":1,\"1846\":1,\"6352\":1,\"6355\":1,\"6367\":1,\"6371\":1,\"6385\":1,\"6388\":1}}],[\"对象里的\",{\"1\":{\"1821\":1,\"6350\":1}}],[\"对象的话\",{\"1\":{\"3769\":1,\"6000\":1}}],[\"对象的作用是处理业务\",{\"1\":{\"1820\":1,\"6349\":1}}],[\"对象的作用是获取连接\",{\"1\":{\"1819\":1,\"6348\":1}}],[\"对象的作用是监听和分发事件\",{\"1\":{\"1818\":1,\"6347\":1}}],[\"对象的\",{\"1\":{\"1517\":1}}],[\"对象的形式返回\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"对象保存到缓存中\",{\"1\":{\"1287\":1,\"5629\":1}}],[\"对象对应的拦截器\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"对象以及\",{\"1\":{\"1197\":1,\"5549\":1}}],[\"对象\",{\"1\":{\"419\":1,\"516\":1,\"518\":1,\"520\":1,\"522\":1,\"780\":1,\"864\":1,\"1134\":1,\"1204\":1,\"1209\":1,\"1382\":1,\"1386\":1,\"1517\":1,\"1823\":1,\"1835\":1,\"1840\":1,\"3588\":1,\"3783\":1,\"5310\":1,\"5404\":1,\"5406\":1,\"5408\":1,\"5410\":1,\"5494\":1,\"5556\":1,\"5561\":1,\"5713\":1,\"5794\":1,\"6352\":1,\"6367\":1,\"6372\":1}}],[\"对象只能放入老年代\",{\"1\":{\"404\":1}}],[\"对象会调用当前连接对应的\",{\"1\":{\"1845\":1,\"6387\":1}}],[\"对象会通过\",{\"1\":{\"1824\":1,\"1836\":1,\"6353\":1,\"6368\":1}}],[\"对象会直接被分配到老年代\",{\"1\":{\"259\":1}}],[\"对象会被优先分配到新生代的\",{\"1\":{\"254\":1}}],[\"对象年龄都会+1\",{\"1\":{\"258\":1}}],[\"对象在业务处理时\",{\"1\":{\"1830\":1,\"6359\":1}}],[\"对象在\",{\"1\":{\"258\":1}}],[\"对象实例\",{\"1\":{\"242\":1}}],[\"对于很多网站来说\",{\"1\":{\"6980\":1,\"7003\":1}}],[\"对于每个pid发送数据的每个topic都对应一个从0开始单调递增的sn值\",{\"1\":{\"6953\":1}}],[\"对于每一个topic\",{\"1\":{\"1472\":1,\"6920\":1}}],[\"对于命令的处理是单进程的方案\",{\"1\":{\"6361\":1}}],[\"对于就绪的事件\",{\"1\":{\"6270\":1}}],[\"对于基本类型和string来说都是没有影响的\",{\"1\":{\"5112\":1}}],[\"对于数据丢失不敏感\",{\"1\":{\"4887\":1,\"7265\":1}}],[\"对于变量存在多线程并发竞争\",{\"1\":{\"4805\":1,\"7202\":1}}],[\"对于收到的事务请求会转发给leader\",{\"1\":{\"4602\":2}}],[\"对于取得的最终效果讲一下\",{\"1\":{\"4350\":1}}],[\"对于store\",{\"1\":{\"3718\":1,\"5917\":1}}],[\"对于load\",{\"1\":{\"3717\":1,\"5916\":1}}],[\"对于其他线程是不见的\",{\"1\":{\"3709\":1,\"5909\":1}}],[\"对于这个问题来说\",{\"1\":{\"3242\":1}}],[\"对于当前事务也是不可见的\",{\"1\":{\"3035\":1,\"6702\":1}}],[\"对于频繁被连接查询的字段\",{\"1\":{\"2828\":1,\"6500\":1}}],[\"对于外键列并不一定要建立外键\",{\"1\":{\"2828\":1,\"6500\":1}}],[\"对于传统的网站改进不明显\",{\"1\":{\"2370\":1}}],[\"对于无状态的问题\",{\"1\":{\"2277\":1}}],[\"对于上传文件\",{\"1\":{\"2083\":1}}],[\"对于支持网卡支持\",{\"1\":{\"1802\":1,\"6308\":1}}],[\"对于单页表的实现方式\",{\"1\":{\"1663\":1}}],[\"对于单个\",{\"1\":{\"347\":1}}],[\"对于那些没有被经常使用到的内存\",{\"1\":{\"1636\":1}}],[\"对于mq\",{\"1\":{\"1427\":1}}],[\"对于异步方法调用\",{\"1\":{\"1371\":1}}],[\"对于一个userdao接口\",{\"1\":{\"1094\":1}}],[\"对于一个负数取模还是有些麻烦的\",{\"1\":{\"1044\":1}}],[\"对于一个默认的hashmap来说\",{\"1\":{\"991\":1}}],[\"对于一个类加载器来说\",{\"1\":{\"422\":1,\"5313\":1}}],[\"对于我们理解和学习各种框架的原理也非常有帮助\",{\"1\":{\"896\":1,\"5514\":1}}],[\"对于arraylist\",{\"1\":{\"746\":1}}],[\"对于二叉搜索树\",{\"1\":{\"691\":1,\"5458\":1}}],[\"对于队列\",{\"1\":{\"633\":1}}],[\"对于链表来说\",{\"1\":{\"632\":1}}],[\"对于已经正式发布的代码\",{\"1\":{\"596\":1}}],[\"对于已经加载的类会被放在\",{\"1\":{\"422\":1,\"5313\":1}}],[\"对于现实中并不存在的设计对象\",{\"1\":{\"590\":1}}],[\"对于任意一个对象\",{\"1\":{\"500\":1,\"5387\":1}}],[\"对于任意一个类\",{\"1\":{\"500\":1,\"5387\":1}}],[\"对于大多数应用\",{\"1\":{\"222\":1}}],[\"对于\",{\"1\":{\"126\":1,\"1665\":1,\"1769\":1,\"1904\":1,\"2797\":1,\"2819\":1,\"2870\":1,\"3015\":1,\"3016\":1,\"3017\":1,\"3773\":1,\"5239\":1,\"6469\":1,\"6491\":1,\"6542\":1,\"6687\":1,\"6688\":1,\"6689\":1}}],[\"对\",{\"1\":{\"39\":1,\"272\":1,\"1182\":1,\"2477\":1,\"3780\":1,\"4534\":1,\"4953\":1,\"5152\":1,\"5791\":1}}],[\"为短连接\",{\"1\":{\"7061\":1}}],[\"为该映射关系的生存周期\",{\"1\":{\"7028\":1}}],[\"为变量设置threadlocal\",{\"1\":{\"4807\":1,\"7204\":1}}],[\"为客户端提供读取服务\",{\"1\":{\"4602\":2}}],[\"为客户端提供读写服务\",{\"1\":{\"4602\":1}}],[\"为我们提供了自定义缓存\",{\"1\":{\"5722\":1}}],[\"为我们提供了高可用\",{\"1\":{\"4560\":1,\"6160\":1}}],[\"为我们调试工作带了极大的便利性\",{\"1\":{\"2281\":1}}],[\"为微服务架构提供了非常完整的支持\",{\"1\":{\"4494\":1,\"6126\":1}}],[\"为不同的目标对象生成代理实例\",{\"1\":{\"3954\":1}}],[\"为数据刷新间隔的毫秒数\",{\"1\":{\"3609\":1}}],[\"为进程id\",{\"1\":{\"3609\":1}}],[\"为空\",{\"1\":{\"3034\":1,\"6701\":1}}],[\"为何能够通过\",{\"1\":{\"2756\":1,\"6425\":1}}],[\"为啥不可能选择\",{\"1\":{\"4649\":1,\"6222\":1}}],[\"为啥叫权威呢\",{\"1\":{\"2394\":1,\"7098\":1}}],[\"为啥要定义这两个变量\",{\"1\":{\"972\":1}}],[\"为此\",{\"1\":{\"1443\":1}}],[\"为实现数据备份的功能\",{\"1\":{\"1443\":1}}],[\"为刚创建的容器对象做一些初始化工作\",{\"1\":{\"1387\":1}}],[\"为需要拦截的接口生成代理对象以实现接口方法拦截功能\",{\"1\":{\"1128\":1,\"5709\":1}}],[\"为支持每一种组合将产生大量的子类\",{\"1\":{\"878\":1}}],[\"为o\",{\"1\":{\"722\":1,\"756\":1,\"757\":1,\"763\":1,\"771\":2,\"772\":1,\"955\":1,\"1086\":1}}],[\"为\",{\"1\":{\"444\":1,\"1134\":1,\"2093\":1,\"2953\":1,\"3034\":1,\"3413\":1,\"3553\":1,\"4616\":1,\"4627\":1,\"4903\":1,\"5337\":1,\"5713\":2,\"6189\":1,\"6205\":1,\"6625\":1,\"6701\":1,\"7273\":1}}],[\"为类的二进制名称\",{\"1\":{\"431\":1,\"5322\":1}}],[\"为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知\",{\"1\":{\"320\":1}}],[\"为什么选用redis作为消息队列\",{\"1\":{\"4882\":1,\"7260\":1}}],[\"为什么redis中使用两种数据类型\",{\"1\":{\"4873\":1,\"7251\":1}}],[\"为什么任务需要存储在数据库中\",{\"1\":{\"4871\":1,\"7249\":1}}],[\"为什么就要使用spring\",{\"1\":{\"4491\":1,\"6124\":1}}],[\"为什么考虑转开发\",{\"1\":{\"4451\":1}}],[\"为什么想来广州\",{\"0\":{\"4013\":1}}],[\"为什么不需要预加载\",{\"1\":{\"4875\":1,\"7253\":1}}],[\"为什么不推荐使用内置线程池\",{\"0\":{\"3905\":1,\"6052\":1}}],[\"为什么不改\",{\"0\":{\"595\":1}}],[\"为什么会出现误判的情况呢\",{\"1\":{\"3256\":1,\"6861\":1}}],[\"为什么这么快\",{\"0\":{\"3088\":1,\"6744\":1}}],[\"为什么这里不像上面那样\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"为什么叫当前读\",{\"1\":{\"3022\":1}}],[\"为什么叫控制反转\",{\"1\":{\"1159\":1,\"5540\":1}}],[\"为什么线程\",{\"1\":{\"2902\":1,\"6574\":1}}],[\"为什么挥手需要四次\",{\"1\":{\"2421\":1}}],[\"为什么每次建立\",{\"1\":{\"2412\":1}}],[\"为什么是三次握手\",{\"1\":{\"2411\":1}}],[\"为什么需要http\",{\"1\":{\"6972\":1,\"6997\":1}}],[\"为什么需要红黑树\",{\"0\":{\"5457\":1}}],[\"为什么需要\",{\"1\":{\"2402\":1,\"2427\":1}}],[\"为什么需要虚拟内存\",{\"0\":{\"1628\":1}}],[\"为什么现在广泛使用的还是http1\",{\"1\":{\"2367\":1}}],[\"为什么呢\",{\"1\":{\"2303\":1,\"3907\":1,\"4582\":1,\"6054\":1}}],[\"为什么可以使用位运算\",{\"1\":{\"1018\":1}}],[\"为什么单链表转为红黑树要求桶内的元素个数大于8\",{\"0\":{\"928\":1,\"5445\":1}}],[\"为什么数组容量必须是2次幂\",{\"0\":{\"926\":1,\"5443\":1}}],[\"为什么在长度小于8时使用链表\",{\"0\":{\"922\":1,\"5439\":1}}],[\"为什么jdk1\",{\"0\":{\"917\":1,\"920\":1,\"5434\":1,\"5437\":1}}],[\"为什么java\",{\"1\":{\"806\":1}}],[\"为什么要保证顺序\",{\"0\":{\"6957\":1}}],[\"为什么要对密码加密\",{\"1\":{\"5040\":1}}],[\"为什么要设置奇数个结点\",{\"1\":{\"4621\":1,\"6194\":1}}],[\"为什么要用线程池\",{\"0\":{\"3848\":1,\"6002\":1}}],[\"为什么要分区\",{\"1\":{\"1458\":1,\"6906\":1}}],[\"为什么要使用红黑树而不使用avl树\",{\"0\":{\"924\":1,\"5441\":1}}],[\"为什么要进⾏双重判断\",{\"1\":{\"859\":1,\"5489\":1}}],[\"为什么要有\",{\"0\":{\"270\":1}}],[\"为什么\",{\"0\":{\"784\":1,\"2566\":1},\"1\":{\"628\":1,\"2414\":1,\"2426\":1,\"2512\":1,\"2514\":1,\"2757\":1,\"4361\":1,\"6426\":1}}],[\"为什么使用接口\",{\"0\":{\"599\":1}}],[\"为什么使用pc寄存器记录当前线程的执行地址呢\",{\"1\":{\"191\":1}}],[\"为对象分配内存是一件非常严谨和复杂的任务\",{\"1\":{\"261\":1}}],[\"为了达成这一目标\",{\"1\":{\"7035\":1}}],[\"为了加快检索\",{\"1\":{\"4409\":1}}],[\"为了避免出现内存泄露的情况\",{\"1\":{\"3774\":1}}],[\"为了避免之前数据的影响\",{\"1\":{\"3235\":1}}],[\"为了方便起见\",{\"1\":{\"3373\":1}}],[\"为了从镜像创建容器\",{\"1\":{\"3318\":1}}],[\"为了在\",{\"1\":{\"2668\":1}}],[\"为了安全性\",{\"1\":{\"2563\":1}}],[\"为了防止阻塞\",{\"1\":{\"4876\":1,\"7254\":1}}],[\"为了防止历史报文被下一个相同四元组的连接接收\",{\"1\":{\"2562\":1}}],[\"为了防止多进程竞争共享资源\",{\"1\":{\"1962\":1}}],[\"为了检验对这些知识掌握的深度\",{\"1\":{\"2399\":1}}],[\"为了克服这个缺点\",{\"1\":{\"1970\":1,\"6251\":1}}],[\"为了完全实现\",{\"1\":{\"1735\":1}}],[\"为了提升数据库的读写性能\",{\"1\":{\"1708\":1}}],[\"为了提高哈希的效率\",{\"1\":{\"1079\":1}}],[\"为了保证\",{\"1\":{\"4649\":1,\"6222\":1}}],[\"为了保证数据的并发安全\",{\"1\":{\"3836\":1,\"5952\":1}}],[\"为了保证主从库的数据一致性\",{\"1\":{\"3235\":1}}],[\"为了保证相同的键\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"为了保证哈希的结果可以分散\",{\"1\":{\"1079\":1}}],[\"为了实现进程\",{\"1\":{\"1986\":1,\"6245\":1}}],[\"为了实现\",{\"1\":{\"1442\":1}}],[\"为了按键有序\",{\"1\":{\"1085\":1}}],[\"为了解决该问题\",{\"1\":{\"4820\":1,\"4967\":1}}],[\"为了解决上述\",{\"1\":{\"2293\":1}}],[\"为了解决这种现象发生\",{\"1\":{\"2661\":1}}],[\"为了解决这种数据倾斜问题\",{\"1\":{\"2035\":1}}],[\"为了解决这种情况\",{\"1\":{\"2012\":1}}],[\"为了解决这个问题\",{\"1\":{\"907\":1,\"2316\":1,\"5525\":1}}],[\"为了解决在频繁冲突时hashmap性能降低的问题\",{\"1\":{\"1065\":1}}],[\"为了考虑性能\",{\"1\":{\"1031\":1}}],[\"为了有序\",{\"1\":{\"724\":1}}],[\"为了修正这个问题\",{\"1\":{\"613\":1}}],[\"为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录\",{\"1\":{\"378\":1}}],[\"为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录\",{\"1\":{\"365\":1}}],[\"为了进行高效的垃圾回收\",{\"1\":{\"223\":1}}],[\"为了能够准确的记录各个线程正在执行的当前字节码指令地址\",{\"1\":{\"194\":1}}],[\"为了丰富文档写作\",{\"1\":{\"39\":1,\"5152\":1}}],[\"为每个频道缓存30条分值较高的文章\",{\"1\":{\"4999\":3}}],[\"为每个topic维护了一个atomicinteger对象\",{\"1\":{\"1466\":1,\"6914\":1}}],[\"为每个dao接口生成代理对象\",{\"1\":{\"1101\":1}}],[\"为每个已加载的类型\",{\"1\":{\"288\":1}}],[\"为每个线程分配了一个私有缓存区域\",{\"1\":{\"272\":1}}],[\"为每个\",{\"1\":{\"33\":1,\"5146\":1}}],[\"是运行在\",{\"1\":{\"7078\":1}}],[\"是运算符\",{\"1\":{\"4190\":1}}],[\"是前提\",{\"1\":{\"4646\":1,\"6219\":1}}],[\"是会根据\",{\"1\":{\"4599\":1,\"6183\":1}}],[\"是会被阻塞的\",{\"1\":{\"2882\":1,\"2958\":1,\"6554\":1,\"6630\":1}}],[\"是协调服务的典型场景\",{\"1\":{\"4561\":1,\"6161\":1}}],[\"是协议处理中的一种中间状态\",{\"1\":{\"2194\":1}}],[\"是考研到这个学校的吗\",{\"1\":{\"4360\":1}}],[\"是怎么实现的\",{\"1\":{\"4331\":1,\"7156\":1}}],[\"是怎么对这批\",{\"1\":{\"3171\":1,\"6829\":1}}],[\"是具体做了什么\",{\"0\":{\"4230\":1}}],[\"是我们平时使用比较多的一个缓存读写模式\",{\"1\":{\"4099\":1}}],[\"是cas操作的核心\",{\"1\":{\"3826\":1,\"5943\":1}}],[\"是比较并交换的意思\",{\"1\":{\"3667\":1,\"5830\":1}}],[\"是将每条请求共享资源的线程封装成一个\",{\"1\":{\"3643\":1,\"5884\":1}}],[\"是将某个文件加入版本控制\",{\"1\":{\"3361\":1}}],[\"是两个最受欢迎的桌面环境\",{\"1\":{\"3454\":1}}],[\"是世界领先的软件容器平台\",{\"1\":{\"3289\":1,\"6078\":1}}],[\"是每个\",{\"1\":{\"3233\":1}}],[\"是每个快照读都会生成并获取最新的read\",{\"1\":{\"3058\":1}}],[\"是大于等于哨兵配置文件中的\",{\"1\":{\"3207\":1}}],[\"是安全的\",{\"1\":{\"3103\":1,\"6759\":1}}],[\"是悲观锁的实现\",{\"1\":{\"3025\":1}}],[\"是查询不出来这条数据的\",{\"1\":{\"3012\":1,\"6684\":1}}],[\"是通过\",{\"1\":{\"3012\":1,\"3013\":1,\"6684\":1,\"6685\":1}}],[\"是通过索引访问的\",{\"1\":{\"288\":1}}],[\"是还没提交事务的\",{\"1\":{\"2984\":1,\"6656\":1}}],[\"是包含间隙锁+记录锁的\",{\"1\":{\"2958\":1,\"6630\":1}}],[\"是性能最高的方式\",{\"1\":{\"2933\":1,\"6605\":1}}],[\"是无锁的\",{\"1\":{\"2910\":1,\"6582\":1}}],[\"是无法保证原子性的\",{\"1\":{\"3695\":1,\"5864\":1}}],[\"是无法定位到业务代码的\",{\"1\":{\"3560\":1}}],[\"是无法读出一个有效的用户消息的\",{\"1\":{\"2459\":1}}],[\"是无法做数据分片的\",{\"1\":{\"2075\":1,\"5780\":1}}],[\"是在\",{\"1\":{\"3679\":1,\"5848\":1}}],[\"是在事务提交后才会释放\",{\"1\":{\"2896\":1,\"6568\":1}}],[\"是在return前还是return后\",{\"1\":{\"483\":1}}],[\"是为了保证当用户对表执行\",{\"1\":{\"2892\":1,\"6564\":1}}],[\"是为了区分同一个主机上不同应用程序的数据包\",{\"1\":{\"2518\":1}}],[\"是目前搜索引擎数据库使用的一种技术\",{\"1\":{\"2794\":1,\"6465\":1}}],[\"是因为要跟\",{\"1\":{\"3361\":1}}],[\"是因为二级索引的叶子节点存储的数据是主键\",{\"1\":{\"2789\":1,\"6459\":1}}],[\"是因理想情况下一个bin中元素个数达到6的概率是0\",{\"1\":{\"930\":1,\"5447\":1}}],[\"是数据表的主键\",{\"1\":{\"2767\":1,\"6436\":1}}],[\"是恢复为\",{\"1\":{\"2694\":1}}],[\"是约等于的关系\",{\"1\":{\"2670\":1}}],[\"是面向连接\",{\"1\":{\"2504\":1}}],[\"是面向连接的传输层协议\",{\"1\":{\"2483\":1,\"4258\":1}}],[\"是面向连接的\",{\"1\":{\"2455\":1}}],[\"是有边界的\",{\"1\":{\"2499\":1}}],[\"是有能力在数组中的任何位置添加或者删除元素的\",{\"1\":{\"575\":1}}],[\"是流式传输\",{\"1\":{\"2498\":1}}],[\"是尽最大努力交付\",{\"1\":{\"2490\":1,\"4265\":1}}],[\"是可靠交付数据的\",{\"1\":{\"2489\":1,\"4264\":1}}],[\"是可方便阅读的\",{\"1\":{\"2281\":1}}],[\"是啥\",{\"1\":{\"2389\":1,\"7093\":1}}],[\"是字节流协议\",{\"1\":{\"2366\":1}}],[\"是基于numpy\",{\"1\":{\"3517\":1}}],[\"是基于提高并发性能的考虑\",{\"1\":{\"3024\":1}}],[\"是基于\",{\"1\":{\"2366\":1,\"3740\":1,\"5972\":1,\"7071\":1}}],[\"是指在同一个线程在调外层方法获取锁的时候\",{\"1\":{\"3818\":1,\"5936\":1}}],[\"是指定origin为默认主分支\",{\"1\":{\"3387\":1}}],[\"是指事务操作前和操作后\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"是指请求方法不会\",{\"1\":{\"2220\":1}}],[\"是指需要大量连续内存空间的java对象\",{\"1\":{\"406\":1}}],[\"是个笼统通用的错误码\",{\"1\":{\"2209\":1}}],[\"是应用于\",{\"1\":{\"2198\":1}}],[\"是最常见的成功状态码\",{\"1\":{\"2196\":1}}],[\"是超文本传输协议\",{\"1\":{\"2192\":1,\"2306\":1}}],[\"是否相等\",{\"1\":{\"5084\":1}}],[\"是否开启access\",{\"1\":{\"5017\":1}}],[\"是否同意更新\",{\"1\":{\"4597\":1,\"6181\":1}}],[\"是否存在内存泄漏或溢出\",{\"1\":{\"4220\":1}}],[\"是否存在死锁或等待资源等\",{\"1\":{\"2141\":1}}],[\"是否会dubbo\",{\"0\":{\"3981\":1}}],[\"是否合法\",{\"1\":{\"3253\":1,\"6858\":1}}],[\"是否大于等于\",{\"1\":{\"3053\":1}}],[\"是否在活跃事务之中\",{\"1\":{\"3048\":1}}],[\"是否支持\",{\"1\":{\"2745\":1,\"6414\":1}}],[\"是否支持数据库异常崩溃后的安全恢复\",{\"1\":{\"2742\":1,\"6411\":1}}],[\"是否支持外键\",{\"1\":{\"2738\":1,\"6407\":1}}],[\"是否支持事务\",{\"1\":{\"2735\":1,\"6404\":1}}],[\"是否支持行级锁\",{\"1\":{\"2732\":1,\"6401\":1}}],[\"是否变化了\",{\"1\":{\"2247\":1}}],[\"是否需要查询如此大的对象\",{\"1\":{\"2121\":1}}],[\"是否有效再进行处理\",{\"1\":{\"5004\":1,\"7286\":1}}],[\"是否有异常进程占用cpu\",{\"1\":{\"4219\":1}}],[\"是否有事务已经对表加上了\",{\"1\":{\"2904\":1,\"6576\":1}}],[\"是否有大量循环或死循环\",{\"1\":{\"2117\":1}}],[\"是否有递归调用\",{\"1\":{\"2117\":1}}],[\"是否只读\",{\"1\":{\"1141\":1,\"5720\":1}}],[\"是要优先保证\",{\"1\":{\"2076\":1,\"5781\":1}}],[\"是先尝试获取资源\",{\"1\":{\"1999\":1}}],[\"是这种机制\",{\"1\":{\"1983\":1,\"6242\":1}}],[\"是随进程的创建而建立\",{\"1\":{\"1958\":1}}],[\"是进程存在的唯一标识\",{\"1\":{\"1861\":1}}],[\"是用\",{\"1\":{\"3642\":1,\"5883\":1}}],[\"是用十六进制显示的\",{\"1\":{\"3556\":1}}],[\"是用户访问的数据既不在缓存当中\",{\"1\":{\"4151\":1}}],[\"是用户与操作系统交互的命令行解释器\",{\"1\":{\"3445\":1}}],[\"是用户空间\",{\"1\":{\"1689\":1}}],[\"是用来控制选择用\",{\"1\":{\"2927\":1,\"6599\":1}}],[\"是用进程控制块\",{\"1\":{\"1860\":1}}],[\"是分发事件操作\",{\"1\":{\"1821\":1,\"6350\":1}}],[\"是需要完成的操作\",{\"1\":{\"1821\":1,\"6350\":1}}],[\"是系统调用函数\",{\"1\":{\"1821\":1,\"6350\":1}}],[\"是如何获取网络事件的呢\",{\"1\":{\"6262\":1}}],[\"是如何进行初始化选举的\",{\"1\":{\"4614\":1,\"6187\":1}}],[\"是如何进行分页的\",{\"0\":{\"1120\":1,\"5702\":1}}],[\"是如何随机产生的\",{\"0\":{\"2564\":1},\"1\":{\"2413\":1}}],[\"是如何建立连接的\",{\"0\":{\"2310\":1}}],[\"是如何避免预读失效带来的影响\",{\"0\":{\"1700\":1,\"1709\":1}}],[\"是符合我们上面提到的时间局部性\",{\"1\":{\"1626\":1}}],[\"是不是把t1p1交给c1消费能更加的均衡呢\",{\"1\":{\"6935\":1}}],[\"是不是把t1的p1交给c1消费能更加的均衡呢\",{\"1\":{\"1483\":1}}],[\"是不是也需要\",{\"1\":{\"6180\":1}}],[\"是不合理的\",{\"1\":{\"3247\":1,\"6852\":1}}],[\"是不影响其他消费者购买的\",{\"1\":{\"2973\":1,\"6645\":1}}],[\"是不会加行级锁的\",{\"1\":{\"2910\":1,\"6582\":1}}],[\"是不需要连接\",{\"1\":{\"2484\":1,\"4259\":1}}],[\"是不能自动唤醒的\",{\"1\":{\"1857\":1,\"6233\":1}}],[\"是不能解决循环依赖的问题的\",{\"1\":{\"1274\":1,\"5616\":1}}],[\"是消息内容是有序的\",{\"1\":{\"1442\":1}}],[\"是阿里出品的\",{\"1\":{\"1433\":1,\"4761\":1}}],[\"是下游的事\",{\"1\":{\"1410\":1}}],[\"是servlet的监听器\",{\"1\":{\"1340\":1,\"5664\":1}}],[\"是必须的\",{\"1\":{\"1287\":1,\"5629\":1}}],[\"是多个\",{\"1\":{\"1136\":1,\"5715\":1}}],[\"是对数据访问逻辑的抽象\",{\"1\":{\"1092\":1}}],[\"是什么玩意\",{\"1\":{\"6195\":1}}],[\"是什么\",{\"0\":{\"2191\":1}}],[\"是什么意思呢\",{\"1\":{\"1017\":1}}],[\"是什么类\",{\"1\":{\"573\":1}}],[\"是16\",{\"1\":{\"978\":1}}],[\"是⼀种结构性模式\",{\"1\":{\"885\":1,\"5503\":1}}],[\"是list\",{\"1\":{\"742\":1}}],[\"是哈希表实现的\",{\"1\":{\"736\":1}}],[\"是二叉树实现的\",{\"1\":{\"735\":1}}],[\"是二叉树的根\",{\"1\":{\"682\":1}}],[\"是树的整体性质\",{\"1\":{\"672\":1}}],[\"是相对定义的\",{\"1\":{\"656\":1}}],[\"是n\",{\"1\":{\"645\":1}}],[\"是非常慢的\",{\"1\":{\"632\":1}}],[\"是继承了\",{\"1\":{\"620\":1}}],[\"是双端队列的意思\",{\"1\":{\"615\":1}}],[\"是一款程序员可以嵌入他们所开发产品的组件\",{\"1\":{\"4840\":1,\"7229\":1}}],[\"是一款模板引擎\",{\"1\":{\"4840\":1,\"7229\":1}}],[\"是一定要满足的\",{\"1\":{\"4647\":1,\"6220\":1}}],[\"是一件非常困难的事\",{\"1\":{\"4485\":1,\"6118\":1}}],[\"是一家做云计算\",{\"1\":{\"4128\":1}}],[\"是一条\",{\"1\":{\"3678\":1,\"3699\":1,\"5847\":1,\"5868\":1}}],[\"是一项独立的容器管理包\",{\"1\":{\"3305\":1,\"6091\":1}}],[\"是一直持有的\",{\"1\":{\"2896\":1,\"6568\":1}}],[\"是一对一的两点服务\",{\"1\":{\"2486\":1,\"4261\":1}}],[\"是一种设计思想\",{\"1\":{\"5539\":1}}],[\"是一种系统原语\",{\"1\":{\"3678\":1,\"5847\":1}}],[\"是一种空间高效的数据结构\",{\"1\":{\"2148\":1}}],[\"是一种高效的查找树\",{\"1\":{\"689\":1,\"5456\":1}}],[\"是一致的\",{\"1\":{\"605\":1}}],[\"是一个声明web服务客户端\",{\"1\":{\"6149\":1}}],[\"是一个声明rest服务客户端\",{\"1\":{\"4532\":1}}],[\"是一个接口\",{\"1\":{\"4941\":1}}],[\"是一个基于\",{\"1\":{\"4939\":1}}],[\"是一个新闻资讯类项目\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"是一个非拜占庭的一致性算法\",{\"1\":{\"4589\":1}}],[\"是一个开源的分布式协调服务\",{\"1\":{\"4559\":1,\"6159\":1}}],[\"是一个可重入且独占式的锁\",{\"1\":{\"3785\":1,\"5796\":1}}],[\"是一个可改变大小的数组\",{\"1\":{\"777\":1}}],[\"是一个文本文件\",{\"1\":{\"3316\":1}}],[\"是一个包一个包的发送\",{\"1\":{\"2499\":1}}],[\"是一个包装类\",{\"1\":{\"744\":1}}],[\"是一个工作在传输层的可靠数据传输的服务\",{\"1\":{\"2453\":1}}],[\"是一个绝对时间\",{\"1\":{\"2231\":1}}],[\"是一个相对时间\",{\"1\":{\"2230\":1}}],[\"是一个双链表\",{\"1\":{\"778\":1}}],[\"是一个集合接口\",{\"1\":{\"742\":1}}],[\"是一个\",{\"1\":{\"581\":1,\"3298\":1,\"6083\":1}}],[\"是发动机这个类的对象\",{\"1\":{\"585\":1}}],[\"是被业界一直认为非常糟糕的实现\",{\"1\":{\"579\":1}}],[\"是的\",{\"1\":{\"566\":1}}],[\"是runtimeexception以外的异常\",{\"1\":{\"462\":1,\"5357\":1}}],[\"是由\",{\"1\":{\"418\":1,\"2715\":1,\"5309\":1,\"6361\":1,\"7010\":1}}],[\"是方法区的一部分\",{\"1\":{\"281\":1}}],[\"是所有线程共享的内存区域\",{\"1\":{\"279\":1}}],[\"是java虚拟机中的一块线程私有的内存空间\",{\"1\":{\"271\":1}}],[\"是线程私有的\",{\"1\":{\"197\":1}}],[\"是\",{\"1\":{\"35\":1,\"282\":1,\"287\":1,\"351\":1,\"357\":1,\"359\":1,\"629\":1,\"1282\":1,\"2715\":1,\"2730\":1,\"2759\":1,\"2821\":1,\"2956\":1,\"3451\":1,\"3560\":1,\"3685\":1,\"3699\":1,\"3779\":2,\"4314\":1,\"4534\":1,\"4939\":1,\"5148\":1,\"5624\":1,\"5790\":2,\"5854\":1,\"5868\":1,\"6282\":1,\"6399\":1,\"6428\":1,\"6493\":1,\"6628\":1,\"7010\":1,\"7050\":1,\"7139\":1}}],[\"和接收主机\",{\"1\":{\"7045\":1}}],[\"和接收窗口\",{\"1\":{\"2670\":1}}],[\"和处理资源池这两个核心部分组成\",{\"1\":{\"6321\":1}}],[\"和介绍\",{\"1\":{\"6174\":1}}],[\"和一开始选举一样\",{\"1\":{\"4620\":1,\"6193\":1}}],[\"和一个\",{\"1\":{\"2601\":1}}],[\"和列表\",{\"1\":{\"4088\":1}}],[\"和$的区别\",{\"0\":{\"4069\":1}}],[\"和其他的几个策略不同\",{\"1\":{\"3874\":1,\"6029\":1}}],[\"和非公平锁\",{\"1\":{\"3787\":1,\"5798\":1}}],[\"和非活跃\",{\"1\":{\"1701\":1}}],[\"和系统内存使用率都不高\",{\"1\":{\"3619\":1}}],[\"和系统内存情况是无法排查出问题原因的\",{\"1\":{\"3619\":1}}],[\"和类装载活动的信息\",{\"1\":{\"3608\":1}}],[\"和read\",{\"1\":{\"3468\":1}}],[\"和历史记录区\",{\"1\":{\"3355\":1}}],[\"和内存地址\",{\"1\":{\"3674\":1,\"3675\":1,\"5842\":1,\"5844\":1}}],[\"和内存来执行任务\",{\"1\":{\"3314\":1}}],[\"和内存用来对外提供服务\",{\"1\":{\"2273\":1}}],[\"和传统虚拟化方式的不同之处\",{\"1\":{\"3310\":1}}],[\"和容器\",{\"1\":{\"3295\":1}}],[\"和从库通信也好\",{\"1\":{\"3240\":1}}],[\"和主库目前的复制进度\",{\"1\":{\"3233\":1}}],[\"和复制进度\",{\"1\":{\"3233\":1}}],[\"和每个从库建立连接\",{\"1\":{\"3201\":1}}],[\"和我们认识的\",{\"1\":{\"3100\":1,\"6756\":1}}],[\"和用户\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"和独占表锁\",{\"1\":{\"2913\":1,\"6585\":1}}],[\"和回滚\",{\"1\":{\"2737\":1,\"6406\":1}}],[\"和表级锁\",{\"1\":{\"2733\":1,\"6402\":1}}],[\"和端口是可变的\",{\"1\":{\"2475\":1}}],[\"和最小内存\",{\"1\":{\"2121\":1}}],[\"和普通的\",{\"1\":{\"1801\":1,\"6307\":1}}],[\"和段界限之间\",{\"1\":{\"1645\":1}}],[\"和自动提交一样\",{\"1\":{\"1612\":1}}],[\"和自动配置一样\",{\"1\":{\"1348\":1,\"5673\":1}}],[\"和hashmap有何不同\",{\"1\":{\"1046\":1}}],[\"和int\",{\"1\":{\"1011\":1}}],[\"和简单⼯⼚模式中⼯⼚负责⽣产所有产品相⽐\",{\"1\":{\"866\":1,\"5496\":1}}],[\"和arraylist类似\",{\"1\":{\"780\":1}}],[\"和o\",{\"1\":{\"691\":1,\"5458\":1}}],[\"和树的结构\",{\"1\":{\"648\":1}}],[\"和底层数据结构的具体实现\",{\"1\":{\"606\":1}}],[\"和动态数组这种数据结构之间\",{\"1\":{\"588\":1}}],[\"和错误\",{\"1\":{\"468\":1,\"5363\":1}}],[\"和不可查的异常\",{\"0\":{\"463\":1,\"5358\":1}}],[\"和卸载\",{\"1\":{\"409\":1,\"5298\":1}}],[\"和大内存的场景下有很好的性能\",{\"1\":{\"372\":1}}],[\"和使用过的那一块\",{\"1\":{\"333\":1}}],[\"和新生代\",{\"1\":{\"283\":1}}],[\"和两个幸存区\",{\"1\":{\"230\":1}}],[\"和\",{\"0\":{\"973\":1,\"985\":1,\"2218\":1,\"2479\":1,\"2481\":1,\"2503\":1,\"2516\":1,\"2707\":1,\"2727\":1,\"3362\":1,\"6396\":1,\"7060\":1,\"7065\":1,\"7070\":1,\"7075\":1},\"1\":{\"31\":1,\"121\":1,\"228\":1,\"242\":1,\"246\":1,\"253\":2,\"333\":1,\"334\":1,\"343\":1,\"579\":1,\"590\":1,\"605\":2,\"611\":1,\"625\":1,\"674\":1,\"1009\":1,\"1079\":1,\"1182\":1,\"1185\":1,\"1206\":1,\"1292\":1,\"1350\":1,\"1390\":1,\"1431\":1,\"1626\":1,\"1710\":1,\"1772\":1,\"1777\":1,\"1799\":1,\"1800\":1,\"1821\":1,\"1955\":1,\"1999\":2,\"2094\":1,\"2099\":1,\"2202\":1,\"2222\":1,\"2232\":1,\"2247\":2,\"2267\":1,\"2306\":1,\"2406\":1,\"2407\":1,\"2519\":1,\"2522\":1,\"2528\":1,\"2557\":1,\"2568\":1,\"2604\":1,\"2627\":1,\"2692\":1,\"2697\":1,\"2708\":1,\"2737\":1,\"2762\":1,\"2770\":1,\"2838\":1,\"2972\":1,\"2983\":1,\"2988\":1,\"2992\":1,\"3017\":1,\"3019\":1,\"3041\":1,\"3084\":1,\"3099\":1,\"3143\":1,\"3201\":1,\"3238\":1,\"3295\":1,\"3359\":1,\"3415\":2,\"3445\":1,\"3447\":3,\"3454\":1,\"3695\":1,\"3716\":1,\"3737\":1,\"3750\":1,\"3758\":1,\"3763\":1,\"3785\":1,\"3820\":1,\"3831\":1,\"3878\":1,\"3880\":1,\"3911\":1,\"3913\":1,\"4182\":1,\"4302\":1,\"4534\":1,\"4563\":1,\"4586\":1,\"4596\":1,\"4597\":1,\"4610\":1,\"4615\":1,\"4620\":1,\"4625\":1,\"4646\":1,\"4651\":1,\"4759\":1,\"4941\":1,\"5074\":1,\"5076\":1,\"5078\":1,\"5080\":1,\"5081\":1,\"5082\":1,\"5084\":1,\"5144\":1,\"5234\":1,\"5558\":1,\"5634\":1,\"5647\":1,\"5675\":1,\"5796\":1,\"5864\":1,\"5915\":1,\"5938\":1,\"5947\":1,\"5969\":1,\"5982\":1,\"5990\":1,\"5994\":1,\"6033\":1,\"6035\":1,\"6058\":1,\"6060\":1,\"6163\":1,\"6178\":1,\"6180\":1,\"6181\":2,\"6188\":1,\"6193\":1,\"6198\":1,\"6203\":1,\"6219\":1,\"6224\":1,\"6272\":1,\"6279\":1,\"6288\":1,\"6304\":1,\"6305\":1,\"6350\":1,\"6406\":1,\"6431\":1,\"6439\":1,\"6510\":1,\"6644\":1,\"6655\":1,\"6660\":1,\"6664\":1,\"6689\":1,\"6691\":1,\"6709\":1,\"6736\":1,\"6741\":1,\"6755\":1,\"6799\":1,\"7127\":1}}],[\"介绍公司\",{\"1\":{\"4280\":1,\"7105\":1}}],[\"介绍一个实习中项目\",{\"0\":{\"3934\":1}}],[\"介绍下\",{\"1\":{\"1822\":1,\"6351\":1}}],[\"介绍\",{\"0\":{\"30\":1,\"159\":1,\"167\":1,\"5143\":1,\"5267\":1,\"5275\":1,\"5306\":1},\"1\":{\"31\":1,\"35\":1,\"5144\":1,\"5148\":1}}],[\"你也不能想当然地认为它们俩对应的原文也非常相似\",{\"1\":{\"5033\":1}}],[\"你访问一次\",{\"1\":{\"5018\":1}}],[\"你未来的职业规划\",{\"1\":{\"4460\":1}}],[\"你学习技术的途径\",{\"1\":{\"4459\":1}}],[\"你学习spring\",{\"1\":{\"4458\":1}}],[\"你学习了哪些新技术\",{\"1\":{\"4457\":1}}],[\"你学习挺好研究生排名高\",{\"1\":{\"4362\":1}}],[\"你该怎么做\",{\"1\":{\"4438\":1}}],[\"你面试通过的话也是在我们这边\",{\"1\":{\"4425\":1}}],[\"你面了几家了\",{\"1\":{\"4405\":1}}],[\"你做的大模型是比较简单的\",{\"1\":{\"4425\":1}}],[\"你现在有学习什么新技术吗\",{\"1\":{\"4424\":1}}],[\"你用的最多的是文生文还是文生图\",{\"1\":{\"4423\":1}}],[\"你用过springmvc吗\",{\"1\":{\"4454\":1}}],[\"你用过讯飞星火大模型吗\",{\"1\":{\"4422\":1}}],[\"你用过哪些java的框架\",{\"1\":{\"4453\":1}}],[\"你用过哪些spring的注解\",{\"1\":{\"4414\":1}}],[\"你用过哪些中间件\",{\"1\":{\"4407\":1}}],[\"你用过es没\",{\"1\":{\"4411\":1}}],[\"你用过索引没有\",{\"1\":{\"4409\":1}}],[\"你大概估计一下\",{\"1\":{\"4421\":1}}],[\"你在联想没有转正的原因你觉得是什么\",{\"1\":{\"4452\":1}}],[\"你在联想实习过\",{\"1\":{\"4432\":1}}],[\"你在联想实习是在天津实现吗\",{\"1\":{\"4366\":1}}],[\"你在公司里写了多少行代码\",{\"1\":{\"4421\":1}}],[\"你调用了哪些大模型\",{\"1\":{\"4420\":1}}],[\"你给我说一下你在公司里做的\",{\"1\":{\"4419\":1}}],[\"你不会没关系\",{\"1\":{\"4413\":1}}],[\"你怎么想到跑这么远\",{\"1\":{\"4417\":1}}],[\"你怎么查看\",{\"1\":{\"4413\":1}}],[\"你怎么找到里面的线程\",{\"1\":{\"4412\":1}}],[\"你怎么判断谁大谁小\",{\"1\":{\"4356\":1}}],[\"你刚才提到了消息中间件kafka\",{\"1\":{\"4410\":1}}],[\"你说了volitle\",{\"1\":{\"4406\":1}}],[\"你说一下爬虫的收获\",{\"1\":{\"4432\":1}}],[\"你说一下spring\",{\"1\":{\"4416\":1}}],[\"你说一下它\",{\"1\":{\"4410\":1}}],[\"你说一下抽象类和接口的区别\",{\"1\":{\"4398\":1}}],[\"你说一下怎么查看文件\",{\"1\":{\"4391\":1}}],[\"你说一下怎么查询某个学科下某个班级的成绩前五名\",{\"1\":{\"4384\":1}}],[\"你说一下快速排序算法的思想\",{\"1\":{\"4389\":1}}],[\"你说一下单例模式和多例模式的区别\",{\"1\":{\"4386\":1}}],[\"你说一下list\",{\"1\":{\"4382\":1}}],[\"你说一下什么是可重复读\",{\"1\":{\"4379\":1}}],[\"你的快递被放到了一个快递箱里\",{\"1\":{\"6276\":1}}],[\"你的时延多少\",{\"1\":{\"4431\":1}}],[\"你的项目并发数达到2w\",{\"1\":{\"4430\":1}}],[\"你的项目是自己做的吗\",{\"1\":{\"4429\":1}}],[\"你的大论文是关于什么的\",{\"1\":{\"4418\":1}}],[\"你的发型是做的还是睡觉睡的\",{\"1\":{\"4404\":1}}],[\"你的算法效率越接近该算法的效率\",{\"1\":{\"1729\":1}}],[\"你知道什么时候进行young\",{\"1\":{\"4402\":1}}],[\"你知道有什么方法对线程池进行预热吗\",{\"1\":{\"3917\":1,\"6065\":1}}],[\"你来给我讲一下面相切面编程\",{\"1\":{\"4415\":1}}],[\"你来的时候就微信聊\",{\"1\":{\"4394\":1}}],[\"你来就是java\",{\"1\":{\"4322\":1,\"7147\":1}}],[\"你熟悉linux吗\",{\"1\":{\"4391\":1}}],[\"你讲一下用户页面发起一个请求到调用数据库返回数据的流程\",{\"1\":{\"4390\":1}}],[\"你讲一下线程池\",{\"1\":{\"4374\":1}}],[\"你了解事物传播行为吗\",{\"1\":{\"4456\":1}}],[\"你了解spring的事务吗\",{\"1\":{\"4455\":1}}],[\"你了解垃圾回收吗\",{\"1\":{\"4401\":1}}],[\"你了解代理模式吗\",{\"1\":{\"4400\":1}}],[\"你了解设计模式吗\",{\"1\":{\"4399\":1}}],[\"你了解算法吗\",{\"1\":{\"4388\":1}}],[\"你了解观察者模式模式吗\",{\"1\":{\"4387\":1}}],[\"你最喜欢用哪个隔离级别\",{\"1\":{\"4377\":1}}],[\"你实习是在ai组\",{\"1\":{\"4371\":1}}],[\"你想在研究生期间的地方找工作\",{\"1\":{\"4368\":1}}],[\"你有什么想问我的\",{\"1\":{\"4425\":1}}],[\"你有什么想问我的吗\",{\"1\":{\"4393\":1}}],[\"你有没有jvm调优或者cpu\",{\"1\":{\"4403\":1}}],[\"你有没有做过项目\",{\"1\":{\"4372\":1}}],[\"你有女朋友吗\",{\"1\":{\"4367\":1}}],[\"你有实际的项目经验吗\",{\"1\":{\"4333\":1,\"7158\":1}}],[\"你还找了哪些公司\",{\"1\":{\"4363\":1}}],[\"你对工作地点的选择\",{\"1\":{\"4361\":1}}],[\"你家是山东的\",{\"1\":{\"4360\":1}}],[\"你是怎么查看堆栈信息\",{\"1\":{\"4413\":1}}],[\"你是怎么调的\",{\"1\":{\"4403\":1}}],[\"你是用md5做的\",{\"1\":{\"4351\":1}}],[\"你是如何解决的\",{\"0\":{\"3339\":1}}],[\"你是如何设计的\",{\"0\":{\"2046\":1,\"5751\":1}}],[\"你平常也这样扎头发吗\",{\"1\":{\"4345\":1,\"7170\":1}}],[\"你他妈的非得问\",{\"1\":{\"4294\":1,\"7119\":1}}],[\"你投的是浪潮信息\",{\"0\":{\"4127\":1}}],[\"你能说一下有哪些问题吗\",{\"1\":{\"4332\":1,\"7157\":1}}],[\"你能说出几个需要重写的方法吗\",{\"0\":{\"3651\":1,\"5894\":1}}],[\"你能解释冲突是如何产生的吗\",{\"0\":{\"3339\":1}}],[\"你能告诉我\",{\"1\":{\"2392\":1,\"7096\":1}}],[\"你修改的结果\",{\"1\":{\"3048\":1}}],[\"你修改的数据\",{\"1\":{\"3048\":1}}],[\"你这个事务在read\",{\"1\":{\"3048\":1}}],[\"你这个事务还在活跃\",{\"1\":{\"3048\":1}}],[\"你去问它应该能问到\",{\"1\":{\"2393\":1,\"7097\":1}}],[\"你去问问它吧\",{\"1\":{\"2391\":1,\"7095\":1}}],[\"你可能会看到过某些请求的响应码是\",{\"1\":{\"2238\":1}}],[\"你可以将\",{\"1\":{\"7071\":1}}],[\"你可以将图片和\",{\"1\":{\"125\":1,\"5238\":1}}],[\"你可以实现各种功能的增强\",{\"1\":{\"4947\":1}}],[\"你可以修改\",{\"1\":{\"4942\":1}}],[\"你可以专注于如何展现数据\",{\"1\":{\"4841\":1,\"7230\":1}}],[\"你可以选择这个策略\",{\"1\":{\"3871\":1,\"6026\":1}}],[\"你可以把多个变量放在一个对象里来进行cas操作\",{\"1\":{\"3697\":1,\"5866\":1}}],[\"你可以简单理解为\",{\"1\":{\"3368\":1}}],[\"你可以看到\",{\"1\":{\"2601\":1}}],[\"你可以使用\",{\"1\":{\"4955\":1}}],[\"你可以使用这个语法\",{\"1\":{\"477\":1,\"5372\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"28\":1,\"5141\":1}}],[\"你可以通过配置来注册自定义的拦截器\",{\"1\":{\"4945\":1}}],[\"你可以通过\",{\"1\":{\"912\":1,\"5530\":1}}],[\"你可以通过主题选项和页面\",{\"1\":{\"140\":1,\"5253\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"10\":1,\"5123\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"123\":1,\"5236\":1}}],[\"你可以在这里放置你的主体内容\",{\"1\":{\"150\":1,\"154\":1,\"5263\":1}}],[\"你可以在\",{\"1\":{\"117\":1,\"904\":1,\"5230\":1,\"5522\":1}}],[\"你可以标记\",{\"1\":{\"73\":1,\"5186\":1}}],[\"你只需要记住这个技巧就可以了\",{\"1\":{\"1025\":1}}],[\"你会选哪个地点\",{\"1\":{\"4361\":1}}],[\"你会发现\",{\"1\":{\"1811\":1,\"6318\":1}}],[\"你会怎么做\",{\"1\":{\"1010\":1}}],[\"你会彻底理解hash方法\",{\"1\":{\"1009\":1}}],[\"你通过proxy\",{\"1\":{\"904\":1,\"5522\":1}}],[\"你都能通过getmap获得\",{\"1\":{\"514\":1,\"5402\":1}}],[\"你又要改代码\",{\"1\":{\"508\":1,\"5396\":1}}],[\"你需要自定义\",{\"1\":{\"910\":1,\"5528\":1}}],[\"你需要在页面\",{\"1\":{\"151\":1,\"155\":1,\"5264\":1}}],[\"你需要阅读\",{\"1\":{\"35\":1,\"5148\":1}}],[\"你应该创建和编写\",{\"1\":{\"29\":1,\"5142\":1}}],[\"文章查询性能\",{\"1\":{\"5003\":1,\"7285\":1}}],[\"文章数据建立索引\",{\"1\":{\"5003\":1,\"7285\":1}}],[\"文章微服务发送消息\",{\"1\":{\"4983\":1}}],[\"文章的布局\",{\"1\":{\"4857\":1}}],[\"文章审核\",{\"1\":{\"4857\":1}}],[\"文章不存在\",{\"1\":{\"4857\":1,\"4979\":1}}],[\"文章自动审核\",{\"0\":{\"4845\":1},\"1\":{\"7234\":1}}],[\"文章自动审核及延迟发布\",{\"0\":{\"7233\":1},\"1\":{\"4656\":1,\"7175\":1}}],[\"文章详情静态化\",{\"1\":{\"4839\":1,\"7228\":1}}],[\"文章详情静态化及存储\",{\"0\":{\"7227\":1},\"1\":{\"4656\":1,\"7175\":1}}],[\"文章端相关的表都使用雪花算法生成id\",{\"1\":{\"4821\":1,\"4969\":1}}],[\"文章表可能要占用很大的物理存储空间\",{\"1\":{\"4820\":1,\"4967\":1}}],[\"文章内容审核功能\",{\"1\":{\"4655\":1,\"7174\":1}}],[\"文章标题列表\",{\"1\":{\"133\":1,\"5246\":1}}],[\"文本内容和图片\",{\"1\":{\"4847\":1,\"7236\":1}}],[\"文本编辑器\",{\"1\":{\"3454\":1}}],[\"文本处理工具\",{\"1\":{\"3447\":1}}],[\"文中分析基于jdk1\",{\"1\":{\"1001\":1}}],[\"文档中写到\",{\"1\":{\"433\":1,\"5324\":1}}],[\"文件描述符\",{\"1\":{\"6262\":1}}],[\"文件描述符集合\",{\"1\":{\"1769\":2}}],[\"文件挂载工具\",{\"1\":{\"4730\":1}}],[\"文件名\",{\"1\":{\"3505\":1}}],[\"文件名记录在目录中\",{\"1\":{\"3491\":1}}],[\"文件最后被修改的时间\",{\"1\":{\"3504\":1}}],[\"文件类型以及权限\",{\"1\":{\"3499\":1}}],[\"文件拥有者\",{\"1\":{\"3497\":1,\"3501\":1}}],[\"文件属性\",{\"1\":{\"3496\":1}}],[\"文件操作工具\",{\"1\":{\"3447\":1}}],[\"文件系统负责维护文件的元数据以及文件数据的物理存储位置\",{\"1\":{\"3456\":1}}],[\"文件系统\",{\"1\":{\"3443\":1,\"3455\":1}}],[\"文件管理权限策略\",{\"1\":{\"4687\":1}}],[\"文件管理\",{\"1\":{\"3435\":1,\"4684\":1}}],[\"文件管理信息\",{\"1\":{\"1905\":1}}],[\"文件或目录\",{\"1\":{\"3401\":1}}],[\"文件在这四个区域之间的转换关系如下\",{\"1\":{\"3332\":1}}],[\"文件发送后\",{\"1\":{\"3236\":1}}],[\"文件生成后收到的所有写操作\",{\"1\":{\"3235\":1}}],[\"文件生成页面\",{\"1\":{\"28\":1,\"5141\":1}}],[\"文件后缀通常为\",{\"1\":{\"3567\":1}}],[\"文件后\",{\"1\":{\"3235\":1}}],[\"文件进行数据恢复\",{\"1\":{\"3164\":1,\"6820\":1}}],[\"文件进行重写\",{\"1\":{\"3163\":1,\"6819\":1}}],[\"文件越来越大\",{\"1\":{\"3163\":1,\"6819\":1}}],[\"文件重写\",{\"1\":{\"3163\":1,\"6819\":1}}],[\"文件同步\",{\"1\":{\"3162\":1,\"6818\":1}}],[\"文件写入\",{\"1\":{\"3161\":1,\"6817\":1}}],[\"文件的工具\",{\"1\":{\"3574\":1}}],[\"文件的位置相同\",{\"1\":{\"3157\":1,\"6813\":1}}],[\"文件的保存位置和\",{\"1\":{\"3157\":1,\"6813\":1}}],[\"文件的一部分\",{\"1\":{\"287\":1}}],[\"文件中\",{\"1\":{\"3155\":1,\"3161\":1,\"3235\":1,\"6811\":1,\"6817\":1}}],[\"文件中除了有类的版本\",{\"1\":{\"281\":1}}],[\"文件传输\",{\"1\":{\"2505\":1}}],[\"文件传输的代码\",{\"1\":{\"1811\":1,\"6318\":1}}],[\"文件二进制数据\",{\"1\":{\"2091\":1}}],[\"文件大小\",{\"1\":{\"2091\":1,\"3503\":1}}],[\"文件呢\",{\"1\":{\"412\":1,\"5302\":1}}],[\"文件需要加载到虚拟机中之后才能运行和使用\",{\"1\":{\"412\":1,\"5302\":1}}],[\"文件常量池的另一个重要特征是\",{\"1\":{\"290\":1}}],[\"文件夹的图片\",{\"1\":{\"126\":1,\"5239\":1}}],[\"文件放置在一起\",{\"1\":{\"125\":1,\"5238\":1}}],[\"文件\",{\"1\":{\"29\":1,\"419\":1,\"428\":1,\"891\":1,\"3069\":1,\"3234\":1,\"3235\":2,\"3334\":1,\"3419\":3,\"3508\":1,\"3570\":1,\"3736\":1,\"5142\":1,\"5310\":1,\"5319\":1,\"5509\":1,\"5967\":1,\"6720\":1}}],[\"文字结尾应该有深蓝色的\",{\"1\":{\"128\":1,\"5241\":1}}],[\"文字\",{\"1\":{\"25\":1,\"26\":1,\"5138\":1,\"5139\":1}}],[\"文字段落\",{\"1\":{\"25\":11,\"26\":13,\"5138\":11,\"5139\":13}}],[\"2呢\",{\"1\":{\"6994\":1}}],[\"2还没来得及全面推广\",{\"1\":{\"6994\":1}}],[\"2还是个新技术\",{\"1\":{\"6978\":1,\"7001\":1}}],[\"2留下发挥时间\",{\"1\":{\"6994\":1}}],[\"2中最核心的技术就是多路复用技术\",{\"1\":{\"6983\":1,\"7006\":1}}],[\"2的诞生\",{\"1\":{\"6983\":1,\"7006\":1}}],[\"2有了一定的基本了解\",{\"1\":{\"6982\":1,\"7005\":1}}],[\"2标准在2015年5月就以rfc\",{\"1\":{\"6976\":1,\"6999\":1}}],[\"2标记\",{\"0\":{\"328\":1}}],[\"2非对称加密算法有哪些\",{\"0\":{\"5093\":1}}],[\"2数据库框架选型\",{\"0\":{\"4739\":1}}],[\"2优化二\",{\"0\":{\"4672\":1}}],[\"2不是所谓的\",{\"0\":{\"4644\":1}}],[\"2不可重复读\",{\"0\":{\"2985\":1}}],[\"2确保已经被leader提交的提案最终能够被所有的follower提交\",{\"0\":{\"4622\":1}}],[\"2个结点故障\",{\"1\":{\"4589\":1}}],[\"2常见分布式一致性算法\",{\"0\":{\"4578\":1}}],[\"28\",{\"0\":{\"4095\":1},\"1\":{\"4424\":1}}],[\"27\",{\"0\":{\"4094\":1},\"1\":{\"4423\":1}}],[\"26\",{\"0\":{\"4093\":1,\"4201\":1},\"1\":{\"4422\":1}}],[\"2方式二\",{\"0\":{\"3899\":1}}],[\"2n+1\",{\"1\":{\"4609\":1}}],[\"2n\",{\"1\":{\"3898\":2,\"6045\":2}}],[\"2n表示2的n次方\",{\"1\":{\"1021\":1}}],[\"2乐观锁\",{\"0\":{\"3815\":1}}],[\"2偏向锁\",{\"0\":{\"3794\":1}}],[\"2原理\",{\"0\":{\"3760\":1}}],[\"2volatile的作用\",{\"0\":{\"3710\":1}}],[\"2自旋开销问题\",{\"0\":{\"3691\":1}}],[\"2~3s\",{\"1\":{\"3621\":1}}],[\"2~default~blogcommendfrombaidu~rate\",{\"1\":{\"6955\":2}}],[\"2~default~baidujs\",{\"1\":{\"1493\":1,\"2136\":1,\"6946\":1}}],[\"2~default~ctrlist~rate\",{\"1\":{\"3390\":2}}],[\"2内存溢出\",{\"0\":{\"3583\":1}}],[\"2使用\",{\"0\":{\"3539\":1}}],[\"2使用ps命令查看cpu占比高的pid\",{\"0\":{\"3520\":1}}],[\"2修改权限\",{\"0\":{\"3409\":1}}],[\"2缓存雪崩和缓存击穿有什么区别\",{\"0\":{\"3285\":1}}],[\"2缓存穿透和缓存击穿有什么区别\",{\"0\":{\"3270\":1}}],[\"2缓存污染会带来什么问题\",{\"0\":{\"1696\":1}}],[\"2增量复制\",{\"0\":{\"3237\":1}}],[\"2主从复制\",{\"0\":{\"3227\":1}}],[\"2指向新的主节点\",{\"1\":{\"3223\":1}}],[\"2redis\",{\"0\":{\"3178\":1}}],[\"2remove方法\",{\"0\":{\"820\":1}}],[\"2rdb\",{\"0\":{\"3148\":1}}],[\"2undo\",{\"0\":{\"3037\":1}}],[\"2gap\",{\"0\":{\"2951\":1}}],[\"221\",{\"1\":{\"3527\":1}}],[\"22\",{\"0\":{\"4077\":1,\"4189\":1,\"4395\":1},\"1\":{\"2925\":1,\"4418\":1,\"6597\":1}}],[\"2元数据锁\",{\"0\":{\"2887\":1}}],[\"2表级锁\",{\"0\":{\"2871\":1}}],[\"2类型总结\",{\"0\":{\"2768\":1}}],[\"2类加载器加载规则\",{\"0\":{\"420\":1}}],[\"2类加载过程\",{\"0\":{\"411\":1}}],[\"2拥塞避免算法\",{\"0\":{\"2685\":1}}],[\"2滑动窗口\",{\"0\":{\"2651\":1}}],[\"2没有\",{\"0\":{\"2641\":1}}],[\"2为什么挥手需要四次\",{\"0\":{\"2603\":1}}],[\"2为什么需要\",{\"0\":{\"2451\":1}}],[\"2为什么需要红黑树\",{\"0\":{\"690\":1}}],[\"2如何在\",{\"0\":{\"2533\":1}}],[\"2tcp\",{\"0\":{\"2503\":1}}],[\"2tlb\",{\"0\":{\"1670\":1}}],[\"2md5的特点\",{\"0\":{\"5030\":1}}],[\"2mysql\",{\"0\":{\"3536\":1}}],[\"2mysql怎么避免缓存污染造成的影响\",{\"0\":{\"1713\":1}}],[\"2msl时长\",{\"1\":{\"2615\":1}}],[\"2msl\",{\"0\":{\"2613\":1},\"1\":{\"2426\":1,\"2600\":1}}],[\"2什么是\",{\"0\":{\"3313\":1}}],[\"2什么是缓存击穿\",{\"0\":{\"3264\":1}}],[\"2什么是协商缓存\",{\"0\":{\"2237\":1}}],[\"2什么是线程\",{\"0\":{\"1890\":1}}],[\"2xx\",{\"1\":{\"2195\":1,\"7058\":1}}],[\"2http\",{\"0\":{\"2193\":1,\"2357\":1}}],[\"2hash方法\",{\"0\":{\"1006\":1}}],[\"2hashmap中hash方法的原理\",{\"0\":{\"1002\":1}}],[\"2<\",{\"1\":{\"2174\":1}}],[\"2号图片将会被缓存到服务器a上\",{\"1\":{\"2028\":1}}],[\"2号\",{\"1\":{\"2007\":1}}],[\"2避免死锁问题的发生\",{\"0\":{\"1996\":1}}],[\"2最短作业优先调度算法\",{\"0\":{\"1916\":1}}],[\"2最短寻道时间优先\",{\"0\":{\"1755\":1}}],[\"2进程的控制结构\",{\"0\":{\"1859\":1}}],[\"2单\",{\"0\":{\"1832\":1}}],[\"2synchronized\",{\"0\":{\"3744\":1}}],[\"2sendfile\",{\"0\":{\"1795\":1}}],[\"2spring\",{\"0\":{\"1229\":1,\"4543\":1}}],[\"2epoll\",{\"0\":{\"1773\":1}}],[\"2先进先出置换算法\",{\"0\":{\"1730\":1}}],[\"2list\",{\"0\":{\"3108\":1}}],[\"2linux\",{\"0\":{\"1705\":1}}],[\"2loadfactor\",{\"0\":{\"985\":1}}],[\"2消息广播\",{\"0\":{\"4601\":1}}],[\"2消息队列\",{\"0\":{\"1956\":1}}],[\"2消息有序性\",{\"0\":{\"1584\":1}}],[\"2消费者\",{\"0\":{\"1467\":1}}],[\"2参数详解\",{\"0\":{\"1548\":1}}],[\"2备份机制\",{\"0\":{\"1527\":1}}],[\"2出现顺序错乱的场景\",{\"0\":{\"1504\":1}}],[\"2解决方案\",{\"0\":{\"1497\":1}}],[\"21\",{\"0\":{\"4069\":1,\"4185\":1},\"1\":{\"4417\":1}}],[\"2101\",{\"1\":{\"1493\":1,\"2136\":1,\"3390\":1,\"6946\":1,\"6955\":1}}],[\"2147483647\",{\"1\":{\"1044\":1}}],[\"2147483648\",{\"1\":{\"1044\":1}}],[\"23的主机\",{\"1\":{\"7033\":1}}],[\"23\",{\"0\":{\"4085\":1,\"4192\":1},\"1\":{\"4419\":1}}],[\"235^v38^pc\",{\"1\":{\"2136\":1,\"3390\":2}}],[\"235^v28^pc\",{\"1\":{\"1493\":1,\"6946\":1,\"6955\":2}}],[\"2301\",{\"1\":{\"2189\":1}}],[\"230\",{\"1\":{\"83\":1,\"5196\":1}}],[\"2k\",{\"1\":{\"1425\":2,\"1426\":1,\"1427\":2}}],[\"25d55ad283aa400af464c76d713c07ad\",{\"1\":{\"5061\":1}}],[\"25\",{\"0\":{\"4092\":1,\"4199\":1},\"1\":{\"4421\":1}}],[\"250\",{\"1\":{\"4041\":1}}],[\"250ms\",{\"1\":{\"1417\":2}}],[\"256\",{\"1\":{\"3487\":1}}],[\"253\",{\"1\":{\"83\":1,\"5196\":1}}],[\"2监控器\",{\"0\":{\"1344\":1}}],[\"2三级缓存的方式\",{\"0\":{\"1269\":1}}],[\"2问题体现\",{\"0\":{\"1255\":1}}],[\"2二级缓存\",{\"0\":{\"1135\":1}}],[\"291\",{\"1\":{\"3527\":1}}],[\"29\",{\"0\":{\"4096\":1},\"1\":{\"1054\":1,\"4425\":1}}],[\"2^32\",{\"1\":{\"2015\":1,\"2021\":1,\"2022\":1,\"2024\":1,\"2025\":1,\"2027\":1}}],[\"2^31\",{\"1\":{\"1044\":2}}],[\"2^3\",{\"1\":{\"1022\":1,\"1023\":1}}],[\"2^n\",{\"1\":{\"1020\":2,\"1021\":1}}],[\"24950043\",{\"1\":{\"2136\":1}}],[\"24\",{\"0\":{\"4089\":1,\"4194\":1},\"1\":{\"995\":1,\"4420\":1,\"7062\":1}}],[\"2+1时\",{\"1\":{\"3210\":1}}],[\"2+1\",{\"1\":{\"939\":1}}],[\"2版本\",{\"1\":{\"934\":1}}],[\"2cglib\",{\"0\":{\"905\":1}}],[\"2静态代理和动态代理的区别\",{\"0\":{\"886\":1}}],[\"2装饰器模式结构\",{\"0\":{\"873\":1}}],[\"2⼯⼚⽅法模式了解吗\",{\"0\":{\"865\":1}}],[\"2区别分析\",{\"0\":{\"830\":1}}],[\"2树的基本术语\",{\"0\":{\"655\":1}}],[\"20min\",{\"0\":{\"4357\":1,\"4380\":1}}],[\"20分钟\",{\"0\":{\"4324\":1,\"7149\":1}}],[\"20w\",{\"1\":{\"3179\":1,\"6837\":1}}],[\"206\",{\"1\":{\"2198\":1,\"7062\":1}}],[\"204\",{\"1\":{\"2197\":1}}],[\"2009\",{\"1\":{\"6989\":1}}],[\"2000\",{\"1\":{\"4926\":2}}],[\"2000w\",{\"1\":{\"3179\":1,\"6837\":1}}],[\"200\",{\"1\":{\"2196\":1,\"2197\":1,\"2242\":1,\"2245\":1,\"2257\":1,\"2972\":4,\"3560\":1,\"4857\":1,\"4999\":1,\"5019\":1,\"6644\":4}}],[\"202\",{\"1\":{\"3527\":1}}],[\"20221011144626201\",{\"1\":{\"4229\":1}}],[\"2022\",{\"0\":{\"2040\":1,\"2042\":1,\"2056\":1,\"2059\":1,\"2061\":1,\"2063\":1,\"2065\":1,\"2067\":1,\"2070\":1,\"2077\":1,\"2079\":1,\"5745\":1,\"5747\":1,\"5761\":1,\"5764\":1,\"5766\":1,\"5768\":1,\"5770\":1,\"5772\":1,\"5775\":1,\"5782\":1,\"5784\":1},\"1\":{\"2144\":1}}],[\"20210608002334025\",{\"1\":{\"1194\":1,\"5546\":1}}],[\"20201231\",{\"1\":{\"5068\":1}}],[\"2020\",{\"1\":{\"119\":1,\"5232\":1}}],[\"20\",{\"0\":{\"4066\":1,\"4183\":1,\"4270\":1,\"4357\":1,\"4426\":1},\"1\":{\"1016\":1,\"1035\":1,\"1380\":1,\"1418\":1,\"2495\":1,\"4307\":1,\"4416\":1,\"7028\":1,\"7132\":1}}],[\"2018年的时候\",{\"1\":{\"6978\":1,\"7001\":1}}],[\"2012\",{\"1\":{\"4645\":1,\"6218\":1}}],[\"2015年才正式发布\",{\"1\":{\"2369\":1}}],[\"2015\",{\"1\":{\"1054\":1}}],[\"2014\",{\"1\":{\"686\":1,\"947\":1,\"5347\":1}}],[\"2013\",{\"1\":{\"625\":1,\"6989\":1}}],[\"2q2\",{\"0\":{\"571\":1}}],[\"2获取class对象\",{\"0\":{\"517\":1}}],[\"2可查的异常\",{\"0\":{\"463\":1}}],[\"2可达性分析算法\",{\"0\":{\"300\":1}}],[\"2fullgc触发条件\",{\"0\":{\"389\":1}}],[\"2parnew\",{\"0\":{\"349\":1}}],[\"2垃圾回收算法\",{\"0\":{\"322\":1}}],[\"2老年代\",{\"0\":{\"235\":1}}],[\"2虚拟机栈\",{\"0\":{\"202\":1}}],[\"2\",{\"0\":{\"182\":1,\"188\":1,\"202\":1,\"217\":1,\"221\":1,\"229\":1,\"235\":1,\"238\":1,\"241\":1,\"251\":1,\"260\":1,\"270\":1,\"276\":1,\"278\":1,\"284\":1,\"323\":1,\"328\":1,\"330\":1,\"335\":1,\"498\":1,\"499\":1,\"517\":1,\"525\":1,\"533\":1,\"557\":1,\"719\":1,\"751\":1,\"784\":1,\"851\":1,\"920\":1,\"1003\":1,\"1006\":1,\"1078\":1,\"1082\":1,\"1104\":1,\"1163\":1,\"1311\":1,\"1456\":1,\"1457\":1,\"1467\":1,\"1618\":1,\"1628\":1,\"1781\":1,\"1785\":1,\"1795\":1,\"1809\":1,\"1881\":1,\"1882\":1,\"1890\":1,\"1898\":1,\"1911\":1,\"1912\":1,\"1916\":1,\"1919\":1,\"1923\":1,\"1927\":1,\"1935\":1,\"2103\":1,\"2120\":1,\"2190\":1,\"2357\":1,\"2378\":1,\"2523\":1,\"2524\":1,\"2533\":1,\"2535\":1,\"2560\":1,\"2564\":1,\"2566\":1,\"2570\":1,\"2572\":1,\"2575\":1,\"2577\":1,\"2723\":1,\"2751\":1,\"2753\":1,\"2768\":1,\"2784\":1,\"2788\":1,\"2795\":1,\"2804\":1,\"2812\":1,\"2816\":1,\"2822\":1,\"2877\":1,\"2887\":1,\"2905\":1,\"2918\":1,\"3093\":1,\"3096\":1,\"3097\":1,\"3108\":1,\"3116\":1,\"3123\":1,\"3131\":1,\"3231\":1,\"3237\":1,\"3266\":1,\"3270\":1,\"3297\":1,\"3337\":1,\"3427\":1,\"3537\":1,\"3539\":1,\"3562\":1,\"3584\":1,\"3592\":2,\"3623\":1,\"3634\":1,\"3676\":1,\"3728\":1,\"3733\":1,\"3744\":1,\"3749\":1,\"3791\":1,\"3792\":1,\"3794\":1,\"3800\":1,\"3806\":1,\"3809\":1,\"3853\":1,\"3854\":1,\"3899\":1,\"3935\":1,\"4119\":1,\"4211\":1,\"4464\":1,\"4570\":1,\"4644\":1,\"4667\":1,\"4668\":1,\"4672\":1,\"4679\":1,\"4680\":1,\"4739\":1,\"4757\":1,\"4804\":1,\"4808\":1,\"4827\":1,\"4838\":1,\"4844\":1,\"4897\":1,\"4911\":1,\"4913\":1,\"4936\":1,\"4966\":1,\"4977\":1,\"4982\":1,\"4987\":1,\"5085\":1,\"5104\":1,\"5457\":1,\"6217\":1,\"6975\":1,\"6981\":1,\"6998\":1,\"7004\":1,\"7065\":1,\"7070\":1,\"7191\":1},\"1\":{\"26\":14,\"77\":1,\"520\":1,\"529\":1,\"539\":1,\"577\":1,\"647\":1,\"682\":1,\"683\":1,\"699\":1,\"736\":1,\"754\":1,\"819\":1,\"858\":1,\"1028\":2,\"1062\":1,\"1123\":1,\"1176\":1,\"1180\":1,\"1201\":1,\"1275\":1,\"1292\":1,\"1307\":1,\"1313\":1,\"1375\":1,\"1396\":1,\"1438\":1,\"1482\":1,\"1496\":1,\"1611\":1,\"1710\":1,\"1769\":2,\"1782\":1,\"1794\":1,\"1796\":1,\"1799\":1,\"1800\":1,\"1802\":1,\"1805\":1,\"1807\":4,\"1828\":1,\"1952\":1,\"1993\":3,\"2022\":1,\"2023\":1,\"2116\":1,\"2117\":1,\"2121\":2,\"2267\":1,\"2321\":1,\"2322\":1,\"2324\":1,\"2327\":1,\"2334\":1,\"2342\":1,\"2358\":2,\"2359\":1,\"2362\":1,\"2364\":1,\"2365\":2,\"2366\":3,\"2408\":1,\"2477\":3,\"2485\":1,\"2596\":1,\"2614\":2,\"2615\":1,\"2693\":1,\"2698\":1,\"2735\":1,\"2929\":1,\"2933\":1,\"2935\":1,\"3113\":1,\"3192\":1,\"3201\":1,\"3214\":2,\"3252\":1,\"3346\":1,\"3410\":2,\"3430\":1,\"3435\":1,\"3438\":1,\"3527\":1,\"3544\":1,\"3548\":1,\"3552\":1,\"3563\":1,\"3573\":1,\"3587\":1,\"3598\":1,\"3670\":1,\"3772\":1,\"3855\":3,\"3880\":1,\"3962\":1,\"4030\":1,\"4131\":1,\"4182\":1,\"4196\":1,\"4242\":1,\"4260\":1,\"4281\":1,\"4289\":1,\"4311\":1,\"4317\":1,\"4322\":1,\"4326\":1,\"4340\":1,\"4349\":1,\"4360\":1,\"4371\":1,\"4382\":1,\"4398\":1,\"4429\":1,\"4443\":1,\"4451\":1,\"4563\":1,\"4566\":1,\"4616\":2,\"4646\":1,\"4847\":1,\"4850\":1,\"4857\":6,\"4873\":1,\"4883\":1,\"4979\":2,\"4999\":1,\"5139\":14,\"5190\":1,\"5408\":1,\"5417\":1,\"5424\":1,\"5429\":1,\"5466\":1,\"5488\":1,\"5553\":1,\"5607\":1,\"5617\":1,\"5634\":1,\"5643\":1,\"5705\":1,\"5834\":1,\"6009\":3,\"6035\":1,\"6163\":1,\"6189\":2,\"6219\":1,\"6285\":1,\"6299\":1,\"6301\":1,\"6304\":1,\"6305\":1,\"6308\":1,\"6311\":1,\"6314\":4,\"6357\":1,\"6404\":1,\"6601\":1,\"6605\":1,\"6607\":1,\"6769\":1,\"6857\":1,\"6898\":1,\"6933\":1,\"6949\":1,\"6979\":2,\"6983\":1,\"6989\":3,\"6993\":1,\"7002\":2,\"7006\":1,\"7066\":2,\"7067\":1,\"7068\":1,\"7069\":1,\"7071\":1,\"7072\":1,\"7073\":1,\"7106\":1,\"7114\":1,\"7136\":1,\"7142\":1,\"7147\":1,\"7151\":1,\"7165\":1,\"7236\":1,\"7239\":1,\"7251\":1,\"7261\":1}}],[\"1完全可以hold住任何场景\",{\"1\":{\"6992\":1}}],[\"1中的效率问题\",{\"1\":{\"6983\":1,\"7006\":1}}],[\"1对称加密算法有哪些\",{\"0\":{\"5091\":1}}],[\"1值等不被收集在彩虹表里\",{\"1\":{\"5054\":1,\"5071\":1}}],[\"1值等对应的原文\",{\"1\":{\"5054\":1}}],[\"1值等\",{\"1\":{\"5054\":1}}],[\"1存储技术选型\",{\"0\":{\"4680\":1}}],[\"1优化一\",{\"0\":{\"4668\":1}}],[\"1选举\",{\"0\":{\"4612\":1}}],[\"1zab\",{\"0\":{\"4592\":1}}],[\"1feign与openfeign的区别\",{\"0\":{\"4540\":1}}],[\"196\",{\"1\":{\"7033\":2}}],[\"1999\",{\"1\":{\"6989\":1}}],[\"19下午等了将近十多分钟面试官才进面试\",{\"1\":{\"5088\":1}}],[\"19700101\",{\"1\":{\"5064\":1}}],[\"19\",{\"0\":{\"4042\":1,\"4179\":1,\"4268\":1,\"4440\":1},\"1\":{\"4306\":1,\"4415\":1,\"7131\":1}}],[\"19th\",{\"1\":{\"60\":1,\"5173\":1}}],[\"1方式一\",{\"0\":{\"3854\":1}}],[\"1悲观锁\",{\"0\":{\"3813\":1}}],[\"1无锁\",{\"0\":{\"3792\":1}}],[\"1threadlocal\",{\"0\":{\"3755\":1}}],[\"1tcp\",{\"0\":{\"2442\":1,\"2481\":1,\"2524\":1,\"2593\":1}}],[\"1简述java内存模型\",{\"0\":{\"3705\":1}}],[\"1简介\",{\"0\":{\"688\":1,\"4636\":1}}],[\"1典型\",{\"0\":{\"3684\":1}}],[\"18666666666\",{\"1\":{\"5044\":1,\"5050\":1}}],[\"18\",{\"0\":{\"4036\":1,\"4177\":1,\"4266\":1},\"1\":{\"4305\":1,\"4414\":1,\"7130\":1}}],[\"18m\",{\"1\":{\"3597\":1}}],[\"18874368\",{\"1\":{\"3597\":1}}],[\"185\",{\"1\":{\"3527\":1}}],[\"1cpu\",{\"0\":{\"3543\":1}}],[\"1使用\",{\"0\":{\"3516\":1,\"3537\":1}}],[\"17\",{\"0\":{\"4019\":1,\"4175\":1,\"4256\":1},\"1\":{\"3498\":1,\"3503\":1,\"4304\":1,\"4413\":1,\"7129\":1}}],[\"1文件与目录的基本操作\",{\"0\":{\"3393\":1}}],[\"1docker与虚拟机的对比\",{\"0\":{\"3309\":1}}],[\"1有哪些解决办法\",{\"0\":{\"3248\":1,\"3266\":1,\"3277\":1}}],[\"1全量复制\",{\"0\":{\"3231\":1}}],[\"1全局锁\",{\"0\":{\"2852\":1}}],[\"1脱离原从节点\",{\"1\":{\"3222\":1}}],[\"1哨兵\",{\"0\":{\"3191\":1}}],[\"1过期的数据的删除策略了解么\",{\"0\":{\"3170\":1}}],[\"1分钟\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"1数据结构及适用场景\",{\"0\":{\"3096\":1}}],[\"1隐藏字段\",{\"0\":{\"3026\":1}}],[\"1脏读\",{\"0\":{\"2980\":1}}],[\"1record\",{\"0\":{\"2947\":1}}],[\"1表锁\",{\"0\":{\"2877\":1}}],[\"1底层数据结构\",{\"0\":{\"2753\":1}}],[\"1慢启动\",{\"0\":{\"2679\":1}}],[\"1重传机制\",{\"0\":{\"2648\":1}}],[\"1accept\",{\"0\":{\"2639\":1}}],[\"1add方法\",{\"0\":{\"810\":1}}],[\"1ip\",{\"0\":{\"2376\":1}}],[\"1仍普遍使用是因为其成熟稳定\",{\"1\":{\"2371\":1}}],[\"1已经足够满足大多数网站和应用的需要\",{\"1\":{\"2368\":1}}],[\"1xx\",{\"1\":{\"2194\":1}}],[\"1或者2\",{\"1\":{\"2010\":1}}],[\"1号\",{\"1\":{\"2007\":1,\"2028\":1}}],[\"1死锁的概念\",{\"0\":{\"1990\":1}}],[\"1管道\",{\"0\":{\"1945\":1}}],[\"1为什么使用线程\",{\"0\":{\"1882\":1}}],[\"1为什么要保证顺序\",{\"0\":{\"1502\":1}}],[\"1单\",{\"0\":{\"1814\":1}}],[\"1先来先服务调度算法\",{\"0\":{\"1912\":1}}],[\"1先来先服务\",{\"0\":{\"1753\":1}}],[\"1最佳页面置换算法\",{\"0\":{\"1725\":1}}],[\"1myisam\",{\"0\":{\"2727\":1}}],[\"1mysql\",{\"0\":{\"1709\":1}}],[\"1mmap\",{\"0\":{\"1785\":1}}],[\"1minorgc触发条件\",{\"0\":{\"386\":1}}],[\"1linux\",{\"0\":{\"1700\":1}}],[\"1预读失效会带来什么问题\",{\"0\":{\"1692\":1}}],[\"1g\",{\"1\":{\"1689\":1}}],[\"1多级页表\",{\"0\":{\"1662\":1}}],[\"1消费者组\",{\"0\":{\"1579\":1}}],[\"1发送类型\",{\"0\":{\"1541\":1}}],[\"1集群\",{\"0\":{\"1524\":1}}],[\"1原因\",{\"0\":{\"1495\":1}}],[\"1生产者\",{\"0\":{\"1457\":1}}],[\"1http\",{\"0\":{\"2191\":1,\"2347\":1}}],[\"1h\",{\"1\":{\"1427\":1}}],[\"1hashmap\",{\"0\":{\"1003\":1}}],[\"1hashmap的容量\",{\"0\":{\"959\":1}}],[\"1监听器\",{\"0\":{\"1339\":1}}],[\"1循环依赖的概念\",{\"0\":{\"1250\":1}}],[\"1谈谈你对\",{\"0\":{\"1217\":1}}],[\"1一级缓存\",{\"0\":{\"1133\":1}}],[\"14主机\",{\"1\":{\"7033\":1}}],[\"14自媒体文章上下架\",{\"0\":{\"4977\":1}}],[\"140\",{\"1\":{\"3527\":1}}],[\"1400\",{\"1\":{\"2972\":2,\"6644\":2}}],[\"14如果已经建立了连接\",{\"0\":{\"2636\":1}}],[\"14\",{\"0\":{\"4008\":1,\"4162\":1,\"4244\":1},\"1\":{\"1062\":1,\"3498\":1,\"3504\":1,\"3556\":1,\"3557\":1,\"3558\":1,\"4301\":1,\"4394\":1,\"4410\":1,\"7126\":1}}],[\"1这个值一定是个正数\",{\"1\":{\"1044\":1}}],[\"126145847\",{\"1\":{\"5103\":1}}],[\"126875303\",{\"1\":{\"3846\":1,\"5963\":1}}],[\"12345678\",{\"1\":{\"5060\":1}}],[\"123456\",{\"1\":{\"5045\":1}}],[\"123416498\",{\"1\":{\"1511\":1,\"6969\":1}}],[\"127\",{\"1\":{\"5019\":1}}],[\"127174391\",{\"1\":{\"2136\":2}}],[\"12素材列表查询\",{\"0\":{\"4936\":1}}],[\"120627481\",{\"1\":{\"6893\":1}}],[\"120166824\",{\"1\":{\"3390\":3}}],[\"1200\",{\"1\":{\"2972\":1,\"6644\":1}}],[\"120814088\",{\"1\":{\"2036\":1}}],[\"12服务器出现大量\",{\"0\":{\"2631\":1}}],[\"124891266\",{\"1\":{\"3063\":1,\"6714\":1}}],[\"124349832\",{\"1\":{\"1493\":1,\"6946\":1}}],[\"124580641\",{\"1\":{\"1493\":2,\"6946\":2}}],[\"124775218\",{\"1\":{\"1393\":1}}],[\"129526131\",{\"1\":{\"1153\":1,\"5734\":1}}],[\"12\",{\"0\":{\"4004\":1,\"4158\":1,\"4230\":1},\"1\":{\"995\":2,\"1016\":1,\"1035\":1,\"2144\":1,\"4299\":1,\"4336\":1,\"4392\":1,\"4408\":1,\"4439\":1,\"4645\":1,\"6218\":1,\"7124\":1,\"7161\":1}}],[\"128106266\",{\"1\":{\"6955\":3}}],[\"128和integer128相等吗\",{\"0\":{\"4158\":1}}],[\"128t\",{\"1\":{\"1690\":1}}],[\"128\",{\"1\":{\"986\":1,\"2375\":1,\"3134\":1,\"3487\":1,\"6790\":1}}],[\"125768706\",{\"1\":{\"640\":1}}],[\"16xxljob热点文章定时任务\",{\"0\":{\"4987\":1}}],[\"16分钟\",{\"0\":{\"4309\":1,\"7134\":1}}],[\"16位\",{\"1\":{\"2469\":1,\"2471\":1}}],[\"16\",{\"0\":{\"4014\":1,\"4166\":1,\"4253\":1},\"1\":{\"977\":1,\"981\":1,\"991\":1,\"995\":1,\"1062\":1,\"1068\":1,\"1069\":1,\"1076\":1,\"2375\":1,\"2477\":1,\"4303\":1,\"4412\":1,\"7128\":1}}],[\"1synchronized\",{\"0\":{\"3733\":1}}],[\"1string\",{\"0\":{\"3097\":1}}],[\"1select\",{\"0\":{\"1767\":1}}],[\"1setter注入的方式\",{\"0\":{\"1260\":1}}],[\"1serial\",{\"0\":{\"344\":1}}],[\"1size\",{\"0\":{\"973\":1}}],[\"1的低位就全是1\",{\"1\":{\"927\":1,\"5444\":1}}],[\"1jdk\",{\"0\":{\"898\":1}}],[\"1java\",{\"0\":{\"3515\":1},\"1\":{\"2143\":1}}],[\"1java里的进程有哪些状态\",{\"0\":{\"1852\":1}}],[\"1java官方推荐的实现方式\",{\"0\":{\"561\":1}}],[\"1java异常类层次结构\",{\"0\":{\"454\":1}}],[\"132516671\",{\"1\":{\"5115\":1}}],[\"13分布式id\",{\"0\":{\"4966\":1}}],[\"13370\",{\"1\":{\"3525\":1}}],[\"13369\",{\"1\":{\"3522\":1,\"3527\":1,\"3528\":1}}],[\"131166800\",{\"1\":{\"4756\":1}}],[\"131392335\",{\"1\":{\"3390\":2}}],[\"131916961\",{\"1\":{\"2189\":1}}],[\"13如果已经建立了连接\",{\"0\":{\"2633\":1}}],[\"1358933\",{\"1\":{\"2069\":1,\"5774\":1}}],[\"13\",{\"0\":{\"4006\":1,\"4160\":1,\"4240\":1},\"1\":{\"995\":1,\"4300\":1,\"4337\":1,\"4393\":1,\"4409\":1,\"7125\":1,\"7162\":1}}],[\"130494769\",{\"1\":{\"882\":1}}],[\"138\",{\"1\":{\"83\":1,\"5019\":1,\"5196\":1}}],[\"1什么是md5\",{\"0\":{\"5027\":1}}],[\"1什么是分布式一致性\",{\"0\":{\"4572\":1}}],[\"1什么是缓存穿透\",{\"0\":{\"3246\":1}}],[\"1什么是\",{\"0\":{\"3144\":1}}],[\"1什么是强制缓存\",{\"0\":{\"2227\":1}}],[\"1什么是代理模式\",{\"0\":{\"884\":1}}],[\"1什么是装饰器模式\",{\"0\":{\"871\":1}}],[\"1什么是反射机制\",{\"0\":{\"499\":1}}],[\"1说⼀说简单⼯⼚模式\",{\"0\":{\"861\":1}}],[\"1说一下\",{\"0\":{\"176\":1}}],[\"1比较几个重要的方法\",{\"0\":{\"809\":1}}],[\"1<=i<=n\",{\"1\":{\"681\":1}}],[\"1个结点\",{\"1\":{\"678\":1}}],[\"1树的定义\",{\"0\":{\"644\":1}}],[\"1q1\",{\"0\":{\"565\":1}}],[\"11月ietf给出了官方批准\",{\"1\":{\"6977\":1,\"7000\":1}}],[\"112252684\",{\"1\":{\"5103\":1}}],[\"11服务降级处理\",{\"0\":{\"4913\":1}}],[\"11服务器出现大量\",{\"0\":{\"2629\":1}}],[\"110847701\",{\"1\":{\"3790\":1,\"5801\":1}}],[\"11https\",{\"0\":{\"2344\":1}}],[\"11148\",{\"1\":{\"1522\":1}}],[\"1111进行按位与运算后的值是相等的\",{\"1\":{\"1032\":1}}],[\"11\",{\"0\":{\"1394\":1,\"2040\":1,\"3381\":1,\"4002\":1,\"4156\":1,\"4228\":1,\"5745\":1},\"1\":{\"491\":2,\"4298\":1,\"4335\":1,\"4391\":1,\"4407\":1,\"4438\":1,\"4460\":1,\"5378\":2,\"7123\":1,\"7160\":1}}],[\"113550163\",{\"1\":{\"553\":1,\"5430\":1}}],[\"113\",{\"1\":{\"480\":1}}],[\"1介绍\",{\"0\":{\"415\":1}}],[\"1类的生命周期\",{\"0\":{\"408\":1}}],[\"10热点文章实时计算\",{\"0\":{\"4911\":1}}],[\"10万级\",{\"1\":{\"4778\":1}}],[\"10min\",{\"0\":{\"4449\":1}}],[\"10ms\",{\"1\":{\"1417\":1}}],[\"104\",{\"1\":{\"3527\":1}}],[\"10s\",{\"1\":{\"3322\":1}}],[\"10如何优化\",{\"0\":{\"2625\":1}}],[\"10什么是\",{\"0\":{\"2577\":1}}],[\"10https\",{\"0\":{\"2310\":1}}],[\"10g\",{\"1\":{\"1455\":2,\"6903\":2}}],[\"10w\",{\"1\":{\"1431\":1,\"4759\":1}}],[\"100万级\",{\"1\":{\"4779\":1}}],[\"10086\",{\"1\":{\"3251\":1,\"6856\":1}}],[\"10000\",{\"1\":{\"3147\":1,\"6803\":1}}],[\"1000000\",{\"1\":{\"2182\":1}}],[\"10000000\",{\"1\":{\"634\":1}}],[\"1000\",{\"1\":{\"1610\":1,\"1613\":1,\"1617\":1,\"3608\":1,\"3609\":1,\"4895\":1}}],[\"100\",{\"1\":{\"1380\":1,\"1427\":1,\"1663\":1,\"1664\":1,\"2043\":1,\"2540\":1,\"2544\":1,\"2992\":1,\"2993\":2,\"2994\":1,\"3596\":1,\"5748\":1,\"6664\":1,\"6665\":2,\"6666\":1,\"7062\":1}}],[\"108538702\",{\"1\":{\"3059\":1}}],[\"108461284\",{\"1\":{\"1119\":1,\"5701\":1}}],[\"108988011\",{\"1\":{\"918\":1,\"5435\":1}}],[\"1011000110101110011111010011011\",{\"1\":{\"1037\":1}}],[\"10\",{\"0\":{\"1381\":1,\"3378\":1,\"4000\":1,\"4154\":1,\"4226\":1,\"4380\":1,\"4426\":1,\"4440\":1,\"4449\":1},\"1\":{\"334\":1,\"625\":1,\"1028\":2,\"1062\":1,\"1127\":1,\"1380\":1,\"1417\":1,\"1446\":1,\"1564\":1,\"2043\":1,\"2959\":1,\"3147\":1,\"4297\":1,\"4334\":1,\"4368\":1,\"4379\":1,\"4390\":1,\"4406\":1,\"4437\":1,\"4459\":1,\"5708\":1,\"5748\":1,\"6631\":1,\"6803\":1,\"7122\":1,\"7159\":1}}],[\"1024\",{\"1\":{\"250\":6,\"1664\":2,\"1770\":1,\"2111\":1,\"3772\":2}}],[\"1标记\",{\"0\":{\"323\":1}}],[\"1引用计数算法\",{\"0\":{\"296\":1}}],[\"1如何判断对象是否可回收\",{\"0\":{\"295\":1}}],[\"1运行时常量池\",{\"0\":{\"284\":1}}],[\"1年轻代\",{\"0\":{\"229\":1}}],[\"1程序计数器\",{\"0\":{\"188\":1}}],[\"15es文章自动审核完成构建索引\",{\"0\":{\"4982\":1}}],[\"15min\",{\"0\":{\"4440\":1}}],[\"15分钟\",{\"0\":{\"4286\":1,\"7111\":1},\"1\":{\"3147\":1,\"6803\":1}}],[\"1500\",{\"1\":{\"2567\":1}}],[\"15\",{\"0\":{\"4013\":1,\"4164\":1,\"4251\":1},\"1\":{\"83\":1,\"267\":1,\"1062\":1,\"4302\":1,\"4411\":1,\"5196\":1,\"7127\":1}}],[\"1\",{\"0\":{\"175\":1,\"176\":1,\"296\":1,\"300\":1,\"307\":1,\"453\":1,\"454\":1,\"463\":1,\"469\":1,\"476\":1,\"482\":1,\"487\":1,\"555\":1,\"565\":1,\"571\":1,\"578\":1,\"595\":1,\"599\":1,\"614\":1,\"617\":1,\"626\":1,\"713\":1,\"745\":1,\"774\":1,\"810\":1,\"820\":1,\"850\":1,\"917\":1,\"953\":1,\"959\":1,\"973\":2,\"985\":2,\"999\":2,\"1002\":1,\"1003\":1,\"1006\":1,\"1078\":1,\"1091\":1,\"1155\":1,\"1289\":1,\"1447\":1,\"1619\":1,\"1766\":1,\"1767\":1,\"1773\":1,\"1850\":1,\"1851\":1,\"1852\":1,\"1859\":1,\"1876\":1,\"2082\":1,\"2115\":1,\"2191\":1,\"2193\":1,\"2213\":1,\"2218\":1,\"2225\":1,\"2227\":1,\"2237\":1,\"2259\":3,\"2270\":3,\"2289\":3,\"2305\":1,\"2310\":1,\"2344\":1,\"2347\":4,\"2357\":1,\"2373\":1,\"2376\":1,\"2441\":1,\"2442\":1,\"2451\":1,\"2454\":1,\"2460\":1,\"2466\":1,\"2479\":1,\"2481\":1,\"2503\":1,\"2516\":1,\"2713\":1,\"2714\":1,\"2726\":1,\"2727\":1,\"3088\":1,\"3097\":1,\"3108\":1,\"3116\":1,\"3123\":1,\"3131\":1,\"3248\":1,\"3288\":1,\"3331\":1,\"3392\":1,\"3393\":1,\"3409\":1,\"3412\":1,\"3414\":1,\"3416\":1,\"3418\":1,\"3420\":1,\"3423\":1,\"3425\":1,\"3516\":1,\"3520\":1,\"3523\":1,\"3526\":1,\"3529\":1,\"3547\":2,\"3562\":1,\"3584\":1,\"3620\":1,\"3632\":1,\"3666\":1,\"3704\":1,\"3705\":1,\"3710\":1,\"3714\":1,\"3725\":1,\"3777\":1,\"3848\":1,\"3934\":1,\"4114\":1,\"4210\":1,\"4462\":1,\"4558\":1,\"4653\":1,\"5026\":1,\"5027\":1,\"5030\":1,\"5035\":1,\"5037\":1,\"5038\":2,\"5085\":1,\"5087\":1,\"5091\":1,\"5093\":1,\"5095\":1,\"5098\":1,\"5455\":1,\"6970\":1,\"7060\":3,\"7065\":2,\"7187\":1},\"1\":{\"25\":12,\"47\":1,\"70\":1,\"76\":1,\"119\":2,\"230\":2,\"265\":1,\"266\":1,\"297\":2,\"334\":1,\"486\":1,\"518\":1,\"526\":1,\"534\":1,\"577\":2,\"629\":1,\"630\":1,\"634\":1,\"646\":1,\"677\":1,\"682\":1,\"716\":1,\"735\":1,\"747\":1,\"756\":1,\"757\":1,\"771\":1,\"801\":1,\"812\":2,\"816\":2,\"818\":1,\"824\":1,\"826\":1,\"858\":1,\"927\":1,\"955\":1,\"971\":1,\"977\":1,\"980\":1,\"981\":1,\"982\":1,\"1007\":1,\"1016\":1,\"1017\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1023\":1,\"1029\":1,\"1044\":2,\"1065\":1,\"1069\":1,\"1079\":2,\"1122\":1,\"1175\":1,\"1179\":1,\"1200\":1,\"1270\":1,\"1291\":1,\"1306\":1,\"1313\":1,\"1364\":1,\"1375\":1,\"1396\":1,\"1417\":1,\"1437\":1,\"1474\":2,\"1496\":1,\"1607\":1,\"1715\":1,\"1716\":1,\"1742\":1,\"1745\":1,\"1796\":1,\"1965\":1,\"1966\":1,\"1993\":2,\"2020\":1,\"2022\":2,\"2025\":1,\"2091\":2,\"2111\":1,\"2116\":1,\"2117\":1,\"2121\":1,\"2174\":1,\"2216\":2,\"2267\":2,\"2292\":1,\"2293\":2,\"2296\":2,\"2300\":2,\"2301\":2,\"2318\":1,\"2321\":2,\"2326\":1,\"2333\":1,\"2341\":1,\"2348\":3,\"2349\":1,\"2351\":2,\"2359\":2,\"2365\":1,\"2366\":2,\"2367\":1,\"2400\":1,\"2447\":2,\"2448\":1,\"2449\":1,\"2450\":2,\"2482\":1,\"2527\":1,\"2528\":2,\"2529\":2,\"2544\":2,\"2594\":2,\"2680\":1,\"2686\":1,\"2694\":2,\"2705\":1,\"2732\":1,\"2755\":1,\"2824\":1,\"2925\":1,\"2930\":1,\"2959\":1,\"3051\":1,\"3053\":1,\"3102\":2,\"3147\":1,\"3171\":2,\"3201\":1,\"3233\":1,\"3250\":1,\"3251\":1,\"3259\":1,\"3262\":3,\"3344\":1,\"3390\":1,\"3410\":2,\"3429\":1,\"3434\":1,\"3437\":1,\"3499\":1,\"3527\":2,\"3544\":1,\"3548\":1,\"3549\":1,\"3563\":1,\"3564\":1,\"3587\":1,\"3594\":1,\"3629\":1,\"3669\":2,\"3674\":1,\"3679\":1,\"3689\":1,\"3695\":1,\"3742\":2,\"3772\":2,\"3775\":1,\"3819\":1,\"3827\":1,\"3855\":1,\"3880\":1,\"4028\":1,\"4130\":1,\"4182\":1,\"4195\":1,\"4241\":1,\"4257\":1,\"4280\":1,\"4288\":1,\"4310\":1,\"4316\":1,\"4321\":1,\"4325\":1,\"4339\":1,\"4348\":1,\"4359\":1,\"4370\":1,\"4381\":1,\"4397\":1,\"4428\":1,\"4442\":1,\"4450\":1,\"4589\":1,\"4615\":1,\"4620\":2,\"4646\":1,\"4750\":1,\"4826\":2,\"4846\":1,\"4857\":3,\"4871\":1,\"4895\":2,\"4974\":2,\"4979\":2,\"4999\":1,\"5019\":3,\"5138\":12,\"5160\":1,\"5183\":1,\"5189\":1,\"5232\":2,\"5406\":1,\"5414\":1,\"5422\":1,\"5429\":1,\"5444\":1,\"5488\":1,\"5552\":1,\"5602\":1,\"5612\":1,\"5632\":1,\"5643\":1,\"5689\":1,\"5704\":1,\"5832\":2,\"5842\":1,\"5848\":1,\"5859\":1,\"5864\":1,\"5937\":1,\"5974\":2,\"6009\":1,\"6035\":1,\"6188\":1,\"6193\":2,\"6219\":1,\"6260\":2,\"6282\":2,\"6301\":1,\"6401\":1,\"6424\":1,\"6496\":1,\"6597\":1,\"6602\":1,\"6631\":1,\"6758\":2,\"6803\":1,\"6829\":2,\"6855\":1,\"6856\":1,\"6864\":1,\"6867\":3,\"6897\":1,\"6923\":2,\"6949\":1,\"6955\":1,\"6973\":1,\"6983\":1,\"6989\":2,\"6992\":1,\"6993\":2,\"7006\":1,\"7061\":3,\"7062\":2,\"7063\":3,\"7064\":3,\"7066\":4,\"7067\":2,\"7068\":2,\"7069\":2,\"7105\":1,\"7113\":1,\"7135\":1,\"7141\":1,\"7146\":1,\"7150\":1,\"7164\":1,\"7235\":1,\"7249\":1}}],[\"页表项\",{\"1\":{\"1663\":1,\"1664\":2,\"1669\":1}}],[\"页表包含物理页每页所在物理内存的基地址\",{\"1\":{\"1661\":1}}],[\"页表里的页表项中除了物理地址之外\",{\"1\":{\"1638\":1}}],[\"页号作为页表的索引\",{\"1\":{\"1661\":1}}],[\"页号和页内偏移\",{\"1\":{\"1661\":1}}],[\"页与页之间是紧密排列的\",{\"1\":{\"1658\":1}}],[\"页脚\",{\"1\":{\"21\":1,\"138\":1,\"5134\":1,\"5251\":1}}],[\"页面单位时间的访问数\",{\"1\":{\"3106\":1,\"6762\":1}}],[\"页面置换算法的功能是\",{\"1\":{\"1718\":1}}],[\"页面结构\",{\"0\":{\"129\":1,\"5242\":1}}],[\"页面内容\",{\"0\":{\"122\":1,\"5235\":1}}],[\"页面配置\",{\"0\":{\"114\":1,\"5227\":1},\"1\":{\"121\":1,\"5234\":1}}],[\"页面引入配置\",{\"1\":{\"33\":1,\"5146\":1}}],[\"页面信息\",{\"0\":{\"116\":1,\"5229\":1},\"1\":{\"15\":1,\"5128\":1}}],[\"页面展示\",{\"1\":{\"6\":1,\"98\":1,\"5119\":1,\"5211\":1}}],[\"评论\",{\"1\":{\"20\":1,\"135\":1,\"4662\":1,\"5133\":1,\"5248\":1,\"7181\":1}}],[\"贡献者\",{\"1\":{\"16\":1,\"134\":1,\"5129\":1,\"5247\":1}}],[\"侧边栏\",{\"1\":{\"13\":1,\"137\":1,\"5126\":1,\"5250\":1}}],[\"展示\",{\"0\":{\"27\":1,\"5140\":1},\"1\":{\"5\":1,\"97\":1,\"5118\":1,\"5210\":1}}],[\"主内存\",{\"1\":{\"3707\":1,\"5906\":1}}],[\"主观下线\",{\"1\":{\"3204\":1,\"3206\":1}}],[\"主观下线和客观下线\",{\"1\":{\"3203\":1}}],[\"主库会根据从库各自的复制进度\",{\"1\":{\"3244\":1}}],[\"主库会把第二阶段执行过程中新收到的写命令\",{\"1\":{\"3236\":1}}],[\"主库会把当前所有的数据都复制给从库\",{\"1\":{\"3233\":1}}],[\"主库会在内存中用专门的\",{\"1\":{\"3235\":1}}],[\"主库不会被阻塞\",{\"1\":{\"3235\":1}}],[\"主库执行\",{\"1\":{\"3235\":1}}],[\"主库将所有数据同步给从库\",{\"1\":{\"3234\":1}}],[\"主库将写操作同步给从库\",{\"1\":{\"3230\":1}}],[\"主库收到\",{\"1\":{\"3233\":1}}],[\"主库根据这个命令的参数来启动复制\",{\"1\":{\"3233\":1}}],[\"主库确认回复后\",{\"1\":{\"3232\":1}}],[\"主库\",{\"1\":{\"3229\":1,\"3233\":1}}],[\"主库既然判定客观下线了\",{\"1\":{\"3215\":1}}],[\"主库接受到这个命令后\",{\"1\":{\"3201\":1}}],[\"主库的自增值是什么\",{\"1\":{\"2934\":1,\"6606\":1}}],[\"主从\",{\"1\":{\"4786\":1,\"4787\":1}}],[\"主从库就实现同步了\",{\"1\":{\"3236\":1}}],[\"主从库间就可以开始同步了\",{\"1\":{\"3232\":1}}],[\"主从库之间采用的是读写分离的方式\",{\"1\":{\"3228\":1}}],[\"主从复制\",{\"0\":{\"3190\":1,\"6848\":1}}],[\"主从复制的场景\",{\"1\":{\"2933\":1,\"6605\":1}}],[\"主从结构\",{\"1\":{\"3145\":1,\"6801\":1}}],[\"主从机房同步有什么问题呢\",{\"0\":{\"2070\":1,\"5775\":1}}],[\"主键使用数值类型时通常会比使用字符类型更快\",{\"1\":{\"4115\":1}}],[\"主键一般都是不可被修改的\",{\"1\":{\"2803\":1,\"6475\":1}}],[\"主键索引\",{\"0\":{\"6453\":1},\"1\":{\"2778\":1,\"4168\":1,\"6447\":1}}],[\"主动关闭连接的\",{\"1\":{\"2602\":1}}],[\"主机\",{\"1\":{\"3328\":1,\"4576\":1,\"4577\":1,\"7035\":1,\"7036\":1,\"7037\":1,\"7039\":1,\"7040\":3,\"7042\":1,\"7046\":1,\"7047\":1,\"7049\":1,\"7050\":2}}],[\"主机通信\",{\"1\":{\"3327\":1}}],[\"主机和注册表\",{\"1\":{\"3326\":1}}],[\"主机的\",{\"1\":{\"2578\":1}}],[\"主机会通过广播发送\",{\"1\":{\"2379\":1}}],[\"主线程\",{\"1\":{\"3150\":1,\"3151\":1,\"6806\":1,\"6807\":1}}],[\"主线程只需要把新连接传给子线程\",{\"1\":{\"1849\":1,\"6391\":1}}],[\"主线程只负责接收新连接\",{\"1\":{\"1848\":1,\"6390\":1}}],[\"主线程和子线程的交互很简单\",{\"1\":{\"1849\":1,\"6391\":1}}],[\"主线程和子线程分工明确\",{\"1\":{\"1848\":1,\"6390\":1}}],[\"主线程中的\",{\"1\":{\"1843\":1,\"6385\":1}}],[\"主线程继续执行而不会产生停滞等待的情况\",{\"1\":{\"1373\":1}}],[\"主gc\",{\"1\":{\"236\":1}}],[\"主流虚拟机都是可扩展的\",{\"1\":{\"228\":1}}],[\"主管\",{\"1\":{\"203\":1}}],[\"主题了解吗\",{\"1\":{\"4290\":1,\"7115\":1}}],[\"主题包含了一个自定义徽章可以使用\",{\"1\":{\"127\":1,\"5240\":1}}],[\"主题扩展了更多\",{\"1\":{\"42\":1,\"5155\":1}}],[\"主题扩展\",{\"0\":{\"41\":1,\"5154\":1}}],[\"主要有以下字段\",{\"1\":{\"6699\":1}}],[\"主要有两个作用\",{\"1\":{\"3038\":1,\"6706\":1}}],[\"主要因为要考虑子进程\",{\"1\":{\"6377\":1}}],[\"主要应用于大数据领域\",{\"1\":{\"4794\":1}}],[\"主要依赖\",{\"1\":{\"4593\":1,\"6166\":1}}],[\"主要依赖于jwt作为用户身份令牌在多个系统中共享\",{\"1\":{\"4065\":1}}],[\"主要为\",{\"1\":{\"4563\":1,\"6163\":1}}],[\"主要负责啥\",{\"0\":{\"4210\":1}}],[\"主要负责加载\",{\"1\":{\"426\":1,\"5317\":1}}],[\"主要区别是一级缓存仅在一个sqlsession内有效\",{\"1\":{\"4072\":1}}],[\"主要区别在于因为实现方式的不同\",{\"1\":{\"776\":1}}],[\"主要工作是什么\",{\"0\":{\"3934\":1}}],[\"主要在是对大模型进行开发应用\",{\"1\":{\"3933\":1,\"4113\":1,\"4209\":1}}],[\"主要包括两个操作\",{\"1\":{\"3677\":1,\"5846\":1}}],[\"主要作为进程间以及同一进程内不同线程之间的同步手段\",{\"1\":{\"3462\":1}}],[\"主要利用\",{\"1\":{\"3312\":1}}],[\"主要方面\",{\"1\":{\"2562\":1}}],[\"主要原因有两个方面\",{\"1\":{\"2561\":1}}],[\"主要原因是位运算直接对内存数据进行操作\",{\"1\":{\"1017\":1}}],[\"主要步骤是\",{\"1\":{\"2104\":1}}],[\"主要步骤为\",{\"1\":{\"2097\":1}}],[\"主要步骤可见代码的注释\",{\"1\":{\"1388\":1}}],[\"主要的流程解释下\",{\"1\":{\"2045\":1,\"5750\":1}}],[\"主要的方法有两种\",{\"1\":{\"1986\":1,\"6245\":1}}],[\"主要功能如下\",{\"1\":{\"1363\":1,\"5688\":1}}],[\"主要功能与配置演示\",{\"0\":{\"3\":1,\"5116\":1}}],[\"主要是为了解决http\",{\"1\":{\"6983\":1,\"7006\":1}}],[\"主要是为全量复制做准备\",{\"1\":{\"3232\":1}}],[\"主要是通过继承方式使用\",{\"1\":{\"3633\":1,\"5874\":1}}],[\"主要是单线程事件循环和\",{\"1\":{\"3091\":1,\"6747\":1}}],[\"主要是将要被修改的数据的最新记录中的db\",{\"1\":{\"3045\":1}}],[\"主要是因为\",{\"1\":{\"2757\":1,\"6426\":1}}],[\"主要是因为除了\",{\"1\":{\"351\":1}}],[\"主要是从速度\",{\"1\":{\"1069\":1}}],[\"主要⽬的是解耦合服务提供者和使⽤者\",{\"1\":{\"885\":1,\"5503\":1}}],[\"主要用来接收前端传递给后端的数据\",{\"1\":{\"4123\":1}}],[\"主要用来提高\",{\"1\":{\"3145\":1,\"6801\":1}}],[\"主要用来加载\",{\"1\":{\"425\":1,\"5316\":1}}],[\"主要用于实现进程间的互斥与同步\",{\"1\":{\"1963\":1}}],[\"主要用于学习\",{\"1\":{\"1430\":1}}],[\"主要用于spring\",{\"1\":{\"1333\":1,\"5654\":1}}],[\"主要用在迭代器里\",{\"1\":{\"796\":1}}],[\"主要不足是只使用了内存的一半\",{\"1\":{\"332\":1}}],[\"主要从\",{\"1\":{\"28\":1,\"5141\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"花有重开日\",{\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,Et(t,{fields:[p.heading,p.text,p.customFields],storeFields:[p.heading,p.text,p.customFields]})]));self.onmessage=({data:{query:e,locale:t,options:s}})=>{self.postMessage(kt(e,vt[t],s))};
//# sourceMappingURL=index.js.map
